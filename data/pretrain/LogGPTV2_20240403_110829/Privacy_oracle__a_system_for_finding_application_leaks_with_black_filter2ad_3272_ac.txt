list is summarized in Table 2. Since we do not intend to implicate
speciﬁc software vendors—we’re more interested in understanding
the trends of information exposure—we will hereafter refer to the
applications at most by category only and not by name.
Ad-Aware 2007, OneClick iPod Video Converter, Advanced
WindowsCare, Real Player, AOL Internet Messenger, Spybot,
Avant Browser, VersionTracker Pro. Avast Home Edition, Ir-
fanView, AVG Anti-Virus Free Edition, iTunes Media Player,
BearFlix, Limewire, BitComet, MediaCell Video Converter,
Camfrog Video Chat, Morpheus, DivX, Windows Media Player,
Gmail, WinRAR, ICQ, WinZip, Interactual Player, Yahoo! Mes-
senger
Table 2: The 26 applications analyzed by Privacy Oracle.
Ideally, we would like an experiment where we have ground truth
for N applications and evaluate our results in terms of false posi-
tives and missed detections. All of the test applications do provide
details or a link to their privacy policy during installation. However,
the language describing the policy is not easily translated into the
speciﬁcs of information exposure and we did not ﬁnd any publicly
available documentation offering ground truth of any of the test ap-
plications5. Hence, we use our domain knowledge for validating
the ﬁndings. Note that what we report in this section does not in-
clude an exhaustive listing of leaks; instead, this section illustrates
anecdotes that both reveal how applications expose information and
highlight Privacy Oracle’s capability. The following three sections
describe our ﬁndings.
5.2
Information Exposure in the Clear
Our tests reveal that at least ﬁve applications prompt for users’
personal information such as email address, name, age, or gen-
der during the installation or the initial use of the application and
transmit them in the clear. Three applications send email addresses
when users opt in to an email newsletter subscription (T1,T2,T3).
One application additionally collects and transmits a birth month
and year during the subscription process, and warns that users must
be 13 years old to register. Surprisingly, even when the user is tech-
nically too young to subscribe, his email address and age informa-
tion is transmitted before his subscription is denied (T3). Whether
inadvertant or deliberate, it is certainly unexpected that a software
vendor would collect information about a population with which
it explicitly states it will not do business with6. After installa-
tion, another application opens a trialpay.com Web page (a third
party server) providing a user an opportunity to subscribe to trial-
pay.com’s service with his email address and name. Table 3 shows
the exposed information captured by NetDialign. Throughout the
paper, results are masked with ## when the masked part is indica-
tive of the test application’s name.
T1
T2
T3
Exposed information
email=crapivy%40intel.com
ﬁrstname=privacy&lastname=oracle&email=PI:EMAIL
isminor=true&email=PI:EMAIL&birthmonth=2&birth
year=2000
Table 3: Personal information transmitted in the clear at installation.
This information is optional in that a user is not required to provide
the information in order to use the application. Test inputs are email:
PI:EMAIL (T1); name:privacy oracle, email:PI:EMAIL
(T2); email:crapivy, birthmonth:2, birthyear:2000 (T3).
In the above three cases, the information is sent only once to the
service provider. While information is deﬁnitely being collected
by software company servers, one may argue that since this expo-
sure rarely happens (e.g., once per installation), the threat posed by
monitoring third parities is limited, as the chance of overhearing
this information is small. Next, we describe two applications that
frequently transmit email, gender, age, or location in the clear.
A weather application bundled with one of the download.com
applications is installed by default unless a user un-checks an op-
tion. During its installation process, the application prompts the
user for a zip code, which is a reasonable request given that many
applications offer location-speciﬁc customization, but surprisingly
it also requires the entry of age and gender information (The pro-
gram won’t install unless this information is provided.). We ﬁnd
that while the weather application is running, all three pieces of
the user information are transmitted in the clear to the weather ap-
plication’s server every time it pulls updated application data (T4).
(E.g., we observed updates once every ﬁve minutes.) Likewise, as
previously known our test ﬁnds that a popular communicator trans-
mits a user’s email account name in the clear when it updates the
inbox (T5). Table 4 shows the results.
Exposed information
age=31 & gender=m
Destination
www.##.com
x.imwx.com
##chat=crapivy@##.com *.mail.##.com
loc=98125
T4
T5
Table 4: Personal information transmitted in the clear at every update. This
information is required by the application. Test inputs are age:31, gen-
der:male, zip code:98125 (T4); email:crapivy@##.com (T5).
Given that both the weather application and the communicator
are the kinds of applications that are often left running unattended
on a machine for long periods of time, the frequent exposure of
users’ personal information could be easily captured and exploited
by third parties, such as when a user is connected at an open wire-
less hot spot. This information exposure, while clearly compromis-
ing privacy, can also lead to additional security implications such
as increased risk for spamming and stalking.
5One test application, Limewire, is, however, open source, offering
promise for obtaining ground truth if one is equipped with source-
code based information leak analysis tools.
6We have not tested, however, whether newsletters are sent to the
email address of a fake minor that we used for testing.
5.3 Harvested or Inferred Information Expo-
sure
A second class of information exposure that we discovered is
more subtle. With no user assistance, applications sometimes
gather system conﬁguration information or make inferences about
a user’s location and transmit this data to remote servers. For ex-
ample, one media player is known to multicast the user’s machine
name to peers so that neighbors can automatically conﬁgure ﬁle
sharing. While one would argue that this information improves
user experience, we present two instances of harvested information
being used in contexts beyond their intended use.
The ﬁrst example shows a popular media player transmitting the
machine name along with the user’s username and password. For
Windows operating systems, a machine name is assigned during
the installation process. A default choice is an organization name
(a user is asked to provide an organization name during the OS
installation) appended with a random string. Users can change the
name to something obscure if they are concerned7.
In addition,
since we know that the media player in question uses a machine
name to enable ﬁle sharing, we scrutinized it further to check
whether this information was being exposed beyond the context of
the local network. To test the exposure of the machine name, we
ran this media application using conﬁgurations with two different
machine names and collected network traces for each. In the ﬁrst
setting, the machine name was left unmodiﬁed INTEL-626CECA5E
as initially assigned by the operation system.
Second, we
changed the machine name by editing the hostname registry under
HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services
\Tcpip\ Parameters to JOUFN-736DFD86F and ran the test (T6).
An initial difﬁculty that we faced in analyzing the application was
in overcoming its use of encrypted connections. However, using
the HTTP Analyzer [6] tool, we found that in the encrypted con-
nections, the player transmitted a machine name to an application
server along with the provided username and password when a
user signed in to their online music store (T7). Table 5 shows the
results.
Exposed infomation
INTEL-625CECA5E 05 local
T6
T7 machineName=INTEL-625CECA5E
Destination
224.0.0.251:53
*.#####.com:443
Table 5: Machine name transmitted in the clear to multicast address (T6)
when the media application is in use and in the encrypted connection (T7)
to an application server when a user signs-in to the online music store. The
results of T6 contain non-printable bytes and they are represented in hex.
Test inputs are hostname:INTEL-625CECA5E for both T6 and T7.
The second example shows user information being exposed due
to the sharing of cookies by two different applications that belong
to the same vendor. The user’s location information (zip code, lat-
itude and longitude) which is set in a cookie when the user ﬁrst
visits the Web portal is shared by the vendor’s media player and
transmitted in the clear to advertisement servers. One would expect
that the cookie set by the Web portal would only used for delivering
customized Web pages. However, it is unexpected that this infor-
mation is shared by other applications and exposed in the clear to
advertisement servers (ads1.###.com and rad.###.com) each time
the media player by the same vendor is launched.
7By snifﬁng multicast trafﬁc at a public wireless network, one can
easily ﬁgure out who is running this particular media player via
the machine name that is frequently linked to the user’s name (e.g.,
Jaeyeon-Laptop) or the organization (e.g., INTEL-Mobile12).
To conﬁrm this, we collected network traces by connecting to
the Web portal from two different geographical locations. First, we
connected to the Web portal directly from our machine (located in
Seattle) and conﬁrmed that the cookie was set to [zip: 98105, la:
47.6115, lo: 122.3343, c: US]. Second, we conﬁgured our browser
to go through an open proxy in France and connected to the server.
This time, the cookie was set to [zip: 92989, la: 48.8651, lo: 2.35,
c: FR]. Although we do not know exactly where the open proxy is
located, the latitude and longitude falls in somewhere in Paris and
we suspect that this is approximately close. Having set the location
cookies, the media player was launched and network traces were
collected.
5.4
Information Exposure to Third-Parties
In addition to identifying information that is exposed, the ﬂow
alignment mechanism of Privacy Oracle also allows us to identify
the receivers of this information. Privacy Oracle is able to separate
the target application servers from third-party servers and detect in-
formation exposure to third party servers by comparing the second
level domain names (e.g., foo.com) of recipients8. The nature of
the information leaked to third-party servers ranges from the super-
ﬁcially innocuous, random-looking user-speciﬁc string (that can be
used to identify a user and to link his sessions together over time),
to the explicit details of user search activity. In the rest of this sec-
tion, we present three examples of information exposure to third-
party servers.
Exposure through unique user IDs. We found that out of the six
communicator applications in our test set, two of them generate a
unique user identiﬁer associated with a user account. This unique
identiﬁer is exposed to third party servers (T9, T10). A media ap-
plication also sends a unique user ID to a 2o7.net (online marketing
ﬁrm) server when the user signs in to the online music store (T11).
It is encouraging, however, that no plaintext user information was
found among the tested applications to accompany the user identi-
ﬁers. Table 6 shows the results.
T9
T10
Exposed information
n=5a37g0qe6tjhh,
l=2h0f8lo/o
c15=Y21weXJhdg%3D%3D
ESN=Y21weXJhdg%3D%3D
, SN=cipyrav
SN=cipyrav
T11 X-Dsid=203328801
Destinations
amch.questionmarket.com
*.2o7.net
pr.atwola.com
servedby.advertising.com,
js.revsci.net,
*.2o7.net
Table 6: Unique IDs associated with a user account are exposed to third
parties at sign-on. Test inputs are crapivy (T9), cipyrav (T10), and varypic
(T11).
Exposure through a bundled toolbar. Nine out of twenty down-
load.com applications offer to install a popular third-party search
toolbar. In all cases, the toolbar is installed by default unless users
opt out of the offer. We note that two applications do not provide
an explicit way for users to opt out9. We expect that during the
installation of the toolbar, the name of the application responsi-
ble for initiating the toolbar installation might be transmitted to the
8Comparing names alone may lead us to inaccurately classify the
target application servers as third parties if different names are
used. In all the cases that we reported in this section, we visited
the server at issue (if it is a Web server) to double check.
9We went through the installation process of these two applications
multiple times to double check to see whether they were any hidden
options that we missed.
search engine’s servers. Thus, information that a user has installed
a particular application is known to the third party search engine.
However, we found that the name of the application through which
the toolbar was installed was transmitted every time the tool bar
was used.
Additionally, several
toolbars send user identifying cookies
along with the search request while the user is logged into their ser-
vice. We are concerned that this information when combined with
a search engine’s user identifying cookie could expose the user’s
personal application usage, especially when the usage is somewhat
sensitive. For instance, a popular ﬁle sharing utility is among the
nine download.com applications offering the toolbar. A user might
not be aware that the installation of this ﬁle sharing utility can eas-
ily be identiﬁed from any search requests made through the toolbar.
Exposure through application’s search interface. Two me-
dia players in our download.com test set provide an interface in
which users can search for media ﬁles available on the Internet.
Our analysis shows that the users’ search terms made from these
media players are also forwarded to advertisement servers.
In
one case, a media player forwards a search query to three adver-
tisement servers (ad.doubleclick.net, ad.yieldmanager.com,
www.google-analytics.com). This media player (FooPlayer)
assigns a unique ID per installation (e.g., PBR=5117819) and
sends this ID along to both ad.doubleclick.net and to
www.google-analytics.com with the speciﬁcs of a query (e.g.,
PN=FooPlayer, OS=WinNT%205.1.2500, query=privacy). The
second media player’s behavior is similar. Upon receiving a query,
it sends a GET request to a 2o7.net server with the query term
along with its product name and OS info.
6. DISCUSSION
In this section, we investigate the efﬁciency of NetDialign across
the eleven test cases presented in the previous section. We iden-
tify the main sources of false positives generated by NetDialign.
An encouraging result from our analysis is that the false positive
rate of NetDialign is independent of the output message size and is
primarily due to reordering of messages. Detailed analysis of the
false-negative rate of NetDialign is limited by the lack of ground
truth for the target applications. To conclude, we list some of the
limitations of Privacy Oracle that we plan to address as future work.
6.1 NetDialign’s Efﬁciency
Since NetDialign relies on statistical measures to separate out
signiﬁcantly different regions in a pair of messages, false positives
occur when the regions of low similarity in the network trace re-
sult from factors other than the perturbed test parameters. False
positives were manually identiﬁed from the output generated by
the NetDialign algorithm based on domain knowledge of the net-
work traces. Figure 4 shows the total number of segments that
NetDialign ﬂagged as different along with the count for false pos-
itives for the eleven test cases. From the graph we observe that
across all the test cases the maximum number of false positives
is only ﬁfteen. We also observe that the false positive rate does
not increase as the number of bytes inspected grows. For ex-
ample, Privacy Oracle erroneously reported twelve segments as
leaks for T5, but nonetheless this is signiﬁcantly small compared
to the size of network traces to be searched (92.1 KB). Further-
more, we note that most of false positives are straightforward to
identify as they corresponded to obviously innocuous ﬁle names
(e.g., cornerpng_upperright.png) or protocol keywords (e.g.,
Accept-Encoding).