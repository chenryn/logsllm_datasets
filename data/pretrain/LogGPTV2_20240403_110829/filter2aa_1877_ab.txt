drown in my face, I started to think the issue was exploitable and I knew how to exploit it but I 
had to confirm it. 
I looked at the subkeys under HKLM\Software\Microsoft\Tracing key, they were many, I found 
that they had the same or similar names as Windows services which made me think that many 
Windows services used that key.
At that time I didn't need to know what those registry keys were used for, it was enough 
knowing that they were read and possible written by some Windows services. Later when 
researching another vulnerability not mentioned here I found out that those registry keys are 
used by a tracing functionality implemented by some services. This functionality logs errors, 
debug messages, etc. related to the services. Services using this functionality automatically 
monitor the registry key for changes so if there is a change all the key values are automatically 
read again by the services.
Let's see now why I though the permissions issue was exploitable and I knew how to exploit it. 
If you look at the registry values under  “HKLM\Software\Microsoft\Tracing\tapisrv” you will 
find out one value named “FileDirectory” that has a default value of “%windir%\tracing”, that 
-7-                                       www.argeniss.com
Argeniss – Information Security & Software
value is a Windows folder name that is probably read by services and then used to access files. 
I located and opened the folder with Windows Explorer but it was empty. Looking at the items 
displayed by ProcMon I saw that there weren't items showing access to that folder. Then with a 
new look at the key values I saw “EnableFileTracing” value which had a value of “0”, the value 
name  looked  self  describing,  I  had  to  change  that  value  to  “1” and  look  if  something 
happened, I did it but nothing happened at that time.
I thought, let's try restarting the service, I stopped it and suddenly a file named tapisrv.log 
was created in “c:\windows\tracing” folder. Looking at ProcMon I could see that TapiSrv was 
accessing (writing) that file after reading the folder name from the registry key. I had to be 
sure, that the folder value was indeed read from that registry key so I changed “FileDirectory” 
value to a new value and then started the service. Finally I was right, TapiSrv tried to access a 
folder named as the new registry value I had set.
Those who know about Windows local exploitation should already be familiar on how to exploit 
this issue. It's pretty simple but we will need a special privilege in order to exploit this issue, 
we will need to be able to impersonate. Impersonation privilege is held by most Windows 
services and some  regular  processes. Some  popular  accounts  that  have  this  privilege  by 
default are IIS application pool accounts used to run IIS worker processes. These processes 
are used to run ASP .NET or classic ASP applications, they are a good target for attacks, if you 
can upload web pages then you can compromise the server.
The attack is simple, it consists of using impersonation over named pipes [2]. Any user with 
impersonation privileges can build an exploit that will create and listen on a named pipe 
waiting for a connection (for TapiSrv the named pipe would be \\.\pipe\x\tapisrv.log). Then set 
the “FileDirectory” registry value to the name of the already created named pipe without the 
file name and using a UNC path (\\localhost\pipe\x), finally setting the  “EnableFileTracing” 
value to “1”. After that, the service will read the registry values set by the exploit and connect 
to the named pipe allowing the exploit to impersonate the user that the exploited service is 
running under. If the impersonated user has more privileges than the user running the exploit 
then elevation of privileges is successful. 
As detailed before, services using tracing functionality monitor for changes to their associated 
registry  subkey  under  “HKLM\Software\Microsoft\Tracing” key,  the  service  process  will 
immediately read the subkey values after the exploit changes them.
While exploiting TapiSrv to elevate privileges was possible, the exploit would have to do many 
steps in order to get a Local System impersonation token to fully compromise the system. I 
preferred to find a service that ran under Local System account so the exploit could directly 
impersonate this account.
Looking at the names of the subkeys under “HKLM\Software\Microsoft\Tracing” registry key I 
found a subkey named IpHlpSvc, this name seemed to reference IP Helper service. Using 
ProcExp I looked at the properties of the processes in the “Services” tab until I found the IP 
Helper service running under a svchost.exe process. This process was running as Local System 
account being the perfect candidate for exploitation. 
After doing some tests I could come up with a reliable exploit that works really well and can be 
used on different Windows services including IIS 7 & 7.5, SQL Server, etc. running on Win2k8 
R1 and R2, Vista and Win7.
I continued researching TapiSrv just in case there were more issues. I found that dialer.exe 
tool interacted with TapiSrv, some actions were recorded by ProcMon when running dialer.exe. 
TapiSrv  was  accessing
 “HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Telephony” 
registry key, again after a quick look at the permissions I found a new issue, Network Service 
account had full control over that key. That was clearly an issue since it broke per process SID 
service protection allowing any process running under Network Service account to perform any 
actions on that registry key. But an issue is no more than a simple bug if you can't exploit it. 
Looking
at
the
subkeys
I
found
an
interesting
one, 
-8-                                       www.argeniss.com
Argeniss – Information Security & Software
“HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Telephony\Providers” and  under  this 
subkey some interesting values named  “ProviderFileNameX” (where the “X” was a number 
starting at 0) that looked as file names. 
I looked at ProcMon and I saw that after Tapisrv read these subkey values it loaded files with 
those names as Windows DLLs, this was really interesting, the issue just went from simple bug 
to a vulnerability.
Since the key allowed any process running under Network Service account to perform any 
action, it was possible to set one of these registry values to an arbitrary DLL to be loaded by 
TapiSrv in order to run arbitrary code. TapiSrv runs under Network Service account but in case 
you don't remember, it had a process handle with DuplicateHandle privileges of a process 
running as Local System account. Once you get an arbitrary DLL inside TapiSrv process, the 
DLL code can get that handle and duplicate a Local System impersonation token handle from 
the privileged process and fully compromise the system.
I started to think how to build an exploit for that vulnerability. It wasn't straight forward this 
time since it was needed to introduce a DLL in the system, then change the registry values and 
finally trigger the functionality that will load the DLL.
I went to MSDN to check for TAPI APIs because I needed to find a way to interact with TapiSrv 
to get an arbitrary DLL loaded. I remembered that TapiSrv read the registry values and loaded 
the DLLs when dialer.exe was ran, probably dialer.exe was calling some TAPI APIs. Looking at 
MSDN  an  API  got  my  attention,  lineAddProvider(),  the  first  parameter  was  named 
lpszProviderFilename. The parameter name looked familiar and it was similar to the subkey 
values name, I really had to try that API.
ProcMon was still monitoring Tapisrv, I built a simple program that called the API and ran it. I 
could see in ProcMon that Tapisrv was trying to access a file named the same as the first API 
parameter I used in the API call, that was amazing. Building an exploit for this issue was pretty 
simple, just creating a DLL that when loaded it will duplicate a Local System impersonation 
token handle obtained from the privileged process that TapiSrv had its handle.
When testing lineAddProvider() API, first I ran the test program as a low privileged user and it 
didn't  work, it would have been nice if it had worked but it didn't.  Then I ran it as an 
administrator and it worked, but I needed to try to run it under Network Service account. I 
tried that and it worked which made sense since that account could modify the registry key 
were the DLL information was saved. But then I tried to run it under Local Service account and 
it worked too, that was excellent, that meant it was possible to elevate privileges from any 
process running under Local Service account too. There was still something more I had to try, 
the same tests on Win2k3.
I checked for the issue in Win2k3 but the registry key had proper permissions, not Network 
Service access since Tapisrv runs as Local System on Win2k3. But on WinXP there was an 
issue, Network Service and Local Service accounts had full control on the registry key, any 
process running under those accounts could easily elevates privileges since TapiSrv runs as 
Local System in WinXP.
When  testing  lineAddProvider()  on  Win2k3,  I  got  exactly  the  same  results  as  in  Win7. 
Exploitation  was  easier  on  Win2k3  since  TapiSrv  runs  under  Local  System.  Just  calling 
lineAddProvider() passing a DLL and the  DLL will be loaded and ran under Local System 
account by TapiSrv. Finally in WinXP I got the same results as in Win2k3. 
It's worth to mention that I also ran tests on Win2k8 R1 & R2 with same results as Win7, 
which makes sense since Win2k8 R2 has the same technology as Win7 and it was based on 
Win2k8 R1, these operating systems are similar.
When I was running dialer.exe I noticed on ProcExp that Tapisrv process got a dialer.exe 
process handle with DuplicateHandle privileges and the same happened when running my test 
program that called lineAddProvider(). I realized that Tapisrv always got a process handle from 
the processes that interacted with it, calling the APIs, etc. 
-9-                                       www.argeniss.com
Argeniss – Information Security & Software
Since in order to be able to elevate privileges on Windows Vista and newer versions it’s needed 
the privileged process handle inside Tapisrv process I started to look for the service name from 
which  TapiSrv  got the  privileged  process handle.  I knew the  process was on one  of the 
svchost.exe processes running as Local System account but that process had running many 
services inside. I had to find the right service that interacted with Tapisrv. I searched for the 
svchost.exe process with ProcExp which I could easily identify it since I got the process id from 
the information displayed by ProcExp about the process handle inside Tapisrv process. 
In the “Services” tab in the svchost.exe process properties a lot of services were displayed. 
There were two options for finding the right service, stopping the services one by one until the 
process handle would disappear from TapiSrv or try to guess which service could be the one 
based on the name, intuition, etc. Looking at the services names there was one called Remote 
Access Connection Manager (RasMan), let’s see: remote, connection, access? That should ring 
some  bells.  This  could  be  the  one  I’m  looking  for,  I  thought,  so  I  stopped  it  and  the 
svchost.exe process handle disappeared from TapiSrv process, it was the one.
I checked RasMan service details with Windows Services tool (Administrative Tools->Services), 
I saw that it has dependencies with Telephony service (TapiSrv) and that the service startup 
type was manual. This last option was the cause that sometimes the svchost.exe process 
handle wasn't present in TapiSrv in some of my tests. If RasMas was not started then TapiSrv 
didn't have the process handle. Luckily any user can start RasMan service if it isn’t running, 
allowing elevation of privileges to be always successful since we can force the process handle 
of RasMan to be always present inside TapiSrv.
By just looking at Telephony service I had found so far:
1−
Win2k8 R1 & R2, Win7 and Vista Elevation of privileges by any user with impersonation 
rights by exploiting weak permissions on Service Tracing functionality registry keys.
2−
Win2k3, WinXP, Win2k8 R1 & R2, Win7 and Vista Elevation of privileges by Network and 
Local Service accounts by calling lineAddProvider() API.
These issues can be exploited on Windows services such as IIS 6, 7 & 7.5 and SQL Server. On 
IIS an attacker only needs to upload a .NET web page with exploit code and then run it to 
complete compromise the server. On SQL Server an attacker will need database administrative 
permissions  and  run  the  exploit  by  executing  xp_cmdshell  or  sp_addextendedproc  stored 
procedures  allowing  the  attacker  to  elevate  privileges  and  run  code  under  Local  System 
account.
It's important to note that these issues can also be used on post exploitation scenarios, where 
an attacker is exploiting a Windows service that has impersonation privileges but it's not 
running under Local System account. In this case exploitation is limited since attacker will be 
trapped in that service not being able to access other processes, resources, etc. due to new 
Windows  protections.  Abusing  the  issues detailed  in this  paper  will  allow  the  attacker  to 
elevate privileges and run code under Local System account bypassing all the new Windows 
protections.
*See Chimichurri exploit available with this paper.
Bypassing Microsoft fix for Token Kidnapping on Windows 2003 and XP
On  my  previous  Token  Kidnapping  research  I  had  found  how  to  get  a  Local  System 
impersonation token from WMI processes running under Network or Local Service accounts. 
These WMI processes didn’t have any protection in place to prevent other processes running 
under the same accounts to access them. This allowed any process running under Network or 
Local Service accounts to get a Local System impersonation token and elevate privileges.
Microsoft fixed this issue by properly protecting WMI processes don’t allowing other process 
running under the same account to access them.
-10-                                       www.argeniss.com