invoked it once. OﬃceTalk application’s high percentage
overhead is attributed to the fact that client response time
for the uninstrumented application is very small (5ms) when
compared to other applications (23ms - 39ms). This appli-
cation’s actual execution time is dwarfed by factors like class
load time and resulted in the higher overhead for the instru-
mented application. In other applications actual execution
time is considerable, and thus the overheads are signiﬁcantly
less.
The above results clearly show that Candid’s overheads
are quite acceptable. The vanilla SQL parser that we built
using the JavaCC parser generator is bulky for online use
and contributes to most of the overhead. Notably, the two
class ﬁles of SQL parser we used are large– 54KB and 21KB–
and are frequently loaded. The performance can be im-
proved with a lighter, hand coded SQL parser that is signiﬁ-
cantly smaller in size. Also, by performing ﬂows-to/reachability
analysis, we can avoid transformations of string operations
that do not contribute to the query.
6. COMPARISON WITH RELATED WORK
There has been intense research in detection and preven-
tion mechanisms against SQL injection attacks recently. We
can classify these approaches broadly under three headings:
(a) coding practices that incorporate defensive mechanisms
that can be used by programmers, (b) vulnerability detec-
tion using static analysis techniques that warn the program-
mer of possible attacks, and (c) defense techniques that de-
tect vulnerabilities and simultaneously prevent them.
Defensive coding practices include extensive input valida-
tion and the usage of PREPARE statements in SQL. Input vali-
dation is an arduous task because the programmer must de-
cide the set of valid inputs, escape special characters if they
are allowed (for example, a name-ﬁeld may need to allow
quotes, because of names like O’Niel), must search for al-
ternate encodings of characters that encode SQL commands,
look for presence of back-end commands, etc. PREPARE state-
ments semantically separate the role of keywords and data
literals. Using PREPARE statements is very eﬀective against
attacks and is likely to become the standard prevention
mechanism for freshly written code; augmenting legacy pro-
grams to prepare statements is hard to automate and not
viable. Two similar approaches, SQL DOM [17] and Safe
Query Objects [10], provide executable mechanisms that en-
able the user to construct queries that isolate user input.
Vulnerability detection using static analysis
There are several approaches that rely solely on static anal-
ysis techniques [16, 29] to detect programs vulnerable to
SQLCIA. These techniques are limited to identifying sources
(points of input) and sinks (query issuing locations), and
checking whether every ﬂow from a source to the sink is
subject to input validation ([16] is ﬂow-insensitive while [29]
is ﬂow-sensitive). Typical precision issues with static analy-
sis, especially when dealing with dynamically constructed
strings, mean that they may identify several such illegal
ﬂows in a web application, even if these paths are infeasible.
In addition, the user must manually evaluate and declare
the sanitizing blocks of code for each application, and hence
the approach is not fully automatable. More importantly,
the tools do not in any way help the user determine whether
the sanitization routines prevent all SQL injection attacks.
Given that there are the various ﬂawed sanitization tech-
niques for preventing SQL injection attacks (several myths
abound on Internet developer forums), we believe there are
numerous programs that use purported sanitization routines
that are not correct, and declaring them as valid sanitiz-
ers will result in vulnerable programs that pass these static
checks.
Defensive techniques that prevent SQLCIA
Defensive techniques that prevent SQL injection attacks are
signiﬁcantly diﬀerent from vulnerability analysis as they
achieve the more complex (and more desirable) job of trans-
forming programs so that they are guarded against SQL
injection attacks. These techniques do not demand the pro-
grammer to perform input validation to stave oﬀ injection
attacks, and hence oﬀer eﬀective solutions for securing appli-
cations, including legacy code. We discuss three approaches
in detail below; for a more detailed account of various other
techniques and tools, including paradigms such as instruc-
tion set randomization [8], proxy ﬁltering of input, and test-
ing, we refer the reader to a survey of SQL injection and
prevention techniques [14].
Learning programmer intentions statically. One ap-
proach in the literature has been to learn the set of all in-
tended query structures a program can generate and check
at run-time whether the queries belong to this set. The
learning phase can be done statically (as in the AMNESIA
tool [12]) or dynamically on test inputs in a preliminary
learning phase [26]. The latter has immediate drawbacks:
incomplete learning of inputs result in inaccuracies that can
stop execution of the program on benign inputs.
A critique of AMNESIA: Consider a program that takes in
two input strings nam1 and nam2, and issues a select query
that retrieves all data where the name-ﬁeld matches either
nam1 or nam2. If nam2 is empty, then the select query issues a
search only for nam1. Further, assume the program ensures
that neither nam1 nor nam2 are the string “admin” (prevent-
ing users from looking at the administrators entries). There
are two intended query structures in this program:
“SELECT * FROM employdb WHERE name=’” + nam1 + “’”
“SELECT * FROM employdb WHERE name=’” + nam1 + “’” +
“OR name=’” + nam2 + “’”
with the requirement that neither nam1 nor nam2 is “admin”.
We tested the Java String Analyser (the string analyzer
used in AMNESIA [12] to learn query structures statically
from Java programs) on the above example. First, JSA de-
tected the above two structures, but could not detect the
requirement that nam1 and nam2 cannot be “admin”. Con-
sider now an attack of the program where nam1 = “John’ OR
name=’admin” and nam2 is empty. The program will gener-
ate the query:
SELECT * FROM employdb WHERE name=’John’
OR name=’admin’
and hence retrieve the administrator’s data from the database.
Note that though the above is a true SQL injection attack,
a tool such as AMNESIA would allow this as its structure
is a possible query structure of the program on benign in-
puts. The problem here is of course ﬂow-sensitivity: the
query structure computed by the program must be com-
pared with the query structure the programmer intended
along that particular path in the program. Web application
programs use conditional branching heavily to dynamically
construct SQL queries and hence require a ﬂow sensitive
analysis. The Candid approach learns intentions dynami-
cally and hence achieves more accuracy and is ﬂow-sensitive.
Dynamic Tainting approaches. Dynamic approaches
based on tainting input strings, tracking the taints along
a run of the program, and checking if any keywords in a
query are tainted before executing the query, are a powerful
formalism for defending against SQL injection attacks.
Four recent taint platforms [19, 21, 30, 13] oﬀer compelling
evidence that the method is quite versatile across most real-
world programs, both in preventing genuine attacks and in
maintaining low false positives. The taint-based approach
fares well on all experiments we have studied and several
common scenarios we outlined in Section 4.1.
Our formalism is complimentary to the tainting approach.
There are situations where the candidate approach results
in better accuracy compared to the taint approach. Typ-
ical taint strategies require the source code of the entire
application to track taint information. When application
programs call procedures from external libraries or calls to
other interpreters, the taint based approach requires these
external libraries or interpreters to also keep track of taint-
ing or make the assumption the return values from these
calls are entirely tainted. The second choice may negatively
impact tainting accuracy. In our approach, we can call the
functions twice, one for the real input and one for the candi-
date input, which works provided the external function does
not have side-eﬀects.
Dynamic Bracketing approaches. Buehrer et al. [9] pro-
vide an interesting approach where the application program
is manually transformed at program points where input is
read, and the programmer explicitly brackets these user in-
puts (using random strings) and checks right before issuing
a query whether any SQL keyword is spanned by a brack-
eted input. While this is indeed a very eﬀective mechanism,
it relies on the programmer to correctly handle the strings
at various stages; for example if the input is checked by a
conditional, the brackets must be stripped away before eval-
uating the conditional.
In [24], the authors propose both a formalization and an
automatic transformation based on the above solution. The
formalism is the only other formal deﬁnition of SQL in-
jection in the literature, and formalizes changes of query
structure using randomized bracketing of input. The au-
tomatic transformation adds random meta-characters that
bracket the input, and adds functions that detect whether
any bracketed expression spans an SQL-keyword. However,
the formalism and solution set forth in [24] has several draw-
backs:
• The solution of meta-bracketing may not preserve the
semantics of the original program even on benign inputs. For
example, a program that checks whether the input is well-
formed (like whether a credit card number has 16 digits)
may raise an error on correct input because of the meta-
characters added on either side of the input string. There
are several other scenarios outlined in Section 4.1 where the
scheme fails: conditional querying (where say a string input
determines the query structure, but would fail with meta-
brackets), input splitting (since the input word would span
across keywords), etc. Adding meta-characters only after
such checks are done in the program is feasible in manual
transformation [9] (though it would involve tedious eﬀort),
but is very hard to automate and sometimes impossible (for
example if properties of the input are used later in the pro-
gram, say when the input gets output in a tabular form
where the width of tables depends on the length of the in-
puts).
• The above problems are in fact deep-rooted in the for-
malism developed in [24], which considers an overly simple
notion of an application program that essentially takes in
the input, applies a single ﬁlter function on it, and concate-
nates them to form a query. Program constructs such as
conditionals and loops are ignored and is the source of the
above problem (formally, a function applied on a bracketed
input can behave very diﬀerently than when applied on the
real input). Our formalism is much more robust in this re-
gard and the deﬁnition of SQL injection in Deﬁnition 1 and
Deﬁnition 3 are elegant and accurate deﬁnitions that work
on realistic programs.
In summary, we believe that the dynamic taint-based ap-
proach and the Candid approach presented in this paper are
the only techniques that promise a real scalable automatic
solution to dynamically detect and prevent SQL injection
attacks.
7. CONCLUSIONS
We have presented a novel technique to dynamically de-
duce the programmer intended structure of SQL queries and
used it to eﬀectively transform applications so that they
guard themselves against SQL injection attacks. We have
also shown strong evidence that our technique will scale to
most web applications.
At a more abstract level, the idea of computing the sym-
bolic query on sample inputs in order to deduce the inten-
tions of the programmer seems a powerful idea that prob-
ably has more applications in systems security. There are
many approaches in the literature on mining intentions of
programmers from code as such intentions can be used as
speciﬁcations for code, and detection of departure from in-
tentions can be used to infer software vulnerabilities and
errors [4, 3, 28]. The idea of using candidate inputs to
mine programmer intentions is intriguing and holds much
promise.
Acknowledgements: This research is supported in part by
NSF grants (CNS-0716584), (CNS-0551660), (IIS-0331707),
(CNS-0325951), and (CNS-0524695). We thank William
Halfond and Alessandro Orso for providing us their test suite
of applications and attack strings. Thanks are due to Tejas
Khatiwala, Mike Ter Louw, Saad Sheikh and Michelle Zhou
for their suggestions on improving the draft. Finally, we
thank the anonymous referees for their feedback.
8. REFERENCES
[1] Online SQL syntax checker.
http://www.wangz.net/gsqlparser/sqlpp/sqlformat.htm.
[2] Sutton, M. How prevalent Are SQL Injection
vulnerabilities? Internet Bulletin, Oct 2006.
[3] Alur, R., Cern´y, P., Madhusudan, P., and Nam,
W. Synthesis of interface speciﬁcations for JAVA
classes. In POPL (2005), pp. 98–109.
[4] Ammons, G., Bod´ık, R., and Larus, J. R. Mining
speciﬁcations. In POPL (2002), pp. 4–16.
[5] Anley, C. Advanced SQL injection in SQL server
applications, White paper, Next Generation Security
Software Ltd. Tech. rep., 2002.
[6] Apache. The JMeter project.
http://jakarta.apache.org/jmeter/.
[7] Biba, K. J. Integrity considerations for secure
computer systems. Tech. Rep. ESD-TR-76-372, USAF
Electronic Systems Division, Bedford, MA, Apr. 1977.
[8] Boyd, S. W., and Keromytis, A. D. Sqlrand:
Preventing SQL injection attacks. In ACNS (2004),
pp. 292–302.
[9] Buehrer, G., Weide, B. W., and Sivilotti, P.
A. G. Using parse tree validation to prevent SQL
injection attacks. In SEM (2005).
[10] Cook, W. R., and Rai, S. Safe query objects:
statically typed objects as remotely executable
queries. In ICSE (2005), pp. 97–106.
[11] Emmi, M., Majumdar, R., and Sen, K. Dynamic
test input generation for database applications. In
International Symposium on Software Testing and
Analysis (ISSTA’07) (2007), ACM.
[12] Halfond, W., and Orso, A. AMNESIA: Analysis
and Monitoring for NEutralizing SQL-Injection
Attacks. In ASE (2005), pp. 174–183.
[13] Halfond, W., Orso, A., and Manolios, P. Using
Positive Tainting and Syntax-Aware Evaluation to
Counter SQL Injection Attacks. In FSE (2006),
pp. 175–185.
[14] Halfond, W. G., Viegas, J., and Orso, A. A
Classiﬁcation of SQL-Injection Attacks and
Countermeasures. In SSSE (2006).
[15] Secureworks press release. Internet news report, July
2006. http://www.secureworks.com/press/20060718-
sql.html.
[16] Livshits, V. B., and Lam, M. S. Finding security
vulnerabilities in Java applications with static
analysis. In USENIX Security Symposium (2005).
[17] McClure, R. A., and Kr¨uger, I. H. SQL DOM:
compile time checking of dynamic SQL statements. In
ICSE (2005), pp. 88–96.
[18] MITRE. Common vulnerabilities and exposures list.
http://cve.mitre.org/.
[19] Nguyen-Tuong, A., Guarnieri, S., Greene, D.,
Shirley, J., and Evans, D. Automatically hardening
web applications using precise tainting. In SEC
(2005), pp. 295–308.
[20] O. Maor and A. Shulman. SQL injection signatures
evasion. White paper, Imperva. Tech. rep., 2002.
[21] Pietraszek, T., and Berghe, C. V. Defending
against injection attacks through context-sensitive
string evaluation. In RAID (2005).
[22] Sabelfeld, A., and Myers, A. C. Language-based
information-ﬂow security. IEEE JSA, (2003).
[23] Soot: a java optimization framework.
http://www.sable.mcgill.ca/soot/.
[24] Su, Z., and Wassermann, G. The essence of
command injection attacks in web applications. In
POPL (2006), pp. 372–382.
[25] Dark reading security analysis. Internet, September
2006. http://www.darkreading.com/document.asp?
doc id=103774&WT.svl=news1 3.
[26] Valeur, F., Mutz, D., and Vigna, G. A
learning-based approach to the detection of SQL
attacks. In DIMVA (2005), pp. 123–140.
[27] Top ﬁve vulnerabilities. IT management security
report. http://www.computerweekly.com/Articles/
2004/04/16/201840/Top+ﬁve+threats.htm.
[28] Weimer, W., and Necula, G. C. Mining temporal
speciﬁcations for error detection. In TACAS (2005),
pp. 461–476.
[29] Xie, Y., and Aiken, A. Static detection of security
vulnerabilities in scripting languages. In USENIX
Security Symposium (2006).
[30] Xu, W., Bhatkar, S., and Sekar, R.
Taint-enhanced policy enforcement: A practical
approach to defeat a wide range of attacks. In 15th
USENIX Security Symposium (2006).