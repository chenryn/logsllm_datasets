# Anon-Pass: Practical Anonymous Subscriptions

## Authors
- Michael Z. Lee
- Alan M. Dunn
- Brent Waters
- Emmett Witchel
- Jonathan Katz

## Affiliations
- The University of Texas at Austin
  - {mzlee, adunn, waters, witchel}@cs.utexas.edu
- University of Maryland
  - Jonathan Katz

## Abstract
We present the design, security proof, and implementation of an anonymous subscription service. Users register for the service by providing some form of identity, which may or may not be linked to a real-world identity such as a credit card, web login, or public key. A user logs into the system by presenting a credential derived from information received during registration. Each credential allows only a single login within any authentication window, or epoch. Logins are anonymous in the sense that the service cannot distinguish which user is logging in any better than random guessing, ensuring unlinkability across different logins.

A central tension in an anonymous subscription service is the service provider’s desire for a long epoch (to reduce server-side computation) versus users’ desire for a short epoch (to frequently re-anonymize their sessions). We balance this tension by using short epochs but adding an efficient operation for clients who do not need unlinkability to cheaply re-authenticate themselves for the next time period.

We measure the performance of a research prototype of our protocol, which allows an independent service to offer anonymous access to existing services. We implement a music service, an Android-based subway-pass application, and a web proxy, demonstrating that adding anonymity adds minimal client latency and requires only 33 KB of server memory per active user.

## I. Introduction
Today, widespread electronic-subscription services manage access to streaming music and video, journalistic and academic articles, Internet hotspots, and public transportation. In such systems, there is a fundamental tension between enforcing admission control and providing users with anonymity and privacy. Both goals are important: admission control ensures that a service provider receives adequate compensation, while privacy prevents the tracking of user behavior, which can reveal personal tastes and geographic movements.

Foregoing one of these goals makes achieving the other considerably easier. If we require a user to simply log in to an account, we can prevent simultaneous logins. Conversely, if a subscription system requires no logins, anyone can access it anonymously, perhaps with the assistance of tools like Tor [14]. However, achieving both admission control and anonymity together is difficult.

Ideally, we want an anonymous subscription system that protects the interests of both the service and the users. Previous work by Damgård, Dupont, and Pedersen [12] introduced an uncloneable identification scheme, where a client registers by choosing a secret and the server blindly signs it. During each epoch, a client can log in using the acquired signature, ensuring that the server cannot distinguish the user nor link logins. However, if a client attempts to log in twice with the same credentials, they will be detected and denied access. While this scheme was cryptographically heavy, Camenisch et al. [4] provided asymptotic improvements, resulting in a more practical scheme. Neither protocol, however, was implemented.

Our aim is to design and implement an anonymous subscription system that is practical and deployable for existing subscription services. We start by examining the construction of Camenisch et al. [4], which is based on e-cash [5]. In their system, the registration protocol involves the server issuing the client a blind signature on a pseudorandom function (PRF) key. To log in during epoch \( t \), the server and client run a two-party protocol where the server learns \( y = Y_d(t) \) (where \( Y \) represents the PRF). The client proves in zero knowledge that \( y = Y_d(t) \) for some key \( d \) with a valid signature. If this proof succeeds, the server checks a table for the current epoch. If \( y \) is not in the table, it is added, and the login proceeds. If it already exists, the login is rejected.

Even though the system of Camenisch et al. is significantly more efficient than that of Damgård et al., it is not clear that their improvements make the scheme practical. The computational cost of a cryptographic login can still limit system scalability, affecting the number of users a service can handle and the battery life of mobile devices. For our scheme, which is more efficient than prior schemes, a login requires approximately 8 ms of computation per core on a quad-core Intel 2.66 GHz Core 2 CPU, allowing up to 496 logins per second.

If a login is too costly, the service must either buy more servers or increase the epoch length to reduce the number of logins per fixed time period. Increasing the epoch length negatively impacts usability, as it determines how long a user must wait to unlink from past activity. For example, a video streaming service with a 15-second epoch allows a client to load a new video and dissociate from past videos without noticeable delay. However, an epoch of over a minute would be unacceptable.

To put the epoch length and the maximum number of logins per second in perspective, consider that users of the Netflix streaming service watched 1 billion hours of content in July 2012 [19]. With an epoch length of 1 minute, this leads to 60 billion authentications per month, or 22,815 per second, assuming a uniform distribution over time.

The central tension in an anonymous subscription service is the service provider’s desire for a long epoch (to improve efficiency) versus the user’s desire for a short epoch (to improve anonymity). While users might occasionally want a short epoch to quickly re-anonymize (e.g., when browsing through a collection of short videos), in typical cases, such re-anonymization may not be necessary (e.g., watching a 90-minute movie straight through). Our central insight is to balance this tension by providing short epochs, giving users the ability to re-anonymize if they choose, while also offering an efficient method for clients who do not need unlinkability to cheaply re-authenticate themselves for the next epoch.

### A. Our Contributions
We introduce a new primitive called an anonymous subscription scheme with conditional linkage. This scheme includes registration and login operations, as well as a re-up operation that allows a client logged in at epoch \( t \) to authenticate itself more cheaply for epoch \( t + 1 \), with the tradeoff that the server can link these sessions. In practice, this operation is over eight times faster than a full login.

Anon-Pass is designed for anonymous access to modern web services like audio streaming, video streaming, and reading articles. These services have a large number of subscribers, but only a small portion is active at any particular time. Users sign up for a set amount of time and can use the service freely. The service provider cannot blacklist or deny service to an individual user. Anon-Pass is designed so that a given service provider can provide anonymous access (perhaps as part of a premium package), or a partner organization could sell anonymous access to a range of subcontracted services.

We provide a formal definition of an anonymous subscription scheme with conditional linkage, along with a cryptographic construction. We also provide a design and implementation for Anon-Pass, a system that implements our scheme. We demonstrate and evaluate Anon-Pass for scenarios including a streaming music service, an anonymous unlimited-use public transit pass, and a third-party authentication proxy.

At an intuitive level, we desire our anonymous subscription system to have the following properties:
- **Correctness**: An honest service provider will accept any well-formed login request from a client that is not logged in, and any well-formed re-up request from a client that is currently logged in.
- **Unforgeability**: An honest service provider will only accept login or re-up requests derived from secrets of registered clients.
- **Sharing Resistance (Admission Control)**: In a given epoch, an honest service provider will allow at most one client to receive service per registered client secret.
- **Pseudonymity**: Any service provider will not be able to identify the client that originated a particular request.
- **Unlinkability**: The service provider cannot correlate a user’s sessions (each session being a login and associated re-ups) any better than guessing.

In Section II, we formalize the notion of an anonymous subscription scheme with conditional linkage and provide formal security definitions for soundness and anonymity.

There are two main limitations to the anonymity guarantees provided by our system. First, the exact probability with which the server can "break anonymity" depends on various aspects of the system outside our model. For example, if the service has only one registered user, the service provider knows who is logging in with perfect accuracy. Second, there might be other ways external to our system in which a user’s anonymity can be violated, such as network-traffic analysis or correlating observable behavior across sessions. Our anonymous subscription service is intended to not "make the problem worse" by giving the server additional means to discern user identities. It can be coupled with other techniques (e.g., a network-anonymity service like Tor [14] or a private information retrieval scheme [11]) to anonymize other aspects of the user’s interaction with the server.

Section III contains a description of our cryptographic construction. We then present the design (§ IV) and implementation (§ V) of our system. The implementation (§ V) discusses our usage scenarios: a streaming music service, an unlimited-use public-transit pass, and a third-party authentication proxy. Our evaluation (§ VI) shows that a single modern CPU can support almost 500 logins per second and 4,000 re-ups per second. We demonstrate the practicality of our system by showing that the performance overheads for our macrobenchmarks are reasonable, e.g., 33 KB in extra memory resources per user and only a 11.8% increase in CPU utilization on the application server while serving 12,000 clients. Finally, we demonstrate the importance of re-ups for the music streaming service: having re-ups available can decrease average CPU utilization from 77.9% to 16.7% for the same number of user requests.

We review other related work in Section VII.

## II. Anonymous Subscriptions with Conditional Linkage
In this section, we formally define the components of our scheme and the security properties it provides. Note that the re-up operation in our system is referred to as "linking" in our formal constructions.

### A. Syntax
We first define the syntax of an anonymous subscription scheme with conditional linkage. Such a scheme consists of the following algorithms:

- **Setup Algorithm (Setup)**: Run by the authorization server \( S \) to initialize the system. It takes as input the security parameter \( 1^n \) and outputs a service public key \( spk \) along with an associated service secret key \( ssk \), and the initial server local state \( \sigma \).

- **Client Registration (RegC, RegS)**: Performed using two algorithms run by a client and server, respectively. The client takes as input the service public key, and the server takes as input the service secret key. RegC outputs a client secret key \( sk \) or an error symbol \( \bot \).

- **Login Protocol (LoginC, LoginS)**: Defined via two algorithms run by a client and server, respectively. The client takes as input a secret key \( sk \), the service public key \( spk \), and the current epoch \( t \); the server takes as input the service secret key \( ssk \), local state \( \sigma \), a counter \( cur \), and the current epoch \( t \). LoginS outputs updated values \( \sigma' \), \( cur' \).

- **Link Protocol (Re-UpC, Re-UpS)**: Provides an alternative way for a client logged in during epoch \( t \) to re-authenticate for epoch \( t + 1 \). This protocol is defined by a pair of algorithms run by the client and server, respectively. The client takes as input a secret key \( sk \), the service public key \( spk \), and the current epoch \( t \); the server takes as input the service secret key \( ssk \), local state \( \sigma \), a counter \( next \), and the current epoch \( t \). Re-UpS outputs updated values \( \sigma' \), \( next' \), \( cur' \).

- **End-of-Epoch Algorithm (EndEpoch)**: Provides a way for the server to end the current epoch, refresh its state, and begin the next epoch. This algorithm takes as input the current epoch \( t \), local state \( \sigma \), and counters \( cur \), \( next \); it outputs updated values \( \sigma' \), \( next' \), \( cur' \).

#### Intended Usage and Correctness
System initialization begins with the server running Setup(\( 1^n \)) to generate \( spk \), \( ssk \), and initial server state \( \sigma \). The server also sets \( cur = next = t = 0 \). Following setup, clients can register at any time; client \( i \) refers to the \( i \)-th client who registers, and we denote the secret key of that client by \( ski \). Independent of client registrations (which do not affect the server’s state and may be performed at any time), there is a sequence of executions of the login, link, and end-of-epoch algorithms. In our formal model, we assume none of these are executed concurrently, and there is a well-defined ordering among those events. We denote the period of time between two executions of EndEpoch (or between Setup and the first execution of EndEpoch) as an epoch. We write Login\( i \) (resp., Re-Up\( i \)) to denote an execution of Login (resp., Re-Up) between the \( i \)-th client and the server, with both parties using their prescribed inputs.

At some instant in an epoch, we recursively define that client \( i \) is logged in if either (1) Login\( i \) was previously run during that epoch, or (2) at some point in the previous epoch, client \( i \) was logged in and Re-Up\( i \) was run. At some instant during an epoch, client \( i \) is linked if at some previous point during that epoch, client \( i \) was logged in and Re-Up\( i \) was run.