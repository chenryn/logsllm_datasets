title:Anon-Pass: Practical Anonymous Subscriptions
author:Michael Z. Lee and
Alan M. Dunn and
Brent Waters and
Emmett Witchel and
Jonathan Katz
2013 IEEE Symposium on Security and Privacy
Anon-Pass: Practical Anonymous Subscriptions
Michael Z. Lee, Alan M. Dunn, Brent Waters, Emmett Witchel
The University of Texas at Austin
{mzlee, adunn, waters, witchel}@cs.utexas.edu
Jonathan Katz
University of Maryland
PI:EMAIL
ABSTRACT
We present the design, security proof, and implementation
of an anonymous subscription service. Users register for the
service by providing some form of identity, which might or
might not be linked to a real-world identity such as a credit
card, a web login, or a public key. A user logs on to the system
by presenting a credential derived from information received
at registration. Each credential allows only a single login in
any authentication window, or epoch. Logins are anonymous
in the sense that the service cannot distinguish which user
is logging in any better than random guessing. This implies
unlinkability of a user across different logins.
We ﬁnd that a central tension in an anonymous subscription
service is the service provider’s desire for a long epoch (to
reduce server-side computation) versus users’ desire for a short
epoch (so they can repeatedly “re-anonymize” their sessions).
We balance this tension by having short epochs, but adding an
efﬁcient operation for clients who do not need unlinkability to
cheaply re-authenticate themselves for the next time period.
We measure performance of a research prototype of our pro-
tocol that allows an independent service to offer anonymous
access to existing services. We implement a music service, an
Android-based subway-pass application, and a web proxy, and
show that adding anonymity adds minimal client latency and
only requires 33 KB of server memory per active user.
I. INTRODUCTION
Today, widespread electronic-subscription services are used
to manage access to streaming music and video, journalistic
and academic articles, Internet hotspots, and public trans-
portation. In such systems there is a fundamental
tension
between enforcing admission control and providing a user
with anonymity and privacy. Both of these goals are important.
Admission control can ensure that a service provider receives
adequate compensation and the system remains economically
viable. On the other hand, if a user’s behavior in a subscription
service is tracked, it creates a hoard of private information
ranging from the user’s personal tastes to geographic move-
ments, depending on the service.
Foregoing one of these two goals makes achieving the other
considerably easier. If we require a user to simply login to
an account, we can make sure that no user is simultaneously
logged in twice. On the other hand, if a subscription system
requires no logins then anyone can access it anonymously,
perhaps with the assistance of auxiliary tools such as a trafﬁc-
anonymization system like Tor [14]. However, achieving both
admission control and anonymity together is difﬁcult.
Ideally, we want an anonymous subscription system that
protects the interests of both the service and the users. This
problem was considered previously in the work of Damg˚ard,
Dupont, and Pedersen [12], who showed what they called an
uncloneable identiﬁcation scheme. At a high level, in their
system there is a registration phase in which a client chooses
a secret and the server “blindly” signs it using a two-party
protocol. During time period (or epoch) t, a client can then
login to the server using her acquired signature. The login
protocol is such that the server cannot distinguish which user
logged in (from all the registered users) nor link a user’s
login to any past logins. However, if a client attempts to
login twice with the same credentials during the same epoch,
the client will be detected and denied access. While the
protocols of Damg˚ard et al. [12] were cryptographically heavy,
Camenisch et al. [4] gave asymptotic improvements resulted
in a more practical scheme. Neither protocol, however, was
implemented.
Our aim is to design and implement an anonymous sub-
scription system which is practical and deployable for existing
subscription services. We start by looking at the construction
of Camenisch et al. [4], which is in turn based on ideas from e-
cash [5]. In their system, the registration protocol involves the
server issuing the client a blind signature on a pseudorandom
function (PRF) key d. To login during epoch t, the server
and client run a two-party protocol in which the server learns
y = Yd(t) (where Y represents the PRF). In addition, the client
proves to the server (in zero knowledge) that y = Yd(t) for
some key d on which the client has a valid signature. If this
proof succeeds, the server checks a table it maintains for the
current time period. If y is not already in the table, it is simply
added and the login proceeds. However, if it already exists in
the table, then its presence is evidence that a login has already
occurred during that epoch for the same (unknown) registered
user and the login attempt is rejected.
Even though the system of Camenisch et al. is signiﬁcantly
more efﬁcient than that of Damg˚ard et al. (Camenisch et
al. [4] show an order-of-magnitude reduction in the number
of modular exponentiations), it is not clear that their improve-
ments make the scheme practical. The computational cost of
a cryptographic login can still be a limiting factor in system
scalability, since it can limit the number of users that a service
can handle for a ﬁxed set of computational resources, or impact
the battery life of a client on a mobile device. Indeed, even for
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.29
319
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
our scheme (which is more efﬁcient than prior schemes), we
ﬁnd that a login requires approximately 8 ms of computation
per core on a quad-core Intel 2.66 GHz Core 2 CPU (cf.
Table II in §VI-A). This machine can service at most 496
logins per second.
If a login is too costly for the service, then the service must
either buy more servers or increase the length of an epoch to
reduce the number of logins per ﬁxed time period. Increasing
the length of an epoch negatively impacts usability, because
the length of an epoch is approximately how long a user
will have to wait if she wishes to unlink herself from past
activity. Consider a video streaming service where the time
epoch is 15 seconds. If a client wishes to load a new video
and dissociate herself from past videos watched, waiting up to
15 seconds will not be too noticeable relative to other delays.
However, a time epoch (and hence delay) of over a minute is
likely to be unacceptable to the user.
To put
the epoch length and the maximum number of
logins per second in perspective, consider that users of the
Netﬂix streaming service watched 1 billion hours of content
in July 2012 [19]. With an epoch length of 1 minute, which
is still rather high, this leads to 60 billion authentications per
month, or 22,815 per second assuming that their distribution
is uniform over time.
We believe the central tension in an anonymous subscription
service is the service provider’s desire for a long time epoch (to
improve efﬁciency) versus the user’s desire for a short epoch
(to improve anonymity). Yet while users might occasionally
want a short time epoch so they can quickly “re-anonymize”
(e.g., when browsing through a collection of short videos), in
the typical case such re-anonymization may not be necessary
(e.g., if a user is watching a 90-minute movie straight through).
Our central insight is to balance the tension by providing short
epochs, giving users the ability to re-anonymize if they so
choose, while also providing an efﬁcient method for clients
who do not need unlinkability to cheaply re-authenticate
themselves for the next epoch.
A. Our Contributions
We introduce a new primitive that we call an anonymous
subscription scheme with conditional linkage. Such a scheme
has registration and login operations as described above. In
addition, it offers a re-up operation that allows a client who
is logged in at (current) epoch t to authenticate itself (more
cheaply) for time period t + 1 with the tradeoff that the
server is able to link these sessions. In practice, we ﬁnd
that allowing such an operation has a signiﬁcant performance
beneﬁt because re-up in our scheme is over eight times faster
than login.
Anon-Pass is designed for anonymous access to modern web
services like audio streaming, video streaming, and reading
articles. These services contain a large number of subscribers,
only a small portion of which are active at any particular
time. Users sign up for these services for a set amount of
time, but during that time they can expect to use the service
freely. The service provider cannot blacklist or deny service to
an individual user. Anon-Pass is designed so a given service
provider can provide anonymous access (perhaps as part of
a premium package), or a partner organization could sell
anonymous access to a range of subcontracted services.
We provide a formal deﬁnition of an anonymous sub-
scription scheme with conditional linkage along with a cryp-
tographic construction. We also provide a design and im-
plementation for Anon-Pass, a system that implements our
scheme. We demonstrate and evaluate Anon-Pass for scenarios
including a streaming music service, an anonymous unlimited-
use public transit pass, and a third-party authentication proxy.
We now brieﬂy overview these contributions.
At an intuitive level we desire our anonymous subscription
system to have the following properties:
• Correctness. An honest service provider will accept any
well-formed login request from a client that is not logged
in, and any well-formed re-up request from a client that
is currently logged in.
• Unforgeability. An honest service provider will only
login or re-up requests that are derived from
accept
secrets of registered clients.
• Sharing resistance (admission control). In a given
epoch, an honest service provider will allow at maximum
one client to receive service per registered client secret.
We refer to unforgeability and sharing resistance as soundness.
• Pseudonymity. Any service provider will not be able to
identify the client that originated a particular request. By
identify, we mean associate a request with the information
that the client submitted at registration.
• Unlinkability. The service provider cannot correlate a
user’s sessions (each session being a login and associated
re-ups) any better than guessing.
We refer to pseudonymity and unlinkability as anonymity.
In Section II we formalize the notion of an anonymous
subscription scheme with conditional
linkage, and provide
formal security deﬁnitions for soundness and anonymity.
There are two main limitations to the anonymity guarantees
provided by our system. First, the exact probability with which
the server can “break anonymity” depends on various aspects
of the system outside our model. As an extreme case, for
example, if the service has only one registered user, then
the service provider knows who is logging in with perfect
accuracy. As a less obvious example: if all users are logged in
(and remain logged in), and one user logs out and then another
login occurs in the next time epoch, this new login must belong
to the user who logged out. Second, there might be other
ways – external to our system – in which a user’s anonymity
can be violated, e.g., by using network-trafﬁc analysis or
by correlating a user’s observable behavior across sessions.
Our anonymous subscription service is only intended to not
“make the problem worse” by giving the server additional
means to discern user identities. We note that our system
could be coupled with other techniques (e.g., a network-
anonymity service like Tor [14], or a private information
retrieval scheme [11]) to anonymize other aspects of the user’s
interaction with the server.
320
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
Section III contains a description of our cryptographic
construction. We then present the design (§ IV) and implemen-
tation (§ V) of our system. The implementation (§ V) discusses
our usage scenarios: a streaming music service, an unlimited-
use public-transit pass, and a third-party authentication proxy.
Our evaluation (§ VI) shows that a single modern CPU can
support almost 500 logins per second, and 4,000 re-ups per
second. We demonstrate the practicality of our system by
showing that the performance overheads for our macrobench-
marks are reasonable, e.g., 33 KB in extra memory resources
per user and only a 11.8% increase in CPU utilization on the
application server while serving 12,000 clients. Finally, we
demonstrate the importance of re-ups for the music streaming
service: having re-ups available can decrease average CPU
utilization from 77.9% to 16.7% for the same number of user
requests.
We review other related work in Section VII.
II. ANONYMOUS SUBSCRIPTIONS WITH CONDITIONAL
LINKAGE
In this section, we formally deﬁne the pieces of our scheme
and the security properties that it provides. Note that the
re-up operation in our system is referred to in our formal
constructions as “linking.”
A. Syntax
We ﬁrst deﬁne the syntax of an anonymous subscription
scheme with conditional linkage. Such a scheme consists of
the following algorithms:
• The setup algorithm Setup is run by the authorization
server S to initialize the system. It takes as input the
security parameter 1n and outputs a service public key
spk along with an associated service secret key ssk, and
the initial server local state σ.
• Client registration is done using two algorithms
RegC, RegS run by a client and server, respectively. The
client takes as input the service public key, and the server
takes as input the service secret key. RegC outputs a client
secret key sk or an error symbol ⊥.
• The login protocol
is deﬁned via two algorithms
LoginC, LoginS run by a client and server, respectively.
The client takes as input a secret key sk, the service
public key spk, and the current epoch t; the server takes
as input the service secret key ssk, local state σ, a counter
cur, and the current epoch t. LoginS outputs updated
values σ
• The link protocol provides an alternative way for a
client who is logged in during epoch t to re-authenticate
for epoch t + 1. This protocol is deﬁned by a pair of
algorithms Re-UpC, Re-UpS run by the client and server,
respectively. The client takes as input a secret key sk, the
service public key spk, and the current epoch t; the server
takes as input the service secret key ssk, local state σ,
a counter next, and the current epoch t. Re-UpS outputs
updated values σ
, next
, cur
(cid:2).
(cid:2).
(cid:2)
(cid:2)
The registration, login, and link protocols may fail if the
client behaves incorrectly. For these protocols, the server
outputs an additional bit which is 1 if and only if the
protocol runs to completion, in which case we say the
protocol succeeds. We say the protocol fails otherwise.
• The end-of-epoch algorithm EndEpoch provides a way
for the server to end the current epoch, refresh its state,
and begin the next epoch. This algorithm takes as input
the current epoch t, local state σ, and counters cur, next;
it outputs updated values σ
, next
, cur
(cid:2).
(cid:2)
(cid:2)
Intended usage and correctness. System initialization begins
by having the server run Setup(1n) to generate spk, ssk and
initial server state σ. The server also sets cur = next = t = 0.
Following setup, clients can register at any time; client i
refers to the ith client who registers, and we denote the secret
key of that client by ski. Independent of client registrations
(which do not affect the server’s state and may be performed
at any time), there is some sequence of executions of the
login, link, and end-of-epoch algorithms. In our formal model
(unlike the implementation), we assume none of these are
executed concurrently, and so there is a well-deﬁned ordering
among those events. We denote the period of time between
two executions of EndEpoch (or between Setup and the
ﬁrst execution of EndEpoch) as an epoch. We write Logini
(resp., Re-Upi) to denote an execution of Login (resp., Re-Up)
between the ith client and the server, with both parties using
their prescribed inputs.
At some instant in an epoch, we (recursively) deﬁne that
client i is logged in if either (1) Logini was previously run
during that epoch, or (2) at some point in the previous epoch,
client i was logged in and Re-Upi was run. At some instant
during an epoch, client i is linked if at some previous point
during that epoch client i was logged in and Re-Upi was run.