Heap management in JNI sandbox. FLEXDROID needs to
allocate memory space from the heap of the JNI sandbox
instead of the default heap. We customize the heap man-
agement functions in the libc including malloc, calloc,
realloc, free, and memalign using mspace_malloc() in
dlmalloc [34], which enables us to allocate memory from
speciﬁed memory regions.
Java API handler. Java API handler ﬁrst unmarshals the
passed arguments and veriﬁes the validity of pointer ar-
guments. We implement Valid Address Table (VAT) which
maintains a mapping between memory addresses a pointer
variable points and the type of the pointer. If the Java function
returns a pointer variable, the handler updates VAT with the
value and type of pointer.
It is important to note that if the type of return value is a
pointer of primitive type (e.g., char*, int*), and the JNI code
attempts to dereference the returned pointer, it causes a domain
fault since the dereferenced value is in the Java domain. To
resolve this, when a pointer of primitive type is returned, we
copy the data pointed by it into a buffer inside the JNI domain
and return the address of buffer instead.
In general, marshalling and unmarshalling arguments im-
pose additional memory copy overhead. We avoid the overhead
by maintaining the value of registers and stack4 used for
arguments when the calling Java API conducts the sandbox
switch.
C. Dynamic Permission Management
Java reﬂection enables dynamic code generation and ex-
ecution at runtime. A common procedure involved in dy-
namic code generation is to store a sequence of bytecode
instructions into a Java class ﬁle. In order to execute the
code generated as such, it needs to load the class ﬁle that
contains the code. FLEXDROID adjusts the permissions of a
module dynamically when the module is loaded. The Dalvik
class loader loads a class using loadClassFromDex() or a
method using loadMethodFromDex(). Upon each class or
method loading, FLEXDROID looks at the Dalvik call stack
to identify which module (caller) loads which other module
(callee). Then, FLEXDROID restricts the permissions of the
callee module as the intersection of the permissions of the
caller and callee modules in order to avoid a potential attack,
where the caller module abuses the permissions of the callee
module for its own sake.
In addition, FLEXDROID performs dynamic permission
management when a new Java thread is created. When a
system call do_fork() is invoked to create a new thread,
FLEXDROID inspects the Dalvik call stack of a parent thread
and adjusts the permissions of a module running on the new
thread according to the rules described in §IV-D.
D. Deadlock Avoidance
There were two critical cases arose causing deadlocks that
we faced in the course of developing the inter-process stack
inspection.
File access from Garbage Collection. Both Garbage Collec-
tion (GC) and stack tracer need to hold the thread lock in
the Dalvik VM. If a thread in the GC state accesses a ﬁle,
the kernel conducts the access control and activates the stack
tracer of the same process for access control. The stack tracer
waits for the lock already held by the GC. At the same time,
GC waits for the access control (i.e. deadlock). To resolve
this, FLEXDROID keeps a waiting thread list of the lock using
stl::set. When inter-process stack inspection of a waiting
thread is requested, the stack tracer ignores the request.
Resource access without state change. We can trace the call
stack of a thread only when the thread is in “suspended” state.
Since a stack tracker is just a normal thread, it cannot actually
suspend the target thread. Instead, it just waits until the thread
suspends itself. When a thread is in the middle of access to a
resource via a system call, Dalvik VM does not know it and
keeps its state as “running” (i.e., not suspended). At the same
time, the stack tracer just waits for the thread to suspend itself
(i.e. deadlock). To avoid this, stack tracer marks the status of
the thread as “suspended” when tracing its call stack.
VI. EVALUATION
In this section, we evaluate FLEXDROID by answering the
three questions as follows:
1) How ﬂexible and effective is FLEXDROID’s policy to
restrict third-party libraries (§VI-A)?
Android apps (§VI-A)?
pose when adopted (§VI-B)?
2) How easy is it to adopt FLEXDROID’s policy to existing
3) How much performance overhead does FLEXDROID im-
Experimental setup. All our experiments are performed on
Nexus 5 that has 2.265GHz quad-core CPU with 2GB RAM,
with our prototype of FLEXDROID on Android 4.4.4 (KitKat)
and Linux kernel 3.4.0.
A. Usability
this
In
FLEXDROID’s usability:
evaluation, we
examine
two
aspects
of
1) How easily can app developers apply FLEXDROID’s
2) What
policy to third-party libraries?
experiences do the
FLEXDROID-protected apps?
end-users have
running
4 In ARM calling convention, the ﬁrst four arguments are passed through
r0-r3 registers while the rest are passed through the stack.
Compatibility with existing apps. We downloaded appli-
cation APK ﬁles of 32 apps, which are top apps of various
11
App Name
Package Name
Category
# of JNI libraries
Bible
Job Search
ZingBox Manga
LINE Messenger
Duolingo
eBay
Amazon Shopping
Airbnb
Instagram
TED
Subway Surf
NPR News
Flashlight
K-9 mail
Fitbit
Zillow Real Estate & Rentals
musical.ly
Drugs.com
Yahoo News
Yahoo Mail
Hola launcher
Layout from Instagram: Collage
Photo Editor by Aviary
SquareQuick
Retrica
Yelp
Pinterest
com.sirma.mobile.bible.android
com.indeed.android.jobsearch
com.zingbox.manga.view
jp.naver.line.android
com.duolingo
com.ebay.mobile
com.amazon.mShop.android.shopping
com.airbnb.android
com.instagram.android
com.ted.android
com.kiloo.subwaysurf
org.npr.android.news
com.devuni.flashlight
com.fsck.k9
com.fitbit.FitbitMobile
com.zillow.android.zillowmap
com.zhiliaoapp.musically
com.drugscom.app
com.yahoo.mobile.client.android.yahoo
com.yahoo.mobile.client.android.mail
com.hola.launcher
com.instagram.layout
com.aviary.android.feather
mobi.charmer.squarequick
com.venticake.retrica
com.yelp.android
com.pinterest
Book
Business
Cartoon
Communication
Education
Shopping
Shopping
Trip
SNS
Education
Game
News
Utilities
E-mail
Health
Lifestyle
Media & Video
Medical
News & Magazines
E-mail
Launcher
Photography
Photography
Photography
Photography
Local & Travel
Social
0
0
0
8
1
1
3
0
10
0
3
0
1
1
0
0
7
0
2
1
4
0
2
1
1
1
0
TABLE V: Compatibility test. Running popular apps on FLEXDROID without applying FLEXDROID policy.
categories listed in App Annie [5], from the Google Play store.
In order to test the backward compatibility of FLEXDROID,
we installed each app without any modiﬁcation and ran it for
10 minutes in both the stock Android and FLEXDROID, and
checked to see if an app crashes during the execution.
Table V shows a list of apps which run as normal
in FLEXDROID. Unlike those apps, 5 apps crashed during
the execution. They are Waze Social GPS Map & Travel
(com.waze), Uber (com.ubercab), Adobe Acrobat Reader
(com.adobe.reader), Facebook (com.facebook.katana),
and UC Browser (com.UCMobile.intl). To ﬁgure out the
cause of the crash, we ﬁrst disable JNI sandbox (§V-B) and
then test those apps again. Since they work ﬁne without JNI
sandbox, we conclude the faults stem from the JNI sandbox.
To specify the source of each fault, we capture the fault
address and the context (i.e., values of registers and stack
information) of the thread at the time the fault occurs using a
signal handler registered by Dalvik VM and our domain fault
handler in the kernel. Moreover, we manually reverse engineer
the JNI code (i.e., *.so ﬁles) of the crashed apps and pinpoint
the locations of the faults based on the captured information.
We found out that the roots of the faults are Pthread ID,
mmap(), and free().
JNI code of Waze fails in the thread safety check which
compares the Pthread ID obtained by Java to the one ob-
tained by JNI code. Since both are the return values of
pthread_self(), they are expected to be the same, but they
are different in FLEXDROID, indeed. Pthread ID is an address
of a thread structure inside Android libc, which is accessed
by Pthread APIs. The thread structure initially stays in Java
domain, because Dalvik VM, libc and other code in Java
domain need it to use Pthread APIs. When executing JNI
code, FLEXDROID copies the thread structure to JNI domain
so as to support Pthread APIs in JNI without domain faults5.
Consequently, it changes the return value of pthread_self()
and causes the failure. Separating Pthread ID from the thread
structure is a way to avoid this problem, although it requires
modiﬁcation of JNI code.
Uber employs a JNI library SnappyDB [16], which is
a key-value database for Android. It maps data stored in
a ﬁle to memory pages using mmap(). Since the memory
pages returned by mmap() are out of JNI domain, it gener-
ates domain faults. Another shared library that calls mmap()
is libbinder.so. Fortunately, since the bulk of apps use
Binder only in Java code, most apps do not crash because of
libbinder.so. Allocating memory to each separate region
depending on the caller of mmap() is our future work.
While executing JNI code of Adobe Acrobat Reader,
free() which we implement for JNI domain is called a
few thousand times and then incurs a fault. We are currently
uncertain as to what makes this fault, however, we believe that
we can solve this through engineering.
Since Facebook and UC Browser contain many JNI li-
braries (29 and 20, respectively), it is challenging to manually
reverse engineer them and understand the roles of their in-
structions. Moreover, they show complicated runtime behaviors
such as multi-threading. Due to this, we cannot reveal the exact
reasons that cause crashes of both apps.
Usability and effectiveness. We evaluate the usability of
FLEXDROID’s policy and its effectiveness. We conduct exper-
iments using a simple app that we implement and real-world
apps repackaged with FLEXDROID’s policy. A component of
our simple app accesses several resources with correspond-
5 If FLEXDROID moves the thread structure to JNI domain instead of
copying it to JNI domain, the thread structure should be shared between Java
domain and JNI domain. It raises a security concern that the thread structure
can be tampered by untrusted native code (i.e., JNI) in malicious purposes.
12
Target Third-party Library
Role
App Name
Blocked
Resource
†
Ad
Photo
Barcode scanner
Login
Ad
Login
HTTP
Analytics
com.google.ads.*
‡
jp.naver.line.*
com.ebay.redlasersdk.*
†
com.facebook.*
com.tapjoy.*
†
com.twitter.*
com.android.volley.*
†
com.flurry.*
† Used in two or more apps
‡ A component of the app, not a third-party library
TABLE VI: Enforcing the FLEXDROID’s policy against third-party
libraries of real-world apps.
ZingBox Manga
LINE Messenger
eBay
Airbnb
Subway Surf
Drugs.com
Yahoo News
Yahoo Mail
Internet
Camera
Camera
Internet
Internet
Internet
Internet
Internet
ing permissions. We eliminate each permission by enforcing
FLEXDROID’s policy and verify that a security exception
occurs according to the absence of permission.
We select 8 third-party libraries from 8 real-world apps
and apply FLEXDROID’s policy to them. We just decom-
press the 8 APK ﬁles, append flexdroid tags to their
AndroidManifest.xml ﬁles, and repackage them. It is worth
noting that a simple modiﬁcation to AndroidManifest.xml
ﬁle is enough to enforce FLEXDROID’s policy without any
knowledge of the app. In other words, it is easy for app
developers to adopt FLEXDROID. We manually analyze each
third-party library to specify one of its roles and eliminate
all
its permissions using FLEXDROID’s policy. As shown
in Table VI, each of the 8 libraries have a problem accessing
a resource. It implies that FLEXDROID’s policy is effectively
enforced.
Case study with a real-world app.
To demonstrate
how FLEXDROID works with existing apps, we used Ya-
hoo News [18] which is a popular news app registered on
Google Play. We chose this app for our case study, since the
app uses various third-party analytics, social, UI, and video
libraries such as Flurry, Facebook, NineOldAndroids [12],
and MP4Parser [11]. Among the libraries, we particularly
focus on Flurry, which accesses a device’s IMEI code using
undocumented READ_PHONE_STATE permission. Flurry prints
IMEI code as a log message that we can observe.
We
to
take
repackage
the APK ﬁle
the
away
also
READ_PHONE_STATE permission from Flurry. We
set
the android:mockOnException attribute to true to
provide Flurry with a fake IMEI code. We check out that
Flurry outputs log messages related to the fake IMEI code.
This indicates that FLEXDROID does not degrade usability in
the view of a user while FLEXDROID successfully prevents
the privacy-sensitive information from being leaked.
B. Performance
evaluate
We
impact of
the performance
enabling