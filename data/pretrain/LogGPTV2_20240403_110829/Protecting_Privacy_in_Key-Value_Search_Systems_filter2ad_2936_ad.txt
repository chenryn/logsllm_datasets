10
5
0
Regular
Regular−advanced
Peekaboo
Peekaboo−advanced
 1000 
 10000
Number of files indexed
100000
Figure 9. Peekaboo search latency
We proceed to evaluate the search latencies perceived by
clients. We implemented a client program running at a third
machine (PIII 550MHz with 128 RAM) in the same Eth-
ernet LAN. The public key encryption uses the RSA algo-
rithm [26] with 1024-bit keys, and the one-time symmet-
ric key encryption uses the AES algorithm [1] with 128-bit
keys. Both algorithms are implemented by the Crypto++
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Mean (µs)
Std dev (µs)
Percentage
Total
36475
2869
100.0%
Network
6427
2831
17.6%
Look up RSA en. RSA de. AES en. AES de. Other
236
5
2.1% 0.6%
23834
38
4.3% 63.34%
3041
53
8.3%
581
14
1.6%
1575
10
781
1
Figure 10. Time to process a search request using 1024-bit RSA keys and 128-bit AES keys.
library (version 4.2) [8]. For each query, the servers return
the ﬁrst 100 matched ﬁles as query results. Figure 9 shows
the search latencies measured by the client. Compared with
the regular server, Peekaboo incurs much higher search la-
tency. When we use the advanced queries to support re-
turning matched keys (i.e., matched ﬁle names), the search
latency increases only slightly compared with the basic pro-
tocol.
To further examine the search latency, we list the times
spent in various steps of processing a query in Figure 10.
We ﬁx the number of ﬁles indexed to be 105, and show both
the mean and the standard deviation of latency as well as
the percentage of the total latency. The “Total” column cor-
responds to the time elapsed between the client submission
of a query and getting back the reply. RSA decryption and
network transmission are the most expensive steps, whereas
AES encryption and decryption are fast, accounting for less
than 5% of the processing time in total. The “Look up” time
includes both the K-server lookup and the V-server lookup,
and depends on the number of ﬁles indexed. The “Other”
line consists of the time spent for the V-server to buffer and
forward client requests to the K-server as well as the time
spent to buffer and forward AES-encrypted replies back to
the client.
In general, the search latency is acceptable to
clients since the network latencies on WAN are usually on
the order of tens of milliseconds [21]. By optimizing the se-
curity operations (e.g., by using cryptographic routines im-
plemented in hardware), we expect the performance penal-
ties due to security to decrease. Furthermore, if clients will
submit multiple queries in a row, they can set up symmet-
ric session keys with the K-server for encrypting/decrypting
queried keys to amortize the costs of RSA decryption.
7.3 Overhead of Access control and Au-
thentication
The Peekaboo access control and user authentication
mechanisms introduce additional query processing over-
head. The V-server based access control is relatively sim-
ple and should incur only a small amount of overhead by
performing an additional ACL lookup before returning re-
sults. We thus consider the K-server based access control
described in Section 5.2 to estimate the worst case per-
formance. Such access control and authentication intro-
duce the following extra steps during the query process-
ing: (1) client signature signing and veriﬁcation, (2) client
pseudonym encryption and decryption, and (3) noninter-
active zero-knowledge proof construction and veriﬁcation.
While the digital signature based client authentication has a
relatively constant cost, the cost of decrypting pseudonyms
can grow linearly with the number of client pseudonyms
assigned by different owners. Fortunately, such expensive
computations are performed by the clients which will less
likely become overloaded compared with the servers.
In
addition, the client pseudonyms can be cached at the client
side to reduce the search latency. We implemented both (1)
and (2) in the example prototype for our evaluation. The
noninteractive zero-knowledge proof, as discussed in Sec-
tion 5.2, can be constructed with computational expense
roughly equal to the expense of a digital signature.
)
s
m
(
y
c
n
e
a
t
l
h
c
r
a
e
s
e
g
a
r
e
v
A
180
160
140
120
100
80
60
40
20
0
2
1
4
1000 files
2
1
4
  100000 files
No caching
Client
K−server
Network
V−server
2
1
4
1000 files
2
1
4
  100000 files
Caching
Figure 11. Search latency with access control
and user authentication. The client is associ-
ated with 1, 2, 4 pseudonyms, respectively
Figure 11 shows the search latency with the Peekaboo
access control and user authentication mechanisms by vary-
ing the number of indexed ﬁles and the number of client
pseudonyms. For comparison, we list the processing time
spent at various entities as well as the time spent on net-
work transmission. Without pseudonym caching, the client
side processing takes the longest time. In general, the in-
crease of the number of ﬁles has little effect on search la-
tency. The client side processing time increases proportion-
ally to the number of client pseudonyms, while the server
side processing latency increases only slightly with the in-
creasing number of client pseudonyms. By caching client
pseudonyms, we can greatly reduce the client processing
time, and therefore reduce the overall search latency.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20068 Related Work
Peekaboo may potentially be adapted to provide a starting
point.
A number of recent solutions have been proposed to per-
form search on encrypted data (e.g., [30, 3]). Although en-
cryption provides data conﬁdentiality to protect privacy, it
limits the search functionality that can be performed. These
approaches either require clients to share the same encryp-
tion keys used by the data owners [30], or limit search to be
performed on a small number of keywords pre-speciﬁed by
the clients. They also require a sequential scan through en-
crypted data for each query, which is an expensive operation
in terms of performance.
There has been a large body of literature on anonymous
communication to prevent discovery of source-destination
patterns.
In general, there are two types of approaches:
proxy based approaches and mix based approaches. Proxy
based approaches interpose one or more proxies between
the sender and the receiver to hide the sender’s identity from
the receiver. Examples include Janus [18] and Crowds [24].
The Peekaboo V-servers bear some similarity with prox-
ies in that all user trafﬁc goes through them. However, the
primary purpose of Peekaboo is not to hide user identities,
but rather to perform search without revealing the key-value
pairs. Thus the Peekaboo V-servers are not just proxies as
they actively participate in storing and returning values. The
mix based approaches interpose (e.g., [4, 31]) a chain of
proxies between the sender and the receiver to achieve un-
linkability between the sender and the receiver. We showed
in Section 6 where we used mix based approaches to prevent
timing attacks. Compared with these approaches, Peekaboo
protects not only user identities, but also key-value pairs.
However, Peekaboo does not provide unlinkability between
key-value pairs in the presence of server collusion.
The problem of Private Information Retrieval (PIR) [5,
14] has been well studied to protect client privacy in search.
These approaches model the database as an n-bit string, and
a client retrieves the i-th bit without revealing the index
i. Although PIR schemes can achieve very strong security,
they are generally not practical to use.
Secure multi-party computation (SMC) has also been
widely studied [16]. These techniques enable multiple par-
ties, each holding a private input, to collectively compute
a function of their inputs while revealing only the function
output. Our problem can be viewed as a special case of
this problem, though it permits more efﬁcient solutions than
general SMC techniques, which are rarely efﬁcient for prac-
tical use.
Recent work [2] has also noticed the value of two or
more logically independent servers for maintaining the pri-
vacy of database content and queries. It envisions an archi-
tecture where data and queries can be decomposed across
multiple servers in different ways. The authors leave open
a concrete solution based on the proposed architecture, and
9 Conclusion
We have proposed a system called Peekaboo, for per-
forming general key-value search at untrusted servers with-
out loss of efﬁciency and user privacy. Given a set of key-
value pairs from multiple owners that are stored across un-
trusted servers, Peekaboo allows a client to search these
pairs in such a way that each server, in isolation, cannot
determine any of the key-value bindings. Our main idea is
to separate the key-value pairs and store them across dif-
ferent servers. Supported by access control and user au-
thentication, Peekaboo is: (1) secure in that search can be
performed by only authorized clients while protecting the
privacy of both data owners and clients, (2) ﬂexible in that
it is applicable to any type of key-value search, and can be
easily extended to support advanced queries, and (3) efﬁ-
cient in that it has small storage cost and search latency, and
hence is practical to use today.
References
[1] AES. http://csrc.nist.gov/CryptoToolkit/
aes/rijndael.
[2] G. Aggarwal, M. Bawa, P. Ganesan, H. G. Molina, K. Ken-
thapadi, R. Motwani, U. Srivastava, D. Thomas, and Y. Xu.
Two can keep a secret: A distributed architecture for secure
database services. In CIDR, 2005.
[3] D. Boneh, G. D. Crescenzo, R. Ostrovsky, and G. Persiano.
Public key encryption with keyword search. In Proc. of Eu-
rocrypt, 2004.
[4] D. Chaum. Untraceable electronic mail, return addresses,
and digital pseudonyms. Communications of the ACM,
24(2):84–88, 1981.
[5] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private
information retrieval. In IEEE Symposium on Foundations
of Computer Science, 1995.
[6] I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong.
Freenet: A distributed anonymous information storage and
retrieval system. In Designing Privacy Enhancing Technolo-
gies:International Workshop on Design Issues in Anonymity
and Unobservability, LNCS 2000.
[7] S. Czerwinski, B. Zhao, T. Hodes, A. Joseph, and R. Katz.
In
An architecture for a secure service discovery service.
Mobile Computing and Networking, 1999.
http://www.eskimo.com/
[8] W. Dai.
Crypto++.
∼weidai/cryptlib.html.
[9] Digital signature standard (DSS).
Federal Information
Processing Standards Publication 186, 1994.
[10] Exact
match.
http://www.
searchenginedictionary.com/e.shtml#
exactmatch.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006[31] P. Syverson, D. Goldschlag, and M. Reed. Anonymous con-
nections and onion routing. In Proc. of the IEEE Symposium
on Security and Privacy, 1997.
[32] The TLS protocol.
http://www.ietf.org/rfc/
rfc2246.txt.
[33] M. van Steen, F. Hauck, P. Homburg, and A. Tanenbaum.
Locating objects in wide area systems. In IEEE Communi-
cations Magazine, pages 104–109, 1998.
[11] Fuzzy
match.
http://www.
searchenginedictionary.com/
terms-fuzzy-matching.shtml.
[12] J. Gao and P. Steenkiste. An adaptive protocol for efﬁcient
support of range queries in DHT-based systems. In ICNP,
2004.
[13] D. Garlan, D. Siewiorek, A. Smailagic, and P. Steenkiste.
Project aura: Towards distraction-free pervasive computing.
In IEEE Pervasive Computing 1, 2002.
[14] Y. Gertner, Y.
Ishai, E. Kushilevitz, and T. Malkin.
Protecting data privacy in private information retrieval
schemes. Journal of Computer and System Sciences (JCSS),
60(3):592–629, 2000.
[15] Gnutella hosts. http://www.gnutellahosts.com.
[16] O. Goldreich. The Foundations of Crytography - Volume 2.
Cambridge University Press, 2004.
[17] U. Hengartner and P. Steenkiste. Protecting access to peo-
ple location information. In Proc. of the First International
Conference on Security in Pervasive Computing, 2003.
[18] The Lucent personalized web assistant. http://www.bell-
labs.com/project/lpwa/history.html.
[19] L. Kissner, A. Oprea, M. K. Reiter, D. Song, and K. Yang.
Private keyword-based push and pull with applications to
anonymous communication. In Applied Cryptography and
Network Security (ACNS), 2004.
[20] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton,
D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon,
W. Weimer, C. Wells, and B. Zhao. Oceanstore: An archi-
tecture for global-scale persistent storage. In ASPLOS 2000.
[21] H. A. Lagar-Cavilla, N. Tolia, R. Balan, E. de Lara,
M. Satyanarananan, and D. O’Hallaron. Dimorphic comput-
ing. Technical report, Carnegie Mellon University, CMU-
CS-06-123.
[22] B. Lampson, M. Abadi, M. Burrows, and E. Wobber. Au-
thentication in distributed systems: Theory and practice.
ACM Trans. Computer Systems, 10(4):265–310, 1992.
[23] U. Leonhardt and J. Magee. Security considerations for a
distributed location service. Journal of Network and Systems
Management, 6:51–70, 1998.
[24] M. Reiter and A. Rubin. Crowds: Anonymity for web trans-
actions. ACM Transactions on Information and System Se-
curity, 1(1):66–92, 1998.
[25] M. K. Reiter, X. Wang, and M. Wright. Building reliable
mix networks with fair exchange. In Applied Cryptography
and Network Security (ACNS), 2005.
[26] R. L. Rivest, A. Shamir, and L. M. Adleman. A method for
obtaining digital signatures and public-key cryptosystems.
Communications of the ACM, 27(2), 1978.
[27] V. Scarlata, B. Levine, and C. Shields. Responder anonymity
and anonymous peer-to-peer ﬁle sharing. In ICNP 2001.
[28] A. Shamir. How to share a secret. Communications of the
ACM, 22(11), 1979.
[29] V. Shoup and R. Gennaro. Securing threshold cryptosystems
against chosen ciphertext attack. Journal of Cryptology, 15,
2002.
[30] D. X. Song, D. Wagner, and A. Perrig. Practical solutions for
search on encrypted data. In IEEE Symposium on Security
and Privacy, 2000.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006