### 9. Conclusion

We have introduced Peekaboo, a system designed to perform general key-value searches on untrusted servers while maintaining both efficiency and user privacy. Given a set of key-value pairs from multiple data owners stored across untrusted servers, Peekaboo enables clients to search these pairs in such a way that no single server can determine any of the key-value bindings. The core idea is to separate the key-value pairs and store them across different servers. Supported by access control and user authentication, Peekaboo offers:

1. **Security**: Search operations are restricted to authorized clients, ensuring the privacy of both data owners and clients.
2. **Flexibility**: It is applicable to any type of key-value search and can be easily extended to support advanced queries.
3. **Efficiency**: It has low storage costs and minimal search latency, making it practical for use today.

### 8. Related Work

Several recent solutions have been proposed to perform searches on encrypted data, such as [30] and [3]. While encryption provides data confidentiality, it often limits the search functionality. These approaches either require clients to share the same encryption keys used by data owners [30] or limit searches to a small number of pre-specified keywords. They also involve sequential scans through encrypted data, which is computationally expensive.

There is extensive literature on anonymous communication to prevent the discovery of source-destination patterns. Two primary types of approaches are proxy-based and mix-based. Proxy-based methods, like Janus [18] and Crowds [24], interpose one or more proxies between the sender and receiver to hide the sender's identity. Peekaboo V-servers are similar to proxies in that all user traffic goes through them, but their primary purpose is to perform searches without revealing key-value pairs, rather than just hiding identities. Mix-based approaches, such as [4, 31], interpose a chain of proxies to achieve unlinkability between the sender and receiver. Peekaboo uses mix-based approaches to prevent timing attacks, but it does not provide unlinkability between key-value pairs in the presence of server collusion.

The problem of Private Information Retrieval (PIR) [5, 14] has been well-studied to protect client privacy in searches. PIR schemes model the database as an n-bit string, allowing clients to retrieve the i-th bit without revealing the index i. Although PIR schemes offer strong security, they are generally impractical due to high computational costs.

Secure multi-party computation (SMC) [16] enables multiple parties, each with private inputs, to collectively compute a function of their inputs while revealing only the function output. Our problem can be seen as a special case of SMC, though it allows for more efficient solutions than general SMC techniques, which are rarely practical.

Recent work [2] has highlighted the value of using two or more logically independent servers to maintain the privacy of database content and queries. This work envisions an architecture where data and queries can be decomposed across multiple servers in different ways, but leaves the implementation details open.

### 7.3 Overhead of Access Control and Authentication

Peekaboo's access control and user authentication mechanisms introduce additional query processing overhead. The V-server-based access control is relatively simple and incurs minimal overhead by performing an additional ACL lookup before returning results. We consider the K-server-based access control described in Section 5.2 to estimate the worst-case performance. This access control and authentication introduce the following extra steps during query processing:
1. Client signature signing and verification.
2. Client pseudonym encryption and decryption.
3. Non-interactive zero-knowledge proof construction and verification.

While digital signature-based client authentication has a relatively constant cost, the cost of decrypting pseudonyms can grow linearly with the number of client pseudonyms assigned by different owners. Fortunately, these expensive computations are performed by the clients, which are less likely to become overloaded compared to the servers. Additionally, client pseudonyms can be cached at the client side to reduce search latency. We implemented steps (1) and (2) in our prototype for evaluation. The non-interactive zero-knowledge proof, as discussed in Section 5.2, can be constructed with a computational expense roughly equal to that of a digital signature.

Figure 11 shows the search latency with Peekaboo's access control and user authentication mechanisms, varying the number of indexed files and the number of client pseudonyms. For comparison, we list the processing time spent at various entities and the time spent on network transmission. Without pseudonym caching, the client-side processing takes the longest time. Generally, the increase in the number of files has little effect on search latency. The client-side processing time increases proportionally with the number of client pseudonyms, while the server-side processing latency increases only slightly. By caching client pseudonyms, we can significantly reduce the client processing time and, consequently, the overall search latency.

### 7.2 Search Latency Analysis

To evaluate the search latencies perceived by clients, we implemented a client program running on a third machine (PIII 550MHz with 128MB RAM) in the same Ethernet LAN. The public key encryption uses the RSA algorithm [26] with 1024-bit keys, and the one-time symmetric key encryption uses the AES algorithm [1] with 128-bit keys. Both algorithms are implemented using the Crypto++ library (version 4.2) [8]. For each query, the servers return the first 100 matched files as query results. Figure 9 shows the search latencies measured by the client. Compared to the regular server, Peekaboo incurs much higher search latency. When using advanced queries to support returning matched keys (i.e., matched file names), the search latency increases only slightly compared to the basic protocol.

To further examine the search latency, we list the times spent in various steps of processing a query in Figure 10. We fixed the number of indexed files to be 10^5 and show both the mean and the standard deviation of latency, as well as the percentage of the total latency. The "Total" column corresponds to the time elapsed between the client's submission of a query and receiving the reply. RSA decryption and network transmission are the most expensive steps, whereas AES encryption and decryption are fast, accounting for less than 5% of the processing time in total. The "Look up" time includes both the K-server lookup and the V-server lookup and depends on the number of indexed files. The "Other" line consists of the time spent for the V-server to buffer and forward client requests to the K-server, as well as the time spent to buffer and forward AES-encrypted replies back to the client.

In general, the search latency is acceptable to clients since network latencies on WANs are usually on the order of tens of milliseconds [21]. By optimizing security operations (e.g., using cryptographic routines implemented in hardware), we expect the performance penalties due to security to decrease. Furthermore, if clients submit multiple queries in a row, they can set up symmetric session keys with the K-server for encrypting/decrypting queried keys to amortize the costs of RSA decryption.

### References

[1] AES. http://csrc.nist.gov/CryptoToolkit/aes/rijndael.
[2] G. Aggarwal, M. Bawa, P. Ganesan, H. G. Molina, K. Kenthapadi, R. Motwani, U. Srivastava, D. Thomas, and Y. Xu. Two can keep a secret: A distributed architecture for secure database services. In CIDR, 2005.
[3] D. Boneh, G. D. Crescenzo, R. Ostrovsky, and G. Persiano. Public key encryption with keyword search. In Proc. of Eurocrypt, 2004.
[4] D. Chaum. Untraceable electronic mail, return addresses, and digital pseudonyms. Communications of the ACM, 24(2):84–88, 1981.
[5] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private information retrieval. In IEEE Symposium on Foundations of Computer Science, 1995.
[6] I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong. Freenet: A distributed anonymous information storage and retrieval system. In Designing Privacy Enhancing Technologies: International Workshop on Design Issues in Anonymity and Unobservability, LNCS 2000.
[7] S. Czerwinski, B. Zhao, T. Hodes, A. Joseph, and R. Katz. An architecture for a secure service discovery service. Mobile Computing and Networking, 1999. http://www.eskimo.com/
[8] W. Dai. Crypto++. http://www.eskimo.com/~weidai/cryptlib.html.
[9] Digital signature standard (DSS). Federal Information Processing Standards Publication 186, 1994.
[10] Exact match. http://www.searchenginedictionary.com/e.shtml#exactmatch.
[31] P. Syverson, D. Goldschlag, and M. Reed. Anonymous connections and onion routing. In Proc. of the IEEE Symposium on Security and Privacy, 1997.
[32] The TLS protocol. http://www.ietf.org/rfc/rfc2246.txt.
[33] M. van Steen, F. Hauck, P. Homburg, and A. Tanenbaum. Locating objects in wide area systems. In IEEE Communications Magazine, pages 104–109, 1998.
[11] Fuzzy match. http://www.searchenginedictionary.com/terms-fuzzy-matching.shtml.
[12] J. Gao and P. Steenkiste. An adaptive protocol for efficient support of range queries in DHT-based systems. In ICNP, 2004.
[13] D. Garlan, D. Siewiorek, A. Smailagic, and P. Steenkiste. Project aura: Towards distraction-free pervasive computing. In IEEE Pervasive Computing 1, 2002.
[14] Y. Gertner, Y. Ishai, E. Kushilevitz, and T. Malkin. Protecting data privacy in private information retrieval schemes. Journal of Computer and System Sciences (JCSS), 60(3):592–629, 2000.
[15] Gnutella hosts. http://www.gnutellahosts.com.
[16] O. Goldreich. The Foundations of Cryptography - Volume 2. Cambridge University Press, 2004.
[17] U. Hengartner and P. Steenkiste. Protecting access to people location information. In Proc. of the First International Conference on Security in Pervasive Computing, 2003.
[18] The Lucent personalized web assistant. http://www.bell-labs.com/project/lpwa/history.html.
[19] L. Kissner, A. Oprea, M. K. Reiter, D. Song, and K. Yang. Private keyword-based push and pull with applications to anonymous communication. In Applied Cryptography and Network Security (ACNS), 2004.
[20] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, and B. Zhao. Oceanstore: An architecture for global-scale persistent storage. In ASPLOS 2000.
[21] H. A. Lagar-Cavilla, N. Tolia, R. Balan, E. de Lara, M. Satyanarayanan, and D. O’Hallaron. Dimorphic computing. Technical report, Carnegie Mellon University, CMU-CS-06-123.
[22] B. Lampson, M. Abadi, M. Burrows, and E. Wobber. Authentication in distributed systems: Theory and practice. ACM Trans. Computer Systems, 10(4):265–310, 1992.
[23] U. Leonhardt and J. Magee. Security considerations for a distributed location service. Journal of Network and Systems Management, 6:51–70, 1998.
[24] M. Reiter and A. Rubin. Crowds: Anonymity for web transactions. ACM Transactions on Information and System Security, 1(1):66–92, 1998.
[25] M. K. Reiter, X. Wang, and M. Wright. Building reliable mix networks with fair exchange. In Applied Cryptography and Network Security (ACNS), 2005.
[26] R. L. Rivest, A. Shamir, and L. M. Adleman. A method for obtaining digital signatures and public-key cryptosystems. Communications of the ACM, 27(2), 1978.
[27] V. Scarlata, B. Levine, and C. Shields. Responder anonymity and anonymous peer-to-peer file sharing. In ICNP 2001.
[28] A. Shamir. How to share a secret. Communications of the ACM, 22(11), 1979.
[29] V. Shoup and R. Gennaro. Securing threshold cryptosystems against chosen ciphertext attack. Journal of Cryptology, 15, 2002.
[30] D. X. Song, D. Wagner, and A. Perrig. Practical solutions for search on encrypted data. In IEEE Symposium on Security and Privacy, 2000.

---

This version of the text is more organized, coherent, and professional, with clear headings and structured paragraphs.