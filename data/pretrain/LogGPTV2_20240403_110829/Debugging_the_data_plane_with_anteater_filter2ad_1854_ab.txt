P(B, C) = dst ip =24 10.1.3.0 ∧ dst ip =25 10.1.3.128
P(C, B) = dst ip =24 10.1.1.0 ∨ dst ip =24 10.1.2.0
P(C, c) = dst ip =24 10.1.3.0
Figure 3: An example of a 3-node IP network. Top:
Network topology, with FIBs in dashed boxes. Bot-
tom: graph used to model network behavior. Ovals rep-
resent networking equipment; rounded rectangles rep-
resent special vertices such as destinations, labeled by
lower case letters. The lower half of the bottom ﬁgure
shows the value of P for each edge in the graph.
router v. The sub-formula dst ip =24 10.1.3.0 in P(B, C) in
Figure 3 is an example.
Packet transformations – for example, setting a quality of
service bit, or tunneling the packet by adding a new header
– might appear diﬀerent since they intuitively modify the
symbolic packet rather than just constraining it. Somewhat
surprisingly, we can represent transformations as constraints
too, through a technique that we present in §3.4.
3.2 Checking reachability
In this subsection, we describe how Anteater checks the
reachability. The next subsection,
most basic invariant:
then, uses this algorithm to check higher-level invariants.
Recall that vertices V correspond to devices or destina-
tions in the network. Given two vertices s, t ∈ V , we deﬁne
the s-t reachability problem as deciding whether there exists
a packet that can be forwarded from s to t. More formally,
the problem is to decide if there exists a symbolic packet
p and an s ❀ t path such that p satisﬁes all constraints
P along the edges of the path. Figure 4 shows a dynamic
programming algorithm to calculate a boolean formula f
representing reachability from s to t. The boolean formula
f has a satisfying assignment if and only if there exists a
packet that can be routed from s to t in at most k hops.
292
function reach(s, t, k, G)
r[t][0] ← true
r[v][0] ← false for all v ∈ V (G) \ t
for i = 1 to k do
for all v ∈ V (G) \ t do
r[v][i] ← (v,u)∈E(G)
end for
(P(v, u) ∧ r[u][i − 1])
end for
return 1≤i≤k
r[s][i]
Figure 4: Algorithm to compute a boolean formula rep-
resenting reachability from s to t in at most k hops in
network graph G.
function loop(v, G)
v ← a new vertex in V (G)
for all (u, v) ∈ E(G) do
E(G) ← E(G) ∪ {(u, v)}
P(u, v) ← P(u, v)
end for
Test satisﬁability of reach(v, v, |V (G)|, G)
Figure 5: Algorithm to detect forwarding loops involving
vertex v in network G.
This part of Anteater is similar to an algorithm proposed by
Xie et al. [39], expressed as constraints rather than sets of
packets.
To guarantee that all reachability is discovered, one would
pick in the worst case k = n − 1 where n is the number of
network devices modeled in G. A much smaller k may suﬃce
in practice because path lengths are expected to be smaller
than n − 1.
We give an example run of the algorithm for the network
of Figure 3. Suppose we want to check reachability from
A to C. Here k = 2 suﬃces since there are only 3 devices.
Anteater initializes P as shown in Figure 3 and the algorithm
initializes s ← A, t ← C, k ← 3, r[C][0] ← true, r[A][0] ←
false, and r[B][0] ← false. After the ﬁrst iteration of the
outer loop we have:
r[A][1] = false
r[B][1] = P(B, C)
= (dst ip =24 10.1.3.0 ∧ dst ip =25 10.1.3.128)
After the second iteration we have:
r[A][2] = r[B][1] ∧ P(A, B)
= dst ip =24 10.1.3.0 ∧ dst ip =25 10.1.3.128 ∧
(dst ip =24 10.1.2.0 ∨ dst ip =24 10.1.3.0)
r[B][2] = false
The algorithm then returns the formula r[A][1] ∨ r[A][2].
3.3 Checking forwarding loops, packet loss,
and consistency
The reachability algorithm can be used as a building block
to check other invariants.
293
function packet_loss(v, D, G)
n ← the number of network devices in G
d ← a new vertex in V (G)
for all u ∈ D do
(u, d) ← a new edge in E(G)
P(u, d) ← true
end for
c ← reach(v, d, n, G)
Test satisﬁability of ¬c
Figure 6: Algorithm to check whether packets starting at
v are dropped without reaching any of the destinations
D in network G.
Loops.
Figure 5 shows Anteater’s algorithm for detect-
ing forwarding loops involving vertex v. The basic idea of
the algorithm is to modify the network graph by creating a
dummy vertex v that can receive the same set of packets
as v (i.e., v and v have the same set of incoming edges and
edge policies). Thus, v-v reachability corresponds to a for-
warding loop. The algorithm can be run for each vertex v.
Anteater thus either veriﬁes that the network is loop-free,
or returns an example of a loop.
Packet loss.
Another property of interest is whether
“black holes” exist: i.e., whether packets may be lost with-
out reaching any destination. Figure 6 shows Anteater’s al-
gorithm for checking whether packets from a vertex v could
be lost before reaching a given set of destinations D, which
can be picked as (for example) the set of all local destination
preﬁxes plus external routers. The idea is to add a “sink”
vertex d which is reachable from all of D, and then (in the al-
gorithm’s last line) test the absence of v-d reachability. This
will produce an example of a packet that is dropped or con-
ﬁrm that none exists.2 Of course, in some cases packet loss
is the correct behavior. For example, in the campus network
we tested, some destinations are ﬁltered due to security con-
cerns. Our implementation allows operators to specify lists
of IP addresses or other conditions that are intentionally
not reachable; Anteater will then look for packets that are
unintentionally black-holed. We omit this extension from
Figure 6 for simplicity.
Consistency. Networks commonly have devices that are
expected to have identical forwarding policy, so any dif-
fering behavior may indicate a bug. Suppose, for exam-
ple, that the operator wishes to test if two vertices v1 and
v2 will drop the same set of packets. This can be done
by running packet_loss to construct two formulas c1 =
packet_loss(v1, D, G) and c2 = packet_loss(v2, D, G), and
testing satisﬁability of (c1 xor c2). This oﬀers the opera-
tor a convenient way to ﬁnd potential bugs without speciﬁ-
cally listing the set of packets that are intentionally dropped.
Other notions of consistency (e.g., based on reachability to
speciﬁc destinations) can be computed analogously.
3.4 Packet transformations
The discussion in earlier subsections assumed that packets
2This loss could be due either to black holes or loops.
If
black holes speciﬁcally are desired, then either the loops can
be ﬁxed ﬁrst, or the algorithm can be rerun with instructions
to ﬁlter the previous results. We omit the details.
traversing the network remain unchanged. Numerous pro-
tocols, however, employ mechanisms that transform packets
while they are in ﬂight. For example, MPLS swaps labels,
border routers can mark packets to provide QoS services,
and packets can be tunneled through virtual links which in-
volves prepending a header. In this subsection, we present
a technique that ﬂexibly handles packet transformations.
Basic technique. Rather than working with a single sym-
bolic packet, we use a symbolic packet history. Speciﬁcally,
we replace each symbolic packet s with an array (s0, . . . , sk)
where si represents the state of the packet at the ith hop.
Now, rather than transforming a packet, we can express a
transformation as a constraint on its history: a packet trans-
formation f (·) at hop i induces the constraint si+1 = f (si).
For example, an edge traversed by two MPLS label switched
paths with incoming labels in
2 and corresponding outgo-
ing labels out
2 would have the transformation constraint
1 , in
, out
1
j∈{1,2}si.label = in
j  .
j ∧ si+1.label = out
Another transformation could represent a network address
translation (NAT) rule, setting an internal source IP address
to an external one:
si+1.source ip = 12.34.56.78
A NAT rule could be non-deterministic, if a snapshot of the
NAT’s internal state is not available and it may choose from
multiple external IP addresses in a certain preﬁx. This can
be represented by a looser constraint:
si+1.source ip =24 12.34.56.0
And of course, a link with no transformation simply induces
the identity constraint:
si+1 = si.
We let Ti(v, w) refer to the transformation constraints for
packets arriving at v after i hops and continuing to w.
Application to invariant algorithms.
Implementing
this technique in our earlier reachability algorithm involves
two principal changes. First, we must include the transfor-
mation constraints T in addition to the policy constraints
P. Second, the edge policy function P(u, v), rather than
referring to variables in a single symbolic packet s, will be
applied to various entries of the symbolic packet array (si).
So it is parameterized with the relevant entry index, which
we write as Pi(u, v); and when computing reachability we
must check the appropriate positions of the array. Incorpo-
rating those changes, Line 5 of our reachability algorithm
(Fig. 4) becomes
r[v][i] ← (v,u)∈E(G)
(Ti−1(v, u) ∧ Pi−1(v, u) ∧ r[u][i − 1]) .
The loop detection algorithm, as it simply calls reachabil-
ity as a subroutine, requires no further changes.
The packet loss and consistency algorithms have a compli-
cation: as written, they test satisﬁability of the negation of
a reachability formula. The negation can be satisﬁed either
with a symbolic packet that would be lost in the network,
or a symbolic packet history that couldn’t have existed be-
cause it violates the transformation constraints. We need to
diﬀerentiate between these, and ﬁnd only true packet loss.
294
To do this, we avoid negating the formula. Speciﬁcally, we
modify the network by adding a node  acting as a sink for
lost packets. For each non-destination node u, we add an
edge u →  annotated with the constraint that the packet is
dropped by u (i.e., the packet violates the policy constraints
on all of u’s outgoing edges). We also add an edge w → 
with no constraint, for each destination node w ∈ D. We
can now check for packet loss starting at v by testing satis-
ﬁability of the formula reach(v, , n − 1, G) where n is the
number of nodes and G is the network modiﬁed as described
here.
The consistency algorithm encounters a similar problem
due to the xor operation, and has a similar solution.
Notes. We note two eﬀects which are not true in the sim-
pler transformation-free case. First, the above packet loss
algorithm does not ﬁnd packets which loop (since they never
transit to ); but of course, they can be found separately
through our loop-detection algorithm.
Second, computing up to k = n − 1 hops does not guar-
In
antee that all reachability or loops will be discovered.
the transformation-free case, k = n − 1 was suﬃcient be-
cause after n − 1 hops the packet must either have been
delivered or revisited a node, in which case it will loop in-
deﬁnitely. But transformations allow the state of a packet to
change, so revisiting a node doesn’t imply that the packet
will loop indeﬁnitely.
In theory, packets might travel an
arbitrarily large number of hops before being delivered or
dropped. However, we expect k ≤ n − 1 to be suﬃcient in
practice.
Application to other invariants.
Packet transforma-
tions enable us to express certain other invariants succinctly.
Figure 7 shows a simpliﬁed version of a real-world exam-
ple from our campus network. Most servers are connected
to the external network via a ﬁrewall, but the PlanetLab
servers connect to the external network directly. For secu-
rity purposes, all traﬃc between campus servers and Plan-
etLab nodes is routed through the external network, except
for administrative links between the PlanetLab nodes and
a few trusted servers. One interesting invariant is to check
whether all traﬃc from the external network to protected
servers indeed goes through the ﬁrewall as intended.
This invariant can be expressed conveniently as follows.
We introduce a new ﬁeld inspected in the symbolic packet,
and for each edge (f, v) going from the ﬁrewall f towards
the internal network of servers, we add a transformation
constraint:
Ti(f, v) = si+1.inspected ← 1.
Then for each internal server S, we check whether
(sk.inspected = 0) ∧ R(ext, S)
where ext is the node representing the external network, and
R(S, ext) is the boolean formula representing reachability
from ext to S computed by the reach algorithm.
If this
formula is true, Anteater will give an example of a packet
which circumvents the ﬁrewall.
4.
IMPLEMENTATION
We implemented Anteater on Linux with about 3,500 lines
of C++ and Ruby code, along with roughly 300 lines of
auxiliary scripts to canonicalize data plane information from
Server2!
Server1!
…!
…!
inspected←1!
…!
Firewall!
…!
Planet 
Lab!
External 
Network!
Figure 7: An example where packet transformations al-
low convenient checking of ﬁrewall policy. Solid lines
are network links; text on the links represents a trans-
formation constraint to express the invariant. Clouds
represent omitted components in the network.
Foundry, Juniper and Cisco routers into a comma-separated
value format.
Our Anteater implementation represents boolean func-
tions and formulas in the intermediate representation format
of LLVM [23]. LLVM is not essential to Anteater; our in-
variant algorithms could output SAT formulas directly. But
LLVM provides a convenient way to represent SAT formulas
as functions, inline these functions, and simplify the result-
ing formulas.
In particular, Anteater checks an invariant as follows. First,
Anteater translates the policy constraints P and the trans-
formation constraints T into LLVM functions, whose argu-
ments are the symbolic packets they are constraining. Then
Anteater runs the desired invariant algorithm (reachability,
loop detection, etc.; §3), outputting the formula using calls
to the P and T functions. The resulting formula is stored
in the @main function. Next, LLVM links together the P,
T , and @main functions and optimizes when necessary. The
result is translated into SAT formulas, which are passed into
a SAT solver. Finally, Anteater invokes the SAT solver and
reports the results to the operator.
Recall the example presented in §3.2. We want to check
reachability from A to C in Figure 3. Anteater translates
the policy function P(B, C) into function @p_bc(), and puts
the result of dynamic programming algorithm into @main():
define @p_bc(%si, %si+1) {
% = load %si.dst_ip
%1 = and %, xffffff
%2 = icmp eq xa13, %1
%3 = and %, xffffff8