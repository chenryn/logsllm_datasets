address to Unity’s servers and referring to it as a uuid in the
transmission (e.g., as an HTTP GET parameter key name).
In this case, the access was happening inside of Unity’s C++
native library. We reverse engineered libunity.so to deter-
mine how it was obtaining the MAC address.
Reversing Unity’s 18 MiB compiled C++ library is more
involved than Android’s bytecode. Nevertheless, we were
able to isolate where the data was being processed precisely
because it hashes the MAC address with MD5. Unity provided
its own unlabelled MD5 implementation that we found by
searching for the constant numbers associated with MD5; in
this case, the initial state constants.
Unity opens a network socket and uses an ioctl (UNIX
“input-output control”) to obtain the MAC address of the WiFi
network interface. In effect, ioctls create a large suite of
“numbered” API calls that are technically no different than
well-named system calls like bind or close but used for in-
frequently used features. The behaviour of an ioctl depends
on the speciﬁc “request” number. Speciﬁcally, Unity uses the
SIOCGIFCONF2 ioctl to get the network interfaces, and then
uses the SIOCGIFHWADDR3 ioctl to get the corresponding
MAC address.
We observed that 42 apps were obtaining and sending to
Unity servers the MAC address of the network card with-
out holding the ACCESS_NETWORK_STATE permission. To
quantify the prevalence of this technique in our corpus of
Android apps, we ﬁngerprinted this behaviour through an er-
ror string that references the ioctl code having just failed.
This allowed us to ﬁnd a total of 12,408 apps containing
this error string, of which 748 apps do not hold the AC-
CESS_NETWORK_STATE permission.
2Socket ioctl get interface conﬁguration
3Socket ioctl get interface hardware address
4.3 Router MAC Address
Access to the WiFi router MAC address (BSSID) is protected
by the ACCESS_WIFI_STATE permission. In Section 2, we
exempliﬁed side channels with router MAC addresses being
ersatz location data, and discussed the FTC enacting millions
of dollars in ﬁnes for those engaged in the practice of using
this data to deceptively infer users’ locations. Android Nougat
added a requirement that apps hold an additional location per-
mission to scan for nearby WiFi networks [34]; Android Oreo
further required a location permission to get the SSID and
MAC address of the connected WiFi network. Additionally,
knowing the MAC address of a router allows one to link dif-
ferent devices that share Internet access, which may reveal
personal relations by their respective owners, or enable cross-
device tracking.
Our analysis revealed two side channels to access the con-
nected WiFi router information: reading the ARP cache and
asking the router directly. We found no side channels that
allowed for scanning of other WiFi networks. Note that this
issue affects all apps running on recent Android versions, not
just those without the ACCESS_WIFI_STATE permission. This
is because it affects apps without a location permission, and
it affects apps with a location permission that the user has not
granted using the ask-on-ﬁrst-use controls.
Reading the ARP Table The Address Resolution Proto-
col (ARP) is a network protocol that allows discovering and
mapping the MAC layer address associated with a given IP
address. To improve network performance, the ARP protocol
uses a cache that contains a historical list of ARP entries, i.e.,
a historical list of IP addresses resolved to MAC address, in-
cluding the IP address and the MAC address of the wireless
router to which the device is connected (i.e., its BSSID).
Reading the ARP cache is done by opening the pseudo
ﬁle /proc/net/arp and processing its content. This ﬁle is
not protected by any security mechanism, so any app can ac-
cess and parse it to gain access to router-based geolocation
information without holding a location permission. We built
a working proof-of-concept app and tested it for Android Pie
using an app that requests no permissions. We also demon-
strated that when running an app that requests both the AC-
CESS_WIFI_STATE and ACCESS_COARSE_LOCATION per-
missions, when those permissions are denied, the app will ac-
cess the data anyway. We responsibly disclosed our ﬁndings
to Google in September, 2018.
We discovered this technique during dynamic analysis,
when we observed one library using this method in prac-
tice: OpenX [57], a company that according to their web-
site “creates programmatic marketplaces where premium pub-
lishers and app developers can best monetize their content
by connecting with leading advertisers that value their au-
diences.” OpenX’s SDK code was not obfuscated and so
we observed that they had named the responsible function
612    28th USENIX Security Symposium
USENIX Association
Table 2: SDKs seen sending router MAC addresses and also containing code to access the ARP cache. For reference, we report
the number of apps and a lower bound of the total number of installations of those apps. We do this for all apps containing the
SDK; those apps that do not have ACCESS_WIFI_STATE, which means that the side channel circumvents the permissions system;
and those apps which do have a location permission, which means that the side channel circumvents location revocation.
SDK Name
AIHelp
Huq Industries
OpenX
xiaomi
jiguang
Peel
Asurion
Cheetah Mobile
Mob
Contact
Domain
cs30.net
huq.io
openx.net
xiaomi.com
jpush.cn
peel-prod.com United States
mysoluto.com United States
cmcm.com
mob.com
Incorporation
(Apps)
Country
United States
30
United Kingdom 137
United States
42
47
China
30
China
5
14
2
13
China
China
Total Prevalance
(Installs)
334 million
329 million
1072 million
986 million
245 million
306 million
2 million
1001 million
97 million
Wi-Fi Permission
(Installs)
210 million
0
141 million
0
0
0
0
0
0
(Apps)
3
0
7
0
0
0
0
0
0
No Location Permission
(Apps)
12
131
23
44
26
4
14
2
6
(Installs)
195 million
324 million
914 million
776 million
184 million
206 million
2 million
1001 million
81 million
getDeviceMacAddressFromArp. Furthermore, a close anal-
ysis of the code indicated that it would ﬁrst try to get the data
legitimately using the permission-protected Android API; this
vulnerability is only used after the app has been explicitly de-
nied access to this data.
OpenX did not directly send the MAC address, but rather
the MD5 hash of it. Nevertheless, it is still trivial to compute
a MAC address from its corresponding hash: they are vul-
nerable to a brute-force attack on hash functions because of
the small number of MAC addresses (i.e., an upper bound of
48 bits of entropy).4 Moreover, insofar as the router’s MAC
address is used to resolve an app user’s geolocation using a
MAC-address-to-location mapping, one need only to hash the
MAC addresses in this mapping (or store the hashes in the ta-
ble) and match it to the received value to perform the lookup.
While OpenX was the only SDK that we observed ex-
ploiting this side channel, we searched our entire app cor-
pus for the string /proc/net/arp, and found multiple third-
party libraries that included it. In the case of one of them,
igexin, there are existing reports of their predatory be-
haviour [15]. In our case, log ﬁles indicated that after
igexin was denied permission to scan for WiFi, it read
/system/xbin/ip, ran /system/bin/ifconfig, and then
ran cat /proc/net/arp. Table 2 shows the prevalence of
third-party libraries with code to access the ARP cache.
Router UPnP One SDK in Table 2 includes another tech-
nique to get the MAC address of the WiFi access point: it uses
UPnP/SSDP discovery protocols. Three of Peel’s smart re-
mote control apps (tv.peel.samsung.app, tv.peel.smartremote,
and tv.peel.mobile.app) connected to 192.168.0.1, the IP
address of the router that was their gateway to the Internet.
The router in this conﬁguration was a commodity home router
that supports universal plug-and-play; the app requested the
igd.xml (Internet gateway device conﬁguration) ﬁle through
4Using commodity hardware, the MD5 for every possible MAC address
can be calculated in a matter of minutes [40].
port 1900 on the router. The router replied with, among other
manufacturing details, its MAC address as part of its UUID.
These apps also sent WiFi MAC addresses to their own servers
and a domain hosted by Amazon Web Services.
The fact that the router is providing this information to
devices hosted in the home network is not a ﬂaw with Android
per se. Rather it is a consequence of considering every app on
every phone connected to a WiFi network to be on the trusted
side of the ﬁrewall.
4.4 Geolocation
So far our analysis has showed how apps circumvent the per-
mission system to gain access to persistent identiﬁers and data
that can be used to infer geolocation, but we also found sus-
picious behaviour surrounding a more sensitive data source,
i.e., the actual GPS coordinates of the device.
We identiﬁed 70 different apps sending location data to 45
different domains without having any of the location permis-
sions. Most of these location transmissions were not caused
by circumvention of the permissions system, however, but
rather the location data was provided within incoming pack-
ets: ad mediation services provided the location data embed-
ded within the ad link. When we retested the apps in a differ-
ent location, however, the returned location was no longer as
precise, and so we suspect that these ad mediators were us-
ing IP-based geolocation, though with a much higher degree
of precision than is normally expected. One app explicitly
used www.googleapis.com’s IP-based geolocation and we
found that the returned location was accurate to within a few
meters; again, however, this accuracy did not replicate when
we retested elsewhere [59]. We did, however, discover one
genuine side channel through photo EXIF data.
Shutterﬂy and EXIF Metadata We observed that the
Shutterﬂy app (com.shutterﬂy) sends precise geolocation data
to its own server (apcmobile.thislife.com) without hold-
ing a location permission. Instead, it sent photo metadata
USENIX Association
28th USENIX Security Symposium    613
from the photo library, which included the phone’s precise
location in its exchangeable image ﬁle format (EXIF) data.
The app actually processed the image ﬁle: it parsed the EXIF
metadata—including location—into a JSON object with la-
belled latitude and longitude ﬁelds and transmitted it to
their server.
While this app may not be intending to circumvent the
permission system, this technique can be exploited by a ma-
licious actor to gain access to the user’s location. When-
ever a new picture is taken by the user with geolocation en-
abled, any app with read access to the photo library (i.e.,
READ_EXTERNAL_STORAGE) can learn the user’s precise
location when said picture was taken. Furthermore, it also al-
lows obtaining historical geolocation ﬁxes with timestamps
from the user, which could later be used to infer sensitive in-
formation about that user.
5 Related Work
We build on a vast literature in the ﬁeld of covert- and side-
channel attacks for Android. However, while prior studies
generally only reported isolated instances of such attacks or
approached the problem from a theoretical angle, our work
combines static and dynamic analysis to automatically detect
real-world instances of misbehaviours and attacks.
Covert Channels Marforio et al. [49] proposed several sce-
narios to transmit data between two Android apps, including
the use of UNIX sockets and external storage as a shared
buffer. In our work we see that the shared storage is indeed
used in the wild. Other studies have focused on using mobile
noises [26, 70] and vibrations generated by the phone (which
could be inaudible to users) as covert channels [3, 17]. Such
attacks typically involve two physical devices communicating
between themselves. This is outside of the scope of our work,
as we focus on device vulnerabilities that are being exploited
by apps and third parties running in user space.
Side Channels Spreitzer et al. provided a good classiﬁca-
tion of mobile-speciﬁc side-channels present in the litera-
ture [74]. Previous work has demonstrated how unprivileged
Android resources could be to used to infer personal infor-
mation about mobile users, including unique identiﬁers [72]
or gender [51]. Researchers also demonstrated that it may be
possible to identify users’ locations by monitoring the power
consumption of their phones [52] and by sensing publicly
available Android resources [91]. More recently, Zhang et al.
demonstrated a sensor calibration ﬁngerprinting attack that
uses unprotected calibration data gathered from sensors like
the accelerometer, gyroscope, and magnetometer [90]. Oth-
ers have shown that unprotected system-wide information is
enough to infer input text in gesture-based keyboards [72].
Research papers have also reported techniques that leverage
lowly protected network information to geolocate users at the
network level [2, 54, 82]. We extend previous work by re-
porting third-party libraries and mobile applications that gain
access to unique identiﬁers and location information in the
wild by exploiting side and covert channels.
6 Discussion
Our work shows a number of side and covert channels that are
being used by apps to circumvent the Android permissions
system. The number of potential users impacted by these ﬁnd-
ings is in the hundreds of millions. In this section, we discuss
how these issues are likely to defy users’ reasonable expecta-
tions, and how these behaviours may constitute violations of
various laws.
We note that these exploits may not necessarily be mali-