```sql
mysql> INSERT INTO clone_tbl (test_id,
    ->                        test_title,
    ->                        test_author,
    ->                        submission_date)
    -> SELECT test_id,test_title,
    ->        test_author,submission_date
    -> FROM test_tbl;
Query OK, 3 rows affected (0.07 sec)
Records: 3  Duplicates: 0  Warnings: 0
```
#### 临时表
MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql 会自动删除表并释放所有空间。
MySQL 临时表只在当前连接可见，如果你使用 PHP 脚本来创建 MySQL 临时表，那每当 PHP 脚本执行完成后，该临时表也会自动销毁。如果你使用了其他 MySQL 客户端程序连接 MySQL 数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。
实例
```sql
-- 以下展示了使用 MySQL 临时表的简单实例，以下的 SQL 代码可以适用于 PHP 脚本的 mysql_query() 函数。
mysql> CREATE TEMPORARY TABLE SalesSummary (
    -> product_name VARCHAR(50) NOT NULL
    -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00
    -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00
    -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0
);
Query OK, 0 rows affected (0.00 sec)
mysql> INSERT INTO SalesSummary
    -> (product_name, total_sales, avg_unit_price, total_units_sold)
    -> VALUES
    -> ('cucumber', 100.25, 90, 2);
mysql> SELECT * FROM SalesSummary;
+--------------+-------------+----------------+------------------+
| product_name | total_sales | avg_unit_price | total_units_sold |
+--------------+-------------+----------------+------------------+
| cucumber     |      100.25 |          90.00 |                2 |
+--------------+-------------+----------------+------------------+
1 row in set (0.00 sec)
```
#### 索引
MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高 MySQL 的检索速度。
打个比方，如果合理的设计且使用索引的 MySQL 是一辆兰博基尼的话，那么没有设计和使用索引的 MySQL 就是一个人力三轮车。
例如，如果想要查阅一本书中与某个特定主题相关的所有页面，你会先去查询索引（索引按照字母表顺序列出了所有主题），然后从索引中找到一页或者多页与该主题相关的页面。
索引分单列索引和组合索引。
- 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。
- 组合索引，即一个索引包含多个列。
上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE和DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。
索引能够提高 SELECT 查询和 WHERE 子句的速度，但是却降低了包含 UPDATE 语句或 INSERT 语句的数据输入过程的速度。索引的创建与删除不会对表中的数据产生影响。
建立索引会占用磁盘空间的索引文件。实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。
**普通索引**
- 创建索引
    这是最基本的索引，它没有任何限制。它有以下几种创建方式：
    ```sql
    CREATE INDEX indexName
    ON mytable(username(length));
    ```
    如果是 CHAR，VARCHAR 类型，length 可以小于字段实际长度;如果是 BLOB 和 TEXT 类型，必须指定 length。
- 修改表结构(添加索引)
    ```sql
    ALTER table tableName
    ADD INDEX indexName(columnName)
    ```
- 创建表的时候直接指定
    ```sql
    CREATE TABLE mytable(
    ID INT NOT NULL,
    username VARCHAR(16) NOT NULL,
    INDEX [indexName] (username(length))
    );
    ```
- 删除索引的语法
    ```sql
    DROP INDEX [indexName] ON mytable;
    ```
**唯一索引**
它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：
- 创建索引
    ```sql
    CREATE UNIQUE INDEX indexName
    ON mytable(username(length))
    ```
- 修改表结构
    ```sql
    ALTER table mytable
    ADD UNIQUE [indexName] (username(length))
    ```
- 创建表的时候直接指定
    ```sql
    CREATE TABLE mytable(
    ID INT NOT NULL,
    username VARCHAR(16) NOT NULL,
    UNIQUE [indexName] (username(length))
    );
    ```
**实例**
本例会创建一个简单的索引，名为 "PersonIndex"，在 Person 表的 LastName 列：
```sql
CREATE INDEX PersonIndex
ON Person (LastName)
```
如果你希望以降序索引某个列中的值，你可以在列名称之后添加保留字 DESC：
```sql
CREATE INDEX PersonIndex
ON Person (LastName DESC)
```
假如你希望索引不止一个列，你可以在括号中列出这些列的名称，用逗号隔开：
```sql
CREATE INDEX PersonIndex
ON Person (LastName, FirstName)
```
此种索引叫聚簇索引
**使用ALTER 命令添加和删除索引**
有四种方式来添加数据表的索引：
- ALTER TABLE tbl_name ADD PRIMARY KEY (column_list): 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。
- ALTER TABLE tbl_name ADD UNIQUE index_name (column_list): 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。
- ALTER TABLE tbl_name ADD INDEX index_name (column_list): 添加普通索引，索引值可出现多次。
- ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):该语句指定了索引为 FULLTEXT ，用于全文索引。
以下实例为在表中添加索引。
```sql
ALTER TABLE testalter_tbl ADD INDEX (c);
```
你还可以在 ALTER 命令中使用 DROP 子句来删除索引。尝试以下实例删除索引:
```sql
ALTER TABLE testalter_tbl DROP INDEX c;
```
**显示索引信息**
你可以使用 SHOW INDEX 命令来列出表中的相关的索引信息。可以通过添加 \G 来格式化输出信息。
```sql
SHOW INDEX FROM table_name; \G
```
---
## DML 增删改表中的数据
### 插入数据
第 1 种：给全表字段插入数据，不需要指定字段列表，但要求数据的值出现的顺序必须与表中的字段出现的顺序一致，并且凡是非数值数据，都需要用引号（建议使用单引号）括起来。
```sql
insert into 表名
values(值列表)[,(值列表)];
-- 示例:
insert into test
valus('charies',18,'3.1');
```
如果数据是字符型，必须使用单引号或者双引号，如："value"。
第 2 种：给部分字段插入数据，需要选定字段列表，字段列表中字段出现的顺序与表中字段的顺序无关，但值列表中字段值的顺序必须与字段列表中的顺序保持一致。
```sql
insert into 表名(字段列表)
values(值列表)[,(值列表)];
-- 示例:
insert into test(age,name)
valus(18,'guo');
```
### 删除数据
```sql
-- 删除满足条件的信息
DELETE FROM table_name [WHERE Clause]
-- 如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。可以在 WHERE 子句中指定任何条件.
-- 删除 id 为 3 的行
delete from students where id=3;
```
```sql
-- 删除所有年龄小于 21 岁的数据
delete from students where age=、(不等于)
between...and
in(集合)
like：模糊查询
占位符
_：可以代替任意一个字符;
%：可以代替任意多个字符;
and 或 &&
or 或 ||
not 或 ！
-- 查询年龄大于等于20
select * from stu where age >= 20;
-- 查询年龄不等于20
select * from stu where age <> 20;
select * from stu where age != 20;
-- 查询年龄大于等于20，小于等于30的;
select * from stu where age between 20 and 30;
select * from stu where age >= 20 && age  70 group by sex;
-- 按照性别分组，分别查询男生和女生的平均成绩，以及人数。要求：分数低于70分的人不参与分组,且分组之后，该组人数要大于2;
select sex, avg(ifnull(english,0))，count(ifnull(id,0)) from stu where english > 70 group by sex having count(ifnull(id,0)) > 2;
select sex, avg(ifnull(english,0))，count(ifnull(id,0)) as 人数 from stu where english > 70 group by sex having 人数 > 2;
```
where 和 having 的区别：
- where 在分组之前进行限定，如果不满足条件，则不参与分组。having 在分组之后进行限定，如果不满足结果，则不会被查询出来;
- where 后面不能跟聚合函数，having 可以跟聚合函数的判断;
#### 分页查询
```sql
-- 语法
limit 开始索引，每页查询的条数;
-- 每页显示3条
select * from stu limit 0,3;
```