radeon子目录中。2015年4月，名为AMDGPU的新驱动发布，它支持
GCN微架构的GPU。2015年9月，AMDGPU驱动进入Linux内核4.2的主
线（mainline）。
除了amdgpu目录之外，在drm目录下还有一个名叫amdkfd的目录。
简单说，这个驱动是用于支持HSA应用的，是HSA软件栈的一部分。作
者认为名字中的kfd是“内核态融合驱动”（Kernel Fusion Driver）的缩
写。终结器是HSA中的概念，需要并行的逻辑先编译为中间语言，运行
时由终结器根据实际硬件编译成目标代码并执行。
10.6 异常和陷阱
异常和陷阱机制赋予处理器飞跃的能力，是处理器报告意外和错误
情况的基本方法，也是报告调试事件的基本途径。
至少从第一代GCN微架构开始，AMD GPU内便实现了比较全面的
异常和陷阱机制。但是，公开的资料对此介绍不多，我们仅能根据有限
的资料和源代码管中窥豹，略陈概要。为了行文简略，如不特别说明，
下文都以Vega微架构（GCN5）为例。
10.6.1 9种异常
根据公开的ISA手册，在Vega微架构中，共定义了如下9种异常。
在下面的异常列表中，方括号内的数字就是二进制位的序号。
[12]：无效的指令或者操作数（invalid）。
[13]：输入的浮点数不是正规浮点数（非正规，denormal）。
[14]：浮点计算中除数为0（float_div0）。
[15]：溢出（overflow）。
[16]：向下溢出（underflow）。
[17]：浮点计算的结果不精确（inexact）。
[18]：整数计算中除数为0（int_div0）。
[19]：地址监视（address watch）。
[20]：内存访问违规（memory violation）。
其中，地址监视异常是用来监视内存访问的，与x86的硬件断点类
似，10.8节将单独介绍。
10.6.2 启用
在GCN中，有一个名为MODE的模式寄存器，一共有32位，其中有
9位是用来启用和禁止上面提到的9种异常，从第12位开始，每一位对应
一种异常。
10.6.3 陷阱状态寄存器
GCN还配备了一个陷阱状态寄存器，名叫TRAPSTS。当有异常发
生时，GCN用这个寄存器报告异常的详细情况。
TRAPSTS寄存器也是32位的，其中第0～8位用来报告刚刚发生的
是何种异常（EXCP），每一位对应上面描述的9种异常中的一种。注
意，这些位具有黏性特征，一旦置1，硬件不会自动复位为0，需要使用
软件来复位。
TRAPSTS寄存器的第10位叫作SAVECTX位，CPU端的软件可以通
过写这一位告诉GPU立即跳转到陷阱处理函数并保存上下文。陷阱处理
函数必须及时执行S_SETREG指令，清除这一位。算核函数中的代码也
可以写这一位来触发陷阱，保存上下文。
第11位（ILLEGAL_INST）用来指示检测到了非法的指令。
第12～14位（ADDR_WATCH1～3）用来指示地址监视机制的命中
情况，三个位与监视的三个地址一一对应，10.8节将介绍地址监视机
制。
当有浮点异常发生时，第16～21位（EXCP_CYCLE）向陷阱处理
函数报告异常发生在哪个时钟周期。因为执行一条浮点指令可能需要多
个时钟周期，通过这个信息，可以帮助判断浮点错误发生在浮点操作的
哪个阶段。第29～31位（DP_RATE）用来进一步描述EXCP_CYCLE字
段，细节从略，感兴趣的读者请查阅Vega指令手册的第3章（3.10
节）。
10.6.4 陷阱处理器基地址
如何告诉GCN陷阱处理函数的位置呢？在GCN中，定义了一个名
叫TBA的寄存器，其全称为陷阱基地址（Trap Base Address）。TBA是
个64位的寄存器，用来存放陷阱处理函数的入口地址。在开源的Linux
内核amdkfd中，向用户态提供了IOCTL接口，供调试器等软件来定制陷
阱处理函数。驱动中的接口函数（kfd_ioctl_set_trap_handler）会把要设
置的信息先记录下来，再通过MMIO和上下文状态保存和恢复机制（见
10.9节）间接设置到GPU的TBA寄存器中。
10.6.5 陷阱处理过程
有多种机制会触发GCN的陷阱机制，包括用户程序发起（使用
S_TRAP指令）、执行程序时遇到异常或者主机端发起。无论是何种原
因，GCN都会产生一条S_TRAP指令，然后使用统一的方式来处理。
GCN中的S_TRAP指令与x86 CPU的INT n指令非常类似，都会让处
理器跳转到异常处理程序。
下面就结合S_TRAP指令的处理过程来简要介绍GCN处理陷阱的过
程。以下是来自Vega指令手册的微操作。
TrapID = SIMM16[7:0];
Wait for all instructions to complete;
{TTMP1, TTMP0} = {3'h0, PCRewind[3:0], HT[0], TrapID[7:0],PC[47:0]};
PC = TBA; // trap base address
PRIV = 1.
其中，第1行表示把S_TRAP指令的立即数部分赋值给TrapID内部变
量。第2行表示等待所有在执行的指令完成。第3行把当前状态赋值给
TTMP1和TTMP0寄存器。TTMP0～TTMP15是特别为异常处理函数定义
的寄存器，共使用了16个标量通用寄存器，每一个都是32位的寄存器。
在第3行中，等号左侧表示把TTMP1和TTMP0拼接为一个64位的寄存
器，右侧是赋值给这个大寄存器的信息，也就是要传递给陷阱处理函数
的信息，由低到高分别如下。
第一部分表示程序计数器（PC）的当前值，共48位。
第二部分表示程序计数器回滚值（PCRewind），用来计算导致异
常的程序地址。因为当发现错误情况准备报告异常时，程序指针可
能已经指向了下一条指令，所以这个回滚值告诉异常处理器应该回
退的数量，其计算公式为：(PC−PCRewind*4)，这部分的长度是4
位。
第三部分表示HT标志，1代表是主机端触发的陷阱（Host Trap），
如果是因为用户程序执行S_TRAP指令或者异常则为0，长度为1
位。
第四部分表示陷阱编号（TrapID），0为硬件保留，长度为8位。
剩下的最后3位填充为0，保留不用。
第4行代表把TBA寄存器中保存的陷阱处理程序地址赋值给程序指
针寄存器。最后一行表示把状态寄存器（STATUS）的特权位（PRIV）
置为1，因为陷阱处理程序在GCN的特权模式下执行，可以访问高特权
的资源。作者认为最后两行的位置应该颠倒一下，先置特权标志，再改
程序指针，因为修改程序指针后处理器就跳转到异常处理函数去执行
了。
10.7 控制波阵的调试接口
本节介绍AMD GPU的调试支持，首先介绍用来控制波阵的调试接
口。需要先声明一下，在公开的文档中，包括前面提到过的指令集文
档，并没有包含专门的章节来介绍调试支持，零散的信息也不多。因此
本节开始的大部分内容都主要依据开源的代码，包括Linux下的开源驱
动程序和GitHub上的开源项目。
10.7.1 5种操作
在AMD的GPGPU模型中，波阵是调度GPU执行资源的基本单位，
相当于NVIDIA的WARP。每个波阵包含64个线程，以相同步伐同时处
理64个工作项。
对于CPU，线程是CPU的基本调度单位，在调试CPU程序时，我们
经常需要对线程执行暂停（SUSPEND）、恢复（RESUME）等操作。
类似地，波阵是调度GPU的基本单位，在调试GPGPU时，也需要对波
阵执行暂停和恢复等操作。在amdkfd驱动的kfd_dbgmgr.h中，可以看到
AMD GPU支持对波阵执行5种操作：暂停、恢复、终止、进入调试模式
和跳入陷阱。下面是有关的枚举定义。
enum HSA_DBG_WAVEOP {
   HSA_DBG_WAVEOP_HALT = 1,   /* Halts a wavefront */
   HSA_DBG_WAVEOP_RESUME = 2, /* Resumes a wavefront */
   HSA_DBG_WAVEOP_KILL = 3,   /* Kills a wavefront */
   HSA_DBG_WAVEOP_DEBUG = 4,  /* Causes wavefront to enter dbg mode */
   HSA_DBG_WAVEOP_TRAP = 5,   /* Causes wavefront to take a trap */
   HSA_DBG_NUM_WAVEOP = 5,
};
其中，HSA_DBG_WAVEOP_DEBUG让GPU进入单步调试模式，
这将在10.9节单独介绍。
10.7.2 指定目标
某一时刻，可能有很多个波阵在GPU上执行，上述操作命令可以发
给指定的某个波阵，也可以发给当前被调试进程的所有波阵，或者广播
给当前进程所在计算单元上的所有波阵。下面是在同一个头文件中定义
的发送模式。
enum HSA_DBG_WAVEMODE {
   /* send command to a single wave */
   HSA_DBG_WAVEMODE_SINGLE = 0,
   /*
    * Broadcast to all wavefronts of all processes is not supported for HS
A user mode
    */
   /* send to waves within current process */
   HSA_DBG_WAVEMODE_BROADCAST_PROCESS = 2,
   /* send to waves within current process on CU  */
   HSA_DBG_WAVEMODE_BROADCAST_PROCESS_CU = 3,
   HSA_DBG_NUM_WAVEMODE = 3,
};
中间有一种数值为2的模式代表发给所有进程的所有波阵。但是把
这个定义隐藏了，原因是不允许用户态调试器发送这样的命令。
10.7.3 发送接口
AMDKFD驱动公开了一个IOCTL形式的接口给用户空间的调试器
程序，源程序文件为kfd_chardev.c。控制码
AMDKFD_IOC_DBG_WAVE_CONTROL用来调用波阵控制。用户空间
的程序需要传递下面这个结构体作为参数。
struct dbg_wave_control_info {
    struct kfd_process *process;
    uint32_t trapId;
    enum HSA_DBG_WAVEOP operand;
    enum HSA_DBG_WAVEMODE mode;
    struct HsaDbgWaveMessage dbgWave_msg;
};
最后一个成员用来指定操作目标的“地理”信息，其定义与硬件版本
相关，目前使用的是AMDGen2版本。
union HsaDbgWaveMessageAMD {
    struct HsaDbgWaveMsgAMDGen2 WaveMsgInfoGen2;
};
其详细定义如清单10-2所示。
清单10-2 用于指定硬件目标的波阵控制消息结构体
struct HsaDbgWaveMsgAMDGen2 {
    union {
        struct ui32 {
            uint32_t UserData:8;    /* user data */
            uint32_t ShaderArray:1;    /* Shader array */
            uint32_t Priv:1;    /* Privileged */
            uint32_t Reserved0:4;    /* Reserved, should be 0 */
            uint32_t WaveId:4;    /* wave id */
            uint32_t SIMD:2;    /* SIMD id */
            uint32_t HSACU:4;    /* Compute unit */
            uint32_t ShaderEngine:2;/* Shader engine */
            uint32_t MessageType:2;    /* see HSA_DBG_WAVEMSG_TYPE */
            uint32_t Reserved1:4;    /* Reserved, should be 0 */
        } ui32;
        uint32_t Value;
    };
    uint32_t Reserved2;
};
回忆我们在介绍工作组状态时使用的清单10-1，当时的波阵ID信息
与清单10-2所定义的结构体有很多关联之处。
10.7.4 限制
值得说明的是，上述机制依赖GPU的硬件实现，而且不是所有版本
的AMD GPU都支持这些功能。比如多个函数中都有下面这样的检查，
如果发现是不支持的硬件，则会报告错误并返回。
if (dev->device_info->asic_family == CHIP_CARRIZO) {
      pr_debug("kfd_ioctl_dbg_wave_control not supported on CZ\n");
      return -EINVAL;
}
上面代码中的CARRIZO是指2015年发布的APU产品，可能是因为
产品瑕疵禁止了控制功能。
10.8 地址监视
在调试CPU程序时，可以通过设置监视点（watch point）来监视变
量访问。监视点的实现有多种方法，比如使用x86 CPU的调试寄存器是
一种常用的方法。
为了能够监视GPU程序中的变量访问，AMD GPU提供了很强大的