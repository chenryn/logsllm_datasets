# OCR Output
## Page 1
SECURITYIN
COMPUTING
FIFTHEDITION
Chapter3:ProgramsandProgramming
授课教师：高海波
河南中医药大学
信息管理与信息系统教研室
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved.
---
## Page 2
Objectivesfor Chapter 3
· Learn about memory organization, buffer
overflows, and relevant countermeasures
 Common programming bugs, such as off-by-one
errors, race conditions, and incomplete mediation
· Survey of past malware and malware capabilities
Virus detection
. Tips for programmers on writing code for security
FromSecurity in Computing,FifthEdition,by Charles P
). Copvriaht 2015 by Pearson Education, Inc. All riqhts reserved
---
## Page 3
MemoryAllocation
High addresses
Stack
Heap
Static data
Code
Low addresses
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved
---
## Page 4
Datavs.Instructions
Store sum = 7178
0X1C0A
Execute instruction
“Jump forward 10
bytes'
Memory
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved
---
## Page 5
Memory Organization
High addresses
Stac
Local Data
Program Code
System Data
System Code
Low addresses
---
## Page 6
BufferOverflows
· Occur when data is written beyond thespace allocated for
it, such as a 1oth byte in a 9-byte array
· In a typical exploitable buffer overflow, an attacker's
inputsareexpectedtogointoregionsof memory
allocatedfor data,butthoseinputsareinsteadallowedto
overwrite memory holding executable code
·Thetrickfor an attacker is finding buffer overflow
opportunities that lead to overwritten memory being
executed, and finding the right code to input
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc.All rights reserved
---
## Page 7
How Buffer Overflows Happen
char sample[l0];
int i;
for 
(i=0;i<=9; i++)
Sample[i] = `A';
sample[10] =`B';
---
## Page 8
WhereaBufferCanOverflow
User's Data
AAAAAAAAAAB
Memory
(a) Affects user's data
User's Data
User's Program Code
AAAAAAAAAAB
Memory
(b) Affects user's code
User's Data
System Data
AAAAAAAAAAB
Memory
(c) Affects system data
User's Data
System Program Code
Memory
AAAAAAAAAAB
(d)Affectssystemcode
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved
---
## Page 9
TheStack
Stack
P3
P2
Directionof
P1
growth
Prog Ctr
StackPtr
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved.
---
## Page 10
10
TheStackafterProcedureCalls
ProcedureB
Stack
P3
call C
ProcedureA
P2
call B
P1
Prog Ctr
Stack Ptr
ProcedureC
P2
P1
Prog Ctr
StackPtr
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved.
---
## Page 11
CompromisedStack
ProcedureB
Stack
P3
call C
ProcedureA
P2
call B
P1
Prog Ctr
Stack Ptr
ProcedureC
code
code
Prog Ctr
Stack Ptr
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved
---
## Page 12
12
Overwriting Memory for Execution
· Overwrite the program counter stored in the
stack
 Overwrite part of the code in low memory,
substituting new instructions
 Overwrite the program counter and data in
the stack so that the program counter
points to the stack
FromSecurity in Computing,FifthEdition,by CharlesP
 Copvriaht 2015 by Pearson Education. Inc. All rights reserved
---
## Page 13
13
Harm from Buffer Overflows
.Overwrite:
· Another piece of your program's data
· An instruction in your program
· Data or code belonging to another program
· Data or code belonging to the operating system
 Overwriting a program's instructions gives attackers that
program's execution privileges
· Overwriting operating system instructions gives attackers
the operating system's execution privileges
---
## Page 14
14
Overflow Countermeasures
·Staying withinbounds
· Check lengths before writing
· Confirm that array subscripts are within limits
· Double-check boundary condition code for off-by-one errors
· Limit input to the number of acceptable characters
· Limit programs' privileges to reduce potential harm
Many languageshaveoverflow protections
· Code analyzers can identify many overflow vulnerabilities
· Canary values in stack to signal modification
---
## Page 15
15
IncompleteMediation
· Mediation: Verifying that the subject is
authorized to perform the operation on an
object
· Preventing incomplete mediation:
·Validateall input
· Limit users' access to sensitive data and
functions
· Complete mediation using a reference monitor
---
## Page 16
16
Time-of-ChecktoTime-of-Use
· Mediation performed with a "bait and switch" in the middle
File:
Action:
my_file
Changebyte4 toA
File:
Action:
your_file
Deletefile
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. Allrights reserved.
---
## Page 17
Race Conditions
Seat available?
Book seat
Reservationsystem
Seat available?
B
Time
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved
---
## Page 18
18
RaceConditions
Seat available?
Book seat
A
Reservationsystem
Seat available?
Book seat
B
Time
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. Allrights reserved.
---
## Page 19
19
Other Programming Oversights
· Undocumented access points (backdoors)
·Off-by-one errors
·Integer overflows
· Unterminated null-terminated string
· Parameter length, type, or number errors
· Unsafe utility libraries
---
## Page 20
20
Malware
· Programs planted by an agent with malicious intent to
cause unanticipated or undesired effects
.Virus
· A program that can replicate itself and pass on malicious code to
other nonmalicious programs by modifying them
.Worm
. Trojan horse
· Code that, in addition to its stated effect, has a second,
nonobvious, malicious effect
---
## Page 21
21
Types of Malware
Code Type
Characteristics
Virus
Code that causes malicious behavior and propagates copies of itself
to other programs
Trojan horse
Code that contains unexpected, undocumented, additional
functionality
Worm
Code that propagates copies of itself through a network; impact is
usually degraded performance
Rabbit
Code that replicates itself without limit to exhaust resources
Logic bomb
Code that triggers action when a predetermined condition occurs
Time bomb
Code that triggers action when a predetermined time occurs
Dropper
Transfer agent code only to drop other malicious code, such as
virus or Trojan horse
Hostile mobile code
Code communicated semi-autonomously by programs transmitted
agent
through the web
Script attack,
Malicious code communicated in JavaScript, ActiveX, or another
JavaScript, Active
scripting language, downloaded as part of displaying a web page
code attack
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved.
---
## Page 22
22
Types of Malware (cont.
Code Type
Characteristics
RAT (remote access
Trojan horse that, once planted, gives access from remote location
Trojan)
Spyware
Program that intercepts and covertly communicates data on the
user or the user's activity
Bot
Semi-autonomous agent, under control of a (usually remote)
controller or "herder"; not necessarily malicious
Zombie
Code or entire computer under control of a (usually remote)
program
Browser hijacker
Code that changes browser settings, disallows access to certain
sites, or redirects browser to others
Rootkit
Code installed in “"root" or most privileged section of operating
system; hard to detect
Trapdoor or backdoor
Code feature that allows unauthorized access to a machine or
program; bypasses normal access control and authentication
Tool or toolkit
Program containing a set of tests for vulnerabilities; not dangerous
itself, but each successful test identifies a vulnerable host that can
be attacked
Scareware
Not code; false warning of malicious code attack
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved.
---
## Page 23
23
History of Malware
Year
Name
Characteristics
1982
Elk Cloner
First virus; targets Apple II computers
1985
Brain
First virus to attack IBM PC
1988
Morris worm
Allegedly accidental infection disabled large portion of the
ARPANET, precursor to today's Internet
1989
Ghostballs
First multipartite (has more than one executable piece) virus
1990
Chameleon
First polymorphic (changes form to avoid detection) virus
1995
Concept
First virus spread via Microsoft Word document macro
1998
Back Orifice
Tool allows remote execution and monitoring of infected
computer
1999
Melissa
Virus spreads through email address book
2000
lloveYou
Worm propagates by email containing malicious script.
Retrieves victim's address book to expand infection. Estimated
50 million computers affected.
2000
Timofonica
First virus targeting mobile phones (through SMS text
messaging)
2001
Code Red
Virus propagates from 1"t to 20" of month, attacks
whitehouse.gov web site from 20" to 28", rests until end of
month, and restarts at beginning of next month; resides only in
memory, making it undetected by file-searching antivirus
products
---
## Page 24
24
History of Malware
Year
 Name
Characteristics
2001
Code Red I
Like Code Red, but also installing code to permit remote access
to compromised machines
2001
Nimda
Exploits known vulnerabilities; reported to have spread through
2 million machines in a 24-hour period
2003
 Slammer worm
Attacks SQL database servers; has unintended denial-of-service
impact due to massive amount of traffic it generates
2003
SoBig worm
Propagates by sending itself to all email addresses it finds; can
fake From: field; can retrieve stored passwords
2004
MyDoom worm
Mass-mailing worm with remote-access capability
2004
Bagle or Beagle
Gathers email addresses to be used for subsequent spam
worm
mailings; SoBig, MyDoom, and Bagle seemed to enter a war to
determine who could capture the most email addresses
2008
Rustock.C
Spam bot and rootkit virus
2008
Conficker
Virus believed to have infected as many as 10 million machines;
has gone through five major code versions
2010
Stuxnet
Worm attacks SCADA automated processing systems; zero-day
attack
2011
Duqu
Believed to be variant on Stuxnet
2013
CryptoLocker
Ransomware Trojan that encrypts victim's data storage and
demands a ransom for the decryption key
---
## Page 25
25
Harm from Malicious Code
· Harm to users and systems:
· Sending email to user contacts
· Deleting or encrypting files
· Modifying system information, such as the Windows registry
· Stealing sensitive information, such as passwords
· Attaching to critical system files
· Hide copies of malware in multiple complementary locations
· Harm to the world:
· Some malware has been known to infect millions of systems.
growing at a geometric rate
· Infected systems often become staging areas for new infections
---
## Page 26
26
Transmission and Propagation
· Setup and installer program
· Attached file
· Document viruses
· Autorun
. Using nonmalicious programs:
· Appended viruses
. Viruses that surround a program
· Integrated viruses and replacements
---
## Page 27
27
MalwareActivation
. One-time execution (implanting)
· Boot sector viruses
· Memory-resident viruses
· Application files
. Code libraries
---
## Page 28
28
Virus Effects
Virus Effect
How It Is Caused
Attach to executable
· Modify file directory
 program
. Write to executable program file
Attach to data or
. Modify directory
control file
· Rewrite data
· Append to data
· Append data to self
 Rcmain in mcmory
· Intercept interrupt by modifying interrupt
handler address table
· Load self in non-transient memory area
Infect disks
. Intercept interrupt
· Intercept operating system call (to format
disk, for example)
· Modify system file
· Modify ordinary executable program
Conceal self
· Intercept system calls that would reveal
self and falsify result
· Classify self as “hidden" file
Spread infection
· Infect boot sector
· Infect systems program
· Infect ordinary program
· Infect data ordinary program reads to
control its execution
Prevent deactivation
· Activate before deactivating program and
block deactivation
From Security in Computing, Fifth Edition, by Charles P. Pfleeger,et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc.All rights reserved.
---
## Page 29
29
Countermeasures for Users
· Use software acquired from reliable sources
. Test software in an isolated environment
· Only open attachments when you know them to be safe
. Treat every website as potentially harmful
· Create and maintain backups
---
## Page 30
30
VirusDetection
· Virus scanners look for signs of malicious code infection
· Traditional virus scanners have trouble keeping up with
new malware-detect about 45% of infections
· Detection mechanisms:
· Known string patterns in files or memory
· Execution patterns
· Storage patterns
---
## Page 31
31
Virus
Signatures
IF (--)
Attached
Recognizable
JUMP
VirusCode
signatureelements
Original
Program
Original
Program
Separate
Virus
Module
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. All rights reserved
---
## Page 32
32
Countermeasuresfor Developers
· Modular code: Each code module should be
· Single-purpose
· Small
· Simple
· Independent
Encapsulation
·Informationhiding
·Mutual Suspicion
· Confinement
·Geneticdiversity
---
## Page 33
33
Code Testing
. Unit testing
· Integration testing
. Function testing
. Performance testing
· Acceptance testing
. Installation testing
. Regression testing
. Penetration testing
---
## Page 34
34
Design Principles for Security
· Least privilege
· Economy of mechanism
· Open design
· Complete mediation
· Permission based
· Separation of privilege
· Least common mechanism
· Ease of use
---
## Page 35
35
Other Countermeasures
. Good
· Proofs of program correctness—where possible
· Defensive programming
· Design by contract
·Bad
· Penetrate-and-patch
· Security by obscurity
---
## Page 36
36
Summary
·Buffer overflow attacks can take advantage of the fact that
code and data are stored in the same memory in order to
maliciously modify executing programs
· Programs can have a number of other types of
vulnerabilities, including off-by-one errors, incomplete
mediation, and race conditions
· Malware can have a variety of harmful effects depending
on its characteristics, including resource usage, infection
vector, and payload
· Developers can use a variety of techniques for writing and
testingcodeforsecurity
From Security in Computing, Fifth Edition, by Charles P. Pfleeger, et al. (ISBN: 9780134085043). Copyright 2015 by Pearson Education, Inc. Allrights reserved
---