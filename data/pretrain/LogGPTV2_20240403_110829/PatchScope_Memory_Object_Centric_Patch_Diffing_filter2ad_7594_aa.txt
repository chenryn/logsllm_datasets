title:PatchScope: Memory Object Centric Patch Diffing
author:Lei Zhao and
Yuncong Zhu and
Jiang Ming and
Yichen Zhang and
Haotian Zhang and
Heng Yin
PatchScope: Memory Object Centric Patch Diffing
Lei Zhao∗†
PI:EMAIL
Wuhan University
Yichen Zhang
PI:EMAIL
Wuhan University
Yuncong Zhu
PI:EMAIL
Wuhan University
Haotian Zhang
PI:EMAIL
University of Texas at Arlington
Jiang Ming†
PI:EMAIL
University of Texas at Arlington
Heng Yin
PI:EMAIL
University of California, Riverside
ABSTRACT
Software patching is one of the most significant mechanisms to
combat vulnerabilities. To demystify underlying patch details, the
techniques of patch differential analysis (a.k.a. patch diffing) are
proposed to find differences between patched and unpatched pro-
grams’ binary code. Considering the sophisticated security patches,
patch diffing is expected to not only correctly locate patch changes
but also provide sufficient explanation for understanding patch
details and the fixed vulnerabilities. Unfortunately, none of the
existing patch diffing techniques can meet these requirements.
In this study, we first perform a large-scale study on code changes
of security patches for better understanding their patterns. We then
point out several challenges and design principles for patch diffing.
To address the above challenges, we design a dynamic patch diffing
technique PatchScope. Our technique is motivated by two key
observations: 1) the way that a program processes its input reveals
a wealth of semantic information, and 2) most memory corruption
patches regulate the handling of malformed inputs via updating the
manipulations of input-related data structures. The core of Patch-
Scope is a new semantics-aware program representation, memory
object access sequence, which characterizes how a program refer-
ences data structures to manipulate inputs. The representation can
not only deliver succinct patch differences but also offer rich patch
context information such as input-patch correlations. Such infor-
mation can interpret patch differences and further help security
analysts understand patch details, locate vulnerability root causes,
and even detect buggy patches.
CCS CONCEPTS
• Security and privacy → Software reverse engineering.
∗(1) School of Cyber Science and Engineering, Wuhan University, Wuhan, China; (2)
Key Laboratory of Aerospace Information Security and Trust Computing, China
†Corresponding authors: PI:EMAIL and PI:EMAIL
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423342
KEYWORDS
Software security; vulnerability analysis; patch diffing
ACM Reference Format:
Lei Zhao, Yuncong Zhu, Jiang Ming, Yichen Zhang, Haotian Zhang, and Heng
Yin. 2020. PatchScope: Memory Object Centric Patch Diffing. In 2020 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’20), No-
vember 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 17 pages.
https://doi.org/10.1145/3372297.3423342
1 INTRODUCTION
Software patching is one of the most significant mechanisms to com-
bat vulnerabilities [1]. Security patches imply abundant information
about the fixed vulnerabilities, which benefits the construction of
hot patches [54, 59], input filters [14, 39], and honey patches [2, 4].
Besides, by extracting patch signatures or semantics, researchers
propose to test the presence of patches [74], detect vulnerabilities
with patch-enhanced signatures [69], and evaluate the security im-
pacts of patches [68]. On the offense side, patch details promote the
study of attack vectors and potential variants of patched vulnerabil-
ities [8, 31, 50], such as “1-day” exploit generation [8, 47, 50, 55, 62]
and “buggy patch” [3, 24] detection.
Despite the significance of patches, demystifying patch details,
especially for commodity software, is challenging. Commodity soft-
ware vendors often release patches in binary format. Without the
support of patch source, it is difficult to understand patch details
or even locate patch-relevant code changes in binaries. Although
various online vulnerability databases (e.g., CVE, NVD) archive
identified vulnerabilities, most patch or vulnerability bulletins are
ambiguously worded on technical details [13, 48]. These bulletins
often report simple information such as vulnerability type and secu-
rity impacts [46], which is far away from investigating vulnerability
root causes and understanding patch details.
Patch analysis at the binary level. Given a patched program and
an unpatched one, patch analysis aims to locate differences induced
by patches and interpret such differences with rich semantics, for
investigating the root causes of the fixed vulnerability, as well
as understanding patch details such as how the patch fixes the
vulnerability. To ease presentation, we denote comparison-based
patch analysis as patch diffing.
To locate patch-relevant code changes, an intuitive approach is
to apply binary diffing techniques [27, 34, 49] to capture code differ-
ences, as differences may indicate the changes caused by patches.
The basic insight behind binary diffing techniques is to define code
similarity representations, ranging from static features (e.g., control
flow/call graph [7, 25, 29]) to dynamic behaviors (e.g., system call
dependence [5, 64]), and then leverage such code representations
to measure the similarity between two binaries. The main limi-
tation of these techniques is that code similarity representations
are often specifically designed for different problem scopes, such
as vulnerability detection [16, 18, 21, 22, 71], software plagiarism
detection [40, 60, 64], or obfuscation-resilient malware compari-
son [5, 12, 44, 70]. As a result, these techniques may not be suitable
to locate patch-relevant code for sophisticated types of patches.
For example, up to 50% of security patches only modify less than 7
LOC [36]. Such a small degree of change includes resizing a buffer,
changing function parameters, etc., which may not exhibit any code
differences in generated binaries. Besides, false positives in binary
diffing [19] also affect the performance of patch diffing.
Locating patch-relevant code changes is just an intermediate step.
A more challenging task in patch analysis is to interpret identified
differences for investigating the root causes of the fixed vulnera-
bility, as well as for understanding patch details such as how the
patch fixes the repaired vulnerability.
To interpret patch differences, most of the existing static tech-
niques leverage security patch patterns. APEG [8] identifies a secu-
rity patch if the corresponding code difference involves a security
check. SPAIN [72] identifies security patches based on the assump-
tion that a security patch will not change program semantics and
it typically introduces a new branch for detecting invalid inputs.
SID [68] determines security impacts based on security patterns
by summarizing patterns of how security operations fix common
types of vulnerabilities.
However, security patch patterns used in existing techniques [8,
68, 72] may be incomplete to characterize types of patches. From
the perspective of programming, a vulnerability is mostly caused by
a specific programming logical fault. For example, a buffer overflow
can be caused by missing the input check, or error parameters for
invoking library functions. To fix the vulnerability, a patch will
consequently depend on specific program logics, which would vary
from vulnerability to vulnerability. To fix a use-after-free or double-
free vulnerability, a typical pattern is to make the invalid pointer
NULL. Another common pattern is to delete the dereference. With
the impact of sophisticated types of patches, security patch patterns
may be incomplete to interpret patch differences.
Taking advantage of detailed run-time information, execution
comparison techniques [53, 75] have also been proposed for rea-
soning execution differences. For an observed crash, differential
slicing [30, 67] constructs relevant control and data dependencies
for causal analysis. Although dynamic techniques often assume
a PoC is available, investigating the root cause of a vulnerability
and understanding patch details is still difficult, which may take
a significant amount of time and domain knowledge [6]. More-
over, identified differences at the binary level are represented as
low-level instructions and operands. Without the support of high-
level program abstractions, low-level differences fail to deliver rich
semantics for understanding how or why the two executions differ.
Our approach. In this study, we first perform a large-scale study
on code changes induced by security patches to understand their
patterns. We classify security patches into nine categories in terms
of their code changes. By inspecting code changes, we observe that
patterns used in existing studies are incomplete to characterize com-
plicated types of patches. Further, we point out several challenges
and design principles for patch analysis at the binary level.
To address challenges in patch analysis, we design a dynamic
patch diffing technique, named PatchScope. Compared with ex-
isting techniques that represent identified differences as low-level
instructions, PatchScope represents patch differences as a higher-
level abstraction with rich semantics, which can facilitate the in-
vestigation on the root causes and patch details.
The core of PatchScope is a semantics-aware program represen-
tation: memory object access sequence. Our approach is motivated
by two key observations: 1) the way that a program processes its
input reveals a wealth of semantic information; 2) most security
patches, especially for memory corruption vulnerabilities, aim to
better regulate the handling of bad inputs. More specifically, when
receiving an input, a program subsequently parses the received
input into multiple fields and references various data structures
to manipulate the input [9]. At the binary level, a data structure
reference is represented as a memory object access. Instead of syn-
tactical code changes, our insight regarding how a security patch
affects program semantics is: it typically modifies the manipulations
of input-related data structures. Therefore, given a PoC, we identify
patch differences via the comparison between the memory object
access sequences from the two executions on the unpatched and
patched programs respectively.
In detail, we dynamically excavate program memory objects that
are referenced during execution based on memory access patterns.
With multi-tag taint analysis, we further identify input fields that
are correlated with corresponding memory objects. Then, we define
a memory object access model to represent the manipulations on
input fields. In this way, we abstract the semantics of a dynamic
execution as a memory object access sequence. At last, we adopt
a local sequence alignment algorithm from bioinformatics [58] to
identify patch differences.
We evaluate the performance of PatchScope and existing bi-
nary diffing techniques on real-world vulnerabilities. Evaluation
results show PatchScope delivers more concise and accurate re-
sults than existing binary diffing techniques. Further, we detect
several cases that their security patch differences only reveal at
the level of memory object access sequence. To demonstrate that
PatchScope can facilitate understanding patch details, we sum-
marize how differences in memory object access sequence reflect
the impacts of patches, and present cases for dealing with compli-
cated patches such as overwriting an entire function. At last, we
find a “buggy patch” case that the patched vulnerabilities are not
completely repaired, leaving end-users still vulnerable.
Contributions. In summary, we make the following contributions:
• New insights from a large-scale study on security patches.
We perform a large-scale investigation on security patches
from the perspective of code changes, which is less studied in
previous literature. By inspecting the source code of patches,
we characterize security patches into nine categories with
respect to their code changes. Further, we study the impact
of patch patterns on code changes, and point out that several
challenges in locating patched code at the binary level. Our
investigation can promote studies on patch analysis.
• A memory-object-centric technique for patch diffing.
We propose a new angle to identify patch differences in terms
of how programs manipulate inputs via corresponding data
structures. Our semantics-aware approach is not only robust
for complicated types of patches, but also can deliver rich
semantics that other tools cannot offer. Such information can
assist security experts in patch analysis and free the burden
of manually reverse engineering efforts.
• Effectiveness in patch analysis. Evaluation on real-world
vulnerabilities shows that PatchScope outperforms existing
patch diffing techniques with more concise and accurate
results of located patch differences. Case studies demonstrate
that PatchScope can further interpret patch differences with
rich semantics delivered by memory object access sequence.
2 BACKGROUND AND MOTIVATION
In this section, we describe the problem setting, characterize se-
curity patch patterns via a large-scale study, and demonstrate the
limitations in existing binary diffing techniques.
2.1 Problem Setting
We use P and P′ to denote a vulnerable program and the patched
version containing a security fix, respectively. Both P and P′ are
stripped binaries. Their debug information and symbols are missing.
By comparing the execution traces of P and P′ on the same PoC, our
goal is to 1) locate patched differences and 2) interpret identified
differences with rich semantics, for understanding patches as well
as fixed vulnerabilities.
Our study explores the direction of dynamic patch diffing. Thus,
we assume a PoC is available. With our problem setting, how to
obtain or generate a PoC is application dependent and out of scope.
Actually, obtaining or generating a PoC is challenging and may cost
significant manual effort [10, 46, 73]. As we will show, dynamic
patch diffing with a PoC is a common yet challenging practice.
For one thing, crash analysis on a PoC is a common practice
for security analysts. When a security patch is released, only brief
information, such as vulnerability types and security impacts [46]
is indicated in vulnerability bulletins, which is far away from tech-
nical details. In such a scenario, security analysts often try to seek
or generate a PoC for further dynamic analysis. Take the vulnera-
bility CVE-2014-6332 for illustration. Microsoft released the patch
on Nov.11th 2014, with little information about technical details.
Later, a security researcher releases a PoC [61]. After that, multi-
ple technical reports present the vulnerability details via dynamic
analysis on the released PoC.
Even with a PoC, dynamic execution analysis is still challenging,
especially on binaries where high-level program abstractions are
missing. This process has been proven to be difficult and tedious [30,
67], which may take a significant amount of time and domain
knowledge, due to types of vulnerabilities and their complexities [6].
2.2 Security Patch Patterns
To understand security patch patterns, we perform a large-scale
study by manually analyzing security patches from five recent
studies [37, 41, 46, 65, 68]. These five datasets cover patches for a
Category
Table 1: Statistics on different memory corruption patch
types from five recent datasets [37, 41, 46, 65, 68]. The num-
ber of LOC changes ranges from 1 to 43, and 5 is the median
number.
No.
1
2
3
4
5
6
7
8
9
add input sanitization checks
change input sanitization checks
add data structures
change data structure definitions
change data structure references
change function parameters
add or change function calls
add functions
change functions
Percentage
43.5%
25.1%
6.1%
6.5%
22.3%
10.9%
15.3%
4.7%
7.6%
wide range of vulnerabilities in open-source programs. For our pur-
pose, we only select patches for memory corruption vulnerabilities
and exclude duplicate patches in these five datasets. In total, we
investigate 2, 205 security patches.
According to the definition of patch patterns in previous studies
[45, 66], we summarize these security patches into nine categories
in Table 1 in terms of their code changes. Please note that a security
patch may be counted into more than one category if it introduces
multiple change types. From the security patch patterns in Table 1,
we have two observations.
Types of patch patterns. First, security patch patterns are of so-
phisticated types. As shown in Table 1, the top two categories
involve adding or updating input sanitization checks, as they are
the most direct ways to block unsafe inputs. The types of No. 3,
4, and 5 augment the data structures that are used to reference
input data, including changing the data type of int to unsigned int,
resizing a buffer, and allocating a heap memory segment rather
than a buffer in the stack to receive program inputs. The types
of No. 6, 7, 8, and 9 are related to fixing vulnerable functions and
their parameters (e.g., replacing unsafe C library functions). These
results confirm that a non-trivial proportion of software vulnera-
bilities are caused by specific program logic faults, and how to fix a
vulnerability will consequently depend on program logic.
Previous patch analysis [72] and “1-day” exploit generation tech-
niques [8, 50] propose to identify security patches based on patterns.
These techniques mainly focus on the top two categories in Table 1,
but fail to analyze other types of patches. Figure 1 shows an example.
This patch tries to fix a buffer overflow vulnerability by changing
data structures, and it involves only 4 LOC changes within a single
function. In particular, two local arrays with fixed lengths are up-
dated to two dynamically allocated heap memory objects. Unlike
classical patches that will block bad inputs, this patch fixes the
vulnerability by updating program data structures.
Impact on Code Changes. Second, security patch patterns in-
dicate two extremes regarding the binary code difference effects.
At one end, 71% of them (e.g., No. 1, 7, 8, and 9 in Table 1) ex-
plicitly change the control flow graph (CFG) or call graph (CG):
they add new branches, basic blocks, or functions. At the opposite
end, the rest of the security patches do not break the integrity of
CFG/CG structures but only cause intra-basic-block differences.
Figure 1: A security patch aims to fix a buffer overflow vulnerability in ghttpd-1.4.3. Line 1∼4 (main and serveconnection) are
shared by two versions. The patch updates two vulnerable data structures from stack memory to heap memory.
Some patches (e.g., increasing the size of a buffer) even leave no
evidence on the change of CFG, abstract syntax tree, or program
dependency graph. In particular, some security patches may cause
no basic-block or instruction differences. For example, a security
patch fixes a format string from %s to %39s. As the format string