simply be skipped as invalid by the user.
5Nakamoto consensus, strictly speaking, maintains a tree of blocks [39].
The longest-path-rule selects the longest path from the root (i.e., genesis block)
to some leaf of the tree, where the leaf is chosen such that the path length is
maximized. This path is often referred to as the chain.
6Under our random oracle assumption, any log2 k bits of the hash (other
kp bits) work. In implementation, one can choose to use
kp bits) of the hash as appropriate, based
that the ﬁrst log2
any portion (other that the ﬁrst log2
on the speciﬁc hash function.
1
1
1
1
kp + log2 k = log2
will be assigned to and will extend from that chain. We have
assumed the hash function to be a random oracle, and note
p. Hence for any given chain in
that log2
OHIE, the probability of one hash operation (either done by
honest nodes or done by the adversary) generating a block for
that chain7 is exactly p, which is the same as in Nakamoto
consensus. Similarly, the block interval for any given chain in
OHIE will be the same as in Nakamoto consensus.
The above relation can be formalized: Taking all mech-
anisms in OHIE (especially the Merkle tree mechanism de-
scribed next) into account, Lemma 3 later will prove that the
behavior of any given chain in OHIE almost follows exactly
the same distribution as the behavior of the single chain in
Nakamoto consensus. Note that different chains in OHIE are
still correlated, since a block is assigned to exactly one chain.
But we will be able to properly bound the probability of all bad
events (whether correlated or not) via a simple union bound.
Finally, since OHIE has k parallel chains, on expectation
there will be total k blocks (across all chains) generated every
c· δ time, instead of just one block. Our experiments later will
conﬁrm the following simple yet critical property: Propagating
many parallel blocks has minimal negative impact on the block
propagation delay δ, as compared to propagating a single such
block, until we start to saturate the network bandwidth of the
system. Hence in OHIE, we use as large a k as possible to
effectively utilize all the bandwidth in the system, subject to
the condition that δ is minimally impacted.
B. Security of Individual Chains
In Nakamoto consensus, a new block B extends from
some existing block A. The PoW computes over B, which
contains the hash of A as a ﬁeld, cryptographically binding
the extension of A by B. In OHIE, however, a miner does not
know which chain a new block will extend until it ﬁnishes the
PoW puzzle, the last log2 k bits of which then determine the
chain extended.
To deal with this, in OHIE, a miner uses a Merkle tree [37]
to bind to the last blocks of all the k chains in its local view.
Speciﬁcally, let Ai be the last block8 of chain i, for 0 ≤
i ≤ k− 1. The miner computes a Merkle tree using hash(A0)
through hash(Ak−1) as the tree leaves. The root of the Merkle
tree is included in the new block B as an input to the PoW
puzzle. After B is mined, the integer i that corresponds to
the last log2 k bits of hash(B) determines the block Ai from
which B extends. When disseminating B in the network, a
miner includes hash(Ai) and the Merkle proof of hash(Ai)
in the message. (The value of i will be directly obtained from
the hash of B.) The Merkle proofs are standard, consisting of
log2 k off-path hashes [37].
Intuitively, the above design binds each successful PoW
to a single existing block on a single chain from which
7Namely, total log2
1
p positions in the block’s hash must match some pre-
determined values, respectively.
8Exactly the same as in Nakamoto consensus, the last block here refers to
the very last block on the longest path from the genesis block. In particular,
this last block is not yet partially-conﬁrmed. (In fact, none of the last T blocks
on the path are partially-conﬁrmed.)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
92
Fig. 1: Illustrating confirm bar under T = 2. Here chain 0, 1, and 2 have 2, 6, and 2 partially-conﬁrmed blocks, respectively.
On chain 1, only the ﬁrst 2 blocks are fully-conﬁrmed.
1
let us
the new block extends. For further understanding,
consider the following example scenario. The adversary may
intentionally choose A0 through Ak−1 all from (say) chain
3, for constructing the Merkle tree. Assume the adversary
ﬁnds a block B whose hash has log2
kp leading zeros. If
the last log2 k bits of B does not equal to 3, then B will
not be accepted by any honest node. Otherwise B will be
accepted, and B can only extend from A3 (instead of any
other block) on chain 3. The reason is that the honest nodes
will need to verify the 4th leaf (which corresponds to chain
3) on the Merkle tree. Only A3 can pass such veriﬁcation.
Also note that the adversary may intentionally not use the
last block on chain 3 as A3. This is not a problem, since
the security of OHIE ultimately inherits (see Section V) from
the security of Nakamoto consensus [40], and the adversary
in Nakamoto consensus can already extend from any block
(instead of extending from the last block).
C. Ordering Blocks across Chains – A Starting Point
Section V will show that each individual chain in OHIE
inherits the proven security properties of Nakamoto consen-
sus [40]. For example, with high probability, all blocks on a
chain except the last T blocks (for some parameter T ) are
conﬁrmed — the ordering of these conﬁrmed blocks on the
chain will no longer change in the future. This however does
not yet give us a total ordering of all the conﬁrmed blocks
across all the k chains in OHIE. Recall from Section II that
a node needs to generate an SCB (i.e., a total order of all
conﬁrmed blocks) satisfying consistency and quality-growth.
To avoid notational collision, from this point on, we call
all blocks on a chain except the last T blocks as partially-
conﬁrmed. Once a partially-conﬁrmed block is added to SCB,
it becomes fully-conﬁrmed.
One way to design the SCB is to ﬁrst include the ﬁrst
partially-conﬁrmed block on each of the k chains (there are
total k such blocks, and we order them by their chain ids),
and then add the second partially-conﬁrmed block on each of
the k chains, and so on. This would work well, if every chain
has the same number of partially-conﬁrmed blocks.
When the chains do not have the same number of partially-
conﬁrmed blocks, we will need to impose a conﬁrmation bar
(denoted as confirm bar) that is limited by the chain with the
smallest number of partially-conﬁrmed blocks (see Figure 1).
Blocks after confirm bar cannot be included in the total
order yet. This causes a serious problem, since with blocks
extending chains at random, some chains can have more blocks
than others. In fact in our experiments (results not shown),
such imbalance appears to even grow unbounded over time.
D. Ordering Blocks across Chains – Our Approach
Imagine that
the longest chain is 8 blocks longer than
the shortest chain. Our basic idea to overcome the previous
problem is that when the next block on the shortest chain
is generated, we simply view it as 8 blocks worth. Figure 2
illustrates this idea. Here each block has two additional ﬁelds
used for ordering blocks across chains, denoted as a tuple
(rank, next rank). In the total ordering of fully-conﬁrmed
blocks, the blocks are ordered by increasing rank values, with
tie-breaking based on the chain ids. The chain id of a block
is simply the id of the chain to which the block belongs. For
any new block B that extends from some existing block A,
we directly set B’s rank to be the same as A’s next rank.
Putting it another way, A’s next rank speciﬁes (and ﬁxes)
the rank of B. A genesis block always has rank of 0 and
next rank of 1.
Determining next rank. Properly setting the next rank of
a new block B is key to our design. A miner sees all the
chains, and can infer the expected rank of the next upcoming
block on each chain (before B is added to its chain). For
example, at time t1 in Figure 2, the next rank of the current
last block (not the last partially-conﬁrmed block) on each of
the three chains is 1, 5, and 1, respectively. Hence these will be
the rank of the upcoming blocks on those chain, respectively.
Let x denote the maximum (i.e., 5) among these values, and
x corresponds to the “longest” chain (in terms of rank) among
the k chains. Regardless of which chain the new block B ends
up belonging to, we want B to help that chain to increase its
rank to catch up with the “longest” chain. Hence the node
generating B should directly set B’s next rank to be x, or
any value larger than9 x. (To prevent adversarial manipulation,
a careful implementation requiring an additional trailing
9Using a value larger than x will cause B’s chain to exceed the length of
the currently “longest” chain (in terms of rank). This is not a problem since
the other chains will catch up with B’s chain once a new honest block is
added to each of those chains. We do not need the chains to have exactly the
same length all the time.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
93
fully-confirmed  (hence also partially-confirmed)partially-confirmedChain 1B10B11Chain 0B00B01Chain 2B20B21confirm_barTotal order of fully-confirmed blocks: B00 B10 B20 B01 B11 B21Fig. 2: Each block has a tuple (rank, next rank). Our example here assumes that once a block is generated, it is seen by
all nodes immediately. Note that OHIE does not need such an assumption. We use T = 2 in this ﬁgure.
ﬁeld is needed— see Section IV.) Finally, we always ensure
that B’s next rank is at least one larger than B’s rank,
regardless of x. This guarantees that the rank values of blocks
on one chain are always increasing.
In the example in Figure 2, from time t1 to t2, there are 3
new blocks (with tuples (1, 5), (5, 6), and (6, 7), respectively)
added to chain 0. For the ﬁrst new block added (i.e., the block
with tuple (1, 5)), the value of x is 5, and hence the block’s
next rank is set to be 5. For the second new block (i.e.,
the block with tuple (5, 6)), the value of x is still 5, while
the rank of this block is already 5. Hence we set the block’s
next rank to 6.
Determining the total order. We can now establish a total
order among the blocks in the following way. Consider any
given honest node at any given time and its local view of
all the chains. Let yi be the next rank of the last partially-
conﬁrmed block on chain i in this view. For example, at
time t4 in Figure 2, we have y0 = 5, y1 = 7 and y2 = 9.
Note that the position of a partially-conﬁrmed block on its
respective chain will not change anymore, and hence all these
yi’s are “stable”. Let confirm bar ← mink
i=1 yi. Then, the
next partially-conﬁrmed block on any chain must have a rank
no smaller than confirm bar. This means that
the node
must have seen all partially-conﬁrmed blocks whose rank is
smaller than confirm bar. Thus, it is safe (see Lemma 4)
to deem all partially-conﬁrmed blocks whose rank is smaller
than confirm bar as fully-conﬁrmed, and include them in
94
SCB. Finally, all the fully-conﬁrmed blocks will be ordered
by increasing rank values, with tie-breaking favoring smaller
chain ids. As an example, in Figure 2, at time t4, we have
confirm bar being 5. Hence, the 9 partially-conﬁrmed blocks
whose rank is below 5 become fully-conﬁrmed.
Summary. By properly setting the rank values of all the
blocks, we ensure that the chains remain balanced in terms of
the rank’s of their respective last blocks. This is regardless of
how imbalanced the chains are in terms of the total number
of blocks, hence avoiding the earlier imbalance problem in
Section III-C.
IV. IMPLEMENTATION DETAILS
the Nakamoto consensus protocol
1
1
We call
(p, λ, T )-
Nakamoto, where the hash of a valid block needs to have
p leading zeros, λ is the security parameter (i.e., the
log2
length of the hash output), and T is the number of blocks
that we remove from the end of the chain in order to
obtain partially-conﬁrmed blocks. We call the OHIE protocol
(k, p, λ, T )-OHIE, where λ and T are the same as above, and
where k is the number of chains in OHIE. In (k, p, λ, T )-OHIE,
kp leading zeros.
the hash of a valid block should have log2
For simplicity, the value of k is ﬁxed in our current design of
OHIE—adjusting k on-the-ﬂy could potentially be possible via
a view change mechanism, but we consider it as future work.
The value of T in OHIE can be readily adjusted on-the-ﬂy by
individual nodes, without needing any coordination. Because
the security of OHIE inherits from the security of Nakamoto
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
4,53,42,31,20,18,9Chain 17,8B10B11B12B13B145,76,71,50,1Chain 0B00B015,61,90,110,11Chain 2B20B219,104,53,42,31,20,18,9Chain 17,85,76,71,50,1Chain 05,60,1Chain 24,53,42,31,20,1Chain 16,71,50,1Chain 05,60,1Chain 24,53,42,31,20,1Chain 10,1Chain 00,1Chain 2confirm_bar= min(5, 7, 9) = 5 3 blocks added to Chain 03 blocks added to Chain 13 blocks added to Chain 2fully-confirmed  (hence also partially-confirmed)partially-confirmedTotal order of fully-confirmed blocks: B00 B10 B20 B01 B11 B21 B12 B13 B14timet1timet2timet3timet4B15}
kp );
genesis blocks;
repeat forever {
ReceiveState();
Mining();
SendState();
1: d ← log2( 1
2: Vi ← {(genesis block of chain i, the attachment
for genesis block of chain i)}, for 0 ≤ i ≤
k − 1;
3: M ← Merkle tree of the hashes of the k
4: trailing ← hash of genesis block of chain 0;
5:
6: OHIE() {
7:
8:
9:
10:
11:
12: }
13:
14: Mining() {
15: B.transactions ← get transactions();
16: B.root ← root of Merkle tree M;
17: B.trailing ← trailing;
18: B.nonce ← new nonce();
19:
20:
21:
22:
23:
24:
25:
26: }
27:
28: SendState() {
29:
30:
31: }
32:
33: ReceiveState() {
34:
35:
36: // A block B1 should be processed before B2,
37: }
(cid:98)B.hash ← hash(B);
if ((cid:98)B.hash has d leading zeroes) {
i ← last log2 k bits of (cid:98)B.hash;
(cid:98)B.leaf ← leaf i of M;