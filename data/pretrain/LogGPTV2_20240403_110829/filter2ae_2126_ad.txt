      public String method1(String param) {
        return param;
      }
    }
    class B {
      public String method2(String param) {
        return new C().method3(param);
      }
    }
    class C {
      public String method3(String param) {
        return param;
      }
    }
在这个例子中，通过逆拓扑排序后得到的列表为：
    A.method1
    C.method3
    B.method2
    main
那么，分析也是根据这个顺序进行
  * A.method1：  
第一步，ASM对A.method1进行观察，也就是PassthroughDataflowMethodVisitor进行观察，那么，在其方法被执行开始的时候，会触发PassthroughDataflowMethodVisitor.visitCode方法的调用，在这一步的代码中，我们可以看到，会对方法是否是static方法等进行判断，接着做了一个操作，就是把入参放到了本地变量表中来，为什么要这样做呢？我们可以想象一下，一个方法内部，能用到的数据要不就是本地变量表的数据，要不就是通过字段调用的数据，那么，在分析调用其他方法，或者对返回值是否会被入参污染时的数据流动，都跟它紧密关联，为什么这样说？根据jvm字节码的操作，在调用方法前，肯定需要对相关参数进行入栈，那入栈的数据从哪里来，必然就是本地变量表或者其他字段。那么在形成这样的一个本地变量表之后，就能标识一个方法内部的数据流动，并最终确定污染结果。
    @Override
    public void visitCode() {
        super.visitCode();
        int localIndex = 0;
        int argIndex = 0;
        if ((this.access & Opcodes.ACC_STATIC) == 0) {
            //非静态方法，第一个局部变量应该为对象实例this
            //添加到本地变量表集合
            setLocalTaint(localIndex, argIndex);
            localIndex += 1;
            argIndex += 1;
        }
        for (Type argType : Type.getArgumentTypes(desc)) {
            //判断参数类型，得出变量占用空间大小，然后存储
            setLocalTaint(localIndex, argIndex);
            localIndex += argType.getSize();
            argIndex += 1;
        }
    }
    protected void setLocalTaint(int index, T ... possibleValues) {
        Set values = new HashSet();
        for (T value : possibleValues) {
            values.add(value);
        }
        savedVariableState.localVars.set(index, values);
    }
第二步，在入参进入本地变量表之后，会执行return这个代码，并把param这个参数返回，在这个指令执行的时候会触发visitVarInsn方法，那么在进行return操作前，首先，会对其参数param进行入栈，因为param是引用类型，那么操作代码就是Opcodes.ALOAD，可以看到，代码中，从本地变量表获取了变量索引，并放入到操作数栈中来
    @Override
    public void visitVarInsn(int opcode, int var) {
        // Extend local variable state to make sure we include the variable index
        for (int i = savedVariableState.localVars.size(); i ());
        }
        Set saved0;
        switch(opcode) {
            case Opcodes.ILOAD:
            case Opcodes.FLOAD:
                push();
                break;
            case Opcodes.LLOAD:
            case Opcodes.DLOAD:
                push();
                push();
                break;
            case Opcodes.ALOAD:
                push(savedVariableState.localVars.get(var));
                break;
            case Opcodes.ISTORE:
            case Opcodes.FSTORE:
                pop();
                savedVariableState.localVars.set(var, new HashSet());
                break;
            case Opcodes.DSTORE:
            case Opcodes.LSTORE:
                pop();
                pop();
                savedVariableState.localVars.set(var, new HashSet());
                break;
            case Opcodes.ASTORE:
                saved0 = pop();
                savedVariableState.localVars.set(var, saved0);
                break;
            case Opcodes.RET:
                // No effect on stack
                break;
            default:
                throw new IllegalStateException("Unsupported opcode: " + opcode);
        }
        super.visitVarInsn(opcode, var);
        sanityCheck();
    }
第三步，执行return指令，也就触发visitInsn这个方法，因为返回的是引用类型，那么相应的指令就是Opcodes.ARETURN，可以看到，在这个case中，会从栈顶，获取刚刚入栈（第二步中visitVarInsn从本地变量表获取的参数索引）的参数索引，并存储到returnTaint中，因此，即表示A.method1这个方法的调用，参数索引为1的参数param会污染返回值。
    @Override
    public void visitInsn(int opcode) {
        switch(opcode) {
            case Opcodes.IRETURN://从当前方法返回int
            case Opcodes.FRETURN://从当前方法返回float
            case Opcodes.ARETURN://从当前方法返回对象引用
                returnTaint.addAll(getStackTaint(0));//栈空间从内存高位到低位分配空间
                break;
            case Opcodes.LRETURN://从当前方法返回long
            case Opcodes.DRETURN://从当前方法返回double
                returnTaint.addAll(getStackTaint(1));
                break;
            case Opcodes.RETURN://从当前方法返回void
                break;
            default:
                break;
        }
        super.visitInsn(opcode);
    }
第四步，经过return之后，该方法的观察也就结束了，那么，回到gadgetinspector.PassthroughDiscovery#calculatePassthroughDataflow中，对于刚刚放到returnTaint污点分析结果，也会在其方法中，缓存到passthroughDataflow
    ClassReader cr = new ClassReader(inputStream);
    try {
        PassthroughDataflowClassVisitor cv = new PassthroughDataflowClassVisitor(classMap, inheritanceMap,
                passthroughDataflow, serializableDecider, Opcodes.ASM6, method);
        cr.accept(cv, ClassReader.EXPAND_FRAMES);
        passthroughDataflow.put(method, cv.getReturnTaint());//缓存方法返回值与哪个参数有关系
    } catch (Exception e) {
        LOGGER.error("Exception analyzing " + method.getClassReference().getName(), e);
    }
  * C.method3：该方法和A.method1的污点分析流程是一样的
  * B.method2：这个方法和前面连个都不一样，它内部调用了C.method3方法，因此，污点分析时，具体的细节就又不一样了
第一步，在其方法被执行开始的时候，同样会触发PassthroughDataflowMethodVisitor.visitCode方法的调用，在其中，也是做了相应的操作，把入参存到了本地变量表中来
第二步，因为方法内部即将调用C.method3，那么ASM调用visitVarInsn方法，对其参数param进行入栈，因为param是引用类型，那么操作代码就是Opcodes.ALOAD，因此，从第一步保存的本地变量表中获取变量入栈
第三步，方法内部调用了C.method3，那么，ASM就会触发visitMethodInsn方法的执行，在这一步，会先对被调用方法的入参进行处理，并把被调用方法的实例放到argTypes的第一个索引位置，后面依次放置其他参数，接着计算返回值大小。然后，因为方法调用，第二步已经把参数入栈了，而这些参数都是从本地变量表获取的，那么，可以从栈顶取到相关参数，并认为这些参数是可被控制，也就是被当前调用者caller方法污染的，最后，也就是最重点的一步，从passthroughDataflow中获取了被调用方法的参数污染结果，也就是C.method3方法被分析时候，return存储的数据，所以，这里就印证了前面为什么要使用逆拓扑排序，因为如果不这样做的话，C.method3可能在B.method2后被分析，那么，缓存就不可能存在污点分析的结果，那么就没办法对B.method2进行正确的污点分析。接着就是对从缓存取出的污染结果和入参对比，取出相应索引的污点参数，放入到resultTaint中
    @Override
    public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {
        //获取method参数类型
        Type[] argTypes = Type.getArgumentTypes(desc);
        if (opcode != Opcodes.INVOKESTATIC) {
            //如果执行的非静态方法，则把数组第一个元素类型设置为该实例对象的类型，类比局部变量表
            Type[] extendedArgTypes = new Type[argTypes.length+1];
            System.arraycopy(argTypes, 0, extendedArgTypes, 1, argTypes.length);
            extendedArgTypes[0] = Type.getObjectType(owner);
            argTypes = extendedArgTypes;
        }
        //获取返回值类型大小
        int retSize = Type.getReturnType(desc).getSize();
        Set resultTaint;
        switch (opcode) {
            case Opcodes.INVOKESTATIC://调用静态方法
            case Opcodes.INVOKEVIRTUAL://调用实例方法
            case Opcodes.INVOKESPECIAL://调用超类构造方法，实例初始化方法，私有方法
            case Opcodes.INVOKEINTERFACE://调用接口方法
                //todo 1 构造污染参数集合，方法调用前先把操作数入栈
                final List> argTaint = new ArrayList>(argTypes.length);
                for (int i = 0; i  0) {
                        //根据参数类型大小，从栈底获取入参，参数入栈是从右到左的
                        argTaint.set(argTypes.length - 1 - i, getStackTaint(stackIndex + argType.getSize() - 1));
                    }
                    stackIndex += argType.getSize();
                }
                //todo 2 构造方法的调用，意味参数0可以污染返回值
                if (name.equals("")) {
                    // Pass result taint through to original taint set; the initialized object is directly tainted by
                    // parameters
                    resultTaint = argTaint.get(0);
                } else {
                    resultTaint = new HashSet<>();
                }
                //todo 3 前面已做逆拓扑，调用链最末端最先被visit，因此，调用到的方法必然已被visit分析过
                Set passthrough = passthroughDataflow.get(new MethodReference.Handle(new ClassReference.Handle(owner), name, desc));
                if (passthrough != null) {
                    for (Integer passthroughDataflowArg : passthrough) {
                        //判断是否和同一方法体内的其它方法返回值关联，有关联则添加到栈底，等待执行return时保存
                        resultTaint.addAll(argTaint.get(passthroughDataflowArg));
                    }
                }
                break;
            default:
                throw new IllegalStateException("Unsupported opcode: " + opcode);
        }
        super.visitMethodInsn(opcode, owner, name, desc, itf);
        if (retSize > 0) {
            getStackTaint(retSize-1).addAll(resultTaint);
        }
    }
    }
第四步，接着执行return，跟前面一样，保存到passthroughDataflow
  * main：最后需要分析的是main方法的入参args是否会污染到其返回值
    public String main(String args) throws IOException {
        String cmd = new A().method1(args);
        return new B().method2(cmd);
    }
按照上面A.method1、B.method2、C.method3的参数污染分析结果，很明显在观察main方法的时候
第一步，执行visitCode存储入参到本地变量表
第二步，执行visitVarInsn参数入栈
第三步，执行visitMethodInsn调用A.method1，A.method1被污染的返回结果，也就是参数索引会被放在栈顶
第四步，执行visitVarInsn把放在栈顶的污染参数索引，放入到本地变量表
第五步，执行visitVarInsn参数入
第六步，执行visitMethodInsn调用B.method2，被污染的返回结果会被放在栈顶
第七步，执行visitInsn，返回栈顶数据，缓存到passthroughDataflow，也就是main方法的污点分析结果
到此，ASM实现方法入参污染返回值的分析就到此为止了。
接下来，passthroughDiscovery.save方法就被调用
    public void save() throws IOException {
        if (passthroughDataflow == null) {
            throw new IllegalStateException("Save called before discover()");
        }
        DataLoader.saveData(Paths.get("passthrough.dat"), new PassThroughFactory(), passthroughDataflow.entrySet());
    }
也是通过DataLoader.saveData把结果一行一行的保存到passthrough.dat文件中，而每行数据的序列化，是通过PassThroughFactory实现
    public static class PassThroughFactory implements DataFactory>> {
        ...
        @Override
        public String[] serialize(Map.Entry> entry) {
            if (entry.getValue().size() == 0) {
                return null;
            }
            final String[] fields = new String[4];
            fields[0] = entry.getKey().getClassReference().getName();
            fields[1] = entry.getKey().getName();
            fields[2] = entry.getKey().getDesc();
            StringBuilder sb = new StringBuilder();
            for (Integer arg : entry.getValue()) {
                sb.append(Integer.toString(arg));
                sb.append(",");
            }
            fields[3] = sb.toString();
            return fields;
        }
    }
最终，这一阶段分析保存下来passthrough.dat文件的数据格式：
    类名 方法名 方法描述 能污染返回值的参数索引1,能污染返回值的参数索引2,能污染返回值的参数索引3...
### 0x05 方法调用关联-CallGraphDiscovery
在这一阶段，会进行对方法调用关联的分析，也就是方法调用者caller和方法被调用者target直接的参数关联
举个例子描述：
    public class Main {
      public void main(String args) throws IOException {
        String cmd = new A().method1(args);
      }
    }
    class A {
      public String method1(String param) {
        return param;
      }
    }
在经过这个阶段，能得到的数据：
    调用者类名 调用者方法caller 调用者方法描述 被调用者类名 被调用者方法target 被调用者方法描述 调用者方法参数索引 调用者字段名 被调用者方法参数索引
    Main (Ljava/lang/String;)V main A method1 (Ljava/lang/String;)Ljava/lang/String; 1 1
跟回代码，gadgetinspector.CallGraphDiscovery#discover：
加载了前面几个阶段分析处理的数据
    //加载所有方法信息
    Map methodMap = DataLoader.loadMethods();
    //加载所有类信息
    Map classMap = DataLoader.loadClasses();
    //加载所有父子类、超类、实现类关系
    InheritanceMap inheritanceMap = InheritanceMap.load();
    //加载所有方法参数和返回值的污染关联
    Map> passthroughDataflow = PassthroughDiscovery.load();
接着遍历每一个class，并对其使用ASM进行观察
    SerializableDecider serializableDecider = config.getSerializableDecider(methodMap, inheritanceMap);
    for (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) {
        try (InputStream in = classResource.getInputStream()) {
            ClassReader cr = new ClassReader(in);
            try {
                cr.accept(new ModelGeneratorClassVisitor(classMap, inheritanceMap, passthroughDataflow, serializableDecider, Opcodes.ASM6),
                        ClassReader.EXPAND_FRAMES);
            } catch (Exception e) {
                LOGGER.error("Error analyzing: " + classResource.getName(), e);
            }
        }
    }
ModelGeneratorClassVisitor的实现没什么重点的逻辑，主要就是对每一个方法都进行了ASM的观察
    private class ModelGeneratorClassVisitor extends ClassVisitor {
        private final Map classMap;
        private final InheritanceMap inheritanceMap;
        private final Map> passthroughDataflow;
        private final SerializableDecider serializableDecider;