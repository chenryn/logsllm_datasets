The issue with using the NumPy version of `all` is that it behaves inconsistently with Python's built-in `all` function, particularly when a generator is passed as an argument. This discrepancy can lead to unexpected results and confusion, especially in environments like `ipython -pylab`, where the built-in `all` function is overshadowed by the NumPy version.

Hereâ€™s an example to illustrate this:

```python
In [1]: import numpy

# Using numpy.all with a generator
In [2]: numpy.all(a for a in [False])
Out[2]: <generator object <genexpr> at 0x7f22623eeaa0>

# Converting the result to a boolean
In [3]: bool(numpy.all(a for a in [False]))
Out[3]: True

# Using Python's built-in all with a generator
In [4]: __builtin__.all(a for a in [False])
Out[4]: False
```

In the `ipython -pylab` environment, the built-in `all` function is replaced by the NumPy version, which can cause further confusion. For instance, if you check the `func_code` attribute of `all` in this environment, you will see that it refers to the NumPy implementation:

```bash
$ ipython -pylab
... blah blah...
In [2]: all.func_code
Out[2]: <function numpy.core.fromnumeric.all at 0x7f22623eeaa0>
```

To avoid these issues, it is important to be aware of the differences between the two `all` functions and to use the appropriate one based on the context.