random ρ, τ ∈ Zp. It sets x0 = gb+1 · gρ and h = gb+1 · gτ .
Next, it picks random γ1, . . . , γb, δ1, . . . , δa ∈ Zp. It sets yi =
gγi gi for i = 1, . . . , b and sets xj = gδj·(ΠID∈S∗
(gH2(ID))ID)−1·
−µ∗
g
b+1 for j = 1, . . . , a. It additionally picks a random hash
key k ∈ K for hash function H. With the information about
(G, GT , e, p, Hk), B gives A the public parameters
p → {1, . . . , a} and H2 : Z∗
1, . . . , S∗
j
PP = (g, g1, h, x0, x1, . . . , xa, y1, . . . , yb, H1, H2).
Since ρ, τ,{γi}, and {δj} values are chosen uniformly at ran-
dom, this public parameters have an identical distribution
to that in the actual construction.
Phase 1: A issues up to qID private key and qD decryption
queries. First, B needs to generate private keys dID for ID /∈
S∗. Consider a private key for ID such that H1(ID) = u and
H2(ID) = v. As before, we can assume the pair (u, v) does
not belong to the set {(H1(ID), H2(ID)) : ID ∈ S∗}. B picks
a random r ∈ Zp. Let r(cid:48) = r − α(b+2−v)/ ID. (ID ∈ Z∗
p as
before.) B generates the private key dID for ID as
v−1, . . . , yr(cid:48)
v+1, . . . , yr(cid:48)
b )
which is a properly distributed private key for ID. By the
similar calculation to that in Section 3, we can show that B
is able to compute all elements of this private key given the
input values, except hr(cid:48)
1 , . . . , yr(cid:48)
0 ·(xu·yID
becomes
, hr(cid:48)
v )r(cid:48)
, yr(cid:48)
, gr(cid:48)
( xα
. The term hr(cid:48)
= (gb+1 · gτ )r · (g2b+3−v · gτ
hr(cid:48)
b+2−v)
−1/ID.
.
Since 1 ≤ v ≤ b, the unknown value gb+2 is not required to
compute hr(cid:48)
Second, let (ID, S, Hdr) be a decryption query where S ⊆
S∗ and ID ∈ S. Let Hdr = (A1, . . . , Aa, B). Wlog, let
H1(ID) = u and H2(ID) = v for ID. When we divide S into
subsets (S1, . . . , Sa), we have that ID ∈ Su ⊆ S∗
u. To decrypt
the queried ciphertext, B does as follows:
1. Compute µ(cid:48) = Hk(B) and check if the components
(Au, B) in the Hdr are of the valid form, using the
following equation
e(Au, g) = e(xu · hµ(cid:48) · ΠID∈Su (yH2(ID))ID, B).
If the equality does not hold, B responds with ⊥.
2. Otherwise, check that µ(cid:48) = µ∗. If the equality holds,
B outputs a random bit b ∈ {0, 1} and aborts the sim-
ulation (in this case, the collision of hash function Hk
occurs).
3. Otherwise, from the equation above, B has that
Au = (xu · hµ(cid:48) · ΠID∈Su (yH2(ID))ID)s
379
for some (unknown) s ∈ Zp such that B = gs. Plug-
ging in the values of xu, h, and {yk}, the Au becomes
Au = (gδu (ΠID∈S∗
−1g
u (gH2(ID))
b+1 · (gb+1gτ )µ(cid:48)·
−µ∗
−ID)
ΠID∈Su (gγH2(ID) gH2(ID))ID)s
u\Su (gH2(ID))
−ID)s
= (g(µ(cid:48)−µ∗)
b+1
· gη · ΠID∈S∗
where η = δu + τ µ(cid:48) + ΣID∈Su ID · γH2(ID). B computes
(cid:48)
d
ID,1 = g
−η/(µ(cid:48)−µ∗)
1
ID,3 = B · g
(cid:48)
d
(ΠID∈S∗
−1/(µ(cid:48)−µ∗)
1
.
· Au·
u\Su (gH2(ID)+1)ID)
−1/(µ(cid:48)−µ∗),
Since 1 ≤ H2(ID) ≤ b, B does not require knowledge
of gb+2 and then is able to compute d(cid:48)
ID,1 with input
values. Let r(cid:48) = s − α/(µ(cid:48) − µ∗). Then,
−η/(µ(cid:48)−µ∗)
gη · ΠID∈S∗
(cid:48)
ID,1 = g
1
(g(µ(cid:48)−µ∗)
−ID)s
d
b+1
· (ΠID∈S∗
u\Su (gH2(ID)+1)ID)
· gη · ΠID∈S∗
= gb+2 · (g(µ(cid:48)−µ∗)
= gb+2 · (xu · hµ(cid:48) · ΠID∈Su (yH2(ID))ID)r(cid:48)
b+1
u\Su (gH2(ID))
,
u\Su (gH2(ID))
−1/(µ(cid:48)−µ∗)
−ID)r(cid:48)
.
d
−1/(µ(cid:48)−µ∗)
(cid:48)
ID,3 = gsg
1
= gr(cid:48)
1 . For the re-randomization, B
ID,1 ·
ID,3·gr(cid:48)(cid:48)
.
ID,1 = d(cid:48)
ID,3 = d(cid:48)
Recall that xα
selects a random r(cid:48)(cid:48) ∈ Zp and computes d(cid:48)(cid:48)
1 ·(xu·hµ(cid:48) ·ΠID∈Su (yH2(ID))ID)r(cid:48)(cid:48)
gρ
For some (unknown) r(cid:48)(cid:48)(cid:48) = r(cid:48) + r(cid:48)(cid:48),
and d(cid:48)(cid:48)
0 = gb+2·gρ
0 · (xu · hµ(cid:48) · ΠID∈Su (yH2(ID))ID)r(cid:48)(cid:48)(cid:48)
,
(cid:48)(cid:48)
ID,1 = xα
d
ID,3 = gr(cid:48)(cid:48)(cid:48)
(cid:48)(cid:48)
d
.
B responds with e(d(cid:48)(cid:48)
ID,3). This response
is identical to the decapsulation algorithm in a real
attack, because r(cid:48)(cid:48) (and r(cid:48)(cid:48)(cid:48)) is uniform in Zp.
ID,1, B)/e(Au, d(cid:48)(cid:48)
Challenge: B computes Hdr∗ as
1
δ1+τ µ∗+ΣID∈S∗
ID·γH2(ID) ,
. . . , zδa+τ µ∗+ΣID∈S∗
ID·γH2(ID) , z)
(z
and K∗ = T · e(g1, zρ), where z and T are input values given
to B. Recall that µ∗ = Hk(z). As before, if z = gc for some
(unknown) c ∈ Zp, then
ID·γH2(ID)
a
δi+τ µ∗+ΣID∈S∗
z
= (gδi · (ΠID∈S∗
i
(gH2(ID))ID)
i
−µ∗
b+1 · (gb+1gτ )µ∗·
−1 · g
ΠID∈S∗
i
(gγH2(ID) gH2(ID))ID)c
= (xi · hµ∗ · ΠID∈S∗
(yH2(ID))ID)c
i
for i = 1, . . . , a. If T = e(z, gb+2) then K∗ = e(x0, g1)c and
thus (Hdr∗, K∗) is a valid challenge to A for the receiver set
S∗. On the other hand, when T is uniform and independent
in GT , then Hdr∗ is independent of K∗ in the adversary’s
view.
Phase 2: A issues more private key and decryption queries
not queried in phase 1. B responds as before.
Guess: A outputs a guess b(cid:48) ∈ {0, 1}.
If b = b(cid:48) then B
outputs 1, indicating T = e(z, gb+2). Otherwise, it outputs
0, indicating T (cid:54)= e(z, gb+2).
When T is random in GT then Pr[B(z, g,−→g α,b+1, T ) =
0] = 1/2. Let Collision denote the event that A submits a
valid header Hdr = (A1, . . . , Aa, B) such that µ∗ = Hk(B)
as a decapsulation query. In the case of Collision, B cannot
reply to the decryption query and aborts the simulation.
When T = e(z, gb+2), B replied with a valid message en-
cryption key unless event Collision occurs. Then, B has
|Pr[B(z, g,−→g α,b+1, T ) = 0] − 1/2| ≥
|Pr[b = b
(cid:48) ∧ Collision] − 1/2| − Pr[Collision].
Since B provided A with perfect simulation when the event
Collision did not occur, |Pr[b = b(cid:48) ∧ Collision] − 1/2| ≥ 3.
Also, note that Pr[Collision] is negligible. This means that
Pr[Collision] < 2 since otherwise B ﬁnds two values z, B
such that Hk(z) = Hk(B), which is contradiction to the
deﬁnition of H. Therefore,
|Pr[B(z, g,−→g α,b+1, e(z, gb+2)) = 0]−
Pr[B(z, g,−→g α,b+1, T ) = 0]| ≥ 3 − 2.
[6] D. Boneh and M. Franklin. Identity-based encryption
from the weil pairing. In Proc. CRYPTO 2001, volume
2139 of LNCS, pages 213–229. Springer, 2001.
[7] D. Boneh, C. Gentry, and B. Waters. Collusion
resistant broadcast encryption with short ciphertexts
and private keys. In Proc. CRYPTO 2005, volume
3621 of LNCS, pages 258–275. Springer, 2005.
[8] D. Boneh and J. Katz. Improved eﬃciency for
cca-secure cryptosystems built using identity-based
encryption. In Proc. CT-RSA 2005, volume 3376 of
LNCS, pages 87–103. Springer, 2005.
[9] X. Boyen, Q. Mei, and B. Waters. Direct chosen
ciphertext security from identity-based techniques. In
ACM Conference on Computer and Communications
Security - CCS 2005, pages 320–329. New-York: ACM
Press, 2005.
[10] C. Canetti, S. Halevi, and J. Katz. Chosen ciphertext
security from identity-based encryption. In Proc.
Eurocrypt 2004, volume 3027 of LNCS, pages 207–222.
Springer, 2004.
This completes the proof of Theorem 2.
2
[11] S. Chatterjee and P. Sarkar. Generalization of the
selective-id security model for hibe protocols. In Proc.
PKC 2006, volume 3958 of LNCS, pages 241–256.
Springer, 2006.
[12] S. Chatterjee and P. Sarkar. Multi-receiver
identity-based key encapsulation with shortened
ciphertext. In Proc. Indocrypt 2006, volume 4329 of
LNCS, pages 394–408. Springer, 2006.
[13] C. Cocks. ibe–3. In TeX90 Conference Proceedings,
pages 84–89. TeX Users Group, March 1991.
[14] X. Du, Y. Wang, J. Ge, and Y. Wang. An id-based
broadcast encryptoin scheme for key distribution.
IEEE Transaction on Broadcasting, 51(2):264–266,
2005.
[15] D. Galindo and E. Kiltz. Direct chosen ciphertext
secure identity-based key encapsulation without
random oracles. In Proc. ASISP 2006, volume 4058 of
LNCS, pages 336–347. Springer, 2006.
[16] C. Gentry. Practical identity-based encryption without
random oracles. In Proc. Eurocrypt 2006, volume 4004
of LNCS, pages 445–464. Springer, 2006.
[17] C. Gentry and A. Silverberg. Hierarchical id-based
cryptography. In Proc. Asiacrypt 2002, volume 2501 of
LNCS, pages 548–566. Springer, 2002.
[18] R. Sakai and J. Furukawa. Identity-based broadcast
encryption. In Cryptology ePrint Archive. Report
2007/217, http://eprint.iacr.org/2007/217, 2007.
[19] A. Shamir. Identity-based cryptosystems and
signature schemes. In Proc. CRYPTO 1984, volume
196 of LNCS, pages 47–53. Springer, 1984.
[20] B. Waters. Eﬃcient identity-based encryption without
random oracles. In Proc. Eurocrypt 2005, volume 3494
of LNCS, pages 114–124. Springer, 2005.
6. CONCLUSION
We showed that a mIB-KEM suggested by Chatterjee and
Sarkar [12] does not guarantee the chosen plaintext (or ci-
phertext) security. The security leak is originated from em-
bedding the same element into partitioned subsets of re-
ceivers. We solved this weakness to use random elements
dedicated to subsets respectively. Our proposed mIB-KEM
has sublinear-size ciphertexts and private keys. We proved
the chosen plaintext security without random oracles un-
der the BDHE assumption, and extended the CPA-secure
scheme to obtain the chosen ciphertext security by employ-
ing the hash-based transformation [9].
Acknowledgments
We would like to thank the anonymous referees for their
helpful comments.
7. REFERENCES
[1] M. Abdalla, E. Kiltz, and G. Neven. Generalized key
delegation for hierarchical identity-based encryption.
In Proc. ESORICS 2007, volume 4734 of LNCS, pages
139–154. Springer, 2007.
[2] J. Baek, R. Safavi-Naini, and W. Susilo. Eﬃcient
multi-receiver identity-based encryption and its
application to broadcast encryption. In Proc. PKC
2005, volume 3386 of LNCS, pages 380–397. Springer,
2005.
[3] M. Barosa and P. Farshim. Eﬃcient identity-based key
encapsulation to multiple parties. In Proc. IMA 2005,
volume 3796 of LNCS, pages 428–441. Springer, 2005.
[4] D. Boneh and X. Boyen. Eﬃcient selective-id secure
identity based encryption without random oracles. In
Proc. Eurocrypt 2004, volume 3027 of LNCS, pages
223–238. Springer, 2004.
[5] D. Boneh, X. Boyen, and E. Goh. Hierarchical identity
based encryption with constant size ciphertext. In
Proc. Eurocrypt 2005, volume 3494 of LNCS, pages
440–456. Springer, 2005.
380