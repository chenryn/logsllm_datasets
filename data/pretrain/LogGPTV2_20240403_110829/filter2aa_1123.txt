听说你在⽤SigFlip在PE签名⾥嵌⼊
shellcode？
-- 副标题: 检测SigFlip在PE的签名⾥嵌⼊的shellcode，以及嵌⼊⽅法改进  
# 前⾔
之前看到 @w8ay 实现的⽩加⿊⽣成器，就感觉这个做法⾮常的棒，但是 SigFlip  的做法
真的隐蔽吗？真的不容易被查杀吗？
刚好最近在研究PE的⽂件签名结构和签名，那今天就详细讲解⼀下签名相关的内容，以及如
何改进 SigFlip 实现更深层次的隐藏。
# 原理回顾
对原理⽐较了解的直接跳过这⼀节。
看⼀下微软给的PE⽂件的签名的结构，这⼀张图⾮常的经典，但是这只是⼀个微软签名省略
了⼤部分细节的概括图，但是有助于我们了解⼀些最基本的信息。
⾸先可以看到图中灰⾊区域标注的内容是不参与⽂件签名hash计算的，并且可以看
到 Attribute Certificate table 的位置是由 PE头中的 Data Directories 中某⼀项指
定的， Data Directories 共有16项，每⼀项的结构都是：
总共8个字节，指定了对应的数据在⽂件中的偏移以及⼤⼩。 Data Directories 的Security
项就指向了其签名数据。
签名数据的数据结构是：
dwLength： 表明签名的数据的总体⼤⼩，⼀般是等于 _IMAGE_DATA_DIRECTORY  的size
字段。
·wRevision：表明当前签名信息的版本。
wCertificateType：指定接下来的签名的类型
bCertificate：Byte数组，存储的就是签名的具体数据。
最值得注意的是 bCertificate 的字节⼤⼩要求8字节对齐。
SigFlip的代码实现
从上⾯分析的不参与⽂件校验的部分可以得知，只有 _WIN_CERTIFICATE 部分是可以⽤来隐
藏数据的，具体我们直接看SigFlip的代码实现。
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
1
2
3
4
typedef struct _WIN_CERTIFICATE {
    DWORD       dwLength;
    WORD        wRevision;
    WORD        wCertificateType;   // WIN_CERT_TYPE_xxx
    BYTE        bCertificate[ANYSIZE_ARRAY];
} WIN_CERTIFICATE, *LPWIN_CERTIFICATE;
1
2
3
4
5
6
⾸先获取到 _WIN_CERTIFICATE 的位置和⼤⼩，然后把数据padding到签名中，并扩充为8字
节对齐，最后更新PE⽂件的checksum和 _WIN_CERTIFICATE 的⼤⼩。
# 检测⽅法
SigFlip 的检测是⾮常简单，我们抛开插⼊shellcode时的标识起始
字 \xFE\xED\xFA\xCE\xFE\xED\xFA\xCE 不谈，只看插⼊的内容，可以看到 SigFlip 仅
仅修改了 _IMAGE_DATA_DIRECTORY 中的 Size 字段，但是并没有修改 _WIN_CERTIFICATE
中的 dwLength ,两个长度不⼀致就可以很轻易的发现隐藏在签名中的数据：
//Get IMAGE_DIRECTORY_ENTRY_SECURITY field and retrieve the RVA and 
SIZE of the Certificate Table (WIN_CERTIFICATE).
  _CertTableRVA = 
_optHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY + 
_DT_SecEntry_Offset].VirtualAddress;
  _CertTableSize = 
_optHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY + 
_DT_SecEntry_Offset].Size;
  _wCert = (LPWIN_CERTIFICATE)((BYTE*)_peBlob + _CertTableRVA);
1
2
3
4
    memcpy((((BYTE*)_peBlob + _CertTableRVA) + _wCert->dwLength), 
_rpadding, strlen(_rpadding));
    //update dwLength and Cert Table Entry Size.
    printf("[+]:Updating OPT Header Fields/Entries \n");
    _wCert->dwLength += strlen(_rpadding);
    _ntHeader-
>OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY + 
_DT_SecEntry_Offset].Size += strlen(_rpadding);
    //update checksum
    printf("[+]:Calculating/Updating the new OPTHeader checksum\n");
    checksum = PEChecksum(_peBlob, _fSize);
    _ntHeader->OptionalHeader.CheckSum = checksum;
1
2
3
4
5
6
7
8
9
10
11
此时就会有⼈想，如果我把 _WIN_CERTIFICATE 的 dwLength 也修改了，那是不是就⾜够隐
蔽了呢？要解答这个问题，只简单的看⼀下上⾯的微软的签名概略图是远远不够的，我们需
要深⼊了解签名数据中每⼀段的含义和作⽤，在下⼀节会进⾏详细的讲解。
# 改进SigFlip的思路
在进⾏这⼀节之前，我们应该先⼤概了解⼀下 ASN.1 格式标准和 DER(Distinguished 
Encoding Rules) 编码规范，可以阅读如下的参考⽂章：
https://blog.csdn.net/zhaoruixiang1111/article/details/84191682
        pe_obj = pefile.PE(filepath)       
        security_entry = 
pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_SECURITY"]
        sig_off = 
pe_obj.OPTIONAL_HEADER.DATA_DIRECTORY[security_entry].VirtualAddress
        sig_len = 
pe_obj.OPTIONAL_HEADER.DATA_DIRECTORY[security_entry].Size
        pkcs7Data = b""
        dirty = b""
        if sig_off == 0 or sig_len == 0:
            return pkcs7Data,dirty
        # 取出和 security 相关的数据
        with open(filepath, 'rb') as fh:
            fh.seek(sig_off)
            sig_raw_data = fh.read(sig_len)
        begin = 0
        new_p = self.WIN_CERTIFICATE()
 c.memmove(c.addressof(new_p),sig_raw_data,c.sizeof(self.WIN_CERTIFICAT
E))
        pkcs7Data = sig_raw_data[begin+8: begin+ new_p.dwLength ]
        begin += new_p.dwLength
        dirty = sig_raw_data[begin:]
        return pkcs7Data,dirty
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
https://www.cnblogs.com/nathanyang/p/9951282.html
简单来讲每⼀个结构的数据都是⽤如下三个部分来描述的：
Identifer: 表述数据类型
Length：表⽰后⾯接的数据长度
Contents：就存放着需要的数据
⽐如我们对字符串 PI:EMAIL 进⾏编码：
微软的前⾯数据其实是 pkcs#7 加密消息标准的数据，是使⽤满⾜ ASN.1 的编码标准，使
⽤ DER 编码规范进⾏存储的数据其ASN.1的定义如下：
其中 ContentType 表⽰了 Content 的具体数据格式，有如下的可选值：
16           0d         74 65 73 74 31 40 72 73 61 2e 63 6f 6d
indentify  length       字符串的Ascii码
1
2
ContentInfo ::= SEQUENCE {
        contentType ContentType,
        content  [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL 
}
1
2
3
4
'1.2.840.113549.1.7.1': 'data',
'1.2.840.113549.1.7.2': 'signed_data',
'1.2.840.113549.1.7.3': 'enveloped_data',
'1.2.840.113549.1.7.4': 'signed_and_enveloped_data',
'1.2.840.113549.1.7.5': 'digested_data',
'1.2.840.113549.1.7.6': 'encrypted_data',
'1.2.840.113549.1.9.16.1.2': 'authenticated_data',
'1.2.840.113549.1.9.16.1.9': 'compressed_data',
'1.2.840.113549.1.9.16.1.23': 'authenticated_enveloped_data',
'1.3.6.1.4.1.311.2.1.4': 'spc_indirect_data_content'
1
2
3
4
5
6
7
8
9
10
在这⾥ contentType 的obj是 1.2.840.113549.1.7.2 ,表明 content 的内容
是 signedData 。
看到这⾥你就找到了上⼀节的问题的答案，由于DER编码数据中存储有⾃⾝的length，所以
即便我们修改了 dwLength，依然⽆法实现数据隐藏，这⾥的长度校验依然会让隐藏数据⽆处
遁形。
我们继续向下分析，SignedData的数据格式定义如下：
ContentInfo 的内容是参与签名计算的，不能修改。 certificates ⾥⾯存储的是x509格
式的证书⽂件，其实是可以把⾃⼰的shellcode编码为⼀个证书存在这⾥，但是这相对来讲是⽐
较有难度的。另外 Crls 是⼀个可选成员，在这⾥微软并没有使⽤这个成员，所以按道理是可
以⽤来隐藏数据的，不过还是不够隐蔽，我们继续看， SignerInfos 的格式定义分别如下：
// 
SignedData ::= SEQUENCE {
        version Version,
        digestAlgorithms DigestAlgorithmIdentifiers,
        contentInfo ContentInfo,
        certificates
                [0] IMPLICIT ExtendedCertificatesAndCertificates 
OPTIONAL,
        Crls
            [1] IMPLICIT CertificateRevocationLists OPTIONAL,
        signerInfos SignerInfos 
}
1
2
3
4
5
6
7
8
9
10
11
主要看 unauthenticatedAttributes ,这是⼀个可变长数组，微软定⼀个此数组存在⼀个元
素时以及两个元素时的含义，但是到底是存在⼀个元素还是两个元素是看具体的签名签发者
决定的，所以这个数组是可以⽤来隐藏数据的，我们只需要定义⼀个公共使⽤的obj_id，就可
以避免被发现。
持续关注本微信公众号或知识请求， SigFlip-plus  版本的相关的代码实现会在后续公开。
# 参考⽂档
https://3gstudent.github.io/%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7-%E5%9C%A8
PE%E6%96%87%E4%BB%B6%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9
%A6%E4%B8%AD%E9%9A%90%E8%97%8FPayload  
https://ti.dbappsecurity.com.cn/info/2163  
https://mp.weixin.qq.com/s/aOyNgfp6oHCNS8JqrradkQ  
SignerInfos ::= SET OF SignerInfo
SignerInfo ::= SEQUENCE { 
        version Version,
        issuerAndSerialNumber IssuerAndSerialNumber,
        digestAlgorithm DigestAlgorithmIdentifier,
        authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
        digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
        encryptedDigest EncryptedDigest,
        unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL 
} 
1
2
3
4
5
6
7
8
9
10
11