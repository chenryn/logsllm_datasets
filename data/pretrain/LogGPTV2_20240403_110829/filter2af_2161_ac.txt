### 内容脚本注入
background和popup分别是扩展的后台逻辑和用户交互的重要载体，但是需要注意的是扩展无法通过这两者直接控制用户访问的某个页面的显示内容（即无法控制页面DOM），此时可以通过内容脚本注入的方式注入相关脚本，这些脚本将被符合规则的页面加载，如同被此页面使用的其他脚本文件一样。  
内容脚本注入一般有两种途径，即声明式注入和编程式注入，两者的区别就是注入行为发生在清单文件manifest.json还是逻辑脚本中。
#### 声明式注入
声明式注入即类似于popup一般，在清单文件manifest.json中提前声明需要注入的脚本路径、注入脚本的条件等等，此外无需额外操作即完成了内容脚本的注入。  
声明式脚本通过content_scripts键进行定义，它的matches子键、css子键、js子键分别声明了注入条件、需要注入的css文件和需要注入的js文件。一些键值对的细节可以查看文档进行配置：
    {
     "name": "My extension",
     ......
     "content_scripts": [
       {
         "matches": ["http://*.nytimes.com/*"],
         "css": ["myStyles.css"],
         "js": ["contentScript.js"]
       }
     ],
     ...
    }
#### 编程式注入
编程式注入即利用Chrome
API进行方法调用，进而注入相应脚本。这种注入方式的优点胜在灵活方便。使用编程式注入需要声明权限`activeTab`。开发者可以注入相关脚本内容，也可以直接注入某个指定的JS文件。示例如下：
    // 注入一句js代码
    chrome.tabs.executeScript({
        code: 'document.body.style.backgroundColor="orange"'
      });
    // 注入指定的js文件
    chrome.tabs.executeScript({
        file: 'contentScript.js'
      });
#### 通过内容脚本注入访问页面的JS对象
内容脚本是在网页上下文中运行的文件，通过使用标准文档对象模型
（DOM），它们能够读取浏览器访问的网页的详细信息，对其进行更改并将信息传递给其父扩展。但是需要注意的是，内容脚本本身运行在浏览器的一个沙箱中，它虽然能够访问页面DOM，但是沙箱隔离使它与页面本身的js代码并不能直接发生交互。  
当需要对页面的js内容进行相关操作，可以利用内容脚本可以操作DOM的特性，使用DOM附加一个scirpt标签到页面中，进而即可将对应的js文件加载的此标签上，实现对页面JS对象的访问。
    const script = document.createElement('script');
    script.src = chrome.runtime.getURL("content.js");
    document.documentElement.appendChild(script);
### 脚本通信
#### popup和background之间的通信
当用户界面popup和后台脚本background需要对彼此进行相关变量或方法的读取或调用时，只需要使用extension权限的API进行相应页面的javascript对象获取即可，具体代码如下：
    // popup获取background的javascript对象，此时可以直接进行属性和方法调用
    chrome.extension.getBackgroundPage()
    chrome.extension.getBackgroundPage().var1 = "test"
    chrome.extension.getBackgroundPage().method1()
    // background获取插件所有页面的javascript对象，注意返回值为数组
    chrome.extension.getViews()
    // 开发者需要寻找chrome.extension.getViews()的返回值数组中location字段的href字段为相应popup.html的地址的元素
    chrome.extension.getViews({type:"popup"})[0].var2 = "test"
    chrome.extension.getViews({type:"popup"})[0].method2()
#### 内容注入脚本和扩展之间的通信
下面简单讲述一些内容脚本与扩展页面通信可能用到的方法，内容脚本中的通信细节可以参考文档：
如果只需要将单个消息发送到扩展的另一部分（并选择性地获取回复），则应使用简单的`runtime.sendMessage`或
`tabs.sendMessage` 。这两个方法可以分别将一次性 JSON
可序列化消息从内容脚本发送到扩展，反之亦然。可选的回调参数允许开发者编写如何处理来自另一端的响应（如果有）。
    // 从内容脚本发送请求
    chrome.runtime.sendMessage({greeting: "hello"}, function(response) {
      console.log(response.farewell);
    });
    // 从扩展程序向内容脚本发送请求非常相似，只是需要指定要将其发送到哪个选项卡
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      chrome.tabs.sendMessage(tabs[0].id, {greeting: "hello"}, function(response) {
        console.log(response.farewell);
      });
    });
    // 在接收端，需要设置一个runtime.onMessage 事件侦听器来处理该消息。这在内容脚本或扩展页面中用法一致。
    chrome.runtime.onMessage.addListener(
      function(request, sender, sendResponse) {
        console.log(sender.tab ? "from a content script:" + sender.tab.url : "from the extension");
        if (request.greeting == "hello")
          sendResponse({farewell: "goodbye"});
      }
    );
类似的，当需要长期进行规律性的（非必须）的通信时，可以使用 runtime.connect 或 tabs.connect
建立一个长期通信连接进行消息通信；涉及扩展间的消息通信时可以使用runtime.onMessageExternal 或
runtime.onConnectExternal 进行。
#### 消息通信的安全性
需要注意的是，内容脚本返回内容的并不是绝对安全的，攻击者可能根据扩展的代码中的消息通信参数，主动构建相关恶意消息通信请求来调用扩展的部分代码逻辑，所以对内容脚本返回的内容需要开发者通过一定方式进行过滤和验证，尽量避免直接接受消息调用关键逻辑或直接将消息通信内容加载进js或DOM。  
示例为在百度主页的F12开发者工具控制栏中进行消息发送，成功调用出了某插件的弹窗告警，攻击者可以通过此机制令某些网页对安装了特定扩展的用户进行持续性的弹窗告警。  
## Manifest V3升级须知
### 重要变更项
相应的变更细节建议对照文档进行查看：
就目前来说（2022.10.1），Manifest V2至少还有一年半左右的可用期，而且大部分扩展仍未进行架构的升级，加上Manifest
V3仍然存留部分Bug未解决，所以开发时Manifest的选择还是可以不用对Manifest V3过于急迫。  
官方文档中描述Manifest
V3中仍然存在的Bug：
#### manifest.json键值对
  1. 作为标志性的，mainifest.json的`manifest_version`键的值应该变更为3，表示这是一个Manifest V3的扩展。
  2. Manifest V3将后台脚本替换为单个扩展服务工作线程ServiceWorker。在字段`service_worker`下注册服务工作线程，这个字段接受一个js文件路径。跟Manifest V2不同的是，不再接受HTML页面作为背景脚本，也不允许背景脚本持久的运行在后台。
  3. Manifest V3将可访问站点的权限申请从`permissions`键中与API一起申请变更为了使用单独的键`host_permissions`进行声明。
  4. 扩展的内容安全策略 （CSP）由Manifest V2中的`content_security_policy`接受一个字符串值变更为了接受一个对象，接受`extension_pages`和`sandbox`来配置相关细节。
  5. 用户界面的功能相似的字段`browser_action`和`page_action`统一为了`action`。
  6. 扩展的 Web 可访问资源获得了更多可配置项，用于更严格地控制其他网站或扩展可以访问扩展资源的内容，这可以一定程度上防止扩展指纹被识别。
  7. 清单 V3 通过平台更改和策略限制的组合来限制扩展执行未经审查的 JavaScript 的能力，如执行远程托管的脚本、将代码字符串注入页面或在运行时注入 eval 字符串等。这个策略会影响使用CDN方式引入Vue等前端框架的插件，但是脚手架方式使用Vue的扩展不会受到影响。  
#### 服务工作线程  
后台脚本的执行逻辑发生了较大变化，具体细节可以查看:
MV2 - background | MV3 - Service Worker  
---|---  
可以使用持久性页面。 | 不使用时终止。  
有权访问 DOM。 | 无权访问 DOM。  
可以使用 .XMLHttpRequest() | 必须使用 fetch（） 来发出请求。  
### API变化
  1. 网络请求：编程性的网络请求拦截`webRequestBlocking`被声明式的网络请求`declarativeNetRequest`操作代替，这大大降低了操作的灵活性，扩展不是读取请求并以编程方式更改它，而是指定许多规则在符合条件时进行提前声明的操作。
  2. 删除了对以下已弃用的方法和属性的支持：
  3. chrome.extension.getExtensionTabs()
  4. chrome.extension.getURL()
  5. chrome.extension.lastError
  6. chrome.extension.onRequest
  7. chrome.extension.onRequestExternal
  8. chrome.extension.sendRequest()
  9. chrome.tabs.getAllInWindow()
  10. chrome.tabs.getSelected()
  11. chrome.tabs.onActiveChanged
  12. chrome.tabs.onHighlightChanged
  13. chrome.tabs.onSelectionChanged
  14. chrome.tabs.sendRequest()
  15. chrome.tabs.Tab.selected
  16. chrome.extension.connect()
  17. chrome.extension.onConnect
  18. chrome.extension.onMessage
  19. chrome.extension.sendMessage()
#### 坑点
  1. 服务线程`Service Worker`代替后台脚本`background`后，由于不使用时休眠的特性，原background脚本内所有的全局变量都将在脚本休眠时销毁，开发者必须使用storage权限来进行异步的保存或读取相关数据。另外定时函数`setTimeout`和`setInterval`也因为后台页面的休眠而无法在background中正常使用，相应替换为alarm API进行操作。
  2. 声明式的网络请求`declarativeNetRequestwebRequestBlocking`代替网络请求拦截`webRequestBlocking`后，只能通过预先设置的规则对网络请求进行操作，且规则条数存在上限，与原先可以通过编程进行处理的API相比，灵活性大大降低，而且编写复杂度也提高了。
  3. Manifest V3通过CSP禁止eval等js功能的执行，导致一部分较新的js框架无法正常的渲染模板文件，只能使用脚手架工具将模板渲染后使用。
## 实例插件代码
Github地址： 