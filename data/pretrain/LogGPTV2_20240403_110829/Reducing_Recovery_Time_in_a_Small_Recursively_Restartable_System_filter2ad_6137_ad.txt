# 优化后的文本

## 表4. 总体MTTR（秒）
| 树版本 | 组件故障1 | 组件故障2 | 组件故障3 | 组件故障4 | 组件故障5 | 组件故障6 |
| --- | --- | --- | --- | --- | --- | --- |
| 6.11 | 24.75 | 20.93 | - | - | - | - |
| V | - | - | - | - | - | - |

### 5. 讨论
Mercury地面站的设计采用了松耦合的方式，其组件大部分是无状态的，并且故障检测基于应用层心跳。这些都是实现递归重启（RR）的重要特性，Mercury提供了一个简单的RR系统的良好示例。这里描述的RR技术适用于更广泛的应用场景。例如，我们发现许多基于集群的互联网服务[3]以及一般的分布式系统都非常适合RR；事实上，许多RR的想法起源于互联网领域。

在本节中，我们将从Mercury的经验中提取一些通用原则，这些原则对于将RR应用于其他系统非常有用。

#### 5.1. 移动边界
我们发现的一个最有趣的原理是，根据MTTR和MTTF而不是传统的模块化考虑因素（如状态共享）来划分组件边界的好处。在将树形结构从转换为树形结构V的过程中，我们将两个独立的组件e和f合并到了同一个重启组中。尽管这两个组件是独立的，但我们通过施加新的约束部分“折叠”了它们之间的故障隔离边界：当其中一个组件重启时，另一个组件也会被重启。

上述例子的对偶情况是将fedc分解为两个独立的组件fed和bc。正如文中所述，这两个组件在功能上紧密耦合，可以说没有对方它们就毫无用处。这就是为什么在最初的实现中fedc是一个单一进程的原因，即成为fed和bc的组件之间通过共享变量在同一地址空间内进行通信。拆分后，这两个组件必须通过IPC显式地进行通信。这显然增加了通信开销和复杂性，但允许这两个组件在重启树中占据不同的位置，从而降低了MTTR。我们得出结论，如果一个组件在其逻辑子组件之间表现出不对称的MTTR/MTTF特性，则沿MTTR/MTTF分离线重新架构通常是最佳的工程选择。平衡每个组件的MTTR/MTTF特性是构建更稳健和高可用系统的一步。

如[4]中所解释，RR试图利用现有的强大故障隔离边界，如虚拟内存、物理节点分离或内核进程控制，从而提高信心，认为一系列重启能够有效治愈瞬态故障。为了保持这一属性，重启组的边界不应破坏最初创建这些边界的机制。

#### 5.2. 并非所有的停机时间都是相同的
计划外停机通常比计划内停机成本更高，而在重负载或关键工作负载下的停机比轻负载或非关键工作负载下的停机成本更高。在我们的系统中，卫星通过期间（每天每颗卫星大约4次，每次持续约15分钟）的停机时间非常昂贵，因为我们可能会丢失一些科学数据和遥测数据。此外，如果故障涉及跟踪子系统且恢复时间过长，通信链路将中断，整个会话将丢失。大的MTTF并不能保证无故障通过，但短的MTTR可以提供高保障，确保不会因故障而失去整个通过。

### 6. 相关工作
递归重启性的“技术”自计算机诞生以来就存在，我们的工作借鉴了数十年的系统管理历史。RR模型细化并系统化了许多已知的技术，试图将“高可用性民间传说”转化为一种易于理解的工具。此外，递归重启性是新兴系统设计趋势——称为恢复导向计算（ROC）[12]的一个具体示例。

应用程序优雅终止并在干净的内部状态下重启的思想被称为软件重生，由[9]提出。虽然本文主要关注的是反应性重启而非主动性重启，但重生是RR策略的一个组成部分。重生也已进入基于数百个工作站节点集群的互联网服务器安装；许多这样的站点使用“滚动重启”来清除陈旧状态并将节点返回到已知的“干净”状态，Inktomi就是一个例子[3]。IBM的xSeries服务器也采用重生以提高可用性。

将操作系统服务视为独立组件的能力及其带来的利弊早已为微内核构建者所熟知[2]。最近的工作通过使用轻量级虚拟机[15]托管第三方互联网基础设施中的服务，寻求类似的好处，从而使这些基础设施变成适合RR的系统。

航天系统社区，特别是小型卫星研究社区，最近对转向商用现货（COTS）表现出了极大的兴趣。实际上，有一个名为“减少航天器地面系统和操作成本研讨会”的会议，主要讨论这些问题。这个社区认识到，COTS的机会带来了可靠性挑战；我们认为，将诸如RR等恢复导向技术应用于基于空间的系统提供了这种方法可行性的证据。

### 7. 未来工作
重启无法从硬盘驱动器或其他硬件组件（如无线电）的硬故障中恢复，这种情况最终会发生。我们正在实施组件健康摘要信标，其中包括内部指标摘要，如资源使用情况、数据结构一致性、连接检查、关键代码点之间的延迟、尚未导致故障的可疑行为警告，以及适用情况下可检测的硬故障信息。全面的故障检测和记录不是本次工作的目标，尽管它们是Mercury的长期目标；健康摘要是朝着这一方向迈出的一步。

我们描述了三种类型的重启树变换：深度增加、组合并和节点提升。在Mercury中，变换的选择和恢复策略很大程度上基于估计的fci值，即在观察到的组中显现的故障最小化ci-可治愈的概率。这些值通常比实际故障率更难测量，但可以通过经验轻松确定。在未来的工作中，我们打算扩展预言机的能力，使其能够从错误中学习，并以此生成fci值的估计。我们还计划确定特定的算法来变换重启树。

我们正在将RR应用于另一个测试系统：iROS，这是斯坦福交互工作区的软件基础设施。如[10]所述，iROS的功能组件专门编写成可重启的，并且系统的整体状态管理对组件可能在几乎任意时间重启的可能性敏感。这一设计决策部分受到希望通过RR等机制利用简单鲁棒性解决方案的愿望的推动。我们预计不久将报告这项工作。

软件重生方面的有趣工作集中在分析建模系统运行时间，以推导出最大化可用性的最优重生策略[8]。尽管我们做出了许多简化假设（所有假设都与我们系统的行一致），以便有意义地使用MTTR和MTTF进行论证，但我们期望在未来的工作中探索更详细的分析模型。

应用RR要求组件要么是无状态的，要么使用软状态[4]。对于某些系统组件使用硬状态的情况，我们正在开发一个递归可恢复系统的通用模型。通过递归恢复，我们可以容纳更广泛的恢复语义，因为每个组件都使用自定义程序进行恢复；重启只是恢复程序的一个例子。需要通用模型的一个例子是复杂的电子商务基础设施，它结合了存储服务、数据库、应用服务器和Web服务器。

在恢复过程中，各种子系统积极权衡某些系统属性，如性能或一致性与可用性。我们已经开始的一个新项目[5]已经确定了五个基本轴来进行这些权衡，并正在开发一个基于效用函数的模型，以动态优化这些权衡，从而最大化系统的可靠性。

### 8. 结论
我们将递归重启性应用于一个我们有丰富“手动”经验的系统。为了提高系统的可用性，我们减少了在近2年的生产使用中观察到的各种类型故障的恢复时间。我们实现了优于手动操作的自动故障检测和恢复，即使该系统并非专门为此目的设计。

最重要的教训是，构建“最优”（最低MTTR）的重启树需要根据组件的MTTF/MTTR和故障相关程度将组件收集到重启组中，并且这一要求反过来可能对组件架构方式施加约束。这表明，在设计时绘制模块边界时，除了传统上考虑的功能正交性和状态共享程度等因素外，还应考虑这些属性。

通过采用递归重启性，我们能够将地面站的恢复时间提高了四倍。尽管我们还没有彻底测量自动化故障检测所带来的好处，但我们观察到这些好处是显著的——在过去，依赖操作员发现故障会导致恢复时间延长几分钟甚至几小时。随着越来越多的复杂且难以管理的软件系统集成大量商用现货模块的趋势，我们认为恢复导向计算方法作为一种可靠性技术在这些系统中具有很大前景。

### 9. 致谢
我们感谢匿名审稿人和斯坦福大学的同事们对我们论文的见解和宝贵意见。我们感谢美国国家航空航天局（NASA）对我们工作的支持，资助编号NAG3-2579，以及国家科学基金会（NSF）的职业奖133966。

### 参考文献
[1] 爱国者导弹防御：软件问题导致沙特阿拉伯达兰的系统故障。美国总会计办公室技术报告GAO/IMTEC-92-26，1992年。
[2] M. J. Accetta, R. V. Baron, W. J. Bolosky, D. B. Golub, R. F. R. A. Tevanian, and M. Young. Mach: A new kernel foundation for UNIX development. 在USENIX夏季会议论文集，第93-113页，1986年。
[3] E. Brewer. Lessons from giant-scale services. IEEE Internet Computing, 5(4):46–55, July 2001.
[4] G. Candea and A. Fox. Recursive restartability: Turning the reboot sledgehammer into a scalpel. 在第8届热点操作系统研讨会论文集，第110-115页，德国埃尔茂，2001年5月。
[5] G. Candea and A. Fox. Making sound tradeoffs in state management. 准备中，2002年。
[6] J. W. Cutler and G. Hutchins. Opal: Smaller, simpler, luckier. 在AIAA小型卫星会议论文集，犹他州洛根，2000年9月。
[7] A. DiGiorgio. The smart ship is not enough. Naval Institute Proceedings, 124(6), June 1998.
[8] S. Garg, A. Puliafito, M. Telek, and K. Trivedi. Analysis of software rejuvenation using Markov regenerative stochastic Petri nets. 在第六届国际软件可靠性工程研讨会论文集，第180-187页，法国图卢兹，1995年10月。
[9] Y. Huang, C. M. R. Kintala, N. Kolettis, and N. D. Fulton. Software rejuvenation: Analysis, module and applications. 在国际容错计算研讨会论文集，第381-390页，加利福尼亚州帕萨迪纳，1995年。
[10] B. Johanson, A. Fox, P. Hanrahan, and T. Winograd. The event heap: An enabling infrastructure for interactive workspaces. 斯坦福计算机科学系技术报告CS-2001-02，加利福尼亚州斯坦福，2001年。
[11] J.-J. Miau and R. Holdaway, editors. Reducing the Cost of Spacecraft Ground Systems and Operations, volume 3. Kluwer Academic Publishers, 2000.
[12] D. Patterson, A. Brown, P. Broadwell, G. Candea, M. Chen, J. Cutler, P. Enriquez, A. Fox, E. Kiciman, M. Merzbacher, D. Oppenheimer, N. Sastry, W. Tetzlaff, and N. Treuhaft. Recovery oriented computing (ROC): Motivation, definition, techniques, and case studies. 加州大学伯克利分校技术报告UCB/CSD-02-1175，加州伯克利，2002年3月。
[13] G. Reeves. What really happened on Mars? RISKS-19.49, Jan. 1998.
[14] M. A. Swartwout and R. J. Twiggs. SAPPHIRE - Stanford’s first amateur satellite. 在1998年AMSAT-NA研讨会论文集，密歇根州维克斯堡，1998年10月。
[15] A. Whitaker, M. Shaw, and S. D. Gribble. Denali: Lightweight virtual machines for distributed and networked applications. 在USENIX年度技术会议论文集，加利福尼亚州蒙特雷，2002年6月。

---

以上是对原文的优化，使其更加清晰、连贯和专业。希望对你有所帮助！