progress: 2.0 s, 94095.8 tps, lat 0.162 ms stddev 0.112  
progress: 4.0 s, 95611.9 tps, lat 0.165 ms stddev 0.108  
progress: 6.0 s, 94929.7 tps, lat 0.166 ms stddev 0.121  
progress: 8.0 s, 96159.4 tps, lat 0.164 ms stddev 0.102  
progress: 10.0 s, 95586.2 tps, lat 0.165 ms stddev 0.109  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 16  
duration: 10 s  
number of transactions actually processed: 952791  
latency average: 0.164 ms  
latency stddev: 0.111 ms  
tps = 95271.583072 (including connections establishing)  
tps = 95879.681335 (excluding connections establishing)  
statement latencies in milliseconds:  
        -0.002375       \setrandom id 1 50000 exponential 1.0  
        0.160051        insert into test values (:id);  
postgres=# analyze test;  
ANALYZE  
```  
从most_common_vals和most_common_freqs可以观察到，threshold越大，越多的值分布在min附近 。  
```  
postgres=# select * from pg_stats where attname='id' and tablename='test';  
-[ RECORD 1 ]----------+-----------------------------------------------  
schemaname             | public  
tablename              | test  
attname                | id  
inherited              | f  
null_frac              | 0  
avg_width              | 4  
n_distinct             | 11  
most_common_vals       | {1,2,3,4,5}  
most_common_freqs      | {0.632533,0.231967,0.0867,0.0306333,0.0112333}  
histogram_bounds       | {6,6,6,6,7,12}  
correlation            | 0.458732  
most_common_elems      |   
most_common_elem_freqs |   
elem_count_histogram   |   
```  
如图：  
![pic](20150618_01_pic_003.png)  
再提供几张图，threshold分别是1,10,100,1000,10000：  
注意纵坐标的概率值。  
![pic](20150618_01_pic_004.png)  
![pic](20150618_01_pic_005.png)  
![pic](20150618_01_pic_006.png)  
![pic](20150618_01_pic_007.png)  
![pic](20150618_01_pic_008.png)  
threshold=0.000001：已经接近随机分布了。  
![pic](20150618_01_pic_009.png)  
可以看出，当threshold越来越小时，开始接近随机分布。  
## 参考  
1\. http://www.postgresql.org/docs/devel/static/pgbench.html  
2\. src/bin/pgbench/pgbench.c  
产生一个随机值  
```  
/* random number generator: uniform distribution from min to max inclusive */  
static int64  
getrand(TState *thread, int64 min, int64 max)  
{  
        /*  
         * Odd coding is so that min and max have approximately the same chance of  
         * being selected as do numbers between them.  
         *  
         * pg_erand48() is thread-safe and concurrent, which is why we use it  
         * rather than random(), which in glibc is non-reentrant, and therefore  
         * protected by a mutex, and therefore a bottleneck on machines with many  
         * CPUs.  
         */  
        return min + (int64) ((max - min + 1) * pg_erand48(thread->random_state));  
}  
```  
产生一个指数分布的随机值  
```  
/*  
 * random number generator: exponential distribution from min to max inclusive.  
 * the threshold is so that the density of probability for the last cut-off max  
 * value is exp(-threshold).  
 */  
static int64  
getExponentialRand(TState *thread, int64 min, int64 max, double threshold)  
{  
        double          cut,  
                                uniform,  
                                rand;  
        Assert(threshold > 0.0);  
        cut = exp(-threshold);  
        /* erand in [0, 1), uniform in (0, 1] */  
        uniform = 1.0 - pg_erand48(thread->random_state);  
        /*  
         * inner expresion in (cut, 1] (if threshold > 0), rand in [0, 1)  
         */  
        Assert((1.0 - cut) != 0.0);  
        rand = -log(cut + (1.0 - cut) * uniform) / threshold;  
        /* return int64 random number within between min and max */  
        return min + (int64) ((max - min + 1) * rand);  
}  
```  
产生一个高斯分布（正态分布）的随机值  
```  
/* random number generator: gaussian distribution from min to max inclusive */  
static int64  
getGaussianRand(TState *thread, int64 min, int64 max, double threshold)  
{  
        double          stdev;  
        double          rand;  
        /*  
         * Get user specified random number from this loop, with -threshold  r >= e^{-2} ~ 0.135, then when taking the  
         * average sinus multiplier as 2/pi, we have a 8.6% looping probability in  
         * the worst case. For a 5.0 threshold value, the looping probability is  
         * about e^{-5} * 2 / pi ~ 0.43%.  
         */  
        do  
        {  
                /*  
                 * pg_erand48 generates [0,1), but for the basic version of the  
                 * Box-Muller transform the two uniformly distributed random numbers  
                 * are expected in (0, 1] (see  
                 * http://en.wikipedia.org/wiki/Box_muller)  
                 */  
                double          rand1 = 1.0 - pg_erand48(thread->random_state);  
                double          rand2 = 1.0 - pg_erand48(thread->random_state);  
                /* Box-Muller basic form transform */  
                double          var_sqrt = sqrt(-2.0 * log(rand1));  
                stdev = var_sqrt * sin(2.0 * M_PI * rand2);  
                /*  
                 * we may try with cos, but there may be a bias induced if the  
                 * previous value fails the test. To be on the safe side, let us try  
                 * over.  
                 */  
        }  
        while (stdev = threshold);  
        /* stdev is in [-threshold, threshold), normalization to [0,1) */  
        rand = (stdev + threshold) / (threshold * 2.0);  
        /* return int64 random number within between min and max */  
        return min + (int64) ((max - min + 1) * rand);  
}  
```  
产生泊松分布随机值  
```  
/*  
 * random number generator: generate a value, such that the series of values  
 * will approximate a Poisson distribution centered on the given value.  
 */  
static int64  
getPoissonRand(TState *thread, int64 center)  
{  
        /*  
         * Use inverse transform sampling to generate a value > 0, such that the  
         * expected (i.e. average) value is the given argument.  
         */  
        double          uniform;  
        /* erand in [0, 1), uniform in (0, 1] */  
        uniform = 1.0 - pg_erand48(thread->random_state);  
        return (int64) (-log(uniform) * ((double) center) + 0.5);  
}  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")