# Isolated Program Execution: An Application-Transparent Approach for Executing Untrusted Programs

**Authors:** Zhenkai Liang, V.N. Venkatakrishnan, and R. Sekar  
**Department of Computer Science, Stony Brook University, Stony Brook, NY 11794**  
**Emails:** {zliang, venkat, sekar}@cs.sunysb.edu

## Abstract
In this paper, we introduce a novel method for safely executing untrusted programs by isolating their effects from the rest of the system. This isolation is achieved by intercepting file operations performed by untrusted processes and redirecting any modifications to a "modification cache" that is invisible to other system processes. The untrusted process's view of the system state is consistently maintained, incorporating both the file system and the modification cache. Upon termination of the untrusted process, the user receives a concise summary of the modified files. The user can then inspect these files using various software utilities (e.g., multimedia viewers) to determine if the changes are acceptable. The user has the option to commit or discard these modifications, effectively providing "play" and "rewind" buttons for untrusted software. Key advantages of our approach include no required changes to the untrusted programs or the underlying operating system, resistance to subversion by malicious programs, and acceptable runtime overheads. We present a prototype implementation of this system for Linux, called Alcatraz, and discuss its performance and effectiveness.

## 1. Introduction
The widespread deployment of firewalls and related network security solutions has significantly reduced the risk of remote attacks on enterprise networks. However, even the best perimeter defenses can be easily bypassed by an attacker who can induce users to download and execute malicious code. While virus detection and similar techniques can help identify known malicious code, they are limited in theory and practice due to factors such as the undecidability of detecting malicious code and the difficulty of analyzing encrypted or obfuscated code.

A more promising approach for defending against malicious code is sandboxing, where resource accesses made by untrusted code are restricted to ensure security. However, practical use of sandboxing is often hampered by the challenge of selecting appropriate policies: determining the necessary resource access rights to allow the code to execute successfully without compromising system security. Often, sandboxing tools enforce highly restrictive policies that prevent most useful applications from running, leading users to choose functionality over security and run untrusted code outside the sandbox, exposing themselves to potential damage.

An alternative to sandboxing is **isolated execution**, where the actions of untrusted code are isolated from other applications. Previous research [15, 7] has explored isolated execution in the context of Java applets, which require minimal access to system resources. These approaches involved executing untrusted applets in a "remote playground" separate from the user's desktop. However, more complex applications require access to the user's file system, necessitating the duplication of the entire environment on the remote playground.

**Logical isolation** offers a solution by logically isolating the effects of a malicious process from other processes, without requiring dedicated hardware or duplicating the environment. It was proposed in [19] to permit the continued operation of compromised processes without alerting attackers and without risking damage to the system, and in [19] and [11] in the context of databases. The theory of data isolation was further developed in [14] for databases and file systems, with protocols demonstrating the feasibility of the approach. However, practical implementation issues on contemporary operating systems were not addressed.

This paper presents an application- and OS-transparent approach for the isolated execution of untrusted programs, implemented in a tool called Alcatraz for the Linux operating system. Our approach allows untrusted applications to access the entire file system accessible to end users, using a copy-on-write mechanism to hide modifications from the rest of the system. Accesses to non-file resources are restricted as needed to ensure integrity. At the end of execution, users can inspect the changes made by the untrusted code and decide whether to commit or discard them. The key benefits of our approach are:

- **Application and Operating System Transparency:** No changes are required to the underlying operating system or the untrusted application itself. The technique can be applied to both local and remote file systems.
- **Secure yet Application-Friendly:** Provides security against malicious code without imposing undue restrictions, allowing a wide range of existing software to execute successfully.
- **Convenient and User-Friendly:** Offers a compact summary of file system resource accesses at the end of execution, avoiding the need for frequent user prompts. Users can also examine the modified files to verify the application's functionality.

Our implementation does not require administrator privileges and imposes modest overheads (less than 20% for all tested applications). The system call interposition mechanism used introduces moderate overheads, ranging from under 10% for CPU-intensive applications to nearly 100% for I/O-intensive applications.

The rest of the paper is organized as follows. Section 1.1 provides motivating examples. Section 2 describes the system design and components. Section 3 discusses implementation results, followed by related work in Section 4. Concluding remarks appear in Section 5.

### 1.1. Motivating Examples

#### Photo Organizer
Consider an application that scans specified directories for image files, generates photo album files, and creates thumbnail images. Similar applications, such as the picturepages [21] package, are available as freeware on the Internet. Safely executing such applications poses two challenges for sandboxing approaches:

- **Policy Selection:** Users must anticipate the resource access requirements of a program before execution, which is often difficult. Some sandboxing approaches allow policy changes through runtime prompts, but repeated prompts can lead to "click-fatigue," causing users to grant or refuse all subsequent prompts without review.
- **Policy Granularity:** Users need to develop policies that permit legitimate transformations while disallowing harmful changes. For the photo organizer, a policy would need to allow resizing and preview generation while preventing other modifications. Developing and enforcing such policies is challenging and may be inefficient or impossible [18].

Due to these difficulties, sandboxing policies tend to be conservative, often disallowing useful programs. In contrast, our approach permits execution of programs that do not make system changes beyond file modifications. Most applications adhere to this constraint, allowing safe execution. Users do not need to develop safety policies ahead of time and can examine the system state after execution to decide whether to keep or rollback changes.

#### Software Installation
Users frequently encounter poorly packaged software that crashes during installation or breaks other applications. Rolling back such installations is often difficult, especially if the package is a self-installing executable or a source package. Using our isolation approach, users can install the package in an isolated environment, try it out, and examine the modified files. If the installation is satisfactory, users can commit the changes; otherwise, they can discard the installation, leaving the file system unchanged.

## 2. System Description

### 2.1. Technical Goals and Design Approaches
The goal of logical isolation is to preserve system integrity. Specifically, if the file system changes made by an untrusted application are not committed, the integrity of the system should remain uncompromised. There should be no data loss, and the system state should be as if the untrusted application was never run.

Our approach focuses on preserving the contents of the file system. To ensure overall system integrity, we also need to restrict other operations that can change the system state. A conservative approach may disallow all network communications and device-modifying file operations. A more usable approach will recognize and restrict only those operations that can potentially modify the system state.