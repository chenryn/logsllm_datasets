; 24
| 0x00400db1 mov esi, 0
| 0x00400db6 mov rdi, rax
| 0x00400db9 call sym.imp.memset
; memset(local_140h, 0, 0x18)，用于存放 group
| 0x00400dbe mov edi, str.Please_enter_the_user_s
_name: ; 0x401638 ; "Please enter the user's name: "
| 0x00400dc3 mov eax, 0
| 0x00400dc8 call sym.imp.printf
; int printf(const char *format)
| 0x00400dcd lea rax, [local_120h]
| 0x00400dd4 mov esi, 0xc0
; 192
| 0x00400dd9 mov rdi, rax
| 0x00400ddc call sub.read_b56
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400de1 mov edi, str.Please_enter_the_user_s
_group: ; 0x401658 ; "Please enter the user's group: "
| 0x00400de6 mov eax, 0
| 0x00400deb call sym.imp.printf
; int printf(const char *format)
| 0x00400df0 lea rax, [local_140h]
| 0x00400df7 mov esi, 0x18
; 24
1118
6.1.15 pwn 34C3CTF2017 SimpleGC
| 0x00400dfc mov rdi, rax
| 0x00400dff call sub.read_b56
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400e04 mov edi, str.Please_enter_your_age:
; 0x401678 ; "Please enter your age: "
| 0x00400e09 mov eax, 0
| 0x00400e0e call sym.imp.printf
; int printf(const char *format)
| 0x00400e13 lea rax, [local_150h]
| 0x00400e1a mov esi, 4
| 0x00400e1f mov rdi, rax
| 0x00400e22 call sub.read_b56
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400e27 lea rax, [local_150h]
| 0x00400e2e mov rdi, rax
| 0x00400e31 call sym.imp.atoi
; int atoi(const char *str)
| 0x00400e36 mov dword [local_160h], eax
| 0x00400e3c lea rax, [local_140h]
| 0x00400e43 mov rdi, rax
; 将 group 作为参数
| 0x00400e46 call sub.strcmp_be0
; 调用函数 sub.strcmp_be0() 检查对应的 group 是否存在
| 0x00400e4b mov qword [local_158h], rax
； 如果存在，返回值为这个 group，否则为 0
| 0x00400e52 cmp qword [local_158h], 0
| ,= 0x00400e72 mov word [local_162h], 0
; 循环计算 i，赋值为 0
| ,= 0x00400e7d movzx eax, word [local_162h]
1119
6.1.15 pwn 34C3CTF2017 SimpleGC
| :| 0x00400e84 cdqe
| :| 0x00400e86 mov rax, qword [rax*8 + 0x6020e0]
; [0x6020e0:8]=0 ; 取出 users[i]
| :| 0x00400e8e test rax, rax
| ,=== 0x00400e9b cmp word [local_162h], 0x5f
; [0x5f:2]=0xffff ; '_' ; 95
| |`== 0x00400ea7 nop
| | ; JMP XREF from 0x00400ea5 (sub.memset_d58)
| `-> 0x00400ea8 cmp word [local_162h], 0x5f
; [0x5f:2]=0xffff ; '_' ; 95
| ,= 0x00400ec6 movzx ebx, word [local_162h]
| 0x00400ecd mov edi, 0x18
; 24
| 0x00400ed2 call sym.imp.malloc
; malloc(0x18) 创建一个 user 结构体
| 0x00400ed7 mov rdx, rax
; 返回值为 user 的地址
| 0x00400eda movsxd rax, ebx
| 0x00400edd mov qword [rax*8 + 0x6020e0], rdx
; [0x6020e0:8]=0 ； 将 user 放入 users，作为 users[i]
| 0x00400ee5 movzx eax, word [local_162h]
| 0x00400eec cdqe
1120
6.1.15 pwn 34C3CTF2017 SimpleGC
| 0x00400eee mov rax, qword [rax*8 + 0x6020e0]
; [0x6020e0:8]=0 ; 取出 users[i]
| 0x00400ef6 mov rdx, qword [local_158h]
| 0x00400efd mov rdx, qword [rdx]
; 取出 groups[k]->group_name
| 0x00400f00 mov qword [rax + 0x10], rdx
; 将 users[i]->group 赋值为 groups[k]->group_name
| 0x00400f04 movzx eax, word [local_162h]
| 0x00400f0b cdqe
| 0x00400f0d mov rax, qword [rax*8 + 0x6020e0]
; [0x6020e0:8]=0
| 0x00400f15 mov edx, dword [local_160h]
| 0x00400f1b mov byte [rax], dl
| 0x00400f1d lea rax, [local_120h]
; 取出输入的 name
| 0x00400f24 mov rdi, rax
| 0x00400f27 call sym.imp.strlen
; size_t strlen(const char *s) ; 获得 name 的长度
| 0x00400f2c add eax, 1
; 长度 + 1
| 0x00400f2f mov dword [local_15ch], eax
| 0x00400f35 movzx eax, word [local_162h]
| 0x00400f3c cdqe
| 0x00400f3e mov rbx, qword [rax*8 + 0x6020e0]
; [0x6020e0:8]=0 ; 取出 users[i]
| 0x00400f46 mov eax, dword [local_15ch]
| 0x00400f4c mov rdi, rax
| 0x00400f4f call sym.imp.malloc
; void *malloc(size_t size) ; 为 name 分配空间
| 0x00400f54 mov qword [rbx + 8], rax
; 将返回地址放入 users[i]->name
| 0x00400f58 mov edx, dword [local_15ch]
| 0x00400f5e movzx eax, word [local_162h]
| 0x00400f65 cdqe
| 0x00400f67 mov rax, qword [rax*8 + 0x6020e0]
; [0x6020e0:8]=0
| 0x00400f6f mov rax, qword [rax + 8]
; [0x8:8]=-1 ; 8 ; 取出 users[i]->name
| 0x00400f73 lea rcx, [local_120h]
; 取出输入的 name
1121
6.1.15 pwn 34C3CTF2017 SimpleGC
| 0x00400f7a mov rsi, rcx
| 0x00400f7d mov rdi, rax
| 0x00400f80 call sym.imp.memcpy
; void *memcpy(void *s1, const void *s2, size_t n) ; 把输
入的 name 复制到 users[i]->name 的地方
| 0x00400f85 mov edi, str.User_created
; 0x4016a3 ; "User created"
| 0x00400f8a call sym.imp.puts
; int puts(const char *s)
| 0x00400f8f nop
| 0x00400f90 mov rax, qword [local_18h]
| 0x00400f94 xor rax, qword fs:[0x28]
| ,= 0x00400fa4 add rsp, 0x168
| 0x00400fab pop rbx
| 0x00400fac pop rbp
\ 0x00400fad ret
从这个函数中能看出第二个结构体 user：
struct user {
uint8_t age;
char *name;
char *group;
} user;
struct user *users[0x60];
同样的，0x60 个 user 类型指针构成了数组 users，其起始地址为 0x6020e0 。
我们看到输入的 group 作为参数调用了 sub.strcmp_be0()：
[0x00400a60]> pdf @ sub.strcmp_be0
/ (fcn) sub.strcmp_be0 161
| sub.strcmp_be0 (int arg_5fh);
| ; var int local_18h @ rbp-0x18
1122
6.1.15 pwn 34C3CTF2017 SimpleGC
| ; var int local_2h @ rbp-0x2
| ; arg int arg_5fh @ rbp+0x5f
| ; CALL XREF from 0x004013e2 (sub.Enter_index:_31b)
| ; CALL XREF from 0x00400e46 (sub.memset_d58)
| 0x00400be0 push rbp
| 0x00400be1 mov rbp, rsp
| 0x00400be4 sub rsp, 0x20
| 0x00400be8 mov qword [local_18h], rdi
; 将 group 传给 [local_18h]
| 0x00400bec mov word [local_2h], 0
; 循环计数 i，初始化为 0
| ,= 0x00400bf4 movzx eax, word [local_2h]
| :| 0x00400bf8 cdqe
| :| 0x00400bfa mov rax, qword [rax*8 + 0x6023e0]
; [0x6023e0:8]=0 ; 取出 groups[i]
| :| 0x00400c02 test rax, rax
| ,===group_name
| |:| 0x00400c18 mov rax, qword [local_18h]
; 取出 group
| |:| 0x00400c1c mov rsi, rdx
| |:| 0x00400c1f mov rdi, rax
| |:| 0x00400c22 call sym.imp.strcmp
; int strcmp(const char *s1, const char *s2)
| |:| 0x00400c27 test eax, eax
; 对比 groups[i]->group_name 和 group 是否相同
| ,====ref_count
| ||:| 0x00400c3d test al, al
| ,=====ref_count
| |||:| 0x00400c53 add edx, 1
; 将 groups[i]->ref_count 加 1
| |||:| 0x00400c56 mov byte [rax + 8], dl
; 将低字节放回 ref_count
| |||:| 0x00400c59 movzx eax, word [local_2h]
| |||:| 0x00400c5d cdqe
| |||:| 0x00400c5f mov rax, qword [rax*8 + 0x6023e0]
; [0x6023e0:8]=0 ; 取出 groups[i] 作为返回值
| ,====== 0x00400c69 nop
| ||| :| ; JMP XREF from 0x00400c29 (sub.strcmp_be0)
| ||| :| ; JMP XREF from 0x00400c3f (sub.strcmp_be0)
| |``----> 0x00400c6a add word [local_2h], 1
; 循环计数 + 1
| | :| ; JMP XREF from 0x00400bf2 (sub.strcmp_be0)
| | :`-> 0x00400c6f cmp word [local_2h], 0x5f
; [0x5f:2]=0xffff ; '_' ; 95
| | `== 0x00400c7f leave
\ 0x00400c80 ret
1124
6.1.15 pwn 34C3CTF2017 SimpleGC
所以这个函数的作用是检查 groups 中是否已经存在同名的 group，如果是，那么
将该 group 的 ref_count 加 1，并返回这个 group。否则返回 0。
当返回值为 0 的时候，会调用函数 fcn.00400cdd()，参数为 group：
[0x00400a60]> pdf @ fcn.00400cdd
/ (fcn) fcn.00400cdd 123
| fcn.00400cdd (int arg_5fh);
| ; var int local_28h @ rbp-0x28
| ; var int local_12h @ rbp-0x12
| ; arg int arg_5fh @ rbp+0x5f
| ; CALL XREF from 0x004013f9 (sub.Enter_index:_31b)
| ; CALL XREF from 0x00400e66 (sub.memset_d58)
| 0x00400cdd push rbp
| 0x00400cde mov rbp, rsp
| 0x00400ce1 push rbx
| 0x00400ce2 sub rsp, 0x28
; '('
| 0x00400ce6 mov qword [local_28h], rdi
; 将字符串 group 传给 [local_28h]
| 0x00400cea mov word [local_12h], 0
; 循环计数 i，初始化为 0
| ,= 0x00400cf2 movzx eax, word [local_12h]
| :| 0x00400cf6 cdqe
| :| 0x00400cf8 mov rax, qword [rax*8 + 0x6023e0]
; [0x6023e0:8]=0 ; 取出 groups[i]