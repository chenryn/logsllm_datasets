A (κ, ν)-coding scheme in the CRS model, κ, ν ∈ N, is a triple of algorithms (Init, Enc, Dec) such
that: Init is a randomized algorithm which receives 1k, where k denotes the security parameter,
and produces a common reference string Σ ∈ {0, 1}poly(k), and (Enc(1k, Σ,·), Dec(1k, Σ,·)) is a
(κ, ν)-coding scheme, κ, ν = poly(k).
For brevity, 1k will be omitted from the inputs of Enc and Dec. In Section A of the Appendix
we provide the standard deﬁnitions of coding schemes and non-malleability. Now we state the
deﬁnition of strong non-malleability in the CRS model based on the deﬁnitions of [35, 51].
Deﬁnition 2.3 (Strong non-malleability in the CRS model [35, 51]). Let (Init, Enc, Dec) be a
(κ, ν)-coding scheme in the common reference string model, and F be a family of functions
f : {0, 1}ν → {0, 1}ν. For any CRS Σ, f ∈ F and s ∈ {0, 1}κ, deﬁne the tampering experiment
(cid:26) c ← Enc(Σ, s), ˜c ← f Σ(c), ˜s = Dec(Σ, ˜c)
Output same∗ if ˜c = c, and ˜s otherwise.
(cid:27)
TamperΣ,f
s
def=
which is a random variable over the randomness of Enc and Dec. The coding scheme (Init, Enc, Dec)
is strongly non-malleable with respect to the function family F, if for each f ∈ F and any s0,
s1 ∈ {0, 1}κ,
(cid:110)(cid:16)
Σ, TamperΣ,f
s0
k∈N
Σ, TamperΣ,f
s1
,
k∈N
(cid:17)(cid:111)
≈(cid:110)(cid:16)
(cid:17)(cid:111)
where Σ ← Init(1k), and “≈” may refer to statistical, or computational, indistinguishability, with
parameter k.
According to the standard deﬁnition of non-malleability, the decoding procedure is not ran-
domized, however, as it is suggested by Ball et al. [6] Dec may be randomized.
Next we state the t-variant, due to [11], of the Knowledge of Exponent assumption (KEA),
[9, 30, 46], with individual auxiliary inputs for adversary and extractor, which is known not to
contradict the impossibility results of [13, 14].
Assumption 2.4 (t-KEA assumption). Let t ∈ N. There exists a group generation algorithm
G, such that for any pair (G, g) sampled according to G(1k), where G is a group of prime order
p ∈ (2k−1, 2k), the following holds:
for any PPT algorithm A with auxiliary input auxA ∈
{0, 1}poly(k), there exist PPT extractor EA with auxiliary input auxE ∈ {0, 1}poly(k), such that for
all suﬃciently large k ∈ N,
(cid:20) (v, v(cid:48)) ← A(gr, gar, auxA), v(cid:48) = va :
x ← EA(gr, gar, auxE ) ∧ g(cid:104)r,x(cid:105) (cid:54)= v
(cid:21)
≤ negl(k).
Pr
(G,g)←G(1k)
$←Zp×Zt
(a,r)
p
8
Below, we deﬁne the class of aﬃne functions.
Deﬁnition 2.5 (The function family Faﬀ). For any set M and any t ∈ N+, we deﬁne the
following function class
Faﬀ = {f (s) = d · s + b | b, s ∈ Mt, d ∈ M}.
Next we recall the deﬁnition of extractable hash of [11]. The deﬁnition can be modiﬁed to
have diﬀerent auxiliary inputs for adversary and extractor as the t-KEA above.
Deﬁnition 2.6 (Extractable hash [11]). An eﬃciently samplable hash function ensemble H =
{Hk}k∈N is extractable, if for any PPT algorithm A, there exists a PPT extractor EH
A , such that
for all large k ∈ N and any auxiliary input aux ∈ {0, 1}poly(k):
(cid:20) y ← A(h, aux),∃x : h(x) = y :
x(cid:48) ← EH
A (h, aux) ∧ h(x(cid:48)) (cid:54)= y
(cid:21)
Pr
h←Hk
≤ negl(k).
Below, we deﬁne the split-state functions class, Fss, and the λ-bit leakage function class Lλ.
A deﬁnition for split-state leakage functions was considered in [51].
Deﬁnition 2.7 (The split-state function family Fss). For any, even, ν ∈ N and any eﬃciently
computable function f : {0, 1}ν → {0, 1}ν, f ∈ Fss, if there exist eﬃciently computable functions
f1 : {0, 1}ν/2 → {0, 1}ν/2, f2 : {0, 1}ν/2 → {0, 1}ν/2, such that for every x1, x2 ∈ {0, 1}ν/2 ×
{0, 1}ν/2, f (x1||x2) = f1(x1)|| f2(x2).
Deﬁnition 2.8 (The λ-bit leakage function class Lλ). For any λ ∈ N, Lλ is the set of the
eﬃciently computable functions that output λ bits, i.e., for any g ∈ Lλ, g : {0, 1}∗ → {0, 1}λ.
Next, we state the deﬁnition of semantically secure authenticated encryption, against one
time leakage.
Deﬁnition 2.9. (Semantically secure authenticated encryption against one time leak-
age) Let k be the security parameter, let (KGen, E, D) be a symmetric encryption scheme and
let L be a set of functions. Then, (KGen, E, D) is authenticated, semantically secure against
one-time leakage with respect to L, if
1. (Correctness): For every message s, Pr[Dsk(Esk(s)) = s] = 1, where sk ← KGen(1k).
2. (Semantic security): for any function g ∈ L and any two messages s0, s1, the following
distributions are (either computationally or statistically) indistinguishable:
(cid:16)
(cid:17) ≈(cid:16)
(cid:17)
Esk(s0), g(sk)
Esk(s1), g(sk)
,
where sk ← KGen(1k).
3. (Unforgeability): For every PPT algorithm A = (A1,A2),
(cid:20)
e(cid:48) (cid:54)= e ∧ Dsk(e(cid:48)) (cid:54)= ⊥
Pr
(cid:12)(cid:12)(cid:12)(cid:12) sk ← KGen(1k); (s, st) ← A1(1k);
e ← Esk(s); e(cid:48) ← A2(e, st)
(cid:21)
≤ negl(k).
Here, it should be noted that the leakage function is being deﬁned by the attacker before
receiving the challenge ciphertext, otherwise semantic security breaks.
9
3 (cid:96)-more extractable hash function families
In this section we deﬁne the notion of (cid:96)-more extractable hash function families, and we provide
a general discussion on the primitive.
Deﬁnition 3.1 ((cid:96)-more extractable hash function families). For (cid:96) ∈ N, an eﬃciently samplable
hash function ensemble H = {Hk}k∈N, is (cid:96)-more extractable, if for any PPT algorithm Av and
any auxAv ∈ {0, 1}poly(k), there exist a PPT extractor EH
and auxE ∈ {0, 1}poly(k), such that for
Av
all PPT algorithms As, any large k ∈ N and any vector of messages s = (s1, . . . , s(cid:96)),
(cid:20)
Pr
hz←Hk
where,
(cid:21)
Exps,hzAv,As,EH
Av
((cid:96), auxAv , auxE ) = 1
≤ negl(k),
((cid:96), auxAv , auxE ) :
Exps,hzAv,As,EH
Av
∀i ∈ [(cid:96)], sri ← U{0,1}poly(k), vi = hz(sri, si)
sr = (sr1, . . . , sr(cid:96)), v = (v1, . . . , v(cid:96))
(˜v, st) ← Av(hz, v, auxAv )
(ˆsr, ˆs) ← EH
(hz, v, auxE )
Av
(˜sr, ˜s) ← As (hz, sr, s, st)
If hz(˜sr, ˜s) = ˜v ∧ ∀i : ˜v (cid:54)= vi ∧ hz(ˆsr, ˆs) (cid:54)= ˜v, return 1
otherwise, return 0
( hash computation )
( hash tampering )
( pre-image extraction )
( pre-image tampering )
The main steps in the above experiment are the following. Initially, we sample randomness
for the hash, and perform the hash computation over (cid:96) ∈ N, pre-images. For deterministic hash
function families we just omit randomness sampling, and we compute the hash, only using the
messages. The challenge for the attacker Av, is to produce a valid hash value ˜v, given (cid:96) has
values, denoted as v, and auxiliary information auxAv . Then, the extractor EH
Av
is executed,
given v and its own auxiliary input auxE . Notice, that, we allow the auxiliary input of the
extractor to depend on the attacker’s auxiliary input.6 Finally, the adversary As produces a
valid pre-image for ˜v, while given all information generated during the execution. The output
of the experiment is 1, if Av produces a valid hash value ˜v, As produces a valid pre-image for
˜v, while the extractor fails.
Leaving aside the fact that the above deﬁnition considers randomized function families, the
major diﬀerence between the current deﬁnition and the one given by Bitansky et al. [10, 11]
(Deﬁnition 2.6), is two-fold: ﬁrst the “(cid:96)-more” generalization that allows the attacker to have
access to (cid:96) valid hash values for which it does not know the pre-images, prior to delivering
its own hash value. Second, the introduction of the algorithm As, that takes the place of the
existential quantiﬁer that appears in the original deﬁnition. This is in fact a weakening of the
original deﬁnition, in the sense that the extractor is allowed to fail in case a pre-image exists
but is not eﬃciently computable based on the view of the adversary (this would not be allowed
in the original deﬁnition).
Note that, weaker extractability does not hurt the applicability of the primitive, as there are
many settings in which the attacker, is not only required to produce a valid hash value ˜v, but also
to provide a valid pre-image for it. For instance, in our application on non-malleable codes, our
codeword stores a secret key and its hash value, and any attacker that modiﬁes the hash value, it
also needs to come up with a valid pre-image, otherwise it creates an invalid codeword, assuming
the collision resistance property of the hash function family. In addition, the existence of As
does not trivialize the problem for the extractor since the extractor is challenged to produce a
valid pre-image for ˜v, given only the code of Av and its own auxiliary input (and in particular
it lacks access to the state of Av and the program of As).
6For this reason our deﬁnition is not contradicting the impossibility results of [13, 14].
10
It is easy to see that, constructing (cid:96)-more extractable hash function families that are non-
compressing, can be achieved using existing tools, such as robust NIZKs [31]. Here we con-
struct an (cid:96)-more extractable, collision resistant, hash (ECRH) function family, achieving length-
eﬃciency comparable to that of a regular hash function.
In the following lemma we prove that, for any (cid:96)-more ECRH function family, the output
of the extractor should match the output of As, in case both of them output valid pre-images,
otherwise we break collision resistance.
Lemma 3.2. Let H = {Hk}k∈N be a collision resistant, (cid:96)-more extractable, eﬃciently samplable,
hash function ensemble. Then, for any Av, auxAv , EH
, auxE , As, s = (s1, . . . , s(cid:96)), (cid:96), as they
Av
were deﬁned in Deﬁnition 3.1
Pr
hz←Hk
Exps,hzAv,As,EH
Av
((cid:96), auxAv , auxE ) = 0, hz(˜sr, ˜s) = ˜v, ˜v (cid:54)= vi, i ∈ [(cid:96)] :
(ˆsr, ˆs) (cid:54)= (˜sr, ˜s)
(cid:34)
(cid:35)
≤ negl(k).
(cid:4)
Proof. For the proof see Section B of the Appendix.
Next, we show a separation of 0-more extractability and general (cid:96)-more extractability as we
discussed in the introduction. In particular, we prove that the 0-more extractable hash of [11]
is not 1-more extractable. Before doing so, we ﬁrst revisit their construction, which is based on
the t-KEA assumption (Assumption 2.4).
Construction 3.3 (0-more extractable hash from t-KEA [11]). Let G be a group-generation
algorithm. An instance of a (kt, 2k)-compressing, hash function family, H∗ = (Gen∗, h∗), with
respect to G, is deﬁned as follows:
1. Gen∗(1k): sample (G, g, p) ← G(1k), p ∈ (2k−1, 2k), (a, r) $← Zp × Zt
p, where p = |G|, and
output z = (G, gr, gar).
2. Hashing computation: on input s, compute h∗
z(s) = (g(cid:104)r,s(cid:105), g(cid:104)ar,s(cid:105)).
In [11] the authors prove that Construction 3.3 is collision resistant.