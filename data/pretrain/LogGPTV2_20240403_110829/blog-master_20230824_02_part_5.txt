-------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=17.65..1112.36 rows=1000 width=4) (actual time=301.094..301.094 rows=0 loops=1)  
   Recheck Cond: (tags % '{2}'::integer[])  
   Rows Removed by Index Recheck: 77129  
   Heap Blocks: exact=50082  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..17.40 rows=1000 width=0) (actual time=25.659..25.659 rows=77129 loops=1)  
         Index Cond: (tags % '{2}'::integer[])  
 Planning Time: 0.252 ms  
 Execution Time: 301.135 ms  
(8 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[2,8];  
                                                              QUERY PLAN  
--------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=799.554..799.554 rows=0 loops=1)  
   Recheck Cond: (tags % '{2,8}'::integer[])  
   Rows Removed by Index Recheck: 500264  
   Heap Blocks: exact=35117 lossy=33064  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=43.356..43.356 rows=149118 loops=1)  
         Index Cond: (tags % '{2,8}'::integer[])  
 Planning Time: 0.379 ms  
 Execution Time: 799.611 ms  
(8 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[2,2696];  
                                                            QUERY PLAN  
----------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=26.476..26.478 rows=0 loops=1)  
   Recheck Cond: (tags % '{2,2696}'::integer[])  
   Rows Removed by Index Recheck: 1028  
   Heap Blocks: exact=1019  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=5.242..5.242 rows=1028 loops=1)  
         Index Cond: (tags % '{2,2696}'::integer[])  
 Planning Time: 0.570 ms  
 Execution Time: 26.570 ms  
(8 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];  
                                                           QUERY PLAN  
---------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=70.45..1165.16 rows=1000 width=4) (actual time=16.722..16.723 rows=0 loops=1)  
   Recheck Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])  
   Rows Removed by Index Recheck: 8  
   Heap Blocks: exact=8  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..70.20 rows=1000 width=0) (actual time=16.586..16.587 rows=8 loops=1)  
         Index Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])  
 Planning Time: 0.276 ms  
 Execution Time: 16.795 ms  
(8 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];  
                                                          QUERY PLAN  
-------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=61.65..1156.36 rows=1000 width=4) (actual time=9.755..9.757 rows=0 loops=1)  
   Recheck Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..61.40 rows=1000 width=0) (actual time=9.748..9.749 rows=0 loops=1)  
         Index Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])  
 Planning Time: 0.294 ms  
 Execution Time: 9.811 ms  
(6 rows)  
```  
#### 对照  
方法 | SQL1 耗时 ms | SQL2 耗时 ms | SQL3 耗时 ms | SQL4 耗时 ms | SQL5 耗时 ms  
---|---|---|---|---|---  
传统字符串 + 全表扫描 | 1110.267 | 2004.062 | 2060.434 | 6767.990 | 6208.191  
传统字符串 + 模糊搜索 + gin索引加速 | 78.163 | 814.748 | 902.637 | 4050.040 | 3691.329  
数组 + gin索引加速 | 74.015 | 18.561 | 4.750 | 5.523 | 4.528  
数组(重叠个数)相似度搜索 + gin索引加速 | 309.182 | 794.029 | 26.218 | 13.264 | 11.447  
数组(重叠占比)相似度搜索 + gin索引加速 | 301.135 | 799.611 | 26.570 | 16.795 | 9.811  
## 知识点  
1、数组类型  
2、gin索引  
3、smlar 插件  
更多算法参考: https://github.com/jirutka/smlar  
4、pg_trgm 插件  
## 思考  
pg_trgm插件对字符串做了什么处理, 可以利用gin索引加速模糊查询加速?  
smlar插件是如何通过索引快速判断两个数组的相似性达到阈值的?  
为什么多个模糊匹配条件使用and条件后, 性能下降严重?  
为什么使用数组类型后, 标签条件越多性能越好?  
如果多个模糊匹配条件是or 条件呢? 性能会下降还是提升?  
还有什么业务场景会用到数组?  
还有哪些业务场景会用到字符串模糊匹配?  
还有什么业务场景非常适合使用数组相似的功能?  
除了使用标签匹配来圈选相似目标人群, 还可不可以使用其他方式圈选? 例如向量距离?  
使用标签匹配时, 如果我们要排除某些标签, 而不是包含某些标签, 应该如何写sql, 性能又会怎么样呢?  
为什么使用smlar进行相似度过滤时, 相似度越高性能越好?  
SQL圈选性能和返回符合条件的用户记录数有没有关系? 是什么关系?  
当使用pg_trgm进行模糊搜索加速时, 如果字符串中包含wchar(例如中文)时性能如果很差要怎么办? 如果需要模糊搜索的字符只有1个或2个字符时性能如果很差要怎么办?  
## 参考  
##### 202308/20230807_01.md   [《又一款PostgreSQL 向量索引插件 pgvecto.rs , 支持ivfflat, hnsw. 助力非结构化数据的特征向量相似搜索》](../202308/20230807_01.md)  
##### 202307/20230726_02.md   [《标准知识库 + PostgreSQL或PolarDB + 向量插件 + openai(或其他大模型) 提升通用ai机器人在专业领域的精准度》](../202307/20230726_02.md)  
##### 202307/20230706_05.md   [《PostgreSQL 或PolarDB 使用插件pg_tiktoken - 使用 OpenAI tiktoken库文本向量化(tokenization) - 使用分词算法BPE - NLP 自然语言处理》](../202307/20230706_05.md)  
##### 202307/20230704_01.md   [《hydra, 一款基于PostgreSQL的开源HTAP数据库. 支持列存,向量化,物化,冷热分离存储,cloud 等特性》](../202307/20230704_01.md)  
##### 202306/20230605_01.md   [《PostgreSQL又一个向量插件hnsw, 建议关注》](../202306/20230605_01.md)  
##### 202304/20230419_02.md   [《rust pub use 和 PostgreSQL WITH GRANT OPTION 设计相似之处》](../202304/20230419_02.md)  
##### 202304/20230410_03.md   [《PostgreSQL 16 preview - 数组随机打散和随机提取功能 : array_shuffle() , array_sample()》](../202304/20230410_03.md)  
##### 202303/20230331_07.md   [《ChatGPT背后的数据库技术体验 - 向量近似搜索之 milvus(专业的向量数据库)》](../202303/20230331_07.md)  
##### 202303/20230330_03.md   [《ChatGPT背后的数据库技术体验 - 向量近似搜索之 lance》](../202303/20230330_03.md)  
##### 202303/20230330_01.md   [《ChatGPT背后的数据库技术体验 - 向量近似搜索之 PostgreSQL+pase(hnsw,ivfflat,ivfpq)》](../202303/20230330_01.md)  
##### 202303/20230321_01.md   [《德说-第212期, 如何从“智”人到“慧”人? - 到底怎么和AI合作|驾驭AI? - 关于prompt engineer - 关于怎么提问》](../202303/20230321_01.md)  
##### 202303/20230319_01.md   [《DuckDB 存储生态: lance(向量存储引擎): Modern columnar data format for ML/超越parquet》](../202303/20230319_01.md)  
##### 202303/20230306_03.md   [《使用DuckDB 分解深度嵌套的 JSON，一次一个向量》](../202303/20230306_03.md)  
##### 202301/20230110_04.md   [《PostgreSQL 16 preview - 优化gin索引代价估算算法》](../202301/20230110_04.md)  
##### 202212/20221223_01.md   [《使用 PolarDB 开源版 smlar 插件进行高效率相似文本搜索、自助选药、相似人群圈选等业务》](../202212/20221223_01.md)  
##### 202212/20221222_04.md   [《使用 PolarDB 开源版 和 imgsmlr 存储图像特征值以及快速的进行图像相似搜索》](../202212/20221222_04.md)  
##### 202212/20221222_03.md   [《使用 PolarDB 开源版 采用array数组和gin索引高效率解决用户画像、实时精准营销类业务需求》](../202212/20221222_03.md)  
##### 202212/20221221_02.md   [《PolarDB 开源版通过 pg_trgm GIN 索引实现高效率 `like '%xxx%'` 模糊查询》](../202212/20221221_02.md)  
##### 202212/20221217_01.md   [《PolarDB 开源版通过 parray_gin 实现高效率 数组、JSON 内元素的模糊搜索》](../202212/20221217_01.md)  
##### 202212/20221209_01.md   [《PolarDB 开源版通过pg_similarity实现17种文本相似搜索 - token归一切分, 根据文本相似度检索相似文本.》](../202212/20221209_01.md)  
##### 202212/20221201_02.md   [《ChatGPT背后的数据库技术体验 - 向量近似搜索之 pgvector : 如何用 PolarDB 在不确定世界寻找确定答案 (例如图像相似) - pgvector|pase》](../202212/20221201_02.md)  
##### 202208/20220829_03.md   [《DuckDB:list,struct,map 类型很强大(支持lambda计算) - PostgreSQL:数组、row|record、json字典》](../202208/20220829_03.md)  
##### 202208/20220829_02.md   [《DuckDB 字符串相似性计算函数》](../202208/20220829_02.md)  
##### 202208/20220809_01.md   [《PostgreSQL 14 函数|存储过程 支持begin atomic 代码块, 提升sql函数|过程安全性》](../202208/20220809_01.md)  
##### 202203/20220323_02.md   [《JSON 局部相似 搜索例子》](../202203/20220323_02.md)  
##### 202203/20220309_02.md   [《PostgreSQL 15 preview - 逻辑复制、逻辑订阅增加错误信息errcontext(包含LSN). 结合pg_replication_origin_advance跳过冲突的wal回放》](../202203/20220309_02.md)  
##### 202203/20220302_01.md   [《PostgreSQL + FDW + vector 插件加速向量检索 - 在不确定世界寻找确定答案 (例如图像相似)》](../202203/20220302_01.md)  
##### 202110/20211005_01.md   [《PostgreSQL 数组或JSON内容的模糊匹配索引插件: parray_gin》](../202110/20211005_01.md)  
##### 202109/20210915_03.md   [《DB吐槽大会,第43期 - PG 倒排索引启动和recheck代价高》](../202109/20210915_03.md)  
##### 202109/20210906_02.md   [《B2B营销的第一性原理》](../202109/20210906_02.md)  
##### 202108/20210805_05.md   [《PostgreSQL 15 preview - 内置逻辑订阅sub/pub支持2PC, 内置pgoutput decoding plugin openapi支持2PC》](../202108/20210805_05.md)  
##### 202107/20210729_03.md   [《一种新的向量检索索引 DiskANN: Fast Accurate Billion-point Nearest Neighbor Search on a Single Node》](../202107/20210729_03.md)  
##### 202107/20210727_01.md   [《为什么数据库细分赛道越来越多, 发展越来越快? - 含dbengine统计》](../202107/20210727_01.md)  
##### 202107/20210723_01.md   [《为什么向量数据要归一化?》](../202107/20210723_01.md)  