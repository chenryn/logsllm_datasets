title:Cyclic Redundancy Code (CRC) Polynomial Selection For Embedded Networks
author:Philip Koopman and
Tridib Chakravarty
Cyclic Redundancy Code (CRC) Polynomial Selection For Embedded Networks
Philip Koopman
ECE Department & ICES
Carnegie Mellon University
Pittsburgh, PA, USA
PI:EMAIL
Tridib Chakravarty
Pittsburgh, PA, USA
PI:EMAIL
Abstract
Cyclic Redundancy Codes (CRCs) provide a first line of
defense against data corruption in many networks.
Unfortunately, many commonly used CRC polynomials
provide significantly less error detection capability than
they might. An exhaustive exploration reveals that most
previously published CRC polynomials are either inferior
to alternatives or are only good choices for particular
message lengths. Unfortunately these shortcomings and
limitations often seem to be overlooked. This paper
describes a polynomial selection process for embedded
network applications and proposes a set of good
general-purpose polynomials.
A set of 35 new
polynomials in addition to 13 previously published
polynomials provides good performance for 3- to 16-bit
CRCs for data word lengths up to 2048 bits.
1. Introduction
Cyclic Redundancy Codes (CRCs) are commonly used
for error detection in embedded networks and other appli-
cations. But many applications employ CRCs that provide
far less error detection capability than they might achieve
for a given number of CRC bits. This is largely because
there is little published guidance and less quantitative data
upon which to base tradeoff decisions. To help improve
this situation, this paper proposes “good” general purpose
CRCs for error detection applications that encompass
many current and future embedded network protocols and
other uses having data words up to 2048 bits in length.
the property of interest
While various CRC designs can be found in standards
and folklore, most of them are far from optimal for the
short messages found in embedded networks. For embed-
ded networks,
is usually the
Hamming Distance (HD), which is the minimum possible
number of bit inversions that must be injected into a mes-
sage to create an error that is undetectable by that mes-
sage's CRC-based Frame Check Sequence. For example,
if a CRC polynomial has HD=6 for a given network, that
means there are no possible combinations of 1-, 2-, 3-, 4-,
nor 5-bit errors (where a bit error is an inversion of a bit
value) that can result in an undetected error, but there is at
least one combination of 6 bits that, when corrupted as a set
within a message, is undetectable by that CRC. An addi-
tional property of interest is burst error detection capabil-
ity, but all codes we will discuss can detect burst errors up
to the size of the CRC width. Other possible evaluation
criteria exist such as unidirectional bit error detection
(which depends on data values) and high-noise detection.
Unfortunately there does not seem to be any authoritative
characterization of faults in embedded networks. Our in-
teractions with industry indicate that HD for random inde-
pendent errors on a binary symmetric channel is usually the
primary factor considered in embedded network CRC de-
sign, and thus is the metric we use in this paper.
After a series of protocol evaluations for industry appli-
cations in which the question arose as to whether it would
be possible to achieve a given Hamming Distance (HD)
with a given CRC size, we decided to explore the design
space of CRC size, message length, and attainable
Hamming Distance. The results indicate that there are sig-
nificant opportunities for improving CRC effectiveness
because some commonly used CRCs have poor perfor-
mance. Moreover, many sources used in industrial prac-
tice teach engineers to select a polynomial without taking
into account the length of the data being error checked,
which ignores an important engineering tradeoff. And,
even if engineers want to make detailed design tradeoffs,
tools and data tables on polynomial performance are scarce
and often difficult to apply.
This paper presents a small set of polynomials that pro-
vides good overall performance while including message
length as a key design parameter. After discussing back-
ground and previous work, a methodology for defining
“good” CRC designs is proposed, and the results of apply-
ing that methodology are presented. Comparisons of pub-
lished CRCs to the proposed designs reveal both strengths
and serious weaknesses in the existing state of practice.
2. Background
A CRC can be thought of as a (non-secure) digest func-
tion for a data word that can be used to detect data corrup-
tion. Mathematically, a CRC can be described as treating a
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:55 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Example Hamming weights for data word size 48 bits.
CRC Polynomial
HD
Hamming weights for number of bits corrupted:
1 bit
2 bits
3 bits
4 bits
5 bits
6 bits
CCITT-16
0x8810
4
[Baicheva00] 0xC86C 6
CAN
0x62CC 6
CRC-12
0xC07
0x8F8
4
5
DARC-8
0x9C 2
CRC-8
0xEA 4
CRC-7
0x48
0x5B
3
4
0
0
0
0
0
0
0
0
0
0
0
0
0
0
66
0
0
0
0
0
0
0
0
0
0
84
0
0
575
0
0
0
0
2 430
2 191
4 314
28809
0
1 452
13 258
2 039
13 122 124 248
2 984
0
253 084
216
2 690
27 051 226 856
0
5 589
0
451 125
16
16
(bits)
CRC Size
binary data word as a polynomial over GF(2)
(i.e., with each polynomial coefficient being
zero or one) and performing polynomial di-
vision by a generator polynomial G(x),
which is commonly called a CRC polyno-
mial. (CRC polynomials are also known as
feedback polynomials, in reference to the
feedback taps of hardware-based shift regis-
ter implementations.) The remainder of that
division operation provides an error detec-
tion value that is sent as a Frame Check Se-
quence (FCS) within a network message or
stored as a data integrity check. Whether im-
plemented in hardware or software, the CRC
computation takes the form of a bitwise con-
volution of a data word against a binary ver-
sion of the CRC polynomial. The data word
size is the data protected by the CRC but not including the
CRC itself. [Peterson72] and [Lin83] are among the com-
monly cited standard reference works for CRCs. [Wells99]
provides a discussion for non-specialists.
8
8
7
7
15
12
12
Error detection is performed by comparing an FCS
computed on data against an FCS value originally com-
puted and either sent or stored with the original data. An
error is declared to have occurred if the stored FCS and
computed FCS values are not equal. However, as with all
digital signature schemes, there is a small, but finite, prob-
ability that a data corruption that inverts a sufficient num-
ber of bits in just the right pattern will occur and lead to an
undetectable error. The minimum number of bit inversions
required to achieve such undetected errors (i.e., the HD
value) is a central issue in the design of CRC polynomials.
Using the right polynomial is central to CRC-based er-
ror detection schemes. The prime factorization of the gen-
erator polynomial brings with it certain potential
characteristics, and in particular gives a tradeoff between
maximum number of possible detected errors vs. data word
length for which the polynomial is effective. Many poly-
nomials are good for short words but poor at long words,
and the converse. Unfortunately, factorization of a polyno-
mial is not sufficient to determine actual HDs. A polyno-
mial with a promising factorization might be vulnerable to
some combination of bit errors, even for short message
lengths. Thus, factorization characteristics suggest poten-
tial capabilities, but specific evaluation is required of any
polynomial before it is suitable for use in a CRC function.
Conventional wisdom is that the best way to select a
CRC polynomial is to use one that is already commonly
used. For example, [Press92] lists 16-bit polynomials and
states the choice of polynomial “is only a matter of conven-
tion.” This approach assumes that those polynomials were
selected for optimal error detection, which in some cases is
incorrect. For example, several standardized 16-bit poly-
nomials have error detection performance inferior to avail-
able alternatives, and appear to have been chosen to mini-
mize the number of “1” bits in the feedback value at a time
when each such bit had substantial hardware implementa-
tion cost.
[Lin83] states that polynomial selection is “a
very difficult problem” and says that some good cyclic
codes have been discovered, but provides no details. Most
coding theory and practice books are similar to [Wells99]
in that they give only a handful of published polynomials
and little or no guidance on polynomial selection tradeoffs.
A Hamming weight N is the number of errors, out of all
possible message corruptions, that is undetected by a CRC
using a particular polynomial. A set of Hamming weights
captures performance for different numbers of bits cor-
rupted in a message at a particular data word length, with
each successively longer data word length having set of
Hamming weights with higher values. The first non-zero
Hamming weight determines a code’s Hamming Distance.
Table 1 shows some example Hamming weights for
CRC polynomials at a data word size of 48 bits, which is a
representative length for many embedded networks. The
first polynomial shown is the ubiquitous CCITT-16 poly-
nomial 0x8810. 0x8810 is a hexadecimal representation of
the polynomial x16 +x12 +x5 +1, with x16 as the highest bit
and an implicit +1 term, as is common in software-based
CRC implementations. It has only three “feedback” bits
set in the polynomial, which was advantageous for early
hardware implementations. For data words that are 48 bits
in length, CCITT-16 detects all 1-bit errors (as does any
CRC polynomial), and all 2- and 3-bit errors. However, it
only provides HD=4 at this length because, as shown by
the weights in Table 1, it fails to detect 84 of all possible
4-bit errors. In comparison, the 16-bit polynomial 0xC86C
[Baicheva00] attains HD=6 at this length.
We can also do better than CCITT-16 for this example
using smaller CRCs. The well known CAN 15-bit polyno-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:55 UTC from IEEE Xplore.  Restrictions apply. 
mial 0x62CC, which is optimized for data word sizes of up
to 112 bits, provides HD=6 at this length, missing only
4,314 of all possible 6-bit errors while using one less bit for
its 15-bit CRC. Perhaps a surprise, though, is that 12-bit
polynomial 0x8F8 can achieve HD=5 at this length, while
the best published 12-bit CRC, 0xC07, achieves only
HD=4. The 8-bit CRC-8 polynomial 0xEA also achieves
HD=4 at this length – but a designer would have to know to
use that published polynomial rather than the published
DARC-8 polynomial, which does not. The smallest CRC
polynomial achieving HD=4 at this length is the 7-bit CRC
0x5B (albeit with a higher weight than CCITT-16), al-
though the best published 7-bit CRC achieves only HD=3.
This example points out two fundamental problems with
current practice: there are gaps in the set of published poly-
nomials, and there is a need for specific guidance on which
polynomials to use when.
Proposing to make changes to decades of entrenched
CRC folklore and standardization is no small task. While
some might think that there is little need for new CRC
polynomials because networking standards force the use of
existing polynomials, this is often not the case for embed-
ded networks. New embedded networks are continually
being developed, each with unique performance and error
detection tradeoffs. The Train Control Network (TCN) is a
recent example for which we provided a CRC effective-
ness evaluation that demonstrated an 8-bit CRC could have
provided HD=4 protection compared to the 7-bit CRC plus
parity bit scheme used that provided only HD=3 protection
[Koopman01].
In all fairness, TCN was constrained by
legacy compatibility to use a 7-bit CRC; but many proto-
cols for new application areas are not so constrained.
Moreover, proprietary embedded network development
happens continually in industry. Given that there is no end
in sight to the proliferation of application-specific network
protocols, it makes sense to find out what the best CRC
polynomials are so that they can be used by new applica-
tions and emerging standards.
3. Previous work
Previous published work on CRC effectiveness has
been limited by the computational complexity of determin-
ing the weights of various polynomials. Only a few de-
tailed surveys of polynomials have been published.
Baicheva surveyed 8-bit CRC polynomials with certain
factorization structures up to data word length 127
[Baicheva98]. Baicheva proposed a good polynomial that
was better than the ATM Header CRC polynomial. But, as
discussed below, the actual optimal polynomial for the
ATM Header data word length has a factorization that was
not evaluated in that survey. This illustrates the impor-
tance of an exhaustive search of polynomials when design-
ing a CRC for an application.
Baicheva later surveyed all 16-bit CRCs for data words
up to 1024 bits in length [Baicheva00], identifying various
polynomials as both “good” in general and optimal for par-
ticular data word lengths.
survey paper
[Kazakov01] extended those results to longer data words,
focusing on computing a point-by-point optimal bound for
16-bit CRC effectiveness. We have included their results
in our evaluation of alternatives.
A later
While 8 and 16 bit CRC sizes are often used, it is also
common to use other CRC sizes in embedded network ap-
plications to conserve bandwidth while achieving a partic-
ular desired HD. As illustrated by CAN’s use of a 15-bit
instead of 16-bit CRC, even saving one bit on the FCS field
makes a difference that matters.
Finding a comprehensive list of well known polynomi-
als in print is difficult. [Peterson72] gives a list of irreduc-
ible polynomials of degree 16 or less, but does not give an
evaluation of error detection capabilities when those poly-
nomials are used for CRCs. A search revealed published
polynomials for 3-, 4-, 5-, 6-, 7-, 8-, 10-, 12-, 14-, 15-, and
16-bit CRCs. In many cases there is more than one recom-
mended polynomial for a given CRC size. Worse, in the
case of the CRC-12 polynomial, there are three different
polynomials given under the same name, with most refer-
ences evenly split between two of them. In the words of
one of the more complete listings of polynomial candi-
dates, “These [polynomials] differ in bit 1 and calculations
using them return different values. With citations evenly
split, it is hard to know which is correct” [Jaffer03]. Given
a lack of published quantitative analysis, popularity con-
tests are a common method for selecting polynomials.
This paper seeks to publish readily usable engineering
guidelines for CRC selections of polynomial sizes 3 to 16
bits for embedded networks. CRC performance was deter-
mined by performing a complete evaluation of every possi-
ble undetected error pattern in messages as described in
[Koopman02], yielding an exact result rather than an ap-
proximation. The balance of this paper first presents some
case studies illustrating the severity of current problems,
then describes a methodology for selecting “good” general
purpose polynomials, and finally presents data for choos-
ing embedded networking polynomials.
4. Case studies of current protocols
Adopting a previously published polynomial has two
potential problems. One problem is that some polynomials
in use simply provide very poor error detection capabilities
overall. A second problem is that even a “good” polyno-
mial is of necessity optimized for message sizes of a partic-
ular length, and will do poorly when misused for messages
of a different length. Some case studies of current polyno-
mials in use illustrate these points.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:55 UTC from IEEE Xplore.  Restrictions apply. 
4.1. USB vs. ITU for 5 bit CRCs
5-bit CRCs are used, among other places, for providing
error detection for Universal Serial Bus (USB) tokens and
by an ITU standard for telecommunication systems. Fig-
ure 1 shows the performance of these polynomials com-
pared to the best achievable bound. The probability of
undetected error Pud is summed from the probability of
successively higher numbers of bit errors at an assumed
Bit Error Rate (BER) of 10-6 weighted by the percentage of
errors caught per corresponding polynomial weights for
each data word length. The bound line shown assumes a
different, optimal, polynomial is selected for each length,
and thus is a firm bound on performance. Lower numbers
are better, indicating a lower probability of undetected er-
ror slipping past the CRC.
The USB 5-bit CRC standard, “USB-5,” is hexadeci-
mal value 0x12 = x5 + x2 + 1 [USB00]. This polynomial is
used by USB to protect data words of length 11 bits.
USB-5 is optimal for 11-bit messages, and is nearly opti-
mal for longer data word lengths. It is, however, not neces-
sarily a good choice for data words sized 10 and lower,
because it is a full bit of HD worse than the bound.
ITU G.704 [G704] uses a 5-bit polynomial CCITT-5,
0x15 = x5 + x3 + x + 1. Figure 1 shows CCITT-5 as optimal
at length 10. However, CCITT-5 is a full bit of HD worse
that USB-5 at lengths 11-26, and more than a factor of 2
worse than the bound (and USB-5) at longer lengths. ITU
G.704 uses CCITT-5 for a data word length of 3151 bits,