that the most easily guessed typos are never cached, while the
second prevents the caching of typos significantly more guessable
than the real password. We will use 𝑚 = 10 and 𝜎 = 3 unless
otherwise specified; a justification for these parameter choices is
given in Section 6.1. To estimate guessability, we use zxcvbn due
to its accuracy and ease of deployment; one could also use other
strength estimators such as those based on neural networks [22].
Warming up caches. For all of the adaptive caching schemes
described above, the user must make a typo at least once before
it is considered for inclusion in the cache — for example, when
the typo cache is “cold” immediately after registration, no typos
will be tolerated. As such we consider initializing the typo cache T
with probable typos of the registered password; a process we call
“warming up” the cache. We build an empirical typo distribution
using data collected via an MTurk study (detailed in Section 6.1),
and the data released with [8]. We then fill the cache of a given
password with its 𝑡 most likely typos as indicated by the typo
distribution, with their frequency counts set to 0. In contrast to
relaxed checking, these cached typos are chosen on a per password
basis (as opposed to using population-wide corrector functions).
We will always warm up the cache unless otherwise specified.
5 SECURITY OF TYPTOP
In this section, we analyze the security of TypTop within the two
main threat models for password checking schemes described in
Section 3: offline and online attacks.
In the offline setting an attacker gains access to the state of the
checker, so we first analyze TypTop from a cryptographic view-
point, showing that the state does not leak additional information
about the user’s password and login history. We give a formal secu-
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
rity notion that captures this requirement, and provide a reduction
showing that an attacker obtaining access to the state of TypTop
learns nothing about the user’s login behavior (including partial
information about the password) unless they are able to brute-force
guess the password or one of the typos active in the cache. With
this in place, we consider the success probability of an attacker in
such a brute-force attack. We show that for certain classes of error
settings, the maximum advantage of an attacker against TypTop
is no greater than that of an optimal attacker against the exact
checker (who must brute-force guess the exact password in order
to succeed).
We then analyze the online setting, which will be similar to the
security analysis of the relaxed checking approach introduced by
Chatterjee et al. [8]. The results indicate that security loss in the
face of online attacks is minimal, with less security degradation
than the prior approach [8].
In both online and offline settings, our analyses are with respect
to an attacker who we conservatively assume has precise knowledge
of the password distribution. In practice, where precise knowledge
is unlikely, security will be even better than our analyses predict.
5.1 Cryptographic Security
Our security notion formalizes the following intuition. Consider an
adversary that can obtain the state of a password checking system
after registration plus some sequence of login attempts by a user.
Then the adversary should not be able to distinguish this real state
from one drawn at random from the state space of the checker 𝒮,
unless they are able to brute-force guess one of the passwords or
typos allowed by the checking system at the point of compromise.
To this end we introduce some additional notation that will make
defining security and our subsequent analysis simpler. For a given
error setting (𝑝, 𝜏 ), we define an associated login transcript genera-
tor 𝒯 to model a user’s sequence of login attempts. Formally a login
transcript generator 𝒯 is defined to be a randomized algorithm that
takes no input and outputs a sequence of passwords and typos
which represent a user’s selection of their password (the first pass-
word in the sequence) and subsequent login attempts, all sampled
according to the appropriate distributions. A transcript checker
associated to an adaptive password checker Π = (Reg, Chk) (see
Section 3) is an algorithm Checker[Π] that takes as input a se-
quence of passwords and outputs a state value. The canonical such
transcript checker, on input 𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛, runs 𝑠0 ←$ Reg(𝑤0),
and then computes 𝑠𝑖 ←$ Chk( ˜𝑤𝑖, 𝑠𝑖−1) iteratively for 1 ≤ 𝑖 ≤ 𝑛.
It then outputs the final state 𝑠𝑛.
Let Π = (Reg, Chk) be an adaptive password checker and let 𝒯
be a transcript generator. Consider the game OFFDIST of Figure 4.
We define the offline distinguishing advantage of an adversary 𝒜
against Π,𝒯 to be
Advoffdist
Π,𝒯 (𝒜) = 2 ·
OFFDIST𝒜
Π,𝒯 ⇒ true
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12)Pr
(cid:103)
(cid:12)(cid:12)(cid:12)(cid:12)
− 1
2
where the probability is over the random coins used in executing
the game. We will not provide strict definitions of security (e.g.
using asymptotics), but rather measure concretely the advantage
of adversaries given certain running times and query budgets.
The security model proposed here coincides with a one-time
compromise of the system. A stronger model would perhaps allow
adaptive compromises, observing multiple instances of the pass-
word checking state over time. We conjecture that Π meets such a
definition but leave the analysis to future work.
Preliminaries. Before our analysis, we fix a number of further
definitions that will be needed in the proofs.
We implement TypTop with the canonical PBE scheme
PBE[SH, SE] = (E, D) as described in Section 4 which utilizes a
symmetric encryption (SE) scheme SE and random oracle SH; ad-
versaries in security games against this implementation of TypTop
are given access to the random oracle accordingly.
We now define two security notions which we will require for
the underlying SE scheme. The first is a multi-key real-vs-random
security notion for symmetric encryption under chosen plaintext
attack. Let SE = (E, D) be a SE scheme with associated cipher-
text space 𝒞E. The pseudocode description of the security game
MKRORℬ,𝑡
SE appears in Figure 4. This game tasks the attacker with
determining whether it is receiving encryptions of a (chosen) mes-
sage, or a random ciphertext, in a multi-key setting. We define the
distinguishing advantage of an adversary ℬ as
Advmkror
SE
(ℬ, 𝑡) = 2 ·
MKRORℬ,𝑡
SE ⇒ true
− 1
2
(cid:103)
(cid:12)(cid:12)(cid:12)(cid:12) .
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12)Pr
SE
(ℬ′
). By 𝑇
The security game for the familiar single-key real-vs-random
security notion, which we denote SKRORℬ
SE, is obtained by setting
𝑡 = 1 in the above definition. A straightforward hybrid argument
shows that for any symmetric encryption scheme SE and adversary
ℬ in game MKRORℬ,𝑡
SE running in time 𝑇 , there exists an adver-
′ ≈ 𝑇 such that
sary ℬ′ in game SKRORℬ
SE running in time 𝑇
′ ≈ 𝑇 (which we will also
(ℬ, 𝑡) ≤ 𝑡 · Advskror
Advmkror
SE
use in theorem statements below), we mean that the running time of
ℬ′ is the same as that of ℬ plus some qualitatively inconsequential
overheads that can be derived from the proof.
We need one additional security property from our SE scheme:
that of robustness, which ensures that no computationally efficient
adversary can find two keys that both decrypt the same ciphertext.
The notion of robustness for PKE schemes was introduced by Ab-
dalla et al. [1], and later extended in [10, 23]. Security notions and
constructions for robust SE schemes are given by Farshim et al. [11].
We use a variant of their full robustness notion that is strictly weaker
than full robustness, but which suffices for our purposes. Formally,
let ROBℛ
SE be the game that works as follows. The adversary ℛ runs
with no inputs and outputs (k, k′
, 𝑚), i.e., a pair of keys and a mes-
sage. The game then computes 𝑐 ←$ E(k, 𝑚) and 𝑚
, 𝑐).
The game outputs true if k (cid:44) k′ and 𝑚
′ (cid:44) ⊥. We define the advan-
ROBℛ
tage of an adversary ℛ as Advrob
Finally we require a more standard real-vs-random ciphertext
notion of security for a PKE scheme PKE = (𝒦,ℰ,𝒟) with asso-
ciated ciphertext space 𝒞ℰ. The game ROR𝒞
PKE (not shown) first
generates a key pair (𝑝𝑘, 𝑠𝑘) ←$ 𝒦 and a random bit 𝑏. It then runs
adversary 𝒞 (𝑝𝑘), who is given access to an oracle RoR to which
it may query messages 𝑚. The oracle computes 𝑐1 ←$ ℰ (𝑝𝑘, 𝑚)
′, and the
and 𝑐0 ←$ 𝒞ℰ and returns 𝑐𝑏. Finally 𝒞 outputs a bit 𝑏
). We define the distinguishing advantage of
game returns (𝑏 = 𝑏
an adversary 𝒞 as
Advror
SE (ℛ) = Pr
SE ⇒ true
′ ← D(k′
ROR𝒞
PKE (𝒞) = 2 ·
PKE ⇒ true
(cid:103)
.
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12)Pr
(cid:12)(cid:12)(cid:12)(cid:12) .
(cid:102)
(cid:103)
′
− 1
2
6
The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Π,𝒯 :
OFFDIST𝒜
(𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛) ←$ 𝒯
𝑛 ←$ Checker[Π](𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛)
𝑠0
𝑛 ←$ 𝒮
𝑠1
𝑏 ←$ {0, 1}
𝑏′ ← 𝒜(𝑠𝑏
𝑛)
return (𝑏′ = 𝑏)
OFFGUESS𝒢,𝑞
Π,𝒯 :
(𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛) ←$ 𝒯
¯𝑠𝑛 ←$ PChecker[Π](𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛)
parse ¯𝑠𝑛 as (S, T, W, 𝛾)
𝑟 ← 0 ; win ← false
𝒢Test
Return win
Test(𝑖, ˜𝑤)
If (T[𝑖] = ˜𝑤) and (𝑟 ≤ 𝑞) then
win ← true
Return true
𝑟 ← 𝑟 + 1
Return false
MKRORℬ,𝑡
SE :
for 𝑖 = 1, . . . , 𝑡
k𝑖 ←$ {0, 1}𝜅
𝑏 ←$ {0, 1}
𝑏′ ←$ ℬRoR
Return (𝑏′ = 𝑏)
RoR(𝑖, 𝑚)
𝑐1 ←$ E(k𝑖, 𝑚)
𝑐0 ←$ 𝒞E
Return 𝑐𝑏
Figure 4: Cryptographic security games for adaptive password checking schemes, offline guessing attacks, and multi-key real-or-random
symmetric encryption security.
Offline guessing attacks. With this in place, we now define the
eventual target of our reduction: a guessing game in which the
adversary obtains an oracle to make guesses against the password
and its 𝑡 cached typos. Observe that for the canonical transcript
checker Checker[Π], the eventual entries in the typo cache (and
wait list) associated to 𝑠𝑛 depend not only on the input transcript
𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛 but also on whether a ciphertext in the typo cache
is erroneously decrypted to something besides ⊥ when using the
wrong password. We can, however, rule out such an event using
the robustness of the SE scheme (see definition above).
In order to simplify the subsequent analysis, we define a modified
transcript checker PChecker[Π] that evolves the state of Π using
only plaintext values. Crucially, rather than relying on a successful
decryption to determine whether a password / typo lies in the cache,
we may now simply compare the input to the plaintext cache values,
thereby eliminating the negligible probability of erroneous state
updates. The pseudocode for PChecker[Π] is given in Figure 5.
Π,𝒯
The game OFFGUESS𝒢,𝑞
(𝒢, 𝑞) = Pr[OFFGUESS𝒢,𝑞
Π,𝒯 is given in Figure 4. The guessing ad-
vantage of an adversary 𝒢 who makes at most 𝑞 queries to the Test
Π,𝒯 ⇒ true].
oracle is defined as Advoffguess
The transcript generator and plaintext checker are first used to
sample a set of cache values; the adversary succeeds if he can
guess any password or typo which lies in the cache. Note that this
game requires the adversary to specify which password each guess
should be checked against. We measure the complexity of guessing
adversaries in terms of the number of Test queries they make.
We assume without loss of generality that all adversaries make
legitimate queries in their respective games (i.e., with values inside
the appropriate domains, and with an index in the range [0, 𝑡] for
MKROR and OFFGUESS).
The analysis. Let Π = (Reg, Chk) denote TypTop’s password
checker, and fix some transcript generator 𝒯 . Our analysis will
show that the OFFDISTΠ,𝒯 security of Π reduces to the guessing