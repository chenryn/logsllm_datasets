{
int n, n2, n3;
/* 该程序有一个语义错误 */
n = 5;
n2 = n * n;
n3 = n2 * n2;
96
printf("n = %d, n squared = %d, n cubed = %d\n", n, 
n2, n3);
return 0;
}
该程序的输出如下：
n = 5, n squared = 25, n cubed = 625
如果对简单的立方比较熟悉，就会注意到 625 不对。下一步是跟踪程序
的执行步骤，找出程序如何得出这个答案。对于本例，通过查看代码就会发
现其中的错误，但是，还应该学习更系统的方法。方法之一是，把自己想象
成计算机，跟着程序的步骤一步一步地执行。下面，我们来试试这种方法。
main()函数体一开始就声明了3个变量：n、n2、n3。你可以画出3个盒子
并把变量名写在盒子上来模拟这种情况（见图2.6）。接下来，程序把5赋给
变量n。你可以在标签为n的盒子里写上5。接着，程序把n和n相乘，并把乘
积赋给n2。因此，查看标签为n的盒子，其值是5，5乘以5得25，于是把25放
进标签为 n2 的盒子里。为了模拟下一条语句（n3 = n2 * n2），查看 n2 盒
子，发现其值是 
25。25乘以25得625，把625放进标签为n3的盒子。原来如
此！程序中计算的是n2的平方，不是用n2乘以n得到n的3次方。
对于上面的程序示例，检查程序的过程可能过于繁琐。但是，用这种方
法一步一步查看程序的执行情况，通常是发现程序问题所在的良方。
97
图2.6 跟踪程序的执行步骤
2.7.3 程序状态
通过逐步跟踪程序的执行步骤，并记录每个变量，便可监视程序的状
态。程序状态（program state）是在程序的执行过程中，某给定点上所有变
量值的集合。它是计算机当前状态的一个快照。
我们刚刚讨论了一种跟踪程序状态的方法：自己模拟计算机逐步执行程
序。但是，如果程序中有10000次循环，这种方法恐怕行不通。不过，你可
以跟踪一小部分循环，看看程序是否按照预期的方式执行。另外，还要考虑
一种情况：你很可能按照自己所想去执行程序，而不是根据实际写出来的代
码去执行。因此，要尽量忠实代码来模拟。
定位语义错误的另一种方法是：在程序中的关键点插入额外的 
printf()
语句，以监视制定变量值的变化。通过查看值的变化可以了解程序的执行情
况。对程序的执行满意后，便可删除额外的 printf()语句，然后重新编译。
检测程序状态的第3种方法是使用调试器。调试器（debugger）是一种
程序，让你一步一步运行另一个程序，并检查该程序变量的值。调试器有不
98
同的使用难度和复杂度。较高级的调试器会显示正在执行的源代码行号。这
在检查有多条执行路径的程序时很方便，因为很容易知道正在执行哪条路
径。如果你的编译器自带调试器，现在可以花点时间学会怎么使用它。例
如，试着调试一下程序清单2.4。
99
2.8 关键字和保留标识符
关键字是C语言的词汇。它们对C而言比较特殊，不能用它们作为标识
符（如，变量名）。许多关键字用于指定不同的类型，如 int。还有一些关
键字（如，if）用于控制程序中语句的执行顺序。在表 2.2 中所列的C语言关
键字中，粗体表示的是C90标准新增的关键字，斜体表示的C99标准新增的
关键字，粗斜体表示的是C11标准新增的关键字。
表2.2 ISO C关键字
续表
如果使用关键字不当（如，用关键字作为变量名），编译器会将其视为
语法错误。还有一些保留标识符（reserved identifier），C语言已经指定了它
们的用途或保留它们的使用权，如果你使用这些标识符来表示其他意思会导
致一些问题。因此，尽管它们也是有效的名称，不会引起语法错误，也不能
随便使用。保留标识符包括那些以下划线字符开头的标识符和标准库函数
名，如printf()。
100
2.9 关键概念
编程是一件富有挑战性的事情。程序员要具备抽象和逻辑的思维，并谨
慎地处理细节问题（编译器会强迫你注意细节问题）。平时和朋友交流时，
可能用错几个单词，犯一两个语法错误，或者说几句不完整的句子，但是对
方能明白你想说什么。而编译器不允许这样，对它而言，几乎正确仍然是错
误。
编译器不会在下面讲到的概念性问题上帮助你。因此，本书在这一章中
介绍一些关键概念帮助读者弥补这部分的内容。
在本章中，读者的目标应该是理解什么是C程序。可以把程序看作是你
希望计算机如何完成任务的描述。编译器负责处理一些细节工作，例如把你
要计算机完成的任务转换成底层的机器语言（如果从量化方面来解释编译器
所做的工作，它可以把1KB的源文件创建成60KB的可执行文件；即使是一
个很简单的C程序也要用大量的机器语言来表示）。由于编译器不具有真正
的智能，所以你必须用编译器能理解的术语表达你的意图，这些术语就是C
语言标准规定的形式规则（尽管有些约束，但总比直接用机器语言方便得
多）。
编译器希望接收到特定格式的指令，我们在本章已经介绍过。作为程序
员的任务是，在符合 C标准的编译器框架中，表达你希望程序应该如何完成
任务的想法。
101
2.10 本章小结
C程序由一个或多个C函数组成。每个C程序必须包含一个main()函数，
这是C程序要调用的第1个函数。简单的函数由函数头和后面的一对花括号
组成，花括号中是由声明、语句组成的函数体。
在C语言中，大部分语句都以分号结尾。声明为变量创建变量名和标识
该变量中储存的数据类型。变量名是一种标识符。赋值表达式语句把值赋给
变量，或者更一般地说，把值赋给存储空间。函数表达式语句用于调用指定
的已命名函数。调用函数执行完毕后，程序会返回到函数调用后面的语句继
续执行。
printf()函数用于输出想要表达的内容和变量的值。
一门语言的语法是一套规则，用于管理语言中各有效语句组合在一起的
方式。语句的语义是语句要表达的意思。编译器可以检测出语法错误，但是
程序里的语义错误只有在编译完之后才能从程序的行为中表现出来。检查程
序是否有语义错误要跟踪程序的状态，即程序每执行一步后所有变量的值。
最后，关键字是C语言的词汇。
102
2.11 复习题
复习题的参考答案在附录A中。
1.C语言的基本模块是什么？
2.什么是语法错误？写出一个英语例子和C语言例子。
3.什么是语义错误？写出一个英语例子和C语言例子。
4.Indiana Sloth编写了下面的程序，并征求你的意见。请帮助他评定。
include studio.h
int main{void} /* 该程序打印一年有多少周 /*
(
int s
s := 56;
print(There are s weeks in a year.);
return 0;
5.假设下面的4个例子都是完整程序中的一部分，它们都输出什么结
果？
a. printf("Baa Baa Black Sheep.");
printf("Have you any wool?\n");
b. printf("Begone!\nO creature of lard!\n");
c.printf("What?\nNo/nfish?\n");
103
d.int num;
num = 2;
printf("%d + %d = %d", num, num, num + num);
6.在main、int、function、char、=中，哪些是C语言的关键字？
7.如何以下面的格式输出变量words和lines的值（这里，3020和350代表
两个变量的值）？
There were 3020 words and 350 lines.
8.考虑下面的程序：
#include 
int main(void)
{
int a, b;
a = 5;
b = 2; /* 第7行 */
b = a; /* 第8行 */
a = b; /* 第9行 */
printf("%d %d\n", b, a);
return 0;
}
104
请问，在执行完第7、第8、第9行后，程序的状态分别是什么？
9.考虑下面的程序：
#include 
int main(void)
{
int x, y;
x = 10;
y = 5;   /* 第7行 */
y = x + y; /*第8行*/
x = x*y;  /*第9行*/
printf("%d %d\n", x, y);
return 0;
}
请问，在执行完第7、第8、第9行后，程序的状态分别是什么？
105
2.12 编程练习
纸上得来终觉浅，绝知此事要躬行。读者应该试着编写一两个简单的程
序，体会一下编写程序是否和阅读本章介绍的这样轻松。题目中会给出一些
建议，但是应该尽量自己思考这些问题。一些编程答案练习的答案可在出版
商网站获取。
1.编写一个程序，调用一次 printf()函数，把你的姓名打印在一行。再调
用一次 printf()函数，把你的姓名分别打印在两行。然后，再调用两次printf()
函数，把你的姓名打印在一行。输出应如下所示（当然要把示例的内容换成
你的姓名）：
2.编写一个程序，打印你的姓名和地址。
3.编写一个程序把你的年龄转换成天数，并显示这两个值。这里不用考
虑闰年的问题。
4.编写一个程序，生成以下输出：
For he's a jolly good fellow!
For he's a jolly good fellow!
For he's a jolly good fellow!
Which nobody can deny!
除了 
main()函数以外，该程序还要调用两个自定义函数：一个名为
106
jolly()，用于打印前 
3 
条消息，调用一次打印一条；另一个函数名为
deny()，打印最后一条消息。
5.编写一个程序，生成以下输出：
Brazil, Russia, India, China
India, China,
Brazil, Russia
除了main()以外，该程序还要调用两个自定义函数：一个名为br()，调
用一次打印一次“Brazil, Russia”；另一个名为ic()，调用一次打印一次“India,
China”。其他内容在main()函数中完成。
6.编写一个程序，创建一个整型变量toes，并将toes设置为10。程序中还
要计算toes的两倍和toes的平方。该程序应打印3个值，并分别描述以示区
分。
7.许多研究表明，微笑益处多多。编写一个程序，生成以下格式的输
出：
Smile!Smile!Smile!
Smile!Smile!
Smile!
该程序要定义一个函数，该函数被调用一次打印一次“Smile!”，根据程
序的需要使用该函数。
8.在C语言中，函数可以调用另一个函数。编写一个程序，调用一个名
为one_three()的函数。该函数在一行打印单词“one”，再调用第2个函数
two()，然后在另一行打印单词“three”。two()函数在一行显示单词“two”。
main()函数在调用 one_three()函数前要打印短语“starting now:”，并在调用完
107
毕后显示短语“done!”。因此，该程序的输出应如下所示：
starting now:
one
two
three
done!
[1].原书图中叙述有误。根据C11标准，C语言有6种语句，已在图中更正。
——译者注
[2].C语言是通过赋值运算符而不是赋值语句完成赋值操作。根据C标准，C
语言并没有所谓的“赋值语句”，本书及一些其他书籍中提到的“赋值语句”实
际上是表达式语句（C语言的6种基本语句之一）。本书把“赋值语句”均译
为“赋值表达式语句”，以提醒初学者注意。——译者注
[3].在C语言中，return语句是一种跳转语句。——译者注
[4].市面上许多书籍（包括本书）都把这种语句叫作“函数调用语句”，但是
历年的C标准中从来没有函数调用语句！值得一提的是，函数调用本身是一
个表达式，圆括号是运算符，圆括号左边的函数名是运算对象。在C11标准
中，这样的表达式是一种后缀表达式。在表达式末尾加上分号，就成了表达
式语句。请初学者注意，这样的“函数调用语句”实质是表达式语句。本书的
错误之处已在翻译过程中更正。——译者注
[5].音寻，也称为寻。航海用的深度单位，1英寻=6英尺=1.8米，通常用在海
图上测量水深。——译者注
[6].要理解该句子存在语法错误，需要具备基本的英文语法知识。——译者
注
108
第3章 数据和C
本章介绍以下内容：
关键字：int 
、short、long、unsigned、char、float、double、_Bool、
_Complex、_Imaginary
运算符：sizeof()
函数：scanf()
整数类型和浮点数类型的区别
如何书写整型和浮点型常数，如何声明这些类型的变量
如何使用printf()和scanf()函数读写不同类型的值
程序离不开数据。把数字、字母和文字输入计算机，就是希望它利用这
些数据完成某些任务。例如，需要计算一份利息或显示一份葡萄酒商的排序
列表。本章除了介绍如何读取数据外，还将教会读者如何操控数据。
C 语言提供两大系列的多种数据类型。本章详细介绍两大数据类型：整
数类型和浮点数类型，讲解这些数据类型是什么、如何声明它们、如何以及
何时使用它们。除此之外，还将介绍常量和变量的区别。读者很快就能看到
第1个交互式程序。
109
3.1 示例程序
本章仍从一个简单的程序开始。如果发现有不熟悉的内容，别担心，我
们稍后会详细解释。该程序的意图比较明了，请试着编译并运行程序清单
3.1中的源代码。为了节省时间，在输入源代码时可省略注释。
程序清单3.1 platinum.c程序
/* platinum.c -- your weight in platinum */
#include 
int main(void)
{
float weight;  /* 你的体重       */
float value;  /* 相等重量的白金价值   */