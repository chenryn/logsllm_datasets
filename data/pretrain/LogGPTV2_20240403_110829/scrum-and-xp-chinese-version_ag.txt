我指的是需要完成但又不属于可交付物的东西，跟任何故事都没有 直接关联，不会给产品负责人带来直接的价值。
我们把它叫做“技术故事”。
例如：
		安装持续构建服务器 
	o 	为什么要完成它：因为它会节省开发人员的大量时 	间，到迭代结束的时候，集成也不太容易出现重大 	问题。
	编写系统设计概览
	o 	为什么要完成它：因为开发人员常常会忘记系统的 	整体设计，写出与之不一致的代码。团队需要有个
38 | 硝烟中的 SCRUM 和 XP38 | 硝烟中的 SCRUM 和 XP
描述整体概况的文档，保证每个人对设计都有同样 的理解。
|  | 重构 DAO 层 | 重构 DAO 层 |
|---|---|---|
|  |o |为什么要完成它：因为 DAO 层代码已经乱成一团 |
|  |了。混乱带来了本可以避免的 bug，每个人的时间 |了。混乱带来了本可以避免的 bug，每个人的时间 |
都在被无谓的消耗。清理代码可以节省大家的时 间，提高系统的健壮性。
|  | 升级 Jira（bug 跟踪工具） | 升级 Jira（bug 跟踪工具） |
|---|---|---|
|  |o |为什么要完成它：当前的版本 bug 狂多，又很慢， |
升级以后可以节省大家时间。
按照一般的观点来看，这些算是故事吗？或者是一些跟任何故事都 没有直接关联的任务？谁来给它们划分优先级？产品负责人应该 参与其中吗？我们尝试过各种处理方式。我们曾经把它们跟别的故事一样，当作 第一等的故事。但这样并不好。产品负责人来对产品 backlog 划分 优先级的时候，就像在拿苹果跟桔子作对比一样。实际上，出于显 而易见的原因，技术故事常常会因为某种原因给设置一个低优先 级，例如：“嘿，兄弟们，我知道持续构建服务器很重要，不过让 我们先来完成一些可以带来收入的特性吧，然后再来弄那些技术上 的东西，行不？”
有些时候，产品负责人的做法是对的，但这只是少数情况。我们得 出的结论是，产品负责人往往不能对此做出正确的权衡。所以我们 采取了下面这些做法：
1)试着避免技术故事。努力找到一种方式，把技术故事变成 可以衡量业务价值的普通故事。这样有助于产品负责人做 出正确的权衡。
2)如果无法把技术故事转变成普通故事，那就看看这项工作 能不能当作另一个故事中的某个任务。例如，“重构 DAO 层”可以作为“编辑用户”中的一个任务，因为这个故事 会涉及到 DAO 层。我们怎样制定 SPRINT 计划| 39 
3)如果以上二者都不管用，那就把它定义为一个技术故事，用另外一个单独的列表来存放。产品负责人能看到它，但 是不能编辑它。用“投入程度”和“预估生产率”这两个 参数来跟产品负责人协商，从 sprint 里拨出一些时间来完 成这些技术故事。
下面是一个示例（这段对话跟我们某个 sprint 计划会议中发生过的 一幕似曾相识）。
	团队：“我们要完成一些内部的技术工作。也许要从我们 	的时间里抽出来 10%，也就是把投入程度从 75%降低到 	65%，你看行吗？”
 产品负责人：“不行！我们没那个时间了！”
团队：“嗯……那看看上一个 sprint 吧（大家的头全都转 向了白板上的生产率草图）。我们估算的生产率是 80，但 实际才有 40，没错吧？”
产品负责人：“没错！所以我们没时间干那些内部的技术
	活了！我们需要新功能！”产品负责人：“没错！所以我们没时间干那些内部的技术
	活了！我们需要新功能！”
	团队：“呃，我们的生产率变得这么糟糕的原因就是，构 	造可以测试的稳定版本占用了太多时间。
	产品负责人：“嗯，那然后呢？”
	团队：“唔，如果我们不做点什么的话，生产率还会继续 	这么烂下去。”
	产品负责人：“嗯，接着说？”
	团队：“所以我们建议在这个 sprint 里抽出大概 10%的时 	间来搭一个持续构建服务器，完成相关的一些事情，这样
 就不会再受集成的折磨。接下来，每个 sprint 里面，我们 的生产率都会提高至少 20%！”
产品负责人：“啊？真的吗？那为什么上个 sprint 我们没
	这么干？！”
	团队：“嗯……因为你不同意……”
	产品负责人：“哦，嗯……那好吧，这主意听上去不错，	开始干吧！”
40 | 硝烟中的 SCRUM 和 XP40 | 硝烟中的 SCRUM 和 XP
当然，还可以把产品负责人排除在外，或者是告诉他一个不可协商
的投入程度。但你不妨先尝试一下，让你们的想法达成一致。
如果产品负责人能力比较强，也能听进别人的意见（这一点上，我
们比较幸运），那我建议你最好还是尽量让他知道所有的事情，让
他制定一切工作的优先级。透明也是 Scrum 的核心价值，不是吗？
Bug 跟踪系统 vs. 产品 backlog 
这个问题有点难搞。用 Excel 来管理产品 backlog 很不错，不过你 仍然需要一个 bug 跟踪系统，这时 Excel 就无奈了。我们用的是 Jira。
那我们怎么把 Jira 上的 issue 带到 sprint 计划会议上来呢？我的意 思是，如果无视这些 issue，只关心故事，这可没什么好处。
我们试过几种办法：我们试过几种办法：
1)产品负责人打印出 Jira 中优先级最高的一些条目，带到 sprint 计划会议中，跟其他故事一起贴到墙上（因此就暗 暗地指明了这些 issue 相对其他故事的优先级）。
2)产品负责人创建一些指向 Jira 条目的故事。例如“修复那 几个后台报表最严重的 bug，序号是 Jira-124、Jira-126，还 有 Jira-180”。
3)修复 bug 被当作 sprint 以外的工作，也就是说，团队会保 持一个足够低的投入程度（例如 50%），从而保证他们有 时间来修复 bug。然后我们就可以简单假设，在每一个 sprint 中，团队都会用一些时间来修复 Jira 上报告的 bug。
4)把产品 backlog 放到 Jira 上（也就是放弃 Excel）。把 bug
与其他故事同等看待。
我们没有发现哪种策略最适合我们，实际来看，团队与团队、sprint 与 sprint 之间的做法都会有差异。不过我还是倾向于使用第一种方案。既简单，效果又好。
我们怎样制定 SPRINT 计划| 41 
Sprint 计划会议终于结束了！
哇塞，没想到这一章会这么长！我想这应该可以表示出我的个人观 点——sprint 计划会议是 Scrum 中最重要的活动。在这里投入大量 努力，保证它顺利完成，后面的工作就会轻松很多。
如果每个人（所有的团队成员和产品负责人）离开会场时都面带微
笑，第二天醒来时面带微笑，在第一次的每日例会上面带微笑，那 sprint 计划会议就是成功的。
当然，什么事情都有可能出现问题，但至少你不能归咎于 sprint 计 划:o)
42 | 硝烟中的 SCRUM 和 XP
5 
我们怎样让别人了解我们的 sprint 
我们要让整个公司了解我们在做些什么，这件事情至关重要。否则 其他人就会发出抱怨，甚或对我们的工作做出臆断。
我们为此使用“sprint 信息页”。我们为此使用“sprint 信息页”。
我们怎样让别人了解我们的 SPRINT| 43 
有时我们会把每个故事该如何演示也包括进来。
Sprint 计划会议一结束，Scrum master 就创建这个页面，把它放到 wiki 上，给整个公司发一个“垃圾”邮件。
我们在 wiki 上还有个“dashboard”页面，链向所有正在进行的 sprint。
此外，Scrum master 还会把 sprint 信息页打印出来，贴到团队房间 外面的墙上。路过的每个人都可以阅读这张纸，了解这个团队所做 的事情。因为其中还包括了每日例会的时间地点，所以他也能知道 到哪里去了解更多信息。
Sprint 接近尾声时，Scrum master 会把即将来临的演示告知每个人。
44 | 硝烟中的 SCRUM 和 XP
有了这一切以后，就没人还能找借口说不知道你们的工作状态了。
6有了这一切以后，就没人还能找借口说不知道你们的工作状态了。
6 
我们怎样编写 sprint backlog 
你已经走了这么远了？嗯，干得好。
现在我们已经完成了 sprint 计划会议，整个世界都了解了我们下一 个熠熠生辉的 sprint。Scrum master 现在应该创建 sprint backlog 了。它应该在 sprint 计划会议之后，第一次每日例会之前完成。
Sprint backlog 的形式
我们曾经尝试过用多种形式来保存 sprint backlog，包括 Jira、Excel，还有挂在墙上的任务板。开始我们主要使用 Excel，有很多公开的 Excel 模板可以用来管理 sprint backlog——包括自动生成的燃尽图 等等。在如何改良基于 Excel 的 sprint backlog 方面，我有很多想法，
但此处暂且不提，我也不会在这里举例。但此处暂且不提，我也不会在这里举例。
下面要仔细描述的，是我们发现管理 sprint backlog 最有效的形式
——挂在墙上的任务板！
找一面尚未使用或者充满无用信息（如公司 logo、陈旧图表或者丑
陋的涂鸦）的大墙。清理墙壁（除非不得已才去请求别人许可）。
在墙上贴上一张很大很大的纸（至少 2x2 平方米，大团队需要 3x2
平方米）。然后这样规划：
46 | 硝烟中的 SCRUM 和 XP