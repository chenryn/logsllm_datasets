### 6.2. Implementation Choices

We implemented the pairing-based handshake protocol as described in Figure 1. Additionally, we developed a secure transport layer protocol that adheres to the TLS specification. This includes generating MAC and cipher keys from the master secret in the same manner as TLS.

The security parameters we use are the lengths of two primes, \( p \) and \( q \). Typical parameters are 1024 bits for \( p \) and 160 bits for \( q \). We generate these primes such that \( p = 12qr - 1 \) (where \( r \) is large enough to ensure \( p \) is of the correct size).

The elliptic curve \( E \) we use is defined by the equation \( y^2 = x^3 + 1 \). For a detailed discussion of the properties of this curve, see [6]. To implement the hash function \( H \) that maps random strings to points in \( E(F_p)[q] \), we seed a pseudorandom number generator with the string and then generate a pseudorandom point in \( E(F_p)[q] \).

The bilinear map \( \hat{e} \) we used is the Tate pairing, with some modifications and performance improvements as described in [3, 6].

### 6.3. Measurements

We tested our 100% Java implementation on a 1.8 GHz Pentium 4. The table below shows the handshake times for various parameter values, alongside RSA key sizes that provide comparable security.

| Size of \( q \) | Size of \( p \) | Handshake Time | Comparable RSA Key Size |
|-----------------|-----------------|----------------|-------------------------|
| 120 bits        | 512 bits        | 0.8 sec        | 512 bits                |
| 160 bits        | 1024 bits       | 2.2 sec        | 1024 bits               |
| 200 bits        | 2048 bits       | 11.8 sec       | 2048 bits               |

These times can be reduced by slightly altering the secret handshake protocol. The current protocol, designed to minimize the number of rounds, requires parties to compute the results \( V_i \) of their respective Tate pairings in series. By rearranging the protocol to allow these computations to be performed in parallel, we can add one additional message but approximately halve the running time.

We believe these running times can be significantly improved. The protocol's running time is dominated by the computation of the Tate pairing, and we have not yet implemented some of the performance enhancements suggested in [3]. Furthermore, our current implementation is purely written in Java. Future optimized implementations are expected to be comparable to RSA-based TLS handshakes.

### 7. Practical Issues

#### 7.1. User and Role Authorization

When a new user wants to assume a certain role in a group, they receive a pseudonym and a secret point for that role from the administrator. If the new user needs authorization to assume the role, the administrator must perform user authorization. The specifics of this process are orthogonal to the schemes presented in this paper and are outside its scope.

**SHORT-LIVED CREDENTIALS:** To address the consistency problem, we can use short-lived credentials, an idea borrowed from [6]. In addition to folding the user’s role into their secret point (as described in Section 4.3), the administrator can also fold in the date at which the secret point is valid, as shown in Figure 4. With a slight modification in the secret-handshake protocol, users can ensure that their peers use fresh keys during the handshake.

Although users obtain new secret points at regular intervals from the administrator, they do not need to re-authenticate themselves. Using identity-based encryption or another suitable scheme, the administrator can publish fresh credentials for unrevoked users, encrypted under their current pseudonym.

#### 7.2. Revocation

If a user's system is compromised and their secret point is stolen, the thief can impersonate the compromised user and authenticate other users in the system, learning their roles. To address this, we need a revocation system.

**PUBLIC-KEY REVOCATION LISTS:** In Section 4.2, we explain how the administrator can publish public-key revocation lists to indicate which public keys should no longer be trusted. This scales relatively well with the number of users (requiring work proportional to the number of revoked users) but introduces the well-known consistency problem for Certificate Revocation Lists (CRLs). We need to ensure that all users have an up-to-date and correct view of the current public-key revocation lists.

While we have proven that an observer of a secret handshake between users \( U_1 \) and \( U_2 \) cannot determine whether they belong to the same group at the end of the protocol, the observer can learn that \( U_1 \) and \( U_2 \) executed our protocol. If our scheme is implemented as a TLS cipher suite, the parties will exchange a cipher suite designator that clearly indicates their intention to engage in a secret handshake. If a government makes it illegal to perform our protocol, with penalties similar to those for belonging to certain illegal groups, using our secret handshake protocol could create more problems than not using it.

Additionally, even though the observer cannot tell whether \( U_1 \) and \( U_2 \) belong to the same group at the end of the protocol, they may learn more information by monitoring \( U_1 \) and \( U_2 \)'s communications after the protocol execution. If they continue to communicate, they were likely able to authenticate each other as members of the same group. Furthermore, if it is known that only one group \( G \) uses our secret handshake scheme, both \( U_1 \) and \( U_2 \) must belong to that group.

These and other practical deployment issues can be mitigated by using some form of anonymous communication, which makes it difficult to determine exactly who is engaging in a secret handshake. However, anonymizers can be subject to the same caveats (everyone must use them, they must not be illegal, etc.) as secret handshake protocols.

In summary, our secret handshake schemes provide the best protection when many groups use them. For example, if it becomes a TLS cipher suite routinely used for secure discovery, the above concerns would be alleviated.

### 8. Conclusion

A secret-handshake mechanism allows members of a group to authenticate each other secretly. Because group members often play different roles, a handshake scheme that authenticates not only group membership but also roles is highly desirable.

In this paper, we proposed a secret handshake scheme that enables group members to authenticate each other and their roles. Our protocol uses Weil or Tate pairings on elliptic curves, leveraging their bilinearity to compute unique shared secret keys during a handshake.

We also proposed a formal definition of secure secret handshakes and outlined a proof that our scheme is secure under this definition.

We are implementing our protocol as a new cipher suite for TLS. Preliminary measurements show promising performance, with security parameters comparable to 1024-bit RSA yielding practical handshake timings.

### References

[1] M. Abadi. Private authentication. In Proceedings of the Workshop on Privacy Enhancing Technologies (PET 2002), San Francisco, CA, April 2002.

[2] N. Baric and B. Pfitzmann. Collision-free accumulators and fail-stop signature schemes without trees. In Proc. International Advances in Cryptology Conference – EUROCRYPT '97, pages 480–494, 1997.

[3] P. S. L. M. Barreto, H. Y. Kim, B. Lynn, and M. Scott. Efficient algorithms for pairing-based cryptosystems. In Advances in Cryptology - CRYPTO 2002. Springer Verlag, August 2002.

[4] M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In First ACM Conference on Computer and Communications Security, pages 62–73, Fairfax, 1993. ACM.

[5] J. Benaloh and M. de Mare. One-way accumulators: A decentralized alternative to digital signatures. In T. Helleseth, editor, Advances in Cryptology – EUROCRYPT '93, volume 765 of Lecture Notes in Computer Science, pages 274–285. International Association for Cryptologic Research, Springer-Verlag, Berlin Germany, 1994. Extended abstract.

[6] D. Boneh and M. Franklin. Identity-based encryption from the Weil pairing. In Proc. CRYPTO 01, pages 213–229. Springer-Verlag, 2001. LNCS 2139.

[7] D. Boneh, B. Lynn, and H. Shacham. Short signatures from the Weil pairing. In ASIACRYPT01: Advances in Cryptology – ASIACRYPT: International Conference on the Theory and Application of Cryptology. LNCS, Springer-Verlag, 2001.

[8] S. Brands. Restrictive binding of secret-key certificates. In L. C. Guillou and J.-J. Quisquater, editors, Advances in Cryptology—EUROCRYPT 95, volume 921 of Lecture Notes in Computer Science, pages 231–247. Springer-Verlag, 21–25 May 1995.

[9] J. Camenisch and A. Lysyanskaya. Efficient non-transferable anonymous multishow credential system with optional anonymity revocation. In Proc. EUROCRYPT 00, pages 93–118. Springer-Verlag, 2001. LNCS 2045.

[10] J. Camenisch and A. Lysyanskaya. Dynamic accumulators and application to efficient revocation of anonymous credentials. In Advances in Cryptology Crypto 2002, pages 61–76, 2002.

[11] J. Camenisch and M. Stadler. Efficient group signatures for large groups. In Advances in Cryptology Crypto '97, pages 410–424, 1997.

[12] J. C. Cha and J. H. Cheon. An identity-based signature from gap Diffie-Hellman groups. In Proceedings of the International Workshop on Practice and Theory in Public Key Cryptography (PKC 2003), Miami, FL, 2003.

[13] D. Chaum. Security without identification: Transaction systems to make big brother obsolete. Communications of the ACM, 28(10):1030–1044, Oct 1985.

[14] D. Chaum and E. van Heijst. Group signatures. In Proc. EUROCRYPT 91, pages 257–265. Springer-Verlag, 1991. LNCS 547.

[15] B. Chor, A. Fiat, and M. Naor. Tracing traitors. In Y. G. Desmedt, editor, Proc. CRYPTO 94, pages 257–270. Springer, 1994. Lecture Notes in Computer Science No. 839.

[16] T. Dierks and C. Allen. The TLS Protocol Version 1.0. IETF - Network Working Group, The Internet Society, January 1999. RFC 2246.

[17] W. Diffie and M. E. Hellman. Multiuser cryptographic techniques. In Proc. AFIPS 1976 National Computer Conference, pages 109–112, Montvale, N.J., 1976. AFIPS.

[18] M. J. G. Ateniese, J. Camenisch, and G. Tsudik. A practical and provably secure coalition-resistant group signature scheme. In Advances in Cryptology Crypto 2000, pages 255–270, 2000.

[19] M. Goodrich, A. Schwerin, and R. Tamassia. An efficient dynamic and distributed cryptographic accumulator, 2000.

[20] D. Harkins and D. Carrel. The Internet Key Exchange (IKE). IETF - Network Working Group, The Internet Society, November 1998. RFC 2409.

[21] F. Hess. Exponent group signature schemes and efficient identity-based signature schemes based on pairings. Cryptology ePrint Archive, Report 2002/012, 2002. http://eprint.iacr.org/.

[22] M. Jakobsson, K. Sako, and R. Impagliazzo. Designated verifier proofs and their applications. In U. Maurer, editor, Advances in Cryptology—EUROCRYPT 96, volume 1070 of Lecture Notes in Computer Science, pages 143–154. Springer-Verlag, 12–16 May 1996.

[23] J. Kilian and E. Petrank. Identity escrow. In Advances in Cryptology Crypto '98, pages 169–185, 1998.

[24] B. Lynn. Authenticated identity-based encryption. http://eprint.iacr.org/2002/072.

[25] A. Lysyanskaya, R. Rivest, A. Sahai, and S. Wolf. Pseudonym systems. In Selected Areas of Cryptography 1999, pages 184–199, 1999.

[26] R. Rivest, A. Shamir, and Y. Tauman. How to leak a secret. In Advances in Cryptology Asiacrypt 2001, pages 552–565, 2001.

[27] R. Sakai, K. Ohgishi, and M. Kasahara. Cryptosystems based on pairing. In Proceedings of the Symposium on Cryptography and Information Security (SCIS 2000), Okinawa, Japan, January 2000.

[28] A. Shamir. Identity-based cryptosystems and signature schemes. In G. R. Blakley and D. C. Chaum, editors, Proc. CRYPTO 84, pages 47–53. Springer, 1985. Lecture Notes in Computer Science No. 196.

[29] E. Verheul. Self-blindable credential certificates from the Weil pairing. In Advances in Cryptology Asiacrypt 2001, pages 533–551, 2001.

[30] K. Zhang and R. Needham. A private matchmaking protocol. http://citeseer.nj.nec.com/71955.html.

### A. Security Analysis

In this section, we outline proof sketches for the security claims made in Section 5.2. We rely on standard cryptographic assumptions, working in the random oracle model [4] and assuming that the Bilinear Diffie-Hellman Problem (BDH) is hard for the elliptic curves we use.

**Hardness of BDH Problem:** We say that the Bilinear Diffie-Hellman Problem (BDH) is hard if, for all probabilistic, polynomial-time algorithms \( B \),

\[
\text{Adv}_{\text{BDH}}^B := \Pr[B(P, aP, bP, cP) = \hat{e}(P, P)^{abc}]
\]

is negligible in the security parameter. This probability is taken over a random choice of \( P \in G_1 \) and \( a, b, c \in \{1, \ldots, q\} \).