multipart-parse.md
5/19/2021
1 / 33
从RFC规范看如何绕过waf上传表单
背景介绍
传统waf以规则匹配为主，如果只是⽆差别的使⽤规则匹配整个数据包，当规则数量逐渐变多，会造成更多性能
损耗，当然还会发⽣误报情况。为了能够解决这些问题，需要对数据包进⾏解析，进⾏精准位置的规则匹配。
正常业务中上传表单使⽤普遍，不仅能够传参，还可以进⾏文件的上传，当然这也是⼀个很好的攻击点，waf想
要能够精准拦截针对表单的攻击，需要进⾏multipart/form-data格式数据的解析，并针对每个部分，如参数
值，文件名，文件内容进⾏针对性的规则匹配拦截。
虽然RFC规范了multipart/form-data相关的格式与解析，但是由于不同后端程序的实现机制不同，⽽且RFC相关
文档也会进⾏增加补充，最终导致解析⽅式各不相同。对于waf来说，很难做到对各个后端程序进⾏定制化解
析，尤其是云waf更加⽆法实现。
所以本文主要讨论，利⽤waf和后端程序对multipart/form-data的解析差异，造成对waf的bypass。
multipart/form-data相关RFC:
基于表单的文件上传: RFC1867
multipart/form-data: RFC7578
Multipart Media Type: RFC2046#section-5.1
解析环境
Flask/Werkzeug解析环境：docker/httpbin
Java解析环境：Windows10 pro 20H2/Tomcat9.0.35/jdk1.8.0_271/commons-fileupload
Java输出代码：
String result = ""; 
DiskFileItemFactory factoy = new DiskFileItemFactory(); 
ServletFileUpload sfu = new ServletFileUpload(factoy); 
try { 
    List list = sfu.parseRequest(req); 
    for (FileItem fileItem : list) { 
        if (fileItem.getName() == null) { 
            result += fileItem.getFieldName() + ": " + fileItem.getString() + 
"\n"; 
        } else { 
            result += "filename: " + fileItem.getName() + "  " + 
fileItem.getFieldName() + ": " + fileItem.getString() + "\n"; 
        } 
    } 
} catch (FileUploadException e) { 
    // TODO Auto-generated catch block 
    e.printStackTrace(); 
} 
multipart-parse.md
5/19/2021
2 / 33
PHP解析环境：Ubuntu18.04/Apache2.4.29/PHP7.2.24
PHP输出代码：
        "[^"\\]*(?:\\.[^"\\]*)*"  # quoted string 
    | 
        [^\s;,=*]+  # token 
    ) 
    (?:\*(?P\d+))?  # *1, optional continuation index 
    \s* 