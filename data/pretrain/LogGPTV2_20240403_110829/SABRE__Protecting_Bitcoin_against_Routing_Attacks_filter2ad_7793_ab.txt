positioning of the relay nodes to secure its internal connections
and minimize the clients attack surface (Section III-B); and (ii)
a hardware/software co-design to enable relay nodes to sustain
almost arbitrary load (Section III-C).
B. Bitcoin
A. Attacker Model
Bitcoin is a decentralized transaction system which re-
lies on a randomized peer-to-peer network to implement a
replicated ledger, the Blockchain, which keeps track of the
ownership of funds and the balance of each Bitcoin address.
The Bitcoin network disseminates two types of information:
transactions and blocks. Transactions are used to transfer
value from one address to another, while blocks are used
to synchronize the state of the system. Bitcoin nodes are
identiﬁed by their IP address, connect to each other using TCP,
and exchange data in plain text. Bitcoin comprises around 10k
publicly reachable nodes [9] while 10× more nodes are behind
NAT [18].
Blocks are created by miners and contain the latest trans-
actions as well as a Proof-of-Work (PoW). A PoW is a
computationally-heavy puzzle, unique for every new block,
whose difﬁculty is regularly adapted such that it takes 10
minutes on average to generate a new block [44]. A newly
mined block is propagated network-wide and is appended to
the blockchain according to consensus,
thereby yielding a
ﬁnancial reward to its miner. Bitcoin participants unaware of
the latest blocks will waste their mining power and can be
fooled into accepting invalid transactions.
1Trafﬁc from AS7 itself is not redirected as AS7 relies on internal routing
protocols, such as OSPF, to reach its own preﬁxes.
3
We consider a single AS-level attacker whose goal is to
partition the Bitcoin network into two disjoint components
S and N. To do so, she ﬁrst diverts the trafﬁc destined to
S or N by performing an interception attack using existing
and more-speciﬁc preﬁxes (Section II). The attacker then: (i)
identiﬁes the Bitcoin connections by inspecting the network
and/or transport layer headers (i.e., by matching on IP ad-
dresses and/or TCP/UDP ports); and (ii) drops the connections
bridging the partition. Such an attack is powerful and can
effectively partition the Bitcoin network [17] causing revenue
losses and allowing double spendings. In fact, partitioning is
an effective attack against any Blockchain system as it prevents
nodes from communicating (see Section IX).
We assume that the attacker knows: (i) the IP addresses
of all SABRE nodes; along with (ii) the code running on
them. As such, the attacker can hijack the preﬁxes hosting
relay nodes and drop all trafﬁc destined to them. Alternatively,
the attacker can issue multiple requests to the relay nodes
effectively performing a (D)DoS attack.
Example We illustrate our attacker model using Figure 2a
and 2b which depict a simple AS-level topology composed
of 9 ASes. ASB, ASD ASH and ASG host Bitcoin clients
which establish Bitcoin connections between each other (in
blue). ASX is malicious and aims at disconnecting the nodes
on the left side (S = {b1, d1, d2, d3}) from the others
(N = {h1, g1, g2, g3}). To that end, ASX intercepts the
(a) AS-level topology
(b) AS X hijacks ASH & ASG
(c) With SABRE, network stays connected
Fig. 2: SABRE protects the Bitcoin network from AS-level adversaries aiming to partition it. Without SABRE, AS X can split
the network in half by ﬁrst diverting trafﬁc destined to AS H and AS G using a BGP hijack and then dropping the corresponding
connections (Fig. 2b). With SABRE, the network stays connected (Fig. 2c).
Bitcoin connections directed to N by hijacking ASH and
ASG preﬁxes. As a result, ASX diverts all the connections
from S to N, and some more (e.g., the connection from h1 to
g1). We depict the diverted connections in red in Figure 2b.
Once on-path, the attacker drops the Bitcoin trafﬁc crossing
the partition and forwards the rest normally. For instance, the
attacker does not drop the connection between h1 and g1 and
simply relays it from ASH to ASG untouched. Once the
attack is launched, nodes in S can no longer communicate
with nodes in N: the Bitcoin network is partitioned.
B. SABRE secure network design
We now explain the routing properties behind SABRE relay
locations and how they protect relay-to-relay, client-to-relay,
and relay-to-client connections from being disconnected by
routing attacks. We describe an algorithm for systematically
ﬁnding such locations in Section IV.
Protecting relay-to-relay connections A SABRE deployment
is composed of relays hosted in /24 preﬁxes which belong to
ASes that: (i) have no customer; (ii) peer directly; and (iii)
form a k-connected graph. These constraints protect relay-to-
relay connections from routing attacks for three reasons.
First, these constraints prevent any attacker from diverting
trafﬁc between relays by advertising a more-speciﬁc pre-
ﬁx, effectively forcing her to advertise existing preﬁxes and
thus compete with legitimate advertisements. Second, these
constraints prevent any attacker from diverting relay trafﬁc
away from the ASes hosting relay nodes by advertising an
economically-preferred route. Indeed, the ASes hosting relays
follow the advertisements of their direct peers to reach each
other and have no customers (i.e. no better advertiser AS). As
such, the number of malicious ASes which can advertise an
equally-preferred route are limited to those that directly peer
with the ASes hosting relays. Finally, these constraints make
the chances for effective attackers to divert relay connections
to exponentially decrease as the connectivity of the relay graph
k increases. Indeed, BGP routers rely on an arbitrary tie-break
to select among equally-preferred routes (e.g., by choosing
routes learned from the lowest peer address [48]). Assuming
that the attacker is equally likely to win this tie-breaking, she
would only have a 3.1% (0.55) probability of disconnecting a
5-connected relay network. In Section VI, we show that well-
connected relay networks are numerous.
Protecting client-to-relay connections While we can host
relays in cherrypicked ASes, we cannot choose which ASes
host Bitcoin clients. Concretely this means that AS-level
adversaries hijacking relay preﬁxes can still divert connections
originated by Bitcoin clients to the relays.
In SABRE, we protect client-to-relay connections by further
restricting the locations in which we host relays to ASes
whose /24 advertisements tend to be preferred by ASes with
Bitcoin clients. Doing so we can lower the amount of trafﬁc
malicious ASes can divert, i.e. maximize SABRE’s coverage.
While individual relays locations are unlikely to protect many
Bitcoin clients against all possible attackers, we show that
a relatively small set of relays often can (Section VI). This
design decision is motivated by the observation that Bitcoin
clients are concentrated in few hosting ASes [17].
Protecting relay-to-client connections Finally, an attacker
might try to divert the trafﬁc sourced from the relay network to
the Bitcoin clients. For instance, an attacker could hijack the
preﬁxes of Bitcoin clients and drop the relay connections by
matching on any relay IP address. While this technique is more
cumbersome for the attacker (there are way more clients than
relays), it is nonetheless possible. SABRE prevents this attack
by obfuscating the trafﬁc exchanged between the clients and
the relay nodes. This obfuscation forces the attacker to perform
full inspection (beyond L4 headers) on a possibly huge volume
of diverted trafﬁc, rendering the attack highly impractical.
Observe that while encrypting the already-obfuscated trafﬁc
would render even full inspection useless, encryption alone
would not help as the attacker would still be able to distinguish
Bitcoin trafﬁc by matching on the destination IP.
SABRE relies on two techniques to obfuscate relay trafﬁc.
First, the relays can modify their source IP addresses when
communicating with Bitcoin clients. This is possible as SABRE
uses connectionless communications between the relays and
the clients, enabling clients to accept packets with a different
source IP than the one they send trafﬁc to. Second, Bitcoin
4
XAFECHBGDb1h1g1g2g3d1d2d3bitcoin connectionbitcoin clientcustomer-provider link B is a customer of Epeer-peer linkXb1h1g1g2g3d1d2d3XSABRE relayr1r2r3b1h1g1g2g3d1d2d3SABRE’s relay design is based on the observations that:
(i) the content that needs to be cached in the relay node
is predictable and small
in size, consisting in the one or
two blocks of 1MB that were most recently mined; and
(ii) most of the relay operations are communication-heavy,
consisting in propagating the latest known block to many
clients and distinguishing the new ones. The former allows
for effective caching while the latter allows for a partially
hardware implementation in programmable network devices.
This software/hardware co-design enables SABRE nodes to
operate at Tbps and therefore sustain large (D)DoS attacks.
Indeed, Barefoot Toﬁno programmable network devices can
deal with as much as 6.5 Tbps of trafﬁc in the backplane [7].
While using programmable network devices enable high
performance, it does not make it easy due to the lack of a broad
instruction set and the strict limitations with respect to memory
and number of operations per packet. We overcome these
limitations with three techniques. First, our software/hardware
design seamlessly blends in hardware and software operations,
allowing to automatically escalate operations that cannot be
done in the switch to a software component. In SABRE, only
the validation of new blocks (which happens once every 10
minutes) needs to be escalated while all other requests are
served by the hardware over a UDP-based protocol. Second,
our implementation relies on optimized data structures which
are both memory efﬁcient and require a ﬁxed number of
operations per access. Third, we heavily precompute and cache
values that would need to otherwise be computed on the switch
(e.g., UDP checksums).
IV. SABRE SECURE NETWORK DESIGN
In this section, we ﬁrst formally deﬁne the problem of
selecting the ASes to host SABRE relays in (Section IV-A) so
as to minimize the probability of a successful routing attack
against Bitcoin. We then describe an algorithm for solving this
problem (Sections IV-B and IV-C).
A. Problem Statement & Challenges
The security provided by SABRE depends on: (i) how se-
cure the intra-relay connectivity is, i.e., how many connections
an AS-level adversary needs to hijack in order to disconnect
the graph; and (ii) how much of the Bitcoin network is covered,
i.e., how likely it is that an AS-level adversary will be able to
prevent clients from connecting to all relay nodes.
We take both factors into consideration while constructing
a SABRE network by ﬁrst setting the desirable level of intra-
relay connectivity (e.g., 2-connectivity), and then ﬁnding the
relay ASes that will maximize the Bitcoin coverage. Formally,
we deﬁne our problem as follows:
Problem statement Let G = (AS, E) be the AS-level
topology graph in which vertices (AS) correspond to ASes and
edges (E) to inter-AS links. Let also B ⊆ AS be the subset
of ASes that host Bitcoin clients and R ⊆ AS be the subset
of ASes that have no customers. Finally, let G(cid:48) = (R, E(cid:48))
be the subgraph of G induced by R that contains the subset
E(cid:48) ⊆ (R × R) of peer-to-peer inter-AS links. We deﬁne
A = AS × B as the set of all attack scenarios, namely all
pairs of ASes (x, v) in which AS x acts as AS-level adversary
Fig. 3: SABRE ofﬂoads most communication to the switch
clients can connect to SABRE relays via a VPN/proxy service.
Doing so would force the attacker to ﬁrst ﬁnd the mapping
between the proxy IP and the corresponding Bitcoin client.
Example Using Fig. 2c, we now explain how a SABRE
deployment of three relays, namely r1, r2 and r3, protects
against routing attacks such as the one shown in Fig. 2b by
securing intra-relay connectivity and maximizing coverage.
With respect to Fig. 2a, each Bitcoin client is now con-
nected to at least one relay node in addition to maintaining reg-
ular Bitcoin connections. Here, nodes g1, g2, g3 are connected
to relay r1 while node g1 is also connected to node r3. Hosted
in ASes that peer directly, relay-nodes protect their internal
connectivity against ASX’s hijacks. For instance, consider that
ASX advertises the /24 preﬁx covering r1 to ASC. Since
ASX is a provider of ASC, ASC discards the advertisement
as it prefers to route trafﬁc via a peer instead. At the same
time, forming a 2-connected graph allows the relay network
to sustain any single link cut. A link cut can be caused by
a failure, an agreement violation or an unﬁltered malicious
advertisement from another direct peer.Observe that this would
not hold if r2 was not deployed. Finally, the exact positioning
of relays is such that the paths towards them are more preferred
over those of the attacker. As an illustration, ASX can divert
the connection from ASG to ASD by advertising a more
attractive path to ASG (as a peer) than the one it originally
uses (a provider route, via ASF ). Even so, ASX cannot divert
the connection from ASG to ASB. Indeed, ASG will always
prefer its customer path over any peer path.
C. SABRE resilient software/hardware node co-design
As a transparent and accessible relay network, SABRE
nodes should be able to sustain high load, either caused by
legitimate Bitcoin clients or by malicious ones who try to
exhaust their resources. To scale, SABRE nodes rely on a
software/hardware co-design in which most of the operations
are ofﬂoaded to programmable network switches (e.g., P4-
enabled ones). We illustrate this deployment in Fig. 3 where
two SABRE nodes are connected to each other and to some
Bitcoin clients. One client talks directly to the controller via
the switch while the others talk only to the switch. Observe that
a software-based implementation of the relay node would also
protect Bitcoin against routing attack, yet it will be more prone
to (D)DoS attacks since it will have 2–3 orders of magnitude
lower throughput [34] compared to a hardware-based one.2
2We discuss the possibility of a software deployment of SABRE in §VIII.
5
#Acontrol planedata planeSABRE#Bhardwaresoftware"hijackable" bitcoin connectionsecure connectionblockSABREUDPUDPTCPfor AS v which hosts Bitcoin clients. Let S : R → A be
a function which, given a candidate relay, ﬁnds the subset
α ⊆ A of attack scenarios that this candidate relay protects
against. Let furthermore C : P(A) → R be a function (P(·)
denotes the power set) which, given a set of attack scenarios
α ⊆ A, quantiﬁes their signiﬁcance for the Bitcoin system
by computing the number of Bitcoin clients hosted in victim
(x,v)∈α wv where wv is the number of
ASes, i.e. C(α) = (cid:80)
Bitcoin clients affected by the attack scenarios in α.
Given a desired number of relays N and a desired inter-
relay connectivity k, our problem is to maximize the number of
attack scenarios Bitcoin clients are protected against. Formally,
induced by R(cid:48),
we aim at ﬁnding G(cid:48)(cid:48), a subgraph of G(cid:48)
such that R(cid:48) ⊆ R;
is k-connected; and
ri∈R(cid:48) S(ri)(cid:1) is maximized.
C(cid:0)(cid:83)
|R(cid:48)| = N; G(cid:48)(cid:48)
Challenges Solving the above problem optimally is challeng-
ing for at least three reasons. First, the amount of clients
protected by any subset of relays R(cid:48) depends on the union
of the sets of the attack scenarios each relay r ∈ R(cid:48) protects
against. As these are in general not disjoint, this problem
reduces to the maximum coverage problem. Second, ﬁnding k-
connected subgraphs in a random graph is difﬁcult [22]. Third,
in order to ﬁnd the attack scenarios a relay protect against, one