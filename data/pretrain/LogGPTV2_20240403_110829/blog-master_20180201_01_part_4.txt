2、PostgreSQL 10，耗时37秒  
```
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id and t1.id  Sort  (cost=164145929.33..166645929.49 rows=1000000064 width=12) (actual time=10617.496..10618.060 rows=4160 loops=1)
         Output: (mod(id, 64)), (PARTIAL count(*))
         Sort Key: (mod(tbl.id, 64))
         Sort Method: quicksort  Memory: 388kB
         ->  Gather  (cost=4698216.52..4893529.03 rows=1000000064 width=12) (actual time=9952.181..10615.292 rows=4160 loops=1)
               Output: (mod(id, 64)), (PARTIAL count(*))
               Workers Planned: 64
               Workers Launched: 64
               ->  Partial HashAggregate  (cost=4698216.52..4893529.03 rows=15625001 width=12) (actual time=8635.257..9278.101 rows=64 loops=65)
                     Output: (mod(id, 64)), PARTIAL count(*)
                     Group Key: mod(tbl.id, 64)
                     Worker 0: actual time=8585.110..9220.770 rows=64 loops=1
                     Worker 1: actual time=8363.083..9009.730 rows=64 loops=1
                     Worker 2: actual time=8506.100..9154.658 rows=64 loops=1
...........
                     Worker 62: actual time=8722.494..9391.633 rows=64 loops=1
                     Worker 63: actual time=8715.185..9347.808 rows=64 loops=1
                     ->  Parallel Seq Scan on public.tbl  (cost=0.00..4620091.51 rows=15625001 width=4) (actual time=0.050..4269.941 rows=15384615 loops=65)
                           Output: mod(id, 64)
                           Worker 0: actual time=0.067..4164.559 rows=15373650 loops=1
                           Worker 1: actual time=0.029..4154.181 rows=14842324 loops=1
                           Worker 2: actual time=0.028..4221.663 rows=15133186 loops=1
.............
                           Worker 61: actual time=0.082..4300.683 rows=15392860 loops=1
                           Worker 62: actual time=0.083..4341.929 rows=15397606 loops=1
                           Worker 63: actual time=0.052..4369.521 rows=15158724 loops=1
 Planning time: 0.080 ms
 Execution time: 11235.180 ms
(146 rows)
```
2、HASH AGG 串行，耗时 296 秒   
```
postgres=# set work_mem='128GB';
SET
postgres=# set max_parallel_workers_per_gather=0;
SET
postgres=# explain (analyze,verbose) select mod(id,64),count(*) from tbl group by 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=21924780.12..34424780.92 rows=1000000064 width=12) (actual time=270483.965..278182.935 rows=64 loops=1)
   Output: (mod(id, 64)), count(*)
   Group Key: mod(tbl.id, 64)
   ->  Seq Scan on public.tbl  (cost=0.00..16924779.80 rows=1000000064 width=4) (actual time=0.026..128690.659 rows=1000000000 loops=1)
         Output: mod(id, 64)
 Planning time: 0.057 ms
 Execution time: 295974.163 ms
(7 rows)
```
## 小结  
PostgreSQL 10与11 - hash join性能对比：  
CASE | PostgreSQL 10 | PostgreSQL 11  
---|---|---  
1千万 JOIN 1千万 | 5.39秒 | 1.08秒  
1亿 JOIN 1亿(双表过滤1千万) | 6.35秒 | 1.24秒  
1亿 JOIN 1亿(单表过滤1千万) | 8.5秒 | 2秒  
1亿 JOIN 1亿 | 58.3秒 | 10.7秒  
10亿 JOIN 10亿(双表过滤1千万) | 12秒 | 1秒  
10亿 JOIN 10亿(单表过滤1千万) | 37秒 | 10秒  
10亿 hash agg(附加测试) | 串行 296秒 | 并行 11.2秒
PostgreSQL 11, 性能主要取决于参与hash JOIN的行数（通常来说一张大表，可能会有一些条件过滤掉一些数据，再参与JOIN）。   
PostgreSQL 11 并行hash join的一个特点，可以把所有CPU核全部用完，例如这里有56核的机器，并行度开到56核时，10亿JOIN10亿，仅花费0.99秒。  
PostgreSQL 11 并行hash，不仅仅能用于加速hash join，其他的hash操作(例如hash agg)都适用，提升性能的原理主要是:   
```
PG 9.6虽然支持HASH并行，但是HASH TABLE是每个Worker process不共享的，所以需要多份HASH TABLE。
PG 11，采用了shared hash table，所以只有一份HASH TABLE。
HASH TABLE越大，PG 11体现出来的性能越好。
换句话说，PG 11，不管多大的表JOIN，HASH性能都是杠杠的。
```
## 参考  
https://commitfest.postgresql.org/16/871/  
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例》](../201802/20180201_02.md)    
https://www.postgresql.org/message-id/flat/CAEepm=2W=PI:EMAIL#CAEepm=2W=PI:EMAIL   
https://commitfest.postgresql.org/16/871/   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")