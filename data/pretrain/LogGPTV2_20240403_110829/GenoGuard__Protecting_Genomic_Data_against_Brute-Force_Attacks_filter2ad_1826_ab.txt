of the decryption under a wrong key is equivalent to random
sampling from pm. Honey encryption is proposed with a notion
called distribution-transforming encoder (DTE), as we brieﬂy
describe below.
Distribution-Transforming Encoder: A DTE works by trans-
forming the potentially non-uniform message distribution pm
into a uniform distribution over a seed space S. Formally, it is
a pair of algorithms represented as DTE = (encode, decode):
encode takes as input a message M and outputs a value in
S, whereas decode takes as input a value in S and outputs a
message. encode is probabilistic: A message M can potentially
be mapped to one of many possible values that make up
a set SM ⊆ S, and SM (cid:3)= ∅. For any pair of different
messages M and M(cid:2) (where M (cid:3)= M(cid:2)), SM ∩ SM(cid:2) = ∅.
M∈M SM = S. Therefore, encode needs to choose
Moreover,
a value randomly in SM when transforming M, but decode is
deterministic. A good DTE has the property that a randomly
selected seed, mapped to the message space, yields roughly the
|S| ≈ pm(M)), where
|SM|
underlying message distribution pm (
pm(M) is the probability of message M. We further discuss
the beneﬁts of this property in Section V.
(cid:2)
In the DTE-then-encrypt paradigm proposed in [13], en-
cryption of a message M involves two steps: (i) application of
encode to M to yield a seed s, and then (ii) encryption of s un-
der a conventional symmetric cipher SE. HE does not provide
IND-CCA (indistinguishability under chosen-ciphertext attack)
security. It provides the weaker but still useful property of
message-recovery (MR) security, described below and formally
deﬁned in Section V. Consider the scenario in which an
adversary wants to guess the key (K) used for the encryption.
Given an ideal cipher model for SE, a randomly selected key
corresponds to a permutation selected uniformly at random.
Hence, if the adversary tries to decrypt a ciphertext C with a
randomly guessed key K(cid:2), he will obtain a value uniformly
sampled from S. If he decodes this value, the output message
is equivalent to one sampled from the distribution pm. Given
a good DTE, the adversary cannot distinguish a correct key
K from an incorrect one K(cid:2) with a signiﬁcant advantage over
guessing the key (without knowledge of the ciphertext).
We use the DTE-then-encrypt construction in honey en-
cryption. The setup is described as follows:
•
•
Let pm denote the distribution over the message space
M, pk denote the distribution over the key (password)
space K, S = {0, 1}l denote the seed space with bit
length l, and C denote the ciphertext space.
Let DTE = (encode, decode) be a DTE scheme.
Speciﬁcally, encode(M) = S and decode(S) = M,
where M is a message and S ∈ S.
2Here “invalid” means a message with an extremely low probability in pm.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:07 UTC from IEEE Xplore.  Restrictions apply. 
HEnc(K, M)
S ← $ encode(M)
r ← $ {0, 1}B
C ← $ encrypt(K, S, r)
return (r, C)
HDec(K, (r, C))
S ← decrypt(K, C, r)
M ← decode(S)
return M
Alice 
Bob 
Cathy 
Eva 
Data 
Collection 
Certified 
Institution 
(CI) 
Data Preprocessing 
Access control 
Biobank 
Data 
Retrieval 
Users 
Fig. 1: DTE-then-encrypt construction using a symmetric
encryption. M ∈ M, K ∈ K, S ∈ S, and C ∈ C. The symbol
‘$’ implies randomness of the function. r is a random salt of
length B.
•
Use a conventional symmetric encryption scheme
SE = (encrypt, decrypt) with plaintext space S and
ciphertext space C. For block ciphers without padding,
C is the same as S. SE uses random bits uniformly
sampled from {0, 1}B during encryption, where B is
the length of the random bits.
honey
encryption
construction HE[DTE, SE]
the application of HE to genomes,
The
=
(HEnc, HDec) is also shown in Figure 1. However, as
we will show,
is far
from straightforward. Constructing a good DTE for genetic
sequences, one that yields an HE scheme with good MR
security bounds,
is the main challenge addressed in this
paper. Addressing the problem of side information is also a
signiﬁcant challenge.
III. SYSTEM MODEL
We consider a scenario where individuals’ genomic data is
stored in a database (e.g., a biobank) and used for various pur-
poses, such as clinical diagnosis or therapy, or DTC services.
In the data collection phase, patients provide their biological
samples to a certiﬁed institution (CI) that is responsible for the
sequencing. Furthermore, each patient also chooses a password
(we assume patients can choose low-entropy passwords). The
CI pre-processes the sequence data; the most important step is
the application of protection mechanisms to the data, such as
encryption using the passwords of the patients. The CI then
sends the processed data to the biobank. To efﬁciently protect
the data, we assume there are two layers of protection:
•
•
The inner-layer protection is provided by using cryp-
tographic techniques. This layer is necessary for de-
fending against attacks from insiders or someone who
hacks into the system and steals the database. This is
the focus of this paper.
The outer-layer protection is the access control; it de-
cides various permissions on the data. Access control
has been extensively investigated in the literature [15]
and is out of the scope of this paper.
During data retrieval, a user (such as a doctor or the patient
himself) ﬁrst authenticates himself to the system using a
passcode3, or biometric information (e.g., face). After authen-
tication, the user can send a data request to the biobank that
3Chosen by the user or generated by a one-time passcode generator. Note
that the passcode used for authentication cannot be the same as the password
used for PBE (if PBE is used in GenoGuard that is introduced in Section IV),
as the former would require storing a hash of the passcode on the system.
450450
Fig. 2: System model of genomic data storage and retrieval.
Patients provide their samples to CI for sequencing. Encrypted
sequence data is sent to the biobank and retrieved for various
purposes by the users.
processes the request according to access control rules and the
biobank responds with the authorized data. Figure 2 gives an
overview of the considered architecture.
A. Genomic Data Representation
We represent each patient’s genomic data as a sequence
take values from the set
of genetic variants (SNVs) that
{0, 1, 2}, as we discussed before. We assume a sequence
M with n SNVs, and we represent such a sequence as
(m1, m2,··· , mn), where mi represents an SNV. We use Mi,j
to represent the subsequence including all the SNVs between
(and including) the i-th and the j-th.
B. Threat Model
We assume the CI to be trusted in order to perform
sequencing on patients’ samples. An adversary can be anyone
(except the CI) who has access to the protected data, such as
the biobank, a user who has been granted access permission
on part of the data, or an attacker who breaks into the
biobank and downloads a snapshot of the database. As a
consequence, the adversary can be assumed to have a copy
of encrypted sequences. We further assume that the adversary
has access to public knowledge about genomics,
i.e., AF,
LD, recombination and mutation rates. A stronger adversary
could even have some side information about a given patient,
such as his phenotype, and even some of his SNVs. We
represent the adversary’s background knowledge as BK =
{AF, LD, recombination and mutation rates, [side info]},
where “[side info]” means the type and amount of side
information depend on the power of an adversary. We
also study the effect of phenotype as side information (in
Section VI) and propose a general solution in this regard. We
emphasize that more side information could result in stronger
attacks. Throughout this paper, we assume a computationally
unbounded adversary who has the capability to efﬁciently
enumerate all keys in K and to use them to decrypt
the
data, also called a brute-force attack. We also assume
that
the adversary is honest-but-curious (i.e., follows the
protocols honestly, but tries to learn more information than
he is authorized for). The adversary’s main goal is to break
the inner-layer protection and gain access to the plaintext
sequences of the patients.
IV. GENOGUARD
We describe GenoGuard, our solution based on honey
encryption, for the secure storage of genomic data. We show
the main steps of the protocol in Figure 3. We represent the
patient and the user as two separate entities, but they can be
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:07 UTC from IEEE Xplore.  Restrictions apply. 
the same individual, depending on the application. We discuss
more about the application scenarios in Section VII. Step by
step, we discuss the protocol in this section, emphasizing the
encoding (Step 3) and decoding (Step 9) steps that are the
major features of GenoGuard.
Initially, a patient provides his biological sample (e.g.,
blood or saliva) to the CI and chooses a password that is used
for the encryption (Step 1). The CI does the sequencing on the
sample and produces genomic data represented as discussed in
Section III-A (Step 2).
Biobank 
5. Ciphertext 
7. Ciphertext 
6. Request 
2. Sequencing 
3. Encoding 
4. Password-based encryption 
CI 
1. Sample, Password 
Patient 
User 
8. Password-based decryption 
9. Decoding 
Fig. 3: GenoGuard protocol. A patient provides his biological
sample to the CI, and chooses a password for honey encryp-
tion. The CI does the sequencing, encoding and password-
based encryption, and then sends the ciphertext to the biobank.
During a retrieval, a user (e.g., the patient or his doctor)
requests for the ciphertext, decrypts it and ﬁnally decodes it
to get the original sequence.
A. Encoding
We introduce a novel DTE scheme that can be applied ef-
ﬁciently on genome sequences. The general idea is to estimate
the conditional probability of an SNV given all preceding ones.
In other words, the proposed scheme estimates P (mi|M1,i−1),
the conditional probability of the i-th SNV given preceding
SNVs. The probability of a complete sequence M can be
decomposed as follows:
pm(M) =P (mn|M1,n−1)P (mn−1|M1,n−2)···
(1)
P (m2|m1)P (m1).
The main challenge is to ﬁnd an efﬁcient way to encode
a sequence M into a uniformly distributed seed, which de-
ﬁnes the deterministic mapping from M to SM (then we can
uniformly pick a value from SM). A naive and impractical
method would be to enumerate all possible sequences, com-
pute their corresponding probabilities, calculate the cumulative
distribution function (CDF) of each sequence in a pre-deﬁned
order, and ﬁnally assign the corresponding portion of seeds to
a sequence. However, given that there are three possible states
for each SNV on a sequence of length n, this method incurs
both time and space complexity of O(3n).
Therefore, we propose a novel approach for efﬁciently
encoding such a sequence. The approach works by assign-
ing subspaces of S to the preﬁxes of a sequence M. The
preﬁxes of a sequence M are all the subsequences in the set
{M1,i|1 ≤ i ≤ n}. For example, the preﬁxes of the sequence
•
•
•
•
•
ATTCG are {A, AT, ATT, ATTC, ATTCG}. We ﬁrst describe
the basic setup as follows:
Seed space S corresponds to the interval [0, 1). Each
seed is a real number in this interval. In practice, we
need to use only sufﬁcient precision (l bits as indicated
by the deﬁnition S = {0, 1}l) to distinguish between
the seeds of different sequences. But, for simplicity of
presentation in the rest of this subsection, we assume
there is inﬁnite precision.
To calculate the CDFs, we deﬁne a total order O of
all sequences in M, i.e., O : M → N. For any two
different sequences M and M(cid:2), scanning from the ﬁrst
SNV, suppose they begin to differ at the i-th SNV,
mi and m(cid:2)
1,i−1
i). If the value (0, 1, or 2) of mi
and mi
i, then O(M)  O(M(cid:2)
). The CDF of a sequence
) where pm(M(cid:2)
M is CDF(M) =
)
i correspondingly (i.e., M1,i−1 = M(cid:2)
(cid:3)= m(cid:2)
pm(M(cid:2)
M(cid:2)∈M
O(M(cid:2)
)≤O(M)
is the probability of sequence M(cid:2).
In a nutshell, we can encode a sequence with the help of a
perfect ternary tree (an example in Figure 4). For a sequence
M, starting from the root, (i) if an SNV mi is 0, we move down
to the left branch; (ii) if it is 1, we move down to the middle
branch; (iii) if it is 2, we move down to the right branch.
As a consequence, each internal node represents a preﬁx of
a sequence, whereas each leaf node represents a complete
sequence. We also attach an interval [Lj
i ) to each node,
where i represents the depth of the node in the tree, and j
represents the order of the node at a given depth i, both starting
from 0. This interval is the sub seed space that can be assigned
to the sequences that start with the preﬁx represented by the
corresponding node.
i , U j
Here, we describe the details of encoding process (step 3
in Figure 3). Assume we encode a sequence M. It is obvious
0 ) = [0, 1).
that the root has an interval [0, 1), namely, [L0
0