d(S) =
S[i]f (i) mod q ,
(6)
where f (i) ∈ {0, 1}m is a function of the index i (called a “partial
label” in [27]) and S[i] is the vector element at position i which is a
scalar in Zq. The above digest is clearly additively-homomorphic.
The parameters k, q, m, N used above depend on the size M of
the vector and on the maximum vector entry max and are computed
by algorithm genkey() in Figure 10 in the Appendix. Speciﬁcally,
algorithm genkey() calls parameters() which in turn imposes two
constraints on the parameters k, q, m, N. The ﬁrst constraint guar-
antees that the security reduction from a hard lattices problem to
breaking the security of the vector commitment scheme will be suc-
cessful [25]. The second constraint guarantees a level of security
that is at least 100 bits [26]. An example set of parameters that sat-
isfy the above constraints and that we have used in our experiments
are N = 2 × 106, k = 850, q ≈ 108.862 and m = 25500. These
parameters are good for any vector of size M and maximum entry
max such that M × max = N = 2 × 106.
Another reason (besides the additive homomorphism) that we
use the lattice-based scheme [27] for implementing VCS is its efﬁ-
cient algebraic nature (i.e., lack of exponentiations), which allows
for very efﬁcient implementations in PINOCCHIO [30]. For exam-
ple, we veriﬁed that while PINOCCHIO takes roughly 300 seconds
to compute the SHA-1 Merkle hash of a vector of length 100, it
only requires 3.6 seconds using the lattice-based hash. This was
among the most crucial factors for the efﬁciency of planar separa-
tor implementation.
Existing SNARKs implementations. Parts of our implementa-
tion use PINOCCHIO [30], a SNARK implementation which is open-
source and implements an optimized version of the SNARK con-
struction presented in [19]. It can support any NP language L. To
use it, one needs to write a C program that takes as input the NP
statement and the witness and veriﬁes the validity of the witness.
Then this program is compiled into a boolean/arithmetic circuit
which is used to produce the evaluation and veriﬁcation keys. Our
implementation uses a recently developed version of PINOCCHIO
by Kosba et al. [21] that uses open-source libraries for the bilinear
pairing function.
We emphasize here that PINOCCHIO is operating in Zp, where p
is a 254-bit prime number, while some computation of our schemes
takes place modulo q. For example, to verify the digest in PINOC-
CHIO computed in Relation 6, the following check is performed:
(cid:88)
i
S[i]f (i) ?= dinput mod q ,
where dinput is the trusted digest input from the client, S is the un-
trusted vector input from the server and the whole equation should
be evaluated in Zq, as required by the lattice-based hash function.
Since PINOCCHIO does not support modulo-q operations, our im-
plementation lets the server also input the quotient and uses PINOC-
CHIO to check the following equivalent condition
S[i]f (i) ?= dinput + quotinput × q .
(cid:88)
i
However, the server can potentially ﬁnd a fake pair S(cid:48) and quot(cid:48)
which still satisﬁes the condition in Zp.1
1E.g., for any vector S(cid:48) the server can set
input
quotinput = q
−1
S(cid:48)
[i]f (i) − dinput
mod p .
(cid:33)
(cid:32)(cid:88)
i
if x = s
head = ﬁrst position in Q;
tail = ﬁrst position in Q;
tail++;
for each node x ∈ V
PINOCCHIO_BFS(G,s)
1
2
3 Q[tail] = s;
4
5
6
7
8
9
10
11
12
13
14
15
16
17
x.parent = −1;
for round = 1 to |V |
for each node x ∈ V
if x = Q[head]
head++;
for each node v ∈ Adj[x]
if v.visited = 0
v.visited = 1;
v.parent = Q[head];
Q[tail] = v;
tail++;
Figure 3: The BFS pseudocode we implemented in PINOCCHIO.
Array Q has |V | positions and simulates the queue in BFS.
To solve this problem, we instead let the client input quotinput.
Speciﬁcally, quotinput can be computed, signed and outsourced
together with the digest. Meanwhile, extra conditions are added
to bound every element in S such that it is impossible to overﬂow
p—i.e., we set 0 ≤ S[i] ≤ max. Note that such conditions are
“for free,” since they are required to guarantee collision resistance
anyways, as mentioned in the beginning of Section 5.
5.1
Implementation of our VC protocols
We now present the implementations of four different VC schemes
for shortest paths, one VC scheme for dynamic graphs and one VC
scheme for maximum ﬂow, that were described in Section 3 and
Section 4. The parts that did not require PINOCCHIO (e.g., build-
ing the planar seperator tree) were implemented in C++.
Our implementation replaces expensive digital signatures (e.g.,
for signing the graph edges) with HMACs from openssl [1]. There-
fore the VC schemes we are implementing are in the secret-key set-
ting. To make our VC schemes publicly-veriﬁable without affect-
ing performance, we could use standard techniques that combine
Merkle hash trees with one signature of the roothash. To do a fair
comparison, in our experiments we “turn off” public veriﬁability
and zero knowledge which are both offered by PINOCCHIO.
Strawman scheme. As our baseline, we implemented the straw-
man algorithm as described in Section 3.1. Since we will be run-
ning experiments on unit-weight graphs (see next section), we use
n rounds of BFS instead of the Floyd-Warshall algorithm to pre-
compute and all shortest paths, which has reduced O(nm) com-
plexity (instead of O(n3)). Subsequently we compute an HMAC
of each shortest path.
PINOCCHIO BFS scheme. Our second attempt was to execute the
BFS code directly in PINOCCHIO. However, due to various lim-
itations analyzed in Section 3.2, we were not able to code up the
linear-time algorithm from [15]. Figure 3 shows the BFS pseu-
docode that we eventually wrote. One of the most important lim-
itations inherent to the circuit representation is that non-constant
array index operations must be implemented by iterating through
all elements in the array, which is why the complexity increases
from O(m + n) to O(mn)—see the portions of the pseudocode in
Figure 3 (Lines 5-7 and 9-11).
Figure 4: Preprocessing time. We were only able to execute BFS for
graphs of up to 50 nodes. All other points (shaded bars) are estimated.
Figure 5: Proof-computation time. We were only able to execute the
certifying algorithm for up to 10,000 nodes.
Also, we simulated the BFS queue with an array Q of ﬁxed size
since we cannot implement dynamic data structures in a circuit. In
Figure 3, the index pointer head records the starting point of the
queue and the index pointer tail records the end of the queue. The
size of Q is equal to the number of the nodes of the graph, since
every node is enqueued and dequeued exactly once.
However, we note that the same technique cannot be easily gen-
eralized to Dijkstra’s algorithm on a weighted graph, since instead
of a plain queue, a more complicated priority queue is required.
Due to the above awkward implementation, the BFS performance
was not good and scaled up to only 50 nodes (see more details in
the evaluation section).
Certifying algorithm scheme. We implemented the certifying al-
gorithm with an efﬁcient circuit of O(m) size, as explained in Sec-
tion 3.3. We compute the shortest path vector S that stores the dis-
tances from the source s to all the other nodes of the graph (which
the server provides as input to Relation 1) using the BFS imple-
mentation in the LEDA library (version 6.4) [2]. We note here that,
contrary to BFS, the certifying approach can be naturally applied
for weighted graphs—see Relation 1.
During the implementation of Relation 1 in PINOCCHIO, we ob-
served that comparison operations (≤,≥) are much more expensive
than addition and multiplication. Therefore, in the case of a unit-
weight graph, we replaced the second constraint of Relation 1 by
an equivalent equality constraint with an additional input auv, i.e.,
S[v] − S[u] − avu = 0, where avu ∈ {−1, 0, 1} .
To check the domain of avu, we write avu = a1 + a2 − 1, where
a1, a2 ∈ {0, 1}. To check that ai ∈ {0, 1} we leverage the equiva-
lence ai × ai = ai ⇔ ai ∈ {0, 1} which can be implemented with
one multiplication gate. Similarly, the equality constraint above can
be checked by connecting the evaluation of bvu = S[v]−S[u]−avu
to the two inputs and one output of an addition gate. In this way,
bvu must be 0 to pass the circuit (bvu + bvu = bvu ⇔ bvu = 0).
This optimized version of the certifying algorithm improved the
prover performance by 55×. However, this method cannot be ap-
plied to graphs with general weights since the domain of the addi-
tional input is much larger and checking their domain might even
slow down the performance.
We also implemented the Dynamic Graph Scheme from Sec-
tion 3.4 in the same way as the certifying algorithm scheme. Maxi-
mum Flow Scheme is implemented following the maxﬂow-mincut
theorem described in Section 3.5.
Planar-separator scheme. We implemented the VC scheme for
planar graphs described in Figure 2. To build the planar separator
tree, we ﬁrst triangulate the input planar graph using the LEDA
library [2] and the triangulated graph is input recursively into the
recent planar separator implementation by Fox-Epstein et al. [17].
The digests of the shortest path vectors are computed using our
implementation of the additively-homomorphic lattice-based VCS
described before. These digests, along with precomputed distances
and paths, are HMACed using openssl and then outsourced. For
every vector of different length storing precomputed distances, a
SNARK for Relation 5 using PINOCCHIO is constructed.
6. EVALUATION
We now evaluate the shortest path SNARKs for (i) the straw-
man scheme; (ii) the PINOCCHIO BFS scheme; (iii) the certifying
algorithm scheme; and (iv) the planar separator scheme.
We also present experiments for the dynamic graph scheme as
well as for the maximum ﬂow scheme. We do not present results
for longest paths since we use the same certifying algorithm as the
shortest-path one (with a change in the direction of the inequality).
Experiment setup. We executed our experiments on an Amazon
EC2 machine with 15GB of RAM running a Linux kernel.
Plots for preprocessing time, proof-computation time, veriﬁca-
tion time and server storage are presented (in log scale). All schemes
were run on the same randomly-generated planar undirected graph
(we use the LEDA function random_planar_graph for that)
with unit weights. We collected 10 runs for each data point, and we
report the average in Figures 4, 5, 6, and 7.
Also, in all these ﬁgures, estimated data points (due to increased
memory/time requirements) are marked as lightly shaded bars. We
experiment on planar graphs with n = 10, 102, . . . , 105, where the
number of edges is at most 3(n − 2) (due to planarity). Our planar
scheme was the only one to execute on a graph of 200,000 nodes.
Preprocessing time. Figure 4 shows the comparison of preprocess-
ing time among the schemes. The preprocessing time of both BFS
and certifying algorithm schemes is deﬁned as the time to compile
the corresponding PINOCCHIO codes into circuits plus the time to
generate the keys. The results show that the certifying algorithm
outperforms BFS by orders of magnitude. Speciﬁcally, the opti-
mized certifying algorithm runs approximately 10,000 times faster
than BFS on a graph with 10,000 nodes.
In our experiments, the PINOCCHIO BFS implementation is so
inefﬁcient that it takes too long to get a result even on a graph with
only 100 nodes. Thus the statistics on graphs with more than 100
nodes for BFS are estimated based on data points on small graphs.
All estimated data points are marked as lighted bars in the ﬁgures.
We use minimum mean square error for the estimation.
101102103104105Nodes10−21001021041061081010Time(seconds)StrawmanPINOCCHIOBFSCertifyingAlgorithmPlanarSeparator101102103104105Nodes10−21001021041061081010Time(seconds)StrawmanPINOCCHIOBFSCertifyingAlgorithmPlanarSeparatorFigure 6: Veriﬁcation time.
Figure 7: Server storage.
On the contrary, the certifying algorithm schemes can run on
larger graphs. The only limitation in this case is that the memory
consumption is proportional to the input size (note the input in this
case is O(m) instead of O(1) as in the BFS) and our machine runs
out of memory when compiling the certifying algorithm code on a
graph with more than 10,000 nodes.
Surprisingly, although the complexity of preprocessing time in
the planar separator scheme is O(n3/2 log n), it executes faster
than the certifying algorithm (that has linear preprocessing time),
because most of the work is non-cryptographic and can be imple-
mented efﬁciently in regular C++ code. In particular, the planar
separator scheme outperforms the certifying algorithm scheme in
the preprocessing time by 29× on a graph with 10,000 nodes and
it can scale to a graph with up to 200,000 nodes. Also, as shown
in Table 3, for small graphs, compiling PINOCCHIO codes to cir-
cuits and generating keys contribute to the biggest part of the pre-
processing, while in large graphs, the portion of the separator tree
construction as well as computing and HMACing the precomputed
distances and paths dominates most of the time.
Finally, since the strawman scheme does no cryptographic work
other than HMACs, it runs extremely fast on small graphs. How-
ever, its execution time becomes equal to that of the planar sepa-