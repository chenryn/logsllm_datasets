the channel in a manner that reduces the error rate at the receiver.
The next few sections describe the PHY in detail. The MAC is a
simple extension of 802.11 carrier sense, and is described in the
speciÔ¨Åc context of WLANs (¬ß7.1) and opportunistic routing (¬ß7.2).
4 Symbol Level Synchronization
4.1 Why do we synchronize transmitters?
To understand why one needs to synchronize, let us start by explaining
what happens with a single sender-receiver pair. When a sender
transmits to a receiver, the wireless signal bounces off walls, obstacles
etc. and traverses multiple paths to the receiver. This phenomenon,
known as the multipath effect, is a common distortion in wireless
channels such as 802.11. As a result of the multipath effect, different
copies of the same signal arrive at the receiver delayed with respect to
each other. This means that the energy from one symbol bleeds into
the next symbol, and corrupts its signal as shown in Fig. 3. Because
173F
EFD
C
D
	
e
s
a
h
P
CDA
CDA
B
A















FD
C
D
	
Figure 3: FFT windows at a receiver for a single transmitter.
Any FFT window within the slack is valid. Any other FFT window
would include energy from the previous symbol and hence is invalid.

DE
DF
AEF
AE
	ABC
(a) A valid FFT window for aligned transmitters.

		ABCD
(b) No valid FFT for these misaligned transmitters.
Figure 4: FFT windows at a receiver for two transmitters. In
order to decode both transmissions, the symbols from the transmitters
must arrive at the receiver aligned within the slack of the CP.
of this effect, OFDM symbols typically have a guard interval between
them, called the cyclic preÔ¨Åx (CP). In a typical network, the value
of the CP is chosen to be as small as possible while still accounting
for the maximum multipath delay spread of the network, i.e., the
maximum delay difference between delayed copies of the signal.
OFDM data is encoded in the frequency domain. An OFDM re-
ceiver, in order to decode, converts the received symbol to a frequency
representation by taking an FFT of the symbol. In order to do so
while ensuring that the symbol is not corrupted by multipath noise
from the previous symbol, the receiver should skip the samples in the
CP, and take the FFT of the remaining samples.2 In a typical network,
the CP has a small amount of slack to allow for packet detection
errors [42]. This means that the receiver has a corresponding amount
of slack in the choice of where to align the receiver FFT window
in a symbol. Thus, as shown in Fig. 3, any FFT window within the
slack is valid. Any other FFT window would include energy from the
previous symbol and hence lead to erroneous results.
Now, consider two senders transmitting the same symbol to a
receiver. If the copies of this symbol from the two transmitters arrive
at the receiver aligned within the existing slack of the CP, the receiver
can take the FFT as before while still receiving energy only from this
symbol, as shown in Fig. 4(a). If not, as before, any FFT window
that the sender uses would include energy from the previous symbol,
as shown in Fig. 4(b), and hence would yield incorrect results.
Of course, it is possible to increase tolerance to misalignment and
provide more slack by increasing the CP. This approach, however,
is problematic for two reasons. First, without sender synchroniza-
tion, as in existing 802.11 networks, the amount of misalignment
between senders can take any value depending on the differences
in propagation delays and hardware processing times on different
senders. While propagation delays may be bounded in certain envi-
2Since the CP is a cyclic permutation of the symbol, and since FFT is periodic, the
FFT yields correct results as long as it is within the symbol.
Initial Detection
Initial Detection + ‚àÜ
 200
 180
 160
 140
 120
 100
 80
 60
 40
 20
 0
l
e
n
n
a
h
C
d
e
p
p
a
r
w
n
U
-40
-20
 0
 20
 40
Subcarrier Index
Figure 5: Unwrapped channel phase of OFDM subcarriers in a
Ô¨Çat fading channel. The slope is a function of the detection delay.
ronments based on the network diameter, the hardware processing
times can be signiÔ¨Åcantly different across senders. In fact, 802.11
standards [37, 11, 27] impose only very loose bounds on hardware
turnaround times (10 ¬µs in 802.11 a/g/n), and these are far longer
than the 802.11 OFDM symbol time (4 ¬µs). The second problem
with increasing the CP is that the CP is overhead that is incurred for
every OFDM symbol. Hence, the general trend has been to decrease
the CP (for example, 802.11n negotiates down the CP if the network
topology permits it [27]). Thus, even if one can exactly determine the
required increase in the CP, such an approach will increase overhead
and may signiÔ¨Åcantly reduce, or even negate, the gains.
4.2 Delay Measurements for Accurate Synchronization
At a high level, our synchronization algorithm is simple. One of the
senders, called the lead sender, acquires the medium and transmits
the packet. Upon hearing this signal, other nodes, which we refer to
as co-senders, join the transmission. The choice of lead sender for a
transmission depends on context and is explained in ¬ß7.
The key, however, is that transmissions from the lead sender and co-
senders arrive aligned at the receiver. The challenge is that co-senders
need to accumulate several samples before detecting the lead sender‚Äôs
transmission, and hence do not detect the transmission at the Ô¨Årst
sample. Further, different co-senders may take different times to turn
around from receiving the lead sender‚Äôs transmission to transmitting
with the lead sender. Finally, signals from different senders traverse
different paths and therefore incur different propagation delays. The
co-senders therefore need to measure these different delays, and
compensate for them to ensure synchronization at the receiver. In
this section, we focus on how to accurately measure the delays, and
describe how we compensate for the delays in the next section.
(a) Packet Detection Delay: This is the offset between the arrival of
the Ô¨Årst sample of the packet at a node, and the instant at which the
receiver detects the packet. Estimating packet detection delay is a
challenging task as it varies from packet to packet, and depends on
the SNR, as well as the multipath characteristics of the channel.
SourceSync exploits a fundamental property of FFTs; a delay in
the time domain manifests itself as a phase shift in the frequency
domain [29]. To understand how we can leverage this property, let
us look at the channel of an OFDM packet whose arrival the receiver
detected at a few samples away from the Ô¨Årst sample. For clarity, we
discuss the case of a Ô¨Çat fading channel. The channel is a complex
number, and we will focus on the phase of the channel in each OFDM
subcarrier since that is the quantity affected by shifts in time. The
dotted curve in Fig. 5 shows the receiver channel phases per subcarrier.
As can be seen from the Ô¨Ågure, the phases increase by a Ô¨Åxed slope.
If we artiÔ¨Åcially induce an additional delay offset and process the
174packet as if it were detected ‚àÜ samples after its actual detection time,
the dotted slope of the graph changes to the solid slope as shown in
Fig. 5. Thus, a delay offset in packet detection has introduced a shift
in the phase of each OFDM subcarrier proportional to the index of
that subcarrier.
In fact, one can show as a direct consequence of the deÔ¨Ånition of
the FFT [29] that the change in phase of subcarrier i is 2œÄi ‚àÜ
, where
Ns
Ns is the number of samples in a symbol. Hence, in the graph in
Fig. 5, the induced offset ‚àÜ introduces an additional slope of 3
Œ∂ =
2œÄ ‚àÜ
Ns
(1)
Now, what would the phase slope be if the receiver detects the
packet exactly at the Ô¨Årst sample? In the case of a Ô¨Çat fading channel
(i.e. coherence bandwidth larger than channel bandwidth), the differ-
ent OFDM subcarriers will experience similar channels. Hence, the
phase of the subcarriers at different channels will be constant, and
the slope will be zero. On the other hand, if the coherence bandwidth
is very small, then the different OFDM subcarriers will experience
uncorrelated channels. Since the phases of these channels are equally
likely to be positive or negative, the slope will be close to zero in this
case too. So, how about the intermediate case where the coherence
bandwidth is neither too large nor too small? We can treat this case
similar to the Ô¨Çat fading case by computing the slope over a small
window of consecutive subcarriers that spans a width smaller than the
coherence bandwidth, and averaging over several such windows. In
fact, we do not need to differentiate between the cases; the solution
proposed for intermediate channels works for the other cases too.
Hence, in SourceSync, we compute the slope over windows of con-
secutive OFDM subcarriers that span 3 MHz, which is less than the
coherence bandwidth of indoor channels [12], and average multiple
such windows to estimate the overall slope. Since the slope should be
zero in the absence of detection delay, we can substitute the average
slope as Œ∂ in Eq. 1, and compute the detection delay offset, ‚àÜ.
(b) Hardware Turnaround Delay: The turnaround delay is the time
required for a co-sender to switch from reception of the lead sender‚Äôs
transmission to transmission of its concurrent signal. This time is
dependent both on the speed of the baseband pipeline and the switch-
ing time of the radio frontend from reception to transmission. The
turnaround time is constant for a particular node and can be measured
by locally counting the hardware clock ticks from detection of the
lead sender‚Äôs packet to the beginning of the co-sender‚Äôs transmission.
(c) Propagation Delay: This is the time of Ô¨Çight of the signal be-
tween the nodes. Given a transmitter-receiver pair, one can easily
obtain an estimate of the total round trip delay between the nodes by
having the sender send a probe and count the number of hardware
clock cycles till it gets a response from the receiver. The round trip
time elapsed between the transmission of the probe and the processing
of the response has multiple components as follows:4
3Note that the contribution of detection offset to channel slope is different from
carrier frequency offset (CFO) and sampling offset (SFO) estimation. SpeciÔ¨Åcally, the
contribution of detection offset to slope is constant across symbols, unlike CFO which
does not change the slope, but only shifts the intercept of the line in Fig. 5 from symbol to
symbol, and SFO which creates a relative slope between two consecutive symbols [15].
4Eq. 2 assumes that the hardware turnaround delay at the transmitter is less than the
sum of propagation delays and hardware turnaround delay at the receiver. Note that we
can always ensure that this condition holds by adding a constant wait time at the receiver,
whose value is known to the transmitter. We drop this detail from the equation for clarity.
DelayProbe‚ÜíResponse = Probe Propagation Delay from Tx to Rx
+ Probe Packet Detection Delay at Rx
+ Hardware Turnaround Time at Rx
+ Response Propagation Delay from Rx to Tx
+ Response Packet Detection Delay at Tx
(2)
Both sender and receiver can estimate their packet detection de-
lays for the probe and response packets, as well as their hardware
turnaround delays as described above. The receiver includes its delay
values in the response packet. The transmitter knows the total round
trip delay and its own packet detection delay, and can substitute these
delays, as well as the delays in the receiver response packet in Eq. 2
to obtain the two-way propagation delays. The one-way propagation
delay is computed as half the two-way propagation delay.
4.3 Compensating for Different Delays
SourceSync uses its measured delays to estimate how long co-senders
must wait to ensure that their transmissions arrive synchronized with
the lead sender‚Äôs transmission at the receiver. At a high level, the lead
sender initiates transmission by sending a synchronization header.
The co-senders hear the synchronization header, switch from recep-
tion to transmission, and then begin transmitting their data.
Let di be the one-way propagation delay from the lead sender to
co-sender i , hi the hardware turnaround delay of co-sender i , and
‚àÜi the detection delay for the synchronization header at co-sender
i . Co-sender i will not be ready to transmit until after a delay of
di + ‚àÜi +hi . Hence, the lead sender cannot transmit data immediately
after the synchronization header, but has to wait for all co-senders
to be ready for data transmission. What is the least time necessary
to ensure that all co-senders are ready? The 802.11 speciÔ¨Åcation
requires that a node should be able to transmit a response within a
SIFS after another node transmits a packet to it [37, 11, 27]. Hence,
it is sufÔ¨Åcient that the lead sender waits for a SIFS (10 ¬µs in 802.11
g/n) after the synchronization header. We will refer to this time, when
all co-senders are ready to transmit, as the global time reference.
Since co-sender i is ready to transmit di + ‚àÜi + hi units after the
synchronization header, it therefore needs to wait an additional time
of SIFS ‚àí(di + ‚àÜi + hi ) to align itself with the global time reference.
Co-senders however should not begin transmission exactly at the
global time reference, since different senders have different propa-
gation delays to the receiver. SpeciÔ¨Åcally, if the co-sender is further
away from the receiver than the lead sender, it needs to transmit
earlier than the global time reference, and if it is closer to the receiver,
it needs to transmit after the global time reference. Exactly how
much before or after depends on the one-way propagation delays. Let
T0 be the one-way delay from the lead sender to the receiver, and
let ti be the one-way delay from co-sender i to the receiver. Then,
co-sender i simply waits for a time of wi = T0 ‚àí ti relative to the
global time reference to determine when it should transmit.
The above algorithm requires the co-senders to know the propaga-
tion delay from the lead sender to themselves, and the propagation
delay from themselves and the lead sender to the receiver. SourceSync
computes these delays by having nodes exchange periodic probes.
The packet detection delay and hardware turnaround delays are both
computed and compensated for locally at co-senders.
4.4 SourceSync‚Äôs Synchronization Protocol
We now describe SourceSync‚Äôs synchronization protocol, assuming
that all co-senders have computed their wait times. For clarity, we fo-
175	A
EF	




AD
D
D
D
(a) Transmission by lead sender for the joint frame.
	A
	A
BCDEF
E	
	
CE
D
	



A
AADA

A
	B
(b) Transmission by co-sender for the joint frame.
BCD
E
Figure 6: Joint frame from the perspective of the senders. Sym-
bols in solid blue are transmitted by the lead sender, symbols in dotted
red by the co-sender, and symbols in white reÔ¨Çect silence periods.
The co-sender hears the lead sender‚Äôs transmission after a delay of d1,
waits for SIFS‚àí(d1 + ‚àÜ1 + h1) after processing the synchronization
header, followed by a wait of w1, and then begins its transmission.

	AB
CD
EBDF
B
