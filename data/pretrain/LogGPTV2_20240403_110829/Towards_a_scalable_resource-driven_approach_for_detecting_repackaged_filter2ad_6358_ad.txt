### 5.7.3 Misusing Certificates

We identified a pair of repackaged applications with the same package name (i.e., `a5game.leidian2`) but different certificate fingerprints. One application was signed with the fingerprint `EE1C7585428F65BAC2D156B0792D2358`, while the other was signed with `86544D775DCBA00275CD304C5C37BCC7`. Our investigation revealed that the first certificate is owned by "5agame.com," whereas the second certificate's owner is listed in Chinese characters, corresponding to the website `http://www.5agame.com`. After a thorough code review, no abnormalities were detected. It is likely that both applications were published by the same developer, "5agame.com," but for unknown reasons, different certificates were used. This can cause update failures, as the Android system does not allow updates if the new and old versions have different certificates. Therefore, this is an example of misusing app certificates.

### 6. Discussion

#### 6.1 Attack Analysis

Zhang et al. [45] described three types of repackaging attacks:
1. **Lazy Attacks:** These use automatic code obfuscation tools to repackage apps without modifying their functionality.
2. **Malware Embedding:** These embed malicious payloads into original apps without changing their core functionality.
3. **Amateur Attacks:** These may make some changes to the original apps in addition to using automatic code obfuscation tools.

Since none of these attack types modify the resources or related codes, ResDroid can detect them. Advanced attackers who are aware of ResDroid might attempt to evade detection by inserting junk resources to affect statistical features. However, ResDroid considers the relationships between resources and codes (e.g., references from XML files, loading from code) and identifies core resources, from which statistical features are extracted. Thus, junk resources that are not carefully crafted will be filtered out.

Dedicated attackers may change statistical features by simultaneously inserting resources and altering the dex file, at the cost of increased app size and degraded performance. We can apply dead-code detection techniques [12] to identify such junk functions and remove them along with the corresponding resources when computing the features.

As explained in Section 3.5, it is difficult for attackers to re-implement a new layout while maintaining the same look and feel. Additionally, to retain the normal functionality and Quality of Experience (QoE) of the repackaged app, attackers will not remove event handlers. Although they can add new event handlers, they cannot modify the result of the normalized Longest Common Subsequence (LCS) as explained in Section 3.5.3. Therefore, structural features are robust and raise the bar for attackers to evade detection.

#### 6.2 Limitations and Future Work

We observed that apps created by automatic building tools can cause false positives because these tools provide developers with templates. Apps using the same template share similar appearances and event handlers, making their statistical and structural features alike. ResDroid cannot differentiate them. In future work, we will use components' attributes to distinguish them. Another possible approach is to use code-level detection systems like DNADroid [19] to handle such cases.

If code obfuscation/app hardening systems employ various dynamic loading techniques and encryption methods to prevent static analysis, ResDroid may not be able to handle such apps through static analysis. However, since these techniques eventually load codes and resources into memory, we will design a kernel-based dynamic approach, similar to [42], which continuously monitors the behavior of a hardened app and dumps selected codes and resources after they are loaded. Additionally, we will examine how to fingerprint apps protected by different code obfuscation/app hardening systems.

### 7. Related Work

#### Code Clone Detection

Significant research has been conducted on code clone detection [11, 39, 41]. Existing approaches can be categorized into four groups [41]:
1. **Textual Analysis:** Extracts fingerprints directly from code.
2. **Lexical Analysis:** Converts code into lexical tokens and detects duplicated token sequences (e.g., CP-Miner [32]).
3. **Syntactic Analysis:** Transforms code into Abstract Syntax Trees (AST) and applies tree matching or structural metrics (e.g., Deckard [30]).
4. **Semantic Analysis:** Uses static program analysis to extract precise information about the code, such as Program Dependency Graphs (PDG) (e.g., GPLAG [33]).

Some of these methods have been used to detect repackaged apps by analyzing dex files, converted Java class files, or disassembled smali codes.

#### Repackaged Apps Detection

Assuming apps from the official market are original, DroidMOSS applies fuzzy hashing to each app’s opcodes and compares it to original apps’ fingerprints to detect repackaged apps [47]. Similarly, Androguard [1] uses standard similarity metrics to hash methods and basic blocks for comparison. Juxtapp characterizes apps through k-grams of opcodes and feature hashing, then clusters the corresponding bitvectors to identify app clones [27]. PiggyApp was designed to detect piggybacked apps, a special type of repackaged apps, which contain injected code [46]. It decouples modules according to their dependency relationships and constructs fingerprints for the primary module by collecting various features, such as requested permissions and Android API calls [46].

These methods are vulnerable to simple obfuscation techniques because they consider little semantic information about the code [29, 43, 44]. Dresnos used Normalized Compression Distance (NCD) [15] to compare the similarity of apps based on their method signatures, including external API usage, exceptions, and Control Flow Graphs (CFG) [22]. Potharaju et al. proposed an approach to detect plagiarized apps using symbol tables and method-level AST fingerprints, which can handle two kinds of obfuscation techniques: mangling symbol tables or inserting random methods with no functionality [37].

DroidSim utilizes Component-Based Control Flow Graphs (CB-CFG) to quantify the similarity between apps [43]. DNADroid constructs PDGs for each method and performs subgraph isomorphism comparisons after filtering out unnecessary methods [19]. To speed up DNADroid, AnDarwin splits PDGs into connected components (semantic blocks), each represented by a semantic vector containing specific types. It then employs Locality Sensitive Hashing (LSH) to identify code clones with similar semantic vectors [20]. Chen et al. proposed a novel approach that uses the centroid of control dependency graphs to measure the similarity between methods for detecting cross-market app clones [13]. Although these methods are better than previous ones, they can still be easily evaded by obfuscation techniques (e.g., inserting dummy code or adding data-related variables) [43, 45].

Recently, Hao et al. showed that it is possible to detect app clones using UI state transition graphs [28]. Simultaneously, Zhang et al. proposed ViewDroid, which constructs feature view graphs and applies subgraph isomorphism algorithms to measure the similarity between two apps [45]. While both ViewDroid and ResDroid leverage UI for detecting repackaged apps, there are three major differences:
1. **Activity Layout and Relationships:** ViewDroid only uses the relationships among activities, whereas ResDroid employs both the layout of activities and their relationships. ResDroid also considers Android’s fragment component, which provides similar functionality to an activity, while ViewDroid does not.
2. **Core Resources:** By examining only core resources, ResDroid is more efficient and more robust to third-party libraries than ViewDroid, which considers all views.
3. **Methodology:** ViewDroid targets pairwise app comparisons, while ResDroid is built on a two-stage methodology and equipped with two types of algorithms.

### 8. Conclusion

We propose a novel approach that leverages new features extracted from core resources and codes to detect repackaged apps. These features do not require processing all opcodes and are resilient to code obfuscation and app hardening techniques. To speed up detection, we adopt a divide-and-conquer strategy to reduce comparisons and support parallel processing. Our solution, realized in ResDroid, has demonstrated its effectiveness and efficiency through extensive evaluation using real repackaged apps.

### 9. Acknowledgment

We thank the reviewers for their comments and Wenjun Hu and Kai Chen for providing us with samples. This work is supported in part by the Hong Kong GRF (No. PolyU 5389/13E), the National Natural Science Foundation of China (No. 61202396), the PolyU Research Grant (G-UA3X), and the Open Fund of Key Lab of Digital Signal and Image Processing of Guangdong Province (2013GDDSIPL-04).

### 10. References

[1] Androguard. https://code.google.com/p/androguard/, 2011.
[2] 1.2% of apps on Google Play are repackaged to deliver ads, collect info. http://www.net-security.org/secworld.php?id=15976, November 2013.
[3] App hardening emerges as a key component of mobile security strategies. http://betanews.com/2013/12/03/app-hardening-emerges-as-a-key-component-of-mobile-security-strategies/, 2014.
[4] Gator: Program analysis toolkit for Android. http://dacongy.github.io/gator/, 2014.
[5] Managing the activity lifecycle. http://developer.android.com/training/basics/activity-lifecycle/index.html, 2014.
[6] Resources overview. http://developer.android.com/guide/topics/resources/overview.html, 2014.
[7] C. Aggarwal and C. Reddy. Data Clustering: Algorithms and Applications. Chapman and Hall/CRC, 2013.
[8] A. Andoni and P. Indyk. Near-optimal hashing algorithms for approximate nearest neighbor in high dimensions. Commun. ACM, 51(1), 2008.
[9] Arxan Technologies Inc. State of security in the app economy. http://www.arxan.com/resources/state-of-security-in-the-app-economy/.
[10] T. Azim and I. Neamtiu. Targeted and depth-first exploration for systematic testing of Android apps. In Proc. ACM SIGPLAN, 2013.
[11] S. Bellon, R. Koschke, G. Antoniol, J. Krinke, and E. Merlo. Comparison and evaluation of clone detection tools. IEEE Trans. Software Eng., 33(9), 2007.
[12] D. Beyer, A. Noack, and C. Lewerentz. Efficient relational calculation for software analysis. IEEE Trans. Software Eng., 31(2), 2005.
[13] K. Chen, P. Liu, and Y. Zhang. Achieving accuracy and scalability simultaneously in detecting application clones on Android markets. In Proc. ACM ICSE, 2014.
[14] W.-Y. Chen, Y. Song, H. Bai, C.-J. Lin, and E. Y. Chang. Parallel spectral clustering in distributed systems. IEEE Trans. Pattern Anal. Mach. Intell., 33(3), 2011.
[15] R. Cilibrasi and P. Vitanyi. Clustering by compression. IEEE Transactions on Information Theory, 51(4), 2005.
[16] Cisco Systems Inc. Annual security report, 2014.
[17] C. Collberg and J. Nagra. Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection. Addison-Wesley, 2009.
[18] Symantec Corporation. Internet security threat report, 2014.
[19] J. Crussell, C. Gibler, and H. Chen. Attack of the clones: Detecting cloned applications on Android markets. In Proc. ESORICS, 2012.
[20] J. Crussell, C. Gibler, and H. Chen. Scalable semantics-based detection of similar Android applications. In Proc. ESORICS, 2013.
[21] J. Davies, D. M. German, M. W. Godfrey, and A. Hindle. Software bertillonage. Empirical Software Engineering, 18(6), 2013.
[22] A. Dresnos. Android: Static analysis using similarity distance. In Proc. HICSS, 2012.
[23] W. Enck, P. Gilbert, B. gon Chun, L. P. Cox, J. Jung, P. McDaniel, and A. Sheth. Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In Proc. OSDI, 2010.
[24] C. Gibler, R. Stevens, J. Crussell, H. Chen, H. Zang, and H. Choi. Adrob: Examining the landscape and impact of Android application plagiarism. In Proc. ACM MobiSys, 2013.
[25] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. Riskranker: Scalable and accurate zero-day Android malware detection. In Proc. ACM MobiSys, 2012.
[26] M. Halkidi, Y. Batistakis, and M. Vazirgiannis. On clustering validation techniques. Journal of Intelligent Information Systems, 17(2-3), 2001.
[27] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and D. Song. Juxtapp: A scalable system for detecting code reuse among Android applications. In Proc. DIMVA, 2012.
[28] S. Hao, B. Liu, S. Nath, W. Halfond, and R. Govindan. PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps. In Proc. ACM MobiSys, 2014.
[29] H. Huang, S. Zhu, P. Liu, and D. Wu. A framework for evaluating mobile app repackaging detection algorithms. In Proc. TRUST, 2013.
[30] L. Jiang, G. Misherghi, Z. Su, and S. Glondu. Deckard: Scalable and accurate tree-based detection of code clones. In Proc. IEEE ICSE, 2007.
[31] J.-H. Jung, J. Y. Kim, H.-C. Lee, and J. H. Yi. Repackaging attack on Android banking applications and its countermeasures. Wireless Personal Comm., 73(4), 2013.
[32] Z. Li, S. Lu, S. Myagmar, and Y. Zhou. CP-Miner: Finding copy-paste and related bugs in large-scale software code. IEEE Transactions on Software Engineering, 32(3), 2006.
[33] C. Liu, C. Chen, J. Han, and P. Yu. GPLAG: Detection of software plagiarism by program dependence graph analysis. In Proc. ACM KDD, 2006.
[34] M. Newman. Networks: An Introduction. Oxford University Press, 2010.
[35] A. Papadopoulos. Nearest Neighbor Search: A Database Perspective. Springer, 2004.
[36] D. Pelleg, A. W. Moore, et al. X-means: Extending k-means with efficient estimation of the number of clusters. In Proc. ICML, 2000.
[37] R. Potharaju, A. Newell, C. Nita-Rotaru, and X. Zhang. Plagiarizing smartphone applications: Attack strategies and defense techniques. In Proc. ESSoS, 2012.
[38] C. Qian, X. Luo, Y. Shao, and A. Chan. On tracking information flows through JNI in Android apps. In Proc. IEEE/IFIP DSN, 2014.
[39] D. Rattan, R. Bhatia, and M. Singh. Software clone detection: A systematic review. Information and Software Technology, 55(7), 2013.
[40] A. Rountev and D. Yan. Static reference analysis for GUI objects in Android software. In Proc. IEEE/ACM CGO, 2014.
[41] C. Roy, J. Cordy, and R. Koschke. Comparison and evaluation of code clone detection techniques and tools: A qualitative approach. Sci. Comput. Program., 74(7), 2009.
[42] Y. Shao, X. Luo, and C. Qian. Rootguard: Protecting rooted Android phones. IEEE Computer, June 2014.
[43] X. Sun, Y. Zhongyang, Z. Xin, B. Mao, and L. Xie. Detecting code reuse in Android applications using component-based control flow graph. In Proc. IFIP SEC, 2014.
[44] M. Vasquez, A. Holtzhauer, C. Bernal-Cardenas, and D. Poshyvanyk. Revisiting Android reuse studies in the context of code obfuscation and library usages. In Proc. IEEE MSR, 2014.
[45] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu. ViewDroid: Towards obfuscation-resilient mobile application repackaging detection. In Proc. ACM WiSec, 2014.
[46] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast, scalable detection of piggybacked mobile applications. In Proc. ACM CODASPY, 2013.
[47] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting repackaged smartphone applications in third-party Android marketplaces. In Proc. ACM CODASPY, 2012.
[48] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization and evolution. In Proc. IEEE Symp. Security and Privacy, 2012.