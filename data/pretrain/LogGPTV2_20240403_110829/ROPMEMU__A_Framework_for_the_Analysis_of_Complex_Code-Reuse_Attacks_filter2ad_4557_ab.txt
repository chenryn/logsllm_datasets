ing mechanism based on the sysenter instruction using
the MSR registers 0x175 (IA32_SYSENTER_ESP) and 0x176
(IA32_SYSENTER_EIP), initializes the global state of the
rootkit, prepares a memory region to deal with multiple
invocations, and ﬁnally generates the second chain – the
so-called copy chain. The copy chain is the only persis-
tent ROP chain, and it is invoked every time a hook is
triggered. It is also important to note that rootkit itself
guarantees that the ﬁrst chain is always and entirely stored
in memory, even if its size is large [58]. First, it saves all
the general purpose registers in the global state. Second,
it creates and copies in memory a dynamic chain for each
invocation of the hook. This third chain is called the dis-
patcher chain. The dispatcher chain is necessary to deal
with hook invocations by multiple threads. The goal of
this chain is to create a ﬁnal, ad-hoc payload chain, which
contains the core functionality of the rootkit and, at the
end of its execution, it restores the original registers to
resume the normal kernel execution.
The complexity of these four chains is considerably high.
First of all, the size of a single chain is huge compared to
the chains used by ordinary exploits. For instance the copy
chain contains over 180k gadgets. Second, these chains
have a non-linear control ﬂow logic – making their anal-
ysis very complex. Third, the presence of dynamically
generated chains make the analysis of this rootkit similar
to a multi-stage packed malware, limiting the applicability
of static analysis. Finally, the four chains compose a real
kernel rootkit and thus the analyst has to deal with kernel
issues such as privileged instructions and interrupts.
3. ROP ANALYSIS
To date, the complexity of analyzing ROP code has been
completely underestimated. Few studies have focused on
this problem, mainly taking simplistic approaches applied
only to small examples. The ﬁrst issue that an analyst may
encounter when dealing with code reuse attacks is the fact
that they are hard to locate in the ﬁrst place. Since no
code is injected in a ROP-based attack, ﬁnding the entry
point of the chain can be diﬃcult – especially when the
input is the entire system memory. Three previous studies
have proposed solutions for this problem [55, 47, 33] and
therefore we will build on top of them for the rest of our
paper.
However, locating the entry point is only the tip of the
iceberg. The real analysis (i.e., what needs to be done
after a chain has been located) is much more complex,
and present a number of novel challenges:
[C1] Verbosity – the majority of ROP gadgets contain
spurious instructions. For example, a gadget intended to
increment eax may also pop a value from the stack before
hitting the ret instruction that triggers the next gadget
in the chain. Moreover, the code of a ROP chain con-
tains a large percentage of return or other indirect control
ﬂow instructions, whose only goal is to connect the gad-
gets together. These are only few examples of why ROP
code is very verbose and contains a large fraction of dead
code that makes it harder for analysts to understand it.
However, this is probably the simplest problem to solve as
many transformations proposed in the compiler literature
already exist to simplify assembly code.
[C2] Stack-Based Instruction Chaining – the most
obvious diﬀerence between a ROP chain and a normal pro-
gram is that in a chain the instructions are not consecutive
in memory, but they are instead grouped in small gadgets
connected together by indirect control ﬂow instructions.
So, what in a normal program could be a single block of
50 instructions, in a ROP chain can be split into more than
40 blocks chained by ret instructions.
At a ﬁrst glance, this problem may seem trivial to solve.
Since the addresses of each gadget in the chain are saved in
memory, one may erroneously think that it would be easy
to automatically retrieve them, collect the corresponding
pieces of code, and replace the entire chain with a sin-
gle sequence of instructions. However, the stack-based in-
struction chaining can introduce subtle side eﬀects that
are hard to identify with a simple static analysis approach.
For instance, since the sequence of gadgets is saved on the
stack, but the code of each gadget also interacts with the
stack (to retrieve parameters or just because of spurious
instructions), in order to correctly identify the address of
each gadget it is necessary to emulate every single instruc-
tion in the code.
[C3] Lack of Immediate Values – another diﬀerence
between normal code and ROP chains is the fact that
chains are typically constructed with “generic” gadgets (such
as “store an arbitrary value in the rax register”) that oper-
ate on parameters which are also stored on the stack. As
a result, the vast majority of immediate values that are
assigned to registers are interleaved on the stack with the
gadget addresses. Again, code emulation is required to lo-
cate them and restore them back to their original position
in the code.
[C4] Conditional Branches – in a ROP chain, a branch
condition implies a change in the stack pointer instead
of a more traditional change in the instruction pointer.
This means that a simple conditional jump may be en-
coded with dozens of diﬀerent instructions spanning mul-
tiple gadgets (e.g., to set the ﬂag register according to the
required condition, test its value, and conditionally incre-
ment the esp register). To translate the chain into more
readable code, it is therefore necessary to identify these
patterns based on their semantics and replace them with
single branch instructions.
[C5] Return to Functions – function calls are typically
implemented in ROP as simple return to the functions
entry point. However, since normal gadgets are also often
extracted from code located inside libraries, it is hard to
distinguish a function call from another gadget. As it is the
case for statically linked binaries, the lack of information
on external library calls can make the reverse engineering
process much more tedious and complicated.
[C6] Dynamically Generated Chains – the instruc-
tions of normal programs are typically located in a read-
only section of the executable. Dynamically modiﬁed code
is common in malware (e.g., as a result of packing) and, in
fact, this severely limits the ability to perform static anal-
ysis on malicious code and considerably slows down the
reverse engineering process. On the contrary, ROP chains
are located on the stack, and it is therefore simple to use
gadgets to prepare the execution of other gadgets in the
future. This dynamicity means that it is not necessary for
the entire chain to reside in memory at the same time –
but it is instead common to build chains (or part thereof)
on the ﬂy.
[C7] Stop Condition – in this paper we assume that the
analyst is able to locate the beginning of a ROP chain in
memory. However, since an emulator is needed to analyze
its content, it is important to also have a termination con-
dition to decide when all the gadgets have been extracted
and the emulation process can stop. The fact that com-
plex ROP chains can invoke functions (which in turn may
invoke other functions) interleaved with normal gadgets,
and the fact that a chain can dynamically generate an-
other chain in a diﬀerent part of the memory, make this
problem very hard to solve in the general case. For ex-
ample, when does a ROP rootkit (that reuses instructions
from the existing code in the kernel) terminate and the
normal kernel tasks resume?
3.1
Implications
The previous seven challenges have several important
implications for the analysis of ROP chains and previous
works only proposed partial solutions. For instance, Lu
et al. [36] and Yadegari et al. [60] identiﬁed a number of
code transformations to handle [C1]. Moreover, Stancill et
al. [55] and Lu et al. [36] used simple heuristics to follow the
value of the stack pointer, thus partially addressing [C2]
and [C3]. However, previous heuristics only applied to
ret-based ROP chains, and were unable to follow indirect
calls and jump instructions. Sadly, [C4-7] have never been
mentioned before, probably because only in the past two
years ROP chains have become complex enough to raise
these points.
As it is better explained in Section 4, to fully address
[C2],[C3], and [C6] it is necessary to emulate all the in-
structions in the chains and keep a shadow copy of the
memory content. Moreover, a solution based on multi-path
emulation is required to explore each path in the chain and
retrieve its entire code. In turn, this approach requires the
system to implement heuristics to detect the presence of
branch instructions (C4). Finally, while recognizing func-
tions (C5) can be addressed by using symbols information
extracted from libraries and kernel functions, these func-
tions often invoke system calls and this is a major obstacle
for an emulator because their return values cannot be pre-
dicted with static analysis. Functions are not the only
issue when using an emulator: precise heuristics for the
stopping condition (C7) are also required and (as better
explained in the next section) hard to implement.
This short discussion emphasizes how ROP analysis is
in fact a multi-faced problem whose solution requires a
combination of sophisticated techniques.
3.2 Adversarial Model
In this paper we assume that a motivated and well funded
attacker was able to compromise a machine and success-
fully install malicious code in the form of a ROP chain.
This can eﬀectively bypass all the operating systems pro-
tections. For example, in the particular case of a ROP
kernel rootkit, these protections include the kernel code
integrity (e.g., PatchGuard), the driver signature enforce-
ment, and the NX regions both at user-land and kernel-
land (e.g., NX pools in Windows kernel from Windows 8).
We also assume a fully protected machine equipped with
an Intel Ivy Bridge/Haswell CPU with the Supervisor Mode
Execution Prevention (SMEP) and the Supervisor Mode
Access Prevention (SMAP), and running an operating sys-
tem (either Windows or Linux) that implements address
space layout randomization (ASLR) in userspace, kernel
memory, and for all the modules.
The infected machine can be either a bare-metal com-
puter or a guest virtual machine. In the second case, the
memory forensic analysis may require an introspection sys-
tem as the one provided by [22]. We also assume that the
attacker can try to minimize the footprint of the malicious
code by generating new gadgets at runtime and by over-
writing them when they are not anymore needed.
Finally, we assume that the analyst was able to acquire a
physical memory dump (e.g., by using pmem, lime, fmem,
or by performing a DMA attack) after the malicious code
became resident in memory. The technique proposed in
this paper does not make any assumption on the ROP
payload. The gadget and the chain have no constraint on
the length as well as on the type of instructions. The case
in which the chain is hostile and implement anti-analysis
tricks is discussed in Section 6.
4. SYSTEM DESIGN
The ROPMEMU framework adopts a set of diﬀerent
techniques to analyze ROP chains and reconstruct their
equivalent code in a form that can be analyzed by tradi-
tional reverse engineering tools. In particular, it is based
on memory forensics (as its input is a physical memory
dump), code emulation (to faithfully rebuild the original
ROP chain), multi-path execution (to extract the ROP
chain payload), CFG recovery (to rebuild the original con-
trol ﬂow), and a number of compiler transformations (to
simplify the ﬁnal instructions of the ROP chain).
The framework is divided in diﬀerent components that
interact as shown in Figure 1 in ﬁve main analysis phases:
• Multipath Emulation - This step emulates the as-
sembly instructions that compose the ROP chain.
This is the only way to rebuild the exact instance
of the running chain at the time of the dump. All
the possible branches are explored and an indepen-
dent trace (annotated with the values of registers and
memory) is generated for each execution path (C2
and C6). The emulator is also designed to recognize
a number of returns-to-library functions, skip over
their body, and simulate their execution by generat-
ing dummy data and return values (C4).
• Trace Splitting - In this phase the system analyzes
all the traces generated by the emulator, removes the
repetitions, and extracts the unique blocks of code.
• Unchaining - This phase applies a number of as-
sembly transformations to simplify each ROP trace
by removing the connections between gadgets and
merging the content of consecutive gadgets in a single
basic block. This step is also responsible to remove
immediate values from the stack and assign them to
the corresponding registers (C2 and C3).
• CFG recovery - This pass merges all the code blocks
in a single program, recovering the original control
ﬂow graph of the ROP chain. This phase comprises
two steps. In the ﬁrst one, the traces are merged in a
single graph-based representation. The second step
translates the graph into a real x86 program by iden-
tifying the instructions associated to the branch con-
ditions and by replacing them with more traditional
EIP-based conditional jumps (C4). At the end of
this phase, the program is saved in an ELF ﬁle, to
allow traditional reverse engineering tools (e.g., IDA
Pro) to operate on it.
• Binary optimization - In the ﬁnal step, we apply
known compiler transformations to further simplify
the assembly code in the ELF ﬁle. For instance, this
phase removes dead instructions in the gadgets and
generates a clean and optimized version of the pay-
load (C1).
In the rest of the section, we introduce each phase in
detail and we describe how each of them have been imple-
mented in our system.
4.1 Chain Discovery
Finding ROP chains in a physical memory dump is not
a trivial task. However, three solutions have already been
proposed in the literature [55, 47, 33] for this problem.
Therefore, for the sake of simplicity, in this paper we as-
sume that the analyst is provided with an image of the
memory and an entry point of the ﬁrst ROP chain.
Our case study was complicated by the fact that only
one of the chains is persistent (the Copy Chain), while
the other ones are generated on the ﬂy depending on the
system’s state and therefore their content is only available
in memory for few milliseconds. As a consequence, it is
unrealistic to require an analyst to collect a snapshot of
the memory containing all ROP chains – and therefore
their content needs to be reconstructed by our system.
The starting point of these dynamically generated chains
is automatically derived from the emulation of the previous