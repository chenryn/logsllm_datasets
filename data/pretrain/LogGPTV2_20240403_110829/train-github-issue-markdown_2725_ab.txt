    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'item': }
    notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")
            assert not self.is_historic()
            if self.argnames:
                notincall = set(self.argnames) - set(['__multicall__']) - set(
                    kwargs.keys())
                if notincall:
                    warnings.warn(
                        "Argument(s) {} which are declared in the hookspec "
                        "can not be found in this hook call"
                        .format(tuple(notincall)),
                        stacklevel=2,
                    )
    >       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:617: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        def _hookexec(self, hook, methods, kwargs):
            # called from all hookcaller instances.
            # enable_tracing will set its own wrapping function at self._inner_hookexec
    >       return self._inner_hookexec(hook, methods, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:222: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        self._inner_hookexec = lambda hook, methods, kwargs: \
            hook.multicall(
                methods, kwargs,
    >           firstresult=hook.spec_opts.get('firstresult'),
            )
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:216: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    item = 
        def pytest_runtest_call(item):
            _update_current_test_var(item, 'call')
            try:
    >           item.runtest()
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:106: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
        def runtest(self):
            """ execute the underlying test function. """
    >       self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    /usr/lib/python2.7/dist-packages/_pytest/python.py:1171: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'pyfuncitem': }
    notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")
            assert not self.is_historic()
            if self.argnames:
                notincall = set(self.argnames) - set(['__multicall__']) - set(
                    kwargs.keys())
                if notincall:
                    warnings.warn(
                        "Argument(s) {} which are declared in the hookspec "
                        "can not be found in this hook call"
                        .format(tuple(notincall)),
                        stacklevel=2,
                    )
    >       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:617: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    hook = 
    methods = [, ]
    kwargs = {'pyfuncitem': }
        def _hookexec(self, hook, methods, kwargs):
            # called from all hookcaller instances.
            # enable_tracing will set its own wrapping function at self._inner_hookexec
    >       return self._inner_hookexec(hook, methods, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:222: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    hook = 
    methods = [, ]
    kwargs = {'pyfuncitem': }
        self._inner_hookexec = lambda hook, methods, kwargs: \
            hook.multicall(
                methods, kwargs,
    >           firstresult=hook.spec_opts.get('firstresult'),
            )
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:216: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    pyfuncitem = 
        @hookimpl(trylast=True)
        def pytest_pyfunc_call(pyfuncitem):
            testfunction = pyfuncitem.obj
            if pyfuncitem._isyieldedfunction():
                testfunction(*pyfuncitem._args)
            else:
                funcargs = pyfuncitem.funcargs
                testargs = {}
                for arg in pyfuncitem._fixtureinfo.argnames:
                    testargs[arg] = funcargs[arg]
    >           testfunction(**testargs)
    /usr/lib/python2.7/dist-packages/_pytest/python.py:147: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    expected = '/build/matplotlib-2.2.2/result_images/test_bbox_tight/bbox_inches_tight_suptile_legend-expected.png'
    actual = '/build/matplotlib-2.2.2/result_images/test_bbox_tight/bbox_inches_tight_suptile_legend.png'
    tol = 0.306, in_decorator = True
        def compare_images(expected, actual, tol, in_decorator=False):
            """
            Compare two "image" files checking differences within a tolerance.
            The two given filenames may point to files which are convertible to
            PNG via the `.converter` dictionary. The underlying RMS is calculated
            with the `.calculate_rms` function.
            Parameters
            ----------
            expected : str
                The filename of the expected image.
            actual :str
                The filename of the actual image.
            tol : float
                The tolerance (a color value difference, where 255 is the
                maximal difference).  The test fails if the average pixel
                difference is greater than this value.
            in_decorator : bool
                If called from image_comparison decorator, this should be
                True. (default=False)
            Examples
            --------
            img1 = "./baseline/plot.png"
            img2 = "./output/plot.png"
            compare_images( img1, img2, 0.001 ):
            """
            if not os.path.exists(actual):
                raise Exception("Output image %s does not exist." % actual)
            if os.stat(actual).st_size == 0:
                raise Exception("Output image file %s is empty." % actual)
            # Convert the image to png
            extension = expected.split('.')[-1]
            if not os.path.exists(expected):
                raise IOError('Baseline image %r does not exist.' % expected)
            if extension != 'png':
                actual = convert(actual, False)
                expected = convert(expected, True)
            # open the image files and remove the alpha channel (if it exists)
            expectedImage = _png.read_png_int(expected)
            actualImage = _png.read_png_int(actual)
            expectedImage = expectedImage[:, :, :3]
            actualImage = actualImage[:, :, :3]
            actualImage, expectedImage = crop_to_same(
                actual, actualImage, expected, expectedImage)
            diff_image = make_test_filename(actual, 'failed-diff')
            if tol        rms = calculate_rms(expectedImage, actualImage)
    build/lib.linux-x86_64-2.7/matplotlib/testing/compare.py:439: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    expectedImage = array([[[255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
       ...55, 255, 255],
            [255, 255, 255],
            [255, 255, 255]]], dtype=int16)
    actualImage = array([[[255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
       ...55, 255, 255],
            [255, 255, 255],
            [255, 255, 255]]], dtype=int16)
        def calculate_rms(expectedImage, actualImage):
            "Calculate the per-pixel errors, then compute the root mean square error."
            if expectedImage.shape != actualImage.shape:
                raise ImageComparisonFailure(
                    "Image sizes do not match expected size: {0} "
    >               "actual size {1}".format(expectedImage.shape, actualImage.shape))
    E           ImageComparisonFailure: Image sizes do not match expected size: (593, 921, 3) actual size (592, 921, 3)
    build/lib.linux-x86_64-2.7/matplotlib/testing/compare.py:369: ImageComparisonFailure
    __________________ test_nose_image_comparison[failing figure] __________________
    self = 
    func =  at 0x7f13fa2209b0>, when = 'call'
        def __init__(self, func, when):
            #: context of invocation: one of "setup", "call",
            #: "teardown", "memocollect"
            self.when = when
            self.start = time()
            try:
    >           self.result = func()
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:189: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    >   return CallInfo(lambda: ihook(item=item, **kwds), when=when)
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:175: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'item': }
    notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")
            assert not self.is_historic()
            if self.argnames:
                notincall = set(self.argnames) - set(['__multicall__']) - set(
                    kwargs.keys())
                if notincall:
                    warnings.warn(
                        "Argument(s) {} which are declared in the hookspec "
                        "can not be found in this hook call"
                        .format(tuple(notincall)),
                        stacklevel=2,
                    )
    >       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:617: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 