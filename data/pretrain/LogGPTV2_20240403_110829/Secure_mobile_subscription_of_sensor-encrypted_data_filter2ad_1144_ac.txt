so that p = 2p
safe primes.
2. Let e1, e2,··· , el be the enumeration of the l primes
after n (i.e., el > ··· > e2 > e1 > n). (Note that
µ is large enough so that even el is still far less
than both p
and q
.)
′
′
′
q
(= (cid:21)(N )
).
2
′
3. Let N = pq and m = p
4. Let H(·) : QR
→ K be a cryptographic one-way
hash function, where K is the key space associated
with the symmetric encryption to be employed for
protecting the sensed data.
N
5. Let F be the factorial of n, i.e., F = n!.
6. Randomly choose a secret s ∈ QR
\{1}, and a
polynomial f (x) of degree t in Zm.
7. Publish (N, H(·), F ) as the public system param-
eters and securely store K = (s, f (x)) as the mas-
ter secret key .
N
8. For speeding up NodeKeyGen and UserKey-
∏
,··· , s
b=0;b̸=a(a − b).
f (t)F 2
(cid:12)t
t
can be pre-
Gen, sF 2
computed, where βa =
, and s
(cid:12)0
f (0)F 2
• NodeKeyGen(K, i): For K = (s, f (x)), output
ki;∗ = sf (i)F 2
mod N.
• UserKeyGen(K, J): For K = (s, f (x)), output
k∗;J = (sf (0)EJ
F 2
(cid:12)0 , sf (1)EJ
∏
l
z=1;z =∈J ez, and βa =
where EJ =
¶
which is always a factor of F 2.
• NodeKeyDer(ki;∗, j): Output
F 2
t
F 2
(cid:12)t ) mod N,
∏
(cid:12)1 ,··· , sf (t)EJ
b=0;b̸=a(a − b)
l∏
ki;j = H(kEj
i;∗ mod N ), where Ej =
ez.
z=1;z̸=j
¶
F 2 is not only for canceling βa such that division in the
exponent is not necessary, but also for the security proof.
• UserKeyDer(k∗;J , i, j): Let k∗;J = (k0, k1,··· , kt).
For j ∈ J, output
∏
ki;j = H((k(cid:11)i0
∏
z∈J\{j} ez mod N ),
··· k(cid:11)it
t
1
)
0 k(cid:11)i1
b=0;b̸=a(i − b) for a = 0, 1,··· , t. As
where αia =
discussed, these αia’s are the numerators of the La-
grange interpolation coe(cid:14)cients involved in computing
f (i) =
∑
t
a=0 λiaf (a).
t
∏
Correctness.
t
b=0;b̸=a
lation coe(cid:14)cients. For j ∈ J,
Let λia = (cid:11)ia
(cid:12)a
=
i−b
a−b , be the Lagrange interpo-
kEj
i;∗ mod N
)EJ
∏
z∈J\{j} ez mod N
= (sf (i)F 2
= s((cid:21)i0f (0)+···+(cid:21)itf (t))EJ F 2
(cid:11)i0
= s(
(cid:12)0
= (k(cid:11)i0
0 k(cid:11)i1
∏
f (0)EJ F 2+···+
··· k(cid:11)it
z∈J\{j} ez mod N
f (t)EJ F 2)
∏
z∈J\{j} ez mod N
∏
z∈J\{j} ez mod N
(cid:11)it
(cid:12)t
)
1
t
That is, the encryption key derived by the node i is the
same as the decryption key derived by the mobile user at
time period j ∈ J.
5.2 Security Proof
We claim the static security (as de(cid:12)ned in Section 4.2) of
SMS-SED with the following theorem.
Theorem 1. SMS-SED is a secure (t, n)-threshold time-
based key management scheme when H(·) is modeled as a
random oracle, and under the strong QR-RSA assumption.
Proof. Suppose there is an adversary A breaking our
scheme. Given a strong QR-RSA problem instance (y, N ),
where N is a safe RSA modulus and y ∈ QR
N , we can con-
struct another polynomial time algorithm B to break the
strong QR-RSA assumption. This is done as follows. After
A chooses the set ^S of t nodes he may corrupt, B chooses
′ ∈R {1, 2,··· , n}\ ^S and j
′ ∈R {1, 2,··· , l}, and enumer-
i
ates the l primes e1, e2,··· , el after n. Then B prepares
(sf (0)ej′ F 2
(cid:12)0 , sf (1)ej′ F 2
(cid:12)1 ,··· , sf (t)ej′ F 2
(cid:12)t ) mod N
by the following four steps:
1. Since y ∈ QR
′
′
q
and ej′ ≪ q
N , there exist s and ^y such that s^y ≡ y
(mod N ). Since ej′ ≪ p
, ej′−1 mod m
′
exists (this still holds even if ej′ itself is not prime be-
′
has no common divisor with ej′ ). Let
cause m = p
)ej′ ≡ y (mod N ).
′
f (i
Note that B does not know sf (i
) due to not knowing
the factorization of N (and thus not being able to com-
−1
j′ mod m), but this still implicitly determines
pute e
′
one sample point for f (x) mod m at x = i
) = ej′−1 ^y mod m such that sf (i
.
′
′
′
2. Randomly choose ri ∈ Z⌊N=4⌋. Let sf (i) ≡ yri ≡
)ej′ ri (mod N ) for i ∈ ^S. That is, for these | ^S| =
sf (i
t sample points, it is implicitly de(cid:12)ned that f (i) ≡
′
f (i
∏
b=0;b̸=a(a − b) for a = 0, 1,··· , t.
)ej′ ri (mod m).
t
3. Compute βa =
233
Table 1: Quick-reference notation: symbols and parameters
z-th prime after n (i.e., el > ··· > e2 > e1 > n), z ∈ {1, 2,··· , l}
ez
ki;∗
node key secretly issued by the control center
k∗;J
user key assigned for those subscribing to J
ki;j
symmetric session key for data protection as well as data access
l
total number of time periods for user subscription (e.g., 4096)
′
m
product of two distinct large primes p
n
total number of sensor nodes in the WSN (e.g., 2000)
t
maximum number of sensor nodes that may be corrupted (e.g., 100)
F
factorial of n (i.e., n!)
H(·)
a cryptographic one-way hash function of appropriate range and domain
user subscription set, an arbitrary subset of time indices {1, 2,··· , l}
J
′
N
product of two distinct safe primes p (= 2p
λ(N ) Euler’s totient of n, (= lcm(p − 1, q − 1))
+ 1) and q (= 2q
and q
+ 1)
′
′
4. Apply the Lagrange interpolation to the (t + 1) values
(Step
of f (x) mod m sampled at the (t + 1) points: i
1) and i ∈ ^S (Step 2). Thus B has
′
f (x) ≡ λxi′ f (i
′
∏
λxif (i)
) +
i∈ ^S
x−j
i′−j and λxi =
∏
(mod m),
j∈{i′}∪ ^S;j̸=i
x−j
i−j
where λxi′ =
j∈ ^S
for i ∈ ^S. Therefore,
sf (x)ej′ ≡ s(cid:21)xi′ f (i
∏
′
≡ y(cid:21)xi′ ·
)ej′ ·
∏
i∈ ^S
∑
∏
i∈ ^S
s(cid:21)xif (i)ej′
(mod N )
yri(cid:21)xiej′
(mod N ).
i∈ ^S
For a = 0, 1,··· , t, B evaluates (sf (x)ej′
raises it to the power of F 2
(cid:12)a
,
) at a and then
sf (a)ej′ F 2
(cid:12)a ≡ y(cid:21)ai′ F 2
(cid:12)a ·
yri(cid:21)aiej′ F 2
(cid:12)a
(mod N ).
As in the actual scheme, F 2 = (n!)2 cancels βa. Simi-
larly, F 2 also cancels the denominators in λai′ and λai, so
B can prepare the above (t + 1) values sf (a)ej′ F 2
(cid:12)a mod N ,
a = 0, 1,··· , t, without knowing the factorization of N . Al-
so note that gcd(ez, F 2) = 1 for any 1 ≤ z ≤ l since e1 > n.
Query Phase 1. For the static security setting, since A
may corrupt the nodes with indices in ^S, B can just
send to A the keys ki;∗ = sf (i)F 2
mod
N for all i ∈ ^S. B then simulates the other oracles for
A. Without loss of generality, we assume each query
is issued once only.
mod N = yriF 2
• MobiExt(J): If j
Otherwise, B responds with
′ ∈ J, B aborts.
k∗;J = (sf (0)EJ
F 2
(cid:12)0 ,··· , sf (t)EJ
F 2
(cid:12)t ) mod N.
′
As long as j
(sf (0)ej′ F 2
fore by raising each of the sf (a)ej′ F 2
to the power of
/∈ J, such k∗;J can be computed from
∏
(cid:12)t ) mod N prepared be-
(cid:12)0 ,··· , sf (t)ej′ F 2
(cid:12)a mod N term
l
z=1;z̸=j′;z =∈J ez.
′
mod N .
• Random oracle H(w): B (cid:12)rst checks if wej′ ≡
If not, B responds with a ran-
yEj′ F 2
dom number from the key space K. If the con-
)ej′ ≡ y (mod N ), B shall
′
dition holds, since sf (i
(mod N ). That is, B
have wej′ ≡ sf (i
encounters a \special" w from A as a random o-
racle query: w ≡ sf (i
(mod N ). Denote
) by x. Then B has both y =
the known sf (i
xej′
mod N. Note that
Ej′ =
gcd(ej′ , Ej′ F 2) = 1. Therefore, with y and w, B
mod N and w = xEj′ F 2