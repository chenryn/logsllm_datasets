```
$ docker container run --name main -dit \
 --net container:pause \
 alpine:latest /bin/sh
```
由于`pause`和样本容器都是同一个网络命名空间的一部分，它们可以通过`localhost`相互联系。为了说明这一点，我们首先得把`exec`放进主容器:
```
$ docker exec -it main /bin/sh
```
现在，我们可以测试运行在`pause`容器中并在端口`80`上侦听的与 Nginx 的连接。如果我们使用`wget`实用程序这样做，我们会得到以下结果:
![](img/22ed2c77-6f0e-4ccc-9c58-91b684083352.png)
Two containers sharing the same network namespace
输出显示我们确实可以在`localhost`上访问 Nginx。这证明了两个容器共享同一个命名空间。如果这还不够，我们可以使用`ip`工具在两个容器中显示`eth0`，我们将获得完全相同的结果，具体来说，相同的 IP 地址，这是 pod 的特征之一，其中所有容器共享相同的 IP 地址:
![](img/70f62b15-ffae-423b-965a-7c7259d2492e.png)
Displaying the properties of eth0 with the ip tool
如果我们检查`bridge`网络，只能看到`pause`容器被列出。另一个容器没有在`Containers`列表中获得条目，因为它正在重用`pause`容器的端点:
![](img/0e722c6c-bd7d-4a85-bc7f-b206ada3c83a.png)
Inspecting the Docker default bridge network
# 豆荚生命周期
我们在本书前面已经了解到容器有一个生命周期。容器被初始化、运行并最终退出。当一个容器退出时，它可以用退出代码零优雅地完成这个操作，或者它可以用一个错误终止，这相当于一个非零的退出代码。
同样，豆荚也有生命周期。由于一个容器可以包含多个容器，因此这个生命周期比单个容器的生命周期稍微复杂一些。下图描绘了 pod 的生命周期:
![](img/69880b20-db53-4f71-b20b-9d5ae1e4ff9f.png)
Life cycle of Kubernetes pods
当在集群节点上创建 pod 时，它首先进入**待定**状态。一旦吊舱的所有容器启动并运行，吊舱进入**运行**状态。只有当所有容器都成功运行时，pod 才会进入这种状态。如果 pod 被要求终止，它将请求它的所有容器终止。如果所有容器都以出口代码零结束，则容器进入**成功**状态。这是幸福的道路。
现在，让我们看看导致吊舱处于**故障**状态的一些场景。有三种可能的情况:
*   如果在吊舱启动过程中，至少有一个容器无法运行且出现故障(即，它以非零退出代码退出)，吊舱将从**待定**状态进入**故障**状态
*   如果运输舱处于运行状态，并且其中一个容器突然崩溃或以非零退出代码退出，则运输舱从**运行**状态转换到**故障**状态
*   如果吊舱被要求终止，并且在关闭期间，至少一个容器以非零退出代码退出，那么吊舱也进入**故障**状态
# Pod 规格
在 Kubernetes 集群中创建 pod 时，我们可以使用命令式或声明式方法。我们在本书前面已经讨论了这两种方法的区别，但是为了重新表述重要的方面，使用声明性方法意味着我们编写了一个描述我们想要达到的最终状态的清单。我们把*如何*的细节留给指挥者。我们想要达到的最终状态也叫做**想要的状态**。总的来说，声明式方法在所有已建立的编排器中都是非常受欢迎的，Kubernetes 也不例外。
因此，在本章中，我们将专门关注声明性方法。pod 的清单或规范可以使用 YAML 或 JSON 格式编写。在这一章中，我们将集中讨论 YAML，因为它对我们人类来说更容易阅读。让我们看一个示例规范。以下是`labs`文件夹`ch12`子文件夹中`pod.yaml`文件的内容:
```
apiVersion: v1
kind: Pod
metadata:
  name: web-pod
spec:
  containers:
  - name: web
    image: nginx:alpine
    ports:
    - containerPort: 80
```
Kubernetes 中的每个规范都是从版本信息开始的。Pods 已经存在了相当长的时间，因此 API 版本是 v1。第二行指定了我们想要定义的 Kubernetes 对象或资源的类型。显然，在这种情况下，我们想要指定一个 pod。接下来是带有元数据的块。至少，我们需要给这个舱起个名字。在这里，我们称之为`web-pod`。接下来的下一个块是`spec`块，它包含了吊舱的规格。最重要的部分(也是这个简单示例中唯一的部分)是这个容器的所有容器的列表。我们这里只有一个容器，但是可以有多个容器。我们为容器选择的名称是`web`，容器映像是`nginx:alpine`。最后，我们定义容器公开的端口列表。
一旦我们编写了这样的规范，我们就可以使用 Kubernetes CLI `kubectl`将其应用到集群中。在终端中，导航到`ch12`子文件夹并执行以下命令:
```
$ kubectl create -f pod.yaml
```
其将以`pod "web-pod" created`回应。然后我们可以用`kubectl get pods`列出群集中的所有豆荚:
```
$ kubectl get pods
NAME      READY   STATUS    RESTARTS   AGE
web-pod   1/1     Running   0          2m
```
不出所料，我们有一个吊舱处于运行状态。根据定义，吊舱被称为`web-pod`。我们可以通过使用`describe`命令获得更多关于运行吊舱的详细信息:
![](img/39b441f6-31e7-48f5-9e1d-4400a39cb566.png)
Describing a pod running in the cluster
请注意前面`describe`命令中的符号`pod/web-pod`。其他变体也是可能的，例如`pods/web-pod`或`po/web-pod`。`pod`和`po`是`pods`的别名。`kubectl`工具定义了很多别名，让我们的生活轻松一点。
`describe`命令给了我们大量关于吊舱的有价值的信息，尤其是这个吊舱受到影响时发生的事件列表。该列表显示在输出的末尾。
`Containers`部分的信息与我们在`docker container inspect`输出中找到的信息非常相似。
我们还看到一个带有一些类型为`Secret`的条目的`Volumes`部分。我们将在下一章讨论 Kubernetes 的机密。另一方面，接下来将讨论卷。
# 荚和卷
在关于容器的一章中，我们已经了解了卷及其访问和存储持久数据的目的。由于容器可以装载大量货物，豆荚也可以这样做。实际上，装载卷的确实是容器，但这只是一个语义细节。让我们首先看看如何在 Kubernetes 中定义一个卷。Kubernetes 支持过多的卷类型，我们不会过多地讨论这方面的细节。让我们通过定义一个名为`my-data-claim`的`PersistentVolumeClaim`来隐式创建一个本地卷:
```
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-data-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
```
我们定义了一个请求 2 GB 数据的声明。让我们创建这个声明:
```
$ kubectl create -f volume-claim.yaml
```
我们可以使用`kubectl` ( `pvc`是`PersistentVolumeClaim`的快捷方式)列出索赔:
![](img/30c92ef6-dc6e-455c-bf10-a1aa9dbd8a25.png)
List of PersistentStorageClaim objects in the cluster
在输出中，我们可以看到声明已经隐式创建了一个名为`pvc-`的卷。我们现在可以在 pod 中使用索赔创建的卷了。让我们使用之前使用的 pod 规范的修改版本。我们可以在`ch12`文件夹的`pod-with-vol.yaml`文件中找到这个更新的规范。让我们详细看看这个规范:
```
apiVersion: v1
kind: Pod
metadata:
  name: web-pod
spec:
  containers:
  - name: web
    image: nginx:alpine
    ports:
    - containerPort: 80
    volumeMounts:
    - name: my-data
      mountPath: /data
  volumes:
  - name: my-data
    persistentVolumeClaim:
      claimName: my-data-claim
```
在最后四行中，在块`volumes`中，我们定义了要用于此 pod 的卷列表。我们在这里列出的卷可以被任何容器使用。在我们的特殊情况下，我们只有一卷。我们定义我们有一个卷`my-data`，它是一个持久的卷声明，其声明名称是我们之前刚刚创建的名称。然后在容器规范中，我们有`volumeMounts`块，在这里我们定义了我们想要使用的卷和容器内将要装载该卷的(绝对)路径。在我们的例子中，我们将卷装载到容器文件系统的`/data`文件夹中。让我们创建这个 pod:
```
$ kubectl create -f pod-with-vol.yaml
```
然后，我们可以将`exec`放入容器中，通过导航到`/data`文件夹来再次检查卷是否已经挂载，在那里创建一个文件，并退出容器:
```
$ kubectl exec -it web-pod -- /bin/sh
/ # cd /data
/data # echo "Hello world!" > sample.txt
/data # exit
```
如果我们是对的，那么这个容器中的数据必须持续到容器的生命周期之后。因此，让我们删除 pod，然后重新创建它并对其执行，以确保数据仍然存在。这就是结果:
![](img/949bc5bb-127b-4bd8-9ec0-c74e58742a8d.png)
Data stored in volume survives pod recreation
# 立方复制集
在高可用性要求的环境中，单个 pod 是不够的。*如果吊舱坠毁怎么办？* *如果我们需要更新 pod 内运行的应用，但无法承受任何服务中断，该怎么办？*这些问题以及更多问题只能说明光有 pod 是不够的，我们需要一个更高级的概念，可以管理同一个 pod 的多个实例。在 Kubernetes 中，**复制集**用于定义和管理运行在不同集群节点上的相同豆荚的集合。其中，复制集定义了在一个容器内运行的容器使用哪些容器映像，以及该容器将在集群中运行多少个实例。这些属性和许多其他属性被称为期望状态。
复制集负责在任何时候协调期望的状态，如果实际状态曾经偏离它。这里有一个 Kubernetes 复制集:
![](img/3d3b9b9b-cf78-464e-899f-ce624c5a0a10.png)