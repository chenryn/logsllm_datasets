### Symbolic Assembly Program中的伪指令BSS

在汇编语言中，`BSS`（Block Started by Symbol）是一个伪指令，用于为符号预留一块内存空间。最初，该汇编器由美国联合航空公司于20世纪50年代中期为IBM 704大型机所开发。随后，`BSS`这个词被引入到IBM 709和7090/94机型上的标准汇编器FAP（Fortran Assembly Program）中，作为关键字使用，用于定义符号并为其预留给定数量的未初始化空间。

Dennis Ritchie在Unix FAQ section 1.3（<http://www.faqs.org/faqs/unixfaq/faq/part1/section3.html>）中解释了`BSS`一词的由来。

### 程序源代码的段划分

程序源代码编译后主要分为两个部分：程序指令和程序数据。其中，代码段属于程序指令，而数据段和`.bss`段则属于程序数据。

许多人可能会问，为什么要把程序的指令和数据分开存储？将它们混合在一个段中不是更简单吗？实际上，将数据和指令分段存放有以下几个优点：

1. **权限分离**：当程序加载时，数据和指令分别映射到两个虚拟内存区域。数据区域对进程是可读写的，而指令区域对进程是只读的。因此，这两个虚拟内存区域的权限可以分别设置为可读写和只读，从而防止程序指令被有意或无意地修改。

2. **提高缓存命中率**：现代CPU具有强大的缓存体系，提高缓存命中率对于程序性能至关重要。指令区和数据区的分离有助于提高程序的局部性。现代CPU通常设计有分离的数据缓存和指令缓存，因此将指令和数据分开存放可以提高缓存命中率。

3. **内存共享**：当系统中运行多个同一程序的副本时，这些副本的指令部分是相同的，因此只需要在内存中保存一份指令部分。这不仅适用于指令，也适用于其他只读数据，如图标、图片和文本资源。每个副本进程的数据区域是私有的。这种共享指令的概念在现代操作系统中非常重要，尤其是在支持动态链接的系统中，可以节省大量内存。例如，常用的Windows Internet Explorer 7.0运行起来后，其总虚拟内存空间为112,844KB，其中私有部分数据为15,944KB，即有96,900KB的空间是共享部分（见图3-2）。如果系统中运行了数百个进程，通过共享的方法可以节省大量空间。关于内存共享的更多内容将在后续章节中详细探讨。

### 深入分析目标文件

#### 3.3 挖掘SimpleSection.o

前面我们对目标文件进行了概念性的阐述，但如果不深入具体细节，这样的分析只是泛泛而谈，无法真正理解其内部结构。就像知道TCP/IP协议基于包的结构，但从未见过包的结构一样，不了解包头的内容和地址存放方式，对TCP/IP的理解只能是粗略的。同样，许多问题表面上看似简单，但深入了解会发现许多鲜为人知的秘密，或者发现自己以前认为理所当然的东西可能是错误的或有偏差的。对于系统软件也是如此，不了解ELF文件的结构细节就像学习了TCP/IP网络却不知道IP包头的结构一样。本节将以ELF目标文件格式为例，深入剖析目标文件，争取不放过任何一个字节。

**真正了不起的程序员对自己的程序的每一个字节都了如指掌。**
— 佚名

我们将以之前提到的`SimpleSection.c`编译出的目标文件作为分析对象。这个程序经过精心挑选，具有代表性且不过于繁琐复杂。在接下来的一系列编译、链接和相关实验过程中，我们将使用第1章提到的工具套件，如GCC编译器和binutils等。如果你忘记了这些工具的用法，可以在阅读过程中参考本书第1部分的内容。`SimpleSection.c`的代码如下所示：

```c
// SimpleSection.c
int printf(const char* format, ...);
int global_uninit_var;
int global_init_var = 84;

void func1(int i) {
    printf("%d\n", i);
}

int main(void) {
    static int static_var = 85;
    static int static_var2;
    int a = 1;
    int b;
    func1(static_var + static_var2 + b);
    return a;
}
```

我们使用GCC编译这个文件（参数表示只编译不链接）：
```sh
$ gcc -c SimpleSection.c
```

得到了一个1104字节的`SimpleSection.o`目标文件。我们可以使用`objdump`工具查看object文件的内部结构。运行以下命令：
```sh
$ objdump -h SimpleSection.o
```

输出结果如下：
```
SimpleSection.o:     file format elf32-i386

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000005b  0000000000000000 0000000000000000 00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000008  0000000000000000 0000000000000000 00000090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0000000000000000 0000000000000000 00000098  2**2
                  ALLOC
  3 .rodata       00000004  0000000000000000 0000000000000000 0000009c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000002a  0000000000000000 0000000000000000 000000c6  2**0
                  CONTENTS, READONLY
  5 .note.GNU-stack 00000000  0000000000000000 0000000000000000 000000c6  2**0
                  CONTENTS, READONLY
```

从上面的结果来看，`SimpleSection.o`的段比我们想象的要多，除了最基本的代码段、数据段和BSS段外，还有三个额外的段：只读数据段（`.rodata`）、注释信息段（`.comment`）和堆栈提示段（`.note.GNU-stack`）。我们先来看看几个重要段的属性，其中最容易理解的是段的长度（Size）和段所在的位置（File Offset）。每个段的第二行中的“CONTENTS”、“ALLOC”等表示段的各种属性，“CONTENTS”表示该段在文件中存在。我们可以看到BSS段没有“CONTENTS”，表示它实际上在ELF文件中不存在内容。“.note.GNU-stack”段虽然有“CONTENTS”，但它的长度为0，这是一个很古怪的段，我们暂且忽略它，认为它在ELF文件中也不存在。那么ELF文件中实际存在的就是`.text`、`.data`、`.rodata`和`.comment`这四个段了，它们的长度和在文件中的偏移位置已经用粗体表示出来了，它们在ELF中的结构如图3-3所示。

了解了这几个段在`SimpleSection.o`中的基本分布后，接下来我们将逐个查看这些段，看看它们包含什么内容。

有一个专门的命令叫做`size`，它可以用来查看ELF文件的代码段、数据段和BSS段的长度（`dec`表示三个段长度的和的十进制，`hex`表示长度和的十六进制）：
```sh
$ size SimpleSection.o
   text    data     bss     dec     hex filename
   91       8       4     103     0x67 SimpleSection.o
```

通过这种方式，我们可以详细了解目标文件的各个段及其内容。