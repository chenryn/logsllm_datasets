### 5.5 Deletion Latency Versus Block Allocation Rate

As discussed in Section 5.4.2, without ballooning, both the fill ratios and deletion latency are highly dependent on the size of the storage medium. However, as ballooning increases the fill ratio, the deletion latency decreases. This is because, with a higher fill ratio, fewer erase blocks are available to store data, leading to a shorter expected erase block reallocation period and more frequent removal of deleted data from the system.

We observe an inverse relationship between the fill ratio and the erase block allocation rate for each partition type. Fewer available erase blocks mean more compaction, resulting in more frequent writes to the storage medium simply to copy data stored elsewhere. Figure 5.5 illustrates the relationship between the median deletion latency and the erase block allocation rate for simulations involving varying amounts of ballooning. The horizontal axis represents the erase block allocation rate, and the vertical axis shows the median deletion time. Each point on the plot corresponds to an experiment with a specific amount of ballooning, indicating the observed allocation rate and deletion latency.

The size of the device is not a dominant factor in deletion latency. By applying the appropriate amount of ballooning, deletion latency can be reduced for any storage medium. Even small amounts of ballooning on large storage media, which slightly increase the erase block allocation rate, can significantly decrease the deletion latency. This is because the many unused erase blocks are not allocated by greedy or cyclic allocation algorithms, as the file system believes them to be full.

### 5.6 Hybrid Ballooning and Purging

The purge cost column in Table 5.2, where cost is measured as the number of erase blocks that must be erased to execute purging, was computed by executing purging after each experiment and measuring the resulting number of erase block allocations. When ballooning is not used, the purging cost is equal to the full size of the partition. For large partitions, this results in an unreasonable number of erase block allocations required for purging. Mild amounts of ballooning, however, drastically reduce the cost of purging. For example, in a 2 GiB YAFFS partition, a 50% increase in erase block allocations results in a ten-fold improvement in both deletion latency and purging cost.

### 5.7 Ballooning and Storage Medium Lifetime

The primary drawback of our solutions is the increased wear on the flash memory and the associated power consumption. The additional wear is directly proportional to the increase in the erase block allocation rate and inversely proportional to the lifespan. We compute an expected lifetime in years based on the erase block allocation rate and present this in Table 5.2. We use a conservative estimate of 10,000 erasures per erase block. A typical flash erase block can handle between 10,000 and 100,000 erasures, and some studies suggest this is already a very conservative estimate.

Our results show that even at high erase block allocation rates, the storage medium is expected to last for over a decade, which exceeds the typical replacement period of mobile phones (two to eight years). Users who require decades of longevity from their mobile phone can use mild ballooning. Large-capacity storage media combined with mild ballooning yield a system with reasonable purging performance and only a slight reduction in flash memory lifetime.

### 5.8 Power Consumption

To evaluate the power requirements of our solutions, we analyzed the power consumption of write operations. We measured the battery level of our Nexus One using the Android API, which provides the current charge as a percentage of the battery capacity. The experiment involved continuously writing data to the phone’s flash memory in a background service while monitoring the battery level in the foreground. We determined how much data must be written to consume 10% of the total battery capacity. The experiment was run four times, and the results were averaged.

The resulting mean, within the range of 11.01 ± 0.22 GiB with a 95% confidence interval, corresponds to 90,483 full erase blocks' worth of data. Since this exceeds the total of 1,570 erase blocks on the device’s data partition, it is clear that the experiment included both writing and erasing data, thus measuring the power consumption of the electrically intensive erasure operation.

Even using the most aggressive ballooning measurement for YAFFS, where nearly 250 erase blocks are allocated per hour, it would take 15 days for the ballooning application’s writing behavior to consume 10% of the battery. Furthermore, the built-in battery use information reported that the testing application was responsible for 3% of battery usage, while the Android system accounted for 10% and the display for 87%. We conclude that the power consumption of ballooning is not a significant concern.

The power consumption required for purging is related to the size of the storage medium and the battery capacity—0.9% of the battery per gigabyte for the Nexus One. Other mobile phone batteries may yield different results. Any mobile phone with a storage medium size exceeding a gigabyte will consume significant time and energy to perform purging. Our hybrid solution, however, is well-suited for such storage media, as it significantly reduces the cost of purging.

### 5.9 Summary

In this chapter, we examined deletion latency for log-structured file systems and demonstrated that there is no guarantee of deletion on such file systems. We presented three user-level solutions for secure deletion on YAFFS file systems: purging, ballooning, and a hybrid of both. The hybrid solution provides secure data deletion against a computationally unbounded, unpredictable, multiple-access coercive adversary, effectively turning the storage medium into a SECDEL-CLOCK implementation. We evaluated the solutions in terms of wear on the flash memory, power consumption, and time.

We reiterate that these solutions make strong assumptions about the implementation that stores the data, particularly that filling the capacity of the file system ensures the secure deletion of all discarded data. Verifying this is straightforward for interfaces like MTD, which provide raw access to the flash memory, but it is more challenging when the memory is hidden behind an obfuscating controller.

We also noted that user-level solutions are limited, constrained to creating and deleting files. By filling certain log-structured file systems to capacity, we can securely delete data, provided the file system reclaims all wasted storage resources before declaring the device full.

In the next chapter, we will explore what can be achieved without user-level access restrictions and develop an efficient and prompt secure deletion solution that can be integrated into any flash file system.

### 5.10 Research Questions

- Are there FTL implementations for which purging always works?
- Does balloon file rotation actually promote wear leveling? How much can this be influenced from user space?
- Does ballooning interfere with other flash memory optimizations, which may be FTL or file-system specific?
- Can anything be done to help purging play fair with other applications attempting to write once the device is full?