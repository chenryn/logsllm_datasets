21.0
15.1
4487.2
254.1
88.2
56.2
26.1
23.7
9503.7
387.8
254.5
56.4
37.2
36.9
ﬁll
ratio
20%
63%
80%
84%
7%
40%
64%
72%
82%
83%
4%
43%
48%
76%
80%
80%
erase block
allocs / hour
32.7± 2.3
53.4± 4.7
95.0± 24.2
166.5± 42.5
26.0± 1.0
35.8± 3.4
59.8± 8.4
70.4± 0.8
163.6± 18.9
232.9± 11.4
25.3± 0.8
36.6± 1.5
41.1± 3.7
87.5± 5.8
205.4± 24.3
248.2± 33.0
purge
54
33
18
10
1556.8
705.2
429.8
357.8
Deletion latency (hours)
95th %ile
46.2± 0.5
14.6± 1.3
6.6± 0.2
5.4± 1.5
169.6± 7.8
33.6± 2.6
16.1± 2.0
12.6± 2.6
7.6± 0.6
6.1± 0.6
life
(years) cost (EB) median
41.5± 2.6
10.8± 1.7
4.2± 0.6
2.6± 0.7
163.1± 7.1
28.4± 4.1
10.4± 0.5
8.2± 0.6
4.3± 0.4
3.0± 0.4
349.4± 11.2 370.3± 5.9
34.7± 7.5
43.1± 8.6
28.7± 1.5
34.8± 6.1
8.5± 0.9
13.0± 0.4
9.4± 1.9
4.7± 0.5
3.3± 0.7
7.4± 1.0
15663.8
1630.5
1237.5
845.8
484.8
338.4
7827.0
1106.5
765.0
692.3
525.2
360.8
70
49
43
20
8
7
68
50
29
25
10
7
)
s
r
u
o
h
(
y
c
n
e
t
a
l
n
o
i
t
e
e
d
n
a
d
e
M
i
l
50
40
30
20
10
0
0
50
150
100
Erase block allocations per hour
200
250
300
350
400
450
Fig. 5.5 Scatter plot of deletion latency and erase block allocation for experiments on a 200 MiB
storage medium with varied ballooning.
70
5 User-Level Secure Deletion on Log-Structured File Systems
Deletion Latency Versus Block Allocation Rate.
As discussed in Section 5.4.2, without ballooning both the ﬁll ratios and the dele-
tion latency are highly dependent on the size of the storage medium. As ballooning
increases the ﬁll ratio, however, the deletion latency similarly decreases. Since the
data being stored comes from the same distribution, more-full erase blocks on iden-
tically sized storage media imply that there are fewer erase blocks available to store
data, so the expected erase block reallocation period decreases and deleted data is
removed from the system more frequently.
We observe an inverse relationship between the ﬁll ratio and the erase block al-
location rate for each partition type. Fewer available erase blocks mean more com-
paction and thus more frequent writes to the storage medium simply to copy data
stored elsewhere. Figure 5.5 plots the relationship between the median deletion la-
tency and the erase block allocation rate for simulations involving varying amounts
of ballooning. The horizontal axis is the erase block allocation rate and the vertical
axis is the median deletion time. A point on the plot represents an experiment with
some amount of ballooning that resulted in the observed allocation rate and deletion
latency.
The device’s size is not an overriding factor in deletion latency—deletion latency
can be reduced for any storage medium simply by applying the appropriate amount
of ballooning to consume the excess capacity. Small amounts of ballooning on large
storage media—which slightly increase the erase block allocation rate—can signif-
icantly drop the deletion latency. This is because the vast number of unused erase
blocks are not allocated by greedy or cyclic allocation algorithms as the ﬁle system
believes them to be full.
Hybrid Ballooning and Purging.
The purge cost column of Table 5.2—where cost is measured as the number of
erase blocks that must be erased to execute purging—was computed by executing
purging after each experiment and measuring the number of erase block allocations
that resulted. We see that when ballooning is not used, the purging cost is equal
to the full size of the partition. For large partitions, this results in an unreasonable
number of erase block allocations required for purging. We see that mild amounts
of ballooning drastically reduce the cost of purging. In fact, for the 2 GiB YAFFS
partition, a 50% increase in erase block allocations results in a ten-fold improvement
in both deletion latency and purging cost.
Ballooning and Storage Medium Lifetime.
The primary drawback of our solutions is the cost of increased erasures, both in
terms of damage to the ﬂash memory and power consumption. The additional wear
is directly proportional to the increase in the erase block allocation rate, and in-
5.6 Experimental Evaluation
71
versely proportional to the lifespan. We compute an expected lifetime in years from
the erase block allocation rate and present this in Table 5.2. We use a conservative
(i.e., pessimistic) estimate of 104 erasures per erase block. Recall that a typical ﬂash
erase block can handle between 104 and 105 erasures [81], and some studies have
indicated this is already orders of magnitude more conservative than reality [82].
Our results show that even at high erase block allocation rates, we still expect
to see the storage medium live for upwards of a decade; this is well in excess of
the replacement period of mobile phones that varies from two to eight years [83].
Users who require decades of longevity from their mobile phone can simply use
mild ballooning. In particular, large-capacity storage media combined with mild
ballooning yield a system with reasonable purging performance and ﬂash memory
lifetime reduction.
Power Consumption.
To test if our solutions have acceptable power requirements, we analyzed the power
consumption of write operations. We measured the battery level of our Nexus One
through the Android API, which gives its current charge as a percentage of its bat-
tery capacity. The experiment consisted of continuously writing data to the phone’s
ﬂash memory in a background service while monitoring the battery level in the
foreground. We measured how much data must be written to consume 10% of the
total battery capacity. We ran the experiment four times and averaged the result.
The resulting mean is within the range of 11.01 ± 0.22 GiB with a conﬁdence of
95%, corresponding to 90483 full erase blocks’ worth of data. Since this well ex-
ceeds the total of 1570 erase blocks on the device’s data partition, we are certain that
our experiment must have erased the erase blocks as well as written to them, thus
measuring the power consumption of the electrically intensive erasure operation.
Even using the most aggressive ballooning measurement for YAFFS, where
nearly 250 erase blocks are allocated an hour, it would take 15 days for the balloon-
ing application’s writing behaviour to consume 10% of the battery. Furthermore, the
built-in battery use information reported that the testing application was responsible
for 3% of battery usage, while the Android system accounted for 10% and the dis-
play for 87%. We conclude that ballooning’s power consumption is not a concern.
The power consumption required for purging is related to the size of the storage
medium and the capacity of the battery—0.9% of the battery per gigabyte for the
Nexus One. Other mobile phone batteries may of course yield varying results. Any
mobile phone with a storage medium size exceeding a gigabyte therefore consumes
signiﬁcant time and energy to perform purging. Our hybrid solution, however, is
perfectly suited for such storage media as it signiﬁcantly drops the cost of purging.
72
5.7 Summary
5 User-Level Secure Deletion on Log-Structured File Systems
In this chapter we considered deletion latency for log-structured ﬁle systems and
showed that there is no guarantee of deletion on such ﬁle systems. We presented
three useful user-level solutions for secure deletion on YAFFS ﬁle systems: purging,
ballooning, and a hybrid of both. The hybrid provides secure data deletion against a
computationally unbounded unpredictable multiple-access coercive adversary, turn-
ing the storage medium into a SECDEL-CLOCK implementation. We have evaluated
the solutions’ effectiveness in terms of wear on the ﬂash memory, as well as power
consumption and time.
We restate that these solutions make strong assumptions on the implementation
that stores the data, in particular that ﬁlling the capacity of the ﬁle system effects the
secure deletion of all discarded data. Verifying this is simple for interfaces like MTD
which provide raw access to the ﬂash memory; however, it is not as straightforward
when the memory is hidden behind an obfuscating controller.
We have also seen that user-level solutions are limited. The space of possible so-
lutions is constrained to creating and deleting ﬁles. We showed that by ﬁlling certain
log-structured ﬁle systems to capacity, we can securely delete data. It requires that
the ﬁle system reclaims all wasted storage resources before proclaiming the device
is full.
In the next chapter, we consider what can be achieved without a user-level access
restriction and develop an efﬁcient and prompt secure deletion solution that can be
integrated into any ﬂash ﬁle system.
5.8 Research Questions
• Are there FTLs implementations for which purging always works?
• Does balloon ﬁle rotation actually promote wear levelling? How much can this
• Does ballooning interfere with other ﬂash memory optimizations, which may be
• Can anything be done to help purging play fair with other applications attempting
be inﬂuenced from user space?
FTL or ﬁle-system speciﬁc?
to write once the device is full?