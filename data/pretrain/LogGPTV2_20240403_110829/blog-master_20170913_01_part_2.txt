### 1、检查异常的主机、操作系统。    
#### 检查方法：    
Set up SNMP or other system check for hardware and OS errors.    
监控硬件错误：    
检查/var/log/mcelog日志文件的内容，如果有信息，说明该机器出现过硬件错误。    
监控dmesg异常，例如Out of memory。    
检查/var/log/dmesg日志文件的内容.    
#### 判断方法：    
判断被检查文件的内容，是否出现过异常。    
```    
/var/log/mcelog    
/var/log/dmesg    
```    
#### 事件级别：    
critical    
#### 重要程度：    
严重    
#### 监控频率：    
15分钟。    
#### 处理方法：    
如果有硬件错误或者不可修复的软件错误，建议更换机器。    
添加新机器到集群，使用gprecoverseg重建segment，或者使用gpinitstandby修复standby master。    
### 2、列出磁盘使用率。    
#### 检查方法：    
```    
du -sh $dir    
```    
或  
```  
SELECT * FROM gp_toolkit.gp_disk_free ;  
```  
#### 判断方法：    
数据盘：建议达到80%时warning，90%时critical。    
日志、临时文件盘：建议达到60%时warning，80%时critical。    
#### 事件级别：    
critical    
#### 重要程度：    
严重    
#### 监控频率：    
5-30分钟    
#### 处理方法：    
扩容、清数据、清WAL或临时文件。    
### 3、网络监测。    
#### 检查方法：    
```    
ifconfig    
```    
#### 判断方法：    
```    
ethx: flags=5187  mtu 1500    
        inet xxx.xxx.xxx.xxx  netmask xxx.xxx.xxx.xxx  broadcast xxx.xxx.xxx.xxx    
        ether xxxxxxxxxxx  txqueuelen 0  (Ethernet)    
        RX packets 611100787  bytes 184118991357 (171.4 GiB)    
        RX errors 0  dropped 489309  overruns 0  frame 0    
        TX packets 580090906  bytes 71626153522 (66.7 GiB)    
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0    
```    
检查droped, errors的数量，如果除以packets比例超过某个阈值，说明丢包或者错误严重。告警。    
#### 事件级别：    
warning。    
#### 重要程度：    
重要    
#### 监控频率：    
小时    
#### 处理方法：    
Work with network and OS teams to resolve errors.    
### 4、存储硬件错误。    
#### 检查方法：    
根据RAID卡厂商、SSD厂商提供的检测工具。    
smartclt命令。    
如果是btrfs, zfs, lvm, md类管理的存储，这些工具也可以检测软raid的健康状态。    
检测是否异常。    
注意，某些检测可能会导致IO堵塞（虽然很短暂），但是也许会比较严重。建议和厂商确认监测命令的堵塞性。    
#### 判断方法：    
根据厂商提供的方法。    
#### 事件级别：    
critical。    
#### 重要程度：    
严重    
#### 监控频率：    
5分钟。    
#### 处理方法：    
对于RAID存储，替换坏盘。    
对于非RAID或R10存储，替换主机。    
### 5、列出硬件、操作系统内核的不正确配置。    
#### 检查方法：    
```    
gpcheck    
```    
#### 判断方法：    
根据gpcheck的输出进行判断。    
#### 事件级别：    
critical    
#### 重要程度：    
严重    
#### 监控频率：    
安装集群时测试一次即可。    
#### 处理方法：    
根据gpdb的推荐，设置正确的配置。    
### 6、检测集群的硬件性能极限。    
#### 检查方法：    
```    
gpcheckperf    
```    
#### 判断方法：    
检查集群的io, 网络的性能，判断是否有性能倾斜。    
#### 事件级别：    
critical    
#### 重要程度：    
严重    
#### 监控频率：    
安装集群时测试一次即可。    
#### 处理方法：    
建议单机的磁盘读写总带宽、网络带宽匹配。    
例如有8块盘，每块盘125MB/s的读写带宽，网卡为10GiB。    
磁盘总带宽约1 GB/s，与网卡带宽1.25GB/s匹配。    
The cluster may be under-specified if data transfer rates are not similar to the following:    
```    
2 GB per second disk read    
1 GB per second disk write    
10 Gigabit per second network read and write    
```    
If transfer rates are lower than expected, consult with your data architect regarding performance expectations.    
If the machines on the cluster display an uneven performance profile, work with the system administration team to fix faulty machines.    
## 系统表监控    
### 1、检查master, segment的catalog一致性。    
#### 检查方法：    
对每一个数据库执行：    
```    
gpcheckcat -O    
```    
#### 判断方法：    
如果有输出，说明有不一致的catalog。    
#### 事件级别：    
warning    
#### 重要程度：    
重要    
#### 监控频率：    
周    
#### 处理方法：    
如果gpcheckcat产生异常，会将修复脚本写入对应的文件，例如    
```    
repair scripts generated in directory gpcheckcat.repair.YYYY-MM-DD.hh.mm.ss    
```    
执行对应的脚本，连接到对应数据库，修复catalog异常。    
### 2、检查持久化表的catalog一致性。    
#### 检查方法：    
断开所有用户的连接，对每一个数据库执行：    
```    
gpcheckcat -R persistent    
```    
#### 判断方法：    
如果有输出，说明有不一致的持久化表的catalog。    
#### 事件级别：    
critical    
#### 重要程度：    
严重    
#### 监控频率：    
月    
#### 处理方法：    
如果gpcheckcat产生异常，会将修复脚本写入对应的文件，例如    
```    
repair scripts generated in directory gpcheckcat.repair.YYYY-MM-DD.hh.mm.ss    
```    
执行对应的脚本，连接到对应数据库，修复catalog异常。    
### 3、检查pg_class与pg_attribute是否不一致。    
#### 检查方法：    
断开所有用户的连接，对每一个数据库执行：    
```    
gpcheckcat -R pgclass    
```    
#### 判断方法：    
如果有输出，说明pg_class与pg_attribute不一致。    
#### 事件级别：    
warning。    
#### 重要程度：    
重要    
#### 监控频率：    
月    
#### 处理方法：    
如果gpcheckcat产生异常，会将修复脚本写入对应的文件，例如    
```    
repair scripts generated in directory gpcheckcat.repair.YYYY-MM-DD.hh.mm.ss    
```    
执行对应的脚本，连接到对应数据库，修复catalog异常。    
### 4、检查是否有类似"内存泄露"的临时schema，或者missing的schema定义。    
#### 检查方法：    
断开所有用户的连接，对每一个数据库执行：    
```    
gpcheckcat -R namespace    
```    
#### 判断方法：    
如果有输出，说明有类似"内存泄露"的临时schema，或者missing的schema定义。    
#### 事件级别：    
warning。    
#### 重要程度：    
重要    
#### 监控频率：    
月    
#### 处理方法：    
如果gpcheckcat产生异常，会将修复脚本写入对应的文件，例如    
```    
repair scripts generated in directory gpcheckcat.repair.YYYY-MM-DD.hh.mm.ss    
```    
执行对应的脚本，连接到对应数据库，修复catalog异常。    
### 5、检查随机分布策略的表的约束是否正常。    
#### 检查方法：    
断开所有用户的连接，对每一个数据库执行：    
```    
gpcheckcat -R distribution_policy    
```    
#### 判断方法：    
如果有输出，说明有随机分布策略的表的约束是否正常。    
#### 事件级别：    
warning。    
#### 重要程度：    
重要    
#### 监控频率：    
月    
#### 处理方法：    
如果gpcheckcat产生异常，会将修复脚本写入对应的文件，例如    
```    
repair scripts generated in directory gpcheckcat.repair.YYYY-MM-DD.hh.mm.ss    
```    
执行对应的脚本，连接到对应数据库，修复。    
### 6、检查是否有对象依赖不存在对象。    
#### 检查方法：    
断开所有用户的连接，对每一个数据库执行：    
```    
gpcheckcat -R dependency    
```    
#### 判断方法：    
如果有输出，说明有对象依赖不存在对象。    
#### 事件级别：    
warning。    
#### 重要程度：    
重要    
#### 监控频率：    
月    
#### 处理方法：    
如果gpcheckcat产生异常，会将修复脚本写入对应的文件，例如    
```    
repair scripts generated in directory gpcheckcat.repair.YYYY-MM-DD.hh.mm.ss    
```    
执行对应的脚本，连接到对应数据库，修复。    
## 数据维护任务    
### 1、检查丢失统计信息的表。    
#### 检查方法：    
连接到每个数据库，执行    
```    
SELECT * FROM gp_toolkit.gp_stats_missing;    
```    
#### 判断方法：    
如果有返回，表示对应的表没有收集统计信息。    
#### 事件级别：    
warning    
#### 重要程度：    
重要    
#### 监控频率：    
天    
#### 处理方法：    
```    
analyze table;    
```    
### 2、检查表、索引膨胀、deadtuple比例。    
#### 检查方法：    
连接到每个数据库，执行    
```    
analyze;      
```      
然后执行    
```    
SELECT * FROM gp_toolkit.gp_bloat_diag;    
```    
以上操作查询的是膨胀比较厉害的表，下面这个查询是膨胀明细    
```    
select * from gp_toolkit.gp_bloat_expected_pages ;      
```    
详见(注意AO表与HEAP表的垃圾检测方法不一样)      
[《Greenplum 清理垃圾、修改存储模式（行列变换） 平滑方法 - 交换数据、交互分区》](../201712/20171208_04.md)   
[《如何检测、清理Greenplum膨胀、垃圾 - 阿里云HybridDB for PG最佳实践》](../201708/20170817_01.md)  
[《Greenplum 列存表(AO表)的膨胀、垃圾检查与空间收缩》](../201708/20170817_03.md)  
PostgreSQL的膨胀检查方法参考：   
[《PostgreSQL 如何精确计算表膨胀(fsm,数据块layout讲解) - PostgreSQL table exactly bloat monitor use freespace map data》](../201306/20130628_01.md)    
https://wiki.postgresql.org/wiki/Show_database_bloat  
#### 判断方法：    
如果gp_bloat_diag有返回，表示某些表膨胀很严重。    
#### 事件级别：    
warning    
#### 重要程度：    
重要    
#### 监控频率：    
周或月    
#### 处理方法：    
在DOWNTIME（维护窗口）执行以下SQL之一，回收空间。    
以下SQL会申请排它锁，堵塞增删改查。谨慎选择时间操作。    
```    
-- 不重建索引    
vacuum full table;    
或使用原分布方法redistribute table    
-- 会重建索引    
alter table  set with (reorganize=true) distributed randomly;      
或      
alter table  set with (reorganize=true) distributed by (,....)      
```    
为了防止膨胀，应该定期执行VACUUM（VACUUM不申请排他锁），不影响DML和查询。    
## 业务层监测    
1、最新状态，列表、饼图、柱状图。  
2、历史状态，列表、趋势图。  
3、图例  
3\.1、饼图，空间占比  
![pic](20170913_01_pic_001.png)  
3\.2、趋势图，IOPS  
![pic](20170913_01_pic_002.png)  