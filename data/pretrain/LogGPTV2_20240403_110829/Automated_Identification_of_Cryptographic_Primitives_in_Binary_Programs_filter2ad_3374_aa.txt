title:Automated Identification of Cryptographic Primitives in Binary Programs
author:Felix Gr&quot;obert and
Carsten Willems and
Thorsten Holz
Automated Identiﬁcation of
Cryptographic Primitives in Binary Programs
Felix Gr¨obert1, Carsten Willems2, and Thorsten Holz1
1 Horst G¨ortz Institute for IT-Security, Ruhr-University Bochum
2 Laboratory for Dependable Distributed Systems, University of Mannheim
Abstract. Identifying that a given binary program implements a spe-
ciﬁc cryptographic algorithm and ﬁnding out more information about the
cryptographic code is an important problem. Proprietary programs and
especially malicious software (so called malware) often use cryptography
and we want to learn more about the context, e.g., which algorithms and
keys are used by the program. This helps an analyst to quickly under-
stand what a given binary program does and eases analysis.
In this paper, we present several methods to identify cryptographic
primitives (e.g., entire algorithms or only keys) within a given binary
program in an automated way. We perform ﬁne-grained dynamic binary
analysis and use the collected information as input for several heuris-
tics that characterize speciﬁc, unique aspects of cryptographic code. Our
evaluation shows that these methods improve the state-of-the-art ap-
proaches in this area and that we can successfully extract cryptographic
keys from a given malware binary.
Keywords: Binary Analysis, Malware Analysis, Cryptography.
1 Introduction
Analyzing a given binary program is a diﬃcult and cumbersome task: an ana-
lyst typically needs to understand the assembly code and interpret it to draw
meaningful conclusions from it. An attacker can hamper the analysis attempts in
many ways and take advantage of diﬀerent code obfuscation techniques [10,15].
A powerful way to complicate analysis is cryptovirology [23], i.e., using cryptog-
raphy in a program such that speciﬁc activities are disguised. The following list
provides a few recent examples of real-world malware which use cryptography
in one form or another:
– Wang et al. analyzed a sample of Agobot, which uses SSL to establish an
encrypted IRC connection to a speciﬁc server [20].
– Caballero et al. showed that MegaD, a malware family communicating over
TCP port 443, uses a custom encryption protocol to evade network-level
analysis [2].
– Werner and Leder analyzed Conﬁcker and found that this malware uses the
OpenSSL implementation of SHA-1 and a reference implementation of MD6.
R. Sommer, D. Balzarotti, and G. Maier (Eds.): RAID 2011, LNCS 6961, pp. 41–60, 2011.
c(cid:2) Springer-Verlag Berlin Heidelberg 2011
42
F. Gr¨obert, C. Willems, and T. Holz
Interestingly, the attackers also later patched the MD6 implementation in a
malware update to ﬁx a buﬀer overﬂow in the MD6 reference implementa-
tion [7]. Furthermore, Porras et al. found that the malware authors use RSA
with 1024 bits for signature veriﬁcation [16], in newer versions the attackers
even use RSA with a 4096 bit key.
– Werner and Leder also analyzed the Waledac malware [21]. About 1,000 of
the 4,000 functions used by Waledac have been borrowed from OpenSSL.
Furthermore, AES in CBC Mode with an IV of zero is used. The self-signed
RSA client certiﬁcates are used in a key exchange protocol.
– Stewart analyzed the algorithms used by the Storm Worm malware [17].
For the peer-to-peer and fast-ﬂux communication, the malware uses a static
XOR algorithm for subnode authentication and a RSA key with 56 bits [5].
An analyst needs to manually identify the cryptographic algorithms and their
usage to understand the malicious actions, which is typically time-consuming. If
this task can be automated, a faster analysis of malware is possible, thus enabling
security teams to respond quickly to emerging Internet threats. In this paper,
we study the problem of identifying the type of cryptographic primitives used by
a given binary program. If a standardized cryptographic primitive such as AES,
DES, or RC4 is used, we want to identify the algorithm, verify the instance of
the primitive, and extract the parameters used during this invocation.
This problem has been studied in the past, for example by Wang et al., who in-
troduced a heuristic based on changes in the code structure when cryptographic
code is executed [20]. This heuristic has been improved by Caballero et al., who
noted that encryption routines use a high percentage of bitwise arithmetic in-
structions [2]. While these approaches are useful to detect cryptographic code,
we found that they sometimes miss code instances and also lead to false posi-
tives. In this paper, we thus introduce improved heuristics based on both generic
characteristics of cryptographic code and on signatures for speciﬁc instances of
cryptographic algorithms. In contrast to previous work in this area, we improve
the heuristics to perform a more precise analysis and also extract the param-
eters used by the algorithm, which signiﬁcantly reduces the manual overhead
necessary to perform binary analysis.
In summary, this paper makes the following primary contributions:
– We introduce novel identiﬁcation techniques for cryptographic primitives in
binary programs that help to reduce the time a software analyst needs to
spend on determining the underlying security design.
– We have implemented a system that allows the automated application of
our technique by utilizing a dynamic binary instrumentation framework to
generate an execution trace. The system then identiﬁes the cryptographic
primitives via several heuristics and summarizes the results of the diﬀerent
identiﬁcation methods.
– We demonstrate that our system can be used to uncover cryptographic prim-
itives and their usage in oﬀ-the-shelf and packed applications, and that it is
able to extract cryptographic keys from a real-world malware sample.
Automated Identiﬁcation of Cryptographic Primitives in Binary Programs
43
2 Related Work
2.1 Static Approaches
All static tools we tested use signatures to determine whether a particular, com-
piled implementation of a cryptographic primitive is present in a given binary
program. A signature can match a x86 assembly code snippet, some “magic”
constants of the algorithm, structures like S-boxes, or the string for an import
of a cryptographic function call. If a signature is found, the tools print the
name of the primitive (e.g., DES or RSA), and optionally the implementation
(e.g., OpenSSL or the name of the reference implementation).
We evaluated six publicly available tools using a set of 11 testing applications
for diﬀerent cryptographic primitives. All analysis tools claim to be able to detect
the listed algorithms. In Table 1, we summarize the performance of the tools.
A + sign denotes that the tool has found the applications’s algorithm, while a -
sign denotes that the tool has not found the speciﬁc algorithm. Overall, none of
the tools was able to detect all cryptographic primitives and further tests showed
that most tools also generate a signiﬁcant number of false positives. Furthermore,
it is in general hard to statically analyze malware [13] and an attacker can easily
obfuscate his program such to thwart static approaches.
Table 1. Detection performance for six publicly available static tools
KANAL
plugin for
PEiD
Gladman AES +
Cryptopp AES +
OpenSSL AES +
Cryptopp DES +
OpenSSL DES +
Cryptopp RC4 -
OpenSSL RC4 -
Cryptopp MD5 +
OpenSSL MD5 +
OpenSSL RSA -
Cryptopp RSA -
Findcrypt
Plugin for
IDA Pro
-
-
+
+
-
-
-
+
+
-
-
SnD
Crypto
Scanner
+
+
+
+
+
+
-
+
+
-
-
x3chun
Crypto
Searcher
-
+
+
+
+
-
-
+
+
-
-
Hash & Crypto
Detector
DRACA
+
+
-
-
-
-
-
+
+
-
-
-
-
-
+
-
-
-
+
+
-
-
2.2 Dynamic Approaches
One of the ﬁrst papers which addresses the problem of revealing the cryp-
tographic algorithms in a program during runtime was presented by Wang
et al. [20]. The authors utilize data lifetime analysis, including data tainting,
and dynamic binary instrumentation to determine the turning point between
44
F. Gr¨obert, C. Willems, and T. Holz
ciphertext and plaintext, i.e., message decryption and message processing phase.
Then, they are able to pinpoint the memory locations that contain the decrypted
message. Wang et al. evaluate their work with an evaluation of their implementa-
tion against four standard protocols (HTTPs, IRC, MIME, and an unknown one
used by Agobot). In their tests, they are able to decipher all encrypted messages
using their implementation. The main drawback of this approach is that only a
single turning point between decryption and message processing can be handled:
if a program decrypts a block from a message, processes it, and continues with
the next block, this behavior will not be identiﬁed correctly.
As a followup paper, Caballero et al. [2] reﬁned the methods of Wang et
al. [20]. For the automated protocol reverse engineering [4,9,22] of the MegaD
malware, the authors rely on the intuition that the encryption routines use a
high percentage of bitwise arithmetic instructions. For each instance of an exe-
cuted function, they compute the ratio of bitwise arithmetic instructions. If the
functions is executed for at least 20 times and the ratio is higher than 55%, the
function is ﬂagged as an encryption/decryption function. In an evaluation, this
method reveals all relevant cryptographic routines. To identify the parameters
of the routine (e.g., the unencrypted data before it gets encrypted) the authors
evaluate the read set of the ﬂagged function. To distinguish the plaintext from
the key and other data used by the encryption function, they compare the read
set to the read sets of other instances of the same function. As only the plaintext
varies, the authors are able to identify the plaintext data.
Caballero et al. also cite Lutz [12] on the intuition that cryptographic routines
use a high ratio of bitwise arithmetic instructions. Lutz’s approach is based on the
following three observations: ﬁrst, loops are a core component of cryptographic
algorithms. Second, cryptographic algorithms heavily use integer arithmetic, and
third, the decryption process decreases information entropy of tainted memory.
A core method of the tool is to use taint analysis [14] and estimate if a buﬀer
has been decrypted by measuring its entropy. The main problem of relying on
entropy is the possibility of false positives depending on the mode of operation.
If we consider for example cipher-block chaining (CBC) mode, we observe that
the input to the encryption algorithm is the latest ciphertext XORed with the
current plaintext. Thus, the input to the algorithm will have a similar entropy
as its output, because the XOR operation composing the input will incorporate
pseudo-random data from the latest output of the cipher.
In this paper, we reﬁne the heuristics introduced by others and show that we
can improve the detection accuracy. In comparison to previous work in this area,
we also study the identiﬁcation of a larger set of algorithms (hash algorithms
and asymmetric cryptography) and the identiﬁcation and veriﬁcation of input,
output, and key material. In a recent and concurrent work, Caballero et al.
introduced a technique called stitched dynamic symbolic execution that can be
used to locate cryptographic functions in a binary program [3]. We could combine
this technique with the methods introduced in this paper to precisely identify
cryptographic code in a given binary.
Automated Identiﬁcation of Cryptographic Primitives in Binary Programs
45
3 Finding Cryptographic Primitives
In this section, we present in detail our heuristics and the intuition behind them.
Furthermore, we provide an overview of the system we have implemented to
automatically pinpoint cryptographic primitives. We start with an overview of
the system and then introduce the trace and analysis implementations separately.
3.1 System Overview
The system implementation is divided in two stages, which are performed for
each analysis of a binary sample. In the ﬁrst stage, we perform ﬁne-grained
binary instrumentation, and the second stage implements several heuristics to
identify cryptographic code from the data gathered by the ﬁrst stage.
During the controlled execution of the target binary program (ﬁrst stage of
Figure 1), we use the technique of dynamic binary instrumentation (DBI) to
gain insight on the program ﬂow. We perform DBI to collect an execution trace,
which also includes the memory areas accessed and modiﬁed by the program. We
use the DBI framework Pin [11], which supports ﬁne-grained instruction-level
tracing of a single process. Our implementation creates a run trace of a software
sample to gather the relevant data for the second stage.
monitored Execution
Software
Trace
Software
Plaintext
Algorithm
Ciphertext
Key
Write File 
Function
Data
Data
Data
Instruction
Instruction
Instruction
State
State
State
Fig. 1. Schematic overview of implementation for stage 1
In the second stage, the instruction and data trace is used to detect crypto-
graphic algorithms, e.g., RC4, MD5, or AES, and their parameters, e.g., keys or
plaintext. An overview of the second stage is shown in Figure 2. To detect the al-
gorithms and their parameters, we ﬁrst elevate the trace to high-level structured
representations, i.e., loops, basic blocks, and graphs. Then, we employ diﬀerent
identiﬁcation methods and utilize the high-level representation of the trace to in-
spect the execution for cryptographic primitives. Based on the ﬁndings, the tool
generates a report that displays the results, especially the identiﬁed algorithms
and their parameters.
46
F. Gr¨obert, C. Willems, and T. Holz
Trace
Analysis
Report
Data
Data
Data
Instruction
Instruction
Instruction
State
State
State
Parser
Filter
Identiﬁcation
Methods
Queue
Structure
Analysis
Data
Data
Data
Instruction
Instruction
Algorithm
State