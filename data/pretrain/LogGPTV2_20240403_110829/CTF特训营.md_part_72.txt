## Page 901
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
901/1144
def on_message(message,data):
if message[type]=='send":
print("T]{0)".format(message['payload’]))
else:
print(message)
jscode=
//jiscodehere
process = frida.get_usb_device().attach(com.some.package)
script.on(message',on_message)
script.load()
sys.stdin.read()
上面的jscode为需要填入的传给客户端的JavaScript代码，包名
“com.some.package”为自标APK的名字，on_message函数在下方会
注册成消息处理函数。运行后即可启用一个Frida客户端。
（2）JavaScript客户端
相对于Python客户端来说，JavaScript客户端的实现就比较烦琐
了。但是其也有自己的优点，即它可以使客户端和服务端使用同一种
语言，而不用在IDE之间来回切换。
使用JavaScript客户端需要安装nodejs和npm环境，Mac和Linux
用户可以利用包管理器轻松实现。
nodejs和npm环境安装完成后，需要新建一个目录，例如新建一
---
## Page 902
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
902/1144
个名为frida的目录，然后在目录中新建一个名为package.json的文件，
写入如下内容：
"name":“frida_tools"
"version":"0.0.0",
"private":true,
"scripts":{
"start”:"node app.jsx”
"dependencies":{
}
其中，name可以随意，dependencies暂时留空，随后输入如下
命令安装最新版Frida：
npm install co frida frida-load --save
安装完成后，新建一个名为app.jsx的文件，注意，后缀不能为js
因为Frida框架的JavaScript客户端的实现需要ES6标准。在app.jsx写
入如下内容：
'use strict';
const co=require(co);
const frida = require(frida);
const load =require(frida-load);
lettarget='com.some.package';
let file ='/agent.jsx;
---
## Page 903
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
903/1144
let session, script;
co（function*(）{
const device = yield frida.getUsbDevice();
session= yield device.attach(target);
onMessage(Pid:'+ session.pid);
constsource=yieldload(require.resolve（file)):
script=yieldsession.createScript(source);
script.events.listen(message',onMessage);
yield script.load();
}).catch(onError);
functiononError（error){
console.error(error.stack);
function onMessage(message){
if (message.type === 'send){
console.log(message.payload);
}else if （message.type ==='error){
console.error(message.stack);
}else{
console.log(message);
Frida中使用co库来进行异步调用，代码看上去会略微烦。其
中，target变量，指明了目标APK的包名；file变量指明了需要传入服
务端的JavaScript代码的位置；onError和onMessage函数分别为错误
消息处理函数和普通消息处理函数。其实在该代码中，除了target和
fle两个变量之外，其余的代码都不需要另做修改，可以直接拿来复
用。
以上就完成了客户端代码的编写，下面来介绍服务端代码的编
写。
---
## Page 904
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
903/1144
let session, script;
}(.uogouny)oo
const device = yield frida.getUsbDevice();
session = yield device.attach(target);
onMessage(Pid:'+session.pid);
constsource=yield load（require.resolve（file))
script=yield session.createScript(source);
script.events.listen(message'，onMessage);
yield script.load();
}).catch(onError);
functiononError(error){
console.error(error.stack);
function onMessage(message){
if (message.type ==='send){
console.log(message.payload);
}elseif(message.type==='error){
console.error(message.stack);
}else{
console.log(message);
Frida中使用co库来进行异步调用，代码看上去会略微烦。其
中，target变量，指明了目标APK的包名；file变量指明了需要传入服
务端的JavaScript代码的位置；onError和onMessage函数分别为错误
消息处理函数和普通消息处理函数。其实在该代码中，除了target和
fle两个变量之外，其余的代码都不需要另做修改，可以直接拿来复
用。
以上就完成了客户端代码的编写，下面来介绍服务端代码的编
写。
---
## Page 905
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
905/1144
return this.a(s)
)
}
在Frida中进行Dalvik层Hook之前必须使用Java.available变量判断
当前的Dalvik层Hook是否可用；此外，Dalvik层的Hook代码必须定义
为一个函数并使用Java.perform（.）方法注册，这里笔者使用的是一个
匿名函数。
使用Java.use（）函数选取要Hook的类，直接使用“：操作符选择
类中的方法即可，例如，上面的clazz.a表示的是com.some.package.a
类中的a方法。
在Frida中对Dalvik层方法进行Hook时，并不是像Xposed一样提
供了一个before回调和一个after回调，而是直接将方法修改掉。将目
标方法的implementation属性修改为一个新的函数，即可完成Hook，
此后调用该方法时，将直接调用新函数。如果想运行原方法，在函数
内部调用“this.+”方法名即可，例如上面的this.a。需要注意的是
此处新函数的参数类型虽然不用声明，但是数量必须与原函数相同
否则将无法找到目标函数。
---
## Page 906
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
906/1144
在Hook函数内部既可以使用console.log将变量打印出来，也可以
使用send函数将变量发送到客户端打印出来，这两个函数的调用结
果有时候相同，有时候不同，我们可以同时使用。
读者此时可能会提出疑问，如果有的方法名字相同、参数数量也
相同，那么这样的重载方法该怎么区分呢？答案是使用overload函数
在自标方法后调用overload函数可用于指明重载函数的类型
overload函数传人代表类型的字符串作为参数，有儿个参数就传入儿
个参数字符串。例如下面两个例子：
clazz.a.overload(java.lang.String).implementation=..
clazz.a.overload(java.lang.String,int).implementation=.
表示Hook的是包含一个参数且类型为String的a方法，以及包含
两个参数且类型分别为String和int的a方法。
这里需要注意的是，如果传入的参数为数组类型，则需要写作
Dalvik中参数类型的表示形式。例如"byte[”类型需写作"[B”，字
符串数组“String”类型需要写作“[Ljava/lang/String：”，关于这点
一定要注意。
特别的，类的构造方法和析构方法可分别用$new和sdispose来
---
## Page 907
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
907/1144
表示。
Frida还有很多其他的APl调用，这里就不展开介绍了，真体可以
查看官方APi手册（http://www.frida.re/docs/javascript-api/#java），此
外还有一些隐藏的AP调用，具体可以查看相关源码。
最后，将客户端和服务端代码整合起来，就能完成Hook了。
Frida框架对于Dalvik层的Hook就介绍到这里。相对Xposed框架
来说，Frida框架的使用就显得难以理解了，Frida服务端使用
JavaScript实现，如何实现Java类与JavaScript对象之间的无缝转换成
为需要考虑的主要问题。Xposed框架使用Java升发，因此其对Java
对象的掌握就更加明确一些；而Frida框架的优点是不需要反复重后
手机，熟练使用之后还是非常好用的，如何取舍需要读者结合实际自
行判断。
关于Frida对Native层Hook功能的更多内容可参见后文的第25
章。
---
## Page 908
CTF特训营：技术详解、解题方法与
24.4Dalvik层混淆及加固技术
908/1144
24.4Dalvik层混淆及加固技术
本节将介绍在比赛中经常遇到的Dalvik层混淆及加固技术，了解
这些技术的原理和特征，将对我们的解题带来很大帮助。
---
## Page 909
CTF特训营：技术详解、解题方法与
24.4.1ProGuard混游
909/1144
24.4.1ProGuard混淆
ProGuard混淆是AndroidSDK默认的自带的混淆器，其主要功能
是对类名、方法名、变量名等标识符进行混淆，将它们修改为无意义
的字母组合，如图24-32所示，我们在APK中经常看见的a、b、c类并
不是出题者故意设计的，而是由ProGuard混淆器混淆之后的结果
com.a.sample.shudu
Decode
MainActivity
a
b
C
d
---
## Page 910
CTF特训营：技术详解、解题方法与
24.4.1ProGuard混淆910/1144
图24-32ProGuard混淆之后的类
ProGuard混淆的升启方式非常简单，只要在编译之前将
build.grade配置文件中的minifyEnabled属性设为true即可，因此大部
分的题目默认都会开启该混淆。
但是需要注意的是，ProGuard混淆并不会混淆所有的类名、方
法名、变量名，对于一些重要的接口类、接口方法等是不会做混淆的
例如Activity类的onCreate方法，如果混淆则APK将无法启动。要想查
看ProGuard混淆默认不对哪些名字做修改，可以查看AndroidSDK的
默认混淆设置，该设置文件位于AndroidSDk目录下的tools/proguard
proguard-android.txt文件中。
我们在解题的时候，还是要从关键的接口方法入手，逐步进行查
看。这里推荐使用JEB来查看APK的方法逻辑，熟练使用它的交叉引
用和重命名功能，将看懂的方法改为我们容易辨识的名字，这样对于
提高做题速度有非常大的帮助。
---
## Page 911
CTF特训营：技术详解、解题方法与
24.4.2DEX破坏911/1144
24.4.2DEX破坏
我们在解题的时候，无论是使用单独的工具还是使用反编译平
台，第一步一般都会使用Apktool对APK进行反编译，因此有的题目
针对这点，做了一些专门的处理。它们会将classes.dex等文件的部分
字段改掉，改掉的部分不会影响APK在手机中的正常运行，但是会影
响Apktool对反编译的处理，使得Apktool进入异常处理流程最终退出
反编译。
针对这种加固方法没有一个一概而论的解决办法，具体情况还要
真体分析，现在只能提供两种解决思路：一种是跟随Apktoo的报错
信息，逐步回溯查看到底是解析什么学段的时候出现的问题，进而解
决问题，使用该方法需要具有一定的代码阅读能力；另一种思路是找
到一个正常的APK文件，对其中的classes.dex、AndroidManifest.xml
等需要解析的文件进行对比，查看能否找到异常的学段，进而将异常
字段改回。
此外，要记住随时将Apktool更新到最新版本，新版本可能会修
复一些BUG，从而排除是由于Apktool版本过低而不是题目的原因造
---
## Page 912
CTF特训营：技术详解、解题方法与.
24.4.2DEX破坏
912/1144
成的反编译失败。
---
## Page 913
CTF特训营：技术详解、解题方法与
24.4.3APK伪加密913/1144
24.4.3APK伪加密
APK伪加密也是在比赛过程中偶尔会遇到的加固方式。APK文件
从本质上来说是一个ZIP压缩文件，通过将其加密字段设为1，可以达
到伪加密的效果，使得在使用unzip等工具解压该APK的时候，提示
输入密码，但是无论输入什么密码都是不对的。而在Android系统
中，APK文件属于Android软件文件，Android系统有一套单独的解包
工具，在解包过程中会跳过加密字段，因此修改加密字段并不会影响
APK的运行，但会影响我们反编译。
后的第5位学节，1表示加密、0表示不加密。因此我们要去除伪加密
只需将相关字节设置为o即可。同时，AndroidKiller工具自带一键去
除伪加密功能，使用Windows系统的读者可以尝试一下。
---
## Page 914
CTF特训营：技术详解、解题方法与
24.4.4APK增加数据
914/1144
24.4.4APK增加数据
有的APK会在正常的APK文件末尾增加一些没用的数据来破坏解
压缩流程，使得解压缩失败。这个方法与上面的伪加密类似，都是因
为电脑与手机处理APK文件的逻辑不一样而造成的。Android系统在
处理APK文件时，是根据标志头和标志尾来界定APK的范围的，因此
在APK尾部附加信息并不会影响APK的运行。而在电脑中，这个APK
文件却会被界定为错误的压缩文件，从而使得解压缩失败。
解决的方法就是将多余的数据剔除，当然，多余的数据中是否包
含提示或者脑洞之类的语句，还是需要注意一下的。
---
## Page 915
CTF特训营：技术详解、解题方法与
24.4.5DEX隐藏
915/114
24.4.5DEX隐藏
DEX隐藏也可以称为DEX加壳，就是将真正需要执行的DEX隐藏
到某个位置。APK执行的时候实际上执行的是解壳程序，解壳程序将
真正的DEX文件解密出来，再使用DexClassLoader动态加载，DEx隐
藏的实现方式灵活多变，这里也无法形成一个统一的解决方案。需要
注意的是，解密出来的DEx文件都需要使用DexClassLoader加载，而
使用DexClassLoader加载DEX文件需要将DEX文件首先保存到文件
中，因此其调用DexClassLoader和保存文件的位置就是解题的突破
口。
---
## Page 916
CTF特训营：技术详解、解题方法与
第25章Native层逆向
916/1144
第25章Native层逆向
本章将介绍Native层的逆向破解，Native层的逆向破解是比赛中
的重点，也是比赛中中等难题和难题必定要涉及的知识。因此，掌握
AndroidNative层的逆向破解是从新手通往高手的必由之路。
本章将分为四个部分讲解Native层的逆向破解，首先了解一下
Java层调用Native层的机制和原理，然后研究一下静态分析和动态调
试Native层lib的方法。
---
## Page 917
CTF特训营：技术详解、解题方法与
25.1Native层介绍
917/1144
25.1Native层介绍
本节将讲解Native层的机制和原理，换句话说也是AndroidNDK
的原理，具体将从正向和逆向两个方面来介绍AndroidNDK的调用原
理。
---
## Page 918
CTF特训营：技术详解、解题方法与
25.1.1正向—使用NDK编写Native层应用
918/1144
25.1.1正向一使用NDK编写Native层应用
本节将从开发者的角度研究NDK的机制。
AndroidNDk是Google提供的一个开发工具包，使用这个工具包
能够让Java层的代码调用到Native层，也就是C/C++代码，使APK能
够实现一些更加底层的功能。AndroidNDK目前支持x86、ARM
mips等架构，但是一般题目中只会出现ARM架构，因此本节的所有
实例均默认为ARM架构。
AndroidNDK可以从网址https://developer.android.com/ndk
downloads/index.html处下载，下载完成后解压到住意目录，然后将
解压自录添加到系统路径里，当能够成功调用“ndk-build”命令时
则表示安装成功。
本节将介绍标准的AndroidNDK开发方法，一般来说，中等难度
的题目会采用本节所介绍的方法开发APK。
NDK开发的自的是为了使Java层能够调用C/C++层中的某个函
数，而不是使Native层独立于Java层运行，而NDK正是提供了这样一
---
## Page 919
CTF特训营：技术详解、解题方法与