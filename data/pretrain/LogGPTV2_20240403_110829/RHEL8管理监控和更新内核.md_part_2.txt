:::
这部分论述了 `yum`{.literal}
[*[[软件包管理器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#introduction-to-yum-functionality){.link}]{.citetitle}*]{.emphasis}的信息。
::: itemizedlist
**其它资源**
-   在 Red Hat Enterprise Linux
    中[*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#installing-software-with-yum){.link}]{.citetitle}*]{.emphasis}
:::
:::
::: section
::: titlepage
# []{#updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel.html#updating-the-kernel_updating-kernel-with-yum}更新内核 {.title}
:::
下面的步骤描述了如何使用 [**[yum]{.application}**]{.strong}
软件包管理器更新内核。
::: orderedlist
**流程**
1.  要更新内核，使用下面的命令：
    ``` screen
    # yum update kernel
    ```
    此命令将内核以及所有依赖项更新至最新可用版本。
2.  重启您的系统以使更改生效。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
当从 Red Hat Enterprise Linux 7 升级到 Red Hat Enterprise Linux 8
时，请按照[*[[从 RHEL 7 升级到 RHEL
8](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/upgrading_from_rhel_7_to_rhel_8/index){.link}]{.citetitle}*]{.emphasis}
文档中的相关部分进行操作。
:::
:::
::: section
::: titlepage
# []{#updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel.html#installing-the-kernel_updating-kernel-with-yum}安装内核 {.title}
:::
下面的步骤描述了如何使用 [**[yum]{.application}**]{.strong}
软件包管理器安装新内核。
::: itemizedlist
**流程**
-   要安装特定的内核版本，请使用：
    ``` screen
    # yum install kernel-{version}
    ```
:::
::: itemizedlist
**其它资源**
-   [*[[Red Hat Code
    Browser](https://access.redhat.com/labs/rhcb/){.link}]{.citetitle}*]{.emphasis}
-   [*[[Red Hat Enterprise Linux
    发行日期](https://access.redhat.com/articles/3078){.link}
    ]{.citetitle}*]{.emphasis}
:::
:::
:::
[]{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#managing-kernel-modules_managing-monitoring-and-updating-the-kernel}第 3 章 管理内核模块 {.title}
:::
以下小节解释了什么是内核模块、如何显示其信息以及如何使用内核模块执行基本管理任务。
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#introduction-to-kernel-modules_managing-kernel-modules}内核模块简介 {.title}
:::
Red Hat Enterprise Linux
内核可使用一个可选的、带有额外功能的模块（称为内核模块）进行扩展，而无需重启系统。在
Red Hat Enterprise Linux 8 中，内核模块是内建在压缩的
`.ko.xz`{.literal} 对象文件中的额外内核代码。
内核模块启用的最常见功能是：
::: itemizedlist
-   添加用于支持新硬件的设备驱动程序
-   支持文件系统，如 `GFS2`{.literal} 或 `NFS`{.literal}
-   系统调用
:::
在现代系统中，在需要时会自动载入内核模块。但在某些情况下，需要手动加载或卸载模块。
与内核本身一样，模块也可以在需要时采用自定义其行为的参数。
同时，提供了用来检查当前运行了哪些模块、哪些模块可以加载到内核以及模块接受哪些参数的工具。该工具还提供了在运行的内核中载入和卸载内核模块的机制。
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#introduction-to-bootloader-specification_managing-kernel-modules}引导装载程序规格介绍 {.title}
:::
BootLoader 规范 (BLS)
定义一个方案以及文件格式，以管理置入目录中每个引导选项的启动加载器配置，而无需操作启动加载器配置文件。与之前的方法不同，每个引导条目现在都由置入目录中的单独配置文件表示。置入目录扩展了其配置，无需编辑或重新生成配置文件。BLS
在引导菜单项中扩展了这个概念。
使用
BLS，您可以通过在目录中添加、删除或编辑单独的引导条目文件来管理启动加载器菜单选项。这使得内核安装过程在不同的构架中保持简单且一致。
`grubby`{.literal} 工具是围绕 BLS 的精简打包程序脚本，它支持相同的
`grubby`{.literal} 参数和选项。它运行 `dracut`{.literal} 以创建初始
ramdisk
镜像。在这个版本中，核心引导装载程序配置文件是静态的，且在内核安装后不会修改。
这在 Red Hat Enterprise Linux 8
中尤其重要，因为不是在所有构架中都使用相同的引导装载程序。大多数架构会使用
`GRUB2`{.literal}，比如 64 位 ARM，但带有 Open Power Abstraction
Layer（OPAL） 的 IBM Power Systems 的 little-endian 变体会使用
`Petitboot`{.literal}，IBM Z 架构使用 `zipl`{.literal}。
::: itemizedlist
**其它资源**
-   [什么是
    grubby](#configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel.html#what-grubby-is_configuring-kernel-command-line-parameters "grubby 是什么"){.link}
-   [什么是引导条目](#configuring-kernel-command-line-parameters_managing-monitoring-and-updating-the-kernel.html#what-boot-entries-are_configuring-kernel-command-line-parameters "什么是引导条目"){.link}
-   `grubby(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#kernel-module-dependencies_managing-kernel-modules}内核模块依赖关系 {.title}
:::
某些内核模块有时依赖一个或多个内核模块。`/lib/modules//modules.dep`{.literal}
文件包含对应内核版本的完整内核模块依赖关系列表。
依赖项文件由 `depmod`{.literal} 程序生成，该程序是 `kmod`{.literal}
软件包的一部分。`kmod`{.literal}
提供的许多工具在执行操作时会考虑模块依赖关系，因此很少需要[**手动**]{.strong}跟踪依赖项。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
内核模块的代码在内核空间中是在不受限制模式下执行的。因此，您应该了解您载入的模块。
:::
::: itemizedlist
**其它资源**
-   `modules.dep(5)`{.literal} manual page
-   `depmod(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#listing-currently-loaded-kernel-modules_managing-kernel-modules}列出当前载入的内核模块 {.title}
:::
下面的步骤描述了如何查看当前载入的内核模块。
::: itemizedlist
**先决条件**
-   已安装 `kmod`{.literal} 软件包。
:::
::: itemizedlist
**流程**
-   要列出所有当前载入的内核模块，请执行：
    ``` literallayout
    $ lsmod
    Module                  Size  Used by
    fuse                  126976  3
    uinput                 20480  1
    xt_CHECKSUM            16384  1
    ipt_MASQUERADE         16384  1
    xt_conntrack           16384  1
    ipt_REJECT             16384  1
    nft_counter            16384  16
    nf_nat_tftp            16384  0
    nf_conntrack_tftp      16384  1 nf_nat_tftp
    tun                    49152  1
    bridge                192512  0
    stp                    16384  1 bridge
    llc                    16384  2 bridge,stp
    nf_tables_set          32768  5
    nft_fib_inet           16384  1
    …​
    ```
    在上例中：
    ::: itemizedlist
    -   第一列提供目前载入的模块的 [**名称**]{.strong}。
    -   第二列以了每个模块的[**内存量**]{.strong}，以千字节为单位（KB）。
    -   最后列显示数量，以及[**依赖**]{.strong}特定模块的模块名称
        （可选）。
    :::
:::
::: itemizedlist
**其它资源**
-   `/usr/share/doc/kmod/README`{.literal} 文件
-   `lsmod(8)`{.literal} manual page
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#listing-all-installed-kernels_managing-kernel-modules}列出所有安装的内核 {.title}
:::
以下流程描述了如何使用命令行工具 `grubby`{.literal} 列出
`GRUB2`{.literal} 引导条目。
::: title
**流程**
:::
要列出内核的引导条目：
::: itemizedlist
-   要列出内核的引导条目，请执行：
    `# grubby --info=ALL | grep title`{.literal}
    该命令显示内核的引导条目。`kernel`{.literal} 字段显示内核路径。
    下面的步骤描述了如何使用 `grubby`{.literal}
    实用程序使用内核命令行列出其系统中所有已安装的内核。
:::
例如，请考虑从 BLS 和非 BLS 安装的 `Grub2`{.literal} 菜单列出
`grubby-8.40-17`{.literal}。
::: title
**流程**
:::
要列出所有安装的内核模块：
::: itemizedlist
-   执行以下命令：
    `# grubby --info=ALL | grep title`{.literal}
    下面是所有安装的内核列表：
    ``` screen
    title=Red Hat Enterprise Linux (4.18.0-20.el8.x86_64) 8.0 (Ootpa)
    title=Red Hat Enterprise Linux (4.18.0-19.el8.x86_64) 8.0 (Ootpa)
    title=Red Hat Enterprise Linux (4.18.0-12.el8.x86_64) 8.0 (Ootpa)
    title=Red Hat Enterprise Linux (4.18.0) 8.0 (Ootpa)
    title=Red Hat Enterprise Linux (0-rescue-2fb13ddde2e24fde9e6a246a942caed1) 8.0 (Ootpa)
    ```
:::
以上输出显示 `grubby-8.40-17`{.literal} 的所有已安装内核的列表（使用
`Grub2`{.literal} 菜单）。
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#setting-a-kernel-as-default_managing-kernel-modules}将内核设置为默认 {.title}
:::
以下流程描述了如何使用 `grubby`{.literal} 命令行工具和 `GRUB2`{.literal}
将特定内核设置为默认值。
::: variablelist