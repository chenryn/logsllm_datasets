---
author: Mike Calizo
category: 系统运维
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6825
date: '2021-03-31 23:39:12'
editorchoice: false
excerpt: 通过使用 Ansible 自动执行可重复的日常任务，提高工作效率并避免错误。
fromurl: https://opensource.com/article/21/3/ansible-sysadmin
id: 13256
islctt: true
largepic: /data/attachment/album/202103/31/233904oo7q68eo2njfmf8o.jpg
permalink: /article-13256-1.html
pic: /data/attachment/album/202103/31/233904oo7q68eo2njfmf8o.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 通过使用 Ansible 自动执行可重复的日常任务，提高工作效率并避免错误。
tags:
- Ansible
thumb: false
title: 用 Ansible 自动化系统管理员的 5 个日常任务
titlepic: true
translator: wxy
updated: '2021-03-31 23:39:12'
---
> 
> 通过使用 Ansible 自动执行可重复的日常任务，提高工作效率并避免错误。
> 
> 
> 
![](/data/attachment/album/202103/31/233904oo7q68eo2njfmf8o.jpg "Tips and gears turning")
如果你讨厌执行重复性的任务，那么我有一个提议给你，去学习 [Ansible](https://www.ansible.com/)!
Ansible 是一个工具，它可以帮助你更轻松、更快速地完成日常任务，这样你就可以更有效地利用时间，比如学习重要的新技术。对于系统管理员来说，它是一个很好的工具，因为它可以帮助你实现标准化，并在日常活动中进行协作，包括：
1. 安装、配置和调配服务器和应用程序；
2. 定期更新和升级系统；
3. 监测、减轻和排除问题。
通常，许多这些基本的日常任务都需要手动步骤，而根据个人的技能的不同，可能会造成不一致并导致配置发生漂移。这在小规模的实施中可能是可以接受的，因为你管理一台服务器，并且知道自己在做什么。但当你管理数百或数千台服务器时会发生什么？
如果不小心，这些手动的、可重复的任务可能会因为人为的错误而造成延误和问题，而这些错误可能会影响你及你的组织的声誉。
这就是自动化的价值所在。而 [Ansible](https://opensource.com/tags/ansible) 是自动化这些可重复的日常任务的完美工具。
自动化的一些原因是：
1. 你想要一个一致和稳定的环境。
2. 你想要促进标准化。
3. 你希望减少停机时间，减少严重事故案例，以便可以享受生活。
4. 你想喝杯啤酒，而不是排除故障问题!
本文提供了一些系统管理员可以使用 Ansible 自动化的日常任务的例子。我把本文中的剧本和角色放到了 GitHub 上的 [系统管理员任务仓库](https://github.com/mikecali/6_sysadmin_tasks) 中，以方便你使用它们。
这些剧本的结构是这样的（我的注释前面有 `==>`）。
```
[root@homebase 6_sysadmin_tasks]# tree -L 2
.
├── ansible.cfg ==> 负责控制 Ansible 行为的配置文件
├── ansible.log
├── inventory
│   ├── group_vars
│   ├── hosts  ==> 包含我的目标服务器列表的清单文件
│   └── host_vars
├── LICENSE
├── playbooks  ==> 包含我们将在本文中使用的剧本的目录
│   ├── c_logs.yml
│   ├── c_stats.yml
│   ├── c_uptime.yml
│   ├── inventory
│   ├── r_cron.yml
│   ├── r_install.yml
│   └── r_script.yml
├── README.md
├── roles    ==> 包含我们将在本文中使用的角色的目录
│   ├── check_logs
│   ├── check_stats
│   ├── check_uptime
│   ├── install_cron
│   ├── install_tool
│   └── run_scr
└── templates ==> 包含 jinja 模板的目录
    ├── cron_output.txt.j2
    ├── sar.txt.j2
    └── scr_output.txt.j2
```
清单类似这样的：
```
[root@homebase 6_sysadmin_tasks]# cat inventory/hosts
[rhel8]
master ansible_ssh_host=192.168.1.12
workernode1 ansible_ssh_host=192.168.1.15
[rhel8:vars]
ansible_user=ansible ==> 请用你的 ansible 用户名更新它
```
这里有五个你可以用 Ansible 自动完成的日常系统管理任务。
### 1、检查服务器的正常运行时间
你需要确保你的服务器一直处于正常运行状态。机构会拥有企业监控工具来监控服务器和应用程序的正常运行时间，但自动监控工具时常会出现故障，你需要登录进去验证一台服务器的状态。手动验证每台服务器的正常运行时间需要花费大量的时间。你的服务器越多，你需要花费的时间就越长。但如果有了自动化，这种验证可以在几分钟内完成。
使用 [check\_uptime](https://github.com/mikecali/6_sysadmin_tasks/tree/main/roles/check_uptime) 角色和 `c_uptime.yml` 剧本：
```
[root@homebase 6_sysadmin_tasks]# ansible-playbook -i inventory/hosts  playbooks/c_uptime.yml -k
SSH password:
PLAY [Check Uptime for Servers] ****************************************************************************************************************************************
TASK [check_uptime : Capture timestamp] *************************************************************************************************
.
截断...
.
PLAY RECAP *************************************************************************************************************************************************************
master                     : ok=6    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  
workernode1                : ok=6    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  
[root@homebase 6_sysadmin_tasks]#
```
剧本的输出是这样的：
```
[root@homebase 6_sysadmin_tasks]# cat /var/tmp/uptime-master-20210221004417.txt
-----------------------------------------------------
 Uptime for  master
-----------------------------------------------------
 00:44:17 up 44 min,  2 users,  load average: 0.01, 0.09, 0.09
-----------------------------------------------------
[root@homebase 6_sysadmin_tasks]# cat /var/tmp/uptime-workernode1-20210221184525.txt
-----------------------------------------------------
 Uptime for  workernode1
-----------------------------------------------------
 18:45:26 up 44 min,  2 users,  load average: 0.01, 0.01, 0.00
-----------------------------------------------------
```
使用 Ansible，你可以用较少的努力以人类可读的格式获得多个服务器的状态，[Jinja 模板](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html) 允许你根据自己的需要调整输出。通过更多的自动化，你可以按计划运行，并通过电子邮件发送输出，以达到报告的目的。
### 2、配置额外的 cron 作业
你需要根据基础设施和应用需求定期更新服务器的计划作业。这似乎是一项微不足道的工作，但必须正确且持续地完成。想象一下，如果你对数百台生产服务器进行手动操作，这需要花费多少时间。如果做错了，就会影响生产应用程序，如果计划的作业重叠，就会导致应用程序停机或影响服务器性能。
使用 [install\_cron](https://github.com/mikecali/6_sysadmin_tasks/tree/main/roles/install_cron) 角色和 `r_cron.yml` 剧本：
```