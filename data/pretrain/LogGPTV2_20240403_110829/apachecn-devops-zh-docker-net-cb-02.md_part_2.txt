```
假设容器所在的网络是由 Docker 创建的，我们可以放心地假设网络的其他部分并不知道它。也就是说，外部网络不知道`172.17.0.0/16`网络，因为它位于 Docker 主机的本地。也就是说，容器能够到达`docker0`桥以外的资源似乎很奇怪。Docker 通过将容器的 IP 地址隐藏在 Docker 主机的 IP 接口后面来实现这一点。交通流量如下图所示:
![How to do it…](img/B05453_02_02.jpg)
由于容器的流量在物理网络上被视为 Docker 主机的 IP 地址，其他网络资源知道如何将流量返回给容器。为了执行这个出站 NAT，Docker 使用了 Linux 网络过滤器框架。我们可以使用 netfilter 命令行工具`iptables`看到这些规则:
```
user@docker1:~$ sudo iptables -t nat -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination
DOCKER     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
DOCKER     all  --  anywhere            !127.0.0.0/8          ADDRTYPE match dst-type LOCAL
Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination
MASQUERADE  all  --  172.17.0.0/16        anywhere
Chain DOCKER (2 references)
target     prot opt source               destination
RETURN     all  --  anywhere             anywhere
user@docker1:~$
```
如你所见，我们在`POSTROUTING`链中有一个规则，伪装或隐藏任何来源于主机接口后面的`docker0`桥(`172.17.0.0/16`)的东西。
虽然出站连接是默认配置和允许的，但是 Docker 默认不提供从 Docker 主机外部访问容器中的服务的方法。为了做到这一点，我们必须在容器运行时传递 Docker 附加标志。具体来说，我们可以在运行容器时传递`-P`标志。为了检查这个行为，让我们来看一个公开端口的容器映像:
```
docker run --name web1 -d -P jonlangemak/web_server_1
```
这告诉 Docker 将随机端口映射到容器映像公开的任何端口。在这个演示容器的情况下，映像暴露了端口`80`。运行容器后，我们可以看到映射到容器的主机端口:
```
user@docker1:~$ docker run --name web1 -P -d jonlangemak/web_server_1
556dc8cefd79ed1d9957cc52827bb23b7d80c4b887ee173c2e3b8478340de948
user@docker1:~$
user@docker1:~$ docker port web1
80/tcp -> 0.0.0.0:32768
user@docker1:~$
```
可以看到，容器端口`80`已经映射到主机端口`32768`。这意味着我们可以通过在端口`32768`的主机接口访问在容器的端口`80`上运行的服务。与出站容器访问非常相似，入站连接也使用 netfilter 来创建端口映射。我们可以通过检查 NAT 和过滤器表看到这一点:
```
user@docker1:~$ sudo iptables -t nat -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination
DOCKER     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
DOCKER     all  --  anywhere            !127.0.0.0/8          ADDRTYPE match dst-type LOCAL
Chain POSTROUTING (policy ACCEPT)
target     prot opt source          destination
MASQUERADE  all  --  172.17.0.0/16  anywhere
MASQUERADE  tcp  --  172.17.0.2     172.17.0.2           tcp dpt:http
Chain DOCKER (2 references)
target     prot opt source               destination
RETURN     all  --  anywhere             anywhere
DNAT       tcp  --  anywhere             anywhere             tcp dpt:32768 to:172.17.0.2:80
user@docker1:~$ sudo iptables -t filter -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
Chain FORWARD (policy ACCEPT)
target     prot opt source               destination
DOCKER-ISOLATION  all  --  anywhere             anywhere
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
Chain DOCKER (1 references)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             172.17.0.2           tcp dpt:http
Chain DOCKER-ISOLATION (1 references)
target     prot opt source               destination
RETURN     all  --  anywhere             anywhere
user@docker1:~$
```
由于所有接口(`0.0.0.0`)都公开了连通性，我们的入站图将如下所示:
![How to do it…](img/B05453_02_03.jpg)
如果不是定义的，则居住在同一主机上的容器，以及因此同一`docker0`桥，可以通过它们在任何端口上的分配的 IP 地址内在地相互通信，该端口绑定到一个服务。允许这种通信是默认行为，可以更改，我们将在后面的章节中讨论**容器间通信** ( **ICC** )配置时看到这一点。
### 注
应该注意的是，这是在不指定任何附加网络参数的情况下运行的容器的默认行为，即使用 Docker 默认桥接网络的容器。后面的章节将介绍其他选项，这些选项允许您将同一台主机上的容器放置在不同的网络上。
居住在不同主机上的容器之间的通信需要使用前面讨论的两个流的组合。为了测试这一点，让我们通过添加名为`docker2`的第二个主机来扩展我们的实验室。让我们假设主机`docker2`上的容器`web2`希望访问主机`docker1`上的容器`web1`，该主机在端口`80`上托管服务。流程如下所示:
![How to do it…](img/B05453_02_04.jpg)
让我们遍历每一步的流程，并展示在每一步中数据包到达网络时的样子。在这种情况下，容器`web1`正在暴露端口`80`，该端口已经发布到主机`docker1`上的端口`32771`。
1.  Traffic leaves the container `web2` destined for the exposed port (`32771`) on the `10.10.10.101` interface of host `docker1`:
    ![How to do it…](img/B05453_02_05.jpg)
2.  Traffic arrives at the container's default gateway, which is the IP interface of the `docker0` bridge (`172.17.0.1`). The host does a route lookup and determines that the destination lives out of its `10.10.10.102` interface, so it hides the container's real source IP behind that interface's IP address:
    ![How to do it…](img/B05453_02_06.jpg)
3.  Traffic arrives at the `docker1` host and is examined by the netfilter rules. `docker1` has a rule that exposes the service port of container 1 (`80`) on port `32271` of the host:
    ![How to do it…](img/B05453_02_07.jpg)
4.  The destination port is changed from `32771` to `80` and passed along to the `web1` container, which receives the traffic on the correct port `80`:
    ![How to do it…](img/B05453_02_08.jpg)
为了亲自尝试，让我们首先运行`web1`容器，并检查服务在哪个端口公开:
```
user@docker1:~/apache$ docker run --name web1 -P \
-d jonlangemak/web_server_1
974e6eba1948ce5e4c9ada393b1196482d81f510de 12337868ad8ef65b8bf723
user@docker1:~/apache$
user@docker1:~/apache$ docker port web1
80/tcp -> 0.0.0.0:32771
user@docker1:~/apache$
```
现在，让我们在主机 docker2 上运行第二个名为 web2 的容器，并尝试在端口 32771 上访问 web1 的服务…
```
user@docker2:~$ docker run --name web2 -it \
jonlangemak/web_server_2 /bin/bash
root@a97fea6fb0c9:/#
root@a97fea6fb0c9:/# curl http://10.10.10.101:32771
    Web Server #1 - Running on port 80
```
# 曝光和发布端口
正如我们在前面的例子中所看到的，将生活在容器中的服务暴露给外部世界是 Docker 的一个关键组成部分。到目前为止，我们已经让映像和 Docker 引擎在实际的端口映射方面为我们做了繁重的工作。为此，Docker 使用来自容器映像的元数据的组合以及用于跟踪端口分配的内置系统。在本食谱中，我们将介绍定义要公开的端口以及发布端口的选项的过程。
## 做好准备
您需要访问 Docker 主机，并了解您的 Docker 主机是如何连接到网络的。在本食谱中，我们将使用之前食谱中使用的`docker1`主机。您需要确保您有权查看`iptables`规则以验证网络过滤策略。如果您希望下载并运行示例容器，您的 Docker 主机也需要访问互联网。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
而经常混淆，暴露端口和发布端口是两个完全不同的动作。公开端口实际上只是记录容器可能在哪些端口上提供服务的一种方式。这些定义作为映像的一部分存储在容器元数据中，可以由 Docker 引擎读取。发布端口是将容器端口映射到主机端口的实际过程。这可以使用公开的端口定义自动完成，也可以不使用公开的端口手动完成。
我们先讨论端口是如何暴露的。暴露端口的最常见机制是在映像的 **Dockerfile** 中定义它们。构建容器映像时，您有机会定义要公开的端口。考虑一下我用来为这本书构建一些演示容器的 Dockerfile 定义:
```
FROM ubuntu:12.04
MAINTAINER Jon Langemak PI:EMAIL
RUN apt-get update && apt-get install -y apache2 net-tools inetutils-ping curl
ADD index.html /var/www/index.html
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
EXPOSE 80
CMD ["/usr/sbin/apache2", "-D", "FOREGROUND"]
```
作为 Dockerfile 的一部分，我可以定义我希望公开的端口。在这种情况下，我知道默认情况下，Apache 将在端口`80`上提供其网络服务器，因此这是我希望公开的端口。
### 注
请注意，默认情况下，Docker 总是假设您所指的端口是 TCP。如果您希望公开 UDP 端口，您可以通过在端口定义的末尾包含`/udp`标志来实现。例如`EXPOSE 80/udp`。
现在，让我们运行一个用这个 Dockerfile 构建的容器，看看会发生什么:
```
user@docker1:~$ docker run --name web1 -d jonlangemak/web_server_1
b0177ed2d38afe4f4d8c26531d00407efc0fee6517ba5a0f49955910a5dbd426
user@docker1:~$
user@docker1:~$ docker port web1
user@docker1:~$
```
正如我们所看到的，尽管有一个定义好的端口要公开，Docker 实际上并没有映射主机和容器之间的任何端口。如果您记得早期的配方，其中容器提供服务，我们在`docker run`命令语法中包含了`-P`标志。`-P`标志告诉 Docker 发布所有暴露的端口。让我们尝试在设置了`-P`标志的情况下运行该容器:
```
user@docker1:~$ docker run --name web1 -d -P jonlangemak/web_server_1
d87d36d7cbcfb5040f78ff730d079d353ee81fde36ecbb5ff932ff9b9bef5502
user@docker1:~$
user@docker1:~$ docker port web1
80/tcp -> 0.0.0.0:32775
user@docker1:~$
```
在这里，我们可以看到 Docker 现在已经自动将暴露的端口映射到主机上的随机高端口。港口`80`现在将被视为已发布。