trusted data in HTML content.
It turns out that if
JavaScriptEscape is applied to untrusted data before
the application of HTMLEscape, certain XSS attacks are
not prevented [32]. The opposite ordering does prevent
these attacks. BEK can check if a pair of sanitizers are
commutative, which would mean the programmer does
not need to worry about this class of bugs.
Idempotence: BEK can check if applying the sanitizer
twice yields different behavior from a single application.
For example, an extra JavaScript string encoding may
break the intended rendering behavior in the browser.
2.2.2 Sanitizer Implementation Correctness
Hand-coded sanitizers are notoriously difﬁcult to write
correctly. Analyses provided by BEK help achieve cor-
rectness in three ways.
Comparing multiple sanitizer implementations: Mul-
tiple implementations of the same sanitization function-
ality can differ in subtle ways [9]. BEK can check
whether two different programs written in the BEK lan-
guage are equivalent. If they are not, BEK exhibits inputs
that yield different behaviors.
Comparing sanitizers to browser ﬁlters: Internet Ex-
plorer 8 and 9, Google Chrome, Safari, and Firefox em-
ploy built-in XSS ﬁlters (or have extensions [3]) that ob-
serve HTTP requests and responses [1, 2] for attacks.
These ﬁlters are most commonly speciﬁed as regular
expressions, which we can model with BEK. We can
then check for inputs that are disallowed by browser ﬁl-
ters, but which are allowed by sanitizers. For example,
BEK can determine that the AntiXSS implementation of
the EncodeHTML sanitizer in Figure 2 does not block
strings such as javascript&#58; which are prevented by
IE 8 XSS ﬁlters. These differences indicate potential
bugs in the sanitizer or the ﬁlter.
Checking against public attack sets: Several pub-
lic XSS attack sets are available, such as XSS cheat
sheet [5]. With BEK, for all sanitizers, for all attack vec-
tors in an attack set, we can check if there exists an input
to the sanitizer that yields the attack vector.
3 The BEK Language and Transducers
In this section, we give a high-level description of a
small imperative language, BEK, of low-level string op-
erations. Our goal is two-fold. First, it should be possible
to model BEK expressions in a way that allows for their
analysis using existing constraint solvers. Second, we
want BEK to be sufﬁciently expressive to closely model
real-world code (such as Example 2).
In this section
Bool Constants B ∈ {t, f }
Char Constants d ∈ Σ
Bool Variables
Char Variables
String Variables
b, . . .
c
t
Strings
sexpr ::= iter(c in sexpr) {init} {case∗}
| fromLast(ccond, sexpr)
| uptoLast(ccond, sexpr) | t
init ::= (b := B)∗
case ::= case(bexpr) {cstmt}| endcase
endcase ::= end(ebexpr){yield(d)∗}
cstmt ::= (b := ebexpr; | yield(cexpr);)∗
bexpr ::= Boolcomb(bexpr) |B | b | ccond
Booleans
ebexpr ::= Boolcomb(ebexpr) |B | b
ccond ::= Boolcomb(ccond) |cexpr = cexpr
| cexpr  cexpr
Char strings
cexpr ::= c | d | built-in-fnc(c) | cexpr + cexpr
Figure 4: Concrete syntax for BEK. Well-formed BEK
expressions are functions of type string → string;
the language provides basic constructs to ﬁlter and trans-
form the single input string t. Boolcomb(e) stands for
Boolean combination of e using conjunction, disjunc-
tion, and negation.
we ﬁrst present the BEK language. We then deﬁne the
semantics of BEK programs in terms of symbolic ﬁnite
transducers (SFTs), an extension of classical ﬁnite state
transducers. Finally, we describe several core decision
procedures for SFTs that provide an algorithmic founda-
tion for efﬁcient static analysis
and veriﬁcation of BEK programs.
3.1 The BEK Language
Figure 4 describes the language syntax. We deﬁne a sin-
gle string variable, t, to represent an input string, and
a number of expressions that can take either t or an-
other expression as their input. The uptoLast(ϕ, t) and
fromLast(ϕ, t) are built-in search operations that ex-
tract the preﬁx (sufﬁx) of t upto (from) and excluding
the last occurrence of a character satisfying ϕ. These
constructs are listed separately because they cannot be
implemented using other language features. Finally, the
iter construct allows for character-by-character iteration
over a string expression.
Example 3. uptoLast(c = ‘.’, "w.abc.org")
fromLast(c = ‘.’, "w.abc.org")
= "www.abc",
⊠
="org".
The iter construct is designed to model loops that tra-
verse strings while making imperative updates to boolean
variables. Given a string expression (sexpr), a char-
acter variable c, and an initial boolean state (init), the
statement iterates over characters in sexpr and evaluates
the conditions of the case statements in order. When a
condition evaluates to true, the statements in cstmt may
yield zero or more characters to the output and update the
boolean variables for future iterations. The endcase ap-
plies when the end of the input string has been reached.
When no case applies, this correspond to yielding zero
characters and the iteration continues or the loop termi-
nates if the end of the input has been reached.
3.2 Finite Transducers
We start with the classical deﬁnition of ﬁnite state trans-
ducers. The particular sublass of ﬁnite transducers that
we are considering here are also called generalized se-
quential machines or GSMs [29], however, this deﬁni-
tion is not standardized in the literature, and we there-
fore continue to say ﬁnite transducers for this restricted
case. The restriction is that, GSMs read one symbol at
each transition, while a more general deﬁnition allows
transitions that skip inputs.
Deﬁnition 1. A Finite Transducer A is deﬁned as a six-
tuple (Q, q0, F, Σ, Γ, ∆), where Q is a ﬁnite set of states,
q0 ∈ Q is the initial state, F ⊆ Q is the set of ﬁnal states,
Σ is the input alphabet, Γ is the output alphabet, and ∆
is the transition function from Q × Σ to 2Q×Γ∗
.
We indicate a component of a ﬁnite transducer A by
using A as a subscript. For (q, v) ∈ ∆A(p, a) we deﬁne
a/v
−→A q, where p, q ∈ QA, a ∈ ΣA and
the notation p
a/v
v ∈ Γ∗
−→ q when A is clear from the
context. Given words v and w we let v · w denote the
concatenation of v and w. Note that v · ǫ = ǫ · v = v.
A. We write p
Given qi
ai/vi−→ A qi+1 for i ==,
≤ and ≥ to be deﬁned accordingly. We also assume that
each individual character has a built-in constant such as
‘a’:CHAR. For example,
(‘A’ ≤ c ∧ c ≤ ‘Z’) ∨ (‘a’ ≤ c ∧ c ≤ ‘z’)∨
(‘0’ ≤ c ∧ c ≤ ‘9’) ∨ c = ‘ ’
descibes the regex character class \w of all word char-
acters in ASCII. (Direct use of regex character classes
in BEK, such as case(\w) {. . .}, is supported in the en-
hanced syntax supported in the BEK analyzer tool.)
Each sexpr e is translated into an SFT SFT (e).
For the string variable t, SFT (e) = Id , with Id
as in Example 4. The translation of uptoLast(ϕ, e)
is the symbolic composition STF (e) ◦ B where B
is an SFT similar to the one in Example 5, except
that the condition c = ‘.’ is replaced by ϕ. The
translation of fromLast(ϕ, e) is analogous. Finally,
SFT (iter(c in e) {init} {case∗}) = SFT (e) ◦ B
where B = (Q, q0, Q, CHAR, CHAR, δ) is
constructed as follows:
Step 1: Normalize. Transform case∗ so that case con-
ditions are mutually exclusive by adding the nega-
tions of previous case conditions as conjuncts to all
the subsequent case conditions, and ensure that each
boolean variable has exactly one assignment in each
cstmt (add the trivial assignment b := b
if b is not assigned).
Step 2: Compute states. Compute the set of states Q.
Let q0 be an initial state as the truth assignment to
boolean variables declared in init.4 Compute the
set Q of all reachable states, by using DFS, such
that, given a reached state q, if there exists a case
case(ϕ) {cstmt} such that Subst(ϕ, q) is satisﬁ-
able then add the state
{b 7→ [[Subst(ψ, q)]] | b := ψ ∈ cstmt}
(1)
to Q. (Note that Subst(ψ, q) is a value term.)
Step 3: Compute transitions. Compute the symbolic
transition function δ. For each state q ∈ Q and
for each case case(ϕ) {cstmt} such that φ =
Subst(ϕ, q) is satisﬁable. Let p be the state com-
puted in (1). Let yield(u0), . . . , yield(un−1) be
the sequence of yields in cstmt and let u =
[u0, . . . , un−1]. Add the symbolic
transition q
φ/u
−→ p to δ.
4Note that q0 is the empty assignment if init is empty, which trivi-
alizes this step.
/


,
,
+
+


U
U
=
=
(c /∈{′′′,′”′,′\′})/[c]
/GFED
@ABC
?>==<
89:;q1
(c∈{′′′,′”′})/[′\′, c]
Figure 6: SFT for BEK program in Example 1. This
SFT escapes single and double quotes with a backslash,
except if the current symbol is already escaped. The ap-
plication of this SFT is idempotent.
The translation of end-cases is similar, resulting in sym-
bolic transitions with guard c = ⊥, where ⊥ is a spe-
cial character used to indicate end-of-string. We assume
⊥ to be least with respect to <. For example, assum-
ing that the BEK programs use concrete ASCII charac-
ters, ⊥:CHAR is either an additional character, or the null
character ‘\0’ if only null-terminated strings are consid-
ered as valid input strings. Although practically impor-
tant, end-cases do not cause algorithmic complications,
and for the sake of clarity we avoid them
in further discussion.
The algorithm uses a solver to check satisﬁability of
guard formulas. If checking satisﬁability of a formula for
example times out, then it is safe to assume satisﬁabil-
ity and to include the corresponding symbolic transition.
This will potentially add infeasible guards but retains the
correctness of the resulting SFT, meaning that the under-
lying ﬁnite transduction is unchanged. While in most
cases checking satisﬁability of guards seems straight-
forward, but when considering Unicode, this perception
is deceptive. As an example, the regex character class
[\W-[\D]] denotes an empty set since \d is a subset of
\w and \W (\D) is the complement of \w (\d), and thus,
[\W-[\D]] is the intersection of \W and \d. Just the charac-
ter class \w alone contains 323 non-overlapping ranges in
Unicode, totaling 47,057 characters. A na¨ıve algorithm
for checking satisﬁability (non-emptiness) of [\W-[\D]]
may easily time out.