## Linux 进程实际内存占用计算方法 - vsz,vss,rss,pss,uss 介绍     
### 作者                  
digoal                  
### 日期                  
2022-02-10                 
### 标签                  
PostgreSQL , 内存 , vsz , vss , rss , pss , uss , smaps , smem , maps           
----                  
## 背景             
- 某个进程独占内存:    
    - USS    
- 由于有fork, 线程的机制存在, 线程、进程之间可以共享内存, 所以一组进程(或线程)家族的内存占用:    
    - sum(USS + PSS)    
vss为什么不对? 因为是分配但是未使用的内存. 类似云计算资源的超卖、某些存储的provision功能(超分配), 分配的内存可能比实际内存大.      
rss为什么不对? 因为是共享的, 可能被多个进程同时算到, 计算一组进程(或线程)家族的内存占用使用SUM(rss)就不对了.      
rss通常被OOM-Killer用来判断杀哪个进程.      
## 内存耗用：VSS/RSS/PSS/USS 的介绍    
https://www.jianshu.com/p/3bab26d25d2e    
一般来说内存占用大小有如下规律：VSS >= RSS >= PSS >= USS    
#### VSS - Virtual Set Size （用处不大）    
虚拟耗用内存（包含共享库占用的全部内存，以及分配但未使用内存）。其大小还包括了可能不在RAM中的内存（比如虽然malloc分配了空间，但尚未写入）。VSS 很少被用于判断一个进程的真实内存使用量。    
![pic](20220210_03_pic_001.png)    
#### RSS - Resident Set Size （用处不大）    
实际使用物理内存（包含共享库占用的全部内存）。但是RSS还是可能会造成误导，因为它仅仅表示该进程所使用的所有共享库的大小，它不管有多少个进程使用该共享库，该共享库仅被加载到内存一次。所以RSS并不能准确反映单进程的内存占用情况。    
![pic](20220210_03_pic_002.png)    
#### PSS - Proportional Set Size （仅供参考）    
实际使用的物理内存（比例分配共享库占用的内存，按照进程数等比例划分）。    
例如：如果有三个进程都使用了一个共享库，共占用了30页内存。那么PSS将认为每个进程分别占用该共享库10页的大小。    
PSS是非常有用的数据，因为系统中所有进程的PSS都相加的话，就刚好反映了系统中的 总共占用的内存。而当一个进程被销毁之后， 其占用的共享库那部分比例的PSS，将会再次按比例分配给余下使用该库的进程。    
这样PSS可能会造成一点的误导，因为当一个进程被销毁后， PSS不能准确地表示返回给全局系统的内存。    
![pic](20220210_03_pic_003.png)    
#### USS - Unique Set Size （非常有用）    
进程独自占用的物理内存（不包含共享库占用的内存）。USS是非常非常有用的数据，因为它反映了运行一个特定进程真实的边际成本（增量成本）。当一个进程被销毁后，USS是真实返回给系统的内存。当进程中存在一个可疑的内存泄露时，USS是最佳观察数据。    
![pic](20220210_03_pic_004.png)    
参考资料：    
http://myeyeofjava.iteye.com/blog/1837860    
http://blog.csdn.net/panda1234lee/article/details/52291588    
## The mirage of memory    
https://dev.to/yugabyte/the-mirage-of-memory-3366    
https://dev.to/yugabyte/mirage-of-memory-part-2-pss-1n8o    
像 linux 这样的现代操作系统非常复杂。这种复杂性意味着有时事情实际上与他们让你相信的不同。其中之一是内存使用。    
Linux 与大多数现代操作系统一样，使用虚拟内存。这意味着每个不同的进程都有自己的地址空间，如果它正在使用线程，则该地址空间对进程和它的线程来说是完全私有的。    
### 获取linux内存统计信息    
对于每个使用的内存段，linux 都会跟踪分配，这当然是显而易见的，但也会在名为“maps”的文件中公开 proc 元文件系统中的分配。这些是我运行“cat”查看它时的分配：    
```    
$ cat /proc/self/maps    
55e0495ab000-55e0495b3000 r-xp 00000000 fd:00 401342                     /usr/bin/cat    
55e0497b2000-55e0497b3000 r--p 00007000 fd:00 401342                     /usr/bin/cat    
55e0497b3000-55e0497b4000 rw-p 00008000 fd:00 401342                     /usr/bin/cat    
55e04a1c0000-55e04a1e1000 rw-p 00000000 00:00 0                          [heap]    
7f23fbf4a000-7f23fc1c2000 r--p 00000000 fd:00 882                        /usr/lib/locale/en_US.utf8/LC_COLLATE    
7f23fc1c2000-7f23fc37e000 r-xp 00000000 fd:00 33564883                   /usr/lib64/libc-2.28.so    
7f23fc37e000-7f23fc57d000 ---p 001bc000 fd:00 33564883                   /usr/lib64/libc-2.28.so    
7f23fc57d000-7f23fc581000 r--p 001bb000 fd:00 33564883                   /usr/lib64/libc-2.28.so    
7f23fc581000-7f23fc583000 rw-p 001bf000 fd:00 33564883                   /usr/lib64/libc-2.28.so    
7f23fc583000-7f23fc587000 rw-p 00000000 00:00 0    
7f23fc587000-7f23fc5b3000 r-xp 00000000 fd:00 33564876                   /usr/lib64/ld-2.28.so    
7f23fc72b000-7f23fc74d000 rw-p 00000000 00:00 0    
7f23fc74d000-7f23fc7a0000 r--p 00000000 fd:00 883                        /usr/lib/locale/en_US.utf8/LC_CTYPE    
7f23fc7a0000-7f23fc7a1000 r--p 00000000 fd:00 886                        /usr/lib/locale/en_US.utf8/LC_NUMERIC    
7f23fc7a1000-7f23fc7a2000 r--p 00000000 fd:00 33564847                   /usr/lib/locale/en_US.utf8/LC_TIME    
7f23fc7a2000-7f23fc7a3000 r--p 00000000 fd:00 33564845                   /usr/lib/locale/en_US.utf8/LC_MONETARY    
7f23fc7a3000-7f23fc7aa000 r--s 00000000 fd:00 67614780                   /usr/lib64/gconv/gconv-modules.cache    
7f23fc7aa000-7f23fc7ac000 rw-p 00000000 00:00 0    
7f23fc7ac000-7f23fc7ad000 r--p 00000000 fd:00 33564857                   /usr/lib/locale/en_US.utf8/LC_MESSAGES/SYS_LC_MESSAGES    
7f23fc7ad000-7f23fc7ae000 r--p 00000000 fd:00 100664709                  /usr/lib/locale/en_US.utf8/LC_PAPER    
7f23fc7ae000-7f23fc7af000 r--p 00000000 fd:00 885                        /usr/lib/locale/en_US.utf8/LC_NAME    
7f23fc7af000-7f23fc7b0000 r--p 00000000 fd:00 33564842                   /usr/lib/locale/en_US.utf8/LC_ADDRESS    
7f23fc7b0000-7f23fc7b1000 r--p 00000000 fd:00 33564846                   /usr/lib/locale/en_US.utf8/LC_TELEPHONE    
7f23fc7b1000-7f23fc7b2000 r--p 00000000 fd:00 33564844                   /usr/lib/locale/en_US.utf8/LC_MEASUREMENT    
7f23fc7b2000-7f23fc7b3000 r--p 00000000 fd:00 33564843                   /usr/lib/locale/en_US.utf8/LC_IDENTIFICATION    
7f23fc7b3000-7f23fc7b4000 r--p 0002c000 fd:00 33564876                   /usr/lib64/ld-2.28.so    
7f23fc7b4000-7f23fc7b6000 rw-p 0002d000 fd:00 33564876                   /usr/lib64/ld-2.28.so    
7ffcb6792000-7ffcb67b3000 rw-p 00000000 00:00 0                          [stack]    
7ffcb67df000-7ffcb67e3000 r--p 00000000 00:00 0                          [vvar]    
7ffcb67e3000-7ffcb67e5000 r-xp 00000000 00:00 0                          [vdso]    
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]    
```    
（对于阅读本文的老年人：这也是该pmap实用程序为您提供的，在多年前 proc 元文件系统和映射不存在时使用）    
如您所见，这些是相当多的内存分配。分配包括可执行文件（为其加载文本（代码）、只读数据和读写数据段）、堆、共享库（由与可执行文件相同的段组成）、区域设置数据和其他分配.    
如果我告诉你这些文件的内容实际上并没有加载到地址空间中，除了第一页，除非实际使用了其他页面？这就是操作系统可以如此快速地启动进程的原因之一：它会在最低限度内分页（“加载”），并在实际请求时添加额外的页面。    
实际加载页面的大小有一个名字，叫做“RSS”，意思是“驻留集大小”。但是你不应该相信我，或者任何告诉你事情的人，应该有证据。这个证明可以在 linux 的 proc 元文件系统中的一个名为“smaps”的文件中找到。这是这样的：    
```    
$ head /proc/self/smaps    
5557aad59000-5557aad63000 r-xp 00000000 fd:00 404248                     /usr/bin/head    
Size:                 40 kB    
KernelPageSize:        4 kB    
MMUPageSize:           4 kB    
Rss:                  40 kB    
Pss:                  40 kB    
Shared_Clean:          0 kB    
Shared_Dirty:          0 kB    
Private_Clean:        40 kB    
Private_Dirty:         0 kB    
```    
对于每个内存段，smaps显示内存详细信息。头可执行文件的第一个段是文本段，它是只读的（`'r-xp'：read，executable，private`），文本段总是只读的。“大小”统计数据是总大小，通常称为“虚拟集大小”或 VSZ。这里要发现的重要一点是 Rss，对于头可执行文件也是 40kB。头部文本段太小了，所有 10 页都被分页了。    
现在查看另一个文件：`/usr/lib/locale/en_US.utf8/LC_COLLATE`。我不确定这是多么静态，因此是否会在您的机器上请求它（我使用的是 `Alma 8.5 x86_64`），但它说明了这一点：    
```    
$ grep -A6 LC_COLLATE /proc/self/smaps    
7f492a1ff000-7f492a477000 r--p 00000000 fd:00 882                        /usr/lib/locale/en_US.utf8/LC_COLLATE    
Size:               2528 kB    
KernelPageSize:        4 kB    
MMUPageSize:           4 kB    
Rss:                  96 kB    
Pss:                  93 kB    
Shared_Clean:          4 kB    
```    
该文件的 VSZ 大小为 2528 kB，但实际上是 96 kB，别名 RSS 大小。    
### Postgresql 分配    
此时您可能想知道这与 Postgresql 有什么关系。好吧，实际上很多...当 postgres 启动时，它将受到与我刚才描述的相同的延迟加载，包括 postgres 缓冲区缓存，它可以设置为大量内存。    
在我的测试 postgres 实例上，它实际上是默认设置（128MB）。这是在 smaps 中的样子：    
```    
# grep -A6 deleted /proc/884/smaps    
7f82f73c9000-7f8300175000 rw-s 00000000 00:05 22953                      /dev/zero (deleted)    
Size:             145072 kB    
KernelPageSize:        4 kB    