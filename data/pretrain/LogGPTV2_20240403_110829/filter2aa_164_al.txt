“lift” the Pen tool with the pen up block to stop the line drawing.
9–14: Here you glide the sprite counter-clockwise around the Stage in a square shape. You
should see the line automatically reset and redraw each time you click the Green Flag
button to rerun the app.
15: Lifts up the Pen tool and therefore stop drawing lines.
16: Resets the sprite’s position to the (0,0) origin point.
17: Has the sprite communicate the end of the program to the user. In this case, the game
simply stops. As you gain expertise with Scratch, you will doubtless implement more
elegant methods to start, run, and stop your projects.
 Then the final block stops the application.
The PicoBoard
Traditional Scratch programming involves sensing and responding to a variety of events:
 Mouse clicks
 Individual keystrokes
 Keyboard-based user input
 However, each of these events is what we can call digital. In other words, a mouse has either been
clicked or it has not—there are no in-between states. Likewise, a mathematical calculation results in
a particular result—there isn’t any gray area to speak of.
 The PicoBoard is a separate piece of hardware you can use to bring analog, external events to your
Scratch projects. Fans of the PicoBoard stress that the board allows you to connect your Scratch
projects to the outside world.
 For instance, how about a game that responds to voice input? Or perhaps a game that uses a custom
joystick controller? You can do all this and more with the Picoboard.
 The PicoBoard is, like the Raspberry Pi, a printed circuit board. As you can see in Figure 8.7, the
PCB consists of a number of inputs that cover a wide variety of analog sensory data:
1: 4 Expansion Connectors: Each plug links to a pair of alligator clip connectors that can be
used to measure resistance in any external object. Scratch represents the connector states as
100 (no circuit) to 0 (complete circuit between alligator clips). Intermediate values represent
the degree of resistance in the circuit between the two alligator clips.
2: Slider: Scratch quantifies the slider position in the range 0–100.
3: Light Sensor: The sensor is quantified (or rendered digitally) by Scratch in a range from 0
(totally dark) to 100 (maximum brightness detected).
4: Microphone: This sound sensor is quantified in Scratch in a range from 0 (silence) to 100
(loudest audio signal detected).
5: Button: The tactile (physical) button has two states: True (when pressed) and False (when
unpressed).
6: USB: This port both provides power to the board and serves as a way to transfer data to and
from the PicoBoard.
FIGURE 8.7 The PicoBoard is a sensor module that brings the external environment to Scratch.
Incidentally, analog signals are distinct from digital ones because analog signals operate on a
continuum of continuously varying values. For instance, the human voice generates a wave-like
pattern of data. When computers use analog-to-digital converters (which the Pi can do thanks to the
Gertboard accessory), they attempt to replicate an analog waveform by using two values: 0 and 1.
The more bits you add to the conversion, the more faithfully you can reproduce the original audio
signal. That’s why low bitrate MP3 audio sounds so much worse than high bitrate MP3 audio.
Obtaining a PicoBoard?
 The PicoBoard is manufactured and sold by Sparkfun Electronics (http://is.gd/WyVO4D); as of this
writing, the price is $44.95. Please note that the PicoBoard as it is sold by Sparkfun does not include
the requisite mini USB cable that is required to use the board.
 Note, also, that the PicoBoard uses the mini USB cable, not the micro USB cable that the Raspberry
Pi uses.
Using a PicoBoard in Scratch
 Recall that the Raspberry Pi requires at least 700 mA inbound to perform its work and that you should
plan on using a powered USB hub to power any external devices.
 To that point, be sure to plug your PicoBoard’s USB cable into your powered hub and not into the Pi
itself.
 I’ve found that the Raspbian OS automatically detects the PicoBoard, and the device is therefore
immediately usable in the Raspberry Pi. This is good news because you need to manually install
PicoBoard device drivers for Windows and OS X computers (you can download the drivers from the
Cricket website at http://is.gd/GTkHm7).
Task: Using the PicoBoard in Scratch
Now that I’ve whet your appetite and you’ve received your PicoBoard, it is time to
learn how to use it with your Raspberry Pi. Let’s begin!
1. Ensure that your PicoBoard is plugged in and that Scratch detects it. An easy way to test
functionality is by using the ScratchBoard watcher.
2. Navigate to the Sensing blocks palette, right-click the slider sensor value block, and
select show ScratchBoard watcher from the shortcut menu.
This action adds a Stage monitor (also called a watcher) to the Stage that displays the
current values of all sensors on the PicoBoard. You can see this in action in Figure 8.8.
FIGURE 8.8 The ScratchBoard Watcher gives you at-a-glance status of all PicoBoard
sensors. You can see the Watcher in the Stage area above and to the left of the Scratch Cat
sprite.
3. In Raspbian, open a web browser and download the Scratch project called “PicoBoard
Tester” (http://is.gd/ry5nra).
4. In Scratch, click File, Open and navigate to the PicoBoard Tester project. Open the
project and click the Green Flag icon to run it.
5. On the PicoBoard, jog the slider back and forth. Note both the graphical element on the
Stage as well as the watcher readout value.
Note: The Difference Between the ScratchBoard and the PicoBoard?
The MIT Learning Lab people originally developed the PicoBoard; the device
was initially yellow and carried the name Scratch Sensor Board. Before too long,
ownership of the project changed hands a couple of times. Now Sparkfun Electronics
owns the hardware; to celebrate they renamed the device PicoBoard and gave the PCB
a nice red paint job.
6. Snap your fingers. Again, observe both the program’s graphical display as well as the
value on the watcher. You’ll find that the PicoBoard microphone is pretty darned
sensitive!
7. Pick up your PicoBoard (carefully) and hold it close to a nearby light. By contrast,
slowly cover up the light sensor with your cupped hand. Observe value changes in the
Scratch project.
8. Click the tactile pushbutton on the PicoBoard and watch for changes in the Scratch app.
9. Finally, plug in one of the alligator clip pairs and touch the alligator clip metal ends
together. Note the changes in the Scratch program that indicate you’ve completed a zero-
resistance circuit between the probes.
Two final points to consider regarding this final project:
 Try building your own sprites that take actions based on PicoBoard-detected events.
 Remember to scour the source code of any project you download from the Scratch website.
You can learn a lot about best (and worst) practices by studying how other Scratchers think
and develop their apps.
Chapter 9. Programming Raspberry Pi with Scratch—Next Steps
If you invested the necessary time to practice the Scratch programming skills you learned in Chapter
8, “Programming Raspberry Pi with Scratch—Beginnings,” you are ready to take the next step by
developing and sharing a full-fledged Scratch application.
 In this chapter, you learn how to create a pretty neat game, if I do say so myself. You’ve even got my
blessing to remix the game and submit it to the Scratch Projects website (if you don’t know what
remixing means, don’t worry—I cover that later on).
Note: Version Control, Revisited
As you learned in Chapter 8, the Scratch Team at the MIT Media Lab has upgraded
their website, promotional materials, and the development environment itself to Scratch
2.0. Although Scratch 2.0 on its surface looks very different from Scratch 1.4, don’t be
daunted. Everything you learned in the previous chapter and everything you learn in this
chapter carries over root and branch from Scratch 1.4 to Scratch 2.0. Besides, this book is
about the Raspi, and Raspi includes Scratch 1.4.
Begin with the End in Mind
Before you begin coding, I think the review of some programming best practices is in order. What
questions do you need answers to before you open up your development tools and start to build an
application?
What exactly is the purpose of the app? For the purposes of this exercise, you want to build
a game in Scratch that tests the player’s reflexes and offers a minute or so of heart-racing fun.
Specifically, the game I designed for this chapter is called Dodgeball Challenge; Figure 9.1
displays the splash screen for the game.
FIGURE 9.1 Dodgeball Challenge splash screen. By the end of this chapter, you’ll know how to
build this game!
From a meta perspective, I also intend for this case study Scratch game to serve as a showpiece for
what Scratch is capable of as a multimedia development environment.
 Who is the intended audience for the app? Speaking personally, I have two main audiences in mind:
you, my readers and students, who want to learn how to program in Scratch and anybody with a love
of simple, addictive video games.
 I have actually added the Dodgeball Challenge game to the Scratch website. If you like, you can visit
the game page (http://is.gd/RvvRsT) and check out the game for your reference (see Figure 9.2). Isn’t
open source software wonderful?
FIGURE 9.2 You can check out the Dodgeball Challenge game (and associated source code)
from the Scratch Projects website. Note that the game is automatically converted to Scratch 2.0 and
can be opened directly from a (non-Raspberry Pi) web browser.
Before you proceed to the rest of the chapter in which you build the game from Scratch (pun
intended), play the game a few times so that you’re familiar with the gameplay. Although I provide the
game rules on the Scratch website page, let me summarize them for you here for the sake of
completeness:
 The goal of Dodgeball Challenge is to survive for 60 seconds.
 The game ends if the user’s avatar (specifically, the Scratch Cat as controlled by your
computer mouse) touches a ball or (optionally) the edge of the playfield.
 Every 15 seconds a new ball is added to the game, ramping up the complexity and difficulty.
Let’s Build the Game!
Fire up Scratch and save a new .sb project file. Because the Scratch Cat is the default sprite, let’s go
ahead and use it. The first step in this process is to set up the game screens, but before you do that,
let’s set the table with regard to what you’re about to take on.
 We have a concrete idea for a fun game, and we’ll build it one piece at a time, starting with the
screens. Iterative software development means that you’ll test the game after every change. This
approach minimizes the possibility of introducing bugs (programming logic flaws) into the released
version of the game.
 Take a look at Figure 9.3 so that you can refamiliarize yourself with the Scratch 1.4 user interface.
FIGURE 9.3 The Scratch 1.4 user interface, revisited.
1: Menu and toolbars
2: Stage
3: Blocks palette
4: Script area
5: Sprite area
Task: Setting Up the Game Screens
In Scratch 1.4, the Stage is the graphical area in which all activity takes place. Recall
from the previous chapter that the Stage consists of one or more Backgrounds that function a
lot like PowerPoint slides. Your first development task in building Dodgeball Challenge is
to define those game screens. We’ll worry about wiring them together afterward.
1. In the Sprites area, double-click the Stage to bring it into focus. In the Scripts area,
navigate to the Backgrounds tab. Use the Paint button to create three additional playfield
screens (four in total) as shown in Figure 9.4.
FIGURE 9.4 Dodgeball Challenge Stage backgrounds.
Here’s the breakdown of the purpose of each background:
 SplashScreen: This is the introductory screen that advertises the game to players and
provides instructions on starting the game itself.
 Playfield: This is the screen that is used during actual gameplay.
 GameOverBG: This is the screen the player sees when he loses the game.
 GameWonBG: This is the success screen presented to the player who lasts the entire 60
seconds without losing.
For further assistance in creating your game screens, feel free to study the backgrounds
in my published copy of Dodgeball Challenge on the Scratch website at
http://is.gd/RvvRsT. Because my published version uses Scratch 2.0, you can view the
underlying source code and assets directly from your web browser.
Another cool tip I have to share is that you can freely and legally download the
beautiful Press Start 2P 8-bit retro videogame font from the FontSpace website
(http://is.gd/59fciQ).
2. Navigate to the Scripts pane and add the two code blocks shown in Figure 9.5. Ignore the
two “when I receive” stacks for now.
FIGURE 9.5 Code blocks for the game Stage.
1. This block ensures that when the player clicks the Green Flag, the black splash screen is
presented.
2. This block triggers the actual gameplay by switching the background to the white
playfield background and kicking off the StartGame broadcast. Note that I chose the
Spacebar as the method for starting the game, but you can select any key from the
keyboard. Although you can also set up the game to respond to a mouse click, I advise
against that for this broadcast so as not to introduce any potential confusion. For my part,
I tend to use out of the way keystrokes in my games so if the user clicks their mouse or
taps a common key (such as ENTER), the game does not blow up.
As I alluded to in the previous chapter, broadcasts provide a convenient method for communicating
among sprites (or between the Stage and sprites) in a Scratch application. You can use the broadcast
block from the Control palette to define a broadcast; make sure to give each broadcast a meaningful
name.
 You can then leverage the when I receive block (again from the Control palette) to receive, or catch,
outbound broadcasts from the same sprite, another sprite, or even the Stage.
 Let’s now turn our attention to initial setup of the ScratchCat sprite.
Task: Setting Up the Scratch Cat
1. Double-click the Cat to select the sprite and rename it ScratchCat in the Scripts area.
2. Click the Shrink Sprite button above the Stage and repeatedly click the Scratch Cat sprite
until it reaches your desired size. My thought was to make the sprite large enough to see
its detail, yet small enough to provide for challenging gameplay.
3. Go over the Scripts area and set up the block stacks as shown in Figure 9.6. Yes, I know
you can simply examine my source code from the game copy you downloaded from the
Scratch website. However, if you want to learn to program with Scratch, you need to test
this stuff out yourself!
FIGURE 9.6 Block setup for the ScratchCat sprite and the game timer.
Let me explain the purpose of each block stack:
1: This stack hides both the Scratch Cat as well as the timer that you are about to build
when the player clicks the Green Flag. You don’t need to see these elements until the
player actually starts the gameplay itself (that is to say, when the player taps the
Spacebar).
2: This event listener “unhides” the Scratch Cat and maps the player’s mouse movements to
the Scratch Cat’s location. Note that these actions kick off in response to the StartGame
broadcast that you initiated from the SplashScreen.
3: This block stack sets up the game timer, which is crucial in this game. Although the
Sensing palette contains a couple Timer blocks, those blocks mark the elapsed time since
you last opened the Scratch app. Of course, that’s not what you need here. Therefore, you
can create a new variable named Timer (discussed in the Note, “Creating Variables”)
and simply increment its value every second. Pretty straightforward stuff, wouldn’t you
agree?
Note: Creating Variables
Variables are how you store temporary data in your app. To create the Timer
variable, navigate to the Variables palette and click Create Variable. By default the
new variable will be available to all sprites in the game; that is what we want in this
case. For further details, look at the live source code at the Scratch website:
http://is.gd/RvvRsT.
4: This is an optional block stack I put together to give you the ability to ramp up the
game’s complexity. This block ends the game if the Scratch Cat touches the border of the
screen. I disabled the stack by default because I felt that it made the game overly
difficult. What do you think?
5: When the GameOver message is broadcast, I want the Scratch Cat sprite to disappear.
Setting Up the First Ball
 I chose to add most of the gameplay logic in the Scripts area for the Basketball sprite, which is the
first enemy sprite used in the Dodgeball Challenge game. Take a look at the code in Figure 9.7, and
I’ll walk you through it.
FIGURE 9.7 Block setup for the Basketball sprite.
1: Wow, this is one honkin’ block stack! Here’s the deal: When the user presses the Spacebar
and kicks off the StartGame broadcast, you want to perform the following actions:
 Show the previously hidden basketball sprite (I prefer doing this to having the ball materialize
out of thin air).
 Wait an arbitrary second to give the player their bearings before the game starts.
 Loop through “random” movement. If you look within each repeat block, you see that I have the
ball move 15 steps, turn in a random direction between two degree markers, and bounce if the
sprite hits the border of the Stage.
 When the timer reaches 15, 30, and 45 seconds, I introduce additional balls. These invocations
are handled, reasonably enough, through broadcasts.
 When you reach 60 seconds without a game-ending action, Scratch broadcasts the GameWon
message and congratulates the player on successfully completing the challenge.
 You’ll also note that I cranked up the speed and behavior of the basketball at the 15, 30, and 45
second marks by adjusting the step count as well as its directionality.
3: This code stack says that if the ScratchCat sprite makes contact with the basketball sprite,
then the game ends by broadcasting the GameOver message.
2, 4, 5: These code blocks state that the basketball should be hidden when the player clicks the
Green Flag or when the game ends, either successfully or unsuccessfully. The main point here
is to let you know that a sprite can listen to and respond to its own broadcast messages.
Setting Up the Second and Third Balls
 The setup for the Baseball and Beachball sprites is much easier than that of the basketball because
we’ve already handled their introduction to the game. Look at the code in Figure 9.8 and see for
yourself:
FIGURE 9.8 Block setup for the Baseball sprite; the Beachball sprite is set up the same way.
1: You want the ball to hide when the player initially runs the game.
2: When it’s time to add the second and third balls, this block performs the same show/wait 1
second/start to move actions. The difference here is that you aren’t linking any additional
behavior to the second and third balls (but go ahead if so inclined; I just thought the game was
difficult enough as it was).
3: I discussed this block already; you want the game to end if the ball and the ScratchCat touch.
4, 5: These blocks instruct the balls to disappear when the game ends.
Debugging and Troubleshooting
 With almost any computer program, you need to be on the lookout for so-called bugs. Bugs can take
the form of logic problems, syntax errors, missing references—unfortunately, the list of possible bug
sources is almost limitless.
 The good news is that software development industry has established best practice for identifying,
trapping, and resolving software bugs. Even Scratch includes built-in debugging functionality.
 To these points, following are some good best practices for writing Scratch games that are as close to
“bug free” as possible.
 Run, re-run, and re-re-run your project. This is called iterative application development,
and it is crucial for you to do to ward off any glitches that will anger and frustrate your users.
The Scratch environment makes it really easy to start, stop, and restart your project. Thus, you
should get into the habit of testing your changes as you make them.
 You can run individual code stacks. Instead of using the Green Flag to run your project from
start to finish, you can test the behavior of individual code stacks simply by clicking its Hat
block. Try it out—it’s helpful from a troubleshooting and debugging standpoint.
Note: The Origin of the Software Bug
Why are problems with software applications (errors, flaws, or failures that cause
unexpected results) called “bugs”? The term was first used in the context of hardware