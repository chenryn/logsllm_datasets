请将 6 作为一个可在命令行中设定的参数。
练习 6•3             编写一个交叉引用程序，打印文档中所有单词的列表，并且每个单词还有一 个列表，记录出现过该单词的行号。对 the、and 等非实义单词不予考虑。
练习 6•4             编写一个程序，根据单词的出现频率按降序打印输入的各个不同单词，并在 每个单词的前面标上它的出现次数。
6.6 表查找
为了对结构的更多方面进行深入的讨论，我们来编写一个表查找程序包的核心部分代码。 这段代码很典型，可以在宏处理器或编译器的符号表管理例程中找到。例如，考虑#define 语句。当遇到类似于
#define              IN 1
之类的程序行时，就需要把名字 IN 和替换文本 1 存入到某个表中。此后，当名字 IN 出现在 某些语句中时，如:
statet = IN;
就必须用 1 来替换 IN。
以下两个函数用来处理名字和替换文本。install(s, t)函数将名字 s 和替换文本 t 记录到某个表中，其中 s 和 t 仅仅是字符串。lookup(s)函数在表中查找 s，若找到，则返 回指向该处的指针;若没找到，则返回  NULL。
该算法采用的是散列查找方法——将输入的名字转换为一个小的非负整数，该整数随后 将作为一个指针数组的下标。数组的每个元素指向某个链表的表头，链表中的各个块用于描 述具有该散列值的名字。如果没有名字散列到该值，则数组元素的值为 NULL(参见图 6•4)。
图 6•4
链表中的每个块都是一个结构，它包含一个指向名字的指针、一个指向替换文本的指针 以及一个指向该链表后继块的指针。如果指向链表后继块的指针为 NULL，则表明链表结束。
struct nlist {              /* table entry: */
struct nlist *next;                            /* next entry in chain */ char *name;              /* defined name */
char *defn;              /* replacement text */
};
相应的指针数组定义如下:
#define HASHSIZE 101
static struct nlist *hashtab[HASHSIZE];              /* pointer table */
散列函数 hash 在 lookup 和 install 函数中都被用到，它通过一个 for 循环进行计 算，每次循环中，它将上一次循环中计算得到的结果值经过变换(即乘以 31)后得到的新值 同字符串中当前字符的值相加(*s + 31 * hashval)，然后将该结果值同数组长度执行取 模操作，其结果即是该函数的返回值。这并不是最好的散列函数，但比较简短有效。
/* hash:              form hash value for string s */ unsigned hash(char *s)
{
unsigned hashval;
for (hashval = 0; *s != '\0'; s++) hashval = *s + 31 * hashval;
return hashval % HASHSIZE;
}
由于在散列计算时采用的是无符号算术运算，因此保证了散列值非负。 散列过程生成了在数组 hashtab 中执行查找的起始下标。如果该字符串可以被查找到，
则它一定位于该起始下标指向的链表的某个块中。具体查找过程由 lookup 函数实现。如果
lookup 函数发现表页已存在，则返回指向该表页的指针，否则返回 NULL。
/* lookup:              look for s in hashtab */ struct nlist *lookup(char *s)
{
struct nlist *np;
for (np = hashtab[hash(s)];              np != NULL; np = np•>next) if (strcmp(s, np•>name) == 0)
return np;              /* found */ return NULL;              /* not found */
}
lookup 函数中的 for 循环是遍历一个链表的标准方法，如下所示:
for (ptr = head; ptr != NULL; ptr = ptr•>next)
...
install 函数借助 lookup 函数判断待加入的名字是否已经存在。如果已存在，则用新 的定义取而代之;否则，创建一个新表页。如无足够空间创建新表页，则 install 函数返回 NULL。
struct nlist *lookup(char *); char *strdup(char *);
/* install:              put (name, defn) in hashtab */ struct nlist *install(char *name, char *defn)
{
struct nlist *np; unsigned hashval;
if ((np = lookup(name)) == NULL) { /* not found */ np = (struct nlist *) malloc(sizeof(*np));
if (np == NULL || (np•>name = strdup(name)) == NULL) return NULL;
hashval = hash(name); np•>next = hashtab[hashval]; hashtab[hashval] = np;
} else              /* already there */
free((void *) np•>defn);              /*free previous defn */ if ((np•>defn = strdup(defn)) == NULL)
return NULL; return np;
}
练习 6•5             编写函数 undef，它将从由 lookup 和 install 维护的表中删除一个变量 及其定义。
练习 6•6             以本节介绍的函数为基础，编写一个适合 C 语言程序使用的#define 处理 器的简单版本(即无参数的情况)。你会发现 getch 和 ungetch 函数非常有用。
6.7 类型定义Ctypedef)
C 语言提供了一个称为 typedef 的功能，它用来建立新的数据类型名，例如，声明
typedef int Length;
将 Length 定义为与 int 具有同等意义的名字。类型 Length 可用于类型声明、类型转换等， 它和类型 int 完全相同，例如:
Length len, maxlen; Length *lengths[];
类似地，声明
typedef char* String;
将 String 定义为与 char *或字符指针同义，此后，便可以在类型声明和类型转换中使用 String，例如:
String p, lineptr[MAXLINES], alloc(int); int strcmp(String, String);
p = (String) malloc(100);
注意，typedef 中声明的类型在变量名的位置出现，而不是紧接在关键字 typedef 之 后。typedef 在语法上类似于存储类 extern、static 等。我们在这里以大写字母作为 typedef 定义的类型名的首字母，以示区别。
这里举一个更复杂的例子:用 typedef 定义本章前面介绍的树节点。如下所示:
typedef struct tnode *Treeptr;
typedef struct tnode { /* the tree node: */ char *word;              /* points to the text */
int count;              /* number of occurrences */ struct tnode *left;                            /* left child */
struct tnode *right;              /* right child */
} Treenode;
上述类型定义创建了两个新类型关键字:Treenode(一个结构)和    Treeptr(一个指向该 结构的指针)。这样，函数 talloc 可相应地修改为:
Treeptr talloc(void)
{
return (Treeptr) malloc(sizeof(Treenode));
}
这里必须强调的是，从任何意义上讲，typedef 声明并没有创建一个新类型，它只是为 某个已存在的类型增加了一个新的名称而已。typedef 声明也没有增加任何新的语义:通过 这种方式声明的变量与通过普通声明方式声明的变量具有完全相同的属性。实际上，typedef 类似于#define 语句，但由于 typedef 是由编译器解释的，因此它的文本替换功能要超过 预处理器的能力。例如:
typedef int (*PFI)(char *, char *);
该语句定义了类型 PFI 是"一个指向函数的指针，该函数具有两个 char *类型的参数，返 回值类型为 int"，它可用于某些上下文中，例如，可以用在第 5 章的排序程序中，如下所示:
PFI strcmp, numcmp;
除了表达方式更简洁之外，使用 typedef 还有另外两个重要原因。首先，它可以使程序 参数化，以提高程序的可移植性。如果 typedef 声明的数据类型同机器有关，那么，当程序
移植到其它机器上时，只需改变 typedef 类型定义就可以了。一个经常用到的情况是，对于 各种不同大小的整型值来说，都使用通过 typedef 定义的类型名，然后，分别为各个不同的 宿主机选择一组合适的 short、int 和 long 类型大小即可。标准库中有一些例子，例如 size_t 和 ptrdiff_t 等。
typedef 的第二个作用是为程序提供更好的说明性——Treeptr 类型显然比一个声明 为指向复杂结构的指针更容易让人理解。
6.8 联合
联合是可以(在不同时刻)保存不同类型和长度的对象的变量，编译器负责跟踪对象的 长度和对齐要求。联合提供了一种方式，以在单块存储区中管理不同类型的数据，而不需要 在程序中嵌入任何同机器有关的信息。它类似于 Pascal 语言中的变体记录。
我们来看一个例子(可以在编译器的符号表管理程序中找到该例子)。假设一个常量可能 是 int、f1oat 或字符指针。特定类型的常量值必须保存在合适类型的变量中，然而，如果 该常量的不同类型占据相同大小的存储空间，且保存在同一个地方的话，表管理将最方便。 这就是联合的目的——一个变量可以合法地保存多种数据类型中任何一种类型的对象。其语 法基于结构，如下所示:
union u_tag { int ival; float fval; char *sval;
} u;
变量 u 必须足够大，以保存这 3 种类型中最大的一种，具体长度同具体的实现有关。这 些类型中的任何一种类型的对象都可赋值给 u，且可使用在随后的表达式中，但必须保证是一 致的:读取的类型必须是最近一次存入的类型。程序员负责跟踪当前保存在联合中的类型。 如果保存的类型与读取的类型不一致，其结果取决于具体的实现。
可以通过下列语法访问联合中的成员:
联合名.成员
或
联合指针•>成员
它与访问结构的方式相同。如果用变量 utype 跟踪保存在 u 中的当前数据类型，则可以像下 面这样使用联合:
if (utype == INT) printf("%d\n", u.ival);
if (utype == FLOAT) printf("%f\n", u.fval);
if (utype == STRING) printf("%s\n", u.sval);
else
printf("bad type %d in utype\n", utype);
联合可以使用在结构和数组中，反之亦可。访问结构中的联合(或反之)的某一成员的 表示法与嵌套结构相同。例如，假定有下列的结构数组定义:
struct {
char *name; int flags; int utype; union {
int ival; float fval; char *sval;
} u;
} symtab[NSYM];
可以通过下列语句引用其成员 ival: symtab[i].u.ival
也可以通过下列语句之一引用字符串 sval 的第一个字符:
*symtab[i].u.sval symtab[i].u.sval[0]
实际上，联合就是一个结构，它的所有成员相对于基地址的偏移量都为 0，此结构空间要 大到足够容纳最"宽"的成员，并且，其对齐方式要适合于联合中所有类型的成员。对联合 允许的操作与对结构允许的操作相同:作为一个整体单元进行赋值、复制、取地址及访问其 中一个成员。
联合只能用其第一个成员类型的值进行初始化，因此，上述联合 u 只能用整数值进行初 始化。
第 8 章的存储分配程序将说明如何使用联合来强制一个变量在特定类型的存储边界上对 齐。
6.9 位字段
在存储空间很宝贵的情况下，有可能需要将多个对象保存在一个机器字中。一种常用的 方法是，使用类似于编译器符号表的单个二进制位标志集合。外部强加的数据格式(如硬件 设备接口)也经常需要从字的部分值中读取数据。
考虑编译器中符号表操作的有关细节。程序中的每个标识符都有与之相关的特定信息， 例如，它是否为关键字，它是否是外部的且(或)是静态的，等等。对这些信息进行编码的 最简洁的方法就是使用一个 char 或 int 对象中的位标志集合。
通常采用的方法是，定义一个与相关位的位置对应的"屏蔽码"集合，如:
#define KEYWORD              01
#define EXTRENAL 02
#define STATIC              04
或
enum { KEYWORD = 01, EXTERNAL = 02, STATIC = 04 };
这些数字必须是 2 的军。这样，访问这些位就变成了用第 2 章中描述的移位运算、屏蔽运算 及补码运算进行简单的位操作。
下列语句在程序中经常出现:
flags |= EXTERNAL | STATIC;
该语句将 flags 中的 EXTERNAL 和 STATIC 位置为 1，而下列语句:
flags &= ~(EXTERNAL | STATIC);
则将它们置为 0。并且，当这两位都为 0 时，下列表达式:
if ((flags & (EXTERNAL | STATIC)) == 0) ...
的值为真。
尽管这些方法很容易掌握，但是，C 语言仍然提供了另一种可替代的方法，即直接定义和 访问一个字中的位字段的能力，而不需要通过按位逻辑运算符。位字段(bit•field)，或简称字 段，是"字"中相邻位的集合。"字"(word)是单个的存储单元，它同具体的实现有关。例 如，上述符号表的多个#define 语句可用下列 3 个字段的定义来代替:
struct {
unsigned int is_keyword : 1; unsigned int is_extern : 1; unsigned int is_static : 1;
} flags;
这里定义了一个变量 flags，它包含 3 个一位的字段。冒号后的数字表示字段的宽度(用二 进制位数表示)。字段被声明为 unsigned int 类型，以保证它们是无符号量。
单个字段的引用方式与其它结构成员相同 ，例如: flags.is_keyword 、 flags.is_extern 等等。字段的作用与小整数相似。同其它整数一样，字段可出现在算术 表达式中。因此，上面的例子可用更自然的方式表达为:
flags.is_extern = flags.is_static = 1; 该语句将 is_extern 和 is_static 位置为 1。下列语句: flags.is_extern = flags.is_static = 0;
将 is_extern 和 is_static 位置为 0。下列语句: