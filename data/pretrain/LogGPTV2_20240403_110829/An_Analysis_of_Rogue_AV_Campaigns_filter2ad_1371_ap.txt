 0
enterprise
campus
department
wireless
s
n
a
c
S
f
o
#
 1
 0.5
 0
-0.5
-1
Not Detected
.
.
.
.
.
.
.
2
1
5
0
5
0
2
0
1
0
0
5
0
0
2
0
0
0
5
0
0
1
Worm Scans per Second (log)
(a) TRW vs topo100
1
0
.
.
.
.
.
.
.
2
1
0
5
0
2
0
1
0
0
5
0
0
2
0
0
0
5
0
0
1
Worm Scans per Second (log)
(b) TRW vs topo1000
5
1
0
.
.
5
.
.
.
.
.
2
1
0
5
0
2
0
1
0
0
5
0
0
2
0
0
0
5
0
0
1
Worm Scans per Second (log)
(c) TRW vs topoall
s
n
a
c
S
f
o
#
 450
 400
 350
 300
 250
 200
 150
 100
 50
 0
enterprise
campus
department
wireless
0
.
0
0
5
0
.
1
0
.
0
5
0
.
0
2
0
.
0
1
Worm Scans per Second (log)
0
.
2
0
.
5
1
2
5
1
0
s
n
a
c
S
f
o
#
 1400
 1200
 1000
 800
 600
 400
 200
 0
enterprise
campus
department
wireless
s
n
a
c
S
f
o
#
0
.
0
0
5
0
.
1
0
.
0
5
0
.
0
2
0
.
0
1
Worm Scans per Second (log)
0
.
2
0
.
5
1
2
5
1
0
 700
 600
 500
 400
 300
 200
 100
 0
enterprise
campus
department
wireless
0
.
0
0
5
0
.
1
0
.
0
5
0
.
0
2
0
.
0
1
Worm Scans per Second (log)
0
.
2
0
.
5
1
2
5
1
0
1
0
(d) TRWRBS vs topo100
(e) TRWRBS vs topo1000
(f) TRWRBS vs topoall
Fig. 7. Latency against topo worm: from worm infection time to detection time
for topo scanning worm, measured as the number of worm connections leaving the
protected network prior to detection. The topo100 worm uses 100 neighbors before
reverting to random scanning, the topo1000 worm uses 1000 neighbors before reverting
to random scanning, and the topoall worm never uses random scanning.
scenario, where TRW’s detection latency is 1000 connections worse than it was
for the random scanning worm.
This shortcoming in TRW is one of the motivations for the TRWRBS detector.
It uses connection failures in the detection algorithm, but it can also detect a
worm even with no connection failures by checking the rate of connections to
new destinations. The TRWRBS detector is able to detect the topo100 at rates
above 1 scan per second in the wireless environment and above 0.2 scans per
second in all other environments (Figure 6(d)). It does not perform quite as
well as TRW in this scenario because TRW is able to leverage the connection
failures so eﬀectively. In the topo1000 scenario the detectors are eﬀective at
approximately the same worm scanning rate (Figure 6(e)); but if one looks at
the latency, the TRWRBS detector is able to detect the worm more quickly
at most scanning rates (Figure 7(e)). At worm scanning rates of 2 scans per
second and higher, TRWRBS can detect the worm in under 30 connections in
all the environments except for the wireless environment. This compares well
against the TRW algorithm which requires over 1000 scans before detecting the
topo1000 worm. The TRWRBS detector even detects the worm in the topoall
scenario where the TRW detector could not.
This reliance on connection failures highlights a potential weakness of the
TRW algorithm. If a worm can generate a big enough list of hosts running the
target service that are likely to exist, it can make enough successful connections
to completely evade the TRW algorithm. The detectors based on destination
distributions do not have this weakness.
54
S. Staﬀord and J. Li
6.5 Summary
We now recap our ﬁndings and answer the questions posed in the introduction.
We found that no detector was clearly superior to the others in the study. The
TRW detector can detect slower random and local-preference scanning worms
than any of the other detectors in all the environments we tested. However, it
performs poorly against topo worms. In fact, a topo worm with a large supply
of neighbors to scan is entirely undetectable by the TRW algorithm. The PGD
detector was capable of detecting all types of worms scanning at 0.5 scans per
second or faster in all environments, but was relatively slow, frequently allowing
several hundred scans prior to detection. The TRWRBS detector was similar
to the PGD detector, but showed decreased performance against topo worms.
The RBS detector was only capable of detecting fast scanning worms. The MRW
detector struggled to detect worms in the wireless environment and was incapable
of detecting the local-preference worm in that environment. Finally, the DSC
detector performed quite well in many respects, but is otherwise quite limited
due to the requirement that an inbound infecting connection be observed in
order for the detector to function. An initial infection that came via some other
vector (removable media, direct download, etc.) would be undetectable by DSC.
If we narrow our criteria, however, we may be able to identify some detectors
as being superior at speciﬁc tasks. For example, if we only consider fast scanning
worms—those that make 10 scans per second—the TRWRBS detector suddenly
stands out as being an excellent choice. It detects fast scanning worms in every
environment regardless of scanning type and is the fastest in most scenarios.
The wireless environment was the most diﬃcult for detectors to operate suc-
cessfully in. In virtually all scenarios, detectors showed the worst sensitivity
in the wireless environment, and detection latencies were typically an order of
magnitude worse. The traﬃc in this environment is more focused around enter-