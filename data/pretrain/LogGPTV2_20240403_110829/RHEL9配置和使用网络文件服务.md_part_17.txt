::: section
::: titlepage
## []{#exporting-nfs-shares_configuring-and-using-network-file-services.html#proc_configuring-an-nfsv3-client-to-run-behind-a-firewall_assembly_configuring-the-nfs-server-to-run-behind-a-firewall}将 NFSv3 客户端配置为在防火墙后运行 {.title}
:::
将 NFSv3 客户端配置为在防火墙后运行的步骤类似于将 NFSv3
服务器配置为在防火墙后运行。
如果您要配置的机器既是 NFS 客户端和服务器，请按照 [将 NFSv3-enabled
服务器配置为在防火墙后运行](#exporting-nfs-shares_configuring-and-using-network-file-services.html#proc_configuring-the-nfsv3-enabled-server-to-run-behind-a-firewall_assembly_configuring-the-nfs-server-to-run-behind-a-firewall "将 NFSv3-enabled 服务器配置为在防火墙后运行"){.link}
中所述的步骤进行。
以下流程描述了如何配置只在防火墙后运行的 NFS 客户端的机器。
::: orderedlist
**流程**
1.  要在客户端位于防火墙后允许 NFS 客户端对 NFS 客户端执行回调，请在 NFS
    客户端上运行以下命令将 `rpc-bind`{.literal} 服务添加到防火墙中：
    ``` literallayout
    firewall-cmd --permanent --add-service rpc-bind
    ```
2.  指定 `/etc/nfs.conf`{.literal} 文件中 RPC 服务 `nlockmgr`{.literal}
    使用的端口，如下所示：
    ``` literallayout
    [lockd]
    port=port-number
    udp-port=upd-port-number
    ```
    或者，您可以在 `/etc/modprobe.d/lockd.conf`{.literal} 文件中指定
    `nlm_tcpport`{.literal} 和 `nlm_udpport`{.literal}。
3.  在 NFS 客户端中运行以下命令打开防火墙中指定的端口：
    ``` literallayout
    firewall-cmd --permanent --add-port=/tcp
    firewall-cmd --permanent --add-port=/udp
    ```
4.  通过编辑 `/etc/nfs.conf`{.literal} 文件的 `[statd]`{.literal} 部分为
    `rpc.statd`{.literal} 添加静态端口，如下所示：
    ``` literallayout
    [statd]
    port=port-number
    ```
5.  在 NFS 客户端中运行以下命令，在防火墙中打开添加的端口：
    ``` literallayout
    firewall-cmd --permanent --add-port=/tcp
    firewall-cmd --permanent --add-port=/udp
    ```
6.  重新载入防火墙配置：
    ``` literallayout
    firewall-cmd --reload
    ```
7.  重启 `rpc-statd`{.literal} 服务：
    ``` literallayout
    # systemctl restart rpc-statd.service
    ```
    或者，如果您在
    `/etc/modprobe.d/ lockd`{.literal}.conf``{=html}
    文件中指定锁定端口：
    ::: orderedlist
    1.  更新 `/proc/sys/fs/nfs/nlm_tcpport`{.literal} 和
        `/proc/sys/fs/nfs/nlm_udpport`{.literal} 的当前值：
        ``` literallayout
        # sysctl -w fs.nfs.nlm_tcpport=
        # sysctl -w fs.nfs.nlm_udpport=
        ```
    2.  重启 `rpc-statd`{.literal} 服务：
        ``` literallayout
        # systemctl restart rpc-statd.service
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#exporting-nfs-shares_configuring-and-using-network-file-services.html#proc_configuring-an-nfsv4-client-to-run-behind-a-firewall_assembly_configuring-the-nfs-server-to-run-behind-a-firewall}将 NFSv4 客户端配置为在防火墙后运行 {.title}
:::
仅在客户端使用 NFSv4.0 时执行此步骤。在这种情况下，需要为 NFSv4.0
回调打开端口。
NFSv4.1
或更高版本不需要这个过程，因为在后续协议版本中，服务器在客户端发起的同一连接上执行回调。
::: orderedlist
**流程**
1.  要允许 NFSv4.0 回调通过防火墙，请设置
    `/proc/sys/fs/nfs_callback_tcpport`{.literal}
    并允许服务器连接到客户端上的该端口，如下所示：
    ``` literallayout
    # echo "fs.nfs.nfs_callback_tcpport = " >/etc/sysctl.d/90-nfs-callback-port.conf
    # sysctl -p /etc/sysctl.d/90-nfs-callback-port.conf
    ```
2.  在 NFS 客户端中运行以下命令打开防火墙中指定的端口：
    ``` literallayout
    firewall-cmd --permanent --add-port=/tcp
    ```
3.  重新载入防火墙配置：
    ``` screen
    firewall-cmd --reload
    ```
:::
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_configuring-and-using-network-file-services.html#exporting-rpc-quota-through-a-firewall_exporting-nfs-shares}通过防火墙导出 RPC 配额 {.title}
:::
如果您导出使用磁盘配额的文件系统，您可以使用配额远程过程调用(RPC)服务来给
NFS 客户端提供磁盘配额数据。
::: orderedlist
**流程**
1.  启用并启动 `rpc-rquotad`{.literal} 服务：
    ``` screen
    # systemctl enable --now rpc-rquotad
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果启用了 `rpc-rquotad`{.literal} 服务，其会在启动 nfs-server
    服务后自动启动。
    :::
2.  为了使配额 RPC 服务可在防火墙后访问，需要打开 TCP（如果启用了
    UDP，则为 UDP）端口 875。默认端口号定义在 `/etc/services`{.literal}
    文件中。
    您可以通过将 `-p port-number`{.literal} 附加到
    `/etc/sysconfig/rpc-rquotad`{.literal} 文件中的
    `RPCRQUOTADOPTS`{.literal} 变量来覆盖默认端口号。
3.  默认情况下，远程主机只能读配额。如果要允许客户端设置配额，请将
    `-S`{.literal} 选项附加到 `/etc/sysconfig/rpc-rquotad`{.literal}
    文件中的 `RPCRQUOTADOPTS`{.literal} 变量中。
4.  重启 `rpc-rquotad`{.literal} ，以使
    `/etc/sysconfig/rpc-rquotad`{.literal} 文件中的更改生效：
    ``` screen
    # systemctl restart rpc-rquotad
    ```
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_configuring-and-using-network-file-services.html#enabling-nfs-over-rdma-nfsordma_exporting-nfs-shares}启用通过 RDMA(NFSoRDMA) 的 NFS {.title}
:::
如果存在支持 RDMA 的硬件，则在 Red Hat Enterprise Linux 9
中，远程直接内存访问(RDMA)服务会自动工作。
::: orderedlist
**流程**
1.  安装 `rdma-core`{.literal} 软件包：
    ``` screen
    # dnf install rdma-core
    ```
2.  重启 `nfs-server`{.literal} 服务：
    ``` screen
    # systemctl restart nfs-server
    ```
:::
::: itemizedlist
**其它资源**
-   [RFC 5667 标准](https://tools.ietf.org/html/rfc5667){.link}
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_configuring-and-using-network-file-services.html#_additional_resources_2}其它资源 {.title}
:::
::: itemizedlist
-   [Linux NFS
    wiki](https://linux-nfs.org/wiki/index.php/Main_Page){.link}
:::
:::
:::
[]{#securing-nfs_configuring-and-using-network-file-services.html}
::: chapter
::: titlepage
# []{#securing-nfs_configuring-and-using-network-file-services.html#securing-nfs_configuring-and-using-network-file-services}第 3 章 保护 NFS {.title}
:::
为最大程度地降低 NFS 安全风险并保护服务器上的数据，在服务器上导出 NFS
文件系统或将其挂载到客户端上时，请考虑以下部分：
::: section
::: titlepage
# []{#securing-nfs_configuring-and-using-network-file-services.html#nfs-security-with-auth_sys-and-export-controls_securing-nfs}带有 AUTH_SYS 和导出控制的 NFS 安全性 {.title}
:::
NFS 提供以下传统选项来控制对导出文件的访问：
::: itemizedlist
-   服务器限制哪些主机可以通过 IP 地址或主机名挂载哪些文件系统。
-   服务器对 NFS
    客户端上的用户强制执行文件系统权限的方式与对本地用户强制执行权限的方式相同。传统上，NFS
    使用 `AUTH_SYS`{.literal} 调用消息（也称为
    `AUTH_UNIX`{.literal}）来执行此操作，该消息依赖于客户端来声明用户的
    UID 和
    GID。请注意，这意味着恶意或者错误配置的客户端可能会轻松地利用这个问题，导致用户可以访问不应该被访问的文件。
:::
为限制潜在的风险，管理员通常将访问权限限制为只读或将用户权限挤压成普通用户和组
ID。不幸的是，这些解决方案会阻止 NFS 共享以最初预期的方式使用。
另外，如果攻击者获得了对导出 NFS 文件系统的系统所使用的 DNS
服务器的控制，它们可将与特定主机名或完全限定域名关联的系统指向未授权的机器。此时，未经授权的机器
[*是*]{.emphasis} 允许挂载 NFS
共享的系统，因为没有交换用户名或密码信息来为 NFS 挂载提供额外的安全。
在通过 NFS
导出目录时应谨慎使用通配符，因为通配符的范围可能包含比预期更多的系统。
::: itemizedlist
**其它资源**
-   要保护 NFS 和 `rpcbind`{.literal}，例如，可使用 `nftables`{.literal}
    和 `firewalld`{.literal}。
-   `nft(8)`{.literal} man page
-   `firewalld-cmd(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#securing-nfs_configuring-and-using-network-file-services.html#nfs-security-with-auth_gss_securing-nfs}带有 `AUTH_GSS`{.literal} 的 NFS 安全性 {.title}
:::
NFS 的所有版本都支持 RPCSEC_GSS 和 Kerberos 机制。
与 AUTH_SYS 不同，使用 RPCSEC_GSS Kerberos
机制，服务器不依赖于客户端就可以正确地表示哪个用户正在访问文件。相反，加密用于向服务器验证用户的身份，这可防止恶意的客户端在没有用户的
Kerberos 凭据的情况下模拟该用户。使用 RPCSEC_GSS Kerberos
机制是保护挂载的最直接方法，因为配置了 Kerberos 后不需要额外的设置。
:::
::: section
::: titlepage
# []{#securing-nfs_configuring-and-using-network-file-services.html#configuring-an-nfs-server-and-client-to-use-kerberos_securing-nfs}配置 NFS 服务器和客户端使用 Kerberos {.title}
:::
Kerberos
是一种网络身份验证系统，其允许客户端和服务器使用对称加密和信任的第三方
KDC 来互相进行身份验证。红帽建议使用身份管理(IdM)来设置 Kerberos。
::: itemizedlist
**先决条件**
-   Kerberos 密钥分发中心(`KDC`{.literal})已安装和配置 。
:::
::: orderedlist
**流程**
1.  ::: itemizedlist
    -   在 NFS 服务器端创建 `nfs/hostname.domain@REALM`{.literal} 主体。
    -   在服务器和客户端端创建 `host/hostname.domain@REALM`{.literal}
        主体。
    -   将对应的密钥添加到客户端和服务器的 keytab 中。
    :::
2.  在服务器端，使用 `sec=`{.literal}
    选项来启用所想要的安全类别。启用所有安全类型和非加密挂载：
    ``` screen
    /export *(sec=sys:krb5:krb5i:krb5p)
    ```
    与 `sec=`{.literal} 选项一起使用的有效安全类型为：
    ::: itemizedlist
    -   `sys`{.literal}: 无加密保护，默认值
    -   `krb5`{.literal} ：仅用于验证
    -   `krb5i`{.literal} ：完整性保护
        ::: itemizedlist
        -   使用 Kerberos V5 进行用户身份验证，并使用安全校验和执行 NFS
            操作的完整性检查，以防止数据篡改。
        :::
    -   `krb5p`{.literal} ：隐私保护
        ::: itemizedlist
        -   使用 Kerberos V5 进行用户身份验证、完整性检查及加密 NFS
            流量以防止流量嗅探。这是最安全的设置，但它也会涉及最大的性能开销。
        :::
    :::
3.  在客户端，将 `sec=krb5`{.literal} （或 `sec=krb5i`{.literal} 或
    `sec=krb5p`{.literal}，取决于设置 ）添加到挂载选项：
    ``` screen
    # mount -o sec=krb5 server:/export /mnt
    ```
:::
::: itemizedlist