# 数据表的结构
![](media/image1.png){width="5.7652777777777775in" height="3.6020833333333333in"}

# 基础查询
1. **查找部门30中员工的详细信息。**
   ```sql
   SELECT * FROM emp WHERE deptno = 30;
   ```

2. **找出从事clerk工作的员工的编号、姓名、部门号。**
   ![](media/image2.png){width="5.767361111111111in" height="1.4041666666666666in"}

3. **检索出奖金多于基本工资的员工信息。**
   ![](media/image3.png){width="5.761805555555555in" height="0.8875in"}

4. **检索出奖金多于基本工资的60%的员工信息。**
   ![](media/image4.png){width="5.7652777777777775in" height="1.054861111111111in"}

5. **找出10部门的经理、20部门的职员的员工信息。**
   ![](media/image5.png){width="5.7625in" height="0.9083333333333333in"}

6. **找出10部门的经理、20部门的职员 或者既不是经理也不是职员但是工资高于2000元的员工信息。**
   ![](media/image6.png){width="5.7555555555555555in" height="0.8888888888888888in"}

7. **找出获得奖金的员工。**
   ![](media/image7.png){width="5.768055555555556in" height="1.4618055555555556in"}

# 空或非空查询
在SQL中，可以使用 `IS NULL` 和 `IS NOT NULL` 来判断一个字段是否为空。

- **IS NULL：表示该字段为空**
- **IS NOT NULL：表示该字段非空**

示例：
![](media/image8.png){width="5.077653105861767in" height="1.168850612423447in"}
![](media/image9.png){width="5.767361111111111in" height="2.2534722222222223in"}

# NOT关键字
**作用：取反**

- **NOT IN( )**：不在括号中的那些
  ![](media/image10.png){width="5.763888888888889in" height="2.640277777777778in"}

- **NOT LIKE**：不包含的那些
  ![](media/image11.png){width="5.192361111111111in" height="1.23125in"}

- **IS NOT NULL ( )**：非空
  ![](media/image12.png){width="4.935086395450568in" height="1.22753280839895in"}

- **Not Between XXX and XXX**
  ![](media/image13.png){width="5.761805555555555in" height="1.8145833333333334in"}

# 分组查询（重要）
在SQL查询过程中，有时需要按照某种规则将数据分组后再进行统计。这可以通过 `GROUP BY` 子句实现。`HAVING` 子句用于对分组后的数据再次筛选。

**语法：**
```sql
SELECT 列名, 聚合函数 FROM 表名
WHERE 条件1...
GROUP BY 分组的列...
HAVING 条件
ORDER BY 排序条件
```

示例：
1. **查询每个部门的平均薪资？**
   思考：按照部门来分组
   ![](media/image14.png){width="4.985416666666667in" height="1.3277777777777777in"}

2. **查询每种职位的最高薪资和最低薪资？**
   思考：按照职位来分组
   ![](media/image15.png){width="5.208333333333333in" height="1.6201388888888888in"}

3. **查询每种职位有几人？**
   思考：按照职位来分组
   ![](media/image16.png){width="4.520138888888889in" height="1.7604166666666667in"}

4. **查询每种职位的平均薪资，并按照平均薪资降序排列。**
   ![](media/image17.png){width="5.196527777777778in" height="1.3701388888888888in"}

5. **查询每种职位平均薪资，且是高于2000的平均薪资，并按照平均薪资降序排列。**
   ![](media/image18.png){width="4.790972222222222in" height="3.4569444444444444in"}

6. **查询名字中包含o的员工，每种职位平均薪资，且是高于2000的平均薪资，并按照平均薪资降序排列。**
   ![](media/image19.png){width="5.55in" height="4.633333333333334in"}
   ![](media/image20.png){width="4.96875in" height="4.333333333333333in"})
   ![](media/image21.png){width="6.54632874015748in" height="2.2737970253718287in"}

# 子查询
子查询是在另一个查询语句中嵌套的查询语句。

示例：
1. **查询和SCOTT这个人在同一个部门的所有员工。**
   ![](media/image22.png){width="5.761805555555555in" height="2.6125in"}

2. **薪资最低的人的姓名。**
   ![](media/image23.png){width="5.763194444444444in" height="1.2909722222222222in"}

3. **查询薪资高于30号部门平均薪资的所有员工。**
   ![](media/image24.png){width="5.760416666666667in" height="1.5368055555555555in"}

4. **查询和 SCOTT或者 SMITH 干同一种工作的所有员工。**
   ![](media/image25.png){width="5.764583333333333in" height="1.207638888888889in"}

5. **查询和 SCOTT或者 SMITH 干同一种工作的同事（把自己去掉）。**
   ![](media/image26.png){width="5.754166666666666in" height="1.6208333333333333in"}

6. **查询比SCOTT 入职还要早的哪些员工的姓名。**
   ![](media/image27.png){width="5.7625in" height="2.047222222222222in"})
   ![](media/image28.png){width="6.496225940507436in" height="2.2032108486439195in"})
   ![](media/image29.png){width="6.429853455818023in" height="2.7883858267716537in")

# 集合操作（扩展）
集合操作包括并集、交集和差集。

- **并集 UNION**
  - `UNION ALL`：合并两个结果集，允许重复项
  - `UNION`：合并两个结果集，去除重复项
  ![](media/image31.png){width="5.756944444444445in" height="1.9090277777777778in"}

- **交集 INTERSECT**
  ![](media/image32.png){width="5.804861111111111in" height="3.2708333333333335in")

- **差集 EXCEPT**
  ![](media/image33.png){width="5.7659722222222225in" height="3.248611111111111in")