## 沉浸式学习PostgreSQL|PolarDB 17: 向量数据库, 通义大模型AI的外脑    
### 作者          
digoal          
### 日期          
2023-09-22          
### 标签          
PostgreSQL , PolarDB , 数据库 , 教学          
----          
## 背景       
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 向量数据库, 作为通义AI的外脑设计  
chatbot是大模型应用之一, 在与chatbot沟通时会遇到token上限问题, 例如通义目前是8K, chatgpt是4K. 也就是问题上下文(包含多轮对话的内容)最多8k或4k, 超出就无法处理了.    
解释一下token: 对于通义模型来说, 中文字符串的token就是字数(含符号).  英文则可能是词、片段等.  
我们的核心目的是通过有限的上下文来拿到结果.   
这就需要你的prompt(上下文)足够精确, 防止无效垃圾对话浪费token限额.    
上下文的组成:  
1、每一轮对话的提问内容和大模型的回答内容  
2、外脑中的FAQ   
这个实验要体验的就是怎么建设AI的外脑?   
向量数据库的核心价值:    
- AI的外脑.    
参考知识:   
- https://help.aliyun.com/zh/dashscope/developer-reference/api-details  
- https://neon.tech/docs/extensions/pg_tiktoken  
- https://neon.tech/docs/ai/ai-concepts  
- https://github.com/kelvich/pg_tiktoken  
### 实现和对照      
#### 传统方法 设计和实验       
传统数据库不支持向量, 略.   
#### PolarDB|PG新方法1 设计和实验  
上一个实验比较简单, 大家应该体验到了通义大模型可以干什么?  在阿里云可以使用plpython3u来调用灵积里面的诸多大模型能力, 玩法参考:     
- [《沉浸式学习PostgreSQL|PolarDB 16: 植入通义千问大模型+文本向量化模型, 让数据库具备AI能力》](../202309/20230914_01.md)    
同时大家也可以思考一下向量数据库到底能干什么?  
- [《德说-第257期, 新生产力工具AI推动下一级人类文明跃迁? AI如何倒逼数据库的进化? AI加持后的数据库应用场景有哪些变化?》](../202309/20230921_01.md)    
进入实验环境容器.      
安装python sdk:  
- https://help.aliyun.com/zh/dashscope/developer-reference/install-dashscope-sdk
```
pip install dashscope
```
创建一个保存api key的文件:    
请把以下API-KEY代替成你申请的api-key.      
```    
su - postgres    
mkdir ~/.dashscope    
echo "API-KEY" > ~/.dashscope/api_key    
chmod 500 ~/.dashscope/api_key    
```    
连接到数据库shell, 创建plpython3u插件, 让你的PG|PolarDB支持python3编写数据库函数和存储过程.     
```  
psql  
create extension plpython3u;  
```  
1、创建chat函数, 让数据库支持单轮对话和提示对话.    
单轮对话:  
```  
create or replace function chat (sys text, u text) returns text as $$    
#coding:utf-8    
from http import HTTPStatus    
from dashscope import Generation    
messages = [{'role': 'system', 'content': sys}]  
messages.append({'role': 'user', 'content': u})  
gen = Generation()    
response = gen.call(    
    Generation.Models.qwen_plus,    
    messages=messages,    
    result_format='message', # set the result is message format.    
)    
if response.status_code == HTTPStatus.OK:       
    return (response)     
else:    
    return('Request id: %s, Status code: %s, error code: %s, error message: %s'%(    
        response.request_id, response.status_code,     
        response.code, response.message    
    ))         
$$ language plpython3u strict;    
```  
多轮提示对话(使用两个长度相等的数组, 作为多轮问题和答案的输入):   
```    
create or replace function chat (sys text, u text, u_hist text[], ass_hist text[]) returns text as $$    
#coding:utf-8    
from http import HTTPStatus    
from dashscope import Generation    
messages = [{'role': 'system', 'content': sys}]  
if (len(u_hist) >=1):  
    for v in range(0,len(u_hist)):  
        messages.extend((  
            {'role': 'user', 'content': u_hist[v]},   
            {'role': 'assistant', 'content': ass_hist[v]}  
        ))  
messages.append({'role': 'user', 'content': u})  
gen = Generation()    
response = gen.call(    
    Generation.Models.qwen_plus,    
    messages=messages,    
    result_format='message', # set the result is message format.    
)    
if response.status_code == HTTPStatus.OK:       
    return (response)     
else:    
    return('Request id: %s, Status code: %s, error code: %s, error message: %s'%(    
        response.request_id, response.status_code,     
        response.code, response.message    
    ))         