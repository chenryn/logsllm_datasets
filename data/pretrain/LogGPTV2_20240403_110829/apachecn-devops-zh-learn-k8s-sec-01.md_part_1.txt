# 一、Kubernetes 架构
众所周知，传统应用(如 web 应用)遵循模块化架构，将代码分为应用层、业务逻辑层、存储层和通信层。尽管采用了模块化架构，但组件是作为一个整体包装和部署的。尽管整体应用易于开发、测试和部署，但很难维护和扩展。这导致了微服务架构的增长。像 Docker 和 **Linux 容器** ( **LXC** )这样的容器运行时的开发已经简化了作为微服务的应用的部署和维护。
微服务体系结构将应用部署分成小的和互连的实体。微服务架构越来越受欢迎，导致了 Apache Swarm、Mesos 和 Kubernetes 等编排平台的增长。容器编排平台有助于在大型动态环境中管理容器。
Kubernetes 是一个开源编排平台，用于支持自动化部署、扩展和管理的容器化应用。最初由谷歌在 2014 年开发，现在由**云原生计算基金会** ( **CNCF** )维护。Kubernetes 是 2018 年毕业的第一个 CNCF 毕业的项目。已建立的全球组织，如优步、彭博、贝莱德、布拉卡尔、纽约时报、莱夫特、易贝、缓冲区、祖先、高尔夫、高盛和许多其他组织，在大规模生产中使用 Kubernetes([https://kubernetes.io/case-studies/](https://kubernetes.io/case-studies/))。大型云提供商，如 **Elastic Kubernetes Service** (亚马逊) **Azure Kubernetes Service** (微软) **Google Kubernetes Engine** (谷歌)**阿里巴巴 Cloud Kubernetes** (阿里巴巴)等，提供自己管理的 Kubernetes 服务。
在微服务模型中，应用开发人员确保应用在容器化环境中正常工作。他们编写一个 Docker 文件来捆绑他们的应用。DevOps 和基础设施工程师直接与 Kubernetes 集群交互。它们确保开发人员提供的应用包在集群中平稳运行。他们监控节点、pod 和其他 Kubernetes 组件，以确保集群运行正常。然而，安全需要双方和安全团队的共同努力。要了解如何保护 Kubernetes 集群，我们首先必须了解什么是 Kubernetes 以及它是如何工作的。
在本章中，我们将涵盖以下主题:
*   Docker 的兴起和微服务的趋势
*   库比特组件
*   永恒的物体
*   永恒的变异
*   Kubernetes 和云提供商
# Docker 的崛起和微服务的趋势
在我们开始研究 Kubernetes 之前，了解微服务和容器化的增长非常重要。随着单一应用的发展，随着应用的发展，开发人员面临着不可避免的问题:
*   **缩放**:单块应用难以缩放。事实证明，解决可伸缩性问题的正确方法是通过分布式方法。
*   **运营成本**:运营成本随着单块应用的复杂性而增加。更新和维护在部署前需要仔细分析和足够的测试。这与可伸缩性相反；因为最低资源要求很高，所以您不能轻松地缩小单个应用的规模。
*   **更长的发布周期**:对于整料应用，维护和开发壁垒非常高。对于开发人员来说，当出现 bug 时，需要花费大量时间来在复杂且不断增长的代码库中找出根本原因。测试时间显著增加。在复杂的代码基础上，回归、集成和单元测试花费的时间要长得多。当客户的请求到来时，单个功能的交付需要几个月甚至一年的时间。这使得发布周期变长，并对公司业务产生重大影响。
这就产生了一种巨大的动力，要将单一应用分解成微服务。好处显而易见:
*   有了定义良好的接口，开发人员只需要关注他们拥有的服务的功能。
*   代码逻辑被简化，这使得应用更容易维护和调试。此外，与单片应用相比，微服务的发布周期大大缩短，因此客户不必为新功能等待太长时间。
当一个单一的应用分解成许多微服务时，就会增加 DevOps 端的部署和管理复杂性。复杂性显而易见；微服务通常用不同的编程语言编写，需要不同的运行时或解释器，有不同的包依赖、不同的配置等等，更不用说微服务之间的相互依赖了。这正是 Docker 出镜的好时机。
让我们看看 Docker 的演变。进程隔离长期以来一直是 Linux 的一部分，其形式为**控制组** ( **组**)和**命名空间**。通过 cgroup 设置，每个进程使用的资源(CPU、内存等)都是有限的。使用专用的进程名称空间，名称空间内的进程不知道在同一节点但在不同的进程名称空间中运行的其他进程。有了专用的网络命名空间，如果没有适当的网络配置，进程就无法与其他进程通信，即使它们运行在同一个节点上。
Docker 简化了基础设施和 DevOps 工程师的流程管理。2013 年，Docker 作为一家公司发布了 Docker 开源项目。DevOps 工程师通过 Docker 引擎管理容器，而不是管理命名空间和 cgroups。Docker 容器利用 Linux 中的这些隔离机制来运行和管理微服务。每个容器都有一个专用的 cgroup 和命名空间。
相互依赖的复杂性依然存在。编排平台就是试图解决这个问题的平台。Docker 还提供了 Docker Swarm 模式(后来改名为 Docker **企业版**，或 Docker **EE** ，以支持集群容器，大约与 Kubernetes 相同的时间。
## 不变收养状况
根据 Sysdig([https://sysdig.com/blog/sysdig-2019-container-usage-report](https://sysdig.com/blog/sysdig-2019-container-usage-report))在 2019 年进行的一份容器使用报告，一家容器安全和配器供应商表示，Kubernetes 在使用的配器中占据了高达 77%的份额。如果包括 OpenShift(红帽的 Kubernetes 变种)，市场份额接近 90%:
![Figure 1.1 – The market share of orchestration platforms ](img/B15566_01_01.jpg)
图 1.1–编排平台的市场份额
虽然 Docker Swarm 大约与 Kubernetes 同时发布，但是 Kubernetes 现在已经成为容器编排平台的事实选择。这是因为 Kubernetes 能够在生产环境中很好地工作。它易于使用，支持多种开发人员配置，并且可以处理大规模环境。
## 非立方簇
Kubernetes 集群是由多台机器(或**虚拟机** ( **虚拟机**)或节点组成的。有两种类型的节点:主节点和工作节点。主控制平面，如`kube-apiserver`，运行在主节点上。在每个工作节点上运行的代理称为`kubelet`，代表`kube-apiserver`作为宠臣工作，在工作节点上运行。Kubernetes 中的一个典型工作流从一个用户(例如 DevOps)开始，该用户与主节点中的`kube-apiserver`通信，`kube-apiserver`将部署作业委托给工作节点。在下一节中，我们将更详细地介绍`kube-apiserver`和`kubelet`:
![Figure 1.2 – Kubernetes deployment ](img/B15566_01_02.jpg)
图 1.2–Kubernetes 部署
前面的图显示了用户如何向主节点(`kube-apiserver`)发送部署请求，`kube-apiserver`将部署执行委托给一些工作节点中的`kubelet`。
# 非晶元件
Kubernetes 遵循客户机-服务器架构。在 Kubernetes 中，多个主节点控制多个工作节点。每个主节点和工作节点都有一组组件，这些组件是集群正常工作所必需的。主节点一般有`kube-apiserver`、`etcd`存储、`kube-controller-manager`、`cloud-controller-manager`和`kube-scheduler`。工作节点有`kubelet`、`kube-proxy`、**容器运行时接口(CRI)** 组件、**容器存储接口(CRI)** 组件等等。我们现在将详细介绍其中的每一项:
*   `kube-apiserver`:Kubernetes 应用编程接口服务器(`kube-apiserver`)是一个控制平面组件，用于验证和配置对象(如 Pod 、服务和控制器)的数据。它使用 REST 请求与对象交互。
*   `etcd` : `etcd`是高可用性键值存储，用于存储配置、状态和元数据等数据。`etcd`的监视功能为 Kubernetes 提供了监听配置更新并进行相应更改的能力。
*   `kube-scheduler` : `kube-scheduler`是 Kubernetes 的默认调度程序。它会监视新创建的 pods，并将 pods 分配给节点。调度程序首先过滤一组节点，Pod 可以在这些节点上运行。过滤包括基于可用资源和用户设置的策略创建可能节点的列表。一旦创建了该列表，调度器就对节点进行排序，以找到 pod 的最佳节点。
*   `kube-controller-manager`:Kubernetes 控制器管理器是核心控制器的组合，这些控制器监视状态更新并相应地对集群进行更改。目前 Kubernetes 附带的控制器包括:
![](img/01.jpg)
*   `cloud-controller-manager`:在 v1.6 中引入了云容器管理器；它运行控制器与底层云提供商进行交互。这是将云供应商代码与 Kubernetes 代码分离的一种尝试。
*   `kubelet` : `kubelet`在每个节点上运行。它向应用编程接口服务器注册节点。`kubelet`监控使用 Podspecs 创建的 PODS，并确保 PODS 和容器健康。
*   `kube-proxy` : `kube-proxy`是运行在每个节点上的网络代理。它管理每个节点上的网络规则，并根据这些规则转发或过滤流量。
*   `kube-dns` : DNS 是集群启动时启动的内置服务。随着 1.12 版本的发布，CoreDNS 成为了推荐的 DNS 服务器，取代了`kube-dns`。CoreDNS 使用一个容器(而不是用于`kube-dns`的三个容器)。它采用多线程缓存，内置负缓存，因此在内存和性能上优于`kube-dns`。
在这一节中，我们看了 Kubernetes 的核心组件。这些成分将出现在所有 Kubernetes 星团中。Kubernetes 还有一些可配置的接口，允许修改集群以适应组织需求。
## 不可分解的界面
Kubernetes 的目标是灵活和模块化，因此集群管理员可以修改网络、存储和容器运行时功能以适应组织的需求。目前，Kubernetes 提供了三种不同的接口，集群管理员可以使用它们来使用集群中的不同功能。
### 容器网络接口
Kubernetes 有一个默认的网络提供商`kubenet`，能力有限。`kubenet`每个集群只支持 50 个节点，显然不能满足大规模部署的任何要求。同时，Kubernetes 利用**容器网络接口** ( **CNI** )作为网络提供商和 Kubernetes 网络组件之间的公共接口，以支持大规模集群中的网络通信。目前支持的提供商包括印花布、Flannel、`kube-router`等。
### 容器存储界面
Kubernetes 在 v1.13 中引入了容器存储接口，在 1.13 之前，新的卷插件是 Kubernetes 核心代码的部分。容器存储接口提供了向 Kubernetes 公开任意块和文件存储的接口。云提供商可以通过使用 CSI 插件向 Kubernetes 公开高级文件系统。MapR 和 Snapshot 等插件在集群管理员中很受欢迎。