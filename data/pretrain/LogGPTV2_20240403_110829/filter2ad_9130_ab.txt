### 优化后的文本

在尝试加载文件时，由于文件不存在，程序会进入 `else` 分支并返回错误代码 `0xc00000BB`。通过查询微软官方文档，该错误代码表示不支持请求类型（`STATUS_NOT_SUPPORTED`）。在 Kerberos 认证流程中，客户端会在 AS-REQ 请求中声明自己支持的所有加密类型（etype），域控制器（DC）会检查客户端是否支持 AES 加密。如果客户端支持 AES，DC 会在 AS-REP 的 PA-ETYPE-INFO2 中响应对应的加密方式。然而，如果客户端支持的加密类型中有 AES，但 DC 并未回应相应的 AES 加密类型，并且报错类型是 `STATUS_NOT_SUPPORTED`，则很可能是受到了 Skeleton 攻击。

我进行了 Skeleton 攻击的测试，并抓取了流量包。客户端发送的 AS-REQ 请求中包含 AES 加密，但域控的响应中没有 AES 加密，并且确实返回了 `STATUS_NOT_SUPPORTED` 错误。

接下来，我们分析 kdcsvc.dll 的处理流程。当域控通过 `kdcgetuserskey` 函数接收到用户的密码后，不仅会调用 `SamIRetrieveMultiplePrimaryCredentials` 函数，还会将密码传递给 `kerbhashpassword` 函数，最终调用 `cryptdll.dll` 的导出函数 `CDLocateCSystem` 选择合适的加密系统来处理用户传入的凭据。

Mimikatz 利用 `kull_m_process_getVeryBasicModuleInformationsForName` 函数从 lsass 进程中获取 `cryptdll.dll` 的模块信息，并获取该 DLL 的句柄保存在 `localaddr` 中。然后通过 `CDLocateCSystem` 函数找到 RC4 类型的加密系统，并将其存储在 `pCrypt` 结构体中。可以看到该结构体中存储了一系列与 RC4 加密相关的函数。

接下来，定义 `extensions` 并赋值，将 `cryptdll.dll!rc4HmacInitialize` 和 `cryptdll.dll!rc4HmacDecrypt` 函数地址传入。在 `kull_m_remotelib_CreateRemoteCodeWitthPatternReplace` 函数中，传入了多个参数，包括 lsass 进程的内存属性、RC4 初始化和结束函数的地址等。该函数首先通过 `kull_m_process_getVeryBasicModuleInformations` 获取模块信息，并填充 `RemoteExt` 结构体数组。

创建一个新的空间 `aLocalAddr`，其大小与 `rc4_end - rc4_init` 函数地址之间的内存大小一致，并将该内存内容拷贝到新空间中。接着，在该空间中查找 `extensions[j].ToReplace` 的位置，并用 `extensions[j].Point` 替换该值。

替换后的内存内容应如下所示：
```
// 内存内容替换为正常的函数内容
```

使用 `kull_m_memory_alloc` 函数在 lsass 进程中开辟一块可读可写可执行的内存空间，并通过 `kull_m_memory_copy` 将该内容拷贝到新开辟的空间中。可以看到，新开辟的地址与之前函数空间的内容一致。

`kull_m_remotelib_CreateRemoteCodeWitthPatternReplace` 函数的主要目的是修复 `rc4_int` 和 `rc4_decrypt` 函数，并将代码注入到 lsass 空间中。后续通过 `kull_M_memory_copy` 将原地址 `7ffa3cabf628` 指向的 `cryptdll!rc4HmacInitialize` 函数指针替换为 `0xc79bcdfd88` 地址中存储的 8 字节值 `01f3d4fb0000`，指向自定义的 `kuhl_misc_skeleton_rc4_init` 函数地址，从而 hook 原始的 `rc4HmacInitialize` 函数。

原始的 `RC4_init` 函数被 hook 后，计算自定义 `rc4_decrypt` 函数相对于 `rc4_init` 函数的偏移量，通过 `kull_m_memory_copy` 将自定义 `rc4_decrypt` 函数替换掉原始的 `rc4HmacDecrypt` 函数。

接下来分析自定义的 `rc4` 初始化函数。在 `rc4init` 函数中，有一个 `kiwiKey` 数组，用于存储认证传输的 hash。通过计算 `mimikatz` 的 hash 发现，这里存储的是 Skeleton 的默认密码 `mimikatz` 的 hash。

通过 `LocalAlloc` 分配内存指向 `pContext`，将用户的原始密码 hash 传入 `rc4HmacInitialize` 函数生成秘钥流，并将其拷贝到分配的空间中。接着，将 `kiwiKey`（`mimikatz` 字符串的 hash）传入 `rc4HmacInitialize` 函数生成 `mimikatz` 的秘钥流，并继续拷贝到分配的空间中。最后，将原始密码 hash 地址也拷贝到 `pContext` 空间中。

在 `rc4HmacInitialize` 函数下断点，输入 `net use \win2016\c$/user:"test.com\administrator" "mimikatz"`，断下来后执行 `*(LPCVOID *) ((PBYTE) *pContext + 32) = Key` 代码，查看 `pContext` 存储的内容。可以看到，第一排是原始密码生成的秘钥流，第二排是 `mimikatz` 生成的秘钥流，第三排前 8 字节是我们输入的原始密码 hash 的地址，查看该地址的内容发现就是 `mimikatz` 的 hash。

由于 RC4 是对称算法，加密和解密都使用相同的秘钥流。解密函数中传入 `pContext` 和被加密的数据，首先分配一段空间 `buffer`，将待解密的数据拷贝到 `buffer` 中，然后将 `buffer` 和 `pContext` 传入 `rc4HmacDecrypt` 函数进行解密。如果第一次解密失败，则使用第二次设置的 `mimikatz` 生成的秘钥流再次解密。如果成功，则将 `pContext` 中的原始 `Key` 改为 `kiwikey` 的值，确保无论是输入正确的密码还是设置的 `kiwikey` 都可以通过 RC4 初始化加密解密流程。

自定义 `kiwikey: zhuzhuxiaoba` 重新编译后认证成功，不过当前的 mimikatz Skeleton 万能密码只支持 Kerberos 流程。在 NTLM 认证流程中也可以实现万能钥的功能，早期的恶意样本就是这样操作的。通过在 `MSV1_0.dll` 中定位 `MsvpSamValidate` 函数，并 hook 该函数中的 `MsvpPasswordValidate` 调用，可以实现万能密码的功能。GitHub 上有类似的利用示例，我在 Windows 10 系统上测试成功，但在服务器上未能复现。

### 防御方案

由于该攻击对 lsass 进程进行了注入，从 Windows 8.1 和 Server 2012 R2 开始，Microsoft 引入了一项称为 LSA 保护的功能。此功能基于 PPL 技术，旨在防止非管理员非 PPL 进程通过打开进程之类的函数篡改 PPL 进程的代码和数据，从而防止对 `lsass.exe` 的代码注入。相关操作也会失败。在注册表 `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa` 中添加 `RunAsPPL=dword:00000001`，重启后即可开启 PPL 保护。

开启 PPL 保护后，mimikatz 注入 `lsass` 进程的行为将会失败。虽然 mimikatz 后续增加了 `mimidrv.sys` 驱动来绕过 PPL 保护，但加载驱动的行为已经有明显的日志可供检测。Windows 日志 4697 记录了 `mimidrv.sys` 驱动的安装，Sysmon 日志 13 可以明显看到 `mimidrv` 服务及其对应的驱动程序。

我们可以使用 zBang 工具扫描当前的域控环境是否已经被注入了万能密码。需要注意的是，注入的 Skeleton Key 只存在于内存中，如果域控制器重启，注入的 Skeleton Key 将会失效。