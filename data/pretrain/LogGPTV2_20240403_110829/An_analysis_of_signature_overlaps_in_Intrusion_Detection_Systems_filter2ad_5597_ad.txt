packet. More recent versions of the engine and signatures are
available (e.g., the 2.8.5 engine was released in 2010) but
their signatures, though currently very similar to the ones
of the above-mentioned versions, cannot be shown to any
unregistered user, which would prevent discussing results in
detail in this paper. Thus, we selected versions 1.8.6 and
2.4.5 because they are representative of versions for which
we can discuss signatures in details.
A. Design of the Experiment
The design of the experiment for each signature database
version was the same: we precisely selected as many signa-
tures to study as possible, and we systematically analyzed
their equality and inclusion. The Snort signature database for
version 2.4.5 (resp. 1.8.6) has a total of 3576 (resp. 1266)
signatures. In the default conﬁguration, not all the signatures
are used when Snort is executed. We only modiﬁed the part
of the default conﬁguration that speciﬁed which signatures
should be used to ensure that all signatures in the Snort
database were used. All the other parts of the default conﬁg-
uration (e.g., the variable speciﬁcations) were not changed.
It is worth noting that Snort signatures can be tagged
as commented out (e.g., they are deemed to not function
properly), or deleted (e.g., a signature that will disappear
from a future release). We did not consider the 385 (resp.
25) commented and deleted signatures for Snort 2.4.5 (resp.
Snort 1.8.6) for obvious reasons.
The IDS-SSA limitations (Section V-B) further reduce
the number of signatures we could consider: 930 (resp. 10)
for Snort 2.4.5 (resp. Snort 1.8.6). In the end, we used
2261 signatures for Snort 2.4.5 and 1231 signatures for
Snort 1.8.6 (i.e., 63% and 97% of their untagged signatures,
respectively).
B. Results
i = Sd
j ⊂ Sd
i ⊂ Sd
j ⊂ Sd
i ⊂ Sd
Table III summarizes the results and presents the number
j ), the number
of pairs of equal signatures (i.e., Sd
i ⊂ Sd
j ),
of inclusion chains (ICs) of length two (i.e., Sd
j ⊂ Sd
k) and of length four
of length three (i.e., Sd
k ⊂ Sd
l ). We also looked for inclusion
(i.e., Sd
i ⊂ Sd
chains of length ﬁve (i.e., Sd
m), but
did not ﬁnd any. Note that when counting ICs, sub-chains
made of signatures involved in an IC of length n count for
ICs of length smaller than n. For instance, the table shows
there exists an IC of length 4, suggesting there exist four
3 ⊂ Sd
signatures Sd
4 ;
these signatures (e.g., Sd
3 ) count
when identifying ICs of length two and three. In other words,
two of the three ICs of length three are Sd
3 and
2 ⊂ Sd
Sd
4 such that Sd
3 with Sd
1 ⊂ Sd
1 ⊂ Sd
2 ⊂ Sd
2 ⊂ Sd
k ⊂ Sd
l ⊂ Sd
1 ⊂ Sd
2 ⊂ Sd
3 ⊂ Sd
4 .
1 , Sd
2 , Sd
3 , Sd
1 , Sd
2 , Sd
Snort
1.8.6
2.4.5
Equal
ICs of Two
ICs of Three
ICs of Four
4
4
306
264
24
3
0
1
SIGNATURE OVERLAP ANALYSIS RESULTS: SIGNATURE INCLUSIONS
Table III
AND EQUALITIES
These results show a very limited number of redundancies
between signatures (equal signatures) in both Snort versions,
but numerous inclusions (especially many ICs of length
two, but also ICs of length three and four). These suggest
numerous situations (in combination with intersections, see
Section VI-B2) that can be exploited by an attacker (e.g.,
IDS evasion).
In the case of Snort 1.8.6, the log limit being ﬁxed to one,
every inclusion chain of length two or more (and potentially
the pairs of equal signatures) could be used to create an
evasion attack.
One could assume that Snort developers have a tool
similar to IDS-SSA to analyze the newer signature database
such as Snort 2.4.5, since there is only one inclusion chain
bigger than the default log limit of three. We could question
this assumption based on the fact that such a tool (if it exists)
was unable to identify the four pairs of equal signatures (one
can not assume they left these signatures on purpose in the
signature database) since this is the easiest problem of the
three (i.e., equality, instead of inclusion and intersection)
signature overlapping problems. Moreover, we looked for
how long these pairs of equality have remained unnoticed
(stayed in the Snort signature database). Some stayed in
the signature database in several consecutive versions. For
example, the pair S272 = S273 was in Snort 2.3.1 to 2.4.5
(March 2005 to at least July 2005), the pair S893 = S1722
was in Snort 1.8.7 to 2.4.5 (July 2002 to at
least July
2005), and the pair S841 = S1656 was in Snort 2.3.0 to
2.4.5 (January 2005 to at least July 2005). Contrary to these
pairs of equal signatures which were removed in 2005, the
fourth pair, S2196 = S2195, was introduced in the Snort
2.1.0 signature database (released in December 2003) and
is still included in the latest Snort database we have access
to (released on the 17th of February, 2010).
We provide below a more detailed analysis of these
results: equality (Section VI-B1), inclusion (Section VI-B2).
We then show how inclusions can be used to create a
sneaky squealing attack (which is an evasion attack) in
Section VI-B3.
1) Equality:
In the case of Snort 1.8.6 and 2.4.5, we
speculate that the equalities between signatures are due to
either the default conﬁguration of Snort, to duplications, or
to human errors such as cut and paste errors (i.e., copying
a signature similar to the one someone wants to specify,
pasting it and forgetting to modify parts of its speciﬁcation).
All of the equality groups identiﬁed contain two signatures.
Thus, this situation could be only problematic for Snort 1.8.6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
116alert tcp $EXTERNAL NET any ->
$HTTP SERVERS $HTTP PORTS (
msg:”WEB-CGI alert.cgi access”; ﬂow:to server,established;
uricontent:”/alert.cgi”; nocase;
reference:bugtraq,4211; reference:bugtraq,4579;
reference:cve,2002-0346; reference:nessus,11748;
classtype:web-application-activity; sid:2195; rev:6;)
alert tcp $EXTERNAL NET any ->
$HTTP SERVERS $HTTP PORTS (
msg:”WEB-CGI catgy.cgi access”; ﬂow:to server,established;
uricontent:”/alert.cgi”; nocase;
reference:bugtraq,3714; reference:bugtraq,4579;
reference:cve,2001-1212; reference:nessus,11748;
classtype:web-application-activity; sid:2196; rev:6;)
Figure 4. Signature 2195 and 2196 from Snort 2.4.5
(i.e., log limit of one), but, fortunately, in the case of Snort
1.8.6 each pair of equal signatures contains non-orthogonal
signatures (i.e., they refer to the same attack/vulnerability).
A typical example of duplication is S475 and S455 in
Snort 1.8.6. These signatures have the exact same speciﬁca-
tion with simply a different signature number and revision
number. The other three instances of equal signatures for
Snort 1.8.6 are due to the fact that we used the default
conﬁguration of Snort (only modiﬁed to include all sig-
natures), speciﬁcally, to the fact that by default, variables
$EXTERNAL_NET and $HOME_NET are both equal to any
(i.e., any possible IP address). Then, the two signatures that
only differ on the direction of the monitored communication
(source and target machines speciﬁed with those variables)
are considered equal. Other (default) values for variables
$EXTERNAL_NET and $HOME_NET would make them
different.
In the case of Snort 2.4.5, one of the equal pairs is likely
due to human error. S272 and S273 are part of the Snort
signature database since at least Snort 1.8.6. The difference
between these signatures is one predicate in the speciﬁcation
of the content of the packet payload. However, this predicate
has been removed in Snort 2.3.1, making the two signatures
equal in Snort 2.4.5.
Another equality is due, we believe, to a cut and paste
error. Figure 4 presents these two signatures (Snort 2.4.5
signature database).
As we observe, the message and references have been
changed in signature 2196, which was created after signature
2195, and we believe the person who speciﬁed signature
2196 forgot to change the speciﬁcation (constraint) of the
packet payload (i.e., using the uricontent plug-ins).
We believe this is a human error because both signatures
refer to different vulnerability identiﬁers from SecurityFocus
(bugtraq)10 and CVE11 that are coherent with the message
describing the attack. We identiﬁed that
this error was
introduced in the Snort 2.1.0 signature database and is still
Figure 5.
Inclusion Chain in Snort 1.8.6
included in the latest Snort database we have access to
(released on the 17th of February, 2010). The other two
cases of equality in Snort 2.4.5 are duplications.
2) Inclusion: In the case of Snort 1.8.6, we know that
Snort developers were aware that a log limit of one could
prevent logging IDS events. However, with the results pro-
vided by our tool, we are able to visualize (e.g., Figure 5)
and quantify the extent of the signature inclusion problem
in Snort 1.8.6 (and in any other Snort versions).
Figure 5 (derived from our results) partially shows the
extent of the signature inclusion problem for a group of
signatures in Snort 1.8.6: e.g., S1400 includes S1073 and is
included in S1287. Note that S999 is included in four other
signatures! Since Snort 1.8.6 has a log limit of one, these
inclusions lead to the risks of missing attacks, which is often
the case [3].
Snort 2.4.5 (and Snort 2.8.5, the last version currently
available, released in 2010), has a log limit of three. Three
is the default conﬁguration value, but this log limit can be
changed (to a smaller or bigger value) in the conﬁguration.
In Snort 2.4.5, there are three inclusion chains of length
three and one inclusion chain of length four (i.e., bigger
than the default log limit). Fortunately, in both cases, the
signatures in the inclusion chains (of length three and four)
are non-orthogonal signatures.
3) Exploiting inclusions to create a sneaky squealing
attack: Although the inclusion chains discussed above for
Snort 2.4.5 contain non-orthogonal signatures, it does not
mean that it is not possible to use them in combination
with another (orthogonal) signature (i.e., that refers to a
different attack/vulnerability) to cause an evasion attack. In
fact, assuming an IC of non-orthogonal signatures of length
three, we only need to identify one orthogonal signature that
intersects with the ﬁrst signature of the IC (i.e., a signature
intersecting with Sd
k) and then generate
i
the proper sequence of packets within this intersection of
two signatures (i.e., Sd
i and an orthogonal one) to show that
an attacker can exploit this IC of length three to make an
evasion attack.
i ⊂ Sd
in Sd
j ⊂ Sd
10www.securityfocus.com
11www.cve.mitre.org
To mimic what an attacker, aware of the overlapping prob-
lem, would do, we ﬁrst selected the following intersection
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:45:16 UTC from IEEE Xplore.  Restrictions apply. 
  S1287S993S995S994S999S1400S1073S987S1000117chain identiﬁed in Snort 2.4.5: S1537 ⊂ S1455 ⊂ S882.
Figure 6 presents these three signatures (Snort 2.4.5 sig-
nature database). We selected these signatures because (1)
they are involved in an IC of length three (i.e., if we ﬁnd
an intersecting signature with S1537 we will be able to
specify packets that can trigger four signatures, one above
the log limit) and (2) they specify simple constraints on the
contents of the packet payload (this will be important when
identifying an intersecting signature and when creating a
packet in the intersection).
alert tcp $EXTERNAL NET any ->
$HTTP SERVERS $HTTP PORTS
(msg:”WEB-CGI calendar admin.pl access”;
ﬂow:to server,established; uricontent:”/calendar admin.pl”;
reference:cve,2000-0432; classtype:web-application-attack;
sid:1537; rev:6;)
alert tcp $EXTERNAL NET any ->
$HTTP SERVERS $HTTP PORTS
(msg:”WEB-CGI calendar.pl access”;
ﬂow:to server,established; uricontent:”calendar”; nocase;
pcre:”/calendar(|[- ]admin)\.pl/Ui”;
reference:bugtraq,1215; reference:cve,2000-0432;
classtype:web-application-attack; sid:1455; rev:7;)
alert tcp $EXTERNAL NET any ->
$HTTP SERVERS $HTTP PORTS
(msg:”WEB-CGI calendar access”;
ﬂow:to server,established; uricontent:”/calendar”; nocase;
classtype:attempted-recon; sid:882; rev:5;)
Figure 6. Snort signature 1537, 1455 and 882 from Snort 2.4.5
Second, we identiﬁed a signature in the Snort 2.4.5
signature database that intersects with S1537 (thus, also inter-
secting with S1455 and S882). If we look at S1002 (Figure 7),
also from Snort 2.4.5, we can see that it intersects with S1537
since the only requirement for them to be able to intersect
(all other plug-ins are the same) is that the attack packet
payload should contain the string calendar_admin.pl
and the string cmd.exe. To identify signature S1002, we
simply searched the signature database for signatures with
the exact same constraints as S1537 on the protocol ﬁelds, but
with different constraints on the packet payload, that did not
contradict the constraints of S1537 (which was easy because
there are plenty of signatures in Snort 2.4.5 matching these
requirements).