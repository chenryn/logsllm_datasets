between two leader proposals, it incurs an additional delay
before being getting proposed. From a client’s perspective, it
takes δ to send its request to the replicas; on average, this
request will arrive half way between two leader proposals,
which are 2δ time apart, so another δ delay on average; it
takes an additional δ time for replicas to reply to the client.
So the average client latency of Sync HotStuff is 2∆ + 4δ.
Our experiments in Section V conﬁrm this.
it
For comparison,
the best prior synchronous protocol
in
terms of latency is Hanke et al. [3]. Its average latency is
8∆ + 9δ from a leader’s perspective [13], and 9∆ + 11.5δ
from a client’s perspective, following a similar analysis.
E. Bound on Responsiveness
Sync HotStuff commits with a 2∆ latency in the steady state
when f  n/3. The lower bound
and the proof closely follow Dwork et al. [2]. For clarity,
we present the bound in the Byzantine broadcast formulation.
Recall that in Byzantine broadcast, a designated sender tries
to broadcast a value to n parties. A solution needs to satisfy
three requirements:
(termination) all honest parties eventually commit,
(agreement) all honest parties commit on the same value,
and
(validity) if the sender is honest, then all honest parties
commit on the value it broadcasts.
Theorem 5. There exists no Byzantine broadcast protocol that
simultaneously satisfy the following:
• termination, agreement and validity as deﬁned above;
• tolerates f ≥ n/3 Byzantine faults;
• terminates in less than ∆ time if the designated sender
is honest.
Proof. Suppose such a protocol exists. Divide parties into
three groups P , Q and R, each of size at most f. Consider
the following three scenarios. In Scenario A, parties in Q are
Byzantine and remain silent and an honest designated sender
sends 0. In this scenario, parties in P and R commit 0 in less
than ∆ time. In Scenario B, parties in P are Byzantine and
remain silent and an honest designated sender sends 1. In this
scenario, parties in Q and R commit 1 in less than ∆ time.
In Scenario C, the designated sender is Byzantine and sends 0
to P and 1 to Q; parties in R are Byzantine and they behave
like in Scenario A to P , and behave like in scenario B to Q.
Messages from P take ∆ to reach Q and messages from Q
take ∆ to reach P . Before time ∆, P receive no messages from
Q and Q receive no messages from P , and thus the scenario is
indistinguishable from Scenario A to P and indistinguishable
from Scenario B to Q. Thus, P commits 0 and Q commits 1
in less than ∆ time, violating agreement.
III. SYNC HOTSTUFF WITH MOBILE SLUGGISH FAULTS
The standard synchrony model used in the previous section
requires that every message sent by an honest replica arrives
at every other honest replica within ∆ time. In practice, such
an assumption may not hold all the time due to potential
unforeseen aberrations in the network at either the sender or
the receiver, causing some messages to be delayed. Under
such aberrations, a protocol proved secure under the stan-
dard synchrony assumption may lose safety. For our protocol
speciﬁcally, if a replica that voted for an equivocating block
runs into a network glitch, then another honest replica may not
receive it in time and may incorrectly commit another block.
A potential way to “ﬁx” this is to account for the sender (or
receiver) of the delayed message as Byzantine and thus tolerate
fewer actual Byzantine faults. Unfortunately, over the course
of a long execution, every replica is bound to observe such an
aberration and this “ﬁx” will result in a dishonest majority of
replicas, thus breaking safety eventually.
A. The Mobile Sluggish Model
Chan et al. [4] consider a weaker model that allows some
replicas to be sluggish,
i.e., allows delays for messages
sent/received by sluggish replicas in the network. On the
other hand, messages sent by prompt replicas will respect the
synchrony bound. More speciﬁcally, if a replica r1 is prompt
at time t1, then any message sent by r1 at time ≤ t1 will arrive
at a replica r2 prompt at time t2 if t2 ≥ t1 + ∆. Moreover, the
set of sluggish replicas can arbitrarily change at every instant
of time. Hence, we call this model the mobile sluggish fault
model. We denote the number of sluggish replicas by d, the
number of Byzantine replicas by b and the total number of
faults by f. Thus, f = d + b.
We note that the mobile sluggish model expects that a
message sent by a sluggish replica would respect the syn-
chrony bound as soon as it becomes prompt. In practice,
this model captures temporary loss in network connectivity
causing message delays. The replica can resend messages or
download buffered messages as soon as network connectivity
is restored. However, it is not a good model for capturing a
replica going ofﬂine for a while since this model would require
the replica to either buffer a huge amount of messages to be
resent or to resend each message many times, both of which
are impractical.
Guo et al. [6] show that no protocol can tolerate a total
number of faults (sluggish plus Byzantine replicas) greater
than n/2. The intuition is that a majority set consisting of
Byzantine and sluggish replicas might reach a commit decision
without interacting with the rest of the world and might cause
conﬂicting commits. Again, we assume n = 2f + 1. Thus,
we assume f + 1 replicas are honest and prompt at any time.
Moreover, our protocol provides liveness when f + 1 honest
replicas are prompt for a “sufﬁciently long” period of time,
i.e., there can be sluggish replicas but they are not mobile.
The duration is directly related to the time required to commit
a block in the protocol.
B. Protocol
In the synchronous protocol described in Section II, the 2∆
period after a vote ensures two things: (i) every honest replica
receives Cv(Bk) within before entering the next view, and (ii)
no honest replica votes for an equivocating block.
If this replica can be sluggish, unfortunately, neither of the
above arguments holds. Other replicas may not receive the
proposal it forwards and hence certiﬁcates may not form; and
even if the leader equivocates, this sluggish replica may not
know about it in time.
The following modiﬁcations are used to ensure the above
two properties in the presence of mobile sluggish faults. To
ensure (i), we require a replica to start its timer after receiving
Cv(Bk) (contained in the next proposal) from f + 1 replicas.
One of those replicas must be honest and prompt when the
timer was started, so all prompt replicas receive Cv(Bk) in
time. For (ii), we require a replica to commit only after hearing
from f + 1 replicas that no equivocation happened in a 2∆
period. This is safe because an equivocation could not have
missed all of them. We call the former step a pre-commit and
the latter step a commit.
Interestingly, despite a weaker model than standard syn-
chrony, based on the intuition presented above, the protocol
is only marginally different from the one in Section II. For
clarity we present the entire steady state protocol and gray
out the repetition in Figure 3. The view-change protocol need
not change.
C. Safety and Liveness
The proof in the mobile sluggish model has the same
structure as the standard synchrony model. Lemma 6 below
is almost identical to Lemma 1 except that the claim is made
for f + 1 honest replicas instead of all honest replicas, which
is as expected because the remaining d honest replicas can
be sluggish. We can prove unique extensibility and safety
Let v be the current view number and replica L be the leader of the current view. While in view v, a replica r runs the
following protocol in the steady state.
1) Propose. If replica r is the leader L, upon receiving Cv(Bk−1), broadcast (cid:104)propose, Bk, v,Cv(Bk−1)(cid:105)L where Bk extends
Bk−1.
2) Vote. Upon receiving a proposal (cid:104)propose, Bk, v,Cv(Bk−1)(cid:105)L (not necessarily from L) where Bk extends Bk−1, if no
leader equivocation is detected, forward the proposal to all other replicas, broadcast a vote in the form of (cid:104)vote, Bk, v(cid:105)r.
3) (Non-blocking) Pre-commit. On receiving (cid:104)propose, Bk+1, v,Cv(Bk)(cid:105)L from f + 1 replicas, set pre-commit-timerv,k
to 2∆ and start counting down. When pre-commit-timerv,k reaches 0, pre-commit Bk and broadcast (cid:104)commit, Bk, v(cid:105)r.
4) (Non-blocking) Commit. On receiving (cid:104)commit, Bk, v(cid:105) from f + 1 replicas, commit Bk and all its ancestors.
Fig. 3: The steady state protocol with mobile sluggish faults.
identically as Lemma 2 and Theorem 3 by invoking Lemma 6
in place of Lemma 1.
As before, we say a block Bk is committed directly if it is
committed due to f + 1 pre-commits. We say a block Bk is
committed indirectly if it is a result of directly committing a
block extending Bk.
Lemma 6 (Lemma 1 extended to mobile sluggish). If an
honest replica directly commits B(cid:96) in view v, then (i) no
equivocating block is certiﬁed in view v, and (ii) f + 1 honest
replicas lock on a certiﬁed block that ranks equal to or higher
than Cv(B(cid:96)) before entering view v + 1.
Proof. If an honest replica directly commits B(cid:96) in view v,
then d + 1 honest replicas pre-commit B(cid:96) in view v. Denote
the set of these d+1 replicas by R. Let the earliest pre-commit
among R be performed by replica r1 at time t. At time t−2∆,
replica r1 must have received view-v proposals for B(cid:96)+1 from
f + 1 distinct replicas. One of those replicas, say replica r2,
is honest and prompt at time t− 2∆. Denote the set of honest
and prompt replicas at time t − ∆ by R(cid:48). Every replica R(cid:48)
receives (cid:104)propose, B(cid:96)+1, v,Cv(B(cid:96))(cid:105)L from r2 by time t − ∆.
We will prove that the set R(cid:48) is the required set that does not
vote for equivocating blocks in view v and locks on a certiﬁed
block that ranks equal to or higher than Cv(Bl) before entering
view v + 1.
For part (i), observe that after time t − ∆, replicas in
R(cid:48), having seen a proposal for B(cid:96)+1, will not vote for a
block that equivocates B(cid:96). If any replica in R(cid:48) had voted
for an equivocating block before t − ∆,
its broadcast of
the equivocating propose or new-view message will reach all
honest replicas that are prompt at time t by time t. At least
one replica in R would be prompt at time t. This replica
would have detected leader equivocation by time t and would
not have pre-committed B(cid:96), a contradiction. Therefore, an
equivocating block will not get any vote from R(cid:48) in view v
and will not be certiﬁed in view v.
For part (ii), observe that no replica in R(cid:48) has quit view by
time t − ∆, because otherwise some replica in R would not
have pre-committed following the same argument as above.
Therefore, every replica in R(cid:48) locks on Cv(B(cid:96)) or higher before
quitting view v, which is before entering view v + 1.
Remark. Note that the proof of the above lemma shows that
all replicas in R(cid:48) receive Cv(Bk) before quitting view v. Thus,
the ∆ wait during view-change is not needed for the protocol
with sluggish faults.
Liveness. In the mobile sluggish model, liveness is guaranteed
only during periods in which f + 1 honest replicas including
the leader stay prompt. In that case, the same arguments in
Lemma 4 hold. We do not repeat the proof.
D. Efﬁciency
In the mobile sluggish model, each pre-commit
timer
starts 3δ later. The commit messages add another round of
communication and δ latency. So the total latency becomes
2∆ + 4δ + 4δ = 2∆ + 8δ from the client’s perspective.
IV. SYNC HOTSTUFF WITH OPTIMISTIC RESPONSIVENESS
In this section, we incorporate the Thunderella [5] opti-
mistic responsive mode into Sync HotStuff. In Section II, a
certiﬁcate/quorum required only f + 1 votes. Thus, a vote
from a single honest replica can result in a certiﬁcate if all f
Byzantine replicas vote on the same block. Therefore, before
committing a block, a replica needs to wait long enough to
hear all honest replicas’ votes and make sure none of them
voted for an equivocating block. The commit latency thus
inherently depends on the maximum network delay ∆. In
contrast, partially synchronous protocols rule out the existence
of a conﬂicting certiﬁcate with larger quorums. For instance,
PBFT requires > 2n/3 votes (in two phases) and tolerates
f  2n/3 votes. Thus, partially synchronous protocols
commit as soon as these quorums of votes are obtained, so
the latency does not depend on ∆.
Pass and Shi [5] use the term responsive to capture the
above latency distinction. A protocol is said to be responsive
if the latency only depends on the actual network δ but not
the maximum network delay ∆. A protocol is said to be
optimistically responsive if it achieves responsiveness when
some additional constraints are met.
Since Sync HotStuff aims to tolerate up to minority corrup-
tion, similar to Thunderella [5], to achieve responsiveness the
Let v be the current view number and replica L be the leader of the current view. While in view v, a replica r runs the
following protocol in the steady state. All certiﬁcates created in view v require > 3n/4 votes.
1) Propose. If replica r is the leader L, upon receiving Cv(Bk−1), broadcast (cid:104)propose, Bk, v,Cv(Bk−1)(cid:105)L where Bk extends
Bk−1.
2) Vote. Upon receiving (cid:104)propose, Bk, v,Cv(Bk−1)(cid:105)L (not necessarily from L) where Bk extends Bk−1, if no leader
equivocation is detected, forward the proposal to all other replicas, and broadcast a vote in the form of (cid:104)vote, Bk, v(cid:105)r.
3) Pre-commit. On receiving (cid:104)propose, Bk+1, v,Cv(Bk)(cid:105)L from f + 1 replicas, pre-commit Bk and broadcast
(cid:104)commit, Bk, v(cid:105)r right away.
4) Commit. On receiving (cid:104)commit, Bk, v(cid:105) from f + 1 replicas, commit Bk and all its ancestors.