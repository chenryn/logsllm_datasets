resulting state is the one after executing c in the state where the
value w is assigned to the variable i, and then the rest of the values.
Also, the function calls use the judgement ⇓call which describes
the behavior of a function from the callee point of view: f , va, m ⇓p
vr , m′ means that the function named f of the program p executed
from the memory m with arguments va returns values vr in the
memory m′. Note that as said earlier, the environment between the
caller and the callee are completely independent.
call
3.4 Memory safety and constant-time security
Two essential properties of Jasmin programs are memory safety
and constant-time security. In this paragraph, we introduce the
two notions. Later, we will argue that both notions are preserved
by compilation, and present automated methods for verifying that
Jasmin programs are memory safe and constant-time.
Memory safety. The Jasmin memory model is parameterized by
the notion of validity. It must capture the various architectural
constraints (e.g., alignment of pointers), and requirements from the
execution environment (some memory regions might be reserved
to the operating system, or to load the code text, which cannot be
overwritten by Jasmin programs). Also, the allocation routine that
is used to reserve memory for local variables on function entry
must return fresh, valid memory addresses (or fail).
A Jasmin command c is safe if its semantics is defined for every
initial state. Formally, ∀ s · ∃ s′ · c, s ⇓ s′. This notion is rather
strong; in particular, it entails that the program is well-typed, that it
terminates on all inputs, that array accesses are always in-bounds,
and that all memory accesses target valid memory.
This definition of safety being very strong, we assume that pro-
grams may be equipped with preconditions that restrict the set of
admissible initial states: enough free stack space, validity of input
pointers, etc.
Constant-time security. The semantics of Jasmin program can be
instrumented to produce a leakage trace that records the branches
that are taken and memory read/write operations performed during
execution. Judgments of the extended semantics are of the form
c, s ⇓ s
′
, ℓ
where ℓ is the leakage trace. The extended semantics is used to
formalize constant-time programs: specifically, a Jasmin command
c is constant-time iff for every states s1, s2, s′
2 and leakage traces
ℓ1 and ℓ2, we have:
1, s′
 ⇒ ℓ1 = ℓ2
c, s1 ⇓ s′
1, ℓ1
c, s2 ⇓ s′
2, ℓ2
s1 ∼ s2
where ∼ is an equivalence relation between states—as usual, ∼ is
defined from security annotations specifying where secrets are held
in the initial memory.
We stress that our notion of constant-time security is termination-
insensitive and does not impose any condition on the program
safety. However, it is well-known that naive error management
is a main source of attacks in cryptographic implementations. In
practice, we always check that programs are both safe and constant-
time.
4 SAFETY AND CONSTANT-TIME ANALYSES
This section describes how Jasmin source level analyses are de-
ployed on top of the Dafny verification infrastructure. An annotated
Jasmin intermediate program is translated into two complementary
Dafny programs: the first encodes safety; the second, assuming
safety, encodes constant-time security policies as annotations.
4.1 Safety analysis
Dafny is a general-purpose verification language with support for
procedures, loops, arrays and native bitvector theories. Our func-
tional embedding of Jasmin into Dafny thus preserves the original
program structure and is almost one-to-one. Most noteworthy, Jas-
min functional arrays are encoded as fixed-size Dafny sequences,
Session H4:  Formal VerificationCCS’17, October 30-November 3, 2017, Dallas, TX, USA1814Figure 5: Annotated Montgomery Ladder in Jasmin (left) and Dafny translations for safety (middle) and constant-time (right).
...
j = 62; i = 3;
while (i >=s 0)
//@ decreases i;
//@ invariant i =s 0 ==> valid(sp, 8 ∗ i, 8 ∗ i + 7);
//@ security invariant public(i);
{
...
j := 62; i := 3;
while (i >=s 0)
free ...
invariant Public(sp);
invariant Public(i); invariant Public(i > 1);
{
...
j := 62; i := 3;
while (i >=s 0)
decreases i; invariant (4 - i) >> 63 == 0;
invariant (j == 62) || (j == 63);
free invariant sp == old(sp);
invariant i >> 63 == 0 ==>
ValidRange(sp as int + 8 ∗ i as int, sp as int + 8 ∗ i as int + 7);
{
assert Public(sp as int + 8 ∗ i as int + 0); ...;
assert Public(sp as int + 8 ∗ i as int + 7);
...
while (j >> 63 == 0)
free ...
invariant Public(j); invariant Public(j >> 63 == 0);
{
...
j = js; j := j - 1;
}
j := 63; i = is; i := i - 1;
}
...
is = i; tmp1 = [sp + 8∗i]; s = tmp1;
while (j >=s 0)
//@ decreases j;
//@ invariant j > 63 == 0)
decreases j; invariant (63 - j) >> 63 == 0;
{ ...
j = js; j := j - 1;
}
j := 63; i = is; i := i - 1;
}
...
and memory encoded as a global array of byte blocks; reads and
writes to memory are segmented into byte-wise operations, and
require memory regions to be valid, axiomatized in Dafny as two
ghost annotations Valid and ValidRange. Jasmin expressions and
instructions are defined using mathematical integer and bitvec-
tor arithmetic, as precluded by the Coq semantics. An annotated
snippet and its translation are shown in Figure 5.
The safety of the Jasmin program is therefore reduced to the
safety of the functional Dafny embedding. The Dafny verifier guar-
antees that a safe program terminates and is free of runtime errors
such as memory accesses, array indices or shift amounts out of
bounds or division by zero.
For simple straight-line Jasmin programs, including most of our
benchmarks, with no procedure calls, all loops unrolled and no mem-
ory operations, safety analysis can be performed fully automatically.
Nevertheless, for more modular procedures, less well-behaved while
loops or memory operations, programmers can supply additional
annotations describing procedure contracts, loop invariants and
valid memory regions. They can also express intermediate func-
tional correctness properties seamlessly in the Jasmin annotation
language. Taking a glance at Figure 5, both loops need invariants
stating that the indices i and j decrease until zero within the loop
and that they stay within bounds. Moreover, the 64 bits addressed
by sp + 8*i need to constitute a valid memory region.
Under the hood, the Dafny verifier checks for correctness by
translating to Boogie intermediate code. The Boogie verifier then
generates verification conditions that are passed to the Z3 SMT
solver. Alternatively, we have implemented a specialized verifica-
tion condition generator for straight-line Jasmin procedures, in the
style of [19]. This is more effective (specifically yields smaller veri-
fication conditions) for proving certain correctness properties of
Jasmin programs, and targets specific SMT solvers such as Boolec-
tor that excels for bitvector arithmetic. We rely on the Haskell SBV6
library as a universal interface with SMT-Lib.
6https://hackage.haskell.org/package/sbv
4.2 Constant-time analysis
For constant-time analysis we instrument the generated Dafny pro-
gram with special Public annotations on control flow conditions,
memory accesses and array accesses, entailing that they do not
depend on secrets. (Jasmin conditional assignments are compiled to
constant-time instructions, so they do not require such safeguards.)
As for safety, programmers can express additional security proper-
ties in Jasmin as boolean assertions using the public predicate. In
the example from Figure 5, safety invariants are assumed to hold
(marked with free or assume in Dafny) and the [sp + 8*i] memory
read requires two security invariants stating that the values of sp
and i are public inside the outer loop; the former is inferred from
the procedure contract, and the second must be explicitly supplied
by the programmer.
The constant-time instrumentation departs from the functional
embedding described in the previous paragraph in the sense that we
explore the existing translation from Dafny to Boogie to propagate
constant-time security policies from Jasmin to Boogie programs.
The Boogie input language has a well-defined semantics and was
designed to be a convenient backend for verification tools. There,
procedures are defined as a sequence of basic blocks that start
with a label, contain straight-line statements with no if or while
statements, and may jump at the end. To verify constant-time, we
adapt a technique used by the ct-verif tool [4] which reduces the
constant-time security of a Boogie program to the safety of a prod-
uct program that emulates two simultaneous executions of the
original program. We implement a Boogie-to-Boogie transforma-
tion tailored to the translation of Jasmin programs that computes
the product of each procedure by essentially making shadow copies
of program variables and duplicating all statements inside basic
blocks to mention shadow variables instead, with two exceptions:
(1) procedure call statements are converted to single statements
calling the product procedure with twice as many inputs and
outputs, and
(2) assertions corresponding to constant-time security policy an-
notations are translated to relational assertions expressing first-
order logic formulas that relate original and shadowed variables,
Session H4:  Formal VerificationCCS’17, October 30-November 3, 2017, Dallas, TX, USA1815by translating public(e) expressions to equality expressions
e == e.shadow.
Proving that the product program is safe ensures that the equalities
are always valid and suffices to conclude that the original program
is sound. The soundness of this technique, that has been formally
proven in Coq in [4], hinges on the assumption that program paths
are independent from program secrets, guaranteeing that the prod-
uct program always has as many paths as the original program and
can therefore be efficiently verified.
5 CERTIFIED COMPILER
This section first describes the architecture of the Jasmin compiler
and the various compilation passes. It then states and explains its
main correctness theorem and describes the proof methodology.
Finally we argue that the compilation preserves the constant-time
property of the programs it processes.
5.1 Compilation passes
The Jasmin compiler is formally verified. Therefore, it is mainly
written using the Coq programming language. However, some parts
are written in OCaml. The diagram shown on the left of Figure 1
summarizes its internal architecture.
The first passes parse the source program and enforce some
typing rules. Then, the constant expansion pass replaces parameters
by their values. Parameters are named constants whose values are
known at compile-time.
Inlining replaces the function calls that are labeled inline with
the body of the called function. In function calls, functions are des-
ignated by their name, thus statically determining which function is
called (i.e., there are no function pointers). Also, only functions that
are defined before a call-site can be inlined at this site. Therefore,
(mutually) recursive functions cannot be fully inlined and recur-
sive inlining always terminates. After inlining, the definitions of
functions that are neither called nor exported are removed.
The inlining pass also introduces (copy) assignments to model
communication (arguments and returned values) between the caller
and the inlined callee. Thus, a renaming pass, akin to register al-
location, tries to eliminates these assignments. This is particularly
relevant when arguments and returned values include arrays: no
copy should be introduced by the compiler. This means that the
use of arrays must be linear: when an array is given as argument to
a function, it can no longer be used by the caller, unless the callee
returns it. As at most one copy of each array is live at the same
time, no copy is ever needed.
The unrolling pass fully unrolls for-loops, whose bounds must
always be statically determined. Notice that in case of nested loops,
the actual value of some of these bounds may only be known after
constant propagation. Therefore, this pass iterates a sequence of
unrolling, constant propagation, and dead-code elimination until a
fixed point is reached (or some maximal number of iterations is
reached). Note that unrolling may insert new assignments in the
program to set the value of the loop counter on each iteration. These
assignments are labeled with a special internal inline tag. The next
pass, inline assignment allocation, eliminates these assignments by
a form of register allocation.
The next pass performs sharing of stack variables. This pass opti-
mizes the memory layout of local variables: variables that are never
alive at the same time can be allocated to overlapping stack re-
gions. This is a form of register allocation. The constant propagation
optimization is run again after this pass.
The register array expansion pass translates arrays (which in
Jasmin are meant to represent a collection of registers or contiguous
memory addresses) into register variables or stack variables. This
requires that all accesses to the arrays are done through statically
determined indices.
The lowering pass translates high-level Jasmin instructions into
low-level, architecture-dependent instructions. Because Jasmin fea-
tures both low-level and high-level instructions, lowering does not
require to switch between intermediate representations; however,
it is expected that all high-level instructions are removed after
this pass. This pass is also responsible for translating conditional
expressions into the flag-based conditional instructions that are
featured by the target architecture. This is examplified by the case
of the AddCarry instruction: it takes three arguments (two machine
integers and a carry) and returns two values (one machine integer
and a carry). It is a high-level instruction, and therefore represents
all additions of machine integers, with or without carry. The x64
architecture instruction set features, in particular, the operators
ADD and ADC to perform additions. Only the second form receives
an explicit carry as argument. Both return one machine integer
and affect many boolean flags. The lowering pass thus replaces
the generic AddCarry with the adequate ADD or ADC machine
instruction, depending on the expression that is given as the carry
argument.
The register allocation pass renames variables to match the names
of the architecture registers. This pass does not attempt to spill
any variable to memory; it checks that there exists a mapping from
program variables that are labeled with the register storage modifier
to architecture registers, and infers such a mapping. The compiler
fails if no such mapping exists. Register allocation takes into account
the various architectural constraints: some instructions require
the output register to be the same as one of the arguments; some
instructions require that some operands are assigned to specific
registers. This last constraint includes the correct handling of flags.
The register allocation is performed by a simple, greedy algo-