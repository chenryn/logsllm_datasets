BeaconEye的原理
Cs的beacon在初始化时会使用 malloc 函数创建一个空间，将beacon的明文信息写入到其中。
这就是一个很明显的检测CobaltStrike的信息， malloc 函数创建的是堆内存，所以只需要遍历每个进程
的堆内存地址就可以了。
当然这一切都归功于很多前辈们对Cobalt Strike的逆向工程。
于是就有了beaconeye的项目https://github.com/CCob/BeaconEye
对于堆内存的查找还有很多注意事项，可以看参考中的文章。
BeaconEye的使用
BeaconEye是c#项目，我对它也不怎么熟悉，下面内容是我自己的方法。
项目-> 属性
设置好.net 框架，我设置的是4.6.1，因为还要装一个libyara的扩展，它好像只支持这个版本。
项目->管理NuGet程序包
搜索安装 Microsoft.O365.Security.Native.libyara.NET
编译的架构要选上，不能选择any cpu
之后就能生成了。
BeaconEye改造
默认的BeaconEye是不显示公钥的，凭我对c#一点点微弱的理解，要改这里
https://github.com/CCob/BeaconEye/blob/master/Config/ConfigItem.cs
可以猜到它typeof后面对应的类型应该就是这个字段对应的类型，而没看到 PublicKey 需要的类型，只
能看着别的类型自己加上了。
添加一个
再加上序号7
public class ConfigDataItem : ConfigItem
    {
        public override Type ExpectedType => Type.Bytes;
        public string Value { get; private set; }
        public ConfigDataItem(string name) : base(name)
        {
        }
        public override string ToString()
        {
            return $"{Value}";
        }
        public override void Parse(BinaryReader br, ProcessReader process)
        {
            Value = ReadNullString(process, process.Is64Bit ? br.ReadInt64() : 
br.ReadInt32());
        }
        string ReadNullString(ProcessReader process, long address)
        {
            MemoryStream ms = new MemoryStream();
            for(int i = 0; i < 256; i++)
            {
                var strChar = process.ReadMemory((ulong)address++, 1);
                ms.Write(strChar, 0, 1);
            }
            byte[] buffer = ms.ToArray();
            StringBuilder strBuider = new StringBuilder();
            for (int index = 0; index < buffer.Length; index++)
            {
                strBuider.Append(((int)buffer[index]).ToString("X2"));
            }
            return strBuider.ToString();
        }
    }
就能够输出公钥了。
后面还有一些针对metaheader的改造，但是太杂乱了，就直接在附件上源码了。
结合上线器
之后我想将beaconeye集成到cs上线器中，在网页上一键化生成，按理说我应该把beaconeye改装成输
出beacon.json文件的形式，但是对c#真不熟悉，只能按照它作者的想法来，不敢有大的改动。所以很
多地方都是直接打印到控制台。
然后通过解析控制台的内容，将它解析成CS上线器认识的数组（CS上线器只需要一个公钥，一个
metaheader信息即可上线）
def memory_dump():
    exec_filename = os.path.join(beaconeye_dir, "BeaconEye.exe")
    dd = {
        "PublicKey": "",
        "C2Server": "",
        "HttpGet_Metadata": {
            "ConstHeaders": [],
            "ConstParams": [],
            "Metadata": [],
            "Output": [],
            "SessionId": []
        }
    }
    p = subprocess.Popen(exec_filename, stdin=subprocess.PIPE, 
stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                         shell=False)
    stdout, stderr = p.communicate()
    r = str(stdout)
    if not ("PublicKey" in r and "HTTP_Get_Program" in r):
        raise Exception("未发现Cobalt Strike Beacon")
    is_found_get = False
    current = ""
    for item in stdout.splitlines():
        if item.startswith(b"\tPublicKey"):
            PublicKey = item.split(b"PublicKey:")[1].decode()
            dd["PublicKey"] = bytes.fromhex(PublicKey)
            continue
        if item.startswith(b"\tHTTP_Get_Program"):
            is_found_get = True
            continue
        if item.startswith(b"\tC2Server:"):
最后的在线版网址如下：https://i.hacking8.com/cobaltspam
参考
如何正确的 "手撕" Cobalt Strike
https://mp.weixin.qq.com/s/_gSPWVb1b-xuvhU6ynmw0Q
            dd["C2Server"] = item.split(b"\tC2Server:")[1].decode()
            continue
        if item.startswith(b"\tBeaconType:"):
            dd["BeaconType"] = [item.split(b"\tBeaconType:")[1].decode()]
            continue
        if item.startswith(b"\tPort:"):
            dd["Port"] = item.split(b"\tPort:")[1].decode()
            continue
        if not is_found_get:
            continue
        if not item.startswith(b"\t\t"):
            is_found_get = False
            continue
        x = item.decode().strip().split(" ", 1)
        if x[0] == 'ConstHeaders':
            current = "ConstHeaders"
            dd["HttpGet_Metadata"][current].append(x[1])
        elif x[0] == "ConstParams":
            current = "ConstParams"
            dd["HttpGet_Metadata"][current].append(x[1])
        elif x[0] == "Metadata:":
            current = "Metadata"
        else:
            x = item.decode().strip().split(" ", 1)
            if len(x) == 2:
                dd["HttpGet_Metadata"][current].append(
                    "{} \"{}\"".format(x[0], x[1])
                )
            else:
                dd["HttpGet_Metadata"][current].append(x[0])
    return dd