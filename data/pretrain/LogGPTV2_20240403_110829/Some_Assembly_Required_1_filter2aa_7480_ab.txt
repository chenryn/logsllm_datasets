      end
      local.get $l4
      i32.load8_u offset=11
      local.set $l36
      i32.const 255
      local.set $l37
      local.get $l36
      local.get $l37
      i32.and
      local.set $l38
      local.get $l4
      i32.load8_u offset=10
      local.set $l39
      i32.const 255
      local.set $l40
      local.get $l39
      local.get $l40
      i32.and
      local.set $l41
      local.get $l38
      local.get $l41
      i32.sub
      local.set $l42
      local.get $l4
      local.get $l42
      i32.store offset=28
    end
    local.get $l4
    i32.load offset=28
    local.set $l43
    local.get $l43
    return)
  (func $check_flag (type $t2) (result i32)
    (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 i32) (local $l4 i32) (local $l5 i32) (local $l6 i32) (local $l7 i32) (local $l8 i32) (local $l9 i32) (local $l10 i32)
    i32.const 0
    local.set $l0
    i32.const 1072
    local.set $l1
    i32.const 1024
    local.set $l2
    local.get $l2
    local.get $l1
    call $strcmp
    local.set $l3
    local.get $l3
    local.set $l4
    local.get $l0
    local.set $l5
    local.get $l4
    local.get $l5
    i32.ne
    local.set $l6
    i32.const -1
    local.set $l7
    local.get $l6
    local.get $l7
    i32.xor
    local.set $l8
    i32.const 1
    local.set $l9
    local.get $l8
    local.get $l9
    i32.and
    local.set $l10
    local.get $l10
    return)
  (func $copy_char (type $t3) (param $p0 i32) (param $p1 i32)
    (local $l2 i32) (local $l3 i32) (local $l4 i32) (local $l5 i32) (local $l6 i32)
    global.get $g0
    local.set $l2
    i32.const 16
    local.set $l3
    local.get $l2
    local.get $l3
    i32.sub
    local.set $l4
    local.get $l4
    local.get $p0
    i32.store offset=12
    local.get $l4
    local.get $p1
    i32.store offset=8
    local.get $l4
    i32.load offset=12
    local.set $l5
    local.get $l4
    i32.load offset=8
    local.set $l6
    local.get $l6
    local.get $l5
    i32.store8 offset=1072
    return)
  (table $T0 1 1 funcref)
  (memory $memory 2)
  (global $g0 (mut i32) (i32.const 66864))
  (global $input i32 (i32.const 1072))
  (global $__dso_handle i32 (i32.const 1024))
  (global $__data_end i32 (i32.const 1328))
  (global $__global_base i32 (i32.const 1024))
  (global $__heap_base i32 (i32.const 66864))
  (global $__memory_base i32 (i32.const 0))
  (global $__table_base i32 (i32.const 1))
  (export "memory" (memory 0))
  (export "__wasm_call_ctors" (func $__wasm_call_ctors))
  (export "strcmp" (func $strcmp))
  (export "check_flag" (func $check_flag))
  (export "input" (global 1))
  (export "copy_char" (func $copy_char))
  (export "__dso_handle" (global 2))
  (export "__data_end" (global 3))
  (export "__global_base" (global 4))
  (export "__heap_base" (global 5))
  (export "__memory_base" (global 6))
  (export "__table_base" (global 7))
  (data $d0 (i32.const 1024) "picoCTF{8857462f9e30faae4d037e5e25fee1ce}\00\00"))
```
For starters, we can see the flag at the bottom of the file. Before that, we have three function implementations: `strcmp` which isn't interesting to reverse, `check_flag` and `copy_char`. Since this is the simplest challenge of the `Some Assembly Required` series, let's use it to get acquainted with `wasm`, even though we already have the flag.
Web Assembly can be thought of as a *stack machine*. It's basically composed of instructions that push a value to the stack and/or pop it from the stack to a different location.
For example, a `local.get` instruction pushes a value from a local variable to the stack, a `local.set` instruction pops a value from the stack and pushes it to a local, and an instruction such as `i32.sub` performs an operation on values popped from the stack and pushes the result to the stack. However, following the execution of such a syntax can be somewhat exhausting. We can try to compile the code to C, but some might say the result in this case is even worse:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Some_Assembly_Required_1]
└─$ ~/utils/web/wabt/build/wasm2c  script.wasm -o script.c
```
An example function:
```c
static void w2c_copy_char(u32 w2c_p0, u32 w2c_p1) {
  u32 w2c_l2 = 0, w2c_l3 = 0, w2c_l4 = 0, w2c_l5 = 0, w2c_l6 = 0;
  FUNC_PROLOGUE;
  u32 w2c_i0, w2c_i1;
  w2c_i0 = w2c_g0;
  w2c_l2 = w2c_i0;
  w2c_i0 = 16u;
  w2c_l3 = w2c_i0;
  w2c_i0 = w2c_l2;
  w2c_i1 = w2c_l3;
  w2c_i0 -= w2c_i1;
  w2c_l4 = w2c_i0;
  w2c_i0 = w2c_l4;
  w2c_i1 = w2c_p0;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 12, w2c_i1);
  w2c_i0 = w2c_l4;
  w2c_i1 = w2c_p1;
  i32_store((&w2c_memory), (u64)(w2c_i0) + 8, w2c_i1);
  w2c_i0 = w2c_l4;
  w2c_i0 = i32_load((&w2c_memory), (u64)(w2c_i0) + 12u);
  w2c_l5 = w2c_i0;
  w2c_i0 = w2c_l4;
  w2c_i0 = i32_load((&w2c_memory), (u64)(w2c_i0) + 8u);
  w2c_l6 = w2c_i0;
  w2c_i0 = w2c_l6;
  w2c_i1 = w2c_l5;
  i32_store8((&w2c_memory), (u64)(w2c_i0) + 1072, w2c_i1);
  goto w2c_Bfunc;
  w2c_Bfunc:;
  FUNC_EPILOGUE;
}
```
The best option seems to be de-compiling to pseudo-code:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Some_Assembly_Required_1]
└─$ ~/utils/web/wabt/build/wasm-decompile script.wasm -o script.dcmp
```
The result:
```
export memory memory(initial: 2, max: 0);
global g_a:int = 66864;
export global input:int = 1072;
export global dso_handle:int = 1024;
export global data_end:int = 1328;
export global global_base:int = 1024;
export global heap_base:int = 66864;
export global memory_base:int = 0;
export global table_base:int = 1;
table T_a:funcref(min: 1, max: 1);
data d_picoCTF8857462f9e30faae4d037(offset: 1024) = 
"picoCTF{8857462f9e30faae4d037e5e25fee1ce}\00\00";
export function wasm_call_ctors() {
}
export function strcmp(a:int, b:int):int {
  var c:int = g_a;
  var d:int = 32;
  var e:int = c - d;
  e[6]:int = a;
  e[5]:int = b;
  var f:int = e[6]:int;
  e[4]:int = f;
  var g:int = e[5]:int;
  e[3]:int = g;
  loop L_b {
    var h:ubyte_ptr = e[4]:int;
    var i:int = 1;
    var j:int = h + i;
    e[4]:int = j;
    var k:int = h[0];
    e[11]:byte = k;
    var l:ubyte_ptr = e[3]:int;
    var m:int = 1;
    var n:int = l + m;
    e[3]:int = n;
    var o:int = l[0];
    e[10]:byte = o;
    var p:int = e[11]:ubyte;
    var q:int = 255;
    var r:int = p & q;
    if (r) goto B_c;
    var s:int = e[11]:ubyte;
    var t:int = 255;
    var u:int = s & t;
    var v:int = e[10]:ubyte;
    var w:int = 255;
    var x:int = v & w;
    var y:int = u - x;
    e[7]:int = y;
    goto B_a;
    label B_c:
    var z:int = e[11]:ubyte;
    var aa:int = 255;
    var ba:int = z & aa;
    var ca:int = e[10]:ubyte;
    var da:int = 255;
    var ea:int = ca & da;
    var fa:int = ba;
    var ga:int = ea;
    var ha:int = fa == ga;
    var ia:int = 1;
    var ja:int = ha & ia;
    if (ja) continue L_b;
  }
  var ka:int = e[11]:ubyte;
  var la:int = 255;
  var ma:int = ka & la;
  var na:int = e[10]:ubyte;
  var oa:int = 255;
  var pa:int = na & oa;
  var qa:int = ma - pa;
  e[7]:int = qa;
  label B_a:
  var ra:int = e[7]:int;
  return ra;
}
export function check_flag():int {
  var a:int = 0;
  var b:int = 1072;
  var c:int = 1024;
  var d:int = strcmp(c, b);
  var e:int = d;
  var f:int = a;
  var g:int = e != f;
  var h:int = -1;
  var i:int = g ^ h;
  var j:int = 1;
  var k:int = i & j;
  return k;
}
function copy(a:int, b:int) {
  var c:int = g_a;
  var d:int = 16;
  var e:int_ptr = c - d;
  e[3] = a;
  e[2] = b;
  var f:int = e[3];
  var g:byte_ptr = e[2];
  g[1072] = f;
}
```
Now, if we try to get a high-level understanding of what's happening in `copy` and `check_flag`, we can see that `copy` takes the first parameter `a` (which according to the Javascript source is a character from the flag) and saves it at offset `1072+b` where `b` is the index of the character in the original user input. So basically it's just storing the flag, starting at offset `1072`, character after character.
`check_flag` calls `strcmp` between memory location `1072` (where we saved the user input) and memory location `1024` (where the flag is saved). It then performs some weird manipulations on the result (which can be compressed to `(((strcmp_res != 0) ^ (-1)) & 1)`). This seems to be a complicated way to say that if `strcmp` returned `0` (i.e. the strings were equal) then the return value will be `1`, and otherwise it will be `0`. So basically it just reflects if the user input is equal to the stored flag.
The flag: `picoCTF{8857462f9e30faae4d037e5e25fee1ce}`