# User-Level Secure Deletion on Log-Structured File Systems

## Authors
Joel Reardon, Claudio Marforio, Srdjan Capkun, and David A. Basin

## 5.1 Introduction
This chapter addresses the challenge of secure data deletion on log-structured file systems, with a specific focus on YAFFS, a file system commonly used in Android smartphones that employ raw flash memory for internal storage. Our analysis reveals that log-structured file systems generally do not provide temporal guarantees for data deletion; the duration that discarded data persists is proportional to the storage medium's size and is influenced by the device's writing behavior. Furthermore, if the storage medium is not used after data is marked for deletion, the discarded data remains indefinitely.

We propose two user-level solutions for secure deletion in log-structured file systems: **purging** and **ballooning**. Purging ensures time-bounded deletion of all previously discarded data by filling the storage medium, while ballooning continuously reduces the expected persistence time of discarded data by occupying a fraction of the storage capacity. We combine these solutions into a hybrid approach, which guarantees periodic and prompt secure deletion regardless of the storage medium's size, while maintaining acceptable wear on the memory.

These solutions require only user-level permissions, enabling users to securely delete data even if the feature is not supported by the kernel or hardware, over which they typically have no control. This allows mobile phone users to achieve secure deletion without violating warranties or requiring advanced technical knowledge to modify their firmware.

However, user-level solutions are limited by their reduced interface to the storage medium, making them less efficient than solutions with deeper integration. In the next chapter, we will explore a more integrated solution that achieves greater efficiency.

We implemented these solutions on an Android smartphone (Nexus One) and demonstrated that they do not significantly reduce the longevity of the flash memory or the device's battery life. Simulations on phones with larger storage capacities show that while purging alone is costly in terms of time and flash memory wear, combining it with ballooning makes it feasible and effective. Ballooning provides a trade-off between deletion latency and flash memory wear, substantially reducing deletion latency on large, sparsely occupied storage media.

## 5.2 System and Adversarial Model
The user continuously stores, reads, and discards sensitive data on a mobile phone. We assume the user has only user-level access to the mobile phone, meaning they cannot modify the operating system or hardware. The solution must interact with the file system interface to achieve secure deletion.

We also assume the presence of an unpredictable, multiple-access coercive adversary who can compromise the user's storage medium. Our adversarial model is a slight modification of the main model developed in Chapter 3, in that it is not computationally bounded.

## 5.3 YAFFS
**Yet Another Flash File System (YAFFS)** is a log-structured file system designed specifically for flash memory, notably used in some Android mobile phones for internal storage. YAFFS allocates memory by selecting an unused erase block and sequentially allocating numbered pages (referred to as chunks). An allocated erase block is freshly erased and devoid of any data. YAFFS searches for empty erase blocks sequentially by their number, wrapping cyclically when necessary, starting from the most recently allocated erase block.

YAFFS performs compaction (garbage collection) to reclaim wasted space on partially full erase blocks. During compaction, valid (non-discarded) pages are copied to the end of the log, and the source erase block is then erased. If there are no partially full erase blocks to compact, YAFFS reports the file system as full and fails to allocate an erase block.

Compaction in YAFFS is either initiated by a system maintenance thread or occurs during write operations. Usually, a few pages are copied at a time, spreading the work over many write operations. If the file system has too few free erase blocks, more aggressive compaction is performed, targeting erase blocks with any amount of discarded space.

YAFFS selects erase blocks for compaction using a greedy strategy based on the ratio of discarded pages, but it only searches within a small moving range of erase blocks with a minimum threshold for discarded pages. This results in a strong cyclic trend in erase block allocations. When low on free space, YAFFS selects the erase block with the most wasted space by examining all the storage medium's erase blocks.

There are two major versions of YAFFS: YAFFS1 and YAFFS2. YAFFS1 marks deleted files by setting a special flag in the file header, while YAFFS2 writes a new file header instead. We used YAFFS2 for our experiments, and henceforth refer to it simply as YAFFS.

## 5.4 Data Deletion in Existing Log-Structured File Systems
In this section, we investigate data persistence on log-structured file systems by analyzing the internal memory of a Nexus One running Android/YAFFS and simulating larger storage media. We instrumented the file system at the kernel level to log erase block allocation information, providing an upper bound on deletion latency. Allocating an erase block implies it was previously compacted and erased, ensuring that all discarded data on that block is securely deleted.

### 5.4.1 Instrumented YAFFS
We built a modified version of the YAFFS Linux kernel module to log data about the writing behavior of an Android phone. We logged the time and number for every erase block allocation and erasure, allowing us to compute the deletion latency in our simulations.

We used the instrumented phone daily for 670 hours (approximately 27.9 days), recording 20,345 erase block allocations initiated by 73 different writers. The median time between erase block reallocations was 44.5 hours, indicating that the median deletion latency is upper-bounded by this value.

### 5.4.2 Simulating Larger Storage Media
Log-structured file systems favor allocating empty erase blocks before compacting partially empty ones. We hypothesized that the erase block reallocation period—and consequently the deletion latency—is highly dependent on the file system's size. To test this, we wrote a discrete event simulator to experiment with the writing behavior of an Android phone on simulated YAFFS storage media of various sizes.

#### Experimental Procedure
To simulate different flash storage medium sizes, we used a directory on our computer to simulate accessing flash memory through a flash file system. We used the collected statistics from our instrumented phone to determine the writing behavior for our simulator. We logged every page written to the device for a week and computed the following characteristics of the files:
- The file's lifetime.
- The distribution over the period of time between opening a file for writing.
- The distribution over the number of pages written to a file each time it is opened.
- The distribution over the file's pages where the writes occur.

Additionally, we implemented a pattern writer that periodically writes a one-page pattern, waits until a new erase block is allocated, and then deletes the pattern. This helps determine the deletion latency for data written at a particular moment in time, representing the writing of sensitive data that is later discarded.

### Results
[Insert results and figures here, such as Figure 5.1, which shows the timeline of data items stored on two erase blocks and the corresponding deletion latencies.]

---

This optimized text provides a clearer, more professional, and coherent presentation of the chapter's content.