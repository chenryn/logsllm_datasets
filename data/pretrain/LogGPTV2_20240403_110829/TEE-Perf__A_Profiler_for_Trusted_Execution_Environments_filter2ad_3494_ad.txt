Certainly! Here is a more polished and coherent version of the text:

---

Some applications, such as storage systems, struggle to adopt Trusted Execution Environment (TEE) technology due to overhead. However, recent advancements in high-performance direct I/O libraries, such as Intel’s DPDK [4] and SPDK [18], offer an opportunity to eliminate most system calls in the critical path, making high-performance storage [19] and network [31] applications feasible for TEEs.

To demonstrate that TEE-PERF can optimize larger applications and to showcase its potential, we ported SPDK to Intel SGX. We used the performance benchmark tool included with SPDK to measure the performance of SPDK without further optimization inside the SGX enclave. The benchmark we ran was a random read-write test with 80% reads. We found that the naively ported version suffered significantly from running within the enclave.

Figure 5: Flame Graph of RocksDB measured by TEE-PERF inside the enclave. While native SPDK, running on the host system, achieved 223,808 IOPS and a throughput of 874 MiB for 4 KiB blocks, the unoptimized implementation inside the enclave only managed 15,821 IOPS and a throughput of 61.8 MiB for the same block size.

Figure 6 (top Flame Graph) shows the Flame Graph for the unoptimized version of SPDK created using TEE-PERF. The Flame Graph indicates that the performance tool spends nearly 72% of its time in a system call to get the current process ID (getpid). Additionally, 20% of the time is spent in retrieving the current timestamp (rdtsc).

After identifying these bottlenecks with TEE-PERF, we implemented a caching algorithm for the getpid system call, returning the result from the first call for subsequent requests. While caching the process ID is straightforward, the same approach is not suitable for timestamps. We implemented a caching mechanism with periodic corrections, which dramatically reduced the time spent in retrieving the timestamp.

Figure 6 (bottom Flame Graph) shows the optimized call stacks for SPDK plotted using TEE-PERF. The optimization reduced the time spent in these two methods, allowing more time to be allocated to reading and writing in the benchmark. With these improvements, the performance of SPDK inside the enclave improved to native levels, achieving 232,736 IOPS and 909 MiB per second in the same setup. This represents a 14.7× improvement compared to the naive unoptimized implementation. Our TEE-PERF tool enabled us to easily detect and identify the bottlenecks of SPDK inside the SGX enclave, and after identifying the bottlenecks, we could implement the necessary improvements, which do not suffer from the same performance penalties associated with running inside an SGX enclave.

### V. RELATED WORK

To our knowledge, TEE-PERF is the first architecture and platform-agnostic performance measurement tool for TEEs. We developed this tool in the context of our Speicher [11] project, a secure LSM-based storage system. As shown in the evaluation section, Linux perf [6] provides similar insights by instrumenting CPU hardware registers but does not offer a detailed log with the time spent on each function. Additionally, perf is restricted to the Linux environment and requires the availability of hardware counters.

Intel's own VTune Amplifier [5], a proprietary commercial low-level analysis tool, offers various features including stack sampling and thread profiling on SGX enclaves. It provides the time spent on each subroutine down to the instruction level but relies on special hardware features and is platform-dependent. VTune Amplifier is limited to Intel CPUs. sgx-gdb [17] is a debugger extending GDB [2] for enclaves, allowing stack sampling and profiling of applications running in an SGX enclave. However, sgx-gdb is restricted to Intel SGX and Linux.

SGX-Perf [34] is a recently proposed profiler for Intel SGX, focusing on profiling enclave enter and exit events to analyze the cost of context switches in SGX enclaves. Unlike TEE-PERF, SGX-Perf does not provide method-level profiling and is specifically designed for Intel SGX.

Gprof [3], an extension of the original Unix prof, offers performance analysis for Unix applications by sampling and instrumenting code at compile time. It provides a flat profile of total execution time, broken down by function, and a call graph showing function invocations. However, it lacks cross-platform support, and Flamegraphs are more comprehensible than call graphs.

LIKWID [32] is a low-level lightweight profiling suite for the x86 architecture, tightly coupled with the x86 architecture as it relies on hardware counters for performance metrics.

MemProf [21] and Memphis [22] provide profiling information for remote memory accesses of memory objects on a NUMA architecture, essential for performing NUMA-specific optimizations for remote memory access.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy and detail of the original text.