    }
如果我们实例化该类的话，应该是：
    $class = new \think\cache\driver\File();
系统会自动加载该类对应路径的类文件，其所在的路径是 thinkphp/library/think/cache/driver/File.php。
可是为什么路径是在thinkphp/library/think下呢？这就要涉及要另一个概念—根命名空间。
##### 4.1.1 根命名空间
根命名空间是一个关键的概念，以上面的\think\cache\driver\File类为例，think就是一个根命名空间，其对应的初始命名空间目录就是系统的类库目录（thinkphp/library/think），我们可以简单的理解一个根命名空间对应了一个类库包。
系统内置的几个根命名空间（类库包）如下：
#### 4.2 URL访问
在没有定义路由的情况下典型的URL访问规则（PATHINFO模式）是：
http://serverName/index.php（或者其它应用入口文件）/模块/控制器/操作/[参数名/参数值...]
如果不支持PATHINFO的服务器可以使用兼容模式访问如下
http://serverName/index.php（或者其它应用入口文件）?s=/模块/控制器/操作/[参数名/参数值...]
什么是pathinfo模式?
我们都知道一般正常的访问应该是
http://serverName/index.php?m=module&c=controller&a=action&var1=vaule1&var2=vaule2
而pathinfo模式是这样的
http://serverName/index.php/module/controller/action/var1/vaule1/var2/value2
在php中有一个全局变量`$_SERVER['PATH_INFO']`，我们可以通过它来获取index.php后面的内容。
什么是`$_SERVER['PATH_INFO']`?
官方是这样定义它的：包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息。
什么意思呢？简单来讲就是获得访问的文件和查询?之间的内容。
强调一点，在通过`$_SERVER['PATH_INFO']`获取值时，系统会把’\'自动转换为’/'（这个特性我在Mac
Os(MAMP)、Windows(phpstudy)、Linux(php+apache)环境及php5.x、7.x中进行了测试，都会自动转换，所以系统及版本之间应该不会有所差异）。
下面再分别介绍下入口文件、模块、控制器、操作、参数名/参数值。
1.入口文件
文件地址：public\index.php
作用：负责处理请求
2.模块（以前台为例）
模块地址：application\index
作用：网站前台的相关部分
3.控制器
控制器目录：application\index\controller
作用：书写业务逻辑
  1. 操作（方法）
在控制器中定义的方法
  1. 参数名/参数值
方法中的参数及参数值
例如我们要访问index模块下的Test.php控制器文件中的hello()方法。
那么可以输入http://serverName/index.php/index(模块)/Test(控制器)/hello(方法)/name(参数名)/world(参数值)
这样就访问到指定文件了。
另外再讲一下Thinkphp的几种传参方式及差别。
PATHINFO: index.php/index/Test/hello/name/world 只能以这种方式传参。
兼容模式:index.php?s=index/Test/hello/name/world
index.php?s=index/Test/hello&name=world
当我们有两个变量`$a`、`$b`时，在兼容模式下还可以将两者结合传参：
index.php?s=index/Test/hello/a/1&b=2
这时，我们知道了URL访问规则，当然也要了解下程序是怎样对URL解析处理，最后将结果输出到页面上的。
#### 4.3 URL路由解析动态调试分析
URL路由解析及页面输出工作可以分为5部分。
  1. 路由定义：完成路由规则的定义和参数设置
  2. 路由检测：检查当前的URL请求是否有匹配的路由
  3. 路由解析：解析当前路由实际对应的操作。
  4. 路由调度：执行路由解析的结果调度。
  5. 响应输出及应用结束：将路由调度的结果数据输出至页面并结束程序运行。
我们通过动态调试来分析，这样能清楚明了的看到程序处理的整个流程，由于在Thinkphp中，配置不同其运行流程也会不同，所以我们采用默认配置来进行分析，并且由于在程序运行过程中会出现很多与之无关的流程，我也会将其略过。
##### 4.3.1 路由定义
通过配置route目录下的文件对路由进行定义，这里我们采取默认的路由定义，就是不做任何路由映射。
##### 4.3.2 路由检测
这部分内容主要是对当前的URL请求进行路由匹配。在路由匹配前先会获取URL中的pathinfo，然后再进行匹配，但如果没有定义路由，则会把当前pathinfo当作默认路由。
首先我们设置好IDE环境，并在路由检测功能处下断点。
然后我们请求上面提到的Test.php文件。
http://127.0.0.1/tp5.1.20/public/index.php/index/test/hello/name/world
我这里是以pathinfo模式请求的，但是其实以不同的方式在请求时，程序处理过程是有稍稍不同的，主要是在获取参数时不同。在后面的分析中，我会进行说明。
F7跟进routeCheck()方法
route_check_cache路由缓存默认是不开启的。
然后我们进入path()方法
继续跟进pathinfo()方法
这里会根据不同的请求方式获取当前URL的pathinfo信息，因为我们的请求方式是pathinfo,所以会调用`$this->server(‘PATH_INFO’)`去获取，获取之后会使用ltrim()函数对`$pathinfo`进行处理去掉左侧的’/’符号。Ps:如果以兼容模式请求，则会用`$_GET`方法获取。
然后返回赋值给`$path`并将该值带入check()方法对URL路由进行检测
这里主要是对我们定义的路由规则进行匹配，但是我们是以默认配置来运行程序的，没有定义路由规则，所以跳过中间对于路由检测匹配的过程，直接来看默认路由解析过程，使用默认路由对其进行解析。
##### 4.3.3 路由解析
接下来将会对路由地址进行了解析分割、验证、格式处理及赋值进而获取到相应的模块、控制器、操作名。
new UrlDispatch()
对UrlDispatch（实际上是think\route\dispatch\Url这个类）实例化，因为Url没有构造函数，所以会直接跳到它的父类Dispatch的构造函数，把一些信息传递（包括路由）给Url类对象，这么做的目的是为了后面在调用Url类中方法时方便调用其值。
赋值完成后回到routeCheck()方法，将实例化后的Url对象赋给`$dispatch`并return返回。
返回后会调用Url类中的init()方法，将`$dispatch`对象中的得到`$this->dispatch(路由)`传入parseUrl()方法中，开始解析URL路由地址。
跟进parseUrl()方法
这里首先会进入parseUrlPath()方法，将路由进行解析分割。
使用”/”进行分割，拿到 [模块/控制器/操作/参数/参数值]。
紧接着使用array_shift()函数挨个从`$path`数组中取值对模块、控制器、操作、参数/参数值进行赋值。
接着将参数/参数值保存在了Request类中的Route变量中，并进行路由封装将赋值后的`$module`、`$controller`、`$action`存到route数组中，然后将`$route`返回赋值给`$result`变量。
`new Module($this->request, $this->rule, $result)`，实例化Module类。
在Module类中也没有构造方法，会直接调用Dispatch父类的构造方法。
然后将传入的值都赋值给Module类对象本身`$this`。此时，封装好的路由`$result`赋值给了`$this->dispatch`，这么做的目的同样是为了后面在调用Module类中方法时方便调用其值。
实例化赋值后会调用Module类中的init()方法，对封装后的路由(模块、控制器、操作)进行验证及格式处理。
`$result =
$this->dispatch`，首先将封装好的路由`$this->dispatch`数组赋给`$result`，接着会从`$result`数组中获取到了模块`$module`的值并对模块进行大小写转换和html标签处理，接下来会对模块值进行检测是否合规，若不合规，则会直接HttpException报错并结束程序运行。检测合格之后，会再从`$result`中获取控制器、操作名并处理，同时会将处理后值再次赋值给`$this`(Module类对象)去替换之前的值。
Ps：从`$result`中获取值时，程序采用了三元运算符进行判断，如果相关值为空会一律采用默认的值index。这就是为什么我们输入http://127.0.0.1/tp5.1.20/public/index.php在不指定模块、控制器、操作值时会跳到程序默认的index模块的index控制器的index操作中去。
此时调度信息(模块、控制器、操作)都已经保存至Module类对象中，在之后的路由调度工作中会从中直接取出来用。
然后返回Module类对象`$this`，回到最开始的App类，赋值给`$dispatch`。
至此，路由解析工作结束，到此我们获得了模块、控制器、操作，这些值将用于接下来的路由调度。
**接下来在路由调度前，需要另外说明一些东西**
：路由解析完成后，如果debug配置为True，则会对路由和请求信息进行记录，这里有个很重要的点param()方法, 该方法的作用是获取变量参数。
在这里，在确定了请求方式(GET)后，会将请求的参数进行合并，分别从`$_GET`、`$_POST`(这里为空)和Request类的route变量中进行获取。然后存入Request类的param变量中，接着会对其进行过滤，但是由于没有指定过滤器，所以这里并不会进行过滤操作。
Ps：这里解释下为什么要分别从`$_GET`中和Request类的route变量中进行获取合并。上面我们说过传参有三种方法。
  1. index/Test/hello/name/world
  2. index/Test/hello&name=world
  3. index/Test/hello/a/1&b=2