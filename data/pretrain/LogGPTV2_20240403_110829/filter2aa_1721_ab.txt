RC4 or blowfish but we don’t need a strong encryption anyway, AV products is
not going to try to decrypt the shellcode, making it unreadable and undetectable
for static string analysis is enough, also using xor makes decryption process
much faster and avoiding the encryption libraries in code will reduce the size a
lot.
This is the same meterpreter code XOR ciphered with key.
Because of we are writing a new piece of malware, our malware’s hash signature
will not be known by the anti virus products, so we don’t need to worry about
signature based detection, we will encrypt our shellcode and obfuscate our anti
detection/reverse engineering and decryption functions also these will be enough
for bypassing static/heuristic analysis phase, there is only one more phase we
need to bypass and it is the dynamic analysis phase, most important part is the
success of the “AV detect” function, before starting to write the function we need
to understand how heuristic engines of AV products works.
INVICTUS
10
Security
7. Heuristic Engines
Heuristic engines are basically statistical and rule based analyze mechanisms.
Their main purpose is detecting new generation(previously unknown) viruses by
categorizing
and
giving
threat/risk
grades
to
code
fragments
according
to
predefined criterias, even when a simple hello world program scanned by AV
products, heuristic engine decides on a threat/risk score if the score is higher
then thresholds then the file gets marked as malicious. Heuristic engines are the
most advanced part of AV products they use significant amount of rules and
criterias, since no anti virus company releases blueprints or documentation about
their heuristic engines all known selective criterias about their threat/risk grading
policy are found with trial and error.
Some of the known rules about threat grading;
- Decryption loop detected
- Reads active computer name
- Reads the cryptographic machine GUID
- Contacts random domain names
- Reads the windows installation date
- Drops executable files
- Found potential IP address in binary memory
- Modifies proxy settings
- Installs hooks/patches the running process
- Injects into explorer
- Injects into remote process
- Queries process information
- Sets the process error mode to suppress error box
- Unusual entropy
- Possibly checks for the presence of antivirus engine
- Monitors specific registry key for changes
- Contains ability to elevate privileges
- Modifies software policy settings
- Reads the system/video BIOS version
- Endpoint in PE header is within an uncommon section
- Creates guarded memory regions
- Spawns a lot of processes
- Tries to sleep for a long time
- Unusual sections
- Reads windows product id
- Contains decryption loop
- Contains ability to start/interact device drivers
- Contains ability to block user input
When writing our AV detect and Decrypt Shellcode functions we have to be
careful about all this rules.
8. Decrypt Shellcode
Obfuscating the decryption mechanism is vital, most of AV heuristic engines are
able to detect decryption loops inside PE files, after the huge increase on
ransomware cases even some heuristic engines are build mainly just for finding
decryption routines, after they detect a decryption routine, some scanners waits
until ECX register to be “0” most of the time that indicates the end of loop, after
INVICTUS
11
Security
they reach the end of the decryption loop they will re analyze the decrypted
content of the file.
This will be the “Decrypt Shellcode” function
It is a for loop that makes logical xor operation between a shellcode byte and a
key byte, below and above assembly blocks literally does noting, they cover the
logical XOR operation with random bytes and jumps over them. Because of we
are not using any advanced decryption mechanism this will be enough for
obfuscating “Decrypt Shellcode” function.
9. Dynamic Analysis Detection
Also while writing the sandbox detection mechanism we need to obfuscate our
methods, if the heuristic engine detects any sign of anti reverse engineering
methods it would be very bad for malware’s threat score.
INVICTUS
12
Security
9.1
Is Debugger Present:
Our first AV detection mechanism will be checking for debugger in our process
There is a windows API function for this operation it ”Determines whether the
calling process is being debugged by a user-mode debugger.” but we will not use
it because of most AV products are monitoring the win API calling statements,
they probably detect and treat this function as a anti reverse engineering method.
Instead of using the win API function we will go and look at the “BeingDebuged”
byte at PEB block.
With some inline assembly this piece of code points a pointer to the
BeingDebuged byte in PEB block, if debugger present it will check again until a
overflow occurs in stack, when an overflow occurs the stack canaries will trigger
an exception and process will be closed, this is the shortest way to exit the
program. Manually checking the BeingDebuged byte will bypass good amount of
AV product but still some AV products have taken measures about this issue so
we need to obfuscate the code for avoiding the static string analysis.
INVICTUS
13
Security
Adding exact jump instruction after all operation will not effect our purpose but
adding garbage bytes between jumps will obfuscate the code and avoid static
string filters.
9.2
Load Fake Library
In this method we will try to load a non existing dll on runtime. Normally when
we try to load a non existing dll, HISTENCE returns NULL, but some dynamic
analysis mechanisms in AV products allows such cases in order to further
investigate the execution flow of the program.
9.3
Get Tick Count
In this method we will be exploiting the time deadline of AV products. In most
cases AV scanners are being designed for end user, they need to be user friendly
and suitable for daily usage this means they can’t spend too much time for
scanning files they need to scan files as quickly as possible. At first malware
developers used “sleep()” function for waiting until the scan complete, but
nowadays this trick almost never works, every AV product skips the sleep
function when they encountered one. We will use this against them , below code
INVICTUS
14
Security
uses a win API function called “GetThickCount()” this function “Retrieves the
number of milliseconds that have elapsed since the system was started, up to
49.7 days.” we will use it to get the time passed since OS booted, then try to
sleep 1 second, after sleep function we will check weather sleep function is
skipped or not by comparing the two GetTickCout() value.
9.4
Number Of Cores
This method will simply check the number of processor cores on the system.
Since AV products can’t afford allocating too much resource from host computer
we can check the core number in order to determine are we in a sandbox or not.
Even some AV products does not support multi core processing so they shouldn’t
be able to reserve more than 1 processor core to their sandbox environment.
9.5
Huge Memory Allocations
This method also exploits the time deadline on each AV scan, we simply allocate
nearly 100 Mb of memory then we will fill it with NULL bytes, at the end we will
free it.
When the programs memory starts to grow on runtime eventually AV scanners
will end the scan for the sake of not to spend too much time on a file, this
method can be used multiple times. This is a very primitive and old technique
but it still bypasses good amount of scanners.
INVICTUS
15
Security
9.6
Trap Flag Manipulation
The trap flag is used for tracing the program. If this flag is set every instruction
will raise “SINGLE_STEP” exception. Trap flag can be manipulated in order thwart
tracers. We can manipulate the trap flag with below code,
9.7
Mutex Triggered WinExec
This method is very promising because of its simplicity, we create a condition for
checking whether a certain mutex object already exists on the system or not.
If “CreateMutex” function does not return already exists error we execute the
malware binary again, since most of the AV products don’t let programs which
are dynamically analyzing to start new processes or access the files outside the
AV sandbox, when the already exist error occurs execution of the decrypt
function may start. There are much more creative ways of mutex usage in anti-
detection.
INVICTUS
16
Security
10.
Proper Ways To Execute Shellcodes
Starting with Windows Vista, Microsoft introduced Data Execution Prevention or
DEP, a security feature that can help prevent damage to your computer by
monitoring
programs
from
time
to
time.
Monitoring
ensures
that
running
program uses system memory efficiently. If there is any instance of a program
on your computer using memory incorrectly, DEP notices it, closes the program
and notifies you. That means you can’t just put some bytes to an char array and
execute it, you need to allocate a memory region with read, write and execute
flags using windows API functions.
Microsoft has several memory manipulation API functions for reserving memory
pages, most of the common malware in the field uses the “VirtualAlloc” function
for reserving memory pages, as you can guess common usage of functions helps
AV products with defining detection rules, using other memory manipulation
functions will also do the trick and they may attract less attention.
I
will
list
several
shellcode
execution
methods
with
different
memory
manipulation API function,
10.1 HeapCreate/HeapAlloc:
Windows also allows creating RWE heap regions.
10.2 LoadLibrary/GetProcAddress:
LoadLibrary and GetProcAddress WINAPI function combination allows us to use
all other win api functions, with this usage there will be no direct call to the
memory manipulation function and malware will probably be less attractive.
10.3 GetModuleHandle/GetProcAddress:
This method does not even use the LoadLibrary function it takes advantage of
already loaded kernel32.dll, GetModuleHandle function retrieves the module
INVICTUS
17
Security
handle from an already loaded dll, this method is possibly one of the most silent
way to execute shellcode.
11.
Multi Threading
It is always harder to reverse engineer multi threaded PE files, it is also
challenging for AV products, multi threading approach can be used with all
execution methods above so instead of just pointing a function pointer to
shellcode and executing it creating a new thread will complicate things for AV
scanners plus it allow us to keep executing the “AV Detect” function while
executing the shellcode at same time.
Above code executes the shellcode with creating a new thread, just after creating
the thread there is a infinite while loop that is executing bypass av function, this
approach will almost double the effect of our bypass av function, bypass AV
function will be keep checking for sandbox and dynamic analysis signs while
shellcode runs, this is also vital for bypassing some advanced heuristic engines
that waits until the execution of the shellcode.
INVICTUS
18
Security
12.
Conclusion
Towards the end there are few more thinks that needs to be covered about
compiling the malware, when compiling the source, safeguards like stack savers
need to be on and striping the symbols is vital for hardening the reverse
engineering process of our malware and reducing the size, compiling on visual
studio is recommended because of the inline assembly syntax that used in this
paper.
When all of this methods combined, generated malware is able to bypass 35
most advanced AV product,
POC Video:https://pentest.blog/art-of-anti-detection-1-introduction-to-av-
detection-techniques
INVICTUS
19
Security
13.
References:
[1] - https://en.wikipedia.org/wiki/Antivirus_software
[2] - https://en.wikipedia.org/wiki/Static_program_analysis
[3] - https://en.wikipedia.org/wiki/Dynamic_program_analysis
[4] - https://en.wikipedia.org/wiki/Sandbox_(computer_security)
[5] - https://en.wikipedia.org/wiki/Heuristic_analysis
[6] - https://en.wikipedia.org/wiki/Entropy
[7] - https://en.wikipedia.org/wiki/Address_space_layout_randomization
[8] - https://msdn.microsoft.com/en-
us/library/windows/desktop/aa366553(v=vs.85).aspx
The Antivirus Hacker’s Handbook
The Rootkit Arsenal: Escape and Evasion: Escape and Evasion in the Dark
Corners of the System
http://venom630.free.fr/pdf/Practical_Malware_Analysis.pdf
http://pferrie.host22.com/papers/antidebug.pdf
https://www.symantec.com/connect/articles/windows-anti-debug-reference
https://www.exploit-db.com/docs/18849.pdf
http://blog.sevagas.com/?Fun-combining-anti-debugging-and