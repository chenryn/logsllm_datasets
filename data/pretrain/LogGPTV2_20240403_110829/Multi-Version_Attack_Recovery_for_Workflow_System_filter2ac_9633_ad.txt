### 4. Analysis and Results

#### 4.1 Impact of Parameters on System Performance
Figure 3 illustrates the impact of different parameters on the system performance.

- **Impact of K**: The parameter \( K \) has a minimal effect on \( l \) once it reaches a certain threshold, such as \( K > 5 \) in the figure.
- **Impact of \( E[T] \) and \( \mu_3 \)**: Both \( E[T] \) and \( \mu_3 \) have linear impacts on \( l \), with \( \mu_3 \) having a more significant effect.
- **Impact of \( \mu_1 \) and \( \lambda_1 \)**: When the utilization factor \( \rho = \frac{\lambda_1}{\mu_1} \) is sufficiently small, changes in \( \mu_1 \) and \( \lambda_1 \) have little effect on \( l \).

The loss probability \( p_{\text{loss}} \) is given by:
\[ p_{\text{loss}} = p_K = \frac{\rho^K - \rho^{K+1}}{1 - \rho^{K+1}} \]

### 5. Related Work

#### 5.1 Intrusion Detection Systems (IDS)
An IDS can detect some intrusions, but in a workflow system, the damage caused by an attacker may spread through the execution of normal tasks without being detected. The IDS is unable to trace the spread of damage and cannot locate all the damage to the system.

#### 5.2 Checkpoint Techniques
Checkpoint techniques [10, 11] are not effective for efficient workflow recovery. A checkpoint rolls back the entire workflow system to a specific time, causing all work, including both malicious and normal tasks after that time, to be lost. This is especially problematic when the delay of the IDS is long. Additionally, checkpoints introduce extra storage costs.

#### 5.3 Malicious Transactions in Database Systems
The work most similar to ours is the handling of malicious transactions in a database system [1]. When intrusions are detected by the IDS, the database system isolates and confines the impaired data and then carries out recovery for the malicious transactions. However, this work does not consider the relationships among transactions, making it unable to trace the spread of damage and locate all the damage to the system. In contrast, our approach ensures correct recoveries by considering all data and control dependency relations among transactions.

#### 5.4 Failure Handling in Workflow Systems
Recent work [5, 4, 13] has discussed failure handling in workflow systems. Failure handling and attack recovery differ in two key aspects:

- **Goals**: Failure handling aims to ensure the atomicity of workflows, identifying which tasks should be aborted if a failure occurs. Attack recovery, on the other hand, focuses on removing the effects of malicious tasks that have been successfully executed.
- **Timing**: Failure handling occurs during the progress of workflows, while attack recovery is necessary after the IDS reports attacks and the malicious tasks have already been executed.

#### 5.5 Rollback Recovery
Rollback recovery, as surveyed in [6], focuses on message passing and temporal sequences. Our approach, however, emphasizes data and control dependency relations within workflow tasks. Message passing is a type of data dependency, but not all data dependencies are based on message passing. We also observe that control dependencies can change execution paths, leading to different patterns of message passing. Our methods provide more detailed dependency relations, making them more effective and efficient for workflow recovery.

#### 5.6 Decentralized Workflow Processing
Decentralized workflow processing is becoming increasingly popular. In distributed workflow models, workflow specifications are either carried by the workflow itself or stored in a distributed manner. Our theories remain practical in these scenarios, as they only require the exposure of dependency relations to the recovery system, thereby protecting the privacy of the workflow specifications.

### 6. Conclusions and Future Work

We have described fundamental theories for online attack recovery in workflows. Our techniques automatically find and repair all damage caused by malicious tasks reported by an independent IDS. We introduced restrictions on the execution order in attack recovery systems and partially removed these restrictions by using multi-version data objects to reduce unnecessary blocks and improve performance. We evaluated the performance and integrity level of these systems. Future work will compare our multi-version data-objects-based systems with single-version data-objects-based systems.

### Acknowledgments
We thank LouAnna Notargiacom for her valuable and insightful comments, and for polishing the paper. We also thank the anonymous reviewers. This work was supported in part by DARPA and AFRL, AFMC, USAF, under award number F20602-02-1-0216, by NSF CCR-TC-0233324, and by the Department of Energy Early Career PI Award.

### References
[1] P. Ammann, S. Jajodia, and P. Liu. Recovery from malicious transactions. IEEE Transaction on Knowledge and Data Engineering, 2002.
[2] V. Atluri, S. A. Chun, and P. Mazzoleni. A Chinese wall security model for decentralized workflow systems. In Proceedings of the 8th ACM conference on Computer and Communications Security, pages 48–57. ACM Press, 2001.
[3] Y. bing Lin and E. D. Lazowska. A study of time warp rollback mechanisms. ACM Transactions on Modeling and Computer Simulations, 1(1):51–72, January 1991.
[4] Q. Chen and U. Dayal. Failure handling for transaction hierarchies. In A. Gray and P.- Å. Larson, editors, Proceedings of the Thirteenth International Conference on Data Engineering, April 7-11, 1997 Birmingham U.K, pages 245–254. IEEE Computer Society, 1997.
[5] J. Eder and W. Liebhart. Workflow recovery. In Conference on Cooperative Information Systems, pages 124–134, 1996.
[6] E. N. M. Elnozahy, L. Alvisi, Y. min Wang, and D. B. Johnson. A survey of rollback-recovery protocols in message-passing systems. ACM Computing Surveys, 34(3):375–408, September 2002.
[7] D. R. Jefferson. Virtual time. ACM Transaction on Programming Languages and Systems, 7(3):404–425, July 1985.
[8] D. P. Kroese and V. F. Nicola. Efficient simulation of a tandem Jackson network. ACM Transactions on Modeling and Computer Simulation, 12(2):119–141, April 2002.
[9] W. Lee and S. J. Stolfo. A framework for constructing features and models for intrusion detection systems. ACM Transactions on Information and System Security (TISSEC), 3(4):227–261, 2000.
[10] J.-L. Lin and M. H. Dunham. A survey of distributed database checkpointing. Distributed and Parallel Databases, 5(3):289–319, 1997.
[11] J.-L. Lin and M. H. Dunham. A low-cost checkpointing technique for distributed databases. Distributed and Parallel Databases, 10(3):241–268, 2001.
[12] R. A. Sahner, K. S. Trivedi, and A. Puliafito. Performance and Reliability Analysis of Computer Systems. Kluwer Academic Publishers, Norwell, Massachusetts, USA, 1996.
[13] J. Tang and S.-Y. Hwang. A scheme to specify and implement ad-hoc recovery in workflow systems. Lecture Notes in Computer Science, 1377:484–??, 1998.
[14] H. C. Tijms. Stochastic Models. Wiley series in probability and mathematical statistics. John Wiley & Son, New York, NY, USA, 1994.
[15] M. Yu, P. Liu, and W. Zang. Intrusion masking for distributed atomic operations. In The 18th IFIP International Information Security Conference, Athens Chamber of Commerce and Industry, Greece, 26-28 May 2003. IFIP Technical Committee 11, Kluwer Academic Publishers.

### Appendix: Proof of Theorems

#### Proof of Theorem 4
1. Directly from criterion 4 of Definition 1.
2. Derived from rule 1 and the definition of relation →.
3. By contradiction. If redo(Ti) ≺s undo(Ti), the effects of task Ti will be undone, violating criterion 4 of Definition 1.
4. By contradiction. Assume redo(Ti) ≺s undo(Tj). Since Ti →a Tj, R(redo(Ti)) = R(Ti) and so R(redo(Ti)) ∩ W (undo(Tj)) = W (Tj) ≠ φ. Moreover, W (undo(Tj)) is dirty before undo(Tj). Therefore, redo(Ti) reads dirty data from R(redo(Ti)) ∩ W (undo(Tj)) and generates dirty data, violating criterion 2 of Definition 1.
5. By contradiction. From Ti →o Tj, we have Ti ≺ Tj and W (Ti) ∩ W (Tj) ≠ φ. In the system log, W (Ti) has an older version than W (Tj) for W (Ti) ∩ W (Tj). If undo(Ti) ≺s undo(Tj), then W (Ti) ∩ W (Tj) was not undone for Ti. In other words, Ti was not undone completely, violating criterion 1 of Definition 1.
6. Directly from criterion 4 of Definition 1.
7. Directly from criterion 4 of Definition 1.
8. Directly from condition 3 of Theorem 2.
9. Directly from condition 4 of Theorem 2.
10. Directly from condition 2 of Theorem 3. □

#### Proof of Theorem 5
1. Directly from criterion 4 of Definition 1.
2. undo(Ti) ≺s redo(Ti) comes directly from rule 3 of Theorem 4.
   - If Tj is data dependent on Ti, we prove the result by contradiction. Since R(redo(Ti)) = R(Ti) and W (redo(Ti)) = W (Ti), if Ti → Tj then redo(Ti) → Tj. There are three cases:
     - redo(Ti) →f Tj: Tj reads data from W (redo(Ti)) ∩ R(Tj) before redo(Ti) creates it, leading to corruption.
     - redo(Ti) →o Tj: After executing Tj, redo(Ti) writes W (redo(Ti)) ∩ W (Tj) again, losing the results of redo(Ti).
     - redo(Ti) →a Tj: redo(Ti) reads data that Tj writes in R(redo(Ti)) ∩ W (Tj), but should read data that exists before executing Tj, leading to corruption.
   - If Tj is control dependent on Ti, the execution of Tj depends on the result of Ti. If Tj ≺s redo(Ti), it is possible that Tj ∈ SF (redo(Ti)) after redo(Ti) is done, creating dirty data and violating criteria 3 and 4 of Definition 1.
3. undo(Ti) ≺s redo(Ti) comes directly from rule 3 of Theorem 4.
   - We prove redo(Ti) ≺s Tj by contradiction. Since redo(Ti) ∈ R is not done, we do not know if Tk ∈ ST (redo(Tj)). Assume Tj ≺s redo(Ti). It is possible that Tk ∈ ST (redo(Tj)). According to condition 4 of Theorem 2, Tj should be undone because it creates dirty data, violating criterion 3 of Definition 1. □