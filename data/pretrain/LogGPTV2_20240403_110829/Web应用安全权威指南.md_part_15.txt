-   **用引号括起来的属性值的 XSS**
    然而，即使属性值都用引号括了起来，但只要 `"` 没有被转义，还是会发生
    XSS 攻击。比如，如下脚本中属性值就用引号括了起来。
    > **代码清单 /43/43-004.php**
    ``` 代码无行号
    ">
    ```
    此时，假设 `p` 的值如下。
    ``` 代码无行号
    "+onmouseover%3d"alert(document.cookie)
    ```
    之前的 input 元素就变成了如下这般。
    ``` 代码无行号
    ```
    `value=""` 使得 value 属性结束，onmouseover
    以后的字符被解释为事件绑定。因此，结果同前项相同。
#### **对策**
至此我们已经了解到 XSS 漏洞产生的主要原因是生成 HTML 时没有对 \ **格式清单 htmlspecialchars 函数**
    ``` 代码无行号
    string htmlspecialchars(string $string, int $quote_style, string $charset);
    ```
    各参数的意义详见下表。
    **表 4-5 htmlspecialchars 函数的参数**
      ------------------- ----------------------------
      参数                说明
      \`\$string\`        转换对象字符串
      \`\$quote_style\`   引号的转换方法，参考表 4-6
      \`\$charset\`       字符编码。如 UTF-8、GBK
      ------------------- ----------------------------
    **使用示例**
    ``` 代码无行号
    echo htmlspecialchars($p, ENT_QUOTES, "UTF-8");
    ```
    **表 4-6 htmlspecialchars 函数中的转换对象字符**
      -------- -------- -------------------------------- ------------ ------------
      转换前   转换后   \$quote_style 以及转换对象字符                
                        ENT_NOQUOTES                     ENT_COMPAT   ENT_QUOTES
      \`\\`   \`\>\`   ○                                ○            ○
      \`&\`    \`&\`    ○                                ○            ○
      \`\"\`   \`\"\`   ×                                ○            ○
      \`\'\`   \`\'\`   ×                                ×            ○
      -------- -------- -------------------------------- ------------ ------------
    而实际编程中我们只要采取如下方针即可。
    -   转义元素内容时 `$quote_style` 可设为任意值
    -   属性值按照以下两个方针处理
        -   属性值用双引号括起来
        -   将 `$quote_style` 设为 `ENT_COMPAT` 或 `ENT_QUOTES`
    -   **htmlspecialchars 函数的第三个参数**
        `htmlspecialchars` 函数的第三个参数是指定字符编码。PHP
        脚本的情况下，输入 / 内部 / 输出可以分别指定不同的字符编码，但
        `htmlspecialchars` 函数中指定的字符编码需与 PHP
        的内部字符编码一致。如果指定有误的话函数的处理就会不正常，所以务必要正确指定。
-   **指定响应的字符编码**
    如果 Web 应用与浏览器各自设想的字符编码不一致，也会成为 XSS
    的原因。PHP 中提供了多种指定字符编码的方法，其中最可靠的方法是采用
    `header` 函数，如下所示。
    ``` 代码无行号
    header('Content-Type: text/html; charset=UTF-8');
    ```
    关于字符编码的详细内容请参考第 6 章。
-   **XSS 的辅助性对策**
    此处介绍一些能够缓和 XSS 攻击的对策。虽然上文已经介绍了 XSS
    攻击的根本性对策，但是，由于需要提防的地方实在太多，而且依据 HTML
    中位置的不同，防范策略也各异，因此很容易有所疏漏。而通过实施下面介绍的辅助性对策，即使根本性对策的实施有所疏漏，也能减轻攻击造成的损害。
    -   **输入校验**
        就像 4.2
        节中介绍的那样，通过检验输入值的有效性，当输入值不符合条件时就显示错误消息并促使用户重新输入，有时也能够防御
        XSS 攻击。
        当且仅当输入值为字母或数字的情况下，输入校验才能预防 XSS
        攻击，如果输入框允许所有的字符就无法防御 XSS 攻击了。
    -   **给 Cookie 添加 HttpOnly 属性**
        Cookie 中有名为 HttpOnly 的属性，该属性能禁止 JavaScript 读取
        Cookie 值。
        通过给 Cookie 添加 HttpOnly 属性，能够杜绝 XSS 中窃取会话 ID
        这一典型的攻击手段。但需注意的是其他攻击手段依然有效，所以这样只是限制了攻击者的选择范围，并不能杜绝所有
        XSS 攻击。
        使用 PHP 开发应用时，给会话 ID 添加 HttpOnly 属性，可以在
        php.ini 中做如下设置。
        ``` 代码无行号
        session.cookie_httponly = On
        ```
        详情请参考 PHP 的说明文档。
    -   **关闭 TRACE 方法**
        这是跨站追踪（Cross-Site Tracing，简称 XST）攻击的防范策略。XST
        是指利用 JavaScript 发送 HTTP 的 TRACE 方法来窃取 Cookie 值或
        Basic 认证密码的攻击手段。
        XST 攻击利用的是 XSS 漏洞，所以只要消除了 XSS
        漏洞就能保证安全无虞。而为了以防实施防范策略时有所遗漏，可以通过关闭
        TRACE 方法来防御 XST
        攻击。实际上，现在的主流浏览器都已经能够自己防御
        XST，所以只要用户不使用一些另类的浏览器，就可以不用顾虑 XST
        攻击。
        在 Apache 中，关闭 TRTACE 方法，可以在 httpd.conf 中做如下设置。
        ``` 代码无行号
        TraceEnable Off
        ```
-   **对策总结**
    **根本性对策（个别对策）**
    -   HTML 的元素内容
        使用 `htmlspecialchars` 函数转义
    -   属性值
        使用 `htmlspecialchars` 函数转义并用双引号括起来
    **根本性对策（共通对策）**
    -   明确设置 HTTP 响应的字符编码
    **辅助对策**
    -   输入校验
    -   给 Cookie 添加 HttpOnly 属性
    -   关闭 TRACE 方法
[14]{.注释编号下} XHTML 的属性值 \header(-charset => 'UTF-8');
    ```
### **4.3.2 跨站脚本（进阶篇）** {#text00000.html#nav_point_23}
本节作为前一节的补充，将继续介绍其他形式的跨站脚本安全隐患，即 href
等保存 URL 的属性值、事件绑定函数以及 script 元素。
前面已经提到过转义参数的方法根据其在 HTML
中的位置不同而不同，因此，这里我们将上一节的图 4-20 扩充，如图 4-22
所示。
                   ┌脚本（事件绑定）
                   │
                   │    ┌─事件绑定函数中的
                   │    │  字符串字面量
             ↓    ↓
                  ↑
                                └─属性值
     xxxx 
                     ↑
    元素内容
                 └────属性值（URL）
      var x = ...;           