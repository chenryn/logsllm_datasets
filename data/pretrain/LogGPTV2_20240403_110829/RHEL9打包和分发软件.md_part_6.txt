`%build`{.literal} 部分指定如何构建软件为空，因为不需要构建
`bash`{.literal}。
要安装 `bello`{.literal}，您只需要创建目标目录并在其中安装可执行的
`bash`{.literal} 脚本文件。因此，您可以使用 `%install`{.literal}
部分中的 `install`{.literal} 命令。RPM
宏允许在没有硬编码路径的情况下执行此操作。
::: itemizedlist
**其他资源**
-   [什么是源代码](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "什么是源代码"){.link}
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-pello_packaging-software}使用 Python 编写的程序的 SPEC 文件示例 {.title}
:::
本节介绍使用 Python 编程语言编写的 [**pello**]{.strong} 程序的示例 SPEC
文件。
::: title
**使用 Python 编写的 [**pello**]{.strong} 程序的 SPEC 文件示例**
:::
``` screen
Name:           python-pello
Version:        1.0.2
Release:        1%{?dist}
Summary:        Example Python library
License:        MIT
URL:            https://github.com/fedora-python/Pello
Source:         %{url}/archive/v%{version}/Pello-%{version}.tar.gz
BuildArch:      noarch
BuildRequires:  python3-devel
# Build dependencies needed to be specified manually
BuildRequires:  python3-setuptools
# Test dependencies needed to be specified manually
# Also runtime dependencies need to be BuildRequired manually to run tests during build
BuildRequires:  python3-pytest >= 3
%global _description %{expand:
Pello is an example package with an executable that prints Hello World! on the command line.}
%description %_description
%package -n python3-pello
Summary:        %{summary}
%description -n python3-pello %_description
%prep
%autosetup -p1 -n Pello-%{version}
%build
# The macro only supported projects with setup.py
%py3_build
%install
# The macro only supported projects with setup.py
%py3_install
%check
%{pytest}
# Note that there is no %%files section for the unversioned python module
%files -n python3-pello
%doc README.md
%license LICENSE.txt
%{_bindir}/pello_greeting
# The library files needed to be listed manually
%{python3_sitelib}/pello/
# The metadata files needed to be listed manually
%{python3_sitelib}/Pello-*.egg-info/
```
::: itemizedlist
**其他资源**
-   [Python 软件包的 SPEC
    文件描述](#advanced-topics.html#con_spec-file-description-for-a-python-package_assembly_packaging-python-3-rpms "Python 软件包的 SPEC 文件描述"){.link}
-   [什么是源代码](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "什么是源代码"){.link}
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-cello_packaging-software}使用 C 语言编写的程序的 SPEC 文件示例 {.title}
:::
本节介绍使用 C 编程语言编写的 [**cello**]{.strong} 程序的示例 SPEC
文件。
::: title
**使用 C 语言编写的 [**cello**]{.strong} 程序的 SPEC 文件示例**
:::
``` literallayout
Name:           cello
Version:        1.0
Release:        1%{?dist}
Summary:        Hello World example implemented in C
License:        GPLv3+
URL:            https://www.example.com/%{name}
Source0:        https://www.example.com/%{name}/releases/%{name}-%{version}.tar.gz
Patch0:         cello-output-first-patch.patch
BuildRequires:  gcc
BuildRequires:  make
%description
The long-tail description for our Hello World Example implemented in
C.
%prep
%setup -q
%patch0
%build
make %{?_smp_mflags}
%install
%make_install
%files
%license LICENSE
%{_bindir}/%{name}
%changelog
* Tue May 31 2016 Adam Miller  - 1.0-1
- First cello package
```
`BuildRequires`{.literal} 指令指定软件包的 build-time
依赖项，其中包含执行编译构建过程需要的两个软件包：
::: itemizedlist
-   `gcc`{.literal} 软件包
-   `make`{.literal} 软件包
:::
本例中省略了该软件包的运行时依赖项 `Requires`{.literal}
指令。所有运行时要求都由 `rpmbuild`{.literal} 进行处理，而
`cello`{.literal} 程序不需要核心 C 标准库之外的任何内容。
`%build`{.literal} 部分反映了编写了 [**cello**]{.strong} 程序的
`Makefile`{.literal} 的事实，因此可以使用 `rpmdev-newspec`{.literal}
程序提供的 [GNU make](http://www.gnu.org/software/make/){.link}
命令。但是，您需要删除对 `%configure`{.literal}
的调用，因为您没有提供配置脚本。
可使用 `rpmdev-newspec`{.literal} 命令提供的 `%make_install`{.literal}
宏来完成 [**cello**]{.strong} 程序安装。这是因为 [**cello**]{.strong}
程序的 `Makefile`{.literal} 可用。
::: itemizedlist
**其他资源**
-   [什么是源代码](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "什么是源代码"){.link}
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#con_building-rpms_packaging-software}构建 RPM {.title}
:::
RPM 使用 `rpmbuild`{.literal}
命令构建。此命令需要特定的目录和文件结构，这与
`rpmdev-setuptree`{.literal} 程序设置的结构相同。
不同的用例和所需结果需要不同的参数组合到 `rpmbuild`{.literal}
命令。主要用例有：
::: itemizedlist
-   构建源 RPM
-   构建二进制 RPM
    ::: itemizedlist
    -   从源 RPM 重建二进制 RPM
    -   从 SPEC 文件构建二进制 RPM
    -   从源 RPM 构建二进制 RPM
    :::
:::
下面的部分论述了如何在为程序创建 SPEC 文件后构建 RPM。
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#building-source-rpms_packaging-software}构建源 RPM {.title}
:::
以下流程描述了如何构建源 RPM。
::: itemizedlist
**先决条件**
-   我们要打包的程序的 SPEC 文件必须已经存在。
:::
::: itemizedlist
**步骤**
-   使用指定的 SPEC 文件运行 `rpmbuild`{.literal} 命令：
    ``` literallayout
    $ rpmbuild -bs SPECFILE
    ```
    使用 SPECfile 替换 [*SPECFILE*]{.emphasis}。`-bs`{.literal}
    选项代表构建源。
:::
以下示例显示了为 `bello`{.literal}、`pello`{.literal} 和
`cello`{.literal} 项目构建源 RPM。
::: title
**为 bello、pello 和 cello 构建源 RPM.**
:::
``` literallayout
$ cd ~/rpmbuild/SPECS/
8$ rpmbuild -bs bello.spec
Wrote: /home/admiller/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
$ rpmbuild -bs pello.spec
Wrote: /home/admiller/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
$ rpmbuild -bs cello.spec
Wrote: /home/admiller/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
```
::: itemizedlist
**验证步骤**
-   确保 `rpmbuild/SRPMS`{.literal} 目录包含生成的源 RPM。该目录是
    `rpmbuild`{.literal} 所期望的结构的一部分。
:::
::: itemizedlist
**其他资源**
-   [使用 SPEC
    文件](#packaging-software_packaging-and-distributing-software.html#con_working-with-spec-files_packaging-software "使用 SPEC 文件"){.link}。
-   [使用 rpmdev-newspec 创建新的 SPEC
    文件](#packaging-software_packaging-and-distributing-software.html#creating-spec-files-with-rpmdev-newspec_packaging-software "使用 rpmdev-newspec 创建新的 SPEC 文件"){.link}
-   [修改原始的 SPEC 文件以创建
    RPM](#packaging-software_packaging-and-distributing-software.html#modifying-a-spec-file_packaging-software "修改原始的 SPEC 文件以创建 RPM"){.link}
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#rebuilding-a-binary-from-a-source-rpm_packaging-software}从源 RPM 重建二进制 RPM {.title}
:::
以下流程演示了如何从源 RPM(SRPM)重建二进制 RPM。
::: itemizedlist
**步骤**
-   要从 SRPMs 中重建 `bello`{.literal}、`pello`{.literal} 和
    `cello`{.literal}，请运行：
    ``` literallayout
    $ rpmbuild --rebuild ~/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
    [output truncated]
    $ rpmbuild --rebuild ~/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
    [output truncated]
    $ rpmbuild --rebuild ~/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
    [output truncated]
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
调用 `rpmbuild --rebuild`{.literal} 涉及：
::: itemizedlist
-   在 `~/rpmbuild/`{.literal} 目录中安装 SRPM - SPEC 文件和源代码 -。
-   使用安装的内容进行构建.
-   删除 SPEC 文件和源代码。
:::
要在构建后保留 SPEC 文件和源代码，您可以：
::: itemizedlist
-   构建时，使用带有 `--recompile`{.literal} 选项而非
    `--rebuild`{.literal} 选项的 `rpmbuild`{.literal} 命令。
-   使用以下命令安装 SRPMs：
    ``` literallayout
    $ rpm -Uvh ~/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
    Updating / installing…​
       1:bello-0.1-1.el8               [100%]
    $ rpm -Uvh ~/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
    Updating / installing…​
    …​1:pello-0.1.2-1.el8              [100%]
    $ rpm -Uvh ~/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
    Updating / installing…​
    …​1:cello-1.0-1.el8            [100%]
    ```
:::
:::
创建二进制 RPM
时生成的输出是详细的，这对调试非常有用。输出因不同示例而异，并对应于其
SPEC 文件。
如果软件包没有特定架构，生成的二进制 RPM 位于
`~/rpmbuild/RPMS/YOURARCH`{.literal} 目录中（其中 `YOURARCH`{.literal}
是您的架构），或位于 `~/rpmbuild/RPMS/noarch/`{.literal} 目录中。
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#building-a-binary-from-the-spec-file_packaging-software}从 SPEC 文件构建二进制 RPM {.title}
:::
以下步骤演示了如何从 SPEC 文件构建 `bello`{.literal}、`pello`{.literal}
和 `cello`{.literal} 二进制 RPM。
::: itemizedlist
**步骤**
-   使用 `bb`{.literal} 选项运行 `rpmbuild`{.literal} 命令：
    ``` literallayout
    $ rpmbuild -bb ~/rpmbuild/SPECS/bello.spec
    $ rpmbuild -bb ~/rpmbuild/SPECS/pello.spec