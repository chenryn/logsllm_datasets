么样的数据，那么这个函数还是很有用的。例如，为了弄清 mytbl表是否存在，可以执行下面
式调用mysql_fetch_row（）。不过，如果你感兴趣的是结果集是否为空，而不是结果集里有什
会再有尚未被取回的行。事实上，如果使用的是mysql_store_result（），那么根本用不着
集
260
mysql_use_result()。
集，这与使用 mysql_use_result（)时所提出的“每次只能使用一个结果集”的约束要求是相
结果集不仅包含从数据行里检索出来的列值，还包含与这些数据有关的信息。这种信息即
为了提供最大限度的灵活性，可以让用户选择结果集的处理方案。mysql和mysqldump 便
虽然应该在某个时候调用mysql_free_result（）函数，
元数据是否可用，取决于所用的结果集处理方法。7.4.5节曾介绍过，如果想使用行计数或
mysql_store_result（）函数并不会导致数据不同步的问题，因为当它返回时，服务器上不
Buchanan
在之前的7.4.2节，我们编写了process_result_set（）函数的一个版本，它可以把结果集
结果集元数据能帮助我们决定如何处理结果集数据。
口结果集里的行数和列数。调用 mysql_num_rows（）和 mysql_num_fields（）函数即可
SHOW TABLES LIKEmytbl'
Bush
Bush
Arthur
Adams
Adams
口
口
口
口
口
口
二进制数据，等等。
列的数据类型，
行和列的计数，
列计数则表明，那个依次处理各个行中各个列的循环，要选代多少次才能结束。
列的名字及宽度有助于生成漂亮格式的输出——垂直排列，并带有列标题。
有用于访问这些列信息相关的函数信息请参考附录G。
关于各列的信息，如列的名字和类型、每个列的值最大宽度，以及包含这个列的表。
当前行里各列值的长度。调用mysql_fetch_lengths（)即可获得。
获得。
使用结果集元数据
第7章用C语言编写MySQL程序
George
George
Chester A.
John
James
H.W.
Braintree
，可以让你清楚地辨别出很多情况，如列表示的是不是数字，它是否包含
有助于为那些依赖于结果集维度的数据结构分配内存。
New Haven
Mercersburg
Fairfield
MA
，释放用 mysql_store_result()
显
---
## Page 281
最大值，其中的每一个值都取决于这个列结构信息里的元数据。
用mysql_fetch_fiela（）返回指向后续列结构的指针。列的显示宽度是下面所示3个值中的
全部是依据结果集元数据完成的，并未引用任何的行值。
其实它们并不相同，但这种对比肯定会给你带来更多启发。
非只是
直对齐。
表格形式的输出，并将每个列“框起来”。这个版本将以易于解释的格式显示相同的结果：
此
首先，有必要确定名
口列标题 field->name 的长度。
为计算各列的显示宽度，这段代码将遍历与结果集里的各个列相对应的MYSQL_FIELD 结
mysql_field_seek (res_set, 0);
unsigned int
MYSQL_FIELD
你也许会在想：“嗯，这好像与mysql程序生成输出报告的方式差不多嘛。”是的，的确如
这个练习很好地演示了如何使用结果集元数据，因为它要求了解相当多的结果集信息，而
（4）最后，输出检索到的行总数。
（2）输出一行框起来的列标签（用垂直线分隔，
（1）确定各列的显示宽度
具体的显示算法执行了以下几个步骤。
下面，我们来编写 process_result_set（）函数的另一个版本，它会产生一个带有表头的
unsigned
Carter
field->max_length=col_len;
if（col_len
if(col_
field = mysql_fetch_field (res_set);
了解它的行所包含的数据值。
Carter
Bush
Buchanan
Arthur
Adams
last_name
确定列的显示宽度；要求结果集是由*/
Adams
col_1en=4;
，对于数字，按右对齐方式输出。对于NULL值，输出单词“NULL”。
James E.
len max_length)
long
flags))
，下面列出了具体的做法。请注意：其中的各种计算
，前后再加上短横线)。
state
7.4处理SQL语句
261
---
## Page 282
代码了。
一个 print_dashes（）函数，让它实现这一功能，这样就不用在多个地方重复这种短划线输出
IS_NUM()宏的值为真。
列信息：
齐方式输出)。各个列值的输出结果如下，其中，row[i]用于存放数据值，而field 则指向
个列值时，也需要一点技巧，因为这个值可能为NULL，也可能代表某个数字（它必须按右对
个宽度值，就能实现输出了：
利用field 变量所指向的那个列信息结构，输出 name 成员即可实现。再带上刚才计算出的那
MYSQL_FIELD 结构的length 成员，通过它，可以获得列值的最大长度。
result（），而非 mysql_store_result（)的程序里，可采用一种变通的方法来实现，即使月
确的算法操作需要这个结果集使用mysql_store_result（)来创建。在使用 mysql_use_
max_length 还没有任何意义。因为我们需要使用max_length来确定列值的显示宽度，所以正
么可以分配一个unsigned long 数组，并把计算出来的显示宽度存储在这个数组里。）
更
呢？通常情况下，我会说“只读”。但是，MySQL发行版的某些客户端程序，会
端开发库获得的MYSQL_FIELD 结构的一个成员。这个结构的内容允许更改，
在计算显示宽度时，有一个细节很关键，即当使用mysql_use_result（）创建结果集时，
262
改max_length的值，所以我认为这种做法也是可以的。（如果你不想修改max_length，那
用于显示结果集的最终代码如下。
对于数据，循环遍历结果集里的各个行，在每次迭代时输出当前行的列值。在输出行的各
在知道列的宽度后，便为输出结果做好了所有准备。标题很容易处理。对于某个给定的列，
MYSQL_FIELD
print_dashes
void
如果 field->type 表明的列数据类型为某种数字类型，如 INT、FLOAT 或 DECIMAL，那么
if (row[i] == NULL)
printf ("%-*s 1",(int) field->max_length,field->name);
请注意，在把列的显示宽度确定下来之后，我们把它赋给了max_length，它是我们从客户
printf ("%-*s 1",(int） field->max_length,row[i]);
else
printf （".%*sI",
口字符串“NULL”的长度。如果 field->flags 表明这个列允许包含 NULL 值，那么这
口 field->max_length，是列中最长数据值的长度。
fputc（'\n',stdout);
for (i = 0; i max_length + 2;j++)
(int) field->max_length,row[i]);
以左对齐方式输出值
(int)field-
/*输出单词"NULL"*/
。因为需要多次输出短划线，所以更为简便的方法是编写
*以右对齐方式输出值
"NULL"）;
，还是应该为只读
会以类似的方式
向
用
---
## Page 283
便使用下面这样的循环语句，多次访问了这些结构：
for(i=0;imax_length =col_len;
if (col_lenflags）)
field = mysql_fetch_field (res_set);
or(i=0;imax_length,field->name）;
stdout）;
strlen
1：
*field;
row;
stdout);
4；
field->max_length;
==NULL)
field->max_length)
/*
mysql_num_rows （res_set));
returned:%lu\n",
(int)field->max_length,
以左对齐方式输出值*/