    Python>    name = get_pascal_string(name_ea)
    Python>        
    Python>    # name our addresses
    Python>    db.name(lookup['info'], 'gv', "Info({:s})".format(name))
    Python>    db.name(lookup['object'], 'gv', "Object({:s})".format(name))
    Python>    
    Python>    # tag our methods
    Python>    m_constructor = db.get.i.uint32_t(lookup['constructor'])
    Python>    func.tag(m_constructor, 'function-type', 'constructor')
    Python>    m_finalizer = db.get.i.uint32_t(lookup['finalizer'])
    Python>    func.tag(m_finalizer, 'function-type', 'finalizer')
    Python>    m_destructor = db.get.i.uint32_t(lookup['destructor'])
    Python>    func.tag(m_destructor, 'function-type', 'destructor')
    Python>    
    Python>    # tag our class structure
    Python>    db.tag(lookup['info'], 'object.name', name)
    Python>    db.tag(lookup['info'], 'object.methods', lookup['object'])
    Python>    db.tag(lookup['info'], 'object.size', size)
    Python>    if parent_ea:
    Python>        db.tag(lookup['info'], 'object.parent', parent_ea)
    Python>    continue
这将导致数据库中的所有Delphi对象都被标记。 由于标签利用的是数据库中的注释，因此当用户正在逆向时，他们可以立即看到与给定地址关联的标签可能的样子。
在IDA Python命令行执行了上一个代码后，“TThread”对象的外观如图3所示。  
在此大块代码被执行后，数据库中的每个对象应该被标记。 这将允许我们使用`database.select（）`查询数据库，以便找到特定大小的类。
有关更多信息，请查看`database.select`中的`help()`函数。 使用它来查找0x38的对象大小的示例如下：
    Python>for ea, tags in db.select(Or=('object.name', 'object.size')):
    Python>    if tags['object.size'] == 0x38:
    Python>        print hex(ea), tags
    Python>    continue
## 记录RTF的token值
Atlantis Word Processor包含RTF解析器。
这种文件格式是众所周知的，因此很容易识别它支持的标记，并希望找到负责解析每个标记参数的函数。 为此，我们将首先搜索定义在数组中的“objemb”字符串。
首先，我们可以使用IDA的文本搜索（Alt + T）。但我们可以通过使用IDA-minsc中`database.search`命名空间提供的功能，并与`go（）`函数结合。如此以来，我们便可以立即导航到制定内容。
    Python>go(db.search.by_text('objemb'))
下图为将我们直接定位到“objemb”字符串的第一个实例。 如果我们进行对照（Ctrl + X），我们便能发现只有一个使用它的引用。
这将我们带到图4中的字符串引用列表。
由于没有引用，我们可以快速导航到IDA之前定义的标签。 由于IDA具有引用该特定地址的反汇编代码，因此该标签必然存在。
为此，我们可以使用`database.address`命名空间中的功能。 包括`nextlabel（）`和`prevlabel（）`函数。
我们可以通过在IDAPython命令行输入以下内容来使用它们：
    Python>go(db.a.prevlabel())
这个数据似乎是一个数组，但IDA还没有对其进行定义。 我们可以点击'*'来调出IDA的“转换为数组”对话框，但我们可以使用IDA-minsc来代替。
我们将使用`database.address.nextlabel（）`和`database.here（）`（别名为`h（）`）来计算数组的元素数，然后使用`databaset.set.array()`将它分配到数据库中。
`database.set.array`函数采用“pythonic”类型作为其参数之一。 这在IDA-minsc的文档中进行了描述，其允许我们在IDA中描述类型，而无需理解正确的标志或类型。
在这种情况下，我们可以使用`（int，4）`来指定一个四字节整数（dword），但由于这是一个32位数据库，我们可以使用`int`来使用默认的整数大小。
    Python>size = (db.a.nextlabel() - h())
    Python>db.set.array(int, size / 4)
我们也使用`database.name（）`命名当前地址的数组：
    Python>db.name('gv', "rtfTokenArray({:d})".format(db.t.array.length()))
看起来这个数组的某些元素没有被IDA标记为实际的字符串，如图5所示：  
我们可以通过遍历此数组中的所有地址来取消定义地址，然后将其重新定义为字符串，以与手动操作相同的方式快速修复此问题。
这可以通过IDAPython命令行中的以下内容完成：
    Python>for ea in db.get.array():
    Python>    db.set.undefined(ea)
    Python>    db.set.string(ea)
现在我们修复了这个数组。 如果我们导航回到顶部，我们会注意到这个数组与许多数组是连续的。
让我们首先修复这个数组并将我们当前的位置保存在变量`position`中，然后使用`database.address.prevlabel（）`来实现。
如此以来，我们可以像处理第一个数组那样进行其他操作。
    Python>position = h()
    Python>
    Python>go(db.a.prevlabel())
    Python>
    Python>db.set.array(int, (db.a.nextlabel() - h()) / 4)
    Python>db.name('gv', "rtfTokenArray({:d})".format(db.t.array.length()))
    Python>for ea in db.get.array():
    Python>    db.set.undefined(ea)
    Python>    db.set.string(ea)
现在我们可以返回到之前保存的位置并重复操作一下两个数组：
    Python>go(position)
    Python>
    Python>go(db.a.nextlabel())
    Python>
    Python>db.set.array(int, (db.a.nextlabel() - h()) / 4)
    Python>db.name('gv', "rtfTokenArray({:d})".format(db.t.array.length()))
    Python>for ea in db.get.array():
    Python>    db.set.undefined(ea)
    Python>    db.set.string(ea)
    Python>
    Python>go(db.a.nextlabel())
    Python>
    Python>db.set.array(int, (db.a.nextlabel() - h()) / 4)
    Python>db.name('gv', "rtfTokenArray({:d})".format(db.t.array.length()))
    Python>for ea in db.get.array():
    Python>    db.set.undefined(ea)
    Python>    db.set.string(ea)
现在它已经完成，我们可以列出我们使用`database.names`命名空间创建的所有数组。 让我们列出以“gv_rtfToken”开头的所有符号。
从这个列表中，让我们看一下我们定义的第一个数组（“gv_rtfTokenArray（213）”），然后双击它的地址。
    Python>db.names.list('gv_rtfToken*')
    [11612] 0x668ba8 gv_rtfTokenArray(64)
    [11613] 0x668ca8 gv_rtfTokenArray(213)
    [11614] 0x668ffc gv_rtfTokenArray(46)
    [11615] 0x6690b4 gv_rtfTokenArray(135)
现在我们应该定义“gv_rtfTokenArray（213）”。 如果我们进行对照（Ctrl +
X），我们可以看到在地址0x431DD7（[14]）处只有一个代码引用。
    CODE:00431DD7 000 A1 A8 8C 66 00                    mov     eax, ds:gv_rtfTokenArray(213)   ; [14]
    CODE:00431DDC 000 A3 EC 85 67 00                    mov     ds:dword_6785EC, eax            ; [15]
    CODE:00431DE1 000 C7 05 F0 85 67 00+                mov     ds:dword_6785F0, 4
    CODE:00431DEB 000 C7 05 F4 85 67 00+                mov     ds:dword_6785F4, 4
    CODE:00431DF5
    CODE:00431DF5                       locret_431DF5:
    CODE:00431DF5 000 C3                                retn
    CODE:00431DF5                       sub_431D38      endp
该指令读取token数组地址，然后将其写入另一个全局[15]中。 因为这只是指向我们数组的指针，所以我们也要命名这个地址。
而不是使用IDA的“重命名地址”对话框，或双击“dword_6785EC”并使用带有当前地址的`database.name`。我们实际上是直接从指令的操作数中提取出地址。
这可以通过`instruction.op`函数完成。 如果我们选择地址0x431ddc，我们的全局token数组将驻留在当前指令的第一个操作数中。
我们可以在IDAPython命令行中将其操作数作为命名元组提取：
    Python>ins.op(0)
    OffsetBaseIndexScale(offset=6784492L, base=None, index=None, scale=1)
由于我们没有提供地址作为`instruction.op`的第一个参数，因此我们假设我们处理的是当前操作。
命名元组的“offset”字段包含我们的dword的地址， 因此我们可以使用以下命令使用已选定的相同地址进行命名。
由于此地址已经具有名称“dword_6785EC”，`database.name`函数将返回原始名称。
    Python>ea = ins.op(0).offset
    Python>db.name(ea, 'gp','rtfTokenArray(213)')
    dword_6785EC
同一个函数对我们之前定义的所有数组的全局指针进行相同的赋值。 我们可以重复此过程来命名所有这些，然后交叉引用它们以找到RTF标记生成器。
现在，让我们在达到这一点之前做好准备。 我们的准备工作只需要回到我们的令牌数组并从中提取字符串。 我们已经有了这些命名，所以我们可以列出以下内容：
    Python>db.names.list('gv_rtfToken*')
    [11612] 0x668ba8 gv_rtfTokenArray(64)
    [11613] 0x668ca8 gv_rtfTokenArray(213)
    [11614] 0x668ffc gv_rtfTokenArray(46)
    [11615] 0x6690b4 gv_rtfTokenArray(135)
然而我们想要遍历此列表。 `database.names`命名空间包含一个专门用于此目的`iterate（）`函数。
我们可以将它与`database.get.array（）`结合使用，用于将数组存储为单个列表。 在IDAPython命令行，我们将执行以下操作：
    Python>tokens = []
    Python>for ea, name in db.names.iterate('gv_rtftoken*'):
    Python>    rtfTokenArray = db.get.array(ea)
    Python>    tokens.extend(rtfTokenArray)
    Python>
    Python>len(tokens)
    458
我们有一个包含458个地址并指向实际的RTF令牌的列表。 我们将使用快速列表解析将其转换为字符串列表，以将地址映射到字符串。
现在我们可以将令牌标识符转换为其实际的令牌字符串。
    Python>tokens = [db.get.string(ea) for ea in tokens]
    为了阅读的流畅性，后面的内容我放在下一篇文章中给大家介绍。