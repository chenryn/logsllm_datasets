# Title: AMSI-Based Detection of Malicious PowerShell Code Using Contextual Embeddings

## Authors:
- Danny Hendler, Ben-Gurion University of the Negev, Israel
- Shay Kels, Microsoft, Israel
- Amir Rubin, Ben-Gurion University of the Negev, Israel

### Abstract
PowerShell, a command-line shell and scripting language, is widely used in organizations for configuration management and task automation. However, it is also increasingly exploited by cybercriminals due to its pre-installation on Windows machines and its powerful functionality. Detecting malicious PowerShell code is both urgent and challenging. Microsoft's Antimalware Scan Interface (AMSI), integrated into Windows 10, allows systems to scan all code passed to scripting engines like PowerShell before execution. This study presents several deep-learning-based detectors of malicious PowerShell code using pretrained contextual embeddings. These embeddings project semantically similar words to proximate vectors, addressing the scarcity of labeled data in cybersecurity. Our models, trained and evaluated with real-world data from a large antimalware vendor, show that using unlabeled data for embeddings significantly improves detection performance. Our best model, which processes textual signals at both character and token levels, achieves a true positive rate of nearly 90% with a false positive rate of less than 0.1%.

### 1. Introduction
Cybercrime poses a significant threat to modern digital society. Attackers often use tools already present on the victim's system, a technique known as "Living off the Land." PowerShell, a scripting tool used for configuration management and task automation, has become a popular attack vector due to its versatility and pre-installation on Windows. PowerShell can be obfuscated in many ways, making it an attractive tool for malicious activities such as reconnaissance, persistence, and payload delivery.

To combat script-based attacks, Microsoft introduced the Antimalware Scan Interface (AMSI) in Windows 10. AMSI allows antimalware systems to inspect all code executed by scripting engines like PowerShell, providing de-obfuscated code for scanning. While AMSI provides valuable visibility, it does not offer a complete solution against PowerShell-based attacks. Effective detection techniques must be developed, especially given the need for a very low false positive rate (FPR) to avoid disrupting legitimate use by network administrators and developers.

This work addresses the challenge of detecting malicious PowerShell code using AMSI. We leverage recent advancements in Deep Learning (DL) and contextual embeddings, which have shown promise in Natural Language Processing (NLP) tasks. Our approach uses pretrained embeddings to initialize the first layer of a neural network, reducing the need for large labeled datasets. We compare our method with traditional pattern recognition and other DL-based approaches, demonstrating superior performance in detecting malicious PowerShell code.

### 2. Background

#### 2.1. PowerShell
PowerShell, released in 2006, is a command-line shell and scripting language widely used in organizations for configuration management and task automation. It includes cmdlets, functional units that provide access to system resources such as the registry and file system. PowerShell scripts can be executed directly from the command line, memory, or .ps1 files. The ease of access to system resources, combined with its pre-installation on Windows and the availability of numerous cmdlets, makes PowerShell a preferred tool for malware authors. PowerShell can be used for various malicious activities, including reconnaissance, privilege escalation, and payload delivery.

#### 2.2. Antimalware Scan Interface (AMSI)
In 2015, Microsoft introduced the Antimalware Scan Interface (AMSI) in Windows 10. AMSI enables applications, particularly scripting engines like PowerShell, to request scans by the installed antimalware. By default, PowerShell code is sent via AMSI for scanning before execution. This provides the antimalware system with de-obfuscated code, enhancing visibility into the actual code being executed. For example, when using the `Invoke-Expression` cmdlet, the value of the environment variable is fully uncloaked by AMSI before execution. Additionally, the content of scripts invoked by the command line is also sent to the antimalware, providing more comprehensive visibility than monitoring command-line arguments alone.

### 3. Contributions
This work makes two key contributions:
1. **Effective Detection Models**: We develop and evaluate several deep-learning-based detectors of malicious PowerShell code using pretrained contextual embeddings. Our best model, which combines character-level and token-level representations, achieves a true positive rate of nearly 90% with a false positive rate of only 0.1%. This model outperforms both DL-based and traditional machine learning-based detectors.
2. **Utilizing Unlabeled Data**: We demonstrate that using unlabeled data for training contextual embeddings significantly enhances detection performance. This is particularly important in cybersecurity, where labeled data is scarce but unlabeled data is abundant. Our approach is generic and can be adapted to other languages and types of textual data in cyberspace.

### 4. Organization of the Paper
The rest of the paper is organized as follows:
- **Section II** provides background on PowerShell, AMSI, and contextual embeddings.
- **Section III** compares the information provided by AMSI with command-line logging.
- **Section IV** describes the datasets used and their preprocessing.
- **Section V** discusses the contextual embedding of PowerShell tokens.
- **Section VI** details the detection models implemented.
- **Section VII** reports the results of our experimental evaluation.
- **Section VIII** surveys related work.
- **Section IX** describes the deployment of our detector and discusses potential attacks.
- **Section X** concludes with a discussion of our results and future work.