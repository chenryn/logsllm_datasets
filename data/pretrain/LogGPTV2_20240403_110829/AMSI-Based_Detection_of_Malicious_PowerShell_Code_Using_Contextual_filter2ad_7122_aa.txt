title:AMSI-Based Detection of Malicious PowerShell Code Using Contextual
Embeddings
author:Danny Hendler and
Shay Kels and
Amir Rubin
AMSI-Based Detection of Malicious PowerShell
Code Using Contextual Embeddings
Danny Hendler
Ben-Gurion University of the Negev,
Israel
Shay Kels
Microsoft,
Israel
Amir Rubin
Ben-Gurion University of the Negev,
Israel
PI:EMAIL
PI:EMAIL
PI:EMAIL
9
1
0
2
p
e
S
9
1
]
R
C
.
s
c
[
2
v
8
3
5
9
0
.
5
0
9
1
:
v
i
X
r
a
Abstract—PowerShell is a command-line shell, supporting a
scripting language. It is widely used in organizations for conﬁgu-
ration management and task automation but is also increasingly
used by cybercriminals for launching cyber attacks against
organizations, mainly because it is pre-installed on Windows
machines and exposes strong functionality that may be leveraged
by attackers. This makes the problem of detecting malicious
PowerShell code both urgent and challenging. Microsoft’s An-
timalware Scan Interface (AMSI), built into Windows 10, allows
defending systems to scan all the code passed to scripting engines
such as PowerShell prior to its execution. In this work, we conduct
the ﬁrst study of malicious PowerShell code detection using the
information made available by AMSI.
We present several novel deep-learning based detectors of
malicious PowerShell code that employ pretrained contextual em-
beddings of words from the PowerShell “language”. A contextual
word embedding is able to project semantically-similar words to
proximate vectors in the embedding space. A known problem in
the cybersecurity domain is that labeled data is relatively scarce
in comparison with unlabeled data, making it difﬁcult to devise
effective supervised detection of malicious activity of many types.
This is also the case with PowerShell code. Our work shows that
this problem can be mitigated by learning a pretrained contextual
embedding based on unlabeled data.
We trained and evaluated our models using real-world data,
collected using AMSI from a large antimalware vendor. The
contextual embedding was learnt using a large corpus of un-
labeled PowerShell scripts and modules collected from public
repositories. Our performance analysis establishes that the use
of unlabeled data for the embedding signiﬁcantly improved the
performance of our detectors. Our best-performing model uses
an architecture that enables the processing of textual signals from
both the character and token levels and obtains a true positive
rate of nearly 90% while maintaining a low false positive rate of
less than 0.1%.
I.
INTRODUCTION
Cybercrime in its various forms poses a serious threat to
the modern digital society. In the ever-going race of cyber
arms, attackers frequently rely on tools already existing on
the victim’s system, a technique known as “Living of the
Land”. These methods have become increasingly popular in
recent years [1]. Several reports by security companies observe
the popularity in cyber attacks of using PowerShell [2]–[4], a
scripting tool normally used in organizations for conﬁguration
management and task automation. One reason for this is that
PowerShell code can be obfuscated in many ways [2]–[4]).
PowerShell can be used in different stages of an attack, either
by a human attacker or by malicious software, to perform
various malicious activities such as reconnaissance, gaining
persistence in the attacked system, communicating with a
command and control server or fetching a payload. The volume
and diversity of PowerShell usage in malicious activities make
it an important attack vector to be addressed by defenders.
To facilitate better defence against script-based attacks on
Windows systems, Microsoft released the Antimalware Scan
Interface (AMSI) [5]. AMSI provides defending systems with
the capability to inspect all the code executed by scripting
engines such as PowerShell. AMSI communicates to the
antimalware un-obfuscated code to be scanned, just before the
code is presented to the scripting engine. Most importantly,
whenever PowerShell is called with an argument command-
line code that invokes a script, both the command-line code and
the content of the script are made available to the antimalware
for scanning and not just the command-line code. As we
show in Section III, this provides the antimalware system with
signiﬁcantly richer information than is available to it without
AMSI.
While it provides defenders with important optics into the
PowerShell code executed on the system, the AMSI interface
by itself does not provide a solution against PowerShell-based
malicious cyber activities and appropriate detection solutions
must be devised. Moreover, the widespread and diverse usage
of PowerShell scripting by legitimate users, such as network
administrators and software developers, imposes a requirement
for a very low false positive rate (FPR) by defending systems.
It is therefore important to devise effective detection techniques
that can be applied to this problem. Such techniques should
aim not only at extracting patterns of malicious code, but also
for capturing the semantics discerning malicious and benign
usage of PowerShell. In this work, we address for the ﬁrst
time the challenge of detecting malicious PowerShell code
in general – and malicious Powershell scripts in particular –
collected using the AMSI interface.
Recent scientiﬁc achievements in Deep Learning (DL) [6]–
[8] provide many opportunities for the development of novel
methods for cyber defense. One of the major breakthroughs
in DL is associated with the usage of contextual embeddings
in various Natural Language Processing (NLP) tasks. Several
methods for embedding words into vectors have been proposed
in recent years [9]–[12]. Generally, these methods leverage
large datasets of text documents (such as Wikipedia articles)
to obtain representations of words as vectors in the Euclidean
space from contexts of their appearances in the document
corpus. These embedding methods have gained popularity over
1
traditional one-hot encoding in various NLP tasks, because of
their ability to project semantically-similar words to proximate
vectors in the embedding space. Pretrained embeddings can
be used to initialize the ﬁrst layer of a neural network trained
to perform a particular task (for example, the classiﬁcation
of documents to topics), thereby reducing the volume of data
required for training.
As a viable alternative to the word embedding approach,
several authors suggest
to encode text as a sequence of
vectors representing characters [13], [14]. Promising results
for the application of DL methods to the classiﬁcation of
PowerShell command-lines (as opposed to general PowerShell
code consisting of both command-lines and scripts) using such
a character-level approach were reported in [15]. We note,
however, that the problem of classifying general PowerShell
code, available using AMSI, is signiﬁcantly different: as we
show in Section VII, code collected using AMSI is typically
much longer than command-line code and its structure is
more complex, often including deﬁnitions and invocations of
functions and references to external modules.
In this work, we propose a novel method for the classiﬁca-
tion (to benign or malicious) of general PowerShell code. We
aim to depart from traditional pattern recognition approaches
and to provide a classiﬁcation method for PowerShell code that
is more resilient to evasion attempts by malicious attackers. To
this end, we employ two popular text embedding approaches,
Word2Vec (W2V) [9] and FastText
[16], [17], trained on
a dataset, made publicly-available by Bohannon and Holmes
[18], that contains a large corpus of unlabeled PowerShell
scripts . We use the embedding as a ﬁrst layer for token
inputs in a deep neural network for malicious PowerShell
code detection, trained and evaluated using a second real-world
dataset, consisting of labeled PowerShell code instances logged
using AMSI from a large antimalware vendor.
Contributions
This work makes two key contributions. First, we address
the challenge of devising effective detectors of malicious Pow-
erShell code using the information made available to antim-
laware systems by AMSI. We implemented several detection
models, trained and evaluated using a dataset consisting of la-
beled PowerShell code instances collected during May-October
2018 inside the organization of a large antimalware vendor. We
present a novel DL-based detector of malicious PowerShell
code that leverages a pretrained contextual embedding. To
the best of our knowledge, our work is the ﬁrst to apply
pretrained embeddings for the detection of malicious code. We
conduct extensive evaluation comparing the performance of
this detector with those of several alternative detection models.
Our evaluation results establish that it signiﬁcantly outperforms
DL-based detectors that do not use a pretrained embedding, as
well as traditional-ML-based detectors, and is able to detect
nearly 90% of the malicious PowerShell code instances while
maintaining an FPR of only 0.1% on a test set collected over
a different period of time than the training set.
A second, more general, contribution of this work is to
demonstrate that contextual embeddings facilitates enhancing
the detection performance of supervised classiﬁcation tasks by
using unlabeled data. This is important, since unlabeled data
are frequently available in abundance to the cyber defenders,
whereas labeled data is typically more scarce and difﬁcult to
obtain. Since our approach is generic, it may be possible to
adapt it for the classiﬁcation of code in other languages as
well as to other types of textual data that arise in cyberspace.
This work also demonstrates that models combining both
character-level and token-level code representations are able
to provide performance that is superior to that of models
that employ only a single type of representation. Our best-
performing model is deployed in the antimalware vendor’s
production environment since April, 2019.
The rest of this paper is organized as follows. In Sec-
tion II, we provide required background on PowerShell, the
AMSI programming interface, deep learning and contextual
embeddings. Section III compares the information provided by
AMSI with that provided by command-line logging. Section
IV describes the datasets we use and the manner in which
they are preprocessed and used for training our models. This
is followed by a discussion of the contextual embedding of
PowerShell tokens in Section V. We describe the detection
models we implemented in Section VI and report on the
results of our experimental evaluation in Section VII. Related
work is surveyed in Section VIII. Section IX brieﬂy describes
our detector’s deployment and discusses possible attacks. We
conclude with a short discussion of our results and avenues
for future work in Section X.
II. BACKGROUND
A. PowerShell
First released in 2006, PowerShell is a command-line shell,
widely used in organizations for conﬁguration management
and task automation. It has a powerful scripting language
with various capabilities, accessible through cmdlets. These
cmdlets are functional units, exposing system administration
capabilities such as registry or ﬁle system access and general-
purpose utilities like a web client or text encoding utilities.
For example, the Get-ItemProperty cmdlet reads values
from the Windows registry. A PowerShell script is a sequence
of PowerShell cmdlets that can be executed directly from the
command-line, from memory, or from a .ps1 ﬁle. Functional
units of PowerShell may be combined into a single PowerShell
module (.psm1 ﬁle), making the code easier to manage,
reference, load or share.
Given the ease of access to system resources using Power-
Shell, the fact that it is pre-installed on Windows machines, the
huge number of cmdlets available and the many ways in which
PowerShell code can be obfuscated [15], PowerShell is a tool
of choice for malware authors to achieve their goals. From
reconnaissance via port scanning, through privilege escalation
using shell-code injection [2] and gaining persistence using
registry editing1 to payload dropping using a web client [4],
PowerShell can serve as a ﬁleless attack vector, enabling the
attacker to leave minimal traces on a compromised machine.
Indeed, several recently-published reports discuss the grow-
ing popularity of PowerShell’s usage as an attack vector and
analyze the various techniques by which this is done [2]–[4],
[19]. A recent report by IBM ( [19]) observes that over 57% of
1http://az4n6.blogspot.com/2018/06/malicious-powershell-in-registry.html
2
the attacks they analyzed were ﬁleless, and many of these used
PowerShell as an attack vector. This highlights the importance
of detecting malicious PowerShell code.
B. Antimalware Scan Interface (AMSI)
In 2015, Microsoft announced a new capability built into
Windows 10, called the Antimalware Scan Interface (AMSI)
[5], enabling applications in general – and script-engines in
particular – to request a scan by the antimalware installed on
the machine. By default, PowerShell code is sent via AMSI
for antimalware scanning prior to its execution. The labeled
dataset we use in this work (described in more detail
in
section IV) consists of real-world PowerShell code collected
using AMSI.
As surveyed in the past (see [2]–[4]), PowerShell code can
be obfuscated using numerous techniques, which is often done
by malicious code for evading detection. Deep obfuscation can
be accomplished by iteratively applying obfuscation mecha-
nisms multiple times, thus wrapping the original code in sev-
eral obfuscation layers. With AMSI, the antimalware product
receives deobfuscated PowerShell code just before the code is
presented to the scripting engine for execution. For example,
any argument provided to the Invoke-Expression cmdlet
will be fully uncloaked by AMSI. E.g., when executing the
PowerShell command Invoke-Expression $env:var,
the value of the environment variable $env:var will be sent
by AMSI for scanning prior to execution. Without AMSI,
command-line monitoring can be applied to the PowerShell
process, but it can only observe the code argument string
– which in our example is simply Invoke-Expression
$env:var.
Moreover, the content of scripts invoked by the command-
line is sent to the antimalware as well. For example, when
executing the simple command powershell.exe -file
./script.ps1, the content of the script, which is missed
when only the command-line is monitored, is visible to the
antimalware when AMSI is enabled. This means that AMSI’s
output provides much more visibility into the PowerShell code
that gets executed than is available from direct analysis of
(possibly-obfuscated/encrypted) PowerShell script ﬁles or from
monitoring PowerShell command-line arguments.
We note that there exist a few cases in which AMSI’s
output is not fully de-obfuscated and is dynamically resolved
to plain code only during execution. This is the case when the
PowerShell code uses an expression that applies a string ma-
nipulation technique (such as string concatenation) to construct
a function operand or when a function name is composed of
characters with alternating casing (AMSI is case insensitive).
Several techniques for evading AMSI are known (see e.g.
[20]) and examples of such evasion attempts were observed in
our dataset. For instance, the following code sets the value of
the AmsiInitFailed property to true:
[Ref].Assembly
.GetType(’System.Management.Automation.AmsiUtils’)
.GetField(’amsiInitFailed’,’NonPublic,Static’)
.SetValue($null,$true);
The above PowerShell code snippet is an example of an
evasion technique that uses .NET’s reﬂection mechanism to set