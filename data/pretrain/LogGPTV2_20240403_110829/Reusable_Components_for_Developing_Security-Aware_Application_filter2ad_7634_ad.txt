choice, this choice is taken irrespectively of all other less 
dominant  models.  However,  if  a  model  cannot  make  a 
proper  choice  but  a  less  dominant  can,  the most proper 
choice is taken and returned to the security manager. 
4.3. Security Enforcement 
A proxy controls access to an object with the help of a 
prefixed  representative  object  [13].  Access  to  the  real 
object  is  only  possibly  through  the  proxy.  GAMMA 
protects data objects that contain sensitive information by 
automatically generating proxy objects and returns them 
instead  of  the  real  object.  Proxies  offer  the  very  same 
routines as real objects, thus the client does not recognize 
any  differences.  Accessing  these  objects  via  the  proxy 
directly invokes the access control mechanism. Since the 
real objects are kept in a separate space and can only be 
accessed 
through  proxies,  an  application  cannot 
circumvent  or  bypass  the  access  control  mechanism.  In 
fact,  a  client  will  never  obtain  a  direct  reference  but  a 
proxy that seems to be the real object. 
4.4. Reflection 
To  provide  GAMMA’s  flexibility,  a  mechanism  is 
necessary to introspect software objects at runtime. This 
is  necessary  to  generate  proxies  but  also  to  load  user-
defined  framework  extensions  (e.g.  new  access  control 
models,  data  providers).  The  current  implementation  of 
GAMMA is realized using the Java language. Java offers 
introspection  –  called  reflection.  However,  GAMMA’s 
concept  can  be  implemented  in  any  other  language  for 
any  other  architecture  (e.g.  Microsoft  .NET)  where 
introspection facilities can be realized. 
5. Example: Time Management 
In this section we present an example application that 
is  simple  yet  incorporates  comprehensive  authorization 
requirements to demonstrate the benefits of the presented 
component framework. The sample application has been 
implemented as vision demonstrator within the GAMMA 
project. 
5.1. Authorization Requirements 
Figure  7 illustrates the authorization requirements of 
the time management application. 
During a month employees record their project hours 
into timetable objects. Each employee is owner of his/her 
monthly  timetable  and  shall  thus  have  full  control  over 
the object. The employee shall furthermore be allowed to 
pass access to his/her timetable object to third persons, if 
(s)he  wants  to  (REQ1).  Additionally,  project  managers 
shall  have  read  access  to  their  employee’s  timetables 
(REQ2).  However,  at  the  end  of  each  month  employees 
shall  finish  their  timetables  and  loose  write  access  over 
them. Rights granted to individual third persons shall be 
revoked.  Project  managers  shall  have  the  ability  to 
finalize their project reports using the timetables of their 
project  members.  Furthermore,  full  control  of  any 
timetable  shall  be  passed  to  a  secretary,  who  balances 
accounts with customers (REQ3). 
Figure 7 Authorization requirements. 
In  this  example,  REQ1  can  be  realized  using  a 
discretionary access control (DAC) model. REQ2 can be 
best realized by using a role-based access control (RBAC) 
model,  where  a  role  “Project  Manager”  has  always  the 
right to read the timetables of his/her employees. In the 
case  of  combining  DAC  and  RBAC  mechanisms  it  is 
necessary  to  define  that  RBAC  mechanisms  shall  be 
stronger than DAC mechanisms, since an employee shall 
not  be  able  to  revoke  read-access  to  his/her  timetables 
from  his/her  project-manager.  According  to  REQ3  a 
change  to  the  authorization  scheme  is  caused  by  a 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
temporal event. At the end of each month, the owners of 
timetable objects lose their full control automatically and 
thus delegate access rights to dedicated roles (i.e. project 
manager and secretary). 
The combination of DAC and RBAC is changed into a 
single  RBAC  model.  The  role  “Secretary”  now  has  the 
full  control  over  the  timetable  objects  and  is  the  only 
subject  who  is  able  to  do  modifications.  The  owner  and 
the  project  manager  still  have  read  access  or  -  when 
granted  by  the  secretary  -  also  restricted  write  access. 
Subjects that had access to the object before  - granted by 
the owner - now lose their access rights to the object. 
5.2.  Realization  using  Multiple  Access  Control 
Models 
This example also highlights the ability of GAMMA 
to work with two access control models at the same time, 
i.e.  a  DAC  and  an  RBAC  model,  both  using  a  closed 
world assumption. 
  DAC 
has right 
a User 
grants 
Time-constrained Authorization 
a 3rd Person 
RBAC 
Granted Authorization 
Timetable 
a Project Manager 
Project Manager 
read 
a Secretary 
Secretary 
Full control 
Figure 8 Concurrent DAC and RBAC models. 
Figure  8 illustrates the schematic combination of the 
two  access  control  models.  At  the  beginning  of  each 
month,  an  employee  creates  his/her  timetable,  which  is 
an  instance  of  a  class  derived  from  the  secure  object 
component.  The  employee  automatically  receives  a 
special  authorization  “ownership”,  which  grants  full 
access to the timetable. Additionally, a time-constraint is 
associated with the ownership authorization (indicated by 
a watch symbol) that restricts the employee’s ownership-
privilege to the current month. When granting access to 
third 
are 
automatically created also restricting the delegated access 
rights to the current month. 
time-constraints 
additional 
persons 
At the end of the month, when the timetable is given 
to  the  secretary,  the  ownership  privilege  as  well  as  any 
right granted to a third person is automatically disabled 
due to the time constraints. 
At  the  same  time  some  other  persons  have  access  to 
the  timetable  based  on  appropriate  roles.  These  are,  for 
example, the project manager or the secretary. Roles are 
assigned 
to  users.  Additionally,  authorizations  are 
assigned  to  roles.  However,  these  authorizations  also 
have  time  constraints – in fact exactly those constraints 
that  are  complement  to  the  DAC  authorizations’  time 
constraints. 
Using  this  approach  the  validity  period  of  access 
control models can be regulated. During the month only 
rules specified in the DAC’s authorization base are valid. 
At the end of the month, all these rules become invalid 
since their time-constraints do not allow access anymore. 
However, the rules of the RBAC model become valid. 
5.3. Used/Extended Framework Components 
The  authorization  requirements  and  the  realization 
approach  mentioned  above  can  be 
realized  with 
GAMMA using and/or extending particular components 
of the framework. 
First  of  all,  a  timetable  business  object  is  created  by 
business  application  developers,  which  needs  to  be 
protected and has thus to be derived from a secure object. 
Then, model providers have to derive two concrete access 
control  models,  namely,  DAC  and  RBAC  that  will  be 
specialized  for  that  particular  application.  Framework 
architects  may  later  on  decide  to  include  the  resulting 
access  control  model  with  the  framework  for  future 
usage.  Application  developers  and  model  providers 
negotiate and derive the particular subjects to be used in 
this  application,  i.e.  employees  (as  users)  and  roles. 
Furthermore, 
authorizations 
applicable for that scenario such as ownership (full access 
and  the  right  to  grant  access  to  third  persons),  read 
permission (allowing a subject to view the contents of a 
timetable), write permission (allowing a subject to modify 
the  contents  of  a  timetable),  and  delete  permission 
(allowing  a  subject  to  delete  a  timetable).  Additionally, 
time constraints have to be derived that are automatically 
associated  to  authorizations  in  order  to  realize  the 
temporal switch of access control models. Finally, model 
provides have to realize concrete data provider objects if 
not yet available for the particular backend systems. 
they  define 
concrete 
6. Conclusions and Future Work 
In this paper we have presented GAMMA, a security 
framework  supporting  the  development  of  multi-tier 
applications. It contains a variety of components offering 
a  range  of  high-level  security  mechanisms  including 
different  access  control  models 
that  can  be  used 
concurrently and the support of arbitrary constraints. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Based on the experience of having used GAMMA for 
several  applications  we  have  identified  the  following 
major issues that we plan to address in future: 
First, we strive to realize the framework for the .NET 
programming environment, which does not yet offer the 
convenient enforcement. This shall be a straight forward 
task  due  to  the  language  and  architecture  independent 
design of the GAMMA framework. 
Second,  we  will  implement  additional  forms  of 
authentication,  since  the  GAMMA  prototype  currently 
only  provides  an  implementation  for  password-based 
authentication.  In  particular,  we  will  concentrate  on 
challenge-response methods. 
Third,  since  multi-level  approaches  can  be  useful  in 
some  situations  we  will  also  implement  models  such  as 
the Bell-LaPadula model. We think that one reason why 
MLS is not widely used is the lack of support in today’s 
developing environments. That said, we will also be able 
to evaluate the spectrum of applicability of our canonical 
access control mechanism. 
And  finally,  several  standards  bodies, 
including 
OASIS (Organization for the Advancement of Structured 
Information  Standards),  IETF  (Internet  Engineering 
Task  Force)  and  W3C  (World  Wide  Web  Consortium), 
have proposed XML-based security standards. The most 
relevant with respect to authorization and access controls 
are  SAML  (Security  Assertion  Markup  Language)  and 
XACML (eXtensible Access Control Markup Language), 
both driven by OASIS technical committees. SAML is an 
XML-based framework for exchanging information about 
authentication  acts  performed  by  subjects,  attributes  of 
subjects,  and  authorization  decisions  about  whether 
subjects  are  allowed  to  access  certain  resources  or  not. 
The  specification  is  currently  under  consideration  for 
becoming  an  official  OASIS  standard.  XACML,  on  the 
other  hand,  defines  a  core  schema  and  a  corresponding 
namespace for the expression of authorization policies in 
XML  against  objects  that  are  themselves  identified  in 
XML. XACML is currently an OASIS working draft. At 
the  time  starting  to  develop  GAMMA,  these  standards 
were  not  available  or  at  least  not  stable  enough  to 
consider 
into  GAMMA.  However,  our 
architecture  allows  realizing  dedicated  security  data 
provider for SAML or XACML, for instance, which we 
plan to do, as soon as stable specifications are available. 
integration 
[1]  J.E.  Dobson  and  B.  Randell  B,  “Building  Reliable  Secure 
Computing  Systems  out  of  Unreliable  Insecure  Components”, 
Proc. 17th Annual Computer Security Applications Conference 
References 
(ACSAC),  New  Orleans,  Louisiana,  USA.,  Dec.  10th  –14th, 
2001. 
[2] M. Carey, H. Garcia-Molina, J. Hamilton, H. Pirahesh, and 
B.  Thuraisingham,  “Where  are  Our  Promising  Research 
Directions:  Database  Server,  Middleware,  or  Applications?”, 
Panel  Discussion:  Proc.  18th  Int.  IEEE  Conf.  on  Data 
Engineering  (ICDE),  San  Jose,  CA,  USA,  Feb.  26th  –  March 
1st, 2002. 
[3] W. Essmayr, S. Probst, and E. Weippl, “Role-based Access 
Controls:  Status,  Dissemination,  and  Prospects  for  Generic 
Security  Mechanisms”,  to  appear:  Int.  Journal  of  Electronic 
Commerce Research, Kluwer Academic Publishers. 
[4] W. Essmayr, S. Probst, and E. Weippl, “A Comparison of 
Distributed Authorization Solutions”, Proc. 3rd Int. Conference 
on  Information  Integration  and  Web-based  Applications  & 
Services (IIWAS), Linz, Austria, Sep. 10th-12th, 2001. 
[5] P. Ashley, and M. Vandequauver, “Intranet Security - The 
SESAME Approach”, Kluwer Academic Publishing, 1998. 
[6]  M.E.  Zurko,  R.  Simon,  and  T.  Sanfilippo,  “A  User-
Centered,  Modular  Authorization  Service  Built  on  an  RBAC 
Foundation”, Proc. IEEE Symposium on Security and Privacy, 
Berkley, CA, USA, May 1999. 
[7]  M.  Hauswirth,  C.  Kerer,  and  R.  Kurmanowytsch,  “A 
flexible  and  extensible  security  framework  for  Java  code”, 
Proc.  9th 
International  World  Wide  Web  Conference, 
Amsterdam, May 2000. 
[8] I. Welch, and R. Stroud, “Supporting Real World Security 
Models in Java”,  Proc. 7th IEEE Workshop on Future Trends 
in  Distributed  Computing  Systems,  Tunisia,  South  Africa, 
December 1999. 
[9]  Sun  Microsystems, 
http://java.sun.com/j2se/1.4/docs/guide/security/spec/security-
specTOC.fm.html (last accessed on May 31, 2002). 
[10]  E. Jendrock, S. Bodoff, D. Green, K. Haase, M. Pawlan, 
and  B.  Stearns,  The  J2EE  Tutorial,  ISBN  0-201-79168-4, 
Addison Wesley, 2002. 
[11]  Foundstone  Inc.,  CORE  Security  Technologies,  “Security 
in 
Framework”, 
http://www.foundstone.com/pdf/dotnet-security-framework.pdf 
(last accessed on May 31, 2002). 
[12] R. Sandhu, D. Ferraiolo, and R. Kuhn, “The NIST Model 
for Role-Based Access Control: Towards A Unified Standard”, 
Proc. 5th ACM Workshop on Role-Based Access Control, July 
2000. 
[13] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design 
Patterns, ISBN 0-201-63361-2, Addison-Wesley, 1995. 
“Java  Security  Architecture”, 
Microsoft® 
.NET 
the 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE