    echo "输入第一个数字: "
    read aNum
    echo "输入第二个数字: "
    read anotherNum
    echo "两个数字分别为 $aNum 和 $anotherNum !"
    return $(($aNum+$anotherNum))
}
funWithReturn
echo "输入的两个数字之和为 $? !"
```
```
这个函数会对输入的两个数字进行相加运算...
输入第一个数字:
1
输入第二个数字:
2
两个数字分别为 1 和 2 !
输入的两个数字之和为 3 !
```
函数返回值在调用该函数后通过 `$?` 来获得。
注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。
**函数参数**
在 Shell 中，调用函数时可以向其传递参数。在函数体内部，通过 `$n` 的形式来获取参数的值，例如，`$1` 表示第一个参数，`$2` 表示第二个参数...
带参数的函数示例
```sh
#!/bin/bash
funWithParam(){
    echo "第一个参数为 $1 !"
    echo "第二个参数为 $2 !"
    echo "第十个参数为 $10 !"
    echo "第十个参数为 ${10} !"
    echo "第十一个参数为 ${11} !"
    echo "参数总数有 $# 个!"
    echo "作为一个字符串输出所有参数 $* !"
}
funWithParam 1 2 3 4 5 6 7 8 9 34 73
```
```
第一个参数为 1 !
第二个参数为 2 !
第十个参数为 10 !
第十个参数为 34 !
第十一个参数为 73 !
参数总数有 11 个!
作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !
```
注意，`$10` 不能获取第十个参数，获取第十个参数需要 `${10}`。当 n>=10 时，需要使用 `${n}` 来获取参数。
还有几个特殊字符用来处理参数
- `$#` 传递到脚本的参数个数
- `$*` 以一个单字符串显示所有向脚本传递的参数
- `$$` 脚本运行的当前进程 ID 号
- `$!` 后台运行的最后一个进程的 ID 号
- `$@` 与 $* 相同，但是使用时加引号，并在引号中返回每个参数。
- `$-` 显示 Shell 使用的当前选项，与 set 命令功能相同。
- `$?` 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。
---
## 输入输出重定向
大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到你的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。
重定向命令列表如下
- `command > file` 将输出重定向到 file。
- `command > file` 将输出以追加的方式重定向到 file。
- `n > file` 将文件描述符为 n 的文件重定向到 file。
- `n >> file` 将文件描述符为 n 的文件以追加的方式重定向到 file。
- `n >& m` 将输出文件 m 和 n 合并。
- `n  file1`
上面这个命令执行 command1 然后将输出的内容存入 file1。
注意任何 file1 内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用 `>>` 操作符。
执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):
```bash
who > users
```
执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。输出重定向会覆盖文件内容
**输入重定向**
和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：
```bash
command1 )，输入重定向是小于号( outfile
```
同时替换输入和输出，执行 command1，从文件 infile 读取内容，然后将输出写入到 outfile 中。
一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：
- 标准输入文件(stdin)：stdin 的文件描述符为 0，Unix 程序默认从 stdin 读取数据。
- 标准输出文件(stdout)：stdout 的文件描述符为 1，Unix 程序默认向 stdout 输出数据。
- 标准错误文件(stderr)：stderr 的文件描述符为 2，Unix 程序会向 stderr 流中写入错误信息。
默认情况下，command > file 将 stdout 重定向到 file，command  file
```
如果希望 stderr 追加到 file 文件末尾，可以这样写：
```sh
command 2>> file
```
如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：
```sh
command > file 2>&1
# 或
command >> file 2>&1
```
如果希望对 stdin 和 stdout 都重定向，可以这样写：
```sh
command file2
```
command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。
**使用  > /dev/null 抑制标准输出**
```bash
cat file.txt > /dev/null
./shell-script.sh > /dev/null
```
**使用 2> /dev/null 抑制标准错误**
```bash
cat invalid-file-name.txt 2> /dev/null
./shell-script.sh 2> /dev/null
```
**Here Document**
Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。
它的基本的形式如下
```sh
command  /dev/null
```
`/dev/null` 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 `/dev/null` 文件非常有用，将命令的输出重定向到它，会起到"禁止输出"的效果。
如果希望屏蔽 stdout 和 stderr，可以这样写：
```sh
command > /dev/null 2>&1
```
---
## 交互
如想在脚本中使用fdisk命令新建一个分区
```bash
#!/bin/bash
fdisk /dev/sdb  注：被包含的文件 test1.sh 不需要可执行权限。
---
## 调式脚本
在 shell 脚本中添加 set -xv 来调试输出
```diff
vim test.sh
++ set -xv
```
或者在执行 shell 脚本时提供该设置
```bash
bash -xv test.sh
```
**trap**
trap命令用来在 Bash 脚本中响应系统信号。
最常见的系统信号就是 SIGINT（中断），即按 Ctrl + C 所产生的信号。trap命令的-l参数，可以列出所有的系统信号。
```
trap -l
```
“动作”是一个 Bash 命令，“信号”常用的有以下几个：
```
HUP：编号1，脚本与所在的终端脱离联系。
INT：编号2，用户按下 Ctrl + C，意图让脚本终止运行。
QUIT：编号3，用户按下 Ctrl + 斜杠，意图退出脚本。
KILL：编号9，该信号用于杀死进程。
TERM：编号15，这是kill命令发出的默认信号。
EXIT：编号0，这不是系统信号，而是 Bash 脚本特有的信号，不管什么情况，只要退出脚本就会产生。
```
trap命令响应EXIT信号的写法如下
```bash
trap 'rm -f "$TMPFILE"' EXIT
# 脚本遇到EXIT信号时，就会执行rm -f "$TMPFILE"
```
trap 命令的常见使用场景，就是在 Bash 脚本中指定退出时执行的清理命令。
```bash
trap 'rm -f "$TMPFILE"' EXIT
TMPFILE=$(mktemp) || exit 1
ls /etc > $TMPFILE
if grep -qi "kernel" $TMPFILE; then
  echo 'find'
fi
# 不管是脚本正常执行结束，还是用户按 Ctrl + C 终止，都会产生EXIT信号，从而触发删除临时文件。
```
注意，trap 命令必须放在脚本的开头。否则，它上方的任何命令导致脚本退出，都不会被它捕获。
如果 trap 需要触发多条命令，可以封装一个 Bash 函数。
```bash
function egress {
  command1
  command2
  command3
}
trap egress EXIT
```
---
## 错误处理
如果脚本里面有运行失败的命令(返回值非0),bash默认会继续执行后面的命令。
实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。
```bash
command || exit 1
# 只要command有非零返回值，脚本就会停止执行。
```
如果停止执行之前需要完成多个操作，就要采用以下写法：
```bash
# 写法一
command || { echo "command failed"; exit 1; }
# 写法二
if ! command; then echo "command failed"; exit 1; fi
# 写法三
command
if [ "$?" -ne 0 ]; then echo "command failed"; exit 1; fi
```
另外，除了停止执行，还有一种情况。如果两个命令有继承关系，只有第一个命令成功了，才能继续执行第二个命令，那么就要采用下面的写法。
```bash
command1 && command2
```
一个案例
```bash
echo "1" && whoamm && echo "2" || { echo "3"; ( echo "4" && whamm || echo "5" ); }
```
```
1
test.sh: line 1: whoamm: command not found
3
4
test.sh: line 1: whamm: command not found
5
```
另一个案例
```bash
echo "1" && whoamm && echo "2" || { echo "3"; idddddd || exit 1; }
echo "5"
```
```
1
test.sh: line 1: whoamm: command not found
3
test.sh: line 1: echo1: command not found
```
---
## Source & Reference
* [Shell脚本编程30分钟入门](https://github.com/qinjx/30min_guides/blob/master/shell.md)
* [Shell 教程](https://www.runoob.com/linux/linux-shell.html)
* [Bash编程基础知识](https://mp.weixin.qq.com/s/tSWnoO3IAET3C7iYY7ns6Q)