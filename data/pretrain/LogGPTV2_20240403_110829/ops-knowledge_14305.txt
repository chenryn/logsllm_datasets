Question: Consider the following code snippet used in a web application:

javascript
function sanitize(input) {
    var temp = document.createElement("DIV");
    temp.innerHTML = input;
    return temp.textContent || temp.innerText || "";
}

$('form').submit(function() {
    $('input[type=text]').val(function() {
        return sanitize($(this).val());
    });
});


Analyze the code and identify which statement is true regarding the security implications of using the 'sanitize' function in the context of DOM-based XSS:
"A": "The 'sanitize' function is secure because it creates a new DIV element to handle the input, effectively sandboxing any malicious content.",
"B": "Using 'innerHTML' property to handle user input without proper sanitization can lead to the execution of malicious scripts, posing a security risk.",
"C": "The code is secure as long as the web application employs a strict Content Security Policy (CSP).",
"D": "The 'sanitize' function is inherently secure as it relies on the 'textContent' property, which is known to prevent script execution."
Answer: B