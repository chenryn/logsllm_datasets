mate. Nevertheless, the maximum accuracy that can be
achieved with these methods is still in the range of a few
kilobytes, which is insufficient for some of the novel at-
tacks presented in Section 4.
Finally, browsers may store resources in the cache, al-
lowing them to be retrieved much faster in future visits.
Motivated by the potentially nefarious consequences of
caching resources chosen by an adversary, we analyzed
the specification of the various APIs that are involved
in this process. Surprisingly, we found multiple design
flaws that allow an adversary to uncover the exact size
of any resource. In Section 3.4, we elaborate in detail
on these newly discovered vulnerabilities, and their pres-
ence in modern browsers.
An overview of all size-exposing techniques we discov-
ered during our evaluation is provided in Table 1.
3.2 OS-based Techniques
In this section, we elaborate on size-exposing techniques
that occur at the level of the operating system, on the
side of the web server and client.
In our analysis, we
considered four types of hosting environments for the
web server, namely dedicated hosting, shared hosting,
and cloud-based solutions (VMs and PaaS). To be able
to observe the length of resources in the case of a ded-
icated hosting environment, an attacker would need to
have either physical access, or infect the machine with
a malicious binary. In both cases, we argue that the ca-
pabilities of the attacker far surpass what is required for
a size-exposing attack, thereby making other attack vec-
tors more appealing to the attacker.
The same argument applies to cloud-based hosting.
It has been shown that cache-based side-channels at-
tacks can extract sensitive information, including traf-
fic information, in a cross-tenant or cross-VM environ-
ment [48, 76, 72]. However, if an attacker would have
the capabilities to leverage a cache-based attack to ac-
curately determine the size of a requested resource, this
would mean that the attacker could also leverage the
cache-based attack to determine (part of) the execution
trace, which can be considered as significantly more se-
vere in most scenarios. Given the lack of incentive for
an attacker to uncover the resource size by launching a
cross-tenant or cross-VM attack, we do not consider this
in more detail.
In a shared hosting environment, web requests for sev-
eral customers are served by the same system. Next to
cross-process cache-based side-channel attacks, which
can be considered similar to the above-mentioned cross-
VM attacks, adversaries can typically also access the
system-wide network statistics. These network statistics
can be obtained by either running the ifconfig com-
mand, or by reading it directly from system pseudo-files
such as /proc/net/dev. As these network statistics re-
port the exact amount of bytes sent and received by a
network interface, an adversary could leverage this in-
formation to uncover the size of a response. The at-
tacker’s accuracy will of course depend on the amount
of background traffic, but the ability to coordinate with
the victim’s browser gives the adversary a strong advan-
tage. Because shared hosting environments are typically
used by less popular websites, we consider this type of
attack scenario to be unlikely, and thus do not explore
this issue further.
On the side of the client, we explored various size-
exposing techniques, but found that most techniques ei-
ther require too many privileges, e.g., infecting the sys-
tem with a malicious binary, or yield inaccurate re-
sults [44]. An interesting exception is the Android op-
erating system, which also keeps track of network statis-
tics. In addition to the global network statistics, Android
also exposes network statistics per user, which, surpris-
ingly, can be read out by any application without requir-
450  25th USENIX Security Symposium 
USENIX Association
type ver.
length nonce
payload
tag
length
type flags
streamId
5-byte header
8 bytes
encrypted
16 bytes
3 bytes 1 byte 1 byte
4 bytes
payload
variable
Figure 2: TLS record layout when using AES-GCM.
Figure 3: Simplified HTTP/2 frame layout.
ing permissions1. In their work, Zhou et al. showed that
by passively monitoring network statistics on Android,
an adversary can infer sensitive information from the re-
quests made by other applications. We make the obser-
vation that these attacks can be extended when consider-
ing an attacker model in which the adversary can actively
trigger specific requests in the victim’s mobile browser.
As a proof-of-concept application, we created an HTTP
service, which reports the number of bytes received by
the user associated with the com.android.chrome ap-
plication. Finally, our applications triggers the mobile
browser to open a web page, which first contacts the local
service, next downloads an external resource, and then
obtains the network statistics again, allowing us to deter-
mine the exact size of the external resource.
3.3 Network-based Techniques
We now show the size of a resource can be uncovered
by monitoring its transmission over a secure connection.
First we do this for TLS, and then we evaluate the case
where Wi-Fi encryption is used on top of TLS. Although
Wi-Fi hides individual connections, effectively offering
a secure channel similar to that of VPNs or SSH tunnels,
we show attacks remain possible. We also study the im-
pact of the new HTTP/2 protocol.
3.3.1 Transport Layer Security (SSL / TLS)
Web traffic can be protected by HTTPS, i.e., by sending
HTTP messages over TLS [47, 15]. Once the TLS hand-
shake is completed, TLS records of type application data
are used to send HTTP messages. The type and length
of a record is not encrypted, and padding may be added
if block ciphers are used. Since nowadays more than
half of all TLS connections use AES in Galois Counter
Mode (GCM) [27], we will assume this cipher is used
unless mentioned otherwise. The layout of a TLS record
using AES-GCM is shown in Fig. 2. Note that for this
cipher no padding is used. An HTTP message can be
spread out over multiple TLS records, and in turn a TLS
record can be spread out over several TCP packets. An
endpoint can freely decide in how many records to divide
the data being transmitted.
1These
can be
statistics
read out
/proc/uid_stat/[uid]/tcp_rcv, or,
be obtained from the getUidRxBytes() interface.
from the pseudo-files
since Android 4.3, can
To determine the length of a resource sent over TLS,
we first need to know when it is being transmitted. We
accomplish this by using JavaScript to make the victim’s
browser fetch a page on our server, signaling that the next
request will be to the targeted resource. We then moni-
tor any TLS connections to the server hosting this re-
source, which is possible because the TCP/IP headers of
a TLS connection are not encrypted. Once the resource
has been received, we again signal this to our server. This
enables us to identify the (single) TLS connection that
was used to transmit the resource. Finally we subtract
the overhead of the TLS records (see Figure 2) to deter-
mine the length of the HTTP response. If the connection
uses a cipher that does not require padding, this reveals
the precise length of the HTTP response. Otherwise only
a close estimate of the response length can be made. By
subtracting the length of the headers from this HTTP re-
sponse, whose value can be easily predicted, we learn the
length of the requested resource.
We tested this attack against two popular web servers:
Apache and nginx. Even when the victim was actively
browsing YouTube and downloading torrents, our attack
correctly determined the length of the resource.
Inter-
estingly, we noticed that Apache puts the header of an
HTTP response in a single, separate, TLS record. This
makes it trivial to determine the length of the HTTP re-
sponse header sent by Apache: it corresponds exactly to
the first TLS record sent by the server.
We also studied the impact of the HTTP/2 protocol [4]
on our attacks. HTTP/2 does not change the seman-
tics of HTTP messages, but optimizes their transport.
In HTTP/2, each HTTP request and response pair is
sent in a unique stream, and multiple parallel streams
can be initiated in a single TCP connection. The ba-
sic transmission unit of a stream is a frame (see Fig-
ure 3). Each frame has a streamId field that identifies the
stream it belongs to. Several types of frames exist, with
the two most common being header and data frames.
Header frames encode and compress HTTP headers us-
ing HPACK [45], and data frames contain the body of
HTTP messages. Nearly all other frames are used for
management purposes, and we refer to them as control
frames. Most browsers only support HTTP/2 over TLS.
Usage of HTTP/2 is negotiated using the Application
Layer Protocol Negotiation (APLN) extension of TLS.
This extension is sent unencrypted, meaning we can eas-
ily detect if a connection uses HTTP/2.
USENIX Association  
25th USENIX Security Symposium  451
To determine the size of a resource transmitted using
HTTP/2 over TLS, we have to predict the total overhead
created by the 9-byte frame header (see Figure 3). More-
over, we need to be able to filter away control frames.
Both Apache and nginx send control frames in separate
TLS records, and these records can be detected by their
length and position in the TLS connection, allowing us
to recognize and filter these frames. To calculate the
overhead created by the 9-byte frame header, we need
to predict the number of HTTP/2 data frames that were
used to transmit the resource. For Apache this is easy
since it always sends data frames with a payload of 214
bytes, except for the last frame. For nginx, the num-
ber of data frames can be predicted based on the num-
ber of TLS records. This means that for both servers we
can predict the amount of overhead HTTP/2 introduces.
The size of the HTTP/2 header frame can be predicted
similar to the HTTP/1.1 case, with the addition that the
HPACK compression has to be taken into account. Fi-
nally, we found that multiple streams are active in one
TCP connection only when loading a page. By waiting
until the HTTP/2 connection is idle before letting the vic-
tim’s browser fetch the resource, the only active stream
will be the one downloading the resource. All combined,
these techniques allowed us to accurately predict the size
of resources sent using HTTP/2. Note that if the server
uses gzip, deflate, or similar, we learn the compressed
size of the resource. In Section 4, we show that this is
sufficient to perform attacks, and can even be used to ex-
tend an attacker’s capabilities.
3.3.2 Encrypted Wi-Fi Networks
Wireless networks are an attractive target for traffic mon-
itoring attacks. For instance, our attack against TLS can
be directly applied against open wireless networks. How-
ever, these days many wireless networks are protected
using WPA2 [71]. This means that all packets, includ-
ing their IP and TCP headers, are encrypted. Hence we
can no longer use these headers to isolate and inspect
TLS connections. Nevertheless, we show it is possible to
uncover the size of an HTTP message even when Wi-Fi
encryption is used on top of TLS.
In the Wi-Fi protocol, the sender first prepends a fixed-
length header to the packet being transmitted, and then
encrypts the resulting packet [28]. To encrypt and protect
a packet, the only available ciphers in a Wi-Fi network
are WEP, TKIP, or CCMP. Note that WPA1 and WPA2
are not ciphers, but certification programs by the Wi-Fi
Alliance, and these programs mandate support for either
TKIP or CCMP, respectively. Since both WEP and TKIP
use RC4, and CCMP uses AES in counter mode, padding
is never added when encrypting a packet. Therefore, no
matter which cipher is used, we can always determine the
precise length of the encrypted plaintext. Finally, Wi-Fi
encryption is self-synchronizing, meaning that a receiver
can decrypt packets even if previous ones were missed or
blocked.
Similar to our attack against TLS, we determine when
the resource is being transmitted by signaling our own
server before and after we fetch the targeted resource.
However, we can no longer easily determine which pack-
ets correspond to the requested resource as Wi-Fi en-
crypts the IP and TCP headers. Consequently, any back-
ground traffic will interfere with our attack. One option
is to execute the attack only if there is no background
traffic. Unfortunately, if the user is actively browsing
websites or streaming videos, periods without traffic are
generally too short. In other words, it is hard to predict
whether a period without traffic will be long enough to
fetch the complete resource. Our solution is to wait for a
small traffic pause, and extend this pause by blocking all
packets that are not part of the TCP connection that will
fetch the resource. Blocking packets in a secure Wi-Fi
network is possible by using a channel-based man-in-
the-middle (MitM) attack [61]. Essentially, the attacker
clones the Access Point (AP) on a different channel, and
forwards or blocks packets to, and from, the real AP. The
channel-based MitM also has another advantage: if the
adversary misses a packet sent by either a client or AP,
the sender will retransmit the packet. This is because the
cloned AP, and cloned clients, must explicitly acknowl-
edge packets. Hence our attack is immune to packet loss
at the Wi-Fi layer. Once we start measuring the size of
the resource, we only forward packets that could be part
of the connection fetching this resource. First, this means
allowing any packets with a size equal to a TCP SYN or
ACK. Second, we have to allow the initial TLS hand-
shake and the HTTP request that fetches the resource.
Since both can be detected based on the length of Wi-Fi
packets, it is possible to only forward packets that belong
to the first TLS handshake and HTTP request. By block-
ing other outgoing requests, servers will refrain from re-
plying with new traffic. Hence we can still fetch our tar-
geted resource, but all other traffic is temporarily halted.
In experiments the above technique proved highly suc-
cessful. Even when the victim was browsing websites or
streaming YouTube videos, it correctly isolated the TLS
connection fetching the resource. We also tested the at-
tack when the victim was constantly generating traffic by
sending ping requests of random sizes. Since the size of
these packets rarely matches that of a TCP ACK/SYN or
TLS handshake packet, all ping requests were blocked,
and the correct connection was still successfully isolated.
The next step is to subtract the overhead added by
Wi-Fi and TLS. Since none of the cipher suites in Wi-Fi
use padding, it is straightforward to remove padding
added by the Wi-Fi layer. However, we cannot count the
452  25th USENIX Security Symposium 
USENIX Association
number of TLS records sent as their headers are now en-
crypted. Nevertheless, for both nginx and Apache with
HTTP/1.1, we found that a new TLS record is used for
every 214 bytes of plaintext. This allows us to predict
the number of TLS records that were used, and thereby
the overhead created by these records. We discovered
only one exception to this rule. If an Apache server uses
chunked content encoding, each chunk is sent in a sep-
arate TLS record. This means that the number of TLS
records become application-specific, and the attacker has
to fine-tune his prediction for every targeted resource.
We remark that this behavior of Apache is not recom-
mended, because it facilitates chunked-body-truncation
attacks against browsers [5].
When HTTP/2 is used, the situation becomes more te-
dious. Here we have to predict both the number of TLS
records, as well as the number, and types, of HTTP/2
frames. We found that these numbers are predictable for
the first HTTP/2 response in a TLS connection. Since
all browsers limit the number of open TCP connections,
we first close existing connections by requesting several
pages hosted on different domains. After doing this, a
new connection will be used to fetch the targeted re-
source, meaning we can predict the amount of overhead.
Apache always uses HTTP/2 data frames with a payload
of 16348 bytes, even when chunked content encoding is
used. Furthermore, the TLS records always have a pay-
load length of 1324, except for every 100th TLS record,
which has a length of 296. Finally, Apache always sends
the same three HTTP/2 control frames, spread over two
TLS records, before sending the resource itself.
frames in either one or
For new TLS connections, nginx sends three ini-
two
tial HTTP/2 control
the time only one
TLS records, where most of
TLS record is used.
Then it enters an initializa-
tion phase where the first 10 TLS records have a
predictable size, with each size taken from the set
it
{8279,8217,4121,4129}. After this initial phase,
repeats the sequence [16408,16408,16408,16408,96],
with the exception that at relatively infrequent and ran-
dom times a TLS record of size 60 is used instead of 96.
However, as this is only a small difference, it generally
affects the number of TLS records by at most one. All
combined, if we assume the least number of TLS records
are used, we underestimate the actual number of TLS
records by at most two. In fact, most of the time no extra
records are used. Hence an attacker can make multiple
measurements, and pick the most common length as be-
ing the one without the extra (one or two) records.
3.4 Browser-based Techniques
Over the last few years, one of the most important evolu-
tions on the web is the increase of support for mobile
Algorithm 1 Uncover the size of resources by abusing
the per-site quota limit