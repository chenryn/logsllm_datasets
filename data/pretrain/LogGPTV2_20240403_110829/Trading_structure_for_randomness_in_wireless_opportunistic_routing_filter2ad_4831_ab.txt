where the cji’s are random coefﬁcients picked by the node, and
the pi’s are native packets from the same batch. We call (cid:2)cj =
(cid:2)
(cj1, . . . , cji, . . . , cjK) the code vector of packet p
j . Thus, the code
vector describes how to generate the coded packet from the native
packets.
P
The sender attaches a MORE header to each data packet. The
header reports the packet’s code vector (which will be used in de-
coding), the batch ID, the source and destination IP addresses, and
the list of nodes that could participate in forwarding the packet
(Fig. 3). To compute the forwarder list, we leverage the ETX cal-
culations [11]. Speciﬁcally, nodes periodically ping each other and
estimate the delivery probability on each link. They use these prob-
abilities to compute the ETX distance to the destination, which is
the expected number of transmissions to deliver a packet from each
node to the destination. The sender includes in the forwarder list
nodes that are closer (in ETX metric) to the destination than itself,
ordered according to their proximity to the destination.
The sender keeps transmitting coded packets from the current
batch until the batch is acked by the destination, at which time, the
sender proceeds to the next batch.
4.2 Forwarders
Nodes listen to all transmissions. When a node hears a packet, it
checks whether it is in the packet’s forwarder list. If so, the node
checks whether the packet contains new information, in which case
it is called an innovative packet. Technically speaking, a packet is
innovative if it is linearly independent from the packets the node has
previously received from this batch. Checking for independence can
be done using simple algebra (Gaussian Elimination [24]). The node
ignores non-innovative packets, and stores the innovative packets it
receives from the current batch.
If the node is in the forwarder list, the arrival of this new packet
triggers the node to broadcast a coded packet. To do so the node cre-
ates a random linear combination of the coded packets it has heard
from the same batch and broadcasts it. Note that a linear combina-
tion of coded packets is also a linear combination of the correspond-
ing native packets. In particular, assume that the forwarder has heard
(cid:2)
j =
i cjipi, where pi is a native packet.
coded packets of the form p
It linearly combines these coded packets to create more coded pack-
(cid:2)
j , where rj’s are random numbers. The
ets as follows: p
j rjp
(cid:2)(cid:2)
P
resulting coded packet p
can be expressed in terms of the native
(cid:2)(cid:2) =
j rjcji)pi; thus, it
packets as follows p
is a linear combination of the native packets themselves.
i cjipi) =
P
(
(cid:2)(cid:2) =
P
P
P
P
(rj
j
i
4.3 Destination
For each packet it receives, the destination checks whether the
packet is innovative, i.e., it is linearly independent from previously
received packets. The destination discards non-innovative packets
because they do not contain new information. Once the destination
receives K innovative packets, it decodes the whole batch (i.e., it
obtains the native packets) using simple matrix inversion:
1
CA ,
−1 0
B@
1
CA =
0
B@
1
CA
0
B@
c1K
p1
...
pK
c11
...
cK1
. . .
. . .
. . .
cKK
(cid:2)
p
1
...
(cid:2)
p
K
(cid:2)
where, pi is a native packet, and p
i is a coded packet whose code
vector is (cid:2)ci = ci1, . . . , ciK. As soon as the destination decodes the
batch, it sends an acknowledgment to the source to allow it to move
to the next batch. ACKs are sent using best path routing, which is
possible because MORE uses standard 802.11 and co-exists with
shortest path routing. ACKs are also given priority over data packets
at every node.
5. PRACTICAL CHALLENGES
In §4, we have described the general design of MORE. But for
the protocol to be practical, MORE has to address 3 additional chal-
lenges, which we discuss in detail below.
5.1 How Many Packets Does a Forwarder Send?
In traditional best path routing, a node keeps transmitting a packet
until the nexthop receives it, or the number of transmissions exceeds
a particular threshold, at which time the node gives up. In oppor-
tunistic routing, however, there is no particular nexthop; all nodes
closer to the destination than the current transmitter are potential
nexthops and may participate in forwarding the packet. How many
transmissions are sufﬁcient to ensure that at least one node closer
to the destination has received the packet? This is an open question.
Prior work has looked at a simpliﬁed and theoretical version of the
problem that assumes smooth trafﬁc rates and unlimited wireless
capacity [27, 28]. Even under these assumptions, the proposed al-
gorithm requires solving a convex optimization with constraints that
grow exponentially with the maximum number of nodes reached by
a broadcast [27, 28].
In this section, we provide a heuristic-based2 practical solution to
the above problem. Our solution has the following desirable charac-
teristics: 1) It has low complexity. 2) It is distributed. 3) It naturally
integrates with 802.11 and preserves spatial reuse. 4) It is practical–
i.e., it makes no assumptions of inﬁnite capacity or trafﬁc smooth-
ness, and requires only the average loss rate of the links.
(a) Approach: Deﬁne the distance from a node, i, to the destina-
tion, d, as the expected number of transmissions to deliver a packet
from i to d along the best path– i.e., node i’s ETX [11]. We pro-
pose the following heuristic to route a packet from the source, s, to
the destination, d: when a node transmits a packet, the node clos-
est to the destination in ETX metric among those that receive the
packet should forward it onward. Ensuring that the node closest to
the destination forwards the packet reduces the expected number of
transmissions to deliver the packet to its ﬁnal destination, and thus
improves the overall throughput.
Formally, let N be the number of nodes in the network. For any
two nodes, i and j, let i j zi(1−ij). For each packet j receives, j should forward it only if
no node with lower ETX metric hears the packet. This happens with
ik. Thus, in expectation, the number of packets
probability
that j must forward, denoted by Lj, is:
(zi(1 − ij)
X
Y
Lj =
ik).
Q
(1)
kj
k j. The
to compute the product
idea is to instead compute and accumulate the contribution of node
i to the Lj’s of all nodes j with lower ETX, so that each time we only
need to make an incremental update to this product (denoted P in
the algorithm).
ki
TX crediti =
ziP
j>i zj(1 − ji) .
(3)
Thus, in MORE, a forwarder node i keeps a credit counter.
When node i receives a packet from a node upstream, it increments
the counter by its TX credit. When the 802.11 MAC allows the node
to transmit, the node checks whether the counter is positive. If yes,
the node creates a coded packet, broadcasts it, then decrements the
counter. If the counter is negative, the node does not transmit. The
ETX metric order ensures that there are no loops in crediting, which
could lead to credit explosion.
(e) Pruning: MORE’s solution to the above might include for-
warders that make very few transmissions (zi is very small), and
thus, have very little contribution to the routing. In a dense network,
we might have a large number of such low contribution forwarders.
Since the overhead of channel contention increases with the num-
ber of forwarders, it is useful to prune such nodes. MORE prunes
forwarders that are expected to perform less than 10% of all the
transmissions for the batch (more precisely, it prunes nodes whose
zi < 0.1
P
j∈N zj).
5.2 Stopping Rule
In MORE, trafﬁc is pumped into the network by the source. The
forwarders do not generate trafﬁc unless they receive new packets.
It is important to throttle the source’s transmissions as soon as the
destination has received enough packets to decode the batch. Thus,
once the destination receives the Kth innovative packet, and before
fully decoding the batch, it sends an ACK to the source.
To expedite the delivery of ACKs, they are sent on the shortest
path from destination to source. Furthermore, ACKs are given pri-
ority over data packets at all nodes and are reliably delivered using
local retransmission at each hop.
When the sender receives an acknowledgment for the current
batch, it stops forwarding packets from that batch. If the transfer
is not complete yet, the sender proceeds to transmit packets from
the next batch.
The forwarders are triggered by the arrival of new packets, and
thus stop transmitting packets from a particular batch once the
sender stops doing so. Eventually the batch will timeout and be
ﬂushed from memory. Additionally, forwarders that hear the ACK
while it is being transmitted towards the sender immediately stop
transmitting packets from that batch and purge it from their mem-
ory. Finally, the arrival of a new batch from the sender causes a for-
warder to ﬂush all buffered packets with batch ID’s lower than the
active batch.
5.3 Fast Network Coding
Network coding, implemented naively, can be expensive. As out-
lined above, the routers forward linear combinations of the packets
they receive. Combining N packets of size S bytes requires NS multi-
plications and additions. Due to the broadcast nature of the wireless
medium, routers could receive many packets from the same batch.
If a router codes all these packets together, the coding cost may be
overwhelming, creating a CPU bottleneck.
MORE employs three techniques to produce efﬁcient coding that
ensure the routers can easily support high bit rates.
(a) Code only Innovative Packets: The coding cost scales with the
number of packets coded together. Typically, network coding makes
routers forward linear combinations of the received packets. Coding
non-innovative packets, however, is not useful because they do not
add any information content. Hence, when a MORE forwarder re-
ceives a new packet, it checks if the packet is innovative and throws
away non-innovative packets. Since innovative packets are by deﬁ-
nition linearly independent, the number of innovative packets in any
batch is bounded by the batch size K. Discarding non-innovative
packets bounds both the number of packets the forwarder buffers
from any batch, and the number of packets combined together to
produce a coded packet. Discarding non-innovative packets is par-
Figure 3: MORE Header. Grey ﬁelds are required while the white ﬁelds
are optional. The packet type identiﬁes batch ACKs from data packets.
ticularly important in wireless because the broadcast nature of the
medium makes the number of received packets much larger than in-
novative packets.
(b) Operate on Code Vectors: When a new packet is received,
checking for innovativeness implies checking whether the received
packet is linearly independent of the set of packets from the same