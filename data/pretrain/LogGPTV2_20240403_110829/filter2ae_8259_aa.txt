**作者：李木**  
**原文链接：**
# PP/PPL(s)背景概念
首先，PPL表示Protected Process Light，但在此之前，只有Protected Processes。受保护进程的概念是随Windows
Vista / Server 2008引入的，其目的不是保护您的数据或凭据。其最初目标是保护媒体内容并遵守DRM（数字版权管理）要求。Microsoft
开发了这种机制，以便您的媒体播放器可以读取例如蓝光，同时防止您复制其内容。当时的要求是镜像文件（即可执行文件）必须使用特殊的 Windows Media
证书进行数字签名（如Windows Internals的“受保护的进程”部分中所述）。
实际上，受保护的进程只能由具有非常有限的权限的未受保护进程访问：PROCESS_QUERY_LIMITED_INFORMATION,PROCESS_SET_LIMITED_INFORMATION和。
对于一些高度敏感的过程，这个集合甚至可以减少PROCESS_TERMINATEPROCESS_SUSPEND_RESUME
几年后，从Windows 8.1 / Server 2012 R2开始，Microsoft 引入了Protected Process
Light的概念。PPL实际上是对之前Protected Process模型的扩展，增加了“Protection
level”的概念，这基本上意味着一些PP(L)进程可以比其他进程受到更多的保护。
当 PP 模型首次与 Windows Vista 一起引入时，进程要么受到保护，要么不受保护。然后，从 Windows 8.1 开始，PPL
模型扩展了这一概念并引入了保护级别。直接后果是一些 PP(L)
现在可以比其他的受到更多保护。最基本的规则是，未受保护的进程只能使用一组非常受限的访问标志打开受保护的进程，例如PROCESS_QUERY_LIMITED_INFORMATION.
如果他们请求更高级别的访问权限，系统将返回错误。Accessis Denied
对于 PP(L)s，它有点复杂。他们可以请求的访问级别取决于他们自己的保护级别。此保护级别部分由文件数字证书中的特殊 EKU
字段确定。创建受保护进程时，保护信息存储在EPROCESS内核结构中的特殊值中。此值存储保护级别（PP 或
PPL）和签名者类型（例如：反恶意软件、Lsa、WinTcb 等）。签名者类型在 PP(L) 之间建立了一种层次结构。
最基本的规则是，未受保护的进程只能使用一组非常受限的访问标志打开受保护的进程，例如PROCESS_QUERY_LIMITED_INFORMATION.
如果他们请求更高级别的访问权限，系统将返回错误。Accessis Denied。
当 PP 模型首次与 Windows Vista 一起引入时，进程要么受到保护，要么不受保护。然后，从 Windows 8.1 开始，PPL
模型扩展了这一概念并引入了保护级别。直接后果是一些 PP(L)
现在可以比其他的受到更多保护。最基本的规则是，未受保护的进程只能使用一组非常受限的访问标志打开受保护的进程，例如PROCESS_QUERY_LIMITED_INFORMATION.
如果他们请求更高级别的访问权限，系统将返回错误。Accessis Denied
对于 PP(L)s，它有点复杂。他们可以请求的访问级别取决于他们自己的保护级别。此保护级别部分由文件数字证书中的特殊 EKU
字段确定。创建受保护进程时，保护信息存储在EPROCESS内核结构中的特殊值中。此值存储保护级别（PP 或 PPL）和Signer类型（例如：
PsProtectedSignerAntimalware 、Lsa、WinTcb 等）。Signer类型在 PP(L) 之间建立了一种层次结构。以下是适用于
PP(L) 的基本规则：
# PPl(s)基本概念
### 定义保护级别
Protected Process Light的内部结构 
在windows中，EPROCESS结构现在具有以下类型的"保护"字段：
    _PS_PROTECTION  
    +0x000 Level            : UChar 
    +0x000 Type             : Pos 0,3 Bits  
    +0x000 Audit            : Pos 3,1 Bit 
    +0x000 Signer           : Pos 4,4 Bits
其中Type定义进程是 PP 还是 PPL，Type的值可以是以下之一：
    _PS_PROTECTED_TYPE 
    PsProtectedTypeNone = 0n0 
    PsProtectedTypeProtectedLight = 0n1 
    PsProtectedTypeProtected = 0n2 
    PsProtectedTypeMax = 0n3
Signer即实际保护级别,Signer的值可以是以下之一：
    _PS_PROTECTED_SIGNER 
    PsProtectedSignerNone = 0n0 
    PsProtectedSignerAuthenticode = 0n1
    PsProtectedSignerCodeGen = 0n2 
    PsProtectedSignerAntimalware = 0n3 
    PsProtectedSignerLsa = 0n4  
    PsProtectedSignerWindows = 0n5 
    PsProtectedSignerWinTcb = 0n6  
    PsProtectedSignerMax = 0n7
### 保护级别组合
进程的保护级别由这两个值的组合定义。下表列出了最常见的组合。
**Protection level** | **Value** | **Signer** | **Type**  
---|---|---|---  
PS_PROTECTED_SYSTEM | 0x72 | WinSystem (7) | Protected (2)  
PS_PROTECTED_WINTCB | 0x62 | WinTcb (6) | Protected (2)  
PS_PROTECTED_WINDOWS | 0x52 | Windows (5) | Protected (2)  
PS_PROTECTED_AUTHENTICODE | 0x12 | Authenticode (1) | Protected (2)  
PS_PROTECTED_WINTCB_LIGHT | 0x61 | WinTcb (6) | Protected Light (1)  
PS_PROTECTED_WINDOWS_LIGHT | 0x51 | Windows (5) | Protected Light (1)  
PS_PROTECTED_LSA_LIGHT | 0x41 | Lsa (4) | Protected Light (1)  
PS_PROTECTED_ANTIMALWARE_LIGHT | 0x31 | Antimalware (3) | Protected Light (1)  
PS_PROTECTED_AUTHENTICODE_LIGHT | 0x11 | Authenticode (1) | Protected Light
(1)  
### Signer类型
在Protected Processes的早期，保护级别是二进制的，一个进程要么受保护，要么不受保护。当 Windows NT 6.3 引入 PPL
时，PP 和 PPL 现在都具有由Signer级别确定的保护级别，那么我们需要了解如何确定Signer类型和保护级别。
Signer级别通常由文件数字证书中的一个特殊字段确定：增强型密钥使用 (EKU)。
### 保护优先级
在Windows Internals 7th Edition Part 1的“ Protected Process Light
(PPL)部分，我们可以看到以下
    When interpreting the power of a process, keep in mind that first, protected processes always trump PPLs, and that next, higher-value signer processes have access to lower ones, but not vice versa.
如果它的Signer级别大于或等于,那么一个PP 可以打开一个 PP 或具有完全访问权限的 PPL  
如果它的Signer级别大于或等于,那么一个 PPL 可以打开另一个具有完全访问权限的 PPL  
PPL 无法打开具有完全访问权限的 PP，无论其Signer级别如何
**例如**
    wininit.exe– 会话 0 初始化
    lsass.exe– LSASS 流程
    MsMpEng.exe– Windows Defender 服务
**保护级别分别为**
Pr. | Process | Type | Signer | Level  
---|---|---|---|---  
1 | wininit.exe | Protected Light | WinTcb | PsProtectedSignerWinTcb-Light  
2 | lsass.exe | Protected Light | Lsa | PsProtectedSignerLsa-Light  
3 | MsMpEng.exe | Protected Light | Antimalware |
PsProtectedSignerAntimalware-Light  
这 3 个 PPL 的是NT AUTHORITY\SYSTEM运行，那么也是具有相同的SeDebugPrivilege权限，那么我们可以直接分析保护级别
wininit.exesigner type为WinTcb，它是 PPL
的最高可能值，那么它可以访问其他两个进程。然后，lsass.exe可以访问MsMpEng.exe，因为signer级别Lsa高于Antimalware。最后，MsMpEng.exe不能访问其他两个进程，因为它具有最低级别。不能访问其他两个进程，因为它具有最低级别。
例如，当 LSA 保护启用时，作为 PPL 执行，可以将使用Process Explorer观察保护级别：PsProtectedSignerLsa-Light
如果需要访问它的内存，那么需要调用并指定访问标志。如果调用的进程不受保护，则无论用户的权限如何，此调用都会立即失败并出现错误：
但是，如果调用进程是具有更高级别的 PPL (DeniedWinTcb例如），相同的调用会成功（只要用户具有适当的权限）
### 无法杀死的进程
具有属于 Antimalware、Lsa 或 WinTcb 的受保护签名者的进程仅授予 0×3800 (~0xFC7FF) - 换句话说，禁止
PROCESS_TERMINATE
权限。而对于禁止PROCESS_TERMINATE的同一个组，我们也可以看到THREAD_SUSPEND_RESUME也被禁止了。
这里攻击PPl的主要为在渗透测试中比较常见的难点，例如Lsass的dump密码和AV,EDR的绕过和破坏。
# 攻击PPL的Lsass进程
这里主要讨论lsass中开启了PPL之后dump密码的手法。
在微软文档中我们可以使用以下方法知道：  
1.以管理员身份打开注册表编辑器( )；regedit.exe  
2.打开钥匙HKLM\SYSTEM\CurrentControlSet\Control\Lsa；  
3.添加DWORD值RunAsPPL并将其设置为1;4.重启。
如果在AD域环境中为：  
1.打开组策略管理控制台 (GPMC)  
2.创建在域级别链接或链接到包含您的计算机帐户的组织单位的新 GPO。或者，您可以选择已部署的 GPO。  
3.右键单击 GPO，然后单击编辑以打开组策略管理编辑器。  
4.展开计算机配置，展开首选项，然后展开Windows 设置。  
5.右键单击注册表，指向新建，然后单击注册表项。将出现“新建注册表属性”对话框。  
6.在Hive列表中，单击HKEY_LOCAL_MACHINE。  
7.在Key Path列表中，浏览至SYSTEM\CurrentControlSet\Control\Lsa。  
8.在值名称框中，键入RunAsPPL。  
9.在值类型框中，单击REG_DWORD。  
10.在数值数据框中，键入00000001。  
11.单击确定。 11.单击确定。
启用之后。lsass.exe为：
同时无法对lsass的内存进行访问：
### 加载驱动程序获取hash
在 Windows 中，本地用户帐户使用算法 ( NTLM ) 进行哈希处理，并存储在称为
SAM（安全帐户管理器）的数据库中，该数据库本身就是一个注册表配置文件。就像其他操作系统一样，存在各种离线和在线攻击，以获取、重置或以其他方式重用存储在
SAM 中的哈希值。
本地安全机构 (LSASS) 的进程管理此信息的运行时状态，并最终负责所有登录操作（包括通过 Active Directory
进行的远程登录）。一般来说我们在渗透测试中都会使用minikatz对lsass.exe进行dump密码的操作。
Mimikatzprivilege::debug中的命令成功启用；SeDebugPrivilege，但是该命令sekurlsa::logonpasswords失败并出现错误代码0x00000005，从minikatz代码kuhl_m_sekurlsa_acquireLSA()函数中我们可以简单了解为
    HANDLE hData = NULL;
    DWORD pid;
    DWORD processRights = PROCESS_VM_READ | PROCESS_QUERY_INFORMATION;
    kull_m_process_getProcessIdForName(L"lsass.exe", &pid);
    hData = OpenProcess(processRights, FALSE, pid);
    if (hData && hData != INVALID_HANDLE_VALUE) { 
      // if OpenProcess OK
      } else {  
       PRINT_ERROR_AUTO(L"Handle on memory");
       }
我们在之前的截图中可以看到，这个函数失败了，错误代码就是“访问被拒绝”。这证实，一旦启用，即使是管理员也无法使用所需的访问标志打开。
在Mimikatz中使用数字签名的驱动程序来删除内核中 Process 对象的保护标志
minikatz安装驱动程序
    mimikatz # !+
    [*] 'mimidrv' service not present
    [+] 'mimidrv' service successfully registered