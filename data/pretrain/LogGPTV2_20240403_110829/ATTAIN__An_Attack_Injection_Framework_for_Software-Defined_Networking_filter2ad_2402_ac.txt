φ3 = (n3, γ3, λ3, α3)
n3 = (c1, s1)
γ3 = ΓN oT LS
λ3 = READMESSAGE(msg, MESSAGETYPE = FLOW_MOD)
α3 = {α31 , . . . }
α31
= . . .
(a) Attack states Σ = {σ1, σ2, σ3, . . . } that model the memory of
previously seen PACKET_IN and PACKET_OUT messages.
{α11}
{α21}
{. . .}
σstart
σ1
{α12
}
σ2
{α22
}
σ3
(b) Attack state graph ΣG representation that models the memory of
previously seen PACKET_IN and PACKET_OUT messages.
Fig. 6. Example of an attack with attack states that model prior message
history. States σ1 and σ2 capture the notion that a PACKET_IN message and
a PACKET_OUT message were seen prior to arrival of a FLOW_MOD message.
Figure 5 shows how such an attack would be modeled as an
attack state graph consisting of one attack state, σ1.
Perhaps an attack should take an action only after a certain
sequence of messages. State transitions can encapsulate such
prior message history. Consider the attack shown in Figure 6.
An action is taken when a FLOW_MOD message is seen only
after a PACKET_IN message and a PACKET_OUT message
have been seen on the (c1, s1) control plane connection.
Transitions between states σ1 to σ2 and states σ2 to σ3 capture
the memory of seeing messages in this order.
VI. ATTACK INJECTOR
We now describe our attack injector that implements the
aforementioned attack model and attack language in an SDN
C, S, H, P, 
ND, NC 
ΓNC 
Σ 
COMPILER 
System model 
parser 
Attack model 
parser 
Attack states 
parser 
Executable 
code 
generator 
SDN controllers 
M
M
… 
RUNTIME 
INJECTOR 
Message 
modifier 
M
Protocol message 
encoder/decoder 
Control plane 
connection proxy 
Attack 
executor 
Control plane connection 
Monitor 
M
M
M
SDN switches 
… 
M
Fig. 7. Attack injector architecture.
system under study.
A. Architecture Overview
Figure 7 shows the components of the attack injector
architecture, which include the SDN system’s switches and
controllers, a compiler to generate executable code, a runtime
injector to inject the attack, and a set of monitors to record the
results. We do not validate the security of the injector itself
and assume it to be secure in a testing environment.
B. Components
We describe each of the components below.
1) Compiler: The compiler converts user-deﬁned ﬁles spec-
ifying the system model, attack model, and attack states into
executable code that the attack injector can run at runtime.
Within the compiler, the system model parser parses the user-
deﬁned system model ﬁle, which includes the end host, con-
troller, and switch address identiﬁers. The attack model parser
parses the user-deﬁned attack model ﬁle, which includes the
attacker capabilities mapped to control plane connections. The
attack states parser parses the user-deﬁned attack states ﬁle,
which includes the conditional expressions, storage, actions,
rules, and attack state graph comprising the attack. Finally, the
executable code generator takes the parser data and generates
an executable code ﬁle to be included at the attack’s runtime.
2) Runtime Injector: The runtime injector actuates the
attack using the generated executable code via the attack
executor. It executes the compiler-generated code, keeps track
of the attack’s current state, and compares incoming messages
with the current state’s rules to take appropriate actions.
Algorithm 1 describes how the attack executor executes an
attack. At initialization, the attack executor sets its current
state to the start attack state (line 2). From then on, the attack
executor waits for an asynchronous incoming message from
the control plane connection proxy (line 4). When received,
the message is copied into an outgoing message list (line 5)
and the state is saved before the message is processed (line 6).
Each rule in the saved state is evaluated against the message
(lines 7–9); if the message’s conditional expression matches,
then each related action in that rule is executed (lines 11–
15). Any GOTOSTATE actions set the next state of the system
572
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
σcurrent ← σstart
while TRUE do
Algorithm 1 Attack executor algorithm for running attacks.
1: procedure ATTACKEXECUTOR(Σ, σstart)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
Wait for asynchronous incoming message msgin
msgsout ← [msgin]
σprevious ← σcurrent
for each φ in σprevious do
(n, γ, λ, α) ← φ
if λ(msgin) = TRUE then
for each αi in α do
else
if αi = GOTOSTATE(σgoto) then
σcurrent ← σgoto
msgsout ← MESSAGEMODIFIER(
αi, msgin, msgsout)
end for
for each msg in msgsout do
Send message msg to destination
end if
end for
end if
15:
16:
17:
18:
19:
20:
end for
21:
end while
22:
23: end procedure
(lines 11–12). The MESSAGEMODIFIER function evaluates the
speciﬁc action and may alter the outgoing message list (e.g.,
an action’s dropping of the message would remove it from the
list; an action’s duplicating of the message would append a
second copy to the list). Finally, each message in the outgoing
message list is sent to its respective destination (lines 19–21).
The control plane connection proxy proxies all control plane
connections for interposing, and it operates as a server for
switch connections and as a client for controller connections.
A practitioner need only modify his or her network’s switch
conﬁgurations to point to the proxy as the SDN controller. The
message modiﬁer modiﬁes and injects control plane messages
according to the attack state rules, and the protocol message
encoder/decoder uses an OpenFlow protocol library to encode
and decode control plane message payloads.
3) Monitors: As part of the testing framework, practitioners
can strategically place monitors (e.g., iperf or tcpdump)
throughout the network to actuate, record, or later analyze
events. We note that practitioners can ﬂexibly actuate monitors
anywhere by invoking the SYSCMD() action within attack
descriptions. We consider the modeling and analysis of those
actions’ results (i.e., validation) to be outside our paper’s
scope, since validation semantics vary depending on context.
C. Implementation
We implemented the compiler and runtime injector in
Python, and we wrote XML schemas for the system, at-
tack model, and attack states. Our runtime injector uses the
Loxi [13] library for processing OpenFlow messages, and the
message modiﬁer and attack executor are represented as data
structures and functions within the executable code ﬁle.
We proxied all control plane connections through a single-
threaded, centralized runtime injector instance. This allowed
us to impose a total ordering on messages seen by the
runtime injector. Our architecture still supports a distributed
runtime injector, as one would need to share the value of
the current global state, σ, and updates to the storage, Δ, in
a consistent way among participating injector instances. We
discuss potential challenges to doing so in Section VIII-C.
D. Scalability Analysis
We consider the scalability of storing system component
representations and the runtime complexity of executing rules.
1) Memory Complexity: The data plane graph ND contains
|S|+|H| vertices, up to (|S|+|H|)2 edges, and up to 2×(|S|+
|H|)2 edge-labeled attributes. Thus, ND’s memory complexity
is of the order O(|S| + |H| + 3 × (|S| + |H|)2) = O((|S| +
|H|)2). The control plane connections relation NC contains
|C| number of controllers mapped to |S| number of switches.
As a result, up to |C||S| relations can be formed in the worst
case, where each and every controller maintains a control plane
connection with each and every switch. Thus, NC’s memory
complexity is of the order O(|C||S|). The collective set of
attack states is Φ, and thus the memory complexity of storing
the attack is of the order O(|Φ|).
2) Runtime Complexity: Each conditional expression is
deﬁned and considered as one of two possible cases, and
the manner in which a set of rules executes in a given
state σ depends on how that is done. In the ﬁrst case, in
which no more than one of the conditional expressions of the
rules in the state evaluates to TRUE, the worst-case runtime
complexity is of the order O(|Φ| + |αexecuted|). We can
intuitively see that at runtime, it will be necessary to check
up to |Φ| rules’ conditional expressions and, upon ﬁnding an
expression that evaluates to TRUE, to execute up to |αexecuted|
actions for that one rule. In the second case, in which up
to all of the conditional expressions of the rules in the state
evaluate to TRUE, the worst-case runtime complexity is of the
order O(|Φ||αmax|), where αmax denotes the set of actions
corresponding to the rule with the greatest number of actions.
VII. EVALUATION
We evaluate ATTAIN’s efﬁcacy as an attack injection
framework by considering a small enterprise network case
study. We designed and deployed two resiliency attacks—ﬂow
modiﬁcation suppression and connection interruption—against
the Floodlight [6], POX [14], and Ryu [15] SDN controllers
for cross-controller comparison.
A. Case Study: Small Enterprise Network
We modeled a small-scale enterprise network whose data
plane and control plane are represented in Figures 8 and 9,
respectively. An enterprise has a diversity of users and require-
ments, such as front-facing Web services, internal databases
and storage, directory and domain services, and user work-
stations and clients. Enterprises often make certain resources
573
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
h2
(p22 , NULL)
(NULL, p22
)
h3
(NULL, p32
)
(p31 , p23
)
(p32 , NULL)
h1
(p11 , NULL)
(p21 , p12
)
s2
s3
(p23 , p31
)
(NULL, p33
)
(NULL, p11
)
(p12 , p21
)
(p34 , p41
)
s1
(p33 , NULL)
(p41 , p34
)
h4
s4
(p42 , NULL)
(NULL, p43
)
(NULL, p42
(p43 , NULL)
)
h5
h6
Fig. 8. Enterprise network case study data plane graph ND. The data plane
includes six end hosts and four switches.
c1
(c1, s1) (c1, s2) (c1, s3) (c1, s4)
s1
s2
s3
s4
Fig. 9. Enterprise network case study control plane connections NC. The
control plane includes one controller and four switches.
available to the public, but do not allow unauthorized or ex-
ternal users to access certain internal services and hosts; these
enterprises enforce isolation through network partitioning.
The SDN approach argues for unifying security services
together rather than handling them separately [16], [17]. How-
ever, if we assume that an attacker has the capability to disrupt
network behavior, we should consider the resiliency aspects of
maintaining proper service. Thus, our experiments attempt to
disrupt an SDN system’s behavior to violate performance and
security properties.
1) System Model: Our system model includes an external-
facing Web server (h1), a gateway interface to a router
that connects to the Internet (h2), servers that provide in-