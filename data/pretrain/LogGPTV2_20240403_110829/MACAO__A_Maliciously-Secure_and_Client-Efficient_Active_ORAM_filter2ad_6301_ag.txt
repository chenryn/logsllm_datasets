software protection [30]. Since then, several ORAM schemes
have been proposed (e.g., [31], [51]); however, none of these
can achieve the logarithmic bandwidth overhead that was
proven as the ORAM lower bound under O(1) blocks of client
storage [31]. In 2011, Shi et al. proposed a breakthrough in
ORAM constructions by using a tree structure [59]. This tree
paradigm led to efﬁcient ORAM scheme proposals (e.g., [64],
[66], [53], [28], [67], [14]) that can achieve the Goldreich-
Ostrovsky logarithmic communication bound in [31]. The most
simple and efﬁcient ORAM based on tree-ORAM paradigm
is Path-ORAM [64], where the client only needs to perform
read and write operations over a data path, whereas the server
only needs to provide storage functionality (e.g., data sending
and receiving only). Tree-based ORAMs have been adapted to
enable access pattern obliviousness in many applications such
as secure processors [43], oblivious data structures [68], [37],
[54], multi-party computation [67] and oblivious storage [17],
[56], [41], [70], [49], [4]. There are several ORAM schemes
that are speciﬁcally designed for oblivious ﬁle systems (e.g.,
[6], [44], [45], [14], [10]). We note that all these schemes are
different from our framework, where they focused on some
12
speciﬁc properties in ﬁle system applications such as range
queries [14], multi-client [44], [10] and/or parallel access [15].
Recently, Larsen and Nielsen in [40] have re-conﬁrmed the
existence of the logarithmic bandwidth overhead in passive
ORAM schemes (i.e., the server is storage-only). To reduce
the communication overhead, the concept of active ORAM
has been proposed, where the server can perform some com-
putation. Although many active ORAM schemes have been
presented (e.g., [53], [22], [25], [46], [5], [26], [21], [47]), most
of them either cannot surpass the logarithmic bound (i.e., [53],
[46]) or were shown insecure (i.e., [47], [3]). To the best of
our knowledge, only active ORAM schemes that harness HE
techniques [27], [19] can achieve the O(1) client bandwidth
overhead under reasonably large block sizes (e.g., O(log5 N )
where N is the number of data blocks) [5], [22], [25]. Despite
their communication efﬁciency, it has been shown in [33], [47]
that performing HE computation during the ORAM access
incurred signiﬁcantly more latency than streaming O(log N )
data blocks as in passive ORAM schemes.
√
To improve computation efﬁciency, ORAM has been ex-
plored in the distributed setting [61], [3], [33], [42], [32]. The
ﬁrst multi-server ORAM was proposed by Stefanov et al. [61],
where the (single-server) Partition-ORAM [63] paradigm was
transformed into the multi-server setting to achieve O(1) client
bandwidth overhead and low computation at the servers. The
main limitation of this scheme is that it incurs high client
storage overhead (i.e., O(
N )) due to the Partition-ORAM
paradigm. Lu et al. [42] and Kushilevitz et al. [39] adapted
the hierarchical ORAM construction in [31] to the multi-server
setting to reduce the communication overhead. Abraham et al.
proposed a two-server ORAM scheme [3], which exploits the
XOR-PIR protocol [18] for oblivious retrieval. Gordon et al.
proposed a two-server ORAM scheme [32], which removes
the need of updating the position map component
in the
tree-ORAM paradigm, thereby saving the factor of O(log N )
communication rounds incurred by accessing the position map
recursively at the server. Chan et al. [16] proposed a 3-server
construction with perfect security based on the hierarchical
model [31]. One of the most efﬁcient multi-server ORAM
schemes is S3ORAM [33], which harnesses Shamir secret
sharing [57] to perform homomorphic computations efﬁciently
over the tree-ORAM layout with triplet eviction [22]. These
two schemes only offer semi-honest security.
Another line of distributed ORAM research focuses on
the context of multi-party computation in the RAM model
[24], [67], [23], [38]. We note that this setting is different
from the standard client-server setting, in which there is no
trusted party having full access to the data, and all the client
operations are emulated by multiple parties in a privacy-
preserving manner. The aim is to perform secure computation
in the RAM model where both instructions and functions
are hidden from participants and thus ORAM is simply used
as a building block. Due to the stronger privacy model, all
these distributed ORAM schemes are less efﬁcient than the
distributed ORAM in the standard client-server setting. In
contrast to generic ORAM, there exist some special ORAMs
that conceal only either read or write patterns (but not both)
[11], [55], [65]. We note that most of these constructions are
more efﬁcient than generic ORAMs since they target on the
speciﬁc operation type (read or write).
Fig. 16: The proposed ODFS model.
VII. DISCUSSION AND CONCLUSION
In this paper, we proposed a new multi-server active
ORAM framework called MACAO that provides integrity,
access pattern obliviousness against an active adversary,
and the ability to perform secure computation simultane-
ously. MACAO synergies authenticated secret sharing and tree
ORAM paradigm to offer low client communication and server
computation while achieving a high level of security and
privacy in the presence of active adversaries. We conducted
extensive experiments on actual cloud platforms to validate
the efﬁciency of MACAO compared with the state-of-the-art.
• Use-Case – Oblivious Distributed File System: Our main
objective to design MACAO is to enable oblivious storage
and secure computation against active adversaries in data
outsourcing applications. MACAO schemes can be integrated
into existing distributed ﬁle systems to enable secure com-
putation with strong security and privacy including data con-
ﬁdentiality, integrity and access pattern obliviousness against
active adversaries. For instance, we sketch in Figure 16 an
instance of Oblivious Distributed File System (ODFS) by
integrating MACAO (i.e., gray boxes) into the Network File
System (NFS) [58]. Since NFS components are independent
with MACAO ones, the performance of ODFS can be easily
estimated given that the cost of every MACAO component was
presented in detail in §V-B. We leave the actual integration
and implementation of ODFS to our future work. Another
critical feature is to support the multi-user setting in ODFS,
where multiple users can obliviously access the outsourced
data concurrently. This requires a trusted proxy (as in [56])
to handle concurrent requests and enforce the access control
policy. Our MACAO can also serve as the oblivious access
protocol between the proxy and the servers. We leave such an
implementation to our future work.
REFERENCES
[1]
[2]
[3]
“Libtomcrypt, a fairly comprehensive, modular and portable crypto-
graphic toolkit,” Available at https://github.com/libtom/libtomcrypt.
“Zeromq distributed messaging,” Available at http://zeromq.org.
I. Abraham, C. W. Fletcher, K. Nayak, B. Pinkas, and L. Ren,
“Asymptotically tight bounds for composing oram with pir,” in IACR
International Workshop on Public Key Cryptography. Springer, 2017,
pp. 91–120.
[4] A. Ahmad, K. Kim, M. I. Sarfaraz, and B. Lee, “Obliviate: A data
oblivious ﬁlesystem for intel sgx.” in NDSS, 2018.
13
System call layerVirtual File System (VFS)NFS ClientRPC clientstubLocal file system interfaceSystem Call LayerVirtual File System (VFS)NFS serverRPC server stubLocal file system interfaceMACAO ClientMACAO ComputationModuleMACAOServerPosition mapSystem Call LayerVirtual File System (VFS)NFS serverRPC server stubLocal file system interfaceMACAO ComputationModuleMACAO Server⋮⋮⋮networkInter-server dedicated network[5] D. Apon, J. Katz, E. Shi, and A. Thiruvengadam, “Veriﬁable oblivi-
ous storage,” in International Workshop on Public Key Cryptography.
Springer, 2014, pp. 131–148.
[6] A. J. Aviv, S. G. Choi, T. Mayberry, and D. S. Roche, “Oblivisync:
Practical oblivious ﬁle backup and synchronization,” in NDSS, 2017.
[7] D. Beaver, “Efﬁcient multiparty protocols using circuit randomization,”
Springer, 1991, pp.
in Annual International Cryptology Conference.
420–432.
[8] A. Ben-Efraim and E. Omri, “Turbospeedz: Double your online spdz!
improving SPDZ using function dependent preprocessing,” in Applied
Cryptography and Network Security — ACNS 2019, June 5-7, 2019, to
appear. Available at https://eprint.iacr.org/2019/080.
[9] V. Bindschaedler, M. Naveed, X. Pan, X. Wang, and Y. Huang,
“Practicing oblivious access on cloud storage: the gap, the fallacy,
and the new way forward,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2015,
pp. 837–849.
[10] E.-O. Blass, T. Mayberry, and G. Noubir, “Multi-client oblivious
ram secure against malicious servers,” in International Conference on
Applied Cryptography and Network Security. Springer, 2017, pp. 686–
707.
[11] E.-O. Blass, T. Mayberry, G. Noubir, and K. Onarlioglu, “Toward robust
hidden volumes using write-only oblivious ram,” in Proceedings of
the 2014 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2014, pp. 203–214.
[12] E. Boyle and M. Naor, “Is there an oblivious ram lower bound?” in
Proceedings of the 2016 ACM Conference on Innovations in Theoretical
Computer Science. ACM, 2016, pp. 357–368.
[13] R. Canetti, “Security and composition of multiparty cryptographic
protocols,” Journal of CRYPTOLOGY, vol. 13, no. 1, pp. 143–202,
2000.
[14] A. Chakraborti, A. J. Aviv, S. G. Choi, T. Mayberry, D. S. Roche, and
R. Sion, “roram: Efﬁcient range oram with o (log2 n) locality.” in NDSS,
2019.
[15] A. Chakraborti and R. Sion, “Concuroram: High-throughput stateless
parallel multi-client oram,” in NDSS, 2019.
[16] T.-H. H. Chan, J. Katz, K. Nayak, A. Polychroniadou, and E. Shi,
“More is less: Perfectly secure oblivious algorithms in the multi-server
setting,” in International Conference on the Theory and Application of
Cryptology and Information Security. Springer, 2018, pp. 158–188.
[17] B. Chen, H. Lin, and S. Tessaro, “Oblivious parallel ram: Improved
efﬁciency and generic constructions,” in Theory of Cryptography Con-
ference. Springer, 2016, pp. 205–234.
[19]
[18] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan, “Private informa-
tion retrieval,” Journal of the ACM (JACM), vol. 45, no. 6, pp. 965–981,
1998.
I. Damg˚ard and M. Jurik, “A generalisation, a simpli. cation and
some applications of paillier’s probabilistic public-key system,” in
International Workshop on Public Key Cryptography. Springer, 2001,
pp. 119–136.
I. Damg˚ard, V. Pastro, N. Smart, and S. Zakarias, “Multiparty com-
putation from somewhat homomorphic encryption,” in Advances in
Cryptology–CRYPTO 2012. Springer, 2012, pp. 643–662.
J. Dautrich and C. Ravishankar, “Combining oram with pir to minimize
bandwidth costs,” in Proceedings of the 5th ACM Conference on Data
and Application Security and Privacy. ACM, 2015, pp. 289–296.
[20]
[21]
[22] S. Devadas, M. van Dijk, C. W. Fletcher, L. Ren, E. Shi, and D. Wichs,
“Onion oram: A constant bandwidth blowup oblivious ram,” in Theory
of Cryptography Conference. Springer, 2016, pp. 145–174.
J. Doerner and A. Shelat, “Scaling oram for secure computation,” in
Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2017, pp. 523–535.
[23]
[24] S. Faber, S. Jarecki, S. Kentros, and B. Wei, “Three-party oram for
secure computation,” in International Conference on the Theory and
Application of Cryptology and Information Security. Springer, 2015,
pp. 360–385.
[25] C. Fletcher, M. Naveed, L. Ren, E. Shi, and E. Stefanov, “Bucket
oram: single online roundtrip, constant bandwidth oblivious ram,” IACR
Cryptology ePrint Archive, Report 2015, 1065, Tech. Rep., 2015.
[26] S. Garg, P. Mohassel, and C. Papamanthou, “Tworam: round-optimal
14
oblivious ram with applications to searchable encryption,” IACR Cryp-
tology ePrint Archive, 2015: 1010, Tech. Rep., 2015.
[27] C. Gentry et al., “Fully homomorphic encryption using ideal lattices.”
in Stoc, vol. 9, no. 2009, 2009, pp. 169–178.
[28] C. Gentry, K. A. Goldman, S. Halevi, C. Julta, M. Raykova, and
D. Wichs, “Optimizing oram and using it efﬁciently for secure compu-
tation,” in International Symposium on Privacy Enhancing Technologies
Symposium. Springer, 2013, pp. 1–18.
I. Goldberg, “Improving the robustness of private information retrieval,”
in 2007 IEEE Symposium on Security and Privacy (SP’07).
IEEE,
2007, pp. 131–148.
[29]
[30] O. Goldreich, “Towards a theory of software protection and simulation
by oblivious rams,” in Proceedings of the nineteenth annual ACM
symposium on Theory of computing. ACM, 1987, pp. 182–194.
[31] O. Goldreich and R. Ostrovsky, “Software protection and simulation
on oblivious rams,” Journal of the ACM (JACM), vol. 43, no. 3, pp.
431–473, 1996.
[32] S. D. Gordon, J. Katz, and X. Wang, “Simple and efﬁcient two-server
oram,” in International Conference on the Theory and Application of
Cryptology and Information Security. Springer, 2018, pp. 141–157.
[33] T. Hoang, C. D. Ozkaptan, A. A. Yavuz, J. Guajardo, and T. Nguyen,
“S3oram: A computation-efﬁcient and constant client bandwidth blowup
oram with shamir secret sharing,” in Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications Security.
ACM, 2017, pp. 491–505.
[34] T. Hoang and C. Ozkaptan D., “Implementation of s3oram,” Available
at https://github.com/thanghoang/S3ORAM, 2017.
[35] M. Ito, A. Saito, and T. Nishizeki, “Secret sharing scheme realizing
general access structure,” Electronics and Communications in Japan
(Part III: Fundamental Electronic Science), vol. 72, no. 9, pp. 56–64,
1989.
[36] M. Keller, V. Pastro, and D. Rotaru, “Overdrive: making spdz great
again,” in Annual International Conference on the Theory and Appli-
cations of Cryptographic Techniques. Springer, 2018, pp. 158–189.
[37] M. Keller and P. Scholl, “Efﬁcient, oblivious data structures for mpc,” in
International Conference on the Theory and Application of Cryptology
and Information Security. Springer, 2014, pp. 506–525.
[38] M. Keller and A. Yanai, “Efﬁcient maliciously secure multiparty com-
putation for ram,” in Annual International Conference on the Theory
and Applications of Cryptographic Techniques.
Springer, 2018, pp.
91–124.
[39] E. Kushilevitz and T. Mour, “Sub-logarithmic distributed oblivious ram
with small block size,” in IACR International Workshop on Public Key
Cryptography. Springer, 2019, pp. 3–33.
[40] K. G. Larsen and J. B. Nielsen, “Yes, there is an oblivious ram lower
Springer,
bound!” in Annual International Cryptology Conference.
2018, pp. 523–542.
J. R. Lorch, B. Parno, J. Mickens, M. Raykova, and J. Schiffman,
“Shroud: Ensuring private access to large-scale data in the data center,”
in Presented as part of the 11th {USENIX} Conference on File and
Storage Technologies ({FAST} 13), 2013, pp. 199–213.
[41]
[42] S. Lu and R. Ostrovsky, “Distributed oblivious ram for secure two-
Springer, 2013, pp.
party computation,” in Theory of Cryptography.
377–396.
[43] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanovic, J. Ku-
biatowicz, and D. Song, “Phantom: Practical oblivious computation in a
secure processor,” in Proceedings of the 2013 ACM SIGSAC conference
on Computer & communications security. ACM, 2013, pp. 311–324.
[44] M. Maffei, G. Malavolta, M. Reinert, and D. Schr¨oder, “Privacy
and access control for outsourced personal records,” in 2015 IEEE
Symposium on Security and Privacy.
IEEE, 2015, pp. 341–358.
[45] M. Maffei, G. Malavolta, M. Reinert, and D. Schroder, “Maliciously
secure multi-client oram,” in International Conference on Applied
Cryptography and Network Security. Springer, 2017, pp. 645–664.
[46] T. Mayberry, E.-O. Blass, and A. H. Chan, “Efﬁcient private ﬁle retrieval
by combining oram and pir.” in NDSS. Citeseer, 2014.
[47] T. Moataz, T. Mayberry, and E.-O. Blass, “Constant communication
oram with small blocksize,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2015,
pp. 862–873.
[48] P. Mohassel and Y. Zhang, “Secureml: A system for scalable privacy-
preserving machine learning,” in 2017 IEEE Symposium on Security
and Privacy (SP).
IEEE, 2017, pp. 19–38.
[49] V. Narkhede, K. Joshi, A. J. Aviv, S. G. Choi, D. S. Roche, and T. Finin,
“Managing cloud storage obliviously,” in 2016 IEEE 9th International
Conference on Cloud Computing (CLOUD).
IEEE, 2016, pp. 990–993.
[50] P. Paillier, “Public-key cryptosystems based on composite degree
residuosity classes,” in International Conference on the Theory and
Applications of Cryptographic Techniques.