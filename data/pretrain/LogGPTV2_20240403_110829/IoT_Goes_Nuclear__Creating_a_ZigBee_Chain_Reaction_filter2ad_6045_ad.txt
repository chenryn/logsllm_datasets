203
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
Figure 8. Power analysis of processing a single 16-byte block by the cryptographic bootloader.
6.5.2. Unknown Plaintext with Chosen Differentials CPA
attack against AES. For our attack we introduce a novel
method of efﬁciently converting most chosen plaintext CPA
attack against ECB mode in the case of unknown plaintext
with chosen differentials. Our attack works under the fol-
lowing assumptions:
1) We have a black box chosen plaintext CPA attack that
can break the ﬁrst round of an ECB mode encryption
implementation.
2) We do not know the input to our ECB mode encryption,
but we can measure repeated encryptions with the same
unknown input XORed to any chosen differential.
3) For each differential we can measure the power trace
of at least the ﬁrst and second AES round.
As in previous works [13], we use the notion of a
Pi
‘modiﬁed key’. We will use the following notation:
is the ith byte of the unknown plaintext input
to the AES encryption.
is the ith byte of the chosen differential.
Di
Kj,i is the ith byte of the jth round key of AES.
In the general case of ﬁrst round of AES encryption, the
key and plaintext bytes are used in calculation of the output
of the SBOX. The output of the SBOX on byte i can be
written as Ouputi = S(Pi ⊕ K1,i). Any chosen plaintext
CPA attack on the ﬁrst round will be able to retrieve all of
the bytes of K1 by measuring traces of different inputs P.
In our case Pi is constant and we can choose Di, we get
Ouputi = S(Di⊕ Pi⊕ K1,i). We will denote our ‘modiﬁed
1,i = Pi ⊕ K1,i, rewriting Ouputi = S(Di ⊕ K(cid:2)
key’ as K(cid:2)
i).
We can now use our black box CPA attack to retrieve all
of the bytes of K(cid:2)
1, we can now calculate
the input to the second AES round. As the ﬁrst and second
round of AES are identical, we can use the same black box
CPA attack against the second round with known inputs,
and retrieve the real second round key.
1. Using D and K(cid:2)
In most CPA attacks we can choose our inputs at ran-
dom, and use the same power traces we used for the ﬁrst
round attack. If real chosen plaintext is needed, we can use
the invertible structure of the AES round, and calculate the
required differentials in the ﬁrst round.
After getting the real second round key K2, we can use
the invertible AES key expansion algorithm to ﬁnd K1 and
then all bytes of Pi. In the normal case where only random
plaintext is needed for the CPA attack, we can break our
ECB mode with unknown plaintext and chosen differentials
in the same number of traces required to break ECB with
chosen plaintext.
6.5.3. Breaking AES-CCM. For efﬁciently breaking the
CCM mode, we attack the CBC MAC state calculation, on
two consecutive blocks. We’ll ﬁrst summarize some notation
for AES-CCM.
If we consider the AES-ECB function using key k as
Ek(x), we can write the CTR and CBC portions of the CCM
mode as follows. The input will be in 16-byte blocks, where
block m is the index. CTR mode requires some IV and
counter which is input to an AES-ECB block, we assume
our input is {IV ||m}, where IV is a 14-byte constant that
is concatenated to the block number m. Counter mode ﬁrst
generates a ‘stream’ based on the counter and IV:
CT Rm = Ek({IV ||m})
This stream is XORd with plaintext/ciphertext for encryp-
tion/decryption respectively. Thus decrypting block P Tm
would be:
P Tm = CTm ⊕ CT Rm
In addition to decryption, CCM provides the authentication
tag which is the output of a CBC mode encryption across
all P Tm (and possibly other) blocks. The internal state of
204
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
this CBC mode after block m will be CBCm, which can
be written as:
CBCm = Ek(P Tm ⊕ CBCm−1)
= Ek(CTm ⊕ CT Rm ⊕ CBCm−1)
If we target a given block m, CT Rm and CBCm−1 will
be constant. CTm is the ciphertext we input to the block
(e.g., by the ﬁrmware ﬁle we sent the device), allowing us
to control the value of CTm. We consider our unknown
plaintext to be CT Rm ⊕ CBCm−1 and using the ciphertext
as the chosen differential, and then we can use our CPA
attack to recover the CBC MAC key k, and the value of
CT Rm ⊕ CBCm−1. As the CCM mode reuses the key
between encryption and veriﬁcation we also get the key used
for encryption. We now repeat our attack for the ﬁrst round
of block m+1. From our attack on block m we can calculate
CBCm, and from our attack on block m+1 we can retrieve
CT Rm+1 ⊕ CBCi and from that CT Rm+1. We can now
ﬁnd the nonce used by decrypting CT Rm+1 with the key
we found.
6.5.4. AES-CTR DPA Recovery Optimization. Our attack
on CCM requires twice the traces of ECB mode since we
must attack two blocks: both CBCm and CBCm+1 in order
to retrieve the CTR output. We can optimize our attack by
using a bitwise difference-of-means DPA attack to recover
the output of the AES-CTR encryption directly for block m.
The DPA attack is attacking CT Rm ⊕ CTm operation. An
example of this on the actual bootloader power measurement
is shown in Figure 6, where a single byte is being recovered.
Note there may be multiple locations where a strong
‘difference’ output is seen. These locations come about as
any linear operations on the CTm data will present such
spikes – for example not only the XOR we are targeting,
but also the data loading, and when the AES-CTR output is
used in the AES-CBC input. In addition there will be both
positive and negative spikes as the internal bus switches
from precharge, to ﬁnal state, back to precharge.
We found about 10 locations with such strong differ-
ences across the entire trace, giving us 10 possible guesses
for the output of the AES-CTR on the ﬁrst block on the
same traces under the CPA attack. Using the key retrieved
from the CPA attack, we tried decrypting the guesses, and
simply chose the one that decrypted to the correct counter
value in the last bytes. The correct guess occurred in the
window where the AES-CTR XOR operation was expected
to occur (around sample point 6950 in Figure 8), meaning
the additional guessing may not be required in most cases.
6.5.5. Extending the CCM attack to other block ciphers.
By combining the CPA attack and DPA optimization, we
can break any SPN(Substitution-permutation network) based
cipher block algorithm regardless of the key expansion
algorithm under the following assumptions:
1) We have a CPA attack that can break any round using
chosen plaintext.
2) We can measure the power traces for all rounds
3) The DPA attack provides a small number of possible
guesses for the output of the CTR.
We use the CPA attack against block m to retrieve the
CBC MAC state CBCm. By using the DPA attack we can
retrieve the possible guess to the CTR output CT Rm+1. As
the CBC MAC encryption in block m + 1 is Ek(CTm+1 ⊕
CT Rm+1⊕CBCm) we can now do a chosen plaintex attack
against block m+1 to retrieve all of the round keys including
the ﬁrst round.
7. Take over attack
7.1. Bypassing the proximity check mechanism
The proximity check ensures only a very close device
(approx 1m or less) is able to reset and then take over a
device, as was discussed in section 3.2.1. This proximity
check logic will be present in any ZLL compliant stack
(and product).
7.1.1. Atmel’s BitCloud Touchlink implementation. At-
mel provides their customers with a complete software
implementation of the Touchlink protocol in the BitCloud
stack under the ZLL Platform section. It is implemented in
two parts:
1) N InterPan - Handles the InterPan layer, determines
what type of message was received, and does some
basic sanity checks
2) N LinkTarget - Implements the Touchlink protocol
state machine.
The code was written with security in mind. Message
sizes are either checked or a clear reference is made for the
location of the check.
Upon receiving a valid Scan Request message,
The proximity check mechanism is implemented in
N LinkTarget.c at the function ReceivedScanRequest. It
checks that the RSSI value is above a threshold that is
deﬁned by the stack user for every speciﬁc product. Only
if the value is over the threshold it will save the message
parameters and start the Touchlink protocol state machine.
the
state machine waits for a random jitter time period (to
make sure not all
lamps respond at exactly the same
time). After that time period the function StartTransac-
tion StoreCurrentTransmitPower SendScanResponse-
StartChangeDelay is called. This function sends a Scan
Response message. The Transaction and Response ID are
saved in the ResponseParameters structure that can be
seen in Listing 1. To support multiple instances of the
Touchlink protocol the stack holds an array of length 3 of
this structure.
Upon receiving any other protocol message, the trans-
action ID parameter of the message is checked against the
values stored in the array. If the transaction ID is not found
in the array, the message is dropped.
7.1.2. Bypassing the proximity check. The Response Pa-
rameters structure seen at Listing 1 has no dedicated valid
ﬂag variable. After boot, or at the end of a protocol session,
205
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
Listing 1. Response Parameters structure
s t r u c t N L i n k T a r g e t R e s p o n s e P a r a m e t e r s t
typedef
{
u i n t 3 2 t
u i n t 3 2 t
u i n t 8 t
u i n t 8 t
t r a n s a c t i o n I d ;
r e s p o n s e I d ;
z l l I n f o ;
z i g B e e I n f o ;
} N L i n k T a r g e t R e s p o n s e P a r a m e t e r s t ;
Listing 2. Transaction Validation Check
t r a n s a c t i o n i d i s a c t i v e .
/∗∗ Check
\ n o t e The v a l u e z e r o i s a l r e a d y
i f
by N InterPan . ∗ /
t h e
b o o l
I s T r a n s a c t i o n I d A c t i v e ( u i n t 3 2 t
t r a n s a c t i o n I d )
r e j e c t e d
the structure is ﬁlled with zeros, as zero is considered an
invalid value for the Transaction Id.
Listing 2 shows the deﬁnition of the function IsTransac-
tionIdActive that is used to check if a Transaction Id is valid
or not. The reader can see a note written by the programmer
stating that there is no need to check if the Transaction Id
value is nonzero as “the value zero is already rejected by
N InterPan”. However, as we reviewed the code, we found
out that this sanity check is only done upon receiving a
Scan Request message. There is no such check for any other
message in the protocol. This means that we can send any
other message assuming zero value for the Transaction and
Response Ids and it will be received and process as a valid
message by the light.
7.1.3. Taking over light bulbs. After we discovered this
bug, we looked for ways to exploit it to take over lamps
from a large distance. Our ﬁrst approach was to simply
send a Network join router request with Transaction ID
set to zero. This message will instruct the light to join
our network. However this only caused the light to reset.
the function
After looking at
N Security DecryptNetworkKey Impl
is called to
decrypt the new network encryption keys, performs a sanity
check to make sure that the Transaction and Response Ids
are nonzero, and resets the light in such case. As joining
a light to a new network requires sending a network key,
we could not ﬁnd a way to use the ZLL Touchlink protocol
directly to take over the lamps.
the code, we found that
that
However, as is also mentioned in [7] the ZLL standard
mandates compatibility with non-ZLL ZigBee networks.
In the ZLL standard [17] at section 8.1.6 it
is written
that: “In order to ensure interoperability with other ZigBee
devices, all ZLL devices should implement the compatible
startup attribute set (SAS) speciﬁed in this sub-clause. ZLL
devices can join other non-ZLL ZigBee networks and allow
non-ZLL devices to join ZLL networks under application
control.”. This commissioning protocol described in [32]
does not have any restrictions such as the proximity check
mechanism. Upon joining a network the network key is
sent encrypted with a “Trust centre link key” default key
that is speciﬁed in the ZLL standard. While under normal
conditions a Philips Hue light will not try to join a ZigBee
network, it will actively search and try to join such networks
if it is in a “Factory New” state.
Our attack proceeds in the following way: We send a
unicast Reset to Factory New Request command to our
target Philips Hue light. This command only included a
Transaction ID value that we set to zero. Upon receiving
the message the light will undergo a factory reset, and start
scanning for a new network by sending a ZigBee Beacon
Request messages. Then we respond with a ZigBee Beacon
message with the Association Permit ﬂag set to true. This
causes the light to start a ZigBee association process and
join our network.
7.1.4. Simultaneously taking over multiple lightbulbs.
Our next step was to improve our attack, so that it can be
run simultaneously and efﬁciently against several lamps.
The ZLL standard clearly states that the Reset to Factory
New Request command shall be formated such that “the
destination address ﬁeld shall contain the IEEE address of
the destination and the source PAN ID ﬁeld shall be set to
the same value used in the preceding scan request inter-PAN
command frame”. However, this is not veriﬁed anywhere in
the code. This allows us to send the Reset to Factory New
Request command as a broadcast message, simultaneously
causing all lamps within ZigBee range to factory reset. After
that all the lamps will respond to our Beacon message and
start the association, and join our network.
But what will happen if one of the lamps didn’t receive
our Factory New Request command, or was just outside the
range? If we will try to resend the message it will cause
the lamps already associated to our network to reset again.
To solve this problem we use the ZLL support of different
channels available at 2.4 GHz range. The ZLL standard
states that: “A ZLL device shall be able to operate on all
channels available at 2.4GHz, numbered from 11 to 26 ...
Within this range, two sets of channels shall be deﬁned. The