除我们讨论过的测试资源之外，这里还有很多测试项目值得介绍，包括开源的和厂家自己提供的。这些项目每一个都是针对特定领域的，比如嵌入式或者企业自己使用。我们简单过一下。
[Linux 测试项目](http://ltp.sourceforge.net/documentation/how-to/ltp.php)（LTP）测试套件是一系列工具的集合，用于测试内核的可靠性、健壮性和稳定性。你可以为这个项目添加自己的测试代码，并且 LTP 项目欢迎你贡献自己的代码。runltp 脚本默认情况下会测试下面的子系统：
* 文件系统压力测试
* 磁盘 IO 测试
* 内存管理压力测试
* IPC（进程间通信）测试
* 调度器测试
* 命令的功能性验证测试
* 系统调用功能验证测试
[**LTP-DDT**](http://processors.wiki.ti.com/index.php/LTP-DDT) 是一个基于 LTP 的测试应用（LCTT：就是 LTP 的阉割版么），专注于测试嵌入式设备驱动。
[**Linux Driver Verification**](http://linuxtesting.org/project/ldv) 这个项目的目标是提高 Linux 设备驱动的质量，它为设备驱动验证开发了集成环境平台，并且利用与时俱进的研究来增强验证工具的质量。
### 一致性测试
如果你有将某个 Unix 平台下的应用一直到另一个平台的经验，你就能理解 [Linux Standard Base (LSB)](http://www.linuxfoundation.org/collaborate/workgroups/lsb) 和 LSB 一致性测试套件的重要性了。LSB 是 Linux Foundation 工作组创建的用于降低支持不同 Linux 平台所需要的开销，方法就是通过降低不同 Linux 发行版之间的差别，保证应用在不同发行版之间的可移植性。前事不忘后事之师，Unix 世界的分歧在 Linux 世界一定要避免。这就是为什么你可以把一个 rpm 包转化成 deb 包后还能安装并正常运行的秘密。
### 静态分析工具
静态分析之所以会被称为“静态分析”，是因为这些工具只分析代码，并不执行它们。分析 Linux 内核代码的静态分析工具有很多，Sparse 是 Linus Torvalds 写的专门用于检查内核静态类型的工具。它是一个语义检查器，会为 C 语言的语义建立语义检析树，执行惰性类型评估。内核编译系统支持 sparse，并且为编译内核的命令提供开启 sparse 的选项。
为内核所有需要重新编译的 C 文件执行 sparse 语义检查：
```
make C=1 allmodconfig
```
为内核所有 C 文件（即使不需要重新编译）执行 sparse 语义检查：
```
make C=2 allmodconfig
```
Sparse 的资源：
* [Sparse Archive](http://codemonkey.org.uk/projects/git-snapshots/sparse/)
* [Sparse How To](http://smatch.sourceforge.net/)
Smatch 分析程序代码的逻辑错误。它可以检测到诸如“为一个没锁上的 spinlock 执行解锁”的逻辑错误。内核源码支持 smatch：
在 Linux 内核中运行 smatch：
```
make CHECK="~/path/to/smatch/smatch -p=kernel" C=1 bzImage modules | tee warns.txt
```
请参考下面的资料来获取和编译 smatch。需要注意的是 smatch 是个正在发展的项目，架构会不断变化。
* [**Smatch**](http://smatch.sourceforge.net/)
那么我们该怎么处理 Sparse 和 Smatch 所发现的语义和逻辑上的错误呢？一些错误可以被分离为日常问题或模块问题，可以轻易被解决。但是有些语义错误涉及到全局，因为剪切粘贴了一些代码。在一些环境中，当一些接口函数被废弃不再使用，或者仅仅做了写微小的修改，你就需要大规模更新源码。这时候你需要 Coccinelle 来帮忙。，Coccinelle 使用 SmPL 语言（语义包语言）来为 C 代码提供匹配和转换代码的功能。Coccinelle 的从一开始就作为 Linux 的附属产品持续发展的。
举个例子：foo(int) 函数突然变成 foo(int, char \*) 函数，多出了一个输入参数（可以把第二个参数置为 null）。所有调用 foo() 函数的代码都需要更新了，这可能是个悲摧的体力活。但是使用 Coccinelle 的话，这项工作瞬间变得轻松，脚本会帮你找到调用 foo(parameter1) 的代码，然后替换成 foo(parameter1, NULL)。做完这些后，所有调用这个函数的代码都可以运行一遍，验证下第二个参数为 NULL 是否能正常工作。关于 Coccinelle 的更多信息，以及在不同项目中（当然，也包括 Linux 内核这个项目）的使用方法，请参考项目主页：[**Cocinelle**](http://coccinelle.lip6.fr/)。
### 参考文献
本文涵盖了很多方面，这里列出一些参考文档供读者做进一步研究。
* [KernelHacking](http://kernelnewbies.org/KernelHacking)
* [kernel Documentation](http://kernelnewbies.org/Documents)
* [Linux Device Drivers, Third Edition](http://lwn.net/Kernel/LDD3/)
* [Dynamic Event Tracing in Linux Kernel](http://events.linuxfoundation.org/slides/lfcs2010_hiramatsu.pdf)
* [Kernel Testing: Tool and Techniques](http://events.linuxfoundation.org/images/stories/slides/elc2013_porter.pdf)
### 鸣谢
感谢来自 Oracle 的 Khalid Aziz，审查校对并提供许多非常有价值的建议。感谢来自三星的 Mauro Chehab 和 Guy Martin，他们给了我多次反馈。感谢来自 Linux Foundation 的 Grey Kroah-Hartman 对本文的审阅。感谢来自三星的 Ibrahim Haddad，没有他的支持和鼓励，我可能还不会坐下来写出这篇文章。
---
![](/data/attachment/album/201408/26/000558vee8eppetlkjjepj.jpg)
作者：[Shuah Khan](http://www.linuxjournal.com/users/shuah-khan)
Shuah Khan 是三星公司开源组的高级 Linux 内核开发工程师。 她为 Linux 内核中的 IOMMU、DMA、电源管理、PCIe 贡献代码，同时维护内核，为内核提供补丁包。Shuah 有多年 Unix 内核开发经验。她也为 OpenHPI 和 LLDP 项目作贡献。
---
via: 
译者：[bazz2](https://github.com/bazz2) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出