title:Query encrypted databases practically
author:Dongxi Liu and
Shenlu Wang
DEMO: Query Encrypted Databases Practically
CSIRO ICT Centre, Marsﬁeld, NSW 2122, Australia
PI:EMAIL, PI:EMAIL
∗
Dongxi Liu
Shenlu Wang
ABSTRACT
The cloud database services are attractive for managing outsourced
databases. However, the data security and privacy is a big concern
hampering the acceptance of cloud database services. A straight-
forward way to address this concern is to encrypt the database, but
an encrypted database cannot be easily queried.
In this demo paper, we demonstrate that aggregate SQL queries
with range conditions can be performed efﬁciently over encrypted
databases, without decrypting the databases ﬁrst, by using our new
homomorphic encryption scheme. The techniques in this paper can
be applied to existing Database Management Systems (DBMSs).
Moreover, the techniques do not need to predetermine the maxi-
mum sum and number of data in one database table column. These
features make our technologies suitable to manage long-standing
and large encrypted databases.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption; H.2 [Information Systems]: Database
Management
General Terms
Security
Keywords
Database, Homomorphic Encryption, Order-Preserving Index, SQL
Query
1.
INTRODUCTION
Cloud database services, such as Amazon Relational Database
Service (RDS) and Microsoft SQL Azure, are attractive for enter-
prises to outsource their databases. The database services allow
enterprises to deploy their databases quickly without making the
large upfront investment on their proprietary hardware and soft-
ware, hence reducing the total cost of ownership. Moreover, due to
the elasticity of cloud database services, an enterprise can dynam-
ically increase or decrease the compute resources allocated to its
databases according to its business requirements.
When a database is deployed into a public database service, the
service provider has the complete physical control over the database.
∗Shenlu was a vacation student in CSIRO ICT Centre, coming from
RMIT university, Australia.
Copyright is held by the author/owner(s).
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
ACM 978-1-4503-1651-4/12/10.
The data in the database might be improperly accessed by the ser-
vice provider accidentally or intentionally, or by attackers who com-
promise the database service platforms. Hence, though attractive,
cloud database services may not be fully exploited if the problem
of data privacy and security is not satisfyingly addressed [1].
For cloud database services, a straightforward approach to ad-
dressing the security and privacy problem is to encrypt data before
they are sent to the cloud. By this way, the service provider or an
attacker only can see meaningless encrypted data. However, af-
ter being encrypted, a database cannot be easily queried. When a
database is large, it is not acceptable to decrypt the entire database
before performing each query because the decryption might be very
slow. On the other hand, if the decryption is done on the cloud, the
decrypted database is again at the risk of having its security and
privacy breached. Ideally, a query should be executed directly over
the encrypted database, producing encrypted query result, which
can only be decrypted by service users.
The CryptDB [10] is a system supporting SQL queries over en-
crypted databases. This system needs the extension of existing
DBMSs to support homomorphic operations like SUM and AVG,
because the used homomorphic encryption scheme [9] performs
multiplication on ciphertexts to get the sum of corresponding plain-
texts. The existing DBMSs cannot natively support multiplication
of values in one table column.
In [5], a mechanism of supporting aggregate queries is proposed,
which is designed only for column-based databases by encrypting
multiple values in one table column into one ciphertext. Hence,
the mechanism in [5] is not ﬂexible for data insertion and deletion,
since the data to be updated is always packed together with other
data not to be updated.
In [8, 4], a homomorphic encryption scheme is proposed to be
efﬁcient and practical. But it needs users to determine the maxi-
mum sum of plaintexts, which should not be bigger than the mod-
ulo. Otherwise, the scheme is not homomorphic. That is, if it is
used to encrypt values in a table column, the maximum sum of
such values must be predetermined and not be bigger than the mod-
ulo. This requirement is not practical for long standing and large
encrypted databases, since the data there might have their charac-
teristics changed over a long period of time.
In this demo paper, we demonstrate the management of encrypted
databases by using a new homomorphic encryption scheme [6] to-
gether with an order-preserving indexing scheme [7]. Our tech-
niques in this demo can be applied to existing Database Manage-
ment Systems (DBMSs) without any change or extension. The en-
crypted data are still stored relationally, so they can be updated by
using standard SQL statements. Moreover, there is no any require-
ment on the maximum sum of plaintexts in one table column, and
10493.2 Homomorphic Encryption
The (additive) homomorphic encryption scheme used in this demo
is proposed in a patent application [6]. Let Enc be the encrypting
operation in the scheme, Dec the decrypting operation and K(n)
the key. Then, given a value v, the encryption Enc(K(n), v) will
generate a ciphertext (c1, ..., cn), which consists of n subcipher-
texts c1, ..., and cn. The parameter n in a key indicates the num-
ber of subciphertexts to be generated.
In decryption, the opera-
tion Dec(K(n), (c1, ..., cn)) will return v. Given another value
v(cid:48), let Enc(K(n), v(cid:48)) = (c(cid:48)
n). Then, this scheme ensures
Dec(K(n), (c1 + c(cid:48)
n)) = v + v(cid:48) for homomorphism.
The scheme [6] deﬁnes the generic forms of the Enc and Dec
operations, and also their correctness conditions. Based on the
generic forms and conditions, many instances of the scheme can
be deﬁned. Here, we introduce two instances to make this demo
(cid:80)n−2
paper more self-contained.
In the ﬁrst instance, the key K(n) is a list of n pairs of real
numbers, [(k1, s1), ..., (kn, sn)], where n ≥ 3,
i=1 ki (cid:54)= 0 and
kn−1 (cid:54)= 0 and kn + sn (cid:54)= 0. The operation Enc, encrypting v into
(c1, ..., cn), is deﬁned by the following steps.
1, ..., cn + c(cid:48)
1, ..., c(cid:48)
• Let r1,..., rn−2 be n − 2 random numbers.
• ci = ki ∗ v + si + ri for 1 ≤ i ≤ n − 2.
• cn−1 = kn−1 ∗(cid:80)n−2
i=1 ri + sn−1.
• cn = kn + sn.
For this instance, the operation Dec, decrypting (c1, ..., cn) into
v, is deﬁned below, where the division of cn is used for counting
the number of ciphertexts added or averaged.
i=1 ki.
(cid:80)n−2
(cid:80)n−2
i=1 (ci − S ∗ si)/L) − I/(L ∗ kn−1).
• L =
• S = cn/(kn + sn).
• I = cn−1 − S ∗ sn−1.
• v = (
(cid:80)n−2
In the second instance, we let the key K(n) be a list of n tuples
of real numbers, [(k1, s1, t1), ..., (kn, sn, tn)], where n ≥ 3, ki (cid:54)=
0 (1 ≤ i ≤ n − 1),
i=1 si (cid:54)= 0, sn−1 (cid:54)= 0 and kn + sn +
tn (cid:54)= 0. The operation Enc of the second instance encrypts v into
(c1, ..., cn) by the following steps.
• Let r1,..., rn−2 be n − 2 random numbers.
• ci = ki ∗ ti ∗ v + si + ki ∗ ri for 1 ≤ i ≤ n − 2.
• cn−1 = kn−1 ∗ tn−1 ∗(cid:80)n−2
i=1 ri + sn−1.
• cn = kn + sn + tn.
The operation Dec of the second instance decrypts the ciphertext
(c1, ..., cn) into v by the steps below. Compared with the ﬁrst in-
stance, the last step below divides different ci − S ∗ si (1 ≤ i ≤
n − 2) with different secret values L ∗ ki, rather than only by L,
hence increasing the robustness against brute-force attacks.
(cid:80)n−2
(cid:80)n−2
i=1 (ci − S ∗ si)/(L ∗ ki))− I/(L∗ kn−1∗ tn−1).
• L =
• S = cn/(kn + sn + tn).
• I = cn−1 − S ∗ sn−1.
• v = (
i=1 ti.