title:This Sneaky Piggy Went to the Android Ad Market: Misusing Mobile Sensors
for Stealthy Data Exfiltration
author:Michalis Diamantaris and
Serafeim Moustakas and
Lichao Sun and
Sotiris Ioannidis and
Jason Polakis
This Sneaky Piggy Went to the Android Ad Market:
Misusing Mobile Sensors for Stealthy Data Exfiltration
Michalis Diamantaris
Serafeim Moustakas
Lichao Sun
FORTH
Heraklion, Crete, Greece
PI:EMAIL
FORTH
Heraklion, Crete, Greece
PI:EMAIL
Lehigh University
Bethlehem, Pennsylvania, USA
PI:EMAIL
Sotiris Ioannidis
Technical University of Crete
Chania, Crete, Greece
PI:EMAIL
Jason Polakis
University of Illinois at Chicago
Chicago, Illinois, USA
PI:EMAIL
ABSTRACT
Mobile sensors have transformed how users interact with modern
smartphones and enhance their overall experience. However, the
absence of sufficient access control for protecting these sensors
enables a plethora of threats. As prior work has shown, malicious
apps and sites can deploy a wide range of attacks that use data
captured from sensors. Unfortunately, as we demonstrate, in the
modern app ecosystem where most apps fetch and render third-
party web content, attackers can use ads for delivering attacks.
In this paper, we introduce a novel attack vector that misuses
the advertising ecosystem for delivering sophisticated and stealthy
attacks that leverage mobile sensors. These attacks do not depend
on any special app permissions or specific user actions, and affect
all Android apps that contain in-app advertisements due to the
improper access control of sensor data in WebView. We outline
how motion sensor data can be used to infer users’ sensitive touch
input (e.g., credit card information) in two distinct attack scenarios,
namely intra-app and inter-app data exfiltration. While the former
targets the app displaying the ad, the latter affects every other
Android app running on the device. To make matters worse, we
have uncovered serious flaws in Android’s app isolation, life cycle
management, and access control mechanisms that enable persistent
data exfiltration even after the app showing the ad is moved to
the background or terminated by the user. Furthermore, as in-app
ads can “piggyback” on the permissions intended for the app’s
core functionality, they can also obtain information from protected
sensors such as the camera, microphone and GPS. To provide a
comprehensive assessment of this emerging threat, we conduct
a large-scale, end-to-end, dynamic analysis of ads shown in apps
available in the official Android Play Store. Our study reveals that
ads in the wild are already accessing and leaking data obtained
from motion sensors, thus highlighting the need for stricter access
control policies and isolation mechanisms.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485366
CCS CONCEPTS
• Security and privacy → Mobile platform security.
KEYWORDS
Android in-app ads; WebView; mobile HTML5; sensor attacks;
ACM Reference Format:
Michalis Diamantaris, Serafeim Moustakas, Lichao Sun, Sotiris Ioannidis,
and Jason Polakis. 2021. This Sneaky Piggy Went to the Android Ad Market:
Misusing Mobile Sensors for Stealthy Data Exfiltration. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 17 pages. https://doi.org/10.1145/3460120.3485366
1 INTRODUCTION
The ubiquitous nature of mobile devices and the plethora of rich
functionalities they offer has rendered them an integral part of our
daily routines. The advent of smartphones has also transformed how
users experience and interact with web services, and Android has
become the most prevalent mobile operating system currently pow-
ering over 85% of devices worldwide [51]. Android’s app ecosystem
is dominated by free apps and in-app advertisements have become
the de facto source of revenue for app developers [6, 53]. Even major
tech companies heavily rely on mobile advertising, with Facebook
earning 94% of its ad revenue from mobile devices [109].
Recently, mobile motion sensors (e.g., accelerometer and gyro-
scope) have started playing an increasingly important role in the
mobile advertising ecosystem, as motion-based ads allow for more
interactivity and higher user engagement, leading to increased rev-
enue [103]. Even though mobile sensors provide functional diversity
that is reshaping how users interact with and consume ads, they also
introduce a significant security and privacy threat. In more detail, a
plethora of prior studies have demonstrated that data obtained from
mobile sensors can be used for identifying and tracking users across
the web [11, 12, 17, 26–29, 33, 39, 45, 50, 52, 61, 66, 82, 86, 115, 116],
inferring physical activities [45, 48, 59, 66, 82] and in more severe
scenarios inferring users’ touch screen input [18, 47, 59, 70, 97, 111].
Das et al. [25] also demonstrated that web scripts accessing mobile
sensors allow for stateless tracking on the mobile web, while Mar-
cantoni et al. [57] described how a plethora of mobile sensor-based
attacks that previously required a malicious app to be installed can
easily migrate to the mobile web using the HTML5 WebAPI.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1065However, as users spend the majority of their browsing time
within mobile apps [2], mobile ads will often reach their audience
through in-app ads. These ads are shown inside the context of
a mobile app and allow developers to release their apps for free
while earning revenue from the embedded ads. Unfortunately, this
symbiotic relationship, combined with ads’ ability to access mobile
device sensors, creates the opportunity for delivering a variety of
sensor-based attacks. While prior work has proposed separating the
privileges offered to applications and advertisements [75], Android
has not adopted such an approach. To make matters worse, mobile
motion sensors are not guarded by a specific permission and are
freely accessible to in-app ads. Comparatively, the iOS operating
system blocks in-app ads from accessing motion sensors or explic-
itly requests user approval when websites attempt to access them.
To the best of our knowledge no prior study has explored in-depth
the security risks posed by Android’s access control and permission
system policies that govern how in-app ads can use mobile sensors.
In this paper we introduce a novel attack vector that misuses
the ad ecosystem for delivering sophisticated and stealthy attacks.
Our threat model captures a malicious actor delivering a seem-
ingly legitimate mobile ad campaign, targeting benign mobile apps
downloaded from the official Play Store and targeting the rich data
returned from motion sensors to perform a plethora of sensor-based
attacks, including stealing login credentials and credit card infor-
mation. While in practice any sensor-based attack demonstrated in
prior work is feasible, we focus on inferring the user’s touch input
due to the severe risk posed to users.
Our empirical investigation captures two separate attack scenar-
ios for inferring sensitive data, namely intra- and inter-application
data exfiltration. In the intra-application attack scenario, a motion-
based ad is able to infer users input when ads are “co-located”
with Views that contain sensitive input information. Even though
Google’s ad placement policies [7] instruct developers to not show
ads in Views that contain sensitive information, we found that de-
velopers do not always adhere to safe practices. More importantly,
we have identified a flaw that allows us to target apps even when
the ads are not “co-located” with the sensitive data. In more detail,
Google’s interstitial ads can be easily misused for capturing sensi-
tive input even if they are not displayed on top of sensitive Views,
since the JavaScript code of interstitial ads is executed from the
moment the ad is preloaded up to the moment the user clicks the
corresponding application element. As such, even if users are ex-
ploring other parts of the app when entering sensitive content (e.g.,
billing information for in-app purchases) they remain vulnerable.
Next, our inter-application attack scenario significantly expands
the attack surface, as it allows attackers to target any other app
currently running on the device, if the app showing advertisements
holds the SYSTEM_ALERT_WINDOW permission. Specifically, if the
host app has been granted the aforementioned permission and
an ad-related WebView is attached to the WindowManager, ads are
essentially allowed to execute JavaScript in the background, there-
fore making every other Android app vulnerable to sensor-based
side-channel attacks. Despite the known risks associated with this
permission [41], in certain cases (i.e., [32, 44]) it is still automati-
cally granted to apps installed from the Play Store. Our experiments
reveal that and it is obtained by 9.28% (416 out of 4,478) of the most
popular apps. To make matters worse, we discovered a critical se-
curity flaw in Android that prevents the user from killing the host
app from the task manager, while users are deceived as the host
app is no longer shown in the list of background apps despite not
having been terminated.
Our empirical analysis demonstrates that in-app advertisements
not only have the potential to access mobile sensors but are also
able to silently leak that data. Due to the severe implications of
these attacks, we build a novel automated framework for analyzing
in-app advertisements, which provides an in-depth view of requests
to access mobile sensors and distinguishes sensor access requested
by in-app advertisements from those requested by the app’s func-
tionality. We bridge the semantic gap for identifying the origin of
sensor calls by combining low-level hooks at the Android layer with
high-level hooks at the Network layer. We leverage our framework
to conduct a study of in-app advertisements in the wild, by analyz-
ing how they access mobile sensors across 4.5K of the most popular
apps obtained from the official Google Play Store. We conduct a
longitudinal study by periodically repeating the dynamical analysis
of the apps in our dataset over a period of several months, so as
to capture a more varied collection of ad campaigns. To further
diversify our study’s view of the ad ecosystem, we repeat a set of
experiments across different countries using VPN services. Our
study reveals that a large number of apps (27.28%) display in-app
ads that perform some form of device tracking or fingerprinting,
we also find several instances of ads accessing and exfiltrating mo-
tion sensor values to third-parties without the user’s knowledge or
consent. As the use of motion sensors in advertisements is gaining
traction, we expect such invasive advertisements to become far
more common in the near future.
In summary, we make the following research contributions:
• We introduce a novel attack vector that abuses the adver-
tising ecosystem for stealthily delivering attacks that abuse
mobile sensors, magnifying the impact and scale of sensor-
based attacks. Our empirical analysis reveals several flaws
in Android’s isolation, life cycle management, and access
control mechanisms that can be exploited for increasing the
attack’s coverage and impact.
• We conduct an extensive investigation of in-app ads access-
ing mobile sensors in the wild and identify several instances,
highlighting the threat posed by our attacks. To facilitate
additional research we publicly share our code.
• To mitigate our attacks, we propose a set of access control
policies and guidelines for the Android OS, app developers,
and ad markets. We have disclosed our findings to Android’s
security team, who acknowledged the potential for abuse.
2 BACKGROUND
This section provides background information and technical details
regarding the display of in-app ads. We also discuss pertinent mobile
sensor-based attacks demonstrated in prior work.
Mobile Sensors. A plethora of studies (e.g., [13, 27, 42, 58, 61,
66, 79, 108, 113, 114]) have demonstrated that apps can use the
data acquired from sensors like the Accelerometer, Gyroscope and
Light sensor for various sophisticated and often highly accurate
attacks [59], without requiring any permission from the operating
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1066system or the user. Researchers previously presented a taxonomy of
these sensor-based attacks [34, 57], where attacks are classified in
four major categories; Physical Activity Inference, Acoustic Attacks,
Digital Activity Inference and User Tracking. A notable example is
the Touchscreen Input Attack from the Digital Activity Inference
category that shows how sensors can be used to infer what the
user is typing [15, 18, 19, 47, 59, 62, 70, 77, 111]. This attack is made
possible by the changes in the screen’s position and orientation,
and the motion that occur while the user types.
Ads, WebViews & Sensors. Advertisements are usually writ-
ten in JavaScript, which enables the use of a plethora of powerful
API calls. Amongst these API calls are the HTML5 functions re-
sponsible for accessing mobile motion sensors. Specifically the
accelerometer sensor is accessed using the DeviceMotionEvent.-
acceleration [14] DeviceOrientationEvent [88] APIs, while
the DeviceMotionEvent.rotationRate [63] API gives access to
the gyroscope sensor. Moreover, the Generic Sensor API [106]
bridges the gap between native and web applications, is not bound
to the DOM (nor the Navigator or Window objects) and can be easily
extended with new sensor classes with very few modifications.
Recent work [25, 34] reported that many websites and third-
party scripts access the information provided by these sensors
when accessed through a mobile browser. In practice, the mobile
advertising ecosystem has two different paths for displaying ad-
vertisements to users, either through the advertisements that are
embedded in a website that is accessed using a mobile browser app
(i.e., website-ads) or through embedded advertisements. The latter,
hereby referred to as in-app ads, are displayed inside the context of
a mobile application with the use of an Android WebView [43]. We-
bView is based on the Chrome/Chromium and WebView objects are
able to display web content as part of an activity layout. Specifically,
WebView for Android 7 - 9 is built into Chrome, while in newer
versions Chrome and WebView are separate apps. Even though
WebView lacks some of the features of a full-fledged browser, it can
evaluate JavaScript (e.g., evaluateJavascript()), interact with
cookies (e.g., setCookie()/getCookie()) and access a plethora of
mobile HTML5 APIs. Additionally, since WebView exists in the
same context as the actual application’s process, it also shares all of
the host application’s privileges (including normal and dangerous
permissions). To verify this, we created a mock app and separately
executed all HTML5 APIs that access mobiles sensors. We found
that WebViews are able to call every mobile sensor. Moreover, we
found that all mobile sensors (except GPS and Camera) do not
require the host app to hold any specific Android permissions.
Furthermore, if the app holds the appropriate permissions for addi-
tional capabilities, then WebView automatically and without any
interaction gains access to these as well.
3 MOTIVATION AND EXPLORATION
Here we describe some initial experiments and findings that moti-
vate our attack and our subsequent large-scale study.
Permissions and access control. In the first experiment we
verify that Android’s access control policies and permission man-
agement allow in-app advertisements to access motion sensors and
leak these values using common network techniques. We set up
a test bed consisting of an actual Android device playing the role
of the victim, while a Raspberry Pi was used for deploying an Ad
Server that will deliver the invasive advertisement. We deployed a
simple test application on our device, which includes an embedded
advertisement rendered within a WebView. In our experiments the
ad is successfully displayed and able to access the motion sensors,
while we can send the sensor values back to the Raspberry server
through an XMLHttpRequest or the GET/POST methods. We per-
formed this experiment twice, to verify that ads are not limited
to a one-time sensor reading but can also collect and exfiltrate
continuous sensor readings.
Sensor data leakage in practice. During a preliminary analy-
sis of ads in the wild, we identified an ad campaign accessing motion
sensors and also sending that data to a remote server. Specifically,
we identified an in-app advertisement from a major telecommuni-
cation provider accessing motion sensors even if the user did not
interact with the ad, and leaking those values to a DoubleVerify
domain through a GET request. Since DoubleVerify provides online
media verification and campaign effectiveness solutions, we believe
that this could potentially be used for bot detection and ad fraud
prevention. Nonetheless, even though we can not assign (nor dis-
prove) malicious or invasive intentions behind this specific case,
we believe that users should explicitly be given the option to allow
or deny access to their sensor data.
Publishing sensor-based ads. Next, we wanted to investigate
whether any business-level or technical “countermeasures” exist in
practice, to prevent ads from accessing sensor data. Prior to conduct-
ing this experiment, a description of our study and experimental
protocol was submitted to and approved for exemption by our uni-
versity’s Institutional Review Board (IRB). Appendix A includes a
detailed ethical analysis of our experiment. For this exploratory ex-
periment, we signed a contract with a DSP and published an in-app
ad campaign accessing motion sensors. At the end of the campaign,
which reached 13K impressions at a cost of ∼ 15e, we obtained a
report from the DSP with information for the ad campaign (e.g.,
apps displayed, impressions, clicks, etc.). It is important to note
that in this experiment we did not gather any user information nor
did we exfiltrate any sensor values. Furthermore, the DSP report
contains only aggregate statistics and information, which cannot
be used to identify or infer any personal user data.
Summary. Based on our findings we argue that it is trivial for
privacy-invasive entities and cybercriminals to abuse the mobile ad
ecosystem for exfiltrating data by delivering advertisements that
capture the rich information provided by these sensors.
4 THREAT MODEL & ATTACK SCENARIOS
Here we introduce our threat model and provide details on how we
exploit flaws in Android’s isolation, life cycle management, and ac-
cess control mechanisms to expand the attack surface and magnify
our impact and coverage. We illustrate our findings through two
distinct scenarios, namely intra-app and inter-app data exfiltration,
and detail how attackers can exfiltrate billing information typed by
the user in popular and widely available Android apps.
4.1 Threat Model
We demonstrate a new attack vector that abuses the mobile ad-
vertising ecosystem for delivering a mobile sensor-based attack
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1067Table 1: Feasible intra- and inter-app data exfiltration sce-
narios of in-app ads that access mobile sensors. In the inter-
app scenario, a (✓) denotes that access is still granted after