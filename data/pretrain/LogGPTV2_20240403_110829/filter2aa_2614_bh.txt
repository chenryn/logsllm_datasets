IAST），相当于是DAST和SAST结合的一种安全检测技术，通常会在
应用程序中添加探针或Agent代理，收集应用程序、Web容器、JVM中
的执行日志和函数调用信息，结合请求输入与响应消息，分析应用程序
中是否存在漏洞。
这三类工具中，IAST使用过程稍显烦琐，但技术优势比较明显，
漏洞检出率高于其他两类，同时漏洞误报率也低于其他两类，并可以快
速定位代码片段和API接口，可以作为首选的自动化API安全测试工
具，如果没有此类工具，则建议选择DAST类。易于集成的工具选项如
表11-1所示。
表11-1 持续集成中API扫描工具推荐表
至于SAST类的工具，如果想在流程中加入，建议先不要购买商业
版软件，先把SonarQube自身的安全插件使用起来，看看运营效果，当
漏洞逐渐减少，需要采购商业版软件时，再采购商业版软件与
SonarQube进行集成。SonarQube支持的代码安全检测标准常用的有
OWASP Top 10标准和SANS Top 25标准，对于常见的代码漏洞具有很
好的检测效果，且易于与代码仓库打通，完成跟踪与闭环。SonarQube
的安全插件支持的开发语言与漏洞检测规则类型如图11-6所示。
图11-6中第1部分表示支持的开发语言，比如C/C++、Java、PHP、
Go等常见开发语言均支持；第2部分表示当前选中的Java开发语言支持
的漏洞检测规则，图中可以看到XSS、加密、HTTP跳转等不同的漏洞
类型；第3部分为选中某个漏洞检测规则后的对应漏洞原理描述，这在
开发人员进行漏洞修复时，是很好的参考资料。
●图11-6 SonarQube安全规则
2.使用API网关
使用API网关在一定程度上可以帮助DevSecOps团队管理API，也是
系统架构中最简单有效的保护组件。API网关产品中所具有的身份认
证、访问控制、数据校验、限流熔断等功能，能有效地提高API的安全
性。
在后端服务部署前设置必须接入API网关的关键卡点，对外部客户
来说是不可见的，对内部开发人员来说，需要打通持续集成（CI/CD）
与API网关的接口，发布前准备好API导入数据供CI/CD调用。这会增加
开发人员的额外工作量，并影响发布进度，这些可能会成为推进此项工
作的障碍。同时，当所有后端服务的流量都必须由API网关进行通信
时，对原有通信性能的影响和API自身的稳定性，将是对推进此项工作
的负责人员的最大挑战。
在很多企业，API网关的采购和运维通常不属于安全团队管理，所
以API产品自身是否支持与CI/CD的集成，API网关产品所购买的license
能支持多少API的接入，成本投入如何分摊，这些问题是需要在确定此
卡点时讨论清楚的，否则可能会导致此项工作半途而废。
3.接入Web应用防火墙
熟悉API网关的读者可能会知道，当前市场上很多API网关产品对
API威胁的防护能力不足（在本书的第12章，将为读者讲述API网关产
品的相关内容），尤其是针对不同的API协议特性的定向攻击，这种情
况下，在整体系统架构中引入Web应用防火墙是一项投入不大却成效
显著的工作。
当接入Web应用防火墙后，外部攻击流量到达API网关时，已经过
了Web应用防火墙的流量检测，对恶意行为完成了过滤，对后端系统的
危害性大为降低。同时，运维人员通过Web应用防火墙的数据与日志，
可以定向分析异常行为，在Web应用防火墙上调整安全防护策略，达到
快速阻止攻击的目的。
在DevSecOps管道中，很重要的一个环节就是应急响应。Web应用
防火墙提供了API攻击的可视化入口，通过Web应用防火墙，可以发现
早期攻击行为，提前做出安全策略调整。另外，Web应用防火墙大多提
供异常告警功能，接入后相当于为API配备上了保安，能实时的监控线
上行为，及时提醒API维护和管理人员介入处理。
11.3.2 构建不同层面的安全能力
在设置关键卡点章节中，从如何简单、快速地收敛API安全风险的
角度优先讨论了API安全测试、API网关、Web应用防火墙的三个关键卡
点及其作用。如果想要更系统化地构建API安全能力，在三个卡点保证
API服务自身安全性的基础上，还需要构建不同层面的安全能力。主要
有以下两点。
■ 持续集成管道安全，即保证CI/CD环境的安全性。
■ API基础设施安全，即保证API运行环境的安全性。
1.持续集成管道安全
很多时候，当人们在讨论软件安全时，往往忽略其开发环境的安全
性。在DevSecOps中往往也是如此，大多数人关注于交付产物的安全
性，而忽略了CI/CD自身的安全性。因此，当本书在讨论DevSecOps安
全能力时，首先讨论的是平台自身的安全性。
传统研发模式下，研发人员在本地计算机开发，保存部分或全部代
码进行功能迭代，然后本地编译打包，上传至代码仓库，测试验证后再
手工上传到发布环境，进行线上发布。在这个过程中，SVN或Gitlab仅
仅充当静态存储的作用，没有跟研发流程打通，更谈不上开发到部署的
自动化。而在DevSecOps中，大多数流程都在CI/CD环境中，包括代码
编译和代码制品打包。快速交付管道缩短了交付周期，原来很多人工操
作转为机器或程序自动化去做。在这些情况下，管道自身的安全性将变
得更加重要，如果管道受到威胁，某个组件拥有了更多的权限，一旦受
到攻击，可能会导致整个管道流阻断。那么如何建立安全的网络环境、
如何通过访问控制限制用户和组件的权限、如何保证制品库不被利用来
推送非法的应用等问题将成为CI/CD自身安全保障所必须解决的问题。
（1）做好平台用户身份鉴别和访问控制
DevSecOps平台面向终端用户，这些用户基本都是企业内部的人
员，在用户身份鉴别上可以考虑集成企业的域控，通过LDAP协议和多
因子认证，保证使用者身份的安全性。当开发人员使用自己的域账号登
录代码仓库提交代码时，对代码仓库中所管理的项目严格按照项目组成
员的形式，分配目录级访问控制权限，比如项目负责人对所有文件夹具
有读、写、执行权限；普通开发人员只对代码文件夹具有读、写、执行
权限，而对项目管理类文档没有权限，对需求类文件夹只有读权限等。
而对于提交后的代码，需要进行审核，只有审核通过才能合并到中心代
码仓库。这样既能保障开发人员可以轻松地提交和修改代码，又能防止
开发过程中植入恶意的代码片段提交到中心代码仓库中。
而对于中心代码仓库到部署阶段的身份鉴别与访问控制，推荐使用
本书中提及的OAuth委托授权机制，这样的好处是平台不用保存用户的
密码信息，在用户确认授权后从中心仓库中拉取代码进行编译、打包、
验证与部署。当然，这其中必然涉及一些后台任务的账号，对于这类账
号，需要在平台中建立白名单机制，通过流程审批后开通白名单权限。
同时，要定期审核白名单和项目组成员的变更情况，保证平台中不存在
过期的、无人使用的、未知的账号和授权。
（2）添加代码制品的签名验证
为了防止未授权应用或恶意应用被管道推送、部署，对代码制品进
行数字签名校验是一项优秀的保护措施。对于需要代码制品签名的项目
组，为每一个成员创建数字证书。当成员用户访问平台时，获取其证书
信息，对提交的代码、生成的制品进行签名，平台在后端审核签名结
果，只有审核通过的方可推送。审核程序的脚本一般不建议嵌入管道流
中，防止管道被破坏后导致审核功能无效；建议放在一台具有严格访问
控制的独立服务器上，可以由管道流中某个挂载点触发调用。
（3）管理平台基础设施的安全
平台基础设施是DevSecOps平台的运行依赖，如果平台基础设施安
全没有做好，平台应用程序的安全性再好也无法控制风险。对于平台基
础设施的主机、网络应做好严格的身份认证和访问控制，建议日常的运
维通过堡垒机操作，不要将平台基础设施与办公网络直通，缩小受攻击
面。
2.API基础设施安全
API基础设施是API服务持续交付后的部署位置与运行环境，API基
础设施的安全性直接关系着API服务的安全性。要想做到API基础设施
的安全，主要从以下几个方面去实施。
■ 在持续交付管道中，添加部署前的基础设施安全扫描。
■ 对API基础设施实施严格的网络访问控制。
■ 使用加密的API通信链路。
■ 控制数据库及其他数据存储的访问。
（1）部署前API基础设施安全扫描
当全面测试通过后，通过持续交付通道，将API服务部署到基础设
施环境中去，在部署前，需要验证基础设施的安全基线是否符合要求，
主机是否存在已知的漏洞。只有这些工作完成后，才触发自动化部署动
作。其交互流程如图11-7所示。
●图11-7 持续交付中API基础设施安全扫描示意流程图
在图11-7中，当代码提交通过审核触发CD流程时，首先如步骤1）
CD发起容器实例化请求，实例创建成功后如23）通知CD，CD再通知漏
洞扫描器33）发起43）对基础设施的安全扫描，扫描完成后如步骤
5），漏洞扫描器6）通知CD，CD根据6）的通知结果，如果可以发
布，则7）获取容器实例，由步骤8）推送到基础设施上。整个流程中，
CD充当调度大脑的作用，在容器仓库、漏洞扫描器之间进行调度，根
据各个组件的响应通知，判断下一步如何操作。
（2）实施API基础设施网络访问控制
在传统的网络环境中，一般通过防火墙实施网络层的访问控制。如
果服务器数量较少，有时也通过iptables在主机层设置网络访问控制策
略。但在云环境下，无论是公有云还是私有云环境中，想通过防火墙或
路由交换设备来控制网络层的访问控制变得不切实际。对于云上环境，
一般采用安全组的方式进行网络访问控制。比如在阿里云中，使用普通
安全组是一种常见的安全策略。安全组相当于一层虚拟防火墙，具备状
态检测和包过滤功能。默认情况下，安全组的各个ECS之间允许所有协
议、端口的互相访问，而不同的安全组之间默认是相互网络隔离的。
如果是私有云，则自动化操作相对较为简单。如果是公有云，一般
公有云会提供管理类API供第三方厂商集成调用。集成时，只要按照公
有云的API集成要求，在CD中添加调用的代码即可完成安全组的设置。
阿里云ECS对外部提供的安全组API如图11-8所示。
●图11-8 阿里云ECS对外提供的安全组API
从图131-8中可以看到，API功能包含安全组的创建、修改、删除，
每一个安全组的授权策略的维护等。利用这些API，可以自动化完成安
全组的设置。
（3）使用加密的API通信
使用加密的API安全中重要的组成部分，使用加密通信在这里主要
有两层含义。
■ 在网络层的加密，即使用TLS保障网络层的通信安全。
■ 在应用层的加密，即使用HTTPS保障API应用层通信的安全。
更多的内容，请读者参考第9章的内容，此处不再重复。
（4）控制数据库及其他数据存储的访问
数据库是存储API服务中与业务相关数据的地方，是需要保护的重
点。在传统的IT信息系统中，通常存在多个分库和一个中央核心库的情
况。在分布式架构或微服务架构中，数据相对较为分散，但中央核心库
的情况仍普遍存在，不同的是，基于业务功能的划分，会存在一些边缘
的数据库存储其他的内容，或在同一个数据库中，基于不同的用户，划
分不同的用户表，来存储不同的业务数据。要控制数据库的访问，主要
从以下几个方面进行梳理。
■ 数据库有哪些用户？这些用户分别具有什么样的访问权限？
■ 是否已经在用户权限上区分了数据查询语言DQL、数据操纵语言
DML、数据定义语言DDL、数据控制语言DCL的操作权限？
■ 哪些用户可以通过哪些IP地址访问数据库？
上面这三个方面梳理清楚了，对于数据库的访问控制就变得简单