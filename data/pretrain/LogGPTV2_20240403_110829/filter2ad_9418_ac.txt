            RemoteCall var2 = this.ref.newCall(this, operations, 2, 4905912898345647071L);
            try {
                //同样的生成一个ConnectionOutputStream对象
                ObjectOutput var3 = var2.getOutputStream();
                //序列化“hello”字符串
                var3.writeObject(var1);
            } catch (IOException var17) {
                throw new MarshalException("error marshalling arguments", var17);
            }
                    //和rmiregistry进行通信查询
            this.ref.invoke(var2);
            Remote var22;
            try {
                //获取rmiregistry返回的输入流
                ObjectInput var4 = var2.getInputStream();
                //反序列化返回的Stub
                //同样在反序列化rmiregistry返回的Stub时这个点我们也可以利用lookup方法，理论上，我们可以在客                           户端用它去主动攻击RMI Registry，也能通过RMI Registry去被动攻击客户端
                var22 = (Remote)var4.readObject();
    ......
            } finally {
                this.ref.done(var2);
            }
            return var22;
    ......
    }
这里又提到了Stub我们来看看其反序列化完成后是什么样的吧
和之前在rmiregistry中看到的那个HashMap中的值一模一样，这下客户端就知道服务端的地址和端口号了，通过这些信息就可以和服务端进行通信了。
不过在此之前在看一下rmiregistry是怎么处理客户端的查询信息的。
    //为什么走case2 这里就不再重提了
    case 2:
        try {
            //获取客户端传来的输入流
            var8 = var2.getInputStream();
            //反序列化字符串“hello”
            //同样在反序列化客户端传来的查询数据时，这个点我们也可以利用lookup方法，理论上，我们可以在客                          户端用它去主动攻击RMI Registry，也能通过RMI Registry去被动攻击客户端
            //尽管lookup时客户端似乎只能传递String类型，但是还是那句话，只要后台不做限制，客户端的东西皆可控
            var7 = (String)var8.readObject();
        } catch (ClassNotFoundException | IOException var73) {
            throw new UnmarshalException("error unmarshalling arguments", var73);
        } finally {
            var2.releaseInputStream();
        }
            //调用RegistryImpl.lookup方法，返回的查询结果就是hello所对应的那个Proxy对象
        var80 = var6.lookup(var7);
        try {
          //实例化一个输出流
            ObjectOutput var82 = var2.getResultStream(true);
          //序列化Proxy对象
            var82.writeObject(var80);
            break;
        } catch (IOException var72) {
            throw new MarshalException("error marshalling return", var72);
        }
如此这般，这般如此，rmiregistry这块处理客户端的查询信息的部分就简单分析完了。
然后回到客户端这里
        //返回一个实现了IHello接口的Proxy对象
        IHello hello = (IHello) LocateRegistry.getRegistry("127.0.0.1", 1099).lookup("hello");
            //表面上时执行sayHello方法，实际上执行的是Proxy对象的Invoke方法
        System.out.println(hello.sayHello());
贴一下调用链
可以看到核心内容都在UnicastRef的Invoke方法, 下面是该方法的部分代码
    //var1 为当前的Proxy对象，
    public Object invoke(Remote var1, Method var2, Object[] var3, long var4) throws Exception {
        ......
        //创建一个链接对象
        Connection var6 = this.ref.getChannel().newConnection();
        StreamRemoteCall var7 = null;
        boolean var8 = true;
        boolean var9 = false;
        Object var13;
        try {
                ......
            //和getRegistry()与creatRegistry()一样 ，第三个参数为-1，但是这次调用的并不是                                                     RegistryImpl_Skel.bind方法        
            var7 = new StreamRemoteCall(var6, this.ref.getObjID(), -1, var4);
            Object var11;
            try {
                //获取输出流
                ObjectOutput var10 = var7.getOutputStream();
                //虽然没看里面的具体实现但是猜也能猜得到里面在序列化了一些东西
                this.marshalCustomCallData(var10);
                //获取要传递的参数类型，可是这次我们没传参数所以就没有
                var11 = var2.getParameterTypes();
                //如果传递的有参数的话会执行下面这个for循环，把参数相关的信息也序列化到里面
                for(int var12 = 0; var12 = 0) {
                throw new UnmarshalException("skeleton class not found but required for client version");
            }
            long var4;
            try {
                var4 = var41.readLong();
            } catch (Exception var37) {
                throw new UnmarshalException("error unmarshalling call header", var37);
            }
            MarshalInputStream var7 = (MarshalInputStream)var41;
            var7.skipDefaultResolveClass();
            Method var42 = (Method)this.hashToMethod_Map.get(var4);
            if (var42 == null) {
                throw new UnmarshalException("unrecognized method hash: method not supported by remote object");
            }
            this.logCall(var1, var42);
            Object[] var9 = null;
            try {
                this.unmarshalCustomCallData(var41);
                //从 ConnectionInputStream里反序列化出远程调用的参数
                //这里就是客户端可以用来攻击服务端的点，因为这里对远程调用方法的参数进行了反序列化，由此我们可以传递                          恶意的反序列化数据进来
                var9 = this.unmarshalParameters(var1, var42, var7);
            } catch (AccessException var34) {
                ((StreamRemoteCall)var2).discardPendingRefs();
                throw var34;
            } catch (ClassNotFoundException | IOException var35) {
                ((StreamRemoteCall)var2).discardPendingRefs();
                throw new UnmarshalException("error unmarshalling arguments", var35);
            } finally {
                var2.releaseInputStream();
            }
            Object var10;
            try {
                //反射调用对应的远程方法
                var10 = var42.invoke(var1, var9);
            } catch (InvocationTargetException var33) {
                throw var33.getTargetException();
            }
            try {
                //获取输出流
                ObjectOutput var11 = var2.getResultStream(true);
                //获取返回值类型
                Class var12 = var42.getReturnType();
                if (var12 != Void.TYPE) {
                    //序列化返回值等信息，同样也可以序列化一些恶意类信息
                    marshalValue(var12, var10, var11);
                }
            } catch (IOException var32) {
                throw new MarshalException("error marshalling return", var32);
            }
        } catch (Throwable var39) {
            Object var6 = var39;
            this.logCallException(var39);
            ObjectOutput var8 = var2.getResultStream(false);
            if (var39 instanceof Error) {
                var6 = new ServerError("Error occurred in server thread", (Error)var39);
            } else if (var39 instanceof RemoteException) {
                var6 = new ServerException("RemoteException occurred in server thread", (Exception)var39);
            }
            if (suppressStackTraces) {
                clearStackTraces((Throwable)var6);
            }
            var8.writeObject(var6);
            if (var39 instanceof AccessException) {
                throw new IOException("Connection is not reusable", var39);
            }
        } finally {
            var2.releaseInputStream();
            var2.releaseOutputStream();
        }
    }
好了服务端这边也简单的分析完了，我们来总结一下，在这些过程中可以利用的反序列化点。
首先是服务端调用bind方法像rmiregistry注册远程方法的信息时，在执行的过程中，调用了RegistryImpl_Skel.dispatch方法，反序列化服务端传来的数据，此为一个利用点，我们可以修改传递的数据从而达到从服务端对rmiregistry进行反序列化攻击
            var9 = var2.getInputStream();
                //反序列化“hello”字符串
            var7 = (String)var9.readObject();
            //这个位置本来是属于反序列化出来的“HelloImpl”对象的，但是最终结果得到的是一个Proxy对像
            //这个很关键，这个Proxy对象即所为的Stub(存根)，客户端就是通过这个Stub来知道服务端的地址和端口号从                            而进行通信的。
            //这里的反序列化点很明显是我们可以利用的，通过RMI服务端执行bind，我们就可以攻击rmiregistry注                册中心，导致其反序列化RCE
            var80 = (Remote)var9.readObject();
接下来就是客户端调用lookup方法向rmiregistry进行远程方法信息查询时,
rmiregistry反序列化了客户端传来的数据，这样以来我们就在客户端像rmiregistry查询时来构造恶意的反序列化数据。
        //获取客户端传来的输入流