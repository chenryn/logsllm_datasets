HANDLEs get allocated directly from the Heap
The Heap plays a central role in Binee
The Heap is what enables and ultimately distributes HANDLEs for all other 
emulation layers, including ﬁle IO and the registry.
kernel32:*
ntdll:*
Binee MM
Basically, anything not in the stack after 
execution has started goes into Binee’s 
Heap Manager.
Now we have a decent core, at least with respect to 
the user land process. Now it is time to build out the 
Mock OS subsystems
Starting with the Mock File System
What are the requirements for 
CreateFileA?
Returns a valid HANDLE into EAX 
register
Creating Files in the Mock File Subsystem
CreateFile
Emulator
Full Hook Handler
HANDLE Lookup Table
Full hook captures HANDLE from 
parameters to CreateFile
If ﬁle exists in Mock File System or 
permissions are for “write”. Create a 
new Handle object and get unique ID 
from Heap Manager
Write HANDLE back to EAX
Writing Files in the Mock File Subsystem
WriteFile
Emulator
Full Hook Handler
HANDLE 
Lookup 
Table
Temp
Real File 
System 
(Sandboxed)
Full hook captures HANDLE from 
parameters to WriteFile
HANDLE is used as key to lookup 
actual Handle object outside of 
emulator
All writes are written to sandboxed 
ﬁle system for later analysis.
Malware thinks ﬁle was written to 
proper location and continues as if 
everything is successful
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'ERROR_SUCCESS = 0x%x\n', p0 = 0x0) = 
0x403380
[1] 0x21970b80: F CreateFileA(lpFileName = 'malfile.exe', dwDesiredAccess = 0xc0000000, dwShareMode = 0x0, 
lpSecurityAttributes = 0x0, dwCreationDisposition = 0x2, dwFlagsAndAttributes = 0x80, hTemplateFile = 0x0) 
= 0xa00007b6
[1] 0x219c8fbe: F VerSetConditionMask() = 0xa00007b6
[1] 0x20af60a0: P __acrt_iob_func() = 0xa00007b6
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'out = 0x%x\n', p0 = 0xa00007b6) = 
0x403380
[1] 0x219c8fbe: F VerSetConditionMask() = 0x403380
[1] 0x20af60a0: P __acrt_iob_func() = 0x403380
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'out = 0x%x\n', p0 = 0x403380) = 0x403380
[1] 0x219c8fbe: F VerSetConditionMask() = 0x403380
[1] 0x20af60a0: P __acrt_iob_func() = 0x403380
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'out = 0x%x\n', p0 = 0x403380) = 0x403380
[1] 0x218f5780: P memset(dest = 0xb7feff1c, char = 0x0, count = 0x58) = 0xb7feff1c
[1] 0x21971000: F WriteFile(hFile = 0xa00007b6, lpBuffer = 0xb7feff10, nNumberOfBytesToWrite = 0xb, 
lpNumberOfBytesWritten = 0xb7feff0c, lpOverlapped = 0x0) = 0xb
[1] 0x21969500: F IsProcessorFeaturePresent(ProcessorFeature = 0x17) = 0x1
[1] 0x2196cef0: F SetUnhandledExceptionFilter(lpTopLevelExceptionFilter = 0x0) = 0x4
And in the console
> ls temp
malfile.exe
> cat temp/malfile.exe
hello world
Now you can see the ﬁle contents. Obviously 
trivial… more to come….
At this point, the user space is largely mocked. 
We also have the ability to hook functions, dump 
parameters and modify the call execution. 
Additionally, we have some mock HANDLEs.
Can we emulate more?!
Mock Registry Subsystem
RegOpenKeyA
Mock Registry
Emulator
Full Hook on Registry functions
Our hook interacts with the Mock Registry 
subsystem that lives outside of the 
emulation
Mock Registry has helper functions to 
automatically convert data to proper types 
and copy raw bytes back into emulation 
memory
Conﬁguration ﬁles deﬁnes OS environment quickly
●
Yaml deﬁnitions to describe as much of the OS context as possible
○
Usernames, machine name, time, CodePage, OS version, etc…
●
All data gets loaded into the emulated userland memory
root: "os/win10_32/"
code_page_identifier: 0x4e4
registry:
    HKEY_CURRENT_USER\Software\AutoIt v3\AutoIt\Include: "yep"
    HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Arbiters\InaccessibleRange\Psi: "PhysicalAddress"
    HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Arbiters\InaccessibleRange\Root: "PhysicalAddress"
    HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Arbiters\InaccessibleRange\PhysicalAddress: 
"hex(a):48,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,00,00,00,0
0,00,00,01,00,00,00,00,03,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,ff,ff,ff,ff,ff,f
f,ff,ff"
[1] 0x2230c420: F RegOpenKeyExA(hKey = 'HKEY_LOCAL_MACHINE', lpSubKey = 
'SYSTEM\ControlSet001\Control\Windows', ulOptions = 0x0, samDesired = 0x20019, phkResult = 0xb7feff40) = 
0x0
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'successfully opened key %s\n', p0 = 
'SYSTEM\ControlSet001\Control\Windows') = 0x403378
[1] 0x2230c3e0: F RegQueryValueExA(key = 0xa000099c, lpValueName = 'ComponentizedBuild', lpReserved = 0x0, 
lpType = 0xb7feff44, lpData = 0xb7feff4c, lpcbData = 0xb7feff48) = 0x0
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'status code = 0x%x\n', p0 = 0x0) = 
0x403378
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'ComponentizedBuild = %d\n', p0 = 0x1) = 
0x403378
[1] 0x2230c3e0: F RegQueryValueExA(key = 0xa000099c, lpValueName = 'CSDBuildNumber', lpReserved = 0x0, 
lpType = 0xb7feff44, lpData = 0xb7feff4c, lpcbData = 0xb7feff48) = 0x0
[1] 0x20af60a0: P __acrt_iob_func() = 0x0
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'CSDBuildNumber = %d\n', p0 = 0x194) = 
0x403378
[1] 0x2230c1d0: F RegCloseKey(key = 0xa000099c) = 0x0
[1] 0x22336bd0: F RegCreateKeyA(hKey = 'HKEY_CURRENT_USER', lpSubKey = 'Software\Binee', phkResult = 
0xb7feff40) = 0x0
[1] 0x20b05710: F __stdio_common_vfprintf(stream = 0x0, format = 'successfully opened key %s\n', p0 = 
'Software\Binee') = 0x403378
[1] 0x22337640: F RegSetValueA(hKey = '', lpSubKey = 'Testing', dwType = 0x1, lpDate = 0xb7feff80, cbData = 
0x0) = 0x57
Conﬁguration ﬁles can be used to make subtle 
modiﬁcations to the mock environment which 
allows you to rapidly test malware in diverse 
environments
Let’s do more...
Mocked Threading
Round robin scheduler approximately simulates a multi-thread environment. 
Time slices are conﬁgurable but equal for each “thread” of execution. Thread 
manager handles all the context switching and saving of registers.
Allows us to hand wave (punt for later) most multithreading issues.
Thread 1
Thread 2
Thread 3
Thread 4
Thread Manager
Threads inside the emulator
[1] 0x20ae3f80: F CreateThread(lpThreadAttributes = 0x0, dwStackSize = 0x0, lpStartAddress = 0x401040, 
lpParameter = 0xa01007ee, dwCreationFlags = 0x0, lpThreadId = 0x0) = 0x3
[1] 0x20ae06d0: F GetProcessHeap() = 0x123456
[2] 0x20dd0710: F __stdio_common_vfprintf(stream = 0x0, format = 'tid %d, count %d\n', p0 = 0x0, p1 = 0x0) 
= 0x403378
[3] 0x20dc10a0: P __acrt_iob_func() = 0xa01007ee
[1] 0x20b3f05a: F HeapAlloc(hHeap = 0x123456, dwFlags = 0x8, dwBytes = 0x4) = 0xa0200826
[1] 0x20ae3f80: F CreateThread(lpThreadAttributes = 0x0, dwStackSize = 0x0, lpStartAddress = 0x401040, 
lpParameter = 0xa0200826, dwCreationFlags = 0x0, lpThreadId = 0x0) = 0x4
[2] 0x20dc10a0: P __acrt_iob_func() = 0x403378
[3] 0x20dd0710: F __stdio_common_vfprintf(stream = 0x0, format = 'tid %d, count %d\n', p0 = 0x1, p1 = 0x0) 
= 0x403378
[1] 0x20aeaaf0:  **WaitForMultipleObjects**() = 0xb7feffa4
[1] 0x2011e5a0:  **WaitForMultipleObjects**() = 0xb7feffa4
[2] 0x20dc10a0: P __acrt_iob_func() = 0x403378
[4] 0x20dc10a0: P __acrt_iob_func() = 0xa0200826
[1] 0x2011e5d0:  **WaitForMultipleObjectsEx**() = 0xb7feffa4
[3] 0x20dc10a0: P __acrt_iob_func() = 0x403378
[2] 0x20dd0710: F __stdio_common_vfprintf(stream = 0x0, format = 'tid %d, count %d\n', p0 = 0x0, p1 = 0x1) 
= 0x403378
Increasing ﬁdelity with proper DllMain execution
Need to setup stack for DllMain call, set up proper 
values for DLLs loaded by the PE.
Call this for every DLL loaded by the PE.
But how to do this in the emulator?
Start emulation at each DllMain and stop at ???
BOOL WINAPI DllMain(
  _In_ HINSTANCE hinstDLL,
  _In_ DWORD     fdwReason,
  _In_ LPVOID    lpvReserved
);
ROP Gadgets — an easy shortcut to loading DLLs
A simpler approach is to only start the emulator once when the entire process 
space is layed out. However, the start point is no longer the PE entry point.
Instead, entry point is now the start of our ROP chain that calls each loaded 
DllMain in order and ending with the PE’s entry point address
lpvReserved
fdwReason
hinstDll
ret
lpvReserved
fdwReason
hinstDll
ret
lpvReserved
fdwReason
hinstDll
ret
envp
argv
argc
        dll_1                                  dll_2                                  dll_3                                malware
Demos
●
ea6 shows unpacking and service starting
●
ecc shows unpacking and wrote malicious dll to disk, loaded dll 
and executed it
We’ve open-sourced this — What’s next
●
Increase ﬁdelity with high quality hooks
●
Single step mode, debugger style
●
Networking stack and implementation, including hooks
●
Add ELF (*nix) and Mach-O (macOS) support
●
Anti-Emulation
Thank you and come hack with us
https://github.com/carbonblack/binee