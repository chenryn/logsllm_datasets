title:Eliminating the hypervisor attack surface for a more secure cloud
author:Jakub Szefer and
Eric Keller and
Ruby B. Lee and
Jennifer Rexford
Eliminating the Hypervisor Attack Surface
for a More Secure Cloud
Jakub Szefer, Eric Keller, Ruby B. Lee and Jennifer Rexford
Princeton University
Princeton, NJ, USA
{szefer, ekeller, rblee, jrex}@princeton.edu
ABSTRACT
Cloud computing is quickly becoming the platform of choice
for many web services. Virtualization is the key underly-
ing technology enabling cloud providers to host services for
a large number of customers. Unfortunately, virtualization
software is large, complex, and has a considerable attack
surface. As such, it is prone to bugs and vulnerabilities
that a malicious virtual machine (VM) can exploit to attack
or obstruct other VMs — a major concern for organizations
wishing to move “to the cloud.” In contrast to previous work
on hardening or minimizing the virtualization software, we
eliminate the hypervisor attack surface by enabling the guest
VMs to run natively on the underlying hardware while main-
taining the ability to run multiple VMs concurrently. Our
NoHype system embodies four key ideas: (i) pre-allocation
of processor cores and memory resources, (ii) use of virtual-
ized I/O devices, (iii) minor modiﬁcations to the guest OS to
perform all system discovery during bootup, and (iv) avoid-
ing indirection by bringing the guest virtual machine in more
direct contact with the underlying hardware. Hence, no hy-
pervisor is needed to allocate resources dynamically, emulate
I/O devices, support system discovery after bootup, or map
interrupts and other identiﬁers. NoHype capitalizes on the
unique use model in cloud computing, where customers spec-
ify resource requirements ahead of time and providers oﬀer
a suite of guest OS kernels. Our system supports multiple
tenants and capabilities commonly found in hosted cloud in-
frastructures. Our prototype utilizes Xen 4.0 to prepare the
environment for guest VMs, and a slightly modiﬁed version
of Linux 2.6 for the guest OS. Our evaluation with both
SPEC and Apache benchmarks shows a roughly 1% perfor-
mance gain when running applications on NoHype compared
to running them on top of Xen 4.0. Our security analysis
shows that, while there are some minor limitations with cur-
rent commodity hardware, NoHype is a signiﬁcant advance
in the security of cloud computing.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
Categories and Subject Descriptors
C.0 [General]: System Architectures; D.4.6 [Software En-
gineering]: Operating Systems—Security and Protection
General Terms
Security
Keywords
Secure Cloud Computing, Hypervisor Security, Attack Vec-
tors, Virtualization, Multicore, Hardware Security
1.
INTRODUCTION
Cloud computing is transforming the way people use com-
puters. Cloud computing is also transforming how networked
services are run. The provider of a service (the cloud cus-
tomer) is able to dynamically provision infrastructure to
meet the current demand by leasing resources from a hosting
company (the cloud infrastructure provider). The cloud in-
frastructure provider can leverage economies of scale to pro-
vide dynamic, on-demand infrastructure at a favorable cost.
The provider does this by utilizing virtualization where vir-
tual machines from multiple customers share the same phys-
ical server. This multi-tenancy, where mutually distrusting
customers lease resources from the same provider, under-
scores the need for a secure virtualization solution.
Because of its central role, the virtualization software is
a prime target for attacks. Unfortunately, the virtualiza-
tion layer is quite complex and forms a very large trusted
computing base (e.g. Xen has ∼200K lines of code in the
hypervisor itself ∼600K in the emulator, and over 1M in the
host OS). The large code base is not suitable for formal ver-
iﬁcation – the best formal veriﬁcation techniques available
today are only able to handle around 10K lines of code [18].
Further, bug reports such as those listed in NIST’s National
Vulnerability Database [6] show the diﬃculty of shipping
bug-free hypervisor code. A malicious VM can exploit these
bugs to attack the virtualization software. Exploiting such
an attack vector would give the attacker the ability to ob-
struct or access other virtual machines and therefore breach
conﬁdentiality, integrity, and availability of the other virtual
machines’ code or data.
Such vulnerabilities make many companies hesitant about
moving to the cloud [14]. If not for the security threat of
attacks on a vulnerable virtualization layer, computing in
the cloud has the potential to be more secure than in pri-
vate facilities. This is due to the very nature of the large
and critical data centers run by the cloud infrastructure
401providers. The level of physical security (cameras, person-
nel, etc.) found in these data centers is often cost prohibitive
for individual customers.
Previous approaches to securing the virtualization soft-
ware have limitations when applied to cloud computing. Ap-
proaches that minimize the hypervisor, e.g., [32], are not
suitable for cloud computing infrastructures because they
greatly reduce functionality. Approaches that introduce a
new processor architecture, e.g., [10], cannot be deployed
today. Approaches that add extra software to verify the
integrity of the hypervisor, e.g., [9], add overhead, leave a
small window open between the attack and the reactive de-
fense, and do not protect against attacks that exploit bugs
in the hypervisor for purposes other than injecting code or
modifying the control ﬂow (e.g., bugs which cause the hy-
pervisor to crash).
In this paper we present our NoHype system that takes
the novel approach of eliminating the hypervisor attack sur-
face altogether. We remove the need for virtual machines to
constantly interact with the hypervisor during their lifetime
(e.g., by short-circuiting the system discovery and avoiding
indirection). With NoHype, we (i) retain the ability to run
and manage virtual machines in the same manner as is done
today in cloud computing infrastructures, (ii) achieve this
with today’s commodity hardware, and (iii) prevent attacks
from happening in the ﬁrst place.
We previously proposed the high-level idea of NoHype in
a position paper [16]. The previous work discussed how pre-
allocation and virtualized I/O devices could be used to re-
move the hypervisor and motivated why this idea works in
the setting of hosted cloud infrastructures.
In this paper,
we present the complete design, implementation, and eval-
uation of a working NoHype system on today’s commodity
hardware. This new work adds a signiﬁcant level of depth
through a complete prototype design and implementation,
as well as new performance and security analysis which iden-
tiﬁes and evaluates potential side-channels. In particular, we
make the following new contributions:
• An architecture which eliminates the hypervi-
sor attack surface. As we previously proposed [16],
the architecture pre-allocates memory and processor
cores (so a hypervisor does not have to do this dy-
namically) and uses only virtualized I/O devices (so a
hypervisor does not have to emulate devices). New to
this paper, the architecture also avoids the indirection
of mapping physical interrupts and identiﬁers to the
virtual ones (so a hypervisor does not have to be in-
volved in any communication channels). Each of these
is enabled by the unique use case of the cloud comput-
ing model.
• A design which can be realized on today’s com-
modity hardware. We take advantage of modern
hardware features to enforce the resource allocations
as well as the common practice for cloud infrastruc-
ture providers to provide a set of kernel images. With
this, we allow the guest operating systems to boot up
as normal. This process is supported by a temporary
hypervisor, which enables a slightly modiﬁed guest op-
erating system to discover the environment at boot up
and save this information about the system for later
use.
• A prototype implementation and system eval-
uation. We built a NoHype prototype using an In-
tel Nehalem quad-core processor. We utilized Xen 4.0
to prepare the environment for the guest virtual ma-
chines, and a slightly modiﬁed version of Linux 2.6 for
the guest operating system. Our performance evalu-
ation through the use of SPEC 2006 [15] and Apache
[1] benchmarks show roughly 1% faster run times. We
also present a security analysis which shows that No-
Hype makes an improvement in the security of virtual-
ization technology for hosted and shared cloud infras-
tructures.
The remainder of the paper is organized as follows.
In
Section 2 we discuss background information about virtual-
ization. In Section 3 we discuss our threat model. In Section
4 we discuss the NoHype system architecture, while in Sec-
tion 5 we discuss details of our prototype implementation.
The security analysis is presented in Section 6. Finally, re-
lated works are discussed in Section 7 and we conclude in
Section 8 including a discussion about future work where we
discuss live virtual machine migration.
2. VIRTUALIZATION VULNERABILITIES
The purpose of a hypervisor is to present to the guest VM
a view that appears as though the operating system and ap-
plications inside the VM are running directly on some given
hardware. The hypervisor achieves this by emulating the
underlying hardware and arbitrating access to it. Realizing
this functionality requires a large and complex body of soft-
ware. It also requires a signiﬁcant and frequent interaction
between the guest VMs and the hypervisor. This interac-
tion is the basis of the security threat which a malicious VM
can utilize to attack the hypervisor and exploit bugs in the
hypervisor or supporting virtualization software to attack
another VM.
2.1 Roles of Virtualization Software
Figure 1 shows the hypervisor, host OS, and emulator
(e.g., QEMU) which form the virtualization layer. The dot-
ted line outlines the components which are the trusted com-
puting base in today’s virtualization solutions. Highlighted
in the ﬁgure are also the points of interaction and compo-
nents which are involved in these interactions.
Figure 1: Roles of hypervisor.
An important and large part of the virtualization layer,
in addition to the hypervisor, is the host OS ( 1(cid:13)) and the
emulator ( 2(cid:13)). The host OS (Dom0 in Xen’s terminology)
has special management privileges and a system administra-
tor uses the host OS to manage VMs on the system, e.g.,
launching and shutting down VMs. This causes the host
OS to interact with the hypervisor via hypercalls ( 3(cid:13)). The
402Figure 2: VM exits in stock Xen 4.0 during server bootup and runtime of a guest VM.
host OS may also include drivers for the physical devices
which are used by the system ( 4(cid:13)). An emulator which em-
ulates system devices that guest VMs interact with is also
commonly run within the host OS. All together, this func-
tionality requires over a million lines of code.
We now dicuss the roles of the hypervisor in emulating and
managing the main resources in today’s computer systems.
Processor cores: The ﬁrst responsibility of any virtualiza-
tion solution is the ability to arbitrate access to the processor
cores as well as sometimes emulate their functionality. The
hypervisor needs to cope with the dynamic addition and re-
moval of VMs as they get started and stopped, as well as
the ability to schedule multiple VMs on the same system. In
addition to scheduling the VMs, the virtualization layer also
uses the scheduler to periodically, every clock tick, run some
of its own functionality – for example the hypervisor needs
to check whether to deliver timer interrupts to the VM in
this clock tick. The virtualization layer may also emulate
the underlying processor as the presented processor cores
may diﬀer in capabilities from the actual cores.
Memory: The hypervisor is also in charge of managing the
host physical memory of the system. Each VM is assigned
some guest physical memory that the guest OS can man-
age and assign as virtual memory to the applications. Here,
the virtualization layer can take a number of diﬀerent ap-
proaches to managing the allocation of host physical memory
among the various VMs. One popular use of virtualization is
server consolidation which relies on the virtualization layer
to dynamically manage the allocation of physical memory
to the diﬀerent VMs in the system.
I/O devices: Another important functionality of the virtu-
alization layer is dealing with I/O devices such as a network
interface card (NIC). Today’s virtualization solutions com-
monly create virtual devices that they assign to the guest
VMs. The virtualization layer needs to manage these virtual
devices and emulate their behavior. There is also the option
of dedicating physical devices to the VMs. In this situation,
the virtualization layer only needs to assign and reclaim the
devices. It does not need to emulate their behavior. In both
cases, however, the emulator is needed to emulate the PCI
(Peripheral Component Interconnect) bus. The guest OS
interacts with the PCI bus during bootup to discover and
conﬁgure the available devices.
Interrupts and Timers: The virtualization layer must also
emulate the interrupt subsystem and timers for the guest
VMs. For interrupts, the main parts of the underlying hard-
ware interrupt subsystem emulated by the hypervisor in-
clude the I/O APIC1 (which routes interrupts from devices
to processor cores) and local APICs (which are attached
to each core as an interface to the interrupt subsystem for
sending and receiving interrupt messages to and form other
local APICs or the I/O APIC). These APICs are emulated
so the guest OS can use them to conﬁgure and manage in-
terrupts inside the VM, while physical APICs are controlled
by the hypervisor for the management of the physical plat-
form. For timers, since the hypervisor utilizes the physical
timer devices to get periodic clock ticks itself, it has to em-
ulate the timer device for each guest VM. Today, VMs can
be scheduled on diﬀerent cores and as such, the interrupts