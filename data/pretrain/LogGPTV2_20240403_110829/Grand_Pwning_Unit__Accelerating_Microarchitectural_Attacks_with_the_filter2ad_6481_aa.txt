title:Grand Pwning Unit: Accelerating Microarchitectural Attacks with the
GPU
author:Pietro Frigo and
Cristiano Giuffrida and
Herbert Bos and
Kaveh Razavi
2018 IEEE Symposium on Security and Privacy
Grand Pwning Unit: Accelerating Microarchitectural
Attacks with the GPU
Pietro Frigo
Vrije Universiteit
Amsterdam
PI:EMAIL
Cristiano Giuffrida
Vrije Universiteit
Amsterdam
Herbert Bos
Vrije Universiteit
Amsterdam
PI:EMAIL
PI:EMAIL
Kaveh Razavi
Vrije Universiteit
Amsterdam
PI:EMAIL
Abstract—Dark silicon is pushing processor vendors to add
more specialized units such as accelerators to commodity pro-
cessor chips. Unfortunately this is done without enough care to
security. In this paper we look at the security implications of
integrated Graphical Processor Units (GPUs) found in almost
all mobile processors. We demonstrate that GPUs, already
widely employed to accelerate a variety of benign applications
such as image rendering, can also be used to “accelerate”
microarchitectural attacks (i.e., making them more effective) on
commodity platforms. In particular, we show that an attacker
can build all the necessary primitives for performing effective
GPU-based microarchitectural attacks and that these primitives
are all exposed to the web through standardized browser ex-
tensions, allowing side-channel and Rowhammer attacks from
JavaScript. These attacks bypass state-of-the-art mitigations and
advance existing CPU-based attacks: we show the ﬁrst end-to-
end microarchitectural compromise of a browser running on
a mobile phone in under two minutes by orchestrating our
GPU primitives. While powerful, these GPU primitives are not
easy to implement due to undocumented hardware features. We
describe novel reverse engineering techniques for peeking into the
previously unknown cache architecture and replacement policy
of the Adreno 330, an integrated GPU found in many common
mobile platforms. This information is necessary when building
shader programs implementing our GPU primitives. We conclude
by discussing mitigations against GPU-enabled attackers.
I. INTRODUCTION
Microarchitectural attacks are increasingly popular for leak-
ing secrets such as cryptographic keys [39], [52] or compro-
mising the system by triggering bit ﬂips in memory [42], [45],
[48], [51]. Recent work shows that these attacks are even
possible through malicious JavaScript applications [7], [18],
[20], [38], signiﬁcantly increasing their real-world impact. To
counter this threat, the research community has proposed a
number of sophisticated defense mechanisms [8], [9], [29].
However, these defenses implicitly assume that the attacker’s
capabilities are limited to those of the main CPU cores.
In this paper, we revisit this assumption and show that it
is insufﬁcient to protect only against attacks that originate
from the CPU. We show, for the ﬁrst time, that the Graphical
Processing Units (GPUs) that manufacturers have been adding
to most laptops and mobile platforms for years, do not just
accelerate video processing, gaming, deep learning, and a host
of other benign applicatons, but also boost microarchitectural
attacks. From timers to side channels, and from control over
physical memory to efﬁcient Rowhammer attacks, GPUs offer
all
the necessary capabilities to launch advanced attacks.
Worse, attackers can unlock the latent power of GPUs even
from JavaScript code running inside the browser, paving the
way for a new and more powerful family of remote microarchi-
tectural attacks. We demonstrate the potential of such attacks
by bypassing state-of-the-art browser defenses [9], [29], [44]
and presenting the ﬁrst reliable GPU-based Rowhammer attack
that compromises a browser on a phone in under two minutes.
We speciﬁcally focus on mobile platforms given that, on
such platforms, triggering Rowhammer bit ﬂips in sandboxed
environments is particularly challenging and has never been
demonstrated before. Yet, mobile devices are particularly
exposed to Rowhammer attacks given that catch-all defenses
such as ANVIL [5] rely on efﬁcient hardware monitoring
features that are not available on ARM.
Integrated Processors While transistors are becoming ever
smaller allowing more of them to be packed in the same chip,
the power to turn them all on at once is stagnating. To mean-
ingfully use the available dark silicon for common, yet com-
putationally demanding processing tasks, manufacturers are
adding more and more specialized units to the processors, over
and beyond the general purpose CPU cores [12], [14], [49].
Examples include integrated cryptographic accelerators, audio
processors, radio processors, network interfaces, FPGAs, and
even tailored processing units for artiﬁcial intelligence [43].
Unfortunately, the inclusion of these special-purpose units in
the processor today appears to be guided by a basic security
model that mainly governs access control, while entirely ig-
noring the threat of more advanced microarchitectural attacks.
GPU-based Attacks One of the most commonly integrated
components is the Graphical Processing Unit (GPU). Most
laptops today and almost all mobile devices contain a pro-
grammable GPU integrated on the main processor’s chip [26].
In this paper, we show that we can build all necessary
primitives for performing powerful microarchitectural attacks
directly from this GPU. More worrying still, we can perform
these attacks directly from JavaScript, by exploiting the We-
bGL API which exposes the GPU to remote attackers.
More speciﬁcally, we show that we can program the GPU
to construct very precise timers, perform novel side channel
attacks, and, ﬁnally, launch more efﬁcient Rowhammer attacks
from the browser on mobile devices. All steps are relevant.
© 2018, Pietro Frigo. Under license to IEEE.
DOI 10.1109/SP.2018.00022
195
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
Precise timers serve as a key building block for a variety of
side-channel attacks and for this reason a number of state-
of-the-art defenses speciﬁcally aim to remove the attackers’
ability to construct them [9], [29], [44]. We will show that our
GPU-based timers bypass such novel defenses. Next, we use
our timers to perform a side-channel attack from JavaScript
that allows attackers to detect contiguous areas of physical
memory by programming the GPU. Again, contiguous mem-
ory areas are a key ingredient in a variety of microarchitectural
attacks [20], [48]. To substantiate this claim, we use this
information to perform an efﬁcient Rowhammer attack from
the GPU in JavaScript, triggering bit ﬂips from a browser
on mobile platforms. To our knowledge, we are the ﬁrst to
demonstrate such attacks from the browser on mobile (ARM)
platforms. The only bit ﬂips on mobile devices to date required
an application with the ability to run native code with access
to uncached memory, as more generic CPU cache eviction
were found too inefﬁcient to trigger bit ﬂips [48]. In contrast,
our approach generates hundreds of bit ﬂips directly from
JavaScript. This is possible by using the GPU to (i) reliably
perform double-sided Rowhammer and, more importantly, (ii)
implement a more efﬁcient cache eviction strategy.
Our end-to-end attack, named GLitch, uses all these GPU
primitives in orchestration to reliably compromise the browser
on a mobile device using only microarchitectural attacks in
under two minutes. In comparison, even on PCs, all previ-
ous Rowhammer attacks from JavaScript require non default
conﬁgurations (such as reduced DRAM refresh rates [7] or
huge pages [20]) and often take such a long time that some
researchers have questioned their practicality [8].
Our GLitch exploit shows that browser-based Rowhammer
attacks are entirely practical even on (more challenging) ARM
platforms. One important implication is that it is not sufﬁcient
to limit protection to the kernel to deter practical attacks, as
hypothesized in previous work [8]. We elaborate on these and
further implications of our GPU-based attack and explain to
what extent we can mitigate them in software.
As a side contribution, we report on the reverse engineering
results of the caching hierarchy of the GPU architecture for
a chipset that is widely used on mobile devices. Constructing
attack primitives using a GPU is complicated in the best of
times, but made even harder because integrated GPU archi-
tectures are mostly undocumented. We describe how we used
performance counters to reverse engineer the GPU architecture
(in terms of its caches, replacement policies, etc.) for the
Snapdragon 800/801 SoCs, found on mobile platforms such
as the Nexus 5 and HTC One.
Contributions We make the following contributions:
• The ﬁrst study of the architecture of integrated GPUs,
their potential for performing microarchitectural attacks,
and their accessibility from JavaScript using the standard-
ized WebGL API.
• A series of novel attacks executing directly on the GPU,
compromising existing defenses and uncovering new
grounds for powerful microarchitectural exploitation.
• The ﬁrst end-to-end remote Rowhammer exploit on mo-
bile platforms that use our GPU-based primitives in
orchestration to compromise browsers on mobile devices
in under two minutes.
• Directions for containing GPU-based attacks.
Layout We describe our threat model in Section II before
giving a brief overview of the graphics pipeline in Section III.
In Section IV, we discuss the high-level primitives that the
attackers require for performing microarchitectural attacks
and show how GPUs can help building these primitives in
Section V, VI, VII and VIII. We then describe our exploit,
GLitch, that compromises the browser by orchestrating these
primitives in Section IX. We discuss mitigations in Section X,
related work in Section XI and conclude in Section XII.
Further information including a demo of GLitch can be found
in the following URL: https://www.vusec.net/projects/glitch.
II. THREAT MODEL
We consider an attacker with access to an integrated GPU.
This can be achieved either through a malicious (native)
application or directly from JavaScript (and WebGL) when the
user visits a malicious website. For instance, the attack vector
can be a simple advertisement controlled by the attacker. To
compromise the target system, we assume the attacker can only
rely on microarchitectural attacks by harnessing the primitives
provided by the GPU. We also assume a target system with all
defenses up, including advanced research defenses (applicable
to the ARM platform), which hamper reliable timing sources
in the browser [9], [29] and protect kernel memory from
Rowhammer attacks [8].
III. GPU RENDERING TO THE WEB
OpenGL is a cross-platform API that exposes GPU hard-
ware acceleration to developers that seek higher performances
for graphics rendering. Graphically intensive applications such
as CAD, image editing applications and video games have
been adopting it for decades in order to improve their perfor-
mances. Through this API such applications gain hardware
acceleration for the rendering pipeline fully exploiting the
power of the underlying system.
The rendering pipeline: The rendering pipeline consists of
2 main stages: geometry and rasterization. The geometry
step primarily executes transformations over polygons and
their vertices while the rasterization extracts fragments from
these polygons and computes their output colors (i.e., pixels).
Shaders are GPU programs that carry out the aforementioned
operations. These are written in the OpenGL Shading Lan-
guage (GLSL), a C-like programming language part of the
speciﬁcation. The pipeline starts from vertex shaders that per-
forms geometrical transformations on the polygons’ vertices
provided by the CPU. In the rasterization step, the polygons
are passed to the fragment shaders which compute the output
color value for each pixel usually using desired textures. This
output of the pipeline is what is then displayed to the user.
196
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
WebGL: WebGL is the result of the increasing demand of
porting the aforementioned graphically intensive applications
to the Web. This API exposes the GPU-accelerated rendering
pipeline to the Web to bolster the development of such
applications. Currently supported by every major browser [3]
it provides most of the functionalities accessible from the
OpenGL ES 2.0 API. Since it was conceived with the purpose
of porting native graphics application to the Web, the anatomy
of these two APIs is almost equivalent. This means that the
aforementioned shaders can be compiled and run seamlessly
from both the environments providing a fast lane to hardware
acceleration to every JavaScript-enabled developer.
While these APIs were designed with the purpose of ac-
celerating image rendering we will show through out this
paper how this acceleration acquires another meaning while
we exploit it to build the necessary primitives to carry out
microarchitectural attacks.
IV. ATTACKER PRIMITIVES
”Microarchitectural attacks” aim to either (a) steal data
using variety of side channels or (b) corrupt data using
hardware vulnerabilities such as Rowhammer.
In this section we analyze the two aforementioned attacks’
families identifying the required primitives that the attackers
need to conduct them. We further explore why GPU ”acceler-
ates” these attacks; i.e., makes them more effective than what
is possible when malicious code runs on the CPU.
A. Leaking data
A primary mechanism for leaking data using microarchitec-
tural attacks is to time operations over resources shared with
a victim process. For example, in a FLUSH+RELOAD cache
attack [52], the attacker checks whether accessing a shared
memory page with a victim is suddenly faster, which reveals
that the victim has accessed the shared page, bringing it to the
cache. In FLUSH+RELOAD and many other popular variants
[39], the attacker needs a mechanism that can tell whether a
certain memory operation on the memory hierarchy executed
fast or slow. This hints at our ﬁrst primitive:
P1. Timers: Having access to high-resolution timers is a
primary requirement for building timing side-channel attacks.
There are many examples of these attacks executed na-
tively [6], [21], [39], [40], [52], but more recently Oren et
al. [38] showed that it is possible to mount such attacks from
JavaScript, extending the threat model to remote exploitation.
Browser vendors immediately responded by reducing the reso-
lution of JavaScript timers in order to thwart these attacks [10],
[11], [18], [53]. However, recent work has shown the inefﬁcacy
of this solution by extracting homebrewed timers crafted
from JavaScript interfaces such as SharedArrayBuffers
to build even more advanced attacks [18], [28]. While the
vendors’ response consisted again in undertaking the timing
source by disabling it [1], [41], [47], [50], advanced defenses
have been trying to address the issue in a more principled
manner. Kohlbrenner and Shacham [29] proposed Fuzzyfox,
a solution that introduces randomness in the JavaScript event
loop to add noise to timing measurements performed by an
attacker. Antithetically, Cao et al. [9] presented DeterFox
which attempts to make all interactions to/from browser frames
that have a secret deterministic in order to completely disable
the timing channel.
We show in Section V how WebGL can be used for building
high- precision timing primitives that are capable of measuring
both CPU and GPU operations, bypassing all existing, even
advanced defenses.
P2. Shared resources: Another fundamental requirement in
a side-channel attack is having access to resources shared
with other (distrusting) processes. For example, in a cache
attack used to leak information from a victim process, the
cache should be shared by the attacker process. Previous work
shows variety of ways for leaking information over shared
resources, such as CPU data caches [18], [39], [52],
the
translation lookaside buffer [23] and memory pages [7], [40].
Co-processors, such as (untrusted) GPUs, may share various
resources with the CPU cores, but at the very least, they share
memory pages with the rest of the system.
We discuss how the integrated GPU of a modern ARM
processor can get access to the system memory in Section VI,
allowing an attacker to perform a side-channel attack directly
from the GPU. To do this, an attacker needs to bypass mul-
tiple levels of undocumented GPU caches which we reverse
engineer and report on for the ﬁrst time as part of this work.
Unlike CPU caches that are large and optimize for a general-
purpose workload by implementing either random [31] or non-
deterministic [20] replacement policies, we show that GPU
caches are small and follow a deterministic replacement policy.
This allows an attacker to reason about cache hits or misses
with great precision, paving the way for fast and reliable
side-channel attacks with little noise, as we will show in
Section VII.
B. Corrupting data
Rowhammer is a prime example of an attack that corrupts
data by abusing a hardware fault. Previous work shows that it
is possible to corrupt page tables for privilege escalation [45],
[48], compromise the browser [7], [20] and cloud VMs [42],
[51]. The main obstacles in performing these attacks are (I)
knowing the physical location of the targeted row and (II) fast
memory access [48].
P3. Knowledge of the physical location: Knowing the phys-
ical location of allocated memory addresses is a requirement
in order to understand which rows to hammer. The typical
approach is to exploit physically contiguous memory in order
to gain knowledge of relative physical addresses. Previous
work abuses the transparent huge page mechanism that is on-
by-default on x86 64 variants of Linux [20], [42], [45], which
provided them with 2 MB of contiguous physical memory.
Huge pages are off-by-default on ARM. To address this
requirement, the Drammer attack [48] abuses the physically
contiguous memory provided by the Android ION allocator.
197
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
This remains a fundamental requirement even when ap-
proaching this from the GPU. We discuss how we can use a
novel timing side-channel executed from the GPU that mixes
the knowledge of the DRAM architecture [40] and low-level
memory management to ﬁnd contiguous physical regions of