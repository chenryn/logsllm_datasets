# Reflection’s Hidden Power: "Modifying Programs at Run-Time"

**Author:** J~~~~~~~ M~~~~~~  
**Date:** May 27, 2008

## Table of Contents
1. **Abstract**
2. **Glossary**
3. **Introduction**
4. **Implementation of Reflection Manipulation**
5. **Real Life Usage: Reflection 101**
6. **Implementing Reflection**
    - Load an Assembly
    - Getting the Types From an Assembly
    - Getting and Invoking Constructor of an Object Type
    - Traversing Instantiated Objects
    - Invoking Functionality on an Object
    - Change the Values of an Object
7. **The DotNet World: From System Process to Class Level**
8. **High-Level View: What Can Reflections Do and What Is It?**
9. **How to Navigate to a Specific Object**
10. **How to Access the Form Object**
11. **New Vectors: Access by Reflection**
12. **Limitations and Brick Walls**
13. **Demo Attacks**
    - The SQL Injection
    - The Social Engineering Vector
14. **Conclusion**

## Abstract
This paper explores the use of Reflection to gain control over .NET (DotNet) compiled code. It focuses on how Reflection can be used to navigate and access values and functionalities that are typically restricted. This guide is intended for .NET programmers, particularly those working with C#. No prior knowledge of Reflection is required. The paper covers the basic concepts of Reflection and .NET, along with practical examples. It is written for .NET versions 2.0 and 3.5 and includes examples of attacks, such as forcing a program to change values and execute functionality.

## Glossary
- **AppDomain**: In .NET, an AppDomain is equivalent to a process. It provides separation and protection between different AppDomains, allowing independent execution. For example, if `void Main()` crashes, the program can still report the problem and attempt recovery using a secondary AppDomain.
- **Assembly**: A .NET Assembly contains the definition of types, a manifest, and other metadata. Assemblies may or may not be executable and can exist as .EXE (Executable) or .DLL (Dynamic-link library) files.
- **GetType()**: A function inherited from `Object` in .NET, which returns the `System.Type` for the object it is called on.
- **UML**: Unified Modeling Language, a graphical language for visualizing, specifying, constructing, and documenting software artifacts.

## Introduction
### Subject
Reflection allows access to a meta-level of programs. This paper will demonstrate how to use Reflection to gain access and control over external .EXE or .DLL files. Reflection enables access to private and protected areas of a program, as well as direct modification of variables and triggering of functionalities.

### Purpose
This paper serves as a resource for programmers researching Reflection. It provides a basic understanding of Reflection and includes example code for hands-on practice. The report offers an overview of Reflection and in-depth usage in real-world scenarios.

### Scope
This paper focuses on Reflection in managed .NET environments, specifically at runtime.

### Overview
The paper begins by explaining how to use Reflection to manipulate a compiled program. It covers the basics of Reflection, provides example code, and offers supporting background information on .NET and Reflection. The discussion then moves to specific attacks enabled by Reflection.

## Implementation of Reflection Manipulation
1. **Load the External Codebase**: Start by loading the Assembly from an .EXE or .DLL into an accessible AppDomain, which facilitates easy access.
2. **Find Object Types**: Identify the object types in the program to launch constructors, access static objects, and invoke static functions.
3. **Run the Program Normally**: To run the program on its normal path, get the common entry point `void Main()` and invoke it.
4. **Access Target Program Components**: Traverse instance objects to find a reference to the part of the program you want to control.
5. **Impact Changes**: Modify values or invoke specific functionalities on an object to achieve the desired outcome.

Optional steps include:
- Recoding `void Main()` to take complete control over the program’s entry point.
- Loading the target compiled code base into a different AppDomain.
- Accessing the Form object(s) to take over the GUI.

Understanding the codebase and UML diagrams is invaluable for navigating and controlling the target program. Sequence diagrams can also be helpful as they show specific execution paths.

## Real Life Usage: Reflection 101
One of the fundamental tasks in Reflection is changing a value on an object. This can be done by calling `GetType` on the target instance object, accessing its fields with `GetFields`, and setting a new value with `SetValue`.

### Common Flags
Some commonly used flags in Reflection include:
- `System.Reflection.BindingFlags.Instance`: Retrieve from the instance part of an object.
- `System.Reflection.BindingFlags.Static`: Retrieve from the static area of an object type.
- `System.Reflection.BindingFlags.NonPublic`: Retrieve non-public items.
- `System.Reflection.BindingFlags.Public`: Retrieve public items.
- `System.Reflection.BindingFlags.FlattenHierarchy`: Retrieve from derived classes.

```csharp
// Example of building an instance flag
System.Reflection.BindingFlags flag = 
    System.Reflection.BindingFlags.Instance | 
    System.Reflection.BindingFlags.NonPublic | 
    System.Reflection.BindingFlags.Public | 
    System.Reflection.BindingFlags.FlattenHierarchy;
```

### Accessing Fields and Methods
To get the fields and methods for an object, use the following code:

```csharp
objectIn.GetType().GetFields(flag);
objectIn.GetType().GetMethods(flag);
```

Flags do not cancel each other out, so it is possible to request both instance and static, or public and non-public, on the same flag.

## Implementing Reflection
Key aspects of Reflection include:
- Loading an Assembly
- Getting the types from an Assembly
- Getting and invoking constructors of an object type
- Traversing instantiated objects
- Invoking functionality on an object
- Changing the values of an object

### Load an Assembly
```csharp
public static System.Reflection.Assembly LoadAssembly(string filePath)
{
    return System.Reflection.Assembly.LoadFile(filePath);
}
```

### Getting the Types From an Assembly
```csharp
public static System.Type[] GetTypesFromAssembly(System.Reflection.Assembly assemblyIn)
{
    return assemblyIn.GetTypes();
}
```

### Getting and Invoking Constructor of an Object Type
```csharp
public static object LoadObject(System.Type theType)
{
    var constructors = theType.GetConstructors();
    var defaultConstructor = constructors[0];
    return LoadConstructor(defaultConstructor, new object[]{});
}

public static object LoadConstructor(System.Reflection.ConstructorInfo theConstructor, object[] param)
{
    return theConstructor.Invoke(param);
}
```

This structured and detailed approach ensures that the text is clear, coherent, and professional, providing a comprehensive guide to using Reflection in .NET.