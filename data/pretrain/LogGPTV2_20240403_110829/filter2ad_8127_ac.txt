  * 来自taskmgr具有微软签名的文件“file”
  * “file. .”这是我们的"假恶意软件"，应该隐藏但执行
  * “filex x”包含WinSCP的签名，此文件稍后将变得重要。
我们现在需要一种方法来从 “file. .” 二进制文件启动进程，这不是一项简单的任务，因为所有Microsoft Windows
API调用都会自动从文件名中删除“. .”，然后启动“file”(taskmgr)。为了解决这个问题，我们使用以下代码:
图28：解决自动从文件名中删除“. .”的代码
上面的代码只是调用CreateProcessA来从“filex
x”(WinSCP)创建一个进程。如果我们编译这个应用程序并启动它，最终将执行的是WinSCP。可我们不能正常启动这个文件。相反，我们在调试器内启动应用程序（例如：WinDbg）。现在我们在函数中设置一个断点，它将产生相关的系统函数调用，调用:“bp
ntdll!NtCreateUserProcess”。我们可以使用 “g” (go) 命令在调试器中启动程序并命中断点。在断点处，可以dump当前堆栈
(“dq rsp”) 。堆栈上的第12个指针很重要，应该被dump。这个地址的第四个值是指向文件名的指针。
图29：windbg
文件名(绿色框)现在是标准化显示(以\??\C:\… 开头)。这种标准化还需要从文件名末尾删除 “. .” ——这就是为什么上面的C代码不使用“file.
.” 作为进程名的原因。但是由于文件已经被改变为标准化，现在可以修改这个值。让我们用“.” 覆盖 “x” 字符。(命令“eb”用于编辑字节):
图30：编辑字节为"."
然后继续执行“g”。猜猜会发生什么?
“file. .” (恶意软件)被执行。但如果用户右键单击任务管理器中的进程并选择“属性”，则显示“file” (taskmgr)
的Microsoft签名。
图31：显示“file” (taskmgr) 的Microsoft签名。
但是“filex x”
（WiSCP）是什么呢？是的，这个文件也显示为正在运行的进程，即进程资源管理器(因为路径是在调用NtCreateUserProcess之前设置的)。
图32："filex x"运行情况
与PowerShell有什么关系？是的，也是错误的二进制文件：
图33：Powershell显示情况
这是不是安全问题得视情况而定。首先，攻击者可以启动一个进程(恶意软件)，重命名/删除它，然后将一个有效的文件重命名为相同的名称。在taskmanager和process
explorer中也会出现上述效果。但是不同之处在于，使用上述技巧，得在进程启动的同时发生。
例如，如果在云中已知二进制哈希，请考虑已经安装的端点保护检查每个已启动的进程。通过此技巧，端点保护可能会使用错误的二进制文件来验证哈希是否为白名单。另外还要注意创建此类进程并不需要调试器，应用程序可以挂钩
NtCreateUserProcess函数并在钩子中就可以实现修改。
WINDOWS CMD的技巧:
这些技巧与文件系统技巧没有任何关系，但是我认为它们很适合这篇博文。在Windows
cmd中，可以在命令中的任何位置写入^符号，CMD将完全忽略掉这个符号。例如,“calc.exe”
和“ca^l^c”效果相同。^是不是最后一个符号不重要，并且两个^符号在相邻时无法使用。使用双引号"隔开就没有限制了（它可以是最后一个字符或多次使用）。例如，^ca^“^”^lc^“将启动计算器。
这同样适用于零长度环境变量。可以通过％name％访问环境变量。如果环境变量的长度为零，则“cal％name％c”将与“calc”相同。由于环境变量的默认值长度不为零，因此不能直接使用。但是，可以使用特殊语法（:~start,end）在环境变量上调用substring。下图显示了“windir”环境变量以及子字符串如何与negativ值一起使用以获取返回的零长度变量：
图34：环境变量取字符
下图显示了这些技术的组合，以隐藏Powershell在版本2中启动（这些技巧在之前很有用，但在最新的Windows 10系统上应该是实现不了）：
图35：运行Powershell技巧
可以看到使用^和环境变量技巧（%os:~0,-56%），还使用版本“00000000002.0000”（而不仅仅是2）并且参数是“?ver
”不是“-ver”（注意，这不是正常的？符号，它是U+2015 ;光使用?不起作用）。
在Windows上除了“\” 也可以把“/”作为路径使用。例如，C:\Windows/\//\system32\calc.exe
与C:\Windows\system32\calc.exe 相同。 而且还可以通过UNC路径访问二进制文件不用 `“C:\\”`模式：
`\\\127.0.0.1\C$\windows\system32\calc.exe`
通常可以使用类似的技巧来突破使用黑名单的方法（例如，如果禁止使用Powershell.exe，则攻击者可以调用Power^shell.exe来绕过限制。或者如果禁止使用calc，则可以执行：
^"%LOCALAPPDATA:~-3%^%SYSTEMROOT:~0,1%^"
启动calc.exe等）。
这篇博客文章由RenéFreingruber _(@ReneFreingruber)_ 代表SEC Consult Vulnerability
Lab撰写。James Forshaw _(@tiraniddo)将一系列的技术列表文档化。_ Alex Inführ (@insertScript)
在他的博客文章中记录了一些ADS隐藏技巧。有关ADS之前的参考文献，请参阅以下参考资料部分。
## 参考文献
编辑历史：
2018-06-13：Soroush
Dalili在Twitter上指出，他已经在2010年使用了INDEX_ALLOCATION技巧来绕过IIS5.1中的身份验证检查以及类似“..”文件夹的技巧。
更多信息可在以下两个参考资料中找到：
2018-06-14：Daniel Bohannon（@danielhbohannon）开发了Invoke-DOSfucation，这是一个可用于cmd.exe中混淆的工具。
2018-06-14：Oddvar Moe（@Oddvarmoe）列出了更多从ADS执行应用程序/脚本的技术：
## 附录
**译者注：** 经过测试Windows
XP后微软就禁止用户从ADS里执行程序了。不允许执行，但是写入，读出操作都可以。其实只是禁用了OWASP中提到的start命令，文章中用WMIC运行就很巧妙的绕过封堵，测试方法如下（需要使用绝对路径）。
    wmic process call create "C:\ProjectCode\test\test:putty.exe"
文中的zone.identifier是一个文本文件，然后作为数据流存放到了putty.exe里。ADS并不是一个新的话题了，在翻译过程中发现国内有许多相关资料写得都不错，国人很棒棒。根据目前知识量的储备在WinDBG调试部分翻译的词汇翻译不够准确，根据需求请参考原文。
**文章来源**
**OWASP alternate_data_stream**
**一个用ADS（供选数据流）隐藏Windows后门的方法**
**文件流-MSDN说明**
**Hidden Alternative Data Streams的进阶利用技巧**