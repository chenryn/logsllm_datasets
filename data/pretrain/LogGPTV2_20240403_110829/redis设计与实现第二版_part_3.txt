## Page 20
16·第一部分数据结构与对象
库定义的函数。
多分配一个字节来容纳这个空字符，这是为了让那些保存文本数据的 SDS可以重用一部分
这些API总会将 SDS 保存的数据的末尾设置为空字符，并且总会在为 buf数组分配空间时
2.2.5
可以保存任意格式的二进制数据。
属性的值而不是空字符来判断字符串是否结束，如图 2-18所示。
字符，而是用它来保存一系列二进制数据。
时就是什么样。
程序不会对其中的数据做任何限制、过滤、或者假设，数据在写人时是什么样的，它被读取
（binary-safe），所有 SDS API都会以处理二进制的方式来处理 SDS 存放在 buf数组里的数据，
因此，为了确保 Redis 可以适用于各种不同的使用场景，SDS 的 API都是二进制安全的
例如，使用 SDS 来保存之前提到的特殊数据格式就没有任何问题，因为 SDS 使用 len
虽然 SDS 的 API都是二进制安全的，但它们一样遵循C字符串以空字符结尾的惯例:
这也是我们将 SDS 的 buf 属性称为字节数组的原因－—Redis 不是用这个数组来保存
举个例子，如图 2-19 所示，如果我们有一个保存文本数据的 SDS 值 sds，那么我们就可以
通过使用二进制安全的 SDS，而不是C字符串，使得 Redis 不仅可以保存文本数据，还
虽然数据库一般用于保存文本数据，但使用数据库来保存二进制数据的场景也不少见
兼容部分 C字符串函数
sdshdr
free
buf
。
sdshdr
free
r· 'e' 'd'  '+  s ol c·  ol u'  's 't' 'e' r ro"
buf
>·R'|'e'|'d'  i+'s' *\o''c''2.'u*'s'|'t' 'e'|·r' Ao"
图2-17使用空字符来分割单词的特殊数据格式
图 2-19一个保存着文本数据的 SDS
图2-18保存了特殊数据格式的SDS
---
## Page 21
2.3
2.2.6
将 SDS 保存的字符串追加到一个C字符串的后面：
sdscatsds
 sdsclear
sdsdup
 sdsavail
 sdslen
 sdsfree
 sdsempty
sdsnew
可以使用所有库中的函数
只能保存文本数据
修改字符申长度N次必然需要执行N次内存重分配
API是不安全的，可能会造成缓冲区溢出
获取字符申长度的复杂度为O(M)
剧
表 2-2 列出了 SDS 的主要操作 API。
表 2-1对C字符串和 SDS 之间的区别进行了总结。
从而避免了不必要的代码重复。
这样 Redis 就不用专门编写一个将 SDS 字符串追加到C字符串之后的函数了。
strcat(c_string, sds->buf);
与此类似，我们还可以将一个保存文本数据的 SDS 作为 strcat 函数的第二个参数，
这样 Redis 就不用自己专门去写一个函数来对比 SDS 值和 C字符串值了。
strcasecmp(sds->buf, "hello world");
SDS API
总结
的末尾
将给定C字符串拼接到SDS字符串的末尾
清空 SDS 保存的字符串内容
创建一个给定 SDS 的副本（copy）
返回 SDS 的未使用空间字节数
返回 SDS 的已使用空间字节数
释放给定的 SDS
创建一个不包含任何内容的空SDS
创建一个包含给定C字符串的 SDS
C字符
表 2-1C 字符串和 SDS 之间的区别
作
表 2-2 SDS 的主要操作 API
用
可以使用一部分库中的函数
可以保存文本或者二进制数据
修改字符串长度N次最多需要执行N次内存重分配
API是安全的，不会造成缓冲区溢出
获取字符串长度的复杂度为0(1)
来直接获得，复杂度为0(1）
直接获得，复杂度为O(1)
O(M), N 为被拼接 C 字符串的长度 
因为情性空间释放策略，复杂度为O(1)
O(M), N 为给定 SDS 的长度
这个值可以通过读取 SDS 的 free 属性
O(M)，N 为被拼接 SDS 字符串的长度
这个值可以通过读取 SDS 的len 属性来
O(N), N 为被释放 SDS 的长度
0(1)
O(N), N 为给定 C 字符串的长度 
SD
时间复杂度
第 2 章简单动态字将事·17
8
---
## Page 22
18·第一部分数据结构与对象
2.5参考资料
2.4重点回顾
sdscmp
sdstrim
sdsrange
sdsgrowzero
sdscpy
《C语言接口与实现：创建可重用软件的技术》一书的第15章和第16章介绍了一个
口 Redis只会使用C字符串作为字面量，在大多数情况下，Redis 使用 SDS（Sirmple
函数
0
口 维基百科的 Null-terminated string 词条给出了空字符结尾字符串的定义，说明了这
5）兼容部分C字符串函数。
4）二进制安全。
3）减少修改字符申长度时所需的内存重分配次数。
2）杜绝缓冲区溢出。
和 SDS 类似的通用字符串实现。
1）
口
】比起C字符串，SDS具有以下优点：
Dynamic String，简单动态字符串）作为字符串表示。
有API 的完整实现：http://www.gnu.org/software/libc
GNU C库的主页上提供了GNU C标准库的下载包，其中的/string 文件夹包含了所
API 的基础实现。
 org/wiki/Null-terrminated_string
种表示的来源，以及C语言使用这种字符串表示的历史原因：http://en.wikipedia.
computer.yourdictionary.com/binary-safe 给出了二进制安全的定义。
常数复杂度获取字符串长度。
SDS中移除所有在C字符串中出现过的字符
数据会被覆盖或清除
SDS 原有的字符串
接受一个SDS和一个C字符申作为参数，从
对比两个 SDS 字符串是否相同
保留 SDS 给定区间内的数据，不在区间内的
用空字符将 SDS 扩展至给定长度
将给定的 C字符串复制到 SDS 里面，覆盖
用
的长度
O(M)，N 为两个 SDS 中较短的那个 SDS 
O(N)，N 为给定C字符串的长度
O(M)，N 为被保留数据的字节数
O(M),N 为扩展新增的字节数
O(M)，N 为被复制C字符串的长度
时间复杂度
（续）
---
## Page 23
本章不会介绍这些内容，如果不具备关于链表的基本知识的话，可以参考《算法：C语言实
（output buffer），本书后续的章节将陆续对这些链表应用进行介绍。
本身还使用链表来保存多个客户端的状态信息，以及使用链表来构建客户端输出缓冲区
用链表作为列表键的底层实现。
包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时，Redis 就会使
言并没有内置这种数据结构，所以 Redis 构建了自己的链表实现。
来灵活地调整链表的长度。
链表在Redis 中的应用非常广泛，比如列表键的底层实现之一就是链表。当一个列表键
作为一-种常用数据结构，链表内置在很多高级的编程语言里面，因为 Redis 使用的C语
因为已经有很多优秀的算法书籍对链表的基本定义和相关算法进行了详细的讲解，所以
本章接下来的内容将对 Redis 的链表实现进行介绍，并列出相应的链表和链表节点 API。
举个例子，以下展示的integers 列表键包含了从1到1024 共-一千零二十四个整数：
除了链表键之外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis 服务器
integers 列表键的底层实现就是一个链表，链表中的每个节点都保存了一个整数值。
链表提供了高效的节点重排能力，以及顺序性的节点访问方式，并且可以通过增删节点
*6(6
8)"8"
7)"7n
61
5)"5"
4)"4
1"1
redis> LRANGE integers 0 10
redis> LLEN integers
1)"11"
r6
链
第3章
表
---
## Page 24
20·第一部分数据结构与对象
而 dup、free 和 match成员则是用于实现多态链表所需的类型特定函数：
链表的话，操作起来会更方便：
3.1
的3.2节，又或者《算法导论（第三版）》一书的10.2节。
现（第1～4部分）》一书的3.3至3.5节，或者《数据结构与算法分析：C语言描述》一书
口free函数用于释放链表节点所保存的值
口dup 函数用于复制链表节点所保存的值；
list 结构为链表提供了表头指针 head、表尾指针tail，以及链表长度计数器len,
typedef struct list {
虽然仅仅使用多个listNode 结构就可以组成链表，但使用 adlist.h/list 来持有
多个 listNode 可以通过 prev 和 next 指针组成双端链表，如图 3-1 所示。
typedef struct listNode {
每个链表节点使用一个 adlist.h/listNode 结构来表示:
}list;
listNode;
链表和链表节点的实现
int (*match) (void *ptr,void *key);
1/节点值对比函数
void (*free)(void *ptr);
//节点值释放函数
:(xad* pToa) (dnp*)* pTOA
/1节点值复制函数
unsigned long len;
11链表所包含的节点数量
listNode *tail;
1/表尾节点
listNode *head;
/！表头节点
void *value;
/！节点的值
/}后置节点
struct listNode *prev;
//前置节点
next
listNode
value
图3-1由多个listNode 组成的双端链表
prev
next
listNode
value
prev
next
listNode
value
next
---
## Page 25
listGetDupMethod
3.2
 listGetMatchMethod
listSetMatchMethod
listGetFree
listSetFreeMethod
listSetDupMethod
表3-1列出了所有用于操作链表和链表节点的API。
口 多态：链表节点使用void*指针来保存节点值，并且可以通过list 结构的 dup、
口
口
口 双端：链表节点带有 prev 和 next 指针，获取某个节点的前置节点和后置节点的
Redis 的链表实现的特性可以总结如下：
图 3-2 是由一个 list 结构和三个 listNode 结构组成的链表。
 match 函数则用于对比链表节点所保存的值和另一个输人值是否相等。
口
链表和链表节点的 API
行计数，程序获取链表中节点数量的复杂度为 0(1)。
带链表长度计数器：程序使用 list 结构的 len 属性来对 list 持有的链表节点进
带表头指针和表尾指针：通过 list 结构的 head 指针和 tail 指针，程序获取链
无环：表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL，对链表的访
复杂度都是 O(1)。
同类型的值。
free、match 三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不
表的表头节点和表尾节点的复杂度为 0(1)。
问以 NULL为终点。
match
free
dup
tail
head
list
3
len
图3-2由 1ist结构和1istNode 结构组成的链表
返回链表当前正在使用的节点值对比函数
将给定的函数设置为链表的节点值对比函数
返回链表当前正在使用的节点值释放函数
将给定的函数设置为链表的节点值释放函数
返回链表当前正在使用的节点值复制函数
将给定的函数设置为链表的节点值复制函数
·
表 3-1链表和链表节点 API
1istNode
value
作用
listNode
value
listNode
属性直接获得，O(1)
属性直接获得，O(1)
属性直接获得，0(1)
value
0(1)
对比函数可以通过链表的match
(1)0
释放函数可以通过链表的free
复制函数可以通过链表的 dup
时间复杂度
→NULL
第3章 
链
表
·21
---
## Page 26
22·第一部分数据结构与对象
3.3
listRelease
listDup
listRotate
listDelNode
listIndex
listSearchKey
listinsertNode
listAddNodeTail
listAddNodeHead
listCreate
listNodeValue
1istNextNode
listPrevNode
listLast