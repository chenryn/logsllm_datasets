native
GnuPG (gpgsm) (2.1.18)
native
native
native
S/MIME (1.0-10)
native
FlipDog (1.07)
native
native
rc_smime (git:f294cde)
native
–
–
–
–
–
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
–
–
–
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
–
–
–
CMS MIME ID UI
–
(cid:32)
(cid:35)
–
–
–
–
–
–
(cid:71)(cid:35)
–
–
–
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
Weaknesses
C1, I3
C3, U1
I1, U1
I2, U1
I1
U1
C1, I3
U1
C2, U1
C4, I2, I3, U1
C4
C3, U1
U1
C1, M1, M2, M3, I2, U1
I2
I2, I3, U1
C3, C4, U1
C4, I1, U1
C1
U1
–
U1
Signature can be spoofed with limitations (weak forgery)
No vulnerabilities found
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:32)
(cid:35)
–
–
–
–
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
(cid:32)
–
–
–
–
–
–
–
–
(cid:35)
–
MailDroid (4.81)
Nine (4.1.3a)
i
o
r
d
n
A
iOS Mail App (12.01)
b Roundcube (1.3.4)
Horde/IMP (6.2.21)
W
Exchange/OWA (15.1.1034.32) Control (4.0500.15.1)
e
Indistinguishable signature on all UI levels (perfect forgery)
Indistinguishable signature on ﬁrst UI level (partial forgery)
(cid:32)
(cid:71)(cid:35)
Table 3: Out of 22 tested email clients 15 were vulnerable to our S/MIME signature spooﬁng attacks (perfect or partial forgery). Some clients
with weak forgery, conﬂicting UI elements or unusual workﬂows are documented in more detail in the appendix.
early spam mitigation) may be desirable for certain applica-
tions in the future. These should then be covered in future
standard revisions to ensure that they can be supported with-
out introducing new risk factors. Until then, they can be sup-
ported either by nesting several distinct messages explicitly
or as non-standard extensions that are disabled by default in
compliant implementations.
6.3 MIME Attack Class
There are two approaches to counter signature spooﬁng at-
tacks on partially signed messages which are hidden in the
MIME tree. Either email clients should show exactly which
part of the message was signed, for example, by using a
green frame. However, note that this is hard to implement in
a secure way because all edge cases and potential bypasses,
such as internal cid: references, need to be considered, and
it must be made sure that the frame cannot be drawn by the
attacker using HTML/CSS. Or email clients should be con-
servative and only show a message as correctly signed if the
whole message (i.e., the MIME root) was correctly signed.
While this will break digital signatures in some mailing lists
and in forwarded emails, such an all-or-nothing approach
can be considered as more secure and is preferred by the au-
thors of this paper. Furthermore, if the signature contains a
timestamp, it should be shown to the user to draw suspicion
on re-used and wrapped old signatures. For incoming new
messages the timestamp could be compared to the current
system time and an alert could be given if the signature con-
tains a timestamp older than a certain threshold. This can
also protect from attacks such as non-realtime surreptitious
forwarding.
6.4
ID Attack Class
Approaches to encrypted and digitally signed email headers
like Memory Hole [12] (a non-standard OpenPGP extension)
or RFC 7508 (Securing Header Fields with S/MIME) aim to
guarantee a cryptographic binding between the signature and
the sender address. However, few email clients support these
standards. Furthermore, clients supporting Memory Hole
(Thunderbird/Enigmail, R2Mail2) still accept signed emails
without header protection for backwards compatibility.
Even worse, Enigmail did not guarantee consistency be-
tween unprotected email headers and headers protected by
Memory Hole in our tests. Clients remain vulnerable to ID
USENIX Association
28th USENIX Security Symposium    1023
attacks unless further mitigations are applied. Hence, it can
be considered a good practice to explicitly show the signer
user IDs when displaying a PGP signed message. A com-
parison to the FROM or SENDER header ﬁelds may not be suf-
ﬁcient because—as our evaluation shows—that approach is
error prone and hard to implement in a secure way.
6.5 UI Attack Class
The results of signature veriﬁcation should not be shown in
attacker-controlled parts of the UI, such as the message con-
tent itself, which may contain arbitrary graphics. In the con-
text of webmail and native email clients using HTML5 for
their UI, such as Electron14 or XUL,15 it must be ensured
that there is a strict isolation (e.g., separate DOM) between
the message content and the rest of the UI. Otherwise, it may
be possible to inﬂuence the appearance of the UI, for ex-
ample by injecting CSS properties into the message content.
Following the example of browsers with regard to HTTPS,
the trend is to avoid positive UI indicators and only show
indicators if something is wrong. These systems aim to be
secure by default. However, this is obviously infeasible for
email signatures as long as most emails are unsigned.
7 Additional Findings
7.1 Crashes
We discovered multiple crashes during testing. For example,
we found a nullpointer dereference in Mozilla’s NSS library,
which is also used in Evolution and Postbox. Although the
security impact is rather low, sending a speciﬁcally crafted
email does lead to a permanent denial of service, as email
clients will cache this email and crash upon startup. We ex-
perienced a similar issue with iOS Mail, but did not evaluate
the origin of the crash. Additionally, we observed crashes
in MailMate, R2Mail2, Maildroid (Exception), Roundcube,
and Windows 10 Mail.
7.2 Airmail Accepts Invalid PGP Signatures
We found that the Airmail GPG-PGP plugin does not prop-
erly validate OpenPGP signatures, accepting even invalid
ones, irregardless of their status. This makes signature spoof-
ing attacks trivial.
Also, Airmail does not correctly verify the validity of the
signing key even for good signatures, allowing imperson-
ation attacks by injecting public keys into the user’s keyring
with the email address that should be spoofed.
The vulnerability is present in all versions of Airmail
GPG-PGP until "1.0 (9)". Our ﬁnding is documented as
CVE-2019-8338.
14GitHub Inc., Electron, https://electronjs.org/
15Mozilla Foundation, XUL, https://developer.mozilla.org/XUL
7.3 OpenPGP Message Composition Attacks
OpenPGP messages and keys are sequences of (possibly
nested) packets (see Fig. 16). This structure is under control
of the attacker, so it must be validated by the implementation.
According to the OpenPGP standard, any arbitrary nesting
of encryption, compression, and signatures is allowed with-
out restrictions. This ﬂexibility is unjustiﬁed, and seems to
be an oversight in the speciﬁcation, as only a small num-
ber of combinations are actually meaningful in practice. It
also opens PGP up to vulnerabilities such as decompression
attacks [13]. In practice, implementations must enforce ad-
ditional limits; for example, GnuPG allows up to 32 levels of
nesting.
[SessionKeyPacket]
[EncryptedDataPacket
[CompressedDataPacket
[OnePassSignaturePacket]
[LiteralDataPacket]
[SignaturePacket]
]
]
(a) Example structure of an OpenPGP message that is signed with
one signing key, compressed, and encrypted to one recipient key.
message :- encrypted | signed | compressed | literal.
encrypted :- SessionKeyPacket*, EncryptedDataPacket(message).
signed :- OnePassSignaturePacket, message, SignaturePacket.
compressed :- CompressedDataPacket(message).
literal :- LiteralDataPacket.
(b) Grammar for OpenPGP message composition from RFC 4880
(simpliﬁed excerpt). This grammar does not include rules for com-
patibility with older PGP versions.
Figure 16: Valid OpenPGP message and its grammar speciﬁcation.
Status lines are emitted by GnuPG as packets are pro-
cessed recursively. However, the status lines do not repre-
sent packet boundaries nor the depth of nesting. As a conse-
quence, the status interface is a ﬂat projection of the nested
structure, and some information is lost in the process.
Message Composition Attacks GnuPG outputs status
lines as a side-effect of recursive processing of packets in
OpenPGP messages. This has led to signature spooﬁng at-
tacks in the past, where an attacker can prepend or append
additional unsigned plaintext to a message [14]. We veri-
ﬁed that current versions of GnuPG handle this correctly, and
could not ﬁnd any similar issues for signature veriﬁcation.
Encryption Spooﬁng Some attacks to spoof signature ver-
iﬁcation can also be used to spoof decryption results, caus-
ing the email client to indicate an encrypted message where
in fact the plaintext was transmitted in the clear. Although
by itself this is not a security violation, it is concerning and
might be a precursor or building stone for other attacks.
1024    28th USENIX Security Symposium
USENIX Association
Besides the obvious adaptation of our UI redressing and
status line injection attacks, we found a ﬂaw in the mes-
sage composition veriﬁcation of GnuPG. Since 2006 [14],
GnuPG only allows at most one plaintext (i.e., one Literal
Data Packet) in a message. However, GnuPG does not verify
that the plaintext of an encrypted (non-conforming) message
is actually contained within the encrypted part of the mes-
sage. By replacing the plaintext in an Encrypted Data Packet
with a dummy packet ignored by GnuPG (the OpenPGP
standard makes a provision for private/experimental packet
types), and prepending or appending the (unencrypted) Lit-
eral Data Packet, we can cause GnuPG to output the same
status lines as for a properly encrypted message, excluding
the order. The following output shows the result for a prop-
erly encrypted message (differences in red and bold):
[GNUPG:] BEGIN_DECRYPTION
[GNUPG:] PLAINTEXT 62 0
[GNUPG:] DECRYPTION_OKAY
[GNUPG:] END_DECRYPTION
The next output shows the result for an empty Encrypted
Data Packet, followed by a Literal Data Packet in the clear:
[GNUPG:] BEGIN_DECRYPTION
[GNUPG:] DECRYPTION_OKAY
[GNUPG:] END_DECRYPTION
[GNUPG:] PLAINTEXT 62 0
Both messages are displayed identically (resulting in a
perfect forgery) in Thunderbird, Evolution, Mutt, and Out-
look, revealing the ﬂexibility of the PGP message format,
GnuPG’s parser, and the GnuPG status line parsers in email
client applications.
1
2
3
4
1
2
3
4
7.4 Short Key PGP IDs
Short key IDs of 32 bit (the least signiﬁcant 4 bytes of the
ﬁngerprint) were used in the PGP user interface, on business
cards, by key servers, and other PGP-related utilities in the
past until pre-image collisions were demonstrated to be efﬁ-
cient in practice [15]. Unfortunately, the Horde/IMP email
client still uses short key IDs internally to identify public
keys and automatically downloads them from key servers to
cache them in internal data structures. Our attempts to ex-
ploit these collisions for ID attacks were inconsistent due to
caching effects, which is why we did not include these at-
tacks in the evaluation. Horde/IMP should mitigate these at-
tacks by using full-length ﬁngerprints to identify PGP keys.
7.5 GPG API Attacks Beyond Email
Based on source code searches on GitHub16 and Debian,17
we looked for software applications or libraries other than
email clients which might be susceptible to API signature
spooﬁng attacks. Candidates were programs that invoke
16GitHub Code Search, https://github.com/search
17Debian Code Search, https://codesearch.debian.net/
GnuPG with --status-fd 2, thereby conﬂating the log-
ging messages with the status line API, and programs that
do not correctly anchor regular expressions for status lines
(involving [GNUPG:]). We identiﬁed three broad classes of
programs using the GnuPG status line API: (1) Wrapper li-
braries that provide an abstraction layer to GnuPG, usually