# Software Vulnerabilities and Mitigation Strategies for Email Clients

## Introduction
This document discusses the vulnerabilities found in various email clients, particularly focusing on S/MIME and PGP signature spoofing. The analysis includes a detailed breakdown of the weaknesses and proposed mitigation strategies.

## Table 3: Vulnerability Summary
Out of 22 tested email clients, 15 were found to be vulnerable to S/MIME signature spoofing attacks (perfect or partial forgery). Some clients with weak forgery, conflicting UI elements, or unusual workflows are documented in more detail in the appendix.

### Software Versions
- **GnuPG (gpgsm)**: 2.1.18
- **S/MIME**: 1.0-10
- **FlipDog**: 1.07
- **rc_smime**: git:f294cde
- **MailDroid**: 4.81
- **Nine**: 4.1.3a
- **iOS Mail App**: 12.01
- **Roundcube**: 1.3.4
- **Horde/IMP**: 6.2.21
- **Exchange/OWA**: 15.1.1034.32

### Weaknesses
- **C1, I3**
- **C3, U1**
- **I1, U1**
- **I2, U1**
- **I1**
- **U1**
- **C1, I3**
- **U1**
- **C2, U1**
- **C4, I2, I3, U1**
- **C4**
- **C3, U1**
- **U1**
- **C1, M1, M2, M3, I2, U1**
- **I2**
- **I2, I3, U1**
- **C3, C4, U1**
- **C4, I1, U1**
- **C1**
- **U1**

### Signature Spoofing
- **Signature can be spoofed with limitations (weak forgery)**
- **No vulnerabilities found**

### Forgery Types
- **Indistinguishable signature on all UI levels (perfect forgery)**
- **Indistinguishable signature on first UI level (partial forgery)**

## Mitigation Strategies

### 6.3 MIME Attack Class
To counter signature spoofing attacks on partially signed messages hidden in the MIME tree, two approaches are suggested:
1. **Explicit Indication**: Email clients should show exactly which part of the message was signed, for example, by using a green frame. However, this is challenging to implement securely due to edge cases and potential bypasses.
2. **Conservative Approach**: Email clients should only show a message as correctly signed if the entire message (i.e., the MIME root) was correctly signed. This approach, while breaking digital signatures in some mailing lists and forwarded emails, is considered more secure.

### 6.4 ID Attack Class
- **Cryptographic Binding**: Standards like Memory Hole and RFC 7508 aim to guarantee a cryptographic binding between the signature and the sender address. However, few email clients support these standards, and even those that do may still accept unsigned emails for backward compatibility.
- **Signer User IDs**: Explicitly showing the signer user IDs when displaying a PGP signed message is a good practice, as comparing to the FROM or SENDER header fields can be error-prone.

### 6.5 UI Attack Class
- **Isolation of Message Content**: The results of signature verification should not be shown in attacker-controlled parts of the UI, such as the message content itself. In webmail and native email clients using HTML5, strict isolation (e.g., separate DOM) between the message content and the rest of the UI is essential.
- **UI Indicators**: Following the example of browsers with regard to HTTPS, the trend is to avoid positive UI indicators and only show indicators if something is wrong. However, this is infeasible for email signatures as long as most emails are unsigned.

## Additional Findings

### 7.1 Crashes
Multiple crashes were discovered during testing, including:
- **Mozillaâ€™s NSS Library**: Nullpointer dereference leading to permanent denial of service.
- **iOS Mail**: Similar issue, origin not evaluated.
- **Other Clients**: Crashes in MailMate, R2Mail2, Maildroid (Exception), Roundcube, and Windows 10 Mail.

### 7.2 Airmail Accepts Invalid PGP Signatures
- **Vulnerability**: The Airmail GPG-PGP plugin does not properly validate OpenPGP signatures, accepting even invalid ones, making signature spoofing trivial.
- **CVE-2019-8338**: Documented vulnerability present in all versions of Airmail GPG-PGP until "1.0 (9)".

### 7.3 OpenPGP Message Composition Attacks
- **Message Structure**: OpenPGP messages and keys are sequences of (possibly nested) packets. The flexibility in the structure opens PGP up to vulnerabilities.
- **GnuPG Limitations**: GnuPG allows up to 32 levels of nesting but does not verify that the plaintext of an encrypted message is actually contained within the encrypted part.
- **Spoofing**: By replacing the plaintext in an Encrypted Data Packet with a dummy packet, GnuPG can output the same status lines as for a properly encrypted message, leading to perfect forgery.

### 7.4 Short Key PGP IDs
- **Short Key IDs**: Short key IDs of 32 bits were used in the past, but pre-image collisions have been demonstrated to be efficient. Horde/IMP still uses short key IDs internally, which should be mitigated by using full-length fingerprints.

### 7.5 GPG API Attacks Beyond Email
- **API Usage**: Based on source code searches, software applications or libraries other than email clients that use the GnuPG status line API are susceptible to API signature spoofing attacks.
- **Classes of Programs**:
  1. **Wrapper Libraries**: Provide an abstraction layer to GnuPG.
  2. **Programs Using --status-fd 2**: Conflate logging messages with the status line API.
  3. **Regular Expressions**: Programs that do not correctly anchor regular expressions for status lines.

## Conclusion
The document provides a comprehensive overview of the vulnerabilities and mitigation strategies for email clients, emphasizing the importance of robust security measures in the face of evolving threats.