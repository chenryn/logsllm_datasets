EXE_EXT:=
Endif
如果COMSPEC已定义，则会选择条件指令的第一个分支。
条件指令的基本语法如下所示：
if-condition
text if the condition is true
endif
或：
if-condition
text if the condition is true
else
text if the condition is false
endif
if-condition可以是以下之一：
ifdef variable-name
ifndef variable-name
ifeqtest
ifneq test
---
## Page 76
66
第三章
进行ifdef/ifndef的测试时，不应该以s（）括住variable-name。最后，test可
以表示成下面这样：
"a""b"
或：
(a,b)
其中，单引号或双引号可以交替使用（但是引号必须成对出现）。
条件处理指令可用在宏定义和命令脚本中，还可以放在makefile的顶层：
libGui.a: S(gui_objects)
$（AR)$（ARFLAGS）S $ S@
bar.mk是这个引l人文件的来源：
bar.mk-当我在读取的时候汇报信息
$(warning Reading FILENAME)
---
## Page 78
68
第三章
对这个makefile运行make，将会看到如下的结果：
$make
Makefile:2:foo.mk:No such file or directory
Makefile:3:Finished include
m4--define=FILENAME=foo.mk bar.mk>foo.mk
foo.mk:2:Reading foo.mk
Makefile:3: Finished include
make:foo.mk'isuptodate
第一行显示make并未找到引入文件，不过第二行显示make会继续读取以及执行
makefile。完成读取动作后，make找到了一个用来创建引l人文件foo.mk的规则，所以它
就会执行此规则。然后make会重新开始整个过程，这次读取引人文件不会遇到任何困
难。
现在是让你知道“make也可以把makefile本身作为一个可能的工作目标”这件事的好时
机。当make读进整个makefile之后，make将会试着寻找可用来重建当前所执行的
makefile的规则。如果找到了，make将会处理此规则，然后检查makefile是否已经更新。
如果已经更新，make将会清除它的内部状态，重新读进此makefile，重新完成整个分析
动作。你可以在下面这个无聊的例子里看到一个基于此行为的无限循环：
.PHONY:dummy
makefile:dummy
touch $@
当make执行此makefile时，它将会看到makefile尚未更新（因为.PHONY工作目标dummy
尚未更新），所以它会执行touch命令，这么做会更新makefile的时间戳。然后make会
重新读进makefile，并且发现makefile尚未更新.....了解了吧。
make会到何处寻找引l人文件？显然，如果include的参数是一个绝对的文件引l用，则
make会直接读进该文件：如果这是一个相对的文件引用，则make会先到当前的工作目
录中查找该文件。如果make无法找到该文件，它接着会到你在命令行上以--include-
dir（或-I）选项所指定的目录继续查找。如果还找不到，make会到自已被编译时所使
用的搜索路径进行查找，比如/usr/local/include、usr/gnu/include、/usr/include。你的
搜索路径可能跟此处所提到的不同，这取决于make的编译方式。
如果make没有找到引人文件，而且没有找到可用来创建该引人文件的规则，make将会
汇报错误信息并且结束执行。如果想让make忽略无法加载的引l人文件，可以为include
指令前置一个破折号：
-include i-may-not-exist.mk
为了兼容于其他版本的make，GNUmake为-include提供了sinclude这个别名。
---
## Page 79
变量与宏
69
标准的make变量
除了自动变量，make还会为“自己的状态以及内置规则的定义”提供变量，以便对外提
供相关信息：
MAKE_VERSION
GNUmake的版本编号。编写本书时，此值为3.80；如果是CVS仓库中的版本，此
值为3.81rc1。
make前一个版本的编号是3.79.1，这个版本不支持eval和value函数（以及其
他东西），不过仍旧十分常见。所以，当我在编写需要此功能的makefile时，我都
会使用此变量来查看现在所运行的make的版本编号。稍后我们将会在“流程控制”
节中看到一个例子。
CURDIR
正在执行make进程的当前工作目录（currentworkingdirectory，简称cwd）。此
变量的值将会是shell变量PWD的值（代表你是从哪个目录运行make程序的），除
非make在运行时用到了--directory（或-c）选项。--directory选项会使
得make在搜索任何makefile之前变更到不同的目录。这个选项的完整形式为
--directory=directory-name或-cdirectory-name。如果你使用的是
--directory的形式，CURDIR将会包含--include-dir的目录参数。
编写程序代码的时候，我通常会从emacs来调用make。例如，我有一个项目是用
Java写成的，而且在顶层目录使用了一个makefile（此目录不一定要包含程序代
码）。此时，如果使用--directory选项，不管我是从源代码树中的哪个目录来调
用make的，我仍然能够访问此makefile。在makefile文件中，所有路径都应该被
设定成相对于makefile所在的目录。需要使用绝对路径的时候则可以通过CURDIR
进行访问。
MAKEFIIE_LIST
make所读进的各个makefile文件的名称所构成的列表，包括默认的makefile以及
命令行或include指令所指定的makefile。在每个makefile被读进make之前，其
文件名会被附加到MAKEFILE_LIST变量里。所以，任何一个makefile总是可以
查看此列表的最后一项来判断自己的文件名。
MAKECMDGOALS
对当前所运行的make而言，make运行时命令行上指定了哪些工作目标。此变量并
不包含命令行选项或变量的赋值。例如：
$make-f-FOO=bar -kgoa1<<<‘goal::$（MAKECMDGOALS)
goa1
---
## Page 80
70
第三章
这个例子要了一个花招，让make以-f（或--file）选项从stdin（标准输入）读
进makefile。此处还使用了bash的当前字符串的<<<语法（注3），将一个命令行
字符串重定向至stdin。此makefile包含了默认自标goal，命令脚本被放在同一行，
不过以分号隔开工作目标与命令脚本。这个命令脚本的内容只有一行：
$（MAKECMDGOALS)
当工作目标需要特别的处理时，通常会使用MAKECMDGOALS。常见的例子是“clean”
工作目标。当用户以“clean”调用make时，make不应该像平常那样进行由
避免此事，可使用ifneg和MAKECMDGOALS：
ifneq“S（MAKECMDGOALS)*"clean“
-include $(subst .xml,.d,S(xml_src))
endif
VARIABLES
到目前为止，make从各个makefile文件所读进的变量的名称所构成的列表，不含
工作目标的专属变量。此变量仅供读取，对它所进行的任何赋值动作都会被忽略
掉。
list:
$make
MAKEFLAGS
MAKEFILE_LIST
MAREFILES
如你所见，变量还可用来自定义make的隐含规则（implicitrule）。C/C++的隐含规则
是将变量应用在程序语言中的典型形式。从图3-1中可以看到文件类型转换过程中所用
到的变量。
这些变量的基本形式为ACTION.Suffix。ACTION的值可以是COMPILE（表示创建目标
文件）、LINK（表示创建可执行文件）或是其他特殊的操作，像PREPROCESS、YACC或
LEX（分别表示运行C预处理器、yacc或lex）。至于suffix则代表源文件的类型。
对C++而言，使用这些变量的标准路径会用到两个规则：第一个是将C++源文件编译成
目标文件，另一个是将目标文件链接成可执行文件。
8.0:8.C
S(COMPILE.C)S(OUTPUT_OPTION)$<
：8.0
$（LINK.O)$^$(LOADLIBES）S(LDLIBS）-O $@
注3：想要在bash以外的shell中运行这个例子的人，可以这么做：
Secho'goal:;#$(MAKECMDGOALS)·|make-f-FOO=bar -k goal
---
## Page 81
变量与宏
.71
YACC.y
LEXI
Cpp
PREPROCESS.S
COMPILE.S
COMPILE.S
COMPILE.CPP
COMPILE.C
COMPILE.C
YACC.y
LEX.I
.cpp
LINK.S
LINK.S
LINK.0
LINK.cpp
LINK.C
LINK.C
Executable
图3-1：c/c++编译过程中所用到的变量
第一个规则会用到以下变量定义：
COMPILE.C
=S（COMPILE.CC)
COMPILE.CC
=S（CXX）S（CXXFLAGS)S（CPPFLAGS)$（TARGET_ARCH)-C
CXX
=g++
OUTPUT_OPTION=-O $@
GNUmake允许你使用扩展名.C或.cc来代表C++源文件。CXX变量用来指定所要使用
的C++编译器，默认值为g++。变量CXXFLAGS、CPPFLAGS以及TARGET_ARCH并
不具备默认值，它们主要是供终端用户用来自定义编译过程的。这三个变量分别用来保
存C++编译器标记、C预处理器标记以及结构特有的编译选项，而OUTPUT_OPTION则
包含了输出文件选项。
链接规则比较简单：
LINK.O=S(CC) S(LDFLAGS) S(TARGET_ARCH）
CC
=gcc