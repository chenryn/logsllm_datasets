represents the length of the data to be written,
and V is the memory to be written, byte-by-
byte. The response is a byte, +, indicating that
the operation has ﬁnished, or a - if it fails.
The B command indicates a new breakpoint
at the 32-bit little-endian virtual address A.
The response is + if successful, or - if it
fails (e.g., trying to break at an already-broken
address). If the SMI handler is triggered by a
breakpoint (e.g., the program is in breakpoint
debugging status), it will send a status packet
with the single character, B, to indicate that the
program has reached a breakpoint and is ready
for further debugging. The SMI handler will
wait for commands from the client until the
Continue command is received, whereupon it
will exit from SMM.
The C command continues execution after a
breakpoint. The SMI handler will send a packet
with single character, +.
The X command clears all breakpoints and
indicates the start of a new debugging session.
The K command removes the speciﬁed break-
point if it was set previously. The 4-byte value
A speciﬁes the virtual address of the requested
breakpoint. It responds with a single + byte if
the breakpoint is removed successfully. If the
breakpoint does not exist, it responds with a
single -.
The SI command indicates stepping the sys-
tem instruction by instruction. The SB com-
mand indicates stepping the system by taken
branches. The SF command indicates stepping
the system by control transfers including far
call/jmp/ret. The SN command indicates step-
ping the system by near return instructions. The
SMI handler replies with single character, +.
Static VA of KPCR
0xffdff000
KPCR
KdVersionBlock
+78h
+34h
Other
Executive
Processes
CR3
prev
next
CR3
prev
next
PsActiveProcessHead
prev
next
CR3
prev
next
e.g., “malware.exe”
Executive Process
e.g., “explorer.exe”
Executive Process
e.g., “System”
Executive Process
Fig. 2. Finding a Target Application in Windows
table of that process. We use the name ﬁeld in the EProcess
or task_struct to identify the CR3 value of the target
application when it executes ﬁrst instruction. Since malware
may change the name ﬁeld, we only compare the saved CR3
with the current CR3 to identify the target process for further
debugging. Alternatively, we can compare the EIP value with
the target application’s entry point. This method is simpler but
less reliable since multiple applications may have the same
entry point. Filling the semantic gap in Linux is a similar
procedure, but there are fewer structures and thus fewer steps.
Previous works [38], [49] describe the method, which MALT
uses to debug applications on the Linux platform. Note that
malware with ring 0 privilege can manipulate the kernel data
structures to confuse the reconstruction process, and current
semantic gap solutions suffer from this limitation [47]. As with
VMI systems, MALT does not consider the attacks that mutate
kernel structures.
D. Triggering an SMI
The system depends upon reliable assertions of System
Management Interrupts (SMIs). Because the debugging code
is placed in the SMI handler, it will not work unless the CPU
can stealthily enter SMM.
In general, we can assert an SMI via software or hardware.
The software method writes to an Advanced Conﬁguration and
Power Interface (ACPI) port to trigger an SMI, and we can
use this method to implement software breakpoints. We can
place an out instruction in the malware code so that when
the malware’s control ﬂow reaches that point, SMM begins
execution, and the malware can be analyzed. The assembly
instructions are:
mov $0x52f, %dx;
out %ax, (%dx);
The ﬁrst instruction moves the SMI software interrupt port
number (0x2b on Intel, and 0x52f in our chipset [50]) into
the dx register, and the second instruction writes the contents
stored in ax to that SMI software interrupt port. (The value
stored in ax is inconsequential). In total, these two instructions
take six bytes: 66 BA 2F 05 66 EE. While this method
is straightforward, it is similar to traditional debuggers using
INT3 instructions to insert arbitrary breakpoints. The alter-
6060
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
native methods described below are harder to detect by self-
checking malware.
In MALT, we use two hardware-based methods to trigger
SMIs. The ﬁrst uses a serial port to trigger an SMI to start
a debugging session. In order for the debugging client to
interact with the debugging server and start a session, we
reroute a serial interrupt to generate an SMI by conﬁguring
the redirection table in I/O Advanced Programmable Interrupt
Controller (APIC). We use serial port COM1 on the debugging
server, and its Interrupt Request (IRQ) number is 4. We
conﬁgure the redirection table entry of IRQ 4 at offset 0x18
in I/O APIC and change the Delivery Mode (DM) to be SMI.
Therefore, an SMI is generated when a serial message arrives.
The debugging client sends a triggering message, causing the
target machine to enter SMM. Once in SMM, the debugging
client sends further debugging commands to which the target
responds. In MALT, we use this method to trigger the ﬁrst SMI
and start a debugging session on the debugging server. The
time of triggering the ﬁrst SMI is right before each debugging
session after reboot, because MALT assumes that the ﬁrst
instruction of malware can compromise the system.
The second hardware-based method uses performance coun-
ters to trigger an SMI. This method leverages two archi-
tectural components of the CPU: performance monitoring
counters and Local Advanced Programmable Interrupt Con-
troller (LAPIC) [51].
First, we conﬁgure the Performance
Counter Event Selection (PerfEvtSel0) register to select the
counting event. There is an array of events from which to
select; we use different events to implement various debugging
functionalities. For example, we use the Retired Instructions
Event (C0h) to single-step the whole system. Next, we set the
corresponding performance counter (PerfCtr0) register to the
maximum value. In this case, if the selected event happens,
it overﬂows the performance counter. Lastly, we conﬁgure the
Local Vector Table Entry (LVTE) in LAPIC to deliver SMIs
when an overﬂow occurs. Similar methods [37], [52] are used
to switch from a guest VM to the hypervisor VMX root mode.
E. Breakpoints
Breakpoints are generally software- or hardware-based.
Software breakpoints allow for unlimited breakpoints, but they
must modify a program’s code,
typically placing a single
interrupt or trap instruction at the breakpoint. Self-checking
malware can easily detect or interfere with such changes. On
the other hand, hardware breakpoints do not modify code, but
there can only be a limited number of hardware breakpoints as
restricted by the CPU hardware. Stealthy breakpoint insertion
is an open problem [26].
In MALT, we emulate the behavior of software breakpoints
simply by modifying the target’s code to trigger SMIs. An SMI
is triggered on our testbed by writing a value to the hardware
port, 0x52f. In total, this takes six bytes. We thus save six
bytes from the requested breakpoint address and replace them
with the SMI triggering code. Thus, when execution reaches
this point, the CPU enters SMM. We store the breakpoint
in SMRAM, represented as 4 bytes for the address, 6 bytes
for the original instruction, and one byte for a validity ﬂag.
Thus, each breakpoint occupies 11 bytes in SMRAM. When
the application’s control reaches the breakpoint, it generates
an SMI. In the SMI handler, we write the saved binary code
back to the application text and revert the Extended Instruction
Pointer (EIP) register so that it will resume execution at that
same instruction. Then, we wait in the SMI handler until
the client sends a continue command. In order to remove an
inserted breakpoint, the client can send a remove-breakpoint
command and the SMI handler will disable that breakpoint by
setting the enable ﬂag to 0. However, this software breakpoint
solution still makes changes to the application memory, which
is visible to malware. Thus, MALT does not use software
breakpoints.
1) Breakpoints in MALT: We implement a new hardware
technique in MALT. It relies on performance
breakpoint
counters to generate SMIs. Essentially, we compare the EIP of
the currently executing instruction with the stored breakpoint
address during each cycle. We use 4 bytes to store the
breakpoint address and 1 byte for a validity ﬂag. In contrast
to the software breakpoint method described above, we do
not need to store instructions because we do not change
any application memory. Thus, we need only 5 bytes to
store such hardware breakpoints. For each Protected Mode
instruction, the SMI handler takes the following steps: (1)
Check if the target application is the running thread when the
SMI is triggered; (2) check if the current EIP equals a stored
breakpoint address; (3) start to count retired instructions in the
performance counter, and set the corresponding performance
counter to the maximum value; (4) conﬁgure LAPIC so that
the performance counter overﬂow generates an SMI.
Breakpoint addresses are stored in SMRAM, and thus the
number of active breakpoints we can have is limited by the
size of SMRAM. In our system, we reserve a 512-byte region
from SMM BASE+0xFC00 to SMM BASE+0xFE00. Since
each hardware breakpoint takes 5 bytes, we can store a total
102 breakpoints in this region. If necessary, we can expand
the total region of SMRAM by taking advantage of a region
called TSeg, which is conﬁgurable via the SMM MASK
register [51]. In contrast to the limited number of hardware
breakpoints on the x86 platform, MALT is capable of storing
more breakpoints in a more transparent manner.
F. Step-by-Step Execution Debugging
As discussed above, we break the execution of a program
by using different performance counters. For instance, by
monitoring the Retired Instruction event, we can achieve
instruction-level stepping in the system. Table IV summarizes
the performance counters we used in our prototype. First, we
assign the event to the PerfEvtSel0 register to indicate that the
event of interest will be monitored. Next, we set the value of
the counter to the maximum value (i.e., a 48-bit register is
assigned 248 − 2). Thus, the next event to increase the value
will cause an overﬂow, triggering an SMI. Note that the -2
term is used because the Retired Instruction event also counts
interrupts. In our case, the SMI itself will cause the counter to
6161
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV
STEPPING METHODS IN MALT
Performance Counter Events Description [51]
Retired instructions
Retired taken branches
Retired far control transfers
Retired near returns
Counts retired instructions, plus exceptions and interrupts (each count as one instruction)
Includes all types of architectural control ﬂow changes, including exceptions and interrupts
Includes far calls/jumps/returns, IRET, SYSCALL and SYSRET, exceptions and interrupts
Counts near return instructions (RET or RET Iw) retired
increase as well, so we account for that change accordingly.
The system becomes deadlocked if the value is not chosen
correctly.
Vogl and Eckert [52] also proposed the use of performance
counters for instruction-level monitoring. It delivers a Non-
Maskable Interrupt (NMI) to force a VM Exit when a perfor-
mance counter overﬂows. However, the work is implemented
on a hypervisor. MALT leverages SMM and does not employ
any virtualization, which provides a more transparent execu-
tion environment. In addition, their work [52] incurs a time gap
between the occurrence of a performance event and the NMI
delivery, while MALT does not encounter this problem. Note
that the SMI has priority over an NMI and a maskable interrupt
as well. Among these four stepping methods, instruction-by-
instruction stepping achieves ﬁne-grained tracing, but at the
cost of a signiﬁcant performance overhead. Using the Retired
Near Returns event causes low system overhead, but it only
provides coarse-gained debugging.
VII. TRANSPARENCY ANALYSIS
In terms of transparency, it heavily depends on its subjects.
In this paper, we consider the transparency of four subjects.
They are (1) virtualization, (2) emulation, (3) SMM, and (4)
debuggers. Next, we discuss the transparency of these subjects
one by one.
Virtualization: The transparency of virtualization is dif-
ﬁcult to achieve. For instance, Red Pill [28] uses an un-
privileged instruction SIDT to read the interrupt descriptor
(IDT) register to determine the presence of a virtual machine.
To work on multi-processor system, Red Pill needs to use
SetThreadAffinityMask() Windows API call to limit
thread execution to one processor [13]. nEther [29] detects
hardware virtualization using CPU design defects. Further-
more,
there are many footprints introduced by virtualiza-
tion such as well-known strings in memory [10], magic I/O
ports [17], and invalid instruction behaviors [14]. Moreover,
Garﬁnkel et al. [16] argued that building a transparent virtual
machine is impractical.
Emulation: Researchers have used emulation to debug
malware. QEMU simulates all the hardware devices including
CPU, and malware runs on top of the emulated software.
Because of the emulated environment, malware can detect it.
For example, accessing a reserved or unimplemented MSR
register causes a general protection exception, while QEMU
does not raise an exception [15]. Table V shows more anti-
emulation techniques. Although some of these defects could
be ﬁxed, determining perfect emulation is an undecidable
problem [4].
SMM: As explained in Section II, SMM is a hardware fea-
ture existing in all x86 machines. Regarding its transparency,
the Intel manual [24] speciﬁes the following mechanisms
that make SMM transparent to the application programs and
operating systems: (1) the only way to enter SMM is by
means of an SMI; (2) the processor executes SMM code
in a separate address space (SMRAM) that is inaccessible
from the other operating modes; (3) upon entering SMM, the
processor saves the context of the interrupted program or task;
(4) all interrupts normally handled by the operating system are
disabled upon entry into SMM; and (5) the RSM instruction can
be executed only in SMM. Note that SMM steals CPU time
from the running program, which is a side effect of SMM. For
instance, malware can detect SMM based on the time delay.
Even so, SMM is still more transparent than virtualization and
emulation.
Debuggers: An array of debuggers have been proposed
for transparent debugging. These include in-guest [19], [26],
emulation-based [8], [27], and virtualization-based [4], [5]
approaches. MALT is an SMM-based system. As to the
transparency, we only consider the artifacts introduced by de-
buggers themselves, not the environments (e.g., hypervisor or
SMM). Ether [4] proposes ﬁve formal requirements for achiev-
ing transparency, including (1) high privilege, (2) no non-
privileged side effects, (3) identical basic instruction execution
semantics, (4) transparent exception handling, and (5) identical