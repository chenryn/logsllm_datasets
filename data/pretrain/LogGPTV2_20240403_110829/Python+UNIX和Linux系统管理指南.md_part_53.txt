递它的路径到SQLite数据库文件inventory.db中。你或许认为database对象是我们将要使
属性使用unicode值）。然后通过调用create_database()函数创建一个数据库对象，传
使用Storm库进行插入：
通过在SQLite一节中的示例，我们应该已经在数据库中有一个记录。让我们查看一下，
属性映射到数据库的列值上，且数据库对于每一个记录共享相同的名称。
对象。对于每一个oPerationSystem对象，我们输出id、name和description属性。这些
结果集。因为我们映射OperationSystem类到inventory_operationsystem表，Storm将
一个store对象，通过传递db对象到store构造器来创建。但是现在，不仅添加一个对
个示例在可以与数据库进行会话前都需要一些共同的创建步骤。我们有与之前的示例
示例中代码的前几行与前一示例中的前几行代码极为相似。部分原因是我们通过复制和
jmjones@dinkgutsy:~/code$ python storm_retrieve_os.py
for o in store.find(storm_model.operatingSystem):
store = storm.locals.Store(db)
db = storm.locals.create_database('sqlite:///%s′ % os.path.join(os.getcwd(),
1Linux 2.0.34kernel
importos
Lmport
importstorm.locals
'inventory.db'))
storm_model
www.TopSage.com
数据持久性丨377
---
## Page 392
方法与SQLAlchemy相似”
SQLAlchemy ORM
这个数据库仍然具有“windows 3.1.1”的记录项，但是它被过滤掉了，因为“Windows"
那么，如果你希望过滤数据，又会怎么样呢？假设我们仅希望查看操作系统中以字符串
再说一次，这确实是我们所希望的。
新插入的记录（Windows3.1.1）
发生什么情况呢？它会显示在比较早的数据库中的旧记录（Linux2.0.34kernet），以及
378
Python中ORM的主导地位。
随着Storm获得人们的接受并且拥有了自己的社区，SQLAlchemy似乎也一时占据了
不是以“Lin”开头的。
当你运行它时，你将看到这样的结果：
象，查看该对象的name属性值是否以unicode值“Lin”开头。对于每一个在结果集中的
find()中：一个搜索标准。Store.find(storm_model.OperatingSystem,storm_model.
这个示例与之前示例相似，都使用了store.find()，只是这里传递了第二个参数到stoe.
“Lin”开始的记录项。以下代码示例完成了该想法：
，我们打印输出，这等同于之前的示例。
for o in store.find(storm_model.operatingSystem,
db = storm.locals.create_database('sqlite://%s' % os.path.join(os.getcwd(),
jmjones@dinkgutsy:~/codes python storm_add_os.py
store = storm.locals.Store(db)
importos
import
import storm.locals
jmjones@dinkgutsy:~/code$ python storm_retrieve_os.py
|第12章
Windows 3.1.1
Linux 2.0.34 kernel
printo.id,o.name,o.description
storm_model
，因为SQLAlchemy排在第一位。不管怎么样，我们将为
。它的方法与Storm相似，或许更好的表述应该是“Storm的
www.TopSage.com
PDG
---
## Page 393
以下是为inventory_operatingsystem表定义的表格和对象：
成的）。
如果现在运行它，看到结果如下：
现在已经有了一个表定义，可以写一些代码来查询表中的所有记录：
类而不是table类，并且在这两者之间映射。
在Storm和SQLAlchemy示例的表定义代码之间最大的差异是，SQLAlchemy使用额外的
#!/usr/bin/env python
Session = sessionmaker(bind=engine, autoflush-True, transactional=True)
mapper(OperatingSystem, os_table)
class OperatingSystem(object):
os_table = Table('inventory_operatingsystem', metadata,
metadata = MetaData()
engine = create_engine('sqlite:///%s' % os.path.join(os.getcwd(),
#1/usr/bin/env python
for os in session.query(OperatingSystem):
session= Session()
from sqlalchemy.orm import sessionmaker
H
工
import os
comsqlalchemy
print os
def
def
self.description =description
(self,name, description):
=hame
primary_key=True),
'3.1.1'
www.TopSage.com
?
 Integer, Text, VARCHAR, MetaData
数据持久性｜379
PDG
---
## Page 394
380
的《Essential SQLAlchemy》
的信息可以访问网站http://www.sqlalchemy.org/，或者你可以查看由Rick Copeland编著
这只是一个简单的关于SQLAlchemy可以完成什么工作的概述。更多的使用SQLAlchemy
可以看到输出类似这样：
OperatingSystem中，name以“Lin”开头的记录，应该写一个类似这样的脚本：
在SQL Alc he my中过滤结果也是非常简单的。例如，如果希望过滤所有的
这会添加另一个Linux内核到表格中，这次是一个更新的内核。再次运行query al1脚
本
后将其添加到会话中：
如果希望创建另一个记录，可以简单地这样做：实例化一-个OperationgSystem对象，然
，可以看到以下输出：
for os in session.query(OperatingSystem).filter(OperatingSystem.name.like('Lin%'):
from sqlalchemy_inventory_definition import session, OperatingSystem 
#!/usr/bin/env python
（O'Reilly出版）。
www.TopSage.com
ODG
---
## Page 395
SQLAchemy ORM这样的工具。正如我们所演示的，使用Python时你可以有多种选择，
可以非常简便地完成复杂而庞大的工作。
有时你需要一些简单、轻便，类似pickle这样的模块。有时你需要更全面的类似
本章中，我们介绍了一些各不相同的工具，这些工具允许你保存数据以备今后使用。
本章小结
Python通用流行的编程平台。
生SQL以及处理数据库，其开发目标是面向世界级的一流Python工具集，帮助创建
SQLAchemy，并将其作为“最终工具集”
库抽象层之后，并具备了多年使用大规模多服务器Oracle系统
规模的关系数据库的经验。在用C，Java和Perl编写了一些数据
Michael Bayer效力于NYC-based software，具有处理各种类型和
（为Major League Baseball提供服务）的实践经验之后，编写了
名人简介：SQLAlchemy
www.TopSage.com
 Mike Bayer
。SQLAchemy用于产
数据持久性”381
DG
---
## Page 396
命令行
是Windows Powershell的架构师，他曾说“认为GUI将会、甚至是必将取代CLI是错误
很少考虑使用“GUI”来完成工作，宣称GUI管理只起辅助作用。这或许不完全正确，
喜爱。对命令行的完全掌握是绝大多数系统管理员所走过的必经之路。许多系统管理员
命令行与系统管理之间有着特殊的关系。没有其他的工具可以如命令行一样重要和受人
引言
第13章
Python技术，最后教你如何利用所有这些技术来发挥你的力量，创建一个优秀的命令行
将创建命令行工具放在本书的最后部分是有意的安排。原因是首先让你知道各种各样的
师。
心，这一章不会令你失望。在学习完之后，你将成为在Python中创建命令行工具的大
你需要创建自己的工具，并且这或许是你在第一时刻拿起这本书的唯一原因。不要担
除了掌握预建Unix命令行工具之外，还有更多的事情。为了真正成为一个命令行高手，
是非常有趣的事实，即掌握命令行是如此重要，创建命令行工具是如此重要。
前的WindowsPowerShell中可以看到CLI的价值。我们不会在本书中介绍Windows，但这
甚至Windows中多年来也一直包含符合现代操作系统特点的最基本的CLI。现在在其当
的”。
的GUI。在最近的一些事情中，似乎Microsoft也回到了这一观点上来。Jeffrey Snover
很久以前，UNIX系统包含这样的观点，命令行界面（CLI）优于任何可以开发出来
但是这通常是真正领会系统管理艺术的系统管理员的普遍观点。
工具。
.TopSage.com
---
## Page 397
 #!/usr/bin/env python
并写一些逻辑对它们进行连接”。你是对的，这样做非常简单。让我们在命令行应用中
你或许正在考虑，
print sys.argv,
num_arguments 
#sys.argv[0]
#!/usr/bin/env python
例13-2：sysargv.py
让我们更专注一些，略微修改代码来对命令行的参数进行记数，如例13-2。
返回到标准输出
以及
返回到标准输出
以及
在执行命令之后，无论你在命令行输入什么，这两行代码返回到标准输出：
importsys
print sys.argv
import sys
例13-1:sysargv.py
行参数。例13-1显示了一些可能是最简单的命令行工具。
对于创建命令行工具最简单的介绍或许是需要知道sys模块能够通过sys.argv处理命令
基本标准输入的使用
[,nok, ‘,xoy.‘.peq.‘,oof.‘,Ad-ABresKs/',]
./sysargv.py foo bad for you
['./sysargv.py', 'test']
./sysargv.py foo
['./sysargv.py']
./sysargv.py
“哇，这非常简单，所有需要做的仅是通过数字引用sys.argv参数,
1
www.TopSage.com
命令行丨383
PDG
---
## Page 398
384
当运行这个程序的时候，获得下面不同类型的输出：
if
def main():
#!/usr/bin/envpython
例13-4:Hello World optparse
例，该示例处理选项和参数。例13-4是我们的HelloWorld示例。
获得收益。一个开始optparse介绍的非常有意义的方式是编写一个“HelloWorld”示
正如我们在前一节中所介绍的，即使是非常小的脚本也可以从使用optparse来处理选项
Optparse简介
么，但是一个简短的答案是：C个好的选项解析模块可以为你处理复杂事务。
的选择。通常“演示型”工具也会发展为产品型工具。在下一节，我们将解释这是为什
包括optparse模块，该模块处理所有创建一个高质量的命令行工具所遇到的杂乱和恼人
else:
#1/usr/bin/envpython
例13-3:sysargv-step2.py
误信息到标准输出。参见例13-3。
添加一些特征。最后一件我们可以做的事是，如果没有参数传递给命令行，发送一个错
importoptparse
num_arguments=len(sys.argv)-1
import sys
Hello, Noah
_name
$python hello_world_optparse.py--sysadmin Noah
$python hello_world_optparse.py
print 'Hello,%s'% options.sysadmin
p=optparse.OptionParser()
options,arguments =p.parse_args()
sys.stderr.write('Hey, type in an option silly\n')
第13章
'-s',default="BOFH")
www.TopSage.com
---
## Page 399
p.print_help()来显示简介，该简介介绍了如何再次使用工具。以下是我们在当前目录
查以确保参数的个数只有一个；如果有多于或少于一个参数，则使用内建的help信息
一个usage（用法）值，该值指导工具的潜在用户如何正确执行它。接下来，我们检
来处理我们的程序流。在创建一个optpar se实例时，首先提供一些实现的方法，添加
参数是执行ls命令的路径。我们甚至没有使用选项，但是仍可以通过依赖optpar se
在这个示例中，我们重新在Python中实现了ls命令，只是这里仅设置了一个参数，该
def main():
#!/usr/bin/env python
（或“”）正确地运行它时得到的输出结果。
import optparse
例13-5：复制1s命令
使用模式，在这里甚至没有使用选项，但是仍然发挥了optparse的长处。
前一节中提到，甚至对于小脚本，optparse也是非常有用的。例13-5是简单的optparse
非选项使用模式
简单的Optparse使用模式
能，这在Perl中是没有的。
是默认选项。最后，当我们错误地输入一个选项时，我们看一下内建错误处理的强大功
在我们的小脚本中，可以设置短的“-s”选项，以及长的“--sysadmin”选项，也可以
importos
p = optparse.optionParser(description="Python 'Is' command clone",
else:
hello_world_optparse.py: error: no such option: --infinity
Usage: hello_world_optparse.py [options]
$ python hello_world_optparse.py --s Jeremy
p.print_help()
for filename in os.listdir(path):
print filename
..
usage="%prog [directory]")
www.TopSage.com
"0.1a"
命令行丨385
---
## Page 400
接下来，查看在不输入任何选项时的结果：
与我们键人“--help”是完全相同的：
这其中有意义的地方是，如果参数不只是一个，使用p.print_help()调用定义行为，这
也同样有用（或许是你打算弃用的脚本）。
在这个示例中，optparse是发挥作用的，甚至是在简单的“演示性”脚本中，optarse
因为我们定义了一个“--version”选项，我们可以看到以下的输出结果：
386丨第13章
#!/usr/bin/envpython
例13-6：增加与减少见余
输出）。例13-6演示的这一过程。
在程序中使用一个选项来设置True或False是非常有帮助的。这其中的经典示例涉及设
True/False使用模式
def main():
importos
import optparse
$ python no_options.py .
 $ python no_options.py --version
$ python no_options.py --help
Options: