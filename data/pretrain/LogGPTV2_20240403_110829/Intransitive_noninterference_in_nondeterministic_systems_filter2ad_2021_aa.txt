# Intransitive Noninterference in Nondeterministic Systems
## Authors
- Kai Engelhardt, Computer Science and Engineering, The University of New South Wales, Sydney, NSW 2052, Australia (kai.engelhardt@unsw.edu.au)
- Ron van der Meyden, Computer Science and Engineering, The University of New South Wales, Sydney, NSW 2052, Australia (ron.vander.meyden@unsw.edu.au)
- Chenyi Zhang, Information Technology and Electrical Engineering, The University of Queensland, Brisbane, QLD 4072, Australia (chenyi.zhang@uq.edu.au)

## Abstract
This paper addresses the generalization of TA-security, a semantics for intransitive information-flow policies in deterministic systems, to nondeterministic systems. Various definitions are proposed, including those that ensure the system enforces as much of the policy as possible, even in the presence of collusion attacks where agents share information through external channels. We characterize the relationships between these definitions and develop an unwinding-based proof technique. Finally, we show that on a specific class of systems, access control systems with local nondeterminism, the strongest definition can be verified by checking a simple static property.

## Categories and Subject Descriptors
D.4.6 [Security and Protection]: Information flow controls

## Keywords
access control, information-flow, nondeterminism, noninterference, security

## 1. Introduction
The theory of information flow security has been extensively studied in the context of transitive security policies, often motivated by military multi-level security policies. However, it is recognized that richer types of policies are required to handle trusted components such as downgraders, which may violate a transitive policy. For example, Figure 1 shows an abstract architecture for a system where two multi-level secure machines, M1 and M2, communicate over the internet.

![Architecture for a MILS system](figure1.png)

Each machine Mi contains high-level (Hi) and low-level (Li) domains, with the policy Hi \(\not\rightarrow\) Li, ensuring no high-level information flows to the low-level domain. The internet is represented by the domain N, and there are additional domains E1, E2 (downgraders) and NI1, NI2 (network interfaces). The global security policy requires that all information flow from Hi to N, NIj, or Lj must be mediated by Ei. This architecture decomposes the proof of security into verifying the encryption capabilities of Ei and the enforcement of the architecture.

To formalize this, we need a mathematically precise semantics for intransitive policies. One significant work in this area is Rushby's [21], which provides a proof method using unwinding relations. Recently, van der Meyden [24] improved Rushby's definitions, introducing TA-security, which makes the unwinding proof method and access control discipline both sound and complete for security.

However, this theory is limited to deterministic systems. Our contribution is to generalize TA-security to nondeterministic systems, starting from van der Meyden's formulation. We first set up the semantic framework in Section 2, then in Section 3, we explore various dimensions relevant to formulating intransitive policies in nondeterministic systems. We argue that in nondeterministic systems, the definition of security should be based on the effect of actions on agents' history of actions and observations, and we introduce the notion of persistence to distinguish between deducibility and causality. We also show that collusion attacks, which can be ignored in deterministic systems, must be considered in nondeterministic systems.

In Section 4, we present our generalizations of TA-security to the nondeterministic setting. We show that the treatment of collusion attacks and the application of persistence lead to a spectrum of definitions. In Section 5, we discuss special cases where our definitions collapse to well-known definitions of security. In Section 6, we develop an unwinding proof technique that is sound for all our definitions. In Section 7, we generalize access control systems to cover nondeterminism and identify conditions that imply security. We discuss related work in Section 8 and conclude with future research directions in Section 9.

## 2. Systems Model
Goguen and Meseguer [7] introduced a policy model for information flow, which we adopt here. A noninterference policy for a set U of security domains is a reflexive binary relation \(\rightarrow\) on U, representing permitted interferences between domains. Intuitively, \(u \rightarrow v\) means that information can flow from domain u to domain v. Reï¬‚exivity is assumed because information flow within a domain cannot be prevented.

A machine with domains U is a tuple \(M = (S, s_0, A, \rightarrow, obs, dom)\), where:
- \(S\) is a set of states, including an initial state \(s_0 \in S\).
- \(A\) is a set of actions.
- \(\rightarrow \subseteq S \times A \times S\) is a (nondeterministic) transition relation.
- \(obs : U \rightarrow (S \rightarrow O)\) is an observation function, where \(O\) is a set of observations.
- \(dom : A \rightarrow U\) is a domain function.

We write \(obs_u\) for the function \(obs(u) : S \rightarrow O\), representing the observation made by domain u at each state. We assume the transition relation is input-enabled: for all states \(s\) and actions \(a\), there exists a state \(t\) such that \(s \xrightarrow{a} t\). A machine is deterministic if for all states \(s, t, t'\) and actions \(a\), if \(s \xrightarrow{a} t\) and \(s \xrightarrow{a} t'\), then \(t = t'\).

### Notational and Diagrammatic Conventions
Sequences are denoted by concatenation, e.g., \([a, b, c]\) is written as \(abc\). If sequence elements have structure or confusion is likely, we use a dot: \(a \cdot b \cdot c\).

For each domain \(u \in U\), we define \(A_u = \{ a \in A \mid dom(a) = u \}\). Given a domain \(u\), we write \(\rightarrow_u\) for \(\{ v \in U \mid v \rightarrow u \}\) and \(\not\rightarrow_u\) for \(U \setminus \rightarrow_u\). Similarly, \(u \rightarrow\) is \(\{ v \in U \mid u \rightarrow v \}\) and \(u \not\rightarrow\) is \(U \setminus u \rightarrow\).

In diagrams, states are represented by circles labeled internally by the state name. The initial state is \(s_0\). A transition \(s \xrightarrow{a} t\) is represented by an edge from \(s\) to \(t\) labeled by \(a\). Self-loops are elided unless necessary. States are labeled externally by observations of some domains, depending on the example.

A run is a sequence \(s_0 \xrightarrow{a_1} s_1 \ldots \xrightarrow{a_n} s_n\) where \(n \geq 0\), the \(s_i \in S\) are states, and the \(a_i \in A\) are actions. We write \(R(M)\) for the set of runs of machine \(M\). The function \(last\) maps a nonempty sequence to its final element. A state is reachable if it is the final state of some run. The sequence of all actions in a run \(r\) is denoted \(Act(r)\). With \(M\) implicit, we write \(R(\alpha)\) for the set of \(r \in R(M)\) such that \(Act(r) = \alpha\). For a domain \(u\), \(Act_u(r)\) is the subsequence of actions \(a\) in \(Act(r)\) with \(dom(a) = u\).

The view of a run obtained by a domain or group of domains records all actions and observations, except stuttering observations are collapsed. Let \(X \subseteq U\) be a nonempty set of domains. The joint observation function of \(X\) is \(obs_X : S \rightarrow O^X\) defined by \(obs_X(s)(u) = obs_u(s)\) for \(u \in X\). The view function \(view_X : R(M) \rightarrow (O^X)^+ (A (O^X)^+)^*\) is defined inductively by \(view_X(s_0) = obs_X(s_0)\) and:
\[ view_X(r \xrightarrow{a} q) = \begin{cases} 
view_X(r) \cdot a \cdot obs_X(q) & \text{if } dom(a) \in X \\
view_X(r) \hat{\circ} obs_X(q) & \text{otherwise}
\end{cases} \]
where \(\hat{\circ}\) denotes absorptive concatenation:
\[ \alpha \hat{\circ} a = \begin{cases} 
\alpha & \text{if } last(\alpha) = a \\
\alpha \cdot a & \text{otherwise}
\end{cases} \]

We write the special case where \(X = \{u\}\) as \(view_u\). The view \(view_X(r)\) may contain information about the order of actions from domains in \(X\) that cannot be deduced from the collection of views \((view_u(r))_{u \in X}\). Intuitively, \(view_X(r)\) is the information the group would obtain in \(r\) when members share their local information at each step, whereas \((view_u(r))_{u \in X}\) corresponds to the information if members shared only at the end of the run.