title:Detecting Policy Violations through Traffic Analysis
author:Jeffrey Horton and
Reihaneh Safavi-Naini
Detecting policy violations through trafﬁc analysis
Jeffrey Horton and Rei Safavi-Naini
Centre for Information Security
Northﬁelds Avenue, Wollongong, Australia
University of Wollongong
{jeffh,rei}@uow.edu.au
Abstract
Restrictions are commonly placed on the permitted uses
of network protocols in the interests of security. These re-
strictions can sometimes be difﬁcult to enforce. As an ex-
ample, a permitted protocol can be used as a carrier for
another protocol not otherwise permitted. However, if the
observable behaviour of the protocol exhibits differences
between permitted and non-permitted uses, it is possible to
detect inappropriate use.
We consider SSH, the Secure Shell protocol. This is an
encrypted protocol with several uses. We attempt ﬁrstly to
classify SSH sessions according to some different types of
trafﬁc for which the sessions have been used, and secondly,
given a policy that permits SSH use for interactive trafﬁc, to
identify when a session appears to have been used for some
other purpose.
1
Introduction
Many modern organisations provide employees with ac-
cess to the Internet and other networks to enable them to
perform their jobs. However, it is important to ensure that
this access is being used appropriately and in compliance
with organisational policy. For example, policies can be
stated in terms of restrictions on Web access or the types
of protocols that employees can use.
However, per-
mitted protocols can have uses which are undesirable, and
it can be difﬁcult to prevent or even detect instances of in-
appropriate use with current network security tools such as
ﬁrewalls and intrusion detection systems. Controlling the
use of encrypted network protocols is also problematic.
Modern ﬁrewalls can be very good at blocking network
trafﬁc based on low-level criteria such as source address and
destination port, and can be very useful in protecting net-
works of machines from inappropriate or unnecessary out-
side access. However, ﬁrewalls that perform only this sort
of simple stateful inspection cannot check that the trafﬁc
being passed conforms to the speciﬁcation of the desired
protocol. Firewalls providing some form of “deep inspec-
tion” [25] are capable of detecting a limited set of known at-
tacks and protocol anomalies in certain common protocols.
Proxies (such as are found in proxy ﬁrewalls) can check
conformance to protocol speciﬁcations to a greater extent
than deep inspection stateful packet ﬁltering ﬁrewalls. No
type of ﬁrewall provides the higher-level protocol under-
standing that can enable the detection of malicious usage
of the protocol — a conversation which complies with the
speciﬁcations, does not attempt to exploit a vulnerability
such as a buffer overﬂow vulnerability but which does not
otherwise closely resemble “normal” trafﬁc. Tools such as
httptunnel [4] exist to facilitate tunneling arbitrary net-
work trafﬁc through an HTTP proxy, for example.
Neither ﬁrewalls nor proxies handle encrypted trafﬁc
well, having no access to the data protected by encryption.
Encrypted data cannot easily be scanned for malicious con-
tents such as viruses or spyware until it reaches the end
system and is decrypted. Outgoing encrypted data cannot
easily be scanned for content such as proprietary corporate
information being inappropriately released. It is difﬁcult to
ensure even that the underlying protocol being used is ap-
propriate. For example, SSL may be permitted in order to
allow secure access to websites, with an expectation that
the protocol being protected is HTTP. However, SSL may
be used in conjunction with other protocols, and it may be
difﬁcult to distinguish desired uses from unwanted and in-
appropriate ones.
In some cases, it is not reasonable to block all encrypted
protocols — SSL is required for secure website access, and
SSH (Secure Shell protocol) may be required by some users
for remote access to computing resources, for example.
In this paper we will be looking at the identiﬁcation of
different types of uses of SSH using only the information
that is available for inspection after the data has been en-
crypted: the packet size and inter-arrival time. We assume
that the primary desirable use of SSH is the provision of
secure remote terminal access. Implementations of the pro-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006tocol commonly have many additional features with sub-
stantial potentially legitimate uses. However, these features
can also enable users to bypass organisational security poli-
cies (for example, port forwarding features can be used to
browse inappropriate Web sites during the working day, if
the site terminating the SSH tunnel has a more permissive
general Internet access policy than the client site) and in
some environments it may be considered appropriate to at-
tempt to detect such activity. Our intention is to be able to
provide assistance in auditing compliance with relevant or-
ganisational policies. We are not just looking at tunneled
trafﬁc: we are also interested in identifying usage of fea-
tures such as X11 forwarding, use of which may be dis-
couraged due to security concerns.
We have some success classifying SSH sessions accord-
ing to the type of trafﬁc being carried in the session; for
the main classes of trafﬁc being examined we can assign
the trafﬁc to classes with low false positive and false neg-
ative rates but with signiﬁcant “don’t know” rates, where a
connection is not assigned to an appropriate class. How-
ever, the classiﬁcation process does not perform as well for
some of the minor classes of trafﬁc studied, for which we
did not collect many samples. We are more successful at
differentiating interactive trafﬁc from other types of trafﬁc,
with false positive and false negative rates of around 3%. In
the absence of an active attacker, we believe it is possible to
identify types of activity other than simple interactive use
of SSH with a high degree of conﬁdence.
In Section 2 we look at related work, Section 3 provides
a brief overview of some of the relevant capabilities of SSH
implementations, in particular the OpenSSH [22] imple-
mentation of the protocol. Section 4 discusses our analysis
of SSH trafﬁc. In Section 5 we discuss experiments, data
processing and results. We discuss ways in which detec-
tion could be evaded in Section 6. Finally, we conclude in
Section 7.
2 Related Work
Trafﬁc classiﬁcation has emerged as an important area,
now that the port over which trafﬁc ﬂows is no longer suf-
ﬁcient to determine what the actual protocol of the trafﬁc
is. This has been identiﬁed as a problem in the identiﬁca-
tion of peer-to-peer trafﬁc by Karagiannis et al. [17], who
develop a method of identifying P2P activity based on the
patterns of interconnection between network peers. Non-
payload based methods of trafﬁc classiﬁcation can be of
particular interest, owing to privacy concerns that can arise
over access to the full trafﬁc payload.
Work in the area of trafﬁc classiﬁcation has used a va-
riety of machine learning techniques, including decision
trees [8] and hidden Markov models [31, 32]. Wright et
al. [31, 32] consider a general trafﬁc classiﬁcation problem,
for which SSH is one type of trafﬁc being classiﬁed. Some
interesting results are reported, but they do not look at at-
tempting to identify different types of tunneled SSH trafﬁc,
or detection of the use of SSH features such as X11 for-
warding.
Song et al. [28] have reported on an attack against SSH
that uses keystroke timings as reﬂected in SSH packet inter-
arrival times to substantially reduce the amount of work that
needs to be done when cracking passwords.
We are not aware of other work that addresses the use of
SSH speciﬁcally.
Tunneling has been proposed and implemented over
including ICMP [6], Do-
many different protocols,
main Name System (DNS) request and replies [16] and
HTTP. An example of an HTTP tunneling package is
httptunnel [4].
Measures to detect and ﬁlter tunneling through ICMP
have been proposed [27, 26]. We are not aware of any work
having been done on the detection of tunneling using DNS
messages. Some work has been done on detecting tunnel-
ing using HTTP requests and responses. Pack et al. [24, 23]
describe their work on detecting HTTP tunneling using be-
haviour proﬁles consisting of features such as the number
of packets, the ratio of large and small packets and the total
amount of data received. Unfortunately, it is difﬁcult to say
how effective this system is as there is no way presented to
determine what attacks might be missed.
Mudge [19] has proposed detecting tunneling by deter-
mining what “normal” HTTP trafﬁc looks like, and gen-
erating some simple measures, such as length of session or
amount of data transferred, to use in detecting abnormal ses-
sions. This paper does not discuss an implementation of a
system to detect misuse of HTTP. Borders and Prakash [3]
describe the results obtained from implementing a system
to detect intruder reverse tunnels and communications back
to home base of adware and spyware using a range of mea-
sures taken from “normal” HTTP trafﬁc. Rather than fo-
cusing on packet level statistics, measures included header
formatting, inter-request arrival time, request regularity and
request size, among others. These are higher-level mea-
surements than those used by Pack et al. The system was
successful at detecting tunneling activity, including the ac-
tivity of a tunneling program custom-designed by the au-
thors. Bissias et al. [2] have had some success identifying
the source of SSL-protected HTTP trafﬁc using proﬁles of
statistical characteristics of Web requests to sites of interest.
Covert channels have been extensively reported as an un-
desired feature of multi-level security operating system im-
plementations that can be used to violate the security pol-
icy of these systems by enabling information to pass from
a high security level to a lower one. [21, 1]. Guidelines re-
quired the minimisation of the bandwidth available through
these channels [21].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Covert channels exist in modern network protocols as
well [12]. For example, a method of embedding information
using the TCP timestamp option has been proposed [11].
Murdoch and Lewis [20] review many of the proposals for
embedding covert channels into TCP and IP, and propose a
method of embedding data into TCP sequence numbers and
IP identiﬁcation ﬁelds that respects the statistical properties
of these ﬁelds as generated by Linux and OpenBSD. Lucena
et al. [18] examine IPv6 for opportunities for embedding
covert channels. “Active wardens” have been proposed and
to some extent implemented to clean network protocols of
covert channels [9]. Firewall proxies can be helpful at re-
moving covert channels from low-level network protocols,
as these systems typically do not pass IP packets or TCP
segments directly from one side of the ﬁrewall to the other.
3 SSH Capabilities
SSH is used by many as a secure replacement for remote
access methods such as telnet and rlogin. Unlike
these protocols, SSH provides facilities to validate the iden-
tity of the remote host in order to reduce the possibility of
a man-in-the-middle attack, and encrypts and authenticates
all SSH trafﬁc during the session, protecting against net-
work snooping attacks. In contrast, telnet and rlogin
are plaintext protocols that have no security features beyond
verifying a user password. However, implementations of
SSH commonly have many additional features whose use is
not appropriate in all environments. In this paper, we work
with OpenSSH [22], principally late releases of version 3.
• X11 forwarding. When accessing a remote host,
OpenSSH has the ability to tunnel the X11 protocol
messages through the SSH connection, protecting the
X11 trafﬁc from inspection by an attacker. Unfortu-
nately, if the administrators of the remote machine are
not fully trusted, or it has been compromised, X11 for-
warding may1 allow anyone with access to the user’s
.Xauthority ﬁle to access other X windows open
on the user’s desktop. As an example, xkey [10] al-
lows an attacker on the remote machine to snoop on
key presses made in other windows on the user’s desk-
top which are not related to the SSH session [13].
• File transfer, using either scp or sftp. This can be
used to export corporate information, or to import ar-
bitrary data, including malicious software which then
can only be detected by antivirus software running on
the user’s machine.
1In recent versions of OpenSSH, this may require “trusted X11” for-
warding to be enabled. Some X11 clients do not work properly without
trusted X11 forwarding enabled, so it seems likely that trusted X11 for-
warding could be expected to be enabled if X11 forwarding is enabled at
all.
• Dynamic port forwarding causes SSH to behave as a
SOCKS4 or SOCKS5 proxy. Connections to a spec-
iﬁed local port are tunneled through the SSH con-
nection to an arbitrary (dynamic) destination host and
port. Many applications have built-in SOCKS support,
which makes this technique very powerful. It works
very well for performing Web browsing, which is the
common use for this type of forwarding in the experi-
ments performed in this paper.
• Static local port forwarding allows connections to lo-
cal ports to be tunneled through the SSH connection to
a designated remote host and port. It is very similar to
dynamic port forwarding, except that the ﬁnal destina-
tion for the forwarded trafﬁc is ﬁxed. Some protocols
cannot be used effectively with static port forwarding.
Other relevant capabilities which we have not investi-
gated in detail include remote static port forwarding and
(new in version 4) support for establishing full VPNs using
an SSH tunnel.
OpenSSH also provides the ability to compress data be-
fore forwarding it through the tunnel, which can be very
useful for reducing the amount of network trafﬁc required,
particularly for slow networks. It does mean that it is neces-
sary to consider both compressed and uncompressed forms
of different types of trafﬁc when attempting to build a useful
classiﬁcation system.
ACSI 33 [7], an information security policy guide pub-
lished by Australia’s Defence Signals Directorate, includes
guidance on the recommended conﬁguration of SSH for
Australian government agencies. In particular, it is recom-
mended to disable connection forwarding and X11 forward-
ing. However, not all servers located at other organisations
with different security policies to which a user might con-
nect will necessarily have these features disabled, and en-
forcing the restrictions from the client side of the connec-
tion may be impractical.
We identify SSH’s interactive capabilities as its primary
desirable feature. We aim to detect non-interactive use and
possibly even identify use of X11 forwarding, ﬁle transfer
and different types of port forwarding, so that some form of
limited audit capability could be implemented for compli-
ance with high-level policies on the use of SSH.
4 Analysis of SSH trafﬁc
Our analysis of SSH trafﬁc is based on collecting statisti-
cal distributions for SSH trafﬁc in which particular types of
activity are conducted, and using these distributions to clas-
sify unknown connections using an instance-based learn-
ing approach. Our hypothesis is that data such as packet
sizes will reveal information about the activity that is being
conducted during the SSH session. We represent an SSH
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006connection with a probability distribution (normalised fre-
quency of packet sizes) and use multiple samples of a par-
ticular type of trafﬁc (for example, ﬁle transfer) to deﬁne a
class of connections.
A “connection” can be described by a 4-tuple consisting
of source and destination IP and source and destination port.
We do not use timeouts to separate connections with the
same 4-tuple from each other, because the protocol which
we are studying uses TCP for data transport. A TCP con-
nection can be left idle without timing out, and use can then
be resumed without difﬁculty. The packets that are used to
initiate a TCP connection have the TCP SYN ﬂag set; we
use packets with the SYN ﬂag set and corresponding to the
same 4-tuple to separate connections from each other.
The size of packets in the SSH connection provides only
a general indication of the amount of actual application data
being carried. This is because of the cryptographic protec-
tion mechanisms: block ciphers process data in chunks of
a particular size (AES, for example, has a block size of
16 bytes), and integrity protection can result in message
authentication codes of 10 bytes or more being attached.
Small amounts of extra padding can also be added. A sin-
gle keypress in an interactive SSH session can result in an
SSH packet of around 50 bytes. In some cases, compres-
sion prior to encryption will remove redundancy from the
plaintext and result in smaller packets observed than would
otherwise be the case.
We divide a connection into two halves, the part of the
connection in which data ﬂows from client to server, and
the part in which data ﬂows from server to client. Statistics