# Detecting Policy Violations through Traffic Analysis

**Authors:** Jeffrey Horton and Reihaneh Safavi-Naini  
**Affiliation:** Centre for Information Security, University of Wollongong, Northfields Avenue, Wollongong, Australia  
**Emails:** {jeffh, rei}@uow.edu.au

## Abstract
Network protocols often have restrictions on their usage to ensure security. However, these restrictions can be challenging to enforce. For example, a permitted protocol might be used as a carrier for another, non-permitted protocol. If the observable behavior of the protocol differs between permitted and non-permitted uses, it is possible to detect inappropriate use.

In this paper, we focus on SSH (Secure Shell protocol), an encrypted protocol with multiple uses. Our goal is to classify SSH sessions based on different types of traffic and, given a policy that permits SSH for interactive traffic, identify when a session is used for other purposes.

## 1. Introduction
Modern organizations provide employees with access to the Internet and other networks to facilitate their work. Ensuring that this access is used appropriately and in compliance with organizational policies is crucial. Policies often restrict web access or the types of protocols employees can use. However, even permitted protocols can be misused, and detecting such misuse with current network security tools like firewalls and intrusion detection systems can be difficult. Controlling the use of encrypted protocols is particularly problematic.

Firewalls are effective at blocking network traffic based on low-level criteria such as source address and destination port. They can protect networks from inappropriate or unnecessary outside access. However, simple stateful inspection firewalls cannot verify that the traffic conforms to the desired protocol specifications. Firewalls with "deep inspection" capabilities can detect a limited set of known attacks and protocol anomalies in common protocols. Proxies, such as those found in proxy firewalls, can check conformance to protocol specifications more thoroughly than deep inspection stateful packet filtering firewalls. However, no type of firewall provides the high-level protocol understanding needed to detect malicious usage that complies with the specifications but does not resemble normal traffic. Tools like `httptunnel` can tunnel arbitrary network traffic through an HTTP proxy, complicating the detection of misuse.

Neither firewalls nor proxies handle encrypted traffic well, as they cannot access the data protected by encryption. Encrypted data cannot be easily scanned for malicious content until it reaches the end system and is decrypted. Outgoing encrypted data cannot be easily scanned for sensitive information. It is also difficult to ensure that the underlying protocol being used is appropriate. For example, SSL may be permitted for secure website access, but it can be used with other protocols, making it hard to distinguish desired uses from unwanted ones.

Blocking all encrypted protocols is not always reasonable, as SSL is required for secure website access, and SSH may be necessary for remote access to computing resources. In this paper, we aim to identify different types of SSH usage using only the packet size and inter-arrival time, which are available after the data has been encrypted. We assume that the primary desirable use of SSH is for secure remote terminal access. While SSH implementations have many additional features with legitimate uses, these features can also enable users to bypass organizational security policies. Our goal is to assist in auditing compliance with relevant organizational policies by detecting such activity.

## 2. Related Work
Traffic classification has become an important area, as the port over which traffic flows is no longer sufficient to determine the actual protocol. Karagiannis et al. [17] developed a method to identify P2P activity based on the patterns of interconnection between network peers. Non-payload-based methods of traffic classification are of particular interest due to privacy concerns.

Various machine learning techniques, including decision trees and hidden Markov models, have been used for traffic classification. Wright et al. [31, 32] considered a general traffic classification problem, including SSH, but did not look at identifying different types of tunneled SSH traffic or the use of SSH features like X11 forwarding.

Song et al. [28] reported an attack against SSH that uses keystroke timings reflected in SSH packet inter-arrival times to reduce the work needed for password cracking. We are not aware of other work specifically addressing the use of SSH.

Tunneling has been proposed and implemented over various protocols, including ICMP, DNS, and HTTP. Measures to detect and filter tunneling through ICMP have been proposed [27, 26]. Some work has been done on detecting tunneling using HTTP requests and responses. Pack et al. [24, 23] described their work on detecting HTTP tunneling using behavior profiles, but it is difficult to assess the effectiveness of their system. Mudge [19] proposed detecting tunneling by determining what "normal" HTTP traffic looks like and using simple measures like session length or data transferred. Borders and Prakash [3] implemented a system to detect intruder reverse tunnels and communications back to the home base of adware and spyware using higher-level measurements. Bissias et al. [2] had some success identifying the source of SSL-protected HTTP traffic using profiles of statistical characteristics of web requests.

Covert channels exist in modern network protocols and can be used to violate security policies by enabling information to pass from a high-security level to a lower one. Various methods of embedding covert channels into TCP and IP have been proposed. Firewall proxies can help remove covert channels from low-level network protocols.

## 3. SSH Capabilities
SSH is widely used as a secure replacement for remote access methods like telnet and rlogin. Unlike these plaintext protocols, SSH provides facilities to validate the identity of the remote host and encrypts and authenticates all traffic during the session. Implementations of SSH, such as OpenSSH, offer additional features that may not be appropriate in all environments.

- **X11 Forwarding:** OpenSSH can tunnel X11 protocol messages through the SSH connection, protecting the X11 traffic from inspection. However, if the remote machine is compromised, X11 forwarding can allow an attacker to access other X windows open on the user's desktop.
- **File Transfer:** Using `scp` or `sftp`, SSH can be used to export corporate information or import arbitrary data, including malicious software.
- **Dynamic Port Forwarding:** SSH can behave as a SOCKS4 or SOCKS5 proxy, tunneling connections to a specified local port through the SSH connection to an arbitrary destination host and port. This is commonly used for web browsing.
- **Static Local Port Forwarding:** Connections to local ports can be tunneled through the SSH connection to a designated remote host and port. This is similar to dynamic port forwarding but with a fixed final destination.

Other relevant capabilities include remote static port forwarding and support for establishing full VPNs using an SSH tunnel. OpenSSH also provides data compression, which reduces network traffic but requires considering both compressed and uncompressed forms of traffic when building a classification system.

ACSI 33 [7], an information security policy guide, recommends disabling connection forwarding and X11 forwarding for Australian government agencies. However, enforcing these restrictions from the client side may be impractical. We aim to detect non-interactive use and identify the use of X11 forwarding, file transfer, and different types of port forwarding to implement a limited audit capability for compliance with high-level policies on SSH usage.

## 4. Analysis of SSH Traffic
Our analysis of SSH traffic involves collecting statistical distributions for SSH traffic where specific types of activity are conducted and using these distributions to classify unknown connections. We hypothesize that data such as packet sizes will reveal information about the activity being conducted during the SSH session. An SSH connection is represented by a probability distribution of packet sizes, and multiple samples of a particular type of traffic (e.g., file transfer) are used to define a class of connections.

A "connection" is described by a 4-tuple consisting of source and destination IP and source and destination port. We do not use timeouts to separate connections with the same 4-tuple because SSH uses TCP for data transport. A TCP connection can be left idle without timing out, and use can then be resumed. The packets used to initiate a TCP connection have the TCP SYN flag set; we use these packets to separate connections.

The size of packets in the SSH connection provides a general indication of the amount of application data being carried. Cryptographic protection mechanisms, such as block ciphers and integrity protection, result in packets of varying sizes. Compression prior to encryption can also affect packet sizes.

We divide a connection into two halves: the part where data flows from the client to the server and the part where data flows from the server to the client. Statistics are collected for each half to analyze the traffic.

## 5. Experiments, Data Processing, and Results
[This section should detail the experiments conducted, the data processing methods, and the results obtained. Include any relevant figures, tables, and discussions of the findings.]

## 6. Evasion Techniques
[This section should discuss ways in which detection could be evaded, including potential countermeasures and limitations of the proposed approach.]

## 7. Conclusion
[This section should summarize the key findings, discuss the implications of the research, and suggest future work. Emphasize the contributions and the practical applications of the study.]

---

This revised version aims to improve the clarity, coherence, and professionalism of the text, ensuring that it is well-structured and easy to follow.