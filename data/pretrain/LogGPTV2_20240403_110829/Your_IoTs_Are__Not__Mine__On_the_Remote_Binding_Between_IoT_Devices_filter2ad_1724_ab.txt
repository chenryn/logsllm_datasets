A. Adversary Model
In this paper, the adversary aims to launch targeted attacks
exploiting the remote binding between a device and a user.
We assume that the adversary can obtain the device IDs, due
to the weak protection in real life:
• Inference of the device ID. Attackers may infer, brute-
force, or enumerate the device ID according to the
regulation of ID sequence arrangement. For example, the
device MAC addresses (as device IDs) contain a vendor-
speciﬁc ﬁeld, which only leaves small search space.
• Off-site physical interaction of the device. The IDs may
be leaked through device ownership transfer, including
device reuse, reselling, stealing, and so forth. For ex-
ample, the attacker could purchase an IoT device from
Amazon, record the device ID, and return it. What is
worse, some IoT vendors attach the ID labels on devices
or the packages (e.g., [5], [15], [19]) to facilitate local
conﬁguration. It also brings the risks that untrusted supply
chain participants may copy device IDs during products
transportation or distribution.
In practice, given that IoT devices are usually connected in
local networks that are protected by ﬁrewalls or encryption
like WPA2 [20],
the bar of local attacks is exceptionally
high. Therefore, unlike prior studies [42], [43], [58], we
assume the adversary cannot access user’s local networks.
Additionally, we assume the device ﬁrmware and IoT apps
are not compromised.
B. Decomposition
Before we analyze the security threat, we need to clearly
understand how the remote binding functionality is built up. As
such, we take a top-down approach to decompose the remote
binding functionality into primitives, and then systematically
analyze the implementation and design choices.
Top-down investigation. The ultimate goal of remote binding
is to achieve remote communication between a speciﬁc user
and a speciﬁc device. As the basic requirement for secure
communication, the cloud needs to authenticate both the user
and the device. In addition, the cloud should also maintain
the binding relationship between the authenticated user and
the authenticated device. Therefore, in order to achieve remote
communication with a device, the cloud needs to conﬁrm two
kinds of status for a device1: whether the device is online (or
1In the following sections, we use the term “device shadow” [17] to
represent the status of the device in the cloud.
224
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:41 UTC from IEEE Xplore.  Restrictions apply. 
(cid:47)(cid:374)(cid:349)(cid:410)(cid:349)(cid:258)(cid:367)(cid:3)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:286)
(cid:3847)
(cid:3846)
(cid:17)(cid:349)(cid:374)(cid:282)
(cid:104)(cid:374)(cid:271)(cid:349)(cid:374)(cid:282)
(cid:3)(cid:3)(cid:3)(cid:3)
(cid:17)(cid:381)(cid:437)(cid:374)(cid:282)(cid:3)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:286)
(cid:3845)
(cid:3844)
(cid:104)(cid:374)(cid:271)(cid:349)(cid:374)(cid:282)
(cid:18)(cid:381)(cid:374)(cid:410)(cid:396)(cid:381)(cid:367)(cid:3)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:286)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:437)(cid:400)
(cid:3848)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:437)(cid:400)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:437)(cid:400)
(cid:3843)
(cid:75)(cid:374)(cid:367)(cid:349)(cid:374)(cid:286)(cid:3)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:286)
(cid:17)(cid:349)(cid:374)(cid:282)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:437)(cid:400)(cid:3)(cid:876)(cid:3)
(cid:104)(cid:374)(cid:271)(cid:349)(cid:374)(cid:282)
Fig. 2: State machine of a device shadow:  and  represent
device authentication;  and  represent binding creation; 
and  represent binding revocation.
logged in) and whether the device is bound2. In particular,
a device shadow is online if the cloud has authenticated the
real device and received messages from the device. The device
shadow is bound if a binding of the device has been created.
Additionally, although a device might be bound with several
users (i.e. device sharing) and a user can also manage several
devices, in this paper we only focus on how a binding of one
user and one device is established and revoked, which can be
easily applied to many-to-one (or one-to-many) bindings.
To investigate whether the above design demands of IoT
remote binding are properly designed and implemented, we
model the remote binding functionality using the state machine
of the device shadow, whose state transitions represent the
completion of procedures and are changed when receiving
primitive messages. With its help, we then systematically
analyze and discuss the designs in each procedure.
State-machine model. At a high level,
the state-machine
model consists of four states and receives three types of
primitive messages (i.e. atomic actions) to achieve transitions.
As we discussed earlier, the cloud maintains two kinds of
status for device shadow during remote binding: whether the
device is online and whether the device is bound. Therefore,
there are four states for a device shadow:
• Initial state. The device in this state is ofﬂine and
unbound (not bound with any users). This is the initial
state of the device shadow.
• Online state. The device in this state is online and
unbound. In this state, the device has been authenticated
to the cloud but not yet bound with any users. This state is
maintained when the device sends registration messages
or heartbeat messages to the cloud. The device shadow
goes into this state, for example, before device binding
or after device unbinding.
2The binding status of a device is the same as the binding status of the
bound user. Also, the cloud does not need to maintain the online status of
a user because the user is assumed online during the entire remote binding
process.
TABLE I: Notations in Section IV, Section V, and Section VI
Status
Bind
U nbind
DevId
DevT oken
BindT oken
U serT oken
U serId
U serP w
Messages to report device status (sent by the
device)
Messages to creating bindings in the cloud
Messages to revoke bindings in the cloud
A piece of deﬁnite data for device authentication
A piece of random data for device authentication
A piece of random data for the authorization in
binding creation
A piece of random data for user authentication
Identiﬁer (e.g. email address) of user account
Password of user account
• Control state. The device in this state is online and bound.
After device setup, the device is authenticated to the cloud
and bound with the user. This is the only state that allows
the user to control the device.
• Bound state. In this state, the device is ofﬂine and bound.
The device shadow goes into this state (1) when the
real device is powered off or the network connection
is disrupted. However, the binding relationship is still
maintained in the cloud; (2) Or when the binding is
created in the cloud, but the device is not online yet.
As can be seen in Figure 2, to achieve remote communi-
cation, a device shadow changes from the initial state to the
control state. This means a binding can be created before the
device authentication (initial state → bound state → control
state) or after the device authentication (initial state → online
state → control state). To achieve state transitions, the cloud
receives three types of messages from the user or the device:
status messages, binding messages, and unbinding messages.
Below we describe the functions of them in details:
• Status: status message. Status messages could either be
the registration message or the heartbeat message. In our
process model, they share the same functionality: they
change the online/ofﬂine state of a device shadow. The
reception of such a message in the cloud indicates the
online status of the real device (i.e. device authentication).
If the message is not received within a certain time period,
the device is considered ofﬂine. Although the ﬁelds of a
registration message might be different from that of a
heartbeat message, in our model they still achieve the
same state transitions. Besides, this message is only sent
from the device.
• Bind: binding message. In the message,
it speciﬁes
which user is bound with which device. A binding is
created in the cloud when the cloud receives such a
message. This message can be sent from a user or a device
with both the device identity and the user identity.
• U nbind: unbinding message. This message revokes an
existing binding of a user and a device in the cloud.
Besides, it can also be sent from a user or a device.
Note that except for the above three types of messages, there
are other messages, such as control messages sent by the user.
However, we do not consider them in this paper, as they do
not change the states in binding.
225
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:41 UTC from IEEE Xplore.  Restrictions apply. 
(cid:18)(cid:367)(cid:381)(cid:437)(cid:282)
(cid:1991)(cid:3)(cid:24)(cid:286)(cid:448)(cid:100)(cid:381)(cid:364)(cid:286)(cid:374)
(cid:1993)(cid:3)(cid:94)(cid:410)(cid:258)(cid:410)(cid:437)(cid:400)(cid:855)(cid:3)
(cid:24)(cid:286)(cid:448)(cid:100)(cid:381)(cid:364)(cid:286)(cid:374)
(cid:47)(cid:381)(cid:100)(cid:3)(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)
(cid:1992)(cid:3)(cid:24)(cid:286)(cid:448)(cid:100)(cid:381)(cid:364)(cid:286)(cid:374)
(cid:104)(cid:400)(cid:286)(cid:396)(cid:3)(cid:4)(cid:393)(cid:393)
(a) Device authentication using device tokens
(cid:47)(cid:381)(cid:100)(cid:3)(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)
(cid:94)(cid:410)(cid:258)(cid:410)(cid:437)(cid:400)(cid:855)(cid:3)(cid:24)(cid:286)(cid:448)(cid:47)(cid:282)
(cid:18)(cid:367)(cid:381)(cid:437)(cid:282)
(b) Device authentication using device IDs
Fig. 3: Device Authentication
IV. EXISTING DESIGNS
In order to investigate and evaluate the remote binding
designs of IoT vendors, we selected 10 representative IoT
device pairs3 that rank top on Amazon. They are the best-
selling products offered by mainstream manufacturers from
China and the U.S. In addition to those designs, we also refer
to the solutions of remote binding from IoT solution providers,
such as AWS, IBM, Google, and Samsung. In this section, we
elaborate on the existing designs of remote binding and discuss
potential misunderstandings.
A. Device Authentication
Device authentication is to verify the identity of a device
in the cloud. As shown in Figure 3, there are two kinds of
authentication modes based on the usage of different identi-
ﬁers: device tokens (DevT oken) and device IDs (DevId) in
the status messages (notations are shown in Table I).
• Type 1: Status : DevT oken. The IoT app requests a
device token from the cloud and then delivers it to the IoT
device during local conﬁguration. After that, the device
sends the token to the cloud for authentication. Given that
the user app needs to locally negotiate with the device
anyway before the device is put into use, using a user app
for device authentication does not bring extra complexity.
Among the devices that we evaluated, at least three of
them (see Table III) use the device token mechanism. The
tokens are put in the encrypted status messages directly.
• Type 2: Status : DevId. Also, some vendors assign a
unique device ID to each of their devices, and such an
ID will be used for device authentication (at least 4 of
our evaluated devices use this design). The ID can be a
device MAC address [10] or a device serial number [14],
[18]. This design is actually a user-friendly feature: if
the user app keeps such an ID, device binding can be
3For each device type, we purchased a pair of devices (20 devices in total).
For each pair, we assume one device belongs to the victim, and the other one
belongs to the attacker.
completed even if the device and the mobile app are not
on the same network [42]. Unfortunately, in this case, a
device is under risk if its device ID is leaked. For instance,
the attacker can report fake device data to the victim or
receive sensitive information of the user, by forging the
device status messages. Besides, the attacker may hijack
a victim’s device by exploiting the implementation ﬂaws
of the cloud (see Section V).
Apart from the above designs, there are some public-key-
based authentication solutions speciﬁed by most IoT infras-
tructure providers such as AWS IoT [4], IBM Watson IoT [8],
and Google Cloud IoT [7]. In their solutions, a key pair is
generated during manufacturing. The public key is stored in
the cloud, and the private key is embedded in the device.
Although this allows the cloud to authenticate each message
sent by the device securely, such a scheme is rarely used in
commercial IoT products. The main reason is that it requires
hardware support, like TPM, to protect the secret keys, which
increases the cost and affects the execution efﬁciency. On the
other hand, currently, those cloud service providers only have
basic infrastructures for individual developers who manage
a speciﬁc device and a speciﬁc app4. However, this is less
suitable for IoT vendors who manage a bunch of devices and
a bunch of registered users.
Our assessment: The use of static identiﬁers (i.e., DevId)
for authentication will inevitably introduce security risks, al-
though such implementation could bring some convenience
of remote binding. Another observation is that the solutions
provided by leading IT companies, such as AWS, IBM, and
Google, require the support of trusted hardware, in most
cases, which is not suitable for resource-constrained IoT
devices. A more promising approach is to use dynamic
authentication token (i.e., devT oken), relying on the user
to obtain such a token from the cloud and deliver it to the
device via local communication.
B. Binding Creation
When the cloud receives the binding message, it will create
a binding relationship between a device and the corresponding
user account. Particularly, there are two types of binding mech-
anisms: ACL-based binding and capability-based binding.
ACL-based binding. In practice, most of the devices we stud-
ied use the device ID and the user token to indicate the rela-
tionship in a binding message: Bind : (DevId, U serT oken).
The binding message can be delivered by the mobile app or
the IoT device (see Figure 4):
• App-initiated binding. The mobile app sends a binding
message containing the device ID (obtained from the
device) and the user token (obtained from the cloud)
to the cloud. After receiving it, the cloud will create a
matched binding relationship. Most of our experimental
devices belong to this category.
4Packages that contain key pairs should be installed on the device and the
user app.
226
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:41 UTC from IEEE Xplore.  Restrictions apply. 
(cid:18)(cid:367)(cid:381)(cid:437)(cid:282)
(cid:1992)(cid:3)(cid:17)(cid:349)(cid:374)(cid:282)(cid:855)(cid:3)(cid:894)(cid:24)(cid:286)(cid:448)(cid:47)(cid:282)(cid:853)(cid:3)
(cid:104)(cid:400)(cid:286)(cid:396)(cid:100)(cid:381)(cid:364)(cid:286)(cid:374)(cid:895)
(cid:47)(cid:381)(cid:100)(cid:3)(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)
(cid:1991)(cid:3)(cid:24)(cid:286)(cid:448)(cid:47)(cid:282)
(cid:104)(cid:400)(cid:286)(cid:396)(cid:3)(cid:4)(cid:393)(cid:393)
(a) ACL-based binding, binding message sent by app
(cid:18)(cid:367)(cid:381)(cid:437)(cid:282)
(cid:1992)(cid:3)(cid:17)(cid:349)(cid:374)(cid:282)(cid:855)(cid:3)
(cid:894)(cid:24)(cid:286)(cid:448)(cid:47)(cid:282)(cid:853)(cid:3)(cid:104)(cid:400)(cid:286)(cid:396)(cid:47)(cid:282)(cid:853)(cid:3)
(cid:104)(cid:400)(cid:286)(cid:396)(cid:87)(cid:449)(cid:895)
(cid:47)(cid:381)(cid:100)(cid:3)(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)
(cid:1991)(cid:3)(cid:104)(cid:400)(cid:286)(cid:396)(cid:47)(cid:282)(cid:3)(cid:1085)(cid:3)(cid:104)(cid:400)(cid:286)(cid:396)(cid:87)(cid:449)
(cid:104)(cid:400)(cid:286)(cid:396)(cid:3)(cid:4)(cid:393)(cid:393)
(b) ACL-based binding, binding message sent by device
(cid:18)(cid:367)(cid:381)(cid:437)(cid:282)
(cid:1993)(cid:3)(cid:17)(cid:349)(cid:374)(cid:282)(cid:100)(cid:381)(cid:364)(cid:286)(cid:374)
(cid:1991)(cid:3)(cid:17)(cid:349)(cid:374)(cid:282)(cid:100)(cid:381)(cid:364)(cid:286)(cid:374)