### 5.2 Erase Block Allocation Over Time

**Figure 5.2: Sampled plot of erase block allocation over time for YAFFS on an Android phone.**

- **Horizontal Axis:** Time (hours)
- **Vertical Axis:** Sequentially numbered erase blocks
- **Graph Representation:** A black square indicates that an erase block was allocated at that time.
- **Sampling:** For clarity, every 15th erase block is plotted.

The time between two points on the same horizontal line represents the erase block reallocation period. The experiments were conducted using YAFFS mounted on a virtual flash storage medium created by the kernel module `nandsim`. The erase block size used is 64 2-KiB pages, consistent with the Nexus One phone [65].

### 5.3 Deletion Latency

**Figure 5.2** provides insights into the behavior of the storage medium's erase block allocations over time. The table below presents the median and 95th percentile deletion times in hours for different YAFFS partition sizes based on observed access patterns.

| Partition Size and Type | Median Deletion Latency (hours) | 95th Percentile Deletion Latency (hours) |
|-------------------------|----------------------------------|------------------------------------------|
| 200 MiB YAFFS           | 41.5 ± 2.6                       | 46.2 ± 0.5                               |
| 1 GiB YAFFS             | 163.1 ± 7.1                      | 169.7 ± 7.8                              |
| 2 GiB YAFFS             | 349.4 ± 11.2                     | 370.3 ± 5.9                              |

For example, a YAFFS implementation on a 2 GiB partition (e.g., the data partition on the Samsung Galaxy S [80]) can expect deleted data to remain up to a median of two weeks before being erased. The next section discusses solutions to reduce this deletion latency.

### 5.5 User-Space Secure Deletion

In this section, we introduce our solutions for secure deletion: purging, ballooning, and a hybrid of both. These solutions operate at the user level, which has limited capabilities, such as creating, modifying, and deleting local files. They cannot force the file system to perform erase block erasures or prioritize compaction in specific areas.

#### 5.5.1 Purging

Purging involves filling the file system's empty space with junk files. If successful, all partially filled erase blocks are compacted, ensuring that all previously discarded data is securely deleted. After filling the storage medium, the junk files are deleted to make space available again. Purging must be explicitly executed, and it can be triggered automatically, such as when the phone is idle or when specific applications are closed.

**Experiment:**
- **Setup:** A pristine memory snapshot of the phone’s internal NAND memory was taken.
- **Procedure:** An arbitrary pattern was written, deleted, and confirmed to still be present. The file system was then filled to capacity with a junk file, and another memory snapshot confirmed the pattern was no longer present.
- **Execution Time:** On the Nexus One, purging took between thirty seconds and a minute, depending on the storage medium's size.

**Figure 5.3: Plot of erase block allocation over time for YAFFS during purging.**

- **Horizontal Axis:** Time (hours)
- **Vertical Axis:** Sequentially numbered erase blocks
- **Graph Representation:** A small black square indicates when each erase block was allocated.
- **Observation:** The near-immediate allocation of every erase block is visible, indicating the compaction of all erase blocks containing at least one deleted page.

#### 5.5.2 Ballooning

Ballooning artificially constrains the file system's available free space, leading to more frequent compaction and reduced deletion latency. It creates junk files to occupy the free space, reducing the total number of erase blocks available for allocation. This reduces the expected erase block reallocation period and, consequently, the expected deletion latency.

**Figure 5.4: Plot of erase block allocation over time for YAFFS while using aggressive ballooning.**

- **Comparison with Figure 5.2:** As the number of allocatable erase blocks decreases, YAFFS' sequential allocation becomes more erratic, and the erase block reallocation period decreases.

#### 5.5.3 Hybrid Solution: Ballooning with Purging

The hybrid solution combines periodic purging for secure data deletion and ballooning to ensure that large storage media do not need to be refilled during every purging operation. This results in a clock-based solution where the deletion latency is bounded by the duration of a deletion epoch.

**Advantages:**
- Reduces wear on the storage medium.
- Decreases power consumption.
- Shortens execution time.
- Suitable for large capacity storage media.

### 5.6 Experimental Evaluation

We developed an application implementing the hybrid solution. The application periodically examines the file system to determine the free space and creates and deletes junk files to maintain the free space within defined thresholds. The purging interval is user-specified, allowing a trade-off between secure deletion timeliness and device wear.

**Table 5.2: Erase block (EB) allocations, storage medium lifetimes, and deletion times for the YAFFS file system.**

| Partition Type | Free EBs | Fill Ratio | EB Allocations per Hour | Expected Storage Medium Lifetime (years) | Purge Cost (EBs) | Median Deletion Latency (hours) | 95th Percentile Deletion Latency (hours) |
|----------------|----------|------------|-------------------------|-------------------------------------------|------------------|---------------------------------|------------------------------------------|
| 200 MiB YAFFS  | 603.8    |            |                         |                                           |                  |                                 |                                          |
| 1 GiB YAFFS    | 91.8     |            |                         |                                           |                  |                                 |                                          |
| 2 GiB YAFFS    |          |            |                         |                                           |                  |                                 |                                          |

Each experiment was run four times, and 95% confidence intervals are provided for relevant measurements.