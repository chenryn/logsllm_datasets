> [+] Author: **evi1m0**
>
> [+] Team: n0tr00t security team
>
> [+] From: http://www.n0tr00t.com
>
> [+] Create: 2016-10-27
#### 0x01 CSP 介绍
CSP[0] 是由单词 Content Security Policy 的首单词组成，CSP旨在减少 (注意这里是减少而不是消灭)
跨站脚本攻击。CSP是一种由开发者定义的安全性政策性申明，通过 CSP
所约束的的规责指定可信的内容来源（这里的内容可以指脚本、图片、iframe、fton、style等等可能的远程的资源）。通过CSP协定，让WEB处于一个安全的运行环境中，目前
CSP 已经到了 3.0 阶段。
现代浏览器目前都可以通过获取 Header 头来进行 CSP 配置，E.g php Set Header：
     、 等引用资源加载策略
    object-src  定义 、、 等引用资源加载策略
    script-src  定义 JS 加载策略
    style-src   定义 CSS 加载策略
    sandbox 值为 allow-forms，对资源启用 sandbox
    report-uri  值为 /report-uri，提交日志
Source List Reference[2]：
#### 0x02 规则示例
注：
  * 多个指令用分号进行分割；
  * 多个指令值使用英文空格分割；
  * 指令值在非域名时左右须使用引号包含；
  * 指令重复的话将以第一个为准；
1.定义所有类型资源为默认加载策略，允许执行加载 自身及 test.n0tr00t.com 的 JS 资源：
        Content-Security-Policy: "default-src 'self'; script-src 'self' test.n0tr00t.com"
        X-Content-Security-Policy: "default-src 'self'; script-src 'self' test.n0tr00t.com"
        X-WebKit-CSP: "default-src 'self'; script-src 'self' test.n0tr00t.com"
2.禁止 frame ，允许所有图像，Style Self，允许执行加载所有 n0tr00t.com 域下的 JS 资源：
        Content-Security-Policy: "script-src *.n0tr00t.com; style-src 'self'; img-src *; frame-src 'none'"
        X-Content-Security-Policy: "script-src *.n0tr00t.com; style-src 'self'; img-src *; frame-src 'none'"
        X-WebKit-CSP: "script-src *.n0tr00t.com; style-src 'self'; img-src *; frame-src 'none'"
3.Content-Security-Policy-Report-Only 收集日志报告：
        Content-Security-Policy-Report-Only: script-src 'self'; report-uri http://linux.im/test/csp/report
        LogResult:
        {
            "csp-report": {
                "document-uri": "http://linux.im/csp.php",
                "referrer": "test ref",
                "violated-directive": "script-src 'self'",
                "original-policy": "script-src 'self'; report-uri http://linux.im/test/csp/report",
                "blocked-uri": ""
            }
        }
4.允许执行内联 JS 代码，但不允许加载外部资源：
    Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline';
另外我们也可以使用在线生成 CSP 规则的站点来辅助编写：
#### 0x03 预加载
在 HTML5 中的一个新特性：页面资源预加载(Link
prefetch)[3]，他是浏览器提供的一个技巧，目的是让浏览器在空闲时间下载或预读取一些文档资源，用户在将来将会访问这些资源。一个Web页面可以对浏览器设置一系列的预加载指示，当浏览器加载完当前页面后，它会在后台静悄悄的加载指定的文档，并把它们存储在缓存里。当用户访问到这些预加载的文档后，浏览器能快速的从缓存里提取给用户。
这种做法曾经被称为 Prebrowsing ，可以细分为几个不同的技术：DNS-prefetch、subresource 和标准的
prefetch、preconnect、prerender ，并不是像很多人想象的那样，只有 Chrome 才支持预加载，目前绝大多数的浏览器都已支持。
HTML5 页面资源预加载/预读取(Link prefetch)功能是通过Link标记实现的，将 rel 属性指定为 prefetch ，在 href
属性里指定要加载资源的地址即可。例如：
Chrome, Firefox ：
Chrome 预渲染（不要滥用！对地址所有资源进行提前渲染，如未使用的话则会白白浪费渲染资源。）:
DNS 预解析 DNS-Prefetch ，浏览器空闲时提前将分析页面需要资源所在的域名转化为 IP
地址，当浏览器真正使用到该域中的某个资源时就可以尽快地完成 DNS 解析。（例如在地址栏中输入 URL 时，Chrome
就已经自动完成了预解析甚至渲染，从而为每个请求节省了大量的时间。）：
预连接 Preconnect （支持 Chrome46+, Firefox39+），与 DNS 预解析类似，preconnect 不仅完成 DNS
预解析，同时还将进行 TCP 握手和建立传输层协议：
对特定文件类型进行预加载， Chromium 使用 subresource rel
的话，优先级将低于样式文件和脚本文件，但不低于图片加载优先级，在最新版本中已经 Remove[4] 这个属性，使用新的 "preload" [5] 代替：
Preload 作为一个新的 WEB 标准，它为处理当前页面而生，和 subresource 一样，但又有着一些区别，例如 onload 事件， as
属性等等：
在 Firefox 中我们也可以通过设置 Header 头 X-moz: prefetch 来进行
prefetch，可能有些人希望能够禁用掉这个预加载，可以在 FF 浏览器的 about:config 中
`user_pref("network.prefetch-next", false);` 禁用掉对所有站点的预加载支持。
如何设置预加载的顺序？在 W3c Resource Priorities [6] 增加了两个重要资源属性：lazyload 和 postpone 。
  * lazyload 懒加载: 一个资源必须等待其他没有标识lazyload的开始下载以后才能下载；
  * postpone 延缓: 一个资源直到要显示给用户时才可以下载。适合图片 视频等元素；
不是所有的资源都可以预加载，当资源为以下列表中的资源时，将阻止预渲染操作：
  * 弹窗页面