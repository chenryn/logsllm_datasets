# Cryptographic Security for Mobile Code

**Authors:**
- Joy Algesheimer
- Christian Cachin
- Jan Camenisch
- Günter Karjoth

**Affiliation:**
IBM Research, Zurich Research Laboratory, CH-8803 Rüschlikon, Switzerland
Emails: {jmu, cca, jca, gka}@zurich.ibm.com

## Abstract
This paper addresses the protection of mobile code against cheating and potentially malicious hosts. We highlight that the recent approach based on computing with "encrypted functions" is limited to cases where only the code originator learns the result of the computation, and the host running the code must not notice anything at all. If the host is to receive some output from the computation, securing mobile code requires minimal trust in a third party. Tamper-proof hardware installed on each host has been proposed for this purpose. In this paper, we introduce a new approach for securely executing (fragments of) mobile code that relies on a minimally trusted third party. This party, called the secure computation service, performs some operations on behalf of the mobile application but does not learn anything about the encrypted computation. Because it is universal, the secure computation service needs to be only minimally trusted and can serve many different applications. We present a protocol based on tools from theoretical cryptography that is practical for computing small functions.

## 1. Introduction
Mobile code is an important programming paradigm for our increasingly networked world. It provides a flexible way to structure cooperative computation in distributed systems. Today, the Internet is full of mobile code fragments, such as Java applets, which represent only the simplest form of mobile code.

### Mobile Agents
Mobile agents are autonomous pieces of mobile code that act on behalf of a user for continuous collecting, filtering, and processing of information. They combine the benefits of the agent paradigm, such as reacting to a changing environment and autonomous operation, with the features of remote code execution. They operate in computer networks and are capable of moving from server to server as necessary to fulfill their goals. Important applications include mobile computing, data retrieval from large repositories, and configuration management of software and networks. The vision of mobile agents roaming the Internet may soon become reality as the paradigm is incorporated into large-scale applications.

### Definitions and Assumptions
Although sound definitions of mobile computations are still under debate, we assume here that mobile code is a program produced by one entity, called the originator, and subsequently transferred to a second entity, the host, immediately before it is executed by the host. No manual intervention, such as performing an installation or running a setup routine, is required on behalf of the host; mobile code comes ready to run. Moreover, mobile agents are capable of continued, autonomous operation disconnected from the originator and can migrate freely to other hosts during their lifetime. Such agents have also been called itinerant agents.

### Mobile Code Security
Two security problems arise in the area of mobile code:
1. **Protecting the Host from Malicious Code**: This problem has received considerable attention due to the threat of computer viruses and Trojan horses. Current solutions involve running mobile code in a sandbox with fine-grained access control and applying code signing to exploit a trust relation with the code producer.
2. **Protecting the Code from Malicious Hosts**: Solutions for this are less developed, but this problem needs to be solved for making the mobile agent metaphor useful in many contexts.

Mobile code is exposed to various security threats: a malicious host may examine the code, try to learn the secrets carried by an agent, and exploit this knowledge in its interaction with the agent to gain an unfair advantage. A host might also try to manipulate the result of a computation. Our goal is to achieve secrecy for mobile applications and integrity for their outputs in the traditional sense of information security.

### Existing Approaches
Until recently, protecting mobile code was deemed impossible by some researchers. Sander and Tschudin [22] realized that protocols from theoretical cryptography could be useful to execute mobile code in an encrypted form on an untrusted host. However, most such protocols for so-called secure computation require several rounds of interaction and are therefore not applicable in our context. Sander and Tschudin concluded that only functions representable as polynomials can be computed securely in this manner. Subsequent work of Sander et al. extends this to all functions computable by circuits of logarithmic depth [23].

Recently, some of us, together with Kilian, have found a protocol for computing all polynomial-time functions efficiently [7], which solves the mobile code privacy problem in this form. In particular, this protocol allows any polynomial-size circuit to be evaluated securely in polynomial time using only one round of interaction.

However, this approach has a serious drawback: no information about the encrypted computation must leak to the host, and only the originator may receive any output. This rules out any active mobile code that performs some immediate action on the host (like a mobile agent in a shopping scenario that accepts or rejects an offer of its host based on a secret strategy [27]). The impossibility of protecting active mobile code is demonstrated in Section 2 below; the basic problem is that a malicious host can observe the output of the computation and simply run the code again with a different input.

The only existing defense for active mobile code against a malicious host uses trusted hardware. This has been proposed by Yee [27] and by Wilhelm et al. [25] and entails running mobile code exclusively inside tamper-proof hardware, encrypting it as soon as it leaves the trusted environment. The implicit assumption one must make here is that all users trust the manufacturer of the hardware. Such an assumption seems very strong, and it is unclear whether the benefits of the mobile code software paradigm justify the deployment of an expensive hardware infrastructure (unlike the example of a DVD player using tamper-proof hardware, which primarily provides the functionality of playing video).

### Our Contribution
In this paper, we introduce an architecture for secure execution of active mobile code fragments that needs no additional client hardware. Instead, we propose a generic secure computation service that performs some cryptographic operations on behalf of the mobile code; it guarantees privacy as well as integrity of the computation to the code originator and its host. Moreover, the computation service itself does not learn anything about the computation; it must only be trusted not to collude with the originator or the host.

Our architecture builds on tools for secure computation from cryptology and applies them in new ways. In particular, we employ Yao’s “encrypted circuit construction” for scrambling a circuit that computes the desired function [26]. Such methods had been thought of theoretical interest only, but current technology makes them appear practical for small tasks where maintaining privacy justifies this overhead.

The generic nature of the proposed computation service has several benefits:
- Its cost can be shared across many applications because it is generic; nothing about its usage must be known before deploying it.
- The trust placed in its integrity is universal and not bound to a particular service or to an application context; secure computation servers may be set up and operated by independent entities.
- It is based on software and commodity hardware only and is, therefore, much cheaper to build and operate than any solution involving specialized hardware.

In many respects, the secure computation service resembles other generic security services like a public-key infrastructure (PKI) or an anonymous re-mailer. These services also enhance security and privacy where needed.

### Organization of the Paper
- **Section 2**: Introduces a formal model for mobile computations, formulates the desired security properties, and reviews prior work for protecting mobile code. It is shown why the approach based on "one-round secure computation" is not suitable for securing active mobile code.
- **Section 3**: Introduces our architecture.
- **Section 4**: Illustrates two applications: a comparison shopping agent and a generalized auction scheme.
- **Section 5**: Draws conclusions.

## 2. Protecting Mobile Agents
This section formalizes mobile agent computations and states our desired security conditions. The formal model is then used to argue why protecting active mobile agents purely by software is impossible without further assumptions.

### 2.1 Model
The defining element of a mobile code computation is that it proceeds autonomously and independently of the originator. We model mobile agent computation as follows:

- **Participants**: There are an originator \( O \) and \( e \) hosts \( H_1, \ldots, H_e \), on which the mobile agent runs.
- **Non-interactive Communication**: Each participant sends and receives only a single message. We denote by \( m_0 \) the message that \( O \) sends to \( H_1 \) and by \( m_j \) the message that \( H_j \) sends to \( H_{j+1} \) for \( j = 1, \ldots, e-1 \), and by \( m_e \) the message that the last host \( H_e \) returns to \( O \).
- **Computation**: Let the state of the mobile agent be an element of a set \( X \). Its initial state \( x_0 \) is determined by \( O \). Let the input by \( H_j \) be an element of a set \( Y \) and the output to \( H_j \) an element of \( Z \) (input and output domains are the same at all hosts for simplicity). The agent computation on host \( H_j \) is represented by two functions:
  - \( g_j : X \times Y \to X \) that determines the new state \( x_j = g_j(x_{j-1}, y_j) \) of the agent.
  - \( h_j : X \times Y \to Z \) that determines the output \( z_j = h_j(x_{j-1}, y_j) \). \( O \) obtains the final state \( \xi = x_e \in X \) of the agent. The functions \( g_j \) and \( h_j \) are known to all parties.

A (non-interactive) secure mobile computing scheme consists of \( 2e + 2 \) algorithms \( D_0, A_1, \ldots, A_e, B_1, \ldots, B_e, \) and \( V \) such that for all \( j = 1, \ldots, e \) and \( x_0 \in X, y_j \in Y \), and with:
- \( m_0 = A_0(x_0) \)
- \( m_j = A_j(m_{j-1}, y_j) \) for \( j = 1, \ldots, e \)
- \( z_j = B_j(m_j, y_j) \) for \( j = 1, \ldots, e \)
- \( \xi = D(m_e) \)

the following two conditions hold:
- **Correctness**: \( \xi = g_e(g_{e-1}(\ldots g_1(x_0, y_1), y_2 \ldots), y_e) \) and \( z_j = h_j(x_{j-1}, y_j) \) for \( j = 1, \ldots, e \).
- **Privacy**: The inputs, outputs, and the computations of all hosts remain hidden from the originator and from all other hosts, except for what follows from their outputs: \( O \) learns only \( \xi \) but nothing else about any \( y_j \) than what follows from \( x_0 \) and \( \xi \), and similarly, \( H_j \) learns only \( z_j \) but nothing about \( x_0 \) and \( y_{j'} \) for \( j' < j \) than what follows from \( z_j \) and \( y_j \).

These requirements can be defined formally using the simulation approach from cryptography [3, 18, 14, 8].

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.