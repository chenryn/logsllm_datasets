| project-away id
| where geo_point_in_polygon(lng, lat, polygon)
| summarize StormEventsCountByState = count() by StateName
```
**Output**
|StateName|StormEventsCountByState|
|---|---|
|Florida|960|
|Georgia|1085|
|...|...|
The following example filters out polygons that don't intersect with the area of the polygon of interest. The maximum error is diagonal of s2cell length. This example is based on a polygonized earth at night raster file.
```kusto
let intersection_level_hint = 7;
let area_of_interest = dynamic({"type": "Polygon","coordinates": [[[-73.94966125488281,40.79698248639272],[-73.95841598510742,40.800426144169315],[-73.98124694824219,40.76806170936614],[-73.97283554077148,40.7645513650551],[-73.94966125488281,40.79698248639272]]]});
let area_of_interest_covering = geo_polygon_to_s2cells(area_of_interest, intersection_level_hint);
EarthAtNight
| project value = features.properties.DN, polygon = features.geometry
| extend covering = geo_polygon_to_s2cells(polygon, intersection_level_hint)
| mv-apply c = covering to typeof(string) on
(
    summarize is_intersects = take_anyif(1, array_index_of(area_of_interest_covering, c) != -1)
)
| where is_intersects == 1
| count
```
**Output**
|Count|
|---|
|83|
Count of cells that will be needed in order to cover some polygon with S2 cells of level 5.
> [!div class="nextstepaction"]
> Run the query
```kusto
let polygon = dynamic({"type":"Polygon","coordinates":[[[0,0],[0,50],[100,50],[0,0]]]});
print s2_cell_token_count = array_length(geo_polygon_to_s2cells(polygon, 5));
```
**Output**
|s2_cell_token_count|
|---|
|286|
Covering a large-area polygon with small-area cells returns null.
> [!div class="nextstepaction"]
> Run the query
```kusto
let polygon = dynamic({"type":"Polygon","coordinates":[[[0,0],[0,50],[100,50],[0,0]]]});
print geo_polygon_to_s2cells(polygon, 30);
```
**Output**
|print_0|
|---|
||
Covering a large-area polygon with small-area cells returns null.
> [!div class="nextstepaction"]
> Run the query
```kusto
let polygon = dynamic({"type":"Polygon","coordinates":[[[0,0],[0,50],[100,50],[0,0]]]});
print isnull(geo_polygon_to_s2cells(polygon, 30));
```
**Output**
|print_0|
|---|
|1|