    result = 0;
    v1 = dword_5E2E0->operation_phys;
    v1->params[0].value.a = v2; //秒
    v1->params[0].value.b = 1000 * v3; //毫秒，指定值
    return result;
    }
可信执行环境中的毫秒将被写入ptmx-> fops指针，并且可以触发“ret2user”的漏洞利用。
**CVE-2015-4422：可信执行环境系统中的漏洞**
执行SMC指令时，指向TC_NS_SMC_CMD结构体的物理地址将被发送到可信执行环境。利用这一点特性，我通过使用一个变异格式的TC_NS_SMC_CMD结构，就可以将一个字节数据写入几乎任何物理地址。
    typedef struct   tag_TC_NS_SMC_CMD{
    unsigned int uuid_phys; //uuid的物理地址
    unsigned int cmd_id;
    unsigned int dev_file_id;
    unsigned int context_id;
    unsigned int agent_id;
    unsigned int operation_phys;//物理地址或内核缓冲区
    unsigned int login_method;
    unsigned int login_data;
    unsigned int err_origin;
    bool started;
    } TC_NS_SMC_CMD;
由于在“TEEGlobalTask”中没有边界检查，我们可以修改除了TEE内核占用以外的任意物理内存。例如，让我们回顾一下“TEEGlobalTask”
中get_sys_time()的伪代码：
    int get_sys_time()
    {
    int result; // r0@1
    tag_TC_NS_Operation *v1; // r3@1
    unsigned int v2; // [sp+0h] [bp-10h]@1
    int v3; // [sp+4h] [bp-Ch]@1
    get_time((int)&v2);
    result = 0;
    //operation_phys 是安全区域里的一个物理地址
    v1 = dword_5E2E0->operation_phys;
    //operation_phys+4 和 operation_phys+8 将被修改
    *(int*)(operation_phys + 4) = v2;
    *(int*)(operation_phys + 8)= 1000 * v3;
    return result;
    }
“Operation_phys + 4”和“operation_phys +
8”将被可信执行环境的内部时间覆盖。如果可信执行环境的当前内部时间为“0x0000AABB，0xCCDDEEFF”，则内存中覆盖的值在小端序系统中对应为“BB
AA 00 00，FF EE DD CC”。 “BB”是秒数的最后一个字节，并且在0x00到0xFF之间循环。  
有了这个漏洞，我们就可以在特定的时间（适当的秒数）在任何物理地址写入一个字节的数据。
**在可信执行环境系统中执行代码**
基于上述信息，一个本地应用也可以访问本来只能由可信执行环境访问的物理内存。 在本节中我们来谈谈如何在TEEGlobalTask上下文环境中实现代码执行。
通过对华为海思芯片的可信执行环境的固件逆向和一些黑盒测试，我得到一些好消息和一些坏消息。好消息是，固件中几乎没有任何漏洞防护功能——没有ASLR，没有DEP，没有“r-x”.text段，没有堆栈溢出保护…几乎就只有一个传统的RTOS在里面。
坏消息是，我们不知道在哪里修补才能改变原来的代码流并跳转到我们的shellcode。 换句话说，我们需要知道“TEEGlobalTask”的基地址。
另一个由“TEEGlobalTask”提供的接口有一个有趣的函数，名为
“ALLOC_EXCEPTION_MEM”。它允许普通的区域提供物理地址到“RTOSck”——可信执行环境的内核。
当可信执行环境中的任务崩溃时，RTOSck可能会向这个给定的物理地址写入一些崩溃信息。 当然，前提是这个物理地址可以被普通的区域访问。
所以我向SMC请求了一个无效的物理地址从而使其崩溃。 下面就是一个RTOSck崩溃信息的例子：
这个信息显示$ PC崩溃地址是0x2E103050，因此我怀疑
“TEEGlobalTask”的基地址是0x2E100000。现在我可以给“TEEGlobalTask”打一些补丁使它跳转到我事先在普通区域布置下的shellcode，然后从外部触发补丁代码执行，搞定。
**从传感器获取指纹图像**
前面提到，只有“TA_Fingerprint”可以通过系统调用“__FPC_readImage”从传感器读取指纹图像。
不幸的是，代码执行漏洞是在“TEE_GlobalTask”的上下文环境下，也就是说，指纹读取请求将由于RTOSck进行的安全检查而被拒绝。
所以我需要找到一个RTOSck的漏洞来绕过安全检查。
    signed int __fastcall   sys_call_overwrite(int a1, int a2)
    {
    signed int v2; // r3@2
    int v4; // [sp+0h] [bp-14h]@1
    int v5; // [sp+4h] [bp-10h]@1
    v5 = a1;
    v4 = a2;
    if ( *(_DWORD *)a1 == 0x13579BDF )
    {
    // 写入 (*(int*)(arg1 + 0x18C) + 7) >> 3 给 arg2
    *(_WORD *)v4 = (unsigned int)(*(_DWORD *)(v5   + 0x18C) + 7)>> 3;
    v2 = 0;
    }
    return v2;
    }
    }
这是一个没有任何输入检查的存在于RTOSck中的系统调用，我可以通过覆盖可信执行环境内核占用的内存来修改安全检查代码。
现在代码执行漏洞已经能够通过调用“__FPC_readImage”来获取指纹图像。
**总结**
通过这些漏洞利用，一款本地应用程序就能够获取指纹图像或其他加密数据，能够禁用调制解调器映像和可信任应用程序的签名验证，加载任何模块到可信执行环境并修改eFuse数据。
尽管TrustZone设计的初衷是为了解决安全问题，通过一些手段的实施我们仍然可以利用其中的安全隐患来达到想要的目的。
**  
**
**后话**
**有网友放出了exploit，附链接：**
[https://www.reddit.com/r/hacking/comments/3fy821/huawei_mate_7_trustzone_exploitcve20154421/](https://www.reddit.com/r/hacking/comments/3fy821/huawei_mate_7_trustzone_exploitcve20154421/)
另外，国外网友的博客中表明，搭载Android 5.0和高通骁龙芯片的设备由于也使用了可信区域技术，所以也会受到该漏洞影响：
[http://www.jorgejamil.com/single-post/2016/05/08/FDE-Fail-on-Android-50](http://www.jorgejamil.com/single-post/2016/05/08/FDE-Fail-on-Android-50)
截止今年9月，全球Android设备中，Android 5.0市场占有率仍高达13.1%，在所有Android系统版本中排名第四。