Adjacent patch objects which share an edge show a visible seam at the
coincident edge for edgecolor=None. I've verified via reading the raw text in
the pdf file that the points are precisely coincident and only polygons exist
and there are no lines outlining the patches. The problem continues for
rasterization via output to png.
To demonstrate this problem @akturner, @xylar, and myself have devised a test
case script:
    #!/usr/bin/python
    import matplotlib as mpl
    #mpl.use("tkagg")
    import matplotlib.pyplot as plt
    import matplotlib.patches as patches
    from matplotlib.transforms import Affine2D
    import mpl_toolkits.axisartist.floating_axes as floating_axes
    # define patches 
    def p1():
        return patches.Rectangle(
                (0.1, 0.1),   # (x,y)
                0.4,          # width
                0.8,          # height
                linewidth=0,
                edgecolor='none'
                )
    def p2():
        return patches.Rectangle(
                (0.5, 0.1),   # (x,y)
                0.4,          # width
                0.8,          # height
                linewidth=0,
                edgecolor='none'
                )
    # setup plots
    fig1 = plt.figure()
    # rectilinear patches in subplot 1
    ax1 = fig1.add_subplot(121, aspect='equal')
    ax1.add_patch(p1())
    ax1.add_patch(p2())
    plt.ylim([0,1])
    plt.xlim([0,1])
    # make rotated version of the above in subplot 2
    tr = Affine2D().scale(0.5, 0.5).translate(0.6,0).rotate_deg(30)
    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(0, 1, 0, 1))
    ax2 = floating_axes.FloatingSubplot(fig1, 122, grid_helper=grid_helper)
    fig1.add_subplot(ax2)
    aux_ax = ax2.get_aux_axes(tr)
    aux_ax.add_patch(p1())
    aux_ax.add_patch(p2())
    plt.ylim([0,1])
    plt.xlim([0,1])
    # save figures
    plt.savefig('test.pdf')
    plt.savefig('test.png')
    plt.show()
The output for pdf shows two seams:
test.pdf
The output for png only shows a seam for the rotated rectangular patches which
is why this typically does not show up for colorbars output to png:
![test](https://cloud.githubusercontent.com/assets/4295853/11885257/3e48cf36-a4dd-11e5-8d43-eca9d9fd2351.png)
Output to screen also has both seams:  
![screenshot 2015-12-17 16 38
49](https://cloud.githubusercontent.com/assets/4295853/11885559/d2fe50b0-a4dd-11e5-92b8-03d9f2eaffad.png)
I can understand why the problem exists for pdf, e.g.,
http://www.mathworks.com/matlabcentral/answers/15388-artifacts-in-figures-
exported-as-pdf-from-matlab. It is obviously not desirable that this happens,
however, and a solution would be greatly appreciated.
Regardless, the rasterization process in the conversion to png should remove
this problem.
The issue appears to be a graphical aliasing issue because the seam disappears
in pdf when smoothing is turned off. However, this is not the default for most
pdf viewers.
We have noticed that this problem can be slightly alleviated by two approaches
  1. edgecolor='face', linewidth=1 However, this distorts the shape of the polygons because colors can be mangled and make the cells appear to be different sizes, e.g., hexes are no longer hexagonal.
  2. Scale each polygon to be slightly bigger. This solves the problem but it is inelegant and resolution dependent and not a true solution for a vector graphic because the seam will show up at some plotted scale.
Is there an alternative approach we are missing that fixes this issue? We
suspect that this may be at least a soft bug warranting a warning message in
matplotlib if not a solid bug.