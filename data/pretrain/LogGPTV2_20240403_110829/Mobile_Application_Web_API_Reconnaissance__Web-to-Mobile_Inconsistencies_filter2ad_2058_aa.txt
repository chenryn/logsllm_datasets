title:Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies
&amp; Vulnerabilities
author:Abner Mendoza and
Guofei Gu
2018 IEEE Symposium on Security and Privacy
Mobile Application Web API Reconnaissance:
Web-to-Mobile Inconsistencies & Vulnerabilities
Abner Mendoza, Guofei Gu
Texas A&M University
PI:EMAIL, PI:EMAIL
Abstract—Modern mobile apps use cloud-hosted HTTP-based
API services and heavily rely on the Internet infrastructure
for data communication and storage. To improve performance
and leverage the power of the mobile device, input validation
and other business logic required for interfacing with web
API services are typically implemented on the mobile client.
However, when a web service implementation fails to thoroughly
replicate input validation, it gives rise to inconsistencies that could
lead to attacks that can compromise user security and privacy.
Developing automatic methods of auditing web APIs for security
remains challenging.
In this paper, we present a novel approach for automatically
analyzing mobile app-to-web API communication to detect in-
consistencies in input validation logic between apps and their
respective web API services. We present our system, WARDroid,
which implements a static analysis-based web API reconnaissance
approach to uncover inconsistencies on real world API services
that can lead to attacks with severe consequences for potentially
millions of users throughout the world. Our system utilizes
program analysis techniques to automatically extract HTTP
communication templates from Android apps that encode the
input validation constraints imposed by the apps on outgoing
web requests to web API services. WARDroid is also enhanced
with blackbox testing of server validation logic to identify
inconsistencies that can lead to attacks.
We evaluated our system on a set of 10,000 popular free apps
from the Google Play Store. We detected problematic logic in
APIs used in over 4,000 apps, including 1,743 apps that use
unencrypted HTTP communication. We further tested 1,000 apps
to validate web API hijacking vulnerabilities that can lead to
potential compromise of user privacy and security and found
that millions of users are potentially affected from our sample
set of tested apps.
I. INTRODUCTION
The proliferation of mobile devices has resulted in an
extensive array of mobile applications (apps) that serve diverse
needs of our connected society. Today’s modern lifestyle
increasingly depends on mobile apps that serve a wide spec-
trum of functionality including military applications, critical
business services, banking, entertainment, and other diverse
functionality. Mobile apps are often built as front-ends to ser-
vices hosted in the cloud infrastructure and accessible through
web API services. The web platform, through the use of HTTP
and HTTPS [1], serves as the main conduit for communication
between mobile applications and their respective web API
services. Previous research work in the mobile space has
mostly focused on security and privacy of the mobile device
and data stored locally on the device. However, remote HTTP-
based services form an integral part of the mobile application
© 2018, Abner Mendoza. Under license to IEEE.
DOI 10.1109/SP.2018.00039
756
ecosystem and deserve similar scrutiny with regard to security
and privacy concerns. This fact is evidenced by the placement
of Weak Server Controls as the top vulnerability in the OWASP
top 10 mobile vulnerabilities [2].
The ease at which mobile apps can be built using modern
tools means that even inexperienced developers can deploy
mobile applications that integrate with new or existing cloud
services. Additionally, a number of well established cloud
infrastructure service providers such as Amazon AWS and
Microsoft Azure provide pre-packaged mobile cloud solutions
that mobile application developers can integrate into their
apps with just a few lines of code. This approach promises
to abstract the backend logic and maintenance, freeing the
developers to focus on their mobile app functionality and user
experience. These services often include ready-made solutions
for common tasks such as data storage, user authentication,
e-commerce, social-media integration, and push notiﬁcations.
Cloud services are provided via specialized software devel-
opment kits (SDK) and application programming interfaces
(APIs) for easy integration. However, this fast paced devel-
opment is often done without full consideration of security
implications. Often,
there is no robust security design or
guidance of the application integration with the pre-packaged
components, exposing many mobile applications to exploita-
tion. Similarly, homegrown (proprietary) web API services are
often deployed at a fast pace, without much consideration of
the security impact of the design decisions and how developers
will integrate the API service into their apps.
In every instance, the decoupled mobile web service API
architecture mandates that
input validation logic is done
equally at both the client and server side. This creates a
heightened dependency on robust consistency between two
disparate platforms: web and mobile. In this work, we are
motivated by the insight that the logic implemented in the
mobile client can be used to inform audits of server-side APIs.
We observe that it is non-trivial to ensure full and robust
consistency between app-based and server-based validation
routines, resulting in inevitable mismatches between client and
server implementations of input validation logic. We introduce
the concept of Web API Hijacking to generalize these types of
threats, and develop an approach to uncover instances of Web
API Hijacking. Web API hijacking describes a class of server-
side attacks that seek to exploit logic inconsistencies and gain
unauthorized access to protected or private server capabili-
ties and resources where robust validation controls are not
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:14 UTC from IEEE Xplore.  Restrictions apply. 
consistently implemented. These attacks leverage parameter
tampering vulnerabilities on the web platform [3], discoverable
through careful analysis of mobile application code logic.
While there have been extensive works in the past
to
address web server problems such as SQL injection, cross site
scripting, and other traditional web security problems [4], [5],
today’s mobile-ﬁrst web services are often implemented with
scalability as a top priority [6]. As we show in this work,
mobile app architectures often defer validation and security
to the client-side. Weak server-side input validation is by
no means a new problem, but it has received little to no
attention, especially from the aspect of integration with mobile
applications.
Inspired by previous work in web parameter tampering
vulnerabilities [3], [7], and advances in mobile application pro-
gram analysis techniques, we devise a novel approach, called
WARDroid, to analyze mobile application web API interaction,
and uncover attack opportunities that can lead to compro-
mise of user security and privacy. WARDroid is a framework
that implements semi-automatic Web API Reconnaissance to
analyze validation routines that make up requests to web
API services from an app. WARDroid can then uncover in-
consistencies between app-based and server-based validation
logic that can lead to Web API Hijacking attacks. WARDroid
implements a network-aware static analysis framework that
systematically extracts the web API communication proﬁle
and logic constraints for a given app. It then infers sample
input values that violate the implemented constraints found in
the app. WARDroid then analyzes app-violating request logic
on the server side via blackbox testing, and is able to uncover
instances where web API services do not properly implement
input validation. We highlight several interesting case studies
that show the potential real world impact of these weaknesses
on the mobile ecosystem, affecting even high proﬁle mobile
apps used by millions of users.
We enable comprehensive analysis of each individual appli-
cation with regard to its app-to-web communication template
to uncover Web API Hijacking opportunities. Our system
primarily focuses on extracting the application layer con-
straints and interactions that occur over HTTP(S). Our System
advances state of the art research toward providing a compre-
hensive characterization of HTTP-based API communication,
especially including the constraints that relate to UI-level
input ﬁelds that ﬂow to remote web APIs. We formulate our
problem in terms of the logic constraints that are imposed by
application code, and use it as a model to characterize expected
server-side logic.
In short, the contributions of this paper are as follows:
• We develop the ﬁrst systematic approach for detecting
mobile-to-web validation logic inconsistencies that can
lead to attacks. We call this class of attacks Web API
Hijacking.
• We provide a novel mobile application Web API com-
munication analysis framework, called WARDroid, that
can extract details of mobile application cloud service
interactions. Our approach implements a novel network-
aware app-to-web static analysis framework that can
assist in uncovering Web API Hijacking vulnerabilities.
• We identify Web API misuse patterns and provide case
studies of analysis and discovered vulnerabilities in real
world applications. We show concrete exploit opportuni-
ties that are uncovered from real world apps that could
lead to severe consequences for app developers, users,
and app service providers.
II. PROBLEM STATEMENT
While mobile apps may have robust input validation and
access control logic implemented in their native code, those
are often not equally replicated on the server side for data
sent to a web API. As a result, an attacker can bypass client-
side controls and exploit a web API service to extricate data
or inject malicious data without proper authorization. This is
noted in the recent paper by Sudhodanan et. al. [8].
In this paper we aim to systematically study and (semi-
)automatically detect the inconsistencies between data valida-
tion logic in a mobile app and data validation logic imple-
mented at a remote web API server. While this is inspired
by previous work on web parameter tampering [3], [7], we
address challenges in uncovering web API data validation
logic in mobile apps, where client-to-server communication
is not as inherent as on the web platform. We also highlight
the real world security impact of inconsistent app-to-web
validation on the mobile ecosystem caused by loose coupling
between mobile and web validation logic.
Transactions between mobile apps and web API services
require careful coordination of data validation logic to ensure
that security controls are consistently implemented. For ex-
ample, if a mobile app restricts the data type of a user input
ﬁeld, we expect that the server should also implement a similar
restriction to ensure consistency. Unfortunately, it is difﬁcult
or impossible to ensure complete consistency between controls
built into the mobile app and controls actually enforced at the
server side. In many cases, the server should enforce more
constraints than the client (such as enforcing uniqueness of
usernames, for example). In this paper, we assume that the
server is at least as strict as the client. Remote web API service
implementations are often shared among different user agents
(mobile and browser), giving rise to further inconsistencies in
the implementations of the application logic between different
apps that use the same backend web API. For the sake of
scalability, web APIs may even skip input validation and defer
that job to the apps. It is also not always feasible for remote
web API services to authenticate all clients, giving rise to var-
ious replay attacks where attackers can impersonate legitimate
clients or access functionality intended for legitimate clients
without authentication or authorization [8].
The scalability requirements of remote web API services
often mandate that the implementations are generic so that
multiple client platforms can be supported. However,
this
can lead to serious security threats when the web API is
security-critical, or privacy-sensitive, but defers validation to
the client side. We address this problem in the context of the
757
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:14 UTC from IEEE Xplore.  Restrictions apply. 
mobile ecosystem. While we use the Android framework for
our research evaluation and testing, it is important to note
that Web API Hijacking is not intrinsic to any ﬂaw in the
Android framework itself. Rather, this problem applies to any
mobile app that follows the model of using web API server
endpoints, such as those that use the SaaS app model. This is a
vulnerability that exists primarily on the web platform through
parameter tampering, but has transitioned into the mobile
ecosystem, enabled by the subtle mismatch and inconsistency
of data validation logic between the native mobile platform
and the web platform.
A. Motivation
Why are we using the mobile platform to uncover potential
web server vulnerabilities? Mobile web API services are not
tightly coupled with the app front-end, but we posit
that
mobile apps implement validation logic that serves as a model
of expected server-side validation logic implemented by the
web API. This is especially true for web API services that
are tailored for mobile app consumption and do not have an
accompanying traditional web application interface. However,
due to the reliance on HTTP(S), any client capable of HTTP(S)
communication can therefore communicate with the web API
service. If the web API service does not properly validate
request data, and instead defers the responsibility to the
mobile app, an attacker can hijack the API functionality meant
exclusively for the mobile app.
Apps with web API hijacking vulnerabilities are usually not
malicious and usually implement fairly robust data validation.
However, the inconsistency lies in how the web API server
replicates that validation. Attackers in our threat model do
not attack the apps themselves but can use the app to under-
stand the web API communication proﬁle and leverage that
knowledge to coerce the server to conduct malicious activities,
expose sensitive user data, or gain unauthorized access to
privileged functionality.
To determine if a given web API endpoint is vulnerable,
our analysis ﬁnds feasible data ﬂows in the app that generate
HTTP(S) requests to the web API server and process some
response from the server. By extracting the path constraints
on those data ﬂows, we can infer the data validation model
of the app for a particular web API endpoint. By generating
similar requests outside the app that would violate the app
validation logic, we can uncover inconsistencies between the
app and server logic. These web API endpoints are referred
to as ‘hijack-enabled’. By exploiting the inconsistencies in
these hijack-enabled endpoints, an attacker can compromise
the security and privacy of user data or API functionality.
We consider that a mobile app’s input validation logic with
respect to its interaction with a web API primarily consists of
three steps:
1) Sanitize and Validate input, and generate HTTP(S)
Requests to the Web API Server.
2) Reject Invalid Input.
3) Process Web API Server Responses.
B. Formalization
More formally, a mobile app Ma generates a request Ra
using input strings S and sends it to the remote web API server
for processing. Before sending the request, the application
must enforce certain constraints Ca on the strings in S, and
abort the request if the constraints are not satisﬁed. Formally,
the constraint checking code can be expressed as a function
Ca(S) → {true|f alse}, where true means that the inputs
satisfy the constraints, and false means that the inputs do
not satisfy the constraints. We denote the constraint checking
function at client app as Ca, and the corresponding function
at the server as Cs. Therefore, we assert that if Cs(S) = true,
then Ca(S) = true. That is, if the server constraints on
an input evaluate to true, then the client constraints on the
preceding web request input should also evaluate to true.
We observe the following rules about constraint checking
between the app and the server:
• An input accepted at the server does not violate the
constraints at the client. Cs(S) = true ⇒ Ca(S) = true
• An input that is rejected at the client, should be rejected
at the server. Ca(S) = f alse ⇒ Cs(S) = f alse
These rules ensure consistency between validation at the
mobile app and at
the web API server. We note that an
input that is valid in the app may be invalid at the web API
server because Cs may be more restrictive than Ca in certain
situations. For example, when registering a user account, the
server can additionally validate the username for uniqueness.
Also, if Cs(S) = f alse (the server rejects the input), then it
does not matter if the client accepts it or not. We are targeting
instances where Cs(S) = true AND Ca(S) = f alse.
A violation of these consistency rules could cause the API
to be hijack-enabled and exposed to the possibility of being
attacked. Speciﬁcally, a potential vulnerability exists if the web
API server accepts an input that would be rejected by the client
side constraints. Such problems can lead to compromise of
user data security and privacy, denial of service for all apps
that rely on the web API, and other serious consequences to
the mobile ecosystem that can lead to monetary losses.
Therefore, our problem is reduced to evaluating the con-
sistency of the constraint checking functions between the app
and the web API server. In this work, we treat the app as a
whitebox, and the web API server as a blackbox. Since Cs
is at least as restrictive as Ca, we can model Cs by precise
analysis of the app. Using a derived constraint formula, we can
uncover inconsistencies between both platforms by evaluating
the responses Rs generated from requests Ra sent to the
web API by our test framework. By identifying and further
evaluating web API endpoints that show inconsistencies, we
are able to uncover web API hijacking opportunities.
C. Threat model
We assume a network attacker as described in [9]. Our
attacker has access to the mobile application and can reverse
engineer the source code. Additionally, the attacker can ob-
serve and manipulate his own network trafﬁc if necessary.