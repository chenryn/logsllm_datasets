rightmost side of the arrow indicates that JDK 8u152 does not
include mitigations against the code execution attack.
A. Attacks on Entries Conﬁdentiality (P1)
JKS Password Cracking: The custom PBE mechanism
described in Section IV-A for the encryption of private keys is
extremely weak. The scheme requires only one SHA1 hash and
a single XOR operation to decrypt each block of the encrypted
entry resulting in a clear violation of rule R1. Since there is
no mechanism to increase the amount of computation needed
to derive the key from the password, also rule R2 is neglected.
Despite the poor cryptographic scheme, each attempt of a
brute-force password recovery attack would require to apply
SHA1 several times to derive the whole keystream used to
decrypt the private key. As outlined in Figure 1, a successful
decryption is veriﬁed by matching the last block (CK ) of the
protected entry with the hash of the password concatenated
with the decrypted key. For instance, a single password attempt
to decrypt a 2048 bit RSA private key entry requires over 60
SHA1 operations.
We found that such password recovery attack can be greatly
improved by exploiting the partial knowledge over the plaintext
of the key. Indeed, the ASN.1 structure of a key entry enables
to efﬁciently test each password with a single SHA1 operation.
In JKS, private keys are serialized as DER-encoded ASN.1
objects, along the PKCS#1 standard [39]. For instance, an
encoded RSA key is stored as a sequence of bytes starting
with byte 0x30 which represent the ASN.1 type SEQUENCE
and a number of bytes representing the length of the encoded
key. Since the size of the encrypted key is the same as the
size of the plaintext, these bytes are known to the attacker.
On average, given n bytes of the plaintext it is necessary
Fig. 2: Performance comparison of password cracking for
private RSA keys on JKS and JCEKS using both the standard
and the improved 1-block method on a Intel Core i7 6700
CPU.
to continue decryption beyond the ﬁrst block only for one
password every 256n attempts.
The pseudocode of the attack is provided in Algorithm
1, using the same notation introduced in Section IV-A. We
assume that the algorithm is initialized with the salt, all the
blocks of the encrypted key and the checksum. The XOR oper-
ation between the known plaintext and the ﬁrst encrypted block
(line 3) is performed only once for all the possible passwords.
As a halt condition, the result is then compared against the
digest of the salt concatenated to the tested password (lines 5-
6). To further verify the correctness of the password, a standard
decrypt is performed.
A comparison between the standard cracking attack and our
improved version is depicted in Figure 2. From the chart it is
possible to see that the cost of the single block attack (referred
to as 1-block) is independent from the size of the encrypted
entry, while the number of operations required to carry out the
standard attack is bound to the size of the DER-encoded key.
As an example, for a 4096 bit private RSA key, the 1-block
approach is two orders of magnitude faster than the standard
one.
Based on our ﬁndings, that we previously mentioned in
a blog post [25], this attack has been recently integrated into
Hashcat 3.6.04 achieving a speed of 8 billion password tries/sec
with a single NVIDIA GTX 1080 GPU.
JCEKS Password Cracking: The PBE mechanism dis-
cussed in Section IV-A uses a custom KDF that performs
20 MD5 iterations to derive the encryption key used in the
Triple-DES cipher. This value is three orders of magnitude
lower than the iteration count suggested in [28], thus violating
both rules R1 and R2. Given that keys are DER-encoded as
well, it is possible to speed up a brute-force attack using a
technique similar to the one discussed for JKS. Figure 2 relates
the standard cracking speed to the single block version. Notice
4https://hashcat.net/forum/thread-6630.html
8
102420484096819216384RSA Private Key Size (bits)103104105106107      # Passwords / secondJKS 1-BlockJCEKS 1-BlockJKS StandardJCEKS StandardTABLE II: Properties guaranteed by keystores with respect to attacks, before and after updates listed in Section VII.
JKS
JCEKS
PKCS12
BKS
UBER
BCFKS
BCPKCS12
(P1) Entries conﬁdentiality
(P2) Keystore integrity
(P3) System integrity
¨
2
2
¨
3
S1
S1-3
S1
1
¨
¨
S1
¨
¨
1
¨
¨
S1
Legend:
property is always satisﬁed
no clear attacks but rules not completely satiﬁed
property is broken in the standard attacker model
property is broken under a attacker setting Sx
Sx
1 only conﬁdentiality of certiﬁcates can be violated
2 under additional settings S1 or S4 it might be possible to use rainbow tables
3 under additional settings S2 and S3 it is possible to achieve arbitrary code execution on JDK ≤ 8u152
that the cost of a password-recovery attack is one order of
magnitude higher than JKS in both variants due to the MD5
iterations required by the custom KDF of JCEKS.
PKCS#12 Certiﬁcate Key Cracking: Oracle PKCS12 and
BCPKCS12 keystores allow for the encryption of certiﬁcates.
The PBE is based on the KDF deﬁned in the PKCS#12
standard paired with the legacy RC2 cipher in CBC mode with
a 40 bit key, resulting in a clear violation of rule R1. Due
to the reduced key space, the protection offered by the KDF
against ofﬂine attacks can be voided by directly brute-forcing
the cryptographic key. Our serialized tests, performed using
only one core of an Intel Core i7 6700 CPU, show that the
brute-force performance is 8,300 passwords/s for password
testing (consisting of a KDF and decryption run), while the key
cracking speed is 1,400,000 keys/s. The worst-case scenario
that requires the whole 40-bits key space to be exhausted,
requires about 9 days of computation on our system. This time
can be reduced to about 1 day by using all eight cores of our
processor. We estimate that a modern high-end GPU should
be able to perform this task in less than one hour.
Notice, however, that although ﬁnding the key so easily
makes the encryption of certiﬁcates pointless, an attacker
cannot use the key value to reduce the complexity of cracking
the integrity password since the random salt used by the KDF
makes it infeasible to precompute the mapping from passwords
to keys.
B. Attacks on Keystore Integrity (P2)
JKS/JCEKS Integrity Password Cracking: The store in-
tegrity mechanism used by both JKS and JCEKS (cf. Sec-
tion IV-A) only relies on the SHA1 hash digest of the integrity
password, concatenated with the constant string “Mighty
Aphrodite” and with the keystore data. In contrast with
rule R1, this technique based on a single application of SHA1
enables to efﬁciently perform brute-force attacks against the
integrity password. Section VI reports on the computational
effort required to attack the integrity mechanism for different
sizes of the keystore ﬁle.
Additionally, since SHA1 is based on the Merkle-Damg˚ard
construction, this custom approach is potentially vulnerable
to extension attacks [26]. For instance, it may be possible
for an attacker with write access to the keystore (S1) to
remove the original digest at the end of the ﬁle, extend the
keystore content with a forged entry and recompute a valid
hash without knowing the keystore password. Fortunately, this
speciﬁc attack is prevented in JKS and JCEKS since the ﬁle
format stores the number of entries in the keystore header.
JKS/JCEKS Integrity Digest Precomputation: The afore-
mentioned construction to ensure the integrity of the keystore
suffers from an additional problem. Assume the attacker has
access to an empty keystore, for example when an old copy
of the keystore ﬁle is available under a ﬁle versioning storage
(S4). Alternatively, as special case of S1, the attacker may
be able to read the ﬁle, but the interaction with the keystore
is mediated by an application that allows to remove entries
without disclosing the store password. This ﬁle consists only
of a ﬁxed header followed by the SHA1 digest computed
using the password, the string “Mighty Aphrodite” and
the header itself. Given that there is no random salting in
the digest computation, it would be possible to mount a very
efﬁcient attack to recover the integrity password by exploiting
precomputed hash chains, as done in rainbow tables [41].
C. Attacks on System Integrity (P3)
JCEKS Code Execution: A secret key entry is stored in a
JCEKS keystore as a Java object having type SecretKey.
First,
is serialized and wrapped into a
SealedObject instance in an encrypted form; next, this
object is serialized again and saved into the keystore.
the key object
When the keystore is loaded, all the serialized Java ob-
jects stored as secret key entries are evaluated. An attacker
with write capabilities (S1) may construct a malicious entry
containing a Java object that, when deserialized, allows her to
execute arbitrary code in the application context. Interestingly,
the attack is not prevented by the integrity check since keystore
integrity is veriﬁed only after parsing all the entries.
The vulnerable code can be found in the engineLoad
method of the class JceKeyStore implemented by the Sun-
JCE provider.5 In particular, the deserialization is performed
on lines 837-838 as follows:
// read the sealed key
try {
ois = new ObjectInputStream(dis);
entry.sealedKey =
(SealedObject) ois.readObject();
...
Notice that the cast does not prevent the attack since it is
performed after the object evaluation.
To stress the impact of this vulnerability, we provide
three different attack scenarios: i) the keystore is accessed by
5http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/ﬁle/5534221c23fc/src/share/
classes/com/sun/crypto/provider/JceKeyStore.java
9
multiple users over a shared storage. An attacker can replace
or add a single entry of the keystore embedding the malicious
payload, possibly gaining control of multiple hosts;
ii) a
remote application could allow its users to upload keystores
for cryptographic purposes, such as importing certiﬁcates
or conﬁguring SSL/TLS. A crafted keystore loaded by the
attacker may compromise the remote system; iii) an attacker
may even forge a malicious keystore and massively spread it
like a malware using email attachments or instant messaging
platforms. Users with a default application associated to the
keystore ﬁle extension (e.g., keystore inspection utilities such
as KSE 6) have a high probability of being infected just by
double clicking on the received keystore. Interestingly, all the
malicious keystores generated during our tests did not raise
any alert on antivirus tools completing a successful scan by
virustotal.com.
We checked the presence of the vulnerability from Java 6
onwards. We were able to achieve arbitrary command exe-
cution on the host with JDK ≤ 7u21 and JDK ≤ 8u20 by
forging a payload with the tool ysoserial.7 Newer versions
are still affected by the vulnerability, but the JDK classes
exploited to achieve code execution have been patched. Since
the deserialization occurs within a Java core class, the classpath
is restricted to bootstrap and standard library classes. However,
by embedding a recursive object graph in a JCEKS entry, an
attacker can still hang the deserialization routine consuming
CPU indeﬁnitely and thus causing a DoS in the target machine.
We were able to mount this attack on any version of the Oracle
JDK ≤ 8u144.
The implementation choice for storing secret keys in
JCEKS is a clear violation of Rule R3, since these entities
are essentially stored as Java code. The correct approach is to
adopt standard formats and encodings, such as the PKCS#8
format used in the PKCS12 keystore.
JCEKS Code Execution After Decryption: When the
attacker knows the integrity password and the conﬁdentiality
password of a secret key entry (S2, S3) in addition to S1, the
previous attack can be further improved to achieve arbitrary
command execution even on the latest, at the time of writing,
Java 8 release (8u152). This variant of the attack assumes
that the application loading the JCEKS keystore makes use
of one of the widespread third-party libraries supported by
ysoserial, such as Apache Commons Collections or the
Spring framework: such libraries have been found [3] to
contain vulnerable gadget chains that can be exploited by the
malicious payload.
When a SealedObject wrapping a secret key is success-
fully loaded and decrypted, an additional deserialization call is
performed over the decrypted content. The SealedObject
class extends the classpath to allow the deserialization of any
class available in the application scope, including third-party
libraries. By exploiting this second deserialization step, an
attacker may construct more powerful payloads to achieve
command execution.
The exploitation scenarios are similar to the ones already
discussed in the previous variant of the attack. Additionally, we
6http://keystore-explorer.org
7https://github.com/frohoff/ysoserial
point out that even an antivirus trained to detect deserialization
signatures would not be able to identify the malicious content
since the payload is stored in encrypted form in the keystore.
DoS by Integrity Parameters Abuse: Many keystores rely
on a keyed MAC function to ensure the integrity of their
contents. The parameters of the KDF used to derive the key
from the store password are saved inside the ﬁle. Thus, an
attacker with write capabilities (S1) may tamper with the KDF
parameters to affect the key derivation phase that is performed
before assessing the integrity of the keystore ﬁle. In particular,
the attacker may set the iteration count to an unreasonably
high value in order to perform a DoS attack on applications
loading the keystore.
We found that Oracle PKCS12, BKS and BCPKCS12
implementations are affected by this problem. Starting from
valid keystore ﬁles, we managed to set the iteration count value
to 231−1. Loading such keystores required around 15 minutes
at full CPU usage on a modern computer. According to [52]
the iteration count should not impact too heavily on the user-
perceived performance, thus we argue that this is a violation
of Rule R2.
D. Bad Design Practices
During our analysis we found that some of the keystores
suffered from bad design decisions and implementation issues
that, despite not leading to proper attacks, could lead to serious
security consequences.
Our review of the Oracle PKCS12 keystore code showed
that the KDF parameters are not treated uniformly among
MAC, keys and certiﬁcates. During a store operation,
the
Oracle implementation does not preserve the original iteration
count and salt size for MAC and certiﬁcates that has been
found at load time in the input keystore ﬁle. Indeed, iteration
count and salt size are silently set to the hard-coded values
of 1024 and 20 byte, respectively. Since this keystore format
is meant to be interoperable, this practice could have secu-
rity consequences when dealing with keystores generated by
third-party tools. For instance, PKCS12-compatible keystores
generated by OpenSSL default to 2048 iterations: writing out
such keystore with the Oracle JDK results in halving the cost
of a password recovery attack.