Webwolf默认9090端口  
可修改IP和端口参数  
java -jar webgoat-server-8.0.0.M25.jar --server.port=8000
--server.address=0.0.0.0
（4）在浏览器中访问127.0.0.1:8080/WebGoat(区分大小写)，进入WebGoat
### 3.1.3 DSVW靶场
#### 3.1.3.1 DSVW简介
Damn Small Vulnerable Web (DSVW) 是使用 Python 语言开发的 Web应用漏洞 的演练系统。其系统只有一个 python
的脚本文件组成, 当中涵盖了 26 种 Web应用漏洞环境, 并且脚本代码行数控制在了100行以内, 当前版本v0.1m。需要python (2.6.x 或
2.7)并且得安装lxml库
#### 3.1.3.2 安装步骤
（1）安装lxml  
apt-get install python-lxml  
（2）下载靶场  
git clone   
（3）运行脚本  
python dsvw.py  
（4）浏览器访问  
出现下图页面则安装成功  
### 3.1.4 xxe-lab
#### 3.1.4.1 靶场介绍
xxe-lab是一个使用php,java,python,C#四种当下最常用语言的网站编写语言来编写的一个存在xxe漏洞的web
demo。由于xxe的payload在不同的语言内置的xml解析器中解析效果不一样，为了研究它们的不同。作者分别使用当下最常用的四种网站编写语言写了存在xxe漏洞的web
demo,将这些demoe整合为xxe-lab。
#### 3.1.4.2 靶场安装
下载链接：  
(1)PHP下安装  
将php-xxe放入PHPStudy的WWW目录下即可  
(2)Java下安装  
java_xxe是serlvet项目，直接导入eclipse当中即可部署运行。  
(3)Python下安装  
A.安装Flask模块  
B.python xxe.py
## 3.2 手工测试
这里笔者选用bWAPP虚拟机靶场对回显XXE和Blind XXE进行手工测试。
### 3.2.1 Low等级
#### 3.2.1.1测试过程
Bug：选择`XML External Entity Attacks (XXE)`  
Security level：选择`low`  
点击Any bugs?进行抓包，发送到Repeater  
根据请求包内容可知，xxe-1.php 文件中将接收到的XML文件以POST方式发送给xxe-2.php，安全等级为0。  
读取网站任意文件Payload：
    ]>
    &Quan;Any bugs?
读取成功  
内网端口检测 payload：
    ]>
    &Quan;Any bugs?
探测80端口，显示报错信息  
netstat -tln查看本机已开放哪些端口  
23端口未开放，报错信息也与探测开放端口的报错信息不同  
由于此靶场没有BlindXXE漏洞，但我们可以运用BlindXXE的思路来做一下测试  
先构造XXE的文件读取payload  
假设没有回显,想知道是否成功读取目标服务器文件，可通过查看日志  
从日志可知利用XXE成功读取文件。  
将payload中的robots.txt改为不存在的hhh，再查看一下日志，可以看到404,目标服务器不存在该目录。  
测试就到这里，下面我们分析一下Low级别的源码
#### 3.2.1.2 源码分析
bWAPP/xxe-2.php关键代码  
xxe-2.php文件通过PHP伪协议接收XML内容，然后使用`simplexml_load_string()` 函数直接把 XML
字符串载入对象中，未做任何过滤，最后再将从xml中获取的login元素值直接回显。
### 3.2.2 Medium\High等级
用读取`robots.txt`的代码测试一下，未返回文件内容  
分析一下源码  
bWAPP/xxe-2.php关键代码  
可以发现Medium\High等级为相同代码。  
与Low级别一样，xxe-2.php文件通过PHP伪协议接收XML内容，然后使用`simplexml_load_string()` 函数直接把 XML
字符串载入对象中，未做任何过滤。  
但不同之处在于login元素值是从`session`中获取，攻击者无法利用login元素来进行XXE攻击。
## 3.3 工具测试
### 3.3.1 Collaborator插件
#### 3.3.1.1 工具介绍
Burp Collaborator是从Burp suite
v1.6.15版本添加的新功能，它几乎是一种全新的渗透测试方法，常用于测试不回显信息的漏洞。Burp Collaborator会渐渐支持blind
XSS，SSRF， asynchronous code injection等其他还未分类的漏洞类型。
#### 3.3.1.2 安装过程
Burpsuite的extender模块下的bapp store ,找到 Collaborator点击安装即可。  
安装后默认使用官方提供的服务器（推荐），也可以自己搭
#### 3.3.1.3 测试过程
由于小蜜蜂靶场没有BlindXXE漏洞，我们继续假装它就是没回显  
先抓取数据包，并修改为如下payload  
再点击Burp Collaborator client打开 collaborator 插件  
再点击Copy to clipboard复制payload url，该url随机生成  
然后使用Collaborator生成的payload url  
点击go后可以在Collaborator看到访问记录  
响应包返回一串随机内容，说明成功进行了响应，目标服务器进行了外部的请求和交互，证明存在Blind XXE。
### 3.3.2 XXEinjector
#### 3.3.2.1 工具介绍
XXEinjector是一款基于Ruby的XXE注入工具，它可以使用多种直接或间接带外方法来检索文件。其中，目录枚举功能只对Java应用程序有效，而暴力破解攻击需要使用到其他应用程序。
#### 3.3.2.2 安装过程
下载链接：  
（1）安装Ruby环境  
apt-get update //更新源  
apt-get install ruby//安装ruby  
ruby -v//查看ruby版本  
（2）安装gem  
gem list  
gem install [gem-name]  
gem environment  
（3）下载工具然后解压，在进入此目录调用XXEinjector.rb即可  
unzip XXEinjector-master.zip
#### 3.3.2.3 使用方法
(1)枚举HTTPS应用程序中的/etc目录  
ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt –ssl  
(2)使用gopher（OOB方法）枚举/etc目录：  
ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt
--oob=gopher  
(3)二次漏洞利用  
ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/vulnreq.txt--2ndfile=/tmp/2ndreq.txt  
(4)使用HTTP带外方法和netdoc协议对文件进行爆破攻击  
ruby XXEinjector.rb --host=192.168.0.2 --brute=/tmp/filenames.txt--file=/tmp/req.txt --oob=http –netdoc  
(5)通过直接性漏洞利用方式进行资源枚举  
ruby XXEinjector.rb --file=/tmp/req.txt --path=/etc --direct=UNIQUEMARK  
(6)枚举未过滤的端口  
ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --enumports=all  
(7)窃取Windows哈希  
ruby XXEinjector.rb--host=192.168.0.2 --file=/tmp/req.txt –hashes  
(8)使用Java jar上传文件：  
ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt--upload=/tmp/uploadfile.pdf  
(9)使用PHP expect执行系统指令  
ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --oob=http
--phpfilter--expect=ls  
(10)测试XSLT注入  
ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt –xslt  
(11)记录请求信息  
ruby XXEinjector.rb --logger --oob=http--output=/tmp/out.txt
# 4\. 真实实战演练
这里选取vulnhub实战虚拟机靶场来进行实战，主要包括以下内容
## 4.1 靶场介绍
Haboob团队为发布的论文“XML外部实体注入 - 解释和利用”
## 4.2 靶场安装
镜像下载链接：  
下载后直接解压导入虚拟机即可。默认NAT模式，DHCP服务会自动分配一个IP地址。
## 4.3 靶场实战演示
探测IP  
可以从扫描结果得出，80端口开放，中间件是Apache，从robots.txt中得出有/xxe/目录和/admin.php文件  
访问/xxe/目录  
随便输个admin,password,然后抓包  
改成读取本机文件payload，成功读取flagmeout.php  
发送到Decoder进行Base64解密  
# 5\. CMS实战演练
选取Metinfo6.0.0进行XXE漏洞实战攻击测试。
## 5.1 CMS介绍
米拓企业建站系统主要用于搭建企业网站，采用PHP+Mysql架构，全站内置了SEO搜索引擎优化机制，支持用户自定义界面语言(全球各种语言)，支持可视化傻瓜式操作、拥有企业网站常用的模块功能（企业简介模块、新闻模块、产品模块、下载模块、图片模块、招聘模块、在线留言、反馈系统、在线交流、友情链接、网站地图、会员与权限管理）。
## 5.2 CMS安装
### 5.2.1 下载地址
### 5.2.2 安装步骤
下载好后解压放到WWW目录即可,记得更改数据库密码。
## 5.3 CMS漏洞介绍
漏洞发生在此处文件：`app/system/pay/web/pay.class.php`  
漏洞成因：未禁止外部实体加载
## 5.4 CMS实战演示
审计源码时搜索`simplexml_load_string`函数，找到漏洞文件`app/system/pay/web/pay.class.php`  
未禁止外部实体加载，测试是否存在外部实体引用。  
如果回显报错可能是PHP版本问题，更改`php.ini`设置即可。  
通过查看日志可以知道已成功访问目标服务器。  
## 5.5 修复建议
更新MetInfo版本，v6.1.0已删除`pay.class.php`文件。
# 6.防御方法
## 6.1 过滤用户提交的XML数据
过滤关键词：<!DOCTYPE和<!ENTITY，或者SYSTEM和PUBLIC
## 6.2 PHP下
libxml_disable_entity_loader(true);
## 6.3 JAVA下
DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();  
dbf.setExpandEntityReferences(false);
## 6.4 Python下
from lxml import etree  
xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))