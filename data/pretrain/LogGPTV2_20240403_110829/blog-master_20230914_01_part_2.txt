```  
{"output":{"finish_reason":"stop","text":"Hello, which park is closest to me?"},"usage":{"output_tokens":9,"input_tokens":50},"request_id":"697063a4-a144-9c17-8b6c-bc26895c1ea4"}  
```  
```  
curl --location 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation' --header 'Authorization: Bearer API-KEY' --header 'Content-Type: application/json' --data '{  
    "model": "qwen-turbo",  
    "input":{  
        "messages":[        
            {  
                "role": "system",  
                "content": "你是达摩院的生活助手机器人。"  
            },  
            {  
                "role": "user",  
                "content": "你好，哪个公园距离我最近？"  
            }  
        ]  
    },  
    "parameters": {  
    }  
}'  
```  
```  
{"output":{"finish_reason":"stop","text":"你好！你可以查看你的地图，或者我可以为你提供附近公园的信息。你想查看哪个地区的公园？"},"usage":{"output_tokens":39,"input_tokens":39},"request_id":"c877aa58-883b-9942-97a5-576d3098e697"}  
```  
6\.2、通过python调用api:   
安装python sdk:  
- https://help.aliyun.com/zh/dashscope/developer-reference/install-dashscope-sdk
```
pip install dashscope
```
创建一个保存api key的文件:  
请把以下API-KEY代替成你申请的api-key.    
```  
su - postgres  
mkdir ~/.dashscope  
echo "API-KEY" > ~/.dashscope/api_key  
chmod 500 ~/.dashscope/api_key  
```  
然后编辑一个python文件  
```  
vi a.py  
```  
```  
#coding:utf-8  
from http import HTTPStatus  
from dashscope import Generation  
def call_with_messages():  
    messages = [{'role': 'system', 'content': '你是达摩院的生活助手机器人。'},   
                {'role': 'user', 'content': '如何做西红柿鸡蛋？'}]  
    gen = Generation()  
    response = gen.call(  
        Generation.Models.qwen_turbo,  
        messages=messages,  
        result_format='message', # set the result is message format.  
    )  
    if response.status_code == HTTPStatus.OK:     
        print(response)    
    else:  
        print('Request id: %s, Status code: %s, error code: %s, error message: %s'%(  
            response.request_id, response.status_code,   
            response.code, response.message  
        ))       
if __name__ == '__main__':  
    call_with_messages()  
```  
调用结果如下:  
```  
root@c4012a5576b6:~# python3 a.py  
{"status_code": 200, "request_id": "00a5f4f2-d05b-9829-b938-de6e6376ef51", "code": "", "message": "", "output": {"text": null, "finish_reason": null, "choices": [{"finish_reason": "stop", "message": {"role": "assistant", "content": "做西红柿鸡蛋的步骤如下：\n\n材料：\n- 西红柿 2 个\n- 鸡蛋 3 个\n- 葱 适量\n- 蒜 适量\n- 盐 适量\n- 生抽 适量\n- 白胡椒粉 适量\n- 糖 适量\n- 水淀粉 适量\n\n步骤：\n1. 西红柿去皮，切成小块，鸡蛋打散，葱切末，蒜切片。\n2. 锅中放油，倒入葱末和蒜片炒香。\n3. 加入西红柿块，翻炒至软烂。\n4. 加入适量的盐、生抽、白胡椒粉和糖，继续翻炒均匀。\n5. 倒入适量的水，煮开后转小火炖煮 10 分钟左右。\n6. 鸡蛋液倒入锅中，煮至凝固后翻面，再煮至另一面凝固即可。\n7. 最后加入适量的水淀粉，翻炒均匀即可出锅。\n\n注意事项：\n- 西红柿去皮时可以用刀划十字，然后放入开水中烫一下，皮就很容易去掉了。\n- 煮西红柿鸡蛋时，要注意小火慢炖，以免西红柿的营养成分流失。\n- 鸡蛋液倒入锅中时要快速翻面，以免蛋液凝固后不易翻面。"}}]}, "usage": {"input_tokens": 35, "output_tokens": 328}}  
```  
7、通用文本向量的API:  
https://help.aliyun.com/zh/dashscope/developer-reference/text-embedding-quick-start  
调用举例:  
```  
vi b.py  
```  
```  
#coding:utf-8  
import dashscope  
from http import HTTPStatus  
from dashscope import TextEmbedding  
def embed_with_list_of_str():  
    resp = TextEmbedding.call(  
        model=TextEmbedding.Models.text_embedding_v1,  
        # 最多支持25条，每条最长支持2048tokens  
        input=['风急天高猿啸哀', '渚清沙白鸟飞回', '无边落木萧萧下', '不尽长江滚滚来'])  
    if resp.status_code == HTTPStatus.OK:  
        print(resp)  
    else:  
        print(resp)  
if __name__ == '__main__':  
    embed_with_list_of_str()  
```  
调用结果如下:  
```  
# python3 b.py  
{  
    "status_code": 200, // 200 indicate success otherwise failed.  
    "request_id": "fd564688-43f7-9595-b986-737c38874a40", // The request id.  
    "code": "", // If failed, the error code.  
    "message": "", // If failed, the error message.  
    "output": {  
        "embeddings": [ // embeddings  
            {  
                "embedding": [ // one embedding output  
                    -3.8450357913970947, ...,  
                    3.2640624046325684  
                ],  
                "text_index": 0 // the input index.  
            }  
        ]  
    },  
    "usage": {  
        "total_tokens": 3 // the request tokens.  
    }  
}  
```  
#### 传统方法 设计和实验       
传统数据库的数据库内置编程语言的支持比较受限, 通常只支持SQL接口. 无法直接使用通义千问大模型+文本向量化模型的能力.  
#### PolarDB|PG新方法1 设计和实验  
PG|PolarDB 数据库内置支持开放的编程语言接口, 例如python, lua, rust, go, java, perl, tcl, c, ... 等等.   
PG|PolarDB 通过内置的编程接口, 可以实现数据库端算法能力的升级, 将算法和数据尽量靠近, 避免了大数据分析场景move data(移动数据)带来的性能损耗.   
连接到数据库shell, 创建plpython3u插件, 让你的PG|PolarDB支持python3编写数据库函数和存储过程.   
```
psql
create extension plpython3u;
```
1、创建aigc函数, 让数据库具备了ai能力.  
```  