---
## Page 334
36跟老男孩学 Linux运维：Shell编程实战
read -p *Pls input a num.:* num
u.wnus.se
1）
echo '1ogin in 192.168.33.129.*
ssh 192.168.33.129
2)
echo*1ogin in 192.168.33.130.
ssh 192.168.33.130
110)
11
if[*Schar′-0926]:then
exit
sleep 3
fi
*)
echo
"select
error.
done
esac
main
执行效果如下：
[rooteoldboy -]+su
Sump
（）
Warming: Permanently added ·192.168.33.130* (RsA) to the 1ist of knom host.s.
root9192.168.33.130'spa88word<==手工入害号。
21:20:35 up 1day.9:08,1user,1oad average:0.08, 0.02,0.01
root9192.168.33.130*s password
<==手工输入害码。
21:20:39up 1 day.9:08.1user,1oad average: 0.08,0.02,0.01
PI:EMAIL's pas8word
<==手工输入害码。
21:20:43 up 1 day,9:08,1user,1oad average:0.07,0.02,0.00
可以看到，每次都需要手工输入密码，才能执行ssh命令，否则无法执行。
下面就牛刀小试，利用Expect的功能实现自动交互，发送密码并执行上述ssh命令
（注意，由于已经执行过一次ssh了，yes的交互就不会再出现了）。
[rooteo1dbpy-]4 cato1dboy.exp
<==扩展名使用exp代表是Expect脚本。
dx/uq/xn/1
<==脚本开头解析器，和She11类似，表示程序使用Expect解析。
spawmsshroot8192.168.33.130uptine#<执行ssh令（注意开头必须要有spamm，
否则无法实现交互）。
-onssed..aodxa
<==利用Expect 获取执行上述ssh命令输出的字特串是否为期待的
字将事*pa8sword，这至的·是通配符。
send“123456\n*<=当获取到期待的字特串*pasmord时，则发123456害码给系统，n为换行。
expecteof<==处理完华后结末xpect。
执行Expect脚本：
[rooteoldboy -]which expect
/usr/bin/expect
[rooteoldboy -]expect oldboy.exp
<使用Expect执行脚本是个好习惘。
spawn ssh root0192.168.33.130 uptime
root9192.168.33.130*s password
<这里再也不需要手工输入密码了。
21:24:05 up 1day,9:12,1user,1oad average:0.00,0.00,0.00
[rooteoldboy-]expect oldboy.exp
spawm ssh root0192.168.33.130 uptime
root9192.168.33.130's password
<==这里再位不需要手工输入密码了。
21:24:08 up 1 day.9:12,1u8er,1oadaverage: 0.00,0.00,0.00
此时我们并没有手工输人密码，就已经自动连到远端机器执行ssh命令了，这是不
是很神奇？接下来老男孩就带领大家一起进人Expect程序学习之旅。
18.4Expect程序自动交互的重要命令及实践
Expect程序中的命令是Expect的核心，需要重点掌握。
---
## Page 338
32跟老男孩学 Linux 运维：Shell编程实战
18.4.1spawn命令
在Expect自动交互程序执行的过程中，spawn命令是一开始就需要使用的命令，通
过spawn执行一个命令或程序，之后所有的Expect操作都会在这个执行过的命令或程
序进程中进行，包括自动交互功能，因此如果没有spawn命令，Expect程序将会无法实
现自动交互。
spawn命令的语法为：
spawm[选项】[需要自动交互的命令或程序]
例如：
spawn ssh root9192.168.33.130 uptime
在spawn命令的后面，直接加上要执行的命令或程序（例如这里的 ssh命令）等，
除此之外，spawn还支持如下一些选项。
口-open：表示启动文件进程。
-ignore：表示忽略某些信号。
提示：这些选项不常用，了解即可，无需深入。
使用spawn命令是Expect程序实现自动交互工作流程中的第一步，也是最关键的
一步。
18.4.2expect命令
1.expect命令语法
在Expect自动交互程序的执行过程中，当使用spawn命令执行一个命令或程序
之后，会提示某些交互式信息，expect命令的作用就是获取spawn命令执行后的信
息，看看是否和其事先指定的相匹配，一旦匹配上指定的内容就执行expect后面的动
作，expect命令也有一些选项，相对用得较多的是-re，表示使用正则表达式的方式来
匹配。
expect命令的语法为：
expect表达式[结作]
示例如下：
spawm ssh root8192.168.33.130 uptime
expect **password*（send*123456\r*)
上述命令不能直接在Linux命令行中执行，需要放入Expect脚本中执行。
---
## Page 339
第18章Expect自动化交互式程序应用实践32
2.expect命令的实践
范例18-1：执行ssh命令远程获取服务器负载值，并要求实现自动输人密码。
方法1：将expect 和 send放在一行。
[root@oldboy -]cat 18_1_1.exp
#1/usr/bin/expect
<=脚本解释器
spam ssh root9192.168.33.130 uptime
<开启exect 自动交互式，执行BBh命令。
就发送123456给系统。
dx
<-要想输出结果，还必须加eof，表示expect结束。
执行结果如下：
[rooteo1dboy-]#expect18_1_1.exp <采用expect 执行脚本，就相当于使用sh执行
Shell 本
spawn ssh root8192.168.33.130 uptine
root9192.168.33.130'spassword：<==Expect程序自动帮我们输入了害码。
21:51:14 up 1 day,9:39,1user,1oad average: 0.00,0.00,0.00
从上面的例子可以看出，expect命令是依附于spawn命令的，即通过spawn执行
ssh命令后，系统会提示输人密码，此时的expect命令按照事先的配置匹配ssh命令执
行后的字符串password，如果匹配到了指定的password字符串，则会执行紧随其后包
含在{1（大括号）中的 send或exp_send动作，匹配的动作也可以放在下一行，这样就
不需要使用（（大括号）了，就像下面这样，实际完成的功能与上面的一样。
方法2：expect和 send放在不同行。
[root@o1dboy -]cat 18_1_2.exp
spawm ssh root9192.168.33.130 uptime
odx/utq/xsn/1
pionssed..1oedx
send*123456\n*
expect eof
执行结果如下：
[rootθo1dboy-]expect18_1_2.exp
spawn ssh root9192.168.33.130 uptime
root9192.168.33.130*s password:
21:52:37 up 1 day.9:40,1user,1oad average:0.00,0.00,0.00
expect命令还有一种高级用法，即它可以在一个expect匹配中多次匹配不同的字符
串，并给出不同的处理动作，此时只需要将匹配的所有字符串放在一个（（大括号）中
就可以了，当然还要借助exp_continue指令实现继续匹配。
范例18-2：执行ssh命令远程获取服务器负载值，并自动输人“yes”及用户密码。
[rooteoldboy-]cat18_2_1.exp
---
## Page 340
22跟老男孩学Linux运维：Shel编程实战
1/usr/bin/expect
spawn ssh root9192.168.33.130 uptime
expect (
<==起始大括号前要有空格。
,ou/sa,
(exp_send*yes\r*jexp_continue）<==exp_send和 send类位。
(x9s2.pusdx）.possed..
expect eof
说明：
1）exp_send和send类似，后面的Vr（回车）和前文的in（换行）类似。
2）expect0，类似多行expect。
3）匹配多个字符串，需要在每次匹配并执行动作后，加上exp_continue。
演示如下：
[root8oldboy-]rm-f~/.ssh/knom_hosts<清除密文件，使其出现提示yes/no信惠。
[root8oldboy-]expect18_2_1.exp
spawn ssh PI:EMAIL uptine
RSA key fingerprintis fd:2c:0b:81:b0:95:c3:33:el:45:6a:1c:16:2f:b3:9a.
The authenticity of ho8t '192.168.33.130 (192.168.33.130)* can't be e8tab1ished.
Narning: Permanently added ·192.168.33.130* (RSA) to the 1ist of knom host8.
root8192.168.33.130*spa88word:4<==expect自动给害码。
22:03:13 up 1 day.
9:51,1user,1oadaverage:0.00,0.00,0.00
<==轻松打印出负载值。
范例18-3：利用expect响应Shell脚本中的多个read读人。
准备数据：利用read提示用户输人，故意创造交互式输人，给expect出难题。
[root@o1dboy-]cat18_3_1.sh#<==这里是she11脚本！
1/bin/sh
eu,weuzesn no 3ndu seetd.d-pex
ssed,pxonssedxnondu seetd,d-peox
e,e xodu osd.d-pex
   -o
sseds s pxomssed xno,u- ouo
echo *your enail is Smail.·
执行结果如下：
[root@o1dboy-]sh18_3_1.sh
Please input your username:oldboy
#<==提示输入，只能手动输入对应字将串。
#<==提示输入，只能手动输入对应字特串。
Please input your password:123456
Please input your emai1:313337419qq.com
#<==提示输入，只能手动输入对应字将事。
your nane is o1dboy.your password is 123456,your emai1 is 31333741eqg.con.
以下为正式解答：开发Expect自动化脚本，根据需求自动输人多个字符串。
---
## Page 341
第18章Expect自动化交互式程序应用实践
[rooteo1dboy-]cat18_3_2.exp
#1/usr/bin/expect
spawn/bin/sh 18_3_1.sh
<==执行上述She11脚本，注意这里使用的是相对路径。
expect(
<若获取到的是username信惠，则自动输入oldboy。
"*pass*.
(xx9.p)
<==若获取到的是*pa88*信惠，则自动输入123456。
**mail**
#<==若获取到的是*mai1·信惠，则自动输入邮件地址。
expect eof
执行结果如下：
[root@o1dboy-]expect 18_3_2.exp