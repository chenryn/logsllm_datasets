φ
2
1
φ
φ
Q(t5)
bid
9.97
9.95
id
2
1
Q(t1)
bid
id
Q(t2)
bid
id
Q(t3)
bid
id
2
3
2
φ
φ
φ
2
3
2
1
φ
φ
φ
φ
3
2
1
φ
φ
φ
Q(t4)
bid
9.97
9.95
id
2
1
Q(t5)
bid
9.97
9.95
id
2
1
DQ(t1)
id
bid
DQ(t2)
id
bid
DQ(t3)
id
bid
DQ(t4)
id
bid
DQ(t5)
bid
id
DQ(t1)
id
bid
DQ(t2)
id
bid
DQ(t3)
id
bid
DQ(t4)
bid
id
DQ(t5)
bid
id
2
4
φ
φ
(a)
Q(t3)
bid
9.98
9.97
9.95
id
3
2
1
2
4
3
1
id
2
1
φ
φ
φ
φ
2
4
3
1
5
10.00
10.00
9.98
9.98
9.98
Q(t4)
bid
9.97
9.95
Q(t5)
bid
9.97
9.95
id
2
1
Q(t1)
bid
id
Q(t2)
bid
id
2
3
2
φ
φ
φ
2
3
2
1
φ
φ
φ
φ
id
2
3
2
Q(t1)
bid
Q(t2)
bid
id
10.00
9.98
9.97
2
3
2
1
10.00
9.98
9.97
9.95
DQ(t1)
id
bid
DQ(t2)
id
bid
DQ(t3)
bid
id
DQ(t4)
bid
id
DQ(t5)
bid
id
DQ(t1)
bid
id
DQ(t2)
bid
id
2
4
10.00
10.00
(c)
2
4
3
1
10.00
10.00
9.98
9.98
2
4
3
1
5
10.00
10.00
9.98
9.98
9.98
2
4
φ
φ
2
4
3
1
10.00
10.00
9.98
9.98
2
4
3
1
5
10.00
10.00
9.98
9.98
9.98
(b)
Q(t3)
bid
9.98
9.97
9.95
id
3
2
1
DQ(t3)
bid
id
2
4
10.00
10.00
(d)
Q(t4)
bid
9.97
9.95
id
2
1
Q(t5)
bid
9.97
9.95
id
2
1
DQ(t4)
bid
id
DQ(t5)
bid
id
2
4
3
1
10.00
10.00
9.98
9.98
2
4
3
1
5
10.00
10.00
9.98
9.98
9.98
Figure 2. Applying the BPA to the completed 4 transaction auction of Figure 1.
In (a) we see the
input of the BPA: the ﬁnal transaction Q(t5), DQ(t5) tables with both bidders’ ids and bids exposed,
together with 4 pairs of redacted Q, DQ tables sampled during the auction.
In (b) we see the ﬁrst
step of the algorithm, propagating the bids from t5to t4. In (c), the propagation from t4 to t3 and in (d)
the results after the BPA ﬁnishes, and the bids in all transaction are recovered.
each id is mapped to a single (16-bit wide) character. For
example, the Q(t3), DQ(t3), Q(t4), DQ(t4) in Figure 2
(cid:48)321(cid:48),(cid:48) 24(cid:48),(cid:48) 21(cid:48),(cid:48) 2431(cid:48) respec-
will result in the strings:
tively. Applying the edit-distance between Q(t − 1) and
Q(t) may result in insert if a new qualiﬁed bid was made,
delete if a qualiﬁed bid was disqualiﬁed or equal if a dis-
3. The edit-distance between
qualiﬁed bid was made.
DQ(t − 1) and DQ(t) can result only in equal or insert
operations.
Continuing with example in Figure 2, the edit distance
between Q(t3), Q(t4) and DQ(t3), DQ(t4) will produce:
3We do not allow replacement operations, as the tables are only altered
by either insertion or deletion. We used the standard dynamic program-
ming algorithm for edit distance, but disallowed the replacement operation
by setting its cost to higher than insert+delete
dist(Q(t3), Q(t4)) = dist((cid:48)321(cid:48),(cid:48) 21(cid:48)) =
(insert, 0, 1, 0, 0)
(equal, 1, 3, 0, 2)
(1)
dist(DQ(t3), DQ(t4)) = dist(
(cid:48)
(cid:48)
(cid:48)
,
(cid:48)
2431
24
) =
Where the results are of the form
(equal, 0, 2, 0, 2),
(insert, 2, 2, 2, 4)
(2)
(operation, str1idxsrc , str1idxdst , str2idxsrc , str2idxdst )
The ﬁrst distance implies that the bidder with ID = 3
had his qualiﬁed bid burned, while the two other qualiﬁed
bids remained. As a result, we can copy the unchanged bid
values (9.97, 9.95) from Q(t4) into Q(t3), leaving us with
a still unkown bid value for the burned bid. The second
distance results in an addition of 2 disqualiﬁed bids. This
can either result from two disqualiﬁed bids of bidders with
id = 3 and id = 1, the burning of id = 3 by id = 1 or
the burning of id = 1 by id = 3. As we know the bid
count delta is C(t4) − C(t3) = 1, we can deduce that a bid
was burned, and by going over the Q(t3) we know it’s the
bid of id = 3. As a result, we can copy the unchanged bid
values (10.00, 10.00) of the ﬁrst two bidders from DQ(t4)
into DQ(t3), and the burned bid value (9.98) from DQ(t4)
into Q(t3).
For a simulation of a multi-bid transaction example, we
drop t3 in the above example, so we have:
dist(Q(t2), Q(t4)) = dist((cid:48)2321(cid:48),(cid:48) 21(cid:48)) =
(equal, 0, 1, 0, 1),
(delete, 1, 3, 1, 1),
(equal, 3, 4, 1, 2)
or
(delete, 0, 2, 0, 0),
(equal, 2, 4, 0, 2)
(3)
dist(Q(t2), Q(t4)) = dist(
(cid:48)(cid:48)
(cid:48)
,
(cid:48)
2431
) = (insert, 0, 0, 0, 4)
(4)
In distance (3) we are faced with ambiguity, as there are
two valid edit paths with the same distance. The BPA ex-
haustively recurses through all permutations until success-
ful termination, and backtracks upon failures. Failures oc-
cur either when reaching an invalid DQ, Q state, or when
reaching an already traversed failure state. When the BPA
tries the ﬁrst distance result, it will end up with and er-
ronous:
⇐
Q(t4)
id
2
1
bid
9.97
9.95
Q(t2)
id
2
3
2
1
bid
9.97
9.98
10.00
9.95
DQ(t2)
DQ(t4)
id
2
4
3
1
bid
10.00
10.00
9.98
9.98
2.5 BPA Shortfalls/ Implicit Edit Operations
As we saw in Section 2.2, |DQ(t + 1)| − |DQ(t)| is al-
ways non-negative, and |Q(t + 1)| − |Q(t)| can be either
positive, negative or zero. Since the BPA works only on ex-
plicit edit operation changes, it may miss implicit changes,
e.g. if in the same sampled transaction of Q there is both an
insertion and a deletion of the same element. This results
in no visible change of Q, which in turn is overlooked by
the BPA even though there were actual changes of bids. A
common instance of this scenario is the self-burn, a restric-
tion common to most observed HUBA sites, where a player
bidding more than 3 consecutive qualiﬁed bids suffers the
burning of his lowest bid. Consider the following example
of a user with id = 7 bidding a new unique bid, self burning
a previous one:
Q(t)
id
7
7
7
bid
9.98
9.97
9.96
Q(t + 1)
id
bid
7
7