自定义恶意类后转成字节数组再转hex，传入fromHexString函数：
再来看工具中weblogic10 命令回显方法
weblogic 10 命令回显方法
把payload复制出来查看
先看把传入的类解密后反编译，发现就是普通的命令执行马
拿回显部分是在对图中的红框部分，构造了拿到线程后再拿到`response.getWriter().write("")`来回显：
12版本的payload中是反射拿到`workadapter`的`connectionHandler`字段来获得`HttpConnectionHandler`类，再通过`HttpConnectionHandler`拿到的ServletResponseImpl：
而10版本
中`getCurrentWork`拿到的就直接是`ServletResquestImpl`类，而`ServletResquestImpl`类是有提供函数再获得ServletResponseImpl类的：
weblogic.servlet.internal.ServletRequestImpl#getResponse
所以10版本的构造就简单的多，`WorkAdapter`和`ServletRequestImpl`有继承关系，直接强转就行了：
所以这里`WorkAdapter`父类可以直接强转`ServletRequestImpl`子类：
同理，实战中传入给classloader时候将上述class字节数组转成hex、或base64格式再调用相应解码函数即可。
##
### 所以工具中weblogic 10 获取回显的思路：
  * 调用`org.mozilla.classfile.DefiningClassLoader`来加载恶意的自定义类
  * 恶意的自定义类中使用当前线程类获得`ServletResquestImpl`类，调用`ServletResquestImpl`类中的`getResponse`方法就可以拿到`ServletResponseImpl`类来完成后面的回显。
##
##
# 0x03 weblogic 10和12版本通用命令回显payload：
## 如上 10版本和12版本 获得回显的异同
  * 差异点在于通过当前weblogic线程类`getCurrentWork`函数拿到的类，是不同的。
10版本拿到的是`ServletResquestImpl`类，12版本拿到的是`ContainerSupportProviderImpl`类。
  * 相同点是最后都拿到了`ServletResponseImpl`类，后续通过`ServletResponseImpl`类其中的输出函数拿到回显。
所以通用回显可以在拿到线程返回的类进行一个判断，判断类名是如果有`ContainerSupportProviderImpl`则是12版本，如果`workAdapter`和`ServletRequestImpl`有继承关系则是10版本：
    ExecuteThread executeThread = (ExecuteThread)Thread.currentThread();
            ServletResponseImpl servletResponse = null;
            WorkAdapter workAdapter = executeThread.getCurrentWork();
            WebAppServletContext webAppServletContext = null;
            if (workAdapter.getClass().getName().contains("ContainerSupportProviderImpl")) {
                /*weblogic 12 */
                Field field = workAdapter.getClass().getDeclaredField("connectionHandler");
                field.setAccessible(true);
                HttpConnectionHandler httpConnectionHandler = (HttpConnectionHandler)field.get(workAdapter);
                servletResponse = httpConnectionHandler.getServletResponse();
            } else if (workAdapter instanceof ServletRequestImpl) {
                /*weblogic 10 */
                ServletRequestImpl servletRequest = (ServletRequestImpl)workAdapter;
                servletResponse = servletRequest.getResponse();
            }
判断完成后拿到了ServletResponseImpl类，后续输出都是一样的：
    ProcessBuilder processBuilder = new ProcessBuilder(cmd);
                processBuilder.redirectErrorStream(true);
                Process proc = processBuilder.start();
                servletResponse.getServletOutputStream().writeStream(proc.getInputStream());
                servletResponse.getWriter().write("");
### weblogic 10
### weblogic 12
##
##
# 0x04 其他命令回显思路尝试
网上大多数总结除了拿上下文来回显之外，还有像RMI绑定实例、URLClassLoader抛异常回显、JNDI回显这些思路方法，我在一一拿来使用在
**xmldecoder反序列洞** 中时候发现部分并不适用，效果也没有拿上下文的好，贴一下尝试的记录。
##
## java 调用 js 命令执行回显(推荐)
这个挺方便的也简单，javax.script.ScriptEngineManager来调用js，最早看的是宽字节发的文章
执行的js编码即可，poc网上宽字节是发过的，解出来自己改功能就好了，获得线程环境那些照着前面说的改就行
##
## RMI /URLClassLoader 抛异常回显(不适用)
抛异常报错回显的方法在T3用的多，错误通过反序列化传输给客户端，但在xmldecoder这里不适用。
先来看URLClassLoader 抛异常，网上poc恶意类大多是这样,最后将执行命令的结果直接放异常抛出:
一般可以把恶意类打jar包，上传到服务器，上传使用FileOutputStream,然后用URLClassLoader 加载jar中的类。
但是这种回显实战洞中我很少见到过构造，xmldecoder反序列中没有把异常代码在返回中抛出，故这种方法不适用。
再来看RMI抛异常，原理不再叙述，参考文章：
但是在weblogic寻找，大多数实现RMI接口的都是抛出java.rmi.RemoteException 异常，故也不适用
##
## RMI绑定实例命令回显 (待解决)
老姿势了，这个可以参考weblogic_cmd,原理即通过漏洞调用classloader来自定义一个RMI接口类，这个类的实现方法中将回显返回。
weblogic利用rmi回显的工具都用的`weblogic.cluster.singleton.ClusterMasterRemote`这个接口,命令回显覆写在getServerLocation方法:
但是这个方法在T3洞用的多，一般是T3发送然后结合CC链来注册RMI接口类达到命令回显，y4er师傅就写过一篇这个内容  
而xmldecoder反序列的话就简单很多了，我可以直接使用defineclass，所以想当然的拿过来用：
将上述文件class转hex（protected属性改public不然反射报权限异常）后打入：
调用却发现报溢出死循环错误：
报死循环的异常，晚上调了很久，rmi服务端下断loadclass找原因也没找出个所以然，调了个寂寞。
后面再想觉得思路没毛病，会不会问题在代码上，尝试动手把执行命令的函数注释，只返回一个字符串发现成功，那么问题就在这里
然后就一行行调试，发现在执行方法中不能new，直到最后错误定位到`proc.getInputStream()`，如果不执行这句，正常bind和正常调用执行命令：
后面也没有调出来是为啥，辛苦su18师傅陪我一起找出错原因，很感谢，这个问题原因暂时未知。
##
## JNDI 命令回显
jndi的话如果能出网利用com.sun.rowset.JdbcRowSetImpl可以打jndi回显，参考[JNDI实现回显研究 - 安全客，安全资讯平台
(anquanke.com)](https://www.anquanke.com/post/id/200892#h2-0)，但这篇本质最后去ldap服务器加载的恶意类里面还是找的web上下文来输出回显，并且能出网个人觉得没太大必要用这种方法。
还有一种和单独利用xmldecoder回显关系不大了，植入jndi实例，绑定一个reference供远端调用，攻击者(客户端)利用绑定的reference执行Weblogic服务器上的系统命令，并将结果返回给自己,打入的类中在weblogic目标中安装个JNDI实例，这里就不是单独只用xmldecoder这个洞了，xmldecoder洞只是拿来打入而已：
这个代码宽字节之前的cve-2020-14644
漏洞分析中就有现成的，:
打入:
缺点众所周知就是这样做的话在JNDI树查看注册上去的Reference时，一眼就能看出注入的后门:
##
##
# 0x05 xmldecoder反序列化结合weblogic filter通用内存马
先来看大家用的最多的filter类型。
## weblogic filter内存马原理与构造流程
weblogic
filter的马最早我搜到的是宽字节发的
调的是12版本,在上面提到10版本和12版本回显流程的时候就知道，两个版本拿到上下文也就是`request、response、context`对象的流程和方法是不同的，所以payload不同。
但是可以效仿上面构造回显通用payload中对上下文的判断方法，构造个通用的weblogic filter注入马。
先来理一下种weblogic filter思路流程和重要的点，具体寻找filter过程看宽字节文章就行，不再叙述，
### weblogic filter内存马重要的点：
  * weblogic中主要使用weblogic.servlet.internal.FilterManager这个类去管理系统中的`Filter`,这个类有两个重要的函数，一个是`registerFilter`函数中进程注册filter，第二个是`loadFilterFilter`实例化`filter`
  * 但是在FilterManager只能传递ClassName，FilterManager通过ClassName去查找Class,所以构造payload的时候使用反射
  * filter中使用weblogic自己的classloader`（weblogic.utils.classloaders.ChangeAwareClassLoader）`去寻找class，在这个classloader的loadclass函数中从`cacheClasses`中查找是否存在待查找的类，如果存在，则直接返回该名称对应的Class
  * 种植filter内存马的方法就是先在`cachedClasses`这个类中，`put`进去自己的马，然后再在`registerFilter`中进行注册filter  
##  
### weblogic filter内存马流程：
大致流程：利用漏洞加载一个注入filter内存马的恶意类，恶意类再去加载真正的内存马(蚁剑冰蝎之类的webshell)。
这里拿weblogic 12版本举例。
##
###
1.拿到weblogic自己的classloader，weblogic.utils.classloaders.ChangeAwareClassLoader
获取当前线程类，通过反射等操作拿到上下文request、context对象（这一步
10版本和12版本有所不同前面说过），`ChangeAwareClassLoader`这个weblogic自己的classload从`context`对象中就能拿到，如下，取对象中的`classloader`属性即可：
##
### 2.在`cachedClasses`类中插入恶意代码
因为`ChangeAwareClassLoader`的`loadClass`函数中会从`cachedClasses`取类名为`name`的类，如果存在，则直接返回该名称对应的Class。
第一次看宽字节那篇文章的时候以为cachedClasses是个单独的类，调是时候才知道是个`ConcurrentHashMap`类型，故后面反射调用cachedClasses的get、put方法也就不奇怪了：
##
### 3.调用`FilterManager`的registerFilter函数进行filter的注册
因为weblogic中主要使用`FilterManager`去管理系统中的`Filter`，在`FilterManager`这类中使用`registerFilter`去注册、加载filter，故最后一步反射调用registerFilter这个函数来注册内存马：
如上可完成filter内存马的植入。