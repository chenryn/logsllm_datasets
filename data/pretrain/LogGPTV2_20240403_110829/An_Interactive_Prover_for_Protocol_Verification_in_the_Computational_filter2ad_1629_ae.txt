, (m)
T
Note that both obstacles are of the same nature, though
there is an additional difﬁculty in the second condition: since
the set on the left of (3) can be arbitrarily large (because the
T may
trace in T can be arbitrarily long), the set (ST(s, m))
be inﬁnite (because of this, our ﬁnal rule will slightly differ
from the form proposed in (1)).
We start by focusing on the occurrence side condition
(cid:118)H(_,•). First, we naturally lift it to meta-terms, by requiring
that the side-condition holds for the translation of the meta-
terms in any trace model.
Deﬁnition 13. Let C be a template and u a meta-term with
no message variables. For any name symbol n, we let n (cid:118)P
C u
hold whenever n(cid:126)k (cid:118)C (u)
T
P holds for any trace model T and
(cid:126)k ⊆ DI (of length arity of n).
The base logic side-condition (cid:118)C is fully syntactic, and
can easily be implemented. This is no longer the case with
n (cid:118)P
C u, as it requires to check a property on all translations
of u. Therefore, instead of checking directly n (cid:118)P
C u, we are
going to check the property on the direct occurrences of n in u
(i.e. n (cid:118)C u), and on the occurrences of n in any action of
the protocol. The idea is that this must over-approximate all
occurrences of n in any translation of u in a trace model T.
First, we adapt Deﬁnition 11 to meta-terms (base logic
function symbols in a template C are seen as function symbols
of index arity 0 of the meta-logic).
Deﬁnition 14. Let C be a template, u a meta-term without
message variables, and n be a name symbol. Then n (cid:118)C u
holds whenever n appears in u only in subterms of the form
C[ (cid:126)w , n[(cid:126)i ]] for some (cid:126)w and indices (cid:126)i.
Deﬁnition 15. Let C be a template, and n be a name symbol.
We write n (cid:118)C P when n (cid:118)C {φ, o | a[(cid:126)i].(φ, o) ∈ PA}.
C u.
We give a sufﬁcient condition to check that n (cid:118)P
Proposition 1. Let C be a template. For any name symbol n
and meta-term u, if n (cid:118)C u and n (cid:118)C P then n (cid:118)P
C u.
Next, we need to over-approximate the (possibly inﬁnite)
set of all honest hashes that can appear in the translation of
a meta-term, as stated in (3). As for (cid:118)P
C, we look for all
possible occurrences of H(u, k) either directly in (s, m), or in
an action of P. In the latter case, we also construct a formula
of the logic that characterizes the fact that the action must
have happened before the moment where u was computed,
which improves the precision. We capture this through some
set ¯stP (s, m), which is formally deﬁned in [6]. Essentially,
¯stP (s, m) is a set of triples (u,(cid:126)i, c) such that, for any T, any
T that is a hash is the interpretation of some
subterm of (s, m)
T{(cid:126)i(cid:55)→(cid:126)k} such that c holds in T{(cid:126)i (cid:55)→ (cid:126)k}. Moreover, (cid:126)i are the
(u)
new indices in u and c: fv(u, c) ⊆ fv(s, m) ∪ {(cid:126)i}.
We can now state the meta-logic version of the EUF-CMA
rule given in Deﬁnition 12.
Proposition 2. The following rule is sound whenever H is
interpreted as an EUF-CMA keyed hash-function:
Γ,(cid:87)
(H(u,k[ (cid:126)j0 ]),(cid:126)i ,c)∈ ¯stP (s,m) ∃(cid:126)i .( (cid:126)j0 = (cid:126)j ∧ c ∧ m = u) (cid:96) φ
Γ, s = H(m, k[(cid:126)j ]) (cid:96) φ
when k (cid:118)H(_,•) P and k (cid:118)H(_,•) s, m.
Proof (sketch). It sufﬁces to show that, for any trace model T,
the translation of the rule in T is (up to some minor details)
an instance of the base logic EUF-CMA rule.
Using Proposition 1, we know that k (cid:118)P
H(_,•) t, m, hence
k(cid:126)k (cid:118)H(_,•) (t, m)
T for any (cid:126)k ⊆ DI: this guarantees that the
side-condition of the base logic rule holds. Then, we show
that the translation in T of the disjunction in the premise of
the meta-rule covers all cases of the premise of the base logic
EUF-CMA rule, using the fact that ¯stP (s, m) correctly over-
approximates the hashes in st((s, m)
).
T
Example 15. We illustrate our rule on an example in the
context of the Basic Hash protocol, as described in Example 5
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
546
(cid:0)
(we factorize the quantiﬁcation and the equality atom, which
are shared by all three cases):
Γ, ∃i0, j0. i0 = i ∧
(aT [i0, j0] < τ ∧ n[i, j] = n[i0, j0])
∨ (aR[j0, i0] < τ ∧ n[i, j] = fst(input@aR[j0, i0]))
∨ (aR1[j0] < τ ∧ n[i, j] = fst(input@aR1[j0])) (cid:1) (cid:96) φ
Γ, snd(input@τ ) = H(n[i, j], key[i]) (cid:96) φ
The rule does express that
if a hash of n[i, j] has been
obtained, this message must have been previously hashed.
The three possible hashed messages detected by ¯stP (s, m) are
restricted to plausible situations: equalities i0 = i ensure that
the hashing key is key[i] and inequalities over timestamps (e.g.
aT [i0, j0] < τ) ensure that the situation comes from an action
that has been previously executed.
VI. EQUIVALENCE RULES
We now turn to proving equivalences. Ultimately, we are
interested in proving observational equivalence between two
protocols, as this allows to model several security properties
such as strong secrecy, anonymity, or unlinkability. We ﬁrst
deﬁne the notion of observational equivalence, then deﬁne
what are our equivalence sequents, and ﬁnally present our
equivalence sequent calculus.
Intuitively, two protocols P1 and P2 are observationally
equivalent when they offer the same set of actions for the
attacker to execute and, for any sequence of actions that the
attacker may decide to execute, the resulting frames with P1
and P2 are indistinguishable. In particular, the actions execute
with the same probability on both sides, and the sequences of
messages that are outputted are indistinguishable. We start by
deﬁning the notion of compatible protocols, capturing the idea
that they offer the same set of actions.
Deﬁnition 16. Protocols P1 = (P 1A, <1) and P2 = (P 2A, <2)
are compatible if they are based on the same set A of action
names and have the same partial orders, i.e.
α <1 α(cid:48) if, and only if, α <2 α(cid:48) for all α and α(cid:48).
Since the notion of trace model only depends on the
underlying set of names and partial order, and not on the actual
semantics of the protocol given by PA, we immediately have
that two compatible protocols have the same trace models.
Deﬁnition 17. Two protocols P1 and P2 are observationally
equivalent if they are compatible and, for any trace model T,
the base logic formula (frame@τ )
is valid.
∼ (frame@τ )
T
P2
T
P1
We need a notion of sequent for equivalences that allows
us to express observational equivalences. More generally, we
want to reason about indistinguishabilities between sequences
of meta-level terms and formulas interpreted w.r.t. different
protocols on each side of the equivalence.
Deﬁnition 18. Let P1 and P2 be two compatible protocols.
A meta-equivalence is an element of the form (cid:126)u ∼ (cid:126)v where (cid:126)u
and (cid:126)v are sequences of meta-terms and meta-formulas of the
((cid:126)u ∼ (cid:126)v)
T
P1,P2
def
= ((cid:126)u)
T
P1
∼ ((cid:126)v)
T
P2
.
same length and without message variables. The interpretation
of a meta-equivalence in a trace model w.r.t. P1 and P2 is:
An equivalence sequent for P1 and P2 is a judgment of the
form ∆ (cid:96)P1,P2 E where E is a meta-equivalence and ∆ is a
set of meta-equivalences. We may note ∆ (cid:96) E when P1,P2
is clear from the context.
for all T and M such that T, M |= (E(cid:48))
T
P1,P2
for each E(cid:48) ∈ ∆.
We now present our equivalent calculus, for some compat-
The sequent ∆ (cid:96)P1,P2 E is valid when T, M |= (E)
ible protocols P1 and P2, ﬁxed for the rest of this section.
A. Basic Rules
T
P1,P2
We present in Fig. 5 some basic inference rules for deriv-
ing equivalences, whose soundness does not depend on any
cryptographic assumption. In these rules, we use the meta-
variable ξ to denote either a meta-term or a meta-formula.
All the rules but INDUCTION are obvious liftings of known
axioms for deriving equivalences in the base logic (see
e.g. [11]). E.g., for the REFL rule: if (cid:126)u is macro-free then
its interpretations w.r.t. P1 and P2 are the same, thus our rule
is, for each possible trace interpretation, an instance of the
reﬂexivity rule of the base logic. It is also the case of rules
ENRICH, DUP and FA. Our proof system allows variants of
the FA rule, such as FA-♦, which are still liftings of the base
logic FA rule. Finally, rule EQUIV-TERM allows to replace
some occurrences of a meta-term t by t(cid:48) on the left side of
the equivalence provided that (cid:96)P1 t = t(cid:48) is derivable. We can
similarly replace a meta-formula by an equivalent one using
EQUIV-FORM. Obviously, the variants of these rules working
on the right side of equivalences are also allowed.
The INDUCTION rule allows to prove an equivalence for
any arbitrary timestamp τ by proving the equivalence when τ
is init and, for each action a[(cid:126)i ] of the protocol, when τ is a[(cid:126)i ]
assuming that the equivalence holds for pred([(cid:126)i ]). Proofs of
observational equivalence almost always start with this rule.
B. Advanced Rules
We now present some more advanced rules. The soundness
arguments for these rules are postponed to Appendix C.
We show in Fig. 6 our rule FRESH. It is based on the base
logic rule which states that adding fresh names on each side of
an equivalence preserves its validity: indeed, these independent
uniform random samplings do not bring any new informa-
tion to the attacker. We lift this at the meta-level by over-
approximating the freshness condition as meta-formulas: we
T
have (n[(cid:126)i ])
is true.
P1
Our proof system also features a rule expressing the
information hiding capabilities of XOR, as well as rules
corresponding to the cryptographic assumptions PRF, CCA1,
ENC-KP, and DDH shown in [6].
) whenever (Freshn[(cid:126)i ]P1
(cid:54)∈ st(((cid:126)u )
T
((cid:126)u ))
P1
T
P1
Finally, our proof system includes a rule FA-DUP which
allows to handle some cases where meta-formulas or meta-
terms could be dropped from an equivalence, but where this
cannot be done using the FA and DUP rules because the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
547
ENRICH
∆ (cid:96) (cid:126)u , ξ ∼ (cid:126)v , ξ
(cid:48)
∆ (cid:96) (cid:126)u ∼ (cid:126)v
REFL
(cid:126)u is macro-free
∆ (cid:96) (cid:126)u ∼ (cid:126)u
FA
∆ (cid:96) (cid:126)u , f[(cid:126)i ](t1, . . . , tn) ∼ (cid:126)v , f[(cid:126)i ](t
∆ (cid:96) (cid:126)u , t1, . . . , tn ∼ (cid:126)v , t
(cid:48)
1, . . . , t
(cid:48)
n
(cid:48)
1, . . . , t
(cid:48)
n)
DUP
∆ (cid:96) (cid:126)u , ξ ∼ (cid:126)v , ξ
(cid:48)
∆ (cid:96) (cid:126)u , ξ, ξ ∼ (cid:126)v , ξ
(cid:48)
, ξ
(cid:48)
AXIOM
∆, (cid:126)u ∼ (cid:126)v (cid:96) (cid:126)u ∼ (cid:126)v
FA-♦
∆ (cid:96) (cid:126)u , φ, φ
∆ (cid:96) (cid:126)u , φ♦φ
(cid:48) ∼ (cid:126)v , ψ, ψ
(cid:48)
(cid:48) where ♦ ∈ {∧,∨,⇒}
(cid:48) ∼ (cid:126)v , ψ♦ψ
EQUIV-TERM
(cid:96)P1 t = t
(cid:48)
∆ (cid:96) (cid:126)u{t (cid:55)→ t
(cid:48)} ∼ (cid:126)v
EQUIV-FORM
(cid:96)P1 φ ⇔ φ
(cid:48)
∆ (cid:96) (cid:126)u{φ (cid:55)→ φ
(cid:48)} ∼ (cid:126)v
∆ (cid:96)(cid:0)(cid:126)u ∼ (cid:126)v(cid:1){τ (cid:55)→ init}
INDUCTION
∆ (cid:96) (cid:126)u ∼ (cid:126)v
(cid:8)∆,(cid:0)(cid:126)u ∼ (cid:126)v(cid:1){τ (cid:55)→ pred(a[(cid:126)i ])} (cid:96)(cid:0)(cid:126)u ∼ (cid:126)v(cid:1){τ (cid:55)→ a[(cid:126)i ]}(cid:9)
∆ (cid:96) (cid:126)u ∼ (cid:126)v
∆ (cid:96) (cid:126)u ∼ (cid:126)v
a∈A,(cid:126)i(cid:54)∈fv(∆,(cid:126)u ,(cid:126)v )
τ (cid:54)∈ fv(∆)
Fig. 5. Generic inference rules for equivalences
Base logic rule:
∆ (cid:96) (cid:126)u ∼ (cid:126)v
∆ (cid:96) (cid:126)u , n ∼ (cid:126)v , m
Meta-logic rule:
∆ (cid:96) (cid:126)u , if Freshn[(cid:126)i ]P1
∼ (cid:126)v , if Freshm[(cid:126)j ]P2
where Freshn[(cid:126)i ]P ((cid:126)t )
where n (cid:54)∈ st((cid:126)u ), m (cid:54)∈ st((cid:126)v )
((cid:126)u ) then empty else n[(cid:126)i ]
((cid:126)v ) then empty else m[(cid:126)j ]
∆ (cid:96) (cid:126)u , n[(cid:126)i ] ∼ (cid:126)v , m[(cid:126)j ]
=(cid:86)
def
(n[(cid:126)i 0],(cid:126)j ,c)∈ ¯stP ((cid:126)t ) ∀(cid:126)j .(cid:0)c ⇒ (cid:126)i (cid:54)= (cid:126)i 0
(cid:1)
Fig. 6. Rule FRESH.
immediately
justiﬁcation for dropping the elements is not
apparent in the meta-logic. Formally, we deﬁne in [6] a set of
honest meta-formulas Honest{T} for any timestamp T . The
rule is then as follows:
FA-DUP
∆ (cid:96) (cid:126)u , frame@T ∼ (cid:126)v , frame@T
∆ (cid:96) (cid:126)u , frame@T, exec@T ∧ φ
∼ (cid:126)v , frame@T, exec@T ∧ φ
φ ∈ Honest{T}
Intuitively, we can remove φ when it can be computed by
the attacker using the information they obtained from a past
execution. Our set HonestS captures a fragment
that has
this property. Typically, FA-DUP can be used on formulas
describing honest interactions between protocol participants,
such as the right-hand side of the implication of Listing 2
which does belong to Honest{aR[j,i]}.