important information that attackers can use at the real site for fraudulent purposes. 
Phishing attacks can leverage any of a number of vulnerabilities. Cross-site scripting 
and cross-site tracing are often useful in these attacks, although there are more 
subtle, obscure ways of phishing. For example, in February 2005, Eric Johanson 
reported a vulnerability in Mozilla's International Domain Name (IDN) handling 
(archived at www.mozilla.org/security/announce/2005/mfsa2005-29.html). The 
core of the vulnerability is that attackers can register a domain name and obtain a 
trusted SSL certificate for two hostnames that look identical but are actually 
composed of different characters. This is an example of the Unicode homographic 
attack described in Chapter 8(? [????.]). The attack involved registering the domain 
name www.xnpypal-4ve.com, which is rendered in an IDN-compliant browser as 
paypal.com. This method of encoding non-ASCII domain names is called punycode, 
and it's identified by any domain name component beginning with an "xn" string. In 
this attack, the punycode representation inserts a Cyrillic character that's rendered as 
the first a in paypal.com. The "-4ve" portion of the name contains the encoded 
character insertion information. 
This attack resulted in a domain name, an SSL certificate, and a Web site that was 
almost indistinguishable from the real Paypal site. In response, IDN-compliant 
browsers changed their handling of these names. They now inform users that the 
name is an IDN representation, and some browsers disable IDN by default. Of course, 
attackers still have numerous ways to trick users into falling for phishing attacks. As 
a reviewer, you need to be on the lookout for any application vulnerabilities that could 
simplify the phisher's job. 
8.4.7 Common Vulnerabilities 
Certain classes of technical vulnerabilities are common across most Web technologies. 
Web applications are usually written in high-level languages that are largely immune 
to the types of problems that plague C and C++ applications, such as buffer overflows 
and data type conversion issues. Most security problems in programs written in these 
higher-level languages occur in the places where they interact with other systems or 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1068 
components, such as the database, file system, operating system, or network. Some 
of these technical problems are explained in the following sections. 
SQL Injection 
SQL injection, discussed in Chapter 8(? [????.]), is arguably one of the most common 
vulnerabilities in Web applications. To briefly recap, in SQL injection, a SQL query is 
constructed dynamically by using user input, and users are capable of inserting their 
own SQL commands into the query. 
When reviewing a Web application, try to find every interaction with the database 
engine to hunt down all potential SQL injection points. Sometimes, you need to 
augment your testing with black-box methods if the mapping to the underlying 
database is obscured by an object-oriented abstraction or is otherwise unclear. In 
general, you want to review every SQL query to make sure it's constructed in a safe 
fashion. 
SQL with bound parameters can be considered essentially safe because it forces that 
user-malleable data out-of-band from the SQL statement. Stored procedures are the 
next best thing, but be aware of the possibility of SQL injection when they are used. 
If the stored procedure constructs a dynamic SQL query using its parameters, the 
application is still just as vulnerable to SQL injection. This means you need source 
code for the scripts used to initialize the database and create stored procedures for 
the application, or you have to test their invocation. 
If the application authors attempt to escape metacharacters in dynamically 
constructed SQL, they can run into a lot of trouble. First, numeric columns in SQL 
queries don't require metacharacters to pull off SQL injection. For example, consider 
the following query: 
SELECT * FROM authtable WHERE PASSWORD = '$password' 
    AND USERNUMBER = $usernumber 
Suppose that authtable.USERNUMBER is a numeric column. If users have full control of 
the $usernumber variable, they could set it to a value such as 100 or 1= or 100; drop 
authtable;. Note that potentially dangerous SQL injection could occur without the use 
of any in-band metacharacters. Consequently, escaping metacharacters would have 
no impact. 
Escaping metacharacters can be effective for string columns, but it depends on the 
back-end database server and the metacharacters it honors. For example, if the 
application escapes single quotes by doubling them, attackers might be able to 
submit a variable such as \'. It would get converted to \'', which could be interpreted 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1069 
as an escaped single quote followed by an unescaped single quote, depending on the 
behavior of the back-end database server. 
Another issue is related to escaping metacharacters in user-supplied data. Consider 
what happens if data in the database actually contains metacharacters. Say a user 
submits a value containing a single quote, and it's correctly escaped and inserted into 
the database. If the value submitted is myname ' drop users , the resulting query might 
be something like this: 
INSERT INTO mytable id, item 
   VALUES ( 10, 'myname '' drop users --' ); 
This query is safe, but a problem could happen if that value is retrieved from the 
database later and used in another dynamically constructed SQL query, as shown in 
this example: 
$username = mysqlquery( 
    "SELECT name FROM mytable WHERE id = 10"); 
$newquery = 
    "SELECT * FROM mydetails WHERE id = '".$username."'"; 
This query is now exploitable because its metacharacters aren't escaped. It ends up 
looking like this: 
select * from my details where id = 'myname ' drop users --' 
This query causes the users table to be dropped. These types of vulnerabilities are 
discussed in "Second Order Injection" later in this section. 
Parameterized Queries 
Any coverage of SQL injection would be incomplete without some introduction to 
protective measures. Parameterized queries, one of the two primary measures of 
preventing SQL injection attacks, use placeholders for variable parameters, and bind 
the parameter to a specific data type before issuing the statement. This method 
forces the query data out of-band, preventing the parameter from being interpreted 
as an SQL statement, regardless of the content. Parameterized queries can be 
implemented in a number of ways by a data access module or the database. One 
common form of parameterized query is a prepared statement, which was 
originally used to improve the performance of SQL databases. Prepared statements 
allow a query to be compiled once and then issued multiple times with different 
parameters, thus eliminating the overhead of compilation for repeated queries. This 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1070 
compilation also results in binding query parameters to specific data types to assist in 
optimizing the query execution plan. A parameterized query doesn't need to be 
implemented as a prepared statement; however, you can treat both as fairly 
interchangeable for security purposes. Here's an example of a simple parameterized 
query string: 
"SELECT * FROM table1 WHERE val1 = ?" 
The ? character is used as a placeholder for a parameter, although the exact 
placeholder can vary from implementation to implementation. The query 
parameterization usually requires parameter type information, but it can also vary 
between implementations. Because parameterization often includes compilation of 
the statement, you want to focus on the impact of that process. Specifically, you need 
to understand how compilation places certain restrictions on what statements can be 
accepted. Take a look at the following statement: 
"SELECT * FROM " + tableName + " WHERE value = ?" 
This statement is still vulnerable to SQL injection if users supply input for the 
tableName parameter; however, the developer might have no other choice for a 
dynamic table name. When the statement is compiled, all structural elements of the 
query must be present in the parameterized query, including table names, column 
names, and any SQL directives. Effectively, this means parameterized queries can 
substitute parameters for only a WHERE, SET, or VALUES clause. These three clause 
cover most SQL queries but miss a number of more complex cases. For example, a 
query with a WHERE clause might depend on certain values being present. A developer 
could implement it as follows: 
"SELECT * FROM table WHERE name = ?" 
    + (param1 != NULL ? " AND col1 LIKE '" + param1 + "'" : "") 
    + (param2 != NULL ? " AND col2 LIKE '" + param2 + "'" : "") 
    + (param3 != NULL ? " AND col3 LIKE '" + param3 + "'" : ""); 
The developer wants to alter the structure of the WHERE clause in this case, depending 
on the content of certain parameters. There are safer ways to prepare this query, but 
the preceding approach is actually quite popular. You often see statements like this in 
code that allows users to search some portion of a database. Here's a more 
appropriate form in a parameterized query: 
SELECT * FROM table WHERE name = ? 
    AND (? <> NULL AND col1 LIKE ?) ... 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1071 
This statement is a safe version of the earlier query. However, some problems can't 
be solved with parameterized queries. The sort order and sort columns are also 
structural elements because they affect how the query planner compiles a statement. 
Here's an example: 
SELECT * FROM table ORDER by col1, col2 ASC 
You can't substitute col1, col2, or ASC with a parameter (?) in this statement, so 
changing the sort columns and order requires dynamic SQL or some interesting SQL 
acrobatics. 
Stored Procedures 
A stored procedure is a lot like a prepared statement; both were intended to 
improve performance by precompiling statements and issuing them as a separate 
operation. They also add several features that prepared statements lack. Stored 
procedures are compiled and stored in the database with a persistent name, so they 
exist indefinitely. They can also introduce procedural language constructs into the 
database query language, such as loops and branches. 
Stored procedures have only three potential security issues. First, is the query called 
securely? Check whether the parameters are bound as they should be or whether the 
procedure is called like this: 
"SELECT xp_myquery('" + userData + "')" 
This example is vulnerable to standard SQL injection if the userData variable is 
attacker malleable. This mistake might seem unlikely, but it does happen often 
enough. The usual response from developers is that they thought the stored 
procedure handled that. So keep your eyes open for any stored procedures that aren't 
called through a bound parameter interface. 
Second, are dynamic queries used inside the stored procedure? This usually happens 
because the developer wants to perform a query that can't be precompiled, as with 
parameterized queries. So you need to watch for any stored procedures that call EXEC, 
EXECUTE, or OPEN on a string argument. When you trace them back, generally you find 
dynamically generated SQL. Fortunately, you can identify these locations quickly with 
a simple regex search. 
The third issue isn't database specific, but a problem could happen when stored 
procedures are implemented in other languages. Many databases allow extension 
modules, and these modules might have vulnerabilities native to the language they're 
implemented in. For example, an extension written in C++ could expose memory 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1072 
management vulnerabilities accessible via user-supplied SQL parameters. In these 
cases, you need to audit the extension modules to be certain they contain no 
vulnerabilities. 
Second Order Injection 
Second order injection refers to SQL injection resulting from data in the database 
itself; it occurs when database fields are used to generate a dynamic query. The root 
of this problem is that a complex application might make determining the exact 
source of data difficult. For instance, say you have a database that backs a 
Web-based bulletin board. The following parameterized query would allow users to 
update the list of bulletin board memberships: 
UPDATE users SET boardlist = ? WHERE user = ? 
Each board has a numeric ID, so the boardlist column contains strings such as the 
following: 1, 15, 8, 23. On its own, this parameterized query is structured correctly 
and safe from injection. However, there's no point in putting data in a database if you 
don't use it. Here's a query you might use to access this data: 
"SELECT board_id, board_name FROM boards, users 
    WHERE user = ? AND board_id IN (" + boardList + ")" 
The boardList variable is a string retrieved from an earlier database query. The 
problem is that the string was originally supplied from user input and could contain 
malicious characters. An attacker can exploit this by first updating the board_id field 
and then triggering the unsafe query on this field. 
These types of injection vulnerabilities are relatively common, particularly in stored 
procedures. However, they are often hard to detect because the vulnerability results 
from two or more seemingly unrelated code paths. This also makes automated 
analysis and fuzzing techniques almost useless. The best approach is to identify all 
dynamic queries. Then treat all database input fields as hostile until you can prove 
otherwise. In some cases, you might not be able to determine that database input is 
safe. The database tier might receive input from sources other than the application 
you're reviewing, so you might have to consider it a vulnerability of unknown 
potential risk. 
Black Box Testing for SQL Injection 
Testing for SQL injection vulnerabilities from a black-box perspective isn't 
difficult. The first thing you need is a proxy specifically designed to facilitate 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1073 
Web security testing. The Java-based application Paros works well and is 
available free from www.parosproxy.org. ImmunitySec offers SPIKE proxy, 
written by the formidable Dave Aitel. It's also available free at 
www.immunitysec.com. 
After downloading one of these tools, you need to set it up so that you can 
intercept requests coming from your Web browser. Ultimately, you want to 
be able to intercept an outgoing request before it gets to the server, modify 
the request, and send it on its way. This procedure might require a little 
experimentation or documentation reading, but it should be straightforward 
to figure out. 
After you've gotten the hang of intercepting requests, it's time to start 
testing your target Web site. You want to walk through the Web site's 
functionality in a systematic way, so you don't get lost or forget which 
ground you've covered. To accomplish this you'll need to come up with a 
simple way to organize your approach to the site. 
Basically, you use the site like a normal user, except you intercept legitimate 
traffic and change it slightly to insert SQL metacharacters. So you want to 
intercept every GET request with a query string, every POST request, and 
every cookie, and in each variable, you try to insert special characters. A safe 
bet is to use the single quote ('), as it usually does the trick. Test only one 
variable at a time; you don't want to accidentally put in two single quotes 
that cancel each other out and make a legitimate SQL query. 
Be sure to focus on variables that aren't user controlled, and definitely pick 
variables that look as though they contain only numeric fields, such as IDs or 
dates. Web application developers who are otherwise diligent about 
preventing SQL tampering often overlook these variables. 
Primarily, you're looking for any kind of error condition. It could be anything 
from a database error being displayed onscreen to a 500 error from the Web 
server to a subtle change in the page's contents. 
When you get an error that you can re-create, you can do a few things to 
determine whether it's caused by a SQL injection vulnerability. One 
technique is to double the single quote (that is, ''), which usually escapes it 
to the back-end database. If a single quote causes an error but two single 
quotes don't, you're probably on to something. 
Another method that's worth trying is short-circuiting SELECT queries. If 
you're injecting data into a query in a string parameter, try submitting a 
variable like this: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1074 
' or 1= 
If you're lucky, it will create a SQL query like the following on the back end: 
SELECT * from users where password='' or 1= 
The or 1= phrase simply selects every row in the table. The ; denotes the end 
of the SQL query, and the -- characters indicate that the back-end database 
should ignore the rest of the line. You can also try %00 to end a query. 
After you find an error, your first goal is to determine whether it appears to 
be a SQL injection problem by trying various requests. When you determine 
that it's SQL related, you can start to explore the potential ramifications of 
the exposure, if you're so inclined. There are several good papers on 
advanced SQL injection and blind SQL injection that you should read for 
ideas on how to proceed. Be sure to visit these sites for more information: 
www.nextgenss.com, www.spidynamics.com, and www.cgisecurity.com. 
OS and File System Interaction 
During a Web application review, pay special attention to every interaction with the 
operating system and file system, especially when user-supplied input is involved. 
These locations are where developers run a high risk of creating security 
vulnerabilities in otherwise safe high-level languages. When reviewing Web 
applications, be sure to examine the types of interactions covered in the following 
sections. Most of these issues are related to vulnerable metacharacter handling, so 
refer to Chapter 8(? [????.]) for more information. 
Execution 
CGI scripts often rely on external programs to perform part of the application 
processing. Developers often make a security-relevant mistake in calling a separate 
program, especially when user input is involved in the program's arguments. Here's a 
simple example of a vulnerable Perl program: 
#!/usr/bin/perl 
print "Content-type: text/html\n\n"; 
$dir = $ENV{'QUERY_STRING'}; 
system("ls -laF $dir"); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1075 
This program takes a directory name as the query string and attempts to print a 
directory listing to users. Attackers can provide any number of shell metacharacters 
for the directory and issue their own commands. For example, supplying /tmp;echo hi 
for $dir would cause the preceding Perl program to do the following: 
system("ls -laF /tmp ; echo hi"); 
If the external program is being run in a fashion that isn't malleable, the developer 
might still be in trouble. You should also examine the program that's running to make 
sure it doesn't have any special processing functionality. For example, the UNIX mail 
program looks for the escape sequence ~!command. If a Web application uses that 
program to send mail, it might be exploitable if the user supplies input so that the mail 
contains that escape sequence. 
Chapter 18(? [????.]) goes into more depth on this topic, but remember that several 
powerful high-level languages provide multiple ways for developers to spawn a 
subprocess. Often it's possible to make applications run arbitrary commands in places 
where the developer intended only to perform an operation such as opening a file. 
Path Traversal 
If the application uses user-supplied input in constructing a pathname, this 
constructed path could be vulnerable to a path traversal attack, also known as a path 
canonicalization attack. For example, consider the following VBScript ASP excerpt: 
filename = "c:\temp\" & Request.Form("tempfile") 
Set objTextStream = objFSO.OpenTextFile(filename,1) 
Response.Write "Contents of the file:" & objTextStream.ReadAll 
If users supply a tempfile parameter with path traversal directory components, they 
can trick the Web application into displaying files in other directories. For example, a 
tempfile parameter of ..\boot.ini causes the application to open the 
c:\temp\..\boot.ini file and display it. 
NUL Byte 
Many higher-level languages have their own underlying implementation of a string 
data type, and more often than not, these strings can contain a character with the 
value of 0, or the NUL character. When these strings are passed on to the OS, the NUL 
byte is interpreted as terminating the string. This can be useful to attackers 
attempting to manipulate a Web application that's interacting with the OS or file 
system. 
Programmatic SSI 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1076 
Pay attention to locations where programmatic server-side includes are performed. 
Typically, they're used in a page that needs to include the contents of another script 
but determines which script to include at runtime. If you can manipulate the included 
script's filename, you can potentially read in files that you wouldn't normally have 
access to. In general, you can't read outside the Web root, but if you can read code 
you shouldn't have access to or read in files in WEB-INF, you can discover some useful 
information. 
Here's an example of a vulnerable JSP: 
' 