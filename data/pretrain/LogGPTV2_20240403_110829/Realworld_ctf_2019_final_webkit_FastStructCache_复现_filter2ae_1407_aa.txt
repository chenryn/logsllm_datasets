# Realworld ctf 2019 final webkit FastStructCache 复现
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
学习 Webkit 的漏洞利用，19年realworld ctf final 出了一道 webkit 的题目 `FastStructCache`,
这里记录一下复现的过程。
完整的漏洞利用链需要逃逸webkit的沙箱，我手上木有mac，虚拟机装mac测试又是各种的问题，各种倒腾之后放弃了后半部的沙箱逃逸的利用，暂时只做了前面
jsc 部分的利用分析，等什么时候搞台mac之后回过头来看 🙁
## 环境配置
题目的原始文件可以从[这里](https://github.com/5lipper/ctf/tree/master/rwctf19-final/FastStructureCache)
下载，复现的环境是在 ubuntu 1804 下，
webkit 版本是 `commit 5ed80f740ac7b67ca9ddc43aae401bacc685c5e4`,
下载源码之后打上对应的patch然后编译出 jsc 就行了。但是我编译 debug 版本的时候跑不起来，会提示structureID
错误之类的，编译成Release版本就没有问题。调试用的 gdb
我自己复现用到的文件都放在了[这里](https://github.com/rtfingc/cve-repo/tree/master/0x06-realworldctf2019-final-faststructcache-side-effect),
包括存在漏洞和没有漏洞的两个版本，主要是方便自己运行比较。
## 漏洞分析
###  patch 分析
好的，我们看看给出的patch, 题目在`Source/JavaScriptCore/runtime`
下新创建了两个文件`FastStructureCache.cpp`和`FastStructureCache`,
添加了一个名为`FastStructureCache` 的类
    --- /dev/null
    +++ b/Source/JavaScriptCore/runtime/FastStructureCache.cpp
    @@ -0,0 +1,10 @@
    +#include "FastStructureCache.h"
    +
    +namespace JSC {
    +
    +FastStructureCache::FastStructureCache(VM& vm, Structure* structure)
    +    : JSNonFinalObject(vm, structure)
    +{
    +}
    +
    +}
这个类只有一个`createStructureFastPath` 方法, 初始化的时候会创建`fastCacheSizeMax == 16` 个
`Structure` 对象，保存在`fastCacheStructure` 里面，后面每次调用`createStructureFastPath`
直接就从这个cache 里面拿一个，如果拿完了的话就用`Structure::create` 新创建一个。
    --- /dev/null
    +++ b/Source/JavaScriptCore/runtime/FastStructureCache.h
    //...
    +class FastStructureCache final : public JSNonFinalObject {
    +public:
    +    using Base = JSNonFinalObject;
    +    static Structure** fastCacheStructure;
    +    static uint64_t fastCacheSizeMax;
    +    static uint64_t fastCacheSizeUsed;
    +
    +    static Structure* createStructureFastPath(VM& vm, JSGlobalObject* globalObject, JSValue prototype, const TypeInfo& typeInfo, const ClassInfo* classInfo)
    +    {    // 初始化 --> fastCacheSizeMax == 16
    +        if (fastCacheStructure == NULL) {
    +            fastCacheStructure = new Structure*[fastCacheSizeMax];
    +            uint64_t idx = 0;
    +            while (idx setPrototypeWithoutTransition(vm, prototype);
    +            return_value->setGlobalObject(vm, globalObject);
    +            fastCacheSizeUsed += 1;
    +            return return_value;
    +        }
    +        return Structure::create(vm, globalObject, prototype, typeInfo, classInfo);
    +    }
    +
    +protected:
    +    FastStructureCache(VM&, Structure* structure);
    +};
`RegExpObject` 和`RegExpPrototype` 两个对象`createStructure`
都换成了用`FastStructureCache::createStructureFastPath` 来
    --- a/Source/JavaScriptCore/runtime/RegExpObject.h
    +++ b/Source/JavaScriptCore/runtime/RegExpObject.h
    //...
     class RegExpObject final : public JSNonFinalObject {
     //...
    static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
         {
    -        return Structure::create(vm, globalObject, prototype, TypeInfo(RegExpObjectType, StructureFlags), info());
    +        return FastStructureCache::createStructureFastPath(vm, globalObject, prototype, TypeInfo(RegExpObjectType, StructureFlags), info());
         }
    //........................................................................................
    --- a/Source/JavaScriptCore/runtime/RegExpPrototype.cpp
    +++ b/Source/JavaScriptCore/runtime/RegExpPrototype.cpp
    +Structure** FastStructureCache::fastCacheStructure = NULL;
    +uint64_t FastStructureCache::fastCacheSizeMax = 16;
    +uint64_t FastStructureCache::fastCacheSizeUsed = 0;
    //........................................................................................
    --- a/Source/JavaScriptCore/runtime/RegExpPrototype.h
    +++ b/Source/JavaScriptCore/runtime/RegExpPrototype.h
         static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
         {
    -        return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
    +        return FastStructureCache::createStructureFastPath(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
         }
总的来说就是预先分配了16个 `Structure` 对象，`RegExpPrototype` 和 `RegExpObject` 要创建的时候可以从里面拿。
###  漏洞分析
漏洞就发生在`FastStructureCache::createStructureFastPath` 的实现上啦，在获取`Structure`
对象的时候, 直接用`setPrototypeWithoutTransition` 设置`prototype`
    return_value->setPrototypeWithoutTransition(vm, prototype);
     return_value->setGlobalObject(vm, globalObject);
原版本的`Structure::create`
实现在[`Source/JavaScriptCore/runtime/StructureInlines.h#L39`](https://github.com/WebKit/webkit/blob/5ed80f740ac7b67ca9ddc43aae401bacc685c5e4/Source/JavaScriptCore/runtime/StructureInlines.h#L39)
上
    inline Structure* Structure::create(VM& vm, JSGlobalObject* globalObject, JSValue prototype, const TypeInfo& typeInfo, const ClassInfo* classInfo, IndexingType indexingModeIncludingHistory, unsigned inlineCapacity)
    {
        ASSERT(vm.structureStructure);
        ASSERT(classInfo);
        if (auto* object = prototype.getObject()) {
            ASSERT(!object->anyObjectInChainMayInterceptIndexedAccesses(vm) || hasSlowPutArrayStorage(indexingModeIncludingHistory) || !hasIndexedProperties(indexingModeIncludingHistory));
            object->didBecomePrototype();
        }
        Structure* structure = new (NotNull, allocateCell(vm.heap)) Structure(vm, globalObject, prototype, typeInfo, classInfo, indexingModeIncludingHistory, inlineCapacity);
        structure->finishCreation(vm);
        return structure;
    }
在创建的时候会检查传进来的 `prototype` 是不是一个对象，如果是的话，需要调用`didBecomePrototype`
给这个对象设置一个flags，表示它已经是某个对象的`prototype` 了，如`a=[1.1] ; b = [1.1];` ，`a.__proto__
= b` 的时候， b 就会调用`didBecomePrototype` ， 它的实现如下:
    //..  Source/JavaScriptCore/runtime/JSObjectInlines.h
    inline void JSObject::didBecomePrototype()      
    {                                               
        setPerCellBit(true);                        
    }                                               
    // Source/JavaScriptCore/runtime/JSCellInlines.h
    inline void JSCell::setPerCellBit(bool value)                                       
    {                                                                                   
        if (value == perCellBit())                                                      
            return;                                                                                                                                                 
        if (value)                                                                      
            m_flags |= static_cast(TypeInfoPerCellBit);      
        else                                                                            
            m_flags &= ~static_cast(TypeInfoPerCellBit);     
    }
    // Source/JavaScriptCore/runtime/JSTypeInfo.h
    static constexpr unsigned TypeInfoPerCellBit = 1 didBecomePrototype();
    //.....
    m_regExpPrototype.set(vm, this, RegExpPrototype::create(vm, this, RegExpPrototype::createStructure(vm, this, m_objectPrototype.get()))); 
    m_regExpStructure.set(vm, this, RegExpObject::createStructure(vm, this, m_regExpPrototype.get()));                                       
    m_regExpMatchesArrayStructure.set(vm, this, createRegExpMatchesArrayStructure(vm, this));    
    }
我们具体调试看看, 在`FastStructureCache::createStructureFastPath` 下个断点，跟一下内存
    b FastStructureCache::createStructureFastPath
找到 `FastCacheStructure` 保存的地方，它是在 heap 内存上, 创建了 16 个 `Structure` 对象
    pwndbg> vmmap 0x5555555a6960
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x555555594000     0x5555555b5000 rw-p    21000 0      [heap]
    pwndbg> x/20gx 0x5555555a6960
    0x5555555a6960: 0x00007fffb26f2060      0x00007fffb26f20d0
    0x5555555a6970: 0x00007fffb26f2140      0x00007fffb26f21b0
    0x5555555a6980: 0x00007fffb26f2220      0x00007fffb26f2290
    0x5555555a6990: 0x00007fffb26f2300      0x00007fffb26f2370
    0x5555555a69a0: 0x00007fffb26f23e0      0x00007fffb26f2450
    0x5555555a69b0: 0x00007fffb26f24c0      0x00007fffb26f2530
    0x5555555a69c0: 0x00007fffb26f25a0      0x00007fffb26f2610
    0x5555555a69d0: 0x00007fffb26f2680      0x00007fffb26f26f0
    0x5555555a69e0: 0x0000000000000000      0x000000000000e621
    0x5555555a69f0: 0x0000000000000000      0x0000000000000000
第一次调用`RegExpPrototype::createStructure` , 会拿到第一个`Structure`,
也就是`0x00007fffb26f2060` 这个地址,
每个变量对应的位置可以看看`Source/JavaScriptCore/runtime/Structure.h`
    pwndbg> x/20gx 0x00007fffb26f2060
    0x7fffb26f2060: 0x0100000000002e74      0x0100170000007a64
                                         //m_globalObject
    0x7fffb26f2070: 0x0000001c00000000      0x00007fffb26e0000
                   //m_prototype
    0x7fffb26f2080: 0x00007fffb26d8000      0x0000000000000000
    0x7fffb26f2090: 0x0000000000000000      0x0000000000000000
                   // m_classInfo
    0x7fffb26f20a0: 0x00007ffff7d95b80      0x0000000000000001
    0x7fffb26f20b0: 0x00007fffb26cc060      0x0000000000000003
    0x7fffb26f20c0: 0x243e606800000074      0x0000000000000000
    0x7fffb26f20d0: 0x0100000000002e74      0x0100170000007baa
创建的时候传递给`RegExpPrototype` 的`prototype` 是`m_objectPrototype`,
它默认是设置了`TypeInfoPerCellBit` 的
    pwndbg> x/20gx 0x00007fffb26d8000                                                                     
    0x7fffb26d8000: 0x01801700000068d5      0x00007fe00dcf4088                                           
    0x7fffb26d8010: 0x0188240100007056      0x00007fe00dcec208
然后是`RegExpObject::createStructure` ， 它会拿到第二个`Structure`
    pwndbg> x/20gx 0x00007fffb26f20d0
    0x7fffb26f20d0: 0x0100000000002e74      0x0100170000007baa
                                        //m_globalObject
    0x7fffb26f20e0: 0x0000002000000000      0x00007fffb26e0000
                   //m_prototype
    0x7fffb26f20f0: 0x00007fffb26d8020      0x0000000000000000
    0x7fffb26f2100: 0x0000000000000000      0x0000000000000000
                    //m_classInfo