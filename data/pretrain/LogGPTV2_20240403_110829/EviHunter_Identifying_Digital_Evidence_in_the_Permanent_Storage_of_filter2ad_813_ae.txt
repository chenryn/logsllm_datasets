cation analysis, we may uncover patterns within an intent. We
can include these fine-grained patterns into the regular expression
 in a dynamic file path. When matching file paths, we can
consider such patterns via regular expressions.
When our tool identifies files on a suspect’s device that contain
evidentiary data, a forensics investigator still needs to retrieve,
decode, or reconstruct the evidentiary data from the files. If a file is
a text file, SQLite database, or SharedPreferences, then retrieving
data from the file is relatively easy. However, for a binary file or an
encrypted file, a forensic investigator needs the format of the binary
file or the encryption method to retrieve the evidentiary data. Our
current tool does not support the format analysis of binary files.
It is an interesting future work to extend EviHunter to track the
format of a binary file.
6 RELATED WORK
6.1 Digital Forensics for Android
6.1.1 Permanent-Storage Forensics. Permanent-storage forensics
for Android is still an underdeveloped research area. Most exist-
ing studies and tools on this topic simply leverage either manual
analysis or keyword search. As a result, they can only analyze a
small number of apps or construct an inaccurate AED. Our work
represents the first one to perform automated permanent-storage
forensic analysis for Android via program analysis.
Manual analysis: Some studies [9–11, 46] manually analyzed apps
in order to construct an AED. Specifically, they install apps on an
Android device or run the apps in a sandbox environment (e.g.,
Android Emulator [4] and YouWave [8]). Then, they retrieve an
image of the file system from the device or the sandbox environ-
ment. Specifically, the file system image can be retrieved from a
device using the Android Debug Bridge. The file system image can
be either logical or physical, where a physical image could also
include the deleted files that are not overwritten yet. By running
apps under a sandbox environment, researchers have control over
the file system and main memory, so they can also retrieve im-
ages of the RAM and NAND flash memories. After obtaining a file
system image, they manually examine the files generated by the
apps, e.g., analyzing the files under a directory /data/data//files/, where  refers to the package name of
the app to be analyzed.
Since manual analysis is time-consuming, error-prone, and costly,
these studies often only analyzed a very small number of apps. In
particular, they often focused on instant messaging apps (e.g., What-
sApp [11], WeChat [46]) and maps navigation apps [31]. They found
that instant messaging apps often save messages (i.e., a certain type
of text input) on the local file system, while maps navigation apps
collect GPS location history and post on databases.
Keyword search: Several commercial tools (e.g., Cellebrite UFED [2],
XRY [7], and FTK [3]) are available to analyze the files on a device.
Specifically, given a device, these tools first retrieve an image of
the device’s file system. Then, these tools provide Graphical User
Interface (GUI) for forensic investigators to search files that could
contain evidentiary data. However, the search is only performed by
keyword matching or regular expression matching, which clearly
has limitations. For instance, if a file contains GPS data but does
not have the regular expressions or keywords such as GPS, latitude,
or longitude, then the file will be incorrectly labeled as a file that
does not contain evidentiary data. Indeed, studies [23] showed that
tools based on keyword matching can only identify a small fraction
of files that could store evidentiary data.
6.1.2 Memory Forensics. Several tools [37–40] were recently de-
veloped for memory forensics. For instance, DSCRETE [40] au-
tomatically renders data structure contents in memory images.
The intuition is that the app that defines a data structure often in-
cludes rendering and interpretation logic for the data structure, and
DSCRETE leverages such logic. VCR [38] is a memory forensics tool
that recovers all photographic evidence an Android device’s camera
produces. GUITAR [37] is a memory forensics tool to automatically
reconstruct apps’ GUIs from a memory image. However, GUITAR
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Chris Chao-Chun Cheng, Chen Shi, Neil Zhenqiang Gong, and Yong Guan
cannot reconstruct an app’s previous screens. RetroScope [39] ad-
dressed this limitation by leveraging two observations: (1) app data
on previous screens stay longer than the corresponding GUI data
structures in memory, and (2) each app can redraw its screens when
receiving commands from the Android framework. These tools are
different from ours as our tool is designed for permanent-storage
forensics instead of memory forensics.
6.1.3 Active Forensics. Several studies [24, 26, 34, 47] proposed
active forensics. Specifically, they proposed to design monitoring
apps, which are installed on a device in advance. Then, the app
can collect the forensic information when the device uses other
apps. For instance, DroidWatch [22] monitors the data collected and
generated by other apps on the device through ContentObserver
and Broadcast Receiver. Lee et al. [26] designed a monitoring app
that leverages system APIs to observe data including device ID,
MAC address, and running processes. WebCapsule [34] is a light-
weight and portable forensic engine for web browsers. WebCapsule
needs to be installed together with a web browser and records all
non-deterministic inputs to the web rendering engine. The goal of
WebCapsule is to reconstruct web security attacks, e.g., phishing
attacks. A key challenge for active forensics is that it is almost im-
possible to install the monitoring app on a suspect’s device before
a crime happened. Our EviHunter is designed for passive forensics,
i.e., we analyze a suspect’s device after a crime has happened.
6.2 Static Data Flow Analysis for Android
Improving the security and privacy of Android has attracted lots
of attention in the security community. A large number of tools
have been developed to detect sensitive data flows between sources
and sinks in Android apps. For instance, dynamic analysis tools
include TaintDroid [18], TaintART [41], and Malton [48]. Example
static analysis tools include SCanDroid [19], Scandal [25], Androi-
dLeaks [20], LeakMiner [49], CHEX [30], FlowDroid [12], Aman-
Droid [45], DroidSafe [21], R-Droid [13], IccTA [28], and Horn-
Droid [15]. Reaves et al. [36] performed a systematic comparative
study about a large number of tools. Both dynamic analysis and
static analysis can be used for permanent-storage forensics. For in-
stance, Xu et al. [47] designed a dynamic analysis tool by extending
the Android platform’s memory heap space to track information
flow and report evidentiary data once a sink method is invoked.
EviHunter leverages static analysis. Static analysis of Android
apps relies on a comprehensive model to approximate Android’s
runtime behavior. CHEX [30] was the first static analysis tool to
consider different types of entry points of an Android app. Flow-
Droid [12] models an app’s life cycle and creates a dummy main
method for an app, which was also adopted by AmanDroid [45] and
R-Droid [13]. Many tools manually summarized the data flows for
some commonly used system APIs while ignoring the rest of them
for efficiency consideration. Specifically, with the summarized data
flows, a tool does not need to include the framework code, which
is more efficient. DroidSafe [21] proposed a technique to model the
Android framework, which was also used by R-Droid [13]. However,
Reaves et al. [36] found that DroidSafe is not scalable to real-world
apps and fails to analyze them. Several tools [12, 21, 28, 30, 45] also
considered inter-component communications, which can increase
the precision of the analysis.
A key difference between these static analysis tools and Evi-
Hunter is that EviHunter considers both the types of sensitive data
and file paths where the data are written to. Specifically, the tools
that were designed to improve the security and privacy of Android
focused on identifying what sensitive data (e.g., locations, contacts,
device ID) are leaked to which types of sinks (e.g., network socket,
file system, device’s screen). Our EviHunter focuses on the file sys-
tem as a type of sink and further identifies the files where data are
written to. This key difference introduces several challenges: 1) we
need to design a new tag that contains both evidentiary data and
file path, 2) we need to design new propagation rules to update tags,
especially for file paths, and 3) we also need to identify new source
methods for file paths. EviHunter addresses these challenges.
7 CONCLUSION AND FUTURE WORK
In this work, we design EviHunter to automatically identify the
files on an Android smartphone that could contain evidentiary data.
EviHunter first builds an App Evidence Database for a large number
of apps via static data flow analysis. Then, EviHunter matches the
files on a smartphone against those in the AED to identify the
files containing evidentiary data. EviHunter extends the existing
static analysis tools that were designed for security and privacy
analysis of Android apps with respect to 1) tags associated with
variables, 2) propagation rules to update tags, 3) data-flow summary
of commonly used system APIs, and 4) sources and sinks. Our
evaluations on both benchmark apps and real-world apps show
that EviHunter can precisely and accurately identify the evidentiary
data that an app could save to file systems and the files where the
data are written to. Future work includes modeling inter-component
communications and frameworks for file path construction as well
as extending EviHunter for fine-grained privacy analysis.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their insight-
ful feedback. This work was funded by the Center for Statistics and
Applications in Forensic Evidence (CSAFE) through Cooperative
Agreement #70NANB15H176 between NIST and Iowa State Uni-
versity, as well as partially by NSF under grants No. CNS-1527579,
CNS-1619201, and CNS-1730275, and Boeing Company.
REFERENCES
[1] 2017. DroidBench. https://blogs.uni-paderborn.de/sse/tools/droidbench/
[2] 2018. Cellebrite UFED Ultimate.
https://www.cellebrite.com/en/products/
[5] 2018. Sources and Sinks. https://github.com/MobileDeviceForensics/EviHunter
[6] 2018. SRSRoot. http://www.srsroot.com
[7] 2018. XRY - Extract. https://www.msab.com/products/xry/
[8] 2018. YouWave. https://developer.android.com/studio/run/emulator.html
[9] Mohammed I Al-Saleh and Yahya A Forihat. 2013. Skype forensics in android
devices. International Journal of Computer Applications 78, 7 (2013).
[10] Tadani Alyahya and Firdous Kausar. 2017. Snapchat Analysis to Discover Digital
Forensic Artifacts on Android Smartphone. Procedia Computer Science 109 (2017).
[11] Cosimo Anglano. 2014. Forensic analysis of WhatsApp Messenger on Android
smartphones. Digital Investigation 11, 3 (2014).
[12] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. Flow-
Droid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint
Analysis for Android Apps. In PLDI.
[3] 2018.
Forensic Toolkit (FTK).
https://accessdata.com/products-services/
[4] 2018. Run Apps on the Android Emulator. https://developer.android.com/studio/
ufed-ultimate/
forensic-toolkit-ftk
run/emulator.html
EviHunter
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
[13] Michael Backes, Sven Bugiel, Erik Derr, Sebastian Gerling, and Christian Hammer.
2016. R-Droid: Leveraging Android App Analysis with Static Slice Optimization.
In AsiaCCS.
[14] Evan Bush. 2017. Suspects’ phones led Northwest investigators to carcasses in
one of the biggest poaching cases they’ve ever seen. https://goo.gl/nUQyNA
[15] Stefano Calzavara, Ilya Grishchenko, and Matteo Maffei. 2016. HornDroid: Prac-
tical and Sound Static Analysis of Android Applications by SMT Solving. In
EuroS&P.
[16] Matthew Dering Somesh Jha Patrick McDaniel Damien Octeau, Daniel Luchaup.
2015. Composite Constant Propagation: Application to Android Inter-Component
Communication Analysis. In ICSE.
[17] F. Daryabar, M. H. Tadayon, A. Parsi, and H. Sadjadi. 2016. Automated analysis
method for forensic investigation of cloud applications on Android. In IST.
[18] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung,
Patrick McDaniel, and Anmol N. Sheth. 2010. TaintDroid: An Information-flow
Tracking System for Realtime Privacy Monitoring on Smartphones. In OSDI.
[19] Adam P Fuchs, Avik Chaudhuri, and Jeffrey S Foster. 2009. Scandroid: Automated
security certification of android. Technical Report.
[20] Clint Gibler, Jonathan Crussell, Jeremy Erickson, and Hao Chen. 2012. Androi-
dLeaks: Automatically Detecting Potential Privacy Leaks in Android Applications
on a Large Scale. In TRUST.
[21] Michael I Gordon, Deokhwan Kim, Jeff H Perkins, Limei Gilham, Nguyen Nguyen,
and Martin C Rinard. 2015. Information Flow Analysis of Android Applications
in DroidSafe.. In NDSS.
[22] Justin Grover. 2013. Android forensics: Automated data collection and reporting
from a mobile device. Digital Investigation 10 (2013).
[23] Hans Henseler. 2017. Finding digital evidence in mobile devices. In DFRWS.
[24] Filip Karpisek, Ibrahim Baggili, and Frank Breitinger. 2015. WhatsApp network
forensics: Decrypting and understanding the WhatsApp call signaling messages.
Digital Investigation 15 (2015).
[25] Jinyung Kim, Yongho Yoon, Kwangkeun Yi, Junbum Shin, and SWRD Center.
2012. ScanDal: Static analyzer for detecting privacy leaks in android applications.
MoST 12 (2012).
[26] Xinfang Lee, Chunghuang Yang, Shihjen Chen, and Jainshing Wu. 2009. Design
and implementation of forensic system in Android smart phone. In The 5th Joint
Workshop on Information Security.
[27] Hannah Leone. 2017. GPS evidence can be used in Aurora KFC shooting case.
https://goo.gl/28rGnN
[28] Li Li, Alexandre Bartel, Tegawendé F. Bissyandé, Jacques Klein, Yves Le Traon,
Steven Arzt, Siegfried Rasthofer, Eric Bodden, Damien Octeau, and Patrick Mc-
Daniel. 2015. IccTA: Detecting Inter-component Privacy Leaks in Android Apps.
In ICSE.
[29] Mark Lohrum. 2014.
Live imaging an Android device Not as hard as it
sounds if you break it down. https://freeandroidforensics.blogspot.kr/2014/08/
live-imaging-android-device.html
[30] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. CHEX:
Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In
CCS.
[31] Stefan Maus, Hans Höfken, and Marko Schuba. 2011. Forensic analysis of geodata
in android smartphones. In International Conference on Cybercrime, Security and
Digital Forensics.
[32] DECLAN MCCULLAGH. 2010. Police Blotter: Web searches lead to murder
conviction. https://goo.gl/HqJ6h4
[33] J. E. R. McMillan, W. B. Glisson, and M. Bromby. 2013. Investigating the Increase
in Mobile Phone Evidence in Criminal Activities. In HICSS.
[34] Christopher Neasbitt, Bo Li, Roberto Perdisci, Long Lu, Kapil Singh, and Kang Li.
2015. WebCapsule: Towards a Lightweight Forensic Engine for Web Browsers.
In CCS.
[35] Siegfried Rasthofer, Steven Arzt, and Eric Bodden. 2014. A Machine-learning
Approach for Classifying and Categorizing Android Sources and Sinks.. In NDSS.
[36] Bradley Reaves, Jasmine Bowers, Sigmund Albert Gorski III, Olabode Anise, Rahul
Bobhate, Raymond Cho, Hiranava Das, Sharique Hussain, Hamza Karachiwala,
Nolen Scaife, Byron Wright, Kevin Butler, William Enck, and Patrick Traynor.
2016. ∗Droid: Assessment and Evaluation of Android Application Analysis Tools.
ACM Comput. Surv. (2016).
[37] Brendan Saltaformaggio, Rohit Bhatia, Zhongshu Gu, Xiangyu Zhang, and
Dongyan Xu. 2015. GUITAR: Piecing Together Android App GUIs from Memory
Images. In CCS.
[38] Brendan Saltaformaggio, Rohit Bhatia, Zhongshu Gu, Xiangyu Zhang, and
Dongyan Xu. 2015. VCR: App-Agnostic Recovery of Photographic Evidence
from Android Device Memory Images. In CCS.
[39] Brendan Saltaformaggio, Rohit Bhatia, Xiangyu Zhang, Dongyan Xu, and Golden
G. Richard III. 2016. Screen After Previous Screens: Spatial-Temporal Recreation
of Android App Displays from Memory Images. In Usenix Security Symposium.
[40] Brendan Saltaformaggio, Zhongshu Gu, Xiangyu Zhang, and Dongyan Xu. 2014.
DSCRETE: Automatic Rendering of Forensic Information from Memory Images
via Application Logic Reuse. In Usenix Security Symposium.
[41] Mingshen Sun, Tao Wei, and John C.S. Lui. 2016. TaintART: A Practical Multi-level
Information-Flow Tracking System for Android RunTime. In CCS.
[42] United States v. Brendt A. Christensen. 2017. Criminal Complaint, United States
District Court, Central District of Illinois. https://goo.gl/b81btj
[43] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie Hendren, Patrick Lam, and
Vijay Sundaresan. 1999. Soot - a Java Bytecode Optimization Framework. In
CASCON.
[44] Nicolas Viennot, Edward Garcia, and Jason Nieh. 2014. A Measurement Study of
Google Play. In SIGMETRICS.
[45] Fengguo Wei, Sankardas Roy, Xinming Ou, and Robby. 2014. Amandroid: A
Precise and General Inter-component Data Flow Analysis Framework for Security
Vetting of Android Apps. In CCS.
[46] Songyang Wu, Yong Zhang, Xupeng Wang, Xiong Xiong, and Lin Du. 2017.
Forensic analysis of WeChat on Android smartphones. Digital Investigation 21
(2017).
[47] Zhen Xu, Chen Shi, Chris Chao-Chun Cheng, Neil Zhengqiang Gong, and Yong
Guan. 2018. A Dynamic Taint Analysis Tool for Android App Forensics. In
SADFE.
[48] Lei Xue, Yajin Zhou, Ting Chen, Xiapu Luo, and Guofei Gu. 2017. Malton: Towards
On-Device Non-Invasive Mobile Malware Analysis for ART. In Usenix Security
Symposium.
[49] Z. Yang and M. Yang. 2012. LeakMiner: Detect Information Leakage on Android
with Static Taint Analysis. In WCSE.