### Categorization and Pattern Analysis

During categorization analysis, we may uncover specific patterns within an intent. These fine-grained patterns can be incorporated into regular expressions for dynamic file paths. When matching file paths, these patterns can be considered via regular expressions.

When our tool identifies files on a suspect’s device that contain evidentiary data, a forensic investigator still needs to retrieve, decode, or reconstruct the data from these files. For text files, SQLite databases, or SharedPreferences, retrieving data is relatively straightforward. However, for binary or encrypted files, the investigator needs to know the format of the binary file or the encryption method to extract the evidentiary data. Our current tool does not support the format analysis of binary files, which is an area for future improvement.

### Related Work

#### 6.1 Digital Forensics for Android

##### 6.1.1 Permanent-Storage Forensics

Permanent-storage forensics for Android remains an underdeveloped research area. Most existing studies and tools rely on either manual analysis or keyword search, limiting their effectiveness. Our work represents the first automated permanent-storage forensic analysis for Android using program analysis.

**Manual Analysis:**
Some studies [9–11, 46] manually analyzed apps to construct an App Evidence Database (AED). They installed apps on an Android device or ran them in a sandbox environment (e.g., Android Emulator [4] and YouWave [8]). The file system image was then retrieved using the Android Debug Bridge, which could be logical or physical. By running apps in a controlled environment, researchers could also retrieve images of the RAM and NAND flash memories. After obtaining the file system image, they manually examined the files generated by the apps, such as those in the `/data/data/<package_name>/files/` directory.

Manual analysis is time-consuming, error-prone, and costly, often limiting the number of apps analyzed. These studies typically focused on instant messaging and maps navigation apps, finding that instant messaging apps often save messages locally, while maps navigation apps store GPS location history in databases.

**Keyword Search:**
Several commercial tools (e.g., Cellebrite UFED [2], XRY [7], and FTK [3]) analyze files on a device by retrieving a file system image and providing a Graphical User Interface (GUI) for keyword or regular expression matching. However, this approach has limitations. For example, if a file contains GPS data but lacks the keywords "GPS," "latitude," or "longitude," it may be incorrectly labeled as non-evidentiary. Studies [23] have shown that keyword-based tools can only identify a small fraction of files containing evidentiary data.

##### 6.1.2 Memory Forensics

Several tools have been developed for memory forensics, such as DSCRETE [40], VCR [38], GUITAR [37], and RetroScope [39]. These tools focus on different aspects of memory, such as rendering data structures, recovering photographic evidence, and reconstructing app GUIs. Unlike our tool, which is designed for permanent-storage forensics, these tools are tailored for memory forensics.

##### 6.1.3 Active Forensics

Active forensics involves installing monitoring apps on a device in advance to collect forensic information. Examples include DroidWatch [22], which monitors data through ContentObserver and Broadcast Receiver, and WebCapsule [34], which records non-deterministic inputs to web browsers. A key challenge is the difficulty of installing these apps on a suspect’s device before a crime occurs. EviHunter, in contrast, is designed for passive forensics, analyzing a suspect’s device after a crime has occurred.

#### 6.2 Static Data Flow Analysis for Android

Improving the security and privacy of Android has attracted significant attention. Many tools, both dynamic (e.g., TaintDroid [18], TaintART [41], Malton [48]) and static (e.g., SCanDroid [19], Scandal [25], AndroidLeaks [20], LeakMiner [49], CHEX [30], FlowDroid [12], AmanDroid [45], DroidSafe [21], R-Droid [13], IccTA [28], HornDroid [15]), have been developed to detect sensitive data flows. Reaves et al. [36] conducted a comparative study of these tools.

EviHunter leverages static analysis, considering both the types of sensitive data and the file paths where the data are written. This introduces several challenges, including designing new tags, propagation rules, and identifying new source methods for file paths. EviHunter addresses these challenges.

### Conclusion and Future Work

EviHunter is designed to automatically identify files on an Android smartphone that may contain evidentiary data. It builds an AED for a large number of apps via static data flow analysis and matches files on a smartphone against the AED to identify those containing evidentiary data. Evaluations show that EviHunter can precisely and accurately identify the data and files. Future work includes modeling inter-component communications and extending EviHunter for fine-grained privacy analysis.

### Acknowledgments

We thank the anonymous reviewers for their insightful feedback. This work was funded by the Center for Statistics and Applications in Forensic Evidence (CSAFE) through Cooperative Agreement #70NANB15H176 between NIST and Iowa State University, as well as partially by NSF under grants No. CNS-1527579, CNS-1619201, and CNS-1730275, and Boeing Company.

### References

[References listed as provided, with no changes needed.]