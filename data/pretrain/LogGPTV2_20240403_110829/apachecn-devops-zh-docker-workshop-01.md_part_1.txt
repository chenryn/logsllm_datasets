# 一、运行我的第一个 Docker 容器
概观
在本章中，您将学习 Docker 和容器化的基础知识，并探索将传统多层应用迁移到快速可靠的容器化基础架构的好处。到本章结束时，您将对运行容器化应用的好处以及使用`docker run`命令运行容器的基础知识有一个清晰的了解。本章不仅将向您介绍 Docker 的基础知识，还将提供对 Docker 概念的坚实理解，这些概念将在整个研讨会中建立起来。
# 简介
近年来，所有行业的技术创新都在快速提高软件产品的交付速度。由于技术的发展趋势，如敏捷开发(快速编写软件的方法)和持续集成管道，使得软件能够快速交付，运营人员最近一直在努力快速构建基础设施，以满足不断增长的需求。为了跟上形势，许多组织选择迁移到云基础架构。
云基础架构提供托管虚拟化、网络和存储解决方案，可在现收现付模式中加以利用。这些提供商允许任何组织或个人注册并访问传统上需要大量空间和昂贵硬件才能在现场或数据中心实现的基础架构。亚马逊网络服务和谷歌云平台等云提供商提供了易于使用的应用编程接口，允许几乎立即创建大型虚拟机舰队**(或**虚拟机**)。**
 **将基础架构部署到云中为组织面临的许多传统基础架构解决方案难题提供了解决方案，但也带来了与大规模运行这些服务的成本管理相关的额外问题。公司如何管理每周 7 天、每天 24 小时运行昂贵服务器的持续月度和年度支出？
虚拟机通过利用虚拟机管理程序在更大的硬件上创建更小的服务器，彻底改变了基础架构。虚拟化的缺点是运行虚拟机需要大量资源。虚拟机本身看起来、行为和感觉都像真正的裸机硬件，因为 Zen、KVM 和 VMWare 等虚拟机管理程序分配资源来引导和管理整个操作系统映像。与虚拟机相关的专用资源使其变得庞大，并且有些难以管理。在内部虚拟机管理程序和云之间移动虚拟机可能意味着每个虚拟机移动数百千兆字节的数据。
为了提供更高程度的自动化，更好地利用计算密度，并优化他们的云存在，公司发现自己正在转向容器化和微服务架构作为解决方案。容器在主机操作系统内核的隔离部分提供进程级隔离或运行软件服务。容器可以共享主机操作系统的内核来运行多个软件应用，而不是运行整个操作系统内核来提供隔离。这是在 Linux 内核中通过称为**控制组**(或**控制组**)和**命名空间隔离**的特性来实现的。在单个虚拟机或裸机上，用户可能会运行数百个容器，这些容器在单个主机操作系统上运行单个软件应用实例。
这与传统的虚拟机架构形成鲜明对比。一般来说，当我们部署虚拟机时，我们将该机器用于运行单个服务器或一小部分服务。这造成了宝贵的 CPU 周期的浪费，而这些宝贵的 CPU 周期可以分配给其他任务并服务于其他请求。理论上，我们可以通过在单个虚拟机上安装多个服务来解决这个难题。然而，这可能会造成关于哪台机器运行哪项服务的大量混乱。它还将托管多个软件安装和后端依赖关系的所有权放在一个操作系统中。
容器化的微服务方法通过允许容器运行时在主机操作系统上调度和运行容器来解决这个问题。容器运行时不关心容器内运行的是什么应用，而是容器存在，并且可以在主机操作系统上下载和执行。不管在容器内运行的应用是一个 Go web API、一个简单的 Python 脚本还是一个遗留的 Cobol 应用。由于容器是标准格式，容器运行时将下载容器映像并在其中执行软件。在本书中，我们将研究 Docker 容器运行时，并学习在本地和大规模运行容器的基础知识。
Docker 是 2013 年开发的容器运行时，旨在利用 Linux 内核的进程隔离特性。Docker 与其他容器运行时实现的不同之处在于，Docker 开发了一个系统，不仅可以运行容器，还可以构建容器并将容器推送到容器存储库。这一创新产生了容器不变性的概念——只有在软件发生变化时，通过构建和推送容器的新版本来改变容器。
如下图所示(*图 1.1* )，我们有一系列跨两个 Docker 服务器部署的容器化应用。在两个服务器实例之间，已经部署了七个容器化应用。每个容器都有自己的一组二进制文件、库和独立的依赖项。当 Docker 运行一个容器时，容器本身会承载它正常运行所需的一切。甚至可以部署同一应用框架的不同版本，因为每个容器都存在于自己的内核空间中:
![Figure 1.1: Seven containers running across two different container servers ](img/B15021_01_01.jpg)
图 1.1:七个容器跨两个不同的容器服务器运行
在本章中，您将了解 Docker 在容器化的帮助下提供的各种优势。您还将学习使用`docker run`命令运行容器的基础知识。
# 使用 Docker 的优势
在传统的虚拟机方法中，代码更改需要操作人员或配置管理工具来访问该机器并安装新版本的软件。不可变容器的原则意味着，当代码发生变化时，将构建该容器映像的新版本，并将其创建为新的工件。如果需要回滚这一更改，就像下载并重新启动旧版本的容器映像一样简单。
利用容器化的方法还使软件开发团队能够在本地预测和可靠地测试各种场景和多种环境中的应用。由于 Docker 运行时环境提供了标准的执行环境，软件开发人员可以快速地重新创建问题并轻松地调试问题。由于容器的不变性，开发人员可以确信相同的代码在所有环境中运行，因为相同的 Docker 映像可以部署在任何环境中。这意味着配置变量(如无效的数据库连接字符串、应用编程接口凭据或其他特定于环境的变量)是失败的主要原因。这减轻了操作负担，并提供了无与伦比的效率和可重用性。
使用 Docker 的另一个优势是，与传统的基础设施应用相比，容器化应用传统上非常小且灵活。容器通常只提供运行应用所需的库和包，而不是提供完整的操作系统内核和执行环境。
构建 Docker 容器时，开发人员不再受安装在主机操作系统上的包和工具的支配，这些包和工具可能因环境而异。它们只能在容器映像中打包应用运行所需的库和实用程序的精确版本。当部署到生产机器上时，开发人员和操作团队不再关心容器运行在什么硬件或操作系统版本上，只要他们的容器在运行。
例如，从 2020 年 1 月 1 日起，不再支持 Python 2。因此，许多软件仓库正在逐步淘汰 Python 2 包和运行时。利用容器化的方法，您可以继续以受控、安全和可靠的方式运行遗留 Python 2 应用，直到遗留应用可以被重写。这消除了对安装操作系统级修补程序的担忧，因为安装操作系统级修补程序可能会取消 Python 2 的支持，并打破传统的应用栈。这些 Python 2 容器甚至可以与 Python 3 应用在 Docker 服务器上并行运行，以在这些应用迁移到新的现代化栈时提供精确的测试。
现在我们已经了解了什么是 Docker 以及它是如何工作的，我们可以开始与 Docker 合作，了解进程隔离与虚拟化和其他类似技术的区别。
注意
在我们开始运行容器之前，您必须首先在本地开发工作站上安装 Docker。详见本书*前言*部分。
# Docker 引擎
**Docker 引擎**是提供对 Linux 内核进程隔离特性的访问的接口。因为只有 Linux 公开了允许容器运行的特性，所以 Windows 和 macOS 主机在后台利用 Linux 虚拟机来实现容器执行。对于 Windows 和 macOS 用户，Docker 提供了“ **Docker Desktop** ”套件，可在后台为您部署和运行该虚拟机。这允许 Docker 命令从 macOS 或 Windows 主机的终端或 PowerShell 控制台本地执行。Linux 主机拥有直接本地执行 Docker Engine 的特权，因为现代版本的 Linux 内核支持`cgroups`和命名空间隔离。
注意
由于 Windows、macOS 和 Linux 在联网和进程管理方面具有根本不同的操作系统体系结构，因此本书中的一些示例(特别是在联网方面)有时会被称为具有不同的行为，这取决于您的开发工作站上运行的操作系统。这些差异一出现就被叫出来。
Docker Engine 不仅支持容器映像的执行，还提供了内置机制，可以从称为`Dockerfiles`的源代码文件中构建和测试容器映像。当构建容器映像时，它们可以被推送到容器**映像注册表**。一个**映像注册表**是一个容器映像的存储库，其他 Docker 主机可以从中下载和执行容器映像。Docker 引擎支持运行容器映像、构建容器映像，甚至在配置为如此运行时托管容器映像注册表。
当一个容器启动时，Docker 默认情况下会下载容器映像，将其存储在本地容器映像缓存中，最后执行容器的`entrypoint`指令。`entrypoint`指令是启动应用主要进程的命令。当此过程停止或停止时，容器也将停止运行。
根据容器内运行的应用，`entrypoint`指令可能是一个长期运行的服务器守护程序，一直可用，也可能是一个短暂的脚本，当执行完成时自然会停止。或者，许多容器执行`entrypoint`脚本，在开始主要过程之前完成一系列设置步骤，这可能是长期或短期的。
在运行任何容器之前，最好先了解将在容器内运行的应用的类型，以及它是短期执行还是长期运行的服务器守护程序。
# r〔t0〕隧道 Docker 容器
构建容器和微服务架构的最佳实践规定，容器应该只运行一个进程。牢记这一原则，我们可以设计易于构建、故障排除、扩展和部署的容器。
容器的生命周期是由容器的状态和其中正在运行的进程定义的。根据操作者、容器编排者或容器内部运行的应用的状态，容器可以处于运行或停止状态。例如，操作员可以使用`docker stop`或`docker start` **命令行界面** ( **命令行界面**)界面命令手动停止或启动容器。如果 Docker 本身检测到容器已经进入不健康状态，它可以自动停止或重新启动容器。此外，如果在容器内运行的主应用失败或停止，正在运行的容器实例也应该停止。许多容器运行时平台(如 Docker)甚至提供自动机制来重启自动进入停止状态的容器。许多容器平台使用这一原则来构建作业和任务执行功能。
因为容器在容器内的主进程结束时终止，所以容器是执行脚本和其他类型的无限期作业的绝佳平台。下面的*图 1.2* 说明了一个典型容器的生命周期:
![Figure 1.2: The life cycle of a typical container ](img/B15021_01_02.jpg)
图 1.2:典型容器的生命周期
一旦下载了 Docker 并将其安装到目标操作系统上，就可以开始运行容器了。Docker CLI 有一个名为`docker run`的命令，专门用于启动和运行 Docker 容器。正如我们之前了解到的，容器提供了与系统上运行的其他应用和进程的隔离。由于这个事实，Docker 容器的生命周期是由该容器内运行的主进程决定的。当容器停止时，Docker 可能会尝试重新启动容器，以确保应用的连续性。
为了查看主机系统上运行的容器，我们还将利用`docker ps`命令。`docker ps`命令类似于 Unix 风格的`ps`命令，用于显示在 Linux 或基于 Unix 的操作系统上运行的进程。
请记住，当 Docker 第一次运行容器时，如果它的本地缓存中没有存储容器映像，它将从容器映像注册表中下载容器映像。要查看本地存储的容器映像，请使用`docker images`命令。
下面的练习将演示如何使用`docker run`、`docker ps`和`docker images`命令来启动和查看一个简单的`hello-world`容器的状态。
## Ex ercise 1.01:运行 hello-world 容器
一个简单的“Hello World”应用通常是开发人员在学习软件开发或开始新的编程语言时编写的第一行代码，容器化也没有什么不同。Docker 已经发布了一个`hello-world`容器，它的尺寸非常小，并且易于执行。这个容器展示了运行单一进程的无限期容器的本质。
在本练习中，您将使用`docker run`命令启动`hello-world`容器，并使用`docker ps`命令查看容器执行完毕后的状态。这将提供在本地开发环境中运行容器的基本概述:
1.  Enter the `docker run` command in a Bash terminal or PowerShell window. This instructs Docker to run a container called `hello-world`:
    ```
    $ docker run hello-world
    ```
    您的 shell 应该返回类似如下的输出:
    ```
    Unable to find image 'hello-world: latest' locally
    latest: Pulling from library/hello-world
    0e03bdcc26d7: Pull complete 
    Digest: sha256:
    8e3114318a995a1ee497790535e7b88365222a21771ae7e53687ad76563e8e76
    Status: Downloaded newer image for hello-world:latest
    Hello from Docker!
    This message shows that your installation appears to be working 
    correctly.
    To generate this message, Docker took the following steps:
     1\. The Docker client contacted the Docker daemon.
     2\. The Docker daemon pulled the "hello-world" image from the 
    Docker Hub.
        (amd64)
     3\. The Docker daemon created a new container from that image 
    which runs the executable that produces the output you are 
    currently reading.
    4\. The Docker daemon streamed that output to the Docker 
    client, which sent it to your terminal.
    To try something more ambitious, you can run an Ubuntu 
    container with:
     $ docker run -it ubuntu bash
    Share images, automate workflows, and more with a free Docker ID:
     https://hub.docker.com/
    For more examples and ideas, visit:
     https://docs.docker.com/get-started/
    ```
    刚刚发生了什么？你告诉 Docker 运行容器，`hello-world`。因此，首先，Docker 将在其本地容器缓存中查找同名的容器。如果找不到，它将在互联网上寻找一个容器注册表，试图满足命令。默认情况下，通过简单地指定容器的名称，Docker 将通过该名称向 Docker Hub 查询已发布的容器映像。
    如你所见，它能够找到一个名为`library/hello-world`的容器，并开始一层一层地拉入容器映像的过程。您将在*第 2 章*、*快速入门*中更深入地了解容器映像和层。映像完全下载后，Docker 运行映像，显示`Hello from Docker`输出。由于此映像的主要过程只是显示输出，因此容器会自动停止，并在输出显示后停止运行。
2.  Use the `docker ps` command to see what containers are running on your system. In your Bash or PowerShell terminal, type the following command:
    ```
    $ docker ps
    ```
    这将返回类似如下的输出:
    ```
    CONTAINER ID      IMAGE     COMMAND      CREATED
      STATUS              PORTS                   NAMES
    ```
    `docker ps`命令的输出为空，因为默认情况下它只显示当前运行的容器。这类似于 Linux/Unix `ps`命令，只显示正在运行的进程。
3.  Use the `docker ps -a` command to display all the containers, even the stopped ones:
    ```
    $ docker ps -a
    ```
    在返回的输出中，您应该会看到`hello-world`容器实例:
    ```
    CONTAINER ID     IMAGE           COMMAND     CREATED
      STATUS                          PORTS         NAMES
    24c4ce56c904     hello-world     "/hello"    About a minute ago
      Exited (0) About a minute ago                 inspiring_moser
    ```
    如您所见，Docker 给了容器一个唯一的容器 ID。它还显示运行的`IMAGE`、执行的映像中的`COMMAND`、创建的`TIME`和运行该容器的进程的`STATUS`，以及唯一的人类可读的名称。这个特殊的容器大约在一分钟前创建，执行了程序`/hello`，并成功运行。你可以看出程序运行并成功执行，因为它产生了一个`Exited (0)`代码。
4.  You can query your system to see what container images Docker cached locally. Execute the `docker images` command to view the local cache:
    ```
    $ docker images
    ```
    返回的输出应该显示本地缓存的容器映像:
    ```
    REPOSITORY     TAG        IMAGE ID        CREATED         SIZE
    hello-world    latest     bf756fb1ae65    3 months ago    13.3kB
    ```
    到目前为止唯一缓存的映像是`hello-world`容器映像。这张图片运行的是 3 个月前创建的`latest`版本，大小为 13.3 千字节。从前面的输出中，您知道这个 Docker 映像非常小，开发人员已经 3 个月没有发布这个映像的代码更改了。该输出对于排除现实世界中软件版本之间的差异非常有帮助。
    由于您只是告诉 Docker 运行`hello-world`容器，而没有指定版本，因此 Docker 默认会提取最新版本。您可以通过在`docker run`命令中指定标签来指定不同的版本。例如，如果`hello-world`容器映像有版本`2.0`，您可以使用`docker run hello-world:2.0`命令运行该版本。
    想象一下，这个容器比一个简单的`hello-world`应用要复杂一点。想象一下，你的同事编写的软件要求下载许多第三方库的特定版本。如果您传统地运行这个应用，您将不得不为他们开发的语言下载运行时环境，加上所有的第三方库，以及关于如何构建和执行他们的代码的详细说明。
    然而，如果他们将代码的 Docker 映像发布到内部 Docker 注册表中，他们所要提供给你的只是用于运行容器的`docker run`语法。因为您有 Docker，所以无论您的底层平台是什么，容器映像都将运行相同的内容。容器映像本身已经包含库和运行时细节。
5.  If you execute the same `docker run` command over again, then, for each `docker run` command a user inputs, a new container instance will be created. It should be noted that one of the benefits of containerization is the ability to easily run multiple instances of a software application. To see how Docker handles multiple container instances, run the same `docker run` command again to create another instance of the `hello-world` container:
    ```
    $ docker run hello-world
    ```
    您应该会看到以下输出:
    ```
    Hello from Docker!
    This message shows that your installation appears to be 
    working correctly.
    To generate this message, Docker took the following steps:
     1\. The Docker client contacted the Docker daemon.
     2\. The Docker daemon pulled the "hello-world" image from 
        the Docker Hub.
        (amd64)
     3\. The Docker daemon created a new container from that image 
        which runs the executable that produces the output you 
        are currently reading.
     4\. The Docker daemon streamed that output to the Docker client, 
        which sent it to your terminal.
    To try something more ambitious, you can run an Ubuntu container 
    with:
     $ docker run -it ubuntu bash
    Share images, automate workflows, and more with a free Docker ID:
     https://hub.docker.com/
    For more examples and ideas, visit:
     https://docs.docker.com/get-started/
    ```
    请注意，这一次，Docker 不必再次从 Docker Hub 下载容器映像。这是因为您现在已经在本地缓存了该容器映像。相反，Docker 能够直接运行容器并将输出显示在屏幕上。让我们看看你现在的`docker ps -a`输出是什么样子的。
6.  In your terminal, run the `docker ps -a` command again:
    ```
    docker ps -a
    ```