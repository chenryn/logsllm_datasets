     mov      [esp+4], edx          ; tm_sec 
     mov      [esp], eax 
     call     printf 
     leave 
     retn 
main endp 
可惜的是 IDA 未能在局部栈里将这些局部变量逐一识别出来，因此未能标记变量的别名。但是读到这
里的读者都是有经验的逆向工程分析人员了，不再需要辅助信息仍然可以分析出数据的作用。 
需要注意的是“lea edx, [eax+76Ch]”指令。它给 EAX 寄存器里的值加上 0x76C（1900），而不会修改
任何标志位。有关 LEA 指令的更多信息，请参见附录 A.6.2。 
GDB 
我们使用GDB调试这个程序，可得到如下所示的代码。
①
① 为了便于演示，作者略微调整了 date 的返回结果。在实际情况下，手动输入 GDB 指令的速度不会那么快，多次操作的返回
结果不可能分毫不差。 
指令清单 21.7  GDB 
dennis@ubuntuvm:~/polygon$ date 
Mon Jun  2 18:10:37 EEST 2014 
dennis@ubuntuvm:~/polygon$ gcc GCC_tm.c -o GCC_tm 
dennis@ubuntuvm:~/polygon$ gdb GCC_tm 
GNU gdb (GDB) 7.6.1-ubuntu 
Copyright (C) 2013 Free Software Foundation, Inc. 
License GPLv3+: GNU GPL version 3 or later  
This is free software: you are free to change and redistribute it. 
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"and "show warranty" for details. 
This GDB was configured as "i686-linux-gnu". 
For bug reporting instructions, please see: 
... 
Reading symbols from /home/dennis/polygon/GCC_tm...(no debugging symbols found)...done. 
(gdb) b printf 
Breakpoint 1 at 0x8048330 
(gdb) run 
Starting program: /home/dennis/polygon/GCC_tm 
Breakpoint 1, __printf (format=0x80485c0 "Year: %d\n") at printf.c:29 
29      printf.c: No such file or directory. 
(gdb) x/20x $esp 
0xbffff0dc:     0x080484c3 0x080485c0  
0x000007de  
0x00000000 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
317 
0xbffff0ec:     0x08048301 0x538c93ed  
0x00000025  
0x0000000a 
0xbffff0fc:     0x00000012 0x00000002  
0x00000005  
0x00000072 
0xbffff10c:     0x00000001 0x00000098  
0x00000001  
0x00002a30 
0xbffff11c:     0x0804b090 0x08048530  
0x00000000  
0x00000000 
(gdb) 
在数据栈中，结构体的构造非常清晰。首先我们看看 time.h 里的定义。 
指令清单 21.8  time.h 
struct tm 
{ 
  int   tm_sec; 
  int   tm_min; 
  int   tm_hour; 
  int   tm_mday; 
  int   tm_mon; 
  int   tm_year; 
  int   tm_wday; 
  int   tm_yday; 
  int   tm_isdst; 
}; 
Linux 的 tm 结构体的每个元素都是 int 型数据。在数据类型上它就和 Windows 的 SYSTEMTIME 结构
体采用的 WORD 型数据不同。 
我们继续分析局部栈的情况： 
0xbffff0dc: 0x080484c3  
0x080485c0    
0x000007de    
0x00000000 
0xbffff0ec: 0x08048301   
0x538c93ed  
0x00000025 秒  0x0000000a 分 
0xbffff0fc: 0x00000012 时    0x00000002 mday 0x00000005 月   0x00000072 年 
0xbffff10c: 0x00000001 wday 0x00000098 yday 0x00000001 isdst 0x00002a30 
0xbffff11c: 0x0804b090       0x08048530       0x00000000       0x00000000 
整理一下，结果如下表所示。 
十六进制数 
十进制 
字段 
0x00000025 
37 
tm_sec 
0x0000000a 
10 
tm_min 
0x00000012 
18 
tm_hour 
0x00000002 
2 
tm_mday 
0x00000005 
5 
tm_mon 
0x00000072 
114 
tm_year 
0x00000001 
1 
tm_wday 
0x00000098 
152 
tm_yday 
0x00000001 
1 
tm_isdst 
这个结构体比SYSTEMTIME 多了一些字段，例如tm_wday/ tm_yday/ tm_isdst 字段，不过本例用不到这些字段。 
21.3.2 ARM 
Optimizing Keil 6/2013 (Thumb mode) 
使用 Keil 6（启用优化选项）编译上述结构体程序，可得到 Thumb 模式的程序如下所示。 
指令清单 21.9  Optimizing Keil 6/2013 (Thumb mode) 
var_38 = -0x38 
var_34 = -0x34 
var_30 = -0x30 
var_2C = -0x2C 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
318 
逆向工程权威指南（上册） 
var_28 = -0x28 
var_24 = -0x24 
timer  = -0xC 
       PUSH   
{LR} 
       MOVS   
R0, #0          ; timer 
       SUB    
SP, SP, #0x34 
       BL     
time 
       STR    
R0, [SP,#0x38+timer] 
       MOV    
R1, SP          ; tp 
       ADD    
R0, SP, #0x38+timer ; timer 
       BL     
localtime_r 
       LDR    
R1, =0x76C 
       LDR    
R0, [SP,#0x38+var_24] 
       ADDS   
R1, R0, R1 
       ADR    
R0, aYearD      ; "Year: %d\n" 
       BL      
__2printf 
       LDR    
R1, [SP,#0x38+var_28] 
       ADR    
R0, aMonthD     ; "Month: %d\n" 
       BL     
__2printf 
       LDR    
R1, [SP,#0x38+var_2C] 
       ADR    
R0, aDayD       ; "Day: %d\n" 
       BL     
__2printf 
       LDR    
R1, [SP,#0x38+var_30] 
       ADR    
R0, aHourD      ; "Hour: %d\n" 
       BL     
__2printf 
       LDR    
R1, [SP,#0x38+var_34] 
       ADR    
R0, aMinutesD   ; "Minutes: %d\n" 
       BL     
__2printf 
       LDR    
R1, [SP,#0x38+var_38] 
       ADR    
R0, aSecondsD   ; "Seconds: %d\n" 
       BL     
__2printf 
       ADD    
SP, SP, #0x34 
       POP    
{PC} 
Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
通过分析被调用方函数的函数名称（例如本例的 localtime_r()函数），IDA 能够“识别”出返回值为结
构体型数据，并能给结构体中的字段重新标注名称。 
指令清单 21.10  Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
var_38 = -0x38 
var_34 = -0x34 
       PUSH {R7,LR} 
       MOV  R7, SP 
       SUB  SP, SP, #0x30 
       MOVS R0, #0  ; time_t * 
       BLX  _time 
       ADD  R1, SP, #0x38+var_34 ; struct tm * 
       STR  R0, [SP,#0x38+var_38] 
       MOV  R0, SP  ; time_t * 
       BLX  _localtime_r 
       LDR  R1, [SP,#0x38+var_34.tm_year] 
       MOV  R0, 0xF44 ; "Year: %d\n" 
       ADD  R0, PC  ; char * 
       ADDW R1, R1, #0x76C 
       BLX  _printf 
       LDR  R1, [SP,#0x38+var_34.tm_mon] 
       MOV  R0, 0xF3A ; "Month: %d\n" 
       ADD  R0, PC  ; char * 
       BLX  _printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
319 
       LDR  R1, [SP,#0x38+var_34.tm_mday] 
       MOV  R0, 0xF35 ; "Day: %d\n" 
       ADD  R0, PC  ; char * 
       BLX  _printf 
       LDR  R1, [SP,#0x38+var_34.tm_hour] 
       MOV  R0, 0xF2E ; "Hour: %d\n" 
       ADD  R0, PC  ; char * 
       BLX  _printf 
       LDR  R1, [SP,#0x38+var_34.tm_min] 
       MOV  R0, 0xF28 ; "Minutes: %d\n" 
       ADD  R0, PC  ; char * 
       BLX  _printf 
       LDR  R1, [SP,#0x38+var_34] 
       MOV  R0, 0xF25 ; "Seconds: %d\n" 
       ADD  R0, PC  ; char * 
       BLX  _printf 
       ADD  SP, SP, #0x30 
       POP  {R7,PC} 
...... 
00000000 tm  
  struc ; (sizeof=0x2C, standard type) 
00000000 tm_sec    DCD ? 
00000004 tm_min    DCD ? 
00000008 tm_hour   DCD ? 
0000000C tm_mday   DCD ? 
00000010 tm_mon    DCD ? 
00000014 tm_year   DCD ? 
00000018 tm_wday   DCD ? 
0000001C tm_yday   DCD ? 
00000020 tm_isdst  DCD ? 
00000024 tm_gmtoff DCD ? 
00000028 tm_zone   DCD ? ; offset 
0000002C tm        ends 
21.3.3  MIPS 
指令清单 21.11  Optimizing GCC 4.4.5 (IDA) 
 1 main: 
 2 
 3 ; IDA is not aware of structure field names, we named them manually: 
 4 
 5 var_40   
   = -0x40 
 6 var_38   
   = -0x38 
 7 seconds   
   = -0x34 
 8 minutes   
   = -0x30 
 9 hour  
   = -0x2C 
10 day  
   = -0x28 
11 month   
   = -0x24 
12 year  
   = -0x20 
13 var_4  
   = -4 
14 
15  
   lui  
$gp, (__gnu_local_gp >> 16) 
16  
   addiu  $sp, -0x50 
17  
   la  
$gp, (__gnu_local_gp & 0xFFFF) 
18  
   sw  
$ra, 0x50+var_4($sp) 
19  
   sw  
$gp, 0x50+var_40($sp) 
20  
   lw  
$t9, (time & 0xFFFF)($gp) 
21  
   or  
$at, $zero ; load delay slot, NOP 
22  
   jalr  
$t9 
23  
   move  
$a0, $zero ; branch delay slot, NOP 
24  
   lw  
$gp, 0x50+var_40($sp) 
25  
   addiu  $a0, $sp, 0x50+var_38 
26  
   lw  
$t9, (localtime_r & 0xFFFF)($gp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
320 
逆向工程权威指南（上册） 
27  
   addiu  $a1, $sp, 0x50+seconds 
28  
   jalr  
$t9 
29  
   sw  
$v0, 0x50+var_38($sp) ; branch delay slot 
30  