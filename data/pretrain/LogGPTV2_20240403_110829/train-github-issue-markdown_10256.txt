## Problem
I am trying to implement h2 server push in my custom express server, but not
able to figure out how exactly the path of bundled assets inside .next
directory gets resolved on runtime.
## Code
Currently, this is my server.js
    const express = require('express');
    const compression = require('compression');
    const next = require('next');
    const path = require('path');
    const dev = process.env.NODE_ENV !== 'production';
    const app = next({ dev });
    const handle = app.getRequestHandler();
    const cmdArgs = process.argv.slice(2);
    const portNumber = parseInt(cmdArgs[0], 10);
    app.prepare()
    .then(() => {
      const server = express();
      server.use(compression());
      server.get('/sw.js', (req, res) => app.serveStatic(req, res, path.resolve('./.next/sw.js')));
      server.get('*', (req, res) => handle(req, res));
      server.listen(portNumber, (err) => {
        if (err) throw err;
        console.log(`> Ready on https://localhost:${portNumber}`);
      });
    });
Basically I want to send my app.js bundle as soon as a hit is made on the root
route.  
So I am trying to achieve something like the code below by following this
article:
    ....
    ....
    app.prepare()
    .then(() => {
      const server = express();
      server.use(compression());
      server.get('/sw.js', (req, res) => app.serveStatic(req, res, path.resolve('./.next/sw.js')));
      server.get('/', (req, res) => {
        Promise.all([
          fs.readFile(// path to index.html)),
          fs.readFile(// path to app.js bundle),
        ]).then(files => {
          if (res.push){
              // The JS file
              var squareRootStream = res.push(// path to app.js bundle, {
                  req: {'accept': '**/*'},
                  res: {'content-type': 'application/javascript'}
              });
              squareRootStream.on('error', err => {
                console.log(err);
              });
              squareRootStream.end(files[1]);
          }
          res.writeHead(200);
          res.end(files[0]);
        }).catch(error => res.status(500).send(error.toString()));
      });
      });
      server.get('*', (req, res) => handle(req, res));
    });
    ....
    ....
Is it possible to implement something like this in next.js ?  
Any advice/help would be greatly appreciated..!!
  * I have searched the issues of this repository and believe that this is not a duplicate.
## Your Environment
Tech | Version  
---|---  
next | ^3.0.1-beta.16  
node | v6.8.0  
OS | macOS  
browser | Chrome Version 60.0.3112.113 (Official Build) (64-bit)  
etc |