---
### RIPEMD
RIPEMD (RACE 原始完整性校验讯息摘要)是一种加密哈希函数，发布于1996年。 RIPEMD 是以 MD4 为基础原则所设计的 ，而且其表现与更有名的 SHA-1 类似.
同时也存在着128,256-320位元的这种算法，称为 RIPEMD-128,RIPEMD-256 和 RIPEMD-320。
128位版本的用意仅是取代原始版 RIPEMD，因为原版也同样是128位元，并且被发现有潜在的安全问题。
而256和320位版本只有减少碰撞发生的机率，但没有提升安全等级(以 preimage 举例)。不过，RIPEMD 的设计者们没有真正设计256和320位元这2种标准，他们只是在128位元和160位元的基础上，修改了初始参数和 s-box 来达到输出为256和320位元。所以，256位的强度和128相当，而320位的强度和160位相当。且 RIPEMD 建立在 md 的基础之上，所以其添加数据的方式和 md5 完全一样。
#### RIPEMD-160
RIPEMD-160 是以原始版 RIPEMD 所改进的 160 位元版本，而且是 RIPEMD 系列中最常见的版本。 RIPEMD-160 是设计给学术社群所使用的，刚好相对于 NSA 所设计 SHA-1 和 SHA-2 算法。 另一方面，RIPEMD-160 比 SHA-1 较少使用，所以可能造成 RIPEMD-160 比 SHA 还不常被审查。另外，RIPEMD-160 并没有任何专利所限制。
160位元的 RIPEMD-160 哈希值是以40位的十六进制所表示。 下面表明了43字节 ASCII 码的输入与其对应的 RIPEMD-160 哈希值：
```
RIPEMD-160("The quick brown fox jumps over the lazy dog") = 37f332f68db77bd9d7edd4969571ad671cf9dd3b
```
RIPEMD-160 能表现出理想的 雪崩效应 (例如将 d 改成 c，即微小的变化就能产生一个完全不同的哈希值):
```
RIPEMD-160("The quick brown fox jumps over the lazy cog") = 132072df690933835eb8b6ad0b77e7b6f14acad7
```
0字串长度的哈希值表示为：
```
RIPEMD-160("") = 9c1185a5c5e9fc54612808977ee8f548b2258d31
```
**相关文章**
- [RIPEMD](https://zh.wikipedia.org/wiki/RIPEMD)
**在线工具**
- http://www.convertstring.com/zh_CN/Hash/RIPE_MD160
---
### SHA
**SHA1 碰撞**
- [SHAttered](https://shattered.io/)
- [SHA1 collider](https://alf.nu/SHA1)
**在线工具**
- [SHA1哈希 - 在线SHA1散列发生器](http://www.convertstring.com/zh_CN/Hash/SHA1)
- [SHA256哈希 - 在线SHA256哈希发生器](http://www.convertstring.com/zh_CN/Hash/SHA256)
- [SHA384哈希 - 在线SHA384哈希发生器](http://www.convertstring.com/zh_CN/Hash/SHA384)
- [SHA512哈希 - 在线SHA512哈希发生器](http://www.convertstring.com/zh_CN/Hash/SHA512)
- [Sha256 Algorithm Explained](https://sha256algorithm.com/)
#### HmacSHA1
**在线工具**
- [HmacSHA1算法加密计算器](https://www.jisuan.mobi/pmbN3zbN3H6uBXSU.html)
---
## 现代密码
**相关文章**
- [安全体系(一)—— DES算法详解](https://www.cnblogs.com/songwenlong/p/5944139.html)
- [安全体系(零)—— 加解密算法、消息摘要、消息认证技术、数字签名与公钥证书](http://www.cnblogs.com/songwenlong/p/6517165.html)
- [Blowfish (密码学) - 维基百科,自由的百科全书](https://zh.wikipedia.org/wiki/Blowfish_(%E5%AF%86%E7%A0%81%E5%AD%A6))
- [朝鲜红星操作系统加密算法解析](http://www.4hou.com/technology/12487.html)
- [这些hash你了解吗？](http://www.myh0st.cn/index.php/archives/304/)
**在线工具**
- http://www.mxcz.net/tools/MD5.aspx
- http://tool.oschina.net/encrypt/
- http://encode.chahuo.com/
- http://tool.chacuo.net/cryptdes
- https://hashtoolkit.com/
---
### 对称性加密算法
对称密钥算法（英语：Symmetric-key algorithm）又称为对称加密、私钥加密、共享密钥加密，是密码学中的一类加密算法。这类算法在加密和解密时使用相同的密钥，或是使用两个可以简单地相互推算的密钥。事实上，这组密钥成为在两个或多个成员间的共同秘密，以便维持专属的通信联系。与公开密钥加密相比，要求双方获取相同的密钥是对称密钥加密的主要缺点之一。
对称加密的速度比公钥加密快很多，在很多场合都需要对称加密。
#### AES
高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。现在，高级加密标准已然成为对称密钥加密中最流行的算法之一。
AES 加密的模式主要有五种：ECB (电子密码本模式)、CBC（密码分组连接模式）、CTR（计算器模式）、CFB（密码反馈模式）、OFB (输出反馈模式)。这五种工作模式主要是在加密器的使用上有所区别。
**ECB 模式**
其使用方式是一个明文分组加密成一个密文分组，相同的明文分组永远被加密成相同的密文分组。直接利用加密算法分别对每个 64 位明文分组使用相同的 64 位密钥进行加密。每个明文分组的处理是相互独立的。
- 优点：
    - 简单。
    - 有利于并行计算。
- 缺点：
    - 相同的明文块会加密成相同的密文块，安全性低。
**CBC 模式**
引入一个初始向量 IV，它的作用跟 MD5 加盐有些类似，可以防止相同的明文块加密成同样的密文块。IV 是初始向量，参与第一个明文块的异或，后续的每一个明文块，都与它前一个密文块相异或。这样就能保证相同的明文块不会被加密为相同的密文块。
- 优点：能隐蔽明文的数据模式，在某种程度上能防止数据篡改, 诸如明文组的重放,嵌入和删除等，安全性高。
- 缺点：无法并行计算，性能相对 ECB 低，会出现错误传播(errorpropagation)。
**在线工具**
- [AES Encryption  Easily encrypt or decrypt strings or files](http://aes.online-domain-tools.com/)
- [在线AES加密解密、AES在线加密解密、AES encryption and decryption--查错网](http://tool.chacuo.net/cryptaes)
- http://tool.chinaz.com/Tools/textencrypt.aspx
- https://tool.oschina.net/encrypt/
**tips**
- 加密数据存在 `U2Fsd` 头，可能是 aes 加盐
##### Padding Oracle
**相关文章**
- [Padding Oracle原理深度解析&CBC字节翻转攻击原理解析](https://mp.weixin.qq.com/s/OtGw-rALwpBkERfvqdZ4kQ)
**相关工具**
- [AonCyberLabs/PadBuster](https://github.com/AonCyberLabs/PadBuster) - Automated script for performing Padding Oracle attacks
---
#### DES
数据加密标准（英语：Data Encryption Standard，缩写为 DES）是一种对称密钥加密块密码算法，1976年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），随后在国际上广泛流传开来。它基于使用56位密钥的对称算法。这个算法因为包含一些机密设计元素，相对短的密钥长度以及怀疑内含美国国家安全局（NSA）的后门而在开始时有争议，DES因此受到了强烈的学院派式的审查，并以此推动了现代的块密码及其密码分析的发展。
在某些文献中，作为算法的DES被称为DEA（Data Encryption Algorithm，数据加密算法），以与作为标准的DES区分开来。
**在线工具**
- [DES加密、DES解密 - 在线工具](https://oktools.net/des)
- [CTF在线工具-DES在线加解密|DES在线加密|DES在线解密|DES encryption|DES decryption](http://ctf.ssleye.com/cdes.html)
---
##### 3DES
密码学中，三重数据加密算法（英语：Triple Data Encryption Algorithm，缩写为TDEA，Triple DEA），或称3DES（Triple DES），是一种对称密钥加密块密码，相当于是对每个数据块应用三次资料加密标准（DES）算法。由于计算机运算能力的增强，原版DES由于密钥长度过低容易被暴力破解；3DES即是设计用来提供一种相对简单的方法，即通过增加DES的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。
**在线工具**
- [在线3DES加密解密、3DES在线加密解密、3DES encryption and decryption](http://tool.chacuo.net/crypt3des)
---
#### RC4
在密码学中，RC4（来自Rivest Cipher 4的缩写）是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4是有线等效加密（WEP）中采用的加密算法，也曾经是TLS可采用的算法之一。
由美国密码学家罗纳德·李维斯特（Ronald Rivest）在1987年设计的。由于RC4算法存在弱点，2015年2月所发布的 RFC 7465 规定禁止在TLS中使用RC4加密算法。
RC4由伪随机数生成器和异或运算组成。RC4的密钥长度可变，范围是[1,255]。RC4一个字节一个字节地加解密。给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。
由于异或运算的对合性，RC4加密解密使用同一套算法。
**相关文章**
- [RC4](https://zh.wikipedia.org/wiki/RC4)
**在线工具**
- https://www.sojson.com/encrypt_rc4.html
- http://tool.chacuo.net/cryptrc4
---
#### TEA
**在线工具**
- http://www.atoolbox.net/Tool.php?Id=861
---
#### Xtea
**在线工具**
- http://tool.chacuo.net/cryptxtea
---
#### Serpent
**在线工具**
- http://serpent.online-domain-tools.com/
---
#### BlowFish
**相关文章**
- [BlowFish加解密原理与代码实现](https://cloud.tencent.com/developer/article/1836650)
---
### 非对称性加密算法
公开密钥密码学（英语：Public-key cryptography）也称非对称式密码学（英语：Asymmetric cryptography）是密码学的一种算法，它需要两个密钥，一个是公开密钥，另一个是私有密钥；公钥用作加密，私钥则用作解密。使用公钥把明文加密后所得的密文，只能用相对应的私钥才能解密并得到原本的明文，最初用来加密的公钥不能用作解密。由于加密和解密需要两个不同的密钥，故被称为非对称加密；不同于加密和解密都使用同一个密钥的对称加密。公钥可以公开，可任意向外发布；私钥不可以公开，必须由用户自行严格秘密保管，绝不透过任何途径向任何人提供，也不会透露给被信任的要通信的另一方。
基于公开密钥加密的特性，它还能提供数字签名的功能，使电子文件可以得到如同在纸本文件上亲笔签署的效果。
公开密钥基础建设透过信任数字证书认证机构的根证书、及其使用公开密钥加密作数字签名核发的公开密钥认证，形成信任链架构，已在 TLS 实现并在万维网的 HTTP 以 HTTPS、在电子邮件的 SMTP 以 SMTPS 或 STARTTLS 引入。
另一方面，信任网络则采用去中心化的概念，取代了依赖数字证书认证机构的公钥基础设施，因为每一张电子证书在信任链中最终只由一个根证书授权信任，信任网络的公钥则可以累积多个用户的信任。PGP 就是其中一个例子。
#### RSA
**相关文章**
- [RSA算法原理(一)](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)
- [RSA算法原理(二)](http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html)
- [RSA史上最强剖析,从小白变大神,附常用工具使用方法及CTF中RSA典型例题](http://www.freebuf.com/sectool/163781.html)
- [扩展欧几里得算法](https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95)
- [CTF-RSA总结](https://forum.butian.net/share/478)
- [CTF中的RSA 算法](https://www.cnblogs.com/NPFS/p/13383625.html)
- [RSA算法详解与练习](http://www.atkx.top/2020/10/04/RSA%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%BB%83%E4%B9%A0/)
- [【技术分享】CTF中RSA的常见攻击方法](https://www.anquanke.com/post/id/84632)
- [RSA 私钥恢复和最优非对称加密填充](https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html)
- [CTF中常见的RSA相关问题总结[转]](https://willv.cn/2018/07/21/RSA-ATTACK/)
- [[原创]CTF中RSA的一些攻击思路](https://bbs.pediy.com/thread-254252.htm)
- [CTF中的RSA及攻击方法笔记](https://www.freebuf.com/articles/web/257835.html)
- [CTF密码学之RSA攻击算法](https://mp.weixin.qq.com/s/sBeUUx0SNWB5HPfVCpxu5g)
- [CTF中RSA套路](https://err0rzz.github.io/2017/11/14/CTF%E4%B8%ADRSA%E5%A5%97%E8%B7%AF/)
- [RSA算法基础详解](https://www.cnblogs.com/hykun/p/RSA.html)
- [RSA算法原理——（3）RSA加解密过程及公式论证](https://blog.csdn.net/u014044812/article/details/80866759)
- [深入浅出RSA在CTF中的攻击套路](https://xz.aliyun.com/t/6459)
**相关工具**
- [SageMath](https://mirrors.tuna.tsinghua.edu.cn/sagemath/linux/64bit/index.html)
    - [Sage Cell Server](https://sagecell.sagemath.org/) - 在线 Sagemath
- [factordb](http://www.factordb.com/) - 在线分解质因数, 通常用于分解 n 得到 p q
  - [ryosan-470/factordb-python](https://github.com/ryosan-470/factordb-python) - 命令行分解
    ```bash
    pip install factordb-python
    factordb 16
    ```
- [yafu](https://sourceforge.net/projects/yafu/) - 在 p，q 的取值差异过大，或者 p，q 的取值过于相近的时候，Format 方法与 Pollard rho 方法都可以很快将 n 分解成功。yafu 将其自动化实现了
    ```bash
    yafu "factor(82748279383502845283943271120712436408030814624973629060064917325126552245423)"
    # 如果数比较大，那就需要将数保存成一个txt，然后使用
    # 注意：
    # 1. n 为十进制
    # 2. txt文件结尾必须有一个换行符
    # 3. 该命令会删除这个txt，注意保存
    yafu-x64.exe "factor(@)" -batchfile 1.txt
    ```