# IE漏洞学习笔记（一）Heap Spray
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
摘要:HeapSpray这个技术是IE漏洞利用中非常重要的一点，能够绕过很多利用一般技术很难绕过的保护机制（DEP/ASLR），虽然这并不是一种漏洞利用手法，但是这种手法确实值得我们去研究和掌握。
## 第一章Heap Spray
HeapSpray常见于浏览器漏洞利用中。
通常使用JavaScript创建大量由Nop和shellcode组成的字符串中。JavaScript运行的时候会将每一个字符串的数据存储在堆中的新块上。
堆的分配通常从起始地址向上增长。所以当我们在为字符串分配了200MB的内存之后，在50MB和200MB之间的大量内存空间都被我们的Nop所填充。此时如果程序存在漏洞，就能将EIP覆盖为这段内存空间的地址，程序将会被控制跳转执行到这些NOP指令并且最终滑向我们的shellcode。
需要注意的是，Heap
Spray并不是类似栈溢出/UAF之类的漏洞利用方式，而是一种常见于浏览器攻击的shellcode布置方式，是在找到漏洞之后，为了绕过ASLR/DEP之类的保护机制的一类绕过技巧。
###  1.1堆喷射原理
在IE漏洞案例中，使用javascript申请200MB内存。其中的结构大概如下
分为200个1MB的块（slide），每个块由 大量的nops和一条shellcode组成。
    ---1MB---    
    nop
    nop
    nop
    shellcode
    ---1MB---    
    nop
    nop
    nop
    shellcode
    -----    
    .....
    ---1MB---    
    nop
    nop
    nop
    shellcode
    -----    
当Javascript成功申请这些的内存的时候，这些数据会覆盖到0x0c0c0c0c的位置，这样只需要通过缓冲区溢出漏洞将EIP修改为0x0c0c0c0c就能跳转到这个位置。
而slide中存在大量的nops，只要EIP跳转到nops中就会顺利地滑动到shellcode执行，因为shellcode的长度相对于1MB是非常短的，所以成功率并不低。
###  1.2 javascript堆管理
案例代码
    var nop="u9090u9090";
    while(nop.length
如图所示，堆内存只分配到了0x211000，而0x0ccc0000之后也不是我们分配的内存。
所以实验中，堆并没有为我们分配对应的内存空间，我查询了javascript的内存管理并没有找到具体原因，个人猜测可能是因为填充的数据都是相同的u9090,所以内存就自动优化不进行分配了。可能是来自于windows系统的堆分配优化。
不过解决方案也很简单，实验中将slide添加上一段非u9090的代码时，成功申请了大量堆内存，并且覆盖到了0x0c0c0c0c地址。
修改后的代码
    shellcode="u1234u1234u1234u1234u1234u1234u1234u1234u1234u1234u1234u1234";
    var nop="u9090u9090";
    while(nop.length
成功分配堆内存，可以进入0x0c0c0c0c内存查看具体分配状况。
## 第二章IE漏洞分析
让我们寻找一个相对方便入手的CVE调试来掌握堆喷射技术
###  2.1MS06-055分析
实验环境
系统版本：Windows XP SP1
IE版本：IE6（IE5.x或6.x均可）
Vgx.dll版本：6.0.2800.1106（低于6.0.2900.2997即可）
###  2.1.1 漏洞简介
MS06-055漏洞的出发点在IE浏览器的vgx.dll中，
该文件的可以在C:Program FilesCommonFilesMicrosoft SharedVGX下找到
漏洞成因是SHADETYPE_TEXT::Text(ushortconst
*,int)函数对标签的method属性的值缺乏长度检查而导致的栈溢出。
###  2.1.2 VML简介
vml_test.html
    migraine
###  2.1.3 vgx.dll分析
使用IDA分析vgx.dll
IDA符号表导入方案
[不过由于windows xp现在已经下载不到符号表了，所以这次实验也就用不了]
触发漏洞的函数是_IE5_SHADETYPE_TEXT::TOKENS::TEXT,但是在没有载入符号表的情况下我们是无法直接在IDA中搜索的。尽管我们知道这个函数的地址为0x5AD02D1B
测试环境下Windows XP
SP1的vgx.dll版本为6.0.2800.1106，如果系统不同，DLL版本不同也会造成偏差。下文会分析如何在没有符号表的情况下确定这个函数的位置。
不过，首先我们先对这个函数存在的漏洞进行分析。
实际漏洞触发函数是位于text：5AD02D5A 的call sub_5AD02CC0,
字符串没有检测长度，而产生栈溢出。进入这个函数，结合动态调试，确定loc_5AD02CDE->loc_5A02CFE构成的这个循环是造成溢出点的代码。
0x5AD02CF8地址的存放是拷贝的代码，而0x5AD02D04则是循环判断代码。
[ecx+4]存放着输入数据的长度，edx每次循环加二，直到和输入字符串长度相等才停止。
没有存在任何长度的检查或者限制，所以这是导致栈溢出的原因。
动态调试也应证了我的判断，给拷贝字符串的命令下断点，此时DX存放的数据是0x0c就是我们要存放的数据，EDI存放着需要拷贝的地址。而观察此时[ECX+4]
的位置，也存放着我们字符串的长度，此处不再赘述。
###  2.1.4 栈溢出调试
首先打开我们的vml_test.html,打开ImmunityDbg将进程附加到IE浏览器上。
此时因为我们的vml_test内部调用了vml所以IE自然会载入vgx.dll模块，通过模块查询可以发现，vgx.dll已经载入。
因为Windows XP并没有开启ASLR，所以vgx.dll的基地址和IDA预测的没有区别，直接Ctrl+G进入0x5AD02D1B下断点。
在地址栏中刷新我们的地址，可以看到程序断点在了存在漏洞的函数入口。这样如果需要调试poc，只需要修改我们的vml_test.html，然后刷新浏览器就能进行测试了。