2、系统视图和管理函数增强     
PostgreSQL 14 includes numerous improvements on what information can be monitored, including :  
the ability to track progress on COPY using the pg_stat_progress_copy view.   
- [《PostgreSQL 14 preview - pg_stat_progress_copy增强 , COPY 导入数据支持进度监控 , 导入多少行, 排除多少行(where filter)》](../202103/20210310_02.md)        
This release lets you track WAL activity from the pg_stat_wal view,   
- [《PostgreSQL 14 preview - 新增pg_stat_wal统计信息视图》](../202010/20201003_02.md)        
and inspect replication slot statistics from the pg_stat_replication_slots view.  
- [《PostgreSQL 14 preview - 新增 replication slot 监控 - pg_stat_replication_slots》](../202010/20201010_01.md)        
- [《PostgreSQL 14 preview - pg_locks 增加 wait_start 字段, 跟踪锁等待开始时间》](../202102/20210207_01.md)        
- [《PostgreSQL 14 preview - SaaS特性 - 会话建立、资源消耗时间片 统计 - pg_stat_database 指标增加》](../202101/20210118_01.md)        
- [《PostgreSQL 14 preview - pg_stat_database 新增会话消耗统计 - 如何分析数据库有没有性能瓶颈, 瓶颈是什么? top瓶颈是什么? 如何优化?》](../202103/20210301_01.md)        
- [《PostgreSQL 14 preview - 支持绑定变量语句(prepared statements)的 custom_plans 与 generic_plans 次数统计》](../202007/20200720_01.md)        
支持memory context内容监控:    
查看backend process的memory context  
打印其他会话的memory context, 诊断内存消耗问题 - pg_backend_memory_contexts(pid)  
- [《PostgreSQL 14 preview - 查看backend process的memory context》](../202011/20201110_01.md)      
- [《PostgreSQL 14 preview - 打印其他会话的memory context, 诊断内存消耗问题 - pg_backend_memory_contexts(pid)》](../202104/20210407_06.md)      
3、服务端配置(GUC):      
- [《PostgreSQL 14 preview - log_recovery_conflict_waits - standby query&startup process conflict 恢复冲突 超时(timeout)配置,日志打印》](../202101/20210108_02.md)        
- [《PostgreSQL 14 preview - 新增track_wal_io_timing参数, 支持wal日志buffer write, fsync IO等待时长统计 , pg_stat_wal》](../202103/20210310_04.md)        
These include idle_session_timeout, which can close idle connections after the specified period,   
- [《PostgreSQL 14 preview - 支持会话超时参数 - idle_session_timeout》](../202101/20210107_06.md)      
增加 client_connection_check_interval 参数, 协议层支持心跳包, 如果客户端已离线 可以 快速中断 运行中的长SQL - Detect POLLHUP/POLLRDHUP while running queries  
- [《PostgreSQL 14 preview - client_connection_check_interval , 协议层支持心跳包, 如果客户端已离线 可以 快速中断 运行中的长SQL - Detect POLLHUP/POLLRDHUP while running queries》](../202104/20210403_01.md)      
4、Utility Commands      
- [《PostgreSQL 14 preview - reindex 增加 tablespace 选项, 支持重建索引到指定表空间》](../202102/20210205_01.md)        
The REINDEX command can now process all of the child indexes of a partitioned table,   
- Allow REINDEX to process all child tables or indexes of a partitioned relation (Justin Pryzby, Michael Paquier)      
5、Additional Modules      
- [《PostgreSQL 14 preview - corrupted tuple 修复功能 - pg_surgery》](../202009/20200911_01.md)        
- [《PostgreSQL 14 preview - 新增 old_snapshot 插件, 打印快照跟踪条目(每分钟一条, OldSnapshotTimeMapping结构)的内容 , old_snapshot_threshold 相关》](../202102/20210215_02.md)        
and PostgreSQL 14 adds the pg_amcheck utility to help check for data corruption.  
- [《PostgreSQL 14 preview - amcheck插件增加heap table数据页格式错误、逻辑错误检测功能》](../202010/20201024_02.md)      
## 四、流复制与备份恢复      
1、长事务逻辑复制优化, 增加streaming接口, 逻辑复制支持流式decoder和发送, 无需等待事务结束, 大幅度降低大事务、长事务的复制延迟  
- 场景: 多机房部署、单元化部署、跨库同步订阅数据场景  
- 价值: 大幅度降低大事务、长事务的复制延迟  
2、逻辑复制sync table data阶段支持多线程, 允许同步全量数据的同时接收wal逻辑日志, 可以缩短大表首次同步到达最终一致的耗时  
- 场景: 跨库逻辑订阅、数据迁移等场景  
- 价值: 缩短大表首次同步到达最终一致的耗时  
3、alter subscription语法增强, 支持add/drop publication  
- 场景: 逻辑订阅  
- 价值: 提高订阅端的操作便捷性  
- DEMO:
```
Command:     ALTER SUBSCRIPTION
Description: change the definition of a subscription
Syntax:
ALTER SUBSCRIPTION name CONNECTION 'conninfo'
ALTER SUBSCRIPTION name SET PUBLICATION publication_name [, ...] [ WITH ( set_publication_option [= value] [, ... ] ) ]
ALTER SUBSCRIPTION name ADD PUBLICATION publication_name [, ...] [ WITH ( set_publication_option [= value] [, ... ] ) ]
ALTER SUBSCRIPTION name DROP PUBLICATION publication_name [, ...] [ WITH ( set_publication_option [= value] [, ... ] ) ]
ALTER SUBSCRIPTION name REFRESH PUBLICATION [ WITH ( refresh_option [= value] [, ... ] ) ]
ALTER SUBSCRIPTION name ENABLE
ALTER SUBSCRIPTION name DISABLE
ALTER SUBSCRIPTION name SET ( subscription_parameter [= value] [, ... ] )
ALTER SUBSCRIPTION name OWNER TO { new_owner | CURRENT_ROLE | CURRENT_USER | SESSION_USER }
ALTER SUBSCRIPTION name RENAME TO new_name
URL: https://www.postgresql.org/docs/14/sql-altersubscription.html
```
4、recovery 性能增强 - recovery_init_sync_method=syncfs - 解决表很多时, crash recovery 递归open所有file的性能问题 - 需Linux新内核支持  
- 场景: 通用  
- 价值: 提高数据库崩溃恢复效率  
- DEMO:
```
postgres=# select * from pg_settings where name='recovery_init_sync_method';
-[ RECORD 1 ]---+----------------------------------------------------------------------------
name            | recovery_init_sync_method
setting         | fsync
unit            | 
category        | Error Handling
short_desc      | Sets the method for synchronizing the data directory before crash recovery.
extra_desc      | 
context         | postmaster
vartype         | enum
source          | default
min_val         | 
max_val         | 
enumvals        | {fsync}
boot_val        | fsync
reset_val       | fsync
sourcefile      | 
sourceline      | 
pending_restart | f
```
5、允许hot standby 作为pg_rewind的源库  
- 场景: 通用, 高可用  
- 价值: 可以使用standby来修复坏库  
6、增加 remove_temp_files_after_crash GUC参数, 在数据库crash后重启时自动清理临时文件  
- 场景: 通用  
- 价值: 避免数据库遇到连续性崩溃恢复问题时可能导致存储爆满的问题  
- DEMO:
```
postgres=# select * from pg_settings where name='remove_temp_files_after_crash';
-[ RECORD 1 ]---+--------------------------------------------
name            | remove_temp_files_after_crash
setting         | on
unit            | 
category        | Error Handling
short_desc      | Remove temporary files after backend crash.
extra_desc      | 
context         | sighup
vartype         | bool
source          | default
min_val         | 
max_val         | 
enumvals        | 
boot_val        | on
reset_val       | on
sourcefile      | 
sourceline      | 
pending_restart | f
```
7、standby wal receiver 接收时机优化, 无需等待startup process replay结束, 大幅度降低standby在重启后的wal接收延迟  
- 场景: 基于流复制的只读实例, 基于流复制的高可用等场景  
- 价值: 大幅度降低standby在重启后的wal接收延迟  
### 详见  
1、PostgreSQL 14 adds numerous performance benefits for logical replication, including :   
the ability to stream in-progress transactions to subscribers instead of waiting for them to be completed.   
- [《PostgreSQL 14 扩展逻辑decoding API 应对长事务逻辑复制优化 - Extend the logical decoding output plugin API with stream methods.》](../202008/20200803_11.md)      
- [《PostgreSQL 14 preview - 逻辑复制 支持长事务 流式发送接口, 已覆盖内置pub/sub logical replication - 规避长事务需要transaction end后才能往sub端发送解析结果》](../202105/20210512_01.md)        
- [《PostgreSQL 14 preview - 内置逻辑复制功能增强 , Allow multiple xacts during table sync in logical replication.》](../202102/20210213_01.md)        
The ALTER SUBSCRIPTION makes it easier to add/remove publications using the new ADD/DROP PUBLICATION syntax.  
- [《PostgreSQL 14 preview - 内置订阅功能alter subscription语法增强,支持add/drop publication》](../202104/20210407_05.md)      
2、There are performance improvements in PostgreSQL 14 to how PostgreSQL starts up when in crash recovery,   
- [《PostgreSQL 14 preview - recovery 性能增强 - recovery_init_sync_method=syncfs - 解决表很多时, crash recovery 递归open所有file的性能问题 - 需Linux新内核支持》](../202103/20210320_02.md)      
3、and you can now use pg_rewind on a PostgreSQL instance that is in standby mode.  
- [《PostgreSQL 14 preview - 允许hot standby 作为pg_rewind的源库》](../202105/20210513_01.md)        
4、自动清理临时文件 after backend crash restart - GUC : remove_temp_files_after_crash  
- [《PostgreSQL 14 preview - 自动清理临时文件 after backend crash restart - GUC remove_temp_files_after_crash》](../202105/20210519_01.md)    
5、wal receiver 接收时机优化  
- [《PostgreSQL 14 preview - wal接收优化,无需等待startup process replay结束. Unnecessary delay in streaming replication due to replay lag》](../202010/20201010_07.md)        
## 五、安全  
1、新增 pg_read_all_data , pg_write_all_data 角色, 支持一次性赋予tables/views/sequences对象的读、写权限  
- 场景: 通用  
- 价值: 提高DBA管理效率, 支持只读角色, 只写角色.  
- DEMO:
```
postgres=# select * from pg_roles ;
          rolname          | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolconnlimit | rolpassword | rolvaliduntil | rolbypassrls | rolconfig | oid  
---------------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+-------------+---------------+--------------+-----------+------
 postgres                  | t        | t          | t             | t           | t           | t              |           -1 | ********    |               | t            |           |   10
 pg_database_owner         | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 6171
 pg_read_all_data          | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 6181
 pg_write_all_data         | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 6182
 pg_monitor                | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 3373
 pg_read_all_settings      | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 3374
 pg_read_all_stats         | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 3375
 pg_stat_scan_tables       | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 3377
 pg_read_server_files      | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 4569
 pg_write_server_files     | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 4570
 pg_execute_server_program | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 4571
 pg_signal_backend         | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 4200
(12 rows)
postgres=# create role ro login;
CREATE ROLE
postgres=# grant pg_read_all_data to ro;
GRANT ROLE
postgres=# \c postgres ro
You are now connected to database "postgres" as user "ro".
postgres=> select * from tbl limit 1;
   id   |        col1        |             ts             
--------+--------------------+----------------------------
 982190 | 0.4573622822054517 | 2021-05-24 18:23:00.615677
(1 row)
postgres=> \du+ ro
                       List of roles