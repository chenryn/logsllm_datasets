the last position belonging to the direction ﬁeld and the end
of the target ﬁeld, corresponds to a variable length ﬁeld.
For example, in Figure 3, when the length ﬁeld at positions
12-13 is used to access positions 18-20, we identify every-
thing in between (i.e., 14-17) to be a variable-length ﬁeld.
Thus, if a ﬁxed-length ﬁeld follows the variable length ﬁeld
and it is not used by the program either because the ﬁeld is
not needed or not supported by the program, then we will
include the ﬁxed-length ﬁeld as part of the variable length
ﬁeld.
Note that our approach detects direction ﬁelds by look-
ing at pointer increments and thus, it is independent of the
encoding used in the direction ﬁeld. In contrast, previous
work uses techniques for identifying length ﬁelds that as-
sume the length is encoded using some pre-deﬁned encod-
ing, such as the number of bytes or words in the ﬁeld [17,
18]. Thus, those techniques would miss direction ﬁelds if
they use other encodings, which do not belong to the set of
pre-deﬁned encodings being tested.
Pointer decrements:
So far, we have described tech-
niques that consider only pointer increments. There are
some types of direction ﬁelds such as backward pointers,
commonly used in DNS replies, which are used to decrement
a pointer rather than increment it. Suppporting pointer
decrements would require modifying our techniques to ac-
count for target ﬁelds that have already been explored. We
believe the needed modiﬁcations to be small and plan to
implement them in the near future.
5. SEPARATOR AND KEYWORD
EXTRACTION
In this section we describe our techniques for identifying
separators and keywords.
5.1 Separator Extraction
5.1.1 What is a separator?
Separators are elements used by protocols to mark the
boundary of variable-length ﬁelds. A separator is a pair of
two elements: 1) a constant value, and 2) a scope. The
constant value marks the boundary of the ﬁeld, while the
scope contains a list of position sequences in the application
data, where the separator is used.
If the separator is used to separate ﬁelds, then it will have
to be compared against each byte in the application data
and its scope will be the position sequence that encompasses
all positions, from zero to the number of bytes received.
For example, in Figure 2 the Carrier-Return plus Line-Feed
(\r\n) sequence at positions 14 and 15 is a ﬁeld separator,
and its scope would be 0 through 15. On the other hand,
the scope of an in-ﬁeld separator, used to separate diﬀerent
elements inside a ﬁeld, will usually be the position sequence
where the ﬁeld appears. For example, in Figure 2 the slash
character could be used to separate the HTTP keyword from
the version number, and its scope would be 6 through 13.
Protocols can have multiple separators, usually for diﬀer-
ent scopes: one for message end, another for ﬁeld end and
possibly various in-ﬁeld separators. Also, sometimes multi-
ple separators can be used at the same scope. For example
in HTTP both the space (0x20) and the tab (0x09) are in-
ﬁeld separators, used in diﬀerent ﬁelds to separate the ﬁeld
name from the ﬁeld data.
Separators are part of the protocol speciﬁcation and are
known to the implementations of the protocol. They can
be used in binary, text or mixed protocols. For example
separators are used in HTTP which is mainly a text protocol
and also used in Samba which is mainly a binary protocol.
Separators can be formed by one or more bytes. For example
HTTP uses Carrier Return plus Line Feed (0x0d0a) as ﬁeld
separator, while Samba uses a null byte (0x00) to separate
dialect strings inside a Negotiate Protocol Request.
5.1.2 Techniques for identifying the separators:
To ﬁnd the ﬁeld boundaries, programs need to identify
the value and location of any separator that appears in the
application data. This is done by comparing the diﬀerent
bytes received from the network against the separator values
and when a true comparison is seen, a ﬁeld boundary has
been found1.
Clearly, not all true comparisons against constants are
separators. What distinguishes a separator from another
constant is that the separator needs to be compared against
most (usually all) the bytes in its scope. For example a
message separator would be compared against all bytes re-
ceived. The same applies to a ﬁeld separator, but an in-ﬁeld
separator would only be compared against the bytes in that
1If the data contains the separator value, escape sequences
can be used.
Tokens(cid:13)
0(cid:13)
X(cid:13)
X(cid:13)
0x0a (\n)(cid:13)
0x47 (G)(cid:13)
0x45 (E)(cid:13)
0x54 (T)(cid:13)
0x2f (/)(cid:13)
Offset Positions(cid:13)
1(cid:13)
5(cid:13)
4(cid:13)
2(cid:13)
3(cid:13)
X(cid:13)
X(cid:13)
X(cid:13)
X(cid:13)
X(cid:13)
6(cid:13)
X(cid:13)
X(cid:13)
X(cid:13)
X(cid:13)
X(cid:13)
X(cid:13)
Figure 4: Token table. Each entry in the tokens-at-
position table represents one column of the token
table. Each entry in token-series represents one row
of the token table.
speciﬁc ﬁeld. Since the scope of message and ﬁeld sepa-
rators are the same, currently we cannot distinguish them.
We assume synchronous protocols to identify the message
boundaries.
To ﬁnd the separators, we look for tokens that are com-
pared against consecutive positions in the stream of data.
Note that we do not require these comparisons to appear
in consecutive instructions, only in consecutive positions of
the buﬀer. That is, we do not require the program to per-
form a sequential scan of the buﬀer looking for the separator.
This is more general since a program could for example scan
backwards to ﬁnd an in-ﬁeld separator.
Our concept of a comparison extends to multiple instruc-
tions that compilers use to compare operands. In addition to
normal comparison operations, we also include substraction
operations, string comparisons and some operations that
compilers use to cheaply compare if an operand has zero
value, such as performing a logical AND operation with it-
self using a test instruction.
Currently, we identify separators in a three-step process:
First, we generate a summary of all the program’s compar-
isons involving tainted data. Then, we use this summary to
extract byte-long separator values. Finally, we extend sep-
arator bytes into multi-byte separators, if needed. We now
explain these three steps in detail.
1) Generating the token tables: The ﬁrst step is to
extract a summary of all the programs’s comparisons. This
summary is shown in Figure 4 as a conceptual token ta-
ble, that displays the comparisons performed by the Apache
webserver on the ﬁrst 7 bytes of a HTTP GET request. The
rows represent token values that appear in comparisons and
the columns represent positions in the application data. A
token is a byte-long value. An X in the table means that
the token from that row was compared, at some point in the
program, against the positions from that column.
We implement this conceptual token table using two hash
tables: the tokens-at-position table and the token-series ta-
ble. The token-series table contains for each token, all the
buﬀer positions to which the token was compared, thus each
entry corresponds to a row of the token table. The tokens-
at-position table contains for each buﬀer position, the or-
dered list of tokens that it was compared against, thus each
entry corresponds to a row of the token table. The tokens-
at-position and the token-series tables are also used in the
keyword extraction module.
To populate the tables, we scan the execution trace and for
each comparison found that involves at least a tainted byte,
we update the tables with the token, the position, the value
it was compared against, and the result of the comparison.
2) Extracting byte-long separators:
Our intuition
is that any comparison between a tainted byte and a non-
tainted byte, can potentially denote a separator. Thus we
scan the token-series table and for each token, we extract the
list of consecutive buﬀer positions it was compared with. We
require a minimum series length of three, to avoid spurious
comparisons. We also require the token to appear in at least
one position in the series to avoid easy obfuscation by gen-
erating innocuous comparisons. The output of this phase
is a list of byte-long separators with the associated context
(i.e., positions) where they are used.
3) Extending separators: When a separator value con-
sists of multiple bytes, such as the ﬁeld separator in HTTP
(0x0d0a), the program can use diﬀerent ways to ﬁnd it, such
as searching for the complete separator, or only searching
for one separator byte and when it ﬁnds it, checking if the
remaining separator bytes are also present. Thus, in our
previous phase we might have identiﬁed only one byte of
the separator or all the bytes but as independent byte-long
separators.
In this last phase, we try to extend each candidate sepa-
rator. For each appearance of the byte-long separator in its
context, we check the value of the predecessor and successor
positions in the application data. If the same value always
precedes (or succeeds) the byte-long separator being ana-
lyzed, and the program performs a comparison against that
value, then we extend the separator to include that value.
We do not extend byte-long separators that appear less than
a minimum number of times in the session data (currently
four) to avoid incorrectly extending a separator. Also, we
don’t extend any separator beyond a maximum length (cur-
rently four), since long separators are uncommon.
Note that our approach does not assume any separator
value. Thus, we can potentially support any unknown pro-
tocol that uses separators. This is in contrast to previous
work that assumes the separators to be white space, tab or
any non-printable byte [17].
Multiple valid separators for the same scope: Pro-
tocols might use multiple separators for the same scope. For
example, HTTP allows both space and tab as valid separa-
tors in the Status-Line. Thus, in Figure 2 any of the spaces
at oﬀsets 3 and 5 could be replaced by a tab. Note that, even
if multiple separators are allowed, the application receiving
the message does not know apriori which separator was used
and therefore it needs to compare the received data against
each of the valid separators in the context. This presents us
with a trade-oﬀ. As explained in step 2 above, we require
a token to appear in at least one position in the sequence
of comparisons before marking it as a byte-long separator.
This helps to avoid easy obfuscation by generating innocu-
ous comparisons, but it does not allow us to detect other
valid separators in the context if they are not present in
the message. Thus, currently our default behavior favors
robustness against obfuscation, but we allow the analyst to
manually change this default behavior to allow detection of
other separators not present in the message.
5.2 Keyword Extraction
5.2.1 What is a keyword?
We have deﬁned keywords to be protocol constants that
appear in the received application data. As explained in
Section 2, in this work, we do not attempt to extract all
protocol constants, since there are constants, such as the
maximum length of a ﬁeld, that never appear in the ap-
plication data. The problem is to extract the subset of all
protocol constants, that are 1) supported by the implemen-
tation, and 2) present in the application data received by the
program. Thus, we want to identify which segments of the
application data correspond to protocol keywords supported
by the implementation. In the near future, we plan to com-
bine our dynamic approach with additional static analysis
to locate other protocol constants that do not appear in the
application data.
Any protocol, whether text-encoded, binary-encoded or
mixed can use keywords. Keywords can be strings (i.e., the
HTTP Host ﬁeld name) or numbers (i.e., the version in the
IP header). One can be misled to think that in text-encoded
protocols, keyword extraction is trivial, but given the dif-
ferent text encodings and the problem of distinguishing a
keyword from other data (i.e., user or session data), this is
not commonly so.
5.2.2 Techniques for identifying the keywords:
Keywords are known a priori by the protocol implemen-
tations. Thus, when application data arrives, the program
compares the keywords against the received application data.
Our intuition is that one can locate the protocol constants
present in the session data by following the true comparisons
between tainted and untainted data.
The keyword extraction process is comprised of two phases.
The ﬁrst phase is identical to the ﬁrst phase of the separa-
tor extraction module, that is, to populate the tokens-at-
position and token-sequences tables. The second phase dif-
fers in that it focuses on the true comparisons, rather than
all the comparisons. It consists of exploring, in ascending
order, each position in the tokens-at-position table. For each
position, if we ﬁnd a true comparison, then we concatenate
the non-tainted token to the current keyword.
If no true
comparison was performed at that position, we store the
current keyword and start a new one at that position. We
also break the current keyword and start a new one if we
ﬁnd a separator value in the middle of the keyword. Note
that our approach is general, in that it does not assume that
the multiple bytes that form the keyword appear together
in the code or that they are used sequentially.
In addition to protocol keywords, conﬁguration informa-
tion such as DNS records, or HTML ﬁlenames can also be
seen when analyzing the true comparisons. To diﬀerentiate
between conﬁguration information and protocol keywords,
we need to deﬁne ﬁle reads also to contain sensitive infor-
mation and thus data read from ﬁle also becomes tainted,
though with diﬀerent taint origin, ﬂow identiﬁer and oﬀset
values.
6. FIXED-LENGTH FIELD EXTRACTION
In Sections 4 and 5.1 we have presented our techniques to
identify the boundaries of variable-length ﬁelds. In this Sec-
tion we present our techniques to identify the boundaries
of ﬁxed-length ﬁelds. As deﬁned in Section 2, a ﬁeld is a
contiguous sequence of application data with some mean-
ing. As such, programs take decisions based on the value of
the ﬁeld as a whole. Thus, when a ﬁeld is composed of mul-
tiple bytes, those multiple bytes need to be used together,
forming a semantic unit that can be used in arithmetic oper-
ations, comparisons or other instructions. In addition, most
ﬁelds are independent of other ﬁelds, so bytes belonging to
diﬀerent ﬁelds rarely are used in the same instruction. The
exception to this rule are special relationships such as length
ﬁelds, pointer ﬁelds or checksums.
Our approach for identifying multiple bytes belonging to
Initially, we consider each
the same ﬁeld is the following.
byte received from the network as independent. Then, for
each instruction, we extract the list of positions that the
taint data involved in the instruction comes from. Next, we
check for special relationships among bytes, speciﬁcally in
this paper we check for direction ﬁelds, using the techniques
explained in Section 4.1. If no direction ﬁeld is found, then
we create a new ﬁxed ﬁeld that encompasses those posi-
tions. For example if an instruction uses tainted data from
positions 12-14 and those positions currently do not belong
to a length ﬁeld, then we create a ﬁxed ﬁeld that starts at
position 12 and has length 3.
If a later instruction shows a sequence of consecutive tainted
positions that overlaps with a previously deﬁned ﬁeld, then
we extend the previously deﬁned ﬁeld to encompass the
newly found bytes. One limitation is that ﬁxed-length ﬁelds
longer than the system’s word size (four bytes for 32-bit ar-
chitectures, eight for 64-bit architectures) cannot be found,
unless diﬀerent instructions overlap on their use. Note that
ﬁelds larger than 4 bytes are usually avoided for this same
reason, since most systems have 32-bit architectures where
longer ﬁelds need several instructions to be handled. For
ﬁelds longer than 4 bytes, our message format truncates