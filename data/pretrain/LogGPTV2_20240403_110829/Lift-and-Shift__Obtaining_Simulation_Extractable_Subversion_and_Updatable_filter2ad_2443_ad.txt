i
t
i
m
i
r
p
c
i
r
t
e
m
m
y
S
k
r
o
w
e
m
a
r
F
.
m
o
c
h
s
a
h
+
F
R
P
C
A
M
H
15
compatible with the ﬁeld induced by BLS12-381, i.e., for Poseidon and Rescue.
The table also provides various diﬀerent PRF constructions. Where possible, we
use a Sponge-based approach [BDPV08] akin to SHAKE256. For comparison,
we also consider a feed-forward PRF built as fs(x) = E(s, x) ⊕ x from LowMC
where E denotes the encryption of a block. While we expect this construction
to be secure in the ideal cipher model, no security analysis of LowMC or any
of the other SNARK-friendly ciphers is available for this type of construction.14
In the case of SHA256, we consider three variants that can partly also be ob-
served in practice – directly using the HMAC output as PRF and the one from
TLS 1.2 [DR08]. Regardless of the concrete choice, even the rather expensive
SHAKE256 PRF is a better choice than any of the SHA256-based ones.
We stress that the numbers in Table 1 should be treated as lower bounds.
One the one hand, as the security analysis of these primitives evolves, the rather
aggressive choice of round numbers may need to be increased. Considering that
the STARK-friendly hash challenge was almost immediately solved for the low
security instances of MiMC, GMiMC, and Poseidon, we expect those numbers to
grow. Indeed, the numbers for the recommended Rescue instance [BSGL20] are
higher. On the other hand, for some of the instantiations, it might not be imme-
diately clear if they actually provide the ﬁxed-value-key-binding property. For
a very conservative instantiation, one could fallback to the tree-based approach
by Fischlin [Fis99], which would be even more expensive, since then every PRF
evaluation would internally call the PRF multiple times.
Other Important Remarks Furthermore, besides more eﬃcient instantiations
than within the original C∅C∅ framework, our approach based on ﬁxed-value-
key-binding PRFs also circumvents another issue in concrete instantiations. Hash
commitments can only be proven secure in the ROM, which would require to
prove preimages of a random oracle. Hence, the construction is impossible to
properly instantiate with provable security guarantees. In any case, the choice
of a commitment based on symmetric primitive comes with other drawbacks as
well. Since such a commitment lacks any useful algebraic structure, it is not
obvious how to obtain SE updatable SNARKs.
Regarding the choice of strongly unforgeable one-time signature schemes,
Groth’s sOTS (as discussed in this paper) or Boneh-Boyen signatures [BB04]
(as proposed in other instantiations of C∅C∅ [AB19, Bag19]) would be nat-
ural choices, especially when considering the underlying SNARKs already rely
on discrete logarithm assumptions (in bilinear groups). Alternatively, any strong
EUF-CMA secure signature such as Schnorr would ﬁt as well. We note, however,
while this choice would avoid the need for a pairing evaluation for signature ver-
14 This construction is similar to Davies-Meyer hash function for a ﬁxed input size
which is secure in the ideal cipher model [BRS02]. If the PRF is ﬁxed-value key-
binding, then the so obtained hash function is collision resistant with respect to a
ﬁxed postﬁx.
16
iﬁcation (in the case of Boneh-Boyen) and the proof overhead would be slightly
smaller, Schnorr provides the necessary security guarantees only in the ROM.15
Putting everything together, instantiating the C∅C∅ or OC∅C∅ framework
with concrete symmetric primitives is non-trivial and comes with some limita-
tions. Subsequently, we will propose an alternative framework Lamassu, which
comes with the same cost as the most aggressive choice of symmetric-key prim-
itive and in contrast to C∅C∅ also provides SE updatable SNARKs.
3.2 The Lamassu Framework
Now, we introduce the Lamassu framework, which builds upon the recent com-
piler to obtain SE-NIZK proposed in [DS19]. However, we want to stress that we
cannot directly use their compiler in order to construct SE updatable SNARKs
and this requires non-trivial changes. The ingredients of their construction are
to use a combination of an EUF-CMA secure adaptable key-homomorphic sig-
nature scheme Σ (Schnorr or ECDSA are prime candidate for pairing based
SNARKs) and a strongly unforgeable one-time signature (sOTS) scheme ΣOT
(Groth’s sOTS under the discrete logarithm assumption is a prime candidate)
to add the required non-malleability guarantees to the underlying knowledge
sound NIZK proof system Π together with the folklore OR-trick to add simula-
tion soundness. The distinguishing feature of this transformation is that in the
proof computation one computes a signature to certify a public key of OTS using
freshly sampled signing key sk of Σ in plain and thus does not need to encrypt
a signature and prove that it veriﬁes with a veriﬁcation key in the CRS (e.g., as
done in [Gro06]). Consequently, in the OR part of the proof one just needs to
prove that one knows the shift csk (which is the trapdoor of the CRS) to adapt
signatures from pk to ones valid under veriﬁcation key cpk in the CRS. As it
turns out, this feature lays the foundation for being able to support updatability.
Now, given any language L with NP relation RL, the language obtained via the
compiler is L(cid:48) s.t. {(x, cpk, pk), (w, csk − sk)} ∈ RL(cid:48) iﬀ:
{(x, w) ∈ RL ∨ cpk = pk · µ(csk − sk)} .
More precisely, in every proof computation one uses Σ to “certify” the public key
of a newly generated key pair of ΣOT. The secret key of ΣOT is then used to sign
the parts of the proof which must be non-malleable. Adaptability of Σ makes
it possible to also use newly generated keys of Σ upon each proof computation.
In particular, the relation associated with L(cid:48) is designed so that the additional
clause introduced via the OR-trick is the “shift amount” required to shift such
signatures to signatures under a key cpk of Σ in the CRS. A proof for x ∈ L
is easy to compute when given w such that (x, w) ∈ Lπ. One does not need a
15 In private correspondance, A. Kosba conﬁrmed that their implementation used a
non-malleable variant of ECDSA for benchmarking. To the best of our knowledge,
this variant is suspected to be strongly unforgeable without proof so far. Thus we
consider Schnorr as a candidate. Performance and overhead are expected to be the
same.
17
satisfying assignment for the second clause in the OR statement, and can thus
compute all signatures under newly generated keys. To simulate proofs, however,
one can set up CRS in a way that we know csk corresponding to cpk, compute
the “shift amount” and use it as a satisfying witness for the other clause in the
OR statement. We recall the construction in Fig. 2 and for completeness recall
the Theorem given in [DS19] below.16 We note that for non black-box extraction
as it is the case with SNARKs, the trapdoor tcext = ⊥ and one simply uses the
non black-box extractor of the underlying SNARK.
Theorem 1 ([DS19]). Let Π be a complete, witness indistinguishable non-
interactive argument of knowledge system for the language L, let Σ be an EUF-
CMA secure signature scheme that adapts signatures, and let ΣOT be a strongly
unforgeable one-time signature scheme, then the argument system Π(cid:48) is a com-
plete and strong simulation extractable argument system for language L(cid:48).
Note that the theorem clearly applies to any proof system that is zero-knowledge,
as this implies the weaker notion of witness-indistinguishability.
Applying [DS19] to NIZKs without knowledge soundness We now argue
that, although we do not require it in context of SNARKs, analogous to the
folklore compiler used in [KZM+15], we can also start from any NIZK that is
only sound instead of knowledge sound. Then, using the compiler in [DS19]
we still can obtain SE-NIZK when starting from any conventional NIZK. More
precisely, the by now folklore compiler [DP92] to obtain knowledge soundness
for any sound NIZK is to put a public key pke of any perfectly correct IND-
CPA secure public key encryption scheme into the CRS, where the extraction
trapdoor tcExt is the corresponding secret key, and extend the language such
that it contains an encryption of the witness of the original language. We will
capture this in the following corollary, where starting from a NIZK for L with
NP relation RL, we obtain a knowledge sound NIZK by extending the language
to L(cid:48) such that {(x, c), (w, ω)} ∈ RL(cid:48) iﬀ:
{(x, w) ∈ RL ∧ c = Enc(pke, w; ω)} .
Corollary 2. Let NIZK for language L be complete, sound, and zero-knowledge,
the public key encryption scheme be perfectly correct and IND-CPA secure, then
the NIZK for language L(cid:48) is complete, knowledge-sound and zero-knowledge.
The proof exactly follows the argumentation in [KZM+15] and is thus omitted.
We stress that if we base the compiler of [DS19] on a NIZK that is based on
standard or falsiﬁable assumptions that is only sound, then we require this addi-
tional encryption of the witness w. However, when we are relying on knowledge
assumption, as it is the case within SNARKs used in this paper, then we do not
need the language extension in Corollary 2 and simply use the non black-box
extractor of the underlying SNARK.
16 We note that what is called simulation sound extractable in [DS19] is called strong
simulation extractable in this paper in order to be aligned with the notation used in
the C∅C∅ framework.
18
KGencrs(R, auxR)
- (crsΠ, tcΠ, tcext) ← Π.KGen(R, auxR);
- (csk, cpk) ← Σ.KGen(1λ);
- crs := (crsΠ, cpk), tc := (tcΠ, csk); return crs.
P(crs, x, w)
- (sk, pk) ← Σ.KGen(1λ);
- (skOT, pkOT) ← ΣOT.KGen(1λ);
- πΠ ← Π.P(crs, x, (w,⊥)); σ ← Σ.Sign(sk, pkOT);
- σOT ← ΣOT.Sign(skOT, πΠ||x||pk||σ);
return π := (πΠ, pk, σ, pkOT, σOT).
V(crs, x, π)
- Parse π as (πΠ, pk, σ, pkOT, σOT);
- if Π.V(crsΠ, x, πΠ) = 0
∨ Σ.Verify(pk, pkOT, σ) = 0
∨ ΣOT.Verify(pkOT, πΠ||x||pk||σ, σOT) = 0 then return 0;
else return 1.
Sim(crs, x, tc)
- (sk, pk) ← Σ.KGen(1λ); (skOT, pkOT) ← ΣOT.KGen(1λ);
- πΠ ← Π.P(crs, x, (⊥, csk − sk); σ ← Σ.Sign(sk, pkOT);
- σOT ← ΣOT.Sign(skOT, πΠ||x||pk||σ);
- return π := (πΠ, pk, σ, pkOT, σOT).
Ext(crs, x, π, tcext)
- (w,⊥) ← Π.Ext(crs, x, π, tcext); return w.
Fig. 2. The generic SE-NIZK compiler from [DS19].
4
Instantiations of Lamassu
Now we are going to investigate instantiations of the Lamassu framework in
the malicious setting where the CRS could be subverted. We show how to in-
stantiate the Lamassu framework for subversion zk-SNARKs (Sub-zk-SNARK)
(i.e., [ABLZ17, Fuc18]) and for updatable zk-SNARKs (i.e., [GKM+18]), and
obtain SE Sub-zk-SNARK and SE updatable zk-SNARK constructions. While
the former case can directly be obtained from Lamassu as introduced, for the
latter case we need to introduce the novel notion of updatable signatures and use
the Lamassu framework with updatable signatures instead of key-homomorphic
ones.
Our subversion deﬁnition is adapted from Abdolmaleki et al. [ABLZ17, ALSZ20],
and that of update security is adapted from Groth et al. [GKM+18].
19
KGencrs(R, auxR)
- (crsΠ, tcΠ) ← Π.KGen(R, auxR);
- (csk, cpk) ← Σ.KGen(1λ);
- crs := (crsΠ, cpk), tc := (tcΠ, csk); return crs.
Vcrs(crs, ζ)
- Parse crs as (crsΠ, cpk);
- if Vcrs(crsΠ, ζΠ) = 0 then return 0; else return 1.
P(crs, x, w)
- (sk, pk) ← Σ.KGen(1λ);
- (skOT, pkOT) ← ΣOT.KGen(1λ);
- πΠ ← Π.P(crs, x, (w,⊥),⊥); σ ← Σ.Sign(sk, pkOT);
- σOT ← ΣOT.Sign(skOT, πΠ||x||pk||σ);
return π := (πΠ, pk, σ, pkOT, σOT).
V(crs, x, π)
- Parse π as (πΠ, pk, σ, pkOT, σOT);
- if Π.V(crs, x, πΠ) = 0 ∨ Σ.Verify(pk, pkOT, σ) = 0
∨ ΣOT.Verify(pkOT, πΠ||x||pk||σ, σOT) = 0 then return 0;
else return 1.
Sim(crs, x, tc)
- (sk, pk) ← Σ.KGen(1λ); (skOT, pkOT) ← ΣOT.KGen(1λ);
- πSim ← Π.Sim(crs, x, (w, tcΠ),⊥); σ ← Σ.Sign(sk, pkOT);
- σOT ← ΣOT.Sign(skOT, πSim||x||pk||σ);
return π := (πΠ, pk, σ, pkOT, σOT).
Fig. 3. The SE Sub-zk-SNARKs from Lamassu.
4.1 Subversion SNARK Instantiation
Consider a Sub-zk-SNARK (e.g., [ABLZ17, Fuc18]) for RL which consists of
PPT algorithms (KGencrs, Vcrs, P, V, Sim) and provides knowledge soundness. Let
ΣOT = (KGenOT, SignOT, VerifyOT) be a strongly unforgeable one-time signature
scheme and Σ be an adaptable EUF-CMA secure signature scheme (like Schnorr
or ECDSA). Using Lamassu in Section 3.2, given the language L with NP
relation RL, one can extend it to the new L(cid:48) language proposed in Section 3.2,
such that {(x, cpk, pk), (w, csk − sk)} ∈ RL(cid:48) iﬀ:
{(x, w) ∈ RL ∨ cpk = pk · µ(csk − sk)} .
We present the construction of SE Sub-zk-SNARKs in Fig. 3. And for La-
massu we can prove the following:
Theorem 2. Let the underlying Sub-zk-SNARK scheme satisfy perfect com-
pleteness, knowledge soundness, subversion zero-knowledge. Let Σ be an EUF-
CMA secure adaptable key-homomorphic signature scheme and ΣOT a strongly
20
unforgeable one-time signature scheme. Then the Sub-zk-SNARK from Fig. 3 is
(i) perfectly complete, (ii) subversion zero-knowledge, and (iii) strongly simula-
tion extractable.
Completeness is straightforward. For strong simulation extractability, note that
in Sub-zk-SNARKs we assume that the CRS generator is trusted by the veriﬁer.
Consequently, the proof of strong simulation extractability directly follows from
T heorem 1. The idea for proving subversion zero-knowledge is to use the ex-
tractor of the underlying SNARK to extract the simulation trapdoor which can
then be used to simulate proofs. If the CRS veriﬁcation succeeds, this extractors
exists following from the knowledge assumption of the underlying SNARK. We
present the full proof in Appendix B.1.
4.2 Updatable Signature Schemes
Before discussing how to achieve SE updatable zk-SNARKs from updatable
SNARKS using the Lamassu framework, we need to introduce the new notation
of updatable signature schemes, which are an extension of key-homomorphic sig-
natures. We stress that in contrast to subversion-resilient signatures [AMV15],
where the signing algorithm may be subverted, here, we allow updates on the key
and want to have unforgeability guarantees as long as either the initial key gener-
ation or at least one of the updates was performed honestly. However, signing is
performed honestly. We note that like in Groth et al. [GKM+18] for updatable
CRS (using Lemma 6), we model only a single update as a single adversarial
update implies updatable signatures with arbitrary many updates.
Deﬁnition 7 (Updatable signature schemes). An updatable signature scheme
Σ = (KGen, Upk, Vpk, Sign, Verify) is a key-homomorphic signature scheme17 and
consists of the following PPT algorithms:
KGen(1λ) : Given a security parameter λ it outputs a signing key sk, a veriﬁca-
tion key pk and a proof ζ with message space M.
Upk(pk) : Given a veriﬁcation key pk it outputs an updated veriﬁcation key pkup
with associated secret updating key upsk, and a proof ζ.
key pkup, and the proof ζ it checks if pkup has been updated correctly.
Vpk(pk, pkup, ζ) : Given a veriﬁcation key pk, a potentially updated veriﬁcation
Sign(sk, m) : Given potentially updated secret key sk and a message m ∈ M it
Verify(pk, m, σ) : Given potentially updated public key pk, a message m ∈ M
outputs a signature σ.
and a signature σ it outputs a bit b ∈ {0, 1}.
17 We do not require to make the Adapt algorithm explicit.
21
Deﬁnition 8 (Updatable correctness). A signature scheme Σ is updatable cor-
rect, if for all m ∈ M
 = 1,
Pr
(sk, pk, ζ) ← KGen(1λ), (upsk, pkup, ζup) ← Upk(pk),
Vpk(pk, pkup, ζup) = 1 :
Verify(pk, m, Sign(sk, m)) = 1 ∧
Verify(pkup, m, Sign(sk + upsk, m)) = 1
Deﬁnition 9 (Updatable strong key hiding). We have that for (sk, pk) ← KGen(1λ)
and (upsk, pkup, ζup) ← Upk(pk) it holds that (sk, pk) ≈λ (sk + upsk, pkup) ∈
KGen(1λ) if one of the following setting holds,
– the original pk was honestly generated and the key-update veriﬁes: (sk, pk) ←
– the original pk veriﬁes and the key-update was honest: Vpk(pk, pk, ζ) = 1,
KGen(1λ) and Vpk(pk, pkup, ζup) = 1.
and (upsk, pkup, ζup) ← Upk(pk).
Now, we present the updatable EUF-CMA security notion.
Deﬁnition 10 (Updatable EUF-CMA). A signature scheme Σ is updatable EUF-
CMA secure, if for all PPT subverter Z, there exists a PPT extractor ExtZ, s.t. for
all PPT adversaries A
Pr
(sk, pk, ζ) ← KGen(1λ),
ωZ ←$ RND(Z), (pkup, ζup, auxZ) ← Z(pk; ωZ),
upsk ← ExtZ(pk, ωZ),
(m(cid:63), σ(cid:63)) ← ASign(sk,·),Sign(sk+upsk,·)(pkup, auxZ) :
Vpk(pk, pkup, ζup) = 1 ∧ pkup = pk · µ(upsk) ∧
Verify(pkup, m(cid:63), σ(cid:63)) = 1 ∧ m(cid:63) /∈ QSign
 ≈λ 0,
where the environment keeps track of the queries to the signing oracles via QSign.
Note that Z can also generate the initial pk and an honest updater Upk updates it
and outputs pkup, upsk, and the proof ζup. Then we require that Vpk(pk, pk, ζ) = 1
and we extract sk from ExtZ.
We now prove the following theorem yielding a generic way to construct up-
datable signature schemes and note that we call an updatable signature adapt-
able if the underlying key-homomorphic signature scheme is adaptable.
Theorem 3. Every correct and EUF-CMA secure key-homomorphic signature
scheme Σ that is adaptable according to Deﬁnition 5 and provides an eﬃcient
extractor ExtZ satisﬁes updatable correctness, updatable strong key hiding and
updatable EUF-CMA security.
Proof. We ﬁrst discuss correctness. Therefore let the Upk and Vpk algorithms
be as follows:
22
Upk(pk) : Choose ∆ ←$ H, set upsk := ∆, pkup := pk· µ(∆) and ζup := µ(∆) and
Vpk(pk, pkup, ζup) : Return 1 if either pk = pkup or pkup := pk · ζup and 0 other-
return (upsk, pkup, ζup).
wise.
It is easy to see that skup := sk + ∆ and thus updatable correctness follows from
the correctness of Σ.
Updatable strong key hiding directly follows from the key-homomorphic
property of Σ and the algorithms Upk and Vpk introduced above.
Now, we prove updatable EUF-CMA security by a reduction to the EUF-
CMA security of Σ. Let pk be the veriﬁcation key from the challenger of Σ and
(pkup, ζup, auxZ) the output of A on pk. Now, we can use ExtZ to obtain upsk
and we know that Vpk(pk, pkup, ζup) = 1 and pkup := pk · µ(upsk). Consequently,
on every signature query for some message m from A, we query the signing
oracle of Σ and when given σ in return we return (·, σ(cid:48)) ← Adapt(pk, m, σ, upsk)
to A. When A outputs a valid forgery (m(cid:63), σ(cid:63)) under pkup, we output σ(cid:48)(cid:63) to
the challenger of Σ where (·, σ(cid:48)(cid:63)) ← Adapt(pkup, m(cid:63), σ(cid:63),−upsk) and win with
the same probability as A wins. We note that the case where the initial pk
is subverted and the update is honest can be shown analogously and is thus
omitted.
Example of Updatable Signatures Now, we show that Schnorr signatures
(cf. Appendix A.6) instantiated in a bilinear group BG = (p, G1, G2, GT , e, g, ˆg),
where in contrast to conventional Schnorr signatures the public key consists
of pairs (gx, ˆgx), represent an updatable signature scheme. Therefore, we ﬁrst
discuss the required algorithms and will then show an eﬃcient extractor ExtZ.
We start with the algorithms:
Upk : Set upsk := x(cid:48) ←$ Zp, pkup := (w · gx(cid:48)
) and return
(upsk, pkup, ζup).
Vpk : Parse pk = (w, ˆw), pkup = (w(cid:48), ˆw(cid:48)) and ζup = (z, ˆz(cid:48)). If w = w(cid:48) and
ˆw = ˆw(cid:48) check if e(w, ˆg) = e(g, ˆw(cid:48)) and e(g, ˆw) = e(w(cid:48), ˆg). Otherwise check if
e(w· z, ˆg) = e(g, ˆw(cid:48)) and e(g, ˆw· ˆz) = e(w(cid:48), ˆg) holds. If the check holds return
1 and 0 otherwise.
), ζup := (gx(cid:48)
, ˆw · ˆgx(cid:48)
, ˆgx(cid:48)