220 to 236 and the block size ranges from 32 KB to 256 KB, which
are similar to the practical settings adopted in [18]. In the compar-
isons, system parameter α in S-ORAM may be set to a value other
than 2. If α ̸= 2, the scheme presented in Section 4 can be modiﬁed
to accommodate this by simply setting parameter m to the largest
integer satisfying Equation (3).
S-ORAM vs. B-ORAM
5.3.1
In order to compare S-ORAM with B-ORAM, the user cache size
is set to 512 KB in both constructions. As shown in Table 1, the
bandwidth consumption of S-ORAM is 12 to 23 times less than that
of B-ORAM under practical settings, while the server-side storage
overhead of S-ORAM is about 75% of that of B-ORAM. The im-
provement in bandwidth efﬁciency is attributed to two factors: (i)
B-ORAM
S-ORAM
log3 N
· Z)
O(
log2(Z=log N )
O(Z)
O(N · Z)
O( log2 N
log log N
O(Z)
O(N · Z)
c log2 N · Z(0.599 ≤ c ≤ 0.978) > 60 log2 N
log log N
512 KB
≥ 8N · Z
512 KB
≤ 6N · Z
· Z)
· Z
Tb
Tc
Ts
Pb
Pc
Ps
Table 1: Performance Comparison: S-ORAM vs. B-ORAM
S-ORAM
log3 N
log2(Z=log N )
O(Z)
O(N · Z)
Tb O(
Tc
Ts
· Z) O(
P-ORAM
log2 N
· Z) · ω(1)
log(Z=log N )
O(log N · Z) · ω(1)
O(N · Z)
Table 2: Theoretical Performances: S-ORAM vs. P-ORAM
Pb(Z = 32 KB)
Pb(Z = 64 KB)
Pb(Z = 128 KB)
Pb(Z = 256 KB)
Pc
Ps
N = 236
N = 220
S-ORAM
P-ORAM
S-ORAM
P-ORAM
0.394 log2 N · Z 1.170 log2 N · Z 0.456 log2 N · Z 1.247 log2 N · Z
0.334 log2 N · Z 1.090 log2 N · Z 0.456 log2 N · Z 1.157 log2 N · Z
0.334 log2 N · Z 1.021 log2 N · Z 0.392 log2 N · Z 1.079 log2 N · Z
0.259 log2 N · Z 0.959 log2 N · Z 0.392 log2 N · Z 1.011 log2 N · Z
· Z
· Z
log3 N
log3 N
log2 N · Z
< 6N · Z
log(Z= log N )
32N · Z
log2 N · Z
< 6N · Z
log(Z= log N )
32N · Z
Table 3: Practical Performances: S-ORAM vs. P-ORAM
the query overhead of S-ORAM is only 2 log N blocks while the
overhead of B-ORAM is 2 log2 N
log log N ; and (ii) the shufﬂing algorithm
of S-ORAM is more efﬁcient than that of B-ORAM. In addition,
− log N ), which is asymp-
the failure probability S-ORAM is O(N
− log log N ) [13].
totically lower than that of B-ORAM which is O(N
log2 N
log(Z=log N )
5.3.2 S-ORAM vs. P-ORAM
To fairly compare the performance of S-ORAM and P-ORAM,
their user-side storage sizes are both set to around log2 N blocks
− log N ).
and their failure probabilities are set to the same level: O(N
For this purpose, the security parameter ω(1) of P-ORAM has to
log(Z=log N ) , and the user-side storage size of P-ORAM is
be set to
· Z bits; the user-side storage size of S-ORAM
log3 N
set to
· Z ≥
is expanded to log2 N · Z bits. Note that,
log2 N · Z as long as Z ≤ N (which is usually true in practice).
Table 2 shows the theoretical performances of both S-ORAM and
P-ORAM and Table 3 is the practical performance comparison of
these two ORAMs. From Table 3, it can be seen that S-ORAM
outperforms P-ORAM in both bandwidth efﬁciency and server-side
storage efﬁciency. It requires 80% less server-side storage and con-
sumes around 60% to 72% less bandwidth than P-ORAM.
log(Z=log N )
log3 N
6. CONCLUSION
In this paper, we propose a segmentation-based ORAM (S-ORAM).
S-ORAM adopts two segment-based techniques, namely, piece-
wise shufﬂing and segment-based query, to improve the perfor-
mance of shufﬂing and query by factoring block size into design.
Extensive security analysis shows that S-ORAM is a provably highly
− log N ).
secure solution with a negligible failure probability of O(N
In terms of communication and storage overheads, S-ORAM out-
performs the Balanced ORAM (B-ORAM) and the Path ORAM
(P-ORAM), which are two state-of-the-art hash and index based
ORAMs respectively, in both practical and theoretical evaluations.
7. REFERENCES
[1] M. Ajtai, J. Komlos, and E. Szemeredi. An O(n log n)
sorting network. In Proc. STOC, 1983.
[2] Amazon. http://aws.amazon.com/s3/. In Amazon S3, 2006.
[3] K. E.Batcher. Sorting networks and their applications. In
Proc. AFIPS, 1968.
[4] A. O. Freier, P. Karlton, and P. C. Kocher. The secure sockets
layer (SSL) protocol version 3.0. In RFC 6101, 2011.
[5] C. Gentry, K. Goldman, S. Halevi, C. Julta, M. Raykova, and
D. Wichs. Optimizing ORAM and using it efﬁciently for
secure computation. In Proc. PETS, 2013.
[6] O. Goldreich and R. Ostrovsky. Software protection and
simulation on oblivious RAM. Journal of the ACM, 43(3),
May 1996.
[7] M. T. Goodrich. Randomized shellsort: a simple oblivious
sorting algorithm. In Proc. SODA, 2010.
[8] M. T. Goodrich and M. Mitzenmacher. Mapreduce parallel
cuckoo hashing and oblivious RAM simulations. In Proc.
CoRR, 2010.
[9] M. T. Goodrich and M. Mitzenmacher. Privacy-preserving
access of outsourced data via oblivious RAM simulation. In
Proc. ICALP, 2011.
[10] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and
R. Tamassia. Oblivious RAM simulation with efﬁcient
worst-case access overhead. In Proc. CCSW, 2011.
[11] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and
R. Tamassia. Privacy-preserving group data access via
stateless oblivious RAM simulation. In Proc. SODA, 2012.
[12] M. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern
disclosure on searchable encryption: ramiﬁcation, attack and
mitigation. In Proc. NDSS, 2012.
[13] E. Kushilevitza, S. Lu, and R. Ostrovsky. On the (in)security
of hash-based oblivious RAM and a new balancing scheme.
In Proc. SODA, 2012.
[14] D.-L. Lee and K. E. Batcher. A multiway merge sorting
network. IEEE Transactions on Parallel and Distributed
Systems, 6(2), February 1995.
[15] B. Pinkas and T. Reinman. Oblivious RAM revisited. In
Proc. CRYPTO, 2010.
[16] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li. Oblivious
RAM with O((log N )3) worst-case cost. In Proc.
ASIACRYPT, 2011.
[17] E. Stefanov and E. Shi. ObliviStore: high performance
oblivious cloud storage. In Proc. S&P, 2013.
[18] E. Stefanov, E. Shi, and D. Song. Towards practical oblivious
RAM. In Proc. ASIACRYPT, 2011.
[19] E. Stefanov, M. van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu,
and S. Devadas. Path ORAM: an extremely simple oblivious
RAM protocol. In Proc. CCS, 2013.
[20] P. Williams and R. Sion. Building castles out of mud:
practical access pattern privacy and correctness on untrusted
storage. In Proc. CCS, 2008.
[21] P. Williams, R. Sion, and A. Tomescu. PrivateFS: a parallel
oblivious ﬁle system. In Proc. CCS, 2012.
[22] P. Williams, R. Sion, and A. Tomescu. Single round access
privacy on outsourced storage. In Proc. CCS, 2012.
/* Regroup blocks */
j
/* Merge sorted blocks */
end for
if |D′
else
end if
/* Recursively merge regrouped blocks */
for each j (0 ≤ j ≤ m − 1) do
Add Di[j],Di[m + j]··· ,Di[s − m + j] to D′
Finally, Algorithm 5 formally presents the merging algorithm.
Algorithm 5 Merging Sorted-subsets of Blocks (D0,··· ,Dm−1)
1: s = |D0|
2: for each i (0 ≤ i ≤ m − 1) do
3:
4:
5:
6: end for
7: for each j (0 ≤ j ≤ m − 1) do
8:
9:
10:
11:
12:
13: end for
14: for each i (0 ≤ i ≤ s
15:
16:
17:
18: end for
19: for each i (0 ≤ i ≤ s
20:
21: end for
j| ≤ 2m2 then
Apply Algorithm 4 to sort D′
Apply Algorithm 5 to merge sort D′
− 1) do
j[im],··· ,D′
m
− 1) do
Apply Algorithm 4 to sort D′′
m
for each j (0 ≤ j ≤ m − 1) do
j[im + 2m − 1] to D′′
i
Add D′
end for
j
j
i
Appendix
We present the details of the proposed m-way oblivious sorting al-
gorithm in this Appendix.
As shown in Algorithm 3, to sort a set D of n blocks, the m-way
oblivious sorting algorithm works recursively as follows: if n ≤
2m2, a segment-sorting algorithm similar to the segment-shufﬂing
algorithm is applied to sort the n blocks at the communication cost
of O(n) blocks; otherwise, the n blocks are split into m subsets
each of n
m blocks, the m-way oblivious sorting algorithm is applied
to sort each of the subsets, and ﬁnally a merging algorithm is used
to merge the sorted subsets into a sorted set of n blocks.
Algorithm 3 m-way Oblivious Sorting (D: a set of data blocks)
1: if (|D| ≤ 2m2) then
2:
3: else
4:
5:
6:
7:
8:
9: end if
Apply Algorithm 4 to sort D
Split D into m equal-size subsets of blocks D0,··· ,Dm−1
for each i (0 ≤ i ≤ m − 1) do
Apply Algorithm 3 to sort Di
end for
Apply Algorithm 5 to merge D0,··· ,Dm−1
Next, we describe the segment-sorting algorithm (Algorithm 4) and
the merging algorithm (Algorithm 5) The segment-sorting algo-
rithm is based on the segment-shufﬂing algorithm (Algorithm 2)
with the following revisions: (1) The segment-sorting algorithm
sorts blocks that are labeled with tags. The format of a labeled
block is slightly different from the one shown in Figure 1; partic-
ularly, the encrypted tag is inserted as an extra piece before the
encrypted block ID. (2) While the segment-shufﬂing algorithm can
randomly pick a permutation function to shufﬂe pieces and blocks,
the segment-sorting algorithm must permute pieces and blocks ac-
cording to the non-decreasing order of tags.
(3) The segment-
sorting algorithm does not need to re-construct index blocks.
Algorithm 4 Segment-Sorting of Blocks (Di1 ,··· , Din ).
1-5: the same as in Algorithm 2
6: Construct a permutation function that sorts B2 in the non-
decreasing order
7: the same as in Algorithm 2
8: blank
9-14: the same as in Algorithm 2
15: for each v ∈ {2,··· , P} do
16-26: the same as in Algorithm 2