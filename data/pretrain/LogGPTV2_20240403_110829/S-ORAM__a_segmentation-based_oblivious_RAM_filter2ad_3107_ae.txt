### 优化后的文本

#### 2.2 参数设置
在实际应用中，块大小范围从32 KB到256 KB，与文献[18]中的设置相似。在比较过程中，S-ORAM的系统参数α可以设为2以外的值。如果α不等于2，可以通过将参数m设置为满足方程(3)的最大整数来修改第4节中提出的方案。

#### 5.3.1 S-ORAM vs. B-ORAM
为了比较S-ORAM和B-ORAM，我们将两种构造中的用户缓存大小都设置为512 KB。如表1所示，在实际设置下，S-ORAM的带宽消耗比B-ORAM少12到23倍，而S-ORAM的服务器端存储开销约为B-ORAM的75%。带宽效率的提升归因于以下两个因素：
1. S-ORAM的查询开销仅为2 log N个块，而B-ORAM的查询开销为2 log<sup>2</sup>N / log log N；
2. S-ORAM的洗牌算法比B-ORAM更高效。
此外，S-ORAM的失败概率为O(N<sup>-log N</sup>)，这在渐近意义上低于B-ORAM的O(N<sup>-log log N</sup>) [13]。

| 指标 | S-ORAM | B-ORAM |
|------|--------|--------|
| 带宽 (Tb) | O(log<sub>3</sub>N · Z) | O(log<sub>2</sub>(Z/log N) · Z) |
| 查询 (Tc) | O(Z) | O(N · Z) |
| 存储 (Ts) | O(log<sub>2</sub>N · Z) | O(N · Z) |
| 失败概率 (Pb) | > 60 log<sub>2</sub>N | log log N |
| 用户缓存 | 512 KB | 512 KB |
| 服务器存储 | ≤ 6N · Z | ≥ 8N · Z |

**表1：性能比较：S-ORAM vs. B-ORAM**

#### 5.3.2 S-ORAM vs. P-ORAM
为了公平比较S-ORAM和P-ORAM的性能，我们将两者的用户侧存储大小都设置为约log<sub>2</sub>N个块，并将其失败概率设置为同一水平：O(N<sup>-log N</sup>)。为此，P-ORAM的安全参数ω(1)必须设置为log(Z/log N)，并且P-ORAM的用户侧存储大小设置为log<sub>3</sub>N · Z位；S-ORAM的用户侧存储大小扩展到log<sub>2</sub>N · Z位（只要Z ≤ N，这在实践中通常是成立的）。

| 指标 | S-ORAM | P-ORAM |
|------|--------|--------|
| 带宽 (Tb) | O(log<sub>3</sub>N · Z) | O(log<sub>2</sub>N · Z) · ω(1) |
| 查询 (Tc) | O(Z) | O(log N · Z) · ω(1) |
| 存储 (Ts) | O(log<sub>2</sub>N · Z) | O(N · Z) |
| 失败概率 (Pb) | > 60 log<sub>2</sub>N | log log N |
| 用户缓存 | 512 KB | 512 KB |
| 服务器存储 | ≤ 6N · Z | ≥ 32N · Z |

**表2：理论性能比较：S-ORAM vs. P-ORAM**

| Pb (Z = 32 KB) | Pb (Z = 64 KB) | Pb (Z = 128 KB) | Pb (Z = 256 KB) | Pc | Ps |
|----------------|----------------|-----------------|-----------------|----|----|
| N = 2<sup>36</sup> | N = 2<sup>20</sup> | N = 2<sup>36</sup> | N = 2<sup>20</sup> |    |    |
| S-ORAM        | 0.394 log<sub>2</sub>N · Z | 0.334 log<sub>2</sub>N · Z | 0.334 log<sub>2</sub>N · Z | 0.259 log<sub>2</sub>N · Z |    |    |
| P-ORAM        | 1.170 log<sub>2</sub>N · Z | 1.090 log<sub>2</sub>N · Z | 1.021 log<sub>2</sub>N · Z | 0.959 log<sub>2</sub>N · Z |    |    |
| S-ORAM        | 0.456 log<sub>2</sub>N · Z | 0.456 log<sub>2</sub>N · Z | 0.392 log<sub>2</sub>N · Z | 0.392 log<sub>2</sub>N · Z |    |    |
| P-ORAM        | 1.247 log<sub>2</sub>N · Z | 1.157 log<sub>2</sub>N · Z | 1.079 log<sub>2</sub>N · Z | 1.011 log<sub>2</sub>N · Z |    |    |

**表3：实际性能比较：S-ORAM vs. P-ORAM**

从表3可以看出，S-ORAM在带宽效率和服务器端存储效率方面均优于P-ORAM。S-ORAM所需的服务器端存储减少了80%，并且其带宽消耗比P-ORAM减少了大约60%至72%。

#### 6. 结论
本文提出了一种基于分段的ORAM（S-ORAM）。S-ORAM采用了两种基于分段的技术，即分段洗牌和分段查询，通过将块大小纳入设计来提高洗牌和查询的性能。广泛的安全分析表明，S-ORAM是一种高度安全的解决方案，其失败概率为O(N<sup>-log N</sup>)。在通信和存储开销方面，S-ORAM在实际和理论评估中均优于平衡ORAM（B-ORAM）和路径ORAM（P-ORAM）这两种最先进的基于哈希和索引的ORAM。

#### 7. 参考文献
[1] M. Ajtai, J. Komlos, and E. Szemeredi. An O(n log n) sorting network. In Proc. STOC, 1983.
[2] Amazon. http://aws.amazon.com/s3/. In Amazon S3, 2006.
[3] K. E. Batcher. Sorting networks and their applications. In Proc. AFIPS, 1968.
[4] A. O. Freier, P. Karlton, and P. C. Kocher. The secure sockets layer (SSL) protocol version 3.0. In RFC 6101, 2011.
[5] C. Gentry, K. Goldman, S. Halevi, C. Julta, M. Raykova, and D. Wichs. Optimizing ORAM and using it efficiently for secure computation. In Proc. PETS, 2013.
[6] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAM. Journal of the ACM, 43(3), May 1996.
[7] M. T. Goodrich. Randomized shellsort: a simple oblivious sorting algorithm. In Proc. SODA, 2010.
[8] M. T. Goodrich and M. Mitzenmacher. Mapreduce parallel cuckoo hashing and oblivious RAM simulations. In Proc. CoRR, 2010.
[9] M. T. Goodrich and M. Mitzenmacher. Privacy-preserving access of outsourced data via oblivious RAM simulation. In Proc. ICALP, 2011.
[10] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia. Oblivious RAM simulation with efficient worst-case access overhead. In Proc. CCSW, 2011.
[11] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia. Privacy-preserving group data access via stateless oblivious RAM simulation. In Proc. SODA, 2012.
[12] M. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on searchable encryption: ramifications, attack and mitigation. In Proc. NDSS, 2012.
[13] E. Kushilevitz, S. Lu, and R. Ostrovsky. On the (in)security of hash-based oblivious RAM and a new balancing scheme. In Proc. SODA, 2012.
[14] D.-L. Lee and K. E. Batcher. A multiway merge sorting network. IEEE Transactions on Parallel and Distributed Systems, 6(2), February 1995.
[15] B. Pinkas and T. Reinman. Oblivious RAM revisited. In Proc. CRYPTO, 2010.
[16] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li. Oblivious RAM with O((log N)<sup>3</sup>) worst-case cost. In Proc. ASIACRYPT, 2011.
[17] E. Stefanov and E. Shi. ObliviStore: high performance oblivious cloud storage. In Proc. S&P, 2013.
[18] E. Stefanov, E. Shi, and D. Song. Towards practical oblivious RAM. In Proc. ASIACRYPT, 2011.
[19] E. Stefanov, M. van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and S. Devadas. Path ORAM: an extremely simple oblivious RAM protocol. In Proc. CCS, 2013.
[20] P. Williams and R. Sion. Building castles out of mud: practical access pattern privacy and correctness on untrusted storage. In Proc. CCS, 2008.
[21] P. Williams, R. Sion, and A. Tomescu. PrivateFS: a parallel oblivious file system. In Proc. CCS, 2012.
[22] P. Williams, R. Sion, and A. Tomescu. Single round access privacy on outsourced storage. In Proc. CCS, 2012.

#### 附录
我们在附录中详细介绍了所提出的m路无意识排序算法。

**算法3 m路无意识排序 (D: 数据块集)**
1. 如果(|D| ≤ 2m<sup>2</sup>)，则
   - 应用算法4对D进行排序
2. 否则
   - 将D分割成m个大小相等的子集D0, ..., Dm-1
   - 对每个i (0 ≤ i ≤ m − 1)，应用算法3对Di进行排序
   - 应用算法5合并D0, ..., Dm-1

**算法4 分段排序 (Di1, ..., Din)**
1-5: 与算法2相同
6: 构造一个按标签非递减顺序排列的置换函数
7-14: 与算法2相同
15: 对每个v ∈ {2, ..., P}，执行步骤16-26

**算法5 合并排序子集 (D0, ..., Dm-1)**
1: s = |D0|
2: 对每个i (0 ≤ i ≤ m − 1)，执行步骤3-6
3-6: 与算法2相同
7: 对每个j (0 ≤ j ≤ m − 1)，执行步骤8-13
8-13: 与算法2相同
14: 对每个i (0 ≤ i ≤ s − 1)，执行步骤15-18
15-18: 与算法2相同
19: 对每个i (0 ≤ i ≤ s − 1)，执行步骤20-21
20-21: 与算法2相同

希望这些改进能帮助您更好地表达您的内容！