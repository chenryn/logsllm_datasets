than one registrar, across all 802.11 channels, it raises a
session overlap error, indicating that the user should try
again later. On the other hand, if it receives a reply from
only one registrar, it proceeds with the registration proto-
col, using the Difﬁe-Hellman key from that one reply.
A registrar, for its part, stays on its dedicated channel,
and replies to probe requests only if the user has pushed
its PBC button. Once the button is pushed, the registrar
replies to PBC requests from potential enrollees. To detect
conﬂicts, the registrar checks for requests in the last 120
seconds. If there are requests from more than one enrollee,
the registrar signals a session overlap error and refuses
to perform the PBC registration protocol, requiring the
user to retry. If there was only one enrollee request, the
registrar proceeds with the registration protocol using the
Difﬁe-Hellman public key from that one request.
3
While PBC’s use of Difﬁe-Hellman protects the de-
vices from eavesdropper attacks, an active adversary can
hide or change any of the messages, by resorting to colli-
sions, capture effect attacks, or hogging the medium and
delaying these messages. This allows an adversary to gain
access to the user’s registrar (e.g., their home network),
the enrollee device, or to intercept and alter any future
messages between the enrollee and registrar. Defending
against such adversaries requires a system that is robust
to MITM attacks, which is the main contribution of TEP.
3.2 802.11
Since our protocol involves low-level details of the 802.11
standard, we summarize the relevant aspects of 802.11
in this section. 802.11 requires nodes to sense the wire-
less medium for energy, and transmit only in its absence.
802.11 nodes can transmit using a range of bit rates, with
the minimum bit rate of 1 Mbps. Coupling this with the
fact that the maximum packet size used by higher layers
is typically 1500 bytes, an honest node can occupy the
channel for a maximum of 12 ms. 802.11 requires back-
to-back packets to be separated by an interval called the
DCF Inter-Frame Spacing (DIFS), whose value can be
34µs, 50µs, or 28µs, depending on whether the network
uses 802.11a, b, or g. 802.11 acknowledgment packets,
however, can be transmitted after a shorter duration of
10µs, called the Short Inter-Frame Spacing (SIFS).
4 SECURITY MODEL
TEP addresses the problem of authenticating key ex-
change messages between two wireless devices, in the
presence of an active adversary that may try to mount a
man-in-the-middle attack.
4.1 Threat Model
The adversary can eavesdrop on all the signals on the chan-
nel, including all prior communications. The adversary
can also be active and transmit with an arbitrary power, at
any time, thereby corrupting or overpowering other con-
current transmissions. The adversary may know the TEP
protocol, the precise times when devices transmit their
announcements, and their exact locations. In addition, the
adversary can know the exact channel between the pairing
devices, and the channel from the pairing devices to the
adversary. The adversary can also be anywhere in the
network and is free to move. Multiple adversaries may
exist in the network and can collude with each other.
The adversary can have access to state-of-the-art RF
technologies: he can have a multi-antenna system, he may
be able to simultaneously receive and transmit signals,
and he can use directional antennas to ensure that only
one of the pairing devices can hear its transmissions.
The adversary, however, does not have physical control
over the pairing devices or their surroundings. Speciﬁ-
cally, the adversary cannot place either of the two devices
Term
Tamper-evident
announcement
Synchronization
packet
Payload packet
ON-OFF slot
Deﬁnition
A wireless message whose presence and the in-
tegrity of its payload are guaranteed to be detected
by every receiver within radio range (Figure 1).
An exceptionally long packet whose presence in-
dicates a TEA. To detect a synchronization packet,
it is sufﬁcient to detect that the medium is contin-
uously occupied for the duration of the synchro-
nization packet, which is 19 ms.
The part of a TEA containing the data payload
(e.g., a device public key).
The interval used to convey one bit from sender
to receiver. The slot time is 40µs. The bits in the
slots are balanced, as described in §5.1.2.
Occupied/ON slot A slot during which the medium is busy with a
Silent/OFF slot
Sensing
window
Fractional
occupancy
transmission.
A slot during which the medium is idle.
The interval over which the receiver collects ag-
gregate information for whether the medium is
occupied or silent.
The fraction of time the medium was busy during
a sensing window.
Table 1: Terminology used to describe TEP.
in a Faraday cage to shield all signals. We also assume
that the adversary cannot break traditional cryptographic
constructs, such as collision-resistant hash functions.
Finally, we assume that the PBC buttons operate accord-
ing to the PBC standard [26] and that the user performs
the PBC pairing as prescribed in the standard, i.e., the
user puts the two devices in range then pushes the buttons
on the two devices within 120 seconds of each other.
4.2 Security Guarantees
Under the assumptions outlined above, TEA guarantees
that an adversary cannot tamper with the payload of a
TEA message, or mask the fact that a TEA message was
transmitted. Building on the TEA mechanism, TEP guar-
antees that in the absence of an active adversary, two
pairing devices can establish secure pairing. In the pres-
ence of an adversary who is actively mounting MITM
attacks (or in the presence of more than two devices at-
tempting to pair at the same time), TEP ensures that the
pairing devices will signal an error and never be tricked
into pairing with the adversary (or, more generally, with
the wrong device). In other words, TEP provides the PBC
security guarantees augmented with protection against
MITM attacks.
5 TEP DESIGN
TEP’s design is based upon the TEA mechanism, a uni-
directional announcement protocol that guarantees that
adversaries cannot tamper with or mask TEA messages
without detection. TEP uses TEA to exchange public
keys between the PBC enrollee and registrar in a way that
resists MITM attacks. At a high level, when an enrollee
enters PBC mode, it sends out a TEA message containing
its public key. When a registrar in PBC mode receives
4
this message (or suspects that an adversary may have tried
to tamper with or mask such a message), it responds with
its own public key. Both the enrollee and the registrar
collect all TEA messages received during PBC’s walk
time period. If, during that time, each received exactly
one unique public key (and no tampered messages), they
can conclude that this public key came from the other
party, and can use it for pairing. Otherwise, PBC reports
a session overlap error (e.g., because multiple enrollees
or registrars were pairing at the same time, or because an
adversary interfered), and asks the user to retry.
The rest of this section describes our protocol in more
detail, starting with the TEA mechanism, using terminol-
ogy deﬁned in Table 1.
5.1 Tamper-Evident Announcement (TEA)
The goal of TEA is to guarantee that if an attacker tampers
with the payload of a TEA message, or tries to mask the
fact that a message was transmitted at all, a TEA receiver
within communication range will detect such tampering.
In other words, TEA receivers will always detect when a
TEA message was, or may have been, transmitted.
To provide this guarantee, TEA messages have a spe-
cialized structure, as shown in Figure 1. First, there is a
synchronization packet, which protects the TEA’s trans-
mission from being masked, by unambiguously indicating
to a TEA receiver that a TEA message follows. The syn-
chronization packet contains random data, to ensure that
an adversary cannot cancel out its energy.1
Second, the TEA message contains the announcement
payload. The payload is always of ﬁxed length, to ensure
that an adversary cannot truncate or extend the payload in
ﬂight, but otherwise has no restrictions on its content or
encoding. In our pairing protocol, the payload of a TEA
message contains the sender’s Difﬁe-Hellman public key,
along with other registration information.
Third, the TEA message contains ON-OFF slots, which
guarantee that any tampering with a TEA payload is de-
tectable. Similar to the synchronization packet, the con-
tent of the ON slots is randomized. The ﬁrst two slots, as
shown in Fig. 3, encode the direction ﬂag, which deﬁnes
whether this TEA message was sent by an enrollee (called
a TEA request, ﬂag value “10”) or by a registrar (called a
TEA reply, ﬂag value “01”). The remaining slots contain
a cryptographic hash of the payload. While it is possible
to also encode the payload using slots, it would be inefﬁ-
cient for long payloads, and unnecessary, since protecting
a cryptographic hash sufﬁces. To detect tampering, TEA
encodes all slots in a way that guarantees that exactly half
of the slots are silent, as we describe in §5.1.2.
1In practice, it is very hard to cancel a signal in ﬂight but in theory
an attacker that knows the transmitted signal and the channels to the
receiver can construct a signal that cancels out the original signal at the
receiver. Making the data random eliminates this option.
Direction
Hash of
the message
2 bit
128 bits
Figure 3: Data encoded in the ON-OFF slots. The ﬁrst two bits
specify the direction of the message, and the rest of the bits contain
a cryptographic hash of the payload.
5.1.1 Detecting tampering
To determine if an adversary may have tampered with a
TEA message, a TEA receiver performs several checks.
First, the receiver continuously monitors the medium for
possible synchronization packets. If it detects any burst
of energy at least as long as the synchronization packet,
it interprets it as the start of a TEA announcement. The
receiver conservatively assumes that any such period of
energy is a TEA message, and signals a missed message
if it is unable to decode and verify the subsequent payload.
To minimize false positives, we choose a synchronization
packet that is longer than any regular contiguous WiFi
transmission. An adversary cannot cancel out a legitimate
synchronization packet because the adversary cannot elim-
inate the power on the channel. In fact, since the payload
of the synchronization packet is random, the adversary
cannot cancel the power from the packet even if he knows
the exact channel between Alice and Bob, and is fully
synchronized with the transmitter. Thus, an adversary
cannot tamper with the presence of a TEA message by
masking it out.
Second, once a TEA receiver detects the start of a TEA
announcement, it attempts to decode the payload packet
and the hash bits in the ON-OFF slots. If the receiver can-
not decode the payload (i.e., the packet checksum fails),
it indicates tampering. If the payload is decoded, the re-
ceiver veriﬁes that the hash bits match the hash of the
payload– i.e., it veriﬁes that hashing the payload produces
the same bits in the ON-OFF slots and that the number of
ON slots is equal to that of OFF slots. If the receiver can-
not verify the hash bits, it conservatively assumes that an
adversary is tampering with the transmission. Once tam-
pering is detected, the receiver signals a session overlap
error (as in PBC), requiring the user to retry later.
5.1.2 Balancing the ON-OFF Slots
An adversary can transform an OFF slot to an ON slot
(by transmitting in it) but cannot transform an ON slot to
an OFF slot. Hence, to ensure that the adversary cannot
tamper with even a single OFF slot without being detected,
we make the number of the OFF slots in a TEA message
equal to that of the ON slots, i.e., we balance the slots. The
number of slots is ﬁxed by the TEP protocol, thus avoiding
truncation or extension attacks. Since the direction ﬂag is
already encoded in two balanced bits, we now focus on
balancing the rest of the slots.
5
Our balancing algorithm takes the hash bits of the TEA
payload and produces a balanced bit sequence to be sent
in the ON-OFF slots. One inefﬁcient but simple trans-
formation is to use Manchester encoding of the hash bits
to produce a balanced output bit sequence with twice as
many output bits. TEA, however, introduces an efﬁcient
encoding that takes an even number, N, of input bits and
produces M = N + 2⌈logN⌉ output bits which have an
equal number of zeros and ones. The details of our efﬁ-
cient encoding algorithm are presented in Appendix A.
5.1.3 Interoperating with 802.11
To interoperate with other 802.11 devices that may not be
TEA-aware, the ON-OFF slots are preceded by a CTS-
to-SELF packet, which reserves the medium for the TEA
message. This serves two purposes. First, since the sender
does not transmit during the OFF slots, another 802.11
node could sense the wireless medium to be idle for more
than a DIFS period, and start transmitting its own packet
during that OFF slot. The 802.11 standard requires 802.11
nodes that hear a CTS-to-SELF on the channel to abstain
from transmitting for the period mentioned in that packet,
which will ensure that no legitimate transmission overlaps
with the slots. Second, in case of a TEA message from an
enrollee to a potential registrar, the CTS-to-SELF packet
reserves the medium so that the registrar can immediately
reply with its own TEA message. This prevents legiti-
mates nodes from hogging the medium and delaying the
registrar’s response. However, reserving the channel for
the entire length of a TEA message is inefﬁcient, if no
registrar is present. To avoid under-utilization of the wire-
less medium, the enrollee’s CTS-to-SELF only reserves
the channel for a DIFS period past its slot transmissions.
If a PBC-activated registrar is present, it must start trans-
mitting its response message within the DIFS period. On
the other hand, if there is no registrar, other legitimate
devices will resume transmissions promptly.
To maximize the probability that all devices can decode
the CTS-to-SELF, it is transmitted at the most robust bit
rate of 1 Mbps. Current 802.11 implementations obey a
CTS-to-SELF that reserves the channel up to 32 ms. Our
TEA message requires 144 slots,2 and the slot duration is
40 µs (§6). This translates to about 5.8 ms, which is less
than the 32 ms allowed by the CTS-to-SELF.
Finally, as shown in Figure 1, there is a gap between
the synchronization and payload packets. If this gap is
large, other 802.11 nodes would sense an idle wireless
medium, and start transmitting, thus appearing to tamper
with the TEA. To avoid this, we exploit the fact that
802.11 nodes are only allowed to transmit if they ﬁnd
the medium continuously idle for a DIFS. Thus, a TEA
sender sends the payload packet immediately after the
synchronization packet with a gap of a Short Interframe
Space (SIFS), which is much less than DIFS.
5.1.4 API Summary
The interface provided by TEA is as follows. For the
sender side, there is a single blocking function,
• void TEA SEND (bool dir, str msg, time t),
which sends an announcement containing payload msg.
The dir ﬂag speciﬁes the direction of the message, that
is, whether it is a request message (from the enrollee)
or a reply message (from the registrar). Time t speciﬁes
the deadline by which the message must start transmis-
sion. The TEA sender tries to respect carrier-sense in