### Inconsistent Scores and Scrubbing Function Effectiveness

The results in Table 1 indicate that only three out of the eleven projects had a scrubbing function that was both effective and used consistently. The score for inconsistent performance is denoted as (cid:71)(cid:35) in Table 1.

We notified the developers of each project that received a flawed or inconsistent score. For our report to the developers, we manually verified each instance where a scrubbing operation was removed, reporting only valid cases. Generally, as described below, developers acknowledged our report and addressed the issues. It is important to note that none of these issues resulted in Common Vulnerabilities and Exposures (CVEs) because exploiting them would require a separate memory disclosure bug, which is outside the scope of this work.

In the following sections, we provide detailed reports on the open-source projects we analyzed. Our goal is to identify common trends and understand how developers handle the problem of compilers removing scrubbing operations.

### 5.1 OpenVPN

OpenVPN is a TLS/SSL-based user-space Virtual Private Network (VPN) [21]. We tested version 2.3.12. OpenVPN 2.3.12 lacks a reliable memory scrubbing implementation, as it uses a `CLEAR` macro that expands to `memset`. We identified eight scrubbing operations that were removed, all of which dealt with sensitive data. Each of these removed operations used the `CLEAR` macro, which is ineffective.

**Sample Case:**
The `key_method_1_read` function in Figure 2 is used in OpenVPN’s key exchange function to process key material received from an OpenVPN peer. However, the `CLEAR` macro fails to scrub the key on the stack since it is a call to plain `memset`.

**Developer Response:**
The issues were reported, although OpenVPN developers were already aware of the problem and had a ticket on their issue tracker that was opened 12 days prior to our notification [26]. The patch does not change the `CLEAR` macro, as it is extensively used throughout the project. Instead, many `CLEAR` calls were replaced with our recommended fix discussed in Section 6 [7].

```c
#define CLEAR(x) memset(&(x), 0, sizeof(x))

static bool key_method_1_read(struct buffer *buf, struct tls_session *session) {
    struct key key;
    // key is allocated on stack to hold TLS session key
    ...
    // Clean up
    CLEAR(key);
    ks->authenticated = true;
    return true;
}
```

### 5.2 Kerberos

Kerberos is a network authentication protocol that provides authentication for client/server applications using secret-key cryptography [12]. We tested Kerberos release krb5-1.14.4. The Kerberos memory scrubbing implementation, `zap`, is unreliable. It defaults to Windows’ `SecureZeroMemory`, which is effective. Otherwise, it uses a memory barrier that may not prevent the scrubbing operation from being removed when the code is compiled with Clang (see Section 3.4.3). If the compiler is not GCC, it uses a function that calls `memset`. While this is more reliable than a macro, `memset` can be removed if Link-Time Optimization (LTO) is enabled (see Section 3.3.1). Additionally, plain `memset` is still used throughout the code to perform scrubbing. We found ten instances where scrubbing was done using `memset`, which is ineffective; two of these sites deal with sensitive data.

**Sample Case:**
The `free_lucid_key_data` function in Figure 3 is used in Kerberos to free any storage associated with a lucid key structure (which is typically on the heap) and to scrub all of its sensitive information. However, it does so with a call to plain `memset`, which is then removed by the optimizer.

**Developer Response:**
The issues have been patched with calls to `zap`. Additionally, `zap` has been patched according to our recommended fix discussed in Section 6.

```c
static void free_lucid_key_data(gss_krb5_lucid_key_t *key) {
    if (key) {
        if (key->data && key->length) {
            memset(key->data, 0, key->length);
            xfree(key->data);
            memset(key, 0, sizeof(gss_krb5_lucid_key_t));
        }
    }
}
```

### 5.3 Tor

Tor provides anonymous communication via onion routing [25]. We tested version 0.2.8.8. Tor defines `memwipe`, which uses Windows’ `SecureZeroMemory` if available, then BSD’s `explicit_bzero`, then `memset_s`, and then `OPENSSL_cleanse`. Despite the availability of `memwipe`, Tor still uses `memset` to scrub memory in several places. We found four scrubbing operations that were removed, but none dealt with sensitive data.

**Sample Case:**
The `MOCK_IMPL` function in Figure 4 is used to destroy all resources allocated by a process handle. However, it scrubs the process handle object with `memset`, which is then removed by the optimizer.

**Developer Response:**
The bugs were reported and have yet to be patched.

```c
MOCK_IMPL(void, tor_process_handle_destroy, (process_handle_t *process_handle, int also_terminate_process)) {
    // process_handle is passed in and allocated on heap to hold process handle resources
    ...
    memset(process_handle, 0x0f, sizeof(process_handle_t));
    tor_free(process_handle);
}
```

### 5.4 OpenSSL

OpenSSL is a popular TLS/SSL implementation and a general-purpose cryptographic library [20]. We tested version 1.1.0b. OpenSSL uses `OPENSSL_cleanse` to reliably scrub memory. `OPENSSL_cleanse` defaults to its own assembly implementations in various architectures unless specified otherwise by the `no-asm` flag at configuration. Otherwise, starting with version 1.0.2, it uses the volatile function pointer technique to call `memset`. Prior to version 1.0.2, it used the complicated computation technique. We found no removed scrubbing operations in version 1.1.0b.

### 5.5 NSS

Network Security Services (NSS) is a TLS/SSL implementation that traces its origins to the original Netscape implementation of SSL [18]. We tested version 3.27.1. NSS does not have a reliable memory scrubbing implementation, as it either calls `memset` or uses the macro `PORT_Memset`, which expands to `memset`. We found fifteen scrubbing operations that were removed, nine of which dealt with sensitive data. Of the fifteen removed operations, six were calls to `PORT_Memset` and nine were calls to plain `memset`.

**Sample Case:**
The `PORT_ZFree` function is used throughout the NSS code for freeing sensitive data and is based on the `PORT_ZFree_stub` function in Figure 5. However, `PORT_ZFree_stub`'s call to `memset` fails to scrub the pointer it is freeing.

**Developer Response:**
The bugs have been reported, and Mozilla Security forwarded them to the appropriate team, but they have not yet been patched.

```c
extern void PORT_ZFree_stub(void *ptr, size_t len) {
    STUB_SAFE_CALL2(PORT_ZFree_Util, ptr, len);
    memset(ptr, 0, len);
    return free(ptr);
}
```

### 5.6 Libsodium

Libsodium is a cross-platform cryptographic library [15]. We tested version 1.0.11. Libsodium defines `sodium_memzero`, which does not reliably scrub memory. First, it defaults to Windows’ `SecureZeroMemory`, then `memset_s`, and then BSD’s `explicit_bzero` if available, which are all reliable. Then, if weak symbols are supported, it uses a technique based on weak linkage, otherwise it uses the volatile data pointer technique. Techniques based on weak linkage are not reliable, as they can be removed during link-time optimization. All memory scrubbing operations used `sodium_memzero`, and since Libsodium is not compiled with link-time optimization, no scrubbing operations using `sodium_memzero` were removed.

### 5.7 Tarsnap

Tarsnap is an online encrypted backup service whose client source code is available [24]. We tested version 1.0.37. Tarsnap’s memory scrubbing implementation, called `insecure_memzero`, uses the volatile data pointer scrubbing technique. Although `insecure_memzero` is an effective scrubbing function, Tarsnap does not use it consistently. We found ten cases where `memset` was used to scrub memory instead of `insecure_memzero` in its `keyfile.c`, which handles sensitive data.

**Sample Case:**
The `read_encrypted` function in Figure 6 attempts to scrub a buffer on the heap containing a decrypted key. It is used throughout the project for reading keys from a Tarsnap key file. However, instead of using `insecure_memzero`, it uses plain `memset`, and is thus removed by the optimizer.

**Developer Response:**
Out of the eleven reported issues, the ten in `keyfile.c` were already patched on July 2, 2016, but were not in the latest stable version. The one non-security issue does not require a patch, as the removed `memset` was redundant, as `insecure_memzero` is called right before it.

```c
static int read_encrypted(const uint8_t *keybuf, size_t keylen, uint64_t *machinenum, const char *filename, int keys) {
    uint8_t *deckeybuf;
    // deckeybuf is allocated on heap to hold decrypted key
    ...
    // Clean up
    memset(deckeybuf, 0, deckeylen);
    free(deckeybuf);
    free(passwd);
    free(pwprompt);
    return 0;
}
```

### 5.8 Libgcrypt

Libgcrypt is a general-purpose cryptographic library used by GNU Privacy Guard, a GPL-licensed implementation of the PGP standards [13]. We tested version 1.7.3. Libgcrypt defines `wipememory`, which is a reliable way of scrubbing because it uses the volatile data pointer technique. However, despite `wipememory`'s availability and reliability, `memset` is still used to scrub memory in several places. We found two cases where scrubs were removed, and for both, `memset` is used to scrub sensitive data instead of `wipememory`.

**Sample Case:**
The `invert_key` function in Figure 7 is used in Libgcrypt’s IDEA implementation to invert a key for its key setting and block decryption routines. However, `invert_key` uses `memset` to scrub a copy of the IDEA key on the stack, which is removed by the optimizer.

**Developer Response:**
The bugs have been patched with calls to `wipememory`.

```c
static void invert_key(u16 *ek, u16 dk[IDEA_KEYLEN]) {
    u16 temp[IDEA_KEYLEN];
    // temp is allocated on stack to hold inverted key
    ...
    memcpy(dk, temp, sizeof(temp));
    memset(temp, 0, sizeof(temp));
}
```

### 5.9 Crypto++

Crypto++ is a C++ class library implementing several cryptographic algorithms [8]. We tested version 5.6.4. Crypto++ defines `SecureWipeBuffer`, which reliably scrubs memory by using custom assembly if the buffer contains values of type `byte`, `word16`, `word32`, or `word64`; otherwise, it uses the volatile data pointer technique. Despite the availability of `SecureWipeBuffer`, we found one scrubbing operation dealing with sensitive data that was removed because it used plain `memset` rather than `SecureWipeBuffer`.

**Sample Case:**
The `UncheckedSetKey` function, shown in Figure 8, sets the key for a CAST256 object. `UncheckedSetKey` uses plain `memset` to scrub the user key on the stack, which is removed by the optimizer.

**Developer Response:**
The bug was patched with a call to `SecureWipeBuffer`.

```c
void CAST256::Base::UncheckedSetKey(const byte *userKey, unsigned int keylength, const NameValuePairs &) {
    AssertValidKeyLength(keylength);
    word32 kappa[8];
    // kappa is allocated on stack to hold user key
    ...
    memset(kappa, 0, sizeof(kappa));
}
```

### 5.10 Bitcoin

Bitcoin is a cryptocurrency and payment system [5]. We tested version 0.13.0 of the Bitcoin client. The project defines `memory_cleanse`, which reliably scrubs memory by using `OPENSSL_cleanse`, described below. The source code uses `memory_cleanse` consistently; we found no removed scrubbing operations.

### 5.11 OpenSSH

OpenSSH is a popular implementation of the SSH protocol [19]. We tested version 7.3. OpenSSH defines its own `explicit_bzero`, which is a reliable way of scrubbing memory: it uses BSD’s `explicit_bzero` if available, then `memset_s` if available. If neither are available, it uses the volatile function pointer technique to call `bzero`. We found no removed scrubbing operations.

### 5.12 Discussion

Our case studies lead us to two observations. First, there is no single accepted scrubbing function. Each project mixes its own cocktail using existing scrubbing techniques, and there is no consensus on which ones to use. Unfortunately, as we discussed in Section 3, some of the scrubbing techniques are flawed or unreliable, making scrubbing functions that rely on such techniques potentially ineffective. To remedy this state of affairs, we developed a single memory scrubbing technique that combines the best techniques into a single function, described in Section 6.

Second, even when a project has a reliable scrubbing function, developers do not use their scrubbing function consistently. In four of the eleven projects we examined, we found cases where developers called `memset` instead of their own scrubbing function. To address this, we developed a scrubbing-safe dead-store elimination pass that defensively compiles bodies of code, as discussed in Section 7.

### 6 Universal Scrubbing Function

As we saw in Section 3, there is no single memory scrubbing technique that is both universal and guaranteed. In the next section, we propose a compiler-based solution based on Clang that protects scrubbing operations from dead-store elimination. In many cases, however, the developer cannot mandate a specific compiler and must resort to imperfect techniques to protect scrubbing operations from the optimizer. To aid developers in this position, we developed our own scrubbing function, called `secure_memzero`, that combines the best effective scrubbing techniques in a simple implementation.

Specifically, our implementation supports:
- Platform-provided scrubbing functions (`SecureZeroMemory` and `memset_s`) if available,
- The memory barrier technique if GCC or Clang are used to compile the source, and
- The volatile data pointer technique and the volatile function pointer technique.

Our `secure_memzero` function is implemented in a single header file `secure_memzero.h` that can be included in any project.