tools (represented by the intersection of the circles), different 
tools also detected many different vulnerabilities. This confirms 
the well-known idea that there is no silver bullet to solve all se-
curity problems [20]. Furthermore, during the manual verifica-
tion, additional  vulnerabilities  were  found  (represented  by  an 
empty circle in the figure). As this was not done systematically 
we do not have this data accurately defined. However, the fact 
that there are vulnerabilities that were not detected by either one 
of the tools reinforces the need for performing other types of 
vulnerability detection analysis, besides using automated tools. 
Many researchers and practitioners also advise the use of other 
security practices like security training, manual code reviewing, 
black-box testing, etc. [2]. 
C. Root cause of the vulnerabilities 
To better understand the root cause of the vulnerabilities pre-
sent in the most recent version of the plugins, we made an ex-
tensive analysis on how the malicious data reaches the code of 
the plugins. This was done by following the reverse path of the 
tainted  data,  from the  vulnerable  variable until it reaches the 
boundary of entrance of the plugin. We observed that the sources 
of data might be classified into three types, regarding the appar-
ent ease of exploitation (see also Table II): 
1. Likely  to  be  directly  manipulated  by  attackers,  through 
POST, GET or COOKIES. These types of vulnerabilities can 
Version 2012
Pixy 
EE 11 
17 
phpSAFE 
E
11 
11 
202 
29 
83 
22
Manual 
RIPS 
R
R
6 
Version 2014
Pixy 
8 
2 
4 
4
4
44
109   
109 
9
phpSAFE 
phpSAFE
251  
251 
RIPS 
RIPS
173 
173
Fig. 2. Tools Vulnerability Detection Overlap
Manual 
305305
22
96
24
211
41
43
111
57
363
11
11
36
19
162
4
TABLE II.  MALICIOUS INPUT VECTOR TYPE
Version 2012
Version 2014
Both versions
Input Vectors
POST
GET
DB
POST/GET/COOKIE
File/Function/Array
be easily discovered and exploited by occasional hackers and 
script kiddies, so they are likely to be massively exploited 
[17]. There are 211 of such vulnerabilities, representing 36% 
of  all  the  vulnerabilities  found.  We  consider  this  a  huge 
value, due to the security danger of mass exploitation and 
because they are also usually quite easily spotted by plugin 
developers. To illustrate this type, consider the following ex-
ample adapted from wp-symposium plugin: 
'Created '.$_POST[ 'img_path' ].'.';/> 
2. Indirectly manipulated by attackers, but that can be easily 
accessed  by them,  like the database. These  vulnerabilities 
may be prevented if the manipulation of database values is 
properly protected. However, quite often developers do not 
care  with  parameterized  queries  to  prevent  SQLi  (among 
other good practices). Other times they prevent SQLi, but 
they  forget  blended  attacks  where  the  malicious  string  is 
stored in the database, but is use to exploit other vulnerability 
types, like XSS. Although this may be more difficult to ex-
ploit than the previous one, its effect is usually more devas-
tating, because it is persistent and may affect many users at 
once. For these reasons, it may be the preferred attack vector 
for professional hackers and the organized crime. There are 
363 (62%) of such cases in the plugins analyzed, meaning 
that most developers do have a high confidence on what is 
coming  from the  database.  Consider the  example adapted 
from wp-photo-album-plus plugin: 
$image = $wpdb->get_var( 
$wpdb->prepare("SELECT %s FROM ...")); 
echo stripslashes($image); 
3. Unlikely to be easily manipulated by attackers, like operat-
ing system files, the core CMS framework or plugin functions 
and other variables like arrays. These situations may be less 
prone to attacks due to the increased difficulty in taking con-
trol over the resources needed to exploit the vulnerability. It 
may even need a chained exploitation of other vulnerabili-
ties, which may require a high level of expertise to be suc-
cessful.  We  have,  however,  seen  advanced  attacks  using 
them,  specially  file manipulation [17].  We  only  found  11 
(1.8%) of such vulnerabilities in our dataset. Consider the 
following example adapted from qtranslate plugin: 
$res = fgets($fp, 128); echo $res;
Like many other scripting languages, PHP is weak typed, so 
variables are not restricted to a single data type (e.g., one varia-
ble may store interchangeably an integer or a string). This flex-
ibility  also  poses  serious  security  problems  when  not  used 
properly. From the vulnerable variables of the plugins, 39% are 
meant to store numeric values, but they do not have any check 
to restrict what values they may store. This is inline with other 
studies that found 45% of numeric variables in the vulnerability 
fixes done by developers [2]. These numeric variables are usu-
ally easier to exploit than text variables, because numbers are 
not enclosed by quotes or double quotes when used in the code 
(that have to be bypassed to exploit the variable). This may ex-
plain why integer variables are widely exploited [17].  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply. 
D. Inertia in fixing vulnerabilities 
One of the quality assurance activities that should be done 
while maintaining software during its lifecycle is fixing bugs, 
giving priority to those that are more critical, like security issues. 
The vulnerabilities found in the 2012 version of the plugins were 
initially disclosed to the developers in November 2013 [3]. In 
the present study we analyzed which of the vulnerabilities found 
in the 2014 version were among the ones previously disclosed 
in the 2012 version. We found that 249 (42%) of the vulnerabil-
ities discovered in the 2014 version are among the ones discov-
ered and  disclosed to the developers  more  that  one  year ago. 
From those, 59 (24%) are very easy to exploit (through GET, 
POST or COOKIE manipulation). This is a disturbing result that 
should raise the awareness of plugin developers, of maintainers 
of the CMS frameworks, of the site administrators, and of the 
end users. 
E. Responsiveness and robustness of the tools 
All tests were performed on an Intel Core i5 2.8 GHz with 8 
GB of memory, running OS X Yosemite 10.10.1. The CPU time 
that each tool took to analyze all the 35 plugins is showed in 
table  III.  The  time  values  are  an  average  of  five  runs.  RIPS 
needed 0.8 seconds per K Lines Of Code (LOC) to analyze the 
2012 version of the plugins and phpSAFE took about 0.2 sec-
onds per KLOC, but missed the analysis of one file. To analyze 
the 2014 version of the plugins phpSAFE took 1.0 second and 
RIPS took approximately the same time. Thus, we are positive 
that phpSAFE and RIPS should scale to larger files. 
Overall the 2012 version of the plugins had 266 files ana-
lyzed with a total of 89,560 LOC, and the 2014 version had 356 
files with 180,801 LOC. RIPS succeeded in completing the anal-
ysis of all files, while phpSAFE was unable to analyze one file 
in  the 2012  version and three  files in the 2014  version.  Pixy 
failed to complete the analysis on 32 files. Moreover, Pixy raised 
one error message in the 2012 versions and 37 in the 2014 ver-
sions, probably because it is an old tool and does not recognize 
OOP code. 
VI. CONCLUSION AND FUTURE WORK
In this paper we presented phpSAFE, a source code vulner-
ability analyzer that is able to detect both XSS and SQLi vulner-
abilities in plugins of applications developed in PHP with OOP. 
There are other free tools to search for vulnerabilities in PHP 
code, like RIPS and Pixy, but they are neither ready for OOP nor 
for analyzing plugins. As WordPress applications are so com-
mon, we evaluated phpSAFE, RIPS and Pixy with a set of 35 
WordPress plugins, according to Precision, Recall and F-score 
metrics. Due to its novel features, phpSAFE outperformed the 
other tools. The experiments also showed that using many tools 
allows  increasing  the  number  of  different  vulnerabilities  de-
tected, showing that there is room for improvement. 
We used two versions of the 35 plugins to analyze how the 
tools cope with the evolution of the code. phpSAFE and RIPS 
did not show a relevant change in their detection performance, 
but Pixy had a significant decrease, possibly due to its lack of 
updates since 2007. Also, we were able to notice a 50% increase 
TABLE III.  DETECTION TIME OF ALL PLUGINS IN SECONDS 
phpSAFE
RIPS
Pixy
Ver. 2012
17.87
Ver. 2014
180.91
Ver. 2012
69.42
Ver. 2014
178.46
Ver. 2012
49.57
Ver. 2014
106.54
in the number of vulnerabilities in just two years. A more critical 
observation is that 40% of all the vulnerabilities found in the up-
dated plugins were already present in the older version, even for
those vulnerabilities that were disclosed to the developers more 
than one year ago. 
Future work includes the improvement of phpSAFE, mainly 
regarding performance, memory consumption and vulnerability 
coverage, along with the analysis of other CMS applications like 
Drupal  or  Joomla.  We  also  intend  to  study  the  evolution  of 
plugin security and plugin updates over time by enabling historic 
data in phpSAFE. Developers may use it for approving third-
party plugins before allowing their integration. 
REFERENCES
[2]
[1] Khan, Huda and Shah, Deven and Risk “Webapps Security With RIPS”, 
International Conference on Electrical, Electronics Engineering 9th De-
cember 2012, Bhopal, ISBN: 978-93-82208-47-1 
J. Fonseca, M. Vieira, “Mapping Software Faults with Web Security Vul-
nerabilities”, IEEE/IFIP Int. Conference on Dependable Systems and Net-
works, June 2008 
José  Fonseca,  Marco  Vieira, “A  Practical Experience  on  the Impact of 
Plugins in Web Security”, The 33rd IEEE Symposium on Reliable Dis-
tributed Systems (SRDS 2014), Nara, Japan, October 6-9, 2014 
[3]
[4] Automattic, http://automattic.com/, visited in March 2015 
[5] w3techs, http://w3techs.com/technologies/overview/ 
content_management/all/, visited in November 2014 
[6] N. Nostro, A. Ceccarelli, A. Bondavalli, and F. Brancati, “Insider threat 
assessment:  A  model-based  methodology,”  SIGOPS  Oper.  Syst.  Rev., 
vol. 48, no. 2, pp. 3–12, Dec. 2014. 
[7] S. Neuhaus, T. Zimmermann, “Security Trend Analysis with CVE Topic 
Models”, International Symposium on Software Reliability En- gineering, 
pp. 111-120, 2010 (cid:850)
J.  Dahse  e  T.  Holz,  “Simulation  of  Built-in  PHP  Features  for  Precise 
Static Code Analysis,” Network and Distributed Systems Security Sym-
posium (NDSS), San Diego, CA, USA, 2014. 
[8]
[9] Y. Huang, F. Yu, C. Hang, C. Tsai, D. Lee, S. Kuo, “Securing Web Ap-
plication Code  by Static  Analysis and Runtime  Protection,” Proc. 13th 
International Conference on World Wide Web, NY, USA, 2004. 
[10] N. Jovanovic,  C.  Kruegel, E.  Kirda, “Pixy:  A  Static  Analysis Tool  for 
Detecting Web Application Vulnerabilities”, IEEE symposium on secu-
rity and privacy, pp. 258-263, 2006 
[11] G. Wassermann, Z. Su, “Static detection of cross-site scripting vulnera-
bilities”, 30th Int. Conference on Software Engineering, 2008
[12] D.  Balzarotti,  M.  Cova,  V.  Felmetsger,  N.  Jovanovic,  et  al.,  “Saner: 
Composing Static and Dynamic Analysis to Validate Sanitization in Web 
Applications”, IEEE Symposium on Security and Privacy, SP 2008
[13] B. Chess, J. West, “Secure Programming with Static Analysis”, Addison-
Wesley Professional, 2007 
[14] V. B. Livshits e M. S. Lam, “Finding Security Vulnerabilities in Java Ap-
plications with Static Analysis”, Usenix Security, 2005.
[15] Vogt, Philipp, et al. "Cross Site Scripting Prevention with Dynamic Data 
Tainting and Static Analysis." NDSS. 2007 
[16] Eric Bouwers. Analyzing PHP, “An Introduction to PHP-Sat". Technical 
report, 2006. 
[17] J. Fonseca, M. Vieira, H. Madeira, “The Web Attacker Perspective – A
Field Study”, IEEE 21st International Symposium on Software Reliability 
Engineering, Nov. 2010 
[18] J. Fonseca, November 2014, “phpSAFE”, https://github.com/JoseCarlos-
Fonseca/phpSAFE 
[19] N. L. de Poel, “Automated security review of php web applications with 
static code analysis”, Master's thesis, vol. 5, 2010. 
[20] J. Fonseca, M. Vieira, chapter “A Survey on Secure Software Develop-
ment Lifecycles”, Khalid Buragga, Noor Zaman (Eds.), “Software Devel-
opment  Techniques  for  Constructive  Information  Systems  Design”, 
ISBN: 9781466636798, IGI Global, 2013. 
306306
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:58:14 UTC from IEEE Xplore.  Restrictions apply.