We emphasize that we use multi-threading only for the base
OTs and that for small circuit sizes this time is much longer
than the online time (cf. Table 3).
441Table 2: Comparison of base OT implementations.
single threaded
time
over FP [HEKM11]
over EC
286 ms (100%)
560 ms (196%)
multi threaded (over FP )
time
1 thread
2 threads
4 threads
314 ms (110%)
182 ms (64%)
153 ms (53%)
For the OT extensions (independent of the performance
of the base OTs), our improved implementation of the pro-
tocol of §3.2 can evaluate about 400,000 OTs per second,
i.e., 2.5μs per OT, a factor 6 improvement over the 15μs
reported in [HEKM11] (which used faster Intel Core Duos
E8400 3GHz and a faster local area network).2 We em-
phasize that this optimization is very beneﬁcial for applica-
tions where the circuit has many inputs, e.g., for converting
from homomorphic encryption to garbled circuits and sub-
sequently ﬁnding the minimum, a very common building
block in privacy-preserving protocols for biometric match-
ing [HKS+10, HMEK11, BG11] (cf. the example we bench-
mark in §4.2.4).
4.2 Online Time
The following benchmarks were executed on a single iMac
A1311 with an Intel Core i3 3GHz processor using the loop-
back network interface. We measured the online time, that
is the time from after the connection is established and the
base OTs are done until the end of the protocol. This time
includes the time for the OT extensions and streaming, i.e.,
creating, transferring, and evaluating, the garbled circuit.
Our improved implementation evaluates about 500,000
non-linear gates per second (2μs per gate) on the same host
(setting as described above) and about 350,000 non-linear
gates per second (3μs per gate) over WLAN (setting as de-
scribed in §4.1).
In contrast, [HEKM11] reported 96,000
non-linear gates per second (10μs per gate) over a LAN.3
In the following we show that the online time of our frame-
work when evaluated on the same host as described above
(i.e., assuming an ideal network) is up to 10 times faster than
that of previous frameworks; we give a comparison for small
circuits with FastGC [HEKM11] in §4.2.1 and §4.2.2 (using
optimized circuit constructions), for medium size circuits
with FastGC [HEKM11] and TASTY [HKS+10] in §4.2.3,
and for large circuits with FastGC [HEKM11] and VMCrypt
in §4.2.4. The comparison between our implementation and
FastGC [HEKM11], both executed on exactly the same ma-
chine, is summarized in Table 3.
4.2.1 Hamming Weight
Some applications, e.g., privacy-preserving face recogni-
tion [OPJM10], require to securely compute the Hamming
distance dH((cid:4)a,(cid:4)b) between two (cid:3)-bit strings (cid:4)a, (cid:4)b. As shown
2For completeness we note that [NNOB12] claim an actively-
secure OT extension that can be implemented at about
500,000 OTs per second based on unpublished optimizations
(cf. Appendix A and E in the full version of their paper).
3In the malicious setting, [KSS09] report 82,000 non-linear
gates per second (12μs per gate) on a cluster and [NNOB12]
20,000 gates per second (50μs per gate) over an intranet.
in [HEKM11], this can be done by XORing (cid:4)a and (cid:4)b bitwise
and computing its Hamming weight h(·), i.e., the number of
“ones” in its binary representation: dH((cid:4)a,(cid:4)b) = h((cid:4)a ⊕ (cid:4)b).
(cid:2)(cid:2)log2
i=0
(cid:2)(cid:3)
(cid:3) i
2
(cid:2)(cid:3)+2
2i = (cid:3)(2 − (cid:2)log2
Original Hamming Circuit. The authors of [HEKM11]
propose to use a tree of addition circuits which requires ap-
(cid:2)log2 (cid:2)(cid:3) ) ≈ 2(cid:3) − log2
(cid:3)
proximately
non-linear gates. For the example of (cid:3) = 900 given in their
paper this yields approximately 1,790 non-linear gates.
Improved Hamming Circuit. We use the optimized Ham-
ming weight circuit of [BP06] with size (cid:3) − h((cid:3)) non-linear
gates, where h((cid:3)) is the Hamming weight of (cid:3). For (cid:3) = 900
this yields 900 − h((1110000100)2 ) = 896 non-linear gates.
The resulting circuit sizes and performance results are
shown in Table 3. Put together, the improved Hamming
circuit together with our improved implementation is more
than 10 times faster than the original Hamming circuit eval-
uated with FastGC [HEKM11] (6 w/o circuit optimization).
4.2.2 Block Ciphers
Oblivious evaluation of a block cipher where one party
provides the key and the other party provides the mes-
sage and obtains the ciphertext has many applications as
summarized in [PSSW09]. These include oblivious pseudo-
random functions (OPRFs) with applications to secure key-
word searching [FIPR05] or secure set intersection [JL09],
blind MACs, and blind encryption.
As noted in [HEKM11], the key schedule of the block ci-
pher does not need to be computed securely within the gar-
bled circuit. Instead, the party that knows the key can run
the key schedule on the plain key data to expand it and
provide the expanded key as input to the protocol.
AES. Secure evaluation of AES is commonly used as per-
formance benchmark for secure computation frameworks,
e.g., [PSSW09, HKS+10, HEKM11, KSS12].
Original AES Circuit. Excluding the key schedule, AES-
128 consists of 10 rounds where in each round 16 S-boxes
are evaluated. As shown in [HEKM11, Sect. 7], all other
operations, e.g., MixColumns and AddRoundKey, can be
performed using only free XOR gates. The S-box presented
in [HEKM11] has 58 non-linear gates resulting in 58·10·16 =
9,280 non-linear gates for AES.
Improved AES Circuit. Instead, we implemented the S-
box of [BP10] which consists of only 32 non-linear gates
resulting in a total of 32· 10· 16 = 5,120 non-linear gates for
AES. We note that the AES circuit implemented in [KSS12]
uses the same S-box and has 9,100 non-linear gates, but
including the key schedule.
PRESENT. For the applications mentioned above, it might
be suﬃcient to use a block cipher that does not provide
the strong security guarantees of AES, but is more eﬃ-
cient to evaluate. An example for such an ultra-lightweight
block cipher is PRESENT with a block length of 64 bit and
an 80 bit key. PRESENT consists of 31 rounds where in
each round a 4-bit S-box is applied 16 times in parallel.
We implemented PRESENT using the S-box representation
of [CHM11, CHM12] which has 4 non-linear gates. Overall,
PRESENT requires 31 · 16 · 4 = 1,984 non-linear gates.
442Circuit
non-linear gates
1,793
896
9,280
5,120
1,984
17,973
(100%)
(44%)
(100%)
(55%)
(21%)
Table 3: Comparison of circuit sizes and performance when run on the same machine.
FastGC [HEKM11] Our Implementation
§4.2.1 Original Hamming
(13%)
(9%)
Improved Hamming
§4.2.2 Original AES
(13%)
(8%)
Improved AES
PRESENT
(3%)
(9%)
(11%)
(22%)
(10%)
§4.2.3 Fast Multiplication
§4.2.4 Minimum
8 ms
6 ms
27 ms
16 ms
7 ms
45 ms
138 s
272 s
128 s
(100%)
(61%)
(100%)
(55%)
(26%)
(100%)
40,000,000
1,250 s
(100%)
64 ms
39 ms
204 ms
113 ms
53 ms
499 ms
a)
b)
c)
Comparison. The size of the AES and PRESENT circuits
and their performance comparison are shown in Table 3.
The improved AES circuit evaluated with our improved im-
plementation is about 12 times faster than the original AES
circuit evaluated on the FastGC engine [HEKM11]. Due to
its smaller gate count, PRESENT is almost 4 times faster
than the original AES circuit and twice as fast as the im-
proved AES circuit.
4.2.3 Fast Multiplication
To compare our implementation with FastGC [HEKM11]
and TASTY [HKS+10] for circuits of medium size, we im-
plemented secure multiplication using the fast multiplication
method of Karatsuba and Ofman [KO62]. For multiplication
of two 128 bit numbers, this circuit has 17,973 non-linear
gates and took 45 ms online time to evaluate in our opti-
mized framework.
The same circuit implemented in FastGC [HEKM11] and
run on the same machine took 499 ms, i.e., more than 10
times longer. This result supports the fact that the improved
online time of our implementation, in particular for medium
size circuits, is substantially faster than that of [HEKM11],
even without circuit-speciﬁc optimizations.
According to [HKS+10, Fig. 7], TASTY takes approxi-
mately 4,000 ms setup time and 700 ms online time to eval-
uate the same circuit on two desktop PCs with Intel Core
2 Duo CPU (E6850) running at 3GHz connected via Gi-
gabit Ethernet. We emphasize that TASTY doesn’t use
streaming, but pre-computes the OT extensions and gen-
erates and transfers the garbled circuit already in the setup
phase; hence, the online time in TASTY consists only of the
very eﬃcient online OTs of Beaver’s construction [Bea95]
and garbled circuit evaluation whereas our online time in-
cludes the computationally more expensive OT extensions
and creating and transferring the garbled circuit which is
minimized due to streaming. Overall, for this application,
the online time of our improved framework is faster than
TASTY by a factor of about 16 times, whereas our setup
time is as low as 153 ms for the base OTs (cf. Table 2), i.e.,
26 times faster.
4.2.4 Minimum
To compare our implementation with FastGC [HEKM11]
and VMCrypt [Mal11] for circuits of large size, we imple-
mented a circuit to compute the minimum of 106 20-bit
numbers (half of the numbers are input by the server and
the other half by the client) using a circuit similar to the one
described in [Mal11, Fig. 2]. We use the OT extension with
low memory footprint described in §3.2 such that the total
memory consumption stays linear in the size of the subset
and not in the order of the total number of inputs. The
overall circuit has 2 · (106 − 1) · 20 ≈ 40,000,000 non-linear
gates. There are diﬀerent approaches to compute this func-
tionality which demonstrate the ﬂexibility of our system that
allows to choose a trade-oﬀ between execution time (shown
in Table 3) and memory consumption (shown in Table 4):
a) The ﬁrst solution has the lowest OT overhead but re-
quires the maximum amount of memory (800 MB) by doing
the OTs for all inputs ﬁrst and then evaluating a large circuit
with a working set of size 2 ∗ 107. The runtime is 138 s.
b) As another extreme we can iteratively compare one in-
put each at a time with the previously found minimum. This
approach needs the minimal amount of memory (18.4 MB)
but the maximal total runtime (272 s) as the OT protocol
introduces a signiﬁcant overhead.
c) Our framework allows to choose an intermediate ap-
proach where we iteratively compute the minimum of a sub-
set of 500 inputs and the minimum of the previous iteration.
This sub-circuit has 19,960 non-linear gates and a working
set of 10,022 labels and is small enough to be cached in
memory – the total memory requirement is 21.5 MB and
the total runtime is 128 s.
When evaluating the same circuit on the same machine
with FastGC [HEKM11], this took approximately 1,250 s
and 189 MB memory, i.e., more than 9 times longer and 10
times more memory compared to our approach c).
According to [Mal11, Fig. 8], VMCrypt takes 44.5 min on
a slower CPU (Thinkpad X301 laptop with 3 GB RAM and
a 1.6 GHz Intel Core2 Duo processor running Ubuntu Linux
over the loopback interface), i.e., about 10 times longer than
our approach c), already considering the fact that our CPU
is about twice as fast. We assume that our improved perfor-
mance stems mainly from the fact that we do not allocate
and free many small objects.
4.3 Memory Consumption
Measuring the memory consumption of a Java program
is fuzzy, since released objects remain on the heap until the
garbage collector deletes them and the garbage collector it-
self is managed by the Java virtual machine. Thus, the
heap contains not only the currently used objects but also
already released ones and therefore the size of the heap will
be greater or equal to the size of the currently used objects.
We measured the maximum heap consumption of every pro-
tocol, since this gives an indication of how much memory
is needed for a runtime optimal execution. The protocols
443might run with smaller heap sizes, but then the virtual ma-
chine has to invoke the garbage collection more often which
results in longer runtimes. Table 4 shows the maximum size
of the heap during the execution for all protocols.
The memory consumption of FastGC is linear in the total
number of gates whereas in our implementation it is lin-
ear in the size of the working set. Although for circuits