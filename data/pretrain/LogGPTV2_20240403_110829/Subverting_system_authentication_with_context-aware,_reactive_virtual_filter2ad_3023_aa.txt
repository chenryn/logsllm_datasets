title:Subverting system authentication with context-aware, reactive virtual
machine introspection
author:Yangchun Fu and
Zhiqiang Lin and
Kevin W. Hamlen
Subverting System Authentication With Context-Aware,
Reactive Virtual Machine Introspection
Yangchun Fu, Zhiqiang Lin, Kevin W. Hamlen
Department of Computer Science, The University of Texas at Dallas
800 W. Campbell Rd, Richardson, TX, 75080
{yangchun.fu, zhiqiang.lin, hamlen}@utdallas.edu
ABSTRACT
Recent advances in bridging the semantic gap between virtual ma-
chines (VMs) and their guest processes have a dark side: They can
be abused to subvert and compromise VM ﬁle system images and
process images. To demonstrate this alarming capability, a context-
aware, reactive VM Introspection (VMI) instrument is presented
and leveraged to automatically break the authentication mechanisms
of both Linux and Windows operating systems. By bridging the
semantic gap, the attack is able to automatically identify critical
decision points where authentication succeeds or fails at the binary
level. It can then leverage the VMI to transparently corrupt the
control-ﬂow or data-ﬂow of the victim OS at that point, result-
ing in successful authentication without any password-guessing or
encryption-cracking. The approach is highly ﬂexible (threatening a
broad class of authentication implementations), practical (realizable
against real-world OSes and VM images), and useful for both
malicious attacks and forensics analysis of virtualized systems and
software.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Invasive
software
General Terms
Security
Keywords
Authentication; Reverse Engineering; Virtual Machine Introspection
1.
INTRODUCTION
Virtualization of traditionally physical machines and hardware
is being widely adopted as a means of cutting costs, improving
portability, and easing maintainability of computer systems. For
security, virtualized systems are typically represented as encrypted
ﬁle system and memory images that are only accessible by loading
the image into a compatible VM for execution, and passing an
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior speciﬁc permission and/or a fee. Request permissions from
Permissions@acm.org.
ACSAC ’13 Dec. 9-13, 2013, New Orleans, Louisiana USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12˙..$15.00.
http://dx.doi.org/10.1145/2523649.2523664.
229
authentication check (e.g., login password) posed by the interpreted
guest operating system (OS). To prevent subversion by an attacker,
the authentication mechanism is often protected by an array of anti-
debugging logic, cryptographic security, code obfuscation, and self-
checking, to thwart efforts from reverse-engineering and credential-
theft.
While these protections are viewed by many experts as reason-
ably secure against typical, low-resource attackers equipped with
standard hardware, we observe that the rise of virtualization has
quietly undermined several assumptions foundational to this view.
Speciﬁcally, nearly all standard OS authentication defenses implic-
itly assume that the hardware on which the OS is running is non-
malicious and immutable. For example, the OS’s anti-debugging
logic assumes that the machine instructions it uses to detect rival
processes have the semantics deﬁned by the CPU architecture, and
that those semantics do not change from one instruction to the
next. Unfortunately, this assumption can be potentially violated by a
malicious VM, which effectively allows even a low-resource attacker
to rapidly implement virtual, custom “hardware” with arbitrary
semantics at low cost.
Even though the threat of malicious VMs is generally known (e.g.,
Bluepill [37] and SubVert [26]), the high danger of this situation
has been signiﬁcantly underestimated in our opinion, due in part to
the well-known semantic gap between VMs and the guest software
they host. VMs do not have direct knowledge of high-level program
abstractions, such as data structures, functions, or algorithms; they
operate at the level of registers, bytes, and instructions. This raises
a veil of obscurity that seems to make authentication-tampering
through a VM even more difﬁcult than tampering at the traditional
process level. We believe this apparent obstacle is why no previous
work to our knowledge has actually carried out precision tampering
of general authenticators (e.g., login) through malicious VMs.
In this paper we show that recent advances toward bridging
the semantic gap [5, 9, 11, 33, 34] have made such VM-based
attacks much more feasible. To demonstrate, we present the design,
implementation, and evaluation of a malicious VM Monitor (VMM)
that employs a novel VMI [13] to identify and subvert security-
critical instructions in virtualized authentication implementations.
Our attacks succeed without any knowledge of program-level ab-
stractions or source codes; thus, concealing or obfuscating sources
is not an effective defense.
Our experiments showcase the success of our approach against
authentication protections, which are the ﬁrst line of defense for
many computer systems. In general, authentication can be abstracted
as a boolean conditional test f (x) = c, where x could be a password,
challenge response (e.g., CAPTCHA), biometric (e.g., ﬁngerprint),
or other input (e.g., RFID key) provided by the user; and f is a (one-
way) validation function that transforms x into an output comparable
to correct digest c. Guessing x by brute force is intractable when the
domain of f is large, and learning x from c or ﬁnding a weakness
in f is difﬁcult if f is well-protected. Instead, we observe that an
attacker with a reactive VMI can relatively easily ﬁnd and subvert the
comparison operation (=) or c directly. By ﬂipping the comparison
outcome or replacing c with f (y) for some known y, the attacker
gains access without knowing x.
As a proof-of-concept, we present a new technique to break
system authentication by designing a malicious VMM built atop
a VMI [13] that pulls guest-OS state from the outside VMM and
enriches the VMI with context-aware, reactive capability. That is,
unlike traditional VMI, our VMI requires access to only a small
subset of the guest-OS states, but offers write-access to states in
addition to read-access. Through step-by-step design, implemen-
tation, and evaluation, we show that such a VMI capability can
automatically intercept and tamper with any of the execution states
of the authentication process (e.g., login, sshd, vsftpd, or
telnetd in Linux/UNIX, and winlogon in Microsoft Windows)
running inside the guest-OS, and thereby enter the target system
without knowing any password.
While the virtualzation layer can theoretically intercept and tam-
per with any guest program states, our main technical challenge
is to identify the exact execution context to modify, and modify it
appropriately. That is, we must identify and corrupt the precise exe-
cution state at the instant of authentication failure, and infer a state
change that makes it succeed. However, there are no abstractions
(e.g., process descriptors, ﬁle objects, or variables) at the VM layer.
This grand obstacle explains why, to the best of our knowledge,
there have been no such VMI attacks in the wild previously. We
show how semantic gap-bridging technologies applied using our
VMI can overcome this obstacle.
Our VMI attack is extremely dangerous and practical. We demon-
strate that it can automatically break the authentication and enter
the target system without any password. This implies that malicious
public or private cloud providers can harvest sensitive information
from user-supplied VM images even if the images might have been
protected by full disk encryption (FDE), since malicious cloud
providers can use our attack to authenticate while the VM is running.
Moreover, the current trend of virtualizing physical machines [42]
dramatically increases exposure to our attack, since virtual system
images can be loaded into our malicious VMM to bypass their
authentication.
The attack is also extremely ﬂexible. With state-of-the-art binary
code analysis techniques (e.g., [20]), attackers can dynamically
patch any instructions or execution states of victim applications (not
just the authentication process) to bypass other security measures,
such as license checks and commercial OS activation checks. It
is also potentially useful for benign purposes, such as to facilitate
law-enforcement access to authentication-protected criminal laptops
(by ﬁrst converting it to a VM and then executing atop our VMI).
In summary, this paper makes the following contributions.
• We present a new technique to break authentication using
VMI, and show that it is extremely powerful, allowing attack-
ers to trivially enter victim computers without a password.
• We devise a novel enabling technique—context-aware, reac-
tive introspection—that enriches traditional read-only VMI
with guest CPU register- and memory-write capability, and
we present a detailed design, implementation, and evaluation.
• We observe that our VMI attack is very difﬁcult to prevent
for any system amenable to virtualization. For protection of
laptops, we advocate FDE with pre-boot authentication.
2. BACKGROUND
We begin by examining various possible approaches to subverting
system authentications in §2.1, and then deﬁne our threat model and
assumptions in §2.2.
2.1 Possible Approaches
There are four obvious approaches to subverting authentication
test f (x) =c : (1) computing x = f−1(c), (2) tampering with f,
(3) tampering with equals (=), or (4) replacing c with f (y) for
some known y. Computing x = f−1(c) through brute force (e.g.,
dictionary attack) is historically the most common, but requires
enormous computing resources if the domain of f is large and
x is non-trivial. Tampering with f is frustrated by its usually
(intentionally) complex implementation, which include numerous
cryptographic layers, anti-debugging, and self-checks.
In contrast, the implementation of equals is relatively simple; it
usually manifests as a single conditional jump instruction (je/jne
on x86) hidden somewhere in the binary. If equals is later followed
by a double-check, such as a control-transfer of the form jmp g(x, c)
where g(x, c) yields some correct destination d if and only if f (x) =
c, then this extra check is similarly subvertable once d is known
(e.g., by observing the behavior of a program copy where legitimate
authentication is possible).
Likewise, replacing c with f (y) is often an attractive and easy
alternative approach. In this scenario, the attacker uses the malicious
VMI to effect a man-in-the-middle (MitM) attack that replaces
the resource containing c (e.g., the password ﬁle or its in-memory
image) with a false one that encodes attacker-owned credential y.
The attacker can then successfully authenticate using y instead of x.
There are three layers at which one might subvert equals or c in
modern computing infrastructures:
Hardware-layer. One approach is to craft malicious hardware that
corrupts the critical comparison instruction or credential digest but
leaves all other instruction semantics unaffected. This is conceptu-
ally appealing since faithfully preserving all other instructions makes
it impossible for any software at the upper layers to inspect and
detect the malicious environment. However, design and implementa-
tion of trojaned hardware that nonetheless meets the complex opera-
tional demands of standard hardware requires resources beyond the
capabilities of most typical attackers. Hardware companies with this
capability are not motivated to carry out such attacks since doing so
potentially harms their reputation with customers. Thus, aside from
malicious hardware crafted by determined, capable adversaries in
the defense and research communities (e.g., [4, 7, 27, 38]), such
attacks are relatively rare to our knowledge.
Software-layer, inside OS. In contrast to hardware, the software
layer has long been an affordable target for all levels of attacks (from
kernel rootkits to backdoors, trojans, and viruses). More speciﬁ-
cally, software attackers commonly attempt to break authentication
f (x) =c by introducing a backdoor that circumvents f, patching
the equality check after f, or forging data c. However, for these
attacks to succeed, there are two conditions: (1) we must be able
to mount the disk of the target system and traverse its data ﬁles
to locate f and c, and (2) the target system must not contain any
integrity checks (e.g., Tripwire [25]) to verify the integrity of f and
c as well as other critical components.
With the increasing privacy and data breach concern from end-
users, most modern OSes satisfy neither of these conditions. Disk
images are usually encrypted (especially those in IaaS clouds and
on laptops protected by products like BitLocker [31]), and OSes im-
plement self-checking and anti-debugging technologies that detect
corruption at the software layer. It is thus difﬁcult to precisely locate
230
f, c, or the conditional branch in the target disk, and corrupting
them raises OS integrity alarms that can render the system unusable
after rebooting. In other words, directly tampering at the OS and
user-level can lead to easy detection by the target computer.
Therefore, since hardware-layer attacks are hard to implement
and software-layer inside OS attacks are easy to detect, this leads
our investigation to the virtualization layer that is outside OS.
Software-layer, outside OS. The rise of virtualization technologies
as the underpinnings for today’s cloud computing and data centers
has made it truly practical for low-resource attackers to create virtual
“hardware” using software, with arbitrary semantics on demand at
low costs. We show that with only minor additions in the form of
context-sensitive, reactive VMI, these technologies facilitate new,
cheap attacks that are undetectable to typical defenses employed
by state-of-the-art guest OSes. These attacks come at almost zero
cost for attackers—with only a few thousands lines of code (LOC)
added to an existing virtualization platform, one can implement Blue
Pill-like attacks [37] that are very challenging, if not impossible,
to detect above the virtualization layer, because they run entirely
beneath the OS and have complete control of the guest system.
2.2 Threat Models, Scope and Assumptions
Threat Models. Our goal is to break the target’s authentication
defense using a stealthy dynamic method from the virtualization-
layer (without being detected by the in-guest security software). We
assume unfettered access by the attacker to a VM image of the target
system. For example, if the target is a physical machine to which
the attacker has physical access, the attacker can virtualize the target
to a VM image using standard tools (e.g., [42]) or custom tools to