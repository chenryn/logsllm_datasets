图5-7 AXMLPrinter项目
到这里还需要告诉大家一件事，对上面的解析工作有一个更简单的方法，那就是aapt命令。关于这个aapt是干什么的，网上有很多资料，其实就是将Android中的资源文件打包成resource.arsc即可，参见图5-8。
::: bodypic-c
![](OEBPS/Images/5a8-i.jpg){.calibre227}
:::
图5-8 aapt工具
类型为res/animator、res/anim、res/color、res/drawable（非Bitmap文件，即非.png、.9.png、.jpg、.gif文件）、res/layout、res/menu、res/values和res/xml的资源文件均会从文本格式的XML文件编译成二进制格式的XML文件。
要从文本格式编译成二进制格式的原因如下：
·二进制格式的XML文件占用空间更小。这是由于所有XML元素的标签、属性名称、属性值和内容所涉及的字符串都会被统一收集到一个字符串资源池中去，并且会去重。有了这个字符串资源池，原来使用字符串的地方就会被替换成一个索引到字符串资源池的整数值，从而可以减少文件的大小。
·二进制格式的XML文件解析速度更快。这是由于二进制格式的XML元素里面不再包含有字符串值，因此就避免了进行字符串解析，从而提高速度。
将XML资源文件从文本格式编译成二进制格式，解决了空间占用以及解析效率的问题，但是对于Android资源管理框架来说，这只是完成了其中的一部分工作。Android资源管理框架的另外一个重要任务就是要根据资源ID来快速找到对应的资源。
那么下面用aapt命令查看一下。aapt命令在AndroidSdk目录中，如图5-9所示。
::: bodypic-c
![](OEBPS/Images/5a9-i.jpg){.calibre228}
:::
图5-9 aapt命令的目录
看到路径了：Android
SDK目录/build-tools/下，这个目录下全是Android中构建apk的所有工具，再看一下这些工具的用途，参见图5-10。
说明如下：
·aapt.exe生成R.java类文件。
·aidl.exe把.aidl转成.java文件（如果没有aidl，则跳过这一步）。
·javac.exe编译.java类文件生成class文件。
::: bodypic-c
![](OEBPS/Images/5a10-i.jpg){.calibre229}
:::
图5-10 构建apk的工具
·dx.bat命令行脚本生成classes.dex文件。
·aapt.exe生成资源包文件（包括res、assets、androidmanifest.xml等）。
·apkbuilder.bat生成未签名的apk安装文件。
·arsigner.exe对未签名的包进行apk签名。
原来可以不借助任何IDE工具也是可以打出一个apk包的。
继续看aapt命令的用法：
::: bodypic-c
![](OEBPS/Images/081-i.jpg){.calibre230}
:::
将输入的结果定向到demo.txt中，如图5-11所示。
::: bodypic-c
![](OEBPS/Images/5a11-i.jpg){.calibre231}
:::
图5-11 aapt命令输出结果
看到解析出来的内容就是上面解析的AndroidManifest.xml内容，所以这也是一个解析方法。当然aapt命令是系统提供给一个很好的工具，可以在反编译的过程中借助这个工具。这里记得有一个aapt命令就好了，它的用途还有很多，可以单独编译成一个resource.arsc文件来，后面会用到这个命令。
[提示：]{.yanse}项目下载地址：[https://github.com/fourbrother/parse_androidxml](https://github.com/fourbrother/parse_androidxml){.calibre32
.pcalibre}
[]{#035.xhtml}
#### 5.3 本章小结 {.bodycontent-title2}
本章主要介绍Android编译之后的AndroidManifest.xml文件格式。可以使用网上的一个小工具AXMLPrinter。但这里我也写了一个工具解析。那么本章内容仅仅是为了解析AndroidManifest吗？肯定不是，写本章内容是为后面介绍反编译apk做准备，其实现在有很多人都发现了，在使用apktool来反编译apk的时候经常报出一些异常信息，其实那就是加固的人用来对抗apktool工具的，导致反编译失败。所以有必要了解apktool的源码和解析原理，这样才能遇到反编译失败时，能定位到问题，修复apktool工具即可。
apktool的工具解析原理其实就是解析AndroidManifest.xml、resource.arsc、classes.dex这三个文件。还有其他的布局、资源xml等，那么针对这几个问题，本章专门解析XML文件的格式，后面章节还会继续解析resource.arsc和classes.dex文件的格式。
[]{#036.xhtml}
### 第6章 resource.arsc文件格式解析 {.bodycontent-title4}
前一章介绍了如何解析AndroidManifest文件格式，本章介绍resource.arsc文件格式解析。resource.arsc格式解析很重要，现在很多应用为了缩减应用包的大小开始对资源进行混淆，就用到这个文件格式；应用安全防护中可以通过对资源混淆来做到安全应用，也用到这个文件格式。本章将从资源文件id格式开始，详细解析资源文件的数据结构头、字符串、正文等。
[]{#037.xhtml}
#### 6.1 Android中资源文件id格式 {.bodycontent-title2}
在使用apktool工具进行反编译的时候，会发现有一个文件res/values/public.xml，如图6-1所示。
::: bodypic-c
![](OEBPS/Images/6a1-i.jpg){.calibre232}
:::
图6-1 public.xml文件\
查看一下public.xml文件内容，如图6-2所示。
可以看到，这个文件保存了apk中所有id类型和对应的id值。这里面的每个条目内容都包括如下内容：
·type：类型名
·name：资源名
·id：资源的id
类型包括如下几种：drawable、menu、layout、string、attr、color、style等，所以会在反编译之后的文件夹中看到这几个类型的文件。
上面介绍了如何使用apktool查看资源文件的内容，下面介绍如何来解析resource.arsc文件。
解压一个apk得到对应的resource.arsc文件。按照惯例，每个文件的格式描述都是有对应的数据结构。resource也不例外：frameworks\\base\\include\\androidfw\\ResourceTypes.h，这就是resource中定义的所有数据结构。下面用一张图详细表示出resources.arsc文件格式，如图6-3所示。
::: bodypic-c
![](OEBPS/Images/6a2-i.jpg){.calibre233}
:::
图6-2 public.xml文件
::: bodypic-c
![](OEBPS/Images/6a3-i.jpg){.calibre234}
:::
图6-3 resources.arsc文件格式（见书后彩图）
[]{#038.xhtml}
#### 6.2 数据结构定义 {.bodycontent-title2}
资源文件的项目如图6-4所示。
::: bodypic-c
![](OEBPS/Images/6a4-i.jpg){.calibre235}
:::
图6-4 资源文件的数据结构\
可见到这里定义了很多的数据结构，下面分别介绍。
##### 6.2.1 头部信息 {.bodycontent-title3}
Resources.arsc文件格式是由一系列的chunk构成，每一个chunk均包含如下结构的ResChunk_header，用来描述这个chunk的基本信息：
::: bodypic-c
![](OEBPS/Images/085-i.jpg){.calibre236}
:::
参数说明：
·type：当前chunk的类型。
·headerSize：当前chunk的头部大小。
·size：当前chunk的大小。
##### 6.2.2 资源索引表的头部信息 {.bodycontent-title3}
Resources.arsc文件的第一个结构是资源索引表头部，其结构描述了Resources.arsc文件的大小和资源包数量：
::: bodypic-c
![](OEBPS/Images/085-2-i.jpg){.calibre22}
:::
::: bodypic-c
![](OEBPS/Images/086-i.jpg){.calibre237}
:::
参数说明：
·header：就是标准的Chunk头部信息格式。
·packageCount：被编译的资源包的个数。
##### 6.2.3 资源项的值字符串资源池 {.bodycontent-title3}
紧跟着资源索引表头部的是资源项的值字符串资源池，这个字符串资源池包含了所有在资源包里面定义的资源项的值字符串，字符串资源池头部的结构如下：
::: bodypic-c
![](OEBPS/Images/086-2-i.jpg){.calibre238}
:::
参数说明：
·header：标准的Chunk头部信息结构。
·stringCount：字符串的个数。
·styleCount：字符串样式的个数。
·flags：字符串的属性，可取值包括0x000（UTF-16）、0x001（字符串经过排序）、0X100（UTF-8）和它们的组合值。
·stringStart：字符串内容块相对于其头部的距离。
·stylesStart：字符串样式块相对于其头部的距离。
紧接着头部的是两个偏移数组，分别是字符串偏移数组和字符串样式偏移数组。这两个偏移数组的大小分别等于stringCount和styleCount的值，而每一个元素的类型都是无符号整型。整个字符中资源池结构如图6-5所示。
::: bodypic-c
![](OEBPS/Images/6a5-i.jpg){.calibre239}
:::
图6-5 字符串资源池结构\
字符串资源池中的前两个字节为字符串长度，长度计算方法如下代码：
::: bodypic-c
![](OEBPS/Images/087-i.jpg){.calibre240}
:::
如果字符串编码格式为UTF-8则字符串以0X00作为结束符，UTF-16则以0X0000作为结束符。
字符串与字符串样式有一一对应的关系，也就是说，如果第n个字符串有样式，则它的样式描述位于样式块的第n个元素。字符串样式的结构包括如下两个结构体：ResStringPool_ref和ResStringPool_span。一个字符串可以对应多个ResStringPool_span和一个ResStringPool_ref。ResStringPool_span在前描述字符串的样式，ResStringPool_ref在后固定值为0XFFFFFFFF作为占位符。样式块最后会以两个值为0XFFFFFFFF的ResStringPool_ref作为结束。
::: bodypic-c
![](OEBPS/Images/087-2-i.jpg){.calibre241}
:::
##### 6.2.4 Package数据块 {.bodycontent-title3}
接着资源项的值字符串资源池后面的部分就是Package数据块，这个数据块记录编译包的元数据，头部结构如下：
::: bodypic-c
![](OEBPS/Images/087-3-i.jpg){.calibre242}
:::
::: bodypic-c
![](OEBPS/Images/088-i.jpg){.calibre243}
:::
参数说明：
·header：Chunk的头部信息数据结构。
·id：包的id，等于Package Id，一般用户包的值Package
Id为0X7F，系统资源包的Package Id为0X01。这个值很重要的。
·name：包名。
·typeString：类型字符串资源池相对头部的偏移。
·lastPublicType：最后一个导出的Public类型字符串在类型字符串资源池中的索引，目前这个值设置为类型字符串资源池的元素个数。在解析的过程中没发现它的用途。
·keyStrings：资源项名称字符串相对头部的偏移。
·lastPublicKey：最后一个导出的Public资源项名称字符串在资源项名称字符串资源池中的索引，目前这个值设置为资源项名称字符串资源池的元素个数。在解析的过程中没发现它的用途。
Package数据块的整体结构参见图6-6。
::: bodypic-c
![](OEBPS/Images/6a6-i.jpg){.calibre244}
:::
图6-6 Package数据块结构\
其中Type String Pool和Key String
Pool是两个字符串资源池，结构和资源项的值字符串资源池结构相同，分别对应类型字符串资源池和资源项名称字符串资源池。
再接下来的结构体可能是类型规范数据块或者类型资源项数据块，可以通过它们的Type来识别，类型规范数据块的Type为RES_TABLE_TYPE_SPEC_TYPE，类型资源项数据块的Type为RES_TABLE_TYPE_TYPE。
##### 6.2.5 类型规范数据块 {.bodycontent-title3}
类型规范数据块用来描述资源项的配置差异性。通过这个差异性描述，就可以知道每一个资源项的配置状况。知道了一个资源项的配置状况之后，Android资源管理框架在检测到设备的配置信息发生变化之后，就可以知道是否需要重新加载该资源项。类型规范数据块是按照类型来组织的，也就是说，每一种类型都对应有一个类型规范数据块。其数据块头部结构如下：
::: bodypic-c
![](OEBPS/Images/089-i.jpg){.calibre245}
:::
参数说明：
·header：Chunk的头部信息结构。
·id：标识资源的Type ID。Type
ID是指资源的类型ID。资源的类型有animator、anim、color、drawable、layout、menu、raw、string和xml等若干种，每一种都会被赋予一个ID。
·res0：保留，始终为0。
·res1：保留，始终为0。
·entryCount：等于本类型的资源项个数，指名称相同的资源项的个数。
ResTable_typeSpec后面紧跟着的是一个大小为entryCount的uint32_t数组，每一个数组元素都用于描述一个资源项的配置差异性。
##### 6.2.6 资源类型项数据块 {.bodycontent-title3}
资源类型项数据块用来描述资源项的具体信息，这样就可以知道每一个资源项的名称、值和配置等信息。资源类型项数据同样是按照类型和配置来组织的，也就是说，一个具有n个配置的类型一共对应有n个类型资源项数据块，其数据块头部结构如下：
::: bodypic-c
![](OEBPS/Images/089-2-i.jpg){.calibre246}
:::
::: bodypic-c