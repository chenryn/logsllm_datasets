### 资源与性能比较
- **资源消耗**：部分技术栈的资源消耗较高，导致整体性能表现一般。
- **开发效率**：某些技术栈的开发效率较低。
- **语言栈匹配**：存在一定的语言栈不匹配问题。

#### 技术语言栈
- 部分技术栈在性能上表现较差，同时开发效率也相对较低。

#### 容器化场景支持
- 部分技术栈不支持容器化场景，或仅支持容器标准输出。

#### 完整日志解决方案
- 当前所有技术栈均未提供完整的日志解决方案。

### 新的征程
#### 开源Loggie的现在和未来
- **自研新版Agent**：基于Golang开发的轻量级、高性能、云原生日志采集和聚合工具，支持多Pipeline和组件热插拔。

#### 核心概念
- **Source**：输入源，一个Pipeline可以配置多个不同的输入源。
- **Sink**：输出源，一个Pipeline只能配置一种类型的输出源，但可以有多个并行实例。
- **Interceptor**：拦截器，数据流通过链式处理方式经过多个拦截器。
- **Queue**：队列，目前仅支持内存队列。
- **Pipeline**：由sources、interceptors、queue和sink组成的管道，不同Pipeline间的数据相互隔离。
- **Discovery**：配置下发功能，目前支持Kubernetes。
- **Monitor EventBus**：各组件监控数据的暴露或发送。
- **Reloader**：支持配置的动态更新。

#### 特性
- **一站式日志解决方案**：提供包括日志中转、过滤、解析、切分和报警在内的完整功能。
- **云原生日志形态**：支持快速便捷的容器日志采集，并原生支持Kubernetes动态配置下发。
- **生产级特性**：基于长期大规模运维经验，具备全方位可观测性、快速排障、异常预警及自动化运维能力。
- **资源与性能**：基于Golang开发，占用资源较少，吞吐性能优异，且具有较高的开发效率。

### 日志处理
- **中转、聚合、解析、处理**：利用各类Interceptor进行日志处理，如SQL、Function等。
- **日志报警**：通过logAlert Interceptor实现，无需依赖第三方工具如ElastAlert或Flink。
- **快速研发**：采用微内核、插件化设计，便于快速开发新的sink/source/interceptor/discovery组件。
- **更多扩展**：支持K8s Event采集、定时冷备等功能，组件复用提高了效率和可扩展性。

### 云原生日志形态
- **基于CRD的使用方式**：只需创建或更新CRD实例即可完成日志采集、中转、聚合等操作。
- **Kubernetes下多架构支持**：支持多种部署形态（如Agent、Aggregator）及多架构（直接发送、中转处理、多输出端）。

### 生产级特性
- **完善的监控指标**：根据长期运维需求提炼出多项关键指标，如采集进度、采集发送延迟等。
- **稳定性与运维排障**：独立Pipeline增强服务隔离性，支持多种排障运维接口，确保系统稳定运行。

### 性能对比
- **基准测试**：在同等条件下，Loggie相比Filebeat在CPU消耗上减少约75%，同时吞吐量提高1.6至2.6倍。Filebeat的极限吞吐量约为80MB/s，而Loggie在多文件采集下可达200MB/s以上。

### 开源计划
- **正式开源时间**：预计于今年12月正式开源，敬请期待。

### RoadMap & Doing
- **更多组件与功能扩展**：包括HTTP Source、File Sink、Clickhouse Sink等。
- **持久化Queue**：增加持久化队列的支持。
- **轻量级流处理能力**：引入WASM支持自定义日志解析处理。
- **Serverless形态扩缩容指标**：支持Knative/KEDA等Serverless形态下的扩缩容指标接入。
- **服务发现与配置中心**：支持Consul, Apollo等主机模式的配置下发。
- **云原生与Kubernetes**：支持自动注入Loggie sidecar形态，并兼容Opentelemetry。

### 参与贡献
欢迎社区开发者共同建设Loggie项目，为日志处理领域带来更多创新和改进。