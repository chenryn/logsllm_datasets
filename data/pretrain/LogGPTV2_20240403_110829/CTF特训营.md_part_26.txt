## Page 324
CTF特训营：技术详解、解题方法与
10.4.2Python程序逆向
324/1144
对于pylnstaller打包的程序，提取脚本（https://github.com/
Ravensss/pyinstxtractor）可以得到pyc文件，如图10-54所示。
eu>python pyinstxtractor-py A1-Gebra.exe
Processing Al-Gebra.exe
Pyinstaller version:2.1+
[]
Python version:27
]
Found 20 files in CArchive
[]
Found 197 files in PYZ archiv
action
standby
[] Successfully extracted pyinstaller archive: Al-Gebra.exe
ou can nov use a python deconpiler on the pyc files within the extracted diree
图10-54pyinstaller打包程序的提取
生成的字节码文件（.pyc文件）的前8字节通常为03f30d0a76
eddb57，如图10-55所示。
0000h:03F30D0A76EDDB576300000000000000
.6..vi0wc.
009000000L0000000000000S000:000
..............d.
0010S002090000S0000090010900:4000
.d..1..2..d..2..
图10-55pyc文件的文件头
但有时pyinstxtractor.py提取出来的字节码文件缺少最开始的8字
节，如图10-56所示，此时需要手动在文件开始处增加缺失的那8字节。
0000h:63000000000000000005000000400000c..............
VS000009001090000900001008L00:0100
.sE...d..d..l..z
0020h:00006400006401006C01005A01006400
..d..d..l..2..d.
---
## Page 325
CTF特训营：技术详解、解题方法与
10.4.2Python程序逆向
325/1144
图10-56缺少文件头的pyc文件
3.字节码文件的反编译
在得到Python字节码文件之后，还需要通过反编译得到Python源
代码。这里推荐使用反编译工具uncompyle2（https://github.com/
wibitiluncompyle2）。使用“pythonsetup.pyinstall"命令安装之后的
uncompyle2位于C:lpython27\Scripts\uncompyle2处。
通过命令“pythonC:IPython27IScriptsluncompyle2
aaa.py.pyc>aaa.py”即可得到Python源码，之后主要就是通过阅读
Python源码来分析程序的功能。
---
## Page 326
CTF特训营：技术详解、解题方法与
10.4.3Java程序逆向
326/1144
10.4.3Java程序逆向
Java程序打包成的EXE在CTF中出现的次数不多，一个常用的打
包工具为exe4j。
1.Java程序的识别
如果在没有提前安装好JDK或JRE环境的系统中运行EXE，将会
直接报错，报错信息如图10-57所示。
No JUM could be found on your systen.
Please define EXE4J_JAUA_HOME
point to an installed 32bit JDK or JRE or dounload a JRE fron ww.java.cor
图10-57没安装好JDK或JRE环境时运行的报错信息
用IDAPro直接打开EXE，查看字符串，能够看到很多带java的字
符串，如图10-58所示。
rdata:00426FA0
00000011
rdata:00427050
rdata:0042705C
00000009
0000000A
avawext
rdata:00427924
0000001
ava/lang/String
rdata:00427B44
rdata:00427974
00000013
00000017
ILjava/lang/String:)V
Djava.class.path=
rdata:00427C20 00000056
ZZLjava/lang/String:lILjava/
g/String:II)V
图10-58使用IDA识别java打包的程序
---
## Page 327
CTF特训营：技术详解、解题方法与
10.4.3Java程序逆向
327/1144
2.Jar包的提取
exe4i打包的程序在运行时，会将Jar写入系统的临时目录中，所
以可以直接从临时目录中获得Jar包。
运行exe4j打包后的程序trustme.exe，让程序停留在等待输入阶
段，进程不退出，如图10-59所示。
D:rev>trustme-exe
input:
图10-59运行trustme程序
通过工具everything搜索trustme.jar，可以直接在系统的临时目录
中找到对应的Jar包，如图10-60所示
78 KB 2016/9/16 21:34
图10-60在系统临时目录下找到trustme.jar
3.Jar包的反编译
---
## Page 328
CTF特训营：技术详解、解题方法与
10.4.3Java程序逆向
328/1144
在得到Jar包之后，就可以通过反编译工具对Jar包进行反编译操
作了。常见的反编译工具包括jad、jd-gui、Fernflower等。
---
## Page 329
CTF特训营：技术详解、解题方法与
本筒小结
329/1144
本篇小结
本篇介绍了CTF中逆向分析的主要方法，并结合实例进行了讲
解，希望读者可以亲自尝试。在实验中可能会遇到各种各样的问题
读者需要通过不断思考来逐一解决并积累经验，提高自身的技术水
平。最后希望学习逆向分析的朋友都能体会到逆向的魅力。
---
## Page 330
CTF特训营：技术详解、解题方法与
第三筒CTF之PWN330/1144
第三篇CTF之PWN
"PWN”是一个黑客语法的语词，是指攻破设备或者系统，发
音类似手“碎”。在CTF比赛中，PWN主要是指漏洞利用，也称为
exploit。PWN题型的解题过程一般是寻找程序中存在的漏洞，并利用
该漏洞达到一定的效果，如拿到shell、获取flag等。通常，该题型分
值占总分值的三分之一到五分之一不等。
PWN题型的出题思路大多源于实践，一般是将出现过或者可能
会出现漏洞的情况进行简化，形成小规模便于分析的程序，考察解题
人挖掘和利用漏洞的能力。解答PWN题型的基本能力包括：程序逆
向能力、漏洞查找能力、利用代码编写能力等。熟能生巧，做得多了
这些方面的能力便会不断地提升。
程序逆向：PWN的先导能力是逆向，对程序进行逆向操作主要
是便于分析人员看懂程序。很多情况下，PWN题型对逆向能力的要
求并没有Reverse题型那么高，有时只要分析部分代码即可。
漏洞查找：分析程序主要是为了厘清程序内部的逻辑关系，以
便于分析程序的脆弱性（即查找漏洞点）并构造出触发的条件，漏洞
---
## Page 331
CTF特训营：技术详解、解题方法与
第三筒CTF之PWN
331/1144
查找通常有一定的方法，懂得越多越有利于快速发现漏洞。
利用代码编写：利用代码主要是用来达到特定目的的功能代码
通常用脚本语言编写，掌握一定的利用代码编写的技巧对于利用成功
帮助很大。
---
## Page 332
CTF特训营：技术详解、解题方法与.
11.1基本工具
332/1144
第11章PWN基础
11.1基本工具
解答PWN题型最基本的工具可分为两类：逆向辅助类和漏洞利
用类，下面将详细介绍这两类工具
1.逆向辅助类（分析程序）
DAPro：是一款很好用的反汇编工具，本书前面第9章介绍过
其中的反编译插件能够在很多情况下将代码还原到接近源码的水平
IDA的操作较为复杂，可以参考查阅工具书《IDAPro权威指南》。
gdb：是一个功能强大的程序调试工具，是动态调试的必备利器，
在第9章中也有介绍。另外，gdb包含了一个非常好的插件peda，在
可视化和功能上都进行了拓展，方便使用者调试程序，下载地址：
https:/lgithub.com/longld/peda。不过原版的peda并不支持Python3
后来有人对peda进行了扩展，使其能够兼容Python3，下载地址：
https://github.com/zachriggle/peda。
。同类型的插件还有pwngdb
GEF（GDBEnhancedFeature），等等。近两年来用得比较多的，可
---
## Page 333
CTF特训营：技术详解、解题方法与
11.1基本工具
333/1144
以很方便地查看堆中各链表的状态，有利于分析堆的布局的工具，均
可以在GitHub上搜索到。
2.漏洞利用类（编写利用）
1）pwntools：一个CTF框架和漏洞利用开发库，由rapid设计
模块很丰富，方便使用者快速开发exploit，下载地址：https:/l
github.com/Gallopsled/pwntools
2）zio：蓝莲花队员zTrix开发，使用起来简单便利，下载地址：
https://github.com/zTrix/zio
3）Ropgadget：找寻程序中用来组装rop链的gadget，支持多种
架构，下载地址：https://github.com/JonathanSalwan/ROPgadget
4）checksec：查询程序的保护机制的开启情况（这个已经内嵌
在peda里面了）。
5）one_gadget：分析定位libc中获取shell的magic地址，在满足
特定条件的情况下，只需要一个地址即可获取shell，由david942j开发
在GitHub上可以下载到
6）seccomp-tools：分析程序中的seccomp安全机制开启的具体
---
## Page 334
CTF特训营：技术详解、解题方法与
11.1基本工具
334/1144
情况，由david942j开发，在GitHub上可以下载到。
---
## Page 335
CTF特训营：技术详解、解题方法与
11.2保护机制335/1144
11.2保护机制
程序的保护机制具体包括如下内容
1）NX:数据执行保护，即DEP（DataExecutionPrevention），
是指禁止程序在非可执行的内存区（non-executablememory）中执
行指令。在80x86体系结构中，操作系统的内存管理是通过页面表
（pagetable）存储方式来实现的，其最后一位就是Nx位，o表示允许
执行代码，1表示禁止执行代码。一般来说，NX主要是防止直接在栈
（stack）和堆（heap）上运行shellcode代码。gcc默认开启不可执行
栈功能，添加编译选项-zexecstack即可开启栈可执行功能。
2）ASLR:地址空间随机化，/proc/sys/kermel/
randomize_va_space里的值可以控制系统级的ASLR，使用root权限
可以进行修改，有三个值可以设置，具体说明如下。
0：关闭ASLR
1:mmapbase、stack、vdsopage将随机化。这意味着”.so”
文件将被加载到随机地址。链接时指定了-pie选项的可执行程序，其
代码段加载地址将被随机化。配置内核时如果指定了
---
## Page 336
CTF特训营：技术详解、解题方法与.
11.2保护机制
336/1144
CONFIG_COMPAT_BRK，则randomize_va_space默认为1，此时
heap没有随机化。
2:在1的基础上增加了heap随机化。配置内核时如果禁用
CONFIG_COMPAT_BRK，则randomize_va_space默认为2。ASLR可
以保证在每次程序加载的时候自身和所加载的库文件都会被映射到虚
拟地址空间的不同地址处。
3）PIE：代码段随机化，具体见ASLR
4）RELRO：重定位，一般会分为两种情况，即partialrelro和full
relro，具体区别就是前者重定位信息（如got表）可写，而后者不可
写。
5）STACKCANARY：栈溢出保护，gCC编译程序默认开启，添
加编译选项-fno-stack-protector会关闭程序的stackcanary栈保护
---
## Page 337
CTF特训营：技术详解、解题方法与
11.3PWN类型
337/1144
11.3PWN类型
一般来说，PWN题型中的漏洞类型主要可分为栈漏洞、堆漏
洞、格式化学符串漏洞、整型漏洞、逻辑漏洞等。可能有些漏洞类型
的归类不太严谨，这里只是为了方便叙述进行了统一。很多时候，这
些漏洞类型需要相互结合，构造出复杂条件（在CTF中，要看出题者
的构造；在实际情况中，则要看程序的具体环境）。同样这些漏洞类
型的利用也可以相互转化，以便写出更好、更快的利用脚本（需要看
解题者的思路）
就难易程度来说，通常情况下，栈漏洞、格式化字符串漏洞、整
型漏洞的难度要低于堆漏洞、逻辑漏洞。就考查点来说，栈漏洞、堆
漏洞、格式化字符串漏洞、整型漏洞偏重于基本功，逻辑漏洞则偏重
于思维能力。
---
## Page 338
CTF特训营：技术详解、解题方法与
11.4常见利用方法
338/1144
11.4常见利用方法
1.shellcode
一般是指获取shell的代码（也有功能复杂的，专门突破某些限制
的情况），针对数据区未开启可执行保护NX，可以将shellcode直接布
置在堆栈等可写可执行区域，然后劫持控制流，跳转过去即可。另外，
还可以通过其他手段（如rop）将数据区的Nx关闭（mprotect设置页
属性），或者将代码部分的页属性设置为可写，并在这里布置
shellcode，然后执行shellcode。
Linuxx86下获取shell的shellcode，如图11-1所示。Linuxx64下获
取shell的shellcode，如图11-2所示。
/*push'/bin///sh\x00'*/
push 0x68
push 0x732f2f2f
push 0x6e69622f
/*callexecve('esp'，θ,θ)*/
movebx，esp
xorecx，ecx
push 0xb
popeax
cdq/*Setedx to0,eaxisknown tobepositive */
int 0x80
---
## Page 339
CTF特训营：技术详解、解题方法与
11.4常见利用方法
339/1144
图11-1Linuxx86shellcode示例
/*push'/bin///sh'*/
push 0x68
movrax，0x732f2f2f6e69622f
push rax
/*callexecve('rsp'，0,o)*/
push0x3b
poprax
movrdi，rsp
mov rsi，θ
cdq/*rdx=0*/
syscall
图11-2Linuxx64shellcode示例
shellcode的获取途径有很多，可以直接调用pwntools里面的
shellcraft模块来生成，如图11-3所示。
from pwr
import
context(arch
1386',
"Ltnux')
asm(shellcraft.i386.sh())
\x89\xe3\x89\xd1\x99\xcd\x80
图11-3shellcode生成方法
更多的shellcode可以去网上查询
(http://shell-storm.org/
shellcode/），另外，pwntools也提供了shellcraft模块，集成了针对大
---
## Page 340
CTF特训营：技术详解、解题方法与
11.4常见利用方法
340/1144
多数平台的shellcode。
2.rop
rop（return-orientedprogramming）即返回地址导向编程，通常
是利用动态链接库和可执行文件中可利用的指令片段（gadget），这
些指令片段均以ret指令结尾，即用ret指令实现指令片段执行流的衔
接。一般针对程序开启了NX属性，但可以控制栈上数据的情况，利
用栈结构（可参考第12章中的栈结构介绍）中的返回地址，可以实
现控制流的构造。
最初的rop示意如图11-4所示（x86）。
esp
gadget1
--moveax,Ox1;..;ret
低地址
gadget2
->addeax,Ox1;......;ret
gadget3
gadget4
.....
......
......
高地址
....
......