Relocation Bonus
Attacking the Windows Loader Makes Analysts Switch Careers
1 / 67
Introduction
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
25 years old
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
25 years old
Senior Security Architect at Cylance
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
25 years old
Senior Security Architect at Cylance
Author of Game Hacking: Developing Autonomous Bots for Online Games
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
25 years old
Senior Security Architect at Cylance
Author of Game Hacking: Developing Autonomous Bots for Online Games
Pluralsight Instructor, Modern C++ Secure Coding Practices: Const Correctness
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
25 years old
Senior Security Architect at Cylance
Author of Game Hacking: Developing Autonomous Bots for Online Games
Pluralsight Instructor, Modern C++ Secure Coding Practices: Const Correctness
Relocation Bonus
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
25 years old
Senior Security Architect at Cylance
Author of Game Hacking: Developing Autonomous Bots for Online Games
Pluralsight Instructor, Modern C++ Secure Coding Practices: Const Correctness
Relocation Bonus
A look into the Windows Portable Executable (PE) header and how it can be
weaponized to destroy parsers, disassemblers, and other tools
Relocation Bonus - Introduction
2 / 67
Introduction
Nick Cano
25 years old
Senior Security Architect at Cylance
Author of Game Hacking: Developing Autonomous Bots for Online Games
Pluralsight Instructor, Modern C++ Secure Coding Practices: Const Correctness
Relocation Bonus
A look into the Windows Portable Executable (PE) header and how it can be
weaponized to destroy parsers, disassemblers, and other tools
A PE rebuilder that takes any 32bit PE then obfuscates and rebuilds it using the
attack
Relocation Bonus - Introduction
2 / 67
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
3 / 67
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
3 / 67
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
4 / 67
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
5 / 67
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
6 / 67
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
7 / 67
its broken for no
reason
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
7 / 67
its broken for no
reason
relocations corrupted
the patched code
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
7 / 67
its broken for no
reason
relocations corrupted
the patched code
don't patch code that
is relocated
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
7 / 67
its broken for no
reason
relocations corrupted
the patched code
don't patch code that
is relocated
relocations can be
weaponized to hide
my arsenal in the
bowels of the
machine
Why Attack Relocations?
Relocation Bonus - How Did I Get Here?
7 / 67
Mission Statement
Relocation Bonus - Crafting The Attack
8 / 67
Mission Statement
Relocation Bonus - Crafting The Attack
8 / 67
What Are Relocations?
Relocation Bonus - Crafting The Attack
9 / 67
What Are Relocations?
Relocations exist to enable dynamic mapping, specifically ASLR
Relocation Bonus - Crafting The Attack
9 / 67
What Are Relocations?
Relocations exist to enable dynamic mapping, specifically ASLR
Relocation Bonus - Crafting The Attack
9 / 67
What Are Relocations?
Relocations exist to enable dynamic mapping, specifically ASLR
Relocation Bonus - Crafting The Attack
10 / 67
What Are Relocations?
Relocations exist to enable dynamic mapping, specifically ASLR
Relocation Bonus - Crafting The Attack
11 / 67
What Are Relocations?
Relocations exist to enable dynamic mapping, specifically ASLR
Relocation Bonus - Crafting The Attack
12 / 67
PE Header Sidebar
Relocation Bonus - Crafting The Attack
13 / 67
PE Header Sidebar
Relocation Bonus - Crafting The Attack
13 / 67
PE Header Sidebar
Relocation Bonus - Crafting The Attack
14 / 67
PE Header Sidebar
Relocation Bonus - Crafting The Attack
15 / 67
PE Header Sidebar
Relocation Bonus - Crafting The Attack
16 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
17 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
18 / 67
VirtualAddress points to first reloc
block
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
19 / 67
VirtualAddress points to first reloc
block
Size is the size, in bytes, of all blocks
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
20 / 67
VirtualAddress points to first reloc
block
Size is the size, in bytes, of all blocks
(uint16_t)0x0000 marks the end of
each block
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
21 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
22 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
23 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
24 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
25 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
26 / 67
How Do Relocations Work?
Relocation Bonus - Crafting The Attack
27 / 67
How Do Relocations Work?
Something like this
 delta = base - desiredBase;
 (
 reloc : relocs) {
 block = (base + reloc.VirtualAddress);
 (
 entry : reloc.entries) {
 adr = block + entry.offset;
 (entry.type == IMAGE_REL_BASED_HIGHLOW) // > 16) & 0xFFFF);
 (entry.type == IMAGE_REL_BASED_LOW)
            *((
*)adr) += (
)delta;
    }
}
Relocation Bonus - Crafting The Attack
27 / 67
Controlling Relocations
Relocation Bonus - Crafting The Attack
28 / 67
Controlling Relocations
Relocations simply use a += operation on data at a specified address
Relocation Bonus - Crafting The Attack
28 / 67
Controlling Relocations
Relocations simply use a += operation on data at a specified address
The right-hand side of this operation will be delta
Relocation Bonus - Crafting The Attack
28 / 67
Controlling Relocations
Relocations simply use a += operation on data at a specified address
The right-hand side of this operation will be delta
delta is defined as base - desiredBase
Relocation Bonus - Crafting The Attack
28 / 67
Controlling Relocations
Relocations simply use a += operation on data at a specified address
The right-hand side of this operation will be delta
delta is defined as base - desiredBase
Conclusion: to abuse relocations, base must be preselected, giving a predictable
delta. This means ASLR must be tricked.
Relocation Bonus - Crafting The Attack
28 / 67
ASLR Preselection
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
0xFFFFFFFF
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
0xFFFFFFFF: PE fails to load; invalid header
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
0xFFFFFFFF: PE fails to load; invalid header
0x00000000
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
0xFFFFFFFF: PE fails to load; invalid header
0x00000000: PE fails to load; invalid header
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
0xFFFFFFFF: PE fails to load; invalid header
0x00000000: PE fails to load; invalid header
0xFFFF0000
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
0xFFFFFFFF: PE fails to load; invalid header
0x00000000: PE fails to load; invalid header
0xFFFF0000: PE loads at base 0x00010000
Relocation Bonus - Crafting The Attack
29 / 67
ASLR Preselection
desiredBase is the only means of controlling ASLR
delta is dependant on desiredBase
Conclusion: because of how delta is derived, desiredBase must be made to force
ASLR mapping at a predetermined address which isn't desiredBase itself.
Knowing this, I tried desiredBase as:
0xFFFFFFFF: PE fails to load; invalid header
0x00000000: PE fails to load; invalid header
0xFFFF0000: PE loads at base 0x00010000
As I later learned, Corkami had already figured all of this out: https://github.com/corkami/pocs/
Relocation Bonus - Crafting The Attack
29 / 67
PE Loader Breakdown
Relocation Bonus - Crafting The Attack
30 / 67
PE Loader Breakdown
Relocation Bonus - Crafting The Attack
30 / 67
PE Loader Breakdown
Relocation Bonus - Crafting The Attack
31 / 67
PE Loader Breakdown
Relocation Bonus - Crafting The Attack
32 / 67
Targets For Relocation Obfuscation
Relocation Bonus - Crafting The Attack
33 / 67
Targets For Relocation Obfuscation
Import Table is loaded post-reloc
Relocation Bonus - Crafting The Attack
33 / 67
Targets For Relocation Obfuscation
Import Table is loaded post-reloc
Many sections are mapped pre-reloc, but not used until execution which is post-reloc
Relocation Bonus - Crafting The Attack
33 / 67
Targets For Relocation Obfuscation
Import Table is loaded post-reloc
Many sections are mapped pre-reloc, but not used until execution which is post-reloc
entryPoint isn't used until execution, post-reloc; the memory will be read-only,
however, unless DEP is off
Relocation Bonus - Crafting The Attack
33 / 67
Targets For Relocation Obfuscation
Import Table is loaded post-reloc
Many sections are mapped pre-reloc, but not used until execution which is post-reloc
entryPoint isn't used until execution, post-reloc; the memory will be read-only,
however, unless DEP is off
Conclusion: can mangle imports, code and resource sections, and optionally the
entryPoint if DEP is off on the target machine.
Relocation Bonus - Crafting The Attack
33 / 67
Targets For Relocation Obfuscation
Relocation Bonus - Crafting The Attack
34 / 67
Targets For Relocation Obfuscation
Relocation Bonus - Crafting The Attack
34 / 67
Targets For Relocation Obfuscation
Relocation Bonus - Crafting The Attack
35 / 67
The Final Attack
Relocation Bonus - Crafting The Attack
36 / 67
The Final Attack
Due to the nature of the attack, it works best as a tool which rebuilds regular PE files.
Relocation Bonus - Crafting The Attack
36 / 67
The Final Attack
Due to the nature of the attack, it works best as a tool which rebuilds regular PE files.
Load target PE file
Relocation Bonus - Crafting The Attack
36 / 67
The Final Attack
Due to the nature of the attack, it works best as a tool which rebuilds regular PE files.
Load target PE file
Apply original relocations for base of 0x00010000
Relocation Bonus - Crafting The Attack
36 / 67
The Final Attack
Due to the nature of the attack, it works best as a tool which rebuilds regular PE files.
Load target PE file
Apply original relocations for base of 0x00010000
Turn ASLR off by flipping a bit in the PE Header
Relocation Bonus - Crafting The Attack
36 / 67
The Final Attack
Due to the nature of the attack, it works best as a tool which rebuilds regular PE files.
Load target PE file
Apply original relocations for base of 0x00010000
Turn ASLR off by flipping a bit in the PE Header
Set desiredBase to 0xFFFF0000
Relocation Bonus - Crafting The Attack
36 / 67
The Final Attack
Due to the nature of the attack, it works best as a tool which rebuilds regular PE files.
Load target PE file
Apply original relocations for base of 0x00010000
Turn ASLR off by flipping a bit in the PE Header
Set desiredBase to 0xFFFF0000
Loop over data to obfuscate in uint32_t-sized chunks, decrementing each by
0x00010000 - 0xFFFF0000 (expected value of delta)
Relocation Bonus - Crafting The Attack
36 / 67
The Final Attack
Due to the nature of the attack, it works best as a tool which rebuilds regular PE files.
Load target PE file
Apply original relocations for base of 0x00010000
Turn ASLR off by flipping a bit in the PE Header
Set desiredBase to 0xFFFF0000
Loop over data to obfuscate in uint32_t-sized chunks, decrementing each by