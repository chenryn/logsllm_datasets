title:DroidForensics: Accurate Reconstruction of Android Attacks via Multi-layer
Forensic Logging
author:Xingzi Yuan and
Omid Setayeshfar and
Hongfei Yan and
Pranav Panage and
Xuetao Wei and
Kyu Hyung Lee
DroidForensics: Accurate Reconstruction of Android
Attacks via Multi-layer Forensic Logging
Xingzi Yuan† Omid Setayeshfar† Hongfei Yan† Pranav Panage† Xuetao Wei‡ Kyu Hyung Lee†
†University of Georgia, Athens, GA, USA
‡University of Cincinnati, Cincinnati, OH, USA
{x.yuan, omid.s, hfyan, pranav.panag, kyuhlee}@uga.edu, PI:EMAIL
ABSTRACT
The goal of cyber attack investigation is to fully reconstruct
the details of an attack, so we can trace back to its origin,
and recover the system from the damage caused by the at-
tack. However, it is often diﬃcult and requires tremendous
manual eﬀorts because attack events occurred days or even
weeks before the investigation and detailed information we
need is not available anymore. Consequently, forensic log-
ging is signiﬁcantly important for cyber attack investigation.
In this paper, we present DroidForensics, a multi-layer
forensic logging technique for Android. Our goal is to pro-
vide the user with detailed information about attack behav-
iors that can enable accurate post-mortem investigation of
Android attacks. DroidForensics consists of three logging
modules. API logger captures Android API calls that con-
tain high-level semantics of an application. Binder logger
records interactions between applications to identify causal
relations between processes, and system call logger eﬃciently
monitors low-level system events. We also provide the user
interface that the user can compose SQL-like queries to in-
spect an attack. Our experiments show that DroidForensics
has low runtime overhead (2.9% on average) and low space
overhead (105 ∼ 169 MByte during 24 hours) on real An-
droid devices.
It is eﬀective in the reconstruction of real-
world Android attacks we have studied.
1.
INTRODUCTION
Android devices are becoming increasingly popular but
at the same time, also constantly attract cyber criminals.
For example, a recent “stagefright” attack [28] exploits a
vulnerability in Android core component, which potentially
infects 950 million Android devices.
Consequently, there is an increasing need of detecting and
investigating Android attacks. Forensic logs are critical to
the cyber attack investigation. For example, when a user de-
tects a symptom of an attack, we can analyze forensic logs
to reconstruct the attack path from the symptom to the
“entry point” of the attack. It is also important to under-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3052984
1
stand the damage have been conducted by the attack. For
instance, understanding what system objects are compro-
mised or what data was exﬁltrated is important to resolve
the damage.
Forensic logging captures behaviors of the system execu-
tion and their relations. For instance, audit logging tech-
niques [11] are widely used for cyber attack forensics. They
records system properties such as users, processes, ﬁles or
network sockets and their relations such as a process re-
ceives data from network socket, a user log-in to the system
or a system ﬁle is replaced by a process. It can be used for
backward and forward tracking [43, 45] to locate the ori-
gin of an attack and to identify the damage to the system.
Recent work [45, 49, 29] show that forensic logging is an
eﬀective technique for cyber attack forensics in desktop or
server environments.
However, unlike traditional desktop or server applications,
most Android applications run within the virtual machine
called Android Run-time (ART) to provide isolated execu-
tion environment for each process. There are two major
hindrances to use traditional system call logging in Android.
First, system calls might be too low-level to capture the rich
semantics of application behaviors. Second, Android has
unique inter-process communication (IPC) protocol, called
binder and it is diﬃcult to accurately capture IPC from the
system calls. For example, if the Android application steals
a contact list from the device and sends it to SMS mes-
sage, system calls cannot capture the critical behaviors such
as reading contact information and sending SMS message
to the attacker’s number. Because the Android application
cannot directly access contact or SMS, but it uses binder
call to interact with Android service providers such as Con-
tentProvider or SMSManager to access contact or SMS.
Recently, CopperDroid [63] and DroidScope [66] have pro-
posed techniques to analyze the behaviors of Android mal-
ware. CopperDroid developed system-call based analysis
techniques for Android attack reconstruction. DroidScope [66]
is the Android malware analysis engine that provides uniﬁed
view of hardware, kernel and Dalvik virtual machine infor-
mation. However both are built on top of emulated environ-
ments (e.g., QEMU [22]) and it generally incurs nontrivial
runtime and space overhead for resource-constrained mobile
devices.
In this paper, we develop a multi-layer forensic logging
technique for Android, called DroidForensics. DroidForensics
captures important Android events from three layers; An-
droid API, Binder and system calls. Our API logger can
capture high-level semantics of application, Binder logger ac-
666curately captures interactions between applications, and sys-
tem call logger records low-level events such as system calls.
In addition, DroidForensics provides easy-to-use, SQL-like
user interface that the user can compose queries to inspect
an attack. DroidForensics generates a causal graph to an-
swer the query and the user can iteratively reﬁne queries
based on the previous graph. We do not require an emu-
lated environment and DroidForensics is designed for real
devices. In summary, this paper makes the following contri-
butions:
• We design and implement a multi-layer forensic log-
ging system for Android. Our system consists of three
modules to capture diﬀerent levels of information from
high-level application semantics to low-level system
events. We also accurately capture inter process com-
munication via Android’s binder protocol.
• We develop a light-weight system call logging tech-
nique for Android. Existing Android audit system [4]
causes up to 46% overhead in Nexus 6 that would be
too expensive to be active during normal execution.
Our runtime overhead on Nexus 6 is only less than
4.05%. We can also reduce the space consumption sub-
stantially.
• We develop an easy-to-use user interface to aid the
attack investigation. The attack reconstruction is car-
ried out by writing SQL-like queries. Our pre-process
automatically converts the user query to SQL-queries,
and the post-processor generates causal graphs.
• We evaluate the eﬃciency, eﬀectiveness and compat-
ibility of DroidForensics. The results conducted on
widely used Android benchmarks show that our run-
time overhead is only about 2.9% on average and 6.16%
in the worst case. We present that 31 android mal-
wares are eﬀectively resolved by querying various levels
of information. The compatibility results produced by
Android Compatibility Suite (CTS) show that Droid-
Forensics maintains the same compatibility-level com-
paring with original Android.
The rest of this paper is organized as follows. Section 2
introduces the overview of DroidForensics and motivating
example using Android malware called AVPass. Section 3
discusses our design and implementation details.
In Sec-
tion 4, we evaluate DroidForensics for eﬃciency, eﬀectiveness
and compatibility. We discuss limitations of DroidForensics
and our future plans in Section 5. Section 6 presents related
works and we conclude the paper in Section 7.
2. SYSTEM OVERVIEW AND MOTIVATING
EXAMPLE
In this section, we present an overview of DroidForensics
and we use a real-world Android malware, AVPass [14], to
motivate our work.
A high-level overview of DroidForensics is depicted in Fig-
It has three logging modules, namely API logger,
ure 1.
Binder logger and System call logger. API logger captures
important Android APIs such as accessing database, con-
trolling sensitive devices (e.g.,a camera, GPS or microphone).
Binder logger monitors interactions between processes via
IPC or RPC, record their information such as process id for
the caller (or the client) and the callee (or the server), and
a message shared between them. Finally system call log-
ger records forensic-related system calls such as calls that
2
Figure 1: High level overview of DroidForensics
aﬀect other processes (e.g., fork, kill) or other system ob-
ject (e.g., read, write, recv, send). To record a global order
of these events from diﬀerent layers, API and Binder log-
gers forward their events to system call logger and system
call logger stores them with global timestamps. The dot-
ted line in Figure 1 shows the ﬂow of collected forensic logs.
DroidForensics periodically transfers those forensic data to
an external server through wiﬁ and three layers of logs are
encoded uniformly into a relational database. Finally the
user can compose SQL-like queries to investigate an attack.
DroidForensics converts the user query to SQL-queries and
also generates a causal graph using the output from foren-
sicDB. The user can observe malicious behaviors from dif-
ferent layers in a uniﬁed causal graph, and reﬁne queries for
the further investigation.
Attack Description: Suppose John carries an Android
smart phone, and falls victim to a social engineering malware
download attack by clicking on a link in an advertisement
page. The malware, AVPass [14], silently installed in John’s
device. The malware deletes an icon and a widget preview to
hide from the user, then steals sensitive information such as
contacts, SMS messages from the victim device. Finally, the
malware stores sensitive data into the local SQLite database
for exﬁltration.
Forensic Analysis: John accidentally detects that a sus-
picious process, com.lge.clock with pid 3052, is running in
the background. He wants to identify what this process has
done in his device. However, the malware’s activities hap-
pened a while ago, and the inspection of the malware process
or the device states does not provide a clear evidence of the
attack. He then tries to reconstruct the process behavior
using our technique. DroidForensics successfully captured
the behaviors of the malware in three layers, Android API,
binder, and system calls. John composes the ﬁrst query to
ﬁnd out the events invoked by the process 3052:
$ SELECT * FROM SYSCALL,BINDER,API WHERE pid=3052;
DroidForensics’s pre-processor converts the user-query into
SQL queries. John’s ﬁrst query is converted to SQL union
query to retrieve the output from multiple sources. Our
post-processor generates a causal graph from the output of
the query. The blue dotted box in Figure 2 shows an (simpli-
ﬁed) output from John’s ﬁrst query. The graph shows that
the suspicious process read four ﬁles through system calls,
namely com.lge.clock.xml, config.txt, res.db-journal
and res.db. From the read events to res.db-journal and
res.db, John understands that process 3052 accesses a local
Android ApplicationAndroid API / Java APIKernelSystem LibrariesAPI LoggerSystem call LoggerForensicDBUserQueryCausal GraphAndroid DeviceSystem Serviceslibbinder.soBinder Logger667Figure 2: Generated causal graph from the user queries.
database, but he wants more speciﬁc information such as an
exact query that 3052 used. Fortunately, DroidForensics’s
API logger captures SQLite API invoked by process 3052
and shows the query as well as the target database in the
graph. There were multiple SQLite queries from the mali-
cious process (bottom right corner in Figure 2). It creates
table, updates table state, and inserts data into various ta-
bles.
The graph also shows multiple binder transactions to three
diﬀerent servers, pid 2515, 2179 and 1913. Now John wants
to further understand what have happened in those servers.
Each binder event has a start time (STime) and an end time
(ETime) of each binder transaction. They show the time
stamps when the binder sends a request to the server pro-
cess and receives a reply. For example, process 3052 invoked
the binder call to the server 2151, and the binder driver sends
this request to process 2151 at 2016-09-08 17:51:06.21, and
the binder driver received the replay from 2151 at 2016-09-
08 17:51:06:21. We assume that all server behaviors between
two time stamps are causally related to the client. We dis-
cuss details of binder events in the section 3.2. John com-
poses following three queries to further investigate behaviors
from the server processes: $ SELECT * FROM SYSCALL,BINDER,API
WHERE pid=1913 and STime >=
‘2016-09-08 18:04:51.76’ and ETime =
‘2016-09-08 17:53:07.13’ and ETime =
‘2016-09-08 17:51:06.21’ and ETime =  `2016-09-08 17:51:06.21' and ETime = \\ `2016-09-08 17:53:07.13' and ETime = \\ `2016-09-08 18:04:51.76' and ETime <= `2016-09-08 18:07:56:45';668part of Android, there are important diﬀerences in applica-
tion execution models.