unknown bugs, which can be exploited by adversaries to
compromise one ICE and then target at compromising other
ICEs. Therefore, a malicious Rich OS or compromised ICE
may launch the following attacks:
•
•
•
•
Faking an ICE to deceive a user. When the Rich
OS is requested to switch to an ICE, it may fake
an ICE and deceive the user to leak sensitive data
such as password. A mechanism should be provided
to authenticate an ICE.
Tampering the static image of secure code. The Rich
OS may tamper with the code image saved on the
non-volatile storage. Thus, the code image should be
veriﬁed before being loaded into memory.
Tampering the secure code and data in the memory.
Since TrustICE runs ICEs in the normal domain, the
Rich OS has the same level of privilege as the ICEs
to access their memory. We must protect the secure
code from being accessed by the Rich OS.
Preventing the system from switching into the secure
domain. Attackers can launch denial-of-service (DoS)
attacks to prevent the system from switching to the
secure domain and preparing ICEs.
We assume that the attacker cannot access physical mobile
devices or launch local physical attacks, such as removing the
Micro SD card.
IV. TRUSTICE SYSTEM DESIGN
Figure 2 shows the TrustICE architecture. The Rich OS is
still installed and executed in the normal domain. In the secure
domain, besides the OEM software, a small trusted domain
controller (TDC) is responsible for loading secure code in one
ICE, enforcing secure isolation of the secure code from the
Rich OS, and achieving a secure switching between an ICE
and the Rich OS. Since both the Rich OS and ICEs are running
in the normal domain, a secure isolation must be enforced by
TDC.
(cid:11)(cid:26)(cid:28)(cid:24)(cid:17)(cid:23)(cid:1)(cid:7)(cid:26)(cid:24)(cid:17)(cid:22)(cid:25)
(cid:14)(cid:21)(cid:19)(cid:31)(cid:28)(cid:21)(cid:1)(cid:7)(cid:26)(cid:24)(cid:17)(cid:22)(cid:25)
(cid:4)(cid:27)(cid:27)
(cid:4)(cid:27)(cid:27)
(cid:4)(cid:27)(cid:27)
(cid:3)(cid:7)(cid:5)(cid:6)(cid:1)(cid:2)(cid:4)
(cid:7)(cid:11)(cid:9)(cid:15)(cid:14)(cid:11)(cid:1)(cid:5)(cid:13)(cid:10)(cid:11)(cid:3)
(cid:4)(cid:2)(cid:3)(cid:1)
(cid:7)(cid:11)(cid:9)(cid:15)(cid:14)(cid:11)(cid:1)(cid:5)(cid:13)(cid:10)(cid:11)(cid:4)
(cid:9)(cid:6)(cid:8)(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:7)(cid:11)(cid:9)(cid:15)(cid:14)(cid:11)(cid:1)(cid:5)(cid:13)(cid:10)(cid:11)(cid:12)
(cid:4)(cid:2)(cid:3)(cid:5)
(cid:12)(cid:8)(cid:10)(cid:1)
(cid:6)(cid:26)(cid:20)(cid:21)
(cid:8)(cid:6)(cid:5)
(cid:14)(cid:21)(cid:19)(cid:31)(cid:28)(cid:21)(cid:1)(cid:10)(cid:26)(cid:25)(cid:22)(cid:30)(cid:26)(cid:28) (cid:14)(cid:21)(cid:19)(cid:31)(cid:28)(cid:21)(cid:1)(cid:5)(cid:26)(cid:26)(cid:30)
(cid:15)(cid:28)(cid:31)(cid:29)(cid:30)(cid:16)(cid:26)(cid:25)(cid:21)(cid:2)(cid:21)(cid:25)(cid:17)(cid:18)(cid:23)(cid:21)(cid:20)(cid:1)(cid:4)(cid:13)(cid:10)(cid:1)(cid:27)(cid:28)(cid:26)(cid:19)(cid:21)(cid:29)(cid:29)(cid:26)(cid:28)
Fig. 2: TrustICE Architecture
Multiple ICEs can be dynamically created in the normal
domain to protect the execution of different secure code. We
call the code constructing an ICE as ICE code or ICE in short,
and we call the application code to be executed in one ICE as
secure code. Secure code can vary from simple self-contained
cryptographic operations to complex applications that rely on
system libraries and device drivers, etc. Accordingly, the ICE
code will vary from a simple memory controller to a thin OS.
369369
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
S1: Power 
off
S2: Secure 
boot 
S3: TDC 
S5: ICE
S4: Rich 
OS
Fig. 3: TrustICE State Machine
A. System State Machine
Figure 3 shows the system state machine of TrustICE.
TrustICE has ﬁve system states: system power off (S1), secure
boot (S2), TDC (S3), the Rich OS (S4), and ICE (S5). At the
beginning, system is powered off (S1). When the system is
powered on, it ﬁrst enters the secure domain. Then the system
enters into secure boot (S2). A secure bootloader is loaded
into the secure domain by the Boot ROM code. The secure
bootloader uses TrustZone to set a secure memory region that
only allows access from the secure domain and load the TDC
image into it. Then, the system enters into TDC (S3), which
loads the Rich OS’s bootloader to boot up the Rich OS. After
the Rich OS boots successfully, the system enters into the Rich
OS (S4).
When secure code needs to be executed,
it makes an
SMC system call to switch the system to TDC (S3), which
suspends the Rich OS, saves the context information, and
disables interrupts and DMA. All these operations can be
conducted by conﬁguring processor registers in the secure
domain. After verifying the integrity of the secure code and
the ICE code, TDC loads them into a secure memory region,
which is protected by the Watermark mechanism. Next, TDC
switches the system back to the normal domain to execute the
secure code in the ICE (S5). When the secure code ends, the
system switches back to TDC, which then resumes the Rich
OS. As we can see, the entire switching process is controlled
by TDC in the secure domain. Moreover, whenever the system
is shutdown, it returns to state S1.
B. Secure Isolation
By running TDC in the secure domain, we can utilize
TrustZone hardware security support to isolate TDC from the
Rich OS and ICEs. On the other hand, since both the Rich OS
and ICEs are running in the normal domain, we must ensure a
secure isolation that can protect one ICE from being accessed
by the Rich OS or other ICEs.
CPU Isolation. When one ICE is running, the Rich OS
and other ICEs are all being suspended by TDC. Before the
ICE is executed, TDC will save all CPU state information in a
secure memory storage. After the ICE accomplishes its mission
and switches back to TDC, TDC cleans up the footprint,
recovers the CPU state information, and resumes the Rich OS.
370370
Therefore, the Rich OS cannot obtain any sensitive CPU states
from ICE.
Memory Isolation. When the system exits one ICE, TDC
protects both the secure code and the ICE code in a secure
memory storage using the memory Watermark mechanism.
Therefore, when the Rich OS resumes to run, it cannot access
the code and data in the secure memory storage. Since secure
code runs in the normal domain, TDC must move the secure
code to the normal memory storage before the code can
run. When secure code is running, the Rich OS still cannot
access its memory since it has been suspended by TDC. We
will describe the details of using the memory Watermark
mechanism to protect the secure code and the ICE’s memory
in Section V.
I/O Device Isolation. In the secure domain, we can simply
block all external interrupts from arriving at TDC. Thus, we
can protect TDC from being interrupted by external interrupts
issued by malicious devices. To protect ICE from being
intercepted by a malicious external interrupt, TDC disables all
the hardware interrupts before going to ICE. However, since
one ICE may need some interrupts enabled to interact with I/O
devices, we develop a ﬁne-grained interrupt control method by
enabling a minimal set of required interrupts and disabling all
the other interrupts before switching to ICE.
C. Trusted Path
A trusted path should be guaranteed in both system booting
and system switching. A secure boot performs cryptographic
checks at each stage of the secure domain’s booting process.
The trusted code in the Boot ROM ﬁrst veriﬁes the signature
of the secure bootloader image using an RSA public key
stored in one electrically programmable Fuse (eFUSE). Since
the eFUSE and the RSA code in the Boot ROM cannot be
tampered, adversaries cannot manipulate the secure bootloader
image without being detected. Thus, a trusted secure boot-
loader can continue to secure the loading of TDC, which is
consequently responsible for ensuring the secure load of the
ICEs.
When the system switches from the Rich OS to one ICE,
a compromised Rich OS may fake an interface of the ICE
to deceive users to leak sensitive information. In this attack,
the trusted TDC is totally bypassed. To protect against this
attack, we need to make sure that TDC must be involved in
the switching process. One potential solution is to present users
an exclusive comprehensible signal that can only be controlled
by TDC. For instance, an LED light solely controlled by TDC
can be used as a trusted display signal to illustrate that one
ICE is running in the system.
V.
IMPLEMENTATION
We implement a TrustICE prototype using Freescale’s
i.MX53 quick start board (QSB). i.MX53 QSB comes with
an ARM Cortex-A8 1 GHz application processor with 1 GB
DDR3 memory and a 4GB Micro SD card. It has a 64 KB Boot
ROM, which supports SHA-256 and 2048-bit RSA operations.
The touchscreen we use is MCIMX28LCD, a 4.3” 800x480
(WVGA) display with 4-wire resistive touchscreen. The board
is equipped with a HUAWEI MC323 CDMA wireless mod-
ule [21] as the cellular communication component.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
A. Memory Map
Running area
Boot ROM (64KB)
Other Devices
Watermark region
Boot ROM (64KB)
Other Devices
ϬǆϬϬϬϬϬϬϬϬ
ϬǆϳϬϬϬϬϬϬϬ
Rich OS
Rich OS
Ϭǆϴ&&&&&&&
ϬǆϬϬϬϬϬϬϬ
Ϭǆ&&&&&&&
Ϭǆ&&&&&&&&
Rich OS
ICE
TDC (64KB)
Other Devices
(a) Rich OS is running
Rich OS
ICE
TDC (64KB)
Other Devices
(b) ICE is running
Fig. 4: Memory Map with One ICE
Freescale i.MX53 QSB provides 1GB RAM memory with
two external DDR memories: one ranges from 0x70000000
to 0x8FFFFFFF and the other
from 0xB0000000 to
0xCFFFFFFF. As described in Section II-B, watermark mem-
ory is the memory that can only be accessed by the secure
domain, so the Rich OS cannot access the watermark memory
from the normal domain. The TDC is always protected in
the watermark memory. Since the system only deﬁnes one
watermark memory area on each memory, we design different
memory mapping schemes to support different number of ICEs
in the system with one watermark.
Figure 4 shows the TrustICE memory map when only one
ICE is required in the system. We save the highest 64KB RAM
memory from 0xCFFF0000 to 0xCFFFFFFF for TDC. The
adjacent memory area is reserved for the ICE. The size of the
ICE depends on the complexity of the secure code plus its
required system libraries and functions in the ICE, which can
be either pre-loaded into memory when the system boots up or
dynamically loaded into memory when the secure code needs
to run. The remaining RAM memory is allocated to the Rich
OS. When the Rich OS is running, TDC extends the watermark
region to include the ICE memory, so that the Rich OS cannot
access the ICE. When the ICE needs to run in the normal
world, TDC dynamically changes the watermark conﬁguration
to exclude the ICE memory from the watermark region. Note
that the Rich OS has been suspended at this time.
When two ICEs are required in the system, the memory
map is depicted in Figure 5. The challenge is to protect three
memory areas, namely, the TDC and two ICEs, using only
one watermark memory region. In particular, the TDC should
be always protected in the watermark memory. We solve
this problem by putting the TDC between two ICEs within
one continuous memory space and dynamically changing the
conﬁgurable watermark region. When the Rich OS is running,
the TDC and two ICEs are all covered by the watermark. When
one ICE is running, the TDC and the other ICE are protected
by a new watermark region.
When more than two ICEs are required, we cannot cover
all the other ICEs and the TDC while one ICE is running
Running area
Watermark region
Rich OS
Rich OS
Rich OS
ICE 1
ICE 1
ICE 1
TDC (64KB)
TDC (64KB)
TDC (64KB)
ICE 2
ICE 2
ICE 2
(a) ICE 1 is running (b) Rich OS is running (c) ICE 2 is running
Fig. 5: Memory Map with Two ICEs
using one watermark region, since there is only one watermark
region and it must be continuous in the memory. To solve
this problem, we designate all ICEs and the TDC in one
continuous memory that can be protected by the watermark
region, as shown in Figure 6(a); however, whenever an ICE is
requested to run secure code, the TDC copies the active ICE to
a reserved memory region called ICE Runtime Environment to
run the secure code, as shown in Figure 6(b). Therefore, even
if the Rich OS or one ICE is malicious, the other ICEs are
still protected. All the codes of the ICEs are pre-loaded one
by one into the adjacent area of the TDC. The ICE Runtime
Environment is reserved at the adjacent area of the ICEs, and
it is also protected by the watermark when the Rich OS is
running. Since we need to copy one ICE to the ICE runtime
environment every time when one ICE needs to run, it will
increase the switching time between ICEs and the Rich OS. To
solve this problem, we would suggest more watermark memory