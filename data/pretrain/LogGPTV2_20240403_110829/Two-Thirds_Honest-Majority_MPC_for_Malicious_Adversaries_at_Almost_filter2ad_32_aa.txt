**Title: Two-Thirds Honest-Majority MPC for Malicious Adversaries at Almost the Cost of Semi-Honest**

**Authors:**
- Jun Furukawa, NEC Israel Research Center
- Yehuda Lindell, Bar-Ilan University and Unbound Tech Ltd., Israel

**Abstract:**
Secure multiparty computation (MPC) allows a set of parties to jointly compute a function on their private inputs without revealing any information beyond the output. Protocols designed for semi-honest adversaries ensure security as long as the corrupted parties follow the protocol and do not leak additional information from the transcript. In contrast, protocols for malicious adversaries provide security even when the corrupted parties can deviate arbitrarily from the protocol. While security against malicious adversaries is generally required in practice, it often comes with a significant performance cost.

In this paper, we present the first protocol that achieves security in the presence of malicious adversaries for a two-thirds honest majority, with a cost that is essentially the same as the best-known protocols for semi-honest adversaries. Our construction is not a general transformation, so it is possible that future semi-honest protocols may not support our method. However, for the current state-of-the-art protocols involving many parties (based on Shamir sharing), our protocol invokes the best semi-honest multiplication protocol exactly once per multiplication gate, plus some negligible local computation. Specifically, the best version of our protocol requires each party to send, on average, just 2.67 elements per multiplication gate (when the number of multiplication gates is at least the number of parties). This is four times faster than the previous-best protocol by Barak et al. (ACM CCS 2018) for small fields and twice as fast as the previous-best protocol by Chida et al. (CRYPTO 2018) for large fields.

**1. Introduction**

**1.1 Background**
Secure computation protocols enable a set of parties with private inputs to compute a joint function while revealing only the output. The typical security properties required include:
- **Privacy:** Only the output is revealed.
- **Correctness:** The output is computed correctly.
- **Input Independence:** A party cannot choose its input based on other parties' inputs.
- **Fairness:** If one party receives the output, all parties do.
- **Guaranteed Output Delivery:** All parties always receive the output.

Formally, the security of a protocol is proven by showing that it behaves like an ideal execution with an incorruptible trusted party who computes the function [5,16]. In some cases, fairness and guaranteed output delivery are not required, such as when there is no honest majority or to construct highly efficient protocols [1,19].

Secure computation protocols must be robust against adversarial behavior. Key parameters include:
- **Adversarial Behavior:** 
  - **Semi-Honest:** The adversary follows the protocol but tries to learn more from the transcript.
  - **Malicious:** The adversary can deviate arbitrarily.
- **Adversarial Power:**
  - **Information-Theoretic Security:** Secure against computationally unlimited adversaries.
  - **Computational Security:** Secure against probabilistic polynomial-time adversaries.
- **Number of Corruptions:** Denoted by \( t \) out of \( n \) total parties. Common thresholds are \( t < n/3 \), \( t < n/2 \), and \( t < n \).

**Shamir Secret Sharing:**
Let \( F \) be a finite field and \( \alpha_1, \ldots, \alpha_n \in F \). The procedures are:
- **share(v):** A dealer with value \( v \in F \) chooses random \( a_1, \ldots, a_t \in F \) and defines \( p(x) = v + \sum_{i=1}^t a_i x^i \). The dealer sends \( p(\alpha_j) \) to party \( P_j \) for \( j = 1, \ldots, n \). We denote this by \([v]\). We also use \([v]_t\) and \([v]_{2t}\) for degree-t and degree-2t polynomials, respectively.
- **complete(v_{i_1}, \ldots, v_{i_{t+1}}):** Given \( t+1 \) shares, this procedure interpolates to find the unique polynomial \( p \) passing through these points, and outputs \( v = p(0) \) along with the remaining \( n - t - 1 \) shares.
- **reconstruct([v]_t, i):** Given a sharing \([v]_t\) and an index \( i \), all parties send their shares to \( P_i \), who verifies the points and reconstructs \( v \).

We note that if the dealer is corrupted, the shares may be invalid, meaning the polynomial degree could be greater than \( t \). Despite this, we will still refer to the shares as \([v]\) even if they are invalid.