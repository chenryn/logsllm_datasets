allowing them to be merged easily at these nodes.
As an example, Figure 2 shows an excerpt of the code
property graph for the function in Figure 1. The graph contains
including the entry
a node for each program statement,
and exit statements, the call to n2s (line 11), the call to
memcpy (line 25), and the if statement (line 12). Each of these
nodes span a syntax tree indicated by blue edges, making, for
example, the decomposition of the call to n2s into its language
elements apparent. In addition, data-ﬂow edges obtained from
the program dependence graph are introduced from the ﬁrst
to the second and third statement to indicate that the value of
payload produced at the ﬁrst statement reaches the second
and third unmodiﬁed and is used there. Finally, control-ﬂow
edges indicating the ﬂow of control in the function are shown
in green. For example, an unconditional control-ﬂow edge
connects the ﬁrst statement to the second, making clear that
the second statement is executed right after the ﬁrst.
Once constructed, insecure programming patterns, and in
particular, instances of taint-style vulnerabilities, can be de-
scribed as traversals in the code property graph. Starting
from a set of seed nodes, a traversal passes over the graph
moving along the edges according to properties of the nodes.
The output of a traversal
is the set of nodes where this
movement terminates. For example, a traversal may start at all
calls to memcpy and move backwards along data-ﬂow edges
to the macro n2s, thereby extracting candidates similar to
the “Heartbleed” vulnerability (Figure 1). Additionally, the
traversal can make use of control-ﬂow edges to only select
those paths between memcpy and n2s where no validation of
the propagated variable payload is performed.
Formally, graph traversals are functions that map one set
of nodes to another set of nodes. As such, traversals can
be chained freely using function composition to yield new
traversals, making it possible to express complex queries in
terms of re-usable, elementary traversals. We make extensive
use of this capability to construct search queries for taint-style
vulnerabilities (see Section IV-D). A detailed introduction to
code property graphs and traversals for vulnerability discovery
is provided by Yamaguchi et al. [63].
III. EXTENDING CODE PROPERTY GRAPHS FOR
INTERPROCEDURAL ANALYSIS
The code property graph offers a wealth of information for
pattern-based vulnerability discovery, however, it has not been
constructed with interprocedural analysis in mind. Unfortu-
nately, information exploitable to infer search patterns is scarce
799799
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
and often spread across several functions, making analysis
beyond function boundaries desirable. We therefore seek to
extend the code property graph to obtain a representation
similar to the well known System Dependence Graph [23] but
in a format suitable for mining using graph databases. We can
achieve this by extending the code property graph as follows.
We begin by making the data ﬂow between call sites and
their callees explicit by introducing edges from arguments
to parameters of the respective callees, and from return
statements back to call sites. In effect, we already obtain a
graph that expresses call relations between functions, however,
the data ﬂow information it encodes is needlessly inexact.
Most importantly, modiﬁcations made by functions to their
arguments are not taken into account, nor the effects these
have as data ﬂows back along call chains.
In the following, we describe an approach to improve this
preliminary graph by detecting argument modiﬁcations using
post-dominator trees (Section III-A), both to handle calls
to functions where source code is available, and for library
functions where only callers can be observed (Section III-B).
We proceed to propagate this information through the graph
to obtain the ﬁnal interprocedural version of the code property
graph used for inference of search patterns (Section III-C).
A. Adding Post-Dominator Trees
For our heuristic approach to the detection of argument def-
initions, the ability to determine whether a statement is always
executed before another is crucial. Unfortunately, the existing
classic program representations merged into the property graph
do not allow this to be determined easily; the control-ﬂow
graph only indicates whether a statement may be executed
after another, and the control-dependencies of the program
dependence graph are limited to exposing predicates that must
be evaluated before executing statements.
Dominator and post-dominator trees [see 3, 8], two classical
program representation derivable from the control-ﬂow graph,
are ideally suited to address this problem. As is true for
control-ﬂow graphs and program dependence graphs, these
trees contain a node for each statement. These nodes are
connected by edges to indicate dominance, a notion closely
related to analysis of mandatory statement execution-order.
A node d dominates another node n in a control-ﬂow graph,
if every path to n has to ﬁrst pass through d. By linking each
node to its immediate dominator, we obtain a dominator tree.
Similarly, a node p post-dominates another node n, if every
path from n has to pass through p. By again linking together
the immediate post-dominators of each node, we obtain a post-
dominator tree.
As an Example, Figure 4 shows a post-dominator tree for
the function bar of the running example from Figure 3.
Like all post-dominator trees, the tree is rooted at the exit
node as all paths in the CFG eventually lead through the
exit node. However, as edges only exist from nodes to their
immediate post-dominator, only the predicate y < 10 and the
call foo(x,y,z) are connected to the exit node. In contrast,
int bar(int x, int y) {
int z;
boo(&z);
if (y < 10)
foo(x,y,&z);
}
int boo(int *z) {
*z = get();
}
int moo() {
int a = get();
int b = 1;
bar(a, b);
}
int woo() {
int a = 1;
int b = get();
bar(a, b);
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Fig. 3: Running example of a call to the sink foo
exit
y < 10 
call: foo
call: boo
int z
entry
Fig. 4: Post-dominator tree for the function bar
the call to boo is immediately post-dominated by the predicate,
while it immediately post-dominates the statement int z.
Both data structures come handy, if we quickly need to
determine whether a statement in the code base is always
preceded or followed by another statement. Moreover, since
a designated node exists for each statement, merging these
structures with the existing code property graph can be easily
achieved by adding appropriately labeled dominator edges
between statement nodes.
B. Detecting Argument Modiﬁcation
Once post-dominator trees are available, we can employ
them to detect function calls that result in modiﬁcations of
their arguments —a process denoted as deﬁning arguments in
compiler design [3]. While for common library functions such
as read or recv from the POSIX standard, this problem can
be addressed by providing annotations, internal APIs such as
the n2s macro as present in the “Heartbleed” vulnerability are
not recognized as input sources.
In general, we therefore need to assume that it is unknown
whether a call to a library function results in modiﬁcation of its
arguments, and hence, serves as a data source. In effect, for
all direct and indirect callers of library functions, argument
800800
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
deﬁnition may not be detected correctly. As an example,
consider the POSIX library functions read and write that
both take a pointer to a memory buffer as their second
arguments. From the function signatures alone, it is impossible
to determine that read modiﬁes the contents of the buffer
while write does not. This, however, is a vital difference that
directly affects data-ﬂow edges in the code property graph.
To address this problem, we proceed as follows. For each
encountered function that comes without source code, we
determine whether it possibly deﬁnes its arguments by cal-
culating a simple statistic based on the following two checks.
1) We check whether a local variable declaration reaches
the argument via a data ﬂow without undergoing an
easily recognizable initialization, such as an assignment
or a call to a constructor.
2) We check that the path from the function to the local
variable declaration in the post-dominator tree does not
contain another statement that is also directly connected
to the variable declaration by data ﬂow.
Calculating the fraction of call sites that fulﬁll both con-
ditions, we assume that an argument is deﬁned by calls to
the function if the fraction is above a deﬁned threshold.
For our experiments we ﬁx this threshold to 10% to not
miss any attacker-controlled sources. With the help of this
simple heuristic, we recalculate the data-ﬂow edges in the code
property graph for all callers of functions without source code.
Figure 3 illustrates our heuristic: the local variable z is
declared on line 2 without obvious initialization. It is then
passed to both boo and foo as an argument on line 3 and 5,
respectively. While for function boo, it is reasonable to assume
that it initializes z, this is not true for function foo as it is
called after boo that may have already initialized z.
C. Propagation of Data-Flow Information
In addition to the problem of detecting argument deﬁnitions
by library functions, argument deﬁnitions may occur indirectly,
i.e., any of the functions called by a function may be re-
sponsible for argument deﬁnition. Consequently, identifying
the sources for a data ﬂow in a function without descending
into all its callees is not effective. As an example, consider
the code snippet shown in Figure 3. The argument z of the
function foo is ﬁrst deﬁned in line 2 but then re-deﬁned in
line 9 inside the called function boo. As a result, there is a
data ﬂow from the source get to the function foo.
To take into account indirect argument deﬁnitions, we can
propagate data-ﬂow information along call-chains. To this
end, we determine for each function (with available source
code) whether argument deﬁnition takes place by analyzing
its body and checking whether any of its parameters are
(a) deﬁned inside the function and (b) this deﬁnition reaches
the exit statement via control ﬂow. However, this only works
if the data-ﬂow edges of a function already take into account
argument deﬁnitions performed by any of the functions that it
calls. We therefore analyze all callees of a function prior to
analyzing the function itself and apply the heuristic presented
in the previous section for library functions.
FIXNODE(v)
fv ← false
for v ∈ V do
for v ∈ V do
Algorithm 1 Data ﬂow recalculation
1: procedure FIXDATAFLOWEDGES(V )
2:
3:
4:
5:
6: procedure FIXNODE(v)
if fv = true then
7:
return false
8:
fv ← true, u ← false
9:
for c ∈ CALLEES(v) do
10:
u ← u ∨ FIXNODE(c)
11:
12:
13:
14:
15:
UPDATEDATAFLOW(v)
return true
if u = true then
return false
(cid:2) Mark nodes as not ﬁxed
(cid:2) Fix all callees
(cid:2) v needs to be updated
func: baz
Function baz
stmts
=
Function qux
func: qux
int s
call: qux
params
stmts
arg: 3
arg: 7
param: x
param: y
ret x * y
(a) Interprocedural code property graph.
1
2
3
void baz(void) {
int s = qux(3, 7);
}
int qux(int x , int y) { 4
5
6
return x * y;
}
(b) Code snippet of caller and callee.
Fig. 5: Interprocedural code property graph for the functions
baz and qux. Syntax edges are shown as dotted lines and
data-ﬂow edges as solid lines.
Algorithm 1 implements this idea by recursively updating
the nodes of the code property graph. In particular, the data-
ﬂow edges of a node v are ﬁxed using the procedure FIXN-
ODE, where the attribute fv ensures that no node is visited
twice. The algorithm descends into the graph using a pre-
order traversal, that is, all callees are updated (line 11) before
the current function is processed (line 13). Upon completion of
Algorithm 1, observable argument deﬁnitions and the resulting
indirect data ﬂows are accounted for in the graph.
As an example of a resulting interprocedural code property
graph, consider the code snippet and the graph given in
Figure 5. The graph is constructed from the nodes of the
abstract syntax tree, where its edges either reﬂect syntax
(dashed lines) or data ﬂow (solid lines). Control-ﬂow edges
are not shown in this example.
Conceptually, this interprocedural representations of code is
directly derived from the classical System Dependence Graph
(SDG) introduced by Horwitz et al. [23], however, tuned to
801801
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
be processed using graph database queries, and augmented
with syntax and dominance information. This structure is well
suited to model and search for vulnerabilities as we illustrate
in the following sections.
IV. INFERENCE OF SEARCH PATTERNS
FOR VULNERABILITIES
Equipped with a code property graph extended for inter-
procedural analysis, we are now ready to tackle the problem
of extracting search patterns for taint-style vulnerabilities.
Starting from a security-sensitive sink, such as the memory
function memcpy, our goal is to generate search patterns in the
form of graph traversals that enable uncovering vulnerabilities
in the data ﬂow to the sink. To be useful,
these queries
need to be general enough to encode patterns of code instead
of speciﬁc invocations. Moreover, they need to capture data
ﬂow precisely across functions, such that the deﬁnition of
individual arguments can be correctly tracked. Finally, the
generated queries should be easy to understand and amendable
by a practitioner, allowing additional domain knowledge to be
incorporated.
In order to generate search patterns with these qualities, we
implement the following four-step procedure that combines
techniques from static code analysis, machine learning and
signature generation (Figure 6).
1) Generation of deﬁnition graphs. For each call of the
selected sink, we generate deﬁnition graphs by analyz-
ing the code property graph. Similar to interprocedural