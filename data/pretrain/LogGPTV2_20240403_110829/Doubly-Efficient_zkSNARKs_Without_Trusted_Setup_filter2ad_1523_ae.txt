
h∈{0,1}log(|m|)
RDL(q
(cid:2)
that V can use it to ensure that the same witness element feeds
multiple sub-ACs: the sum-check protocol forces P to respect
the wiring of the RDL, so P cannot equivocate about w.
Moreover, since the RDL only “re-wires” its inputs, the sum-
check invocation corresponding to this layer of the AC can be
optimized to require fewer rounds and a simpliﬁed ﬁnal check.
Observe that the redistribution layer only requires one-input
“pass” gates that copy their input to their output. Thus, following
a simpliﬁcation of the CMT protocol [35, 98], we have that
˜pass((q(cid:16), q), h) · ˜Vd(h)
(cid:16),q)(h) = ˜pass((q(cid:16), q), h) · ˜Vd(h)
˜Vd−1(q(cid:16), q) =
˜pass((q(cid:16), q), h) is the MLE of a wiring predicate (§3.2)
where
that is 1 when the RDL connects from the AC input with index h
to input q in sub-AC q(cid:16), and 0 otherwise. A sum-check over
requires log(|m|) = log(|x| + |w|) rounds, at the end of which V
(cid:16),q) at a random point. This requiresV to evaluate
evaluates RDL(q
˜pass, but in contrast to P...,i or Q...,i (§3.2), it only requires one
evaluation of ˜Vd, which V can check (via the protocol of §6.1)
without invoking a mini-protocol (§3.2).
By a standard analysis [35], P’s costs are O(NG log |m|); V’s
primary cost related to the RDL is evaluating ˜pass at one point,
which costs O(|m| + NG) via known techniques [104, §3.3]. We
formalize in Theorem 6 (§7).
7 Hyrax: a zkSNARK based on Gir++
We refer to the honest-veriﬁer PZK argument obtained by ap-
plying the reﬁnements of Sections 5 and 6 to the protocol of
Section 4 as Hyrax-I; pseudocode is given in Appendix B. Since
Hyrax-I is a public-coin protocol, we apply the Fiat-Shamir
heuristic [41] to produce a zkSNARK that we call Hyrax whose
properties we now formalize:
Theorem 6. Let C(·, ·) be a layered AC of fan-in two, consisting of
N identical sub-computations, each having d layers whose width
is at most G. Under the discrete log assumption in the random
|w| and Sp · Ti =
oracle model, for every Sp, Ti with Ti ≥
|w|, there exists a perfectly complete, perfect zero-knowledge,
non-interactive argument with witness-extended emulation for
the NP relation “∃w such that C(x, w) = y.” V runs in time
O(|x| + |y| + dG + (Ti + d log(NG)) · κ) for κ a bound on the
time to compute a commitment; when using an RDL (§6.2), V
incurs an additional O(|x| + |w| + NG) cost. P’s messages have
size O((Sp + d log(NG)) · λ) for λ a security parameter.
We leave proof to the full version [106, Appx. B].
Implementation. Our implementation of Hyrax is based on
Giraﬀe’s code [81, 104]. It uses Pedersen commitments (Appx. A)
in an elliptic curve group of order qG and works with ACs over
FqG. We instantiate the random oracle with SHA-256.
The prover takes as input a high-level description of an AC (in
the format produced by Giraﬀe’s C compiler), the public inputs,
and an auxiliary executable that generates the witness from the
public inputs; the prover’s output is a proof. The veriﬁer takes as
input the same computation description and public inputs plus
the proof, and outputs “accept” or “reject.”
We implement Gir++, the techniques of Sections 5 and 6,
the random oracle, and proof serialization and deserialization
by adding 2800 lines of Python and 300 lines of C to the
Giraﬀe code. We also implemented a library for fast multi-
exponentiation comprising 750 lines of C that uses the MIRACL
Crypto SDK [74] for elliptic curve operations and selects between
Straus’s [95] and Pippenger’s [19, 83] methods, depending on
the problem size. Our library supports Curve25519 [18], M221,
M191, and M159 [2]. Python code calls this library via CFFI [31].
We produce random group elements by hashing, implemented in
200 lines of Sage [88] adapted from a script by Samuel Neves [2].
We have released full source code [58].
8 Evaluation
In this section we ask:
• How does Hyrax compare to several baseline systems, con-
sidering proof size and V and P execution time?
• How do Hyrax’s reﬁnements (§5–6) improve its costs?
• What is the overall eﬀect of trading greater witness-related
V computation for smaller witness commitments (§6.1)?
A careful comparison of built systems shows that, even for modest
problem sizes, Hyrax’s proofs are smaller than all but the most
computationally costly of the baselines; and that its V and P
execution times are each faster than three of ﬁve baselines. We also
ﬁnd that Hyrax’s reﬁnements yield multiple-orders-of-magnitude
savings in proof size and V time, and a small constant savings
in P time. Finally, we ﬁnd that tuning the witness commitment
costs gives much smaller proofs, with little eﬀect on total V time
for a computation using an RDL (§6.2).
8.1 Comparison with prior work
Baselines. We compare Hyrax with ﬁve state-of-the-art zero-
knowledge argument systems with similar properties, detailed
below. We also consider Hyrax-naive, which implements the
protocol of Section 4 without our reﬁnements (§5–6). We do not
compare to systems that require trusted setup (see §2, second
paragraph), but we discuss them brieﬂy in Section 8.3.
Like Hyrax (and Hyrax-naive), two of the baselines rely on
elliptic curve primitives; but their existing implementations use a
diﬀerent elliptic curve than Hyrax. To evaluate like-for-like, we re-
implemented them using the Python scaﬀolding, C cryptographic
library, and elliptic curves that Hyrax uses (§7).
The other three baselines do not use elliptic curves, so some
mismatch in implementations is unavoidable. For those systems,
we used existing implementations written in C or C++.
• BCCGP-sqrt is the square-root-communication argument due
to Bootle et al. [24]. We implemented this protocol using Hyrax’s
libraries, as described above. In addition, this protocol uses poly-
nomial multiplication, for which we used NTL [94]. Finally, we
wrote a compiler that converts from Hyrax’s AC description
format to the required constraint format, with rudimentary op-
timizations like constant folding and common subexpression
elimination. Our implementation comprises 1200 lines of Python
and 160 lines of C, which we include in our released code [58].
• Bulletproofs is the argument due to Bünz et al. [30] (we also
adapted the inner-product argument from this work in §6). We
implemented this protocol in 300 lines of Python on top of our
BCCGP-sqrt code, which we also include in our release.
935
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
B
k
i
,
e
z
i
s
f
o
o
r
p
)
r
e
t
t
e
b
s
i
r
e
w
o
l
(
105
104
103
100
10
1
2
4
6
8
(a) Proof size: 64×64 matrix multiplication.
log2 N, number of copies
s
d
n
o
c
e
s
,
e
m
i
t
r
e
v
o
r
p
)
r
e
t
t
e
b
s
i
r
e
w
o
l
(
104
103
100
10
1
2
4
6
8
(b) P time: 64×64 matrix multiplication
log2 N, number of copies
104
103
100
10
1
0.1
s
d
n
o
c
e
s
,
e
m
i
t
r
e
ﬁ
i
r
e
v
)
r
e
t
t
e
b
s
i
r
e
w
o
l
(
2
4
6
8
(c) V time: 64×64 matrix multiplication
log2 N, number of copies
B
k
i
,
e
z
i
s
f
o
o
r
p
)
r
e
t
t
e
b
s
i
r
e
w
o
l
(
105
104
103
100
10
1
103
104
105
high-resolution image size, pixels
(d) Proof size: 16× Lanczos scaling
s
d
n
o
c
e
s
,
e
m
i
t
r
e
v
o
r
p
)
r
e
t