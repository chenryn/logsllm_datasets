>>> a = [1, 2]
>>> b = a
>>> a += [3, 4] # 直接修改 a 内容。
>>> a # a、b 结果相同，确认修改原对象。
[1, 2, 3, 4]
>>> b
[1, 2, 3, 4]
>>> a is b
True
编译器将 “+=” 运算符处理成 INPLACE_ADD 操作，也就是修改原数据，⽽⾮新建对象。其效
果类似于执⾏ list.extend ⽅法。
判断元素是否存在时，同样习惯使⽤ in，⽽⾮ index ⽅法。
>>> 2 in [1, 2]
True
⾄于删除操作，可以索引序号指定单个元素，或⽤切⽚指定删除范围。
>>> a = [0, 1, 2, 3, 4, 5]
>>> del a[5] # 删除单个元素。
>>> a
[0, 1, 2, 3, 4]
>>> del a[1:3] # 删除范围。
>>> a
[0, 3, 4]
!70
学习笔记 . 第三版
返回切⽚时会创建新列表对象，并复制相关指针数据到新的数组。除部分引⽤⽬标相同
外，对列表⾃⾝的修改（插⼊、删除等）互不影响。
>>> a = [0, 2, 4, 6]
>>> b = a[:2]
>>> a[0] is b[0] # 复制引⽤用，指向同⼀一对象。
True
>>> a.insert(1, 1) # 对 a 列列表的操作，不不会影响 b。
>>> a
[0, 1, 2, 4, 6]
>>> b
[0, 2]
复制的是指针（引⽤），⽽不是⽬标元素对象。
对列表⾃⾝的修改互不影响，但对⽬标元素的修改是共享的。
a
0 2 4 6 1
b
对列表排序可设定⾃定义条件，⽐如按字段或长度等。
class User:
def __init__(self, name, age):
self.name = name
self.age = age
def __repr__(self):
return f"{self.name} {self.age}"
!71
学习笔记 . 第三版
>>> users = [User(f"user{i}", i) for i in (3, 1, 0, 2)]
>>> users
[user3 3, user1 1, user0 0, user2 2]
>>> users.sort(key = lambda u: u.age) # 使⽤用 lambda 匿匿名函数返回排序条件。
>>> users
[user0 0, user1 1, user2 2, user3 3]
如要返回排序复制品，可使⽤ sorted 函数。
>>> d = [3, 0, 2, 1]
>>> sorted(d) # 同样可指定排序条件，或倒序。
[0, 1, 2, 3]
>>> d # 并未影响原列列表。
[3, 0, 2, 1]
向有序列表插⼊元素，可借助 bisect 模块。它使⽤⼆分法查找适合位置，可⽤来实现优先
级队列或⼀致性哈希算法等。
>>> d = [0, 2, 4]
>>> import bisect
>>> bisect.insort_left(d, 1) # 插⼊入新元素后，依然保持有序状态。
>>> d
[0, 1, 2, 4]
>>> bisect.insort_left(d, 2)
>>> d
[0, 1, 2, 2, 4]
>>> bisect.insort_left(d, 3)
>>> d
[0, 1, 2, 2, 3, 4]
⾃定义复合类型，可通过重载⽐较运算符（__eq__、__lt__ 等）实现⾃定义排序条件。
!72
学习笔记 . 第三版
元组
尽管两者并没有直接关系，但在操作⽅式上，元组（tuple）可当做列表的只读版本使⽤。
>>> a = [1, "abc"]
>>> b = tuple(a)
>>> b
(1, 'abc')
元组使⽤⼩括号语法，但要与普通括号区别开来。
>>> a = (1, ) # 仅⼀一个元素的元组。
>>> type(a)
tuple
>>> b = (1) # 普通括号。
>>> type(b)
int
因元组是不可变类型，它的指针数组⽆需变动，故内存分配乃⼀次性完成。另外，系统会
缓存复⽤⼀定长度的元组内存。创建时，按长度提取复⽤，⽆需额外内存分配（包括指针
数组）。从这点上看，元组的性能要好于列表。
Python 3.6 缓存复⽤长度在 20 以内的 tuple 内存，每种 2000 上限。
指针数组
0 1 2
tuple
v v v
>>> %%timeit
[1, 2, 3]
!73
学习笔记 . 第三版
64.8 ns ± 0.375 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
>>> %%timeit
(1, 2, 3)
16.4 ns ± 0.156 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)
⽀持与列表类似的运算符操作，但没有 INPLACE，总是返回新对象。
>>> (1, 2) + (3, 4)
(1, 2, 3, 4)
>>> (1, 2) * 2
(1, 2, 1, 2)
>>> a = (1, 2, 3)
>>> b = a
>>> a += (4, 5) # 创建新 tuple，⽽而不不是修改原内容。
>>> a
(1, 2, 3, 4, 5)
>>> b
(1, 2, 3)
因列表⽀持插⼊、删除等操作，所以⽆法将某个位置（索引序号）的元素与固定内容等同
起来。但元组不同，相同序号总是返回同⼀对象，故可为序号取个别名。
>>> User = collections.namedtuple("User", "name,age") # 创建 User 类型，指定字段。
>>> issubclass(User, tuple) # tuple ⼦子类。
True
>>> u = User("qyuhen", 60)
>>> u.name, u.age
qyuhen 60
>>> u[0] is u.name
True
!74
学习笔记 . 第三版
对于定义纯数据类型，显然 namedtuple 要⽐ class 简洁。关键在于，名字要⽐序号更易阅读和维
护，类似于数字常量定义。
数组
数组（array）与列表、元组的区别在于：元素单⼀类型和内容嵌⼊。
>>> import array
>>> a = array.array("b", [0x11, 0x22, 0x33, 0x44])
>>> memoryview(a).hex() # 使⽤用内存视图查看，内容嵌⼊入⽽而⾮非指针。
11223344
>>> a = array.array("i")
>>> a.append(100)
>>> a.append(1.23)
TypeError: integer argument expected, got float
可直接存储包括 Unicode 字符在内的各种数字内容。⾄于复合类型，须⽤ struct、marshal、
pickle 等转换为⼆进制字节后再⾏存储。
与列表类似，数组长度不固定，按需扩张或收缩内存。
>>> a = array.array("i", [1, 2, 3])
>>> a.buffer_info() # 返回缓冲区内存地址和⻓长度。
(4481545888, 3)
>>> a.extend(range(100000)) # 追加⼤大量量内容后，内存地址和⻓长度发⽣生变化。
>>> a.buffer_info()
(4460855296, 100003)
由于可指定更紧凑的数字类型，故数组可节约更多内存。再则，内容嵌⼊也避免了标准对
象的额外开销，减少活跃对象数量和内存分配次数。
!75
学习笔记 . 第三版
@profile
def test_list():
x = []
x.extend(range(1000000))
return x
@profile
def test_array():
x = array.array("l")
x.extend(range(1000000))
return x
test_array()
test_list()
输出：
$ python -m memory_profiler test.py
Line # Mem usage Increment Line Contents
=====================================================================
6 40.547 MiB 0.000 MiB @profile
7 def test_list():
8 40.547 MiB 0.000 MiB x = []
9 79.129 MiB 38.582 MiB x.extend(range(1000000))
10 79.129 MiB 0.000 MiB return x
Line # Mem usage Increment Line Contents
=====================================================================
13 32.605 MiB 0.000 MiB @profile
14 def test_array():
15 32.609 MiB 0.004 MiB x = array.array("l")
16 40.547 MiB 7.938 MiB x.extend(range(1000000))
17 40.547 MiB 0.000 MiB return x
2.6 字典
字典（dict）是内置类型中唯⼀的映射（mapping）结构，基于哈希表存储键值对数据。
值（value）可以是任意数据，但主键（key）必须是可哈希类型。常见的可变类型，如列
表、集合等都不能作为主键使⽤。⽽元组等不可变类型，也不能引⽤可变类型元素。
>>> issubclass(list, collections.Hashable)
False
!76
学习笔记 . 第三版
>>> issubclass(int, collections.Hashable)
True
>>> hash((1, 2, 3))
2528502973977326415
>>> hash((1, 2, [3, 4])) # 包含可变列列表元素。
TypeError: unhashable type: 'list'
哈希计算通过调⽤ __hash__ ⽅法返回整数值，⽤来快速⽐较内容是否相同。某些类型虽
然有该⽅法，但实际⽆法执⾏，故不能作为主键使⽤。另外，主键对象哈希值须恒定不变，
否则⽆法查找键值，甚⾄引发错误。
>>> callable(list().__hash__)
False
⾃定义类型默认实现了 __hash__ 和 __eq__ ⽅法，⽤于哈希和相等⽐较操作。前者为每个实例返
回随机值，后者除⾮与⾃⼰⽐较，否则总是返回 False。可根据需要重载。
作为⼀种常⽤数据结构，以及名字空间的缘故，字典使⽤频率⾮常⾼。开发团队也⼀直致
⼒于改进其数据结构和算法，这其中⾃然也包括惯⽤的缓存复⽤。
6
dict .
3
n
o
keys values
h
indices
t
y
entries P
k k v v
!77
学习笔记 . 第三版
Python 3.6 借鉴 PyPy 字典设计，采⽤更紧凑的存储结构。keys.entries 和 values ⽤数组按添加顺
序存储主键和值引⽤。实际哈希表由 keys.indices 数组承担，通过计算主键哈希值找到合适位置，
然后在此存储主键在 keys.entries 的实际索引。如此，只要通过 indices 获取实际索引后，就可读
取主键和值信息。
虽然该版本按添加顺序存储，但内部实现不能作为依赖条件。在后续版本中，可能有其他变化。
如有明确顺序需求，建议使⽤ collections.OrderedDict。
系统分别缓存复⽤ 80 个 dict 和 keys，其中包括长度为 8 的 entries 内存。对于⼤量⼩字典对象⽽
⾔，直接使⽤，⽆需任何内存分配操作。回收时，有过内存扩张的都被放弃。
从字典开放地址法（open-address）的实现⽅式看，它并不适合⽤来处理⼤数据。轻量级
⽅案可选⽤ shelve、dbm 等标准库模块，或直接采⽤ SQLite、LevelDB 专业数据库。
构建
以⼤括号键值对⽅式创建，或调⽤类型构造。
>>> {"a": 1, "b": 2}
{'a': 1, 'b': 2}
>>> dict(a = 1, b = 2)
{'a': 1, 'b': 2}
初始化键值参数也可以元组、列表等可迭代对象⽅式提供。
>>> kvs = (("a", 1), ["b", 2])
>>> dict(kvs)
{'a': 1, 'b': 2}
基于动态数据创建时，更多以 zip、map 函数或推导式⽅式完成。
>>> dict(zip("abc", range(3)))
{'a': 0, 'b': 1, 'c': 2}
>>> dict(map(lambda k, v: (k, v + 10), "abc", range(3))) # 使⽤用 lambda 匿匿名函数过滤数据。
{'a': 10, 'b': 11, 'c': 12}
!78
学习笔记 . 第三版
>>> {k: v + 10 for k, v in zip("abc", range(3))} # 使⽤用推导式处理理数据。
{'a': 10, 'b': 11, 'c': 12}
除直接提供内容外，某些时候，还需根据⼀定条件初始化字典对象。⽐如说，基于已有字
典内容扩展，或者初始化零值等。
>>> a = {"a":1}
>>> b = dict(a, b = 2) # 在复制 a 内容基础上，新增键值对。
>>> b
{'a': 1, 'b': 2}
>>> c = dict.fromkeys(b, 0) # 仅⽤用 b 主键，内容另设。
>>> c
{'a': 0, 'b': 0}
>>> d = dict.fromkeys(("counter1", "counter2"), 0) # 显式提供主键。
>>> d
{'counter1': 0, 'counter2': 0}
相⽐ fromkeys ⽅法，推导式可完成更复杂的操作，⽐如额外的 if 过滤条件。