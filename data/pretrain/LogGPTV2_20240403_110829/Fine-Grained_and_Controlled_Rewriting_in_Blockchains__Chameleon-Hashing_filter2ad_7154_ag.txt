resistance to what we call strong private collision resistance.
We note that [16] additionally deﬁne uniqueness of CHET
schemes. However, in our case this notion is not required.
Strong Indistinguishability. Strong Indistinguishability re-
quires that it be intractable for outsiders to distinguish whether
a given randomness corresponds to an output of HashCHET
or AdaptCHET. Note that, when compared to the deﬁnitions
in [16], [10], the adversary additionally receives the secret key
sk, but cannot generate it.
ExpSIndA,CHET(κ)
PPCHET ← PPGenCHET(1κ)
(skCHET, pkCHET) ← KGenCHET(PPCHET)
b ←$ {0, 1}
b∗ ← AHashOrAdaptCHET(skCHET,·,·,b)(skCHET, pkCHET)
let (h0, r0, etd0) ← HashCHET(pkCHET, m(cid:48))
let (h1, r1, etd1) ← HashCHET(pkCHET, m)
let r1 ← AdaptCHET(skCHET, etd1, m, m(cid:48), h1, r1)
return (hb, rb, etdb)
where HashOrAdaptCHET(sk,·,·, b) on input m, m(cid:48):
return b = b∗
Fig. 8: CHET Strong Indistinguishability
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:12)(cid:12)(cid:12) .
(cid:105) − 1/2
Deﬁnition 13 (Strong Indistinguishability). We deﬁne the
advantage of an adversary A in the strong indistinguishability
experiment ExpSIndA,CHET(κ) as
AdvIndA,CHET(κ) :=
ExpSIndA,CHET(κ) = 1
We say that a CHET scheme is strongly indistinguishable,
if AdvIndA,CHET(κ) is a negligible function in κ for all PPT
adversaries.
Public Collision-Resistance. Public collision-resistance grants
the adversary access to an AdaptCH oracle. It requires that it is
intractable to produce collisions, other than the ones produced
by the AdaptCH oracle. Due to lack of space and since the
formal deﬁnition is not required for the proofs presented in
this version we refer the reader to the full version or [16] for
a formal deﬁnition of this property.
Strong Private Collision-Resistance. Strong private collision-
resistance requires that it is even intractable for the holder of
the secret key sk to ﬁnd collisions without knowledge of etd.
Compared to the deﬁnition by Camenisch et al. [16], however,
we also allow the adversary to request arbitrary collisions; the
ephemeral trapdoor to use is indexed by the handle. This allows
for a completely stateless primitive.
Deﬁnition 14 (Strong Private Collision-Resistance). We deﬁne
the advantage of an adversary A in the private collision-
resistance experiment ExpSCRpriv
A,CHET(κ) as
(cid:104)
(cid:105)
AdvSCRpriv
A,CHET(κ) := Pr
ExpSCRpriv
A,CHET(κ) = 1
A,CHET(κ)
CHET(·,·),Adapt(cid:48)
CHET(·,·,·,·,·,·)(PPCHET)
ExpSCRpriv
PPCHET ← PPGenCHET(1κ)
Q ← ∅
i ← 0
, m∗, r∗, m(cid:48)∗, r(cid:48)∗, h∗) ← AHash(cid:48)
∗
(pk
(cid:48)
CHET on input pk, m:
where Hash
(h, r, etd) ← HashCHET(pk, m)
return ⊥, if r = ⊥
i ← i + 1
let Q ← Q ∪ {(pk, h, m, etd, i)}
return (h, r)
return ⊥, if (pk, h(cid:48), m(cid:48)(cid:48), etd, i) /∈ Q for some h(cid:48), m(cid:48)(cid:48), etd, pk
r(cid:48) ← AdaptCHET(sk, etd, m, m(cid:48), h, r)
if r(cid:48) (cid:54)= ⊥, let Q ← Q ∪ {(pk, h(cid:48), m, etd, i), (pk, h(cid:48), m(cid:48), etd, i)}
return r(cid:48)
(cid:48)
CHET on input sk, h, r, m, m(cid:48), i:
and Adapt
∗
return 1, if VerifyCHET(pk
, m(cid:48)∗, r(cid:48)∗, h∗) = 1 ∧ m∗ (cid:54)= m(cid:48)∗ ∧
, m∗, r∗, h∗) = 1 ∧
, h∗,·,·,·) ∈ Q
, h∗, m∗,·,·) /∈ Q ∧ (pk
∗
∗
VerifyCHET(pk
∗
(pk
return 0
Fig. 9: CHET Strong Private Collision-Resistance
We say that a CHET scheme provides private collision-
resistance, if AdvSCRpriv
A,CHET(κ) is a negligible function in κ for
all PPT adversaries.
B. Secure Chameleon-Hashes
1) Instantiation of a Secure CH: We recall a construction
from [16] in Scheme 4 after recalling an RSA key generator.
RSA Key-Generator. Let (N, p, q, e, d) ← RSAKGen(1κ) be
an instance generator which returns an RSA modulus N = pq,
where p and q are distinct primes, e > 1 an integer co-prime
to ϕ(n), and de ≡ 1 mod ϕ(n). We require that RSAKGen
always outputs moduli with the same bit-length, based on κ.
PPGenCH(1κ) : On input a security parameter κ it outputs
the public parameters PP ← (1κ, e), where e is prime
and e > N(cid:48) with N(cid:48) = maxr{N ∈ N : (N,·,·,·,·) ←
RSAKGen(1κ; r)}.
KGenCH(PP) : On input PP = (1κ, e) run (N, p, q,·,·) ←
RSAKGen(1κ), choose a hash function H : {0, 1}∗ →
N (modeled as a random oracle), compute d s.t. ed ≡ 1
Z∗
mod ϕ(N ), set sk ← d, pk ← (N, H), and return
(sk, pk).
HashCH(pk, m) : On input a public key pk = (N, H) and
a message m, choose r ←$ Z∗
N , compute h ← H(m)re
mod N and output (h, r).
VerifyCH(pk, m, h, r) : On input public key pk = (N, H), a
message m, a hash h, and a randomness r ∈ Z∗
N , it
computes h(cid:48) ← H(m)re mod N and outputs 1 if h(cid:48) = h
and 0 otherwise.
AdaptCH(sk, m, m(cid:48), h, r) : On input a secret key sk = d,
messages m and m(cid:48), a hash h, and randomness val-
the adaptation algorithm outputs ⊥ if
ues r and r(cid:48),
VerifyCH(pk, m, h, r) (cid:54)= 1. Otherwise, let x ← H(m),
x(cid:48) ← H(m(cid:48)), y ← xre mod N and return r(cid:48) ←
(y(x(cid:48)−1))d mod N.
.
Scheme 4: RSA-based Chameleon-Hash
14
1, r∗
2), r(cid:48)∗ = (r(cid:48)∗
simulation does not change the view of the adversary. Then,
after the adversary A outputs (pk
∗
, m∗, r∗, m(cid:48)∗, r(cid:48)∗, h∗), where
(cid:48)(cid:48)
1, h∗
1 , r(cid:48)∗
r∗ = (r∗
2 ) and h∗ = (h∗
),
B can return ((m∗, pk
∗
(cid:48)
∗
), r∗
1, (m(cid:48)∗, pk
1) as
, pkch
, pkch
(cid:48)(cid:48). In all other cases,
(cid:48)
its own forgery attempt, if pkch
= pkch
B must abort. Assuming that pkch
(cid:48)
(cid:48)(cid:48) holds, we already
(cid:48)
know that m∗ or pk
, pkch
)
is fresh as well. This concludes the proof.
Theorem 6. If CH is strongly indistinguishable,
then the
construction of a CHET given in Scheme 2 is strongly in-
distinguishable.
∗ must be “fresh”, and thus (m∗, pk
∗
∗
2, pk
, pkch
(cid:48)
1 , h∗
), r(cid:48)∗
= pkch
Proof: First, we prove strong indistinguishability by a
sequence of games.
Game 0: The original strong indistinguishability game in the
case b = 1.
as in the game, directly hash.
Game 1: As Game 0, but instead of calculating the hash h1
Transition - Game 0 → Game 1: We claim that Game 0 and
Game 1 are indistinguishable under the strong indistin-
guishability of CH. More formally, assume that the ad-
versary A can distinguish this hop. We can then construct
an adversary B which breaks the indistinguishability of
the reduction works as follows. B
CH. In particular,
receives PPch as its own challenge, passing them through
to A within PPchet (generating the rest honestly), and
proceeds as in the prior hop, with the exception that
it uses the HashOrAdapt oracle to generate h1. Then,
whatever A outputs, is also output by B. Clearly, the
simulation is perfect from A’s point of view. Note, the
HashOrAdapt always checks if the adaption was success-
ful, and thus so does B, making the distributions equal.
|Pr[S0] − Pr[S1]| ≤ νCH-sInd(κ) follows.
as in the game, directly hash.
Game 2: As Game 1, but instead of calculating the hash h2
Transition - Game 1 → Game 2: We claim that Game 1 and
Game 2 are indistinguishable under the strong indistin-
guishability of CH. More formally, assume that the ad-
versary A can distinguish this hop. We can then construct
an adversary B which breaks the indistinguishability of
the reduction works as follows. B
CH. In particular,
receives PPch as its own challenge, passing them through
to A within PPchet (generating the rest honestly), and
proceeds as in the prior hop, with the exception that
it uses the HashOrAdapt oracle to generate h2. Then,
whatever A outputs, is also output by B. Clearly, the
simulation is perfect from A’s point of view. Note, the
HashOrAdapt always checks if the adaption was success-
ful, and thus so does B, making the distributions equal.
|Pr[S1] − Pr[S2]| ≤ νCH-sInd(κ) follows.
We are now in the case b = 0. However, as the adversary
only sees negligible changes, strong indistinguishability
is proven.
In [16] Camenisch et al. show that the chameleon-hash
in Scheme 4 is secure under the one-more RSA inversion
assumption [12] in the random oracle model (ROM) [13]. We
argue that the CH restated in Scheme 4 remains secure in our
strengthened model. All properties, but strong indistinguisha-
bility, have already been proven by Camenisch et al. [31].
Thus, it remains to prove strong indistinguishability.
Proof: We prove strong indistinguishability by a sequence
of games.
Game 0: The original strong indistinguishability game in the
case b = 0.
1.
Game 1: As Game 0, but we now make the transition to b =
Transition - Game 0 → Game 1: As there is exactly one se-
cret key (up to the group order, which can be ignored),
which makes adaption work correctly, which we explicitly
check, while r is always chosen randomly, the distribu-
tions are exactly equal and thus |Pr[S0] − Pr[S1]| = 0
follows.
In Game 0, we simulate the ﬁrst distribution of the strong
indistinguishability game, in Game 1 the second one. Both
games are indistinguishable which concludes the proof.
C. Secure CHETs
The generic construction is given in Construction 2. This
construction is essentially the one given by Camenisch et
al. [16], but we additionally check whether a hash h is valid
after adaption, and add the two public keys to the hash-
computation, as already done by Krenn et al. [32]. This is
crucial to achieve our strengthened security properties.
Correctness follows from inspection and from the cor-
rectness of the underlying chameleon hash. Public collision
resistance of this construction was already proven in [16]. We
prove the remaining properties below.
Theorem 5. If CH is collision-resistant, then the construction
of a CHET given in Scheme 2 is strongly privately collision-
resistant.
Proof: Assume an adversary A who can break strong
private collision resistance. We can then construct an adversary
B which breaks the collision-resistance of CH.
In particular, the reduction works as follows. B receives
(cid:48) as its own challenge. Note that PPch is implicit
pkch = pkch
in pkch and let q be an upper bound on the number of queries
(cid:48)
to the Hash
CHET-oracle. Our reduction draws a random index
i ← {1, 2, . . . , q}. It
then initializes the adversary A by
supplying PPchet = PPch. For every adaption query j (cid:54)= i,
B generates a new key pair for a CH and proceeds honestly,
storing the corresponding secret and public keys. This does
not change the view of the adversary so far. For the ith query,
however, B embeds pkch
(cid:48) as the public key of the second CH
and for the respective query to the collision ﬁnding oracle
CHET, B proceeds as follows if a collision is to be found
(cid:48)
Adapt
for the embedded challenge: B uses its own oracle to ﬁnd the
collisions for h2, while h1 can be calculated honestly, as for
that the adversary supplies the secret key. If this case happens
can easily be identiﬁed due to the supplied handle. Note, we
always check whether adaption was successful. Clearly, this
15