   (slice0)    Executor memory: 490K bytes.  
   (slice1)    Executor memory: 1213K bytes avg x 48 workers, 1213K bytes max (seg0).  
   (slice2)    Executor memory: 1213K bytes avg x 48 workers, 1213K bytes max (seg0).  
   (slice3)    Executor memory: 497K bytes avg x 48 workers, 497K bytes max (seg0).  Work_mem: 817K bytes max.  
 Statement statistics:  
   Memory used: 128000K bytes  
 Settings:  enable_bitmapscan=off; enable_seqscan=off; optimizer=off  
 Optimizer status: legacy query optimizer  
 Total runtime: 9612.938 ms  
(47 rows)  
```  
相当于以下SQL：  
```  
select t1.c1, t1.c2, t1.cn as c3, t2.cn as c4 from  
(select c1,c2,count(*) cn from (select c1,c2,c3 from tbl group by c1,c2,c3) t group by c1,c2) t1  
join  
(select c1,c2,count(*) cn from (select c1,c2,c4 from tbl group by c1,c2,c4) t group by c1,c2) t2  
on (NOT t1.c1 IS DISTINCT FROM t2.c1 AND NOT t1.c2 IS DISTINCT FROM t2.c2);  
```  
执行计划：  
```  
postgres=# explain analyze select t1.c1, t1.c2, t1.cn as c3, t2.cn as c4 from  
(select c1,c2,count(*) cn from (select c1,c2,c3 from tbl group by c1,c2,c3) t group by c1,c2) t1  
join  
(select c1,c2,count(*) cn from (select c1,c2,c4 from tbl group by c1,c2,c4) t group by c1,c2) t2  
on (NOT t1.c1 IS DISTINCT FROM t2.c1 AND NOT t1.c2 IS DISTINCT FROM t2.c2);  
                                                                                             QUERY PLAN                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Gather Motion 48:1  (slice5; segments: 48)  (cost=0.00..21231.04 rows=316722656 width=24)  
   Rows out:  1002001 rows at destination with 12721 ms to end, start offset by 1253 ms.  
   ->  Hash Join  (cost=0.00..3782.79 rows=6598389 width=24)  
         Hash Cond: NOT postgres.tbl.c1 IS DISTINCT FROM postgres.tbl.c1 AND NOT postgres.tbl.c2 IS DISTINCT FROM postgres.tbl.c2  
         Rows out:  Avg 20875.0 rows x 48 workers.  Max 20914 rows (seg11) with 0.042 ms to first row, 9546 ms to end, start offset by 1272 ms.  
         Executor memory:  816K bytes avg, 817K bytes max (seg11).  
         Work_mem used:  816K bytes avg, 817K bytes max (seg11). Workfile: (0 spilling, 0 reused)  
         ->  HashAggregate  (cost=0.00..1608.86 rows=11731 width=16)  
               Group By: postgres.tbl.c1, postgres.tbl.c2  
               Rows out:  Avg 20875.0 rows x 48 workers.  Max 20914 rows (seg11) with 0.001 ms to first row, 929 ms to end, start offset by 1272 ms.  
               ->  Redistribute Motion 48:48  (slice2; segments: 48)  (cost=0.00..1605.90 rows=11731 width=16)  
                     Hash Key: postgres.tbl.c1, postgres.tbl.c2  
                     Rows out:  Avg 761778.0 rows x 48 workers at destination.  Max 763236 rows (seg1) with 0.004 ms to end, start offset by 1260 ms.  
                     ->  Result  (cost=0.00..1605.31 rows=11731 width=16)  
                           Rows out:  Avg 761778.0 rows x 48 workers.  Max 762979 rows (seg3) with 0.007 ms to first row, 39 ms to end, start offset by 1346 ms.  
                           ->  HashAggregate  (cost=0.00..1605.31 rows=11731 width=16)  
                                 Group By: postgres.tbl.c1, postgres.tbl.c2  
                                 Rows out:  Avg 761778.0 rows x 48 workers.  Max 762979 rows (seg3) with 0.004 ms to first row, 893 ms to end, start offset by 1346 ms.  
                                 ->  HashAggregate  (cost=0.00..1481.27 rows=499828 width=8)  
                                       Group By: postgres.tbl.c1, postgres.tbl.c2, postgres.tbl.c3  
                                       Rows out:  Avg 1320761.3 rows x 48 workers.  Max 1322202 rows (seg3) with 0.003 ms to first row, 6861 ms to end, start offset by 1346 ms.  
                                       ->  Redistribute Motion 48:48  (slice1; segments: 48)  (cost=0.00..1297.74 rows=499828 width=12)  
                                             Hash Key: postgres.tbl.c1, postgres.tbl.c2, postgres.tbl.c3  
                                             Rows out:  Avg 2061921.2 rows x 48 workers at destination.  Max 2064440 rows (seg9) with 1672 ms to end, start offset by 1319 ms.  
                                             ->  HashAggregate  (cost=0.00..1278.97 rows=499828 width=12)  
                                                   Group By: postgres.tbl.c1, postgres.tbl.c2, postgres.tbl.c3  
                                                   Rows out:  Avg 2061921.2 rows x 48 workers.  Max 2062196 rows (seg24) with 3.151 ms to first row, 3654 ms to end, start offset by 1354 ms.  
                                                   ->  Table Scan on tbl  (cost=0.00..465.38 rows=2083334 width=12)  
                                                         Rows out:  0 rows (seg0) with 86 ms to end, start offset by 1464 ms.  
         ->  Hash  (cost=1608.86..1608.86 rows=11731 width=16)  
               Rows in:  (No row requested) 0 rows (seg0) with 0 ms to end.  
               ->  HashAggregate  (cost=0.00..1608.86 rows=11731 width=16)  
                     Group By: postgres.tbl.c1, postgres.tbl.c2  
                     Rows out:  Avg 20875.0 rows x 48 workers.  Max 20914 rows (seg11) with 0.003 ms to first row, 1698 ms to end, start offset by 1272 ms.  
                     ->  Redistribute Motion 48:48  (slice4; segments: 48)  (cost=0.00..1605.90 rows=11731 width=16)  
                           Hash Key: postgres.tbl.c1, postgres.tbl.c2  
                           Rows out:  Avg 761897.3 rows x 48 workers at destination.  Max 763444 rows (seg26) with 94 ms to end, start offset by 1316 ms.  
                           ->  Result  (cost=0.00..1605.31 rows=11731 width=16)  
                                 Rows out:  Avg 761897.3 rows x 48 workers.  Max 762689 rows (seg21) with 0.008 ms to first row, 27 ms to end, start offset by 1316 ms.  
                                 ->  HashAggregate  (cost=0.00..1605.31 rows=11731 width=16)  
                                       Group By: postgres.tbl.c1, postgres.tbl.c2  
                                       Rows out:  Avg 761897.3 rows x 48 workers.  Max 762689 rows (seg21) with 0.004 ms to first row, 1592 ms to end, start offset by 1316 ms.  
                                       ->  HashAggregate  (cost=0.00..1481.27 rows=499828 width=8)  
                                             Group By: postgres.tbl.c1, postgres.tbl.c2, postgres.tbl.c4  
                                             Rows out:  Avg 1320773.6 rows x 48 workers.  Max 1322071 rows (seg20) with 0.004 ms to first row, 6853 ms to end, start offset by 1330 ms.  
                                             ->  Redistribute Motion 48:48  (slice3; segments: 48)  (cost=0.00..1297.74 rows=499828 width=12)  
                                                   Hash Key: postgres.tbl.c1, postgres.tbl.c2, postgres.tbl.c4  
                                                   Rows out:  Avg 2061913.9 rows x 48 workers at destination.  Max 2064793 rows (seg20) with 1657 ms to end, start offset by 1330 ms.  
                                                   ->  HashAggregate  (cost=0.00..1278.97 rows=499828 width=12)  
                                                         Group By: postgres.tbl.c1, postgres.tbl.c2, postgres.tbl.c4  
                                                         Rows out:  Avg 2061913.9 rows x 48 workers.  Max 2062167 rows (seg20) with 0.005 ms to first row, 3001 ms to end, start offset by 1460 ms.  
                                                         ->  Table Scan on tbl  (cost=0.00..465.38 rows=2083334 width=12)  
                                                               Rows out:  0 rows (seg0) with 85 ms to end, start offset by 1479 ms.  
 Slice statistics:  
   (slice0)    Executor memory: 507K bytes.  
   (slice1)    Executor memory: 1253K bytes avg x 48 workers, 1253K bytes max (seg0).  
   (slice2)    Executor memory: 1387K bytes avg x 48 workers, 1387K bytes max (seg0).  
   (slice3)    Executor memory: 1253K bytes avg x 48 workers, 1253K bytes max (seg0).  
   (slice4)    Executor memory: 1387K bytes avg x 48 workers, 1387K bytes max (seg0).  
   (slice5)    Executor memory: 561K bytes avg x 48 workers, 561K bytes max (seg0).  Work_mem: 817K bytes max.  
 Statement statistics:  
   Memory used: 128000K bytes  
 Settings:  enable_bitmapscan=off; enable_seqscan=off; optimizer=on  
 Optimizer status: PQO version 1.602  
 Total runtime: 13975.507 ms  
(65 rows)  
```  
在PostgreSQL的执行计划中，隐藏了两步分组聚合。  
```  
postgres=# explain verbose select c1,c2,count(distinct c3),count(distinct c4) from tbl group by c1,c2;  
                                    QUERY PLAN                                      
----------------------------------------------------------------------------------  
 GroupAggregate  (cost=1217753.56..1292678.56 rows=555000 width=24)  
   Output: c1, c2, count(DISTINCT c3), count(DISTINCT c4)  
   Group Key: tbl.c1, tbl.c2  
   ->  Sort  (cost=1217753.56..1231628.56 rows=5550000 width=16)  
         Output: c1, c2, c3, c4  
         Sort Key: tbl.c1, tbl.c2  
         ->  Seq Scan on public.tbl  (cost=0.00..596041.00 rows=5550000 width=16)  
               Output: c1, c2, c3, c4  
(8 rows)  
```  
## 小结
数据库中有两种手段支持求distinct：   
1、HashAgg，无需排序，数据量较大时需要较大work_mem     
2、GroupAgg，需要排序    
数据量越大，HashAgg效果越明显。   
目前PostgreSQL需要改写SQL来对求distinct实现HashAgg。Greenplum直接支持两种。   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")