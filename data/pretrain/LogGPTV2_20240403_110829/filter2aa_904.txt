云影实验室 
 1 / 12  
.NET 高级代码审计（第一课）XmlSerializer 反序列漏洞 
Ivan1ee@360 云影实验室 
2019 年 03 月 01 日 
云影实验室
 2 / 12  
0X00 前言 
在.NET 框架中的 XmlSerializer 类是一种很棒的工具，它是将高度结构化的 XML 数据
映射为 .NET 对象。XmlSerializer 类在程序中通过单个 API 调用来执行 XML 文档和对
象之间的转换。转换的映射规则在 .NET 类中通过元数据属性来表示，如果程序开发人
员使用 Type 类的静态方法获取外界数据，并调用 Deserialize 反序列化 xml 数据就会
触发反序列化漏洞攻击（例如 DotNetNuke 任意代码执行漏洞 CVE-2017-9822），本
文笔者从原理和代码审计的视角做了相关脑图介绍和复现。 
0X01 XmlSerializer 序列化 
.NET 框架中 System.Xml.Serialization 命名空间下的 XmlSerializer 类可以将 XML 文
档绑定到 .NET 类的实例，有一点需要注意它只能把对象的公共属性和公共字段转换为
XML 元素或属性，并且由两个方法组成：Serialize() 用于从对象实例生成 XML；
Deserialize() 用于将 XML 文档分析成对象图，被序列化的数据可以是数据、字段、数
组、以及 XmlElement 和 XmlAttribute 对象格式的内嵌 XML。具体看下面 demo 
云影实验室 
 3 / 12  
XmlElement 指定属性要序列化为元素，XmlAttribute 指定属性要序列化为特性，
XmlRoot 特性指定类要序列化为根元素；通过特性类型的属性、影响要生成的名称、
名称空间和类型。再创建一个 TestClass 类的实例填充其属性序列化为文件，
XmlSerializer.Serialize 方法重载可以接受 Stream、TextWrite、XmlWrite 类，最终
生成的 XML 文件列出了 TestClass 元素、Classname 特性和其它存储为元素的属性： 
0x02 XmlSerialize 反序列化 
反序列过程：将 xml 文件转换为对象是通过创建一个新对象的方式调用
XmlSerializer.Deserialize 方法实现的，在序列化最关键的一环当属 new 
XmlSerializer 构造方法里所传的参数，这个参数来自 System.Type 类，通过这个类可
以访问关于任意数据类型的信息，指向任何给定类型的 Type 引用有以下三种方式。 
云影实验室
 4 / 12  
2.1、typeof 
实例化 XmlSerializer 传入的 typeof(TestClass) 表示获取 TestClass 类的 Type，
typeof 是 C#中的运算符，所传的参数只能是类型的名称，而不能是实例化的对象，如
下 Demo 
通过 typeof 获取到 Type 之后就能得到该类中所有的 Methods、Members 等信息。
下图运行 Debug 时，弹出消息对话框显示当前成员 Name 的值。 
2.2、object.Type 
在.NET 里所有的类最终都派生自 System.Object，在 Object 类中定义了许多公有和受
保护的成员方法，这些方法可用于自己定义的所有其他类中，GetType 方法就是其中的
一个，该方法返回从 System.Type 派生的类的一个实例，因为可以提供对象成员所属类
的信息，包括基本类型、方法、属性等，上述案例中实例化 TestClass，再获取当前实
例的 Type，如下 Demo 
云影实验室 
 5 / 12  
2.3、Type.GetType 
第三种方法是 Type 类的静态方法 GetType，这个方法允许外界传入字符串，这是重大
利好，只需要传入全限定名就可以调用该类中的方法、属性等 
Type.GetType 传入的参数也是反序列化产生的漏洞污染点，接下来就是要去寻找可以
被用来攻击使用的类。 
0X03 打造攻击链 
首先放上攻击链打造成功后的完整 Demo，这段 Demo 可以复用在任意地方（这里不
涉及.NET Core、MVC），如下图 
只要 XmlSerializer 存在反序列化漏洞就可用下面 Demo 中的内容，涉及到三个主要的
技术点，以下分别来介绍原理。 
3.1、ObjectDataProvider 
ObjectDataProvider 类，它位于 System.Windows.Data 命名空间下，可以调用任意
被引用类中的方法，提供成员 ObjectInstance 用类似实例化类、成员 MethodName
云影实验室
 6 / 12  
调用指定类型的方法的名称、成员 MethodParameters 表示传递给方法的参数，参考
下图 
再给 TestClass 类定义一个 ClassMethod 方法，代码实现调用
System.Diagnostics.Process.Start 启动新的进程弹出计算器。如果用 XmlSerializer
直接序列化会抛出异常，因为在序列化过程中 ObjectInstance 这个成员类型未知，不
过可以使用 ExpandedWrapper 扩展类在系统内部预先加载相关实体的查询来避免异
常错误，改写 Demo 
生成 data.xml 内容如下： 
攻击链第一步就算完成，但美中不足的是因笔者在测试环境下新建的 TestClass 类存在
漏洞，但在生产情况下是非常复杂的，需要寻求 Web 程序中存在脆弱的攻击点，为了
使攻击成本降低肯定得调用系统类去达到命令执行，所以需要引入下面的知识。 
3.2、ResourceDictionary 
ResourceDictionary，也称为资源字典通常出现在 WPF 或 UWP 应用程序中用来在多
个程序集间共享静态资源。既然是 WPF 程序，必然设计到前端 UI 设计语言 XAML。 
XAML 全称 Extensible Application Markup Language (可扩展应用程序标记语言) 基
云影实验室 
 7 / 12  
于 XML 的，且 XAML 是以一个树形结构作为整体，如果对 XML 了解的话，就能很快
的掌握，例如看下面 Demo 
第一个标签 ResourceDictionary，xmlns:Runtime 表示读取 System.Diagnostics
命令空间的名称起个别名为 Runtime 
第二个标签 ObjectDataProvider 指定了三个属性，x:key 便于条件检索，意义不
大但必须得定义；ObjectType 用来获取或设置要创建其实例的对象的类型，并使
用了 XAML 扩展；x:Type 相当于 C#中 typeof 运算符功能，这里传递的值是
System.Diagnostics.Process; MethodName 用来获取或设置要调用的方法的名
称，传递的值为 System.Diagnostics.Process.Start 方法用来启动一个进程。 
第三个标签 ObjectDataProvider.MethodParameters 内嵌了两个方法参数标签，
通过 System:String 分别指定了启动文件和启动时所带参数供 Start 方法使用。 
介绍完攻击链中 ResourceDictionary 后，攻击的 Payload 主体已经完成，接下来通过
XamlReader 这个系统类所提供的 XML 解析器来实现攻击。 
3.3、XamlReader 
XamlReader 位于 System.Windows.Markup 空间下，顾名思义就是用来读取 XAML
文件，它是默认的 XAML 读取器，通过 Load 读取 Stream 流中的 XAML 数据，并返
回作为根对象，而另外一个 Parse 方法读取指定字符串中的 XAML 输入，也同样返回
作为根对象，自然 Parse 方法是我们关心和寻求的。 
云影实验室
 8 / 12  
只需使用 ObjectDataProvider 的 ObjectInstance 方法实例化 XamlReader，再指定
MethodName 为 Parse，并且给 MethodParameters 传递序列化之后的资源字典数
据，这样就可以完成 XmlSerializer 反序列化攻击链的打造。 
0x04 代码审计视角 
从代码审计的角度其实很容易找到漏洞的污染点，通过前面几个小节的知识能发现 序
列化需要满足一个关键条件 Type.GetType，程序必须通过 Type 类的静态方法
GetType，例如以下 demo 
云影实验室 
 9 / 12  
首先创建 XmlDocument 对象载入 xml，变量 typeName 通过 Xpath 获取到 Item 节
点的 type 属性的值，并传给了 Type.GetType，紧接着读取 Item 节点内的所有 Xml
数据，最终交给 Deserialize 方法反序列化，这是一个近乎完美的利用点。再来看笔者
在 github 上收集到的 XmlSerializer 反序列化类：XmlSerializeUtil.cs 
此处值参数类型为 Type，代码本身没有问题，问题在于程序开发者可能会先定义一个
字符串变量来接受传递的 type 值，通过 Type.GetType(string)返回 Type 对象再传递
进 DeserializeXml，在代码审计的过程中也需要关注此处 type 的来源。 
0x05 案例复盘 
最后再通过下面案例来复盘整个过程，全程展示在 VS 里调试里通过反序列化漏洞弹出
计算器。 
1. 
输入 http://localhost:5651/Default?node=root&value=type 加载了远程的
(192.168.231.135) 1.xml 文件 
云影实验室
 10 / 12  
2. 
通过 xmlHelper.GetValue 得到 root 节点下的所有 XML 数据 
3. 
这步最关键，得到 root 节点的 type 属性，并提供给 GetType 方法，
XmlSerializer 对象实例化成功 
云影实验室 
 11 / 12  
4. 
XmlSerializer.Deserialize(xmlReader) 成功调出计算器 
最后附上动图 
0x06 总结 
由于 XmlSerializer 是系统默认的反序列类，所以在实际开发中使用率还是比较高的，
攻击者发现污染点可控的时候，可以从两个维度去寻找利用的点，第一从 Web 应用程
序中寻求可以执行命令或者写 WebShell 的类和方法；第二就是本文中所说的利用
ObjectDataProvider、ResourceDictionary、XamlReader 组成的攻击链去执行命令
或者反弹 Shell ，最后.NET 反序列化系列课程笔者会同步到 
https://github.com/Ivan1ee/ 、https://ivan1ee.gitbook.io/ ，后续笔者将陆续推出
高质量的.NET 反序列化漏洞文章 ，大致课程大纲如下图 
云影实验室
 12 / 12  
欢迎大伙持续关注，交流。