=== 单次上传
最简单的方式是上传一个日志文件，您可以上传一个默认不超过5MB的日志文件，并且每单条日志信息小于1MB（可按需修改后台配置）。假设您上传的测试日志文件每一行是一个事件，如果上传日志的时间戳符合标准格式，日志易将自动解析此事件的时间戳；如果上传日志中没有时间戳或不符合标准时间戳格式，日志易将以收到日志时间作为该事件的时间戳；如果上传日志是日志易识别的日志格式，日志将被自动转化为结构化数据并做全文索引，否则，日志将默认做全文索引。
日志易提供两种方式进行单个文件的上传：
* 基于 HTTP 协议的 POST 上传方式
* 日志易单独提供的桌面客户端
桌面客户端可以在"本地上传"页面的顶部提示栏点击下载可执行程序的压缩包。目前支持 Mac 和 Windows 两种平台。采用桌面客户端方式，比直接使用本地上传页面多出字符集、换行规则、时间戳解析、CSV 解析等高级功能。
image::images/hekagui-select.jpg[]
下载解压以后，需要手动修改其中的 toml 配置文件，填入您使用的 token 和 collector 服务器地址。然后双击程序运行。效果如下:
image::images/hekagui-preview.jpg[]
POST 上传方式则依赖于操作系统所能提供的不同工具。下面分小节介绍。
==== Linux或Mac系统
1.	上传日志
+
粘贴以下命令到终端窗口，然后将本地日志上传到您的帐户。
+
 curl -X POST -T FILE.TXT http://log.rizhiyi.com/bulk/TOKEN/tag/tag_test/appname/app_test
+
其中替换以下变量:
+
* FILE.TXT：需要上传的本地日志文件路径（含文件名）。
* TOKEN：会自动替换成您的用户标识符。
* appname/tag：英文，数字，下划线组成的字符串。不支持中文字符。
+
终端窗口应该提示 "response ok"。
2.	校验
+
使用 "tag:tag_test" 或 "appname:appname_test" 搜索过去半小时的日志，均可以看到结果。如果原始日志的产生时间过早，请扩大搜索的时间范围。
3.	接口说明
+
接口中 "/appname/XX" 部分为可选设置。即下行请求也是合法的：
 curl -X POST -T FILE.TXT http://log.rizhiyi.com/bulk/TOKEN/tag/tag_test
日志易会自动将未明确定义的appname设置为http，以表明该数据来自web上传接口。
==== Windows系统
1.	下载cURL工具
+
使用Windows机器从cURL web站点下载最新版本的cURL。请解压cURL的压缩文件到一个容易访问的目录(例如c:\curl)。
2.	上传日志
+
从开始菜单打开command提示符，然后转换到curl安装目录。
+
 cd c:\curl
+
粘贴以下命令到终端窗口然后运行它，将本地日志上传到您的帐户。
+
 curl -X POST -T FILE.TXT http://log.rizhiyi.com/bulk/TOKEN/tag/test
+
替换以下变量:
* FILE.TXT：需要上传的本地日志文件路径（含文件名）。
* TOKEN：会自动替换成您的用户标识符。
* appname/tag：英文，数字，下划线组成的字符串。不支持中文字符。
3.	校验
+
使用"tag:test" 或 "appname:http" 搜索过去半小时的日志。
=== HTTP上传
日志易 Collector 提供默认为5180端口的 HTTP 接口，接收日志易 Agent 及其他合法来源的数据上传。采用 HTTP 方式直接上传到日志易 Collector 时，必须采用日志易定义的 protobuf 协议（目前日志易采用的是 protobuf-java-2.5.0 jar）。
如果您需要的是非 protobuf 协议的普通字符串 HTTP 上传接口，请参阅稍后 Agent 高级配置介绍中的接收 HTTP 上传章节。
==== Protobuf协议格式说明
单条和批量写入 collector 均采用相同的 protobuf 协议格式：
  message ReqMessage {
    repeated EventInfo reqlist = 1;
  }
其中 `EventInfo` 即单条消息，具体的定义为：
[source]
----
message EventInfo {
    // 域标识，可以从日志易前台查询获取
    optional string token = 1;
    // 主机标识，ip或hostname
    optional string hostname = 2;
    // 表示message的id，如果不填则Server端会自动补上
    optional string message_id = 3;
    // 日志的应用属性
    optional string appname = 4;
    // 读到日志的时间，后续版本中已经被eventTimestamp取代
    // RFC5424要求的格式"2017-06-21T14:34:00.429590+08:00"
    optional string timestamp = 5;
    // 日志的标签属性，多个tag以英文逗号连接
    optional string tag = 6;
    // 日志正文部分
    optional string message = 7;
    // 用于上下文排序，通常设置为当前时钟的纳秒值
    optional int64 contextID = 8;
    // Rizhiyi Agent从日志正文中解析到的时间戳，单位:毫秒，UTC时间
    optional int64 logTimestamp = 9;
    // 读到事件的时间，单位:毫秒，UTC时间
    optional int64 eventTimestamp = 10;
    // 读到事件时，对应事件源的更新时间，单位:毫秒，UTC时间
    optional int64 sourceUpdateTimestamp = 11;
    // 事件源，对于来自于文件的就是文件的完整路径，对于数据库查询就是 SQL 语句
    optional string source = 12;
    //  主机的另一个标识，和 hostname 配合使用
    optional string ip = 13;
}
----
客户端写入数据后，会收到日志易 Collector 返回的 HTTP 响应体。响应体内容的 protobuf 格式如下：
[source]
----
message RspMessage {
   optional int64 result = 1;
   optional string msg = 2;
}
----
日志写入成功时会返回HTTP状态码：200，写入失败时返回非200，并通过http response中的RspMessage返回错误原因，包括：
1. 整个http请求大小超过collector0.sources.sourceHttp.maxChunkSize限制，返回result=500，并在msg中返回错误描述
2. 单条日志大小超过collector0.sources.sourceHttp.proto.maxEventSize限制，返回result=500，并在msg中返回错误描述
3. 集群磁盘剩余空间不足，返回result=500，并在msg中返回错误描述
4. Rizhiyi内部服务错误，返回result=503，并在msg中返回错误描述
==== 客户端请求方式说明
客户端发送数据采用 HTTP 协议的 POST 请求，日志易 Collector 端的 HTTP 接口地址为：
 http://:/proto/?compressed=false
其中：
* ``: collector 模块的 ip 地址
* ``: collector模块的HTTP 监听端口，默认5180
* `compressed`: 如果为true，表示数据发送的是snappy压缩过的数据，为false，表示没有压缩。目前协议只支持snappy压缩，因为snappy的压缩比和压缩性能综合考虑较好。
注意事项：
. proto后面有一个 `/` 符号。
. appname不可为空，tag可以
. token字段不能为空，且必须和日志易前台->设置->用户标识下的token保持一致
. timestamp字段如果为空或者不合法，collector会赋值为collector机器当前时间
. 客户端需要控制单个request的size小于1M，因为collector默认只能处理小于1M的request。(需要调整collector/kafka/logriver的配置来扩大这个限制)
. 目前协议支持protobuf里批量发送多条日志，但是日志条数不能超过collector的配置：`collector0.sources.sourceHttp.proto.maxEventCnt = 10000`
发送日志的简单样例说明：
[source,javascript]
----
{
    "message_id": "AVXsoHpICDRuvNbZw3vs",  // 可以为空，collector会赋默认值
    "timestamp": "2016-08-16T15:36:49+08:00",  // 可以为空，collector会赋默认值
    "hostname": "192.168.1.20",   // 不能为空
    "message": "192.168.1.144 - - [15/Jul/2016:10:51:47 +0800] \"GET /api/v0/search/statis/?order=&page=1&query=*&size=20&sourcegroup=all&sourcegroupCn=%E6%89%80%E6%9C%89%E6%97%A5%E5%BF%97&stat_field=apache.status&stat_method=sum&stat_split_field=apache.clientip&time_range=-1d,now&type=stat HTTP/1.1\" 200 2559 \"dashboard/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36\" \"-\" 0.126 0.126",  // 为空该条日志会被丢掉
    "appname": "yottaself",   // 日志类型，不可为空
    "tag": "test",    // 日志附加描述信息
    "token": "b93036cea8d5a95f0c5b9b3f696d2489",   // 不能为空且必须和日志易前台的用户标识一致
    "contextID":  1536809146917747000  //是一个Long型递增序列，通常设置为当前时钟的纳秒值。可以为空，但建议Client端设置，因为信息会更准确。主要用于上下文查询
}
----
建议联系日志易技术支持索要 `pb-20180711.tgz` 示例代码作为样例参考。