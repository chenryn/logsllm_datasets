ment. Sabre detects this malicious ﬂow when the user sub-
mits the search request because the hidden form ﬁeld that
stores cookies (and is therefore labeled sensitive) is trans-
mitted over the network.
• JSEs with unknown information ﬂows. In addition to
testing Sabre against known instances of malicious ﬂows,
we tested Sabre against 20 popular Firefox JSEs. The goal
of this experiment was to understand the nature of informa-
tion ﬂows in these JSEs and identify suspicious ﬂows.
Our experimental methodology was to enhance the
browser with the JSE being tested and examine any viola-
tions reported by Sabre. We would then determine whether
the violation was because of advertised functionality of the
JSE, in which case we whitelisted the ﬂow using a sink-
speciﬁc declassiﬁcation or endorsement policy, or whether
the ﬂow was indeed malicious. Although we ended up
whitelisting suspicious ﬂows for all 20 JSEs, our results
described below show that information ﬂows in several of
these JSEs closely resemble those exhibited by malicious
extensions, thereby motivating the need for a ﬁne-grained
approach to certify information ﬂows in JSEs.
In our experiments, which are summarized in Figure 4,
we found that the behavior of JSEs in our test suite fell into
ﬁve categories. As Figure 4 illustrates, several JSEs con-
tained a combination of the following behaviors.
(1) Interaction with HTML forms. An HTML form is
a collection of form elements that allows users to submit
information to a particular domain. Example of form el-
ements include login names, passwords and search queries.
While malicious JSEs (e.g., FFsniFF) can steal data by read-
ing form elements, we also found that PwdHash [37] reads
information from form elements.
PwdHash recognizes passwords preﬁxed with a special sym-
bol (“@@”) and customizes them to individual domains to
prevent phishing attacks.
In particular, it reads the pass-
word from the HTML form, transforms it as described in
Section 3.4, and writes the password back to the HTML
form. This behavior can potentially be misused by an un-
trusted JSE, e.g., a malicious JSE could read and mali-
ciously modify form elements when the user visits a banking
website, thereby compromising integrity of banking trans-
actions. Consequently, Sabre marks the HTML form el-
ement containing the password as sensitive, and raises an
alert when the form is submitted. However, because the
information ﬂow in PwdHash is benign, we declassify the
customized password before it is written back to the form,
thereby preventing Sabre from raising an alert.
(2) Sending/receiving data over an HTTP channel. JSEs
extensively use HTTP messages to send and receive data, ei-
ther via XMLHttpRequest or via HTTP channels. For exam-
ple, Web-of-Trust is a JSE that performs an XMLHttpRequest
388
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
JSE
Adblock Plus
All-in-One-Sidebar
CoolPreviews
Download Statusbar
Fast Video Download
Forecastfox
Foxmarks Synchronizer
Ghostery
GooglePreview
Greasemonkey (0.8.1)
NoScript
PDF Download
Pwdhash
SpeedDial
StumbleUpon
Stylish
Tab Mix Plus
User Agent Switcher
Video DownloadHelper
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20. Web-of-Trust
Advertised Functionality of JSE
Prevent page elements, such as ads, from being downloaded
Sidebar control to switch between sidebar panels and view dialog windows
Preview links and images without leaving current page or tab.
Manage downloads from a tidy statusbar
Easy download of video ﬁles from popular sites
Gets weather forecasts from AccuWeather.com
Keeps bookmarks and passwords backed up and synchronized
Alerts user’s about web bugs, ad networks and widgets on webpages
Inserts thumbnails and ranks of web sites into Google search results
Allows users customize webpages with user scripts
Restricts executable content to trusted domains
Tool for handling, viewing and creating Web-based PDF ﬁles
Customizes user passwords to domains to prevent phishing
Easy access to frequently visited websites
Discovers web sites based on user’s interests
Easy management of user styles to enhance browsing experience
Enhances Firefox’s tab browsing capabilities
Switches the user agent of the browser
Tool for web content extraction
Warns users before they interact with a harmful site
1

2










4
5








3





















Behavior key: (1) HTML forms; (2) HTTP channels; (3) File system; (4) Loading URLS; (5) JavaScript events.
Figure 4. Behavior of popular Firefox JSEs categorized as in Section 4.1.
for each URL that a user visits, in order to fetch security rat-
ings for that URL from its server.
While this behavior can potentially be misused by malicious
JSEs to compromise user privacy by exposing the user’s
surﬁng patterns, we allowed the XMLHttpRequest in Web-
of-Trust by declassifying the request.
(3) Interaction with the ﬁle system. With the exception
of two JSEs, the rest of the JSEs in our test suite interacted
with the ﬁle system. For example, Video DownloadHelper
and Greasemonkey download content from the network on
to the ﬁle system (media ﬁles and user scripts, respectively),
while ForecastFox reads user preferences, such as zip codes,
from the ﬁle system and sends an XMLHttpRequest to receive
weather updates from accuweather.com.
Both these behaviors can potentially be misused by mali-
cious JSEs, to download malicious ﬁles on the host and steal
conﬁdential data, such as user preferences. However, we al-
lowed these ﬂows by endorsing the ﬁle system write oper-
ation in Video DownloadHelper and Greasemonkey and by
declassifying the XMLHttpRequest in ForecastFox.
(4) Loading a URL. Several JSEs, such as SpeedDial and
PDF Download, monitor user activity (e.g., keystrokes, hy-
perlinks clicked by the user) and load a URL based upon
this activity. For example, PDF Download, which converts
PDF documents to HTML ﬁles, captures user clicks on hy-
perlinks and sends an XMLHttpRequest to its home server to
get a URL to a mirror site. It then constructs a new URL by
appending the mirror’s URL with the hyperlink visited by
the user, and loads the newly-construced URL in a new tab.
Similar behavior can potentially be misused by a JSE,
e.g., to initiate a drive-by-download attack by loading an un-
trusted URL. However, for PDF Download, we endorsed the
JavaScript statements that load URLs in the JSEs that we
tested, thereby preventing Sabre from raising an alert.
(5) JavaScript events. Unprivileged JavaScript code on a
web page can communicate with privileged JavaScript code
(e.g., code in JSEs) via events. In particular, JSEs can listen
for speciﬁc events from scripts on web pages.
We found one instance of such communication in the Stylish
JSE, which allows easy management of CSS styles for web
sites. A user can request a new style for a web page, in
389
response to which the JSE opens a new tab with links to var-
ious CSS styles. When the user chooses a style, JavaScript
code on web page retrieves the corresponding CSS style and
throws an event indicating that the download is complete.
Stylish captures this event, extracts the CSS code, and opens
a dialog box for the user to save the ﬁle.
Sabre raises an alert when the user saves the ﬁle. This is
because Sabre assigns a low integrity label to JavaScript
code on a web page; in turn the event thrown by the code
also receives this label. Sabre reports an integrity viola-
tion when the JavaScript code in Stylish handles the low-
integrity event and attempts to save data on to the ﬁle sys-
tem (a high-integrity sink). Nevertheless, we suppressed the
alert by endorsing this ﬂow.
Sabre provides detailed traces of JavaScript execution for
oﬄine analysis. We used these traces in our analysis of JSEs
to determine whether an information ﬂow was benign, and
if so, determine the bytecode instruction and the JavaScript
object at which to execute the declassiﬁcation/endorsement
policy. Although this analysis is manual, in our experience,
it only took on the order of a few minutes to determine where
to place declassiﬁers.
As the examples above indicate, several benign JSEs ex-
hibit information ﬂows that can possibly be misused and
must therefore be analyzed and whitelisted.
It is impor-
tant to note that each of these information ﬂows exhibited
real behaviors in JSEs. Because such behaviors may possi-
bly be misused by malicious JSEs, determining whether to
whitelist a ﬂow is necessarily a manual procedure, e.g., of
studying the high-level speciﬁcation of the JSE to determine
if the behavior conforms to the speciﬁcation.
To evaluate the precision of Sabre, we also studied
whether it reported any other instances of ﬂows from sensi-
tive sources to low-sensitivity sinks, i.e., excluding the ﬂows
that were whitelisted above. We used a Sabre-enhanced
browser for normal web browsing activity over a period of
several weeks. During this period Sabre reported no viola-
tions. We found that Sabre’s policy of reporting an informa-
tion ﬂow violation only when an object is modiﬁed by a JSE
was crucial to the precision of Sabre.
The analysis above shows that benign JSEs often con-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
tain information ﬂows that can potentially be misused by
malicious JSEs. These results therefore motivate a secu-
rity architecture for JSEs in which JSE vendors explicitly
state information ﬂows in a JSE by supplying a declassiﬁca-
tion/endorsement policy for conﬁdentiality/integrity violat-
ing ﬂows. This policy must be approved by the user (or a
trusted third party, such as addons.mozilla.org, that pub-
lishes JSEs) when the JSE is initially installed and is then
enforced by the browser.
It is important to note that this architecture is agnostic
to the code of a JSE and only requires the user to approve
information ﬂows. In particular, the declassiﬁcation policy
is decoupled from the code of the JSE is enforced by the
browser. As a result, only ﬂows whitelisted by the user will
be permitted by the browser, thereby signiﬁcantly constrain-
ing conﬁdentiality and integrity violations via JSEs. This
architecture also has the key advantage of being robust even
in the face of attacks enabled by vulnerabilities in the JSE.