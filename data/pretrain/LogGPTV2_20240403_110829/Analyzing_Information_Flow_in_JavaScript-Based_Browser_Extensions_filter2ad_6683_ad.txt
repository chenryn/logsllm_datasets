### Detection of Malicious Flows by Sabre

Sabre identifies malicious flows when a user submits a search request. This is because the hidden form field, which stores cookies and is marked as sensitive, is transmitted over the network.

### Testing Sabre Against Known and Unknown Information Flows

In addition to testing Sabre against known instances of malicious flows, we evaluated it against 20 popular Firefox JSEs (JavaScript Extensions). The goal was to understand the nature of information flows in these JSEs and identify any suspicious activities.

#### Experimental Methodology

Our approach involved enhancing the browser with the JSE under test and monitoring for any violations reported by Sabre. We then determined whether the violation was due to the advertised functionality of the JSE, in which case we whitelisted the flow using a sink-specific declassification or endorsement policy. If the flow was deemed malicious, we took appropriate action. Although all 20 JSEs required whitelisting, our results showed that several of these JSEs exhibited information flows similar to those of malicious extensions, highlighting the need for a fine-grained approach to certify information flows in JSEs.

### Categorization of JSE Behaviors

In our experiments, summarized in Figure 4, we found that the behavior of JSEs in our test suite fell into five categories:

1. **Interaction with HTML Forms**:
   - An HTML form is a collection of form elements that allow users to submit information to a specific domain. Form elements include login names, passwords, and search queries.
   - Malicious JSEs, such as FFsniFF, can steal data by reading form elements. However, PwdHash, a benign JSE, also reads form elements but customizes passwords to prevent phishing attacks.
   - PwdHash reads the password from the HTML form, transforms it, and writes it back. This behavior, while benign, could be misused by an untrusted JSE. Sabre marks the HTML form element containing the password as sensitive and raises an alert when the form is submitted. To prevent false alerts, we declassify the customized password before it is written back to the form.

2. **Sending/Receiving Data Over HTTP Channels**:
   - JSEs use HTTP messages to send and receive data, either via XMLHttpRequest or HTTP channels.
   - For example, Web-of-Trust performs an XMLHttpRequest for each URL visited to fetch security ratings from its server. While this behavior could be misused to compromise user privacy, we allowed the XMLHttpRequest in Web-of-Trust by declassifying the request.

3. **Interaction with the File System**:
   - Most JSEs in our test suite interacted with the file system. For instance, Video DownloadHelper and Greasemonkey download content (media files and user scripts, respectively) from the network to the file system.
   - ForecastFox reads user preferences from the file system and sends an XMLHttpRequest to receive weather updates. These behaviors can be misused by malicious JSEs to download malicious files or steal confidential data. We endorsed the file system write operations in Video DownloadHelper and Greasemonkey and declassified the XMLHttpRequest in ForecastFox.

4. **Loading URLs**:
   - Several JSEs, such as SpeedDial and PDF Download, monitor user activity (e.g., keystrokes, hyperlinks clicked) and load URLs based on this activity.
   - PDF Download, which converts PDF documents to HTML files, captures user clicks on hyperlinks and sends an XMLHttpRequest to get a URL to a mirror site. It then constructs a new URL and loads it in a new tab.
   - This behavior can be misused to initiate drive-by-download attacks. For PDF Download, we endorsed the JavaScript statements that load URLs, preventing Sabre from raising an alert.

5. **JavaScript Events**:
   - Unprivileged JavaScript code on a web page can communicate with privileged JavaScript code (e.g., in JSEs) via events.
   - For example, Stylish, which allows easy management of CSS styles, opens a new tab with links to various CSS styles. When the user chooses a style, JavaScript code on the web page retrieves the CSS style and throws an event indicating the download is complete. Stylish captures this event, extracts the CSS code, and opens a dialog box for the user to save the file.
   - Sabre raises an alert when the user saves the file due to the low integrity label assigned to the JavaScript code on the web page. We suppressed the alert by endorsing this flow.

### Analysis and Whitelisting

Sabre provides detailed traces of JavaScript execution for offline analysis. We used these traces to determine whether an information flow was benign and, if so, where to execute the declassification/endorsement policy. Although this analysis is manual, it typically takes only a few minutes to determine the appropriate placement of declassifiers.

### Precision of Sabre

To evaluate Sabre's precision, we used a Sabre-enhanced browser for normal web browsing over several weeks. During this period, Sabre reported no violations. Sabre's policy of reporting an information flow violation only when an object is modified by a JSE was crucial to its precision.

### Conclusion

The analysis shows that benign JSEs often contain information flows that can potentially be misused by malicious JSEs. This motivates the need for a security architecture where JSE vendors explicitly state information flows by supplying a declassification/endorsement policy for confidentiality and integrity-violating flows. This policy must be approved by the user (or a trusted third party like addons.mozilla.org) when the JSE is initially installed and enforced by the browser. This architecture is agnostic to the JSE code and robust against attacks enabled by vulnerabilities in the JSE.