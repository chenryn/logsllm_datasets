the number of queries that match the records with posi-
tions ski1 , ski2 , . . . , skij . We ﬁrst show how to set p2 to
8This procedure ensures that we receive the correct posi-
tions, up to reﬂection, when all the records lie on either the
ﬁrst or second half of the domain.
If n = N
Algorithm RO:
1. (ˆi1, . . . ,ˆin) ←$ GetOrderO
2.
3.
4. Else
5.
6.
Return (ˆi1, . . . ,ˆiN )
( ˆskˆi1
Return ( ˆskˆi1
, . . . , ˆskˆin
) ←$ GetDistO(ˆi1, . . . ,ˆin)
, . . . , ˆskˆin
)
Oracle O:
1. q ←$ QueryGen
2. L ← Laccess(q, sk1, . . . , skn)
3. Return L
Algorithm GetOrderO:
1. For k = 1 to p1 do: Lk ←$ O
2. Let L(cid:48) be a query result s.t. |L(cid:48)| = n − 1
3, ˆi1 ← [n] \ L(cid:48)
4. For j = 2 to n do:
5.
6.
7. Return (ˆi1, . . . ,ˆin)
Let L(cid:48) be a query result of the form L(cid:48) = {ˆi1, . . . ,ˆij−1} ∪ {k}
ˆij ← k
← minz, z ∈ argminz |A/p2 − 2z(N − z + 1)/(N (N + 1))|
If A 
2ski1 (N − ski1 + 1)
N (N + 1)
+ 
≤ e
−2p22
(cid:20)
(cid:21)
and similarly for the lower bound. Above, to calculate the
expectation of A1, we use the fact that the probability that
a uniformly random query q[a,b] satisﬁes ski1 ∈ [a, b] is
2ski1 (N − ski1 + 1)
N (N + 1)
since for any a ≤ ski1 there are N − ski1 + 1 values for b
satisfying ski1 ∈ [a, b]. Thus, we set e−2p22
= δ. Solving
for p2 we get p2 = O(N 4 log N ) as desired.
A similar argument shows that when p2 = O(N 4 log N )
the probability of Ej given E1 is inverse polynomial prob-
ability for each j ≥ 2, using the fact that the subsequent
p2 queries after the ﬁrst p2 queries are independently sam-
pled (GetDistO:line 4).
In the argument we can take say
δ = O(1/N 2) (instead of simply any inverse polynomial as
above) so that the overall expression in Equation 5 is inverse
polynomial as desired.
D. OPTIMALITY OF OUR ATTACKS
Here we show that our reconstruction attacks are nearly
optimal. Namely, we show that for an outsourced database
system for range queries, there are two datasets D1 and
D2 such that an adversary needs to observe Ω(N 4) uni-
formly chosen queries to distinguish whether D1 or D2 is
outsourced. This bound holds for either Laccess or Lcomm
leakage functions.
Theorem D.1. Let the output of QueryGen be uniform.
Then there is a distribution databaseGen such that no out-
sourced database system for range queries is fully recon-
structable w.r.t. databaseGen, QueryGen, Lsetup, Lquery
with O(N 4) queries, where Lsetup is arbitrary and Lquery
includes Lcomm.
4
(N +1)2
Proof. Let D1 and D2 be equal-sized databases where in
D1 all records lie at position sk1 = (N + 1)/2, and in D2 all
records lie at sk2 = sk1 + 1 (assume N is odd). With both
databases, an adversary can observe see exactly two types of
queries: those that return all records record and those that
return no records.
The total number of diﬀerent queries is T = N (N + 1)/2.
In case of D1 the number of non-empty queries is T1 =
and hence the probability of observing a non-empty
query is p = T1/T . In case of D2 the probability to receive
a non-empty query p + δ where δ = 1/T .
Consider a setting where the database is chosen to be
D1 or D2 with equal probability before the adversary be-
gin observing queries. The adversary’s a priory belief is
that the database is D1 or D2 with equal probability. Af-
ter observing each query answer, the adversary updates her
belief. Let Pr[D1|a1, a2, . . . , ai] be the posterior probability
the database is D1, and Pr[D2|a1, a2, . . . , ai] be the posterior
probability the database is D2, after observing i queries.
Writing the log-ratio of the posterior probabilities and us-
ing Bayes rule we can describe how the adversary’s conﬁ-
/* Recover distances and actual values */
Algorithm RO:
/* Construct u */
1. u ← ConstructUO
2. d ← ConstructDO(u, N U LL, 0)
3. ˆsk1 ← d[0]
4. For j = 2 to n do:
5.
6. Return ( ˆsk1, . . . , ˆskn)
Oracle O:
1. q ←$ QueryGen
2. C ← Lcomm(q, sk1, . . . , skn)
3. Return C
ˆskj ← ˆskj−1 + d[j − 1]
Algorithm ConstructUO():
1. For k = 1 to p do:
Uk ←$ O
2.
u[Uk] ← u[Uk] + 1
3.
4. Return u · N (N +1)
2·p1
For k = 1 to N/2 do
Return d
If m ≤ n/2
If m = n and(cid:80)m
For l = 1 to N − k + 1 do
Algorithm ConstructDO(u, d, m):
1.
i=0 d[i] = N + 1
2.
3.
4.
5.
6.
7.
8.
9.
10. Else
11.
12.
ConstructDO(u, d, m + 1)
d[m] ← k
d[n − m] ← l
If(cid:80)m
If(cid:80)m
ConstructDO(u, d, m + 1)
i=0 (d[i] · d[n − (m − i)]) = u[n − m]
i=0 (d[i] · d[n − (m − i)]) = u[n − m]
Figure 5: Brute-force reconstruction algorithm
dence whether the database is D1 or D2 evolves:
Ci = log
= log
(cid:19)
· Pr[ai|D1]
Pr[ai|D2]
Pr[D2|a1, a2, . . . , ai−1]
(cid:18) Pr[ai|D1]
Pr[D1|a1, a2, . . . , ai]
Pr[D2|a1, a2, . . . , ai]
(cid:18) Pr[D1|a1, a2, . . . , ai−1]
(cid:19)
(cid:16)
Pr[ai|D2]
= Ci−1 + log
= Ci−1 + stepi.
(cid:17)
(cid:17)
(cid:16)
Thus, C0, C1, . . . describes a random walk on the real
line where C0 = 0 and an empty observed query corre-
sponds to a (positive) stepi = − log
and a non-
empty observed query corresponds to a (negative) stepI =
− log
. We analyze this random walk in the case
where the database is D1 to show a lowerbound on the num-
ber of steps needed to reach Ci > C for constant C. (A
similar analysis holds when the database is D2.) We get
1 − δ
1−p
1 + δ
p
− log
 − log
(cid:19)
(cid:19)
δ
p
∈
∈
(cid:16)
(cid:16)
(cid:17)
(cid:17)
1 + δ
p
1 − δ
1−p
(cid:20) δ
(cid:20) −δ
p
− δ2
p2 ,
−
stepi =
(cid:18)
(cid:18)
log
1 +
1 − δ
w.p. p
w.p. 1 − p
(cid:21)
δ
p
δ2
Using
(7)
log
1 − p
(1 − p)2 ,
1 − p
p(1−p) ≤ 16
N 4 . Hence, 0 ≤
we get that 0 ≤ E[stepi] ≤ δ2
N 4 . Note that Ci − E[Ci] is a martingale with
E[Ci] ≤ 16i
C0 = E[Ci] = 0 and ∆ = 8
√
N 2 . Using Equation (4) we
i log N/N 2] ≤ e− log2 N/2. We
get that Pr[|Ci − E[Ci]| > 64
conclude that, except with negligible probability, Ci < C
unless i = ˜Ω(N 4).
(6)
(cid:21)
−δ
1 − p
E. BRUTE-FORCE ALGORITHM UTILIZ-
ING THE COMMUNICATION VOLUME
LEAKAGE
The factorization procedure for our attack using the com-
munication volume leakage may be slow for large datasets.
This is due to the fact that factorizing a polynomial takes
O(n3) time (e.g., Berlekamp algorithm [6]), where n is the
degree of the polynomial, i.e, the number of records in our
setting. As such, we design a brute force algorithm that
checks all the possible combinations of di’s in order to de-
termine the correct values, while pruning values that cannot
be the answer.
Speciﬁcally, algorithm RO in Figure 5 determines all the
di’s, which are used to determine all the ski’s as follows.
Initially, it constructs vector u (RO:line 1), which holds the
ui’s, by executing ConstructUO. After computing u, RO
passes it as argument to ConstructDO (RO:line 2), which de-
termines vector d that holds the di’s. Each time, ConstructDO
computes pairs of feasible values d[m] and d[n− m], and for
each pair, it ﬁnds all the feasible values for d[m + 1] and
d[n− m− 1], and so on (ConstructDO:lines 3-9). Essentially,
the algorithm builds a tree of height n/2, where each path
represents a possible vector d. Then, it checks which of these
paths can be an actual solution (ConstructDO:lines 11-12),
and returns one of them (ConstructDO:lines 1-2). Finally,
RO computes the ˆski’s (RO:lines 3-5), and returns them
(RO:line 6).
m − 1] that satisfy(cid:80)m+1
Although we do not have any formal guarantees about the
running time of the algorithm, it prunes many candidates at
every step, because, for some accepted values of d[m] and
d[n − m], there are no integer values of d[m + 1] and d[n −
i=0 (d[i] · d[n − (m − i)]) = u[n − m].
Our experiments showed that our attack runs in milliseconds
even for domains of size N = 365 and thousands of records.