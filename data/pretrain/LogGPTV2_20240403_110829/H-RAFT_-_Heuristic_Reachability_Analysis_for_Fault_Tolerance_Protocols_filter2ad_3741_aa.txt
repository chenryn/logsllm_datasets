title:H-RAFT - Heuristic Reachability Analysis for Fault Tolerance Protocols
Modelled in SDL
author:Sabine M. B&quot;ohm
H-RAFT - Heuristic Reachability Analysis for Fault Tolerance Protocols
Modelled in SDL
Sabine M. B¨ohm
University of Duisburg-Essen, Germany
PI:EMAIL
Abstract
Design ﬂaws of fault tolerance techniques may lead to
undesired consequences in particular fault cases under very
special operating conditions. Such rare ”fault tolerance
holes” may be very difﬁcult to reveal. This paper presents
a novel approach directing the analysis towards potential
weaknesses in a fault tolerance technique. A new algo-
rithm based on special heuristics performs partial reacha-
bility analysis of SDL models describing fault-tolerant com-
munication. It aims at ﬁnding violations of fault tolerance
properties in an efﬁcient way. The approach does not re-
quire knowledge of the model under investigation. The new
algorithm is evaluated by experiments with realistic proto-
cols - including a large model of an industrial system - and
compared to the performance of known solutions.
1. Introduction
With the growing complexity of todays communication
protocols the task of checking fault tolerance properties is
becoming a real challenge. Achieving adequate coverage
by formal veriﬁcation and hardware test-cases is much too
time consuming [17, 16]. Thus veriﬁcation through model
validation is of increasing interest (e.g. [18]). Furthermore,
model checking [7, 20, 5] can be applied at a very early
stage of protocol development. With complex protocols,
the state space during reachability analysis [1] of the mod-
els will most certainly grow too large to be explored com-
pletely. In [6] a method has been presented to reduce the
state space signiﬁcantly without loss of information by ap-
plying partial ordering techniques. Despite this reduction,
the remaining state space may be still too large to be in-
vestigated exhaustively in adequate time and with the main
memory usually available. In [12] heuristic algorithms for
petri net models [3] have been proposed to select a portion
of state space that can most likely assumed to be of inter-
est. The approach presented there is focused on pure safety
techniques.
We consider general fault tolerance protocols to achieve
safety, reliability and/or availability and concentrate on
communicating timed automata. As modeling language we
chose the Speciﬁcation and Description Language (SDL)
[13] which is widely used for modeling protocols of
telecommunication applications (e.g. [15]) and has been
recommended for validation of large-scale industrial sys-
tems [2]. Nevertheless, our heuristic can be transferred to
other languages describing communicating timed automata
as well.
Fault tolerance (and other) properties of a protocol can be
checked by performing reachability analysis on the state
space of the model. The resulting graph is analogous to
a tree if the edges representing reconvergences are not con-
sidered. The leaves of that tree are global states where either
all processes have terminated, no progress can be made, i.e.
no transition may ﬁre and model time may not advance, or
all transitions would result in reconvergences.
The most popular tool for reachability analysis of SDL
models is the “TelelogicTau Suite” − more commonly
known as SDT [19]. It provides validation algorithms based
on depth-ﬁrst traversal of the global states constituting the
reachability graph:
Exhaustive Exploration. The
exhaustive validation
method performs a complete depth-ﬁrst traversal of the
reachability graph if time and memory restrictions allow
for it. Once a reconvergence is detected on a path, that
path is not pursued any further. The exhaustive algorithm
requires a large amount of main memory as all global states
need to be kept. Global states in SDT are deﬁned by the
current local states of all processes, their variable values,
active timers and input queues.
Bitstate Exploration. The bitstate algorithm of SDT is
deﬁned based on the exhaustive algorithm. Instead of com-
paring complete global states for reconvergence detection,
a hash code is computed for each global state and only the
hash codes are compared. Identical hash values are assumed
to be reconvergences. To decrease the chances for collisions
in the hash table, two different hash functions are used and
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
a reconvergence is assumed if both functions lead to colli-
sions.
Random Exploration. The random algorithm in SDT is
basically a set of simulation runs. A single path from the
root to a leaf or to a reconvergence is generated. The path
is created by randomly selecting each next transition to be
ﬁred. The algorithm can be repeated for a speciﬁed number
of times. There is no guarantee that each path is generated
only once.
If the state space is too large to be explored completely,
depth-ﬁrst algorithms may provide a small dispersion only.
While part of the reachability graph, maybe representing
very similar protocol behaviour, is explored in-depth, other
parts may not be touched within the time and memory
limits. Thus, purely depth-ﬁrst algorithms may not be a
good choice. Figure 1(a) gives an exemplary illustration.
States that have been explored so far are represented by
black circles. Unvisited states are depicted as white circles.
(a) Example for Rare Disper-
sion in Depth-ﬁrst Traversal.
(b) Example Snapshot of a
Reachability Graph Generated
by H-RAFT.
Figure 1. Depth-ﬁrst and H-RAFT Traversal.
Breadth-ﬁrst algorithms guarantee optimal dispersion.
Yet, a weakness of the fault tolerance mechanism may be
located deeply within the graph. Thus, purely breadth-ﬁrst
traversal is not suitable either.
The novel H-RAFT algorithm for Heuristic Reachability
Analysis for Fault Tolerance protocols allows a more so-
phisticated walk through the reachability graph. The traver-
sal is targeted speciﬁcally at ﬁnding fault tolerance viola-
tions. It is not limited to speciﬁc fault tolerance algorithms,
but exploits typical fault tolerance properties.
Organization of the Paper. Section 2 introduces the H-
RAFT algorithm and its weight functions. An evaluation
comparing the novel algorithm to the (slightly improved)
standard algorithms is presented in section 3. A very large
model of an industrial system serves as the basis for eval-
uation. Section 4 contains a summary and future research
directions.
2. H-RAFT Algorithm
The H-RAFT algorithm is similar to the exhaustive al-
gorithm. Reconverges will result in not exploring the path
further. The partial exploration variant of the exhaustive
algorithm through applying the bitstate method results in
cutting paths arbitrarily. The criteria for further exploration
of a path in H-RAFT is more sophisticated. It is based on
a heuristic for transition selection through off-line weight-
calculations. It allows for chosing the next transition from
all global states explored so far (i.e. from the black circles
in ﬁg.1(b)).
Which transition should be chosen next? The perfect
algorithm would chose the transition that continues a path
leading to a fault tolerance violation. Unfortunately, it is
usually impossible to know a priori which path will lead
to such a violation and whether such a path exists at all.
By applying heuristics for selecting the next transition to
be executed we aim at increasing the probability of ﬁnding
such a path. There are two general approaches on how to
explore the state space:
1. Execute all active transitions of a global state. For the
resulting global states, check which ones look “more
suspicious” than the others. Continue with the states
looking most suspicious and discard the others and so
on. The advantage of this approach is the solid base of
information being available for taking a decision. The
drawback is the time and memory being “wasted” by
executing transitions that are discarded afterwards.
2. Deﬁne a “suspicion-measurement” (e.g. a weight) for
all active transitions. This measurement could be
based on criteria like “in this transition a lot of send
operations are performed”, or “a timer expires” etc.
These criteria are runtime-independent. Thus,
the
weight of a transition can be computed off-line and is
valid for all explorations of the model. Unlike in the
ﬁrst approach transitions with low weights are (possi-
bly) not executed at all, thus saving time and memory.
For the H-RAFT algorithm we combine the two approaches
achieving a ﬂexible selection method. Selection of the tran-
sition to be ﬁred next is done in a two-step process:
1. A global state snext of the already explored state space
stateSpacecurr is selected as the state the next transi-
tion will be chosen from.
2. The next transition trnext is selected from the set of
active transitions within snext (i.e. the transition must
be able to ﬁre in state si). We call the set of active
transitions in state si activeT Rset(si).
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
The advantage of this two-step selection method is that efﬁ-
cient off-line computation of transition weights can be com-
bined with valuable runtime information.
The heuristic for the ﬁrst step, i.e. selecting snext, is intro-
duced in section 2.1. Section 2.2 focusses on heuristics for
choosing trnext in the second step.
2.1. Global State Selection
Global state selection in H-RAFT is also based on
weights. As global states are runtime objects, their weights
have to be determined during runtime. Several criteria may
be considered for weight calculation (as explained in this
section):
• Number of yet not visited local states;
• Transition priorities;
• Depth of the global state within the reachability graph;
• Current model time;
• User-deﬁned criteria based on model knowledge.
Local States. Each global state will differ in (at most) one
local state from its predecessor in the reachability graph.
Transitions resulting in the same local state after execu-
tion can already be considered in the transition weight (sec.
2.2). This information is available during off-line analysis.
Whether a local state has not been visited throughout the
reachability graph explored so far, is rather a criterion for a
coverage algorithm and thus will not be considered for the
global state weight equation in the current H-RAFT algo-
rithm. The goal can be summarized: Coverage of the static
model states.
Transition Priorities. Transition priorities/weights ex-
press the assumed chances of the transition being on a path
leading to a fault tolerance mechanism violation. Thus,
transition weights should give priority to speciﬁc fault ef-
fects and properties of fault tolerance techniques. In partic-
ular, timing and non-determinism should be expressed by
the weights (see sec. 2.2).
concurrent operations in the system exist, depth increases
quickly. One solution for enforcing some depth is to include
the depth of the global state in its weight calculation.
Current Model Time. Advancing model time may reﬂect
the expiration of a timer, the use of computation time, the
omission of an action due to a faulty component etc. Thus, it
must be considered an important factor w.r.t. fault tolerance
protocols. This criterion can be applied at transition level
already and thus need not be included in the global state
weight explicitely (see section 2.2: transition input element
“timestep”).
User-deﬁned Criteria. Although user-deﬁned criteria
provide additional information that may be helpful for the
selection, we refrain from including this factor into the
weight selection as it requires in-depth knowledge of the
model. This conﬂicts with our goal of making H-RAFT an
algorithm that refrains from requiring knowledge of the
model semantics.
As model time will be covered by transition weights, the
global state weight will be based on the transition weight.
Additionally, we provide means to ensure exploration of
deep parts of the reachability graph.
Equation 1 deﬁnes the basic global state weight equation
wState(si) for any global state si based on transition
weights only:
wState(si) =
max
trj∈activeT Rset(si )
{wT rans(trj)},
(1)
where wT rans(trj) denotes the weight of transition trj
(see sec. 2.2).
Equation 1 formalizes that the global state weight is set to
the highest weight of its active transitions.
In order to ensure a minimum exploration depth, we will
not add the state’s depth as a factor to equation 1 directly.
Instead we will restrict the width of the reachability graph.
Thus, depth can be guaranteed with minimum computation
overhead.
Depth of the Global State. Complex model behaviour
may lead to deep state spaces, especially if the model is ﬁne-
grained. Algorithms not exploring the state space depth-
ﬁrst imply a potential weakness of not being able to reach
those depths. Fault tolerance violations may be located
deeply in the graph. Some depth may be introduced if
events occur sequentially and are repeated several times due
to a fault. However, regarding only a single, or a few rep-
etitions may be sufﬁcient as more repetitions will not al-
ter the resulting faulty behaviour. Yet, if dependencies to
Width Restriction. Two criteria for width restrictions of
the reachability graph can be distinguished:
• Restriction on a level of the reachability graph. Where
the level of a transition trj is deﬁned by the distance of
trj from the root. An example is shown in ﬁgure 2(a).
• Restriction on the front of the reachability graph, i.e.
states being in stateSpacecurr,act. For an example see
ﬁgure 2(b).
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
We deﬁne
stateSpacecurr,act =
(2)
{si|si ∈ stateSpacecurr ∧ activeT Rset(si) (cid:3)= ∅},
the set of global states comprising active transitions.
stateSpacecurr denotes the state space explored so far.
Figure 2(a) shows an example for a level restriction. The
black circles indicate the states already explored. White
circles show (currently) unexplored states. The grey circles
represent the states on the current level. Grey states marked
with a black X refer to states that will not be considered any
further due to the width restriction. The weight associated
with each state is given in italics. For better readability, only
the weights for the states on the current level are depicted.
In ﬁgure 2(b), a snaphot of a front-exploration is depicted.
Here, grey circles indicate states on the current front. Again,
the states marked with a black X refer to states within the
current front, that are excluded from further exploration due
to the width restriction.
Basically, front-restriction is implemented by retaining
only the global states with the highest weights within
stateSpacecurr,act. Independent of whether level or front
4
3
1
X
4
7
2
4
4
1
X
7
for
(a) Example
restriction, Width=4.
Level-
for