部门抽调人力参与团队轮值值班工作。此外，还可以停止该SRE团队的一切新增运维工
为了避免这一点，负责运维这个服务的团队必须有足够的时间编程，否则他们就会被
Google的解决之道：SRE
L5
<
---
## Page 48
8
过多，那么每个问题就不可能被详细调查清楚，运维工程师甚至没有时间从中学习。如
确地处理故障、恢复服务，并且要撰写一份事后报告。如果一次轮值过程中处理的问题
急事件。这个准则保证了on-call工程师有足够的时间跟进紧急事件，这样SRE可以正
SRE处理运维工作的一项准则是：在每8~12小时的on-call轮值期间最多只处理两个紧
都认同这个模式，认同50%的安全线的重要性，才会共同努力避免这种情况的发生。
激励研发团队设计、构建出不需要人工干预、可以自主运行的系统。只有整个产品部门
队的运维工作压力降低到50%以下为止。在实践中，这种措施实际形成了一个良性循环，
加入到轮值on-call体系中共同承担轮值压力等。这些暂时性措施应该一直持续到运维团
将生产环境中发现的Bug和产生的工单转给研发管理人员去分配，或者将开发团队成员
如果有必要的话，采取一些暂时性措施将过多的运维压力转移回开发团队处理。例如
余时间花在研发项目上。在实践中，SRE管理人员应该经常度量团队成员的时间分配
上文已经讨论过，Google将SRE团队的运维工作限制在50%以内。SRE团队应该将剩
确保长期关注研发工作
下面这几小节具体描述了GoogleSRE的几个核心方法论。
发和运维工作的平衡。
部门、最终用户进行有效沟通。这些准则和规范能够帮助每一个SRE部门保持良好的研
规定了 SRE是如何操作Google生产环境的，也规定了 SRE如何和产品研发部门、测试
划与管理。SRE管理层针对这些内容制定了一套完整的沟通准则和行事规范，这些规范
性改进，延迟优化，性能优化，效率优化，变更管理，监控，紧急事务处理以及容量规
SRE团队都有一套共同的核心方法论。一般来说，SRE团队要承担以下几类职责：可用
虽然每个SRE团队都有自己的工作流程、优先级定义以及日常工作规范，但是所有的
SRE方法论
些特别的扩展。
管理结构和人员安排。同时，SRE是DevOps模型在Google的具体实践，带有一
我们可以认为DevOps是SRE核心理念的普适版，可以用于更广范围内的组织结构，
件工程手段执行运维任务等。这些思想与许多SRE的核心思想和实践经验相符合。
与产品设计和开发过程结合起来，着重强调自动化而不是人工操作，以及利用软
这个单词的具体意义仍在不断改变中。这个名词的核心思想是尽早将IT相关技术
DevOps这个名词是在2008年年末流行起来的，截止到本书写作时（2016年初）
第1章介绍
DevOps还是SRE？
---
## Page 49
个基本模型建立起来之后，许多常见的战术策略，例如灰度发布、1%AB测试等就全说
想情况下，我们应该使用错误预算来最大化新功能上线的速度，同时保障服务质量。这
错误预算可以用于什么范畴呢？研发团队需要用这个预算上线新功能，吸引新用户。理
品的创新等任何事情。
这意味着产品研发部门和SRE部门可以在这个范围内将这个预算用于新功能上线或者产
就是“1-可靠性目标”。如果一个服务的可靠性目标是99.99%，那么错误预算就是0.01%。
公司的商业部门或者产品部门必须建立起一个合理的可靠性目标。一旦建立，“错误预算”
而是一个产品问题。要回答这个问题，必须考虑以下几个方面：
如果100%不是一个正确的可靠性目标，那么多少才是呢？这其实并不是一个技术问题，<9
系统变为100%可靠也并不能给用户带来任何实质意义上的好处。
在99.999%和100%之间的区别基本上成为其他系统的噪声。就算我们花费巨大精力将
WiFi、网络提供商和输电线路等），这些系统综合起来可靠性要远低于99.999%。所以，
的（详见附录A）。从最终用户到服务器之间有很多中间系统（用户的笔记本电脑、家庭
地追求100%可靠。因为对最终用户来说，99.999%和100%的可用性是没有实质区别
并不适用于心脏起搏器和防抱死刹车系统等）。一般来说，任何软件系统都不应该一味
“错误预算”起源于这样一个理念：任何产品都不是，也不应该做到100%可靠（显然这
形式可能是间接的。在SRE模型中，我们选择正面面对这种矛盾，使用的工具是错误预算，
最主要的矛盾就是迭代创新的速度与产品稳定程度之间的矛盾。正如上文所说，其表现
产品研发部门和SRE之间可以通过消除组织架构冲突来构建良好的合作关系。在企业中
在保障服务SLO的前提下最大化迭代速度
标是尽早发现和堵住漏洞，而不是通过流程去绕过和掩盖它们。
原因，预防或者优化的解决方案。Google的一项准则是“对事不对人”，事后总结的目
中的漏洞。事后总结应该包括以下内容：事故发生、发现、解决的全过程，事故的根本
果一个产品事故没有触发警报，那么事后总结的意义可能更大：因为它将揭示监控系统
所有的产品事故都应该有对应的事后总结，无论有没有触发警报。这里要注意的是，如
能就是浪费时间。
如果一个项目的紧急警报非常少，能够持续稳定运行，那么保持这么多on-call工程师可
果小规模部署下还无法做到合理报警，规模扩大之后这个情况就会更严重。相对而言，
服务的可靠程度是否会影响用户对这项服务的使用模式？
·基于用户的使用习惯，服务可靠性要达到什么程度用户才会满意？
如果这项服务的可靠程度不够，用户是否有其他的替代选择？
SRE方法论
---
## Page 50
8
在“运维手册（playbook）”上通常可以使MTTR降低3倍以上。初期几个万能的工程
时，我们也发现与“船到桥头自然直”的态度相比，通过事先预案并且将最佳方法记录
故障发生，也要比事事都需要人工干预的系统可用性更高。当不可避免地需要人工介入
任何需要人工操作的事情都只会延长恢复时间。
评价一个团队将系统恢复到正常情况的最有效指标，就是MTTR。
可靠性是MTTF（平均失败时间）和MTTR（平均恢复时间）的函数（参见文献[Sch15]）。
应急事件处理
日志（logging）
工单（ticket）
紧急警报（alert）
一个监控系统应该只有三类输出。
要用户执行某种操作时，才需要通知用户。
是错误的。监控系统不应该依赖人来分析警报信息，而是应该由系统自动分析，仅当需
出现情况或者监控值超过阈值就触发E-mail警报。但是这样的报警策略并不是非常有效：
略值得着重讨论。最普遍的和传统的报警策略是针对某个特定的情况或者监控值，一旦
监控系统是SRE团队监控服务质量和可用性的一个主要手段。所以，监控系统的设计策
监控系统
队通过协作共同管理它。
一次“生产事故”不再是一件坏事，而仅仅是创新流程中一个不可避免的环节，两个团
障业务服务可靠性需求的同时尽可能地加快功能上线速度。这个改动虽小，意义却很大。
SRE团队的目标不再是“零事故运行”，SRE团队和产品研发团队目标一致，都是在保
一个需要人工阅读邮件和分析警报来决定目前是否需要采取某种行动的系统从本质上就
通过引进“错误预算”的概念，我们解决了研发团队和SRE团队之间的组织架构冲突。
得通了。这些战术性手段都是为了更合理地使用整个服务的错误预算。
时使用。正确的做法是平时没人会去主动阅读日志，除非有特殊需要。
平时没有人需要关注日志信息，但是日志信息依然被收集起来以备调试和事后分析
决目前的情况，但是如果一个用户在几天内执行这项操作，系统不会受到任何影响。
意味着接受工单的用户应该执行某种操作，但是并非立即执行。系统并不能自动解
或者是避免即将发生的问题。
意味着收到警报的用户需要立即执行某种操作，目标是解决某种已经发生的问题，
第1章介绍
一个可以自动恢复的系统即使有更多的
---
## Page 51
同时，这也意味着SRE需要主导资源部署的过程。
因为服务容量对可用性来说是极为重要的，很自然的，SRE应该主导容量规划的过程。
容量规划有几个步骤是必需的：
业推广，以及其他商业因素在内)。
使用量上升，资源用量也上升），也需要包括一些非自然增长的因素（新功能的发布、商
意识和计划去满足这个要求。一个业务的容量规划，不仅仅要包括自然增长（随着用户
未来需求。这里并没有任何特别的概念，但是我们发现行业内有许多团队根本没有这个
需求预测和容量规划简单来说就是保障一个业务有足够的容量和余度去服务预测中的
需求预测和容量规划
提高。
以及对大量重复性劳动的关注疲劳所影响。于是，变更执行的速度和安全性同时得到了
这三点可以有效地降低变更给SRE和最终用户带来的时间成本和服务质量的下降。通过
佳实践是使用自动化来完成以下几个项目：
SRE的经验告诉我们，大概70%的生产事故由某种部署的变更而触发。变更管理的最
变更管理
上，同时通过“Wheelof Misfortune”等项目2不断培训团队成员。
问题的人是不可或缺的。因此，Google SRE将大部分工作重心放在“运维手册”的维护
是在巨大的时间压力和产品压力下，运维手册中记录的清晰调试步骤和分析方法对处理
工程师才是正确之路。虽然不论多么完备的“运维手册”也无法替代人的创新思维，但
师的确可以解决生产问题，但是长久看来一个手持“运维宝典”经过多次演习的on-call
一个Google内部模拟灾难恢复的演习项目，参见第28章的“故障处理分角色演示”一节。
·必须有一个准确的自然增长需求预测模型，需求预测的时间应该超过资源获取的
）必须有周期性压力测试，以便准确地将系统原始资源信息与业务容量对应起来
?
规划中必须有准确的非自然增长的需求来源的统计。
时间。
当出现问题时，安全迅速地回退改动
迅速而准确地检测到问题的发生。
采用渐进式发布机制。
SRE方法论
6
---
## Page 52
10
注3第31章的“沟通：生产会议”一节会详细讨论这是如何发生的。
想要了解更多关于SRE相关的信息，请阅读本书的其余部分。
Google SRE 代表了对行业现存管理大型复杂服务的最佳实践的一个重要突破。由一个简
小结
务增加容量和提升效率了。注3
够的容量。SRE和产品研发团队应该共同监控和优化整个系统的性能，这就相当于给服
系统此时的延迟已经是无穷大了。SRE的目标是根据一个预设的延迟目标部署和维护足
样的。当负载到达临界线的时候，一个逐渐变慢的系统最终会停止一切服务。换句话说，
软件系统一般来说在负载上升的时候，会导致延迟升高。延迟升高其实和容量损失是一
率提升（但是并非全部）。
同时可以改进软件以提升资源使用效率。通过这三个因素能够大幅度推动一个服务的效
和软件的资源使用效率。SRE可以通过模型预测用户需求，合理部署和配置可用容量，
个服务的容量配置策略，进而改进其资源利用率，这可以非常有效地降低系统的总成本。
通常依赖于这个服务的工作方式以及对容量的配置与部署上。如果能够通过密切关注一
置，因此SRE也必须承担起任何有关利用率的讨论及改进。因为一个服务的利用率指标
高效地利用各种资源是任何赢利性服务都要关心的。因为SRE最终负责容量的部署和配
效率与性能
对比较危险的操作，必须要小心谨慎地执行。
列测试，确保新上线的容量可以正确地服务用户。因此，新资源的部署与配置是一个相
需要大幅度修改现有的集群配置（配置文件、负载均衡、网络等），同时还要执行一系
就仍然处于不可用状态。增加现有容量经常需要启动新的实例甚至是整个集群，这通常
是非常昂贵的。而且这个部署和配置的过程必须要确保能够正确地执行完毕，否则资源
部署和配置必须能够非常迅速地完成，而且仅仅是在必要的时候才执行，因为资源通常
资源的部署（provisinging）是变更管理与容量规划的结合物。在我们的经验里，资源的
资源部署
一个业务总体资源的使用情况是由以下几个因素驱动的：用户需求（流量）、可用容量
第1章介绍
---
## Page 53
物理服务器上可以运行任何类型的软件服务器。Google并不会使用专门的物理服务器运
软件服务器（server）
物理服务器（machine）
服务器和软件服务器的概念，我们在全书中都采用了以下两种说法。
的供电系统、制冷系统、网络系统以及计算机硬件（参见文献[Bar13]）。和一般的服务
Google的大部分计算资源都存放在自主设计的数据中心中。这些数据中心拥有自己设计
硬件