peer to which the crawler is connected to, “synced_headers”
is the height of blockchain header at which the crawler has
synchronized with the node, and “inight” is the block that
the node is relaying to the crawler.
3.2 Data Collection System
We deployed eight crawlers in the Bitcoin network to connect with
all the reachable nodes. At each crawler, we mounted a NodeJS
implementation of the RPC client-server module for data collection
and analysis. We also set up a node manager that (1) connected
to all the crawlers, (2) provided them the list of IP addresses to
connect with, (3) obtained the JSON data from each crawler, (4)
applied techniques to identify the mining nodes, and (5) measured
the block propagation patterns at specied intervals to monitor the
network synchronization. In ve weeks, we connected to 36,360
unique IP addresses, including 29,477 IPv4, 6,391 IPv6, and 522
Tor addresses.5 Figure 2 provides an illustration of our data col-
lection system in the context of Bitcoin peer-to-peer network. We
connected to the reachable nodes in the network and whenever a
mining pool released a block in the reachable space, our crawlers
marked that node and measured the network synchronization. Sup-
plementary details on data collection are provided in §C.
4 IDENTIFYING THE MINING NODES
Prior works have used block INV messages to detect mining nodes [3].6
For our experiments, we used the Bitcoin RPC API to sample the
network information and developed Heuristic 1 to detect the min-
ing nodes. We also validated the correctness of Heuristic 1 using
direct network monitoring.
The Bitcoin RPC API command getblockchaininfo provides infor-
mation about the latest block on the blockchain tip. We deployed a
socket listener at the RPC client-side implementation to record the
arrival of a new block from a mining node. When a new block was
received, it generated an interrupt on the listener which invoked
the getpeerinfo API. The getpeerinfo renders the up-to-date interac-
tions with all connected peers. A sample interaction with one peer
is shown in Figure 3 and the key variables to note are “addr”, “last-
srecv”, “synced_headers”, “synced_blocks”, and “inight.” “addr” is
5We found that at any time, there were up to ⇡10K reachable nodes. Therefore, the
dierence between the total number of nodes we connected (⇡36K) and the maxi-
mum number of nodes reachable at any time (⇡10K) indicates a churn which was
predominantly observed among the non-mining nodes.
6An INV message is an announcement of a new block or a transaction by a node to all
its connected nodes. In response, the connected nodes may send a GETDATA message
to request for the transaction or the block, corresponding to the INV message. The
CMPCTBLOCK method is a recent technique [8] that reduces delay incurred in the
INV and GETDATA exchange (see Figure 11 for details).
Session 4A: Modeling Blockchains and Distributed LedgersCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea992Figure 4: Results obtained by applying Heuristic 1 on our
dataset. The histograms show the percentage of blocks con-
tributed by mining nodes. We mask the last two octets to pre-
serve anonymity. The subplot is the CDF showing the distri-
bution of IP addresses with respect to the blocks produced.
to VPi
the connected peer’s IP address, “lastrecv” is the latest UNIX times-
tamp at which the peer relayed any information, “synced_headers”
is the last block header message sent by the peer, “synced_blocks”
is the last block INV message sent by the peer, and “inight” is the
block relayed by the peer. Viewed through the lens of our ideal
world functionality (Figure 1), “synced_blocks” renders the view
VPi
of a peer Pi with the chain tip at C. An update on the tip
C
C + 1 is captured by “synced_headers”. Using this information, we
developed Heuristic 1 to detect the mining nodes.
Heuristic 1. For a peer Pi, when the blockchain view is updated
from VPi
C+1, if the “synced_headers” value and the
C
inight value are equal to C +1, then the “addr” value is the mining
node Pi 2 M’s IP address.
Heuristic 1 is a mapping between the information exposed by
the RPC API and the Bitcoin network trac of a crawler. For more
clarity on Heuristic 1, revisit Figure 3 that shows a sample inter-
action of a crawler connected to peers in N with its blockchain tip
C = 570366 (“synced_blocks”=570366). When the crawler receives
an update “570367” from getblockchaininfo, it checks the informa-
tion of all its connected peers using getpeerinfo. One information
sample of a connected peer is shown in Figure 3. For each peer, the
crawler checks if “synced_headers” value is 570367 (C + 1). When
the mining node relays a block, the “inight” value is also set to
C + 1. The example in Figure 3 shows that the “inight” value is
“570367,” hence the “addr” is the node’s IP address.
Results. We applied Heuristic 1 to detect the mining nodes. A
summary of results is reported in Figure 4. To preserve anonymity of
the mining nodes, we mask the last two octets of their IP addresses.
Overall, we discovered 359 mining nodes. Among them, 250 (69.6)%
were IPv4, 34 (9.47%) were IPv6, and 75 (20.89)% were Tor addresses.
Our results indicate that mining pools use Tor to shield their nodes
from routing attacks [2]. Among the 359 mining nodes, 31 nodes
produced 80% blocks, and 67 nodes produced 90% blocks.
As discussed in §2, due to the mining centralization, there are
a few mining pools that mine the Bitcoin blockchain. Therefore,
the number of full nodes hosted by those mining pools (|M|) is less
than the total number of full nodes (|N|) in the network. In 2014,
Miller et al. [26] conducted a measurement study, reporting ⇡100
mining nodes controlled by 8 mining pools. Simply extrapolating
the measurements in [26] to the number of dominant mining pools
Figure 5: CDF of synchronized nodes reported from our
measurements and Bitnodes dataset. Our results show that
in ⇡9.98 minutes on average, only 39.43% of the connected
nodes synchronized on the blockchain. Bitnodes dataset
shows that on average, only 52.24% nodes had an up-to-date
blockchain at any time. In both cases, the results are dier-
ent from the expected ideal functionality.
at the time of conducting our study (25 [33, 40]), an estimation
for |M| would be 313 (=100⇥25/8). As such, the number of mining
nodes discovered in our experiments (i.e., |M|= 359) is close to the
expected number through extrapolation (i.e., 313).7
5 NETWORK SYNCHRONIZATION
After identifying the mining nodes, we analyzed the network com-
munication model to validate its compliance with the ideal world
functionality. Our main objective was to understand if the block
propagation pattern of the mining nodes varies based on their
network reachability. As such, variance in the block propagation
pattern deviates from the communication model specied in the
ideal functionality (Figure 1), which can be exploited to curate new
attack strategies. In this section, we rst report a high level overview
of network synchronization observed in our experiments, followed
by a demonstrative example that shows that block propagation
pattern varies in the real world Bitcoin network.
For a high level overview of network synchronization, we ana-
lyzed the interaction between our crawlers and the nodes to which
they were connected. To preserve the common prex property, the
inter-arrival time between two blocks must be long enough to allow
all nodes to synchronize on the blockchain [13]. In terms of the
ideal functionality (Figure 1), when a new block bi+1 is released, if
any node Pi 2 N queries its connected peers, it must observe the
previous block (bi) on the blockchain tip of all connected peers. To
evaluate this synchronization property, we use Heuristic 2 below.
Heuristic 2. When a crawler receives a new block bi+1 from a
mining node, the crawler checks VPi
for all connected peers in
C
N. For a connected peer Pi, if the blockchain tip C = bi (the previous
block), then Pi is synchronized with an up-to-date blockchain view.
If C < bi, then the peer exhibits a weak synchronization.
To elaborate on Heuristic 2, we again refer to Figure 3. When
our crawler received the new block 570367 (bi+1) from the mining
node, the “synced_blocks” value was 570366 (bi). This means that
before sending the new block, the mining node’s blockchain tip
7Mining nodes detection not only contributes to the HashSplit attack but also lowers
the cost of launching other partitioning attacks [3, 36], which we discuss in §D.
18.188.x24.5.x138.197.x104.237.x13.229.xdvu.tor178.128.x188.166.xul3.tor167.99.x69.64.x83.251.xvcs.tor35.158.x3r4.tor13.229.x[2a02::x]169.55.xfz6.torxag.tor142.93.x[2a01::x]vev.tor70.70.xjjs.tor149.28.xpvw.tor146.255.x[2002::x]ep2.torIPAddressesofMiningNodes0.02.55.07.510.0PercentageofBlocks0100200300IPAddresses(Count)0.81.0CDF020406080PercentageofSynchronizedNodes0.00.20.40.60.81.0CDFBitnodesMeasurementsµ=0.52OurMeasurementsµ=0.39Session 4A: Modeling Blockchains and Distributed LedgersCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea993was 570366 (C = bi). Hence, the mining node had synchronized
with an up-to-date blockchain. Similarly, at the time of receiving
the new block 570367, the crawler expected all its connected peers
to have the “synced_blocks” value 570366 in order to satisfy strong
synchronization. If the value of “synced_blocks” was found to be
less than 570366 (i.e., 570365), the peer was noted to exhibit weak
synchronization. The “synced_blocks” value of all connected peers
was obtained from the RPC API. We sampled this information every
time we received a block from a mining node. As a result, for all
the connected nodes, we were able to observe the percentage of
nodes that synchronized with an up-to-date blockchain.
We plot the CDF of synchronized nodes in Figure 5, showing
a weak network synchronization. We observed that the average
block time was ⇡9.98 minutes during which only 39.43% nodes had
the synchronized blockchain. Moreover, compared to the measure-
ments in prior works [10, 36] (details in §E), our results indicate
that the network synchronization has changed with time.
Result Validation. Given a surprisingly weak network synchro-
nization observed at our crawlers, we decided to validate ournd-
ings by crawling recent data from Bitnodes (October 2020 to De-
cember 2020). In Figure 5, we plot results from the Bitnodes dataset
which also highlights the issues with network (on average, 52.2%
of the nodes have a synchronized blockchain at any time). In §E,
we further elaborate on the aspects of weak synchronization. It is
reasonable to assume that the weak synchronization could increase
the number of blockchain forks. Unsurprisingly, 34 forks have been
observed on the blockchain since January 2020.8 9
5.1 Bitcoin Network Asynchrony
Exploiting the block propagation pattern to violate the blockchain
consistency has been extensively studied in prior works [10, 22, 41].
The most commonly referenced theoretical model in this context is
by Pass et al. [32] in which they analyzed the Bitcoin blockchain
consistency in the non-lock-step synchronous network. The non-
lock-step synchronous network allows an adversary to delay the
block by a parameter ∆, giving the adversary a head start mining
advantage. Pass et al. [32] assumed that after ∆, all the mining
nodes simultaneously receive a block to start the next round. More
precisely, they assumed that all honest miners “freeze” and do not
start mining until all miners receive the block. Although, Pass et
al. [32] called their model “asynchronous,” however, Ren et al. [34]
showed that the model is actually non-lock-step synchronous.
Ren et al. [34] further specied that an asynchronous model
is weaker than the non-lock-step synchronous model, allowing an
adversary to maintain a public fork for k blocks. In light of our
ideal world functionality, a prerequisite to that model would be that
the mining nodes (1) receive blocks at dierent times, and (2) do
not form M ⇥ M topology. In this section, we show that these two
8The observed variations in synchronization can also occur due to the rules deployed in
the current Bitcoin RPC implementation shown in Figure 3. Since tailoring the default
RPC implementation (i.e., by not forwarding blocks to connected peers) can have ethical
implications, therefore, we instead used the RPC implementation as provisioned in
the protocol and reported results. Assuming that the RPC implementation results may
vary from the actual network synchronization, that again highlights that measuring
and mapping the network synchronization remains largely an open problem.
9Forks can be counted by (1) running a full node and executing getchaintips command,
or (2) using the ChainQuery’s full node and executing getchaintips command [5].
Figure 6: Block propagation pattern of two nodes (Ma and
Mb 2 M), sampled at one second interval. Note that Ma’s
block reaches |M|/2, |M|, |N|/2, and |N| at 2, 6, 30, and 76 sec-
onds, respectively. In contrast, Mb’s block reaches the same
set of nodes at 52, 58, 90, and 140 seconds respectively. Ma
has a reachability advantage over Mb
observations can be made in the current Bitcoin network, thus satis-
fying the notion of “asynchrony” established in [34]. In §6, we will
further demonstrate how the adversary exploits the asynchronous
network to maintain a fork by orchestrating concurrent mining on
two branches of the public chain.
Block Propagation Among Mining Nodes. To validate that
mining nodes receive blocks at dierent times and do not form M ⇥
M topology, we conducted a short experiment to precisely study the
block propagation among the mining nodes. For this experiment, we
executed the getpeerinfo command at one second interval, allowing
us to monitor the time at which the block appeared in the network
and the time at which each connected node reported it to us.
.
In our second experiment, we observed that the mining nodes
received blocks at dierent times, which clearly shows that the
network is not non-lock-step synchronous in practice. Moreover,
we also noted that the block propagation pattern for each mining
node varied, demonstrating variations in their network reachability
(i.e., the number of connected peers). 10
To further highlight the aforementioned observations, we present
an example from our experiment in Figure 6, showing block propa-
gation for two nodes (Ma and Mb 2 M). Figure 6 shows that when
Ma released the block, within 2 seconds, the block reached |M|/2,
and within 6 seconds, the block reached |M|. Moreover, within 76
seconds, the block reached ⇡90% of all the connected nodes |N|. In
contrast, when Mb released the block, the block took 52 seconds
to reach |M|/2 and 58 seconds to reach |M|. The block took 140
seconds to reach ⇡90% of all the connected nodes |N|.
From the analysis above, we derived the following conclusions.
(1) The current Bitcoin network is neither lock-step synchronous [13]
nor non-lock-step synchronous [22, 32, 41]. (2) The block propaga-
tion pattern suggests that the mining nodes do not form a com-
pletely connected M ⇥ M topology.11 The mining nodes topology
10The observation regarding non-uniform block propagation patterns can also be
veried on Bitnodes website, although without the knowledge of the mining nodes.
The data on the website shows that some nodes report the block arrival in a few
seconds. However, no two block propagation patterns are the same.
11Prior work [26] also reported that that mining nodes do not have a high network
outdegree and they typically follow the standard node congurations. Ourndings
are consistent with the prior work.
020406080100120140Time(seconds)020406080NodeswithBlocks(%)MbMa0100510Session 4A: Modeling Blockchains and Distributed LedgersCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea994Study
Decker et al. [10]
Saad et al. [36]
Natoli et al. [30]
Apostolaki et al. [3]
Heilman et al. [19]
HashSplit
Requirement Branches
49% Hash Rate Two or More
30% Hash Rate Two or More
Two or More
One
One
5%
–
–
26% Hash Rate Two or More
Network Disruption
7
7
3