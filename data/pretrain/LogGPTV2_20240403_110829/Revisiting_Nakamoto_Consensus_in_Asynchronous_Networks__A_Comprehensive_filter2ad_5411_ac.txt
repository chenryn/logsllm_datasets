### 3.2 Data Collection System

We deployed eight crawlers in the Bitcoin network to connect with all reachable nodes. Each crawler was equipped with a NodeJS implementation of the RPC client-server module for data collection and analysis. Additionally, we set up a node manager that performed the following tasks:
1. Connected to all the crawlers.
2. Provided each crawler with a list of IP addresses to connect to.
3. Collected JSON data from each crawler.
4. Applied techniques to identify mining nodes.
5. Measured block propagation patterns at specified intervals to monitor network synchronization.

Over five weeks, our system connected to 36,360 unique IP addresses, including 29,477 IPv4, 6,391 IPv6, and 522 Tor addresses. At any given time, there were approximately 10,000 reachable nodes, indicating a significant churn, predominantly among non-mining nodes. Figure 2 illustrates our data collection system within the context of the Bitcoin peer-to-peer network.

Whenever a mining pool released a block, our crawlers marked the node and measured the network synchronization. Supplementary details on data collection are provided in §C.

### 4. Identifying the Mining Nodes

Previous studies have used block INV messages to detect mining nodes [3]. For our experiments, we utilized the Bitcoin RPC API to sample network information and developed Heuristic 1 to detect mining nodes. We also validated the correctness of Heuristic 1 using direct network monitoring.

The `getblockchaininfo` command provides information about the latest block on the blockchain tip. We deployed a socket listener at the RPC client-side implementation to record the arrival of a new block from a mining node. When a new block was received, it generated an interrupt on the listener, which invoked the `getpeerinfo` API. The `getpeerinfo` command renders up-to-date interactions with all connected peers. Key variables to note include:
- `addr`: The connected peer’s IP address.
- `lastrecv`: The latest UNIX timestamp at which the peer relayed any information.
- `synced_headers`: The last block header message sent by the peer.
- `synced_blocks`: The last block INV message sent by the peer.
- `inight`: The block relayed by the peer.

Heuristic 1: For a peer \( P_i \), when the blockchain view is updated from \( V_{P_i}^C \) to \( V_{P_i}^{C+1} \), if the `synced_headers` value and the `inight` value are equal to \( C + 1 \), then the `addr` value is the mining node \( P_i \in M \)'s IP address.

Heuristic 1 maps the information exposed by the RPC API to the Bitcoin network traffic of a crawler. For example, when the crawler receives an update "570367" from `getblockchaininfo`, it checks the information of all its connected peers using `getpeerinfo`. If the `synced_headers` value is 570367 (C + 1) and the `inight` value is also 570367, the `addr` is the node's IP address.

**Results:**
- We applied Heuristic 1 to detect 359 mining nodes.
- Among them, 250 (69.6%) were IPv4, 34 (9.47%) were IPv6, and 75 (20.89%) were Tor addresses.
- Our results indicate that mining pools use Tor to shield their nodes from routing attacks [2].
- 31 nodes produced 80% of the blocks, and 67 nodes produced 90% of the blocks.

### 5. Network Synchronization

After identifying the mining nodes, we analyzed the network communication model to validate its compliance with the ideal world functionality. Our main objective was to understand if the block propagation pattern of the mining nodes varies based on their network reachability. Variance in the block propagation pattern deviates from the communication model specified in the ideal functionality, which can be exploited to curate new attack strategies.

**High-Level Overview of Network Synchronization:**
- We analyzed the interaction between our crawlers and the nodes they were connected to.
- To preserve the common prefix property, the inter-arrival time between two blocks must be long enough to allow all nodes to synchronize on the blockchain [13].
- We used Heuristic 2 to evaluate this synchronization property.

Heuristic 2: When a crawler receives a new block \( b_{i+1} \) from a mining node, it checks \( V_{P_i}^C \) for all connected peers in \( N \). For a connected peer \( P_i \), if the blockchain tip \( C = b_i \) (the previous block), then \( P_i \) is synchronized with an up-to-date blockchain view. If \( C < b_i \), then the peer exhibits weak synchronization.

**Results:**
- We observed that the average block time was approximately 9.98 minutes, during which only 39.43% of nodes had a synchronized blockchain.
- Compared to prior works [10, 36], our results indicate that network synchronization has changed over time.
- We validated our findings by crawling recent data from Bitnodes (October 2020 to December 2020), which showed that, on average, 52.2% of the nodes have a synchronized blockchain at any time.

### 5.1 Bitcoin Network Asynchrony

Exploiting the block propagation pattern to violate the blockchain consistency has been extensively studied in prior works [10, 22, 41]. The most commonly referenced theoretical model in this context is by Pass et al. [32], who analyzed the Bitcoin blockchain consistency in a non-lock-step synchronous network. This model allows an adversary to delay the block by a parameter \( \Delta \), giving the adversary a head start mining advantage. However, Ren et al. [34] showed that this model is actually non-lock-step synchronous.

**Block Propagation Among Mining Nodes:**
- We conducted an experiment to study block propagation among mining nodes by executing the `getpeerinfo` command at one-second intervals.
- We observed that mining nodes received blocks at different times, indicating that the network is not non-lock-step synchronous in practice.
- The block propagation pattern varied, demonstrating differences in network reachability.

**Example:**
- In Figure 6, we show block propagation for two nodes (Ma and Mb \( \in M \)).
- Ma's block reached \( |M|/2 \) within 2 seconds, \( |M| \) within 6 seconds, and approximately 90% of all connected nodes \( |N| \) within 76 seconds.
- Mb's block took 52 seconds to reach \( |M|/2 \), 58 seconds to reach \( |M| \), and 140 seconds to reach approximately 90% of all connected nodes \( |N| \).

**Conclusions:**
1. The current Bitcoin network is neither lock-step synchronous [13] nor non-lock-step synchronous [22, 32, 41].
2. The block propagation pattern suggests that mining nodes do not form a completely connected \( M \times M \) topology, consistent with prior work [26].

### Study Comparison

| Study                | Requirement | Branches       |
|----------------------|-------------|----------------|
| Decker et al. [10]   | 49% Hash Rate | Two or More    |
| Saad et al. [36]     | 30% Hash Rate | Two or More    |
| Natoli et al. [30]   | -           | One            |
| Apostolaki et al. [3]| 5%          | One            |
| Heilman et al. [19]  | 26% Hash Rate | Two or More    |

This table compares the requirements and branches needed for various studies on blockchain attacks.