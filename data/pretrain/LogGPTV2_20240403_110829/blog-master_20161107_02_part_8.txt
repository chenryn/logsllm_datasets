               __uint64_t   u64;
           } epoll_data_t;
           struct epoll_event {
               __uint32_t   events;      /* Epoll events */
               epoll_data_t data;        /* User data variable */
           };
```
难道用了同一个fd?  
## cpuset隔离后的性能
使用cgroup cpuset子系统，将CPU核数限定到15个左右，性能从7.6万提升到了10万tps  
15个核应该是我这个测试CASE，MUTEX锁以及其他的数据库开销达到的一个均衡状态，性能最佳。当核数再增加时，性能反而下降，可能是多个CPU核之间的MUTEX锁开销放大的原因。    
```
总共64HT的机器  
#numastat
                           node0
numa_hit              4372456435
numa_miss                      0
numa_foreign                   0
interleave_hit            216742
local_node            4372456435
other_node                     0
yum install -y libcgroup
mkdir -p /cgroup/cpuset
mount -t cgroup -o cpuset cpuset /cgroup/cpuset
cd /cgroup/cpuset
echo 0 > cpuset.mems
# 因为numastat只输出一个node0
mkdir r1
cd r1
echo "1-15" > cpuset.cpus
echo 0 > cpuset.mems
echo 1 > cpuset.cpu_exclusive
echo 1 > cpuset.memory_migrate
ps -ewf|grep postgres实例1主进程PID|grep -v grep|awk '{print "echo "$2" > tasks"}'
加入tasks
重新跑。  
但是使用这种方法，多实例依旧无法再次提升性能，从现象来看，当参与LOCK的CPU总数超出15时性能就会下滑。     
cd /cgroup/cpuset
mkdir r2
cd r2
echo "16-30" > cpuset.cpus
echo 0 > cpuset.mems
echo 1 > cpuset.cpu_exclusive
echo 1 > cpuset.memory_migrate
ps -ewf|grep postgres实例2主进程PID|grep -v grep|awk '{print "echo "$2" > tasks"}'
以上为两个实例的情况，参与LOCK的CPU核数为30，性能下滑到7万多。
或者这样，使用共享CPU的多实例，参与LOCK的CPU总数保持在15个，同样也只能达到10万左右的inesrt only tps。  
cd /cgroup/cpuset
mkdir r1
cd r1
echo "1-15" > cpuset.cpus
echo 0 > cpuset.mems
echo 0 > cpuset.cpu_exclusive
echo 1 > cpuset.memory_migrate
cd /cgroup/cpuset
mkdir r2
cd r2
echo "1-15" > cpuset.cpus
echo 0 > cpuset.mems
echo 0 > cpuset.cpu_exclusive
echo 1 > cpuset.memory_migrate
```
### 参考  
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/sec-cpuset.html  
多线程unblock thread( pthread_cond_broadcast )可能更加高效。     
https://docs.oracle.com/cd/E19455-01/806-5257/sync-40617/index.html  
http://pubs.opengroup.org/onlinepubs/9699919799/nframe.html  
## 另外几组测试
### 环境描述
一主2备，要求至少一个副本落盘。    
### test case  
记录每组测试的perf,profile,cpu,io,mem,net    
sysbench , insert only     
### 测试了7组
1\. 单机单实例，副本在异机    
测试4组 sync=off,local,remote_write,on    
测试小结  
remote_write,on时， 约7万QPS。  
使用CGROUP 将CPU限制在10个核时，另外将sync standby节点对应的WAL SENDER进程放到1核的cpuset，可以提升到10万 QPS。    
off, local 时，约30万，22万。   
瓶颈在文章前面有分析，主要是同步互斥锁。  
2\. 单机单实例，使用批量事务，排除网络问题，突出COMMIT等待的问题。    
```
begin; 
  ... 
  多条 
  ... 
end; 
```
测试小结   
放开CGROUP限制，塞10条insert在事务中， 可以达到2.2万tps, 约22W QPS (insert)。  
也就是说commit 时，backend process会进入sleep状态，等待wal sender来释放它，COMMIT越多，睡眠次数就越多，可能造成本文前面提到的瓶颈。  
3\. 单机多实例，副本在异机  
单机部署4个MASTER节点，每个master的2个STANDBY分别在另外两台物理机。  
同时测试4个master的insert case, 总qps ~= 7W/s。  
相比单节点没有任何提升。  
4\. 单机多实例，副本在本地。使用UNIX SOCKET连接。  
本地多副本，排除网络问题（排除CPU,IO问题）  
把一主两备全部放到一台主机，确保网络没有瓶颈，replication使用unix socket连接，pgbench也使用unix socket连接。  
由于本地的CPU，IO都不是瓶颈，所以考虑把同步的 standby放到本机，另外一个potention的standby放到异机。  
测试结果依旧总qps ~= 7W/s。  
没有任何提升，同时机器的CPU,IO都很空闲。   
5\. 单机，创建多个虚拟机隔离系统级别同步互斥锁的问题。副本在异机。  
在master的主机上，安装8个KVM虚拟机，每个虚拟机安装一个postgresql master实例。  
standby部署在另外两台物理机。  
压测有了性能提升，合并后的QPS 19万。  
考虑到kvm的CPU指令翻译，VIRTIO有一定的性能损耗，同时还有网络延迟的消耗，所以没有达到理论值22万。  
但是这个结果也说明了一个问题，使用KVM后，规避了OS层面的同步互斥锁。    
7\. 单机测试，无副本  
sync=off, on  
约30万，22万。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")