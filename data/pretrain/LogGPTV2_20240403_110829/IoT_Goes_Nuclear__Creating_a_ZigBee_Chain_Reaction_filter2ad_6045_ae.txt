### Primary and Secondary ZLL Channel Sets

The primary ZLL channel set shall consist of channels 11, 15, 20, and 25. These channels are to be used preferentially for both commissioning and normal operations. The secondary ZLL channel set includes channels 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, and 26. These can serve as a backup, allowing ZLL devices to connect to non-ZLL networks.

After a factory reset, the Philips Hue light cycles through all available channels. In each channel, it sends a Beacon Request message and waits for a short period for a response. It then selects one of the relevant Beacon messages received and switches to that channel for association and further communication. To repeatedly reset all the lamps in an area, we send factory reset messages in the primary ZLL channels and then switch to one of the secondary channels for the Beacon message and association process. This ensures that the lamps already under our control remain on a secondary channel and are not affected.

### Worm Results

Our attack comprises two interconnected parts:
1. Performing an over-the-air (OTA) software update on a bulb we have taken over, made possible by our knowledge of the secret key.
2. Taking over bulbs from long distances using standard radios.

Details of our discoveries that enabled these attacks were presented in Sections 6 and 7 of this paper.

#### 8.1. Take Over Attack Testing

We verified our attack against various Philips Hue light models in our lab using an experimental setup. We then developed an autonomous attack kit using Texas Instruments' ZLL stack and the ZLight2 evaluation board, powered by a 1800 mAh USB power bank, which provides more than 20 hours of operation.

The ZLL stack did not support on-the-fly channel switching, so we simplified our development by attacking only via ZigBee channel 11 and using two evaluation boards: one for the factory reset attack on channel 11 and another for the association and takeover on channel 24. The factory reset board was programmed to send a Reset to Factory New Request command every 3 seconds at the highest transmission power (about 4.5 dBm). This gives the lamps enough time to switch to the other channel and complete the association process before the next reset command is sent.

##### 8.1.1. Wardriving

We installed three Philips Hue lamps in offices on the first floor of our faculty building. We successfully tested our full attack from a car parked across the lawn at a distance of about 50 meters. The factory reset part of the attack worked from ranges of more than 150 meters. We also successfully tested our attack while "wardriving" the car at the far edge of the lawn.

##### 8.1.2. Warflying

For a warflying demonstration, we targeted an office building in Beer Sheva, Israel, known for its high concentration of cybersecurity companies. We installed five Philips Hue lamps on the third floor of the building and mounted our attack kit on a DJI Inspire pro drone. The power bank was attached to the bottom of the drone, and the evaluation boards hung from a 1-meter USB cable beneath it to avoid RF interference from the drone's motors and 2.4 GHz video and control transmitter.

We started the attack on the ground at a distance of about 350 meters. As the drone approached the building, the factory reset part of the attack began working, and the takeover was completed. To demonstrate the successful takeover, we added code to make the lamps repeatedly signal SOS in Morse code while the drone hovered in front of the building.

#### 8.2. Firmware Update Attack Testing

Performing the actual firmware update uses a standards-compliant method to download a new firmware binary. The details of this binary are not specified in any standard, so our attack requires us to convert an arbitrary firmware image into the format accepted by the bulbs.

Through our device analysis, we determined that AES-CCM was used for both encryption and verification of the firmware binary. Every bulb of a certain model used the same key, meaning that once we recovered this cryptographic material from one device, we could update any of the same models.

We know from our work detailed in Section 6 the AES-CCM key used by both the AES-CBC and AES-CTR portions, and the AES-CTR nonce format. We also have the CBC MAC state that is XORed to the first block (after encryption of IV and associated data).

Building a self-spreading worm is now possible by combining the ability to sign and encrypt arbitrary binaries with our knowledge of the long-range takeover attack vulnerability.

### Ethical Considerations and Disclosure

We disclosed the takeover vulnerabilities to Philips Lighting and Atmel in July 2016, providing all relevant technical details and suggestions for a fix. Philips confirmed our findings. The fix, released in October 2016, reduced the infection range to only 1 meter or less using standard ZLL Touchlink messages. We also notified Philips about the recovery of the firmware encryption keys.

### Worm Effects and Countermeasures

This paper presents an example of a worm capable of spreading directly between wireless devices due to several design choices and software bugs in the system.

1. **Use of a single symmetric encryption key shared across many devices** to protect the firmware update process.
2. **Hardware vulnerable to side-channel analysis.**
3. **Errors in the implementation of protocols** designed to prevent long-range takeover attacks.

Using unique keys per bulb would prevent the worm from spreading, as any given bulb could not encrypt firmware for another bulb. This is supported by the Zigbee OTA standard and only requires backend server support.

Another solution is to use asymmetric cryptography for software verification. Efficient solutions such as hash-based signatures can be used even in low-resource 8-bit devices.

While protecting against side-channel analysis would prevent the recovery of encryption keys, it is usually too costly for low-cost consumer devices. Instead, ensuring that the leak of a key from a single product does not damage the entire ecosystem is a better solution.

The errors we discovered in the protocol implementation could have been found during the Zigbee certification process with negative testing. This type of testing is crucial for cryptographic and security protocols.

### Worm Applications

#### 9.1.1. Bricking Attack

We can use the worm for a bricking attack, which is irreversible. Any effect caused by the worm (blackout, constant flickering, etc.) will be permanent. Once the worm is downloaded, it can decide what OTA updates to allow. The worm entirely replaces the existing firmware, so it is up to the designer to support the OTA update protocol if they wish to allow other updates.

There is no other method of reprogramming these devices besides PCB-level connections. Since the lamps are not designed to be disassembled, fixing the issue would require a substantial recall or warranty replacement. Any old stock would also need to be recalled, as any devices with vulnerable firmware can be infected as soon as power is applied.

#### 9.1.2. Wireless Network Jamming

The IEEE 802.15.4 standard, which ZigBee runs over, uses the 2.4 GHz license-free band. This band is widely used by many standards, including IEEE 802.11b/g. The channel bandwidth of 802.15.4 is lower than 802.11, meaning that several 802.15.4 channels overlap with each 802.11 channel.

These 802.15.4 SoC devices have a special 'test mode' that transmits a continuous wave signal without first checking for a clear channel. This test signal can be tuned to overlap with any 2.4 GHz 802.11 channel, potentially disrupting WiFi traffic in an area. A dedicated attacker could also use this platform to perform specific DoS attacks against devices or protocols using 802.15.4 on the 2.4 GHz band.

#### 9.1.3. Data Infiltration and Exfiltration

Ronen and Shamir [4] used the Philips Hue to exfiltrate data at a rate of about 10KB per day, getting one bit of data from every message sent from the bridge. Using infected lamps, we can create a similar covert channel at much higher rates by reading bits from user-chosen data in messages and flickering at higher rates than allowed by the API. Infected lamps can also be used to infiltrate data into the network by changing user-readable data such as model version.

#### 9.1.4. Epileptic Seizures

Ronen and Shamir [4] also showed how the Philips Hue can be used to trigger epileptic seizures. This attack can now be executed from a remote location, covering large areas. In infected lamps, it is also possible to drive the LEDs at frequencies that increase long-term discomfort in humans rather than attempting to overtly trigger seizures [35].

### Conclusions

In this paper, we described an attack with the potential to cause large-scale effects. Fixing the malicious software update will require the physical replacement of every affected lightbulb and a waiting period for a software patch. This scenario highlights the poor security in many IoT devices.

Our attacks exploit specific implementation bugs in the Touchlink commissioning protocol and the OTA update process. However, they are just examples of the way security in IoT is designed today. The main problem lies in the insecure design of the ZLL standard itself. While ease of use is a primary design goal, a better balance between usability and security must be achieved. The security community and academia should be involved in the process.

The contrast between the open and inclusive manner in which TLS 1.3 was designed and the secretive work on the ZigBee 3.0 specification is a significant issue. We believe that the OTA update keys will eventually be leaked, and the reuse of symmetric encryption and signing keys between lightbulbs is a major security risk. Security by obscurity has failed repeatedly. Working with the security community and academia will likely lead to better alternatives to ZLL commissioning and better ways to protect OTA updates.