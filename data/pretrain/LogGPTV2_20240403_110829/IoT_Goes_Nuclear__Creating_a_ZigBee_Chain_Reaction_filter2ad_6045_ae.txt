primary ZLL channel set shall consist of channels 11, 15, 20
and 25 and shall be used in preference for commissioning
and normal operations. The secondary ZLL channel set
shall consist of channels 12, 13, 14, 16, 17, 18, 19, 21,
22, 23, 24 and 26, which can be used as a backup to
allow the ZLL device to connect to a non-ZLL network”.
After a factory reset, the Philips Hue light cycles through
all available channels. In each channel it sends a Beacon
Request message, and waits for a short period of time for a
response. It will chose one of the relevant Beacon messages
it received, and switch to that channel for association and
further communication. We repeatedly send the factory reset
messages in the primary ZLL channels, and then switch
to one of the secondary channels for sending the Beacon
message and association process. This allows us to try to
repeatedly reset all the lamps in our area, while keeping the
lamps we already took over on our network in a secondary
channel so that they will not be affected.
206
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
8. Worm Results
Our attack consists of two interconnected parts: (1)
performing an OTA software update on a bulb that we have
taken over, made possible by our knowledge of the secret
key, and (2) taking over bulbs from long distances using
standard radios. Details of our discoveries which made both
these parts possible was presented in Section 6 and Section 7
respectively of this paper.
We will detail our testing of both the OTA update and
take-over attacks in the following sections. We will discuss
ﬁrst the ‘take-over’ attack as it would be the ﬁrst step in a
worm spreading, and then the ‘ﬁrmware update’ attack.
8.1. Take Over Attack Testing
We started by verifying our attack against all the differ-
ent Philips Hue light models we had in our lab, using our
experimental setup. We then implemented an autonomous
attack kit using Texas Instruments’ ZLL stack and the
ZLight2 evaluation board powered by a 1800 mAh USB
powerbank (that is enough for more than 20 hours of work).
The stack we were using did not have a convenient API
for on-the-ﬂy channel switching (this is supported by the
hardware but doing this will require us to rewrite large parts
of the code and replace some closed source libraries of the
stack we used). So in order to simplify our development
process we chose for our experiment to attack only via the
ﬁrst ZigBee channel 11 and to use two evaluation boards,
one for the factory reset attack on channel 11 and another for
the association and takeover on channel 24. The evaluation
board used for the factory reset attack was programed to
repeatedly send a Reset to Factory New Request command
every 3 seconds at the highest transmission power (about
4.5 dBm) . This gives the lamps ample time to switch to the
other channel and complete the association process with the
second board before the next Reset to Factory New Request
command is sent
8.1.1. Wardriving. - We installed 3 Philips Hue lamps
in ofﬁces at
the ﬁrst ﬂoor of our faculty building. We
successfully tested our full attack from a car which was
parked across the lawn at a distance of about 50 meters,
while the factory reset part of the attack worked from ranges
of more then 150 meters. We then successfully tested our
attack while “wardriving” the car at the far edge of the lawn.
8.1.2. Warﬂying. - For a warﬂying demo we found a more
interesting target: an ofﬁce building in the city of Beer Sheva
in the south of Israel which has a high concentration of
well-known cyber security companies (and is also next to
the building that host the Israeli CERT). As can be seen
in Figure 9, we have installed 5 Philips Hue lamps on the
third ﬂoor of the building. We then mounted our attack kit
on a DJI Inspire pro drone as can be seen in Figure 10. The
powerbank was attached to the bottom of the drone, while
the evaluation boards were hanging from a 1 meter USB
Figure 9. ZigBee warﬂying scenario
Figure 10. Attack start position
cable beneath it. This was done to avoid RF interference
from both the drone’s motors and its powerful 2.4 GHz video
and control transmitter.
As can be seen in Figure 10 we started our attack on the
ground at a distance of about 350 meters. Right after takeoff,
at that distance, the factory reset part of the attack started
working. As the drone got closer to the building the takeover
part was completed. To demonstrate the successful take over,
we added code that causes all the lamps to repeatedly signal
SOS in Morse code while the drone hovered in front of the
building.
8.2. Firmware Update Attack Testing
Performing the actual ﬁrmware update uses a standards-
compliant method to download a new ﬁrmware binary. The
details of this binary are not speciﬁed in any standard, so our
attack requires us to be able to convert an arbitrary ﬁrmware
image we have built into the format accepted by the bulbs.
As part of our device analysis, we determined AES-
CCM was used for both encryption and veriﬁcation of a
ﬁrmware binary. Every bulb of a certain model used the
same key, meaning once we recovered this cryptographic
material from one device we would be able to update any
of the same models.
At this point, we know from our work detailed in Sec-
tion 6 the AES-CCM key used by both the AES-CBC and
AES-CTR portions, and the AES-CTR nonce format. We
also have the CBC MAC state that is XORed to the ﬁrst
block (after encryption of IV and associated data) that we
207
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
keys. Those ﬁnding were also conﬁrmed. As we were very
concerned with the danger of building a fully functional
worm, we decided not to combine our two attacks but just
to test the required functionalities in isolation, on lightbulbs
we owned.
9. Worm Effects and Countermeasures
This paper has presented an example of a worm capable
of spreading directly between wireless devices
due to several design choices in the system, and software
bugs in the implementation.
1) Use of a single symmetric encryption key shared across
many devices to protect the ﬁrmware update process.
2) Hardware vulnerable to side-channel analysis.
3) Errors in the implementation of protocols designed to
prevent long-range take-over attack.
Using unique keys per bulb would prevent our worm
from spreading, since any given bulb could not know how
to encrypt a ﬁrmware for another bulb. This is supported by
the Zigbee OTA standard and only requires a support in the
backend server.
Another solution would be to use asymmetric cryptogra-
phy for the software veriﬁcation. Efﬁcient solution such as
hash based signatures [33] can be used even in low resources
8 bit devices.
While protecting against side-channel analysis would
prevent the recovery of encryption keys, it is usually too
costly for such types of low cost consumer devises, and it
would not prevent against other methods that the keys could
be leaked. Instead the better solution is to ensure the leak
of a key from a single product does not damage the entire
ecosystem.
The errors we discovered in the protocol implementation
could have been found in the Zigbee certiﬁcation process
with negative testing. This type of testing is extremely im-
portant in the case of cryptographic and security protocols.
For example as the ZLL standard requires the Transaction
ID ﬁeld to be non-zero, a negative test trying to send the
value 0 in this ﬁeld for every message of the protocol, would
have found the bug we used.
9.1. Worm application
Figure 11. Screenshot of Hue App connected to a modiﬁed bulb; the version
number of bulb 6 has been modiﬁed by us in the ﬁrmware image.
can use as an initial state to start our CBC-MAC calculations
from.
We used a DPA attack to determine which bytes of the
header were manipulated after the last block of data was
received by the bootloader, assuming that those will be the
bytes of the MAC authentication tag being compared to the
calculated value.
As a ﬁrst test, we decrypted one of the CC2530 update
images, changed some strings and then re-encrypted the ﬁle
with a newly calculated MAC. This ﬁrmware was accepted
by the light, conﬁrming that we were able to generate signed
code. An example screenshot of the ofﬁcial Philips Hue App
showing a modiﬁed and unmodiﬁed bulb is presented in
Figure 11. Note that the version number of the modiﬁed
bulb has been changed to IrradiateHue.
We then loaded a small program that read out the ﬁrst
few pages of ﬂash memory. On the CC2530 the bootloader
typically resides at the beginning of ﬂash, so this allows
us to recover the complete original bootloader (along with
full information on keys, I.V., etc.). Note that on the AT-
Mega2564RFR2 there is an option which prevents applica-
tion code from reading out the bootloader, but this feature
was not enabled on Hue bulbs using the ATMega2564RFR2
we have investigated, meaning that we can perform this
same style of attack on newer lamps.
Building a self-spreading worm is now possible by com-
bining the ability to sign and encrypt arbitrary binaries with
our knowledge of the long-range takeover attack vulnerabil-
ity.
8.3. Ethical Consideration and disclosure
We made full ethical disclosure of the takeover vulnera-
bilities found to Philips Lighting and to Atmel on July 2016,
providing all the relevant technical details and suggestions
for a ﬁx. We received a conﬁrmation of our ﬁndings from
Philips. As this attack affects most of the deployed Hue
lamps the ﬁx had to be tested on a large number of versions,
and the ﬁrst update was released by Philips in October
2016, which would reduce infection range to only 1m or
less using standard ZLL Touchlink messages. We have also
notiﬁed Philips on the recovery of the ﬁrmware encryption
An IoT worm may have far-reaching applications.The
following will brieﬂy discuss such issues, to demonstrate
that all IoT products need to take security correctly, even
‘simple’ ones.
9.1.1. Bricking attack. We can use the worm for a bricking
attack. Unlike regular DoS attacks this attack is irreversible.
Any effect caused by the worm (blackout, constant ﬂick-
ering, etc.) will be permanent. As previously mentioned,
once the worm is downloaded, the worm can decide what
OTA updates to allow. The worm is entirely replacing the
existing ﬁrmware, so it is up to the worm designer to support
208
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
the OTA update protocol if they wish to allow other OTA
updates.
There is no other method of reprogramming these de-
vices besides a PCB-level connections. The only other
method of reprogramming these devixes is by PCB-level
connections. As these lamps are not designed to be dis-
assembled – having a potting compound around the main
PCB, along with glue used to secure the main dome –
ﬁxing the issue would require a substantial recall or warranty
replacement.
Any old stock would also need to be recalled, as any
devices with vulnerable ﬁrmware can be infected as soon as
power is applied. The consumer is unlikely to have time to
perform the legitimate OTA update before the worm would
infect the bulb.
9.1.2. Wireless network jamming. The IEEE 802.15.4
standard which ZigBee runs over uses the 2.4 GHz license-
free band. This band is widely used by many standards, in-
cluding IEEE 802.11b/g. The channel bandwidth of 802.15.4
is lower than 802.11, meaning that several 802.15.4 channels
overlap with each 802.11 channel.
These 802.15.4 SoC devices have a special ‘test mode’
which transmits a continuous wave signal without ﬁrst
checking for a clear channel (this is used during the FCC/CE
testing). This test signal can be tuned to overlap on any of
the 2.4 GHz 802.11 channels (or sweep between them). As
this signal may come from many devices at once, such a
jammer could easily be used to disrupt WiFi (or other 2.4
GHz) trafﬁc in an area.
A more dedicated attacker could also use this platform
in attacking speciﬁc products using 802.15.4 on the 2.4 GHz
band: examples include WirelessHART, MiWi, ISA100.11a,
6LoWPAN, Nest Weave, JenNet, and Thread. It is possible
for example to perform more speciﬁc DoS attacks against
specisﬁc devices or protocols [34].
9.1.3. Data inﬁltration and exﬁltration. Ronen and
Shamir [4] have used the Philips Hue to exﬁltrate data at
a rate of about 10KB per day, getting one bit of data from
every message sent from the bridge. Using infected lamps,
we can create a similar covert channel, at much higher rates.
This can be done by reading bits from user chosen data in
message and ﬂickering at higher rates than that allowed by
the API. Infected lamps can also be used to inﬁltrate data
into the network, by changing user readable data such as
model version.
9.1.4. Epileptic seizures. Ronen and Shamir [4] have also
shown how the Philips Hue can be used to trigger epileptic
seizures. This attack can now be executed from a remote
location, covering large areas. In infected lamps it is also
possible to drive the LEDs at frequencies that increase long-
term discomfort in humans rather than attempting to overtly
trigger seizures [35].
10. Conclusions
In this paper we described an attack which has the
potential to cause large scale effects. Moreover, ﬁxing the
malicious software update will require the physical replace-
ment of every affected lightbulb with a new one, and a
waiting period for a software patch to be available before
restoring light. This scenario might be alarming enough by
itself, but this is only a small example of the large scale
problems that can be caused by the poor security offered in
many IoT devices.
Our attacks exploit a speciﬁc implementation bug of the
Touchlink commission protocol and a speciﬁc design for
the OTA update process, but they are just an example of the
way security in IoT is designed today. The Atmel code we
reviewed was very well written and documented, but it is
extremely difﬁcult to implement complex state machines of
such protocols without any bugs. The main problem is in
the insecure design of the ZLL standard itself. We believe
this will not be the last bug or attack found against ZLL
commissioning. While the vendor’s main design goal of ease
of use is understandable, a better trade-off between usability
and security must be made, and the security community
and academia should be allowed to take part in the process.
The sharp contrast between the open and inclusive manner
in which TLS 1.3 standard was designed and the secretive
work on the ZigBee 3.0 speciﬁcation that is still not open
to the public, is a big part of the problem.
We believe that in the same manner of the leaked ZLL
master key, the OTA updates keys will also be leaked. The
reuse of symmetric encryption and signing keys between
lightbulbs is a big security risk and it enables attackers to
create a chain reaction of infections. Security by obscurity
has failed time after time. Working with the security commu-
nity and academia will probably leads to better alternatives
to ZLL commissioning than using a master key, and better
ways to protect OTA updates than a shared symmetric key.
In our computers and smart phones, software updates are
usually protected by asymmetric signatures that validate the
origin of the software, or the connection to the update server.
There are many solutions that can be found for low cost
asymmetric cryptography (for example using hash based
signatures). Moreover in the same manner that the chip
manufacturers added AES hardware accelerators, a strong