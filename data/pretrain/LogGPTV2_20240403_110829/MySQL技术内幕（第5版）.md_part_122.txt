Sql>UNLOCK TABLES;
行恢复。
安排预防性的维护工作，定期对表进行检查。
启用MySQL服务器提供的自动恢复功能。
第14章
为只读访问锁定所有数据库
数据库维护、备份和复制
、一种恢复（事务型存
一直到其他
---
## Page 535
据需要调整这个时间或计划内容。
在一行内输入所有的内容，并使用你系统中的mysqlcheck路径：
这个用户的crontab文件里设置定期检查操作，只需往这个文件里添加如下所示的设置项即可。
建立一个定期调用 mysqlcheck 的维护作业。如果运行服务器的用户为 mysql，那么你可以在
（与设置cron作业有关的信息请参考12.8.7.3节。）
常的做法是，为用于运行服务器的账户创建一个crontab 文件，并通过它来调用cron 作业。
于备份的可能性。在Unix系统里，实现这种定期检查最简便易行的办法是使用cron 作业。通
动检测问题，让你能够及时采取措施来修正它们。有计划地对表进行定期检查，能够减少求助
14.3.2
在崩溃发生时，那些使用了“延迟键写入”功能的表将仍是打开的，需要为它们修改索引。
表关闭之前，对索引的修改不会被刷新。虽然这能改善服务器的运行性能，但是这也意味着，
了配置，让其使用“延迟键写入”功能，那么MyISAM的恢复将尤为重要。在这些条件下，
用。如果你在运行服务器时启用了系统变量 delay_key_write，或者对单个 MyISAM 表进行
有问题的MyISAM表将变得不可用，直到你发现这个问题，并手工修复它，它才能再次变得可
入下面几行内容：
如果想在发现问题时强制进行恢复，但是又需要先创建备份，则可以在服务器的选项文件里放
速恢复）、DEFAULT（在恢复时不进行任何其他的特殊处理）或者OFF（不进行恢复）。例如，
个表，则先为它创建一个备份）、FORCE（即使会丢失多行数据也要强制进行恢复）、QUICK（快
为一个以逗号分隔的列表，其中可以带有一个或者多个选项：BACKUP（如果修复操作会更改这
的恢复功能，可以通过设置系统变量myisam_recover_options来启动服务器。这个变量的值
用了此功能，每次服务器打开MyISAM表时都会对它进行检查。如果有表在上次使用后没有
的内容能够反映出所有在崩溃发生前提交的事务。
用取消日志进行回滚（即丢弃）。最终的结果保证了InnoDB表始终处于一致的状态，因此它们
经过刷新写入表中，那么它们会前滚（即重做)。对于那些在崩溃时没来得急提交的事务，会
存储引擎可以自动检查问题。对于那些已提交的事务，如果它们只存在于重做日志里，而没有
启动服务器之外什么也不用做。在许多情况下，它会替你完成必要的修正工作。例如，InnoDB
导致的问题。MySQL的设计考虑到了对各种问题的恢复操作，因此在一般情况下，你除了重新
显式启用。
储引擎的恢复）是服务器启动时自动执行的。另一种恢复（MyISAM的恢复）是可选的，必须
确
当服务器在线时，mysqlcheck 程序可用于对 MyISAM和 InoDB表进行检查。假设你想要
自关闭或是被标记为“崩溃”，那么服务器将对它进行检查和修复。如果想要启用MyISAM关
志，然后退出。如果想要强行启动服务器，可以尝试手动恢复请参考14.7.4节。
--all-databases 选项会告诉 mysqlcheck 去检查所有数据库里的所有表。这种做法可以
上面这个设置项会告诉 cron 在每个星期日的3点45分运行 mysqlcheck 程序。你可以根
对于MyISAM表，服务器提供了一种可选的表恢复功能，但你必须显式启用它。一旦你启
如果InnoDB表的自动恢复因为某个无法恢复的问题而失败,那么服务器会把消息写入出错
当服务器启动时，会执行某些类型的表检查，以帮助处理早些时候因服务器或机器崩溃而
453 **0/usr/local/mysql/bin/mysqlcheck
除了启用服务器的自动恢复功能以外，还应该考虑制订一个预防性维护计划。这有助于自
作为基本的维护策略，启用MyISAM的自动恢复功能是很有用的，否则，那些服务器发现
myisam_recover_options=BACKUP,FORCE
[mysqld]
--al1-databases --check-only-changed --silent
制订预防性维护计划
14.3基本的预防性维护
515
表
正
利
---
## Page 536
闭服务器
接着，我们会详细介绍几种特定的备份方法。
让从服务器
定的时间点为主服务器
大部分情况下，都是把数据库迁移到在另一台主机上运行的服务器，但你也可以把数据库迁移
DATABASE、DROP TABLE 或DELETE 语句，并且请求你帮忙恢复数据的用户。
最少的数据损失把表恢复回来。备份也能让你为这样的用户提供帮助：不明智地调用了DROP
14.4
不知道如何进行检查的，那么即使使用了--silent 选项，你也会得到一些诊断输出。
就没什么理由会收到邮件。请注意，如果数据库里的表所使用的存储引擎是mysqlcheck 程序
最终产生了输出，它通常会生成一个邮件消息。对于一个用于表检查的作业，如果未发现问题，
修改过的表。选项--silent的作用是在表里未发现错误时抑制信息输出。如果某个cron作业
的数据库或表进行检查，请参阅附录F中的程序描述。
让你以最简便的方法获得最大的效果。如果想使用适当的选项，让 mysqlcheck 程序只对特定
用
说明
516
原样复制到从服务器
生产服务
在同一主机上运行的其他服务器。如果你正在测试安装了新版MySQL的服务器，并且想使
首先，我们会提供几条掌控备份实践的基本原则，这些原则能够助你决定使用哪一种技术。
数据库备份对于某些不可恢复性操作（如把一个数据库复制到另一个服务器）也很有用。
备份的另一个用途是建立复制（replication）服务器。
最后，请记得检查mysq1账户的邮件，或者将其路由到你自己的账户。
选项--check-only-changed 会告诉mysqlcheck跳过所有自最后一次成功检查以来从未
mysqldump生成的是包含SQL语句的文本文件。这些文件很容易移植到其他机器上，即
每一种备份方法都有其自己的优缺点。在挑选备份工具时需要考虑的因素包括是否需要关
数据库备份分为以下两类。
为了预防数据丢失造成的损坏，备份数据库很重要。在系统严重崩溃时，备份能够让你以
口
口1
口
mysqldemp。二进制备份方法是在文件系统级进行文件复制的，不需要进行数据转换，
务器要先读取表、然后为便于传输转换表的内容，最后通过网络连接把信息发送至
mysqldump的备份速度比二进制备份技术的慢，因为转储操作涉及的环节比较多：
进制备份方法是在服务器外部进行的文件复制操作。部分此类方法要求你停止服务
mysqldump与MySQL服务器是合作关系，因此只要服务器在运行，你就可以使用它。
器、备份需要花费的时间、备份的可移植性和备份的范围。
法有很多种。例如，可以使用像cp、tar或rsync之类的程序。
文本格式的备份。可以通过mysqldump程序把表内容写入转储文件（dump file）来获得。
当对表进行检查时，不能对它进行更新。如果你无法承受在检查期间阻塞更新操作所带
也不需要通过网络传输。
复制的表文件进行修改。
二进制备份。
加载到服务
这些文件主要
来
服务器上的真实数据，那么你很可能会这样做。
第14章数据库维护、备份和复制
器与
数据库备份
的后果
主服务
果
服务器，从而恢复表。
要由两种SQL语句CREATETABLE和INSERT构成，这些语句可以在以后重新
那
，可以通过直接复制那些包含表内容的文件来获得。创建此类型备份的办
各器。相关内容请参考14.8节。
器保持一致。此后，用户在主服务器上做出的修改，将通过标准的复制协
器拍一个快照。
么自动维护策略可能就不适用于那些需要频繁更新的大表。
，备份就相当于这个快照，只要把它加载到从服务器，就能
。建立从服务器的第一步是，在某个特
服
---
## Page 537
的二进制可移植性。
上那个存储引擎所创建的表。
目标服务器必须支持管理表的存储引擎。如果服务器没有这种存储引擎，就不能访问源服务器
着那个MySQL服务器能够使用这个表。
表示这些表的磁盘文件直接复制到另一个机器，将其安装到数据目录下的相应位置，然后期待
然后加载这个文件，重建这个表。另一种可移植性是“二进制可移植性”，它意味着：你可以把
14.4.1
你使用的是复制机制，那么14.8.4节描述的方法可以保证你的主服务器完全不会受到干扰。
最好的结果。
有些存储引擎创建的表具有二进制可移性，
一般来说，表的二进制可移植性要求源服务器和目标服务器在功能特性上必须兼容。例如，
给定MySQL服务器所管理的任何表都可移植到另一个服务器，也就是说，你可以使用
接下来的几节将讨论存储引擎的可移植性，并且会对几种特定的备份方法进行描述。如果
口7
口定期进行备份。制订一个计划，并严格执行。
无论选用哪种备份方法，都必须遵守以下原则，才能确保在需要恢复数据库内容时，获得
口
口
口
12.8.7节讨论了的日志文件的过期问题，那里谈到的处理原则也同样适用于备份文件。
定期清理过期的备份文件，防止它们用尽硬盘空间。一种办法是使用文件轮回技术，
了。还有一点，别忘了备份日志文件。
将不止是你的数据目录，还有存放数据库备份文件的硬盘驱动器，那时麻烦可就大
要把数据库备份文件定期放到文件系统备份中。如果系统彻底崩溃，那么彻底摧毁的
故障，都不会导致数据目录和备份文件同时遭到破坏。
动器里，这还能进一步减少因驱动器故障而导致的损失，因为不管哪一个驱动器出现了
占数据目录所在文件系统空间的可能性。其次，如果将备份文件存放在另一个物理驱
不要把备份文件和数据库放在同一个文件系统上。首先，这样做可以减少备份文件挤
到名字里。
sampdb-2013-01-02。如果同时运行了多个服务器，那么还应该把服务器的标识也加
如，如果你在2013年1月2日转储了sampdb数据库，那么可以把备份文件命名
的内容是什么。使
没有多大意义。
备份文件的命名方案，既要一致，又要有意义。诸如backup1、backup2之类的名字并
库还原到崩溃发生时的状态。
执行二进制日志文件里的内容，重新应用备份之后所发生的更改。这样便可以把数据
能帮助你恢复数据库。基本做法是：用备份文件把数据库恢复到备份时的状态，然后
配置服务器，启用其二进制日志功能（参考12.8节）。
上述内容中的任何部分或全部，因为你可以复制任何你想要的文件做成备份。
储在数据库里的信息，如配置文件、日志文件或复制状态文件。二进制备份则可以包括
mysqlaump的输出只包含数据库的内容（表、视图、存储例程等）。它不会备份没有存
器上的服务器里。与各种存储引擎的可移植性有关的信息请参考14.4.1节。
对于这些存储引擎，可将直接复制的表文件移到运行在另一台有着不同硬件架构的机
取决于表是否使用了与机器无关的存储格式。MyISAM和InnoDB表通常与机器无关。
制到另一个服务器。直接复制的二进制备份方法所生成的文件能否移植到其他机器上，
使是有着不同硬件架构的机器也没问题。因此，可以用它们把数据库从一个服务器复
存储引擎的可移植特点
，当需要执行还原操作时，你将浪费大量的时间才能弄清这些文件里面
使用数据库的名字和备份日期来构造备份文件名是种不错的做法。
，有些则不具有。
。在服务器崩溃之后，二进制日志
，下面重点总结了几种存储引擎
14.4数据库备份
517
后
---
## Page 538
储到它自己的文件里，如下所示：
只能读取行数据，而不能读取 SQL语句。
用下面这些命令：
重新加载到 MysSQL中即可。例如，想要转储和重新加载某个表（如 sampdb.member），可以使
INSERT 语句。如果以后想重建这些转储表，只需要把这个转储文件用作 mysql 的输入，将其
中有多条用于创建那些转储出来的表的CREATETABLE语句，以及多条包含这些表中行数据
14.4.2
进行表复制时可以避免停止服务器的各种前提条件”有关的讨论请参考14.2节。
那么磁盘上的表内容将处于不断变化之中，并且相关的文件将不会产生可用的表副本。与“在
不过，如果服务器正在运行当中，并且正在积极更新表，或者还有很多更改仍然缓存在内存里
志文件里，只有应用或回滚这些文件，才能把表恢复到最新。
制，那么很难保证表的完整性。表可能需要修复，或者事务信息可能仍然存储在存储引擎的日
表空间文件复制到另一台机器，除非这个服务器是彻底关闭的。如果在非正常关闭之后进行复
518
使用 mysqldump 程序可以创建文本转储文件。默认情况下，转储文件是 SQL 格式的，
有时也可以告知正在运行的服务器，让它在你复制表的文件时，别对这些表做任何操作。
% mysqldump mysql > /archive/mysq1/mysql.2013-01-02
不过，如果你的数据量非常大，那么生成的转储文件也会相当大。你可以把每个数据库转
%mysqldump --al1-databases>/archive/mysql/dump-all.2013-01-02
下面的命令可以把所有数据库里的所有表备份到一个单独的文件里：
请不要用 mysqlimport 程序来重新加载 SQL格式的 mysqldump 输出。因为 mysqlimport
  s s 
不管存储引擎是否具有一般可移植性的特点，在关闭服务器之后，你都不应该试图将表或
口MEMORY表不具有二进制可移植性，因为其内容存储在内存里，而非磁盘上。
口
口InnoDB和MyISAM表都是以与机器无关的格式存储的，并且都具有二进制可移植性。
CSV表具有二进制可移植性，因为他们的.CSV数据文件是纯文本的。
用mysqldump程序制作文本备份
表空间里。
表
件决定了是否可移植，而不是单个的InnoDB表决定的。这意味着，只要有某个InnoDB
准
对于InnoDB，在进行二进制可移植性评估时，必须把所有的InnoDB表当作一个整体
小写不匹配的问题。
带大写字母的名称，然后想要把它们移到文件名区分大小写的平台上，就会导致出现大
的“浮点”指的是FLOAT和DOUBLE。DECIMAL列包含的定点值使用的是可移植的存低
格
样呢？除非你的机器真的很古怪，否则在上述两种情况下都不会出现任何问题。
试想一下，你的处理器使用了二进制补码的整数运算和IEEE的浮点格式，结果会怎
第14章数据库维护、备份和复制
使用了浮点数类型列，就会受到浮点数可移植性约束的限制。即使你通过配置，让
享系统表空间里，而不会存放在与表特定相关的文件里。因此，是InnoDB 表空间文
不能只考虑单个表的情况。默认情况下，InnoDB 存储引擎会把所有表的内容存储不
与你在CREATE TABLE语句里使用的大小写一样。如果你在创建数据库或表时使用
其数据字典里会以小写方式存储这些名字，但是在创建.frm文件时使用的表名大小
于InnoDB，具备二进制可移植性的附加条件是数据库名和表名都是小写的。InnoDB
式。）
（此
其
复
在
处
---
## Page 539
下面这个示例展示了如何将sampdb数据库里的部分表转储为不同的文件：
表，而不会转储给定数据库里的所有表，如此一来，便可以得到更小的转储文件，也更易管理。
紧跟单个表名的方式，实现单个表内容的转储。mysqldump 程序只会转储给定数据库里的给定
命令管道在生成备份的同时对其进行压缩：