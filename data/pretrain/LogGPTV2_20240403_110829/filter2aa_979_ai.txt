系统漏洞拿到很多学校的 shell，截图中可能有漏点，希望看文章的请勿对其进行攻击！ 
第 102 页 
攻击 JavaWeb 应用[5] -MVC 安全 
-园长 MM 
注:这一节主要是消除很多人把 JSP 当作了 JavaWeb 的全部的误解，了解 MVC 及其框架思想。MVC 是用于组织代码用一
种业务逻辑和数据显示分离的方法，不管是 Java 的 Struts2、SpringMVC 还是 PHP 的 ThinkPHP 都爆出过高危的任意代码
执行,本节重在让更多的人了解 MVC 和 MVC 框架安全，由浅到深尽可能的照顾没 Java 基础的朋友。所谓攻击 JavaWeb，
如果连 JavaWeb 是个什么，有什么特性都不知道，就算能用 Struts 刷再多的 RANK 又有何意义？还不如沏一杯清茶，读
一本好书，不浮躁，撸上一天。 
1、 初识 MVC 
传统的开发存在结构混乱易用性差耦合度高可维护性差等多种问题，为了解决这些毛病
分层思想和 MVC 框架就出现了。MVC 是三个单词的缩写,分别为： 模型(Model),视图(View) 
和控制(Controller)。 MVC 模式的目的就是实现 Web 系统的职能分工。 
Model 层实现系统中的业务逻辑，通常可以用 JavaBean 或 EJB 来实现。 
View 层用于与用户的交互，通常用 JSP 来实现(前面有讲到，JavaWeb 项目中如果不采
用 JSP 作为展现层完全可以没有任何 JSP 文件，甚至是过滤一切 JSP 请求，JEECMS 是一个最
为典型的案例)。 
Controller 层是 Model 与 View 之间沟通的桥梁，它可以分派用户的请求并选择恰当的
视图用于显示，同时它也可以解释用户的输入并将它们映射为模型层可执行的操作。 
第 103 页 
Model1 和 Model2： 
Model1 主要是用 JSP 去处理来自客户端的请求，所有的业务逻辑都在一个或者多个
JSP 页面里面完成，这种是最不科学的。举例:http://localhost/show_user.jsp?id=2。JSP 页
面获取到参数 id=2 就会带到数据库去查询数据库当中 id 等于 2 的用户数据，由于这样的实
现方式虽然简单，但是维护成本就非常高。JSP 页面跟逻辑业务都捆绑在一起高耦合了。
而软件开发的目标就是为了去解耦，让程序之间的依赖性减小。在 model1 里面 SQL 注入
等攻击简直就是家常便饭。因为在页面里面频繁的去处理各种业务会非常麻烦，更别说关注
安全了。典型的 Model1 的代码就是之前用于演示的 SQL 注入的 JSP 页面。 
Model1 的流程： 
Model 2 表示的是基于 MVC 模式的框架，JSP+Servlet。Model2 已经带有一定的分层
思想了，即 Jsp 只做简单的展现层，Servlet 做后端的业务逻辑处理。这样视图和业务逻辑
就相应的分开了。例如：http://localhost/ShowUserServlet?id=2。也就是说把请求交给
Servlet 处理，Servlet 处理完成后再交给 jsp 或 HTML 做页面展示。JSP 页面就不必要去关
心你传入的 id=2 是怎么查询出来的，而是怎么样去显示 id=2 的用户的信息(多是用 EL 表达
式或 JSP 脚本做页面展现)。视图和逻辑分开的好处是可以更加清晰的去处理业务逻辑，这
样的出现安全问题的几率会相对降低。 
第 104 页 
Mvc 框架存在的问题: 
当 Model1 和 Model2 都难以满足开发需求的时候，通用性的 MVC 框架也就产生了，
模型视图控制器，各司其责程序结构一目了然，业务安全相关控制井井有序，这便是 MVC
框架给我们带来的好处，但是不幸的是由于 MVC 的框架的实现各自不同，某些东西因为其
越来越强大，而衍生出来越来越多的安全问题，典型的由于安全问题处理不当造成近期无
数互联网站被黑阔攻击的 MVC 框架便是 Struts2。神器过于锋利伤到自己也就在所难免了。
而在 Struts 和 Spring 当中最喜欢被人用来挖 0day 的就是标签和 OGNL 的安全处理问题了。 
Spring Mvc: 
Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 
MVC 架构，可以选择是使用内置的 Spring Web 框架还是 Struts 这样的 Web 框架。通
过策略接口，Spring 框架是高度可配置的，而且包含多种视图技术，例如 JavaServer Pages
（JSP）技术、Velocity、Tiles、iText 和 POI、Freemarker。Spring MVC 框架并不知道
使用的视图，所以不会强迫您只使用 JSP 技术。Spring MVC 分离了控制器、模型对象、
分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。 
Struts2: 
Struts 是 apache 基金会 jakarta 项目组的一个开源项目，采用 MVC 模式，能够很好的帮
助我们提高开发 web 项目的效率。Struts 主要采用了 servlet 和 jsp 技术来实现，把 servlet、
jsp、标签库等技术整合到整个框架中。Struts2 比 Struts1 内部实现更加复杂，但是使用起来
更加简单，功能更加强大。 
Struts2 历史版本下载地址：http://archive.apache.org/dist/struts/binaries/  
官方网站是: http://struts.apache.org/ 。 
第 105 页 
常见 MVC 比较： 
按性能排序：1、Jsp+servlet>2、struts1>2、spring mvc>3、struts2+freemarker>>4、struts2,ognl,
值栈。 
开发效率上,基本正好相反。值得强调的是，Spring mvc 开发效率和 Struts2 不相上下。 
Struts2 的性能低的原因是因为 OGNL 和值栈造成的。所以如果你的系统并发量高，可以
使用 freemaker 进行显示，而不是采用 OGNL 和值栈。这样，在性能上会有相当大得提高。 
而每一次 Struts2 的远程代码执行的原因都是因为 OGNL。 
当前 JavaWeb 当中最为流行的 MVC 框架主要有 Spring MVC 和 Struts。相比 Struts2 而言，
SpringMVC 具有更轻巧，更简易，更安全等优点。但是由于 SpringMVC 历史远没有 Struts 那
么悠久，SpringMVC 想要在一朝一夕颠覆 Struts1、2 还是非常有困难的。 
*JavaWeb 的 Servlet 和 Filter： 
可以说 JavaWeb 和 PHP 的实现有着本质的区别，PHP 属于解释性语言.不需要在服务器
启动的时候就通过一堆的配置去初始化 apps 而是在任意一个请求到达以后再去加载配置完
成来自客户端的请求。ASP 和 PHP 有个非常大的共同点就是不需要预先编译成类似 Java 的
字节码文件，所有的类方法都存在于*.PHP 文件当中。而在 Java 里面可以在项目启动时去加
载配置到 Servlet 容器内。在 web.xml 里面配置一个 Servlet 或者 Filter 后可以非常轻松的拦
截、过滤来自于客户端的任意后缀请求。在系列 2 的时候就有提到 Servlet，这里再重温一
下。 
Servlet 配置： 
LoginServlet 
org.javaweb.servlet.LoginServlet 
LoginServlet 
/servlet/LoginServlet.action 
Filter配置： 
struts2  
org.apache.struts2.dispatcher.ng.filter.StrutsPrepa
reAndExecuteFilter 
struts2 
/* 
第 106 页 
Filter在JavaWeb当中用来做权限控制再合适不过了，再也不用在每个页面都去做
session验证了。假如过滤的url-pattern是/admin/*那么所有URI中带有admin的请
求都必须经过如下Filter过滤： 
Servlet 和 Filter 一样都可以拦截所有的 URL 的任意方式的请求。其中 url-pattern 可以是
任意的 URL 也可以是诸如*.action 通配符。既然能拦截任意请求如若要做参数和请求的净化
就会非常简单了。servlet-name 即标注一个 Servlet 名为 LoginServlet 它对应的
Servlet 所在的类是 org.javaweb.servlet.LoginServlet.java。由此即可发散开
来，比如如何在 Java 里面实现通用的恶意请求（通用的 SQL 注入、XSS、CSRF、Struts2
等攻击）？敏感页面越权访问？（传统的动态脚本的方式实现是在每个页面都去加 session
验证非常繁琐，有了 filter 过滤器，便可以非常轻松的去限制目录权限）。 
上面贴出来的过滤器是Struts2的典型配置,StrutsPrepareAndExecuteFilter
过滤了/*，即任意的 URL 请求也就是 Struts2 的第一个请求入口。任何一个 Filter 都
必须去实现 javax.servlet.Filter 的 Filter 接口，即 init、doFilter、destroy 这三个接
口，这里就不细讲了，有兴趣的朋友自己下载 JavaEE6 的源码包看下。 
public void init(FilterConfig filterConfig) throws ServletException; 
    public void doFilter ( ServletRequest request, ServletResponse 
response, FilterChain chain ) throws IOException, ServletException; 
public void destroy(); 
TIPS: 
在 Eclipse 里面看一个接口有哪些实现,选中一个方法快捷键 Ctrl+t 就会列举出当
前接口的所有实现了。例如下图我们可以轻易的看到当前项目下实现 Filter 接口的有如
下接口，其中 SecFilter 是我自行实现的，StrutsPrepareAndExecuteFilter 是 Struts2 实现的，
第 107 页 
这个实现是用于 Struts2 启动和初始化的，下面会讲到： 
2、Struts 概述 
Struts1、Struts2、Webwork 关系： 
Struts1 是第一个广泛流行的 mvc 框架，使用及其广泛。但是，随着技术的发展，尤其
是 JSF、ajax 等技术的兴起，Struts1 有点跟不上时代的步伐，以及他自己在设计上的一些硬
伤，阻碍了他的发展。 
同时，大量新的 mvc 框架渐渐大踏步发展，尤其是 webwork。Webwork 是 opensymphony
组织开发的。Webwork 实现了更加优美的设计，更加强大而易用的功能。 
后来，struts 和 webwork 两大社区决定合并两个项目，完成 struts2.事实上，struts2 是
以 webwork 为核心开发的，更加类似于 webwork 框架，跟 struts1 相差甚远。 
STRUTS2 框架内部流程： 
1. 客户端发送请求的 tomcat 服务器。服务器接受，将 HttpServletRequest 传进来。 
2. 请求经过一系列过滤器(如：ActionContextCleanUp、SimeMesh 等) 
3. FilterDispatcher 被调用。FilterDispatcher 调用 ActionMapper 来决定这个请求是否要调用某
个 Action 
4. ActionMapper 决定调用某个 ActionFilterDispatcher 把请求交给 ActionProxy 
5. ActionProxy 通过 Configuration Manager 查看 struts.xml，从而找到相应的 Action 类 
6. ActionProxy 创建一个 ActionInvocation 对象 
7. ActionInvocation 对象回调 Action 的 execute 方法 
8. Action 执行完毕后，ActionInvocation 根据返回的字符串，找到对应的 result。然后将 Result
内容通过 HttpServletResponse 返回给服务器。 
第 108 页 
SpringMVC 框架内部流程： 
1. 
用户发送请求给服务器。url：user.do 
2. 
服务器收到请求。发现 DispatchServlet 可以处理。于是调用 DispatchServlet。 
3. 
DispatchServlet 内部，通过 HandleMapping 检查这个 url 有没有对应的 Controller。如果
有，则调用 Controller。 
4. 
Controller 开始执行。 
5. 
Controller 执行完毕后，如果返回字符串，则 ViewResolver 将字符串转化成相应的视图
对象；如果返回 ModelAndView 对象，该对象本身就包含了视图对象信息。 
6. 
DispatchServlet 将执视图对象中的数据，输出给服务器。 
7. 
服务器将数据输出给客户端。 
在看完 Struts2 和 SpringMVC 的初始化方式之后不知道有没有对 MVC 架构更加清晰的了
解。 
Struts2 请求处理流程分析: 
1、 服务器启动的时候会自动去加载当前项目的 web.xml 
2、 在加载 web.xml 配置的时候会去自动初始化 Struts2 的 Filter，然后把所有的请求先交于
Struts 的 org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.java 类去做过
滤处理。 
第 109 页 
3、 而这个类只是一个普通的 Filter 方法通过调用 Struts 的各个配置去初始化。 
4、 初始化完成后一旦有 action 请求都会经过 StrutsPrepareAndExecuteFilter 的 doFilter 过滤。 
5、 doFilter 中的 ActionMapping 去映射对应的 Action。 
6、 ExecuteOperations 
源码、配置和访问截图： 
第 110 页 
3、Struts2 中 ActionContext、ValueStack、Ognl 
在学习 Struts 命令执行之前必须得知道什么是 OGNL、ActionContext、ValueStack。在前
面已经强调过很多次容器的概念了。这地方不敢再扯远了，不然就再也扯回不来了。大概理
解：tomcat 之类的是个大箱子，里面装了很多小箱子，小箱子里面装了很多小东西。而 Struts2
其实就是在把很多东西进行包装，要取小东西的时候直接从 struts2 包装好的箱子里面去拿
就行了。 
ActionContext 对象： 
Struts1 的 Action 必 须 依 赖 于 web 容 器 ， 他 的 extecute 方 法 会 自 动 获 得
HttpServletRequest、HttpServletResponse 对象，从而可以跟 web 容器进行交互。 
Struts2 的 Action 不用依赖于 web 容器，本身只是一个普通的 java 类而已。但是在 web
开发中我们往往需要获得 request 、session、application 等对象。这时候，可以通过
ActionContext 来处理。 
ActionContext 正如其名，是 Action 执行的上下文。他内部有个 map 属性，它存放了 Action
执行时需要用到的对象。 
在每次执行 Action 之前都会创建新的 ActionContext 对象， 通过 ActionContext 获取的
session、request 、application 并不是真正的 HttpServletRequest 、HttpServletResponse 、
ServletContext 对象，而是将这三个对象里面的值重新包装成了 map 对象。这样的封装，我
们及获取了我们需要的值，同时避免了跟 Web 容器直接打交道，实现了完全的解耦。  
测试代码： 
public class TestActionContextAction extends ActionSupport{ 
private String uname; 
public String execute() throws Exception { 
ActionContext ac = ActionContext.getContext(); 
System.out.println(ac);    //在此处定义断点 
return this.SUCCESS; 
} 
    //get 和 set 方法省略！ 
} 
我们定义断点，debug 进去，跟踪 ac 对象的值。发现他有个 table 属性，该属性内部包
含一个 map 属性，该 map 中又有多个 map 属性，他们分别是： 
request、session、application、action、attr、parameters 等。 
同时，我们跟踪 request 进去，发现属性 attribute 又是一个 table，再进去发现一个名字
叫做”struts.valueStack”属性。内容如下： 