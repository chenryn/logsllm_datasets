2,391
1,669
ASC
CSC
E V E V
1
1
0
1
2
0
1
0
1
0
0
1
1
2
1
0
0
0
2
1
1
3
1
0
KINGFISHER ﬁltered and identiﬁed no more than 2,000 SC-
related functions in Java code and native code for each
companion app (see #SC-related column). Through our
manual inspections, we observed that SC-related functions are
commonly implemented in speciﬁc components, such as the
third-party Android SDK or libraries. To invoke the libraries
correctly, these components are seldom obfuscated or stripped.
Therefore, KINGFISHER can easily identify the SC-related
functions without being affected by app obfuscation/stripping.
Notice that KINGFISHER did not locate any native functions
in the Horn companion app. We manually examined the app
and found that Horn app implements the whole IoT-to-Mobile
communication in Java code. In general, the ﬁltered SC-related
functions only accounted for a small proportion (around 0.3%)
of all app functions. The results indicated that our interface
locating method is effective in improving analysis efﬁciency,
as it avoids analyzing functions not related to SCs.
False Positive (FP) and False Negative (FN). Due to the large
number of all functions and identiﬁed SC-related functions in
a companion app and the lack of benchmark, it is costly to
manually inspect the FP and FN of KINGFISHER Function
Interface Identiﬁcation results. But FP and FN do not affect the
subsequent SC extraction to a large extent because the value-
based data ﬂow analysis double-checks the identiﬁed SCs.
2) Message Collection: After
locating the SC-related
functions, we executed each companion app to start
the
IoT-to-Mobile communication and meanwhile KINGFISHER
collected the runtime SC-related messages (shown in the
Message Collection column of Table I).
Function Value Collection. KINGFISHER collected infor-
mation about SC-related functions; the results are shown in
the #Function Value Collection column. Generally,
the number of invoked SC-related functions (#Functions
column) ranges from 4 (BroadLink) to 65 (Horn). Also on
the average KINGFISHER recorded 3,909 pieces of function
values (#Values column) for each companion app. Among
them, from Horn we collected more then 10,000 pieces of
function values. The reason is that Horn launches the IoT-to-
Mobile communication during the device binding procedures,
which involve a higher number of operations, such as device
discovery broadcast and SC negotiation.
Trafﬁc Clustering. The #Traffic Clustering column
shows the results of trafﬁc clustering. To ensure that enough
transmitted packets were collected, we executed IoT-to-Mobile
communication for each companion app many times until
more than 100 packets were captured. As a result, the total
number of transmitted packets KINGFISHER collected for each
app (Column #All) ranges from 130 (BroadLink) to 2,391
(Xiaoyi) and the number of IoT-to-Mobile communication
packets (#Local column), ﬁltered by IP addresses, ranges
from 14 (Xiaomi) to 1,757 (Xiaoyi), accounting for about 60%.
After that, KINGFISHER clustered these packets to obtain the
IoT-to-Mobile communication packets that contain SC-related
packets; the results are listed in the #Clustered column.
On the average, 19 packets were ﬁltered for each companion
app, accounting for about 2.4% of the total number of packets.
This proportion also indicates that our trafﬁc cluster methods is
able largely reduce redundancy and improve efﬁciency. After
clustering, KINGFISHER randomly chose one packet from
each cluster for further SC extraction.
False Positive (FP) and False Negative (FN). For the function
value collection, we should only guarantee there is no FN
in our results. Because we adopt the value-based analysis to
recognize the SCs, its accuracy depends on the similarity be-
tween values. Since the IoT-to-Mobile communication related
values are usually present only in speciﬁc protocol patterns,
it is unlikely that other irrelevant parameters or return values
would have high similarity with them. Hence, we just need
to collect enough SC-related values to track the SC data ﬂow.
So we manually checked the results of the Function Value
Collection and found that all the SC values were contained in
our results.
To evaluate the accuracy of trafﬁc clustering, we executed
a manual validation to check the packets in the IoT-to-Mobile
communication packet list. The result of the validation showed
that at least one packet fully met our requirements (that is, to
be related to SCs) for each app, which conﬁrms that our cluster
method is effective in obtaining at least one packet payload to
be used for further analysis to extract the SC.
3) Extracted SCs: After collecting SC-related messages,
KINGFISHER conducted the value-based analysis to extract the
SCs. To evaluate the accuracy of SC extraction results, we ﬁrst
built the SC benchmark for the eight products. Speciﬁcally,
we invited some security experts, who are experienced in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
495
Android app analysis and familiar with IoT systems and their
communication, to help us build a reference dataset for the
used SCs in the eight products. By reverse engineering and
dynamically debugging the apps, constructing control ﬂow
from network interfaces and tracking the SC data ﬂow, we
successfully extracted the used SCs of all the eight products
and their related functions. This procedure took about seven
days and each result was agreed on by at least two experts
to avoid human bias/errors. We took the reference dataset
as the benchmark to evaluate the SC extraction results of
KINGFISHER. Note that there were some SCs changed in
every session, so we also compared the SC-related functions
to double conﬁrm the results.
As shown in the V columns in Table I, KINGFISHER accu-
rately identiﬁed the used SCs in ﬁve products, i.e., Haier, Horn,
Tuya, Xiaoyi and ZTE. The accuracy of KINGFISHER SC ex-
traction is around 69% with 9 correct SCs in 13 identiﬁed SCs.
Interestingly, we found that for Horn and Xiaoyi, KINGFISHER
identiﬁed more than one SC; these results were manually
conﬁrmed. Both solutions assemble two values to construct
the SC, and at the code level, it is correct for KINGFISHER
to label each of them as a separate SC. The labeled SCs
and SC-related functions were further used to detect security
violations. For the three products (i.e., BroadLink, Qihoo and
Xiaomi), in which KINGFISHER did not identify their used SCs
successfully, we manually labeled their SC values and the SC-
related functions for further security violation detection.
False Positive (FP) and False Negative (FN). The extraction
results by KINGFISHER have two false positives; one is related
to the CSC used in BroadLink and the other in the ASC used
in Qihoo. BroadLink implements its IoT-to-Mobile commu-
nication encryption procedure, which manages the CSC, in
native code, so KINGFISHER could not split the CSC from
the string memory buffer since the code contiguously stores
other data directly following the CSC, which does not end
with a sequence of ‘00’. As a result, KINGFISHER recognized
the value as a longer string and excluded it. For Qihoo,
KINGFISHER successfully identiﬁed its CSC but could not
ﬁnd the ASC. This is because Qihoo uses same values and
CSC format as described in Section IV-C to implement both
ASCs and CSCs. Hence, KINGFISHER identiﬁed this value as
a CSC rather than an ASC.
There are two false negatives in the KINGFISHER SC
extraction results, because KINGFISHER mistakenly identiﬁed
the ASC in BroadLink and the CSC in Xiaomi. For BroadLink,
KINGFISHER labeled the CSC value as ASC because one
data construction function (dnaControl) takes a JSON
string including the CSC as a parameter, conforming the ASC
format as described in Section IV-C. The CSC of Xiaomi is
similar to CSC of BroadLink, whose CSC is used as a part
of a string parameter of AES_cbc_encrypt function in
libmiio.so, and KINGFISHER mistakenly identiﬁed three
SC candidates but excluded the correct one.
Generally, KINGFISHER did not recognize the SCs used in
those three products successfully because KINGFISHER did
not identify some SC-related candidates, in which the SC are
TABLE II
SECURITY VIOLATION RESULTS
P6








P2








P3








P4








P5








Vendors
BroadLink
Haier
Horn
Qihoo
Tuya
Xiaomi
Xiaoyi
ZTE
P1








P7








P8








P9








 insecure implementations that violate this property.
 no violation found.
used as individual values and can be parsed correctly, due to
the obfuscation technologies. But as mentioned before, such
failures can be avoided by manually labeling the SC-related
candidates as well as their semantics information in Function
Interface Identiﬁcation without a signiﬁcant time overhead.
C. Security Violations
After obtaining the SCs, we analyzed the whole SC life
cycle and checked whether it satisﬁes the security properties
described in Section III. Table II shows the results of KING-
FISHER analysis for the SC security. As we can see, all the
eight products violate several security properties. In general,
most IoT vendors adopt secure solutions for SC generation and
storage. The only exceptions are BroadLink that implements an
insecure SC generation, and Xiaoyi that violates the security
property of SC storage. On the other hand, all solutions
violate the SC distribution and usage security best practices.
As for SC update, all vendors, except Horn and Xiaoyi, have
a vulnerable implementation. Among the eight IoT vendors,
ﬁve vendors, i.e., Haier, Qihoo, Tuya, Xiaoyi and ZTE, adopt
Cloud-Centric schemes for SC generation and distribution,
whereas two vendors, i.e., BroadLink, Xiaomi, adopt Device-
Centric schemes, in which the SC is generated and distributed
by the IoT device. Only Horn implements a local Mutual
Negotiation between the device and companion app for the SC.
In the following, we describe in details the security violation
detection results obtained by KINGFISHER.
1) Insecurely Generated SCs: Among the analyzed solu-
tions, only BroadLink violated P1 as its SC was predictable
in that it had repeated subsequences. We further checked and
found that the SC of BroadLink was composed by using four
subsequences from a ﬁxed set of 15 subsequences. That means
that the device can only generate a limited number of different
SCs. We infer that this may be caused by constrained device
resources (i.e., memory and processor).
2) Insecurely distributed SCs: All products did not provide
enough protections for the distribution of SCs. For ﬁve devices
(i.e., Haier, Qihoo, Tuya, Xiaoyi and ZTE) adopting Cloud-
Centric schemes, though they utilized TLS to protect the SC
distribution, none of their SC distributions were protected with
secure TLS protocol or multi-authentication, thus violating P2.
The two products using device-centric schemes and Horn with
the mutual negotiation scheme ((i.e., BroadLink and Xiaomi)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
496
implemented their SC distribution without TLS protection,
thus also violating P2. Moreover, two products (i.e., BroadLink
and Xiaomi) generated their SCs locally; however, the SCs
were still reported to the cloud after generation. Thus, we also
consider them as violating P3.
To validate those ﬁndings, we manually checked their
distribution mechanisms and the results conﬁrmed the ﬁndings
of KINGFISHER. Speciﬁcally, Haier, Qihoo, Tuya, Xiaoyi and
ZTE implemented cloud-centric schemes, by which the SCs
were distributed by the cloud and then transmitted to both IoT
devices and companion apps over an HTTPS connection. The
other three vendors implemented their customized SC distri-
bution in the Wi-Fi network. BroadLink utilized the AES-CBC
encryption algorithm to protect the SC distribution. However,
it used the default distribution key and initial vector, which
were embedded in the companion app, so that an attacker
could easily extract
them by reverse engineering the app,
and then decrypt the communication to obtain the transmitted
SC. The Xiaomi companion app ﬁrst connected to the subnet
of the device during the binding phase. The device then
distributed the SC in plaintext to the app under the subnet.
This implementation is vulnerable since the attacker would be
able to obtain the SC by connecting to the subnet and sending
a ﬁxed request message; then the device would transmit the
SC without authenticating the request message. As for Horn,
the SC negotiation process is insecure because of the lack of
encryption protection, so that the attacker can easily obtain
the exchanged nonces by just passive eavesdropping and then
calculate the SC.
3) Insecurely Validated SCs: All
the eight devices im-
plement vulnerable SC validation. Generally, all
the eight
devices violated P4. Except Xiaoyi, seven devices violated P5.
Moreover, six devices (i.e., BroadLink, Horn, Tuya, Xiaomi,
Xiaoyi and ZTE) violated P6.
Six devices implemented one type of SCs, that is, two
devices (i.e., Haier and ZTE) only implemented ASCs while
four devices (i.e., BroadLink, Horn, Tuya and Xiaomi) only
implemented CSCs. Hence, they are considered as violating
P4. Moreover, although Qihoo and Xiaoyi implemented both
ASCs and CSCs,
they used the same value to conﬁgure
ASCs and CSCs. Therefore, KINGFISHER also labeled them
as violating P4.
For the oblivious validation feedback, we found that the SC
responses by all the devices, except for the ones by Xiaoyi,
were different depending on whether the SCs or some other
data (e.g., device identiﬁer, protocol format) were incorrect. As
for Xiaoyi, its responses were always the same independently
of whether we modiﬁed its SCs or other data ﬁelds.
When checking brute attack resistance, we found that six
devices, i.e., BroadLink, Horn, Tuya, Xiaomi, Xiaoyi and ZTE,
would accept more than 20 erroneous connection attempts
without restricting the connection, such as denying requests
from one source IP address. For Haier, it replied with the
same error messages after the ﬁfth attempt even if the SC was
correct. Similarly, Qihoo adopted a strict scheme by which
it did not respond after the second attempt. For the above
two devices, only when resetting the connection, the devices
would return to a normal state, which limits attack efﬁciency
to a certain extent.
In addition to the three security properties, we checked