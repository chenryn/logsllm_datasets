pop    %ebp
ret
...
int 3
int 3
int 3
int 3
int 3
int 3
int 3
Instruction Types:
NR: Redirectable
NR: Non-Redirectable
NN: Neutral
NU: Unknown
TABLE I: A Code Snippet of sys_getpid and the Corresponding Patched Code for Non-Redirectable and Redirectable Page
(a)
(b)
(c)
access to v is redirected to untrusted memory snapshot because
all the virtual to physical address translations for variable
v points to the desired physical page in untrusted snapshot.
FAST-BRIDGE employs a similar technique to conﬁne the
memory access within the secure VM.
Note that changing the page table for each single instruc-
tion will introduce performance overhead, and in fact FAST-
BRIDGE can avoid most of the overhead due to the instruction
locality. In particular, usually instructions with similar type are
located beside each other (this can be witnessed from Table I)
and FAST-BRIDGE leverages this feature to avoid frequent
page table updates for each instruction and set the page table
once for all the adjacent instructions of the same type. FAST-
BRIDGE uses code patching described below to inform KVM
when the page table should be updated.
Dynamic Code Patching. As mentioned before, FAST-
BRIDGE switches the data redirection policy by manipulating
the page tables. An important question popping up is “how
FAST-BRIDGE informs KVM it is time to change the data
redirection policy”. In our design, FAST-BRIDGE employs
int3, a common technique used by debuggers to set up a
break point. FAST-BRIDGE overwrites the ﬁrst instruction that
has a different redirection policy from the previous instructions
by int3. In this way, when an int3 is executed, KVM
catches the software trap and knows this is the time to change
the data redirection policy by manipulating the page table.
For instance, instructions in line 1-4 of sys_getpid in
column (a) of Table I are non-redirectable or neutral and they
are executed with no data redirection policy. But instruction at
line 5 is redirectable and has a different data redirection policy
from previous instructions and thus FAST-BRIDGE patches
instruction at line 5 as shown in column (b) of Table I. Next,
when FAST-BRIDGE executes the code page as of column (b)
of Table I, int3 at line 5 will cause a software trap and notify
the KVM to change the data redirection policy.
The next question is “what should happen to the instruc-
tions that are overwritten by int3?” FAST-BRIDGE actually
makes several copies of the kernel code to make sure kernel
control ﬂow would not be affected in spite of the dynamic code
patching. More precisely, FAST-BRIDGE makes four copies
of kernel code pages namely redirectable code page, non-
redirectable code page, semi-redirectable code page and bi-
redirectable code page. Each code page has some part of
original kernel code page as well as int3 patches for the
unknown instructions if there is any.
FAST-BRIDGE constructs non-redirectable code page by
copying all the non-redirectable and neutral kernel instruc-
tions and patch all the remaining instructions (redirectable,
semi-redirectable, bi-redirectable, and unknown instructions)
with int3. The column (b)
in Table I depicts a non-
redirectable code page which is derived from a code snippet of
sys_getpid in column (a) of Table I. Instructions in lines
5, 6 and 7 in column (b) of Table I are patched because they
6
are redirectable and instructions at lines 36 and 37 are patched
since they are unknown instructions.
instructions. The rest
More speciﬁcally, FAST-BRIDGE constructs each code page
with kernel instruction of the corresponding category as well
as the kernel neutral
instructions of
that category are all patched with int3 to make sure KVM
always takes control and changes the data redirection for
different categories of instructions. FAST-BRIDGE constructs
redirectable, semi-redirectable and bi-redirectable code pages
by following this rule. For example, column (c) of Table I
shows redirectable code page which contains redirectable and
neutral instructions.
As we mentioned earlier, each of the four kernel code
pages has a special data redirection policy and FAST-BRIDGE
overwrites the instruction whose data redirection policy does
not match with the code page policy with an int3. Such a
simple technique notiﬁes KVM the right moment to change
the data redirection policy. An important advantage of using
four different kernel code pages embedding with int3 is that
FAST-BRIDGE preserves the original kernel control ﬂow as
what it should be, and changes the data redirection policy
without
the need of any sophisticated kernel control ﬂow
analysis.
Considering the virtual address of instructions in Table
I (b) and Table I (c), we notice that FAST-BRIDGE maps
the redirectable and non-redirectable code pages at the same
virtual address to preserve the kernel control ﬂow. In other
words each time FAST-BRIDGE changes the data redirection,
it also re-maps the appropriate kernel code page. Next, we
describe how FAST-BRIDGE uses Algorithm 1 at the right
moment to map appropriate code page for each data redirection
policy.
The Control Transfers of the Patched Code. While instruc-
tions in FAST-BRIDGE have six different categories, control
ﬂow will be as usual for neutral instructions. As such, in the
following we focus on the other ﬁve categories and describe
how FAST-BRIDGE uses Algorithm 1 to choose the appropriate
kernel code page and map it for each different category during
the kernel instruction execution:
1) Non-Redirectable: As described earlier, non-redirectable
instructions should be restricted to the secure VM mem-
ory. Line 7 of of Algorithm 1 restricts the memory access
to the local secure VM by using the original secure VM’s
page table and the non-redirectable code page through
manipulating the page table entires. Table I (b) shows
a non-redirectable code page which is mapped to the
same virtual address as original kernel code page in Table
I (a). We can see that the original program semantics
is still preserved. For instance, instructions in lines 1-
4 of non-redirectable code page in Table I (b) would
be executed just like the original kernel code page but
instruction 5, int3, would cause a software trap and a
VM exit. KVM then looks up the data redirection policy
for this instruction and ﬁnds out that instruction 5 is a
redirectable instruction by querying the memoized Meta-
Data, and consequently redirectable code page will be
mapped and executed.
Algorithm 1: SetPageTable(M D, pc, stack): Construct
Page Table to Enforce Data Redirection based on Instruc-
tion Type
Input: Meta-Data MD shared by SLOW-BRIDGE, Program
Counter of instruction under investigation pc and
Kernel stack of secure VM stack
Output: Return Appropriate P ageT able to Enforce Data
Redirection for instruction located at address pc
1 Instruction Type it   MD.InstructionType[pc];
2 if IsBi-Redirectable(it) then
3
4
5 switch it do
6
7
CallSiteChains CSCs   MD.CallSiteChain[pc];
it   Match&FindType(stack , pc, CSCs)
case Non-Redirectable:
return [Original Secure V M P ageT able
+ Non-Redirectable Code P age];
8
9
10
11
12
13
case Redirectable:
return [U ntrusted Snapshot P ageT able
+ Redirectable Code P age];
case Semi-Redirectable:
return [U ntrusted Snapshot P ageT able
+ Original Secure V M P ageT able[stack]
+
Semi-Redirectable Code P age];
case U nknown:
call FALLBACK
2) Redirectable: All the data access for redirectable instruc-
tions should be forwarded to untrusted memory snapshot
and the redirectable code page should be mapped instead
of the original kernel code. To this end,
line 9 of
Algorithm 1 manipulates the page table to point to the
untrusted VM snapshot. During virtual to physical address
translation in secure VM using manipulated page table
entires, virtual addresses of secure VM are translated into
physical addresses of untrusted memory snapshot. In this
way secure VM (i.e., our KVM) can access the snapshot
memory of the untrusted VM transparently.
Line 9 of Algorithm 1 also maps redirectable kernel
code page. Table I (c) illustrates the redirectable kernel
code page of sys_getpid shown in Table I (a). Using
Algorithm 1, KVM changes the page table and maps
the redirectable code page,
then instructions 5-7 are
executed while accessing the untrusted memory snapshot.
Instruction 8 of redirectable code page, int3, informs
KVM to change the data redirection policy to non-
redirectable by raising a software trap.
3) Semi-Redirectable: Based on semi-redirectable instruc-
tion deﬁnition, these instructions are allowed to reference
non-redirectable data (i.e., stack) in trusted VM and the
redirectable data of untrusted VM. Line 11 of Algorithm
1 manipulates page table to map the memory of un-
trusted VM snapshot, trusted VM kernel stack and semi-
redirectable code page.
4) Bi-Redirection: For bi-redirection instructions, whether
they are redirectable depends on the execution context.
Ideally, we should use the kernel code execution path to
precisely represent the execution context. To that end, we
7
have to instrument all the branch and call instructions to
track the path, which is very expensive and contradicts
our design. Therefore, we use a lightweight approach to
approximate the kernel execution path.
Speciﬁcally, we use a combination of the instruction
address (i.e., the P C) and the Call-Site-Chain (CSC),
which is deﬁned as a concatenation of all return addresses
on the kernel stack, as the representation of a unique
execution context. SLOW-BRIDGE provides a set of CSC
that are stored in the Meta-Data for each bi-redirection
instruction bi. While this approximation is less precise,
our experimental results (§VII) reveal that for each bi, the
CSC and P C uniquely distinguishes the execution con-
text. If it happens that CSC and P C are not sufﬁcient to
distinguish the correct execution context, then HYBRID-
BRIDGE will fail and we have to warn the user, though
we have not encountered such a case. Note that HYBRID-
BRIDGE is able to detect this by simply checking the
Meta-Data.
In particular, before a bi gets executed, as illustrated
in line 3 of Algorithm 1 FAST-BRIDGE retrieves the
CSCs for current instruction pointed by P C from the
Meta-Data. Line 4 of Algorithm 1 then matches CSCs
with current kernel stack. If any of the CSCs matches
with current stack then FAST-BRIDGE picks the correct
data redirection policy between redirectable or non-
redirectable and resumes the execution. Otherwise, the
instruction type would be unknown and FALLBACK is
invoked to ﬁnd the appropriate policy.
To retrieve the CSC from the current kernel stack, FAST-
BRIDGE reads each speciﬁc return address from the offset
location information provided by the memoized Meta-
Data. This offset
location of a return address inside
a stack frame is acquired by SLOW-BRIDGE through
dynamic binary instrumentation. In other words, we do
not actually need guest kernel to be compiled with stack
frame pointer.
5) Unknown: If an unknown instruction (e.g., line 36 in
Table I) gets executed, KVM catches the software trap and
queries Algorithm 1. Since FAST-BRIDGE dose not know
the corresponding data redirection policy for unknown
instructions, lines 13 and 14 of Algorithm 1 falls back
to SLOW-BRIDGE to ﬁnd out the correct data redirection
policy. This is the only moment when SLOW-BRIDGE will
get invoked in HYBRID-BRIDGE.
IV. SLOW-BRIDGE
SLOW-BRIDGE, as depicted in the left hand side of Fig. 2,
consists of (1) a trusted VM that is installed with the same
version of the guest OS kernel as of FAST-BRIDGE, and
(2) an untrusted guest OS memory snapshot forwarded by
FALLBACK from FAST-BRIDGE. SLOW-BRIDGE provides two
important services for FAST-BRIDGE:
Instruction Type Inference. As discussed in §III-B,
instructions are classiﬁed into six different categories,
and the classiﬁcation is done by SLOW-BRIDGE.
Fall Back Mechanism. When FAST-BRIDGE faces a
•
•
8
E
c
esp
R
TV[E]
0
1
TV[R]
R := R0
R := ⇤(R0)
(⇤R) := R0
R0 op R00
T V [R] := T V [R0]
T V [R] := T V [⇤R0]
T V [⇤R] := T V [R0]
T V [R0] || T V [R00]
op R0
T V [R0]
Comments
Constants are always untainted
Stack pointer is always tainted
Taint value of register or memory
R
⇤ is the dereference operator
op represents a binary arithmetic
or bitwise operation
op represents a unary arithmetic or
bitwise operation
TABLE II: Taint Propagation Rules
new code path and does not know the appropriate data
redirection policy, SLOW-BRIDGE provides a vital fall
back mechanism to deal with this issue.
At a high level, SLOW-BRIDGE works as follows: when
an inspection tool inside the trusted VM of SLOW-BRIDGE
invokes a system call, it will then identify the system call of
interest (§IV-A), pinpoint the redirectable variables (§IV-B),
infer the corresponding redirectable instruction types (§IV-C),
perform data redirection (§IV-D), and share the Meta-Data
with FAST-BRIDGE. In the following, we present how SLOW-
BRIDGE works regarding these behaviors.
A. Detecting the System Calls of Interest
SLOW-BRIDGE is interested in systems calls that reveal
the internal states of an OS. In terms of the identiﬁcation
of the system call interest, SLOW-BRIDGE has no difference
compared to VMST. Speciﬁcally, SLOW-BRIDGE is interested
in two types of system calls: (1) state query system calls (e.g.
getpid) and (2) ﬁle system related system calls which inspect
the kernel by reading the proc ﬁles. SLOW-BRIDGE follows
a similar approach to VMST and inspects 14 ﬁle system and
28 state query system calls (c.f., [19]).
B. Redirectable Variables Identiﬁcation
Redirectable variables, described in §III-A, are kernel data
accessed by inspection tools to reveal the system status. There
are two approaches to identify redirectable variables. The
ﬁrst approach follows a typical
introspection footsteps by
reading interesting kernel global variables which are exported
in System.map. Following the global variables, introspection
tools reach out to kernel data structures in heap and extract
system status. Finding relevant set of global variables for each
system call is a challenging task especially considering the fact
that this list has to be tailored for different versions of OSes.
As such, the second approach focuses on non-redirectable
variables and redirects the rest of kernel data in the speciﬁc
system call execution context. A simple deﬁnition of non-
redirectable variable is all variables derived from kernel stack
pointer (i.e., esp) which are tied to the local trusted system.
SLOW-BRIDGE follows the second approach and embodies a
taint analysis engine to ﬁnd all the data derived from esp.
Note that this approach has been proposed in VMST [19] and
SLOW-BRIDGE has no technical contribution regarding this.
The taint analysis engine maps each register and memory
variable to a boolean value called taint value (TV). All TVs are
initialized to zero except the taint value of esp (TV[esp])
which is set to one. The initial taint values indicates that at the
start of a system call, esp is the only data that is considered
non-redirectable. A concise description of the rules for taint
propagation is presented in Table II, though more detailed rules
and design can be found in [19]. All the access to variable
R with TV[R] equal to zero is redirected to the untrusted
memory snapshot. If TV[R] is equal to one, FAST-BRIDGE
would use the local value of variable R from trusted VM.
C. Inferring Instruction Redirectability
Tracking redirectable variables also enables SLOW-
BRIDGE to infer kernel instruction’s data redirection types
based on their interaction with the redirectable variables. To
this end, SLOW-BRIDGE logs every instructions executed along
with all the memory references in the context of a monitored
system call. SLOW-BRIDGE then traverses the log ﬁle to infer
each instruction into one of the instruction category mentioned
in §III-B. More speciﬁcally, SLOW-BRIDGE uses the following
rules to infer the instruction redirection type:
1) Redirectable: If all execution records of an instruction
always accesses the redirectable variables, this instruction
is categorized as redirectable instruction.
2) Non-redirectable:
If all execution records of an in-
struction always accesses non-redirectable variables, this
instruction is a non-redirectable instruction.
3) Semi-Redirectable: If an instructions access two vari-
ables, one redirectable and the other non-redirectable in a
single record, this instruction is called semi-redirectable.
4) Bi-Redirection: If there are several execution records
showing that an instruction accesses redirectable and non-
redirectable variables always in different execution con-
text, then this instruction is categorized as bi-redirectable.
Note that having taint tracking engine, SLOW-BRIDGE
infers whether bi-redirectable instruction is referencing
redirectable or non-redirectable variable in each execu-