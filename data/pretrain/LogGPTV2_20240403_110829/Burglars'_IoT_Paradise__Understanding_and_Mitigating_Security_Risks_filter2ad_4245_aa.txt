title:Burglars' IoT Paradise: Understanding and Mitigating Security Risks
of General Messaging Protocols on IoT Clouds
author:Yan Jia and
Luyi Xing and
Yuhang Mao and
Dongfang Zhao and
XiaoFeng Wang and
Shangru Zhao and
Yuqing Zhang
Burglars’ IoT Paradise: Understanding and
Mitigating Security Risks of General Messaging
Protocols on IoT Clouds
Yan Jia1,2,3† , Luyi Xing3 , Yuhang Mao1,2, Dongfang Zhao3,
XiaoFeng Wang3, Shangru Zhao1,2, and Yuqing Zhang2,1∗
2National Computer Network Intrusion Protection Center, University of Chinese Academy of Sciences ,China
1School of Cyber Engineering, Xidian University, China
3Indiana University Bloomington, USA
Abstract—With the increasing popularity of the Internet of
Things (IoT), many IoT cloud platforms have emerged to help the
IoT manufacturers connect their devices to their users. Serving
the device-user communication is general messaging protocol
deployed on the platforms. Less clear, however, is whether such
protocols, which are not designed to work in the adversarial
environment of IoT,
introduce new risks. In this paper, we
report the ﬁrst systematic study on the protection of major
IoT clouds (e.g., AWS, Microsoft, IBM) put in place for the
arguably most popular messaging protocol – MQTT. We found
that these platforms’ security additions to the protocol are all
vulnerable, allowing the adversary to gain control of the device,
launch a large-scale denial-of-service attack, steal the victim’s
secrets data and fake the victim’s device status for deception.
We successfully performed end-to-end attacks on these popular
IoT clouds and further conducted a measurement study, which
demonstrates that the security impacts of our attacks are real,
severe and broad. We reported our ﬁndings to related parties,
which all acknowledged the importance. We further propose new
design principles and an enhanced access model MOUCON. We
implemented our protection on a popular open-source MQTT
server. Our evaluation shows its high effectiveness and negligible
performance overhead.
I. INTRODUCTION
The popularity of Internet of Things (IoT) devices and the
demands for their convenient deployment and control give rise
to a new type of services, dubbed IoT cloud platforms. Such
platforms are widely deployed by IoT device manufacturers to
enable users to remotely control various devices such as smart
locks, switches, thermostats, etc., from everywhere at anytime
(Fig. 1). Today, many leading cloud service providers and IoT
device manufacturers provide such cloud services. Examples
include AWS IoT Core [1], Microsoft’s Azure IoT Hub [2],
and Samsung’s SmartThings [3]. At the center of these ser-
vices is the mechanism that mediates the communication (e.g.,
control commands and messages) between IoT devices and
users. Such communication is built on existing general mes-
saging protocols, in particular MQTT (Message Queuing and
Telemetry Transport). MQTT is an OASIS standard [4] and
†The majority of work was done when the ﬁrst author was visiting Indiana
University Bloomington.
∗Corresponding author
designed to support the communication with weak computing
devices over unreliable and low-bandwidth channels, and thus
is well suited for IoT-user interactions. Hence, it has been
widely adopted by mainstream IoT clouds [5], including those
offered by AWS, Microsoft, IBM, Alibaba, Tuya, Google, etc.
Security risks in MQTT. Unfortunately, MQTT is not de-
signed to operate in an adversarial environment, and therefore
cannot protect itself against potential threats to the IoT systems
it serves. More speciﬁcally, the protocol has almost no built-
in mechanisms for authentication and authorization, forcing
the cloud platform providers to develop their own safeguards.
Given the complexity in customizing the general-purpose
protocol to work in diverse IoT application scenarios, effective
protection of its communication is challenging. In the absence
of a proper security analysis, there is little conﬁdence that the
user-device interactions have been effectively secured. Given
the critical role the protocol plays, any security weakness, once
exploited, could have serious consequences, such as loss of
device control, disclosure of sensitive user data, etc. However,
with the importance of the problem,
little has been done
so far to understand whether MQTT and the communication
mechanism it supports have been adequately protected.
Attacks. In our research, we performed the ﬁrst systematic
study on the security threats to the integration of a general
messaging protocol on major IoT clouds. As a ﬁrst step, we
focused on MQTT, arguably the most widely-adopted protocol
across IoT cloud platforms [5]. Our research shows that
the cloud’s security additions to MQTT are often vulnerable
(Section III). Exploiting such vulnerabilities, the adversary
can (1) control
the victim’s devices (e.g., unlocking the
door and window), (2) infer sensitive user information, such
as her daily routine, health condition, location, cohabitant,
(3) perform a denial-of-service (DoS) attack against a vast
number of devices, and (4) impersonate a target device to the
cloud to manipulate the messages delivered to the user. The
consequences of such attacks are signiﬁcant, sometimes even
devastating. For example, we found that the weak authorization
on Suning Smart Living enables a remote adversary to collect
all events produced by all the devices managed by the cloud,
including identiﬁable user information (such as emails, phone
numbers) and device information.
Looking into the root causes of these ﬂaws, we found that
most IoT clouds today fail to appreciate the security implica-
tions in running a relatively simple general messaging protocol
in complicated IoT environments, leaving the door wide open
to new risks when the gap between the protocol and real-world
device-use scenarios has not been fully covered with proper
protection. Particularly, we found that the revocation process,
which has not been considered in MQTT, presents a serious
security challenge to its application to IoT communication.
IoT devices (like a smart lock) today are increasingly shared
among users, e.g., hotel dwellers, Airbnb apartment renters,
home visitors (such as babysitters, etc.), according to recent
studies [6]–[10]. Once a person’s access right to a device has
been terminated, he should not be allowed to connect to it
again without proper authorization. This protection, however,
is found to be hard to enforce on mainstream platforms, due
to the utility-oriented design of the protocol that gives the
user various ways to reach devices: our research shows that
through a topic, a session and other entities, a malicious
ex-user can retain full control of the devices on which his
access privilege has expired, even receiving the current user’s
private messages like health conditions, cohabitation relations,
etc. (Section III-A, III-B and III-D). Also discovered is the
observation that security-sensitive states and state transitions
in the original protocol have not been fully identiﬁed and
secured for running the protocol in an adversarial environment.
For example, MQTT includes a ClientId ﬁeld as a unique
identiﬁer for each client, and the cloud disconnects an existing
client when a new client with the same ClientId shows up.
This entity is not protected in the original protocol, due to
its design for operating in a benign environment. However,
when the protocol is run on an IoT cloud, in the absence of
authentication involving the entity, we found that the adversary
can abuse the protocol state to disconnect clients through
claiming their ClientIds in a large scale, which leads to a DoS
attack or even MQTT session hijacks (Section III-C).
Impacts. To understand the impacts of these security ﬂaws,
we conducted a measurement study that analyzed eight leading
IoT cloud platforms (including those provided by AWS, IBM,
Microsoft, etc.). Our research has revealed the pervasiveness
and signiﬁcance of the security risks: Most of these plat-
forms contain such critical ﬂaws in their customized MQTT
protocols, exposing thousands of device manufacturers and
millions of users to the aforementioned hazards (Section IV).
We reported all discovered problems to the affected parties,
including AWS, Microsoft, IBM, Alibaba, Baidu, Eclipse
Mosquitto, etc., and are working with them to address these
issues. Most importantly, our ﬁndings have been brought to
the attention of the MQTT Technical Committee (TC), which
is seeking solutions through open discussion now [11]. The
video demos of our attacks are posted online [12].
Given the pervasiveness and signiﬁcance of the problems
discovered, we envision that serious efforts need to be made
to standardize authentication and authorization protection of
general messaging protocols for IoT clouds. As a ﬁrst step,
we propose a set of secure design principles and implemented
them on Mosquitto [13], a popular open-source MQTT server.
Our evaluation shows that this protection incurs only a neg-
ligible overhead and effectively addressed all the problems
we discovered. We are communicating with the MQTT TC
about the solution and helping them enhance protection of
the protocol. Also we release the code of our technique
online [14].
Contributions. The contributions of the paper are outlined as
follows:
• New understanding of secure IoT communication. We per-
formed the ﬁrst systematic study on security risks in use of
the general messaging protocol for IoT device-user commu-
nication. Our research reveals the gap between the protocol
designed for operating in a simple and benign environment
and the complicated, adversarial IoT use scenarios, and the
challenges in covering the gap with proper security means
(through both extending the protocol to cover new scenarios
such as revocation and protecting existing security-sensitive
states and transitions). The lesson learned from the study
will contribute to better design and implementation of other
protocols to work in adversarial environments.
• Measurement. We demonstrate the pervasiveness of the
security risks across leading IoT cloud platforms and a popular
open-source MQTT server, and identify the serious conse-
quences of the attacks on the vulnerabilities discovered.
• Secure design principles and implementation. We proposed
new security principles in customizing general messaging pro-
tocols for IoT clouds and implemented end-to-end protection.
We show that our approach is both effective and efﬁcient,
and can be conveniently integrated into today’s IoT platforms.
Through our communication with the MQTT TC and IoT
cloud platforms, this ﬁrst step could lead to better protection
of user-device interactions in the real world.
II. BACKGROUND
A. Cloud-based IoT Communication
Architecture. A cloud-based IoT system typically includes
three components: the cloud (also referred to as cloud platform
in this paper), the IoT device, and the user’s management
console (mobile apps in particular) to control the device, as
illustrated in Fig. 1. Central to the system is the cloud that
manages the communication between the device and the app,
through which the app sends control messages (commands) to
the device (e.g., to lock a smart door) and gets information
back from the device (e.g., temperature from a thermostat, the
“on” or “off” status of a lock). To protect such interactions,
the cloud authenticates the device and the app (representing
a user), and decides whether the user should be allowed to
command the device or receive messages from it. To this
end, the cloud provider offers SDKs that implement certain
messaging protocols (e.g., MQTT), which are integrated by
the IoT manufacturers into their devices and mobile apps for
2
Fig. 2. Use MQTT protocol for IoT communication
a SUBSCRIBE message (including its topic) to the broker.
The broker maintains the subscription status for each session
and delivers the MQTT message published to a topic to its
subscribers. Through this channel, an app can work on its
user’s behalf to operate on a device, by publishing commends
to the topic the device subscribes (e.g., start or stop). Also, the
device can periodically update its state information to a topic,
such as the current temperature, which is received by all the
apps subscribing to the topic.
In this process, the whole MQTT communication relies on
four entities: identity (ClientId), message, topic and session.
Hence, whether these entities have been well protected is criti-
cal to the protocol’s secure application to the IoT environment.
B. Protection of MQTT on IoT Clouds
As a general messaging protocol, MQTT is not designed
to work in an adversarial environment: for example, it lacks
build-in authentication and authorization. To protect the com-
munication involving sensitive IoT devices (e.g., door locks,
cardiac devices, security cameras, ﬁre detectors), particularly
private information such devices collect, an IoT cloud often
has its custom security mechanisms in place to authenticate
MQTT clients and authorize the parties eligible for publishing
or subscribing to an MQTT topic. Here, we summarize such
protection deployed on leading IoT clouds based on our study
of eight leading IoT clouds.
Client authentication. MQTT connections go through Web-
Socket and TLS [21], which are authenticated using a variety
of mechanisms deployed on different IoT clouds. For example,
AWS IoT supports Amazon username/password, single sign-
on (SSO) [22] through Google/Facebook, and Amazon Cog-
nito [23] (a login scheme across various AWS cloud services).
As another example, in a TLS connection, the client presents
a cryptographic certiﬁcate to authenticate to the cloud with the
TLS client authentication mode [24] – a typical approach to
authenticate devices, which may carry built-in certiﬁcates.
Client authorization. The IoT cloud platform aims to ensure
that each user can only send commands to and receive mes-
sages from the devices the person is allowed to use. For this
purpose, the cloud enforces a set of security policies. Examples
include the topics and messages a client is allowed to access
and the actions (e.g., publish or subscribe) it can take.
C. Threat Model
We assume that the adversary can open user accounts with
IoT device manufacturers and IoT clouds and is also capable
of collecting and analyzing network trafﬁc between the IoT
cloud, the IoT device and the app under his control. On the
Fig. 1. Architecture of cloud-based IoT communication
communication through the cloud. This paradigm has been
adopted by most IoT cloud providers (e.g., AWS, Microsoft,
IBM, Tuya, Alibaba) and device manufacturers [15], [16].
MQTT and its IoT application. A publish-subscribe mes-
saging protocol allows the sender to deliver messages to a
class [17], based upon the topic of the messages or its content,
subscribed by a group of receivers. A prominent example is
MQTT1, which is an application-layer protocol (based on the
OSI model [19]), and runs over TCP/IP or other ordered, loss-
less, bi-directional connections like WebSocket [20]. MQTT is
known for its light-weight design, which works on resource-
constrained devices in low-bandwidth or unreliable networks,
and thus is well suited for supporting the IoT ecosystem.
At the center of MQTT-based IoT communication is MQTT
message broker (or broker for short in this paper), as shown in
Fig. 1. The broker hosts MQTT topics at its server endpoint
with each topic structured like a hierarchical ﬁle path, such
as /doorlock/[UUID-8JH...S9P]/status. With the
broker as the connection pivot, MQTT leverages a pub-
lish–subscribe pattern [17] for communication: the MQTT
client (e.g., an IoT device or a management app) publishes
a message to a speciﬁc topic hosted by the broker,
then
the broker routes the message to the other clients that have
subscribed to the topic. A client can subscribe to a speciﬁc
level in a topic’s hierarchy or use a wildcard (#) to connect to
multiple levels.
In the MQTT communication, the client sends three basic
types of messages to the broker, CONNECT, PUBLISH and
SUBSCRIBE, as illustrated in Fig. 2. First, the MQTT client,
e.g., a smart air conditioner or an app, sends a CONNECT
message to the broker for establishing an MQTT session
(if the broker accepts the connection). The session and the
client are uniquely identiﬁed by a ClientId ﬁeld (embedded
in CONNECT message), which is similar to a web session
cookie. In the established session, an IoT device subscribes
to its associated topic (e.g, /DeviceId/cmd) by sending
1In this paper, we mainly focus on MQTT version 3.1.1, which is widely
adopted by all leading platforms we studied (e.g., AWS, Microsoft, IBM,
Alibaba, etc., see measurement Section IV). Although the latest version
5.0 [18] has already been released in 2019, it has seen a limited deployment
so far, as observed in our measurement study. In the meantime, most of our
problems found in our research are also present in the new version.
3
CommandsMessage brokerDevice manufacturerIoT cloudConfigurePolicyCommandsInformationInformationMobile applicationIoTDeviceUserControlSUBSCRIBE Topic:{DeviceId/cmd}Identity ManagementDeviceId/cmdCONNECT {ClientIdA}DeviceId/statusTopic IoT CloudIoT DeviceAppSUBSCRIBETopic:{DeviceId/status}PUBLISHMessage:{cmd:Start}PUBLISHMessage:{cmd:Start}PUBLISHMessage:{status:72℉}PUBLISHMessage:{status:72℉}CONNECT {ClientIdB}SessionSessionother hand, he cannot eavesdrop on the communication of
other users’ devices and apps.
In some of our attacks, we consider the device-sharing situa-
tion that becomes pervasive today. Hotels, Airbnb, apartments
and other vacation rental homes are increasingly equipped with
IoT devices and their guests are routinely granted temporary
access to the devices [7]–[10]. A recent study [6] further
shows that most people are willing to share their devices (e.g.,
smart lock), for example, with family visitors or babysitter,
etc. Under these circumstances, an IoT access control model
is expected to handle revocation in a secure and reliable way,
which is completely outside the original MQTT protocol. Note
that except the study on revocation, we do not assume that the
attacker is granted temporary access to target device(s) in other
attacks.
III. SECURITY ANALYSIS OF MQTT IOT CUSTOMIZATION
In this section, we report a security analysis on the MQTT-
based communication mechanisms operated by leading IoT
cloud platforms. Our study systematically inspected individ-
ual protocol entities, including identity, message, topic and
session, in an attempt to understand whether their related
security-sensitive protocol states have been properly guarded
or whether they could be abused to circumvent
the IoT
protection MQTT does not support. The study shows that such
security gaps do exist and oftentimes, these entities have not
been properly authenticated or authorized to cover the gaps.
To understand the security implications of the ﬁndings, we