Boad
*44
45
90
EOF
argc
/usr/include/stdio.h
prog.c
3
argv
prog.c
main
prog.c
61
9
81
calldata
prog.c
prog.c
main
38
S+
61
ca11s
prog.c
prog.c
main
54
188
prog.c
main
54
加入jaVa编程群：524621833
---
## Page 309
第9章调试与纠错
291
在作者的机器上，上面这些输出是用下面这条命令产生的：
Scxref *.c*.h
这个命令的语法格式随版本的不同而不同。如果想了解系统上有没有xref或者想了解它的使
用方法，请参考系统文档或用man命令查阅它的使用手册页。
3.cflow程序
cflow程序的作用是生成一个函数调用树，这个示意图按从全局到局部的顺序列出了函数彼
此调用与被调用的关系。它可以让我们看清楚一个程序的框架结构，弄懂它的操作流程，了解
对--个函数的改动将会产生什么样的后果等。有些版本的cflow除了能对源代码进行处理外，还
可以处理目标代码文件。详细资料和使用方法请查阅使用手册页。
下面是某个cfiow版本（cflow-2.0）的输出样本，该版本可以从因特网上下载到，它的维护
工作是由MartyLeisner负责的。如下所示：
file_ungetc (prcc.c 997)
nain (prce.c 70)
3
getopt()
4
show_al1_11sts (pree.c 1070}
5
display_list (prcc.c 1056}
exit (}
ptintf()
60 9
7
usage (prcc.c 59)
exit (}
10
11
fprintf ()
exit {}
这个输出样本告诉我们：main调用了show_all_lists（以及其他一些函数），show_all_lists又
调用了display_lists，而display_lists本身调用了printf。
这个版本的cflow有一个“-i”选项，它的作用是按从局部到全局的顺序生成一个函数调用
树。对应着每个函数列出都有哪些函数调用了它。这说起来好象很复杂，可实际做起来很简单。
下面是一个样本：
display_1ist (prce.c 1056)
22
20
exit {}
show_al1_lists (prcc.c 1070)
show_al1_lists （prcc.c 1070)
main (prcc.c 70)
23
24
usage (prcc.c 59)
75
printf ()
display_1ist (prcc.e 1056)
76
show_all_lists(prec.c 1070)
maketag(prcc.c487)
78
77
main (prce.e 70)
99
100
usage (prcc.c 59)
main (prce.e 70)
我们可以看出（比如说）都有哪些函数调用了exit：它们是main、show_alllists和usage。
9.4.3执行记录
执行记录是查找程序执行性能低下这类问题原因的一种常用技巧。它需要有编译器特殊选
项和输助程序的支持，从程序的执行记录文件可以否出它的时间都用在什么操作上了。
加入jaVa编程群：524621833
---
## Page 310
292
Linux程序设计
prof和gprof程序
在编译程序的时候，给编译器加上“-p”标志（对应于prof）或“-pg”标志（对应于gprof）
就能创建出这样一种程序：它在执行的时候将生成一个执行记录（类似于航空飞行记录）文件，
我们把这类程序叫做“人档程序”。prof程序（和它的GNU等效工具gprof）的作用就是根据执行
记录文件总结出一个程序性能报告来。编译命令如下所示：
程序是用一个特殊版本的C语言库链接出来的，将会增加一些监控代码。不同的系统在做法
会有所差异，但一般都要靠程序的频繁中断来实现监控功能，每次中断都会把程序当前执行到
的位置记录下来。这些监控数据将被写到当前子目录里的mon.out文件（gprof程序用的是
gmon.out）里去。如下所示：
$./progran
$ 1s -1a
2 -rw-r--r--
1neil
users
1294 Feb 4 11:48 gton.out
prof/gprof程序读取这些监控数据，生成一个报告。程序选项及其使用方面的细节请查阅它
的使用手册页。下面是一些（有所删节）示例性的gprof输出：
cuulative
self
self
total
seconds
seconds
0.10
calls
8664
ms/ca11
18.5
0.10
ms/ca11
_doscan [4]
rase
18 .5
0.20
0.10
0.01
EO"0
14.8
0.28
0.08
43320
0.00
0.00
mcount (60)
'6
0.33
0 .05
8664
0.01
0.01
_totnat_arg
_mumber
[5]
7. 4
0.37
0.04
112632
0.00
0.00
[6]
7. 4
0.41
0.04
0.00
0.00
Adoouau"
_ungetc
[6]
[8]
3 .7
7.4
0 . 45
0.47
0.04
53
40.00
2006
0.02
0.38
0.38
_main
[2]
3 ,7
0.49
0.02
w4str
read
[12]
1.9
0.50
0.01
26034
0.00
0.00
[10]
1.9
0.51
0.01
8664
0.00
_strlen
[161
strncnp [17]
9.5假设验证
在软件的开发过程中，引入printf调用等调试性代码，进行条件性编译等做法都是很正常
的：但成品软件里还留有这些信息的情况倒不多见。经常会出现这样的情况：程序操作中出现
一些所谓“不会发生的”事件。比如说，入们在编写函数的时候会认为它的输人参数会落在一
个确定的范围内；而万一给它传递了不正确的数据，它就可能毁掉整个系统。
系统的内部逻辑必须保持步调一致，X/Open为此专门提供了一个宏定义assert。它的作用是
检验某个假设是否成立，如果假设不成立的话就立刻停止程序的运行。
#include 
void assert(int expression )
assert宏对表达式expression进行求值，如果结果非零，它会先往标准错误写一些诊断信息，
然后调用abort结束程序的执行。
头文件assert.h定义的宏受NDEBUG标志的影响。如果程序里包括了这个头文件，但又定义
加入jaVa编程群：524621833
---
## Page 311
第9章调试与纠错
了NDEBUG标志，asser宏就不会被定义了。这就意味着我们可以在编译期间关闭假设验证功能，
只要加上“-DNDEBUG”选项或者在把下面这条语句：
detine NDEBUG
加到每一个源文件的开头，先于“#include”语句就可以了。
assert带来的问题
但assert的这种用法隐含着一个问题。如果你在测试阶段使用了assert，但在成品代码里把这
-功能关闭了、那你的成品代码在安全检查方面就比你对它进行测试时要差一些。在成品代码
里激活假设验证功能是不可取的一一你愿意顾客在使用你的软件时屏幕显示一条不友好的
“assertfailed”错误提示，然后就退出程序吗？比较好的解决办法是编写自己的错误捕提例程，
你可以在这个例程里实现一些假设验证功能，在成品代码里也不必完全禁止这些功能了。
还必须注意不要让asser表达式带上副作用。举例来说，如果你使用了一个带副作用的函数
调用，这个副作用在去掉了假设验证功能的成品代码就不会再发生了。
下面这个assert.c程序定义了一个函数，它的参数必须是一个正数值。它用一个假设验证功
能来保护自己不受非法参数的影响。
动手试试：assert宏
先是必要的头文件，其中包括assert.h。然后定义了一个平方根函数，它要求自己的参数必
须是正的。最后是我们编写的main函数：
#include 
#include 
include 
double ny_sqrt (double x)
assert(x >= 0.0):
return sqrt(x):
int maln(}
printf(*sgrt +2▪eg\n*,my_sgrt（2.0））;
printf(*sqrt -2 =tgn*,my_sgrt(-2.0)}:
exit(0) :
1
现在，当我们运行这个程序的时候，如果给这个程序传递一个非法的值，就会看到一个假
设验证冲突错误。假设验证冲突错误信息的格式随系统的变化而变化。