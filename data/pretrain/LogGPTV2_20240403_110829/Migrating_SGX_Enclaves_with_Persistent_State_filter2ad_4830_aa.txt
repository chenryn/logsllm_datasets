title:Migrating SGX Enclaves with Persistent State
author:Fritz Alder and
Arseny Kurnikov and
Andrew Paverd and
N. Asokan
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Migrating SGX Enclaves with Persistent State
Fritz Alder, Arseny Kurnikov, Andrew Paverd, N. Asokan
Aalto University, Finland
PI:EMAIL, arseny.kurnikov@aalto.ﬁ, PI:EMAIL, PI:EMAIL
Abstract—Hardware-supported security mechanisms like Intel
Software Guard Extensions (SGX) provide strong security guar-
antees, which are particularly relevant in cloud settings. However,
their reliance on physical hardware conﬂicts with cloud practices,
like migration of VMs between physical platforms. For instance,
the SGX trusted execution environment (enclave) is bound to a
single physical CPU.
Although prior work has proposed an effective mechanism to
migrate an enclave’s data memory, it overlooks the migration of
persistent state, including sealed data and monotonic counters;
the former risks data loss whilst the latter undermines the
SGX security guarantees. We show how this can be exploited to
mount attacks, and then propose an improved enclave migration
approach guaranteeing the consistency of persistent state. Our
software-only approach enables migratable sealed data and mono-
tonic counters, maintains all SGX security guarantees, minimizes
developer effort, and incurs negligible performance overhead.
Index Terms—Counters; Intel SGX; Sealing; VM Migration;
I. INTRODUCTION
Although cloud computing brings numerous beneﬁts, the
outsourcing of computation to potentially untrusted machines
also raises various security concerns. It is widely acknowl-
edged that hardware-supported security mechanisms can be
used to address these concerns. For example, Intel’s Software
Guard Extensions (SGX) technology enables applications to
create trusted execution environments, called enclaves,
in
which security-sensitive data can be stored and processed.
The code and data inside an enclave is protected from all
other software on the platform. Using remote attestation, a
remote party can obtain strong assurance about the precise
software running in an enclave. However, these hardware-
enforced security guarantees inherently conﬂict with cloud
practices. For instance, how can a virtual machine (VM)
containing one or more SGX enclaves be securely migrated
between physical machines?
Previous work by Park et al. [1] and Gu et al. [2] considered
the challenge of migrating SGX enclaves between physical
machines. Park et al. [1] ﬁrst identiﬁed the central challenge
of migrating the data held securely within an enclave, and
suggested that this could be solved with a new hardware
instruction. The state-of-the-art solution by Gu et al. [2] solves
this challenge using a software-only approach. By adding a
library inside the enclave, they are able to pause the operation
of an enclave and write out the enclave’s memory pages,
encrypted for the same enclave on the destination machine.
In the destination enclave, the equivalent library reads in and
maps these encrypted memory pages, and allows the enclave
to resume execution.
However, neither of these previous approaches consider
enclaves that require persistent state stored outside the enclave
itself. Speciﬁcally, they do not support migration of sealed
data and/or monotonic counters. Sealing allows an enclave
to encrypt data with a key known only to the enclave (the
sealing key) so that the encrypted data can be securely stored
in persistent storage outside the enclave, then later returned
to the enclave and decrypted. However, in the SGX threat
model, the OS and hypervisor are not trusted, so the enclave
has no guarantee that it has received the latest version of the
sealed data. To overcome this challenge, SGX provides each
enclave with up to 256 hardware-backed monotonic counters.
An enclave can read and increment these counters, and SGX
guarantees that the counter cannot be decremented. When the
enclave seals data, it increments a counter and includes the
new counter value as a version number in the sealed data. Thus
when the data is unsealed, the enclave compares the included
version number against the current value of the hardware
counter. Additionally, monotonic counters can be used for
various other application-speciﬁc purposes within the enclave
(e.g. keeping track of transactions performed by the enclave).
We refer to sealed data and monotonic counters collectively
as the persistent state of an enclave. As we show in Section III,
failure to migrate this persistent state could lead to data loss
or attacks against otherwise secure systems, such as the recent
Teechan payment system [3] or the Hybster state-machine
replication protocol [4].
According the SGX Developer Guide [5], an enclave is
destroyed, and its data memory irrecoverably lost whenever:
i) the application closes the enclave; ii) the application itself
is closed or crashes; or iii) the machine is hibernated or
shutdown. Enclaves should therefore always have the ability
to store their important data as persistent state at short notice,
whenever any of the above events take place. It is reasonable
to assume that most real-world enclaves have data that must be
persisted (e.g. cryptographic keys or other secrets provisioned
to the enclave through remote attestation). Even if an enclave
stores some of its data on a shared storage, or other remote
device, so that it can be accessed by the enclave from different
physical machines, it still requires local persistent storage for
key and counters needed for using that shared storage. Thus
when considering enclave migration, it is critical to consider
migration of persistent state.
In this paper, we deﬁne a set of requirements to address this
challenge (Section IV) and propose an improved mechanism
for migrating enclaves with persistent state (Section V). We
achieve this by introducing a separate Migration Enclave
2158-3927/18/$31.00 ©2018 IEEE
DOI 10.1109/DSN.2018.00031
195
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
on both the source and destination machines. Our approach
focuses only on the migration of persistent state because,
as explained above, a well-designed enclave should always
have the ability to store its important data as persistent state.
Enclave can thus use this same mechanism to persist any
important information before they are migrated. If there are
cases where this is not feasible, we assume the enclave
developers will use an additional mechanism, such as that
proposed by Gu et al. [2]. Given the design of Intel SGX,
it is not possible to achieve transparent migration of enclaves
without requiring hardware modiﬁcations. However, as a ﬁrst
step, we present a software-only approach can be used on
existing SGX hardware, and then discuss what would be
needed to enable transparent migration. We provide a proof-
of-concept implementation, available as open source software
(Section VI), and use this to evaluate the security, usability,
and performance of our solution (Section VII).
In summary, we claim the following contributions:
• We motivate the need to migrate persistent state by
showing how the omission of state migration could lead
to data loss and/or undermine the security guarantees of
SGX (Section III).
• We deﬁne an improved set of security requirements (Sec-
tion IV) and propose a new software-only architecture
and protocol for securely migrating SGX enclaves with
persistent state (Section V).
• We demonstrate the feasibility of our approach by pro-
viding an open-source proof-of-concept implementation1
(Section VI), and we use this to evaluate the security,
performance, and usability of our approach (Section VII).
II. PRELIMINARIES
A. Intel SGX
1) Isolated execution: Intel’s Software Guard Extensions
(SGX) technology is a set of CPU instructions that applications
can use to create enclaves – isolated execution environments
containing security-sensitive data and the software that oper-
ates on this data. Once an enclave has been initialized, SGX
ensures that the software running within the enclave cannot
be modiﬁed from outside the enclave, and that its execution
can only begin from well-deﬁned entry points (ECALLs).
2) Memory protection: SGX ensures that only code within
the enclave can access the enclave’s memory, thus protecting
it against all other software on the platform, including the
OS and/or hypervisor. The enclave’s memory is mapped to
a special area of physical memory called the Enclave Page
Cache (EPC). When enclave data leaves the physical CPU
boundary (e.g.
is automatically
encrypted to protect against attacks like memory bus snooping.
SGX provides integrity protection and anti-replay protection
for this memory, to prevent encrypted memory pages being
reverted to earlier versions.
is written to DRAM),
it
1All software is available at: https://github.com/SGX-Cloud
196
3) Enclave and signing identities: When an enclave is
loaded,
its software is measured to produce the enclave
identity, also referred to as the MRENCLAVE value. For
each memory page within the enclave, the contents and the
properties of the page are hashed to create a unique yet de-
terministic representation of the enclave. This process results
in the same value on any physical machine. Each enclave can
also be signed by the enclave developer, and the hash of the
developer’s public key becomes the enclave’s signing identity,
also referred to as the MRSIGNER value.
4) Sealing: Sealing refers to the process of encrypting data
with a key known only to the enclave, so that the sealed data
can be stored outside the enclave. The SGX SDK provides a
default sealing function sgx_seal_data(), which obtains
an enclave- and machine-speciﬁc sealing key from the CPU
and encrypts data using an authenticated encryption algorithm
(i.e. AES-GCM). Data sealed against the enclave’s identity
(MRENCLAVE) can only be decrypted by the same enclave,
whilst data sealed against the signing identity (MRSIGNER)
can be unsealed by any enclave signed by the same developer
(e.g. to allow upgrades of enclave code) [6]. In both cases,
the encryption key (sealing key) is derived from a CPU-
speciﬁc secret, so data can only be unsealed on the same
physical machine on which it was sealed. SGX sealing thus
guarantees the conﬁdentiality and integrity of sealed data, but
does not provide roll-back protection. If required, the enclave
developer would typically implement roll-back protection by
incrementing a secure monotonic counter and including the
counter value as a version number in the sealed data.
5) Monotonic counters: With support from the Intel Plat-
form Software [7], each SGX enclave has access to up to 256
enclave-speciﬁc monotonic counters. These are maintained by
the platform’s hardware and ﬁrmware (e.g. the Intel Manage-
ment Engine) and are thus speciﬁc to a physical machine, in
the same way as sealing keys. When a monotonic counter is
created, Intel Platform Software assigns it a counter UUID
consisting of a counter ID and a nonce. The counter ID
uniquely identiﬁes the counter and the nonce ensures that it
can only be accessed by the enclave that created it. Because
of this mechanism, it is not possible to destroy a counter and
create a new one with the same identiﬁer but lower value on
the same physical machine.
6) Attestation: An SGX enclave can use attestation to
provide strong assurance of its identity to a relying party,
and establish a secure communication channel. We refer to
the attested enclave as the prover and the relying party as the
veriﬁer. There are two types of attestation: local and remote.
Local attestation allows an SGX enclave to prove its identity
and authenticity to another enclave on the same physical ma-
chine. Speciﬁcally, the prover enclave uses an SGX hardware
instruction to generate a report for the veriﬁer enclave. The
report includes the identity of the prover enclave, and may
also contain application-speciﬁc data. The CPU generates a
message authentication code (MAC) for the report, using a
symmetric key available only to the veriﬁer enclave. Thus local
attestation inherently guarantees that the prover is a genuine
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
SGX enclave running on the same machine as the veriﬁer. Two
local enclaves can establish a secure communication channel
by performing mutual local attestations and including key
agreement messages in the reports. Local attestation is also
used to enable communication between application enclaves
(i.e. enclaves from third-party developers) and architectural
enclaves provided by Intel. For example, the Platform Services
Enclave is an architectural enclave that allocates and manages
the monotonic counters for application enclaves.
Remote attestation allows an SGX enclave to prove its
identity to a veriﬁer (not necessarily an enclave) on another
physical machine. It also assures the veriﬁer that the prover
is a genuine SGX enclave. The prover enclave ﬁrst performs
local attestation with its local Quoting Enclave (QE), another
architectural enclave provided by Intel. The QE creates an
SGX quote containing the identity of the prover enclave
(MRENCLAVE or MRSIGNER) and any application-speciﬁc
data provided by the prover enclave. The QE signs the
quote using the Enhanced Privacy ID (EPID) scheme [8], a
group signature scheme that allows revocation of compromised
components. This signature on the quote can be veriﬁed using
the Intel Attestation Service (IAS).2
B. SGX Virtualization and Migration
Virtualization is a key enabler of cloud computing, allowing
multiple virtual machines (VMs) to be run on a single phys-
ical machine, typically managed by a hypervisor. VMs are
intended to be self-contained, disposable and easily migratable
from one physical machine to another. Currently, there is
relatively little support for SGX in virtualized environments.
Experimental patches to Xen and KVM managers are avail-
able [9], but their functionality is limited to allocating EPC
pages to a virtual machine.
Migration is a process of “moving” a virtual machine (VM)
from one physical machine (source) to another (destination). In
live migration, the memory pages of the VM are copied from
the source machine to the destination machine, and then execu-
tion continues from the same place on the destination machine.
This is transparent to the VM [10]. If a VM containing an SGX
enclave were migrated using existing techniques, the enclave
would not be migrated because the migration process would
not be able to access the EPC. In order to migrate the enclave,
an SGX-aware migration mechanism, such as that proposed by
Park et al. [1] or Gu et al. [2] must be used.
However, neither of these SGX-aware migration mech-
anisms are able to securely migrate enclaves that
include
persistent state. If an enclave sealed any data on one physical
machine it will not be able to access it after migration, because
the sealing key on the destination machine will differ. Even
though the enclave’s identity remains unchanged, the sealing
key is derived from the CPU secret, which is unique to each
physical machine. Similarly, any monotonic counters created
by the enclave on the source machine will be lost when the
enclave migrates, because these are machine-speciﬁc.
2https://software.intel.com/en-us/blogs/2016/03/09/
intel-sgx-epid-provisioning-and-attestation-services
197
III. THREAT MODEL AND ATTACKS
In this section we deﬁne the threat model for an enclave
migration mechanism, and describe potential attacks that could
arise if an enclave’s persistent state is not migrated.
A. Threat model
We assume the same threat model as SGX [11], in which the
trusted computing base (TCB) for a speciﬁc enclave consists
only of the SGX hardware and the code within that enclave.
From the enclave’s perspective, all other software on the
machine, including the OS and hypervisor, is untrusted.
We thus assume that the adversary has physical access to
the machine, privileged access to all software (including OS,
and hypervisor), and the ability to monitor and manipulate
all network trafﬁc. As usual, we assume that the adversary
is unable to subvert correctly implemented cryptographic
primitives and, in general, is unable to subvert the security
guarantees of SGX on any single machine. However, recent
research on side-channel attacks against SGX [12], [13], [14]
has shown that in some cases, the latter assumption may not
hold. We evaluate the security of our scheme with respect to
side-channel attacks in Section VII.
The adversary’s goal is to use the migration mechanism to
subvert the SGX security guarantees, which would otherwise
not be possible. In particular, the adversary aims to mount
either a fork attack or a roll-back attack, as described below.
We assume that the adversary’s goals do not include denial-
of-service attacks, since our strong adversary already has full
control over the availability of the physical machine and all
enclaves. Thus, his motives are not to deny the service but to
undermine its security.
B. Fork Attack
The objective of a fork attack is to create two or more
copies of the same enclave with inconsistent state, potentially
running on different machines, in order to undermine some
application-speciﬁc security guarantee. In this section we con-
sider two recent SGX-based systems that are currently secure
but would become insecure if they were made migratable using
a mechanism that did not migrate persistent state.
Teechan [3] is a framework for establishing full-duplex
payment channels between SGX enclaves, in order to sup-
port frequently-repeated (micro) payments using blockchain-
based cryptocurrencies. Once two enclaves have established
a channel, they can exchange funds in either direction with
a single message. The authors explain that the enclaves can
“persist their state to secondary storage, encrypted under a
key and stored with a non-replayable version number from the