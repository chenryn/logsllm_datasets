### Cute Interrupt Handlers and FIE Modes

In the specified mode, FIE (Firmware Interactive Explorer) does not generate symbolic variables, allowing it to quickly evaluate concrete values along multiple paths. Fuzzing, surprisingly, provides excellent coverage for many firmware programs, often outperforming symbolic execution modes. This is because fuzzing can evaluate states more rapidly, leading to good coverage even in a 50-minute test, especially for simpler programs.

**USENIX Association  
22nd USENIX Security Symposium  473**

### Coverage Analysis

#### Figure 8: Coverage Comparison
- **Top Chart:** SMUDGE vs. FUZZ
- **Bottom Chart:** SMUDGE vs. PLAIN

**Key Observations:**
- SMUDGE outperforms FUZZ and PLAIN for 32% and 42% of the programs, respectively.
- Many firmware programs are very simple, resulting in equal performance (100% coverage) for all methods.
- SMUDGE can occasionally perform worse but generally improves over FUZZ and PLAIN.

### Modes and Techniques

**PLAIN, PRUNE, and SMUDGE:**
- **PLAIN:** No pruning or smudging.
- **PRUNE:** Pruning without smudging.
- **SMUDGE:** Pruning and smudging with a threshold \( t = 100 \).

All three modes use the most conservative interrupt model. SMUDGE generally provides better coverage than other modes, including FUZZ. The relative performance of each firmware is shown in Figure 8, where the x-axis represents the firmware (ordered by y-values), and the y-value is calculated as \((N_s - N_f) / N_{tot}\), where \( N_s \) is the number of instructions covered by SMUDGE, \( N_f \) is the number covered by FUZZ, and \( N_{tot} \) is the total number of executable instructions (NEXI) for the firmware.

### 50-Minute Analysis Outcomes

**Table 9: Termination Status and False Positives**

| Mode        | BASELINE | FUZZ | PLAIN | PRUNE | SMUDGE |
|-------------|----------|------|-------|-------|--------|
| No mem      | 9        | 7    | 0     | 0     | 0      |
| Timeout     | 10       | 79   | 85    | 64    | 46     |
| Finished    | 7        | 8    | 53    | 93    | 88     |
| FPs         | 10       | 7    | 35    | 53    | 93     |

- **No mem:** The analysis exhausted memory.
- **Timeout:** The analysis ran for the full 50 minutes.
- **Finished:** The analysis completed early.
- **FPs:** Number of false positives reported.

Pruning and smudging help reduce memory usage and increase the number of analyses that finish. Smudging introduced a false positive in one firmware due to pointer smudging, which often leads to memory safety violations. FIE marks smudged variables in bug reports, making it easy to identify smudging-related warnings.

### Complete Analyses

The design goal of FIE is to support complete analyses, where all possible symbolic states are checked. The PLAIN, PRUNE, and SMUDGE modes achieve this if the termination status is "Finished" and no bugs are reported. This verifies the absence of bugs, modulo the discussed limitations. Table 7 shows the number of firmware programs for which these modes verified the absence of memory safety and peripheral misuse bugs in 50-minute runs.

**Key Findings:**
- Pruning and smudging significantly increase the number of complete analyses: a 6x increase with pruning and an additional 1.48x improvement with smudging.
- In total, 53 firmware programs were completed, with one program having a false positive under SMUDGE.

### Firmware Complexity

**Table 11: Firmware Complexity Groups and SMUDGE's Performance**

| Complexity | Criteria                      | # FWs | Avg. Coverage | Med. Coverage |
|------------|-------------------------------|-------|---------------|---------------|
| Low        | ≤ 100 NEXI                    | 49    | 93.6%         | 100%          |
| Medium     | 500 NEXI and ≥ 2 loops        | 37    | 79.5%         | 93.1%         |
| High       | > 500 NEXI and < 2 loops      | 13    | 27.8%         | 24.8%         |

**Observations:**
- Coverage is uniformly poor for firmware programs with more than 4,000 executable instructions.
- Smaller programs with complex code constructs or undiscovered dead code also show poor coverage.

### Effect of Smudging Threshold

**Figure 12: Impact of Smudging Threshold on Coverage**

- **t = 1, 10, 100, 1000:** Average coverages were 23.3%, 25.2%, 25.5%, and 25.6%, respectively.
- **False Positives:** Increased for smaller \( t \); \( t = 1 \) had two false positives, while larger \( t \) had none.
- **Conclusion:** \( t = 100 \) strikes a reasonable balance, and further performance improvements may not be easily obtained by tweaking \( t \).

### Relaxing the Interrupt Model

A relaxed interrupt model fires interrupts only at the first instruction of each basic block, potentially increasing performance and coverage. Figure 12 compares the coverage of the high-complexity firmware programs using both the conservative and relaxed models. Several firmware programs saw significant coverage improvements, with the largest being 232%. No false positives arose, but one program encountered an unsupported code construct.

### Finding Vulnerabilities

FIE currently supports detecting memory safety violations and peripheral-misuse errors. It will be straightforward to extend its scope to other security properties in the future.

**Table 13: Summary of Vulnerabilities Found**

| Firmware       | Types                | NEXI  | # Bugs |
|----------------|----------------------|-------|--------|
| CDC Driver     | Memory safety        | 4,489 | 10     |
| HID Driver     | Memory safety        | 2,958 | 11     |
| Controleasy    | Flash misuse         | 1,255 | 1      |

**Findings:**
- 22 bugs were found across three firmware programs: two USB drivers from TI and one community firmware called Controleasy.
- 21 bugs were memory safety violations, and one was a flash misuse bug.
- CDC Driver and HID Driver share some common source files, with one bug spanning both.

**USENIX Association  
22nd USENIX Security Symposium  475**