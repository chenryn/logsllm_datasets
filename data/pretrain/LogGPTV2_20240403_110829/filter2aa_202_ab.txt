    "server",
    "title",
    "cert_contains",
    "port_contains",
    "protocol"
]
httpx是⼀个多功能的http请求⼯具包，通常可以⽤它来批量探测资产的⼀些基本信息。
Github:https://github.com/projectdiscovery/httpx
httpx是go写的，我写过⼀些分析：https://x.hacking8.com/post-410.html
之前给httpx提交过⼀份基于wappalyzer指纹识别的功能，直接改的httpx，写的可能有点耦合，它们把我的pr关
闭了然后就⾃⼰维护了⼀个wappalyzer的库。。ref:https://github.com/projectdiscovery/httpx/pull/205
这个库的功能也很简单，⽤github action设置了机器⼈⾃动更新最新的wappalyzer数据。主要功能就是输⼊html
源码，输出识别的数组。
CEL-GO
接着的⼀个问题是我们如何识别动态语法。可以⾃⼰写⼀个，类似我之前识别fofa指纹⽤的后缀表达式，但是就得
⾃⼰处理⼀些逻辑关系，也可以⽤⼀些开源的库，这些库能够帮助我们把表达式的解析弄好，并且提供了很多强⼤
的⾃定义功能。
像xray使⽤的是https://github.com/google/cel-go
nuclei使⽤的是https://github.com/Knetic/govaluate
这⾥⽐较有坑的是nuclei使⽤的govaluate,好⼏年不更新了，之前使⽤还遇到了⼀些奇葩的转义问题，根本不能愉
快的写poc，调试了好久最后⾃⼰fork修改了⼀份。可参考我的nuclei源码阅读:https://x.hacking8.com/post-412.
html
这次我决定换成cel-go来踩踩坑。看了官⽅实例，写了⼀个调⽤print的简单函数
package main
import (
  "fmt"
  "github.com/google/cel-go/cel"
  "github.com/google/cel-go/checker/decls"
  "github.com/google/cel-go/common/types"
  "github.com/google/cel-go/common/types/ref"
  "github.com/google/cel-go/interpreter/functions"
  expr "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
  "log"
)
func main() {
  env, err := cel.NewEnv(
    cel.Declarations(
      decls.NewVar("name", decls.String),
      decls.NewFunction("print",
        decls.NewOverload("print_string",
          []*expr.Type{decls.String},
          decls.Bool)),
    ),
  )
  if err != nil {
    panic(err)
  }
  ast, issues := env.Compile(`print("hello "+name)`)
  if issues != nil && issues.Err() != nil {
    log.Fatalf("type-check error: %s", issues.Err())
  }
  shakeFunc := &functions.Overload{
    Operator: "print_string",
    Unary: func(lhs ref.Val) ref.Val {
      s, ok := lhs.(types.String)
      if !ok {
        return types.ValOrErr(lhs, "unexpected type '%v' passed to print", lhs.Type())
      }
      fmt.Println(s)
      return types.Bool(true)
    }}
  prg, err := env.Program(ast, cel.Functions(shakeFunc))
  if err != nil {
    log.Fatalf("program construction error: %s", err)
  }
  out, _, err := prg.Eval(map[string]interface{}{
    "name":  "hacking8",
    })
  fmt.Println(out) // 'true'
}
名称
类型
说明
body
String
解码后的html⽂本
headers
String
解码后的header⽂本
title
String
⽹⻚标题
banner
bytes
返回的原始byte
protocol
String
协议名称，如ftp，
cert
bytes
证书信息
名称
参数
返回类型
说明
contains
String
bool
是否包含⽂本(区分⼤⼩写)
icontains
String
bool
是否包含⽂本(不区分⼤⼩写)
名称
参数
返回类型
说明
md5
bytes
string
输出md5
定义⾃⼰的识别语法
接下来可以定义⾃⼰的cel-go输⼊输出了，根据上⾯的思想，我就定义了四个需要输⼊的参数
再定义⼀些简单的⽅法，这⾥我只定义了两个contains，之后有其他操作也可以定义其他的。
也可以定义⼀些特有的函数，例如 md5 等等
拥有了以上的⽅法，我们就可以⽤这样的语法去识别指纹
这样⼦很酷吧？
指纹格式
接下来根据goby的⼀些特殊字段，定义⾃⼰的语法格式吧，我这⾥使⽤yaml来定义每⼀个指纹，example 类似如
下
原始的goby指纹如下
body.icontains("copyright by hacking8") || md5(banner) == 
"933F490F991401B67B11F0F34B2F1921"
{
    "rule_id": "1",
    "level": "5",
    "softhard": "2",
我将它变为如下形式
⽂件名 Software System/Other Software System/phpshe.yaml
我这⾥直接⽤⼀个列表表示 or 关系，有很多 or 关系的话这样看起来⽐较舒适⼀些，当然这个等价于
body.icontains("powered by phpshe") || body.icontains("content=\"phpshe")
⾃动⽣成指纹
其实上述的json转yaml改动不是很⼤，⽤python写个脚本⾃动⽣成吧。
    "product": "phpshe",
    "company": "河南省灵宝简好⽹络科技有限公司",
    "category": "Other Software System",
    "parent_category": "Software System",
    "rules": [
      [
        {
          "match": "body_contains",
          "content": "powered by phpshe"
        }
      ],
      [
        {
          "match": "body_contains",
          "content": "content=\"phpshe"
        }
      ]
    ]
  }
info:
  product: phpshe
  company: 河南省灵宝简好⽹络科技有限公司
  softhard: 2 # 2是软件 1是硬件
matches:
  - body.icontains("powered by phpshe")
  - body.icontains("content=\"phpshe")
import json
import os
import yaml
filename = "fofa.json"
folder = "/Users/boyhack/programs/untitled/指纹收集处理/zsxq"
with open(filename, 'r', encoding="utf-8") as f:
    data = json.load(f)
i = 0
dd = {}
for item in data:
    product = item["product"]
    company = item["company"]
    softhard = item["softhard"]
    category = item["category"]
    parent_category = item["parent_category"]
    if parent_category == "":
        parent_category = "other"
    item_or = []
    for rules in item["rules"]:
        item_and = []
        for rule in rules:
            match = rule["match"]
            content = rule["content"].replace("\"", "\\\"")
            dsl = ""
            if match == "body_contains":
                dsl = f"body.icontains(\"{content}\")"
            elif match == "protocol_contains":
                dsl = f"protocol.icontains(\"{content}\")"
            elif match == "title_contains":
                dsl = f"title.icontains(\"{content}\")"
            elif match == "banner_contains":
                dsl = f"banner.icontains(b\"{content}\")"
            elif match == "header_contains":
                dsl = f"headers.icontains(\"{content}\")"
            elif match == "server_contains":
                dsl = f"headers.icontains(\"{content}\")"
            elif match == "server":
                dsl = f"headers.icontains(\"{content}\")"
            elif match == "title":
                dsl = f"title == \"{content}\""
            elif match == "cert_contains":
                dsl = f"cert.icontains(b\"{content}\")"
            elif match == "port_contains":
                continue
            elif match == "protocol":
                dsl = f"protocol == \"{content}\""
            item_and.append(dsl)
        item_or.append(" && ".join(item_and))
    originData = {
        "info": {
            "product": product,
            "company": company,
            "softhard": softhard,
        },
运⾏后就会⽣成这么个⽂件夹
随便打开⼀个看下指纹
嘿嘿，还不错吧。
        "matches": item_or,
    }
    save_folder = os.path.join(folder, parent_category, category)
    if not os.path.isdir(save_folder):
        os.makedirs(save_folder)
    product = product.replace("/", " ")
    filename = os.path.join(save_folder, product + ".yaml")
    with open(filename, 'w') as f:
        yaml.dump(originData, f, allow_unicode=True)