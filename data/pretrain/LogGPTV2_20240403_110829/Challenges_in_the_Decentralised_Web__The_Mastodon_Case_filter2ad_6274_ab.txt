all public users on each instance, and simply paging through their
(HTML) follower list.1 This provided us with the ego networks
for each user. We identified a user by their account name on a
per-instance basis, as users must create one account per instance.
87.9% of account names are unique to a single instance, while 8.3%
are on two instances and 3.8% are on three or more. Note that it is
impossible to infer if such accounts are owned by the same person
and therefore we treat them as separate nodes.
We then induced a graph, G(cid:0)V , E(cid:1), in which user Vi has a di-
rected link to another user Vj if Vi follows Vj. This resulted in 853K
user accounts, and 9.25M follower links. Conceptually, this graph is
similar to the Twitter follower graph [27]. However, unlike Twitter,
users can follow accounts on remote instances, triggering the need
for remote subscriptions between instances (i.e., federation). Hence,
the creation of a link in E can trigger an underlying federated sub-
scription between the respective instances. We therefore created a
second graph, GF
scriptions (hereafter instance federation graph, for short). GF
1https:///users//followers
(cid:0)I, E(cid:1), which consists of instance-to-instance sub-
(cid:0)I, E(cid:1)
Figure 1: Available instances/user/toots over-time.
is induced by G(cid:0)V , E(cid:1); a directed edge Eab exists between instances
Ia and Ib if there is at least one user on Ia who follows a user on Ib.
Twitter. For comparisons, we also gathered data about outages
in Twitter as well as its social network, dating back to when Twit-
ter was at a similar age as Mastodon is now. For uptime statistics,
we used pingdom.com, a widely used website monitoring platform
which probed Twitter every minute between February and Decem-
ber 2007 (when Twitter was roughly 1.5 years old). The data is
obtained from the Internet Archive [22]. As a baseline social graph,
we obtained the Twitter social graph from a 2011 dataset [30], which
consists of users and their respective follower networks.
Limitations. Our analysis reveals a highly dynamic system and,
thus, our measurements are capturing a “moving target.” Similarly,
we highlight that the timelines of each dataset differ slightly due
to the progressive deployment of our measurement infrastructure.
This, however, does not impact our subsequent analysis. It is also
worth noting that we do not have comprehensive data on all toots,
due to some instances preventing crawling (we have 62% of toots).
Thus, we have avoided performing deeper semantic analysis on
toot content and, instead, focus on instance-level activities.
Ethical Considerations. The instances dataset only contains pub-
lic infrastructure information, whereas, the toots dataset covers user
information, and this might have privacy implications. However,
we have exclusively collected public toot data, followed well es-
tablished ethical procedures for social data, and obtained a waiver
from the ethics committee at Queen Mary University of London.
All data is anonymised before usage, it is stored within a secure
silo, and we have removed text content from our analysis. Finally,
note that our public dataset only covers infrastructure information
and anonymised toot metadata.
4 EXPLORING INSTANCES
The first innovation that the DW introduces is the distribution
of services across independent instances. This means that these
platforms emerge in a bottom-up fashion from the thousands of
instances running their software. Hence, inspecting them provides
a window into how bottom-up DW decisions are made, and the im-
plications they might have on the overall system. In this section, we
perform a characterisation of the instances available in Mastodon,
and how they are deployed.
219
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
A. Raman et al.
4.1 Instance Popularity
First, we quantify the growth and popularity of the 4,328 instances
under study, and inspect how this relates to instance settings.
Instance Growth. We begin by briefly inspecting the recent
growth of Mastodon. Figure 1 plots the timeseries of the number of
instances, users, and toots available per day. Mastodon is in a phase
of growing popularity, with fluctuations driven by the arrival and
departure of instances. Between April and June 2017, there was an
increase in the number of instances (and users). However, while the
number of instances reaches a plateau around July 2017 (only 6% of
the instances were setup between July and December 2017), the user
population continues to grow during this period (by 22%). Then,
in the first half of 2018, new instances start to appear again (43%
growth). We conjecture that this may have been driven by things
like the #DeleteFacebook campaign (popular at that time) [45], and
sporadic bursts of media attention [13, 36, 42]. Closer inspection
also reveals fluctuations in the instance population; this churn is
driven by short periods of unavailability, where certain instances
go offline (temporarily). We posit that this may have wider implica-
tions, and therefore deep dive into this in Section 4.4.
Open vs. Closed Instances. Mastodon instances can be separated
into two groups: (i) open, allowing anybody to register (47.8% of
instances); and (ii) closed, requiring an explicit invitation from the
administrator (52.2%). Figure 2(a) presents a CDF of the number
of users and toots per-instance, separated into open and closed in-
stances. Overall, the user population distribution is highly skewed,
with distinct traits of natural centralisation. For both kinds of in-
stances (open and closed) the top 5% of all instances have 90.6%
of all users. Similar patterns can be seen among toot generation,
with the top 5% of instances accumulating 94.8% of toots. This of
course confirms that, despite its decentralisation, Mastodon does
not escape the power law trends observed in other social plat-
forms [10, 16, 27, 49].
Unsurprisingly, instances with an open registration process have
substantially more users (mean 613 vs. 87). Inspecting user count
alone, however, can be quite misleading, as open instances may
accumulate more experimental (and disengaged) users. Figure 2(b)
presents the breakdown of users, instances and toots across open
and closed instances. Whereas the majority of users are associated
with open instances, they create on average 94.8 toots per-person.
In contrast, there are fewer users on closed instances, but they
generate more toots per-capita (average of 186.65). To measure
the activity level of users, each week, we compute the percentage
of users who have actually logged into each instance (available
in the instance dataset), and take the maximum percentage as the
activity level of the instance. Figure 2(c) presents the CDFs of the
activity level per instance. This confirms that closed instances have
more engaged populations: the median percentage of active users
per closed instance is 75%, compared to 50% for active users in
open instances. Despite this mix of instances, it is clear that a
notable fraction of Mastodon users regularly login; for example,
13.73% of users use Mastodon over once per-week). This disparity
in usage patterns, which is typical in any web system, does however
increase the “dominance” of the instances that are associated with
more active users.
4.2 Instance Categories
To improve visibility and/or to specialise in certain topics, instances
can explicitly “tag” themselves with a category, as well as the activ-
ities they allow. Thus, these tags help in understanding the types
of ongoing activities within Mastodon.
Category Tags. Overall, 697 out of the 4,328 instances report a
self-declared category, taken from a controlled taxonomy of tags.
Just 13.6% of users and 14.4% of toots are associated with these cate-
gorised instances. 51.7% of these categories are labelled as “generic”.
Despite this relatively low coverage, it is still useful to inspect these
tags to gain insight into ongoing usage. Note that the following
statistics pertain to this subset of instances. Figure 3 plots the dis-
tribution of instances, toots, and users across each category. We
identify 15 categories of instances. The majority of instances are
categorised as tech (55.2%), games (37.3%) or art (30.15%). This is not
entirely surprising, as Mastodon emerged from the tech community.
Figure 3 also allows us to compare the popularity of each cate-
gory when measured by number of instance vs. number of users,
shedding light on the interests of the administrators vs. the general
user population. Overall, the interests of these two groups coincide,
albeit with some key discrepancies. For instance, while tech covers
55.2% of instances, it only garners 20.8% of users and 24.5% of toots.
By contrast, games corresponds to 37.3% of instances, yet gener-
ate 43.43% of all toots, suggesting they are highly active. Similar
observations apply to Anime instances, where 24.6% of instances
contribute 37.23% of global toots. There is, however, one clear out-
lier: adult instances constitute only 12.3% of instances but attract
61.03% of all users; that is, adult content is clearly a topic attracting
a large user population, which is served by a small set of instances.
This has been observed in other forms of online adult content,
where websites with limited content sets gain large per-item in-
terest [48]. These contrasts suggest that Mastodon is a powerful
tool for exploring and evaluating the differing behaviours of these
communities.
Activity Tags. Due to its decentralised nature, it is also possible
for individual administrators to stipulate what types of activity are
allowed on their instances. This is necessary in a federated social
network, as each instance can have different policy requirements.
Out of the 697 instances, 17.5% allow all types of activity. The re-
maining instances explicitly specify a subset of activities acceptable
on the instance. 82% of these list at least one prohibited activity,
whereas 93% explicitly specify at least one acceptable activity.
Figure 4 reports the number of instances, users, and toots asso-
ciated with each activity category. The most regularly prohibited
activity (left bar chart in the figure) is spam. 76% of instances dis-
allow it, followed by pornography (66%), and nudity (62%). These
two activities are typically only prohibited when not tagged with
#NSFW (not safe for work): for instances that allow #NSFW, the
vast majority also allow nudity (84.3%) and pornography (75.6%).
On the other hand, and quite curiously, some instances explicitly
allow several of these activities (see right bar chart in Figure 4), e.g.,
24% of instances allow spam. Unsurprisingly, these get few users:
even though they make up 21% of instances, they only hold 16%
of users. In contrast, instances allowing advertising have dispro-
portionately large user groups (47% of instances, but 61% of users
hosting and 75% of the toots).
220
Challenges in the Decentralised Web
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
(a)
(b)
Figure 2: Dissecting Instances with open and closed (invite-only) registrations. (a) Distribution of number of toots and users
per-instance (b) Number of instances, toots and users for open and closed registrations; (c) Distribution of active users (max
percentage of users logged-in in a week per instance) across all instances.
(c)
Figure 3: Distribution of number of instances, toots and
users across various categories.
Figure 4: Distribution of instances and users across instances
w.r.t. prohibited and allowed categories.
Mastodon UI also has a “content warning” (CW) checkbox for
the posters to give advance notice that there are spoilers in the
content. Interestingly, while 35% instances prohibit posting spoilers
without a content warning, the remaining 65% explicitly allow this.
221
Figure 5: Distribution of instances, users, and toots across
the top-5 countries (top) and ASes (bottom).
4.3 Instance Hosting
Unlike a centrally administered deployment, where presence can be
intelligently selected, Mastodon’s infrastructure follows a bottom-
up approach, where administrators independently decide where
they place their instance. Figure 5 presents a breakdown of the pres-
ence of instances, toots, and users across countries and Autonomous
Systems (ASes).
Countries. Japan dominates in terms of the number of instances,
users and toots. In total, it hosts 25.5% of all instances, closely fol-
lowed by the US which hosts 21.4%. Closer inspection reveals that
the ratio between the number of instances and number of users dif-
fer across countries though. For example, Japan hosts a just quarter
of instances, yet gains 41% of all users; in contrast, France hosts 16%
of instances, yet accumulates only 9.2% of users. It is also worth
noting that these countries are heavily interconnected, as instances
must federate together, i.e., users on one instance may follow users
on another instance (thereby creating federated subscription links
between them, see Section 2).
To capture their interdependency, Figure 6 presents a Sankey
diagram; along the left axis are the top countries hosting instances,
and the graph depicts the fraction of their federated subscriptions to
instances hosted in other countries (right axis). Unsurprisingly, the
instances exhibit homophily: users of an instance follow other users
on instances in the same country, e.g., 32% of federated links are with
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
A. Raman et al.
Figure 7: CDF of the instance downtime (bottom x-axis) and
distribution of unavailable users, toots, and boosted toots
(top x-axis) when instances go down.
form of tacit centralisation that emerges naturally within such
deployments.
4.4 Instance Availability
We next explore the availability properties emerging from the
bottom-up deployment. Here, we define availability as the ability
to access and download its homepage. We posit that the uncoor-
dinated and (semi-)voluntary nature of some instance operations
may result in unusual availability properties.
Instance Availability. We start by measuring the historical avail-
ability of our 4.3K instances over time (from the instance dataset).
We only count outages where an instance becomes unavailable,
and then returns again within our 15 month measurement cycle
(i.e., we do not consider persistently failed instances as outages).
Figure 7 plots the distribution of downtime of each instance over a
5-minute granularity (blue line, bottom X-axis). A sizeable portion
of instances do have relatively good availability properties – about
half of the instances have less than 5% downtime. 4.5% of instances
were even up for 99.5% of the time (these popular instances covered
44% of toots). However, there is a long tail of extremely poor avail-
abilities: 11% of instances are inaccessible more than half of the
time, which confirms that failures are relatively commonplace in
Mastodon. This has obvious repercussions for both toot availability
and the ability of users to access the platform.
We cannot confirm the exact reasons for unavailability, nor can
we state how reliable instances maintain their long uptime (al-
though the operators might be employing load balancers and repli-
cated back-ends). That said, it is likely that the voluntarily nature
of many instance operators has a role, i.e., instances with poor
availability might simply be unpopular, and lack dedicated admin-
istrators. To test this, we count the number of toots and users that
are unavailable during instance failures, see Figure 7 (red lines, top
x-axis). Instances may go down multiple times, so we select the
95th percentile of these values for each instance. Disproving our
hypothesis, we find that failures happen on instances across the
entire spectrum of popularity — there are a number of instances
that host in excess of 100K toots which have outages.