仅用于定义常量，
同样的效果，
Directive)
个函数中）。
可见在这里预处理器做了两件事情，
（Preprocess）阶段,
虽然include和define在预处理指示中有特殊含义,
int main(void)
int main(void)
void print_random()
void gen_random(int upper_bound)
gen_random(10);
printf("\n");
for
int ii
int i;
gcc
S
printf("%d
a[i]
 = rand() % upper_bound;
-E main.c
printf
也可以定义更复杂的语法结构，
省略了很多行stdio.h和stdlib.h的代码)
，而枚举是在编译阶段处理的。试试看把第3节“数据类型标志"习题2的程序改
，然后才是编译阶段，用gcc的-E选项可以看到预处理之后、编译之前的程
'0;
，a[ij);
L
一是把头文件stdio.h和stdlib.h在代码中展开，
 RECTANGULAR， POLAR);
，称为宏（Macro）定义。
，但它们并不是C语言的关键字，
，分别位于数组的定义中和两
。其次，define定义是在
先是预处
换句话
129
---
## Page 130
些20表示别的数量则不做改动，
成100000就非常麻烦，
我们只要把#define N的值改为100000，
函数统计每个数字出现的次数。完整的程序如下：
现的次数也许能说明问题。
我们的样本太少了，
的。在上面的20个结果中，6出现了5次,
看起来很随机了。但随机性如何呢？分布得均匀吗？所谓均匀分布，
成20个随机数，
回到随机数这个程序继续讨论，
其它地方的include或define预处理器并不关心，只是当成普通标识符交给编译阶段去处理。
用20这个值，
一行以#号开头，
例 8.3.统计随机数的分布
人
6753562912
，这称为硬编码（Hard coding）
int main(void)
int howmany(int value)
void gen_random(int upper_bound)
int a[N];
#define 
这个程序的运行结果为：
后面跟include或define，
才20个数，
，你需要找遍整个代码，
N
return 0;
int i;
return count;
for
100000
。但总不能把100000个数都打印出来然后挨个去数吧？我们需要写一个
（i=0;
，如果代码很长，
，如果样本足够多，
一开始为了便于分析和调试，我们取小一点的数组长度，只生
L
 就相当于把整个程序中所有用到n的地方都改
9
 而4和8一次也没出现过。
３６０６２６
++count;
1;
预处理器就认为这是一
10
判断哪些20表示这个数组的长度就改为100000，
，这是很容易出错的。所以，
如果原来的代码是硬编码的，
比如说100000个数，统计一下其中每个数字出
一条预处理指示,
但这说明不了什么问题，
应该每个数出现的概率是一样
 写代码时应尽可能避免
那么一旦需要把20改
在每个循环中也直接使
 除此之外出现在
130
毕竟
---
## Page 131
习题 请点评
各数字出现的次数都在10000次左右，可见是比较均匀的。
是避免一
硬编码，
1.数组的基本概念
1、用rand函数生成[10,20]之间的随机整数，表达式应该怎么写？
页
一个地方的改动波及到大的范围。这个程序的运行结果如下：
5
value
这其实也是一个 提取公因式 的过程，
:/a.out 
9958
6
9954
9990
10059
10072
10130
how many
1
0
6
4
全国嵌入式人才培训基地
起始页
上一级
和第，节数据抽象讲的抽象具有相同的作用，就
3.数组应用实例：直方图
---
## Page 132
是histogram的下标，这个随机数每出现一次就把histogram中相应的元素加1。
定的。接下来的代码很有意思，在每次循环中，a[i]就是出现的随机数，而这个随机数同时也
这些随机数只需要从头到尾检查一遍（Single Pass）就可以得出结果：
有意思的是，这里的循环变量i有两个作用，
这显然太繁琐了。要是这样的随机数有100个呢？显然这里用数组最合适不过了：
我们可以把程序改成这样：
3.数组应用实例：直方图 请点评
十遍，
尽管上面的方法可以准确地得到统计结果，但是效率很低，这100000个随机数需要从头到尾检查
直方图（Histogram）。有时候我们并不只是想打印，更想把统计结果保存下来以便做后续处理。
继续上面的例子。我们统计一列0~9的随机数，
上一页
int main(void)
int main(void)
int main(void)
int i, histogram[10] = {0};
int i, histogram[10］;
··.
（i
 howmanytwos
 histogram[a[i]]++;
 histogram[i] = howmany(i);
int main(void)
"Friday"
 double
sda
.count[2]
y001o
0Λ01010
print_day(2);
if (day < 1 l
char days[8][10] = {"",
return 0;
1010
010
 printf("lilegal day number!\n");
days[day]);
"Saturday",
"Wednesday"
"Sunday" };
"Tuesday",
---