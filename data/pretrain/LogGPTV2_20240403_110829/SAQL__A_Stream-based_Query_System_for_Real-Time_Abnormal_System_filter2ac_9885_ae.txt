### 2. 通过量评估

- **数据大小 (GB)**
  - 2.2
  - 2.2
  - 2.7
  - 1.9
  - 1.2
  - 2.2
  - 1.6
  - 2.2
  - 2.1
  - 2.1
  - 2.1

- **N/A (%)**
  - 10%
  - 10%
  - N/A
  - 8%
  - 10%
  - 10%
  - 8%
  - 1
  - 6%

- **数值**
  - 4.09
  - 8%
  - 4.09
  - 8%
  - 1
  - 8%
  - 988.6
  - N/A
  - 8%
  - 10%
  - N/A
  - 9%
  - 10%
  - 10%
  - 9%
  - 10%

- **延迟 (ms)**
  - ≤1
  - ≤1
  - 6
  - 10
  - 3
  - ≤1
  - ≤1
  - 2
  - 5
  - 1776
  - 2
  - ≤1
  - ≤1
  - ≤1
  - ≤1
  - ≤1

#### 评估结果
图4展示了在不同CPU利用率下SAQL系统的吞吐量。我们观察到，在部署了12核服务器的情况下，SAQL系统实现了每秒110,000事件的最大吞吐量。考虑到我们的企业环境中包含150台主机，每秒生成3,750个事件，我们可以估计该服务器上的SAQL系统可以支持约4,000台主机。尽管这些令人鼓舞的结果表明，仅在一个服务器上部署的SAQL系统可以轻松支持数千台主机，但仍有一些因素可能会影响系统性能。

首先，涉及时间依赖性的查询可能会导致查询引擎进行更多的计算，从而限制SAQL系统支持的最大主机数量。其次，如果多个查询同时运行，会创建多个数据流副本以支持查询计算，这将显著降低系统性能。接下来的评估将展示并发查询的影响以及我们的主从查询方案如何缓解这个问题。

### 6.4 并发查询执行性能评估
为了评估我们的查询引擎（即主从查询方案）在处理并发查询时的有效性，我们构建了一个包含64个查询的微基准测试，并测量执行期间的内存使用情况。我们选择Siddhi [20]，一种流行的流处理和复杂事件处理引擎，作为基线比较。

#### 微基准测试构建
我们通过提取关键属性来构建微基准测试查询。这些属性包括：
- 敏感文件访问：查找访问文件 `/etc/passwd`、`.ssh/id_rsa`、`.bash_history` 和 `/var/log/wtmp` 的进程。
- 浏览器访问文件：查找由 `chrome`、`firefox`、`iexplore` 和 `microsoftedge` 进程访问的文件。
- 进程访问网络：查找 `dropbox`、`sqlservr`、`apache` 和 `outlook` 进程的网络访问。
- 进程派生：查找由 `/bin/bash`、`/usr/bin/ssh`、`cmd.exe` 和 `java` 进程派生的进程。

我们还指定了以下四个评估类别，对应于第5.2节中的四个优化维度：
- 事件属性：从1个属性到4个属性变化。
- 滑动窗口：从1分钟到4分钟变化。
- 代理ID：从1个代理到4个代理变化。
- 状态聚合：从1种聚合类型到4种聚合类型变化，类型包括 `{count, sum, avg, max}`。

我们为每个评估类别和每个攻击类别构建了4个查询，总共构建了64个查询。对于每个SAQL查询，我们构造一个等效的Siddhi查询。需要注意的是，与SAQL提供的显式状态计算结构不同，Siddhi以及其他基于流的查询系统 [20, 12, 51, 4] 不提供对这些概念的原生支持，因此无法指定高级异常模型（如时间序列异常、不变量异常和离群值异常）。因此，在“状态评估类别”中，我们只构造了监视相同事件模式但不进行状态计算的Siddhi查询。

#### 评估结果
对于每个评估类别和每个攻击类别，我们将并发查询的数量从1增加到4，并测量相应的内存使用情况。图5至图8显示了结果。我们观察到：
- 随着并发查询数量的增加，Siddhi的内存使用量增加远高于SAQL。
- 当有多个并发查询执行时，SAQL所需的内存使用量始终低于Siddhi（当有4个并发查询时平均节省30%的内存）。
- 这些结果表明，我们的主从查询方案能够通过在依赖查询之间共享中间执行结果来节省内存使用。相比之下，Siddhi查询引擎进行数据复制，导致比我们的查询引擎更高的内存使用量。

### 7 讨论
- **可扩展性**：系统监控数据的收集和SAQL查询的执行可以通过分布式计算并行化。然而，随着部署环境规模的增加、提交查询数量的增加以及查询之间的多样性和语义依赖关系，带来了显著的挑战。未来的研究方向是将我们的主从查询方案适应于这些复杂场景。
- **系统实体和数据减少**：我们目前的数据模型主要关注文件、进程和网络连接。未来的工作计划扩展监控范围，包括Linux中的管道等进程间通信，并进一步细化系统监控，例如记录更精确的进程活动和内存数据操作。此外，还需要研究数据减少技术。
- **主从查询**：我们的优化重点在于共享模式匹配结果和状态计算结果。更激进的共享可能包括警报及其报告的结果，这是未来工作的方向。
- **异常模型**：虽然SAQL支持常见的异常模型，但还有许多其他有价值的异常模型适用于特定攻击。我们计划使系统可扩展，以支持更多异常模型。
- **警报融合**：最近的安全研究表明，通过考虑多个警报的警报融合可以提高检测准确性。虽然这超出了本工作的范围，但SAQL可以扩展以支持指定警报之间的时序关系。

### 8 相关工作
- **审计日志和取证**：已有大量研究利用系统级来源进行取证分析，重点是生成用于攻击因果分析的来源图。这些系统考虑历史日志，其贡献与SAQL互补，后者提供了一个有用的接口，使调查人员可以从系统日志流中查询异常行为。