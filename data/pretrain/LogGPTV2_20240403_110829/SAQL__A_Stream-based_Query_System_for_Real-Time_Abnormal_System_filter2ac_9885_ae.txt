2.2GB
2.2GB
2.7GB
1.9GB
1.2GB
2.2GB
1.6GB
2.2GB
2.1GB
2.1GB
2.1GB
N/A 10%
N/A 10%
N/A
8%
N/A 10%
N/A 10%
8%
1
6%
4.09
8%
4.09
8%
1
8%
988.6
N/A
8%
N/A 10%
N/A
9%
N/A 10%
N/A 10%
N/A
9%
N/A 10%
≤1ms
≤1ms
6ms
10ms
3ms
≤1ms
≤1ms
2ms
5ms
1776ms
2ms
≤1ms
≤1ms
≤1ms
≤1ms
≤1ms
≤1ms
Evaluation Results: Figure 4 shows the throughput
of the SAQL system under different CPU utilizations.
We observe that using a deployed server with 12 cores,
the SAQL system achieves a maximum throughput of
110000 events/s. Given that our deployed enterprise en-
vironment comprises 150 hosts with 3750 events gen-
erated per second, we can estimate that the SAQL sys-
tem on this server can support ∼4000 hosts. While such
promising results demonstrate that our SAQL system de-
ployed in only one server can easily support far more
than hundreds of hosts for many organizations, there are
other factors that can affect the performance of the sys-
tem. First, queries that involve temporal dependencies
may cause more computation on the query engine, and
thus could limit the maximum number of hosts that our
SAQL system can support. Second, if multiple queries
are running concurrently, multiple copies of the data
stream are created to support the query computation,
which would signiﬁcantly compromise the system per-
formance. Our next evaluation demonstrate the impact of
concurrent queries and how our master-dependent-query
scheme mitigates the problem.
6.4 Performance Evaluation of Concurrent
Query Execution
To evaluate the effectiveness of our query engine (i.e.,
master-dependent-query scheme) in handling concurrent
queries, we construct a micro-benchmark that consists
of 64 queries and measure the memory usage during the
execution. We select Siddhi [20], one of the most popu-
lar stream processing and complex event processing en-
gines, for baseline comparison.
Micro-Benchmark Construction: We construct our
micro-benchmark queries by extracting critical attributes
Figure 4: Throughput of the SAQL system under differ-
ent CPU utilizations.
in Section 6.3); (3) the number of states and the average
state size vary with a number of factors, such as query
running time, data volume, and query attributes (e.g.,
number of agents, number of attributes, attribute ﬁltering
power). Even though the amount of system monitoring
data is huge, a SAQL query often restricts one or several
data dimensions by specifying attributes. Thus, the state
computation is often maintained in a manageable level.
6.3 Pressure Test
We conduct a pressure test of our system by replicating
the data stream, while restricting the CPU utilization to
certain levels [5]. When we conduct the experiments,
we set the maximum Java heap size to be 100GB so that
memory will not be a bottleneck. We deploy a query that
retrieves all ﬁle events as the representative rule-based
query, and measure the system throughput to demon-
strate the query processing capabilities of our system.
USENIX Association
27th USENIX Security Symposium    649
0%100%200%300%400%500%600%700%800%900%1000%1100%1200%CPUutilization020K40K60K80K100K120KThroughput(events/s)(a) Sensitive ﬁle accesses
(a) Sensitive ﬁle accesses
(a) Sensitive ﬁle accesses
(a) Sensitive ﬁle accesses
(b) Browsers access ﬁles
(c) Processes access networks
Figure 5: Event attributes
(b) Browsers access ﬁles
(c) Processes access networks
Figure 6: Sliding window
(b) Browsers access ﬁles
(c) Processes access networks
Figure 7: Agent ID
(b) Browsers access ﬁles
(c) Processes access networks
Figure 8: State aggregation
(d) Processes spawn
(d) Processes spawn
(d) Processes spawn
(d) Processes spawn
from the attacks in Section 6.2.1. In particular, we spec-
ify the following four attack categories:
• Sensitive ﬁle accesses: ﬁnding processes that access
the ﬁles /etc/passwd, .ssh/id_rsa, .bash_history, and
/var/log/wtmp.
• Browsers access ﬁles: ﬁnding ﬁles accessed by the
processes chrome, firefox, iexplore, and microsoftedge.
• Processes access networks: ﬁnding network accesses
of the processes dropbox, sqlservr, apache, and outlook.
• Processes spawn: ﬁnding processes spawn by the pro-
cesses /bin/bash, /usr/bin/ssh, cmd.exe, and java.
We also specify the following four evaluation cate-
gories for query variations, which correspond to the four
optimization dimensions in Section 5.2:
• Event attributes: we vary from 1 attribute to 4 at-
tributes. The attributes are chosen from one of the
attack categories. The default is 4 attributes.
• Sliding window: we vary from 1 minute to 4 minutes.
• Agent ID: we vary from 1 agent to 4 agents. The de-
fault is to avoid the agent ID speciﬁcation (i.e., the
query matches all agents).
The default is 1 minute.
650    27th USENIX Security Symposium
USENIX Association
1234Numberofconcurrentqueries2022242628303234Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries16182022242628Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries1416182022242628Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries18192021222324252627Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries18202224262830323436Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries212223242526272829Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries161820222426Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries1618202224262830Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries2022242628303234Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries1820222426283032Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries161718192021Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries1618202224262830Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries14161820222426Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries1820222426283032Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries151617181920212223Memory(GB)SAQLSiddhi1234Numberofconcurrentqueries1618202224262830Memory(GB)SAQLSiddhi• State aggregation: we vary from 1 aggregation type to
4 aggregation types, which are chosen from the pool
{count, sum, avg, max}. The default is to avoid the state
speciﬁcation (i.e., no states deﬁned).
We construct 4 queries for each evaluation category
and each attack category.
In total, we construct 64
queries for the micro-benchmark. For each SAQL query,
we construct an equivalent Siddhi query. Note that un-
like SAQL which provides explicit constructs for stateful
computation, Siddhi as well as other stream-based query
systems [20, 12, 51, 4], do not provide the native support
for these concepts, making these tools unable to spec-
ify advanced anomaly models (i.e., time-series anoma-
lies,
invariant-based anomalies, outlier-based anoma-
lies). Thus, for the “state evaluation category”, we only
construct Siddhi queries that monitor the same event pat-
tern without stateful computation. Query 6 shows an
example micro-benchmark query for the joint category
“sensitive ﬁle accesses & state aggregation”.
1 proc p read || write file f["/etc/passwd" || "%.ssh/
id_rsa" || "%.bash_history" || "/var/log/wtmp"]
as evt #time(1 min)
e1 := count(evt.id)
e2 := sum(evt.amount)
e3 := avg(evt.amount)
e4 := max(evt.amount)
2 state ss {
3
4
5
6
7 } group by p
8 return p, ss.e1, ss.e2, ss.e3, ss.e4
Query 6: Example micro-benchmark query
Evaluation Results: For each evaluation category and
each attack category, we vary the number of concurrent
queries from 1 to 4 and measure the corresponding mem-
ory usage. Figures 5 to 8 show the results. We observe
that: (1) as the number of concurrent queries increases,
the memory usage increases of Siddhi are much higher
than the memory usage increases of SAQL in all eval-
uation settings; (2) when there are multiple concurrent
queries in execution, SAQL require a smaller memory
usage than Siddhi in all evaluation settings (30% aver-
age saving when there are 4 concurrent queries). Such
results indicate that the master-dependent-query scheme
employed in our query engine is able to save memory us-
age by sharing the intermediate execution results among
dependent queries. On the contrary, the Siddhi query en-
gine performs data copies, resulting in signiﬁcantly more
memory usage than our query engine. Note that for eval-
uation fairness, we use the replayer (Section 6.1) to re-
play a large volume of data in a short period of time.
Thus, the memory measured in Figures 5 to 7 is larger
than the memory measured in the case study (Table 3),
where we use the real-time data streams. Nevertheless,
this does not affect the relative improvement of SAQL
over Siddhi in terms of memory utilization.
7 Discussion
Scalability: The collection of system monitoring data
and the execution of SAQL queries can be potentially par-
allelized with distributed computing. Parallelizing the
data collection involves allocating computing resources
(i.e., computational nodes) to disjoint sets of enterprise
hosts to form sub-streams. Parallelizing the SAQL query
execution can be achieved through a query-based manner
(i.e., allocating one computing resource for executing a
set of queries over the entire stream), a substream-based
manner (i.e., allocating one computing resource for exe-
cuting all compatible queries over a set of sub-streams),
or a mixed manner. Nonetheless, the increasing scale
of the deployed environment, the increasing number of
submitted queries, and the diversity and semantic de-
pendencies among these queries bring signiﬁcant chal-
lenges to parallel processing. Thus, the adaptation of
our master-dependent-query scheme to such complicated
scenarios is an interesting research direction that requires
non-trivial efforts. In this work, however, we do not en-
able distributed computation in our query execution. In-
stead, we collect system monitoring data from multiple
hosts, model the data as a single holistic event stream,
and execute the queries over the stream in a centralized
manner. Nevertheless, we build our system on top of Sid-
dhi, which can be easily adapted to a distributed mode by
leveraging Apache Storm [27]. Again, we would like to
point out that the major focus of our work is to provide a
useful interface for investigators to query a broad set of
abnormal behaviors from system audit logs, which is or-
thogonal to the computing paradigms of the underlying
stream processing systems.
System Entities and Data Reduction: Our current data
model focuses on ﬁles, processes, and network connec-
tions. In future work, we plan to expand the monitoring
scope by including inter-process communications such
as pipes in Linux. We also plan to incorporate ﬁner gran-
ularity system monitoring, such as execution partition to
record more precise activities of processes [74, 75] and
in-memory data manipulations [46, 53]. Such additional
monitoring data certainly adds a lot more pressure to the
SAQL system, and thus more research on data reduction,
besides the existing works [69, 88], should be explored.
Master-Dependent Query: Our optimization focuses
on the queries that share the pattern matching results
and stateful computation results. More aggressive shar-
ing could include alerts and even results reported by the
alerts, which we leave for future work.
Anomaly Models: We admit that while SAQL supports
major anomaly models used in commonly observed at-
tacks, there are many more anomaly models that are
valuable for specialized attacks. Our SAQL now al-
USENIX Association
27th USENIX Security Symposium    651
lows easy plugins for different clustering algorithms, and
we plan to make the system extensible to support more
anomaly models by providing interfaces to interact with
the anomaly models written in other languages.
Alert Fusion: Recent security research [77, 45, 85]
shows promising results in improving detect accuracy us-
ing alert fusion that considers multiple alerts. While this
is beyond the scope of this work, our SAQL can be ex-
tended with the syntax that supports the speciﬁcations
of the temporal relationships among alerts. More so-
phisticated relationships would require further design on
turning each SAQL query into a module and chaining the
modules using various computations.
8 Related Work
Audit Logging and Forensics: Signiﬁcant progress
has been made to leverage system-level provenance for
forensic analysis, with the focus on generating prove-
nance graphs for attack causality analysis [74, 75, 63, 64,
32, 69, 88]. Recent work also investigates how to ﬁlter
irrelevant activities in provenance graphs [71] and how to
reduce the storage overheads of provenance graphs gen-
erated in distributed systems such as data centers [57].
These systems consider historical logs and their con-
tributions are orthogonal to the contribution of SAQL,
which provides a useful and novel interface for inves-
tigators to query abnormal behaviors from the stream of
system logs. Nevertheless, SAQL can be interoperated
with these systems to perform causality analysis on the
detected anomalies over the concise provenance graphs.
Gao et al. [50] proposed AIQL which enables efﬁcient
attack investigation by querying historical system audit