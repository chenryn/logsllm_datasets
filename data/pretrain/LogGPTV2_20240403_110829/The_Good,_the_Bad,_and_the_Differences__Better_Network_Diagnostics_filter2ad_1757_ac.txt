while TG 6≃ TB do
(τG, τB) ← FIRSTDIV(sG, sB)
τ ′
G ← APPLYTAINT(τG)
MAKEAPPEAR(τ ′
G, τG)
TB ← UPDATETREE(TB, ∆B→G)
return ∆B→G
function FIRSTDIV(sG, sB)
for each ﬁeld sG[i] 6= sB[i]
CREATETAINT(sG[i], sB[i])
τG ← sG, τB ← sB
while τG ≃ τB do
PROPTAINT(τG → PARENT(τG))
PROPTAINT(τB → PARENT(τB))
τG ← PARENT(τG)
τB ← PARENT(τB)
return (τG, τB)
function MAKEAPPEAR(τ ′
G) then
if BaseTuple(τ ′
G, τG)
if ImmutableTuple(τ ′
∆B→G ← ∆B→G ∪ {τ ′
G}
G) then FAIL
else
for τi ∈ CHILDREN(τG) do
PROPTAINT(τG → τi)
τ ′
i ← APPLYTAINT(τi)
if ∄τ ′
i then MAKEAPPEAR(τ ′
i ,τi)
return
Figure 3: Pseudocode of the DiffProv algorithm. The FINDSEED, FIRSTDIV, MAKEAPPEAR, and UPDATETREE functions are
explained in Sections 4.2, 4.4, 4.5, and 4.6 respectively. The CREATETAINT, PROPTAINT, and APPLYTAINT functions are
introduced to establish equivalence between corresponding tuples in TG and TB (Section 4.3).
(DIFFERENTIAL PROVENANCE). Given two
DEFINITION 1
provenance trees TG and TB with seed tuples sG and sB,
the differential provenance of TG and TB is a set of changes
∆B→G to mutable tuples that 1) transforms TB into a tree
that is equivalent to TG, and 2) preserves sB.
Figure 4 illustrates this deﬁnition with a simple derivation
rule C(x,y2,z+1):-A(x,y),B(x,y,z) and three ex-
ample tuples. The seeds A(1,2) and A(2,2) are con-
sidered to be equivalent (and immutable). To align the two
provenance trees, the differential provenance of TB and TG
would be a change from the mutable base tuple B(1,2,3)
in TB to B(1,2,4), which makes it equivalent to its corre-
sponding tuple B(2,2,4) in TG. This update will be prop-
agated and further change C(1,4,4) to C(1,4,5) in TB,
which now becomes equivalent to tuple C(2,4,5) in TG.
4. THE DIFFPROV ALGORITHM
In this section, we present DiffProv, a concrete algorithm
that can generate differential provenance. Initially, we will
assume that the two trees are completely materialized and
have been downloaded to a single node; however, we will
remove this assumption at the end of this section.
4.1 Roadmap
The DiffProv algorithm is shown in Figure 3. We begin with
an intuitive explanation, and then explain each step in more
detail.
When invoked with two provenance trees – a “good” tree
TG and a “bad” tree TB – DiffProv begins by identifying the
seed tuples of both trees (Section 4.2). DiffProv then veriﬁes
that the two seed tuples are of the same type; if they are
not, TG and TB are not really comparable, and the algorithm
fails. Otherwise, DiffProv deﬁnes an equivalence relation
that maps the seed of the “bad” tree to the seed of the “good”
tree (Section 4.3). This helps DiffProv to align a ﬁrst tiny
subtree of the two trees, which provides the base case for the
following inductive step.
Starting with a pair of subtrees that are already aligned,
DiffProv then identiﬁes the parent vertexes τG and τB of
the two trees and checks whether they are already the same
under the equivalence relation deﬁned earlier (Section 4.4).
If so, DiffProv has found a larger pair of aligned subtrees,
C(1,4,4) 
C(2,4,5) 
diﬀ 
diﬀ 
A(1,2) 
B(1,2,3) 
A(2,2) 
B(2,2,4) 
immutable 
mutable 
equivalent tuple 
TB
TG
Figure 4: A simpliﬁed example showing the differential
provenance for a one-step derivation. A(1,2), A(2,2) are
the seeds; equivalent ﬁelds are underlined, and differences
are boxed. Differential provenance transforms B(1,2,3)
into B(1,2,4) to align this derivation.
and repeats. If not, DiffProv checks which children of τG
are not present in TB, and then attempts to make changes
so as to make these children appear (Section 4.5–4.6). In
doing so, DiffProv heavily relies on the “good” tree TG as a
guide: rather than trying to guess combinations of base tuple
changes that might cause the missing tuples to be created,
DiffProv creates them in the same way that they were created
in TG (modulo equivalence), which reduces an exponential
search problem to a linear one.
During alignment, DiffProv accumulates a set of base tu-
ple changes. Once the roots of TG and TB have been reached,
DiffProv outputs the accumulated changes as ∆B→G and
terminates.
4.2 Finding the seeds
Given the two provenance trees TG and TB, DiffProv’s ﬁrst
step is to ﬁnd the seed of each tree. To do this, DiffProv
uses the following insight: unlike databases, distributed sys-
tems and networks usually do not perform one-shot compu-
tations; rather, they respond to external stimuli. For instance,
networks route incoming packets, and systems like Hadoop
process incoming jobs. Thus, the provenance of an output is
not a uniform tree; rather, there will be one “special” branch
of the tree that describes how the stimulus made its way
through the system (say, the route of an incoming packet),
while the other branches describe the reasons for what hap-
pened at each step (say, conﬁguration states). The seed of
the tree is simply the external event, which can be found at
the bottom of this “special” branch.
At ﬁrst glance, it may seem difﬁcult to ﬁnd this stimulus
in a given provenance tree, but in fact there is an easy way to
do this. Notice that each derivation is triggered because its
last precondition has been satisﬁed; for instance, if a tuple A
was derived through a rule A:-B,C,D, then one of the three
tuples B, C, and D must have appeared last, when the other
two were already present. Thus, this last tuple represents the
stimulus for the derivation. Conveniently, the provenance
graph we have adopted (see Section 3.2) already has a spe-
cial vertex – the APPEAR vertex – to identify this tuple.
Thus, DiffProv can ﬁnd the seed as follows. Starting at
the root of each tree, it performs a kind of recursive descent:
at each vertex v, it scans the direct children of v, locates
the APPEAR vertex with the highest timestamp, and then de-
scends into the corresponding branch of the tree. By repeat-
ing this step, DiffProv eventually reaches a leaf that is of
type INSERT, which it then considers to be the seed.
4.3 Establishing equivalence
Next, DiffProv checks whether the seeds of TG and TB are of
the same type. It is possible that they are not; for instance,
the operator might have asked DiffProv to compare a ﬂow
entry that was generated by the controller program to one
that was hard-coded. In this case, the two trees are not really
comparable, and DiffProv fails.
Even if the seeds sG and sB do have the same type, some
of their ﬁelds will be different. For instance, sG might be a
packet pkt(1.2.3.4,80,A), and sB might be a packet
pkt(1.2.3.5,80,B); in this case, the two packets have
the same port number (80) but different IP addresses and
payloads. This is not a problem for the seeds themselves,
since they are equivalent by deﬁnition (Section 3.3); how-
ever, it is a problem for tuples that are – directly or indi-
rectly – derived from the seeds. For instance, if a tuple
τ :=portAndLastOctet(80,4) was derived from sG via
a chain of several different rules, how can DiffProv know
what tuple would be the equivalent of τ in TB? A human di-
agnostician could intuitively guess that it should be portAnd
LastOctet(80,5), since the last octet in sB was 5, but
DiffProv must ﬁnd some other way.
To this end, DiffProv taints all the ﬁelds of tuples in TG
that have been computed from ﬁelds of sG in some way, and
maintains, for each tainted ﬁeld, a formula that expresses
the ﬁeld’s value as a function of ﬁelds in sG. In the above
example, both ﬁelds of τ would be tainted. If X, Y, and Z are
the three ﬁelds of sG, then the formula for the ﬁrst ﬁeld of τ
would simply be Y (since it is just the port number from the
original packet), and the formula for the second ﬁeld would
be X&0xFF (since it is the last octet of the IP address in sG).
With these formulae, DiffProv can ﬁnd the equivalent of any
tuple in TG simply by plugging in the values from sB. This
will become important in the next step, where DiffProv must
make missing tuples appear in TB.
DiffProv computes the taints and formulae incrementally
as it works its way up the tree, as we shall see in the next
step. Initially, it simply taints each ﬁeld in sG and annotates
each ﬁeld with the identity function.
4.4 Aligning larger subtrees
Next, DiffProv attempts to align larger and larger subtrees of
TG and TB. Each step begins with a pair of subtrees that are
already aligned (modulo equivalence); initially, this will be
just the two seed tuples.
First, DiffProv propagates the taints to the parent vertex
of the good subtree, while updating the attached formulae
to reﬂect any computations. For instance, suppose the root
of the subtree was APPEAR(foo(1,2,3)), its parent was
DERIVE(bar(1,7),R), and that we have a derivation rule
that states bar(a,d):-foo(a,b,c),d=2*c+1. Then
DiffProv would propagate the taint from the 1 in foo to the
1 in bar and leave its formula unmodiﬁed. DiffProv would
also propagate the taint from the 3 in foo to the 7 in bar,
but it would attach a different formula to the 7: if f was the
formula used to compute the 3 in the good tree from some
ﬁeld(s) of sG that were different in sB (see Section 4.3), then
DiffProv would attach g:=2*f+1 to the 7, to reﬂect that it
was computed using d=2*c+1.
Then, DiffProv evaluates the formulae for all the tainted
tuples in the parent to compute the tuple that should exist in
the bad tree. For instance, in the above example, suppose the
formulae that are attached to the 1 and the 7 in bar(1,7)
are H+1 and 2*(G+1)+1, where H=9 and G=0 are the val-
ues of some ﬁelds in TB’s seed (see Section 4.3). Then Diff-
Prov would conclude that a bar(10,3) tuple ought to exist
in TB, since this would be equivalent to the bar(1,7) in
TG based on the equivalence relation.
If the expected tuple exists in TB and has been derived
using the expected rule, DiffProv adds the parent vertexes
to both subtrees (as well as any other subtrees of those ver-
texes) and repeats the induction step with the larger subtrees.
If the expected tuple does not exist in TB, DiffProv detects
the ﬁrst “divergence”, and will try to make the tuple appear
using the procedure we describe next.
4.5 Making missing tuples appear
At ﬁrst glance, it is not at all clear how to create an arbitrary
tuple. The tuple might be indirectly derived from many dif-
ferent base tuples, and attempting random combinations of
changes to these tuples would have an exponential complex-
ity. However, DiffProv has a unique advantage in the form
of the “good” tree TG, which shows how an equivalent tuple
has already been derived. Thus, DiffProv uses TG as a guide
in its search for useful tuple changes.
DiffProv begins by propagating the taints from the parent
of the current subtree in TG to the other children of that par-
ent. For instance, suppose that the current parent in TG is
a flowEntry(1.2.3.4,5,8) that has been derived us-
ing flowEntry(ip,s,d):- pkt(ip,s),cfg(s,d)
on a pkt(1.2.3.4,5), which is the root of the current
subtree. Then, DiffProv can simply propagate any taints,
and their formulae, from the 5 and the 8 in the flowEntry
to the corresponding ﬁelds in the config tuple.
Note that, in general, propagating taints from a vertex
v to one of its children can require inverting computations
that have been performed to obtain a ﬁeld of v. For in-
stance, if a tuple abc(5,8) has been derived using a rule
abc(p,q):-foo(p),bar(x),q=x+2, DiffProv must
invert q=x+2 to obtain x=q-2 and to thus conclude that
a bar(6) is required. While not all rules are injective or
surjective, or are simple enough to be inverted, in practice,
the rules we have encountered are usually simple enough to
permit this. In cases when automatic inverting is not possi-
ble, we depend on the model to provide inverse rules. When
there are several preimages (for example, if q=x2+4), Diff-
Prov can try all of them.
DiffProv then uses the formulae to compute, for each child
in TG, the equivalent tuple in TB, and it checks whether this
tuple already exists. The tuple may exist even if it is not
currently part of TB: it may have been derived for other rea-
sons, or it may have been created by earlier changes to base
tuples (see Section 4.6). If a tuple does not exist, DiffProv
checks whether it is a base tuple. If not, DiffProv looks up
the rule that was used to derive the missing tuple in TG, and
then recursively invokes the current step to make the missing
children of that tuple appear. If the missing tuple is indeed a
base tuple, DiffProv adds that base tuple to ∆B→G and then
performs the step we discuss next.
4.6 Updating TB after tuple changes
Once a new change has been added to ∆B→G, DiffProv must
update TB to reﬂect the change. Since DiffProv is meant to
be purely diagnostic, we do not want to actually apply the
new update directly into the running system, since this would
affect its normal execution. Rather, DiffProv clones the cur-
rent state of the system when it makes the ﬁrst change, and
applies its changes only to the clone. (Cloning can be per-
formed efﬁciently using techniques such as copy-on-write.)
The obvious consequence of each update is that one miss-
ing tuple in TB appears. However, the update might cause
other missing tuples to appear elsewhere that have not yet
been encountered by DiffProv, or remove existing tuples that
transitively depend on the original base tuple. Therefore,
DiffProv allows the derivations in the cloned state to pro-
ceed until the state converges. These updates only affect the
cloned state, and are not propagated to the runtime system.
If the seeds of the two trees are of the same type, and
if DiffProv can successfully invert any computations it en-
counters while propagating taints, it returns the set of tuple
changes ∆B→G as the estimated root cause.