where %PID% is the process identifier of the application that is being traced, and %u is a unique
number to differentiate files between threads running trace under different Java classloaders.
To change the name of the trace file, and the location where it is written, ensure that the IBM
MQ classes for JMS configuration file that the application uses contains an entry for the property
com.ibm.msg.client.commonservices.trace.outputName. The value for the property can be
either of the following:
• The name of the trace file that is created in the application’s working directory.
• The fully qualified name of the trace file, including the directory in which the file is created.
For example, to configure the IBM MQ classes for JMS to write trace information for an application to
a file called C:\Trace\trace.trc, the IBM MQ classes for JMS configuration file that the application
uses needs to contain the following entry:
com.ibm.msg.client.commonservices.trace.outputName=C:\Trace\trace.trc
Collecting an IBM MQ classes for JMS trace dynamically by using the traceControl
utility
The traceControl utility that is shipped with the IBM MQ classes for JMS allows trace to be collected from
a running application. This can be very useful if IBM Support need to see a trace from an application once
an issue has occurred, or if trace needs to be collected from a critical application that cannot be stopped.
Before you begin
Note: For Continuous Delivery, the trace control utility is removed from the product at IBM
MQ 9.3.3. IBM MQ 9.3.2 is the last Continuous Delivery release that it is delivered with. If dynamic trace is
needed to diagnose an issue, IBM Support can guide you through the steps to gather trace as required.
About this task
Important: This function is supported for IBM Java runtime environments (JREs) only.
For more information about the traceControl utility, see “Controlling trace in a running process by using
IBM MQ classes for Java and IBM MQ classes for JMS” on page 435.
To collect a trace by using the traceControl utility, complete the following steps.
Procedure
1.Bring up a command prompt, and navigate to the directory MQ_INSTALLATION_PATH\java\lib.
2.Run the command:
IBM MQ troubleshooting and support 429
java -jar com.ibm.mq.traceControl.jar -list
This command brings up a list of all of the Java processes on the system.
3.Identify the process identifier for the IBM MQ classes for JMS application that needs to be traced, and
run the command:
java -jar com.ibm.mq.traceControl.jar -i processidentifier -enable
Trace is now turned on for the application.
When trace is enabled, the IBM MQ classes for JMS start writing trace information to a trace file in the
application’s current working directory. The name of the trace file depends on the environment that the
application is running in.
From IBM MQ 9.3.0, if the application
has loaded the IBM MQ classes for Jakarta Messaging from the relocatable JAR file
com.ibm.jakarta.client.jar (Jakarta Messaging 3.0), or loaded the IBM MQ classes for JMS
from the relocatable JAR file com.ibm.mq.allclient.jar (JMS 2.0), trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
where %PID% is the process identifier of the application that is being traced, and %u is a unique
number to differentiate files between threads running trace under different Java classloaders.
4.To turn trace off, run the command:
java -jar com.ibm.mq.traceControl.jar -i processidentifier -disable
Tracing IBM MQ classes for Java applications
The trace facility in IBM MQ classes for Java is provided to help IBM Support to diagnose customer issues.
Various properties control the behavior of this facility.
Before you begin
Note: For Continuous Delivery, the trace control utility is removed from the product at IBM
MQ 9.3.3. IBM MQ 9.3.2 is the last Continuous Delivery release that it is delivered with. If dynamic trace is
needed to diagnose an issue, IBM Support can guide you through the steps to gather trace as required.
About this task
If you are asked to provide trace output to investigate an issue, use one of the options mentioned below:
• If the issue is easy to recreate, then collect an IBM MQ classes for Java trace by using a Java System
Property. For more information, see “Collecting an IBM MQ classes for Java trace by using a Java
system property” on page 431.
• If an application needs to run for a period of time before the issue occurs, collect an IBM MQ classes for
Java trace by using the IBM MQ classes for Java configuration file. For more information, see “Collecting
an IBM MQ classes for Java trace by using the IBM MQ classes for Java configuration file” on page 432.
• To generate a trace from an application that is currently running, collect the IBM
MQ classes for Java trace dynamically by using the traceControl utility. For more information, see
“Collecting an IBM MQ classes for Java trace dynamically by using the traceControl utility ” on page
434.
If you are unsure which option to use, contact your IBM Support representative and they will be able to
advise you on the best way to collect trace for the issue you are seeing.
If a severe or unrecoverable error occurs, First Failure Support Technology (FFST) information is recorded
in a file with a name of the format JAVACC xxxx.FDC where xxxx is a four-digit number. It is
incremented to differentiate .FDC files.
430 Troubleshooting and Support for IBM MQ
.FDC files are always written to a subdirectory called FFDC. The subdirectory is in one of two locations,
depending on whether trace is active:
Trace is active, and traceOutputName is set
The FFDC directory is created as a subdirectory of the directory to which the trace file is being written.
Trace is not active or traceOutputName is not set
The FFDC directory is created as a subdirectory of the current working directory.
The JSE common services uses java.util.logging as its trace and logging infrastructure. The root
object of this infrastructure is the LogManager. The log manager has a reset method, which closes
all handlers and sets the log level to null, which in effect turns off all the trace. If your application
or application server calls java.util.logging.LogManager.getLogManager().reset(), it closes
all trace, which might prevent you from diagnosing any problems. To avoid closing all trace, create a
LogManager class with an overridden reset() method that does nothing, as in the following example:
package com.ibm.javaut.tests;
import java.util.logging.LogManager;
public class JmsLogManager extends LogManager {
// final shutdown hook to ensure that the trace is finally shutdown
// and that the lock file is cleaned-up
public class ShutdownHook extends Thread{
public void run(){
doReset();
}
}
public JmsLogManager(){
// add shutdown hook to ensure final cleanup
Runtime.getRuntime().addShutdownHook(new ShutdownHook());
}
public void reset() throws SecurityException {
// does nothing
}
public void doReset(){
super.reset();
}
}
The shutdown hook is necessary to ensure that trace is properly shut down when the JVM finishes. To use
the modified log manager instead of the default one, add a system property to the JVM startup:
java -Djava.util.logging.manager=com. mycompany.logging.LogManager ...
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
information described in this section, IBM Support might request further information on a case by case
basis.
Collecting an IBM MQ classes for Java trace by using a Java system property
For issues that can be reproduced in a short amount of time, IBM MQ classes for Java trace should be
collected by setting a Java system property when starting the application.
About this task
To collect a trace by using a Java system property, complete the following steps.
Procedure
• Run the application that is going to be traced by using the following command:
java -Dcom.ibm.msg.client.commonservices.trace.status=ON application_name
IBM MQ troubleshooting and support 431
When the application starts, the IBM MQ classes for Java start writing trace information to a trace file
in the application’s current working directory. The name of the trace file depends on the environment
that the application is running in:
– For IBM MQ classes for Java for IBM MQ 9.0.0 Fix Pack 1 or earlier, trace is written to a file called
mqjms_%PID%.trc.
– From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for Java from the
JAR file com.ibm.mq.jar, trace is written to a file called mqjava_%PID%.trc.
– From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for Java
from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.trc.
– From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM
MQ classes for Java from the JAR file com.ibm.mq.jar, trace is written to a file called
mqjava_%PID%.cl%u.trc.
– From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM MQ classes
for Java from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file
called mqjavaclient_%PID%.cl%u.trc.
– From IBM MQ 9.3.0, if the application has loaded the IBM
MQ classes for Java from the relocatable JAR file com.ibm.mq.jakarta.client.jar (Jakarta
Messaging 3.0) or com.ibm.mq.allclient.jar (JMS 2.0), trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
where %PID% is the process identifier of the application that is being traced, and %u is a unique
number to differentiate files between threads running trace under different Java classloaders.
The application stops writing information to the trace file when it is stopped.
If the application has to run for a long period of time before the issue that the trace is being collected
for occurs, then the trace file could potentially be very large. In this situation, consider collecting trace
by using the IBM MQ classes for Java configuration file (see “Collecting an IBM MQ classes for Java
trace by using the IBM MQ classes for Java configuration file” on page 432). When enabling trace in
this way, it is possible to control the amount of trace data that the IBM MQ classes for Java generate.
Collecting an IBM MQ classes for Java trace by using the IBM MQ classes for Java
configuration file
If an application must run for a long period of time before an issue occurs, IBM MQ classes for Java trace
should be collected by using the IBM MQ classes for Java configuration file. The configuration file allows
you to specify various options to control the amount of trace data that is collected.
About this task
To collect a trace by using the IBM MQ classes for Java configuration file, complete the following steps.
Procedure
1.Create an IBM MQ classes for Java configuration file.
For more information about this file, see The IBM MQ classes for Java configuration file.
2.Edit the IBM MQ classes for Java configuration file so that the property
com.ibm.msg.client.commonservices.trace.status is set to the value ON.
3.Optional: Edit the other properties that are listed in the IBM MQ classes for Java configuration file Java
Standard Edition Trace Settings.
4.Run the IBM MQ classes for Java application by using the following command:
java -Dcom.ibm.msg.client.config.location=config_file_url
application_name
432 Troubleshooting and Support for IBM MQ
where config_file_url is a uniform resource locator (URL) that specifies the name and location of the
IBM MQ classes for Java configuration file. URLs of the following types are supported: http, file,
ftp, and jar.
Here is an example of a Java command:
java -Dcom.ibm.msg.client.config.location=file:/D:/mydir/myJava.config
MyAppClass
This command identifies the IBM MQ classes for Java configuration file as the file
D:\mydir\myJava.config on the local Windows system.
By default, the IBM MQ classes for Java start writing trace information to a trace file in the
application’s current working directory when the application starts up. The name of the trace file
depends on the environment that the application is running in:
• For IBM MQ classes for Java for IBM MQ 9.0.0 Fix Pack 1 or earlier, trace is written to a file called
mqjms_%PID%.trc.
• From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for Java from the
JAR file com.ibm.mq.jar, trace is written to a file called mqjava_%PID%.trc.
• From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for Java
from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.trc.
• From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM
MQ classes for Java from the JAR file com.ibm.mq.jar, trace is written to a file called
mqjava_%PID%.cl%u.trc.
• From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM MQ classes
for Java from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
• From IBM MQ 9.3.0, if the application has loaded the IBM
MQ classes for Java from the relocatable JAR file com.ibm.mq.jakarta.client.jar (Jakarta
Messaging 3.0) or com.ibm.mq.allclient.jar (JMS 2.0), trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
where %PID% is the process identifier of the application that is being traced, and %u is a unique
number to differentiate files between threads running trace under different Java classloaders.
To change the name of the trace file, and the location where it is written, ensure that the IBM
MQ classes for Java configuration file that the application uses contains an entry for the property
com.ibm.msg.client.commonservices.trace.outputName. The value for the property can be
either of the following:
• The name of the trace file that is created in the application’s working directory.
• The fully qualified name of the trace file, including the directory in which the file is created.
For example, to configure the IBM MQ classes for Java to write trace information for an application to a
file called C:\Trace\trace.trc, the IBM MQ classes for Java configuration file that the application
uses needs to contain the following entry:
com.ibm.msg.client.commonservices.trace.outputName=C:\Trace\trace.trc
IBM MQ troubleshooting and support 433
Collecting an IBM MQ classes for Java trace dynamically by using the traceControl
utility
The traceControl utility that is shipped with the IBM MQ classes for Java allows trace to be collected from
a running application. This can be very useful if IBM Support need to see a trace from an application once
an issue has occurred, or if trace needs to be collected from a critical application that cannot be stopped.
Before you begin
Note: For Continuous Delivery, the trace control utility is removed from the product at IBM
MQ 9.3.3. IBM MQ 9.3.2 is the last Continuous Delivery release that it is delivered with. If dynamic trace is
needed to diagnose an issue, IBM Support can guide you through the steps to gather trace as required.
About this task
For more information about the traceControl utility, see “Controlling trace in a running process by using
IBM MQ classes for Java and IBM MQ classes for JMS” on page 435.
To collect a trace by using the traceControl utility, complete the following steps.
Procedure
1.Bring up a command prompt, and navigate to the directory MQ_INSTALLATION_PATH\java\lib.
2.Run the command:
java -jar com.ibm.mq.traceControl.jar ...
This command brings up a list of all of the Java processes on the system.
3.Identify the process identifier for the IBM MQ classes for Java application that needs to be traced, and
run the command:
java -jar com.ibm.mq.traceControl -i process identifier -enable
Trace is now turned on for the application.
When trace is enabled, the IBM MQ classes for Java start writing trace information to a trace file in the
application’s current working directory. The name of the trace file depends on the environment that the
application is running in:
• For IBM MQ classes for Java for IBM MQ 9.0.0 Fix Pack 1 or earlier, trace is written to a file called
mqjms_%PID%.trc.
• From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for Java from the
JAR file com.ibm.mq.jar, trace is written to a file called mqjava_%PID%.trc.
• From IBM MQ 9.0.0 Fix Pack 2, if the application has loaded the IBM MQ classes for Java
from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.trc.
• From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM
MQ classes for Java from the JAR file com.ibm.mq.jar, trace is written to a file called
mqjava_%PID%.cl%u.trc.
• From IBM MQ 9.1.5 and IBM MQ 9.1.0 Fix Pack 5, if the application has loaded the IBM MQ classes
for Java from the relocatable JAR file com.ibm.mq.allclient.jar, trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
• From IBM MQ 9.3.0, if the application has loaded the IBM
MQ classes for Java from the relocatable JAR file com.ibm.mq.jakarta.client.jar (Jakarta
Messaging 3.0) or com.ibm.mq.allclient.jar (JMS 2.0), trace is written to a file called
mqjavaclient_%PID%.cl%u.trc.
434 Troubleshooting and Support for IBM MQ
where %PID% is the process identifier of the application that is being traced, and %u is a unique
number to differentiate files between threads running trace under different Java classloaders.
4.To turn trace off, run the command:
java -jar com.ibm.mq.traceControl -i process identifier -disable
Controlling trace in a running process by using IBM MQ classes for Java and
IBM MQ classes for JMS
The IBM MQ classes for Java, IBM MQ classes for JMS , and IBM MQ classes
for Jakarta Messaging register a Standard MBean that allows suitable Java Management Extensions (JMX)
tools to control certain aspects of trace behavior for a client process.
Note: For Continuous Delivery, the trace control utility is removed from the product at IBM
MQ 9.3.3. IBM MQ 9.3.2 is the last Continuous Delivery release that it is delivered with. If dynamic trace is
needed to diagnose an issue, IBM Support can guide you through the steps to gather trace as required.
Principles
As an alternative to the well-known general-purpose tools like jconsole you can use a command-line
tool in the form of an executable JAR file to access these facilities.
The JAR file is called com.ibm.mq.traceControl.jar and is stored in the java/lib subdirectory
of the IBM MQ installation. For more details see What is installed for IBM MQ classes for JMS and
Installation directories for IBM MQ classes for Java .
Note: Depending on configuration, JMX tools can be used either locally (on the same system as the
process) or remotely. The local case is discussed initially.
Finding the process
To control a process, you must establish a JMX connection it. To control a process locally, you must
specify its identifier.
To display a summary of running Java processes with their identifiers, run the executable JAR file with the
option -list. This option produces a list of identifiers and descriptions for the processes that are found.
Examining trace status
When you have found the identifier for the relevant process, run the executable JAR file with the options
-i identifier -status, where identifier is the identifier of the process you want to change. These
options display the status, either enabled or disabled for the process, and the information about where
the process is running, the name of the trace file, and a tree that represents the inclusion and exclusion of
packages in trace.
Enabling and disabling trace
To enable trace for a process, run the executable JAR file with the options -i identifier -enable.
To disable trace for a process, run the executable JAR file with the options -i identifier -disable.
Note: You can choose only one option from the set -status, -enable, and -disable.
Including and excluding packages
To include a package in trace for a process, run the executable JAR file with the options -i identifier