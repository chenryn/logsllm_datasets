title:WebCapsule: Towards a Lightweight Forensic Engine for Web Browsers
author:Christopher Neasbitt and
Bo Li and
Roberto Perdisci and
Long Lu and
Kapil Singh and
Kang Li
WebCapsule: Towards a Lightweight Forensic Engine
for Web Browsers
Christopher Neasbitt†, Bo Li†, Roberto Perdisci†(cid:111), Long Lu‡, Kapil Singh◦, and Kang Li†
†Department of Computer Science, University of Georgia
‡Department of Computer Science, Stony Brook University
(cid:111)College of Computing, Georgia Tech
◦IBM Research
{cjneasbi,lubao515}@uga.edu, PI:EMAIL, PI:EMAIL
PI:EMAIL, PI:EMAIL
ABSTRACT
Performing detailed forensic analysis of real-world web security
incidents targeting users, such as social engineering and phishing
attacks, is a notoriously challenging and time-consuming task. To
reconstruct web-based attacks, forensic analysts typically rely on
browser cache ﬁles and system logs. However, cache ﬁles and logs
provide only sparse information often lacking adequate detail to
reconstruct a precise view of the incident.
To address this problem, we need an always-on and lightweight
(i.e., low overhead) forensic data collection system that can be eas-
ily integrated with a variety of popular browsers, and that allows
for recording enough detailed information to enable a full recon-
struction of web security incidents, including phishing attacks.
To this end, we propose WebCapsule, a novel record and replay
forensic engine for web browsers. WebCapsule functions as an
always-on system that aims to record all non-deterministic inputs
to the core web rendering engine embedded in popular browsers,
including all user interactions with the rendered web content, web
trafﬁc, and non-deterministic signals and events received from the
runtime environment. At the same time, WebCapsule aims to be
lightweight and introduce low overhead. In addition, given a previ-
ously recorded trace, WebCapsule allows a forensic analyst to fully
replay and analyze past web browsing sessions in a controlled iso-
lated environment.
We design WebCapsule to also be portable, so that it can be
integrated with minimal or no changes into a variety of popular
web-rendering applications and platforms. To achieve this goal,
we build WebCapsule as a self-contained instrumented version of
Google’s Blink rendering engine and its tightly coupled V8 Java-
Script engine.
We evaluate WebCapsule on numerous real-world phishing at-
tack instances, and demonstrate that such attacks can be recorded
and fully replayed.
In addition, we show that WebCapsule can
record complex browsing sessions on popular websites and differ-
ent platforms (e.g., Linux and Android) while imposing reasonable
overhead, thus making always-on recording practical.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813656.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and protection
General Terms
Security; Forensics
Keywords
Forensic Engine; Web Security; Browsing Replay
1.
INTRODUCTION
The ability to perform accurate forensic analysis of web-based
security incidents is critical, as it allows security researchers to bet-
ter understand past incidents and develop stronger defenses against
future attacks. Unfortunately, analyzing real-world web attacks that
directly target users, such as social engineering and phishing at-
tacks, remains an extremely challenging and time-consuming task.
The state-of-the-art methods for reconstructing web-based inci-
dents generally follow two approaches. The ﬁrst approach relies
on analyzing the web browser’s history, cache ﬁles, and system
logs [16, 20]. However, cache ﬁles and logs provide only sparse
information often lacking adequate detail to reconstruct a precise
view of what happened during social engineering and phishing at-
tacks that may have occurred days in the past. The second approach
leverages access to full network packet traces, which may provide
some indications of how an incident unfolded. However, the com-
plexity of modern web pages results in a large semantic gap be-
tween the web trafﬁc and the detailed events (e.g., page render-
ing, mouse movements, key presses, etc.) that occurred within the
browser [18]. Such semantic gaps make it very difﬁcult to precisely
reconstruct what a victim actually saw and how she was tricked,
and to identify what information was consequently leaked.
To address this problem, we need a forensic data collection sys-
tem that satisﬁes the following requirements:
- be always-on, so that all (unexpected) incidents can be trans-
parently recorded, including new attacks that follow previ-
ously unknown patterns;
- be lightweight, to minimize performance overhead, thus mak-
ing always-on recording practical;
- be portable, to operate in a variety of web-rendering applica-
tions and platforms;
- provide critical information to greatly enhance and facilitate
a forensic analyst’s investigation of web security incidents,
133with particular focus on attacks that directly target users,
such as social engineering and phishing attacks.
In this paper we propose WebCapsule, a novel record and replay
forensic engine for web browsers. WebCapsule lays the founda-
tions for web-based attack reconstruction and analysis while meet-
ing all of the above stated requirements. Our main goal is to enable
an always-on, transparent, and ﬁne-grained recording (and subse-
quent replay) of potentially harmful web browsing sessions. As de-
picted in Figure 1, WebCapsule aims to record all non-deterministic
inputs to the core web rendering engine embedded in the browser,
including all user interactions with the rendered web content, web
trafﬁc, and non-deterministic signals and events received from the
runtime environment.
WebCapsule allows an analyst to later replay previously recorded
browsing sessions in a separate controlled environment, where no
new external user inputs or network transactions are needed. This
enables detailed analysis of security incidents that are (obviously)
unexpected, and allows for reconstructing detailed information
about incidents that may follow new, never-before-seen attack pat-
terns.
In addition, by replaying all non-deterministic inputs, in-
cluding all content provided by the server, WebCapsule enables
a full forensic investigation of incidents involving ephemeral web
content, such as short-lived phishing or social engineering attack
pages.
While some previous work has studied record and replay to as-
sist the debugging of web applications [2,5,23], these studies do not
focus on forensic analysis and, more importantly, do not satisfy the
associated requirements listed above. For example, TimeLapse [5]
is a debugging tool based on Apple’s WebKit [30] that allows for
recording and replaying web content. However, TimeLapse does
not work as an “always on” system. Also, TimeLapse does not al-
low for transparent recording because it deeply modiﬁes the inter-
nals of WebKit, for example to force a synchronous scheduling of
threads such as the HTML parser thread [25], thus also impacting
performance. In addition, TimeLapse currently only works on Ma-
cOS+Safari+WebKit [26], and is not easily portable to other oper-
ating systems and browsers. Conversely, WebCapsule can function
as an always-on system (e.g., it can be conﬁgured to start record-
ing at browser startup with no user intervention) to continuously
and transparently record browsing sessions while introducing low
overhead. Furthermore, WebCapsule is highly portable, can be em-
bedded in a variety of web-rendering applications, and can run on
a variety of platforms. Furthermore, unlike [2, 23], WebCapsule
is not limited to only recording user interactions with web pages,
but instead aims to record all non-deterministic events needed to
fully replay browsing traces, including all previously rendered web
content, without incurring high performance overhead (we further
discuss differences with previous work in Section 8). This is very
important for forensic analysis. In fact, most malicious web pages
(e.g., phishing websites) are short lived. Therefore, because [2, 23]
only record user interactions with pages without recording all other
non-deterministic inputs (e.g., network traces, timing information,
etc.), they do not enable an after-the-fact replay and investigation
of security incidents. WebCapsule solves this problem.
To make WebCapsule portable, so that it can be easily embed-
ded in a wide variety of web-rendering software (e.g., different
browsers), we design and implement it as a self-contained instru-
mentation layer around Google’s Blink web rendering engine [3],
which is already embedded in a variety of browsers (e.g., Chrome,
WebView, Opera, Amazon Silk, etc.) and can run on different plat-
forms (e.g., Linux, Android, Windows, and Mac OS). To imple-
ment our WebCapsule forensic engine, we inject lightweight (i.e.,
low overhead) instrumentation shims into Blink and its tightly cou-
Figure 1: High-level overview of WebCapsule’s record and replay
capabilities. Non-deterministic inputs to the embedded web ren-
dering engine are recorded, and can be fully replayed in an isolated
forensic analysis environment where no new external user inputs or
network transactions are received.
Figure 2: Overview of WebCapsule’s instrumentation shims.
pled V8 JavaScript engine [28] (see Figure 2) in a way that allows
us to inherit Blink’s portability.
WebCapsule’s portability has several advantages. Not only can
it be readily deployed into existing Blink-based browsers and mul-
tiple platforms, but it also allows us to fully replay the browsing
traces on a device (or virtual machine) whose platform may differ
from the platform where the traces were recorded.
At the same time, our design choice of “living” strictly inside
Blink imposes a number of constraints that make the instrumenta-
tion process challenging, especially for enabling the replay of com-
plex browsing traces. For instance, one of the main challenges we
address is how to inject lightweight instrumentation shims without
altering the rendering engine’s application and platform program-
ming interfaces (APIs), so that we can fully inherit Blink’s portabil-
ity (the challenges we encountered are discussed in more details in
Sections 3 and 5). Moreover, Blink is highly multi-threaded, mak-
ing the replay of complex browsing traces challenging (e.g., Blink’s
main thread, HTML parser, and JavaScript WebWorkers could be
scheduled differently during replay). Nonetheless, we are able to
address these challenges (see Section 5) and, in turn, we can record
and replay complex browsing sessions, including on popular and
highly dynamic websites (e.g., Facebook).
In summary, we make the following contributions:
• We propose WebCapsule, a novel record and replay foren-
sic engine for web browsers that enables an always-on and
transparent ﬁne-grained recording (and subsequent replay)
of web browsing sessions. To the best of our knowledge,
ours is the ﬁrst work towards creating such an always-on and
yet lightweight (i.e., low overhead) forensic engine.
BrowserUser InputWebTrafﬁcSystem CallsPlatformRuntime Environment (User's Device)RecordReplayIsolated Analysis EnvironmentshimReplay BrowserRemoteWeb ServerStorageWeb RenderingEngineshimWeb RenderingEngineBlinkRendering EngineOS / Platform APIInstrumentation ShimWeb-rendering APIPlatformWebCapsuleWeb-rendering AppV8 JavaScriptEngineInstrumentation Shim134• We implement WebCapsule as a self-contained instrumen-
tation layer around Google’s Blink and V8 engines with-
out changes to their application and platform APIs, and de-
scribe the technical challenges addressed by our solution.
Thanks to this design, WebCapsule enables record and re-
play of web events for any web-browsing application built
on top of Blink, making our forensic engine portable.
• We evaluate WebCapsule over numerous real-world phishing
attack instances, and demonstrate that such attacks can be ac-
curately recorded and fully replayed. Furthermore, we evalu-
ate WebCapsule on different physical devices and platforms,
including Linux and Android, and show that we can record
complex browsing sessions on popular highly-dynamic web-
sites while imposing reasonable overhead, thus making always-
on recording practical.
• We plan to release our WebCapsule prototype system and a
variety of browsing traces that we recorded for evaluation at
http://webcapsule.org.
2. PROBLEM DEFINITION AND GOALS
In this section we discuss WebCapsule’s goals using a represen-
tative example use case scenario. We also clarify the scope and
non-goals for our work.
Representative Use Case. Assume that an employee, Alice, in a
sensitive enterprise or government network, falls victim of a phish-
ing attack. Alice unintentionally leaks credentials (e.g., user name,
password, employer id, etc.) that allow the attackers to access con-
ﬁdential organizational information. After a number of days from
the phishing attack, as anomalous data access patterns are discov-
ered, a forensic analyst may be called in to reconstruct a detailed
picture of how the incident occurred, starting from the attack incep-
tion. Based on an analysis of the credentials used by the attackers
to access sensitive information, the analyst suspects a small set of
users, including Alice, may have leaked the credentials. At this
point, the analyst would need to explore the detailed browsing his-
tory of these users, in an attempt to reconstruct how the credentials
were actually leaked and learn how the phishing attack unfolded.
In particular, in addition to regular browser and network logs, the
analyst would like to reconstruct the users’ interactions with web-
pages (e.g., mouse and keyboard inputs) and the browsers’ view
of rending events (e.g., layout and content changes), to gather de-
tailed and essential information for attack analysis. Ultimately, this
ﬁne-grained analysis would allow the organization to understand
how Alice was tricked into leaking the credentials, and how orga-
nizational security policies and user education can be improved to
prevent future attacks.
WebCapsule’s Goals. In the above example, WebCapsule’s role is
to collect the critical information that would enable the analyst to
precisely reconstruct how the phishing attack unfolded and how the
user was tricked. Speciﬁcally, WebCapsule aims to transparently
record enough information to enable the forensic analyst to recon-
struct a user’s historic browsing activities that occurred within a
certain time window of interest.
To meet the above goals, while the user is browsing the web
WebCapsule transparently collects the following information:
• Every time a mouse click or keypress occurs, WebCapsule
records the HTML corresponding to the underlaying DOM
element that is the target of the input event. In addition, for
all mouse clicks and “Enter” keypress events (which may
initiate a page navigation or form submission), a snapshot
of the current DOM tree is taken and stored. This happens
right before the user input event is dispatched to any other
browser components (e.g., the JavaScript engine, extensions,
etc.) that could alter the DOM. This allows the forensic ana-
lyst to analyze exactly how the page was structured at every
signiﬁcant user interaction with the page’s components.
• WebCapsule also aims to record all non-deterministic inputs
to the rendering engine, including all input events (e.g., mouse
location coordinates, keypress codes, etc.), responses to net-
work requests, and return values from calls to the underlying
platform API. All this information is transparently recorded
and immediately ofﬂoaded to a data collection agent, which
can then store it into an archive of historic browsing traces.
Furthermore, WebCapsule allows the forensic analyst to later
retrieve a browsing trace from this archive, reload it inside
the rendering engine, and replay what the user did and saw
on the browser.
Non-Goals and Future Work.
In this paper, we only focus on
laying the foundational work to enable “always on” transparent
recording and replay of browsing traces with limited overhead.
Clearly, the data collected by our WebCapsule forensic engine
may include very sensitive information, such as passwords, credit
card numbers, other personal banking information, etc., whose con-
ﬁdentiality needs to be protected.
In this paper we do not fo-
cus on protecting the conﬁdentiality of the recorded information.
Nonetheless, we believe this problem may be solved via a combi-
nation of approaches, as discussed below.
For instance, the forensic engine could maintain a whitelist of
websites (e.g., online banking sites, healthcare-related sites, etc.)
on which to avoid recording any information, thus following an ap-
proach similar to SSL man-in-the-middle web proxies commonly
deployed for security and compliance reasons in sensitive enter-
prise networks. In addition, the user (or a system administrator,
in corporate environments) may be allowed to customize such a
whitelist, thus further improving the protection of potentially sen-
sitive information.
An additional approach is to appropriately choose encryption
primitives, which could be implemented by the software agent that
concretely collects the recorded data from WebCapsule and stores
them on disk. For example, a different key may be generated to en-
crypt different parts of the browsing traces (e.g., one key per each
new tab opened by the browser). The related decryption keys may
be stored in a secure key escrow, and a speciﬁc key may be released