When using `Flask 2.2.2`, it appears that serving static resources can result in a duplicate `Date` HTTP header field. Below is a simple example to demonstrate how to reproduce this issue:

### Flask Application Code
```python
from flask import Flask

app = Flask(__name__, static_url_path='/static')

@app.route('/', methods=['GET'])
def index():
    return "Hello World"

if __name__ == '__main__':
    app.run(port=30887)
```

### Create a Static File
Create a `static` directory and add a simple file to it:
```sh
mkdir static
echo Hello > static/style.css
```

### Check HTTP Headers
Now, let's check the HTTP headers for both the root URL and the static resource:

#### Root URL
```sh
$ curl -I http://127.0.0.1:30887/
HTTP/1.1 200 OK
Server: Werkzeug/2.2.2 Python/3.10.8
Date: Thu, 05 Jan 2023 21:53:31 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 11
Connection: close
```
The headers for the root URL look correct.

#### Static Resource
```sh
$ curl -I http://127.0.0.1:30887/static/style.css
HTTP/1.1 200 OK
Server: Werkzeug/2.2.2 Python/3.10.8
Date: Thu, 05 Jan 2023 21:53:53 GMT                <<<<
Content-Disposition: inline; filename=style.css
Content-Type: text/css; charset=utf-8
Content-Length: 6
Last-Modified: Thu, 05 Jan 2023 21:50:59 GMT
Cache-Control: no-cache
ETag: "1672955459.103843-6-1459357711"
Date: Thu, 05 Jan 2023 21:53:53 GMT                <<<<
Connection: close
```
As you can see, the `Date` header is duplicated in the response for the static content.

### Additional Information
- The response also includes the running versions of Python and Flask, which can be useful for confirming the environment.
- This issue was identified when using Nginx as a reverse proxy, which generates a warning about the duplicate `Date` header.

By following these steps, you can reproduce and verify the presence of the duplicate `Date` header in the HTTP response for static resources served by Flask 2.2.2.