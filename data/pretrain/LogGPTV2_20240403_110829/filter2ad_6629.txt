title:Taming the Flow Table Overflow in OpenFlow Switch
author:Siyi Qiao and
Chengchen Hu and
Xiaohong Guan and
Jianhua Zou
Taming the Flow Table Overﬂow in OpenFlow Switch
Siyi Qiao, Chengchen Hu, Xiaohong Guan, Jianhua Zou
PI:EMAIL, PI:EMAIL, {xhguan, jhzou}@sei.xjtu.edu.cn
Xi’an Jiaotong University
Xi’an, China
CCS Concepts
•Security and privacy → Systems security; •Networks →
Network architectures; Routers;
Keywords
SDN; Group table; ﬂow table; overﬂow ; table-miss
1.
INTRODUCTION
Software Deﬁned Networking (SDN) is an emerging net-
work architecture, which decouples the control plane from
the data plane and operates the global network with elabo-
rate abstraction [1]. The ﬂow table plays an important role
in an OpenFlow Switch (OFS) [2] and is the key to support
the SDN/OpenFlow abstraction. However, to provide wire-
speed processing, fast memory (e.g., TCAM, QDR, SRAM)
is utilized to form the ﬂow table. Unfortunately, the develop-
ment of such kind of fast memories is far behind the hungry
requirement on its usage. As a result, the ﬂow table installed
in OFS has large risk to be overﬂowed, possibly leading
to large number of packet-in/packet-out messages between
OFS and controller.
As shown in Figure 1(a), an incoming packet from a ﬂow
is processed according to the action speciﬁed in the accord-
ing ﬂow entry in the ﬂow table(s). If no entry is matched in
the ﬂow table, a packet-in message querying how to process
the packet will be sent to the controller. If the number of ac-
tive ﬂows usually exceeds the maximum number of entries in
the ﬂow table, the table-miss events are not avoidable. Then,
controller will delete an active ﬂow and add this new ﬂow,
This paper is supported in part by the National Natural Science Foundation
of China (61221063, 61272459, U1301254), 863 High Tech Development
Plan (2012AA011003) 111 International Collaboration Program of China,
Program for New Century Excellent Talents in University (NCET-13-0450)
and the Fundamental Research Funds for the Central Universities.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’16, August 22-26, 2016, Florianopolis , Brazil
© 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959063
meanwhile, that active ﬂow becomes to a new ﬂow. The
packet-in message revolves in the secure channel uncontrol-
lably. On the contrary, if we ignore the unmatched packet,
that is means we stop serving and it is unfair to the later ﬂow.
Figure 1: Classical and FTS structure
In this paper, we investigate how to mitigate the overhead
when occurring table-miss events based on the phenomenon
of uneven ﬂow table distribution. The basic idea is to dis-
tribute the packets facing table-miss event in heavily loaded
switch to other lightly loaded switches instead of triggering
packet-in message always in hot switches. The new mecha-
nism proposed in this paper to handle the table-miss event is
named Flow Table Sharing (FTS).
2. DESIGN OF FTS
Example operation. Figure 1(b) shows an example topol-
ogy with 4 routers and S2’s ﬂow table is just used up. To en-
sure that FTS prevents the storm of control messages caused
by the packet-in event, the S2 has to stop sending packet-
in messages to SDN controller. The new ﬂow will be han-
dled by the Off-line table-miss process, e.g., forwarding it
to S4 randomly that has spare ﬂow entries. After that, S4
can complete the policy routing by normal packet-in pro-
cess.The conceptual simplicity of FTS idea hides two signif-
icant challenges. 1) How to select a right port randomly by
SDN switch. 2) How to make this progress "pipeline-able"
in a general SDN switch without changing its Hardware.
In the design and implementation of FTS, we address these
two challenges by a new external select algorithm and group
actions. The SDN switch can process a packet through the
591
ControllerS1S2S3S4NEW flow   NEW flowSetupControllerS1S2S3S4NEW flow NEW flowSetupTable-missProcess Off-lineRandom to S4Active flowActivegets inactive Active flowNormalOur solution  DeleteAdd flow(a)(b) overﬂow, where "optimal" is the situation that the ﬂow ta-
ble has enough free space for following new ﬂow).
Figure 2: The conﬁguration of group table and the exter-
nal selection algorithm
speciﬁed group that is one of pipeline steps in a standard
OpenFlow SDN switch originally. The external user switch-
computed select algorithm [2] (e.g., hash on some user-conﬁgured
tuple or simple round robin) is allowed by the SELECT type
of group table, according to the Spec. OpenFlow1.3. This
select algorithm can help us assign an executable bucket that
contains actions for the new ﬂow. To implement FTS, one
ﬂow table entry and one group table are required. If the in-
coming packet can not match any high priority entry, it will
be managed by the ﬂow table entry reserved by FTS.
We still retain the table-miss ﬂow entry which action is
go-to FTS Group table. As Figure 2(a) shows, the buck-
ets in group table contain N actions to all the corresponding
neighbors of this switch and 1 action to CONTROLLER. It
will not select the CONTROLLER bucket until the ﬂow ta-
ble has spare space for new ﬂows. If we set the weight of
a bucket by 0, the actions of this bucket will be disabled. It
is equal to today’s general process of table-miss event. The
work-ﬂow of user algorithm is shown in Figure 2(b). The
external selection algorithm needs to check the ﬂag of ﬂow
table overﬂow and calculate the value of outport simply and
fast.
3. EVALUATION
Performance test:we ﬁrst build a switch in mininet, and
measure the number of control messages generated by set-
ting up a new ﬂow transfer(TCP, UDP) when the ﬂow table
of the switch is overﬂow, as well as the packet loss rate and
the average delay. We now demonstrate that the FTS can re-
duce the storm of control messages and RTT time during the
ﬂow table overﬂow period.
Table 1: Performance comparison between FTS and or-
dinary switch
optimal
our solution
overﬂow
TCP/loss
UDP/loss
37 / 0%
37 / 0%
43 / 0%
43 / 0%
379 / 15% 2199 / 0%
RTT(ms)
0.227
7.56
768
Table 1 summarizes three kinds of experiment results that
we compare to the optimal and the worst situations: UDP/loss
means the number of control messages / packets loss rate
during the time we transit a UDP network ﬂow. RTT(ms)
shows the average packets forwarding delay after building
the ﬂow in different situation (optimal, our solution, and
592
Figure 3: Accumulate distribution function of additional
ﬂow table resource usage for set a ﬂow and the hops be-
tween src and dst for each packet, when overﬂow.
Cost test:we evaluate the ﬂow table demand in the opti-
mal way that all switches have enough ﬂow table resources
and set this result as the control group. Then, on the one
hand, we evaluate the additional ﬂow table demand which
is required by rebuilding the interrupted ﬂow, when the FTS
try to ﬁx the problem caused by the overﬂow. On the other
hand, we evaluate the total ﬂow table consumption which is
required by building the new transmission for the ﬁrst time,
after the overﬂow happened. As Figure 3(a) shows, blue line
indicates the rebuilding situation and the red line indicates
the new ﬂow. We ﬁnd that FTS consumes more ﬂow table
resources and its average usage is 8.7 while the optimal is
5.9.
The green line in Figure 3(b) indicates the minimum (op-
timal) distance between any two points. While the red line
indicates the distance passed by the packet which is handled
by FTS after overﬂow. The blue line indicates the extra dis-
tance caused by FTS. We ﬁnd that it will ensure 95 percent
probability that the extra distance is less than 2.
4. CONCLUSION
This paper presents a new architecture named FTS to over-
come the big performance disaster caused by the ﬂow ta-
ble overﬂow in SDN switches.
It has several advantages:
1)FTS reduces both control message quantity and RTT time
by one orders of magnitude compared to current state-of-the-
art OpenFlow table-miss handler. 2)We show the validity
and fastness of the external user switch-computed select al-
gorithm. And 3)It is Easy to implement, easy to control and
the current state-of-the-art OpenFlow table-miss handler is a
special case of FTS.
5. REFERENCES
[1] N. McKeown, T. Anderson, H. Balakrishnan,
G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and
J. Turner. Openﬂow: enabling innovation in campus
networks. ACM SIGCOMM Computer Communication
Review, 38(2):69–74, 2008.
[2] O. S. Speciﬁation. v1. 5, open network foundation,
september 27, 2013.
GroupIDType=SELECTCountersSelect a bucket randomlyExternalSelectionAlgorithmBucket 0weight=1Outport=0Bucket 1weight=1Outport=1···BucketN-1weight=1Outport=N-1Bucket Nweight=1CONTROLLERinit outport = 0//packet arrivalif not overflow  outport = CONTROLLER;else if overflow  outport = (outport + 1) mod N; if outport == inport    outport = (outport + 1) mod N;return outport;(a) implemented situation(b) External Selection Algorithm110050100150 optimal new routedCDF (%)Number of entries02468050100150(b) optimal total increment in distanceCDF (%)Distance(a)