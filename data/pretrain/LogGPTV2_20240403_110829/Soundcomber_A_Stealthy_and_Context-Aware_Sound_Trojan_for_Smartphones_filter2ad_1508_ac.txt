Development Kit (NDK) and wrote an intermediate layer
between PocketSphinx and Soundcomber and integrated
both parts using the Java Native Interface (JNI).
Soundcomber segments the audio (described below) be-
fore processing the individual segments in PocketSphinx
to get the transcribed text. Segmentation of audio allows
Soundcomber to work only on some portions of the audio,
which reduces the overhead of speech recognition, thereby
making Soundcomber stealthier. Currently, Soundcomber
focuses on stealing information that can be transmitted as
digits (e.g., credit card numbers, social security number,
personal identiﬁcation number, and so on) and we there-
fore adopted a language model that covers spoken digits for
extracting information. The hotline detection described in
Section 3.1 on the other hand uses a small language model
for general spoken text.
Segmentation. Speech recognition with PocketSphinx is
still fairly expensive in terms of processing time. To re-
7http://www.4feets.com/2009/04/
speech-recognition-in-android-sdk-15/
8http://www.speech.cs.cmu.edu/pocketsphinx/
duce this overhead to a minimum, Soundcomber does not
work on the whole audio recording directly: instead, it pre-
processes the recording to identify the segments that con-
tain speech. Soundcomber ﬁrst analyzes the signal power
of the recording by calculating the mean power of individ-
ual frames containing ns samples. For each frame k, we
compute:
δk =
1
ns
ns
Xj=0
x(j)2
The average power over the whole recording with nf
frames is then computed as:
δRecording =
1
nf
nf
Xk=0
δk
By comparing the signal power δk of individual frames
with a threshold δthr = α · δRecording for a certain α, we
can locate the audio segments with sufﬁciently high sig-
nal power levels, which indicates the presence of relevant
sounds:
if (cid:26) δk ≤ δthr
δk > δthr
silence
sound
Like tone recognition, we also check the presence of
multiple consecutive frames with signal power levels above
the threshold, which collectively form a segment. This sim-
ple approach is both efﬁcient and effective, as shown in our
experimental study. Assuming for example that only 20%
of a recording contains speech (as could be the case when
navigating an IVR), then 60 seconds of audio would take
about 21.4 seconds of processing time if speech recognition
is run on the whole recording, but only 5.2 seconds if the
audio is segmented ﬁrst and only the segments with actual
speech are run through the speech recognition.
3.3 Targeted data extraction using proﬁles
The objective of Soundcomber is to extract a small
amount of high-value data from an audio recording. This
cannot be achieved without understanding the semantics of
the recorded audio. Although an effective semantic analysis
in general can be hard, our research shows that it can cer-
tainly be done for some speciﬁc scenarios, particularly in-
teractions with IVRs. Such an analysis is based upon a pre-
determined proﬁle, which indicates to Soundcomber how a
sequence of user behaviors (e.g., the digits entered or spo-
ken) can move an IVR to the state where sensitive user data
is input. The proﬁle also allows Soundcomber to skip over
the segments that do not involve useful information, thereby
reducing overhead.
In their general form, proﬁles model a context and de-
scribe the location of high-value information under such a
context. An example of the context can be audio features of
some keywords, like “enter your PIN”, which is supposed
to be followed by one’s password. Again, our research fo-
cuses on IVRs, whose interactions with a phone user can be
modeled as simple state machines. The sequence of such
transitions, as observed from the user’s digit inputs recov-
ered from an audio recording, points to the position where
credit-card numbers or other important data is entered.
We ﬁrst describe the proﬁle for a phone menu system and
then discuss how to apply the proﬁling idea more generally.
3.3.1 Proﬁling phone menus
Many businesses and organizations offer hotline services
through IVR systems. An IVR includes a phone menu,
which guides the caller step by step to the service she is
seeking. During such a process, conﬁdential user informa-
tion, such as credit-card number, social security number,
PIN, etc., is input by the user for authentication and other
purposes. As an example, the phone menu of Chase bank
lets a customer ﬁrst press “2” on the main menu, then “2”
on the submenu and ﬁnally “1” before asking a customer
to enter their 16-digit credit-card number. Therefore, a pro-
ﬁle for this menu needs to include a sequence (‘2’, ‘2’, ‘1’,
CC number), indicating the expected input to reach a state
in the IVR with high-value information. Following this se-
quence, Soundcomber can easily locate the segment that in-
cludes a credit-card number. The same idea can be applied
to model the interactions with other IVR systems. The ad-
versary can analyze an IVR phone menu ofﬂine, identify all
the sequences that lead to the desired user input, and then
assemble these sequences into a ﬁnite state machine, which
serves as the proﬁle. Figure 4 shows the state machine
corresponding to the IVR described above. In our current
proof-of-concept implementation, Soundcomber stores lin-
ear sequences and detects credit numbers after the sequence
“2, 2, 1” for example. A proﬁle can be expressed as {d1,
d2, d3, {target}}, where the di are the expected sequential
inputs and {target} the information which will be extracted.
We leave a full implementation with general ﬁnite state ma-
chines to future work.
To use such a proﬁle, our prototype of Soundcomber ﬁrst
runs tone recognition on the recorded audio to recover the
digits and lightweight speech recognition on the identiﬁed
segments to extract spoken digits. The output of tone and
speech recognition is combined into a transcript, which is
used to explore the state machine and identify the high-
value information in the transcript. If at any point a state is
reached which does not lead to high-value information, the
analysis is stopped and the recording discarded. A further
optimization is to run only tone recognition ﬁrst and use the
digits to explore the state machine. Once a state is reached
where high-value data is available, the speech recognition
is run on the relevant segments.
3.3.2 General proﬁles
Apart from the ﬁnite state machine-based proﬁles, the con-
text of phone conversations can also be ﬁngerprinted in
other, more generic ways, as described below.
In-depth
studies and implementation of these approaches are left to
future research.
Speech signatures: Soundcomber could take advantage of
the sound samples included in the incoming audio such as
the voice prompt to “speak or type your credit card number
now”. If this phrase is detected, then the outgoing audio
immediately after this signature is likely to be a spoken or
typed credit card number.
Sequence detection. Since a sequence of 12–16 digits is
quite likely a credit card number, proﬁles can also instruct
Soundcomber to scan for long numeric sequences. While
this method will work in some cases, we found that a se-
mantic understanding of the speech transcript aided in pick-
ing out speciﬁc, targeted pieces of information. Neverthe-
less, sophisticated combinations of different techniques can
improve the accuracy of detection.
Speech characteristics.
Proﬁles could specify certain
sound features that are typically exhibited by spoken credit
card numbers. For example, Soundcomber could perform
a high-level analysis of speech to hone in on speciﬁc fea-
tures unique to spoken credit card numbers (e.g., rhythmic
or monotonous speech). Once these features are observed,
Soundcomber can apply targeted speech extraction on the
Prompt for
Account Number
1
Enter
Account#
Acquire PIN
Enter
PIN
Sensitive Information
Acquired
Enter
CC#
Initial Menu
2
Options
Loan &
Credit Card
2
Credit Card
Information
1
Prompt for
Credit Card#
other
input
other
input
Termination
Figure 4. A model of a service line with two different paths leading to high(cid:173)value information. The
branches indicate the input required by the user to take the corresponding transition. For this IVR,
the expected input sequence for reaching high(cid:173)value information would either be “1” or “2, 2, 1”.
identiﬁed segments.
4 Stealthy Data Transmission
Once the sensitive information has been obtained via the
collection phase, it must be transmitted to the malware’s
master stealthily. This is where the advantage of Sound-
comber of processing recorded audio and extracting high-
value information locally becomes apparent.
If the mal-
ware master were to do processing centrally, Soundcomber
would have to transmit approximately 94KB of data for
each minute of recorded audio. This would not only make
it more difﬁcult for Soundcomber to operate stealthily, but
would also place a much larger burden on the infrastructure
of the malware master. Assuming for example anywhere be-
tween 100, 000 and 1, 000, 000 infected smartphones9, this
could easily generate in the order of several tens of giga-
bytes to a terabyte of data per day10 which would need to be
processed centrally by the malware master. By extracting
the relevant information locally, Soundcomber signiﬁcantly
reduces the data necessary to be transmitted to the malware
master. For one call, a one-minute recording would require
94KB to be transmitted to the malware master if no local
processing is done, but if a credit card number is extracted
locally then at most 16 bytes have to be transmitted, a reduc-
tion by a factor of 6000. Transmitting such a small amount
of data is much easier done stealthily and the remaining
work for the malware master becomes minimal.
As already mentioned, we assume Soundcomber does
not have permission to use the network to circumvent tools
9Android malware steals info from one million phone owners—
http://www.sophos.com/blogs/gc/g/2010/07/29/
android-malware-steals-info-million-phone-owners/.
10Assuming between 100, 000 and 1, 000, 000 infected smartphones,
on average 5 calls a day, where Soundcomber records the ﬁrst minute of
each call.
such as Kirin [5]. In fact, a recent paper [10] further pro-
poses to mediate the explicit communication between two
untrusted applications, by restricting access from one appli-
cation to another based on installation-time permissions and
run-time state. We present two methods that will circum-
vent such prevention and detection mechanisms. In the ﬁrst
method, Soundcomber uses a legitimate, existing applica-
tion with network access (such as the browser) to transmit
the sensitive information.
In the second method, Sound-
comber uses a paired Trojan application with network ac-
cess and communicates with it through a covert channel.
Both methods circumvent known, existing defenses.
4.1 Leveraging third(cid:173)party applications
The permission mechanism in Android only restricts
individual applications, not the relations between appli-
cations. This allows Soundcomber to communicate with
its master through a legitimate network-facing applica-
tion, such as a web browser. Speciﬁcally, the malware
can request the browser to open an URL in the form
http://target?number=N with N the credit card
number to pass it to a target web site. A weakness of this ap-
proach is that the transmission is more noticeable to the user
because the browser will be brought to the foreground. Such
an activity, however, could be easily “explained away”. For
example, an application which displays ads in its interface
can pretend to open a browser window for a more detailed
version of an ad, ﬁrst transmitting the valuable information
before immediately redirecting to the actual ad. Or a user
could be tricked into believing that a new browser window
is opend caused by a stray click that leads to a standard sites
such as Google or CNN. Nevertheless, we consider this ap-
proach to be more intrusive than a paired Trojan application,
which once installed, performs all such communication in
the background.
4.2 Covert channels with paired Trojans
4.2.2 Covert channels on the smartphone
Next we consider communication between two Trojan
applications.
In this case, Soundcomber is paired with a
Deliverer Trojan with network access, which transmits the
extracted sensitive information (typically only a few dozen
bytes) to the malware master over the Internet. Under the
current Android security model, the Soundcomber and De-
liverer applications could communicate through overt chan-
nels, however such communication will be limited with re-
cently proposed defenses [10]. To be as stealthy as possible
and to circumvent such defenses, covert channels on the An-
droid platform can be used instead to covertly transfer the
extracted information from Soundcomber to Deliverer and
thereby to the malware’s master. This paper thus also iden-
tiﬁes and evaluates new covert channels of communication
on smartphone platforms and demonstrates that communi-
cation through such channels is realistic for sensory mal-
ware.
4.2.1 Installation of paired Trojan applications
To leverage a second installed application (Deliverer) for
transmitting the extracted information to the Internet, we
have to convince the user to install such an application. We
assume that Soundcomber itself is packaged as a Trojan into
an application that is attractive enough to get users to install
it. Once the user has installed Soundcomber itself, we have
to make sure that the Deliverer application is also installed.
We have explored a number of options and believe that they
will trick enough users into installing the Deliverer applica-
tion.
Since an Android application can launch the installation
of another application, we investigated two possibilities:
Pop-up ad. The Deliverer application could implement a
cover functionality and hide the transmission functionality
as a Trojan part. When the user ﬁrst executes the cover func-
tionality of Soundcomber, a pop-up ad is displayed, adver-
tising the Deliverer application (respectively its cover func-
tion) as another fun, hip, cool, useful application. When
clicking on the ad, Soundcomber will tell Android to open a
web browser with the webpage of the Deliverer application
or even directly initiate the download in the web browser.
Packaged app. An Android application can include cus-
tom resources, e.g., the installation ﬁle for the Deliverer ap-
plication can be included in the Soundcomber app. When
Soundcomber is started for the ﬁrst time, it launches the
installation of the included application package for the De-
liverer app. Users might thus be tricked into conﬁrming the
installation, or be gently persuaded by informing them that
a “necessary helper application” has to be installed before
Soundcomber (respectively its cover function) can be used.
We discovered several covert channels on the Android plat-
form, some of which are speciﬁc to Android, and others
that are speciﬁc to Android’s underlying Linux system. The
channels have different properties in terms of stealthiness,
transmission rate and reliability (i.e., error rate). For Sound-
comber even low bit-rate covert channels are sufﬁcient to
transmit the high-value information, which is typically very
small. Here we describe a few covert channels we found
on Android that make use of vibration settings, volume set-
tings, the handset screen, and ﬁle locks.
Vibration Settings. The covert channel based on vibration
settings is speciﬁc to Android. Any application can change
the vibration settings and every time this setting is changed
the system sends a notiﬁcation to interested applications.
Our prototype exploits these notiﬁcations as a communica-
tion channel. Soundcomber codes the sensitive data into a
sequence of vibration settings and then applies these set-
tings sequentially. Deliverer listens to the setting changes
and decodes them back into the data.
While changing the settings might indirectly be noticed
by the user if a call or message arrives during transmission,
saving and restoring original settings after the transmission
as well as transmitting at opportune times (e.g., at night) can
mitigate this problem.
In our experiments we achieved a bandwidth of 87 bits
per second through this channel (see Section 6). Higher
bandwidth was prone to overload the Android system with
notiﬁcations. Nevertheless, 87 bits seems sufﬁcient for
transmitting the small amount of data Soundcomber col-
lects: for example, sending the 16 digits of a credit-card
number (54 bits) takes less than 1 second. Other advantages
of using this channel include that no permissions are needed
to access it and it does not leave any traces. We thus sug-
gest that isolation mechanisms like the one proposed in [10]
for smartphones must also restrict covert communication
through event notiﬁcations, otherwise they will not provide