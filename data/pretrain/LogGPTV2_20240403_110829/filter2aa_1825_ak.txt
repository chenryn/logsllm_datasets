Breakpoint 0 hit
KERNEL32!CreateFileW:
00007ffc`1f652300 ff25aa670500
jmp
qword ptr [KERNEL32!_imp_CreateFileW \
(00007ffc`1f6a8ab0)] ds:00007ffc`1f6a8ab0={KERNELBASE!CreateFileW (00007ffc`1c7\
5e260)}
• We have hit the breakpoint! Notice the thread in which it occurred. Let’s see what the call stack
looks like (it may take a while to show if the debugger needs to download symbols from Microsoft’s
symbol server):
0:002> k
# Child-SP
RetAddr
Call Site
00 00000001`226fab08 00007ffc`061c8368 KERNEL32!CreateFileW
01 00000001`226fab10 00007ffc`061c5d4d mscoreei!RuntimeDesc::VerifyMainRuntimeM\
odule+0x2c
02 00000001`226fab60 00007ffc`061c6068 mscoreei!FindRuntimesInInstallRoot+0x2fb
03 00000001`226fb3e0 00007ffc`061cb748 mscoreei!GetOrCreateSxSProcessInfo+0x94
04 00000001`226fb460 00007ffc`061cb62b mscoreei!CLRMetaHostPolicyImpl::GetReque\
stedRuntimeHelper+0xfc
05 00000001`226fb740 00007ffc`061ed4e6 mscoreei!CLRMetaHostPolicyImpl::GetReque\
stedRuntime+0x120
...
21 00000001`226fede0 00007ffc`1df025b2 SHELL32!CFSIconOverlayManager::LoadNonlo\
adedOverlayIdentifiers+0xaa
22 00000001`226ff320 00007ffc`1df022af SHELL32!EnableExternalOverlayIdentifiers\
+0x46
23 00000001`226ff350 00007ffc`1def434e SHELL32!CFSIconOverlayManager::RefreshOv\
erlayImages+0xff
24 00000001`226ff390 00007ffc`1cf250a3 SHELL32!SHELL32_GetIconOverlayManager+0x\
6e
25 00000001`226ff3c0 00007ffc`1ceb2726 windows_storage!CFSFolder::_GetOverlayIn\
fo+0x12b
26 00000001`226ff470 00007ffc`1cf3108b windows_storage!CAutoDestItemsFolder::Ge\
tOverlayIndex+0xb6
27 00000001`226ff4f0 00007ffc`1cf30f87 windows_storage!CRegFolder::_GetOverlayI\
nfo+0xbf
28 00000001`226ff5c0 00007ffb`df8fc4d1 windows_storage!CRegFolder::GetOverlayIn\
dex+0x47
29 00000001`226ff5f0 00007ffb`df91f095 explorerframe!CNscOverlayTask::_Extract+\
0x51
2a 00000001`226ff640 00007ffb`df8f70c2 explorerframe!CNscOverlayTask::InternalR\
esumeRT+0x45
Chapter 5: Debugging and Tracing
89
2b 00000001`226ff670 00007ffc`1cf7b58c explorerframe!CRunnableTask::Run+0xb2
2c 00000001`226ff6b0 00007ffc`1cf7b245 windows_storage!CShellTask::TT_Run+0x3c
2d 00000001`226ff6e0 00007ffc`1cf7b125 windows_storage!CShellTaskThread::Thread\
Proc+0xdd
2e 00000001`226ff790 00007ffc`1db32ac6 windows_storage!CShellTaskThread::s_Thre\
adProc+0x35
2f 00000001`226ff7c0 00007ffc`204521c5 shcore!ExecuteWorkItemThreadProc+0x16
30 00000001`226ff7f0 00007ffc`204305c4 ntdll!RtlpTpWorkCallback+0x165
31 00000001`226ff8d0 00007ffc`1f647974 ntdll!TppWorkerThread+0x644
32 00000001`226ffbc0 00007ffc`2044a271 KERNEL32!BaseThreadInitThunk+0x14
33 00000001`226ffbf0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
Your call stack may be different, as it depends on the Windows version, and any extensions that may be
loaded and used by the open file dialog box.
What can we do at this point? You may wonder what file is being opened. We can get that information
based on the calling convention of the CreateFileW function. Since this is a 64-bit process (and the
processor is Intel/AMD), the calling convention states that the first integer/pointer arguments are passed
in the RCX, RDX, R8, and R9 registers (in this order). Since the file name in CreateFileW is the first
argument, the relevant register is RCX.
You can get more information on calling conventions in the Debugger documentation (or in several web
resources).
Display the value of the RCX register with the r command (you’ll get a different value):
0:002> r rcx
rcx=00000001226fabf8
We can view the memory pointed by RCX with various d (display) family of commands. Here is the db
command, interpreting the data as bytes.
Chapter 5: Debugging and Tracing
90
0:002> db 00000001226fabf8
00000001`226fabf8
43 00 3a 00 5c 00 57 00-69 00 6e 00 64 00 6f 00
C.:.\.W.i.n\
.d.o.
00000001`226fac08
77 00 73 00 5c 00 4d 00-69 00 63 00 72 00 6f 00
w.s.\.M.i.c\
.r.o.
00000001`226fac18
73 00 6f 00 66 00 74 00-2e 00 4e 00 45 00 54 00
s.o.f.t...N\
.E.T.
00000001`226fac28
5c 00 46 00 72 00 61 00-6d 00 65 00 77 00 6f 00
\.F.r.a.m.e\
.w.o.
00000001`226fac38
72 00 6b 00 36 00 34 00-5c 00 5c 00 76 00 32 00
r.k.6.4.\.\\
.v.2.
00000001`226fac48
2e 00 30 00 2e 00 35 00-30 00 37 00 32 00 37 00
..0...5.0.7\
.2.7.
00000001`226fac58
5c 00 63 00 6c 00 72 00-2e 00 64 00 6c 00 6c 00
\.c.l.r...d\
.l.l.
00000001`226fac68
00 00 76 1c fc 7f 00 00-00 00 00 00 00 00 00 00
..v........\
.....
The db command shows the memory in bytes, and ASCII characters on the right. It’s pretty clear what
the file name is, but because the string is Unicode, it’s not very convenient to see.
Use the du command to view Unicode string more conveniently:
0:002> du 00000001226fabf8
00000001`226fabf8
"C:\Windows\Microsoft.NET\Framewo"
00000001`226fac38
"rk64\\v2.0.50727\clr.dll"
You can use a register value directly by prefixing its name with @:
0:002> du @rcx
00000001`226fabf8
"C:\Windows\Microsoft.NET\Framewo"
00000001`226fac38
"rk64\\v2.0.50727\clr.dll"
Similarly, you can view the value of the second argument by looking at the rdx register.
Now let’s set another breakpoint in the native API that is called by CreateFileW - NtCreateFile:
0:002> bp ntdll!ntcreatefile
0:002> bl
0 e Disable Clear
00007ffc`1f652300
0001 (0001)
0:**** KERNEL32!CreateFil\
eW
1 e Disable Clear
00007ffc`20480120
0001 (0001)
0:**** ntdll!NtCreateFile
Notice the native API never uses W or A - it always works with Unicode strings (in fact it expects
UNICODE_STRING structures, as we’ve seen already).
Continue execution with the g command. The debugger should break:
Chapter 5: Debugging and Tracing
91
Breakpoint 1 hit
ntdll!NtCreateFile:
00007ffc`20480120 4c8bd1
mov
r10,rcx
Check the call stack again:
0:002> k
# Child-SP
RetAddr
Call Site
00 00000001`226fa938 00007ffc`1c75e5d6 ntdll!NtCreateFile
01 00000001`226fa940 00007ffc`1c75e2c6 KERNELBASE!CreateFileInternal+0x2f6
02 00000001`226faab0 00007ffc`061c8368 KERNELBASE!CreateFileW+0x66
03 00000001`226fab10 00007ffc`061c5d4d mscoreei!RuntimeDesc::VerifyMainRuntimeM\
odule+0x2c
04 00000001`226fab60 00007ffc`061c6068 mscoreei!FindRuntimesInInstallRoot+0x2fb
05 00000001`226fb3e0 00007ffc`061cb748 mscoreei!GetOrCreateSxSProcessInfo+0x94
...
List the next 8 instructions that are about to be executed with the u (unassemble or disassemble) command:
0:002> u
ntdll!NtCreateFile:
00007ffc`20480120 4c8bd1
mov
r10,rcx
00007ffc`20480123 b855000000
mov
eax,55h
00007ffc`20480128 f604250803fe7f01 test
byte ptr [SharedUserData+0x308 (0000\
0000`7ffe0308)],1
00007ffc`20480130 7503
jne
ntdll!NtCreateFile+0x15 (00007ffc`204\
80135)
00007ffc`20480132 0f05
syscall
00007ffc`20480134 c3
ret
00007ffc`20480135 cd2e
int
2Eh
00007ffc`20480137 c3
ret
Notice the value 0x55 is copied to the EAX register. This is the system service number for NtCreateFile,
as described in chapter 1. The syscall instruction shown is the one causing the transition to kernel-mode,
and then executing the NtCreateFile system service itself.
You can step over the next instruction with the p command (step - hit F10 as an alternative). You can step
into a function (in case of assembly, this is the call instruction) with the t command (trace - hit F11 as
an alternative):
Chapter 5: Debugging and Tracing
92
0:002> p
Breakpoint 1 hit
ntdll!NtCreateFile:
00007ffc`20480120 4c8bd1
mov
r10,rcx
0:002> p
ntdll!NtCreateFile+0x3:
00007ffc`20480123 b855000000
mov
eax,55h
0:002> p
ntdll!NtCreateFile+0x8:
00007ffc`20480128 f604250803fe7f01 test
byte ptr [SharedUserData+0x308 (0000\
0000`7ffe0308)],1 ds:00000000`7ffe0308=00
0:002> p
ntdll!NtCreateFile+0x10:
00007ffc`20480130 7503
jne
ntdll!NtCreateFile+0x15 (00007ffc`204\
80135) [br=0]
0:002> p
ntdll!NtCreateFile+0x12:
00007ffc`20480132 0f05
syscall
Stepping inside a syscall is not possible, as we’re in user-mode. When we step over/into it, all is done
and we get back a result.
0:002> p
ntdll!NtCreateFile+0x14:
00007ffc`20480134 c3
ret
The return value of functions in x64 calling convention is stored in EAX or RAX. For system calls, it’s an
NTSTATUS, so EAX contains the returned status:
0:002> r eax
eax=c0000034
Zero means success, and a negative value (in two’s complement, most significant bit is set) means an error.
We can get a textual description of the error with the !error command:
0:002> !error @eax
Error code: (NTSTATUS) 0xc0000034 (3221225524) - Object Name not found.
This means the file wasn’t found on the system.
Disable all breakpoints and let Notepad continue execution normally:
Chapter 5: Debugging and Tracing
93
0:002> bd *
0:002> g
Since we have no breakpoints at this time, we can force a break by clicking the Break button on the toolbar,
or hitting Ctrl+Break on the keyboard:
874c.16a54): Break instruction exception - code 80000003 (first chance)
ntdll!DbgBreakPoint:
00007ffc`20483080 cc
int
3
Notice the thread number in the prompt. Show all current threads:
0:022> ~
0
Id: 874c.18068 Suspend: 1 Teb: 00000001`2229d000 Unfrozen
1
Id: 874c.46ac Suspend: 1 Teb: 00000001`222a5000 Unfrozen
2
Id: 874c.152cc Suspend: 1 Teb: 00000001`222a7000 Unfrozen
3
Id: 874c.f7ec Suspend: 1 Teb: 00000001`222ad000 Unfrozen
4
Id: 874c.145b4 Suspend: 1 Teb: 00000001`222af000 Unfrozen
...
18
Id: 874c.f0c4 Suspend: 1 Teb: 00000001`222d1000 Unfrozen
19
Id: 874c.17414 Suspend: 1 Teb: 00000001`222d3000 Unfrozen
20
Id: 874c.c878 Suspend: 1 Teb: 00000001`222d5000 Unfrozen
21
Id: 874c.d8c0 Suspend: 1 Teb: 00000001`222d7000 Unfrozen
. 22
Id: 874c.16a54 Suspend: 1 Teb: 00000001`222e1000 Unfrozen
23
Id: 874c.10838 Suspend: 1 Teb: 00000001`222db000 Unfrozen
24
Id: 874c.10cf0 Suspend: 1 Teb: 00000001`222dd000 Unfrozen
Lots of threads, right? These were created by the common open dialog, so not the direct fault of Notepad.
Continue exploring the debugger in any way you want!
Find out the system service numbers for NtWriteFile and NtReadFile.
If you close Notepad, you’ll hit a breakpoint at process termination:
Chapter 5: Debugging and Tracing
94
ntdll!NtTerminateProcess+0x14:
00007ffc`2047fc14 c3
ret
0:000> k
# Child-SP
RetAddr
Call Site
00 00000001`2247f6a8 00007ffc`20446dd8 ntdll!NtTerminateProcess+0x14
01 00000001`2247f6b0 00007ffc`1f64d62a ntdll!RtlExitUserProcess+0xb8
02 00000001`2247f6e0 00007ffc`061cee58 KERNEL32!ExitProcessImplementation+0xa
03 00000001`2247f710 00007ffc`0644719e mscoreei!RuntimeDesc::ShutdownAllActiveR\
untimes+0x287
04 00000001`2247fa00 00007ffc`1fcda291 mscoree!ShellShim_CorExitProcess+0x11e
05 00000001`2247fa30 00007ffc`1fcda2ad msvcrt!_crtCorExitProcess+0x4d
06 00000001`2247fa60 00007ffc`1fcda925 msvcrt!_crtExitProcess+0xd
07 00000001`2247fa90 00007ff7`5383ae1e msvcrt!doexit+0x171
08 00000001`2247fb00 00007ffc`1f647974 notepad!__mainCRTStartup+0x1b6
09 00000001`2247fbc0 00007ffc`2044a271 KERNEL32!BaseThreadInitThunk+0x14
0a 00000001`2247fbf0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
You can use the q command to quit the debugger. If the process is still alive, it will be terminated. An
alternative is to use the .detach command to disconnect from the target without killing it.
Kernel Debugging
User-mode debugging involves the debugger attaching to a process, setting breakpoints that cause the
process’ threads to become suspended, and so on. Kernel-mode debugging, on the other hand, involves
controlling the entire machine with the debugger. This means that if a breakpoint is set and then hit, the
entire machine is frozen. Clearly, this cannot be achieved with a single machine. In full kernel debugging,
two machines are involved: a host (where the debugger runs) and a target (being debugged). The target can,
however, be a virtual machine hosted on the same machine (host) where the debugger executes. Figure
5-5 shows a host and target connected via some connection medium.
Figure 5-5: Host-target connection
Before we get into full kernel debugging, we’ll take a look at its simpler cousin - local kernel debugging.
Local Kernel Debugging
Local kernel debugging (LKD) allows viewing system memory and other system information on the local
machine. The primary difference between local and full kernel debugging, is that with LKD there is no
Chapter 5: Debugging and Tracing
95
way to set up breakpoints, which means you’re always looking at the current state of the system. It also
means that things change, even while commands are being executed, so some information may be stale
or unreliable. With full kernel debugging, commands can only be entered while the target system is in a
breakpoint, so system state is unchanged.
To configure LKD, enter the following in an elevated command prompt and then restart the system:
bcdedit /debug on