sensitivity  is an issue, for  instance, it  may make sense to 
keep the code base exposed to as few  people as possible. 
The  NSA  is  not  known  for  outsourcing  code review  or 
penetration  testing,  for  example.  Obviously,  such  work 
could  potentially  be  “outsourced”  to  another department 
within 
the  same organization,  or  precautions  could  be 
taken to  outsource such work  only  to  trusted  individuals 
and 
likelihood  of  accidentally  or 
intentionally  revealing sensitive information  by  enforcing 
a “clean room”  approach to the test procedures. Still,  it  is 
conceivable 
to  an 
unwillingness  to  outsource.  Cost  may  be  another  such 
mitigating  factor. While  specialist will  likely  work  faster 
and  therefore  produce  results  in  a  more  cost-effective 
manner, they will  also charge real dollars  for  their  work. 
Leverage  of 
in-house  may,  by 
producing  fewer entries on the balance sheet, represent a 
preferable  modus operandus. Finally,  and  perhaps most 
importantly,  using developers as a critical  resource during 
the penetration testing process has the distinct  advantage 
of  introducing  the home court  advantage. Developers are 
liable  to  know  the weakest spots in  an application’s  code 
base and will  be intuitively 
familiar  with  its  design and 
technology  base. This  type  of  knowledge  is  like  gold  to 
attackers, be they  benign  or  malignant.  The  information 
gathering phase is one of the costliest and least productive 
phases of  the penetration testing process. Nevertheless, it 
is  one  of  the  most  critical  phases. Leveraging  insider 
knowledge  can mean the difference between finding  zero 
vulnerabilities  and  finding  dozens. All 
in  all,  the  most 
effective  approach, i.e. the  approach most  likely  to  find 
the  most  vulnerabilities  in  the  shortest amount  of  time, 
appears  to  be  a  hybrid  approach.  Ideally,  several 
“outsourced” test professionals work  in conjunction  with  a 
technical  lead from  the project to  identify  the most likely 
trouble  spots and then  analyze the  product  to  determine 
whether vulnerabilities  exist and where. 
4.3  What 
to  speak  of 
is  convenient 
the  spectrum,  it 
Now  that we are convinced  of  the need to penetration 
test and we know  whom  to  call,  let’s examine the nature 
of  the  service to  which  we  are committing.  First  of  all, 
there are two basic categories of penetration testing, white 
box  and black  box.  In  actuality,  all  penetration testing  is 
really gray, but as the particular  shade of gray is so clearly 
dependent on the degree to which  it approximates one end 
the 
of 
spectrum’s anchors as if  they  are absolute. In  any  case, 
black box testing is intended to most closely  replicate the 
attacks  of  a  remote,  uninformed  attacker.  Since  the 
prevalent  attack  scenario  stereotypes generally  involve 
remote  non-employees,  this 
is  a  popular  approach. 
Essentially,  the  penetration  tester is  only  given  publicly 
available information  about the target, perhaps only  an IP 
address. The advantage of  this  approach is that the tester 
is forced to gather as much information  about the target as 
possible.  It  is  common  practice,  for  instance, to  scour 
message  boards  for  “assistance  needed”  emails  from 
developers  at  the  company 
in  question.  Developers 
frequently  post code snippets for problem areas, and these 
snippets  are  sometimes  very 
revealing,  occasionally 
containing  passwords or  other  sensitive  information.  In 
the very  least, they  indicate  the technologies  being  used 
by the company, which  may spur further  investigation  by 
the  tester.  Additionally,  a  company’s  help  wanted  ads 
generally  reveal both the technologies they are using and 
the areas where they may be weak,  i.e., where they  need 
help. Consider for  a moment an ad that reads “Senior Java 
developer  wanted.  Must  be 
IBM’s 
WebSphere software platform  and be experienced coding 
web services that connect to Oracle databases.” While  this 
doesn’t equate to  vulnerabilities, 
it  may  indicate  which 
bag of  tricks  to  try  first.  Error  messages and debugging 
functionality  are the other more obvious  locations to look 
for  information 
leakage.  Depending  on  the  scope  and 
intensity  of  the  engagement, social  engineering  may  be 
called into play as well. 
familiar  with 
is  more  likely 
they  are  attacking.  This 
White  box testing differs  from  black box testing in that 
the testers are given near total access to information  about 
the  application 
information 
includes technology  overviews,  data flow  diagrams, code 
snippets and  access to  developers and  business leaders. 
Clearly,  white  box  testing 
to  reveal 
vulnerabilities  that might  not be as obvious  to the casual 
onlooker.  It  is  also  likely 
to  produce  results  sooner. 
Additionally,  a white  box test will  more closely mimic  an 
internal attack and, contrary to common perceptions, these 
are the  most  likely.  When  it  comes down  to  it,  there  is 
clearly  more bang for  your  buck in  a white  box test. That 
being  said, a white  box  tester is  very  unlikely  to  spend 
hours  searching the  web  for  information  leakage about 
your  product,  if  you  have already given that tester all the 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:30:14 UTC from IEEE Xplore.  Restrictions apply. 
information  there  is  about the  application,  meaning you 
may not discover that your data flow  diagrams have been 
posted on a cracker mailing  list for over a month-clearly 
a piece of information  you may want to know. Frequently, 
clients will  engage a penetration testing team to employ  a 
two-tiered  approach, i.e.,  black  box  for  one week,  then 
white hat for one week, or have one team doing black box 
testing  while  another  performs  white  box  tests.  The 
diagram  below  demonstrates  an  overall  methodologic 
approach of an expert application pentester. 
Regardless of  what general approach is adopted, there 
are three main stages to the penetration testing: 
Prepare 
Analyze 
- 
- 
-  Document and Improve 
4.3.1  Prepare 
The  preparation  step is  frequently  overlooked  -  it  is 
extremely  important  to  identify  the  scope and extent  of 
the engagement. Penetration testing  is  by  its very  nature 
invasive  even in  its  most innocuous  forms.  Accidentally 
targeting  the  wrong  application  or  interface  can  have 
severe legal ramifications.  Additionally,  clients  generally 
do not expect or want testers to bring  production  systems 
to  their  knees  during  peak  hours,  so  it  is  vital 
that 
expectations  be  set about  what  will  be  attacked, when, 
from  where  and  how.  Administrative 
like 
tasks 
assembling  a  team,  gathering  documentation,  acquiring 
test accounts, reserving equipment, etc. also fall  under the 
preparation phase. 
they  generally 
Information  gathering  also  occurs  at  this  stage. 
Obviously,  this step varies in length depending on the size 
of  the application  to  be tested and the  “grayness”  of  the 
tests  to  be  performed.  If  data  flow  diagrams  can  be 
acquired  or  produced  faithfully  based  on  information 
gathered, formal  threat  modeling  may  take  place in  this 
stage as well.  Approaches to threat modeling vary greatly, 
but 
include  an  enumeration  of  all 
application  users, their  access points and privilege  levels, 
followed  by  an  analysis  of  the  process  and  privilege 
boundaries  within 
the  application  itself.  Analysis  may 
then be prioritized  on those interfaces and user paths that 
involve  the sharpest difference  in privilege  levels, e.g., an 
interface  whereby  a 
remote,  unauthenticated  user 
influences  a process that  is running  as the system user is 
probably  of  more  immediate  concern  than  an  interface 
that  allows  an  already  authenticated  administrator  to 
influence  a  process  running  as  system.  However  the 
prioritization  and  delegation  of  analysis  occurs,  it  will 
greatly influence the later stages of the test process. 
4.3.2  Analyze 
The analysis stage is what  most people envision when 
they  think  of  penetration  testing.  It  is  here that  testers 
Application 
Penetration 
Testing  Approach 
/  Knowledge 
~ 
te 
Develop 
I 
~ 
Action  Plan  for1 
Improvement 
Conduct  Proof 
of  Concept 
(as  req.) 
/ 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:30:14 UTC from IEEE Xplore.  Restrictions apply. 
attempt  to  acquire  and  control 
legitimate  authority 
illegitimately,  i.e., this is where “hackers” attempt to Own 
the  application  and its  host.  Errors  are generated where 
possible,  unexpected  input  is  supplied,  interfaces  are 
assaulted,  protocols  are  examined  and  altered,  cookie 
contents are abused, tools are employed and hopefully,  for 
the tester at least, the application  falters or stutters or falls 
and, hopefully,  when  it  does, it  sacrifices  control  to  the 
tester. There is no need to further elaborate on the specific 
tactics  used for  analysis since that  discussion  is  already 
widespread  and  exceeds the  scope of  this  article.  It  is 
important to note here only that there is significantly  more 
documentation during the analysis phase than most people 
would  expect and that the analysis stage represents less of 
the total process than most people would  imagine. Again, 
this  is  true  by  design  and  underscores  the  need  for 
disciplined  test  professionals  who  are  not  solely  and 
entirely  motivated by a thirst to (awn Own Own. 
4.3.3  Document  and  Improve 
Procedurally  unglamorous,  but  nonetheless vital,  the 
documentation of  vulnerabilities  and the identification  of 
both strategic and tactical defenses requires both business 
and technical acumen. At  first  glance, the process appears 
rote and fairly  unintelligent.  Notes  are gathered from  all 
of  the  testers  and  formalized 
into  a  standard  table. 
Templates  are  completed  so  that  empirical  evidence  is 
presented  intelligibly, 
indicating  both  the  effects  of 
vulnerabilities  and their likely  causes. Vulnerabilities  may 
be classified  into  categories, charts may be produced for 
easy  digestion,  exact 
test 
activities  are likely  to  be built  for  comparison  with  log 
files, etc. 
timelines  of  penetration 
As unglamorous and routine  as it  may seem, however, 
this stage is vital  to a successful engagement and is where 
excellent  penetration testers distinguish  themselves from 
very  good  ones. True  professionals  provide  technically 
impressive  findings  and make recommendations that  are 
closely  aligned  with  business  goals.  Businesses  make 
money  by  consuming  risk  wisely  and  it  is  irresponsible 
for  a test professional to suggest that a business eliminate 
all risk regardless of the cost. As trite  as it sounds, there is 
no  such thing  as  100%  security,  and  not  everything  is 
worth  protecting.  Clients  greatly  appreciate  technical 
analyses that are presented in relevant context and merged 
with  management  consulting  wisdom.  Excellent 
penetration 
the  discovered 
vulnerabilities  based on  the  ease/likelihood  of  exploit, 
difficulty/cost 
to  mitigate  and  impact  to  the  business if 
exploited.  Very  good testers will  only  prioritize  based on 
the former  two  factors, mediocre testers will  focus solely 
on  the  first  factor  and beginner  testers will  provide  no 
analysis at all, just  a laundry list of vulnerabilities. 
testers  will 
prioritize 
44 . 
Where 
The  “where”  of  penetration  testing,  for  our  purposes, 
does not refer to  an inconspicuous room  with  the shades 
drawn,  lit  only  by the faint  glow  of  the LCD  screen. No, 
by  where  we  mean of  course where  in  the  application 
should  the  penetration  tests  focus.  As  more  common 
burglars  might  attempt  a break-in  at  any  of  the  various 
doors and windows  on a house, digital  attacks will  focus 
on any and all  interfaces provided  by an application.  This 
may  include  the front  door, or  user interface, and it  may 
include  the  back  door,  which  may  only  be  intended  for 
use by  administrators  or  customer  service  personnel  or 
developers. Rather than jimmying  doors with  crowbars, or 
picking  locks in a literal  sense, it is via input manipulation 
that  the  digital  attacker  plies  his/her  trade,  and  it  is  on 
input  that testers will  focus the majority  of  their  time  as 
well.  That is to say, that forms  will  clearly  be a focus, as 
will  HTTP  headers, cookies  and  any  other  input  fields 
accepted,  either  explicitly 
the 
application. 
implicitly, 
Without  a  valid  account  of  some kind,  the  tester  is 
confined  to  attacking  the  external  doors  and  windows. 
Generally,  this  includes  static  pages, which  are  of  no 