·
v0(x) +
ck · vk(x)
m
∑
k=1
y0(x) +
ck · yk(x)
m
∑
k=1
(cid:33)
w0(x) +
ck · wk(x)
m
∑
k=1
.
240
In other words, there must exist some polynomial h(x) such
that h(x)· t(x) = p(x). The size of Q is m, and the degree is
the degree of t(x).
Building a QAP Q for an arithmetic circuit C is fairly
straightforward. We pick an arbitrary root rg ∈ F for each
multiplication gate g in C and deﬁne the target polynomial
to be t(x) = ∏g(x − rg). We associate an index k ∈ [m] =
{1 . . .m} to each input of the circuit and to each output from
a multiplication gate (the addition gates will be compressed
into their contributions to the multiplication gates). Finally,
we deﬁne the polynomials in V , W , and Y by letting the
polynomials in V encode the left input into each gate, the W
encode the right input into each gate, and the Y encode the
outputs. For example, vk(rg) = 1 if the k-th wire is a left input
to gate g, and vk(rg) = 0 otherwise. Similarly, yk(rg) = 1 if
the k-th wire is the output of gate g, and yk(rg) = 0 otherwise.
Thus, if we consider a particular gate g and its root rg, Equa-
k=1 ck · wk(rg)) =
tion 1 simpliﬁes to: (∑m
∑k∈Ile f t ck
∑k∈Iright ck
= cgyk(rg) = cg, which just says
that the output value of the gate is equal to the product of its
inputs, the very deﬁnition of a multiplication gate.
(cid:17)
k=1 ck · vk(rg)) · (∑m
(cid:17)·(cid:16)
(cid:16)
In short, the divisibility check that t(x) divides p(x) de-
composes into deg(t(x)) separate checks, one for each gate g
and root rg of t(x), that p(rg) = 0.
Taking the circuit in Figure 2 as a concrete example, we
build the equivalent QAP as follows. First, we select two
roots, r5,r6 ∈ F to represent the two multiplication gates.
Hence the QAP’s degree is 2. We deﬁne six polynomials for
each set V , W , and Y , four for the input wires, and two for
the outputs from the multiplication gates. Thus, the QAP’s
size is 6. We deﬁne these polynomials based on each wire’s
contributions to the multiplication gates. Speciﬁcally all of
the vk(r5) = 0, except v3(r5) = 1, since the third input wire
contributes to the left input of c5’s multiplication gate. Simi-
larly, vk(r6) = 0, except for v1(r6) = v2(r6) = 1, since the ﬁrst
two inputs both contribute to the left input of c6’s gate. For
W , we look at right inputs. Finally, Y represents outputs;
none of the input wires is an output, so yk(r5) = yk(r6) = 0
for k ∈ {1, ...,4}, and y5(r5) = y6(r6) = 1.
Note the extreme sparsity of the polynomials in the exam-
ple (in terms of evaluations of the polynomials). The VC pro-
tocol (§2.3) exploits this sparseness to achieve efﬁciency.
The actual construction [30] is a bit more complex, as it
handles addition and multiplication by constants. Nonethe-
less, GGPR show that for any arithmetic circuit with d mul-
tiplication gates and N I/O elements, one can construct an
equivalent QAP with degree (the number of roots rg) d and
size (number of polynomials in each set) d +N. Note that ad-
dition gates and multiplication-by-constant gates do not con-
tribute to the size or degree of the QAP. Thus, these gates are
essentially “free” in QAP-based VC schemes.
Strong QAPs. In their QAP-based VC scheme, described be-
low, GGPR unfortunately require a strong property from the
QAP. Note that Deﬁnition 2 only considers the case where the
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:11 UTC from IEEE Xplore.  Restrictions apply. 
+xxc(cid:31)c(cid:30)c(cid:29)c(cid:28)c(cid:27)c(cid:26)InputsOutputk=1 ck · wk(x)).
k=1 bk · wk(x))− (∑m
same set of coefﬁcients ci are applied to all three sets of poly-
nomials. GGPR additionally require the if-and-only-if condi-
tion in Deﬁnition 2 to hold even when different coefﬁcients
k=1 ck · vk(x)) ·
ai, bi, ci are applied – i.e., when p(x) = (∑m
k=1 ak · yk(x)). They show how to con-
(∑m
vert any QAP into a strong QAP that satisﬁes this stronger
condition. Unfortunately, this strengthening step increases
the QAP’s degree to 3d + 2N, more than tripling it. This in
turn, more than triples the cost of key generation, the size of
the evaluation key, and the worker’s effort to produce a proof.
2.2.2 Boolean Circuits and QSPs
Boolean circuits operate over bits, with bitwise gates for
AND, OR, XOR, etc. GGPR propose Quadratic Span
Programs (QSPs) as a custom encoding for Boolean cir-
cuits [30]. QSPs are superﬁcially similar to QAPs, but
because they only support Boolean wire values, they use
only two sets of polynomials V and W . The divisibility
k=1 ck · vk(x))·
check is updated to consider p(x) = (v0(x) + ∑m
(w0(x) + ∑m
Instead of the arithmetic circuit-
based polynomial construction above, QSPs build a small set
of polynomials for each Boolean gate. Speciﬁcally, each gate
adds 9 roots and 12 polynomials to the overall QSP. Like
QAPs, the QSPs require a strengthening step.
2.3 Building VC from Quadratic Programs
To construct a VC protocol from a quadratic program, the
main idea is that each polynomial – e.g., vk(x) ∈ F – of the
quadratic program is mapped to an element gvk(s) in a bilin-
ear group, where s is a secret value selected by the client,
g is a generator of the group, and F is the ﬁeld of discrete
logarithms of g. These group elements are given to the
worker. For a given input, the worker evaluates the circuit
directly to obtain the output and the values of the internal
circuit wires. These values correspond to the coefﬁcients ci
of the quadratic program. Thus, the VC worker can eval-
uate v(s) = ∑k∈[m] ck · vk(s) “in the exponent” to get gv(s);
it computes w(s) and y(s), in the exponent, similarly. Fi-
i=0 hi · xi,
nally, the worker computes h(x) = p(x)/t(x) = ∑d
and then uses the hi, along with gsi terms in the evaluation
key, to compute gh(s). To oversimplify, the proof consists of
(gv(s),gw(s),gy(s),gh(s)). The veriﬁer uses the bilinear map to
check that p(s) = h(s)t(s). The actual protocol (Protocol 1) is
a bit more complex, because additional machinery is needed
to ensure that the worker incorporates the client’s input u cor-
rectly, and that the worker indeed generates (say) v(s) in the
exponent as some linear function of the vk(s) values.
Protocol 1 (Veriﬁable Computation from strong QAPs)
• (EKF ,V KF ) ← KeyGen(F,1λ): Let F be a function
with N input/output values from F. Convert F into
an arithmetic circuit C; then build the corresponding
QAP Q = (t(x),V ,W ,Y ) of size m and degree d. Let
Imid = {N + 1, ...,m}, i.e., the non-IO-related indices.
Let e be a non-trivial bilinear map [34] e : G×G → GT ,
and let g be a generator of G.
Choose s,α,βv,βw,βy,γ R← F.
Construct the public evaluation key EKF as:
{gyk(s)}k∈[m],
( {gvk(s)}k∈Imid ,
{gαvk(s)}k∈Imid ,
{gαyk(s)}k∈[m],
{gβvvk(s)}k∈Imid , {gβwwk(s)}k∈[m], {gβyyk(s)}k∈[m]
{gsi}i∈[d],
{gwk(s)}k∈[m],
{gαwk(s)}k∈[m],
{gαsi}i∈[d]
).
The public veriﬁcation key is: V KF = (g1, gα, gγ, gβvγ,
gβwγ, gβyγ, gt(s),{gvk(s)}k∈[N], gv0(s), gw0(s), gy0(s)).
• (y,πy) ← Compute(EKF ,u): On input u, the worker
evaluates the circuit for F to obtain y ← F(u). As a
result of the evaluation, he knows the values {ci}i∈[m] of
the circuit’s wires.
He
such that
p(x) = h(x) · t(x)), and computes the proof πy as:
(the polynomial
for h(x)
solves
( gvmid (s),
gw(s),
gh(s),
gαvmid (s), gαw(s), gαy(s), gαh(s),
gβvv(s)+βww(s)+βyy(s)
gy(s),
),
where vmid(x) = ∑k∈Imid ck·vk(x), v(x) = ∑k∈[m] ck·vk(x),
w(x) = ∑k∈[m] ck · wk(x), and y(x) = ∑k∈[m] ck · yk(x).
Since these are linear equations, he can compute them
“in the exponent” using the material in the evaluation
key, e.g., gv(s) = gv0(s) · ∏k∈[m]
(cid:16)
gvk(s)(cid:17)ck.
• {0,1} ← Verify(V KF ,u,y,πy): To verify a proof, anyone
with access to the veriﬁcation key V KF can use the pair-
ing function e to check that the α and β proof terms are
correct (e.g., check that e(gvmid (s),gα) = e(gαvmid (s),g)).
This requires 8 pairings for the α terms, and 3 for the β
term.
Finally, the veriﬁer can compute a term representing
the I/O, u and y, by representing them as coefﬁcients
c1, . . . ,cN ∈ F and computing, using elements from V KF,
gvio(s) = ∏k∈[N]
A ﬁnal check (with 3 pairings) veriﬁes the divisibil-
that e(gv0(s) · gvio · gv(s),gw0(s) ·
ity requirement,
gw(s))/e(gy0(s) · gy(s),g) = e(gh(s),gt(s)).
In a designated veriﬁer setting (where the veriﬁer knows
s, α, etc.), pairings are only needed for this last check,
and the I/O term can be computed directly over F, rather
than “in the exponent”.
(cid:16)
gvk(s)(cid:17)ck.
i.e.,
Regarding efﬁciency, GGPR [30] show that the one-time
setup of KeyGen runs in time linear in the original circuit size,
O(|C|). The worker performs O(|C|) cryptographic work, but
he must also perform O(|C|log2|C|) non-cryptographic work
to calculate h(x). To achieve this performance, the worker
exploits the fact that the evaluation vectors (vk(r1), . . . ,vk(rd))
are all very sparse (also for the w and y polynomials). The
proof itself is constant size, with only 7 group elements for
QSPs and 9 for QAPs, though the veriﬁer’s work is still linear,
O(N), in the size of the inputs and outputs of the function.
In terms of security, GGPR [30] show this VC scheme is
sound under the d-PKE and q-PDH assumptions (see Ap-
pendix A), which are weak versions of assumptions in prior
work [21, 35, 36]. The q-PDH assumption belongs to a class
241
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:11 UTC from IEEE Xplore.  Restrictions apply. 
of cryptographic assumptions that do not lend themselves to
efﬁcient falsiﬁcation [37], though some members have indeed
been proven false [38]. Gentry and Wichs recently showed
that assumptions from this class are likely to be inherent for
efﬁcient, non-interactive arguments for NP relations [39].
Zero Knowledge. Making the VC scheme zero-knowledge
is remarkably simple. One simply includes the target poly-
nomial t(x) itself in the polynomial sets V , W , and Y . This
allows the worker to “randomize” its proof by adding δvt(s)
in the exponent to vmid(s), δwt(s) to w(s), and δyt(s) to y(s)
for random δv,δw,δy, and modifying the other elements of
the proof accordingly. The modiﬁed value of p(x) remains
divisible by t(x), but the randomization makes the scheme
statistically zero-knowledge [30].
3 Theoretical Reﬁnements
In this section, we improve Protocol 1 to signiﬁcantly reduce
key generation time, evaluation key size, and worker effort.
We provide a cost model for the new protocol elsewhere [40],
and we analyze our improvements empirically in §5.4.
Our main optimization is that we construct a VC scheme
that uses a regular QAP (as in Deﬁnition 2), rather than a
strong QAP. Recall that GGPR show how to transform a reg-
ular QAP into a strong QAP, but the transformation more than
triples the degree of the QAP. Consequently, when they plug
their strong QAP into their VC construction, the strengthen-
ing step more than triples the key generation time, evaluation
key size, and worker computation. We take a different ap-
proach that uses a regular QAP, and hence we do not need a
strengthening step at all. Instead, we embed additional struc-
ture into our new VC proof that ensures that the worker uses
the same linear combination to construct the v, w, and y terms
of its proof.2 Surprisingly, this additional structure comes at
no cost, and our VC scheme is actually less complicated than
GGPR’s! For example, we manage to shave the proof down
from nine group elements to eight. Experiments (§5.4) show
that these improvements indeed give substantial savings.
We also remove the need for the worker to compute gαh(s),
and hence the gαsi
i∈[d] terms from EK. Finally, we expand the
expressivity and efﬁciency of the functions QAPs can com-
pute by designing a number of custom circuit gates for spe-
cialized functions.
3.1 Our New VC Protocol
Next we describe our more efﬁcient VC scheme, with some
remarks afterwards on some its properties.
Protocol 2 (Veriﬁable Computation from regular QAPs)
• (EKF ,V KF ) ← KeyGen(F,1λ): Let F be a function
with N input/output values from F. Convert F into
an arithmetic circuit C; then build the corresponding
2Our proof contains a term that enforces this linear constraint without
increasing the degree. GGPR’s generic strengthening step checked the con-
sistency of the linear combinations via additional multiplication gates, which
increased the degree of the QAP.
QAP Q = (t(x),V ,W ,Y ) of size m and degree d. Let
Imid = {N + 1, ...,m}, i.e., the non-IO-related indices.
Let e be a non-trivial bilinear map [34] e : G×G → GT ,
and let g be a generator of G.
Choose rv,rw,s,αv,αw,αy,β,γ R← F and set ry = rv · rw,
gv = grv, gw = grw and gy = gry.
Construct the public evaluation key EKF as:
( {gvk(s)
{gyk(s)
}k∈[m],
}k∈[m], {gαyyk(s)
{gαvvk(s)
{gsi}i∈[d],
}k∈[m]
gβwk(s)
w
}k∈Imid ,
{gwk(s)
}k∈Imid , {gαwwk(s)
{gβvk(s)
}k∈[m],
}k∈[m],
y
gβyk(s))
y
w
w
v
y
v
v
),
v
y
, {gvk(s)
}k∈[N], gv0(s)
and the public veriﬁcation key as: V KF = (g1, gαv, gαw ,
gαy, gγ, gβγ, gt(s)
• (y,πy) ← Compute(EKF ,u): On input u, the worker
evaluates the circuit for F to obtain y ← F(u); he also
learns the values {ci}i∈[m] of the circuit’s wires.