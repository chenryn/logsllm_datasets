```
搜索访问时间超过10分钟的所有文件
```shell
find . -type f -amin +10
```
找出比file.log修改时间更长的所有文件
```shell
find . -type f -newer file.log
```
#### 根据文件大小进行匹配
```shell
find . -type f -size 文件大小单元
```
文件大小单元：
*    **b**  —— 块（512字节）
*    **c**  —— 字节
*    **w**  —— 字（2字节）
*    **k**  —— 千字节
*    **M**  —— 兆字节
*    **G**  —— 吉字节
搜索大于10KB的文件
```shell
find . -type f -size +10k
```
搜索小于10KB的文件
```shell
find . -type f -size -10k
```
搜索等于10KB的文件
```shell
find . -type f -size 10k
```
#### 删除匹配文件
删除当前目录下所有.txt文件
```shell
find . -type f -name "*.txt" -delete
```
#### 根据文件权限/所有权进行匹配
当前目录下搜索出权限为777的文件
```shell
find . -type f -perm 777
```
找出当前目录下权限不是644的php文件
```shell
find . -type f -name "*.php" ! -perm 644
```
找出当前目录用户tom拥有的所有文件
```shell
find . -type f -user tom
```
找出当前目录用户组sunk拥有的所有文件
```shell
find . -type f -group sunk
```
#### 借助`-exec`选项与其他命令结合使用
找出当前目录下所有root的文件，并把所有权更改为用户tom
```shell
find .-type f -user root -exec chown tom {} \;
```
上例中， **{}**  用于与 **-exec** 选项结合使用来匹配所有文件，然后会被替换为相应的文件名。
找出自己家目录下所有的.txt文件并删除
```shell
find $HOME/. -name "*.txt" -ok rm {} \;
```
上例中， **-ok** 和 **-exec** 行为一样，不过它会给出提示，是否执行相应的操作。
查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中
```shell
find . -type f -name "*.txt" -exec cat {} \;> /all.txt
```
将30天前的.log文件移动到old目录中
```shell
find . -type f -mtime +30 -name "*.log" -exec cp {} old \;
```
找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来
```shell
find . -type f -name "*.txt" -exec printf "File: %s\n" {} \;
```
因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令
```shell
-exec ./text.sh {} \;
```
#### 搜索但跳过指定的目录
查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk
```shell
find . -path "./sk" -prune -o -name "*.txt" -print
```
> :warning: ./sk 不能写成 ./sk/ ，否则没有作用。
忽略两个目录
```shell
find . \( -path ./sk -o  -path ./st \) -prune -o -name "*.txt" -print
```
> :warning: 如果写相对路径必须加上`./`
#### find其他技巧收集
要列出所有长度为零的文件
```shell
find . -empty
```
#### 其它实例
```shell
find ~ -name '*jpg' # 主目录中找到所有的 jpg 文件。 -name 参数允许你将结果限制为与给定模式匹配的文件。
find ~ -iname '*jpg' # -iname 就像 -name，但是不区分大小写
find ~ ( -iname 'jpeg' -o -iname 'jpg' ) # 一些图片可能是 .jpeg 扩展名。幸运的是，我们可以将模式用“或”（表示为 -o）来组合。
find ~ \( -iname '*jpeg' -o -iname '*jpg' \) -type f # 如果你有一些以 jpg 结尾的目录呢？ （为什么你要命名一个 bucketofjpg 而不是 pictures 的目录就超出了本文的范围。）我们使用 -type 参数修改我们的命令来查找文件。
find ~ \( -iname '*jpeg' -o -iname '*jpg' \) -type d # 也许你想找到那些命名奇怪的目录，以便稍后重命名它们
```
最近拍了很多照片，所以让我们把它缩小到上周更改的文件
```shell
find ~ \( -iname '*jpeg' -o -iname '*jpg' \) -type f -mtime -7
```
你可以根据文件状态更改时间 （ctime）、修改时间 （mtime） 或访问时间 （atime） 来执行时间过滤。 这些是在几天内，所以如果你想要更细粒度的控制，你可以表示为在几分钟内（分别是 cmin、mmin 和 amin）。 除非你确切地知道你想要的时间，否则你可能会在 + （大于）或 - （小于）的后面加上数字。
但也许你不关心你的照片。也许你的磁盘空间不够用，所以你想在 log 目录下找到所有巨大的（让我们定义为“大于 1GB”）文件：
```shell
find /var/log -size +1G
```
或者，也许你想在 /data 中找到 bcotton 拥有的所有文件：
```shell
find /data -owner bcotton
```
你还可以根据权限查找文件。也许你想在你的主目录中找到对所有人可读的文件，以确保你不会过度分享。
```shell
find ~ -perm -o=r
```
删除 mac 下自动生成的文件
```shell
find ./ -name '__MACOSX' -depth -exec rm -rf {} \;
```
统计代码行数
```shell
find . -name "*.java"|xargs cat|grep -v ^$|wc -l # 代码行数统计, 排除空行
```