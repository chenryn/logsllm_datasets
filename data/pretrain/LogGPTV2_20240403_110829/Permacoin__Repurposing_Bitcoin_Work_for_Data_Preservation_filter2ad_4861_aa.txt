title:Permacoin: Repurposing Bitcoin Work for Data Preservation
author:Andrew Miller and
Ari Juels and
Elaine Shi and
Bryan Parno and
Jonathan Katz
2014 IEEE Symposium on Security and Privacy
Permacoin: Repurposing Bitcoin Work for Data Preservation
Andrew Miller1, Ari Juels, Elaine Shi1, Bryan Parno2 and Jonathan Katz1
1University of Maryland
2Microsoft Research
Abstract
Bitcoin is widely regarded as the ﬁrst broadly successful e-
cash system. An oft-cited concern, though, is that mining
Bitcoins wastes computational resources. Indeed, Bitcoin’s
underlying mining mechanism, which we call a scratch-off
puzzle (SOP), involves continuously attempting to solve com-
putational puzzles that have no intrinsic utility.
We propose a modiﬁcation to Bitcoin that repurposes its
mining resources to achieve a more broadly useful goal: dis-
tributed storage of archival data. We call our new scheme
Permacoin. Unlike Bitcoin and its proposed alternatives,
Permacoin requires clients to invest not just computational
resources, but also storage. Our scheme involves an al-
ternative scratch-off puzzle for Bitcoin based on Proofs-of-
Retrievability (PORs). Successfully minting money with this
SOP requires local, random access to a copy of a ﬁle. Given
the competition among mining clients in Bitcoin, this modi-
ﬁed SOP gives rise to highly decentralized ﬁle storage, thus
reducing the overall waste of Bitcoin.
Using a model of rational economic agents we show that
our modiﬁed SOP preserves the essential properties of the
original Bitcoin puzzle. We also provide parameterizations
and calculations based on realistic hardware constraints to
demonstrate the practicality of Permacoin as a whole.
1
Introduction
“We are justiﬁed in supposing that the contents of
the Royal Library, if not wholly destroyed, were at
least seriously diminished in the ﬁre of 48 B.C.” –
Peter M. Fraser, on the destruction of the Ancient
Library of Alexandria [1]
Bitcoin [2] is an exceptionally successful e-cash system
based on the equivalence “time = money.” Clients (nodes)
in Bitcoin’s peer-to-peer network invest computational time
in order to mint money in the form of a currency called Bit-
coins or BTC. The operation by which clients generate coins
is called mining. We refer to the basic unit of mining work in
Bitcoin as a scratch-off puzzle (SOP). In Bitcoin today, nodes
mine coins by solving SOPs that involve ﬁnding preimages
under a hash function. Correctly solving an SOP constitutes
a proof of work [3], i.e., computational investment.
At the time of writing, mining a Bitcoin block (batch
of coins) requires about 255 hash computations.
(For per-
spective, this is also the expected effort required to crack a
DES key.) The Bitcoin network mines a block roughly ev-
ery ten minutes, and thus consumes massive computing re-
sources and natural resources such as electricity, prompting
widespread concern about waste. The Bitcoin FAQ1 says this
about the issue:
Question: Is [Bitcoin] not a waste of energy?
Answer: Spending energy on creating and securing a free
monetary system is hardly a waste.... [Banks] also spend en-
ergy, arguably more than Bitcoin would.
Question: Why don’t we use calculations that are also useful
for some other purpose?
Answer: To provide security for the Bitcoin network, the cal-
culations involved need to have some very speciﬁc features.
These features are incompatible with leveraging the compu-
tation for other purposes.
Indeed, researchers have struggled to identify useful com-
putational tasks outside Bitcoin, e.g., protein folding prob-
lems [4], that also have the predictable solution times and
efﬁcient public veriﬁability required for Bitcoin.
1.1 Goal and approach
We show that Bitcoin resources can be repurposed for other,
more broadly useful tasks, thereby refuting the widespread
belief reﬂected in the Bitcoin FAQ. We propose a new scheme
called Permacoin. The key idea in our scheme is to make
Bitcoin mining depend upon storage resources, rather than
computation. Permacoin then utilizes storage resources in the
Bitcoin network.
Concretely, Permacoin involves a modiﬁed SOP in which
nodes in the Bitcoin network perform mining by constructing
a Proof of Retrievability (POR) [5]. A POR proves that a node
is investing memory or storage resources to store a target ﬁle
or ﬁle fragment. By building a POR-based SOP into Bitcoin,
our scheme creates a system of highly distributed, peer-to-
peer ﬁle storage suitable for storing a large, publicly valuable
digital archive F . Speciﬁcally, our aim is to distribute F to
protect it against data losses associated with a single entity,
e.g., the outages or wholesale data losses already incurred by
cloud providers [6].
In contrast to existing peer-to-peer schemes [7, 8], our
scheme doesn’t require an identity or reputation system to
ensure storage of F , nor does it require that F be a popu-
lar download. We achieve ﬁle recoverability based strictly on
clients’ incentives to make money (mine Bitcoins).
1Referenced 6 Apr. 2013 at https://en.bitcoin.it/wiki/FAQ.
© 2014, Andrew Miller. Under license to IEEE.
DOI 10.1109/SP.2014.37
475
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:14 UTC from IEEE Xplore.  Restrictions apply. 
1.2 Challenges
In constructing our SOP in Permacoin based on Proofs of Re-
trievability, we encounter three distinct challenges.
A standard POR involves a single prover holding a single
ﬁle F . In our setting, however, multiple clients collectively
store a large dataset F (too large for a single client) in a dis-
tributed manner. Of these an adversarially selected fraction
may act maliciously. The ﬁrst challenge in creating our SOP
is to construct an adversarial model for this new setting, and
then present a distributed POR protocol that is secure in this
model. Assuming that clients have independent storage de-
vices, we prove that with our SOP, for clients to achieve a
high rate of mining, they must store F such that it is recover-
able.
Additionally, we must ensure that clients indeed maintain
independent storage devices. If, for instance, clients pooled
their storage in the cloud to reduce their resource investment,
the beneﬁts of dataset-recovery robustness through distribu-
tion would be lost. Thus a second challenge in our SOP con-
struction is to ensure that clients must make use of local stor-
age to solve it.
To enforce locality of storage, we introduce into our POR
a pair of novel features. First, block accesses depend on a
client’s private key, which is used to secure her Bitcoins and
which she is therefore not likely to share but will instead
only store locally. Second, these accesses are made sequen-
tially and pseudorandomly. Thus fetching blocks remotely
from a provider would incur infeasibly high communication
costs (e.g., extremely high latency). We show using bench-
marks how our SOP scheme thus takes advantage of practi-
cal network-resource limitations to prevent dangerous storage
pooling.
Finally, to ensure incentives for client participation, it is
important for our new storage-based SOP to preserve the eco-
nomic structure of Bitcoin itself. We present an economic
model showing how to parameterize our SOP to achieve this
property.
1.3 Contributions
In summary, our contributions are as follows.
• Bitcoin resource recycling: Globally, our proposal Per-
macoin shows how to modify Bitcoin to repurpose the
computing and natural resources that clients invest in
mining for a general, useful goal and thus reduce waste.
We consider this our central contribution.
• POR distribution: We show how to construct a dis-
tributed POR in a peer-to-peer setting. By incentivizing
local storage of private keys and penalizing storage out-
sourcing, our scheme encourages local storage by par-
ticipants and thus physically robust ﬁle dispersion.
• Modeling: We introduce a new, general model for
Bitcoin tasks (Scratch-Off Puzzles) and accompanying
models of adversarial and economically rational partic-
ipant behavior and costs. We thereby expand the de-
sign space of Bitcoin and offer tools to analyze new
Bitcoin variants, including resource-recouping schemes
such as Permacoin.
Permacoin recovers a substantial portion of the resources
invested in coin-mining infrastructure. Repurposing a larger
fraction would be desirable, of course. We hope that Perma-
coin encourages new techniques for better repurposing, and
the harvesting of resources other than distributed storage.
2 Preliminaries and Background
We now introduce some general terminology for Bitcoin and
our proposed scheme, Permacoin.
Associated with every epoch in Bitcoin is a unique puzzle
ID (denoted puz) known to all participants. In a given epoch,
all miners attempt to solve an SOP speciﬁed by puz. Solving
the SOP involves making random guesses at solutions. An
SOP is deﬁned in terms of the following two functions, which
any client may compute:
• Guess(puz) → ticket: A randomized algorithm that
generates a candidate solution to the SOP, which we call
a ticket.
• IsWinningTicket(puz, Z, ticket) → {0, 1}: A function
that outputs 1 if ticket represents a solution to the SOP
and outputs 0 otherwise. Input Z speciﬁes the level of
hardness for the SOP determined by the Bitcoin net-
work.
If IsWinningTicket(puz, Z, ticket) = 1, then we call ticket
a winning ticket for the epoch.
All miners race to generate tickets via Guess until a win-
ning one is found. This ticket is published by the winning
miner, who receives coins as a reward. Publication of a win-
ning ticket marks the end of the current epoch and the begin-
ning of a new one.2 Therefore, the length of each epoch is
a random variable. (We model epoch lengths later in the pa-
per.) In the Bitcoin system, an epoch currently has an average
length of ten minutes.
Bitcoin speciﬁcs. In Bitcoin, solving an SOP validates a re-
cent history of transactions in the system, and is called min-
ing a block. A solution is called the header for the mined
block. The SOP involves repeatedly hashing candidate head-
ers, speciﬁcally a preﬁx puz and a guess ticket (usually called
a nonce in Bitcoin speciﬁcations), until an image results that
is less than a target value Z. (The smaller Z is, the harder the
SOP.) The two corresponding functions are:
2Ideally, an epoch ends when a winning solution is found. Due to prop-
agation delays in the actual Bitcoin network, however, collisions may occur
in which winning solutions compete for publication. This happens rarely,
and the resulting temporary fork is usually resolved in the next epoch when a
unique winning solution is identiﬁed by consensus in the network. The los-
ing block is referred to as a stale block. An estimated 2% of produced blocks
are stale in Bitcoin [9].
476
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:14 UTC from IEEE Xplore.  Restrictions apply. 
Guess(puz) $→ ticket;
IsWinningTicket(puz, Z, ticket) = {H(puz||ticket)
?≤ Z},
where H is a hash function (SHA-256 in Bitcoin).
The header preﬁx puz = v (cid:4) Bl (cid:4) M R(x) (cid:4) T in-
cludes software version number v, previously mined block
header Bl, Merkle-tree root M R(x) over new transactions x,
and T , the current time expressed in seconds (since 1970-01-
01T00:00 UTC).
A successful miner obtains payment by including in x a
payment of freshly generated coins to herself.3 In general, a
miner j identiﬁes herself via a pseudonymous public key pkj
that she publishes to enable veriﬁcation of her digitally signed
transactions.
We defer further details, e.g., on parameter choices, until
later in the paper.
Bitcoin design challenge. The Bitcoin SOP was designed to
achieve several properties essential to the Bitcoin system:
1. Predictable effort: The Bitcoin system adjusts the hard-
ness of mining (via Z) once every 2016 blocks to ensure
an epoch length of approximately ten minutes. This on-
going calibration requires a simple and precise charac-
terization of the hardness of mining: To ﬁnd a ticket sat-
isfying H(puz||ticket) ≤ Z in Bitcoin simply requires
R/Z computations on average, where R is the size of
the range of H (2256 for SHA-256).
2. Fast veriﬁcation: While solving SOPs is resource-
intensive in Bitcoin, veriﬁcation of solutions must be
inexpensive, to permit rapid veriﬁcation of transactions
and coin validity by any user. Verifying the correctness
of a winning ticket, i.e., that H(puz||ticket) ≤ Z, re-
quires only one hash computation.
3. Precomputation resistance: Without knowledge of puz,
it is infeasible for a client to execute Guess or otherwise
perform useful precomputation of a winning ticket in
Bitcoin. As puz relies on transaction history, it cannot
feasibly be guessed prior to the beginning of an epoch.
In other words, puz may be modeled as a fresh, random
value in every epoch.
4. Linearity of expected reward: The expected reward per
unit of work is approximately constant, even for very
small investments of computational effort. This pre-
vents large participants from monopolizing the system
and driving out ordinary participants.
3In addition to freshly generated coins, miners also receive payment in the
form of “fees” attached to each transaction by users. The rate of new coin
generation is scheduled to gradually diminish and then (in 200 years) cease.
At this point the process of “mining” will nonetheless continue, sustained by
transaction fees alone. For simplicity, in the remainder of the paper we use
“the reward” to refer to either kind of payment.
There are few known puzzles that meet all of these criteria.
Our aim here is to construct a puzzle that also satisﬁes:
5. Repurposing: Resources committed to mining can be
repurposed for useful tasks that are independent of the
Bitcoin system.
Proofs of Retrievability. We address criterion 5 in our pro-
posed scheme Permacoin by recycling storage resources, thus
requiring Bitcoin / Permacoin puzzle solvers to store useful
data. A successful SOP solution, i.e., winning ticket, in our
scheme takes the form of a (partial) Proof of Retrievability
(POR).
We refer the reader to [5] for details on PORs, whose
use we brieﬂy review here. A basic POR takes the form of
a challenge-response protocol in which a Prover P demon-
strates its possession of a ﬁle F , and the fact that it can be
correctly retrieved, to a Veriﬁer V . To audit P ’s possession
of F , V may issue a random challenge c at any time; it re-
ceives a response r, which it can verify without possessing
F .
There are many variant POR schemes in the literature. (See
Section 9.) Let F := (F1, F2, . . . , Fn) denote a dataset con-
sisting of n sequential segments. We make use of a simpliﬁed
scheme with public veriﬁability.