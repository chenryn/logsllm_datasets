### 兵家必争之地

#### 信息安全的攻防战
- 在防毒软件与恶意软件之间的较量是一场激烈的战争。
- 在黑白对抗中，双方各有胜负。

#### 安全意识的重要性
- 安全需要对各种风险有所了解。
- 知彼知己，百战不殆；不知彼而知己，一胜一负；不知彼，不知己，每战必殆。
- 知识就是力量。

#### 技术能力
- 你是否了解入侵技术？
- 你是否熟悉操作系统（OS）和Web安全？
- 你是否掌握渗透测试（PT）？

#### 守方的优势与劣势
- **优势**：
  - 常驻系统，掌握关键节点，对任何变动了如指掌。
  - 拥有庞大的资源，发现新的攻击方式后会使用各种技巧进行封阻。
- **劣势**：
  - 以稳定性为核心，不能进行过于细致的检查以免影响系统性能。
  - 不能使用不稳定的新技术。
  - 防御策略公开，容易被研究。

#### 关键防御点
- **FileFilter**（最后防线）
- **NotifyCallBack**（通信）
- **IAT EAT Inline**（重要据点）
- **SystemCall**（交通要道）
- **Ring0**（前线）

#### Ring0（突破前线）
- 替换注册表项
- 替换文件
- \Device\PhysicalMemory
- ZwLoadDriver
- ZwSystemDebugControl
- ZwSetSystemInformation
- Kernel Bug

#### 攻方的优势与劣势
- **优势**：
  - 各种技巧不需要以稳定性为核心，可以根据守方的地图寻找新的突破口。
  - 当守方防御完备时，可以使用一些非常规技巧。
- **劣势**：
  - 无法准确了解目标环境。
  - 新技术一旦公开，很快会被封堵。
  - 无法一劳永逸地解决问题。

#### 进攻策略
- **正面突破**：直接攻击防御系统。
- **各个击破**：分析防御地图后精准突破。

#### SystemCall（交通要道）
- SSDT（实现整个函数并还原）
- Inline Hook（实现整个函数并还原）
- 拦截与还原的无限循环

#### IAT EAT Inline（重要据点）
- MmGetSystemRoutineAddress
- IofCallDriver
- ObReferenceObjectbyName
- KeUserModeCallBack
- 实现整个函数或还原
- 各家有不同的偏好，又是拦截与还原的无限循环

#### NotifyCallBack（通信）
- PsSetCreateProcessNotifyRoutine
- PsSetCreateThreadNotifyRoutine
- PsSetLoadImageNotifyRoutine
- CmRegisterCallback
- 中断通讯是战争中的必备攻势

#### FileFilter（最后防线）
- FltRegisterFilter
- FSD Routine
- IoAttachDevice
- 突破最后防线等于攻下城池

#### 透过档案比对恢复FSD MajorFunction
- DriverObject->MajorFunction[IRP_MJ_CREATE] = KDispatchCreateClose;
- DriverObject->MajorFunction[IRP_MJ_CLOSE] = KDispatchCreateClose;
- DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL] = KDispatchIoctl;

#### 结论
- 守方若需全面防守，需要投入大量资源进行路线规划。
- 攻方则需要进行大量测试，尝试各种天马行空的想法。
- 技术具有两面性，既可以用于防护，也可以用于攻击。

#### 参考资料
- [http://hi.baidu.com/sudami](http://hi.baidu.com/sudami)
- [http://hi.baidu.com/mj0011](http://hi.baidu.com/mj0011)
- [http://www.debugman.com/](http://www.debugman.com/)
- [http://forum.eviloctal.com/archiver/tid-33451.html](http://forum.eviloctal.com/archiver/tid-33451.html)
- 特别感谢引用图片的作者

PDF created with pdfFactory Pro trial version www.pdffactory.com