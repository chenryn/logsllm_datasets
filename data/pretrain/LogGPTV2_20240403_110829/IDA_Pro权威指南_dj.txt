 （也叫做ZwContinue
 ）将控制权转交给受影响的进程。由于 NtContinue
 已经访问了该进程保存的所有寄存器值（通过它的一个参数），因此通过分析NtContinue
 中保存的指令指针所包含的值，我们可以确定该进程到底在什么地方恢复执行。只要知道该进程将在什么地方恢复执行，我们就可以设置一个断点，以避免步入操作系统代码，并在进程恢复执行前尽早令进程中止。上述过程可以按以下步骤执行。
定位NtContinue
 并在它的第一条指令上设置一个非中止断点。
给这个断点添加一个断点条件。
到达该断点时，通过读取栈中 CONTEXT
 指针的内容获得所保存的寄存器的地址。
从CONTEXT
 记录中获取该进程保存的指令指针的值。
在得到的地址上设置一个断点，并让程序继续执行。
使用一个与隐藏调试器脚本类似的进程，我们可以自动完成所有这些任务，并将它们与启动一个调试会话关联起来。下面的代码说明如何在调试器中启动一个进程，并在 NtContinue
 上设置一个断点：
 static main() {  
   auto func;  
   RunTo(BeginEA());  
   GetDebuggerEvent(WFNE_SUSP, -1);  
   func = LocByName("ntdll_NtContinue");  
   AddBpt(func);  
   SetBptCnd(func, "bpt_NtContinue()");  
}
这段代码的目的很简单，即在 NtContinue
 的入口处设置一个条件断点。该断点的行为通过下面的IDC 函数bpt_NtContinue
 执行：
   static bpt_NtContinue() {  
➊     auto p_ctx = Dword(ESP + 4);            //get CONTEXT pointer argument  
➋     auto next_eip = Dword(p_ctx + 0xB8);    //retrieve eip from CONTEXT  
➌     AddBpt(next_eip);                  //set a breakpoint at the new eip  
➍     SetBptCnd(next_eip, "Warning(\"Exception return hit\") || 1");
       return 0;           //don’t stop
    }
这个函数首先定位指向上述进程保存的寄存器上下文信息的指针（➊），从 CONTEXT
 结构体中偏移量为0xB8
 处获取所保存的指令指针值（➋），然后在该地址上设置一个断点（➌）。为了使用户清楚知道执行为什么会中止，这个函数增加了一个断点条件（始终为真），以向用户显示一条消息（➍）。我们之所以这样做，是因为该断点并不是由用户显式设置，而且用户可能没有将这一事件与异常处理程序的返回关联起来。
这个例子提供了一个简单的方法，说明如何处理异常返回。我们可以在断点函数 bpt_Nt- Continue
 中添加更加复杂的逻辑。例如，如果你怀疑一个异常处理程序正操纵调试寄存器的内容来阻止你设置硬件断点，那么在将控制权返还给被调试的进程之前，你可以将调试寄存器的值恢复到一个已知正确的值。
25.6 小结
除查明软件 bug 这个明显的用途外，调试器还是一个高效的逆向工程工具。在恶意软件和模糊代码分析过程中，如果一个应用程序既可用于静态分析，又可用于动态分析，这可以为我们节省宝贵的时间，而且我们也不需要付出太大努力，就可以使用一款工具生成可由另一款工具分析的数据。当前有大量不同形式的调试器，IDA 的调试器可能不是你跟踪应用程序中的运行时问题的最佳选择。但是，如果你需要对应用程序进行逆向工程分析，或者只是希望在调试过程中获得一个高质量的反汇编代码清单，IDA 的调试器完全能够满足你的需要。在第 26 章中，我们将讨论IDA 调试器的高级功能，包括远程调试以及它在 Linux和OS X平台上的调试功能。
第26章 其他调试功能
在第24章和第 25章中，我们全面介绍了调试器的基本功能，包括用脚本实现调试器操作，以及如何使用它对代码进行去模糊处理。在这一章中，我们将了解如何通过 IDA进行远程调试，将 Bochs x86模拟器1
 作为调试平台，以及 Appcall2
 功能（它可以有效扩展 IDA的脚本功能，以包含由某进程及其相关库定义的任何函数），从而完成对调试器的讨论。
1. 参见http://bochs.sourceforge.net/
 。
2. 参见http://www.hexblog.com/?p=112
 。
26.1 使用IDA 进行远程调试
所有版本的 IDA 均附带有用于实现远程调试会话的服务器组件。此外，IDA 还可以连接到使用gdb_server
 或内置gdb 存根的远程 gdb 会话。远程调试的主要优点之一在于，它能够将GUI调试器界面作为任何调试会话的前端。多数情况下，除设置并建立远程调试服务器连接外，远程调试会话与本地调试会话并不存在太大区别。
26.1.1 使用Hex-Rays调试服务器
要开始远程调试，首先需要在进行进程调试的计算机上启动相应的调试服务器组件。IDA 附带有以下服务器组件。
win32_remote.exe
 。在Windows 计算机上执行的、用于调试 32 位Windows 应用程序的服务器组件。
win64_remotex64.exe
 。在64 位Windows 计算机上执行的、用于调试 64 位Windows 应用程序的服务器组件（仅用于 IDA 高级版）。
wince_remote_arm.dll
 。上传到Windows CE设备（通过 ActiveSync）的服务器组件。
mac_server
 。在OS X计算机上执行的、用于调试 32 位OS X应用程序的服务器组件。
mac_serverx64
 。在64 位OS X计算机上执行的、用于调试 64 位OS X应用程序的服务器组件（仅用于 IDA 高级版）。
linux_server
 。在Linux计算机上执行的、用于调试 32 位Linux应用程序的服务器组件。
linux_serverx64
 。在 64 位Linux计算机上执行的、用于调试 64 位Linux应用程序的服务器组件（仅用于 IDA 高级版）。
armlinux_server
 。在基于 ARM的计算机上执行的、用于调试 ARM应用程序的服务器组件。
android_server
 。在Android设备上执行的、用于调试 Android应用程序的服务器组件。
要在任何平台上执行远程调试，你只需要在该平台上执行相应的服务器组件。你不需要在远程平台上安装 IDA 的完整版本。换句话说，如果你要将 Windows 版本的IDA 作为调试客户端，并且希望远程调试 Linux 应用程序，则除了要调试的二进制文件外，你只需复制 linux_server 文件1
 并在Linux系统上执行该文件。
1. 请注意，IDA 附带的* _server
 二进制文件依赖大量共享库。你可以使用ldd
 （在OS X上为otool –L
 ）命令列出这些共享库。
不论你在服务器上运行什么平台，服务器组件均接受以下 3 个命令行选项。
-p
 用于指定备用 TCP 端口，以便服务器监听。默认端口为23946。请注意，-p
 与端口号之间没有空格。
-P
 用于指定客户端连接调试服务器所必需的密码。请注意，-P
 与提供的密码之间没有空格。
-v
 将服务器置于详细模式。
并没有选项用于限制服务器所监听的 IP 地址。如果你希望限制进入的连接，可以将基于主机的防火墙规则应用于调试平台。启动服务器后，你可以在任何受支持的操作系统上运行 IDA ，并将它作为连接调试服务器的客户端界面，但任何时候，服务器都只能处理一个活动调试会话。如果你希望保持几个同步调试会话，你必须在几个不同的 TCP 端口上启动多个调试服务器实例。
从客户端的角度看，远程调试通过 Debugger ▶Process Options 命令指定服务器主机名称与端口来启动，如图 26-1 所示。你必须首先执行此操作，然后再启动或连接要调试的进程。
图26-1 调试器进程选项对话框
此对话框中的前 4 个字段可用于本地和远程调试会话，而 Hostname、Port 和Password 字段仅用于远程调试会话。下面简要介绍这个对话框中的字段。
Application
 。你要调试的应用程序二进制文件的完整路径。对于本地调试会话，该路径为本地文件系统中的路径。对于远程调试会话，该路径为调试服务器上的路径。如果你选择不使用完整路径，远程服务器将搜索它当前的工作目录。
Input file
 。用于创建IDA 数据库的文件的完整路径。对于本地调试会话，该路径为本地文件系统中的路径。对于远程调试会话，该路径为调试服务器上的路径。如果你选择不使用完整路径，远程服务器将搜索它当前的工作目录。
Directory
 。应在其中启动进程的工作目录。对于本地调试，该目录必须为本地文件系统中的目录。对于远程调试，该目录为调试服务器上的目录。
Parameters
 。用于指定在进程启动时传递给它的任何命令行参数。请注意，其中不得包含任何shell 元字符（如和|）。任何此类字符将作为命令行参数传递给进程。因此，你将无法在调试器中启动一个进程，并让该进程执行任何类型的输入或输出重定向。对于远程调试会话，进程输出将在用于启动调试服务器的控制台中显示。
Hostname
 。远程调试服务器主机或 IP 地址。对于本地调试会话，请将此字段留空。
Port
 。远程调试服务器监听的 TCP 端口号。
Password
 。远程调试服务器所需的密码。请注意，在此字段中输入的数据不会受到屏蔽，因此，任何能够看到你的显示器的人都能够获得该密码。而且，此密码将以明文形式传送给远程服务器，任何能够拦截网络数据包的人也能够获得此密码。
初看起来，图 26-1 中Application 字段与Input File 字段的值似乎完全相同。如果你在 IDA 数据库中打开的文件与你在远程计算机上运行的可执行文件为同一文件，则这两个字段中的值也为同一个值。但是，有些时候，你可能希望调试你在 IDA 数据库中分析的库文件（如 DLL ）。你无法直接调试库文件，因为它们并非独立的可执行文件。这时，你需要将 Input File字段设置为库文件的路径。而 Application 字段则必须设置为使用你要调试的库文件的应用程序的名称。
连接远程gdb 服务器的过程与连接远程 IDA 调试服务器的过程基本相同，只存在两个细微的差别。首先，连接到 gdb_server
 不需要密码；其次，IDA 允许你通过调试器设置对话框中的相关选项按钮来指定特定于 gdb 的行为。GDB配置对话框如图 26-2 所示。
图26-2 GDB配置对话框
值得注意的是，IDA 无法获知运行 gdb_server
 的计算机的体系结构，因此，你需要为其指定处理器类型（默认为 Intel x86 ），并可能还需要指定该处理器的字节次序。当前，IDA 可为x86、ARM、PowerPC 和MIPS处理器提供调试界面。
26.1.2 连接到远程进程
许多时候，你可能需要连接到远程调试服务器上运行的某个进程。例如，如果你在 IDA 中没有打开数据库，你可以执行 Debugger ▶Attach 命令，从IDA 的可用调试器列表中进行选择。如果你选择一个 IDA 远程调试器，你将看到如图 26-3 所示的配置对话框。
图26-3 远程调试器配置
提供适当的连接参数并单击 OK（确定）按钮后，IDA 将获得并显示远程调试服务器中的进程列表，以便你选择并连接到特定的进程。
此外，你可能已在 IDA 中打开了一个二进制文件，并且希望连接到一个远程进程。这时，你可能需要选择一个调试器（如果之前没有为打开的文件类型指定调试器）或切换调试器类型（如果当前并未选择远程调试器）。选择调试器后，你还必须提供远程调试服务器的主机名称和密码信息（见图 26-1 ），然后你就可以使用 Debugger ▶Attach to Process 命令连接到远程进程。
26.1.3 远程调试期间的异常处理
在第25 章中，我们讨论了 IDA 调试器的异常处理及如何修改调试器的异常处理行为。在远程调试会话过程中，调试器的默认异常处理行为由 exceptions.cfg 文件规定，该文件保存在客户计算机中（即你实际运行IDA 的计算机）。因此，你可以修改exceptions.cfg 文件，并通过Debugger Setup对话框（见图 25-4 ）重新加载修改后的文件，而无需访问远程服务器。
26.1.4 在远程调试过程中使用脚本和插件
在远程调试会话中，你仍然可以利用脚本和插件自动完成调试任务。你选择执行的任何脚本或插件将在客户计算机上的 IDA 中运行。IDA 将依次处理与远程进程交互所需的任何操作，如设置断点，查询状态，修改内存或恢复执行。在脚本看来，调试会话就像在本地发生一样。唯一需要注意的是，你必须确保你执行的脚本和插件适用于目标进程运行的体系结构，而非 IDA 客户端运行的体系结构（除非它们碰巧为同一体系结构）。换言之，如果你在Linux 上将Windows版本的IDA 作为远程调试客户端，就不能指望 Windows 调试器隐藏脚本发挥任何作用。
26.2 使用Bochs 进行调试
Bochs 是一种开源 x86 模拟环境。使用 Bochs 可以模拟整个 x86 计算机系统，包括模拟常用的I/O 设备及一个自定义 BIOS。Bochs 为虚拟化软件（如 VMware Workstation）提供了一个基于模拟的替代方案。Hex-Rays 开发团队的 Elias Bachaalany 首先将Bochs 集成到IDA 中，从而为传统的调试提供了一种基于模拟的替代方案。1
 Windows 版本的IDA 附带并安装有兼容版本的Bochs，非 Windows 用户如果需要使用 Bochs，必须在他们的系统上安装 2.4.2 或更高版本的 Bochs。
1. 参见Recon 2011 （http://www.recon.cx/
 ）中的“Designing a minimal operating system to emulate 32/64bits x86 code snippets, shellcode or malware in Bochs” 。
安装Bochs 后，任何时候你在 IDA 中打开一个 x86 二进制文件，IDA 将提供Local Bochs调试器选项。Bochs 的出现使得在非 Windows 系统上调试 Windows 应用程序成为可能，因为这时你可以使用 Bochs 模拟Windows 应用程序，而不必将其作为本机进程来运行。作为模拟器，Bochs的配置选项与更加传统的调试器提供的配置选项略有不同。最重要的区别在于，Bochs 可在以下3 种模式下运行：磁盘映像模式、IDB 模式和PE模式。你可以使用 Bochs 调试器配置对话框来选择运行模式，如图 26-4 所示。
图26-4 Bochs 调试器选项对话框
就所执行枚举的质量和类型而言，每种模式的精确程度截然不同。
26.2.1 Bochs IDB 模式
IDB 是最基本的 Bochs 模式。在 IDB 模式下，Bochs 仅识别你的数据库中的代码。内存区域将映射到 Bochs 中，并通过从数据库中复制字节进行填充。可配置的栈空间的数量取决于 Bochs选项对话框中的设置，IDA 将自行决定栈的位置。模拟从名为 ENTRY
 的数据库符号（如果已定义）处开始执行（即最初指定指令指针的位置）。如果ENTRY
 符号不存在，IDA 会在打开的数据库中进行检查，看当前是否有一定范围的位置处于选中状态，并将这个范围的起始位置作为调试器的入口点。如果没有选择范围，则将指令指针的初始值作为光标的当前位置。在 IDB 模式下运行时，需要记住的是：Bochs 不提供任何操作系统支持，如共享库或典型进程地址空间中任何众所周知的结构的位置。只要代码没有引用数据库以外的任何内容，你完全可以遍历 PE文件、ELF文件、Mach-O文件或一小段原始机器码（如入侵程序负载）。如果你需要执行某个函数以了解其行为，这时就可以使用 IDB 模式，而不必构造整个进程或磁盘映射。
26.2.2 Bochs PE模式
在PE模式下，你可以执行在一定程度上接近进程级别的调试。选择并激活PE模式后，IDA的Bochs 控制模块（一个 IDA 插件）将接管控制权，并以类似于 Windows 进程加载器的方式运行（如果你确实在运行本机 Windows 进程）。PE模式进程将接收进程环境块（PEB ）与线程环境块（TEB ），以及一个模仿将在实际进程中创建的环境块的栈。
Bochs 插件还会将大量常用 Windows 库加载到模拟的进程地址空间中（无需执行任何代码），以便于正确处理进程作出的任何库调用。你可以配置 Bochs 在调试器启动时具体加载哪些库，并在/plugins/bochs/startup.idc 文件中指定这些库。任何库都可以“按原样”加载，或者指定为“将被拨除”。如果某个库带有“将被拨除”标记，Bochs 插件将自动“钩住”该库导出的每个函数，并将这些函数重定向到一个Bochs 解释函数（有关详细信息，请参阅startup.idc文件和IDA帮助系统）。这种“拨除”技巧为用户定义任何库函数的自定义行为提供了极大便利。对于任何由IDA “拨除”的库，你可以定义一个对应的脚本文件，在其中定义你定制的行为。对于其他库（如foolib.dll ）， Bochs 插件将扫描/plugins/bochs 目录，在其中搜索名为 api_foolib.idc或api_foolib.py 的相关脚本。IDA 附带有/plugins/bochs/api_kernel32.idc 文件，你可以通过该文件了解这类文件的结构，以及如何实现各种函数的自定义行为。
在PE模式下，“钩住”库函数并定义自定义行为非常重要，因为这种模式不提供任何操作系统层来执行共享库所需的所有重要操作。例如，通过为函数（如VirtualAlloc
 ）提供备用的、基于脚本的行为（如果该函数无法与操作系统通信，此操作将失败），你可以让模拟的进程（在某种程度上）确信，它正作为具体的进程运行。创建此类基于脚本的行为的目的是，为模拟的进程提供它在与具体库函数通信时（这些函数反过来又会与具体的操作系统进行通信）期待看到的响应。
如果你在非 Windows 平台上使用IDA ，你可以将任何所需的库（在 startup.idc文件中指定）从Windows 系统复制到 IDA 系统中，并编辑startup.idc文件，使其指向包含所有复制的库的目录，从而充分利用 Bochs PE 模式的优势。下面的代码清单为你所需作出的更改提供了一个示例。
// Define additional DLL path  
// (add triple slashes to enable the following lines)  
/// path /home/idauser/xp_dlls/=c:\winnt\system32\