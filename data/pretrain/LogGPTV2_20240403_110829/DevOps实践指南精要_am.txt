移除了了业务逻辑变更更时，多团队协作的问题，降低了了交接数量量，显著
提升⽣生产环境部署的速度和成功率，改进了了站点稳定性；由于⼩小团队
可以独⽴立开发和部署，变更更不不依赖其他团队，开发⽣生产率提升
Dr. Melvin Conway 1968年年实验
8个⼈人制作COBOL和ALGOL编译器器
5⼈人分配去做COBOL，3⼈人分配去做ALGOL
结果是COBOL编译器器运⾏行行需要五
步，ALGOL编译器器运⾏行行需要三步
三种组织结构
⾯面向职能的
主要为专业性、⼈人⼒力力划分和降低成本优化
集中专业知识，帮助职业成⻓长和技能发展
经常是⾼高等级制度的组织结构
曾经在运维组织流⾏行行，如系统管理理员、⽹网络
管理理员、数据库管理理员等都分到不不同的组
⾯面向矩阵的
试图结合⾯面向职能和⾯面向市场
矩阵组织经常导致复杂的组织结构
个⼈人汇报给两个或更更多领导
有时⽆无论职能⽬目标还是市场⽬目标都未达成
⾯面向市场的
主要为快速响应⽤用户需求优化
组织趋于扁平，由多样、跨学科的⻆角
⾊色组成（如市场、⼯工程师等）
很多采⽤用DevOps的重要组
织是这样运作的
Amazon or Netﬂix
每个服务团队同时负责
功能交付和服务⽀支持
会导致在组织内潜在的冗余
问题经常由过度的⾯面向职
能导致（为成本优化）
传统IT运营组织，经常使⽤用⾯面
向职能的⽅方式组织团队专⻓长
数据库管理理员在⼀一个组
⽹网络管理理员在另⼀一个组
服务器器管理理员在第三个组
可⻅见的结果是⻓长的前置时间，
特别是⼤大规模部署等复杂活动
必须在多个组之间开⼯工单，
并且协调⼯工作和交接
导致每⼀一步都在⻓长队列列中等待
员⼯工执⾏行行⼯工作经常不不知道他们
的⼯工作与价值流⽬目标的关系
‘我配置服务器器只因为别⼈人让我做的’
制造了了员⼯工创造性和积极性的真空
当每个运营职能域服务多个价值流
（如多开发团队）时，问题更更加恶化
为了了让开发团队按时完成⼯工
作，经常需要升级问题到经理理
或总监，最终到决策层
决策层根据整个组织⽬目标⽽而不不是
每个职能竖井的⽬目标确定优先级
然后决定需要下发到每个职能
域，改变局部优先级
反过来⼜又让其他团队慢下来
如果每个团队都这样做，每
个项⽬目也都会慢下来
类似的，⾯面向职能团队也经常被集中
的测试和信息安全职能采⽤用
当低频软件发布时⼯工作正常
当增加开发团队数量量或发布和部
署频率的时候，⾯面向职能的组织
很难保持和交付满意的结果
尤其他们的⼯工作都是⼿手⼯工进⾏行行的时候
启动⾯面向市场的团
队（为速度优化）
⾯面向市场的团队不不仅负责功能开发，还有测试、安
全、部署和服务在⽣生产环境的⽀支持，从概念到退出
团队设计成跨职能的和独⽴立的
这样他们可以更更快
可以设计和运⾏行行⽤用户实验
构建和交付新功能
部署并在⽣生产环境运⾏行行他们的服务
修复缺陷⽽而不不依赖其他团队⼈人⼯工处理理
这种模型已经被Amazon和Netﬂix采⽤用，并且是
Amazon在成⻓长过程中依然能够快速⾏行行动的主要原因
如何做到
需要把⼯工程师和技能（如运维、测试、
信息安全等）嵌⼊入到每⼀一个服务团队
不不要做⼤大型，⾃自上⽽而下的组织
经常制造⼤大量量的中断、恐惧和停顿
或者通过⾃自动化的⾃自服务平台，把
他们的能⼒力力提供给团队
准⽣生产环境
初始化⾃自动化测试
执⾏行行部署
能够让每个服务团队独⽴立交付价值给客户，⽽而不不需要
新建⼯工单给其他组，如IT运营，测试，信息安全等
测试、运营和安全是每个⼈人每天的⼯工作
⾼高绩效组织中，团队的每个⼈人共享通⽤用⽬目标，质量量、可⽤用
性和安全不不是单独部⻔门的责任，⽽而是每个⼈人每天的⼯工作
每天最紧急的可能是部署客户功能或修复严重程度 1 的产
品事故，或评审同事的变更更，或紧急安全补丁，或为了了让
同事更更有效率⽽而做的改进
Case：Facebook在2009年年⼤大规模增⻓长时
遇到代码部署的严重问题
经常救⽕火和⻓长时间解决问题
最有效的改进：让所有的⼯工程师，包括经
理理和架构师轮流对他们构建的服务值班
让每个⼈人感受到上游进⾏行行的架构和代码决
策，如何影响到下游结果
CTO at Ticketmaster,⽤用美式⾜足球
⽐比喻Dev和Ops
Dev负责进攻，Ops负责防守
其实⽐比喻有瑕疵，因为他们
根本不不在⼀一个团队
新的⽐比喻：Ops是进攻先锋，
Dev是四分卫，Ops的⼯工作就是
确保Dev有⾜足够的时间实施⽐比赛
让每个⼈人成为多⾯面⼿手
过度的专业化会导致竖井化
任何⼀一个复杂的运维活动都需要在不不
同基础设施域中间做很多交接和排队
导致⻓长的前置时间
⽐比如⽹网络变更更必须由⽹网络部⻔门的⼈人执⾏行行
我们依靠⽇日益增多的技术，需要有⼯工
程师在特定技术领域很精通
但我们不不希望他们只理理解和只能在技
术价值流的某个领域做出贡献
交叉培训并提升⼯工程师技能，多⾯面⼿手
可以做⽐比专家同⾏行行更更多的事情，并且
也可以改进整个价值流并移除队列列和
等待时间
ﬁxed mindset
智⼒力力和能⼒力力是静态‘给定’的
growth mindset
⿎鼓励学习，帮助⼈人们克服学习焦虑，确
保⼈人们能够有相关技能并定义学习地图
学习型组织需要⼈人们愿意学习
⿎鼓励每个⼈人学习，并提供培训和学习
建⽴立了了更更可持续和低成本的达到伟⼤大
的⽅方式，投资和开发已有的⼈人员
对策就是⿎鼓励每个团队成员成为多⾯面⼿手
为⼯工程师提供机会，学习在构建
和运⾏行行系统所使⽤用的必要技能
有规律律的在不不同⻆角⾊色间轮岗
全栈⼯工程师：⾄至少对整个应⽤用栈
（如应⽤用代码、数据库、操作系
统、⽹网络、云）有⼀一般的理理解
让⾯面向职能团队⼯工作
⾯面向职能和集中的运维团队是可⾏行行的，只要服务团队
可以通过从运维可靠和快速的获取所需，反正亦然
其实可以建⽴立起有效、⾼高速率的⾯面向职能团队
跨职能团队和⾯面向市场团队是⼀一种取得快速
流动和可靠性的⽅方式，但不不是唯⼀一路路径
让价值流中的每个⼈人看到客户和组织结果作
为共享⽬目标，不不论他们身在哪个组织中
很多让⼈人敬佩的DevOps组织保持着⾯面向
职能的团队，如Etsy，Google和GitHub
⾼高度信任⽂文化，可以让所有部⻔门⼀一起
⾼高效⼯工作，所有⼯工作优先级透明，有
充⾜足的空闲让⾼高优⼯工作快速完成
在某种程度上依靠⾃自动化的⾃自服务平
台，内建质量量到每个⼈人构建的产品中
在精益制造运动中，丰⽥田是⾯面向职能
的组织，与最佳实践（跨职能、⾯面向
市场）的不不同，被称为第⼆二丰⽥田悖论
决定性因素不不是组织形式，⽽而是⼈人员
⾏行行动和反应的⽅方式
丰⽥田的成功不不是因为组织结构，⽽而是
开发员⼯工的能⼒力力和习惯
出资服务和产品，⽽而不不是项⽬目
这些团队有专属的⼯工程师，交付内部和外
部客户承诺，包括功能，故事和任务
创造稳定的服务团队，持续资助执⾏行行他们
⾃自⼰己的策略略和⽅方案路路线
更更传统的⽅方式是开发和测试团队被指派到项⽬目，然
后在项⽬目完成和资⾦金金耗尽后重新指派到其他项⽬目
这样导致⾮非期望的结果，⽐比如开发不不能看到他们决
定带来的⻓长期结果，资⾦金金模型只⽀支持软件⽣生命周期
的最早阶段，也是⼀一个产品成功最低成本的部分
⽬目标是基于产品的资⾦金金模型取得组织级和客户结
果，如收⼊入，客户终身价值和客户接受率，理理想情
况使⽤用最⼩小的产出（⼯工作量量或时间、代码数）
⽽而传统项⽬目度量量的是在预算、时间、范围内完成项⽬目
设计团队边界，参照康威定律律
当主要沟通机制是⼯工单或变更更请求，
甚⾄至外包合同时，协作被阻塞
组织成⻓长的最⼤大挑战就是在不不同⼈人员
和团队间维持⾼高效沟通和协作
当把团队按职能切分（如开发、测试不不
同地点或整个外包），或架构分层（应
⽤用、数据库）时，会导致很差的产出
⼤大量量返⼯工
技术规格分歧
很差的交接
有⼈人空闲等待他⼈人
跨越不不同楼层、⼤大厦、时区，共同理理解
和相互信任更更难，阻碍⾼高效协作
理理想情况下，软件架构应该
让⼩小团队独⽴立、⾼高产
充⾜足的解耦
⼯工作可以完成⽽而不不需过
⾼高和不不必要的沟通协作
创建解耦的架构，助⼒力力开发的
⽣生产效率和安全
如果是紧耦合的架构
⼩小变更更可能引起⼤大范围失败
测试整个系统，需要集成成百上千其他开
发⼈人员，反过来影响同样多的交互系统
⼯工作在系统中某个部分的每个⼈人，都需
要持续与可能影响到的其他部分的⼈人⼀一
起协作，包括复杂和官僚僚的变更更流程
增⻓长了了变更更前置时间，降低了了开发效