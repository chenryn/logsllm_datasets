### 应用程序中的路由请求

在应用程序中引入分片路由逻辑可以增加复杂性。例如，在客户端向最近的数据中心发送请求时，如果该数据中心无法处理请求，则应用程序需要将请求代理到正确的分片。这种过程称为回传请求。然而，传统的 Web 框架并不是为代理请求而设计的，添加此类功能并不容易。

1. 客户端向最近的数据中心发送分片 1 的请求。
2. 应用服务器连接到本地分片。
3. 客户端向最近的数据中心发送分片 2 的请求。
4. 数据中心 1 中的应用服务器将请求代理到数据中心 2，并在那里重复步骤 2。

### 使用可编写脚本的负载均衡器路由请求

通过使用可编写脚本的负载均衡器，可以将所有分片路由逻辑移至负载平衡层，从而实现新的路由可能性并从应用程序中完全抽象出分片的概念。这样，进程永远不会知道它们无法提供的请求。通过完全控制请求路由逻辑，可以从各种属性（如主机、URI 和客户端 IP）中提取所需的分片信息，甚至可以通过查询数据库来获取有关请求所属分片的信息。

1. 客户端向最近的数据中心发送分片 1 的请求。
2. 数据中心 1 中的负载均衡器将请求代理到本地分片。
3. 客户端向最近的数据中心发送分片 2 的请求。
4. 数据中心 1 中的负载均衡器将请求代理到数据中心 2，并在那里重复步骤 2。

理想情况下，应用程序很少意识到自己服务的分片。通过将路由逻辑置于负载均衡器中，应用程序几乎不会意识到自己的分片。这种方法可以在多个应用程序之间重用分片逻辑。Google 的 Slicer 是一个很好的例子，它是一种用于应用程序的自动分片服务，核心组件对上游应用程序来说是透明的，并且每秒可处理 700 万个请求。

### 利用潜力

可编写脚本的负载均衡器的强大之处在于能够重用现有功能，例如传输层安全 (TLS) 协商或运行状况检查。HTTP 缓存是一个很好的例子，RFC 允许自定义缓存控制标头扩展，这些扩展可以修改缓存请求的方式和时间。此外，负载均衡器还擅长路由和服务请求。只需少量工作，这些宝贵的功能就可以通过添加到负载均衡器的模块继承。例如，Cloudflare 的 Web 应用程序防火墙 (WAF) 和 Shopify 的 Sorting Hat (L7 路由层) 都以微秒为单位衡量性能。

### 案例研究：无停顿部署

对于大多数服务而言，快速轻松地将代码投入生产的能力非常重要。无停顿部署是这一能力的关键前提条件。尽管自动化可以减少执行破坏性维护所需的时间，但无法完全消除停机时间。通过可编写脚本的负载均衡器，可以通过添加启用/禁用请求暂停功能来实现不停顿部署或维护。当客户端请求命中负载均衡器时，负载均衡器会等待直到禁用请求暂停才将其转发到应用程序。这使得客户端收到响应较慢，而不是使请求失败。

### 服务级别中间件

避免辛劳是 SRE 的核心原则之一。随着组织继续采用 SRE 最佳实践，越来越多的团队开始采用产品或服务模型来指导支持团队和运维团队。在传统运维模型中，工程师为每个应用程序部署和维护依赖项目。使用产品或服务模型，一个专门的团队构建与应用程序无关的服务。尽管这种方法比辛劳和“运维雪崩”要好得多，但它仍然将与预配服务交互的负担推到了应用程序上。使用可编写脚本的负载均衡器，产品/服务模型不是 SRE 团队消除辛劳的唯一方法。

### 作为救援的中间件

可编写脚本的负载均衡器通常是涉及请求的第一个组件，使其成为影响多个服务的逻辑的理想位置。应用程序可以在请求接近之前读取添加到请求的标头，而不是对外部服务进行 RPC 调用。服务级别中间件在请求访问上游应用程序之前透明地对请求进行操作。产品开发人员可以免除调用外部服务的开销和复杂性。对于某些问题，中间件是一种更自然的解决方案。例如，标识中间件可以消除从上游服务中调用外部服务的延迟和复杂性开销。

### 服务级别中间件的 API

除了最简单的中间件之外，所有中间件都需要一些特定于应用程序的配置。直接的解决方案可能是在中间件代码库中对此配置进行硬编码，但这可能会导致配置偏离现实并引起中断。为了防止这种情况，建立明确的 API 非常重要，通过这些 API，应用程序可以不断与下游中间件通信。可以使用自定义 HTTP 请求和响应标头作为通信总线，而配置是通过此渠道传递的。对于不适合请求/响应流的数据，可以使用带外消息总线将状态传播到所有负载均衡器。

### 案例研究：WAF/Bot 缓解

Web 服务成为分布式拒绝服务 (DDoS) 攻击的目标或通过机器人进行自动抓取只是时间问题。DDoS 攻击可能导致严重的故障和漫长的服务停顿，机器人自动攻击也会导致真正的客户严重不满。使用可编写脚本的负载均衡器可以构建针对这些威胁的保护层，并在所有面向 Web 的服务上使用它们，而不必在每个应用程序中开发相同的反机器人或 DDoS 处理工具。Cloudflare 已经建立了一个业务，通过 Web 应用程序防火墙功能提供这样一层保护。其中间件背后的任何服务都享有针对 OWASP 漏洞、常见 DoS 攻击和 Zero-day 漏洞的保护。当请求的危险或真实性不明确时，中间件能够重定向请求到质询响应测试页面，以验证请求是否来自合法来源。