https://www.owasp.org/index.php/Top_10-2017_Top_10. https://www.owasp.
org/index.php/Top_10-2017_Top_10 Accessed: 2018-09-27.
[57] Niels Provos, Markus Friedl, and Peter Honeyman. 2003. Preventing Privilege
Escalation. In Proceedings of the 12th Conference on USENIX Security Symposium
- Volume 12 (SSYM’03). USENIX Association, Berkeley, CA, USA, 16–16. http:
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1834//dl.acm.org/citation.cfm?id=1251353.1251369
[58] Martin Rinard. 2011. Manipulating program functionality to eliminate security
vulnerabilities. In Moving target defense. Springer, 109–115.
[59] J. M. Rushby. 1981. Design and Verification of Secure Systems. In Proceedings
of the Eighth ACM Symposium on Operating Systems Principles (SOSP ’81). ACM,
New York, NY, USA, 12–21. https://doi.org/10.1145/800216.806586
[60] Jerome H Saltzer. 1974. Protection and the control of information sharing in
Multics. Commun. ACM 17, 7 (1974), 388–402.
[61] José Fragoso Santos, Thomas Jensen, Tamara Rezk, and Alan Schmitt. 2015.
Hybrid typing of secure information flow in a JavaScript-like language. In Trust-
worthy Global Computing. Springer, 63–78.
[62] José Fragoso Santos and Tamara Rezk. 2014. An information flow monitor-
inlining compiler for securing a core of javascript. In IFIP International Information
Security Conference. Springer, 278–292.
[63] Node Security. 2016. Continuous Security monitoring for your node apps. https:
//nodesecurity.io/
capability system. Vol. 33. ACM.
[64] Jonathan S Shapiro, Jonathan M Smith, and David J Farber. 1999. EROS: a fast
[65] Snyk. 2021. Snyk Vulnerability Database. https://snyk.io/vuln?type=npm
[66] Manu Sridharan, Julian Dolby, Satish Chandra, Max Schäfer, and Frank Tip. 2012.
Correlation Tracking for Points-To Analysis of JavaScript. In ECOOP 2012 - Object-
Oriented Programming - 26th European Conference, Beijing, China, June 11-16,
2012. Proceedings. 435–458.
[67] Cristian-Alexandru Staicu, Martin Toldam Torp, Max Schäfer, Anders Møller,
and Michael Pradel. 2020. Extracting taint specifications for JavaScript libraries.
In ICSE ’20: 42nd International Conference on Software Engineering, Seoul, South
Korea, 27 June - 19 July, 2020, Gregg Rothermel and Doo-Hwan Bae (Eds.). ACM,
198–209. https://doi.org/10.1145/3377811.3380390
[68] Cristian-Alexandru Staicu, Michael Pradel, and Benjamin Livshits. 2018. Synode:
Understanding and Automatically Preventing Injection Attacks on Node. js. In
Networked and Distributed Systems Security (NDSS’18). https://doi.org/10.14722/
ndss.2018.23071
[69] Deian Stefan, Edward Z. Yang, Petr Marchenko, Alejandro Russo, Dave Herman,
Brad Karp, and David Mazières. 2014. Protecting Users by Confining JavaScript
with COWL. In 11th USENIX Symposium on Operating Systems Design and Im-
plementation (OSDI 14). USENIX Association, Broomfield, CO, 131–146. https:
//www.usenix.org/conference/osdi14/technical-sessions/presentation/stefan
[70] Michael Stepankin. 2016. [demo.paypal.com] Node.js code injection (RCE). http://
artsploit.blogspot.com/2016/08/pprce2.html. http://artsploit.blogspot.com/2016/
08/pprce2.html Accessed: 2018-10-05.
[71] Michael Stepankin. 2016. Snyk: Code Injection in dustjs-linkedin. https://snyk.io/
vuln/npm:dustjs-linkedin:20160819. https://snyk.io/vuln/npm:dustjs-linkedin:
20160819 Accessed: 2019-03-19.
[72] TC39. 2021. Draft Proposal for SES (Secure EcmaScript). https://github.com/tc39/
proposal-ses. https://github.com/tc39/proposal-ses Accessed: 2021-04-20.
[73] Mike Ter Louw, Phu H Phung, Rohini Krishnamurti, and Venkat N Venkatakr-
ishnan. 2013. SafeScript: JavaScript transformation for policy enforcement. In
Nordic Conference on Secure IT Systems. Springer, 67–83.
[74] Jeff Terrace, Stephen R Beard, and Naga Praveen Kumar Katta. 2012. JavaScript
in JavaScript (js. js): sandboxing third-party scripts. In Presented as part of the
3rd USENIX Conference on Web Application Development (WebApps 12). 95–100.
[75] Neline van Ginkel, Willem De Groef, Fabio Massacci, and Frank Piessens. 2019. A
Server-Side JavaScript Security Architecture for Secure Integration of Third-Party
Libraries. Security and Communication Networks 2019 (2019).
[76] Nikos Vasilakis, Achilles Benetopoulos, Shivam Handa, Alizee Schoen, and Mar-
tin C. Rinard. 2021. Supply-Chain Vulnerability Elimination via Active Learning
and Regeneration. In Proceedings of the 2021 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’21). Association for Computing Machinery,
New York, NY, USA.
[77] Nikos Vasilakis, Ben Karel, Nick Roessler, Nathan Dautenhahn, André DeHon,
and Jonathan M. Smith. 2018. BreakApp: Automated, Flexible Application Com-
partmentalization. In Networked and Distributed Systems Security (NDSS’18).
https://doi.org/10.14722/ndss.2018.23131
[78] Nikos Vasilakis, Grigoris Ntousakis, Veit Heller, and Martin C. Rinard. 2021.
Efficient Module-Level Dynamic Analysis for Dynamic Languages with Module
Recontextualization. In Proceedings of the 29th ACM Joint Meeting on European
Software Engineering Conference and Symposium on the Foundations of Software
Engineering (ESEC/FSE 2021). Association for Computing Machinery, New York,
NY, USA, 1202–1213. https://doi.org/10.1145/3468264.3468574
[79] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. 1993.
Efficient Software-based Fault Isolation. In Proceedings of the Fourteenth ACM
Symposium on Operating Systems Principles (SOSP ’93). ACM, New York, NY, USA,
203–216. https://doi.org/10.1145/168619.168635
[80] Michael Weissbacher, William K. Robertson, Engin Kirda, Christopher Kruegel,
and Giovanni Vigna. 2015. ZigZag: Automatically Hardening Web Applications
Against Client-side Validation Vulnerabilities. In 24th USENIX Security Sympo-
sium, USENIX Security 15, Washington, D.C., USA, August 12-14, 2015, Jaeyeon Jung
and Thorsten Holz (Eds.). USENIX Association, 737–752. https://www.usenix.
Tab. 5: Compatibility results only for 31 Q1 libraries (Cf.§8.3).
Full Mir
Mir without
import-time
analysis
88.9
Inferred permissions (avg.)
Compatibility:
Field access locations (out of 2387)
Packages (out of 31)
Test cases (out of 1511)
379.5
1660 (69.54%)
16 (51.61%)
1119 (74.06%)
2363 (98.9%)
26 (83.87%)
1499 (99.2%)
Tab. 6: Compatibility results only for 50 additional Q2 li-
braries (Cf.§8.3).
Inferred permissions (avg.)
Compatibility:
Field access locations (out of 1,044)
Packages (out of 50)
Test cases (out of 1,046)
Mir without
import-time
analysis
13.3
762 (72.9%)
42 (84%)
1,032 (98.6%)
Full Mir
17.38
1,037 (99.3%)
47 (94%)
1,042 (99.6%)
org/conference/usenixsecurity15/technical-sessions/presentation/weissbacher
[81] Yongzheng Wu, Sai Sathyanarayan, Roland HC Yap, and Zhenkai Liang. 2012.
Codejail: Application-transparent isolation of libraries with tight program in-
teractions. In European Symposium on Research in Computer Security. Springer,
859–876.
[82] Nicholas C. Zakas and ESLint contributors. 2013. ESLint—Pluggable JavaScript
linter. https://eslint.org/. https://eslint.org/ Accessed: 2018-07-12.
[83] Markus Zimmermann, Cristian-Alexandru Staicu, Cam Tenny, and Michael Pradel.
2019. Small world with High Risks: A Study of Security Threats in the Npm
Ecosystem. In Proceedings of the 28th USENIX Conference on Security Symposium
(SEC’19). USENIX Association, USA, 995–1010.
A COMPATIBILITY BREAKDOWN (Q3)
Tab 5 and 6 report the compatibility results for (Q3) for the Q1
library subset and the Q2 popular libraries independently.
B DETAILED SECURITY ANALYSIS (Q1)
The two tables below present the details of Mir’s security evalua-
tion. Tab. 7 presents the first half—vulnerabilities we can install, for
which we have or have managed to create exploits, and which fall
under Mir’s threat model. Mir defends against 61/63 exploits and
crashes on the other two libraries; Mir crashes on these libraries
even when run without the exploit. The exploit used in Mir’s evalu-
ation was either the one was provided with the vulnerability report,
or one manually developed by the authors when no exploit came
with the vulnerability report. (The last column of Tab. 7 presents
information related to Mir’s compatibility analysis, and specifically
which Q1 libraries were part of Mir’s compatibility evaluation and
why.) Tab. 8 contains vulnerable libraries on which we did not apply
Mir and the reason why. Within a 5-hour human-effort timeout
per library, 7 libraries could not be exploited and 6 libraries could
not be installed; 33 libraries fall outside Mir’s threat model; and 23
libraries were made for a different language or platform.
C DETAILED PRIVILEGE ANALYSIS (Q2)
Tab. 9 below contains the results for Mir’s privilege analysis.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1835Tab. 7: Mir defends against 61/63 exploits against real-world libraries and crashes on the other two libraries; Mir crashes on these libraries
even when run without the exploit. The exploit used in Mir’s evaluation was either the one was provided with the vulnerability report, or
one manually developed by the authors when no exploit came with the vulnerability report (noted with M). The last column of the table lists
which libraries from the Q1 dataset where included in Q3 and which were excluded (and the reasons for their exclusion).
Exploit?
M
M
M
M
Print JHU
Write file test
Attack
Print 123
Execute cat /etc/passwd
Write file kmc-success
Print injected
Write file marsdb-success
Print 1
Print 123
Execute ls
Write file ejs-success
Write file eslint-utils-success
Returns Date.now
Returns Date.now
Print defconrussia
Write file test
Returns Date.now
Write file HACKED
Execute ps
Execute ls
Print hacked
Print hacked
10
18
4
7
0
4
1
7
2
49 188 136
Write file domokeeper-success
Write file domokeeper-success
I
R W X
5
21
6
1
8
7
27
144
9
33
117
9
10
21
3
1
3
0
1
3
0
14
64
22
0
11
35
5
11
2
0
1
16
5
3
12
22
25 101
2
1
9
31
62
77
3
9
25
71 173 116
71 173 116
7
83
1
2
64 167 122
192
17
Total
Snyk Category
CWE
Name
69
Arbitrary Code Execution 37
CWE-78
access-policy
31 Write file angular-expressions-success M
Remote Code Execution
15
CWE-94
angular-expressions
422
Arbitrary Code Execution 242
CWE-78
cd-messenger
362
Arbitrary Code Execution 203
CWE-502
cryo
78
CWE-94
Remote Code Execution
44
dns-sync
12
CWE-200,23,94 Arbitrary Code Execution 8
domokeeper
12
Arbitrary Code Execution 8
CWE-94
domokeeper
235
Arbitrary Code Execution 135
CWE-94
ejs
65
Arbitrary Code Execution 19
CWE-94
eslint-utils
37
Arbitrary Code Execution 19
CWE-94
front-matter
21
Arbitrary Code Execution 4
CWE-78
fun-map
45
Arbitrary Code Injection 25
CWE-94
growl
340
CWE-94
Arbitrary Code Execution 192
grunt
25
Remote Code Execution
CWE-94
13
heroku-exec-util
353
Arbitrary Code Injection 183
CWE-94
hot-formula-parser
78
Arbitrary Code Execution 41
CWE-94
is-my-json-valid
701
Arbitrary Code Execution 341
CWE-94
jingo
701
Arbitrary Code Execution 341
CWE-94
js-yaml
595
Arbitrary Code Injection 313
CWE-94
kmc
40
CWE-94
Arbitrary Code Injection 20
m-log
Arbitrary Code Injection 457
CWE-94
810
marsdb
Arbitrary Code Execution 5113 808 3093 1753 10767
CWE-94
mathjs
31
Remote Code Execution
CWE-94
14
meta-git
51
Arbitrary Code Injection 28
CWE-94
mixin-pro
26
Arbitrary Code Injection 13
CWE-94
mobile-icon-resizer
Arbitrary Code Injection 382
CWE-94
755
mock2easy
Arbitrary Code Injection 955 263 572 199 1989
CWE-94
modjs
29
Arbitrary Code Injection 16
CWE-94
modulify
104
Arbitrary Code Injection 57
CWE-94
mol-proto
428
Arbitrary Code Injection 239
CWE-94
mongo-edit
596
Remote Code Execution
CWE-94
331
mongo-express
73
Arbitrary Code Injection 42
mongo-parse
CWE-94
8
Remote Code Execution
mongodb-query-parser CWE-94
4
mongoosemask
CWE-94
Arbitrary Code Injection 35
74
303
Arbitrary Code Injection 158
CWE-94
mongui
50
Arbitrary Code Injection 24
CWE-94
morgan
15
Arbitrary Code Execution 7
CWE-78
mosc
24