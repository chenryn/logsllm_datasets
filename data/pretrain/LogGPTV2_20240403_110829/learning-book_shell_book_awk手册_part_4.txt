close( Sys_Sort )
printf(" Average arrival time : %d:%dn", total/NR/60, (total/NR)%60 ) >> Result
#将数组cnt[]中新的迟到数据写回文件中
for( any in cnt )
print any, cnt[any] > late_file
function HM_to_M( hour, min ){
return hour*60 + min
执行后，today_rpt4之内容如下：
Todayis09月21日
ID Number Arrival Time
10058:12
* 1 times
10067:45
1times
10088: 1
* 1 times
1012
7:46
1025
7:27
1 times
1028
7:49
1029
7:57
2 times
10347:26
10427:59
10517:51
1052 8:5
* 3 times
11017:32
Average arrival time : 7:49
09月late.dat文件被修改为如下：
1005 1
---
## Page 21
1012 0
1006 1
1008 1
11010
1025 1
0001
1042 0
1028 0
1029 2
1051 0
1052 3
说明：
late_file是一变量，用以记录迟到次数的文件的文件名
late_file之值由两部分构成，前半部是当月月份名称（由调用"date"取得）后半部固定
为"late.dat”如：09月late.dat
指令getline0）（..可读入文件中的每一笔数据并予处理.这是awk中用
户自行读取数据文件的一个重要模式
数组cnt[]以员工ID.当下标(index)，其对应值表示其迟到的次数
执行结束后，利用for(Variable in arnay）)(..}的语法
for( any in cnt )print any, cnt[any] > late_file
将更薪过的迟到数据重新写回记录迟到次数的文件.该语法在前面曾有说明
8.处理多行的数据
awk每次从数据文件中只读取一数据进行处理
awk是依照其内建变量RS(Record Separator)的定义将文件中的数据分隔成一行一行的
Record.RS的默认值是"n"（跳行符号），故平常awk中一行数据就是一笔Record.但有些文
法是相邻的Records之间改以一个空白行来隔开.在awk程序中，令RS="（空字符串）后
awk把会空白行当成来文件中Record的分隔符.显然awk对RS="另有解释方式，简略描
述如下，当RS=时：数个并邻的空白行，awk仅视成一个单一的RecordSaparator.（awk不会
于两个紧并的空白行之间读取一笔空的Record）
awk会略过（skip)文件头或文件尾的空白行.故不会因为这样的空白行，造成awk多读入了二
笔空的数据
请观察下例，首先建立一个数据文件week.rpt如下：
---
## Page 22
张长弓
GNUPLOT 入门
吴国强
Latex简介
VAST-2使用手册
mathematic入门]
李小华
awk Tutorial Guide
Regular Expression
该文件的开头有数行空白行，各笔Record之间使用一个或数个空白行隔开.读者请细心观察，
当RS="时，awk读取该数据文件之方式.
编辑一个awk程序文件make_report如下：
#!/bin/sh
awk
BEGIN {
FS = "\n"
split（“一，二，三，四，五.六.七.八.九..C_Number，“"）
printf("\n%s 报告人：%s \n,C_Number[NR],$1)
for( i=2; i <= NF; i++) printf(" %d, %s\n", i1, $i)
$
执行
$ make_report week,rpt
屏幕产生结果如下：
一.报告人：张长弓
1, GNUPLOT 入门
二.报告人：吴国强
1.Latex简介
2.VAST-2使用手册
3.mathematic 入(
三.报告人：李小华
1. auk Tutorial Guide
2. Regular Expression
[说明：]
本程序同时也改变字段分隔字符（FS="n"），如此一笔数据中的每一行都是一个field.例如：
awk读入的第一笔Record为
张长弓
---
## Page 23
GNUPLOT人I]
其中$1指的是"张长弓"$2指的是"GNUPLOT入门"
上式中的C_Number[]是一个数组（array)，用以记录中文数字.例如：C_Number[1]="一"，
C_Number[2]-"二."这过程使用awk字符串函数spli（）来把中文数字放进数组
C_Number[ ]中.
函数split（）用法如下：
split（原字符串，数组名，分隔字符（fieldseparator)）：awk将依所指定的分隔字符（field
separator)分隔原字符串成一个个的字段（field)，并以指定的数组记录各个被分隔的字段
9.如何读取命令行上的参数
大部分的应用程序都允许使用者在命令之后增加一些选择性的参数.执行awk时这些参数大
部分用于指定数据文件文件名，有时希望在程序中能从命令行上得到一些其它用途的数据
本小节中将叙述如何在awk程序中取用这些参数
建立文件如下，命名为see_arg：
#!/bin/sh
awk
BEGIN{
for( i=0; i<ARGC ; i++)
printARGV[i]#依次印出awk所记录的参数
执行如下命令：
$ /see_arg first-arg second-arg
结果屏幕出现：
awk
first-arg
second-arg
[说明：]
ARGC,ARGVI]为awk所提供的内建变量
ARGC：为一整数.代表命令行上，除了选项-v，-f及其对应的参数之外所有参数的数目
ARGV[]：为一字符串数组.ARGV[0],ARGV[1]..ARGV[ARGC-1]
分别代表命令行上相对应的参数
例如，当命令行为：
$ awk =vx=36 f program1 data1 data2
或
$ awk ‘( print $1 .$2 )’ datal data2
其ARGC之值为3
ARGV[0]之值为"awk"
ARGV[1]之值为"datal"
ARGV[2]之值为"data2"
---
## Page 24
命令行上的"-f programl","-vx=36",或程序部分“printS1,S2)"都不会列入ARGC及
ARGV[]中.
awk利用ARGC来判断应开启的数据文件个数
但使用者可强行改变ARGC；当ARGC之值被使用者设为1时；
awk将被蒙骗，误以为命令行上并无数据文件文件名，故不会以ARGV[1],ARGV[2]..为文件
名来打开文件读取数据；但在程序中仍可通过ARGV[1],ARGV[2]..来取得命令行上的数据
某一程序testl.awk如下：
BEGIN{
number=ARGC#先用mumber记住实际的参数个数
ARGC=2#自行更改ARGC=2.awk将以为只有一个资料文件
#仍可籍由ARGV[]取得命令行上的资料，
for( i=2; i<number; i++) data[i] = ARGV[i]
........
于命令行上键入
$ awk -f test1.awk data_file apple orange
执行时awk会打开数据文件data_file以进行处理.但不会打开以apple.orange为档名的文
件(因为ARGC被改成2).但仍可通过ARGV[2],ARGV[3]取得命令行上的参数apple,orange
也可以用下列命令来达成上例的效果
$awk -f test2,awk v data[2]="apple" =v data[3]=~orange" data_file
10.编写可与用户交互的awk程序
执行awk程序时，awk会自动从文件中读取数据来进行处理，直到文件结束.只要将awk读取
数据的来源改成键盘输入，便可设计与awk交互的程序了.
本节将提供一个该类程序的范例
[范例：]本节将编写一个英语生字测验的程序，它将印出中文字意，再由使用者回答其英语
生字
首先编辑一个数据挡test.dat（内容不限，格式如下）
apple苹果
orange柳橙
banana 香蕉
pear梨子
starfruit 杨桃
bellfruit莲雾
kiwi奇异果
pineapple 菠萝
watermelon 西瓜
编辑awk程序"c2e"如下：
#!/bin/sh
---
## Page 25
awk
BEGIN{
while（getline<ARGV[1]）#由指定的文件中读取测验数据
English[++n]=$1#最后，n将表示题目之题数
Chinese[n] = $2
ARGV[1]=“-"#"-"表示由stdin（键盘输入）
srand（）#以系统时间为随机数启始的种子
question（）#产生考题
（ak自动读入由键盘上输入的数据（使用者回答的答案）
if($1 != English[ind])
print "Try again!
else{
print "\nYou are right !! Press Enter to Continue -- "
getline
question（）#产生考题
function question()(
ind=int（rand（）*n）+1#以随机数选取考题
system("clear")
print " Press \"ctrld\" to exit*
printf（"n%s"，Chinese[ind]”的英文生字是：“）
执行时键入如下指令：
$./c2e test,dat
屏幕将产生如下的画面：
Press “ctrld " to exit
莲雾的英文生字是：
若输入belfnuit
程序将产生
You are right !! Press Enter to Continue -*
[说明：]
参数test.dat（ARGV[1])表示储存考题的数据文件文件名.awk由该文件上取得考题资料后，
将ARGV[1]改成""
"_"表示由stdin（键盘输入）数据.键盘输入数据的结束符号（Endoffile）是ctrl-d.当awk读
到ctrl-d时就停止由stdin读取数据
awk的数学函数中提供两个与随机数有关的函数
srand（）：以当前的系统时间作为随机数的种子
rand（）：返回介于0与1之间的（近似）随机数值
---
## Page 26
11.使用awk编写递归程序
awk中除了函数的参数列（ArgumentList）上的参数（Arguments）外，所有变量不管于何处出现
全被视为全局变量.其生命持续至程序结束--该变量不论在function外或function内皆可
使用，只要变量名称相同所使用的就是同一个变量，直到程序结束
因递归函数内部的变量，会因它调用子函数（本身）而重复使用，故编写该类函数时，应特别留
心
[例如：]执行
awk
BEGIN(
x = 35
y = 45
test_variable( x)
printf("Return to main : arg1= %d, x= %d, y= %d, z= %dn*, arg1, x, y, z)
function test_variable( arg1)
argl++#arg1为参数列上的参数，是localvariable.离开此函数后将消失，
y+#会改变主式中的变量y
z=55#z为该函数中新使用的变量，主程序中变量z仍可被使用，
printf("Inside the function: arg1=%d,x=%d, y=%d, z=%d\n", arg1, x, y, z)
结果屏幕印出
Inside the function: arg1=36,x=35, y=46, z=55
Return to main : arg1= 0, x= 35, y= 46, z= 55
由上可知：
函数内可任意使用主程序中的任何变量.函数内所启用的任何变量（除参数外)，于该函数之
外依然可以使用.此特性优劣参半，最大的坏处是式中的变量不易被保护，特别是递归调用本
身，执行子函数时会破坏父函数内的变量
一个变通的方法是：在函数的参数列中虚列一些参数.函数执行中使用这些虚列的参数来记
录不想被破坏的数据，如此执行子函数时就不会破坏到这些数据.此外awk并不会检查调用
函数时所传递的参数个数是否一致.
例如：定义递归函数如下：
functiondemo（arg1）（#最常见的错误例子
.......