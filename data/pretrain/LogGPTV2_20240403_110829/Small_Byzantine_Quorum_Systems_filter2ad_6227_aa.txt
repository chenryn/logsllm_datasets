title:Small Byzantine Quorum Systems
author:Jean-Philippe Martin and
Lorenzo Alvisi and
Michael Dahlin
Small Byzantine Quorum Systems
Jean-Philippe Martin, Lorenzo Alvisi, Michael Dahlin
University of Texas at Austin - Dept. of Computer Science
Email: fjpmartin, lorenzo, PI:EMAIL
Abstract
In this paper we present two protocols for asynchronous
Byzantine Quorum Systems (BQS) built on top of reli-
able channels—one for self-verifying data and the other
for any data. Our protocols tolerate f Byzantine failures
with f fewer servers than existing solutions by eliminat-
ing nonessential work in the write protocol and by using
read and write quorums of different sizes. Since engineer-
ing a reliable network layer on an unreliable network is dif-
ﬁcult, two other possibilities must be explored. The ﬁrst
is to strengthen the model by allowing synchronous net-
works that use time-outs to identify failed links or machines.
We consider running synchronous and asynchronous Byzan-
tine Quorum protocols over synchronous networks and con-
clude that, surprisingly, ”self-timing” asynchronous Byzan-
tine protocols may offer signiﬁcant advantages for many
synchronous networks when network time-outs are long. We
show how to extend an existing Byzantine Quorum protocol
to eliminate its dependency on reliable networking and to
handle message loss and retransmission explicitly.
1. Introduction
Quorum systems are valuable tools for implementing
highly available distributed shared memory. The principle
behind their use is that if a shared variable is stored at a
set of servers, then read and write operations need only be
performed at some set of servers (a quorum). The inter-
section property of quorums ensures that each read has ac-
cess to the most recently written value of the variable. Any
practical use of quorum systems must account for the pos-
sibility that some of the servers may be faulty; hence, quo-
rum systems must enforce the intersection property even in
the presence of failures. Malkhi and Reiter introduce quo-
rum systems, called masking quorum systems, that guaran-
This work was supported in part by DARPA/SPAWAR grant N66001-
98-8911, the Texas Advanced Technology Program and Tivoli. Alvisi was
also supported by an NSF CAREER award (CCR-9734185) and an Al-
fred P. Sloan Fellowship. Dahlin was also supported by an NSF CAREER
award (CCR-9733842) and an Alfred P. Sloan Fellowship.
tee data availability in the presence of arbitrary (Byzantine)
failures [19]. They also introduce a special class of quorum
systems, dissemination quorum systems, which can be used
by services that support self-verifying data, i.e. data that
cannot be undetectably altered by a faulty server, such as
data that have been digitally signed. To tolerate f Byzan-
tine failures, masking quorum systems must include at least
4f  1 servers, while dissemination quorum systems need
only 3f  1 servers to provide the same guarantee.
In this paper, we present two new quorum systems, one
for generic data and the other for self-verifying data, that
need only 3f  1 servers and 2f  1 servers, respectively,
to tolerate f Byzantine failures. These results apply in the
same system model used by Malkhi and Reiter, i.e. one
in which communication is authenticated and reliable, but
asynchronous.
Our quorums thus use fewer servers to tolerate a given
number of failures than previously possible. Reducing the
required number of servers is particularly important where
Byzantine protocols protect against security breaches of
servers [7, 8, 20]. Note that using Byzantine protocols to
tolerate security breaches is sound only if server failures
are independent, i.e.
if breaking into one server does not
increase the probability of successfully breaking into oth-
ers. Achieving such failure independence may require de-
veloping and maintaining multiple independent implemen-
tations of the server and underlying operating system [26].
Because implementing these multiple variations is expen-
sive, the number of different implementations is, in practice,
limited. It is therefore essential to minimize the number of
servers needed to tolerate a given number of failures.
We call our new quorum systems a-masking and a-
dissemination, where the leading “a” indicates the distin-
guishing characteristic of these quorums, namely, that they
are asymmetric with respect to the operations they support:
reads and writes use quorum of different sizes.
The key insight that allows us to exploit asymmetric quo-
rums is the recognition that assuming reliable communi-
cation has different implications for read and write opera-
tions. Although reads need a response from a read quo-
rum of servers in order to return a reliable value, writes do
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:26:38 UTC from IEEE Xplore.  Restrictions apply. 
not need to be explicitly acknowledged by a corresponding
write quorum: a reliable communication abstraction already
guarantees that every value written by a correct client will
eventually be stored by every correct server in the write quo-
rum, and the writer itself has no use for the knowledge that
the write completed. We call read and write protocols that
exploit this insight Small Byzantine Quorum (SBQ) proto-
cols.
Reliable asynchronous communication is a common
model for Byzantine quorum algorithms [19, 20], and our
protocol aggressively exploits that model’s properties to im-
prove efﬁciency. In an asynchronous system, unfortunately,
if the underlying network is unreliable then the presence
of even crash failures can pose signiﬁcant challenges to
engineering a reliable messaging layer because a message
sender cannot distinguish a crashed receiver from a slow
one. For example, if an asynchronous reliable messaging
layer requires senders to buffer and retransmit unacknowl-
edged messages, a failed receiver can force the system to
consume unbounded amounts of buffer memory.
To understand such practical concerns, we explore the
trade-offs for building Byzantine quorum systems (BQS) as
we vary the properties of the underlying communication in-
frastructure. In this analysis, we consider not just the SBQ
protocols but also existing protocols [4, 19].
We begin by strengthening the reliable and asynchronous
communication model to consider systems that implement
reliable and synchronous communication. Under these as-
sumptions, read and write protocols that tolerate f Byzan-
tine failures require just 2f  1 servers for generic data
(f  1 for self-verifying data) [4]. However, these pro-
tocols are vulnerable to slow reads: even a single faulty
server can delay each read until a timeout occurs. Unfor-
tunately, for some systems of practical interest, the natu-
ral timeout at which network transmission should be aban-
doned is long compared to the desired performance of read
operations. Unexpectedly, our analysis suggests that some
systems that assume a reliable and synchronous networks
may still choose to use an asynchronous BQS protocol such
as SBQ. Such systems may use timeouts in the network-
ing layer to bound network retransmission buffers, but they
may choose an asynchronous BQS protocol to allow reads
to proceed at a rate governed by the speed of the fastest
quorum of servers rather than at a rate governed by commu-
nication timeouts to failed servers. To address these trade-
offs more generally, we develop a new class of synchronous
SBQ protocols, which we call S-SBQ. S-SBQ protocols can
be tuned with respect to two parameters: f, the maximum
number of faulty servers for which the protocol is safe and
live, and  ( (cid:20) f), the maximum number of faulty servers
for which the protocol is free from slow reads. When  = 0,
S-SBQ uses the same number of servers as the synchronous
protocol described in [4], and when  = f, S-SBQ is iden-
tical to the asynchronous SBQ protocol.
We then explore the implications of weakening the as-
sumption of asynchronous reliable communication. We
consider authenticated unreliable asynchronous networks,
in which protocols must explicitly manage both server faults
and network faults, and show that the quorum systems and
protocols introduced by Malkhi and Reiter for reliable asyn-
chronous networks can be easily extended to operate in this
weaker model.
In summary, our analysis results in a series of Byzantine
quorum systems and protocols over a range of system mod-
els, with increasing numbers of servers required to toler-
ate progressively weaker system models. For generic data,
2f  1 servers are needed for synchronous reliable network
systems where timeouts are short, 2f  1 to 3f  1 for
synchronous reliable network systems where timeouts are
long, 3f  1 for asynchronous reliable network systems,
and 4f  1 for asynchronous unreliable network systems.
Self-verifying-data allows systems to be built for each of
these scenarios using f fewer servers.
The rest of this paper is organized as follows: Section 2
presents the system model. Section 3 presents the new a-
masking and a-dissemination quorum systems. Section 4
discusses the design space of BQS protocols under differ-
ent system models. Section 5 puts our results in perspective
with related work and Section 6 summarizes our conclu-
sions.
2. System Model
We assume the system model commonly adopted by pre-
vious works [2, 4, 19, 20, 21] that have applied quorum
systems in the Byzantine failure model. In particular, our
system consists of an arbitrary number of clients and a set
U of data servers such that the number  = jUj of servers
is ﬁxed. A quorum system 	 (cid:18) 2U is a non empty set of
subsets of U, each of which is called a quorum. We de-
note with 	 the set of quorums used by read operations
(read quorums) and with 	w and the set of quorums used
by write operations(write quorums). Any pair of read and
write quorums intersect, and 	 = 	 [ 	w.
Servers can be either correct or faulty. A correct server
follows its speciﬁcation; a faulty server can arbitrarily de-
viate from its speciﬁcation. Following [19], we deﬁne a
fail-prone system B (cid:18) 2U as a nonempty set of subsets of
U, none of which is contained in another, such that some
B 2 B contains all faulty servers. Fail-prone systems can
be used to express the common f-threshold assumption that
up to a threshold f of servers fail (in which case, B contains
all sets of f servers) but they can also describe more general
situations, as when some computers are known to be more
likely to fail than others.
The set of clients of the service is disjoint from U. We re-
strict our attention in this work to server failures; clients are
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:26:38 UTC from IEEE Xplore.  Restrictions apply. 
assumed to be correct. Clients communicate with servers
over point-to-point channels.
In this paper, we consider
Byzantine quorum systems for the following models of
communication:
Reliable Synchronous A correct process  receives a mes-
sage from another correct process  if and only if  sent
it; furthermore,  can determine that  was the sender
of the message. Also, there exists a bound on mes-
sage delivery time that can be used to timeout failed
processes that do not respond to requests [4].
Reliable Asynchronous A correct process  receives a
message from another correct process  if and only if
 sent it; furthermore,  can determine that  was the
sender of the message. However, no bound is assumed
on message transmission times [19].
Authenticated Unreliable Asynchronous If a correct pro-
cess  sends a message inﬁnitely often to another cor-
rect process , then  will eventually receive the mes-
sage and know that it came from ; a correct process 
receives a message only if a correct process  sent the
message; and no bound is assumed on message trans-
mission times.
We explicitly state which model is assumed at each point
of our discussion.
3. Small Byzantine Quorums
Figures 1 and 2 show our Small Byzantine Quorum
(SBQ) protocols for generic and self-verifying data, respec-
tively, under the assumption of reliable asynchronous com-
munication. To write data  to a variable v in either proto-
col, a client ﬁrst queries a read quorum of servers to choose
a timestamp that is larger than the timestamp for any com-
pleted write (steps 1-4) and then sends the data and the new
timestamp to a write quorum of servers (step 5). To read
data, a client queries a read quorum of servers for their most
recent values (steps 1-2) and then chooses and returns the
valid answer with highest timestamp (step 3-4). Each cor-
rect server updates its local variable and timestamp to the
values h; i received by a client only if  is larger than
the timestamp currently associated with .
A noteworthy aspect of the protocol is that unlike op-
erations on read quorums, an operation on a write quorum
does not wait for replies from the servers it contacts. For re-
liable asynchronous communication, the eventual delivery
of all messages sent by a correct client to correct servers is
assured, and the write operation can complete at the client
without gathering information from the servers to which the
write messages have been sent. Note, however, that this
means that a client’s local write operation may return be-
fore the global write completes. In order to deﬁne an order
among reads and writes, we say that a global write operation
completes when all correct servers in some write quorum
have ﬁnished processing the STORE messages sent in step
5 of the write() operation deﬁned in Figures 1 and 2. Fur-
thermore, we say that a write operation w1 happens before
a write operation w2 if w1 ends (according to the above def-
inition) before w2 starts. A disadvantage of this deﬁnition
of write completion is that a client issuing a write may not
know when the write completes. This is not a problem from
a theoretical standpoint, since this knowledge is required by
neither safe semantics (provided by the SBQ protocol for
generic data) nor regular semantics (provided by the SBQ
protocol for self-verifying data) [16]. Furthermore, comple-
tion of write operations is both well deﬁned from the point
of view of an observer external to the system, and timely,
in the sense that completion cannot be delayed by faulty
servers because it only depends on actions taken by correct
processes. Nonetheless, SBQ protocols do carry a price:
they do not support the implicit synchronization that can be
obtained through write operations that block until the write
completes. Fortunately, there are several interesting appli-
cations that do not require this implicit synchronization,
either because they don’t need any synchronization (e.g.,
in networked sensors [14], nodes producing data often do
not need to receive acknowledgments, implicit or explicit,
from consumers) or because they only require end-to-end
explicit acknowledgments in which clients synchronize by
reading values written to various memory locations by other
clients. For instance, two clients can communicate using an