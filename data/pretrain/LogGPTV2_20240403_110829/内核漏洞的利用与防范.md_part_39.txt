Diee
I.Addes
Tet
text:a
Ll
my_oci931
AOLU
ddword D0060.ea
text:0
text:a
text:0
text:a
text:0
text:a
text:
text:8
text:8
text:a
text:a
text:a
text:e
text:8
text:e
X0
品
Cancel
Hep
Search
text:a
text:0
text:a
ine2o2
text:couw15c
us:odru_Uo5c,eax
text:000015c6
nou
eax,[edx+7on]
text:B00015c9
nou
ds:rd_DnD60.
eax
text:0es015cE
nou
[y+xpa]*xea
text:00001501
nOU
ds:du0rd_D0D64,eax
图5.12
被控参数有意思的引用
---
## Page 190
第5章MacOS×181
交叉引用窗口显示了一些令人感兴趣的信息。第二个（高亮显示区域）引用显示出一个调
用把全局变量当成地址使用，这就意味着dword_D060是一个函数指针，是由IOCTL直接设
置的。这就值得查看这个变量发生了什么变化。像往常一样，我们点击Enter键将它在IDA视
图中打开，然后快速浏览跟踪数据流，如图5.13所示，在使用这个变量之前并没有进行检查。
text:0800379C
1oc_379C:
:CODE XREF:Sub_372E+56tj
text:00003790
ppe
ebx.esi
text:0880379E
ebx,ds:dword_EF48
_text:000037A4
rest
eax,edi
text:000037A6
al.a1
text:000037A8
short 10c_37E3
text:080037AA
[esp·38h+uar_30],0
text:000037B2
text:08003789
text:000037C1
call
:s
text:000037c7
xea'[xqa]
text:000037C9
test
eax,eax
text:080037cB
short 1oc_37E3
text:080037CD
[esp·38h+uar_38].affset aCannotcreatePn:“Cannot createp
_text:00003704
call
warning
_text:00083709
nou
[esp·38h+var_38].esi
图5.13反汇编函数指针周围的指令
如果我们向上滚动一点，就可以看到这段代码发生在sub_372E函数处。
接下来，如果点击X键，就可以查看引用这个函数的地方了，我们可以看到，它在3个地
Page_LateStartO的地方，就可以看到调用Page_LateStart函数的地方就在IOCTL函
数指针所在的地方（text:000015FE），如图5.14所示。
ROU
[uat.xbal'xea
text:000015c1
ds:dword_DeD5c,
xea
text:000015c6
eax,[edx+20h]
text:000015c9
mou
ds:dword_D0060,
eax
text:000015CE
mOU
eax,[edx+24h]
text:00B01501
moU
ds:dw0rd_DeD64,
xea
text:00001506
mou
eax,[edx+28h]
text:00001509
mou
ds:dword_D0D68,eax
text:000015DE
eax,word ptr[edx+2ch]
text:000015E2
mou
ds:word_D0D6C,ax
text:000015E8
ROU
ds:byte_EF60,1
text:000015EF
mOUSx
eax,byteptrds:word_DoD6C+1
text:000015F6
moU
[esp+38h+uar_38],eax
text:000015F9
call
DriuerLog_SetDoNotPanic
text:000015FE
call
Page LateStart
text:00001603
al,al
text:00001605
jz
short 1oc_1610
text:00001607
call
_Umx86_Initc0uList
图5.14IOCTL中调用Page_LateStartO的地方
综合来看，这基本意味着我们可以从用户态调用IOCTL，设置函数指针到我们选择的任意
位置，然后调用它：一个漏洞挖掘者的梦想。在可以为这个bug详细描述一个漏洞利用之前，
我们需要知道如何定位到IOCTL的第一个参数，即IOCTL操作的第一个文件描述符。换句话
说，这意味着我们需要知道哪个文件是用来存取这段代码的。
为了完成这个操作，我们可以回到这段二进制代码的Import子视图部分，并且搜索负责安
---
## Page 191
182第二部分UNIX家族、MacOSX和Windows
装devfs设备文件的函数。这个函数称为devfs_make_node（）。一旦找到它，就可以看到在
哪里引用了它。我们在图5.15所示的反汇编块中找到了它。
tet:C1F1011F:
：COExREF:Sub_1BCC+4S1]
text:001C1F
[esp28ur_1].offset ann:
[esp-28u_14],offsetas：s
text:D81C25
[esp*28uar_18],186
_text:081c37
[esp*28huar_1c].1
[esp·28b*var_20].0
_text:01C4
[esp·28h024].
_text:1c
eax,ds:drE99
_text:0001C54
sh]
ez,18h
text:o00c57
Pax,ebx
trxt:0001C59
[esp·28h▪u_23],a
text:b0001csc
call
ds:0oreF6a,ax
nearptr
_text:0001C61
hou
tert：081066
test
fa,eax
text:00001c68
jnz
sbartloc_1c82
text:a1C6A
[esp2Buar_20].ebx
_text:00481C6E
[esp2hur_4],offsetan
[esp_8]，ffsetale：destha
eall
uarainn
图5.15寻找devfs_make_node0的调用者
为什么找到devfs_make_node（的主调函数如此重要？通过代码，我们看到“vmmon”
字符串作为最后一个参数传递给了这个函数。这就是devfs挂载的设备文件的名字，这意味着
我们需要打开的设备在/dev/vmmon目录下。
现在我们拥有了想要的信息，可以开始利用漏洞了。为了触发漏洞，必须按照以下步骤
操作：
1）打开/dev/vmmon文件。
2）创建一个缓冲区，用来存放选择的函数指针。
3）用合适的代码调用ioct1O）函数，然后传送到缓冲区。
4）确认已调用函数指针。
我们已经接近胜利了，但是还没有结束。在我们的漏洞利用上仍然有细微的限制。在
IOCTL代码开始执行时，检查完request值后，跳转发生了，一个全局值被测试为0：
text:00001553
cmpds:byte_EF60，0
text:0000155A
jzshort1oc_1584
跳转地址一定要为我们定位到函数指针处，为了完成这个，需要弄清楚byte_EF60全局
变量的用处。
再一次，我们可以看看它是如何在二进制文件里面引用的。图5.16显示了结果。
列表中最感兴趣的交叉引用已高亮显示。这是唯一一种情况，在这里全局变量的值更新
为1，这意味着如果在利用这个bug之前执行这段代码，将没有办法触发它。选择这一项，
按Enter键，可以看到（如图5.17）在函数指针被调用之前（_text：000015FE）这个指令在
IOCTL的最后执行（_text：000015E8）。
这意味着IOCTL可以以这种方式调用一次。然后，在设置函数指针后，代码路径不能再
调用了。从这个可以推测出，如果VMware已经开始在尝试利用的机器上运行了，这些函数指
针已经被设置了，利用将变得不再可能。
---
## Page 192