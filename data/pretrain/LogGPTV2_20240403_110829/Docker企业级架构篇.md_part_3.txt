1.5 用Web UI运行容器
现在来通过图形界面来运行第一个容器。通过简单地几下鼠标点击即可为完成一个容器
的运行动作。
1.）点击 Add Container按钮增加新的容器。
1.）输入 first_container 作为容器的名称。
2.） 使用默认的Ubuntu14镜像。
3.） 点击 create 创建按钮。
1.） 经过大约几秒钟，出现了两个运行的容器，firs_container为本测试创建的容器，下面
的那个Network Agent容器的作用是用户主机之间的网络通信。
2.） 上图可以看出主机间会使用Rancher 服务器所管理的10.42.0.0 内网通信。
1.） 在新建的Ubuntu容器的菜单上点击向下按钮。
2.）选择在Web页面中运行 Shell 选项 。
1.） 经过几秒钟的链接，网页上出现了Ubuntu容器的root命令行提示符，运行第一个命
令 uname –a。
2.） 运行第二个命令行ifconfig。
到此为止你已经成功创建了新的容器，在命令行里面，如果你是 developer 的话，你已经
可以开工了，或是部署测试代码，或者打造应用服务的image。
1.6 用命令行运行容器
如果您偏爱CLI命令行，可以在host上执行容器的创建和管理动作，如下所示：
#下面命令为运行一个新的名为 second_container 的 Ubuntu14.04.2 容器，并在容器运
行之后，直接进入该容器的命令行
[ec2-user@ip-172-31-21-99 ~]$ docker run -it --name=second_container
ubuntu:14.04.2
Unable to find image 'ubuntu:14.04.2' locally
14.04.2: Pulling from library/ubuntu
Digest:
sha256:a1cec70421f71f00c8bdb0adf0226dc548ff5ba9699cbd5fa09acdb68df82a02
Status: Downloaded newer image for ubuntu:14.04.2
root@be607f589023:/#
#这里是第二个容器的命令行，下面执行id命令
root@be607f589023:/# id
uid=0(root) gid=0(root) groups=0(root)
#在该容器里做网络测试
root@be607f589023:/# ping rancher.com
PING rancher.com (104.24.18.49) 56(84) bytes of data.
64 bytes from 104.24.18.49: icmp_seq=1 ttl=59 time=1.75 ms
64 bytes from 104.24.18.49: icmp_seq=2 ttl=59 time=1.97 ms
^C
--- rancher.com ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 1.758/1.866/1.975/0.116 ms
#退出该容器命令行
root@be607f589023:/# exit
exit
#在host执行docker容器运行状态查看命令
[ec2-user@ip-172-31-21-99 ~]$ sudo docker ps
CONTAINER ID IMAGE COMMAND
CREATED STATUS PORTS
NAMES
074b22a00a7c ubuntu:14.04.3 "/bin/bash"
15 minutes ago Up 15 minutes
37695985-73e7-4e54-be90-870c86d4cef3
9132d138e896 rancher/agent-instance:v0.6.0 "/etc/init.d/agent-in" 15
minutes ago Up 15 minutes 0.0.0.0:500->500/udp,
0.0.0.0:4500->4500/udp ce65d23e-2f55-4497-9ffe-38ae1bcedf9f
6ab206a64a68 rancher/agent:v0.8.2 "/run.sh run"
39 minutes ago Up 39 minutes
rancher-agent
988003c02bcd rancher/server "/usr/bin/s6-svscan /"
About an hour ago Up About an hour 0.0.0.0:8080->8080/tcp, 3306/tcp
boring_bhaskara
[ec2-user@ip-172-31-21-99 ~]$
以上测试结束后，可以在Web UI中查看该容器的状态，可以看到它已经处于stop的
状态，它所使用网络地址与Rancher服务器容器同一个网段，这是默认执行docker run命
令的默认结果；还可以在命令行制定使用 Rancher 服务器所管理的叠加的内部私有网络，
命令行如下：
#注意一下docker run命令使用了 --label io.rancher.container.network=true 参数
[ec2-user@ip-172-31-21-99 ~]$ docker run -it --label
io.rancher.container.network=true ubuntu:14.04.2
#进入新容器的命令行之后查看网络地址
root@a12455b64a7b:/# ifconfig
eth0 Link encap:Ethernet HWaddr 02:42:ac:11:00:05
inet addr:172.17.0.5 Bcast:0.0.0.0 Mask:255.255.0.0
inet6 addr: fe80::42:acff:fe11:5/64 Scope:Link
UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1
RX packets:5 errors:0 dropped:0 overruns:0 frame:0
TX packets:6 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:0
RX bytes:438 (438.0 B) TX bytes:508 (508.0 B)
lo Link encap:Local Loopback
inet addr:127.0.0.1 Mask:255.0.0.0
inet6 addr: ::1/128 Scope:Host
UP LOOPBACK RUNNING MTU:65536 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:0
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
root@a12455b64a7b:/# ping rancher.com
PING rancher.com (104.24.18.49) 56(84) bytes of data.
64 bytes from 104.24.18.49: icmp_seq=1 ttl=59 time=1.75 ms
64 bytes from 104.24.18.49: icmp_seq=2 ttl=59 time=1.95 ms
在不退出以上容器命令行的情况下，进入Web UI查看此容器的状态。
最下面一个是使用了内部叠加网的容器，它的 Ip 地址从 Web UI 中看和第一个
first_container的IP为同一个网段。
至此搞清楚了多个容器的运行和基本的网络概念之后，下面可以做更为复杂的测试。
1.7 用Web UI完成多层应用架构的部署
本测试需要完成WordPress应用的多层部署，期望的部署模式如下：
1.） 前端负载均衡服务，一个LB用来接入来自互联网的流量。
2.） WordPress应用层，有两个运行WordPress软件的容器组成。
3.） 数据库服务层，有一个MySQL服务器容器。
具体的操作步骤如下所示：
在登录后的首页，点击 Add Service 按钮开始创建整个堆栈。
1.） 选择 Add Service 增加 数据库服务，输入名称 database。
2.） 选择使用mysql 镜像。
3.） 点击高级选项卡。
4.） 点击添加环境变量。
5.） 数据环境变量的内容，mysql 数据库的root 密码为 pass1。
6.） 点击创建此服务。
1.）创建后的服务默认为非活动状态，点击 Start 按钮，启动数据库服务。
1.）启动之后的mysql数据库服务状态正常，点击上面的 Add Service 按钮添加服务。
1.）拖动圆点，使本层服务的容器数量为2。
2.） 输入名称为 mywordpress。
3.） 输入所需要使用的Wordpress镜像。
4.） 选择它所依赖的数据库服务。
5.） 输入名称 mysql。
6.）点击创建按钮。
1.） 点击菜单中的运行按钮，启动新建容器。
2.） 观察容器的数量为2。
3.） 观察容器所使用的镜像名称，点击 Add Service 下拉菜单，选择创建负载均衡器。
1.） 使用默认1为LB的数量。
2.） 输入LB的名称。
3.） 输入在Host上LB对外服务的端口为8088。
4.） 输入Wordpress容器的服务端口 80。
5.）选择对象服务，为myWordpress。
6.） 点击 Save创建此容器和相关配置。
1.） 运行创建好的LB容器，点击该容器，查看它的状态，点击Ports 选项卡。
2.） 点击 Host IP，浏览器就会连接到 http://your_host_ip:port 打开负载均衡的服务网
址。
如上图所示 wordPress 的安装页面正常打开，可以继续完成 WordPress 的安装和配
置。至此您已经顺利完成了多层应用的部署和搭建。
本篇参考了Rancher官方文档：http://docs.rancher.com/rancher/quick-start-guide/
但是不包含docker-compse命令行工具 + yml 配置文件的创建方式，建议可以参考该文
档完成完整的测试。
本测试把Rancher的基础用法做了一个初级的尝试，希望对新手有所帮助。
2. 基于Docker的构建流程 - 持续集成及测试
之前我们发布过一篇这个系列的文章，它包括了代码构建，测试，打包，持续集成及部
署，以及在生产环境中管理应用stack等。我们应该明确的是，一个好的构建系统需要达到
如下要求：
1.）可重复性——能在不同的开发机器和自动构建服务器中，生成/创建有一致依赖关系的