### 1.5 使用Web UI运行容器

现在，我们将通过图形界面来启动第一个容器。只需几次鼠标点击，即可完成容器的创建和运行。

1. **点击 "Add Container" 按钮** 以增加一个新的容器。
2. **输入 `first_container` 作为容器名称**。
3. **使用默认的 Ubuntu 14 镜像**。
4. **点击 "Create" 按钮** 以创建容器。

大约几秒钟后，您将看到两个正在运行的容器：
- `first_container` 是您刚刚创建的测试容器。
- `Network Agent` 容器用于主机之间的网络通信。从上图中可以看出，主机间使用 Rancher 服务器管理的 `10.42.0.0` 内网进行通信。

接下来，在新创建的 Ubuntu 容器菜单中执行以下步骤：
1. **点击向下箭头按钮**。
2. **选择 "在Web页面中运行 Shell" 选项**。

经过几秒钟的连接后，网页上会出现 Ubuntu 容器的 root 命令行提示符。您可以运行以下命令：
1. **运行 `uname -a` 命令**。
2. **运行 `ifconfig` 命令**。

至此，您已经成功创建了一个新的容器。如果您是开发者，现在可以在命令行中开始工作，部署测试代码或构建应用服务镜像。

### 1.6 使用命令行运行容器

如果您更喜欢使用 CLI 命令行，可以在主机上执行容器的创建和管理操作。以下是示例：

```bash
# 运行一个新的名为 second_container 的 Ubuntu 14.04.2 容器，并直接进入该容器的命令行
[ec2-user@ip-172-31-21-99 ~]$ docker run -it --name=second_container ubuntu:14.04.2
Unable to find image 'ubuntu:14.04.2' locally
14.04.2: Pulling from library/ubuntu
Digest: sha256:a1cec70421f71f00c8bdb0adf0226dc548ff5ba9699cbd5fa09acdb68df82a02
Status: Downloaded newer image for ubuntu:14.04.2
root@be607f589023:/#
```

在第二个容器的命令行中，您可以执行以下命令：
```bash
root@be607f589023:/# id
uid=0(root) gid=0(root) groups=0(root)
root@be607f589023:/# ping rancher.com
PING rancher.com (104.24.18.49) 56(84) bytes of data.
64 bytes from 104.24.18.49: icmp_seq=1 ttl=59 time=1.75 ms
64 bytes from 104.24.18.49: icmp_seq=2 ttl=59 time=1.97 ms
^C
--- rancher.com ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 1.758/1.866/1.975/0.116 ms
root@be607f589023:/# exit
exit
```

在主机上查看 Docker 容器的运行状态：
```bash
[ec2-user@ip-172-31-21-99 ~]$ sudo docker ps
CONTAINER ID   IMAGE                     COMMAND                  CREATED         STATUS         PORTS                    NAMES
074b22a00a7c   ubuntu:14.04.3            "/bin/bash"              15 minutes ago  Up 15 minutes  37695985-73e7-4e54-be90-870c86d4cef3
9132d138e896   rancher/agent-instance:v0.6.0  "/etc/init.d/agent-in"  15 minutes ago  Up 15 minutes  0.0.0.0:500->500/udp, 0.0.0.0:4500->4500/udp  ce65d23e-2f55-4497-9ffe-38ae1bcedf9f
6ab206a64a68   rancher/agent:v0.8.2      "/run.sh run"            39 minutes ago  Up 39 minutes  rancher-agent
988003c02bcd   rancher/server            "/usr/bin/s6-svscan /"   About an hour ago  Up About an hour  0.0.0.0:8080->8080/tcp, 3306/tcp  boring_bhaskara
[ec2-user@ip-172-31-21-99 ~]$
```

测试结束后，您可以在 Web UI 中查看该容器的状态。可以看到它已处于停止状态，并且所使用的网络地址与 Rancher 服务器容器在同一网段。这是默认执行 `docker run` 命令的结果。您还可以在命令行中指定使用 Rancher 服务器管理的叠加内部私有网络，如下所示：

```bash
# 注意，以下 `docker run` 命令使用了 `--label io.rancher.container.network=true` 参数
[ec2-user@ip-172-31-21-99 ~]$ docker run -it --label io.rancher.container.network=true ubuntu:14.04.2
root@a12455b64a7b:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:05
          inet addr:172.17.0.5  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:5/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
          RX packets:5 errors:0 dropped:0 overruns:0 frame:0
          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0
          RX bytes:438 (438.0 B)  TX bytes:508 (508.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
root@a12455b64a7b:/# ping rancher.com
PING rancher.com (104.24.18.49) 56(84) bytes of data.
64 bytes from 104.24.18.49: icmp_seq=1 ttl=59 time=1.75 ms
64 bytes from 104.24.18.49: icmp_seq=2 ttl=59 time=1.95 ms
```

在不退出以上容器命令行的情况下，进入 Web UI 查看此容器的状态。最下面一个是使用内部叠加网络的容器，其 IP 地址与 `first_container` 的 IP 地址在同一网段。

至此，您已经了解了多个容器的运行和基本网络概念。接下来可以进行更复杂的测试。

### 1.7 使用 Web UI 完成多层应用架构的部署

本测试将完成 WordPress 应用的多层部署，期望的部署模式如下：
1. **前端负载均衡服务**：一个负载均衡器（LB）用于接入来自互联网的流量。
2. **WordPress 应用层**：由两个运行 WordPress 软件的容器组成。
3. **数据库服务层**：一个 MySQL 服务器容器。

具体的操作步骤如下：

1. 在登录后的首页，点击 "Add Service" 按钮开始创建整个堆栈。
2. **选择 "Add Service" 增加数据库服务**，输入名称 `database`。
3. **选择使用 MySQL 镜像**。
4. **点击高级选项卡**。
5. **点击添加环境变量**。
6. **设置环境变量内容**，MySQL 数据库的 root 密码为 `pass1`。
7. **点击创建此服务**。

创建后的服务默认为非活动状态，点击 "Start" 按钮启动数据库服务。

1. 启动后的 MySQL 数据库服务状态正常，再次点击 "Add Service" 按钮添加服务。
2. **拖动圆点，使本层服务的容器数量为 2**。
3. **输入名称 `mywordpress`**。
4. **输入所需使用的 WordPress 镜像**。
5. **选择它所依赖的数据库服务**。
6. **输入名称 `mysql`**。
7. **点击创建按钮**。

1. 点击菜单中的 "运行" 按钮，启动新建容器。
2. 观察容器的数量为 2。
3. 观察容器所使用的镜像名称，点击 "Add Service" 下拉菜单，选择创建负载均衡器。
4. **使用默认 1 个 LB**。
5. **输入 LB 的名称**。
6. **输入在 Host 上 LB 对外服务的端口为 8088**。
7. **输入 WordPress 容器的服务端口 80**。
8. **选择目标服务为 `myWordpress`**。
9. **点击 "Save" 创建此容器和相关配置**。

1. 运行创建好的 LB 容器，点击该容器，查看它的状态，点击 "Ports" 选项卡。
2. 点击 "Host IP"，浏览器会连接到 `http://your_host_ip:port` 打开负载均衡的服务网址。

如上图所示，WordPress 的安装页面正常打开，可以继续完成 WordPress 的安装和配置。至此，您已经顺利完成了多层应用的部署和搭建。

本篇参考了 Rancher 官方文档：[Rancher Quick Start Guide](http://docs.rancher.com/rancher/quick-start-guide/)。但未包含使用 `docker-compose` 命令行工具 + `yml` 配置文件的创建方式，建议参考该文档完成完整的测试。

本测试对 Rancher 的基础用法进行了初步尝试，希望对新手有所帮助。

### 2. 基于 Docker 的构建流程 - 持续集成及测试

之前我们发布过一篇关于这个系列的文章，涵盖了代码构建、测试、打包、持续集成及部署，以及在生产环境中管理应用堆栈等内容。一个好的构建系统应满足以下要求：
1. **可重复性**：能在不同的开发机器和自动构建服务器中生成一致的依赖关系。
2. **自动化**：能够自动化执行构建、测试和部署过程。
3. **可靠性**：确保每次构建都是一致的，并能快速发现和修复问题。
4. **灵活性**：支持多种构建和部署策略，适应不同项目需求。

通过这些步骤，您可以实现高效的持续集成和持续交付流程，提高开发效率和软件质量。