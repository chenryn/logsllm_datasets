## Page 59
到有向图，需要知道节点的前驱节点，如果路径压缩了，这一题就没法做了。这一题不需要路径压
缩和秩优化。
灵活的抽象题目给的信息，将给定的信息合理的编号，使用并查集解题，并用map降低时间复杂
度，如第721题，第959题。
关于地图，砖块，网格的题目，可以新建一个特殊节点，将四周边缘的砖块或者网格都union到
这个特殊节点上。第130题，第803题。
·能用并查集的题目，一般也可以用DFS和BFS解答，只不过时间复杂度会高一点。
Title
Solution
Difficulty
Time
Space
收
藏
128. Longest Consecutive
Go
Hard
(u)o
O(n)
 Sequence
130. Surrounded Regions
GQ
Medium
(uw)o
(uw)o
200. Number of Islands
Go
Medium
(uw)o
O(m*n)
399. Evaluate Division
Go
Medium
(u)o
(u)o
547. Friend Circles
GQ
Medium
O(n^2)
(u)o
684. Redundant Connection
GQ
 Medium
O(n)
O(n)
685. Redundant Connection II
Go
Hard
O(n)
(u)o
721. Accounts Merge
Go
 Medium
O(n)
O(n)
765. Couples Holding Hands
Go
pJeH
(u)o
(u)o
778. Swim in Rising Water
Go
Hard
O(n^2)
(u)o
803. Bricks Falling When Hit
Go
Hard
O(n^2)
(u)o
839. Similar String Groups
GQ
pJeH
O(n^2)
(u)o
924. Minimize Malware Spread
GQ
Hard
(uw)o
O(n)
928. Minimize Malware Spread II
GQ
pJeH
O(m*n)
(u)o
947. Most Stones Removed with
 Same Row or Column
Go
 Medium
(u)o
(u)o
952. Largest Component Size by
GQ
Hard
O(n)
Common Factor
(u)o
959. Regions Cut By Slashes
GQ
 Medium
O(n^2)
O(n^2)
990. Satisfiability of Equality
Go
 Medium
(u)o
(u)o
Equations
---
## Page 60
第三章一些模板
这一章会罗列一些整理好的模板。一起来看看吧。
线段树SegmentTree
package template
// SegmentTree define
type SegmentTree struct{
data, tree, lazy []int
left, right
int
merge
func(i， j int) int
// Init define
func (st *SegmentTree) Init(nums []int， oper func(i，j int) int) {
st.merge = oper
data, tree, lazy := make([]int, len(nums)), make([]int, 4*1en(nums)),
make([]int, 4*1en(nums))
for i := 0;i0{
St.buildSegmentTree(0, 0,len(nums) -1)
---
## Page 61
//在treeIndex的位置创建[left....right]区间的线段树
func (st *SegmentTree) buildSegmentTree(treeIndex, left, right int) {
if left == right {
St.tree[treeIndex] = st.data[left]
return
midTreeIndex, 1eftTreeIndex, rightTreeIndex := left+(right-left)>>l,
st.1eftchild(treeIndex)， st.rightchi1d(treeIndex)
St.buildSegmentTree(leftTreeIndex, 1eft, midTreeIndex)
st.buildSegmentTree(rightTreeIndex, midTreeIndex+l, right)
st.tree[treeIndex] = st.merge(st.tree[leftTreeIndex],
st.tree[rightTreeIndex]]
func (st *SegmentTree) 1eftchild(index int) int {
return 2*index + 1
func (st *SegmentTree) rightchild(index int) int {
return 2*index + 2
//查询[left....right]区间内的值
// Query define
func (st *SegmentTree) Query(left, right int) int {
if len(st.data)> 0 {
return st.queryInTree(0, 0, len(st.data)-1, 1eft, right)
return 0
//在以treeIndex为根的线段树中[1eft...right]的范围里，搜索区间
[queryLeft..-queryRight]的值
func (st *SegmentTree) queryInTree(treeIndex, left, right， queryLeft,
queryRight int)int{
if left == queryLeft && right == queryRight {
return st.tree[treeIndex]
midTreeIndex, 1eftTreeIndex, rightTreeIndex := left+(right-left)>>l,
st.1eftchild(treeIndex)， st.rightchi1d(treeIndex)
if queryLeft > midTreeIndex {
return st.queryInTree(rightTreeIndex, midTreeIndex+l, right, queryLeft,
queryRight)
3 else if queryRight  0{
return st.queryLazyInTree(0, 0, 1en(st.data)-1, 1eft, right)
return 0
func (st *SegmentTree) queryLazyInTree(treeIndex, left, right, queryLeft,
queryRight int) int{
midTreeIndex, 1eftTreeIndex, rightTreeIndex := 1eft+(right-1eft)>>1,
st.1eftchild(treeIndex)，st.rightchild(treeIndex)
if left > queryRight 1l right= right { // segment completely inside
range
return st.tree[treeIndex]
if queryLeft > midTreeIndex {
---
## Page 63
return st.queryLazyInTree(rightTreeIndex, midTreeIndex+l, right,
queryLeft, queryRight)
} else if queryRight  0 {
st.updateInTree(0, 0, 1en(st.data)-1, index, val)
//以treeIndex为根，更新index位置上的值为val
func (st *SegmentTree) updateInTree(treeIndex, left, right, index, val int) {
if 1eft == right {
st.tree[treeIndex] = va]
return
midTreeIndex, 1eftTreeIndex, rightTreeIndex := left+(right-left)>>1,
st.1eftchild(treeIndex), St.rightchild(treeIndex)
if index > midTreeIndex {
St.updateInTree(rightTreeIndex, midTreeIndex+l, right, index, va1)
}else{
st.updateInTree(leftTreeIndex, 1eft, midTreeIndex, index, val)
st.tree[treeIndex] = st.merge(st.tree[leftTreeIndex],
st.tree[rightTreeIndex]]
}
//更新[updateLeft....updateRight]位置的值
//注意这里的更新值是在原来值的基础上增加或者减少，而不是把这个区间内的值都赋值为x，区间更新
和单点更新不同
//这里的区间更新关注的是变化，单点更新关注的是定值
//当然区间更新也可以都更新成定值，如果只区间更新成定值，那么1azy更新策路需要变化，merge
策略也需要变化，这里暂不详细讨论
// updateLazy define
func (st *SegmentTree) updateLazy(updateLeft,updateRight, val int){
if len(st.data)> 0 {
---
## Page 64
St.updateLazyInTree(O, 0, len(st.data)-1, updateLeft, updateRight, val)
func (st *SegmentTree) updateLazyInTree(treeIndex, left, right, updateLeft,
updateRight,val int){
midTreeIndex, 1eftTreeIndex, rightTreeIndex := 1eft+(right-1eft)>>1,
st.1eftchild(treeIndex)， st.rightchi1d(treeIndex)
if st.lazy[treeIndex] != 0 { // this node is lazy
for i := 0; i  right 11 1eft > updateRight 11 right >1,
st.1eftchild(treeIndex), St.rightchi1d(treeIndex)
st.buildSegmentTree(leftTreeIndex, left, midTreeIndex)
st.buildSegmentTree(rightTreeIndex, midTreeIndex+l, right)
st.tree[treeIndex] = st.merge(st.tree[leftTreeIndex],
st.tree[rightTreeIndex]]
func （st *SegmentCountTree) 1eftchild(index int) int {
return 2*index + 1
(x 
return 2*index +2
}
//查询[left....right]区间内的值
// Query define
func （st *SegmentCountTree)Query(left，right int) int {
if len(st.data)> 0{
---
## Page 66
return st.queryInTree(0, 0, 1en(st.data)-1, 1eft, right)
F
return 0
//在以treeIndex为根的线段树中[1eft...right]的范围里，搜索区间
[queryLeft...queryRight]的值，值是计数值
func (st *SegmentCountTree) queryInTree(treeIndex, left, right, queryLeft,
queryRightint)int{
if queryRight  st.data[right]{
return 0
3
if queryLeft = st.data[right] 11 left ==
right{
return st.tree[treeIndex]
midTreeIndex, leftTreeIndex, rightTreeIndex := 1eft+(right-1eft)>>1,
st.1eftchild(treeIndex)， st.rightchi1d(treeIndex)
return st.queryInTree(rightTreeIndex, midTreeIndex+l, right, queryLeft,
queryRight)+
st.queryInTree(leftTreeIndex, 1eft, midTreeIndex, queryLeft, queryRight)
//更新计数
//UpdateCount define
func (st *SegmentCountTree) UpdateCount(val int){
if len(st.data) > 0 {
st.updateCountInTree(0, 0, 1en(st.data)-1, va1)
//以treeIndex为根，更新[left...right]区间内的计数
func (st *SegmentCountTree) updateCountInTree(treeIndex,left，right， val int)
if val >= st.data[left] && val >1,
st.1eftchild(treeIndex)，st.rightchi1d(treeIndex)
st.updateCountInTree(rightTreeIndex, midTreeIndex+l, right, va1)
st.updateCountInTree(leftTreeIndex, 1eft, midTreeIndex, val)
---
## Page 67
并查集UnionFind
package template
// unionFind defind
//路径压缩+秩优化
type UnionFind struct {
parent, rank []int
count
int
// Init define