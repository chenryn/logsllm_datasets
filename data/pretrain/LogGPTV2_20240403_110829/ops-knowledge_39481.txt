### Situation Overview

A friend's xt:Commerce-based online shop was recently hacked. The attacker demonstrated the vulnerability by extracting and cracking the database, which contained unsalted MD5 hashes. The attacker demanded a ransom in Bitcoin. A security company was hired to perform a web application scan using Accunetix, but the results were largely false positives and not very useful. A second scan identified several SQL injection (SQLi) vulnerabilities, cross-site scripting (XSS) issues, and outdated versions of Apache, PHP, and MySQL. These vulnerabilities have been patched, and the users have been notified to change their passwords. However, the hacker managed to place a fake order, indicating that the system is still compromised.

### Current Actions Taken

1. **Vulnerability Scanning and Patching:**
   - Identified and patched 4-5 SQL injection vulnerabilities.
   - Identified and addressed some XSS vulnerabilities.
   - Updated Apache, PHP, and MySQL to the latest versions.
   - Verified the patches by attempting to exploit the previously identified SQLi vulnerabilities.

2. **User Notification:**
   - Informed users about the breach and requested them to change their passwords.

3. **Investigation:**
   - Inspected Apache logs for any suspicious activity around the time the fake order was placed.
   - Searched for potential PHP or web shells on the server.
   - Considered enabling MySQL logging but decided against it due to memory concerns.

### Recommendations for Further Action

1. **Immediate Security Measures:**
   - **Change All Passwords:**
     - Change all administrative, FTP, SSH, and MySQL passwords immediately.
   - **Take the Site Offline:**
     - Move all website files to an inaccessible folder and put up a "Under Maintenance" page. This will prevent further exploitation and give you time to clean up the site.

2. **Reinstallation and Configuration:**
   - **Reinstall xt:Commerce:**
     - Reinstall xt:Commerce from scratch. Do not copy any files from the old installation; treat them as potentially infected.
   - **Patch Password Storage:**
     - Ensure the new installation uses a secure password storage mechanism with salting. Salting is essential for protecting passwords against rainbow table attacks.

3. **Database Inspection:**
   - **Full Database Dump:**
     - Take a full dump of the database and inspect it for any signs of tampering or unusual entries. Look for keywords like `eval`, `replace`, `decode`, `exec`, or `system` which might indicate malicious code.
   - **Account Review:**
     - Check for any newly created accounts or accounts with elevated privileges that should not exist.

4. **Log Analysis:**
   - **Enable Detailed Logging:**
     - Enable detailed logging in Apache, including POST data and cookies. Add the `%{Set-Cookie}o` directive to log cookies and ensure that POST data is logged.
   - **Analyze Logs:**
     - Analyze the logs for any suspicious activity, especially around the time the fake order was placed. Look for unusual access patterns, unexpected POST requests, or other indicators of compromise.

5. **Ongoing Monitoring and Hardening:**
   - **Regular Updates:**
     - Ensure that all software, including xt:Commerce, Apache, PHP, and MySQL, are regularly updated to the latest versions.
   - **Security Audits:**
     - Conduct regular security audits and vulnerability scans to identify and address any new or existing vulnerabilities.
   - **Monitoring:**
     - Implement continuous monitoring of the server and application logs for any signs of unauthorized access or suspicious activity.

### Summary

The current situation suggests that the site is still compromised despite the initial patches. To fully secure the site, it is recommended to take the site offline, change all passwords, reinstall xt:Commerce, and thoroughly inspect the database and logs. Additionally, implement more robust logging and monitoring to detect and prevent future attacks.