User: 请解答这个和日志有关的问题Online Shop got hacked, fixed but is still under attack - what to do? an xt-commerce-based online shop from a friend of mine got hacked recently. The attacker mailed that the shop is vulnerable, he showed the extracted data (basically he dumped the databases and cracked the md5 hashes, which were not salted) and asked for some bitcoins.

My friend engaged a security company, which performed a (rather bad) webapp scan using accunetix web scanner. The output was almost unreadable as it contained almost 98% false positives (spread over some 40-50 pdf pages). So he asked me to perform a second scan and I found 4-5 SQL injections and some XSS, an outdated version of Apache as well as PHP and MySQL. The SQL injections were patched and I verified the patches, as I couldnt perform any SQLi anymore. 

Now, the users of the shop were informed about the breach and were asked to change their password. However, some hours ago, the hacker managed to place a fake order in xt-commerce.

I wonder what the owners of the shop could do now?


The did not enable MySQL logging as this would fill memory quickly.
I asked them to inspect the Apache logs to see what happened during the point of time were the fake order was placed.
I asked them to look for PHP/Web-Shells, which might have been placed on the webserver.
I wonder if it is possible to somehow scan the contents of the database for abnormalities?
Of course there is the possibility of still having security holes in the web app.
If the attacker chose to exploit the webserver, php-daemon or the mysql server, we would have a hard time to trace this back, right? Should we thus turn on filesystem logging?


Could you suggest me what further steps to take or maybe just tell me your gut feeling about this situation?

Assistant: I would do a few more things to clean up the site:


Change every password

Yes, before you do anything, change all admin passwords, ftp, ssh, MySQL and so.
Move all website's files to an inaccessible folder

Take the site offline and put a Under Maintenance sign to give you time to fix everything. This will disable any changed file from the attacker. Shells will be unusable too.
Reinstall xt-commerce from scratch

Patching the current xt-commerce is not enough. There are plenty of places to put a backdoor, and it's easy to bypass one even with very careful examination. If there's custom themes or plugins installed, reinstall from scratch. Try don't copy any of the resources from the old site, treat them as infected. Don't try to fix any infection, create from scratch.
Patch the new xt-commerce to use a better password storage

If the default password storage from xt-commerce does not implement salting, something is very wrong. Salting is required for every password management since the launch of Intel Pentium MMX. Or even earlier.
Take a full database dump and inspect it for signs of abnormalities

Any sign of eval, replace, decode, exec or system will be suspicious. Take a close look on those entries.
See if there's any strange account created

With the database dump in hand, see if any account have more privileges than it should have. Maybe the attacker created a disguised admin account.
Inspect the log files

This will show you how the attacker gained access to the site. As some PHP shells can use POST, custom headers and cookies to send and receive data, the default Apache log configuration can not show everything. Add the %{Set-Cookie}o directive to the configuration to log cookies, and log POST data too.