Controller
Controller
Controller
-
Table 2: LBNL - BACS device list
Vendor
Automated Logic
Automated Logic
Automated Logic
Automated Logic
Automated Logic
Johnson
Johnson
Paragon Controls Inc.
Sierra
Sierra
Tracer
Niagara
Unknown
Model
LGR
ME
SE
ZN
WebCTRL
NAE
NIE
EQ
BTU Meter
FFP
UC400
AX Station
Unknown
Role
Router/Gateway
Controller
Controller
Controller
HMI
Controller
Controller
Controller
Energy meter
Controller
Controller
SCADA server
-
extensible. Every object of a BACS has a set of stan-
dard and proprietary properties that form a “ﬁngerprint”
of that object and device. The third technique assumes
that two objects sharing the same ﬁngerprint are likely to
be of the same kind. During System Discovery, it is pos-
sible to create a database of identiﬁed ﬁngerprints each
one pointing to the corresponding BACS (identiﬁed with
the previous two techniques). Whenever an unknown ob-
ject presents a property set already in the database, the
system infers the most likely related device.
Experiments Previous work by us shows that tradi-
tional ﬁngerprinting techniques are usually ineffective on
most NCSs [5]. In our tests, tools such as Nmap [38] and
P0f [64] were able to identify just a limited number of
Windows and Linux workstations. The techniques pre-
sented above proved more effective. Thanks to frequent
ReadPropertyMultiple, our system was able to gather
information on most BACSs. Moreover, BACnet address
linking and BACnet property set ﬁngerprinting allowed
the system to link most of the observed BACnet objects
to identiﬁed devices. At the end of System Discovery,
we gathered information on ∼15k BACnet objects be-
longing to the 445 devices shown in Tables 1 and 2.
Thanks to the information from the operators, we
Figure 4: “BACnet Device Object analysis” example
(a) I-Am message
(b) ReadProperty message
Figure 5: “BACnet Address linking” example
BACnet Address allows us to link the two parameters
(Figure 5a). Any later message then carrying the BACnet
address along with a further object (e.g., “Analog Value
171”) enables linking to the corresponding device (Fig-
ure 5b). This technique works well because I-Am mes-
sages pass the network frequently to ensure visibility of
all BACnet objects.3
Finally,
if no information can be extracted from
Device objects or BACnet addresses, System Discov-
ery can beneﬁt from observations of the BACnet prop-
erties. As discussed in §3.1, the BACnet property set is
3The technique can also directly use messages carrying Device ob-
ject information if the source BACnet address is present in the header.
However, for this kind of messages, having the BACnet Address ﬁelds
is not mandatory.
USENIX Association  
25th USENIX Security Symposium  797
7
know that we correctly identiﬁed 98.2% of the BACSs
actually deployed (445 out of 453 devices). Eight devices
did not link to any useful BACnet message or identiﬁ-
able property set. However, these devices convey almost
no information over the network (a few hundreds BAC-
net messages over two months of capturing compared to
an average of tens of thousands) and did not involve any
notable equipment. Identifying the aforementioned 445
devices took just a few hours of monitoring.
6 Feature Lookup
Searching for documentation on identiﬁed BACSs is pos-
sible because the two assumptions of availability and
linkability hold for BACnet-based building automation
systems. Veriﬁed information about BACSs is avail-
able within PICSs and EDE ﬁles. This information in-
cludes BACSs’ vendors, models and even refers to spe-
ciﬁc BACnet objects, thus is linkable to what we ob-
served over System Discovery.
Feature Lookup targets both online and ofﬂine doc-
umentation. On the one hand, we use Google APIs to
search and retrieve publicly available documents such as
PICSs on the Internet. On the other hand, we retrieve
EDE ﬁles from private repositories in the installations.
Both cases allow for document authenticity. In the for-
mer case, we narrow the search to a subset of reliable
sources such as vendors’ websites and reputable third
parties (e.g., BACnet International Laboratories4). In the
latter case, we assume a secure connection to a trusted
dataset managed by the operators.
Once a BACS links to one or more of these documents,
our system parses the documents looking for useful in-
formation. According to BACnet speciﬁcations, a PICS
has a standard template and we observe that most PICSs
are closely modeled to it. Figure 6 shows three extracts
from the PICS of the “Blue ID S10 Controller” men-
tioned in the previous section.
As outlined in §3.1, each PICS provides a description
of the related BACS and the BIBBs it implements (Fig-
ure 6a). Moreover, PICSs include information about sup-
ported BACnet objects and properties, as well as their
characteristics (Figures 6b and 6c).
EDE ﬁles also follow a standard template but they
use a simpler “comma-separated values” (CSV) format.
Each EDE ﬁle presents details of a speciﬁc BACS (Fig-
ure 7 shows an extract of Device 4001 EDE ﬁle). Data
includes all implemented BACnet objects (e.g., “device
4001” owns “Analog Value 171”, “Multi-state Value 15”,
etc.) and their descriptions. Furthermore, EDE ﬁles in-
clude information about Present Value properties with
4http://www.bacnetinternational.org/
(a) PICS excerpt 1
(b) PICS excerpt 2
(c) PICS excerpt 3
Figure 6: PICS example
Figure 7: EDE ﬁle example
value ranges (e.g., “Analog Value 171” can vary from
min-present-value 0 to max-present-value 100).
Experiments The program we implemented to search
for online documentation uses the outputs of System
Discovery (vendors and models) and further keywords
such as “PICS” to retrieve information about identiﬁed
BACSs. The system ranks Google results coming from
public repositories (e.g., www.bacnetinternational.net)
and the web by quantifying the presence of the key-
words in document titles. For example, the “Blue ID
S10 Controller” links to a PDF document titled “BAC-
net PICS Blue ID S10 Controller.pdf” (Figure 6). With
this technique we identiﬁed a PICS for 99.3% of the de-
798  25th USENIX Security Symposium 
USENIX Association
8
vices deployed in the two building automation systems
(442 out of 445 among the devices identiﬁed in the Sys-
tem Discovery step). Two ‘Siemens PXR11’ and one
‘Paragon Controls Inc. EQ’ were the only devices that
did not link to any PICS. However, we could not ﬁnd the
related PICSs even by a manual search either.
Ofﬂine research targeted speciﬁc devices directly.
While online documentation always provides general in-
formation about BACSs of a certain kind (e.g., all “Blue
ID S10 Controller”), ofﬂine repositories provide detailed
information related only to devices deployed in the mon-
itored building automation system. For this reason, in-
stead of vendors and models we searched through the
available documents using device Object Instances.
For example, starting from “Device object 4001” from
System Discovery, we found an EDE ﬁle titled “Con-
troller 4001 EDE.csv”. While LBNL did not provide
any conﬁguration ﬁle, operators from the University of
Twente shared with us 10 ﬁles of this kind. While they
conﬁrmed that there was indeed an EDE ﬁle for every de-
ployed device, they could not grant us unlimited access
to all of them due to information sensitivity. For this rea-
son, the operators chose the 10 ﬁles based on roles and
purposes of the related devices. Each ﬁle we obtained
described a BACS identiﬁed over System Discovery.
The aforementioned privacy concerns refer to the ini-
tial manual analysis we had to perform over the EDE
ﬁles and would not hamper the applicability of our ap-
proach. In an ideal deployment, one would have a se-
cure connection between the IDS and the machine stor-
ing the EDE ﬁles, without any human activity involved
for retrieval operations and processing. However, both
University of Twente and LBNL operators store infras-
tructure documentation on computers also used for other
purposes than building automation, and direct connec-
tions to those resources were infeasible.
Finally, we implemented two programs to parse PICSs
and EDE ﬁles respectively. In the ﬁrst case, the program
goes from document’s top to bottom guided by the dia-
gram shown in Figure 8. For every available PICS, the
program ﬁrst selects all implemented BIBBs and BAC-
net objects (Figures 6a and 6b). Each object can be cre-
atable/deletable and this information follows the object
as a “yes/no” or equivalent symbols (Figure 6b). Finally,
for every object, the script selects a list of properties that
can be writable or not (Figure 6c). Figure 9 shows pars-
ing results of the “Blue ID S10 Controller” coming from
the PICS showed in Figure 6.
Most of the retrieved PICS did not have any infor-
mation about property values. Instead, this information
was included in the EDE ﬁles. A further program went
through all EDE ﬁles selecting Present Value mini-
mum and maximum values for every listed object. This
new information was structured as shown in Figure 10.
Figure 8: PICS parsing diagram
Figure 9: Parsing PICS example results
Figure 10: Parsing EDE example results
7 Rule Deﬁnition and Detection
Next we describe how the information gathered in previ-
ous steps is used to deﬁne speciﬁcation rules. In §4, we
motivated our focus on variables’ types, values and re-
lated access methods as basis for our speciﬁcation rules.
From this, we derive three abstract rules: 1) a “Type”
rule checks if a variable of a speciﬁc type is allowed;
2) a “Value” rule checks which values a variable may
assume; and 3) a “Method” rule checks which methods
can be used to access a speciﬁc variable. All rules have
the same structure: each element (type, value, method)
is evaluated against a set of allowed possibilities. For ex-
ample, in the “Type” rule, a variable’s type is evaluated
against all the allowed types of variable a controller may
implement (Algorithm 1).
We use a Python program to automate the process of
mapping information retrieved over Feature Lookup to
the abstract rules. In the following, we discuss how we
map these abstract rules into speciﬁcation rules for mon-
itoring for each type.
Type Rule: The “Type” rule checks which BACnet ob-
jects and properties each BACS can use. This informa-
tion comes from the PICSs (Figures 6b and 6c) and, thus,
is included in the results of Feature Lookup (Figure 9).
Therefore, a script selects allowed objects and properties
of each identiﬁed BACS and transforms the “Type” rule
into the two speciﬁcation rules shown in Algorithm 2.
In the case of the “Blue ID S10 Controller”,
the
USENIX Association  
25th USENIX Security Symposium  799
9
Algorithm 1 Abstract “Type” rule
1:
2:
3: end if
if Variabletype /∈ ControllerAllowedVariableTypes then
Alert(“Variable type not permitted”)
Algorithm 2 BACnet “Type” rules
1:
2:
3: end if
if BACnet Object /∈ ControllerAllowedObjectTypes then
Alert(“Forbidden Object”)
if BACnet Property /∈ ControllerObjectAllowedPropertyTypes then
Alert(“Forbidden Property”)
1:
2:
3: end if
In the same way,
ControllerAllowedObjectTypes set contains objects Accumu-
lator, Analog Input, etc.
the
ControllerAccumulatorAllowedPropertyTypes set of a “Blue ID S10
Controller” contains properties Object Identifier,
Object Name, etc. Whenever the system captures a
BACnet message including an object and some prop-
erty, the two rules check object and property types re-
spectively and alert if these types are not included in the
deﬁned sets. This allows the system to detect snooping
attacks and any other attack dealing with unexpected ob-
jects and properties.
Value Rule: The “Value” rule checks which values
BACnet properties may assume. This information comes
from the EDE ﬁles (Figures 7 and 10) and, thus, is auto-
matically mapped to the concrete rule as shown in Algo-
rithm 3.
Algorithm 3 BACnet “Value” rule
1:
2:
3: end if
Alert(“Forbidden Value”)
if BACnet Property value /∈ Controller(Object,Property)AllowedPropertyValues then
For example, when it comes to “Device 4001”, the sys-
tem alerts if “Analog Value 171” is below 0 or above 100.
This rule protects the infrastructure against process con-
trol subverting scenarios, and thus attacks attempting to
modify parameters of the physical and control processes.
Method Rule: The “Method” rule validates the BAC-
net services each BACS can use. This information comes
from the PICSs in the form of a list of BIBBs (Figures 6a)
and is included in the results of Feature Lookup (Fig-
ure 9). BIBBs can be replaced with corresponding ser-
vices by a simple lookup operation. Therefore, Algo-
rithm 4 checks if a BACnet service belongs to the set of
allowed services.
In the case of the “Blue ID S10 Controller”,
the
includes services from BIBBs
DS RP B
(ReadProperty Request),
ControllerAllowedServices
DS RP A
Algorithm 4 BACnet “Method” rule
1:
2:
3: end if
if BACnet Service /∈ ControllerAllowedServices then
Alert(“Forbidden Service”)
(ReadProperty Response), etc. This rule allows the
system to detect attackers misusing BACnet services to
fulﬁll their goals.
Furthermore, we use the “Method” rule to check
which BACnet object is creatable/deletable and which
BACnet property is writable. Following the standard,
we compile three sets of BACnet services with services
that create objects, that delete objects, and that write
properties respectively. Then, the system uses the infor-
mation from Feature Lookup to deﬁne checks on non-
creatable/deletable objects and non-writable properties
by using Algorithm 5.
Algorithm 5 BACnet additional “Method” rules
1:
2:
3: end if
if BACnet Service ∈ CreateObjectServices then
Alert(“Forbidden object creation”)
if BACnet Service ∈ DeleteObjectServices then
Alert(“Forbidden object deletion”)
1:
2:
3: end if
if BACnet Service ∈ WritePropertyServices then
Alert(“Forbidden property writing”)
1:
2: