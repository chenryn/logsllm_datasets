技
术
标
准 
研发运营一体化能力成熟度模型 
第 3 部分：持续交付过程 
The DevOps capability maturity model 
Part 3: Continuous delivery process 
（征求意见稿） 
2017 年 11 月 18 日 
YDB XXXXX—XXXX 
I 
目  次 
目次................................................................................... I 
前言.................................................................. 错误! 未定义书签。 
研发运营一体化......................................................................... 1 
1 范围 ............................................................................... 1 
2 规范性引用文件 ..................................................................... 1 
3 术语 ............................................................................... 1 
下列术语和定义适用于本文件。 ......................................................... 1 
3.1 AB 测试 ab test .............................................................. 1 
3.2 制品 artifact ............................................................... 1 
3.3 代码复杂度 code complexity .................................................. 1 
3.4 部署流水线 deployment pipeline .............................................. 1 
4 缩略语 ............................................................................. 2 
5 综述 ............................................................................... 2 
6 配置管理 ........................................................................... 2 
6.1 版本控制 .................................................................... 2 
6.2 版本可追溯性 ................................................................ 3 
7 构建与持续集成 ..................................................................... 4 
7.1 构建实践 .................................................................... 4 
7.2 持续集成 .................................................................... 5 
8 测试管理 ........................................................................... 5 
8.1 测试分层策略 ................................................................ 6 
8.2 代码质量管理 ................................................................ 6 
8.3 自动化测试 .................................................................. 7 
9 部署与发布管理 ..................................................................... 8 
9.1 部署与发布模式 .............................................................. 8 
9.2 持续部署流水线 .............................................................. 9 
10 环境管理 .......................................................................... 9 
11 数据管理 ......................................................................... 10 
11.1 测试数据管理 .............................................................. 10 
11.2 数据变更管理 .............................................................. 11 
12 度量与反馈 ....................................................................... 12 
12.1 度量指标 .................................................................. 12 
12.2 度量驱动改进 .............................................................. 13 
YDB XXXXX—XXXX 
II 
前  言 
研发运营一体化是指在 IT 软件及相关服务的研发及交付过程中，将应用的需求、开发、测试、部
署和运营统一起来，基于整个组织的协作和应用架构的优化，实现敏捷开发、持续交付和应用运营的无
缝集成。帮助企业提升 IT 效能，在保证稳定的同时，快速交付高质量的软件及服务，灵活应对快速变
化的业务需求和市场环境。 
本标准是“研发运营一体化能力成熟度模型”系列标准的第 3 部分，该系列标准的结构和名称如
下： 
§ 
第 1 部分：总体架构 
§ 
第 2 部分：敏捷开发管理过程 
§ 
第 3 部分：持续交付过程 
§ 
第 4 部分：技术运营过程 
§ 
第 5 部分：应用架构 
§ 
第 6 部分：安全管理 
§ 
第 7 部分：组织结构 
本标准按照 GB/T 1.1-2009 给出的规则起草。  
本标准由中国通信标准化协会提出并归口。 
本标准起草单位： DevOps 时代社区、高效运维社区、中国信息通信研究院、深圳优维科技有限公
司、中兴通信股份有限公司 
本标准主要起草人：石雪峰、张乐、景韵、王津银、鞠炜刚、萧田国、栗蔚
1 
研发运营一体化  
总体架构及能力成熟度模型 
1 范围 
本标准规定了研发运营一体化的持续交付过程及能力成熟度模型。本标准中的研发运营一体化包括
IT软件及服务的需求、开发、测试、部署和运营五个环节，并实现敏捷开发、持续交付和技术运营的顺
序闭环集成。 
本标准适用于企业在实施IT软件开发和服务过程中实现研发运营一体化架构，提升IT效能。 
2 规范性引用文件 
下列文件中的条款通过本部分的引用而成为本部分的条款。凡是注日期的引用文件，仅所注日期的
版本适用于本文件。凡是不注日期的引用文件，其最新版本（包括所有的修改单）适用于本文件。 
[1] GB/T 32400-2015  信息技术 云计算 概览与词汇 
[2] GB/T 32399-2015  信息技术 云计算 参考架构 
[3] YD/T2441-2013    互联网数据中心技术及分级分类标准 
[4] GB/T 33136-2016  信息技术服务数据中心服务能力成熟度模型 
3 术语 
下列术语和定义适用于本文件。 
3.1 AB 测试 ab test 
为Web或App界面或流程制作两个（A/B）或多个（A/B/n）版本，在同一时间维度，分别让组成成分
相同（相似）的访客群组随机的访问这些版本，收集各群组的用户体验数据和业务数据，最后分析评估
出最好版本正式采用。 
3.2 制品 artifact 
即构建过程的输出物，包括软件包，测试报告，应用配置文件等。 
3.3 代码复杂度 code complexity 
主要度量指标为圈复杂度，即代码中线性独立路径的数量。 
3.4 部署流水线 deployment pipeline 
指软件从版本控制库到用户手中这一过程的自动化表现形式。 
2 
4 缩略语 
下列缩略语适用于本文件。 
CI  
Continuous Integration  
持续集成 
CD  
Continuous Delivery  
持续交付 
MVP  
Most Variable Product 
最小可行产品 
DEEP Principle  Detailed Appropriately，Estimated，Emergent，Prioritized principle  适
当细化的，有估算的，随时产生的，有优先级的原则 
UI  
User Interface  
用户界面 
UAT  
User Acceptance Testing  
用户验收测试 
OS      Operation System 
                            操作系统 
5 综述 
持续交付是指以可持续的方式将各类变更（包括新功能、缺陷修复、配置变化、实验等）安全、快
速、高质量地落实到生产环境或用户手中的能力。 
持续交付的分级技术要求包括：配置管理、构建与持续集成、测试管理、部署与发布管理、环境管
理、数据管理、度量与反馈等，如图1所示。 
图 3 持续交付分级技术要求 
6 配置管理 
配置管理是指一个过程，通过该过程，所有与项目相关的产物，以及它们之间的关系都被唯一定义、
修改、存储和检索，保证了软件版本交付生命周期过程中所有交付产物的完整性，一致性和可追溯性。 
配置管理是持续交付的基础，是保障持续交付所有活动顺畅有效开展的前提。良好设计的配置管理
策略，可以提高组织协作的效率，改善产品价值交付的完整流程。 
配置管理可以分为版本控制和版本可追溯性两个维度表述。 
6.1 版本控制 
版本控制是指通过记录软件开发过程中的源代码、配置、工具、环境、数据等的历史信息，快速重
现和访问任意一个修订版本。 
版本控制是团队协作交付软件的基础，应支持团队间所有变更历史的详细信息查询及共享，包括修
改人员、修改时间、文件内容以及注释信息等，通过有效信息共享，加快问题定位和沟通协作效率。 
3 
级别 
版本控制系统 
分支管理 
构建产物管理 
单一可信数据源 
1 
未使用统一的版本
控制系统，源代码
分散在研发本地设
备管理 
缺乏明确的分支管理
策略，分支生命周期
混乱 
未使用统一的制品库，构
建产物通过直接拷贝或
本地共享等方式进行分
发 
无 
2 
使用集中式的版本
控制系统并将所有
源代码纳入系统管
理 
采取长周期和大批量
的方式进行代码提交，
代码合并过程存在大
量冲突和错误 
使用统一的制品库管理
构建产物，有清晰的分级
和目录结构及权限管控
并通过单一制品库地址
进行分发 
无 
3 
使用分布式的版本
控制系统，并将所有
源代码、配置文件、
构建和部署等自动
化脚本纳入系统管
理 
采取短分支频繁提交
的方式,研发人员至少
每天完成一次代码提
交，代码合并过程顺畅 
使用统一的制品库管理
构建产物，并将二进制库
文件和三方依赖软件工
具等纳入制品库管理 
版本控制系统和制品库
作为单一可信数据源，覆
盖生产部署环节 
4 
将数据库变更脚本
和环境配置等纳入
版本控制系统管理 
版本控制系统支持
自动化的变更操作 
分支策略满足持续交
付需求，可灵活适应产
品交付 
对制品库完成分级管理，
有成熟的备份恢复清理
策略，如采用使用分布式
制品库 
单一可信数据源进一步
覆盖研发本地环境 
5 
将软件生命周期的
所有配置项纳入版
本控制系统管理，可
完整回溯软件交付
过程满足审计要求 
持续优化的分支管理
策略，可支持团队高效
协作 
同上 
单一可信数据源贯穿整
研发价值流交付过程 
在组织内部开放共享，建
立知识积累和经验复用
体系 
6.2 版本可追溯性 
版本可追溯性是指软件系统中的每一次变更都可以追溯变更的详细信息，并向上追溯变更的原始需
求、流转过程等所有关联信息。 
可追溯性也是版本回滚的历史依据和实施基础，建立良好的版本可追溯性可实现对任一版本完整环
境流程的自动化，精确回滚，快速重现问题和恢复正常环境。 
级别 
变更过程 
变更追溯 
变更回滚 
1 
变更过程不受控且变更信
息分散在每个系统内部，缺
乏信息的有效共享机制 
变更缺乏基本的可追溯性 
变更问题定位困难且回滚操作具
有高风险 
2 
代码变更过程应附带变更
管理信息 
有清晰定义的软件版本号规则，实
现版本和代码的关联，可追溯版本
构建对应的完整源代码信息 
可支持版本间差异对比和代码级
别问题定位和回滚 
4 
3 
所有配置项变更由变更管
理系统触发，并作为版本控
制系统的强制要求 
实现版本控制系统和变更管理系统
的自动化关联，信息双向同步和实
时可追溯 
实现变更管理系统和版本控制
系统的同步回滚，保证状态的一
致性 
4 
使用同一套变更管理系统
覆盖从需求到部署发布全
流程 
变更依赖被识别和标记，实现数据
库和环境变更信息的可追溯 
可根据变更管理系统按需快速导
出复用软件代码变更集，如建立
从变更管理系统到软件代码变更
集的关系数据库 
5 
可视化变更生命周期，支
持全程数据分析管理和满
足审计要求 
实现从需求到部署发布各个环节的
相关全部信息的全程可追溯 
支持任何时间点全部状态的自动
化回滚需求 
7 构建与持续集成 
构建是将软件源代码通过构建工具转换为可执行程序的过程，一般包含编译和链接两个步骤，将高
级语言代码转换为可执行的机器代码并进行相应的优化，提升运行效率。 
持续集成是软件构建过程中的一个最佳实践，在版本控制的基础上，通过频繁的代码提交，自动化
构建和自动化测试，加快软件集成周期和问题反馈速度，从而及时验证系统可用性。 
7.1 构建实践 
构建实践关注软件代码到可运行程序之间的过程，通过规则、资源和工具的有效结合，提升构建质
量和构建速度，使构建成为一个轻量级，可靠可重复的过程。同时构建产物被明确标识管理，采用清晰
的规则定义版本号和目录结构有助于团队成员可以随时获取到可用版本，以及版本相关的信息，快速验
证回溯版本变更。 
级别 
构建方式 
构建环境 
构建计划 
构建职责 
1 
采用手工方式进行
构建，构建过程不可
重复 
使用本地设备，构建环境
不可靠 
没有明确的版本号规则
和构建任务计划 
构建工具和环境受限
于团队人员能力，频繁
手动干预维护 
2 
实现脚本自动化，通
过手工配置完成构
建 
有独立的构建服务器，多
种任务共享构建环境 
明确定义版本号规则，
并根据发布策略细分构
建类型，实现每日自动