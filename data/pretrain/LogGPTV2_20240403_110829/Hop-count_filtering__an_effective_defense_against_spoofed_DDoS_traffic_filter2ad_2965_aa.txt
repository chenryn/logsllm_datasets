title:Hop-count filtering: an effective defense against spoofed DDoS traffic
author:Cheng Jin and
Haining Wang and
Kang G. Shin
Hop-Count Filtering: An Effective Defense Against Spoofed
DDoS Traffic
Cheng Jin
CS Department
Caltech
Pasadena, CA 91125
Haining Wang
CS Department
College of William and Mary
Williamsburg, VA 23187
Kang G. Shin
EECS Department
University of Michigan
Ann Arbor, MI 48105
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
IP spooﬁng has been exploited by Distributed Denial of Service (DDoS)
attacks to (1) conceal ﬂooding sources and localities in ﬂooding traf-
ﬁc, and (2) coax legitimate hosts into becoming reﬂectors, redirect-
ing and amplifying ﬂooding trafﬁc. Thus, the ability to ﬁlter spoofed
IP packets near victims is essential to their own protection as well as
to their avoidance of becoming involuntary DoS reﬂectors. Although
an attacker can forge any ﬁeld in the IP header, he or she cannot fal-
sify the number of hops an IP packet takes to reach its destination.
This hop-count information can be inferred from the Time-to-Live
(TTL) value in the IP header. Using a mapping between IP addresses
and their hop-counts to an Internet server, the server can distinguish
spoofed IP packets from legitimate ones. Base on this observation,
we present a novel ﬁltering technique that is immediately deploy-
able to weed out spoofed IP packets. Through analysis using net-
work measurement data, we show that Hop-Count Filtering (HCF)
can identify close to 90% of spoofed IP packets, and then discard
them with little collateral damage. We implement and evaluate HCF
in the Linux kernel, demonstrating its beneﬁts using experimental
measurements.
Categories and Subject Descriptors
C.2 [Computer-Communication Networks]: Security
General Terms
Algorithms,Performance,Security
Keywords
security,networking,DDoS defense,TTL,host-based
1.
INTRODUCTION
An Internet host can spoof IP packets by using a raw socket to ﬁll
arbitrary source IP addresses into their IP headers [28]. IP spoof-
ing is usually associated with malicious network behaviors, such as
Distributed Denial of Service (DDoS) attacks. As one of the most
difﬁcult problems in network security, DDoS attacks have posed a
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
serious threat to the availability of Internet services [6, 18, 27]. In-
stead of subverting services, DDoS attacks limit and block legitimate
users’ access by exhausting victim servers’ resources [7], or saturat-
ing stub networks’ access links to the Internet [19]. To conceal ﬂood-
ing sources and localities in ﬂooding trafﬁc, attackers often spoof
IP addresses by randomizing the 32-bit source-address ﬁeld in the
IP header [12, 13]. Moreover, some known DDoS attacks, such as
smurf [8] and more recent DRDoS (Distributed Reﬂection Denial of
Service) attacks [19, 33], are not possible without IP spooﬁng. Such
attacks masquerade the source IP address of each spoofed packet
with the victim’s IP address.
It is difﬁcult to counter IP spooﬁng
because of the stateless and destination-based routing of the Inter-
net. The IP protocol lacks the control to prevent a sender from hid-
ing the origin of its packets. Furthermore, destination-based routing
does not maintain state information on senders, and forwards each IP
packet toward its destination without validating the packet’s true ori-
gin. Overall, IP spooﬁng makes DDoS attacks much more difﬁcult
to defend against.
To thwart DDoS attacks, researchers have taken two distinct ap-
proaches: router-based and victim-based. The router-based approach
makes improvements to the routing infrastructure, while the victim-
based approach enhances the resilience of Internet servers against
attacks. The router-based approach performs either off-line analysis
of ﬂooding trafﬁc or on-line ﬁltering of DDoS trafﬁc inside routers.
Off-line IP traceback [4, 36, 37, 38, 41] attempts to establish pro-
cedures to track down ﬂooding sources after occurrences of DDoS
attacks. While it does help pinpoint locations of ﬂooding sources,
off-line IP traceback does not help sustain service availability during
an attack. On-line ﬁltering mechanisms rely on IP router enhance-
ments [15, 23, 24, 25, 26, 31] to detect abnormal trafﬁc patterns and
foil DDoS attacks. However, these solutions require not only router
support, but also coordination among different routers and networks,
and wide-spread deployment.
Compared to the router-based approach, the victim-based approach
has the advantage of being immediately deployable. More impor-
tantly, a potential victim has a much stronger incentive to deploy
defense mechanisms than network service providers. The current
victim-based approach protects Internet servers using sophisticated
resource management schemes. These schemes provide more ac-
curate resource accounting, and ﬁne-grained service isolation and
differentiation [3, 5, 35, 39], for example, to shield interactive video
trafﬁc from bulk data transfers. However, without a mechanism to
detect and discard spoofed trafﬁc, spoofed packets will share the
same resource principals and code paths as legitimate requests. While
a resource manager can conﬁne the scope of damage to the service
under attack, it may not be able to sustain the availability of the ser-
vice. In stark contrast, the server’s ability to ﬁlter most, if not all,
spoofed IP packets can help sustain service availability even under
30DDoS attacks. Since ﬁltering spoofed IP packets is orthogonal to
resource management, it can be used in conjunction with advanced
resource-management schemes.
Therefore, victim-based ﬁltering, which detects and discards spoofed
trafﬁc without any router support, is essential to protecting victims
against DDoS attacks. We only utilize the information contained in
the IP header for packet ﬁltering. Although an attacker can forge any
ﬁeld in the IP header, he or she cannot falsify the number of hops an
IP packet takes to reach its destination, which is solely determined
by the Internet routing infrastructure. The hop-count information is
indirectly reﬂected in the TTL ﬁeld of the IP header, since each inter-
mediate router decrements the TTL value by one before forwarding
a packet to the next hop. The difference between the initial TTL
(at the source) and the ﬁnal TTL value (at the destination) is the
hop-count between the source and the destination. By examining the
TTL ﬁeld of each arriving packet, the destination can infer its initial
TTL value, and hence the hop-count from the source. Here we as-
sume that attackers cannot sabotage routers to alter TTL values of IP
packets that traverse them.
In this paper, we propose a novel hop-count-based ﬁlter to weed
out spoofed IP packets. The rationale behind hop-count ﬁltering is
that most spoofed IP packets, when arriving at victims, do not carry
hop-count values that are consistent with the IP addresses being
spoofed. Hop-Count Filtering (HCF) builds an accurate IP-to-hop-
count (IP2HC) mapping table, while using a moderate amount of
storage, by clustering address preﬁxes based on hop-count. To cap-
ture hop-count changes under dynamic network conditions, we also
devise a safe update procedure for the IP2HC mapping table that pre-
vents pollution by HCF-aware attackers. The same pollution-proof
method is used for IP2HC mapping table initialization and adding
new IP addresses into the table.
Two running states, alert and action, within HCF use this mapping
to inspect the IP header of each IP packet. Under normal condition,
HCF stays in alert state, watching for abnormal TTL behaviors with-
out discarding any packet. Even if a legitimate packet is incorrectly
identiﬁed as a spoofed one, it will not be dropped. Therefore, there
is no collateral damage in alert state. Upon detection of an attack,
HCF switches to action state, in which HCF discards those IP pack-
ets with mismatching hop-counts. Besides the IP2HC inspection,
several efﬁcient mechanisms [17, 20, 30, 43] are available to detect
DDoS attacks. Through analysis using network measurement data,
we show that HCF can recognize close to 90% of spoofed IP pack-
ets. In addition, our hop-count-based clustering signiﬁcantly reduces
the percentage of false positives.1 Thus, we can discard spoofed
IP packets with little collateral damage in action state. To ensure
that the ﬁltering mechanism itself withstands attacks, our design is
light-weight and requires only a moderate amount of storage. We
implement HCF in the Linux kernel at the IP layer as the ﬁrst step
of incoming packet processing. We evaluate the beneﬁt of HCF with
experimental measurements and show that HCF is indeed effective
in countering IP spooﬁng by providing signiﬁcant resource savings.
The remainder of the paper is organized as follows. Section 2
presents the TTL-based hop-count computation and the hop-count
inspection algorithm, which is in the critical path of HCF. Section
3 studies the feasibility of the proposed ﬁltering mechanism, based
on a large set of previously-collected traceroute data, and the
resilience of our ﬁltering scheme against HCF-aware attackers. Sec-
tion 4 demonstrates the effectiveness of the proposed ﬁlter in detect-
ing spoofed packets. Section 5 deals with the construction of IP2HC
mapping table, the heart of HCF. Section 6 details the two running
states of HCF, the inter-state transitions, and the placement of HCF.
Section 7 presents the implementation and experimental evaluation
1Percentage of the legitimate packets identiﬁed as the spoofed.
of HCF. Section 8 discusses related work. The paper concludes with
Section 9.
2. HOP-COUNT INSPECTION
Central to HCF is the validation of the source IP address of each
packet via hop-count inspection. In this section, we ﬁrst discuss the
hop-count computation, and then detail the inspection algorithm.
2.1 TTL-based Hop-Count Computation
Since hop-count information is not directly stored in the IP header,
one has to compute it based on the TTL ﬁeld. TTL is an 8-bit ﬁeld in
the IP header, originally introduced to specify the maximum lifetime
of each packet in the Internet. Each intermediate router decrements
the TTL value of an in-transit IP packet by one before forwarding it
to the next-hop. The ﬁnal TTL value when a packet reaches its des-
tination is therefore the initial TTL subtracted by the number of in-
termediate hops (or simply hop-count). The challenge in hop-count
computation is that a destination only sees the ﬁnal TTL value. It
would have been simple had all operating systems (OSs) used the
same initial TTL value, but in practice, there is no consensus on the
initial TTL value. Furthermore, since the OS for a given IP address
may change with time, we cannot assume a single static initial TTL
value for each IP address.
Fortunately, however, according to [14], most modern OSs use
only a few selected initial TTL values, 30, 32, 60, 64, 128, and 255.
This set of initial TTL values cover most of the popular OSs, such as
Microsoft Windows, Linux, variants of BSD, and many commercial
Unix systems. We observe that most of these initial TTL values are
far apart, except between 30 and 32, 60 and 64, and between 32 and
60. Since Internet traces have shown that few Internet hosts are apart
by more than 30 hops [9, 10], which is also conﬁrmed by our own
observation, one can determine the initial TTL value of a packet by
selecting the smallest initial value in the set that is larger than its
ﬁnal TTL. For example, if the ﬁnal TTL value is 112, the initial TTL
value is 128, the smaller of the two possible initial values, 128 and
255. To resolve ambiguities in the cases of {30, 32}, {60, 64}, and
{32, 60}, we will compute a hop-count value for each of the possible
initial TTL values, and accept the packet if there is a match with one
of the possible hop-counts.
The drawback of limiting the possible initial TTL values is that
packets from end-systems that use “odd” initial TTL values, may be
incorrectly identiﬁed as having spoofed source IP addresses. This
may happen if a user switches OS from one that uses a “normal”
initial TTL value to another that uses an “odd” value. Since our
ﬁlter starts to discard packets only upon detection of a DDoS attack,
such end-systems would suffer only during an actual DDoS attack.
The study in [14] shows that the OSs that use “odd” initial TTLs are
typically older OSs. We expect such OSs to constitute a very small
percentage of end-hosts in the current Internet. Thus, the beneﬁt
of deploying HCF should out-weight the risk of denying service to
those end-hosts during attacks.
2.2 Inspection Algorithm
Assuming that an accurate IP2HC mapping table is present (see
Section 5 for details of its construction) Figure 2.1 outlines the HCF
procedure used to identify spoofed packets. The inspection algo-
rithm extracts the source IP address and the ﬁnal TTL value from
each IP packet. The algorithm infers the initial TTL value and sub-
tracts the ﬁnal TTL value from it to obtain the hop-count. The source
IP address serves as the index into the table to retrieve the correct
hop-count for this IP address. If the computed hop-count matches
the stored hop-count, the packet has been “authenticated;” other-
wise, the packet is likely spoofed. We note that a spoofed IP address
for each packet:
extract the ﬁnal TTL Tf and the IP address S;
infer the initial TTL Ti;
compute the hop-count Hc = Ti − Tf ;
index S to get the stored hop-count Hs;
if
(Hc (cid:2)= Hs)
the packet is spoofed;
else
the packet is legitimate;
Figure 1: Hop-Count inspection algorithm.
may happen to have the same hop-count as the one from a zombie
(ﬂooding source2) to the victim. In this case, HCF will not be able
to identify the spoofed packet. However, we will show in Section 4
that even with a limited range of hop-count values, HCF is highly
effective in identifying spoofed IP addresses.
Occasionally, legitimate packets may be identiﬁed as spoofed due
to inaccurate IP2HC mapping or delay in hop-count update. There-
fore, it is important to minimize collateral damage under HCF. We
note that an identiﬁed spoofed IP packet is only dropped in the action
state, while HCF only keeps track of the number of mis-matched IP
packets without discarding any packets in the alert state. This guar-
antees no collateral damage in the alert state, which should be much
more common than the action state.
3. FEASIBILITY OF HOP-COUNT FILTER-
ING
The feasibility of HCF hinges on three factors: (1) stability of
hop-counts, (2) diversity of hop-count distribution, and (3) robust-
ness against possible evasions. In this section, we ﬁrst examine the
stability of hop-counts. Then, we assess if valid hop-counts to a
server are diverse enough, so that matching the hop-count with the
source IP address of each packet sufﬁces to recognize spoofed pack-
ets with high probability. Finally, our discussion will show that it is
difﬁcult for an HCF-aware attacker to circumvent ﬁltering.
3.1 Hop-Count Stability
The stability in hop-counts between an Internet server and its clients
is crucial for HCF to work correctly and effectively. Frequent changes
in the hop-count between the server and each of its clients not only
lead to excessive mapping updates, but also greatly reduce ﬁltering
accuracy when an out-of-date mapping is in use during attacks.
The hop-count stability is dictated by the end-to-end routing be-
haviors in the Internet. According to the study of end-to-end routing
stability in [32], the Internet paths were found to be dominated by
a few prevalent routes, and about two thirds of the Internet paths
studied were observed to have routes persisting for either days or
weeks. To conﬁrm these ﬁndings, we use daily traceroute mea-
surements taken at ten-minute intervals among 113 sites [16] from
January 1st to April 30th, 2003. We observed a total of 10,814 dis-
tinct one-way paths, a majority of which had 12,000 traceroute mea-
surements each over the ﬁve-month period. In these measurements,
most of the paths experienced very few hop-count changes: 95%
of the paths had fewer than ﬁve observable daily changes. There-
fore, it is reasonable to expect hop-counts to be stable in the Internet.
Moreover, the proposed ﬁlter contains a dynamic update procedure
to capture hop-count changes as discussed in Section 5.2.
2In this paper, the terms zombie and ﬂooding source are used inter-
changeably.
3.2 Diversity of Hop-Count Distribution
Because HCF cannot recognize forged packets whose source IP
addresses have the same hop-count value as that of a zombie, a di-
verse hop-count distribution is critical to effective ﬁltering. It is nec-
essary to examine hop-count distributions at various locations in the
Internet to ensure that hop-counts are not concentrated around a sin-
gle value. If 90% of client IP addresses are ten hops away from a
server, one would not be able to distinguish many spoofed packets
from legitimate ones using HCF alone.
Type
Sample Number
Commercial sites
Educational sites
Non-proﬁt sites
Foreign sites
.net sites
11
4
2
18
12
Table 1: Diversity of traceroute gateway locations.
To obtain actual hop-count distributions, we use the raw tracer-
oute data from 50 different traceroute gateways in [11]. We
use only 47 of the data sets because three of them contain too few
clients compared to the others. The locations of traceroute gate-
ways are diverse as shown in Table 1. Most of the traceroute
gateways measured hop-counts to more than 40,000 clients.
We examined the hop-count distributions at all traceroute
gateways to ﬁnd that the Gaussian distribution (bell-shaped curve)
is a good ﬁrst-order approximation. Figures 2–3 show the hop-
count distributions of two selected sites: a well-connected commer-
cial server net.yahoo.com and a web server for Stanford Linear
Accelerator Center. We are interested in the girth of a distribution,
which can give a qualitative indication of how well HCF works, i.e.,
the wider the girth, the more effective HCF will be. For Gaussian
distributions, the girth is the standard deviation, σ. The Gaussian
distribution3 can be written in the following form:
f (h) = C e
− (h−µ)2
2σ2
where C is the normalization constant, so the area under the Gaus-
sian distribution sums to the number of IP addresses measured. The