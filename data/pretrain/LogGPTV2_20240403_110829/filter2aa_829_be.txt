### EtwTi Sensor-to-Syscall Mappings

Table 12-2 shows the mappings between EtwTi sensors and their corresponding system calls, with a call tree depth of 4.

**Table 12-2: EtwTi Sensor-to-Syscall Mappings**

| **Sensor** | **Call Tree from Syscall (Depth = 4)** |
|------------|----------------------------------------|
| **EtwTiLogAllocExecVm** | MiAllocateVirtualMemory ← NtAllocateVirtualMemory |
| **EtwTiLogDriverObjectLoad** | IopLoadDriver ← IopLoadUnloadDriver ← IopLoadDriverImage ← NtLoadDriver <br> IopLoadDriver ← IopLoadUnloadDriver ← IopUnloadDriver ← NtUnloadDriver |
| **EtwTiLogInsertQueueUserApc** | KeInsertQueueApc ← NtQueueApcThread <br> KeInsertQueueApc ← NtQueueApcThreadEx |
| **EtwTiLogMapExecView** | NtMapViewOfSectionMiMapView Of SectionExCommon ← NtMapViewOfSectionEx |
| **EtwTiLogProtectExecVm** | NtProtectVirtualMemory |
| **EtwTiLogReadWriteVm** | MiReadWriteVirtualMemory ← NtReadVirtualMemory <br> MiReadWriteVirtualMemory ← NtReadVirtualMemoryEx <br> MiReadWriteVirtualMemory ← NtWriteVirtualMemory |
| **EtwTiLogSetContextThread** | PspSetContextThreadInternal ← NtSetContextThread |
| **EtwTiLogSuspendResumeThread** | PsSuspendThread ← NtSuspendThread <br> PsSuspendThread ← NtChangeThreadState <br> PsSuspendThread ← PsSuspendProcess ← NtSuspendProcess <br> PsMultiResumeThread ← NtResumeThread |

**Note:** There are other branches in the call tree leading to system calls such as `nt!IopCompleteRequest()`, `nt!PspGetContextThreadInternal()`, and `nt!PspSetContextThreadInternal()`. However, these are not particularly useful because many internal functions rely on them regardless of whether an APC is being explicitly created.

### Important Considerations

When reviewing this dataset, it is crucial to note that Ghidra does not account for conditional calls in its call trees. Instead, it looks for call instructions within functions. This means that while the generated graphs are technically correct, they may not be followed in all instances. For example, to understand where the decision to call `nt!EtwTiLogAllocExecVm()` is made, you can reverse-engineer `ntdll!NtAllocateVirtualMemory()`.

### Consuming EtwTi Events

In Chapter 8, you learned how EDRs consume events from other ETW providers. To collect ETW events from EtwTi, run the following commands from an elevated command prompt:

```powershell
PS > logman.exe create trace EtwTi -p Microsoft-Windows-Threat-Intelligence -o C:\EtwTi.etl
PS > logman.exe start EtwTi
```

**Listing 12-13: Logman commands to collect events from the EtwTi provider**

You may receive an "access denied" error despite running the commands with high integrity. This is due to a security feature called Secure ETW, implemented by Microsoft in Windows 10 and later versions. Secure ETW prevents malware processes from reading or tampering with antimalware traces. Only processes with the `PS_PROTECTED_ANTIMALWARE_LIGHT` protection level and services started with the `SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT` service protection type can consume events from the channel.

### Understanding Protected Processes

Process protections allow sensitive processes, such as those interacting with DRM-protected content, to evade interaction by outside processes. Originally designed for media players, the introduction of Protected Process Light (PPL) extended this protection to other types of applications. In modern versions of Windows, PPL is heavily used by both Windows components and third-party applications, as shown in the Process Explorer window in Figure 12-6.

**Figure 12-6: Protection levels across various processes**

You can view a process's protection state in the `Protection` field of the `EPROCESS` structure, which is of type `PS_PROTECTION`.

**Listing 12-14: The PS_PROTECTION structure definition**

```c
typedef struct _PS_PROTECTION {
    union {
        UCHAR Level;
        struct {
            UCHAR Type : 3;
            UCHAR Audit : 1;
            UCHAR Signer : 4;
        };
    };
} PS_PROTECTION, *PPS_PROTECTION;
```

The `Type` member of `PS_PROTECTION` correlates to a value in the `PS_PROTECTED_TYPE` enumeration.

**Listing 12-15: The PS_PROTECTED_TYPE enumeration**

```c
kd> dt nt!_PS_PROTECTED_TYPE
PsProtectedTypeNone = 0
PsProtectedTypeProtectedLight = 1
PsProtectedTypeProtected = 2
PsProtectedTypeMax = 3
```

The `Signer` member is a value from the `PS_PROTECTED_SIGNER` enumeration.

**Listing 12-16: The PS_PROTECTED_SIGNER enumeration**

```c
kd> dt nt!_PS_PROTECTED_SIGNER
PsProtectedSignerNone = 0
PsProtectedSignerAuthenticode = 1
PsProtectedSignerCodeGen = 2
PsProtectedSignerAntimalware = 3
PsProtectedSignerLsa = 4
PsProtectedSignerWindows = 5
PsProtectedSignerWinTcb = 6
PsProtectedSignerWinSystem = 7
PsProtectedSignerApp = 8
PsProtectedSignerMax = 9
```

For example, let's examine the process protection state of `msmpeng.exe`, the primary process of Microsoft Defender, using WinDbg.

**Listing 12-17: Evaluating msmpeng.exe’s process protection level**

```c
kd> dt nt!_EPROCESS Protection
+0x87a Protection : _PS_PROTECTION
kd> !process 0 0 MsMpEng.exe
PROCESS ffffa608af571300
SessionId: 0  Cid: 1134 Peb: 253d4dc000  ParentCid: 0298
DirBase: 0fc7d002 ObjectTable: ffffd60840b0c6c0 HandleCount: 636.
Image: MsMpEng.exe
kd> dt nt!_PS_PROTECTION ffffa608af571300 + 0x87a
+0x000 Level : 0x31 '1'
+0x000 Type : 0y001
+0x000 Audit : 0y0
+0x000 Signer : 0y0011
```

The process's protection type is `PsProtectedTypeProtectedLight` (1), and its signer is `PsProtectedSignerAntimalware` (3). With this protection level, also known as `PsProtectedSignerAntimalware-Light`, outside processes have limited ability to request access to the process, and the memory manager will prevent improperly signed modules (such as DLLs and application compatibility databases) from being loaded into the process.

### Creating a Protected Process

Creating a process to run with this protection level is not as simple as passing flags into `kernel32!CreateProcess()`. Windows validates the image file's digital signature against a Microsoft-owned root certificate authority used to sign many pieces of software, including drivers and third-party applications.

Windows also checks for one of several Enhanced Key Usage (EKU) extensions to determine the process's granted signing level. If the granted signing level does not dominate the requested signing level, meaning that the signer belongs to the `DominateMask` member of the `RTL_PROTECTED_ACCESS` structure, Windows checks whether the signing level is runtime customizable. If so, it checks whether the signing level matches any of the registered runtime signers on the system. If a match is found, it authenticates the certificate chain with the runtime signer's registration data, such as the hash of the signer and EKUs. If all checks pass, Windows grants the requested signature level.

### Registering an ELAM Driver

To create a process or service with the required protection level, a developer needs a signed ELAM driver. This driver must have an embedded resource, `MICROSOFTELAMCERTIFICATEINFO`, containing the certificate hash and hashing algorithm used for the executables associated with the user-mode process or service to be protected, along with up to three EKU extensions. The operating system will parse or register this information at boot via an internal call to `nt!SeRegisterElamCertResources()`, or an administrator can do so manually at runtime.

If registration happens during the boot process, it occurs during pre-boot, before control is handed to the Windows Boot Manager, as shown in the WinDbg output in Listing 12-18.

**Listing 12-18: ELAM resources registered during the boot process**

```c
1: kd> k
# Child-SP RetAddr Call Site
00 ffff8308`ea406828 fffff804`1724c9af nt!SeRegisterElamCertResources
01 ffff8308`ea406830 fffff804`1724f1ac nt!PipInitializeEarlyLaunchDrivers+0x63
02 ffff8308`ea4068c0 fffff804`1723ca40 nt!IopInitializeBootDrivers+0x153
03 ffff8308`ea406a70 fffff804`172436e1 nt!IoInitSystemPreDrivers+0xb24
04 ffff8308`ea406bb0 fffff804`16f8596b nt!IoInitSystem+0x15
05 ffff8308`ea406be0 fffff804`16b55855 nt!Phase1Initialization+0x3b
06 ffff8308`ea406c10 fffff804`16bfe818 nt!PspSystemThreadStartup+0x55
07 ffff8308`ea406c60 00000000`00000000 nt!KiStartSystemThread+0x28
```

Manual registration is rarely seen in enterprise products, as resources parsed at boot require no further interaction at runtime. Both options yield the same result and can be used interchangeably.

### Creating a Signature

After registration, the driver becomes available for comparison when a signing-level match is found. The rest of this section covers the implementation of the consumer application in the context of an endpoint agent.

To create the resource and register it with the system, the developer first obtains a certificate that includes the Early Launch and Code Signing EKUs, either from the certificate authority or generated as a self-signed certificate for test environments. A self-signed certificate can be created using the `New-SelfSignedCertificate` PowerShell cmdlet, as shown in Listing 12-19.

**Listing 12-19: Generating and exporting a code-signing certificate**

```powershell
PS > $password = ConvertTo-SecureString -String "ThisIsMyPassword" -Force -AsPlainText
PS > $cert = New-SelfSignedCertificate -certstorelocation "Cert:\CurrentUser\My" -HashAlgorithm SHA256 -Subject "CN=MyElamCert" -TextExtension @("2.5.29.37={text}1.3.6.1.4.1.311.61.4.1,1.3.6.1.5.5.7.3.3")
PS > Export-PfxCertificate -cert $cert -FilePath "MyElamCert.pfx" -Password $password
```

Next, the developer signs their executable and any dependent DLLs using this certificate. You can do this using the `signtool.exe` syntax included in Listing 12-20.

**Listing 12-20: Signing an executable using the generated certificate**

```powershell
PS > signtool.exe sign /fd SHA256 /a /v /ph /f .\MyElamCert.pfx /p "ThisIsMyPassword" .\path\to\my\service.exe
```

At this point, the service executable meets the signing requirements to be launched as protected. Before it can be started, the driver's resource must be created and registered.

### Creating the Resource

The first piece of information needed to create the resource is the To-Be-Signed (TBS) hash for the certificate. The second piece of information is the certificate's file-digest algorithm. As of this writing, this field can be one of the following four values: 0x8004 (SHA10), 0x800C (SHA256), 0x800D (SHA384), or 0x800E (SHA512). We specified this algorithm in the `/fd` parameter when we created the certificate with `signtool.exe`.

We can collect both of these values by using `certmgr.exe` with the `-v` argument, as shown in Listing 12-21.

**Listing 12-21: Retrieving the To Be Signed hash and signature algorithm using certmgr.exe**

```powershell
PS > .\certmgr.exe -v .\path\to\my\service.exe
--snip--
Content Hash (To-Be-Signed Hash):
04 36 A7 99 81 81 81 07 2E DF B6 6A 52 56 78 24  ‘.6. . . . . . . . .jRVx$’
E7 CC 5E AA A2 7C 0E A3 4E 00 8D 9B 14 98 97 02  ‘..^..|..N. . . . . . .’
--snip--
Content SignatureAlgorithm: 1.2.840.113549.1.1.11 (sha256RSA)
--snip--
```

The hash is located under `Content Hash`, and the signature algorithm is under `Content SignatureAlgorithm`.

### Adding a New Resource File

Now we can add a new resource file to the driver project with the contents shown in Listing 12-22 and compile the driver.

**Listing 12-22: The MicrosoftElamCertificateInfo resource contents**

```c
MicrosoftElamCertificateInfo MSElamCertInfoID
{
    1,
    L"0436A799818181072EDFB66A52567824E7CC5EAAA27C0EA34E008D9B14989702\0",
    0x800C,
    L"\0"
}
```

The first value of this resource is the number of entries; in our case, there is only one entry, but there may be up to three. Next is the TBS hash that we collected earlier, followed by the hexadecimal value corresponding to the hashing algorithm used (SHA256 in our case).

Finally, there is a field in which we can specify additional EKUs. Developers use these to uniquely identify antimalware components signed by the same certificate authority. For example, if there are two services with the same signer on the host, but only one needs to be launched with the `SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT` flag, the developer could add a unique EKU when signing that service and add it to the ELAM driver's resource. The system will then evaluate this additional EKU when starting the service with the Anti-Malware protection level. Since we're not providing any additional EKUs in our resource, we pass what equates to an empty string.

### Signing the Resource

We then sign the driver using the same syntax we used to sign the service executable (Listing 12-23).

**Listing 12-23: Signing the driver with our certificate**

```powershell
PS > signtool.exe sign /fd SHA256 /a /v /ph /f "MyElamCert.pfx" /p "ThisIsMyPassword" .\path\to\my\driver.sys
```

Now the resource will be included in the driver and is ready to be installed.

### Installing the Driver

If the developer wants the operating system to handle loading the certificate information, they simply create the kernel service as described in "Registering an ELAM Driver" on page XX. If they would like to install the ELAM certificate at runtime, they can use a registration function in their agent, such as the one shown in Listing 12-24.

**Listing 12-24: Installing the certificate on the system**

```c
BOOL RegisterElamCertInfo(wchar_t* szPath)
{
    HANDLE hELAMFile = NULL;
    hELAMFile = CreateFileW(
        szPath, FILE_READ_DATA, FILE_SHARE_READ, NULL, OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL, NULL);
    if (hELAMFile == INVALID_HANDLE_VALUE)
    {
        wprintf(L"[-] Failed to open the ELAM driver. Error: 0x%x\n", GetLastError());
        return FALSE;
    }
    if (!InstallELAMCertificateInfo(hELAMFile))
    {
        wprintf(L"[-] Failed to install the certificate info. Error: 0x%x\n", GetLastError());
        CloseHandle(hELAMFile);
        return FALSE;
    }
    wprintf(L"[+] Installed the certificate info");
    return TRUE;
}
```

This code first opens a handle to the ELAM driver containing the `MicrosoftElamCertificateInfo` resource. The handle is then passed to `kernel32!InstallELAMCertificateInfo()` to install the certificate on the system.

### Starting the Service

All that is left at this point is to create and start the service with the required protection level. This can be done in any number of ways, but it is most frequently done programmatically using the Win32 API. Listing 12-25 shows an example function for doing so.

**Listing 12-25: Example function to create and start a protected service**

```c
BOOL CreateProtectedService()
{
    SC_HANDLE hSCM = NULL;
    SC_HANDLE hService = NULL;
    SERVICE_LAUNCH_PROTECTED_INFO info;

    hSCM = OpenSCManagerW(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (!hSCM)
    {
        return FALSE;
    }

    hService = CreateServiceW(
        hSCM,
        L"MyEtWTiConsumer",
        L"Consumer service",
        SC_MANAGER_ALL_ACCESS,
        SERVICE_WIN32_OWN_PROCESS,
        SERVICE_DEMAND_START,
        SERVICE_ERROR_NORMAL,
        L"\\path\\to\\my\\service.exe",
        NULL, NULL, NULL, NULL, NULL);

    if (!hService)
    {
        CloseServiceHandle(hSCM);
        return FALSE;
    }

    // Set the service protection level
    info.dwFlags = SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT;
    if (!ChangeServiceConfig2W(hService, SERVICE_CONFIG_LAUNCH_PROTECTED, &info))
    {
        wprintf(L"[-] Failed to set service protection level. Error: 0x%x\n", GetLastError());
        CloseServiceHandle(hService);
        CloseServiceHandle(hSCM);
        return FALSE;
    }

    // Start the service
    if (!StartServiceW(hService, 0, NULL))
    {
        wprintf(L"[-] Failed to start the service. Error: 0x%x\n", GetLastError());
        CloseServiceHandle(hService);
        CloseServiceHandle(hSCM);
        return FALSE;
    }

    wprintf(L"[+] Service started successfully");

    CloseServiceHandle(hService);
    CloseServiceHandle(hSCM);
    return TRUE;
}
```

This function opens the service control manager, creates the service, sets the service protection level, and starts the service.