a digit, this digit is replaced by another digit j−i places
further down the single digit sequence “0123456789”,
wrapped around if needed, i.e., ‘9’ is followed by ‘0’.
(2) For the case of j − i < 0: if username-rc (also for
password-rc) is a letter, this lower (or upper) case let-
ter is replaced by another lower (or upper) case letter
i− j places further up the alphabet, wrapped around if
needed, i.e., ‘a’ is followed by ‘z’ (or ‘A’ is followed
by ‘Z’); if username-rc (also for password-rc) is a digit,
this digit is replaced by another digit i−j places further
up the single digit sequence “0123456789”, wrapped
around if needed, i.e., ‘0’ is followed by ‘9’.
Position
j=1
j=2
→i=3
j=4
Username/Password
(kcsmith/Fuzzycat95)
(lcsmith/Fuzzycat05)
(mcsmith/Fuzzycat15)
(ncsmith/Fuzzycat25)
Username/Password
(icsmith/Fuzzycat75)
(jcsmith/Fuzzycat85)
(kcsmith/Fuzzycat95)
→(lcsmith/Fuzzycat05)
(mcsmith/Fuzzycat15)
(ncsmith/Fuzzycat25)
(ocsmith/Fuzzycat35)
Table 1:
Substitution from
the original username/password
pair (mcsmith/F uzzycat15).
Table 2: Derivation from
the username/password pair
(lcsmith/F uzzycat05).
Table 1 illustrates an example of applying the substitu-
tion rule to the original username/password pair (mcsmith
/ Fuzzycat15). In this example, the username replacement
character username-rc is the ﬁrst ‘m’ in the original user-
name and the password replacement character password-rc
is the digit ‘1’ in the original password. These two alphanu-
meric characters will be replaced to generate S − 1 bogus
credentials. If S = 4 and the computed integer position i
is 3, three bogus username/password pairs are generated for
j=1, 2, and 4, respectively.
Finally, BogusBiter submits the S username/password
pairs to a suspected phishing site following their corre-
sponding position order. Using Formula (3) to compute the
integer position i and using their position order to send out
the S credentials, BogusBiter makes it hard for a phisher
to narrow down a victim’s real credential even if the vic-
tim visits a phishing site twice from the same browser and
enters the real credential twice.
Clearly the substitution rule above meets the correlation
requirement. Given any one of the S credentials, we can
derive at most 2 ∗ (S − 1) variations based on the substitu-
tion rule, in which further down replacement produces S−1
variations and further up replacement produces other S − 1
variations. These 2 ∗ (S − 1) variations cover all the S cre-
dentials submitted to the phishing site. Table 2 lists an ex-
ample derivation from the credential (lcsmith / Fuzzycat05).
Initialize the result set as empty : R = ∅;
Algorithm: SCI (f-uname/f-pword)
1.
2. Construct the set : D = {(d-uname/d-pword) : (d-uname/d-pword)
is a credential derived from (f-uname,f-pword) };
for each (d-uname/d-pword) ∈ D do
if d-uname matches a valid account’s username then
if d-pword matches the valid account’s password then
R=R ∪ {(d-uname/d-pword)};
3.
4.
5.
6.
7.
8.
9.
10. return the result set R;
endfor
endif
endif
Figure 2: The Stolen Credential Identiﬁcation (SCI) procedure.
Now let us see how a legitimate web site can take ad-
vantage of the correlation requirement to identify the cre-
dentials stolen by phishing attacks.
If a phisher is lucky
S probability) to choose a victim’s real cre-
enough (with 1
dential as the ﬁrst try to verify at the legitimate web site,
this login attempt will succeed and the legitimate web
site cannot detect the fact that a real credential has been
stolen and veriﬁed. However, for any failed login at-
tempt, the legitimate web site will trigger the procedure of
Stolen Credential Identiﬁcation (SCI), which is illustrated
in Figure 2. SCI takes the failed username/password pair
(f-uname/f-pword) as its input. It constructs the set D
of derived credentials (line 2), and seeks a match between
a derived username/password pair and a valid account’s
username/password pair. Then, it adds any derived user-
350350
name/password pair (d-uname/d-pword) that matches
a valid account’s username/password pair to the result set R
(line 6). SCI ﬁnally returns the result set R as its output.
If the failure of a login attempt is caused by a phisher
who is verifying any one of the S − 1 bogus credentials
generated from a victim’s real credential, SCI must report a
match since the derived credential set D contains the vic-
tim’s real credential. The matched credential is the vic-
tim’s real credential that has been revealed to the phisher,
and is included in the result set R. However, if the fail-
ure of a login attempt is due to any other reasons, even if
there is a chance that a derived username d-uname may
match a valid account’s username (line 4), the probability
that the correspondingly derived password d-pword also
happens to match this valid account’s password (line 5) is
extremely low. This probability is equivalent to that of ran-
domly guessing a valid account’s password. As an exam-
ple, if a user accidentally mistypes the user’s real password
(or an attacker launches online password guessing attacks
against a user), the login attempts will fail but SCI will not
report a match.
Therefore, if the result set R is not empty, the user-
name/password pair 1 contained in R must have been stolen
by a phisher. The legitimate web site can take immediate
actions to protect the victim even before the phisher ﬁgures
out the victim’s real credential. Because SCI is turned on
only when a login attempt fails and it only needs a small
number of veriﬁcations (at most 2 ∗ (S − 1) for our sub-
stitution rule), the overhead is very small for a legitimate
web site. If necessary, this identiﬁcation task can even be
delegated to a separate machine.
3.3.2. Deployment of Defensive Line. While BogusBiter
is installed in a user’s web browser, the defensive line en-
abled by BogusBiter needs to be deployed only on those
legitimate web sites that are really targeted by phishers.
These phishing-targeted legitimate web sites listed in the
APWG database [34] usually have properly registered do-
main names and well-designed web pages, and may even
be whitelisted by some phishing detection tools. None of
their login pages will be mis-classiﬁed as phishing pages
by popular detection tools. The rare false positives [32, 37]
produced by phishing detection tools are mainly caused by
some legitimate web sites that are almost never targeted by
phishing attacks. We do not need to deploy the defensive
line of BogusBiter on them.
3.3.3. Scale-Independency Properties. The defensive
line enabled by BogusBiter also has two valuable scale-
independency properties. First, the efﬁcacy of the defensive
line does not depend on the cheat-to-click ratio, i.e., it does
1The probability of having two or more credential pairs in the result set
R is also extremely low.
not require a large percentage of users to properly respond
to anti-phishing warnings. Second, the efﬁcacy does not
depend upon a massive installation of BogusBiter in users’
browsers, i.e., even a single vulnerable user who installs Bo-
gusBiter can beneﬁt from a deployed defensive line.
4. Implementation
We implemented BogusBiter as a Firefox extension in
JavaScript and C++, and seamlessly integrated it with the
built-in phishing protection feature of Firefox 2 [36]. Bo-
gusBiter consists of four main modules. The information
extraction module extracts the username and password pair
and its corresponding form element on a login page by ana-
lyzing Document Object Model (DOM) objects. The bogus
credential generation module generates bogus credentials
based on an original credential. The request submission
module spawns multiple HTTP requests and submits them
to phishing sites. It uses XMLHttpRequest objects to cre-
ate internal HTTP channels and submit HTTP requests be-
hind the screen. By carefully performing request initializa-
tion, message body replacement, header ﬁelds setting, and
header ﬁelds reordering, this module meets the indiscerni-
bility and usability requirements of BogusBiter. Finally,
the response process module correctly matches responses to
their corresponding requests and properly processes them.
5. Evaluation
We conducted three sets of experiments to evaluate the
potential efﬁcacy of the proposed anti-phishing approach
and our reference implementation.
5.1. Testbed Experiments
In the testbed experiments, we set up an Apache 2 web
server in a Linux machine and hosted over twenty phishing
web pages on it. We used BogusBiter to send various lo-
gin requests to these phishing web pages either directly or
through proxies. By examining both request logs and re-
quest contents at the web server, we veriﬁed that all the S
requests in a set are exactly the same, except for the creden-
tials carried in the request bodies.
5.2. Phishing Site Experiments
In the phishing site experiments, we ran BogusBiter
against 50 veriﬁed phishing sites chosen from PhishTank
[41]. For each phishing site, when it was online, we tested
BogusBiter with four different set sizes of 4, 8, 12, and 16.
Our major experiential ﬁndings are summarized as follows.
First, BogusBiter is capable of attacking all the 50 phish-
ing sites. Acting as either a victim or a security-conscious
351351
Figure 3: Delay on phishing sites.
Figure 4: Delay on legitimate sites.
user, BogusBiter always works correctly. It sends out all the
S requests within 10 milliseconds, and then properly pro-
cesses their responses. In rare cases that phishing sites were
not correctly detected by Firefox 2, we manually corrected
the detection results to trigger BogusBiter.
Second,
the delay caused by BogusBiter is minimal
when the set size S is 4 or 8. Here the delay means the
submission interaction time difference between using Bo-
gusBiter and not using BogusBiter. The submission inter-
action time is the time elapsed between the transmission of
the ﬁrst request and the reception of the last response. Fig-
ure 3 depicts the percentage of phishing sites versus the de-
lay caused by BogusBiter under four different set sizes. We
can see that if the set size S is 4 or 8, for over 85% of phish-
ing sites, the delay is less than 4 seconds. This delay mea-
sure is common to either a security-conscious user or a vic-
tim, but the delay effect is different. A security-conscious
user is unaware of such a delay because the user is actually
redirected to a default web page by Firefox. A victim may
perceive this delay while waiting for the response from the
phishing site. Nevertheless, it is worthwhile adding a small
delay on revealing a victim’s credential, in order to make it
less likely for phishers to succeed.
Third, phishing sites take three different response ac-
tions after receiving a user’s credential submission request.
Among 50 phishing sites, 38 of them simply redirect a user
to the invalid login pages of the targeted legitimate web
sites; 11 of them keep a user at their local sites by using
more faked web pages; and the last phishing site is very
tricky because it veriﬁes the received credential in real time
at the legitimate web site and then sends back a response
based on the veriﬁcation result. All three types of response
actions attempt to continue deceiving a victim and prevent
the victim from realizing that an attack has happened, but
the third type of response action is more deceptive. The de-
fensive line of BogusBiter indeed provides a good opportu-
nity for a legitimate web site to defend against such attacks
in real time.
5.3. Legitimate Site Experiments
In the legitimate site experiments, we ran BogusBiter
against 20 legitimate web sites listed in Table 3. None of
these web sites is classiﬁed as a phishing site by either Fire-
fox 2 or IE 7. We intentionally set the detection results as
phishing to simulate false positive cases, and used real ac-
counts on these legitimate web sites to evaluate the usabil-
ity of BogusBiter. We summarize the major experimental
results as follows.
amazon.com gmail.com cox.com
buy.com
paypal.com
ebay.com
citibank.com ecost.com
53.com
ubid.com
myspace.com
yahoo.com sprint.com walmart.com
msn.com