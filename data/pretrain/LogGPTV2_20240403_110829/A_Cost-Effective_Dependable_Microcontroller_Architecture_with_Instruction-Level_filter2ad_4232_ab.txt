Inst.4
Inst.5
Inst.6
Inst.7
Inst.o(JMP)
.
.
.
Inst.p(RTE)
Inst.7
Inst.8
MA WB
MA WB
EX
ID EX MA WB
IF ID
MA
EX
WB
IF ID EX MA
WB
IF
ID
IF
EX MA WB
ID EX MA
IF
ID
Cancel & 
Branch
IF ID EX
CPU Returns 
to Inst.7 
IF ID
IF
p-4 p-3 p-2 p-1
p
...
...
...
...
CPU Reg.File
0
1
2
3
4
5
6
Backup Reg.File
-2
-1
0                                        
p-6 p-5 p-4 p-3 p-2
RCM Soft Error
RCM Reset
RCM Soft Error 
Exception
...
...
...
...
...
...
...
Soft Error
Rollback State 
Machine
BACKUP 
x
RESET 
RCM_ROLLBACK
...
...
BACKUP 
RCM
Reset Term
RCM Soft Error 
Exception Term
About 70 CP U Cycles
Figure 5. Rollback control ﬂow in RCM
the area overhead will be smaller than the RCM module
redundancy approach because the RCM will require many
logic circuit areas such as a register ﬁle and some queues.
3.3. Rollback architecture for ECC RAM
ECC can correct a single-bit soft error of RAM, but
events such as syndrome generation incur large delay over-
head. In our experience, the delay overhead was 25-30%,
and we needed to add extra read access cycles from RAM
to the CPU. In this study, we developed an ECC error cor-
recting architecture using the rollback method described in
Section 3.2.1. As shown in Figure 6, the CPU writes data
to RAM through a write buffer and check bit generation.
The CPU also reads data directly from the RAM without
passing a syndrome generation. The error correction mod-
ule (ECM) consists of an ECM state machine block and a
correct data write-back control block. If a single-bit error is
detected in CPU read access, an ECC error signal is output
to the RCM and ECM. Then the corrected data is selected
by the correct data write-back control. Because of the ef-
fect of reading before error correction of the ECC RAM, no
critical timing path is created by the syndrome generation.
Figure 7 shows the timing chart when a RAM ECC er-
ror is detected. Normal CPU access is executed in two cy-
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007RAM
(ECC Codes)
ECC Interface
Branch Read Path
ECC Error
CPU
RCM
Syndrome
Generation
Check Bit
Generation
Write Buffer
Write Path
ECC
Correct Module 
(ECM)
Correct Data
Write-Back
Control 
ECM
State Machine
Bus
Figure 6. CPU architecture with ECC RAM
and ECC correction module (ECM)
Cycle
1      2     3     4     5     6     7     8
c1  c2  c3   c4 
First, the RCM has only one set of backup data of the
CPU’s register ﬁle, and the RCM restores the data in the
rollback process. Therefore if a new soft error occurs during
rollback, the RCM cannot continue the rollback process. In
that case, the RCM issues a rollback miss signal, as shown
in the lower right of Figure 2. Although the CPU might
restart correctly, there is a possibility of a CPU crash or
runaway.
Second, we implemented the rollback control process as
an exception routine of the CPU. Therefore, if a soft error
occurs in the F/F of the exception control logic circuits, the
soft error exception routine might be incorrect. We protect
against such critical control F/Fs with a TMR approach.
When these architectures are applied to safety critical
systems, the system will require emergency functions, such
as stopping safely, when the rollback miss signal is issued.
CPU  Access(Adr)
R1
W2
R3
...
Cancel 
CPU Read
CPU  Access(Dat)
D1
D2
D3
2 Cycle Read/Write
R3
D3
4. Evaluation
ECC Error
ECM State 
Machine
ECM  Access(Adr)
ECM  Access(Dat)
NORMAL                  
E.E
E.A
C.W
NORMAL                
...
ER
EW
Rollback State 
Machine
BACKUP 
DET-
ECT
CPU_ 
RESET 
CPU_ 
ROLLBACK
BACKUP 
E.E: ECC Error
E.A: EC M Access
C.W: Correct Data Write-Back
Figure 7. Timing chart of ECC error rollback
cles as read cycles 1-2, or write cycles 3-4. In cycle 6, a
single-bit ECC error is detected in RAM when the CPU
reads data ”D3” from the RAM address. As a result, the
ECM state machine changes to ECC error (E.E), and the
rollback state machine changes to DETECT. In cycle 7, the
ECM state machine changes to ECM access (E.A) which
accesses the error address of RAM, and in the next cycle,
8, the ECM state machine is in the correct data write-back
state (C.W). In this C.W state, the ECM writes the data cor-
rected by the syndrome generation circuit back to the error
RAM address. This write-back process corrects a single-bit
soft error in RAM. The rollback state machine then changes
CPU RESET and the CPU is reset. The rollback process is
then executed as explained in Section 3.2.1, Figure 3. After
the rollback process is ﬁnished, the CPU restarts read access
”R3” again in cycle c3 and the CPU execution goes on.
3.4. Restrictions of the rollback architec-
ture
Our rollback architectures have a few restrictions.
We implemented the proposed architectures and evalu-
ated them in a four-step process, as shown in Figure 8.
Step 1: We used ”Original-MCU”, an original microcon-
troller that includes a 32-bit ﬁve-pipelined RISC CPU core
described in Verilog-HDL at register transfer level (RTL).
Memory controller (MEMC) and Other are also RTL ran-
dom logic circuits. The built-in RAM is a hardware macro
block.
Step 2: We designed new modules RCM, ERM, and
ECM, and then built them into the Original-MCU, and
added ECC bits to the RAM. We use the easiest implemen-
tation for ECC, calculating Hamming code for each byte of
RAM. We will call this microcontroller ”PRE-MCU”.
It
does not yet include soft error-detecting logic circuits and
error detecting signals. We also apply static timing analysis
(STA) to PRE-MCU to obtain a timing report.
Step 3: A PRE-MCU RTL and timing report are input
to the automatic generation EDA tool. This tool gener-
ates optimized soft error-detecting logic circuits to the PRE-
MCU RTL, and outputs a new microcontroller RTL, ”GEN-
MCU”.
Step 4: We synthesized this GEN-MCU, and obtained
the area and frequency reports. Finally, to evaluate the ef-
fect of RCM, ERM, and ECM, we ran the logic simula-
tions using EEMBC benchmarks and obtained mean time
between failure (MTBF) reports.
4.1. Area and frequency overheads
To verify the effectiveness of the tool that automatically
generates soft error-detecting logic circuits, we designed the
ﬁve types of architecture conﬁgurations shown in Table 1.
(A) Original-MCU and (B) PRE-MCU correspond to Fig-
(C) GEN-MCU P generates only parity for every
ure 8.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Step 1
Original-MCU (RTL)
32-bit RISC CPU core
CPU
CPU
Control Unit
Data Path
(CPUC)
(CPUD)
On-Chip
RAM
(Hard Macro)
Memory
Controller
(MEMC)
Other
Step 2
PRE-MCU (RTL)
CPU
CPUC CPUD
RCM
ERM
 Prepare original microcontroller
 Design RCM
 Design ERM
 Design ECM
 Add ECC bits to RAM
 Get timing report by STA
On-Chip
RAM
ECC bits
Step 3
MEMC Other
ECM
STA
Timing 
Timing 
Report of 
Report of 
PRE-MCU
PRE-MCU
]
 [%
a
re
A
 Generate soft error detecting
logic circuits using developed 
EDA tool
Developed EDA Tool
GEN-MCU (RTL)
CPU
RCM
CPUC CPUD
ERM
On-Chip
MEMC
RAM
ECM
Other
ECC bits
Step 4
Soft Error Detecting Logic Circuits
 Get area and frequency reports by
Logic Synthesis
Logic Simulation
logic synthesis
Area and Frequency 
Area and Frequency 
Reports
Reports
(Section 4.1)
(Section 4.1)
MTBF  Reports
MTBF  Reports
( Section 4.2.1,
( Section 4.2.1,
4.2.2, 4.3)
4.2.2, 4.3)
 Get MTBF reports by logic simulation
using EEMBC benchmarks
Figure 8. Proposed microcontroller architec-
ture and design environment for evaluation
F/F. (D) GEN-MCU R generates only F/F redundancy for
every F/F. (E) GEN-MCU O generates optimized detecting
circuits using the developed EDA tool.
The results for area and frequency obtained by logic syn-
thesis are shown in Figure 9. First, the area overhead of
(B), which includes RCM, ERM, ECM, and ECC bits, was
about 40%. Here, (B) could maintain the frequency of (A)
because of the contributions of the branched read data path
from the ECC critical path, but (B) does not include the soft
error detecting signals and detecting timing paths. Next, in
(C), the area overhead was about 62% (that of the generated
circuit was 32%), and the frequency was 69% because of
Table 1. Logic circuits for evaluation
Circuit Name
Circuit Name
Architecture Configuration
Architecture Configuration
(A) Original-MCU
(A) Original-MCU
Original microcontroller architecture
Original microcontroller architecture
(B) PRE-MCU
(B) PRE-MCU
(A) + RCM + ERM + ECM + ECC bits
(A) + RCM + ERM + ECM + ECC bits
(C) GEN-MCU_P
(C) GEN-MCU_P
(B) + Generating “parity” for every F/F 
(B) + Generating “parity” for every F/F 
(D) GEN-MCU_R
(D) GEN-MCU_R
(E) GEN-MCU_O
(E) GEN-MCU_O
(B) + Generating “F/F redundancy” for every F/F
(B) + Generating “F/F redundancy” for every F/F
(B) + Generating optimized detecting circuits using tool
(B) + Generating optimized detecting circuits using tool
RAM
ECC bits
CPU
RCM
ERM
MEMC
Other
100.00%
(  --- )
139.86%
(  --- )
162.16%
(131.63%)
163.50%
(133.54%)
158.77%
(126.82%)
175
150
125
100
])
 [%
its
u
irc
 C
ic
g
o
 L
g
tin
c
te
e
r D
rro
ft E
o
f S
 o
d
a
e
rh
e
v
(O
75
50
25
(A)Original-MCU
(B)PRE-MCU
(C)GEN-MCU_P
(D)GEN-MCU_R
(E)GEN-MCU_O
Frequency
Frequency
100.00%
100.00%
100.00%
100.00%
69.13%
69.13%
89.85%
89.85%
91.28%
91.28%
Figure 9. Area and frequency results
(A)Original-MCU
(100%, 100%)
100
(B)PRE-MCU
(140%, 100%)
Logic Circuits
(Area [%], Delay [%])
(D)GEN-MCU_R
(164%, 90%)
90
]
 [%
80
y
c
n
e
u
q
re
F
70
60
(E)GEN-MCU_O
(159%, 91%)
TMR & ECC RAM
(Prediction, 246%, 75%)
(C)GEN-MCU_P
(162%, 69%)
DMR & ECC RAM 
(Prediction, 185%, 75%)
50
100
150
Area [%]
200
250
Figure 10. Trade-off between area and fre-
quency
parity generation. In (D), the area overhead was 63% (that
of the generated circuit was 33%), but the frequency of (D)
decreased by only 10%. In (E), which uses the optimizing
techniques, the area overhead was under 59% (that of the
generated circuit was under 27%) and the frequency over-
head was under 9%. The area of ERM was about 0.10%,
too small to be apparent in the graph.
The trade-off between area and frequency from (A) to
(E) is shown in Figure 10. This graph shows that overheads
decrease as we move to the upper left. Two data plots are
added to the graph in Figure 10: DMR with ECC RAM
and TMR with ECC RAM. Neither was implemented in this
study; they are only predicted values. Figure 10 shows that
our approach obtained a good trade-off between area and
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007frequency. Additionally, the soft error-detecting logic cir-
cuits generation time was only about 20 seconds in (E) on
an UltraSPARC-III platform, meaning that this tool enables
rapid design of highly reliable microcontrollers.
4.2. MTBF results for random logic circuits
with rollback architecture and soft er-
ror injection
We evaluated the MTBF of a microcontroller with the
proposed rollback architecture. We used the microcon-
troller RTLs of (A) Original-MCU (Original) and (E) GEN-
MCU O (GEN-MCU) described in Section 4.1 in an envi-
ronment where soft errors occur. We used eight EEMBC
benchmarks for soft error logic simulation. We assumed
the following active soft errors: unexpected data transfers
on the on-chip bus, indetermination of the CPU’s PC, itera-
tion of illegal instruction loops, and rollback misses. In this
evaluation, the soft error-active rate and the MTBF cycle are
deﬁned as follows:
Sof t Error Active[%] =
Simulation F ailure
Sof t Error Injection
× 100
M T BF [cycle] =
T otal Run Cycle
Simulation F ailure
MTBF
(1)
(2)
The logic simulation stops when a soft error is injected
and active, then the simulation restarts the same benchmark