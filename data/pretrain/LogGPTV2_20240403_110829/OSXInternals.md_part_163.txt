IDs. These IDs are hashed to yield offsets into the quota hash tables.
We can enable user (group) quotas on a volume by creating an empty mount options file
named .quota.ops.user (.quota.ops.group) in the volume's root directory. The presence of this file would
cause user (group) quotas to be enabled at mount time, provided a .quota.user (.quota.group) file also
exists. The latter file is created by running the quotacheck program.
Let us create an HFS+ disk image and enable quotas on it. By default, a Mac OS X client installation does not
have quotas enabled. You can use the quota or repquota commands to view quota information for a file
system.
$ sudo repquota -a
$ hdiutil create -size 32m -fs HFSJ -volname HFSQ /tmp/hfsq.dmg
$ open /tmp/hfsq.dmg
$ mount -u -o perm,uid=99 /Volumes/HFSQ
$ sudo touch /Volumes/HFSQ/.quota.ops.user /Volumes/HFSQ/.quota.ops.group
$ sudo quotacheck -ug /Volumes/HFSQ
quotacheck: creating quota file /Volumes/HFSQ/.quota.user
quotacheck: creating quota file /Volumes/HFSQ/.quota.group
We can now turn quotas on using the quotaon command.
$ sudo quotaon -ug /Volumes/HFSQ
$ sudo repquota -u /Volumes/HFSQ
1K Block limits File limits
User used soft hard grace used soft hard grace
amit -- 8 0 0 4 0 0
We see that the user has already consumed a few inodes (because of .DS_Store and such). We can edit a
user's quota values using the edquota command, which will launch the text editor specified by the EDITOR
environment variable (or vi, if EDITOR is not set).
$ sudo edquota -u amit
Quotas for user amit:
/Volumes/HFSQ: 1K blocks in use: 8, limits (soft = 0, hard = 0)
inodes in use: 4, limits (soft = 4, hard = 4)
We change the soft and hard limits and save the file, after which there is a limit on the total number of files
and folders the user can have on this volume.
$ sudo repquota -u /Volumes/HFSQ
1K Block limits File limits
User used soft hard grace used soft hard grace
amit -+ 8 0 0 4 4 4
repquota reports the updated quota limits for user amit. Let us attempt to exceed this limit.
$ touch /Volumes/HFSQ/file.txt
touch: /Volumes/HFSQ/file.txt: Disc quota exceeded
12.8.6. Hard Links
On typical Unix file systems, each file has an associated link count representing the number of physical
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 55 of 81
references to it. Suppose a file foo has a link count of 1. If you make a hard link bar to it (using the ln
command or the link() system call), the following statements will apply to the two files.
 foo and bar are two different pathnameswith corresponding directory entriesthat refer to the same
physical file on disk. The links are equivalent in all respects. The stat() system call will return the
same inode numbers for foo and bar.
 The link count of the file becomes 2. Since foo and bar are equivalent, the link counts of both files will
be reported as 2.
 If you remove either foo or bar, the link count will decrease by 1. As long as the link count is greater
than 0, the physical file will not be deleted.
We can consider a hard link to be simply another directory entry for an existing file. Normally, only files are
allowed to have hard links, as hard links to folders can create cycles in the folder hierarchywith highly
undesirable results. Hard links may also not span across file systems.
Early versions of UNIX allowed the superuser to create a hard link to a directory.
Hard links to a file on HFS+ are conceptually similar to those on Unix systems: They represent multiple
directory entries referring to common file content. The Mac OS X implementation of HFS+ hard links uses a
special hard-link file for each directory entry. The common file content is stored in another special file: the
indirect-node file.
The linkCount field in the HFSPlusBSDInfo structure, which we saw in Section 12.8.3, holds the link count
for a file. A folder also has a link count that represents the number of its directory entries. However, a folder's
HFSPlusBSDInfo structure does not hold the folder's link count in its linkCount fieldthe valence field of the
HFSPlusCatalogFolder structure does. A folder's link count value, as reported by the Unix APIs, is two more
than the on-disk value because of the . and .. directory entries, which are dummy entries on HFS+.
A hard-link file has a file type hlnk and a creator code hfs+. It is otherwise an ordinary file in the Catalog B-
Tree. All indirect-node files are stored in the private metadata folder, which resides in the file system's root
directory. When an HFS+ volume is mounted, the kernel checks for the existence of this folder, creating it if it
doesn't exist. Several measures such as the following are taken to make the metadata folder tamper-resistant.
 Its name is four null characters (NUL) followed by the string "HFS+ Private Data".
 Its permissions are set to 000 by defaultthat is, no read, write, or execute access to anyone.
 It is set to be invisible in the Finder through the kIsInvisible Finder flag.
 Its kNameLocked Finder flag is set so that it cannot be renamed, nor can its icon be changed, from the
Finder.
Its icon location is set to (22460, 22460) in its Finder information.
The folder may be seen[22] from Open Firmware, where it sorts last in the output of the dir command.
[22] However, the folder is not visible from an EFI shell.
0 > dir hd:\
...
10/ 7/ 3 2: 7:21 %00%00%00%00HFS+%20Private%20Data
hfsdebug can be used to display the properties of this folder and those of its contents (Figure 1226 shows an
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 56 of 81
example). Since the folder is created before user files are created, it will typically have a low CNID. Given that
the first user-available CNID is 16, the metadata folder is likely to have the CNID 18 on a journaled volume,
since CNIDs 16 and 17 would have been taken by the two journal files.
Figure 1226. Examining the HFS+ private metadata folder and hard-link creation
$ hdiutil create -size 32m -fs HFSJ -volname HFSLink /tmp/hfslink.dmg
$ open /tmp/hfslink.dmg
$ hfsdebug -V /Volumes/HFSLink -c 18
path = HFSLink:/%00%00%00%00HFS+ Private Data
# Catalog Folder Record
...
# BSD Info
ownerID = 0 (root)
groupID = 0 (wheel)
adminFlags = 00000000
ownerFlags = 00000000
fileMode = d---------
...
frFlags = 0101000000000000
. kNameLocked
. kIsInvisible
frLocation = (v = 22460, h = 22460)
...
$ cd /Volumes/HFSLink
$ touch file.txt
$ ls -i file.txt # note the inode number
22 file.txt
$ ln file.txt link.txt
$ sudo hfsdebug link.txt
path = HFSLink:/link.txt
# Catalog File Record
type = file (hard link)
file ID = 24
flags = 0000000000000010
. File has a thread record in the catalog.
...
# BSD Info
ownerID = 0 (root)
groupID = 0 (wheel)
adminFlags = 00000000
ownerFlags = 00000000
fileMode = ----------
iNodeNum = 22 (link reference number)
...
# Finder Info
fdType = 0x686c6e6b (hlnk)
fdCreator = 0x6866732b (hfs+)
...
$ ls -l link.txt
-rw-r--r-- 2 amit amit 0 Oct 12 05:12 link.txt
It is also possible for the superuser to change directory to the private metadata folder (from a shell, say),
provided its pathname is passed to the cd command appropriately. The problem is that the folder's name begins
with NUL characters, which terminate C-style strings. We can use the NUL character's UTF-8 representation,
which is the following byte sequence: 0xe2, 0x90, 0x80.
$ sudo /bin/zsh
# cd /Volumes/HFSLink
# cd "`echo '\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80HFS+ Private Data'`"
# ls -l
iNode22
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 57 of 81
We see that the metadata folder on our example volume contains a single file named iNode22. We also see that
22 is the link reference number reported for the hard-link file (link.txt) we created in Figure 1226iNode22 is
the indirect-node file for the hard link in question. An interesting observation is that the ownership and file
mode details for link.txt in Figure 1226 do not match between hfsdebug and the ls command. This is
because link.txt is a kernel-owned reference to iNode22, which holds the original contents (along with the
original ownership and file mode information) of the hard link's target file.txt. In fact, file.txt is also a
hard-link file now and has properties similar to those of link.txt.
$ cd /Volumes/HFSLink
$ hfsdebug file.txt
...
# Catalog File Record
type = file (hard link)
indirect node file = HFSLink:/%00%00%00%00HFS+ Private Data/iNode22
file ID = 23
...
HFS+ indirect-node files are always named iNode, where  is a link reference number represented
in decimal. Link reference numbers are randomly generated. They are unique on a given volume but are
unrelated to CNIDs.
Note that the CNIDs of file.txt and link.txt are 23 and 24, respectively. Since hard-link semantics require
that all hard links to a given file have the same inode numbers, in this case, HFS+ does not report the hard-link
files' CNIDs as their respective inode numbers. Instead, it reports the indirect-node file's CNID, which is the
same as the original CNID of file.txt, as the inode numbers of both hard-link files.
$ ls -i file.txt link.txt
22 file.txt 22 link.txt
We can now summarize the process of hard-link creation on HFS+ as follows. When the first hard link is
created to a file, its link count goes from 1 to 2. Moreover, the file's content is moved to the private metadata
folder as an indirect-node file, which retains the CNID and other properties of the original file. Two new
entries are created in the catalog: one for the original pathname and the other for the newly created hard link.
The "original" notwithstanding, both are brand-new entrieshard-link filesthat serve as references to the
indirect-node file. Both have the file type hlnk and the creator code hfs+. Although they have their own
CNIDs that are unrelated to the original file's CNID, the stat() system call still reports the latter as the inode
number of each hard-link file. When a user accesses a hard-link file, HFS+ automatically follows it so that the
user actually accesses the indirect-node file.
12.8.7. Unlinking Open Files
Whereas Carbon semantics prohibit deletion of open files, POSIX semantics do not. HFS+ supports both
behaviors: The delete() and unlink() system calls provide Carbon and POSIX semantics, respectively. The
private metadata folder is used to store files that are unlinked while they are still open, or busy. Such files are
renamed and moved to the metadata folder, where they are stored temporarilyat least until they are closed. If
the busy file being unlinked has multiple nonzero forks, any forks that are not busy are truncated.
We can observe this behavior by listing the contents of the private metadata folder after using the rm command
to remove a busy filesay, one that we are viewing using the less command. Figure 1227 shows this
experiment.
Figure 1227. Use of the private metadata folder for storing unlinked busy files
$ sudo /bin/zsh
# cd /Volumes/HFSLink
# cd "`echo '\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80HFS+ Private Data'`"
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 58 of 81
# echo hello > /Volumes/HFSLink/busyunlink.txt
# hfsdebug /Volumes/HFSLink/busyunlink.txt
...
file ID = 27
...
extents = startBlock blockCount % of file
0xaf9 0x1 100.00 %
...
# less /Volumes/HFSLink/busyunlink.txt
hello
/Volumes/HFSLink/busyunlink.txt lines 1-1/1 (END)
^z
zsh: suspended less /Volumes/HFSLink/busyunlink.txt
# rm /Volumes/HFSUnlink/busyunlink.txt
# ls
iNode22 temp27
# cat temp27
hello
# hfsdebug temp27
...
file ID = 27
...
extents = startBlock blockCount % of file
0xaf9 0x1 100.00 %
...
As seen in Figure 1227, a temporary file appears in the private metadata folder after a busy file is unlinked.
The file is a moved version of the original file, with any nonbusy forks truncated.
It is possible for the "temp" files in the private metadata folder to persist across a reboot if the volume was not
cleanly unmounted. Such files are called orphaned files. They are removed when the volume is mounted next.
12.8.8. Symbolic Links
A symbolic link (or symlink) is a file system entity that refers to another file or folder by relative or absolute
pathname. The following are some important properties of symbolic links.
Unlike the case of a hard link, a symbolic link's target may reside on a different file system or may not
even exist.
Unlike HFS+ aliases (see Section 12.8.9), if a symbolic link's target is renamed or deleted, the symbolic
link is not updated in any wayit is broken.
Most file operations on a symbolic link are forwarded to its target. Some system calls have special
versions that operate on symbolic links themselves, rather than their targets.
The ownership and file mode of a symbolic link file are unrelated to its target. Although a symbolic
link's ownership can be changed through the lchown() system call, there is no analogous call to change
the file mode of a symbolic link.
Symbolic links can easily lead to cycles, for example:
$ ln -s a b
$ ln -s b a
$ cat a
cat: a: Too many levels of symbolic links
HFS+ implements symbolic links as normal files whose data forks contain the UTF-8-encoded pathnames of
their targets. A symbolic link file's resource fork is empty. Moreover, the file's type and creator code are slnk
and rhap, respectively.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 59 of 81
$ cd /Volumes/HFSLink
$ echo hello > target.txt
$ ln -s target.txt symlink.txt
$ hfsdebug symlink.txt
...
# Catalog File Record
type = file (symbolic link)
linkTarget = target.txt
...
# Finder Info
fdType = 0x736c6e6b (slnk)
fdCreator = 0x72686170 (rhap)
...
You can even synthesize your own symbolic links manually by simply setting the file type and creator code of
a file. If the file contains a valid pathname, it will be a working symbolic link.
$ cd /tmp
$ echo hello > target.txt
$ echo -n /tmp/a > symlink.txt
$ ls -l /tmp/symlink.txt
-rw-r--r-- 1 amit wheel 15 Oct 12 07:25 /tmp/symlink.txt
$ /Developer/Tools/SetFile -t slnk -c rhap /tmp/a
$ ls -l /tmp/symlink.txt
lrwxr-xr-x 1 amit wheel 15 Oct 12 07:25 /tmp/symlink.txt -> /tmp/target.txt
$ cat /tmp/symlink.txt
hello
The SetFile program is part of Apple Developer Tools. Alternatively, you can set a file's type and creator
code by setting the com.apple.FinderInfo pseudo extended attribute or by using the FSSetCatalogInfo()
Carbon function.
12.8.9. Aliases
Aliases, which are supported by both HFS and HFS+, are lightweight references to files and folders. An alias
has semantics similar to that of a symbolic link, except that it fares better when the link target is moved: It has
the special property that moving its target on the volume does not break the alias, whereas a symbolic link
would break if its target were moved.
The resource fork of an alias file is used to track the alias target by storing both the pathname and the CNID of
the target. The CNID works as a unique, persistent identity that will not change when the target is moved.
When an alias is accessed, it can withstand the staleness of one of the two references (pathname or unique
identity). If one of the two is wrong in that the target cannot be found using it, the alias is updated with the
correct one (using which the target could be found). This feature is the reason why it is possible to rename
applications or move them to different places on a volume without breaking their Dock shortcuts.
An alias is described by an alias-record data structure. An alias's target may be a file, directory, or volume.
Besides the target's location, an alias record contains some other information such as creation date, file type,
creator code, and possibly volume mounting information.
To make use of aliases, an application must use either the Carbon API or the Cocoa APIaliases are not
available through the Unix API. On the other hand, although the Finder presents aliases and symbolic links
similarly to the user, it allows creation of aliases only through its user interface. Symbolic links must be
created by using the ln command or programmatically through the Unix API.
Figure 1228 shows a Python program that resolves an alias and prints the pathname of its target.
Figure 1228. A Python program to resolve an alias
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 60 of 81
#! /usr/bin/python
# ResolveAlias.py
import sys