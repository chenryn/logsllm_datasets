# Regulating E-Commerce through Certified Contracts

**Author:** Victoria Ungureanu  
**Affiliation:** Rutgers University, 180 University Ave., Newark, NJ, USA  
**Email:** [PI:EMAIL]

## Abstract
Traditional access control mechanisms often assume a single, monolithic authorization policy, typically expressed as an access matrix. However, this assumption is not well-suited for e-commerce applications, which are governed by a potentially large and dynamic set of contracts. To address this, we propose an enforcement mechanism that uses certified contracts as authorization policies. A certified contract is created by (a) expressing the contract terms in a formal, interpretable language, and (b) having it digitally signed by a trusted authority. This approach enhances the manageability and efficiency of contract dissemination, revision, and annulment.

We introduce a language for specifying contract terms and provide several formal examples of certified contracts. The paper also describes the implementation of the enforcement mechanism, which can be integrated into a web server or deployed as a separate server with an application interface. The proposed model does not require significant changes to the existing certificate infrastructure and only minor modifications to servers.

## 1. Introduction
To reduce costs, increase competitiveness, and improve efficiency, more enterprises are moving towards online transactions with trading partners [8]. One of the most critical challenges in such initiatives is managing the activities of the diverse agents involved in e-commerce.

Trading relationships are based on mutually agreed-upon contracts, which specify authorized agents, rights and obligations, and terms and conditions. Control in these relationships is thus an ancillary function of the commercial agreements.

An enterprise may be bound by multiple contracts simultaneously, each regulating its trading relationships with different clients and suppliers. Currently, there are two main methods to establish a set of policies: (1) using a dedicated server for each policy [7, 14], and (2) combining them into a single super-policy [3, 5]. We argue that both approaches are problematic in the e-commerce context.

Maintaining a dedicated server for each contract is costly if the number of contracts is large, as is increasingly the case for many modern enterprises. For example, Ford has approximately 30,000 suppliers, each operating under a different contract, and General Motors has about 40,000 [9]. Both companies have announced their intention to conduct inter-enterprise business online.

Combining all policies into a single super-policy is also challenging due to the large number of contracts. New contracts are frequently established, and existing ones end or are revised. Each modification necessitates changes to the super-policy, leading to maintenance difficulties.

In the e-commerce context, maintaining a large, ever-changing policy that subsumes all contracts becomes impractical and error-prone. Establishing a dedicated server for each contract is also unfeasible. To address these issues, we propose using the certificate framework for contract support. Certificates, which are digitally signed statements, are commonly used to establish trust between parties who are physically distant or do not know each other. In e-commerce, the policy enforced by a server is defined by the agreed contract terms. We propose that digital signatures should be used not only to certify user credentials but also to authenticate the contract rules used for authorization.

A certified contract (CC) is created by (a) expressing contract terms in a formal, interpretable language and (b) having it digitally signed by a trusted authority. An agent making a request presents a CC to the server along with other relevant credentials. A valid CC can then serve as the authorization policy for the request.

This approach makes several aspects of contract enforcement more manageable and efficient:
- **Deployment:** Contracts sanctioned by an enterprise can be stored on repositories (e.g., a web server), from where agents can retrieve CCs as needed.
- **Annulment:** Contract annulment can be modeled by certificate revocation.
- **Revision:** If a contract needs to be revised, a new CC can be published, and the old one can be revoked.

These operations can be performed in a scalable manner, independent of the number of servers enforcing a given contract or the number of contracts supported by a given server.

The rest of the paper is organized as follows: Section 2 describes how contracts can be modeled as CCs and provides an example. Sections 3, 4, and 5 discuss the deployment, revocation, and updating of certified contracts. Section 6 introduces the system implementation. Section 7 discusses related work, and Section 8 concludes the paper.

## 2. Expressing E-commerce Contracts as Certified Contracts
When formalizing contracts into CCs, our goal is to closely mirror the social notion of a contract while tailoring it for e-commerce needs. At the societal level, a contract is an agreement between two or more parties, specifying the time frame, authorized agents, rules of conduct, and penalties for non-compliance. A certified contract should define these terms in a formal language. Section 2.1 presents a possible language for expressing contract rules and a concrete example.

Contracts may be nullified before their validity period ends due to changes in legislation, bankruptcy, etc. Contract annulment can be modeled by certificate revocation, provided there are trusted revocation servers that maintain and propagate information about contract annulment, and each contract references the appropriate revocation server.

Contract updates can be handled by revising the contract rather than nullifying it. We assume each contract is identified by a name and version number, with the latest version maintained by a repository whose address is specified in the CC.

Certified contracts should contain the following mandatory components:
- **Type:** Denotes the type of the certificate (type(contract) distinguishes CCs from subject certificates).
- **Name:** Identifies the contract.
- **Version:** Specifies the contract version, supporting revisions.
- **Validity Period:** Specifies the contract's validity period.
- **Revocation Server:** Address of the server maintaining/disseminating information about contract revocation.
- **Repository:** Address of the server maintaining the latest version of the contract.
- **Contract Terms:** Specifies the contract terms in a formal language.

Finally, a certified contract is obtained by signing a statement containing these attributes by an issuer trusted by all participating parties.

### 2.1. Expressing Contract Terms
Contract terms can be naturally expressed using event-condition-action (ECA) rules. We use an extension of a language devised for control policies [12, 13] built on top of Prolog. The language is secondary in importance; the key is the ability to express contract terms formally.

In this language, contract terms are embedded in rules of the form:
```prolog
eval(R, Cert):-
    condition-1, ..., condition-k,
    provision-1, ..., provision-n,
    do(accept).
```
This rule states that if `condition-1` through `condition-k` are satisfied, the request is valid. These conditions may refer to the content of the request and the presented certificates. The rule also calls for carrying out `provision-1` through `provision-n`, denoting any additional actions required by the contract.

In addition to standard Prolog goals, the body of a rule may contain a `do-goal` of the form `do(p)`, where `p` is a primitive operation. A sample of primitive operations is shown in Figure 1.

#### Example
To demonstrate how contracts can be expressed as certified contracts, consider a simple contract between Ford and RCA. Agents at Ford may purchase audio equipment from RCA if:
- Purchase offers are issued between June 1 and July 1, 2002.
- Only agents certified as purchase officers by Ford CA1 (a designated certification authority) may issue purchase orders (POs).
- Only agents certified as sales representatives by RCA CA (a designated certifying authority) are authorized to respond to POs.
- A copy of all accepted POs must be sent to a designated audit trail.

This contract is formalized by the certified contract shown in Figure 2, which includes the preamble and rules. Each rule is followed by a comment in italics to aid understanding, even for readers not well-versed in Prolog.