title:Regulating E-Commerce through Certified Contracts
author:Victoria Ungureanu
Regulating E-Commerce through Certiﬁed Contracts
∗
Victoria Ungureanu
Rutgers University
180 University Ave.
Newark, NJ, USA
PI:EMAIL
Abstract
Access control has traditionally assumed a single, mono-
lithic authorization policy, generally expressed as an ac-
cess matrix. We argue that this assumption does not ﬁt e-
commerce applications, which are governed by a potentially
large set of independently stated, evolving contracts. In or-
der to support this growing class of applications we propose
an enforcement mechanism which uses certiﬁed-contracts
as authorization policies. A certiﬁed-contract is obtained:
(a) by expressing contract terms in a formal, interpretable
language, and (b) by having it digitally signed by a trusted
principal. We show that this approach would make dissemi-
nation, revision, and annulment of contracts more manage-
able and more efﬁcient.
We propose a language for stating contract terms, and
present several formal examples of certiﬁed contracts. The
paper describes the implementation of the enforcement
mechanism, which can be used as an extension to a web
server, or as a separate server with interface to application.
The proposed model does not require any modiﬁcation of
the current certiﬁcate infrastructure, and only minor modi-
ﬁcations to servers.
1. Introduction
In order to save money, be competitive and be efﬁ-
cient, more and more enterprises are taking steps towards
conducting transactions with trading partners on-line [8].
Among the problems inherent in such projects none is more
serious than the difﬁculty to control the activities of the dis-
parate agents involved in e-commerce.
Trading relations are based on mutually agreed upon
contracts. Generally, these contracts enumerate agents au-
thorized to participate in transactions, and spell out such
∗
Work supported in part by DIMACS under contract STC-91-19999
ITECC, and by Information Technology and Electronic Commerce Clinic,
Rutgers University
things like rights and obligations of each partner, and terms
and conditions of the trade. Control occurs then as an an-
cillary to such commercial agreements.
An enterprise may be concurrently bound by a set of dif-
ferent contracts that regulate the trading relations with its
various clients and suppliers. There are currently two main
methods to establish a set of policies: (1) to establish a ded-
icated server for each policy( for e.g.
[7, 14]), and (2) to
combine them into a single super-policy (for e.g.
[3, 5]).
We will argue that both approaches are problematic in e-
commerce context.
Having a dedicated server for each contract is an expen-
sive proposition, if the number of contracts an enterprise is
bound by is very large. This is increasingly the case for
many modern enterprises. For example, Ford has approx-
imately thirty thousand suppliers, each operating under a
different contract, and General Motors has about forty thou-
sand [9] (both companies have recently announced their in-
tention to perform their inter-enterprise business on-line).
The large number of contracts also makes combination
of policies difﬁcult to perform. Moreover, even if it would
be possible to create such a composition, it would still be
very problematic to maintain it. New contracts are being
constantly established, and previously established contracts
end, or are being revised. Each such modiﬁcation triggers,
in turn, the modiﬁcation of the composition-policy, leading
to a maintenance nightmare.
Thus, in e-commerce context, a huge, ever-changing
policy, subsuming all contracts by which an enterprise is
bound, becomes prohibitively hard and error-prone to main-
tain. And establishing a dedicated server for each contract
is simply unpractical. To deal with these problems, we
propose, in this paper, to use the certiﬁcate framework for
contract support. Certiﬁcates, by which we mean digitally
signed statements of some sort, are commonly used to es-
tablish trust between parties who are physical distant or do
not know each other. Generally, a certiﬁcate conveys infor-
mation regarding a subject—a software agent or a human
user. Certiﬁcate based authorization is carried out as fol-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
lows: An agent submits a request, together with a certiﬁcate
(or a list of certiﬁcates), to a server. The server veriﬁes the
credentials and grants or denies the request, according to its
internal, predeﬁned access control policy.
In e-commerce context, the policy that a server has to
enforce is denoted by the agreed contract terms. We are
proposing here that digital signatures should be used not
only to certify the credentials a user presents, but also to
authenticate the contract rules that a server uses for autho-
rization purposes. Namely, this approach assumes that: (a)
the contract terms expressed in a formal, interpretable lan-
guage are digitally signed by a proper authority, and (b) an
agent making a request presents to a server such a certiﬁed-
contract (abbreviated here as CC), together with other rele-
vant credentials. A valid certiﬁed-contract can then be used
as the authorization policy for the request in question.
It is the thesis of this paper that this approach would
make several aspects of contract enforcement more man-
ageable and more efﬁcient:
(cid:127) deployment: Contracts sanctioned by an enterprise
may be stored on repositories (such as a Web server),
from where agents may retrieve certiﬁed-contracts as
needed.
(cid:127) annulment: Contract annulment can be modeled
conveniently by certiﬁcate revocation.
(cid:127) revision: If a contract needs to be revised, this can
be done simply by publishing a new certiﬁed-contract,
and by revoking the old one.
It is worth noting that all of the above operations can be per-
formed in a scalable manner, since their performance does
not depend on the number of servers that enforce a given
contract, nor on the number of contracts that are supported
by a given server.
The rest of the paper is organized as follows: We start, in
Section 2, by describing how contracts can be modeled as
CCs, and by illustrating this concept with an example. We
follow, in Sections 3, 4 and 5 by discussing how certiﬁed-
contracts can be deployed, revoked and updated. The sys-
tem implementation is introduced in Section 6. Section 7
discusses related work, and we conclude in Section 8.
2. Expressing E-commerce Contracts as Certi-
ﬁed Contracts
When formalizing contracts into CCs our goal is to mir-
ror as closely as possible the social notion of contract, while
tailoring it for the speciﬁc needs of e-commerce. At the so-
cietal level, a contract embodies an agreement between two
or more parties involved in a certain (economic) activity,
and refer to such things as: the time frame in which the ac-
tivity in question is to be completed, the agents authorized
to participate, the expected rules of conduct of participating
agents, and the penalties incurred for not complying with
the rules. It follows that a certiﬁed-contract should deﬁne,
in a formal language, these types of contract terms. One
possible language for expressing contract rules, and a con-
crete example of rules implementation will be presented in
Section 2.1.
In practice, contracts may be nulliﬁed before the end
of their validity period due to changes of legislation,
bankruptcy, etc. Contract annulment can be modeled con-
veniently by certiﬁcate revocation provided that there are
trusted revocation servers which maintain and propagate
information regarding contract annulment, and that each
contract contains a reference to the appropriate revocation
server.
Contract annulment may occur when there is a radical
and sudden change in the legal context, or in the business
conditions of either party. Often though, such changes are
moderate, and can be handled by contract revisions, without
resorting to contract nulliﬁcation. In order to support con-
tract updates, we assume that each contract is identiﬁed by
a name and a version number; and that the latest version
of a contract is maintained by a repository, whose address
is given in the certiﬁed-contract.
Traditional certiﬁcates are presented by the bearer to
prove identity or group membership; similarly, certiﬁed
contracts are presented to show compliance with an a-priori
set-up contract. The underlying assumption, in both cases,
is that there is a server which is trusted to verify credentials,
and to grant access accordingly. In order to ease process-
ing, certiﬁed-contracts should contain a special attribute,
type(contract), which enable servers to distinguish
between CCs and traditional, subject certiﬁcates. And to
ease the server-location process, a certiﬁed-contract may
have an attribute servedBy whose value denotes the ad-
dress of a server, trusted by the participating parties with
enforcing contract terms.
To summarize, we propose that a certiﬁed contract
should contain the following mandatory components:
(cid:127) type — denotes the type of a certiﬁcate. It is the pres-
ence of the term type(contract) which enables a
server to distinguish between subject certiﬁcates and
CCs.
(cid:127) name — denotes the id of the contract represented by
the CC;
(cid:127) version — denotes the version of the contract car-
ried by the CC. The version number, as we shall see,
provides support for contract revisions;
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
(cid:127) validity period — denotes the validity period
of the contract;
(cid:127) revocationServer — speciﬁes the address of the
server maintaining/disseminating information regard-
ing contract revocation.
(cid:127) repository — speciﬁes the address of the server
which maintains information about the contract in
question. Namely, we assume that a repository
maintains the latest version of a contract.
(cid:127) contract terms — specify, in a formal language,
the contract terms.
Finally, a certiﬁed-contract is obtained by signing a state-
ment comprised of these, and possibly other attributes by an
issuer trusted by all participating parties.
2.1. Expressing Contract Terms
any
formal
terms can be quite naturally expressed
Contract
of
supporting
by means
event-condition-action (ECA) kind of rules. We are
using here an extension of a language devised for support
of control policies [12, 13] built on top of Prolog. But
the nature of this language is, in a sense, of a secondary
importance.
language
In this language contract terms are embedded in rules of
the form:
eval(R,Cert):-
condition-1,...,condition-k,
provision-1,...,provision-n,
do(accept).
This rule states that, if condition-1 through condition-k are
satisﬁed then the request is valid. These conditions may re-
fer to the content of the request, and of the certiﬁcates pre-
sented. Moreover, the rule calls for carrying out provision-
1 through provision-k, denoting any additional actions re-
quired by the contract.
In addition to the standard types of Prolog goals, the
body of a rule may contain a distinguished type of goal,
called a do-goal. A do-goal has the form do(p), where p
is a primitive-operation. A sample of primitive operations
is presented in Figure 1.
An Example We demonstrate here how contracts can be
expressed into certiﬁed-contracts, by presenting informally
a simple contract, and showing how it can be represented
by a CC. As a simple example of a contract, consider that
agents in a client enterprise, say Ford, may purchase audio
equipment from a supplier enterprise, say RCA, provided
that:
June 1 and July 1, 2002.
(cid:127) purchase offers are to be issued between
(cid:127) only agents duly certiﬁed as purchase ofﬁ-
cers by ford CA1, a designated certiﬁca-
tion authority of the client enterprise, may
issue purchase orders (POs).
(cid:127) only agents duly certiﬁed as sale represen-
tatives by rca CA, a designated certifying
authority of the supplier enterprise, are au-
thorized to respond to POs.
(cid:127) a copy of all accepted POs must be sent to a
designated audit-trail.
This contract is formalized by the certiﬁed-contract dis-
played in Figure 2. This ﬁgure has two parts, specifying the
preamble to the contract, and its rules. Each rule is followed
by a comment, in italic, which, together with the following
discussion should be understandable even for a reader not
well versed in Prolog.