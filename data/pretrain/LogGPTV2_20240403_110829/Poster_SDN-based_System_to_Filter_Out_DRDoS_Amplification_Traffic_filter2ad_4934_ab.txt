victim IP and the DNS port correspondingly. Hence, all consecutive
requests from the attacker (Step a, blue arrow) will be blocked by
the edge device, will not reach the vulnerable hosts (Step b) and
will not be amplified.
The DRDoS Firewall Application installs a static rule on the SDN
Forwarding Device that prevents blocking the traffic coming to the
Amplification Honeypot (this “proactive” rule is set with a higher
priority than the ones issued by the DRDoS Firewall Application).
This allows the honeypot to continue receiving attack packets to
detect the moment when the attack is over. Then, the honeypot
notifies the DRDoS Firewall Application to drop the correspond-
ing firewall rule. Despite being whitelisted, the honeypot mildly
participates in the attack (and only in the beginning) due to its in-
ternal rate limiting mechanisms, therefore its impact to the victim
is minimal.
3 PROTOTYPE DETAILS
We implemented the prototype of our system using the GNS3 net-
work simulator [1]. GNS3 supports multiple emulators including
Dynamips; Qemu, Virtualbox and VMWare virtual machines (VMs),
however, in this work, we extensively rely on Docker containers.
Docker containers run on the same host kernel, thus consuming
considerably less system resources than traditional VMs. This al-
lows researchers to increase considerably the number of emulated
devices. In this work, we build separate Docker images for the SDN
Controller (and our DRDoS Firewall Application); the Amplification
Honeypot; a vulnerable host; attacker and victim machines; and
the SDN Forwarding Device.
Figure 3 presents a screenshot of our GNS3 test bed. Router RS
plays the role of network interconnection point with the installed
routing rules that connect ISP (10.1.x.x), attacker (10.2.x.x) and
victim (10.3.x.x) networks. So as our test bed is connected to
the Internet as well, we use private IP address ranges for these
networks. The connection to the Internet is required to perform the
initial setup of the components, e.g., to download Docker images
and Python packages necessary for our system to operate. Open
vSwitch (10.1.0.1) plays the role of an ISP edge device that guards
the network where the amplifiers (the honeypot with IP 10.1.0.4
and vulnerable hosts with IP 10.1.0.5) are located.
We use POX [4] as the SDN Controller. POX is widely adopted by
researchers in the SDN community, and it implements OpenFlow 1.0
specification [12] that is forward compatible with newer OpenFlow
standards. The DRDoS Firewall Application runs over POX and
AmpliﬁersNTPDNSIP: 192.0.2.3 PORT: 53 IP: 192.0.2.2 PORT: 123 Attacker IP: 198.51.100.1 SRC_IP: 203.0.113.4 SRC_PORT: 12346 DST_IP: 192.0.2.2 DST_PORT: 123 SRC_IP: 203.0.113.4 SRC_PORT: 12345 DST_IP: 192.0.2.3 DST_PORT: 53 SRC_IP: 192.0.2.2 SRC_PORT: 123 DST_IP: 203.0.113.4 DST_PORT: 12346 SRC_IP: 192.0.2.3  SRC_PORT: 53 DST_IP: 203.0.113.4 DST_PORT: 12345 Victim IP: 203.0.113.4 ISP NetworkAttacker IP: 198.51.100.1 1aVictim IP: 203.0.113.4 HONEYPOT IP: 192.0.2.1 PORT: 53 3IV246bIIIIP: 192.0.2.3 PORT: 53 DNSSDN  ControllerDRDoS Firewall App 5IIIISP Network (Host and Honeypot) with the spoofed IP address of
victim. We will show that in the beginning the amplified responses
will leave the ISP network and will be detected on the Victim’s side.
However, after the Honeypot observes from a particular IP address
more packets than the predefined threshold, it issues an alert to the
DRDoS Firewall Application, and the amplified responses will stop
reaching victim’s machine. We will also demonstrate that amplifica-
tion requests are still observable by AmpPot due to a special static
exclusion rule proactively added to the SDN rule table. Once the
attack is over, we will exhibit how the DRDoS Firewall Application
instructs the SDN Controller to remove the corresponding rule
from the edge SDN Forwarding Device.
5 CONCLUSION
In this paper, we demonstrate a novel approach to filter out ampli-
fication traffic from an ISP network. It relies on data collected from
an amplification honeypot to derive filtering rules. In the proto-
type of our system, we employ the SDN paradigm, however, other
ways of packet filtering, for instance, a traditional firewall or a BGP
Flowspec, can be used in our approach as well.
gns3.com
REFERENCES
[1] [n.d.]. GNS3 | The Software that Empowers Network Professionals. https://www.
[2] [n.d.]. How UK ISPs are charged for broadband - the cost of IPStream. Retrieved
03/20/2018 from https://community.plus.net/t5/Plusnet-Blogs/How-UK-ISPs-are-
charged-for-broadband-the-cost-of-IPStream/ba-p/1314570
[3] [n.d.]. Open vSwitch. https://www.openvswitch.org
[4] [n.d.]. The POX Network Software Platform. https://github.com/noxrepo/pox
[5] Michael Aupetit, Yury Zhauniarovich, Giorgos Vasiliadis, Marc Dacier, and Yazan
Boshmaf. 2016. Visualization of Actionable Knowledge to Mitigate DRDoS
Attacks. In Proceedings of the IEEE Symposium on Visualization for Cyber Security.
1–8.
[6] Laure Berti-Equille and Yury Zhauniarovich. 2017. Profiling DRDoS Attacks with
Data Analytics Pipeline. In Proceedings of the ACM Conference on Information
and Knowledge Management. 1983–1986.
[7] Sam Kottler. 2018. February 28th DDoS Incident Report. https://githubengineering.
com/ddos-incident-report/
[8] Lukas Krämer, Johannes Krupp, Daisuke Makita, Tomomi Nishizoe, Takashi
Koide, katsunari Yoshioka, and Christian Rossow. 2015. AmpPot: Monitoring
and Defending Against Amplification DDoS Attacks. In Proceedings of the Inter-
national Symposium Research in Attacks, Intrusions, and Defenses. 615–636.
[9] Johannes Krupp, Michael Backes, and Christian Rossow. 2016. Identifying the
Scan and Attack Infrastructures Behind Amplification DDoS Attacks. In Proceed-
ings of the ACM SIGSAC Conference on Computer and Communications Security.
1426–1437.
[10] Johannes Krupp, Mohammad Karami, Christian Rossow, Damon McCoy, and
Michael Backes. 2017. Linking Amplification DDoS Attacks to Booter Services.
In Proceedings of the International Symposium Research in Attacks, Intrusions, and
Defenses. 427–449.
[11] Jun Li, Skyler Berg, Mingwei Zhang, Peter Reiher, and Tao Wei. 2014. Drawbridge:
Software-defined DDoS-resistant Traffic Engineering. In Proceedings of the ACM
Conference on SIGCOMM. 591–592.
[12] N. McKeown, H. Balakrishnan T. Anderson, L. Peterson G. Parulkar, S. Shenker
J. Rexford, and J. Turner. 2008. OpenFlow: Enabling Innovation in Campus
Networks. ACM SIGCOMM Computer Communication Review 38, 2 (2008), 69–74.
[13] D. Senie P. Ferguson. 2000. Network Ingress Filtering: Defeating Denial of Service
Attacks which Employ IP Source Address Spoofing. Technical Report. Internet
Engineering Task Force. https://tools.ietf.org/html/rfc2827
[14] Rishikesh Sahay, Gregory Blanc, Zonghua Zhang, and Hervé Debar. 2015. To-
wards autonomic DDoS mitigation using software defined networking. In Pro-
ceedings of the NDSS Workshop on Security of Emerging Networking Technologies.
Internet society.
[15] A. Sardana, K. Kumar, and R. C. Joshi. 2007. Detection and Honeypot Based
Redirection to Counter DDoS Attacks in ISP Domain. In Proceedings of the Inter-
national Symposium on Information Assurance and Security. 191–196.
[16] Yury Zhauniarovich and Priyanka Dodia. 2019. Sorting the Garbage: Filtering
Out DRDoS Amplification Traffic in ISP Networks. In Proceedings of the IEEE
Conference on Network Softwarization. 142–150.
Figure 3: GNS3 System Simulation Setup
uses its API. Both of them are just programs that run on the same
host (blue rectangle in Figure 2).
We use AmpPot [8] as the Amplification Honeypot that is devel-
oped by Lukas Krämer et al. It is widely adopted by the research
community for the analysis of DRDoS attacks [5, 6, 9, 10]. Contrary
to usual honeypots that act as an easy and attractive attack target,
AmpPot mimics a service vulnerable to amplification attack. For in-
stance, in Figure 1 AmpPot runs vulnerable DNS and NTP services.
Thus, AmpPot is able to collect the information about amplification
requests and to identify victims’ IP addresses. It should be noted
that AmpPot carefully participates in the attacks through a number
of limiting mechanisms. As a result, a victim receives negligible am-
plified traffic from AmpPot and only in the beginning of the attack.
Currently, AmpPot is able to monitor 10 different UDP services
vulnerable to amplification. However, it can be easily extended to
new ones.
Upon receiving an attack start event from our modified AmpPot,
the DRDoS Firewall Application using POX OpenFlow-compatible
Southbound API adds a rule to OpenFlow’s Open vSwitch [3], which
we use as the SDN Forwarding Device. This rule blocks all packets
with the specified source IP address and destination port, derived
from the honeypot data. It should be mentioned that adversaries
often attack a whole subnetwork rather than a single IP address. In
order to cover this case, we added a feature to our DRDoS Firewall
Application to block an entire subnetwork. This functionality relies
on a IP address partial match feature implemented in POX.
4 DEMO DETAILS
During the presentation, we are going to show an interactive demon-
stration of our system that can help Internet Service Providers to
filter garbage DRDoS traffic out of their networks. Using the test
bed shown in Figure 3, we will guide the audience through all the
steps of garbage traffic removal. We will start describing the main
network segments in our test bed, namely the ISP, Attacker and
Victim subnetworks, and the main components within them. We
will provide details about the initial configuration steps as well.
Then, we will simulate a DRDoS attack in our test bed sending am-
plification requests from Attacker’s machine to the amplifiers in the