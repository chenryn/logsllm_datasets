# snort 和 Suricata
> 
知乎发现 raul17 的译文
> 
rules下载
> 
>
> ## snort
>
>   
>    
>    
>  
  * Sniffer mode, which simply reads the packets off of the network and displays them for you in a continuous stream on the console (screen).
  * Packet Logger mode, which logs the packets to disk. 
  * Network Intrusion Detection System (NIDS) mode, which performs detection and analysis on network traffic. This is the most complex and configurable mode. 
NIDS 模式下，可以分析网络流量，检测出各种不同的攻击方式，对攻击进行报警。
Snort的结构由4大软件模块组成，它们分别是：
  1. 数据包嗅探模块
  2. 预处理模块——该模块用相应的插件来检查原始数据包，从中发现原始数据的“行为”，如端口扫描，IP碎片等，数据包经过预处理后才传到检测引擎；
  3. 检测模块——当数据包从预处理器送过来后，检测引擎依据预先设置的规则检查数据包，一旦发现数据包中的内容和某条规则相匹配，就通知报警模块；
  4. 报警/日志模块
### 预处理器
**以下参考 SNORT Users Manual 2.9.13**
  * Frag3 IP分片重组和攻击监测
  * Session
  * Stream
  * sfPortscan 检测端口扫描 
  * RPC Decode
  * Performance Monitor
  * HTTP Inspect
  * SMTP Preprocessor
  * POP Preprocessor
  * IMAP Preprocessor
  * FTP/Telnet Preprocessor
  * SSH
  * DNS
  * SSL/TLS
  * ARP Spoof Preprocessor
  * DCE/RPC 2 Preprocessor
  * Sensitive Data Preprocessor
  * Normalizer
  * SIP Preprocessor
  * Reputation Preprocessor
  * GTP Decoder and Preprocessor
  * Modbus Preprocessor
  * DNP3 Preprocessor
  * AppId Preprocessor
### 规则语法
Snort使用一种简单的规则描述语言，这种描述语言易于扩展，功能也比较强大。Snort规则是基于文本的，规则文件按照不同的组进行分类。
类型 | 说明  
---|---  
general | 这些选项提供有关规则的信息，但在检测期间没有任何影响  
payload | These options all look for data inside the packet payload and can be
inter-related  
non-payload | These options look for non-payload data 此类规则选项都是对数据包帧结构中特殊字段的匹配。  
post-detection | 这些选项是特定于规则的触发器，发生在规则“触发”之后。  
每类规则提供了不同的body 规则选项 关键字
示例:`alert tcp any any -> 192.168.1.1 80 ( msg:"A ha!"; content:"attack";
sid:1; )`
结构: `action proto source dir dest ( body )`
  1. action : 
    * alert 生成警报 
    * log 记录
    * pass 忽略
    * drop 阻塞并记录数据包
    * reject 阻塞并记录数据包，如果是 tcp 包则发送一个 TCP reset；如果是 udp 则发送一个 ICMP port unreachable message。
    * sdrop 阻塞数据包，但不记录
    * Activate and Dynamic rules are phased out in favor of a combination of tagging and flowbits 
  2. proto  
ip, icmp, tcp, udp
  3. source  
源地址
  4. dir  
必须是如上所示的单向或<>所示的双向。
  5. dest  
目的地址
**body 规则选项**
具体看 Users Manual
  * sid map  
sid这个关键字被用来识别snort规则的唯一性,map文件用来将sid 和 msg对应  
  * content  
Snort重要的关键词之一。它规定在数据包的负载中搜索指定的样式。它的选项数据可以包含混合的文本和二进制数据。二进制数据一般包含在管道符号中“|”，表示为字节码（bytecode），也就是将二进制数据的十六进制形式。
        alert tcp any any -> any 139 (content:"|5c 00|P|00|I|00|P|00|E|00 5c|";)
      alert tcp any any -> any 80 (content:!“GET”;)
    * Nocase content字符串大小写不敏感
    * rawbytes 直接匹配原始数据包
    * Depth 匹配的深度
    * Offset 开始匹配的偏移量
    * Distance 两次content匹配的间距
    * Within 两次content匹配之间至多的间距 
    * http_cookie 匹配cookie
    * http_raw_cookie 匹配未经normalize的cookie
    * http_header 匹配header
    * http_raw_header 匹配未经normalize的header
    * http_method 匹配method
    * http_url 匹配url
    * http_raw_url 匹配日在未经normalize的url中
    * http_stat_code 匹配状态码中匹配
    * http_stat_msg 匹配状态信息
    * http_encode 匹配编码格式
  * pcre  
允许用户使用与PERL语言相兼容的正则表达式。  
`pcre:[!]"(//|m)[ismxAEGRUBPHMCOIDKY]`  
`alert tcp any any -> any 80 (content:“/foo.php?id=";
pcre:"/\/foo.php?id=[0-9]{1,10}/iU";)`
  * rawbytes  
忽略解码器及预处理器的操作，直接匹配原始网络包。
### 端口扫描检测
#### sfPortscan 预处理器
攻击者预先并没有目标的信息，大多数攻击者发送的请求都会被拒绝（端口关闭）。在正常的网络通讯中，被拒绝的响应是稀少的，并且在一小段时间中出现大量拒绝响应更稀少。我们检测端口扫描的主要目的是检测和跟踪这些被拒绝的响应。
目前最广泛使用的端口扫描器是Nmap，sfPortscan 被设计用来检测Nmap产生的不同类型的扫描。
  * Portscan  
传统端口扫描，一个主机扫描另一主机的大量端口，大多数请求都被拒绝，因为只有部分开发端口
  * Decoy(诱骗) Portscan  
攻击者有一个伪造的源地址与真实的扫描地址混杂在一起。这种策略有助于隐藏攻击者的真实身份。
  * Distributed(分布式) Portscan  
Negative queries will be distributed among scanning hosts, so we track this
type of scan through the scanned host(通过被扫主机追踪这种行为？)
  * Portsweep  
一台主机扫描多个主机上的一个端口。  
portsweep 扫描的特性可能不会导致许多拒绝响应。例如，如果攻击者扫描 80端口，我们很可能不会看到很多拒绝响应。
  * Filtered Portscan 报文无法到达指定的端口
配置选项
  1. sense_level
    * low  
仅通过错误packets 生成，误报极少。设置的时间窗口为60秒，之后重新从统计、
    * medium  
通过跟踪连接数产生警报，但在NAT、代理、dns缓存等地方可能产生误报。时间窗 90 秒
    * high  
持续监控，可以捕获一些慢速扫描。时间窗600秒
  2. detect_ack_scans  
默认关闭  
This option will include sessions picked up in midstream by the stream module,
which is necessary to detect ACK scans. However, this can lead to false
alerts, especially under heavy load with dropped packets; which is why the
option is off by default.