### ASCII

- **Hidden Information in Reserved Fields:** The data contained within reserved fields was examined.
- **Checksum Mismatches:** Discrepancies in the checksums were noted.
- **Sequence and Acknowledgment Numbers:** No anomalies were observed in the sequence numbers and acknowledgment numbers.

Given that no obvious issues were identified, I decided to explore an alternative approach: decrypting TLS traffic. Wireshark has the capability to display decrypted TLS traffic if provided with the private key used for the connection. In the past, I have used this method when I had access to the private key of the certificate sent by the server. However, how does one proceed when on the client side?

It turns out that there is an environment variable called `SSLKEYLOGFILE`. When this variable is set, Chrome and Firefox will log the keys used for TLS encryption into a special log file. Even better, Wireshark can interpret the format of this file. Unfortunately, this method did not work initially, as online resources indicated that support for this feature had been removed, reintroduced, and only worked with certain builds. This seemed like a dead end until I discovered that cURL also supports this feature, simplifying the process.

After configuring the appropriate file in Wireshark, we gained access to the decrypted TLS traffic. Scrolling through the Decrypted SSL tabs at the bottom of the screen, we found the flag:

```
OWASP-IL{This_is_the_real_flag}
```

### Challenge 15 â€“ Alcatraz (Difficulty: Hard, 850 Points)

**Challenge Instructions:**
> Hi,
> I am Frank Morris. I need your help to escape prison. I heard it's very easy for you, and I hope it will be the case this time. Please get the Alcatraz administrator password from their website, and I will pay you well.
> URL: http://challenges.owaspil.ctf.today:8081/

**Solution:**

The provided link leads to the following website:
```
http://challenges.owaspil.ctf.today:8081/profile.php?id=1
```

By changing the `id` parameter (up to 25), we can retrieve additional employee information. If an invalid `id` is entered, an error message is displayed:
```
Error: employee not found
```

Entering illegal input, such as `%` or `*`, results in a security error:
```
Security error: Blocked by the Web Application Firewall
```

When we try using a single quote (`'`), we receive a SQL error, indicating a potential SQL injection vulnerability:
```
SQL error: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '\' LIMIT 1' at line 1
```

The next logical step is to use an automated tool like SQLMap to exploit the SQL injection vulnerability. However, SQLMap identifies the vulnerability but fails to exploit it, likely due to the Web Application Firewall (WAF). After the initial red error message, numerous attempts fail.

Below is a table showing some manual injection attempts and their outputs:

| Input | Output |
|-------|--------|
| ...   | ...    |

(Continue with the table entries as needed)