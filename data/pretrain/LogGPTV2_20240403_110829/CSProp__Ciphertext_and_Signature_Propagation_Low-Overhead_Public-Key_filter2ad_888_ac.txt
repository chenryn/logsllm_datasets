The Domain Name System (DNS) is an essential networking
protocol. It is responsible for mapping Fully Qualiﬁed Do-
main Names (FQDNs) to their corresponding IP addresses. To
defeat certain DNS attacks (e.g., cache poisoning [63] and am-
pliﬁcation [1] attacks), DNS SECurity Extension (DNSSEC)
[13] is proposed as a form of cryptographic defense to authen-
ticate DNS responses with digital signatures. DNSSEC is stan-
dardized by the Internet Engineering Task Force (IETF). With-
out DNSSEC, DNS becomes vulnerable to different classes of
attacks where an attacker attempts to provide false responses
to queries [63]. DNSSEC operates by adding cryptographic
signatures to existing DNS records to prove that they are le-
gitimate responses from trusted servers. Speciﬁcally, these
signatures provide DNS clients origin authentication and in-
tegrity of data (but not conﬁdentiality). Typically, veriﬁcation
of the signatures is implemented by resolvers, rather than
the end devices themselves, to reduce the overhead on the
614    30th USENIX Security Symposium
USENIX Association
Table 2: DNSSEC Algorithm Use Statistics
Algorithm
Name
# of DS records Signed
TLDs
Alexa
RSASHA1-NSEC3-SHA1
DSA/SHA1
RSA/SHA-1
RSA/SHA-256
RSA/SHA-512
ECC-GOST
ECDSAP256SHA256
ECDSAP384SHA384
0
163
539
2157
37
0
5
0
7
1305
5669
10962
758
3
6017
202
Code
3
5
7
8
10
12
13
14
end devices. When an end device performs a DNS query, it
sends the query to its resolver. If the data is not present in
the resolver’s DNS cache, the resolver starts the resolution
process by traversing the DNS hierarchy from the root server
and down to the corresponding authoritative name server.
Unfortunately, to shield the end devices from these expen-
sive operations, this design leaves opportunities for attackers
on the last hop between the resolver and the end device. For
example, a resolver that is compromised can arbitrarily falsify
information. Moreover, an attacker can spoof the resolver or
otherwise inject responses to attack the end devices [9].
Without end-to-end authentication, DNS security cannot be
guaranteed. A trivial solution is to ask the end devices to carry
out the authentication, but this requires multiple expensive
cryptographic operations as discussed in the next section. To
secure DNS against attacks [9] we use CSProp to provide low
overhead end-to-end DNSSEC validation.
4.1.1 DNSSEC Signing Algorithm
There has been no standardization of a speciﬁc zone
signing algorithm. The usable algorithms usually appear
in DNSKEY, RRSIG, and DS RRsets [14, 58, 85, 97]. In
practice, root servers always use Algorithm 8 (which is
RSA/SHA256) [85]. However, to the best of our knowledge,
there is no documentation of the algorithm used to sign the
zones of TLDs and authoritative name servers. For that, we
conducted a measurement study to analyze the DS records
of the TLDs by examining the root DNS zone2. Similarly,
we conducted the measurement study on the top 1 million
sites based on Alexa Trafﬁc Rank3. As shown in Table 2,
we conﬁrm the ﬁndings in [85] that Algorithm 8 is indeed
the most widely used algorithm in DNSSEC. Our CSProp
protocol supports this algorithm, making it straightforward to
deply within the current ecosystem.
4.1.2 Design of DNSSEC with CSProp
DNSSEC using CSProp provides efﬁcient end-to-end authen-
tication from the origin server to the end device. CSProp
provides signature validation over the entire chain of trust
of DNSSEC. The design is illustrated in Figure 2. The com-
ponents in red represent additions for CSProp. Moreover, in
2The
is
dataset
at:
https://www.internic.net/domain/root.zone and managed by the Inter-
net Corporation for Assigned Names and Numbers (ICANN)
available
online
3Alexa Top Sites (ATS) web service: https://aws.amazon.com/alexa-top-
sites/
this ﬁgure, the end device takes charge of the authentication,
whereas in a conventional implementation, the veriﬁcation
trafﬁc is initiated by the resolver. We assume the records are
not present at the resolver’s cache. We explain the steps in
detail as follows:
After the DNS resolution process is completed and be-
fore the legitimate response of the requested query (e.g., A
record of www.example.com) is forwarded to the end device,
in step 1 the DNS resolver receives an RRset of type A
along with the corresponding RRSIG record from the au-
thoritative name server (Auth). To compute the partial val-
idated signature (RRSIG(cid:48)) of the above RRsetDNSKEY, the
resolver needs the DNSKEY record of AuthZSK and sends
a query to Auth as shown in 2 . In step 3 , Auth re-
sponds back and sends both RRsetDNSKEYAuth and the cor-
responding RRSIGRRsetAAuth. In step 4 , the resolver com-
putes (RRSIGRRsetAAuth)(cid:48) using vk and vk(cid:48) of AuthZSK and
(RRSIGRRsetDNSKEYAuth)(cid:48) using vk and vk(cid:48) of AuthKSK and
forwards them to the end device along with RRsetA and
RRsetDNSKEYAuth. The end device completes the validation
process of (RRSIGRRsetAAuth)(cid:48) and (RRSIGRRsetDNSKEYAuth)(cid:48)
using vk(cid:48) of AuthZSK and AuthKSK, respectively. Then, the
end device needs to verify the RRSIG of the DNSKEY record
of AuthKSK. As shown in step 5 , it sends a query to the
resolver and requests RRsetDSAuth. In step 6 , the resolver
forwards the query to the .com T LD server which responds
with RRsetDSAuth and RRSIGRRsetDSAuth as shown in step
7 . To partially verify RRSIGRRsetDSAuth, the resolver in step
8 sends a query to the .com T LD server for the T LD’s
DNSKEY records. Then, the T LD server responds in step
9 with RRsetDNSKEYT LD and RRSIGRRsetDNSKEYT LD.
As in step
3 , the resolver computes in step 10
(RRSIGRRsetDSAuth)(cid:48) using vk and vk(cid:48) of T LDZSK and
(RRSIGRRsetDNSKEYT LD)(cid:48) using vk and vk(cid:48) of T LDKSK and
forwards the partial veriﬁed RRSIGs to the end device along
with RRsetDSAuth and RRsetDNSKEYT LD. Steps 11 - 16
are similar to steps 5 - 10 to verify RRsetDST LD and
RRsetDNSKEYRoot. Finally, the end device compares the
DNSKEYRootKSK record with the publicly available version,
and this completes the DNSSEC validation process.
The ability to establish trust between child and parent zones is
an integral part of DNSSEC. We cannot trust any of the DNS
records if part of the chain is broken. CSProp over DNSSEC
provides complete end-to-end protection and secures DNS
records from being altered by MitM attackers. Furthermore,
the steps of the protocol, and the number of packets exchanged
between the parties is the same as in regular DNSSEC with
changes isolated to the last hop between the DNS resolver
and the end device (in addition to the choice of the public
key). These properties make it practical to deploy the design.
USENIX Association
30th USENIX Security Symposium    615
Figure 2: CSProp over DNSSEC — Design
present in typical scenarios of constrained environments (e.g.,
IoT environment) as shown in Figure 3. The protocol is
described in detail as follows:
In step 1 , the end device commences the handshake and
sends the "Client Hello" message followed by the cipher
suite, key agreement and key share messages to the default
gateway in which the latter forwards the messages to the
designated web server. In reply, the web server sends in step
2 the “Server Hello” message comprised of the chosen
key agreement, server’s X.509 certiﬁcate and its associated
signature σ, and the server’s key share associated with the
“Server Finished” message. Then in step 3 , the default
gateway forwards all messages received in step 2 to the end
device — with one signiﬁcant change. It substitutes σ with σ(cid:48)
which is the partial veriﬁed signature of the server’s certiﬁcate
and σ(cid:48) is computed using vk and vk(cid:48). Now, the end device
partially veriﬁes σ(cid:48) using vk(cid:48) as shown in step 4 . In step
5 , the end device generates the pre-master secret key K
using the web server’s key share. K is encrypted using pk(cid:48)
to generate the partial ciphertext C(cid:48). The end device sends
C(cid:48), the cipher suite change (if it is applicable) along with the
“Client Finished” message to the default gateway. Finally in
step 6 , the default gateway completely encrypts K using pk
and pk(cid:48) and forwards messages received in step 5 to the web
server along with the full ciphertext C. Upon receiving the
messages, the web server using its secret key sk decrypts C to
retrieve K, and this concludes the handshake. From here on,
all the messages are securely exchanged between the entities.
Similar to CSProp over DNSSEC, CSProp over TLS does
not require any additional messages to be exchanged between
the three parties that are involved in the handshake phase.
This ensures a zero-round trip handshake as in TLS 1.3.
4.3 Propagator Deployment in Practice
CSProp is a general mechanism that can be incorporated
within systems with different network and protocol dependent
choices for the propagators. For example, it may make sense
to have a local uplink router (e.g., a wireless router in a home
network or a wireless LAN setting, or a service node on a
Figure 3: CSProp over TLS — Design
4.2 Optimizing TLS handshakes with CSProp
In the second application, we consider using CSProp to opti-
mize the operation of TLS. The underlying security of TLS
protocol relies on the implementation of the cryptographic al-
gorithms during the handshake phase. The cryptographic algo-
rithms provide authentication and integrity between the com-
municating entities (i.e., in our case, the web server and the
end device). To offer these security services, the end device
has to handle complex cryptographic operations for validation
which are computationally expensive. By using CSProp, we
can substantially reduce the computational cost incurred by
the handshake phase without compromising security.
TLS is a core security protocol on the Internet and has
undergone several revisions over the years to address security
and performance ﬂaws speciﬁcally in the handshake proto-
col [83]. We design CSProp to work with TLS 1.3, which is
the latest version improving both the performance and secu-
rity of TLS 1.2. Authenticating the communicating parties
to each other is typically done by validating their PKI certiﬁ-
cates. The most commonly used certiﬁcate is X.509 which is
based on the RSA cryptosystem [10]. In common cases, only
the web server needs to be authenticated by the client (unless
client authentication is required by the server).
CSProp can help reduce the computation cost needed for
TLS on the end device by securely ofﬂoading a considerable
part of the encryption and validation processes to the default
gateway. Initially, the communication is between the web
server and the end device; however, the default gateway is
616    30th USENIX Security Symposium
USENIX Association
Table 3: Experimental Setup and Platforms.
Device
Dell
Model
XPS 8700
Role
Origin Server
Sony VAIO
VPCEA390X DNS resolver/Default gateway
Microsoft Surface
Raspberry Pi
Pro 6
Zero W
3 Model B
3 Model B+
End device
End device (IoT)
End device (IoT)
End device (IoT)
Processor (CPU)
CPU Clock (GHz)
Intel(R) Core(TM) i7-4790
Intel(R) Core(TM) i5
Intel(R) Core(TM) i7-8650U
ARM11 Broadcom
Arm Cortex-A53 (ARMv8)
Cortex-A53 (ARMv8)
3.6
2.53
1.9
1
1.2
1.4
RAM Cores
16GB
8GB
16GB
512MB
1GB
1GB
4
2
4
1
4
4
Figure 4: Testbed Architecture Conﬁgurations
Radio Access Network in a cellular network setting) serve as
a propagator. For more ad hoc network settings, connected
nodes or those with larger batteries may serve as propagators,
perhaps discoverable using Service Discovery Protocols (e.g.,
SDP) [71], or reachable using anycast operations [6]. Criti-
cally, a man in the middle can only attempt denial of service
since any illegal propagation will cause failure of signature
veriﬁcation.
The stateless property of our propagator means that we have
the ﬂexibility of changing propagators (e.g., different access
points in a wireless LAN as a device moves [61,65], different
road side units [93], or different cluster heads in a sensor
network setting [69, 77]). We agree that in a true peer-to-peer
setting incentives are a difﬁcult problem to solve especially
in the presence of freeloading and Sybil attacks [44].
Key generation distribution for CSProp are similar to their
traditional counterparts for PKC ciphers such as RSA. We
added an additional ﬁeld in the exchange packet to include
elow, with negligible effect on the packet size.
5 Evaluation
In this section, we experimentally assess the effectiveness of
CSProp over DNSSEC and TLS. We compare the protocols
under realistic settings and with respect to a number of end
devices representative of IoT and embedded devices. We also
compare CSProp with ECC cipher suite. We also present a
measurement study on a home IoT camera demonstrating the
prevelance of operations that use public keys and that can
beneﬁt from CSProp.
5.1 Experimental Setup
We evaluate CSProp on four end devices: (1) Microsoft Sur-
face Pro 6; (2) Raspberry Pi Zero W; (3) Raspberry Pi 3 Model
B; and (4) Raspberry Pi 3 Model B+ as shown in Table 3.
These devices provide a range of embedded/mobile platforms
typical of those used in constrained environments [86]. All
three Raspberry Pi devices run Raspbian operating system,
while Surface Pro 6 runs Windows 10 Home edition operat-
ing system. We also evaluate CSProp as a primitive on the
Arduino MKR WiFi 1010 [5] as a respresentative of a true
constrained IoT device [76]. It uses a 32-bit low power ARM
MCU processor (SAMD21) with a clock speed of 48 MHz,
32 KB of SRAM, and 256 KB of ﬂash memory. The hardware
acceleration engine for cryptographic algorithms supports the
hashing algorithm SHA-256 which we use in our prototype.
We implemented CSprop over DNSSEC and TLS, based