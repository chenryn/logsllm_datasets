networks the virtual machines could access. This prevented
the establishment of a trunk connection between the virtual
machine and the Cisco Nexus 1000v virtual switch.
Switch spooﬁng attacks can be mitigated on physical Cisco
switches by following a few best practices such as disabling
unused switch ports to prevent unauthorized physical access to
the switch as well as disabling the Dynamic Trunking Protocol
on all ports. Limiting VLAN access on trunk connections is
also a wise preventative action to reduce the likelihood of an
attacker gaining unauthorized access to all of the VLANs on
the network. Because DTP is a Cisco proprietary protocol,
another way to mitigate this attack is to not use Cisco switches
in the physical network.
In terms of virtual networks connected to physical Cisco
switches within a data center, it is important to recognize that
this attack will work if the virtual network uses a bridged
interface for virtual machine connectivity. In order to prevent
this from occurring, administrators could either convert the
virtual network to a secure virtual switched environment or
lock down the physical switch to which the virtual platform
is connected. The port could be secured by following best
practices and ensuring that it is in trunk mode, and only has
access to the speciﬁc VLANs that are required for the virtual
network. Access to the native VLAN within the physical
environment should also be blocked by removing it from the
trunk VLAN access list on that speciﬁc port.
B. VLAN Hopping - Double Tagging
The VLAN hopping Double-Tagging or Double-Tagging
VLAN jumping attack is an attack that leverages an inherent
vulnerability in the 802.1q VLAN protocol[17] which allows
an attacker to bypass network segmentation and spoof VLAN
trafﬁc by manipulating an Ethernet frame so that it contains
two 802.1q VLAN tags. This attack requires two switches with
a trunk connection established between them to be present in
between the attacking system and the target system. When
the Ethernet frame is pushed through the ﬁrst switch the ﬁrst
802.1q VLAN tag is stripped from the frame leaving only the
second 802.1q VLAN tag. This tricks the second switch into
thinking that the frame is destined for the target VLAN and it
allows the frame to be forwarded on to the destination. One
thing to note about this attack is that it is one-way unlike
the switch spooﬁng attack described previously which allows
for two-way communication between the attacking system and
the target. By leveraging this vulnerability an attacker can
send frames to target systems on isolated VLANs in order to
perform denial of service attacks or create a one-way covert
channel between the attacker and the target system.
We explored three different scenarios in order to evaluate
the effectiveness of this attack within virtualized environments.
All three scenarios require the use of at least one physical
switch located between the attacking system and the virtualized
network that is being targeted. Figure 5 depicts the attack
scenario where an attacker is using a physical Kali 2.0 system
attached to a physical switch which has a trunk connection to
a second physical switch with an established trunk link to each
of the hypervisor environments.
Fig. 5. Double tagging scenario where the attack is generated from a physical
Kali 2.0 system connected to a Cisco 2950 switch with a second Cisco 2950
switch located in between the ﬁrst Cisco switch and the connected hypervisor
environments.
The second scenario as depicted in Figure 6 still uses a
physical Kali 2.0 system for the attack, however only a single
physical switch sits in between the attacker and the virtual
network.
In the third scenario, as illustrated in ﬁgure 7, the attacking
system is a virtual machine connected to one of the seven
virtual test networks that is trying to send a frame to a target
system on another one of the virtual networks with a physical
switch positioned in between both host systems.
4
R. Bull, J. Matthews, K. Trumbull
DEF CON 24 - (August 2016)
Fig. 6. Double tagging scenario where the attack is generated from a physical
Kali 2.0 system connected to a Cisco 2950 switch in order to gain unauthorized
access to virtual machines located on restricted VLANs within connected
hypervisor environments.
Fig. 7.
Double tagging scenario where the attack is generated from a Kali
2.0 virtual machine within one of the connected virtual networks. A physical
Cisco 2950 switch acts as the physical connectivity device located between
each of the connected virtual networks.
To verify that the double-tagging VLAN hopping attack
would work across the two Cisco 2950 switches we performed
a test using two physical systems which served as a control
for the rest of the experiments. The scenario depicted in ﬁgure
5 was used with the virtual machine target being replaced
with a CentOS 7 physical system connected to an access port
on VLAN 20 on the second switch. The attack worked as
expected, and we were able to send a frame from the attacking
system located on VLAN 1 on the ﬁrst switch to the target
system located on VLAN 20 on the second switch.
The process that we used to evaluate the double-tagging
attack throughout each of the scenarios remained the same. The
only difference between the scenarios was the conﬁguration
of the network devices. We used the Yersinia tool on the
attacking system in order to craft an ICMP request frame which
consisted of two VLAN tags that was sent across the network.
If the attack was successful we could view the ICMP request
in tcpdump[18] on the target system which was located on
a different VLAN than the attacker. The following process
was used against all seven hypervisor environments in each
scenario:
1)
Connect to attacker system. (SSH was used to access
the physical attacking system, and in the case of a
virtual attacker the console connection was used).
2)
Connect to the target system via the virtual machine
console.
3)
Connect to the console on each Cisco 2950 switch
used in the experiment.
4)
Verify switch port settings to conﬁrm trunk and
access port conﬁgurations.
5)
Run yersinia -I on attacking system.
6)
Select the network interface to be used by pressing
’i’.
7)
Select 802.1Q mode by pressing ’g’.
8)
Edit the IP address and VLAN information used for
the attack by pressing ’e’.
9)
Run tcpdump in a terminal window on the target
system and ﬁlter for ICMP trafﬁc.
10)
Launch the attack from the attacker system by press-
ing ’x’ then ’1’ to send the double tagged packet to
the target.
We have documented the process for each of the three
scenarios in a series of demo videos that have been posted to
YouTube. The ﬁrst video[19] highlights the attack as depicted
in ﬁgure 5, where the attacker is using a physical Kali system
with two Cisco 2950 switches located in between the attacking
system and the target virtual machine. The target virtual
machine in this case is a system located within the ProxMox
hypervisor environment. The second video[20] illustrates the
scenario where there is only a single Cisco 2950 switch located
in between the physical attacking system and the target virtual
machine as shown in ﬁgure 6. In this scenario the target virtual
machine is located within the Microsoft Server 2012 Hyper-
V environment using the Cisco Nexus 1000v virtual switch.
In the third video[21] the attack is originated from a virtual
machine located in the Citrix XenServer virtual environment
and the target system is a virtual machine in the ProxMox
environment. Both of the virtual networks are connected to
trunk ports on a single Cisco 2950 switch as depicted in ﬁgure
7.
The results of the ﬁrst two scenarios that utilized a physical
attacking system are summarized in table III. The attack
worked in both scenarios against every hypervisor environment
other than the Microsoft Server 2012 Hyper-V environment
which used the standard Hyper-V virtual switch. This was
expected since once the double tagged frame passed through
the trunk connection between the two physical switches the
ﬁrst VLAN tag was stripped and the frame was forwarded
on to the second Cisco 2950 switch with only the second
VLAN tag. At this point, the manipulation of the frame was
complete, and any hypervisor environment connected to the
second switch running a virtual machine on the target VLAN
should have been able to see the frame.
In the single switch scenario, the virtual switch was the
second switching device trunked with the Cisco 2950. The
attack depends on the trunk link supporting the same native
VLAN on both switches as well as both switches using 802.1q
encapsulation for trunking. For that reason, it is especially
interesting to see that the attack was effective against the
majority of the virtual networks tested. The Microsoft Hyper-
V environment conﬁgured with the standard virtual switch,
however, was unaffected in both scenarios due to the same
reason that prevented the MAC ﬂooding attacks from working
in our previous white paper[4]. The Hyper-V virtual switch
also provided some minimal protection for virtualized net-
work trafﬁc which included protection against MAC address
spooﬁng[22]. Since the Yersinia tool uses MAC address spoof-
ing for the double-tagging attack the protection offered by the
virtual switch prevented the trafﬁc from entering the virtual
network and reaching the target virtual machine.
Table IV summarizes the results of the third scenario where
the attack is launched from a virtual machine located within
one of the seven test environments, and the target system is
another virtual machine located within a different hypervisor
environment. In this scenario, we are testing to see if the attack
can be successfully launched from within a virtual network. As
can be seen by the results, the attack was successful in four
out of the seven test environments. Any hypervisor using either
802.1d Linux bridging or Open vSwitch for virtual networking
was vulnerable.
These experiments provide strong evidence that double-
5
R. Bull, J. Matthews, K. Trumbull
DEF CON 24 - (August 2016)
TABLE III.
PHYSICAL DOUBLE-TAGGING ATTACK SCENARIO RESULTS
ACROSS THE SEVEN VIRTUAL TEST ENVIRONMENTS. 3INDICATES THAT A
FRAME WAS SUCCESSFULLY SENT FROM THE PHYSICAL ATTACKING
SYSTEM TO A TARGET VIRTUAL MACHINE LOCATED ON VLAN 20 WITHIN
THE CORRESPONDING HYPERVISOR ENVIRONMENT.
Results of Attack
Platform
Single Switch
Double Switch
OS Xen w/ Linux Bridging
3
3
OS Xen w/ Open vSwitch
3
3
VMWare vSphere ESXi
3
3
MS Hyper-V Standard vSwitch
MS Hyper-V Cisco Nexus 1000v
3
3
Proxmox
3
3
Citrix XenServer
3
3
TABLE IV.
VIRTUAL DOUBLE-TAGGING ATTACK SCENARIO RESULTS
ACROSS THE SEVEN VIRTUAL TEST ENVIRONMENTS. 3INDICATES THAT A
FRAME WAS SUCCESSFULLY SENT FROM THE VIRTUAL ATTACKING
SYSTEM TO A TARGET SYSTEM LOCATED WITHIN A SEPARATE VIRTUAL
NETWORK ON VLAN 20.
Results of Attack
Platform
Virtual Switch
OS Xen w/ Linux Bridging
3
OS Xen w/ Open vSwitch
3
VMWare vSphere ESXi
MS Hyper-V Standard vSwitch
MS Hyper-V Cisco Nexus 1000v
Proxmox
3
Citrix XenServer
3
tagging VLAN hopping attacks should be considered a serious
threat to virtualized environments. In order to protect the
virtual machines located within these environments, we have
some speciﬁc suggestions for conﬁguring the physical switches
to which the hypervisors are connected. Administrators should
avoid assigning any hosts to the native VLAN (typically VLAN
1) on any physical switches that are serving as uplinks for
virtual networks. If VLANs are to be used within hypervisor
environments for virtual machines, it is necessary to connect
the virtual switch to a trunk port on the physical switch. This
trunk port should not be conﬁgured to carry native VLAN
trafﬁc since the double-tagging attack depends on having
access to the native VLAN in order to get that ﬁrst 802.1q tag
stripped out of the frame. Our results show that even though the
double-tagging attack requires two switches to be successful a
virtual switch could easily act as the second switch allowing
the attack to reach the target destination. As of right now, it is
not possible to conﬁgure the virtual switch to stop these attacks
so it is important to focus on making sure that the switches that
connect the virtual networks to the physical world are secure.
C. ARP Poisoning Man-in-the-Middle Attack
The Address Resolution Protocol (ARP) is a Layer 2
networking protocol that is used to map the physical MAC
addresses of connected devices within a broadcast domain to
their logical Layer 3 IP addresses. Each device on the network
maintains an ARP cache which is a table that is dynamically
updated when a device discovers other devices located within
the same Layer 2 network. When a system is initially placed
on a network, the ARP cache is empty and is ﬁlled with new
entries as the system begins to communicate with other sys-
tems either directly or via broadcast transmissions. Typically,
the ﬁrst entry added to the ARP cache is the default gateway
for the network. The process of updating the ARP table is
rather simple. If a system on a network does not know the
physical MAC address of another system within the broadcast
domain, it will send out a broadcast transmission to every
connected device asking who has that speciﬁc Layer 3 IP
address. Once the system that is assigned the target Layer 3
IP address receives the Layer 2 ARP broadcast, it sends a
unicast reply back to the requesting system with its physical
Layer 2 MAC address. The requesting system then updates its
ARP cache so that it does not need to send out the broadcast
request again when it needs to establish future connections to
that particular system.
The ARP protocol has been proven to be vulnerable to
Man-in-the-Middle attacks[23], [24] where an attacker can
manipulate the ARP cache on a target system in order to place
themselves in the middle of the communication stream to either
sniff or manipulate the trafﬁc going between the systems. This
attack is so well known that open source tools[25], [26] have
been developed to make it very easy for an attacker to take
advantage of the vulnerability.
We tested the effects of an ARP poisoning Man-in-the-
Middle attack on each of the virtual network conﬁgurations
within our test environment. In order to conduct the experi-
ments, each hypervisor environment was allocated two Kali
2.0 virtual machines and a CentOS 7 router system that acted
as the default gateway for the virtual network providing access
to the Internet. One of the Kali 2.0 virtual machines was setup
as the attacking system and the other was the target system.
The goal of the experiment was to poison the ARP cache of
both the target Kali 2.0 virtual machine and the default gateway
in order to place the attacking Kali 2.0 system in the middle
of the communication stream and sniff the trafﬁc going from
the target system through the default gateway to the Internet.
Figure 8 provides a network diagram of the attack scenario
illustrating the trafﬁc paths from the target system before and
after the attack.
In order to streamline the attacks across our seven test
environments we opted to use a modiﬁed version of the ARP
cache poisoning Python/Scapy script found in the Black Hat
Python[27] book, and a simple custom BASH script using
tcpdump to monitor the sniffed trafﬁc. The scripts allowed us
to effectively automate the experiments through SSH within
each of the hypervisor environments. The following procedure
was performed within each virtualized environment in order to
evaluate the effects of the attack within the respective virtual
network:
1)
Open an SSH terminal connection to each virtual
machine (router, target, and attacker).
2)
Run arp -a on each virtual machine in order to
document the initial ARP cache state.
3)
Enable IP forwarding on the attacker system (echo 1
>/proc/sys/ipv4/ip forward).
6
R. Bull, J. Matthews, K. Trumbull
DEF CON 24 - (August 2016)
Fig. 8.
ARP poisoning Man-in-the-Middle attack scenario diagram.
4)
Run the Python/Scapy script on the attacker system
to poison the ARP cache of both the router and target
systems.
5)
Run arp -a again on each virtual machine in order to
document the modiﬁed ARP cache state.
6)
Run a continuous ping from the target system to
www.google.com.
7)
The Python/Scapy script sets up a sniffer to collect
the trafﬁc and dumps it to a pcap ﬁle, then when
ﬁnished it restores the ARP cache back to normal on
the router and target systems.
8)
Run arp -a again on each virtual machine in order to
document the restored ARP cache state.
9)
Run the tcpdump script on the pcap ﬁle to view the
results.
We have posted narrated demo videos of the ARP poison-
ing Man-in-the-Middle attack experiments within the VMWare
ESXi[28] and the Microsoft Hyper-V/Cisco Nexus 1000v[29]
environments to YouTube to document the process. Table V
summarizes the results of the experiment across each of the
virtualized platforms that were tested. As can be seen by
the results, the attack was successful in each of the seven
environments allowing an attacker to manipulate the ARP
cache tables of any virtual machine located within the same
broadcast domain on the virtual network.
TABLE V.