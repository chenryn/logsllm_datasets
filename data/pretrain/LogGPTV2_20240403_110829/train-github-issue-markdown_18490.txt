 **TypeScript Version:**
1.7.5 / 1.8.0-beta / nightly (1.9.0-dev.20160217)
**Code**
    // A self-contained demonstration of the problem follows...
    switch (true) {
      case true:
        let foo = true;
    }
    switch (true) {
      case true:
        let foo = false;
    }
    console.log(foo);
    // Static type checking correctly says, "Cannot find name 'foo'"
    // but compiler transforms it anyway and does not perform hygiene
    // on each foo variable.
    // Should be Uncaught ReferenceError: foo is not defined
**Expected behavior:**  
Identifier hygiene is performed on each lexically bound `let foo` to their
parent `SwitchBlock`.
Output example of expected:
    switch (true) {
      case true:
        var foo_1 = true;
    }
    switch (true) {
      case true:
        var foo_2 = false;
    }
    console.log(foo);
    // Uncaught ReferenceError: foo is not defined
**Actual behavior:**  
Static type checker sees issue, but transform does not perform hygiene so no
`ReferenceError` happens and instead `console.log(foo) === false`.
The same problem also applies even if you provide explicit blocks inside each
`CaseClause|DefaultClause`, which is even more unexpected:
    switch (true) {
      case true: {
        let foo = true;
      }
    }
    switch (true) {
      case true: {
        let foo = false;
      }
    }
    console.log(foo);
    // false but should be Uncaught ReferenceError: foo is not defined
One thing to note is that if the variable declaration inside the `SwitchBlock`
shadows, then it _will_ correctly perform hygiene:
    let foo = 'this works correctly';
    switch (true) {
      case true:
        let foo = true;
    }
    switch (true) {
      case true:
        let foo = false;
    }
    console.log(foo);
    // "this works correctly"