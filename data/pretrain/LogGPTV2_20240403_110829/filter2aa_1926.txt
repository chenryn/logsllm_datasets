1. 前言
昨晚看到朋友圈推了个和裸聊诈骗斗智斗勇的视频，点进去一看感觉和上个月搞得一个站的后台很像，
所以想上去看一下，结果网站关了，就通过fofa重新搜了一个存活的网站，发现确实很像。
于是就有了这篇文章，由于很多都是后补的图，可能不是很完整，见谅。
2. 第一次shell
由于上次拿到目标的时候就给了一个域名，所以先浏览一下看看，常规的扫一下目录。
发现存在 uploads , temp , tmp 这几个看起来很像上传文件的目录，而且有 file.php 这个文件，然后发
现扫出很多奇奇怪怪的东西，猜测对应目录nginx应该是设置了php禁止执行。
首页长这样
由于没有给我提供账号密码（后面发现这个是后台登录。。给账号密码就有鬼了），所以我先看扫出来
的路径有什么有价值的东西。
我先进app目录看看，进去之后长这样。
好家伙，赶紧主动一点下一步，然后我发现我点哪都没反应。将ua设置成手机的也不行，用手机模拟器
的浏览器打开也没反应，那就只能看看js有泄露啥敏感的接口吧。然后看到js里面有申请手机的一些权
限，然后有个文件上传的接口。我想应该就是诈骗的诱导这些一时上头的人同意这些操作，然后手机的
短信、联系人、视频、照片等等敏感的东西都通过这个文件上传接口上传到对方服务器上了。
2.1. 任意文件上传
有上传接口那就先测试上传，毕竟如果没限制的话就直接拿下了。
首先看到他上传文件的时候有三个参数，文件，手机号和邀请码，我先尝试只上传文件不带其他参数,通
过burp构造上传包上传之后返回了一个success！
这里我想到之前扫目录的时候扫了三个感觉像上传的目录出来，但是上传之后的文件名也不知道，我这
里就直接猜测他上传之后没有改文件名，因为诈骗人员可能也要根据文件名判断文件是否存在可以利用
的信息。然后尝试了几个目录发现我刚才上传的文件确实就在 /uploads/123.test 下面！后面看
file.php的代码的时候发现其实上传之后是会改文件名的，但是由于我没有提交另外两个参数，所以我上
传的文件名就没有变，代码23-24行。
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
之后我尝试直接上传php文件，上传返回的也是success。我这时候就以为这个目标已经拿下了。
结果，对方通过nginx设置了uploads目录下的php文件禁止执行。
2.2. 佛站
这时候我就想通过佛站找到同类型的站点批量上传一下试试，看看有没有偷懒没配置禁止执行的网站，
顺手扫了一波备份文件没扫到，后面拿下shell的时候发现确实有备份不过名字是猜不出的那种。
由于上传包很简单可以直接通过burp复制出curl command然后在服务器批量上传一下，然后批量检测
一下上传之后是否可以执行。
接下来就能直接getshell下载源码进行审计了，最终发现通过添加save_name参数可以更改上传路径。
下面上传包就可以将文件上传到http://xxxxx/app/123.php.最终拿到shell。打到xss的ip也是云南那边
的。最后提交报告，任务结束。
curl -i -s -k -X $'POST' \
    -H $'Host: xxxxx'  -H $'Content-Type: multipart/form-data; boundary=----
WebKitFormBoundaryRGCUKchBA0Uphyly' -H $'User-Agent: Mozilla/5.0 (Windows NT 
10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 
Safari/537.36' \
    --data-binary $'------WebKitFormBoundaryRGCUKchBA0Uphyly\x0d\x0aContent-
Disposition: form-data; name=\"uploadedfile\"; 
filename=\"test.php\"\x0d\x0aContent-Type: 
image/jpeg\x0d\x0a\x0d\x0a\xef\xbf\xbdPNG\x0d\x0a\x1a\x0a\x0d\x0a------WebKitFormBoundaryRGCUKchBA0Uphyly--\x0d\x0a' \
    $'https://xxxxx/file.php'
1
2
3
4
POST /file.php HTTP/1.1
Host: xxxxx
1
2
3. 第二次getshell
在看到朋友圈转发的视频之后，我想起我上面那个案件，由于当时的域名已经失效，并且后台没有截
图，所以通过fo站拿到还存活的站点，进去看一看。
结果发现网站好像已经把这个上传漏洞修补了。
3.1. 上传绕过
经过尝试网站禁止了php、php5后缀的上传，我上传php[1-7]都不解析，全都下回来了。并且目标是
linux服务器，所以后面加空格[.]啥的也没用，然后想了想可以通过.user.ini文件让当前目录php运行时
加载任意文件，通过代码发现他还自带ueditor文件管理器 lib/ueditor/1.4.3/index.html 。由于
move_uploaded_file 函数是会覆盖已存在的文件所以也可以通过更改ueditor的配置文件允许上传php
后缀的文件和指定上传目录也可以getshell。后面经过尝试发现确实都可以，下面我就演示第一种方式
getshell。
Content-Type: multipart/form-data; boundary=----
WebKitFormBoundaryRGCUKchBA0Uphyly
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 
(KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36
------WebKitFormBoundaryRGCUKchBA0Uphyly
Content-Disposition: form-data; name="save_path"
./app/
------WebKitFormBoundaryRGCUKchBA0Uphyly
Content-Disposition: form-data; name="uploadedfile"; filename="123.php"
Content-Type: image/jpeg
PNG
•
------WebKitFormBoundaryRGCUKchBA0Uphyly--
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
进后台一看发现数据都是七月初的感觉是一个废弃的站点，所以换了一个站点尝试，结果发现上面的方
法不行了，我不论如何修改 save_name 参数文件上传的位置都是在uploads文件下，所以我重新看了
file.php这个文件之后发现sjh这个参数存在路径穿越漏洞，也可以更改文件上传的位置,只需要上
传 ../common 就行了。下面是对方修改之后的代码。
看文件修改时间应该不是和我上个月的渗透有关。
if($_POST["save_path"]){
    //$save_path = $_POST["save_path"];
    $save_path  = "./uploads/".$_POST['sjh']."/";
}else{
    $save_path  = "./uploads/".$_POST['sjh']."/";
}
1
2
3
4
5
6
进到后台查看页面发现，确实有点像，但不完全像。