File Encryptor
Password Manager
Picture Browser
Messenger
Password Manager
PDF Parser
SSH client
Ransomware
Proxy client
Ransomware
Downloader
File Compressor
-
-
-
-
-
-
-
-
-
-
Protection
-
UPX
-
-
-
UPX
-
-
-
-
-
Themida
Dynamic DLL
-
-
Table 1: The collected binary executables in our benchmark.
6 EVALUATION
We have tested K-Hunt with 10 popular crypto libraries and 15
real-world programs, identifying many insecure keys among these
programs. In this section, we present our evaluation results. We first
describe our experimental setup in §6.1, then present the detection
results for crypto keys in §6.2, and finally detail the identified
insecure keys in §6.3.
6.1 Experiment Setup
As far we know, there are no standard benchmarks that cover widely
used crypto algorithms. As such, we create a benchmark, detailed
in Table 1, that contains recent versions of 10 crypto libraries and
15 real-world programs that use crypto operations. Our collected
benchmark suite includes: (a) popular standard symmetric ciphers
(AES, Twofish), asymmetric ciphers (RSA), stream ciphers (RC4,
ChaCha20), and digital signatures (DSA, ECDSA, Ed25519); (b)
different key sizes for the same algorithm (e.g., AES-128, AES-256);
(c) one proprietary cipher (Cryptochief); (d) proprietary programs
for which we do not have access to the source code (Cryptochief,
Imagine, UltraSurf, WinRAR); (e) benign programs that use binary
code protection techniques such as code packing (Ccrypt, Imagine,
UltraSurf); and (f) two samples from recent ransomware families
(Sage, WannaCry).
For each crypto library, we developed test programs to encryp-
t/decrypt using AES, RSA, and to sign/verify using ECDSA. Since
Libsodium does not support RSA and ECDSA, we included the Ed25519
digital signature instead.
For each program, we have manually built the ground truth re-
garding their key management using the program’s source code
(when available), or by manually reverse-engineering the executa-
bles (for proprietary programs and malware). Note that for pro-
grams for which source code is available, we only use the source
code to build the ground truth. K-Hunt operates on executables
Algorithm
AES-256
RSA-2048
ECDSA
AES-256
RSA-2048
ECDSA
AES-256
RSA-2048
ECDSA
AES NI-256
Ed25519
AES-256
RSA-2048
ECDSA
AES-256
RSA-2048
ECDSA
AES-256
RSA-2048
ECDSA
AES-256
RSA-2048
ECDSA
AES-256
RSA-2048
ECDSA
B1
53
1180
958
1281
1949
1916
126
565
340
7
690
60
404
330
38
411
186
44
154
255
58
210
188
50
295
277
B2
13
569
921
26
924
1425
25
463
322
4
686
43
385
274
13
87
92
40
138
245
10
175
143
36
235
202
B3
7
162
300
5
214
305
3
153
49
4
171
4
69
72
3
61
39
13
39
47
4
41
17
4
36
27
N
1
6
2
1
6
8
1
6
10
1
8
1
7
4
1
6
8
1
12
9
1
10
6
1
7
5
S
240
1024
224
240
896
288
240
896
320
240
288
240
1152
128
240
1152
288
240
1664
384
240
1552
192
240
1152
160
Target
Botan
Crypto++
Libgcrypt
LibSodium
LibTomcrypt
Nettle
mbedTLS
OpenSSL
WolfSSL
7-zip
Ccrypt
Cryptcat
Cryptochief
Enpass
Imagine
IpMsg
Keepass
MuPDF
PSCP
Sage
UltraSurf
WannaCry
Wget
WinRAR
IL
32
256
128
32
256
64
32
896
96
32
256
32
1152
97
32
896
32
32
256
64
32
640
50
32
1152
32
32
32
varied
3
32
928
32
32
16
32
32
16
16
32
32
48
AES NI-256
AES-256
Twofish
Proprietary ∗
AES NI-256
DSA-1024 ∗
AES-256
AES-256
AES-128
AES-256
ChaCha20 ∗
RC4 ∗
AES-128 ∗
AES-256
AES-128 ∗
AES-256 ∗
2
44
54
23
8
241
168
481
262
195
31
191
26
268
181
214
1
1
1
1
1
5
1
1
1
1
1
1
1
1
1
1
240