of which can be used to encode individual bits of information. These
are: the position of the facet descriptions in the file, compliance of
the normal vector to the right hand rule, and the order in which
vertices are listed within the facet definitions; additionally, number
4Due to the simplicity of the format, this was done manually rather than with an
automated tool.
270RAID ’21, October 6–8, 2021, San Sebastian, Spain
Yampolskiy et al.
This means that the sequence in which the three vertices are listed
can be used to encode bits of information. The correlation with
the normal vector restricts the valid sequences of listed vertices to
the cyclical rotation of their order, i.e., (v1, v2, v3), (v2, v3, v1), and
(v3, v1, v2).
If all three vertices are distinct, i.e., no two vertices have the same
x, y, z coordinates, up to three values (0, 1, and 2) can be encoded per
facet. This, however, would require that the bit stream is converted
to base 3 (instead of base 2 for the binary value representation).
While the obvious advantage would be the increase of encoding
capacity to up to ⌊log2(3FN)⌋ binary bits of information in a STL
file with FN facets, this will increase the complexity.
Alternatively, if only a single binary value is encoded using
vertices rotation, the encoding capacity is limited to FN bits. While
decreasing capacity, this approach eliminates base 2 to 3 conversion.
In the remainder of this paper, we will proceed with the encoding
of a single bit of information per facet.
In theory, all the vertices should be distinct, with different x,
y, z coordinates. This is not guaranteed in real STL files, which
often need to be “repaired” before 3D printing. To account for this
situation, we will skip facets in which all three vertices have exactly
the same coordinates. For the remaining facets, we elect to encode a
0 bit value by starting with the vertex whose combined coordinate
value is minimal, and 1 otherwise. For the example facet in Figure 2a,
steganographic representations of bit values 0 and 1 are depicted
in Figures 2b and 2c, respectively).
More formally, for any facet with at least two distinct vertices
we define the encoded bit value as follows:
(cid:40)1,
(a) 3D Facet Defined by its Three Vertices
f a c e t normal −0.0573 0 . 7 7 4 0 . 6 3 0 6
ou ter
loop
v e r t e x 5 . 9 0 6 9 9 9 7 . 5 8 9 9 9 8 5 0 . 8 8 6
v e r t e x 5 . 9 7 2 9 9 9 7 . 3 2 5 9 9 7 5 1 . 2 1 6
5 0 . 7 5 4
v e r t e x 6 . 2 3 6 9 9 8 7 . 7 2 2
endloop
e n d f a c e t
f a c e t normal −0.0573 0 . 7 7 4 0 . 6 3 0 6
ou ter
loop
v e r t e x 5 . 9 7 2 9 9 9 7 . 3 2 5 9 9 7 5 1 . 2 1 6
v e r t e x 6 . 2 3 6 9 9 8 7 . 7 2 2
5 0 . 7 5 4
v e r t e x 5 . 9 0 6 9 9 9 7 . 5 8 9 9 9 8 5 0 . 8 8 6
endloop
e n d f a c e t
(b) Two Options Representing Bit Value 0
f a c e t normal −0.0573 0 . 7 7 4 0 . 6 3 0 6
ou ter
loop
v e r t e x 6 . 2 3 6 9 9 8 7 . 7 2 2
5 0 . 7 5 4
v e r t e x 5 . 9 0 6 9 9 9 7 . 5 8 9 9 9 8 5 0 . 8 8 6
v e r t e x 5 . 9 7 2 9 9 9 7 . 3 2 5 9 9 7 5 1 . 2 1 6
endloop
e n d f a c e t
(c) Represents Bit Value 1
Encoded Bit =
0, otherwise.
if v1=max(v1, max(v2,v3))
Figure 2: Steganographic Encoding of a Single Bit in a Facet
representations and spaces can be used with the ASCII-style STL
file format. We present a brief discussion of alternative bit encoding
approaches and their drawbacks in Appendix A.1.
After considering these options, we elected to encode individual
bits of information via the order in which vertices are specified
within a facet. This choice is motivated by several factors. First, we
think that this approach renders the steganographically encoded
information least likely to be detected either manually or by an au-
tomatic distinguisher. Second, using the approach described below,
a recipient can decode the transmitted information “blindly,” i.e.,
without having access to the original STL file. Lastly, the proposed
bit encoding primitive should neither interfere with the printability
of nor introduce any distortions in the 3D geometry of the object
specified in the STL file.
The proposed bit encoding approach is based on the following
observation. Each facet is uniquely defined and identified by its
three vertices, which we can refer to as v1, v2, v3 (see Figure 2a). In
a well-formed STL file, the order of these vertices should follow the
right hand rule with the normal vector (see Section 3). However,
beyond this, the order in which the vertices should be specified
is neither defined nor impacts the triangular facet they describe.
The comparison between two arbitrary vertices vi and vj can
be defined as a successive comparison of their respective x, y, z
coordinates, treating these as components of a larger number.
The max function can be implemented as follows:
max ( v1 , v2 )
{
i f
i f
i f
( v1 . x > 1 ;
}
}
DecodeByte
{
( )
byteValue = 0 x00 ;
bitMask = 0 x80 ;
i > 1 ;
}
return byteValue ;
}
Figure 4: Encoding/Decoding of a Single Byte (MSB to LSB)
the advancing facet pointer can be used in a strong attack using a
stream cipher over the steganographic channel. Below we outline
how the functions of a raw steganographic channel can be used to
encode a single binary file in a carrier STL file.
4.3 En-/Decoding Arbitrary Binary Files
Our proposal for an attack using an STL file to encode an arbitrary
sequence of bytes (such as a binary file) is depicted in Figure 5. The
binary file is the secret message that needs to be transmitted. To
facilitate the encoding and decoding of variable-length binary files,
the size has to be included in the encoded message. Therefore, the
encoded message M consists of a fixed-length size field (specifying
a number of bytes) and a variable length secret field (see Figure 5a).
We use a size field 4 bytes long, supporting the encoding of up to
4GB long secret byte streams. The result of encoding a message M in
an innocent-seeming carrier STL file is STLM, which contains both
the original 3D model and the steganographically encoded message.
When sent to an external source over the Internet (e.g., as a part of
the attack setting described in Section 2), this approach aims to fool
firewall and IDS/IPS systems, which should let it through without
raising a red flag.
Figure 5b depicts pseudo-code for an EncodeFileInSTL function
that implements the encoding part of the approach. The encoding
function takes three parameters: a carrier STL file name, fnSTL, a
binary file name, fnSecret, and a destination STL file name, fnSTLdest.
The carrier STL file is the original STL file that will be encoded with
the secret message. The binary file contains the secret message to
be encoded. The destination STL file will contain the combined
carrier file and binary file. To start encoding, the entire mesh of
the carrier STL file is loaded. Next, the entire secret binary file is
read, obtaining a sequence of bytes as well as the total number of
bytes in the file. At this stage, the carrier STL file is evaluated for
else
}
else
{
i f
}
}
( f a c e t . v1 == max ( f a c e t . v1 ,
max ( f a c e t . v2 ,
/ / R o t a t e L e f t
f a c e t . v1 ,
f a c e t . v2 ,
f a c e t . v2 ,
f a c e t . v3 ,
f a c e t . v3 =
f a c e t . v1 ;
DecodeBit
{
( f a c e t )
i f
( f a c e t . v1 == max ( f a c e t . v1 ,
max ( f a c e t . v2 ,
return 1 ;
return 0 ;
}
f a c e t . v3 ) ) )
f a c e t . v3 ) ) )
Figure 3: Encoding/Decoding of a Single Bit in/from a Facet
rotate left. The DecodeBit function checks whether the value of the
first vertex described in the facet is the greatest of all three. If so,
the function recognizes it as bit value 1, which is returned to the
caller; otherwise, it returns 0.
4.2 Raw Steganographic Channel: Encoding/
Decoding Bytes with File Position Update
The bit encoding/decoding primitives described in Section 4.1 can
be used as a building block for the encoding/decoding of bytes.
Encoding individual bits in a byte can be done in an arbitrary order
as long as it is “mirrored” by the decoding routine. The two simplest
bit encoding orders would be to start with the most significant bit
(MSB) and proceed bit by bit to the least significant bit (LSB), or
similarly from LSB to MSB.
Pseudo-code for the encoding and decoding of individual bytes
is shown in Figure 4. The most notable feature is the use of the
GetNextFacet function which, in addition to returning a reference
to the facet, advances an internal pointer in the STL file to the