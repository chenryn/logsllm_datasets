(ms)
254
285
272
263
310
304
270
256
balls
(fps)
14.95
12.73
13.84
14.50
11.47
11.24
13.42
14.71
linelayout
(runs)
106.26
90.43
94.47
100.71
88.10
74.91
97.43
102.39
html5
(ms)
3543
4233
3974
3830
5294
6793
3892
3721
Code Size
Overhead %
-
7.20
14.11
7.48
7.31
44.18
7.85
7.48
SAFEDISPATCH Benchmarking Results and Code Size Overhead. The table above shows our benchmarking measurements for SAFEDISPATCH
Fig. 11.
which correspond to the runtime overhead graph in Figure 10: for times reported in milliseconds, smaller is better, for other reported quantities (score, fps, and
runs), larger is better. We additionally measured average code size increase due to SAFEDISPATCH data structures and instrumentation, and observed overheads
typically well under 10%.
Benchmark Overhead %
Proﬁle
octane
kraken
sunspider
octane
0.30
0.79
1.15
kraken
2.51
1.22
2.25
sunspider
6.30
6.69
1.97
Component
Basic Instrumentation
Class Hierarchy Analysis
Inlining Optimizations
Total
Framework
Clang++
-
LLVM
Language
C++
Python
C++
LOC
177
691
381
1249
Fig. 12. Cross Proﬁling. To evaluate the effect of proﬁling across bench-
marks, we measured the overhead of running each binary optimized for one
JavaScript performance suite on the other suites. The numbers reported are
percentage overhead for the hybrid approach.
not just using proﬁle information, but also using a random
order. The random order is meant to capture the situation where
we perform inlining, but we don’t have proﬁle information.
We can see that inlining alone, without proﬁle information
(“mchk inline rand” and “vtchk inline rand”) improves per-
formance compared to the unoptimized instrumentation, but
only for method checking. For vtable checking, the random-
order inlining causes a slowdown because there were too
many checks to inline, which affected performance negatively
(this is conﬁrmed by the memory overhead shown in Fig-
ure 11. Inlining with proﬁle information (“mchk inline prof”
and “vtchk inline prof”) provides a signiﬁcant reduction in
percentage overhead compared to the unoptimized instrumen-
tation. Finally, Figure 10 also shows that
the hybrid
approach from Section V has the lowest overhead by far, about
2% on average.
that
Cross Proﬁling. As shown above, proﬁling information
can signiﬁcantly reduce SAFEDISPATCH overhead. However,
once deployed, applications are often run on inputs that were
not proﬁled. To measure the effectiveness of proﬁling on one
application and running on another, we used each of the
binaries optimized for each JavaScript benchmark and ran it
on the others. We focused on JavaScript benchmarks for this
cross-proﬁling evaluation because the rendering benchmarks
each evaluate a different kind of rendering (e.g. text, graphics,
html rendering), and it would be unlikely that one of them
would be a good predictor for others (in essence we would have
SAFEDISPATCH Prototype LOC. The table above characterizes
Fig. 13.
the major components in our SAFEDISPATCH implementation. The basic
instrumentation module is implemented as a Clang++ compiler pass and inserts
calls to the check() fucntion as described in Section III function at each
method call site, additionally logging some type data. These logs are used
by the CHA module, written in Python, to build the ValidM and ValidVT
used during checking at runtime. The ﬁnal module is implemented as a set of
low-level LLVM passes to inline checks based on proﬁling information.
to proﬁle all three rendering benchmarks to get a representative
set, but then this would not evaluate cross-proﬁling). Figure 12
shows the results of cross-proﬁling for the hybrid approach.
Each row and each column is a benchmark, and at row y
and column x, we show the percentage overhead of running
the x benchmark using the binary optimized for y’s proﬁle
information. While we can see that in some cases the overhead
jumps to 6%, if we proﬁle with sunspider, the overhead still
remains in the vicinity of 2%. This may indicate that sunspider
is a more representative Javascript benchmark, which is better
suited for generating good proﬁle information.
Code Size Overhead. We also measured the increase to
code size resulting from SAFEDISPATCH data structures and
instrumentation in the generated executable, shown in the
ﬁnal column of the table from Figure 11. For the hybrid
approach, the generated executable size was within 10% of
the corresponding unprotected executable. Note that the mem-
ory overhead for “vtchk inline rand” is substantial, which is
consistent with the run-time overhead for “vtchk inline rand”
from Figure 10.
B. Development Effort
Our prototype implementation of SAFEDISPATCH has three
major components: (1) the basic instrumentation compiler pass,
11
(2) CHA analysis to generate the ValidM and ValidVT
internal SAFEDISPATCH checking data structures, and (3)
inlining optimizations. The size of each component is listed
in Figure 13.
The basic instrumentation pass is implemented as a pass
in Clang++ while the compiler has access to source-level type
information which is erased once a program is translated into
the lower level LLVM representation. This pass also produces
information used in our second major component, the CHA
analysis, which we implemented in a set of Python scripts to
build the intermediate ValdiM and ValidVT tables. Finally,
we implemented our inlining passes as an optimization in
LLVM which can take advantage of proﬁling information to
order checking branches by how frequently they were taken in
proﬁle runs.
C. Compatibility
In principle, SAFEDISPATCH only incurs minimal compile
time overhead to build the ValidM and ValidVT tables and
instrument virtual method call sites as described in Sections III,
IV and V. Thus,
the programmer should be able to use
SAFEDISPATCH on every compilation without disrupting the
typical edit, compile, test workﬂow. However, in our current
prototype implementation, SAFEDISPATCH performs two full
compilations to gather necessary analysis results before instru-
menting the code, leading to a roughly 2x increase in compile
time. As mentioned above, this is an artifact of our prototype
implementation which can easily be ﬁxed and is not an inherit
limitation of SAFEDISPATCH.
The SAFEDISPATCH prototype also requires a whole-
program CHA to perform instrumentation, and does not cur-
rently support separate compilation. There are two main chal-
lenges in supporting separate compilation. The ﬁrst challenge
is to make CHA modular. In particular, the compiler would
have to generate CHA information per-compilation unit, which
the linker would then combine into whole-program informa-
tion. This approach to CHA is very similar to the approach
taken in GCC’s vtable veriﬁcation branch [27], [28], more
details of which are discussed in Section VIII. The second
challenge is to inline checks in a modular way. In particular,
editing code in one ﬁle could require additional checks in
another ﬁle. To address this challenge, the compiler could
insert calls to check at compile time, and then replace these
calls with inserted inlined checks at link-time (similarly to
link-time inlining of function calls). Finally, proﬁling data
for inlining optimizations can be collected using a proﬁle
build in which the check function collects the required
function/vtable pointers. This proﬁle build can easily support
separate compilation, as it does not require inlining or CHA.
VII. SAFEDISPATCH SECURITY ANALYSIS
In this section we consider the security implications of
SAFEDISPATCH including the class of attacks SAFEDISPATCH
prevents and some limitations of our approach.
A. SAFEDISPATCH Guarantee
The instrumentation inserted by the SAFEDISPATCH com-
piler guarantees that each virtual method call made at runtime
jumps to a valid implementation of that method according
to C++ dynamic dispatch rules. This guarantee immediately
eliminates an attacker’s ability to arbitrarily compromise the
control ﬂow of an application using a vtable hijacking attack.
Our defense would prevent crucial steps in many recent, high
proﬁle vtable hijacking attacks, e.g. Pinkie Pie’s 2012 Zero-day
exploit of Google Chrome which escaped the tab sandbox and
allowed an adversary to compromise the underlying system. In
addition to preventing many attacks, SAFEDISPATCH provides
an intuitive guarantee in terms of the C++ type system,
which is easy to understand for programmers who are familiar
with the type system. Furthermore, the programmer cannot
inadvertently nullify the SAFEDISPATCH guarantee through a
programming mistake; the checks inserted by SAFEDISPATCH
will detect errors such as incorrect type casts which would
otherwise lead to a method call invoking an invalid method
implementation.
The SAFEDISPATCH guarantee provides strong defense
against vtable hijacking attacks, regardless of how the attack is
mounted, e.g. use-after-free error, heap based buffer overﬂow,
type confusion, etc. As discussed further in the next section
on related work, other defenses only focus on particular
styles of attack (for example mitigating use-after-free errors
by reference counting), or incur non-trivial overhead (for
example using a custom allocator to ensure the memory safety
properties necessary to prevent vtable hijacking). Furthermore,
SAFEDISPATCH protection is always safe to apply: all pro-
grams should already satisfy the SAFEDISPATCH guarantee –
we are simply enforcing it.
SAFEDISPATCH also defends against potentially ex-
ploitable,
invalid typecasts made by the programmer [29].
If a programmer incorrectly casts an object of static type c
to another type c0 and at runtime the object does not have
type c0, then methods invoked on the object will not be valid
implementation and SAFEDISPATCH will signal an error.
The astute reader may wonder why the checks inserted
by SAFEDISPATCH instrumentation are any more secure than
the vtable pointer stored in a runtime object. Unlike such
heap pointers, the checks inserted by SAFEDISPATCH and
their associated data structures are embedded in the generated
executable which resides in read-only memory, ensuring that an
attacker will not be able to corrupt SAFEDISPATCH inserted
checks at runtime. Of course, this assumes the attacker will
not be able to remap the program’s text segment, or portion
of memory containing the application’s executable code, to be
writable.
B. SAFEDISPATCH Limitations
SAFEDISPATCH guarantees that one of
the valid method
implementations for a given call site will be invoked at run-
time, not that the correct method will be called. For example,
an attacker could still corrupt an object’s vtable pointer to point
to the vtable of a child class, causing an object to invoke a child
class’s implementation of a method instead of it’s own. While
this call would technically satisfy the static C++ dynamic
dispatch rules, it could lead to further memory corruption or
other undesirable effects. However, we are not aware of any
exploits in the wild which take advantage of such behavior.
SAFEDISPATCH detects vtable pointer corruption precisely
when it would result in an invalid method invocation. This does
12
not prevent other memory corruption attacks, such as overwrit-
ing the return address stored in a function’s activation record
on the stack. SAFEDISPATCH also does not currently prevent
corrupting arbitrary (non-object) function pointer values. Such
function pointers are important in systems making extensive
use of callbacks or continuations. SAFEDISPATCH could be
extended to protect such calls through function pointers by
conceptually treating them as method invocations of a special
ghost class introduced by the compiler. This change, which we
will explore in future work, would also be transparent to the
programmer and would further strengthen our guarantee.
SAFEDISPATCH only protects the code it compiles. Thus, if
an application dynamically loads unprotected system libraries,
an attacker may be able to compromise control ﬂow within the
library code via vtable hijacking. While such libraries can be
compiled with SAFEDISPATCH to prevent such attacks, it’s
important to note that SAFEDISPATCH requires performing
a whole program Class Hierarchy Analysis on the entire
program, including all application libraries and all system
libraries. Unfortunately,
is well known that such whole
program analyses present challenges in the face of separate
compilation, dynamically linked libraries, and shared libraries.
As a result, our current SAFEDISPATCH prototype protects the
entire application code, including all application libraries, but
it does not protect shared system libraries such as the C++
standard library.
it
Dynamically linked libraries are also a possible source of
incompatibility with the current SAFEDISPATCH prototype.
For example, consider an application that uses a subclass
implemented in an external, dynamically linked library. Since
the subclass information is not statically available to SAFEDIS-
PATCH’s CHA, any such dynamically loaded subclass method
implementations will be reported as invalid by check at
runtime. To overcome this limitation, SAFEDISPATCH would
be required to dynamically update its ValidM and ValidVT
tables as dynamic libraries are loaded at runtime by instru-
mentation of certain system calls (e.g., dlopen). In future
work, we hope to address this limitation by developing better
techniques for performing our CHA analysis in the face of
separate compilation and dynamically linked libraries.
C. Performance and Security Tradeoffs
As discussed in previous sections,
there are multiple
strategies for enforcing the SAFEDISPATCH guarantee which
lead to different security and performance tradeoffs. Vtable
checking provides additional data integrity guarantees over
method checking, in particular for this pointer offsets in
the face of multiple inheritance, but at the cost of additional
runtime overhead. Our hybrid approach adopts vtable checking
at method pointer call sites to reduce runtime overhead, but
uses method checking at non-method-pointer call sites, and so
does not provide the same data integrity guarantees as vtable