### 优化后的文本

```c
ssize = (sizeof(caddr32_t) * nent);
[3]
[...]
cbplist = kmem_alloc(ssize, KM_NOSLEEP);
[4]
if (cbplist == NULL)
    return ENOMEM;

if (copyin(aiocb.cbplist, ssize)) {
    error = EFAULT;
    goto done;
}

[...]

if (aiop->aio_doneq) {
    if (mode1 == DATAMODEL_NATIVE)
        ucbp = (aiocb_t**) cbplist;
    else
        ucbp32 = (caddr32_t*) cbplist;
}

[...]

for (i = 0; i < rommax - CSRROMOFF + 4; i++) {
    if (crom_buf->len > len)
        crom_buf->len = len;
    err = copyout(ptr, crom_buf->ptr, len);
}

在 [1] 处，`len` 和 `crom_buf->len` 都是有符号整数类型。我们可以控制后者的值，因为它在 [2] 处作为参数直接传递给 `ioctl`。无论 `len` 最初被初始化为什么值（无论是 0 还是一些较小的正值），当将 `crom_buf->len` 设定为负值时，在 [3] 处的条件都会满足，并且在 [4] 处调用 `copyout()` 函数时，`len` 作为一个参数传递给它。`copyout()` 函数的原型如下：

```c
int copyout(const void* restrict kaddr, void* restrict udaddr, size_t len) __nonnull(1, 2);
```

在这种情况下，负值会被解释为非常大的正整数，而 `crom_buf->ptr` 指向用户区，这会导致任意读取内核内存。

随着 2009 年 MacOS X Snow Leopard 的发布，本书中涉及的所有操作系统都支持 x86-64 架构上的 64 位内核。这标志着 x86-64 架构（由 AMD 在 2003 年提出）在服务器市场和消费者市场上的广泛应用。我们将在第 3 章中详细探讨 x86-64 架构。

当然，为了向前兼容旧版本的操作系统软件，这些改变并不容易实施。大多数编译器在 32 位代码中使用 ILP32 模型，在 64 位代码中使用 LP64 模型（我们在“未初始化的/未验证的/被破坏的指针解引用”一节中已经讨论了这些数据模型的含义）。需要注意的是，所有主流的 UNIX 操作系统（如 Linux、Solaris、*BSDs 等）和 MacOS X 都使用 LP64 模型。唯一的例外是 Windows，它使用 LLP64 数据模型，其中 `long` 和 `int` 类型的数据是 32 位的，而 `long long` 和指针类型的数据是 64 位的。

这些改变暴露了许多 C 程序员的一些不良习惯，他们通常认为指针、整数和长整数的大小相同，因为过去在 32 位架构上确实是这样的。这是另一类整数问题的常见来源，特别微妙，因为它会影响一些已经正常运行多年的程序（直到出现 64 位端口）。此外，编译器通常会在最常见的整数类型转换中插入隐式类型转换。

---

### 竞态条件

竞态条件是指有两个或多个执行者将要执行某一动作，并且执行结果会因它们的执行顺序不同而不同的情况。在操作系统中，确定性是一个很好的属性，尤其是对于系统的正确运行起决定作用的路径。

竞态条件的发生需要多个竞争者同时执行任务，或者至少一个执行与另一个执行交错进行。第一种情况是在对称多处理器系统中特有的，因为有多 CPU 或多核，可以同时进行多条不同的内核路径。第二种情况是单处理器系统中竞态条件发生的唯一可能情况：开始的任务以某种方式被中断，让第二个任务去执行。现在，这不再是偶然发生的情况：现代内核中的许多部分都可以被抢占，这意味着它们可以被中断以支持其他进程。此外，内核路径可以休眠，例如等待内存分配完成。我们将在第 3 章中看到多调度程序的行为有多大的影响，以及如何增加“赢得”竞争的可能性。

为了避免竞态条件，必须在各种行动者之间保证某种同步性，例如在 A 任务完成前保证 B 任务等待。事实上，在操作系统中，有许多同步机制能够实现各种内核任务/路径间的协调，例如锁、信号量、条件变量等。但是这些同步机制在实现时可能会耗费资源。例如，锁可以让内核进程拥有排斥性的锁，排斥其他内核进程使用 CPU，但如果该进程占用锁太长时间，并且有很多进程争夺该锁，则会影响操作系统的效率。我们将在第 3 章和本书第二部分中提供更详细的分析。此外，可以参考第 1 章最后的“相关阅读”部分，深入理解这个话题。

现在我们对竞态条件有了初步的认识，下面进行具体分析。正如已经知道的，竞态条件可能导致难以发现的 bug（特别是当它们与逻辑 bug 结合时），并且隐藏在那些讨厌的 bug 中，需要追踪和复制再现。多年来，竞态条件引发了众多有趣的 bug 和内核级别的漏洞利用。在这一节的最后，我们将讨论 Linux 内核中页面错误处理程序的问题。在此之前，我们先讨论一个典型的竞态条件情景，该情景来源于 Linux 内核的一个 bug。这个 bug 是内核与必须访问的用户区缓存（因此要拷贝到内核内存中）交互的一个例子，这种情况经常发生在各种不同的内核中。下面是具体的代码：

```c
int cmsghdr_from_user_compat_to_kern(struct msghdr *kmsg, unsigned char *stackbuf, int stackbuf_size) {
    struct compat_cmsghdr_user *ucmsg;
    struct cmsghdr *kcmsg, *kcmsg_base;
    compat_size_t ucmlen;
    _kernel_size_t kcmlen, tmp;

    kcmlen = 0;
    kcmsg_base = kcmsg = (struct cmsghdr *) stackbuf;

    while (ucmsg != NULL) {
        if (get_user(ucmlen, &ucmsg->cmsg_len))
            return -EFAULT;

        if (CMSG_COMPAT_ALIGN(ucmlen) + (unsigned long) (ucmsg - kmsg->msg_control) + ucmlen > kmsg->msg_controllen)
            return -EINVAL;

        tmp = ((ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg))) + CMSG_ALIGN(sizeof(struct cmsghdr)));
        kcmlen += tmp;

        ucmsg = cmsg_compat_nxthdr(kmsg, ucmsg, ucmlen);

        if (kcmlen > stackbuf_size) {
            kcmsg_base = kcmsg = kmalloc(kcmlen, GFP_KERNEL);
        }

        while (ucmsg != NULL) {
            get_user(ucmlen, &ucmsg->cmsg_len);

            tmp = ((ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg))) + CMSG_ALIGN(sizeof(struct cmsghdr)));
            kcmsg->cmsg_len = tmp;
            get_user(kcmsg->cmsg_level, &ucmsg->cmsg_level);
            get_user(kcmsg->cmsg_type, &ucmsg->cmsg_type);

            if (copy_from_user(CMSG_DATA(kcmsg), CMSG_COMPAT_DATA(ucmsg), (ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg)))))
                goto out_free_default;
        }
    }
}
```

如上面代码所示，用户空间缓冲区的长度 (`ucmsg->cmsg_len`) 在 [2] 处被拷贝到内核地址空间中，在 [6] 处 `get_user()` 函数又重复了这一操作。这个值随后用来计算内核空间缓冲区 `kcmsg` 的确切大小，`kcmsg` 最初在 [1] 处（`stackbuf` 只是一个指向分配的栈空间的指针，栈空间的大小是 `stackbuf_size`）被存放在栈中。为了防止溢出，在 [3] 处会执行验证。但是，在 [5] 处分配了精确的空间之后（不管之前分配的栈被使用了或是堆中的空间被保留），在 [6] 处，这个长度值又一次拷贝并使用，却没有经过安全验证，最终在 [7] 处用来执行最终的用户空间缓冲区的拷贝。

正常情况下这段代码运行得很好，但如果在 [2] 和 [6] 两次 `get_user()` 实例执行的间隔中恰巧有另一个线程获得了 CPU 并改变了用户区的一些值，那会发生什么呢？必然的结果是，这个值可能会增长并导致内存溢出。这是一个竞态条件的例子，其中第一个执行者（内核路径）试图执行一项动作（拷贝用户空间缓冲区），而第二个执行者试图在两次值（那些保存了缓冲区大小的值）计算操作之间改变缓冲区的长度。之所以说这种 bug 是我们最喜欢的 bug 之一，还有另外一个原因：它不仅展示了一个典型的竞态条件情况，而且能够随意地转化为堆溢出或者栈溢出。实际上，分配缓冲区的方式取决于用户控制的 `ucmsg->cmsg_len` 变量中的第一个值。

在仔细考虑漏洞利用的细节之前，还有一件重要的事情需要指出：这类 bug 还是非常容易利用的，即使在单 CPU 系统上，只要想办法让某个内核控制路径被挂起（因此，就要让出 CPU）。当然，并不是所有的内核函数/路径都能够强行进入这种情形，不过阅读完后续章节后，您会发现许多函数（特别是涉及 I/O 操作或内存管理的函数）通常可以做到这一点（例如，通过等待硬盘 I/O，在被要求的页面已经被换出的情况下）。

要讨论的第二个漏洞是 Linux 中影响页面错误处理程序的漏洞。您可以在 iSEC 网站（www.isec.pl）上找到关于这个问题的详细讨论以及漏洞利用的方法；还有 iSEC 中其他一些内核公开的漏洞。

```c
vma = find_vma(mm, address);
if (!vma)
    goto bad_area;

if (vma->vm_start <= address && (vma->vm_flags & VM_GROWSDOWN))
    goto bad_area;

if (error_code & 4) {
    /*
     * 访问栈下方的内存总是错误的。
     */
}
```
```

希望以上优化后的文本更加清晰、连贯和专业。如果有任何进一步的需求，请随时告知！