      value1 = icmp1->icmp_code;
      value2 = icmp2->icmp_code;
      if (value1 == value2) {
        if (value1 == 0)
          test.setAVal("CD", "Z");
        else
          test.setAVal("CD", hss->target->FPR->cp_hex(value1));
      }
      else if (value1 == 9 && value2 == 0)
        /* both the same as in the corresponding probe */
        test.setAVal("CD", "S");
      else
        test.setAVal("CD", "O");
## 指纹匹配
nmap os指纹文件在
### nmap指纹解析
Fingerprint关键字定义一个新的指纹，紧随其后的是指纹名字。
Class行用于指定该指纹所属的类别，依次指定该系统的vendor（生产厂家）,OS family（系统类别）,OS
generation（第几代操作系统）,and device type（设备类型）。
接下来是CPE行，此行非常重要，使用CPE（CommonPlatformEnumeration，通用平台枚举）格式描述该系统的信息。以标准的CPE格式来描述操作系统类型，便于Nmap与外界信息的交换，比如可以很快从网上开源数据库查找到CPE描述的操作系统具体信息。
剩下`SEQ OPS WIN`等等即各类指纹类型。
#### 表达式
指纹可以是表达式类型的，nmap支持的表达式
  * 大于：>
  * 小于：prints.push_back(current);
        p = line + 12;
        while (*p && isspace((int) (unsigned char) *p))
          p++;
        q = strpbrk(p, "\n#");
        while (isspace((int) (unsigned char) *(--q)));
        current->match.OS_name = cp_strndup(p, q - p + 1); // 当前指纹os name
        current->match.line = lineno; // 当前指纹行数
        /* Now we read the fingerprint itself */
        while (fgets(line, sizeof(line), fp)) {
          lineno++;
          if (*line == '#')
            continue;
          if (*line == '\n')
            break;
          q = strchr(line, '\n');
          if (0 == strncmp(line, "Fingerprint ",12)) {
            goto fparse;
          } else if (strncmp(line, "Class ", 6) == 0) {
            parse_classline(current, line, q, lineno);
          } else if (strncmp(line, "CPE ", 4) == 0) {
            parse_cpeline(current, line, q, lineno);
          } else {
            p = line;
            q = strchr(line, '(');
            FingerTest test(FPstr(p, q), *DB->MatchPoints);
            p = q+1;
            q = strchr(p, ')');
            if (!test.str2AVal(p, q)) {
              error("Parse error on line %d of nmap-os-db file: %s", lineno, line);
              goto top;
            }
            current->setTest(test);
          }
        }
      }
      fclose(fp);
      return DB;
    }
### 指纹匹配算法
指纹的第一行有个叫`MatchPoints`的东东，它不是指纹，它定义了指纹的权重
    # This first element provides the number of points every fingerprint
    # test is worth.  Tests like TTL or Don't fragment are worth less
    # (individually) because there are so many of them and the values are
    # often correlated with each other.  Meanwhile, elements such as TS
    # (TCP timestamp) which are only used once, get more points.  Points
    # are used when there are no perfect matches to determine which OS
    # fingerprint matches a target machine most closely.
    MatchPoints
    SEQ(SP=25%GCD=75%ISR=25%TI=100%CI=50%II=100%SS=80%TS=100)
    OPS(O1=20%O2=20%O3=20%O4=20%O5=20%O6=20)
    WIN(W1=15%W2=15%W3=15%W4=15%W5=15%W6=15)
    ECN(R=100%DF=20%T=15%TG=15%W=15%O=15%CC=100%Q=20)
    T1(R=100%DF=20%T=15%TG=15%S=20%A=20%F=30%RD=20%Q=20)
    T2(R=80%DF=20%T=15%TG=15%W=25%S=20%A=20%F=30%O=10%RD=20%Q=20)
    T3(R=80%DF=20%T=15%TG=15%W=25%S=20%A=20%F=30%O=10%RD=20%Q=20)
    T4(R=100%DF=20%T=15%TG=15%W=25%S=20%A=20%F=30%O=10%RD=20%Q=20)
    T5(R=100%DF=20%T=15%TG=15%W=25%S=20%A=20%F=30%O=10%RD=20%Q=20)
    T6(R=100%DF=20%T=15%TG=15%W=25%S=20%A=20%F=30%O=10%RD=20%Q=20)
    T7(R=80%DF=20%T=15%TG=15%W=25%S=20%A=20%F=30%O=10%RD=20%Q=20)
    U1(R=50%DF=20%T=15%TG=15%IPL=100%UN=100%RIPL=100%RID=100%RIPCK=100%RUCK=100%RUD=100)
    IE(R=50%DFI=40%T=15%TG=15%CD=100)
nmap通过逐行对比指纹，指纹正确加上权重的分数，最后对每个指纹计算一个概率，即 成功分数/总数，输出概率高的指纹。
nmap默认的概率阈值是0.85，即概率小于这个数，则认为指纹不准确了。
#### 表达式解析
具体的指纹匹配函数，包含解析表达式。val是扫描生成的指纹数值，expr是内置OS库中指纹数值。
  * 用`|` 分割expr，分别比对,比对成功直接返回 true
  * 将val转为数字，如果val 是数字，就根据逻辑比对 `` `-` 符号
  * 对于其他结果，就直接对比 val和expr的文本即可。
    /* Compare an observed value (e.g. "45") against an OS DB expression (e.g.
       "3B-47" or "8|A" or ">10"). Return true iff there's a match. The syntax uses
          (greater than)
         | (or)
         - (range)
       No parentheses are allowed. */
    static bool expr_match(const char *val, const char *expr) {
      const char *p, *q, *q1;  /* OHHHH YEEEAAAAAHHHH!#!@#$!% */
      char *endptr;
      unsigned int val_num, expr_num, expr_num1;
      bool is_numeric;
      p = expr;
      val_num = strtol(val, &endptr, 16);
      is_numeric = !*endptr;
      // TODO: this could be a lot faster if we compiled fingerprints to a bytecode
      // instead of re-parsing every time.
      do {
        q = strchr(p, '|');
        if (is_numeric && (*p == '')) {
          expr_num = strtol(p + 1, &endptr, 16);
          if (endptr == q || !*endptr) {
            if ((*p == '' && val_num > expr_num)) {
              return true;
            }
          }
        } else if (is_numeric && ((q1 = strchr(p, '-')) != NULL)) {
          expr_num = strtol(p, &endptr, 16);
          if (endptr == q1) {
            expr_num1 = strtol(q1 + 1, &endptr, 16);
            if (endptr == q || !*endptr) {
              assert(expr_num1 > expr_num);
              if (val_num >= expr_num && val_num 
它基于libpcap，支持多个系统，并且可以发原始数据包。之前写过 
，所以对这个库也很熟悉。
nmap也是基于libpcap发包的。
### 数据链路层
因为这个包太底层，以至于要自己组装协议，数据链路层，网络层，传输层，都要自己组装。
对于数据链路层，需要知道自己的网卡Mac以及目标网卡Mac，对于外网，目标网卡就是路由器的Mac，对于内网，目标网卡就是arp探测到的mac。
在ksubdomain中，我用了一个取巧的方式，我先调用系统的nslookup去请求一个地址，然后监听返回包，返回包中会包含`数据链路层`，直接拿来用即可。
这次我采用一个古老又复杂的方法，是  这个项目提供的灵感，但它也没有很好实现。
  * 先确定目标IP
  * 调用系统路由表，确定目标IP该使用的网卡，此时就能获得本地网卡的mac地址和网关IP。
  * 调用系统arp缓存，查找目标ip是否有，如果有，就能获得目标地址的网卡mac（无论是内网主机的mac还是网卡的mac，缓存中都有）
  * 如果系统arp缓存没有找到，则使用arp协议，像内网段广播获得网关的mac，如果目标IP是同一个网段，则广播查找目标IP的Mac。
### 其他
其他部分暂时没有踩坑，按照nmap源码的实现来就行了。
## 参考
  * 
  * 