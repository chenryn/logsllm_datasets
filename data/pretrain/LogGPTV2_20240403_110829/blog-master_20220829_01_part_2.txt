│ temp_directory               │               │ Set the directory to which to write temp files                                     │ VARCHAR    │  
│ threads                      │ 8             │ The number of total threads used by the system.                                    │ BIGINT     │  
│ wal_autocheckpoint           │ 16.7MB        │ The WAL size threshold at which to automatically trigger a checkpoint (e.g. 1GB... │ VARCHAR    │  
│ worker_threads               │ 8             │ The number of total threads used by the system.                                    │ BIGINT     │  
│ binary_as_string             │               │ In Parquet files, interpret binary data as a string.                               │ BOOLEAN    │  
│ Calendar                     │ gregorian     │ The current calendar                                                               │ VARCHAR    │  
│ TimeZone                     │ Asia/Shanghai │ The current time zone                                                              │ VARCHAR    │  
└──────────────────────────────┴───────────────┴────────────────────────────────────────────────────────────────────────────────────┴────────────┘  
```  
强制开启PG 8并行  
```  
postgres=# select 'alter table '||tablename||' set (parallel_workers=8);' from pg_tables where schemaname='public';;  
                    ?column?                      
------------------------------------------------  
 alter table region set (parallel_workers=8);  
 alter table partsupp set (parallel_workers=8);  
 alter table lineitem set (parallel_workers=8);  
 alter table orders set (parallel_workers=8);  
 alter table part set (parallel_workers=8);  
 alter table customer set (parallel_workers=8);  
 alter table supplier set (parallel_workers=8);  
 alter table nation set (parallel_workers=8);  
(8 rows)  
 alter table region set (parallel_workers=8);  
 alter table partsupp set (parallel_workers=8);  
 alter table lineitem set (parallel_workers=8);  
 alter table orders set (parallel_workers=8);  
 alter table part set (parallel_workers=8);  
 alter table customer set (parallel_workers=8);  
 alter table supplier set (parallel_workers=8);  
 alter table nation set (parallel_workers=8);  
```  
创建索引, 参考  
https://github.com/digoal/gp_tpch/blob/master/dss/tpch-index.sql  
```  
-- indexes on the foreign keys  
CREATE INDEX IDX_SUPPLIER_NATION_KEY ON SUPPLIER (S_NATIONKEY);  
CREATE INDEX IDX_PARTSUPP_PARTKEY ON PARTSUPP (PS_PARTKEY);  
CREATE INDEX IDX_PARTSUPP_SUPPKEY ON PARTSUPP (PS_SUPPKEY);  
CREATE INDEX IDX_CUSTOMER_NATIONKEY ON CUSTOMER (C_NATIONKEY);  
CREATE INDEX IDX_ORDERS_CUSTKEY ON ORDERS (O_CUSTKEY);  
CREATE INDEX IDX_LINEITEM_ORDERKEY ON LINEITEM (L_ORDERKEY);  
CREATE INDEX IDX_LINEITEM_PART_SUPP ON LINEITEM (L_PARTKEY,L_SUPPKEY);  
CREATE INDEX IDX_NATION_REGIONKEY ON NATION (N_REGIONKEY);  
-- aditional indexes  
CREATE INDEX IDX_LINEITEM_SHIPDATE ON LINEITEM (L_SHIPDATE, L_DISCOUNT, L_QUANTITY);  
CREATE INDEX IDX_ORDERS_ORDERDATE ON ORDERS (O_ORDERDATE);  
```  
PG 没有索引跑不出来, 有一些嵌套查询实在太慢了.  
q17 30秒, q20 过了十几分钟没跑出来.  
以下是PG增加了索引之后的结果  
```  
postgres=# \timing   
postgres=# \o tpch_pg.log  
postgres=# \i '~/Downloads/tpch.sql'  
Time: 162.633 ms  
Time: 894.933 ms  
Time: 43.552 ms  
Time: 14.084 ms  
Time: 46.459 ms  
Time: 28.383 ms  
Time: 86.762 ms  
Time: 68.929 ms  
Time: 72.851 ms  
Time: 158.350 ms  
Time: 21.465 ms  
Time: 42.711 ms  
Time: 56.275 ms  
Time: 115.228 ms  
Time: 45.295 ms  
Time: 42.947 ms  
Time: 10.935 ms  
Time: 375.221 ms  
Time: 10.685 ms  
Time: 11.367 ms  
Time: 44.189 ms  
Time: 15.214 ms  
```  
duckdb的结果: [《DuckDB TPC-H, TPC-DS 测试》](../202208/20220828_01.md)    
采用了多核, real 比user+sys更小.  
```  
Run Time: real 0.020 user 0.083072 sys 0.000901    
Run Time: real 0.013 user 0.016175 sys 0.001734    
Run Time: real 0.017 user 0.021799 sys 0.004781    
Run Time: real 0.016 user 0.027792 sys 0.005659    
Run Time: real 0.010 user 0.022347 sys 0.002009    
Run Time: real 0.002 user 0.008274 sys 0.000277    
Run Time: real 0.021 user 0.041274 sys 0.006326    
Run Time: real 0.011 user 0.018835 sys 0.002102    
Run Time: real 0.037 user 0.137989 sys 0.004405    
Run Time: real 0.015 user 0.033020 sys 0.003477    
Run Time: real 0.012 user 0.012397 sys 0.001106    
Run Time: real 0.020 user 0.042035 sys 0.005134    
Run Time: real 0.017 user 0.019956 sys 0.001870    
Run Time: real 0.005 user 0.009373 sys 0.000825    
Run Time: real 0.004 user 0.013022 sys 0.000461    
Run Time: real 0.021 user 0.026232 sys 0.001835    
Run Time: real 0.015 user 0.060899 sys 0.006624    
Run Time: real 0.019 user 0.070629 sys 0.011845    
Run Time: real 0.011 user 0.040045 sys 0.000583    
Run Time: real 0.017 user 0.047979 sys 0.005695    
Run Time: real 0.035 user 0.086615 sys 0.030360    
Run Time: real 0.011 user 0.013999 sys 0.003183    
```  
对比如下(耗时越小越好):    
tpch_query_id | `tpch sf=.1 duckdb_no_index(ms)`	| `pg16_use_index(ms)`  
---|---|---  
1|20  |	162.633  
2|13 |	894.933  
3|17|	43.552  
4|16 |	14.084  
5|10 |	46.459  
6|2 |	28.383  
7|21  |	86.762  
8|11  |	68.929  
9|37  |	72.851  
10|15  |	158.35  
11|12 |	21.465  
12|20 |	42.711  
13|17 |	56.275  
14|5 |	115.228  
15|4 |	45.295  
16|21 |	42.947  
17|15 |	10.935  
18|19  |	375.221  
19|11 |	10.685  
20|17  |	11.367  
21|35  |	44.189  
22|11  |	15.214  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")