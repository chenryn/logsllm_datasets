skills you've learned and try them out. Look for a new kind of bug, or
try out a new recon angle. Then, rinse and repeat until you find a
suitable new workflow.
其次，请确保你在目标中寻找的是具体的事物，而不是漫无目的地寻找任何东西。列出你学到的新技能并尝试它们。寻找新类型的缺陷，或尝试一种新的侦察角度。然后，反复执行，直到找到适合的新工作流程。
Finally, remember that hacking is not always about finding a single
vulnerability but combining several weaknesses of an application into
something critical. In this case, it's helpful to specifically look for
weird behavior instead of vulnerabilities. Then take note of these weird
behaviors and weaknesses, and see if you can chain them into something
worth reporting.
最后，请记得，黑客并不总是只找一个漏洞，而是将应用程序的多个弱点结合起来，变成关键性的漏洞。在这种情况下，寻找奇怪的行为而不是漏洞会更有帮助。然后记录这些奇怪的行为和薄弱点，看看是否可以将它们串联起来，变成值得报告的东西。
## Lastly, a Few Words of Experience {#c02.xhtml#h1-123456c01-0005}
Bug bounty hunting is difficult. When I started hunting for bugs, I'd
sometimes go months without finding one. And when I did find one, it'd
be something trivial and low severity.
漏洞赏金猎人很有难度。在我开始寻找漏洞时，我有时会连续几个月都找不到一个。而当我找到一个漏洞时，通常会是一些微不足道且严重等级低的事情。
The key to getting better at anything is practice. If you're willing to
put in the time and effort, your hacking skills will improve, and you'll
soon see yourself on leaderboards and private invite lists! If you get
frustrated during this process, remember that everything gets easier
over time. Reach out to the hacker community if you need help. And good
luck!
提高任何事情的关键在于练习。如果你愿意花时间和精力，你的黑客技能会不断提高，很快你就会看到自己出现在排行榜和私人邀请列表中！如果在这个过程中感到沮丧，记住一切随着时间的推移都会变得容易。如果需要帮助，请向黑客社区寻求帮助。祝你好运！
:::
[]{#p02.xhtml}
::: section
# [ [ ]{#p02.xhtml#Page_31 .pagebreak title="31"} Part II ]{.PartNumber} [ Getting Started ]{.PartTitle} {.part}
:::
[]{#c03.xhtml}
::: section
# [ [ ]{#c03.xhtml#Page_33 .pagebreak title="33"} 3 ]{.ChapterNumber} [ How the Internet Works ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
Before you jump into hunting for bugs, let's take some time to
understand how the internet works. Finding web vulnerabilities is all
about exploiting weaknesses in this technology, so all good hackers
should have a solid understanding of it. If you're already familiar with
these processes, feel free to skip ahead to my discussion of the
internet's security controls.
在你开始寻找漏洞之前，让我们先花点时间了解互联网是如何运作的。寻找Web漏洞就是要利用这项技术中的弱点，所以所有优秀的黑客都应该对此有扎实的理解。如果你已经熟悉这些过程，可以跳过这部分，直接阅读我对互联网安全控制的讨论。
The following question provides a good starting place: what happens when
you enter *www.google.com* in your browser? In other words, how does
your browser know how to go from a domain name, like google.com, to the
web page you're looking for? Let's find out.
下面的问题提供了一个很好的起点：当您在浏览器中输入www.google.com时会发生什么？换句话说，您的浏览器如何知道如何从像google.com这样的域名转到您正在寻找的网页？让我们找出答案。
## [ ]{#c03.xhtml#Page_34 .pagebreak title="34"} The Client-Server Model {#c03.xhtml#h1-123456c01-0001}
The internet is composed of two kind of devices: clients and servers.
*Clients* request resources or services, and *servers* provide those
resources and services. When you visit a website with your browser, it
acts as a client and requests a web page from a web server. The web
server will then send your browser the web page ( [Figure
3-1](#c03.xhtml#figure3-1){#c03.xhtml#figureanchor3-1} ).
互联网由两种设备组成：客户端和服务器。客户端请求资源或服务，而服务器提供这些资源和服务。当您使用浏览器访问网站时，浏览器充当客户端并从Web服务器请求网页。Web服务器将随后将网页发送给您的浏览器（图3-1）。
![[Figure 3-1]{#c03.xhtml#figure3-1} : Internet clients request
resources from servers. ¶
图3-1：互联网客户端从服务器请求资源。](image_fi/501546c03/f03001.png)
A web page is nothing more than a collection of resources or files sent
by the web server. For example, at the very least, the server will send
your browser a text file written in *Hypertext Markup Language (*
*HTML)* , the language that tells your browser what to display. Most web
pages also include *Cascading Style Sheets (CSS* *)* files to make them
pretty. Sometimes web pages also contain *JavaScript (* *JS)* files,
which enable sites to animate the web page and react to user input
without going through the server. For example, JavaScript can resize
images as users scroll through the page and validate a user input on the
client side before sending it to the server. Finally, your browser might
receive embedded resources, such as images and videos. Your browser will
combine these resources to display the web page you see.
网页不过是由服务器发送的一组资源或文件的集合。比如说，服务器至少会发送一个用超文本标记语言（HTML）编写的文本文件，这种语言可以告诉浏览器该如何显示内容。大多数网页也会包含层叠样式表（CSS）文件，以使页面看起来更漂亮。有时候网页还会包含JavaScript（JS）文件，使得网站可以在不经过服务器的情况下为网页增加动画效果以及响应用户的输入。比如说，JavaScript
可以在用户滚动页面时调整图像大小，在信息发送到服务器之前在客户端验证用户输入等。最后，您的浏览器可能会接收到嵌入的资源，如图像和视频。您的浏览器会将这些资源组合在一起展示您所看到的网页。
Servers don't just return web pages to the user, either. Web APIs enable
applications to request the data of other systems. This enables
applications to interact with each other and share data and resources in
a controlled way. For example, Twitter's APIs allow other websites to
send requests to Twitter's servers to retrieve data such as lists of
public tweets and their authors. APIs power many internet
functionalities beyond this, and we'll revisit them, along with their
security issues, in [ Chapter 24 ]{.xref
itemid="xref_target_Chapter 24"} .
服务器不仅向用户返回web页面。Web
API使得应用程序可以请求其他系统的数据。这使得应用程序可以相互交互，并以有控制的方式共享数据和资源。例如，Twitter的API允许其他网站向Twitter的服务器发送请求以检索数据，例如公共推文和其作者的列表。
API驱动了许多互联网功能，我们将在第24章中重新访问它们及其安全问题。
## The Domain Name System {#c03.xhtml#h1-123456c01-0002}
How do your browser and other web clients know where to find these
resources? Well, every device connected to the internet has a unique
*Internet Protocol (IP)* address that other devices can use to find it.
However, IP addresses are made up of numbers and letters that are hard
for humans to remember. For example, the older format of IP addresses,
IPv4, looks like this: 123.45.67.89. The new version, IPv6, looks even
more complicated: 2001:db8::ff00:42:8329.
您的浏览器和其他网络客户端如何知道在哪里找到这些资源呢？每个连接到互联网的设备都有一个唯一的IP地址，其他设备可以使用它来查找它。然而，IP地址由数字和字母组成，对人类来说很难记忆。例如，旧版IP地址IPv4看起来像这样：123.45.67.89。新版IPv6更复杂：2001：db8：：ff00：42：8329。
[ ]{#c03.xhtml#Page_35 .pagebreak title="35"} This is where the *Domain
Name System (DNS)* comes in. A DNS server functions as the phone book
for the internet, translating domain names into IP addresses ( [Figure
3-2](#c03.xhtml#figure3-2){#c03.xhtml#figureanchor3-2} ). When you enter
a domain name in your browser, a DNS server must first convert the
domain name into an IP address. Our browser asks the DNS server, "Which
IP address is this domain located at?"
这就是域名系统（DNS）发挥作用的地方。DNS服务器像互联网上的电话簿一样运作，将域名翻译成IP地址（图3-2）。当您在浏览器中输入域名时，DNS服务器必须先将其转换成IP地址。我们的浏览器会向DNS服务器询问："这个域名位于哪个IP地址？"
![[Figure 3-2]{#c03.xhtml#figure3-2} : A DNS server will translate a
domain name to an IP address. ¶
图3-2：DNS服务器将把域名翻译成IP地址。](image_fi/501546c03/f03002.png)
## Internet Ports {#c03.xhtml#h1-123456c01-0003}
After your browser acquires the correct IP address, it will attempt to
connect to that IP address via a port. A *port* is a logical division on
devices that identifies a specific network service. We identify ports by
their port numbers, which can range from 0 to 65,535.
浏览器获取正确的IP地址后，会尝试通过端口连接到该IP地址。端口是设备上用于标识特定网络服务的逻辑分区。我们通过它们的端口号来识别端口，端口号的范围从0到65,535。
Ports allow a server to provide multiple services to the internet at the
same time. Because conventions exist for the traffic received on certain
ports, port numbers also allow the server to quickly forward arriving
internet messages to a corresponding service for processing. For
example, if an internet client connects to port 80, the web server
understands that the client wishes to access its web services ( [Figure
3-3](#c03.xhtml#figure3-3){#c03.xhtml#figureanchor3-3} ).
端口允许服务器同时向互联网提供多个服务。由于某些端口上接收到的流量已经有了惯例，端口号还使服务器能够快速将到达的互联网消息转发给相应的服务进行处理。例如，如果互联网客户端连接到端口80，则Web服务器会明白客户端希望访问其Web服务（图3-3）。
![[Figure 3-3]{#c03.xhtml#figure3-3} : Ports allow servers to provide
multiple services. Port numbers help forward client requests to the
right service. ¶
图3-3：端口允许服务器提供多个服务。端口号帮助将客户端请求转发到正确的服务。](image_fi/501546c03/f03003.png)
By default, we use port 80 for HTTP messages and port 443 for HTTPS, the
encrypted version of HTTP.
默认情况下，HTTP消息使用端口80，HTTPS消息使用端口443，HTTPS是HTTP的加密版本。
## [ ]{#c03.xhtml#Page_36 .pagebreak title="36"} HTTP Requests and Responses {#c03.xhtml#h1-123456c01-0004}
Once a connection is established, the browser and server communicate via
the *HyperText Transfer Protocol (* *HTTP)* . HTTP is a set of rules
that specifies how to structure and interpret internet messages, and how
web clients and web servers should exchange information.
一旦建立连接，浏览器和服务器通过超文本传输协议（HTTP）进行通信。
HTTP是一组规则，它指定如何构造和解释Internet消息，以及Web客户端和Web服务器应如何交换信息。
When your browser wants to interact with a server, it sends the server
an *HTTP request* . There are different types of HTTP requests, and the
two most common are GET and POST. By convention, GET requests retrieve
data from the server, while POST requests submit data to it. Other
common HTTP methods include OPTIONS, used to request permitted HTTP
methods for a given URL; PUT, used to update a resource; and DELETE,
used to delete a resource.
当您的浏览器想要与服务器进行交互时，它会向服务器发送一个HTTP请求。有不同类型的HTTP请求，其中最常见的是GET和POST。按照惯例，GET请求从服务器检索数据，而POST请求将数据提交到服务器。其他常见的HTTP方法包括
OPTIONS，用于请求给定URL的允许HTTP方法; PUT，用于更新资源;
DELETE，用于删除资源。
Here is an example GET request that asks the server for the home page of
*www.google.com* :
这是一个示例GET请求，它请求服务器获取www.google.com的主页：
    GET / HTTP/1.1
    Host: www.google.com
    User-Agent: Mozilla/5.0
    Accept: text/html,application/xhtml+xml,application/xml
    Accept-Language: en-US
    Accept-Encoding: gzip, deflate
    Connection: close
Let's walk through the structure of this request, since you'll be seeing
a lot of these in this book. All HTTP requests are composed of a request
line, request headers, and an optional request body. The preceding
example contains only the request line and headers.
让我们一起来看看这个请求的结构，因为在这本书中你将看到很多类似的请求。所有的HTTP请求都由一个请求行、请求头和一个可选的请求体组成。前面的例子只包含了请求行和头信息。
The *request line* is the first line of the HTTP request. It specifies
the request method, the requested URL, and the version of HTTP used.
Here, you can see that the client is sending an HTTP GET request to the
home page of *www.google.com* using HTTP version 1.1.
请求行是HTTP请求的第一行。它指定了请求方法，所请求的URL和HTTP使用的版本。在这里，你可以看到客户端正在使用HTTP版本1.1向www.google.com的主页发送HTTP
GET请求。
The rest of the lines are HTTP *request headers* . These are used to
pass additional information about the request to the server. This allows
the server to customize results sent to the client. In the preceding
example, the `      Host     ` header specifies the hostname of the
request. The `      User-Agent     ` header contains the operating
system and software version of the requesting software, such as the
user's web browser. `     ` The `      Accept     ` ,
`      Accept-Language     ` , and `      Accept-Encoding     ` headers
tell the server which format the responses should be in. And the
`      Connection     ` header tells the server whether the network
connection should stay open after the server responds.
其余的行是HTTP请求头。它们用于向服务器传递有关请求的其他信息。这使服务器能够自定义发送到客户端的结果。在上面的示例中，Host头指定请求的主机名。User-Agent头包含请求软件的操作系统和软件版本，例如用户的Web浏览器。Accept，Accept-Language和Accept-Encoding头告诉服务器响应应该采用哪种格式。而Connection头告诉服务器，在服务器响应后，网络连接是否应保持打开状态。
You might see a few other common headers in requests. The
`      Cookie     ` header is used to send cookies from the client to
the server. The `      Referer     ` header specifies the address of the
previous web page that linked to the current page. And the
`      Authorization     ` header contains credentials to authenticate a
user to a server.
您可能会在请求中看到一些其他常见的标题。
Cookie标题用于从客户端向服务器发送cookie。
Referer标题指定链接到当前页面的上一个网页的地址。而Authorization标题包含凭证，用于将用户身份验证到服务器。
After the server receives the request, it will try to fulfill it. The
server will return all the resources used to construct your web page by
using *HTTP responses* . An HTTP response contains multiple things: an
HTTP status code to indicate whether the request succeeded; HTTP
headers, which are [ ]{#c03.xhtml#Page_37 .pagebreak title="37"} bits of
information that browsers and servers use to communicate with each other
about authentication, content format, and security policies; and the
HTTP response body, or the actual web content that you requested. The
web content could include HTML code, CSS style sheets, JavaScript code,
images, and more.
服务器收到请求后会尝试满足它。服务器将通过使用HTTP响应返回构建您的网页所用的所有资源。HTTP响应包含多个元素：HTTP状态代码用于指示请求是否成功；HTTP头，是浏览器和服务器之间用于通信的信息片段，包括认证、内容格式和安全策略等；以及HTTP响应体，即您请求的实际网页内容。网页内容可能包括HTML代码、CSS样式表、JavaScript代码、图像等。
Here is an example of an HTTP response:
这里是一个HTTP响应的例子：
    1 HTTP/1.1 200 OK
    2 Date: Tue, 31 Aug 2021 17:38:14 GMT
    [...]
    3 Content-Type: text/html; charset=UTF-8