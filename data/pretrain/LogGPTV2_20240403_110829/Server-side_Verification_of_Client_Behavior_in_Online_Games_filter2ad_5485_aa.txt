# Server-side Verification of Client Behavior in Online Games

**Authors:**
- Darrell Bethea
- Robert A. Cochran
- Michael K. Reiter

**Affiliation:**
University of North Carolina at Chapel Hill
{djb, rac, reiter}@cs.unc.edu

## Abstract
The online gaming industry is a rapidly growing and lucrative market, but it faces significant challenges due to cheating, which degrades the gaming experience and drives away players, thereby reducing revenue. In this paper, we present a technique that enables game developers to validate the behavior of game clients, ensuring it is consistent with the execution of the sanctioned client software. Our method employs symbolic execution to extract constraints on the client-side state implied by each client-to-server message. Constraint solving is then used to determine whether the sequence of client-to-server messages can be explained by any possible user inputs, given the server-to-client messages already received. This approach can be applied during the development of new games or retroactively to existing ones. We demonstrate our technique through two case studies: one using the open-source game XPilot and another using a custom game similar to Pac-Man.

## 1. Introduction
Multi-player online games are increasingly popular and profitable, with the global video-game software market growing by 20% to $32 billion in 2008 alone [26]. Online games, such as World of Warcraft, generate substantial revenue, with over 10 million subscribers contributing around $1 billion to Blizzard Entertainment [1, 34].

However, the online gaming industry has long been plagued by various forms of cheating, leading to significant player loss and financial repercussions for game operators. For example, Age of Empires and America's Army suffered substantial player attrition due to cheating [33]. For subscription-based games, player loss directly translates to reduced revenue. Additionally, Hoglund and McGraw [18] argue that "games are a harbinger of software security issues to come," suggesting that defenses against game cheats will be crucial for securing future distributed systems.

In this paper, we address a significant class of cheats where players modify the game client to allow behaviors that the sanctioned client would not permit. The most robust defense against such client modifications is to maintain authoritative state on the server, beyond the reach of cheaters. However, this approach increases bandwidth usage, which is a major cost for large-scale game operators [29]. Balancing bandwidth use and cheat prevention is challenging:

> "In the US and European markets, a good goal is 4-6 kilobits per second (kps)/player or less. ... If you can get the bit rate down to 2kps, you’re 'golden.' It’s hard to see how that can happen, however, without putting dangerous amounts of data directly into the client, which is just asking for trouble from talented cheaters and hackers." [29, p. 112]

Moreover, even with detailed client information, server-side checks today are often heuristic and manually programmed, making them potentially incomplete and effort-intensive [17].

We propose a technique to detect any type of cheating that causes the client to exhibit behavior inconsistent with the sanctioned client software and the game state known at the server. Our approach uses symbolic execution to derive constraints on client-side state and constraint solving to verify the consistency of client messages. This method can enable new game designs that reduce bandwidth by placing more authoritative state at the client, while still verifying that the client's behavior is valid.

## 2. Related Work
Detecting misbehavior in remote clients in client-server applications has been a well-studied area. One common strategy is to construct a model of proper client behavior and compare actual client behaviors against it. Gifﬁn et al. [14] developed such an approach for validating remote system calls in outsourced computations. Guha et al. [16] used static analysis to construct a control-flow graph for client-side programs in Ajax web applications.

Our technique follows this paradigm but differs in its soundness. We use symbolic execution to derive the complete implications of each message value on the client-side state, ensuring that only sequences of client messages that could have been produced through valid client execution are accepted. This precision is particularly feasible for game clients due to their control-loop structure and frequent communication.

Other approaches, such as Swift [9] and Ripley [35], ensure that clients manage no authoritative state, but these methods can introduce additional costs and require all low-level events to be sent to the server. Our approach, in contrast, detects inconsistent client behavior without requiring all low-level events to be sent to the server and represents a middle ground in terms of programmer effort.

Jha et al. [21] proposed an "optimistic" approach where a trusted audit server probabilistically audits the management of authoritative state at the client. While this approach can reduce trust in the client, it introduces additional computational, storage, and bandwidth costs. Our approach, on the other hand, can even enable bandwidth savings and supports auditing at any time in the future.

Other work on defeating cheating in online games includes monitoring functionality added to the client-side computer (e.g., PunkBuster) and defenses against specific types of cheats, such as game bots and delay/suppression attacks. Our technique is compatible with these defenses and can be used in conjunction with them.

## 3. Goals, Assumptions, and Limitations
Our technique addresses a class of cheats where players modify the game client to send commands that are not possible with an unmodified client. Our approach will detect any client game play that is impossible to observe from the sanctioned client software, even if those commands could have been valid in some other execution.

We designed our cheat detection technique primarily for game developers, who can save significant effort in implementing customized server-side verification of client behaviors. Our approach is comprehensive and largely automatic, requiring only modest adaptations to existing games.

For efficient detection, we assume that the game client is structured as a loop that processes inputs (user inputs or messages from the server) and updates the server about certain aspects of its status necessary for multiplayer gameplay. Updates from the client to the server need not be in exact one-to-one correspondence with loop iterations, but increased uncertainty in the verifier's model of the client state will induce greater server-side computation.

Our technique has some limitations. It will not detect cheats that are permitted by the sanctioned client software due to bugs. Modifications to the game client that do not change its behavior as seen at the server will also go unnoticed. For example, actions that are possible but made easier by modifying the client will not be detected. Additionally, client modifications that disclose hidden information to the player, such as uncovering parts of the game map, will not be detected.

## 4. Our Approach

### 4.1 Symbolic Execution
Symbolic execution is a method for exploring all execution paths of a program, often used to find bugs. It works by executing the software with initial inputs marked as symbolic, allowing them to be "anything." As the program executes, constraints are built on the symbolic variables based on the program's operations. When the program conditionally branches on a symbolic value, execution forks, and both branches are followed, forming constraints for each path.

Symbolic execution can help locate software bugs by providing constraints that enable a constraint solver (KLEE uses STP [13]) to generate concrete inputs that cause errors. Having a concrete input that reliably reproduces an error is invaluable for debugging.

### 4.2 Generating Constraints
Our detection mechanism analyzes client output (as seen by the game server) and determines whether that output could have been produced by a valid game client. The first step is to identify the main event loop of the game client and all associated client state, including global memory, memory dependent on client input, and memory holding network data. These state variables are provided to the symbolic execution tool, which generates a constraint for each path through the loop in a single round. These constraints are referred to as round constraints.

#### Example
Consider the following simplified code snippet:

```python
key ← readkey();
if key = ESC then
    endgame();
loc ← 0;
while true do
    key ← readkey();
    if key = ‘↑’ then
        loc ← loc + 1;
    else if key = ‘↓’ then
        loc ← loc − 1;
    end if
    sendlocation(loc);
end while
```

Using symbolic execution, we mark `key` and `loc` as symbolic and execute the loop, generating constraints for each path. For example, if `key = ‘↑’`, the constraint `loc = prev_loc + 1` is generated. These constraints are then used to verify the consistency of client messages.

## 5. Case Studies
We demonstrate our approach through two case studies. The first applies our technique to the open-source game XPilot, which, despite being developed with low-level client events sent to the server, illustrates the few ways in which our technique can be adapted for efficient use. The second case study uses a custom game similar to Pac-Man, designed to better exercise our technique. Together, these case studies illustrate the limits and benefits of our approach and provide guidance for game developers considering its use.

## 6. Conclusion
In this paper, we presented a technique for server-side verification of client behavior in online games. Our approach uses symbolic execution and constraint solving to detect any type of cheating that causes the client to exhibit behavior inconsistent with the sanctioned client software. This method can enable new game designs that reduce bandwidth by placing more authoritative state at the client, while still verifying the client's behavior. Our case studies demonstrate the effectiveness and efficiency of our approach, providing a valuable tool for game developers to combat cheating and improve the gaming experience.