### Security Checks to be Performed

Reference [25] provides a comprehensive analysis of security incidents on the Internet from 1989 to 1995. However, over the past two decades, computing environments and threats (including motives and models) have changed significantly. While [25] offers robust classification schemes that remain highly useful, some of its observations are now outdated. For example, the report states, "Estimates based on this research indicated that a typical Internet domain is involved in no more than one incident per year, and a typical internet host in no more than around one incident per 45 years." This conclusion does not reflect the current state of security, as evidenced by our study of security attacks over the last five years in a large computing organization. Both [24] and [25] focus on the effects and classifications of incidents, whereas our study also aims to analyze alerts and incident data to understand (i) how incidents are detected and (ii) how they progress.

A significant recent development is the establishment of PREDICT, a repository for security-relevant network operation data, with support from the Department of Homeland Security (DHS). Researchers can use this data to develop new models and technologies to assess cyber threats and enhance cybersecurity capabilities (www.predict.org).

### Analysis of an Example Incident

In this section, we use a credential compromise incident to illustrate (i) the types of alerts and ancillary data provided by security monitoring systems and (ii) the analysis process starting from incident identification. We will walk through the analysis using real log data snippets. In this example, the attacker logs into the victim's host using a stolen credential (password) and obtains root privileges using a local root escalation exploit. The attacker's goal is to harvest passwords and authentication keys of other users using trojaned versions of SSH and SSHd.

#### (1) IDS Alert: Suspicious Download
An Intrusion Detection System (IDS) alert indicates a suspicious download on a production system (victim: xx.yy.ww.zz) using the HTTP protocol from a remote host (aa.bb.cc.dd). The hostname and IP address are anonymized.

```
May 16 03:32:36 %187538 start xx.yy.ww.zz:44619 > aa.bb.cc.dd:80
May 16 03.32:36 %187538 GET /.0/ptrat.c (200 "OK" [2286] server5.bad-host.com)
```

The above data snippet shows an alert generated by the Bro HTTP analyzer due to the violation of a predefined bro-policy, specifically the download of an unauthorized file (ptrat.c). This file is suspect because:
- The system is not expected to download any code except patches, system updates, and relevant binaries from authorized sources.
- The downloaded file is a C language source code.
- The server from which the source was downloaded is not an authorized software distribution repository.

While the alert suggests the download of a suspicious source file, it does not provide sufficient context of events prior to the download, such as a login, execution of an exploit, abnormal number of bytes transferred, or a scan. It does not reveal the cause of the potentially illegal download request, such as an exploit code, a potentially malicious user, or a web application making a request, whether malicious or otherwise.

#### (2) Correlation with Network Flows
Network flows reveal connections with other hosts in close time proximity to the download:
- SSH connection (port 22) from IP address 195.aa.bb.cc.
- Multiple FTP connections to ee.ff.gg.hh and pp.qq.rr.ss.

```
09-05-16 03:32:27 v tcp 195.aa.bb.cc.35213 -> xx.yy.ww.zz.22 80 96 8698 14159 FIN
09-05-16 03:33:36 v tcp xx.yy.ww.zz.44619 -> aa.bb.cc.dd.http 8 6 698 4159 FIN
09-05-16 03:34:37 v tcp xx.yy.ww.zz.53205 -> ee.ff.gg.hh.ftp 1699 2527 108920 359566 FIN
09-05-16 03:35:39 v tcp xx.yy.ww.zz.39837 -> pp.qq.rr.ss.ftp 236 364 15247 546947 FIN
```

While the SSH login could explain the exploit download, the connection record does not reveal whether the authentication was successful or what credentials were used.

#### (3) Manual Correlation with Syslog Alerts
The syslog confirms a user login from 195.aa.bb.cc, which is unusual based on the user profile and behavior pattern (the user logs in for the first time from this IP address).

```
May 16 03:32:27 host sshd[7419]: Accepted password for user from 195.aa.bb.cc port 35794 ssh2
```

From the analysis, four key points are established:
1. A suspicious source code was downloaded.
2. The user login occurred at nearly the same time as the download.
3. The first-time login from IP address 195.aa.bb.cc.
4. Additional communication to other ports (FTP).

#### (4) Additional Manual Analysis
A search of all files owned and created by this user found a footprint left behind by a credential-stealing exploit—a file, `libno_ex.so.1.0`, created at the time of the download, symptomatic of a credential-stealing exploit. This signature, located in the `/tmp/` folder, confirms that the account was used to download malicious code.

```
-rwxrwxr-x 1 user user 3945 May 16 03:37 /tmp/libno_ex.so.1.0
```

The `libno_ex.so.1.0` library file is known to be created when a code exploiting vulnerability CVE-2009-1185 is successfully executed. Further investigation determined that the attacker:
- Successfully obtained root privileges in the system.
- Replaced the SSHd daemon with a trojaned version.
- Captured passwords in the file `/lib/udev/devices/S1`.

```
[root@host dir]# ls -l /proc/10589/fd
lrwx------ 1 root root 64 2009-05-16 11:21 2 -> /dev/null
lrwx------ 1 root root 64 2009-05-16 11:21 3 -> /lib/udev/devices/S1
```

Note: The trojaned SSHd is running as process ID 10589 with root privileges and writing to a file in `/lib/udev/devices/S1`.

### Conclusions
By systematically analyzing logs and correlating different data points, one can identify increasing levels of suspicion of an imminent attack. Our conjecture is that if we can develop techniques to preempt the attack action and potentially let the user progress under probation until their true intentions are clear, we may have a greater chance of preventing system misuse. The concept of execution under probation has been used in HP Non-stop systems to cope with accidental failures [7].

Incident analysis requires correlating data from various monitors and system logs with human expertise. Using the process outlined in this example, we conduct an in-depth analysis of security incident data with the primary objective of characterizing incident types and severity, extracting attack stages, correlating phases of an attack with the time when an alert is generated, and quantifying the detection coverage of different alerts. Insights from this analysis can be used to:
- Drive the design and strategic placement of defense mechanisms.
- Establish heuristics for automated (or semi-automated) analysis and correlation of data across different logs to enable early detection of potential intruders.
- Construct a model to capture the attacker’s behavior at the network layer.

### Terminology
Before proceeding, we introduce basic terminology used in this paper: alert, attack, incident, misuse, and severity.
- **Alert**: A warning indicating a security violation within the network that warrants a response. An alert is generated when monitoring tools detect an anomaly or a known attack signature.
- **Attack**: An action taken by an attacker to obtain unauthorized access to a system or information.
- **Incident**: Occurs when an attacker successfully exploits one or more vulnerabilities in the system and gains unauthorized access.
- **Misuse**: An intentional, improper, or unauthorized action performed using computing resources.
- **Severity Rating**: Defined in terms of the adverse effects of an incident on operations, assets, or individuals, including the loss of integrity, confidentiality, and availability [8]. The choice of [8] for representing severity was made due to its simplicity in categorizing incidents and its recommendation by the Department of Energy for incident reporting.

### Alerts
In this section, we present the types of alerts responsible for identifying a given incident. Data from 150 incident investigations (resulting in 124 actual incidents and 26 false positives, where a false positive is synonymous with a full investigation resulting in no incident found) is studied to characterize both the attacks and the corresponding alerts that led to incident discovery. All statistics provided in the paper concern the 124 actual incidents (unless stated otherwise). While there are approximately 140 actionable alerts per day from the NCSA network, we focus only on those that resulted in the discovery of incidents analyzed in this study. Incidents were selected in reverse chronological order, and those without proper documentation and forensic data were excluded. The 150 incidents constitute more than 80% of the total incidents and are representative of all incidents over the last five years at NCSA.

#### Table I: Overview of Alerts Generated by Each Monitoring Tool
Rows marked as INC and INV provide the number of alerts corresponding to all actual incidents and all incident investigations, respectively. Overall, about 87% (108/124) of incidents are detected by anomaly-based detectors, and only 13% (16/124) by signature-based detectors. The IDS and Flows monitors detected 31% and 26% of incidents, respectively. Note that 27% of incidents went undetected by any alert (more discussion follows in Section VIII-D).

##### A. IDS-Based Alerts
- **IRC Analyzer**: Triggers an alert when the Dynamic Protocol Detection mechanism of Bro IDS detects a suspicious IRC connection (e.g., IRC traffic on a non-standard port). The IRC analyzer caught 15 incidents with a very low false positive rate (1/16 = 6%). This is because the IRC alert uses a highly-customized detection mechanism to find connections to command and control channels based on the characteristics of known attacks.
- **Scan (internal, external scans, and SSH)**: Even though most incidents start with a reconnaissance phase involving scans, the majority of scan alerts are false positives or inconclusive. Only one incident was discovered with the help of pre-attack scan activity. However, seven incidents were discovered due to post-attack scan activity in the attack-relay/misuse phase, where attackers (or viruses installed by them) were probing other networks/hosts to propagate further.
- **HTTP and FTP Analyzers**: Generate alerts if a known exploit signature is matched or if an attacker is downloading exploits directly from publicly available exploit repositories. These alerts require constant updating of the list of exploit signatures. They caught six high-severity incidents in the early stages of the attack (penetration phase), when attackers were trying to download an exploit on a host.
- **Malware Analyzer**: Based on the public availability of a malware hash registry, which provides pre-computed MD5 and SHA1 hashes for known malware. Attackers often rename file types (e.g., Linux binary downloaded as a .jpg file) to defeat signature-based matches on filenames. These alerts detected six incidents, all related to spam-bots and virus downloads in the network.
- **Virus Signature Matching**: Can be effective in detecting malware but can be defeated by polymorphic viruses. Customized alerts are implemented as a Bro policy to detect anomalies corresponding to the behavior of popular viruses/worms (e.g., blaster and nimda) instead of relying solely on known signatures.

##### B. Network Flow-Based Alerts
- **TopN**: Triggered when network traffic for a host crosses a certain threshold. While this alert caught the maximum number of incidents (18), it exhibits a high false positive rate (33% = 9/27), and the detected incidents are of moderate severity. This is somewhat counterintuitive, as one would expect an alert that detects a large number of incidents to also cover a proportional number of high-severity incidents.
- **Undernet Flows**: Work in conjunction with the IRC analyzer and trigger on very specific IP address connections, e.g., an IRC connection to the channels on Undernet IRC servers used to host channels for botnet command and control.
- **Watchlist**: Triggered when an attacker connects from a known bad IP address. This alert caught 11 incidents, four of which were of high severity. Despite the common belief that attackers can easily change IP addresses, the success of the blacklisted IP watchlist in detecting attacks shows that many attackers either have limited resources (compromised systems) or are careless in hiding their trails. This also highlights the importance of sharing relevant information between peers.
- **Darknet Flows**: Alerts are generated when connections are made to an unused IP block within the network, specifically by an internal IP address. Since no traffic should be sent to unused IP subnets, a connection to such address space is usually an indication of an automated scan performed by an attacker, virus, or worm.

#### Table I: Alert Types Generated by the Monitoring Tools
| Alert Type | Percentage | Number of Incidents (INC) | Number of Investigations (INV) |
|------------|------------|--------------------------|--------------------------------|
| IDS alerts | 31%        | 39                       | 47                             |
| Packet/Protocol Analyzers | - | - | - |
| Flows alerts | 26%        | 32                       | 39                             |
| Traffic Analyzers | - | - | - |
| Syslog | 11%        | 14                       | 17                             |
| Profile | - | - | - |
| FIM | 4%         | 5                        | 6                              |
| Other | 1%         | 1                        | 1                              |
| No alerts | 27%        | 34                       | 40                             |
| 3rd Party Notification | - | - | - |

This table provides an overview of the number of alerts generated by each monitoring tool, highlighting the effectiveness and limitations of different alert types in detecting security incidents.