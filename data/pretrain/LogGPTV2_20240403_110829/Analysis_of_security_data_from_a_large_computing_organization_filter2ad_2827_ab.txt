to  be  performed  at 
the  security  checks 
Reference  [25]  presents  a  comprehensive  analysis  of 
security  incidents  on  the  Internet  for  the  period  of  1989-
1995.  However,  during  the  last  20  years,  computing 
environments  and  threats  (motives,  models)  have  changed 
significantly.  While 
[25]  presents  solid  classification 
schemes which are highly useful, it is important to note that 
some observations are somewhat outdated. Quoting from the 
report,  “Estimates  based  on  this  research  indicated  that  a 
typical  Internet  domain  is  involved  in  no  more  than  one 
incident per year and that a typical internet host in no more 
than around 1 incident per 45 years.” This conclusion clearly 
does not represent the state of security in 2010 as indicated 
by our study of data on security attacks, which occurred in a 
large computing organization over the last 5 years. Both [24] 
and [25] concentrate on the effect of the incidents and their 
classifications  while  we  also  attempt  to  analyze  alerts  and 
incident  data  to  develop  an  understanding  of  (i)  how 
incidents are getting detected and (ii) how incidents progress. 
An  important  recent  development  is  establishing  (with 
support from DHS) of PREDICT, a repository for security-
relevant  network  operation  data.  The  data  can  be  used  by 
researchers  to  develop  new  models  and  technologies  to 
assess  cyber  threats  to  the  computing  infrastructure  and 
increase cyber security capabilities (www.predict.org).  
V.  ANALYSIS OF AN EXAMPLE INCIDENT  
from  an  alert 
In this section, a credential compromise incident is used 
as an example to illustrate  (i) the type of alerts and ancillary 
data provided by the security monitoring systems and (ii) the 
analysis  process  starting 
incident 
identification. Data snippets from a real log are used to walk 
through  the  analysis  process.  In  this  example  incident,  the 
attacker  logs-in  the  victim  host  using  a  stolen  credential 
(password)  and  obtains  root  privileges  using  a  local  root 
escalation exploit. The end goal of the attacker is to harvest 
passwords  and  authentication  keys  of  other  users,  using 
trojaned versions of SSH and SSHd.  
(1)  An  IDS  alert  shows  suspicious  download  on  a 
production  system  (victim:  xx.yy.ww.zz)  using  the  HTTP 
protocol from remote host aa.bb.cc.dd (the hostname and IP 
address are anonymized).  
May 16 03:32:36 %187538 start xx.yy.ww.zz:44619 >
 aa.bb.cc.dd:80 
May 16 03:32:36 %187538 GET /.0/ptrat.c  
(200 "OK" [2286] server5.bad-host.com) 
IDS 
to 
The data snippet above, shows an alert generated by the 
Bro HTTP analyzer due to the violation of a predefined bro-
policy, i.e., download of an unauthorized file (ptrat.c). This 
file  is  suspect  because:  (a)  this  particular  system  is  not 
generally  expected  to  download  any  code  except  patches, 
system  updates,  and  other  relevant  binaries,  but  then  only 
from  authorized  sources,  (b)  the  downloaded  file  is  a  C 
language  source  code,  and  (c)  the  server  from  which  this 
source  was  downloaded  is  not  an  authorized  software 
distribution repository. 
While  the  alert  generated  suggests  the  download  of  a 
suspicious source file, it does not give a sufficient context of 
events prior to the download (such as a login, execution of 
exploit,  abnormal  number  of  bytes  transferred,  or  a  scan). 
The alert does not reveal what caused the potentially illegal 
download  request,  e.g.,  an  exploit  code,  a  potentially 
malicious  user,  or  a  web  application  making  a  request, 
malicious or otherwise. 
(2) Correlation with network flows. The network flows 
reveal connections with other hosts in close time proximity 
to the occurrence of the download: (i) SSH connection (port 
22)  from  IP  address  195.aa.bb.cc,  and  (ii)  multiple  FTP 
connections to ee.ff.gg.hh, pp.qq.rr.ss. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:46:24 UTC from IEEE Xplore.  Restrictions apply. 
50909-05-16 03:32:27 v tcp 195.aa.bb.cc.35213 -> 
xx.yy.ww.zz.22 80  96  8698 14159   FIN  
09-05-16 03:33:36 v tcp xx.yy.ww.zz.44619 -> 
aa.bb.cc.dd.http 8  6  698 4159   FIN  
09-05-16 03:34:37 v tcp xx.yy.ww.zz.53205 -> 
ee.ff.gg.hh.ftp 1699 2527 108920 359566 FIN  
09-05-16 03:35:39 v tcp xx.yy.ww.zz.39837 -> 
pp.qq.rr.ss.ftp 236  364  15247  546947 FIN  
Flows
While the SSH login could explain the exploit download, 
the connection record does not reveal whether authentication 
was successful or what credentials were used to authenticate.  
(3)  Manual  correlation  with  syslog  alerts.  The  syslog 
confirms  a  user  login  from  195.aa.bb.cc,  which  is  unusual, 
based on the user profile and behavior pattern (user logs in 
for the first time from this IP address).  
May 16 03:32:27 host sshd[7419]: Accepted password for 
user from 195.aa.bb.cc port 35794 ssh2 
Syslog
Four data points are established from the analysis: (1) a 
suspicious  source  code  was  downloaded,  (2)  the  user  login 
occurred  at  nearly  the  same  time  as  the  download,  (3)  the 
first  time  login  from  IP  address  195.aa.bb.cc,  and  (4) 
additional communication to other ports (FTP). 
(4)  Additional  manual  analysis.  Search  of  all  the  files 
owned and created by this user found a footprint left behind 
by  a  credential  stealing  exploit  –  a 
file, 
libno_ex.so.1.0, created at the time of the download, which is 
symptomatic of a credential-stealing exploit. This signature, 
located  in  the  tmp/  folder,  confirms  that  the  account  was 
indeed used to download malicious code as identified below. 
-rwxrwxr-x  1  user  user  3945  May  16  03:37 
/tmp/libno_ex.so.1.0 
Directory 
listing 
library 
The  libno_ex.so.1.0  library  file  is  known  to  be  created 
when  a  code  exploiting  vulnerability  cve-2009-1185  is 
successfully  executed.  Upon  further  investigation,  it  is 
determined  that  the  attacker  (i)  successfully  obtained  root 
privileges in the system, (ii) replaced the SSHd daemon with 
its trojaned SSHd version, and (iii) captured passwords in the 
file /lib/udev/devices/S1. 
[root@host dir]# ls -l /proc/10589/fd 
lrwx------ 1 root root 64 2009-05-16 11:21 2 -> /dev/null 
lrwx------ 1 root root 64 2009-05-16 11:21 3 -> 
/lib/udev/devices/S1 
Note: Trojaned sshd is running as process id 10589 with 
root privileges and writing to a file in /lib/udev/devices/S.1 
Bash 
output 
The example shows that: 
By  systematic  analysis  of  logs  and  correlation  of 
• 
different  data  points  one  can  see  an  increasing  level  of 
suspicion of an imminent attack. Our conjecture is that if we 
can  develop  techniques  to  preempt  the  attack  action  and 
potentially,  let  the  user  progress  under  probation  until  the 
real  intentions  are  clear,  we  may  have  a  greater  chance  of 
preventing  system  misuse.  The  concept  of  execution  under 
probation  has  been  used  in  HP  Non-stop  systems  to  cope 
with accidental failures [7]. 
The  incidents  analysis  requires  correlating  data 
• 
from varied monitors and system logs with human expertise. 
Using the process outlined with the example, we conduct an 
in-depth  analysis  of  data  on  security  incidents  with  the 
primary objective to characterize incident types and severity, 
extract the attack stages, correlate phase of an attack and the 
time  when  an  alert  is  generated, and quantify  the  detection 
coverage  of  different  alerts.  Insights  resulting  from  this 
analysis  can  be  used  to  (a)  drive  design  and  strategic 
placement of defense mechanisms, (b) establish heuristics for 
automated  (or  semi-automated)  analysis  and  correlation  of 
data across the different logs to enable an early detection of 
potential  intruders,  and  (c)  construct  a  model  to  capture 
attacker’s behavior at the network layer. 
VI.  TERMINOLOGY  
Before proceeding, we introduce basic terminology used 
in this paper: alert, attack, incident, misuse, and severity. An 
alert  is  a  warning indicating a  security  violation  within  the 
network  that  warrants  a  response.    An  alert  is  generated 
when monitoring tools detect an anomaly or a known attack 
signature.  An  attack  is  an  action  taken  by  an  attacker  to 
obtain  unauthorized  access  to  a  system  or  information.  An 
incident  occurs  when  an  attacker  is  successfully  able  to 
exploit one or more vulnerabilities in the system and obtains 
unauthorized access. A misuse is an intentional, improper, or 
unauthorized  action  performed  using  computing  resources. 
Severity rating is defined in terms of the adverse effects of an 
incident on the operations, assets, or individual with the loss 
of integrity, confidentiality, and availability [8]4. The choice 
of [8] for representing severity of incidents was made due to 
its  simplicity  in  categorizing  incidents  and  that  it  is  the 
Department  of  Energy-recommended  way  of 
incident 
reporting. 
VII.  ALERTS  
In this section, we present the types of alerts responsible 
for  identifying  a  given  incident.  Data  on  150  incident 
investigations (resulting in 124 actual incidents and 26 false 
positives,  where  a  false  positive  is  synonymous  with  full 
investigation  resulting  in  no  incident  found)  is  studied  to 
characterize  both  the  attacks  and  the  corresponding  alerts 
that  led  to  incident discovery.  All  statistics  provided  in  the 
paper are concerning the 124 actual incidents (unless stated 
otherwise).  While  there  are  approximately  140  actionable 
alerts per day from the NCSA network, we only focus on the 
ones that  resulted  in the discovery  of  incidents analyzed  in 
this  study.  For  selecting  incidents  we  went  in  reverse 
chronological  order.  Incidents  left  out  from  the  study  are 
those  for  which  there  is  no  proper  documentation  and 
forensic data. 150 incidents constitute more than 80% of the 
total  incidents  and  are  representative  of  all  the  incidents  in 
last 5 years at NCSA 
Table  I  provides  an  overview  of  the  number  of  alerts 
generated  by  each  monitoring  tool.  Rows  marked  as  INC 
and  INV  provide  the  number  of  alerts  corresponding  to  all 
actual incidents and all incident investigations, respectively. 
Overall  about  87%  (108/124)  of  incidents  are  detected  by 
4 The choice of [8] for representing severity of incidents was made 
due  to  its  simplicity  in  categorizing  incidents  and  that  it  is  the 
Department of Energy recommended way of incident reporting. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:46:24 UTC from IEEE Xplore.  Restrictions apply. 
510anomaly-based  detectors  and  only  13%  (16/124)  by 
signature-based  detectors.  Table  I  shows  also  that  the  IDS 
and  Flows  monitors  detected  31%  and  26%  of  incidents, 
respectively. Note that 27% of incidents went undetected by 
any alert (more discussion follows in Section VIII-D.) 
A. 
IDS Based Alert 
IRC  (Internet  Relay  Chat)  Analyzer  triggers  an  alert 
when  the  Dynamic  Protocol  Detection  mechanism  of  Bro 
IDS sees a suspicious IRC connection (e.g., IRC traffic on a 
non-standard  port).  The  IRC  analyzer  caught  15  incidents 
while exhibiting a very low false positive rate (1/16 = 6%). 
This  is  because  the  IRC  alert  uses  a  highly-customized 
detection  mechanism  finding  connections  to  command  and 
control  channel  derived  based  on  the  characteristics  of 
known attacks.  
Scan  (internal,  external  scans  and  SSH).  Even  though 
most  incidents  start  with  a  reconnaissance  phase  with  scan 
being an integral part of it, the vast majority of scan alerts are 
false  positives  or  inconclusive  at  best,  and  hence,  most  of 
them are ignored. In the analyzed data only one incident was 
discovered  with 
the  help  of  pre-attack  scan  activity. 
However,  seven incidents  were  discovered due  to  the post-
attack scan in the attack-relay/misuse phase where attackers 
(more  precisely  viruses  installed  by  the  attacker)  were 
probing other networks/hosts in order to propagate further.  
HTTP and FTP analyzer alerts are generated if a known 
exploit  signature  is  matched  or  an  attacker  is  downloading 
exploits directly from publicly available exploit repositories. 
This  is  a  high-maintenance  alert  and  requires  constant 
updating  of  a  list  of  the  exploit  signatures.  These  alerts 
caught six high severity incidents in the early stages of the 
attack  (penetration  phase),  when  attackers  were  trying  to 
download  an  exploit  on  a  host  (see  Section  VIII-B  for  the 
discussion on the attack phases).  
Malware  analyzer  alerts  are  based  on  the  use  of  public 
availability of a malware hash registry  which provides pre-
computed  MD5  and  SHA1  hashes  for  known  identified 
malware.  Often attackers rename the file types (e.g., Linux 
binary  downloaded  as  .jpg  file)  to  defeat  signature-based 
matches on filenames. These alerts detected 6 incidents, all 
related to spam-bots and virus downloads in the network. 
Virus  signature  matching  can  be  effective  in  detecting 
malware;  however  it  can  be  defeated  by  polymorphic 
viruses.  Thus,  customized  alerts  are  implemented  as  a  Bro 
policy to detect anomalies corresponding to the behavior of 
some  of  the  most  popular  virus/worms  (e.g.,  blaster  and 
nimda), instead of relying solely on known signatures.  
B. 
Network Flow- Based Alerts  
a 
is 
to 
low 
TopN  is  triggered  when  network  traffic  for  the  host 
crosses over a certain threshold. While this alert caught the 
maximum number of incidents (18), it exhibits a high false 
positive rate (33% = 9/27), and the detected incidents are of 
moderate 
somewhat 
counterintuitive because one would expect that an alert that 
detects  a  large  number  of  incidents  would  also  cover  a 
proportional number of high severity incidents.  
severity.  This 
Undernet flows work in conjunction to the IRC analyzer 
and trigger on very specific IP address connections, e.g., an 
IRC  connection  to  the  channels  on  Undernet  IRC  servers 
used to host channels for botnet command and control. 
Watchlist is triggered when an attacker connects from a 
known bad IP address. This alert caught 11 incidents. Four 
of those incidents were of high severity (see Section VIII-C 
for  the  discussion  on  incident  severity).  Although  it  is  a 
common belief that attackers can easily change IP addresses, 
the  fact  that  the  blacklisted  IP  watch  list  is  successful  in 
detecting  attacks  shows  that  many  attackers  either  have 
limited resources (compromised  systems)  or  are careless  in 
hiding  trails.  This  also  shows  the  importance  of  sharing 
relevant information between peers.  
Darknet flows: alerts are generated when connections are 
made to an unused IP block within the network specifically 
by an internal IP address. Since no traffic should be sent to 
unused  IP  subnets,  a  connection  to  such  address  space  is 
usually an indication of an automated scan performed by an 
attacker, virus, or worm.  
TABLE I.  ALERT TYPES GENERATED BY THE MONITORING TOOLS 
IDS alerts  
(31%) 
Packet/Protocol Analyzers 
Flows alerts  
(26%) 
Traffic Anlyzers 
Syslog (11%) 
Profile 
FIM 
(4%)  Other 
(1%) 
Host 
No alerts  
(27%) 
3rd Party Notification 
# 
INC 124 
Anomaly 
(108/124) 
Signature 
(16/124)  
INV 150 
n
a
c
S
l
a
n
r
e
t
n
I
6 
6 
0 
6 
P
T
T
H
e
r
a
w
l
a
M
P
T
F
6  5  3 
2 
4 
4  0 
1  3 
7  6  3 
C
R
I
15 
15 
0 
16 
n
a
c
S
H
S
S
m
r
o
w
/
s
u
r
i
V
n
a
c
S
l
a
n
r
e
t
x
E
N
p
o
T
1 
1 
0 
1 
1 