7.C如何处理不同计算机系统中的不同文件和换行约定？
8.在使用缓冲输入的系统中，把数值和字符混合输入会遇到什么潜在的
问题？
557
8.11 编程练习
下面的一些程序要求输入以EOF终止。如果你的操作系统很难或根本无
法使用重定向，请使用一些其他的测试来终止输入，如读到&字符时停止。
1.设计一个程序，统计在读到文件结尾之前读取的字符数。
2.编写一个程序，在遇到 EOF 之前，把输入作为字符流读取。程序要
打印每个输入的字符及其相应的ASCII十进制值。注意，在ASCII序列中，空
格字符前面的字符都是非打印字符，要特殊处理这些字符。如果非打印字符
是换行符或制表符，则分别打印\n或\t。否则，使用控制字符表示法。例
如，ASCII的1是Ctrl+A，可显示为^A。注意，A的ASCII值是Ctrl+A的值加上
64。其他非打印字符也有类似的关系。除每次遇到换行符打印新的一行之
外，每行打印10对值。（注意：不同的操作系统其控制字符可能不同。）
3.编写一个程序，在遇到 EOF 之前，把输入作为字符流读取。该程序
要报告输入中的大写字母和小写字母的个数。假设大小写字母数值是连续
的。或者使用ctype.h库中合适的分类函数更方便。
4.编写一个程序，在遇到EOF之前，把输入作为字符流读取。该程序要
报告平均每个单词的字母数。不要把空白统计为单词的字母。实际上，标点
符号也不应该统计，但是现在暂时不同考虑这么多（如果你比较在意这点，
考虑使用ctype.h系列中的ispunct()函数）。
5.修改程序清单8.4的猜数字程序，使用更智能的猜测策略。例如，程序
最初猜50，询问用户是猜大了、猜小了还是猜对了。如果猜小了，那么下一
次猜测的值应是50和100中值，也就是75。如果这次猜大了，那么下一次猜
测的值应是50和75的中值，等等。使用二分查找（binary search）策略，如
果用户没有欺骗程序，那么程序很快就会猜到正确的答案。
6.修改程序清单8.8中的get_first()函数，让该函数返回读取的第1个非空
白字符，并在一个简单的程序中测试。
558
7.修改第7章的编程练习8，用字符代替数字标记菜单的选项。用q代替5
作为结束输入的标记。
8.编写一个程序，显示一个提供加法、减法、乘法、除法的菜单。获得
用户选择的选项后，程序提示用户输入两个数字，然后执行用户刚才选择的
操作。该程序只接受菜单提供的选项。程序使用float类型的变量储存用户输
入的数字，如果用户输入失败，则允许再次输入。进行除法运算时，如果用
户输入0作为第2个数（除数），程序应提示用户重新输入一个新值。该程序
的一个运行示例如下：
Enter the operation of your choice:
a. add        s. subtract
m. multiply     d. divide
q. quit
a
Enter first number: 22 .4
Enter second number: one
one is not an number.
Please enter a number, such as 2.5, -1.78E8, or 3: 1
22.4 + 1 = 23.4
Enter the operation of your choice:
a. add        s. subtract
m. multiply     d. divide
559
q. quit
d
Enter first number: 18.4
Enter second number: 0
Enter a number other than 0: 0.2
18.4 / 0.2 = 92
Enter the operation of your choice:
a. add        s. subtract
m. multiply     d. divide
q. quit
q
Bye.
560
第9章 函数
本章介绍以下内容：
关键字：return
运算符：*（一元）、&（一元）
函数及其定义方式
如何使用参数和返回值
如何把指针变量用作函数参数
函数类型
ANSI C原型
递归
如何组织程序？C的设计思想是，把函数用作构件块。我们已经用过C
标准库的函数，如printf()、scanf()、getchar()、putchar()和 strlen()。现在要进
一步学习如何创建自己的函数。前面章节中已大致介绍了相关过程，本章将
巩固以前学过的知识并做进一步的拓展。
561
9.1 复习函数
首先，什么是函数？函数（function）是完成特定任务的独立程序代码
单元。语法规则定义了函数的结构和使用方式。虽然C中的函数和其他语言
中的函数、子程序、过程作用相同，但是细节上略有不同。一些函数执行某
些动作，如printf()把数据打印到屏幕上；一些函数找出一个值供程序使用，
如strlen()把指定字符串的长度返回给程序。一般而言，函数可以同时具备以
上两种功能。
为什么要使用函数？首先，使用函数可以省去编写重复代码的苦差。如
果程序要多次完成某项任务，那么只需编写一个合适的函数，就可以在需要
时使用这个函数，或者在不同的程序中使用该函数，就像许多程序中使用
putchar()一样。其次，即使程序只完成某项任务一次，也值得使用函数。因
为函数让程序更加模块化，从而提高了程序代码的可读性，更方便后期修
改、完善。例如，假设要编写一个程序完成以下任务：
读入一系列数字；
分类这些数字；
找出这些数字的平均值；
打印一份柱状图。
可以使用下面的程序：
#include 
#define SIZE 50
int main(void)
{
562
float list[SIZE];
readlist(list, SIZE);
sort(list, SIZE);
average(list, SIZE);
bargraph(list, SIZE);
return 0;
}
当然，还要编写4个函数readlist()、sort()、average()和bargraph()的实现
细节。描述性的函数名能清楚地表达函数的用途和组织结构。然后，单独设
计和测试每个函数，直到函数都能正常完成任务。如果这些函数够通用，还
可以用于其他程序。
许多程序员喜欢把函数看作是根据传入信息（输入）及其生成的值或响
应的动作（输出）来定义的“黑盒”。如果不是自己编写函数，根本不用关心
黑盒的内部行为。例如，使用printf()时，只需知道给该函数传入格式字符串
或一些参数以及 printf()生成的输出，无需了解 printf()的内部代码。以这种
方式看待函数有助于把注意力集中在程序的整体设计，而不是函数的实现细
节上。因此，在动手编写代码之前，仔细考虑一下函数应该完成什么任务，
以及函数和程序整体的关系。
如何了解函数？首先要知道如何正确地定义函数、如何调用函数和如何
建立函数间的通信。我们从一个简单的程序示例开始，帮助读者理清这些内
容，然后再详细讲解。
9.1.1 创建并使用简单函数
我们的第1个目标是创建一个在一行打印40个星号的函数，并在一个打
563
印表头的程序中使用该函数。如程序清单9.1所示，该程序由main()和
starbar()组成。
程序清单9.1 lethead1.c程序
/* lethead1.c */
#include 
#define NAME "GIGATHINK, INC."
#define ADDRESS "101 Megabuck Plaza"
#define PLACE "Megapolis, CA 94904"
#define WIDTH 40
void starbar(void); /* 函数原型 */
int main(void)
{
starbar();
printf("%s\n", NAME);
printf("%s\n", ADDRESS);
printf("%s\n", PLACE);
starbar();   /* 使用函数 */
return 0;
}
564
void starbar(void) /* 定义函数  */
{
int count;
for (count = 1; count 
#include      /* 为strlen()提供原型 */
#define NAME "GIGATHINK, INC."
#define ADDRESS "101 Megabuck Plaza"
#define PLACE "Megapolis, CA 94904"
#define WIDTH 40
#define SPACE ' '
570
void show_n_char(char ch, int num);
int main(void)
{
int spaces;
show_n_char('*', WIDTH);        /* 用符号常量作为参数 */
putchar('\n');
show_n_char(SPACE, 12);         /* 用符号常量作为参数 */
printf("%s\n", NAME);