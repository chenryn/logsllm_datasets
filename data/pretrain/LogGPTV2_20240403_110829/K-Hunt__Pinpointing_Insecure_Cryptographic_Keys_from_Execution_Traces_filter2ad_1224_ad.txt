240
160
8
240
464
240
240
176
240
256
1024
352
240
176
240
2
5
14
12
3
72
12
118
46
9
17
79
12
22
58
51
2
1
7
1
3
12
4
19
4
5
2
6
3
3
3
3
Table 2: Results of the key pinpointing and key identifica-
tion. ∗ denotes that the implementation of this algorithm is
proprietary.
and does not require access to the program’s source or debugging
symbols.
Input Preparation. We have prepared test cases of different sizes
for each program, so that each test case triggers a cryptographic
operation. The test cases can be easily produced using the high-level
descriptions of the software available on their webpages, e.g., that
it encrypts a file with password, there is no need to know any low
level details about the program. Furthermore, most of the payload
of the test cases can be random, as long as the crypto operation is
triggered. For the differential analysis, we also prepared test cases
of different sizes that do not trigger a crypto operation.
Executions. For each test case, K-Hunt executes the program
three times with different instrumentations. In the first execution,
K-Hunt obtains basic block statistics to identify candidate crypto
basic operation blocks. In the second execution, K-Hunt tests the
data randomness to identify the actual crypto basic blocks and
analyzes them to locate the crypto keys. In the third execution,
K-Hunt performs the taint analysis of the crypto keys to detect
insecure crypto keys.
Host. K-Hunt can run on both Windows and Linux thanks to Pin’s
support for both platforms. We use a Dell workstation installed with
both Windows 7 and Fedora 25 operating systems as the testing
platform. The workstation has an Intel Core i7-6700 CPU (3.4GHz),
with 16GB physical memory and a 2TB disk.
6.2 Effectivenesses of Key Identification
Table 2 details the results of K-Hunt’s key buffer pinpointing for
each of the programs1. The table shows in column B1 the number
of candidate basic blocks that contain a high arithmetic instruc-
tion ratio; in B2 the subset of B1 candidate basic blocks with a
linear relation with the input size; in B3 the number of identified
crypto basic blocks, i.e., B2 candidate basic blocks that produce data
bundles with high randomness; in N the number of identified key
buffers; in S the total size of the identified key buffers; and in IL
the input length of the identified key buffers.
We can observe from columns B1–B3 that all three constraints
to identify crypto basic blocks are needed. If we only use the first
constraint, i.e., arithmetic instruction ratio, many irrelevant basic
blocks are included especially for data transformation programs
(e.g., WinRAR, MuPDF). If we only use the first two constraints,
asymmetric ciphers still have a large number of candidate basic
blocks. Thus, we must also the randomness of the operated data to
locate the crypto basic blocks that actually use the crypto key.
We evaluate the correctness of the crypto key detection using
the manually-generated ground truth. We do not find any false
positives among these programs, but false positives are possible in
some cases discussed in §7, e.g., if keys are stored in registers. We
find two false negatives, one in Wget, the other in PSCP. Both are
due to key exchange protocols that combine an asymmetric cipher
with a symmetric cipher. In both cases, K-Hunt only discovers the
secret key of the symmetric cipher because there is a linear relation
between the number of crypto basic block executions and the input
size. Since the input for the asymmetric cipher is a single block
when protecting the symmetric key, K-Hunt is not able to pinpoint
the public keys. However, if the public key is used to protect the
data rather than the key our analysis is able to identify these public
keys (e.g., the case of Imagine discussed in §6.3).
To better understand how our analysis performs, we have con-
ducted an in-depth investigation and obtained a number of inter-
esting findings, which are summarized below:
Key buffers of block ciphers. In our benchmark the most fre-
quently used cipher is the AES block cipher. We found that all of the
AES implementations store the round keys (11 or 15 rounds) in one
key buffer (176 or 240 bytes). Nonetheless, the format of those key
1Note that GnuTLS is missing because it relies on Nettle or Libgcrypt as its crypto
backend, and the results of both Nettle and Libgcrypt are already listed.
buffers are often diversified in terms of byte orders and buffer sizes.
For instance, AES key buffers of WinRAR and Putty-SCP use differ-
ent byte orders. Meanwhile, malware authors can also deliberately
obfuscate the key format to evade the detection. We found that the
recent ransomware, WannaCry, allocates a non-standard AES-128
round key buffer with double the normal size (i.e., 352 instead of
176 bytes). As a result, signature-based key searching techniques
(e.g., [14, 57, 64]) are unlikely to identify the key. K-Hunt instead
is not affected by such an implementation variation. Additionally,
K-Hunt handled Intel’s hardware AES encryption in the case of
Libsodium, Enpass, and 7-zip through directly labeling AES NI instruc-
tions and identifying the relevant key buffers.
Key buffers of stream ciphers. In our benchmark three programs
(Cryptochief, Ultrasurf, and Sage) use stream ciphers. A stream cipher
often maintains a “state” in a fixed-length memory buffer to update
the key stream. This state is continuously updated during the en-
cryption. Therefore we could not distinguish it by simply assuming
the key is immutable. K-Hunt pinpoints the key buffer from crypto
blocks that operate on it, and accurately detects its range. The key
buffers of stream ciphers RC4 and ChaCha20 are both 256 bytes and
the home-made stream cipher in Cryptochief [20] uses a 8-byte key
buffer, as shown in the S-column.
Key buffers of public-key ciphers. Unlike block ciphers and
stream ciphers where K-Hunt identifies a single buffer (N column
in Table 2), K-Hunt identified multiple key buffers for asymmetric
ciphers. This happens because public keys used by asymmetric
ciphers usually consists of several components that may be stored
in different buffers, e.g., d and n in RSA. Interestingly, we found
the length of key buffers are often much larger than the length of
the required public key. We then checked the source code of each
crypto library and found that certain public key encryption are
actually implemented in a very optimized way, which often uses
a varied public key with larger integers. For instance, we found
all tested crypto libraries implement the RSA algorithm with the
Chinese Remainder Theorem (CRT) optimization, which requires
a number of extra parameters (e.g., dp, dq, qinv) besides the well-
known parameters (e.g., n, d, p, q). In this situation the detected
RSA key buffers covers all used large integers.
6.3 Effectiveness of Insecure Key Detection
After pinpointing the crypto keys, K-Hunt uses the key tracking
Pintool to identify insecure keys: deterministically generated keys
(DGK), insecurely negotiated keys (INK), and recoverable keys (RK).
Table 3 summarizes the detection results. Among the 25 tested
programs, 22 contain at least one insecure key. Only three (Botan,
Crypto++, PSCP) do not have any insecure crypto keys. Overall,
K-Hunt finds 25 insecure keys in 8 libraries and 14 applications.
Thus, insecure keys occur not only in applications using crypto
operations, but also in well-established crypto libraries.
The most common class of identified insecure keys are recover-
able keys. K-Hunt found 21 recoverable keys in 8 libraries and 13
applications. K-Hunt also found two deterministic keys (each in
a separate application) and two insecurely negotiated keys (each
in a separate application as well). In the following, we detail the
detection of each class of insecure keys.
Target
Botan
Crypto++
Libgcrypt
LibSodium
LibTomcrypt
Nettle
GnuTLS
mbedTLS
OpenSSL
WolfSSL
7-zip
Ccrypt
Cryptcat
Cryptochief
Enpass
Imagine
IpMsg
Keepass
MuPDF
PSCP
Sage
UltraSurf
WannaCry
Wget
WinRAR
-
-
-
-
-
-
-
-
-
-
-
-
-
✓
-
✓
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
✓
-
-
-
-
✓
-
-
-
-
-
-
✓
✓
✓
-
-
-
✓
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
✓
-
-
-
✓
✓
✓
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
✓
-
-
-
✓
-
✓
✓
✓
-
✓
✓
✓
✓
-
-
-
-
-
-
-
-
-
-
-
-
✓
✓
✓
-
-
-
-
-
-
-
-
-
-
✓
DGK
INK
NMZ MMZ
RK
RKPS