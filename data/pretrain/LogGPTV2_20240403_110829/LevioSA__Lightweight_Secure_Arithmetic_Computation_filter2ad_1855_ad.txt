parties P0 and P1 via a two-party protocol secure against passive
adversaries which is referred to as the inner protocol. The high-level
approach is to make P0 and P1 engage in n sub-protocols ρ1, . . . , ρn
where in ρj, the parties jointly compute the next message of server
sj. In typical instantiations of this compiler the (simulated) servers
do not have any input whereas the clients C0 and C1 share their
inputs with the n servers via a verifiable secret sharing scheme.
Then, P0 and P1 respectively emulate the roles of C0 and C1, and for
every step in the computation of server sj, securely execute its next
message function using ρj to produce the next message of sj, which
is secret shared between the parties. In this work, this emulation
can be carried out by invoking the OLE functionality. Moreover,
each server’s state is not available to any of the parties. Instead, it is
shared amongst them using an additive secret sharing scheme, for
which the parties keep updating via the two-party inner protocol
ρj.
While the outer protocol is secure against active adversaries, the
inner protocol is secure only against passive adversaries. There-
fore, there needs to be a mechanism for a party to enforce honest
behavior of the other party. To handle this issue, a novel concept
called watchlists was introduced by [30]. In essence, each party gets
to check the other party’s behavior on a subset of the servers that
are on its watched list. To do so, P0 and P1 generate each n keys,
and party Pi uses key ki
throughout the protocol to encrypt the
j
randomness it uses in ρj and send it to the other party. Each party
Pi knows only t of the keys of the other party (for some parameter t
that will be fixed later), and can thus check that the ρj was executed
honestly for those t servers, by checking that the messages sent by
P1−i as part of ρj are consistent with the encrypted randomness
they received. In this work we implement this mechanism using
actively secure t-out-of-n OT to exchange the keys between the
parties. Note that the number of “watched” servers t should be care-
fully chosen as it should not be too high to avoid compromising the
privacy of the outer protocol, whereas it cannot be too low to allow
catching misbehavior of each party with sufficiently high proba-
bility. It was shown in [30] that in the two-party setting n = O(κ)
servers is sufficient. In this work we provide a concrete analysis of
this mechanism.
4Where the communication complexity of this protocol is O(|C|) + poly(κ, d , |C|)
for C the computed circuit with depth d and κ the computational security parameter.
4 ACTIVELY SECURE ARITHMETIC 2PC
In this section, we provide our main protocol that achieves secure
two-party computation for arithmetic circuits against active ad-
versaries. Our protocol is an instantiation of the IPS compiler [30]
with optimized components and a tighter analysis. While the inner
protocol can be typically instantiated with the classic GMW pro-
tocol [26] that employs any passively secure protocol for the OLE
functionality (cf. Figure 2), the outer protocol may be instantiated
with different honest majority protocols that dominate the commu-
nication complexity of the combined protocol and introduce other
properties. For the purpose of feasibility results, the classical BGW
protocol [4] can be used as the outer protocol, whereas the instan-
tiation with [12] induces a constant-rate protocol for a constant
number of clients. Another useful instance is obtained from the
constant round protocol from [11] that makes black-box access of
the pseudorandom generator, yielding a dishonest majority proto-
col with the same features. In this work, we refine this approach
by providing a concrete and optimized outer protocol for a slight
variant of the IPS compiler with a tighter analysis while extending
ideas from [1].
4.1 Our Optimized Outer Protocol
In this section we present our optimized outer protocol in the
honest majority setting which involves two clients C0 and C1 and n
servers. We consider a protocol variant where we allow the servers
in the outer protocol to have access to a coin-tossing oracle FCOIN
which upon invocation can broadcast random values to all servers.
When compiling this variant, this oracle is implemented via a coin-
tossing protocol executed between the clients (cf. Figure 9). A crucial
ingredient in our construction is the use of Reed-Solomon codes as
a packed secret sharing scheme [19] (as defined in Section 2.5). We
start by providing our coding notations and related definitions.
Coding notation. For a code C ⊆ Σn and vector v ∈ Σn, de-
note by d(v, C) the minimal distance of v from C, namely the
number of positions in which v differs from the closest codeword
in C, and by ∆(v, C) the set of positions in which v differs from
such a closest codeword (in case of a tie, take the lexicograph-
ically first closest codeword). We further denote by d(V , C) the
minimal distance between a vector set V and a code C, namely
d(V , C) = minv ∈V {d(v, C)}.
Definition 3 (Reed-Solomon code). For positive integers n, k,
finite field F, and a vector η = (η1, . . . , ηn) ∈ Fn of distinct field
elements, the code RSF,n,k ,η is the [n, k, n−k +1]-linear code5 over F
that consists of all n-tuples (p(η1), . . . , p(ηn)) where p is a polynomial
of degree < k over F.
Definition 4 (Encoded message). Let L = RSF,n,k ,η be an
RS code and ζ = (ζ1, . . . , ζw) be a sequence of distinct elements of
F for w ≤ k. For u ∈ L we define the message Decodeζ (u) to be
(pu(ζ1), . . . , pu(ζw)), where pu is the polynomial (of degree < k)
corresponding to u. For U ∈ Lm with rows u
, . . . , um ∈ L, we let
Decodeζ (U) be the length mw vector x = (x11, . . . , x1w , . . . , xm1,
. . . , xmw) such that (xi1, . . . , xiw) = Decodeζ (ui) for i ∈ [m]. We
say that u L-encodes x (or simply encodes x) if x = Decodeζ (u).
5We denote by [n, k , d]-linear code a linear code of length n, rank k and minimum
distance d.
1
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom334of vj (so that v0
j
+ v1
j
= (v1, . . . , vw) which contains
= vj ), and so can simply rearrange these additive shares according to the order of the wires in G. Each client
Parameters. Public parameters of the protocol include the block width w, the soundness amplification parameter σ , a RS code L = RSF,n,k ,η and a
vector ζ = (ζ1, . . . , ζw) used to encode/share blocks of values. Client C0’s input is x = (x1, . . . , xα1) and client C1’s input is y = (y1, . . . , yα2). The
clients and the n servers share a description of an arithmetic circuit C : Fα1 × Fα2 → Fα3 × Fα4 that implements F, partitioned into layers and blocks
of gates.
Invariant. The execution maintains the invariant that, when evaluating blocks in layer i, the servers collectively know encodings of the blocks of
values for the previous layers. Moreover, the two clients know each a 2-out-of-2 additive share of such blocks of values.
1. Input sharing. For each of their own input layers, the clients C0 and C1 arrange their input values into blocks of length at most w, and distribute
L-encodings of such blocks among the servers. Moreover, each client generates additive shares of their own input values, send one share to the other
party and keep the other one for themselves for the computation.
2. Evaluating computation layers. The parties process blocks of gates layer by layer. To process a block of gates G in level i, they perform the
following steps:
– 2.1 Generate encodings of the inputs of a block. The clients generate additive shares of the block of values BG
L
the values of the left wires of the gates in G. Since each such value vj originates from a gate in a previous block, each client Ci already knows an
additive sharing v i
j
then generates an L-encoding of its block (v i1 , . . . , v i
w) of additive shares, and distributes this encoding to the servers. Each server can sum the
encodings received by each client, which gives a share of an L-encoding of BG
L
– 2.2a Addition/Subtraction. Blocks of addition/subtraction gates are handled without interaction. Namely, each server adds/subtracts its shares of
left and right blocks to obtain an L-share of the block BG
O
additive shares of the output as well.
– 2.2b Multiplication. Each server sQ multiplies its encodings lQ and rQ of BG
L
encodings belong to L = RSF,n,k ,η, then the product of the encodings (o′
1, . . . , o′
that the servers obtain a fresh L-encoding of BG
O
a0
Q
additive share of BG
O
encodings received by each client to obtain an L-encoding of BG
O
3. Generate encodings of output blocks. The parties can obtain each an additive share or a share of an encoding of an output block analogously to
how they do so for encodings of BG
L
4. Correctness tests. See Figure 8.
5. Output reconstruction. Each server sends to each client its shares corresponding to the output blocks of that client. The clients decode
(reconstruct) the output blocks and obtain the final outputs. If the received shares do not form a valid codeword in L, the client aborts.
and BG
R
n) ∈ L′ = RSF,n,2·k ,η. The parties then perform a degree reduction, so
such that
n) as an encoding in RSF,n,n,η, and decode it to obtain each an
. Then, the clients generate fresh L-encodings of these values and distribute them among the servers. The servers sum the two
to obtain an encoding o′
Q
. In particular, each server generates a random additive share of o′G
Q
of values of the gates in G. Clients can sum the additive shares of their blocks to obtain
. Similarly, the servers obtain an encoding of BG
R
to C1. The clients treat the (ai0, . . . , ai
= lQ rQ of BG
O
, by sampling a0
, and sends a0
Q
to C0 and a1
Q
. If the original
Q , a1
Q
.
+ a1
Q
= o′G
Q
.
in step 2.1.
Figure 7: Optimized Outer Protocol Π.
Moreover, we recall that Decodeζ (·) is a linear operation, i.e. for
any a, b ∈ Fn (even if a, b not in L), Decodeζ (a +b) = Decodeζ (a)+
Decodeζ (b).
In this protocol, the computation will be performed by the servers
by operating on multiple gates at a time. We assume that the parties
agree on a way to split the gates in each layer of the arithmetic
circuit into groups of at most w gates. We refer to each group as
a block and to w as the block width. During the evaluation of the
protocol on a specific input, we can associate to each block of gates
G a vector (block) of w values BG
, which contains in position i
O
the value that the i-th gate of the block is assigned with as part of
the evaluation (or 0 if the block has less than w gates). Moreover,
for blocks of computation gates, we can associate two additional
blocks: the left block BG
, which contains in position i the value
L
of the left predecessor of the i-th gate in the block, and the right
, which contains the values of the right predecessors. In
block BG
R
other words, the value of the i-th gate of a multiplication (resp.
addition) block can be expressed as (BG
R )i (resp.
(BG
O)i = (BG
In the protocol, the servers will collectively compute on Reed
Solomon encodings (packed secret shares) of these blocks. The
O)i = (BG
L )i + (BG
L )i(BG
R )i).
protocol parameters include a description of L = RSF,n,k ,η and a
vector of elements ζ = (ζ1, . . . , ζw) ∈ Fn to be used for decoding.
We say that the servers collectively hold shares of a block of values
B ∈ Fw to mean that server sQ holds value lQ in such a way that
B = Decodeζ (l1, . . . , ln). Analogously, saying that a client shares a
block of values B among the servers means that the client samples a
random codeword (l1, . . . , ln) in L which encodes B and sends lQ to
server sQ . This sampling is achieved by choosing a random polyno-
mial pB(·) of degree smaller than k such that (pB(ζ1), . . . , pB(ζw)) =
B. We further say that a codeword l ∈ L encodes a block of secrets
i xi = 0. A
codeword l ∈ L encodes the all 0’s block if (0, . . . , 0) = Decodeζ (l).
A formal description of our protocol is given in Figures 7, 8. We
defer the complete proof to the full version.
that sum up to 0 if (x1, . . . , xw) = Decodeζ (l) andw
Theorem 1. Let k, t, e, w, n be positive integers such that k ≥
t + e + w, e < d/3, and 2k + e < n, and let F : Fα1 × Fα2 →
Fα3 × Fα4 be a two-party functionality, then protocol Π from Figure
7 securely computes F between two clients and n servers, tolerating
adaptive adversaries that actively corrupt at most one client, e servers
and passively corrupt at most t servers, with statistical security of
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom3351 , . . . , z0
n) as the first two rows and the m blocks B2, . . . , Bm+1 to be tested as the
The parties perform each of the following tests σ times.
Degree test. This test verifies that all the L-encodings of the blocks collectively held by the servers are valid codewords, namely belong to L. We recall
n ) directly resulting from the multiplication the servers perform (and
that, for multiplication gates, we do not consider the encodings (o′G1 , . . . , o′G
before the degree reduction), as those encodings belong to L′.
n) and z1 = (z1
n) of randomly sampled values among the servers. Let U ∈ Lm+2
The clients first distribute fresh L-encodings z0 = (z0
1 , . . . , z0
1 , . . . , z1
n), z1 = (z1
denote the matrix that contains z0 = (z0
1 , . . . , z1
remaining rows. The servers then receive a vector r ∈ Fm+2 of m + 2 random field elements from the coin-tossing oracle FCOIN and locally compute
l = r T U . That is, each server sQ , who holds the Q-th component of each encoding and therefore the column UQ , locally computes lQ = r T UQ and
broadcasts lQ to all other parties. The servers collect the vector l = (l1, . . . , ln) and abort if l (cid:60) L.
Permutation test. This test ensures that the constraints between the L-encodings of different blocks held by the servers are respected (i.e. that steps 2.1
and 3 are performed honestly). In particular, the test verifies that the encodings of the left and right input blocks of each computation layer correctly
encode the values from the previous layers (and similarly for the output blocks). Note that the set of constraints that the blocks of values have to satisfy
can be expressed as a set of linear equations in at most nw equations and nw variables, where variable xi ,j represents the j-th value of the i-th block.
(For example, if the circuit had a wire between the 3rd value of the 2nd block and the 5th value in the 3rd block the constraints would be x2,3 − x3,5 = 0.)
These linear equations can be represented in matrix form as Ax = 0mw , where A ∈ Fmw×mw is a public matrix which only depends on the circuit
being computed. The test simply picks a random vector r ∈ Fmw and checks that (r T A)x = 0. To check these constraints, the clients first distribute the
vectors z0 = (z0
random vector r ∈ Fmw plus two elements b0, b1 from the coin-tossing oracle FCOIN and compute
r T A = (r11, . . . , r1w , . . . , rm1, . . . , rmw).
n) that encode random blocks of values that sum to 0 in RSF,n,k +w ,η. The servers then receive a
n) and z1 = (z1
1 , . . . , z0
1 , . . . , z1
lQ = (r1(ζQ), . . . , rm(ζQ))T(cid:101)UQ + b0z0
Now, let ri(·) be the unique polynomial of degree < w such that ri(ζQ) = riQ for every Q ∈ [w] and i ∈ [m]. Then server sQ locally computes