         }  
         Warning("%s contains %d instructions\n", Name(func), count);  
       }  
       else {  
         Warning("No function found at location %x", ScreenEA());  
       }  
     }
这个函数从➊处开始，它使用 GetFunctionAttr
 确定包含光标地址（ScreenEA()
 ）的函数的起始地址。如果确定了一个函数的起始地址，下一步➋是再次使用GetFunctionAttr
 确定该函数的结束地址。确定该函数的边界后，接下来执行一个循环，使用 FindCode
 函数（➌）的搜索功能，逐个识别函数中的每一条指令。在这个例子中，Warning
 函数用于显示结果，因为这个函数仅仅生成一行输出，而在警告对话框中显示输出，要比在消息窗口中显示输出更加明显。请注意，这个例子假定给定函数中的所有指令都是相邻的。另一种方法可以替代 FindCode
 来遍历函数中每条指令的所有代码交叉引用。只要编写适当的脚本，你就可以采用这种方法来处理非相邻的函数（也称为“分块”函数）。
15.5.3 枚举交叉引用
由于可用于访问交叉引用数据的函数的数量众多，以及代码交叉引用的双向性，如何遍历交叉引用可能会令人困惑。为了获得你想要的数据，你必须确保自己访问的是适合当前情况的正确交叉引用类型。在我们的第一个交叉引用示例（如代码清单 15-3 所示）中，我们遍历函数中的每一条指令，确定这些指令是否调用了其他函数，从而获得该函数所做的全部函数调用。要完成这个任务，一个方法是解析 GetMnem
 的结果，从中查找 call
 指令。但是，这种方法并不是非常方便，因为用于调用函数的指令因 CPU 类型而异。此外，要确定到底是哪一个函数被调用，你还需要进行额外的解析。使用交叉引用则可以免去这些麻烦，因为它们独立于CPU ，能够直接告诉我们交叉引用的目标。
代码清单 15-3 枚举函数调用
#include 
static main() {
  auto func, end, target, inst, name, flags, xref;
  flags = SEARCH_DOWN | SEARCH_NEXT;
  func = GetFunctionAttr(ScreenEA(), FUNCATTR_START);
  if (func != -1) {
    name = Name(func);
    end = GetFunctionAttr(func, FUNCATTR_END);
    for (inst = func; inst   end; inst = FindCode(inst, flags)) {
    for (target = Rfirst(inst); target != BADADDR; target = Rnext(inst, target)) {
         xref = XrefType();
         if (xref == fl_CN || xref == fl_CF) {
           Message("%s calls %s from 0x%x\n", name, Name(target), inst);
         }
       }
    }
  }
  else {
    Warning("No function found at location %x", ScreenEA());
  }
}
在这个例子中，必须遍历函数中的每条指令。然后，对于每一条指令，我们必须遍历从它们发出的每一个交叉引用。我们仅仅对调用其他函数的交叉引用感兴趣，因此，我们必须检查XrefType
 的返回值，从中查找fl_CN
 或fl_CF
 类型的交叉引用。同样，这个特殊的解决方案只能处理包含相邻指令的函数。由于这段脚本已经遍历了每条指令的交叉引用，因此我们不需要进行太大的更改，就可以使用这段脚本进行基于流程的分析，而不是上面的基于地址的分析。
另外，交叉引用还可用于确定引用某个位置的每一个位置。例如，如果希望创建一个低成本的安全分析器，我们可能会有兴趣监视对 strcpy
 和sprint
 等函数的所有调用。
危险函数
通常，C 函数strcpy
 和sprintf
 被视为是危险函数，因为使用它们可以无限制地向目标缓冲区复制数据。虽然程序员可以通过仔细检查来源和目标缓冲区的大小，来达到安全使用这些函数的目的，但是，由于没有意识到这些函数的危险性，程序员往往会忽略这类检查。例如，strcp
 函数通过以下方式声明：
char *strcpy(char *dest, const char *source);
strcpy
 函数已定义的行为是将源缓冲区中直到第一个零终止符（包括该终止符）的所有字符复制到给定的目标缓冲区（dest
 ）中。问题在于，在运行时，没有办法确定数组的大小。在这种情况下，strcpy
 也就没有办法确定目标缓冲区的容量是否足以容纳从源缓冲区中复制的所有数据。这类未经检查的复制操作是造成缓冲区溢出漏洞的主要原因。
在下面的例子中，如代码清单 15-4 所示，我们逆向遍历对某个符号（相对于前一个例子中的“发出引用”）的所有交叉引用。
代码清单 15-4 枚举一个函数的调用方
#include   
static list_callers(bad_func) {  
   auto func, addr, xref, source;  
➊  func = LocByName(bad_func);  
   if (func == BADADDR) {  
      Warning("Sorry, %s not found in database", bad_func);  
   }  
   else {  
➋     for (addr = RfirstB(func); addr != BADADDR; addr = RnextB(func, addr)) {  
➌       xref = XrefType();  
➍       if (xref == fl_CN || xref == fl_CF) {  
➎           source = GetFunctionName(addr);  
➏           Message("%s is called from 0x%x in %s\n", bad_func, addr, source);  
         }  
      }  
   }  
}  
static main() {  
   list_callers("_strcpy");  
   list_callers("_sprintf");  
}
在这个例子中，LocByName
 ➊函数用于查找一个给定的（按名称）非法函数的地址。如果发现这个函数的地址，则执行一个循环➋，处理对这个非法函数的所有交叉引用。对于每一个交叉引用，如果确定了交叉引用类型➌为调用类型➍，则确定实施调用的函数的名称➎，并向用户显示这个名称➏。
需要注意的是，要正确确定一个导入函数的名称，你可能需要做出一些修改。具体来说，在ELF 可执行文件中［这种文件结合一个过程链接表（PLT ）和一个全局偏移量表（GOT）来处理共享库链接］，IDA 分配给导入函数的名称可能并不十分明确。例如，一个PLT 条目似乎名为_memcpy
 ，但实际上它叫做.memcpy
 ；IDA 用下划线替换了点，因为在IDA 名称中，点属于无效字符。使问题更加复杂的是，IDA 可能只是创建了一个名为memcpy
 的符号，该符号位于一个IDA 称为extern
 的节内。在尝试枚举对memcpy
 的交叉引用时，我们会对这个符号的PLT版本感兴趣，因为它是程序中其他函数调用的版本，因此也是所有交叉引用引用的版本。
15.5.4 枚举导出的函数
在第13 章中，我们讨论了使用 idsutils
 生成描述共享库内容的.ids 文件。我们提到，第一步是生成一个.idt 文件，它是包含库中每个导出函数的描述信息的文本文件。IDC 提供了一些函数，用于遍历共享库导出的函数。下面的脚本如代码清单 15-5 所示，可在IDA 打开一个共享库后生成一个.idt 文件。
代码清单 15-5 生成.idt 文件的脚本
#include   
static main() {  
   auto entryPoints, i, ord, addr, name, purged, file, fd;  
   file = AskFile(1, "*.idt", "Select IDT save file");  
   fd = fopen(file, "w");  
   entryPoints = GetEntryPointQty();  
   fprintf(fd, "ALIGNMENT 4\n");  
   fprintf(fd, "0 Name=%s\n", GetInputFile());  
   for (i = 0; i  entryPoints; i++) {  
      ord = GetEntryOrdinal(i);  
      if (ord == 0) continue;  
      addr = GetEntryPoint(ord);  
      if (ord == addr) {  
         continue; //entry point has no ordinal  
      }  
      name = Name(addr);  
      fprintf(fd, "%d Name=%s", ord, name);  
      purged = GetFunctionAttr(addr, FUNCATTR_ARGSIZE);  
      if (purged > 0) {  
         fprintf(fd, " Pascal=%d", purged);  
      }  
      fprintf(fd, "\n");  
   }  
}
这个脚本的输出保存在用户指定的文件中。这段脚本引入的新函数包括 GetEntryPointQty
 ，它返回库导出的符号的数量；GenEntryOrdinal
 ，它返回一个序号（库的导出表的索引）；GetEntryPoint
 ，它返回与一个导出函数关联的地址（该函数通过序号标识）；GetInputFile
 ，它返回加载到 IDA 中的文件的名称。
15.5.5 查找和标记函数参数
调用一个函数之前，在x86 二进制文件中，3.4之后的GCC版本一直使用 mov
 语句（而非push
 语句）将函数参数压入栈上。由于 IDA 的分析引擎依靠查找 push
 语句来确定函数调用中压入函数参数的位置，这给 IDA 的分析造成了一些困难（IDA 的更新版本可以更好地处理这种情况）。下面显示的是向栈压入参数时的 IDA 反汇编代码清单：
.text:08048894                 push    0               ; protocol
.text:08048896                 push    1               ; type  
.text:08048898                 push    2               ; domain  
.text:0804889A                 call    _socket
请注意每个反汇编行右侧的注释。只有在 IDA 认识到参数正被压入，且 IDA 知道被调用函数的签名时，这些注释才会显示。如果使用 mov
 语句将参数压入栈中，得到的反汇编代码清单提供的信息会更少，如下所示：
.text:080487AD                 mov     [esp+8], 0  
.text:080487B5                 mov     [esp+4], 1  
.text:080487BD                 mov     [esp], 2  
.text:080487C4                 call    _socket
可见，IDA 并没有认识到，在函数被调用之前，有3 个mov
 语句被用于为函数调用设置参数。因此，IDA 无法在反汇编代码清单中以自动注释的形式为我们提供更多信息。
在下面这种情形中，我们使用一个脚本恢复我们经常在反汇编代码清单中看到的信息。代码清单15-6 中的脚本努力自动识别为函数调用设置参数的指令。