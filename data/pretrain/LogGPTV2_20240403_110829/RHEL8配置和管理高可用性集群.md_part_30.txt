    `/etc/sysconfig/pacemaker`{.literal} 文件的未注释
    `PCMK_ipc_buffer`{.literal} 字段的值 `从`{.literal} 默认值增加到
    13396332 字节，如下所示：
    ``` literallayout
    PCMK_ipc_buffer=13396332
    ```
    若要应用此更改，请运行以下命令：
    ``` literallayout
    # systemctl restart pacemaker
    ```
:::
:::
:::
[]{#assembly_cluster-permissions-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_cluster-permissions-configuring-and-managing-high-availability-clusters.html#assembly_cluster-permissions-configuring-and-managing-high-availability-clusters}第 19 章 为 Pacemaker 集群设置用户权限 {.title}
:::
您可以为用户 `hacluster`{.literal} 以外的特定用户授予权限来管理
Pacemaker 集群。您可以为独立的用户授予两组权限：
::: itemizedlist
-   允许个人用户通过 Web UI 管理集群的权限，并运行通过网络连接到节点的
    `pcs`{.literal}
    命令。通过网络连接到节点的命令包括设置集群、从集群中添加或删除节点的命令。
-   本地用户允许只读或读写访问集群配置的权限。不需要通过网络连接的命令包括编辑集群配置的命令，比如那些创建资源和配置限制的命令。
:::
当分配了两组权限时，首先应用通过网络连接的命令的权限，然后应用在本地节点中编辑集群配置的权限。大多数
`pcs`{.literal} 命令不需要网络访问，在这种情况下，网络权限将不适用。
::: section
::: titlepage
# []{#assembly_cluster-permissions-configuring-and-managing-high-availability-clusters.html#proc_setting-cluster-access-over-network-cluster-permissions}设置通过网络访问节点的权限 {.title}
:::
要授予特定用户通过 Web UI 管理集群的权限，并运行通过网络连接到节点的
`pcs`{.literal} 命令，请将这些用户添加到组
`haclient`{.literal}。这必须在集群的每个节点中完成。
:::
::: section
::: titlepage
# []{#assembly_cluster-permissions-configuring-and-managing-high-availability-clusters.html#proc_setting-local-cluster-permissions-cluster-permissions}使用 ACL 设置本地权限 {.title}
:::
您可以使用 `pcs acl`{.literal}
命令为本地用户设置权限，以允许使用访问控制列表(ACL)对集群配置进行只读或读写访问。
默认情况下不启用 ACL。如果没有启用 ACLS，则作为所有节点上的
`haclient`{.literal}
组成员的任何用户都具有对群集配置的完整本地读/写访问权限，而不属于
`haclient`{.literal} 成员的用户则没有访问权限。但是，当启用 ACL
时，即使属于 `haclient`{.literal} 组成员的用户也只能访问 ACL
为该用户授予的内容。root 和 `hacluster`{.literal}
用户帐户始终对集群配置有完全访问权限，即使启用了 ACL。
为本地用户设置权限分为两个步骤：
::: orderedlist
1.  执行 `pcs acl role create…​`{.literal} 命令来创建一个
    [*角色，该角色*]{.emphasis} 定义该角色的权限。
2.  使用 `pcs acl user create 命令将您创建的`{.literal}
    角色分配给用户。如果您将多个角色分配给同一用户，则任何
    `拒绝`{.literal} 权限都将优先，然后 `写入`{.literal}，然后
    `读取`{.literal}。
:::
::: title
**流程**
:::
以下示例流程为名为 `rouser`{.literal}
的本地用户提供了对集群配置的只读权限。请注意，也可能限制对配置某些部分的访问。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
以根用户身份执行这个步骤或者保存所有配置更新到工作文件是很重要的，然后在完成后将其推送到活跃
CIB。否则，您可以锁定自己以阻止做任何进一步的更改。有关保存对工作文件的配置更新的详情，请参考
对
[工作文件的配置更改。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_pcs-operation-configuring-and-managing-high-availability-clusters#proc_configure-testfile-pcs-operation){.link}
:::
::: orderedlist
1.  此流程要求本地系统上 `rouser`{.literal} 用户存在，并且
    `rouser`{.literal} 是组 `haclient`{.literal} 的成员。
    ``` literallayout
    # adduser rouser
    # usermod -a -G haclient rouser
    ```
2.  使用 `pcs acl enable`{.literal} 命令启用 Pacemaker ACL。
    ``` literallayout
    # pcs acl enable
    ```
3.  为 cib 创建名为 `read-only`{.literal} 且具有只读权限的角色。
    ``` literallayout
    # pcs acl role create read-only description="Read access to cluster" read xpath /cib
    ```
4.  在 pcs ACL 系统中创建用户 `rouser`{.literal}，并为该用户分配
    `read-only`{.literal} 角色。
    ``` literallayout
    # pcs acl user create rouser read-only
    ```
5.  查看当前的 ACL。
    ``` literallayout
    # pcs acl
    User: rouser
      Roles: read-only
    Role: read-only
      Description: Read access to cluster
      Permission: read xpath /cib (read-only-read)
    ```
6.  在 `rouser`{.literal} 将运行 `pcs`{.literal} 命令的每个节点上，以
    `rouser`{.literal} 身份登录，再对本地 `pcsd`{.literal}
    服务进行身份验证。这是以 ACL 用户身份运行某些 `pcs`{.literal}
    命令（如 `pcs status`{.literal} ）所必需的。
    ``` literallayout
    [rouser ~]$ pcs client local-auth
    ```
:::
:::
:::
[]{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters}第 20 章 资源监控操作 {.title}
:::
为确保资源健康，您可以在资源的定义中添加监控操作。如果您没有为资源指定监控操作，默认情况下，pc
`s 命令`{.literal}
将创建一个监控操作，间隔由资源代理决定。如果资源代理不提供默认的监控间隔，pcs
命令将创建监控操作，间隔为 60 秒。
下表总结了资源监控操作的属性：
::: table
[]{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#idm140696017350208}
**表 20.1. 操作的属性**
::: table-contents
+----------------------+----------------------------------------------+
| 项                   | 描述                                         |
+:=====================+:=============================================+
| `id`{.literal}       | 操作的唯一名称。系统在配置操作时分配这个值。 |
+----------------------+----------------------------------------------+
| `name`{.literal}     | 要执行的操作。常见值：                       |
|                      | `monitor`{.l                                 |
|                      | iteral}、`start`{.literal}、`stop`{.literal} |
+----------------------+----------------------------------------------+
| `interval`{.literal} | 如果设置为非零值，则会                       |
|                      | 以这个频率（以秒为单位）重复操作。只有在操作 |
|                      | `name`{.literal} 设为 `monitor`{.literal}    |
|                      | 时，                                         |
|                      | 非零值才有意义。资源启动后，将立即执行重复的 |
|                      | monitor                                      |
|                      | 操作，并在上一个监控动作完成后调度后续的     |
|                      | monitor 操作。例如，如果 monitor 操作的      |
|                      | `interval=20s`{.literal} 在 01:00:00         |
|                      | 执行，则下一次 monitor 操作不会发生在        |
|                      | 01:00:20 ，而是在第一个 monitor 操作完成后的 |
|                      | 20 秒发生。                                  |
|                      |                                              |
|                      | 如果设置为零（默认值为零），则此             |
|                      | 参数允许您为集群创建的操作提供值。例如，如果 |
|                      | `interval`{.literal} 设为零，则操作的        |
|                      | `name`{.literal} 设置为                      |
|                      | `start`{.literal}，`timeout`{.literal}       |
|                      | 值设为 40，则 Pacemaker 在启动此资源时将使用 |
|                      | 40 秒超时。带有零间隔的 `monitor`{.literal}  |
|                      | 操作允许您为 Pacemaker 在启动时的探测设置    |
|                      | `timeout`{.lite                              |
|                      | ral}/`on-fail`{.literal}/`enabled`{.literal} |
|                      | 值，                                         |
|                      | 以便在不需要默认值时获取所有资源的当前状态。 |
+----------------------+----------------------------------------------+
| `timeout`{.literal}  | 如果在此参数设置的时间内操作没有             |
|                      | 完成，操作会被终止并认为它失败。默认值是使用 |
|                      | `pcs resource op defaults`{.literal}         |
|                      | 命令设置的 `超时`{.literal}                  |
|                      | 值，如果未设置，则为 20                      |
|                      | 秒。如果您发现您的系统                       |
|                      | 所包含的资源比系统允许执行操作的时间更长（如 |
|                      | `start`{.literal}、`stop`{.literal} 或       |
|                      | `monitor`{.literal}），请调查其原因，如果    |
|                      | 您预计需要较长的执行时间，则可以增加这个值。 |
|                      |                                              |
|                      | `timeout`{.literal}                          |
|                      | 值不是任何类型的延迟，如果操作在超时时       |
|                      | 间用完后返回，则集群也不会等待整个超时时间。 |
+----------------------+----------------------------------------------+
| `on-fail`{.literal}  | 在这个操作失败时要执行的操作。允许的值：     |
|                      |                                              |
|                      | \* `ignore`{.literal} - 假装资源没有失败     |
|                      |                                              |
|                      | \* `block`{.literal} -                       |
|                      | 不对资源执行任何进一步的操作                 |
|                      |                                              |
|                      | \* `stop`{.literal} -                        |
|                      | 停止资源，且不在其它地方启动它               |
|                      |                                              |
|                      | \* `restart`{.literal} -                     |
|                      | 停止资源，并重新启动它（可能在不同的节点上） |
|                      |                                              |
|                      | \* `fence`{.literal} - STONITH               |
|                      | 资源失败的节点                               |
|                      |                                              |
|                      | \* `standby`{.literal} - 将                  |
|                      | [*所有*]{.emphasis} 资源从资源失败的节点移出 |
|                      |                                              |
|                      | \* `migrate`{.literal} -                     |
|                      | 如果                                         |
|                      | 可能的话，将资源迁移到另一个节点。这等同于将 |
|                      | `migration-threshold`{.literal}              |
|                      | 资源元选项设置为 1。                         |
|                      |                                              |
|                      | \* `demote`{.literal} - 当资源的             |
|                      | `提升`{.literal}                             |
|                      | 操作失败时，资源会被降级但不会被完全停止。当 |
|                      | `monitor`{.literal} 操作失败时，如果         |
|                      | `间隔`{.literal} 设置为非零值，并且          |
|                      | `role`{.literal} 设置为                      |
|                      | `Maste                                       |
|                      | r`{.literal}，资源将会降级，但不会完全停止。 |
|                      |                                              |
|                      | 当启用了 STONITH 时，`stop`{.literal}        |
|                      | 操作的默认值为 `fence`{.literal}，否则为     |
|                      | `block`{.literal}。所有其他操作默认为        |
|                      | `restart`{.literal}。                        |
+----------------------+----------------------------------------------+
| `enabled`{.literal}  | 如果为                                       |
|                      | `false`                                      |
|                      | {.literal}，则该操作被视为不存在。允许的值： |
|                      | `true`{.literal},`false`{.literal}           |
+----------------------+----------------------------------------------+
:::
:::
::: section
::: titlepage
# []{#assembly_resource-monitoring-operations-configuring-and-managing-high-availability-clusters.html#proc_configuring-resource-monitoring-operations-resource-monitoring-operations}配置资源监控操作 {.title}
:::
您可以使用以下命令在创建资源时配置监控操作。
``` literallayout
pcs resource create resource_id standard:provider:type|type [resource_options] [op operation_action operation_options [operation_type operation_options]...]
```
例如，以下命令创建了一个带有监控操作的 `IPaddr2`{.literal}
资源：新资源称为 `VirtualIP`{.literal}，`eth2`{.literal} 的 IP 地址为
192.168.0.99，子网掩码为 24。每 30 秒将执行一次监控操作。
``` literallayout
# pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip=192.168.0.99 cidr_netmask=24 nic=eth2 op monitor interval=30s
```
另外，您可以使用以下命令在现有资源中添加监控操作。
``` literallayout
pcs resource op add resource_id operation_action [operation_properties]
```
使用以下命令删除配置的资源操作。
``` literallayout
pcs resource op remove resource_id operation_name operation_properties
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您必须指定准确的操作属性才能正确地删除现有的操作。
:::
要更改监控选项的值，您可以更新资源。例如，您可以使用以下命令创建
`VirtualIP`{.literal} ：