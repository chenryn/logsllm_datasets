While in this paper we do not evaluate the data-flow complexity of BPEL proc-
esses, the study of data-flow complexity involves the analysis of XML Schema data
types and the analysis of input and output messages of a Web service (i.e., operations).
3.2 Web processes
While in some cases Web services may be utilized in an isolated form, it is natural to
expect that Web services will be integrated as part of Web processes or workflows.
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
The most prominent solution to describe Web processes is WS-BPEL (Process Execu-
tion Language for Web Services) (WS-BEPL 2005). BPEL provides a language for
the formal specification of business processes to facilitate the automated process inte-
gration in intra-organization, inter-organization, and the business-to-business settings.
BPEL resulted from the combination of WSFL (Leymann 2001) and XLANG (Thatte
2001) languages and uses Web services (Christensen, Curbera et al. 2001; Chinnici,
Gudgin et al. 2003) as its external communication mechanism and XML Schema
(XMLSchema 2005) for its data model.
BPEL is a XML-based language for describing the logic to control and coordinate
Web services participating in a process flow. It directly addresses business process
challenges such as control flow (branch, loop, and parallel), manipulation of data
between Web services, asynchronous conversations and correlation, long-running
nested units of work, faults, and compensation.
A Web process with a high control-flow and data-flow complexity may indicate a
higher probability of failure (in software engineering it has been found that program
modules with high complexity indices have a higher frequency of failures), increase
maintenance costs, and indicate poor understandability.
4 Control-flow complexity
From our perspective there are two independent approaches to develop a CFC metric
to analyze business processes: a top-down and a bottom-up approach. The top-down
approach starts by formulating a set of general/generic metrics common to various
business process languages (such as BPEL, BPMN (BPMN 2005), Meteor (METEOR
2006), etc). These metrics are then applied to specific business process languages to
evaluate their applicability and if necessary missing control flow elements can be
added to the general metric. In the second approach, i.e. the bottom-up approach, we
start by analyzing specific business process languages and formulate specific CFC
metrics. Once a reasonable set of business process languages have been analyzed it is
then possible to devise general/generic metrics that can be suitably applied to the
business process languages analyzed. In our work, we follow the second approach. We
already have analyzed and derived specific metrics to three business process modeling
languages (Cardoso 2005; Cardoso 2005; Cardoso 2005; Cardoso 2005). A future step
will be to aggregate the commonalities of the various different metrics obtained and
devise a generic CFC complexity model.
4.1 The CFC metric
A BPEL process definition contains the process logic—the steps that will be followed
and outlines which Web services will be executed to achieve a goal or objective. Each
step is called an activity. A process always starts with the process element and relates
a number of activities. In the process element there has to be one activity specified. In
BPEL a process is defined as follows:
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
...
activity
The formal definition of a process P is P = {a}, where ‘a’ is an activity. The con-
trol-flow complexity of a BPEL process P is simply the complexity of its activity:
CFCBPEL (P)=CFCBPEL(a),a∈P
Process Act
In the following sections we will show how to calculate the complexity of the vari-
ous types of activities that may be associated with a process.
4.2 Basic activities
BPEL supports two categories of activities: basic and structured activities. Basic ac-
tivities represent primitive constructs and are used for common tasks. Basic activities
can be further classified into three categories: (1) activities for calling and receiving
messages from Web services (e.g. , , and ), (2) activities
for controlling a process (e.g.  and ), (3) activities for manipulating
data (e.g. ). The behavior of each basic activity is as follows:
• . Invoking a web service
• . Waiting for the client to invoke the business process through send-
ing a message
• . Generating a response for synchronous operations
• . Manipulating data variables
• . Signaling faults and exceptions
• . Waiting for some time
• . Terminating the entire process
• . An activity that does not do anything
The , , , and  activities are called message activi-
ties since they communicate with the outside world. As an example, let us see the use
of the  activity:
This activity waits for an incoming message. This element allows a business proc-
ess to do a blocking wait for a particular message to arrive. In our example, the activ-
ity is used to wait for the Registrar’s office answer after registering a student using the
registration system. Since basic activities do not involve an interaction or relationship
with other activities, we assign to all of them a complexity value of 1 (one).
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
CFCBPEL(a)=1,a is a basic activity
Act
In our perspective, assigning a value to a variable, receiving or replying to a mes-
sage, or terminating a process has the same complexity from a control-flow perspec-
tive. This is because the control-flow complexity captures the control-flow in a proc-
ess and basic activities do not include any control-flow semantics. This fact will be-
come perceptible when we study the complexity of structured activities.
4.2 Structured activities
Structured activities offer a way to structure a BPEL process. Structured activities are
more complex and provide simple programmatic control over which steps will be
executed in a business process. Structured activities include  statements,
 loops, parallelism constructs such as , and sequential constructs such
as . Since the control-flow complexity of each structured activity differs,
we need to analyze each activity individually to account for the semantics and particu-
larity of their behavior.
• . Structures a set of activities to be invoked in an ordered se-
quence
• . Provides a construct to choose one activity among a collection of
activities, i.e. it implements branches
• . Defines the notion of loops. This construct executes an activity re-
peatedly until its associated Boolean condition is no longer true
• . Enables the concurrent execution of activities. It defines a set of ac-
tivities that will be invoked in parallel
• . Waits on a set of events for one of them to occur and executes a cor-
responding activity. It allows the selection of one of a number of alternative
paths
Structured activities can contain a series of other activities that can be either struc-
tured or basic activities. Structured activities prescribe the control-flow of a business
process. The control-flow complexity for each structured activity is calculated as fol-
lows:
Sequence. A BPEL sequence activity contains a list of activities which are to be exe-
cuted in lexical order, i.e. the order they are placed within the sequence element (i.e.
). The sequence activity stops when all activities within it are done.
activity+
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
As illustrated in the previous fragment, a sequence has one or more activity. The
formal definition of a sequence S is S = {a , a , ..., a }, where a, i∈{1,...,n}, are activi-
1 2 n i
ties. The control-flow complexity of a sequence of activities is calculated has follows:
CFCBPEL(S)=∑
CFCBPEL(a),S is a sequence
Act Act
a∈S
From our viewpoint, the control-flow involved in a sequence of activities is mar-
ginal because all the activities are invoked in sequence. Therefore, we express this fact
by simply adding the control-flow complexity of the activities of a sequence.
Switch. A BPEL switch structured activity is a construct for introducing conditions
based on the evaluation of a Boolean expression. According to (Aalst, Barros et al.
2000), this BPEL construct can be classified as an exclusive choice. The exclusive
choice structure defines a point in the process where a certain flow is taken, based on
a decision. Most programming languages, such as C, Java, and Perl provide exclusive
choice structures. In BPEL the representation of a switch activity is the following:
elements
+
activity
?
activity
As illustrated in the previous fragment, the  activity consists of an ordered
list of conditions specified by a  element followed by one optional otherwise
element. The activity specified in a  element is executed when the Boolean
expression associated with the case is true. When none of the cases are true, the activ-
ity in the  element is executed. The formal definition of a switch Sw is Sw
= {a , a , ..., a }, where a, i∈{1,...,n}, are activities. The control-flow complexity of a
1 2 n i
switch of activities is calculated has follows:
CFCBPEL(Sw)=n* ∑ CFCBPEL(a),Sw is a switch, n=|Sw|
Act Act
a∈Sw
In our perspective, the control-flow introduced by a switch activity is significant.
The switch with ‘n’ conditional activities leads to the exclusive execution of ‘n’ dis-
tinct activities. The control-flow complexity metric for the switch is calculated by
multiplying the number of activities in a switch (denoted as |Sw|) by the sum of the
control-flow complexity of all the activities. The sum of the control-flow complexity
of all the activities is multiplied by |Sw| to express the effect that Boolean expression
(conditions) have on the complexity of an ordered set of activities. The complexity is
linearly dependent on the number of Boolean expressions.
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
While. The while structured activity offers the possibility to execute an activity in an
iterative way. The activity in a while structure is executed as long as the Boolean
expression in the condition attribute is true. This construct is also implemented by
most programming languages. BPEL represents a while activity in the following way:
activity
The formal definition of a while W is W = {a}, where ‘a’ is an activity. The con-
trol-flow complexity of a while is calculated has follows:
CFCBPEL(W)=log (CFCBPEL(a)+2)*CFCBPEL(a),
Act 2 Act Act
W is a while structured activity, a is an activity, a∈W
In our perspective, the control-flow introduced by a while activity is directly de-
pendent on the control-flow complexity of the activity affected by the while. This
means that the more activities covered by a while, the greater the complexity. For
example, if a while element is applied to a basic activity, such a , the control-
flow complexity is log (1+2)*1 = 1,6. This makes sense since the complexity of the
2
basic activity  is 1 and the  increases the overall local complexity. If
for example, the while element is applied to a sequence composed of two basic activi-
ties, the control-flow complexity is log (2+2)*2 = 4. Figure 2 shows a graph that de-
2
picts the increase of complexity of a while activity applied to a sequence activity com-
posed of a variable number of basic activities ranging from 1 to 20. The control-flow
complexity varies linearly with the number of basic activities in the sequence.
BPEL While CFC
100
75
50 CFC(W) CFC
25
0