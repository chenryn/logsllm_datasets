title:CANVuS: Context-Aware Network Vulnerability Scanning
author:Yunjing Xu and
Michael Bailey and
Eric Vander Weele and
Farnam Jahanian
CANVuS: Context-Aware Network Vulnerability
Scanning
Yunjing Xu, Michael Bailey, Eric Vander Weele, and Farnam Jahanian
Computer Science and Engineering, University of Michigan
{yunjing,mibailey,ericvw,farnam}@eecs.umich.edu
2260 Hayward St., Ann Arbor, Michigan 48109, USA
Abstract. Enterprise networks face a variety of threats including worms, viruses,
and DDoS attacks. Development of effective defenses against these threats re-
quires accurate inventories of network devices and the services they are running.
Traditional vulnerability scanning systems meet these requirements by periodi-
cally probing target networks to discover hosts and the services they are running.
This polling-based model of vulnerability scanning suffers from two problems
that limit its effectiveness—wasted network resources and detection latency that
leads to stale data. We argue that these limitations stem primarily from the use
of time as the scanning decision variable. To mitigate these problems, we in-
stead advocate for an event-driven approach that decides when to scan based on
changes in the network context—an instantaneous view of the host and network
state. In this paper, we propose an architecture for building network context for
enterprise security applications by using existing passive data sources and com-
mon network formats. Using this architecture, we built CANVuS, a context-aware
network vulnerability scanning system that triggers scanning operations based on
changes indicated by network activities. Experimental results show that this ap-
proach outperforms the existing models in timeliness and consumes much fewer
network resources.
1 Introduction
Users in modern enterprise networks are assailed with spyware that snoops on their
conﬁdential information, spam that ﬂoods their e-mail accounts, and phishing scams
that steal their identities. Network operators, whose goal is to protect these users and
the enterprise’s resources, make use of intrusion detection/prevention systems [22, 23],
ﬁrewalls, and antivirus software to defend against these attacks. To be effective, the
deployment and conﬁguration of these systems require accurate information about the
devices in the network and the services they are running. While both passive network-
based and host-based methods for building these inventories exist, the most prevalent
method of assessment continues to be active network-based vulnerability scanning. In
this model, a small number of scanners enumerate the potential hosts in a network by
applying a variety of tests to determine what applications and versions are being run
and whether these services are vulnerable. For very large networks, scanning can take a
signiﬁcant amount of time (e.g., several weeks) and consume a large amount of network
resources (e.g., Mbps). As a result, network operators frequently choose to run these
scans only periodically.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 138–157, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
CANVuS: Context-Aware Network Vulnerability Scanning
139
Unfortunately, the dynamics of a hosts’ mobility, availability and service conﬁgura-
tions exacerbate the problem of when vulnerability scanning should take place. We de-
ﬁne the knowledge of these changes as the context of the network. A context insensitive
model for vulnerability scanning suffers from wasted resources (e.g., time, bandwidth,
etc.) and the observation of stale data. For example, often the network operators who are
responsible for protecting the network do not have full control over the placement and
availability of hosts in the network. Addresses may be allocated to departments within
the organization who use the addresses in different ways, leaving the network operators
with little insight into what addresses are allocated or unallocated. Furthermore, these
departments themselves often have little control over how their users make use of these
resources and even known, allocated IP addresses and hosts may exhibit availability
patterns that are difﬁcult to predict. As a result, network operators spend resources and
time scanning IP addresses that have not been allocated or for hosts that are unavailable.
In addition, network operators have limited visibility into what services are being run
on these hosts because they are typically managed by different administrators. Without
the knowledge about the context, the accuracy of detecting these services and their con-
ﬁgurations is bound by the frequency of scanning. As a result, any change that occurs
since the last scan will obviously not be visible until the next scanning iteration. The
rapid occurrence of new, active exploits, announced vulnerabilities, and available soft-
ware patches, along with the dynamic nature of how users utilize the network, suggest
that even small drifts in these inventories may result in a large security impact for the
organization. Furthermore, the assumption that services remain relatively static over a
short period of time is increasingly ﬂawed. The emergence of peer-to-peer, voice-over-
ip, messaging, and entertainment applications have led to a large number of dynamic
services on these hosts. Periodically scanning, by its very nature, only captures a snap-
shot of those services that are active at an instant in time and it may miss many other
important services.
To solve these problems, we introduce a context-aware architecture that provides a
uniform view of network states and their changes. The architecture makes use of exist-
ing sources of host behavior across a wide variety of network levels including the link,
network, transport, and application layers. Diverse data formats such as syslog, SNMP,
and Netﬂow representing activities at these layers are used to generate abstract views
that represent important network activities (e.g., a host connecting to the network, a new
subnet allocated, a new binary in use). Instead of scanning all the hosts in the network at
the same frequency, periodic scanning in our architecture selectively scans hosts based
on their availability patterns. Moreover, these abstract views are used to create events
about host conﬁguration changes (e.g., users connecting to a new service, downloads
from update sites, and reboots) to trigger active scanning. Thus, this approach is inher-
ently interrupt driven and this event-based model, on top of the context-aware archi-
tecture, provides more timely and accurate results. In contrast, scanning periodically
at a higher frequency would be the alternative, but would require substantially more
resources.
To demonstrate the effectiveness of this architecture, a prototype system is con-
structed and deployed in a large academic network consisting of several thousand ac-
tive hosts distributed across a /16 and a /17 network. Evaluation of this architecture
140
Y. Xu et al.
over a 16-day period in March of 2010 illustrates that CANVuS outperforms existing
techniques in detection latency and accuracy with a much fewer number of scans. The
experimental results also reveal several problems of the current methodology including
the lack of ground truth and the limited event types, both of which will be addressed in
future work.
The rest of this paper is organized as follows: § 2 discusses research papers and
commercial products that relate to enterprise network security, especially vulnerabil-
ity assessment, and how our system differs from existing solutions. § 3 discusses our
year-long evaluation of the university’s scanning activities that lead to our current re-
search. § 4 has an in-depth description of our context-aware architecture. Details of the
CANVuS system implementation on this architecture is presented in § 5. § 6 describes
the evaluation of CANVuS and the context-aware architecture. § 7 discusses the risks
involved in this project and our mitigation efforts. The limitations and future work are
explored in § 8. Finally, § 9 concludes the paper.
2 Related Work
A variety of security software solutions and appliances have been proposed to defend
against the threats faced by enterprise networks. These fall roughly into those focused
on real-time, reactive detection and prevention and those based on proactive risk iden-
tiﬁcation and policy enforcement. Network-based, real-time detection and prevention
solutions, such as intrusion detection systems [22, 23] are deployed at natural aggrega-
tion points in the network to detect or stop attacks buried in network packets by applying
known signatures for malicious trafﬁc, or by identifying abnormal network behaviors.
Host-based antivirus software [32, 18] is meant to protect hosts from being infected
by malicious programs before their binaries are executed and, like network-based ap-
proaches, may do so either through static signatures or anomaly detection.
In contrast, proactive approaches to network security seek to reason about risks be-
fore an attack event happens and to limit exposure to threats. To accomplish this form
of proactive assessment and enforcement, these approaches require accurate views of
the hosts, their locations, and the services running on them. One common way of de-
termining this information is through the use of a network-based vulnerability scanner.
Active network-based vulnerability scanners (e.g., Nessus [25], Retina [11]) operate
by sending crafted packets to hosts to inventory the targets, providing ﬁngerprints of
the host operating systems and the host network services. Conversely, passive scan-
ners [26, 31, 8, 17] ﬁngerprint software versions by auditing their network trafﬁc and
matching them with the signature database. They can continuously monitor target net-
works and are less intrusive to the targets. However, their scope is limited by the trafﬁc
they have access to and, as a result, passive scanners are usually deployed alongside ac-
tive scanners. In addition to these generic scanners, there has been a great deal of recent
work in specialized scanners that evaluate the security of popular applications such as
web applications [15, 6].
Once the accurate inventory and service data is acquired, it can be used for a vari-
ety of tasks. For example, ﬁrewalls [9] are available to both networks and end hosts to
enforce administrator polices, to block unwanted services [1, 2], and to prioritize the
CANVuS: Context-Aware Network Vulnerability Scanning
141
patching of vulnerable services [19, 7] before they are exploited. Often this reasoning
makes use of attack graph representations of this inventory and service data to make
their placement and conﬁguration services. An attack graph is a graphical represen-
tation of all possible ways to compromise hosts in a network by taking advantage of
its vulnerabilities. Sheyner et al. did the early work of attack graph generation using a
model checking approach [27]. Subsequently, several improvements [5,21,20,13] have
been proposed to solve the scalability problem of the original attack graph approach.
Another improvement is the introduction of link analysis methods in attack graphs to
automate the analysis process [16, 24].
CANVuS varies from this existing work in that it does not provide new active or
passive tests to determine a host conﬁguration, nor does it propose a new representation
or application of the host and service inventory data. Rather, the proposed architec-
ture seeks to provide more up-to-date data with fewer costs than existing approaches
by leveraging network context. In this sense, our work is relevant to other work in
utilizing context to improve the performance and accuracy of a variety of security tech-
niques [29]. For example, Sinha et al. leveraged the characteristics of the network work-
load to improve the performance of IDSes [30] and showed that building honeypots that
are consistent with the network could improve the resilience of honeypots to attacks and
improve their visibility [28]. Notions of managing numerous remote probing devices
through a middleware layer was explored, though only in the context of IDSes, in the
Broccoli system [14]. Cooke et al. built the Dark Oracle [10] that closely resembles
the work in this paper in terms of methodology by using context-aware information to
provide a database of network state, but it addressed primarily allocation information.
Allman et al. proposed a general framework that also uses a trigger-based approach
to do reactive network measurement [4]. While this is similar to our work in terms of
the high-level idea, it tries to solve a different problem, and it contains no implemen-
tation or evaluation to demonstrate the effectiveness of their approach. More generally,
to address the problems of comprehensive network visibility, a set of guidelines were
outlined in [3] for three broad categories — basic functionality, handling and stor-
age of data, and crucial capabilities. To our knowledge, no work has fully addressed
all of these guidelines, although some work has been attempted to address the storage
and querying of this ubiquitous visibility over time and space [34]. Our work makes
progress towards comprehensive network visibility with the goal of creating a ﬂexible,
yet efﬁcient uniﬁed network visibility system for CANVuS.
3 Motivation
The motivation for this work derives directly from our interactions with the University
of Michigan’s ofﬁce of Information and Infrastructure Assurance (IIA) [33]. This group
is tasked with: “(i) Facilitating campus-wide incident response activities, (ii) Providing
services such as security assessments and consultation, network scans, education and
training, and (iii) Managing IT security issues at the university level.” As part of these
roles, this ofﬁce engages in quarterly scans of seven /16 subnets belonging to the Uni-
versity of Michigan. As part of an effort to evaluate this process, we assisted the IIA
staff in analyzing several quarterly scans of this space by using both Nessus [25] and
142
Y. Xu et al.
Retina [11]. The results of this analysis were kept private to assist the security operation
staff, but we were struck by several poignant observations from the experience:
– The scans generally take one and a half to two weeks to complete.
– In an effort to reduce the amount of time spent scanning, a signiﬁcant number of
vulnerability signatures present in the tools were not used.
– With the exception of a handful of departments, the scans of the IP space proceeded
without knowledge of sub allocations in each department, scanning large blocks of
space in their entirety.
– Due to the impact of work day availability patterns, the operators schedule the scans
to occur only during working hours (i.e., 8 AM to 5 PM, Monday through Friday).
– Only 85% of the IP addresses in each scan were shared, the other 15% were unique.
– Only 85% of the total unique vulnerabilities discovered were present in both scans,
with 15% of each scan’s vulnerabilities appearing only in that scan.
– Only 56% of the conﬁgurations between two scans were unchanged for those IPs
in common between the scans.
While surprising to us, the IIA staff were keenly aware of the dynamic nature of their
network and the overhead imposed by the scanning activities. Although they deployed
several stop-gap measures to deal with the effect of this dynamic network context (e.g.,
scan during work hours), these operators simply lacked the platform with which to
achieve network-wide visibility.
4 Architecture and Design
In this section, we describe a context-aware architecture that provides a uniform view
of network states and their changes for security applications. The architecture consists
of three major components. The ﬁrst component is a set of network monitors that are
distributed over many network devices. The list of network devices to monitor could
include switches, routers, and servers, but the architecture allows for other similar de-
vices as well. The second major architectural component is a Context Manager, which
converts data from network monitors to a network state database. The third and ﬁnal
component is the network state database that provides a uniform model for context-
aware vulnerability scanning. Other context-aware applications may be built upon this
database as well. A high-level diagram with the major components of the architecture
is illustrated in Figure 1.
The design of this context-aware architecture is informed strongly by the design
principles outlined in Allman et al. [3], especially those basic guidelines of scope, in-
cremental deployability, and operational realities. We aim for a system that built for
an individual enterprise and utilizes existing sources of data collected from infras-
tructure and services already deployed in the network. We utilize the existing com-
mon data formats (e.g., syslog, SNMP, Netﬂow) and store and access this data through
common, extensible mechanisms (e.g., databases, SQL). Where necessary, we support
probe-based mechanisms for extracting similar data from network data streams in the
event that existing hardware is overloaded or does not support data export. With re-
spect to the outlined data-oriented goals, we opt to focus on exploring data breadth over
CANVuS: Context-Aware Network Vulnerability Scanning
143
Active
Scanning
D
e
v
c
e
s
i
I
n
f
r
a
s
t
r
u
c
t
u
r
e
S
e
r
v
c
e
s
i
t
N
e
w
o
r
k
P
r
o
b
e
s
t
N
e
w
o
r
k
Switches
Routers
Access Point
N
e
t
ﬂ
o
w
S
N
M
P
S
y
s
o
g
l
DNS Server
DHCP Server
Kerberos Server
Bro
S
y
s
o
g
l
S
y
s
o
g
l
Context Aware Architecture
C
o
n