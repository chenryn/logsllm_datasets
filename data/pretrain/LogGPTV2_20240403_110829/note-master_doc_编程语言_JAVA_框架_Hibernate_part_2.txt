```
```sql
-- 条件查询
FROM Book where bauthor='unknown'
-- 排序
FROM Book ORDER BY bid DESC
-- 投影
SELECT bname FROM Book
-- 投影封装对象
SELECT new Book(bname) FROM Book
-- 连接Book与Author
FROM Book b INNER JOIN fetch b.authors
```
```java
// 聚合函数
String hql = "SELECT max(bid) FROM Book";
Query query = session.createQuery(hql);
Number number = (Number) query.uniqueResult();
```
```java
// 占位符
String hql = "FROM Book where bauthor=:name";
Query query = session.createQuery(hql,Book.class);
query.setParameter("name","unknown");
```
```java
// 分页 第一页，每页10条
query.setFirstResult(0);
query.setMaxResults(10);
```
### Criteria查询(单表条件查询)
```java
Criteria criteria = session.createCriteria(Book.class);
System.out.println(criteria.list());
```
```java
// 根据ID查询
criteria.add(Restrictions.idEq(2));
// 条件查询
criteria.add(Restrictions.eq("bname","clean code"));
// 排序
criteria.addOrder(Order.asc("bname"));
// 聚合函数
criteria.setProjection(Projections.max("bid"));
```
#### 离线查询
```java
DetachedCriteria criteria = DetachedCriteria.forClass(Book.class);
criteria.add(Restrictions.eq("bname","clean code"));
List list = criteria.getExecutableCriteria(session).list();
```
### 原生sql查询
```java
String sql = "SELECT * FROM tb_book WHERE bid = ?";
NativeQuery query = session.createSQLQuery(sql).addEntity(Book.class);
query.setParameter(1,1);
```
## 多表查询
### 一对多|多对一
```xml
```
```xml
```
- 操作
```java
// 新增
Book book = new Book();
book.setBname("java");
Author author1 = new Author();
author1.setName("author1");
author1.setBook(book);
Author author2 = new Author();
author2.setName("author2");
author2.setBook(book);
book.setAuthors(Set.of(author1,author2));
session.save(book);
session.save(author1);
session.save(author2);
// 追加一个多
Book book = session.get(Book.class,1);
Author author3 = new Author();
author3.setName("author3");
author3.setBook(book);
book.getAuthors().add(author3);
session.save(author3);
// 移除一个多
Book book = session.get(Book.class,1);
book.getAuthors().removeIf(a-> "author1".equals(a.getName()));
```
- 级联操作
```xml
```
```java
Book book = new Book();
book.setBname("python");
Author author1 = new Author();
author1.setName("authorx");
author1.setBook(book);
book.setAuthors(Set.of(author1));
session.save(book);
```
### 多对多
```xml
```
- 操作
```java
Book book1 = new Book();
book1.setBname("clean code");
Book book2 = new Book();
book2.setBname("clean coder");
Author author1 = new Author();
author1.setName("martin flower");
Author author2 = new Author();
author2.setName("robert c");
book1.setAuthors(Set.of(author1,author2));
book2.setAuthors(Set.of(author1,author2));
author1.setBook(Set.of(book1,book2));
author2.setBook(Set.of(book1,book2));
session.save(book1);
session.save(book2);
session.save(author1);
session.save(author2);
```
## 加载策略
### 类级别
```java
// 立即加载
Book book = session.get(Book.class, 1);
// 延迟加载 使用时才去数据库查询（动态代理）
// 使用懒加载时要确保,调用属性加载数据时,session还是打开的.不然会抛出异常
Book book = session.load(Book.class, 2);
```
```xml
```
### 关联级别
- 集合
```xml
```
- 关联属性
为了提高效率.fetch的选择上应选择select. lazy的取值应选择 true. 全部使用默认值.
### 批量抓取
- batch-size