
	



	
	

	

	
	
	
Figure 1: A typical tiered service architecture.
	


 

 	


















	
	
Figure 2: High-level overview of the Passe runtime.
messages of users that are not logged in. More speciÔ¨Åcally,
Passe preserves data-Ô¨Çow dependencies on database query
arguments and control-Ô¨Çow dependencies between queries.
If, during a normal execution, a particular database query
argument is always the result of a prior database query or
the user‚Äôs authenticated credentials, then even in the case of
a compromised view, that argument must still come from
that source.
III. PASSE DESIGN
The design of Passe‚Äôs runtime accommodates the typical
tiered, scale-out architecture of most client-facing datacenter
services,
illustrated in Figure 1. In this architecture, a
request is forwarded to an appropriate machine in the service
tier. The service tier (also called the application tier) is
comprised of multiple machines, possibly running the same
application code, which access shared storage through the
storage tier. The storage tier is comprised of possibly many
machines, handling separate, potentially replicated partitions
(or ‚Äúshards‚Äù) of the shared storage.
In Passe‚Äôs runtime (Fig. 2), applications are decomposed
into isolated views, running in separate sandboxed environ-
ments. This can be achieved through OS-level mechanisms,
such as AppArmor [10], or by running views on entirely
separate machines. Each of these views is responsible for
handling speciÔ¨Åc requests which a dispatcher will forward.
Passe introduces a stateless proxy between the service and
136
storage tiers which interposes on data queries. This trusted
proxy approves or denies data queries based on a set of
constraints. These constraints are applied to the supplied
queries and a supplied token, ensuring that application data
policies remain in effect even during a compromise of the
application.
Passe provides an analysis system which monitors the
‚Äúnormal‚Äù execution of applications, and during this, learns the
data-Ô¨Çow and control-Ô¨Çow dependencies of the application.
This learning process occurs during an explicit
testing
or closed deployment phase, during which we assume
components are not compromised.
A. Interacting with a Shared Data Store
Passe provides data isolation between application views.
If two views never share data through the shared data store,
then the compromise of one view should not affect the data
of the other. While secure, strict isolation greatly limits the
type of applications one can build‚Äîapplications frequently
need to share data to provide basic functionality. For example,
sensitive information in a database‚Äôs user table may be shared
between nearly all of an application‚Äôs components.
In Passe, we allow application views to interact with a
shared data store through a query interface. Conceptually,
an unbound query (as we will see later, in SQL these are
query strings) has a set of arguments. Normally, when an
application issues a query, it supplies an unbound query and
a tuple of argument values. For example:
result = fetchUserMessage (uname = "Bob")
In order to enforce data policy, Passe must constrain the
arguments to queries. However, these arguments are not
necessarily hard-coded constants and may instead derive
from prior database results. For example, a view displaying
all of a user‚Äôs friends‚Äô updates might issue two queries:
friends = fetchFriendsOf (uname = "Bob")
updates = fetchUpdates ( author in friends )
Here, data from the Ô¨Årst query is used as an argument value
in the second query. Passe will attempt to enforce this rela-
tionship: that the second query should only contain arguments
from the Ô¨Årst query. In fact, this example demonstrates a data-
Ô¨Çow dependency. In a data-Ô¨Çow dependency, the argument
value of one query is equal to the result of a previous query.
Another type of dependency is the control-Ô¨Çow dependency.
In this case, the result of one query affects whether or not a
second query would even be issued. Passe captures data-Ô¨Çow
and control-Ô¨Çow dependencies which can be expressed with
equality relationships. Figure 3 shows example application
code demonstrating dependencies.
B. Protecting the Shared Data Store
Passe employs two mechanisms to enforce dependencies: a
database proxy and cryptographic tokens. Every response
from the proxy includes a token. This token is a set of
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
# T0 is an initial token
{R1 , T1} = getUID ({"Alice"},T0)
# Data -flow Dependency
{R2 , T2} = isAuthed ({R1}, T1)
# Control -flow Dependency :
if R2 = TRUE:
{R3 , T3} = getData0 ({}, T2)
{R4 , T4} = getACL ({}, T3)
# Control -flow Dependency :
if R1 in R4:
{R5 , T5} = getData1 ({}, T4)
Query
Constraints
getUID
isAuthed
getData0
getACL
getData1
Unconstrained
Data-Flow: (Argument == R1)
Control-Flow: (R2 = TRUE)
Unconstrained
Control-Flow: (R1 in R4)
Figure 3: Example queries demonstrating the types of data-Ô¨Çow and control-
Ô¨Çow dependencies. Queries take an argument set and a token as input.
key-value pairs which encode results from previous queries.
Every request to the proxy must include a token, which
the proxy will use to check that particular data dependency
relationships are met (and that application code is not trying
to issue unauthorized queries). This token allows the database
proxy to track what information has been returned to the
view while remaining stateless itself (particularly important
if the system employs multiple such proxies). In order to
prevent compromised code from altering this token, it is
cryptographically MAC‚Äôed by the proxy. The key used for
this operation is shared by Passe‚Äôs dispatcher and proxy. To
prevent replay attacks with this token, the dispatcher and
proxy include nonces in each token and track the nonces
which have already been used.
In order to approve a query, the database proxy consults
an access table and applies a two-stage veriÔ¨Åcation process.
In the Ô¨Årst stage, the proxy checks whether the requested
unbound query is whitelisted for that particular view. If not,
then the request is denied (in this sense, the proxy is fail-
safe). In the second stage, the proxy checks if the set of
constraints associated with the unbound query is satisÔ¨Åed by
the supplied argument values and token. Figure 3 displays a
set of constraints for the associated unbound query.
C. Learning Constraints
Passe infers access-table entries during a learning phase.
In this phase, Passe uses dynamic taint tracking to learn the
data and control-Ô¨Çow dependencies experienced during the
normal execution of application code. The developer can
either supply test cases or run an ‚Äúinternal beta‚Äù. Once this
phase has completed, Passe translates dependencies into the
token-based constraints which will form the access table
entries. These inferences would allow any of the witnessed
traces to run, but then errs on the side of strictness. If the
analyzer provides too strict of a conÔ¨Åguration, the developer

 

 %




 

$

 




 














"
!






Figure 4: Each arrow represents a communication channel in Passe‚Äôs
runtime. Solid lines are trusted; dashed are untrusted. Blue lines correspond
to developer-supplied code, which is embedded into Passe‚Äôs runtime
components. When a request arrives at the dispatcher, it Ô¨Årst gets processed
by any number of middleware modules (which includes the session manager),
before getting matched against the URL Map for dispatching to the
appropriate view.
can either increase the number of test cases or alter the
conÔ¨Åguration manually.
IV. PASSE RUNTIME IN WEB SETTING
We implemented Passe as a drop-in replacement for
Django, a popular Python-based web framework which relies
on the ‚Äúmodel-view-controller‚Äù design pattern. This pattern
deÔ¨Ånes a logical separation between various computation and
data components. In this setting, the Passe runtime (shown
in Figure 4) involves the following components:
‚Ä¢ The Dispatcher uses the URL of a request to decide
which view will handle a particular request.
‚Ä¢ The Session Manager handles mapping user cookies
to stored sessions.
‚Ä¢ The Authentication Manager checks users credentials
(username and password) and associates the current
session with that user.
‚Ä¢ The Database Proxy mediates access to a SQL
database.
‚Ä¢ The View Server provides a wrapper around the view
function for handling inter-process communication and
automatically binding tokens to requests in and out of
the view. The view function itself is the unmodiÔ¨Åed
developer code.
A. Isolating Views
In automatically decomposing applications into isolated
views, we must solve four problems, related to (i) determining
view boundaries, (ii) translating function calls into inter-
process communication, (iii) dealing with global variables,
and (iv) sandboxing these processes.
Passe determines application boundaries by leveraging the
design of Django. In Django, application developers specify
a mapping of requests to functions which handle the logic
and HTML rendering of those particular requests. In Passe,
137
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
we treat each of these functions as a separate view, such that
each view is responsible for handling a complete request.
Passe must translate what were previously simple function
calls into inter-process communication. Passe wraps appli-
cation code with a view server, which handles marshalling
function calls into this inter-process communication. This
uses the Pyro library for Python remote objects, which
automatically serializes the arguments of remote procedure
calls using Python‚Äôs pickle module. The deserialization
process is unsafe: if any object can be deserialized, then
arbitrary code may be executed. This is dealt with by
modifying the deserialization code to only instantiate objects
of a white-listed set of types.
Because application code now runs in separate processes,
previously shared global variables are no longer shared.
However, in order to support a scalable application tier,
developers are encouraged to share global variables through a
narrow interface by modifying values in a single request state
object. In Passe, changes to this object are propagated back
to the dispatcher by our view server. In order to minimize
this overhead, Passe computes and sends a change-set for
this object. The dispatcher checks that the change-set is valid
(e.g., a view is not attempting to change the current user)
and applies it to a global request object.
Passe sandboxes these views by engaging Linux‚Äôs App-
Armor and creating speciÔ¨Åc communication channels for the
processes. Each of the views communicates over speciÔ¨Åc
Unix domain sockets with the dispatcher and the database
proxy. As each view server starts, an AppArmor policy
(which Passe deÔ¨Ånes) is engaged, and the view server
becomes sandboxed. This prevents views from making system
calls, communicating over the network, or reading from the
Ô¨Ålesystem. Views may only read from a limited set of Ô¨Åles
required for their execution. This set of Ô¨Åles includes the
Python libraries and the application source code, allowing
the view to read and execute those Ô¨Åles. When executed,
these Ô¨Åles run within the view‚Äôs sandbox. Network access
is limited to the Unix sockets used to communicate with
Passe‚Äôs components.
B. Constraining SQL Queries
Applying Passe constraints to SQL queries requires two
mechanisms. First, we need to specify how a SQL query
maps to our notion of an unbound query. Second, we need
to specify how SQL query results are stored and referred to
in the token.
In Django, applications issue queries as a query string
and an ordered list of arguments. For example, a view might
supply a query string
SELECT (text , fromUser ) FROM msgs WHERE toUser = ?
and an argument ‚ÄúBob‚Äù. For Passe, we treat the query string
itself as the unbound query. In the access table, we store
the strings with a cryptographic hash of the query string (to
reduce the required storage).
138
%#&$%
'
$$
"&$%+7: 40$#+-.15
&#):-	6
#$
#$%:*.
#$:2-.3+ :7
$&%$:2- .+-#).3
8: 40$#+-.1+
0"7$/&+2- .+,315
&#):-	6
&!%$
&% #*.
#$:2$%0- .+-#).13+ :8
$&%$:2-  .+-#.3
9: 40$#+-.1+
0"7$/&+2- .+,31+