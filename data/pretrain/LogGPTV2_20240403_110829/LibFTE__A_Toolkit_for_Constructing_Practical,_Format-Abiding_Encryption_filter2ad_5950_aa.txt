title:LibFTE: A Toolkit for Constructing Practical, Format-Abiding Encryption
Schemes
author:Daniel Luchaup and
Kevin P. Dyer and
Somesh Jha and
Thomas Ristenpart and
Thomas Shrimpton
LibFTE: A Toolkit for Constructing Practical,  
Format-Abiding Encryption Schemes
Daniel Luchaup, University of Wisconsin—Madison; Kevin P. Dyer, Portland State University; 
Somesh Jha  and Thomas Ristenpart, University of Wisconsin—Madison;  
Thomas Shrimpton, Portland State University
https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/luchaup
This paper is included in the Proceedings of the 23rd USENIX Security Symposium.August 20–22, 2014 • San Diego, CAISBN 978-1-931971-15-7Open access to the Proceedings of  the 23rd USENIX Security Symposium is sponsored by USENIXLibFTE: A Toolkit for Constructing
Practical, Format-Abiding Encryption Schemes
Daniel Luchaup1
PI:EMAIL
Kevin P. Dyer2
PI:EMAIL
Somesh Jha1
PI:EMAIL
Thomas Ristenpart1
PI:EMAIL
Thomas Shrimpton2
PI:EMAIL
1Department of Computer Sciences, University of Wisconsin-Madison
2Department of Computer Science, Portland State University
Abstract
Encryption schemes where the ciphertext must abide by a
speciﬁed format have diverse applications, ranging from
in-place encryption in databases to per-message encryp-
tion of network trafﬁc for censorship circumvention. De-
spite this, a unifying framework for deploying such en-
cryption schemes has not been developed. One conse-
quence of this is that current schemes are ad-hoc; another
is a requirement for expert knowledge that can disuade
one from using encryption at all.
We present a general-purpose library (called libfte)
that aids engineers in the development and deploy-
ment of format-preserving encryption (FPE) and format-
transforming encryption (FTE) schemes. It incorporates
a new algorithmic approach for performing FPE/FTE
using the nondeterministic ﬁnite-state automata (NFA)
representation of a regular expression when specifying
formats. This approach was previously considered un-
workable, and our approach closes this open problem.
We evaluate libfte and show that, compared to other en-
cryption solutions, it introduces negligible latency over-
head, and can decrease diskspace usage by as much
as 62.5% when used for simultaneous encryption and
compression in a PostgreSQL database (both relative to
conventional encryption mechanisms).
In the censor-
ship circumvention setting we show that, using regular-
expression formats lifted from the Snort IDS, libfte can
reduce client/server memory requirements by as much as
30%.
1
Introduction
Both in practice and in the academic literature, we see
an increasing number of applications demanding encryp-
tion schemes whose ciphertexts abide by speciﬁc for-
matting requirements. A small industry has emerged
around the need for in-place encryption of credit-card
numbers, and other personal and ﬁnancial data. In the
case of credit-card numbers, this means taking in a string
of 16 decimal digits as plaintext and returning a string
of 16 decimal digits as ciphertext. This is an example of
format-preserving encryption (FPE). NIST is now con-
sidering proposals for standardized FPE schemes, such
as the FFX mode-of-operation [7], which is already used
in some commercial settings [3]. On a totally different
front, a recent paper [11] builds a format-transforming
encryption scheme. It takes in plaintext bit strings (for-
matted or not) and returns ciphertexts formatted to be in-
distinguishable, from the point of view of several state-
of-the-art network monitoring tools, from real HTTP,
SMTP, SMB or other network protocol messages. This
FTE scheme is now part of the Tor Project’s Browser
Bundle, and is being integrated into other anti-censorship
systems.
It seems clear that FPE and FTE have great poten-
tial for other applications, too. Unfortunately, developers
will ﬁnd a daunting collection of design choices and en-
gineering challenges when they try to use existing FPE
or FTE schemes in new applications, or to instantiate en-
tirely new schemes. To begin with, there isn’t a stan-
dard way to specify the formats that plaintexts or cipher-
texts must respect. There are no established guidelines,
and certainly no automated tools, to help developers un-
derstand whether they should be targeting deterministic
schemes or randomized ones, or how their chosen for-
mats might affect runtime performance and memory us-
age. (In the case of FTE, it can be difﬁcult to tell if a
given input and output format will result in a scheme that
operates properly.) There are no established APIs, and
no reference implementations or open-source libraries to
aid development.
Making FPE/FTE More Approachable:
In
this work, we offer a unifying framework for build-
ing and deploying FPE and FTE schemes. We design
and implement an algorithm library, libfte, and include
in it developer-assistance tools. A paramount goal of
libfte.
USENIX Association  
23rd USENIX Security Symposium  877
1
our effort is ease-of-use: our library exposes an inter-
face in which formats for plaintexts and ciphertexts are
easily speciﬁed via Perl-compliant regular expressions
(regexes), and it relieves the programmer of the burdens
of making good algorithm and parameter choices.
Some of what we do is to make existing algorithms
(e.g., FFX) signiﬁcantly easier to use. But some of the
engineering and deployment challenges demand entirely
new approaches to both FPE and FTE. Perhaps most no-
tably, we solve an open problem regarding how to build
regular-expression-based schemes using a regex’s non-
deterministic ﬁnite automaton (NFA) representation, as
opposed to its DFA representation. This is desirable
because it can lead to signiﬁcantly more space-efﬁcient
schemes, but the approach was previously thought to be
unworkable [5, 11]. We dispel this thought, and experi-
mentally observe the resulting boost in efﬁciency.
To summarize the main contributions of this work, we:
(cid:127) Design and implement a library and toolkit
to
make development and deployment easy. The libfte
library exposes simple interfaces for performing
FPE/FTE over regex formats speciﬁed by the user.
We provide a conﬁguration tool that guides devel-
opers towards good choices for the algorithms that
will instantiate the scheme, and that provides con-
crete feedback on expected ofﬂine and online per-
formance and memory usage.
(cid:127) Develop new FTE schemes that
take regular-
expression formats, but can work directly with their
NFA representation. This was previously thought to
be an unworkable approach [5], due to a PSPACE-
hardness result, but we show how to side-step this
via a new encoding primitive called relaxed rank-
ing. The result is FTE schemes that handle a larger
class of regexes, and impose smaller ofﬂine/online
memory requirements.
(cid:127) Detail a general, theoretical framework that cap-
tures existing FPE/FTE schemes as special cases,
and surfaces potentially useful new constructions,
e.g., deterministic FTE that encrypts and com-
presses simultaneously. Due to space constraints,
the formalisms appear mostly in the full ver-
sion [16].
In addition, the libfte library will be made publicly avail-
able as free and open-source software1, with APIs for
Python, C++ and JavaScript.
Applications. We exercise libfte by applying it to a va-
riety of application settings. Table 1 gives a summary
of the diversity of formats required across these various
applications.
We ﬁrst show how to use libfte to perform FPE of SQL
1https://libfte.org/
Deployment
Setting
Databases
Web Forms
Network
Monitors
Type
credit card number
dateﬁeld
account balance
email address
year, month, day
URL
HTTP GET request
Examples
Constraint
16-digit string
YYYYMMDD
32-bit integers
contains @ symbol,
ends with {.com,. . .}
YYYY, MM, DD
starts with http(s)
“GET /...”
Browser X “. . . User-Agent: X . . . ”
SSH trafﬁc
“SSH-. . . ”
Table 1: Example deployment settings and constraints
for FPE/FTE schemes.
database ﬁelds, a classic motivational setting for FPE, but
one that has (to the best of our knowledge) never been re-
ported upon. We show that performance loss compared
to conventional encryption is negligible. We also show
how to leverage the ﬂexibility of libfte to improve per-
formance, by using a (deterministic) FTE scheme that si-
multaneously encrypts and compresses ﬁelds (in a prov-
ably secure manner).
We then use libfte to build a proof-of-concept browser
plugin that encrypts form data on websites such as Ya-
hoo! Contacts. This uses a variety of FPE and FTE
schemes, and allows one to abide by a variety of format
restriction checks performed by the website.
Finally, we show that our NFA-based algorithms in
libfte enable signiﬁcant memory savings, speciﬁcally for
the case of using FTE in the network-monitor-avoidance
setting [11]. Using a corpus of 3,458 regular expres-
sions from the Snort monitor we show that we can reduce
memory consumption of this FTE application by 30%.
2 Previous Approaches and Challenges
We review in more detail some of the main results in
the areas of format-preserving and format-transforming
encryption, and then discuss some of the challenges pre-
sented when one attempts to implement and use these in
practice. As we shall see, existing tools fall short for the
types of applications we target. Table 2 provides a sum-
mary.
Format-preserving encryption.
In many settings the
format of a plaintext and its encryption must be the same,
and the tool used to achieve this is format-preserving en-
cryption (FPE). Work on FPE predates its name, with
various special cases such as length-preserving encryp-
tion of bit strings for disk-sector encryption (c.f., [14,
15]), ciphers for integral sets [8], and elastic block ci-
phers [10] including de novo constructions such as the
hasty pudding cipher [21]. For an overview of work on
878  23rd USENIX Security Symposium 
USENIX Association
2
Paper
[7]
[5]
Builds
FPE
FPE
[11]
FTE
Formats
slice of ⌃⇤
slice of chosen
regular language
slice of chosen
regular language
Schemes
deterministic
deterministic
randomized
Implementation
none
none
open source,
but domain speciﬁc
This
Work
FPE/
FTE
range-slice of
chosen regular language
deterministic/
randomized
open source,
conﬁguration toolchain,
non domain speciﬁc
Comments
proposed NIST standard
ﬁrst FPE paper, theory only,
requires regex-to-DFA conversion
input format ﬁxed as bitstrings,
control of output format,
requires regex-to-DFA conversion
control of input and output format,
NFA and DFA ranking,
regex-to-DFA conversion not required
Table 2: Analysis of prior works, and a comparison of features.
FPE, see Rogaway [20].
FPE was ﬁrst given a formal cryptographic treatment
by Bellare, Ristenpart, Rogaway and Spies (BRRS) [5].
In their work, BRRS suggested an approach to FPE
called the “rank-encipher-unrank” construction. First,
they show how to build a cipher that maps ZN to ZN ,
for an arbitrary ﬁxed number N.
(Recall that ZN =
{0, 1, . . . N − 1}.) Now say that X is a set of strings
that all ﬁt some speciﬁed format, and one desires an en-
cryption scheme mapping X to X. A classic algorithm
due to Goldberg and Sipser (GS) [12] shows that, given a
DFA for X, there exists an efﬁciently computable func-
tion rank : X ! ZN , where |X| = N and rank(x)
is deﬁned to be its position (its “rank”) in the shortlex
ordering of X. In addition, rank has an efﬁciently com-
putable inverse unrank : ZN ! X, so that unrankL(i)
is the i-th string in the ordering of L. Then to encrypt
a string x 2 X: (1) rank the input x to yield a num-
ber a   rank(x), (2) encipher a, giving a new number b,
then (3) unrank b to yield the ciphertext y   unrank(b),
which is an element of X.
BRRS focus on FPE for sets X that are a slice of a
language L, that is X = L\ ⌃n for some n and where ⌃
is the alphabet of L. Relatedly, we deﬁne a range-slice
of a language L as X = L \ (⌃n [ ⌃n+1 [ ··· [ ⌃m),
for n  m. The latter is superior because it offers greater
ﬂexibility, although not explored by BRRS. Still, extend-
ing BRRS to an FPE scheme over the entire (regular)
language is possible, by establishing a total ranking one
slice at a time. The main disadvantage of the BRRS
scheme is that it requires a DFA to represent the set X.
For most users, this is an unnatural way to specify lan-
guages, or slices thereof.
We quickly note that the BRRS algorithm may be sus-
ceptible to timing-based side-channel attacks, since rank
is not constant time. Timing information may therefore
leak partial information about plaintexts. We leave to
future work exploration of this potential security issue,
which extends to libfte and other non-constant-time mes-
sage encodings as well.
The FFX scheme.
Bellare, Rogaway, and Spies [7]
specify the FFX mode of operation, which is a speciﬁc
kind of FPE scheme and is based on the BRRS work [5].
FFX takes a parameter 2  r  216, the radix, and en-
crypts a plaintext P 2 L = S`{0, 1, . . . , r − 1}` to a
ciphertext in L with |L| = |P|. The length ` ranges
between a minimum value of 2 (or 10, if r ≥ 10) and
232 − 1. For example, FFX[10] enciphers strings of dec-
imal digits to (same length) strings of decimal digits;
FFX[8] does likewise for octal strings. In addition, FFX
has an extra “tweak” input, making it a length-preserving
tweakable cipher, in the sense of [17]. The tweak allows
FFX to support associated data.
We are aware of no public, open-source implementa-
tions of FFX, though there do exist proprietary ones [3].
Even given such an implementation, the formats sup-
ported by FFX are not as general as we might like.
For example, the scheme does not support domain ZN
when N is not expressible as r` for the supported
radices r. One can rectify this using cycle walking [8]
but the burden is on developers to properly do so, hinder-
ing usability. Moreover, the user is left to determine how
best to map more general formats into the set of formats
that FFX supports.
Format-transforming encryption. Dyer, Coull, Risten-
part and Shrimpton (DCRS) [11] introduced the notion
of format-transforming encryption, and gave a purpose-
built scheme that mapped bitstring plaintexts to cipher-
texts belonging to a speciﬁed regular language. Their
FTE scheme was built to force protocol misidentiﬁcation
in state of the art deep-packet-inspection (DPI) systems
used for Internet censorship.
The DCRS scheme is randomized, which lets it tar-
get strong privacy goals for the plaintexts (namely, se-
mantic security [13]), and also naturally aligns with us-
ing standard encryption schemes as building blocks. The