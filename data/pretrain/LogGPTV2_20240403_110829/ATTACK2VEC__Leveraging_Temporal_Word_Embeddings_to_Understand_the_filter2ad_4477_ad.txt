### Temporal Embeddings and Their Applications

Temporal embeddings are the solution to a joint optimization problem across all time slices (see Section 4). These embeddings not only encode the usage and context of security events within a given time slice but also capture their historical context across all time slices. In this section, we demonstrate how to leverage these temporal embeddings generated by ATTACK2VEC to identify anomalous periods with a high number of changes in the use of multiple security events.

#### Identifying Anomalous Usage Changes

ATTACK2VEC computes a list of changes for each security event \( e_i \) across all time slices using a weighted drift metric (see Eq. 6). This allows us to identify observation periods where many security events exhibit significant usage changes. Such points are of particular interest to security analysts, as multiple changes in word embeddings may indicate the emergence of new pervasive attacks. We exclude security events with fewer than 100 observations over a two-year period (see Section 6 for the rationale).

Figure 7 shows a histogram of the time slices where security event usage changes the most. For example, between October 11 and October 18, 2018, we observe 34 security events with the most usage changes. Table 1 lists the top 5 events with the most usage changes on selective dates. These changes illustrate how security events evolve over time. For instance, at the beginning of 2017, many changes were related to router exploits, indicating a large-scale attack campaign targeting such devices. Over time, more attacks shifted towards fake tech support websites, coinminers, and content management systems. This context information is crucial for analysts to improve situational awareness and promptly respond to emerging threats.

**Table 1: Top 5 Events with Most Usage Changes on Selective Dates**

| Rank (by changes) | Date       | Event Description                      |
|-------------------|------------|----------------------------------------|
| 1                 | Mar. 9 2017 | Malicious JavaScript Website            |
| 2                 | Jan. 4 2018 | Fake Tech Support Website              |
| 3                 | Oct. 15 2018 | Rig Exploit Kit Website                |
| 4                 | Oct. 15 2018 | ZyNOS Information Disclosure           |
| 5                 | Oct. 15 2018 | WordPress Mobile-Detector Arbitrary File Upload |

**Figure 7: Summary of Security Event Changes (December 1, 2016 - November 15, 2018)**

#### Trend Identification

A common method in empirical studies [5, 24, 32, 46] for analyzing temporal usage changes is to leverage frequencies to reveal patterns. However, this approach has limitations. Frequencies are prone to noise and can be difficult to compare when they trend at different magnitudes. A sudden spike in one security event's frequency can overshadow other important events.

To illustrate this, we analyze four popular remote web server attack vectors (see Figure 8a). For example, after the disclosure of Apache Struts CVE-2017-5638, its usage dominated, overshadowing other attack vectors like HTTP Apache Tomcat UTF-8 Dir Traversal (CVE-2008-2938) (see inset in Figure 8a).

**Figure 8: Event Frequencies (8a) and Event Embedding Vector Norms (8b)**

In contrast, the word embeddings calculated by ATTACK2VEC are more robust for revealing trend changes. The norms of word embeddings, derived from the matrix factorization of PMIt(c, S), grow with word frequency and are averaged by their contexts. Therefore, we can use these norms to identify event usage trends. Comparing temporal frequencies (Figure 8a) with embedding vector norms (Figure 8b) highlights that ATTACK2VEC captures trends more reliably. For instance, CVE-2008-2938 (green line in Figure 8a) is a persistent vector used by attackers, which was not evident in the frequency data due to the dominance of CVE-2017-5638.

**Figure 9: Comparison Study of CVE-2017-7269 (orange line) and CVE-2017-10271 (red line)**

Our temporal embeddings also capture the gradual emergence of CVE-2017-10271 and CVE-2017-7269 as trendy attack vectors. Before their disclosure, both CVEs show flat trends, confirming their non-existent trend. After disclosure, ATTACK2VEC accurately tracks their trends, even when their initial usage is less observable compared to other CVEs.

#### Event Evolution

Understanding how attacks evolve in the wild is another valuable application of ATTACK2VEC. Security events that are often used together will have similar contexts, which can help detect emerging threats like new botnets or exploit kits.

We evaluate ATTACK2VEC's capability to track the evolution of security event contexts over time using the highly critical Drupal core RCE (CVE-2018-7602). This vulnerability was first disclosed on April 23, 2018, and we observe its activities starting from May 15, 2018.

**Table 2: Top 3 Security Events Associated with CVE-2018-7602**

| Date       | Event Description                      |
|------------|----------------------------------------|
| May 15 2018 | Joomla JCE Vulnerability               |
| May 15 2018 | WordPress RevSlider/ShowBiz Bypass     |
| Nov. 08 2018 | phpMyAdmin RFI (CVE-2018-12613)        |
| Nov. 08 2018 | Drupal SQL Injection (CVE-2014-3704)   |
| Nov. 08 2018 | Adobe Flex BlazeDS RCE (CVE-2017-3066) |

At the beginning of the observation period, the top 3 attack vectors used with CVE-2018-7602 resemble a reconnaissance attack targeting major content management systems (Joomla, WordPress, and Drupal). By the end of the period, CVE-2018-7602 is part of a more specific multi-step attack targeting the Drupal ecosystem (php, SQL, and Flex).

**Figure 10: Temporal Security Event Embeddings and Trajectory Visualization**

The trajectory visualization in Figure 10b shows the 2-D t-SNE projection of the temporal embeddings, highlighting the context changes over time. The blue dots represent the 2-D location in the latent space at each timestamp, showing a considerable drift between the fourth and fifth blue dot, correlating with the trend observed in Figure 10a.

#### System Performance

ATTACK2VEC is implemented in Python 3.7.3 and tested on a server with dual Xeon E5-2630 CPUs and 256GB memory running Ubuntu Linux 14.04. In this setup, ATTACK2VEC takes 859.86 seconds to construct the PPMI matrices for all 102 snapshots. Once the PPMI matrices are constructed, the system efficiently generates the temporal embeddings.