dings are the solution of a joint optimization problem across
all time slices (see Section 4). Therefore, such embeddings
not only encode their respective usage and context in a given
time slice, but also its history across all time slices. In this
912    28th USENIX Security Symposium
USENIX Association
Rank
(by changes) Mar. 9 2017
1
Jan. 4 2018
Oct. 15 2018
Malicious Javascript Website
Fake Tech Support Website
2
3
4
5
Rig Exploit Kit Website
ZyNOS Information Disclosure
WordPress Mobile-Detector
Arbitrary File Upload
Netgear Router Remote Command
Execute
Wordpress Arbitrary File Download Malicious Redirection
Fake Flash Player Download
JSCoinminer Download
Unwanted Extension or Scam Sites Redirection
Fake Tech Support Website
Drupal Core RCE
Fake Browser History Injection
Mass Injection Website
Table 1: Top 5 events with most usage changes in selective dates.
Figure 6: Temporal embedding result of Apache Struts Show-
case App CVE-2017-9791. Cosine similarity values for each
plot is calculated as similarity(η(t−1)
ei ) (i.e., cosine sim-
ilarity between subsequent time slices), where t starts from
July 10 2017 (the public disclosure date).
,η(t)
ei
section, we show how to leverage the temporal embeddings
generated by ATTACK2VEC to ﬁnd times where we observe
an anomalous high number of changes in the use of multiple
security events.
ATTACK2VEC computes a list of changes for each secu-
rity event ei in all time slices using the weighted drift metric
(see Eq 6). We use this to identify the observation periods
in which many security events exhibit most usage changes.
These points are interesting candidates for scrutiny for se-
curity analysts, since multiple changes in word embeddings
might indicate the emergence of new pervasive attacks. Note
that we remove all the security events with less than 100
observations in 2 years time (see Section 6 for a rationale
for this). Figure 7 shows a histogram of the time slices in
which security event usage changes most. As we can see,
we observe 34 security events with most usage changes be-
tween October 11 and October 18 2018. We selectively list
the top 5 events with most usage changes in different dates
(see Table 1). These changes demonstrate how security event
evolve over the time. For example, at the beginning of 2017,
we can observe many changes relating to exploits affecting
routers. This can be an indicator of a large attack campaign
targeting such devices unfolding. Across time, more attacks
change over fake tech support websites, coinminer and con-
tent management systems. This context information is usually
for analysts to improve situational awareness and be promptly
warned about emerging attacks.
Figure 7: Summary of the security event changes between
December 1 2016 and November 15 2018.
5.3 Trend Identiﬁcation
One de facto method used in empirical studies [5, 24, 32, 46]
to analyze temporal usage changes is leveraging frequencies
to reveal patterns. That is, previous approaches often start
by determining the occurrence frequency of events across
the data, and using the event frequency time series as a cri-
terion to reveal the signiﬁcance of these events. Despite its
straightforwardness in analyzing and visualizing temporal
data, one drawback of this approach is that frequencies are
prone to noise because they are only counted at a speciﬁc
timestamp. Another drawback of using temporal frequency,
especially in practical analysis, is that it is more difﬁcult to
compare two time series when they are both trending but at
a different magnitude, and a sudden spike in the occurrence
of one security event might make it difﬁcult to identify other
important events that are not happening as frequently. To
demonstrate this problem, we use four popular remote Web
server attack vectors (see Figure 8a). We can observe in Fig-
ure 8a (inset ) , that Apache Struts CVE-2017-5638 (blue
line) was overwhelmingly exploited by attackers after it was
disclosed. Its preponderant usage overshadows (see the zoom
region inset  in Figure 8a) the other popular remote Web
server attack vectors (e.g., HTTP Apache Tomcat UTF-8 Dir
USENIX Association
28th USENIX Security Symposium    913
Oct. 18 2018(a)
(b)
(a)
(b)
Figure 8: Event frequencies (8a) and event embedding vec-
tor norms (8b). We select four CVEs relating to different
Web services to demonstrate the robustness of temporal event
embedding in trend changes (CVE-2008-2938 in green line,
CVE-2017-5638 in blue line, CVE-2017-10271 in red line,
and CVE-2017-7269 in orange line). The dashed box high-
lights the observation period discussed in Section 5.3.
Traversal CVE-2008-2938) when using event frequency time
series to comparatively study attack vector popularity.
In the rest of this section, we demonstrate that the word
embeddings calculated by ATTACK2VEC are more robust than
temporal frequencies to reveal trend changes. Recall the def-
inition of PMIt (c, S) (deﬁned in Section 4). It contains in-
formation from W (ei,e j), the number of times ei and e j co-
occurring in a given contextual window, and W (ei) and W (e j)
respectively count the occurrences of security events ei and
e j. The norms of word embeddings ηei, as a consequence of
matrix factorization of PMIt (c, S), grow with word frequency
and are averaged by their contexts. Therefore, we can lever-
age these norms to identify event usage trends. We compare
temporal frequencies (Figure 8a) to the embedding vector
norm (Figure 8b) in the context of trend identiﬁcation. It is
straightforward to see that the security event “Apache Struts
CVE-2017-5638” was predominantly leveraged by the attack-
ers for a short period of time. As we said, such sudden spike
makes other trendy CVEs used at that same period of time less
detectable (Figure 8a). However, we can see that the temporal
event embeddings (Figure 8b) reveal the real patterns behind
the frequencies, and are able to capture trends more reliably.
For example, we can clearly see in Figure 8b that CVE-2008-
2938 (“HTTP Apache Tomcat UTF-8 Dir Traversal,” green
Figure 9: Comparison study of CVE-2017-7269 (orange line)
and CVE-2017-10271 (red line). ATTACK2VEC can trace the
emerging popularity of CVE-2017-7269 even though it is
barely observable in Figure 8.
line in Figure 8a) is a persistent vector used by the attackers.
This was not observable in Figure 8a because CVE-2017-
5638 dominates during that period of time. Nevertheless, it is
worth noting that we study the independent popularity of these
attack vectors and reveal their underlying usage trend beneath
the event frequency time series. Hence in this paper we do not
intend to study how such attack vectors inﬂuence each other.
It is coincidental that the red (CVE-2017-10271) and green
(CVE-2008-2938) lines show a similar vector norm shift. In
fact, these vector norm shifts were incurred by their similar
usage changes (e.g., dropping close to zero) during the same
period (see inset , Figure 8a). ATTACK2VEC still preserves
the trends of red (CVE-2017-10271) and green (CVE-2008-
2938) lines (i.e., larger than zero) in this extreme case and
their respective vector norms become stable immediately af-
ter.
Our temporal embedding can also capture how two CVEs,
CVE-2017-10271 (“Oracle WebLogic RCE,” red line in Fig-
ure 8a) and CVE-2017-7269 (“Buffer overﬂow in the ScStor-
agePathFromUrl function in the WebDAV service in IIS 6.0,”
orange line in Figure 8a) gradually emerge as a trendy attack
vector over time. That is, both CVE-2017-10271 (red line)
and CVE-2017-7269 (orange line), before their disclosure
dates (May 27, 2017 and Oct 17, 2017), are ﬂat. This proves
that ATTACK2VEC faithfully captures their non-existent trend.
After their disclosure, ATTACK2VEC is able to correctly keep
track of their trends. For example, in Figure 9 we show that
914    28th USENIX Security Symposium
USENIX Association
0102030405060Weeks0.00.51.01.52.02.53.03.54.0Frequency1e3CVE-2017-7269CVE-2017-102710102030405060Weeks0.51.01.52.02.53.03.54.04.5Vec. Norm.CVE-2017-7269CVE-2017-10271Drupal core RCE (CVE-2018-7602)
May 15 2018
Nov. 08 2018
Joomla JCE Vulnerability
Wordpress RevSlider/ShowBiz Bypass
(CVE-2014-9735)
WordPress Symposium Plugin Shell Upload Adobe Flex BlazeDS RCE (CVE-2017-3066)
phpMyAdmin RFI (CVE-2018-12613)
Drupal SQL Injection
(CVE-2014-3704)
Table 2: Top 3 security events associated with CVE-2018-
7602 at the beginning (May 15 2018) and the end (November
18 2018) of our time span.
our approach can reliably trace the trends of CVE-2017-7269
(orange line) from approximately week 19 in the ﬁgure. Al-
though its usage (e.g., frequency) is less observable than CVE-
2008-2938 and CVE-2017-5638 during the same period of
time (see Figure 8), its emerging trend is still recognized
by the increase in vector norm as we can see in Figure 9b.
Additionally, despite the ﬁve times of frequency difference
between it initial disclosure (week 19 in Figure 9a) and later
weeks (after week 51 in Figure 9a), ATTACK2VEC captures
the trend changes with a small ﬂuctuation of less than 0.6.
ATTACK2VEC also reliably captures CVE-2017-10271 (red
line) non-existent trend before its public disclosure.
5.4 Event Evolution
Another useful functionality for which ATTACK2VEC can be
used is understanding how attacks evolve in the wild, and in
particular monitoring which attack steps are often performed
together by attackers. In a nutshell, security events that are
often used together will have similar contexts. Identifying
events with such similar contexts could help detecting emerg-
ing threats such as new botnets scanning for speciﬁc vulnera-
bilities (e.g., Mirai or WannaCry) or new exploit kits that are
probing for speciﬁc weaknesses in victim systems [3, 33].
To evaluate ATTACK2VEC’s capability of tracking the evo-
lution of security event contexts over time in relation to each
other we use the same CVE from Section 2, “Drupal core
RCE (CVE-2018-7602).” This CVE is for a highly critical
remote code execution (RCE) vulnerability that exists within
multiple subsystems of Drupal 7.x and 8.x, enabling attackers
to compromise a machine running a Drupal website. This
vulnerability was ﬁrst disclosed on April 23 2018, and we ob-
serve its activities in the our data starting from May 15 2018.
Due to its high severity, it is interesting to see how such a crit-
ical vulnerability was exploited in different contexts across
time.
We use Eq 5 to identify the top 3 security events associated
with CVE-2018-7602 at the beginning and the end of our time
span. These events are the ones that have the closest context to
CVE-2018-7602, and are therefore used in association with it.
Table 2 shows a detailed description of these events. It is inter-
esting to note that the top 3 attack vectors used together with
CVE-2018-7602 at the beginning resemble a reconnaissance
attack aiming at all three major content management systems
- Joomla, Wordpress, and Drupal. Toward the end of the time
span, however, we notice that CVE-2018-7602 migrates to be
part of a more speciﬁc multi-step attack, aiming at the ecosys-
tem surrounding the Drupal CMS - php (phpMyAdmin), SQL
(Drupal SQL Injection), and Flex (BlazeDS RCE).
Leveraging Eq 4, we show in Figure 10a that the tem-
poral security event embedding computed by ATTACK2VEC
can meaningfully capture the aforementioned usage changes
across time. “Joomla JCE Vulnerability,” CVE-2014-9735,
CVE-2014-10021 (blue dashed lines), and CVE-2018-12613,
CVE-2017-3066, CVE-2014-3704 (red solid lines) respec-
tively are the top three closest security events associated with
“Drupal core RCE (CVE-2018-7602)” at the beginning (end)
of the observation span (starting from May 15 2018). We can
clearly see that the red lines are rising (i.e.,
these security
events are used more closely with CVE-2018-7602), and the
blue lines are moving away from CVE-2018-7602. In general,
we can see that the attackers change their modus operandi,
using CVE-2018-7602 as part of a more targeted attack on
Drupal, 8 weeks after its initial observation in the teleme-
try data. This can be indicative of the old reconnaissance
campaign fading and of the new one more targeted towards
Drupal emerging, or of an attacker changing their behavior.
Note that such usage changes can be automatically detected
using various change point detection algorithms [2].
Trajectory visualization. The trajectory of a security event
in the embedded latent space can assist security analysts to
understand its context changes over time. To show this, we
collect the top k security events associated with CVE-2018-
7602 using Eq 5 in each time slice to form our trajectory
data Dei = {Nk(e(t)
i )},where t starts from May 15, 2018. We
accordingly plot the 2-D t-SNE projection of the temporal
embeddings of CVE-2018-7602 (and the aforementioned se-
curity events) in Figure 10b to visualize its context change
over time. In Figure 10b, each blue dot represents the 2-D
location in the latent space at a given timestamp. We can
observe a considerable drift in Figure 10b between the fourth
and the ﬁfth blue dot. This is correlated to the trend we ob-
served in Figure 10a. The top 3 security events associated
with CVE-2018-7602 at the beginning and the end of our time
span are closer to the respectively locations in Figure 10b.
Note that such changes in Figure 10b can be quantitatively
detected as these locations are bounded in a Euclidean space.
5.5 System Performance
ATTACK2VEC is implemented in Python 3.7.3 and tested on
a server with dual Xeon E5-2630 CPUs and 256GB memory
running Ubuntu Linux 14.04. In this setup, ATTACK2VEC
takes 859.86 seconds to construct the PPMI matrices for
all 102 snapshots. Once the PPMI matrices are constructed,