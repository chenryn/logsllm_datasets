    uchar dbox[] = {221, 62, 140, 111, 5, 213, 225, 242, 157, 167, 40, 80, 121,
                    83, 93, 64, 219, 253, 123, 147, 234, 212, 49, 115, 131, 35,
                    160, 191, 42, 204, 175, 21, 202, 96, 205, 238, 19, 32, 126,
                    164, 193, 36, 41, 46, 76, 252, 31, 69, 116, 23, 247, 201, 84,
                    70, 12, 184, 44, 154, 185, 30, 165, 171, 172, 39, 236, 168,
                    57, 79, 24, 228, 143, 107, 100, 196, 63, 109, 211, 206, 95,
                    170, 251, 51, 91, 181, 136, 99, 239, 230, 87, 227, 128, 26,
                    50, 250, 6, 255, 106, 117, 108, 90, 208, 124, 166, 192, 43,
                    141, 130, 25, 97, 114, 173, 174, 150, 138, 68, 2, 240, 207,
                    232, 77, 112, 243, 4, 78, 33, 129, 125, 110, 58, 103, 237,
                    104, 18, 188, 28, 244, 229, 144, 217, 122, 178, 163, 151,
                    86, 183, 190, 158, 61, 248, 214, 161, 65, 145, 155, 149, 45,
                    14, 186, 92, 249, 198, 48, 59, 22, 7, 146, 148, 153, 179, 195,
                    72, 137, 60, 187, 156, 81, 169, 17, 3, 197, 152, 210, 216, 54,
                    37, 34, 134, 119, 89, 245, 135, 189, 101, 241, 159, 226,
                    180, 177, 98, 8, 142, 52, 15, 71, 215, 254, 162, 133, 56,
                    231, 0, 218, 16, 1, 55, 246, 127, 13, 176, 88, 105, 38, 233,
                    182, 203, 200, 74, 66, 73, 53, 9, 220, 139, 209, 118, 132,
                    102, 10, 222, 75, 82, 94, 29, 113, 120, 20, 194, 67, 11,
                    235, 47, 27, 224, 199, 223, 85
                   };
    int q[] = {2, 3, 7, 0, 12, 8, 9, 5, 4, 1, 11, 14, 13, 10, 15, 6};
    inline void mxor(uchar* a, uchar* b, uchar* tmp) {
        for(int i = 0; i  map;
        uchar* md5key = new uchar[BLOCK_LENGTH];
        uchar tmp[BLOCK_LENGTH];
        uchar hexkey[] = {0, 0, 0};
        for(int i = 0; i < 256; i++) { // 爆破明文所有 key 加密的结果
            for(int j = 0; j < 256; j++) {
                for(int k = 0; k < 256; k++) {
                    uchar pt[] = "16 bit plaintext";
                    copy(MD5((char*)hexkey, 3).digest, md5key);
                    fun(md5key, pt, tmp);
                    std::string s1((char*)pt, 16);
                    std::string s2((char*)hexkey, 3);
                    map[s1] = s2;
                    hexkey[2] += 1;
                }
                hexkey[1] += 1;
            }
            std::cout << i << std::endl;
            hexkey[0] += 1;
        }
        for(int i = 0; i < 256; i++) { // 爆破密文所有 key 解密的结果, 如果在 map 中找到一样的, 用这两个 key 拿来解密 flag
            for(int j = 0; j < 256; j++) {
                for(int k = 0; k < 256; k++) {
                    uchar pt[] = "\x04g\xa5*\xfa\x8f\x15\xcf\xb8\xf0\xea@6Zf\x92"; // "0467a52afa8f15cfb8f0ea40365a6692".decode('hex')
                    copy(MD5((char*)hexkey, 3).digest, md5key);
                    dec(md5key, pt, tmp);
                    std::string s1((char*)pt);
                    auto ptr = map.find(s1);
                    if(ptr != map.end()) {
                        std::cout << "Key found" << std::endl;
                        uchar key[3];
                        uchar flag[] = "\x04\xb3NZ\xf4\xa1\xf5&\x0f`C\xb8\xb9\xab\xb4\xf8"; // "04b34e5af4a1f5260f6043b8b9abb4f8".decode('hex')
                        key[0] = (*ptr).second.c_str()[0];
                        key[1] = (*ptr).second.c_str()[1];
                        key[2] = (*ptr).second.c_str()[2];
                        copy(MD5((char*)hexkey, 3).digest, md5key);
                        dec(md5key, flag, tmp);
                        copy(MD5((char*)key, 3).digest, md5key);
                        dec(md5key, flag, tmp);
                        std::cout << std::string((char*)flag, 16) << std::endl;
                        return 0;
                    }
                    hexkey[2] += 1;
                }
                hexkey[1] += 1;
            }
            std::cout << i << std::endl;
            hexkey[0] += 1;
        }
        return 0;
    }
其中 `dbox` 和 `q` 可以这样生成
    dbox = [0 for i in range(len(sbox))]
    q = [0 for i in range(len(p))]
    for i in range(len(sbox)):
        dbox[sbox[i]] = i
    for i in range(len(p)):
        q[p[i]] = i
大约需要 3g 内存和几分钟时间得到 flag  
编译的时候别忘记带上 -O3
    Key found
    1337_1n_m1ddl38f
## 总结
密码学博大精深, `Meet-in-the-middle` 只是其中一种攻击技术, 但其中的思路还是非常值得学习的,  
有时候爆破不可避免, 我们能做的是如何让爆破最简化, 至少不那么暴力 233.
想要了解更多关于 `Meet-in-the-middle` 的知识可以去看对应的
[WIKI](https://en.wikipedia.org/wiki/Meet-in-the-middle_attack)