F (cid:96)
MSNZB that takes as input (cid:104)x(cid:105)(cid:96) and outputs {(cid:104)zi(cid:105)B}i∈[(cid:96)] such
that zi = 1 if MSNZB(x) = i and 0 otherwise.
We describe the protocols for F (cid:96),{di}i∈[c]
DigDec
Appendix E and F, respectively.
and F (cid:96)
MSNZB in
E. MSB-to-Wrap Optimization
Our protocols above for extension, truncation and multipli-
cation make use of the following step: Parties P0, P1 hold
(cid:104)x(cid:105)(cid:96) and compute (cid:104)w(cid:105)B, where w = wrap((cid:104)x(cid:105)(cid:96)
0,(cid:104)x(cid:105)(cid:96)
1, L).
This is either computed through an explicit call to F (cid:96)
Wrap
(e.g., extension and multiplication) or computed via wrap of
lower and upper bits (e.g., truncation). We show that shares
of w can be computed with much less communication and
rounds if the parties either know the mx = MSB(x) in the
clear or shared form. The MSB refers to the most signiﬁcant
bit of a number. In our math library implementations in
Section V, this condition is true for almost all invocations.
For instance,
in exponential, when multiplying the values
from multiple LUTs, we know that all operands are positive,
i.e., MSB of all inputs to multiplication is 0. We call this
optimization MSB-to-Wrap and the idea is as follows: We can
write w = ((1 ⊕ mx) ∧ (m0 ⊕ m1)) ⊕ (m0 ∧ m1), where
mb = MSB((cid:104)x(cid:105)(cid:96)
b) for b ∈ {0, 1}. With this, given shares of
mx, boolean shares of w can be computed using a single call
to(cid:0)4
(cid:1)-OT1, i.e., 2λ + 4 bits of communication and 2 rounds.
(cid:0)2
(cid:1)-OT1, i.e., λ + 2 bits. The cost of our protocols with above
Also, when mx is publicly known, this can be computed using
1
1
optimization are provided in Table V.
V. MATH LIBRARY FUNCTIONS
f
In this section, we provide our cleartext implementations for
math functions exponential, sigmoid, tan hyperbolic (tanh),
and reciprocal square root as well as the protocols for the
same. Note that these functions are impossible to implement
exactly using ﬁnite-bit arithmetic, and hence, our implemen-
tations realize them approximately (Section V-D). Below, we
use the notation from Section III-C and Section III-D. For
a mathematical function f, we consider the functionality
F m,s,n,s(cid:48)
that takes as input the shares (cid:104)x(cid:105)m and outputs (cid:104)y(cid:105)n
such that srt(n,s(cid:48))(y) ≈ f (srt(m,s)(x)).
Our math function implementations rely on functions dis-
cussed in Section IV, and we recall some of them here.
We denote signed-extension of an m-value to an n-value
by SExt(x, m, n) with n > m. Next, we denote truncate-
and-reduce by s-bits using TR(x, s) that takes a value x of,
say, (cid:96)-bits, drops lower s bits and returns the corresponding
((cid:96)−s)-bit value. Finally, we use a signed multiplication where
the operands and the output can have unequal bitwidths. It
is denoted by x ∗(cid:96) y, where x and y are, say, m and n-
bit integers, respectively, and the output of multiplication is
z = int(x) · int(y) mod L.
A. Exponential
Consider the math functionality F m,s,n,s(cid:48)
with rExp(z) =
e−z, z ∈ R+ described in Figure 3. Intuitively, the correctness
i.e., srt(n,s(cid:48))(y) ≈ rExp(srt(m,s)(x)),
of this functionality,
relies on rExp(srt(m,s)(x)) = rExp(2d(k−1)−sxk−1) · . . . ·
rExp(2−sx0). Each rExp call on the RHS can be computed
rExp
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:57 UTC from IEEE Xplore.  Restrictions apply. 
1010
approximately using a lookup table L of size 2d with s(cid:48) +2 bit
entries of scale s(cid:48). Since the entries of the LUTs are between
0 and 1 with scale s(cid:48), it is sufﬁcient to have a bitwidth of
s(cid:48) + 2. For instance, when m = n = 16, d = 8, and s(cid:48) = 14
we use two LUTs where ﬁrst maps the upper 8 bits of x and
second maps the lower 8 bits of x. Final output is computed
by multiplying the two 16-bit looked up values from the two
LUTs into a 32-bit number followed by an appropriate truncate
and reduce operation to get 16-bit y with scale 14. We formally
verify that for m, s, n, s(cid:48) used in our evaluation, our choice of
d ensures precise results in Section V-D.
The protocol for this functionality can be built easily relying
on the protocols described in Section IV. Step 1 can be
implemented by a call to the digit decomposition functionality,
FDigDec. The LUTs in Step 2 can be looked up using FLUT
(Section III-E). These s(cid:48) + 2-bit values are multiplied using
a tree-based multiplication using F s(cid:48)+2,s(cid:48)+2,2s(cid:48)+2,s(cid:48)
to get an
s(cid:48) + 2-bit number with scale s(cid:48) in Step 3. Finally, Step 4
extends g to an n-bit value using F s(cid:48)+2,n
. Table II gives our
concrete numbers and compares with prior work.
SMultTR
SExt
Functionality F m,s,n,s(cid:48)
((cid:104)x(cid:105)m)
rExp
Fix(cid:0)rExp(2di−sj), s(cid:48) + 2, s(cid:48)(cid:1).
1) Let x = xk−1|| . . .||x0, xi ∈ {0, 1}d, i ∈ [k], dk = m.
2) For i ∈ [k], let Li
2s(cid:48)+2 s.t. Li(j) =
3) Compute g = Lk−1[xk−1] ∗ . . . ∗ L0[x0], g has bitwidth
4) Return (cid:104)y(cid:105)n for y = SExt(g, s(cid:48) + 2, n).
s(cid:48) + 2 and scale s(cid:48).
: {0, 1}d → Z
Fig. 3: The functionality F m,s,n,s(cid:48)
rExp
for a parameter d.
This initial approximation requires that we only compute
reciprocal of values v such that 1 (cid:54) srt((cid:96),s)(v)  0
if z  0. If x is small then to
avoid divide-by-zero errors a small public constant  is added
1√
to x and
x+ is computed instead. Hence, we present our
mathematical functionality F (cid:96),s,(cid:96),s(cid:48)
in Figure 6 for the math
z where z (cid:62) .
function rsqrt(z) = 1√
This functionality follows a similar template of ﬁrst comput-
ing an initial approximation for reciprocal square root followed
by Goldschmidt’s iterations. The initial approximation 10 re-
quires 1 (cid:54) x  k. The normalized value x(cid:48) has bitwidth (cid:96) and scale (cid:96)− 2.
Next, we use g most signiﬁcant bits of z(cid:48), i.e., e and the parity
of k − s, i.e., B, to compute the initial approximation via a
lookup table Lrsqrt whose entries are as follows:
Lrsqrt(e||B) = Fix
(cid:112)(B + 1)(1 + urt(g,g)(e))
, g + 4, g + 2
(cid:32)
1
(cid:33)
Functionality F (cid:96),s,(cid:96),s(cid:48)
((cid:104)x(cid:105)(cid:96))
2
rsqrt
Normalizes x to x(cid:48) as follows:
1) k = MSNZB(x) ∈ [(cid:96)].
2) A = 2(cid:96)−2−k, B = (s − k) mod 2.
2 (cid:101)+(cid:98) (cid:96)−s−1
3) C = 2(cid:100) s−k
(cid:99).
4) x(cid:48) = x ∗(cid:96) A.
Computes the initial approximation w as follows:
1) x(cid:48) = d||e||f, d ∈ {0, 1}2, e ∈ {0, 1}g, f ∈ {0, 1}(cid:96)−2−g.
2) w = Lrsqrt(e||B), w ∈ {0, 1}g+4.
Goldschmidt’s method for t iterations:
1) x(cid:48)(cid:48) = TR(x(cid:48), (cid:96) − 3 − s(cid:48)), q0 = B ? x(cid:48)(cid:48) : TR(x(cid:48), 1).
2) a0 = 2s(cid:48)−g−2 ∗s(cid:48)+2 w, p0 = a0.
3) For i ∈ {1, . . . , t} do
a) Yi = TR(pi−1 ∗2s(cid:48)+2 pi−1, s(cid:48)).
b) qi = TR(qi−1 ∗2s(cid:48)+2 Yi, s(cid:48)).
c) pi = 3 · 2s(cid:48)−1 − (qi(cid:29)A1).
d) ai = TR(ai−1 ∗2s(cid:48)+2 pi, s(cid:48)).
Uses reciprocal square root of x(cid:48) to compute the same for x:
1) Return TR(at ∗(cid:96)/2+s(cid:48)+3 C,(cid:4) (cid:96)−s−1
(cid:5)) mod L.
2
Fig. 6: The functionality F (cid:96),s,s(cid:48)
rsqrt
for parameters g, t.
We formally verify that for (cid:96), s, s(cid:48) in our evaluation, our
choice of g, t ensures precise results for Frsqrt (Section V-D).
We build a protocol for Frsqrt as follows: We consider
the functionality FMSNZB that outputs the shares of one-hot
encoding of MSNZB(x) and give a protocol for the same
in Appendix F. It
is easy to compute the terms A, B, C
using dot-products of this one-hot vector with publicly known
vectors. For our initial approximation, we rely on protocols
for FDigDec and FLUT. The Goldschmidt’s iterations crucially
utilize arithmetic over variable bitwidth and truncation oper-
ations and each of these steps require our efﬁcient protocols
from Section IV. Table II gives our concrete numbers and
compares with prior work.
D. Formal veriﬁcation of our Math functionalities
It is desirable for math libraries to have a formal proof of
correctness about their purported numerical precision. Such