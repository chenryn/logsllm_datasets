### Use Cases for Each Symbol

Upon analysis, we found that 170 out of the 504 API symbols in OpenSSL's `libssl` are not used by any application in our dataset. Despite this, we manually inspected every symbol to determine if they provided important use cases for the Secure Socket API (SSA). Below, we summarize our findings for select categories.

**USENIX Association**
27th USENIX Security Symposium    801

| **Category** | **Symbols** | **Uses** |
|--------------|-------------|----------|
| **TLS Functionality** | | |
| Version selection | 29 | 1467 |
| Cipher suite selection | 39 | 597 |
| Extension management | 68 | 2083 |
| Certificate/Key management | 73 | 3164 |
| Certificate/Key validation | 51 | 1155 |
| Session management | 61 | 1337 |
| Configuration | 19 | 6087 |
| **Other** | | |
| Allocation | 33 | 5228 |
| Connection management | 26 | 1468 |
| Miscellaneous | 13 | 232 |

### 4.1 Version Selection

OpenSSL allows developers to specify the TLS versions their connections should use and retrieve this information. Out of the calls that set a version, 459 (54%) are functions prefixed with `SSLv23`, which default to the latest supported TLS version but also allow fallback to previous versions. The OpenSSL documentation recommends these functions [10]. Of the 388 (68%) calls that specify a single TLS version, only 60 (15%) use the latest TLS version (1.2), and 83 (21%) specify the use of the vulnerable SSL 3.0. Another 190 (49%) directly specify the use of TLS 1.0 via `TLSv1` method settings. Our inspection of source code comments suggests that many developers mistakenly believe that `SSLv23` selects the latest TLS version. Additionally, many version selection functions are determined by compile-time settings supplied by package maintainers and system administrators.

These version selection behaviors indicate that developers generally prefer the system to select the version for them, either directly or indirectly, or are erroneously adopting lower versions. We recommend that the SSA use the latest uncompromised TLS versions by default, with deviations controlled by the system administrator.

### 4.2 Cipher Suite Selection

In our dataset, 221 (54%) packages contain code that sets the ciphers used by OpenSSL directly using `*set_cipher_list` functions. Due to limitations in static analysis, we could not determine all parameter values. However, a sample of applications with hardcoded ciphers revealed some bad practices, such as the use of `eNULL` (5), `NULL` (10), `COMPLEMENTOFALL` (3), `RC4` (2), and `MD5` (1), which enable vulnerable ciphers or no encryption at all. Manual analysis of additional packages showed that many adopt default settings or retrieve cipher suite lists dynamically from environment variables and configuration files.

Our analysis indicates that, like with version selection, developers prefer the system to select cipher suites for them, and those who hardcode often make mistakes. We recommend that allowed cipher suites be set by the system administrator. The SSA can allow applications to further limit cipher suites but should not permit requests for suites not allowed by the administrator.

### 4.3 Extension Management

OpenSSL provides explicit control over ten TLS extensions through functions in the extension management category. Only two extensions are used regularly: Server Name Indication (SNI) in 77 (19%) applications and Next Protocol Negotiation (NPN) and its successor Application-Layer Protocol Negotiation (ALPN) in 60 (15%) applications. Five other extensions, including Online Certificate Status Protocol (OCSP), are used less frequently, while Heartbeats, PRF, Serverinfo, and Supported Curves are not used at all.

We recommend that many extensions be configured by the system administrator. For example, SNI and OCSP could be enabled system-wide. Additionally, there are few cases where developers need to supply configuration, such as a hostname with SNI or a list of protocols with ALPN. The SSA should implement extensions on behalf of the application and provide an interface for developers to supply configuration information.

### 4.4 Certificate/Key Management

Of the 73 API functions used for managing keys and certificates, 39 (54%) are unused. Another 17 (23%) are used by fewer than five software packages. The remaining functions are heavily used, with a combined call count of 2083 from hundreds of distinct packages. Most of these are used to specify a certificate or private key for the TLS connection. One function verifies that a given private key corresponds to a particular certificate, and two provide decryption passphrases to unlock private keys.

Given that most functions in this category are unused and that all but three of those used are for specifying the locations of certificates and private keys, we recommend that the SSA have simplified options for supplying private key and certificate data. These options should accept both chains and leaf certificates, in line with OpenSSL documentation. The SSA can also check whether a supplied key is valid for the provided certificates, removing the need for developers to do so themselves and reporting relevant errors through return values of key assignment functionality.

### 4.5 Certificate Validation

Under TLS, failing to properly validate a certificate presented by the other endpoint undermines authentication guarantees. Previous research has shown that developers often make mistakes with validation [11, 4, 8]. Our analysis confirms that the certificate validation functions in OpenSSL are heavily used but that developers continue to make mistakes. We found that six packages disable validation entirely and specify no callback for custom validation, indicating a man-in-the-middle vulnerability. We have notified the relevant developers of these issues. Seven packages use `SSL_get_verify_result` but neglect to ensure `SSL_get_peer_certificate` returns a valid certificate, a documented bug in OpenSSL.

Recent work has highlighted the benefits of handling verification in an application-independent manner and under the control of administrator preferences [18, 3]. Given this and the poor track record of applications, we recommend that validation be performed by the SSA, which should implement administrator preferences and provide secure defaults. This includes employing strengthening technologies such as OSCP [22] and CRLs [6]. We make this recommendation with one caveat: if an application needs to validate a certificate based on a hard-coded set or its own root store, it can supply a set of trusted certificates to the SSA.

### 4.6 Session Management

Performing the TLS handshake requires multiple round trips, which can be expensive for latency-sensitive applications. Session caching alleviates this by storing TLS session data for resumption during an abbreviated handshake. Most analyzed packages (299, 73%) do not modify the default session caching mechanisms of OpenSSL. In the remaining 27%, the most common modification is to turn off caching entirely. Other uses disable individual caching features or explicitly retain default settings. Thirty-one packages implement custom session cache handling, primarily for logging and passing session data to other processes, likely to support load balancing for servers.

We recommend that session caching be implemented by the SSA, relieving developers of this burden, with options to disable caching and customize session TTLs. As an OS service, the SSA is uniquely positioned to allow sharing of session state between processes of the same application and can be adapted to support session sharing between instances of an application on different machines.

### 4.7 Configuration

OpenSSL provides configuration options that control the behavior of TLS connections and modes for fine-tuning the TLS implementation, such as indicating when internal buffers should be released or whether to automatically perform renegotiation. Most calls in this category (830, 62%) adjust options. The four most-used options disable vulnerable TLS features and older versions (e.g., compression, SSLv2, SSLv3) and enable all bug workarounds (for interoperability with other TLS implementations). An additional 337 (25%) calls set various modes. Of these, 138 (41%) set a flag that makes I/O operations on a socket block if the handshake has not yet completed, 189 (56%) set flags that modify the `SSL_write` function to behave more like `write`, and 47 (14%) use a flag that reduces the memory footprint of idle TLS connections. There are also 32 calls (2%) to functions that change how many bytes OpenSSL reads during receive operations. Manual inspection reveals that many of these configurations are set by compilation parameters, suggesting that many developers leave these decisions to administrators.

Given that the primary uses of this category are bug workarounds and restricting outdated protocols, and that many are already set through compilation flags, we recommend leaving such configurations to the administrator. Software updates can apply bug workarounds and disable vulnerable protocols in one location, deploying them to all applications automatically. Modes and other configuration settings in this category tend to control subtleties of read and write operations. Under the SSA, I/O semantics are largely determined by the existing POSIX socket standard, so we ignore them.

**USENIX Association**
27th USENIX Security Symposium    803

### 4.8 Non-TLS Protocol-Specific Functions

The remaining categories consist of functions not applicable to the SSA or those trivially mapped to it. The allocation category contains functions such as `SSL_library_init` and `SSL_free`, whose existence is obviated by the SSA because all relevant memory allocation and freeing is performed as part of calls such as `socket` and `close`. The connection management category contains functions that perform connection and I/O operations on sockets. All of these have direct counterparts within the POSIX socket API or combinations of symbols that emulate the behavior, such as `SSL_connect` (equivalent to `connect`) and `SSL_peek` (equivalent to `recv` with the `MSG_PEEK` flag). Another example is `SSL_get_error`, which returns a value similar to `errno`. These functions should be mapped to their POSIX counterparts for the SSA.

The instrumentation and miscellaneous categories contain functionality that monitors raw TLS messages, extracts information from internal data structures, or is scheduled for deprecation.

### 5 The Secure Socket API

We designed the SSA using lessons learned from our study of `libssl` and its usage. The SSA is responsible for automatic management of every TLS category discussed in the previous section, including automatic selection of TLS versions, cipher suites, and extensions. It also performs automatic session management and certificate validation. By using standard network send and receive functions, the SSA automatically and transparently encrypts and decrypts data for applications, passing relevant errors through `errno`. All of these are subject to a system configuration policy with secure defaults, with customization abilities exported to system administrators and developers. Administrators set global policy (and can set policy for individual applications), while developers can choose to further restrict security. Developers can increase security but cannot decrease it.

### 5.1 Usage

Under the Secure Socket API, all TLS functionality is built directly into the POSIX socket API. The POSIX socket API, derived from Berkeley sockets, is portable and extensible, supporting various network communication protocols. TLS fits nicely within this framework, with support for all salient operations integrated into existing functions without the need for additional parameters, in line with our first design goal. When creating a socket, developers select TLS by specifying the protocol as `IPPROTO_TLS`. Data is sent and received through the socket using standard functions such as `send` and `recv`, which will be encrypted and decrypted using TLS, just as network programmers expect their data to be placed inside and removed from TCP segments under `IPPROTO_TCP`. To transparently employ TLS, other functions of the POSIX socket API have specialized TLS behaviors under `IPPROTO_TLS` as well. Table 2 contains a brief description of the POSIX socket API functions with the specific behaviors they adopt under TLS.

To offer concrete examples of SSA utilization, we present code for a simple client and server in Figure 1. Both the client and the server create a socket with the `IPPROTO_TLS` protocol. The client uses the standard `connect` function to connect to the remote host, also employing the `AF_HOSTNAME` address family to indicate the desired hostname. The client sends a plaintext HTTP request to the selected server, which is then encrypted by the SSA before transmission. The response received is also decrypted by the SSA before being placed into the buffer provided to `recv`.

In the server case, the application calls `bind` to give itself a source address of `0.0.0.0` (INADDR_ANY) on port 443. Before calling `listen`,