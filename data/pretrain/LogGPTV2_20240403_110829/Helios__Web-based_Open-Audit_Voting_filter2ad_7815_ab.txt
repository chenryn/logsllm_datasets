$("#main").processTemplate(
{’election’: election_object}
);
3.2 Cryptography in the Browser with
LiveConnect
JavaScript is a complete programming language in which
it is possible to build a multi-precision integer library.
Unfortunately, JavaScript performance for such compu-
tationally intensive operations is poor. Thankfully, it
is possible in modern browsers to access the browser’s
Java Virtual Machine from JavaScript using a technology
called LiveConnect. This is particularly straightforward
in Firefox, where one can write the following JavaScript
code:
var a = new java.math.BigInteger(42);
document.write(a.toString());
and then, from JavaScript still,
invoke all of Java’s
BigInteger methods directly on the object. Modu-
lar exponentiation is a single call, modPow(), and El-
Gamal encryption runs fast enough that it is close to im-
perceptible to the average user. LiveConnect is slightly
more complicated to implement in Internet Explorer and
Safari, though it can be done [18].
3.3 Additional Tricks
Data URIs. At times in the Helios protocol, we need
to produce a printable receipt when the plaintext vote has
not yet been cleared from memory. In order to open a
new window ready for printing without network access,
we use data URIs [14], URIs that contain information
without requiring a network fetch:
receipt
USENIX Association  
17th USENIX Security Symposium 
339
Dynamic Windows. When data URIs are not available
(e.g. Internet Explorer), we can open a new window us-
ing JavaScript, set its MIME type to text/plain, and
dynamically write its content from the calling frame.
var receipt = window.open();
receipt.document.open("text/plain");
receipt.document.write(content);
receipt.document.close();
In Safari and Firefox, this approach yields a new window
in a slightly broken state: the contents cannot be saved to
disk. However, in Internet Explorer, the only browser
that does not support Data URIs, the dynamic window
creation works as expected. Thus, in Firefox and Safari,
Helios uses Data URIs, and in Internet Explorer it uses
dynamic windows.
JSON. As we expect that auditors will want to down-
load election, voter, and bulletin board data for pro-
cessing and verifying, we need a data format that is
easy to parse in most programming languages, includ-
ing JavaScript. XML is one possibility, but we found
that JavaScript Object Notation (JSON) is easier to han-
dle with far less parsing code. JSON allows for data rep-
resentation using JavaScript lists and associative arrays.
For example, a list of voters and their encrypted votes
can be represented as:
[
]
{’name’ : ’Alice’, ’vote’ : ’23423....’},
{’name’ : ’Bob’, ’vote’ : ’823848....’},
...
Libraries exist in all major programming languages for
parsing and generating this data format. In particular, the
format maps directly to arrays and objects in JavaScript,
lists and dictionaries in Python, lists and hashes in Ruby.
4 Helios System Description
We are now ready to discuss the details of the Helios sys-
tem. We begin with a description of the back-end server
architecture. We then consider the four use cases: creat-
ing an election, voting, tallying, and auditing.
All server-side logic is implemented in Python, with
HTML templates rendered using the Cheetah Templat-
ing engine. Many back-end API calls return JSON data
structures using the Simplejson library, and the voting
booth server-side template is, in fact, a single-page web
applications including JavaScript logic and jTemplate
HTML/JavaScript templates.
Application Software. We use the Python Cryptogra-
phy Toolkit for number theory utilities such as prime
number and random number generation. We imple-
mented our own version of El-Gamal in Python, given
our speciﬁc need for re-encryption, which is typically
not supported in cryptographic libraries. We note that
improved performance could likely be gained from opti-
mizing our ﬁrst-pass implementation.
Server Hardware. We host an alpha version of the
Helios software at http://heliosvoting.org.
The server behind that URL is a virtual Ubuntu Linux
server operated by SliceHost. For the tests performed
in Section 5.3, we used a small virtual host with 256
megabytes of RAM and only a fraction of a Xeon proces-
sor, at a cost of $20/month. A larger virtual host would
surely provide better performance, but we wish to show
the practicality of Helios even with modest resources.
4.2 Creating an Election
Only registered Helios users can create elections. Reg-
istration is handled like most typical web sites:
• a user enters an email address, a name, and a desired
• an email with an embedded conﬁrmation link is sent
• the user clicks on the conﬁrmation link to activate
to the given email address.
password.
his account.
A registered user then creates an election with an elec-
tion name, a date and time when voting is expected to
begin, and a date and time when voting is expected to
end. Upon creation, Helios generates and stores a new
El-Gamal keypair for the election. Only the public key is
available to the registered user: Helios keeps the private
key secret. The user who created the election is consid-
ered the administrator.
4.1 Server Architecture
The Helios back-end is a Web application written in the
Python programming language [17], running inside the
CherryPy 3.0 application server, with a Lighttpd web
server. All data is stored in a PostgreSQL database.
Setting up the Ballot. The election is then in “build
mode,” where the ballot can be prepared, reviewed, and
tweaked by the administrative user, as shown in Figure
2. The user can log back in over multiple days to adjust
any aspect of the ballot.
340 
17th USENIX Security Symposium 
USENIX Association
Figure 2: The Helios Election Builder lets an administrative user create and edit ballot questions in a simple web-based interface.
The administrative user can log out and back in at any time to update the election.
Managing Voters. The administrative user can add,
update, and remove voters at will, as shown in Figure 3.
A voter is identiﬁed by a name and an email address, and
is speciﬁc to a given election. Helios generates a ran-
dom 10-character password automatically for each voter.
At any time, the administrator can email voters using the
Helios administrative interface. These emails will au-
tomatically contain the voter’s password, though the ad-
ministrator will not see this password at any time.
Freezing the Election. When ready, the administrative
user freezes the election, at which point the voter list, the
election start and end dates, and the ballot details become
immutable and available for download in JSON form.
The administrative user receives an email from Helios
with the SHA1 hash of this JSON object. The election is
ready for voters to cast ballots. The administrative user
will typically email voters using the Helios administra-
tive interface to let them know that the polls are open.
4.3 Voting
Alice, a voter in a Helios election, receives an email let-
ting her know that the polls are open. This email con-
tains her username (i.e. her email address), her election-
speciﬁc password, the SHA1 hash of the election param-
eters, and the URL that directs her to the Helios voting
booth, as illustrated in Figure 4. It is important to note
that this URL does not contain any identifying informa-
tion: it only identiﬁes the election, as per the vote-casting
protocol in Section 2.1.
The Voting Booth. When Alice follows the voting
booth URL, Helios responds with a single-page web
application. This application, now running in Alice’s
browser, displays a “loading...” message while it down-
loads the election parameters and templates, including
the El-Gamal public key and questions. The page then
displays the election hash prominently, and indicates that
no further network connections will be made until Alice
submits her encrypted ballot. (Alice can set her browser
to “ofﬂine” mode to enforce this.) Every transition is
then handled by a local JavaScript function call and its
associated templates.
Importantly, the JavaScript code
can decide precisely what state to maintain and what
state to discard: the “back” button is not relevant. This is
illustrated in Figure 5.
Filling in the Ballot. Alice can then ﬁll in the bal-
lot, selecting the checkbox by each desired candidate
name, using the “next” and “previous” buttons to nav-
igate between questions. Each click is handled by
JavaScript code which records Alice’s choices in the lo-
cal JavaScript scope. If Alice tries to close her browser
or navigate to a different URL, she receives a warning
that her ballot will be cleared.
Sealing. After Alice has reviewed her options, she can
choose to “seal” her ballot, which triggers the JavaScript
code to encrypt her selection with computationally inten-
sive operations performed via LiveConnect. The SHA1
hash of the resulting ciphertext is then displayed, as
shown in Figure 6.
USENIX Association  
17th USENIX Security Symposium 
341
Figure 3: The Helios voter management interface.
Figure 4: The administrative user can send emails to all voters. Each voter receives her password, which the administrative user
does not see.
342 
17th USENIX Security Symposium 
USENIX Association
Figure 5: The Helios Voting Booth.
Figure 6: Sealing a Helios ballot.
USENIX Association  
17th USENIX Security Symposium 
343
Auditing. Alice can opt to audit her ballot with the
“Audit” button, in which case the JavaScript code reveals
the randomness used in encrypting Alice’s choices. Alice
can save this data to disk and run her own code to ensure
the encryption was correct, or she can use the Python
Ballot Encryption Veriﬁcation (BEV) program provided
by Helios.
Once Alice chooses to audit her ballot and the audit-
ing information is rendered, the JavaScript code clears
its encrypted ballot data structures and returns Alice to
the conﬁrmation screen, where she can either update her
choices or choose to seal her options again with different
randomness and thus a different ciphertext.
Casting.
If Alice chooses instead to cast her ballot, the
JavaScript code clears the plaintext and randomness from
its scope, and presents Alice with a login prompt for
her email address and password.
(If Alice had set her
browser to “ofﬂine” mode, she should bring it back on-
line now that all plaintext information is cleared.) When
Alice submits her login information, the JavaScript code
intercepts the form submission and submits the email,
password, and encrypted vote in a background call, so
that any errors, e.g. a mistyped password, can be re-
ported without clearing the JavaScript scope and thus the
encrypted ballot. When a success code is returned by
the Helios server, the JavaScript code can clear its entire
scope and display a success message. On the server side,
Helios emails Alice with a conﬁrmation of her encrypted
vote, including its SHA1 hash.
Coerce Me! As explained in Section 2, Helios pro-
vides a “Coerce Me!” button to make it clear that online
voting is inherently coercible. This button appears af-
ter ballot sealing, next to the “audit” and “cast” options.
When clicked, Helios opens up a new window with a
mailto: URL that triggers Alice’s email client to open
a composition window containing the entire ballot infor-
mation, including plaintext and randomness that prove
how the ciphertext was formed. Unlike the “Audit” step,
which forces Alice to create a new ciphertext, “Coerce
Me!” allows Alice to continue and cast that very same
encrypted vote for which she obtained proof of encryp-
tion. The distinction between these two steps highlights
the difference between a coercion-free auditing process
that could potentially be used with in-person voting, and
the inherent coercibility of online-only voting which is
made more explicit with the “Coerce Me!” button.
4.4 Anonymization
Once the voting period ends, Helios enables the
anonymization, decryption, and proof features for the
administrative user. Selecting “shufﬂe” will begin the
re-encryption and permutation process. Then, select-
ing “shufﬂe proof” will trigger the mixnet proof with 80
shadow mixes. The administrative user can then opt for
“decrypt”, which will decrypt the shufﬂed ciphertexts,
and “decrypt proof”, which will generate proofs for each
such decryption. Finally, the administrative user can se-
lect “tally” to count up the decrypted votes.
All of these operations are performed on the server
side,
in Python code. The results are stored in the
database and made available for download in JSON form.
Once all proofs are generated and the result is tallied,
the server deletes the permutation, randomness, and se-
cret key for that election. All that is left is the encrypted
votes, their shufﬂing, the resulting decryptions, and the
publicly veriﬁable proofs of integrity. The entire elec-
tion can still be veriﬁed, though no further proofs can be
generated.
4.5 Auditing
Helios provides two veriﬁcation programs, one for ver-
ifying a single encrypted vote produced by the ballot
preparation system with the “audit” option selected, and
another for verifying the shufﬂing, decryption, and tally-
ing of an entire election. Both programs are written in
Python using the Simplejson library for JSON process-
ing, but otherwise only raw Python operations.
Verifying a Single Vote. The Ballot Encryption Veri-
ﬁcation program takes as input the JSON data structure
returned by the voting booth audit process. This data
structure contains a plaintext ballot, its ciphertext, the
randomness used to encrypt it, and the election ID. The
program downloads the election parameters based on the
election ID and outputs:
• the hash of the election, which the voter can check
against that displayed by the voting booth,
• the hash of the ciphertext, which the voter can check
against the receipt she obtained before requesting an
audit,
• the veriﬁed plaintext of the ballot.
Verifying an Election. The Election Tallying Veriﬁca-
tion program takes, as input, an election ID. It down-
loads the election parameters, the bulletin board of cast
votes, shufﬂed votes, shufﬂe proofs, decrypted votes, and
decryption proofs. The veriﬁcation program checks all
proofs, then re-performs the tally based on the decryp-
tions. It eventually outputs the list of voters and their re-
spective encrypted ballot hashes, plus the veriﬁed tally.
This information can be reposted by the auditor, so that
344 
17th USENIX Security Symposium 
USENIX Association
if enough auditors check and re-publish the cast ballot
hashes and tally, participants can be conﬁdent that their
vote was correctly captured, and that the tally was cor-
rectly performed.
5 Discussion
Helios is simpler than most cryptographic voting proto-
cols because it focuses on proving integrity. As a com-
promise, Helios makes weaker guarantees of privacy. In
this section, we review in greater detail the type of elec-
tion for which we expect this compromise to be appropri-
ate, as well as the security model, performance metrics,
and future extensions we can make to improve Helios on
both fronts.
5.1 The Need for Verifying Elections with
Low Coercion Risk
It is legitimate to question whether there truly exist elec-
tions that require the high levels of veriﬁability afforded
by cryptography, while eschewing coercion-resistance
altogether. In fact, we believe that, for a number of on-
line communities that rarely or never meet in the same
physical place:
1. coercion-resistance is futile from the start, given the
remote nature of the voting process, and
2. cryptographic end-to-end veriﬁability is the only vi-
able means of ensuring any level of integrity.
Speciﬁcally, with respect to the auditing argument,
how could a community member remotely verify any-
thing at all pertaining to the integrity of an election pro-
cess? Open-source software is insufﬁcient:
the voter
doesn’t know which software is actually running on the
election server, short of deploying hardware-rooted attes-
tation. Physical observation of a chain-of-custody pro-