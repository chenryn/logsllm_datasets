00 k 02 k P k 00 k M , the ciphertext is then C = X e mod N .
To decrypt, one computes X = C d mod N and then checks
the padding. A padding error occurs if the ﬁrst two bytes of
X are not 00 k 02, there exists a 00 byte among the ﬁrst 11
bytes, or there does not exist a 00 byte at all after the ﬁrst
two bytes. Decryption fails in such a case.
Bleichenbacher [6] showed how to exploit decryption im-
plementations that notify the sender of a ciphertext when
a padding error occurs. Given a challenge ciphertext C ∗
encrypting some unknown message M , the adversary sends
a sequence of adaptively chosen ciphertexts to the oracle,
using the response to learn whether the padding is correct
or not. Bleichenbacher attacks were ﬁrst used against XML
encryption by Jager et al. [16], with improvements shortly
after by Bardou et al. [5]. Below we use the latter’s experi-
mental results to estimate timings of the full attack.
Modern implementations attempt to defend against Ble-
ichenbacher attacks by uniform error reporting, in which
padding errors are not reported diﬀerently from other er-
rors, and by ensuring that decryption runs in essentially the
same time when padding errors occur as when not. We will
show, however, that our side-channel attack framework can
be used in PaaS type settings to re-enable Bleichenbacher
attacks despite such countermeasures.
7.2 Evaluation in a Public PaaS
We demonstrate this attack in DotCloud. The target of
the attack is an active open source project, SimpleSAMLphp
(version 1.12, http://simplesamlphp.org/), which imple-
ments a SAML-based authentication application in PHP
that can be used as either a service provider or an identity
provider.
It is worth noting that recent SimpleSAMLphp
implementations (>v1.9.1) have provided defenses against
the traditional Bleichenbacher attack (see changelog v1.9.1)
by generating uniform error messages and eliminating timing
diﬀerences due to invalid padding in session-key decryption.
As we show in this section, however, these defenses do not
prevent our attack. As we also explain, a recent change in
v1.10 of SimpleSAMLphp to a better padding scheme (RSA-
OAEP) does not prevent our attack either, as it is possible
Figure 5: Attack NFA for case study in Sec. 6. Ini-
tial state q0 indicated by “Start” and accepting states
indicated with double ovals.
T is the maximum
Flush-Reload cycles without transitioning before the
NFA stops accepting new inputs.
gettimeofday() in the procedure linkage table (PLT); the
ﬁrst chunk of the function php_combined_lcg(); and the
chunks that contain the entry point of gettimeofday() in
the PLT. A complete execution path of the password reset
action that initializes the PRNG in the PHP application is
c2 → c1 → c2 → c1 → c3 → c1 → c4 → c1 → c5 (indices as
shown in Fig. 5). The second password reset action follows
the path c3 → c1 → c4 → c1. The attack NFA is shown in
Fig. 5.
In our experiments, the adversary and victim measure-
ments of gettimeofday() sometimes diﬀered by one bit; the
response time (about 0.3µs) of the system call may at most
cause a single microsecond discrepancy. Thus, to recover the
pid upon initialization of the PRNG the adversary needed
to perform a (trivial) oﬄine brute-force guessing attack in
a search space of size 220 = 216 × 24 (space 216 for the pid
and 24 for four invocations of gettimeofday()).
Once the adversary recovers the pid, a password-reset at-
tack against a victim requires only two invocations of get-
timeofday(), and thus, in our experiments, an online attack
against a (tiny) space of size 4 = 22. We emphasize that
because the adversary is performing password reset and not
password guessing, there is no account lockdown in response
to an incorrect guess. So the adversary in our experiments
could quickly guess the correct embedded secret R in the
URL of the password link sent to the victim and then reset
the victim’s password.
7. CASE STUDY 3: SAML-BASED SINGLE
SIGN-ON ATTACKS
In this ﬁnal case study, we use our side-channel attack
framework to instantiate a padding error oracle suﬃcient for
mounting a Bleichenbacher attack [6] against PKCS#1 v1.5
RSA encryption as used in XML. Bleichenbacher attacks al-
low the decryption of a target RSA ciphertext (although not
key recovery). While this class of attacks has been known
since 1998 and the insecurity of XML encryption in the face
of a kind of Bleichenbacher attack was shown by Jager et
999Service Provider
(SP)
User Agent
Identity Provider
(IdP)
1. Request target resource
(Discover IdP)
2. HTTP Redirect Binding
(SAML request encoded into (cid:10)
Location header)
5. HTTP POST Binding
(Submits form in HTTP POST to SP)
6. Redirect to target resource
3. HTTP Redirect Binding
(SAML request redirected to Idp)
(User Login)
4. HTTP POST Binding
(SAML response returned in XHTML 
form targeted at SP)
Figure 6: The targeted SAML 2.0 protocol.
to force SimpleSAMLphp to roll back to use PKCS#1 v1.5
instead as long as it is not explicitly disallowed.
A set of protocol bindings [26] and proﬁles [27] are deﬁned
in the SAML 2.0 speciﬁcation. We investigated the default
protocol bindings implemented in SimpleSAMLphp for the
web browser SSO proﬁle. As shown in Fig. 6, a web browser
acting as a user agent interacts with the service provider
(SP) to access resources with the identify provider (IdP) for
authentication. Upon receiving a resource access request,
the SP issues an  message via HTTP redi-
rect binding. The message in XML format is uncompressed
and then base64-encoded in the redirect URL query string.
After authenticating the user’s identity, the IdP will return a
SAML response message via HTTP POST binding, in which
a signed and encrypted XML ﬁle is base64-encoded as a
POST parameter which is then sent by the user agent to
the service provider using the HTTP POST method.
The padding oracle. In the SAML 2.0 core speciﬁcation,
XML encryption and signing work as follows. The message
is ﬁrst signed, and then encrypted under a symmetric ses-
sion key. The session key is in turn encrypted. This means
that the XML signature is only validated after performing
the RSA decryption. While the default padding for encryp-
tion is RSA-OEAP, because the padding type is speciﬁed
in the assertion itself, it is possible to modify the assertion
and force the service provider to roll back to PKCS#1 v1.5
padding. The server generates an error whether or not the
PKCS padding is correct, to eliminate timing channels. But
we will now show how to use the side-channel attack to dif-
ferentiate between code paths associated with padding errors
and non-errors, enabling a Bleichenbacher-style attack.
Attack details and results. The victim account operated
a PHP application integrated with the latest stable version
of SimpleSAMLphp. The PaaS environment ran OpenSSL
version 0.9.8k (which we could not change) and was invoked
by the victim application. As such, the adversary monitored
the shared library libcrypto.so, a component of OpenSSL,
and speciﬁcally the chunks associated with the basic blocks
of function RSA_padding_check_PKCS1_type_2() that inter-
nally reports a padding error by calling ERR_put_error().
As the padding check procedure is only used during the RSA
decryption, other operations do not invoke these functions
and it is thus suﬃcient to monitor only the ﬁrst chunk of
each of the two functions. In practice, though, we found it
helped to monitor the ﬁrst two chunks of the function to
Figure 7: Attack NFA for case study in Sec. 7. Ini-
tial state q0 indicated by “Start” and accepting states
indicated with double ovals.
T is the maximum
Flush-Reload cycles without transitioning before the
NFA stops accepting new inputs.
increase the chance of capturing the events. The adversary
repeated step 5 in Fig. 6 with manipulated ciphertexts and
while applying the side-channel attack framework to detect
the occurrence of padding errors.
The attack NFA is shown in Fig. 7. We continuously
sent 10,000 requests with conformant padding and 10,000
requests with non-conformant padding, and report the rate
of acceptance by the NFA. The results are shown in Table 4.
The average time for making one request and padding error
detection in this experiment was 0.544 seconds. Optimized
attack software could achieve a much higher request rate.
The results indicate that we only had one-sided errors: an
execution path accepted by the attack NFA correlated with
a non-conformant padding with 100% accuracy. Therefore,
the best strategy for the adversary is to send k requests
to the padding oracle for each padding, and stop once an
execution is accepted by the attack NFA and consider it to
be non-conformant padding. If none of the k requests are
accepted by the NFA, then no padding error occurred.
This approach will yield no false positives (i.e., false ap-
pearances of non-conformant padding). Given the error rate
of 12% and assuming errors are independent of ciphertext
values, the probability of a false negative (i.e., failure to ob-
serve non-conformant padding) in this procedure is (.12)k.
Bardou et al. [5] estimated that their modiﬁed Bleichen-
bacher attack against 2048-bit RSA keys could require about
335,065 queries. We take (.12)k to be an upper bound on the
probability of a false negative for non-conformant padding
across k queries. Thus for all queries, an error bound is
335, 065(.12)k ; a choice of k = 7 yields an error probability
of less than 1% for 335, 065 × 7 = 2, 345, 455 total queries.
This is about the same number of queries as the original
Bleichenbacher attack, and signiﬁcantly better than, for ex-
ample, the same estimate of Jager et al. [16] that would
require about 85 million queries and only works against old
versions of SimpleSAMLphp.
g Non-conformant
n
i
d
d
a
P
Conformant
Attack NFA
Accepted Rejected
1200
(12%)
10000
(100%)
8800
(88%)
0
(0%)
Table 4: Confusion matrix for padding error detec-
tion. The adversary has only one-sided errors, 12%
of the time failing to observe a padding error.
10008. DISCUSSION
8.1 Ethical Considerations
The experiments discussed in Sec. 4–7 were run on pro-
duction PaaS platforms. As such, our experiments were de-
signed to conform with PaaS provider acceptable use, the
law, and proper ethics.
Our attacks only targeted tenants running accounts that
we setup and controlled, and no information about other
customers was ever collected in our experiments. Our at-
tacker instances did not conduct Flush-Reload attacks in-
discriminately, but rather these were carefully timed to coin-
cide with requests that we initiated to our victim instances.
In this way, we limited the risk of our attacker instances
observing activities of tenants other than our own.
It is possible that another tenant’s programs made use of
the same shared executable as our attacker and victim, in
which case there is a concern that other tenants might expe-
rience degraded memory hierarchy performance as compared
to running while co-located with diﬀerent tenants. More-
over, the acceptable use policies of the clouds on which we
demonstrated our attacks include general requirements that
we not interfere with other users’ enjoyment of their services,
which could be interpreted to preclude our demonstrations
if they slowed down other tenants substantially as a side ef-
fect. We therefore designed our experiments so that they
do not cause undue harm and, speciﬁcally, do not degrade
performance of such bystanders signiﬁcantly more than their
performance could be degraded by other workloads.
To ensure no undue harm, we ran local micro benchmarks
to evaluate the possible overhead observed by a bystander
due to our attacks. For example, to gain conﬁdence that the
attack of Sec. 6 would introduce minimal overhead on a by-
stander, in one container we constructed an attacker appli-
cation that, in each Flush-Reload cycle, monitored every
chunk monitored in any state of the attack NFA of Fig. 5.
The “bystander” in another container ran a web server host-
ing a dynamic web page that was artiﬁcially constructed to
touch (i.e., execute some instruction in) every chunk moni-
tored by the adversary before returning. We forced the at-
tacker application and the bystander to share the last level
cache in all experiments.
We conﬁgured a separate machine in the same LAN to rep-
resent a client that repeatedly issued HTTP requests (in the
same HTTP session) to the dynamic web page served by the
bystander. To measure the bystander’s performance degra-
dation resulting from the attacker application’s activity, we
instrumented the client with httperf and apachebench. In
the absence of the attacker application, the client received
responses with an average latency of .306ms, and the through-
put of the bystander was 461 requests per second. With the
attacker application active, the results were nearly identical:
an average latency of .307ms and, again, 461 requests per
second. Given the conservative nature of these experiments
(with the attacker application monitoring more chunks than
in the actual attack, and the bystander touching all of them
per request), we concluded that our attack demonstrations
posed negligible risk to bystanders.
Finally, we attempted to inform aﬀected parties well in ad-
vance of publicly disclosing the vulnerabilities documented
here. Speciﬁcally, we disclosed our ﬁndings to selected cloud
operators and software vendors directly, and to the CERT
(http://cert.org) for dissemination more broadly, starting
roughly six months prior to publication. Some vendors have
made changes to address these issues; e.g., SimpleSAMLphp
will blacklist PKCS#1 v1.5 by default in version 1.13.0 [10].
8.2 Extending the Attacks
Attacks in IaaS clouds. We believe our NFA-based at-
tack framework can work in IaaS clouds as well, as long as
memory de-duplication is enabled and memory pages that
contain executables are shared between tenants. For in-
stance, Irazoqui et al. [15] utilized a similar Flush-Reload
side channel (a special case of our NFA-based framework)
in a cross-VM context to break AES keys. However, to the