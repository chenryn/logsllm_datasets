top of a processor conﬁgured with the correct node key
(and of course by the software provider of the module).
As a consequence, if an attacker succeeds in completing
a successful attestation or communication with the soft-
ware provider, he must have done it with the help of the
actual module. In other words, within our attacker model,
only API-level attacks against the module are possible,
and it is indeed possible to develop modules that are vul-
nerable to such attacks, for instance if a module offers a
function to compute MACs with its module key on arbi-
trary input data. But if the module developer avoids such
API-level attacks, the security of Sancus against attackers
conforming to our attacker model follows.
The security of secure linking is the most intricate secu-
rity property of Sancus. It follows again from the fact that
computation of MACs with the module key is only possi-
ble by a module with the correct identity running on top
of a processor conﬁgured with the correct node key, or by
the software provider of the module. Hence, an attacker
can not forge MACs of other modules that a module wants
to link to and call. Because of our technique for separa-
tion of uses of MACs (Section 3.1), he can also not do
this by means of an API level attack against the module.
As a consequence, if a module implements a MAC-verify
check for any module it calls13, this veriﬁcation can only
be successful for modules for which the software provider
has deployed the MAC. Hence the module will only call
modules that its provider has authorized it to call.
6 Related Work
Ensuring strong isolation of code and data is a challenging
problem. Many solutions have been proposed, ranging
from hardware-only to software-only mechanisms, both
for high-end and low-end devices.
Isolation in high-end devices. The Multics [9] operat-
ing system marked the start of the use of protection rings
to isolate less trusted software. Despite decades of re-
search, high-end devices equipped with this feature are
still being attacked successfully. More recently, research
has switched to focus on the isolation of software mod-
ules with a minimal TCB by relying on recently added
hardware support. McCune et al. propose Flicker [39], a
13Note that our compiler automatically adds these checks.
system that relies on a TPM chip and trusted computing
functionality of modern CPUs, to provide strong isolation
of modules with only a TCB of 250 LOCs. Subsequent
research [3, 38, 40, 42] focuses on various techniques to
reduce the number of TPM accesses and signiﬁcantly in-
crease performance, for example by taking advantage of
hardware support for virtual machines.
The idea of deriving module speciﬁc keys from a mas-
ter key using (a digest of) the module’s code is also used
by the On-board Credentials project [27]. They use exist-
ing hardware features to enforce the isolated execution of
credential programs and securely store secret keys. Only
one credential program can effectively be loaded at any
single moment but the concept of families is introduced
to be able to share secrets between different programs.
Although secure communication is implemented using
symmetric cryptography, they rely on public key cryptog-
raphy during the deployment process.
Isolation in low-end devices. While recent research
results on commodity computing platforms are promising,
the hardware components they rely on require energy
levels that signiﬁcantly exceed what is available to many
embedded devices such as pacemakers [22] and sensor
nodes. A lack of strong security measures for such devices
signiﬁcantly limits how they can be applied and vendors
may be required to develop closed systems or leave their
system vulnerable to attack.
Sensor operating systems and applications, for exam-
ple, were initially compiled into a monolithic and static
image without safety considerations, as in early versions
of TinyOS [34]. The reality that sensor deployments are
long-lived, and that the full set of modules and their de-
tailed functionality is often unknown at development time,
resulted in dynamic modular operating systems such as
SOS [23] or Contiki [12]. As stated in the introduction of
this paper, the availability of networked modular update
capability creates new threats, particularly if the software
modules originate from different stakeholders and can
no longer be fully trusted. Many ideas have been put
forward to address the safety concerns of these shared
environments, and solutions to provide memory protec-
tion, isolation and (fair) multithreading have appeared.
t-kernel [21] rewrites code on the sensor at load time.
Coarse-grained memory protection (basically MMU em-
ulation) is available for the SOS operating system by
sandboxing in the Harbor system [30] through a combi-
nation of backend compile time rewriting and run time
checking on the sensor. Safe TinyOS [8] equally uses a
combination of backend compile time analysis and mini-
mal run time error handlers to provide type and memory
safety. Java’s language features and the Isolate mecha-
nism are used on the Sun SPOT embedded platform using
the Squawk VM [41]. SenShare [33] provides a virtual
492  22nd USENIX Security Symposium 
USENIX Association
machine for TinyOS applications. While these proposed
solutions do not require any hardware modiﬁcations, they
all incur a software-induced overhead. Moreover, third-
party software providers must rely on the infrastructure
provider to correctly rewrite modules running on the same
device.
To
increase
of
security
embedded
devices,
Strackx et al. [43] introduced the idea of a program-
counter based access control model, but without
providing any implementation. Agten et al. [1] prove that
isolation of code and data within such a model only relies
on the vendor of the module and cannot be inﬂuenced
by other modules on the same system. More recently
El Defrawy et al. [14] implemented hardware support
that allows attestation that a module executed correctly
without any interference, based on a similar access
control model. While this is a signiﬁcant step forward,
it does not provide isolation as sensitive data cannot be
kept secret from other modules between invocations.
7 Conclusion
The increased connectivity and extensibility of networked
embedded devices as illustrated for instance by the trend
towards decoupling applications and platform in sensor
networks leads to exciting new applications, but also to
signiﬁcant new security threats. This paper proposed a
novel security architecture called Sancus, that is low-cost
yet provides strong security guarantees with a very small,
hardware-only, TCB.
8 Availability
To ensure reproducibility and veriﬁability of our re-
sults, we make the hardware design and the software
of our prototype publicly available. All source ﬁles,
as well as binary packages and documentation can
be found at https://distrinet.cs.kuleuven.be/
software/sancus/.
9 Acknowledgments
This work has been supported in part by the Intel Lab’s
University Research Ofﬁce. This research is also partially
funded by the Research Fund KU Leuven, and by the EU
FP7 project NESSoS. With the ﬁnancial support from the
Prevention of and Fight against Crime Programme of the
European Union (B-CCENTRE).
References
[1] AGTEN, P., STRACKX, R., JACOBS, B., AND PIESSENS, F. Se-
cure compilation to modern processors. In 2012 IEEE 25th Com-
puter Security Foundations Symposium (CSF 2012) (Los Alamitos,
CA, USA, 2012), IEEE Computer Society, pp. 171–185.
[2] ANDERSON, R. J., AND KUHN, M. G. Low cost attacks on tam-
per resistant devices. In Proceedings of the 5th International Work-
shop on Security Protocols (London, UK, UK, 1998), Springer-
Verlag, pp. 125–136.
[3] AZAB, A., NING, P., AND ZHANG, X. Sice: a hardware-level
strongly isolated computing environment for x86 multi-core plat-
forms. In Proceedings of the 18th ACM conference on Computer
and communications security (2011), ACM, pp. 375–388.
[4] BELLARE, M., CANETTI, R., AND KRAWCZYK, H. Keying
hash functions for message authentication. In Proceedings of the
16th Annual International Cryptology Conference on Advances
in Cryptology (London, UK, UK, 1996), CRYPTO ’96, Springer-
Verlag, pp. 1–15.
[5] BOGDANOV, A., KNEZEVIC, M., LEANDER, G., TOZ, D.,
VARICI, K., AND VERBAUWHEDE, I. Spongent: The design
space of lightweight cryptographic hashing. vol. 99, IEEE Com-
puter Society, p. 1.
[6] BONEH, D., DEMILLO, R. A., AND LIPTON, R. J. On the
importance of eliminating errors in cryptographic computations.
J. Cryptology 14 (2001), 101–119.
[7] CASTELLUCCIA, C., FRANCILLON, A., PERITO, D., AND SORI-
ENTE, C. On the difﬁculty of software-based attestation of em-
bedded devices. In Proceedings of the 16th ACM conference on
Computer and communications security (New York, NY, USA,
2009), CCS ’09, ACM, pp. 400–409.
[8] COOPRIDER, N., ARCHER, W., EIDE, E., GAY, D., AND
REGEHR, J. Efﬁcient memory safety for TinyOS. In Proceed-
ings of the 5th international conference on Embedded networked
sensor systems (New York, NY, USA, 2007), SenSys ’07, ACM,
pp. 205–218.
[9] CORBATO, F., AND VYSSOTSKY, V. Introduction and overview of
the Multics system. In Proceedings of the November 30–December
1, 1965, Fall joint computer conference, part I (1965), ACM,
pp. 185–196.
[10] DEVRIESE, D., AND PIESSENS, F. Noninterference Through
Secure Multi-Execution. In Proceedings of the IEEE Symposium
on Security and Privacy (2010), pp. 109–124.
[11] DOLEV, D., AND YAO, A. C. On the security of public key
protocols. IEEE Transactions on Information Theory 29, 2 (1983),
198–208.
[12] DUNKELS, A., FINNE, N., ERIKSSON, J., AND VOIGT, T. Run-
time dynamic linking for reprogramming wireless sensor networks.
In Proceedings of the 4th international conference on Embedded
networked sensor systems (New York, NY, USA, 2006), SenSys
’06, ACM, pp. 15–28.
[13] DYO, V., ELLWOOD, S. A., MACDONALD, D. W., MARKHAM,
A., MASCOLO, C., P ´ASZTOR, B., TRIGONI, N., AND
WOHLERS, R. Wildlife and environmental monitoring using
RFID and WSN technology. In Proceedings of the 7th ACM Con-
ference on Embedded Networked Sensor Systems (New York, NY,
USA, 2009), SenSys ’09, ACM, pp. 371–372.
[14] ELDEFRAWY, K., FRANCILLON, A., PERITO, D., AND TSUDIK,
G. SMART: Secure and Minimal Architecture for (Establishing
a Dynamic) Root of Trust. In NDSS 2012, 19th Annual Network
and Distributed System Security Symposium, February 5-8, San
Diego, USA (San Diego, UNITED STATES, 02 2012).
[15] ERLINGSSON, U., YOUNAN, Y., AND PIESSENS, F. Low-level
software security by example. In Handbook of Information and
Communication Security. Springer, 2010.
[16] FAROOQ, M. O., AND KUNZ, T. Operating systems for wireless
sensor networks: A survey. Sensors 11, 6 (2011), 5900–5930.
USENIX Association  
22nd USENIX Security Symposium  493
[17] FRANCILLON, A., AND CASTELLUCCIA, C. TinyRNG: A cryp-
tographic random number generator for wireless sensors network
nodes. In In Modeling and Optimization in Mobile, Ad Hoc and
Wireless Networks and Workshops, 2007. WiOpt 2007. 5th Inter-
national Symposium on (2007), pp. 1–7.
[18] FRANCILLON, A., AND CASTELLUCCIA, C. Code injection
attacks on Harvard-architecture devices. In Proceedings of the
15th ACM conference on Computer and communications security
(New York, NY, USA, 2008), CCS ’08, ACM, pp. 15–26.
[19] GIANNETSOS, T., DIMITRIOU, T., AND PRASAD, N. R. Self-
propagating worms in wireless sensor networks. In Proceedings of
the 5th international student workshop on Emerging networking
experiments and technologies (New York, NY, USA, 2009), Co-
Next Student Workshop ’09, ACM, pp. 31–32.
[20] GIRARD, O.
openMSP430.
project,openmsp430.
http://opencores.org/
[21] GU, L., AND STANKOVIC, J. A. t-kernel: providing reliable OS
support to wireless sensor networks. In Proceedings of the 4th
international conference on Embedded networked sensor systems
(Boulder, Colorado, USA, 2006), ACM, pp. 1–14.
[22] HALPERIN, D., HEYDT-BENJAMIN, T., RANSFORD, B.,
CLARK, S., DEFEND, B., MORGAN, W., FU, K., KOHNO, T.,
AND MAISEL, W. Pacemakers and implantable cardiac deﬁbrilla-
tors: Software radio attacks and zero-power defenses. In Security
and Privacy, 2008. SP 2008. IEEE Symposium on (2008), Ieee,
pp. 129–142.
[23] HAN, C.-C., KUMAR, R., SHEA, R., KOHLER, E., AND SRI-
VASTAVA, M. A dynamic operating system for sensor nodes. In
Proceedings of the 3rd international conference on Mobile systems,
applications, and services (New York, NY, USA, 2005), MobiSys
’05, ACM, pp. 163–176.
[24] HEINZELMAN, W. B., MURPHY, A. L., CARVALHO, H. S.,
AND PERILLO, M. A. Middleware to support sensor network
applications. IEEE Network 18, 1 (2004), 6–14.
[25] KOCHER, P. C. Timing attacks on implementations of Difﬁe-
Hellman, RSA, DSS, and other systems. In Proceedings of the
16th Annual International Cryptology Conference on Advances
in Cryptology (London, UK, UK, 1996), CRYPTO ’96, Springer-
Verlag, pp. 104–113.
[26] KOCHER, P. C., JAFFE, J., AND JUN, B. Differential power anal-
ysis. In Proceedings of the 19th Annual International Cryptology
Conference on Advances in Cryptology (London, UK, UK, 1999),
CRYPTO ’99, Springer-Verlag, pp. 388–397.
[27] KOSTIAINEN, K., EKBERG,
J.-E., ASOKAN, N., AND
RANTALA, A. On-board credentials with open provisioning. In
Proceedings of the 4th International Symposium on Information,
Computer, and Communications Security (New York, NY, USA,
2009), ASIACCS ’09, ACM, pp. 104–115.
[28] KRAWCZYK, H., AND ERONEN, P. HMAC-based extract-and-
expand key derivation function (HKDF). http://tools.ietf.
org/html/rfc5869.
[29] KUMAR, P., AND LEE, H.-J. Security issues in healthcare appli-
cations using wireless medical sensor networks: A survey. Sensors
12, 1 (2011), 55–91.
[30] KUMAR, R., KOHLER, E., AND SRIVASTAVA, M. Harbor:
software-based memory protection for sensor nodes. In Proceed-
ings of the 6th international conference on Information processing
in sensor networks (New York, NY, USA, 2007), IPSN ’07, ACM,
pp. 340–349.
[31] LEE, Y. K., SAKIYAMA, K., BATINA, L., AND VERBAUWHEDE,
I. Elliptic-curve-based security processor for RFID. Computers,
IEEE Transactions on 57, 11 (nov. 2008), 1514 –1527.
[32] LEIGHTON, F. T., AND MICALI, S. Secret-key agreement with-
out public-key cryptography. In Proceedings of the 13th Annual
International Cryptology Conference on Advances in Cryptology
(London, UK, UK, 1994), CRYPTO ’93, Springer-Verlag, pp. 456–
479.
[33] LEONTIADIS,
I., EFSTRATIOU, C., MASCOLO, C., AND
CROWCROFT, J. Senshare: transforming sensor networks into
multi-application sensing infrastructures. In Proceedings of the
9th European conference on Wireless Sensor Networks (Berlin,
Heidelberg, 2012), EWSN’12, Springer-Verlag, pp. 65–81.
[34] LEVIS, P. Experiences from a decade of tinyos development. In
Proceedings of the 10th USENIX conference on Operating Systems
Design and Implementation (Berkeley, CA, USA, 2012), OSDI’12,
USENIX Association, pp. 207–220.
[35] LIGATTI, J., BAUER, L., AND WALKER, D. Edit automata:
enforcement mechanisms for run-time security policies. Interna-
tional Journal of Information Security 4, 1-2 (2005), 2–16.
[36] LLVM DEVELOPER GROUP. Clang. http://clang.llvm.
org/.
[37] LLVM DEVELOPER GROUP. LLVM. http://llvm.org/.
[38] MCCUNE, J. M., LI, Y., QU, N., ZHOU, Z., DATTA, A.,
GLIGOR, V., AND PERRIG, A. TrustVisor: Efﬁcient TCB re-
duction and attestation. In Proceedings of the IEEE Symposium
on Security and Privacy (May 2010).
[39] MCCUNE, J. M., PARNO, B., PERRIG, A., REITER, M. K.,
AND ISOZAKI, H. Flicker: An execution infrastructure for TCB
minimization. In Proceedings of the ACM European Conference
in Computer Systems (EuroSys) (Apr. 2008), ACM, pp. 315–328.
[40] SAHITA R, WARRIER U., D. P. Protecting Critical Applications
on Mobile Platforms. Intel Technology Journal 13 (2009), 16–35.
[41] SIMON, D., CIFUENTES, C., CLEAL, D., DANIELS, J., AND
WHITE, D. Java™ on the bare metal of wireless sensor devices:
the squawk java virtual machine. In VEE (2006), H.-J. Boehm and
D. Grove, Eds., ACM, pp. 78–88.
[42] STRACKX, R., AND PIESSENS, F. Fides: Selectively hardening
software application components against kernel-level or process-
level malware. In Proceedings of the 19th ACM Conference on
Computer and Communications Security (CCS 2012), (Oct. 2012),
ACM Press, pp. 2–13.
[43] STRACKX, R., PIESSENS, F., AND PRENEEL, B. Efﬁcient iso-
lation of trusted subsystems in embedded systems. In Lecture
Notes of the Institute for Computer Sciences, Social-Informatics
and Telecommunications Engineering: Security and Privacy in
Communication Networks (September 2010), vol. 50, Springer,
pp. 1–18.
[44] U.S. CUSTOMS AND BORDER PROTECTION. C-TPAT. http:
//www.cbp.gov/ctpat.
[45] VIEGA, J., AND THOMPSON, H. The state of embedded-device
security (spoiler alert: It’s bad). Security Privacy, IEEE 10, 5
(Sept.-Oct. 2012), 68 –70.
[46] WERNER-ALLEN, G., LORINCZ, K., JOHNSON, J., LEES, J.,
AND WELSH, M. Fidelity and yield in a volcano monitoring
sensor network. In Proceedings of the 7th symposium on Operating
systems design and implementation (Berkeley, CA, USA, 2006),
OSDI ’06, USENIX Association, pp. 381–396.
[47] YOUNAN, Y., JOOSEN, W., AND PIESSENS, F. Runtime counter-
measures for code injection attacks against c and c++ programs.
ACM Comput. Surv. 44, 3 (June 2012), 17:1–17:28.
[48] Z ¨OLLER, S., REINHARDT, A., MEYER, M., AND STEINMETZ,
R. Deployment of wireless sensor networks in logistics potential,
requirements, and a testbed. In Proceedings of the 9th GI/ITG
KuVS Fachgespr¨ach Drahtlose Sensornetze (Sep 2010), R. Kolla,
Ed., Julius-Maximilians-Universit¨at W¨urzburg, pp. 67–70.
494  22nd USENIX Security Symposium 
USENIX Association