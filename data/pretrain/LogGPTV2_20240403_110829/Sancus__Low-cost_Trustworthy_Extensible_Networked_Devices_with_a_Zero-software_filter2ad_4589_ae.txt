### Top of a Processor Configured with the Correct Node Key

For a processor to be correctly configured, it must be set up with the appropriate node key, and this setup is typically provided by the software module's vendor. If an attacker manages to complete a successful attestation or communication with the software provider, it implies that they did so with the assistance of the actual module. In our threat model, only API-level attacks against the module are feasible. It is possible to develop modules that are vulnerable to such attacks, for instance, if a module offers a function to compute Message Authentication Codes (MACs) with its module key on arbitrary input data. However, if the module developer avoids these API-level vulnerabilities, Sancus remains secure against attackers conforming to our threat model.

### Secure Linking in Sancus

The security of secure linking is the most intricate security property of Sancus. This security follows from the fact that the computation of MACs with the module key is only possible by a module with the correct identity running on a processor configured with the correct node key, or by the software provider of the module. Consequently, an attacker cannot forge MACs of other modules that a module intends to link to and call. Due to our technique for separating the uses of MACs (Section 3.1), an attacker also cannot achieve this through an API-level attack against the module. Therefore, if a module implements a MAC-verify check for any module it calls, this verification can only be successful for modules for which the software provider has deployed the MAC. As a result, the module will only call other modules that its provider has authorized.

### Related Work

Ensuring strong isolation of code and data is a challenging problem. Many solutions have been proposed, ranging from hardware-only to software-only mechanisms, for both high-end and low-end devices.

#### Isolation in High-End Devices

The Multics operating system [9] introduced the use of protection rings to isolate less trusted software. Despite decades of research, high-end devices with this feature continue to be successfully attacked. More recent research has focused on isolating software modules with a minimal Trusted Computing Base (TCB) using modern hardware support. For example, McCune et al. propose Flicker [39], a system that leverages a TPM chip and trusted computing functionality of modern CPUs to provide strong isolation with a TCB of only 250 LOCs. Subsequent research [3, 38, 40, 42] has explored various techniques to reduce the number of TPM accesses and significantly increase performance, such as taking advantage of hardware support for virtual machines.

The On-board Credentials project [27] also uses the concept of deriving module-specific keys from a master key using a digest of the module’s code. They enforce isolated execution of credential programs and securely store secret keys, allowing only one credential program to be loaded at any given time. Although secure communication is implemented using symmetric cryptography, they rely on public key cryptography during the deployment process.

#### Isolation in Low-End Devices

While recent research on commodity computing platforms is promising, the hardware components they rely on often require energy levels that exceed what is available to many embedded devices, such as pacemakers [22] and sensor nodes. The lack of strong security measures for such devices limits their applications, and vendors may be forced to develop closed systems or leave their systems vulnerable to attacks.

Sensor operating systems and applications, such as early versions of TinyOS [34], were initially compiled into a monolithic and static image without safety considerations. The need for dynamic modular operating systems, such as SOS [23] and Contiki [12], arose due to the long-lived nature of sensor deployments and the unknown set of modules and their detailed functionalities at development time. The availability of networked modular update capabilities introduces new threats, particularly when software modules originate from different stakeholders and can no longer be fully trusted.

Several solutions have been proposed to address these safety concerns, including memory protection, isolation, and fair multithreading. For example, t-kernel [21] rewrites code on the sensor at load time, while Coarse-grained memory protection (essentially MMU emulation) is available for the SOS operating system through the Harbor system [30]. Safe TinyOS [8] uses a combination of backend compile-time analysis and minimal runtime error handlers to provide type and memory safety. Java’s language features and the Isolate mechanism are used on the Sun SPOT embedded platform with the Squawk VM [41]. SenShare [33] provides a virtual machine for TinyOS applications. While these solutions do not require hardware modifications, they all incur software-induced overhead, and third-party software providers must rely on the infrastructure provider to correctly rewrite modules running on the same device.

To enhance the security of embedded devices, Strackx et al. [43] introduced a program-counter-based access control model, but without providing an implementation. Agten et al. [1] proved that the isolation of code and data within such a model relies solely on the module vendor and cannot be influenced by other modules on the same system. More recently, El Defrawy et al. [14] implemented hardware support that allows attestation of correct module execution without interference, based on a similar access control model. While this is a significant step forward, it does not provide complete isolation as sensitive data cannot be kept secret from other modules between invocations.

### Conclusion

The increased connectivity and extensibility of networked embedded devices, as illustrated by the trend towards decoupling applications and platforms in sensor networks, leads to exciting new applications but also to significant new security threats. This paper proposes a novel security architecture called Sancus, which is low-cost yet provides strong security guarantees with a very small, hardware-only TCB.

### Availability

To ensure reproducibility and verifiability of our results, we make the hardware design and the software of our prototype publicly available. All source files, binary packages, and documentation can be found at https://distrinet.cs.kuleuven.be/software/sancus/.

### Acknowledgments

This work has been supported in part by the Intel Lab’s University Research Office. This research is also partially funded by the Research Fund KU Leuven and by the EU FP7 project NESSoS. Financial support was also provided by the Prevention of and Fight against Crime Programme of the European Union (B-CCENTRE).

### References

[References are listed as in the original text, with no changes made.]