A1, A3, A4 such that advpf−cre
r2t(cid:16)3 · 2−m + 2s · advprf
h
(A1)(cid:17) + advrka
+advprf
h
(A3) + 4v2ℓ · advprf
(A4) +
h
(A2)
bh
2v2
2t +
v2
2κ
where A1 and A2 make at most 2 queries and have time-complexity T , A3 makes 2v
queries with time-complexity T and A4 makes at most 2 queries with time-complexity
O(ℓ · Th).
When the key is not longer than a block, similarly to theorem 5, we could establish
is small for sha-1, but it is greater than 1 in the case of sha-384, since b = 2κ and
a security result where there would be the termp22κ(2−m + ε) for some ε. This term
m ≤ b. Therefore, we adapt the security hypothesis and assume thatbh is a prf resistant
against related key attacks when it is keyed with a bit string of min-entropy at least
m (m = κ for the classical rka). That is, the aim and the power of the m-rka are
the same as the ones of a classical rka-adversary, excepted that at the beginning of
the game, the m-rka adversary generates an eﬃciently samplable distribution of min-
entropy at least m, gives it to the challenger and the latter chooses the key according
14
bh,Φ
(A)
to this distribution. We say that bh is resistant against m-rka and note advm−rka
the advantage of a m-rka adversary againstbh.
This assumption cannot be reduced to the h prf-security against rka. Indeed, the
prf assumption requires that the key is uniformly distributed and a good prf for a
uniformly distributed key is not necessary a good prf for a high-entropy key. Consider
the following example. Let f from {0, 1}n × {0, 1}n to {0, 1}n be the function family
deﬁned by fK(x) = K ⊕ x. If K is chosen uniformly at random in {0, 1}n, the function
family f is a perfect random function family against adversaries which are limited to
ask one query. But if K = K ′k0 where K ′ is chosen uniformly in {0, 1}n−1, K is a
n-bit string with min-entropy n − 1 and f is not secure any more against adversaries
which are limited to ask one query, since the f output least signiﬁcant bit can be
guessed.
Theorem 13. Let ipad and opad be two ﬁxed b-bit string, let Φ = {∆ipad, ∆opad} and
let h be a function family from {0, 1}κ × {0, 1}b to {0, 1}κ which is resistant against
m-rka. Let A be a cre-adversary against Hprf that has time-complexity at most T ,
generate labels of at most ℓ blocks and a key of at most 1 block and min-entropy m.
Assume that Hprf is a concatenation of v Hmac. Then there exist a m-rka adversary
A0 and two prf-adversaries A1, A2 such that the advantage advpf−cre
HprfH (A) is upper
bounded by:
advm−rka
bh,Φ
(A0) + advprf
h
(A1) + 4v2ℓ · advprf
h
(A2) +
2v2
2t +
v2
2κ
where A0 makes at most two queries with time complexity T , A1 makes 2v query with
time-complexity T and A2 makes at most 2 queries with time-complexity O(ℓ · Th),
where Th is the time for one computation of h.
Practical Security The tls standard imposes that the master-secret is 384-bit long.
Therefore if one uses sha-384 as the underlying hash function, v = 1, κ = 512 and
t = 384. The label and the two random nonces, when concatenated, are 616-bit long
and then smaller than the 1024-bit block of sha-384, that is why in practice ℓ = 1.
Let h denote the compression function of sha-384. Assume that the best-known
prf-adversary against h in time T , is the exhaustive search adversary whose advantage
is smaller than (T /Th)/2κ. Similarly, assume that the best known m-rka-adversary
against h with time-complexity T and with Φ = {∆ipad, ∆opad} is the exhaustive
search adversary whose advantage is smaller than (T /Th)/2m.
We examine, in this context, the practical security of the key derivation, when
the master-secret is smaller than the block size and when it is longer than the block
size. For a long key of s = 2 blocks, the pf-cre-advantage of an adversary in time T is
For a small key, the cre-advantage of an adversary in time T is smaller than
smaller thanp(T /Th) · 2−124 if m ≥ 512. This implies a 62-bit security if m ≥ 512.
(T /Th)(cid:0)2−383 + 2−m+3(cid:1). This implies at least a 124-bit security if m ≥ 128.
In the case of RSA, the premaster-secret length is 384 bits which is smaller than
the 1024-bit block. As its min-entropy is 368 bits, therefore, this case has a 124-bit
security at least.
In the case of Diﬃe-Hellman, if the DDH assumption is true then the result of
the key exchange is indistinguishable for the adversary from a random element in the
group. Therefore, with the DDH assumption, if the key exchange is performed in a
subgroup G of Z⋆
p, where p is a prime of exactly 1024 bits, a 256-bit subgroup is enough
15
to guarantee a 124-bit security. If p is strictly larger than 1024-bit block size, then G
has to be at least a 512-bit subgroup to guarantee a 62-bit security.
When the IV is not Random Our security proofs rely on the fact that IV (and
for Hmac, ipad also) is chosen randomly every time a new master-secret is extracted.
However, IV (and ipad) are ﬁxed once for all in the Hmac standard [5] and cannot
vary. Consequently, it may seem that our proofs are not of practical interest. Fortu-
nately, it is not the case.
Indeed, our deﬁnition of computational randomness extractor allows the adversary
to make only one query to guess the bit b. However, one could allow the adversary to
make at most q queries with the same IV . In this case, using an hybrid argument, it
can be proven that the advantage of the adversary is upper bounded by q times its
advantage in the one-query game.
It implies that if IV was generated randomly when the Hmac standard was writ-
ten, then the advantage of any cre-adversary against the tls extraction function or
Hmac increases linearly with the number of master-secret extractions the adversary
witnesses. Such an assumption has already been made by Barak et al. [1] with the same
consequences upon the security bound. One can found a proof of it in the particular
case of the Leftover Hash Lemma in Shoup’s book [20] (see theorem 6.22.).
5 Conclusion
We have shown that Hmac is a good randomness extractor, whatever the size of the
key is, even when it is greater than the block size. These results can be applied to the
security of the tls key extraction function. Our results promote the use of sha-384 as
the hash function in the key extraction function. We can guarantee a security of 124
bits in the case of RSA key exchange and in the case of Diﬃe-Hellman key exchange
with a 1024-bit prime for a 256-bit group size, which is very reasonable. We can also
guarantee a 62-bit security in the case of Diﬃe-Hellman key exchange with a prime
longer than 1024 bits for a 512-bit group size.
References
1. B. Barak, R. Shaltiel, and E. Tromer. True random number generators secure in a changing
environment. In C. D. Walter, C¸ etin Kaya Ko¸c, and C. Paar, editors, CHES 2003, volume 2779
of LNCS, pages 166–180. Springer, Sept. 2003.
2. M. Bellare. New proofs for NMAC and HMAC: security without collision-resistance. In Crypto
’06, LNCS 4117. Springer-Verlag, Berlin, 2006.
3. M. Bellare, R. Canetti, and H. Krawczyk. Keying hash functions for message authentication. In
Crypto ’96, LNCS 1109. Springer-Verlag, Berlin, 1996.
4. M. Bellare, R. Canetti, and H. Krawczyk. Message authentication using hash functions: the hmac
construction. RSA Laboratories’ Cryptobytes, 2(1), Spring 1996.
5. M. Bellare, R. Cannetti, and H. Krawczyk. HMAC: keyed-hashing for message authentication,
february 1997. RFC 2104 Available from http://www.ietf.org/rfc.html.
6. R. Canetti, J. Friedlander, S. Konyagin, M. Larsen, D. Lieman, and I. Shparlinski. On the
statistical properties of Diﬃe-Hellman distributions. Israel Journal of Mathemathics, 120:23–46,
2000.
7. R. Canetti, J. Friedlander, and I. Shparlinski. On certain exponential sums and the distribution
of Diﬃe-Hellman triples. Journal of the London Mathematical Society, 59(2):799–812, 1999.
8. O. Chevassut, P. A. Fouque, P. Gaudry, and D. Pointcheval. The twist-augmented technique for
key exchange. In PKC ’06, LNCS. Springer-Verlag, Berlin, 2006.
9. Q. Dang and T. Polk. Hash-based key derivation function (hkd). draft-dang-nistkdf-01.txt, June
2006.
16
10. T. Dierks and C. Allen. RFC 2246 - The TLS protocol version 1.0. Internet Activities Board,
Jan. 1999.
11. T. Dierks and E. Rescorla. The Transport Layer Security (TLS) protocol version 1.2, July 2007.
Internet Request for Comment RFC 4346 bis, Internet Engineering Task Force.
12. Y. Dodis, R. Gennaro, J. H˚astad, H. Krawczyk, and T. Rabin. Randomness extraction and key
In Crypto ’04, LNCS, pages 494–510.
derivation using the CBC, cascade and HMAC modes.
Springer-Verlag, Berlin, 2004.
13. P.-A. Fouque, D. Pointcheval, J. Stern, and S. Zimmer. Hardness of distinguishing the MSB
In M. Bugliesi, B. Preneel, V. Sassone, and
or LSB of secret keys in Diﬃe-Hellman schemes.
I. Wegener, editors, ICALP 2006, Part II, volume 4052 of LNCS, pages 240–251. Springer, July
2006.
14. R. Gennaro, H. Krawczyk, and T. Rabin. Secure hashed Diﬃe-Hellman over non-DDH groups.
In Eurocrypt ’04, LNCS 3027, pages 361–381. Springer-Verlag, Berlin, 2004.
15. J. H˚astad, R. Impagliazzo, L. Levin, and M. Luby. A pseudorandom generator from any one-way
function. SIAM Journal of Computing, 28(4):1364–1396, 1999.
16. R. Impagliazzo and D. Zuckerman. How to recycle random bits. In Proc. of the 30th FOCS, pages
248–253. IEEE, New York, 1989.
17. J. Jonsson and B. S. Kaliski Jr. On the security of RSA encryption in TLS. In M. Yung, editor,
CRYPTO 2002, volume 2442 of LNCS, pages 127–142. Springer, Aug. 2002.
18. C. Kaufman. RFC 4306: Internet Key Exchange (IKEv2) protocol, Dec. 2005.
19. Recommendations for pair-wise key establishment schemes using discrete logarithm cryptography
(revised). NIST Special Publications 800-56A, Mar. 2007.
20. V. Shoup. A computational introduction to number theory and algebra. Cambridge University
Press, 2005.
A Security Proof for Small Keys
In this appendix we give the two proofs of the theorem of subsection 3.2, when the key
is smaller than the block size. First we remind the theorem when Hmac is used with
a classical iterated hash function and give its proof, and then remind the theorem in
the case of a truncated iterated hash function with its proof.
Theorem 2. Let IV be a ﬁxed κ-bit string and let h be a function family from
{0, 1}κ × {0, 1}b to {0, 1}κ, where the key is the ﬁrst input on κ bits. Let h′ be the
hash function deﬁned by h′
IV (pad, ·) = h(IV, · ⊕ pad) where the key is pad. Let A be a
cre-adversary against the construction that has time-complexity at most T , generates
labels of at most ℓ blocks and a key of at most 1 block and min-entropy m. Then there
exist one prf-adversary A1 against h′ and two prf-adversaries A2 and A3 against h
such that advcre
HmacH (A) is upper bounded by:
r22κ(cid:16)2−m + 2 · advprf
h′ (A1)(cid:17)
2
+
1
2κ
+ advprf
h
(A2) + 2ℓ · advprf
h
(A3)
where A1 makes two queries with time-complexity T + 2Th, A2 makes one query with
time-complexity T and A3 makes at most 2 queries with time-complexity O(ℓ · Th),
where Th is the time for one computation of h.
Proof. Before considering the proof itself, we prove that the hash function family
F = (h(IV, · ⊕ ipad)kh(IV, · ⊕ opad))(ipad,opad)
is cau. Indeed since any prf-adversary A′ against h′ with 2 queries and a time-
complexity T has a prf-advantage denoted advprf
h′ (A′), any prf-adversary AF against F
17
with time-complexity T − 2Th and with 2 queries, has a prf-advantage which is smaller
than 2advprf
h′ (A′). Then, it can be easily seen that from any cau-adversary against F
one can construct a prf-adversary against F . This implies that any cau-adversary
against F which has a time-complexity at most T + 2Th and generates probability
distributions of at least min-entropy at least m (for any m !), has a cau-advantage
which is upper bounded by advprf
F (A) + 2−t, for a particular prf-adversary A against
F with two queries and same time complexity.
Let consider now the following sequence of games.
Game 0: this game corresponds to the attack when the real extraction is performed.
1. A sends (D, label)
2. pmk D← {0, 1}s, opad $← {0, 1}b, ipad $← {0, 1}b
3. (k1, k2) = (h(IV, pmk ⊕ ipad), h(IV, pmk ⊕ opad))
4. k = NmacH (k1, k2, label), send (IV, ipad, k) to A
5. A sends its guess b′
Game 1: in this game, we choose k1 and k2 uniformly at random in {0, 1}κ.
Game 2: in this game, we choose k uniformly at random in {0, 1}k.
Firstly, the distance between Game 0 and Game 1 can be upper bounded using
the computational Leftover Hash Lemma with F : it is upper bounded by
q22κ · (2−m + 2 · advprf
h′ (A1)).
Secondly there exists a prf-adversary A′ against Nmac which makes at most one query
and has time-complexity T such that the distance between Game 1 and Game 2 is
upper bounded by advprf
NmacH (A′). Bellare’s result implies that the latter is smaller
than advprf
⊓⊔
We consider now the case when Hmac is used with an truncated iterated hash
(A3) + 2ℓ · advprf
(A4) + 1/2κ.
h
h