（1）Super.prototype：从Sub.prototype的原型Super.prototype中开始查找（当前方法Sub. prototype.methodB的主对象）。
（2）methodB：查找名为methodB的方法。
（3）call(this, …)：调用上述步骤中找到的方法，并用当前this调用。
17.13.6 避免硬编码父构造函数的名字
直到现在，我们一直通过指定父构造函数名来引用父方法和父构造函数。这种硬编码缺少灵活性。你可以通过把父原型赋值给Sub的一个属性来避免这个问题。
然后，如下这样调用父构造函数和父方法：
设置Sub._super通常由工具函数处理，并保持子原型到父原型连接。例如：
这段代码使用了辅助函数copyOwnPropertiesFrom()，详见17.8.4“复制对象”。
提示：
 “subclasses”是个动作行为：SubC作为SuperC的子类。这种工具函数可以避免创建子构造函数的一些痛点：几乎没有什么需要手动处理，而且永远不会重复提及父构造函数的名字。下面的例子展示了如何简化代码。
17.13.7 示例：构造函数继承
作为具体的例子，我们假设已经存在构造函数Person：
现在我们想要创建构造函数Employee作为Person的子构造函数。我们手动处理，看起来如下：
下面是运行结果：
上一节中的工具函数subclasses()让Employee的代码更简单，且避免了硬编码父构造函数Person：
17.13.8 示例：内建构造函数的继承层次结构
本节中内建构造函数使用相同的子类实现方式。例如，Array是Object的子构造函数。因此Array的实例原型链看起来如下：
17.13.9 反模式：原型是父构造函数的实例
在ECMAScript 5和Object.create()之前，常用的解决方案是通过调用父构造函数来创建子构造函数：
但ECMAScript 5不推荐这么做。Sub的原型将具有所有Super实例的属性，但并没有用。因此，最好使用前面介绍的模式（调用Object.create()）。
17.14 所有对象的方法
Object.prototype几乎在所有的对象的原型链上：
下面的小节介绍Object.prototype提供的原型方法。
17.14.1 转换为原始值
下面两种方法用来把对象转换为基本类型的值：
Object.prototype.toString()
返回对象的字符串表示：
Object.prototype.valueOf()
这个方法是把对象转换为数字的推荐方式。默认实现会返回this：
valueOf被包装的构造函数覆写，返回包装后的基本类型：
转换为数字和字符串（隐式或显式）建立在转换为基础类型的基础上（详情请参阅8.5.3“算法：ToPrimitive()——将值转换为原始值”）。这就是为什么可以使用上述两种方法来配置那些转换。转换为数字推荐使用valueOf()。
转换为字符串推荐使用toString()：
不能设置转换为布尔类型；对象总被认为是true（详见10.1“转换成布尔值”）。
17.14.2 Object.prototype.toLocaleString()
这个方法返回特定于本地语言环境的代表对象的字符串。默认实现调用toString()。大多数引擎都支持这个方法。然而，这个被许多现代引擎所支持的ECMAScript国际化API（详见30.3“ECMAScript的国际化API”），被一些内建的构造函数覆写。
17.14.3 原型式继承和属性
下面的方法用于原型式继承和属性：
Object.prototype.isPrototypeOf(obj)
如果接收者属于obj原型链的一部分，则返回true：
Object.prototype.hasOwnProperty(key)
如果this拥有键为key的属性，则返回true。“自有”意味着该属性存在于这个对象中，而不存在于该对象的任何原型中。
警告：
 一般你应该调用这个方法（但不是直接调用），尤其是在你不能静态地确定对象属性时。原因详见17.5“遍历和检测属性”。
Object.prototype.propertyIsEnumerable(propKey)
如果接收者具有键为propKey的可枚举属性，则返回true，否则返回false：
17.15 泛型方法：借用原型方法
有时实例原型具有的方法除了对继承自它的对象有用，对很多其他的对象也有用。本节阐述了如何不继承而使用原型的方法。例如，实例原型Wine.prototype拥有incAge()方法：
运行结果如下：
方法incAge()适用于任何拥有属性age的对象。那么，不是Wine实例的对象如何调用这个方法?我们看看之前的方法调用：
实际上有两个参数：
（1）chablis是该方法调用的接收者，通过this传入incAge。
（2）1是参数，通过years传入incAge。
我们不能用任意的对象替换chablis，因为接收者必须是Wine的实例。否则，会找不到incAge方法。而前面的方法调用相当于（参考17.3.1“在调用函数时设置this：call(), apply()和bind()”）：
使用上面这种模式，我们可以把不是Wine实例的对象作为接收者（call的第一个参数），因为接收者不用再查找Wine.prototype.incAge方法。在下面的例子中，我们在对象john上应用方法incAge()：
能够以这种方式来使用的函数称为泛型方法。它必须对不是“它的”构造函数的实例this做好准备。因此，不是所有的方法都是泛型的；ECMAScript语言规范中明确声明哪些是泛型的（详见17.15.4“所有泛型方法列表”）。
17.15.1 通过字面量访问Object.prototype和Array.prototype
调用方法通常十分繁琐：
上述代码可以简化为通过由空对象字面量{}创建的Object的实例来访问hasOwnProperty：
类似地，下面两个表达式是等价的：
这种模式的优点是更加简洁。这也是不言而喻的。性能不应该成为问题（至少不是长期的），因为引擎可以静态决定字面量不应该创建对象。
17.15.2 调用泛型方法的例子
下面是使用泛型方法的一些例子。
使用apply()（详见17.3.1小节的“Function.prototype.apply(thisValue, argArray)”）添加一个数组（而不是单个元素；详见18.8“添加和删除元素（破坏性地）”）：
这个例子是把一个数组转化为参数，而不是从另一个构造函数借用方法。
对字符串（不是数组）应用数组方法join()：
对字符串应用数组方法map()[1]
使用map()通常比split(' ')更高效，因为split(' ')会创建中介数组：
对非字符串应用字符串方法。toUpperCase()把接收者转换为字符串并把结果转换为大写字母：
对简单对象使用泛型数组方法，可以让你了解它是如何工作的。
对伪数组调用数组方法：
看看数组方法如何像处理数组那样转化对象：
17.15.3 类似数组的对象和泛型方法
JavaScript中的一些对象感觉像是数组，但实际上不是。这意味着它们可以用索引访问且有length属性，但没有任何数组方法（forEach(), push, concat()等）。这有些遗憾，但我们会看到，泛型数组方法是一个解决方案。类数组对象的例子如下。
特殊变量arguments（详见15.8.1“通过索引访问所有参数：神奇的argumnets变量”），是一个重要的类数组对象，因为它是JavaScript的一个基础部分。arguments看起来像一个数组：
但不能使用任何数组方法：
这是因为arrayLike不是Array的实例（且Array.prototype不在arrayLike的原型链上）
由document.getElementsBy*()（例如，getElementsByTagName()），document.forms等返回浏览器DOM节点列表：
还有类数组的字符串：
术语类数组也可以视为泛型数组方法和对象之间的约定。对象必须满足某些需求；否则，这些方法不能对其正常工作。这些需求如下。
类数组对象的元素必须通过方括号和从0开始的整型索引访问。所有方法需要可读访问，且另外一些方法还需要可写访问。注意所有对象都支持这种索引：方括号中的索引转化为字符串作为键来查找属性的值。
类数组对象必须具有length属性，值是它的元素个数。一些方法需要length是可变的（例如，reverse()）。不变长度的值（例如，字符串）不能使用这些方法。
用于类数组对象的模式
下面的模式用于处理类数组的对象。
把类数组对象转化为数组：
方法slice()（详见18.10“合并、切分和连接（非破坏性地）”）不带任何参数时，会创建类数组接收者的一个拷贝：
你可以使用简单的for循环来遍历类数组对象中的所有元素：
但你也可以借用Array.prototype.forEach()：
在这两种情况中，运行结果如下：
17.15.4 所有泛型方法列表
下面的列表包含所有ECMAScript语言规范中提到的泛型方法。
Array.prototype（参见18.7“数组原型方法”）。
concat
every
filter
forEach
indexOf
join
lastIndexOf
map
pop
push
reduce
reduceRight
reverse
shift
slice
some
sort
splice
toLocaleString
toString
unshift
Date.prototype（参见20.3“Date原型方法”）。
toJSON
Object.prototype（参见17.14“所有对象的方法”）。
（所有Object方法自动都是泛型的，因为它们必须适用于所有对象。）
String.prototype（参见12.10“字符串原型方法”）。
charAt
charCodeAt
concat
indexOf
lastIndexOf
localeCompare
match
replace
search
slice
split
substring
toLocaleLowerCase
toLocaleUpperCase
toLowerCase
toUpperCase
trim
17.16 缺陷：Object作为Map使用
因为JavaScript没有针对map的内置数据结构，通常使用对象作为由字符串到值的映射。唉，这比看起来更容易出错。本节阐述了使用这种方式的三个缺陷。
17.16.1 缺陷1：继承影响读取属性
读取属性的操作可以分为两种类型。
一些操作涉及整个原型链和继承的属性。
其他操作只访问对象自有的（非继承的）属性。
在读取作为映射的对象的所有条目时，你需要在这些操作中认真选择。究其原因，思考下面的例子：
obj是拥有一个自有属性的对象，它的原型是proto，且这个原型也具有一个自有属性。proto的原型是Object.prototype，像所有由对象字面量创建的对象一样。因此，obj继承了proto和Object.prototype的属性。
我们希望obj被解读为是具有单一项目的映射：
也就是说，我们希望忽略继承的属性，只考虑自有属性。我们来看看哪种读取操作以这种方式解读obj，而哪种不是。注意，对于作为映射的对象，我们通常会使用任意的属性键，存储在变量中。这些规则不用于点操作符。
检查一个属性是否存在
操作符in检查一个对象是否具有某个给定键的属性，而它也会检查继承的属性：
我们需要检测可以忽略继承的属性。hasOwnProperty()可以实现：
收集属性键
我们把obj作为映射时，使用什么操作可以找到obj的所有键呢？for-in看起来可能会奏效。但是，实际上不可行：
它会检查继承的可枚举的属性。此处不会显示Object.prototype的属性是因为所有它的属性都不可枚举。
相比之下，Object.keys()可以只列出自有属性：
这个方法只返回可枚举的自有属性；ownProp是通过赋值添加的，因此默认是可枚举的。如果你想要列出全部自有属性，需要使用Object.getOwnProperty Names()。
获取属性值
我们可以选择点操作符或方括号操作符来读取属性的值。如果是存储在变量中的任意键，则不能使用点操作符。这样就只剩下方括号操作符，它会查找继承的属性：
这不是我们希望的。虽然没有只读取自有属性的内置操作符，但很容易自己实现：
这个函数可以忽略继承的属性toString：