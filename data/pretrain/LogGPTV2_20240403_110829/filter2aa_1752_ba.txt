### 9.2 信号处理

#### 9.2.1 使用 `signal()` 设置信号处理程序
`signal()` 函数用于设置进程对特定信号的处理方式。例如，将 `SIG_DFL` 作为 `signo` 的处理程序表示恢复默认操作；对于 `SIGPIPE` 信号，默认行为是终止进程。而将 `SIG_IGN` 作为 `signo` 的处理程序则表示忽略该信号。如果 `signal()` 调用失败，则会将 `errno` 设为 `SIG_ERR`。

##### POSIX 的 `pause()` 函数
`pause()` 函数会使调用它的进程暂停执行，直到接收到一个信号为止。当 `pause()` 因接收到信号而返回时，它会返回 -1 并将 `errno` 设为 `EINTR`。在 Linux 内核中，`pause()` 实际上是一个简单的系统调用，它会使进程进入睡眠状态，直到有信号到达。随后，内核会调用 `schedule()` 来重新调度进程。

```c
#include <unistd.h>

int pause(void);
```

#### 9.2.2 示例
以下是一个简单的示例，演示如何使用自定义的信号处理程序来处理 `SIGINT` 信号：

```c
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

/* SIGINT 的处理程序 */
static void sigint_handler(int signo) {
    printf("Caught SIGINT!\n");
    exit(EXIT_SUCCESS);
}

int main(void) {
    if (signal(SIGINT, sigint_handler) == SIG_ERR) {
        fprintf(stderr, "Cannot handle SIGINT!\n");
        exit(EXIT_FAILURE);
    }

    for (;;)
        pause();
    
    return 0;
}
```

接下来，我们扩展这个例子，使其能够处理 `SIGTERM` 和 `SIGINT` 信号，并忽略 `SIGHUP` 信号，同时将 `SIGPROF` 信号设为默认处理方式：

```c
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

/* 通用信号处理程序 */
static void signal_handler(int signo) {
    if (signo == SIGINT)
        printf("Caught SIGINT!\n");
    else if (signo == SIGTERM)
        printf("Caught SIGTERM!\n");
    else {
        fprintf(stderr, "Unexpected signal!\n");
        exit(EXIT_FAILURE);
    }
    exit(EXIT_SUCCESS);
}

int main(void) {
    if (signal(SIGINT, signal_handler) == SIG_ERR) {
        fprintf(stderr, "Cannot handle SIGINT!\n");
        exit(EXIT_FAILURE);
    }

    if (signal(SIGTERM, signal_handler) == SIG_ERR) {
        fprintf(stderr, "Cannot handle SIGTERM!\n");
        exit(EXIT_FAILURE);
    }

    if (signal(SIGPROF, SIG_DFL) == SIG_ERR) {
        fprintf(stderr, "Cannot reset SIGPROF!\n");
        exit(EXIT_FAILURE);
    }

    if (signal(SIGHUP, SIG_IGN) == SIG_ERR) {
        fprintf(stderr, "Cannot ignore SIGHUP!\n");
        exit(EXIT_FAILURE);
    }

    for (;;)
        pause();

    return 0;
}
```

#### 9.2.3 执行与继承
当进程创建子进程时，子进程会继承父进程的信号处理设置。新创建的子进程将拥有与父进程相同的信号处理程序。为了确保信号处理程序在子进程中也能正确运行，我们需要在 `fork()` 之后但在 `exec()` 之前设置信号处理程序。例如：

```c
/* 忽略 SIGINT 信号 */
if (signal(SIGINT, SIG_IGN) != SIG_IGN) {
    if (signal(SIGINT, sigint_handler) == SIG_ERR)
        fprintf(stderr, "Failed to handle SIGINT!\n");
}

/* 忽略 SIGQUIT 信号 */
if (signal(SIGQUIT, SIG_IGN) != SIG_IGN) {
    if (signal(SIGQUIT, sigquit_handler) == SIG_ERR)
        fprintf(stderr, "Failed to handle SIGQUIT!\n");
}
```

#### 9.2.4 将信号编号映射为字符串
为了更方便地调试和记录信号，可以将信号编号转换为对应的字符串。Linux 提供了 `sys_siglist` 数组和 `psignal()`、`strsignal()` 函数来实现这一功能。

```c
extern const char * const sys_siglist[];

void psignal(int signo, const char *msg);

char *strsignal(int signo);
```

例如，在信号处理程序中，可以使用 `sys_siglist` 来打印信号名称：

```c
static void signal_handler(int signo) {
    printf("Caught %s\n", sys_siglist[signo]);
}
```

### 9.3 发送信号

#### 9.3.1 使用 `kill()` 发送信号
`kill()` 函数用于向指定进程发送信号。

```c
#include <sys/types.h>
#include <signal.h>

int kill(pid_t pid, int signo);
```

- 如果 `pid` 为 0，则信号会被发送给调用进程所在进程组的所有进程。
- 如果 `pid` 为 -1，则信号会被发送给调用进程有权发送信号的所有进程（除了 init 进程）。
- 如果 `pid` 小于 -1，则信号会被发送给进程组 `-pid` 中的所有进程。

如果 `kill()` 失败，会返回 -1 并设置 `errno`。常见的错误码包括：
- `EINVAL`：无效的信号编号。
- `EPERM`：调用进程没有权限发送信号给目标进程。
- `ESRCH`：指定的进程或进程组不存在或已终止。

#### 9.3.2 示例
以下代码示例展示了如何向进程 ID 为 1722 的进程发送 `SIGHUP` 信号：

```c
int ret;
ret = kill(1722, SIGHUP);
if (ret)
    perror("kill");
```

同样，可以使用 `raise()` 函数向当前进程发送信号：

```c
#include <signal.h>

int raise(int signo);
```

例如，向当前进程发送 `SIGINT` 信号：

```c
raise(SIGINT);
```

#### 9.3.3 向整个进程组发送信号
`killpg()` 函数用于向指定进程组中的所有进程发送信号。

```c
#include <signal.h>

int killpg(int pgrp, int signo);
```

例如，向进程组 1234 发送 `SIGTERM` 信号：

```c
int ret;
ret = killpg(1234, SIGTERM);
if (ret)
    perror("killpg");
```

### 9.4 重入性

信号处理程序在执行时可能会中断主程序的执行，因此编写信号处理程序时需要特别小心。特别是处理程序不应调用可能修改共享数据结构的函数，如 `malloc()` 或 `printf()`。POSIX.1-2003 标准列出了可以安全使用的异步信号安全函数。

### 9.5 信号集

信号集是一组信号的集合，可以用于管理多个信号。常用的信号集操作函数包括：

```c
#include <signal.h>

int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set, int signo);
int sigdelset(sigset_t *set, int signo);
int sigismember(const sigset_t *set, int signo);
```

这些函数分别用于初始化空信号集、填充信号集、添加信号到信号集、从信号集中删除信号以及检查信号是否在信号集中。