Figure 7: An Abbreviated Syntax of Our Descriptions
We follow the approach in the previous work [40] and conduct
concept learning to obtain 109 security-sensitive APIs. Hence, we
focus on these APIs and perform “API-oriented” behavior mining
on 1000 randomly-collected top Android apps. More concretely,
we ﬁrst construct the subset, S/θ, speciﬁc to each individual API.
On average, each subset contains 17 graphs. Then, we apply sub-
graph mining algorithm [38] to each subset.
Figure 6 exempliﬁes our mining process. Speciﬁcally, it shows
that we discover a behavior pattern for the API getLastKnown-
Location(). This pattern involves two other API calls, getLong-
itude() and getLatitude(). It demonstrates the common prac-
tice to retrieve location data in Android programs.
4.2 Graph Compression
Now that we have identiﬁed common subgraphs in the raw SBGs,
we can further compress these raw graphs by replacing entire sub-
graphs with individual nodes. This involves two steps, subgraph
isomorphism and subgraph collapse. We utilize the VF2 [13] al-
gorithm to solve the subgraph isomorphism problem. In order to
maximize the graph compression rate, we always prioritize a better
match (i.e., larger subgraph). To perform subgraph collapse, we
ﬁrst replace subgraph nodes with one single new node. Then, we
merge the attributes (i.e., context, conditions and constants) of all
the removed nodes, and put the merged label onto the new one.
5. DESCRIPTION GENERATION
5.1 Automatically Generated Descriptions
Given a behavior graph SBG, we translate its semantics into tex-
tual descriptions. This descriptive language follows a subset of En-
glish grammar, illustrated in Figure 7 using Extended Backus-Naur
form (EBNF). The description of an app is a conjunction of
individual sentences. An atomic sentence makes a statement
and speciﬁes a modifier. Recursively, a non-empty atomic modifier
can be an adverb clause of condition, which contains another sentence.
The translation from a SBG to a textual description is then to map
the graph components to the counterparts in this reduced language.
To be more speciﬁc, each vertex of a graph is mapped to a single
sentence, where the API or behavioral pattern is represented by a
statement; the conditions, contexts and constant parameters are
expressed using a modifier. Each edge is then translated to “and”
to indicate data dependency.
One sentence may have several modifiers. This reﬂects the
fact that one API call can be triggered in compound conditions
and contexts, or a condition/context may accept several parameters.
The modiﬁers are concatenated with “and” or “or” in order to ver-
balize speciﬁc logical relations. A context modifier begins with
“once” to show the temporal precedence. A condition modifier
starts with either “if” or “depending on if”. The former is ap-
plied when a condition is statically resolvable while the latter is
prepared for any other conservative cases. Notice that it is always
possible to ﬁnd more suitable expressions for these conjunctions.
In our motivating example, getLine1Number() is triggered un-
der the condition that a speciﬁc button is selected. Due to the so-
phisticated internal computation, we did not extract the exact predi-
cates. To be safe, we conservatively claim that the app retrieves the
phone number depending on if the user selects Button “Conﬁrm”.
5.2 Behavior Description Model
Once we have associated a behavior graph to this grammatical
structure, we further need to translate an API operation or a pattern
to a proper combination of subject, verb and object. This translation
is realized using our Behavior Description Model. Conditions and
contexts of SBGs are also translated using the same model because
they are related to API calls.
We manually create this description model and currently sup-
port 306 sensitive APIs and 103 API patterns. Each entry of this
model consists of an API or pattern signature and a 3-tuple of nat-
ural language words for subject, verb and object. We construct
such a model by studying the Android documentation [6]. For in-
stance, the Android API call createFromPdu(byte[]) program-
matically constructs incoming SMS messages from underlying raw
Protocol Data Unit (PDU) and hence it is documented as “Create an
SmsMessage from a raw PDU” by Google. Our model records its
API prototype and assigns texts “the app”, “retrieve” and “incom-
ing SMS messages” to the three linguistic components respectively.
These three components form a sentence template. Then, constants,
concrete conditions and contexts serve as modiﬁers to complete the
template. For example, the template of HttpClient.execute()
is represented using words “the app”, “send” and “data to network”.
Suppose an app uses this API to deliver data to a constant URL
“http://constant.url”, when the phone is locked (i.e., keyguard is
on). Then, such constant value and condition will be fed into the
template to produce the sentence “The app sends data to network
“http://constant.url” if the phone is locked.” The condition APIs
share the same model format. The API checking keyguard status
(i.e., KeyguardManager.isKeyguardLocked()) is modeled as
words “the phone”, “be” and “locked”.
It is noteworthy that an alternative approach is to generate this
model programmatically. Sridhara et al. [31] proposed to automat-
ically extract descriptive texts for APIs and produce the Software
Word Usage Model. The API name, parameter type and return
type are examined to extract the linguistic elements. For example,
the model of createFromPdu(byte[]) may therefore contain the
keywords “create”, “from” and “pdu”, all derived from the function
name. Essentially, we can take the same approach. However, we
argue that such a generic model was designed to assist software de-
velopment and is not the best solution to our problem. An average
user may not be knowledgeable enough to understand the low-level
technical terms, such as “pdu”. In contrast, our text selections (i.e.,
“the app”, “retrieve” and “incoming SMS messages”) directly ex-
plain the behavior-level meaning.
Figure 8: Description Generation for the Motivating Example
Table 1: Program Logics in Behavioral Patterns
Program Logic
Singleton Retrieval
Workﬂow
Access to Hierarchical Data Describe the former.
How to Describe
Describe the latter.
Describe both.
We generate description model for API patterns based on their
internal program logics. Table 1 presents the three major logics that
we have discovered in behavioral patterns. 1) A singleton object is
retrieved for further operations. For example, a SmsManager.getDefault()
is always called prior to SmsManager.sendTextMessage() be-
cause the former fetches the default SmsManager that the latter
needs. We therefore describe only the latter which is associated to
a more concrete behavior. 2) Successive APIs constitute a dedi-
cated workﬂow. For instance, divideMessage() always happens
before sendMultipartTextMessage(), since the ﬁrst provides
the second with necessary inputs. In this case, we study the doc-
ument of each API and describe the complete behavior as an en-
tirety. 3) Hierarchical information is accessed using multiple levels
of APIs. For instance, to use location data, one has to ﬁrst call
getLastKnownLocation() to fetch a Location object, and then
call getLongitude() and getLatitude() to read the “double”-
typed data from this object. Since the higher level object is already
meaningful enough, we hence describe this whole behavior accord-
ing to only the former API.
In fact, we only create description models for 103 patterns out of
the total 109 discovered ones. Some patterns are large and complex,
and are hard to summarize. For these patterns, we have to fall back
to the safe area and describe them in a API-by-API manner.
In order to guarantee the security-sensitivity and readability of
the descriptive texts, we carefully select the words to accommo-
date the model. To this end, we learn from the experience of prior
security studies [26,28] on app descriptions: 1) The selected vocab-
ulary must be straightforward and stick to the essential API func-
tionalities. As an counterexample, an audio recording behavior can
hardly be inferred from the script “Blow into the mic to extinguish
the ﬂame like a real candle” [26]. This is because it does not ex-
plicitly refer to the audio operation. 2) Descriptive texts must be
distinguishable for semantically different APIs. Otherwise, poorly-
chosen texts may confuse the readers. For instance, an app with
description “You can now turn recordings into ringtones” in reality
only converts previously recorded ﬁles to ringtones, but can be mis-
takenly associated to the permission android.permission.RECORD_-
AUDIO due to the misleading text choice [26, 28].
Notice that the model generation is a one-time effort. More-
over, this manual effort is a manageable process due to two rea-
sons. First, we exclusively focus on security-sensitive behaviors
and therefore describe only security-related APIs. After apply-
ing concept learning, we further conclude that, a limited amount
of sensitive APIs contributes to a majority of harmful operations.
Thus, we can concentrate on and create models for more crucial
ones. Second, the number of discovered patterns is also ﬁnite. This
is because we can tune the parameters of objective function (Equa-
tion 2) so that the amount of identiﬁed subgraphs is manageable.
5.3 Behavior Graph Translation
Now that we have deﬁned a target language and prepared a model
to verbalize sensitive APIs and patterns, we further would like to
translate an entire behavior graph into natural language scripts. Al-
gorithm 2 demonstrates our graph traversal based translation.
This algorithm takes a SBG G and the description model Mdesc
as the inputs and eventually outputs a set of descriptions. The over-
all idea is to traverse the graph and translate each path. Hence, it
ﬁrst performs a breadth-ﬁrst search and collects all the paths into
Setpath. Notice that the graph traversal algorithm (i.e., BFS or
DFS) does not affect the quality of output. Next, it examines each
path in Setpath to parse the nodes in sequence. Each node is then
parsed to extract the node name, constants, conditions and contexts.
The node name node.name (API or pattern) is used to query the
model Mdesc and fetch the {subj,vb,obj} of a main clause. The
, OnClickListener.onClick, Øconst, SetcondSetcond = {findViewById(View.getId)==Button(“Confirm”)}, OnClickListener.onClick, Øconst, Setcond, OnClickListener.onClick, Setconst, ØcondSetconst = {100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/company=%s/}, OnClickListener.onClick, Øconst, SetcondSetcond = {findViewById(View.getId)==Button(“Confirm”)}Setcond = {findViewById(View.getId)==Button(“Confirm”)}The app retrieves your phone number, and encodes the data into format “100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/company=%s/”, and sends data to networkdepending on if the user selects the Button ``Confirm’’“The app”, “send”, “data to network”depending on if “the user”, “select”, “the Button ``Confirm’’ ““The app”, “retrieve”, “your phone number”depending on if “the user”, “select”, “the Button ``Confirm’’ ““The app”, “encode”, “the data into format”“100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/company=%s/“Description: Once a GUI component is clicked, the app retrieves you phone number, and encodes the data into format “100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/company=%s/”, and sends data to network, depending on if the user selects the Button “Confirm”. Entry PointAPI prototypeConditionsOnce “a GUI component”, “be”, “clicked”Once “a GUI component”, “be”, “clicked”Once “a GUI component”, “be”, “clicked”Once a GUI component is clickedFinalizeBehavior GraphNatural Language GenerationAggregateAggregateAggregateRealize SentenceTranslate using modelAlgorithm 2 Generating Descriptions from a SBG
G ← {A SBG }
Mdesc ← {Description model}
Setdesc ← ∅
Setpath ← BFS(G)
for path ∈ Setpath do
desc ← null
for node ∈ path do
{subj,vb,obj} ← QueryMdesc(node.name)
Cmod ← null
Setconst ← GetConsts(node)
for ∀const ∈ Setconst do
Cmod ← Aggregate(Cmod,const)
end for
Setcc ← GetConditionsAndContext(node)
for ∀cc ∈ Setcc do
{subj,vb,obj}cc ← QueryMdesc(cc)
textcc ← RealizeSentence({subj,vb,obj}cc)
Cmod ← Aggregate(Cmod,textcc)
end for
text ← RealizeSentence({subj,vb,obj,Cmod})
desc ← Aggregate(desc, text)
end for
Setdesc ← Setdesc ∪ {desc}
end for
output Setdesc as the generated description set
constants, conditions and contexts are organized into the modiﬁer
(Cmod) of main clause, respectively. In the end, the main clause
is realized by assembling {subj,vb,obj} and the aggregate modiﬁer
Cmod. The realized sentence is inserted into the output set Setdesc
if it is not a redundant one.
5.4 Motivating Example
We have implemented the natural language generation using a
NLG engine [7] in 3K LOC. Figure 8 illustrates how we step-by-
step generate descriptions for the motivating example.
First, we discover two paths in the SBG: 1) getLine1Number()
→ format() → write() and 2) getSimOperatorName() →
format() → write().
Next, we describe every node sequentially on each path. For ex-
ample, for the ﬁrst node, the API getLine1Number() is modeled
by the 3-tuple {“the app”, “retrieve”, “your phone number”}; the
entry point OnClickListener.onClick is mapped to {“a GUI
component”, “be”, “clicked”} and preceded by “Once”; the con-
dition findViewById(View.getId)==Button( “Confirm”) is
translated using the template {“the user”, “select”, “ ”}, which ac-
cepts the GUI name, Button “Conﬁrm”, as a parameter. The con-
dition and main clause are connected using “depending on if”.
At last, we aggregate the sentences derived from individual nodes.
In this example, all the nodes share the same entry point. Thus, we
only keep one copy of “Once a GUI component is clicked”. Simi-
larly, the statements on the nodes are also aggregated and thus share
the same subject “The app”. We also aggregate the conditions in or-
der to avoid the redundancy. As a result, we obtain the description
illustrated at the bottom left of Figure 8.
6. EVALUATION
In this section, we evaluate the correctness, effectiveness, con-
ciseness of generated descriptions and the runtime performance of
DESCRIBEME.
Table 2: Description Generation Results for DroidBench
Total # Correct Missing Desc.
65
55
6
False Statement
4
6.1 Correctness and Security-Awareness
Correctness. To evaluate the correctness, we produce textual de-
scriptions for DroidBench apps (version 1.1) [3]. DroidBench apps
are designed to assess the accuracy of static analyses on Android
programs. We use these apps as the ground truths because they are
open-sourced programs with clear semantics. However, it is worth
noting that DroidBench does not include any test cases for native
code or dynamic loaded classes. Thus, this evaluation only demon-
strates whether DESCRIBEME can correctly discover the static pro-
gram behaviors at bytecode level. In fact, static analysis in gen-
eral lacks the capability of extracting runtime behaviors and can
be evaded accordingly. Nevertheless, we argue that any analysis
tools, both static and dynamic, can be utilized in our framework to
achieve the goal. Detailed discussion is presented in Section 7.1.
Table 2 presents the experimental results, which show that DE-
SCRIBEME achieves a true positive rate of 85%. DESCRIBEME
misses behavior descriptions due to three major reasons. 1) Points-
to analysis lacks accuracy. We rely on Soot’s capability to perform
points-to analysis. However, it is not precise enough to handle the
instance ﬁelds accessed in callback functions. 2) DESCRIBEME
does not process exception handler code and therefore loses track
of its dataﬂow. 3) Some reﬂective calls cannot be statically re-
solved. Thus, DESCRIBEME fails to extract their semantics.
DESCRIBEME produces false statements mainly because of two
reasons. First, our static analysis is not sensitive to individual array
elements. Thus, it generates false descriptions for the apps that
intentionally manipulate data in array . Second, again, our points-
to analysis is not accurate and may lead to over-approximation.
Despite the incorrect cases, the accuracy of our static analysis is
still comparable to that of FlowDroid [9], which is the state-of-the-
art static analysis technique for Android apps. Moreover, we would
like to again point out that the accuracy of static analysis is not the
major focus of this work. Our main contribution lies in the fact that,
we combine program analysis with natural language generation so
that we can automatically explain program behaviors to end users