## 数据库平滑switchover的要素 - 会话资源漂移 - 业务无感、0感知切换探索  
### 作者        
digoal        
### 日期        
2017-06-19        
### 标签        
PostgreSQL , 中间件 , 连接池 , 平滑切换 , 会话设置 , 会话状态 , 绑定变量语句 , prepared statement      
----        
## 背景    
数据库迁移、切换是很普遍的一个话题，但是大多数的方案，对用户来说都是有感知的，所以用户的体验并不好。  
例如用户使用了绑定变量语句，主备角色切换后绑定变量语句没有了，会导致调用报错。  
我们需要维护主库的硬件，那么可以在中间件层面，将主备数据库的角色进行平滑调换，维护好硬件，再平滑的调换回来。  
数据库主备切换时，如何做到会话级无感知？首先我们要了解会话中都有哪些内容，哪些内容是需要随角色切换一起迁移的。从而做到用户无感知。  
（本文HA指中间件层级的HA，并非APP直连数据库，VIP切换的那种HA。）  
简单的switchover过程举例：    
等待所有会话的事务结束，会话都处于idle状态，冻结会话，不允许提交任何SQL，然后进行角色切换，并将每个会话的资源状态平移。  
## 会话资源状态  
会话中有些什么状态？通过discard这条SQL就可以了解。  
https://www.postgresql.org/docs/10/static/sql-discard.html  
```  
DISCARD — discard session state  
```  
discard all相当于执行如下  
```  
SET SESSION AUTHORIZATION DEFAULT;  
RESET ALL;  
DEALLOCATE ALL;  
CLOSE ALL;  
UNLISTEN *;  
SELECT pg_advisory_unlock_all();  
DISCARD PLANS;  
DISCARD SEQUENCES;  
DISCARD TEMP;  
```  
会话资源中目前可能包含如下（每个PG版本可能有些许差异）：  
SESSOIN角色、参数设置、绑定变量语句、游标、异步消息监听、AD锁、序列、临时表等。  
下面介绍一下每种资源的查询方法，以及在新的主库上进行资源复原的方法。  
## 一、SESSION AUTHORIZATION  
超级用户可以将会话用户设置为其他用户，普通用户无权切换用户。  
当前用户为postgres，设置SESSION AUTHORIZATION为test  
```  
postgres=# set SESSION AUTHORIZATION test;  
SET  
postgres=> show SESSION AUTHORIZATION;  
 session_authorization   
-----------------------  
 test  
(1 row)  
postgres=> select usename from pg_stat_activity where pid=pg_backend_pid();  
 usename    
----------  
 postgres  
(1 row)  
```  
### 查询方法  
```  
postgres=> show SESSION AUTHORIZATION;  
 session_authorization   
-----------------------  
 test  
(1 row)  
postgres=> select usename from pg_stat_activity where pid=pg_backend_pid();  
 usename    
----------  
 postgres  
(1 row)  
```  
### 复原方法  
当pg_stat_activity.usename不等于SESSION AUTHORIZATION时，需要通过如下方法复原它。  
```  
postgres=# set SESSION AUTHORIZATION test;  
SET  
```  
## 二、参数  
PostgreSQL的一些参数是允许用户在会话、事务中进行设置的。如下context in ('user','superuser')时，用户可以在会话或事务中设置。  
```  
postgres=# select distinct context from pg_settings ;  
      context        
-------------------  
 superuser-backend  
 sighup  
 superuser  
 postmaster  
 internal  
 user  
 backend  
(7 rows)  
```  
设置例子  
```  
postgres=> set tcp_keepalives_count=1;  
SET  
source表示参数来自哪里的设置，如果来自会话或事务级设置，则显示session  
postgres=> select distinct source from pg_settings ;  
        source          
----------------------  
 session  
 default  
 command line  
 configuration file  
 client  
 override  
 environment variable  
(7 rows)  
重置方法  
postgres=# reset tcp_keepalives_count;  
RESET  
postgres=# select name,setting,reset_val,source,context from pg_settings where name='tcp_keepalives_count';  
         name         | setting | reset_val | source  | context   
----------------------+---------+-----------+---------+---------  
 tcp_keepalives_count | 3       | 0         | default | user  
(1 row)  
```  
## 查询方法  
```  
postgres=# select name,setting,reset_val,source,context from pg_settings where source ='session' and setting<>reset_val;  
         name         | setting | reset_val | source  | context   
----------------------+---------+-----------+---------+---------  
 tcp_keepalives_count | 1       | 0         | session | user  
(1 row)  
```  
## 复原方法  
```  
postgres=> set tcp_keepalives_count=1;  
SET  
```  
## 三、绑定变量语句  
使用绑定变量可以减少数据库的parser, plan开销，提高高并发的查询性能，同时避免SQL注入。  
不同的驱动，有不同的使用方法。  
https://www.postgresql.org/docs/10/static/libpq-exec.html#libpq-exec-main  
使用绑定变量的例子  
```  
CREATE OR REPLACE FUNCTION public.getps()  
 RETURNS void  
 LANGUAGE plpgsql  
 STRICT  
AS $function$  
declare   
  rec record;  
begin  
  for rec in select t from pg_prepared_statements t loop  
    raise notice '%', (rec.*)::text;  
  end loop;  
end;  
$function$;  
create table ps(id int primary key, info text);  
insert into ps select generate_series(1,10000), 'test';  
vi test.sql  
\set id random(1,10000)  
select * from ps where id=:id;  
select getps();  
使用绑定变量的模式，调用SQL  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 1 -j 1  
NOTICE:  ("(P0_1,""select * from ps where id=$1;"",""2017-06-19 15:22:21.821454+08"",{integer},f)")  
NOTICE:  ("(P0_2,""select getps();"",""2017-06-19 15:22:21.822045+08"",{},f)")  
.....  
```  
## 查询方法  
```  
postgres=# \d pg_prepared_statements  
                  View "pg_catalog.pg_prepared_statements"  
     Column      |           Type           | Collation | Nullable | Default   
-----------------+--------------------------+-----------+----------+---------  
 name            | text                     |           |          |   
 statement       | text                     |           |          |   
 prepare_time    | timestamp with time zone |           |          |   
 parameter_types | regtype[]                |           |          |   
 from_sql        | boolean                  |           |          |   
postgres=# select * from pg_prepared_statements;  
 name | statement | prepare_time | parameter_types | from_sql   
------+-----------+--------------+-----------------+----------  
(0 rows)  
postgres=# prepare a(int) as select * from ps where id=$1;  
PREPARE  
postgres=# execute a(1);  
 id | info   
----+------  
  1 | test  
(1 row)  
postgres=# select * from pg_prepared_statements;  
 name |                    statement                    |         prepare_time         | parameter_types | from_sql   
------+-------------------------------------------------+------------------------------+-----------------+----------  
 a    | prepare a(int) as select * from ps where id=$1; | 2017-06-19 15:23:24.68617+08 | {integer}       | t  
(1 row)  
```  
## 复原方法  
不同的驱动，复原方法不一样。  
请根据pg_prepared_statements的内容进行复原。  
```  
NOTICE:  ("(P0_1,""select * from ps where id=$1;"",""2017-06-19 15:22:21.821454+08"",{integer},f)")  
PGresult *PQprepare(PGconn *conn,  
                    const char *stmtName,  
                    const char *query,  
                    int nParams,  
                    const Oid *paramTypes);  
```  
## 四、游标  
如果我们使用了hold选项，那么游标不会随事务结束而关闭，因此在迁移会话时也需要注意是否有这类游标。  
```  
postgres=# \h declare  
Command:     DECLARE  
Description: define a cursor  
Syntax:  
DECLARE name [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ]  
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR query  
postgres=# begin;  
BEGIN  
postgres=# declare cur cursor with hold for select * from ps where id=1;  
DECLARE CURSOR  
postgres=# end;  
COMMIT  
postgres=# select * from pg_cursors ;  
 name |                           statement                           | is_holdable | is_binary | is_scrollable |         creation_time           
------+---------------------------------------------------------------+-------------+-----------+---------------+-------------------------------  
 cur  | declare cur cursor with hold for select * from ps where id=1; | t           | f         | t             | 2017-06-19 15:27:58.604183+08  
(1 row)  
postgres=# close cur;  
CLOSE CURSOR  
postgres=# select * from pg_cursors ;  
 name | statement | is_holdable | is_binary | is_scrollable | creation_time   
------+-----------+-------------+-----------+---------------+---------------  
(0 rows)  
```  
## 查询方法  
```  
postgres=# select * from pg_cursors ;  
 name |                           statement                           | is_holdable | is_binary | is_scrollable |         creation_time           
------+---------------------------------------------------------------+-------------+-----------+---------------+-------------------------------  
 cur  | declare cur cursor with hold for select * from ps where id=1; | t           | f         | t             | 2017-06-19 15:27:58.604183+08  
(1 row)  
```  
## 复原方法  
```  
postgres=# declare cur cursor with hold for select * from ps where id=1;  
DECLARE CURSOR  
```  
## 五、异步消息监听  
PostgreSQL的异步消息，可以通过异步消息，推送事件。例子如下：  
https://www.postgresql.org/docs/10/static/libpq-notify.html  
https://www.postgresql.org/docs/10/static/libpq-example.html#libpq-example-2  
```  
postgres=# listen a;  
LISTEN  
postgres=# notify a , 'hello i am digoal';  
NOTIFY  
Asynchronous notification "a" with payload "hello i am digoal" received from server process with PID 21412.  
```  
## 查询方法  
查询已经开启了哪些异步监听  
```  
postgres=# select pg_listening_channels();  
 pg_listening_channels   
-----------------------  
 a  
(1 row)  
```  
## 复原方法  
```  
postgres=# listen a;  
LISTEN  
```  
## 六、advisory lock  
advisory lock可以用于秒杀、解决高并发锁冲突问题、解决无空洞序列值问题等。  
[《PostgreSQL 使用advisory lock实现行级读写堵塞》](../201705/20170507_02.md)    
[《PostgreSQL 无缝自增ID的实现 - by advisory lock》](../201610/20161020_02.md)    
[《PostgreSQL 使用advisory lock或skip locked消除行锁冲突, 提高几十倍并发更新效率》](../201610/20161018_01.md)    
[《聊一聊双十一背后的技术 - 不一样的秒杀技术, 裸秒》](../201611/20161117_01.md)    