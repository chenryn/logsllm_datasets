# be-quick-or-be-dead-3
Reversing, 350 points
## Description:
> As the [song](https://www.youtube.com/watch?v=CTt1vk9nM9c) draws closer to the end, another executable **be-quick-or-be-dead-3** suddenly pops up. This one requires even faster machines. Can you run it fast enough too? 
Attached was a binary file.
## Solution:
Let's run the file:
```console
root@kali:/media/sf_CTFs/pico/be-quick-or-be-dead-3/v2# ./be-quick-or-be-dead-3
Be Quick Or Be Dead 3
=====================
Calculating key...
You need a faster machine. Bye bye.
```
Time to analyze the program. We'll use Radare2.
```console
r2 be-quick-or-be-dead-3
```
Analyze the binary with `aa` and list the functions with `afl`:
```
root@kali:/media/sf_CTFs/pico/be-quick-or-be-dead-3/v2# r2 be-quick-or-be-dead-3
 -- When you sold that exploit, what they really bought, was your silence.
[0x004005a0]> aa
[x] Analyze all flags starting with sym. and entry0 (aa)
[0x004005a0]> afl
0x004004e8    3 26           sym._init
0x00400520    1 6            sym.imp.putchar
0x00400530    1 6            sym.imp.puts
0x00400540    1 6            sym.imp.printf
0x00400550    1 6            sym.imp.alarm
0x00400560    1 6            sym.imp.__libc_start_main
0x00400570    1 6            sym.imp.__sysv_signal
0x00400580    1 6            sym.imp.exit
0x00400590    1 6            fcn.00400590
0x004005a0    1 41           entry0
0x004005d0    4 50   -> 41   sym.deregister_tm_clones
0x00400610    4 58   -> 55   sym.register_tm_clones
0x00400650    3 28           sym.__do_global_dtors_aux
0x00400670    4 38   -> 35   entry1.init
0x00400696    6 112          sym.decrypt_flag
0x00400706    4 140          sym.calc
0x00400792    1 16           sym.calculate_key
0x004007a2    1 31           sym.alarm_handler
0x004007c1    3 84           sym.set_timer
0x00400815    1 43           sym.get_key
0x00400840    1 40           sym.print_flag
0x00400868    4 62           sym.header
0x004008a6    1 62           sym.main
0x004008f0    4 101          sym.__libc_csu_init
0x00400960    1 2            sym.__libc_csu_fini
0x00400964    1 9            sym._fini
[0x004005a0]>
```
The `main` function is similar to the previous two challenges.
Just like last time, if we disable the timer, we hang and the program does not return in a reasonable time.
Like last time, the `get_key` function calls the `calculate_key` function, which holds the important logic:
```assembly
[0x004008a6]> s sym.calculate_key
[0x00400792]> pdf
/ (fcn) sym.calculate_key 16
|   sym.calculate_key ();
|           ; CALL XREF from sym.get_key (0x400828)
|           0x00400792      55             push rbp
|           0x00400793      4889e5         mov rbp, rsp
|           0x00400796      bf65990100     mov edi, 0x19965
|           0x0040079b      e866ffffff     call sym.calc
|           0x004007a0      5d             pop rbp
\           0x004007a1      c3             ret
```
This function calls `calc` with 0x19965 as a parameter.
Here's the logic for `calc`:
```
[0x00400706]> VV @ sym.calc
 .------------------------------------------------------------------------------------------------------------------.
 | [0x400706]                                                                                                       |
 | (fcn) sym.calc 140                                                                                               |
 |   sym.calc (int arg1);                                                                                           |
 | ; var int local_24h @ rbp-0x24                                                                                   |
 | ; var int local_14h @ rbp-0x14                                                                                   |
 | ; arg int arg1 @ rdi                                                                                             |
 | ; XREFS: CALL 0x00400733  CALL 0x00400742  CALL 0x00400751  CALL 0x00400761  CALL 0x00400776  CALL 0x0040079b    |
 | push rbp                                                                                                         |
 | mov rbp, rsp                                                                                                     |
 | push r12                                                                                                         |
 | push rbx                                                                                                         |
 | sub rsp, 0x20                                                                                                    |
 | ; arg1                                                                                                           |
 | mov dword [local_24h], edi                                                                                       |
 | cmp dword [local_24h], 4                                                                                         |
 | ja 0x40072b;[ga]                                                                                                 |
 `------------------------------------------------------------------------------------------------------------------'
         f t
         | |
         | '------------------------------------------------------.
         '--------------.                                         |
                        |                                         |
                    .------------------------------------.    .-----------------------------------.
                    |  0x40071a [gd]                     |    |  0x40072b [ga]                    |
                    | mov eax, dword [local_24h]         |    | mov eax, dword [local_24h]        |
                    | imul eax, dword [local_24h]        |    | sub eax, 1                        |
                    | ; 'E#'                             |    | mov edi, eax                      |
                    | add eax, 0x2345                    |    | call sym.calc;[gb]                |
                    | mov dword [local_14h], eax         |    | mov ebx, eax                      |
                    | jmp 0x400786;[gc]                  |    | mov eax, dword [local_24h]        |
                    `------------------------------------'    | sub eax, 2                        |
                        v                                     | mov edi, eax                      |
                        |                                     | call sym.calc;[gb]                |
                        |                                     | sub ebx, eax                      |
                        |                                     | mov eax, dword [local_24h]        |
                        |                                     | sub eax, 3                        |
                        |                                     | mov edi, eax                      |
                        |                                     | call sym.calc;[gb]                |
                        |                                     | mov r12d, eax                     |
                        |                                     | mov eax, dword [local_24h]        |
                        |                                     | sub eax, 4                        |
                        |                                     | mov edi, eax                      |
                        |                                     | call sym.calc;[gb]                |
                        |                                     | sub r12d, eax                     |
                        |                                     | mov eax, r12d                     |
                        |                                     | add ebx, eax                      |
                        |                                     | mov eax, dword [local_24h]        |
                        |                                     | sub eax, 5                        |
                        |                                     | mov edi, eax                      |
                        |                                     | call sym.calc;[gb]                |
                        |                                     | imul eax, eax, 0x1234             |
                        |                                     | add eax, ebx                      |
                        |                                     | mov dword [local_14h], eax        |
                        |                                     `-----------------------------------'
                        |                                         v
                        |                                         |
                        '--------------------.                    |
                                             | .------------------'
                                             | |
                                       .--------------------------------------.
                                       |  0x400786 [gc]                       |
                                       | ; CODE XREF from sym.calc (0x400729) |
                                       | mov eax, dword [local_14h]           |
                                       | add rsp, 0x20                        |
                                       | pop rbx                              |
                                       | pop r12                              |
                                       | pop rbp                              |
                                       | ret                                  |
                                       `--------------------------------------'     
```