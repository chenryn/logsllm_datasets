log t
n log t
t log t
t2 log t
n log t
n log t
t
t
1
1
1
1
n
n
n
n
n log t
n log t
via constant-sized polynomial commitments [14]. eJF-DKG
also reduced veriﬁcation time from Θ(nt) per player to Θ(n)
but at the cost of Θ(nt) dealing time per player. All DKGs
so far require Θ(nt) computation per player (in the worst
case), while our AMT DKG requires Θ(n log t). Furthermore,
these DKGs assume a synchronous communication model
between players, which can be difﬁcult to instantiate. Recently,
ETHDKG [32] surpasses this difﬁculty using Ethereum [2].
Kate et al. introduced asynchronous DKG protocols [17], [19]
based on bivariate polynomials. We have not investigated if
our techniques apply there.
5) Polylogarithmic DKG: Canny and Sorkin present a
polylogarithmic time DKG [47], a beautiful result that un-
fortunately has limitations. In certain settings, their protocol
only requires Θ(log3 n) computation and communication per
player. The key idea is that each player only talks to a
group of log n other players, leading to a Θ(log3 n) per-player
complexity. Unfortunately, their protocol centralizes trust in
a dealer who must “permute” the players before the protocol
starts. The authors argue the dealer can be distributed amongst
the players, but it is unclear how to do so securely while
maintaining the Θ(log3 n) per player complexity.
Furthermore, their protocol does not efﬁciently support all
thresholds (t, n). Instead, it only supports ((1/2 + ε)n, n)
thresholds and tolerates (1/2 − ε)n failures, where ε ∈
(0, 1/2). Thus, their protocol can tolerate more failures only
if ε is made very small. Unfortunately, a smaller ε causes the
group size to increase, driving up the per-player complexity
(see Appendix D). As a result, their protocol only scales in
settings where a small fraction of failures is tolerated (e.g., 1/5)
and a larger fraction of players is required to reconstruct (e.g.,
4/5). Nonetheless, for their protocol to be truly distributed, the
trusted dealer must be eliminated as a single point of failure.
6) DKG implementations: Finally, the increasing popularity
of BLS threshold signatures [10] has led to several DKG im-
plementations. For example, recent works implement a DKG
on top of the Ethereum blockchain [32], [48], [49]. Cryptocur-
rency companies such as DFINITY and GNOSIS implement
a DKG as well [50], [51]. Finally, Distributed Privacy Guard
(DKGPG) [52] implements a DKG for ElGamal threshold
encryption [53] and for DSS threshold signatures [28]. All
current implementations are based on Feldman [26] or Peder-
sen commitments [15] and require Θ(nt) time per player.
II. PRELIMINARIES
In this section we introduce some notation, our crypto-
graphic assumptions and the communication and adversarial
model for the distributed protocols in this paper. Then, we give
background on TSS, polynomial commitments, VSS, DKG
and polynomial multipoint evaluations.
1) Notation: Let Fp denote the ﬁnite ﬁeld “in the exponent”
associated with a group G of prime order p with generator g.
We use multiplicative notation for all algebraic groups in this
paper. Let 1G denote the identity element of a group G. Let
s ∈R S denote sampling an element s uniformly at random
from some set S. Let log x be shorthand for log2 x. Let [i, j] =
{i, i+1, . . . , j−1, j} and [n] = [1, n] and. Let deg φ denote the
degree of a polynomial φ. We say a polynomial φ has degree-
bound m if deg φ  d, we can interpolate φ directly from the evaluations,
which makes verifying any evaluation trivial.
Finally, KZG proofs have a homomorphic property. Suppose
we have two polynomials φ1, φ2 with commitments C1, C2
and two proofs π1, π2 for φ1(a) and φ2(a), respectively. Then,
a commitment C to the sum polynomial φ = φ1 + φ2 can be
computed as C = C1C2 = gφ1(τ )gφ2(τ ) = gφ1(τ )+φ2(τ ) =
g(φ1+φ2)(τ ). Even better, a proof π for φ(a) w.r.t. C can be
aggregated as π = π1π2. This homomorphism is necessary in
KZG-based protocols such as eJF-DKG (see §II-D).
C. (Veriﬁable) Secret Sharing
A (t, n) secret sharing scheme allows a dealer to split up
a secret s amongst n players such that only subsets of size
≥ t players can reconstruct s. Secret sharing schemes were
introduced independently by Shamir [65] and Blakley [66].
Shamir’s secret sharing (SSS) is split into two phases. In
the sharing phase, the dealer picks a degree t − 1, random,
univariate polynomial φ, lets s = φ(0) and distributes a share
si = φ(i) to each player i ∈ [n]. In the reconstruction
phase, any subset T ⊂ [n] of t honest players can recon-
struct s by sending their shares to a reconstructor. For each
i ∈ T , the reconstructor computes a Lagrange coefﬁcient
LT
0−j
i−j . Then, he computes the secret as
i (0)si (see §II-4).
i (0) = (cid:81)
s = φ(0) =(cid:80)
j∈T,j(cid:54)=i
i∈T LT
Algorithm 1 eVSS: A synchronous (t, n) VSS
Sharing Phase
Dealing round:
1) The dealer picks φ ∈R Fp[X] of degree t− 1 with s = φ(0), computes
2) Computes KZG proofs πi = gqi(τ ), qi(x) = φ(x)−φ(i)
3) Broadcasts c to all players. Then, sends (si, πi) to each player i ∈ [n]
all shares si = φ(i), and commits to φ as c = gφ(τ ).
x−i