-text:00000004 02 22
MOVS
MOVS
R3,3
.text:00000006 01 21
R2,2
SNON
R1,#1
.text:0000000A 00 F0 OD F8 BL.
02 00 3000000013x03*
MOVS
R0,0
2printf
.text:00000010 10 BD
POP
(R4, PC)
这段代码和前面那段ARM程序没有太多差别。
开启优化选项的Keil6/2013（ARM模式）+无返回值
我们对源代码略做修改，删除“retum0”的语句：
include 
void main ()
1
printf (*a=id; b=id; c=id*, 1, 2, 3);
相应的汇编指令就会出现显著的差别：
.text:00000014 03 30 A0 E3
.text:00000014 nain
.text:00000018 0220 A0E3MOV
-text:0000001C 01 10 A0 E3
R2,#2
.text:00000020 1E 0E 8F E2
MOV
R0,aA080CD
R1,#1
.text:00000024 CB 18 00 EAB
ADR
:*a=1d;b=1d;c=1d\n*
_2printf
在其余优化选项（-O3）之后，把源代码编译为ARM模式的代码。这次，程序的最后一条指令变成了
B指令，不再使用之前的BL指令。另外，与前面那个没有启用优化选项的例子相比，本例并没有出现保
存RO和LR寄存器的函数序言或函数尾声。这形成了另一个显著的差异。B指令仅仅将程序跳转到另一个
地址，不会根据LR寄存器的值进行返回。大体上说，它和x86平台的JMP指令非常相似。为什么编译器
会如此处理呢？实际上，这些指令与前面（未启用优化选项）的运行结果相同。主要原因有两个：
（1）栈和 SP（Stack Pointer）都没有发生变化。
（2）调用printfO函数是程序的最后一条指令：调用之后程序再无其他操作。
即使未启用优化选项，在完成printfO函数的作业之后，程序只是要返回到LR寄存器里存储的返回地
址而已。LR的值并没有因为调用printfO函数而发生变化，而且程序也没有调用printfO函数之外的函数。
因为没有指令会修改LR的值，所以程序不必保存LR的状态。另外，在调用这个函数之后，程序也没有
其他操作。故而编译器进行了相应的优化。
当程序最后的语句是调用另外一个函数时，编译器通常都会进行这种优化。
ARM64
非经优化的 GCC(Linaro) 4.9
---
## Page 64
46
逆向工程权威指南（上册）
指令清单6.8非经优化的GCC（Linaro)4.9
.LC1:
f2:
string *a=ld; b=ld; c=id*
 save FP and LR in stack frame:
stp
x29， x30, [sp, -16]1
set stack frame (FP=SP):
add
x29,sp,0
adrp
add
x0,x0, 11o12:.LC1
x0,-LC1
nov
α1, 1
mov
nov
3, 3
￥2,
b2
mov
printf
:restore FP and LR
w0, 0
ret
1dp
x29, x30, [sp], 16
第一条STP(StorePair)指令把FP(X29）和LR(X30）的值推送入栈。第二条“ADDX29,SP,0”指令构成
栈帧，它只是把SP的值复制给X29。
在传递给printfO的格式化字符串里，%d是32位int整型数据。所以，程序使用了寄存器的32位存储
后面的数据1、2、3。
即使启用了GCC（Linaro）4.9的优化选项，它生成的指令也与此相同。
6.2.2ARM模式下传递8个参数
我们对6.1.2节的例子稍做修改：
include 
int nain ()
printf (*a=id; b=fd; c=td; d=td; e=fd; f=1d; g=1d; h=id\n*, 1, 2, 3, 4, 5, 6, 7, 8)=
f0 uznqea
Optimizing Keil 6/2013: ARM 模式
.text:00000028
nain
8200000014x03
text:00000028
var_18 = -0x18
text:00000028
var_14 = -0x14
8200000010X03
var_4 = -4
.text:00000028 04 E0 2D E5 STR
82000000:2x03
.text:0000002C 14 D0 4D E2 SUB
LR, [SP, var_4]!
text:00000030 08 30 A0 E3
MOV
R3, #8
SP, SP, 0x14
.text:0000003407 20 A0 E3 MOV
.text:00000038 0610 A0 E3MOV
R2,7
-text:0000003c 05
00 A0 E3
R1, 16
.text:00000040 04 C0 8D E2
AON
R12, SP, 0x18+var_14
RO,
#5
.text:00000044 0F 00 8C E8
.text:00000048 04 00 A0 E3
STMIA R12, (R0R3)
.text:0000004C 00 00 BD E5
NOK
RO,[SP,#0x18+var_18]
R0, 4
text:00000050 03 30 A0 E3
20 S000000:3x93
20 A0 E3
MOV
MOV
R3,
R2,
text:00000058 01 10 A0 E3
MOV
R1, 1
#2
text:0000005C 6E OF BF E2 ADR
R0, aADB0CD0DEDFDGD : "a=Id: b=1d: c=1d; d=id; e=fid; f=Id: g=1*,,
text:00000060 BC 18 00 EB
.text:00000064 14 D0 8D E2 ADD
BL
SP, SP, #0x14
_2printf
.text:00000068 04 F0 9D E4 LDR
PC, [SP+4+var_4],#4
---
## Page 65
第6章printf）函数与参数调用
47
程序分为以下几个部分。
函数序言：
第一条指令“STRLR,[SP,#var_4]!”将LR寄存器的值推送入栈。在后面调用printfO函数的时候，
程序会修改这个寄存器的值。指令中的感叹号表示这属于预索引（pre-index）指令。具体说来，
它会首先将SP的值减去4，然后再把LR的值保存在SP所指向的地址。这条指令与x86平台的
PUSH指令十分类似。有关PUSH指令的详细介绍，请参见本书的28.2节。
第二条指令“SUBSP，SP，#0x14”将修改栈指针SP，以便在栈内分配0x14（即20）字节的存储
空间，在后续的操作中，程序会传递5个32位参数，所以此时需要分配5x4-20字节的存储空间。
而函数所需的前4个参数则是由寄存器负责传递。
使用栈传递5、6、7、8：
参数5、6、7、8分别被存储到R0、R1、R2、R3寄存器，然后通过“ADDR12,SP,#0x18+var_14”
指令把栈的指针地址写到R12寄存器里，以供后续指令进行入栈操作。var_14是IDA创建的汇编
宏，其数值等于-0x14。这种“var_？”形式的宏出现在与栈有关的操作指令上时，用于标注栈中
的局部变量。最终，R12寄存器里将会放入SP十4。
后面的“STMIAR12,{R0-R3}”指令把R0~R3寄存器中的内容写到R12寄存器的值所表示的内存地址上。
STMIA是“Store Multiple IncrementAfer”的缩写。顾名思义，每写入一个寄存器的值，R12的值就会加4。
·通过栈传递数值4：
的值也存储于栈中。由于var_18就是-0x18，所以偏移量的值最终为0.可见，R0寄存器里的值
将会写到SP所指向的内存地址。
●通过寄存器传递1、2、3：
传递给printf)函数的前三个参数a、b、c（分别为1、2、3）通过R1、R2、R3寄存器传递给printf)
函数。在此之前，其他的5个数字都已经推送入栈。在传递格式化字符串之后，被调用的printf)
函数就可以调用它所需的全部参数了。
·调用printfO函数。
函数尾声：
“ADDSP,SP，#0x14”指令把栈指针SP还原为调用printfO之前的状态，起到释放栈空间的作用。当然，
栈内原有的数据不会被清除或者置零，仍然存在相应地址上。在执行其他函数时，这些数据将被复写。
在程序的最后，“LDRPC,[SP+4+var_4],#4”从栈中提取LR寄存器的值，把它传递给PC寄存器。
接下来程序将会跳转到那里。这将结束整个程序。这条指令没有出现感叹号，属于“延迟索引
/post-index”指令。也就是说，它先把[SP+4+var_4]（即[SP]）传递给PC，然后再做SP=SP4
的运算。为什么IDA以这种风格显示这条指令？IDA以此充分展现栈的内存存储布局，var_4是
局部栈里保管LR的数据空间。这条指令与x86平台的POP指令十分类似。
Optimizing Keil 6/2013: Thumb 模式
, text: 0000001c
printf_sain2
,text:0000001C
.text:0000001c
var_18 = -0×18
.text:0000001C
var_14 = -0x14
.text:0000001C
.text:0000001C
8- × 8"xeA
.text:0000001C 00 B5
.text:0000001E 08 23
PUSH
(LR)
MOVS
R3,#8
-text:00000020 85 B0
SUB
STR
R3, [SP,#0x18+var_8]
SP, SP, 0x14
-text:00000022 0493
-text:00000026 06 21
MOVS  R1, 16
SAOK
R2, #7
---
## Page 66
48
逆向工程权威指南（上册）
.text:00000028 05 20
MOVS
R0,#5
.text:0000002A 01 AB
ADD
R3, SP, #0x18+var_14
.text:0000002E 04 20
,text:0000002C 07
C3
MOVS
VTNLS
R0, 4
R31,(R0-R2)
.text:00000032 03 23
-text: 00000030
00
90
STR
SAOH
R3,3
R.0,
[SP,#0x18+var_18]
.text:00000034 02 22
.text:00000036 01 21
SAOK
R2, #2
-text:00000038 A0 A0
SAOK
R0, aADBDcD0DEDFDGD ; “a=Id; b=ldj c=d; d=td; e=ld; f=$d; g=3*
R1, #1
ADR
.text:0000003A 06 F0 D9 F8
BL
__2printf
-text:0000003E
.text: 0000003E
1oc_3E : C00s XREF: examp1e13_f+16
.text:0000003E 05 B0
.text:00000040 00 BD
ADD
SP, SP, 0x14
POP
(PC)
Thumb模式的代码与ARM模式的代码十分相似，但是参数入栈的顺序不同。即，Thumb模式会在第
一批次将8推送入栈、第二批次将7、6、5推送入栈，而在第三批次将4推送入栈。
Optimizing Xcode 4.6.3 (LLVM): ARM 模式
_text: 0000290C
_printf_main2
_text: 00002900
var_1C = =0x1C
_text:0000290C
var_C = -0xC
_text:0000290c
_text:00002910 0D 70 A0 E1
_text:0000290C
80 40 2D E9
STHFD SP!, (R7,IR)
MOV
SP, SP, +0x14
R7, SP
_text:00002914
14 D0 4D E2
SUB
8162000014x92
_text:0000291C 07 C0 A0 E3
170 05 01 E3
MOV
80, #0x1570
MOV
R12, #7
_text: 00002920
00 00 40 E3
IAOK
R0, 0
_text:00002924
04 20 A0 E3
MOV
R2,
_text:0000292C 06 30 A0 E3
_text: 00002928
00 00 8F E0
ADD
R0, PC, R0
MOV
R3, #6
_text: 00002930
105 10 A0 E3
MOV
R1, #5
062000013x91
100 20 8D E5
STMFA SP, (R1,R3,R12)
STR
R2,
[SP, I0x1C+var_1C]
_text: 00002938
10A 10 8D E9
0062000011x91
08 90 A0 E3
HOV
R9,
_text:00002940
101 10 A0 E3
MOV
R1, #1
8
_text:00002944
102 20 A0 E3
MOV
R2, #2
_text:0000294C 10 90 8D E5
_text:00002948
03 30 A0 E3
MOV
R9, [SP, #0x1C+var_C]
R3, #3
STR
_text:00002950
_text:00002954 07 D0 A0 81
A4 05 00 EB
BL
MOV
SP, R7
_text:00002958 80 80 BD E8
LDMFD SP!, (RT, PC)
这段汇编代码与前面的代码十分雷同，不同的是STMFA（Store Multiple Full Ascending）指令。它是
STMIB（Store Multiple Increment Before）的同义词。它们首先增加 SP指针的值，然后将数据推送入栈：而
不是先入栈，再调整SP指针。
虽然这些指令表面看来杂乱无章，但是似乎这就是xcode编译出来的程序的一种特点。例如，在地址0x2918、
0x2920、0x2928处，R0寄存器的相关操作似乎可以在一处集中处理，不过，这种分散布局是编译器针对并行计算
而进行的优化。通常，处理器会尝试着并行处理那些相邻的指令。以“MOVTRO，#O”和“ADDRO,PC,RO”为
例这两条指令都是操作R0寄存器的指令，若集中在一起就无法并行计算.另一方面，“MOVTRO，#0”和"MOV
R24”之间不存在这种资源冲突，可以同时执行。想必是出于这种设计，编译器才会尽可能地进行这种处理吧。
Optimizing Xcode 4.6.3 (LLVM):Thumb2 模式
_text:00002BA0
_printf_nain2
① 指针指向的地址必须有数据，这就是 fullstack 的涵义，也是它们与 empty stack 的区别。
---
## Page 67
第6章
printfO函数与参数调用
49
_text: 00002BA0
_text:00002BA0
var_1c = -0x1C
_text:00002BA0
var_18 = -0x18
_text:00002BA0
var_C
= -0xC
_text:00002BA0 B0 B5
_text: 00002BA0
PUSH
_text:00002BA2 6F 46
R7, SP
(R7, LR.)
_text:00002BA4 85 B0
MOV
SUB
_text:00002BA6 41 F2 D8 20
SP, SP, #0x14
MOVI
R12, #7
RO,
0x120B
_text:00002BAA 4F F0 07 0C
MOV.W
_text:00002BAE C0 F2 00 00
MOVT.¥
R0, #0
_text:00002BB4 78 44
2882000013x81
0422
SAOK
ADD
R2,
PC
#4
_text:00002BB6
06 23
SAOK
R0,
R3,
6
: char
_text:00002BB8 05 21
MOVS
R1,
_text:00002BBA 0D F1 04 0E
5
ADD.W
LR,
SP, 0x1C+var_18
_text:00002BBE
0092
STR
_text:00002BC0 4F FO 08 09
R2,
[SP, #0x1C+var_1C]
MOV-K
R9,
0A 10
STMIA.W
8
12 10 8002000013x91
LR,
(R1,R3, R12)
MOVS
MOVS
R2,#2
R1,
1
_text:00002BCC 03 23
SAOH
_text:00002BCE CD F8
STR.,W
R3,
R9,
[SP, #0x1C+var_C]
#3
_text:00002B02
01 F0 0A EA
BLX
_print5
_text:00002BD6 05 B0
AD0
SP, SP, #0x14
_text:00002808 80 B0
POP
(R7, PC)
与ARM模式编译出的代码相比，这段代码存在着明显的Thumb指令的特征。除此之外，ARM模式
和Thumb模式编译出的代码并无实际区别。
ARM64
Non-optimizing GCC (Linaro) 4.9
指令清单6.9Non-optimizing GCC (Linaro) 4.9
-1C2:
,string “a=1d; b=1d; c=id; d=1id; e=1id; f=1d; g=ld; h=lid\n*
:grab more space in stack:
f3:
:save FP and LR in stack frame:
sub
z# *ds ·ds 
:set stack frane (FP=SP):
stp