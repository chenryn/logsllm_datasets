### 8.3.5 Codenomicon

Codenomicon is a tool designed to fuzz servers, clients, and even applications that process files. It is executed and controlled through a graphical Java application. Codenomicon can be configured to send valid inputs between fuzzed inputs and compare the responses to those from previous tests, enabling it to detect critical faults. Additionally, it supports the execution of custom external monitoring scripts. However, it lacks built-in monitoring or analysis features.

### 8.3.6 beSTORM

beSTORM, developed by Beyond Security, is a commercial fuzzer capable of handling both network and file fuzzing. It supports nearly 50 protocols and, unlike other commercial fuzzers, can be used for fuzzing proprietary and unsupported protocols. This is achieved through a sophisticated GUI interface, which is more advanced than that found in Taof. A network packet capture (or a file for file fuzzing) is loaded into beSTORM, where it can be manually dissected or automatically analyzed to identify significant elements such as length fields, ASCII text, and delimiters. Once the unknown protocol is understood, beSTORM uses a large library of heuristics to fuzz it. beSTORM also allows for the complete description of a protocol specification in XML.

beSTORM includes advanced monitoring capabilities. It can communicate with a remote monitoring tool to detect crashes or exceptions in the target. This information is then fed back to the fuzzer to help pinpoint the exact input that caused the error.

### 8.3.7 Application-Specific Fuzzers

When possible, we included protocol-specific fuzzers in our evaluation. These include FTPfuzz, a GUI-based FTP fuzzer, and the PROTOS test suite. PROTOS, originally developed at the University of Oulu, was the first SNMP fuzzer and was used to discover the ASN.1 bugs mentioned earlier.

### 8.3.8 Whatâ€™s Missing

This study excluded some well-known open-source fuzzing frameworks, such as SPIKE, Sulley, and Peach. These tools are not standalone fuzzers but rather frameworks that generate fuzzed inputs based on a specification file. Testing these frameworks would primarily evaluate the quality of the specification file rather than the framework itself. Additionally, creating a comprehensive specification file can take weeks. It should be noted that Sulley does include sophisticated monitoring and analysis tools, and SPIKE now supports layer 2 protocols.

### 8.4 The Targets

Three common protocols were chosen for testing: FTP, SNMP, and DNS. These protocols are relatively simple and represent both ASCII-based and binary protocols. For FTP and SNMP, servers were tested, while a DNS client was examined. To avoid finding real bugs, well-established and robust open-source implementations were selected.

- **FTP Server**: ProFTPD, configured with default settings and modified to allow the fuzzer to run quickly without denying connections. An anonymous login was enabled, allowing for file downloads and uploads.
- **SNMP Server**: Net-SNMP, configured to accept version 2 SNMP with a suitable community string and version 3 SNMP with a valid username (no authentication required). The user had read and write access. Configuration options may affect the fuzzer's performance.
- **DNS Client**: The `dig` utility from the BIND open-source DNS library.

### 8.5 The Bugs

For each program implementation, 17 bugs were added, including buffer overflows, format string vulnerabilities, command injection, double free, and wild pointer writes. Some bugs were easy to find, while others were hidden deeper within the application. All bugs were remotely accessible and not detectable using the standard server or client. Each vulnerability was logged to indicate when it was detected, ensuring accurate results regardless of the monitoring method used.

### 8.5.1 Example Bugs

- **FTP Bug 0**: A format string vulnerability in the `pr_response_add_err` function.
- **FTP Bugs 2, 16**: A buffer overflow and a format string issue in the processing of the STRU FTP command, only detectable if the first character of the string is 'R' or 'P'.

### 8.6 Results

The following abbreviations are used in the results:
- **Random**: Purely random data fed into the interface.
- **GPF Partial/Full**: GPF with partial or full packet captures.
- **SuperGPF**: SuperGPF with a full packet capture and a text file of valid commands.
- **Taof Partial/Full**: Taof with partial or full packet captures.
- **ProxyFuzz Partial/Full**: ProxyFuzz with partial or full packet captures.
- **Mu-4000, FTPfuzz, Codenomicon, GPF Generic, GPF SNMP**: Various fuzzers and configurations.

#### 8.6.1 FTP
- **Table 8.1**: Summary of bugs found and code coverage obtained by each fuzzer.
- **Figure 8.1**: Percentage of bugs found and code coverage for the FTP server.

#### 8.6.2 SNMP
- **Table 8.2**: Summary of bugs found and code coverage obtained by each fuzzer.
- **Figure 8.2**: Percentage of bugs found and code coverage for the SNMP server.

#### 8.6.3 DNS
- **Table 8.3**: Summary of bugs found and code coverage obtained by each fuzzer.
- **Figure 8.3**: Percentage of bugs found and code coverage for the DNS client.

Throughout the testing, generation-based fuzzers ran through all their test cases, while mutation-based fuzzers were allowed to run for 25,000 test cases or seven hours, whichever came first.