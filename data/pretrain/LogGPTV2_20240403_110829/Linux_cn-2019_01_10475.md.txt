---
**作者**: Gordon Haff  
**类别**: 观点  
**评论数据**:
- **日期**: 2019-03-29 16:37:17
- **留言**: 文中有几个错别字
- **IP地址**: 59.37.7.50
- **用户名**: 来自广东广州的 Chrome 55.0|Windows 10 用户

**统计**:
- 评论数: 1
- 收藏次数: 0
- 点赞数: 0
- 分享次数: 1
- 浏览量: 4906

**发布日期**: 2019-01-25 00:17:39  
**编辑推荐**: 否  
**摘要**: 安全必须进化以适应当前的应用开发和部署方式。  
**来源网址**: <https://opensource.com/article/18/9/devsecops-changes-security>  
**ID**: 10475  
**是否翻译**: 是  
**大图**: /data/attachment/album/201901/25/001721dx7b7dmdnua2p2w2.jpg  
**永久链接**: /article-10475-1.html  
**图片**: /data/attachment/album/201901/25/001721dx7b7dmdnua2p2w2.jpg.thumb.jpg  
**相关文章**: []  
**审稿人**: wxy  
**选择者**: lujun9972  
**标签**: 
- 安全
- DevSecOps  

**缩略图显示**: 否  
**标题图片显示**: 是  
**译者**: hopefully2333  
**更新日期**: 2019-01-25 00:17:39
---

### 摘要
安全必须进化以跟上当今的应用开发和部署方式。

![](/data/attachment/album/201901/25/001721dx7b7dmdnua2p2w2.jpg)

对于是否需要扩展 DevOps 以提升安全性，一直存在争议。毕竟，DevOps 代表了一系列新实践，使用新的工具（通常是开源的），并在此基础上构建更协作的文化。那么，为什么不能通过 DevBizOps 更好地满足商业需求？或者通过 DevChatOps 强调更快更好的沟通？

然而，正如 John Willis 在今年早些时候所写的关于他对 DevSecOps 术语的理解，“我希望有一天我们不再使用 DevSecOps 这个词，安全将成为所有服务交付讨论中理所当然的一部分。在此之前，我的结论是，这个词只是一个新的特性组合。更重要的是，我们在信息安全方面做得并不好，而这个名称明确指出了问题所在。”

那么，为什么我们在信息安全方面做得不好？在 DevSecOps 的背景下，做好安全又意味着什么？

尽管（也可能正是因为）庞大的复杂行业的单点产品解决了特定方面的问题，但我们从未真正做好信息安全。我们仍然可以在这个时代做到足够好，以防范那些主要集中在受限网络连接和公司设备上的威胁。然而，这些情况并不能准确描述大多数现代组织的现状。随着 DevSecOps、新的应用架构模型、开发实践以及越来越多的安全威胁的引入，定义了一个需要更快迭代的新常态。与其说 DevSecOps 单独改变了安全，不如说信息安全公司在 2018 年需要新的方法。

请仔细考虑以下五个领域：

#### 自动化
自动化是 DevOps 的标志之一，这不仅是为了速度，也是为了确保快速变化时不会造成破坏。实际上，自动化是 DevOps 的一个很好的切入点，即使是在仍在使用传统的单体应用程序的组织中也是如此。使用像 Ansible 这样的易用工具来自动化配置或测试，是开始 DevOps 的常用方法。

对于 DevSecOps 而言，安全已经成为一个持续的过程，而不是在应用程序生命周期中的不定期检查。当漏洞被厂商发现并修复时，快速应用这些修复至关重要，这样可以迅速淘汰利用这些漏洞的攻击程序。

#### 左移
传统上，安全通常被视为开发流程结束时的守门人，负责检查所有部分以确保没有问题。否则，就要重新开始。安全团队以其常说“不”而闻名。

因此，为什么不将安全提前到开发流程的早期阶段呢？安全团队仍然可以说“不”，但在开发早期进行重构的影响远远小于在开发完成后进行重构的影响。不过，我不喜欢“左移”这个词，因为它暗示安全仍然是一个仅提前进行的一次性工作。实际上，在整个应用程序生命周期中，从供应链到开发、测试再到上线部署，安全都需要大量的自动化处理。

#### 管理依赖
现代应用程序开发的一个重大变化是你通常不需要编写大部分代码。使用开源库和框架就是一个明显的例子。此外，你还可以从公共云服务商或其他来源获取额外的服务。在许多情况下，这些外部代码和服务比你自己编写的要好得多。

因此，DevSecOps 需要你关注软件供应链：你是从可信的来源获取软件吗？这些软件是最新的吗？它们已经集成到你的安全流程中了吗？你有哪些策略来管理这些代码和 API？是否有可用的商业支持？

没有一套标准答案适用于所有情况。对于概念验证和大规模生产，可能需要不同的策略。但就像制造业一样（DevSecOps 和制造业有很多相似之处），供应链的可信度至关重要。

#### 可见性
我已经谈到了贯穿应用程序整个生命周期的所有阶段的自动化需求。这里假设我们可以看到每个阶段发生的情况。

有效的 DevSecOps 需要有有效的监控，以便自动化系统知道该做什么。这种监控分为多个类别。一些长期和高层次的指标可以帮助我们了解整个 DevSecOps 流程是否运行良好。严重的威胁警报需要立即处理（例如，安全扫描系统已关闭！）。还有一些警报，如扫描失败，需要修复。我们记录了许多参数的日志以便事后分析（随着时间的推移，哪些发生了变化？导致失败的原因是什么？）。

#### 分散服务 vs 一体化解决方案
虽然 DevSecOps 实践可以应用于多种类型的应用架构，但它们对小型且松散耦合的组件最有效。这些组件可以独立更新和复用，而不会强制更改应用程序的其他部分。在理想情况下，这些组件可以是微服务或函数，但这一原则也适用于任何通过网络通信的松散耦合服务。

这种方法确实带来了一些新的安全挑战，组件之间的交互可能会很复杂，总的攻击面会更大，因为现在应用程序有更多的网络切入点。另一方面，这种架构还意味着自动化的安全和监控可以更精细地查看应用程序的各个组件，因为它们不再深埋在一个单体应用程序中。

不要过多关注 DevSecOps 这个术语，重要的是要记住，安全正在不断演变，因为我们编写和部署应用程序的方式也在不断演变。

---
**作者**: [Gordon Haff](https://opensource.com/users/ghaff)  
**选题**: [lujun9972](https://github.com/lujun9972)  
**译者**: [hopefully2333](https://github.com/hopefully2333)  
**校对**: [wxy](https://github.com/wxy)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出