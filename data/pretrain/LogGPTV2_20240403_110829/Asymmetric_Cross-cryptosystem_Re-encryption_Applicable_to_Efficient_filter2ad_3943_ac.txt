(cid:17)(cid:105)
(cid:81)n
(cid:48)
IDj , C2
1
i=1,i(cid:54)=j
H(IDi) ,
where
∆S,j =
1
α
 n(cid:89)
i=1,i(cid:54)=j
(α + H(IDi)) − n(cid:89)
i=1,i(cid:54)=j
 .
H(IDi)
Then compute
(cid:48)
0 = C0/K = M/ˆe (F (k), C2) .
C
Finally, output
CTID = (C
(cid:48)
0, C2, E0, E1).
File Access: When a user requires an IBBE secured ﬁle
stored in DSP, the DSP returns the corresponding ﬁle. The
users ﬁrst decrypts the IBBE ciphertext to obtain the sym-
metric key and then uses the symmetric key to ﬁnally obtain
the data. The decryption of IBBE ciphertext is identical to
that in [10] and described as follows.
M ← DecryptIBBE(P K, CTID, SKS): The algorithm
takes as inputs the public key P K, the access credential
SKIDj of user IDj ∈ S and the IBBE ciphertext CTS =
(C0, C1, C2). It computes
(cid:17) · ˆe(cid:0)SKIDj , C2
(cid:1)(cid:17)
(cid:81)n
1
i=1,i(cid:54)=j
H(IDi)
(cid:16)
(cid:16)
(cid:48)
M
=
ˆe
C1, h∆S,j
= ˆe(g, h)s
and outputs M = C0/M
(cid:48)
.
The basic idea of this algorithm is ﬁrst running the IBE de-
cryption to recover the blinding value k and then re-blinding
C
(cid:48)
0 to recover M by performing one bilinear pairing.
Correctness. For the decryption of an IBBE ciphertext, the
correctness follows from that of IBBE decryption described
in [10]: If CTS is well formed for S, we have that
(cid:48)
M
1
g
g
ˆe
ˆe
=
(cid:16)
(cid:17)·
(cid:16)
(cid:16)
i=1(α+H(IDi))(cid:17)(cid:17)
−αs, h∆S,j
α+H(IDj ) , hs(cid:81)n
(cid:81)n
(cid:16)
−s(cid:81)n
i=1,i(cid:54)=j (α+H(IDi))+s(cid:81)n
i=1,i(cid:54)=j (α+H(IDi))(cid:17)
ˆe (g, h)s(cid:81)n
(cid:81)n
i=1,i(cid:54)=j H(IDi)(cid:17)
(cid:16)
ˆe (g, h)s(cid:81)n
(cid:81)n
1
i=1,i(cid:54)=j
1
i=1,i(cid:54)=j
ˆe (g, h)
=
=
H(IDi)
1
i=1,i(cid:54)=j
i=1,i(cid:54)=j H(IDi) ·
H(IDi)
H(IDi)
= ˆe(g, h)s.
(cid:48)
Thus, M = C0/M
= M ˆe(g, h)s/ˆe(g, h)s.
(cid:48)
K
(cid:19)
We now show the correctness of the decryption for a con-
verted ciphertext. First, in the ﬁle conversion, we have that
1
g
g
ˆe
= ˆe
= ˆe
(cid:18)
i=1(α+H(IDi))
(cid:16)
(cid:16)
(cid:16)
−αs, h∆S,j
i=1,i(cid:54)=j (α+H(IDi)) ·
g
α+H(IDj ) · F (k)
(cid:17)·
i=1,i(cid:54)=j H(IDi), hs((cid:81)n
(cid:81)n
(cid:17) · ˆe (g, h)s(cid:81)n
(cid:17)
i=1,i(cid:54)=j (α+H(IDi))+s(cid:81)n
(cid:16)
i=1,i(cid:54)=j H(IDi) ·
ˆe (g, h)s(cid:81)n
(cid:81)n
=(cid:0)ˆe (g, h)s · ˆe (F (k), C2)(cid:1)(cid:81)n
i=1,i(cid:54)=j H(IDi), C2
K =(cid:0)K
−αs, h∆S,j
(cid:81)n
i=1,i(cid:54)=j H(IDi), C2
−s(cid:81)n
i=1,i(cid:54)=j (α+H(IDi)) · ˆe
H(IDi) = ˆe (g, h)s · ˆe (F (k), C2) .
i=1,i(cid:54)=j H(IDi)
= ˆe (g, h)
1
i=1,i(cid:54)=j
(cid:48)(cid:1)
(cid:81)n
F (k)
F (k)
ˆe
,
,
(cid:17)
,
and
It then follows that
C
0 = C0/K = M ˆe(g, h)s/ (ˆe (g, h)s · ˆe (F (k), C2))
(cid:48)
= M/ˆe (F (k), C2) .
Next, in the decryption, we have that
(cid:16)
α+H(ID) , hr(α+H(ID))(cid:17)
1
k = kˆe(g, h)r/ˆe
g
= kˆe(g, h)r/ˆe(g, h)r
which allows to compute F (k) ∈ G. It follows that
M = C
0 · ˆe(F (k), C2).
(cid:48)
5. SECURITY ANALYSIS
In this section, we evaluate the security of the ACCRE sys-
tem. Since the ACCRE involves an IBBE and an IBE, the
security involves the standard security deﬁnitions of these
two primitives, which can be found in [10] and [4], respec-
tively. In this analysis, we focus on the security due to the
introduction of ﬁle conversion in the security deﬁnition. At
a high level, a secure ACCRE system should guarantee that
unauthorized users cannot get any useful information about
the content of the IBBE secured ﬁle stored in DSP, even
if they could access the system public key, compromise the
access credentials of other unauthorized users, and collude
with the DSP. Further, since the IBBE encrypted ﬁles can
be transformed into IBE encrypted ones, the secure ACCRE
system should additionally resist the attacks from the collu-
sion of unauthorized users and the proxy.
∗
To capture these attacks, we deﬁne an adversary that is
able to access the public keys of IBBE and IBE, collude
with users (no matter in IBBE or IBE) by querying their
decryption keys, and compromise the proxy by having the
conversion keys. The adversary declares two equal-length
of identities. It is then challenged by
messages and a set S
∗
an IBBE ciphertext for one of the messages under the set S
.
The security of ACCRE states that even for such adversary,
it cannot distinguish which message is used to create the
ciphertext. To avoid trivial solutions, we require that the
adversary cannot query the decryption keys for the challenge
ciphertext. Moreover, the adversary should be restricted in
some way so that it cannot query the conversion keys that
can transform the challenge ciphertext into the ciphertexts
for which the adversary holds decryption keys. Formally, the
security of ACCRE is deﬁned by the following game played
between a challenger and the adversary.
Init: The adversary A declares a set of identities, S
attacked.
to be
∗
Setup: The challenger runs the Setup algorithm to obtain
the system public keys P K and master secret keys M SK.
It gives P K to the adversary A.
Phase 1: The adversary A issues queries Q1, ..., Qq(cid:48) to the
challenger, where Qi for 1 ≤ i ≤ q
is one of the following
queries:
(cid:48)
∗
Reveal(ID). A queries the decryption key for identity
ID (cid:54)∈ S
of either IBBE or IBE. In response, the chal-
lenger runs the algorithm KeyGen(P K, M SK, ID) to
output key SKID and returns this key to A.
CKReveal(S → ID). A queries the conversion key
from identity set S to an identity ID. In response, the
challenger runs the algorithm CKGen(P K, SKID(cid:48) , S, ID)
to output key CKS→ID and gives this key to A, where
the decryption key SKID(cid:48) ← KeyGen(P K, M SK, ID
for ID
(cid:48) ∈ S.
)
(cid:48)
Challenge: The adversary A outputs two equal-length mes-
sages M0 and M1. The restriction is that (1) the adversary
cannot query Reveal(ID) for any ID ∈ S
; and (2) the
∗
adversary A can query at most one of two queries CKRe-
∗ → ID) and Reveal(ID) for any ID. The chal-
veal(S
lenger then ﬂips a coin b ∈ {0, 1}, encrypts Mb under S
∗
and returns the ciphertext CTS∗ to A.
Phase 2: The adversary A issues queries Qq(cid:48)+1, ..., Qq to
the challenger just as in Phase 1, with the constraints that
(1) it cannot query Reveal(ID) for any ID ∈ S
; and (2) it
∗ → ID)
can query at most one of two queries CKReveal(S
and Reveal(ID) for any ID.
Guess: The adversary A outputs a guess b
The advantage of an attacker A in this game is deﬁned as
(cid:48) ∈ {0, 1}.
∗
AdvA = | Pr[b = b
(cid:48)
] − 1/2|.
Definition 1. An ACCRE system is secure if all poly-
nomial time adversaries have at most a negligible advantage
in the above game.
In the ACCRE system, there are two kinds of ciphertexts,
i.e., IBBE ciphertexts and converted IBE ciphertexts. How-
ever, we do not additionally challenge the adversary with
the IBE ciphertext in the security deﬁnition above, which
means that the adversary is not required to declare an iden-
tity to be attacked in Init phase. This is because that the
adversary is able to query the conversion keys and convert
the challenge IBBE ciphertext into an IBE one by using the
queried conversion keys.
The following theorem shows the security of ACCRE in
the above security deﬁnition, with the proofs given in Ap-
pendix A.
Theorem 1. Our ACCRE scheme is secure if the under-
lying IBBE and IBE are both secure. In particular, if there
exist an adversary A which has an advantage AdvA in break-
ing the security of the ACCRE system, then we can construct
an algorithm B that breaks the security of the underlying
IBBE and IBE schemes with advantage 1 and 2, respec-
tively, satisfying 1 + 2 ≥ AdvA/e(1 + qK ), where e is the
base of natural logarithm and qK is the maximum number of
A’s key queries.
From the above theorem, it can be seen that if the ad-
vantages of breaking the security of IBBE and the security
of IBE are both negligible, then the advantage in breaking
the security of ACCRE is also negligible, which means that
the ACCRE system resists the attacks from any polynomial-
time adversary deﬁned in Deﬁnition 1.
6. PERFORMANCE EVALUATION
In this section, we evaluate the performance of the AC-
CRE system both theoretically and experimentally.
6.1 Theoretical Analysis
We analyze the computation complexity of each proce-
dure of the ACCRE system. We do not take into account
the computation overheads of the symmetric encryption and
decryption, since they are only related to the data size and
independent of the ﬁle conversion mechanism of ACCRE.
We focus on the most expensive operations, i.e., exponenti-
ations and bilinear maps, in the asymmetric cryptosystems.
The time consumed by an exponentiation and a bilinear map
is denoted by te and tp, respectively.
Table 1: Computation
Operation
System Setup
User Registration
File Creation
CK Generation
File Conversion
Original File Access
Converted File Access
Computational Complexity
(m + 1) · te + tp
(n + 3) · te
1 · te
4 · te
n · te + 2 · tp
n · te + 2 · tp
2 · tp
Table 1 summarizes the computation cost of each proce-