even if the dom-U is entirely compromised (including kernel-
level attacks). In other words, even though Gyrus extracts
information from the memory of dom-U by running a helper
component called UI Monitor inside of it, we do NOT assume
the correctness of such information. Instead, we designed
a trusted component called a Secure Overlay to verify the
validity of this information. Detailed information for these
components will be described in the next section.
B. User Intent
As mentioned in the introduction, the goal of Gyrus is
to capture rich semantics to understand a user’s intent. This
is used to ensure that only user intended trafﬁc can leave
the system. In this context, user intent is limited to what
we can infer from the system’s input devices. In BINDER
and Not-a-Bot, user intent is captured by directly observing
input hardware events (mainly from keyboard and mouse).
However, this approach is limited due to the missing contextual
information and the challenges of reconstructing user content
without “seeing” the screen. In order to make a sound security
decision, we must capture more detailed information about the
user’s intent. For example, the task of reconstructing a message
from a mail client using only keystrokes and mouse clicks
would require us to reconstruct the entire windowing system
and the logic behind text boxes (e.g. how to update the location
of the caret upon receiving keyboard/mouse input), as well as
to reproduce the logic to handle application-speciﬁc function
keys.
C. What You See Is What You Send
Instead of capturing and reconstructing user intent strictly
from hardware input events, our solution is to monitor output
events from the target applications. The main observation be-
hind our approach is that in almost all text-based applications,
3
Secure Overlay working with the GMail application in Internet
Fig. 1.
Explorer 10. Overlaid edit controls are highlighted with green bounding box.
Gyrus changes the border color to red if it detects any infringement.
the text that the user types will be displayed on the screen. This
allows the user to know that she has typed correctly and made
the necessary correction when there is a mistake. Therefore,
we can capture an accurate representation of the user intent if
Gyrus can “see” what a user sees. With this information, we
can determine what the user-intended outgoing trafﬁc should
look like, and make sure that this is the only trafﬁc that the
target application sends. We call this approach “What You See
Is What You Send” (WYSIWYS).
To enforce WYSIWYS, Gyrus is required to correctly and
fully capture textual content that is displayed to the user. In
addition, Gyrus needs information about the UI structure. In
Gyrus, we have two components that implement these features:
a dom-U component called UI Monitor extracts textual content
and a high-level UI structure of the current screen, and a dom-
0 trusted component called Secure Overlay to verify if the
captured text matches the user’s intent.
The UI Monitor operates on top of the UI Automation [26]
library in Microsoft Windows, which is originally intended
for building accessibility utilities such as screen readers for
visually impaired users (i.e., this library is designed to capture
text displayed on screen, and ﬁts our purpose very well). Not
only does the UI monitor capture the displayed text, it also
allows us to determine if the mouse click event observed by
dom-0 signiﬁes the user’s intent to commit what is displayed
on screen to the network.
Since the UI monitor relies on the code in dom-U, we stress
that we cannot and do not trust the output of this component.
Instead, we use the Secure Overlay to show the data captured
by the UI monitor to the user. As a result, the user can either
validate what the secure overlay displays by not modifying
it, or disagree by correcting what she sees (and this will be
captured by the UI monitor again). We call this idea reﬂective
veriﬁcation.
Figure 1 illustrates how WYSIWYS works with the UI
Fig. 2. An example WYSIWYS applicable operation: Facebook comment.
After adding a comment and pressing the ENTER key, the application gen-
erates network trafﬁc going to www.facebook.com/ajax/uﬁ/add-comment.php.
There is a direct mapping of user-intended content between on-screen text and
outgoing trafﬁc.
Monitor and the Secure Overlay. The UI Monitor grabs the
UI structure information from the current screen, including
the location of windows, text boxes, and buttons, along with
textual content from the text boxes. Then the Secure Overlay
positions a transparent overlay screen, and for each text box on
the current dom-U screen it will dynamically draw a matching
text box with the same text content at exactly the same
location. This Secure Overlay component is always drawn
on top of the whole dom-U screen, so it always hides any
text boxes of applications running in dom-U. While input
interaction stays the same from the user’s perspective, the
output that user sees is actually the text that is captured by
the Secure Overlay. And the text shown on the screen will
be updated as the user interacts with the application, so the
user will naturally verify that this captured content matches
her intent.
Gyrus needs to ensure that for all cases, the text shown on
the Secure Overlay is exactly matched with the text that the
underlying application is presenting. However, in our reﬂective
veriﬁcation scenario, the user can only verify changes in the
currently visible part of the text. If some lines of text scroll
out of view and then get updated while they are hidden,
this veriﬁcation process is no longer valid. To handle hidden
updates, Gyrus keeps track of the text and its changes. To
indicate the status of veriﬁcation, we place a border around the
text box. When everything is as expected, the border is green.
When the hidden text changes, the border turns red, indicating
that the user needs to manually verify the content. In our
experience, Gyrus works well with most text boxes for default
text typing. In addition, it can support text-editing features such
as cut/copy/paste, automatic spell correction, selection of text
from combo box, etc.
D. Network Trafﬁc Monitoring
After Gyrus captures the user’s intent using the UI Monitor
the second part of implementing
and the Secure Overlay,
4
WYSIWYS is to ensure that
the trafﬁc generated by the
monitored application matches what Gyrus expects based on
the captured user intent. Gyrus assumes that there is a simple
mapping between the captured user intent and the outgoing
trafﬁc. In other words,
the network protocol used in the
application must transmit the information displayed to the user
directly or with simple modiﬁcations (e.g., text represented
in XML, or a standard encoding such as Base64 and URL
encoding). Even though this assumption does not hold for all
applications, we argue that many everyday applications are
largely text-based and have very simple processing to generate
outgoing network trafﬁc based on the text input from users.
Figure 2 shows an example of a simple mapping between user
input and network trafﬁc content.
Finally, note that Gyrus only inspects speciﬁc types of mes-
sages under the protocol used by the protected application(s).
Gyrus will not interfere with any trafﬁc outside of this scope.
Even for trafﬁc originating from target applications, Gyrus
will only check (and potentially block) trafﬁc that contains
user-generated content. For example, for SMTP and instant
messenger protocols, we only check commands for sending
messages. For HTTP(S) trafﬁc, we only inspect certain URLs
that submit user-intended contents, such as posting Twitter
messages, adding comments on Facebook, or sending money
on Paypal. In Section IV, we will describe how to identify
such trafﬁc using the User Intent Signature.
E. Target Applications
Not all trafﬁc that is observed by Gyrus can be traced back
to some user action that explicitly expresses her intent to create
such trafﬁc. For example, when the user tries to load a web
page in the browser, she probably has no knowledge about
what further HTTP requests will be generated to download all
the images on the loaded pages. Moreover, if the text content
of the application is represented using a complex encoding
on the network protocol, (e.g., evaluating some functions or
encryption), Gyrus cannot infer expected output of network
trafﬁc. As such, in this paper, our focus is on trafﬁc that
contains rich semantics about the user’s intent, and we consider
cases where the user does not have a clear understanding
about what trafﬁc their action will create to be out of scope.
Furthermore, we are particularly interested in trafﬁc that is
related to transactions that could create long lasting harmful
effects for the user (e.g., ﬁnancial loss). Examples of such
transactions include:
1)
Transferring money through an online ﬁnancial ser-
vice.
2) Modifying value ﬁelds (e.g., speed of a turbine,
or level of the water in a nuclear power plant) of
SCADA (Supervisory Control And Data Acquisition)
systems.
Sending a message through an e-mail client, or an
internet messaging (IM) application.
Posting a status update or comment message through
an online social network.
3)
4)
Examples of applications suitable for Gyrus include email
clients, instant messaging applications, various online social
networks and online ﬁnancial services. We will further illus-
trate how Gyrus can protect critical actions of these applica-
tions in Section V. Our results indicate that the proposed idea
5
of WYSIWYS is very effective in stopping these applications
from being used to send manipulated trafﬁc by the malware,
thus blocking many traditional venues to proﬁt from com-
promising hosts. In other words, Gyrus can protect sensitive
transactions with rich user-generated semantics from malware
on the host. For example, it can prevent botnet malware from
sending spam e-mails and instant messaging spam, launching
impersonating attacks such as spear phishing, and preventing
malware that transfers money from an online banking account.
IV. DESIGN AND IMPLEMENTATION
A. Architecture
Gyrus employs a virtual machine based isolation mecha-
nism; therefore, its architecture is separated in two parts. Gyrus
puts all trusted monitoring modules in either dom-0 or the
hypervisor, while dom-U remains untrusted. The architecture
of Gyrus is summarized in Figure 3. Gyrus is composed of
several key components:
Authorization Database The Authorization DB stores
information
authorization vectors, which contain sufﬁcient
to validate outgoing trafﬁc based on a user’s intent. It
is
generated by the Central Control and allows us to temporally
decouple capturing user-intent from the actual enforcement
of the WYSIWYS policy at the network interface. At this
level, our monitoring is independent of the internal logic of
the application. Input events that trigger network trafﬁc (e.g.,
clicking SEND in an e-mail client or pressing the ENTER
key in the text box of an instant messenger application),
will invoke Central Control to create an authorization vector
based on the captured intended content, and save it to the
authorization database. Later, when the outgoing trafﬁc is
generated from the application after processing user input,
the trafﬁc will be analyzed in the network monitor, which
will look in the database for evidence of user intent. Our
network monitor will authorize the trafﬁc only if there exists
a matching authorization vector. Otherwise, it will drop the
packet. Moreover, this decoupling enables Gyrus to handle
asynchronous, or scheduled trafﬁc like e-mail queued to be
sent at a later time.
Network Monitor The Network Monitor is a transparent
proxy with a built-in monitoring capability. It inspects all
trafﬁc under the monitored protocol. If outgoing trafﬁc is using
a protocol corresponding to any of the applications protected
by Gyrus, trafﬁc is inspected by querying the Authorization DB
to see if the trafﬁc is intended by the user. Unintended trafﬁc
is blocked. Also note that the Network Monitor will allow all
trafﬁc from other protocols to pass through without inspection.
User-Intent Signature The User-Intent Signature captures
all the application-speciﬁc logic in Gyrus. The signatures are
expressed in a language we designed speciﬁcally for Gyrus.
It covers three categories of information: the condition that
triggers network trafﬁc, the required UI structure data for
catching content-intent, and the content of monitored trafﬁc.
This user-intent signature language represents our effort to
simplify and provide structures to the development of per-
application logic under Gyrus.
Central Control Central Control contains the logic that
runs the other elements. Its main task is to process intercepted
lightweight secure hypervisor, or could use the Dalvik VM [2]
on Android as an isolation and hardware event-capturing
instrument. Similarly, the UI Monitor is not limited to the
UI Automation on Microsoft platforms. Other accessibility
frameworks – such as ATK [12] and XAutomation [36] on
Linux or NSAccessiblity [21] on Mac OS X – could replace it.
Finally, Gyrus could be implemented using a thin-client model
with the trusted client terminal [23] and a network monitor on
the remote host.
1) In-Guest UI Monitor: Since our implementation of the
UI monitor is largely based on the UIAutomation library from
Microsoft, we begin with a brief description of this library
before presenting details about the UI monitor.
UI Automation The UIAutomation library represents the
UI structure of every window in the system as a tree of UI
objects. The root of the tree is the desktop, lower level nodes
correspond to individual windows, and further down nodes
correspond to components of a window (e.g., buttons, edit
boxes, etc.). This tree is similar to the DOM tree in a web
browser. Each UI object contains data that describe the visual
aspects of the corresponding components (e.g., size, visibility,
textual content). The UIAutomation library exposes this tree
to calling programs through a set of functions that facilitate
traversing and querying the tree (e.g., we can search for nodes
in the tree with certain properties, or at a certain location on
screen), and allows us to access all properties of the nodes.
Furthermore,
the UIAutomation library also allows calling
programs to listen for changes in both the structure of the
tree, as well as properties of individual nodes.
As mentioned in Section III, the UI monitor is a component
that runs in dom-U, and it serves two purposes: to determine
if a keyboard/mouse input event5 signiﬁes the user’s intent to
send something over the network, and to provide information
to the secure overlay to display up-to-date user generated
text in target applications. In other words, implementation
of this component needs to provide two primitive operations:
identifying the object targeted by an input event, and extracting
UI properties from text boxes of interest.
that
the object
Identifying UI Objects To check whether current input
generates network trafﬁc, the UI Monitor ﬁrst looks for the
UI object that receives the current input. To determine if a
mouse click, for example, signiﬁes a user’s intent to gener-
ate outgoing trafﬁc, the UI Monitor calls a function named
ElementFromPoint to get
is currently
located under the cursor. For the keystroke events, we use
the GetFocusedElement function to retrieve the currently
focused object (which is also the target of the current input).
Upon retrieving the target object for the input event, we can
determine if it is a button or text box of interest by querying
the UIAutomation library for the properties of this object.
Application-speciﬁc logic required for determining the trafﬁc-
triggering event is conﬁgured with a User Intent Signature (e.g.
checking whether it is a button with its name being Send on
e-mail client). Upon receiving an event that generates trafﬁc,
the UI Monitor collects UI structure information speciﬁed in
the User Intent Signature, then uses this to inform the Secure
5Input event here is not the real hardware input event. All of hardware input
is handled by Central Control, and the UI Monitor receives a signal from the
Central Control when an event arrives.
6
Fig. 3. Workﬂow of Gyrus upon receiving a trafﬁc-triggering event. Grayed
and solid-lined areas are trusted components, while dotted lines indicate
untrusted components.
hardware input events. Upon arrival of these events, the Central
Control will query the UI monitor to see if the event signiﬁes
user intent to send the currently displayed content out to the
network. If so, the Central Control will query the Secure
Overlay and User-Intent Signature to generate an authorization
for the expected trafﬁc and save it in the Authorization DB. The
hardware input event will then be delivered to dom-U, ﬁnally
reaching its intended destination: a user-driven application.
Since the Central Control does not alter any inputs, it does
not alter the user experience beyond adding an imperceptible
delay (see Table II).
In summary, the workﬂow of Gyrus can be described as