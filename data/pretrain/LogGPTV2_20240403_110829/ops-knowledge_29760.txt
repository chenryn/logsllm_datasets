Question: "You are developing an Android application and wish to implement security measures that will increase the complexity of reverse engineering attempts. Consider the following methods and their detailed descriptions of effectiveness:

1. Checking the app's signature upon startup against a pinned signature to detect repackaging.
2. Inspecting running services and processes to identify any instance of 'frida-server'.
3. Scanning open TCP ports for default bindings of reverse engineering tools.
4. Scanning process memory for known artifacts and strings associated with reverse engineering tools.

Which of these methods would be considered too trivial to bypass and what are the limitations of another that relies on detecting processes that may not be visible due to system restrictions?"
 "A": "Method 1 is too trivial to bypass by patching the APK, and method 2 is limited by Android 7.0 (API level 24) and higher, which do not show daemons started by other apps."
 "B": "Method 3 is too trivial to bypass as the listening port can be easily changed, and method 4 is limited because the artifacts it searches for can be patched in the Frida binaries."
 "C": "Method 1 is too trivial to bypass by simply renaming the Frida artifacts, and method 2 is limited because detecting open TCP ports is not a reliable indicator of reverse engineering activities."
 "D": "Method 3 is too trivial to bypass by using named pipes instead of TCP ports, and method 4 is limited because scanning for strings like 'LIBFRIDA' can be circumvented by using alternative modes of operation."
Answer: A