（3）否则，调用input.toString()。如果结果是原始值，返回结果。
（4）否则，抛出一个TypeError（说明将输入转换为原始值出错了）。
如果PreferredType是字符串，第二步和第三步会进行交换。PreferredType也可以被省略，这种情况下，日期会被认为是String而其他值会被认为是Number。因此，+运算符和==运算符可以操作ToPrimitive()。
示例：ToPrimitive()实战
valueOf的默认实现会返回this，而toString()的默认实现会返回类型信息：
因此，Number()跳过了valueOf()并且将toString()执行的结果转换为数字，所以，它将'[obejct Obejct]'转换成了NaN：
下面这个对象重写了valueOf()，这会影响Number()，但是不会对String()造成任何改变：
下面这个对象重写了toString()。因为结果会被转换为数字，Number()会返回一个数字。
[1] 从技术上来说，原始值不会有自己的属性，这些属性是它们从包装构造函数中借调的。但是这部分逻辑是在背后执行的，一般看不到。
第9章 运算符
本章是对运算符的一个概述。
9.1 运算符和对象
所有的运算符都会强制要求（在8.5“强制类型转换”讨论过）它们的运算数为合适的类型。大部分运算符只对原始值有效（比如，算术运算符和比较运算符）。这意味着对象在运算之前会被转换为原始值。比如加号这个可怜的运算符，许多语言都用它来拼接数组。但在JavaScript中却不是这样，它会先将数组转换成字符串，然后再把它们拼接起来：
注解：
在JavaScript中无法重载或者自定义运算符，包括等号。
9.2 赋值运算符
普通的赋值运算有多种使用方式：
x = value
给前面已声明的变量x赋值。
var x = value
在声明变量的时候直接赋值。
obj.propKey = value
设置属性。
obj['propKey'] = value
设置属性。
arr[index] = value
设置数组元素[1]。
赋值运算是一种表达式，它用来计算要被赋予的值。因此可以进行链式赋值。比如以下这条语句会同时将x和y赋值为0：
复合赋值运算符
复合赋值运算符被写成op=的形式，其中op是一种二元运算符，=是赋值运算符。以下两个表达式是等价的：
换句话说，复合赋值运算符op=对两边的运算数做op运算，并将结果赋值给第一个运算数。让我们看一个用加法(+)进行复合赋值运算的例子：
以下列出了所有的复合赋值运算符。
算术运算符（参见11.8“算术运算符”）：*=, /=, %=, -=。
位运算符（参见11.9.3“二进制位运算符”）：>=, >>>=, &=, ^=, |=。
字符拼接（参见12.6.1“合并：加号(+)运算符”）：+=。
9.3 等号运算符：===和==
JavaScript有两种方式来判断两个值是否相等。
严格相等（===）和严格不等（！==）要求比较的值必须是相同的类型。
普通（或者“宽松”）相等（==）和不等（!=）会先尝试将两个不同类型的值进行转换，再使用严格相等进行比较。
宽松相等可能会存在两个问题。第一，执行转换的过程令人困惑；第二，由于运算符的宽容特性，使得类型错误可能长时间不能被发现。
本书建议始终使用严格相等而避免使用宽松相等。下面将介绍为何要避免使用宽松相等。
相等是不能自定义的。运算符在JavaScript中不能被重载，也不能自定义它的运算规则。还有一些运算常用于影响比较的结果，比如Array.prototype.sort()（参见18.9“排序和反转元素（破坏性地）”）。该方法具有一个可选的回调函数，用于对数组元素执行比较操作。
9.3.1 严格相等（===，!==）
不同类型的值总是严格不等的。如果两个值的类型相同，则会进行如下的情况。
是否为undefined === undefined的比较。
是否为null === null的比较。
比较两个数字。
比较两个布尔值，两个字符串：结果显而易见。
比较两个对象（包括数组和函数）：当且仅当x和y是同一个对象时，x === y；如果你想比较两个不同的对象，则需要自己实现一个比较算法。
其他对比：不严格相等。
陷阱：NaN
特殊数字NaN（参见11.3.1“NaN”）和本身不相等。
所以你需要用其他的方式来校验它，参见11.3.1小节的“陷阱：检测一个值是否为NaN”。
严格不等（!==）
严格不等比较：
等价于对严格相等比较的结果取反：
9.3.2 普通（宽松）相等（==，!=）
普通相等的比较算法原理如下。如果两个运算数的类型相同（六种规范类型：Undefined, Null, Boolean, Number, String和Object其中之一），则使用严格相等比较它们。
否则，如果运算数是如下类型。
1．undefined和null，则它们被认为是宽松相等的。
2．一个字符串和一个数字，则将字符串转换为一个数字，使用严格相等比较两个运算数。
3．一个布尔值和一个非布尔值，则将布尔值转换为一个数字，然后（再次）进行宽松比较。
4．一个对象和一个数字或者一个字符串，则尝试转换此对象为一个原始值（参见8.5.3“算法：ToPrimitive()——将值转换为原始值”描述的算法），然后（再次）进行宽松比较。
其他情况——不符合上述提到的情况，宽松比较的结果是false。
宽松不等（!=）
不等比较操作：
等价于对相等比较的结果取反：
陷阱：宽松相等与布尔转换不同
相等和转换为布尔值（参见10.1“转换成布尔值”）的工作原理是不同的。若数字大于1，则转换为布尔值true（如if语句）。但这些数字不是宽松地等于true。以下的注释演示了这个结果是怎么出来的：
类似的，虽然空字符串等于false，但不是所有的非空字符串都等于true：
陷阱：宽松相等中的字符串
有些宽松相等会很有用，不过这取决于你想要什么效果：
但也存在一些其他的问题，取决于JavaScript如何将字符串转换为数字（参见11.2“转换成数字”）：
陷阱：宽松相等中的对象
如果比较对象和非对象，它们会被转换为原始值，这将导致一些奇怪的结果：
然而，只有当两个对象是同一个对象时才会相等。这意味着无法真正地比较两个包装对象：
9.3.3 没有针对==的有效用例
有时会看到一些宽松相等（==）的有效用例。它们会在本节被列出，并且会给出更好的替代方案：
用例：检测undefined或null
以下比较语句可以用于保证x既不是undefined也不是null：
虽然这是实现这种检查的简洁方式，但是会让新手感到困惑，而专家也不能确定这是不是排版错误。因此，如果想检测x是否有值，可以使用标准的真值检测方法（参见10.1.2“真值和假值”）。
如果想要更明确地区分，可以对两种值分别做检测：
用例：字符串中的数字
如果不确定x是数字还是内容为数字的字符串，可以用如下方式来检测：
以上语句可以判断出x是123或是'123'。但是，以下方式也很简洁，并且更加明确：
用例：比较包装实例和原始值
原始值和包装的原始值是宽松相等的：
使用这种方式有三个不好的地方。第一，宽松相等对两个实例对象是无效的：
第二，应该避免包装。第三，如果一定要使用这个方法，最好做到更加明确：
9.4 排序运算符
JavaScript中有以下几种排序运算符：
小于号（）；
大于等于号（>=）。
这些运算符对数字和字符串有效：
对于字符串，这些运算符并不是那么实用，因为它对大小写敏感且无法处理类似重音的情况（参见12.5“字符串比较”）。
算法
进行这样一个比较：
会执行以下几个步骤。
（1）确保两个运算数是原始值。obj对象通过内部的ToPrimitive(obj, Number)方法（参见8.5.3“算法：ToPrimitive()——值将转换为原始值”）转换成原始值，这会调用obj.valueOf()方法或者obj.toString()来实现。
（2）如果两个运算数都是字符串，则按字典比较的方式对它们的16位代码单元（参见第24章）即字符串的JavaScript字符进行比较。
（3）否则将两个运算数转变为数字类型，然后比较它们的数值大小。
其他排序运算符的处理方式都是类似的。
9.5 加号运算符（+）
简单地说，加号运算符会对它的运算数进行检测。如果其中一个是字符串，另一个也会被转换为字符串，并对它们进行拼接：
否则，两个运算数都会被转变成数字（参见11.2“转换成数字”）并相加：
这意味着你需要注意运算的顺序：
算法
执行加法运算：
会执行以下几个步骤。
（1）确保两个运算数是原始值。obj对象通过内部的ToPrimitive(obj, Number)方法（参考8.5.3“算法：ToPrimitive()——将值转换为原始值”）转变成原始值，这会调用obj.valueOf()方法或者obj.toString()来实现。如果是日期对象，obj.toString()方法会优先被调用。
（2）只要一个运算数是字符串，则将它们都转变为字符串并返回它们合并后的结果。
（3）否则转变两个运算数为数字并返回它们的和。
9.6 布尔运算符和数字运算符
以下运算符只会有一种类型的运算数并且只返回该类型的运算结果。其他地方也有讲到。
布尔运算符。
二元逻辑运算符（参见10.2.1“二元逻辑运算符：与（&&）和或（||）”）
逻辑非（参见10.2.4“逻辑非(!)”）
数字运算符。
算术运算符（参见11.8“算术运算符”）
位运算符（参见11.9“位运算符”）
9.7 特殊运算符
我们再来看一些特殊运算符，即条件、逗号和void运算符。
9.7.1 条件运算符（?:）
条件运算符是一个表达式：
如果判断条件为true，则结果是if_true；否则，结果是if_false。示例如下：
这里的括号不是必需的，但它们可以让表达式更易于理解。
9.7.2 逗号运算符
逗号运算符会执行两边的运算数并返回right部分的结果。简单来讲，它的效果等同于块之间的分号。
以下例子的第二个运算数会作为运算的结果返回：
以下例子则演示了两个运算数的执行效果：
逗号运算符不易理解，建议不要使用。
9.7.3 void运算符
void运算符的语法如下：
expr会被执行，并返回undefined。以下是几个例子：
因此，如果想实现一个void函数，应该是这样的：
void运算符是与它的运算数密切关联的，所以括号是必不可少的。比如，void 4+7等同于(void 4)+7。
void运算符的用处
在ECMAScript 5之前，void很少被用到。大体有以下几种用法。
（1）void 0等同于undefined
后者可以被修改，而前者总会是正确的值。然而在ECMAScript 5之前，undefined可以被合理地修改，这使得这个用例不太重要（参见8.3.4“修改undefined”）。
（2）避免表达式返回结果
在某些场景下，如果一个表达式不需要返回结果，那么返回undefined是很重要的。void运算符可以用来避免返回结果。其中一种场景是javascript:URLs，它不会触发链接，这对书签很有用。当你访问这些URL时，如果URL的结果不是undefined，不少浏览器会替换当前的文档内容为URL对应的内容。因此，如果你想要打开一个新窗口而不改变当前显示的内容的话，你可以这样处理：
（3）用作IIFE的前缀
一个IIFE必须被解析成一个表达式。方案之一就是添加void前缀。
（4）为什么会有void运算符
根据JavaScript的作者Brendan Eich所说，他添加这个运算符是为了javascript:links（上述的用例之一）。（参见16.6.1“IIFE变体：前缀运算符”。）[2]
我在Netscape2中为JS添加void运算符是为了方便处理javascript:URL返回非undefined值。[3]
9.8 通过typeof和instanceof判断值类型
如果你想对一个值进行分类，你不得不区分JavaScript中的原始值和对象（参见第8章）。
typeof运算符能区分原始值和对象，并检测出原始值的类型。
instanceof运算符可以检测一个对象是否是特定构造函数的一个实例。参见第17章获取更多关于JavaScript面向对象编程的内容。
9.8.1 typeof：判断原始值
typeof运算符用法：
返回一个字符串，会描述value值的类型是什么。示例如下：