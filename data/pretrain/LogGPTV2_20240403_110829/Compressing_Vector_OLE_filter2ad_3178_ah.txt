imply even collision-resistant hash functions, let alone succinct arguments for NP.
Compressing Vector OLE
29
from [BCI+13]. At a high level, such a proof system proceeds by multiplying a proof ma-
trix Π picked by the prover by an independently chosen query vector q picked by the
veriﬁer, where the veriﬁer decides whether to accept or reject based on q · Π alone. Note
that unconditional zero-knowledge is possible in this model because of the restricted mode
of interaction. We will later use a VOLE generator to securely realize such proofs non-
interactively with reusable setup.
Deﬁnition 11 (HVZK-LIP). An honest-veriﬁer zero-knowledge linear interactive proof
(HVZK-LIP) is a triple of algorithms (Prove, Query, Verify) with the following syntax:
– Prove(F, C, x, w) is a PPT algorithm that given an arithmetic veriﬁcation circuit C :
F(cid:96) × FL → F, an input (NP-statement) x ∈ F(cid:96), and witness w ∈ FL, outputs a proof
matrix Π ∈ Fm×d, where d and m depend only on C.
a query vector q ∈ Fm.
– Query(F, C) is a PPT algorithm that given an arithmetic veriﬁcation circuit C outputs
– Verify(F, x, q, a) is a polynomial-time algorithm that given input x ∈ F(cid:96), query vector
q, and answer vector a, outputs acc or rej.
The algorithms (Prove, Query, Verify) should satisfy the following:
– Completness. For any arithmetic circuit C : F(cid:96) × FL → F, input x ∈ F(cid:96) and witness
w ∈ FL such that C(x, w) = 0 we have Pr[Π R← Prove(F, C, x, w), q R← Query(F, C) :
Verify(F, x, q, q · Π) = acc] = 1.
– Reusable -soundness. For any C : F(cid:96) × FL → F, input x ∈ F(cid:96) such that C(x, w) (cid:54)=
0 for all w ∈ FL, adversarially chosen Π∗ ∈ Fm×d and vector b∗ ∈ Fd, we have
Pr[q R← Query(F, C) : Verify(F, x, q, q · Π∗ + b∗) = acc] ≤ . Moreover, for every
F, C, x, Π∗, b∗ the probability of Verify accepting (over the choice of q) is either 1 or
≤ . Unless otherwise speciﬁed, we assume that  ≤ O(|C|/|F|).
– Honest-veriﬁer zero-knowledge. There exists a PPT simulator Sim such that for
any arithmetic circuit C : F(cid:96) × FL → F, input x ∈ F(cid:96), and witness w ∈ FL such
that C(x, w) = 0, the output of Sim(F, C, q, x) is a vector a such that {(q, a) : q R←
Query(F, C), a ← Sim(F, C, q, x)} and {(q, a) : Π R← Prove(F, C, x, w), q R← Query(F, C),
a ← q · Π} are identically distributed.
Note that the ﬁnal requirement in the deﬁnition of reusable soundness guarantees that
even by observing the veriﬁer’s behavior on a maliciously chosen input x∗ and proof Π∗,
the prover cannot obtain signiﬁcant information about the query q. This ensures that q
can be reused without compromising soundness. We note that our proofs also satisfy the
knowledge property as deﬁned in [BCI+13]. We focus here on soundness for simplicity.
NIZKs with Reusable Setup. Below, we formally deﬁne non-interactive zero-knowledge
arguments with reusable correlated randomness setup.
Deﬁnition 12 (NIZKs with Reusable Setup.). A non-interactive zero-knowledge ar-
gument with reusable correlated randomness setup (RS-NIZK) is a triple of algorithms
(NIZKSetup, NIZKProve, NIZKVerify) with the following syntax:
– NIZKSetup(1λ, F, C, T ) is a PPT algorithm that, given a security parameter (in unary)
1λ, a ﬁeld F, an arithmetic veriﬁcation circuit C : F(cid:96) × FL → F, and a polynomial
bound T = T (λ) on the number of statements, outputs a pair (pk, vk) where pk is the
proving key, and vk is the veriﬁcation key.
30
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
– NIZKProve(pk, F, C, j, xj, wj) is a PPT algorithm that given a proving key pk, a ﬁeld F,
an arithmetic veriﬁcation circuit C : F(cid:96) × FL → F, a proof index 1 ≤ j ≤ T , an input
(NP-statement) xj ∈ F(cid:96), and witness wj ∈ FL, outputs a proof πj.
F, a proof index 1 ≤ j ≤ T , an input xj ∈ F(cid:96), and a proof πj, outputs acc or rej.
– NIZKVerify(vk, F, j, xj, πj) is a PPT algorithm that given a veriﬁcation key vk, a ﬁeld
The algorithms (NIZKSetup, NIZKProve, NIZKVerify) should satisfy the following:
– Completness. For any arithmetic circuit C : F(cid:96) × FL → F, bound T , index 1 ≤ j ≤
T , input x ∈ F(cid:96) and witness w ∈ FL such that C(x, w) = 0 we have Pr[(pk, vk) R←
NIZKSetup(1λ, F, C, T ), π R← NIZKProve(pk, F, C, j, x, w) : NIZKVerify(vk, F, j, x, π) =
acc] = 1.
– Adaptive reusable -soundness. For any C : F(cid:96) × FL → F with |C| = poly(λ),
polynomial bound T , index 1 ≤ j ≤ T , and PPT adversary A, it holds that
Pr[(pk, vk) R← NIZKSetup(1λ, F, C, T ), (x, π) R← AOj [vk](pk, F, C, j) :
(∃w, C(x, w) = 1) ∧ NIZKVerify(vk, F, j, x, π) = acc] ≤ ε,
where Oj[vk] is a stateful oracle initialized with k = 1 which, on input (xk, πk), returns
NIZKVerify(vk, F, k, xk, πk) and sets k ← k+1 if k ≤ j, and ignores the query otherwise.
– Adaptive multi-theorem zero-knowledge. There exists a PPT simulator NIZKSim
such that for any stateful PPT A, any index 1 ≤ j ≤ T , and any arithmetic circuit
C : F(cid:96) × FL → F with |C| = poly(λ), it holds that
| Pr[(pk, vk) R← NIZKSetup(1λ, F, C, T ) : AO0[pk](vk, F, C, j) = 1]
− Pr[(pk, vk) R← NIZKSetup(1λ, F, C, T ) : AO1[vk](vk, F, C, j), = 1]| = negl(λ).
where the oracles are deﬁned as follows:
O0[pk] is a stateful oracle deﬁned as follows: it is initialized with k = 1. On input (x, w),
if C(x, w) = 1 and k ≤ T , it outputs NIZKProve(pk, F, k, x, w), and sets k ← k + 1; it
does nothing otherwise.
O1[vk] is a stateful oracle deﬁned as follows: it is initialized with k = 1. On input (x, w),
if C(x, w) = 1 and k ≤ T , it outputs NIZKSim(vk, F, k, x), and sets k ← k + 1; it does
nothing otherwise.
From HVZK-LIP to reusable NIZK over VOLE. We now describe a simple trans-
formation from any HVZK-LIP to reusable NIZK in the VOLE-hybrid model, where the
prover plays the role of the VOLE sender P0 and the veriﬁer plays the role of the VOLE
receiver P1. The veriﬁer’s VOLE inputs xi depend only on the query q. This allows us to
reuse the same xi for multiple proofs, where each proof instance j uses fresh values of
(uj
i , vj
The main idea behind the transformation is that the matrix-vector product a = q · Π
can be encoded by ai = (qi · Πi + bi), 1 ≤ i ≤ m, together with c =(cid:80) bi, where Πi is
a =(cid:80)m
i ) to mask the proof matrix Π.
the i-th row of Π and the bi are random vectors in Fd. Indeed, it is easy to check that
i=1 ai − c, and the information available to the veriﬁer (namely, q, ai, c) reveals no
information about Π other than a. Thus, the value of a can be transferred to the prover
via m instances of VOLE of length d, where the VOLE inputs of the prover (sender) are
(Πi, bi) and the VOLE inputs of the veriﬁer (receiver P1) are qi. Completeness and honest-
veriﬁer zero-knowledge are directly inherited from the HVZK-LIP via the properties of
the encoding discussed above. Soundness follows by observing that any maliciously chosen
i , v∗
oﬀset b∗ =(cid:80) v∗
(u∗
any message c∗ have the same eﬀect as using the matrix Π∗ such that Π∗
i ) that the prover feeds as inputs to the VOLE instances in the NIZK protocol and
i and the
i − c∗ in the HVZK-LIP protocol. This construction of NIZK from a VOLE
i = u∗
generator is formally described in Figure 3.
Compressing Vector OLE
31
NIZK protocol from VOLE generator
– Building blocks: VOLE generator (Setup, Expand); HVZK-LIP (Prove, Query, Verify) with answer
length d.
– NIZKSetup(1λ, F, C, T ) : Given a veriﬁcation circuit C over F and a bound T on the number of
statements, securely generate the following correlated randomness:
• Let q = (q1, . . . , qm)
• For i = 1, . . . , m and n = dT , let (seedi
• Set pk ← (seedi
0)i≤m and vk ← (q, (seedi
R← Query(F, C).
0, seedi
1)
1)i≤m).
R← Setup(1λ, F, n, qi).
– Local computation: For i = 1, . . . , m, Prover computes (ui, vi)
computes wi = Expand(1, seedi
for vi, wi.
1). Parse each ui as (uj
i ), 1 ≤ j ≤ T , where uj
– NIZKProve(pk, F, C, j, xj, wj) : Set Π j R←Prove(F, C, xj, wj). Output πj = (aj
– NIZKVerify(vk, F, j, xj, πj) : Set aj =(cid:80)m
i − uj
i .
where aj
i = Π j
i=1(qi · aj
i + wj
i ) − c. Output Verify(F, xj, q, aj).
R← Expand(0, seedi
0) and Veriﬁer
i ∈ Fd, and similarly
m, c =(cid:80)m
i=1 vj
i ),
1, . . . , aj
Fig. 3. NIZK with reusable setup from VOLE generator.
Theorem 13. Let λ be a security parameter, and F be a ﬁeld of size 2ω(λ). The protocol
given on Figure 3 is a non-interactive zero-knowledge argument with reusable setup, where
both adaptive reusable negl(λ)-soundness and adaptive multi-theorem zero-knowledge reduce
to the security of the underlying VOLE generator.
Proof. For completeness, observe that
m(cid:88)
(qi · aj
i + wj
i − vj
i )
i=1
(qi · aj
i + wj
i ) − c =
m(cid:88)
(wj
i=1
qi · Π j
i +
i − (qi · uj
i + vj
i ))
i by correctness of the VOLE generator
aj =
=
i=1
m(cid:88)
m(cid:88)
m(cid:88)
i=1
qi · Π j
=
= q · Π j,
i=1
hence completeness follows from the completeness of the HVZK-LIP. We now prove adap-
tive reusable ε-soundness. We ﬁrst consider the ‘base case’, where the adversary A is
not given access to a veriﬁcation oracle. Let C : F(cid:96) × FL → F be a veriﬁcation cir-
R←
cuit, T be a bound, 1 ≤ j ≤ T be an index, and A be a PPT adversary. Set (pk, vk)
NIZKSetup(1λ, F, C, T ) and (x∗, π∗)
0)i≤m, q, (seedi
1)i≤m)
R← Expand(0, seedi
and π∗ as (aj
1, . . . , aj
1).
0) and wi = Expand(1, seedi
i ∈ Fd, and similarly for vi, wi. Deﬁne Π∗ to
Parse each ui as (uj
m, c). Compute (ui, vi)
i ), 1 ≤ j ≤ T , where uj
R←A(pk, F, C, j). Parse (pk, vk) as ((seedi
32
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
i , and b∗ to be(cid:80)m
i=1 vj
i ) − c. It holds that
be the matrix whose i-th row is aj
i + uj
aj =
(qi · aj
i + wj
i ) − c
m(cid:88)
m(cid:88)
i=1
(qi · (aj
=
= q · Π∗ + b∗.
i=1
i + uj
i ) + vj
i ) − c by correctness of the VOLE generator
By the reusable ε-soundness of the HVZK-LIP, it holds that for any C : F(cid:96)×FL → F, input
x ∈ F(cid:96) such that C(x, w) (cid:54)= 0 for all w ∈ FL, adversarially chosen Π∗ ∈ Fm×d and vector
b∗ ∈ Fd, we have Pr[q(cid:48) R← Query(F, C) : Verify(F, x, q(cid:48), q(cid:48)· Π∗ + b∗) = acc] ≤ . Furthermore,
by the security of the VOLE generator,
(cid:20)(F, 1n, x, x(cid:48)) ← A(1λ),
(cid:20)(F, 1n, x, x(cid:48)) ← A(1λ),
(seed0, seed1)
R← Setup(1λ, F, n, x)
(seed0, seed1)
R← Setup(1λ, F, n, x(cid:48))
(cid:21)
(cid:21)
: A(seed0) = 1
: A(seed0) = 1
.
Pr
≈ Pr