UPX1:0040A008 GetVersionExA dd offset kernel32_GetVersionExA;DATA XREF:UPX0:004011D4↑r
UPX1:0040A00C RtlAllocateHeap dd offset ntdll_RtlAllocateHeap;DATA XREF:UPX0:004011B3↑r
UPX1:0040A00C                                         ; sub_405E98+D↑ r ...  
UPX1:0040A010 ; HANDLE __stdcall GetProcessHeap()  
UPX1:0040A010 GetProcessHeap dd offset kernel32_GetProcessHeap;DATA XREF:UPX0:004011AA↑r
UPX1:0040A014 RtlEnterCriticalSection dd offset ntdll_RtlEnterCriticalSection  
UPX1:0040A014                                         ; DATA XREF: sub_401564+34↑ r  
UPX1:0040A014                                         ; sub_4015A0+27 ↑ r ...
如上所示，renimp.idc 脚本已经重命名了每一个导入表条目，但 IDA 为每一个它拥有类型信息的函数添加了函数原型。需要注意的是，如果库名称没有从函数名称中去除，则 IDA 将无法提供函数类型信息。另外，如果函数所在的模块的名称中包含一个下划线，renimp.idc 脚本可能无法正确地提取出导入函数的名称。ws2_32网络库就是一个典型的例子，它的名称中就包含一个下划线。renimp.idc 脚本会对ws2_32进行特殊处理，但对于任何其他名称中包含下划线的模块，renimp.idc 脚本无法从它们的名称中提取出正确的函数名称。
如果仅有一条指令负责存储所有已解析的函数地址（如代码清单 25-3 中的UPX代码），这时可以采用另一种方法来重命名导入表条目。如果可以确定此类指令（如代码清单 25-3 中➋处的指令），则我们可以利用IDA 使用IDC 语句来指定断点条件这样一个事实。在这种情况下，我们可以在地址 004088A1
 处设置一个条件断点，并使条件表达式调用我们定义的函数。下面我们命名了createImportLabel
 函数并将其定义如下：
static createImportLabel() {  
   auto n = Name(EAX);  
   auto i = strstr(n, "_");  
   while (i != -1) {  
      n = n[i+1:];  
      i = strstr(n, "_");  
   }  
   MakeUnkn(EBX,DOUNK_EXPAND);  
   MakeDword(EBX);  
   if (MakeNameEx(EBX,n,SN_NOWARN) == 0) {  
      MakeNameEx(EBX,n + "_",SN_NOWARN);  
   }  
   return 0;  
}
这个函数首先查询 EAX引用的名称。前面我们讲到，EAX包含调用 GetProcAddress
 的结果，因此它应该会引用某个 DLL 中的函数。然后，该函数执行循环，截断查询到的名称，仅保留原始名称中最后一个下划线之后的部分。最后再进行一系列函数调用，将目标位置（被EBX 引用）正确格式化为一个 4 字节数据项，并将一个名称应用于该位置。通过返回零，该函数告诉 IDA不要实践断点，因此执行会继续进行，而不会暂停。
在第24 章中，我们讨论了如何在 IDA 的调试器中指定断点条件。然而，将用户定义的函数设置为断点处理器并不像设置和编辑断点然后输入 createImportLabel()
 作为断点条件那样简单。尽管此时我们确实希望输入这个条件，但问题在于，在 IDA 看来，createImportLabel
 是一个未定义的函数。要解决这个问题，我们可以创建一个脚本文件（根据定义取名为 IDC ），其中包含createImportLabel
 函数以及如下所示的简单的 main
 函数：
static main() {  
   ➊ AddBpt(ScreenEA());  
   ➋ SetBptCnd(ScreenEA(), "createImportLabel()");  
}
将光标放在要在其上设置断点的指令上，然后运行此脚本（File▶Script File），将生成一个条件断点，每次触发该断点时都会调用 createImportLabel
 。AddBpt
 函数（➊）在指定位置（本例中为光标位置）添加一个断点，SetBptCnd
 函数（➋）将一个条件添加到现有断点。该条件被指定为一个字符串，其中包含每次触发断点时都会进行求值的 IDC 语句。设置这个断点后，一旦完成去模糊操作，我们将得到一个带标签的导入表，而不必在进程的内存空间中查找导入表。
另一种获取名称信息的方法是搜索内存，查找与一个函数地址有关的文件头，然后解析这些头部描述的导出表，确定被引用的函数的名称。基本上，这是在根据函数的地址逆向查询该函数的名称。本书的网站提供了一个基于这个概念的脚本（RebuildImports.idc/RebuidImports.py ）。这其中的任何一个脚本都可以代替 renimp.idc，而且效果几乎完全相同。renimp.idc 在处理名称中包含下划线字符的模块时遇到的问题也得以避免，因为这时的函数名称是直接从进程内存空间中的导出表中提取出来的。
为每一个导入表条目正确命名的效果还会直接在反汇编代码清单中反映出来，如下面自动更新的反汇编代码清单所示：
UPX0:00403C5B call    ds:RtlFreeHeap  
UPX0:00403C61 test    eax, eax  
UPX0:00403C63 jnz     short loc_403C7B  
UPX0:00403C65 call    sub_40230F  
UPX0:00403C6A mov     esi, eax  
UPX0:00403C6C call    ds:RtlGetLastWin32Error
每一个重命名后的导入表条目的名称应用到了调用导入函数的所有位置，这进一步提高了反汇编代码清单的可读性。值得注意的是，你在使用调试器时所作的任何格式化更改也会自动应用到数据库视图中。换言之，你不需要拍摄内存快照来捕获你所作的格式化更改。使用内存快照的目的是将内存内容（代码和数据）从进程地址空间移回 IDA 数据库中。
25.3.4 隐藏调试器
有许多方法可以阻止你将调试器作为去模糊工具使用，其中一个常见的方法叫做调试器检测
 。模糊工具的作者也认识到，用户可以使用调试器撤销他们辛苦劳动的成果。为应对这种情况，如果他们的工具检测到调试器，他们将采取措施阻止这些工具运行。我们已经在第 21 章讨论过一些调试器检测方法。如第 21 章所述，Nicolas Falliere的文章“Windows Anti-Debug Reference”4
 全面介绍了大量特定于 Windows 的调试器检测技巧。通过使用一段简单的脚本来启动调试器会话，并自动配置一些断点，你就可以避开其中的一些检测技巧。虽然我们可以使用 Python 来避免这些技巧，但最终还是会使用条件断点，而我们只能用 IDC 来指定条件断点。因此，下面的示例均以 IDC 编写。
4. 参见http://www.symantec.com/connect/articles/windows-anti-debug-reference/
 。
为了从脚本启动调试会话，首先运行下面的代码：
   auto n;  
   for (n= 0; n &lt GetEntryPointQty(); n++) {  
      auto ord = GetEntryOrdinal(n);  
      if (GetEntryName(ord) == "TlsCallback_0") {  
         AddBpt(GetEntryPoint(ord));  
         break;  
      }  
   }  
   RunTo(BeginEA());  
   GetDebuggerEvent(WFNE_SUSP, -1);
这些语句检查 TLS 调用函数是否存在，设置断点（如果有的话），然后启动调试器，请求在入口点地址处中止，然后等待操作完成（严格来讲，我们还应当测试 GetDebuggerEvent
 的返回值）。一旦我们的脚本重新获得控制权，我们将拥有一个处于活动状态的调试器会话，我们希望调试的进程将与它依赖的所有库一起映射到内存中。
我们需要避开的第一个调试器检测是进程环境块（PEB ）中的 IsDebugged
 字段。这是一个 1字节字段，如果进程正接受调试，它就被设为 1，否则设为 0。这个字段位于 PEB 中的第二个字节，因此我们所需要做的就是找到 PEB ，并将适当的字节修补为 0 即可。同时，这个字段也是Windows API函数IsDebuggerPresent
 测试的字段，因此我们可以设法取得“一石二鸟”的效果。如果我们知道已经停在了与 TLS 回调相对的程序入口点，找到 PEB 的位置其实相当简单，因为在进入进程后，EBX 寄存器中即包含一个指向 PEB 的指针。但是，如果进程已在 TLS 回调函数处停止，那么我们需要采用一种更为常规的方法来查找 PEB 。我们将采用与shellcode 和模糊器中常用的类似的方法。基本思想就是定位当前线程信息块
 （TIB ）5
 ，然后跟踪嵌入指针来查找PEB 。下面的代码可以定位 PEB 并对相关字节进行适当的修补：
5. 该块也称为线程环境块。
   auto seg;  
   auto peb = 0;  
   auto tid = GetCurrentThreadId();  
   auto tib = sprintf("TIB[%08X]", tid); //IDA naming convention  
   for (seg = FirstSeg(); seg != BADADDR; seg = NextSeg(seg)) {  
      if (SegName(seg) == tib) {  
         peb = Dword(seg + 0x30); //read PEB pointer from TIB  
         break;  
      }  
   }  
   if (peb != 0) {  
      PatchDbgByte(peb + 2, 0);  //Set PEB!IsDebugged to zero  
   }
值得注意的是，在 IDA 5.5 之前，IDA 并未引入 PatchDbgByte
 函数。在使用IDA 5.5 之前的版本时，我们可以使用PatchByte
 函数，如果数据库中存在指定的地址，该函数也会对数据库进行修改（修补）。
Falliere的文章中提到的另一种反调试技巧是测试 PEB 的名为NtGlobalFlags
 的另一个字段中的几个位。这些位与进程的堆的操作有关，如果一个进程正被调试，则它们被设为 1。假设变量peb
 继续以前面的示例设置，下面的代码从 PEB 中获取NtGlobalFlags
 字段，重新设置造成问题的位，并将标志存储到 PEB 中。
globalFlags = Dword(peb + 0x68) & ~0x70; //read and mask PEB.NtGlobalFlags  
PatchDword(peb + 0x68, globalFlags);     //patch PEB.NtGlobalFlags
Falliere的文章中提到的一些技巧利用了有进程被调试与没有进程被调试时系统函数返回的信息之间的差异。文章中提到的第一个函数为 NtQueryInformationProcess
 ，位于 ntdll.dll中。使用这个函数，进程可以请求与它的 ProcessDebugPort
 有关的信息。如果这个进程正在被调试，该函数的返回值为非零值；如果它没有被调试，则该函数的返回值应为零。要避免这种形式的检测，可以在NtQueryInformationProcess
 返回的地方设置一个断点，然后指定断点条件函数来过滤ProcessDebugPort
 请求。我们采取以下步骤来自动定位这里的指令。
查询NtQueryInformationProcess
 的地址。
在NtQueryInformationProcess
 上设置断点。
添加一个断点条件以调用我们将其命名为 bpt_NtQueryInformationProcess
 的函数，每次调用NtQueryInformationProcess
 时都会执行该函数。
要查找NtQueryInformationProcess
 的地址，我们需要记住这个函数将在调试器中命名为ntdll_NtQueryInformationProcess
 。配置必要断点的代码如下所示：
   func = LocByName("ntdll_NtQueryInformationProcess");  
   AddBpt(func);  
   SetBptCnd(func, "bpt_NtQueryInformationProcess()");
我们所需要做的是执行断点函数，使“多疑的”进程无法发现我们的调试器。函数NtQuery- InformationProcess
 的原型如下所示：
  NTSTATUS WINAPI NtQueryInformationProcess(  
      __in       HANDLE ProcessHandle,  
➊      __in       PROCESSINFOCLASS ProcessInformationClass,  
➋      __out      PVOID ProcessInformation,  
      __in       ULONG ProcessInformationLength,  
      __out_opt  PULONG ReturnLength  
  );
该函数通过在 ProcessInformationClass
 参数中提供一个整数查询标识符（➊），以请求与进程有关的信息。信息通过ProcessInformation
 参数指向的、用户提供的缓冲区返回（➋）。调用方可以传递枚举常量 ProcessDebugPort
 （值 7），以查询一个给定进程的调试状态。如果一个进程正被一个用户空间调试器调试，则通过所提供的指针传递的返回值将为非零值；如果这个进程没有被调试，则返回值为零。一个始终将ProcessDebugPort
 的返回值设置为零的断点函数如下所示：
  #define ProcessDebugPort 7  
  static bpt_NtQueryInformationProcess() {  
     auto p_ret;  
➊     if (Dword(ESP + 8) == ProcessDebugPort) {//test ProcessInformationClass  
➋         p_ret = Dword(ESP + 12);  
➌         if (p_ret) {  
➍             PatchDword(p_ret, 0);  //fake no debugger present  
        }  
➎        EIP = Dword(ESP);   //skip function, just return  
➏        ESP = ESP + 24;     //stdcall so clear args from stack  