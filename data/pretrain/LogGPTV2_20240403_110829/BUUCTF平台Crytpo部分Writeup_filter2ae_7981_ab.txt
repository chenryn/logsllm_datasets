    print(p*q==n)
    f=open("flag.enc","r")
    c_base64=f.read().strip("\n")
    c_bytes=base64.b64decode(c_base64)
    c=bytes_to_long(c_bytes)
    phi=(p-1)*(q-1)
    d=gmpy2.invert(e,phi)
    rsa_components=(n,e,int(d),p,q)
    arsa=RSA.construct(rsa_components)
    rsakey = RSA.importKey(arsa.exportKey())
    rsakey = PKCS1_OAEP.new(rsakey)
    decrypted = rsakey.decrypt(c_bytes)
    print(decrypted)
## [AFCTF2018]BASE
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[AFCTF2018]BASE](https://buuoj.cn/challenges#%5BAFCTF2018%5DBASE)
  * 附件 
    * flag_encode.txt
拿到附件是一个flag加密后的文本，其实是flag经过很多次base系列编码后的一个内容。文件有20+MB，文本编辑器发现是一行编码后的内容。
这题主要是三种编码，base64/base32/base16。base16也就是16进制。
就疯狂解码就行了。主要是考察一个脚本的编写吧，也只能这么理解。。
  * 题解exp如下： 
        import base64
    f=open("flag_encode.txt","r")
    c=f.readline()
    while True:
    ok=0
    try:
    c=base64.b64decode(c).decode("ascii")
    ok=1
    except:
    pass
    try:
    c=base64.b16decode(c).decode("ascii")
    ok=1
    except:
    pass
    try:
    c=base64.b32decode(c).decode("ascii")
    ok=1
    except:
    pass
    if not ok:
    print(c)
    break
##
## [WUSTCTF2020]情书
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[WUSTCTF2020]情书](https://buuoj.cn/challenges#%5BWUSTCTF2020%5D%E6%83%85%E4%B9%A6)
  * 附件 
    * attachment.txt
拿到附件发现说明里面是RSA加密
并且给了密钥，密文。直接写脚本解就完事了。
接出来的内容为字母表的索引，找到对应的字母即可
  * 题解exp如下： 
        en=[156,821,1616,41,140,2130,1616,793]
    import string
    table=string.ascii_lowercase
    print(table)
    for i in en:
    print(table[pow(i,937,2537)],end="")
##
## [NPUCTF2020]Classical Cipher
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[NPUCTF2020]Classical
Cipher](https://buuoj.cn/challenges#%5BNPUCTF2020%5DClassical%20Cipher)
  * 附件 
    * key.txt
    * flag.zip
flag.zip为加密的zip文件，zip密码为key.txt中
因为这边有一组明密文的对应关系，即key→pvb，古典密码学思想直接词频分析。
使用词频分析网站：
得到结果：the_key_is_atrash
尝试用这个去解密发现密码错误。
然后仔细分析一下这个词频分析结果。发现有atbash，这个词的话就比较熟悉，古典密码里面经典的单表替换密码。
其实压缩包密码为the_key_is_atbash。主要是因为词频分析的话atrash更符合表达。
直接atbash解密即可
解开压缩包拿到图片
猪圈密码的话是比较常见的一种编码了。可以百度一下，这边要注意一点，这个猪圈密码和CTFwiki上面给出的那个表不同。对应关系参照的是这个表：
然后还有一些动物啥的，其实是象形文字。。。怎么说呢，勉勉强强算是理解成一种编码吧。这边对应的编码表也是给大家找来了。
这边对应下两张表去解出明文即可。
## [网鼎杯 2020 青龙组]you_raise_me_up
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[网鼎杯 2020
青龙组]you_raise_me_up](https://buuoj.cn/challenges#%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Dyou_raise_me_up)
  * 附件 
    * you_raise_me_up.py
附件就是一个加密脚本，然后输出的话也是直接注释在了脚本里面。
其实乍一看你会发现他和RSA加密很像，最后的加密过程为。
    c = pow(m, bytes_to_long(flag), n)
我们知道RSA加密就是令明文为m，取公钥e和n，密文c=pow(m,e,n)  
这边的一个明显区别为，可以理解为flag明文作为RSA加密里面的公钥e进行的求解。
这个在密码学里面是基于离散对数的一种加密，我们在求解明文的时候，也就相当于是求解基于同余运算和原根的一种对数运算。
求解这种问题的话我们用python的sympy模块的discrete_log函数进行求解就可以了。discrete_log(n,c,m)
  * 题解exp如下： 
        m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075
    c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499
    n = 2 ** 512
    import sympy
    from Crypto.Util.number import *
    flag=sympy.discrete_log(n,c,m)
    print(long_to_bytes(flag))
## [ACTF新生赛2020]crypto-aes
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[ACTF新生赛2020]crypto-aes](https://buuoj.cn/challenges#%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Dcrypto-aes)
  * 附件 
    * aes.py
    * output
分析附件，发现aes.py是一个简单的aes cbc模式的加密脚本。
    def main():
        key=os.urandom(2)*16
        iv=os.urandom(16)
        print(bytes_to_long(key)^bytes_to_long(iv))
        aes=AES.new(key,AES.MODE_CBC,iv)
        enc_flag = aes.encrypt(FLAG)
        print(enc_flag)
    if __name__=="__main__":
        main()
很显然的是，key和iv为两个随机比特流。但是特点很明显。  
其中key是长度为两个字节的比特流重复了16次。iv就是一个长度为16字节的比特流
故这边，key的长度为32字节，iv的长度为16字节
然后给了我们key和iv异或的输出结果
这边易得到一个结论，key的低16字节与iv的16字节异或，而key的高16字节就保留了，可以看作高16字节的每一位都是与0异或，而与0异或结果就是它本身。
这边我们将output文件中得到的key与iv异或结果的10进制值，转换成16进制值。我们知道16进制的每两位表示的是一个字节。这边可以看到输出结果的高位都是c981的一个重复。即可得key中重复的两字节的16进制分别是c9和81，如此我们也就得到了key，再异或得到iv进行aes基础解密即可。
  * 题解exp如下： 
        import os
    from Crypto.Util.number import *
    from Crypto.Cipher import AES
    xor_re=91144196586662942563895769614300232343026691029427747065707381728622849079757
    key=b'\xc9\x81'*16
    print(key)
    key_long=bytes_to_long(key)
    iv=(long_to_bytes(xor_re^key_long))
    print(iv)
    c=b'\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&\xd6\x91\xfe\xf3\x14\x10|\xf8p'
    aes=AES.new(key,AES.MODE_CBC,iv)
    flag=aes.decrypt(c)
    print(flag)
## [INSHack2017]rsa16m
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[INSHack2017]rsa16m](https://buuoj.cn/challenges#%5BINSHack2017%5Drsa16m)
  * 附件 
    * rsa_16m
附件rsa_16m是一个7+MB的文件，里面主要的一个数据为RSA加密体系中的n,e,c。
可以发现的是n极大，e虽然也挺大的，为0x10001。但是这边明文flag的e次方还是小于n的。故这一题直接用rsa里面的小明文攻击即可。
直接对密文c开e次方根
  * 题解exp如下: 
        f=open("rsa_16m","r")
    f.readline()
    c=int(f.readline().strip("\n").split(" = ")[1],16)
    e=0x10001
    import gmpy2
    from Crypto.Util.number import *
    flag=long_to_bytes(gmpy2.iroot(c,e)[0])
    print(flag)
## [XNUCA2018]Warmup
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[XNUCA2018]Warmup](https://buuoj.cn/challenges#%5BXNUCA2018%5DWarmup)
  * 附件 
    * Buggy_Server.py
    * sniffed.pcapng
简单分析一下Buggy_Server.py脚本，是一个模拟发送消息的脚本，使用的是rsa加密，通过传入user将flag消息进行rsa加密发送给user，并抓取所有消息的一个流量。
直接对流量包进行一个分析，追踪一下TCP流，可以发现
题目给出的流量包的内容，即发送给user的rsa加密数据。
这边发现，发送给Alice和Carol这两个用户，使用的公钥n是一样的。那就是一个rsa里面经典的共模攻击。
  * 题解exp如下： 
        import sys
    import binascii
    sys.setrecursionlimit(1000000)
    def egcd(a, b):
      if a == 0:
        return (b, 0, 1)
      else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)
    def modinv(a, m):
      g, x, y = egcd(a, m)
      if g != 1:
        raise Exception('modular inverse does not exist')
      else:
        return x % m
    c1=22917655888781915689291442748409371798632133107968171254672911561608350738343707972881819762532175014157796940212073777351362314385074785400758102594348355578275080626269137543136225022579321107199602856290254696227966436244618441350564667872879196269074433751811632437228139470723203848006803856868237706401868436321225656126491701750534688966280578771996021459620472731406728379628286405214996461164892486734170662556518782043881759918394674517409304629842710180023814702447187081112856416034885511215626693534876901484105593275741829434329109239483368867518384522955176807332437540578688867077569728548513876841471
    n=25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263
    e1=7669
    c2=20494665879116666159961016125949070097530413770391893858215547229071116025581822729798313796823204861624912909030975450742122802775879194445232064367771036011021366123393917354134849911675307877324103834871288513274457941036453477034798647182106422619504345055259543675752998330786906376830335403339610903547255965127196315113331300512641046933227008101401416026809256813221480604662012101542846479052832128788279031727880750642499329041780372405567816904384164559191879422615238580181357183882111249939492668328771614509476229785062819586796660370798030562805224704497570446844131650030075004901216141893420140140568
    e2=6947
    s = egcd(e1, e2)
    s1 = s[1]
    s2 = s[2]
    if s1<0:
     s1 = - s1
     c1 = modinv(c1, n)
    elif s2<0:
     s2 = - s2
     c2 = modinv(c2, n)
    m=(pow(c1,s1,n)*pow(c2,s2,n)) % n
    print(m)
    print (binascii.unhexlify(hex(m)[2:].strip("L")))
## [b01lers2020]safety_in_numbers
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[b01lers2020]safety_in_numbers](https://buuoj.cn/challenges#%5Bb01lers2020%5Dsafety_in_numbers)
  * 附件 
    * enc.py