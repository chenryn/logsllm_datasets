# A Data-Driven Finite State Machine Model for Analyzing Security Vulnerabilities

## Authors
Shuo Chen, Zbigniew Kalbarczyk, Jun Xu, Ravishankar K. Iyer  
Center for Reliable and High-Performance Computing  
Coordinated Science Laboratory  
University of Illinois at Urbana-Champaign  
1308 W. Main Street, Urbana, IL 61801  
{shuochen, kalbar, junxu, iyer}@crhc.uiuc.edu  

## Abstract
This paper integrates an analysis of security vulnerability data (from the Bugtraq database) with a focused source-code examination to develop a finite state machine (FSM) model for depicting and reasoning about security vulnerabilities. An in-depth analysis of the vulnerability reports and the corresponding source code led to three key observations: (i) exploits must pass through multiple elementary activities, (ii) multiple vulnerable operations on several objects are involved in exploiting a vulnerability, and (iii) the vulnerability data and corresponding code inspections allow us to derive a predicate for each elementary activity.

Each predicate is represented as a primitive FSM (pFSM). Multiple pFSMs are then combined to create an FSM model of vulnerable operations and possible exploits. The proposed FSM methodology is demonstrated by analyzing several types of vulnerabilities reported in the data, including stack buffer overflow, integer overflow, heap overflow, input validation vulnerabilities, and format string vulnerabilities. For the studied vulnerabilities, we identify three types of pFSMs, which can be used to analyze operations involved in exploiting vulnerabilities and to identify the security checks to be performed at the elementary activity level. The practical usefulness of the FSM modeling approach was exemplified by the discovery of a new heap overflow vulnerability, now published in Bugtraq.

**Keywords:** Security vulnerabilities, data analysis, finite state machine modeling.

## 1. Introduction
The analysis of security vulnerabilities has typically been approached in two ways: (i) using real data to develop a classification and perform statistical analysis, such as Landwehr’s study on security vulnerabilities [8] and Lindqvist’s study on intrusions [11]; and (ii) providing a degree of formalism by modeling vulnerabilities and attack characteristics, such as Ortalo’s Markov model of UNIX vulnerabilities [17] and Sheyner’s attack graph [18].

This paper combines these two approaches: real data is analyzed in conjunction with a focused source-code examination to develop a finite state machine (FSM) model to depict and reason about security vulnerabilities.

Using the Bugtraq list maintained in SecurityFocus [13], the study first identifies leading causes of security vulnerabilities. An in-depth analysis of the reported vulnerabilities shows:
- Exploits must pass through multiple elementary activities, at any one of which, one can foil the exploit.
- Exploiting a vulnerability involves multiple vulnerable operations on multiple objects.
- Analysis of a given vulnerability along with an examination of the associated source code allows us to specify predicates that need to be met to ensure security.

These observations motivate the development of an FSM modeling methodology capable of expressing the process of exploitation by decomposing it into multiple operations, each of which includes one or more elementary activities. Since each elementary activity is simple, it is feasible (using the data and the application code) to develop a predicate and a corresponding primitive FSM (pFSM) to represent the elementary activity. The pFSMs can then easily be combined to develop FSM models of vulnerable operations and possible exploits.

The proposed FSM methodology is exemplified by analyzing several types of vulnerabilities reported in the data, including stack buffer overflow, integer overflow, heap overflow, input validation vulnerabilities, and format string vulnerabilities. These vulnerabilities include both those that can be exploited remotely (e.g., those impacting Internet servers) and those that can be exploited by local users (e.g., privilege escalation of a regular user to root). It should be noted that this family of vulnerabilities constitutes 22% of all vulnerabilities in the Bugtraq database.

For the studied vulnerabilities, we identify three types of pFSMs that can be used to analyze operations involved in exploiting vulnerabilities and to identify the security checks to be performed at the elementary activity level. An additional demonstration of the usefulness of the approach was the discovery of a new heap overflow vulnerability, now published in Bugtraq, crediting the authors [13]. The discovery was made when modeling another, known vulnerability.

## 2. Related Work
There has been significant research in modeling, analysis, and classification of security problems, some of which is based on real data.

### Security Models of Access Control
Several studies [1][2][3] have proposed models for access control security that satisfy certain properties. Bell and LaPadula [1] proposed a multilevel model and formally defined a secure system. A summary of the state of the art is presented in [4].

### Classification and Statistical Analysis of Security Vulnerabilities
Several studies have proposed classifications to abstract observed vulnerabilities into easy-to-understand classes. Representative examples include Protection Analysis [10], RISOS [9], Landwehr’s taxonomy [8], Aslam’s taxonomy [7], and the Bugtraq classification. Similarly, taxonomies for intrusions have been proposed, such as Lindqvist’s intrusion classification [11] and the Microsoft STRIDE model [12]. In addition to providing taxonomies, [8] and [11] perform statistical analysis of actual vulnerability data based on the proposed taxonomies.

### Modeling Security Vulnerabilities and Intrusions
Several studies focus on modeling attacks and intrusions with the objective of evaluating various security metrics. Michael and Ghosh [19] employ an FSM model constructed using system call traces. By training the model using normal traces, the FSM is able to identify abnormal program behaviors and thus detect intrusions. In [18], a finite state machine-based technique to automatically construct attack graphs is described. The approach is applied in a networked environment consisting of several users, various services, and a number of hosts. A symbolic model checker is used to formally verify the system security. Recent studies have proposed stochastic models to quantitatively evaluate security metrics. Ortalo et al. [17] develop a Markov model to describe intruder behavior and evaluate system security in terms of METF (mean effort to failure). Madan [20] described a semi-Markov model to evaluate an intrusion-tolerant system subject to security attacks. Several security and reliability metrics (e.g., METF and availability) are defined and shown to be solvable. Clearly, such a model requires that parameters, e.g., probabilities of transitions and sojourn time, be available or estimated.

There is little work on modeling discovered security vulnerabilities to capture how and why an implementation fails to achieve the desired level of security. This paper uses actual vulnerability data (e.g., reports) and code inspection to derive FSMs to describe simple predicates, which are used to generate FSM models. The developed FSMs allow us to reason about the existing vulnerabilities and also seem to have the potential for discovering new vulnerabilities.

## 3. Analysis of the Bugtraq Database

### 3.1 Statistical Analysis
As of November 30, 2002, the Bugtraq database included 5,925 reports on software-related vulnerabilities [13]. Each vulnerability report in this database provides information such as the version number of the vulnerable software, date of discovery, an assigned vulnerability ID, cause of the vulnerability, and possible exploits. Figure 1 shows the breakdown of the 5,925 vulnerabilities among the 12 defined classes. Observe that the pie chart is dominated by five categories: input validation errors (23%), boundary condition errors (21%), design errors (18%), failure to handle exceptional conditions (11%), and access validation errors (10%). The primary reason for the domination of these categories is that they include the most prevalent vulnerabilities, such as buffer overflow (included under boundary-condition errors) and format string vulnerabilities (included under input-validation errors). The remaining categories, being very broadly defined (e.g., access validation errors, design errors), are more or less all-encompassing.

### 3.2 In-Depth Analysis of Vulnerability Reports
An in-depth analysis of the data and information reported in Bugtraq, together with a close examination of the associated application code, is essential for understanding the root causes of the vulnerabilities. By examining the vulnerability reports and the associated application source codes, we made three observations:

**Observation 1:** Exploits must pass through multiple elementary activities – at any one of which, one can foil the exploit. The scenario can be described as a serial chain in which each link (which we model as an elementary activity) provides a security checking opportunity: failure at any one elementary activity can foil the exploit.

We illustrate this observation using data from three signed integer overflow vulnerabilities given in Table 1. Here, the analysts have used three different activities as reference points to classify the same type of vulnerability into three categories, although there is nothing in the data to indicate the specific elementary activity corresponding to the observed vulnerability. Thus, #3163 has been classified differently from #5960 and #5961, even though they are essentially the same type of vulnerability.

[Figure 1 and Table 1 would be included here, but are not provided in the text.]

---

This revised version aims to improve the clarity, coherence, and professional tone of the original text.