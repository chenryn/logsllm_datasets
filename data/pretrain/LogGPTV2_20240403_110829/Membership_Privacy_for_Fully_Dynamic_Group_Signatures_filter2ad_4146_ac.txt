(m, Σ, uid, π, infoτ ) ←$ A
(cid:26)CrptU,
Sign,
SndToU,RevealU,
ModifyReg
(cid:27)
(play : state, gpk)
if GS.Vf(gpk, infoτ , m, Σ) = 0
or GS.Judge(gpk, uid, infoτ , π, upk[uid], m, Σ) = 0
then return 0
if uid ∈ H \ B and (uid, m, Σ, τ ) (cid:54)∈ Q
then return 1 else return 0
GS(1λ)
TraceabilityA
param ←$ GS.Setup(1λ); H, C, B, Q := ∅
(state, tsk, tpk) ←$ A(cid:104)GS.KGenM(param),·(cid:105)
(init : param)
if ⊥ ← GS.KGenM(param) or A’s output invalid
then return 0
(msk, mpk, info) ← GS.KGenM(param); gpk := (param, mpk, tpk)
(m, Σ, τ ) ←$ A }} (play :, state, gpk, info)
if GS.Vf(gpk, infoτ , m, Σ) = reject
then return 0
(uid, π) ←$ GS.Trace(gpk, tsk, infoτ , reg, m, Σ)
if GS.IsActive(infoτ , reg, uid) = 0 or uid = 0
or GS.Judge(gpk, uid, infoτ , π, upk[uid], m, Σ) = 0
thenreturn 1else return 0
Oracle Deﬁnitions. We formally describe the oracles given to the adversary in the above exper-
iments. Changes introduced for compatibility with our Join − Privacy and Leave − Privacy experi-
ments are highlighted .
Trace(m, Σ, infoτ )
if GS.Vf(gpk, infoτ , m, Σ) = reject or (m, Σ, τ ) ∈ Q∗
then return (⊥, ⊥)
return GS.Trace(gpk, tsk, infoτ , reg, m, Σ)
UpdateGroup(S)
if H∗ ∩ S (cid:54)= ∅ then return ⊥
return GS.UpdateGroup(gpk, msk, infoτcurrent , S, reg)
CrptU(uid, pk)
if uid ∈ H ∪ C ∪H∗ then return ⊥
C := C ∪ {uid}
upk[uid] := pk
return accept
ReadReg(uid)
ModifyReg(uid, val )
return reg[uid]
reg[uid] := val
RevealU(uid)
if uid (cid:54)∈ H \ (C ∪ B)
or uid ∈ H∗
then return ⊥
B := B ∪ {uid}
return (usk[uid], gsk[uid])
Challb(infoτ , uid0, uid1, m)
if {uid0, uid1} ∩ H (cid:54)= {uid0, uid1}
or ∃b ∈ {0, 1} s.t. gsk[uidb] = ⊥
or GS.IsActive(infoτ , reg, uidb) = 0
then return ⊥
Σ ←$ GS.Sig(gpk, gsk[uidb], infoτ , m)
Q∗
return Σ
:= Q∗ ∪ (m, Σ, τ )
11
AddU(uid)
if uid ∈ H ∪ C then return ⊥
(usk[uid], upk[uid]) ←$ GS.UKGen(1λ)
H := H ∪ {uid}
gsk[uid] := ⊥; decuid
stateuid
stateuid
while decuid
GS.Join = cont and decuid
GS.Issue := cont
GS.Join := (τcurrent, gpk, uid, usk[uid])
GS.Issue := (τcurrent, msk, uid, upk[uid])
GS.Issue = cont do
(stateuid
(stateuid
GS.Issue, MGS.Join, decuid
GS.Join, MGS.Issue, decuid
GS.Issue) ←$ GS.Issue(stateuid
GS.Join) ←$ GS.Join(stateuid
GS.Issue, MGS.Issue)
GS.Join, MGS.Join)
GS.Issue = accept then reg[uid] := stateuid
GS.Join = accept then gsk[uid] := stateuid
if decuid
if decuid
return (infoτcurrent , upk[uid])
GS.Issue
GS.Join
SndToM(uid, Min)
GS.Issue (cid:54)= cont
if uid (cid:54)∈ C or decuid
or uid ∈ H∗ then return ⊥
stateuid
(stateuid
if decuid
return (Mout, decuid
GS.Issue)
GS.Issue := (τcurrent, msk, uid, upk[uid])
GS.Issue) ←$ GS.Issue(stateuid
GS.Issue, Mout, decuid
GS.Issue = accept then reg[uid] := stateuid
GS.Issue, Min)
GS.Issue
SndToU(uid, Min)
if uid ∈ C ∪ B then return ⊥
if uid (cid:54)∈ H then
H := H ∪ {uid}
(usk[uid], upk[uid]) ←$ GS.UKGen(1λ)
gsk[uid] := ⊥; Min := ⊥
GS.Join (cid:54)= cont then return ⊥
GS.Join = ⊥ then stateuid
GS.Join ←$ GS.Join(stateuid
GS.Join, Mout, decuid
GS.Join = accept then gsk[uid] := stateuid
if decuid
if stateuid
(stateuid
if decuid
return (Mout, decuid
GS.Join)
GS.Join, Min))
GS.Join
GS.Join := (τcurrent, gpk, uid, usk[uid])
Sign(uid, m, τ )
if uid (cid:54)∈ H \H∗ or gsk[uid] = ⊥
or infoτ = ⊥ or GS.IsActive(infoτ , reg, uid) = 0
then return ⊥
Σ ←$ GS.Sig(gpk, gsk[uid], infoτ , m)
Q := Q ∪ {(uid, m, Σ, τ )}
return Σ
GS(1λ)
Trace − SoundA
param ←$ GS.Setup(1λ);C := ∅
(state, info, msk, mpk, tsk, tpk) ←$ A(init : param)
if msk = ⊥ or mpk = ⊥
then return 0
gpk := (param, mpk, tpk)
(m, Σ,{uidi, πi}2
if GS.Vf(gpk, infoτ , m, Σ) = 0
i=1 , infoτ ) ←$ ACrptU,ModifyReg(play : state, gpk)
then return 0
if upk[uid1] = upk[uid2] or ∃i ∈ {1, 2} s.t. upk[uidi] = ⊥
or GS.Judge(gpk, uidi, infoτ , πi, upk[uidi], m, Σ) = 0
thenreturn 0 else return 1
Functional Tracing Soundness. The original deﬁnition of tracing soundness (as opening sound-
ness in [40]) requires that the attacker produce two valid openings to diﬀerent user IDs, as opposed
to diﬀerent public keys. This is motivated by the fact that in the attacker model the whole group
may be corrupted and thus the attacker may give two diﬀerent users the same key information.
However, it implies that the GS.Vf and GS.Judge algorithms of the schemes in [40] have to check
12
that the group is well-formed, i.e. that every user has a unique key in the registration table. These
checks are costly and unavoidable. In addition it necessitates that the registration table reg must
be public, since otherwise signature veriﬁcation and opening judgment cannot perform these checks.
Therefore, we propose a relaxation of this property, which we call functional tracing soundness
and which means that even in a fully corrupted group it should not be possible to create two
valid openings for the same signature which indict two diﬀerent user public keys. We motivate
this by the observation that commonly public keys are the public identities of users and the link
between some informal identity and the identity in the context of the signature scheme is established
through the functional property that the user whose identity belongs to a given public key can create
signatures which verify under that key. As discussed above, non-frameability only makes sense if there
is an entity outside the signature scheme which certiﬁes that certain public keys belong to informal
identities. This entity would not assign the same public key to several diﬀerent public identities. The
changes to the Tracing Soundness experiment which implement this change are highlighted .
Furthermore, we observe that the fully dynamic group signature scheme based on accountable
ring signatures presented in [15] implicitly uses this deﬁnition already (although it is presented
diﬀerently, presumably due to a typographic mistake), since its proof of tracing soundness relies
on the tracing soundness of the underlying accountable ring signature scheme. The property for
accountable ring signature schemes requires that the veriﬁcation keys provided in the two openings
be diﬀerent. Were this not a requirement assumed in the proof in [15], the given reduction wouldn’t
give valid outputs against tracing soundness of the accountable ring signature scheme and the proof
would be invalid.
We stress that the construction of fully dynamic group signatures presented later in this work
can be made to achieve the identity focused version of opening soundness, albeit at the cost of the
above mentioned group integrity checks and any kind of group membership privacy.
3.2 Leave-Join Privacy for Fully Dynamic Group Signatures
Formal models of dynamic group signatures thus far implicitly assumed that the public is aware who
is a member of the group. Usually, a registration table is published, such that the entries are bound
to public keys of the members. This is in line with one of the main application of group signatures:
authenticating messages with the authority of a known group, certifying that an indeterminate
someone within the group has seen the signed message and taken responsibility on behalf of the
group.
In their seminal work Chaum and van Heyst [21], however, did not specify this as an essential
requirement. In fact, they point out that group signatures can be used for access control, where
knowing members of the group is an obvious privacy leak that could for instance lead to targeted
DoS attacks on the group. Therefore it seems natural that in some applications we want to hide the
identities of active group members.
To address this issue we discuss for the ﬁrst time membership privacy for group signatures.
Informally, we will say that a group signature scheme has membership privacy if it protect the
identity of users that join or leave the system. This means that we consider a scenario in which some
kind of public identiﬁer about users is known independently of the scheme (e.g. public key) but it
is unknown to a third party who is part of the group. Moreover, we assume that some users can be
corrupted or can collude to infer information about the membership status of other users.
To formally deﬁne this notion, we propose a pair of security experiments which are expressed in
the fully dynamic framework put forth by [15]. However, one can easily specify similar experiments
for the partially dynamic models [9, 34, 35]. The ﬁrst one describes join privacy, since it considers
the case that two non-members are known in one epoch and in the next epoch one of them joins the
13
system and the task is to distinguish who joined the group. The second experiment describes leave
privacy and models the case that there are two known members in one epoch and in the next epoch
one of them leaves the group. Note that this assumes that the adversary knows out of band that the
two users had previously joined the group. In both cases we allow an adversary to corrupt members
of the group but we consider both authorities to be honest: The issuing authority always knows who
is part of the group and the tracing authority can open all signatures to extract the identities of
members. In particular, this implies that the registration table reg may not be public because one
could easily infer current members from it. Fortunately, this seems a fairly natural assumption. This
registration table is not necessary in any of the user centric algorithms and it is easier to keep it
local to the authorities than publishing it online. An exception is the scheme [40] mentioned above,
where the registration table is part of the veriﬁcation algorithm to ensure that tracing soundness
hold with respect to public user identities rather than in the functional sense we describe.
A diﬀerent question is whether additionally to the identities of users, we can hide the size of the
group. Unfortunately, since the fully dynamic model in [15] allows joining and leaving the group,
all eﬃcient constructions fail to hide the size of the group. Whitelisting immediately leaks the size
of the group and can only be alleviated using dummy users, which incurs large overhead and ﬁxes
a constant upper bound on the group size. This is even the case for cryptographic accumulators,
where it is required by members to update their witness with every epoch. Thus, some kind of
information that is linear is the number of active/inactive members must be published together with
the accumulator.
We formally deﬁne join and leave privacy in terms of the two experiments shown in Figure 1. Note,
that we introduce a new set of challenge users H∗. It is used simultaneously to ensure compatibility
of the oracles deﬁned in [15] (our changes are highlighted ) and to manage the challenge oracle
PrivChall without trivially revealing information about the challenge.
The oracle PrivChall allows the adversary to
obtain signatures created by the user which
has joined or has not left in the challenge
epoch, respectively.
PrivChallb,uid0,uid1,τ∗ (m, τ )
if τ < τ
∗
then return ⊥
if decinv = true
Σ ←$ GS.Sig(gpk, gsk[uid(1−b)], infoτ , m)
else
Σ ←$ GS.Sig(gpk, gsk[uidb], infoτ , m)
:= Q∗ ∪ (m, Σ, τ )
Q∗
return Σ
Deﬁnition 16. For a group signature scheme GS and a two stage adversary A, we deﬁne the ad-
versary’s advantage in the Join − Privacy experiment as
Advjoin−privacy
A,GS
(λ) := Pr
Join − Privacy
GS(1λ) ⇒ 1
A
.
n A group signature scheme GS has join privacy if for all ppt adversaries A, there is a negligible
function negl(λ) such that
Advjoin−privacy
A,GS
(λ) ≤ 1
2
+ negl(λ) .
Deﬁnition 17. For a group signature scheme GS and a two stage adversary A, we deﬁne the ad-
versary’s advantage in the Leave − Privacy experiment as
(cid:104)
(cid:104)
(cid:105)
(cid:105)
.
Advleave−privacy
A,GS
(λ) := Pr
Leave − Privacy
GS(1λ) ⇒ 1
A
14
(cid:110)AddU,RevealU,CrptU,SndToM,
Join − PrivacyA
GS(1λ)
param ←$ GS.Setup(1λ)
(msk, mpk, info, tsk, tpk) ←$ (cid:104)GS.KGenM(param), GS.KGenT (param)(cid:105)