---
## Page 229
·214°
式如下。
体的列表可以查看官方文档。
似于“%system%"。第三类的参数有很多，比如返回结果按照某一列排序的“sortfield”等，具
Zabbix监控系统深度实践
12.2.6
这个方法和item.get 很类似，但它更加简单，写出需要满足的属性条件，则返回item。格
这样就相当于在返回结果中过滤出“key_”中包含“system”字段的 Item了，匹配方式类
"params"
"jsonrpc" :“2.0"
"id":1
"method":"item.get",
"jsonrpc": "2.o",
可以加上search参数，即变成：
"auth":
"params":{
"id":1
"auth":"c745dad1222a0b4eb505707df47d6d81",
"params":(
item.getobjects
"hostids":"10084",
"hostids":"10084"
"search"
："c745dad1222a0b4eb505707df47d6d81"，
：亡
"key_
: “system"
---
## Page 230
False.
针对每一个itemid 的结果，做“与”操作，即只要有一个itemid 没有读权限，那么返回的就是
参数如下。
12.2.8
12.2.7
item.update 是根据 itemid 更新 Item 的方法，它可以一次更新多个。参数如下。
当“method”为“item.iswritable”时，判断是否有写权限。当“parmas”有多个itemid时，
这两个方法类似，用于判断登录的用户对某些 itemid 对应的 Item是否有读或者写的权限,
"params":
"method":"item.update",
"jsonrpc":"2.o",
"id":1
"auth":"038e1d7b1735c6a5436ee9eae095879e",
"params":[
"method":"item.isreadable",
"jsonrpc":"2.o",
“id":1
“auth":“3a57200802b24cda67c4e4010b50c065"
{"itemid":"23975","name":"frank"},
"23323"
“23298"
“host":“Zabbix server”
item.update
item.isreadable/item.iswritable
第12章
ZabbixAPI
·215°
---
## Page 231
●216°
自动化体系。
端界面，以命令行的方式和人或者程序交互。这让Zabbix能够和其他系统一起组成整个运维
道该怎么写。笔者根据官方文档，总结了API中涉及到的类型。
很多参数，但又不知道参数的值是哪种类型，文档里有“query”、
不可能讲得面面俱到。相比一个一个解释，笔者相信介绍如何去看ZabbixAPI文档是更加重要的。
12.3
参数里的属性都会更新到对应的itemid上。
Zabbix监控系统深度实践
ZabbixAPI本身的功能和在页面上单击是一样的，API的强大之处是可以让Zabbix脱离前
bool：布尔值，值必须是“true”或者“false”。
比如现在要使用item.get 方法，却不知道怎么使用。首先看 item.get 的文档，发现它支持
前面讲解了Item在ZabbixAPI中的操作，但ZabbixAPI支持的资源太多了，因篇幅限制
有了这些，再看看文档中的例子，基本使用API就没有问题了。
 query：有 short，refer，extend，count几种。其中 count不是每一个“query”属性都可以
①object：一组数组。
array：数组。
timestamp：UNIX时间戳。
 text：长文本。
O string：字符串。
float：浮点数。
integer：整数。
 flag：只要值部为 null就认为是“true”，否则就是“false"。
在更新某个Item的时候，只要在参数中写上“itemid”即可，除了“itemid”以外，任何
使用的，具体看属性的说明。
"id":1
"auth":"c745dad1222a0b4eb505707df47d6d81",
如何阅读ZabbixAPI文档
("itemid":"23847","name":"frank")
“string”和“flag”，但不知
---
## Page 232
区别如表13-1所示。
Zabbix Server，使用Node 可以将多个Zabbix Server 组成一个有继承关系的分布式架构，两者的
Server的代理去监控服务器，并把数据汇总到Zabbix Server。而Node本身就是一个完整的
13.1两种分布式架构对比
绍 Zabbix分布式监控相关的内容，内容包括基本概念和部署。
Zabbix支持两种分布式架构：一种是Proxy模式，一种是Node 模式。Proxy 作为 Zabbix
Zabbix是一个分布式的监控软件。在读者学习了Zabbix的各个功能模块之后，本章将介
本地Admin管理
是否可以独立运行
中心化配置
产生通知
容易运维
GUI前端
轻量级
Zabbix分布式监控
表13-1
Proxy
否
是
否
是
是
否
是
第13章
是
否
是
否
否
是
否
Node
·217
---
## Page 233
218°
非常适用的，如图13-1所示。
我们只要解决Proxy和Zabbix Server两台服务器之间的问题就可以了。这在我国的网络环境是
务器的网络连通性不好。这时候可以在每一个IDC 机房放一个Proxy来监控本机房的服务器，
一些原因，机房之间的互联互通并不是那么好，又或者是防火墙的问题造成Zabbix Server和服
缓解Zabbix Server 的压力。
力会由 Proxy 的数据库承担，并且 Proxy 发送数据给Zabbix Server也是分批进行的，能够大大
可能是逻辑问题也有可能直接crush。
致性。Zabbix是以数据库中的信息为准的，如果出现了配置冲突，很有可能会造成Zabbix出问题
配置都是在ZabbixServer上配置然后同步到各个Proxy的，从而保证了分布式架构下的配置一
生成Event 和发送报警。Zabbix Server会每隔一段时间将自己的配置同步给Proxy，这样一切的
Trigger之类。Proxy 相当于一个数据收集器，没有其他任何功能，它不会计算是否触发Trigger、
满足一定条件后，会将这些数据发送给Zabbix Server，再进行后续的操作，比如检查是否处罚
Proxy 的工作原理。
钟以内就部署好一台Proxy并付诸使用。Proxy的功能在前面已经说得比较清楚了，下面说说
13.2
同步给它的父节点，形成一种形如继承关系的架构。
一个具有完整功能的ZabbixServer，它可以自行维护报警逻辑和监控数据，只是会把这些信息
有的Zabbix Server 操作都是在 Zabbix Server端完成的。而对于Node模式来说，Node本身就是
Proxy本身并不做任何对于监控数据的检查，比如检查这个数据是否需要报警等的逻辑。它所
据ZabbixServer的配置，从服务器收集一些监控数据，然后将监控数据发送给ZabbixServer。
Zabbix监控系统深度实践
另外，Proxy 也能解决很多网络问题。比如我国的互联网公司一般有多个IDC 机房，由于
在 Zabbix中，容易出现性能瓶颈的是数据库端的操作。使用Proxy 以后，相当于一部分压
使用Proxy可以减轻Zabbix Server的压力并解决网络上的一些问题。
Proxy和 Zabbix Server一样，它会从监控的 Host 获取监控数据，并保存在本地数据库。在
Proxy 架构是Zabbix 中最简单的分布式架构，它的特点是部署简单，在PPTV 能够在10分
通过比较可以更好地理解二者的异同：Proxy是个非常轻量级的组件，它的工作就是根
Proxy单级分布式架构
---
## Page 234
只有从Proxy到Zabbix server一种架构方式。
求配置文件，而 Passive模式的Proxy就是被动地等待Zabbix的连接。
Proxy mode 可以选择 Active或者是Passive。Active 模式的 Proxy 会主动连接 Zabbix Server 和请
Proxy都已经是在运行着的了。
和 Zabbix Server 类似，只是在configure 编译的时候，参数有些调整。配置的前提是 Server 和
13.3
Proxy的架构。
存保证数据传输的完整性。在 PPTV，我们是电信一台Proxy、网通一台 Proxy、多线机房一台
大家要注意，Proxy 的 IP 也需要配置在 zabbix_agentd.conf 中的参数中，否则 Proxy无法获
Proxy的配置非常简单，首先要有一台Zabbix Server和一台Proxy，安装Proxy的方法
在配置Proxy的界面中,输人Proxy的Hostname,选择哪些服务器归Proxy监控(后期可调整）。
进人“Administration”→“DM",在右上角选择 Proxies,然后创建一个Proxy,如图 13-2所示。
关于Proxy 和Zabbix Server 之间传输数据的可靠性，大家也可以放心，Proxy会有本地缓
Proxy配置
ProxiesCreateproxy
图13-2
图13-1
第13章Zabbix分布式监控
219°
---
## Page 235
·220°
server.c的片段。
西的，因为这是C编译出来的执行文件。查看Zabbix 2.2.0的源码，下面是 src/zabbix_server/
途中断，否则可能会影响数据库。
先配置Child Node。步骤如下。
展示，这时Node架构能够在不破坏先有各个Zabbix的情况下完成这个任务。
据、报警、存储数据，它都需要。Node架构所有的数据，都会同步到Zabbix Server。
13.4Node多级分布式架构
Zabbix监控系统深度实践
Nginxo
我们来深人研究下，看看这个命令到底是干什么的。直接查看 zabbix_server 是看不到东
switch（ch)
这里大家一定要注意，Zabbix官方网站上特别强调了：这个命令只能跑一次，而且不能中
zabbix_server-n 
（3）将数据库转变成Node架构使用的结构，运行以下命令：
（2）关闭 Child Node 的 Zabix server时，最好同时也关闭运行其前端 PHP 的Apache 或者
（1）每一个Child Node都有一个自己唯一的NodeID，可以从1～999。
Node架构中有两个角色：Master Node和Child Node，即“父节点”和“子节点”。我们要
如果公司目前已经存在了多套Zabbix，现在需要一个地方把这些数据统一集中起来管理
相对 Proxy 架构，Node 架构是重量级的。Node 本身就是一个完整的 Zabbix Server，收集数
printf ("invalid runtime control option: %s\n", zbx_optarg);
if (0 == strcmp (zbx_optarg, ZBX_CONFIG_CACHE_RELOAD))
case'R':
CONFIG_FILE = zbx_strdup(cONFIG_FILE, zbx_optarg）;
case'c':
else
break;
task = ZBX_TASK_CONFIG_CACHE_RELOAD;
---
## Page 236
代码，即在屏幕中输出的内容，
EXIT_FAILURE）;
switch(task)
可以追踪到
default:
case ZBX_TASK_CHANGE_NODEID:
default:
case'n':
case 'h':
break;
break;
break;
exit-1）;
usage（）;
break;
exit（-1）;
version（）;
break;
task = ZBX_TASK_CHANGE_NODEID;
break;
exit（-1）;
help（）;
break;
一共有下面这些步骤。
exit（EXIT_FAILURE）;
第13章Zabbix分布式监控
·221°
---
## Page 237
●222°
prototype_2"",
drop[i])
fkeys_drop[i]; i++)
Zabbix监控系统深度实践
zabbix_server/utils/nodechange.c:
const char
再到dbscheme.c中，发现针对不同数据库有不同的SQL语句，比如下面是MySQL的：
zabbix_server/utils/nodechange.c:
libs/zbxdbhigh/dbschema.c:const char
libs/zbxdbhigh/dbschema.c:const char
libs/zbxdbhigh/dbschema.c:constchar
1ibs/zbxdbhigh/dbschema.c:constchar
libs/zbxdbhigh/dbschema.c:const char
SQL 语句是在 db_scheme_fkeys_drop 中，使用 grep 来搜索：
for(i = O; NULL != db_schema_fkeys_drop[i]; i++ )
我们先看第一步把数据库的外键去掉的代码：
(3） Creating foreign keys
(2） Converting tables
( 1） Dropping foreign keys
"ALTER
"ALTER
"ALTER TABLE
"ALTERTABLEhosts
"ALTERTABLE
fflush（stdout）;
printf（".");
DBexecute ("%s", db_schema_fkeys_drop[i] ) ;
TABLE
TABLE
"hosts"
`hosts`
*const db_schema_fkeys_drop[] =
"group_prototype`
DROP FOREIGN KEY
DROP FOREIGN KEY
DROP FOREIGN KEY
*const db_schema_fkeys_drop[] =
DROP
*const db_schema_fkeys_drop[]
*const db_schema_fkeys_drop[]
*const db_schema_fkeys_drop[]
"c_hosts_1"",
*const db_schema_fkeys_drop[] =
'"、e szsou o.
'".Z sasou-o. 
for（i=O; NULL!=db_schema
FOREIGN
KEY
dnoxb-.
=
---
## Page 238
if (0 == strcmp (tables[i].fields[j].name,
"ALTER
"ALTER
"ALTER
DBexecute ("update %s set %s=%s+" ZBx_FS_UI64 " where %s>0",
convert_profiles（nodeid, tables[i].fields[j].name）;
TABLE
TABLE
TABLE
else
else if (0 == strcmp ("profiles", tables[i].table))