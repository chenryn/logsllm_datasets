HTML is used in browsers or browser-like software, but
JavaScript is either restricted or completely disabled for se-
curity and/or privacy reasons. Our attack techniques target
these scenarios because scriptless attacks enable data leak-
age even in such heavily restricted environments:
1. HTML5 Iframe sandbox: The HTML speciﬁcation
describes a feature that allows a website to frame ar-
bitrary data without enabling it to execute scripts and
similar active content. The so called Iframe sandbox
can be invoked by simply applying an Iframe element
with a sandbox attribute. By default, the sandbox
is strict and blocks execution of any active content,
form functionality, links targeting diﬀerent views and
plugin containers. The restrictions can be relaxed by
adding space-separated values to that attribute con-
tent. Thus, with these settings, a developer can for
instance allow scripting but disallow access to parent
frames, allow form functionality, or allow pop-ups and
modal dialogs. Although sandboxed Iframes are cur-
rently only available in Google Chrome and Microsoft
Internet Explorer, we predict their wider adoption as
the described feature appears in the HTML5 speciﬁca-
tion. A reduced version of sandboxed Iframes, labeled
security restricted Iframes, has been available in the
very early versions of Internet Explorer, for example
in MSIE 6.0.
2. Content Security Policy (CSP): The Content Se-
curity Policy is a proposed and actively developed pri-
vacy and security tool. Speciﬁcally, it is available in
Mozilla Firefox and Google Chrome browsers [43]. The
CSP’s purpose is the HTTP header and meta element
based restriction of content usage by the website in
question; a developer can for instance direct the user
agent to ignore in-line scripts, resources from across
domains, event handlers, plugin data, and comparable
resources such as web fonts. In Section 4 we will dis-
cuss how CSP in its current state can help mitigating
the attacks introduced in Section 3.
3. NoScript and similar script-blockers: NoScript
is a rather popular Firefox extension composed and
maintained by Maone, G. [33]. Aside from several fea-
tures irrelevant for this work, NoScript’s purpose is
to block untrusted script content on visited websites.
Normally, all script and content sources except for few
trusted default origins are blocked. A particular user
can decide whether to trust the content source and en-
able it, either temporarily or in a permanent manner.
NoScript was in scope of our research: we attempted
to bypass its protection and gain a capacity to execute
malicious code despite its presence. Let us underline
that scriptless attacks have proven to be rather eﬀec-
tive for this purpose.
4. Client-side XSS ﬁlters: Several user agents provide
integrated XSS ﬁlters. This applies to Microsoft In-
ternet Explorer and Google Chrome as well as Firefox
with the installed NoScript extension. Our scriptless
attacks aim to bypass those ﬁlters and execute mali-
cious code despite their presence. In several examples,
we were able to fulﬁll our objective, despite the ﬁlter
detecting the attack and blocking scripture execution
in reaction.
5. E-mail clients and instant messaging: As noted
above, a browser’s layout engine is usually not ex-
clusively used by the browser itself, as several tools
such as e-mail clients and instant messengers equally
employ the available HTML render engines for their
purposes. Mozilla Thunderbird can be discussed as a
762speciﬁc example. By default, scripting is disabled in
this type of software: an e-mail client allowing usage of
JavaScript or even plugin content inside the mail body
could induce severe privacy implications. Scriptless at-
tacks therefore supply a potential way for attackers to
execute malicious code regardless.
comprise the working attack vectors. More speciﬁcally, we
show how legitimate browser features can be abused to ex-
ﬁltrate content or establish side channels functional to ob-
tain speciﬁc information from a web browser. We found the
following browser features to be useful building blocks in
constructing attacks:
In summary, there are a lot of attack scenarios in which an
adversary is either unable to execute scripts or she is heavily
limited by the capabilities of an executed script.
3. BEYOND SCRIPT-BASED ATTACKS
In this section, we discuss the technical details of the at-
tacks we developed during our investigation of the attack
surface related to scriptless attacks. As we will see, scriptless
attacks can grant a feasible solution to nevertheless exﬁltrate
and steal sensitive information in the contexts described in
the previous section, bypassing many of the available de-
fense solutions such as sandboxed Iframes, script-blockers
(i.e. NoScript), or client-side XSS ﬁlters. For the rest of the
paper, we assume an attacker has the following capabilities:
1. The attacker can inject arbitrary data into the DOM
rendered by the browser – such as for instance an
HTML mail body in a webmail application. This is
a viable assumption for modern Web 2.0 applications
that encourage users to contribute content. Further-
more, the fact that XSS attacks are ranked as number
one threat according to the OWASP ranking [36] indi-
cates that injection vulnerabilities are present in many
web applications.
2. We assume that scripting is completely disabled (e.g.,
our user has NoScript installed or similar defense so-
lutions are in place, preventing an attacker from code
injection and subsequent execution). Note that tradi-
tional XSS attacks would not be feasible in this set-up
because there is no way for executing JavaScript (or
any other language) content.
We illustrate our attacks with the help of a simple web ap-
plication that processes credit card numbers – it can be com-
pared to the Amazon web store or similar websites applied
with a back-end suitable for processing or delegating credit
card transactions. This web application allows us to demon-
strate our attack vectors in a proof-of-concept scenario. We
speciﬁcally chose credit card numbers’ processing for they
consist of only sixteen digits such as for example 4000 1234
5678 9010. This enables us to exﬁltrate information in a
short amount of time. Note that our operations are ap-
plicable to other attack scenarios as well and we will for
example explain how one can steal CSRF tokens and other
kinds of sensitive information with our method. Further-
more, we implemented a scriptless keylogger [18] that allows
remote attackers to capture keystrokes entered on a web
page, even when JavaScript is disabled (this vulnerability is
being tracked as CVE-2011-anonymized).
3.1 Attack Components
The attacks described in the following sections take advan-
tage of several standard browser features available in modern
user agents and deﬁned in the HTML and CSS3 speciﬁca-
tion drafts. We list and brieﬂy explain these features before
moving on to demonstrating how they can be combined to
1. Web-fonts based on SVG and WOFF: The HTML
and CSS speciﬁcations recommend browser vendors
to provide support for diﬀerent web-font formats [23].
Among those are Scalable Vector Graphics (SVG) fonts
and Web Open Font Format (WOFF). Our attacks em-
ploy these fonts and utilize their features to vary the
properties of displayed website content. SVG fonts al-
low an attacker to easily modify character and glyph
representations, change appearance of single charac-
ters, and diversify their dimensions. It is possible to
simply use attributes such as width to assure that cer-
tain characters have no dimensions by assigning “zero
width”, whereas other attributes may have distinct and
attacker-controlled dimensions. WOFF in combina-
tion with CSS3 allows using a feature called discre-
tionary ligatures or contextual alternatives. By specify-
ing those for a WOFF font, arbitrary strings of almost
any length can be represented by a single character
(again given distinct dimensions for eventual measure-
ment purposes).
2. CSS-based Animations: With CSS based anima-
tions, it is possible to over time change a wide range
of CSS and DOM properties without using any script
code [14]. The properties allowing change via CSS an-
imations are ﬂagged by speciﬁcation as animatable.
An attacker can use CSS animations to change the
width or height of a container surrounding DOM nodes
that hold sensitive information, to name one example.
By being able to scale the container, the contained
content can be forced to react in speciﬁc ways to the
dimension changes. One reaction would be to break
lines or overﬂow the container. In case those behav-
iors are measurable, animation can cause information
leaks based on the timing parameters of that speciﬁc
behavior.
3. The CSS Content Property: CSS allows to use a
property called content to extract arbitrary attribute
values and display the value either before, after, or in-
stead of the selected element [8]. The attribute value
extraction can be triggered by the property value func-
tion’s use attr. For a benign use-case of this feature,
consider the following situation: A developer wishes
to display the link URL of all or selected links on her
website by simply rendering the content of the href at-
tribute after displaying the link, but only for absolute
link URLs. This is feasible by utilizing the following
CSS code:
a[href^=http://]:after{content:attr(href)}
This powerful feature can also be used to extract sen-
sitive attribute values such as CSRF tokens, password-
ﬁeld-values and similar data. Subsequently, they could
be made visible outside the attribute context. Com-
bining the extracted information with a font injection
provides a powerful measurement lever and side chan-
nel. In fact, this combination constitutes a substantial
763aspect of the attacks discussed in Section 3.2 and Sec-
tion 3.3.
4. CSS Media Queries: CSS Media Queries provide
website developers with a convenient way to deploy
device-dependent style-sheets [49]. A user agent can
use a media query to for instance determine whether
the device visiting the website has a display with a
view-port width greater than 300 pixels.
If this is
the case, a style-sheet optimized for wider screens will
be deployed. Otherwise, a style-sheet optimized for
smartphones and generally smaller screens and view-
ports will be chosen. The example code shown in List-
ing 1 illustrates the general technique; If the device
visiting the website deploying this CSS snippet has a
view-port width larger than 400 pixels, the background
turns green; if the screen only allows a smaller view-
port width, the background will be red.
Note that these diﬀerent components are all legitimate
and benign features within a browser. Only in combination
they can be abused to establish side channels and measure
speciﬁc aspects of a given website.
Listing 1: CSS Media Queries determining screen
width and deploying style-sheets accordingly
3.2 Measurement-based Content Exﬁltration
using Smart Scrollbars
Initially, we have decided to focus our analysis on Webkit-
based browsers, since this browser layout engine is widely
deployed. This includes, among others, Google Chrome and
Safari, which in turn means that we cover desktop comput-
ers, laptops, iPhones and iPads, as well as the whole range of
Android browsers, Blackberry, and Tablet OS devices. The
Webkit project operates as open source and is known for
very short development cycles and fast implementation of
novel W3C and WHATWG feature suggestions. Alongside
those speciﬁed and recommended features, Webkit also ships
a wide range of non-standard features that are exclusively
available in browsers using this particular layout engine.
One of the proprietary features enables attackers to de-
liver a tricky exploit, working against websites permitting
submission of user-generated styles. It is possible to extract
almost arbitrary information that is displayed by the web-
site, including text content like credit card number, element
dimensions, and even HTML/XHTML attribute values such
as CSRF tokens used to protect non-idempotent HTTP re-
quests [3]. The latter becomes possible once one uses the
CSS content feature described in Section 3.1.
We have developed a demonstration exploit [17] capable
of extracting detailed information about CSRF tokens; to
name one example, a test showed that reading a 32 character
CSRF token requires less than 100 HTTP requests.
As noted above, CSRF tokens are used by websites that
wish to protect possibly harmful GET requests from be-
ing guessable. In case an attacker can discover the link to
initiate modiﬁcation of stored items, harm can be done by
simply issuing a HTTP request to that link from a diﬀerent
browser navigation tab. An unguessable link – applied with
a long and cryptographically safe token – prevents this kind
of attack. The token has to be known in order to perform
the request successfully. In an attack scenario that allows
the adversary to execute arbitrary JavaScript, it is easy to
extract the token by simple DOM traversal to one of the
protected links and subsequent utilization of a side channel
for sending the token to an oﬀ-domain location for later re-
usage. But in our attack scenario, the adversary cannot ex-
ecute JavaScript, and thus token extraction and exﬁltration
(aside from using open textarea elements and form sub-
missions) is complicated. Vela et al. accomplished creating a
demonstrative heavy-load CSS-only attribute reader by us-
ing attribute-selectors back in 2009 [45]. Unfortunately, this
approach is unsuitable to read high-entropy 32+ character
CSRF tokens.
To enable a purely CSS-based data exﬁltration attack, we
utilize all of the available features listed in Section 3.1, addi-
tionally combining them with one of the proprietary Webkit
features. The following outline presents the steps we under-
take to move from initial CSS injection to full stack data
exﬁltration of sensitive CSRF tokens:
1. An attacker injects a style element containing a set
of CSS selectors and a font-face declaration. These