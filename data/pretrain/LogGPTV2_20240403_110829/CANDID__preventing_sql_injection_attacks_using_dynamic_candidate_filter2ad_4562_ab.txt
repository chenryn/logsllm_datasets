mer while coding the application. The queries con-
structed from these inputs, therefore, will not be at-
tack queries.
2. Inputs must dictate the same path in a program. An
actual input to the program will dictate a control path
to a point where a query is issued. To deduce the
programmer-intended query structure for this partic-
ular path (i.e., the control path), the candidate inputs
must also exercise the same control path in the pro-
gram.
Given such candidate inputs, we can detect attacks by
comparing the query structures of the programmer-intended
query (computed using the candidate input) and the possible
attack query.
The above discussion suggests the need for an oracle that,
given a control path in a program, returns a set of benign
candidate inputs that exercise the same control path. This
oracle, if constructed, may actually oﬀer us a clean solution
to the problem of deducing the query structure intended by
the programmer. Unfortunately, such an oracle is hard to
construct, and is, in the general case, impossible (i.e., the
problem of ﬁnding such candidate inputs is undecidable).
P ::= defn ; stmt; sql.execute(s0)
defn
stmt
::= int n | str s | input int In | input str Is | defn ; defn
::= stmt ; stmt | n := ae | s := se | skip |
while (be) {stmt} | if (be) then {stmt} else {stmt}
ae
se
be
::= c | n | fi(t1, . . . , tk)
::= cstr | s | gi(t1, . . . , tk)
::= true | false | hi(t1, . . . , tk)
(program)
(variable declaration)
(statement)
(arithmetic expressions)
(string expressions)
(boolean expressions)
where n ∈ I, s ∈ S, c ∈ Z is any integer constant, cstr is any string constant,
each ti is either ae, be or se, depending on the parameters for fi, gi, hi, respectively.
Figure 2: A simple while language
(See [11] and references therein for recent work on testing
database applications using incomplete solutions based on
constraint-solving and random testing.)
The crux of our approach is to avoid the above problem
of ﬁnding candidate inputs that exercise a control path, and
instead derive the intended query structure directly from the
same control path. We suggest that we can simply execute
the statements along the control path on any benign candi-
date input, ignoring the conditionals that lie on the path.
In the above example, Path 1 is taken for the attack input
John’ OR 1=1 --’. We can execute the statements along that
path, in this case the lone SELECT statement, using the be-
nign input “John” and dynamically discover the programmer
intended query structure for the same path.
The idea of executing the statements on a control path,
but not the conditionals along it, is, to the best of our knowl-
edge, a new idea. It is in fact a very intuitive and theoret-
ically sound approach, as shown by our formal description
in the next section. Intuitively, when a program is run on
an actual input, it exercises a control path, and the query
constructed on that path can be viewed as a symbolic ex-
pression parameterized on the input variables. A natural
approach to compute the intended query is then to substi-
tute benign candidate inputs in the symbolic expression for
the query. This substitution is (semantically) precisely the
same as evaluating the non-conditional statements on the
control path on the candidate input, as shown in the next
section.
3. FORMAL ANALYSIS USING SYMBOLIC
QUERIES
In this section, we formalize SQL injection attacks and,
through a series of gradual reﬁnements and approximations,
we derive the detection scheme used by Candid. In order to
simplify and concentrate on the main ideas in this analytic
section, we will work with a simple programming language.
We ﬁrst deﬁne a simple while-programming language (see
Fig. 2) that has only two variable domains:
integers and
strings. We ﬁx a set of integer variables I and a set of string
variables S, and use n, ni, etc., to denote integer variables
and s, sj, etc., to denote string variables. A subset of these
are declared to be input variables using the keyword input,
and is used to model user-inputs to a web application.
Let us also ﬁx a set of functions fi each of which take a tu-
ple of values, each parameter being a string/integer/boolean,
and return an integer. Likewise, let’s ﬁx a set of functions gi
(respectively hi) that take a tuple of string/integer/boolean
values and return a string (respectively boolean). A spe-
cial string s0 is the query string, and a special command
sql.execute(s0) formulates an SQL-query to a database; we
will assume that the query occurs exactly once and is the
last instruction in the program. The syntax of programs is
given in Fig. 2. The semantics is the natural one (and we
assume each non-input integer variable is initialized to 0 and
each non-input string variable is initialized to the null string
ǫ).
Note that the functions fi, gi, and hi are native functions
oﬀered by the language, and include arithmetic functions
such as addition and multiplication, string functions such
as concatenation and sub-string, and string-to-integer func-
tions such as ﬁnding the length of a string.
For example, if concat is a function that takes two strings
and concatenates them, then a string expression of the form:
concat(“SELECT * FROM employdb WHERE name=’”, s)
denotes the concatenation of the constant string with the
variable string s. For readability, however, we will represent
concatenation using ‘+’ (eg.
“SELECT * FROM employdb
WHERE name=’” + s).
The formal development of our framework will be inde-
pendent of the functions the language supports. For the
technical exposition in this section, we will assume that all
functions are complete over their respective domains.
Program P
input int n; input str s; str s0;
if (n = 0) then
;; Path 1
{s0:=“SELECT * FROM employdb WHERE name=’
”+s+“’ ”}
else
;; Path 2
{s0:=“SELECT * FROM employdb WHERE name=”’+s+
“ ’ AND status=’cur’ ”};
sql.execute(s0 )
Figure 3: An example program
Figure 3 illustrates a program that will serve as the run-
ning example throughout this section. The program takes an
integer n and a string s as input, and depending on whether
n (which could be a check-box in a form) is 0 or not, forms a
dynamically generated query s0. Note that the query struc-
tures generated in the two branches of the program are dif-
ferent. The input determines the control path taken by the
program, which in turn determines the structure of the query
generated by the program.
3.1 SQL injection deﬁned
Let us assume a standard syntax for SQL queries, and deﬁne
two queries q and q′ to be equivalent (denoted q ≈ q′) if the
parse structures of the two queries is the same.
In other
words, two queries are equivalent if the parse trees of q and
q′ are isomorphic.
Let
P
I
be
a
inputs
program with
=
hIn 1, . . . In p, Is 1, . . . Is qi. An input valuation is a function v
that maps each In j to some integer and maps each Is j to
some string. Let IV denote the set of all input valuations.
For any input valuation v, the program P takes a unique
control path Runv (which can be ﬁnite, or inﬁnite if P
doesn’t halt). We will consider only halting runs, and hence
Runv will end with the instruction sql.execute(s0). Note
that the path Runv, and hence the structure of the query
s0, could depend on the input valuation v (e.g., due to
conditionals on input variables as in Fig. 3).
Intuitively, the input valuations are partitioned into two
parts: the set of valid inputs V which are benign, and the
complement V of invalid inputs, which include all SQL in-
jection attacks. A deﬁnition of SQL injection essentially
deﬁnes this partition.
The primary principles on which our deﬁnition of SQL
injection is based on are the following:
• (P1) the structure of the query on any valid valuation
v is determined solely by the control path the program
takes on input v.
• (P2) an input valuation is invalid iﬀ it generates a
query structure diﬀerent from the structure determined
by its control path.
The principle (P1) holds for most practical programs that
we have come across as well as any natural program we
tried to write. An application, such as the one in Figure 3,
typically will generate diﬀerent query structures depending
on the input (the input value of the variable n, in this case).
However, these query structures are generated diﬀerentially
using conditional clauses that check certain values in the
input (typically check-boxes in Web application input), as in
in Figure 1. As shown in our comparison studies in Section 6,
(P1) is actually a more general principle than the underlying
ideas suggested in earlier works [12, 24].
Let v be an input and π = Runv be the path the program
exercises on it. By (P1), we know that there is a unique
query structure associated with π.
(P2) says that every
invalid input disagrees with this associated query structure.
As mentioned in the earlier section, PREPARE statements are
based on (P2). Moreover, (P2) is a well-agreed principle in
other works on detecting SQL injection [9, 24]. Given the
above principles, we can deﬁne SQL injection.
Let us ﬁrst assume that we have a valid representation
function VR : IV → V , which for any input valuation v, as-
sociates a valid valuation v′ that exercises the same control
path as v does, i.e., if VR(v) = v′, then Runv = Runv′ . In-
tuitively, the range of VR is a set of candidate inputs that are
benign and exercise all feasible control paths in the program.
This function may not even exist and is hard to statically or
dynamically determine on real programs; we will circumvent
the construction of this function in the ﬁnal scheme.
Now we can easily deﬁne when an input v is invalid: v is
invalid iﬀ the structure computed by the program on v is
diﬀerent from the one computed on VR(v).
Definition 1. Let P be a program and VR : IV → V be
the associated valid-representation function. An input valu-
ation v for P is an SQL-injection attack if the structure of
the query q that P computes on v is diﬀerent from that of
the query q′ that P computes on VR(v) (i.e., q 6≈ q′).
Turning back to our example in Fig. 3, the input v : hn←
0; s ← “Jim ′ OR 1 = 1 − −′′i is an SQL-injection attack
since it generates a query whose structure is:
SELECT ? FROM ? WHERE ?=?
OR ?=?
while its corresponding candidate input VR(v) = v1 : hn←
0; s←“John”i exercises the same control path and generates
a diﬀerent query structure:
SELECT ? FROM ? WHERE ?=?
Alternate deﬁnition using symbolic expressions
Let us now reformulate the above deﬁnition of SQL injection
in terms that explicitly capture the symbolic expression for
the query at the end of the run Runv. Intuitively, on an in-
put valuation v, the program exercises a path that consists
of a set of assignments to variables. The symbolic expression
for a variable summarizes the eﬀect of all these assignments
using a single expression and is solely over the input vari-
ables hIn1, . . . In p, Is 1, . . . Is qi.
For example, consider the input v : hn← 0 and s← “Jim’
OR 1=1- -” i for the program in Fig 3. This input exercises
Path 1, and the SELECT statement is the only statement along
this path. The symbolic expression for the query string s0
on this input at the point of query is Symπ(s0):
“SELECT * FROM employdb WHERE name=’ ”+s+“ ’ ”
Definition 2
(Symbolic expressions). Let U be a
set of integer and string variables, and let π be a sequence of
assignments involving only variables in U . Then the sym-
bolic expression after π for any integer variable n ∈ V is an
arithmetic expression, denoted Symπ(n), and the symbolic
expression for a string variable s ∈ V is a string expression,
denoted Symπ(s). These expressions are deﬁned inductively
over the length of π as follows:
• If π = ǫ (i.e., for the empty sequence),
Symǫ(n) = n if n ∈ I
= 0
Symǫ(s) = s
= ǫ
otherwise
if s ∈ I
otherwise
• If π = π ′.(n′ := ae(t1, . . . , tk)), then
Symπ(n) = Symπ′ (n), for every n ∈ U , n 6= n′
Symπ(n′) = ae(Symπ′(t1), . . . , Symπ′(tk))
Symπ(s)
= Symπ′ (s), for every s ∈ U .
• If π = π ′.(s′ := se(t1, . . . , tk)), then
Symπ(n) = Symπ′ (n), for every n ∈ U
Symπ(s′) = se(Symπ′(t1), . . . , Symπ′ (tk))
Symπ(s) = Symπ′ (s), for every s ∈ U , s 6= s′.
For an input valuation v, let πv denote the set of assign-
ments that occur along the control path Runv that v in-
duces, i.e., πv is the set of statements of the form n := ae
or s := se executed by P on input valuation v. Then the
symbolic expression for the query s0 on v is deﬁned to be
Symπv (s0).
Observe that for any program P and input valuation v, the
value of any variable x computed on v is Symπv (x). That
is, the value of any variable can be obtained by substituting
the values of the input variables in the symbolic expression
for that variable.
Note that if v and v′ induce the same run, (i.e., Runv =
Runv′ ), then πv = πv′ , and hence the symbolic expression
for the query computed for v is precisely the same as that
computed for v′.
We can hence reformulate SQL injection as in Def 1 pre-
cisely as:
Definition 3. Let P be a program and VR : IV → V be
the associated valid-representation function. An input val-
uation v for P is an SQL-injection attack if the symbolic
expression for the query, exp = Symπv (s0) when evaluated
on v has a diﬀerent query structure than when evaluated on
VR(v) (i.e., exp(v) 6≈ exp(VR(v))).
Consider the benign candidate input: v1 : hn← 0 and s←
“John”i corresponding to the input v : hn← 0 and s← “Jim’
OR 1=1- -” i for the program in Fig 3 as they exercise the
same path (Path 1). The symbolic expression for s0 on this
valid input at the point of query is Symπ(s0):
“SELECT * FROM employdb WHERE name=’ ”+s+“ ’ ”
Note that the conditionals that are checked along the control
path are ignored in this symbolic expression. Substituting
any input string for s tells us exactly the query computed by
the program along this control path. Consequently, we infer
that the input v is an SQL-injection attack since it follows
the same path as the valid input above, but the structure
of the query obtained by substituting s ← “John” in the
symbolic expression is diﬀerent from that obtained by sub-
stituting s← “Jim’ OR 1=1- -”.
Observe that the solution presented by the above deﬁni-
tion is hard to implement. Given an input valuation v, we
can execute the program P on it, extract the path followed
by it, and compute the symbolic expression along v. Now if
we knew another valuation v′ that exercised the same control
path as v does, then we can evaluate the symbolic expres-
sion on v and v′, and check whether the query structures
are the same. However, it is very hard to ﬁnd a valid input
valuation that exercises the same path as v does.
Approximating the SQL injection problem
The problem of ﬁnding for every input valuation v, a cor-
responding valid valuation that exercises the same path as
v does (i.e., ﬁnding the function VR) is a hard problem.
We now argue that a simple approximation of the above
provides an eﬀective solution that works remarkably well in
practice.
We propose to simply drop the requirement that v′ exer-
cises the same control path as v. Instead, we deﬁne VR(v)
to be the valuation vc that maps every integer variable to
1 and every string variable s to av(s), where ai denotes a