### Permissions and App Operations

When an app requests permissions, these permissions are granted to the app without affecting the permissions of other apps. This ensures that "stateful" permission objects remain unchanged.

#### Uninstallation
The uninstall operation removes an existing app and its custom permissions from the device. It also readjusts the permissions granted to other apps if there is a change in the set of custom permissions. To achieve this, the `grantPermissions` function is executed for all apps on the device to reassign permissions and ensure that apps do not retain the custom permissions of the removed app. This behavior was introduced by Google in response to previous bug reports related to issues with custom permissions.

**Alloy Model: Uninstall Operation**
```alloy
pred uninstall[t, t’ : Time, app : Application] {
  // Precondition: The app must be installed on the device
  app in Device.apps.t
  
  // Remove the app from the list of installed apps
  Device.apps.t’ = Device.apps.t - app
  
  // Remove custom permissions defined by the app
  Device.customPerms.t’ = Device.customPerms.t - app.declaredPerms.t
  
  // Reassign permissions for all other apps
  all a : Application - app | grantPermissions[a, t, t’]
  
  // Adjust permissions in permission groups
  all pg : Device.builtinPermGroups, p : Permission |
    (p in pg.perms.t and p not in app.declaredPerms.t’) => p in pg.perms.t’
    else p not in pg.perms.t’
}
```

#### Update
The update operation is necessary to demonstrate the Custom Permission Upgrade vulnerability. If a custom permission defined by the app is removed during the update, the `grantPermissions` function is invoked for all other apps on the device to revoke this permission. Additionally, `grantPermissions` is executed for the updated app to readjust its granted permissions, regardless of any changes in the set of permissions. Permission groups are also adjusted to reflect the removal or addition of permissions.

**Alloy Model: Update Operation**
```alloy
pred update[t, t’ : Time, app : Application] {
  // Precondition: The app must be installed on the device
  app in Device.apps.t
  
  // The list of installed apps remains the same
  Device.apps.t’ = Device.apps.t
  
  // Fix custom permissions on the device
  Device.customPerms.t’ = Device.customPerms.t - app.declaredPerms.t + app.declaredPerms.t’
  
  // Update all other apps if a permission is removed
  if anyPermissionRemoved[t, t’, app] then
    updatePermissions[Application - app, t, t’]
  else
    all a : Application - app | a.permissionsState.t’ = a.permissionsState.t
  
  // Regrant permissions for the current app
  grantPermissions[app, t, t’]
  
  // Adjust permission groups
  adjustPermissionGroups[app, t, t’]
}

pred updatePermissions[apps : set Application, t, t’ : Time] {
  all app : apps | grantPermissions[app, t, t’]
}
```

### Correctness of Cusper

To verify the correctness of the Cusper model, we first compile a set of fundamental properties that must be satisfied by the model under all conditions. We then use Alloy assertions to check that the model behaves as expected with respect to these properties.

All security properties that must be satisfied by the original Android permission model should also be satisfied by Cusper. Our focus is on the properties that were violated by the original model, leading to new classes of vulnerabilities. These properties are:
1. Dangerous runtime permissions should never be granted without user interaction.
2. There should never be unauthorized access to application components.

**Alloy Assertions: Security Properties**
- **Property 1**: A dangerous permission should only be granted with the user's approval when the app’s target API level is 23 or higher.
- **Property 2**: An app cannot access another app’s components unless it has the right permission. For example, if an app component is protected by a signature custom permission, only applications with the same signature can access it.

We built Alloy assertions for these properties and showed that the original model does not satisfy them, as the Alloy analyzer produced counterexamples. However, when the permission model is augmented to describe Cusper, all security properties are always satisfied, formally verifying the correctness of our design.

### System Evaluation

In the previous section, we verified the correctness of the formal model of Cusper, providing confidence in our design decisions. Next, we empirically evaluate the practicality of Cusper’s implementation on Android.

#### Effectiveness
To evaluate the effectiveness of Cusper, we tested the two attacks described in Section IV on Cusper-augmented Android and confirmed that both attacks fail:
1. **Custom Permission Upgrade Attack**: The attack no longer succeeds, and the user is correctly consulted to grant the permission when a permission declaration changes from a normal protection level to dangerous.
2. **Confused Deputy Attack**: Using real-world apps like Skype and CareZone, we verified that the attack can no longer succeed while preserving the utility of benign third-party and system apps.

#### Efficiency
We evaluated the performance of Cusper with respect to the following operations:
- App installation
- App uninstallation
- Runtime (dangerous) permission granting
- Permission enforcement

**App Installation and Uninstallation**
- We used the Android Debug Bridge (ADB) to install and uninstall an app 100 times. The app declares a custom permission with a dangerous protection level and uses a service protected by that permission.
- We instrumented the `installPackageAsUser()` method in the `PackageManagerService` class to measure the start and end times of the installation process.
- For uninstallation, we instrumented the `deletePackage()` and `deletePackageX()` methods to measure the start and end times.

**Runtime Permission Granting**
- We used an app that requests a custom permission previously defined in the system. The system pops up a dialog box asking the user to grant or deny the permission request.
- We automated this process and ran the experiment 100 times, excluding the time between the display and removal of the dialog box.

**Permission Enforcement**
- We evaluated the performance of permission enforcement for accessing permission-protected app components (activity, service, broadcast receiver, and content provider).

**Results**
- Figures 1a, 1b, and 1c show that Cusper does not incur any significant overhead during app installation, uninstallation, and runtime permission granting.
- Figure 2 shows that Cusper incurs negligible overhead for all types of component invocation operations that require permission checks.

### Related Work

Previous work has investigated Android permissions and IPC security from various perspectives:
- **IPC Security on Android**: Studies have shown ways of exploiting IPC to gain unauthorized access to resources [26, 23].
- **Analysis of Android Permissions**: Research has focused on the evolution of permissions across Android versions and tools to detect least privilege violations [31, 25, 20, 21, 29].
- **Android Runtime Permissions**: Early work highlighted the need for revocable, ask-on-first-use type permissions, supported by user studies [25, 33, 24, 22].
- **Android Custom Permissions**: Limited work has been done specifically on custom permissions, with some studies identifying issues and proposing fixes [9, 30, 28].

### Conclusion

In this work, we identified design flaws in the Android runtime permission model that can lead to privilege escalation and unauthorized access. We proposed Cusper, a defense mechanism that provides separation of trust between system and custom permissions and introduces an internal naming convention for custom permissions. We constructed a formal model using Alloy to prove the existence of vulnerabilities and showed that Cusper satisfies the fundamental security properties. Our evaluation on Android demonstrates that Cusper effectively fixes the vulnerabilities with minimal overhead.

### Acknowledgments

This work was supported in part by NSF CNS grants 15-13939 and 13-30491. The views expressed are those of the authors only.

### Implementation of Cusper in Alloy

**New Permission Representation**
```alloy
sig Permission {
  name : PermName,
  protectionLevel : ProtectionLevel,
  sourcePackage : PackageName,
  isCustomPermission : Bool, // New field
  permGroup : lone PermGroupName,
  sourceId : AppSignature // New field for Cusper
}
```

**Component Invocation with Cusper**
```alloy
// Example code for component invocation with Cusper
// (This is a placeholder and should be replaced with actual implementation)
```

This optimized text provides a clear, coherent, and professional description of the Cusper system, its implementation, and its evaluation.