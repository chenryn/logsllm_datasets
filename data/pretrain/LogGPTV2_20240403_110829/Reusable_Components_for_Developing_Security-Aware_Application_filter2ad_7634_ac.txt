### Components
The **ProxyGenerator** component is designed to be aware of existing objects and can create secure object wrappers through introspection. In Java, a ready-to-use component is available for this proxy generator. In other environments, this component must be created using the language's runtime information.

### Object Identification
Objects within the framework are identified by a unique ID, which is computed from the object’s fully-qualified class name and an instance identifier. The prefixed class name facilitates easier lookup and administration within data storages. The algorithm for computing the object’s ID is adaptable according to specific needs.

### 3.3.3. Authorizations
The **Authorization** component manages the type of access rights to a resource. Authorizations are logically separated from the access control model to enhance flexibility. They are implemented by business application developers and have a defined meaning for a given secure object. Each authorization component includes a `checkAccess` method, which is invoked during access validation. The framework provides specialized components for positive (permissions) and negative (prohibitions) authorizations. The choice between these types depends on the closure assumption maintained by the access control model.

Authorizations can be defined at the object level or for specific methods of an object. Developers must account for the different meanings of a certain authorization. For example, an execute permission at the object level allows the invocation of all methods, while at the method level, it only permits the execution of a specific method. Some authorizations are applicable only at the object level or method level.

### 3.3.4. Constraints
The **Constraint** component allows for flexible restriction of authorizations within the system. Some constraints are specific to particular access control models (e.g., separation-of-duty), influencing only actions and tasks of the model and implemented by the model provider. Other constraints are independent of the active access control model and affect the entire application, requiring definition and implementation by the framework architect. Examples include location constraints (e.g., logins allowed only from specific IP addresses) and time constraints (e.g., logins allowed from 8 AM to 5 PM).

Similar to the authorization component, the constraint component offers a `checkAccess` method to evaluate access.

### 3.4. Data Provider Components
**Data providers** facilitate interoperability with underlying backend systems. Each infrastructure component (subject, secure object, authorization, and constraint) requires a specific data provider capable of reading and writing to persistent storage. A **security data provider** manages the framework’s configuration and the relationship between an application and its specific data providers. This security data provider interacts with an XML-based storage, which points to various other data providers that communicate with different object storages (e.g., LDAP, database).

Each security component has its own data provider, allowing connections to different systems (e.g., users from the operating system and objects in a database). Data providers cater to the different needs of the security model (e.g., a DAC model needs users, while an RBAC model needs users and roles). Different data providers can be specified for different models. Generally, each model must reference a subject data provider, an object data provider, an authorization data provider, and a constraint data provider, as well as the authorization base data provider, which manages authorization statements in the form of subject, object, authorization, and constraint tuples.

If a tuple in the authorization base cannot be resolved due to missing entities, the tuple is removed, and an auditing message is generated.

### 4. Realization Issues
We now discuss the realization issues encountered when implementing the framework. Currently, GAMMA is available as a beta release implemented in Java. We plan to implement the platform and architecture-independent design within the .NET framework in the future.

### 4.1. Canonical Access Control Mechanism
To provide generic access controls, a highly flexible enforcement mechanism is required. The basic assumption is that access controls can be stated in terms of subjects accessing protected objects. Specific access control models must implement the semantics of their respective models. Additionally, access control models can use specific authorization conditions (e.g., separation of duty) or general authorization conditions like time or location constraints.

Figure 6 illustrates the canonical access control mechanism implemented in GAMMA.

### Access Control Process
1. **Request Reception**: An authenticated subject requests a certain operation on a protected object, mediated by the security manager.
2. **Model Search**: The request is passed to all active access control models in a specified order. Each model searches the authorization base for a matching subject/object combination.
3. **Authorization Check**: Matching authorization rules are checked using the `checkAccess` method.
4. **Constraint Evaluation**: If additional constraints are defined, they are evaluated using the `checkAccess` method of the specific constraint.
5. **Result Reporting**: The model reports a positive (access granted) or negative (access denied) result based on the closure assumption.
6. **Final Decision**: The result is returned to the security manager via the access controller, which grants or denies access to the requested object.

### Conflict Resolution
Conflicts may arise, requiring each model to have a conflict resolution strategy. We propose and implement a strategy where specific rules (assigned to an object’s method) take precedence over general ones (defined on object or class level), prohibitions over permissions, and any rule over the closure assumption. For example, a bank secretary may be generally prohibited from accessing individual bank accounts but specifically allowed to retrieve the total amount of money stored in a certain account for statistical measurements.

### Current Implementations
Currently, a traditional DAC approach and an RBAC approach according to NIST standards have been realized. We plan to implement multi-level approaches to evaluate the applicability of our canonical access control mechanism.

### 4.2. Multiple Concurrent Access Control Models
When using multiple access control models, different models may have varying meanings regarding access privileges, necessitating a conflict resolution strategy. Access control models are specified in a framework configuration file, and the sequence defines their dominance.

During access checks, the access controller contacts the active models in order. Each model can return strong or weak results. A strong result is mandatory and accepted by the access controller, while a weak result indicates that the model cannot make a proper choice and returns a proposal based on its closure assumption. The access controller continues to contact the next active model until a strong result is obtained or all models return weak results, in which case the first weak result is accepted.

This mechanism ensures a result is found and respects the dominance order of the active access control models.