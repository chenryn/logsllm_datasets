# 七、使用第三方工具保护 Docker
在本章中，让我们看一下使用第三方工具保护 Docker。这些工具不是 Docker 生态系统的一部分，您可以使用它们来帮助保护您的系统。我们将研究以下三个项目:
*   **流量授权**:这允许入站和出站流量由令牌代理验证，以确保服务之间的流量是安全的。
*   **召唤**:召唤是一个命令行工具，可以读取`secrets.yml`格式的文件，并将秘密作为环境变量注入任何进程。一旦这个过程结束，秘密就消失了。
*   **svert 和 SELinux**:svert 是一个社区项目，集成了 **强制访问控制** ( **MAC** )安全性和基于 Linux 的虚拟化(**基于内核的虚拟机** ( **KVM** )、lguest 等等)。
然后，我们将添加一些额外的第三方工具的额外材料，这些工具非常有用和强大，值得作为有用的第三方工具获得一些认可。这些工具包括**Docker**、**Docker**、**船厂**和**Docker**。不用多说，让我们跳进去，开始我们的道路，以最安全的环境，我们可以获得。
# 第三方工具
那么，我们会重点关注哪些第三方工具呢？从前面的介绍中，您了解到我们将特别关注三种工具。这些将是流量授权、召唤和带有 SELinux 的病毒。这三个工具在不同方面都有帮助，可以用来执行不同的事情。我们将了解它们之间的差异，并帮助您确定实施哪些差异。您可以决定是否要全部实现它们，只实现其中的一个或两个，或者您可能觉得这些都不适合您当前的环境。然而，最好知道外面有什么，以防您的需求发生变化，并且您的 Docker 环境的整体架构会随着时间而变化。
## 交通授权
流量授权可以用来调节服务之间的 HTTP/HTTPS 流量。这涉及到转发器、看门人和令牌代理。这允许令牌代理验证入站和出站流量，以便确保服务之间的流量是安全的。每个容器运行一个网关守护设备，用于拦截所有 HTTP/HTTPS 入站流量，并通过授权头中的令牌验证其真实性。转发器也在每个容器上运行，像看门人一样，这也拦截流量；但是，它不会拦截入站流量，而是拦截出站流量，并将令牌放在授权头上。这些令牌是令牌代理发出的。还可以缓存这些令牌，以节省时间并最大限度地减少延迟的影响。让我们将其分解为一系列步骤，如下所示:
1.  服务甲向服务乙发起请求
2.  服务 A 上的转发器将向令牌代理进行身份验证。
3.  令牌代理将发布服务 A 将应用于授权头的令牌，并将请求转发给服务 b
4.  服务 B 的看门人将拦截该请求，并根据令牌代理验证授权头。
5.  一旦验证了授权头，就将其转发给服务 b
如您所见，这将对入站和出站请求应用额外的授权。正如我们将在下一节中看到的，您还可以使用召唤和流量授权来使用共享的秘密，这些秘密一旦被使用就可以使用，但是一旦应用完成了它的操作就消失了。
有关流量授权和 Docker 的更多信息，请访问[https://blog . invite . net/secure-Docker-with-secrets-dynamic-Traffic-Authorization](https://blog.conjur.net/securing-docker-with-secrets-and-dynamic-traffic-authorization)。
## 召唤
召唤是一个命令行工具，用于帮助传递秘密或你不想暴露的东西，比如密码或环境变量，然后这些秘密在退出进程时被处理掉。这很好，因为一旦秘密被使用并且进程退出，秘密就不再存在了。这意味着秘密不会一直存在，直到被手动删除或被攻击者发现用于恶意用途。让我们看看如何利用召唤。
call 通常使用三个文件:一个`secrets.yml`文件，用于执行动作或任务的脚本，以及 Dockerfile。正如您之前所了解的，或者基于您当前的 Docker 经验，Dockerfile 是帮助构建容器的基础，并提供了如何设置容器、安装什么、配置什么等说明。
使用召唤的一个很好的例子是能够将您的 AWS 凭证部署到一个容器中。为了利用 AWS 命令行界面，您需要一些应该保密的关键信息。这两条信息是您的 **AWS 访问密钥标识**和 **AWS 秘密访问密钥**。有了这两条信息，你就可以操纵某人的 AWS 账户，并在该账户内执行操作。让我们看一下其中一个文件的内容，`secrets.yml`文件:
```
secrets.yml
AWS_ACCESS_KEY_ID: !var $env/aws_access_key_id
AWS_SECRET_ACCESS_KEY: !var $env/aws_secret_access_key
```
`-D`选项用于替换值，而`$env`是替换变量的一个例子，因此，选项可以互换。
在前面的内容中，我们可以看到我们希望将这两个值传递到我们的应用中。有了这个文件、您想要部署的脚本文件和 Dockerfile，您现在就可以构建应用了。
我们只需在包含三个文件的文件夹中使用`docker build`命令:
```
$ docker build -t scottpgallagher/aws-deploy .
```
接下来，我们需要安装召唤，这可以通过一个简单的`curl`命令来完成，如下所示:
```
$ curl -sSL https://raw.githubusercontent.com/conjurinc/summon/master/install.sh | bash
```
现在我们已经安装了召唤，我们需要用召唤运行容器，并传递我们的秘密值(注意，这将只在 OS X 工作):
```
$ security add-generic-password -s "summon" -a "aws_access_key_id" -w "ACESS_KEY_ID"
$ security add-generic-password -s "summon" -a "aws_secret_access_key" -w "SECRET_ACCESS_KEY"
```
现在，我们已经准备好使用 call 运行 Docker，以便将这些凭证传递给容器:
```
$ summon -p ring.py docker run —env-file @ENVFILE aws-deploy
```
您也可以使用以下`cat`命令查看您传递的值:
```
$ summon -p ring.py cat @SUMMONENVFILE
aws_access_key_id=ACESS_KEY_ID
aws_secret_access_key=SECRET_ACCESS_KEY
```
`@SUMMONENVFILE`是一个内存映射文件，包含来自`secrets.yml`文件的值。
欲了解更多信息和查看利用召唤的其他选项，请访问[https://conjurinc.github.io/summon/#examples](https://conjurinc.github.io/summon/#examples)。
## 病毒和 SELinux
sVirt 是 SELinux 实现的一部分，但它通常被关闭，因为大多数人认为它是一个路障。唯一的拦路虎应该是学习 sVirt 和 SELinux。
sVirt 是一个开源的社区项目，为基于 Linux 的虚拟化实现 MAC 安全。您想要实现 sVirt 的一个原因是为了提高安全性，并增强系统抵御虚拟机管理程序中可能存在的任何错误的能力。这将有助于消除任何可能针对虚拟机或主机的攻击媒介。
请记住，Docker 主机上的所有容器共享 Docker 主机上运行的 Linux 内核的使用。如果主机上的这个 Linux 内核存在漏洞，那么在这个 Docker 主机上运行的所有容器都有可能很容易受到攻击。如果您实现了 sVirt，并且一个容器被破坏了，那么这个破坏不可能到达您的 Docker 主机，然后到达其他 Docker 容器。
sVirt 使用标签的方式与 SELinux 相同。下表列出了这些标签及其说明:
| 
类型
 | 
SELinux 上下文
 | 
描述