title:Efficient State Space Generation of GSPNs using Decision Diagrams
author:Andrew S. Miner
Efﬁcient state space generation of GSPNs using decision diagrams
Andrew S. Miner
Department of Computer Science, Iowa State University
E-mail: PI:EMAIL
Abstract
Implicit techniques for representing and generating the
reachability set of a high-level model have become quite ef-
ﬁcient. However, such techniques are usually restricted to
models whose events have equal priority. Models contain-
ing events with differing classes of priority or complex pri-
ority structure, in particular models with immediate events,
have thus been required to use explicit reachability set gen-
eration techniques.
In this paper, we present an efﬁcient
implicit technique, based on multi-valued decision diagram
representations for sets of states and matrix diagram repre-
sentations for next-state functions, that can handle models
with complex priority structure. If the model contains imme-
diate events, the vanishing states can be eliminated either
during generation, by manipulating the matrix diagram, or
after generation, by manipulating the multi-valued decision
diagram. We apply both techniques to several models and
give detailed results.
1. Introduction
The generation of the state space, or reachability set,
for a discrete-state model such as a stochastic Petri net
(SPN), generalized stochastic Petri net (GSPN) or queu-
ing network, is a necessary step in many types of stud-
ies. Formal veriﬁcation techniques, such as model check-
ing, may require generation of the reachability set to verify
that the reachable states all satisfy some desirable property,
such as the absence of a deadlock. Performance evaluation,
based on Markov chain analysis, often uses the reachability
set of a high-level model while constructing its underlying
Markov chain and while computing reward measures once
the Markov chain has been analyzed. In either case, gener-
ation of the reachability set is often difﬁcult in practice due
to the state explosion problem: the reachability set can be
extremely large, even for a “small” model.
Traditional approaches to generate the reachability set S
are explicit: reachable states are examined and generated
one at a time, using an efﬁcient data structure to store the
discovered states [10, 19]. Determination of the states that
can be reached from the current state is done by examining
the high-level model. This allows for maximum ﬂexibility:
the behavior of events can depend on the system state in
complex ways.
Work has also been done on explicit techniques that
exploit structured high-level representations, such as su-
perposed GSPNs and stochastic automata networks. For
these systems, the next-state function N , which speciﬁes
the states that can be reached from the current state in a sin-
gle step, can be represented in terms of Kronecker products
and sums of several small matrices [7, 31]. Explicit data
structures, based on the Kronecker representation, can be
used to efﬁciently describe the reachability set [6, 23, 22].
Given current technology, explicit techniques are limited to
about 108 states at best.
Recent advancements in reachability set generation
techniques have been quite
based instead on implicit
promising. Unlike explicit techniques, implicit techniques
do not necessarily require space or time proportional to
the size of the reachability set. This allows implicit tech-
niques to handle reachability set sizes of 1020 states or
more. The use of decision diagrams, binary decision dia-
grams (BDDs) [5] in particular, has been embraced by many
researchers following the work of Clarke et al. [8, 9]. Pastor
et al. [29, 30] developed BDD-based techniques for gener-
ating the reachability set for safe Petri nets. The reachabil-
ity set and the next-state function are represented implicitly
using BDDs. The authors suggest that non-safe nets can
be handled by encoding the integer number of tokens in a
place using several binary variables, although this signiﬁ-
cantly complicates the next-state function.
Alternate approaches to handle non-safe Petri nets have
been developed by Ciardo et al. [14, 15, 27]. These implicit
approaches use Kronecker representations for the next-
state function, and multi-valued decision diagrams (MDDs)
[21, 32] to represent the reachability set, allowing state vari-
ables to be bounded integers. To use the Kronecker repre-
sentation, a model must be partitioned so that each event’s
contribution to the next-state function can be expressed as
the cross-product of “local” functions. Separation of the
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
events according to their affected submodels allows for an
efﬁcient iteration strategy called saturation [15], which can
dramatically reduce the time and memory required to gen-
erate the reachability set.
A substantial limitation of previous implicit techniques
for reachability set generation for Petri nets is that all tran-
sitions are assumed to have equal priority. This implies
that all transitions must be timed, since immediate transi-
tions have priority over timed transitions. Immediate tran-
sitions can be handled only if they are completely local to a
submodel: local immediate transitions are removed and the
submodel is re-deﬁned appropriately. The focus and contri-
bution of this paper is an implicit technique that can han-
dle transitions with complex priority structure, and thus can
handle immediate transitions in general.
Once the reachability set has been generated, it can be
used to verify properties of the system.
If we are inter-
ested in performance evaluation, the reachability set can be
used to generate the underlying Markov chain of the model.
With current technology, Markov chains with perhaps 107
to 108 states can be analyzed exactly. This corresponds to
the sizes of reachability sets that can be generated with ex-
plicit techniques. However, the ability to represent large
reachability sets and Markov chains exactly using implicit
techniques opens up intriguing possibilities for approxima-
tion techniques [28]. Thus, implicit reachability set genera-
tion algorithms are important for both model checking and
performance evaluation.
The remainder of the paper is organized as follows. Ad-
ditional background information about MDDs is given in
Section 2. In Section 3 we propose an alternate representa-
tion of the next-state functions, based on matrix diagrams
[18, 25, 26]. We then show in Section 4 how the next-state
functions can be manipulated to handle events with differ-
ent priorities, including immediate events. In Section 5 we
describe two methods for eliminating vanishing states to ob-
tain the tangible states only: elimination “on-the-ﬂy” and
elimination after generation. Experimental results, based on
our implementation in SMART [16], are given in Section 6.
Finally, Section 7 concludes the work.
2. Background and related work
The reachability set
is formally deﬁned as follows.
Given a ﬁnite set of possible states ˆS, an initial state s ∈ ˆS
(or a set of initial states), and a next-state function N : ˆS →
2 ˆS
which describes the (possibly empty) set of states that
may be reached from a given state in a single step, the reach-
ability set S is the smallest set containing the initial state(s)
that is closed over N . A common technique to determine S
is to compute the sequence Sn = Sn−1 ∪ N (Sn−1), where
Sn is the set of states reachable from the initial state in n
steps or fewer, with S0 = {s}. Since the set ˆS is ﬁnite and
Sn ⊆ Sn+1 ⊆ ˆS for all n ∈ IN , the sequence will even-
tually converge with limn→∞ Sn = S. Note that for this
paper, we consider ﬁnite reachability sets only.
The practical goal of any reachability set generation al-
gorithm is to efﬁciently represent ˆS and N , while allowing
for efﬁcient computation of S. In the case of SPNs, the set
ˆS can be implicitly speciﬁed by placing an upper bound on
the number of tokens allowed in each place. Another ap-
proach is to decompose the model into K submodels, for
some K ∈ IN . This is done for SPNs by partitioning the set
of places P. The ﬁnest possible decomposition is obtained
when each submodel consists of a single place, K = |P|;
we can also group places together so that submodels con-
tain multiple places. Given a decomposition, the set ˆS can
be written as ˆS = SK × ··· × S1, where Sk is the set of
possible substates for submodel k. A model state can thus
be expressed as a K−tuple (sK, . . . , s1) with sk ∈ Sk.
While the set S is assumed to be ﬁnite, it is often ex-
tremely large. One way to combat this problem is through
the use of an efﬁcient data structure.
In particular, a set
of states can be represented using a multi-valued decision
diagram (MDD) [21, 32]. If the model is composed of K
submodels, then an MDD representing a set of states is a
directed, acyclic graph consisting of terminal nodes zero
and one, and non-terminal nodes, each corresponding to a
submodel. We say a non-terminal node is a level-k node
if it corresponds to submodel k, and we say that terminal
nodes are level-0 nodes. A level-k non-terminal node con-
tains |Sk| downward pointers, one for each substate in Sk.
A state is contained in the set represented by the MDD if
and only if the path from the root node, following the point-
ers corresponding to the appropriate substates, reaches ter-
minal node one. We say an MDD is ordered if all pointers
from a level-k node are either to a level-(k − 1) node or to
terminal node zero, and is quasi-reduced if it does not con-
tain two non-terminal nodes whose corresponding pointers
are equal. For the remainder of the paper, we assume all
MDDs are ordered and quasi-reduced. An example MDD
and the set of states it encodes is shown in Figure 1.
For traditional reachability set generation, the function
N is speciﬁed by the high-level model. Many types of for-
malisms, including SPNs, specify N in terms of distinct
events:
(cid:1)
N (s) =
N e(s)
e∈E
(1)
where E is a ﬁnite set of events. In the case of SPNs, events
correspond to transitions. For implicit techniques, it is usu-
ally assumed that each N e function can be expressed as the
cross-product of local functions [14, 15, 25, 27]:
(sK) × ··· × N e
(2)
: Sk → 2Sk. If this property does not hold for
where N e
some event, we can either re-partition the model so that it
N e(sK, . . . , s1) = N e
1 (s1)
K
k
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
S3 = {0,1,2}
S2 = {0,1,2}
S1 = {0,1}
S = {000, 001,
010, 011,
020, 021,
101, 121,
210, 220}
S
0 1 2
0 1 2
0 1 2
0 1
0 1
Level 3
Level 2
Level 1
Level 3
0 1 2
Level 2
0 1 2
0 1 2
Level 1
0 1
0 1
N (001) = {101}
N (011) = {111}
N (021) = {121}
N (101) = {200, 201}
N (111) = {210, 211}
N (121) = {220, 221}
1
0
Level 0
1
Figure 1. An MDD and its represented states
Figure 2. Representing a next-state function
with a matrix diagram
does hold, or split the event into sub-events such that the
property holds for the sub-events. The function N can thus
be represented by tables for each of the N e
k functions. Note
that this is equivalent to using a Kronecker representation
for the next-state function [6, 22, 23].
3. Representing the next-state function with
matrix diagrams
Matrix diagrams were initially introduced as an alterna-
tive to Kronecker representations for the transition rate ma-
trix [18, 25]. In this paper, we describe a simpliﬁed version
of the Canonical Matrix Diagrams presented in [26]:
the
matrices presented here can only have values zero or one,
and are all the same size.
A matrix diagram is similar to an MDD, except the non-
terminal nodes are matrices of pointers instead of vectors of
pointers. Matrix diagrams consist of two level-0 terminal
nodes, zero and one, and level-k non-terminal nodes, for
k ∈ {1, . . . , K}. Each level-k non-terminal node contains
a |Sk| × |Sk| matrix of pointers to other nodes. We say
a matrix diagram is ordered if the pointers from a level-
k node all point to nodes at levels less than k, and a matrix
diagram is quasi-reduced if no two level-k nodes have equal
matrices.
A matrix diagram represents a boolean matrix of size
ˆS × ˆS, which can encode a next-state function: the non-
zero entries in a given row correspond to the states that
can be reached from that row. We denote a next-state func-
tion in script, as N , and its corresponding matrix diagram
In matrix diagram N,
representation in boldface, as N.
state (jK , . . . , j1) is contained in N (iK, . . . , i1) if the path
from the root node, following pointer [ik, jk] from level k,
reaches terminal node one. An example (quasi-reduced, or-
dered) matrix diagram N and the next-state function N it
represents are shown in Figure 2. For clarity, pointers to
terminal node zero are omitted. Note that several states are
not listed (for instance, N (000)); the next-state function re-
turns the empty set for the states that are not shown.
An important characteristic captured by matrix diagram
structure is the independence of the next-state function from
a given submodel. In this case, the matrix diagram nodes
for that submodel will always be an “identity matrix” with
equal pointers. That is, the pointers along the diagonal will
be equal, and the off-diagonal pointers will be to terminal
node zero. In the example in Figure 2, the next-state func-
tion does not depend on submodel 2. This behavior natu-
rally occurs in the high-level model when an event is inde-
pendent of a submodel (for instance, if a transition is not
connected to any place within a subnet). To exploit this
property, we can deﬁne another reduction rule. We say a
matrix diagram is reduced if it is quasi-reduced and it does
not contain a non-terminal node whose diagonal pointers
are all to the same node and whose non-diagonal pointers
are all to terminal node zero. For the remainder of the
paper, we assume all matrix diagrams are ordered and re-
duced. For example, the matrix diagram shown in Figure 2
would not actually store the nodes for level 2; instead, the
pointers from the level-3 node would jump directly to the
level-1 nodes. Thus, terminal node zero corresponds to an
appropriately-sized square matrix of all zeroes, and termi-
nal node one corresponds to an appropriately-sized identity
matrix.
3.1. Constructing next-state functions
If the next-state function is represented by a function for
each event (as in Equation 1), and the event functions are ex-
pressible as the cross-product of local functions (as in Equa-
tion 2), then the algorithm to construct a matrix diagram Ne
for the next-state function N e is straightforward, and is de-
, . . . ,N e
tailed in Figure 3. Given the local functions N e
1 ,
we can construct a matrix diagram node at level k based on
K
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
if N e