our framework are secure by construction from server-
side XSS and SQL injection vulnerabilities, we con-
ducted an evaluation of the system. First, we demon-
strate that all dynamic content contained in a Document
must be sanitized by an application of the render func-
tion, and that a similar condition holds for dynamically-
generated SQL queries. Then, we provide evidence that
the sanitization functions themselves are correct – that is,
they successfully strip or encode unsafe characters. We
also verify that the prepared statement library prevents
injections, as expected. Finally, to demonstrate the vi-
ability of the framework, an experiment to evaluate the
performance of a web application developed using the
framework is conducted.
5.1 Sanitization function coverage
The goal of the ﬁrst experiment was to justify the claim
that all dynamic content contained in a Document or
query type must be sanitized prior to presentation to the
client that originated the request. To accomplish this, a
static control ﬂow analysis of the framework was per-
formed. Figure 11 presents a control ﬂow graph of the
application server in a simpliﬁed form, where function
calls are sequenced from left to right. Of particular inter-
est is the renderDoc function, which retrieves the appro-
priate document generator given a URL path, executes it
in the call to route, sanitizes it by applying render, and
creates an HTTP response by calling make200. The sani-
tized document is then returned to procRequest, which
writes it to the client. Therefore, the entire process of
converting the document to a byte stream for presentation
to the client is solely due to the recursive render appli-
cation. Similarly, because the only interface exposed to
applications to execute SQL queries are execStmt and
execPrepStmt from within the App monad, queries is-
sued by applications under the framework must be san-
itized either by the framework or the HDBC prepared
statement functions.
Figure 12 displays a subset of
the full control
ﬂow graph depicting an instance of the render func-
tion for the AnchorNode Node instantiation.
For
clarity of presentation, multiple calls to render and
maybeRenderAttr have been collapsed into single
nodes. Recall from Figure 5 that the deﬁnition of
AnchorNode does not contain any bare strings; instead,
each ﬁeld of the type is either itself a composite type,
or an enumeration for which a custom render function
is deﬁned. Since no other string conversion function
is applied in this subgraph, we conclude that all data
contained in an AnchorNode variable must be ﬁltered
through a sanitization function.
The analysis of this single case generalizes to the set of
all types that can comprise a Document or query type. In
total, 163 distinct sanitization function deﬁnitions were
checked to sanitize the contexts shown in Table 1. For
each function, our analysis found that no irreducible type
was concatenated to the document byte stream without
ﬁrst being sanitized.
5.2 Sanitization function correctness
The goal of this experiment is to determine whether the
sanitization functions employed by the framework are
correct (i.e., whether all known sequences of danger-
ous characters are stripped or encoded). To establish
this, we applied a dynamic test-driven approach using the
Figure 11: Simpliﬁed control ﬂow graph for application server.
tizing (X)HTML content, element attributes, and various
URL components.9 An example invariant speciﬁcation
is shown in Figure 13.
propAttrValueSafe :: AttrValue -> Bool
propAttrValueSafe input =
(not $ elem ’’ output) &&
(not $ elem ’&’ $ stripEntities output) &&
(not $ elem ’"’ output) where
output = render input
Figure 13: Simpliﬁed example sanitization function
invariant speciﬁcation. Here, propAttrValueSafe
is a conjunction of predicates, where not $ elem c
output speciﬁes that the character c should not be an
element of the output of render in this context. Since
“&” is used to indicate the beginning of an HTML entity
(e.g., &amp;), the stripEntities function ensures that
ampersands may only appear in this form.
For each of the sanitization functions, we ﬁrst tested
the correctness of the invariants by checking that they
were violated over a set of 100 strings corresponding to
real-world cross-site scripting, command injection, and
other code injection attacks. Then, for each sanitization
function, we generated 1,000,000 test cases of random
strings using the QuickCheck library. In all cases, the
invariants were satisﬁed.
In addition to performing invariant testing on the set of
document sanitization functions, we also applied a sim-
ilar testing process to the sanitization of query types de-
scribed in Section 4.3. Finally, we applied manual invari-
9The 163 functions noted above eventually apply one of these 7
context-speciﬁc sanitization functions for web documents.
Figure 12: Example control ﬂow graph for Render Node
instance.
QuickCheck property testing library [9]. QuickCheck
allows a developer to specify invariants in an embed-
ded language that should hold for a given set of func-
tions. The library then automatically generates a set of
random test cases, and checks that the invariants hold
for each test. In our case, we selected invariants based
upon known examples of XSS [44] and SQL injection
attacks [15].
In addition, we introduced modiﬁcations
of the invariants that account for different popular doc-
ument encodings, since these encodings directly affect
how browser parsers interpret the sequences of bytes that
comprise a document.
Since the coverage of the sanitization functions has
been established by the control ﬂow analysis, we focused
our invariant testing on the low-level functions responsi-
ble for processing string data. In particular, we speciﬁed
invariants for 7 functions that are responsible for sani-
serveAppappCfgPortsocketbindSocketlistennewMVarprocConnsacceptforkIOprocRequestsocketToHandlehSetBufferinghGetContentshandleRequesthPutStrhCloserunRequestParserenderDocreqUrlputgetRouteurlPathappCfgRoutesrouterendermake200execStmtexecPrepStmtrenderrenderNodeconcatMapmaybeRenderAttrquoteAttrant testing on the HDBC prepared statement interface. In
all cases, the invariants on the integrity of the queries and
the database itself held.
5.3 Framework performance
In this experiment, we compared the performance of a
web application developed using our framework to sim-
ilar applications implemented using other frameworks.
In particular, we developed a small e-commerce site
with a product display page, cart display page, and
checkout page under our framework, using the Pylons
framework 0.9.7 [4], and as a Java servlet using Tom-
cat 6.0.18.10 Each application was backed by a SQLite
database containing product information. The applica-
tion servers were hosted on a server running Ubuntu
Server 8.10 with dual Intel Core 2 Duo CPUs, 2 GB
of RAM, and 1000BaseT Ethernet network interfaces.
The httperf [20] web server benchmarking tool was
deployed on a similar server to generate load for each
application.
Figure 14 presents averaged latency and throughput
plots for 8 benchmarking runs for each framework tested.
In each run, the number of concurrent clients issuing re-
quests was varied, and the average response latency in
milliseconds and the aggregate throughput in kilobytes
was recorded.
In this experiment, our framework per-
formed competitively compared to Pylons and Tomcat,
performing somewhat better than Pylons in both latency
and throughput scaling, and vice versa for Tomcat. In
particular, the latency plot shows that our framework
scales signiﬁcantly better with the number of clients than
the Pylons framework. Unfortunately, our framework ex-
hibited approximately a factor of two increase in latency
compared to the Tomcat application. Cost-center proﬁl-
ing revealed that this is mainly due to the overhead of
list-based String operations in Haskell,11 though this
could be ameliorated by rewriting the framework to pre-
fer the lower-overhead ByteString type. Therefore, it
is not unreasonable to assume that web applications de-
veloped using our framework would exhibit acceptable
performance behavior in the real world.
5.4 Discussion
The security properties enforced by this framework are
effective at guaranteeing that applications are not vulner-
able to server-side XSS and SQL injection. There are
limitations to this protection that need to be highlighted,
however, and we discuss these here.
10Pylons is a Python-based framework that is similar in design to
Ruby on Rails, and is used to implement a variety of well-known web
applications (e.g., Reddit (http://reddit.com/)).
11Strings are represented as lists of characters in Haskell – that is,
type String = [Char].
First, web applications can, in some cases, be vulner-
able to client-side XSS injections, or DOM-based XSS,
where the web application can potentially not receive any
portion of such an attack [28]. This can occur when a
client-side script dynamically updates the DOM after the
document has been rendered by the browser with data
controlled by an attacker. In general, XSS attacks stem-
ming from the misbehavior of client-side code within the
browser are not addressed by the framework in its current
form.
Recently, a new type of XSS attack against
the
content-snifﬁng algorithms employed by web browsers
has been demonstrated [5]. In this attack, malicious non-
HTML ﬁles that nevertheless contain HTML fragments
and client-side code are uploaded to a vulnerable web
application. When such a ﬁle is downloaded by a vic-
tim, the content-snifﬁng algorithm employed by the vic-
tim’s browser can potentially interpret the ﬁle as HTML,
executing the client-side code contained therein, result-
ing in an XSS attack. Consequently, our framework im-
plements the set of ﬁle upload ﬁlters recommended by
the authors of [5] to prevent content-snifﬁng XSS. Since,
however, the documents are supplied by users and not
generated by the framework itself, the framework cannot
guarantee that it is immune to such attacks.
Finally, CSS stylesheets and JSON documents can
also serve as vectors for XSS attacks.
In principle,
these documents could be speciﬁed within the frame-
work using the same techniques applied to (X)HTML
documents, along with context-speciﬁc sanitization func-
tions. In the case of CSS stylesheets that are uploaded to
a web application by users, additional sanitization func-
tions could be applied to strip client-side code fragments.
However, the framework in its current form does not ad-
dress these vectors.
6 Related work
An extensive literature exists on the detection of web ap-
plication vulnerabilities. One of the ﬁrst tools to analyze
server-side code for vulnerabilities was WebSSARI [21],
which performs a taint propagation analysis of PHP in
order to identify potential vulnerabilities, for which run-
time guards are inserted. Nguyen-Tuong et al. proposed
a precise taint-based approach to automatically harden-
ing PHP scripts against security vulnerabilities in [39].
Livshits and Lam [33] applied a points-to static analy-
sis to Java-based web applications to identify a number
of security vulnerabilities in both open-source programs
Jovanovic et al. presented
and the Java library itself.
Pixy, a tool that performs ﬂow-sensitive, interprocedural,
and context-sensitive data ﬂow analysis to detect security
vulnerabilities in PHP-based web applications [25]; Pixy
was later enhanced with precise alias analysis to improve
(a)
(b)
Figure 14: Latency and throughput performance for the Haskell, Pylons, and Tomcat-based web applications.
the accuracy of the technique [26]. A precise, sound, and
fully automated technique for detecting modiﬁcations to
the structure of SQL queries was described by Wasser-
mann and Su in [49]. Balzarotti et al. observed that more
complex vulnerabilities in web applications can mani-
fest themselves as interactions between distinct modules
comprising the application, and proposed MiMoSA to
perform multi-module vulnerability analysis of PHP ap-
plications [2]. In [7], Chong et al. presented SIF, a frame-
work for developing Java servlets that enforce legal in-
formation ﬂows speciﬁed by a policy language. A syn-
tactic technique of string masking is proposed by Johns
et al. in [23] in order to prevent code injection attacks in
web applications. Lam et al. described another informa-
tion ﬂow enforcement system using PQL, and addition-
ally propose the use of a model checker to generate test
cases for identiﬁed vulnerabilities [30]. In [1], Balzarotti
et al. applied a combination of static and dynamic anal-
ysis to check the correctness of web application sanitiza-
tion functions. Wassermann and Su applied a combina-
tion of taint-based information ﬂow and string analysis to
enforce effective sanitization policies against cross-site
scripting in [50]. Nadji et al. propose a similar notion
of document structure integrity in [38], using a combi-
nation of web application code randomization and run-
time tracking of untrusted data on both the server and the
browser. Finally, Google’s ctemplate [17], a templating
language for C++, and Django [11], a Python-based web
application framework, include an Auto-Escape feature
that allows for context-speciﬁc sanitization of web doc-
uments, while Microsoft’s LINQ [35] is an approach for
performing language-integrated data set queries in the
.NET framework.
The approach described in this work differs from the
above server-side techniques in several respects. First, an
advantage of several of the above techniques is that they
provide greater generality in their enforcement of secu-
rity policies; in particular, SIF allows for the enforce-
ment of complex information ﬂows and uses some of the
techniques presented in this work. Our framework, on
the other hand, requires neither information ﬂow policy
speciﬁcations or additional static or dynamic analyses to
protect against cross-site scripting or SQL injection vul-
nerabilities. String masking embodies a similar notion of
a separation of code and data for web applications, but is
implemented as a preprocessor for existing web applica-
tions and allows the possibility for both false positives
and false negatives. Django and ctemplate are similar in
spirit to this work in that they apply a similar context-
sensitive sanitization of documents generated from tem-
plate speciﬁcations. In both cases, however, this saniti-
zation is optional and relies upon a separate document
parser, whereas documents in our framework are spec-
iﬁed in the language itself. ctemplate in particular has
an advantage in that it supports limited sanitization of
CSS and JSON documents, though this analysis is not
currently based upon a robust parser. Finally, LINQ pro-
vides a language-based mechanism for dynamically con-
structing parameterized queries on arbitrary data sets, in-
cluding SQL databases, and is therefore similar to the
system proposed in this framework. Use of this interface
is, however, optional and can be bypassed.
In addition to server-side vulnerability analyses, much
work has focused on client-side protection against ma-
licious code injection. The ﬁrst system to implement
client-side protection was due to Kirda et al. In [27],
the authors presented Noxes, a client-side proxy that
uses manual and automatically-generated rules to pre-
vent cross-side scripting attacks. Vogt et al. proposed a
combination of dynamic data tainting and static analysis
to prevent cross-site scripting attacks from successfully
executing within a web browser [47]. BrowserShield,
due to Reis et al., is a system to download signatures for
known cross-site scripting exploits; JavaScript wrappers
 0 100 200 300 400 500 600 700 800 900 4 8 12 16 20 24 28 32Latency (ms)ClientsHaskell frameworkPylons frameworkTomcat framework 0 200 400 600 800 1000 1200 1400 4 8 12 16 20 24 28 32Throughput (KB/s)ClientsHaskell frameworkPylons frameworkTomcat frameworkthat implement signature detection for these attacks are
then installed into the browser [43]. Livshits and Erlings-
son described an approach to cross-site scripting and
RSS attacks by modifying JavaScript frameworks such
as Dojo, Prototype, and AJAX.NET in [32]. BEEP, pre-
sented by Jim et al. in [22], implements a coarse-grained
approach to client-side policy enforcement by specify-
ing both black- and white-lists of scripts. Erlingsson
et al. proposed Mutation-Event Transforms, a technique
for enforcing ﬁner-grained client-side security policies
by intercepting JavaScript calls that would result in po-
tentially malicious modiﬁcations to the DOM [13].
In contrast to the client-side approaches discussed
here, our framework does not require a separate analy-
sis to determine whether cross-site scripting vulnerabil-
ities exist in a web application. In the case of web ap-
plications that include client-side scripts from untrusted
third parties (e.g., mashups), a client-side system such as
BEEP or Mutation-Event Transforms can be considered
a complementary layer of protection to that provided by
our framework.
Several works have studied how the safety of func-
tional languages can be improved. Xu proposed the
use of pre/post-annotations to implement extended static
checking for Haskell in [51]; this work has been ex-
tended in the form of contracts in [52]. Li and Zdancewic
demonstrated how general
information ﬂow policies
could be integrated as an embedded security sublan-
guage in Haskell in [31]. A technique for performing
data ﬂow analysis of lazy higher-order functional pro-
grams using regular sets of trees to approximate program
state is proposed by Jones and Andersen in [24]. Mad-
havapeddy et al. presented a domain-speciﬁc language
for securely specifying various Internet packet proto-
In [16], Finifter et al. describe Joe-E, a