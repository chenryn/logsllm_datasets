# Outsourced Private Set Intersection Using Homomorphic Encryption

**Author: Florian Kerschbaum**

**SAP Research, Karlsruhe, Germany**

**Email: [EMAIL]**

## Abstract
Private set intersection (PSI) allows two parties, a client and a server, to compute the intersection of their respective sets without revealing any additional information. This operation is fundamental, akin to a secure, distributed database join, and has numerous applications, particularly in privacy-preserving law enforcement. In this paper, we introduce a novel protocol that achieves linear complexity, is secure against malicious adversaries without relying on random oracles, and is independent of the client's set size. Additionally, the computation can be outsourced to an oblivious service provider, as in secure cloud computing. Our approach leverages a new construction using Bloom filters and homomorphic encryption. For outsourcing, we introduce a new homomorphic encryption scheme, which may be of independent interest.

## Categories and Subject Descriptors
- **D.4.6 [Operating Systems]: Security and Protection—Cryptographic controls**
- **C.2.4 [Computer-Communication Networks]: Distributed Systems—distributed applications**

## General Terms
- **Algorithms, Security**

## Keywords
- **Private Set Intersection, Security, Privacy, Database Join, Bloom Filter**

## 1. Introduction
Private set intersection (PSI) enables two parties—a client and a server—to compute the intersection of their respective sets without disclosing any other information. The client learns the intersection, while the server learns nothing. PSI is a foundational building block for many applications, equivalent to a secure, distributed database join. It has numerous real-world applications, such as maintaining confidentiality in law enforcement and protecting individual privacy.

For example, a federal authority might maintain a list of suspects and want to search commercial databases for appearances of these suspects. A typical use case is the terror watch list maintained by the Department of Homeland Security (DHS), which is checked against flight passengers. The DHS wants to keep the list confidential, and passengers have a right to privacy. Other examples include criminal investigations where the police (e.g., the FBI) need to search databases of the DMV, IRS, or employers. PSI can also enable private database queries, allowing the client to obtain the intersection of suspects and individuals in the database while maintaining the privacy of all non-suspects.

The size of the client's set can also be sensitive, and our protocols hide this information. Additionally, there may be a need to authenticate the set of suspects, e.g., by a judge. In certified or authenticated PSI, the client first authorizes its set with a trusted third party, preventing the client from obtaining the entire server's set by including all possible elements in its input.

We abstractly view PSI as follows: a client C has a set {c1, ..., cv} of size v, and a server S has a set {s1, ..., sw} of size w. After the computation, the client obtains the intersection {c1, ..., cv} ∩ {s1, ..., sw}, and the server learns nothing. We extend this notion to outsourced PSI (OPSI), where a service provider P computes the intersection while maintaining privacy, i.e., the provider does not learn anything about the inputs or the intersection. This scenario is relevant in cloud computing, where the server stores its set at the service provider, and the client can query the database while the server is offline.

### 1.1 Contributions
In this paper, we present several PSI protocol variants:

1. **Preliminary PSI Variant**: Secure in the semi-honest model, this variant introduces our novel construction based on Bloom filters and homomorphic encryption. Bloom filters are commonly used in databases for improved performance of distributed joins. They allow for false positives, but the probability can be made arbitrarily small using a parameter k. Our scheme has a second source of false positives (the SYY technique), but this also has an independent parameter l.

2. **Main Result (MPSI)**: A variant secure in the malicious model, which requires certification of the client set. This prevents the client from "stealing" the server's input by submitting a set with all possible elements.

3. **Outsourced PSI (OPSI)**: A variant for outsourcing the computation to an oblivious service provider P. The provider performs most of the computation without learning anything about the inputs or the output. To enable this, we introduce a new homomorphic encryption scheme.

Our protocols offer several advantages over existing methods:

1. **Security**:
   - The MPSI variant is provably secure in the malicious model.
   - The OPSI variant is secure in the semi-honest model, as security in the malicious model would negate the benefits of outsourcing.
   - We require minimal trust assumptions and are secure in the standard model (without random oracles).
   - Our cryptographic assumption is the quadratic residuosity assumption, one of the weakest assumptions.
   - The MPSI variant uses certified client sets, preventing the client from submitting a set with all possible elements.

2. **Efficiency**:
   - The PSI and MPSI variants have linear complexity O(k(v + w)).
   - The OPSI variant has quadratic complexity O(kw^2).
   - We avoid expensive operations like modular exponentiations and full-domain hash functions, using only modular multiplications.
   - The MPSI variant uses a similar number of normalized modular multiplications as the best protocols in the literature, but with less pre-computation.

3. **Outsourcing**:
   - Both client and server submit encrypted inputs, and the service provider performs the computation obliviously without learning anything.
   - The computation can be performed independently of the client's or server's online availability.

The remainder of the paper is structured as follows: Section 2 reviews related work on PSI, Section 3 discusses the homomorphic encryption schemes used, Section 4 describes the protocols, and Section 5 extends them to outsourcing. We conclude in Section 6.

## 2. Related Work

### 2.1 Security Models
Before reviewing previous PSI protocols, we briefly explain the security models. Security in PSI is evaluated by comparison to an ideal model. In the ideal model, both client and server submit their inputs to a trusted third party, which performs the intersection and returns the result to the client. This is compared to the real model implementing the protocol.

- **Semi-honest Adversary**: Adheres to the protocol but may record interactions to infer additional information. Security requires that the client and server do not learn more than in the ideal model.
- **Malicious Adversary**: May behave arbitrarily. Security requires that the client and server do not learn more than in the ideal model, and every adversary in the real model must have a corresponding adversary in the ideal model.

### 2.2 Private Set Intersection
PSI can be realized using general secure computation, but specialized protocols are more efficient. Several such protocols have been proposed, grouped by their basic technique:

- **Oblivious Polynomial Evaluation**: Represents set elements as roots of a polynomial and evaluates it obliviously on the other party's set elements. Protocols by Freedman et al. [15], Kissner and Song [25], Dachman-Soled et al. [9], and Hazay and Nissim [21] achieve varying levels of security and complexity.
- **Oblivious Pseudo-Random Functions**: The client evaluates a keyed, pseudo-random function on its input, with the server holding the key. Protocols by De Cristofaro and Tsudik [12] and others use this approach.

While some of these protocols achieve security against malicious adversaries in the standard model, none achieve linear complexity as our protocols do.