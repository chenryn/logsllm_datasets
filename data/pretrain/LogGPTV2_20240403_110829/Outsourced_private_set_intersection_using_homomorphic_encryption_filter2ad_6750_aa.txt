title:Outsourced private set intersection using homomorphic encryption
author:Florian Kerschbaum
Outsourced Private Set Intersection
Using Homomorphic Encryption
Florian Kerschbaum
SAP Research
Karlsruhe, Germany
ﬂPI:EMAIL
ABSTRACT
Private set intersection enables two parties – a client and a
server – to compute the intersection of their respective sets
without disclosing anything else. It is a fundamental oper-
ation – equivalent to a secure, distributed database join –
and has many applications particularly in privacy-preserving
law enforcement. In this paper we present a novel protocol
that has linear complexity, is secure in the malicious model
without random oracles, is client set size-independent and
eﬃcient. Furthermore, the computation of the intersection
can be outsourced to an oblivious service provider, as in se-
cure cloud computing. We leverage a completely novel con-
struction for computing the intersection using Bloom ﬁlter
and homomorphic encryption. For outsourcing we require
and introduce a new homomorphic encryption scheme which
may be of independent interest.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—
Cryptographic controls; C.2.4 [Computer-Communication
Networks]: Distributed Systems—distributed applications
General Terms
Algorithms, Security
Keywords
Private Set Intersection, Security, Privacy, Database Join,
Bloom Filter
1.
INTRODUCTION
Private set intersection (P SI) enables two parties – a
client and a server – to compute the intersection of their re-
spective sets without disclosing anything about their inputs.
The client will learn the intersection of the two sets and the
server will learn nothing. P SI is a fundamental building
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-0564-8/11/03 ...$10.00.
block for many applications – equivalent to a secure, dis-
tributed database join. Even as a stand-alone application,
it already has many real-world applications.
Imagine a federal authority maintaining a list of suspects.
It may want to search several commercial databases for ap-
pearances of suspects. A typical example is the terror watch
list (or no-ﬂy list) maintained by the department of home-
land security (DHS) checked against ﬂight passengers to and
from the United States. Clearly, the DHS wants to main-
tain conﬁdentiality for this list, but also the innocent ﬂight
passengers may have a right to or at least an interest in pri-
vacy. Other examples include criminal investigations where
the police (e.g. the FBI) wants to search databases of the
DMV, IRS, or employers. P SI can also be used to realize
private database queries [11]. Using P SI they could obtain
the intersection of suspects and individuals in the database.
The privacy of all individuals not in the set of suspects will
be maintained.
Even the size of the client’s set may be sensitive which
is also hidden by our protocols and there may be a need to
authenticate the set of suspects, e.g. by a judge of a federal
court. In certiﬁed or authenticated P SI the client ﬁrst au-
thorizes its set with a trusted third party. Such certiﬁcation
prevents the client from obtaining the entire server’s set by
including all possible elements in its input.
We abstractly view P SI as the following computation.
There is a client C which has a set {c1, . . . , cv} of size v
and a server S which has a set {s1, . . . , sw} of size w. Af-
ter the computation the client has obtained the intersection
{c1, . . . , cv} ∩ {s1, . . . , sw} and the server has learnt nothing.
We optionally extend this notion of P SI to outsourced
P SI (OP SI), as in cloud computing. There is a service
provider P and both client and server submit their sets to
the provider which then computes the intersection. Nev-
ertheless, we maintain privacy, i.e.
the provider does not
learn anything about the inputs or the intersection. We
envision a scenario where the server stores its set at the
service provider, e.g. a list of convicted criminal oﬀenders.
The client may then query the database while the server is
oﬀ-line. Our protocols readily extend to this scenario.
1.1 Contributions
In this paper we present several P SI protocol variants.
First, we present a preliminary P SI variant secure in the
semi-honest model. This variant explains our novel con-
struction based on Bloom ﬁlter [3] and homomorphic en-
cryption [19]. It is established practice in the database com-
munity to use Bloom ﬁlter for improved performance of dis-
tributed joins in databases [26, 30]. Bloom ﬁlter allow for
false positives when testing set inclusion, but the probabil-
ity of a false positive can be made arbitrarily small using
a parameter k. Our scheme has a second source of false
positives (the SYY technique in [32]), but this has also an
(independent) parameter l.
We then present our main result: a variant secure in the
malicious model (M P SI). The M P SI variant additional
requires certiﬁcation of the client set. Finally, we present
the OP SI variant for outsourcing the computation of the
intersection to an oblivious service provider P . The service
provider may not learn anything about the inputs or the
output (the intersection), but should perform most of the
computation. This is a common setting in cloud comput-
ing where service providers oﬀer computational resources.
In order to enable this outsourcing we introduce a novel
construction for homomorphic encryption which may be of
independent interest.
The protocol variants we propose have a number of ad-
vantages compared to the state of the art. Particularly, we
combine the security and performance advantages of almost
all previous protocols in one protocol. Our protocols are
1. secure, because
(a) the M P SI variant is provably secure in the ma-
licious model. The OP SI variant is secure in the
semi-honest model, since security in the malicious
model would undo all advantages of outsourcing
the computation. Previous P SI protocols also se-
cure in the malicious model are [9, 10, 15, 20, 21,
22, 25].
(b) they require only minimal trust assumptions. We
are secure in the standard model (without ran-
dom oracles). Previous P SI protocols also secure
in the standard model are [9, 21, 22, 25]. Our
only cryptographic assumptions is the quadratic
residuosity assumption. This is one of the weak-
est assumptions one can make and to the best
of our knowledge our protocols are the ﬁrst P SI
protocols to only make this assumption.
(c) they are client set size-independent. Although we
reveal an upper bound on the size of the client set
that is diﬀerent from the security parameter, the
computational eﬀort of the server is independent
of this bound. This is diﬀerent than client set size-
hiding from the previous work of [1] where the
upper bound of the client set coincides with the
security parameter and is therefore indiscernible.
(d) the M P SI variant uses certiﬁed client sets. The
client has to certify its (entire) set with a trusted
third party who veriﬁes that it adheres to some
policy. This prevents the client from “stealing”
the server’s input by submitting a set with all
possible elements as its input. This was ﬁrst in-
troduced in [5] and later used as authenticated
client sets in [12] where certiﬁcation is performed
on single elements only. The certiﬁcation of the
entire set has the advantage that the client cannot
omit single elements and the trusted third party
can therefore enforce stricter policies.
2. eﬃcient, because
(a) the P SI and M P SI variants have linear com-
plexity (O(k(v + w))). Previous protocols with
linear O(v + w) complexity are [12] (secure in
the semi-honest model) and [10, 20, 22] (secure
in the malicious model). The OP SI variant has
quadratic complexity (O(kw2)). Both complexi-
ties are optimal, if in the OP SI variant there is
only one key (used for the homomorphic encryp-
tion scheme) and the provider is not supposed to
learn any information including the intersection’s
size.
(b) the P SI and M P SI variants do not use expen-
sive operations. We do not use modular expo-
nentiations or full-domain hash functions (which
also require modular exponentiations [8]).
In-
stead we only use modular multiplications. The
OP SI variant uses bilinear maps on elliptic curves,
but the computation is performed by a powerful
service provider.
(c) the M P SI variant uses a similar (absolute) num-
ber of normalized modular multiplications as the
linear-complexity protocols. De
most eﬃcient,
Cristofaro et al.
[10] perform an extensive anal-
ysis and De Cristofaro and Tsudik [12] present
implementation results. We use a similar number
of modular multiplications as the best protocol in
[10]. Nevertheless, as stated above we do not use
full-domain hashing (which has been ignored in
the analysis in [10]) and require much less pre-
computation. In [10] De Cristofaro et al. assume
pre-computation of ﬁxed-base modular exponen-
tiations which may become a problem when deal-
ing with multiple protocol instances with diﬀerent
parameters.
3. are the ﬁrst that can be outsourced to an oblivious
service provider where
(a) both client and server only submit encrypted in-
put and the service provider performs the compu-
tation obliviously without learning anything about
the input (including the client set size) and the
intersection (including its size).
(b) the computation can be performed independently.
Independent from either the client’s or server’s
on-line availability, i.e. either client or server store
their (encrypted) input at the service provider
and the other party can query with their input
any time when required.
The remainder of the paper is structured as follows: We
next present related work on private set intersection in Sec-
tion 2. In Section 3 we review the homomorphic encryption
schemes used. We describe the protocols in Section 4 and
extend them to outsourcing in Section 5. We present our
conclusions in Section 6.
2. RELATED WORK
2.1 Security Models
Before reviewing previous P SI protocols we brieﬂy ex-
plain the security models. Security in P SI is evaluated by
comparison to an ideal model.
In the ideal model, both
client and server submit their input to a trusted third party
which performs the intersection and returns the result (to
the client). This is compared to the real model implementing
the protocol.
According to the deﬁnitions by Goldreich [18] a semi-
honest adversary in the real model adheres to the protocol by
faithfully providing correct input, but may keep a record of
all interactions and later try to infer additional information
from it. Security against a semi-honest adversary requires
that client and server in the real model do not learn more in-
formation than in the ideal model, if they behave according
to the protocol speciﬁcation.
To the contrary, a malicious adversary may behave arbi-
trarily in the real model. Security against a malicious adver-
sary implies that client and server in the real model always
do not learn more information than in the ideal model. For
every adversary in the real model there must be an adversary
in the ideal model that simulates the same behavior. Never-
theless, malicious adversaries may still refuse to participate,
abort prematurely or (worse) modify their input. We oﬀer
client set certiﬁcation to partially address this problem.
2.2 Private Set Intersection
P SI can be realized using general secure computation [33],
but specialized protocols are more eﬃcient. Several such
specialized protocols have been proposed in the literature.
We group them by their basic technique.
P SI using Oblivious Polynomial Evaluation.
Using oblivious polynomial evaluation [27] one can evalu-
ate a polynomial without disclosing the coeﬃcients. The
idea is to represent the set elements as the roots of the
polynomial and then obliviously evaluate it on the other
party’s set elements. Freedman et al.
[15] present proto-
cols secure against semi-honest and malicious adversaries
(in the random oracle model). The computation complexity
is quadratic O(vw), although the number modular expo-
nentiations can be reduced to O(w log log v). Kissner and
Song [25] extend the construction to additional set opera-
tions and multiple players. They present protocols secure
against semi-honest and malicious adversaries (in the stan-
dard model) using generic zero-knowledge proofs. The com-
putation complexity remains quadratic at O(vw). Dachman-
Soled et al.
[9] presented an improved construction secure
against malicious adversaries based on [25] without generic
zero-knowledge proofs, although this increases the complex-
ity. Hazay and Nissim [21] also present improved zero-
knowledge proofs. Their construction is secure against ma-
licious adversaries in the standard model and has O(v +
w(log log v + log w)) complexity, which can be further re-
duced in the random oracle model.
While some of these protocols already achieve security
against malicious adversaries in the standard model, none
of them achieves linear complexity as our protocols do.
P SI using Oblivious Pseudo-Random Functions.
Using oblivious pseudo-random functions [14] the client
can evaluate a keyed, pseudo-random function on its input
where the server holds the key. The idea is to compute the
intersection on the pseudo-random functions of the set ele-