Getting Started with Regular Expressions
If we apply this against the same input, whitewash, then the regex engine correctly returns
the match as whitewash.
We can also use anchors or boundary matchers in our regular expressions to make it match
a complete word. Any of the following two patterns will match and return whitewash as a
match:
^(white|whitewash)$
\b(white|whitewash)\b
Let's take a look at a more interesting example, which attempts to match a known literal
string "cat & rat" or a complete word in the input, using the following pattern:
\b(\w+|cat & rat)\b
If the input string is story of cat & rat, and we apply our regex pattern repeatedly, then the
following four matched substrings will be returned:
1. story
2. of
3. cat
4. rat
It is because the regex engine is eagerly using the first alternative pattern \w+ to match a
complete word and is returning all the matched words. The engine never attempts a second
alternative of the literal string, cat & rat, because a successful match is always found
using the first alternative. However, let's change the regex pattern to the following:
\b(cat & rat|\w+)\b
If we apply this regex on the same sting, story of cat & rat, and we apply our regex pattern
repeatedly, then the following three matched substrings will be returned:
1. story
2. of
3. cat & rat
This is because now cat & rat is the first alternative and when the regex engine moves to
a position before the letter c in the input, it is able to match and return a successful match
using the first alternative.
[ 15 ]
Getting Started with Regular Expressions
Summary
In this chapter, you were introduced to regular expressions with a bit of history and their
flavors. You learnt some use cases where regex are needed. Finally, we covered the basic
rules and building blocks of writing regex, with a few examples. You also learnt the eager-
matching behavior of the regex engine and how it may impact matching in alternations.
In the next chapter, we will go a level deeper and cover the core concepts of regex in detail,
such as quantifiers, lazy vs greedy matching, anchors, negated character classes, Unicode
and predefined character classes, special escape sequences, and the rules of escaping inside
a character class.
[ 16 ]
2
Understanding the Core
Constructs of Java Regular
Expressions
Using Java as a regular expression flavor, in this chapter, we will go a bit deeper and learn
in detail about anchors, quantifiers, boundary matchers, all the available character classes,
negated character classes, predefined character classes, and character classes escaping rules,
using Java as a reference point. You will also learn Unicode text matching, using regular
expressions in Java. We will also cover greedy versus non-greedy (lazy matching) and the
change of regular expression behavior with lazy matching.
We will cover the following topics in this chapter:
Anchors and quantifiers
Boundary matchers
Character classes
Regex escaping rules
Escaping inside character classes
Negated character classes
Predefined character classes
Unicode characters matching
Greedy quantifiers
Lazy quantifiers
Possessive quantifiers
Various embedded modes in regular expressions and their meaning
Enabling/disabling regular expression modes inside the regex
Understanding the Core Constructs of Java Regular Expressions
Understanding the core constructs of
regular expressions
Certain special character constructs are allowed literally in Java regular expressions. Here
they are:
Special Character Meaning
\0c A character with the octal value c
\0cc A character with the octal value cc
\0ncc A character with the octal value ncc, where n cannot be more than 3
\xhh A character with the hexadecimal value 0xhh
\uhhhh A character with the hexadecimal value 0xhhhh
\x{h...h} A character with the hexadecimal value 0xh...h, where h must be a valid
CODE_POINT
\n Newline character or u000A
\t Tab character or u0009
\r Carriage return character or u000D
\f Form feed character or u000C
\e Escape character or u\u001B
\a Bell character or \u0007
\cn A control character represented by n
Quantifiers
We briefly looked at quantifiers in the first chapter. Quantifiers allow us to quantify the
occurrences of our matches. We can match the input in various ways, such as an optional
match, an open-ended range, a closed range, and by using a fixed number. Let's take a
closer look at them, as quantifiers are integral to most of the regular expressions.
[ 18 ]
Understanding the Core Constructs of Java Regular Expressions
Basic quantifiers
The following table lists all the quantifiers available in Java regular expressions:
Quantifier Meaning
m* Match m zero or more times
m+ Match m one or more times
m? Match m one or zero times (also called an optional match)
m{X} Match m exactly X times
m{X,} Match m X or more times
m{X,Y} Match m at least X and at most Y times
In all the aforementioned cases, m can be a single character or a group of
characters. We will discuss grouping in more detail later.
Examples using quantifiers
Let's look at few examples to understand these basic quantifiers better.
Which regex pattern should be used to match a two-digit year or a four-digit year?
\d{2}|\d{4}
Which regex pattern should be used to match a signed decimal number? The pattern should
also match a signed integer number:
^[+-]?\d*\.?\d+$
Here is the breakup of the preceding regex pattern:
The ^ and $ symbols are the start/end anchors
The [+-]? pattern makes either the + sign or the - sign (optional because of ?) at
the start
The \d* pattern matches zero or more digits
The \.? pattern matches an optional dot (.) literally
The \d+ pattern matches one or more digits
[ 19 ]
Understanding the Core Constructs of Java Regular Expressions
The preceding regex will match all of these inputs:
.45
123789
5
123.45
+67.66
-987.34
What would be the regex to match a number that is at least 10 but not more than 9999?
^\d{2,4}$
Since we have a minimum of two digits, 10 is the smallest match, whereas the maximum
number of digits allowed is four, and hence, 9999 is the highest match.
What is the regex for an input that has seven digits and that can have + or - at the start?
^[+-]?\d{7}$
The [+-]? pattern makes it an optional match at the start before we match the seven digits
using \d{7}.
The preceding regex can also be written as ^[+-]?[0-9]{7}$, as \d is a
shorthand property to match [0-9]
Greedy versus reluctant (lazy) matching using
quantifiers
So far, we have discussed all the quantifiers available to us in a regular expression to match
fixed-size or variable-length text. These quantifiers are, by default, greedy in nature.
Greediness is in terms of their matching. In a regex, quantifiers attempt to match the longest
possible text, from left to right. Only when the regex engine fails to complete a match, it
moves back in the input text one character at a time, as required, to complete the match.
Sometimes, the regex engine moves back and forth multiple times in attempts to complete a
match in a complex (nested) regular expression.
[ 20 ]
Understanding the Core Constructs of Java Regular Expressions
So, for example, if the input is pqrstmprt and our regular expression is p.+r, then our
match will be from p at the start to the last r, that is, pqrstmpr, not pqr. It is due to the
same greediness that was stated earlier, where the regex engine attempts to match the
longest possible match when using quantifiers.
Regular expressions also provide a way to change this greedy behavior of the regex engine.
If we place a ? (called the lazy or reluctant quantifier) in front of any of the quantifiers, then the
behavior of the regex engine changes from greedy to lazy. With the lazy quantifier in place,
the regex engine attempts to match the shortest match, only expanding further as required
to complete the match with the remainder of the regex pattern next to the lazy quantifier.
So, in the preceding example, if we use the regex as p.+?r, then our matched text will be
pqr, because pqr is the smallest possible match between p and r.
Here is a list of all the greedy quantifiers and their corresponding lazy quantifiers:
Greedy Quantifier Lazy Quantifier
m* m*?
m+ m+?
m? m??
m{X} m{X}?
m{X,} m{X,}?
m{X,Y} m{X,Y}?
Possessive quantifiers
Possessive quantifiers are quantifiers that are greedy when matching text like greedy
quantifiers do. Both greedy and possessive quantifiers try to match as many characters as
possible. The important difference, however, is that the possessive quantifiers do not
backtrack (go back) unlike greedy quantifiers; therefore, it is possible that the regex match
fails if the possessive quantifiers go too far.
[ 21 ]
Understanding the Core Constructs of Java Regular Expressions
This table shows all the three types of quantifiers, side by side:
Greedy Quantifier Lazy Quantifier Possessive Quantifier
m* m*? m*+
m+ m+? m++
m? m?? m?+
m{X} m{X}? m{X}+
m{X,} m{X,}? m{X,}+
m{X,Y} m{X,Y}? m{X,Y}+
Let's take an example input string, a1b5, and see the behavior of the greedy, lazy, and
possessive quantifiers.
If we apply a regex using the greedy quantifier, \w+\d, then it will match a1b (the longest
match before backtracking starts) using \w+, and 5 will be matched using \d; thus, the full
match will be a1b5.
Now, if we apply a regex using the non-greedy quantifier, \w+?\d, then it will match a (the
shortest match before expanding starts) using \w+?, and then the adjacent digit 1 will be
matched using \d. Thus, the first full match will be a1. If we let the regex execute again,
then it will find another match, b5.
Finally, if we apply a regex using the possessive quantifier, \w++\d, then it will match all
the characters a1b5 (the longest possible match without giving back) using \w++ . Due to
this, \d remains unmatched, and hence the regex fails to find any match.
Let's take another example. The requirement is to match a string that starts with lowercase
English alphabets or hyphen. The string can have any character after the
alphabets/hyphens, except a colon. There can be any number of any characters of any length
after the colon until the end.
An example of a valid input is as-df999 and that of an invalid input is asdf-:123.
Now, let's try solving this regex problem using a greedy quantifier regex:
^[a-z-]+[^:].*$
[ 22 ]
Understanding the Core Constructs of Java Regular Expressions
Unfortunately, this is not the right regex pattern because this regex will match both the
aforementioned valid and invalid inputs. This is because of the backtracking behavior of the
regex engine in greedy quantifiers. The [a-z-]+ pattern will find the longest possible
match in the form of asdf-, but due to the negated character class pattern [^:] , the regex
engine will backtrack one position to asdf and will match the next hyphen for [^:]. All the
remaining text, that is, :123, will be matched using .*.
Let's try to solve this regex problem using the following possessive quantifier regex:
^[a-z-]++[^:].*$
This regex pattern will still match our valid input, but it will fail to match an invalid input
because there is no backtracking in possessive quantifiers; hence, the regex engine will not
go back any position after matching asdf- in the second example string. Since the next
character is a colon and our regex sub-pattern is [^:], the regex engine will stop matching
and correctly declare our invalid input a failed match.
Possessive quantifiers are good for the performance of the underlying regex engine because
the engine does not have to keep any backtracking information in memory. The
performance increase is even more when a regex fails to match because possessive
quantifiers fail faster. So, remember that the benefit of possessive quantifiers is to improve
the regex performance, especially when using nested quantifiers.
Boundary constructs
Boundary constructs allow us to specify where our matches should start or stop by
restricting our matches to certain boundaries. We avoid matching unwanted text by adding
restrictions to the start and stop positions of the matching text using boundary matchers.
Here are all the boundary constructs available in Java regular expressions:
Boundary Meaning
Matcher
Name
\b Word boundary; position between a word and a non-word character
\B Non-word boundary; it compliments \b and asserts true wherever \b asserts
false
^ Line-start anchor, which matches the start of a line
$ Line-end anchor, which matches just before the optional line break at the end
of a line
[ 23 ]
Understanding the Core Constructs of Java Regular Expressions
\A Permanent start of input; in a multiline input using MULTILINE mode, \A
matches only at the very beginning, while ^ is matched at every line start
position
\z Permanent end of input; in a multiline input using MULTILINE mode, \z
matches only at the very end while $ is matched at every line end position
\Z Similar to \z with the only difference being that it matches just before the
optional line break at the very end of the input.
\G End of the previous match; we will discuss it in advanced sections of the book
in the next chapters.
Let's recall from the first chapter that [a-zA-Z0-9_] are called word
characters. All other characters are considered non-word characters.
Examples using boundary constructs
Which regex should be used to match "at" when the input is 'Hat at work"?
\bat\b
The preceding regex should be used because \b (word boundary) stops the regex engine to
match at in Hat, because \bat\b can match full words only.
What should be regex if we only want to match at in Hat but not the one that was matched
in the preceding regex?
\Bat\b
Now, this regex will match at that is a part of Hat because \B asserts a position that is
between two word characters or a position between two non-word characters. Because of
the presence of \B in the regex, it matches at only in Hat but not the word at.
If the input is suppress expression press depression, what will be the matches if the
regex is \Bpress\B?
suppress expression press depression
This is because \B matches the position between word characters, and the other instances,
suppress and press, have non-word characters after press.
[ 24 ]
Understanding the Core Constructs of Java Regular Expressions
If the input is ppp\n555\n, then show the matched text using the following two regular
expressions:
\Ap+\n5{3}\Z
\Ap+\n5{3}\z
Here are the matches:
A) ppp\n555
B) No match
The starting part, \Ap+\n5{3}, is common in both the regex patterns and matches
ppp\n555 both the times. However, we are getting no match in the second case because of
the subtle difference between the \Z and \z assertions. \Z asserts the position at the end or
just before the last line terminator whereas \z always asserts the position at the very end.
Due to the presence of \n at the end of the file, our second regex does not match. If we
change the second regex to \Ap+\n5{3}\n\z, then it will match the entire input.
Note that the end anchor $ also behaves like \Z if the MULTILINE flag (will
be discussed later) is not enabled in an input text with multiple lines. Thus,
the preceding input string can also be matched using ^p+\n5{3}$.
Character classes
We briefly looked at character classes in the first chapter. Character classes (or character
sets) let us match one out of the many characters defined inside a class. Character classes
are enclosed inside a square bracket. The order of the characters inside a character class
does not matter.
Examples of character classes
Which regex will match the letters p, m, or z?
Solution 1:
[pmz]
Solution 2:
[zmp]
[ 25 ]
Understanding the Core Constructs of Java Regular Expressions
Solution 3:
[mzp]
All the preceding three regular expressions will behave in exactly the same manner because
the order of the characters inside the character class does not matter.
Which regex will match English language vowels a, e, i, o, and u?
[aeiou]
Which regex will match the field extensions .mp3 or .mp3?
\.mp[34]
Which regex will match the letters @, #, or =?
[@#=]
Range inside a character class
We can also specify a character range inside a character class by using a hyphen ( - )
between two characters. You just have to make sure that the left-hand side character of a
range is lower in the ASCII table than the right-hand side character. We can match all the
digits using the regex patterns, [0123456789], or a shorter [0-9].
Examples of character range
The following is a regex that matches any uppercase or lowercase alphabet in the English
language:
[a-zA-Z]
The a-z pattern is for the lowercase character range and A-Z is for the uppercase character
range.
The following regex matches any alphanumeric characters:
[a-zA-Z0-9]
Alpha numeric characters consist of any English alphabets and digits.
The following regex matches any hexadecimal character:
[a-fA-F0-9]
[ 26 ]
Understanding the Core Constructs of Java Regular Expressions
We know that hexadecimal characters consist of digits, 0 to 9, and letters, A to F (ignore
casing). The preceding regex pattern shows a character class that includes these two
character ranges. We use a-f and A-F ranges to make it match uppercase or lowercase
letters.
Escaping special regex metacharacters and
escaping rules inside the character classes
We know that . matches any character, [ and ] are used for character classes, { and } are
used for limiting quantifiers, and ? , *, and + are used for various quantifiers. To match any
of the metacharacters literally, one needs to escape these characters using a backslash (\ ) to
suppress their special meaning. Similarly, ^ and $ are anchors that are also considered
regex metacharacters.
Let's see some examples of escaping metacharacters in regular expressions.
The following regex matches the string, a.b?:
a\.b\?
The following regex matches the string, {food}:
\{food\}
The following regex matches the string, abc:][}{: