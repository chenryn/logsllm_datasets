Burp提供了高度可拓展性，很多我们想实现的功能都可以以插件的形式实现，之前也是因为不懂写插件很多自己的想法无法自动化实现，所以学了一波Burp插件开发，此系列有几篇我也不清楚，
**随缘** 写吧。
# Burp Extenstion API
## 前言
**本文会略过一些简单步骤如安装插件，安装Jython环境等。**
Burp插件提供了几种语言的开发方式：Python、Java、Ruby等，以下文中我会以Python为例子来讲解某个插件该如何使用。
Burp提供了API的介绍文档：[Generated
Documentation](https://portswigger.net/burp/extender/api/index.html)。
并且在官方中也有提供例子供我们学习：[Burp Suite Extensibility -PortSwigger](https://portswigger.net/burp/extender/)
此例中提供了我们几个样例，并且给了三种语言的对应版本，我的个人建议是想实现什么功能，就使用某个案例，通过阅读其代码也能慢慢的了解Burp插件的API是如何实现其功能的，如果这些例子中找不到你想实现的功能，不妨去github搜搜别人写好的插件，通过阅读对应的代码也可以了解其某些功能的实现。
## 介绍
Burp的接口集合：
每个接口都会实现特定的功能，我通过阅读其使用案例的方式来学习每个接口的作用。
### IBurpCollaboratorClientContext
在了解此接口之前，我们可以先了解一下Burp的CollaboratorClient这个功能，相当于一个dnslog，我们可以生成某个地址，当我们访问这个地址时，Burp就会将对应请求输出给我们。
当我们点击Copy to
clipboard后，就可以拿到一个burp生成的请求地址，当我们访问他之后会输出一个字符串，并且会Burp会收到请求，此时我们如果点击Poll
now就可以看到请求了：
Burp收到的请求，会返回响应以及返回包。
接下来了解一下实现这个功能的接口吧，此接口可实现如下方法：
并且由`IBurpExtenderCallbacks.createBurpCollaboratorClientContext()`创建。
看到这是不是很懵逼？问题不大，我们一个个使用对应的方法，走一遍对应的流程就可以了。
  * generatePayload(boolean includeCollaboratorServerLocation)
IBurpCollaboratorClientContext.py
    from burp import IBurpExtender
    from burp import IBurpCollaboratorClientContext
    class BurpExtender(IBurpExtender,IBurpCollaboratorClientContext):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers = callbacks.getHelpers()
            callbacks.setExtensionName('IBurpCollaboratorClientContext')
            collaboratorContext = callbacks.createBurpCollaboratorClientContext()
            print(collaboratorContext.generatePayload(True))
            print(collaboratorContext.generatePayload(True))
此方法需要传递一个布尔值，由你传递的值为True或False决定了返回的payload是否带有CollaboratorServerLocation。
我们先看一下上述代码在Output中的输出结果：
再看看当传递的布尔值为False时的输出结果：
可以看到，结果只是是否返回`.burpcollaborator.net`的区别而已。
  * getCollaboratorServerLocation()
返回Collaborator server的hostname或ip。
一样的，输出出来看看结果：
    from burp import IBurpExtender
    from burp import IBurpCollaboratorClientContext
    class BurpExtender(IBurpExtender,IBurpCollaboratorClientContext):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers = callbacks.getHelpers()
            callbacks.setExtensionName('IBurpCollaboratorClientContext')
            collaboratorContext = callbacks.createBurpCollaboratorClientContext()
            print(collaboratorContext.getCollaboratorServerLocation())
  * fetchAllCollaboratorInteractions()
    from burp import IBurpExtender
    from burp import IBurpCollaboratorClientContext
    import os
    class BurpExtender(IBurpExtender,IBurpCollaboratorClientContext):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers = callbacks.getHelpers()
            callbacks.setExtensionName('IBurpCollaboratorClientContext')
            collaboratorContext = callbacks.createBurpCollaboratorClientContext()
            payload = collaboratorContext.generatePayload(True)
            print(payload)
            while True:
                print(collaboratorContext.fetchAllCollaboratorInteractions())
此时我为了保证能收到我手动访问的请求，使用了While循环来输出结果：
我使用generatePayload方法生成了一个payload，并在浏览器中手动访问他，过了一会儿之后就可以收到请求了，而此时我们可以使用fetchAllCollaboratorInteractions方法来获取所有payload的请求结果。
  * fetchCollaboratorInteractionsFor(payload)
此方法需要传递某个payload，而这个payload正是我们上文中利用generatePayload方法生成的payload，服务器将检索该payload所处的dns服务器是否收到请求，并将结果返回给我们。
    from burp import IBurpExtender
    from burp import IBurpCollaboratorClientContext
    import os
    class BurpExtender(IBurpExtender,IBurpCollaboratorClientContext):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers = callbacks.getHelpers()
            callbacks.setExtensionName('IBurpCollaboratorClientContext')
            collaboratorContext = callbacks.createBurpCollaboratorClientContext()
            payload = collaboratorContext.generatePayload(True)
            print(payload)
            while True:
                print(collaboratorContext.fetchCollaboratorInteractionsFor(payload))
当我手动访问其生成的payload之后，就可以获取到请求结果：
可以看到此方法与上述方法的区别吗？其区别在于一个是检索单个payload，另外一个是检索在插件运行中生成的所有payload是否被请求。
**fetchInfiltratorInteractionsFor与fetchAllInfiltratorInteractions不常用，不予介绍。**
学习完了三个主要方法之后，我们就可以开始了解一下使用这些方法可以做什么了。我们需要先想想，Burp的CollaboratorClient相当于一个dnslog，我们一般都用dnslog来测试什么呢？
**BLIND XXE、BLIND SSRF、SQL外带、Blind OS INJECTION等。**
接下来以github的某个XXE扫描插件来介绍如何使用此api的三个方法实现一个Blind XXE Scanner。
插件地址：[XXEPlugin.java](https://github.com/yandex/burp-molly-pack/blob/8c9aa5766dcd4b49d3258bf7f3790bd318fe9b7f/src/main/java/com/yandex/burp/extensions/plugins/audit/XXEPlugin.java)
重点关注以下代码：
    public void initXXEPayloads() {
            XXEPayloads.add("\n\n%remote;\n]>test");
            XXEPayloads.add("a0e5c");
            XXEPayloads.add("]>BalanceSimple.CreateOrderOrSubscription&xxe;testx");
            XXEPayloads.add("\n\n");
        }
        @Override
        public List doScan(IHttpRequestResponse baseRequestResponse, IScannerInsertionPoint insertionPoint) {
            IResponseInfo resp = helpers.analyzeResponse(baseRequestResponse.getResponse());
            IRequestInfo req = helpers.analyzeRequest(baseRequestResponse.getRequest());
            if (resp == null | req == null) return null;
            URL url = helpers.analyzeRequest(baseRequestResponse).getUrl();
            if (flags.contains(url.toString())) return null;
            else flags.add(url.toString());
            IBurpCollaboratorClientContext collaboratorContext = callbacks.createBurpCollaboratorClientContext();
            String collaboratorPayload = collaboratorContext.generatePayload(true);
            List issues = new ArrayList<>();
            for (String xxe : XXEPayloads) {
                xxe = xxe.replace("{collaboratorPayload}", collaboratorPayload);
                List headers = helpers.analyzeRequest(baseRequestResponse).getHeaders();
                headers.set(0, headers.get(0).replace("GET", "POST"));
                headers.removeIf(header -> header != null && header.toLowerCase().startsWith("content-type:"));
                headers.add("Content-type: application/xml");
                byte[] attackBody = helpers.buildHttpMessage(headers, helpers.stringToBytes(xxe));
                IHttpRequestResponse attackRequestResponse = callbacks.makeHttpRequest(baseRequestResponse.getHttpService(), attackBody);
                List collaboratorInteractions = collaboratorContext.fetchCollaboratorInteractionsFor(collaboratorPayload);
                if (attackRequestResponse != null && attackRequestResponse.getResponse() != null
                        && collaboratorInteractions != null
                        && (!collaboratorInteractions.isEmpty() || helpers.bytesToString(attackRequestResponse.getResponse()).contains("dryat0Uct333"))) {
                    String attackDetails = "XXE processing is enabled at: \n" + helpers.analyzeRequest(attackRequestResponse).getUrl().toString();
                    issues.add(new CustomScanIssue(attackRequestResponse.getHttpService(),
                            helpers.analyzeRequest(attackRequestResponse).getUrl(),
                            new IHttpRequestResponse[]{callbacks.applyMarkers(attackRequestResponse, null, null)},
                            attackDetails, ISSUE_TYPE, ISSUE_NAME, SEVERITY, CONFIDENCE,
                            "", "", ""));
                }
            }
            return issues.isEmpty() ? null : issues;
        }
    }
52-53行代码实现此接口并使用了generatePayload方法来获取一个payload：
    IBurpCollaboratorClientContext collaboratorContext = callbacks.createBurpCollaboratorClientContext();
    String collaboratorPayload = collaboratorContext.generatePayload(true);
56-65行为使用生成的payload替换xxe中的标志位后发起请求：
    for (String xxe : XXEPayloads) {
                xxe = xxe.replace("{collaboratorPayload}", collaboratorPayload);
                List headers = helpers.analyzeRequest(baseRequestResponse).getHeaders();
                headers.set(0, headers.get(0).replace("GET", "POST"));
                headers.removeIf(header -> header != null && header.toLowerCase().startsWith("content-type:"));
                headers.add("Content-type: application/xml");
                byte[] attackBody = helpers.buildHttpMessage(headers, helpers.stringToBytes(xxe));
                IHttpRequestResponse attackRequestResponse = callbacks.makeHttpRequest(baseRequestResponse.getHttpService(), attackBody);
                List collaboratorInteractions = collaboratorContext.fetchCollaboratorInteractionsFor(collaboratorPayload);
最后一行获取了解析结果，即是否有服务器向payload所处地址发起请求。
并在67-69行代码处判断了是否存在xxe漏洞：
    if (attackRequestResponse != null && attackRequestResponse.getResponse() != null
                        && collaboratorInteractions != null
                        && (!collaboratorInteractions.isEmpty())
重点：`collaboratorInteractions!=null&&(!collaboratorInteractions.isEmpty())`。
此行代码用于判断是否存在请求。
通过以上三个步骤即实现了一个简单的blind xxe scanner。
梳理一下具体步骤：
  * 生成payload
  * 替换payload并发起请求
  * 判断是否有服务器向payload所处地址发起请求，如果有则代表漏洞存在
通过此接口，我们实现了一个Blind XXE漏洞扫描器的功能，当然同理也可以实现Blind SSRF等各种 **Blind** 漏洞。
### IBurpCollaboratorInteraction
留坑...没看懂这玩意干啥用的。
### IBurpExtender
Burp明确定义了： **所有插件都必须实现这个接口** ，就已经说明了这个接口的重要性。
  * registerExtenderCallbacks(IBurpExtenderCallbacks callbacks)
当我们在加载插件时，默认会调用IBurpExtender类下的registerExtenderCallbacks方法，并传递一个IBurpExtenderCallbacks对象，此对象在编写插件时会经常用到。
官方描述该方法的功能： **它注册该IBurpExtenderCallbacks接口的一个实例 ，提供可由扩展调用的方法以执行各种操作。**
IBurpExtender.py：
    class BurpExtender(IBurpExtender,IBurpCollaboratorInteraction):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers = callbacks.getHelpers()
            callbacks.setExtensionName('IBurpExtender')
上述代码中的callbacks是加载插件时默认传递的，其为IBurpExtenderCallbacks的实例，这个在后续会讲到。
### IBurpExtenderCallbacks
在上面讲到了，加载插件时默认会调用registerExtenderCallbacks方法并传递一个实例，而这个实例就是IBurpExtenderCallbacks对象的实例。
这个接口就非常之牛逼了，其内置了许多成员属性以及方法，在后续我们都会经常用到。
先看看其内置的属性吧：
    public static final int TOOL_COMPARER   512
    public static final int TOOL_DECODER    256
    public static final int TOOL_EXTENDER   1024
    public static final int TOOL_INTRUDER   32
    public static final int TOOL_PROXY  4
    public static final int TOOL_REPEATER   64
    public static final int TOOL_SCANNER    16
    public static final int TOOL_SEQUENCER  128
    public static final int TOOL_SPIDER 8
    public static final int TOOL_SUITE  1
    public static final int TOOL_TARGET 2
这一块属性其实都是一些标志位，当我们在处理Burp传递过来的http请求时，需要判断这些请求是在哪里传递的，比如PROXY、SCANNER、TARGET、REPEATER等，简单的来说，这些属性的功能就是用来判断我们想要处理的请求能不能正确的处理，比如我们想要处理的是REPEATER的请求，此时其余无关请求就可以抛掉，比如PROXY的请求，下面以一个代码来演示一下吧。
IBurpExtenderCallbacks.py：
    from burp import IBurpExtender
    from burp import IHttpListener
    class BurpExtender(IBurpExtender,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers = callbacks.getHelpers()
            callbacks.setExtensionName('IBurpExtenderCallbacks')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self, toolFlag, messageIsRequest, messageinfo):
            if toolFlag == self._callbacks.TOOL_REPEATER :
                print("you are using repeater")
此时当我们在repeater中发出请求时，就可以在output下看到如下输出：
接下来开始介绍一下该接口下的方法，其方法有点多，我就不截图了，可以在以下地址中查看：
[Interface
IBurpExtenderCallbacks](https://portswigger.net/burp/extender/api/burp/IBurpExtenderCallbacks.html#TOOL_PROXY)
### addScanIssue(IScanIssue issue)
此方法要求我们传入IScanIssue的实例化，用于生成自定义的扫描问题，就像是我们在主页中看到的各种漏洞一样，直接演示一下：
    from burp import IBurpExtender
    from burp import IHttpListener
    from burp import IScanIssue
    class CustomIssue(IScanIssue):
        def __init__(self, BasePair, Confidence='Certain', IssueBackground=None, IssueDetail=None, IssueName='Python Scripter generated issue', RemediationBackground=None, RemediationDetail=None, Severity='High'):
            self.HttpMessages=[BasePair]
            self.HttpService=BasePair.getHttpService()
            self.Url=BasePair.getUrl() 
            self.Confidence = Confidence
            self.IssueBackground = IssueBackground 
            self.IssueDetail = IssueDetail
            self.IssueName = IssueName
            self.IssueType = 134217728 
            self.RemediationBackground = RemediationBackground 
            self.RemediationDetail = RemediationDetail 
            self.Severity = Severity 
        def getHttpMessages(self):
            return self.HttpMessages
        def getHttpService(self):
            return self.HttpService
        def getUrl(self):
            return self.Url
        def getConfidence(self):
            return self.Confidence
        def getIssueBackground(self):
            return self.IssueBackground
        def getIssueDetail(self):
            return self.IssueDetail
        def getIssueName(self):
            return self.IssueName
        def getIssueType(self):
            return self.IssueType
        def getRemediationBackground(self):
            return self.RemediationBackground
        def getRemediationDetail(self):
            return self.RemediationDetail
        def getSeverity(self):
            return self.Severity
    class BurpExtender(IBurpExtender,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers = callbacks.getHelpers()
            callbacks.setExtensionName('IBurpExtenderCallbacks')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self, toolFlag, messageIsRequest, messageinfo):
            if toolFlag == self._callbacks.TOOL_REPEATER :
                if messageIsRequest: 
                    issue = CustomIssue(
                        BasePair=messageinfo,
                        IssueName='HTTP REQUESTS',
                        IssueDetail='addScanIssue Testing',
                        Severity='High',
                        Confidence='Certain'
                    )
                    self._callbacks.addScanIssue(issue)
            return
此时当我们在repeater中发出请求时，主页便会多了一个我们自定义的扫描问题：
漏洞详情以及危害等级都是我们可以自定义的，此方法多用于在测试漏洞时，如果不想添加tab来显示存在漏洞的地址，则使用addScanIssue方法来添加一个自定义问题。