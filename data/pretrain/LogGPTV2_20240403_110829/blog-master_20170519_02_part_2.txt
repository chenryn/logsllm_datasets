转换后的道路信息如下  
```  
create table cloudpoint_test_grid(  
  id serial primary key,    -- 六边形ID  
  loc_box geometry     -- 单个六边形  
);  
```  
将网格与点云数据JOIN，并聚合为聚合后的数据。  
```  
insert into cloudpoint_test_agg (loc_box,loc_agg,other_agg)  
  select t1.loc_box, array_agg(t2.loc) as loc_agg, array_agg(t2.other) as other_agg from   
    cloudpoint_test_grid t1 join cloudpoint_test t2  
    on (ST_Contains(t1.loc_box, t2.loc)) group by t1.loc_box;   
```  
例子  
本例使用标准正方形进行网格化，((0,0),(10000,10000)) 区域的网格化操作如下  
每100*100一个格子。  
![pic](20170519_02_pic_005.jpg)  
http://postgis.net/docs/manual-2.3/ST_MakeBox2D.html  
```  
do language plpgsql $$  
declare  
  x int;  
  y int;  
begin  
  for x in select generate_series(0,10000,100) loop  
    for y in select generate_series(0,10000,100) loop  
      insert into cloudpoint_test_grid(loc_box) values (ST_MakeBox2D( st_makepoint(x,y), st_makepoint(x+100, y+100) ));  
    end loop;  
  end loop;  
end;  
$$;  
```  
```  
postgres=# select * from cloudpoint_test_grid;  
  id   |                                                                                          loc_box                                                                                             
-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
     1 | 010300000001000000050000000000000000000000000000000000000000000000000000000000000000005940000000000000594000000000000059400000000000005940000000000000000000000000000000000000000000000000  
     2 | 010300000001000000050000000000000000000000000000000000594000000000000000000000000000006940000000000000594000000000000069400000000000005940000000000000594000000000000000000000000000005940  
     3 | 010300000001000000050000000000000000000000000000000000694000000000000000000000000000C0724000000000000059400000000000C072400000000000005940000000000000694000000000000000000000000000006940  
     4 | 0103000000010000000500000000000000000000000000000000C07240000000000000000000000000000079400000000000005940000000000000794000000000000059400000000000C0724000000000000000000000000000C07240  
......  
```  
生成聚合数据  
```  
insert into cloudpoint_test_agg (loc_box,loc_agg,other_agg)  
  select t1.loc_box, array_agg(t2.loc) as loc_agg, array_agg(t2.other) as other_agg from   
    cloudpoint_test_grid t1 join cloudpoint_test t2  
    on (ST_Contains(t1.loc_box, t2.loc)) group by t1.loc_box;   
INSERT 0 10000  
select count(*) from cloudpoint_test_agg;  
10000  
```  
从聚合后的点云数据搜索附近点的函数如下  
```  
create or replace function ff1(geometry, float8, int) returns setof record as $$                                                          
declare  
  v_rec record;  
  v_limit int := $3;  
begin  
  set local enable_seqscan=off;   -- 强制索引, 扫描行数够就退出.  
  for v_rec in   
    select *,  
    ST_Distance ( $1, loc_box ) as dist   
    from cloudpoint_test_agg   
    order by loc_box  $1           -- 按距离顺序由近到远返回  
  loop  
    if v_limit  $2 then       -- 判断距离是否大于请求的距离   
      raise notice '距离 % 以内的点已输出完毕', $2;  
      return;  
    else  
      return next v_rec;  
    end if;  
    v_limit := v_limit - array_length(v_rec.loc_agg, 1);  -- 扣减grid内的point个数  
  end loop;  
end;  
$$ language plpgsql strict volatile;  
```  
##### 聚合方法2 
使用st_geohash(geometry)提取点的geohash值，根据geohash的preifx进行聚合。   
感兴趣的童鞋可以去了解一下geohash，相邻的POINT，GEOHASH的VALUE也是相邻的。   
##### 聚合后的搜索SQL例子  
搜索距离st_makepoint(1500,1500)在100以内，按距离由近到远，返回最多10000条记录(limie 10000)。  
```  
postgres=# select * from ff1(st_makepoint(1500,1500), 100, 10000) as t (id int, loc_box geometry, loc_agg geometry[], other_agg text[], dist float8);  
```  
##### 聚合后的速度测试  
1\. 搜索st_makepoint(5000,5000)附近距离1000以内的20万个点，按距离由近到远返回。  
15毫秒。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from ff1(st_makepoint(5000,5000), 1000, 200000) as t (id int, loc_box geometry, loc_agg geometry[], other_agg text[], dist float8);  
NOTICE:  已经取足limit设置的 200000 条数据, 但是距离 1000 以内的点可能还有.  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Function Scan on public.ff1 t  (cost=0.25..10.25 rows=1000 width=108) (actual time=15.642..15.643 rows=20 loops=1)  
   Output: id, loc_box, loc_agg, other_agg, dist  
   Function Call: ff1('0101000000000000000088B340000000000088B340'::geometry, 1000::double precision, 200000)  
   Buffers: shared hit=465  
 Planning time: 0.082 ms  
 Execution time: 15.670 ms  
(6 rows)  
```  
2\. 搜索st_makepoint(5000,5000)附近距离2000以内的100万个点，按距离由近到远返回。  
63毫秒。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from ff1(st_makepoint(5000,5000), 2000, 1000000) as t (id int, loc_box geometry, loc_agg geometry[], other_agg text[], dist float8);  
NOTICE:  已经取足limit设置的 1000000 条数据, 但是距离 2000 以内的点可能还有.  
                                                     QUERY PLAN                                                        
---------------------------------------------------------------------------------------------------------------------  
 Function Scan on public.ff1 t  (cost=0.25..10.25 rows=1000 width=108) (actual time=63.287..63.296 rows=100 loops=1)  
   Output: id, loc_box, loc_agg, other_agg, dist  
   Function Call: ff1('0101000000000000000088B340000000000088B340'::geometry, 2000::double precision, 1000000)  
   Buffers: shared hit=2143  
 Planning time: 0.057 ms  
 Execution time: 63.322 ms  
(6 rows)  
```  
3\. 搜索st_makepoint(5000,5000)附近距离3000以内的500万个点，按距离由近到远返回。  
312毫秒。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from ff1(st_makepoint(5000,5000), 3000, 5000000) as t (id int, loc_box geometry, loc_agg geometry[], other_agg text[], dist float8);  
NOTICE:  已经取足limit设置的 5000000 条数据, 但是距离 3000 以内的点可能还有.  
                                                      QUERY PLAN                                                         
-----------------------------------------------------------------------------------------------------------------------  
 Function Scan on public.ff1 t  (cost=0.25..10.25 rows=1000 width=108) (actual time=312.315..312.394 rows=501 loops=1)  
   Output: id, loc_box, loc_agg, other_agg, dist  
   Function Call: ff1('0101000000000000000088B340000000000088B340'::geometry, 3000::double precision, 5000000)  
   Buffers: shared hit=10729  
 Planning time: 0.077 ms  
 Execution time: 312.463 ms  
(6 rows)  
```  
聚合前后的性能对比图  
![pic](20170519_02_pic_004.jpg)    
#### 2 pgpointcloud  
pgpointcloud是PostgreSQL中的一个存储点云数据(LIDAR)的插件，具有类似PostGIS raster数据的功能，同时还有更丰富的扩展功能。  
https://github.com/pgpointcloud/pointcloud  
![pic](20170519_02_pic_002.jpg)  
[《LIDAR in PostgreSQL with PointCloud》](20170519_02_pdf_001.pdf)  
LIDAR传感器，在扫描空间时可能快速的产生上百万的点，每个点除了包含XYZ坐标值，还可能包含更多其他维度信息，例如时间、RGB值、其他属性，还有可能返回的是一批点。  
因此没有固定的类型来存储LIDAR传感器上报的数据，pgpointcloud使用"schema document"类型来描述LIDAR传感器上报的数据，格式与PDAL库的标准一致。  
每一个点包含若干维度的信息，每个维度可能是任意数据类型，类似复合类型。  
```  
LIDAR sensors quickly produce millions of points with large numbers of variables measured on each point.   
The challenge for a point cloud database extension is efficiently storing this data while allowing high fidelity access to the many variables stored.  
Much of the complexity in handling LIDAR comes from the need to deal with multiple variables per point.   
The variables captured by LIDAR sensors varies by sensor and capture process.   
Some data sets might contain only X/Y/Z values.   
Others will contain dozens of variables: X, Y, Z; intensity and return number; red, green, and blue values; return times; and many more.   
There is no consistency in how variables are stored:   
intensity might be stored in a 4-byte integer, or in a single byte; X/Y/Z might be doubles, or they might be scaled 4-byte integers.  
PostgreSQL Pointcloud deals with all this variability by using a "schema document" to describe the contents of any particular LIDAR point.   
Each point contains a number of dimensions, and each dimension can be of any data type,   
with scaling and/or offsets applied to move between the actual value and the value stored in the database.   
The schema document format used by PostgreSQL Pointcloud is the same one used by the PDAL library.  
```  
pgpointcloud是专为处理LIDAR数据而设计的插件，推荐使用。  
#### 3 LLVM（JIT）  
由于被处理的记录多，导致get next tuple的开销可能被放大，解决办法是降低回调的开销，可以使用code gen，也可以使用向量计算的方法。  
参考如下：  
[《PostgreSQL 10.0 preview 性能增强 - 推出JIT开发框架(朝着HTAP迈进)》](../201703/20170330_02.md)    
[《分析加速引擎黑科技 - LLVM、列存、多核并行、算子复用 大联姻 - 一起来开启PostgreSQL的百宝箱》](../201612/20161216_01.md)     
[《PostgreSQL 向量化执行插件(瓦片式实现) 10x提速OLAP》](../201702/20170225_01.md)    
性能提升参考以上文档，向量计算有10倍提升，LLVM至少有2倍提升。    
### 2. GiST索引优化  
gist 索引优化，目的是减少碎片。使用GiST的buffering开关即可，建索引时可以指定。  
```  
create index idx_cloudpoint_test_agg_1 on cloudpoint_test_agg using gist(loc_box) with (buffering=on);  
create index idx_cloudpoint_test_1 on cloudpoint_test using gist(loc) with (buffering=on);  
```  
### 3. 流式返回  
由于返回的记录较多，除了批量一次性返回，还有一种方法，流式的返回。  
流式返回有两种方法，一种是游标，另一种是异步消息。  
1\. 游标实现流式返回。  
```  
begin;  
declare cur1 cursor for select * from (select *, ST_Distance ( st_makepoint(5000,5000), loc ) as dist from cloudpoint_test order by st_makepoint(5000,5000)  loc ) t where dist  $1           -- 按距离顺序由近到远返回  
  loop  
    if v_limit  $2 then       -- 判断距离是否大于请求的距离   
      raise notice '距离 % 以内的点已输出完毕', $2;  
      return;  