  1 TB                0.16 GB
  10 TB               1.6 GB
  100 TB              16 GB
:::
请注意，如果文件系统的块大小较小，则需要更大的内存。例如：块大小为 1K 的
GFS2 文件系统需要这个表所示的内存量的四倍。
:::
::: section
::: titlepage
# []{#assembly_gfs2-filesystem-repair-configuring-gfs2-file-systems.html#proc_repairing-a-gfs2-filesystem-gfs2-filesystem-repair}修复 gfs2 文件系统 {.title}
:::
修复 GFS2 文件系统的 `fsck.gfs2`{.literal} 命令格式如下：
``` literallayout
fsck.gfs2 -y BlockDevice
```
::: variablelist
[`-y`{.literal}]{.term}
:   使用 `-y`{.literal} 标志会对所有问题回答 `yes`{.literal}。指定
    `-y`{.literal} 标志后， `fsck.gfs2`{.literal}
    命令不会在进行修改前提示您回答问题。
[`BlockDevice`{.literal}]{.term}
:   指定 GFS2 文件系统所在的块设备。
:::
在这个示例中修复了位于块设备 `/dev/testvg/testlv`{.literal} 的 GFS2
文件系统。所有关于修复查询的回答都自动使用 `yes`{.literal}。
``` literallayout
# fsck.gfs2 -y /dev/testvg/testlv
Initializing fsck
Validating Resource Group index.
Level 1 RG check.
(level 1 passed)
Clearing journals (this may take a while)...
Journals cleared.
Starting pass1
Pass1 complete
Starting pass1b
Pass1b complete
Starting pass1c
Pass1c complete
Starting pass2
Pass2 complete
Starting pass3
Pass3 complete
Starting pass4
Pass4 complete
Starting pass5
Pass5 complete
Writing changes to disk
fsck.gfs2 complete
```
:::
:::
[]{#assembly_gfs2-performance-configuring-gfs2-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#assembly_gfs2-performance-configuring-gfs2-file-systems}第 6 章 提高 GFS2 性能 {.title}
:::
您可以分析 GFS2 配置的许多方面来提高文件系统性能。
有关使用高可用性附加组件和 Red Hat Global File System 2 (GFS2)
部署和升级 Red Hat Enterprise Linux
集群的常规建议，请查看红帽客户门户网站中的相应文章
[https://access.redhat.com/kb/docs/DOC-40821](https://access.redhat.com/kb/docs/DOC-40821){.link}。
::: section
::: titlepage
# []{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#proc_gfs2-defragment-gfs2-performance}GFS2 文件系统进行碎片整理 {.title}
:::
虽然 Red Hat Enterprise Linux 中没有 GFS2 的碎片整理工具，但您可以使用
`filefrag`{.literal}
工具识别单个文件，将其复制到临时文件，并重命名临时文件来替换原始文件，以此对单个文件进行碎片整理。
:::
::: section
::: titlepage
# []{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#con_gfs2-node-locking-gfs2-performance}GFS2 节点锁定 {.title}
:::
要获得最佳 GFS2
文件系统性能，了解其操作的基本原理非常重要。单一节点文件系统带有一个缓存，其目的是在频繁使用时减少磁盘访问所造成的访问延迟。在
Linux 中，页面缓存（以及过去的缓冲缓存）提供了这个缓存功能。
使用 GFS2
时，每个节点都有其自身的页面缓存，该缓存中可能包含部分磁盘数据。GFS2
使用一个称为 [*glocks*]{.emphasis} （发音为
gee-locks）的锁定机制，用于维护节点间缓存的完整性。glock
子系统提供了一个缓存管理功能，它使用
[*分布式锁管理器*]{.emphasis}（DLM）作为底层通信层。
glocks
在每个内节点中为缓存提供保护，因此在每个内节点中都有一个锁定用来控制缓存层。如果为
glock 赋予共享模式（DLM 锁定模式：PR），那么那个 glock
保护下的数据可同时被一个或多个节点缓存，因此所有节点都可在本地访问数据。
如果为 glock 赋予专用模式（DLM
锁定模式：EX），那么只有一个节点可缓存那个 glock
下的数据。所有修改数据的操作（比如 `write`{.literal}
系统调用）都使用这个模式。
如果另一个节点请求 glock 但无法立即获得，那么 DLM
会向该节点发送一条信息，或者向目前使用 glock
阻止新请求的节点发送一条信息，要求它们释放其锁定。释放 glock
可能需要较长时间（与大多数文件系统操作相比）。释放一个共享的 glock
只需要将缓存设置为无效，它的速度比较快，并与缓存数据的数量相对应。
释放一个专用 glock 需要清除日志，并将所有更改的数据写入磁盘，然后象共享
glock 一样使缓存失效。
单一节点文件系统与 GFS2
之间的区别在于，单一节点文件系统只有一个缓存，GFS2
在每个节点中都有单独的缓存。在这两种情况下，访问缓存的数据的延迟程度类似，但如果另一个节点之前缓冲了同样的数据，GFS2
对未缓存的数据访问的时间延迟要大得多。
`read`{.literal} (buffered)、`stat,`{.literal} 和 `readdir`{.literal}
等操作只需要一个共享 glock。`write`{.literal}
(buffered)、`mkdir`{.literal}、`rmdir`{.literal} 和 `unlink`{.literal}
等操作需要一个专用的 glock。如果没有发生分配，直接 I/O 读/写操作需要延迟
glock；如果写入需要分配（即扩展文件或热填），则直接 I/O
读/写操作需要延迟 glock。
这有两个主要的性能注意事项。首先，只读操作可在集群中并行化，因为它们可以在每个节点中独立运行。其次，如果有多个节点争夺访问同一内节点，则需要专用
glock 的操作可能会降低性能。因此，考虑每个节点上的工作集是 GFS2
[文件系统性能的一个重要因素，例如，当您执行文件系统备份时，如备份 GFS2
文件系统所述。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_gfs2_file_systems/index?lb_target=production#proc_backing-up-a-gfs2-filesystem-creating-mounting-gfs2){.link}
另外，我们建议您尽可能在 GFS2 中使用 `noatime`{.literal} 或者
`nodiratime`{.literal} 挂载选项，应用程序允许使用
`noatime`{.literal}。这样可防止读取不需要专用锁来更新 `atime`{.literal}
时间戳。
对于关注工作集合或者缓存效率的用户，GFS2 提供可让您监控 GFS2
文件系统性能的工具： Performance Co-Pilot 和 GFS2 tracepoints。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
由于采用 GFS2 缓存的方法，在出现以下任意情况之一时都会获得最佳性能：
::: itemizedlist
-   在所有节点上以只读方式使用内节点。
-   只在单一节点中写入或修改内节点。
:::
请注意，在创建和删除文件的过程中插入和删除目录条目计算为写入目录内节点。
有可能会打破这个规则，但并不常发生。过度忽略这个规则会对性能有严重影响。
如果您对在带有一个读写映射的 GFS2 的一个文件执行
`mmap`{.literal}()，但只从中进行读取操作，则只被看作为一个读操作。
如果您没有设置 `noatime`{.literal} `mount`{.literal}
参数，那么读取也将会导致更新文件时间戳的写操作。我们建议所有 GFS2
用户应该使用 `noatime`{.literal} 挂载，除非对
`atime`{.literal}有具体要求。
:::
:::
::: section
::: titlepage
# []{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#con_posix-locking-issues-gfs2-performance}Posix 锁定的问题 {.title}
:::
当使用 Posix 锁定时，您应该考虑以下问题：
::: itemizedlist
-   使用 Flocks 比使用 Posix 锁要快。
-   在 GFS2 中使用 Posix 锁定的程序应避免使用 `GETLK`{.literal}
    功能，因为在集群的环境中，进程 ID 可能在集群中的不同节点中使用。
:::
:::
::: section
::: titlepage
# []{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#con_troubleshooting-gfs2-performance-gfs2-performance}使用 GFS2 的性能调整 {.title}
:::
通常可以更改有问题的应用程序保存其数据的方法，以便获得显著的性能优势。
典型的问题程序示例为电子邮件服务器。通常会制定包含每个用户的文件的 spool
目录（`mbox`{.literal}），或者为每个用户指定一个目录，其中包含每个信息的文件（`maildir`{.literal}）。当请求到达
IMAP
时，理想的情况是为每个用户赋予一个与特定节点的亲和性。这样一来，他们查看和删除电子邮件信息的请求就会从那个节点的缓存中提供。如果那个节点失败，则可以在不同节点中重启该会话。
当邮件通过 SMTP
方法到达时，那么独立的节点可以再次设置，在默认情况下把特定用户的邮件发送到一个特定的节点。如果默认节点没有启动，则信息可以通过接收节点直接保存到用户的邮件
spool
中。同样，这个设计的目的是在通常情况下只在一个节点中保留缓存的文件集合，但在节点失败时允许直接访问。
这个设置允许最好地使用 GFS2 的页面缓存，并对应用程序（无论
`imap`{.literal} 或 `smtp`{.literal} ）透明地出现故障。
备份通常是另一个值得关注的地方。如果可能最好直接从节点备份每个节点的工作组件，这样可缓存具体的内节点组。如果您有一个在特定时间点定期运行的备份脚本，且发现会因为
GFS2
中运行的其他应用程序而造成反应延迟时，则通常代表没有有效地使用页面缓存。
如果您可以在运行备份脚本时停止运行应用程序，则这就不是一个问题。相反，如果备份脚本只从一个节点中执行备份，则完成后大部分的文件系统内容会在那个节点中被缓存，这会对以后从其他节点访问有一定的性能损失。通过以下命令在备份完成后丢弃备份节点上的
VFS 页面缓存可将此影响缓解到一定程度：
``` literallayout
echo -n 3 >/proc/sys/vm/drop_caches
```
然而，这并非是一个好的解决方案，因为它要保证每个节点中的工作集合是共享的，或多数操作是集群的只读操作，或大量操作是从一个单一节点进行访问的。
:::
::: section
::: titlepage
# []{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#con_gfs2-lockdump-gfs2-performance}使用 GFS2 锁定转储对 GFS2 性能进行故障排除 {.title}
:::
如果由于使用 GFS2 缓存而导致集群性能增加，您可能会看到大量和增长的 I/O
等待时间。您可以使用 GFS2 的锁定转储信息来确定问题的原因。
GFS2 锁定转储信息可以从 `debugfs`{.literal}
文件中收集，该文件可在以下路径名称中找到，假设 `debugfs`{.literal}
挂载在 `/sys/kernel/debug/`{.literal} 上：
``` literallayout
/sys/kernel/debug/gfs2/fsname/glocks
```
文件的内容是一系列行。以 G: 开头的每一行都代表一个
glock，以下行用单个空格缩进，它代表了文件中紧接与 glock 相关的信息项。
使用 `debugfs`{.literal} 文件的最佳方法是，在应用程序遇到问题时，使用
`cat`{.literal} 命令获取文件内容副本（如果您有大量 RAM
和大量缓存的内节点，可能需要很长时间），然后在以后查看得到的数据。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}