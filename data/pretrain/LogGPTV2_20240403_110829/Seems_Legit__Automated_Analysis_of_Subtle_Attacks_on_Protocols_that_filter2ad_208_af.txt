### Summary of New Findings Using Our Signature Models

**Table 3: Summary of New Findings Using Our Signature Models**

| Protocol Property | Previous Analysis (Symbolic Model) | Our New Approach |
|-------------------|------------------------------------|-------------------|
| X.509 Mutual Auth | No attacks discovered               | Efficiently finds new attacks, including previously unreported ones |
| WS Request-Response | No attacks discovered               | Efficiently finds new attacks, including previously unreported ones |
| STS-MAC-fix1      | No attacks discovered               | Efficiently finds new attacks, including previously unreported ones |
| STS-MAC-fix2      | No attacks discovered               | Efficiently finds new attacks, including previously unreported ones |
| DRKey & OPT       | No attacks discovered               | Efficiently finds new attacks, including previously unreported ones |
| ACME Draft 4      | No attacks discovered               | Efficiently finds new attacks, including previously unreported ones |

**Table 4: Verification Results on Further Case Studies**

| Protocol          | Signature Model | Traditional | no-CEO | SVS | Analysis Results | Time in Seconds | Manual |
|-------------------|-----------------|-------------|--------|-----|------------------|-----------------|--------|
| WS-Security       | Traditional     | ✓           | •◦    | ✓   | 3                |                 |        |
| WS-Security (fixed)| no-CEO         | ✓           | •◦    | ✓   | 5                |                 |        |
| LE-00             | SVS             | ✓           | •◦    | ✓   | 12               |                 |        |
| LE-02             | Traditional     | ✓           | •◦    | ✓   | 2                |                 |        |
| DRKey             | All in §3       | ✓           | •◦    | ✓   | 12               | 53              | 98     |
| DRKey (fixed)     | no-DEO          | ✓           | •◦    | ✓   | 13               | 1               | 2      |
| Coll.             | SVS             | ✓           | •◦    | ✓   | 240              | 2640            | 4      |

- **✓**: Tamarin successfully verified the property.
- **•◦**: Tamarin found an attack.
- **Manual**: Tamarin's interactive mode was used to reconstruct the attack trace as Tamarin's built-in heuristics did not terminate in a reasonable timeframe.

### Detailed Analysis of the DRKey and OPT Protocols

#### Attack on DRKey Protocol

The attack arises due to the ability to re-sign secret messages under a new key. The message used to pass keys in DRKey is:
\[ \text{aenc}_{\text{pk}_S,t}(\text{KH2,S}), \text{sign}_{\text{sk}_{H2}}(\text{KH2,S, pk}_S,t, S) \]

Here, H2 produces a message carrying keys intended for S in the session using the temporary public encryption key \(\text{pk}_{S,t}\). During the DRKey protocol, the adversary (as M1) can forge a message to H2, claiming that S wishes to agree on keys for the lower path. When M3 receives the DRKey message from H2, containing a signature and an encrypted key, the adversary (as M3) can re-sign the packet as if it came from M2 and pass it on to D. This is possible even though the adversary does not know the message, and this behavior is not captured by traditional symbolic models.

Even if the DRKey implementation uses a signature scheme where re-signing is not possible (e.g., Ed25519), the colliding signature property can still be used to craft a signature for an unknown message. The rest of DRKey proceeds as normal, at the end of which S and D each hold a key they believe they share with M2, but in fact, they share this key with H2. This constitutes a UKS (Unknown Key Share) attack on the DRKey Protocol.

#### Impact on OPT Protocol

The OPT protocol prescribes a series of chained MACs such that honest routers can detect maliciously-routed packets, and the destination can verify that the correct path was followed. However, in the context of the DRKey attack, S intends to route a packet via M2, but M1 can maliciously alter the route to the lower path. Because S and D share a key with H2, which they believe they share with M2, neither of them can detect this malicious routing. As a consequence, M2 could bill S for routing packets, despite offloading all of the transmission work to the unsuspecting H2.

This attack can also be used to perform a denial of service attack on an honest router by forcing additional packets to pass through it, despite both source and destination believing their packets are traveling a different route.

#### Mitigation and Fix

DRKey is intended for use in the SCION [68] internet architecture and is still under active development. The DRKey authors agree that the attack we found is serious and have modified their protocol according to our proposed fix. The prototype is already updated, and this will be reflected in an extension of their work, currently under submission for publication.

Our proposed fix follows the intuition behind STS-KDF. We do not need to change any of the messages on the wire; instead, we apply a key derivation function that binds each key to the identity of the party who is using it and the party they believe they share it with. This prevents any unknown key share attacks on DRKey, as honest parties will only agree on keys if they also agree on identities. Using our SVS model of digital signatures, Tamarin verifies the fix in only 7 seconds.

### Summary

In Table 3, we relate our attacks to previously published academic papers. Notably, we have uncovered previously unknown attacks on real-world protocols that have undergone formal analysis. Each attack relies on a subtle signature scheme property, which previous analysis tools could not take into account. We have responsibly disclosed our attacks.

We provide a brief summary of the performance of our case studies and their proposed fixes in Table 4, showing the overall tractability of our approach. Our combined approach (verification with SVS, attack finding with the equational model) demonstrates its utility: SVS is both more efficient and finer-grained when the protocol verifies. In contrast, when there is an attack, our attack-finding models are quickest.

### Related Work

#### Automated Computational Verification

Computational proofs do not rely on an abstraction of signature schemes, instead reducing security of a protocol directly to EUF-CMA. A few tools aim to construct these proofs either automatically or with human assistance. These proofs capture all behaviors of the signature scheme by definition, but they are generally more challenging to produce and harder to scale to more complex protocols.

#### Computational Soundness

Backes et al. [23] consider the computational soundness of existing symbolic models for digital signatures. A symbolic model is computationally sound for a particular class of protocols and properties if the existence of a symbolic proof of a property implies the existence of a computational one. Most computational soundness approaches require that primitives be used in a carefully controlled fashion, which real-world protocols often do not meet, limiting their applicability.

Bana et al. propose an alternative model for protocol verification called the Computationally Complete Symbolic Attacker. Their approach is based on adversary restrictions rather than explicit capabilities. While powerful, their approach is in its early stages, works only for a bounded number of sessions, and does not have tool support yet, unlike ours which is unbounded and has full tool support. Additionally, their approach focuses on proof finding without support for establishing attacks.

### Conclusions

In this work, we revisited many subtle behaviors of digital signature schemes, such as key substitution and malleability, and showed how they fall between the cracks: their absence is not guaranteed by the classical EUF-CMA security definition for signatures, but their absence is assumed by modern automated protocol analyses. The presence of such behaviors can lead to critical attacks.

We developed a range of alternative signature models for use in modern tools. Our models capture a wide range of these behaviors and provide a general theory for verifying their absence. We thereby provide the first automated procedure to show the absence or presence of attacks exploiting these subtle behaviors.

As a side effect of evaluating the effectiveness of our work, we found two new attacks on protocols, which is remarkable given that the WS-Security protocols served as the basis of globally used technologies and were under close scrutiny, and both WS-Security and DRKey were previously proven secure. Our work increases the scope of attacks considered by automated analysis tools, and future protocol analysis models that include our more accurate equations will be able to find more attacks or show the absence of more attack types.

A long-term question is whether it is possible to "close the gap" between falsification and verification, showing that any attack found in our general theory corresponds to a real attack on the underlying signature scheme itself.

### References

[1] OASIS Web Services Security (WSS) TC. Retrieved February 2nd, 2019 from https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wss#technical

[2] Oracle® Fusion Middleware: WS-Policy Reference. Retrieved February 2nd, 2019 from https://docs.oracle.com/cd/E55956_01/doc.11123/user_guide/content/ws_policies.html

[3] ACME Draft Barnes. Retrieved February 2nd, 2019 from https://datatracker.ietf.org/doc/draft-barnes-acme/01/

[4] ACME Draft Barnes. Retrieved February 2nd, 2019 from https://datatracker.ietf.org/doc/draft-barnes-acme/03/

[5] ACME Draft Barnes. Retrieved February 2nd, 2019 from https://datatracker.ietf.org/doc/draft-barnes-acme/03/

[68] SCION Internet Architecture. Retrieved February 2nd, 2019 from [URL]

[23] Backes et al. Computational Soundness of Symbolic Models. [Publication Details]

[26] Bana et al. Computationally Complete Symbolic Attacker. [Publication Details]

[27] Bana et al. Computationally Complete Symbolic Attacker. [Publication Details]