# Title: ZOZZLE: Fast and Precise In-Browser JavaScript Malware Detection

## Authors
- Charlie Curtsinger, University of Massachusetts, Amherst
- Benjamin Livshits, Microsoft Research
- Benjamin G. Zorn, Microsoft Research
- Christian Seifert, Microsoft

## Abstract
JavaScript-based malware attacks are a significant threat in today's cybersecurity landscape, as they can be launched against unsuspecting users visiting seemingly harmless web pages. While several techniques have been proposed to address these exploits, their adoption in browsers has been slow due to the performance overhead they introduce. This paper introduces ZOZZLE, a low-overhead, fast, and precise solution for detecting and preventing JavaScript malware in the browser.

ZOZZLE employs Bayesian classification of hierarchical features extracted from the JavaScript abstract syntax tree (AST) to identify syntax elements that are highly predictive of malware. Our experimental evaluation demonstrates that ZOZZLE effectively detects JavaScript malware with an extremely low false positive rate of 0.0003% (less than one in a quarter million). Despite its high accuracy, ZOZZLE is fast, processing over one megabyte of JavaScript code per second.

## 1. Introduction
In recent years, mass-scale exploitation of memory-based vulnerabilities has shifted towards heap spraying attacks. Traditional vulnerabilities, such as stack- and heap-based buffer overruns, are now often mitigated by compiler techniques like StackGuard [7] or operating system mechanisms like NX/DEP and ALSR [12]. Although several solutions for heap spraying have been proposed [8, 9, 21], none are lightweight enough for integration into commercial browsers.

A browser-based detection technique remains attractive because offline scanning, while useful, is not always effective. Offline scanning can miss URLs due to the vast number of sites on the web and is less effective against transient malware that frequently appears and disappears.

ZOZZLE is a mostly static JavaScript malware detector designed for browser integration. It uses the browser's JavaScript engine to collect and process runtime-generated JavaScript code, addressing the challenge of obfuscation. Fully static analysis is difficult due to the prevalence of JavaScript code obfuscation and runtime code generation in both benign and malicious code.

### Challenges
- **Deployment**: The solution must be deployable in mainstream browsers.
- **Performance**: Detection must be fast enough for in-browser use.
- **Obfuscated Malware**: Both benign and malicious JavaScript code are often obfuscated, making purely static detection ineffective.
- **Low False Positive Rates**: Given the number of URLs on the web, even very low false positive rates (e.g., 0.0003%) are necessary.
- **Malware Transience**: Transient malware compromises the effectiveness of offline-only scanning.

ZOZZLE leverages the JavaScript runtime engine to detect attempts to obscure malware using `eval`, `document.write`, etc., by hooking the runtime and analyzing the JavaScript just before execution. This unfolded JavaScript is then passed to a static classifier trained on features of the JavaScript AST. We train the classifier using labeled malware samples collected with the NOZZLE dynamic heap-spraying detector [21]. Related work [4, 6, 14, 22] also classifies JavaScript malware using a combination of static and dynamic features but relies on emulation, which is slower and less accurate.

### Contributions
- **Mostly Static Malware Detection**: ZOZZLE is a highly precise, lightweight, and mostly static JavaScript malware detector based on extensive analysis of real malware sites.
- **AST-Based Detection**: ZOZZLE uses hierarchical (context-sensitive) features from the JavaScript AST, providing increased precision compared to naive text-based classification.
- **Fast Classification**: ZOZZLE includes fast multi-feature matching algorithms that scale to hundreds or even thousands of features, enabling rapid scanning.
- **Evaluation**: ZOZZLE is evaluated in terms of performance and malware detection rates, demonstrating an extremely low false positive rate and high throughput.

### Paper Organization
- **Section 2**: Background on JavaScript-based malware and heap spraying attacks.
- **Section 3**: Implementation details of our analysis.
- **Section 4**: Experimental methodology.
- **Section 5**: Experimental evaluation.
- **Section 6**: Discussion of limitations and deployment concerns.
- **Section 7**: Related work.
- **Section 8**: Conclusions.
- **Appendices**:
  - Appendix A: Hand-analyzed malware samples.
  - Appendix B: Tuning ZOZZLE for better precision.
  - Appendix C: Examples of non-heap spray malware and antivirus false positives.

## 2. Background
This section provides background on JavaScript-based malware, focusing on heap spraying attacks.

### 2.1 JavaScript Malware Background
Figure 1 shows an example of JavaScript malware performing a heap spray. The malware consists of three parts:
- **Shellcode**: Executable machine code placed on the browser heap.
- **NOP Sled**: A block of NOP instructions preceding the shellcode to increase the likelihood of successful exploitation.
- **Spray**: Allocates many copies of the NOP sled/shellcode in the browser heap, often using an array of strings to defeat ASLR.
- **Trigger**: Exploits a vulnerability in the browser, such as a known flaw in Internet Explorer 6.

Many attacks are obfuscated to avoid detection, often using eval unfolding to generate more code at runtime.

### 2.2 Characterizing Malicious JavaScript
ZOZZLE training is based on data collected with the NOZZLE heap spraying detector. We used a web crawler to visit randomly selected URLs and processed them with NOZZLE to detect malware. Once identified, we manually examined and categorized the code, finding that most malware follows a traditional long-tail pattern when unfolded.

Offline malware detection must deal with transience and cloaking. Transient malicious URLs go offline or become benign after some time, and cloaking hides attacks from specific user agents or IP addresses. Figure 2 shows the transience of detected malicious URLs, with nearly 20% gone after a single day. In-browser detection is desirable to catch new malware before it affects the user.

### 2.3 Dynamic Malware Structure
JavaScript malware often uses obfuscation to avoid detection, with eval unfolding being the most common method. Figure 3 illustrates the process of code unfolding, showing how multiple levels of code are generated before the final, malicious version emerges. Figure 4 shows the distribution of JavaScript context counts for benign and malicious URLs, indicating that the number of contexts is not a reliable indicator of malicious intent.

## 3. Implementation
[Detailed implementation details will follow in this section.]

---

This revised version aims to provide a clear, coherent, and professional presentation of the research, making it easier for readers to understand the significance and contributions of ZOZZLE.