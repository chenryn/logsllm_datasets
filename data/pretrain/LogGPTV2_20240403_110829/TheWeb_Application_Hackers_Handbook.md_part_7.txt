to remain widespread.
Summary
In a little over a decade, the World Wide Web has evolved from purely static
information repositories into highly functional applications that process sensitive
data and perform powerful actions with real-world consequences. During this
development, several factors have combined to bring about the weak security
posture demonstrated by the majority of today’s web applications.
Most applications face the core security problem that users can submit arbi-
trary input. Every aspect of the user’s interaction with the application may be
malicious and should be regarded as such unless proven otherwise. Failure to
properly address this problem can leave applications vulnerable to attack in
numerous ways.
All the evidence about the current state of web application security indicates
that although some aspects of security have indeed improved, entirely new
threats have evolved to replace them. The overall problem has not been resolved
on any signifi cant scale. Attacks against web applications still present a serious
threat to both the organizations that deploy them and the users who access them.
cc0011..iinndddd 1155 88//1199//22001111 1122::0022::0044 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 16
cc0011..iinndddd 1166 88//1199//22001111 1122::0022::0044 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 17
CHAPTER
2
Core Defense Mechanisms
The fundamental security problem with web applications — that all user input
is untrusted — gives rise to a number of security mechanisms that applica-
tions use to defend themselves against attack. Virtually all applications employ
mechanisms that are conceptually similar, although the details of the design
and the effectiveness of the implementation vary greatly.
The defense mechanisms employed by web applications comprise the following
core elements:
n Handling user access to the application’s data and functionality to prevent
users from gaining unauthorized access
n Handling user input to the application’s functions to prevent malformed
input from causing undesirable behavior
n Handling attackers to ensure that the application behaves appropriately
when being directly targeted, taking suitable defensive and offensive
measures to frustrate the attacker
n Managing the application itself by enabling administrators to monitor its
activities and confi gure its functionality
Because of their central role in addressing the core security problem, these
mechanisms also make up the vast majority of a typical application’s attack
surface. If knowing your enemy is the fi rst rule of warfare, then understanding
these mechanisms thoroughly is the main prerequisite for being able to attack
17
cc0022..iinndddd 1177 88//1199//22001111 1122::0022::4411 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 18
18 Chapter 2 n Core Defense Mechanisms
applications effectively. If you are new to hacking web applications (and even
if you are not), you should be sure to take time to understand how these core
mechanisms work in each of the applications you encounter, and identify the
weak points that leave them vulnerable to attack.
Handling User Access
A central security requirement that virtually any application needs to meet is
controlling users’ access to its data and functionality. A typical situation has
several different categories of user, such as anonymous users, ordinary authenti-
cated users, and administrative users. Furthermore, in many situations different
users are permitted to access a different set of data. For example, users of a web
mail application should be able to read their own e-mail but not other people’s.
Most web applications handle access using a trio of interrelated security
mechanisms:
n Authentication
n Session management
n Access control
Each of these mechanisms represents a signifi cant area of an application’s
attack surface, and each is fundamental to an application’s overall security
posture. Because of their interdependencies, the overall security provided by
the mechanisms is only as strong as the weakest link in the chain. A defect in
any single component may enable an attacker to gain unrestricted access to the
application’s functionality and data.
Authentication
The authentication mechanism is logically the most basic dependency in an
application’s handling of user access. Authenticating a user involves establishing
that the user is in fact who he claims to be. Without this facility, the application
would need to treat all users as anonymous — the lowest possible level of trust.
The majority of today’s web applications employ the conventional authen-
tication model, in which the user submits a username and password, which
the application checks for validity. Figure 2-1 shows a typical login function.
In security-critical applications such as those used by online banks, this basic
model is usually supplemented by additional credentials and a multistage login
process. When security requirements are higher still, other authentication mod-
els may be used, based on client certifi cates, smartcards, or challenge-response
tokens. In addition to the core login process, authentication mechanisms often
employ a range of other supporting functionality, such as self-registration,
account recovery, and a password change facility.
cc0022..iinndddd 1188 88//1199//22001111 1122::0022::4411 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 19
Chapter 2 n Core Defense Mechanisms 19
Figure 2-1: A typical login function
Despite their superfi cial simplicity, authentication mechanisms suffer from a
wide range of defects in both design and implementation. Common problems
may enable an attacker to identify other users’ usernames, guess their pass-
words, or bypass the login function by exploiting defects in its logic. When
you are attacking a web application, you should invest a signifi cant amount of
attention to the various authentication-related functions it contains. Surprisingly
frequently, defects in this functionality enable you to gain unauthorized access
to sensitive data and functionality.
Session Management
The next logical task in the process of handling user access is to manage the
authenticated user’s session. After successfully logging in to the application, the
user accesses various pages and functions, making a series of HTTP requests from
his browser. At the same time, the application receives countless other requests
from different users, some of whom are authenticated and some of whom are
anonymous. To enforce effective access control, the application needs a way to
identify and process the series of requests that originate from each unique user.
Virtually all web applications meet this requirement by creating a session for
each user and issuing the user a token that identifi es the session. The session
itself is a set of data structures held on the server that track the state of the user’s
interaction with the application. The token is a unique string that the applica-
tion maps to the session. When a user receives a token, the browser automati-
cally submits it back to the server in each subsequent HTTP request, enabling
the application to associate the request with that user. HTTP cookies are the
standard method for transmitting session tokens, although many applications
use hidden form fi elds or the URL query string for this purpose. If a user does
not make a request for a certain amount of time, the session is ideally expired,
as shown in Figure 2-2.
cc0022..iinndddd 1199 88//1199//22001111 1122::0022::4411 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 20
20 Chapter 2 n Core Defense Mechanisms
Figure 2-2: An application enforcing session timeout
In terms of attack surface, the session management mechanism is highly
dependent on the security of its tokens. The majority of attacks against it seek to
compromise the tokens issued to other users. If this is possible, an attacker can
masquerade as the victim user and use the application just as if he had actually
authenticated as that user. The principal areas of vulnerability arise from defects
in how tokens are generated, enabling an attacker to guess the tokens issued to
other users, and defects in how tokens are subsequently handled, enabling an
attacker to capture other users’ tokens.
A small number of applications dispense with the need for session tokens by
using other means of reidentifying users across multiple requests. If HTTP’s
built-in authentication mechanism is used, the browser automatically resubmits
the user’s credentials with each request, enabling the application to identify the
user directly from these. In other cases, the application stores the state infor-
mation on the client side rather than the server, usually in encrypted form to
prevent tampering.
Access Control
The fi nal logical step in the process of handling user access is to make and enforce
correct decisions about whether each individual request should be permitted or
denied. If the mechanisms just described are functioning correctly, the applica-
tion knows the identity of the user from whom each request is received. On this
basis, it needs to decide whether that user is authorized to perform the action,
or access the data, that he is requesting, as shown in Figure 2-3.
The access control mechanism usually needs to implement some fi ne-grained
logic, with different considerations being relevant to different areas of the
application and different types of functionality. An application might support
numerous user roles, each involving different combinations of specifi c privileges.
Individual users may be permitted to access a subset of the total data held within
the application. Specifi c functions may implement transaction limits and other
checks, all of which need to be properly enforced based on the user’s identity.
Because of the complex nature of typical access control requirements, this
mechanism is a frequent source of security vulnerabilities that enable an attacker
cc0022..iinndddd 2200 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 21
Chapter 2 n Core Defense Mechanisms 21
to gain unauthorized access to data and functionality. Developers often make
fl awed assumptions about how users will interact with the application and
frequently make oversights by omitting access control checks from some appli-
cation functions. Probing for these vulnerabilities is often laborious, because
essentially the same checks need to be repeated for each item of functionality.
Because of the prevalence of access control fl aws, however, this effort is always
a worthwhile investment when you are attacking a web application. Chapter
8 describes how you can automate some of the effort involved in performing
rigorous access control testing.
Figure 2-3: An application enforcing access control
Handling User Input
Recall the fundamental security problem described in Chapter 1: All user input
is untrusted. A huge variety of attacks against web applications involve submit-
ting unexpected input, crafted to cause behavior that was not intended by the
application’s designers. Correspondingly, a key requirement for an application’s
security defenses is that the application must handle user input in a safe manner.
Input-based vulnerabilities can arise anywhere within an application’s func-
tionality, and in relation to practically every type of technology in common use.
“Input validation” is often cited as the necessary defense against these attacks.
However, no single protective mechanism can be employed everywhere, and
defending against malicious input is often not as straightforward as it sounds.
Varieties of Input
A typical web application processes user-supplied data in many different forms.
Some kinds of input validation may not be feasible or desirable for all these
forms of input. Figure 2-4 shows the kind of input validation often performed
by a user registration function.
cc0022..iinndddd 2211 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 22
22 Chapter 2 n Core Defense Mechanisms
Must contain at least 4 characters
Must contain at least 4 characters
Please provide a valid email address
Must contain only numbers
Figure 2-4: An application performing input validation
In many cases, an application may be able to impose very stringent valida-
tion checks on a specifi c item of input. For example, a username submitted to a
login function may be required to have a maximum length of eight characters
and contain only alphabetical characters.
In other cases, the application must tolerate a wider range of possible input.
For example, an address fi eld submitted to a personal details page might legiti-
mately contain letters, numbers, spaces, hyphens, apostrophes, and other char-
acters. However, for this item, restrictions still can be feasibly imposed. The data
should not exceed a reasonable length limit (such as 50 characters) and should
not contain any HTML markup.
In some situations, an application may need to accept arbitrary input from
users. For example, a user of a blogging application may create a blog whose
subject is web application hacking. Posts and comments made to the blog may
quite legitimately contain explicit attack strings that are being discussed. The
application may need to store this input in a database, write it to disk, and display
it back to users in a safe way. It cannot simply reject the input just because it
looks potentially malicious without substantially diminishing the application’s
value to some of its user base.
In addition to the various kinds of input that users enter using the browser
interface, a typical application receives numerous items of data that began their
life on the server and that are sent to the client so that the client can transmit
them back to the server on subsequent requests. This includes items such as
cookies and hidden form fi elds, which are not seen by ordinary users of the
application but which an attacker can of course view and modify. In these cases,
applications can often perform very specifi c validation of the data received. For
example, a parameter might be required to have one of a specifi c set of known
values, such as a cookie indicating the user’s preferred language, or to be in a
specifi c format, such as a customer ID number. Furthermore, when an applica-
tion detects that server-generated data has been modifi ed in a way that is not
possible for an ordinary user with a standard browser, this often indicates
that the user is attempting to probe the application for vulnerabilities. In these
cc0022..iinndddd 2222 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 23
Chapter 2 n Core Defense Mechanisms 23
cases, the application should reject the request and log the incident for potential
investigation (see the “Handling Attackers” sectionlater in this chapter).
Approaches to Input Handling
Various broad approaches are commonly taken to the problem of handling
user input. Different approaches are often preferable for different situations
and different types of input, and a combination of approaches may sometimes
be desirable.
“Reject Known Bad”
This approach typically employs a blacklist containing a set of literal strings or
patterns that are known to be used in attacks. The validation mechanism blocks
any data that matches the blacklist and allows everything else.
In general, this is regarded as the least effective approach to validating user
input, for two main reasons. First, a typical vulnerability in a web applica-
tion can be exploited using a wide variety of input, which may be encoded or
represented in various ways. Except in the simplest of cases, it is likely that a
blacklist will omit some patterns of input that can be used to attack the applica-
tion. Second, techniques for exploitation are constantly evolving. Novel methods
for exploiting existing categories of vulnerabilities are unlikely to be blocked
by current blacklists.
Many blacklist-based fi lters can be bypassed with almost embarrassing ease
by making trivial adjustments to the input that is being blocked. For example:
n IfSELECT is blocked, try SeLeCt
n Ifor 1=1-- is blocked, try or 2=2--
n If alert(‘xss’) is blocked, try prompt(‘xss’)
In other cases, fi lters designed to block specifi c keywords can be bypassed by
using nonstandard characters between expressions to disrupt the tokenizing
performed by the application. For example:
SELECT/*foo*/username,password/*foo*/FROM/*foo*/users
Finally, numerous blacklist-based fi lters, particularly those implemented in
web application fi rewalls, have been vulnerable to NULL byte attacks. Because
of the different ways in which strings are handled in managed and unmanaged
execution contexts, inserting a NULL byte anywhere before a blocked expression
can cause some fi lters to stop processing the input and therefore not identify
the expression. For example:
%00
cc0022..iinndddd 2233 88//1199//22001111 1122::0022::4422 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 24
24 Chapter 2 n Core Defense Mechanisms
Various other techniques for attacking web application fi rewalls are described
in Chapter 18.
NOTE Attacks that exploit the handling of NULL bytes arise in many areas
of web application security. In contexts where a NULL byte acts as a string
delimiter, it can be used to terminate a fi lename or a query to some back-
end component. In contexts where NULL bytes are tolerated and ignored
(for example, within HTML in some browsers), arbitrary NULL bytes can be
inserted within blocked expressions to defeat some blacklist-based fi lters.
Attacks of this kind are discussed in detail in later chapters.
“Accept Known Good”
This approach employs a whitelist containing a set of literal strings or patterns,
or a set of criteria, that is known to match only benign input. The validation
mechanism allows data that matches the whitelist and blocks everything else.
For example, before looking up a requested product code in the database, an
application might validate that it contains only alphanumeric characters and is
exactly six characters long. Given the subsequent processing that will be done
on the product code, the developers know that input passing this test cannot
possibly cause any problems.
In cases where this approach is feasible, it is regarded as the most effective
way to handle potentially malicious input. Provided that due care is taken in
constructing the whitelist, an attacker will be unable to use crafted input to
interfere with the application’s behavior. However, in numerous situations an
application must accept data for processing that does not meet any reasonable
criteria for what is known to be “good.” For example, some people’s names contain
an apostrophe or hyphen. These can be used in attacks against databases, but
it may be a requirement that the application should permit anyone to register
under his or her real name. Hence, although it is often extremely effective, the
whitelist-based approach does not represent an all-purpose solution to the
problem of handling user input.
Sanitization
This approach recognizes the need to sometimes accept data that cannot be
guaranteed as safe. Instead of rejecting this input, the application sanitizes it
in various ways to prevent it from having any adverse effects. Potentially mali-
cious characters may be removed from the data, leaving only what is known to
be safe, or they may be suitably encoded or “escaped” before further processing