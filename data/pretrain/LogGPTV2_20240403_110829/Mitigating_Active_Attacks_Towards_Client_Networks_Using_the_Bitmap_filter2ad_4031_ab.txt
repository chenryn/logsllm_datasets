e
1
8
0
+
e
1
6
0
+
e
1
4
0
+
e
1
2
0
+
e
1
0
0
+
e
1
0
0
.
1
5
9
.
0
0
9
.
0
5
8
.
0
0
5
10
15
20
Delay (in seconds)
Figure 2. Trafﬁc characteristics extracted
from a client network. The sampled trafﬁc is a
6-hour packet trace collected from six class-
C client networks on a campus.
3.3 Construct the Bitmap Filter
Based on the observations that 1) the client network traf-
ﬁc is bi-directional, and 2) most out-in packet delays are
short, a na¨ıve solution is to ﬁlter out unwanted trafﬁc. Sup-
pose that a timer with an initial value of T is associated
with the address tuple τout = {source-address, source-
port, destination-address, destination-port} of each out-
going packet that is new to an edge router. If the tuple τout
is not new to the router, the value of the associated timer is
simply reset to T . The timer reduces every time unit Δt.
When the timer expires (reaches zero), the associated ad-
dress tuple is deleted. For each incoming packet, the router
extracts the address tuple τin and checks if the inverse tuple
τ−1
in exists. If it exists, the packet is bypassed; otherwise, it
is dropped.
Like SPI-based mechanisms, the above solution has sev-
eral drawbacks. For example, the complexity of storage and
computation make it infeasible to deploy in an ISP network.
Thus, a bitmap ﬁlter, which is a composite of k bloom ﬁl-
ters [2] of equal size 2n-bit, denoted as a {k×n}-bitmap ﬁl-
ter, is used instead. An example of a bitmap is illustrated in
Figure 3. Each column in the bitmap represents a bit-vector
of a bloom ﬁlter. For convenience, in the algorithm, the
bit-vector of the ith bloom ﬁlter is written as bit-vector[i].
H1(t)
H2(t)
Hm(t)
n-bit
1
1
2
1
3
1
1
1
1
1
1
1
...
...
...
...
...
k
1
1
1
2n
bits
Figure 3. An example of a {k × n}-bitmap, the
core architecture for a bitmap ﬁlter.
First, the {k × n}-bitmap is initialized to zero, and
an index of the current bit vector idx is set to the ﬁrst
bit-vector. All the bloom ﬁlters in the bitmap share the
same m hash functions, each of which should only out-
put an n-bit value. An output that exceeds n-bit should
be truncated. The bitmap ﬁlter comprises two algorithms,
the b.rotate algorithm, which clears expired bits from the
bitmap, and the b.ﬁlter algorithm, marks and looks up bits
in the bitmap. The algorithms are detailed in Algorithm 1
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
and Algorithm 2, respectively. The b.rotate algorithm is
quite simple. The algorithm runs every time unit Δt. When
it is activated, the index of the current bit vector idx is set to
the next bit vector and all bits in the previous bit vector are
set to zero. For example, assume there are k bit vectors in a
bitmap ﬁlter indexed from {1,··· , k}. If the current index
is set to the 1st bit vector, then the last bit vector will be
the kth bit-vector; however, if the current index is set to the
jth(1 < j ≤ k) bit vector, then the last bit vector will be
the (j − 1)th bit-vector.
Algorithm 1 The Timer Handler - b.rotate()
Require: An initialized {k × n}-bitmap and an index to
1: last = idx
2: idx = (idx + 1) (mod k)
3: set all bits in bit-vector[last] to zero
4: return idx
current bit vector idx.
The bitmap is marked and looked up using the b.ﬁlter
algorithm, as shown in Algorithm 2. When a packet is
received by an edge router, the b.ﬁlter algorithm is ap-
plied to determine whether the packet should be bypassed
or dropped. For an outgoing packet, the b.ﬁlter iteratively
applies all the m hash functions on the tuple τout and marks
the corresponding bits in all bit vectors to a value of 1.
Outgoing packets are always bypassed. On the other hand,
when an incoming packet is received, the b.ﬁlter iteratively
applies all the hash functions on the tuple τ−1
in and checks if
the corresponding bit in the current bit vector indicated by
the index idx is marked or not. If a bit is not marked, then
the packet will be dropped.
for h ∈ hash-function list do
j = h(τout)
mark the jth bit in all bit vectors as 1
rent bit vector idx, and a packet pkt to be inspected.
Algorithm 2 The Filtering Function - b.ﬁlter()
Require: An initialized {k × n}-bitmap, an index of cur-
1: if pkt is an output packet then
2:
3:
4:
end for
5:
6: else if pkt is an input packet then
for h ∈ hash-function list do
7:
8:
9:
10:
11:
12:
13: end if
14: return PASS
j = h(τ−1
in )
if the jth bit in bit-vector[idx] is 0 then
return DROP
end if
end for
outgoing packet, it only hashes {source-address, source-
port, destination-address}.
In contrast, for an incom-
ing packet, only {destination-address, destination-port,
source-address} are used to compute the hash value. Fur-
ther details are given in Section 5.1.
In summary, the “mark” action is always performed for
all bit vectors, the “look up” and the “clean up” actions are
only performed for the current bit vector and the last bit
vector, respectively. The combination of these operations
achieves the same purpose as the na¨ıve solution described
at the beginning of this sub-section, which effectively ﬁlters
out unwanted trafﬁc sent to a client network.
3.4 Choose Proper Parameters
As stated in Section 3.3, several parameters for the
bitmap ﬁlter must be decided. They are the k - the num-
ber of bit vectors in a bitmap, the n - the size of a bit vector,
the Δt - the time unit to clean up a bit vector, and the m -
the number of hash functions used in the bitmap ﬁlter. The
k and n parameters decide how much storage space is re-
quired for the bitmap ﬁlter; and the k and Δt parameters
decide the countdown time of the timer Te mentioned in
Section 3.2. Thus, given a moderate expiry timer Te and a
Δt(cid:6).
proper time unit Δt, the value k can be decided by (cid:5) Te
Recall the result in Section 3.2. Te should not be too
long, since the port-reuse effect may incur more false nega-
tives. In other words, a packet that should be dropped may
be accepted by the ﬁlter. However, to prevent overkilling
connections with longer delays, Te should not be too short
either. A value below 60 seconds, such as 20 or 30 seconds,
would be acceptable. On the other hand, the time unit Δt
need not to be too short. Although a shorter Δt improves
the timer’s granularity, a Δt that is too short may raise the
frequency of running bitmap clean-ups too much and thus
reduce the overall performance of the system. A value of 4
or 5 seconds would be appropriate.
The n is a ﬂexible parameter. An ISP can decide the
value according to the number of concurrently active con-
nections and the memory space that they are willing to de-
vote to the system. Note that a small n will also raise the
possibility of false negatives and reduce the effectiveness
of packet ﬁltering. To avoid the problem, more hash func-
tions (i.e., m) may be used to reduce false negatives. When
deploying such a system, administrators should consider a
trade-off between storage space and computation power to
decide the value of n and m. We further evaluate the effects
of different sets of parameters in the next section.
4 Evaluations
Note that the bitmap ﬁlter does not use all ﬁelds in the
address tuple τ to compute the hash value. Instead, for an
In this section, we evaluate several aspects of the pro-
posed solution by analyses, comparisons, or simulations.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
4.1 False Positives and False Negatives
In our solution, the deﬁnition of a false positive is the
same as that used in generic intrusion detection mecha-
nisms. That is, an instance of normal behavior is detected
as an attack. In contrast, a false negative is an attack that
is treated as normal behavior. Since the bitmap ﬁlter works
in ﬂavor of a positive listing, only incoming packets with
an out-in packet delay longer than the expiry timer Te are
ﬁltered out. Thus, the number of false positives is very low.
As the result in Section 3.2 shows, false positives should be
lower than 1% when Te is greater than 2.8 seconds.
However, we should focus more on false negatives. As-
sume m hash functions are applied to a single incoming
packet and the utilization of the current bit vector is U =
b
2n , where b is the number of marked bits in a bit vector.
The probability p that a random incoming tuple τ will pen-
etrate the bitmap ﬁlter is
(cid:2)
(cid:3)m
b
2n
p = U m =
.
(1)
The number of marked bits on the bit vector should be pro-
portional to the number of active connections c inside a time
unit of Te. If we assume that the results of the hash func-
tions seldom collide when the utilization of the bit vector is
low, Equation 1 can be rewritten as
(cid:4) c · m
(cid:5)m
2n
p (cid:7)
.
(2)
Given a bit vector size n and the expected max number of
active connections c, then to minimize the desired penetra-
tion probability p, we differentiate Equation 2 and get
(cid:5)m(cid:4)
(cid:4) c
2n
p(cid:2) =
· m
1 + ln
(cid:4) c
2n
(cid:5)(cid:5)
· m
.
(3)
Thus, m that minimizes the penetration probability p can be
obtained by solving 1 + ln( c
2n · m) = 0, which is
m = e−1 · 2n
c
,
(4)
where e is the base for the natural logarithm. By replacing
m in Equation 2 with e−1·2n
c when m minimizes the pene-
tration probability p, the ratio of the expected max number
of active connections c should satisfy
c
2n
≤ − 1
e ln p
.
(5)
For example, if we adopt a bitmap ﬁlter of size n = 20
(about 1-million bits) with k = 4, and Δt = 5 seconds, and
set the desired penetration probability to be roughly 10%,
5%, and 1%, the number of active connections inside a time
unit Te = 20 seconds should be less than 167K, 125K, and
83K, respectively. Compared with our trace data, which has
only average 15K active connections inside a time unit of 20
seconds, these upper bounds are much higher than the actual
trafﬁc. The number of used hash functions m in the setup
can be 3, and the memory space required by the bitmap ﬁlter
is only (k × 2n)/8 = 512K bytes.
4.2 Performance
The bitmap ﬁlter is efﬁcient because almost all opera-
tions can be performed in constant time. The processing
time for an outgoing packet is O(m × th) + O(k × tm),
where m is the number of used hash functions, th is the
time taken to execute a hash function, k is the number of
bit vectors to be marked, and tm is the processing time to
mark a bit. Since hash functions can be implemented as
a dedicated hardware chip, the processing time is negligi-
ble. Thus, the outgoing packet process can be treated as
a constant time operation. Processing incoming packets is
simpler than for outgoing packets. The required process-
ing time is O(m × th) + O(tc) where tc is the processing
time need to check whether a bit on a bit vector is marked
or not. Incoming packet processing is also a constant time
operation.
The most time consuming operation may be the b.rotate
algorithm, which executes every Δt seconds. The algo-
rithm ﬁrst advances the current index idx to set to the next
bit vector, and then resets all bits in the last bit vector to
zero. Thus, the operation is proportional to the size of a
bit vector, which is O(n). However, since the memory
space of a bit vector is ﬁxed and continuous, implement-
ing such an algorithm in software or hardware should be
very simple and efﬁcient. We also compare the performance
of the bitmap ﬁlter and SPI based-implementations. In Ta-
ble 1, the “hash+link-list” implementation is the method
used in the popular open-source Linux operating system.
The “AVL-tree” is an implementation that efﬁciently re-
duces the time complexity searching ﬂow states. Our so-
lution is listed in the column labelled “bitmap ﬁlter”.
4.3 Simulation with the Packet Trace
We also perform several simulations to verify the effec-
tiveness of the bitmap ﬁlter. A bitmap ﬁlter and an SPI-
based packet ﬁlter are both implemented. The input to both
ﬁlters is the packet trace used in Section 3.2. First, we com-
pare the packet drop rate of the ﬁlters. The SPI ﬁlter is
set to delete idle connections after 240 seconds, which is
the default TIME WAIT timeout used in the Microsoft win-
dows operating system [12]. The bitmap ﬁlter is conﬁg-
ured as follows: n = 20, k = 4, Te = 20, and Δt = 5.
This constructs a 512K-byte bitmap ﬁlter that handles the
out-in packet latency shorter than 20 seconds. As Figure 4
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Table 1. Performance comparison of the bitmap ﬁlter and SPI-based ﬁlters.
Storage space -
Complexity.
Storage space -
Handle maxima 2.56M concurrent
connections.
Computation complexity -
Insert a new state.
Computation complexity -
Lookup an existing state.
Computation complexity -
Garbage collection (d).
Hardware acceleration
Hash + link-list
(Linux)
O(n)
AVL-tree
O(n)
Bitmap ﬁlter
O(n)(a)
76.8M bytes (b)
76.8M bytes (b)
8M bytes (c)
O(1)
O(n)
O(n)(e)
Possible
O(log n)
O(log n)
O(n)(e)
Difﬁcult
O(1)
O(1)
O(n)(f )
Easy
(a) Although the complexity of storage space is also O(n), the required memory space of the bitmap ﬁlter is much smaller than other implementations when handling the same
number of active connections. (b) The size of a ﬂow state is set at 30 bytes, including source address, source port, destination address, destination port, connection state, timestamp,
and pointers to maintain the list or tree data structure. (c) The random packet penetration rate is set at about 10%. (d) The purpose of garbage collection is to remove expired ﬂow
states. (e) The garbage collector has to traverse all states kept in the memory. (f) The garbage collector only resets values in a ﬁxed-size and continuous memory to zero.