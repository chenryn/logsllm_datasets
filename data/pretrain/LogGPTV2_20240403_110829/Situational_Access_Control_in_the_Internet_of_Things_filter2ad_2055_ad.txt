interaction with the rESO. SC constructs an is_active() request to
the rESO, specifying the subject identity (GUID) and access right
request (URI, access type, and device identity).
For this solution to scale to multiple concurrent requests, we im-
plemented two crucial optimizations. First, because response time
is contingent on the rESO, queried an acknowledgement message
is sent to the requesting client before the rESO is queried. It signals
that the request is processing and retransmissions are unnecessary.
Second, the situation query is asynchronous: right after the remote
request is issued, we yield the thread so that concurrent requests
can be handled. When a response is received or after a (config-
urable) timeout, if the situation is not confirmed as active—the
rESO responded that it is inactive, access to the rESO was denied,
or the request timed out—CheckPermission() continues to try to
find a matching valid ACE. Otherwise, it finishes, and the SRM flow
continues to perform the request. Figure 5.1a depicts this flow.
Operation termination. After a situation-dependent approval has
been issued for a request, SC maintains a handle to a termination
object and passes it through the SRM to the request handler. Using
this shared object, the request handler can indicate to the SC that
periodic querying is necessary and provide a termination callback.
5.2 Micro-benchmarks
Code changes. Our implementation of the SC module totals 824
LOCs of C. Main changes in IoTivity itself total 442 line insertions
and 147 line removals.
The main code changes required in IoTivity were (1) passing the
termination handle from the SC to the request handler, (2) adding
the rESO address to the policy’s ACE JSON schema, and (3) splitting
the SRM logic into asynchronous handlers to facilitate sending a
request to the rESO during a permission check without blocking the
handler thread. The last change, which is also the most challenging
(and requires most LOCs) is already planned for IoTivity’s SRM, to
support querying a centralized security manager for some requests.
Because it has not yet been integrated into IoTivity’s mainline
branch, we added it ourselves.
Experimental setup. To measure the added overhead in permis-
sion checks when querying rESOs, we used an IoTivity client on
an i7-5960X machine running Ubuntu as our subject. The object
is an OCF server exposing the /a/cam resource that responds to a
read method, simulating an IoT device interface. We installed our
server on a Raspberry Pi Model B with an ARMv7 Processor rev 4
running Raspbian (this low-performance setup is similar to an IoT
embedded device). Our prototype rESO contains /a/is_user_home.
The rESO server was installed on an Ubuntu Intel E5-1660 machine.
The machines were all connected to the same LAN.
Our subject accesses /a/cam’s read operation in an infinite loop.
In the following experiments, we compare the timings in two set-
tings: (1) the “vanilla” setting, where the object server configuration
contains an ACE that grants the subject read permission, and (2)
the situation-query setting, where the read permission is granted
conditional on the rESO’s approval. The only difference between
the settings is that in (2), the ACE specifying client permissions to
/a/cam also specifies a situational constraint in the cnd field:
"aclist2": [ ... {
"aceid": 3,
"subject": { "uuid": "CLIENT_GUID" },
"resources": [{ "href": "/a/cam",
"cnd":"ESO_GUID:/a/is_user_home" }],
"permission": 7 } ]
We launched multiple concurrent instances of our subject and,
over the course of 3 minutes, measured the duration of the method
CheckPermission() for /a/cam, average round-trip time for a re-
quest to /a/cam, and the average processor load of /a/cam’s IoTiv-
ity process as the percentage of a single core’s capacity sampled at
2-second frequency via top. Table 1 summarizes the results.
Results. On average, 301 requests per minute were sent and han-
dled when permission checks involve situational queries, compared
to 528 for the vanilla setting. Permission checks that involve query-
ing an rESO consistently take similar average time, with up to 15%
variance, as querying the vanilla /a/cam. The average round-trip
time for requests to /a/cam is consistently almost twice the aver-
age time for checking permissions. This is expected, because the
#clients V/RTT V/proc V/CP SQ/RTT SQ/proc SQ/CP
17.613% 0.128
23.543% 0.473
25.348% 0.938
24.351% 1.841
11.47% 0.0005
21.16% 0.0006
20.915% 0.0009
21.123% 0.0009
0.162
0.512
1.033
2.075
0.254
0.937
1.856
3.676
1
5
10
20
Table 1: rESO micro-benchmark results for concurrent
access requests issued for 3 minutes in the situation
query (SQ) and vanilla (V) settings. Round trip (RTT) and
CheckPermission() times (CP) are in seconds.
overhead of permission checks using an ESO is dominated by the
additional /a/is_user_home request RTT (see Section 3.4).
We further observed that the processor load increased by about
5% for the situation-query setting. This can be explained by the
additional request and acknowledgement messages, as well as the
cost of making permission checks asynchronous, i.e., saving and
reinstating the request-handling state before and after the situation
query. This overhead can be reduced by optimizing the SC.
Note that, while this benchmark is useful for verifying imple-
mentation sanity and grounding assessments of overheads in many
scenarios, it does not directly measure overheads in all ESOs; those
may vary with network conditions and ESO processing time.
6 WEB ESOS
Every Web ESO (wESO) is provided by a Web service, which is
independent of the object and subject services. The wESO’s inter-
face, including the two methods exported by all ESOs, is accessed
via HTTP GET calls to its URI with the appropriate method name
and accompanied by an appropriate bearer token. The results are
returned in JSON-encoded responses. See Appendix A.2 for more
details and an example involving Nest Cam APIs.
6.1 Situational access control in a Web service
To support ESO-based situational access control on the Web, we
changed an object service, which is implemented in JavaScript and
runs over Node.js servers with Mongoose DB schemas. Following
common practice, the object service uses bearer tokens, verified
using the popular Passport authentication library, to control access
to its single API, дet_user_in f o().
Passport enforces access control as follows. When protected
APIs are accessed, an authorization strategy is called. This function
is defined once but can be used for multiple APIs. It receives the
request, which includes the caller’s credentials, the access rights
required for the protected API, and a callback implementing the
API’s behavior. The strategy first decides whether to deny or al-
low access. Strategies usually follow common patterns, such as
username-and-password-based “local” authorization or bearer to-
kens. The passport-http-bearer library offers middleware for the
latter. It verifies that the token is valid (i.e., was issued by the object
service), non-expired, and that its scope allows the invoked API
call. The strategy then finds the user profile associated with the
request, and, if access is allowed, calls the function that implements
the API’s behavior, passing the user profile to it.
Server enforcement after change. Internally, ACEs are expressed
using access tokens that are linked in the service database to a
#clients V/RTT V/proc V/CP SQ/RTT SQ/proc SQ/CP
0.025
0.056
0.103
0.191
0.365
0.737
0.0185
92.1% 0.006
0.0635 100.9% 0.016
0.1228
0.034
0.2052 100.1% 0.06
0.3960 101.9% 0.114
0.7704 102.1% 0.222
67.3%
105.7%
102.2%
105.5%
109.6%
108.1%
0.038
0.093
0.182
0.326
0.593
1.178
1
5
10
20
40
80
99%
Table 2: wESO micro-benchmark results. The situation
query (SQ) and the vanilla (V) settings; concurrent access
requests issued for over 3 minutes. Round trip (RTT) and
CheckPermission() (CP) times are in seconds.
wESO’s URI and access token. The scope of the token specifies access
rights encoded as a list of permission strings—see Appendix A.2 for
more details. We add the situation ID as a prefix to every permission
string, followed by a delimiter (we used “;”). Changing the scope
to reflect situation dependence is important since, in OAuth 2, the
scope is sent to subjects to specify their access rights.
We implemented our strategy middleware, passport-http-bearer-
ESO, as a fork of the passport-http-bearer library. When used in
lieu of the original passport-http-bearer, it performs authentication
as follows. When a token linked to an ESO is received in a request,
it is first verified using the vanilla authorization logic, which also
extracts the user’s profile. The associated ESO is then queried using
a GET request to the ESO’s URI (with the received token). If the
ESO is active, the requested API is invoked and passed the user’s
profile, as well as a situation-change subscription function (see
below). Figure 5.1b depicts the enforcement logic.
Operation termination. The situation-change subscription func-
tion receives as input a termination callback (to be called if the
situation is no longer active, or the ESO is irresponsive), and the
time to wait between periodic situation queries. It initiates periodic
queries and calls the termination callback if the ESO is no longer
active. The subscription function returns a callback for the API to
invoke when the operation stops (and so should periodic querying).
6.2 Micro-benchmarks
Code changes. The entire enforcement behavior is contained in the
authorization strategy implemented by our passport-http-bearer-
ESO library, which adds 56 LOC to passport-http-bearer. Services
that use the latter can simply use our library instead. This involves
changes to 3 lines of code, to change the strategy name and add
ESO URIs and access tokens to the persistent token registry.
Experimental setup. We measure request times similarly to Sec-
tion 5.2: a subject service initiates periodic concurrent queries to
saturate the handling capacity of the object service and measures
times for permission checks, processor load, and request round-trip
times. The subject, object, and ESO are all Node.js server processes
running on an Intel i7-5960 PC, a Raspberry Pie Model B, and an
Intel E5-1660 respectively. The queried object-service API is /info,
which, after token authorization, simply returns the processor load
and time that authorization took.
Results. The results are similar to Section 5.2, except the (more
mature) Node.js infrastructure demonstrates overall much better
performance than IoTivity. For 5-40 concurrent requests, on average
(a) Access delegation
(b) Situation-dependent access delegation
Figure 6.2: Choosing a wESO: step (2) of Figure 6.1b.
Figure 6.1: Situational vs. non-situational access delegation.
Users instantiating operations that require access rights are
referred to another website, where they configure and dele-
gate access, and then back to the original website to continue
with the original flow. For situational access delegation, an
additional, nested wESO instantiation flow may occur.
3,300 requests per minute were sent and handled by the situation-
querying server, compared to about 5,200 for the vanilla server.
Both seamlessly handle up to 80 concurrent requests.
6.3 Creating situational policies on the Web
In Section 6.1, we added a situational constraint to an OAuth 2-
protected API. To enforce this constraint, the object service used a
hard-coded wESO and its access token. We now explain how the
user can select an arbitrary wESO to situationally constrain access
to the object service by subject services.
Delegating access using OAuth 2. Our object service uses OAuth
2 to enable the user to delegate access to its API. At a high level,
when subject services access the protected API, they redirect the
user (using an HTTP redirect response) to the OAuth 2 entry point
at the object service. The user can then approve access and is redi-
rected back. See Appendix D for more details.
Adding situational constraints. We changed our object service
so that, when the user is approving access, she can (1) constrain
it using a wESO of her choice, and (2) provide the token for this
wESO to the object service. To this end, a second, nested OAuth
2 flow redirects the user to a wESO server, which exposes the
wESO-provider interface (see Section 3.3) and protects wESO APIs
using OAuth 2 “authorization code grant.” User can choose from
the existing wESOs or authorize the installation of a new one.
Figure 6.1 depicts standard access delegation in the original
object service and situation-dependent access delegation in our
modified object service with a nested wESO instantiation flow.
Choosing a wESO. In step (2) of Figure 6.1b, the user chooses a
wESO service URI (see an illustration in Figure 6.2). The object
service displays the description of the wESO provider. If the object
service already has tokens to access wESOs with this URI, it displays
the corresponding wESO descriptions. If the user’s desired wESO
is on this list, she can choose it, obviating the nested flow.
Implementing the above behavior is easy in
Implementation.
any Web service that protects APIs with OAuth 2. Nested flows
are the biggest challenge because they involve two concurrent
“authorization code grant” OAuth 2 flows: the encapsulating one,
where the object service issues a token, and the nested one, where
the wESO service issues a different token to the object service.
Concretely, at step (2) of Figure 6.1b, we save the encapsulating
flow’s state using a Mongoose DB schema; at step (4), we reload it
and present a confirmation dialog to the user; and at step (5), we
finish the nested OAuth 2 flow, continue the encapsulating flow,