### Interaction with the rESO

The `is_active()` request is constructed and sent to the rESO, specifying the subject identity (GUID) and the access right request (URI, access type, and device identity).

To scale this solution for multiple concurrent requests, we implemented two key optimizations:
1. **Acknowledgment Message**: An acknowledgment message is sent to the requesting client before querying the rESO. This signals that the request is being processed and prevents unnecessary retransmissions.
2. **Asynchronous Querying**: The situation query is handled asynchronously. After issuing the remote request, the thread is yielded to handle other concurrent requests. When a response is received or after a configurable timeout, if the situation is not confirmed as active (i.e., the rESO responded that it is inactive, access was denied, or the request timed out), `CheckPermission()` continues to find a matching valid Access Control Entry (ACE). Otherwise, the process completes, and the Secure Resource Manager (SRM) flow continues.

This flow is depicted in Figure 5.1a.

### Operation Termination

After a situation-dependent approval has been issued for a request, the Security Controller (SC) maintains a handle to a termination object and passes it through the SRM to the request handler. Using this shared object, the request handler can indicate to the SC that periodic querying is necessary and provide a termination callback.

### Micro-benchmarks

#### Code Changes

Our implementation of the SC module totals 824 lines of C code. The main changes in IoTivity include 442 line insertions and 147 line removals. The primary code changes required in IoTivity were:
1. Passing the termination handle from the SC to the request handler.
2. Adding the rESO address to the policy’s ACE JSON schema.
3. Splitting the SRM logic into asynchronous handlers to facilitate sending a request to the rESO during a permission check without blocking the handler thread.

The last change, which is the most challenging and requires the most lines of code, is already planned for IoTivity’s SRM to support querying a centralized security manager for some requests. Since it has not yet been integrated into IoTivity’s mainline branch, we added it ourselves.

#### Experimental Setup

To measure the added overhead in permission checks when querying rESOs, we used an IoTivity client on an i7-5960X machine running Ubuntu. The object is an OCF server exposing the `/a/cam` resource, which responds to a read method, simulating an IoT device interface. The server was installed on a Raspberry Pi Model B with an ARMv7 Processor rev 4 running Raspbian. Our prototype rESO contains `/a/is_user_home`, and the rESO server was installed on an Ubuntu Intel E5-1660 machine. All machines were connected to the same LAN.

The subject accesses the `/a/cam` read operation in an infinite loop. We compared the timings in two settings:
1. **Vanilla Setting**: The object server configuration contains an ACE that grants the subject read permission.
2. **Situation-Query Setting**: The read permission is granted conditionally based on the rESO’s approval.

The only difference between the settings is that in the situation-query setting, the ACE specifying client permissions to `/a/cam` also specifies a situational constraint in the `cnd` field:
```json
"aclist2": [ ... {
"aceid": 3,
"subject": { "uuid": "CLIENT_GUID" },
"resources": [{ "href": "/a/cam", "cnd":"ESO_GUID:/a/is_user_home" }],
"permission": 7 } ]
```

We launched multiple concurrent instances of our subject and, over the course of 3 minutes, measured the duration of the `CheckPermission()` method for `/a/cam`, the average round-trip time for a request to `/a/cam`, and the average processor load of the `/a/cam` IoTivity process as the percentage of a single core’s capacity sampled at 2-second frequency via `top`. Table 1 summarizes the results.

#### Results

On average, 301 requests per minute were sent and handled when permission checks involved situational queries, compared to 528 for the vanilla setting. Permission checks involving querying an rESO consistently took similar average time, with up to 15% variance, as querying the vanilla `/a/cam`. The average round-trip time for requests to `/a/cam` was consistently almost twice the average time for checking permissions, which is expected due to the additional `/a/is_user_home` request RTT.

We observed that the processor load increased by about 5% in the situation-query setting. This can be explained by the additional request and acknowledgment messages, as well as the cost of making permission checks asynchronous. This overhead can be reduced by optimizing the SC.

Note that while this benchmark is useful for verifying implementation sanity and assessing overheads in many scenarios, it does not directly measure overheads in all ESOs, which may vary with network conditions and ESO processing time.

### Web ESOS

Every Web ESO (wESO) is provided by a Web service, independent of the object and subject services. The wESO’s interface, including the two methods exported by all ESOs, is accessed via HTTP GET calls to its URI with the appropriate method name and accompanied by an appropriate bearer token. The results are returned in JSON-encoded responses. See Appendix A.2 for more details and an example involving Nest Cam APIs.

#### Situational Access Control in a Web Service

To support ESO-based situational access control on the Web, we modified an object service implemented in JavaScript and running over Node.js servers with Mongoose DB schemas. The object service uses bearer tokens, verified using the Passport authentication library, to control access to its single API, `get_user_info()`.

Passport enforces access control as follows: when protected APIs are accessed, an authorization strategy is called. This function receives the request, which includes the caller’s credentials, the access rights required for the protected API, and a callback implementing the API’s behavior. The strategy first decides whether to deny or allow access. The `passport-http-bearer` library offers middleware for bearer tokens, verifying that the token is valid, non-expired, and that its scope allows the invoked API call. If access is allowed, the strategy calls the function that implements the API’s behavior, passing the user profile to it.

#### Server Enforcement After Change

Internally, ACEs are expressed using access tokens linked in the service database to a wESO’s URI and access token. The scope of the token specifies access rights encoded as a list of permission strings. We add the situation ID as a prefix to every permission string, followed by a delimiter. Changing the scope to reflect situation dependence is important since, in OAuth 2, the scope is sent to subjects to specify their access rights.

We implemented our strategy middleware, `passport-http-bearer-ESO`, as a fork of the `passport-http-bearer` library. When used in lieu of the original, it performs authentication as follows: when a token linked to an ESO is received in a request, it is first verified using the vanilla authorization logic, which also extracts the user’s profile. The associated ESO is then queried using a GET request to the ESO’s URI (with the received token). If the ESO is active, the requested API is invoked and passed the user’s profile, as well as a situation-change subscription function. Figure 5.1b depicts the enforcement logic.

#### Operation Termination

The situation-change subscription function receives a termination callback (to be called if the situation is no longer active or the ESO is irresponsive) and the time to wait between periodic situation queries. It initiates periodic queries and calls the termination callback if the ESO is no longer active. The subscription function returns a callback for the API to invoke when the operation stops (and so should periodic querying).

### Micro-benchmarks

#### Code Changes

The entire enforcement behavior is contained in the authorization strategy implemented by our `passport-http-bearer-ESO` library, which adds 56 LOC to `passport-http-bearer`. Services that use the latter can simply use our library instead. This involves changes to 3 lines of code to change the strategy name and add ESO URIs and access tokens to the persistent token registry.

#### Experimental Setup

We measure request times similarly to Section 5.2: a subject service initiates periodic concurrent queries to saturate the handling capacity of the object service and measures times for permission checks, processor load, and request round-trip times. The subject, object, and ESO are all Node.js server processes running on an Intel i7-5960 PC, a Raspberry Pi Model B, and an Intel E5-1660 respectively. The queried object-service API is `/info`, which, after token authorization, simply returns the processor load and time that authorization took.

#### Results

The results are similar to Section 5.2, except the (more mature) Node.js infrastructure demonstrates overall much better performance than IoTivity. For 5-40 concurrent requests, on average, 3,300 requests per minute were sent and handled by the situation-querying server, compared to about 5,200 for the vanilla server. Both seamlessly handle up to 80 concurrent requests.

### Creating Situational Policies on the Web

In Section 6.1, we added a situational constraint to an OAuth 2-protected API. To enforce this constraint, the object service used a hard-coded wESO and its access token. We now explain how the user can select an arbitrary wESO to situationally constrain access to the object service by subject services.

#### Delegating Access Using OAuth 2

Our object service uses OAuth 2 to enable the user to delegate access to its API. At a high level, when subject services access the protected API, they redirect the user (using an HTTP redirect response) to the OAuth 2 entry point at the object service. The user can then approve access and is redirected back. See Appendix D for more details.

#### Adding Situational Constraints

We changed our object service so that, when the user is approving access, she can:
1. Constrain it using a wESO of her choice.
2. Provide the token for this wESO to the object service.

To this end, a second, nested OAuth 2 flow redirects the user to a wESO server, which exposes the wESO-provider interface and protects wESO APIs using OAuth 2 “authorization code grant.” The user can choose from existing wESOs or authorize the installation of a new one.

Figure 6.1 depicts standard access delegation in the original object service and situation-dependent access delegation in our modified object service with a nested wESO instantiation flow.

#### Choosing a wESO

In step (2) of Figure 6.1b, the user chooses a wESO service URI (see an illustration in Figure 6.2). The object service displays the description of the wESO provider. If the object service already has tokens to access wESOs with this URI, it displays the corresponding wESO descriptions. If the user’s desired wESO is on this list, she can choose it, obviating the nested flow.

Implementing the above behavior is easy in any Web service that protects APIs with OAuth 2. Nested flows are the biggest challenge because they involve two concurrent “authorization code grant” OAuth 2 flows: the encapsulating one, where the object service issues a token, and the nested one, where the wESO service issues a different token to the object service.

Concretely, at step (2) of Figure 6.1b, we save the encapsulating flow’s state using a Mongoose DB schema; at step (4), we reload it and present a confirmation dialog to the user; and at step (5), we finish the nested OAuth 2 flow, continue the encapsulating flow, and complete the access delegation process.