    89 4A 47 00 00 00 00 00
    25 0E 40 00 00 00 00 00                           rax = s[4：8]
    E4 D3 6C 00 00 00 00 00
    A3 CA 47 00 00 00 00 00                            mov     [rbx+20h], eax ;
                                                     shl     eax, cl 
                                                     mov     [rbx+20h], eax
    00 00 00 00 00 00 00 00
    D1 43 44 00 00 00 00 00 E0 D3 6C 00 00 00 00 00
    00 00 00 00 00 00 00 00 A3 CA 47 00 00 00 00 00
    00 00 00 00 00 00 00 00 E6 15 40 00 00 00 00 00
    0C D3 6C 00 00 00 00 00 20 69 41 00 00 00 00 00
    49 48 47 00 00 00 00 00 
    05 00 00 00 00 00 00 00                           rcx = 5
                                                     -1
                                                     rdx = s[4：8]
                                                     shr     dword ptr [rdx], cl
    76 29 44 00 00 00 00 00 04 D4 6C 00 00 00 00 00
    E6 15 40 00 00 00 00 00 00 D5 6C 00 00 00 00 00
    20 69 41 00 00 00 00 00 69 6D 42 00 00 00 00 00
    25 0E 40 00 00 00 00 00 04 D4 6C 00 00 00 00 00
    07 17 40 00 00 00 00 00 00 D4 6C 00 00 00 00 00
    D1 B3 43 00 00 00 00 00 
                                                     mov     ecx, [rsi];   s[0:4]>5
    E6 15 40 00 00 00 00 00
    0C D3 6C 00 00 00 00 00 20 69 41 00 00 00 00 00
    89 4A 47 00 00 00 00 00 FA 5E 42 00 00 00 00 00        mov     eax, [rax]
                                                     ; rax = s[4;8]
                                                     add     eax, ecx
                                                     s[4;8] + (s[0:4]>5)
    25 0E 40 00 00 00 00 00 E0 D3 6C 00 00 00 00 00
    A3 CA 47 00 00 00 00 00 00 00 00 00 00 00 00 00        mov     [rbx+20h], eax
    E6 15 40 00 00 00 00 00 00 D5 6C 00 00 00 00 00
    07 17 40 00 00 00 00 00 00 D3 6C 00 00 00 00 00
    D1 B3 43 00 00 00 00 00 76 29 44 00 00 00 00 00        rsi = 6CD300
                                                     mov     ecx, [rsi]; ecx = 0
    E1 02 40 00 00 00 00 00 E6 15 40 00 00 00 00 00
    18 D4 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    07 17 40 00 00 00 00 00 80 D4 6C 00 00 00 00 00
    E6 15 40 00 00 00 00 00 03 00 00 00 00 00 00 00        pop     rdi ;rdi = 3
                                                     and     ecx, edi
                                                     mov     ecx, [rdx+rcx*4]
                                                     mov     eax, [rdx+rax*4]
                                                     sub     eax, ecx
  * 主要操作是开始载入输入地址，然后载入delta是5f3759df。
  * 在6CD600设置大循环次数是0x20.
  * 然后对输入进行操作，注意两次pop rcx的结果，分别是左移4和右移5，类似tea。
  * 之后又有一次pop rdx的操作，使得rdi = 3
  * 后续将rax和rcx分别作为index，查表，符合xtea的结构。
  * 密钥是F14gF114gF11114g
  * delta是5f3759df，写出脚本还原即可。
    #include 
    #include 
    /* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */
    void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
        unsigned int i;
        uint32_t v0 = v[0], v1 = v[1], sum = 0, delta = 0x5F3759DF;
        for (i = 0; i > 5)) + v1) ^ (sum + key[sum & 3]);
           sum += delta;
           v1 += (((v0 > 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
        }
        v[0] = v0; v[1] = v1;
    }
    void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
        unsigned int i;
        uint32_t v0 = v[0], v1 = v[1], delta = 0x5F3759DF, sum = delta * num_rounds;
        for (i = 0; i > 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
           sum -= delta;
           v0 -= (((v1 > 5)) + v1) ^ (sum + key[sum & 3]);
        }
        v[0] = v0; v[1] = v1;
    }
    int check(uint32_t *v)
    {
        uint32_t const k[4] = { 0x67343146, 0x34313146, 0x31314667, 0x67343131 };
        unsigned int r = 32;//num_rounds建议取值为32
        decipher(r, v, k);
        printf("%c", v[0] & 0xff);
        printf("%c", (v[0] >> 8 )& 0xff);
        printf("%c", (v[0] >> 16) & 0xff);
        printf("%c", (v[0] >> 24) & 0xff);
        printf("%c", v[1] & 0xff);
        printf("%c", (v[1] >> 8) & 0xff);
        printf("%c", (v[1] >> 16) & 0xff);
        printf("%c", (v[1] >> 24) & 0xff);
        return 0;
    }
    int main()
    {
        uint32_t cipher[] = { 0x86DAB2BE, 0x146D16A8, 0x3C9EDB52, 0x54F1658F, 0x19C12643, 0x2A33699D, 0x00CD9E6B, 0xC1CE3226 };
        check(&cipher[0]);
        check(&cipher[2]);
        check(&cipher[4]);
        check(&cipher[6]);
        return 0;
    }
## PWN
###  warmup
菜单堆，uaf、tcache、IO_stdout组合题，限制0x40 size比较恶心
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import os, sys
    # Setting at first
    DEBUG = 3
    LIBCV = 2.19
    context.arch = "amd64"
    context.log_level = "debug"
    elf = ELF("./warmup",checksec=False)
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.ra = tube.recvall
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if DEBUG == 1:
        if context.arch == "i386":
            libc = ELF("/lib/i386-linux-gnu/libc.so.6",checksec=False)
        elif context.arch == "amd64":
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        s = process("./warmup")
    elif DEBUG == 2:
        if context.arch == "i386":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/x86/glibc-"+str(LIBCV)+"/x86/ld-linux-x86-64.so.2 warmup")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86:/libc.so.6 warmup")
        elif context.arch == "amd64":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/ld-linux-x86-64.so.2 warmup")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64:/libc.so.6 warmup")
        s = process("./warmup")
    elif DEBUG == 3:
        libc = ELF("./libc-2.27.so",checksec=False)
        ip = "47.52.90.3" 
        port = 9999
        s = remote(ip,port)