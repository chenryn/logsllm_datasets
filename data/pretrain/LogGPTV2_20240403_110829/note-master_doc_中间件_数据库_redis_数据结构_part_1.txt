# 数据结构
二进制安全：底层没有类型概念，只有byte数组，所以客户端需要将数据序列化成字节数组
## string
- 字符串、数值、bit位图
![屏幕截图 2020-09-24 142014](/assets/屏幕截图%202020-09-24%20142014.png)
![内部编码](/assets/20231116165231.webp)
应用场景：
- 做简单的KV缓存
```mermaid
sequenceDiagram
    participant User as 用户
    participant WebServer as Web服务器
    participant Redis as 缓存层 (Redis)
    participant MySQL as 持久层 (MySQL)
    User->>WebServer: 请求数据
    WebServer->>Redis: 查询缓存
    alt hit
        Redis-->>WebServer: return 缓存数据
    else miss
        Redis->>MySQL: 查询数据库
        MySQL-->>Redis: 数据结果
        Redis->>Redis: write cache
        Redis-->>WebServer: 缓存数据
    end
    WebServer-->>User: return 数据响应
```
设计合理的键名，有利于防止键冲突和项目的可维护性，比较推荐的方式是使用`业务名：对象名：id：[属性]`作为键名
- incr（计数）：抢购，秒杀，详情页，点赞，评论
- session服务器
```mermaid
stateDiagram-v2
  client --> WebServer1
  RedisSession --> WebServer1
  WebServer1 --> RedisSession
  WebServer2 --> RedisSession
  RedisSession --> WebServer2
  WebServer3 --> RedisSession
  RedisSession --> WebServer3
```
- 限速 通过对key设置过期时间的方式限制用户请求频率
- 使用位图来处理海量数据
1. 哈希类型 hash
  - 做对象属性读写
2. 列表类型 list
  - 可以做消息队列或者可以来存储列表信息，进行分页查询
3. 集合类型 set
  - 自动去重
  - 推荐系统：数据交集
4. 有序集合类型 sortedset
  - 排序
## GEO
地理信息定位功能
```sh
geoadd locations 116.38 39.55 beijing # 添加成员
geopos locations beijing # 获取
geodist locations beijing tianjin [m|km|mi|ft] # 计算两地距离
georadiusbymember locations beijing 150 km # 获取北京方圆150km内的成员
geohash locations beijing # 将二维经纬度转换为一维字符串
```
关于geohash：
- 字符串越长，表示的位置更精确
- 两个字符串越相似，它们之间的距离越近，Redis利用字符串前缀匹配
算法实现相关的命令
- Redis正是使用有序集合并结合geohash的特性实现了GEO的若干命令
## [发布订阅](/软件工程/设计模式/行为模式.md#观察者)
新开启的订阅客户端，无法收到该频道之前的消息
```sh
pubsub channels # 查看活跃的频道(至少一个订阅者)
pubsub numsub chat # 查看频道订阅数
pubsub numpat # 查看模式订阅数
```
- 消费者
```sh
SUBSCRIBE redisChat # 订阅
unsubscribe redisChat # 取消订阅
psubscribe pattern # 按照给定模式订阅
punsubscribe pattern # 按照给定模式取消订阅
```
- 生产者向频道发送数据
```sh
PUBLISH redisChat "Redis is a great caching technique"
```
pub/sub 是通过一个 key 为频道名称，value 为客户端列表的哈希表、客户端所订阅的频道模式哈希表来实现的
```c
server.pubsub_channels = dictCreate(&keylistDictType);
server.pubsub_patterns = dictCreate(&keylistDictType);
server.pubsubshard_channels = dictCreate(&keylistDictType);
```
在发送消息时，通过频道名称找到所有客户端，或者判断客户端所订阅的频道模式是否匹配发消息的频道，找到对应的客户端，挨个发消息
```c
while((de = dictNext(di)) != NULL) {
    robj *pattern = dictGetKey(de);
    list *clients = dictGetVal(de);
    if (!stringmatchlen((char*)pattern->ptr,
                        sdslen(pattern->ptr),
                        (char*)channel->ptr,
                        sdslen(channel->ptr),0)) continue;
    listRewind(clients,&li);
    while ((ln = listNext(&li)) != NULL) {
        client *c = listNodeValue(ln);
        addReplyPubsubPatMessage(c,pattern,channel,message);
        updateClientMemUsageAndBucket(c);
        receivers++;
    }
}
```
而客户端订阅频道，则就是对上述的哈希表做添加操作
```c
if (dictAdd(type.clientPubSubChannels(c),channel,NULL) == DICT_OK) {
    retval = 1;
    incrRefCount(channel);
    /* Add the client to the channel -> list of clients hash table */
    de = dictFind(*type.serverPubSubChannels, channel);
    if (de == NULL) {
        clients = listCreate();
        dictAdd(*type.serverPubSubChannels, channel, clients);
        incrRefCount(channel);
    } else {
        clients = dictGetVal(de);
    }
    listAddNodeTail(clients,c);
}
/* Notify the client */
addReplyPubsubSubscribed(c,channel,type);
```
## 内部数据结构
Redis 为了尽量节省内存，不仅在数据结构的设计上下足了功夫，同时也运用了享元设计模式来提升内存效率
```mermaid
stateDiagram-v2
  String --> 简单动态字符串(SDS)
  List --> 双向链表
  List --> 压缩链表
  Hash --> 压缩列表
  Hash --> 哈希表
  SortedSet --> 压缩链表
  SortedSet --> 跳表
  Set --> 哈希表
  Set --> 整数数组
```
名称|查找时间复杂度
-|-
哈希表|0(1)
跳表|O(logN)
双向链表|O(N)
压缩列表|O(N)
整数数组|O(N)
### redisObject
Redis存储的所有值对象在内部定义为redisObject结构体
```c