### 12.1.3 Shell 条件语句
每个命令都会返回一个退出状态，这个状态可以被条件语句使用。
- **成功**：0（表示“True”）
- **失败**：非0（表示“False”）

**注意**：在Shell条件语句中，“0”表示“True”，而在C语言的条件语句中，“0”表示“False”。

**注意**：“[”与`test`命令等价，它评估“]”之间的参数作为条件表达式。

以下是需要记忆的基础条件语法：
- `command && if_success_run_this_command_too || true`
- `command || if_not_success_run_this_command_too || true`

多行脚本示例：
```sh
if [ conditional_expression ]; then
    if_success_run_this_command
else
    if_not_success_run_this_command
fi
```
末尾的`|| true`是必要的，它可以确保在使用了`-e`选项时，该行不会意外退出。

算术整数比较符在条件表达式中包括`-eq`、`-ne`、`-lt`、`-le`、`-gt`和`-ge`。

#### 表12.5: 文件比较条件表达式
| 表达式 | 返回逻辑真所需的条件 |
| --- | --- |
| `-e file` | 文件存在 |
| `-d file` | 文件存在且为目录 |
| `-f file` | 文件存在且为普通文件 |
| `-w file` | 文件存在且可写 |
| `-x file` | 文件存在且可执行 |
| `file1 -nt file2` | `file1`比`file2`新 |
| `file1 -ot file2` | `file1`比`file2`旧 |
| `file1 -ef file2` | `file1`和`file2`位于相同的设备上且有相同的inode编号 |

#### 表12.6: 字符串比较条件表达式
| 表达式 | 返回逻辑真所需的条件 |
| --- | --- |
| `-z str` | 字符串长度为零 |
| `-n str` | 字符串长度不为零 |
| `str1 = str2` | `str1`和`str2`相等 |
| `str1 != str2` | `str1`和`str2`不相等 |
| `str1 < str2` | `str1`按字典顺序排列在`str2`之前（取决于语言环境） |
| `str1 > str2` | `str1`按字典顺序排列在`str2`之后（取决于语言环境） |

### 12.1.4 Shell 循环
POSIX shell提供了几种循环形式：
- `for x in foo1 foo2 ...; do command ; done`：将`foo1 foo2 ...`依次赋值给变量`x`并执行`command`。
- `while condition ; do command ; done`：当`condition`为真时，重复执行`command`。
- `until condition ; do command ; done`：当`condition`为假时，重复执行`command`。
- `break`：退出循环。
- `continue`：跳过当前循环体中的剩余部分，开始下一次循环。

**提示**：C语言中的数值迭代可以用`seq(1)`实现来生成`foo1 foo2 ...`。

**提示**：参见第9.4.9节。

### 12.1.5 Shell 环境变量
在普通的shell命令行提示下的一些常见的环境变量，在脚本执行环境中可能不存在。可以使用以下方法获取这些变量：
- `$USER`：使用`$(id -un)`
- `$UID`：使用`$(id -u)`
- `$HOME`：使用`$(getent passwd "$(id -u)" | cut -d : -f 6)`（也适用于第4.5.2节）

### 12.1.6 Shell 命令行处理顺序
Shell大致按照以下顺序处理脚本：
1. 读取一行。
2. 如果该行包含双引号或单引号，将其内容作为一个标识。
3. 使用空白字符（空格、制表符、换行符）和元字符（`|`、`;`、`&`、`(`、`)`）将行分割成多个标识。
4. 检查不在双引号或单引号中的保留字，并调整行为。
   - 保留字：`if`、`then`、`elif`、`else`、`fi`、`for`、`in`、`while`、`unless`、`do`、`done`、`case`、`esac`
5. 展开不在双引号或单引号中的别名。
6. 展开不在双引号或单引号中的波浪线。
   - `~` → 当前用户的家目录
   - `~user` → 用户的家目录
7. 将不在单引号中的变量展开为其值。
   - 变量：`$PARAMETER` 或 `${PARAMETER}`
8. 展开不在单引号中的命令替换。
   - `$(command)` → `command`的输出
   - `` `command` `` → `command`的输出
9. 将不在双引号或单引号中的通配符路径展开为匹配的文件名。
   - `*` → 任意字符
   - `?` → 单个字符
   - `[...]` → 任意位于方括号中的字符
10. 查找并执行命令。
    - 函数定义
    - 内建命令
    - `$PATH`中的可执行文件
11. 转到下一行，并重复上述过程。

双引号中的单引号没有效果。通过执行`set -x`或使用`-x`选项启动shell，可以让shell显示所有执行的命令，这对调试非常有用。

### 12.1.7 用于Shell脚本的应用程序
为了使你的shell脚本在Debian系统上具有尽可能高的可移植性，你应该只使用必要的软件包提供的应用程序。
- `aptitude search ~E`：列出必要的软件包。
- `dpkg -L package_name | grep '/man/man.*/'`：列出`package_name`软件包提供的man手册。

**提示**：尽管`moreutils`可能在Debian之外不可用，但它提供了一些有趣的小程序，如`sponge(8)`，当你想覆盖原有文件时非常有用。参见第1.6节的例子。

### 12.2 解释性语言中的脚本
当你希望在Debian上自动化执行一个任务时，应首先考虑使用解释性语言脚本。选择解释性语言的准则如下：
- **使用`dash`**：如果任务简单，使用shell脚本结合CLI命令行程序。
- **使用`python3`**：如果任务复杂，从零开始编写。
- **使用`perl`、`tcl`、`ruby`等**：如果已有用这些语言编写的代码，需要进行调整以完成任务。

如果最终代码运行太慢，可以通过用编译型语言重写关键部分来提升执行速度，并从解释性语言调用。

### 12.2.1 调试解释性语言代码
大多数解释器提供基本的语法检查和代码跟踪功能：
- `dash -n script.sh`：Shell脚本语法检查
- `dash -x script.sh`：跟踪Shell脚本
- `python -m py_compile script.py`：Python脚本语法检查
- `python -m trace --trace script.py`：跟踪Python脚本
- `perl -I../libpath -c script.pl`：Perl脚本语法检查
- `perl -d:Trace script.pl`：跟踪Perl脚本

为测试`dash`代码，尝试第9.1.4节，它提供了类似于`bash`的交互式环境。为测试`perl`代码，尝试Perl的REPL环境，它为Perl提供了类似于Python的REPL（READ+EVAL+PRINT+LOOP）环境。

### 12.2.2 使用Shell脚本的GUI程序
Shell脚本可以改进以创建吸引人的GUI（图形用户界面）程序。技巧是使用所谓的对话程序来代替使用`echo`和`read`命令的乏味交互。

#### 表12.9: 对话程序列表
| 软件包 | 流行度 | 大小 | 说明 |
| --- | --- | --- | --- |
| `x11-utils` | V:195, I:565 | 651 | `xmessage(1)`：在一个窗口中显示消息或疑问（X） |
| `whiptail` | V:271, I:996 | 57 | 从shell脚本中显示用户友好的对话框（newt） |
| `dialog` | V:11, I:102 | 1224 | 从shell脚本中显示用户友好的对话框（ncurses） |
| `zenity` | V:74, I:363 | 179 | 从shell脚本中显示图形对话框（GTK） |
| `ssft` | V:0, I:0 | 75 | Shell脚本前端工具（zenity, kdialog, 和带有gettext的dialog封装） |
| `gettext` | V:56, I:262 | 5817 | `/usr/bin/gettext.sh`：翻译信息 |

以下是一个简单的GUI程序示例，仅使用一个shell脚本：
```sh
#!/bin/sh -e
# Copyright (C) 2021 Osamu Aoki, Public Domain
# vim:set sw=2 sts=2 et:

DATA_FILE=$(zenity --file-selection --filename="/etc/motd" --title="Select a file to check") || \
{ echo "E: File selection error" >&2 ; exit 1 }

if file -ib "$DATA_FILE" | grep -qe '^text/'; then
    zenity --info --title="Check file: $DATA_FILE" --width 640 --height 400 \
           --text="$(head -n 20 "$DATA_FILE")"
fi
```
这个脚本使用`zenity`来选择一个文件（默认为`/etc/motd`）并显示其内容。脚本的GUI启动器可以按照第9.4.10节创建。