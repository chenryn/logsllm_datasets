Table12.4: 重要的shell参数替换列表
12.1.3 Shell 条件语句
每个命令都会返回退出状态，这可以被条件语句使用。
• 成功：0(”True”)
• 失败：非0(”False”)
注意
”0”在shell条件语句中的意思是”True”，然而”0”在C条件语句中的含义为”False”。
注意
”[”跟test命令是等价的，它评估到”]”之间的参数来作为一个条件表达式.
如下所示是需要记忆的基础条件语法。
• ”command && if_success_run_this_command_too || true”
• ”command || if_not_success_run_this_command_too || true”
• 如下所示是多行脚本片段
if [ conditional_expression ]; then
if_success_run_this_command
else
if_not_success_run_this_command
fi
这里末尾的“|| true”是需要的，它可以保证这个shell脚本在不小心使用了“-e”选项而被调用时不会在该行意
外地退出。
算术整数的比较在条件表达式中为”-eq”，”-ne”，”-lt”，”-le”，”-gt”和”-ge”。
Debian参考手册 215/233
表达式 返回逻辑真所需的条件
-e file file存在
-d file file存在并且是一个目录
-f file file存在并且是一个普通文件
-w file file存在并且可写
-x file file存在并且可执行
file1 -nt file2 file1是否比file2新
file1 -ot file2 file1是否比file2旧
file1 -ef file2 file1和file2位于相同的设备上并且有相同的inode编号
Table12.5: 在条件表达式中进行文件比较
表达式 返回逻辑真所需的条件
-z str str的长度为零
-n str str的长度不为零
str1 = str2 str1和str2相等
str1 != str2 str1和str2不相等
str1  str2 str1排列在str2之后（取决于语言环境）
Table12.6: 在条件表达式中进行字符串比较
12.1.4 shell 循环
这里有几种可用于POSIXshell的循环形式。
• ”for x in foo1 foo2 …; do command ; done”，该循环会将”foo1 foo2 …”赋予变量”x”并执行”command”。
• ”while condition ; do command ; done”，当”condition”为真时，会重复执行”command”。
• ”until condition ; do command ; done”，当”condition”为假时，会重复执行”command”。
• ”break”可以用来退出循环。
• ”continue”可以用来重新开始下一次循环。
提示
C语言中的数值迭代可以用seq(1)实现来生成”foo1 foo2 ...”。
提示
参见第 9.4.9 节。
12.1.5 Shell 环境变量
普通的shell命令行提示下的一些常见的环境变量，可能在你的脚本的执行环境中不存在。
• 对于”$USER”,使用”$(id -un)”
• 对于”$UID”,使用”$(id -u)”
• 对于”$HOME”，使用”$(getent passwd ”$(id -u)”|cut -d ”:” -f 6)”(这个也在第 4.5.2 节下工作)
Debian参考手册 216/233
12.1.6 shell 命令行的处理顺序
shell大致以下列的顺序来处理一个脚本。
• shell读取一行。
• 如果该行包含有”…”或’…’，shell对该行各部分进行分组作为一个标识（onetoken）（译注：onetoken是指shell识
别的一个结构单元）.
• shell通过下列方式将行中的其它部分分隔进标识（tokens）。
– 空白字符：空格 tab 换行符
– 元字符： | ; & ( )
• shell会检查每一个不位于”…”或’...’ 的token中的保留字来调整它的行为。
– 保留字：if then elif else fi for in while unless do done case esac
• shell展开不位于”…”或’...’ 中的别名。
• shell展开不位于”…”或’...’ 中的波浪线。
– ”~”→当前用户的家目录
– ”~user”→user的家目录
• shell将不位于’...’ 中的变量展开为它的值。
– 变量：”$PARAMETER”或”${PARAMETER}”
• shell展开不位于’...’ 中的命令替换。
– ”$( command )”→”command”的输出
– ” ̀ command ̀”→”command”的输出
• shell将不位于”…”或’...’ 中的glob路径展开为匹配的文件名。
– *→任何字符
– ? →一个字符
– […]→任何位于”…”中的字符
• shell从下列几方面查找命令并执行。
– 函数定义
– 内建命令
–“$PATH”中的可执行文件
• shell前往下一行，并按照这个顺序从头再次进行处理。
双引号中的单引号是没有效果的。
在shell中执行“set -x”或使用“-x”选项启动shell可以让shell显示出所有执行的命令。这对调试来说是非常方
便的。
Debian参考手册 217/233
软件包 流行度 大小 说明
dash V:886,I:996 191 小和快的POSIX兼容shell，用于sh
coreutils V:883,I:999 18306 GNU核心工具
grep V:787,I:999 1267 GNUgrep、egrep和fgrep
sed V:792,I:999 987 GNUsed
mawk V:431,I:997 285 小和快的awk
debianutils V:909,I:999 224 用于Debian的各种工具
bsdutils V:513,I:999 356 来自4.4BSD-Lite的基础工具
bsdextrautils V:573,I:687 339 来自4.4BSD-Lite的额外的工具
moreutils V:15,I:38 244 额外的Unix工具
Table12.7: 包含用于shell脚本的小型应用程序的软件包
12.1.7 用于 shell 脚本的应用程序
为了使你的shell程序在Debian系统上尽可能地具有可移植性，你应该只使用必要的软件包所提供的应用程序。
• ”aptitude search ~E”，列出必要的软件包。
• ”dpkg -L package_name |grep ’/man/man.*/’”，列出package_name软件包所提供的man手册。
提示
尽管moreutils可能不存在Debian之外，但它提供了一些有趣的小程序。最值得注意的一个是sponge(8)，当
你想覆盖原来的文件时，它会非常好用。
参见第 1.6 节的例子。
12.2 解释性语言中的脚本
软件包 流行度 大小 文档
dash V:886,I:996 191 sh: 小和快的POSIX兼容的shell，用于sh
bash V:836,I:999 7175 sh: 由bash-doc包提供的“info bash”
mawk V:431,I:997 285 AWK:小和快的awk
gawk V:289,I:356 2906 AWK:由gawk-doc包提供的“info gawk”
Perl: perl(1)以及通过perl-doc和perl-doc-html提供的
perl V:701,I:988 670
html文档
libterm-readline-gnu-perl
V:2,I:29 379 GNUReadLine/History库的Perl扩展：perlsh(1)
libreply-perl V:0,I:0 171 Perl的REPL:reply(1)
libdevel-repl-perl
V:0,I:0 237 Perl的REPL:re.pl(1)
Python: python3(1)以及通过python3-doc包提供的html文
python3 V:712,I:950 81
档
tcl V:26,I:227 20 Tcl: tcl(3)以及通过tcl-doc包提供的更详细的手册页文档
tk V:21,I:220 20 Tk:tk(3)以及通过tk-doc包提供的更详细的手册页文档
ruby V:82,I:215 29 Ruby: ruby(1),erb(1),irb(1),rdoc(1),ri(1)
Table12.8: 解释器相关软件包列表
当你希望在Debian上自动化执行一个任务，你应当首先使用解释性语言脚本。选择解释性语言的准则是：
Debian参考手册 218/233
• 使用dash，如果任务是简单的，使用shell程序联合CLI命令行程序。
• 使用python3，如果任务不是简单的，你从零开始写。
• 使用perl、tcl、ruby……，如果在Debian上有用这些语言写的现存代码，需要为完成任务进行调整。
如果最终代码太慢，为提升执行速度，你可以用编译型语言重写关键部分，从解释性语言调用。
12.2.1 调试解释性语言代码
大部分解释器提供基本的语法检查和代码跟踪功能。
•“dash-nscript.sh”-Shell脚本语法检查
•“dash-xscript.sh”-跟踪一个Shell脚本
•“python-mpy_compilescript.py”-Python脚本语法检查
•“python-mtrace--tracescript.py”-跟踪一个Python脚本
•“perl-I../libpath-cscript.pl”-Perl脚本语法检查
•“perl-d:Tracescript.pl”-跟踪一个Perl脚本
为测试dash代码，尝试下第 9.1.4 节，它提供了和bash类似的交互式环境。
为了测试perl代码，尝试下Perl的REPL环境，它为Perl提供了Python类似的REPL(=READ+EVAL+PRINT+
LOOP)环境。
12.2.2 使用 shell 脚本的 GUI 程序
shell脚本能够被改进用来制作一个吸引人的GUI（图形用户界面）程序。技巧是用一个所谓的对话程序来代替使用
echo和read命令的乏味交互。
软件包 流行度 大小 说明
x11-utils V:195,I:565 651 xmessage(1)：在一个窗口中显示一条消息或疑问（X）
whiptail V:271,I:996 57 从shell脚本中显示用户友好的对话框（newt）
dialog V:11,I:102 1224 从shell脚本中显示用户友好的对话框（ncurses）
zenity V:74,I:363 179 从shell脚本中显示图形对话框（GTK）
Shell脚本前端工具(zenity,kdialog,and带有gettext的dialog封
ssft V:0,I:0 75
装)
gettext V:56,I:262 5817 “/usr/bin/gettext.sh”：翻译信息
Table12.9: 对话（dialog）程序列表
这里是一个用来演示的GUI程序的例子，仅使用一个shell脚本是多么容易。
这个脚本使用zenity来选择一个文件(默认/etc/motd)并显示它。
这个脚本的GUI启动器能够按第 9.4.10 节创建。
#!/bin/sh -e
# Copyright (C) 2021 Osamu Aoki , Public Domain
# vim:set sw=2 sts=2 et:
DATA_FILE=$(zenity --file-selection --filename=”/etc/motd” --title=”Select a file to check ←-
”) || \
( echo ”E: File selection error” >&2 ; exit 1 )
# Check size of archive
Debian参考手册 219/233
if ( file -ib ”$DATA_FILE” | grep -qe ’^text/’ ) ; then
zenity --info --title=”Check file: $DATA_FILE” --width 640 --height 400 \
--text=”$(head -n 20 ”$DATA_FILE”)”