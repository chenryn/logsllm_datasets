title:Efficient Online-friendly Two-Party ECDSA Signature
author:Haiyang Xue and
Man Ho Au and
Xiang Xie and
Tsz Hon Yuen and
Handong Cui
Efficient Online-friendly Two-Party ECDSA Signature
Haiyang Xue∗
State Key Laboratory of Information
Security, Institute of Information
Engineering, Chinese Academy of
Sciences
The University of Hong Kong
PI:EMAIL
Man Ho Au
The University of Hong Kong
PI:EMAIL
Xiang Xie
Shanghai Key Laboratory of
Privacy-Preserving Computation
PI:EMAIL
Tsz Hon Yuen
The University of Hong Kong
PI:EMAIL
Handong Cui
The University of Hong Kong
PI:EMAIL
ABSTRACT
Two-party ECDSA signatures have received much attention due to
their widespread deployment in cryptocurrencies. Depending on
whether or not the message is required, we could divide two-party
signing into two different phases, namely, offline and online. Ideally,
the online phase should be made as lightweight as possible. At the
same time, the cost of the offline phase should remain similar to
that of a normal signature generation. However, the existing two-
party protocols of ECDSA are not optimal: either their online phase
requires decryption of a ciphertext, or their offline phase needs
at least two executions of multiplicative-to-additive conversion
which dominates the overall complexity. This paper proposes an
online-friendly two-party ECDSA with a lightweight online phase
and a single multiplicative-to-additive function in the offline phase.
It is constructed by a novel design of a re-sharing of the secret
key and a linear sharing of the nonce. Our scheme significantly
improves previous protocols based on either oblivious transfer or
homomorphic encryption. We implement our scheme and show
that it outperforms prior online-friendly schemes (i.e., those have
lightweight online cost) by a factor of roughly 2 to 9 in both com-
munication and computation. Furthermore, our two-party scheme
could be easily extended to the 2-out-of-𝑛 threshold ECDSA.
CCS CONCEPTS
• Security and privacy → Digital signatures; Key manage-
ment.
KEYWORDS
ECDSA; threshold signature; two-party signature; blockchain; zero-
knowledge proof
∗This work was done while the author was in The Uiversity of Hong Kong.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484803
ACM Reference Format:
Haiyang Xue, Man Ho Au, Xiang Xie, Tsz Hon Yuen, and Handong Cui. 2021.
Efficient Online-friendly Two-Party ECDSA Signature. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 16 pages. https://doi.org/10.1145/3460120.3484803
1 INTRODUCTION
Threshold digital signatures [13, 14] allow distributed signing among
𝑛 parties such that a given message is signed if and only if at least
𝑡 + 1 of the participants agree to sign it. Threshold signature has
attracted a lot of attention in the academic community and in-
dustry recently, possibly due to its applications in blockchain and
cryptocurrencies. A decentralized key management framework
of ECDSA [11], the most commonly used signature scheme in
blockchain, is urgently required to protect the secret key and hence
the cryptocurrency.
Threshold ECDSA. ECDSA [11] is the Elliptical Curve (EC) version
of the Digital Signature Algorithm (DSA). The core part of ECDSA
involves computing
𝑠 = 𝑘−1(𝐻(𝑚) + 𝑥𝑟)
(1)
where 𝑥 is the secret key, 𝑘 is the secret nonce, and 𝑟 is the public
nonce (i.e., the 𝑥-coordinate of 𝑘 · 𝑃 where 𝑃 is the EC group gen-
erator). The main obstacle of constructing a threshold version of
ECDSA is to compute, in a distributed way, 𝑠 satisfying Equation 1,
where 𝑘 and 𝑥 are secrets shared among the participants. In detail,
given the shares of 𝑘 and 𝑥, computing the shares of 𝑘−1 and 𝑘−1𝑥
are the most expensive part of the entire signing procedure. (We
remark that, if not specified, the computation in this section is over
Z𝑞 where 𝑞 is the EC group order.)
A large number of practical protocols aim to address this obstacle
in recent years. Lindell [25] proposed a very efficient two-party
signing protocol, which utilizes multiplicative shares of 𝑘, 𝑥, and the
additively homomorphic encryption scheme Paillier. The resulting
signing procedure only involves homomorphic operations and a
decryption operation, and thus is practical. Other follow-up works
such as [6, 8, 15, 16, 19, 26, 33] handle the above obstacles with the
help of the multiplicative-to-additive functionality (denoted as MtA
hereafter). Specifically, with 𝑎 and 𝑏 as inputs, the MtA functionality
securely computes and outputs 𝛼 and 𝛽 such that 𝛼 + 𝛽 = 𝑎𝑏. Thus
it helps two parties to transform shares of 𝑘, 𝑥 into additive share of
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea558𝑘−1 and 𝑘−1𝑥, or to transform shares of 𝑘−1, 𝑥 into additive share
of 𝑘−1𝑥 and computing 𝑘 · 𝑃. Then, each participant could easily
compute the additive share of 𝑠 from 𝑟 and their shares of 𝑘−1 and
𝑘−1𝑥. After the reveal of additive share of 𝑠, the signing procedure
simply sums them up and outputs the signature after verifying its
correctness.
However, realizing the MtA functionality always involves compli-
cated zero-knowledge proof systems. This makes MtA the heaviest
part of threshold signature schemes. A typical threshold signing
invokes the MtA functionality 2 to 4 times. Specifically, given ad-
ditive shares of 𝑘 = 𝑘1 + 𝑘2 and 𝑥 = 𝑥1 + 𝑥2, two calls of MtA
are required to compute shares of 𝑘−1, and another two MtA are
needed to compute additive shares of 𝑘−1𝑥. The same holds when
given additive shares of 𝑘−1 and 𝑥 to jointly compute 𝑘 · 𝑃 and
additive share of 𝑘−1𝑥.
Table 1: The offline/online cost of two-party (case of) ECDSA.
Enc (resp. Dec) is an execution of Paillier/CL encryption (resp.
decryption). “NI” indicates non-interactive online signing.
The online phase of “Fast" schemes requires extra dozens of
EC point multiplications besides the verification.
Schemes
[7, 25]
[15] 2-of-2
[15] 2-of-𝑛
[26]
[8, 19]
[6, 16]
2ECDSA
𝑥
𝑥1𝑥2
𝑥1𝑥2
𝑥1 + 𝑥2
𝑥1 + 𝑥2
𝑥1 + 𝑥2
𝑥1 + 𝑥2
𝑥1 + 𝑥2
𝑘 or 𝑘−1
𝑘1𝑘2
𝑘1𝑘2
𝑘1𝑘2
𝑘1 + 𝑘2
𝑘1 + 𝑘2
𝑘1 + 𝑘2
𝑘1(𝑟1 + 𝑘2)
Offline
Enc
2MtA
3MtA
2MtA
4MtA
4MtA
1MtA
(NI) Online
(✓) Dec
(✓) optimal
(✓) optimal
(×) MtA
(×) Fast
(✓) optimal
(✓) optimal
Online and Offline Signing. In real-world applications, it is ex-
tremely useful to divide an MPC protocol into offline and online
phases. In the offline phase, the message-independent part of the
protocol is computed. This is also known as pre-processing or pre-
computation and can utilize idle CPU time. This phase could be run
several times and in batches. Output of the offline phase is stored
for use in the online phase when the message to be processed is
known, This separation is commonly discussed in the literature.
For example, general-purpose MPC protocols could run the offline
phase to generate a batch of random Beaver triples [3] to be used
later to handle multiplication gates in the online phase.
As for threshold signatures, several works [6, 15, 16] have already
considered splitting the signing process of threshold ECDSA into
offline and online phases. In threshold signature, verifying the final
signature is inevitable as it allows the detection of malicious behav-
iors. Thus, we say that the online phase of a threshold signature is
optimal if it is non-interactive and its cost is the same as a single
signature verification. The scheme is said to be online-friendly if
its online phase is optimal. Existing works of threshold ECDSA
either have their online phase [7, 25, 33] requiring a decryption
of an additively homomorphic encryption or their offline phase
[6, 15, 16, 19, 26, 33] needing 2 to 4 calls of MtA functionality. Table
1 shows a summary of these works.
Starting from [27], several competitive two-party ECDSA proto-
cols [7, 25, 33] utilize multiplicative sharing in combination with
additively homomorphic encryption. Concretely, the signing key 𝑥
and the nonce 𝑘 are shared multiplicatively as 𝑥1𝑥2 and 𝑘1𝑘2. Two
parties jointly compute 𝑘−1𝑥 from multiplicative shares with the
additively homomorphic property of the underlying encryption
scheme. In spite of Paillier encryption as in [25] or Castagnos and
Laguillaumie (CL) encryption as in [7, 33], the final online phase of
this method requires a transfer and the decryption of the ciphertext.
Although the entire signing procedure is relatively practical, the
online phase is still heavy and not optimal.
As shown in Table 1, previous protocols require either a relatively
slow online computation, or 2 to 4 calls of MtA in the offline phase
when the online phase is optimal. The sub-protocol MtA dominates
the overall complexity since it is either computationally expensive
(for those based on homomorphic encryption [8, 26]) or needs a
very large amount of communication (for those based on oblivious
transfer [15]). For example, a single call of Paillier-based MtA needs
14 Paillier encryption/exponentiations and that of OT-based MtA
requires communication of approximately 90 KB of data.
In this paper, we focus on the two-party ECDSA. Our goal is
giving a construction to achieve (nearly) optimal online perfor-
mance with minimal number of calls, i.e., a single call, to the MtA
functionality.
1.1 Our Contribution