err = decoder.Decode(key)
checkError(err)
inFile.Close()
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
7.6 X.509 certificates X.509 证书
A Public Key Infrastructure (PKI) is a framework for a collection of public keys,
along with additional information such as owner name and location, and links between
them giving some sort of approval mechanism.
公钥基础架构（PKI）是一个公钥集合框架，它连同附加信息，如所有者名称和位置，以及它们之间
的联系提供了一些审批机制。
The principal PKI in use today is based on X.509 certificates. For example, web
browsers use them to verify the identity of web sites.
目前主要使用的PKI 是就是基于X.509 证书的。例如浏览器使用它验证站点的身份。
An example program to generate a self-signed X.509 certificate for my web site and
store it in a .cer file is
下面的程序是为自己的站点生成自签名X.509 证书并保存到一个.cer文件中
/* GenX509Cert
*/
package main
import (
"crypto/rand"
"crypto/rsa"
"crypto/x509"
"crypto/x509/pkix"
"encoding/gob"
"encoding/pem"
"fmt"
"math/big"
"os"
"time"
)
func main() {
random := rand.Reader
var key rsa.PrivateKey
loadKey("private.key", &key)
now := time.Now()
then := now.Add(60 * 60 * 24 * 365 * 1000 * 1000 * 1000) // one year
template := x509.Certificate{
SerialNumber: big.NewInt(1),
Subject: pkix.Name{
CommonName: "jan.newmarch.name",
Organization: []string{"Jan Newmarch"},
},
// NotBefore: time.Unix(now, 0).UTC(),
// NotAfter: time.Unix(now+60*60*24*365, 0).UTC(),
NotBefore: now,
NotAfter: then,
SubjectKeyId: []byte{1, 2, 3, 4},
KeyUsage: x509.KeyUsageCertSign | x509.KeyUsageKeyEncipherment |
x509.KeyUsageDigitalSignature,
BasicConstraintsValid: true,
IsCA: true,
DNSNames: []string{"jan.newmarch.name", "localhost"},
}
derBytes, err := x509.CreateCertificate(random, &template,
&template, &key.PublicKey, &key)
checkError(err)
certCerFile, err := os.Create("jan.newmarch.name.cer")
checkError(err)
certCerFile.Write(derBytes)
certCerFile.Close()
certPEMFile, err := os.Create("jan.newmarch.name.pem")
checkError(err)
pem.Encode(certPEMFile, &pem.Block{Type: "CERTIFICATE", Bytes: derBytes})
certPEMFile.Close()
keyPEMFile, err := os.Create("private.pem")
checkError(err)
pem.Encode(keyPEMFile, &pem.Block{Type: "RSA PRIVATE KEY",
Bytes: x509.MarshalPKCS1PrivateKey(&key)})
keyPEMFile.Close()
}
func loadKey(fileName string, key interface{}) {
inFile, err := os.Open(fileName)
checkError(err)
decoder := gob.NewDecoder(inFile)
err = decoder.Decode(key)
checkError(err)
inFile.Close()
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
This can then be read back in by
下面这个程序可以读取这个证书
/* GenX509Cert
*/
package main
import (
"crypto/x509"
"fmt"
"os"
)
func main() {
certCerFile, err := os.Open("jan.newmarch.name.cer")
checkError(err)
derBytes := make([]byte, 1000) // bigger than the file
count, err := certCerFile.Read(derBytes)
checkError(err)
certCerFile.Close()
// trim the bytes to actual length in call
cert, err := x509.ParseCertificate(derBytes[0:count])
checkError(err)
fmt.Printf("Name %s\n", cert.Subject.CommonName)
fmt.Printf("Not before %s\n", cert.NotBefore.String())
fmt.Printf("Not after %s\n", cert.NotAfter.String())
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
7.7 TLS TLS
Encryption/decryption schemes are of limited use if you have to do all the heavy
lifting yourself. The most popular mechanism on the internet to give support for
encrypted message passing is currently TLS (Transport Layer Security) which was
formerly SSL (Secure Sockets Layer).
如果自己实现所有的细节，加解密的方案在使用上是有限制的。当前互联网上最流行的加密消息传输
方案是TLS（Transport Layer Security安全传输层），其前身为SSL（Secure Sockets Layer
安全套接字层）。
In TLS, a client and a server negotiate identity using X.509 certificates. One this
is complete, a secret key is invented between them, and all encryption/decryption
is done using this key. The negotiation is relatively slow, but once complete a faster
private key mechanism is used.
在TLS 中，客户端和服务器之间使用X.509 证书进行身份验证。身份验证完成后，两者之间会生成
一个密钥，所有的加密和解密过程都使用这个密钥。虽然客户端和服务端协商的过程相对较慢，但一
旦完成就会使用一个较快的私钥机制。
A server is
服务器端程序
/* TLSEchoServer
*/
package main
import (
"crypto/rand"
"crypto/tls"
"fmt"
"net"
"os"
"time"
)
func main() {
cert, err := tls.LoadX509KeyPair("jan.newmarch.name.pem", "private.pem")
checkError(err)
config := tls.Config{Certificates: []tls.Certificate{cert}}
now := time.Now()
config.Time = func() time.Time { return now }
config.Rand = rand.Reader
service := "0.0.0.0:1200"
listener, err := tls.Listen("tcp", service, &config)
checkError(err)
fmt.Println("Listening")
for {
conn, err := listener.Accept()
if err != nil {
fmt.Println(err.Error())
continue
}
fmt.Println("Accepted")
go handleClient(conn)
}
}
func handleClient(conn net.Conn) {
defer conn.Close()
var buf [512]byte
for {
fmt.Println("Trying to read")
n, err := conn.Read(buf[0:])
if err != nil {
fmt.Println(err)
}
_, err2 := conn.Write(buf[0:n])
if err2 != nil {
return
}
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
The server works with the following client:
与服务器端程序对应的客户端程序:
/* TLSEchoClient
*/
package main
import (
"fmt"
"os"
"crypto/tls"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
service := os.Args[1]
conn, err := tls.Dial("tcp", service, nil)
checkError(err)
for n := 0; n < 10; n++ {
fmt.Println("Writing...")
conn.Write([]byte("Hello " + string(n+48)))
var buf [512]byte
n, err := conn.Read(buf[0:])
checkError(err)
fmt.Println(string(buf[0:n]))
}
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
7.8 Conclusion 结论
Security is a huge area in itself, and in this chapter we have barely touched on
it. However, the major concepts have been covered. What has not been stressed is
how much security needs to be built into the design phase: security as an afterthought
is nearly always a failure.
安全本身是一个巨大的领域，在本章中，我们几乎没有触及，但已经覆盖了主要的概念。尚未强调的
是，需要在设计阶段如何考虑安全构建：亡羊补牢几乎是没有意义的。
Copyright Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 8 第八章
HTTP 关于 HTTP
8.1 Introduction 简介
The World Wide Web is a major distributed system, with millions of users. A site
may become a Web host by running an HTTP server. While Web clients are typically
users with a browser, there are many other "user agents" such as web spiders, web
application clients and so on.
万维网是一个庞大的，拥有数以百万计用户的分布式系统。网站就是一个运行着HTTP 服务器的Web
主机。而Web 客户端通常是浏览器用户，当然也还有许多其他的“用户”，如网络蜘蛛，Web 应用程
序客户端等。
The Web is built on top of the HTTP (Hyper-Text Transport Protocol) which is layered
on top of TCP. HTTP has been through three publically available versions, but the
latest - version 1.1 - is now the most commonly used.
Web 使用的HTTP（超文本传输协议）是基于TCP协议的。HTTP 有三个公开可用的版本，目前最常用
的是最新的版本1.1。
In this chapter we give an overview of HTTP, followed by the Go APIs to manage HTTP
connections.
本章首先对HTTP 进行概述，然后介绍如何通过 Go API 管理HTTP 连接。
8.2 Overview of HTTP HTTP 概述
URLs and resources
URL 和资源
URLs specify the location of a resource. A resource is often a static file, such
as an HTML document, an image, or a sound file. But increasingly, it may be a
dynamically generated object, perhaps based on information stored in a database.
URL 指定资源的位置。资源通常是HTML 文档、图片、声音文件这样的静态文件，但越来越多的资源
是动态生成的对象，比如根据数据库信息生成。
When a user agent requests a resource, what is returned is not the resource itself,
but some representation of that resource. For example, if the resource is a static
file, then what is sent to the user agent is a copy of the file.
“用户”请求资源时，返回的并不是资源本身，而是资源的代表。如果资源是静态文件，那么返回给用
户的就是文件的一个副本。
Multiple URLs may point to the same resource, and an HTTP server will return
appropriate representations of the resource for each URL. For example, an company
might make product information available both internally and externally using
different URLs for the same product. The internal representation of the product might
include information such as internal contact officers for the product, while the
external representation might include the location of stores selling the product.
不同的URL 可以指向相同的资源，HTTP 服务器会给每个URL 返回适当的代表。例如，针对同一个产
品，某公司可以使用不同的URL 给本地和外地的用户查看其产品信息，本地用户可以看到本地产品
联系人这类内容，而外地用户看到的内容则包括产品销售门店的地址等等。
This view of resources means that the HTTP protocol can be fairly simple and
straightforward, while an HTTP server can be arbitrarily complex. HTTP has to deliver
requests from user agents to servers and return a byte stream, while a server might
have to do any amount of processing of the request.
这其实就意味着，HTTP 协议本身非常简单直接，但 HTTP 服务器却可能非常复杂。HTTP 将用户请求
发送到服务器，并返回字节流，而服务器针对该请求可能需要做很多很多处理。
HTTP characteristics
HTTP 的特点
HTTP is a stateless, connectionless, reliable protocol. In the simplest form, each
request from a user agent is handled reliably and then the connection is broken.
Each request involves a separate TCP connection, so if many reources are required
(such as images embedded in an HTML page) then many TCP connections have to be set
up and torn down in a short space of time.
HTTP 协议是无状态，面向连接和可靠的。最简单的形式是，每个从用户发起的请求被可靠地处理，
然后断开连接。每次请求都包括一个独立的TCP 连接，所以如果要请求很多资源（如在HTML 页面中
嵌入的图像），则必须在很短的时间内建立并断开许多TCP 连接。
Thera are many optimisations in HTTP which add complexity to the simple structure,
in order to create a more efficient and reliable protocol.
为构建更高效更可靠的协议，有许多在这种简单结构基础上添加复杂性的优化技术。
Versions
版本
There are 3 versions of HTTP
HTTP 有三个版本
 Version 0.9 - totally obsolete
 Version 1.0 - almost obsolete
 Version 1.1 - current
 Version 0.9 - 完全废弃
 Version 1.0 - 基本废弃
 Version 1.1 - 当前版本
Each version must understand requests and responses of earlier versions.
每个版本必须兼容早期的版本。
HTTP 0.9
Request format
请求格式
Request = Simple-Request
Simple-Request = "GET" SP Request-URI CRLF
Response format
响应格式
A response is of the form
响应形式类似：
Response = Simple-Response
Simple-Response = [Entity-Body]
HTTP 1.0
This version added much more information to the requests and responses. Rather than
"grow" the 0.9 format, it was just left alongside the new version.
该版本在请求和响应中增加了很多信息。与其说是0.9 的升级版，还不如说它是一个全新的版本。
Request format
请求格式
The format of requests from client to server is
从客户端到服务器端的请求格式：
Request = Simple-Request | Full-Request
Simple-Request = "GET" SP Request-URI CRLF