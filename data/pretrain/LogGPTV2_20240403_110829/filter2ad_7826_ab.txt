字节）、不同二进制文件读/写(MISO (read) 或 MOSI (write)) 3、Traffic Map效果分析(hexdump -C
output.bin | less) 通过上述分析，发现Traffic Map、 MOSI和MISO、地址等信息，发现save命令还是有效的。
结合第二部分的映射表，图十三所示。
 图十三 地址映射表
通过上面的分析，可以知道save命令的数据流比较简单：
1、从保护区域读取64kb的数据 2、覆盖掉刚刚读取的64kb数据
MISO的二进制中可以看出，主要传输的都是1：如图十四所示。
 图十四
MISO数据
而MOSI的内容更像是明文的数据，非常像第二节中发现的/var/curcfg.xml文件，包含了wifi密码等数据信息。
Flash中存在保留区是通用的做法，这些区域是为了保存各种各样的数据，以便在重启或者用户配置、恢复出厂等时候使用，save命令就是负责保存数据到这些区域的。也许是为了保留一些出厂信息，这也许就是为什么会在/var/文件夹下发现了XML文件。
### 六、固件
在整个挖掘过程中，目标是促进你不断深挖的动力。
我们的目标是找到生成默认wifi密码的算法，如果我们得到了这个算法并且从公开信息中获取某些参数，那么我们可能就能够获取所有的HG533路由器的默认密码。
此类安全问题已经被多次发现，通常的公开数据是从MAC地址或者SSID中获取。
当然，并不是所有的路由器设备都是这样的，通常情况下，在嵌入式工程中，需要有某段数据既能被固件知道，同时又是每一个设备都不同而且从外面的实体中可以获取的，这段数据的获取是个经常性的问题，存在于工业界的所有的物联网设备中。
### 七、标签的问题
在今天这个时代，你会遇到一个问题就是路由器连接到网络，而目前就是在路由器的一面可以发现一张贴纸，而上面就有路由器的默认管理密码，然后配置好后连接网络。如图十五所示。
图十五 路由器后面的标签
这个WIFI密码就是一个特定的数据块，工长生产的时候，固件和电脑都需要知道这个默认的WIFI密码，通常情况下开发人员会采用两种可行的方案：
1、设备和电脑采用相同的生成算法，而且输入的参数都知道 2、电脑为每一个设备生成一个密码，然后分别保存到设备中
除了不能让硬件厂商向每一个设备中存入不同的参数或者不愿承担这个额外写入的成本之外，第一种方法通常被视为最后的手段。第二种方法从设计上看更合理，但是通常情况下，公司不会直接随机的生成这个密码，而是会使用一种算法得到一个可预测的输出。
### 八、恢复出厂设置嗅探
接下来我们就要弄清楚那些动作将会启动PCB相关的数据流，有一个特殊的动作，即长按10s复位键，就会是路由器恢复出厂设置，这其中会重置wifi的密码，当然也会执行默认wifi的生成算法。如果生成算法或者参数要从flash中获取，那么我们就能获取读取的通信数据。
在长按复位键的时候，我们观察UART接口的数据，逻辑分析仪和示波器的数据，和之前的ATP的save过程一样，得到的结果如图十六、图十七所示。
 图十六
UART输出结果
 图十七
逻辑分析仪的数据流
同样，我们分析数据流，可以看出从保护区读取了如下的数据。
    ___________________
    |Transmission  Map|
    |  MOSI  |MISO  |
    |        |0x7e0000| Size: 12    //Part of the Protected area
    |        |0x7e0000| Size: 1782
    |        |0x7e073d| Size: 63683
    | ERASE 0x7e073d  | Size: 64kB
    |0x7e073d|        | Size: 195
    |0x7e0800|        | Size: 256
    |0x7e0900|        | Size: 256
    ---------//--------           [...]
    ---------//--------    |0x7e0600|        | Size: 256
    |0x7e0700|        | Size: 61
    |        |0x7d0008| Size: 65529 //Part of the Protected area
    | ERASE 0x7d0008  | Size: 64kB
    |0x7d0008|        | Size: 248
    |0x7d0100|        | Size: 256
    ---------//--------           [...]
    ---------//--------    |0x7dff00|        | Size: 256
    |0x7d0000|        | Size: 8
    |        |0x1c3800| Size: 512   //Part of the Filesystem
    |        |0x1c3a00| Size: 512
    ---------//--------           [...]
    ---------//--------    |        |0x1c5a00| Size: 512
    |        |0x1c5c00| Size: 512
    -------------------
我决定结合之前的二进制文件作进一步的分析，读取闪存信息（ ATP_LOG），这里有出厂重置以及远程访问信息，这部分是在0xff（1s
），改写内存（1s），创建新的`ATP_LOG`信息以及当前配置文件（curcfg.xml
），从文件系统中读取压缩数据信息。系统文件中有一部分数据是在读取（
AFTER）过程中得到的，另外需要说明的就是这个和密码加密算法没有关系，可能算法已经加载到内存中了，但SPI通信方式也没有确定这一点。
在 MOSI部分可以看到新的WiFi密码（闪存）以XML字符串形式出现，如图十八所示。
 图十八
新的wifi密码明文（MOSI） 如果想要获取到默认的密码，那就需要分析MISO
部分，也许内存中已经加载了，而在下一部分将会对这个深挖。而这里也需要对SPI通信在做分析（ HTTP认证），主要是看新的WiFi密码，即Map、 MISO、
MOSI。下面就是在闪存分析到的信息，如图十九所示。
 图十九
分析闪存得到信息
从中可以看出，这些都是明文信息，也就是说没有加密算法在里面，但这也不是决定性的，因为这也有可能是生成的凭证，或者延迟算法出现的时间也就是限制访问算法。
* * *