6: (K0, V 0) = CTR_DRBG_Update(Ia, K0, V 0)
7: ctr0 = ctr + 1
8: return (V 0, K0, ctr0), R
V 0 = V 0 + 1 mod 2128, U = [U||AES_ECB_Encrypt(K0, V0)]
CTR_DRBG Generate Algorithm The Generate algorithm is described in Algorithm 2. It takes
as input the current values for V , K, and ctr, n, the number of pseudo-random bits to be
returned. It outputs R, the pseudo-random bits returned, and the new values for V , C, and ctr.
Two Generate algorithms are deﬁned, one using a derivation function Block_Cipher_df, one not
using this function. As noted before, we focus on the one using the derivation function.
Algorithm 3 NIST CTR_DRBG_Update
Require: V , K, I
Ensure: V 0, K0
1: U = ∅
2: while len(U)  42.
Based on this discussion, we suggest the following recipe when instantiating our construction
with a particular standard pseudo-random number generator G. Instead of directly looking at
the term εcomp = 2k+1εprg when examining a candidate value of security parameter k, one should
ask the following question instead: based on the current knowledge, what is the largest value of
k (call it k∗) so that no attacker can achieve advantage better than 2−k when G is used in the
stream cipher mode for 2k times? When this k∗ is determined, there is no point to set k > k∗,
as this only increases the state length n and degrades the eﬃciency of the generator, without
increasing its security ε beyond 2−k∗ (as εcomp ≤ 2−k∗ anyway). However, setting k ≤ k∗ will
result in ﬁnal security ε ≈ 2−k while improving the eﬃciency of the resulting generator (i.e.,
state length n = m + 9k + 1, γ∗ = m + 8k + 1, and the complexity of refresh and next).
With this (somewhat heuristic) recipe, we believe setting k∗ = 64 was a fair and reasonable
choice when using AES_128 in counter mode to implement G.
4.6 Benchmarks
We now present eﬃciency benchmarks between our construction G and LINUX, a pseudo-random
number generator with input that we analyze in Section 7.2. These benchmarks are based on
a very optimistic hypothesis concerning LINUX and even with this hypothesis, our construction
G appears to be more eﬃcient. As shown, a complete internal state accumulation is on average
two times faster for G than for LINUX and a 2048-bits key generation is on average ten times
faster for G than for LINUX.
For LINUX, we made the (optimitic) hypothesis that for the given input distribution, the mix-
ing function of LINUX accumulates the entropy in the internal state, that is H∞(M(S, I)) =
H∞(S) + H∞(I) if S and I are independent, and that the SHA1 function used for transfer be-
tween the pools and output is a perfect extractor, that is H∞(SHA1(S∗)) = 160 if H∞(S∗) = 160.
Of course, both of these hypotheses are extremely strong, but we make them to achieve the most
optimistic (and probably unrealistic!) estimates when comparing LINUX with our construction
G.
We implemented LINUX with functions extract_buf and mix_pool_bytes that we extracted from
the source code and we implemented G using fb_mul_lodah and fb_add from RELIC open
source library [AG] (that we extended with the ﬁelds F2489, F2579 and F2705), aes_setkey_enc
and aes_crypt_ctr from PolarSSL open source library [Pol]. CPU cycle count was done using
ASM instruction RDTSC. Implementation was done on a x86 Ubuntu workstation. All code was
written in C, we used gcc C compiler and linker, code optimization ﬂag O2 was used to build
the code.
4.6.1 Benchmarks on the Accumulation Process
First benchmarks are done on the accumulation process. We simulated a complete accumulation
of the internal state for LINUX and G with an input containing one bit of entropy per byte. For
G, by Theorem 10, 8 inputs of size 449 bits (resp. 579, 705 bits) are necessary to recover from
an internal state compromise, whereas by hypothesis, for LINUX, b160/12c = 13 inputs of size
12 bits are necessary to recover from an internal state compromise and transfers need to be done
between the input pool and the output pools.
For LINUX, denoting St = (St
r are the successive states of the input
r), where St
pool, the non-blocking output pool and the blocking output pool, respectively, we implemented
u and St
i, St
i , St
u, St
— 73 —
Chapter 4. Robustness of Pseudo-random Number Generators with Inputs
CPU Cycles
CPU Cycles
6 ×107
4 ×107
2 ×107
6 ×107
4 ×107
2 ×107
LINUX
G(705)
Steps 2. and 3.
LINUX
G(705)
0
0
100
100 accumulations for LINUX and G
25
50
75
# of acc.
Step 1.
0
0% 25% 50% 75% 100%
One accumulation for LINUX and G
% of acc.
Figure 4.10 – Benchmark on the Accumulation Process
the following process, starting from a compromised internal state (S0
and using successive inputs of size 12 bytes, that we denote I t:
i , S0
u, S0
r), of size 6144 bits,
i with I0,··· , I13: St
1. Refresh S0
2. Transfer 1024 bits from S13
i
, I t−1). By hypothesis, H∞(S13
i = M(St−1
to Sr. The transfer is made by blocks of 80 bits, therefore,
13 transfers are necessary. Each transfer is done in two steps: ﬁrst LINUX generates from
i = F ◦ H ◦ M(S13
S13
i )) and then it mixes it with Sr,
i
giving the new states S14
i ). Then by hypothesis,
H∞(S13
r ) = 80. After repeating these steps 12 times, by hypothesis, H∞(S26
an intermediate data T 13
, H(S13
r = M(S13
i )) and S14
i = M(S13
r ) = 1024.
i ) = 168.
i
, H(S13
i
i
r , T 13