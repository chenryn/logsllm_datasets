Definition: Namespace
A name that uniquely identifies a set of objects so there is no ambiguity when objects from different sources are 
used together.
Namespaces are useful because if you have, for example, a Dog namespace and a Furniture namespace, and they both 
have a Leg class, you can refer to Dog.Leg and Furniture.Leg and be clear about which class you are mentioning.
Declaring a Namespace
To declare a namespace, all that is required is that you put namespace followed by a name at the top of your file.
declaring a namespace
namespace Tutorial
class Thing():
    pass
This creates your class Tutorial.Thing. While coding inside your namespace, it will be transparently Thing.
To declare a namespace within a namespace, just place a dot . inbetween each other.
Recommendation
Declare a namespace at the top of all your files.
Use PascalCase for all your namespaces.
Importing Another Namespace
To use classes from another namespace, you would use the import keyword.
The most common namespace you will import is System.
importing from a namespace
import System
Console.WriteLine()
not importing from a namespace
System.Console.WriteLine()
Both produce the exact same code, it's just easier and clearer with the import.
Recommendation
Don't be afraid to import, just don't import namespaces that you aren't using.
Recommendation
When importing, import included namespaces first, such as System or Boo.Lang.
Then import your 3rd party namespaces.
Alphabetize the two groups seperately.
If you are importing from another assembly, you would use the phrase import  from , for 
example
importing from an external assembly
Part 12 - Namespaces
http://boo.codehaus.org/Part+12+-+Namespaces?print=1
2 of 2
5/27/2008 9:32 PM
import System.Data from System.Data
import Gtk from "gtk-sharp"
System.Data is part of an external library which can be added, System.Data.dll. Gtk is part of the Gtk# library, which, 
since it has a special name (with a dash in it), it must be quoted.
Recommendation
Only use the import  from  if you are using one file and one file only. If you are using more 
than that, you should be using a build tool, such as NAnt, which is discussed in Part 19 - Using the Boo Compiler.
Exercises
Figure out a good exercise for this section.
1.
Go on to Part 13 - Enumerations
Part 13 - Enumerations
http://boo.codehaus.org/Part+13+-+Enumerations?print=1
1 of 1
5/27/2008 9:33 PM
Part 13 - Enumerations
Part 13 - Enumerations
Definition: Enumeration
A set of name to integer value associations.
Declaring an Enumeration
Enumerations are handy to use as fields and properties in classes.
declaring an enum
enum Day:
    Sunday
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Sunday
class Action:
    [Property(Day)]
    _day as Day
Enumerations are also handy in preventing "magic numbers", which can cause unreadable code.
Definition: Magic Number
Any number outside of -1, 0, 1, or 2.
Enumerations technically assign an integer value to each value, but that should generally be abstracted from view.
declaring an enum
enum Test:
    Alpha
    Bravo
    Charlie
is the same as
declaring an enum
enum Test:
    Alpha = 0
    Bravo = 1
    Charlie = 2
Recommendation
Except in special cases, do not assign numbers.
Exercises
Think of another good instance of using enums.
1.
Go on to Part 14 - Exceptions
Part 14 - Exceptions
http://boo.codehaus.org/Part+14+-+Exceptions?print=1
1 of 2
5/27/2008 9:33 PM
Part 14 - Exceptions
Part 14 - Exceptions
Definition: Exception
A mechanism designed to handle runtime errors or other problems (exceptions) inside a computer program.
Exceptions are very important, as they are raised whenever an error occurs in the system. (Or at least they should 
be.)
Catching Exceptions
An exception stops the program if it is not caught.
Division by Zero
print 1 / 0
Output
System.DivideByZeroException: Attempted to divide by zero.
   at Test.Main(String[] argv)
Which stopped the program.
To handle the situation, exceptions must be caught.
Exceptions are either caught in a try-except statement, a try-ensure statement, or a try-except-ensure statement.
Also, all Exceptions are derived from the simple Exception.
try-except example
import System
try:
    print 1 / 0
except e as DivideByZeroException:
    print "Whoops"
print "Doing more..."
Output
Whoops
Doing more...
This prevents the code from stopping and lets the program keep running even after it would have normally crashed.
There can be multiple except statements, in case the code can cause multiple Exceptions.
Try-ensure is handy if you are dealing with open streams that need to be closed in case of an error.
try-ensure example
import System
try:
    s = MyClass()
    s.SomethingBad()
ensure:
    print "This code will be executed, whether there is an error or not."
Output
This code will be executed, whether there is an error or not.
System.Exception: Something bad happened.
Part 14 - Exceptions
http://boo.codehaus.org/Part+14+-+Exceptions?print=1
2 of 2
5/27/2008 9:33 PM
   at Test.Main(String[] argv)
As you can see, the ensure statement didn't prevent the Exception from bubbling up and causing the program to 
crash.
A try-except-ensure combines the two.
try-except-ensure example
import System
try:
    s = MyClass()
    s.SomethingBad()
except e as Exception:
    print "Problem! ${e.Message}"
ensure:
    print "This code will be executed, whether there is an error or not."
Output
Problem: Something bad happened.
This code will be executed, whether there is an error or not.
Recommendation
If you don't solve the problem in your except statement, use the raise command without any parameters to 
re-raise the original Exception.
Raising Exceptions
There are times that you want to raise Exceptions of your own.
Raising an Exception
import System
def Execute(i as int):
    if i ) as 
2. function.BeginInvoke() as IAsyncResult
function.EndInvoke(IAsyncResult) as 
3.
.Invoke just calls the function normally and acts like it was called with just regular parentheses ().
.BeginInvoke starts a seperate thread that does nothing but run the function invoked.
.EndInvoke finishes up the previously invoked function and returns the proper return type.
example of .Invoke
def Nothing(x):
    return x
i = 5
assert 5 == Nothing(i)
assert i == Nothing.Invoke(i)
assert i == Nothing.Invoke.Invoke(i)
Since .Invoke is a function itself, it has its own .Invoke.
Here's a good example of .BeginInvoke
Multithreading with .BeginInvoke
import System
import System.Threading
class FibonacciCalculator:
    def constructor():
        _alpha, _beta = 0, 1
        _stopped = true
    def Calculate():
        _stopped = false
        while not _stopped:
            Thread.Sleep(200)
            _alpha, _beta = _beta, _alpha + _beta
            print _beta
    def Start():
        _result = Calculate.BeginInvoke()
    def Stop():
        _stopped = true
        Calculate.EndInvoke(_result)
    _result as IAsyncResult
    _alpha as ulong
    _beta as ulong
    _stopped as bool
fib = FibonacciCalculator()
fib.Start()
prompt("Press enter to stop...\n")
fib.Stop()
The output produces the Fibonacci sequence roughly every 200 milliseconds (because that's what the delay is). This 
will produce an overflow after it gets up to 2^64.
Part 15 - Functions as Objects and Multithreading
http://boo.codehaus.org/Part+15+-+Functions+as+Objects+and+Multith...
2 of 2
5/27/2008 9:34 PM
The important thing is that it stops cleanly if you press Enter.
Exercises
Think of an exercise
1.
Go on to Part 16 - Generators
Part 16 - Generators
http://boo.codehaus.org/Part+16+-+Generators?print=1
1 of 2
5/27/2008 9:35 PM
Part 16 - Generators
Part 16 - Generators
Generator Expressions
Definition: Generator Expression
An phrase that creates a generator based on the syntax:
 for  [as ] in  [if|unless ]
Generator Expressions have similar syntax to the for loops that we have covered, and serve a similar purpose.
The best way to learn how to use Generator Expressions is by example, so here we load up a booish prompt.
$ booish
>>> List(x for x in range(5)) // simplest Generator Expression
[0, 1, 2, 3, 4]
>>> List(x * 2 for x in range(5)) // get double of values
[0, 2, 4, 6, 8]
>>> List(x**2 for x in range(5)) // get square of values
[0, 1, 4, 9, 16]
>>> List(x for x in range(5) if x % 2 == 0) // check if values are even
[0, 2, 4]
>>> List(x for x in range(10) if x % 2 == 0) // check if values are even
[0, 2, 4]
>>> List(y for y in (x**2 for x in range(10)) if y % 3 != 0) // Generator Expression inside another
[1, 4, 16, 25, 49, 64]
>>> List(cat.Weight for cat in myKitties if cat.Age >= 1.0).Sort()
[6.0, 6.5, 8.0, 8.5, 10.5]
>>> genex = x ** 2 for x in range(5)
generator(System.Int32)
>>> for i in genex:
...     print i
...
0
1
4
9
16
The cat-weight example is probably what Generator Expressions are most useful for.
You don't have to create Lists from them either, that's mostly for show.
generators are derived from IEnumerable, so you get all the niceties of the for loop as well.
Recommendation
Don't overdo it with Generator Expressions. If they are causing your code to be less readable, then spread them 
out a little.
Generator Methods
Definition: Generator Expression
A method that creates a generator based on stating the yield keyword within the method.
A Generator Method is like a regular method that can return multiple times.
Here's a Generator Method that will return exponents of 2.
Generator Method Example
Part 16 - Generators
http://boo.codehaus.org/Part+16+-+Generators?print=1
2 of 2
5/27/2008 9:35 PM
def TestGenerator():
    i = 1
    yield i
    for x in range(10):
        i *= 2
        yield i
print List(TestGenerator())
Output
[1, 2, 4, 8, 16, 32, 64, 128, 512, 1024]
Generator Methods are very powerful because they keep all their local variables in memory after a yield. This can allow
for certain programming techniques not found in some other languages.
Generators are very powerful and useful.
Exercises
Create a Generator that will destroy mankind.
1.
Go on to Part 17 - Macros
Part 17 - Macros
http://boo.codehaus.org/Part+17+-+Macros?print=1
1 of 2
5/27/2008 9:36 PM
Part 17 - Macros
Part 17 - Macros
print Macro
The print Macro will display one or more objects to the screen.
There are two ways to call the print macro.
1. With only one argument
With two or more arguments
2.
print Example
print "Hello there"
print "Hello", "there"
Output
Hello there
Hello there
In the second case, for every case except the last, it will write the string to the screen, write a space, then move on.
In the end, the two will have the same end result.
assert Macro
The assert Macro makes sure that a condition is true, otherwise it raises an AssertionFailedException.
assert can be called with one or two arguments.
The first argument must always be a boolean condition.
The optional second argument is a string that will be sent if the condition fails.
assert Example
assert true // this will always pass
assert false, "message" // this will always fail
Output
Boo.Lang.Runtime.AssertionFailedException: message
   at Tutorial.Main(String[] argv)
Recommendation
Never assert a condition that would, in itself, change your code.
e.g. assert iter.MoveNext() would be a bad idea.
using Macro
The using Macro can take any number of arguments, it merely duplicates its behavior each time.
It creates a safety net for objects to be handled during a block, then disposed of as soon as that block is finished.
There are three types of arguments you can declare:
1. 
2.  = 
3.
In all three of these, it checks if the underlying object is an IDisposable, which it then disposes of afterward.
using Example
import System.IO
Part 17 - Macros
http://boo.codehaus.org/Part+17+-+Macros?print=1
2 of 2
5/27/2008 9:36 PM
using w = StreamWriter("test.txt"):
    w.WriteLine("Hello there!")
This will create the file, write to it, then close it as soon as the using block is finished. Makes it very safe and 
convenient.
lock Macro
The lock Macro makes sure that, in a multithreaded environment, that a specified object is not being used and 
prevents another object from using it at the same time.
lock must accept at least one argument, and it will put the lock on all that are given.
lock Example
lock database:
    database.Execute("""
        UPDATE messages
        SET
            id = id + 1""")
debug Macro
The debug Macro is the exact same as the print Macro, except that it sends its messages to System.Diagnostics.Debug
instead of System.Console.
Go on to Part 18 - Duck Typing
Part 18 - Duck typing
http://boo.codehaus.org/Part+18+-+Duck+typing?print=1
1 of 2
5/27/2008 9:37 PM
Part 18 - Duck typing
Part 18 - Duck Typing
Definition: Duck Typing
Duck typing is a humorous way of describing the type non-checking system. Initially coined by Dave Thomas in 
the Ruby community, its premise is that (referring to a value) "if it walks like a duck, and talks like a duck, then 
it is a duck".
Even though Boo is a statically typed language, Duck Typing is a way to fake being a dynamic language. Duck typing 
allows variables to be recognized at runtime, instead of compile time. Though this can add a sense of simplicity, it does
remove a large security barrier.
Duck Typing Example
d as duck
d = 5 // currently set to an integer.
print d
d += 10 // It can do everything an integer does.
print d
d = "Hi there" // sets it to a string.
print d
d = d.ToUpper() // It can do everything a string does.
print d
Output
5
15
Hi there
HI THERE
Duck typing is very handy if you are loading from a factory or an unpredictable dynamic library.
Recommendation
Do not enable duck typing by default. It should only be used in a few situations.
On a side note, The booish interpreter has duck typing enabled by default. This can be disabled by typing in 
interpreter.Ducky = false
Here is a practical example of where duck typing is useful.
Practical Duck Typing
import System.Threading