true that alternative DNS resolvers such as GoogleDNS or
OpenDNS oﬀer better performance than the local resolver?
To answer this question, it is crucial to rely on measure-
ments that are carried out directly from end-hosts connected
to commercial ISPs, see Section 3. If the DNS deployment
within the local ISP is properly done, we would expect very
small latencies to the resolvers maintained by the local DNS.
Yet, we ﬁnd cases where GoogleDNS and OpenDNS outper-
form the local DNS resolver in terms of observed response
times.
We select two vantage points that are representative for
many other traces. The ﬁrst is located in Germany and we
qualify it as “good ISP”. The second is based in the US and
we call it “bad ISP”. It is not our goal to assess individ-
ual ISPs. Rather these terms reﬂect that the “good ISP”
shows better DNS performance in terms of response times,
load balancing, caching, etc., compared to the “bad ISP”,
see Section 4.2. Figure 1 and Figure 2 display the CCDF
of the response times, in milliseconds, observed at these two
vantage points. The leftmost part of the curves on these two
ﬁgures shows the minimal latency that has been achieved by
the DNS resolvers across all 10, 000 queries. This minimal
latency can be seen as a metric to characterize the proximity
of a DNS resolver to the actual end-host. Figure 1 shows a
case where the smallest latency diﬀers signiﬁcantly between
the local ISP, OpenDNS, and GoogleDNS at 11ms, 24ms
and 44ms. Although both GoogleDNS and OpenDNS main-
tain a large set of strategically placed resolvers and rely on
anycast to route DNS queries, their latencies are far higher
than those of the local resolver. The local resolver appears
to be close to the end-host. This underlines the importance
of placing a resolver in the proximity of end-hosts.
Surprisingly,
there are cases where we observe that
GoogleDNS or OpenDNS perform as well if not better than
the local ISP resolver, see Figure 2. For our “bad ISP” the
network distance towards OpenDNS appears to be especially
17F
D
C
C
0
0
+
e
1
2
0
−
e
1
4
0
−
e
1
GOOGLE 1st
LOCAL 1st
OPENDNS 1st
GOOGLE 2nd
LOCAL 2nd
OPENDNS 2nd
10
20
50 100
500
2000 5000
Response time (ms)
Figure 1: CCDF of response times for “good ISP”.
The local resolver has signiﬁcantly lower RTTs than
both GoogleDNS and OpenDNS.
F
D
C
C
0
0
+
e
1
2
0
−
e
1
4
0
−
e
1
GOOGLE 1st
LOCAL 1st
OPENDNS 1st
GOOGLE 2nd
LOCAL 2nd
OPENDNS 2nd
10
20
50 100
500
2000 5000
Response time (ms)
Figure 2: CCDF of response times for “bad ISP”.
The time for the second query does not improve
much.
small.
Indeed, the RTT towards OpenDNS is only 10ms
while it is 11ms towards the local DNS. In total, we observe
17 vantage points where either GoogleDNS or OpenDNS
have in the worst case the same latency as the local DNS.
On 21 vantage points, the local DNS is at least 25ms faster
than the other two third-party resolvers; for the remaining
29 vantage points the local DNS only marginally outper-
forms GoogleDNS and OpenDNS.
In addition to deploying resolvers in the proximity of end-
hosts, another key aspect to achieve good DNS performance
is eﬃcient caching. With respect to caching, Google aims
to increase the number of cache hits through load balancing
DNS resolvers that avoid cache fragmentation or by actively
prefetching names [2]. When the curves for the ﬁrst query
are close to vertical, this shows that the caches are primed.
Based on our plots, the three resolvers do not seem to be so
well primed. While GoogleDNS performs signiﬁcantly better
on the tail of the curve than OpenDNS for the traces shown,
this does not hold in general. Based on our measurements,
we can neither conﬁrm nor refute any gains obtained from
techniques such as name prefetching or load balancing for
shared caching as Google or OpenDNS may use.
To study caching behavior, our measurements always per-
form two consecutive DNS queries for the same name. Com-
paring the curves in Figure 1 for the ﬁrst and second DNS
query, we observe considerably faster response times for the
second query due to caching of the DNS answers by the
resolvers. The diﬀerences in the latencies to the resolvers
become then even more obvious. Typically over 95% of the
second queries are being answered within 100ms.
Overall, the barrier to achieve lower DNS response times
seems to be the distance to the local resolver, once the DNS
resolver cache is properly populated. GoogleDNS for in-
stance does not seem to achieve their 50ms objective [10]
for most of the queries in the case of the “good ISP” (Fig-
ure 1). There are still less than 1% of the cases for which
all resolvers take more than 100ms to answer, due to non-
cacheable records, one-time errors, and measurement arti-
facts.4
4.2 DNS Deployment
The observation from the previous section, that most of
the second queries can be answered from the cache, does not
hold for the local DNS of the “bad ISP” (Figure 2). In this
section, we dig further into the results from Section 4.1, by
showing the results from the ﬁrst query against those of the
second query on a scatter plot (see Figure 3 and 4). The x-
axis of Figure 3 and 4 show the response time in milliseconds
for the ﬁrst query, while the y-axis the response time in
milliseconds for the second query.
In Figure 3, we observe one horizontal line per DNS re-
solver for the “good ISP”, meaning that the response times
for the second queries show only small variation and are con-
sistently better than those for the ﬁrst query. An ISP that
has a properly deployed DNS infrastructure should show this
kind of pattern. However, several of our vantage points dis-
play a behavior like the “bad ISP” (Figure 4), where points
are scattered along a horizontal and vertical line, as well as
the diagonal. We explain this behavior by a load balancing
setup without a shared cache. Sections with a sharp decline
in the CCDF for the second query (Figure 1) correspond to
the horizontal patterns in Figure 3: the ﬁrst query primed
the cache and the second query could be served from that
cache. The diagonal in Figure 4 stems from hostnames for
which both queries needed an iterative resolving because the
second query was redirected to a diﬀerent resolver. Finally,
the vertical line springs from host names for which the ﬁrst
query could be served from the cache, while the second query
was directed to a diﬀerent resolver where the cache was not
primed. Our conjecture is supported by consistent observa-
tions in which a signiﬁcant proportion of the TTLs for the
ﬁrst and the second query diﬀer considerably.
Several ISPs for which we have multiple traces display this
behavior in a consistent way. Furthermore, we see this be-
havior for both OpenDNS and GoogleDNS in several traces.
We conjecture that OpenDNS and GoogleDNS also use load
balancing for highly loaded sites.
For some ISPs, we observe high RTTs towards the local
DNS and load balancing. We conjecture that in these cases
the DNS infrastructure is centralized and requires load bal-
4Typically, the second latency is considerably higher than
the ﬁrst one for at most 10 out of 10, 000 hosts. Poten-
tial reasons may include ﬂuctuations in routing, links resets,
server reconﬁguration, etc.
18GOOGLE
LOCAL
OPENDNS
0
0
0
5
0
0
0
2
0
0
5
0
0
2
0
0
1
0
5
0
2
0
1
)
s
m
(
y
r
e
u
q
d
n
o
c
e
s
r
o
f
e
m
T
i
GOOGLE
LOCAL
OPENDNS
)
s
m
(
y
r
e
u
q
d
n
o
c
e
s
r
o
f
e
m
T
i
0
0
0
5
0
0
0
2
0
0
5
0
0
1
0
5
0
2
0
1
10
20
50 100
500
2000 5000
10
20
50 100
500
2000 5000
Time for first query (ms)
Time for first query (ms)
Figure 3: “Good ISP”: as expected most of the sec-
ond queries can be answered signiﬁcantly faster than
the ﬁrst query due to caching.
Figure 4: “Bad ISP”: the ISP balances load over
diﬀerent DNS resolvers, so the second query can-
not always be answered from the cache. A strong
diagonal and a vertical line emerge.
ancing to compensate for the high number of queries arriving
at a single location.
Although there are valid reasons to rely on DNS load bal-
ancing, the way some ISPs are implementing it prevents
caching from being properly utilized. A hierarchical DNS
infrastructure could improve hit rates while preserving dis-
tribution of load to diﬀerent machines.
4.3 DNS Answers