Let's say that you have a JSON document similar to this:
    {
        "value": 5,
    }
And the value of `value` can be either a number or a string.
There is currently no way to write a generic implementation of `Decodable`
that can handle this. Attempting to read the value of `value` will remove it
and throw it away, even if the read triggers an error. You can't try to read a
number and then read a string if it fails.
The element is returned in the `DecoderError`, so it should be possible to
write an implementation of `Decodable` specifically for Json, but if you do so
you can't put the object within another object that has
`#[deriving(Decodable)]`.