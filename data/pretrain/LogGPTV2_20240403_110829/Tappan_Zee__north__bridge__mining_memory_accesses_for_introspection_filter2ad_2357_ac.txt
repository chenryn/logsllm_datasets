search and clustering algorithms ourselves, after some ini-
tial prototyping using SciPy’s sklearn toolkit.
Our clustering is based on the venerable k-means algo-
rithm [31], but using the Jensen-Shannon divergence de-
scribed in the previous section. As in the statistical search
case, we use bigram statistics for our feature vectors. Ini-
tialization uses the KMeans++ algorithm [2], which helps
guarantee that the initial cluster centers are widely sepa-
rated. We evaluate the performance of this clustering com-
pared to an expert labeling in Section 6.3.
Our statistical search tool is implemented in 246 lines
of C++, and computes the Jensen-Shannon divergence be-
tween a training histogram (dense) and a set of sparse his-
tograms. Our K-Means clustering tool is 481 lines of C++
code, and outputs a clustering of the sparse histograms us-
ing Jensen-Shannon divergence as a distance metric.6 Both
tools are multithreaded, which greatly speeds up the com-
putation.
5.5 Finding SSL/TLS Keys
We have also implemented a PANDA plugin called keyfind,
which locates tap points that write SSL/TLS master secrets.
The SSL/TLS master secret is a 48-byte string from which
an SSL/TLS-encrypted session’s keys are derived; thus, if a
tap point that writes the master key can be found, encrypted
network traﬃc can be decrypted and analyzed.
The plugin operates on a recording in which a program
initiates an encrypted connection to some server and an en-
crypted packet sent by the client (captured using, e.g., tcp-
dump). The keyfind uses each 48 bytes accessed at each
tap point as a trial decryption key for a sample packet sent
by the client. If the decrypted packet’s Message Authentica-
tion Code (MAC) veriﬁes that the packet was decrypted cor-
rectly then we can conclude that the tap point can be used
to decrypt SSL/TLS connections made by the program un-
der inspection. In Section 6.2.1 we show how this technique
can be used to spy on connections made by the Sykipot mal-
ware, without performing a (potentially detectable) man in
the middle attack.
6. EVALUATION
In this section, we evaluate the eﬃcacy of our various tap
point search strategies, described in Section 4, at ﬁnding
tap points useful for introspection. Our experiments are
motivated by real-world introspection applications, and so
for each experiment we describe a typical application for
the tap points found. Each experiment was also generally
performed on a variety of diﬀerent operating sytems, appli-
cations, and architectures in order to evaluate TZB’s ability
to handle a diverse range of introspection targets.
For the sake of readability, we have attempted to use sym-
bolic names for addresses wherever possible in the following
results. It is hoped that these will be more meaningful to
the reader than the raw addresses, but we emphasize that
debug information is in no way required for TZB to work.
6.1 Known Knowns
6.1.1 URL Access
Monitoring visited URLs is likely to be useful for host-
based intrusion detection and prevention systems. For ex-
ample, an IDS may wish to verify that outgoing requests
were initiated by a human rather than malware on the users’s
machine, or match URLs visited against a blacklist of mali-
cious sites. This poses a challenge for existing introspection
solutions, as URL load notiﬁcation is not generally exposed
by a public API, and the data resides in a user application
(the browser).
To ﬁnd URL tap points, we created training executions by
visiting a set of three URLs (Google, Facebook, and Bing) in
the following operating systems and browsers: Epiphany on
Debian squeeze (armel and amd64); Firefox 16.0.2, Opera
12.10, and Internet Explorer 8.0.7601.17514 on Windows 7
SP1 (x86); and WebPositive r580 on Haiku (x86). We used
the stringsearch plugin to search for the ASCII and UTF-
16 representations of the three URLs, and then validated
6The use of this distance metric is justiﬁed theoretically be-
cause Jensen-Shannon distance is a Bregman divergence [3]
and empirically because our clustering typically converges
after around 30 iterations.
844Browser
Deb Epiphany (arm)
Deb Epiphany (amd64)
Win7 IE8 (x86)
Win7 Firefox (x86)
Win7 Chrome (x86)
Win7 Opera (x86)
Haiku WebPositive (x86)
Caller
WebCore::KURL::KURL+0x30
webkit_frame_load_uri+0xc3
ieframe!CAddressEditBox::_Execute+0xaa
xul!nsAutoString::nsAutoString+0x1a
msftedit!CTxtEdit::OnTxChar+0x105
Opera.dll+0x2cf6c6
BWebPage::LoadURL+0x3a
PC
WebCore::KURL::init+0x70
WebCore::KURL::init+0x368
ieframe!StringCchCopyW+0x50
xul!nsAString_internal::Assign+0x1d
msftedit!CTxtSelection::PutChar+0xb8
Opera.dll+0x142783
BMessage::AddString+0x26
Table 1: Tap points found that write the URL typed into the browser by the user.
each tap point found to ensure that it wrote only the desired
data. The results can be seen in Table 1.
6.1.2 TLS/SSL Master Secrets
Monitoring SSL/TLS-encrypted traﬃc is a classic problem
for intrusion detection systems. Currently, hypervisor- or
network- based IDSes that wish to analyze encrypted traﬃc
must perform a man-in-the-middle attack on the connection,
presenting a false server certiﬁcate to the client. Not only
does this require the client to cooperate by trusting certiﬁ-
cates signed by the intrusion detection system, it also takes
control of the certiﬁcate veriﬁcation process out of the hands
of the client—a dangerous step, given that many existing
SSL/TLS interception proxies have a history of certiﬁcate
trust vulnerabilities [15].
Instead of a man-in-the-middle attack, we can instead use
TZB to ﬁnd a tap point that reads or writes the SSL/TLS
master secret for each encrypted connection, giving us a
“man-on-the-inside”. Because this secret must be generated
for each SSL/TLS connection, if we can ﬁnd such a tap
point, it can then be provided to the IDS to decrypt and, if
necessary, modify the content of the SSL stream.
To ﬁnd the location of these tap points, we ran a modi-
ﬁed copy of OpenSSL’s s_server utility that prints out the
SSL/TLS master key any time a connection is made. We
then recorded executions in which we visited the server with
each of our tested SSL clients, and noted the SSL/TLS mas-
ter secret. Finally, we used stringsearch to search for a
tap point that wrote the master key, and veriﬁed that the
tap wrote exactly one master key per connection. For this
test, we used: OpenSSL s client 0.9.8 on Debian squeeze
(armel), OpenSSL s client 0.9.8 and Epiphany 2.30.6 on De-
bian squeeze (amd64), and Firefox 16.0.2, Google Chrome
23.0.1271.64, Opera 12.10, and Internet Explorer 8.0.7601
on Windows 7 SP1 (x86). The results are shown in Table 2.
There is one particular point of interest to observe in these
results. In the case of Epiphany on Debian, we found that
one level of callstack information was not suﬃcient—with
only the immediate caller, the tap point contains more data
than just the SSL/TLS master secret. This is because the
version of Epiphany uses SSLv3 to make connections, and
the pseudo-random function (PRF) used in SSLv3 has the
form
M D5(SHA1(. . .))
The other implementations instead use TLSv1.0, where the
PRF has the form
M D5(. . .) ⊕ SHA1(. . .)
This ﬁnal XOR operation is done from a unique program
point, so the tap point that results from it contains only
TLS master keys. This points to a potential complication
of using tap points for introspection: it is not always clear
in advance how many levels of call stack information will be
required.
We were successful in locating tap points for all SSL/TLS
clients tested. We note that uncovering similar information
using traditional techniques would have required signiﬁcant
expertise and reverse engineering of both open source and
proprietary software.
6.1.3 File Access
Monitoring ﬁle accesses is a requirement for many host-
based security applications, including on-access anti-virus
scanners. Thus, locating a tap point at which system-wide
ﬁle accesses can be observed is of considerable importance.
However, because previous approaches to the introspection
problem [11, 12] passively retrieve information from the guest
and are not event-driven, they cannot be used in this sce-
nario.
To ﬁnd such a tap point, we created recordings in which
we opened ﬁles in various operating systems. Speciﬁcally, in
each OS we created 100 ﬁles, each named after ten successive
digits of π. The operating systems chosen for this test were:
Debian squeeze (amd64), Debian squeeze (armel), Windows
7 SP1 32-bit, FreeBSD 9.0, and Haiku R1 Alpha 3 (all on
x86). We then searched for tap points that wrote strings
matching the ASCII and UTF-16 encodings of the ﬁlenames
using the stringsearch analysis plugin. The UTF-16 en-
codings were included because it was known that Windows
7 uses UTF-16 for strings pervasively, allowing us to surmise
that on Windows URLs would likely be UTF-16 encoded.
Finally, we looked at the tap points found by stringsearch,
and validated them by hand.
The results are shown in Table 3. For most of the oper-
ating systems we had no diﬃculty ﬁnding a tap point that
contained the name of each ﬁle as it was accessed. The one
exception was Windows 7, where the most promising tap
point not only wrote ﬁle results, but also a number of un-
related objects such as registry key names. As in the SSL
case, the root cause of this was insuﬃcient calling context:
in Windows several diﬀerent things fall under the umbrella
of a “named object”, and these were all being captured at
this tap point. We found that four levels of calling context
were suﬃcient to restrict the tap point to just ﬁle accesses;
the “deepest” caller was IopCreateFile (which, despite its
name, is used for both opening existing ﬁles and creating
new ones).
6.2 Known Unknowns
6.2.1
The need to snoop on SSL-encrypted connections arises in
malware analysis as well. Two features distinguish this case
from that of intercepting the traﬃc of benign SSL clients
presented in the previous section. First, the ability to de-
SSL Malware
845Client
Deb OpenSSL (arm)
Deb OpenSSL (amd64)
Deb Epiphany (arm)
Deb Epiphany (amd64)
Haiku WebPositive (x86)
Win7 Chrome (x86)
Win7 IE8 (x86)
Win7 Firefox (x86)
Win7 Opera (x86)
Caller
tls1_generate_master_secret+0x9c
ssl3_send_client_key_exchange+0x437
md_write+0x74
md_write+0x60
tls1_generate_master_secret+0x65
chrome!NSC_DeriveKey+0x1241
ncrypt!Tls1ComputeMasterKey@32+0x57
softokn3!NSC_DeriveKey+0xe85
Opera.dll+0x2eb06e
PC
tls1_PRF+0x90
tls1_generate_master_secret+0x108
md5_write+0x68
md5_write+0x49
tls1_PRF+0x14b
chrome!TLS_PRF+0xa0
ncrypt!PRF@40
freebl3!TLS_PRF+0xbb
Opera.dll+0x50251
Process
openssl
openssl
epiphany
epiphany
WebPositive
chrome.exe
lsass.exe
ﬁrefox.exe
opera.exe
Table 2: Tap points found that write the SSL/TLS master secret for each SSL/TLS connection.
Target
Debian (amd64)
Debian (arm)
Haiku (x86)
FreeBSD (x86)
Windows 7 (x86)
Caller
getname+0x13e
getname+0x88
EntryCache::Lookup+0x27
namei+0xd1
ObpCaptureObjectName+0xcb
PC
strncpy_from_user+0x52
__strncpy_from_user+0x10
hash_hash_string+0x1b
copyinstr+0x38
memcpy+0x33
Table 3: Tap points found for ﬁle access on diﬀerent operating systems.
crypt the traﬃc without a man in the middle is even more
important: in contrast to benign clients, we cannot assume
that malware will accept certiﬁcates signed by our certiﬁcate
authority. Second, we cannot rely on having access to the
server’s master secret, as the server is under the attacker’s
control. This means that our previous strategy of using a
simple string search for the master secret will not work here.
Instead, we located the tap point in the SSL-enabled mal-
ware using our keyfind plugin, which performs trial decryp-
tion on a packet sent by the malware using each possible
48-byte sequence written to memory as a key and veriﬁes
whether the Message Authentication Code is valid. Al-
though this is much slower than a string match, it is the
only available option, since the key is not known in advance.
To test the plugin, we obtained a copy of a version of
the Sykipot trojan released around October 31st, 2012 [13]
(MD5: 34a1010846c0502f490f17b66fb05a12). We then cre-
ated a recording in which we executed the malware; simul-
taneously, we captured network traﬃc using tcpdump. We
noted that the malware made several encrypted connections
to https://www.hi-techsolutions.org/, and provided one
of the encrypted packets from these connections as input to
the keyfind plugin. The plugin found the same tap point as
the Windows 7 IE8 experiment described earlier, indicating
that both the malware and IE8 likely use the same under-
lying system mechanism to make SSL connections. The key
found was able to decrypt the connections contained in the
packet dump.7
6.2.2 Finding dmesg