# Coding
## Languages
### [Bash snippets](bash_snippets.md)
* New: [Get the root path of a git repository.](bash_snippets.md#get-the-root-path-of-a-git-repository)
    ```bash
    git rev-parse --show-toplevel
    ```
* New: [Get epoch gmt time.](bash_snippets.md#get-epoch-gmt-time)
    ```bash
    date -u '+%s'
    ```
* New: [Check the length of an array with jq.](bash_snippets.md#check-the-length-of-an-array-with-jq)
    ```
    echo '[{"username":"user1"},{"username":"user2"}]' | jq '. | length'
    ```
* New: [Exit the script if there is an error.](bash_snippets.md#exit-the-script-if-there-is-an-error)
    ```bash
    set -eu
    ```
* New: [Prompt the user for data.](bash_snippets.md#prompt-the-user-for-data)
    ```bash
    read -p "Ask whatever" choice
    ```
### [Configure Docker to host the application](docker.md)
* New: [Add healthcheck to your dockers.](docker.md#add-healthcheck-to-your-dockers)
    Health checks allow a container to expose its workload’s availability. This stands apart from whether the container is running. If your database goes down, your API server won’t be able to handle requests, even though its Docker container is still running.
    This makes for unhelpful experiences during troubleshooting. A simple `docker ps` would report the container as available. Adding a health check extends the `docker ps` output to include the container’s true state.
    You configure container health checks in your Dockerfile. This accepts a command which the Docker daemon will execute every 30 seconds. Docker uses the command’s exit code to determine your container’s healthiness:
    - `0`: The container is healthy and working normally.
    - `1`: The container is unhealthy; the workload may not be functioning.
    Healthiness isn’t checked straightaway when containers are created. The status will show as starting before the first check runs. This gives the container time to execute any startup tasks. A container with a passing health check will show as healthy; an unhealthy container displays unhealthy.
    In docker-compose you can write the healthchecks like the next snippet:
    ```yaml
    ---
    version: '3.4'
    services:
      jellyfin:
        image: linuxserver/jellyfin:latest
        container_name: jellyfin
        restart: unless-stopped
        healthcheck:
          test: curl http://localhost:8096/health || exit 1
          interval: 10s
          retries: 5
          start_period: 5s
          timeout: 10s
    ```
* New: [List the dockers of a registry.](docker.md#list-the-dockers-of-a-registry)
    List all repositories (effectively images):
    ```bash
    $: curl -X GET https://myregistry:5000/v2/_catalog
    > {"repositories":["redis","ubuntu"]}
    ```
    List all tags for a repository:
    ```bash
    $: curl -X GET https://myregistry:5000/v2/ubuntu/tags/list
    > {"name":"ubuntu","tags":["14.04"]}
    ```
    If the registry needs authentication you have to specify username and password in the curl command
    ```bash
    curl -X GET -u : https://myregistry:5000/v2/_catalog
    curl -X GET -u : https://myregistry:5000/v2/ubuntu/tags/list
    ```
### [Jinja2](python_jinja2.md)
* New: [Escape jinja expansion on a jinja template.](python_jinja2.md#escape-jinja-expansion-on-a-jinja-template)
    ```jinja
    {% raw %}
    Anything in this block is treated as raw text,
    including {{ curly braces }} and
    {% other block-like syntax %}
    {% endraw %}
    ```
### [Pydantic](pydantic.md)
* New: [Investigate libraries.](pydantic.md#to-investigate)
    [Integration of pydantic with pandas](https://pandera.readthedocs.io/en/stable/pydantic_integration.html)
## [Git](git.md)
* New: [Remove tags.](git.md#remove-tags)
    To delete a tag you can run:
    ```bash
    git tag -d {{tag_name}}
    ```
    To remove them remotely do
    ```bash
    git push --delete origin {{ tag_name }}
    ```
# DevOps
## Infrastructure as Code
### [Ansible Snippets](ansible_snippets.md)
* New: [Run command on a working directory.](ansible_snippets.md#run-command-on-a-working-directory)
    ```yaml
    - name: Change the working directory to somedir/ and run the command as db_owner
      ansible.builtin.command: /usr/bin/make_database.sh db_user db_name
      become: yes
      become_user: db_owner
      args:
        chdir: somedir/
        creates: /path/to/database
    ```
* New: [Run handlers in the middle of the tasks file.](ansible_snippets.md#run-handlers-in-the-middle-of-the-tasks-file)
    If you need handlers to run before the end of the play, add a task to flush them using the [meta module](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/meta_module.html#meta-module), which executes Ansible actions:
    ```yaml
    tasks:
      - name: Some tasks go here
        ansible.builtin.shell: ...
      - name: Flush handlers
        meta: flush_handlers
      - name: Some other tasks
        ansible.builtin.shell: ...
    ```
    The `meta: flush_handlers` task triggers any handlers that have been notified at that point in the play.
    Once handlers are executed, either automatically after each mentioned section or manually by the `flush_handlers meta` task, they can be notified and run again in later sections of the play.
* New: [Run command idempotently.](ansible_snippets.md#run-command-idempotently)
    ```yaml
    - name: Register the runner in gitea
      become: true
      command: act_runner register --config config.yaml --no-interactive --instance {{ gitea_url }} --token {{ gitea_docker_runner_token }}
      args:
        creates: /var/lib/gitea_docker_runner/.runner
    ```
* New: [Get the correct architecture string.](ansible_snippets.md#get-the-correct-architecture-string)
    If you have an `amd64` host you'll get `x86_64`, but sometimes you need the `amd64` string. On those cases you can use the next snippet:
    ```yaml
    ---
    deb_architecture:
      aarch64: arm64
      x86_64: amd64
    ---
    - name: Download the act runner binary
      become: True
      ansible.builtin.get_url:
        url: https://dl.gitea.com/act_runner/act_runner-linux-{{ deb_architecture[ansible_architecture] }}
        dest: /usr/bin/act_runner
        mode: '0755'
    ```
* New: [Check the instances that are going to be affected by playbook run.](ansible_snippets.md#check-the-instances-that-are-going-to-be-affected-by-playbook-run)
    Useful to list the instances of a dynamic inventory
    ```bash
    ansible-inventory -i aws_ec2.yaml --list
    ```
* New: [Check if variable is defined or empty.](ansible_snippets.md#check-if-variable-is-defined-or-empty)
    In Ansible playbooks, it is often a good practice to test if a variable exists and what is its value.
    Particularity this helps to avoid different “VARIABLE IS NOT DEFINED” errors in Ansible playbooks.
    In this context there are several useful tests that you can apply using [Jinja2 filters](https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html) in Ansible.
* New: Check if Ansible variable is defined (exists).
    ```yaml
    tasks:
    - shell: echo "The variable 'foo' is defined: '{{ foo }}'"
      when: foo is defined
    - fail: msg="The variable 'bar' is not defined"
      when: bar is undefined
    ```
* New: [Check if Ansible variable is empty.](ansible_snippets.md#check-if-ansible-variable-is-empty)
    ```yaml
    tasks:
    - fail: msg="The variable 'bar' is empty"
      when: bar|length == 0
    - shell: echo "The variable 'foo' is not empty: '{{ foo }}'"
      when: foo|length > 0
    ```
* New: [Check if Ansible variable is defined and not empty.](ansible_snippets.md#check-if-ansible-variable-is-defined-and-not-empty)
    ```yaml
    tasks:
    - shell: echo "The variable 'foo' is defined and not empty"
      when: (foo is defined) and (foo|length > 0)
    - fail: msg="The variable 'bar' is not defined or empty"
      when: (bar is not defined) or (bar|length == 0)
    ```
* New: [Download a file.](ansible_snippets.md#download-a-file)
    ```yaml
    - name: Download foo.conf
      ansible.builtin.get_url:
        url: http://example.com/path/file.conf
        dest: /etc/foo.conf
        mode: '0440'
    ```
### [Gitea](molecule.md)
* Correction: Configure the gitea actions.
    So far there is [only one possible runner](https://gitea.com/gitea/act_runner) which is based on docker and [`act`](https://github.com/nektos/act). Currently, the only way to install act runner is by compiling it yourself, or by using one of the [pre-built binaries](https://dl.gitea.com/act_runner). There is no Docker image or other type of package management yet. At the moment, act runner should be run from the command line. Of course, you can also wrap this binary in something like a system service, supervisord, or Docker container.
    You can create the default configuration of the runner with:
    ```bash
    ./act_runner generate-config > config.yaml
    ```
    You can tweak there for example the `capacity` so you are able to run more than one workflow in parallel.
    Before running a runner, you should first register it to your Gitea instance using the following command:
    ```bash
    ./act_runner register --config config.yaml --no-interactive --instance  --token 
    ```
    Finally, it’s time to start the runner.
    ```bash
    ./act_runner --config config.yaml daemon
    ```
    If you want to create your own act docker, you can start with this dockerfile:
    ```dockerfile
    FROM node:16-bullseye
    LABEL prune=false
    RUN mkdir /root/.aws
    COPY files/config /root/.aws/config
    COPY files/credentials /root/.aws/credentials
    RUN apt-get update && apt-get install -y \
      python3 \
      python3-pip \
      python3-venv \
      screen \
      vim \
      && python3 -m pip install --upgrade pip \
      && rm -rf /var/lib/apt/lists/*
    RUN pip install \
      molecule==5.0.1 \
      ansible==8.0.0 \
      ansible-lint \
      yamllint \
      molecule-plugins[ec2,docker,vagrant] \
      boto3 \