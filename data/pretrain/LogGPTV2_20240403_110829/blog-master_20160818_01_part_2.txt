----------------------  
 2389486.260454002389  
(1 row)  
Time: 0.869 ms  
```  
### 集合测试    
```  
postgres=# select pgv_insert('pkg2', 'k1', row(1::int, 'hello world'::text, current_date::date));  
 pgv_insert   
------------  
(1 row)  
postgres=# select * from pgv_select('pkg2', 'k1') as t(c1 int,c2 text,c3 date);  
 c1 |     c2      |     c3       
----+-------------+------------  
  1 | hello world | 2016-08-18  
(1 row)  
postgres=# select count(*) from (select pgv_insert('pkg2', 'k1', row(c1,'test'::text,current_date::date)) from generate_series(2,100000) t(c1)) t;  
 count   
-------  
 99999  
(1 row)  
postgres=# select * from pgv_select('pkg2', 'k1', array[1,2,3]) as t(c1 int,c2 text,c3 date);  
 c1 |     c2      |     c3       
----+-------------+------------  
  1 | hello world | 2016-08-18  
  2 | test        | 2016-08-18  
  3 | test        | 2016-08-18  
(3 rows)  
```  
内存表和普通表的JOIN    
```  
postgres=# select t1.*,t2.* from (select * from pgv_select('pkg2', 'k1') as t(c1 int,c2 text,c3 date)) t1, tbl1 t2 where t1.c1=t2.id and t2.id<10;  
 c1 |     c2      |     c3     | id |               info                 
----+-------------+------------+----+----------------------------------  
  8 | test        | 2016-08-18 |  8 | a8a7e0f849c5895820bbca32d7e798b1  
  4 | test        | 2016-08-18 |  4 | f6954fb12336881d590fa7a50dd03916  
  9 | test        | 2016-08-18 |  9 | 45ff843fcd5372e525368829f9846def  
  5 | test        | 2016-08-18 |  5 | d8afe53f0a7d553716caa9ffaef7ea3d  
  7 | test        | 2016-08-18 |  7 | 2b20f485974500d7b3ecb1f4c1d0f975  
  2 | test        | 2016-08-18 |  2 | 3d36418926b2e0e2dc7090da17e39451  
  6 | test        | 2016-08-18 |  6 | 6923416bbca7634f01f7f79030609f64  
  1 | hello world | 2016-08-18 |  1 | 3bb6c833f1b10139edf7e2f2eb4f4a69  
  3 | test        | 2016-08-18 |  3 | de5b51374e1db3ccac9c61af75b69a33  
(9 rows)  
```  
更新与删除内存表的数据    
```  
postgres=# select pgv_update('pkg2', 'k1', t) from (select c1,'new val'::text,'2017-01-01'::date from pgv_select('pkg2', 'k1', 1) as tb(c1 int, c2 text, c3 date)) t;  
 pgv_update   
------------  
 t  
(1 row)  
Time: 0.665 ms  
postgres=# select * from pgv_select('pkg2', 'k1', 1) as tb(c1 int, c2 text, c3 date);  
 c1 |   c2    |     c3       
----+---------+------------  
  1 | new val | 2017-01-01  
(1 row)  
Time: 0.518 ms  
postgres=# select  pgv_delete('pkg2', 'k1', 1);  
 pgv_delete   
------------  
 t  
(1 row)  
Time: 0.440 ms  
```  
## 管理内存对象    
```  
postgres=# select * from pgv_exists('pkg1','k1');  
 pgv_exists   
------------  
 f  
(1 row)  
Time: 0.491 ms  
postgres=# select pgv_list();  
 pgv_list    
-----------  
 (pkg2,k1)  
(1 row)  
Time: 0.455 ms  
postgres=# select pgv_stats();  
    pgv_stats      
-----------------  
 (pkg2,16785408)  
(1 row)  
Time: 0.514 ms  
postgres=# select pgv_remove('pkg2','k1');  
 pgv_remove   
------------  
(1 row)  
Time: 1.868 ms  
postgres=# select pgv_stats();  
  pgv_stats     
--------------  
 (pkg2,24576)  
(1 row)  
Time: 0.367 ms  
postgres=# select pgv_remove('pkg2');  
 pgv_remove   
------------  
(1 row)  
Time: 0.415 ms  
postgres=# select pgv_stats();  
 pgv_stats   
-----------  
(0 rows)  
Time: 0.369 ms  
```  
## 数据持久化    
```  
postgres=# select count(*) from (select pgv_insert('pkg2', 'k1', row(c1,'test'::text,current_date::date)) from generate_series(2,10000000) t(c1)) t;  
  count    
---------  
 9999999  
(1 row)  
在事务中持久化数据    
postgres=# begin;  
postgres=# create table tbl as select * from pgv_select('pkg2','k1') as t(c1 int, c2 text, c3 date);  
postgres=# end;  
postgres=# select count(*) from tbl;  
  count    
---------  
 9999999  
(1 row)  
```  
祝大家玩得开心，欢迎随时来 **阿里云促膝长谈业务需求 ，恭候光临**。    
阿里云的小伙伴们加油，努力 **做好内核与服务，打造最贴地气的云数据库** 。    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")