for hiding information in x86 executables, with the addition
of one more set that includes the equivalent versions of the
xchg instruction.
As shown in Fig. 1(b), both operands of the cmp instruction
are registers, and thus it can be replaced by its equivalent
form, which has different opcode and ModR/M bytes [55].
Although the actual program code does not change, the ret
instruction that was “included” in the original cmp instruction
has now disappeared, rendering the gadget unusable. In this
case, the transformation completely eliminates the gadget, and
thus will be applied in all instances of the randomized binary.
In contrast, when a substitution does not affect the gadget’s
ﬁnal indirect jump, then it is applied probabilistically.
B. Instruction Reordering
In certain cases, it is possible to reorder the instructions
of small self-contained code fragments without affecting the
correct operation of the program. This transformation can
signiﬁcantly impact the structure of non-intended gadgets, but
can also break the attacker’s assumptions about gadgets that
are part of the actual machine code.
1) Intra Basic Block Reordering: The actual instruction
scheduling chosen during the code generation phase of a
compiler depends on many factors,
including the cost of
instructions in cycles, and the applied code optimization
techniques [52]. Consequently, the code of a basic block is
often just one among several possible instruction orderings
that are all equivalent in terms of correctness. Based on this
observation, we can partially modify the code within a basic
block by reordering some of its instructions according to an
alternative instruction scheduling.
The basis for deriving an alternative instruction schedul-
ing is to determine the ordering relationships among the
instructions, which must always be satisﬁed to maintain code
correctness. The dependence graph of a basic block represents
the instruction interdependencies that constrain the possible in-
struction schedules [56]. Since a basic block contains straight-
line code, its dependence graph is a directed acyclic graph with
machine instructions as vertices, and dependencies between
instructions as edges. We apply dependence analysis on the
code of disassembled basic blocks to build their dependence
graph using an adaptation of a standard dependence DAG con-
struction algorithm [56, Fig. 9.6] for machine code. Applying
dependence analysis directly on machine code requires a care-
ful treatment of the dependencies between x86 instructions.
Compared to the analysis of code expressed in an intermediate
representation form, this includes the identiﬁcation of data
dependencies not only between register and memory operands,
but also between CPU ﬂags and implicitly used registers and
memory locations.
For each instruction i, we derive the sets use[i] and def [i]
with the registers used and deﬁned by the instruction. Besides
register operands and registers used as part of effective address
computations, this includes any implicitly used registers. For
example, the use and def sets for pop eax are {esp} and
{eax, esp}, while for rep stosb2 are {ecx, eax, edi} and
{ecx, edi}, respectively. We initially assume that all instruc-
tions in the basic block depend on each other, and then check
each pair for read-after-write (RAW), write-after-read (WAR),
and write-after-write (WAW) dependencies. For example, i1
and i2 have a RAW dependency if any of the following
conditions is true: i) def [i1] ∩ use[i2] (cid:3)= ∅, ii) the destination
operand of i1 and the source operand of i2 are both a memory
location, iii) i1 writes at least one ﬂag read by i2.
Note that condition ii) is quite conservative, given that i2
will actually depend on i1 only if i2 reads the same memory
location written by i1. However, unless both memory operands
use absolute addresses, it is hard to determine statically if the
two effective addresses point to the same memory location. In
our future work, we plan to use simple data ﬂow analysis
to relax this condition. Besides instructions with memory
operands, this condition should also be checked for instruc-
tions with implicitly accessed memory locations, e.g., push
and pop. The conditions for WAR and WAW dependencies are
analogous. If no conﬂict is found between two instructions,
then there is no constraint in their execution order.
Figure 2(a) shows the code of a basic block that contains
a non-intended gadget, and Fig. 3 its corresponding depen-
dence DAG. Instructions not connected via a direct edge are
independent, and have no constraint in their relative execution
order. Given the dependence DAG of a basic block, the pos-
sible orderings of its instructions correspond to the different
2stosb (Store Byte to String) copies the least signiﬁcant byte from
the eax register to the memory location pointed by the edi register and
increments edi’s value by one. The rep preﬁx repeats this instruction until
ecx’s value reaches zero, while decreasing it after each repetition.
605
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. Example of how intra basic block instruction reordering can affect a non-intended gadget.
Figure 3. Dependence graph for the code of Fig. 2.
Figure 4. Example of register preservation code reordering.
topological sorting arrangements of the graph [57]. Fig. 2(b)
shows one of the possible alternative orderings of the original
code. The locations of all but one of the instructions and the
values of all but one of the bytes have changed, eliminating the
non-intended gadget contained in the original code. Although
a new gadget has appeared a few bytes further into the block,
(ending again with a ret instruction at byte C3), an attacker
cannot depend on it since alternative orderings will shift it
to other locations, and some of its internal instructions will
always change (e.g., in this example, the useful pop ecx is
gone). In fact, the ret instruction can be eliminated altogether
using atomic instruction substitution.
An underlying assumption we make here is that basic
block boundaries will not change at runtime. If a computed
control transfer instruction targets a basic block instruction
other than its ﬁrst, then reordering may break the semantics
of the code. Although this may seem restrictive, we note that
throughout our evaluation we did not encounter any such case.
For compiler-generated code, IDA Pro is able to compute
all jump targets even for computed jumps based on the PE
relocation information. In the most conservative case, users
may choose to disable instruction reordering and still beneﬁt
from the randomization of the other techniques—Section V
includes results for each technique individually.
2) Reordering of Register Preservation Code: The calling
convention followed by the majority of compilers for Windows
on x86 architectures, similarly to Linux, speciﬁes that the ebx,
esi, edi, and ebp registers are callee-saved [58]. The remain-
ing general purpose registers, known as scratch or volatile
registers, are free for use by the callee without restrictions.
Typically, a function that needs to use more than the available
scratch registers, preserves any non-volatile registers before
modifying them by storing their values on the stack. This is
usually done at the function prologue through a series of push
instructions, as in the example of Fig. 4(a), which shows the
very ﬁrst and last instructions of a function. At the function
epilogue, a corresponding series of pop instructions restores
the saved values from the stack, right before returning to the
caller. Sequences that contain pop instructions followed by
ret are among the most widely used gadgets found in ROP
exploits, since they allow the attacker to load registers with
values that are supplied as part of the injected payload [59].
The order of the pop instructions is crucial for initializing
each register with the appropriate value.
As seen in the function prologue, the compiler stores the
values of the callee-saved registers in arbitrary order, and
sometimes the relevant push instructions are interleaved with
instructions that use previously-preserved registers. At
the
function epilogue, the saved values are pop’ed from the stack
in reverse order, so that they end up to the proper register.
Consequently, as long as the saved values are restored in
the right order, their actual order on the stack is irrelevant.
Based on this observation, we can randomize the order of the
push and pop instructions of register preservation code by
maintaining the ﬁrst-in-last-out order of the stored values, as
shown in Fig. 4(b). In this example, there are six possible
orderings of the three pop instructions, which means that
any assumption that
the attacker may make about which
registers will hold the two supplied values, will be correct
with a probability of one in six (or one in three, if only one
register needs to be initialized). In case only two registers
are preserved, there are two possible orderings, allowing the
gadget to operate correctly half of the time.
This transformation is applied conservatively, only to func-
606
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
tions with accurately disassembled prologue and epilogue
code. To make sure that we properly match the push and
pop instructions that preserve a given register, we monitor the
stack pointer delta throughout the whole function, as shown in
the second column of Fig. 4(a). If the deltas at the prologue
and epilogue do not match, e.g., due to call sites with unknown
calling conventions throughout the function, or indirect manip-
ulation of the stack pointer, then no randomization is applied.
As shown in Fig. 4(b), any non-preservation instructions in the
function prologue are reordered along with the push instruc-
tions by maintaining any interdependencies, as discussed in the
previous section. For functions with multiple exit points, the
preservation code at all epilogues should match the function’s
prologue. Note that there can be multiple push and pop pairs
for the same register, in case the register is preserved only
throughout some of the execution paths of a function.
C. Register Reassignment
Although the program points at which a certain variable
should be stored in a register or spilled into memory are chosen
by the compiler using sophisticated allocation algorithms, the
actual name of the general purpose register that will hold a
particular variable is mostly an arbitrary choice. Based on
this observation, we can reassign the names of the register
operands in the existing code according to a different—but
equivalent—register assignment, without affecting the seman-
tics of the original code. When considering each gadget as
an autonomous code sequence, this transformation can alter
the outcome of many gadgets, which will now read or modify
different registers than those assumed by the attacker.
Due to the much higher cost of memory accesses compared
to register accesses, compilers strive to map as many variables
as possible to the available registers. Consequently, at any
point in a large program, multiple registers are usually in use,
or live at the same time. Given the control ﬂow graph (CFG)
of a compiled program, a register r is live at a program point p
iff there is a path from p to a use of r that does not go through
a deﬁnition of r. The live range of r is deﬁned as the set of
program points where r is live, and can be represented as a
subgraph of the CFG [60]. Since the same register can hold
different variables at different points in the program, a register
can have multiple disjoint live regions in the same CFG.
For each correctly identiﬁed function, we compute the live
ranges of all registers used in its body by performing liveness
analysis [52] directly on the machine code. Given the CFG of
the function and the sets use[i] and def [i] for each instruction
i, we derive the sets in[i] and out[i] with the registers that
are live-in and live-out at each instruction. For this purpose,
we use a modiﬁed version of a standard live-variable analysis
algorithm [52, Fig. 9.16] that computes the in and out sets
at the instruction level, instead of the basic block level. The
algorithm computes the two sets by iteratively reaching a ﬁxed
point for the following data-ﬂow equations: in[i] = use[i] ∪
(out[i]−def [i]) and out[i] =
{in[s] : s ∈ succ[i]}, were succ[i]
is the set of all possible successors of instruction i.
(cid:2)
Figure 5. The live ranges of eax and edi in part of a function. The two
registers can be swapped in all instructions throughout their parallel, self-
contained regions a0 and d1 (lines 3–12).
Figure 5 shows part of the CFG of a function and the
corresponding live ranges for eax and edi. Initially, we
assume that all registers are live, since some of them may hold
values that have been set by the caller. In this example, edi
is live when entering the function, and the push instruction at
line 2 stores (uses) its current value on the stack. The following
mov instruction initializes (deﬁnes) edi, ending its previous
live range (d0). Note that although a live range is a sub-graph
of the CFG, we illustrate and refer to the different live ranges
as linear regions for the sake of convenience.
The next deﬁnition of edi is at line 15, which means that
the last use of its previous value at line 11 also ends its
previous live region d1. Region d1 is a self-contained region,
within which we can be conﬁdent that edi holds the same
variable. The eax register also has a self-contained live region
(a0) that runs in parallel with d1. Conceptually,
the two
live ranges can be extended to share the same boundaries.
Therefore, the two registers can be swapped across all the
instructions located within the boundaries of the two regions,
without altering the semantics of the code.
The call eax instruction at line 12 can be conveniently
used by an attacker for calling a library function or another
gadget. By reassigning eax and edi across their parallel
live regions, any ROP code that would depend on eax for
transferring control to the next piece of code, will now jump
to an incorrect memory location, and probably crash. For code
fragments with just two parallel live regions, an attacker can
guess the right register half of the times. In many cases though,
there are three or more general purpose registers with parallel
live regions, or other available registers that are live before
or after another register’s live region, allowing for a higher
number of possible register assignments.
607
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
The registers used in the original code can be reassigned
by modifying the ModR/M and sometimes the SIB byte of
the relevant instructions. As in previous code transforma-
tions, besides altering the operands of instructions in the
existing code, these modiﬁcations can also affect overlapping
instructions that may be part of non-intended gadgets. Note
that implicitly used registers in certain instructions cannot be
replaced. For example, the one-byte “move data from string
to string” instruction (movs) always uses esi and edi as its
source and destination operands, and there is no other one-byte
instruction for achieving the same operation using a different
set of registers [55]. Consequently, if such an instruction is
part of the live region of one of its implicitly used registers,
then this register cannot be reassigned throughout that region.
For the same reason, we exclude esp from liveness analysis.
Finally, although calling conventions are followed for most
of the functions, this is not always the case, as compilers
are free to use any custom calling convention for private or
static functions. Most of these cases are conservatively cov-
ered through a bottom-up call analysis that discovers custom
register arguments and return value registers.
First, all the external function deﬁnitions found in the import
table of the DLL are marked as level-0 functions. IDA Pro can
effectively distinguish between different calling conventions
that these external functions may follow, and reports their
declaration in the C language. Thus, in most cases, the register
arguments and the return value register (if any) for each of
the level-0 functions are known. For any call instruction to
a level-0 function, its register arguments are added to call’s
set of implicitly read registers, and its return value registers
are added to call’s set of implicitly written registers.
In the next phase, level-1 functions are identiﬁed as the
set of functions that call only level-0 functions or no other
function. Any registers read by a level-1 function, without
prior writing them, are marked as its register arguments.
Similarly, any registers written and not read before a return
instruction are marked as return value registers. Again, the
sets of implicitly read and written register of all the call
instructions to level-1 functions are updated accordingly. Sim-
ilarly, level-2 functions are the ones that call level-1 or level-0
functions, or no other function, and so on. The same process is
repeated until no more function levels can be computed. The
intuition behind this approach is that private functions, which
may use non-standard calling conventions, are called by other
functions in the same DLL and, in most cases, not through
computed call instructions.
V. EXPERIMENTAL EVALUATION
A. Randomization Analysis
1) Coverage: A crucial aspect for the effectiveness of in-
place code randomization is the randomization coverage in
terms of what percentage of the gadgets found in an executable
can be safely randomized. A gadget may remain intact for
one of the following reasons: i) it is part of data embedded
is part of code that could not
in a code segment,
ii) it
be disassembled, or iii) it
is not affected by any of our
s
e
l
i
f
E
P
f
o
n
o
i
t
c
a
r
f
e
v
i
t
a
u
m
u
C
l
Out of all gadgets
Out of the gadgets found only
 in the extracted code
1
0.8
0.6
0.4
0.2
0
0
10
20
40
30
70
Modifiable gadgets (%)
50
60
80
90
100
Figure 6.
Percentage of modiﬁable gadgets for a set of 5,235 PE ﬁles.
Indicatively, for the upper 85% of the ﬁles, more than 70% of all gadgets in
the executable segments of each PE ﬁle can be modiﬁed (shaded area).
Out of all gadgets
Out of the gadgets found only
 in the extracted code
Instruction
Substitution
Intra Basic Block
Reordering
Reg. Preservation
Code Reordering
Register
Reassignment
All
Transformations
0
20
40
60
80
100
Modifiable gadgets (%)
Figure 7. Percentage of modiﬁable gadgets according to the different code
transformations.
transformations. In this section, we explore the randomization
coverage of our prototype implementation using a large data
set of 5,235 PE ﬁles (both DLL and EXE), detailed in Table I.
We consider as a gadget [2] any intended or unintended
instruction sequence that ends with an indirect control trans-
fer instruction, and which does not contain i) a privileged
or invalid instruction (can occur in non-intended instruction
sequences), and ii) a control transfer instruction other than its
ﬁnal one, with the exception of indirect call (can be used
in the middle of a gadget for calling a library function). We
assume a maximum gadget length of ﬁve instructions, which
is typical for existing ROP code implementations [2], [33].
For larger gadgets, it is possible that the modiﬁed part of the
gadget may be irrelevant for the purpose of the attacker. For
example, if only the ﬁrst instruction of the gadget inc eax;
pop ebx; ret; is randomized, this will not affect any ROP
code that either does not rely on the value of eax at that
point, or uses the shorter gadget pop ebx; ret; directly.
For this reason, we consider all different subsequences with
length between two to ﬁve instructions as separate gadgets.
Figure 6 shows the percentage of modiﬁable gadgets out
of all gadgets found in the executable sections of each PE
ﬁle (solid line), as a cumulative fraction of all PE ﬁles in the
data set. In about 85% of the PE ﬁles, more that 70% of the
gadgets can be randomized by our code transformations. Many
608
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
MODIFIABLE (ELIMINATED VS. BROKEN) GADGETS FOR A COLLECTION OF VARIOUS PE FILES.
Table I
Software
PE Files
Code (MB)
Total
Modifiable (%)
Eliminated (%)
Broken (%)
Adobe Reader 9
Firefox 4
iTunes 10
Windows XP SP3
Windows 7 SP1
Total
43
28
75
1,698
3,391
5,235
6.7
3.5
3.7
134.4
324.8
1,250,959
458,760
396,478
8,305,177
16,951,300
943,506 (75.4)
381,011 (83.0)
293,392 (74.0)
6,452,895 (77.7)
12,970,844 (76.5)
108,614 ( 8.7)
56,800 (12.4)
31,779 ( 8.0)
770,589 ( 9.3)
1,637,082 ( 9.7)