### Version
2.5.13
### Reproduction link
https://jsfiddle.net/1m5vx6dc/1/
### Steps to reproduce
Say we have an array `list` `['a', 'b', 'c', 'd', 'e', 'f', 'g', ...]` and a
computed property `filtered` that extracts 4 items from that list based on a
start `index`. Then we run a `v-for` on the `filtered` computed list and
increase / decrease the `index`. We use the item value as the `:key`. If we
inspect the resulting DOM in chrome, we can see that if the filtered list is
moved to the right (index increased), all DOM nodes are replaced. If the index
is moved to the left, only the first node is replaced.
### What is expected?
I would expect that increasing or decreasing the index would yield the same
DOM patch, either re-creating only the first or the last node in the list.
### What is actually happening?
Increasing the index causes a full DOM refresh, decreasing the index yields
the expected behaviour.
![vdom](https://user-
images.githubusercontent.com/2785983/35117214-3ae74d44-fc8e-11e7-9cbf-
fb8007175cf5.gif)