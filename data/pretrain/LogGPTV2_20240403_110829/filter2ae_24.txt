# Oracle WebLogic RCE反序列化漏洞分析

## 译文声明
本文为翻译文章，原作者为Zhang Zhiyi，原文发布于projectmoon.pw。具体表达及含义请以原文为准。
- 作者：360 ESG Codesafe Team 的 Zhiyi Zhang
- 原文链接：[此处插入原文链接]

## 前言
Oracle 官方在7月份发布了[关键补丁更新](https://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html)后，我陆续提交了一些不同类型的WebLogic漏洞。尽管官方并未完全修复所有漏洞，但本次更新修复了我上报的六个漏洞中的三个，并将其中三个合并为一个CVE。本文将重点分析10月份这次补丁修复的另外两个漏洞：CVE-2018-3245和CVE-2018-3252。

## CVE-2018-3252 (DeploymentService Deserialization via HTTP)
在审查`DeploymentService` Servlet时，我发现`doPost`函数中有一个处理HTTP POST请求的核心方法`internalDoPost`。该方法通过HTTPHeader中的`wl_request_type`获取`var4`变量，然后根据不同的值进入不同的处理逻辑。这里我们先关注`handleDataTransferRequest`函数。

### handleDataTransferRequest
在`handleDataTransferRequest`函数中，程序对`var9`进行了反序列化，而`var9`是通过`DeploymentObjectInputStream`构造函数生成的，其参数可以由攻击者控制。同样地，在`handleDeploymentServiceMessage`函数中也存在类似的反序列化操作。

值得注意的是，这两个函数都需要`AuthenticatedSubject`对象作为参数，这意味着攻击者必须经过身份验证才能利用此漏洞。有兴趣的同学可以进一步研究WebLogic的用户认证机制，尝试绕过认证。

### PoC 验证
使用用户名/密码方式进行用户认证的PoC如下：
```java
// 示例代码
```

## CVE-2018-3245 (JRMP Deserialization via T3)
在收到7月份的补丁后，我立即进行了差异对比，发现针对JRMP反序列化的修复方式依然是增加黑名单。新增的黑名单包包括`java.rmi.activation`和`sun.rmi.server`，新增的黑名单类包括`java.rmi.server.UnicastRemoteObject`和`java.rmi.server.RemoteObjectInvocationHandler`。

### 黑名单配置
```java
private static final String[] DEFAULT_BLACKLIST_PACKAGES = {
    "org.apache.commons.collections.functors", 
    "com.sun.org.apache.xalan.internal.xsltc.trax",
    "javassist", 
    "java.rmi.activation", 
    "sun.rmi.server" 
};

private static final String[] DEFAULT_BLACKLIST_CLASSES = {
    "org.codehaus.groovy.runtime.ConvertedClosure",
    "org.codehaus.groovy.runtime.ConversionHandler", 
    "org.codehaus.groovy.runtime.MethodClosure",
    "org.springframework.transaction.support.AbstractPlatformTransactionManager",
    "java.rmi.server.UnicastRemoteObject", 
    "java.rmi.server.RemoteObjectInvocationHandler" 
};
```

### 绕过方法
如果仔细分析之前的漏洞和补丁，很容易找到绕过的方法。例如，只要满足继承`java.rmi.server.RemoteObject`且不在黑名单中的类对象即可绕过。我使用`ReferenceWrapper_Stub`类对象成功绕过了这一限制。

### 验证
WebLogic 控制台日志：
```java
java.lang.ClassCastException: com.sun.jndi.rmi.registry.ReferenceWrapper_Stub cannot be cast to weblogic.rjvm.ClassTableEntry.
...
```

## 总结
目前谈到WebLogic漏洞挖掘，很多人首先想到的是反序列化漏洞。虽然新的绕过方法可能会出现，但可用的gadget越来越少，使得漏洞利用难度逐渐增加。在阅读WebLogic代码的过程中，我还发现许多常见的Java漏洞，如文件下载、上传、SSRF、XXE、DoS等，这些漏洞同样存在并且利用起来相对简单。或许，结合其他类型的漏洞，也可以达到远程代码执行的效果。

## 参考资料
- [Critical Patch Update – October 2018](https://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html)
- [Ysoserial](https://github.com/frohoff/ysoserial)

感谢您的阅读！如有任何问题，请通过[PI:EMAIL](mailto:PI:EMAIL)与我联系。