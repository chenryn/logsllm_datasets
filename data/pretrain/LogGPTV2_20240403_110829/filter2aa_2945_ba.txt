create the array, such as in the following example:
int[] pins = { 9, 3, 7, 2 };
If you create an array of structures or objects, you can initialize each
structure in the array by calling the structure or class constructor, as shown in
this example:
Click here to view code image
Time[] schedule = { new Time(12,30), new Time(5,30) };
Download from finelybook PI:EMAIL
363
Creating an implicitly typed array
The element type when you declare an array must match the type of elements
that you attempt to store in the array. For example, if you declare pins to be
an array of int, as shown in the preceding examples, you cannot store a
double, string, struct, or anything that is not an int in this array. If you specify
a list of initializers when declaring an array, you can let the C# compiler infer
the actual type of the elements in the array for you, like this:
Click here to view code image
var names = new[]{"John", "Diana", "James", "Francesca"};
In this example, the C# compiler determines that the names variable is an
array of strings. It is worth pointing out a couple of syntactic quirks in this
declaration. First, you omit the square brackets from the type; the names
variable in this example is declared simply as var, not var[]. Second, you
must specify the new operator and square brackets before the initializer list.
If you use this syntax, you must ensure that all the initializers have the
same type. This next example causes the compile-time error “No best type
found for implicitly-typed array”:
Click here to view code image
var bad = new[]{"John", "Diana", 99, 100};
However, in some cases, the compiler will convert elements to a different
type, if doing so makes sense. In the following code, the numbers array is an
array of double because the constants 3.5 and 99.999 are both double, and the
C# compiler can convert the integer values 1 and 2 to double values:
Click here to view code image
var numbers = new[]{1, 2, 3.5, 99.999};
Generally, it is best to avoid mixing types, hoping that the compiler will
convert them for you.
Implicitly typed arrays are most useful when you are working with
anonymous types, as described in Chapter 7, “Creating and managing classes
and objects.” The following code creates an array of anonymous objects, each
containing two fields specifying the name and age of the members of my
family:
Download from finelybook PI:EMAIL
364
Click here to view code image
var names = new[] { new { Name = "John", Age = 53 },
                    new { Name = "Diana", Age = 53 },
                    new { Name = "James", Age = 26 },
                    new { Name = "Francesca", Age = 23 } };
The fields in the anonymous types must be the same for each element of
the array.
Accessing an individual array element
To access an individual array element, you must provide an index indicating
which element you require. Array indexes are zero-based; thus, the initial
element of an array lives at index 0 and not index 1. An index value of 1
accesses the second element. For example, you can read the contents of
element 2 (the third element) of the pins array into an int variable by using
the following code:
int myPin;
myPin = pins[2];
Similarly, you can change the contents of an array by assigning a value to
an indexed element:
myPin = 1645;
pins[2] = myPin;
All array element access is bounds-checked. If you specify an index that is
less than 0 or greater than or equal to the length of the array, the compiler
throws an IndexOutOfRangeException exception, as in this example:
Click here to view code image
try
{
    int[] pins = { 9, 3, 7, 2 };
    Console.WriteLine(pins[4]); // error, the 4th and last element is
at index 3
}
catch (IndexOutOfRangeException ex)
{
    ...
}
Download from finelybook PI:EMAIL
365
Iterating through an array
All arrays are actually instances of the System.Array class in the Microsoft
.NET Framework, and this class defines some useful properties and methods.
For example, you can query the Length property to discover how many
elements an array contains and iterate through all the elements of an array by
using a for statement. The following sample code writes the array element
values of the pins array to the console:
Click here to view code image
int[] pins = { 9, 3, 7, 2 };
for (int index = 0; index < pins.Length; index++)
{
    int pin = pins[index];
    Console.WriteLine(pin);
}
Note Length is a property and not a method, which is why you don’t use
parentheses when you call it. You will learn about properties in Chapter
15, “Implementing properties to access fields.”
It is common for new programmers to forget that arrays start at element 0
and that the last element is numbered Length – 1. C# provides the foreach
statement, with which you can iterate through the elements of an array
without worrying about these issues. For example, here’s the preceding for
statement rewritten as an equivalent foreach statement:
Click here to view code image
int[] pins = { 9, 3, 7, 2 };
foreach (int pin in pins)
{
    Console.WriteLine(pin);
}
The foreach statement declares an iteration variable (in this example, int
pin) that automatically acquires the value of each element in the array. The
type of this variable must match the type of the elements in the array. The
Download from finelybook PI:EMAIL
366
foreach statement is the preferred way to iterate through an array; it expresses
the intention of the code directly, and all of the for loop scaffolding drops
away. However, in a few cases, you’ll find that you have to revert to a for
statement:
A foreach statement always iterates through the entire array. If you
want to iterate through only a known portion of an array (for example,
the first half) or bypass certain elements (for example, every third
element), it’s easier to use a for statement.
A foreach statement always iterates from index 0 through index Length
– 1. If you want to iterate backward or in some other sequence, it’s
easier to use a for statement.
If the body of the loop needs to know the index of the element rather
than just the value of the element, you have to use a for statement.
If you need to modify the elements of the array, you have to use a for
statement. This is because the iteration variable of the foreach
statement is a read-only copy of each element of the array.
Tip It’s perfectly safe to attempt to iterate through a zero-length array
by using a foreach statement.
You can declare the iteration variable as a var and let the C# compiler
work out the type of the variable from the type of the elements in the array.
This is especially useful if you don’t actually know the type of the elements
in the array, such as when the array contains anonymous objects. The
following example demonstrates how you can iterate through the array of
family members shown earlier:
Click here to view code image
avar names = new[] { new { Name = "John", Age = 50 },
                    new { Name = "Diana", Age = 50 },
                    new { Name = "James", Age = 23 },
                    new { Name = "Francesca", Age = 21 } };
Click here to view code image
Download from finelybook PI:EMAIL
367
foreach (var familyMember in names)
{
    Console.WriteLine($"Name: {familyMember.Name}, Age:
{familyMember.Age}");
}
Passing arrays as parameters and return values for a
method
You can define methods that take arrays as parameters or pass them back as
return values.
The syntax for passing an array as a parameter is much the same as for
declaring an array. For example, the code sample that follows defines a
method named ProcessData that takes an array of integers as a parameter.
The body of the method iterates through the array and performs some
unspecified processing on each element:
Click here to view code image
public void ProcessData(int[] data)
{
    foreach (int i in data)
    {
        ...
    }
}
It is important to remember that arrays are reference objects, so if you
modify the contents of an array passed as a parameter inside a method such
as ProcessData, the modification is visible through all references to the array,
including the original argument passed as the parameter.
To return an array from a method, you specify the type of the array as the
return type. In the method, you create and populate the array. The following
example prompts the user for the size of an array, followed by the data for
each element. The array created by the method is passed back as the return
value:
Click here to view code image
public int[] ReadData()
{
    Console.WriteLine("How many elements?");
    string reply = Console.ReadLine();
Download from finelybook PI:EMAIL
368
    int numElements = int.Parse(reply);
    int[] data = new int[numElements];
    for (int i = 0; i < numElements; i++)
    {
        Console.WriteLine($"Enter data for element ");
        reply = Console.ReadLine();
        int elementData = int.Parse(reply);
        data[i] = elementData;
    }
    return data;
}
You can call the ReadData method like this:
int[] data = ReadData();
Array parameters and the Main method
You might have noticed that the Main method for an application takes
an array of strings as a parameter:
Click here to view code image
static void Main(string[] args)
{
    ...
}
Remember that the Main method is called when your program starts
running; it is the entry point of your application. If you start the
application from the command line, you can specify additional
command-line arguments. The Windows operating system passes these
arguments to the common language runtime (CLR), which in turn
passes them as arguments to the Main method. This mechanism gives
you a simple way to allow a user to provide information when an
application starts running instead of prompting the user interactively.
This approach is useful if you want to build utilities that can be run
from automated scripts.
The following example is taken from a utility application called
MyFileUtil that processes files. It expects a set of file names on the
command line and calls the ProcessFile method (not shown) to handle
each file specified:
Download from finelybook PI:EMAIL
369
Click here to view code image
static void Main(string[] args)
{
    foreach (string filename in args)
    {
        ProcessFile(filename);
    }
}
The user can run the MyFileUtil application from the command line
like this:
Click here to view code image
MyFileUtil C:\Temp\TestData.dat
C:\Users\John\Documents\MyDoc.txt
Each command-line argument is separated by a space. It is up to the
MyFileUtil application to verify that these arguments are valid.
Copying arrays
Arrays are reference types (remember that an array is an instance of the
System.Array class). An array variable contains a reference to an array
instance. This means that when you copy an array variable, you actually end
up with two references to the same array instance, as demonstrated in the
following example:
Click here to view code image
int[] pins = { 9, 3, 7, 2 };
int[] alias = pins; // alias and pins refer to the same array
instance
In this example, if you modify the value at pins[1], the change will also be
visible by reading alias[1].
If you want to make a copy of the array instance (the data on the heap)
that an array variable refers to, you have to do two things. First, you create a
new array instance of the same type and the same length as the array you are
copying. Second, you copy the data from the original array element by
element to the new array, as in this example:
Download from finelybook PI:EMAIL
370
Click here to view code image
int[] pins = { 9, 3, 7, 2 };
int[] copy = new int[pins.Length];
for (int i = 0; i < pins.Length; i++)
{
    copy[i] = pins[i];
}
Note that this code uses the Length property of the original array to
specify the size of the new array.
Copying an array is actually a common requirement of many applications
—so much so that the System.Array class provides some useful methods that
you can employ to copy an array. For example, the CopyTo method copies
the contents of one array into another array given a specified starting index.
The following example copies all the elements from the pins array to the copy
array starting at element zero:
Click here to view code image
int[] pins = { 9, 3, 7, 2 };
int[] copy = new int[pins.Length];
pins.CopyTo(copy, 0);
Another way to copy the values is to use the System.Array static method
named Copy. As with CopyTo, you must initialize the target array before
calling Copy:
Click here to view code image
int[] pins = { 9, 3, 7, 2 };
int[] copy = new int[pins.Length];
Array.Copy(pins, copy, copy.Length);
Note Be sure that you specify a valid value for the length parameter of
the Aray.Copy method. If you provide a negative value, the method
throws an ArgumentOutOfRangeException exception. If you specify a
value that is greater than the number of elements in the source array, the
method throws an ArgumentException exception.
Download from finelybook PI:EMAIL
371
Yet another alternative is to use the System.Array instance method named
Clone. You can call this method to create an entire array and copy it in one
action:
Click here to view code image
int[] pins = { 9, 3, 7, 2 };
int[] copy = (int[])pins.Clone();
Note Clone methods are described in Chapter 8. The Clone method of
the Array class returns an object rather than Array, which is why you
must cast it to an array of the appropriate type when you use it.
Furthermore, the Clone, CopyTo, and Copy methods all create a shallow
copy of an array (shallow and deep copying are also described in
Chapter 8). If the elements in the array being copied contain references,
the Clone method simply copies the references rather than the objects
being referred to. After copying, both arrays refer to the same set of
objects. If you need to create a deep copy of such an array, you must
use appropriate code in a for loop.
Using multidimensional arrays
The arrays shown so far have contained a single dimension, and you can
think of them as simple lists of values. You can create arrays with more than
one dimension. For example, to create a two-dimensional array, you specify
an array that requires two integer indexes. The following code creates a two-
dimensional array of 24 integers called items. If it helps, you can think of the
array as a table, with the first dimension specifying a number of rows and the
second specifying a number of columns.
int[,] items = new int[4, 6];
To access an element in the array, you provide two index values to specify
the “cell” (the intersection of a row and a column) holding the element. The
following code shows some examples using the items array:
Download from finelybook PI:EMAIL
372
Click here to view code image
items[2, 3] = 99;           // set the element at cell(2,3) to 99
items[2, 4] = items [2,3];  // copy the element in cell(2, 3) to
cell(2, 4)
items[2, 4]++;              // increment the integer value at cell(2,
4)
There is no limit on the number of dimensions that you can specify for an
array. The next code example creates and uses an array called cube that
contains three dimensions. Notice that you must specify three indexes to
access each element in the array.
Click here to view code image
int[, ,] cube = new int[5, 5, 5];
cube[1, 2, 1] = 101;
cube[1, 2, 2] = cube[1, 2, 1] * 3;
At this point, it is worth offering a word of caution about creating arrays
with more than three dimensions. Specifically, arrays can consume a lot of
memory. The cube array contains 125 elements (5 * 5 * 5). A four-
dimensional array for which each dimension has a size of 5 contains 625
elements. If you start to create arrays with three or more dimensions, you can
soon run out of memory. Therefore, you should always be prepared to catch
and handle OutOfMemoryException exceptions when you use
multidimensional arrays.
Creating jagged arrays
In C#, ordinary multidimensional arrays are sometimes referred to as
rectangular arrays. Each dimension has a regular shape. For example, in the
following tabular, two-dimensional items array, every row has a column
containing 40 elements and there are 160 elements in total:
int[,] items = new int[4, 40];
As mentioned in the previous section, multidimensional arrays can
consume a lot of memory. If the application uses only some of the data in
each column, allocating memory for unused elements is a waste. In this
scenario, you can use a jagged array, for which each column has a different
length, like this:
Click here to view code image
Download from finelybook PI:EMAIL
373
int[][] items = new int[4][];
int[] columnForRow0 = new int[3];
int[] columnForRow1 = new int[10];
int[] columnForRow2 = new int[40];
int[] columnForRow3 = new int[25];
items[0] = columnForRow0;
items[1] = columnForRow1;
items[2] = columnForRow2;
items[3] = columnForRow3;
...
In this example, the application requires only 3 elements in the first
column, 10 elements in the second column, 40 elements in the third column,
and 25 elements in the final column. This code illustrates an array of arrays
—items, instead of being a two-dimensional array, has only a single
dimension, but the elements in that dimension are themselves arrays.
Furthermore, the total size of the items array is 78 elements rather than 160;
no space is allocated for elements that the application is not going to use.
It is worth highlighting some of the syntax in this example. The following
declaration specifies that items is an array of arrays of int.
int[][] items;
The following statement initializes items to hold four elements, each of
which is an array of indeterminate length:
items = new int[4][];
The arrays columnForRow0 to columnForRow3 are all single-dimensional
int arrays, initialized to hold the required amount of data for each column.
Finally, each column array is assigned to the appropriate elements in the
items array, like this:
items[0] = columnForRow0;
Recall that arrays are reference objects, so this statement simply adds a
reference to columnForRow0 to the first element in the items array; it does
not actually copy any data. You can populate data in this column either by
assigning a value to an indexed element in columnForRow0 or by referencing
it through the items array. The following statements are equivalent:
columnForRow0[1] = 99;
items[0][1] = 99;
You can extend this idea further if you want to create arrays of arrays of
Download from finelybook PI:EMAIL
374
arrays rather than rectangular three-dimensional arrays, and so on.
Note If you have written code using the Java programming language in
the past, you should be familiar with this concept. Java does not have
multidimensional arrays; instead, you can create arrays of arrays exactly
as just described.
In the following exercise, you will use arrays to implement an application
that deals playing cards as part of a card game. The application displays a
form with four hands of cards dealt at random from a regular (52 cards) pack
of playing cards. You will complete the code that deals the cards for each
hand.
Use arrays to implement a card game
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. Open the Cards solution, which is located in the \Microsoft
Press\VCSBS\Chapter 10\Cards folder in your Documents folder.
3. On the Debug menu, click Start Debugging to build and run the
application.
A form appears with the caption Card Game and four text boxes (labeled
North, South, East, and West). At the bottom is a command bar with an
ellipsis (…). Click the ellipsis to expand the command bar. A button
with the caption Deal should appear:
Download from finelybook PI:EMAIL
375
Note The technique used here is the preferred mechanism for
locating command buttons in Universal Windows Platform (UWP)
apps, and from here on all UWP apps presented in this book will
follow this style.
4. Click Deal.
Nothing happens. You have not yet implemented the code that deals the
cards; this is what you will do in this exercise.
5. Return to Visual Studio 2017. On the Debug menu, click Stop
Debugging.
6. In Solution Explorer, locate the Value.cs file. Open this file in the Code
and Text Editor window.
Download from finelybook PI:EMAIL
376
This file contains an enumeration called Value, which represents the
different values that a card can have, in ascending order: