### Effects of the Approximation

First, a send operation on private channels is non-blocking, even in the absence of a matching receive operation. This does not accurately model real-world communication, which often requires reliable transport (e.g., TCP). Second, the private channel behaves as a shared broadcast medium. In our context, this is problematic because we need a tunnel-like communication model that simulates secure peer-to-peer channels. The ProVerif model is too permissive, allowing even honest agents to read and use messages not intended for them, leading to false attack traces.

### 4. Session Management

We now consider the procedures that occur after the terminal and MME have established the KASME through AKA (see Fig. 2). Note that the terminal has also informed the MME about its supported security capabilities (the ATT message). These capabilities include lists of encryption and integrity protection algorithms. Consequently, when analyzed separately, some initialization steps are required in the protocol models to set up the security context assumed to be established by AKA.

#### 4.1 NAS Security

NAS security is enabled by a simple request-response procedure [1] (TS 24.301), referred to as the NAS Security Control Procedure (NAS SCP) (see Fig. 2). The MME initiates the procedure by sending a security mode command message (NSM) to the terminal. This message specifies the security algorithms chosen by the MME and includes an identifier (eksi) indicating which KASME to use for key derivation. Multiple KASMEs may be known simultaneously to the terminal and network [1] (TS 33.401). The message also contains the list of security capabilities provided earlier by the terminal.

In response, the terminal verifies that the received security capabilities are consistent with its supported capabilities. If the verification fails, the terminal rejects the command, preventing bidding-down attacks. If the verification succeeds, the terminal sends an encrypted and integrity-protected completion message (NSC). All NAS messages are protected from replay attacks by including a sequence number (omitted in our models).

**Model Description:**
Figure 4 shows a ProVerif model of the NAS SCP protocol. Compared to the AKA model, the novelty in the declaration part lies in the use of predicates and clauses to model capability sets (lines 6-9). Predicates are declared like constructors, and clauses define their meaning. We declare a capability set constructor and a constant representing the empty set (line 6). The predicate in line 7 models the set membership test, defined in the clauses (lines 8-9).

Additionally, the functions for the shared encryption scheme (lines 4-5) have been modified to account for an additional parameter representing the algorithm to be used.

The main process executes initialization events, then expands and forks into an unbounded number of sessions of two process macros representing a UE (line 13) and an MME (line 20). The initialization steps create a capability set of two arbitrary algorithms (lines 31-32), disclose it to the attacker (line 33), and create a secret KASME key (line 34). The key is supposed to have been created during an AKA run, while the capabilities should have been sent by the UE at startup in an attach request. Both parameters are used as input arguments to the process macros.

The use of predicates is illustrated in line 23, where the variable `a : alg` is bound to a value that satisfies the predicate `mem(a, uecaps)` in the rest of the process. This models the MME choosing an algorithm among those supported by the UE. During analysis, ProVerif considers all possible choices.

**Analysis and Discussion:**
The goal of NAS SCP is to establish the encryption and integrity keys, `KNASenc` and `KNASint`, for the NAS protocol. In addition to secrecy and sanity queries, we consider correspondence assertions to check agreement on the established keys and the chosen algorithm.

ProVerif can solve all properties. The reachability queries are falsified, and the secrecy query and basic correspondence assertions are proven to hold. However, ProVerif reports attack traces on the injective assertions. This is expected since there is nothing in the protocol model that binds runs to unique names. The traces show that the attacker can falsify injection by duplicating and dropping messages to obtain a run between multiple parallel instances of MMEs against a single session of a UE and vice versa.

Modifying the model by moving the KASME key creation within the UE process and making the MME process read the key from a table leads to ProVerif proving that one direction holds. In the new model, each run of the UE process is bound to a unique fresh key. This is a different system model, as each replication of the UE represents a new device rather than a rerun of the same one. ProVerif still reports an attack trace for the other direction, as the modifications cannot prevent running multiple MME instances using the same KASME key against a single UE session. Since the KASME can only be present in one MME at a time, it is not possible for two well-behaved MMEs to run NAS SCP procedures simultaneously. Well-behaved agents would run the procedures sequentially, but this behavior cannot be expressed in ProVerif. Even if sequential behavior could be expressed, the injective agreement property would not hold because there is no information in the messages to tie them together, such as a transaction identifier.

#### 4.2 RRC Security

RRC security establishment follows these steps: First, the terminal needs to establish bearers to carry data, achieved by running a NAS Service Request Procedure (NAS SRP) with the network [1] (TS 24.301) (see Fig. 2). The terminal initiates the procedure by sending a service request (NSR) to the MME via the eNB. The radio channel between the UE and the eNB is not secured, but this is not a problem since the NAS protocol provides its own security.

Upon receiving the request, the MME derives a `KeNB` from the currently active KASME and the message sequence number associated with the NAS message. This ensures a fresh key is generated every time the procedure is run, preventing key stream reuse and replay attacks against the RRC protocol. The MME transfers the `KeNB` and the terminal's security capabilities to the eNB. The eNB sends a command message (RSM) to the terminal, which includes the chosen algorithms and is integrity-protected to prevent modification of the algorithm selection [1] (TS 36.331). When the terminal receives the command, it derives the necessary keys and replies to the eNB with an encrypted and integrity-protected completion message (RSC). From this point on, all RRC messages are integrity-protected and encrypted, and all user plane traffic is encrypted.

**Model and Analysis:**
A ProVerif model of the NAS SRP is provided in Fig. 5. The declaration part is identical to that of the NAS SCP model (Fig. 4) except for some message headers and constants used in the key derivation function, which can be easily found in the model.