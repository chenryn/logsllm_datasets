# Precision Metrics

| Total | Imprecise | Precise |
|-------|-----------|---------|
| 3,657 | 421 (11.55%) | 3,236 (88.45%) |
| 485 | 128 (26.39%) | 357 (73.61%) |
| 7,835 | 654 (8.35%) | 7,181 (91.65%) |
| 29,390 | 1,637 (5.57%) | 27,753 (94.43%) |
| 24,658 | 1,525 (6.18%) | 23,133 (93.82%) |
| 4,343 | 509 (11.72%) | 3,834 (88.28%) |
| 58,989 | 3,433 (5.82%) | 55,556 (94.18%) |

**Table 1: Precision Metrics**

In the popular applications, we achieved a precise specification in over 94% of the 58,989 ICC (Inter-Component Communication) locations across 838 apps. Explicit ICC was slightly more precisely analyzed than implicit ICC, while mixed ICC remains challenging to recover. This is not surprising, as mixed ICC involves different Intent values on two or more branches, indicating a more complex method.

A key aspect of the analysis not shown in the table is the number of applications for which we could identify unambiguous specifications for all ICC, referred to as 100% precision. In the random sample, 56% of the applications could be analyzed with 100% precision, 80% with 90% precision, and 91% with 80% precision. For the popular applications, 23% could be analyzed with 100% precision, 82% with 90% precision, and 94% with 80% precision. Note that less-than-100% precision does not indicate a failure; rather, it reflects cases where runtime context determines string arguments, making static analysis inherently limited.

## 6.2 Computation Costs

A second set of tests aimed to determine the computational costs of performing the IDE (Integrated Development Environment) analysis using Epicc. We collected measurements at each stage of the analysis and computed simple statistics characterizing the costs for both the random sample and the popular applications.

The results show that ICC analysis is feasible for applications in the Google Play store. We were able to analyze all 348 applications in the random sample in approximately 3.69 hours of compute time. On average, it took just over 38 seconds to analyze a single application, with a standard deviation of 99 seconds. There was significant variance in the analysis run times. A CDF (Cumulative Distribution Function) of the analysis computation time for all 348 applications is presented in Figure 8(a). The top application consumed over 11% of the total time, the top 5 consumed over 25%, and the top 29 consumed over 50%. These applications are large with many entry points.

Analyzing the 838 popular applications took 33.58 hours, or 144 seconds per application, with a standard deviation of 277 seconds. The average processing time is significantly higher than for the random sample, which is expected given the larger average application size (almost 1,500 classes compared to less than 400 classes per application in the random sample). This is likely due to the popularity bias, as frequently downloaded applications tend to have more fully developed and complex features. A CDF of the computation time for all 838 applications is presented in Figure 8(b). Again, a few applications dominated the analysis time, with the top 5 consuming over 11% and the top 83 (less than 10% of the sample) consuming over 50%.

Processing was dominated by the standard Soot processing (e.g., translating classes to an intermediate representation, performing type inference and points-to analysis, building a call graph), which consumed 75% of the processing time in the random sample and 86% in the popular applications. The translation to Sootâ€™s internal representation and call graph construction were the most time-consuming tasks. The second most time-consuming task was the IDE analysis (including string analysis), taking 15% of the processing time in the random sample and 7% in the popular one. I/O operations accounted for most of the remaining processing time, with loading classes taking 7% in the random sample and 3% in the popular one. Database operations took 2% in the random sample and 3% in the popular applications. Other operations (e.g., parsing manifest files) took less than 1% of the processing time.

## 6.3 Entry/Exit Point Analysis

This section briefly characterizes the exit (source) and entry (sink) points of Android applications in our datasets. An exit point is a location that serves as a source for ICC, i.e., the sending of an Intent. In the random sample, our analysis found 7,350 exit points, which can transmit 10,035 unique Intent values. About 92% of these exit points had a single Intent specification, with the remaining exit points being able to take on 2 or more values. In two pathological cases, an exit point could have 640 different Intent values, likely due to contrived control flow or multiple aliasing. The popular applications had 48,756 exit points, associated with 316,419 Intent values. Single Intent specifications were found in 90% of exit points. We found 10 pathological cases where an exit point was associated with 512 Intent values or more. The use of key-value data was more prevalent than initially expected, present in about 36% of exit points in the random sample and 46% in the popular applications.

Our study of entry points focused on the sinks of ICC, including dynamically registered broadcast receivers and component interfaces (exported or not) identified in the application manifest. In the random sample, we identified 3,863 such entry points associated with 1,222 unique intent filters. The popular applications comprised 25,291 entry points with 11,375 Intent Filters. 1,174 components were exported in the random sample, and 7,392 in the popular applications. Only 6% (67) of the exported components in the random sample and 5% (382) in the popular applications were protected by a permission. This is concerning, as the presence of unprotected components in privileged applications can lead to confused deputy attacks. We also found 23 components exported without any Intent Filter in the random sample and 220 in the popular sample. Conversely, we found 32 cases where a component had an Intent Filter but was not exported in the random sample and 412 in the popular one, indicating that developers sometimes use ICC in unconventional ways.

## 6.4 ICC Vulnerability Study

In this section, we perform a study of ICC vulnerabilities in our samples using Epicc and compare our results with ComDroid [6]. We look for the same seven vulnerabilities as in [6], including Activity and Service hijacking, Broadcast thefts, Malicious Activity or Service launch, and Broadcast injection. Table 2 shows the results of the study for the random and popular samples.

| Vulnerability | Random Sample | Popular Applications |
|---------------|----------------|----------------------|
| Activity Hijacking | 3,507 (ComDroid) / 3,546 (Epicc) | 22,931 (ComDroid) / 23,680 (Epicc) |
| Broadcast Theft | 156 (ComDroid) / 156 (Epicc) | 1,735 (ComDroid) / 1,751 (Epicc) |
| Service Hijacking | 721 (ComDroid) / 721 (Epicc) | 7,679 (ComDroid) / 7,679 (Epicc) |
| Malicious Activity Launch | 191 (ComDroid) / 191 (Epicc) | 1,900 (ComDroid) / 1,900 (Epicc) |
| Malicious Service Launch | 25 (ComDroid) / 25 (Epicc) | 281 (ComDroid) / 281 (Epicc) |
| System Broadcast Injection | 377 (ComDroid) / 377 (Epicc) | 5,187 (ComDroid) / 5,187 (Epicc) |
| Total ComDroid | 2,772 (Random) / 17,293 (Popular) | 2,591 (Random) / 15,214 (Popular) |
| Total Epicc | 2,854 (Random) / 39,859 (Popular) | 2,079 (Random) / 30,033 (Popular) |

**Table 2: ICC vulnerability study results for the random sample (R) and the popular applications (P)**

For the three unauthorized Intent receipt vulnerabilities (first three columns), both ComDroid and Epicc indicate whether the sent Intent has extra data in the form of key-value pairs and whether the Intent has the `FLAG_GRANT_READ_URI_PERMISSION` or `FLAG_GRANT_WRITE_URI_PERMISSION`. These flags are used in Intents referring to Content Provider data and may allow the recipient to read or write the data.

**Figure 8: CDF of computation time**

- **(a) Random sample**
- **(b) Popular applications**

This figure shows the cumulative distribution function (CDF) of the computation time for all 348 applications in the random sample and all 838 popular applications. It highlights the high variance in analysis times, with a few applications dominating the total computation time.