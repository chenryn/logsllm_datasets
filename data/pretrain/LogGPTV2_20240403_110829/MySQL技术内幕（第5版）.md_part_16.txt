John
'1970-1-1"
11972-12-26
。可以重写该查询语句，
1874-08-10
1911-02-06
birth
1884-05-08
1735-10-30
1913-07-14
+
-
--=-+
INTERVAL 10 YEAR);
1964-10-20
1826-07-04
2006-12-26
2004-06-05
1972-12-26
death
age
，使用一个文字量型的起点日期，然后在
成员，可以将成员的有效日期与
lage
8
0
3
6
90
1.4MySOL教程
43
用
---
## Page 64
用带LIKE的模式，而是使用了带算术比较运算符的模式。
划线“
配需要使用像LIKE和NOTLIKE 那样的运算符，并且需要指定一个包含通配字符的字符串。
1.4.9.7模式匹配
或许当时你还不太能看懂这个查询。那么现在是否已完全明白了呢？
到期后还未来复诊”：
第5章。
44
mysql> SELEcT last_name,first_name FROM president
MySQL支持模式匹配操作，这使我们能够在未给出精确比较值的情况下把行查出来。模式匹
下面这个查询展示了一种常见错误。这个“模式匹配”不会返回任何内容，因为它没有使
下面这个模式能匹配到所有以字母W或w开头的姓：
WHERE 1aSt_ViSit SELEcT last_name, first_name FROM president
下面这个模式将与恰好包含4个字母的姓相匹配，如下所示：
mysql> SELEcT last_name, first_name FROM president
下面这个模式将与那些包含有‘W%或'w%！（并不仅限于第一个字母）的姓相匹配：
上面这个比较表达式唯一成功的地方是该列正好包含了字符串'w%＇或'w%'。
Empty set (0.00 sec)
mysql> SELEcT last_name,
如果expiration 列经过了索引，那么这个查询将会比前一个更有效率。具体原因请参考
last_name 1 first_name
last_name
+--
WHERE expirationWHERE last_name LIKE%W%';
WHERE last_name LIKE
IJames K.
1Lyndon B.11973-01-22
first_name
George
George
first_name
Dwight D.
Woodrow
first_name,
first_name FROM president
W%';
last_visit FROMpatient
expiration FROM member
---
## Page 65
1.4.9.9生成统计信息
考1.4.9.10节。
对此有过多的讨论。有时，使用一个变量可能会更容易让人理解。更多关于子查询的信息请参
president表里找出birth值小于该变量值的那些行。
询结果赋给变量的过程并不会阻碍该查询的输出显示。第二个查询会引用该变量，并在
赋给一个名为@jackson_birth的变量。这条 SELECT 语句的查询结果仍会被显示出来；而将查
表达式。因此，上面的第一个查询主要负责把Andrew Jackson总统的出生日期查出来，并把它
的其他总统查找出来：
些。可以先将他的出生日期检索出来，并存储到一个变量里，然后再将出生日期早于该变量值
一些值存储起来以供今后的查询使用。
1.4.9.8设置和使用自定义变量
关于LIKE和REGEXP的更多信息请参考3.5.1.1节和附录C。
实际上，前面的那个问题可以通过一条使用连接或子查询的查询语句来解决，但这里不想
MySQL最有用的一项功能就是，能够对大量原始数据进行归纳和统计。大家都明白，单纯
也可以使用SET语句来对变量进行赋值。此时，“=”和“：=”都可以用作赋值运算符：
MySQL支持你定义自己的变量。这些变量可以被设置为查询结果，这使我们可以方便地把
mysql> SELECT @today, @one_week_ago;
mySql> SET @today = CURDATE();
mysql> SELEcT last_name,
mysql> SELECT @ Jackson_birth := birth FROM president
2012-04-2112012-04-14
@today
last_name
1767-03-15
@jackson_birth := birth
Monroe
Madison
Jefferson
Adams
Washington
Bush
Bush
Ford
Taft
V
WHERE birth  SELECT COUNT(*),COUNT(email),COUNT(expiration) FROM member;
mysql> SELECT coUNT(*) FROM grade_event WHERE category ='Q;
mySql> SELECT COUNT(*)FROM member;
COUNT(*)1COUNT(email）ICOUNT(expiration）
另一种形式的统计是计数，需要使用COUNT（）函数。如果使用COUNT（*），那么计算出来的
COUNT(*)
mysql> SELECT DISTINCT state FROM president ORDER BY state;
+---一------
COUNT（*）
state
第1章MySQL入门
102
102
80
96
---
## Page 67
生列表，可以使用GROUP BY子句来分别统计男、女学生的人数，如下所示：
SELECTCOUNT（*）来统计出最终结果。显然这是你想避免的事情。
用查询语句 SELECT DISTINCT state FROM president），然后，再针对各州执行查询语句
方式来确定出生自美国各个州的总统人数。首先，你必须一个不少地把涉及的州全部找出来（使
统计：
询，可以确定出班级里总共有多少名学生：
如，想要知道美国共有多少个不同的州曾经诞生过总统，那么可以使用下面这条查询语句：
幸运的是，只用一个查询便可以统计出某一列里的不同值分别出现过多少次。对于那个学
使用同样的查询形式，
mysql> SELECT sex,
这个办法可行，
mysql> SELECT COUNT(*) FROM student WHERE sex='m';
mySql> SELECT COUNT（*) FROM Btudent WHERE seX=f;
不过，班级里的男生和女生分别是多少呢？有一种办法可以找到答案，即按性别分别进行
mysql> SELECT COUNT(*) FROM student
你可以对某个数据列进行全面统计，也可以对该列进行分类统计。例如，使用下面这个查
mysql> SELECT COUNT(DISTINCT state) FROM president;
组合使用COUNT（）与DISTINCT，可以统计出在查询结果里有多少个不同的非NULL值。
stateIcOUNT（*）
SeX1COUNT（*）
COUNT(*)
COUNT（*)
COUNT（*）
COUNT(DISTINCT State)
-----------m--------
16
15
31
但比较麻烦，
15
COUNT（*） FROM Btudent GROUP BY SeX;
COUNT（*) FROM president GROUP BY state;
，可以分别统计出生自各州的总统人数，如下所示：
21
，而且很不适合于有多种不同列值的情形。假设如何采用这种
1.4MySOL教程
---
## Page 68
统出生：
具体实现方法与ORDER BY相类似。
就是这样做的，其中的cOUNT（*）列的别名为count。
想获得按出生地所在州分组后的总统人数，并按人数从多到少的顺序排列出来，于是可以多加
现在：它能以更灵活的方式显示查询结果。默认情况下，MySQL会根据GROUPBY子句里的列
在一起用于进行分组统计的做法有很多优点。
进行分组。
#
一个ORDERBY子句，如下所示：
要使用GROUPBY子句来对某个计算列的结果进行分组，需要使用别名或列位置来引用它，
mysql> SELECT MONTH(birth) AS Month, MONTHNAME(birth) AS Name,
如果用于排序的列是由某个汇总函数产生的，那么不能直接在ORDER BY子句里引用该函
与分别统计某列的不同值所出现次数的做法相比，将COUNT（*）函数与GROUPBY子句结合
mysql> SELECT state, COUNT(*) AS count FROM president
前两项优点的重要性体现在：它们有助于简化查询语句的表达。第3项优点的重要性则体
口不用事先知道被统计列里有些什么值。
在采用这种方式进行分组统计时，GROUP BY子句会告知MySQL在统计之前应该如何对值
口
MonthIName
state l count
第1章MySQL入门
因为只用一个查询便能获得所有的结果，所以可以对输出进行排序。
只需
-> GROUP BY state ORDER BY count DESC;
需一个查询语句。
S
2
COUNT（*)