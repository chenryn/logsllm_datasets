### Abstract

The HyrPoly scheme introduces a succinct commitment (of constant size) and a verification time of \(O(\log(|w|))\) in step (iii), as opposed to the original Hyrax scheme, which uses an extended matrix commitment of size \(O(|w|^{1/l})\) and Bulletproofs for proving polynomial evaluations with \(O(|w|^{(l-1)/l})\) verification time. This change is primarily due to the PolyCom commitment and CPpoly argument from [ZGK+17b], as detailed in Appendix E.

### Using HyrPoly for Data-Parallel Computations

Hyrax, particularly its Gir++ core protocol, is designed for arithmetic circuits with a fan-in of two, consisting of \(N\) identical sub-computations, each having \(d\) layers and a width of at most \(G\). For such circuits, the combined costs of Hyrax, PolyCom commitment, and CPpoly result in the following performance metrics for HyrPoly: the verifier runs in time \(O(|x| + |y| + dG + \lambda d \log(N G))\) and proofs have a length of \(O(\lambda d \log(N G))\).

A relation \(R' = \bigwedge_{j=1}^N R'(u_j)\) can be modeled using an arithmetic circuit \(C\) composed of \(N\) copies of a sub-circuit \(C'\) that outputs 0 on \(u_j\) if and only if \(R'(u_j)\) holds. For a parallel relation with joint inputs, \(R_{\text{par}}(u) = \bigwedge_{j=1}^N R'(u'_j)\) where each \(u'_j\) is a subset of the entries of \(u\), a corresponding circuit can be constructed by taking the parallel composition of \(C\) and adding a redistribution layer (RDL) as described in [WTs+18]. The RDL appropriately duplicates and redistributes wires from the input layer to the input wires of each \(C'\).

### Pseudocode for Hyrax-Abstract

```plaintext
Hyrax-Abstract.Setup(1λ) → ck :
    ck ← PolyCom.Setup(1λ)

Hyrax-Abstract.Prove(ek, u) → π :
    (c˜u, o˜u) ← ComPoly(ck, ˜u)
    (πcore, qd, ζ) ← ZK-Gir++CoreP (ek, u)
    y ← ˜u(qd); (cy, oy) ← ComVal(ck, y)
    πeval ← CPpoly.Prove(ek, qd, (c˜u, cy), (˜u, y), (o˜u, oy))
    πeq ← NIPoK-EqP (cy, ζ)
    π ← (c˜u, πcore, cy, πeval, πeq)

Hyrax-Abstract.KeyGen(ck) → (ek, vk) :
    (ek, vk) ← CPpoly.KeyGen(ck)

Hyrax-Abstract.VerProof(vk, c˜u, πcore, cy, πeval, πeq) :
    (qd, ζ) ← ZK-Gir++CoreV (vk, πcore)
    Run and test CheckCom(vk, c˜u) and CheckCom(vk, cy)
    Run and test CPpoly.VerProof(vk, qd, c˜u, cy, πeval)
    Run and test NIPoK-EqV (πeq, cy, ζ)
    Accept if all tests above pass
```

### Impact of Redistributing Layer (RDL)

When using an RDL, the verifier's running time in both Hyrax and HyrPoly incurs an additional overhead of \(O(|x| + |u| + N G)\). This additional cost is due to the break in parallelism, requiring the verifier to handle the total width of the circuit.

For our experiments, we refer to the HyrPoly scheme executed on fully parallel circuits (no RDL) as HyrPoly-Par, and the version of Hyrax-PolyCom with an RDL as HyrPoly-RDL.

### A CP-SNARK for Internal Products from Thaler’s Protocol

In this section, we demonstrate how to modify the zk-vSQL protocol from [ZGK+17b] for a special class of circuits that consist of a tree of multiplications. The key idea is to replace the CMT protocol over homomorphic commitment schemes with an analogous version of Thaler’s protocol [Tha13], which is tailored for trees of multiplications. This modification reduces the prover's runtime to linear in the number of gates in the circuit.

#### Preliminaries

The CMT protocol [CMT12] is a variant of the GKR protocol [GKR08] where the prover runs in time \(O(S \log S)\), with \(S\) being the size of the circuit. The protocol provides a proof that an element is the output of a circuit evaluated over a certain input, i.e., \(y = C(x)\). The prover recursively reduces a claim on layer \(i\) to another claim on layer \(i+1\), using a sum-check protocol for each layer. The multilinear extension links layer \(i\) to layer \(i+1\) through a summation of wiring predicates.

#### Thaler’s Protocol for Trees of Multiplications

Thaler [Tha13] proposes a variation of the CMT/GKR protocol for specific classes of circuits, reducing the prover's runtime by a logarithmic factor. His protocol is particularly effective for circuits where all gates perform the same operation and are structured in a binary tree. The resulting polynomial for each layer is simplified, allowing for a linear-time prover.

#### Adapting zk-vSQL to Thaler’s Protocol

We show how to adapt the CMT protocol over homomorphic commitments in [ZGK+17b, Construction 3] to work with circuits that are a tree of multiplication gates using Thaler’s representation [Tha13]. This modification does not significantly affect security, and the proof remains similar to the one in [ZGK+17b].

Let \(C : F^m \rightarrow F\) be a depth-\(d\) binary tree of multiplications such that \(C(y) = z\) represents the operation \(z = \prod_{i=1}^m y_i\), where \(m\) is a power of two. Let \(ck \leftarrow \text{Setup}(1^\lambda)\) be a commitment key of a linearly homomorphic commitment scheme. The protocol in Figure 18 allows a prover \(P\) to convince a verifier \(V\) that \(C(y) = z\) with respect to \(y\) and \(z\) committed in \(\{c_{y_j}\}_{j \in \{1...m\}}\) and \(c_z\).

As in [ZGK+17b], let \(CP_{\text{eq}}\) (resp. \(CP_{\text{prd}}\)) be a zero-knowledge argument of knowledge for testing equality of two committed values (resp. the product relation between three commitments).

### TTMCom Protocol

```plaintext
TTMCom :
1. Common input: cvk ; r0 = 0 ; c0 := cz ; (cyj)j∈{1...m}
2. P input: ck ; t0 := z ; o0 := oz ; y ; (oyj)j∈{1...m}
3. for i = 0 . . . d − 1 :
    - Run Step 1 of Construction 2 [ZGK+17b] (sum-check over homomorphic commitments) on the claim ti = Vi(ri) = ∑g(i)(ri)(b)
    - At the end of Step 1, P and V hold ri ∈ Fsi and commitment ci to ti = g(i)(ri)
    - P: Claims that VerCommit(cvk, ci) = 1
    - (cR, oR) ← ComVal(ck, vR := ˜Vi+1(ri|0)) ; (cL, oL) ← ComVal(ck, vL := ˜Vi+1(ri|1))
    - (c∗, o∗) ← ComVal(ck, v∗ := vL · vR)
    - P and V run CPprd
    - (ci∗, o∗i) ← HomEval(cvk, ˜βi(ri, ri′), ci)
    - P and V run CPeq
    - P: Computes {(cℓj, oℓj) ← ComVal(ck, ℓj)}si+1
    - P → V: {cℓj}j∈{0...si+1}
    - P: cℓ(0) ← cℓ0
    - V: cℓ(0) ← cℓ0
    - P and V run CPeq
    - V → P: ri+1 ←$ F and define ri+1 ← (ri′, ..., ri′)
    - (ci+1,·)← HomEval(ck, (1, ri+1), ci)
4. ...
5. ...
6. ...
7. ...
8. ...
9. ...
10. ...
11. ...
12. ...
13. ...
14. ...
15. ...
16. ...
17. ...
18. ...
19. ...
20. ...
21. ...
```

This protocol is almost identical to Construction 4 in [ZGK+17b], with the necessary adjustments for the tree of multiplications.