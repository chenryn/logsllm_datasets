### 4) Extracting System Call-Related Function Addresses
Finally, we obtain the addresses of all system call-related functions in the generated Function Call Graph (FCG) from the `System.map` file. As a result of this process, we generate a list of addresses for these functions.

### 3.2 Code Coverage Measurement
Code coverage in the Linux kernel can be measured using both static and dynamic instrumentation methods. Static instrumentation involves inserting code for coverage measurement during the compilation process. However, this method requires access to the source code, making it impractical for closed-source operating systems like Windows. For example, `kcov`, a coverage sanitizer in the Linux kernel, only supports open-source OS kernels such as Linux. Therefore, we opted for dynamic instrumentation, which can be applied more generally across various operating systems.

Dynamic instrumentation typically uses a virtual machine to handle instructions executed on the guest OS. This approach, however, is resource-intensive and can introduce significant performance overhead. To mitigate this, we use Intel Processor Trace (Intel PT), a CPU-level feature, and a modified version of `kAFL` [9], a coverage-guided kernel fuzzing framework that leverages Intel PT.

`kAFL` consists of three main components: VM infrastructure, user-mode agent, and fuzzing logic. The VM infrastructure tracks the control flow of the guest OS by utilizing VT-x for hardware-assisted virtualization and Intel PT for recording execution traces. The user-mode agent manages the entire fuzzing process, including initialization and termination. We modified the VM infrastructure to measure function coverage and the user-mode agent to trace the coverage of the target system call fuzzer. To handle asynchronous events such as interrupts, `kAFL` filters out the TIP (Trace Instruction Pointer) marked with FUP (Follow-Up Packet) from the Intel PT trace.

To measure the code coverage of the system call fuzzer, we run the target system call fuzzer on a guest OS. During fuzzing, a large number of system calls and their related functions are executed, and Intel PT logs the addresses of the executed kernel functions.

### 3.3 Evaluating System Call Fuzzer
To evaluate the performance of the system call fuzzer, we compare the function list generated in §3.1 with the function list generated in §3.2. Since the system call-related function list includes functions that can be executed through system calls, we can assess the fuzzer's performance by analyzing how many of these functions are executed during fuzzing.

### Table 1: Number of Total Functions and System Call-Related Functions in the Linux Kernel

| Version | Total Functions | System Call-Related Functions |
|---------|-----------------|--------------------------------|
| 4.4.87  | 20,503          | 3,990 (19.5%)                  |
| 4.9.0   | 20,963          | 3,797 (18.1%)                  |
| 4.14.0  | 22,503          | 4,183 (18.6%)                  |

### 4. Evaluation
We tested our system on a machine with 64GB RAM and an Intel Core i7-7700 CPU, which supports VT-x and Intel PT. The host OS runs Ubuntu 16.04 with Linux kernel 4.6.2, and the guest OS runs Ubuntu 16.04.3-server-amd64 with Linux kernel 4.4.87. We used QEMU version 2.9.0 as the emulator to run the guest OS. After setting up the environment to execute Trinity, we also configured VT-x and Intel PT to enable the host OS to record and decode the results of running the guest OS.

#### Extracting System Call-Related Functions
Table 1 shows the results of extracting system call-related functions for different versions of the Linux kernel. Among the 20,503 functions implemented in Linux kernel 4.4.87, only 3,990 (19.5%) can be executed through system calls. Since the functions that can be called through system calls are predetermined, function coverage should be measured within this subset when evaluating system call fuzzers.

#### Code Coverage Measurement
Figure 3 illustrates the results of system call fuzzing with Trinity over a 24-hour period. We also measured the functions executed in the IDLE state (e.g., memory management or process scheduling) for comparison. The red bar represents the number of functions executed in the IDLE state, while the blue bar shows the number of functions executed by Trinity. Trinity executed more system calls and system call-related functions than the IDLE state.

### 5. Related Work
Many kernel fuzzing studies have been proposed to detect kernel vulnerabilities. Most kernel fuzzing techniques target system calls and can be categorized into those with and without coverage information.

#### Kernel Fuzzing Without Coverage Information
- **Trinity**: Performs fuzzing by randomly calling system calls on Linux targets. It stores information about arguments and their types to ensure valid system calls.
- **IMF [6]**: Fuzzes macOS by leveraging a model for learning inferred dependencies among API function calls.

#### Coverage-Guided Kernel Fuzzing
- **kAFL [9]**: Measures kernel code coverage using virtualization and Intel PT to provide feedback to the fuzzer. However, kAFL does not automatically generate valid system calls.
- **syzkaller [2]**: Runs the target kernel on a QEMU virtual machine and compiles the kernel with `kcov` to measure coverage, but `kcov` is only available in Linux.
- **TriforceAFL [3]**: Uses QEMU to provide coverage information for the entire system, including the OS kernel. TriforceLinuxSyscallFuzzer is a Linux system call fuzzer based on TriforceAFL.

### 6. Conclusion and Future Work
In this poster, we presented a method to evaluate the code coverage performance of system call fuzzers using virtualization and Intel PT. Our evaluation showed that there are 3,990 system call-related functions that can be executed through system calls in Linux kernel 4.4.87. Trinity executed 1,048 out of these 3,990 functions in 24 hours.

#### Future Work
- Improve accuracy by analyzing false positives and false negatives in the system call-related function list.
- Measure not only function coverage but also branch and edge coverage in system call-related functions.
- Evaluate the coverage of other system call fuzzers and extend the target to include other OS kernels such as Windows and macOS.
- Analyze functions that are not covered by existing system call fuzzers.

### Acknowledgments
This work was supported by the Defense Acquisition Program Administration and the Agency for Defense Development under contract UD190016ED.

### References
[1] 2019. Radare2: Framework for reverse engineering and analyzing binaries. https://www.radare.org/.
[2] 2019. syzkaller: Linux syscall fuzzer. https://github.com/google/syzkaller.
[3] 2019. TriforceAFL: AFL/QEMU fuzzing with full-system emulation. https://github.com/nccgroup/TriforceAFL.
[4] 2019. Trinity: Linux system call fuzzer. https://github.com/kernelslacker/trinity.
[5] CVE Details. 2019. Linux Kernel Vulnerability Statistics. https://www.cvedetails.com/product/47/Linux-Linux-Kernel.html?vendor_id=33.
[6] HyungSeok Han and Sang Kil Cha. 2017. IMF: Inferred Model-based Fuzzer. In Proc. the ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, 2345–2358.
[7] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks. 2018. Evaluating fuzz testing. In Proc. the ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, 2123–2138.
[8] Processor Trace Decoder Library. 2013. Intel Processor Tracing. https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing.
[9] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz. 2017. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels. In Proc. the USENIX Security Symposium (SEC). 167–182.
[10] Kostya Serebryany. 2017. OSS-Fuzz: Google’s continuous fuzzing service for open-source software. USENIX Association.