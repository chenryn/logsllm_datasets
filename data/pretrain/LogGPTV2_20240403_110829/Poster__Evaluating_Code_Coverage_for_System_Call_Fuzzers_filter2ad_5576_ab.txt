4) Extracting system call related function’s address. Finally,
we obtain the address of all system call related functions in the
generated FCG from the System.map.
As a result of the above process, the address list of system call
related functions is generated.
3.2 Code Coverage Measurement
Code coverage of the Linux kernel can be measured by both static
and dynamic instrumentation. To measure code coverage statically,
the code for coverage measurement is inserted into the original
code during the compilation process. However, the static method
needs the source code for instrumentation, so it is hard to apply
to closed-source OS kernels such as Windows. For example, kcov,
which is a coverage sanitizer in the kernel, only supports the open-
sourced OS kernel such as Linux. Therefore, we decided to use
dynamic instrumentation that can be generally applied to various
operating systems.
Dynamic instrumentation uses a virtual machine to handle in-
structions executed on the guest OS. However, this method is
software-intensive and therefore it occurs huge performance over-
head. To address this issue, we use Intel PT, which is supported by
CPU-level feature, and we use a modified version of kAFL [9], a
coverage guided kernel fuzzing framework that uses Intel PT.
kAFL consists of VM infrastructure, user mode agent, and fuzzing
logic. VM infrastructure tracks the control-flow of the guest OS
by leveraging VT-x for hardware-assisted virtualization and Intel
PT for tracking execution records. User agent manages the entire
process, including the initiation and termination of the fuzzer. We
modified the VM infrastructure to measure function coverage, and
modified the user agent to trace the coverage of the target system
call fuzzer. In order to handle asynchronous events such as inter-
rupts, kAFL filters out the TIP that is marked with FUP from the
Intel PT trace.
To measure code coverage of the system call fuzzer, we run target
system call fuzzer on a guest OS. A large number of system calls
and its related functions will be executed during fuzzing, and Intel
PT will log the address of executed kernel functions.
3.3 Evaluating System Call Fuzzer
To evaluate the performance of the system call fuzzer, we compare
the function list generated in §3.1 with the function list generated
in §3.2. Since functions that can be executed through the system
call are listed in the system call related function list, it is possible
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2690Table 1: The number of total functions and system call related func-
tions in the Linux kernel.
Version
4.4.87
4.9.0
4.14.0
Total
20,503
20,963
22,503
System call related
3,990 (19.5%)
3,797 (18.1%)
4,183 (18.6%)
to evaluate the performance of the system call fuzzer by analyzing
how many of these functions are executed during fuzzing.
4 EVALUATION
We tested our system on 64GB RAM, and Intel Core i7-7700 that
supports VT-x and Intel PT. The host OS runs Ubuntu 16.04 with
Linux kernel 4.6.2, and the guest OS runs Ubuntu 16.04.3-server-
amd64 with Linux kernel 4.4.87. The QEMU version 2.9.0 is used
for the emulator that runs the guest OS. We executed the guest OS
with QEMU and then set up the environment to execute Trinity.
We also set up the environment with VT-x and Intel PT so that the
host OS can record and decode the result of running the guest OS.
Extract System Call Related Functions. Table 1 shows the re-
sults of extracting system call related functions according to the
Linux kernel version. The first column shows the version of Linux
kernel. The second and third columns show the number of total
functions extracted from the Linux kernel image and the number of
system call related functions including the system call, respectively.
Among the 20,503 functions implemented in the Linux kernel 4.4.87,
only 3,990 functions (19.5%) can be executed through system call.
Since the functions that can be called through system calls are al-
ready determined, function coverage should be measured within
those functions when evaluating system call fuzzers.
Code Coverage Measurement. Figure 3 shows the result of sys-
tem call fuzzing with Trinity for 24h. We measured functions that
executed in IDLE state (e.g., memory management or process sched-
uling) to compare with the fuzzing results. The red bar shows the
number of functions executed in IDLE state and the blue bar shows
the number of functions executed by Trinity. Trinity executed more
system calls and system call related functions than IDLE.
5 RELATED WORK
Many kernel fuzzing studies are being proposed to detect kernel
vulnerabilities. Most kernel fuzzing techniques target system calls,
and are divided into cases with and without coverage information.
Kernel Fuzzing. Kernel fuzzers without coverage information in-
clude Trinity and IMF [6]. Trinity performs fuzzing by calling sys-
tem calls randomly to Linux targets. It stores information about the
arguments and its type as a template so that the system call can
be validly called. IMF performs fuzzing on macOS by leveraging
a model for learning inferred dependencies among API function
calls.
Coverage Guided Kernel Fuzzing. Kernel fuzzers with coverage
information include kAFL [9], syzkaller [2] and TriforceAFL [3].
kAFL measures the kernel code coverage using virtualization and
Intel PT to provide coverage information to the fuzzer in a feed-
back structure. However, kAFL does not automatically generate
Figure 3: The number of executed functions by Trinity and IDLE
in 24h. The IDLE means that the essential system calls for the oper-
ating system is executed in the guest OS without fuzzing.
valid system calls. syzkaller runs a target kernel on the QEMU vir-
tual machine and compiles the target kernel with kcov to measure
coverage, but with kcov it is only available in Linux. TriforceAFL
leverages QEMU to provide coverage information of the entire sys-
tem including the OS kernel. TriforceLinuxSyscallFuzzer is a Linux
system call fuzzer based on the TriforceAFL.
6 CONCLUSION AND FUTURE WORK
In this poster, we proposed a method to evaluate the code coverage
performance of system call fuzzers using virtualization and Intel PT.
The evaluation result shows that there are 3,990 system call related
functions that can be executed through system call in Linux kernel
4.4.87. As a result of evaluating Trinity, it executed 1,048 functions
out of 3,990 system call related functions in 24h.
Future Work. We intend to improve accuracy by analyzing false
positives and false negatives in the system call related function list.
We intend to measure not only function coverage but also branch
coverage and edge coverage in system call related functions. We
intend to evaluate the coverage of other system call fuzzers and
extend the target for fuzzers that support other OS kernels such
as Windows and macOS as well as Linux. We will also analyze
functions that are not covered by existing system call fuzzers.
ACKNOWLEDGMENTS
This work was supported by Defense Acquisition Program Admin-
istration and Agency for Defense Development under the contract
(UD190016ED).
REFERENCES
[1] 2019. Radare2: Framework for reverse engineering and analysing binaries. https:
//www.radare.org/.
[2] 2019. syzkaller: Linux syscall fuzzer. https://github.com/google/syzkaller.
[3] 2019. TriforceAFL: AFL/QEMU fuzzing with full-system emulation.
https:
//github.com/nccgroup/TriforceAFL.
[4] 2019. Trinity: Linux system call fuzzer. https://github.com/kernelslacker/trinity.
[5] CVE Details. 2019. Linux Kernel Vulnerability Statistics. https://www.cvedetails.
com/product/47/Linux-Linux-Kernel.html?vendor_id=33.
[6] HyungSeok Han and Sang Kil Cha. 2017. IMF: Inferred Model-based Fuzzer. In
Proc. the ACM SIGSAC Conference on Computer and Communications Security
(CCS). ACM, 2345–2358.
[7] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks. 2018.
Evaluating fuzz testing. In Proc. the ACM SIGSAC Conference on Computer and
Communications Security (CCS). ACM, 2123–2138.
[8] Processor Trace Decoder Library. 2013. Intel Processor Tracing. https://software.
intel.com/en-us/blogs/2013/09/18/processor-tracing.
[9] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels.
In Proc. the USENIX Security Symposium (SEC). 167–182.
source software. USENIX Association.
[10] Kostya Serebryany. 2017. OSS-Fuzz-Google’s continuous fuzzing service for open
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2691