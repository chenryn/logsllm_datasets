Strike的`post-exploitation`的DLL文件。
这些是基本的转化不容忽视，许多内容签名在可观察边界的开始处以固定偏移量查找特定字节，这些检查在O（1）时间内发生，这有利于O（n）搜索，过度的的检查和安全技术可能会消耗大量内存，性能就会随之降低了。
[二进制填充](https://attack.mitre.org/techniques/T1009/)也会影响Cobalt Strike中`post-exploitation`的线程起始地址偏移，当Beacon将DLL注入内存时;
它在应该该DLL导出的`ReflectiveLoader`函数的位置启动线程，此偏移量显示在线程的起始地址特征中，并且是寻找特定的`post-exploitation DLL`的[潜在指示符](https://medium.com/@olafhartong/cobalt-strike-remote-threads-detection-206372d11d0f)。注入DLL之前的数据会影响此偏移量。（不清楚线程相关的东西也没关系，下面接着会讲...）
[In-Memory Evasion](https://blog.cobaltstrike.com/2018/02/08/in-memory-evasion/)的第3部分讨论了用于检测内存中注入的DLL的内容，内存和线程特征。
### 0x04 代码执行：咋这么多该死的小众化的案例......
（译者：咋全尼玛文字描述，不见一张图，啃起来真费劲啊...）
本节我们假设我们已经将数据注入到远程进程中了，那么下一步是执行注入进来的内容了。 `process-inject`->`execute
block`可以满足这个需求。开发者可以指定Cobalt
Strike在需要注入代码时会考虑哪些选项，Beacon会检索一次这些选项，只要其中一个选项成功时，Beacon就会停止检索。
前面提到过但我想再次强调一下的是进程注入过程中充满了各种极端情况，您指定的选项列表必须得涵盖这些极端情况。漏掉一种都可能会导致注入失败，看起来可能会觉得进程注入因出现得错误得原因都是随机的，我在我的博客文章中也有写到如何去避免一些看似随机的错误。
#### 有哪些不确定的案例？
Cobalt
Strike中所有的注入技术都适用于x86->x86和x64->x64。从一个架构注入另一个架构看似容易得事，但是实际上x86->x64和x64->x86都需要花费不少的心思。
其中一种案例是未知远程进程是否是一个临时进程。这个问题利弊没有明确的界限，如果我们将其视为不同，则是有利的，反之有害，Beacon的post-ex模块会拉起一个临时进程，因为这个进程是临时的，所以我们可以放心的做更多的事情。
另一个有利的案例是自我自我注入，如果注入自身的进程，我们可以提前准备不同的方式来应对错误。
注入自己时，我们可以使用`VirtualAlloc`和`CreateThread`，在处理远程进程注入的安全堆栈时，自我注入是一种稳妥的针对远程进程的方法。
最后一个案例是注入的数据是否有参数，这里可以通过带有x64目标的`SetThreadContext`传递参数（感谢fastcall！），目前Cobalt
Strike的实现方案暂不能通过`SetThreadContext`传递带有x86目标的参数。
导致进程注入失败的未知因素远不止这些，某些方法在`Windows
XP`系统上风险较大。`RtlCreateUserThread`首当其冲，当必须跨桌面会话边界进行注入时，其他方法并不起作用（CreateRemoteThread还在研究中...）。
### 0x05 代码执行：不存在完美的执行方案
某些执行选项的范围受限上述特殊情况，指定执行块时，首先放置这些特殊情况（自注入，挂起进程），这种方式不适合当前的注入环境时，beacon会直接将忽略这些选项。
接下来，您应该跟进了解Beacon一般使用哪些方法，遵循一个基本原则，每种方法都有其局限性，没有万能的注入方式，如果您只关心是否能够注入成功，那就打扰了。3.14之前的Beacon的在注入cocktail之前做的的事就是保证每种方法都有备份。
下面让我们一起来看看Beacon中不同执行方式之间的细微差别吧：
#### CreateThread
这里我从`CreateThread`开始讲起，我认为存在`CreateThread`的话它应该首先出现在一个执行块中，此功能仅在限于进行自我注入时运行。
使用`CreateThread`将会启动指向您希望Beacon运行的代码的线程。
但是要小心，当您以这种方式自我注入时，您拉起的线程将具有一个起始地址，该地址与加载到当前进程空间中的模块（DLL，当前程序本身）无关，这是一个经验之谈。为此，您可以指定`CreateThread“module！somefunction
+ 0x ##”`。这个变种将生成指向指定函数的挂起线程，如果不能通过`GetProcAddress`获得指定的函数;
这个变种就没有意义。Beacon将使用`SetThreadContext`更新此新线程以运行注入的代码，这也是一种自我注入的方式，可以为您的线程提供更有利的起始地址。
#### SetThreadContext
接下来是`SetThreadContext`，这是用于为 `post-exploitation`任务生成的临时进程的主线程的方法之一。Beacon的`SetThreadContext`适用于x86->x86，x64->x64和x64->
x86。
如果选择了使用`SetThreadContext`，请将其放在执行块中的`CreateThread`选项之后，使用`SetThreadContext`时;
您的线程将具有反映临时进程的原始执行入口点的起始地址。
#### NtQueueApcThread-s
暂停进程的另一个方式是使用`NtQueueApcThread-s`，此方式会使用`NtQueueApcThread`对目标线程下次唤醒时运行的一次性函数进行列队。这种情况下，目标线程即临时进程的主线程。接着下一步是调用`ResumeThread`，该函数唤醒我们挂起的进程的主线程，由于此时该进程已被暂停，我们不必担心会将此主线程返回给进程。此方式仅适用于x86->x86和x64->x64。
`SetThreadContext`和`NtQueueApcThread-s`两者之间选用谁就看您自己了。大多数情况下我认为后者明显更方便。
#### NtQueueApcThread
下一个要考虑的方式是`NtQueueApcThread`，与`NtQueueApcThread-s`不同的是它的出现旨在针对现有的远程进程。该方法需将RWX存根推送到远程进程中，此存根包含与注入相关的代码，执行该存根需将存根添加到远程进程中每个线程的APC队列中，只要其中一个线程进入可警告状态，我们的存根代码就将被执行。
那么存根有什么作用呢？
首先存根会检查它是否已经运行，如果是就什么都不执行，防止注入的代码多次运行。
接着存根将使用我们注入的代码及其参数调用`CreateThread`，这样做是为了让APC快速返回并让原始线程继续工作。
没有线程会唤醒并执行我们的存根，Beacon大概会等待200ms后开始并检查存根以确定代码是否仍在运行，如果没有就更新存根并将注入标记为已经在运行，并继续下一项内容，这就是`NtQueueApcThread`技术的实现详情。
目前我使用过几次这种方式，因为一些安全产品对此事件的防御关注度很低。也就是说OPSEC有关注到它，它也确实是推动RWX存根的一个内存指示器，它还会针对我们推送的远程进程的代码调用`CreateThread`，该线程的起始地址不支持受磁盘上模块，使用`Get-InjectedThread`扫描效果不佳。如果您觉得这种注射方法很有价值，请继续使用它。注意权衡其利弊。值得一提的是该方式仅限于x86->x86和x64->x64。
#### CreateRemoteThread
另一个方式是`CreateRemoteThread`，从字面意思就可以了解到他是远程注入的技术。从Windows
Vista开始，跨会话边界注入代码就会失败。 在Cobalt Strike中，`vanilla CreateRemoteThread`涵盖了x86
->x86，x64->x64和x64->x86三种情况。这种技术的动静也比较明显，
当使用此方法在另一个进程中创建线程时，将触发系统监控工具Sysmon的事件8，Beacon确实实现了`CreateRemoteThread`的变种，它以`“module！function
+ 0x
##”`的形式接受伪起始地址，与`CreateThread`一样，Beacon将在挂起状态下创建此线程，并使用`SetThreadContext`/`ResumeThread`使执行我们的代码，此变种仅限于x86->x86和x64->x64。如果`GetProcAddress`无法使用指定的函数，则这个变种也将失效。
#### RtlCreateUserThread
Cobalt Strike执行块的最后一个方式是`RtlCreateUserThread`。
此方式与`CreateRemoteThread`非常享受，少了一些限制，但也并非完美的，也有缺陷。
`RtlCreateUserThread`将在跨会话边界注入代码，据说在Windows
XP上的注入时也会有很多问题，此方法同样会触发系统监控工具Sysmon的事件8。`RtlCreateUserThread`的一个好处是它涵盖x86->x86，x64->x64，x64->x86，以及x86->x64，最后一种情况很重要。
x86->x64注入在您处于x86 Beacon会话时开展的，并且为您的`post-exploitation`任务生成x64的进程，`hashdump`，`mimikatz`，`execute-assembly`和`powerpick`模块都默为x64。为了实现x86
->x64的注入，此方式将x86进程转换为x64模式并注入RWX存根以方便从x64中调用`RtlCreateUserThread`，该手法来自Meterpreter，RWX存根是一个相当不错的内存指示器。
我早就建议过：“尽可能地让进程呆在x64模式吧”，上述情况就是为什么我会这样说，同时也建议所有`process-inject`->`execute
block`中都放一个`RtlCreateUserThread`，将此作为最底层的方式是有它的意义的，没有其他工作时就可以使用它。
### 0x06 没有进程注入的日子还怎么过
当我在考虑如何灵活的使用这些攻击技巧时，我也在想如果这些方式都行不通该怎么处理？
进程注入是将`payload`/`capability`迁移到不同进程的一种技术（比如从桌面会话0转到桌面会话1），使用runu命令就可以无需进程注入即可转移到不同的进程上，可将bot程序作为您指定的任意进程的子进程来运行。这是一种在没有进程注入的情况下将会话引入另一个桌面会话的方法。
进程注入也是一种在目标上无落地文件执行代码的方法之一。 在Cobalt Strike的很多`post-exploitation`功能都可以选择针对特定进程发起攻击，指定当前的Beacon进程就可以无需远程注入即可使用它们，这是自我注入。
当然，无落地文件执行代码并非完美，有时候将某些东西放在磁盘上才是最好的选择，我曾经成功地将键盘记录工具编译为DLL并将其放到`c:\windows\linkinfo.dll`中并将其加载到`explorer.exe`进程。
我们在同一系统上开放共享来分享定期抓获的键盘记录，有助于我和我的小伙伴们在高度审查的情况下进行操作，在这种情况下很难让payload在内存中长期活下来。
如果你对这些东西感兴趣，建议你观看[Agentless Post
Exploitation](https://blog.cobaltstrike.com/2016/11/03/agentless-post-exploitation/)和[Fighting
Toolset](https://blog.cobaltstrike.com/2018/04/23/fighting-the-toolset/)。
（啃了一天，原文俚语有点多，有些地方读得懵逼了，如有翻译欠妥的地方还请师傅们扶正）