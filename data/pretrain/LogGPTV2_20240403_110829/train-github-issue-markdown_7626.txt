The bug can be demonstrated on the following example:
    from sqlalchemy import Table, MetaData, Integer
    from sqlalchemy.dialects import mysql
    metadata = MetaData()
    table = Table('table', metadata,
       Column('id', Integer, primary_key=True),
       Column('int_or_null', Integer, nullable=True),
    )
    def dump_sql(query):
        return str(query.compile(dialect=mysql.dialect()))
    query = mysql.insert(table) \
        .on_duplicate_key_update(int_or_null=None)
    print(dump_sql(query))
which generates an invalid SQL that subsequently fails to execute:
    INSERT INTO `table` (id, int_or_null) 
    VALUES (%s, %s) 
    ON DUPLICATE KEY UPDATE 
The missing `int_or_null = %s` or `int_or_null = NULL` part is apparently
being cut in the `visit_on_duplicate_key_update(...)` function:
sqlalchemy/lib/sqlalchemy/dialects/mysql/base.py
Lines 1241 to 1242 in e2521b5
|  if val is None:  
---|---  
|  continue