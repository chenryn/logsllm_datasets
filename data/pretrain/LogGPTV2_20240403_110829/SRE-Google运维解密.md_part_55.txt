色的更换会带来性能上的损失。首先系统需要额外的时间重新执行协议的第一阶段部分，
图23-7：基本的复合式Paxos消息流
接收者
提议者
一旦收到多数参与者的回应（包括提议者自己）后，就可以保证系统达成
或者交易号码。
者
和一个交易号码。
消
第
将不会再接收序号更低的视图
一阶段，
带有
提议者发送Prepare
该接收
消息，带有更高的交易序号）。
接收者向组内所有其他成员都发送
在中途已经回复了
息时
第二阶段，提议者发送Accept消
分布式共识系统的性能问题
带上提议的值。
条Promise
298
---
## Page 300
299
258
是错误的结果（参见文献[Gup15])。这种取舍是非常值得的。
相比而言读操作就可以从任意一个副本进行，因为过期数据仅仅会造成额外工作，而不
后“设置”操作进行状态修改（受原子性寄存器的启发）。该操作必须要绝对一致，但是
比如Google的Photon系统（参见文献[Ana13]）。该系统使用一个原子性的“比较”然
要强一致性，数据就可以从任意一个副本来读取。这种设计对某些应用程序来说非常好，
数据存储的优势在于数据同时在多个地点可用，也就是说，如果不是所有的读请求都需
许多系统都是读操作居多的，针对大量读操作的优化是这些系统性能优化的关键。复制
应对大量的读操作
机制。
佳选择。例如Raft（参见文献[Ong14]），就有一个非常完善的、考虑周全的领头人选举
有可能没有一个进程能够成功（由于提议者决斗的问题）。在系统中引入随机变量是最
重要的。如果多个进程同时检测到目前没有领头人进程，同时试图成为领头人，那么很
系统不可用，与多个领头人互相冲突的危险中取舍。设置正确的超时和后退策略是非常
对使用领头人机制的系统来说，领头人选举机制必须仔细调优，以在没有领头人的时候
分特定的提议槽。
（也就是领头人），负责发送系统中的所有提议，
所有实用的共识系统都必须解决这种冲突问题，通常是要么选举一个固定的提议者进程
图23-8：复合Paxos协议中的“提议者决斗”场景
下去。
这个循环可以
直无限持续
第23章
管理关键状态：利用分布式共识来提高可靠性
个Promise消息。
易编号，进程2响应一
进程1发送Prepare消息
收到该消息（或者出现了延迟）。
Promise消息
同时进程2已经回应了
进程3在中途已经发
进程1发送Accept消
但是进程2和进
，要么使用一个轮换机制，给每个进程划
进程1没有
因为
-------------→
程2回应了Promise消
进程1重试，又发送了
收了
这意味着进程3发
进
---
## Page 301
[Bol11])，很多传统数据库都使用该系统进行复制操作。然而，分布式共识系统通常需
共识系统在局域网络中的性能和一个异步的领头人一
间应该在毫秒级。在美国本土，两台机器的往返时间一般来说是45ms，而从纽约到伦敦
物理距离决定，还包括网络拥塞程度。在一个数据中心中，两台机器之间的网络往返时
网络往返时间对不同的源地址和目的地址来说区别非常大，不仅由源地址和目的地址的
分布式共识系统的性能与网络延迟
法定租约对大量读操作的系统是非常有用的，尤其是当数据的某一部分是被集中在某一
作都必须要被法定租约中的所有进程响应。如果租约中的任何一个副本不可用，那么该
带有具体时间范围的（通常很短）。在这个法定租约有限期间，任何对该部分数据的操
头人进程。在很多系统中，
返回的是最新的系统状态）需要一次分布式共识操作，或者需要系统提供一个稳定的领
Paxos协议和其他的分布式协议中，进行强一致性读操作（也就是该读操作的结果保证
手段，该手段专注于降低操作延迟和提高读操作的吞吐量。正如前文所述，在经典的
法定租约（qurom leases）（参见文献[Morl4]）是一个最新研究的分布式共识性能优化
法定租约
为了保障读取的数据是最新的，包含在该读取操作执行之前的所有改变，以下几条中的
则是70ms。
个是数据写入持久化存储的时间。我们接下来会先分析前者。
分布式系统的写性能面临两个主要的物理限制。第一个是网络往返时间（RTT），另外一
个地理区域的进程所读取的时候。
部分数据在租约过期前将无法被修改。
法定租约技术针对数据的一部分给系统中的法定人数进程发放了一个租约，这个租约是
制了系统的延迟和吞吐量。
一条必须要满足：
●进行一次只读的共识操作。
该技术在接下来的一节中会详细描述。
部数据的一个租约，用一些写性能上的损失换来了强一致性的本地读操作的可能。
使用法定租约（quorum lease）协议，在该协议下，某些副本被授予部分或者全
分分布式共识系统都会有），该领头人进程就可以提供这种保障。
从一个保证有最新数据的副本读取数据。在使用稳定领头人进程的系统中（大部
，读操作相比写操作要多得多，所以上述两种情况都极大地限
分布式共识系统的性能问题
追随者复制系统类似（参见文献
259
<300
---
## Page 302
301
发送Propose消息，而不需要像经典Paxos和复合Paxos那样通过一个领头人进程发送。
快速Paxos协议（FastPaxos，参见文献[Lam06]）是Paxos协议的一个变种，意在优化
快速Paxos协议：性能优化
260
Paxos算法在广域网络中的性能。使用该协议的每个客户端可以直接向组内的接收者们
图23-9：使用代理池来降低客户端跨地理区域打开TCP/IP连接的开销
以及共识系统的服务发现逻辑的好地方。
人的TCP/IP进程，以降低客户端的开销。同时代理池也是包装分片逻辑和负载均衡逻辑
一个解决方案是使用地域性的代理池，如图23-9所示。该代理池的进程与共识组建立持
拥有几千个副本的数据存储系统，以及更大规模的客户端来说，这种成本是无法接受的，
IP需要消耗一定资源，包括文件描述符，以及对应的KeepAlive数据流量。对高度分片，
来说，可能不能做到让每个客户端都和共识组所有进程都保持一个活动连接。因为TCP
个连接而且保持这些连接，因为通信将会很频繁。但是，对拥有非常多的客户端的系统
TCP/IP的慢启动问题对共识组中的进程来说可能不是问题：因为这些进程会互相建立一
的初始带宽。常见的TCP/IP窗口大小在4~15KB之间。
IP连接，也就是一次网络往返需要进行三次握手协议。TCP/IP慢启动机制也限制了连接
先出（FIFO）顺序提供了强保障。但是在发送任何数据之前，都需要先建立新的TCP/
很多共识系统使用TCP/IP作为通信协议。TCP/IP是面向连接的，同时针对消息的先进
要副本运行在“较远”距离上，这样可保障副本处于多个不同的故障域中。
第23章
区域
区域
管理关键状态：利用分布式共识来提高可靠性
区域代理
客户端
共识集群
区域
**非持久的TCP/IP链接
----持久的TCP/IP链接
区域代理
客户端
---
## Page 303
Egalitarian Paxos（参见文献[Mor12a0]）。
常是对交易编号取模）。使用轮换机制的算法包括Mencius（参见文献[Mao08]）和
或者是某种领头人轮换机制—预先分配给每个副本一个独立的分布式算法编号（通
几乎在所有关注性能的分布式共识系统设计中，都采用了单个稳定领头人进程机制
终拥有最新信息，但是也存在以下几个问题：
举稳定的领头人进程来提高性能。这种方案可以进一步进行读操作优化，因为领头人始
稳定的领头人机制
地到达接收者处，使得批处理它们非常困难。
直接作为提议者会使得批处理操作更困难。这是因为在这种情况下，各种提议将会独立
许多系统将多个操作批处理化为一个操作发给接收者，以便增加系统吞吐量。让客户端
见文献[Jun07]），因此快速Paxos协议在这种情况下反而比经典Paxos协议要慢。
大部分的时间里，慢速网络上的一个操作远比一个分布式共识操作过程的速度要快（参
网络上的消息加上N个快速网络上的并发操作（经典Paxos）。由于延迟的长尾效应，在
快，那么我们其实是用N个慢速网络上的并发操作（快速Paxos协议）来替换一个慢速
这样：如果Fast Paxos系统的客户端对接收者的RTT很高，而接收者之间却互相连接很
直觉上来看，快速Paxos协议应该永远比经典Paxos 协议要快。然而现实并不一定总是
消息发送操作：
这里的思路是用一个从客户端到所有接收者的并发消息来替代经典Paxos协议中的两个
上文已经描述过，复合Paxos是如何通过选举一个稳定的领头人进程来提高性能的。Zab
·如果领头人进程恰好处于一台有性能问题的机器上，整个系统的吞吐量都会受到
·所有的改变状态的操作都必须经由该领头人，这个要求使得距离领头人进程较远
从提议者到组内其他成员的一个并发消息。
）从客户端到提议者的一个消息。
影响。
含了交易数字，而没有真正的数据。
头人的Accept消息包含了每个提议的所有数据，而其他进程发送的消息仅仅包
领头人进程的外发网络带宽是系统性能的瓶颈（参见文献[Mao08]），因为该领
的客户端必须要增加额外的网络延迟。
分布式共识系统的性能问题
261
<302
---
## Page 304
303
262
有一个版本的复合Paxos协议在磁盘写操作中占主要成分的时候适用：该变体协议并不
这就意味着在单个共识操作的延迟中，有以下几个操作：
Accept消息之前一
分中，这些操作点处于接收者针对某个提议发送Accepted消息之前，以及提议者发送
何一个承诺之前都必须进行磁盘写操作。在复合Paxos性能的关键点—协议的第二部
过了，但是并没有展示在什么情况下协议要求必须在磁盘中记录状态改变。在进程做任