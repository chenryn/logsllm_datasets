# Linux内核漏洞检测与防御
## 作者：蒋浩天/张海全，腾讯安全云鼎实验室

### 自我介绍
**蒋浩天**：
- 专长领域：二进制安全、虚拟化安全、游戏安全等。
- 研究兴趣：专注于底层技术研究，致力于将安全能力下沉，以开启安全对抗的“上帝模式”。

**张海全**：
- 主要从事GCC和Linux内核的安全功能研发工作，并且是Linux内核源码贡献者。
- 重点关注方向包括：漏洞挖掘、控制流完整性（CFI）防御及编译器sanitizer。目标是在编译阶段就消除潜在的安全隐患。

### 大纲
1. 漏洞攻防现状
2. 漏洞利用技术
3. 传统漏洞防御技巧
4. 基于Intel PT的漏洞检测方案
5. 后续展望

### 漏洞攻防现状
#### 主机漏洞防御的价值
- **系统级威胁**：由于系统漏洞可以广泛影响到所有使用该系统的设备，因此它们对云主机构成了主要威胁。
- **攻击焦点**：挖矿软件、勒索病毒等恶意程序常常通过这些漏洞入侵系统，呈现出持续增长的趋势。
- **关键位置**：内核位于整个安全防护体系的核心部分，其存在的漏洞数量通常多于固件或虚拟化层；同时，一旦被利用，其破坏力也远超基础软件或用户应用程序所能造成的损害。
- **优先级**：鉴于上述原因，在构建安全防线时，加固内核应被视为首要任务。

#### 内核漏洞利用现状
- **版本碎片化**：不同系统间存在显著差异，导致某些重要系统难以及时更新至最新版内核。
- **暗箱操作**：出于利益考量，针对内核的研究活动往往在幕后秘密进行。
- **现有对策**：目前市面上提供的解决方案主要包括开源工具如VED、PaloAlto XDR以及LKRG等，但这些方法各有优缺点，例如事中阻断信息量有限、事后处理响应慢等问题仍然存在。

### 漆漏利用技术
常见的漏洞利用手段包括但不限于：
- 返回地址覆盖
- 堆喷射
- SHE链篡改
- 栈交换
- ROP (Return-Oriented Programming)
- Ret2user

其中，堆喷射特别值得注意，因为大约80%的内核漏洞利用案例都涉及到了这一技术。具体来说，它可以通过以下方式实施：
- 利用use after free/double free类型的错误
- 针对堆溢出问题发起攻击

### 传统漏洞防御技巧
为了应对上述挑战，研究人员提出了一系列创新性策略，旨在从源头上阻止漏洞被成功利用，比如：
- **堆喷干扰**：通过hook接管Linux内核中的slab/slub分配器，在分配内存时附加随机字节并延迟释放时间点，以此来扰乱攻击者的预期行为。
- **ROP防御**：监控敏感API调用情况，确保栈指针、调用来源及指令本身的合法性。
- **信息泄露缓解**：加强对全局变量地址、dmesg输出内容等方面的保护措施。
- **安全状态监控**：持续跟踪进程权限变化及SMEP/SMAP状态，快速识别异常行为。

### 基于Intel PT的漏洞检测方案
随着硬件技术的进步，出现了许多新的安全特性，如影子栈等。然而，对于老旧版本的操作系统而言，如何无损地引入这些新功能成为了一个亟待解决的问题。为此，我们提出了基于Intel处理器跟踪(PT)技术的解决方案，无需重新编译内核即可实现类似效果。

#### 可行性分析
实现这一目标需要满足以下几个条件：
- 对call/ret指令流进行捕获
- 构建一个模拟栈来验证函数调用过程
- 记录所有间接跳转指令及其相关信息
- 分析跳转指令的有效性

#### 技术选型
在x86架构下，有几种方法可以获得所需的指令序列，包括LBR、BTS以及PT。经过对比后，我们选择了性能更优且支持范围更广的PT作为最终方案。

#### 工作原理
Intel PT遵循生产者-消费者模型运行。当CPU执行符合条件的指令时，会向缓冲区写入压缩后的数据；当缓冲区满载时，则触发PMI中断，此时停止追踪并将数据保存至用户空间供进一步分析。整个过程中，核心模块负责生成trace信息，而用户态程序则承担起持久化存储的任务。