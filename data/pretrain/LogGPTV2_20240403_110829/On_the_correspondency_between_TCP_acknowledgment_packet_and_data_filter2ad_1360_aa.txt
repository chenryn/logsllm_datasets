title:On the correspondency between TCP acknowledgment packet and data
packet
author:Guohan Lu and
Xing Li
On the Correspondency between TCP Acknowledgment 
Packet and Data Packet 
Xing Li 
Dept. of Electronic Engineering 
Tsinghua University, 100084* 
P.R. China 
PI:EMAIL  
Guohan Lu 
Dept. of Electronic Engineering 
Tsinghua University, 100084 
P.R. China 
PI:EMAIL 
the  remaining  sequences  using 
ABSTRACT 
At  the  TCP  sender  side,  the  arrival  of  an  ack  packet  always 
triggers  the  sender  to  send  data  packets,  which  establishes  a 
correspondency between the arrived ack packet and the sent data 
packets. In a TCP connection, the correspondency between every 
ack packet and its corresponding data packets forms a sequence. 
This sequence characterizes the sender’s behavior. In this paper, 
we  propose  a  method  to  estimate  this  correspondency  sequence 
from the dump trace measured at the receiver side. Because many 
possible  correspondency  sequences  can  be  constructed  based  on 
the trace, the problem here is an estimation problem, which is to 
select  a  most  possible  one  from  those  candidate  sequences.  The 
method  proposed  first  eliminates  some  candidates  that  violate 
basic TCP congestion behavior. Then, it chooses the most possible 
one  among 
the  statistical 
characteristics of delays between the acks and their corresponding 
data  packets  under  maximum-likelihood  criterion.  The  method 
can work in the condition when the TCP connection experiences 
various network delay and loss, and it applies to TCP senders of 
different  versions.  Simulations  and  Internet  experiments  have 
been performed to validate the method. 
Categories and Subject Descriptors 
C.2.6 [Computer Communication Networks]: Internetworking 
General Terms 
Measurement 
Keywords 
TCP,  Maximum-Likelihood  Estimation,  non-deterministic  Finite 
State Machine 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
IMC’03, October 27-29, 2003, Miami Beach, Florida, USA. 
Copyright 2003 ACM 1-58113-773-7/03/0010…$5.00. 
1.  INTRODUCTION 
As a window-based congestion control protocol, one basic TCP 
sender  behavior  is  that  its  data  sending  events  are  nearly  all 
triggered  by  the  arrival  of  acknowledgement  packets,  with  the 
only exception of those timeout retransmissions. This establishes a 
corresponding  relation  between  the  ack  packet  and  the  data 
packets  it  subsequently  liberate.  For  example,  in  Figure  1,  ack 
packet  A5  corresponds 
to  data  packets  D7,  D8,  ack  A7 
corresponds  to  D10.  In  a  TCP  connection,  every  ack  packet 
corresponds  to  a  certain  number  of  data  packets,  which  forms  a 
sequence of correspondency between ack and data packets. This 
correspondency sequence fully characterizes the sender behavior 
of a TCP, which reveals lots of valuable information: 
(cid:122)  The  sender’s  internal  congestion  states,  such  as  cwnd, 
ssthresh, etc on. 
(cid:122)  The  TCP  implementation  of  the  sender.  Different  TCP 
implementations  have  different  reactions  to  arrived  ack 
packets. 
Now,  we  passively  measure  a  TCP  connection  at  its  receiver 
side, and capture all passing ack and data packets. Then, can we 
deduce  the  correspondency  sequence  between  the  ack  and  data 
packet from the dump trace? 
Obviously, the data packet liberated by an ack packet must be 
recorded after the ack in the trace.  We call this the time causality 
condition. However, there are many data packets behind a certain 
ack  packet. Therefore,  based on  the  dump  trace,  there are  many 
possible  correspondency  sequences 
time  causality 
condition is satisfied. The correct correspondency sequence is one 
of them. Now, the problem here is to find this correct one among 
the candidate sequences. 
if  only 
In this paper, we propose a method to solve this problem. In the 
method,  we  first  use  rules  to  eliminate  some  correspondency 
sequences  that  violate  basic  TCP  congestion  behaviors.  Suppose 
Θ  is  the  set  of  the  remaining  sequences.  Then,  we  select  one 
sequence in Θ as the result based on the statistical characteristics 
of delays between the acks and their corresponding data packets 
under maximum-likelihood(ML) criterion. 
There are two keys in this method: The first key is to use rules 
to  eliminate  invalid  correspondency  sequences.  There  are  many 
sequences if only time causality condition is satisfied, but many of 
them do not behave like a TCP, and should be eliminated. In order 
to  eliminate  these  sequences,  we  create  a  model  to  model  the 
* This work is supported by cisco university research project. 
internal congestion state transition behaviors of a TCP sender. The 
model is used to check whether the implicit sender’s internal state 
transition  path  of  a  correspondency  sequence  satisfies  the  basic 
TCP congestion behaviors. All sequences that are not accepted by 
this  model  will  be  eliminated  at  this  stage.  So,  the  set  of  those 
remaining 
those 
correspondency  sequences  which  behave  like  a  TCP,  and  the 
correct one will be in Θ. 
comprised  of  only 
sequences  Θ 
is 
The second key is the maximum-likelihood estimation. First, let 
us consider the ta delay which denotes the interval from the time 
when the ack packet passes the measure point to the time when its 
corresponding data packets pass the measure point(see Figure 1). 
ta7  and  ta10  represent  the  ta  of  data  packet  D7  and  D10 
respectively.  In  Θ,  every  correspondency  sequence  determines  a 
ta sequence. Each ta can be modeled as a random variable. The ta 
sequence is a stochastic process. Usually, ta varies itself within a 
certain range and correlation exists in the ta sequence. So, if we 
have  a  stochastic  model  of  ta  sequence,  we  can  calculate  the 
likelihood  value  for  every  ta  sequence  in  Θ,  and  select  the  one 
with 
likelihood  value.  The  correspondency 
sequence of this ta sequence is the result of our method. 
the  maximum 
Sender 
A5 
A7 
D7   D8 
D10 
Receiver 
(Measure 
  Point ) 
ta7 
 ta10 
Figure 1  Correspondency between TCP ack and data packet 
The method is a statistical estimation, so it cannot guarantee the 
selected one is the actual correspondency sequence. Based on the 
method,  we  implemented  a  tool  tcpdep  that  performs  the 
estimation  using  the  dump  trace  measured  at  the  receiver  side. 
Through  simulations  and  Internet  experiments,  we  find  tcpdep’s 
estimation  is  of  high  accuracy  under  a  variety  of  network 
environments. 
Paper  is  organized  as  follows:  §2  describes  the  estimation 
model. §3 describes the some methods used by tcpdep. §4 is the 
model  validation  with  simulations  and  experiments.  Finally,  we 
draw the conclusion. 
1.1  Related Work 
Vern  Paxson  in  [13]  developed  tcpanaly.  If  the  sender’s 
behavior  of  a  TCP  implementation  is  going  to  be  analyzed,  the 
packet trace must be captured from a vantage point at or near the 
TCP  sender.  tcpdep,  however,  analyzes  the  pairing  relations 
between  acks  and  data  packets  without  requiring  the  trace  be 
gathered at or near the sender side. 
Zhang et al in [19] use T-RAT to analyze the flow rates of TCP 
connections. In T-RAT, heuristics are proposed to estimate RTT 
and  to  track  TCP  dynamics.  The  idea  is  similar  to  tcpdep. 
However, methods used in the two tools are different. 
Padhye  et  al  in  [12]  use  TBIT  to  actively  examine  the  TCP 
implementation  of  a  remote  web  server  by  fabricating  TCP 
packets  and  send  them  to  the  remote  web  server.  tcpdep  is  a 
passive  analysis  tool,  and  it  tries  to  pair  up  acks  with  the 
corresponding data packets they subsequently liberate. 
Paul Barford et al in [4] use tcpeval tool to analyze TCP critical 
path. The analysis of tcpeval requires traces be gathered at both 
the  sender’s  and  receiver’s  sides,  and  the  goal  is  to  analyze 
different delays in a TCP connection. 
2.  ESTIMATION MODEL 
Problem:  Record  a  TCP  connection  at  the  receiver  side1 (See 
Figure 2), capture all ack packets sent from B and all data packets 
arriving at B, and record the time when it is captured. Then, based 
on  this  dump  trace,  we  try  to  estimate  the  correspondency 
sequence  R  between  the  acks  and  data  packets  of  this  TCP 
connection: 
R = { rk | k = 1,2,…n }, 
where  rk  represents  the  pair  of  Ak  and  its  corresponding  data 
packets. rk = (Ak; NULL, [Dj, Dj+1, .. Dj+J]). NULL represents that 
Ak  does  not  correspond  to  any  data  packet,  [Dj,  Dj+1,  ..  Dj+J] 
represent the corresponding data packets of Ak. 
ta 
Ddata 
Data(cid:198) 
Dtrans 
TCP 
A 
(cid:197)Ack 
TCP 
B 
Dack 
Measure Point 
Figure 2  Measurement Scenario 
Estimation model includes two models and one criterion: 
(cid:122)  TCP  sender’s  non-deterministic  finite  state  transition 
model:  The  mathematical  model  for  the  TCP  sender’s 
internal state transition. 
(cid:122)  Channel  model:  The  mathematical  model  for  the  ta 
process. 
(cid:122)  Maximum-likelihood  criterion:  The  criterion  to  select 
the most possible correspondency sequence based on the 
statistical characteristics of ta process. 
2.1  TCP Sender’s non-deterministic finite 
state-transition model 
In this section, the non-deterministic state transition model that 
models  the  sender’s  internal  congestion  state  transitions  is 
introduced. Before it, a deterministic model is discussed. 
1 The  principle  of  the  estimation  applies  no  matter  where  the 
dump trace is recorded, at the receiver side or in the middle of 
the connection. For simplicity, the paper only considers the first 
case.  
There are a set of variables in the TCP sender, such as cwnd, 
ssthresh,  dupacks  etc  on.    The  state  variables  together  with  the 
TCP  congestion  algorithm  control  the  sender’s  data  sending 
behavior. Let S denote the set of state variables, and Sk denote the 
state after receiving the kth ack packet. The arrival of Ak causes 
the sender to send data packet Dj and to shift its state Sk-1(cid:198) Sk. Ψ 
is the sender’s state transition path: 
Ψ ={S1, S2, … , Sk, Sk+1, … SN}. 
For  a  particular  TCP  implementation,  the  state  transition  of 
Ψ  is deterministic and depends only on Sk-1 and Ak. Therefore, a 
particular  TCP  sender  can  be  modeled  as  a  deterministic  finite 
state  machine(FSM).  Ak  and  Dj  are  the  input  and  output  of  the 
FSM respectively. Ψ is invisible from the outside.  
Ri represents a correspondency sequence constructed from the 
trace. The first step in the estimation is to eliminate those invalid 
Ri which do not behave like a TCP. The way to check whether a Ri 
is  a  valid  TCP  correspondency  sequence  or  not  is  to  check 
whether  we  can  find  a  valid  internal  TCP  state-transition  path 
Ψi for the Ri. If such Ψi exists, Ri is a valid TCP correspondency 
sequence. There are mainly 3 challenges in this checking process: 
1.  Different  TCP  implementations  have  different  state-
transition rules. 
2.  A  TCP  sender  has  some  tunable  parameters  such  as 
initial  window  size,  sender  buffer,  which  are  also  very 
critical 
these 
parameters  are  not  explicitly  reflected  in  trace,  and  are 
difficult to obtain without accessing the sender. 
its  behavior.  However, 
in  affecting 
3.  When the trace is collected at the receiver side, the data 
packets sent by the sender may get lost or out-of-ordered 
on its way to the receiver, so actually we do not know the 
exact output of the sender. The same thing happens to the 
acks. We do not know the exact input to the sender too. 
There are two approaches to perform this check: The first one is 
to construct a TCP FSM for each TCP implementation, and then 
test  Ri  against  every  FSM  in  order  to  check  if  it  is  a  valid 
correspondency sequence of a certain FSM. The second one is to 
construct  a  model  M  that  depicts  the  generic  behaviors  of  TCP 
sender’s internal state transitions, and test Ri against this model to 
check if it violates the generic TCP behavior. The first approach 
has been used in [13]. Here, we adopt the second approach. Below 
are two design issues of M: 
1.  Ri violates the generic TCP behavior even when it only 
violates a part of it. Therefore, M currently only depicts 
generic  actions  of  TCP  window  increase  and  state 
transitions  between  window  increase  phase  and  loss 
recovery  phase.  If  Ri  violates  them,  it  can  be  safely 
eliminated because it violates part of TCP behavior. It is 
relatively easier to define generic actions for them than to 
define generic actions for TCP “loss recovery”, because 
major  differences  between  TCPs  are  in  their  loss 
recovery  actions.  When  the  loss  rate  is  small,  a  TCP 
connection is controlled by its window increase action in 
most  of  the  time.  So,  M  can  still  effectively  eliminate 
impossible  correspondency  sequences  without  checking 
if Ri violates TCP loss recovery actions. 
2.  State  transition  inside  a  particular  TCP  sender  is 
deterministic because everything is known, the algorithm 
and  the  state  variables.  But  when  we  try  to  deduce  the 
is  different.  Here,  we  know  neither 
sender’s  internal  state  transition  path  from  outside, 
situation 
the 
algorithm nor the state variable exactly. Because of this 
lack  of  information,  when  we  try  to  model  the  state 
transition  for  a  generic  TCP,  we  must  allow  multiple 
different  state  transitions  from  a  same  state  upon  same 
input,  that  is  to  say  that  the  model  M  is  not  a 
deterministic  model,  but  a  non-deterministic  finite  state 
transition model. In fact, the previous three challenges of 
the  checking  process  are  all 
intrinsically  non-
deterministic  issues.  With  this  non-deterministic  state 
transition  characteristic,  different  congestion  control 
algorithms  used  by  different  TCPs,  the  implicit  sender 
parameters, and the inexact knowledge of sender’s output 
can be solved. 
The rules of M represent generic TCP actions. After checking 
every possible Ri against M, we will have a set of possible state 
transition  paths  Θ={Ψi}.  Every  path  in  Θ  obeys  generic  TCP 
actions  and  behaves  like  a  TCP.  At  current  stage,  we  have  not 
determined  the  correspondency  yet,  but  we  have  identified  all 
possible correspondency sequences that act like a TCP. 
We  now  briefly  describe  M  here.  In  the  model,  state  S  has 
some  basic  elements  such  as  θ,  cwnd,  ssthresh,  acks,  where 