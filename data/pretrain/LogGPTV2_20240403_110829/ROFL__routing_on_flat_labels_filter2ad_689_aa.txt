title:ROFL: routing on flat labels
author:Matthew Caesar and
Tyson Condie and
Jayanthkumar Kannan and
Karthik Lakshminarayanan and
Ion Stoica
ROFL: Routing on Flat Labels
Matthew Caesar
Tyson Condie
Jayanthkumar Kannan
Karthik Lakshminarayanan
Ion Stoica
Scott Shenker
{mccaesar,tcondie,kjk,karthik,istoica,shenker}@cs.berkeley.edu
University of California at Berkeley
ABSTRACT
It is accepted wisdom that the current Internet architecture conﬂates
network locations and host identities, but there is no agreement on
how a future architecture should distinguish the two. One could
sidestep this quandary by routing directly on host identities them-
selves, and eliminating the need for network-layer protocols to in-
clude any mention of network location. The key to achieving this is
the ability to route on ﬂat labels. In this paper we take an initial stab
at this challenge, proposing and analyzing our ROFL routing algo-
rithm. While its scaling and efﬁciency properties are far from ideal,
our results suggest that the idea of routing on ﬂat labels cannot be
immediately dismissed.
Categories Subject Descriptors
C.2.6 [Computer-Communication Networks]: Internetworking;
C.2.2 [Computer-Communication Networks]: Network Proto-
cols – Routing Protocols; C.2.1 [Computer-Communication Net-
works]: Network Architecture and Design
General Terms
Algorithms, Design, Experimentation.
Keywords
Routing, naming, Internet architecture
1.
INTRODUCTION
For a variety of reasons, including the NewArch project [47],
various commentaries [29], NSF’s GENI [45] and FIND [44] pro-
grams, and pent-up frustration at the current state of affairs, it has
become fashionable to consider clean-slate redesigns of the Inter-
net architecture. These discussions address a wide range of issues,
and would take the architecture in many different (and sometimes
opposing) directions. However, the one point of consensus (among
those who comment on the matter) is that any new architecture
should cleanly separate location from identity.1 The current use of
IP addresses to signify both the location and the identity of an end-
point is seen as the source of many ills, including the inability to
1By location we mean a label that enables one to ﬁnd the object in the net-
work, and by identity we mean a label that uniquely and persistently spec-
iﬁes that object. We will use the terms name and identity interchangeably
throughout this paper.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
properly incorporate mobility, multihoming, and a more compre-
hensive notion of identity into the Internet architecture. As long ago
as Saltzer’s commentary [31] and the GSE proposal [28], and prob-
ably even before that, there have been calls for separating the two,
either through new addressing schemes (as in GSE), or through
more radical architectural changes (e.g., TRIAD [10], IPNL [16],
HIP [22], FARA [11], LFN/DOA [3, 38], i3 [33], SNF [23], etc.).
All of these proposals deﬁne or assume the existence of a (not
necessarily global) endpoint namespace (or namespaces), but they
differ greatly in the nature of the namespace, from using FQDNs,
to ﬂat names, to allowing any namespace at all (i.e., the architecture
is namespace-neutral).
Despite the differences in namespaces and many other factors,
there is an underlying similarity in how these proposals use end-
point names. Most designs involve resolution; that is, at some point
in the process, the name gets turned into a location (be it an ad-
dress or a more general forwarding directive [11]), and the network
uses this location information to deliver the packet to the destina-
tion. This location information is considered ephemeral, and only
the name serves as a long-term identiﬁer. The resolution could be
done through DNS, or by the network (as in [33]), or through some
other unspeciﬁed process.
This paper takes a very different approach. Rather than split iden-
tity from location, we get rid of location altogether. That is, we pro-
pose that the network layer not contain location information in the
packet header; instead, we propose to route directly on the identi-
ties themselves.2 This approach inherits all the advantages of the
location-identity split, such as mobility, multihoming, and stable
identities, but also has several practical advantages of its own:
• No new infrastructure: There is no need for a separate name
resolution system (which already exists for DNS names,
but would have to be created for anything other than DNS
names).
• Fate-sharing: Packet delivery does not depend on anything
off the data path, because there is no need to contact a reso-
lution infrastructure before sending a packet.
• Simpler allocation: Unlike IP addresses, which need to be
carefully allocated to ensure both uniqueness and adherence
to the network topology, the allocation of identities need only
ensure uniqueness.
• More appropriate access controls: Network-level access con-
trols, which are now largely based on IP addresses, can now
be applied at a more meaningful level, the identiﬁer.
However, this design isn’t motivated solely by these advantages.
The real driving force is our wanting to question the implicit as-
sumption, which has been around for as long as the Internet, that
2We will return to these papers later when we review related work, but for
now we note that TRIAD and IPNL both routed on FQDNs; however, they
used resolution to reach objects that are outside of their home realm. The
design in [18] does not use resolution, but cannot scale if many objects don’t
follow the DNS hierarchy. Thus, none of these three designs can scalably
route on fully general (and movable) identities.
scalable routing requires structured location information in the
packet header. So we now ask: how can you route just on names,
and how well can it be done?
First we need to settle what these names look like. If they are
to be the cornerstone of the architecture, one would like names to
serve as persistent identiﬁers. As argued in [3, 33, 38], though, per-
sistence can only be achieved if the names are free of any mutable
semantics. The easiest way to ensure a name has no mutable seman-
tics is to give the name no semantics at all. Thus, in what follows
we use a ﬂat namespace, where names have no semantic (but per-
haps have cryptographic) content (see, e.g., [3, 22, 26, 33, 38]). One
can argue for or against the desirability of ﬂat namespaces, and we
certainly don’t have the space to make a persuasive case here, but
not only do we believe they have signiﬁcant advantages, we also
believe that if you route on any form of structured names then you
are indeed back in the realm of using structure to scale routing.
The technical challenge, then, is to scalably route on ﬂat labels
(we use the term label because from a routing perspective it doesn’t
matter whether these are names or something else; the goal is to
route to wherever that label currently resides). To our knowledge,
every practical and scalable routing system depends on the structure
of addresses to achieve scalability,3 so this is a daunting challenge
indeed. Our goal isn’t to prove that ROFL can match the perfor-
mance of the current Internet, it is merely to see how far we can get
in this direction of the design space.
Our quest is related to the work on compact routing (which is
essentially how to route on ﬂat labels), which for the Internet con-
text has been most usefully explored in [24, 25]. The focus there
was on the asymptotic static properties of various compact routing
schemes on Internet-like topologies, but there was no attempt to
develop or analyze a dynamic routing protocol that implemented
these algorithms. It is precisely that problem, the deﬁnition and
performance of a practical routing protocol on ﬂat labels, that is
our focus here. While ROFL falls far short of the static compact
routing performance described in [24, 25] and elsewhere, it seems
far better suited for a distributed dynamic implementation.
Roadmap: We start by giving a high level overview of our de-
sign in Section 2. We then provide a more detailed description in
two parts: Intradomain routing (routing within a single ISP, Sec-
tion 3), and Interdomain routing (Internet-scale routing across ISPs,
Section 4). We touch on extensions to the basic ROFL design to
address related concerns in routing (Section 5) and then discuss
simulation results (Section 6). We then conclude in Section 7.
2. OVERVIEW
Before we present our design, we should note the three dimen-
sions along which it should be evaluated.
Architecture: These are the broad issues raised in the previous
section about what beneﬁts ﬂow from routing on ﬂat names.
Features: We will show, in the detailed design sections, that ROFL
can support policy routing (Section 4) and can be extended to sup-
port anycast and multicast (Section 5).
Performance: We will address this through simulation, where
we study stretch, join-overhead (which captures the effect of host
churn), and failure-recovery. The numbers aren’t pretty, but they
suggest that with a big enough cache, one that is well within reach
of current technology, the performance might be acceptable.
3While DHTs might appear to be a counterexample, they run on top of a
point-to-point routing system and thus don’t truly address the problem of
building, from scratch, a system that routes without using structured loca-
tion information.
We now give a very high-level view of our ROFL design,
which borrows heavily from insights and techniques in HIP [22],
Chord [34], Canon [17], and Virtual Ring Routing (VRR) [7].
2.1 Preliminaries
Identiﬁers: We use self-certifying identiﬁers; that is, we assume a
host’s or router’s identity is tied to a public-private key pair, and its
identiﬁer (ID) is a hash of its public key. In general, a physical box
can have multiple IDs, and an ID can be held by multiple boxes
(which is how we will implement anycast and multicast), but for
this simple description we will assume each host and router has a
single, globally unique ID. We wrap these values to create a circu-
lar namespace and, as in Chord, we use the notions of successor
and predecessor and will establish a ring of pointers that ensures
routing is correct; some additional pointers cached along the way
will lead to shorter routes. Nodes maintain pointers to both internal
(within the same AS) and external (in a different AS) successors,
as shown in Figure 1.
Source routes: As done today, hosts are assigned to a ﬁrst-hop
or gateway router through either DHCP or manual conﬁguration
(and, in fact, a host can have several gateway routers). We say that a
host’s ID is resident at this gateway router, so each router maintains
a set of resident IDs (in addition to its own ID), and it maintains
source routes to their successors on their behalf. We call the router
at which an ID is resident the ID’s hosting router. A source route
or path from one ID to another is a hop-by-hop series of physically
connected router IDs that goes from one hosting router to another.
Classes of nodes: There are three classes of nodes in the system:
routers, stable hosts (e.g., servers and stable desktop machines), and
ephemeral hosts (hosts that are intermittently connected at a partic-
ular location, either because of mobility, e.g., laptops, or because of
frequent shut-downs or failures, e.g., home PCs turned off when not
in use). The decision about whether a host is stable or ephemeral is
made by the authority who administers the router at which it is res-
ident. When we use the term host without a modiﬁer, we will mean
a stable host; ephemeral hosts will be treated as a special case and
dealt with later in this section.
Source-Route Failure Detection: In order to detect source route
failures, ROFL assumes an underlying OSPF-like protocol that pro-
vides a network map (and not routes to hosts) and can identify link
failures in the physical network. In the intra-domain case, this pro-
tocol ﬁnds paths to other hosting routers within the same AS. In the
inter-domain case, this protocol maintains routes to external bor-
der routers whom the internal hosting routers have pointers to. This
protocol can also be used to ﬁnd the egress router by which an ad-
joining AS can be reached. This protocol is used to detect link and
node failures, and notiﬁes the routing layer of such events.
Security: The self-certifying identiﬁers can also help fend off at-
tacks against ROFL mechanisms itself. When a host is assigned
to a hosting router, before its ID can become resident, the host
must prove to the router cryptographically that it holds the appro-
priate private key. Thus, there can be no spooﬁng of IDs unless,
of course, the router misbehaves. However, end-to-end veriﬁcation
(both from routers and from hosts) can prevent such spooﬁng even
with a misbehaving router. A more subtle attack is the Sybil at-
tack [13], where-in a compromised router may concoct identiﬁers
to gain a larger footprint in the system. Damage control against
such attacks may be achieved by auditing mechanisms within an
AS that limit the number of IDs hosted by a router.
For ease of exposition, we ﬁrst describe how ROFL does intra-
domain routing, and then go on to the more complicated case of
Provider ISP
Ext_succ(ida)
Succ(ida)
R2
R1
3
Host (ida)
Figure 1: A host with ida has pointers to an internal successor,
Succ(ida), and an external successor, Ext succ(ida).
inter-domain routing. The discussion here is informal (the more
detailed and precise explanation is presented in the following sec-
tions) and we focus on the steady-state (when no joins or leaves are
in progress) for clarity.
2.2 Intradomain
Joining: Whenever a new host a arrives, its hosting router sets up
a source route from ida to its successor ID, and contacts the hosting
router for the predecessor ID to have it install a source route from
it to ida. This can be done using Chord-like joining algorithms,
which return an ID’s predecessor and successor. In steady-state, the
set of nodes forms a ring, with each ID having a source-route to its
successor and predecessor IDs. The same is true for newly arrived
routers, except that they do their own path establishment (routing
through one of their physically connected next-hop routers).
Caching: Whenever a source route is established, the routers along
the path can cache the route (keeping track of the entire path).
Thus, in steady-state each router has a set of pointers to various
IDs, some emanating from their own resident IDs to successor and
predecessor IDs, and others being cached from source routes pass-
ing through it. The pointer-cache of routers is limited in size, and
precedence is given to pointers in the former class.
Routing: Routing is greedy; a packet destined for an ID is sent in
the direction of the pointer that is closest, but not past, the destina-
tion ID. This is guaranteed to work in steady state because in the
worst case it can always walk along the series of successor pointers.
Recovering: In the case of a router failure, the neighboring routers
inspect all their cached pointers and send tear-down messages along
any path containing the failed router. In the case of host failure (or,
as we will call it, ID failure), the router sends tear-down messages
to each of the ID’s successors and predecessors. When a tear-down
message reaches a hosting router, it rejoins the relevant ID so it can
ﬁnd its current successor/predecessor. To increase resilience to ID
failure, nodes can hold multiple successors (i.e., the successor and
its successor), and we will call these successor-groups.
Finally, certain sequences of failure events could cause the suc-
cessor ring to partition into multiple pieces, even if the underly-
ing network is connected. To prevent this, routers continuously dis-
tribute routes to a small set of stable identiﬁers. Routers locally
perform a correctness check based on the contents of this set, then
execute a partition-repair protocol that ensures network state con-
verges correctly into a single ring. This ensures that if a path exists
between hosts a and b, ROFL will ensure a and b can reach each
other.
Ephemeral hosts: Ephemeral hosts cannot serve as successor or
predecessor to other IDs; they merely establish a path between
themselves and their predecessor, which keeps a source-route to the
ephemeral hosts; when other nodes route to this ephemeral ID, the
packet will travel to the predecessor router, and then be forwarded
to the host. Ephemeral hosts (or, rather, their hosting router) can set
up these backpointers at other routers for more efﬁcient routing, but
state at the predecessor is necessary.
2.3 Interdomain
Our inter-domain design is similar in spirit to our intra-domain
design, but it must be modiﬁed to abide by AS-level policies.
ROFL’s interdomain design leverages the fact (see [35, 36]) that
most current policies can be modeled as arising out of a simple
hierarchical AS graph. For supporting such policies, we extend
Canon [17] which, when translated from its original DHT context
to our interdomain one, only supports standard customer-provider
relationships as they would arise in a tree graph (namely, every AS
has a single provider). Our extensions to Canon (for our context)
allow ROFL to support most of today’s Internet policies — such
as customer-provider, multihoming, peering (direct/indirect) — but
not all policies implemented today using BGP.
In our design, each AS X runs its
Constructing a global ring:
own ROFL-ring (RR), RRX, as speciﬁed by our intra-domain de-
sign. In order to ensure that hosts within its RR are reachable from
other domains, RRX needs to be merged with the RRs of other do-
mains. This is done in three phases. First, AS X discovers its up-
hierarchy graph GX, which consists of all ASes “above” X in the
AS hierarchy (X’s providers, its providers’ providers, and so on).
Edges in GX correspond to X’s view of the customer-provider,
multihoming, and peering relationships in X’s up-hierarchy. GX
does not need to be complete: providers of AS X may choose not
to reveal certain links to X, or X may decide to prune GX to re-
duce its join and maintenance overhead (which is roughly linear in
the number of edges in this graph).
Next, X performs a Canon-style [17] recursive merging protocol
(Section 4.1) that constructs additional successors to RRs in other
ASes. This is done by merging X’s RR with all the RRs in the
domains at or below X in the AS graph. This is done in a manner
that respects certain interdomain policies. Moreover, the merging
process provides a useful isolation property: when a host in domain
X sends a packet to a host in domain Y , the data path is guaranteed
to stay within the subtree rooted at the earliest common ancestor of
these two domains. As a corollary, trafﬁc internal to an AS stays
internal.
In addition to using successor pointers, our inter-domain design
also uses proximity-based routing tables to reduce stretch. These
are routing tables that allow fast progress in the ID-space, and are
similar to Pastry routing tables: the main difference is that a routing
table entry for an ID in AS X points to the node with the appro-
priate preﬁx which resides in the lower-most level of the hierarchy
(relative to X). This ensures that following routing tables does not
violate the isolation property.
Joining: Whenever a host with ida comes up in AS X, and wishes
to be globally reachable, its hosting router is responsible for ﬁnding
a successor and predecessor at each level of the GX sub-hierarchy.