PL/pgSQL code as part of the trigger body. The user-supplied function is declared with no arguments and has a
return type of trigger.
PostgreSQL DML Triggers
1. PostgreSQL triggers can run BEFORE or AFTER a DML operation.
a. Fire before the operation is attempted on a row.
i. Before constraints are checked and the , , or is attempted.
INSERT UPDATE DELETE
ii. If the trigger fires before or instead of the event, the trigger can skip the operation for
the current row or change the row being inserted (for and operations
INSERT UPDATE
only).
b. After the operation was completed, after constraints are checked and the ,
INSERT, UPDATE
or command completed.
DELETE
i. If the trigger fires after the event, all changes, including the effects of other triggers, are
"visible" to the trigger.
2. PostgreSQL triggers can run INSTEAD OF a DML command when created on views.
3. PostgreSQL triggers can run FOR EACH ROW affected by the DML statement or FOR EACH STATEMENT
running only once as part of a DML statement.
When Fired Database Event Row-Level Trigger Statement-Level Trigger
(FOR EACH ROW) (FOR EACH STATEMENT)
BEFORE INSERT, UPDATE, Tables and foreign tables Tables, views, and foreign tables
DELETE
TRUNCATE — Tables
AFTER INSERT, UPDATE, Tables and foreign tables Tables, views, and foreign tables
DELETE
TRUNCATE — Tables
INSTEAD OF INSERT, UPDATE, Views —
DELETE
TRUNCATE — —
190
PostgreSQL Event Triggers
An event trigger executes when a specific event that is associated with the trigger occurs in the database.
Supported events include: and
ddl_command_start, ddl_command_end, table_rewrite
.
sql_drop
1. - occurs before the execution of a
ddl_command_start CREATE, ALTER, DROP, SECURITY
or command.
LABEL, COMMENT, GRANT, REVOKE SELECT INTO
2. – occurs after the command completed and before the transaction commits.
ddl_command_end
3. – fired only for the DDL command. Fires before trigger fire.
sql_drop DROP ddl_command_end
Full list of supported PostgreSQL event trigger types:
https://www.postgresql.org/docs/9.6/static/event-trigger-matrix.html
Example
Create a DML trigger:
1. In order to create an equivalent version of the Oracle DML trigger in PostgreSQL, first create a function
trigger which will store the execution logic for the trigger:
psql=> CREATE OR REPLACE FUNCTION PROJECTS_SET_NULL()
RETURNS TRIGGER
AS $$
BEGIN
IF TG_OP = 'UPDATE' AND OLD.PROJECTNO != NEW.PROJECTNO OR
TG_OP = 'DELETE' THEN
UPDATE EMP
SET PROJECTNO = NULL
WHERE EMP.PROJECTNO = OLD.PROJECTNO;
END IF;
IF TG_OP = 'UPDATE' THEN RETURN NULL;
ELSIF TG_OP = 'DELETE' THEN RETURN NULL;
END IF;
END; $$
LANGUAGE PLPGSQL;
CREATE FUNCTION
2. Create the trigger itself:
psql=> CREATE TRIGGER TRG_PROJECTS_SET_NULL
AFTER UPDATE OF PROJECTNO OR DELETE
ON PROJECTS
FOR EACH ROW
EXECUTE PROCEDURE PROJECTS_SET_NULL();
CREATE TRIGGER
191
3. Test the trigger by deleting a row from the table:
PROJECTS
psql=> DELETE FROM PROJECTS WHERE PROJECTNO=123;
psql=> SELECT PROJECTNO FROM EMP WHERE PROJECTNO=123;
projectno
-----------
(0 rows)
Example
Create a DDL trigger:
1. In order to create an equivalent version of the Oracle DDL System/Schema level triggers, such as a trigger
that prevent running a DDL on objects in the schema: first create an event trigger function.
DROP HR
Note that trigger functions are created with no arguments and must have a return type of or
TRIGGER
:
EVENT_TRIGGER
psql=> CREATE OR REPLACE FUNCTION ABORT_DROP_COMMAND()
RETURNS EVENT_TRIGGER
AS $$
BEGIN
RAISE EXCEPTION 'The % Command is Disabled', tg_tag;
END; $$
LANGUAGE PLPGSQL;
CREATE FUNCTION
2. Create the event trigger, which will fire before the start of a DDL command:
DROP
psql=> CREATE EVENT TRIGGER trg_abort_drop_command
ON DDL_COMMAND_START
WHEN TAG IN ('DROP TABLE', 'DROP VIEW', 'DROP FUNCTION', 'DROP
SEQUENCE', 'DROP MATERIALIZED VIEW', 'DROP TYPE')
EXECUTE PROCEDURE abort_drop_command();
3. Test the trigger by attempting to drop the table:
EMPLOYEES
psql=> DROP TABLE EMPLOYEES;
ERROR: The DROP TABLE Command is Disabled
CONTEXT: PL/pgSQL function abort_drop_command() line 3 at RAISE
For additional details:
https://www.postgresql.org/docs/9.6/static/plpgsql-trigger.html
192
Oracle vs. PostgreSQL Triggers Comparison
Oracle PostgreSQL
“Before update” trigger, CREATE OR REPLACE TRIGGER CREATE TRIGGER check_update
row level check_update BEFORE UPDATE ON
BEFORE UPDATE ON projects employees
FOR EACH ROW FOR EACH ROW
BEGIN EXECUTE PROCEDURE
/*Trigger body*/ myproc();
END;
/
“Before update” trigger, CREATE OR REPLACE TRIGGER CREATE TRIGGER check_update
statement level check_update BEFORE UPDATE ON
BEFORE UPDATE ON projects employees
BEGIN FOR EACH STATEMENT
/*Trigger body*/ EXECUTE PROCEDURE
END; myproc();
/
System / event trigger CREATE OR REPLACE TRIGGER CREATE EVENT TRIGGER
drop_trigger trg_drops
BEFORE DROP ON hr.SCHEMA ON ddl_command_start
BEGIN EXECUTE PROCEDURE
RAISE_APPLICATION_ERROR ( trg_drops();
num => -20000,
msg => 'Cannot drop
object');
END;
/
Referencing :old and :new Use ":NEW" and ":OLD" in trigger body: Use ". NEW" and " .OLD" in trigger
values in triggers Procedure body:
CREATE OR REPLACE TRIGGER
UpperNewDeleteOld CREATE OR REPLACE FUNCTION
BEFORE INSERT OR UPDATE OF log_ emp_name_upd()
first_name ON employees RETURNS trigger
FOR EACH ROW LANGUAGE plpgsql
BEGIN AS $$
:NEW.first_name := BEGIN
UPPER(:NEW.first_name); IF NEW.last_name <>
OLD.last_name THEN
:NEW.salary := :OLD.salary; INSERT INTO
END; employee_audit
/ (employee_id,last_name,chan
ged_on)
VALUES(OLD.id,OLD.last_name
,now());
END IF;
RETURN NEW;
END;
$$
CREATE TRIGGER
last_name_change_trg
BEFORE UPDATE
ON employees
FOR EACH ROW
EXECUTE PROCEDURE
log_last_emp_name_upd();
Database event N/A
CREATE TRIGGER
level trigger
register_shutdown
ON DATABASE
SHUTDOWN
BEGIN
Insert into logging values
(‘DB was
193
Oracle PostgreSQL
shutdown’, sysdate);
commit;
END;
/
Drop a trigger DROP TRIGGER DROP TRIGGER
last_name_change_trg last_name_change_trg
; on employees;
Modify logic executed by a Can be used with create or replace Use CREATE OR REPLACE on the
called function in the trigger (trigger stay
trigger
CREATE OR REPLACE TRIGGER the same)
UpperNewDeleteOld
BEFORE INSERT OR UPDATE OF CREATE or replace FUNCTION
first_name ON employees UpperNewDeleteOld() RETURNS
FOR EACH ROW trigger AS
BEGIN $UpperNewDeleteOld$
> BEGIN
END; >
/ END;
$UpperNewDeleteOld$
LANGUAGE plpgsql;
Enable a trigger ALTER TRIGGER alter table employees
UpperNewDeleteOld ENABLE; enable trigger
UpperNewDeleteOld;
Disable a trigger ALTER TRIGGER alter table employees
UpperNewDeleteOld DISABLE; disable trigger
UpperNewDeleteOld;
194
Migrating from: Oracle Views
[Back to TOC]
Overview
Database Views store a named SQL query in the Oracle Data Dictionary with a predefined structure. A view
does not store actual data and may be considered as a “virtual table” or a “logical table” and is based on the
data from one or more “physical” database tables.
Oracle view main privileges as a prerequisite for Creation
• A user must have the privilege to create a view in their own schema.
CREATE VIEW
• A user must have the privilege to create a view in any schema.
CREATE ANY VIEW
• The owner of a view must have all the necessary privileges on the source tables or views on which the
view is based ( or DML privileges).
SELECT
Oracle views CREATE (OR REPLACE) statements
• to create a new view.
CREATE VIEW
• to overwrite an existing view and change the view definition without having
CREATE OR REPLACE
to manually drop and re-create the original view and without deleting the previously granted
privileges.
Example:
CREATE VIEW "HR"."EMP_DETAILS_VIEW"…
CREATE OR REPLACE VIEW "HR"."EMP_DETAILS_VIEW"…
Oracle common view parameters
Oracle View Parameter Description PostgreSQL
Compatible
Re-create an existing view (if one exists) or create a new
CREATE OR
Yes
REPLACE view.
Create the view regardless the existence of the source tables
FORCE
No
or views and regardless to view privileges.
Specify if a column based on the view will be visible or No
VISIBLE |
INVISIBLE invisible.
Disable DML commands.
WITH READ ONLY No
Specifies the level of enforcement when performing DML
WITH CHECK
Yes
OPTION commands on the view
195
Running DML Commands On views
Views are classified as follows:
• Simple View
A view having a single source table with no aggregate functions.
DML operations can be performed on simple views and affect the base table(s).
Example: Simple view + update operation
SQL> CREATE OR REPLACE VIEW VW_EMP
AS
SELECT EMPLOYEE_ID, LAST_NAME, EMAIL, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID BETWEEN 100 AND 130;
UPDATE VW_EMP
SET EMAIL=EMAIL||'.org'
WHERE EMPLOYEE_ID=110;
1 rows updated.
• Complex View
A view with several source tables or views containing joins, aggregate (group) functions, or an order
by clause. Performing DML operations on complex views cannot be done directly, but
INSTEAD OF
triggers can be used as a workaround.
Example: Complex view + update operation
SQL> CREATE OR REPLACE VIEW VW_DEP
AS
SELECT B.DEPARTMENT_NAME, COUNT(A.EMPLOYEE_ID) AS CNT
FROM EMPLOYEES A JOIN DEPARTMENTS B USING(DEPARTMENT_ID)
GROUP BY B.DEPARTMENT_NAME;
UPDATE VW_DEP
SET CNT=CNT +1
WHERE DEPARTMENT_NAME=90;
ORA-01732: data manipulation operation not legal on this view
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_8004.htm#SQLRF01504
https://docs.oracle.com/database/121/SQLRF/statements_8004.htm
196
Migration to: PostgreSQL Views
[Back to TOC]
Overview
PostgreSQL views share functionality with Oracle views. Creating a view defines a stored query based on one
or more physical database tables which executes every time the view is accessed.
PostgreSQL View Synopsis
CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] [ RECURSIVE ] VIEW name [ (
column_name [, ...] ) ]
[ WITH ( view_option_name [= view_option_value] [, ... ] ) ]
AS query
[ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
PostgreSQL View Privileges
A Role or user must be granted and DML privileges on the bases tables or views in order to create a
SELECT
view.
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-grant.html
PostgreSQL View Parameters
•
CREATE [OR REPLACE] VIEW
Similar to the Oracle syntax. Note that when re-creating an existing view, the new view must have the
same column structure as generated by the original view (column names, column order and data
types). As such, it is sometimes preferable to drop the view and use the statement
CREATE VIEW
instead.
hr=# CREATE [OR REPLACE] VIEW VW_NAME AS
SELECT COLUMNS
FROM TABLE(s)
[WHERE CONDITIONS];
hr=# DROP VIEW [IF EXISTS] VW_NAME;
* The IF EXISTS parameter is optional
197
•
WITH [ CASCADED | LOCAL ] CHECK OPTION
DML and operations are verified against the view based tables to ensure that new
INSERT UPDATE
rows satisfy the original structure conditions or the view-defining condition. If a conflict is detected,
the DML operation fails.
CHECK OPTION
LOCAL - Verifies against the view without a hierarchical check.
o
CASCADED - Verifies all underlying base views using a hierarchical check.
o
• Executing DML Commands On views
PostgreSQL simple views are automatically updatable. Unlike Oracle views, no restrictions exist when
performing DML operations against views. An updatable view may contain a combination of
updatable and non-updatable columns. A column is updatable if it references an updatable column of
the underlying base table. If not, the column is read-only and an error is raised if an or
INSERT
statement is attempted on the column.
UPDATE
Example 1
Creating and updating a view without the parameter:
CHECK OPTION
hr=# CREATE OR REPLACE VIEW VW_DEP AS
SELECT DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID
FROM DEPARTMENTS
WHERE LOCATION_ID=1700;
view VW_DEP created.
hr=# UPDATE VW_DEP
SET LOCATION_ID=1600;
21 rows updated.
Example 2
Creating and updating a view with the parameter:
LOCAL CHECK OPTION
hr=# CREATE OR REPLACE VIEW VW_DEP AS
SELECT DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID
FROM DEPARTMENTS
WHERE LOCATION_ID=1700
WITH LOCAL CHECK OPTION;
view VW_DEP created.
hr=# UPDATE VW_DEP
SET LOCATION_ID=1600;
SQL Error: ERROR: new row violates check option for view "vw dep"
For additional details:
https://www.postgresql.org/docs/9.6/static/tutorial-views.html
https://www.postgresql.org/docs/9.6/static/sql-createview.html
198
Migrating from: Oracle Sequences
[Back to TOC]
Overview
Sequences are database objects that serve as a unique identity value generators, such as for automatically
generating primary key values. Oracle treats sequences as independent objects and the same sequence can
generate values for multiple tables.
Sequences can be configured with multiple parameters which control their value-generating behavior. For
example, the sequence parameter defines the interval between each generated sequence
INCREMENT BY
value. If more than one database user is generating incremented values from the same sequence, each user
may encounter gaps in the generated values that are visible to them.
Oracle Sequence Options
By default, the initial and increment values for a sequence are both 1, with no upper limit.
•
INCREMENT BY
Controls the sequence interval value of the increment or decrement (if a negative value is specified). If
the parameter is not specified during sequence creation, the value is set to 1. The
INCREMENT BY
increment cannot be assigned a value of 0.
•
START WITH
Defines the initial value of a sequence. The default value is 1.
•
MAXVALUE | NOMAXVALUE
Allows controlling the maximum limit for values generated by a sequence. Must be equal or greater
than the parameter and must be greater in value than the parameter. The
START WITH MINVALUE
default for is 1027 for an ascending sequence.
NOMAXVALUE
•
MINVALUE | NOMINVALUE
Allows controlling the minimum limit for values generated by a sequence. Must be less than or equal
to the parameter and must be less than the parameter. The default for
START WITH MAXVALUE
is -1026 for a descending sequence.
NOMINVALUE
•
CYCLE | NOCYCLE
Instructs a sequence to continue generating values despite reaching the maximum value or the
minimum value. If the sequence reaches one of the defined ascending limits, it generates a new value
according to the minimum value. If it reaches a descending limit, it generates a new value according to
the maximum value. is the default.
NOCYCLE
199
•
CACHE | NOCACHE
The parameter enables controlling the number of sequence values to keep cached in memory
CACHE
for improved performance. has a minimum value of “2”.
CACHE
Using the parameter will cause a sequence not to cache any values in memory. Specifying