# sakuraのAFL源码全注释（一）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## afl-gcc小叙
###  核心函数
####  find_as
这个函数用来寻找`afl-as`的位置。
  * 它首先检查是否存在AFL_PATH这个环境变量，如果存在就赋值给afl_path，然后检查`afl_path/as`这个文件是否可以访问，如果可以访问，就将afl_path设置为as_path。
  * 如果不存在AFL_PATH这个环境变量，则检查argv0，例如（”/Users/sakura/gitsource/AFL/cmake-build-debug/afl-gcc”）中是否存在’/‘，如果有就找到最后一个’/‘所在的位置，并取其前面的字符串作为dir，然后检查`dir/afl-as`这个文件是否可以访问，如果可以访问，就将dir设置为as_path
  * 如果上述两种方式都失败，则抛出异常。
####  edit_params
这个函数主要是将argv拷贝到`u8 **cc_params`中，并做必要的编辑。
  * 它首先通过ck_alloc来为cc_params分配内存，分配的长度为`(argc+128)*8`，相当大的内存了。
  * 然后检查argv[0]里有没有’/‘，如果没有就赋值’argv[0]’到name，如果有就找到最后一个’/‘所在的位置，然后跳过这个’/‘，将后面的字符串赋值给name。
  * 将name和`afl-clang`比较 
    * 如果相同，则设置clang_mode为1，然后设置环境变量CLANG_ENV_VAR为1。 
      * 然后将name和`afl-clang++`比较 
        * 如果相同，则获取环境变量`AFL_CXX`的值，如果该值存在，则将cc_params[0]设置为该值，如果不存在，就设置为clang++
        * 如果不相同，则获取环境变量`AFL_CC`的值，如果该值存在，则将cc_params[0]设置为该值，如果不存在，就设置为clang
    * 如果不相同，则将name和`afl-g++`比较 
      * 如果相同，则获取环境变量`AFL_CXX`的值，如果该值存在，则将cc_params[0]设置为该值，如果不存在，就设置为g++
      * 如果不相同，则获取环境变量`AFL_CC`的值，如果该值存在，则将cc_params[0]设置为该值，如果不存在，就设置为gcc
  * 然后遍历从argv[1]开始的argv参数 
    * 跳过`-B/integrated-as/-pipe`
    * 如果存在`-fsanitize=address`或者`-fsanitize=memory`，就设置asan_set为1;
    * 如果存在`FORTIFY_SOURCE`，则设置fortify_set为1
    * `cc_params[cc_par_cnt++] = cur`;
  * 然后开始设置其他的cc_params参数 
    * 取之前计算出来的`as_path`，然后设置`-B as_path`
    * 如果是clang_mode,则设置`-no-integrated-as`
    * 如果存在AFL_HARDEN环境变量，则设置`-fstack-protector-all`
    * sanitizer 
      * 如果asan_set在上面被设置为1，则使`AFL_USE_ASAN`环境变量为1
      * 如果存在AFL_USE_ASAN环境变量，则设置`-fsanitize=address`
      * 如果存在AFL_USE_MSAN环境变量，则设置`-fsanitize=memory`，但不能同时还指定`AFL_HARDEN`或者`AFL_USE_ASAN`，因为这样运行时速度过慢。
    * 如果不存在AFL_DONT_OPTIMIZE环境变量，则设置`-g -O3 -funroll-loops -D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1`
    * 如果存在AFL_NO_BUILTIN环境变量，则设置`-fno-builtin-strcmp`等
  * 最后`cc_params[cc_par_cnt] = NULL;`终止对cc_params的编辑
####  main函数
实际上看到这里，我们就知道afl-gcc就是找到as所在的位置，将其加入搜索路径，然后设置必要的gcc参数和一些宏，然后调用gcc进行实际的编译，仅仅只是一层wrapper
    /* Main entry point */
    int main(int argc, char **argv) {
        if (isatty(2) && !getenv("AFL_QUIET")) {
            SAYF(cCYA "afl-cc " cBRI VERSION cRST " by \n");
        } else be_quiet = 1;
        if (argc 
            arg0: gcc
            arg1: ../test-instr.c
            arg2: -o
            arg3: test
            arg4: -B
            arg5: .
            arg6: -g
            arg7: -O3
## afl-as小叙
###  核心函数
####  edit_params
检查并修改参数以传递给`as`。请注意，文件名始终是GCC传递的最后一个参数，因此我们利用这个特性使代码保持简单。  
 **主要是设置变量as_params的值，以及use_64bit/modified_file的值。**
  * 首先为as_params分配空间，大小为`(argc+32)*8`
  * `u8 *tmp_dir`
    * 依次检查是否存在TMPDIR/TEMP/TMP环境变量，如果存在就设置，如果都不存在就设置tmp_dir为”/tmp”
  * `u8 *afl_as`
    * 读取AFL_AS环境变量，如果存在就设置为afl_as的值
    * 因为apple的一些原因，所以如果我们定义了`__APPLE__`宏，且当前是在clang_mode且没有设置AFL_AS环境变量，就设置use_clang_as为1，并设置afl_as为AFL_CC/AFL_CXX/clang中的一种。
  * 如果afl_as不为空，就设置`as_params[0]`为`afl_as`，否则设置为`as`
  * 设置`as_params[argc]`为0,as_par_cnt初始值为1。
  * 然后遍历从argv[1]开始,到`argv[argc-1]`(也就是最后一个参数)之前的argv参数 
    * 如果存在`--64`，设置use_64bit为1，如果存在`--32`，设置use_64bit为0;如果是apple,则如果存在`-arch x86_64`,设置use_64bit为1,并跳过`-q`和`-Q`选项
    * `as_params[as_par_cnt++] = argv[i]`;设置as_params的值为argv对应的参数值
  * 然后开始设置其他的as_params参数 
    * 如果use_clang_as为1，则设置`-c -x assembler`选项
    * 读取`argv[argc - 1]`的值,赋给input_file的值,也就是传递的最后一个参数的值作为input_file
    * 比较input_file和tmp_dir/`/var/tmp/`/`/tmp/`的前strlen(tmp_dir)/9/5个字节是否相同，如果不相同，就设置pass_thru为1
    * 设置modified_file的值为`alloc_printf("%s/.afl-%u-%u.s", tmp_dir, getpid(),(u32) time(NULL));`,简单的说就是`tmp_dir/.afl-pid-time.s`这样的字符串。
    * 设置`as_params[as_par_cnt++] = modified_file`
    * `as_params[as_par_cnt] = NULL;`
####  add_instrumentation
处理输入文件，生成modified_file，将instrumentation插入所有适当的位置。
  * 如果input_file不为空，则尝试打开这个文件，如果打开失败就抛出异常，如果为空，则读取标准输入，最终获取FILE* 指针inf
  * 然后打开modified_file对应的临时文件，并获取其句柄outfd，再根据句柄通过fdopen函数拿到FILE*指针outf
  * 通过fgets从inf中逐行读取内容保存到line数组里，每行最多读取的字节数是MAX_LINE(8192),这个值包括’\0’,所以实际读取的有内容的字节数是MAX_LINE-1个字节。从line数组里将读取的内容写入到outf对应的文件里。
**接下来是真正有趣的部分，首先我们要确定的是，我们只在.text部分进行插桩，但因为这部分涉及到多平台以及优化后的汇编文件格式，这里我只会描述最核心的逻辑**
核心逻辑如下,我抽取了最重要的代码出来。
                 ^func:      - function entry point (always instrumented)
                 ^.L0:       - GCC branch label
                 ^.LBB0_0:   - clang branch label (but only in clang mode)
                 ^\tjnz foo  - conditional branches
               ...but not:
                 ^# BB#0:    - clang comments
                 ^ # BB#0:   - ditto
                 ^.Ltmp0:    - clang non-branch labels
                 ^.LC0       - GCC non-branch labels
                 ^.LBB0_0:   - ditto (when in GCC mode)
                 ^\tjmp foo  - non-conditional jumps
    while (fgets(line, MAX_LINE, inf)) {
        if(instr_ok && instrument_next && line[0] == '\t' && isalpha(line[1])){
            fprintf(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,
                        R(MAP_SIZE));
            instrument_next = 0;
            ins_lines++;
        }
        ...
        if (line[0] == '\t' && line[1] == '.') {
            if (!strncmp(line + 2, "text\n", 5) ||
                !strncmp(line + 2, "section\t.text", 13) ||
                !strncmp(line + 2, "section\t__TEXT,__text", 21) ||
                !strncmp(line + 2, "section __TEXT,__text", 21)) {
                instr_ok = 1;
                continue;
            }
            if (!strncmp(line + 2, "section\t", 8) ||
                !strncmp(line + 2, "section ", 8) ||
                !strncmp(line + 2, "bss\n", 4) ||
                !strncmp(line + 2, "data\n", 5)) {
                instr_ok = 0;
                continue;
            }
        }
        ...
        if (line[0] == '\t') {