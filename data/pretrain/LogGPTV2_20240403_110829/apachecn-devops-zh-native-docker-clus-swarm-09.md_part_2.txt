```
然后，我们将该映像标记为新映像，并在启用 Docker 内容信任的同时推送该映像:
```
$ docker tag busybox chanwit/busybox:signed
$ docker push chanwit/busybox:signed
```
如果设置正确完成，我们将看到 Docker 客户端要求新的根密钥和新的存储库密钥。然后确认`chanwit/busybox:signed`签署成功。
```
The push refers to a repository [docker.io/chanwit/busybox]
e88b3f82283b: Layer already exists
signed: digest: 
sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912 size: 527
Signing and pushing trust metadata
You are about to create a new root signing key passphrase. This passphrase
will be used to protect the most sensitive key in your signing system. Please
choose a long, complex passphrase and be careful to keep the password and the
key file itself secure and backed up. It is highly recommended that you use a
password manager to generate the passphrase and keep it safe. There will be no
way to recover this key. You can find the key in your config directory.
Enter passphrase for new root key with ID 1bec0c1:
Repeat passphrase for new root key with ID 1bec0c1:
Enter passphrase for new repository key with ID ee73739 (docker.io/chanwit/busybox):
Repeat passphrase for new repository key with ID ee73739 (docker.io/chanwit/busybox):
Finished initializing "docker.io/chanwit/busybox"
Successfully signed "docker.io/chanwit/busybox":signed
```
现在，我们可以试着画出同样的映像:
```
$ docker pull chanwit/busybox:signed
Pull (1 of 1): chanwit/busybox:signed@sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912
sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912: Pulling from chanwit/busybox
Digest: sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912
Status: Image is up to date for chanwit/busybox@sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912
Tagging chanwit/busybox@sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912 as chanwit/busybox:signed
```
当我们提取一个未签名的映像时，这一次它将显示没有可信数据:
```
$ docker pull busybox:latest
Error: remote trust data does not exist for docker.io/library/busybox: 127.0.0.1:4443 does not have trust data for docker.io/library/busybox
```
# 介绍 Docker 的机密
Docker 1.13 在 Swarm 中包含了机密管理的新概念。
众所周知，我们需要 Swarm 模式来使用机密。当我们初始化 Swarm 时，Swarm 会为我们生成一些机密:
```
$ docker swarm init
```
Docker 1.13 为机密管理增加了一个新的命令 secret，目的是有效地处理它们。创建机密子命令来检查和维护。
让我们创造我们的第一个机密。`secret create`子命令从标准输入中获取一个机密。所以我们需要输入我们的机密，然后按 *Ctrl* + *D* 保存内容。注意不要按*进入*键。我们只需要`1234`而不需要`1234\n`作为我们的密码，例如:
```
$ docker secret create password
1234
```
然后按 *Ctrl* + *D* 两次关闭标准输入。
我们可以检查是否有一个名为密码的机密:
```
$ docker secret ls 
ID                      NAME                CREATED             UPDATED
16blafexuvrv2hgznrjitj93s  password  25 seconds ago      25 seconds ago 
uxep4enknneoevvqatstouec2  test-pass 18 minutes ago      18 minutes ago
```
这是如何工作的？当我们创建新服务时，可以通过传递 secret 选项将 secret 的内容绑定到服务。机密将是`/run/secrets/`目录中的一个文件。在我们的例子中，我们将有包含弦`1234`的`/run/secrets/password`。
机密旨在取代环境变量的滥用。例如，在 MySQL 或 MariaDB 容器的情况下，其根密码应该设置为机密，而不是通过环境变量以明文形式传递。
我们将展示一个小黑客，让 MariaDB 支持新的 Swarm 机密，从以下`entrypoint.sh`开始:
```
$ wget https://raw.githubusercontent.com/docker-
library/mariadb/2538af1bad7f05ac2c23dc6eb35e8cba6356fc43/10.1/docker-entrypoint.sh
```
在`MYSQL_ROOT_PASSWORD`检查之前，我们将这一行放入这个脚本中，大约在第 56 行。
```
# check secret file. if exist, override
 if [ -f "/run/secrets/mysql-root-password" ]; then
 MYSQL_ROOT_PASSWORD=$(cat /run/secrets/mysql-root-password)
 fi
```
该代码检查是否存在`/run/secrets/mysql-root-password`。如果是这样，它会将机密分配给环境变量`MYSQL_ROOT_PASSWORD`。
之后，我们可以准备一个 Dockerfile 来覆盖 MariaDB 的默认设置`docker-entrypoint.sh`。
```
FROM mariadb:10.1.19
RUN  unlink /docker-entrypoint.sh
COPY docker-entrypoint.sh /usr/local/bin/
RUN  chmod +x /usr/local/bin/docker-entrypoint.sh
RUN  ln -s usr/local/bin/docker-entrypoint.sh /
```
然后我们建立新的形象。
```
$ docker build -t chanwit/mariadb:10.1.19 .
```
回想一下，我们有一个名为密码的机密，我们有一个映像，它允许我们从机密文件`/run/secrets/mysql-root-password`中设置根密码。因此，映像在`/run/secrets`下需要一个不同的文件名。有了这个，我们可以使用带有完整选项的机密(`source=password`、`target=mysql-root-password`)来使 Swarm 服务工作。例如，我们现在可以从这个马里亚数据库映像开始一个新的`mysql` Swarm 服务:
```
$ docker network create -d overlay dbnet
lsc7prijmvg7sj6412b1jnsot
$ docker service create --name mysql \
 --secret source=password,target=mysql-root-password \
 --network dbnet \
 chanwit/mariadb:10.1.19
```
为了查看我们的机密是否有效，我们可以在同一个覆盖网络上启动一个 PHPMyAdmin 实例。不要忘记通过将`-e PMA_HOST=mysql`传递给`myadmin`服务来将这些服务链接在一起。
```
$ docker service create --name myadmin \
 --network dbnet --publish 8080:80 \
 -e PMA_HOST=mysql \
 phpmyadmin/phpmyadmin
```
然后你可以打开你的浏览器进入`http://127.0.0.1:8080`并以 root 用户身份登录`PHPMyAdmin`，密码是`1234`，我们通过 Docker 机密提供的。
# 总结
在本章中，我们学习了保护群模式和 Docker 软件供应链。我们讨论了一些关于如何保护 Docker Swarm 集群在生产中使用的最佳实践。然后，我们进行公证，一个安全的交付机制，以允许 Docker 内容信任。本章最后概述了 Docker 1.13 中的一个新特性:机密管理。我们展示了如何使用 Docker Secret 安全地部署 MySQL MariaDB 服务器，而无需通过环境传递根密码。在下一章中，我们将了解如何在一些公共云提供商和 OpenStack 上部署 Swarm。