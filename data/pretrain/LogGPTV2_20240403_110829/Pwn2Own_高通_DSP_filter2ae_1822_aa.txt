# Pwn2Own 高通 DSP
|
##### 译文声明
本文是翻译文章，文章原作者 checkpoint，文章来源：research.checkpoint.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 简介
Snapdragon是由高通技术公司设计和销售的一套用于移动终端的系统芯片（SoC）半导体产品。单个SoC可能包括多个CPU内核、Adreno图形处理单元（GPU）、Snapdragon无线调制解调器、Hexagon数字信号处理器（DSP）、Qualcomm
Spectra图像信号处理器（ISP）和其他硬件。
Snapdragon产品层按CPU、GPU和DSP处理器的可扩展计算资源进行区分。最低级别的产品可能只包含一个Hexagon
DSP，而高级别的产品则包含多达四个Hexagon DSP处理器，专门用于特定的使用情况。例如，嵌入Pixel 4、三星S10、小米9、LG
G8和OnePlus 7等手机的骁龙855（SM8150）SoC包括一个Kryo CPU、一个Adreno
640和四个独立的DSP，每个都专门用于特定的应用空间：传感器（sDSP）、调制解调器（mDSP）、音频（aDSP）和计算（cDSP）。
在此博客中，我们研究了两种DSP：
  1. cDSP，旨在执行计算密集型任务，例如图像处理，计算机视觉，与神经网络相关的计算以及摄像机流。
  * aDSP，旨在用于音频和语音数据的低功耗处理。
就现在的研究而言，我们将cDSP和aDSP视为一个处理单元（DSP）。我们发现的安全性问题对两者都适用。
## CPU与DSP之间的通信
FastRPC是高通公司专有的远程程序调用（RPC）机制，用于实现CPU和DSP之间的远程功能调用。FastRPC框架是一种典型的代理模式。
【图片1：FastRPC流程】
图1中显示了FastRPC组件之间的交互：
  1. 用户模式进程（客户端）启动远程调用。例如，Android应用程序在其本地代码中调用其中一个存根函数。
  2. 存根是一个自动生成的代码，它将函数调用转换为RPC消息。一般来说，存根代码被编译为一个单独的本地库，然后与客户端链接。存根代码使用`libadsprpc.so`和`libcdsprpc.so`库，通过相关的ioctls调用应用处理器（AP）上的DSP RPC驱动程序（`/dev/adsprpc-smd`或`/dev/cdsprpc-smd`）。
  3. DSP RPC内核驱动接收远程消息调用，通过共享内存驱动（SMD）通道将排队的消息发送到DSP上的DSP RPC框架，然后等待响应。
  4. DSP RPC框架将消息从队列中移除，并将其分配给一个skeleton动态库进行处理。
  5. skel是一个自动生成的库，用于解组参数并调用目标方法的实现
  6. 目标方法（对象）是由高通公司或OEM提供的逻辑，旨在运行在DSP上。
  7. 
## 谁可以在DSP上运行自己的代码？
出于安全考虑，DSP被授权给OEM和数量有限的第三方软件供应商进行编程。在DSP上运行的代码是由高通公司签署的。普通的安卓应用没有权限在DSP上执行自己的代码。骁龙855和865
SoC是个例外，高通公司被允许在cDSP上执行低权限的无签名动态共享对象。
应该注意的是，谷歌通过SELinux策略防止第三方应用程序和`adb shell`访问DSP RPC驱动程序，对Pixel设备实施保护。
公开的Hexagon SDK负责将DSP对象的C/C++源代码编译成适用于DSP上执行的Hexagon（QDSP6）字节码。
存根和skel代码是根据开发人员准备的接口定义语言（IDL）模块自动生成的。高通公司IDL用于定义跨内存保护和处理器边界的接口。IDL只暴露了该对象的作用，但没有暴露它的位置或实现它的编程语言。
一个安卓应用开发者能够实现其自定义的DSP库，但不能完全执行。只有预先构建的DSP库可以被一个Android应用自由调用。
## 谁来管理 DSP?
QuRT是一个高通公司专有的多线程实时操作系统（RTOS），管理Hexagon
DSP。QuRT的完整性得到了高通公司安全可执行环境（QSEE）的信任。QuRT的可执行二进制文件（aDSP和cDSP是分开的）被签署并分割成几个文件，其方式与高通公司设备上任何其他受信任的应用程序相同。其默认位置是`/vendor/firmware`目录。
对于每个发起远程调用的安卓进程，QuRT在DSP上创建一个单独的进程。当用户进程被生成时，特殊的shell进程（`/vendor/dsp/fastrpc_shell_0`用于aDSP，`/vendor/dsp/fastrpc_shell_3`用于cDSP）被加载到DSP上。shell负责调用skeleton库和对象库。此外，它还实现了DSP的RPC框架，提供可能需要的skeleton和对象库的API。
DSP的软件架构提供了不同的保护域（PD）以确保内核软件的稳定性。在DSP中，有三个保护域:
  * 内核 – 可以访问所有PD的所有内存。
  * Guest OS – 可以访问自己PD的内存，用户PD的内存，以及一些系统寄存器。
  * 用户 – 只能访问它自己的PD的内存。
无签名的动态共享对象在无签名PD内运行，无签名PD是用户PD，其对底层DSP驱动和线程优先级的访问受到限制。无符号PD被设计成只支持一般的计算应用。
对象库以及FastRPC Shell在User PD中运行。
## 跳过FastRPC流程中的存根代码
libadsprpc.so和libcdsprpc.so库负责与DSP RPC驱动进行通信。这些库导出了两个对研究来说很有意思的函数。
  * `int remote_handle_open(const char* name, remote_handle *ph)`. 这个函数在AP上的调用者进程和DSP上一个新的FastRPC shell进程之间打开一个远程会话。这个会话用于与作为第一个参数的skeleton库的通信。
  * `int remote_handle_invoke(remote_handle h, uint32_t scalars, remote_arg *pra)`. 这个函数能够调用skeleton库的导出方法。一个会话处理程序应该作为第一个参数被指明。
【图片2：直接调用DSP】
让我们看一下该`remote_handle_invoke`函数的第二个和第三个参数，它们对目标方法及其参数进行了编码。
`scalars`是一个包含以下元数据信息的词:
  * 方法索引和属性（最高字节，0xFF000000掩码）。
  * 输入参数的数量（0x00FF0000掩码）。
  * 输出参数的数量（0x0000FF00掩码）。
  * 输入和输出句柄的数量（0x000000FF掩码，输入的四位和输出的四位）。在现代手机上，如果这个字节不等于零，则DSP调用失败。
`pra`是指向`remote_arg`目标方法的参数（条目）数组的指针。参数的顺序如下：输入参数，输出参数，输入句柄和输出句柄。
如图所示，每个输入和输出参数都被转换为一个通用的`remote_buf`条目。
应该注意的是，如果我们准备的`remote_arg`数组条目多于目标方法的要求，那么额外的参数就会被skeleton库忽略。
`scalars`和`pra`参数传送“原样”通过DSP RPC驱动程序和DSP
RPC框架，以及被用作在第一和特殊的第二参数`invoke`由每个skeleton库提供的功能。例如，`libfastcvadsp_skel.so`库提供了`fastcvadsp_skel_invoke`invoke函数。invoke函数仅负责按索引调用适当的skel方法。每个skel方法本身都会验证收到的远程参数，将其解组`remote_bufs`为常规类型，然后调用object方法。
如你所见，要从skel库中调用方法，只需要知道其索引并通过`remote_buf`结构包装每个参数即可。我们不必提供调用函数的名称，其参数的类型和数量来执行调用的事实，使得skeleton库成为非常方便的fuzz的目标。
## 降级漏洞
高通公司已经在Android手机上预先安装了许多skeleton库。它们中的绝大多数是专有的。但是，有一些开源示例，例如`libdspCV_skel.so`和`libhexagon_nn_skel.so`。
几乎可以在所有Android设备上找到许多skeleton库，例如`libfastcvadsp_skel.so`和`libscveBlobDescriptor_skel.so`。但是像`libVC1DecDsp_skel.so`和`libsysmon_cdsp_skel.so`这样的库仅在现代Snapdragon
SoC上提供。
有一些库是由OEM实现的，只在特定供应商的设备上使用。例如，`libedge_smooth_skel.so`可以在三星S7
Edge上找到，而`libdepthmap_skel.so`则在OnePlus 6T设备上。
一般来说，所有的skel库位于无论是在`/dsp`或`/vendor/dsp`或`/vendor/lib/rfsa/adsp`目录。默认情况下，该`remote_handle_open`函数将精确扫描这些路径。此外，还有一个环境变量`ADSP_LIBRARY_PATH`，可以在其中添加新的搜索路径。
如前所述，所有的DSP库都有签名，不能打补丁。然而，任何Android应用程序都可以在其资源中带来一个由高通公司签署的skeleton库，将其提取到应用程序的数据目录，将路径添加到`ADSP_LIBRARY_PATH`的开头，然后打开一个远程会话。因为库签名正确，所以库已成功加载到DSP上。
由于没有对加载skeleton库进行版本检查，因此有可能在DSP上运行一个非常老的具有已知1
day漏洞的skeleton库。即使更新的skeleton库已经存在于设备上，只要在原始文件的路径之前指出它在`ADSP_LIBRARY_PATH`中的位置，就有可能加载这个库的旧版本。通过这种方式，任何DSP补丁都可以被攻击者简单地绕过。此外，通过分析DSP软件补丁，攻击者可以发现一个库中的内部修复的漏洞，然后通过加载未打补丁的版本来利用它。
由于缺乏设备允许的批准/拒绝的skeleton库列表，有可能在任何其他设备（例如，索尼Xperia）上运行为一个设备准备的库（例如，三星）。这意味着，在某个OEM库中发现的漏洞会危及所有基于高通的安卓设备。
## 基于反馈的Hexagon库模糊测试