and minimize changes to the Firefox renderer source.
In the rest of the section we give an overview of the RLBox
framework and describe how RLBox addresses the pitfalls
of Section 3 while preserving these goals.
4.1 RLBox overview
RLBox makes data and control ﬂow at the renderer-sandbox
interface explicit through its type system and APIs in order
to mediate these ﬂows and enforce security checks across the
trust boundary.
RLBox mediates data ﬂow with tainted types that impose
a simple static information ﬂow control (IFC) discipline [42].
USENIX Association
29th USENIX Security Symposium    703
This ensures that sandbox data is validated before any
potentially unsafe use. It also prevents pointer leaks into the
sandbox that could break ASLR.
RLBox mediates control ﬂow through a combination of
tainted types and API design. Tainting, for example, allows
RLBox to prevent branching on tainted values that have
not been validated. API design, on the other hand, is used
to restrict control transfers between the renderer and sandbox.
For instance, the renderer must use sandbox_invoke() to
invoke functions in the sandbox; any callback into the
renderer by the sandbox must ﬁrst be registered by the
renderer using the sandbox_callback(callback_fn) API.
Mediating control and data ﬂow allows RLBox to:
(cid:73) Automate security checks: Swizzling operations, per-
forming checks that ensure sandbox-supplied pointers point
to sandbox memory, and identifying locations where tainted
data must be validated is done automatically.
(cid:73) Minimize renderer changes: tainted data validation is
enforced only when necessary. Thus, benign operations
such as adding or assigning tainted values, or writing to
tainted pointers (which are checked to ensure they point
into the sandbox at creation time) are allowed by RLBox’s
type system. This eliminates needless changes to the ren-
derer, while still ensuring safety.
(cid:73) Efﬁciently share data structures: Static checks ensure
that shared data is allocated in sandbox memory and ac-
cessed via tainted types. Data structures received by the
renderer sandbox are marshaled lazily; this allows code to
access a single ﬁeld in a shared struct without serializing
a big object graph. Finally, RLBox provides helper APIs to
mitigate double fetches [47, 62] when accessing this data.
(cid:73) Assist with code migration: Compile-time type and inter-
face errors (§5) guide the developer through the process
of migrating a library into a sandbox. Each compile error
points to the next required code change—e.g., data that
needs to be validated before use, or control transfer code
that needs to be changed to use RLBox APIs.
(cid:73) Bridge machine models: Sandboxing mechanisms can
have a different machine model from the application (e.g.,
both Native Client and WebAssembly use 32-bit pointers
and 32-bit longs regardless of the platform); by intercept-
ing all data and control ﬂow we can also automatically
translate between the application and sandbox machine
models—and for Wasm we do this (§9).
In the rest of this section, we discuss how tainting is used to
mediate data ﬂow (§4.2) and control ﬂow (§4.4). We then
describe how the renderer can validate and untaint data (§4.3).
We detail our implementation as a C++ library later (§6.1).
4.2 Data ﬂow safety
All data originating from a sandbox begins life tainted.
Tainting is automatically applied by wrapping data with
the tainted constructor. Tainting does not change the
memory layout of a value, only its type. Once applied,
though, tainting cannot be removed. The only way to remove
a taint is through explicit validation (§4.3).
In general, RLBox propagates taint following a standard
IFC discipline. For example, we propagate taint to any data
derived from tainted values such as data accessed through
a tainted pointer, or arithmetic operations when one or more
operands are tainted. We detail how RLBox implements
tainted types and taint tracking in the C++ type system in
Section 6.1. In the rest of this section we show how RLBox
uses tainting to ensure data ﬂow safety.
Data ﬂow into the renderer. To protect the renderer from
malicious inputs, all data ﬂows from the sandbox into the
renderer are tainted. Data primarily ﬂows out of the sandbox
through two interfaces. First, sandbox_invoke(), the only
way to call into the sandbox, taints its return value. Second,
the use of sandbox_callback(), which permits callbacks
into the renderer from the sandbox, statically forces the
parameters of callbacks to be tainted. Any code failing to
follow either of these rules would cause a compilation error.
As an example, consider the JPEG decoder code that calls
libjpeg’s jpeg_read_header() to parse headers shown below:
jpeg_decompress_struct mInfo;
int status = jpeg_read_header(&mInfo, TRUE);
With RLBox, the second line must be modiﬁed to use
sandbox_invoke(), and status must be declared as tainted6:
tainted status = sandbox_invoke(mRLBox,
(cid:44)→
jpeg_read_header, &mInfo, TRUE);
In addition to the invoke and callback interfaces, data can
ﬂow into the renderer via pointers to sandboxed memory.
RLBox, however, forces both these pointers and any data
derived from them (e.g., via pointer arithmetic or pointer
dereferencing) to be tainted—and, as we discuss shortly,
using tainted pointers in the renderer is always safe.
Data ﬂow into the sandbox. RLBox requires data ﬂowing
into sandbox from the renderer to either have a simple nu-
meric type or a tainted type. Untainted pointers, i.e., pointers
into renderer memory, are not permitted. This restriction
enforces a code correctness requirement—sandboxed code
only gets pointers it can access, i.e., pointers into sandbox
memory—and, moreover, preserves the renderer’s ASLR:
any accidental pointer leaks are eliminated by construction.
Compile-time errors are used to guide the code changes
necessary to use a sandboxed library. To demonstrate this,
we continue with the example of JPEG header parsing
shown above. To start, note that the TRUE parameter to
jpeg_read_header() can remain unchanged as it has a sim-
ple numeric type (in C++). On the other hand, the parameter
&mInfo points to a struct in renderer memory, which libjpeg
cannot access; RLBox thus raises a compile-time error.
6 In this paper, we use full type names such as tainted for
clarity. In practice, we use C++’s auto keyword to make code less verbose.
704    29th USENIX Security Symposium
USENIX Association
To address this compilation error, RLBox requires such
shared data structures to be allocated in sandbox memory
using sandbox_malloc():
tainted p_mInfo
(cid:44)→
= sandbox_malloc(mRLBox);
tainted status = sandbox_invoke(mRLBox,
(cid:44)→
jpeg_read_header, p_mInfo, TRUE);
Placing shared data structures in sandboxed memory in this
way simpliﬁes data marshaling of pointer parameters during
function calls—RLBox simply marshals pointers as numeric
types, it does not eagerly copy objects. Indeed, this design
allows RLBox to automatically generate the marshaling code
without any user annotations or pointer bounds information
(as required by most RPC-based sandboxing tools). More-
over, RLBox can do all of this without compromising the
renderer’s safety—renderer code can only access shared
sandbox memory via tainted pointers.
While RLBox does not allow passing untainted point-
ers into libjpeg, pointers to callback functions, such as
fill_input_buffer(), need to be shared with the sandbox—
these can be shared either as function call parameters to libjpeg
functions, return values from callbacks, or by directly writing
to sandbox memory. RLBox permits this without exposing the
raw callback pointers to libjpeg, through a level of indirection:
trampoline functions. Speciﬁcally, RLBox automatically
replaces each Firefox callback passed to libjpeg with a pointer
to a trampoline function and tracks the mapping between
the two. When the trampoline function is invoked, RLBox
invokes the appropriate Firefox callback on libjpeg’s behalf.
Beneﬁts of tainted pointers. By distinguishing pointers
to renderer memory from pointers to sandbox memory
at the type level with tainted, RLBox can automatically
enforce several important security requirements and checks.
First, RLBox does not permit Firefox to pass untainted
pointers to libjpeg. Second, RLBox automatically swizzles
and unswizzles pointers appropriately when pointers cross
the renderer-library boundary, including pointers in deeply
nested data structures. (We give a more detailed treatment
of pointer swizzling in Appendix A of [35].) Third, RLBox
automatically applies pointer-bounds sanitization checks
when tainted pointers are created to ensure they always
point to sandboxed memory. Together, these properties
ensure that we preserve the renderer’s ASLR—any accidental
pointer leaks are eliminated by construction—and that the
renderer cannot be compromised by unsanitized pointers—all
tainted pointers point to sandbox memory.
4.3 Data validation
RLBox disallows computations (e.g., branching) on tainted
data that could affect the renderer control and data ﬂow. The
Firefox renderer, however, sometimes needs to use data pro-
duced by library code. To this end, RLBox allows developers
to unwrap tainted values, i.e., convert a tainted to an
untainted T, using validation methods. A validation method
takes a closure (C++ lambda) that unwraps the tainted type
by performing necessary safety checks and returning the
untainted result. Unfortunately, it is still up to the user to get
these checks correct; RLBox just makes this task easier.
RLBox simpliﬁes the burden on the developer by
offering different types of validation functions. The ﬁrst,
verify(verify_fn), validates simple tainted value types
that have already been copied to renderer memory (e.g.,
simple values), as shown in this example:
tainted status = sandbox_invoke(mRLBox,
(cid:44)→
jpeg_read_header, p_mInfo, TRUE);
int untaintedStatus = status.verify([](int val){
if (val == JPEG_SUSPENDED ||
val == JPEG_HEADER_TABLES_ONLY ||
val == JPEG_HEADER_OK ) { return val; }
else { /* DIE! */ }
});
if (untaintedStatus == JPEG_SUSPENDED) { ... }
Not all tainted data lives in renderer memory, though.
Validating shared tainted data structures that
live in
sandbox memory is unsafe: a concurrent sandbox thread
can modify data after it’s checked and before it’s used. The
copyAndVerify(verify_fn, arg) validator addresses this by
copying its arguments into renderer memory before invoking
the verify_fn closure. To prevent subtle bugs where a
verify() function is accidentally applied to data in shared
memory, RLBox issues a compile-time error—notifying the
developer that copyAndVerify() is needed instead.
The unsafeUnverified() function removes tainting with-
out any checks. This obviously requires care, but has several
legitimate uses. For example, when migrating a codebase
to use sandboxing, using unsafeUnverified() allows us to
incrementally test our code before all validation closures
have been written (§5). Furthermore, unsafeUnverified() is
sometimes safe and necessary for performance—e.g., passing
a buffer of libjpeg-decoded pixel data to the Firefox renderer
without copying it out of sandbox memory. This is safe as
pixel data is simple byte arrays that do not require complex
decoding.
Validation in the presence of double fetches. Though our
safe validation functions ensure that sandbox code cannot
concurrently alter the data being validated, in practice we
must also account for double fetch vulnerabilities.
Consider, for example, migrating the following snippet
from the nsJPEGDecoder::OutputScanlines function:
1 while (mInfo.output_scanline (mImageData) +
(cid:44)→(mInfo.output_scanline * mInfo.output_width);
3
4
5
6 }
...
Here, mInfo is a structure that lives in the sandbox shared
memory. Buffer imageRow is a pointer to a decoded pixel-row
that Firefox hands off to the rendering pipeline and thus must
USENIX Association
29th USENIX Security Symposium    705
not be tainted. To modify this code, we must validate the
results on lines 1 and 4 which are tainted as they rely on
mInfo. Unfortunately, validation is complicated by the double
fetch: a concurrent sandbox thread could change the value of
output_scanline between its check on line 1 and its use on
line 4, for example. Unsafely handling validation would allow
the sandbox to control the value of imageRow (the destination
buffer) and thus perform arbitrary out-of-bounds writes.
We could address this by copying output_scanline to a
local variable, validating it once, and using the validated
value on both lines. But, it’s not always this easy—in our port
of Firefox we found numerous instances of multiple reads,
interspersed with writes, spread across different functions.
Using local variables quickly became intractable.
To address this, RLBox provides a freeze() method on
tainted variables and struct ﬁelds. Internally, this method
makes a copy of the value into renderer memory and ensures
that the original value (which lives in sandbox memory),
when used, has not changed. To prevent accidental misuse
of freezable variables, RLBox disallows the renderer from
reading freezable variables and ﬁelds until they are frozen.
RLBox does, however, allow renderer code to write to frozen
variables—an operation that modiﬁes the original value and
its copy. Finally, the unfreeze() method is used to restore
the sandbox’s write access.
Unlike most other RLBox features, ensuring that a variable
remains frozen imposes some runtime overhead. This is
thus a compile-time, opt-in feature that is applied to select
variables and struct ﬁelds.
Writing validators. We identify two primary styles of
writing validators in our porting Firefox to use sandboxed
libraries: we can focus on either preserving application
invariants or on preserving library invariants when crossing
the trust boundary. We demonstrate these two alternate styles,
using the above OutputScanlines example.
1. Maintaining application invariants: The ﬁrst focuses on
invariants expected by Firefox. To do this, we observe
that imageRow is a pointer into the mImageData buffer and
is used as a destination to write one row of pixels. Thus,
it is sufﬁcient to ensure that the result of output_scanline
* output_width is between 0 and mImageDataSize -
rowSize. This means that the imageRow pointer has room
for at least one row of pixels.
2. Checking library invariants: The second option focuses
on invariants provided by libjpeg. This option assumes
that the Firefox decoder behaves correctly when libjpeg
is well-behaved. Hence, we only need to ensure that
libjpeg adheres to its speciﬁcation. In our example, the
libjpeg speciﬁcation states that output_scanline is at
most the height of the image: we thus only need to freeze
output_scanline and then validate it accordingly.
4.4 Control ﬂow safety
As discussed in Section 3, a malicious sandbox could attempt
to manipulate renderer control ﬂow in several ways. While
data attacks on control ﬂow are prevented by tainting (e.g.,
it’s not possible to branch on a tainted variable), supporting
callbacks requires additional support.
Control transfers via callbacks. It’s unsafe to allow
sandboxes to callback arbitrary functions in the renderer. It’s
also important to ensure they can only call functions which
use tainted appropriately. Thus, RLBox forces application