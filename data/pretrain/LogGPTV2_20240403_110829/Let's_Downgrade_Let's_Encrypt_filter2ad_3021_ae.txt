# Table 4: Infrastructure of Popular CAs and Our Evaluations

All our blocking methodologies can be applied to other CAs with minor adjustments based on the behavior of their DNS software. For example, the number of required timeouts (column ‘#Timeouts’) and the length of the blocking interval (column ‘Block’), during which the DNS software avoids querying the blocked nameserver, vary. We conclude that all the CAs are vulnerable to nameserver-elimination, exposing them to highly effective off-path attacks. As in Section 4.3.4, we found that 11.75% of the 857K-Alexa domains can be forced to query a specific nameserver on a network vulnerable to sub-prefix hijack.

## 4.5 How Fast is Short-Lived Hijack?

The attacker's goal is to execute a short-lived hijack to evade detection. It is commonly believed that short-lived traffic shifts result from configuration errors, which are quickly identified and fixed, and since they do not significantly impact network load or connectivity, they are often ignored [17, 37, 38].

Several factors contribute to the overall latency of the attack. The primary determinant is the speed at which malicious BGP announcements propagate to the forwarding plane at the target victim AS. The key factor here is the update rate of received BGP announcements at the Autonomous System Boundary Router (ASBR), which exchanges routing information with other ASes. A rule stipulates that BGP announcements should be delayed until the local route is installed in the BGP Forwarding Table (FIB) to prevent temporary blackholing. If the receiving router picks up the new announcement and starts sending traffic before the FGP is fully converged, it introduces propagation delay. This delay is controlled by a BGP timer, which limits the rate of routing announcements.

In this experiment, we evaluate the ability of popular routing platforms to process route changes in response to new BGP announcements, measuring the time it takes for the new route to be installed and used in the FIB. During the experiment, we populate the routing and forwarding tables, generate and send BGP announcements, and initiate measurements. We measure the convergence delay, i.e., the latency between the BGP announcement being sent and the information propagating into the forwarding plane at the ASBR. We use 300,000 IPv4 prefixes to measure convergence under high load. The resulting latency ranges from tens of seconds to almost instantaneous, depending on the device. The slowest was the CISCO 7600 platform, taking over 30 seconds, while newer platforms like Cisco ASR 9901 and Juniper MX204 were much faster, with times between 5 and 10 seconds. The fastest results were obtained with Arista 7280R3, which had an almost instant propagation time of one second. Our findings show that convergence delay depends on CPU power and the efficiency of the implementation, with high variance (from one second to tens of seconds). For instance, the CISCO 7600 platform, released in the 2000s, has control-plane module Sup720 with just 2x 600MHz MIPS CPUs. Modern platforms, like Juniper MX204, have 8-core Xeon-D @2.2GHz, run a soft-real-time Linux kernel, and use two virtualized instances of JunOS control-plane in QEMU/KVM, resulting in much faster processing times.

### Table 5: BGP Convergence on Popular Routing Platforms

| Year | BGP Router       | FIB Convergence |
|------|-----------------|-----------------|
| 2001 | CISCO 7600      | >30sec          |
| 2005 | CISCO IOS XR 9000 | 500ms           |
| 2006 | -               | -               |
| 2008 | CISCO ASR 9001  | 5-10sec         |
| 2009 | Alcatel Lucent 7750SR | 5-10sec   |
| 2010 | Arista 7280R3   | 3sec            |
| 2010 | Juniper MX204   | 1sec            |

## 5. Countermeasures

### Unpredictable VAs Selection
Our attacks exploited the fact that the adversary knows the set of VAs performing validation, as the network blocks of the VAs are publicly known. By selecting VAs from a large, random set of network blocks, the adversary would find it much more challenging to launch a downgrade attack. This would enhance the security of DV with multiVA even against MitM adversaries.

### Resilient Nameserver-Selection
CAs should make their nameserver selection algorithms robust by choosing nameservers uniformly at random, even those with poor performance. If a nameserver does not respond, the query should be resent to another nameserver after a timeout. This would prevent our off-path server-elimination methodologies, with minimal additional latency to the certification process.

### Turning Off Caches
Turning off caches does not prevent cache poisoning attacks [35] but makes them more difficult to launch. Caches allow the injection of a malicious mapping between the victim domain and the attacker's IP address, which is then used for domain validation. Although Let’s Encrypt limits caching duration to 60 seconds, it still suffices for attacking the lookup phase. Without caches, the attacker must maintain hijacked prefixes for longer periods, making the attack more visible.

### DNSSEC Against Domain Hijacks
DNSSEC [RFC4033-4035] could prevent these attacks, but recent works show that more than 35% of signed domains are vulnerable to key recovery attacks [21, 56].

### Preventing BGP Hijacks with RPKI
If fully deployed, RPKI [RFC6480] would prevent prefix hijack attacks. However, most networks do not filter hijacking BGP announcements with Route Origin Validation (ROV). Only 86 out of 17,864 ASes in our dataset apply ROV. Worse, 57% of ASes have invalid ROAs, making them vulnerable to hijacks. Full adoption of RPKI, including both prefix certificates with ROAs and validation with ROV, would prevent many prefix hijack attacks.

### Detecting Fraudulent Certificates with CT
A Certificate Transparency (CT) log [42] could expose fraudulent certificates, allowing CAs to quickly revoke them. We measured the rate at which our fraudulent certificates with Let’s Encrypt appear in CT logs. We registered with notification services and search APIs to monitor and retrieve logged certificates. We observed that some monitors took hours to fetch our fraudulent certificates, and some exhibited failures. Our results align with recent studies showing unreliable service from CT monitors [45]. The damage of such attacks is highest in the first hour [54].

## 6. Related Work

### Domain Validation
Domain validation (DV) plays a central role in the PKI ecosystem and Internet security. Flaws in DV can lead to fraudulent certificate issuance. Some CAs have been shown to use buggy DV, e.g., WoSign [12], which tested control over any TCP port at the target domain instead of requiring control over services like Email, HTTP, or TLS. Other CAs validated control by sending email verification to ordinary users instead of domain administrators [13]. Design-specific flaws have also been exploited to bypass DV and issue fraudulent certificates [14, 18]. Following these attacks, Let’s Encrypt standardized DV [RFC8555] and deployed multiVA. Follow-up works [9, 15, 36] evaluated the performance and security of multiVA.

### Distributed Domain Validation
Distributed validation is a known concept. CoDNS [50] proposed improving the availability and performance of DNS lookups. ConfiDNS [52] extends CoDNS with peer agreements and majority vote. Perspectives [60] verifies a server’s identity using a new infrastructure of notary servers. DoubleCheck [10] aims to prevent attacks on clients retrieving a certificate for the first time. However, these proposals are not widely deployed due to the required modifications to existing infrastructure and lack of specific use cases. We explore the security of multiVA, as it is deployed by one of the largest and rapidly growing CAs.

### BGP Prefix Hijacks
[23, 24, 57] evaluated the applicability of BGP prefix hijacks against various Internet applications. There is extensive evidence of DNS cache poisoning attempts, predominantly via short-lived BGP prefix hijacks or by compromising a registrar or nameserver. In this work, we use BGP prefix hijacks to intercept DNS communication between the VA and the nameserver, creating spoofed DNS responses that map the nameservers in the victim domain to the attacker’s IP addresses. These records poison the caches of DNS resolvers at the VAs. Other BGP attacks, such as AS path poisoning [16], have defenses like BGPsec [12, 44], but none are widely deployed. Our work shows that even origin hijacking alone leads to devastating attacks against a large fraction of Internet domains and their clients.

### Countermeasures Against BGP Hijacks
To mitigate prefix hijacks, the IETF designed and standardized RPKI [RFC6810] [19]. RPKI uses Route Origin Authorizations (ROAs) to bind ASes to the network prefixes they own via cryptographic signatures. For this to be secure, ownership over prefixes must be correctly validated and configured in resource certificates (RCs) and ROAs, which are then placed in global RPKI repositories managed by five Regional Internet Registries (RIRs). The RPKI validator fetches and validates ROAs, creating a local validated cache provided to BGP-speaking routers via the RTR protocol. Recent research [33, 40] shows that about 600 networks apply ROV, but very few ASes in our dataset do so, only 86 out of 17,864. Other proposals for detecting hijacks based on changes in origin [41] are not yet in use. SCION [62] proposes replacing BGP with a new routing architecture but is not widely adopted.

## 7. Conclusion

Domain validation is essential for bootstrapping cryptography on the Internet. After validating control over a domain, a CA generates a certificate for establishing cryptographic material and protecting communication between clients and servers. DV is automated, fast, and cheap (or even free, as with Let’s Encrypt), making it the preferred method for verifying domain control. However, these benefits come with security risks. The 2018 attacks [14, 18] showed that many CAs' DV methods were vulnerable. Let’s Encrypt was the first CA to deploy multiVA in production mode, providing security against strong MitM adversaries [36]. Follow-up analysis and simulations showed that MitM adversaries cannot concurrently attack multiple VAs of Let’s Encrypt [15].

In this work, we developed off-path downgrade attacks to reduce domain validation to a single, attacker-selected nameserver. Our experimental evaluation found Let’s Encrypt vulnerable to this downgrade attack. After forcing the VAs of Let’s Encrypt to query a single nameserver on a network vulnerable to sub-prefix hijacks, we successfully issued fraudulent certificates for 10.60% of the domains in our dataset. This demonstrates that Let’s Encrypt is insecure not only against MitM adversaries but also against off-path adversaries. We also showed that other CAs are similarly vulnerable to downgrade attacks, allowing off-path attackers to launch efficient and effective attacks.