* 恢复 —— `git restore --source=COMMIT PATH`: 将 `PATH` 中的所有文件回退到 `COMMIT` 当时的状态，而不扰乱其他文件或提交历史。
### “未跟踪的文件”、“远程跟踪分支”、“跟踪远程分支”
在 Git 中，“跟踪” 这个词以三种相关但不同的方式使用：
* “ 未跟踪的文件   Untracked files ”：在 `git status` 命令的输出中可以看到。这里，“未跟踪” 意味着这些文件不受 Git 管理，不会被计入提交。
* “ 远程跟踪分支   remote tracking branch ” 例如 `origin/main`。此处的“远程跟踪分支”是一个本地引用，旨在记住上次执行 `git pull` 或 `git fetch` 时，远程 `origin` 上 `main` 分支的状态。
* 我们经常看到类似 “分支 `foo` 被设置为跟踪 `origin` 上的远程分支 `bar` ”这样的提示。
即使“未跟踪的文件”和“远程跟踪分支”都用到了“跟踪”这个词，但是它们所在的上下文完全不同，所以没有太多混淆。但是，对于以下两种方式的“跟踪”使用，我觉得可能会产生些许困扰：
* `main` 是一个跟踪远程的分支
* `origin/main` 是一个远程跟踪分支
然而，在 Git 中，“跟踪远程的分支” 和 “远程跟踪分支” 是不同的事物，理解它们之间的区别非常关键！下面是对这两者区别的一个简单概述：
* `main` 是一个分支。你可以在它上面做提交，进行合并等操作。在 `.git/config` 中，它通常被配置为 “追踪” 远程的 `main` 分支，这样你就可以用 `git pull` 和 `git push` 来同步和上传更改。
* `origin/main` 则并不是一个分支，而是一个“远程跟踪分支”，这并不是一种真正的分支（这有些抱歉）。你**不能**在此基础上做提交。只有通过运行 `git pull` 或 `git fetch` 获取远程 `main` 的最新状态，才能更新它。
我以前没有深入思考过这种模糊的地方，但我认为很容易看出为什么它会让人感到困惑。
### 签出
签出做了两个完全无关的事情：
* `git checkout BRANCH` 用于切换分支
* `git checkout file.txt` 用于撤销对 `file.txt` 的未暂存修改
这是众所周知的混淆点，因此 Git 实际上已经将这两个功能分离到了 `git switch` 和 `git restore`（尽管你还是可以使用 `checkout`，就像我一样，在不愿丢弃 15 年对 `git checkout` 肌肉记忆的情况下）。
再者，即使用了 15 年，我仍然记不住 `git checkout main file.txt` 用于从 `main` 分支恢复 `file.txt` 版本的命令参数。
我觉得有时你可能需要在 `checkout` 命令后面加上`--`，帮助区分哪个参数是分支名，哪个是路径，但我并未这么使用过，也不确定何时需要这样做。
### 参考日志（reflog）
有很多人把 `reflog` 读作 `re-flog`，而不是 `ref-log`。由于本文已经足够长，我这里不会深入讨论参考日志，但值得注意的是：
* 在 Git 中，“参考” 是一个泛指分支、标签和 `HEAD` 的术语
* 参考日志（“reflog”）则为你提供了一个参考历次记录的历史追踪
* 它是从一些极端困境中拯救出来的利器，比如说你不小心删除了重要的分支
* 我觉得参考日志是 Git 用户界面中最难懂的部分，我总是试图避免使用它。
### 合并 vs 变基 vs 遴选
有许多人提及他们常常对于合并和变基的区别感到迷惑，并且不理解变基中的“ 基   base ”指的是什么。
我会在这里尽量简要的进行描述，但是这些一句话的解释最终可能并不那么明了，因为每个人使用合并和变基创建工作流程时的方式差别挺大，要真正理解合并和变基，你必须理解工作流程。此外，有图示会更好理解。不过这个话题可能需要一篇独立的博客文章来完整讨论，所以我不打算深入这个问题。
* 合并会创建一个新的提交，用来融合两个分支
* 变基则会逐个地把当前分支上的提交复制到目标分支
* 遴选跟变基类似，但是语法完全不同（一个显著的差异是变基是从当前分支复制提交，而遴选则会把提交复制到当前分支）
### `rebase --onto`
在 `git rebase` 中，存在一个被称为 `--onto` 的选项。这一直让我感到困惑，因为 `git rebase main` 的核心功能就是将当前分支变基**到** `main` 运行上。那么，额外的 `--onto` 参数又是怎么回事呢？
我进行了一番查找，`--onto` 显然解决了一个我几乎没有或者说从未遇到过的问题，但我还是会记录下我对它的理解。
```
A - B - C (main)
      \
      D - E - F - G (mybranch)
          |
          otherbranch
```
设想一下，出于某种原因，我只想把提交 `F` 和 `G` 变基到 `main` 上。我相信这应该是某些 Git 工作流中会经常遇到的场景。
显然，你可以运行 `git rebase --onto main otherbranch mybranch` 来完成这个操作。对我来说，在这个语法中记住 3 个不同的分支名顺序似乎是不可能的（三个分支名，对我来说实在太多了），但由于我从很多人那里听说过，我想它一定有它的用途。
### 提交
有人提到他们对 Git 中的提交作为一词双义（既作为动词也作为名词）的用法感到困惑。
例如：
* 动词：“别忘了经常提交”
* 名词：“`main` 分支上最新的提交”
我觉得大多数人应该能很快适应这个双关的用法，但是在 SQL 数据库中的“提交”用法与 Git 是有所不同，我认为在 SQL 数据库中，“提交”只是作为一个动词（你使用 `COMMIT` 来结束一个事务），并不作为名词。
此外，在 Git 中，你可以从以下三个不同的角度去考虑一个 Git 提交：
1. 表示当前每个文件状态的**快照**
2. 与父提交的**差异**
3. 记录所有先前提交的**历史**
这些理解都是不错的：不同的命令在所有的这些情况下都会使用提交。例如，`git show` 将提交视为一个差异，`git log` 把提交看作是历史，`git restore` 则将提交理解为一个快照。
然而，Git 的术语并无太多助于你理解一个给定的命令正在如何使用提交。
### 更多令人困惑的术语
以下是更多让人觉得混淆的术语。我对许多这些术语的意思并不十分清楚。
我自己也不是很理解的东西：
* `git pickaxe` （也许这是 `git log -S` 和 `git log -G`，它们用于搜索以前提交的差异？）
* 子模块（我知道的全部就是它们并不以我想要的方向工作）
* Git 稀疏检出中的 “cone mode” （没有任何关于这个的概念，但有人提到过）
人们提及觉得混淆，但我在这篇已经 3000 字的文章中略过的东西：
* blob、tree
* “合并” 的方向
* “origin”、“upstream”，“downstream”
* `push` 和 `pull` 并不是对立面
* `fetch` 和 `pull` 的关系（pull = fetch + merge）
* git porcelain
* 子树
* 工作树
* 暂存
* “master” 或者 “main” （听起来它在 Git 内部有特殊含义，但其实并没有）
* 何时需要使用 `origin main`（如 `git push origin main`）vs `origin/main`
人们提及感到困惑的 Github 术语：
* “ 拉取请求   pull request ” （与 Gitlab 中的 “ 合并请求   merge request ” 相比，人们似乎认为后者更清晰）
* “压扁并合并” 和 “变基并合并” 的作用 （在昨天我从未听说过 `git merge --squash`，我一直以为 “压扁并合并” 是 Github 的特殊功能）
### 确实是 “每个 Git 术语”
我惊讶地发现，几乎 Git 的每个其他核心特性都被至少一人提及为某种方式中的困惑。我对听到更多我错过的混淆的 Git 术语的例子也有兴趣。
关于这个，有另一篇很棒的 2012 年的文章叫做《[最困惑的 Git 术语](https://longair.net/blog/2012/05/07/the-most-confusing-git-terminology/)》。它更多的讨论的是 Git 术语与 CVS 和 Subversion 术语的关联。
如果我要选出我觉得最令人困惑的 3 个 Git 术语，我现在会选：
* `head` 是一个分支，`HEAD` 是当前分支
* “远程跟踪分支” 和 “跟踪远程的分支” 是不同的事物
* “索引”、“暂存的”、“已缓存的” 全部指的同一件事
### 就这样了！
在写这些的过程中，我学到了不少东西。我了解到了一些新的关于Git的事实，但更重要的是，现在我对于别人说Git的所有功能和特性都引起困惑有了更深的理解。
许多问题我之前根本没考虑过，比如我从来没有意识到，在讨论分支时，“跟踪”这个词的用法是多么地特别。
另外，尽管我已经尽力做到准确无误，但由于我涉猎到了一些我从未深入探讨过的Git的角落，所以可能还是出现了一些错误。
*（题图：DALL-E/A/e1e5b964-5f32-41bb-811e-8978fb8556d4）*
---
via: 
作者：[Julia Evans](https://jvns.ca/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[ChatGPT](https://linux.cn/lctt/ChatGPT) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出