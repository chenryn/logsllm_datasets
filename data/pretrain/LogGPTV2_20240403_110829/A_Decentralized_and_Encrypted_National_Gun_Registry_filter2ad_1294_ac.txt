view (i.e., it captures the case where all state-level servers are
corrupted and collude). The parties P1 through Pθ correspond
to the local county ofﬁcials in the Bill who are responsible for
registering gun owners. The parties C1 and C2 are custodians
who we assume do not collude. The server S is untrusted. We
stress that while we chose to use three backups per party,
two custodians and one server; the protocol can be trivially
extended to handle a different number of custodians, backups
and servers.
and B(i)
3
We sometimes refer to a party Pi by the role it plays during
a particular operation. For example, if Pi queries Pj’s local
database, we refer to Pi as the querier and denote it by Q
and to Pj as the local ofﬁcial and denote it by L.
Initializing the global directory. To initialize the system, the
two custodians C1 and C2 and the server execute Ω.InitGlobal.
This sets up an encrypted dictionary EDX on the server which
we call the global directory and provides each custodian with
a share of its key. The global directory maps serial numbers to
county identiﬁers and its purpose is to enable a querier to ﬁnd
the county a given gun is registered in. With this information,
it can then interact directly with that county’s local ofﬁcial to
query its local database.
Initializing the local databases. After the global directory is
initialized, each party Pi initializes its own local encrypted
database by executing Ω.InitLocal. This results in a secret key
Ki and an empty encrypted database EDBi which it sends to
the server. In addition, Pi splits its key into three shares and
sends a share to each of its backups.
Adding a new record. A new record r is added by a local
ofﬁcial L ∈ {P1, . . . , Pθ} by executing the Ω.Add protocol
with the custodians and the server. At a high-level, the protocol
works as follows. First, L needs to add the label/value pair
(r.SN, r.CID) to the global dictionary. To do this, it splits the
pair into two shares p1 and p2 which it sends to the custodians.
This guarantees that neither custodian will learn the pair. The
custodians, then use 2PC to securely compute a function that:
(1) recovers the key K to the global directory from their key
shares; (2) recovers the serial/id pair from their pair shares;
(3) computes an add token for the pair; and then (4) splits that
token into two shares. The custodians then send the shares of
the add token to the server which reconstructs it and uses to
update the global directory.
After updating the global directory, the ofﬁcial updates its
local (but remotely stored) encrypted database by generating
an add token for the local database and sending it to the server.
Querying the global directory. When a querier Q ∈
{P1, . . . , Pθ} wants to query the registry with a serial number
SN but does not know in which county the gun is registered,
it ﬁrst queries the global directory EDX by executing the
Ω.Find protocol with the custodians C1 and C2 and the server.
This results in Q recovering the identiﬁer of the county that
registered the gun. At a high level, the protocol works as
follows. Q splits SN into two shares which it sends to the
custodians. The custodians then use 2PC to securely compute
a function that: (1) recovers the key K to the EDX from their
key shares; (2) recovers SN from their serial number pairs;
(3) computes a token for the serial number; (4) generates the
resolve key for the serial number; and (5) splits both the token
and the resolve key into two shares, outputting a share of each
to each custodian. The custodians then send their shares to the
server and the querier who recovers the token and the resolve
key, respectively. It then uses the token to query the global
directory EDX and returns the encrypted result to Q who can
then recover the county identiﬁer CID using the resolve key.
Querying
local database. To query the database
of a speciﬁc county on a boolean formula ϕ, such as
((first:Jon or first:John) and last:Smith),
Q executes the Ω.Query protocol with the local ofﬁcial
L ∈ {P1, . . . , Pθ} and the server. This results in Q
recovering the plaintext records that match its query. At a
high level, the protocol works as follows. L and Q use 2PC
to securely compute a function that generates a token for ϕ
using the key KL for L’s local database. Q sends the token
to the server who uses it to query L’s database and returns
an encrypted response to Q. Q and L then execute another
2PC to resolve the encrypted response into a set of plaintext
records for Q.
a
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
1524
Ofﬂine querying. If Q wishes to query L’s local database
when L is ofﬂine, it interacts with L’s backups, B1, B2, B3,
and the server. Here, we refer to B1 as the designated backup
because it will play a slightly different role than the other
backups but we note that any of B1, B2 or B3 could be
the designated backup. First, Q and the backups use MPC
to securely compute a function that: (1) recovers the local
ofﬁcial’s key from the backups’ shares; (2) splits the key into
two new shares; and (3) outputs one share to the designated
backup B1 and one to Q. B1 and Q then use 2PC to securely
compute a function that: (1) recovers the key from the new
shares; (2) computes a token for Q’s query ϕ. Q then sends
the token to the server who uses it to recover and return a set
of encrypted records that match the query. Q and B1 then use
2PC to securely resolve the encrypted response.
A. Deployment Considerations
As described, our protocol does not capture many real-world
considerations that would have to be taken into account to
deploy it. Here, we discuss some of those issues.
Local infrastructure. One can expect local county ofﬁcials to
manage only a minimal computing infrastructure. Speciﬁcally,
a consumer-level desktop computer or laptop but not a server-
level machine. In addition, especially in rural regions, one
should expect poor Internet connectivity and intermittent ac-
cess. These challenges motivate two important features of our
protocol: (1) a relatively lightweight amount of computation
for the ofﬁcials; (2) no storage requirements for ofﬁcials
(besides the secret key); and (3) an ofﬂine query protocol in
case the ofﬁcial is disconnected from the Internet.
Licensing. In practice, our protocol would be used to store two
kinds of records: (1) licenses, which are issued to individuals
who wish to own a gun; and (2) ﬁrearm registrations, which
are issued when a gun is purchased. In our system, both
licenses and registrations can be stored as records so we do
not differentiate between them.
Rate limiting. To prevent a querier from making excessive
queries, rate limiting can be achieved by both the server
and the ofﬁcial. The server can rate limit when it receives
search tokens since it can keep track of the number of
encrypted records it has returned from the ofﬁcial’s encrypted
database. Furthermore, it can be set to cap the maximum
number of records it returns per query. Similarly, the local
ofﬁcial can also rate limit during the execution of the query
protocol; speciﬁcally during the second 2PC execution where
the encrypted results are resolved. Here, the ofﬁcial could
simply refuse to execute the 2PC if the number of records
returned by the search exceeds some threshold.
Moving & history. When a gun owner moves from county A
to county B, it is expected to re-register the gun in county B.
Note that, in our protocol, the new registration would overwrite
the old serial number and county ID pair in the global directory
and insert a new record in county B’s local database. The old
record in county A would still persist but this is by design so
that a history of the gun can be recovered. The new record
in county B’s database would include the old county ID so
that the two records are linked. If, on the other hand, one
needed to support deletion from county A’s database it would
sufﬁce to instantiate ΣDB with a dynamic database encryption
scheme instead of a semi-dynamic one. There are many such
constructions one could choose from [5], [10], [11].
Sales. If a gun is sold by owner A to owner B then a new serial
number/county identiﬁer pair will be created in the global
directory and a new record will be added to a local database.
To keep history, the new record will contain the license number
of owner A. Note that if multiple records are found for the
same serial number in the same county, they can be ordered
using the previous owner’s license number, e.g., if record Y’s
previous owner is the owner of record X then record Y was
created after record X.
Custodians. An important deployment consideration for our
protocol
is the choice of custodians. The security of the
protocol relies on the custodians not colluding so they should
be picked carefully. One could imagine choosing, for example,
gun rights and civil liberties organizations like the National
Riﬂe Association (NRA) and the ACLU under the assumption
that local ofﬁcials would trust that the NRA would not collude
with the ACLU in order to subvert the system and recover
the private information of gun owners. Also, we note that in
our protocol description and prototype we use two custodians
but this number can be easily increased to any number in
the natural way (i.e., increasing the number of shares used
throughout the protocol and using MPC instead of 2PC).
Batch updates. For ease of exposition, we describe the Add
operation of our protocol as taking a single record to add to
the database. In practice, however, local ofﬁcials may prefer to
add a batch of new records (e.g., one per day or week). The
naive way to handle this is to execute the Add protocol on
each record in the batch but a more efﬁcient approach (which
we implement) is to process the entire batch of new records
at once and to execute the 2PC in Add over multiple records.
Number of backups. In our protocol description and proto-
type, we chose to use three backups but this can be trivially
extended to any number.
Removing local databases. As discussed in Section IV, an
important requirement is that local ofﬁcials have the ability to
remove their database from the system at any point in time.
This feature is easy to achieve in our protocol since the local
databases are all end-to-end encrypted. In fact, to remove a
database from the system it sufﬁces to erase the secret key. A
more usable approach could be to store the secret key on a
hardware token like a Yubikey that remains connected to the
ofﬁcial’s device and to physically remove it in order to pull the
database. Note that to removing the database should include
asking the backups to erase their shares. If enough backups
are honest and erase their shares then no keying material will
remain. Alternatively, one could augment our design to include
a form of key rotation so that the shares become useless or a
revocation mechanism to revoke shares.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
1525
VI. SECURITY DEFINITION AND PROOF
2 , B(1)
1 , B(1)
1 , B(θ)
2 , B(θ)
3 , . . . , B(θ)
We formalize the security of our design in the ideal/real-
world paradigm [13]. Roughly speaking, we require that an
execution of the protocol in the real-world is indistinguishable
from an ideal gun registry functionality which we deﬁne
below.
Parties. The two executions take place between an en-
vironment Z, an adversary which we denote A in the
real-world execution and S in the ideal-world execu-
tion, θ = poly(k) parties P1, . . . , Pθ, 3θ backup parties
B(1)
3 , two custodians C1 and
C2 and a server S. While the legislation proposes that every
state manage a server for its counties, in our model we only
include a single server S for ease of exposition and because it
captures the worst-case scenario from a security point of view
(i.e., the case where all state-level servers are corrupted and
collude). ”
Corruptions. We consider two classes of corruptions: external
corruptions and internal corruptions. External corruptions can
include: (1) the server; (2) either C1 or C2 but not both; and
(3) for all parties Pi, at most 1 of Pi’s backup parties. Internal
corruptions can include at most one party in {P1, . . . , Pθ}.
Hybrid-world execution. In the hybrid-world execution every
party has access to ideal F2PC and FMPC functionalities. The
environment Z takes as input a string z ∈ {0, 1}∗ and starts
by choosing a set of parties I for the adversary to corrupt,
where I is either external or internal. Z sends I to A which
corrupts all the parties in I. After the parties in I have been
corrupted, C1, C2 and S execute Ω.InitGlobal and each party
Pi executes Ω.InitLocal with S and its backup parties B(i)
1 ,
B(i)
Z then adaptively chooses a polynomial number of
2
commands (comm1, . . . , commm) of the form commj =
(Pj, opj), where opj is either an add operation (add, ri),
a ﬁnd operation (ﬁnd, SN), a query operation (query, ϕ) or
an ofﬂine query operation (oﬄine, ϕ). More precisely, for
1 ≤ j ≤ m, Z sends commj to Pj. If opj is an add, Pj
executes Ω.Add with the custodians and the server. If opj is a
ﬁnd, Pj executes Ω.Find with the custodians and the server.
If opj is a query, Pj executes Ω.Query with a local ofﬁcial
L ∈ {P1, . . . , Pθ} and the server. If opj is an ofﬂine query,
Q executes Ω.OﬄineQuery with the local ofﬁcial’s backup
parties and the server. In all cases, Q returns its output to Z.
At then end of the execution, A sends an arbitrary message to
Z which outputs a bit b. We denote this bit HybridZ,A(k).
Ideal-world execution. In the ideal-world execution every
party has access to an ideal functionality FGR described
in Figure 1. The environment Z takes as input a string
z ∈ {0, 1}∗ and starts by choosing a set of parties I for the
adversary to corrupt, where I is either external or internal.
Z sends I to S and FGR and adaptively chooses a poly-
nomial number of commands (comm1, . . . , commm) of the
above form. More precisely, for 1 ≤ j ≤ m, Z sends commj
to Pj who, in turn, forwards the operation opj to FGR and
and B(i)
3 .
returns its output to Z. At the end of the execution, S sends
an arbitrary message to Z which outputs a bit b. We denote
this bit IdealΛZ,S (k).
Deﬁnition. We can now state our security deﬁnition based on
the above experiments.
Deﬁnition VI.1 (Security). We say that Ω is a Λ-secure
registry if for all PPT semi-honest adversaries A, there exists
a PPT ideal adversary S such that for all PPT standalone
environments Z, for all z ∈ {0, 1}∗,
(cid:12)(cid:12)(cid:12)Pr(cid:2) HybridZ,A(k) = 1(cid:3) − Pr
IdealΛZ,S (k) = 1
(cid:105)(cid:12)(cid:12)(cid:12) ≤ negl(k).
(cid:104)
VII. SECURITY ANALYSIS
We conduct a leakage analysis of our protocol and formalize
its leakage proﬁle. We ﬁrst provide a black-box leakage
analysis and then a concrete one.
Black-box leakage analysis. Black-box leakage analysis,
introduced in [30], is a way to describe the leakage proﬁle of a
scheme or protocol as a function of the leakage proﬁles of its
underlying building blocks. The value of such an analysis is
that it remains useful even when the protocol’s building blocks
are replaced or instantiated with different concrete schemes. In
particular, this means that as new schemes are developed with
more desirable tradeoffs the protocol’s leakage proﬁle can be
easily updated. Suppose the leakage proﬁle of ΣDX is
ΛDX =
Ldx
I
,Ldx
Q ,Ldx
A
=
pattdx
I
, pattdx
Q , pattdx
A
and that the leakage proﬁle of ΣDB is
ΛDB =
Ldb
I
,Ldb
Q ,Ldb
A
=
pattdb
I
, pattdb
Q , pattdb
A