Open | fopen | file_operations: open  
Close | fread | file_operations: read  
Write | fwrite | file_operations: write  
Close | fclose | file_operations: release  
Remove | rmmod | module_exit()  
    #include 
    #include 
    #include 
    MODULE_LICENSE("Dual BSD/GPL");
    static int hello_init(void) 
    {
        printk(" Hello world!n");
        return 0;
    }
    static void hello_exit(void) 
    {
        printk(" Bye, cruel worldn");
    }
    module_init(hello_init);
    module_exit(hello_exit);
    struct file_operations module_fops = 
    {
        read: module_read,
        write: module_write,
        open: module_open,
        release: module_release
    };
其中，module_init/module_exit是在载入/卸载这个驱动时自动运行；而fop结构体实现了如上四个callback，冒号右侧的函数名是由开发者自己起的，在驱动程序载入内核后，其他用户程序程序就可以借助
**文件方式** 像进行系统调用一样调用这些函数实现所需功能。
## 0x04 环境配置
不同于用户态的pwn，Kernel-Pwn不再是用python远程链接打payload拿shell，而是给你一个环境包，下载后qemu本地起系统。对于一个Kernel-Pwn来说，题目通常会给定以下文件：
    boot.sh: 一个用于启动 kernel 的 shell 的脚本，多用 qemu，保护措施与 qemu 不同的启动参数有关
    bzImage: kernel binary
    rootfs.cpio: 文件系统映像
解释一下 qemu 启动的参数：
  * -initrd rootfs.cpio，使用 rootfs.cpio 作为内核启动的文件系统
  * -kernel bzImage，使用 bzImage 作为 kernel 映像
  * -cpu kvm64,+smep，设置 CPU 的安全选项，这里开启了 smep
  * -m 64M，设置虚拟 RAM 为 64M，默认为 128M 其他的选项可以通过 —help 查看。
本地写好 exploit 后，可以通过 base64 编码等方式把编译好的二进制文件保存到远程目录下，进而拿到 flag。同时可以使用 musl,
uclibc 等方法减小 exploit 的体积方便传输。
但是为了我们调试Demo方便，我们最好在本地也编译一个bzImage。
⚠️：部分Kernel漏洞只影响低版本，高版本的Kernel已对脆弱的机制进行了一定程度的遏制乃至进行了消除，但是和Glibc相同，部分中低版本的内核仍有很高的用户量，因此我们对于低版本Kernel的漏洞研究并非是没有意义的，同时，在实际调试Demo时，请特别注意Demo漏洞影响的Kernel版本。
⚠️：以下安装步骤仅在`Ubuntu 16.04`完成了测试。
###  下载Linux Kernel源码并解压
`wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.5.6.tar.xz`
###  配置环境
编译kernel需要很多lib，所以请执行以下命令安装相关环境：
`sudo apt-get install bison libncurses* build-essential openssl zlibc minizip
libidn11-dev libidn11 libssl-dev flex ncurses-devel libncurses5-dev`
###  Kernel编译配置
运行以下命令进行配置即可
`make menuconfig`
配置结束会在当前目录生成`.config`，若需要之后修改配置，可以直接编辑`.config`后再次编译即可。
###  编译
使用`make`进行编译即可，若需要更快的编译，请使用`make -j8`。
## 0x05 Kernel Stackoverflow
📚：本部分全文翻译自[Exploiting Stack Overflows in the Linux Kernel – Jon
Oberheide](https://jon.oberheide.org/blog/2010/11/29/exploiting-stack-overflows-in-the-linux-kernel/)的相关内容。
此处将介绍Linux内核中堆栈溢出的利用技术。请注意，这并不是指内核堆栈上的缓冲区溢出，而是内核堆栈的不正确扩展，这导致其可能与损坏的关键结构重叠。
这是Linux内核中的一个漏洞类。
###  内核栈帧(Kernel Stack Layout)
在Linux上，每个系统线程都在内核内存中分配了相应的内核堆栈。 x86上的Linux内核堆栈的大小为4096或8192字节，这具体取决于您的发行版。
尽管此大小似乎小到无法包含完整的调用链和相关的本地堆栈变量，但实际上内核调用链相对较浅，并且在Kernel中不鼓励滥用带有大局部堆栈变量的内核函数来占用宝贵空间，当使用高效的分配器(如SLUB)时，这个大小是完全够用的。
内核堆栈与thread_info结构共享4k / 8k的总大小，该结构包含有关当前线程的一些元数据，如`include/linux/sched.h`中所示：
    union thread_union {
        struct thread_info thread_info;
        unsigned long stack[THREAD_SIZE/sizeof(long)];
    };
thread_info结构在x86下有如下定义：(`arch/x86/include/asm/thread_info.h`)
    struct thread_info {
        struct task_struct *task;
        struct exec_domain *exec_domain;
        __u32      flags;
        __u32      status;
        __u32      cpu;
        int          preempt_count;
        mm_segment_t  addr_limit;
        struct restart_block restart_block;
        void __user     *sysenter_return;
    #ifdef CONFIG_X86_32
        unsigned long  previous_esp;
        __u8      supervisor_stack[0];
    #endif
        int          uaccess_err;
    };
内核堆栈在内存中呈现如下所示的结构：
那么，当内核函数需要超过4k / 8k的堆栈空间或使用了长调用链以至于超出可用堆栈空间时，会发生什么呢？
**通常情况下，这会导致堆栈溢出的发生，并且如果thread_info结构或超出更低地址处的关键内存损坏，则会导致内核崩溃。
但是，如果内存对齐并且存在实际可以控制写入堆栈及其以外的数据的情况，则可能存在可利用的条件。**
###  Kernel栈溢出攻击
接下来让我们看一看栈溢出和thread_info结构的破坏是如何导致提权的发生的。
    static int blah(int __user *vals, int __user count)
    {
        int i;
        int big_array[count];
        for (i = 0; i restart_block;
        return restart->fn(restart);
    }
而`restart_syscal`l在`arch/x86/kernel/syscall_table_32.S`中被定义：
    .long sys_restart_syscall /* 0 - old "setup()" system call, used for restarting */
实际上它的系统调用号码为零。 我们可以通过以下方式从用户态中调用其功能：
    syscall(SYS_restart_syscall);
这将使内核调用调用在restart_block结构中的函数指针。
**如果我们可以破坏thread_info的restart_block成员中的函数指针，则可以将其指向我们控制下的用户空间中的函数，通过调用sys_restart_syscall触发其执行，并提升特权。**
###  Linux 提权思路
之前说过，执行`commit_creds(prepare_kernel_cred(0))`，可以使进程的权限提升为`root`，然后我们返回到用户模式，执行`iret`指令。
#### 关于`iret`指令
当使用IRET指令返回到相同保护级别的任务时，IRET会从堆栈弹出代码段选择子及指令指针分别到CS与IP寄存器，并弹出标志寄存器内容到EFLAGS寄存器。
当使用IRET指令返回到一个不同的保护级别时，IRET不仅会从堆栈弹出以上内容，还会弹出堆栈段选择子及堆栈指针分别到SS与SP寄存器。
栈上保存了`trap frame`，返回到用户模式的时候，恢复信息从以下得得结构读取：
    struct trap_frame 
    {
        void* eip;                // instruction pointer +0
        uint32_t cs;              // code segment    +4
        uint32_t eflags;          // CPU flags       +8
        void* esp;                // stack pointer       +12
        uint32_t ss;              // stack segment   +16
    } __attribute__((packed));
## 0x06 Kernel Null Pointer Dereference
📚：本部分部分翻译自[A Kernel Exploit Step by Step –
akliilias](https://www.coursehero.com/file/49274885/kernel-exploit-step-by-steppdf/)的相关内容。
2009年8月，Tavis Ormandy和Julien Tinnes发现了一个漏洞，该漏洞影响了自2001年以来的所有2.4到2.6Linux内核。  
问题的根源是因为以下机制：在Linux操作系统中，虚拟内存分配于内核空间和用户空间之间。
在x86上，每个进程都有一个内存映射，该内存映射分为两部分，用户空间最大为3GB（地址0xC0000000），最后一个GB是为内核保留的。
尽管存在特权分离，但它们都共享相同的地址空间。
###  Demo
    #include 
    #include 
    #include 
    #include 
    int main(){
        uint32_t *mem=NULL;
        mem=mmap(NULL, 0x1000, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_ANONYMOUS | MAP_PRIVATE, 0, 0);
        if (mem != NULL) {
            fprintf(stdout,"[−] UNABLE TO MAP ZERO PAGE!n");
            exit(0);
        }
        fprintf(stdout, "[+] MAPPED ZERO PAGE!n");
        printf("0x%08X: 0x%08X n",(uint32_t)mem, *(uint32_t*)0);
        mem[0] = 0xDEADBEAF;
        printf("0x%08X: 0x%08X n",(uint32_t)mem, *(uint32_t*)0);
        printf("[+] It worked !!n");
        munmap(mem,0x1000);
        mem[0] = 0xDEADBEAF;
        return 0;
    }
这个Demo试图使用`mmap`在`NULL`处分配0x1000大小的内存映射，正常情况下，程序应当返回`[−] UNABLE TO MAP ZERO
PAGE!n`。
但是，在某些版本的Kernel上，这个Demo却可以向下运行，进而使我们分配到0地址的映射，那么我们就可以直接在0地址处构建shellcode并执行。
## 0x07 以[Root-Me]LinKern x86 – Buffer overflow basic 1为例
题目给定了`bzImage、ch1.c、initramfs.img、run、run.c`这几个文件
其中`bzImage`为内存映像，那么`initramfs.img`必定为文件系统，解压可以发现加载到内核的模块文件。
事实上，此时我们已经可以通过如下命令：
    qemu-system-i386 -kernel bzImage 
    -s 
    -append nokaslr 
    -initrd initramfs.img 
    -fsdev local,security_model=passthrough,id=fsdev-fs0,path=/home/error404/Desktop/CTF_question/Kernel/Buffer_overflow_basic_1/Share 