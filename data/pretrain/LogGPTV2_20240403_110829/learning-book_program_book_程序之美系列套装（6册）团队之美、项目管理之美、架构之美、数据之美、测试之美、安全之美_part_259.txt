把Flickr/Friendfeed例子和酒吧服务员的类比结合起来，意味着轮询
方式的酒吧服务员为了使得顾客需要酒时可以实时得到，需要询问
这位顾客4000次“要喝一杯吗？”，他才会回答1次“来一杯”。
一方面，应用程序调用本地的"内部调用"O-box)API来“吸纳"这种
低效性。另一方面，应用程序执行WebAPI调用的效率也非常低
下。如果你根据当前所有的社交应用来考虑这个例子，其代价确实
会非常令人震惊。
事件驱动型的软件可以驱动应用程序达到实时性，而社交数据在本
质上就需要实时通信。通过在线银行软件查看某张支票账户清除了
我的支票账户的操作，“拖延”一两天才能看到是可以容忍的：但是
一个年轻人要看到他最好的朋友在春天拍摄的照片的请求，需要被
立即处理。
事件
事件驱动型的架构和轮询驱动型不同，它采取了不同的解决方案。
和酒吧服务员不断地询问顾客们是否需要喝酒不同，这种模型的酒
吧服务员仅仅站在吧台后面，等待顾客告诉说他们想要喝酒。虽然
1462
---
## Page 1464
事件处理通常更有效，但是考虑到具体的“事件”概念本身，它确实
要求一些额外的代价。事件需要被消除、捕获；事件处理框架必须
存在，这导致了事件处理方式的复杂性。轮询方式可以简单地通过
线性、过程化的循环来完成，而这种简单性也正是它被过度滥用的
一个关键原因。
从侏罗纪时期开始，轮询和事件这两种执行流规范奠定了软件开发
的基础。客户端和服务器软件都依赖这两种模式来控制执行流以及
应用的行为。操作系统通过恰当地运用它们，提供流畅的用户输入
和交互体验。作为一个并发人员，你选择哪一种模型通常取决于你
所使用的开发语言，或者你正在使用的库或框架的功能。虽然这两
者的性能特征在本地、内部API调用的应用中通常区别不大，但是
当执行远程、外部API调用的操作时，其性能特征可能导致应用程
序瘫痪。注意，当处理用户界面和图形渲染时，本地性能的区别对
于应用是至关重要的。
一旦程序员开始大量注入远程API调用到本地应用程序，轮询和事
件处理方式之间的区别变得非常明显。本地I/O调用和远程I/O调用
之间的区别呈指数增长。所有通过磁盘、内存和芯片接口来加快应
用程序的工作变得毫无意义。图8-2说明了本地数据访问和远程数据
访问之间的IO性能的相对区别。为了简单起见，我已经隐含地说明
了固有的IP连接断开延迟，并且作为带宽/吞吐量功能来说明这一
点。然而，如果你真正考虑实际的协议交互作为全部数据传输代价
的功能，延迟问题会变得更加严重。
内存本地磁盘数据库
内部网外联网3G无线
（100Mb/s)（3Mb/s)（755Kb/s)
1463
---
## Page 1465
图8-2：文件描述符在各种连接类型上的操作的相对吞吐量
正如你所看到的，差异非常明显。在远程数据访问次数远多于本地
数据访问的极端情况下，轮询和事件模式在驱动应用时所产生的延
迟的差别会更加明显。当你的软件为了采取某些措施而需要知道在
网络中某个服务是否发生变化时，你往往没有足够的时间来执行低
效的轮询。如果酒吧服务员问了4000次的“要喝一杯吗？”，却只能
得到顾客1次的肯定回答，当服务员需要问遍城镇里的所有顾客
时，浪费在查询上的时间都要爆炸了。轮询和事件之间各有十秋，
但是只有一种模型在Web上易于实现：轮询。基于HTTP/REST的客
户端-服务器编程从来没有为Web应用开发提供正式的事件驱动框
架。结果导致Web充满了低时效性的社交数据驱动的应用，社交数
据的时效性特征让这一问题更为突出。如果我的朋友明天可能在城
镇，我可不想自已知道时为时已晚。我们希望应用能够“实时"就像
构建在要倒塌的扑克牌堆砌的房子那样，而我们看到墙变得越来越
高。
HTML5事件
值得注意的是HTML5规范突出了事件模型和在高层上支持双向通信
功能的"WebSocket"框架。XMLHttpRequest已经把GUIWeb应用提升
到一个新的层次，我猜想WebSockets"将对今后几年的Web应用开
发产生重大影响。允许基于浏览器的应用以更类似于socket的方式
来访问数据必将带来好的结果。
WAN规模的事件
分布式事件处理和通知不是一个新问题，而它的解决方案也不是。
事实上，企业空间已经生成了无比强大和高效的“消息总线"的解决
方案，尽管这是专利的。Tibco公司作为企业消息总线解决方案的领
先提供商而广为人知。然而，企业消息总线的关注重点在于它们传
输的数据的临界值，而非通过各种各样的连接堆栈方能实现与多样
化的终端间进行连接。股票交易需要确保传输成功并保护隐私。要
达到这种程度需要付出较高的代价，该代价转化为了高额的牌照
费，但Internet上，这一转化进行得不是很好。社交数据是通过对终
端用户免费的应用创建和消费的。因此，各企业公司提供的昂贵
的、私有的和难以集成的消息总线解决方案在Web上不受欢迎。
1464
---
## Page 1466
利用生成社交数据的技术来提供事件驱动通知机制的解决方案，通
常正是基于该系统已有的技术。可以使用HTTPPOST方式来推动整
个WAN范围内任意服务之间的事件，使用标准格式(XL)，在执行控
制流过程中的延迟可以被关闭。JeffLindsay在宣传HTTPPOST的事
件传输模型时给出了一个生动的比喻，并由此获得了绰号“Web
Hooks"（htp：//blog.webhooks.org/）。再强调一次，HTTP不是最优
化的传输事件协议，XML也不是最优格式，但是这二者提供了最丰
富、实用的机制来解决服务器之间实时通信的问题。
如果社交数据变得更加隐蔽，有可能发生以下两件事之一：一是我
们作为消费者，将继续忍受，而我们的行为模式和期望将会更符合
低级模型；二是我们停正使用该产品，因为它们的使用价值已经下
降到不足以抵消使用所需要忍受的烦恼。前者有很多先例（Bta与
VHS)，因为我们通常接受我们想要解决的问题的非最佳解决方案。
后者每天都发生，因为发展迅猛的工业和产品通常由于时间和最后
的优化因素而崩溃。在一个框架变成标准之前，中间的事件网关可
以通过众多协议和格式代为转发事件和数据的方式，起到连通数据
发布者和阅读者的桥梁作用。如果事件机制的实现可以做到成本低
时社交数据的普遍应用依赖于事件驱动模型。
Gnip项目2-是基于以下理念成立的：围绕社交数据消费的事件驱动
架构是提供实时访问模式的唯一方式。然而，由于轮询方式还会存
在，Gnip仍然选择轮询方式作为社交数据交互的首选模型。
单一的API集成通常简单明了。然而，当你要集成很多不同的终端
时，便开始出现效率低下的问题。Gnip为它的终端数据消费者实现
了多API集成的工作，这些AP最后只需要通过唯一点就可以完成集
成Gnip。
[L]在计算机网络中，速率控制常用在一个网络接口上，用于控制
发送和接收数据的通信速率。流量小于或等于指定速率的数据会被
发送，而流量若是超过了指定速率，则被去弃或延迟发送。
[2]想了解更多信息，可访问其网站：http：//www.gnip.com/。
社交数据规范化
1465
---
## Page 1467
假定我们通过HTTPPOST来处理广域网范围内的事件的方式
WebHooks一—解决了数据访问延迟问题。这种方式只是解决了通
用的API访问问题，而不是数据本身的多样化特征问题。XML提供
了数据的结构化特性，但是没有考虑到通用性。当今的社交数据聚
集应用和它们要集成的各种类型的社交数据的API都碰上了“一次性
理解”的难题。理解从一个特定API获取到的数据的结构需要付出的
代价很高一一太高了。虽然多路复用网关协议已经存在了很长时
间，但是通常对于加强来自稀蔬数据源的通用的、规范化的数据，
只存在严格的XML转换翻译器。遗憾的是，严格的数据解析方式很
少能够正常工作，因为实际上各种服务集创建的数据是非常多样化
的。人们对标准、编码和转义序列的理解都是不同的。此外，创建
XML用于消费的软件不可避免地存在bug，这导致输出格式简陋，
对其使用变得进一步复杂化。
我们从严格的HTML解析Web浏览器中明白，遗憾的是，标准并不
能使那些和标准保持一致的软件能够准确无误地解析这些非完美的
数据格式。实际情况是标准有不同的解析方式，软件存在bug，而
且最强大的事实标准是用户已经正在做的事。人类的强大永远都不
能被否认。
如果你曾经花一些时间从各种社交数据源看这些数据，你会注意到
这些数据变得看起来都差不多。虽然要解释的通用性对人类而言很
明确，但对机器来说却很困难；需要人工编辑指南给出从数据集A
到数据集B的映射。
从两种不同的“社交标签”服务考虑以下两个XML例子。虽然它们显
然都是XML，但是其“书签"的表示方式差别异，而且它们都为终
端用户提供相似的服务。
来自Delicious网站：
Fractals derived from Newton-Raphson iteration
Mon, 19 Jan 200920: 02: 05+0000
http: / /delicious.com/url/7549fded443f#joe
1466
---
## Page 1468
http: / /www.chiark.greenend.org.uk/~
sgtatham/newton/
iacovibus
http: / /delicious.com/ur1/7549fded443f
http: / /feeds.delicious.com/v2/rss/url/a
joe's bookmarks
newton-
raphson
iteration
来自givealink.org网站：
Bus slams into shop houses after driver collapses
behind wheel
http: / /www.thaivisa.com/ forum/Bus-Slams-Shop-Coll-
t1 98 228 . htm1 
Bus slams into shop collapses behind wheel
1467
---
## Page 1469
当今，有成千上万的服务通过API和Feeds暴露其用户生成的内容
(Uer-GeneratedContent,UGC)，对其结构和内容进行规范化，这样开
发人员可以期望通用性优先级变得更高。DiSo项目是把整个API范
围内相关成员引入该方面的主要催化剂，用于“净化"更多可使用的
社交数据参见htp：//diso-project.org/wiki/activity-streams。
作为数据生成者和数据使用者之间的媒体，Gmip处于一个得天独厚
的地位来把社交数据的意义翻译和规范化到传统的理解和结构中。