-   NVDIMM 的性能特征与访问延迟非常低的 DRAM
    非常低，通常以十亿纳秒为单位。
-   当电源关闭时，保存在 NVDIMM 中的数据（如存储数据）会被保留。
-   直接访问(DAX)技术使应用程序能够直接访问内存映射存储，无需通过系统页面缓存。这样便可为其他目的释放
    DRAM。
:::
在以下用例中 NVDIMM 很有用，比如：
::: variablelist
[数据库]{.term}
:   NVDIMM 减少的存储访问延迟可显著提高数据库性能。
[快速重启]{.term}
:   快速重启也被称为热缓存效果。例如：文件服务器在启动后没有在内存中的文件内容。客户端连接和读取或者写入数据时，会在页面缓存中缓存这些数据。最后，缓存包括大多数热数据。重启后，该系统必须在传统存储上再次启动该进程。
    如果应用程序设计正确，NVDIMM
    可让应用程序在重启后保留热缓存。在本例中，不会涉及页面缓存：应用将数据直接缓存到持久内存中。
[快速写缓存]{.term}
:   在数据被存入持久介质前，文件服务器通常不会确认客户端的写入请求。使用
    NVDIMM
    作为快速写入缓存可让文件服务器快速确认写入请求，因为会较低延迟。
:::
:::
::: section
::: titlepage
# []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#nvdimm-interleaving-and-regions_using-nvdimm-persistent-memory-storage}NVDIMM 交集和地区 {.title}
:::
NVDIMM 设备支持分组到交集区域。
NVDIMM 设备可以像常规 DRAM 一样分组为 interleave 组件。interleave
集与跨多个 DIMM 的 RAID 0 级别（条带）配置类似。Interleave 集也称为
[*区域（region）*]{.emphasis}。
交集具有以下优点：
::: itemizedlist
-   NVDIMM 设备配置为交集时可受益于提升的性能。
-   交集可将多个较小的 NVDIMM 设备组合成更大的逻辑设备。
:::
NVDIMM 交集是在系统 BIOS 或 UEFI 固件中配置的。
Red Hat Enterprise Linux 为每个交集创建一个区域设备。
:::
::: section
::: titlepage
# []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#nvdimm-namespaces_using-nvdimm-persistent-memory-storage}NVDIMM 命名空间 {.title}
:::
NVDIMM
区域被分成一个或多个命名空间。命名空间允许您根据命名空间类型，使用不同的方法访问该设备。
有些 NVDIMM 设备不支持区域中的多个命名空间：
::: itemizedlist
-   如果您的 NVDIMM 设备支持标签，您可以将区域重新划分到命名空间。
-   如果您的 NVDIMM
    设备不支持标签，则区域只能包含单个命名空间。在这种情况下，Red Hat
    Enterprise Linux 会创建一个覆盖整个区域的默认命名空间。
:::
:::
::: section
::: titlepage
# []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#nvdimm-access-modes_using-nvdimm-persistent-memory-storage}NVDIMM 访问模式 {.title}
:::
您可以将 NVDIMM 命名空间配置为使用以下模式之一：
::: variablelist
[`sector`{.literal}]{.term}
:   将存储显示为一个快速块设备。此模式适用于尚未修改为使用 NVDIMM
    存储的旧应用程序，或用于利用完整 I/O
    堆栈（包括设备映射器）的应用程序。
    `sector`{.literal}
    设备可以与系统中的其它块设备相同。您可以在其中创建分区或文件系统，将其配置为软件
    RAID 集的一部分，或者将其用作 `dm-cache`{.literal} 的缓存设备。
    此模式中的设备位于
    `/dev/pmemNs`{.literal}。请参阅创建命名空间后列出的
    `blockdev`{.literal} 值。
[`devdax`{.literal}，或者设备直接访问（DAX）]{.term}
:   支持 NVDIMM 设备支持直接访问编程，如存储网络行业协会(SNIA)非Volatile
    Memory(NVM)编程模型规格中所述。在这种模式中，I/O
    绕过内核的存储堆栈。因此无法使用设备映射器驱动程序。
    设备 DAX 通过使用 DAX 字符设备节点提供对 NVDIMM 存储的原始访问。使用
    CPU 缓存清除和隔离说明，可以使 `devdax`{.literal}
    设备中的数据持久化。某些数据库和虚拟机系统管理程序可能会从此模式中受益。无法在
    `devdax`{.literal} 设备中创建文件系统。
    此模式中的设备位于
    `/dev/daxN.M`{.literal}。请参阅创建命名空间后列出的
    `chardev`{.literal} 值。
[`fsdax`{.literal}，或者文件系统直接访问（DAX）]{.term}
:   支持 NVDIMM 设备支持直接访问编程，如存储网络行业协会(SNIA)非Volatile
    Memory(NVM)编程模型规格中所述。在这种模式中，I/O
    绕过内核的存储堆栈，因此无法使用许多设备映射器驱动程序。
    您可以在文件系统 DAX 设备中创建文件系统。
    此模式中的设备位于
    `/dev/pmemN`{.literal}。请参阅创建命名空间后列出的
    `blockdev`{.literal} 值。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    文件系统 DAX 技术仅作为技术预览提供，红帽不提供支持。
    :::
[`raw`{.literal}]{.term}
:   显示不支持 DAX
    的内存磁盘。在这个模式中，命名空间有一些限制，不应使用。
    此模式中的设备位于
    `/dev/pmemN`{.literal}。请参阅创建命名空间后列出的
    `blockdev`{.literal} 值。
:::
:::
::: section
::: titlepage
# []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#creating-a-sector-namespace-on-an-nvdimm-to-act-as-a-block-device_using-nvdimm-persistent-memory-storage}在 NVDIMM 上创建扇区命名空间以充当块设备 {.title}
:::
您可以在扇区模式（也称为 [*旧模式*]{.emphasis} ）中配置 NVDIMM
设备来支持传统的基于块的存储。
您可以：
::: itemizedlist
-   将现有命名空间重新配置为扇区模式，或者
-   如果有可用空间，创建一个新的 sector 命名空间。
:::
::: itemizedlist
**先决条件**
-   一个 NVDIMM 设备被附加到您的系统。
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-sector-namespace-on-an-nvdimm-to-act-as-a-block-device}安装 ndctl {.title}
:::
此流程安装 `ndctl`{.literal} 工具，用于配置和监控 NVDIMM 设备。
::: itemizedlist
**流程**
-   要安装 `ndctl`{.literal} 工具程序，请使用以下命令：
    ``` screen
    # yum install ndctl
    ```
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#reconfiguring-an-existing-nvdimm-namespace-to-sector-mode_creating-a-sector-namespace-on-an-nvdimm-to-act-as-a-block-device}将现有的 NVDIMM 命名空间重新配置为扇区模式 {.title}
:::
此流程将 NVDIMM 命名空间重新配置为扇区模式，以用作快速块设备。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
重新配置命名空间会删除以前存储在命名空间中的所有数据。
:::
::: itemizedlist
**先决条件**
-   已安装 `ndctl`{.literal} 工具。请参阅 ["安装
    ndctl"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-sector-namespace-on-an-nvdimm-to-act-as-a-block-device "安装 ndctl"){.xref}。
:::
::: orderedlist
**流程**
1.  将所选命名空间重新配置为扇区模式：
    ``` screen
    # ndctl create-namespace \
            --force \
            --reconfig=namespace-ID \
            --mode=sector
    ```
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531402547040}
    **例 5.1. 在扇区模式中重新配置 namespace1.0**
    ::: example-contents
    将 `namespace1.0`{.literal} 命名空间重新配置为使用
    `sector`{.literal} 模式：
    ``` screen
    # ndctl create-namespace \
            --force \
            --reconfig=namespace1.0 \
            --mode=sector
    {
      "dev":"namespace1.0",
      "mode":"sector",
      "size":"11.99 GiB (12.87 GB)",
      "uuid":"5805480e-90e6-407e-96a4-23e1cde2ed78",
      "raw_uuid":"879d9e9f-fd43-4ed5-b64f-3bcd0781391a",
      "sector_size":4096,
      "blockdev":"pmem1s",
      "numa_node":1
    }
    ```
    :::
    :::
2.  重新配置的命名空间现在包括在 `/dev`{.literal} 目录中，为
    `/dev/pmemNs`{.literal}。
:::
::: itemizedlist
**其它资源**
-   `ndctl-create-namespace(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#creating-a-new-nvdimm-namespace-in-sector-mode_creating-a-sector-namespace-on-an-nvdimm-to-act-as-a-block-device}在扇区模式下创建新 NVDIMM 命名空间 {.title}
:::
此流程在 NVDIMM 设备上创建新扇区命名空间，可让您将其用作传统块设备。
::: itemizedlist
**先决条件**
-   已安装 `ndctl`{.literal} 工具。请参阅 ["安装
    ndctl"一节](#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#installing-ndctl_creating-a-sector-namespace-on-an-nvdimm-to-act-as-a-block-device "安装 ndctl"){.xref}。
-   NVDIMM 设备支持标签。
:::
::: orderedlist
**流程**
1.  列出系统中有可用空间的 `pmem`{.literal} 区域。在以下示例中，空间位于
    `region5`{.literal} 和 `region4`{.literal} 区域：
    ``` screen
    # ndctl list --regions
    [
      {
        "dev":"region5",
        "size":270582939648,
        "available_size":270582939648,
        "type":"pmem",
        "iset_id":-7337419320239190016
      },
      {
        "dev":"region4",
        "size":270582939648,
        "available_size":270582939648,
        "type":"pmem",
        "iset_id":-137289417188962304
      }
    ]
    ```
2.  在任何可用区域中，分配一个或多个命名空间：
    ``` screen
    # ndctl create-namespace \
            --mode=sector \
            --region=regionN \
            --size=namespace-size
    ```
    ::: example
    []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#idm140531402522208}
    **例 5.2. 在区域上创建命名空间**
    ::: example-contents
    以下命令在 `region4`{.literal} 中创建 36-GiB 扇区命名空间：
    ``` screen
    # ndctl create-namespace \
            --mode=sector \
            --region=region4 \
            --size=36G
    ```
    :::
    :::
3.  新命名空间现在位于 `/dev`{.literal} 目录中为
    `/dev/pmemNs`{.literal}。
:::
::: itemizedlist
**其它资源**
-   `ndctl-create-namespace(1)`{.literal} man page
:::
:::
:::
::: section
::: titlepage
# []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#creating-a-device-dax-namespace-on-an-nvdimm_using-nvdimm-persistent-memory-storage}在 NVDIMM 上创建设备 DAX 命名空间 {.title}
:::
您可以在设备 DAX 模式下配置 NVDIMM 设备来支持有直接访问功能的字符存储。
您可以：
::: itemizedlist
-   将现有命名空间重新配置为设备 DAX 模式，或者
-   如果有可用空间，创建一个新设备 DAX 命名空间。
:::
::: itemizedlist
**先决条件**
-   一个 NVDIMM 设备被附加到您的系统。
:::
::: section
::: titlepage
## []{#using-nvdimm-persistent-memory-storage_managing-storage-devices.html#nvdimm-in-device-direct-access-mode_creating-a-device-dax-namespace-on-an-nvdimm}设备直接访问模式中的 NVDIMM {.title}
:::
设备直接访问（设备
DAX，`devdax`{.literal}）为应用程序提供了直接访问存储的方法，而无需文件系统。设备
DAX 的优点是它提供了一个有保证的故障粒度，可以使用 `ndctl`{.literal}
工具的 `--align`{.literal} 选项进行配置
对于 Intel 64 和 AMD64 构架，支持以下故障颗粒度：