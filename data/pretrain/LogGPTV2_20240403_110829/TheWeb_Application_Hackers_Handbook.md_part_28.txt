appropriately salted to reduce the effectiveness of precomputed offl ine
attacks. The salt should be specifi c to the account that owns the password,
such that an attacker cannot replay or substitute hash values.
n Client-side “remember me” functionality should in general remember only
nonsecret items such as usernames. In less security-critical applications,
it may be considered appropriate to allow users to opt in to a facility to
remember passwords. In this situation, no cleartext credentials should be
stored on the client (the password should be stored reversibly encrypted
using a key known only to the server). Also, users should be warned about
risks from an attacker who has physical access to their computer or who
compromises their computer remotely. Particular attention should be paid
to eliminating cross-site scripting vulnerabilities within the application
that may be used to steal stored credentials (see Chapter 12).
n A password change facility should be implemented (see the “Prevent
Misuse of the Password Change Function” section), and users should be
required to change their password periodically.
n Where credentials for new accounts are distributed to users out-of-band,
these should be sent as securely as possible and should be time-limited.
The user should be required to change them on fi rst login and should be
told to destroy the communication after fi rst use.
n Where applicable, consider capturing some of the user’s login information
(for example, single letters from a memorable word) using drop-down
menus rather than text fi elds. This will prevent any keyloggers installed
on the user’s computer from capturing all the data the user submits. (Note,
however, that a simple keylogger is only one means by which an attacker
can capture user input. If he or she has already compromised a user’s
computer, in principle an attacker can log every type of event, including
mouse movements, form submissions over HTTPS, and screen captures.)
Validate Credentials Properly
n Passwords should be validated in full — that is, in a case-sensitive way,
without fi ltering or modifying any characters, and without truncating
the password.
n The application should be aggressive in defending itself against unex-
pected events occurring during login processing. For example, depending
on the development language in use, the application should use catch-all
exception handlers around all API calls. These should explicitly delete all
cc0066..iinndddd 119933 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 194
194 Chapter 6 n Attacking Authentication
session and method-local data being used to control the state of the login
processing and should explicitly invalidate the current session, thereby
causing a forced logout by the server even if authentication is somehow
bypassed.
n All authentication logic should be closely code-reviewed, both as pseudo-
code and as actual application source code, to identify logic errors such
as fail-open conditions.
n If functionality to support user impersonation is implemented, this should
be strictly controlled to ensure that it cannot be misused to gain unau-
thorized access. Because of the criticality of the functionality, it is often
worthwhile to remove this functionality from the public-facing applica-
tion and implement it only for internal administrative users, whose use
of impersonation should be tightly controlled and audited.
n Multistage logins should be strictly controlled to prevent an attacker from
interfering with the transitions and relationships between the stages:
n All data about progress through the stages and the results of previous
validation tasks should be held in the server-side session object and
should never be transmitted to or read from the client.
n No items of information should be submitted more than once by the
user, and there should be no means for the user to modify data that
has already been collected and/or validated. Where an item of data
such as a username is used at multiple stages, this should be stored
in a session variable when fi rst collected and referenced from there
subsequently.
n The fi rst task carried out at every stage should be to verify that all
prior stages have been correctly completed. If this is not the case, the
authentication attempt should immediately be marked as bad.
n To prevent information leakage about which stage of the login failed
(which would enable an attacker to target each stage in turn), the appli-
cation should always proceed through all stages of the login, even
if the user failed to complete earlier stages correctly, and even if the
original username was invalid. After proceeding through all the stages,
the application should present a generic “login failed” message at the
conclusion of the fi nal stage, without providing any information about
where the failure occurred.
n Where a login process includes a randomly varying question, ensure that
an attacker cannot effectively choose his own question:
n Always employ a multistage process in which users identify themselves
at an initial stage and the randomly varying question is presented to
them at a later stage.
cc0066..iinndddd 119944 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 195
Chapter 6 n Attacking Authentication 195
n When a given user has been presented with a given varying question,
store that question within her persistent user profi le, and ensure that
the same user is presented with the same question on each attempted
login until she successfully answers it.
n When a randomly varying challenge is presented to the user, store the
question that has been asked in a server-side session variable, rather
than a hidden fi eld in an HTML form, and validate the subsequent
answer against that saved question.
NOTE The subtleties of devising a secure authentication mechanism run
deep here. If care is not taken in the asking of a randomly varying question,
this can lead to new opportunities for username enumeration. For example, to
prevent an attacker from choosing his own question, an application may store
within each user’s profi le the last question that user was asked, and continue
presenting that question until the user answers it correctly. An attacker who
initiates several logins using any given user’s username will be met with the
same question. However, if the attacker carries out the same process using
an invalid username, the application may behave differently: because no
user profi le is associated with an invalid username, there will be no stored
question, so a varying question will be presented. The attacker can use this
difference in behavior, manifested across several login attempts, to infer the
validity of a given username. In a scripted attack, he will be able to harvest
numerous usernames quickly.
If an application wants to defend itself against this possibility, it must go to
some lengths. When a login attempt is initiated with an invalid username, the
application must record somewhere the random question that it presented
for that invalid username and ensure that subsequent login attempts using
the same username are met with the same question. Going even further, the
application could switch to a different question periodically to simulate the
nonexistent user’s having logged in as normal, resulting in a change in the
next question! At some point, however, the application designer must draw a
line and concede that a total victory against such a determined attacker prob-
ably is not possible.
Prevent Information Leakage
n The various authentication mechanisms used by the application should
not disclose any information about authentication parameters, through
either overt messages or inference from other aspects of the application’s
behavior. An attacker should have no means of determining which piece
of the various items submitted has caused a problem.
n A single code component should be responsible for responding to all failed
login attempts with a generic message. This avoids a subtle vulnerability
cc0066..iinndddd 119955 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 196
196 Chapter 6 n Attacking Authentication
that can occur when a supposedly uninformative message returned from
different code paths can actually be spotted by an attacker due to typo-
graphical differences in the message, different HTTP status codes, other
information hidden in HTML, and the like.
n If the application enforces some kind of account lockout to prevent brute-
force attacks (as discussed in the next section), be careful not to let this
lead to any information leakage. For example, if an application discloses
that a specifi c account has been suspended for X minutes due to Y failed
logins, this behavior can easily be used to enumerate valid usernames. In
addition, disclosing the precise metrics of the lockout policy enables an
attacker to optimize any attempt to continue guessing passwords in spite
of the policy. To avoid enumeration of usernames, the application should
respond to any series of failed login attempts from the same browser with a
generic message advising that accounts are suspended if multiple failures
occur and that the user should try again later. This can be achieved using a
cookie or hidden fi eld to track repeated failures originating from the same
browser. (Of course, this mechanism should not be used to enforce any
actual security control — only to provide a helpful message to ordinary
users who are struggling to remember their credentials.)
n If the application supports self-registration, it can prevent this function
from being used to enumerate existing usernames in two ways:
n Instead of permitting self-selection of usernames, the application can
create a unique (and unpredictable) username for each new user, thereby
obviating the need to disclose that a selected username already exists.
n The application can use e-mail addresses as usernames. Here, the
fi rst stage of the registration process requires the user to enter her
e-mail address, whereupon she is told simply to wait for an e-mail
and follow the instructions contained within it. If the e-mail address
is already registered, the user can be informed of this in the e-mail. If
the address is not already registered, the user can be provided with a
unique, unguessable URL to visit to continue the registration process.
This prevents the attacker from enumerating valid usernames (unless
he happens to have already compromised a large number of e-mail
accounts).
Prevent Brute-Force Attacks
n Measures need to be enforced within all the various challenges imple-
mented by the authentication functionality to prevent attacks that attempt
to meet those challenges using automation. This includes the login itself,
cc0066..iinndddd 119966 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 197
Chapter 6 n Attacking Authentication 197
as well as functions to change the password, to recover from a forgotten
password situation, and the like.
n Using unpredictable usernames and preventing their enumeration presents
a signifi cant obstacle to completely blind brute-force attacks and requires
an attacker to have somehow discovered one or more specifi c usernames
before mounting an attack.
n Some security-critical applications (such as online banks) simply disable
an account after a small number of failed logins (such as three). They also
require that the account owner take various out-of-band steps to reactivate
the account, such as telephoning customer support and answering a series
of security questions. Disadvantages of this policy are that it allows an
attacker to deny service to legitimate users by repeatedly disabling their
accounts, and the cost of providing the account recovery service. A more
balanced policy, suitable for most security-aware applications, is to sus-
pend accounts for a short period (such as 30 minutes) following a small
number of failed login attempts (such as three). This serves to massively
slow down any password-guessing attack, while mitigating the risk of
denial-of-service attacks and also reducing call center work.
n If a policy of temporary account suspension is implemented, care should
be taken to ensure its effectiveness:
n To prevent information leakage leading to username enumeration, the
application should never indicate that any specifi c account has been
suspended. Rather, it should respond to any series of failed logins,
even those using an invalid username, with a message advising that
accounts are suspended if multiple failures occur and that the user
should try again later (as just discussed).
n The policy’s metrics should not be disclosed to users. Simply telling
legitimate users to “try again later” does not seriously diminish their
quality of service. But informing an attacker exactly how many failed
attempts are tolerated, and how long the suspension period is, enables
him to optimize any attempt to continue guessing passwords in spite
of the policy.
n If an account is suspended, login attempts should be rejected without
even checking the credentials. Some applications that have imple-
mented a suspension policy remain vulnerable to brute-forcing because
they continue to fully process login attempts during the suspension
period, and they return a subtly (or not so subtly) different mes-
sage when valid credentials are submitted. This behavior enables
an effective brute-force attack to proceed at full speed regardless of
the suspension policy.
cc0066..iinndddd 119977 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 198
198 Chapter 6 n Attacking Authentication
n Per-account countermeasures such as account lockout do not help protect
against one kind of brute-force attack that is often highly effective — iterat-
ing through a long list of enumerated usernames, checking a single weak
password, such as password. For example, if fi ve failed attempts trigger
an account suspension, this means an attacker can attempt four different
passwords on every account without causing any disruption to users. In
a typical application containing many weak passwords, such an attacker
is likely to compromise many accounts.
The effectiveness of this kind of attack will, of course, be massively reduced
if other areas of the authentication mechanism are designed securely. If
usernames cannot be enumerated or reliably predicted, an attacker will
be slowed down by the need to perform a brute-force exercise in guessing
usernames. And if strong requirements are in place for password quality,
it is far less likely that the attacker will choose a password for testing that
even a single user of the application has chosen.
In addition to these controls, an application can specifi cally protect itself
against this kind of attack through the use of CAPTCHA (Completely
Automated Public Turing test to tell Computers and Humans Apart)
challenges on every page that may be a target for brute-force attacks (see
Figure 6-9). If effective, this measure can prevent any automated submission
of data to any application page, thereby keeping all kinds of password-
guessing attacks from being executed manually. Note that much research
has been done on CAPTCHA technologies, and automated attacks against
them have in some cases been reliable. Furthermore, some attackers have
been known to devise CAPTCHA-solving competitions, in which unwit-
ting members of the public are leveraged as drones to assist the attacker.
However, even if a particular kind of challenge is not entirely effective, it
will still lead most casual attackers to desist and fi nd an application that
does not employ the technique.
Figure 6-9: A CAPTCHA control
designed to hinder automated attacks
TIP If you are attacking an application that uses CAPTCHA controls to hin-
der automation, always closely review the HTML source for the page where
the image appears. The authors have encountered cases where the solution
cc0066..iinndddd 119988 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 199
Chapter 6 n Attacking Authentication 199
to the puzzle appears in literal form within the ALT attribute of the image
tag, or within a hidden form fi eld, enabling a scripted attack to defeat the
protection without actually solving the puzzle itself.
Prevent Misuse of the Password Change Function
n A password change function should always be implemented, to allow
periodic password expiration (if required) and to allow users to change
passwords if they want to for any reason. As a key security mechanism,
this needs to be well defended against misuse.
n The function should be accessible only from within an authenticated session.
n There should be no facility to provide a username, either explicitly or via
a hidden form fi eld or cookie. Users have no legitimate need to attempt
to change other people’s passwords.
n As a defense-in-depth measure, the function should be protected from
unauthorized access gained via some other security defect in the applica-
tion — such as a session-hijacking vulnerability, cross-site scripting, or
even an unattended terminal. To this end, users should be required to
reenter their existing password.
n The new password should be entered twice to prevent mistakes. The appli-
cation should compare the “new password” and “confi rm new password”
fi elds as its fi rst step and return an informative error if they do not match.
n The function should prevent the various attacks that can be made against
the main login mechanism. A single generic error message should be used
to notify users of any error in existing credentials, and the function should
be temporarily suspended following a small number of failed attempts
to change the password.
n Users should be notifi ed out-of-band (such as via e-mail) that their pass-
word has been changed, but the message should not contain either their
old or new credentials.
Prevent Misuse of the Account Recovery Function
n In the most security-critical applications, such as online banking, account
recovery in the event of a forgotten password is handled out-of-band. A
user must make a telephone call and answer a series of security questions,
and new credentials or a reactivation code are also sent out-of-band (via
conventional mail) to the user’s registered home address. The majority of
applications do not want or need this level of security, so an automated
recovery function may be appropriate.
cc0066..iinndddd 119999 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 200
200 Chapter 6 n Attacking Authentication
n A well-designed password recovery mechanism needs to prevent accounts
from being compromised by an unauthorized party and minimize any
disruption to legitimate users.
n Features such as password “hints” should never be used, because they
mainly help an attacker trawl for accounts that have obvious hints set.
n The best automated solution for enabling users to regain control of accounts
is to e-mail the user a unique, time-limited, unguessable, single-use recov-
ery URL. This e-mail should be sent to the address that the user provided
during registration. Visiting the URL allows the user to set a new pass-
word. After this has been done, a second e-mail should be sent, indicating
that a password change was made. To prevent an attacker from denying
service to users by continually requesting password reactivation e-mails,
the user’s existing credentials should remain valid until they are changed.