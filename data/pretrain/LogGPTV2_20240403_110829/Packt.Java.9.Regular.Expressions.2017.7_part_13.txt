22:: ( 441ms ) :: Pattern
, Input
23:: ( 1003ms ) :: Pattern
,
Input 
24:: ( 1549ms ) :: Pattern
,
Input 
25:: ( 3010ms ) :: Pattern
, Input 
26:: ( 5884ms ) :: Pattern
, Input 
27:: ( 12588ms ) :: Pattern
, Input 
28:: ( 24765ms ) :: Pattern
, Input 
[ 129 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
29:: ( 51679ms ) :: Pattern
, Input 
Note how the execution time grows rapidly on higher values of the counter i, especially
after 25.
How to avoid catastrophic backtracking
Here are some tips to keep in mind while handling situations with catastrophic or excessive
backtracking in your regex:
When you write regular expressions, make sure they fail fast without spending a
lot of unnecessary steps in backtracking.
When using nested repetition operators or quantifiers, make sure that there is
only one unique way to match the a string.
Make good judicious use of atomic groups and possessive quantifiers to avoid
excessive backtracking.
You should avoid having too many optional matches that are not mutually
exclusive in an alternation pattern.
Be very careful when using a free-flowing pattern such as .* or .+ in your regex.
Wherever possible, use negated character classes for cutting down the
backtracking steps and for better performance.
Avoid matching hugely sized text using a single regex. It is better to match
smaller strings using your regex and call matcher.find() in a loop to get
multiple matches. If needed, use another inner pattern to match and examine the
matches found by the main pattern.
The regex with the nested quantifier that caused catastrophic backtracking is as follows:
^(\w+)*$
We can make use of possessive quantifiers to disallow any backtracking, as follows:
^(\w+)*+$
You will note a massive jump in this improved regex in any of the benchmarks or regex
testing tools, as suggested earlier.
[ 130 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Also, in the alternation regex example, we found that this regex causes excessive
backtracking for failed cases:
%%(.|\s)%%
It can be converted to the following regex to avoid excessive backtracking:
%%(\S|\s)+%%
It is even better to avoid the group and use a character class, as follows:
%%[\S\s]+%%
Note the use of \S instead of dot to make alternatives mutually exclusive.
A regex that can cause excessive backtracking is as follows:
^(?:.*:)+#$
In the preceding regex example, if we use a negated character class instead of .*, then we
can avoid catastrophic backtracking:
^(?:[^:]+:)+#$
The regex engine doesn't backtrack excessively because the negated character class, [^:],
matches any character except a colon instead of the dot that matches everything, including
the colon.
Consider another example with this regex pattern that has the nested repetition operator, +:
%(?:[p-s]+|ye|wo)+%
This regex pattern attempts to match a string that starts with the following conditions:
Must start with %
% must be followed by one or more alternations: letters p,q,r,s or the string ye or
wo
Must end with another %
Now test this regex pattern against the input string, as follows:
%yeqpsrwospqr
[ 131 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Obviously, the regex pattern is not going to match because the last % is missing. However,
note that the starting % and all the following letters will match the regex pattern before the
last %. Due to this, the regex engine will backtrack several times while making attempts to
match the complete input before finally giving up.
When testing this regex on the regex101 website's debugger, it shows the following:
match 1 failed in 748 steps
748 may be a quite a big number for the number of steps taken to fail the match for a small-
sized input. Regex patterns such as this can slow down your application considerably. Some
of them can even hang your code for many hours or days due to the catastrophic
backtracking behavior.
Now, to prevent this catastrophic backtracking behavior, let's consider the two options the
we recommended earlier:
1. Use a possessive quantifier, as follows:
%(?:[p-s]+|ye|wo)++%
On testing the preceding pattern on the same site, we get the following in the
debugger:
match 1 failed in 33 steps
2. Use an atomic group, as follows:
%(?>[p-s]+|ye|wo)+%
On testing the preceding pattern on the same site, we get the following in the
debugger:
match 1 failed in 36 steps
You can notice that by using any of the aforementioned techniques, we make the regex
engine fail sooner and avoid the unnecessarily high number of backtracking steps.
Optimization and performance enhancement
tips
Let's discuss some optimization techniques and performance enhancement guidelines.
[ 132 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Use a compiled form of regular expressions
Compile your string regex pattern using the Pattern.compile(String) method call
followed by calls to the Matcher APIs instead of calling shorthand methods in string, such
as matches(), replaceAll, and replaceFirst, especially when these matching or
replacement methods are invoked repeatedly inside a loop. Repeated calls to
String.matches() or any other regex-based method defined in the String API will
compile the String regex pattern every time; this can be very time-consuming for a complex
regex pattern.
Use a negated character class instead of the
greedy and slow .* or .+
Wherever possible, use negated character classes instead of the potential performance
draining patterns (.* or .+), as follows:
param1=[^&]+&param2=[^&]+&param3=[^&]+$
Avoid using slow-performing quantifiers, as follows:
param1=.+&param2=.+param3=.+$
Avoid unnecessary grouping
Avoiding unnecessary captured groups in your regex. If grouping is required in your regex,
then use non-capturing groups to save the overall memory footprint of the regex pattern
while executing.
Use lazy quantifiers strategically instead of
greedy quantifiers that cause excessive
backtracking
Suppose we need to match an input that contains three complete words, start, middle, and
end, separated by non-whitespace characters.
Consider using the following pattern with a lazy quantifier:
\bstart\b\S+?\bmiddle\b\S+?\bend\b
[ 133 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Instead of using the following pattern, our match will be faster if we use the preceding
pattern:
\bstart\b\S+\bmiddle\b\S+\bend\b
Make use of possessive quantifiers to avoid
backtracking
Recall that we discussed in an earlier chapter how a possessive quantifier is used for fail-
fast paradigm. Wherever possible, make good use of possessive quantifiers to tell the regex
engine to avoid backtracking.
Suppose we need to write a regex to match the text between two markers, @START@ and
@END@. It is given that the semicolon is now allowed between two markers.
We can write this regex with the + or greedy quantifier, as follows:
@START@[^;]+@END@
However, it is better to use the ++ or possessive quantifier in the regex, as follows:
@START@[^;]++@END@
This regex will be faster to execute for failed matches, such as the following string:
@START@ abc 123 foo @XYZ@
Extract common repeating substrings out of
alternation
Consider the following pattern:
(playground|player|playing)
Instead of using the preceding pattern, it is better to extract the common substring, play,
and move it to the left of alternation, as follows:
play(ground|er|ing)
[ 134 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Use atomic group to avoid backtracking and fail
fast
Recall from Chapter 6, Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups, that
an atomic group is a non-capturing group that exits the group and throws away all the
alternative positions remembered by any token inside the group, after the first match of the
pattern inside the group. Thus, it avoids backtracking to attempt all the alternatives present
in the group.
Due to this very characteristic of atomic groups, the use of atomic groups in certain
scenarios saves many unnecessary backtracking steps and speeds up the overall regex
execution.
So, use this atomic group:
\btra(?>ck|ce|ining|de|in|nsit|ns|uma)\b
It is better to use the preceding atomic group instead of the following non-capturing group:
\btra(?:ck|ce|ining|de|in|nsit|ns|uma)\b
The difference in behavior will be evident when matching an input string, such as tracker,
which fails to match.
Summary
In the final chapter of this book, we discussed some common mistakes people make while
writing regular expressions. These mistakes often cause some exceptions to be thrown at
runtime or cause the regular expressions to fail the match unexpectedly. Then, you learned
the various ways to avoid such mistakes.
We discussed catastrophic backtracking in regular expressions and the tricks to avoid
excessive backtracking. By minimizing the backtracking steps, regular expressions can
become really efficient.
You learned the testing and benchmarking techniques for regular expressions. Finally, we
covered many regex optimization and performance enhancing tips in detail. We hope these
tips help you understand the building blocks of regular expressions and write better-
performing regular expressions to solve complex parsing and matching problems.
[ 135 ]
Index
\ negated character class 29
range 26
\G boundary assertion 92 rules, escaping examples 28
rules, escaping in 27
A
subtraction 116, 117
appendReplacement method uniting 110, 112
example 87, 88, 89 character range
appendReplacement(StringBuffer sb, String about 26
replacement) method 86, 87 examples 26
appendTail method composite character classes
example 87, 88, 89 using, reasons 118
appendTail(StringBuffer sb) method 87 core constructs
atomic group 95, 96 of regular expressions 18
B D
back references DOTALL mode 38
about 47
E
invalid (non-existing) backward reference 51
of named group 48 eager matching
Basic Regular Expressions (BRE) 7 about 14
boolean matches(String regex) effect, on regular expression alternation 14, 15
about 55 engine 14
example 55 Extended Regular Expressions (ERE) 7
boundary assertions 56
boundary constructs F
about 23
forward references 49, 50
using, examples 24
G
C
glob pattern 9
catastrophic (exponential) backtracking
greedy quantifiers 21
about 127
groups
avoiding 130
about 42
character classes
capturing 42
about 25
name, using 44
escaping in 27
numbering 43
examples 25
intersection 113, 114, 115
I appendReplacement method, example 87, 88,
89
invalid (non-existing) forward reference 51 appendReplacement(StringBuffer sb, String
replacement) method 86, 87
J
appendTail method, example 87, 88, 89
Java regular expressions appendTail(StringBuffer sb) method 87
defining, Java String double escaping 36 Boolean lookingAt() method 82
embedded modes, placement 39 example 82
mode modifiers, disabling 39 find() method 85
mode modifiers, embedding 37 find(int start) method 85, 86
Unicode, supporting 32 matches() method 83, 84
Java Scanner API methods 80
regular expressions, used 65, 66, 68, 69, 70 MatchResult interface 72, 73, 74
Java String API meta characters 10
boolean matches (String regex) 55 MULTILINE mode 38
for regular expressions evaluation 54
N
String replaceAll(String regex, String
replacement) 57 named group
String replaceFirst(String regex, String back references 48
replacement) 60 replacement reference 49
String split methods 61 negated character class
about 29
L
examples 29
lazy quantifiers 21 negative lookahead 98
lookahead assertions negative lookbehind 99
about 97 non-capturing group
negative lookahead 98 about 45
positive lookahead 97 advantages 46
lookahead atomic group
O
groups, capturing in 107, 108
lookaround regex patterns optimization and performance enhancement tip
important points 99, 104 about 132
lookbehind assertions atomic group, used for avoiding backtracking and
about 98 fast failure 135
limitations, in Java regular expressions 108, 109 common repeating substrings, extracting 134
negative lookbehind 99 compiled form of regular expressions, using 133
positive lookbehind 98 negated character class, using 133
text, capturing from overlapping matches 105, possessive quantifier, used for avoiding
106 backtracking 134
lookbehind atomic group unnecessary grouping, avoiding 133
groups, capturing in 107, 108 optional capturing group 42
overlapping matches
M
text, capturing 105, 106
Matcher class
about 80
[ 137 ]
P constructs 10
core constructs 18
Pattern class Deterministic Finite Automation (DFA) engine
about 74 126
asPredicate() method, used for filtering list of eager matching 14
tokens 79 example 12, 13
example 75, 76, 78 flavors 7
positive lookahead 97 history 7
positive lookbehind 98 limiting quantifier, using 122
possessive quantifier 21, 23 matcher.goup() calling mistake 123
predefined shorthand character classes Non-deterministic Finite Automation (NFA)
about 30 engine 126
POSIX character classes 31 non-word character escape, avoiding 120
predefined zero-width assertions 91 performance, benchmarking 125
performance, testing 125
Q
predefined character classes, using instead of
quantifiers longer versions 122
about 18 problems, for solving 8
basic 19 regex metacharacters outside character class,
boundary constructs 23 escaping 120
character classes 25 required group around alternation, using 121
character classes, rules escaping in 27 unescaped hyphen, avoiding 123
examples 19 unnecessary capturing groups, avoiding 120
greedy quantifiers 21 used, in Java Scanner API 65, 66, 68, 69, 70
lazy quantifiers 21 writing, common pitfalls 119
possessive quantifier 21, 23 replacement reference
predefined shorthand character classes 30 of named group 49
special regex meta characters, escaping 27
S
Unicode, supporting in Java regular expressions
32 special regex meta characters
used, for greedy versus reluctant (lazy) matching escaping 27
20
string, matching 29
R String class
reference link 54
Regex defined zero-width assertions 92 String replaceAll(String regex, String replacement)
regex-tester library about 57
reference 126 example 58, 59, 60
RegexMatchers named references 57
reference 125 numbered references 57
regular expressions String replaceFirst(String regex, String
about 6, 7 replacement)
avoiding, for parsing XML / HTML data usage about 60
125 example 60, 61
basic rules 9, 10 String split methods
common pitfalls 119 about 61
[ 138 ]
example, limit parameter used 64, 65 preceding regex directives, negation 33
limit parameter rules 62 scripts support 33
supporting, in Java regular expressions 32
T
text, matching in regular expressions examples
35
text
capturing, from overlapping matches 105, 106 Z
U
zero-width assertions
about 91
Unicode blocks 35
predefined zero-width assertions 91
Unicode
Regex defined zero-width assertions 92
character properties, used 32