### 查询某个玩家的排名命令格式为`ZREVRANK 排行榜名称 玩家标识`。时间复杂度为`O(log(N))`。如果我们想要查询玩家 10001 的排名可以使用：`ZREVRANK user_score 10001`。![](Images/204d76e9de86035c2eb8435108a698c2.png){savepage-src="https://static001.geekbang.org/resource/image/c8/1f/c8a13f56fc4e151dd9804a9e317da91f.png"}
### 对玩家的分数进行更新，同时排名进行更新如果我们想要对玩家的分数进行增减，命令格式为`ZINCRBY 排行榜名称 分数变化 玩家标识`。时间复杂度为`O(log(N))`。比如我们想对玩家 10001 的分数减1，可以使用：`ZINCRBY user_score -1 10001`。![](Images/40e5d4de595c29ac714402ec237cf18c.png){savepage-src="https://static001.geekbang.org/resource/image/a6/14/a644a5aa7019b1cb3b7602bca4749614.png"}\然后我们再来查看下玩家 10001 的排名，使用：`ZREVRANK user_score 10001`。![](Images/9ef499a16feab71f0d3636b561afa242.png){savepage-src="https://static001.geekbang.org/resource/image/51/54/51256aa0c27547ae508fc05049b2d554.png"}\你能看到排名由 17153 降到了 18036 名。
### 查询指定玩家前后 M 名的玩家比如我们想要查询玩家 10001 前后 5 名玩家都是谁，当前已知玩家 10001的排名是 18036，那么可以使用：`ZREVRANGE user_score 18031 18041`。![](Images/5d5d36e56b36efcfb89b08be4d5ec9df.png){savepage-src="https://static001.geekbang.org/resource/image/54/91/54eae0a13dea61d15752469c9d42e591.png"}\这样就可以得到玩家 10001 前后 5 名玩家的信息。**增加或删除某个玩家，并对排名进行更新**如果我们想要删除某个玩家，命令格式为`ZREM 排行榜名称 玩家标识`。时间复杂度为`O(log(N))`。比如我们想要删除玩家 10001，可以使用：`ZREM user_score 10001`。![](Images/ccdb6d05bf9648aef221b9d4b2a866f8.png){savepage-src="https://static001.geekbang.org/resource/image/fe/d4/fee0dc8d42ca239427fe136375bda0d4.png"}\这样我们再来查询下排名在 18031 到 18041的玩家是谁，使用：`ZREVRANGE user_score 18031 18041`。![](Images/1a6fd9cbc6b6376eb3ab8734a3ee2f35.png){savepage-src="https://static001.geekbang.org/resource/image/c0/85/c06a95d1ef82cd215698585a40d91b85.png"}\你能看到玩家 10001 的信息被删除，同时后面的玩家排名都向前移了一位。如果我们想要增加某个玩家的数据，命令格式为`ZADD 排行榜名称 分数 玩家标识`。时间复杂度为`O(log(N))`。这里，我们把玩家 10001的信息再增加回来，使用：`ZADD user_score 93.1504697596 10001`。![](Images/f2bd52dda9abe404b1087805322b018e.png){savepage-src="https://static001.geekbang.org/resource/image/a3/37/a3586cd0a7819d01226e5daaf2234d37.png"}\然后我们再来看下排名在 18031 到 18041的玩家是谁，使用：`ZREVRANGE user_score 18031 18041`。![](Images/44199c578e15e35f8fb439870fff4be0.png){savepage-src="https://static001.geekbang.org/resource/image/18/ec/18de0c19c2dfb777632c8d0edd6e3bec.png"}\你能看到插入了玩家 10001 的数据之后，排名又回来了。
## 总结今天我们使用 MySQL 和 Redis搭建了排行榜，根据相同分数的处理方式，我们可以把排行榜分成并列排行榜和严格排行榜。虽然MySQL 和 Redis 都可以搭建排行榜，但两者还是有区别的。MySQL擅长存储数据，而对于数据的运算来说则效率不高，比如统计排行榜的排名，通常还是需要使用后端语言（比如Python、PHP、Java 等）再进行统计。而 Redis本身提供了丰富的排行榜统计功能，不论是增加、删除玩家，还是对某个玩家的分数进行调整，Redis都可以对排行榜实时更新，对于游戏的实时排名来说，这还是很重要的。在 Redis 中还集成了 Lua 脚本语言，通过 Lua 我们可以更加灵活地扩展 Redis的功能，同时在 Redis 中使用 Lua 语言，还可以对 Lua脚本进行复用，减少网络开销，编写代码也更具有模块化。此外 Redis 在调用Lua 脚本的时候，会将它作为一个整体，也就是说中间如果有其他的 Redis命令是不会被插入进去的，也保证了 Lua脚本执行过程中不会被其他命令所干扰。![](Images/4f34770ec2e51e81af6b2100e419dc31.png){savepage-src="https://static001.geekbang.org/resource/image/9d/ed/9dddcb0e41e56fff740a1ddaec8e05ed.png"}\我们今天使用 Redis 对 10 万名玩家的数据进行了排行榜的统计，相比于用RDBMS 实现排行榜来说，使用 Redis 进行统计都有哪些优势呢？我们使用了 Lua 脚本模拟了 10 万名玩家的数据，其中玩家的分数 score分成了两个部分，整数部分为实际的得分，小数部分为注册时间。例子中给出的严格排行榜是在分数相同的情况下，按照注册时间的长短进行的排名，注册时间长的排名靠前。如果我们将规则进行调整，同样是在分数相同的情况下，如果注册时间长的排名靠后，又该如何编写代码呢？欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。![](Images/3966c46b158eaaf5df4bf8252216b20d.png){savepage-src="https://static001.geekbang.org/resource/image/4f/58/4fd70a3267ad5aeb8c531f0996642f58.jpg"}
# 44丨DBMS篇总结和答疑：用SQLite做词云在认识 DBMS 篇中，我们讲解了 Excel+SQL、WebSQL、SQLite 以及 Redis的使用，这些 DBMS 有自己适用的领域，我们可以根据需求选择适合的DBMS。我总结了一些大家常见的问题，希望能对你有所帮助。
## 关于 Excel+SQL
### 答疑 1：关于 mysql-for-excel 的安装Excel 是我们常用的办公软件，使用 SQL 做数据分析的同学也可以使用Excel+SQL作为报表工具，通过它们提取一些指定条件的数据，形成数据透视表或者数据透视图。但是有同学在安装 mysql-for-excel-1.3.8.msi时报错，这里感谢**同学莫弹弹**给出了解答。解决这个问题的办法是在安装时需要Visual Studio 2010 Tools for Office Runtime 才能运行。它的下载链接在这里：
## 关于 WebSQL我在讲解 WebSQL 操作本地存储时，可以使用浏览器中的 Clear Storage功能。有同学问到：这里只能用户手动删除才可以吗？事实上，除了在浏览器里手动删除以外，我们完全可以通过程序来控制本地的SQLite。``{=html}使用 executeSql 函数即可，在 executeSql 函数后面有两个function，分别代表成功之后的调用，以及执行失败的调用。比如想要删除本地SQLite 的 heros 数据表，可以写成下面这样：    tx.executeSql("DROP TABLE heros",[], function(tx, result) {alert('Drop 成功');},function(tx, error) {alert('Drop 失败' + error.message);});第二个问题是，Session 是什么概念呢？HTTP 请求不是无状态的吗？我在文章中讲到过 SessionStorage，这里的 Session指的就是一个会话周期的数据，当我们关闭浏览器窗口的时候，SessionStorage存储的数据就会被清空。相比之下 localStorage存储的时间没有限制，一年之后数据依然可以存在。HTTP本身是一个无状态的连接协议，想要保持客户端与服务器之间的交互，可以使用两种交互存储方式，即Cookie 和 Session。Cookie是通过客户端保存的数据，也就是可以保存服务器发送给客户端的信息，存储在浏览器中。一般来说，在服务器上也存在一个Session，这个是通过服务器来存储的状态信息，这时会将浏览器与服务器之间的一系列交互称为一个Session。这种情况下，Session 会存储在服务器端。不过我们讲解的 sessionStorage是本地存储的解决方式，它存放在浏览器里，借用了 session会话的概念，它指的是在本地存储过程中的一种临时存储方案，数据只有在同一个session 会话中的页面才能访问，而且当 session 结束后数据也会释放掉。
## 关于 SQLite第一个问题关于 SQLite查找微信本地的聊天记录，有同学说可以导出聊天记录做个词云。这是个不错的 idea，我们既然有了SQLite，完全可以动手做个数据分析，做个词云展示。我在《数据分析 45 讲》里讲到过词云的制作方法，这里使用 Python+SQLite查询，将微信的聊天记录做个词云，具体代码如下：    import sqlite3from wordcloud import WordCloudimport matplotlib.pyplot as pltimport jiebaimport osimport re 