修改每个循环迭代的IP地址以生成唯一流。此选项必须与以下选项一起使用：loop。
确保每个--loop迭代的IPv4和IPv6数据包都是唯一的。这是以不会改变数据包CRC的方式完成的，因此通常不会影响性能。此选项将显着增加多次循环迭代生成的flow/sec。
`--unique-ip-loops=string`
分配新的唯一 IP 之前的 --loop 迭代次数。默认值为 1。假定同时使用 --loop 和 --unique-ip。
`--netmap`
将数据包直接写入启用netmap的网络适配器。
此功能将检测Linux和BSD系统上支持netmap的网络驱动程序。如果检测到，则会在执行期间绕过网络驱动程序，并直接写入网络缓冲区。这将允许您在商用网络适配器上实现全线速率，类似于商用网络流量生成器实现的速率。请注意，绕过网络驱动程序将中断通过测试接口连接的其他应用程序。
还可以通过将接口指定为`netmap:`或 `vale:` 来启用此功能。例如，`netmap:eth0` 指定接口 eth0 上的网络映射。
`--nm-delay=number`
Netmap启动延迟。此选项将整数作为参数。此选项的默认输入为：10
加载netmap后延迟的秒数。在netmap传输之前确保接口完全开启工作。需要netmap选项。默认值为10秒。
`--no-flow-stats`
阻止打印和跟踪流量，速率和到期
禁止收集和打印流量统计信息。 不使用--preload-pcap选项时，此选项可以提高性能，否则它的唯一功能是禁止打印。
流功能将跟踪和打印正在发送的流的统计信息。 简单来讲，一个流是由5元组进行唯一区分的，即源IP、目的IP、源端口、目的端口和协议。
如果指定了--loop，则从一次迭代到下一次迭代的流将不是唯一的，除非数据包被更改。 使用--unique-ip或tcpreplay-edit在迭代之间更改数据包。 
`--flow-expiry=number`
流被视为过期前的非活动秒数。此选项不得与以下选项一起使用：no-flow-stats。此选项将整数作为输入参数。 number的值被限制为：大于或等于0
此选项的默认值为：0
此选项将根据流的idle time来跟踪和报告流的过期。 pcap文件中的时间戳用于确定到期时间，而不是重放数据包的实际时间戳。例如，值30表示如果流上没有流量持续30秒，则任何后续流量都将被视为新流量，从而将增加流量和每秒流量（fps）统计量。
（例如，值 30 表示如果某个流在 30 秒内没有看到任何流量，则任何后续流量都将被视为新流，从而增加流量和每秒流量 (fps) 统计数据。）
此选项可用于优化流产品的流超时设置。当实际流量响应速度很慢时，将超时设置较低可能会导致流量被丢弃。将流量超时配置得过高可能会增加流量产品所需的资源。
请注意，在高于原始速度的重放时使用此选项可能会导致流量和fps计数膨胀。
默认值为0（无到期），典型值为30-120秒
`-P, --pid`
在启动时打印tcpreplay的PID
`--stats=number`
每X秒打印统计信息，如果为'0'则打印每个循环。此选项将整数作为输入参数。number 的值被限制为：大于或等于 0
请注意，定时延迟是"best effort"，发送数据包之间的长延迟可能会导致打印统计数据之间同样长的延迟。
`-V, --version`
打印版本信息
`-h, --less-help`
打印简单的帮助信息
`-H, --help`
打印帮助信息
`-!, --more-help`
打印详细帮助信息
`--save-opts [=cfgfile]`
将选项状态保存到cfgfile。默认值是下面的OPTION PRESETS章节中列出的最后一个配置文件。该命令在更新配置文件后退出。
`--load-opts=cfgfile, --no-load-opts`
从 cfg 文件加载选项。 no-load-opts 形式将禁止加载早期的 config/rc/ini 文件。`--no-load-opts` 提前处理，无序。
###  实例
**1、重放在客户端 ftp 连接的报文 ** 
a、在客户端使用 ethereal 抓包，存为 ftp.pcap 文件。
b、 将 ftp.pcap 文件进行 tcpprep 操作，制作 cache 文件。
```shell
[root@A ~]# tcpprep -an client -i ftp.pcap -o ftp.cache –v 
```
c、 将 DUT 设备的两个接口和 PC 的两个接口使用网线连接，使用 tcpreplay 重 放报文。注意防火墙的配置为网桥（透明）模式。 
```shell
[root@A ~]# tcpreplay -c ftp.cache -i eth0 -j eth1 ftp.pcap -R –v 
```
-R 参数表示全速发送，-v 显示打印信息。 
**2、重放在客户端 BT 连接的报文 ** 
a、在实验室 BT 下载一些台湾的娱乐节目和热门的大片，使用 ethereal 抓包， 存为 bt.pcap 文件。注意 pcap 文件大小的控制，对 pc 的内存要求比较高，我保 存了一个 600 多 M 的 pcap 文件用了 40 多分钟，大家有需要可以直接从实验室 copy。 
b、将 bt.pcap 文件进行 tcpprep 操作，制作 cache 文件。
```shell
 [root@A ~]# tcpprep -an client -i bt.pcap -o bt.cache -C "100M BT Packet" –v
```
制作 cache 文件，在 cache 文件中写入“100M BT Packet”的注释。 
c、使用 tcpreplay 重放报文。 
```shell
[root@A ~]# tcpreplay -c bt.cache -i eth0 -j eth1 bt.pcap -v –R 
```
**3、重放 tftp 服务器上抓到的报文 ** 
a、在 tftp 服务器上使用 ethereal 抓包，存为 tftp.pcap 文件。 
b、将 pcap 文件进行 tcpprep 的操作，制作 cache 文件。 
```shell
[root@A ~]# tcpprep -an server -i tftp.pcap -o tftp.cache –v 
```
注意：我在测试的时候犯了一个错误，使用 DUT 的 tftp 升级来做实验，同时穿 过 DUT 重放报文，结果在网卡发送报文的后，DUT 的 mac 地址做了的回应，导致 交互过程没有穿过 DUT，这个问题比较搞笑，上午弄了半天才发现原因，开始还 以为 udp 的连接不能重放。 
c、使用 tcpreplay 重放报文。 
```shell
[root@A ~]# tcpreplay -c tftp.cache -i eth0 -j eth1 tftp.pcap –v
```
**4、重放pcap包，并指定速率和 loop 次数**
```shell
[root@A ~]# tcpreplay -i eth1 -M 10 -l 0 /home/demo/LSDK/LSDK.pcap
```
以速率10Mbps，0为无限次循环进行重放