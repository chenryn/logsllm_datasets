        select * from users where username like concat('%',#{username},'%')
    oracle:
        select * from users where username like '%'||#{username}||'%'
    sqlserver:
        select * from users where username like '%'+#{username}+'%'
### **使用in语句**
正确写法
    mysql:
        select * from users where username like concat('%',#{username},'%')
    oracle:
        select * from users where username like '%'||#{username}||'%'
    sqlserver:
        select * from users where username like '%'+#{username}+'%'
### **使用order by语句**
和JDBC同理，使用#{}方式传参会导致order by语句失效，所以使用order by语句的时候还是需要做好过滤
## **调试分析Mybatis防止SQL注入的原理**
本人学艺不精，一直定位定位不到XMLScriptBuilder上，所以只好看一下别人写的mybatis解析过程，通过解析过程来定位方法位置
先说结论，首先Mybatis会先对mapper里面的SQL语句进行判断，判断内容为是以\${}传参还是以#{}传参，如果以#{}传参则使用?作为占位符进行预编译，Mybatis只会对SQL语句的占位符做一定的处理，处理传入参数最后的步骤还是调用会JDBC的预编译
完整调用流程：
**${}解析执行过程**
首先在XMLScriptBuilder中的parseDynamicNode()
在这里进行了一次判断，先说结论，这个isDynamic的判断其实就是判断mapper.xml中的sql语句是使用#{}预编译还是使${}拼接，使用${}则进入DynamicSqlSource，否则进入RawSqlSource
进入parseDynamicTags方法，可以发现有两种情况会使isDynamic为true，而其中isDynamic()就是用来判定的
进入isDynamic()
可以看到运行了两个方法，分别是DynamicCheckerTokenParser()以及createParser()，主要出在createParser()上，查看方法体
发现调用了GenericTokenParser方法，传入了openToken、closeToken以及handler三个参数，其中openToken的值为${、closeToken的值为}，很明显就是对sql语句进行解析，判断是否为${}方式传参，进入到GenericTokenParser方法
然而只是单纯的设置变量的值，一直向上返回到isDynamic()，进入下一条语句parser.parse(this.text);
在调试使就可清楚看到传入的值了，${}和sql语句同时出现，猜测就是在这里进行了匹配
进入到parse方法，此方法对sql语句进行解析，当遇到${}的字段则将此位置空(null)，从返回的StringBuilder值可以看出
执行完后返回到isDynamic()方法下，在return值递归，其实就是返回isDynamic的值，然后向上返回到一直返回到了parseScriptNode()方法
最终结果就会创建一个DynamicSqlSource对象
至此，对SQL语句的解析告一段落，直到运行到peopleMapper.getPeopleList1(people1)，步入到invoke方法
前面的方法大致就是获取传入的参数和获取sql语句，步进到execute方法，此方法作用是判断SQL语句的类型
由于我们的SQL语句使select，所以会落在witch体的select内，步入case select的excuteForMany方法
继续步入selectList方法，后面这里我不知道准确流程是怎么样的，反正经过我一番调试最终到了query方法这里，然后步入getBoundSql方法
步入getBoundSql方法后可以看一下参数，发现sqlSource的类型正是前面设置的DynamicSqlSource
继续步入getBoundSql方法，然后步进到rootSqlNode.apply方法
这里有有个坑点啊，可能是因为我技术不够，由于这个apply方法有很多个实现，直接步进会跑到MixerSqlNode里面，但我查阅了资料发现实际上是在TextSqlNode里面
步入createParser方法，发现调用了GenericTokenParser，这在上面解析的过程也是一样的
从parse方法中返回的StringBuider可以发现，已经成功将参数和SQL语句拼接在一起了
### **#{}解析执行过程**
在前面分析\${}的过程中就提到了在XMLScriptBuilder中的parseDynamicNode()方法，目的就是为了判断mapper.xml文件内的SQL语句究竟是用${}方式传参还是使用#{}方式传参，如果是#{}方式则最终会调用RawSqlSource方法
步入RawSqlSource方法
继续运行，步入到sqlSourceParser.parse方法
可以发现出现了解析${}时用到的函数
`GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);`
进入方法体后发现目的是设置openToken和closeToken的值分别为#{和}
真正对SQL语句进行了操作的是
`String sql = parser.parse(originalSql);`
步入parser.parse方法，运行到结尾后查看StringBuilder的值，发现函数把#{}用?替换了
到此，解析过程结束，一直运行到peopleMapper.getPeopleList1(people1)，步入到invoke方法，然后前面的流程大致和${}解析一致，进入mapperMethod.execute方法，然后会判断执行的sql语句类型，然后进入executeForMany方法，一直运行到selectList方法，最后进入query方法
query方法会调用自身作为返回值
在此方法的返回值又会调用delegate.query方法，而这个方法就是我执行#{}的方法，进入后一直运行到
    else {
        list = this.queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
    }
后进入
进入queryFromDatabase方法后运行到
    try {
        list = this.doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
    }
进入doQuery方法，进入prepareStatement()方法
其中
`Connection connection = this.getConnection(statementLog);`
是与数据库建立连接的对象
步入parameterize()方法
继续步入，到setParameters方法
setParameters方法的作用，是将SQL语句和传入的参数进行拼接
在`List parameterMappings =
this.boundSql.getParameterMappings();`中，获取了boundSql，即获取到了设置的sql语句
`ParameterMapping parameterMapping =
(ParameterMapping)parameterMappings.get(i);`
获取到了SQL语句中所需要的参数，我的SQL语句为select * from users where  
username = #{username} and password = #{password}，所以需要username和password两个参数
运行到
步入setParameter方法
在图示处打上断点，步入setNonNullParameter方法
继续在图示处打上断点，步入setParameter方法
继续在图示处打上断点，步入setNonNullParameter方法
虽然方法名是一样的，但是并不是同一个方法，步入setString方法
这里用到了动态代理，最终还是调用回了jdbc的preperStatement，在图示处打上断点并步入
发现这个setString和上文所讲的JDBC的预编译使用一个函数，后面的编译方式与JDBC相同
# **Hibernate**
## **Hibernate执行语句的两种方法**
Hibernate可以使用hql来执行SQL语句，也可以直接执行SQL语句，无论是哪种方式都有可能导致SQL注入
## **Hibernate下的SQL注入**
### **HQL**
hql语句：
    String hql = "from People where username = '" + username + "' and password = '" + password + "'";
首先先观察一下正常登录和错误登陆下的的情况
正常登录：
    Hibernate: 
        /* 
    from
        People 
    where
        username = 'admin' 
        and password = 'admin' */ select
            people0_.id as id1_0_,
            people0_.username as username2_0_,
            people0_.password as password3_0_ 
        from
            users people0_ 
        where
            people0_.username='admin' 
            and people0_.password='admin'
    admin
错误登陆：
    Hibernate: 
        /* 
    from
        People 
    where
        username = 'admin' 
        and password = 'adadawd' */ select
            people0_.id as id1_0_,
            people0_.username as username2_0_,
            people0_.password as password3_0_ 
        from
            users people0_ 
        where
            people0_.username='admin' 
            and people0_.password='adadawd'
可以发现之间的区别在于成功登录后最后面返回了用户名
尝试进行SQL注入：
输入：
    请输入用户名：
    admin' or '1'='1
    请输入密码
    qwer
返回：
    Hibernate: 
        /* 
    from
        People 
    where
        username = 'admin' 
        or '1'='1' 
        and password = 'qwer' */ select
            people0_.id as id1_0_,
            people0_.username as username2_0_,
            people0_.password as password3_0_ 
        from
            users people0_ 
        where
            people0_.username='admin' 
            or '1'='1' 
            and people0_.password='qwer'
    admin
可以发现，经过拼接后，SQL语句变为了
`from People where username = 'admin' or '1'='1' and password = 'qwer'`
说明了使用这种拼接的方式和jdbc以及mybatis是一样会产生sql注入的
正确写法：
正确使用以下几种HQL参数绑定的方式可以有效避免注入的产生
**位置参数（Positional parameter）**
    String parameter = "g1ts";
    Query query = session.createQuery("from users name = ?1", User.class);
    query.setParameter(1, parameter);
**命名参数（named parameter）**
    Query query = session.createQuery("from users name = ?1", User.class);
    String parameter = "g1ts";
    Query query = session.createQuery("from users name = :name", User.class);
    query.setParameter("name", parameter);
**命名参数列表（named parameter list）**
    List names = Arrays.asList("g1ts", "g2ts");
    Query query = session.createQuery("from users where name in (:names)", User.class);
    query.setParameter("names", names);
**类实例（JavaBean）**
    user1.setName("g1ts");
    Query query = session.createQuery("from users where name =:name", User.class);
    query.setProperties(user1);
### **SQL**
Hibernate支持使用原生SQL语句执行，所以其风险和JDBC是一致的，直接使用拼接的方法时会导致SQL注入
语句如下：  
`Query query = session.createNativeQuery("select * from user where
username = '" + username + "' and password = '" + password + "'");`
正确写法
    String parameter = "g1ts";
    Query query = session.createNativeQuery("select * from user where name = :name");
    query.setParameter("name",parameter);
## **调试分析Hibernate预防SQL注入原理**
Hibernate框架最终还是使用了JDBC中预编译防止SQL注入的方法
**完整过程**
查看一下hibernate预编译的过程
首先在
`List\ list = query.list();`
打下断点，步入
步入list方法
继续步入list方法
步入doList方法
步入bind方法
步入nullSafeSet方法
步入getBinder方法
最后调用的st.setString就是jdbc的setString方法