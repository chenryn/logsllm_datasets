The system does not focus on restarting BLE advertisements (refer to Section VIII-A3) as this approach would compromise our objective of maintaining app functionality. We also acknowledge that certain mitigations may be ineffective against a determined attacker who uses powerful antennas to execute the attack from a distance.

Our implemented system addresses these issues through two levels of abstraction. First, we extend the current Android Bluetooth stack to address vulnerabilities that could facilitate attacks. Second, we build upon these extensions to opportunistically change the state of BTC and BLE transmissions based on the medium's usage.

The system tracks the count of BTC connections, BLE connections, and BLE advertisers to determine the device's current state. The Android OS implements broadcast intents that all apps can register to receive specific device updates. Our system uses the `BOOT_COMPLETED` intent action to track when a device has booted up and enters the default state of `BTC_OFF_BLE_ON`. To track the count of BTC connections, the system monitors the `ACL_CONNECTED` and `ACL_DISCONNECTED` intent actions, which are broadcast whenever a paired BTC device connects or disconnects with the device. For tracking BLE connections, the system monitors the `BLE_ACL_CONNECTED` and `BLE_ACL_DISCONNECTED` intent actions. These BLE intents are not documented in the Android SDK, and we discovered them during our analysis of the Android code. Unfortunately, there are no intents to track BLE advertisers. Therefore, we use the Xposed framework to insert counters into the `startAdvertisingSet` and `stopAdvertisingSet` methods of the `BluetoothLeAdvertiser` class to track the count of BLE advertisers. These methods also record an app’s advertising parameters (e.g., service UUID, Tx power, service data) to modulate the BLE transmission power.

The system implements state transitions triggered by updates to the counts of BTC and BLE connections or disconnections. In many cases, even when the counts change, the transitions do not occur if the device state remains the same (e.g., two apps now broadcasting BLE advertisements instead of one). At each update, a notification is generated, allowing the user to view a list of all BTC, BLE connections, and BLE advertisements. Specifically, the system implements the following two important transitions and parameter updates:

- **BTC_OFF_BLE_ON → BTC_ON_BLE_ON**: This transition occurs when the user or an app enables BTC on the device. If no BTC connection is established within a reasonable time, the system reverts to the `BTC_OFF_BLE_ON` state. To reduce the BTC-BLE linkage attack radius, all active BLE advertisers switch to a low-power transmission mode, where the advertisements have enough power to be reachable within a 6-10 meter radius of the device. This is achieved using the Xposed framework by inserting custom code into the `setTxPowerLevel` method of the `AdvertisingSetParameters` class in the Android SDK.

- **BTC_ON_BLE_ON → BTC_OFF_BLE_ON**: This transition occurs when all paired BTC devices have disconnected from the device. As BTC is disabled, the possibility of BTC-BLE linkage attacks is eliminated. Therefore, all BLE advertisers revert to their regular transmission powers. However, to mitigate the risk of pre- and post-randomization linkage attacks, the system periodically switches all advertisers to minimum power transmission mode for a short duration. This ensures that an attacker outside this minimum range loses synchronization with the device and cannot link the pre- and post-randomized MAC addresses.

The system aims to reduce the effectiveness of attacks rather than eliminate them entirely. It does not enforce changes to apps that currently enable BTC to transmit BLE advertisements. Instead, we aim to raise awareness of this issue and provide developers with a library to easily switch to the more secure `BTC_OFF_BLE_ON` state. We validated the library by implementing a BLE Advertiser app without using any BTC code and observed that it works reliably. We believe that eliminating this attack would require significant changes to the BTC and BLE chipsets, which are beyond the scope of this work.

### C. Impact of the Mitigation System on Attack Performance

To verify the mitigation system, we loaded it on a Google Pixel smartphone and performed the same experiment twice for 220 seconds each—once using a factory image and once using our mitigation system. In both cases, we paired the smartphone with a headset and streamed audio with pauses in between. The device was set to transmit BLE advertisements at high power and placed 15 meters away from the attack system.

In the first experiment using the factory image, the attack system decoded 826 advertisements transmitted from the device and recorded 1497 BTC transmissions. In the second experiment using our mitigation system, the attack system could not decode any BLE advertisements because the mitigation system automatically switched the BLE advertiser to a low-power mode. There was no degradation in BTC audio streaming, as the attack system still recorded 2035 BTC packets during the experiment. We verified the range of the advertisements using a BLE scanner app and found that an attacker would need to be within 6 meters of the victim(s) to execute a successful attack. The BLE advertiser restored the transmit power automatically when the BTC headset was disconnected.

We also modified the StopCovid app source code to determine the effort required for app developers to use our more secure `BTC_OFF_BLE_ON` state. With the exception of method name changes, we were able to run StopCovid without BTC by modifying only 6-8 lines of code. Thus, we believe that app developers can easily protect their users from this attack by using our mitigation system.

### IX. Conclusion

We reveal that apps relying on BLE advertisements are vulnerable to tracking by linking the advertisements to Bluetooth Classic frames and ultimately to the device’s globally unique identifier (BDADDR). Despite the challenges in exploiting the coupling between BTC and BLE, our analysis allowed us to develop a proof-of-concept end-to-end attack that is highly reliable across various devices, mobile apps, types of traffic, device density, and ranges. We proposed, implemented, and evaluated a set of effective countermeasures for Android and disclosed our findings and mitigations to Apple and Google.

### Acknowledgment

This work was partially supported by grants NAVY/N00014-20-1-2124, NCAE-Cyber Research Program, and NSF/DGE-1661532.

### References

[References are listed as provided, with minor formatting adjustments for clarity and consistency.]