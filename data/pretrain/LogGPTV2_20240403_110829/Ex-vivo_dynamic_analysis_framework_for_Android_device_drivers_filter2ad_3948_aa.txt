title:Ex-vivo dynamic analysis framework for Android device drivers
author:Ivan Pustogarov and
Qian Wu and
David Lie
Ex-vivo dynamic analysis framework for Android device drivers
Ivan Pustogarov
University of Toronto
PI:EMAIL
Qian Wu
University of Toronto
PI:EMAIL
David Lie
University of Toronto
PI:EMAIL
Abstract—The ability to execute and analyze code makes many
security tasks such as exploit development, reverse engineering,
and vulnerability detection much easier. However, on embedded
devices such as Android smartphones, executing code in-vivo, on
the device, for analysis is limited by the need to acquire such
devices, the speed of the device, and in some cases the need to
ﬂash custom code onto the devices. The other option is to execute
the code ex-vivo, off the device, but this approach either requires
porting or complex hardware emulation.
In this paper, we take advantage of the observation that many
execution paths in drivers are only superﬁcially dependent on
both the hardware and kernel on which the driver executes, to
create an ex-vivo dynamic driver analysis framework for Android
devices that requires neither porting nor emulation. We achieve
this by developing a generic evasion framework that enables
driver initialization by evading hardware and kernel dependen-
cies instead of precisely emulating them, and then developing a
novel Ex-vivo AnalySIs framEwoRk (EASIER) that enables off-
device analysis with the initialized driver state. Compared to
on-device analysis, our approach enables the use of userspace
tools and scales with the number of available commodity CPU’s,
not the number of smartphones.
We demonstrate the usefulness of our framework by targeting
privilege escalation vulnerabilities in system call handlers in
platform device drivers. We ﬁnd it can load 48/62 (77%)
drivers from three different Android kernels: MSM, Xiaomi, and
Huawei. We then conﬁrm that it is able to reach and detect 21
known vulnerabilities. Finally, we have discovered 12 new bugs
which we have reported and conﬁrmed.
I. INTRODUCTION
The Android kernel is an attractive target for malicious
actors: it powers millions of mobile devices and vulnerabilities
in it are particularly dangerous as they can be exploited by
malicious code to gain high privilege execution level. Histori-
cally, the ﬁrst place to look for kernel vulnerabilities is driver
code [4], [6], [18], [25], [26]. Since Android devices ship
with different peripherals (such as cameras or accelerometers),
manufacturers customize the stock Android kernel by adding
corresponding drivers to support these peripherals. As a result,
a signiﬁcant part of these custom Android kernels consists of
driver code that may not be as rigorously audited as main
kernel components.
While vulnerabilities can be found using both static and
dynamic analysis, the latter makes triaging, understanding and
ﬁxing (or exploiting) such security vulnerabilities much easier.
For example, coverage-based fuzzing and symbolic execution
have proven to be very efﬁcient in ﬁnding vulnerabilities;
setting breakpoints, pausing execution, and peeking into mem-
ory state is important when identifying the exact cause of a
crash; taint tracking is very useful in reverse engineering; and
memory integrity checkers, such as AddressSanitizer [22] are
critical in detecting memory corruption vulnerabilities.
Dynamic analysis can be performed either on-device (in-
vivo) or off-device (ex-vivo). Unfortunately, while in-vivo
analysis might be ideal due to its accuracy, it is often im-
practical, especially at scale. This is because drivers reside in
an operating system kernel and dynamic analysis of a kernel
often requires either special privileges or special hardware,
neither of which are commonly available on Android devices.
For example, syzkaller [28] relies on running a custom kernel
on the device, but many Android devices will only boot signed
kernels. Similarly, kAFL [20] relies on the Intel PT hardware
tracing, which is not available on the ARM processors that
dominate smartphones. Finally, on-device analysis would re-
quire a smartphone of a particular model for each analysis
instance, which does not scale considering the number of
smartphone devices that exist.
The alternative to in-vivo analysis is off-device, ex-vivo
analysis in a hardware emulator. Emulated hardware has
many beneﬁts, including efﬁciency, enabling monitoring that
is unavailable on the real hardware and the ability to paral-
lelize and scale on commodity CPU clusters. Unfortunately,
it is challenging to employ emulation to dynamically analyze
device drivers for two reasons. First, drivers have hardware
dependencies on proprietary, device-speciﬁc hardware compo-
nents that are not provided by the current emulators. Unless
these dependencies are satisﬁed, the drivers will not execute
properly in an emulated environment. Unfortunately, the pro-
prietary nature of the devices means that their speciﬁcations
are not available, and while the speciﬁcations can be reverse
engineered, the effort required precludes scaling to the plethora
of Android devices that exist. Second, drivers have software
dependencies on the host kernels on which they were meant to
run1. Unfortunately, hardware dependencies between the host
kernels and the device hardware also prevent those kernels
from running in an emulator. In fact, very few hardware-
speciﬁc kernels can boot on commonly available emulators—
for example, the Qemu emulator only supports a few board-
speciﬁc kernels (such as vexpress or versatile). The
inability to boot host kernels in an emulator has been a
challenge for other work as well [3]. Running an Android
driver inside an emulator would require porting the driver to a
kernel that can be emulated, but this also requires a signiﬁcant
amount of effort.
1E.g. Qualcomm drivers depend on the MSM Android kernel subsystems
that work with Qualcomm hardware.
Some approaches such as [29] and [32] avoid having to
emulate hardware by splitting the execution between the
emulated and real systems. For example, in [29], whenever
the driver tries to access the peripheral the corresponding
calls are redirected to the physical device. However, such
approaches still have the two drawbacks we mentioned—they
require porting of the driver to an off-device kernel, as well as
manual splitting of the driver, and while they do not require
emulation of the hardware device, they require a real hardware
device for each dynamic analysis instance, limiting scalability.
Our approach. In this paper, we present evasion, a technique
for detecting and analyzing vulnerabilities using dynamic
ex-vivo device driver analysis for Android phones. Evasion
enables the ex-vivo dynamic analysis of unmodiﬁed driver
code without: (a) having to port it and its dependencies, and (b)
the requirement to have the physical device. Without emulated
peripherals and the physical device, this goal becomes a trade-
off between emulation completeness and availability. Our key
enabling insight, gained through extensive analysis of driver
code, is that while there are many execution paths that do have
hardware and software dependencies, these dependencies are
superﬁcial. For example, they may only depend on the ability
to read a device register, but not on the actual value returned;
or they may depend on a certain function returning a success
code, but not
the actual semantics of the function. Most
importantly, we observe that there are many such superﬁcially
dependent paths and such paths contain vulnerabilities. Thus,
instead of having to do the precise and rigorous work of
emulating all dependencies, we instead propose the alternative
approach of “evading” dependencies, and embody this idea in
an evasion kernel, which superﬁcially claims to satisfy the
dependency, but does so in a generic way that does not have
to be faithful to the true software or hardware component on
which the driver depends.
We demonstrate the usefulness of evasion by developing
the Ex-vivo AnalySIs framEwoRk (EASIER), which we use to
target privilege escalation vulnerabilities in driver IOCTL sys-
tem call handlers. IOCTLs are historically the biggest source
of such local privilege escalation vulnerabilities in drivers, and
are a critical component in remote exploit chains which are
considered a high-value targets in Android ecosystem [7]. One
advantage of ex-vivo analysis is that we are able to perform
this analysis with standard userspace vulnerability detection
tools, such as the AFL fuzzer [33] and the Manticore [16]
symbolic execution library. This ability is beneﬁcial because
the number and power of userspace tools greatly exceeds those
of in-kernel tools, e.g. syzkaller [28] and S2E [5], are among
the most well-known, and still, they are hard to setup and use.
EASIER works by initializing a driver with our evasion ker-
nel and then taking a snapshot of the driver with its initialized
state. EASIER then uses a CPU-only ARM emulator, which
does not need to emulate any devices, to run the snapshot while
injecting fuzzed inputs from AFL to search for vulnerabilities.
We evaluate EASIER on a corpus of 72 platform device drivers
from three different Android kernels and different kernel sub-
systems, and were able to successfully load and initialize 77%
of them up to the point where analysis of IOCTL handlers was
possible (i.e. we could execute driver code without crashes).
When tested on 26 known vulnerabilities, EASIER was able to
trigger 81% of them. We then used EASIER to fuzz the drivers
and discovered a total of 29 vulnerabilities. Manual analysis
of the discovered vulnerabilities showed that 12 are zero-day
vulnerabilities in the Xioami Android kernel. We have reported
and conﬁrmed all of these and received bug bounties for 5 of
them. The remaining 17 vulnerabilities are from the MSM
kernel, but since they were found in an older version, we are
currently in the process of verifying whether they are present
in the latest kernel version before reporting them.
Our contributions. In summary we provide two separate
contributions:
1) The evasion kernel and framework. We develop a set
of techniques and a kernel that allow us to load and
initialize an Android driver inside an alien environment
and carry out dynamic analysis of its system call handlers.
Such framework alone can be used to analyze,verify and
prepare PoC for known bugs.
2) EASIER. We introduce a way to transplant and analyze
parts of the kernel in userspace and develop fuzzing and
symbolic execution tools to analyze driver IOCTL system
calls.
The rest of the paper is organized as follows. In Section II,
we provide the necessary background on Linux kernel mod-
ules. We describe our evasion kernel in Section III and EASIER
in Section IV. We then evaluate both evasion and EASIER
in Section V. In Section VI, we discuss related work and
Section VII concludes the paper.
II. BACKGROUND
In this section, we give an overview of Linux kernel
modules, device tree ﬁles, the platform bus, and the IOCTL
system call.
A. Loadable kernel modules
In this paper, we target Android systems which are based
on Linux. In Linux, most device drivers can be compiled as
loadable kernel modules that can be dynamically linked into
the kernel after the system has booted. Once a Linux module
has been loaded it has the same privileges as any other kernel
code and can compromise the kernel just like any other kernel
code.
B. Platform bus and device tree ﬁles
Android smartphones today have most components/periph-
erals integrated into a single board. Such integrated peripherals
can be a part of the SoC or use I2C or AMBA buses, none
of which supports device discovery (as opposed to PCI or
USB device buses). The Linux kernel uses a virtual “platform
bus” for these integrated peripherals and system developers
conﬁgure the kernel to manage the peripherals with a device
tree ﬁle.
A device tree ﬁle describes hardware conﬁguration for a
speciﬁc board and provides a plain-text description for each
qcom,csid@fda00000 {
};
compatible = "qcom,csid"; /* Device ID */
cell-index = ;
reg = ;
reg-names = "csid";
interrupts = ;
interrupt-names = "csid";
qcom,csi-vdd-voltage = ;
qcom,mipi-csi-vdd-supply = ;
1
2
3
4
5
6
7
8
9
10
Listing 1: Device tree entry for msm_ispf.ko; the
compatible property identiﬁes the device.
Fig. 1: Driver initialization ﬂow
peripheral present. For example, Listing 1 shows one of the
entries describing the Camera ISP (Image Signal Processor)
for the Qualcomm Snapdragon 200 SoC. In particular,
it
includes properties that
the kernel/driver will need during
initialization such as MMIO memory ranges (ﬁeld reg) and
interrupt numbers (ﬁeld interrupts). The compiled device
tree ﬁle containing this entry is passed to the kernel at boot
time (e.g. using devicetree_image option in the case
of uBoot), which makes the kernel aware of what hardware
devices are on the board. Each peripheral in the device tree
ﬁle is identiﬁed by its compatible property.
Though device tree ﬁles are the predominant approach for
conveying device information to the kernel, another, older
option are board ﬁles, which describe devices in pure “C” and
are compiled directly into the kernel. Board ﬁles are obsolete
and used only by older kernels.
C. Module loading and initialization
When a module is loaded into the kernel,
it ﬁrst goes
through a linking process that performs symbol relocation:
modules may call functions from the host kernel at runtime,
but the locations of these functions is not known during mod-
ule compilation. Thus, after a module is loaded into the kernel,
the kernel links these function calls to their implementations
using module’s relocation table. If the kernel is missing any
of the functions required by the module, the module loading
is aborted.
Once relocation is ﬁnished, the kernel calls several func-
tions in the module to complete driver and peripheral ini-
tialization as shown in Figure 1. Each module deﬁnes an
init_module function and optionally a probe function.
The init_module function is executed by the kernel once
relocation is ﬁnished. Usually, in the case of platform devices,
this function registers the driver with one of the peripheral
buses and provides a pointer to its probe function, for
example by using the platform_driver_register API.
The bus-related code then goes through the list of existing
devices (pre-populated from a device tree ﬁle) and tries to
ﬁnd the matching device. The exact matching process is bus-
speciﬁc; in the case of the platform bus, it matches the driver
and the device based on: a) the compatible property in
the device tree ﬁle; b) the device name; or c) driver ID’s,
whichever piece of information is present. If a matching device
is found, the bus code calls the driver’s probe function. The
probe function usually creates a new ﬁle in /dev/ folder
and registers IOCTL/read/write system call handlers with
register_chrdev(). System calls made on the device
ﬁle are then handled by the registered handlers.
D. The IOCTL system call
In order to expose features of the driver and hardware
devices to userspace programs, drivers register IOCTL system
call handlers. The IOCTL system call provides more function-
ality than standard read/write system calls. It allows userspace
to issue different commands to the driver, as well as transfer
and receive arbitrary information in the form of C structures.
Generally, IOCTL system calls contain a “command” ﬁeld,
which can be set to a number of values depending on the
driver, where each value corresponds roughly to a feature of
the peripheral, and an “argument” pointer, which can point to
an arbitrary C structure whose format is deﬁned by the driver
and may depend on the command.
E. Kernel-userspace safe data copying
When a userspace program issues an IOCTL system call it
provides an argument pointer. A driver can exchange data with
userspace programs by copying data to and from the structure
that the argument points to. When doing this, drivers use the
kernel-provided copy_from_user()/copy_to_user()
functions, which accept a pointer and the size of data to
be copied to or from the kernel. These functions implement
security checks to make sure that the pointer copied to or
from falls within the address space of the process making the
system call.
III. THE EVASION KERNEL
EASIER uses the evasion kernel
to load and initialize
“alien” drivers from foreign host kernels by “evading” missing
software dependencies, missing hardware dependencies and
API data structure incompatibilities. It is important that drivers
are initialized before being passed to EASIER as drivers use
initialization to setup their execution context, which includes
important kernel structures, global variables the driver uses,
kernel API structures used in system calls (for example the
file->private_data), and resources such as MMIO
memory ranges and interrupts. The driver’s execution context
is used extensively whenever the driver and the kernel try
to speak through the kernel-driver API. If the context is not
initialized and one still tries to execute some of the driver’s
Userspaceinit_module()platform_driver_register()ModuleKernelplatform_match()probe()ioctl_impl() register_chrdev() sys_ioctl()Device tree/dev/filestatic long mdss_rotator_compat_ioctl(struct
file *file, unsigned int cmd,
unsigned long arg)
{
...
if (!rot_mgr)
return -ENODEV;
if (atomic_read(&rot_mgr->device_suspended))
return -EPERM;
if (!file->private_data)
return -EINVAL;
private = (struct mdss_rot_file_private *)file
1
2
3
4
5
6
7
8
9
10
11
12
->private_data;
if (!(mdss_rotator_file_priv_allowed(rot_mgr,
private))) {
return -EINVAL;
}
...
13
14
15
Listing 2: Code snippet of the ioctl handler from the
mdss_rotator.ko driver.
functions, e.g. a system call, it will likely result in undeﬁned
behavior and false positive crashes that are not the result of
true vulnerabilities.
To illustrate the problems that may arise if a driver is
executed without a properly initialized context, consider the
code snippet in Listing 2 that shows the beginning of the
IOCTL handler for the mdss_rotator.ko driver (suscep-
tible to CVE-2016-5344). At line 5, the handler checks if
the global variable rot_mgr has been initialized. Later, at
line 9, the file->private_data ﬁeld maintained by the
kernel is checked. If any of them is NULL, the handler returns
immediately, and no analysis is possible. Note also that simply
instrumenting the code and setting them to non-NULL values
will not work: the variables are used later in the code (line 12),
and thus should dereference to structures with properly set
ﬁelds. Thus, our goal for the evasion kernel is to successfully
initialize drivers.
Once a driver is loaded by the evasion kernel, EASIER
can then extract
the driver into userspace where fuzzing
and symbolic execution can be performed. We describe the
evasion kernel in this section and EASIER in the next section
(Section IV).
A. Overview
The need for the evasion kernel comes from the fact that
driver code is not self-contained code and in order to be
able to run it needs to be loaded into a kernel; ideally, into
the host kernel, i.e. the kernel against which the driver was
compiled. However, as explained in Section I, the vast majority
of Android host kernels cannot execute in an emulator. Instead,
we modify an emulator-supported kernel so that it can load and
initialize drivers using evasion, making it our evasion kernel.
The evasion kernel used in our experiments is based on the
stock Vanilla Linux kernel for the vexpress board for arm32
and virt board for arm64.
Before we discuss the challenges with loading a module