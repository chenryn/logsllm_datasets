Web tier. Business objects usually stay alive in memory until their corresponding 
users log out from the Web site. Ideally, the business tier should be independent from 
the Web tier. If another application needs access to the same business information or 
functionality, it should be able to interface directly with the business tier. Therefore, 
distributed component technologies, such as Web Services, can work well to facilitate 
this degree of interoperability, although simpler technologies are often chosen for the 
sake of performance. 
Separating business logic from the application logic for the Web site is a common 
design decision for large-scale applications. This design choice has many advantages 
and a few disadvantages. A design with this added layer has attractive characteristics 
from an object-oriented software engineering perspective, as it seems more 
amenable to maintenance and potential reuse, and the division seems logical. 
However, this separation can obfuscate the security impact of decisions made at 
higher layers. 
In general, if the business logic code is self-contained, it should be easier to write and 
maintain. It should also simplify the Web application code because it's primarily 
concerned with maintaining state, displaying output, and verifying authentication and 
authorization, with the exception of a few straightforward calls to business objects to 
perform business-oriented tasks. 
Separating business logic from the rest of the functionality has potential 
disadvantages, however. If business objects have a sequence of events that must 
occur in a particular order across multiple user requests, such as a multistep process 
for making a credit card payment, you effectively have two state machines that have 
to be kept in sync. The Web tier needs to be robust enough to call the business object 
methods only in the correct order, regardless of the sequencing of events users 
attempt. It also needs to reset or roll back the transaction in the business object when 
errors occur. Business objects becoming out of sync with the Web tier could lead to 
denial-of-service conditions and security exposures. 
Threading issues can also be more subtle with business objects. If you have multiple 
threads or hosts in the Web tier using the same business object at the same time, the 
potential for race conditions and desynchronization attacks can increase. 
Web Tier: Model-View-Controller 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1052 
Enterprise Web applications often further divide up functionality in the Web tier. This 
division is often done via the Model-View-Controller (MVC) architecture pattern, 
which describes a user interface as being composed of three different modules. It's 
not a Web-specific model; it actually originated in the Smalltalk language and is used 
for general-purpose user interface design. It's just that the Web development 
community, or at least the Java Web development community, has embraced the 
MVC model for enterprise Web application development. Figure 17-4 shows this 
model. The dashed lines represent an indirect relationship, and the solid lines indicate 
a direct relationship. The MVC components are described in the following sections. 
Figure 17-4. Mode- View-Controller (MVC) architecture 
Model 
The Model component is software that models the underlying business processes and 
objects of a Web site. It corresponds to the business logic of an enterprise Web 
application. In an n-tier architecture with a separate business tier, the Model 
component refers to the software in the Web tier that's responsible for driving 
interaction with the business tier. 
View 
The View component is responsible for rendering the model's contents into a view for 
the user. It corresponds to the Web site's presentation logic. 
Controller 
The Controller component takes user input and commands the model or View 
component to act on the input. In a Web application, this component is a piece of code 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1053 
that maps Web requests to model actions, and then selects the correct view based on 
the results of the model's processing. 
In a multitier MVC Web application, the Controller software handles requests from 
users. Based on these requests, the Controller calls the correct model action to handle 
the request. The model then calls business objects in the business tier, which may or 
may not proceed to call to the back-end data tier. The model interprets responses 
from the business tier and populates itself with that information. The Controller then 
chooses the view based on results from the model, and the View component renders 
the model's data back to the client. 
8.4.6 Problem Areas 
Several security issues are common in most Web applications because of inherent 
characteristics of HTTP and the Web environment. The following sections cover some 
general concerns you should be cognizant of when auditing Web code. 
Client Visibility 
Keep in mind that all data provided to the client is in a single trust domain, meaning 
users have total visibility into the client side of the Web application. Attackers can 
easily view the generated HTML for each transaction as well as other contents of all 
HTTP transactions, which leads to the following security consequences: 
All forms and form parameters can be seen, as can all URLs and URL 
parameters. Therefore, the site's logic and structure are probably be easy to 
piece together by observing the layout of files and making a few educated 
guesses. This information can be useful to attackers as they probe a target 
Web site, looking for content they can't normally see or trying to attack 
specific links in a chain of pages. Keep this possibility in mind when evaluating 
any security mechanism that derives strength from obscuritymeaning the 
expectation that attackers can't guess the location of a page, figure out the 
correct sequence of events, or determine the correct variables that need to be 
submitted. 
Hidden tags aren't hidden. If developers attempt to hide a piece of sensitive 
information by placing it in hidden tags in a dynamically generated form, they 
can get in trouble. This problem seems obvious enough, but it can surface in 
odd places. For example, if developers need to send an e-mail to an internal 
server, they might pass that internal server's IP address to an e-mail script. 
This type of exposure can also happen when passing a temporary filename 
that shouldn't have been visible to users, as it could be used later in an 
exploitable situation. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1054 
Web and static content developers occasionally put sensitive or useful 
information in HTML comments. This oversight isn't likely to be a major 
vulnerability by itself, but it can definitely lead to exposing information that 
could assist intruders in leveraging another attack vector. Watch out for 
comments that include internal IP addresses, filenames and file paths, 
authentication credentials, or explanations of functionality. 
Any client-side code, such as JavaScript, is visible to users, which can often 
lead to subtle exposures of information. For example, if a piece of JavaScript 
checks a password to make sure it's in the correct format, attackers could use 
those same rules to help construct a brute-force attack against the system. 
Also, client-side code filtering certain characters out of general-purpose input 
fields often indicates that the Web site's quality assurance (QA) team didn't 
test the impact of those characters; many QA teams don't try to bypass 
JavaScript. 
HTML obfuscation tricks generally don't work. You can use various tricks to 
obfuscate the pages' source, but attackers can usually bypass these tricks 
easily. Attackers can write their own JavaScript that reuses your functions to 
undo any obfuscation. It's better to focus on security at the server side, not 
rely on client-side browser tricks. 
Remember that users see the content of all error messages the Web 
application displays. These error messages can contain real pathnames as well 
as information that can be used in launching other types of attacks, such as 
SQL injection. 
Auditing Tip 
Examine all exposed static HTML and the contents of dynamically generated HTML to 
make sure nothing that could facilitate an attack is exposed unnecessarily. You should 
do your best to ensure that information isn't exposed unnecessarily, but at the same 
time, look out for security mechanisms that rely on obscurity because they are prone 
to fail in the Web environment. 
Client Control 
At any point, client users can construct completely arbitrary requests as they see fit, 
providing any combination of parameters, cookies, and request headers. 
Constructing these requests isn't hard and can be done by unsophisticated attackers 
with tools as simple as a text editor and a Web browser. In addition, several programs 
act as Web proxies and allow users to intercept and modify requests while they are in 
transit, making this easy task even simpler. 
The impact of this flexibility is that the server-side processing must be robust and 
capable of handling every possible combination and permutation of potential inputs. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1055 
Variables can effectively contain anything or even be missing, and page requests can 
come in any order. Web application developers can't rely on the integrity of any 
client-supplied information. Keep the following points in mind: 
All form and query parameters can be altered, not just the ones that take 
direct user input. It's common for developers to catch most of the obvious 
vectors but miss a few seemingly innocuous hidden fields, such as a category 
number or a language code. 
Client-side validation of form input via JavaScript isn't a security mechanism 
because it can be sidestepped easily. Most developers are now familiar with 
this fact and test for it, but mistakes still occur. You might see vulnerabilities 
missed by QA because the client-side interface is tested, not the server-side 
handler. So client-side code might prevent tests from identifying simple 
exploitation vectors that are available when requests are issued directly to the 
server. 
Cookies and HTTP request headers can be changed by the client. A Web 
application should treat them just like it treats any other potentially malicious 
input from users. 
Auditing Tip 
Look at each page of a Web application as though it exists in a vacuum. Consider 
every possible combination of inputs, and look for ways to create a situation the 
developer didn't intend. Determine if any of these unanticipated situations cause a 
page use the input without first validating it. 
Page Flow 
A page flow is the progression through Web pages that a users makes when 
interacting with a Web application. For example, in a Web application that allows you 
to transfer money from one account to another, the page flow might look something 
like Figure 17-5. 
Figure 17-5. Simple page flow 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1056 
A user would first browse to the TRansfer_start.php page, then select the source and 
destination accounts, enter the amount of money to transfer, and click Transfer 
Money. This takes the user to TRansfer_confirm.php, which provides an opportunity to 
review the decision, and then click to confirm the transfer. This would then take the 
user to the dotransfer.php page, which would actually perform the money transfer 
and display the transaction reference numbers. 
A common mistake in Web applications is to assume that attackers will request pages 
in a certain order. Because the client controls all requests it makes, it's entirely 
possible for the client to perform actions out of sequence. In some situations, this 
out-of-order sequence can allow attackers to bypass certain security measures and 
potentially exploit a system. 
For example, in the preceding page flow, the transfer_confirm.php page is 
responsible for validating that the source account entered in the transfer_start.php 
page actually belongs to the user. If an attacker goes straight to the dotransfer.php 
page, it's possible to bypass this check and potentially transfer money from an 
account the attacker isn't authorized to use. If the attacker did things only in the 
order developers intended, this couldn't happen because the transfer_confirm.php 
page would block the attack. 
Another page-flow related vulnerability can occur if an application makes an 
assumption about a variable or an object that a user doesn't have direct access to. For 
example, say an application places user's account number in the session after a 
successful login. All future pages in the application implicitly trust the account 
number's validity and use it to retrieve user information. There should be no possible 
way that normal use of the site through normal page flow could lead to a bad number 
getting in the session. However, if attackers can find a page they could call out of 
sequence, they could change this number in the session. Then they could potentially 
circumvent security controls and access other customer accounts. Note that this 
out-of-sequence page need change an account number for only a brief window of time, 
as attackers could use a second browser or second client with the same session to try 
to exploit the window. 
For another example of a page flow problem, say you have a page that only certain 
types of users are allowed to use. This page performs an authorization check that 
users must pass. It also makes use of a subsequent page that does more processing 
but doesn't contain the authorization check. Attackers who wouldn't be allowed to go 
to the first page could go straight to the second page and perform the unauthorized 
action. 
Auditing Tip 
Always consider what can happen if attackers visit the pages of a Web application in 
an order the developer didn't intend. Can you bypass certain security checks by 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1057 
skipping past intermediate verification pages to the functionality that actually 
performs the processing? Can you take advantage of any race conditions or cause 
unanticipated results by visiting pages that use session data out of order? Does any 
page trust the validity of an information user's control? 
Sessions 
As discussed previously, sessions are collections of data stored on the server and tied 
to a particular user. They are typically created when users log in and then destroyed 
when users finish using the application. The following sections discuss some issues 
related to sessions. 
Session Use 
During a review, you should try to find every location where each session variable is 
manipulated. For every security-related session variable, try to brainstorm a 
technique for bypassing its associated security controls and checks. 
One thing to look for is inconsistent security checks. If a particular session variable is 
set in several places, you should ensure that each one does the same validation 
before manipulating the session. If one location is more permissive than others, you 
might be able to use that to your advantage when constructing an attack. You should 
also look for different places in the same Web application that use a session variable 
for different purposes. For example, the following PHP code is used to display details 
of an account: 
# display.php 
if ($_POST["action"]=="display") 
{ 
    display_account($_SESSION["account"]); 
} 
else if ($_POST["action"]=="select") 
{ 
    if (is_my_account($_POST["account"])) 
    { 
        $_SESSION["account"]=$_POST["account"]; 
        display_menu(); 
    } 
    else 
        display_error(); 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1058 
First, the user goes to a page to select which account to view. If the user selects a 
valid account, the account variable in the session is set to reflect that valid account, 
and the user is presented a menu page with the option of displaying more information 
on that account. If the user selects an invalid account, an error page is returned, and 
the session isn't updated. Looking at this page in a vacuum, there's no way to get an 
account in the session variable account so that you can display other users' account 
information. However, this excerpt from the same application does present an 
opportunity for mischief: 
#transfer.php 
if ($_POST["action"]=="start_transfer") 
{ 
    $_SESSION["account"]=$_POST["destination_account"]; 
    $_SESSION["account2"]=$_POST["source_account"]; 
    $_SESSION["amount"]=$_POST["amount"]; 
    display_confirm_page(); 
} 
else if ($_POST["action"]=="confirm_transfer") 
{ 
    $src = $_SESSION["account"]; 
    $dst = $_SESSION["account2"]; 
    $amount = $_SESSION["amount"]; 
    if (valid_transfer($src, $dst, $amount)) 
        do_transfer($src, $dst, $amount); 
    else 
        display_error_page(); 
} 
This code is from a page created for handling transfers from one account to another, 
and it also makes use of the session. When the user elects to start a transaction, the 
preceding code stores the destination account, the target account, and the amount of 
the transfer in the session. It then displays a confirmation page that summarizes the 
transaction user is about to attempt. If the user agrees to the transaction, the values 
are pulled out of the session and then validated. If they are legitimate values, the 
transfer is carried out. 
The security vulnerability is that both pages make use of the session variable account, 
but they use it for different purposes, and different security controls surround each 
use. If an attacker goes to transfer.php first and specifies an action of 
start_transfer and the account number of a victim in the POST parameter 
destination_account, the session variable account contains that victim's account 
number. The attacker could then go to display.php and submit an action of display, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1059 
and the display.php code would trust the session variable account and display the 
details of the victim's account to the attacker. 
Another problem to look out for is inconsistent error behavior. If an application places 
a value in a session, and then fails because of an error condition, the value might still 
be left in the session and could be used through other Web requests. For example, say 
the code for display.php looks like this: 
# display.php 
if ($_POST["action"]=="display") 
{ 
    display_account($_SESSION["account"]); 
} 
else if ($_POST["action"]=="select") 
{ 
    $_SESSION["account"]=$_POST["account"]; 
    if (is_my_account($_POST["account"])) 
        display_menu(); 
    else 
        display_error(); 
} 
The developer made the mistake of updating the session variable account even if the 
account doesn't belong to the user. The Web site displays an error message indicating 
that the account isn't valid, but if an attacker proceeds to submit an action of display 
to the same page, the response will return the details of the victim's account. 
Note 
Study each session variable, and determine where it's manipulated and the security 
checks for each of its manipulations. Try to brainstorm a way to evade security checks 
and get your own values in the session variable at a useful time. 
Session handling vulnerabilities also occur when an attacker can supply a valid 
session ID to a victim, granting access to the victim's session. This is known as a 
session fixation attack and it relies on an implementation that does not issue a new 
session key after a successful login. An attacker can exploit this vulnerability by 
sending the victim a link with the session ID embedded in the URL, as shown: 