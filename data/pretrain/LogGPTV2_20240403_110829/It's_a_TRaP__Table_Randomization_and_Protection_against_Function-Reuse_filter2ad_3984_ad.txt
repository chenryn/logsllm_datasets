sub-xvtable and update the reference (line 8-10).
Algorithm 1 Update vtable references after randomization.
1: function AdaptVirtualCalls(G, V CallV ector)
2:
3:
4:
Class ← G.Find(XRef.ClassN ame)
SubV tbl ← Class.VTables[0]
for all XRef in XRef sV ector do
while XRef.Index < SubV tbl.Of f set do
SubV tbl ← SubV tbl.P receding
end while
Idx ← XRef.Index − SubV tbl.Of f set
T mp ← SubV tbl.P ermutation[Idx]
XRef.Index ← SubV tbl.Of f set + T mp
5:
6:
7:
8:
9:
10:
11:
12: end function
end for
7. SECURITY EVALUATION
We aim to prevent attacks utilizing whole-function reuse
such as RILC and COOP; our techniques complement the
existing Readactor approach which was shown by Crane et al.
to be resilient to all known ROP variants in realistic attack
scenarios [11]. Here, we evaluate the defensive strength of
Readactor++ in the face of an adversary aiming at mounting
a whole-function reuse under the conditions described in
Section 4.
Readactor provides the invariant that, modulo side chan-
nels and plain guessing, the adversary cannot disclose any
code pointers except for those pointing to trampolines. How-
ever, given control over an indirect branch, knowledge of
the address of a function’s trampoline is still suﬃcient for
the adversary to invoke that function. Locating a function’s
trampoline is in many cases simple for the adversary, be-
cause trampoline pointers are typically stored at ﬁxed oﬀsets
in vtables and other readable data structures such as the
PLT. Accordingly, this invariant does not conceptually hinder
whole-function reuse.
With Readactor++ in place, the adversary can still disclose
the addresses of trampolines that get stored into readable
structures. However, as Readactor++ randomizes the layouts
of vtables and the PLT, identifying the matching trampoline
to a function becomes a challenge for the adversary. Ne-
glecting possible side channel attacks, we observe that an
adversary can follow two strategies to overcome this obstacle:
(i) reusing functions whose trampoline pointers are stored
in large non-randomized and readable data structures (e.g.,
an application may employ custom function pointer tables
with ﬁxed or predictable entries); or (ii) guessing of entries in
randomized xvtables or the PLT. Readable tables of trampo-
line pointers are problematic, and we propose to extend the
Readactor++ protections to these through either source code
modiﬁcation, or detection and automatic rewriting during
compilation, when possible. We discuss this case further in
Section 9. We examine the probability of the latter strategy,
guessing of randomized tables’ entries, next.
7.1 Guessing Table Layouts
Our adversary model (Section 4) assumes a brute-forcing
mitigation that permanently terminates an application after
a booby trap was hit. Booby traps will not be hit during
correct program execution. Even benign programming errors
have extremely low likelihood of accidently triggering a booby
trap, since we place booby traps in tables the programmer
should never access directly.
Since hitting a booby trap will terminate the attack, a
successful adversary needs to make an uninterrupted sequence
of good guesses. What exactly constitutes a good guess
depends on the concrete attack scenario. In the best case,
the adversary always needs to guess a particular entry in
a particular xvtable or the PLT; in the worst case, a good
guess for the adversary may be any entry that is not a booby
trap. Considering the nature of existing COOP and RILC
attacks [31, 39], we believe that the former case is the most
realistic. Further, assuming in favor of the adversary that
he will only attempt to guess entries in tables with exactly
16 entries (the minimum), we can roughly approximate the
probability for Readactor++ to prevent an attack that reuses
n functions with P ≈ 1 − ( 1
16 )n. Our experiments in the
following indicate that an attacker needs at least two or
three hand-picked functions (from likely distinct tables) to
mount a successful RILC or COOP attack respectively. Thus,
the probability of preventing these attacks is lower bounded
by PRILC,min ≈ 1 − ( 1
16 )3 = 0.9997.
( 1
7.2 Practical Attacks
16 )2 = 0.9960 and PCOOP,min ≈ 1 −
To evaluate the practical strength of Readactor++, we re-
introduced an exploitable bug (CVE-2014-3176) to a recent
version of Chromium on Ubuntu 14.04 64-bit. The vulnera-
bility allows an attacker to manipulate JavaScript objects in
memory and, consequently, to construct an arbitrary memory
read-write primitive. This can be used to reliably disclose
memory pointers and hijack the control ﬂow.
We created RILC and COOP exploits for the vulnerability.
As is common practice, our exploits change the protection
of a memory region in order to execute injected shellcode.
For a successful RILC attack, an attacker must correctly
guess two function pointers. The ﬁrst function loads all
needed arguments into the register and the second is the
memory protection function. In contrast to RILC attacks
where the gadgets are chained implicitly through return
instructions, COOP attacks require an extra function to
chain the gadgets. This third function may be a conventional
ML-G, a REC-G, or an UNR-G (see Section 3).
In our
experiments we successfully executed both attacks, including
all COOP variants, on an unprotected version of Chromium.
After we applied Readactor++ all attacks failed, as expected.
8. PERFORMANCE EVALUATION
We evaluate the performance of Readactor++ on computa-
tionally-intensive code with virtual method dispatch using the
C++ benchmarks in SPEC CPU2006. Additionally we test
Readactor++ on a complex, real-world C++ application, the
Chromium web browser. Overall, we ﬁnd that Readactor++
introduces a minor overhead of 1.1%. We measured this
slowdown independently of the slowdown introduced by the
251performance slowdown of 8.4% for the combined system on
the C++ benchmarks. Crane et al. report a performance over-
head of 6.4% for their full system on all of SPEC CPU2006,
which is comparable to our results.
Chromium.
To show the impact of our transformations on a complex,
real-world application, we built and protected the Chromium
web browser.1 Since our defenses target the C++ components
of the browser and not the JavaScript engine in particular,
benchmarking the JavaScript performance of Chromium, as
most browser benchmarks do, is not useful. Instead, we use
the Chromium internal performance test suite to measure
scrolling smoothness. This measures the overall performance
of the browser when rendering web content. The test suite
consists of 25 popular websites, chosen by the Chromium de-
velopers, including 13 of the Alexa USA Top 25 sites; Google
properties such as Google search, GMail, and Youtube; news
websites such as CNN and Yahoo; and Facebook. To ac-
count for system noise, we ran each benchmark three times
and calculated the geometric mean over these runs. We
used a minimum xvtable size of at least 16 entries for this
experiment.
We found that the table randomization component of
Readactor++ incurred a geometric mean overhead of 1.0%.
This measurement was independent of any execute-only mem-
ory protection. To evaluate the full impact of Readactor++
with execute-only memory and code-pointer hiding, we com-
bined table randomization with the full Readactor system,
including small modiﬁcations to disable stack unwinding
which is incompatible with Readactor code-pointer hiding.
With all Readactor and Readactor++ protections enabled,
we measured a combined geometric mean overhead of 7.9%.
9. DISCUSSION
Extensions: We focus on protecting the two main targets
of function-reuse attacks: dynamic linking tables and C++
vtables. However, similar tables sometimes exist in other
contexts where dynamic dispatch is required. For example,
C programs which emulate a variant of object orientation
sometimes keep tables of function pointers to perform virtual
dispatch, depending on the type in question. Previous work
has explored randomizing the layout of data structures [23],
and these techniques could be extended to randomize struc-
tures or arrays of function pointers. In combination with
code-pointer hiding, data structure randomization could pro-
tect these pointers from disclosure and reuse.
Dynamic loading of libraries via dlopen on Linux and
analogous methods on Windows is a special case of dynamic
linking. The dlopen function is used to load a new library
at run time, after the program has started. The program
can then use the dlsym function to retrieve the address of
an exported function from the newly imported library. We
can extend Readactor++ to randomize any C++ libraries im-
ported during execution and update all relevant unmodiﬁed
call sites referring to classes from the imported library.
Limitations: We support all C++ programs that comply
with the language speciﬁcation and do not rely on compiler-
speciﬁc vtable implementation details. Rare C++ programs
which parse or modify their own vtables would need minor
modiﬁcation in order to handle our new split vtable layout.
1Chromium sources checked out on 2014-11-04.
Figure 7: Overhead of table randomization on SPEC
CPU2006 C++ benchmarks.
execute-only system itself, which depends on the protection
system used and whether hardware natively supports execute-
only memory. For a complete system evaluation we also used
the Readactor system to enforce execute-only memory and
hide code pointers [11]. However, even with this additional
slowdown, we ﬁnd that Readactor++ is competitive with
alternative mitigations with an average overhead of 8.4% on
SPEC, while oﬀering increased security.
In particular, Readactor++ compares favorably to the per-
formance of recent CFI implementations, after accounting
for the need to protect return addresses from disclosure and
modiﬁcation using a shadow stack. VTV [38], a C++ aware
forward-CFI implementation, which can thus defend against
COOP, incurs an average geometric mean overhead of 4.0%
on the SPEC CPU2006 C++ benchmarks using comparable
optimization techniques. Dang et al. [12] report that a pro-
tected traditional shadow stack, necessary to defend against
an attacker with arbitrary memory read/write capabilities,
incurs an average overhead of 9.7% on SPEC CPU2006. Thus,
the comparable overhead to fully protect against both tradi-
tional ROP attacks and COOP attacks using state-of-the-art
CFI is 13.7%, in contrast to our average total overhead of
8.4%.
We performed our performance evaluation on an Intel Xeon
E5-2660 server CPU running at 2.20 GHz with Turbo Boost
disabled running Ubuntu 14.04. To properly evaluate the
impact of our transformations on the entire program as well
as all relevant libraries, we applied our protections to libc++
and used this library as the standard C++ library. The
baseline uses an unprotected version of libc++ to avoid any
diﬀerences due to variations between C++ standard library
implementations.
SPEC CPU2006.
Figure 7 shows the results of our evaluation on SPEC
CPU2006. We ﬁrst evaluated our transformations indepen-
dently of any execute-only system, shown in the ﬁrst two
columns. For a smaller minimum xvtable size of ten entries
(nmin = 10), we observed a geometric mean slowdown of
0.8%. We observed a 1.1% geometric mean performance
slowdown with a minimum xvtable size of nmin = 16. Since
the additional performance slowdown is so minimal, we rec-
ommend a minimum xvtable size of at least 16 entries.
We also evaluated Readactor++ in combination with Readac-
tor’s execute-only memory protection and code-pointer hiding
(labeled Full Readactor++ in Figure 7). For this test we used
a minimum vtable size of 16 entries. We observed an average
namddealIIsoplexpovray*omnetpp*astarxalancbmkGeo Mean0510152025Performance Slowdown (%)Table Randomization (10 entries)Table Randomization (16 entries)Full Readactor++252In practice we have not seen this issue, since vtables are not a
part of the C++ standard at all and vary between compilers,
e.g. Itanium-style vtables on Linux and MSVC vftables on
Windows. Thus, compiler-agnostic programs must not rely
on vtable structure.
Due to these application binary interface (ABI) incom-
patibilities, programs which import C++ library interfaces
must always be compiled with the same C++ ABI version
as the external library. Since we modify the vtable portion
of the ABI to split vtables, we must also recompile any C++
dependencies with the same ABI. In practice, the only ex-
ternal dependency we found for Chromium or SPEC was
the C++ standard library. We rebuilt the libc++ standard
library with our modiﬁed compiler without any diﬃculty.
10. RELATED WORK
The literature on memory corruption and countermeasures
is vast. One line of defense aims at preventing corruption of
code pointers [21, 25]. Most other defenses stop later stages
of an attack by enforcing control-ﬂow integrity properties
or randomizing the code layout to prevent code reuse. We
relate our work to previous defenses of each kind and focus
on those most similar to Readactor++.
Code Layout Randomization.
Address space layout randomization (ASLR), a weak form
of diversity [32, 33], is widely deployed today and many di-
versiﬁcation approaches with ﬁner granularity have been pro-
posed in the literature (see Larsen et al. [22] for an overview).
Speciﬁcally relevant to this work is the previous proposal to
randomize the order of elements in the PLT [4]. Unfortu-
nately, without execute-only code memory most approaches
are vulnerable to just-in-time code reuse [35] and other at-
tacks that rely on information disclosure [6, 34].
To defeat JIT-ROP attacks, Backes and N¨urnberger [2]
propose Oxymoron which hides direct code references embed-
ded in direct call and jump instructions. Hence, an attacker
can no longer follow these references to identify and disas-
semble valid code pages. Unfortunately, Oxymoron can be
bypassed with an improved JIT-ROP attack that exploits
indirect memory disclosure [13]. The improved JIT-ROP
attack is possible because code pages still remain readable
in Oxymoron. As a consequence, several schemes have been
recently presented that are based on marking code pages
as non-readable such as XnR (eXecute-no-Read) [3] and Hi-
deM [17]. However, both schemes suﬀer from limitations:
HideM requires a split-TLB based architecture which no
longer exists in modern processor architectures. As pointed
out by Crane et al. [11], XnR leaves some code pages readable,
and requires very ﬁne-grained randomization to mitigate in-
direct memory disclosure. To tackle these shortcomings,
Crane et al. [11] present Readactor which hides code pointers
through a layer of indirection and uses Intel’s Extended Page
Tables (EPT) feature to enable hardware-enforced execute-
only memory rather than emulating the feature. However,
the readable trampoline pointers still provide a code base