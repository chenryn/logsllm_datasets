library support was added to glibc in version 2.5.
.sh conforming to
this system call is linux-specific.
.sh notes
.br vmsplice ()
follows the other vectorized read/write type functions when it comes to
limitations on the number of segments being passed in.
this limit is
.b iov_max
as defined in
.ir  .
currently,
.\" uio_maxiov in kernel source
this limit is 1024.
.pp
.\" commit 6a14b90bb6bc7cd83e2a444bf457a2ea645cbfe7
.br vmsplice ()
really supports true splicing only from user memory to a pipe.
in the opposite direction, it actually just copies the data to user space.
but this makes the interface nice and symmetric and enables people to build on
.br vmsplice ()
with room for future improvement in performance.
.sh see also
.br splice (2),
.br tee (2),
.br pipe (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/endian.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified 1993-07-24 by rik faith (PI:EMAIL)
.\" modified 2002-07-27 by walter harms
.\" 	(PI:EMAIL)
.\"
.th hypot 3 2021-03-22 ""  "linux programmer's manual"
.sh name
hypot, hypotf, hypotl \- euclidean distance function
.sh synopsis
.nf
.b #include 
.pp
.bi "double hypot(double " x ", double " y );
.bi "float hypotf(float " x ", float " y );
.bi "long double hypotl(long double " x ", long double " y );
.fi
.pp
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br hypot ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
        || _xopen_source
        || /* since glibc 2.19: */ _default_source
        || /* glibc = 200112l
        || /* since glibc 2.19: */ _default_source
        || /* glibc 
.\" and copyright (c) 2007 justin pryzby 
.\"
.\" %%%license_start(permissive_misc)
.\" permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "software"), to deal in the software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the software, and to
.\" permit persons to whom the software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" the above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the software.
.\"
.\" the software is provided "as is", without warranty of any kind,
.\" express or implied, including but not limited to the warranties of
.\" merchantability, fitness for a particular purpose and noninfringement.
.\" in no event shall the authors or copyright holders be liable for any
.\" claim, damages or other liability, whether in an action of contract,
.\" tort or otherwise, arising from, out of or in connection with the
.\" software or the use or other dealings in the software.
.\" %%%license_end
.\"
.th getsubopt 3 2021-08-27 "gnu" "linux programmer's manual"
.sh name
getsubopt \- parse suboption arguments from a string
.sh synopsis
.nf
.b #include 
.pp
.bi "int getsubopt(char **restrict " optionp ", char *const *restrict " tokens ,
.bi "              char **restrict " valuep );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getsubopt ():
.nf
    _xopen_source >= 500
.\"    || _xopen_source && _xopen_source_extended
        || /* since glibc 2.12: */ _posix_c_source >= 200809l
.fi
.sh description
.br getsubopt ()
parses the list of comma-separated suboptions provided in
.ir optionp .
(such a suboption list is typically produced when
.br getopt (3)
is used to parse a command line;
see for example the \fi\-o\fp option of
.br mount (8).)
each suboption may include an associated value,
which is separated from the suboption name by an equal sign.
the following is an example of the kind of string
that might be passed in
.ir optionp :
.pp
.in +4n
.ex
.b ro,name=xyz
.ee
.in
.pp
the
.i tokens
argument is a pointer to a null-terminated array of pointers to the tokens that
.br getsubopt ()
will look for in
.ir optionp .
the tokens should be distinct, null-terminated strings containing at
least one character, with no embedded equal signs or commas.
.pp
each call to
.br getsubopt ()
returns information about the next unprocessed suboption in
.ir optionp .
the first equal sign in a suboption (if any) is interpreted as a
separator between the name and the value of that suboption.
the value extends to the next comma,
or (for the last suboption) to the end of the string.
if the name of the suboption matches a known name from
.ir tokens ,
and a value string was found,
.br getsubopt ()
sets
.i *valuep
to the address of that string.
the first comma in
.i optionp
is overwritten with a null byte, so
.i *valuep
is precisely the "value string" for that suboption.
.pp
if the suboption is recognized, but no value string was found,
.i *valuep
is set to null.
.pp
when
.br getsubopt ()
returns,
.i optionp
points to the next suboption,
or to the null byte (\(aq\e0\(aq) at the end of the
string if the last suboption was just processed.
.sh return value
if the first suboption in
.i optionp
is recognized,
.br getsubopt ()
returns the index of the matching suboption element in
.ir tokens .
otherwise, \-1 is returned and
.i *valuep
is the entire
.ib name [= value ]
string.
.pp
since
.i *optionp
is changed, the first suboption before the call to
.br getsubopt ()
is not (necessarily) the same as the first suboption after
.br getsubopt ().
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br getsubopt ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
since
.br getsubopt ()
overwrites any commas it finds in the string
.ir *optionp ,
that string must be writable; it cannot be a string constant.
.sh examples
the following program expects suboptions following a "\-o" option.
.pp
.ex
#define _xopen_source 500
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    enum {
        ro_opt = 0,
        rw_opt,
        name_opt
    };
    char *const token[] = {
        [ro_opt]   = "ro",
        [rw_opt]   = "rw",
        [name_opt] = "name",
        null
    };
    char *subopts;
    char *value;
    int opt;
    int readonly = 0;
    int readwrite = 0;
    char *name = null;
    int errfnd = 0;
    while ((opt = getopt(argc, argv, "o:")) != \-1) {
        switch (opt) {
        case \(aqo\(aq:
            subopts = optarg;
            while (*subopts != \(aq\e0\(aq && !errfnd) {
            switch (getsubopt(&subopts, token, &value)) {
            case ro_opt:
                readonly = 1;
                break;
            case rw_opt:
                readwrite = 1;
                break;
            case name_opt:
                if (value == null) {
                    fprintf(stderr, "missing value for "
                            "suboption \(aq%s\(aq\en", token[name_opt]);
                    errfnd = 1;
                    continue;
                }
                name = value;
                break;
            default:
                fprintf(stderr, "no match found "
                        "for token: /%s/\en", value);
                errfnd = 1;
                break;
            }
        }
        if (readwrite && readonly) {
            fprintf(stderr, "only one of \(aq%s\(aq and \(aq%s\(aq can be "
                    "specified\en", token[ro_opt], token[rw_opt]);
            errfnd = 1;
        }
        break;
        default:
            errfnd = 1;
        }
    }
    if (errfnd || argc == 1) {
        fprintf(stderr, "\enusage: %s \-o \en", argv[0]);
        fprintf(stderr, "suboptions are \(aqro\(aq, \(aqrw\(aq, "
                "and \(aqname=\(aq\en");
        exit(exit_failure);
    }
    /* remainder of program... */
    exit(exit_success);
}
.ee
.sh see also
.br getopt (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/random_r.3
.\" copyright (c) andreas gruenbacher, february 2001
.\" copyright (c) silicon graphics inc, september 2001
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th removexattr 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
removexattr, lremovexattr, fremovexattr \- remove an extended attribute
.sh synopsis
.fam c
.nf
.b #include 
.pp
.bi "int removexattr(const char\ *" path ", const char\ *" name );
.bi "int lremovexattr(const char\ *" path ", const char\ *" name );
.bi "int fremovexattr(int " fd ", const char\ *" name );
.fi
.fam t
.sh description
extended attributes are
.ir name : value
pairs associated with inodes (files, directories, symbolic links, etc.).
they are extensions to the normal attributes which are associated
with all inodes in the system (i.e., the
.br stat (2)
data).
a complete overview of extended attributes concepts can be found in
.br xattr (7).
.pp
.br removexattr ()
removes the extended attribute identified by
.i name
and associated with the given
.i path
in the filesystem.
.pp
.br lremovexattr ()
is identical to
.br removexattr (),
except in the case of a symbolic link, where the extended attribute is
removed from the link itself, not the file that it refers to.
.pp
.br fremovexattr ()
is identical to
.br removexattr (),
only the extended attribute is removed from the open file referred to by
.i fd
(as returned by
.br open (2))
in place of
.ir path .
.pp
an extended attribute name is a null-terminated string.
the
.i name
includes a namespace prefix; there may be several, disjoint
namespaces associated with an individual inode.
.sh return value
on success, zero is returned.