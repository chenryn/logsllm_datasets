title:Enhanced Operating System Security Through Efficient and Fine-grained
Address Space Randomization
author:Cristiano Giuffrida and
Anton Kuijsten and
Andrew S. Tanenbaum
Enhanced Operating System Security Through
Efﬁcient and Fine-grained Address Space Randomization
Vrije Universiteit, Amsterdam
Vrije Universiteit, Amsterdam
Anton Kuijsten
PI:EMAIL
Cristiano Giuffrida
PI:EMAIL
Andrew S. Tanenbaum
Vrije Universiteit, Amsterdam
PI:EMAIL
Abstract
In recent years, the deployment of many application-
level countermeasures against memory errors and the in-
creasing number of vulnerabilities discovered in the ker-
nel has fostered a renewed interest in kernel-level ex-
ploitation. Unfortunately, no comprehensive and well-
established mechanism exists to protect the operating
system from arbitrary attacks, due to the relatively new
development of the area and the challenges involved.
In this paper, we propose the ﬁrst design for ﬁne-
grained address space randomization (ASR) inside the
operating system (OS), providing an efﬁcient and com-
prehensive countermeasure against classic and emerg-
ing attacks, such as return-oriented programming. To
motivate our design, we investigate the differences with
application-level ASR and ﬁnd that some of the well-
established assumptions in existing solutions are no
longer valid inside the OS; above all, perhaps, that infor-
mation leakage becomes a major concern in the new con-
text. We show that our ASR strategy outperforms state-
of-the-art solutions in terms of both performance and se-
curity without affecting the software distribution model.
Finally, we present the ﬁrst comprehensive live reran-
domization strategy, which we found to be particularly
important inside the OS. Experimental results demon-
strate that our techniques yield low run-time perfor-
mance overhead (less than 5% on average on both SPEC
and syscall-intensive benchmarks) and limited run-time
memory footprint increase (around 15% during the exe-
cution of our benchmarks). We believe our techniques
can greatly enhance the level of OS security without
compromising the performance and reliability of the OS.
1
Introduction
Kernel-level exploitation is becoming increasingly pop-
ular among attackers, with local and remote exploits sur-
facing for Windows [5], Linux [2], Mac OS X [3], BSD
variants [37, 4], and embedded operating systems [25].
This emerging trend stems from a number of important
factors. First, the deployment of defense mechanisms for
user programs has made application-level exploitation
more challenging. Second, the kernel codebase is com-
plex, large, and in continuous evolution, with many new
vulnerabilities inevitably introduced over time. Studies
on the Linux kernel have shown that its codebase has
more than doubled with a steady fault rate over the past
10 years [55] and that many known but potentially crit-
ical bugs are at times left unpatched indeﬁnitely [29].
Third, the number of targets in large-scale attacks is sig-
niﬁcant, with a plethora of internet-connected machines
running the same kernel version independently of the
particular applications deployed. Finally, an attacker has
generally more opportunities inside the OS, for example
the ability to disable in-kernel defense mechanisms or
the option to execute shellcode at the user level (similar
to classic application-level attacks) or at the kernel level
(approach taken by kernel rootkits).
Unfortunately, existing OS-level countermeasures fail
to provide a comprehensive defense mechanism against
generic memory error exploits. A number of techniques
aim to thwart code injection attacks [65, 28, 60], but
are alone insufﬁcient to prevent return-into-kernel-text
attacks [56] and return-oriented programming (ROP) in
general [35]. Other approaches protect kernel hooks or
generally aim at preserving control-ﬂow integrity [69,
74, 44, 57]. Unfortunately, this does not prevent attack-
ers from tampering with noncontrol data, which may lead
to privilege escalation or allow other attacks.
In addi-
tion, most of these techniques incur high overhead and
require virtualization support, thus increasing the size of
the trusted computing base (TCB).
In this paper, we explore the beneﬁts of address space
randomization (ASR) inside the operating system and
present the ﬁrst comprehensive design to defend against
classic and emerging OS-level attacks. ASR is a well-
established defense mechanism to protect user programs
against memory error exploits [12, 39, 14, 72, 73]; all
the major operating systems include some support for it
at the application level [1, 68]. Unfortunately, the OS it-
self is typically not randomized at all. Recent Windows
releases are of exception, as they at least randomize the
base address of the text segment [56]. This randomiza-
tion strategy, however, is wholly insufﬁcient to counter
many sophisticated classes of attacks (e.g., noncontrol
data attacks) and is extremely vulnerable to information
leakage, as better detailed later. To date, no strategy has
been proposed for comprehensive and ﬁne-grained OS-
level ASR. Our effort lays the ground work to ﬁll the gap
between application-level ASR and ASR inside the OS,
identifying the key requirements in the new context and
proposing effective solutions to the challenges involved.
Contributions. The contributions of this paper are
threefold. First, we identify the challenges and the key
requirements for a comprehensive OS-level ASR solu-
tion. We show that a number of assumptions in exist-
ing solutions are no longer valid inside the OS, due to
the more constrained environment and the different at-
tack models. Second, we present the ﬁrst design for ﬁne-
grained ASR for operating systems. Our approach ad-
dresses all the challenges considered and improves ex-
isting ASR solutions in terms of both performance and
security, especially in light of emerging ROP-based at-
tacks. In addition, we consider the application of our de-
sign to component-based OS architectures, presenting a
fully ﬂedged prototype system and discussing real-world
applications of our ASR technique. Finally, we present
the ﬁrst generic live rerandomization strategy, particu-
larly central in our design. Unlike existing techniques,
our strategy is based on run-time state migration and can
transparently rerandomize arbitrary code and data with
no state loss. In addition, our rerandomization code runs
completely sandboxed. Any run-time error at rerandom-
ization time simply results in restoring normal execution
without endangering the reliability of the OS.
2 Background
The goal of address space randomization is to ensure that
code and data locations are unpredictable in memory,
thus preventing attackers from making precise assump-
tions on the memory layout. To this end, ﬁne-grained
ASR implementations [14, 39, 72] permute the order of
individual memory objects, making both their addresses
and their relative positioning unpredictable. This strat-
egy attempts to counter several classes of attacks.
Attacks on code pointers. The goal of these attacks
is to override a function pointer or the return address on
the stack with attacker-controlled data and subvert con-
trol ﬂow. Common memory errors that can directly al-
low these attacks are buffer overﬂows, format bugs, use-
after-free, and uninitialized reads. In the ﬁrst two cases,
the attack requires assumptions on the relative distance
between two memory objects (e.g., a vulnerable buffer
and a target object) to locate the code pointer correctly.
In the other cases, the attack requires assumptions on the
relative alignment between two memory objects in case
of memory reuse. For example, use-after-free attacks re-
quire control over the memory allocator to induce the al-
location of an object in the same location of a freed ob-
ject still pointed by a vulnerable dangling pointer. Simi-
larly, attacks based on stack/heap uninitialized reads re-
quire predictable allocation strategies to reuse attacker-
controlled data from a previously deallocated object. All
these attacks also rely on the absolute location of the
code the attacker wants to execute, in order to adjust the
value of the code pointer correctly. In detail, code in-
jection attacks rely on the location of attacker-injected
shellcode. Attacks using return-into-libc strategies [22]
rely on the location of a particular function—or multiple
functions in case of chained return-into-libc attacks [52].
More generic attacks based on return-oriented program-
ming [66] rely on the exact location of a number of gad-
gets statically extracted from the program binary.
Attacks on data pointers. These attacks commonly
exploit one of the memory errors detailed above to over-
ride the value of a data pointer and perform an arbitrary
memory read/write. Arbitrary memory reads are often
used to steal sensitive data or information on the mem-
ory layout. Arbitrary memory writes can also be used
to override particular memory locations and indirectly
mount other attacks (e.g., control-ﬂow attacks). Attacks
on data pointers require the same assumptions detailed
for code pointers, except the attacker needs to locate the
address of some data (instead of code) in memory.
Attacks on nonpointer data. Attacks in this category
target noncontrol data containing sensitive information
(e.g., uid). These attacks can be induced by an arbitrary
memory write or commonly originate from buffer over-
ﬂows, format bugs, integer overﬂows, signedness bugs,
and use-after-free memory errors. While unable to di-
rectly subvert control ﬂow, they can often lead to priv-
ilege escalation or indirectly allow other classes of at-
tacks. For example, an attacker may be able to perform
an arbitrary memory write by corrupting an array index
which is later used to store attacker-controlled data. In
contrast to all the classes of attacks presented earlier,
nonpointer data attacks only require assumptions on the
relative distance or alignment between memory objects.
3 Challenges in OS-level ASR
This section investigates the key challenges in OS-level
address space randomization, analyzing the differences
with application-level ASR and reconsidering some of
the well-established assumptions in existing solutions.
We consider the following key issues in our analysis.
W⊕X. A number of ASR implementations comple-
ment their design with W⊕X protection [68]. The idea
is to prevent code injection attacks by ensuring that no
memory page is ever writable and executable at the same
time. Studies on the Linux kernel [45], however, have
shown that enforcing the same property for kernel pages
introduces implementation issues and potential sources
of overhead.
In addition, protecting kernel pages in a
combined user/kernel address space design does not pre-
vent an attacker from placing shellcode in an attacker-
controlled application and redirecting execution there.
Alternatively, the attacker may inject code into W∧X re-
gions with double mappings that operating systems share
with user programs (e.g., vsyscall page on Linux) [56].
Instrumentation. Fine-grained ASR techniques typi-
cally rely on code instrumentation to implement a com-
prehensive randomization strategy. For example, Bhak-
tar et al. [14] heavily instrument the program to cre-
ate self-randomizing binaries that completely rearrange
their memory layout at load time. While complex in-
strumentation strategies have been proven practical for
application-level solutions,
their applicability to OS-
level ASR raises a number of important concerns. First,
heavyweight instrumentation may introduce signiﬁcant
run-time overhead which is ill-affordable for the OS.
Second, these load-time ASR strategies are hardly sus-
tainable, given the limited operations they would be able
to perform and the delay they would introduce in the boot
process. Finally, complex instrumentation may introduce
a lot of untrusted code executed with no restriction at
runtime, thus endangering the reliability of the OS or
even opening up new opportunities for attack.
Run-time constraints. There are a number of con-
straints that signiﬁcantly affect the design of an OS-level
ASR solution. First, making strong assumptions on the
memory layout at load time simpliﬁes the boot process.
This means that some parts of the operating system may
be particularly hard to randomize. In addition, existing
rerandomization techniques are unsuitable for operating
systems. They all assume a stateless model in which a
program can gracefully exit and restart with a fresh reran-
domized layout. Loss of critical state is not an option for
an OS and neither is a full reboot, which introduces unac-
ceptable downtime and loss of all the running processes.
Luckily, similar restrictions also apply to an adversary
determined to attack the system. Unlike application-level
attacks, an exploit needs to explicitly recover any critical
memory object corrupted during the attack or the system
will immediately crash after successful exploitation.
Attack model. Kernel-level exploitation allows for a
powerful attack model. Both remote and local attacks are
possible, although local attacks mounted from a compro-
mised or attacker-controlled application are more com-
mon. In addition, many known attack strategies become
signiﬁcantly more effective inside the OS. For exam-
ple, noncontrol data attacks are more appealing given the
amount of sensitive data available.
In addition, ROP-
based control-ﬂow attacks can beneﬁt from the large
codebase and easily ﬁnd all the necessary gadgets to per-
form arbitrary computations, as demonstrated in [35].
This means that disclosing information on the locations
of “useful” text fragments can drastically increase the
odds of successful ROP-based attacks. Finally, the par-
ticular context opens up more attack opportunities than
those detailed in Section 2. First, unchecked pointer
dereferences with user-provided data—a common vul-
nerability in kernel development [18]—can become a
vector of arbitrary kernel memory reads/writes with no
assumption on the location of the original pointer. Sec-
ond, the combined user/kernel address space design used
in most operating systems may allow an attacker control-
ling a user program to directly leverage known applica-
tion code or data for the attack. The conclusion is that
making both the relative positioning between any two
memory objects and the location of individual objects
unpredictable becomes much more critical inside the OS.
Information leakage. Prior work on ASR has of-
ten dismissed information leakage attacks—in which the
attacker is able to acquire information about the inter-
nal memory layout and carry out an exploit in spite of
ASR—as relatively rare for user applications [14, 67,