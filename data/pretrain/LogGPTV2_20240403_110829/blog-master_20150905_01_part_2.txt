insert事务结束后，没有跟踪到SetHintBits，因为事务结束时不设置hint bits。    
postgres=# select * from t;    
 id     
----    
  1    
(1 row)    
```    
执行select时跟踪到了sethintbits，参数infomask=256，即HEAP_XMIN_COMMITTED  。    
```    
71259406 postgres(5497): flags & BM_PERMANENT))    
                {    
...    
                        MyPgXact->delayChkpt = delayChkpt = true;    
                        lsn = XLogSaveBufferForHint(buffer, buffer_std);    
......    
```    
什么情况下的set hint bits操作需要写WAL？    
src/include/access/xlog.h    
```    
#define XLogHintBitIsNeeded() (DataChecksumsEnabled() || wal_log_hints)    
src/backend/access/transam/xlog.c    
/*    
 * Are checksums enabled for data pages?    
 */    
bool    
DataChecksumsEnabled(void)    
{    
        Assert(ControlFile != NULL);    
        return (ControlFile->data_checksum_version > 0);    
}    
......    
XLogSaveBufferForHint(Buffer buffer, bool buffer_std)@src/backend/access/transam/xlog.c    
/*    
 * Write a backup block if needed when we are setting a hint. Note that    
 * this may be called for a variety of page types, not just heaps.    
 *    
 * Callable while holding just share lock on the buffer content.    
 *    
 * We can't use the plain backup block mechanism since that relies on the    
 * Buffer being exclusively locked. Since some modifications (setting LSN, hint    
 * bits) are allowed in a sharelocked buffer that can lead to wal checksum    
 * failures. So instead we copy the page and insert the copied data as normal    
 * record data.    
 *    
 * We only need to do something if page has not yet been full page written in    
 * this checkpoint round. The LSN of the inserted wal record is returned if we    
 * had to write, InvalidXLogRecPtr otherwise.    
 *    
 * It is possible that multiple concurrent backends could attempt to write WAL    
 * records. In that case, multiple copies of the same block would be recorded    
 * in separate WAL records by different backends, though that is still OK from    
 * a correctness perspective.  // 可能写多次哦    
 */    
XLogRecPtr    
XLogSaveBufferForHint(Buffer buffer, bool buffer_std)    
{    
通过XLogCheckBuffer来判断是否需要写XLOG。    
/*    
 * Determine whether the buffer referenced by an XLogRecData item has to    
 * be backed up, and if so fill a BkpBlock struct for it.  In any case    
 * save the buffer's LSN at *lsn.    
 */    
static bool    
XLogCheckBuffer(XLogRecData *rdata, bool holdsExclusiveLock,    
                                XLogRecPtr *lsn, BkpBlock *bkpb)    
{    
```    
验证：    
```    
[root@digoal ~]# cat trc.stp     
global f_start[999999]    
probe process("/opt/pgsql/bin/postgres").function("XLogCheckBuffer@/opt/soft_bak/postgresql-9.4.4/src/backend/access/transam/xlog.c").call {     
   f_start[execname(), pid(), tid(), cpu()] = gettimeofday_ms()    
   # printf("%s  time:%d, pp:%s\n", thread_indent(1), f_start[execname(), pid(), tid(), cpu()], pp() )    
}    
probe process("/opt/pgsql/bin/postgres").function("XLogCheckBuffer@/opt/soft_bak/postgresql-9.4.4/src/backend/access/transam/xlog.c").return {     
  t=gettimeofday_ms()    
  a=execname()    
  b=cpu()    
  c=pid()    
  d=pp()    
  e=tid()    
  if (f_start[a,c,e,b]) {    
  printf("%s <- time:%d, pp:%s, par:%s\n", thread_indent(-1), t - f_start[a,c,e,b], d, $return$$)    
  # printf("%s <- time:%d, pp:%s\n", thread_indent(-1), t - f_start[a,c,e,b], d)    
  }    
}    
```    
观察检查点后的没有发生full page write的数据块上的sethintbits操作：    
```    
postgres=# update t set id=4;    
UPDATE 2    
postgres=# checkpoint;    
CHECKPOINT    
postgres=# select * from t;    
 id     
----    
  4    
  4    
(2 rows)    
```    
跟踪到XLogCheckBuffer的返回结果为true，因为这个块是在checkpoint后第一次被修改，所以还没有FPW，因此这次SETHINTBITs需要写XLOG。    
```    