be performed through one or more HPE vulnerabilities
depicted in Table 2. For example, as presented in Section 4.4.2,
an Attestation TA could provide a signing oracle through
both a Missing-Auth and a Storage-Hijacking vulnerability.
Additionally, every one of those vulnerabilities enable one or
more HPE attacks. For example, an Auth-Bypass vulnerability
inside a DRM TA can enable all ﬁve classes of HPE attacks,
depending on the TA provided functionality.
4.4 Vulnerability Case Studies
In this section we examine three representative reverse-
engineered TA code snippets that contain real-world
vulnerabilities. For each code snippet, we describe the
vulnerabilities they contain, and show how they can be
exploited by attackers. Case A describes how DRM protected
content can be leaked through either a Auth-Bypass or
Missing-Auth vulnerability. Case B presents how a how a
Missing-Auth and Storage-Hijacking enable attackers to trick
TAs into forging attestations. Finally, Case C presents how
Storage-Hijacking vulnerabilities inside Key Management
TAs can be used to obtain or alter the keys within.
4.4.1 Case A: Accessing DRM-protected content
A DRM service relies on TAs to establish secure communi-
cation channels with authorized TrustZone-enabled devices.
The TA is provisioned by the DRM service with a set of
cryptographic keys that can be used to decrypt protected
content. We refer to these TAs as DRM TAs. Each DRM TA
is responsible for providing access to decrypted content only
to authorized CAs and ensuring the decryption keys are never
leaked to the Normal World.
Listing 1 presents the basic logic present in a multi-tenant
DRM TA, which is used to provide DRM-protected content to
several CAs. Lines 1-25 contain the logic used for managing
multiple CA sessions. Lines 27-38 present the functions
load_key and decipher_text, which contain the logic for
loading keys into CA sessions and using the respective keys
to decrypt copyrighted content on behalf of CAs.
A CA receives a session ID from the DRM TA by calling
open_session. The CA provides the session ID on all
subsequent calls to the TA. Upon each call, the TA looks up
the appropriate session via get_session, which searches the
global map, sessions, for the provided session ID.
To play protected content, the CA receives an encrypted key
from the DRM service, which it will load into the TA using
the load_key function. This key is decrypted by the DRM TA
using a manufacturer provided DRM TA unique key and stored
inside the CA’s session. Once the decryption key is loaded in
the CAs session, the CA can request the TA to decrypt DRM-
protected content by calling the decipher_text function.
1 Context s t r u c t {
i n t session_id ;
2
i n t key [128];
3
4 };
5
6 /* global variables : */
7 i n t unique_id ;
8 Context sessions [100];
9
10 void open_session
( CA_struct input , CA_struct output ) {
context = allocate_context_memory () ;
/* Deterministic session id assignment */
context . id = ++ unique_id ;
sessions . add ( context );
output . session_id = context . id ;
}
11
12
13
14
15
16
17
18 /* TA - private method . Not exported . */
19 i n t get_session ( session_id ){
f or id in range (1 , 100) {
20
i f ( id == session_id )
21
22
23
24
25
26
27 void load_key ( CA_struct input ) {
28
return error ;
}
return sessions [ id ];
}
Context
29
30
current_ctx = get_session ( input . session_id );
/* Decrypt using device unique key */
current_ctx . key = unwrap ( input . encrypted_key );
}
31
32
33 void decipher_text
34
35
36
37
38
( CA_struct input , CA_struct output ) {
Context
current_ctx = get_session ( input . session_id );
/* Decrypt provided cipher text using key
stored in context and return result */
decrypt ( current_ctx
.key , input . ciphertext , output . plaintext );
}
Listing 1: Vulnerable DRM TA code
The code presented in Listing 1 contains two attack vectors
that malicious CAs can use to decrypt DRM content:
(1) The session management code contains an Auth-Bypass
vulnerability. First, the get_session function allows a ma-
licious CA to use the key within session for the load_key and
decipher_text, provided it can provide its corresponding
session id. Second, the open_session function generates
session identiﬁers using a monotonically increasing function
USENIX Association
29th USENIX Security Symposium    831
Table 2: Vulnerabilities identiﬁed inside TAs extracted from each TZOS. For each TA category row, we present the number of unique
vulnerabilities identiﬁed in TA binaries, grouped by CWE type.
TA Category
DRM
Key Management
Attestation
Total
Kinibi
CWE
862
4
0
1
5
CWE
639
1
0
0
1
CWE
732
3
6
8
13
CWE
639
1
0
0
1
QSEE
CWE
862
4
0
1
5
CWE
732
3
6
8
13
CWE
639
1
0
0
1
Teegris
CWE
862
0
0
0
0
CWE
732
1
6
8
13
Table 3: Vulnerability impact breakdown.
All TZOSes
HPE attack
CWE-639 CWE-862 CWE-732
Data leakage
Data compromise
Decryption oracle
Encryption oracle
Signing oracle
Total
0
0
9
3
6
18
4
4
2
2
2
14
21
15
9
9
15
69
at Line 13. This enables attackers to guess a victim CA’s
session id in a reasonable time by trying to decipher texts
using random session ids between 1 and 100.
(2) A Storage-Hijacking vulnerability is present in the
load_key function. On Line 30, the DRM TA loads the
decryption key inside the CA’s session by decrypting it from
a CA provided ciphertext. This enables a malicious CA to load
other CA decryption keys inside its own session, provided it
possesses the respective key’s ciphertext. Section 6.1 details
how attackers can obtain ciphertexts containing victim CA’s
keys from the Normal World ﬁlesystem.
Under Auth-Bypass, the attackers have to wait for a victim
CA to load the key in its session and then obtain access to the
key by guessing the corresponding session id. Once the key
is loaded, the attacker can decrypt protected content until the
victim CA asks the TA to close its session. In contrast, once an
attacker obtains a victim’s ciphertext, the Storage-Hijacking
vulnerability allows it to use the key inside at any time.
4.4.2 Case B: Forging device attestation
Attestation TAs provide a signed attestation blob that acts
as a proof of device identity and low-level software integrity.
Typically, the attestation blob is provided to external services
as proof of the identity and integrity of the device. The
attestation TA accesses measurements of the bootloader, TZ
and kernel that ran when the device was powered on. All of
this information is collected into an attestation blob, along
with additional conﬁguration information.
The attestation blobs are signed using attestation keys
generated by remote parties. These keys are provided to device
manufacturers, which encrypt them using an Attestation TA
unique key and store them inside the Normal World ﬁlesystem.
These blobs should only be signed by Attestation TAs running
on uncompromised devices and provide reliable information
regarding the device’s identity to remote parties.
Listing 2 presents an overview of how an Attestation TA
generates and provides attestation blobs to CAs. A CA ﬁrst
initializes the TA by providing an attestation key ciphertext
to the init_attestation API. After verifying the device’s
integrity, this API unwraps (decrypts) the key into a global
variable. Once the TA is initialized, the CA can call the
sign_attestation_data API in order to ask the TA to gen-
erate attestation data from a CA provided International Mobile
Equipment Identity (IMEI) and Media Access Control address
(MAC) sign it using the key stored inside the global variable.
1 /* global variable : */
2 i n t attestation_key [128];
3
4 void init_attestation ( CA_struct input ) {
5
6
i f ( device_integrity_intact () ) {
attestation_key = unwrap ( input .
encrypted_key ); {
}
7
8 }
9
10 void sign_attestation_data
( CA_struct input , CA_struct output ) {
attestation_data
= generate_attestation ( input . IMEI , input . MAC );
output
= sign ( attestation_key , attestation_data );
11
12
13 }
Listing 2: Vulnerable Attestation TA code
Two vulnerabilities can be observed in Listing 2’s code:
(1) The sign_attestation_data API assumes that a CA
has to call the init_attestation API in order to provide the
key used for signing attestation data. However, this assumption
is only valid in single-tenant TA instances. In multi-tenant
TA instances, this code contains a Missing-Auth vulnerability,
which enables malicious CAs to sign attestation data using
keys installed by other CAs.
(2) A Storage-Hijacking vulnerability is present in the
init_attestation API. This decryption logic used at Line 6
enables a malicious CA to trick the TA into installing another
CA’s attestation key in the global variables, provided they can
obtain the corresponding key’s ciphertext. Section 6.1 details
the process of obtaining this ciphertext. This vulnerability
affects both single-tenant and multi-tenant Attestation TA
instances.