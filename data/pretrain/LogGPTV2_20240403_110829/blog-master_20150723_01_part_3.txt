	/*  
         * Set the lsn first so that when we wake backends they will release up to  
         * this location.  
         */  
        if (walsndctl->lsn[SYNC_REP_WAIT_WRITE] write)  
        {  
                walsndctl->lsn[SYNC_REP_WAIT_WRITE] = MyWalSnd->write;  
                numwrite = SyncRepWakeQueue(false, SYNC_REP_WAIT_WRITE);  
        }  
        if (walsndctl->lsn[SYNC_REP_WAIT_FLUSH] flush)  
        {  
                walsndctl->lsn[SYNC_REP_WAIT_FLUSH] = MyWalSnd->flush;  
                numflush = SyncRepWakeQueue(false, SYNC_REP_WAIT_FLUSH);  
        }  
```  
延迟监控：  
```  
postgres=# \d pg_stat_replication   
          View "pg_catalog.pg_stat_replication"  
      Column      |           Type           | Modifiers   
------------------+--------------------------+-----------  
 pid              | integer                  |   
 usesysid         | oid                      |   
 usename          | name                     |   
 application_name | text                     |   
 client_addr      | inet                     |   
 client_hostname  | text                     |   
 client_port      | integer                  |   
 backend_start    | timestamp with time zone |   
 backend_xmin     | xid                      |   
 state            | text                     |   
 sent_location    | pg_lsn                   |   接收到的XLOG位置  
 write_location   | pg_lsn                   |   write结束的XLOG位置  
 flush_location   | pg_lsn                   |   flush到持久化存储的XLOG位置  
 replay_location  | pg_lsn                   |   已恢复的位置  
 sync_priority    | integer                  |   
 sync_state       | text                     |   
```  
使用pg_xlog_location_diff(pg_current_xlog_insert_location(),?)可以计算出延迟XLOG的字节数。  
PostgreSQL 从9.0开始支持流复制和hot_standby，使用流复制可以方便的实现容灾，HA，读写分离。  
（注意，不产生WAL的操作时无法通过基于WAL的复制方法来同步的，例如HASH索引，unlogged table, temp table都无法使用流复制来同步数据）  
使用第三方插件，可以实现集群的部分物理复制，例如walbouncer。  
从9.4开始，PostgreSQL的WAL信息中包含了逻辑复制需要的信息，例如row，基于此，可以实现基于WAL的逻辑复制。(类似MySQL的binlog复制)  
使用第三方插件，也可以实现基于触发器或前端SQL分发的逻辑复制。例如pgpool-II, londiste3, slony-I, bucardo等.  
### MySQL  
支持语句级别(SBR)或者行级别(RBR)的逻辑同步，不支持块级别的物理同步模式。  
对于SBR，可能导致复制异常，所以现在innodb 和ndb存储引擎都使用RBR。  
MySQL的逻辑复制支持异步模式，或者半同步模式。半同步模式指当事务提交时，至少有一个SLAVE接收到了这个事务的binlog（但不需要等待这个BINLOG在SLAVE上完成apply）。  
MySQL同样有第三方的复制插件：  
http://codership.com/products/galera_replication  
http://code.google.com/p/tungsten-replicator/  
## 数据类型 #  
### PostgreSQL，  
支持数字，货币，字符串，字节流，时间，布尔，枚举，几何，网络，比特，全文检索，UUID，XML，JSON，数组，范围等数据类型。以及这些数据类型的操作方法，索引访问方法等。  
PostgreSQL还支持自定义数据类型，操作符，以及索引访问方法。  
```  
8.1. Numeric Types  
  8.1.1. Integer Types  
  8.1.2. Arbitrary Precision Numbers  
  8.1.3. Floating-Point Types  
  8.1.4. Serial Types  
8.2. Monetary Types  
8.3. Character Types  
8.4. Binary Data Types  
  8.4.1. bytea Hex Format  
  8.4.2. bytea Escape Format  
8.5. Date/Time Types  
8.6. Boolean Type  
8.7. Enumerated Types  
8.8. Geometric Types  
  8.8.1. Points  
  8.8.2. Lines  
  8.8.3. Line Segments  
  8.8.4. Boxes  
  8.8.5. Paths  
  8.8.6. Polygons  
  8.8.7. Circles  
8.9. Network Address Types  
  8.9.1. inet  
  8.9.2. cidr  
  8.9.3. inet vs. cidr  
  8.9.4. macaddr  
8.10. Bit String Types  
8.11. Text Search Types  
  8.11.1. tsvector  
  8.11.2. tsquery  
8.12. UUID Type  
8.13. XML Type  
8.14. JSON Types  
8.15. Arrays  
8.17. Range Types  
8.18. Object Identifier Types  
8.19. pg_lsn Type  
8.20. Pseudo-Types  
```  
更多扩展类型见：  
http://postgis.org/  
http://pgxn.org/  
http://www.postgresql.org/docs/9.4/static/contrib.html  
如HyperLogLog数据类型（唯一值统计），GIS数据类型（地理位置信息），cube(多维类型), earth（地球模型）, ltree(树形结构), hstore（key-value类型）, pg_trgm（模糊数据类型）,citext(不区分大小写的数据类型)等。  
对不同的业务，选择合适的数据类型，可以简化应用程序的设计，提高数据的访问效率。例如使用iprange来为智能DNS解析加速IP地址就近寻址。  
### MySQL，  
支持数字，时间，字符串，空间类型。  
```  
11.1 Data Type Overview     [+/-]  
11.2 Numeric Types     [+/-]  
11.3 Date and Time Types     [+/-]  
11.4 String Types     [+/-]  
11.5 Extensions for Spatial Data     [+/-]  
11.6 Data Type Default Values  
11.7 Data Type Storage Requirements  
11.8 Choosing the Right Type for a Column  
11.9 Using Data Types from Other Database Engines  
```  
MySQL支持unsigned int, PostgreSQL可以通过自定义域来实现同等功能。  
例子：  
```  
postgres=# create domain uint32 as int constraint unsigned check(VALUE>=0);  
CREATE DOMAIN  
postgres=# create table test(id uint32);  
CREATE TABLE  
postgres=# insert into test values (-1);  
ERROR:  value for domain uint32 violates check constraint "unsigned"  
postgres=# insert into test values (0);  
INSERT 0 1  
postgres=# insert into test values (100);  
INSERT 0 1  
```  
## 子查询 #  
MySQL的子查询支持较弱，性能存在问题，同时不支持在视图中使用子查询。  
PostgreSQL不存在这样的问题。  
## JOIN #  
MySQL不支持full outer join，同时不支持merge join, hash join，只支持nest loop join。  
PostgreSQL都支持，所以在复杂SQL的处理场景，PG会更加胜出。  
## 高级索引 #  
Index Type|	MySQL|	PostgreSQL  
---|---|---  
Hash indexes|	InnoDB, NDB and MEMORY engines support Hash indexes|	PostgreSQL supports Hash indexes, though as of 8.1 they are never faster than b-tree indexes [25]  
Multiple Indexes|	MySQL supports multiple indexes per query.[26]|	PostgreSQL supports multiple indexes per query.  
Change Buffering (also called insert buffer)|	InnoDB has a feature to delay building index pages of non unique secondary indexes when the index is too large to fit in memory. This allows it to merge modifications, and in many cases reduce IO considerably.但是对于更新的数据检索，需要先对buffer数据合并，再检索。|	Postgresql does not support this feature. 实际上gin支持类似特性，并且不存在需要对更新数据进行索引合并后查询的问题。实际应用往往应该在插入，更新，查询的混合场景进行比较才比较公平。  
Full-Text Indexes|	MySQL comes with full-text search for InnoDB and MyISAM storage engines. Prior to version 5.6 only the MyISAM storage engine supported this feature.[27] A 3rd party add-on to MySQL, Sphinx Fulltext Search Engine allows it to support full-text searches on storage engines which do not natively support it. | PostgreSQL 8.2 has full text search in the tsearch2 module. PostgreSQL 8.3 integrates tsearch2 into the core: "TSearch2, our cutting-edge full text search tool, has been fully integrated into the core code, and also has a cleaner API." [28] 扩展定制能力更强。  
Partial Indexes|	MySQL does not support partial indexes.	PostgreSQL supports partial indexes: A partial index is an index built over a subset of a table; the subset is defined by a conditional expression (called the predicate of the partial index). The index contains entries for only those table rows that satisfy the predicate. Partial indexes are a specialized feature, but there are severalsituations in which they are useful. One major reason for using a partial index is to avoid indexing common values. Since a query searching for a common value (one that accounts for more than a few percent of all the table rows) will not use the index anyway, there is no point in keeping those rows in the index at all. This reduces the size of the index, which will speed up queries that do use the index. It will also speed up many table update operations because the index does not need to be updated in all cases.| PostgreSQL , PostgreSQL 8.2.6 Documentation: Chapter 11. Indexes例如: create index idx on tbl(id) where col='abc';对于只需要对某些条件频繁查询的场景尤为有效。  
Prefix Indexes|	MySQL supports prefix indexes. Prefix indexes cover the first N characters of a string column, making the index much smaller than one that covers the entire width of the column, yet still provide good performance characteristics.	|With PostgreSQL, prefix indexes are a particular case of Expression Indexes (see below).  
Multi-column Indexes|	MySQL is limited to 16 columns per index. [29]And not all storage engines provide multi-column indexes.	PostgreSQL is limited to 32 columns per index. [30]|可以在编译PG软件前，通过修改pg_config_manual.h实现增加列数的目的。  
Bitmap Indexes|	MySQL has no bitmap indexes but achieves similar functionality using its "index_merge" feature.	|PostgreSQL supports the ability to combine multiple indexes at query time using bitmap indexes.  
Expression Indexes|	Expression Indexes can be emulated in MySQL by adding a precomputed column and using a trigger to maintain it.|	PostgreSQL allows you to create indexes based on expressions (which may include calls to immutable functions). This is very handy in case there is a table with relatively stable data (not a lot of inserts / updates) and will often be running a query which involves an expensive calculation - the expression itself can be indexed thus eliminating the need of computing it at query runtime. 表达式索引在某些应用场景非常有用，例如将数据通过函数转换为范围类型，建立GIST索引。  
Non-blocking CREATE INDEX|	Dependent on the storage engine. Some engines (such as NDB Cluster and InnoDB Plugin) support online add/drop index (no locks taken). If the engine doesn't support online add/drop index, a write exclusive lock is required and the table copied.|	PostgreSQL supports the ability to create indexes without locking the table for writes.  
Covering Indexes|	MySQL supports covering indexes, which allow data to be selected by scanning the index alone without touching the table data. This is advantageous with large tables that have many millions of rows.|	Covering indexes were added to PostgreSQL 9.2 结合VM，使用index only scan。  
PostgreSQL支持btree,hash,gist,sp-gist,gin,brin几种索引扫描方法，几乎覆盖了所有的数据类型。  
同时GIN,GIST,SP-GIST,BRIN索引有开发的API，可以对自定义的数据类型创建对应的索引访问方法，在特殊的应用场景非常有效，例如地理位置信息，化学，数组，生物学，空间模型等应用场景尤为有效。  
PG为索引提供API的目的是，让用户关注数据，而非数据库的实现，所以开发索引访问方法需要对数据的理解而不是数据库。  
## 表分区 #  
### MySQL，  
支持HASH,RANGE,LIST,KEY分区，支持range,list与hash,key的组合分区。  
一个表最多支持1024个分区。  
### PostgreSQL，  
理论上支持所有的分区类型，因为目前PostgreSQL通过触发器和继承来实现分区，只要将逻辑写在函数中即可。  
PG的分区表没有个数现在。  
目前PostgreSQL的分区对性能损耗较大，今年PG全球开发者大会对这个问题提出了讨论，未来的版本将会改进创建分区表的方式，不再需要通过触发器来实现。  
## CTE语法 #  
MySQL不支持。  
PostgreSQL支持CTE语法，支持DML，递归等。  
例子：  
![pic](20150723_01_pic_003.png)  
![pic](20150723_01_pic_004.png)  
![pic](20150723_01_pic_005.png)  
![pic](20150723_01_pic_006.png)  
## 分析函数 #  
PostgreSQL支持诸多分析函数，  
聚合  
![pic](20150723_01_pic_007.png)  
例子，用于做线性回归预测   
窗口  
![pic](20150723_01_pic_008.png)  
GROUPING SETS, CUBE and ROLLUP  
http://blog.163.com/digoal@126/blog/static/16387704020154269591874/  
MySQL不支持。  
## 序列 #  
PostgreSQL支持，MySQL不支持。  
## 诊断和性能管理 #  
MySQL，提供类似Oracle 等待事件类似的性能视图用于诊断。  
PostgreSQL，提供语句级的统计视图包括（调用次数，CPU耗时，全局、本地缓存命中率，IO耗时等），提供表级别统计信息（包括HEAP 、INDEX 、TOAST PAGE的读和命中数，插入，更新，删除，HOT记录数，live记录，dead记录，全表扫描次数，索引扫描次数，全表扫描返回的记录数，索引扫描获取的记录数，最后的自动、非自动垃圾回收，统计分析的时间，以及对应的次数。），提供索引级别统计信息（索引块读次数，命中次数，扫描次数，获取的行数）。但是这里需要注意读（不区分OS层CACHE命中），HINT只说明数据库的SHARED BUFFER命中。  
如果要让PostgreSQL输出类似Oracle等待时间的视图，需要使用第三方工具，例如oprofile, stap。  
## 其他特性 #  
### PostgreSQL，  