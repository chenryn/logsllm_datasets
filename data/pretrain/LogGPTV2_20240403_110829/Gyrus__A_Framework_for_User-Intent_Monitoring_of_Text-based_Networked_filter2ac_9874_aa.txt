title:Gyrus: A Framework for User-Intent Monitoring of Text-based Networked
Applications
author:Yeongjin Jang and
Simon P. Chung and
Bryan D. Payne and
Wenke Lee
Gyrus: A Framework for User-Intent Monitoring of
Text-Based Networked Applications
Yeongjin Jang, Simon P. Chung
Georgia Institute of Technology
PI:EMAIL, PI:EMAIL
Abstract—Traditional security systems have largely focused on
attack detection. Unfortunately, accurately identifying the latest
attack has proven to be a never-ending cycle. In this paper, we
propose a way to break this cycle by ensuring that a system’s
behavior matches the user’s intent. Since our approach is attack
agnostic, it will scale better than traditional security systems.
There are two key components to our approach. First, we
capture the user’s intent through their interactions with an
application. Second, we verify that the resulting system output
can be mapped back to the user’s interactions. To demonstrate
how this works we created Gyrus, a research prototype that
observes user interactions for common tasks such as sending
email, instant messaging, online social networking, and online
ﬁnancial services. Gyrus secures these applications from malicious
behavior such as spam and wire fraud by allowing only outgoing
trafﬁc with content that matches the user’s intent. To understand
how Gyrus captures user intent, consider the case of a text-
based application. In this case the user’s input is displayed
on the screen so the user can conﬁrm that
is
correct. Gyrus builds on this concept by focusing on what is
being displayed to the user instead of what the user has typed
or clicked. We call this the “what you see is what you send
(WYSIWYS)” policy. We implemented Gyrus under a standard
virtualization environment, and our prototype system successfully
stops malware from sending unintended content over the network.
Our evaluation shows that Gyrus is very efﬁcient and introduces
no noticeable delay to a users’ interaction with the protected
applications.
their input
I.
INTRODUCTION
Host-based security systems have traditionally focused on
detecting attacks. Misuse detection targets attacks that follow
a predeﬁned malicious pattern, whereas anomaly detection
identiﬁes attacks as anything that cannot be the result of correct
execution under any input or execution environment. It has
been shown over time that systems following this approach
usually have too narrow a deﬁnition of “attacks”1; misuse
detection generally cannot detect new attacks, while anomaly
detection are known to suffer from mimicry attacks.
1Usually necessary to keep false positive rate acceptable.
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1)Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:17)(cid:24)(cid:23)
Bryan D. Payne
Nebula, Inc.
PI:EMAIL
Wenke Lee
Georgia Institute of Technology
PI:EMAIL
Instead of perpetuating the cycle of attack analysis, signa-
ture creation, and blacklist updating, we believe a more viable
approach is to create an accurate model of what is the correct,
user-intended behavior of an application, and then ensure the
application behaves accordingly. The idea of deﬁning correct
behavior of an application by capturing user intent is not
entirely new, but previous attempts in this space use an overly
simplistic model of the user’s behavior. For example, they
might infer a user’s intent based on a single mouse click
without capturing any associated context. While in some cases
(e.g. ACG [30]), the click captures all the semantics of the
user’s intent (e.g. access the camera), in other cases (e.g.
BINDER [6], Not-a-Bot [15]), the user’s intent involves a
richer context, and failure to capture the full semantics will
again allow for attacks to disguise as benign behavior. For
example, imagine a user who intends to send $2 to a friend
through PayPal. A mouse click can identify the user’s intent to
transfer money, but not the value or recipient of the transfer. So
this $2 transfer to a friend could become a $2,000 transfer to
an unknown person. Without context, it is simply impossible to
properly verify a user’s intent, regardless of if we are protecting
a ﬁnancial transfer, an industrial control system, or a wide
range of other user driven applications.
In this work, we propose a way to capture richer semantics
of the user’s intent. Our method is based on the observation
that for most text-based applications, the user’s intent will be
displayed entirely on screen, as text, and the user will make
modiﬁcations if what is on screen is not what she wants. Based
on this idea, we have implemented a prototype called Gyrus2
which enforces correct behavior of applications by capturing
user intent. In other words, Gyrus implements a “What You
See Is What You Send” (WYSIWYS) policy. Gyrus assumes
a standard VM environment (where Gyrus lives in the dom-
0 and the monitored applications live in dom-U3). Similar
to BINDER and Not-a-Bot, Gyrus relies on the hypervisor
to capture mouse clicks from the user, and use these as an
indication that the user intends the application to perform
certain actions. To capture the semantics of user intent that
cannot be inferred from just observing a mouse click, we take
the approach of drawing what we think the user should see
in the dom-0. In particular, the dom-0 will draw a secure
overlay on top of dom-U display window (the VNC viewer
in KVM environment), covering editable text area of targeted
2The fusiform gyrus is a part of the human brain that performs face and
body recognition.
3In this paper, we adopt the terminology from the Xen community. In other
settings, the dom-0 is referred to the Security-VM, while dom-U is referred
to the Guest-VM.
applications in dom-U, while leaving the rest of the dom-U
display visible. We stress that this rendering is isolated from
dom-U – software in dom-U cannot overwrite or modify what
has been drawn. Since we render all editable text the user sees,
we can easily conﬁrm that what is intended is what we have
drawn. By drawing all the text the user is supposed to see in
our overlay, Gyrus can also handle scrolling properly. Even if
only part of the text is displayed at any time, Gyrus can keep
track of what has been displayed over time and derive the full
content of the user intended input.
To determine what text to display in the overlay, we deploy
a component called the UI monitor in dom-U. We stress that
the UI monitor is not trusted, since incorrect behavior in this
component will be immediately noticed by the user, and only
result in a DoS in the worst case. The UI monitor is also
responsible for telling the dom-0 logic the location of buttons
that signify the user’s intent to commit what is displayed to
the network (e.g. the “send” button in an email client), and
when the user ﬁnally clicks on such buttons, Gyrus will make
sure the outgoing network trafﬁc matches the text displayed. In
short, Gyrus enforces integrity of user-generated network traf-
ﬁc, and prevents malware from misusing network applications
to send malicious trafﬁc even if the malware mimics legitimate
applications by running an application’s protocol correctly or
injects itself into benign applications. Note that Gyrus only
checks network trafﬁc under protocols used by the protected
applications, and it does not interfere with trafﬁc from other
applications, such as background services, RSS feed readers,
and BitTorrent clients. Also, Gyrus can support asynchronous
or scheduled trafﬁc like e-mail queued for sending in the
future. From our evaluation, Gyrus exhibits good performance
and usability, while blocking all tested attacks.
Any attempt to make sure an application behaves according
to user intent will have some application-speciﬁc logic, and
Gyrus is no exception. This is inherently true for our approach
because: 1) different applications will have a different user in-
terface, and thus user intent will be interpreted differently and,
2) different applications will have different logic for turning
user input into network trafﬁc or other forms of output. The
best we can do is to make the per-application logic as easy to
build as possible. In Gyrus, we simplify the UI-related part of
the per-application logic by making use of an existing library
for assistive technology called UI Automation. As for the logic
to map user intent to expected behavior of an application, the
complexity mostly depends on the application, and Gyrus and
the WYSIWYS policy is not suitable for all applications. In
particular, applications with arbitrarily complex encoding of
their text, or those using proprietary protocols cannot be easily
supported by Gyrus. Nevertheless, we have shown that it can
be used on email clients, instant messenger applications, online
social network services and even online ﬁnancial services.
Section V discuses what applications are best protected by
Gyrus.
The per-application development cost for Gyrus is justi-
ﬁable since Gyrus is attack-agnostic: it makes assumptions
about what the attackers are trying to achieve but not how.
In other words, once one builds the logic for an application,
Gyrus will be able to protect that application against an entire
class of attacks, no matter how attacks evolve. Therefore, over
time, the cost of deploying Gyrus will be lower than existing
host-based security systems, which usually need continuous
updating to stay current with the latest attacks.
Finally, we emphasize that Gyrus does not replace existing
host-based security systems. Instead, Gyrus uses a different
philosophy to ﬁll a gap in traditional security systems by
deﬁning and monitoring normal behavior. Thus, Gyrus ﬁts best
when it is used to complement other security systems, such as
antivirus, ﬁrewalls, and intrusion detection systems (IDS).
The primary contributions of our work include 1) the
“What You See Is What You Send” concept which includes
securely capturing what the user sees on the screen at the
time an event triggers outgoing trafﬁc. Using this, we can
determine what the user intended outgoing trafﬁc should be
for an important class of applications. Furthermore, our idea
is transparent to the OS and applications, and only requires
standard assumptions about the virtualized environment. 2)
The demonstration of how we can use common features such
as accessibility libraries4 for inter-VM monitoring without
knowing the internals of the monitored applications. And 3) the
demonstration of the viability of Gyrus by implementing the
framework along with support for real-world applications in
Microsoft Windows 7. Our prototype currently supports email,
instant messaging, social networking applications, and online
ﬁnancial applications, effectively covering the most common
network applications in everyday use.
The rest of this paper is organized as follows: Section II
discusses related work. Section III discusses the Gyrus threat
model and the rationale of our What You See Is What
You Send policy. Section IV presents the architecture and
implementation details for Gyrus. Section V demonstrates how
Gyrus can be used for real world applications. Section VI
presents the evaluation of the Gyrus framework, and ﬁnally
we conclude in Section VII.
II. RELATED WORK
This section discusses the related work and how Gyrus
improves on the current state-of-the-art. The discussion is also
intended to provide some context for our work. We group
the related work into three areas: 1) capturing user intent, 2)
trusted execution environment, and 3) veriﬁable computation.
A. Capturing Human Intent
Like Gyrus, BINDER [6] and Not-A-Bot (NAB) [15] also
try to determine if outgoing trafﬁc is legitimate based on
observed human intent; in particular, both systems enforce a
policy which states that outbound network connections which
come shortly after the user input is user intended. However,
as stated in the introduction, in some cases only capturing
the timing of user-generated events is not enough. In contrast
to BINDER and Not-A-Bot, Gyrus captures more semantics
of the user’s intent, so only trafﬁc with the correct content
can leave the host. Also, since BINDER and Not-A-Bot use
timing information to determine if trafﬁc is user intended,
they cannot handle asynchronous network transactions (such as
emails queued to be sent later); Gyrus solves this problem by
relying on the semantics, but not the timing of user generated
4Similar capabilities should be available on most systems that support screen
reader for visually impaired users.
2
events, and by decoupling the capturing of user intent from
the enforcement of its trafﬁc ﬁltering policy.
User-Driven Access Control [30] captures the user’s intent
for security purposes using an access control model that grants
permissions based on a user’s GUI interactions. It uses access
control gadgets (ACGs) to capture a user’s intent. Clicking
on an ACG grants permission on a resource associated with
the ACG. Gyrus uses a similar approach on UI widgets to
identify trafﬁc-triggering user input. However, in User-Driven
Access Control, the permission is bound to certain user-owned
resources, not to the content the user intends to send to these
resources. In other words, when the user clicks on an ACG that
has permission to use the network device, any outgoing trafﬁc,
even with a malicious intent, will be allowed. On the contrary,
Gyrus captures both the user’s intent to send something and
also the intended content of that outgoing trafﬁc, and can stop
any unintended network trafﬁc.
B. Trusted Execution Environment
Virtualization has enjoyed resurgence in popularity in re-
cent years. Proponents have argued that by using small, veri-
ﬁable hypervisor kernels, the isolation of one virtual machine
from another can be assured [22], [16], and recent research
has aimed to enhance this security by reducing the size of the
hypervisor’s code [34], [40], modularizing its components [5],
or verifying its security [20]. These isolation properties make
virtualized environments an attractive way to implement se-
curity applications. Virtualization-based solutions have been
used to implement trusted computing architectures [8], [24],
intrusion detection systems [9], malware analysis systems [18],
and zero-day intrusion analysis systems [19]. However, none
of these take user intent into account and we believe Gyrus
can enrich research in each of these areas by showing how to
build on the isolation provided by a virtualized environment to
perform simple checks that will improve the system’s security.
C. Veriﬁable Computation
Gyrus has some common goals with the ﬁeld of veriﬁable
computation, which has focused on ensuring correct code
execution by an untrusted third party. This work has taken
many forms including general-proof protocols [13], [14], [10],
Probabilistically Checkable Proofs (PCPs) [3], [31], [32], or
relying on fully-homomorphic encryption (FHE) [11], [4].
While these systems can prove that a third party has processed
a requested execution correctly, they cannot tell whether the
input of this execution is correct. Gyrus ﬁlls this gap by check-
ing that the input used for a computation is what was provided
by the system’s user. Gyrus then completes the validation by
also checking whether the outcome (e.g, network packet) of
application execution is the correct result for a given input.
Recent work [27] shows that veriﬁable computation can be
used in practical settings, so we believe that the complementary
aspects of Gyrus and veriﬁable computation could prove to be
a powerful combination in future security systems.
III. OVERVIEW
In this section, we present a high level overview of Gyrus.
First, we describe our threat model, and then we introduce a
policy called “What You See Is What You Send” (WYSIWYS),
which is integrated and enforced by Gyrus to address the threat
model. Then, we describe the essential elements of Gyrus, and
discuss suitable applications of Gyrus.
A. Threat Model
Gyrus is designed to utilize a standard virtualized environ-
ment with a hypervisor (VMM), a trusted dom-0 that executes
most parts of Gyrus, and an untrusted dom-U that runs the
applications to be protected as well as with some untrusted
components of Gyrus. We collect data for determining a user’s
intent from the hardware input and output devices, including
the keyboard, mouse, and monitor. We make the following
security assumptions:
1)
2)
3)
4)
The hypervisor and dom-0 are fully trusted.
Attackers cannot have physical access to the machine,
and we trust the hardware.
All hardware input events must be interposed by the
hypervisor, and they must ﬁrst be delivered to dom-0.
The hypervisor provides complete isolation of input
hardware, preventing hardware emulation originating
from dom-U.
Dom-U is not trusted, therefore it can be compro-
mised entirely.
We stress that we do not apply any security assumption
on dom-U. This implies that Gyrus could function correctly