′
′
′
(Enc(K(m); v1) (cid:10) Enc(K(m); 1) (cid:10) Enc(K(m); 1))(cid:8)
(Enc(K(m); v2) (cid:10) Enc(K(m); v3) (cid:10) Enc(K(m); 1))(cid:8)
(Enc(K(m); v4) (cid:10) Enc(K(m); v5) (cid:10) Enc(K(m); v6))
where (cid:10) represents the operation of calculating the outer product
of two ciphertexts, and (cid:8) the operation of adding two ciphertexts.
The encryption of one, Enc(K(m); 1)), is used to ensure the three
ciphertexts resulted for calculating v1(cid:3)1(cid:3)1, v2(cid:3)v3(cid:3)1 and v4(cid:3)v5(cid:3)v6
have the same number of subciphertexts, so that they can be added
to produce the ciphertext for v1 (cid:3) 1 (cid:3) 1 + v2 (cid:3) v3 (cid:3) 1 + v4 (cid:3) v5 (cid:3) v6.
Our method for securely outsourcing k-means clustering can also
be applied with other homomorphic encryption schemes, such as
[8]. However, the homomorphism of this scheme makes it more
suitable to encrypt data for k-means clustering, as explained by the
following two reasons.
First, other schemes allow only integer or bit operations over
ciphertexts. The integer or bit operations are not suitable for cal-
culating new cluster centers, since averaging each attribute of data
objects in a cluster involves real numbers (i.e., the inverse of the
number of data objects in a cluster) [10]. For example, if a clus-
ter includes 3 data objects, then the new center for this cluster is
obtained by multiplying the sum of each attribute of these 3 data
objects by 0:33 (i.e., 1
3 ).
Second, other schemes usually bound the results of homomor-
phic operations (e.g., the squared distances between data objects
and cluster centers) by the modulus used in decryption; that is, if
the results are larger than the modulus, the decrypted results will
not be correct [19]. On the contrary, the homomorphic encryption
scheme introduced in this section does not bound the squared dis-
tances or the sums of data objects in the same cluster, since it does
not rely on modulus operations in decryption.
4. THE PROBLEM OF CLUSTERING EN-
CRYPTED DATA
In this section, we discuss the problem of clustering homomor-
phically encrypted data. To make the discussion easier, we assume
that the data objects have only one dimension (i.e., we assume that
each data object is a real number). Let v be a data object, and c
and c
be two cluster centers. These values are encrypted, as shown
below, with a key K(m), which is known only by the data owner.
′
Enc(K(m); v) = (ve1; :::; vem)
Enc(K(m); c) = (ce1; :::; cem)
Enc(K(m); c
) = (ce
′
′
1; :::; ce
′
m)
′
′
′
′
1
The encrypted data are then outsourced to the service provider
for clustering. The privacy of these data is kept, since the service
provider does not know the encryption key.
, respectively. Let V Ci = vei (cid:0) cei and V C
A step of the k-means clustering algorithm is to calculate the Eu-
clidean distances between data objects and cluster centers. From
the above three ciphertexts, the service provider can calculate the
squared Euclidean distances between the data object v and two
′
clusters c and c
i =
vei (cid:0) ce
i (1 (cid:20) i (cid:20) m). Then, the squared distance between v and
′
c calculated by the service provider is the following ciphertext (i.e.,
the ciphertext of (v (cid:0) c) (cid:3) (v (cid:0) c)).
(V C1 (cid:3) V C1; :::; V C1 (cid:3) V Cm; :::; V Cm (cid:3) V C1; :::; V Cm (cid:3) V Cm)
Similarly, the squared distance between v and c is the following
ciphertext (i.e., the ciphertext of (v (cid:0) c
′
′
m; :::; V C
m
′
m)
After calculating the distance, the k-means clustering algorithm
will assign the data object v into the cluster with respect to which
v has the shortest distance. However, since the encryption scheme
is probabilistic and not order preserving [3], the service provider
cannot compare the above encrypted distances to determine which
cluster has a smaller distance to v. Moreover, to the best of our
knowledge, there is no homomorphic encryption scheme that is also
homomorphically order-preserving.
) (cid:3) (v (cid:0) c
(cid:3) V C
′
1; :::; V C
′
1; :::; V C
′
(V C
1
(cid:3) V C
(cid:3) V C
(cid:3) V C
′
m
)).
)(cid:3) (v(cid:0) c
A simple approach might be to send the above encrypted dis-
tances back to the data owner, who has the key to decrypt the dis-
tances to get (v(cid:0) c)(cid:3) (v(cid:0) c) and (v(cid:0) c
), which can then
be compared. However, this approach is not practical and negates
the advantages of outsourcing data analytics, since the number of
encrypted distances, equal to the number of data objects times the
number of clusters, might be very large and decrypting those en-
crypted distances places too much computational load on the data
owner.
′
′
5. COMPARING ENCRYPTED DISTANCES
In this section, we describe a method that can securely derive or-
der information from the encrypted distances, such that the service
provider can compare the encrypted distances directly.
1255.1 Order-Preserving Indexing
We start with introducing an order-preserving indexing scheme
[18]. Given an indexing key k and a value v, the expression OP I(k; v)
produces an index of v. For two values v1 and v2, if v1 > v2,
the order-preserving indexing scheme ensures that OP I(k; v1) >
OP I(k; v2). This indexing scheme does not support the recovery
of value v from an index OP I(k; v), even if k is known. However,
this indexing scheme is acceptable for us, since we observe that
k-means clustering does not really need the decrypted distances,
instead only their order.
The deﬁnition of OP I(k; v) needs the sensitivity of plaintext
values, which is a positive real number reﬂecting the minimum gap
between two different plaintext values. The sensitivity can be de-
termined by the scale of plaintext values (i.e., the number of digits
to the right of the decimal point in plaintext values). For exam-
ple, if the plaintext values have the format XXX:XX, where X
is a decimal digit, then their sensitivity is 0:01. That is, if plaintext
values have the scale s, then their sensitivity is 10
(cid:0)s.
The indexing key k in [18] is deﬁned as a pair of real numbers
(a; b), where a > 0 and sens is the sensitivity of plaintexts, and
OP I(k; v) = a(cid:3) v + b + r, where r is a random number uniformly
sampled from [0; a (cid:3) sens). Suppose v1 > v2, OP I(k; v) = a (cid:3)
v1 +b+r1 and OP I(k; v2) = a(cid:3)v2 +b+r2. Then, OP I(k; v1)(cid:0)
OP I(k; v2) = a(cid:3)(v1(cid:0)v2)+r1(cid:0)r2. Since a(cid:3)(v1(cid:0)v2) (cid:21) a(cid:3)sens
and (cid:0)a(cid:3) sens  0.
5.2 The Method for Comparing Ciphertexts
Our method for comparing ciphertexts is to convert a cipherext
into an order-preserving index. We use this method to compare
encrypted distances in k-means clustering. However, it can also
be applied to compare ciphertexts in other applications. Hence, for
generality, we represent a ciphertext in the form a(cid:3)f (V )+g(V; R),
where a belongs to the encryption key, V a set of plaintext values,
R a set of random numbers, f and g two functions deﬁned with
addition or multiplication operations (i.e., reﬂecting the operations
over ciphertexts in a fully homomorphic encryption scheme).
Our method needs the sensitivity of f (V ), which speciﬁes the
minimum gap between f (V1) and f (V2) for two different sets of
plaintext values V1 and V2. The sensitivity of f (V ) is determined
by its maximum scale. If its maximum scale is s, then its sensitivity
(cid:0)s. The scale of f (V ) can be derived from the scales of values
is 10
in V by the following rules. Suppose v1 2 V and v2 2 V have
the scales s1 and s2, respectively. Then, the scale of v1 + v2 is the
bigger one in s1 and s2, and the scale of v1 (cid:3) v2 is s1 + s2.
Suppose f (V ) has sensitivity sensf . Given a ciphertext a (cid:3)
f (V ) + g(V; R), our method converts it into the order-preserving
index a (cid:3) f (V ) + b + r, where the pair (a; b) is the indexing key
and r is a random number uniformly sampled from [0; a (cid:3) sensf ).
Hence, according to the above order-preserving indexing scheme,
if f (V1) > f (V2), we have a(cid:3)f (V1)+b+r1 > a(cid:3)f (V2)+b+r2.
To allow a service provider to convert a ciphertext into an order-
preserving index, the data owner needs to provide the trapdoor in-
formation (cid:0)g(V; R)+b+r. By adding the trapdoor information to
the ciphertext, the service provider gets the order-preserving index
a(cid:3)f (V )+b+r. Note that the trapdoor information (cid:0)g(V; R)+b+r
is randomised with r, so it is secure for the data owner to provide
such information to the service provider. Moreover, in our appli-
cation of k-means clustering, f (V ) will be the squared distances
between data objects and cluster centers, so the conversion of f (V )
to order-preserving indexes does not reduce the security of homo-
morphically encrypted data objects.
In the following, we apply this method to compare encrypted
distances in the k-means clustering algorithm. For this application,
we deﬁne an approach that allows the data owner to use only the
updated cluster centers to compute the trapdoor information in each
k-means clustering iteration. Since the number of clusters is usu-
ally small, the approach makes it possible for the data owner to
efﬁciently compute the trapdoor information.
d
5.3 Encrypted Distances
Suppose that there are n > 1 data objects and k clusters, and
that Oi (1 (cid:20) i (cid:20) n) is the ith data object and Ct (1 (cid:20) t (cid:20) k)
is the tth cluster center. The data object Oi and the cluster center
Ct are supposed to have d dimensions. The values of the jth di-
mension of Oi and Ct are represented by vij and ctj, respectively.
That is, Oi = (vi1; :::; vid) and Ct = (ct1; :::; ctd). Then, the
j=1(vij (cid:0) ctj)2, denoted
squared distance between Oi and Ct is
by D2(Oi; Cj). In the following, we compute the encrypted dis-
tance from the ciphertexts of Oi and Ct. This computation can be
done by the service provider.
∑
′
tj1; :::; e
Let K(m) be the key used to encrypt each attribute in all data
objects and cluster centers. With this key, the encryption of vij
is Enc(K(m); vij) = (eij1; :::; eijm) and the encryption of ctj is
′
tjm). Recall that the key K(m) is a
Enc(K(m); ctj) = (e
list [(k1; s1; t1); :::; (km; sm; tm)] and there is only one i (1 (cid:20) i (cid:20)
m(cid:0) 1) such that ti ̸= 0. For simplicity, we assume t1 ̸= 0. Hence,
only the subciphertext eij1 contains the information of vij, and the
′
subciphertext e
tj1 contains the information of ctj. We use eij1 and
′
tj1 to compute the encrypted distance between Oi and Ct. The
e
other subciphertexts eij2,...,eijm of vij will be needed when calcu-
′
′
tjm of
lating new cluster centers, while the subciphertexts e
tj2,...,e
ctj are not needed.
According to the encryption scheme, we have eij1 = k1 (cid:3) t1 (cid:3)
tj1 = k1(cid:3)t1(cid:3)ctj +s1(cid:3)
vij +s1(cid:3)rijm +k1(cid:3)(rij1(cid:0)rij(m(cid:0)1)) and e
′
tj1 (cid:0) r
tjm + k1 (cid:3) (r
′
′
′
tj(m(cid:0)1)), where the random numbers rij1,
r
′
rij(m(cid:0)1), rijm are generated for the encryption of vij, and r
tj1,
′
′
tj(m(cid:0)1), and r
tjm are for the encryption of ctj. By using eij1
r
′
and e
tj1, the service provider can calculate ED2(Oi; Ct), which
encrypts D2(Oi; Ct).
∑
∑
j=1(eij1 (cid:0) e
′
= (k1 (cid:3) t1)2 (cid:3)∑
tj1)2
j=1(k1 (cid:3) t1 (cid:3) (vij (cid:0) ctj ) + (N Vij (cid:0) N Ctj ))2
+2 (cid:3) k1 (cid:3) t1 (cid:3)∑
j=1(vij (cid:0) ctj )2
∑
j=1(vij (cid:0) ctj ) (cid:3) (N Vij (cid:0) N Ctj )
+2 (cid:3) k1 (cid:3) t1 (cid:3)∑
∑
j=1(vij (cid:0) ctj ) (cid:3) (N Vij (cid:0) N Ctj )
j=1(N Vij (cid:0) N Ctj )2
= (k1 (cid:3) t1)2 (cid:3) D2(Oi; Ct)
j=1(N Vij (cid:0) N Ctj )2
tjm + k1 (cid:3) (r
′
′
tj1
where N Vij = s1 (cid:3) rijm + k1 (cid:3) (rij1 (cid:0) rij(m(cid:0)1))
′
tj(m(cid:0)1))
N Ctj = s1 (cid:3) r
(cid:0) r
ED2(Oi; Ct) =
=
+
+
d
d
d
d
d
d
d
To convert ED2(Oi; Ct) into an order-preserving index, we need
to express it in the format a (cid:3) f (V ) + g(V; Rit). This can be
achieved by deﬁning a, f (V ) and g(V; Rit) as follows, where
V = fOi; Ctg and Rit = frij1; rij(m(cid:0)1); rijm; r
tjmj1 (cid:20) j (cid:20) dg.
′
∑
g(V; Rit) = 2 (cid:3) k1 (cid:3) t1 (cid:3)∑
j=1(vij (cid:0) ctj )2
j=1(vij (cid:0) ctj ) (cid:3) (N Vij (cid:0) N Ctj )
a = (k1 (cid:3) t1)2
f (V ) = D2(Oi; Ct) =
′
tj(m(cid:0)1);
′
tj1; r
r
d
d
∑
+
d
j=1(N Vij (cid:0) N Ctj )2
As discussed above, if the data owner can provide the trapdoor
information (cid:0)g(V; Rit) + b + r to the service provider, then the
126order-preserving index a(cid:3) f (V ) + b + r can be obtained for the the
service provider to compare the squared distance ED2(Oi; Cj).
The sampling range of r needs the sensitivity of D2(Oi; Ct) for all
1 (cid:20) i (cid:20) n and 1 (cid:20) t (cid:20) k. As discussed before, the sensitivity can