title:Cryptanalysis of the windows random number generator
author:Leo Dorrendorf and
Zvi Gutterman and
Benny Pinkas
Cryptanalysis of the Windows Random Number Generator
Leo Dorrendorf
School of Engineering and
Computer Science
The Hebrew University of
Jerusalem
91904 Jerusalem, Israel
PI:EMAIL
Zvi Gutterman
School of Engineering and
Computer Science
The Hebrew University of
Jerusalem
91904 Jerusalem, Israel
PI:EMAIL
Benny Pinkas∗
Department of Computer
Science
University of Haifa
31905 Haifa, Israel
PI:EMAIL
ABSTRACT
The pseudo-random number generator (PRNG) used by
the Windows operating system is the most commonly used
PRNG. The pseudo-randomness of the output of this gen-
erator is crucial for the security of almost any application
running in Windows. Nevertheless, its exact algorithm was
never published.
We examined the binary code of a distribution of Win-
dows 2000, which is still the second most popular operat-
ing system after Windows XP. (This investigation was done
without any help from Microsoft.) We reconstructed, for the
ﬁrst time, the algorithm used by the pseudo-random number
generator (namely, the function CryptGenRandom). We ana-
lyzed the security of the algorithm and found a non-trivial
attack: given the internal state of the generator, the previ-
ous state can be computed in O(223) work (this is an attack
on the forward-security of the generator, an O(1) attack on
backward security is trivial). The attack on forward-security
demonstrates that the design of the generator is ﬂawed, since
it is well known how to prevent such attacks.
We also analyzed the way in which the generator is run
by the operating system, and found that it ampliﬁes the
eﬀect of the attacks. As a result, learning a single state
may reveal 128 Kbytes of the past and future output of
the generator. The implication of these ﬁndings is that a
buﬀer overﬂow attack or a similar attack can be used to
learn a single state of the generator, which can then be used
to predict all random values, such as SSL keys, used by a
process in all its past and future operation. This attack is
more severe and more eﬃcient than known attacks, in which
an attacker can only learn SSL keys if it is controlling the
attacked machine at the time the keys are used.
Categories and Subject Descriptors
D.4.6 [Security and Protection]
∗
Research supported in part by the Israel Science Founda-
tion (grant number 860/06).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright  2007  ACM  978-1-59593-703-2/07/0010...$5.00.
General Terms
Security.
Keywords
Pseudo Random Number Generator (PRNG), Windows op-
erating system, cryptanalysis.
1.
INTRODUCTION
Almost all cryptographic systems are based on the use of
a source of random bits, whose output is used, for exam-
ple, to choose cryptographic keys or choose random nonces.
The security analysis (and proofs of security) of secure sys-
tems are almost always based on the assumption that the
system uses some random data (e.g., a key) which is uni-
formly distributed and unknown to an attacker. The use of
weak random values may result in an adversary being able
to break the system (e.g., weak randomness may enable the
adversary to learn the cryptographic keys used by the sys-
tem). This was demonstrated for example by the analysis of
the implementation of SSL in Netscape [7], or in an attack
predicting Java session-ids [9].
Generation of pseudo-random numbers. Physical sources
of randomness are often too costly and therefore most sys-
tems use a pseudo-random number generator. The generator
is modeled as a function whose input is a short random seed,
and whose output is a long stream which is indistinguishable
from truly random bits. Implementations of pseudo-random
generators often use a state whose initial value is the random
seed. The state is updated by an algorithm which changes
the state and outputs pseudo-random bits, and implements a
deterministic function of the state of the generator. The the-
oretical analysis of pseudo-random generators assumes that
the state is initialized with a truly random seed. Implemen-
tations of pseudo-random generators initialize the state with
random bits (“entropy”) which are gathered from physical
sources, such as timing of disk operations, of system events,
or of a human interface. Many implementations also refresh
(or “rekey”) the state periodically, by replacing the existing
state with one which is a function of the existing state and
of entropy similar to that used in the initialization.
Security properties. A pseudo-random number generator
must be secure against external and internal attacks. An at-
tacker might know the algorithm (or code) which deﬁnes the
generator, might know the output of the generator, might
be able at some point to examine the generators’s state,
and might have partial knowledge of the entropy used for
476refreshing the state. We list here the most basic security
requirements that must be provided by pseudo-random gen-
erators, using common terminology (e.g., of [2]).
• Pseudo-randomness. The generator’s output looks
random to an outside observer.
• Forward security. An adversary which learns the in-
ternal state of the generator at a speciﬁc time cannot
learn anything about previous outputs of the genera-
tor.
• Backward security (also known as break-in recovery).
An adversary which learns the state of the generator
at a speciﬁc time does not learn anything about fu-
ture outputs of the generator, provided that suﬃcient
entropy is used to refresh the generator’s state.
Regarding backward security, note that the generator oper-
ates as a deterministic process and therefore knowledge of
the state of the generator at a speciﬁc time can be used
to compute all future outputs of the generator (by simply
simulating the operation of the algorithm run by the genera-
tor). Consequently, backward security can only be provided
if the state of the generator is periodically refreshed with
data (“entropy”) which is suﬃciently random.
Forward security, on the other hand, is concerned with en-
suring that the state of the generator does not leak informa-
tion about previous states and outputs. If a generator does
not provide forward security then an attacker which learns
the state at a certain time can learn previous outputs of the
generator, and consequently, past transactions of the user of
the system. (Consider, for example, an attacker which uses
a computer in an Internet cafe and learns keys used by pre-
vious users of the machine. Another option for an attacker
is to decide which machine to attack only after observing
which machines are interesting as targets; e.g., machines
which were used by a speciﬁc user or were used for speciﬁc
transactions.) Forward security can be easily guaranteed by
ensuring that the function which advances the state is one-
way. It is well known how to construct forward-secure gener-
ators (for an early usage of such generators see, e.g., [3]; see
also [4] for a comprehensive discussion and a generic trans-
formation of any standard generator to one which provides
forward security). Forward security is also a mandatory re-
quirement of the German evaluation guidances for pseudo-
random number generators (AIS 20) [1]. The fact that the
random number generator used by Windows 2000 does not
provide forward security demonstrates that the design of the
generator is ﬂawed.
The random number generator used by Windows. This
paper studies the pseudo-random number generator used
in Microsoft Windows systems, which we denote as the
WRNG. The WRNG is the most frequently used pseudo-
random number generator, with billions of instances run-
ning at every given time. It is used by calling the function
CryptGenRandom. According to the book “Writing Secure
Code” [11], published by Microsoft, the WRNG was ﬁrst
introduced in Windows 95 and was since embedded in all
Windows based operating systems such as Windows XP or
Windows 2000, and in all their variants.1 According to [11]
1The statement in [11] was written before Windows Vista
was released. The documentation of CryptGenRandom states
that it is supported by Windows Vista, but we have not
veriﬁed this statement.
the design of the WRNG has not changed between the dif-
ferent version of the operating system.
In this work we examine the generator that is implemented
in the Windows 2000 operating system (service pack 4).
Windows 2000 is the second most popular operating system,
especially in enterprises, with a market share of 4.5%-6% as
of April 2007.2
WRNG usage. The WRNG is used by calling the Win-
dows system function CryptGenRandom with the parameters
Buffer and Len. Programs call the function with the re-
quired length of the pseudo-random data that they need,
and receive as output a buﬀer with this amount of random
data. The function is used by internal operating system ap-
plications such as the generation of TCP sequence numbers,
by operating system applications, such as the Internet Ex-
plorer browser, and by applications written by independent
developers.
Our contributions. This paper describes the following re-
sults:
• We present a detailed analysis of the Windows pseudo
random number generator. The analysis is accompa-
nied by a concise pseudo-code for the entire imple-
mentation of the WRNG (the complete pseudo-code is
about 1000 lines of code), and by a user-mode simu-
lator of the WRNG. The analysis is based on exami-
nation of the binary code of the operating system, see
details below.
• We present an attack on the forward security of the
WRNG. We show how an adversary can compute past
outputs and states from a given state of the WRNG,
with an overhead of 223 computation (namely, in a
matter of seconds on a home computer).
• We present an attack on the backward security of the
WRNG. We show that given the inner state of the
WRNG an adversary can compute future outputs and
states with an overhead of O(1) computation.
• We analyze the way in which the operating system
uses the WRNG and note that a diﬀerent copy of the
WRNG is run, in user-mode, for every process, and
that typical invocations of the WRNG are seldom re-
freshed with additional entropy. Therefore, the back-
ward and forward security attacks, which only work
while there is no entropy based rekeying, are highly
eﬀective. Furthermore, we also found that part of the
state of the generator is initialized with values that are
rather predictable.
Attack model. Our results suggest the following attack
model: The attacker must obtain the state of the gener-
ator at a certain time. This can be done by attacking a
speciﬁc application and obtaining the state of the WRNG
run by this process, or by launching a buﬀer overﬂow attack
or a similar attack providing administrator privileges, and
obtaining the state of the generators run by all processes.
After learning the state the attacker does not need any ad-
ditional information from the attacked system. It can learn
all previous and future outputs of the generator, and sub-
sequently, learn cryptographic keys, such as SSL keys, used
2See
qprid=5,
pressbox46-operating-systems-market-share.html.
http://marketshare.hitslink.com/report.aspx?
http://www.onestat.com/html/aboutus_
by the attacked system. This attack is more powerful and
more eﬃcient than known attacks which require the attacker
to control the attacked machine at the time it is generating
cryptographic keys, observe these keys, and relay them to
the attacker (in particular, the latter attacks cannot reveal
keys which were used before the attacker obtained access to
the machine; they therefore require the attacker to attack a
machine before the time it is used by the attack target ).
Gap between theory and practice. Although the generation
of pseudo-random numbers is a well studied issue in cryp-
tography, the construction of an actual implementation of
a pseudo-random number generator is quite complex. This
is due to factors such as performance issues (provably se-
cure generators are typically considerably less eﬃcient than
ad-hoc constructions), real world attacks (such as timing at-
tacks and other side-channel attacks), seeding and reseeding
issues (generators are only secure if they are initialized with
a truly random seed; ﬁnding such a seed is not simple), and
lack of knowledge by developers. These factors demonstrate
the importance of providing a secure pseudo-random gener-
ator by the operating system. The designers of the operat-
ing system can be expected to be versed with the required
knowledge in cryptography, and know how to extract ran-
dom system data to seed the generator. They can therefore
implement an eﬃcient and secure generator. Unfortunately,
our work shows that the Windows pseudo-random generator
has several unnecessary ﬂaws.
1.1 Related Work
In the past, PRNGs were either a separate program or
a standard library within a programming language. The
evolution of software engineering and operating systems in-
troduced PRNGs which are part of the operating system.
From a cryptographic point of view, this architecture is ad-
vantageous since it enables to initialize the PRNG with op-
erating system data (which has more entropy and is hidden
from users). The PRNGs of the FreeBSD and OpenBSD
operating systems are described in [14] and [5], respectively.
The Linux PRNG. The Linux operating system includes
an internal entropy based PRNG named /dev/random [16],
which, following [10], we denote as the LRNG. The exact
algorithm used by the LRNG (rather than the source code,
which is open) was published in [10], where several security
weaknesses of this generator were also presented. We discuss
in detail in Section 5 the diﬀerences between the LRNG and
the WRNG. We note here that the attack on the WRNG is
more eﬃcient, and that in addition, unlike the LRNG, the
WRNG refreshes its state very rarely and is therefore much
more susceptible to attacks on its forward and backward
security. On the other, the WRNG is not susceptible to
denial of service attacks, which do aﬀect the LRNG.
Analysis of PRNGs. A comprehensive discussion of the
system aspects of PRNGs, as well as a guide to design-
ing and implementing a PRNG without the use of special
hardware or access to privileged system services, is given by
Gutmann [8].
Issues related to operating system entropy
sources were discussed in a recent NIST workshop on ran-
dom number generation [12]. An extensive discussion of
PRNGs, which includes an analysis of several possible at-
tacks and their relevance to real-world PRNGs, is given by
Kelsey et al. in [13].
The recent work of Barak and Halevi [2] presents a rig-
orous deﬁnition and an analysis of the security of PRNGs,
as well as a simple PRNG construction. That work sug-
gests separating the entropy extraction process, which is
information-theoretic in nature, from the output generation
process. The construction is much simpler than most exist-
ing PRNG constructions, yet its security was proved in [2]
assuming that the underlying building blocks are secure. We
note that our analysis shows that the WRNG construction,
which is much more complex than that of [2], suﬀers from
weaknesses which could have been avoided by using the lat-
ter construction.
2. THE STRUCTURE OF THE WINDOWS
RANDOM NUMBER GENERATOR
We start by discussing the process of analyzing the binary
code. Then we describe the main loop of the generator, the
functions called by this loop, the initialization of the state,
and the usage of the generator by the operating system.
We conclude this section by listing observations about the
structure of the generator.
2.1 Analyzing the Binary Code
The algorithm employed by the WRNG, and its design
goals, were never published. There are some published hints
about the inner structure of the WRNG [11]. However, the
exact design and security properties were not published.
Our entire research was conducted on the binary version
supplied with each running Windows system. We did not
have access to the source code of the generator. We ex-
amined the Windows 2000 operating system, which is the
second most popular operating system. The research was
conducted on Windows 2000 Service Pack 4 (with the follow-
ing DLL and driver versions: ADVAPI32.DLL 5.0.2195.6876,
RSAENH.DLL 5.0.2195.6611 and KSECDD.SYS 5.0.2195.824).
The entire inspected binary code is over 10, 000 lines of as-
sembly code.
Our study required static and dynamic analysis of the bi-