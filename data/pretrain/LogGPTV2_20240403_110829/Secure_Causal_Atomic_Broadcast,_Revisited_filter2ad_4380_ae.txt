K
(
t
u
p
h
g
u
o
r
h
T
30
20
10
0
0
PBFT
CP0
CP1
CP2
CP3
20
40
60
Number of clients
Fig. 5. Throughput for f = 1 in the WAN setting.
to recover the message. The peak throughput observed for
CP2 is around 26% lower than that of PBFT. CP2 and CP3
have consistently better performance than CP1, and their
peak throughput are 38% and 32% higher than that of CP1,
respectively.
We also test the throughput of the ﬁve protocols as the
maximum number of faulty replicas f varies, as summarized
in Fig. 6. We observe that the throughput difference between
CP2 and CP3 becomes more visible when f increases. This is
because CP3 needs increasingly more secret shares to recover
the secret, as f increases.
Fig. 5 reports the throughput in the WAN setting. We ﬁnd
that the throughput of CP1, CP2, and CP3 remains signiﬁ-
70
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
)
c
e
s
/
s
p
o
K
(
t
u
p
h
g
u
o
r
h
T
50
40
30
20
10
0
43
31.9
30.6
33
23.1
PBFT
CP0
CP1
CP2
CP3
26.8
23.1
21
28.9
23.8
22.1
19.2
2.9
2.5
f = 1
f = 2
2.1
f = 3
Fig. 6. Peak throughput for f = 1, 2, 3.
cantly higher than that of CP0. An interesting observation is
that CP1 outperforms CP3 as the number of clients increases.
Failure scenarios (in the LAN setting). We ﬁrst evaluate
the case for CP1 where clients only send the witnesses (i.e.,
the message and the opening) to a fraction of the replicas
but not all, and the replicas are correct. In this case, correct
replicas will run the ampliﬁcation step to forward the witness.
The forwarded message does not need to be authenticated,
because the witness is transferrable. We observe no obvious
performance difference between this failure scenario and the
failure-free scenario in terms of both latency and throughput,
which conﬁrms our expectations.
)
c
e
s
/
s
p
o
K
(
t
u
p
h
g
u
o
r
h
T
15
10
5
0
0
5 clients
10 clients
1
2
3
4
time (ms)
Fig. 7. Throughput for CP1 when clients are faulty.
We then evaluate another scenario for CP1 where clients
are faulty and fail to send the witnesses to any correct replica.
We set
the cleanup cycle to be a conservative value—10
times average latency. (Normally, we need not set up a ﬁxed
cleanup cycle, and replicas just count how many requests
have been scheduled after the ﬁrst tentative request appears.
Yet, in our setting, clients issue requests continuously and it
makes sense to assume a ﬁxed cleanup cycle.) In Fig. 7, we
demonstrate the throughput when there are 5 and 10 clients
respectively. In the experiment, they experience a failure at
1 ms and 1.5 ms, respectively. In both cases, during the
cleanup cycle, the throughput becomes 0. The cleanup cycle
with 5 clients is smaller than that with 10 clients, because the
former has lower average latency. During the cleanup cycle,
the replicas continue to batch and schedule clients requests.
This explains the large throughput improvements after the
cleanup procedure. The performance of the systems resume
after the cleanup procedure. We comment that the performance
ﬂuctuation shares similarities with several state-of-the-art BFT
protocols under failures such as Aliph [4] and BChain [33].
However, CP1 additionally preserves causal order.
LATENCY FOR CP0, CP2, AND CP3 WITH FAULTY REPLICAS (IN MS).
TABLE IV
Protocol
CP0
CP2
CP3
f = 1
f = 3
1280.30 1513.40 1671.60
f = 2
0.26
0.28
0.39
0.43
0.50
0.71
Last, we test the performance for CP0, CP2 and CP3 under
Byzantine replica failures in TABLE IV. In this experiment,
we randomly corrupt replicas and ask them to contribute
faulty decryption shares. We ﬁnd that both CP2 and CP3 have
reasonable performance degradation. However, the difference
between CP2 and CP3 becomes even more visible compared
to that in the failure-free scenario. The reason is that CP3
requires even more communication and computation to re-
cover the message in the average case. In comparison, CP0
becomes much slower, as each replica has to run a lot more
expensive decryption share veriﬁcation operations to combine
the message.
VII. CONCLUSION
Over the past three decades, all known secure causal atomic
broadcast protocols have been based on expensive threshold
cryptosystems which can be built from only a handful of
number-theoretic assumptions. We revisited the problem by
providing both generic frameworks and efﬁcient instantiations.
In particular, we showed that secure causal atomic broadcast
protocols can be constructed from a variety of cryptographic
primitives; we also showed that our protocols signiﬁcantly
outperform those based on threshold cryptosystems. At the
core of our constructions are two new cryptographic primitives
which may be of independent interests.
ACKNOWLEDGMENT
The authors are indebted to the DSN reviewers for their
insightful comments. Sisi was sponsored in part by UT-
Battelle, LLC under Contract No. DE-AC05-00OR22725 with
the Department of Energy. Mike was supported in part by
NSF grant CNS 1330599. Haibin was supported in part by
NSF grant CNS 1330599 and CNS 1413996.
REFERENCES
[1] M. Abd-El-Malek, G. Ganger, G. Goodson, M. K. Reiter, and J. Wylie.
Fault-scalable Byzantine fault-tolerant services. SOSP 2005.
[2] A. Adya et al. FARSITE: Federated available and reliable storage for
incompletely trusted environments. OSDI’02.
71
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
[39] C. Gentry. Fully homomorphic encryption using ideal
lattices.
STOC ’99.
[40] O. Goldreich and R. Ostrovsky. Software protection and simulation on
oblivious RAMs. Journal of the ACM, 1996.
[41] L. Harn and C. Lin. Detection and identiﬁcation of cheaters in (t, n)
secret sharing scheme. DCC, vol. 52, no. 1, pp. 15–24, Jan. 09.
[42] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed. ZooKeeper: Wait-free
coordination for Internet-scale systems. USENIX ATC 2010.
[43] A. Iyengar, R. Cahn, C. Jutla, and J. Garay. Design and implementation
of a secure distributed data repository. 14th IFIP ISC, 1998.
[44] R. Kotla, L. Alvisi, M. Dahlin, A. Clement, and E. Wong. Zyzzyva:
Speculative Byzantine fault tolerance. SOSP 2007.
[45] J. Kubiatowicz et al. OceanStore: An architecture for global-scale
persistent storage. 9th ASPLOS, 2000.
[46] R. Ladin, B. Liskov, and L. Shrira. Lazy replication: Exploiting the
semantics of distributed services. PODC, pp. 43–57, 1990.
[47] L. Lamport. Time, clocks, and the ordering of events in a distributed
system. Comm. ACM 21, 7 (July), 558–565, 1978.
[48] L. Lamport. Using time instead of timeout for fault-tolerant distributed
systems. Trans. Prog. Lang. and Systems 6(2):254–280, 1984.
[49] L. Lamport. On interprocess communication. part I: Basic formalism.
Distrib. Comput. 1, 2, 77–85, 1986.
[50] L. Lamport, R. Shostak, and M. Pease. The Byzantine generals problem.
ACM Trans. on Programming Languages and Systems 4(3): 382–401.
[51] H. Lin and R. Pass. Concurrent non-malleable commitments from any
one-way function. TCC 2008, 2008.
[52] A. Mille, Y. Xia, K. Croman, E. Shi, and D. Song. The honey badger
of BFT protocols. ACM CCS 16, 2016.
[53] R. Padilha and F. Pedone. Belisarius: BFT Storage with conﬁdentiality.
[54] R. Padilha and F. Pedone. Conﬁdentiality in the Cloud. IEEE Security
NCA 2011.
& Privacy, 2015
[55] O. Pandey, R. Pass, and V. Vaikuntanathan. Adaptive one-way functions
and applications. CRYPTO 2008, pp. 57–74, 2007.
[56] R. Pass and A. Rosen. Concurrent nonmalleable commitments. SIAM J.
Comput. 37(6): 1891-1925 (2008).
[57] M. K. Reiter and K. Birman. How to securely replicate services. ACM
TOPLAS, vol. 16 issue 3, pp. 986–1009, ACM, 1994.
[58] P. Rogaway. Authenticated-encryption with associated-data. CCS’02.
[59] P. Rogaway, M. Bellare, and J. Black. OCB: A block-cipher mode of
operation for efﬁcient authenticated encryption. ACM TISSEC, 2003.
[60] A. Rowstron and P. Druschel. Storage management and caching in PAST,
a large-scale, persistent peer-to-peer storage utility. SOSP 2001.
[61] F. Schneider. Implementing fault-tolerant services using the state ma-
chine approach: A tutorial. ACM Comput. Surveys 22(4): 299–319,
1990.
[62] R. Schwarz and F. Mattern. Detecting causal relationships in distributed
computations: In search of the holy grail. Distributed Computing 7(3),
149–174, 1994.
[63] A. Shamir. How to share a secret. Comm. ACM, 22(11), 612–613, 1979.
[64] V. Shoup and R. Gennaro. Securing threshold cryptosystems against
chosen ciphertext attack. EUROCRYPT ’98.
[65] J. Yin, J. Martin, A. Venkataramani, L. Alvisi, and M. Dahlin. Separating
agreement from execution for Byzantine fault tolerant services. SOSP
2003.
[3] Amazon Web Services (AWS). https://aws.amazon.com/
[4] P-L. Aublin, R. Guerraoui, N. Knezevic, V. Quema, and M. Vukolic.
The next 700 BFT protocols. TOCS, vol. 32, issue 4, January 2015.
[5] J. Baek and Y. Zheng. Simple and efﬁcient threshold cryptosystem from
the gap difﬁe-hellman group. GLOBECOM ’03, pp. 1491–1495, 2003.
[6] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash functions for
message authentication. CRYPTO 1996.
[7] M. Bellare, A. Desai, D. Pointcheval, and P. Rogaway. Relations among
notions of security for public-key encryption schemes. CRYPTO ’98.
[8] M. Bellare and P. Rogaway. Random oracles are practical: A paradigm
for designing efﬁcient protocols. CCS 93, 1993.
[9] M. Bellare and P. Rogaway. Robust computational secret sharing and a
uniﬁed account of classical secret-sharing goals. CCS 07, 2007.
[10] M. Bellare and A. Sahai. Non-malleable encryption: Equivalence
between two notions, and indistinguishability-based characterization.
CRYPTO ’99.
[11] M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theo-
rems for non-cryptographic fault-tolerant distributed computation. STOC
1988.
[12] A. Bessani, E. Alchieri, M. Correia, and J. Fraga. DepSpace: A Byzan-
tine fault-tolerant coordination service. EuroSys ’08.
[13] A. Bessani, J. Sousa, and E. Alchieri. State machine replication for the
masses with BFT-SMART. DSN ’14.
[14] K. Birman and T. Joseph. Reliable communication in the presence of
failures. ACM Transactions on Computer Systems 1(5), 47–76, 1987.
[15] BlueKrypt:
Cryptographic
key
length
recommendation.
https://www.keylength.com/
[16] D. Boneh, X. Boyen, and S. Halevi. Chosen ciphertext secure public
key threshold encryption without random oracles. CT-RSA, 2006.
[17] T. Benzel.The science of cyber security experimentation:
the deter
project. ACSAC, pp. 137–148, 2011.
[18] M. Burrows. The Chubby lock service for loosely-coupled distributed
systems. OSDI, 2006.
2010, pp. 169–184, 2010.
[19] C. Cachin. State machine replication with Byzantine faults. Replication
[20] C. Cachin, K. Kursawe, A. Lysyanskaya, and R. Strobl. Asynchronous
veriﬁable secret sharing and proactive cryptosystems. ACM CCS, 2002.
[21] C. Cachin, K. Kursawe, F. Petzold, and V. Shoup. Secure and efﬁcient
asynchronous broadcast protocols (extended abstract). CRYPTO 2001.
[22] C. Cachin, K. Kursawe, and V. Shoup. Random oracles in Constantino-
ple: Practical asynchronous Byzantine agreement using cryptography.
Journal of Cryptology 18(3), 219–246.
[23] C. Cachin and J. Poritz. Secure Intrusion-tolerant Replication on the
Internet. DSN 2002, pp. 167–176, 2002.
[24] C. Cachin and A. Samar. Secure distributed DNS. DSN 2004.
[25] C. Cachin and S. Tessaro. Asynchronous veriﬁable information dispersal.
SRDS 2005.
[26] M. Castro and B. Liskov. Practical Byzantine fault
tolerance and
proactive recovery. ACM Trans. Comput. Syst, 20(4): 398–461, 2002.
[27] A. Clement, E. Wong, L. Alvisi, M. Dahlin, and M. Marchetti. Making
Byzantine fault tolerant systems tolerate Byzantine faults. NSDI 2009.
[28] J. Corbett et al. Spanner: Google’s globally-distributed database. OSDI,
2012.
[29] J. Cowling et al. HQ replication: A hybrid quorum protocol for Byzan-
tine fault tolerance. OSDI 2006.
[30] X. D´efago, A. Schiper, and P. Urb´an. Total order broadcast and multicast
algorithms: taxonomy and survey. ACM Comp. Surv., 36(4), 2004.
[31] G. Di Crescenzo, Y. Ishai, and R. Ostrovsky. Non-interactive and non-
[32] D. Dolev, C. Dwork, and M. Naor. Nonmalleable cryptography. SIAM
malleable commitment. STOC ’98.
J. Comp. 30 (2) 391–437, 2000.
[33] S. Duan et al. BChain: Byzantine replication with high throughput and
embedded reconﬁguration. OPODIS 2014.
[34] S. Duan, Karl Levitt, H. Meling, S. Peisert, and H. Zhang. ByzID:
Byzantine fault tolerance from intrusion detection. SRDS, 2014.
[35] S. Duan and H. Zhang. Practical state machine replication with conﬁ-
dentiality. SRDS, 2016.
[36] C. Fidge. Timestamps in message-passing systems that preserve the
partial ordering. 11th Australian Computer Science Conference, 1988.
[37] M. Fischlin and R. Fischlin. Efﬁcient non-malleable commitment
schemes. Journal of Cryptology, vol. 22, no. 4, 2009.
[38] J. Garay, R. Gennaro, C. Jutla, and T. Rabin. Secure distributed storage
and retrieval. TCS, 243 (1-2): 363–389, 2000.
72
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply.