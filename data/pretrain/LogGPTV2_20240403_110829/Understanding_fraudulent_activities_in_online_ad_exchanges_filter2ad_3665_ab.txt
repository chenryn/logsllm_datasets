volves fabricating HTTP requests to either the publisher’s page, or
the ad server directly, to artiﬁcially inﬂate the actual amount of traf-
ﬁc. This type of fraud targets CPM deals, but may be mixed in with
other types of fraud to remain stealthy [6]. One such kind of fraud
that is usually more proﬁtable than impression spam alone is click
spam, which is done by generating HTTP requests to advertisement
click URLs, usually after an ad is served. There are two kinds of
click spam fraud. Click inﬂation is the practice of publishers mak-
ing more money than they deserve through inﬂating CPC deals, or
Publisher (Web Site)Web BrowserRightMedia Ad ServerAdvertiserAd NetworkGet Website ContentAd Request281increasing their CTR and thus their eCPM. Competitor clicking is
the practice of advertisers making false clicks against competitor’s
ads to deplete their advertising budget. The last type of trafﬁc inﬂa-
tion is called conversion (action) spam, and is like click spam but
requires certain GET or POST parameters, requests a ﬁle for down-
load, or follows a speciﬁc order of pages to generate a conversion
against that advertiser. Like click spam, this can be perpetrated by
either publishers or advertisers. This type of fraud only works if
the action does not require spending money directly, such as pur-
chasing an item from the website.
Lastly, misrepresentation is the practice of a publisher breaking
some rule of the network or exchange by lying about their web-
site contents or about what pages ads are actually being shown on
(e.g., by spooﬁng the referring URL). The publisher normally does
this to get higher value ads on their pages than they would be able
to get if they did not lie about their website contents, or because
their website contents are illegal and would not be allowed in the
network otherwise.
2.6 Known Types of Attacks
Below are the known types of attacks that either have been per-
formed or could be performed in the context of an ad exchange:
• Hired Clickers: This type of attack involves someone sitting in
front of a computer and constantly reloading a page and clicking
on ads.
• Keyword Stufﬁng: A type of misrepresentation fraud that in-
creases the value of ads that are shown on the fraudster’s pages.
This is done by including a certain amount of “invisible” content
that contains many high-value advertising keywords. The invisible
content is either in hidden HTML tags, text that is the same color
as the background, or very small text. When the network crawls
the fraudster’s page to classify the content, the page will be classi-
ﬁed as being more valuable or targeted than it really is. This drives
higher value ads to the fraudster’s page,
• Impression Stufﬁng: The practice of fraudster’s putting excessive
numbers of banners on their pages so that they get a large number
of impressions for each page view. This also includes “stacking”
ads on top of each other so that background ads cannot be seen [8].
• Coercion: This attack is perpetrated by fraudsters who convince
users to click on their ads for reasons other than the ad content it-
self. This includes an administrator simply asking users to click on
their ads, but also includes obfuscating ads with actual site content
to trick a user into clicking on ads (e.g., making all valid links on
the page look like ads as well).
• Custom Clickbots: These are custom software components de-
veloped by fraudsters that perpetrates a particular kind of fraud
against certain publishers or advertisers. These clickbots normally
sit on one or more static machines and issue HTTP requests to cer-
tain URLs to simulate impressions, clicks, or conversions [6].
• For-sale Clickbots: These are bots that are available for down-
load or purchase and perform click fraud. The bots can be con-
ﬁgured to perform many types of fraud and can be given lists of
publishers’ pages to visit, ads to click on, and proxies to use to
diversify the bot’s IP addresses [6].
• Botnet Clickbots: Botnets are the most difﬁcult type of fraud to
detect from an ad exchange’s perspective, and it is the most com-
mon source of fraudulent Internet ad trafﬁc [21]. Botnets are unique
in that the software required to perpetrate fraud is located on many
benign users’ machines. The malicious software usually comes in
one of two ﬂavors:
those that run behind the scenes and act as
normal clickbots, and those that attempt to coerce the user of the
machine to perform some of the ad fraud actions.
• Forced Browser Clicks: An attack that forces the user’s browser
to follow the click URL of an ad by including some client-side
script, normally JavaScript. This type of attack can be avoided by
putting all ads in an iframe with the source attribute set to an ad
tag located on the ad network’s website. By using this technique,
the content of the iframe is not accessible to any script that did
not come from the same domain as the iframe’s source. However,
recent research suggests that there are still ways of getting click
URLs out of iframes [9].
2.7 Detection and Prevention Methods
Below are the known defenses against ad fraud in the context of
an ad exchange.
• Signature-based Detection: This type of detection uses static
rules to decide which ad trafﬁc should be considered valid and
which discarded as invalid. One example of a common rule is
that the second of any duplicate clicks (caused from a user double-
clicking an ad) is considered invalid. This type of detection is ben-
eﬁcial in ﬁnding known attacks by looking for known malicious
patterns, but it does not work on attacks whose patterns are not
known or do not follow static rules [17].
• Anomaly-based Detection: This approach uses historical infor-
mation about publishers to ﬁnd sudden changes in ad trafﬁc pat-
terns. This may involve looking for a sudden increase in the num-
ber of impressions from a publisher, the CTR of the publisher, or
the classiﬁcation/quality of trafﬁc the publisher is generating (e.g.,
a search engine that suddenly only queries for high-value ad key-
words). This type of detection is useful for identifying publishers
who are misbehaving or for when fraudsters change or update the
type of attack that they are perpetrating.
• Reverse Spidering (Auditing): The practice of ad networks, ad
exchanges, or advertisers crawling the HTTP Referer of incom-
ing impressions to ensure that the referring sites have the content
they claim to have. The reverse spiders look at keywords in HTML
content, JavaScript, and iframes of the pages to look for any poten-
tially illegitimate content. To avoid this kind of detection, fraud-
sters assign a unique ID to the referring URL each time a fraud-
ulent click or impression is generated. Then, when the audit pro-
gram crawls the referrer, the website will recognize that the ID has
already been used, and will not serve any malicious content to the
spider [9].
• Bluff Ads: These are ads that an ad network serves to a publisher
to detect fraudulent activity. These ads are served in response to
a random percentage of all requests that come from the publisher
and are unique in that they are purposefully uninviting (meaning
they contain little more than a picture with no text that does not
try to attract the user’s attention or get them to click on it). If the
click-through rate and conversion rate of these bluff ads is not much
lower than ads normally displayed, this would indicate fraud from
the publisher [11].
• Web Site Popularity and Page Rankings: The number of impres-
sions a publisher is generating for their Web page can be checked
against known, trusted website rankings such as Alexa or Com-
pete. If the publisher has much more trafﬁc than their page ranking
would suggest, this would be indicative of fraudulent activity [2].
282• Performance-based Pricing: Performance based pricing is sim-
ply a name for publisher payment schemes that do not pay on im-
pressions but instead on how much return on investment (ROI) an
advertiser gets from a publisher. The simplest performance-based
pricing model is CPC, but CPA deals fall into this category too.
This type of pricing reduces impression fraud by requiring publish-
ers to provide a certain level of measurable beneﬁt to the advertisers
to make money. This also reduces cost to advertisers as networks
with more fraud will have a lower ROI for their advertisers, mean-
ing that advertisers will have to pay less to get their ads shown. In
this way, performance-based pricing mitigates the effect of fraud
on the advertisers without actively avoiding it [12].
2.8 Botnet-Related Ad Fraud: A Case Study
In this section, we describe the process that allowed us to obtain
access to a command-and-control (C&C) server that controlled a
botnet used to commit ad fraud, and the data that we collected. The
bot malware ﬁrst came to our attention in February 2010, when
we were investigating botnets in the wild. By analyzing the net-
work connections generated by the malware sample, we were able
to identify the location of the C&C server that was in control of the
botnet. We then contacted the hosting provider whose server was
being used by the fraudsters and provided them with detailed evi-
dence of the abuse. The hosting provider suspended the criminal
account in March 2010 and provided us with access to the informa-
tion stored on the server.
By studying the behavior of a bot sample and the source code of
the botnet C&C, we were able to get a complete view of how the
entire operation functioned. There were two primary methods the
botmasters used to earn money: impression/click fraud and afﬁliate
programs that paid a commission based on conversions (e.g., regis-
tration, sales, etc). The mode of operation for the impression/click
fraud was managed by a conﬁguration ﬁle received from the C&C
server. The conﬁguration contained various parameters for control-
ling the patterns of impressions and clicks, iframes to load within
a Web browser, and a list of domains that were used to spoof the
source of the impression/click through the HTTP Referer ﬁeld.
The iframes are directly loaded by the malware in the background
of a running Internet Explorer instance through a browser-helper
object extension, and they are invisible to the user of the infected
system. When the malware loads an iframe, it generates an ad
request to RightMedia using a section ID of the fraudsters and a
spoofed Referer that was set by the conﬁguration ﬁle. By load-
ing the iframe directly from each bot, the malware does not need to
visit an actual website to emulate impression and clicks.
Interestingly, we found that the domains that were used to spoof
the Referer ﬁeld of the fraudulent ad requests contained legit-
imate RightMedia ads. We will discuss the practice of spooﬁng
the referrer later in Section 5.2, but we believe that the fraudsters
use such legitimate sites to remain stealthier. There were also a
small number of domains (and websites) in the conﬁguration ﬁle
that were set up by the fraudsters and used to register multiple pub-
lisher accounts. At ﬁrst these sites seemed legitimate, but on closer
examination we identiﬁed that the content on these pages was ac-
tually stolen from other sites. We will describe these fake websites
in more detail in the next section.
Periodically, an infected computer connects back to the C&C
server to report its status and to receive a new list of instructions.
We also found that the C&C server had the ability to push arbitrary
binary executables to the bots; this was regularly used to upgrade
the click-fraud malware to newer versions, but could have been
used to push more intrusive spyware or adware onto the victims’
machines. The bot malware also used browser hijacking to redi-
Figure 2: Number of fraudulent impressions and clicks from a
click-fraud botnet.
rect users from a target site (e.g., freecreditreport.com) to an afﬁli-
ate site (e.g., incentaclick.com and adsmarket.com). Depending on
the referring site, the afﬁliate site would redirect a user’s browser
to a similar website (e.g., gofreecredit.com). Based on the records
maintained by the botnet controllers, their malware redirected users
3,425,030 times from mid-February to May 2010. However, the
number of conversions was not stored on the C&C server, so we
cannot determine how many users fell for the scam.
The database for this particular botnet contained records for 530,
985 bot installations, with 1,479,036,685 impressions and 14,060,
716 clicks (an average click through rate of 0.95%) from mid-
February to May 2010. The daily number of impressions and clicks
is shown in Figure 2. Interestingly, the ratio of impressions to clicks
followed each other almost exactly over time. In Section 4, we will
use this behavior as a method for detecting which IP addresses are
potentially clickbots. As we will discuss in Section 3.1, the average
CPM for impressions and cost-per-click were $0.084 and $0.017,
respectively. In other words, the cybercriminals behind the botnet
may have netted approximately $124,000 for impressions and an-
other $255,000 for clicks during this 2.5 month period.
We would also like to point out that this botnet malware operates
based on an afﬁliate program out of Eastern Europe (commonly re-
ferred to as a partnerka) similar to other online criminal operations
such as fake antivirus ventures [23]. More speciﬁcally, attackers
are paid to compromise as many computers as possible and infect
them with malware. It should be noted that this botnet has been
operational for more than a year, and is still active, at the time of
writing.
2.9 Fake Web Sites
The information from the botnet C&C server revealed a number
of cases in which the fraudsters used fake websites with seemingly
legitimate domain names to register as publishers with different ad
networks. At ﬁrst glance, these websites appeared to contain useful
content for Web visitors. However, upon further (manual) inspec-
tion, we found that there were common patterns shared by many
of these sites. The format of these sites was identical, namely a
Wordpress blog template with posts only by an “admin” user, no
comments, and a large number of ads (from several different ad
exchanges) embedded throughout each of the pages. All of them
were based on the same HTML template and, most importantly,
contained content that was stolen from other websites. In addition,
the sites appeared to be hastily set up with parts of the templates
10^{2}10^{3}10^{4}10^{5}10^{6}10^{7}10^{8}02/14/201002/21/201002/28/201003/07/201103/14/201003/21/201003/28/201004/04/201004/11/201004/18/201004/25/201005/02/201005/09/201005/16/2010Number of Fraudulent Impressions/ClicksDateImpressionsClicks283displaying default text (e.g., “text goes here”). Furthermore, we
analyzed the WHOIS information for these website domain names
and found very similar registration information (name, phone num-
ber, address) across many of these domains.
The fraudsters behind the botnet C&C server created a number
of these fake websites in order to register as a publisher with several
ad networks. After receiving section IDs, the malware spoofed the
HTTP Referer ﬁeld and directly loaded the HTML iframe that
contained the ads that would normally be found on one of these
fake websites. In other words, the malware did not need to visit
the fake websites to load advertisements, but rather could bypass
the fake websites to reduce the amount of bandwidth and hosting
costs.
3. DATA COLLECTION
In this section, we describe the dataset that we utilized to study
the RightMedia ad exchange. We also discuss how we manually es-
tablished a ground truth dataset of good and bad publishers, which
we then used to evaluate different models that could be used for
fraud detection.
3.1 Data Feed
We obtain a feed of real-world ad data from NETWORKX, which
is an ad network that is part of the RightMedia exchange. Every 30
minutes, we receive a batch of the trafﬁc that this ad network has
seen in the previous time period.
The trafﬁc can be split into three distinct ﬂows based on the dif-
ferent types of transactions that are allowed in RightMedia. These
ﬂows are local publisher trafﬁc, arbitrage trafﬁc, and auction trafﬁc;
depending on which ﬂow we were analyzing, different amounts of
data were available to us. Local publisher trafﬁc is any trafﬁc that
originated from an ad request from one of NETWORKX’s own pub-
lishers. Of all the ﬂows, local trafﬁc provided us with the most
detailed information per impression, both because all the ﬁelds in
the ad request were populated with meaningful information and be-
cause we could look up additional information about the publish-
ers’ accounts from NETWORKX’s database. Auction trafﬁc is any
trafﬁc that NETWORKX made money on through linked partnership
as a middleman but that NETWORKX did not buy or sell directly.
A number of ﬁelds for auction trafﬁc records are suppressed to pro-
tect linked partners from being able to learn too much about each
other’s trafﬁc. Arbitrage trafﬁc is trafﬁc that was either purchased
by or sold by NETWORKX itself (see Section 2.4); this was the
most difﬁcult type of trafﬁc to analyze. Arbitrage trafﬁc comes in
pairs, with one impression representing the purchase of the ad traf-
ﬁc and a corresponding impression for reselling the ad trafﬁc. Un-
fortunately, there was no way to reliably pair bought impressions
with sold ones.
To study the data feed, we implemented an automated system to
periodically retrieve NETWORKX’s data records and extract rele-
vant information. The data itself was in the form of RightMedia’s
Custom Data Feed format, which contains a log of each impres-
sion, click, and conversion that was received by NETWORKX. Each
ﬁle represented 30 minutes of trafﬁc, was about 200 Megabytes
unpacked, and contained, on average, details for approximately
750,000 impressions. The feed had 51 individual ﬁelds that were
conditionally populated. We found the following ﬁelds to be most
useful for identifying potential fraud:
• IP Address: Right Media only provides an ad network with the
ﬁrst three bytes of the IPv4 address, to preserve users’ privacy.
However, we were able to estimate how many different users were
in each 24 preﬁx based on how many unique cookie IDs we identi-
ﬁed per IP address.
• Cookie ID: Unique token given to each browser instance that
views an ad; it is stored as a cookie on the local machine and sent
with every ad request. Note that this ID is a hash of the actual