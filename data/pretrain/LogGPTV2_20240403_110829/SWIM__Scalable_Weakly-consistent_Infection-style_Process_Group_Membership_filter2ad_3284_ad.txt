d
o
i
r
e
p
l
t
o
c
o
o
r
p
(
e
m
T
i
8
6
4
2
0
8
Avg. First Detection
Analytic=e/(e-1)
16
24
Group Size
32
40
i
e
z
S
p
u
o
r
G
20
18
16
14
12
10
8
6
4
2
0
(Member Join Times)
SWIM:Basic
SWIM+Inf.
SWIM+Inf.+Susp.
0
25
50
75
100
Time (sec)
125
150
175
(a) Variation with group size of time to ﬁrst detec-
tion of a process failure (points), and means (dark
horizontal lines) obtained in the shown intervals
(light vertical lines), for the three protocols. Also
shown is the analytic estimate from Section 3.1.
)
s
d
o
i
r
e
p
l
t
o
c
o
o
r
p
(
e
m
T
i
6
5
4
3
2
1
0
Median Infection Time
8
16
24
32
40
48
56
Group Size
(b) Latency of spread of Infection through the
group in SWIM+Inf.
and SWIM+Inf.+Susp.
Points shown correspond to ﬁrst receipt times of
infection at different group members.
20
15
10
5
)
s
d
o
i
r
e
p
l
o
c
o
t
o
r
p
#
(
e
m
T
i
0
8
Suspicion Time-out
16
24
32
40
48
56
Group Size
Suspicion
time-out
(c)
SWIM+Inf.+Susp. protocol.
used
in
the
Figure 3. Detection and Dissemination Time of membership
updates.
Figure 4. Effect of 10% packet loss rate on a member join
sequence (blips at bottom), with conservative protocol parameters.
Figure 3(c) shows the suspicion time-out (3(cid:13)log(N +
1)(cid:14)), and is applicable only to the SWIM+Inf.+Susp. pro-
tocol.
The average time between a process failure and its re-
moval from the membership lists of other members is ob-
tained from the three plots in Figure 3. For the SWIM:Basic
protocol, this is the value plotted in Figure 3(a) plus the
time taken by a network multicast. For the SWIM+Inf.
protocol, this is the sum of the distributions on the ver-
tical axes of Figure 3(a) and Figure 3(b), while for the
SWIM+Inf.+Susp. protocol, this delay is the sum of the
distributions on the three plots in Figure 3.
5.3. Failure Detection False Positives
The runs of the SWIM+Inf.+Susp. protocol in Figure 3
generated an insigniﬁcant number of false failure detec-
tions. In order to evaluate the relative beneﬁt of the infection
and suspicion mechanisms, we synthesized a high artiﬁcial
packet drop of 10%. Each packet (including each network
multicast in SWIM:Basic) was dropped at the receiver with
this loss probability. In our experiment, 17 processes at-
tempted to join a SWIM group sequentially, as shown in
Figure 4. The plot shows the variation of group size dur-
ing and after this joining phase, in spite of the sustained
packet loss rate. The plot is cut off at 175 s, after the last
observed membership change. This plot shows the beneﬁt
of the Suspicion mechanism: while SWIM+Inf.+Susp. at-
tains a stable group size of 12 members, SWIM:Basic and
SWIM+Inf. stabilize at 2 and 4 members respectively.
The data in Figure 4 holds for the described experimental
settings only. A more aggressive setting of parameters K
and the suspicion time-out would increase the robustness
of the three protocols. Varying the suspicion time-out also
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:23:09 UTC from IEEE Xplore.  Restrictions apply. 
provides a knob to trade off failure detection time with the
frequency of false positives. We leave the investigation of
such issues for a later article.
6. Conclusions and Future Work
We have presented the design,
implementation and
performance evaluation of SWIM, a scalable weakly-
consistent process group membership protocol. The SWIM
project is motivated by the unscalability of heartbeat-based
protocols, which are popular with distributed system de-
signers today.
SWIM’s solution is based on a separation of the failure
detector and membership update dissemination components
of the problem. The SWIM failure detector achieves scala-
bility by avoiding heartbeating, and by using a random peer-
to-peer probing of processes instead. This provides constant
overhead on group members, as well as constant expected
detection time of failures. Membership updates are prop-
agated efﬁciently and reliably in infection-style (epidemic-
style), by piggybacking on packets generated by the failure
detector protocol. The addition of a suspicion mechanism
(with virtual incarnation numbers) reduces the false positive
frequency, while trading off failure detection time. A ﬁnal
extension to the protocol guarantees time bounded detection
of failures at each non-faulty process.
SWIM can be extended to a Wide-area network (WAN)
or a virtual private network (VPN), by weighing ping tar-
get choices with topological information, thus reducing
bandwidth usage on core network elements inside the net-
work [16]. We are currently evaluating this feature.
This paper has described the design and implementation
of SWIM in a speciﬁc context, but our results are more gen-
erally applicable. Although SWIM’s design is targeted at
large groups of processes, our analysis and experimental re-
sults show that this alternative to all-to-all distributed heart-
beating can give an order of magnitude reduction in over-
head if used within more medium-sized subgroups, e.g. the
replica groups in distributed hash table (DHT) systems such
as Chord, Pastry, Opus [15]. The Suspicion Mechanism is
generally applicable to any membership system with dis-
tinct Failure Detection and Membership Update Component
designs.
The extent of continued proliferation of large-scale dis-
tributed applications in today’s Internet will depend on scal-
able and efﬁcient design of the protocols that run within
these systems. SWIM offers such a solution to the group
membership component for these applications.
Acknowledgments: We thank Werner Vogels for help with
accessing and using the Galaxy cluster. We also thank Ben
Atkin, Ken Birman, Alan Demers, Robbert van Renesse,
and the anonymous referees, for reviewing drafts.
References
[1] T. Anker, D. Breitgand, D. Dolev,
and Z. Levy.
CONGRESS: Connection-oriented group-address resolu-
tion service.
In Proc. SPIE’97 on Broadband Networking
Technologies, 1997.
[2] N. Bailey. The Mathematical Theory of Infectious Diseases
and its Applications. Hafner Press, second edition, 1975.
[3] K. P. Birman. The process group approach to reliable dis-
tributed computing. Comm. of the ACM, 36(12):37–53,
1993.
[4] K. P. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu,
and Y. Minsky. Bimodal multicast. ACM Trans. on Com-
puter Systems, 17(2):41–88, 1999.
[5] C.E.Perkins and E. Royer. Ad hoc on-demand distance vec-
tor routing. In Proc. 2nd IEEE Workshop on Mobile Com-
puting Systems and Applications, pages 90–100, 1999.
[6] T. D. Chandra and S. Toueg. Unreliable failure detectors for
reliable distributed systems. Journ. of the ACM, 43(2):225–
267, 1996.
[7] W. Chen, S. Toueg, and M. K. Aguilera. On the quality of
In Proc. 30th Intnl. Conf. on
service of failure detectors.
Dependable Systems and Networks, pages 191–200, 2000.
[8] A. Demers, D. Greene, C. Hauser, W. Irish, and J. Larson.
Epidemic algorithms for replicated database maintenance.
In Proc. 6th Annual ACM Symp. Principles of Distributed
Computing, pages 1–12. ACM Press, 1987.
[9] S. A. Fakhouri, G. Goldszmidt, I. Gupta, M. Kalantar, and
J. A. Pershing. Gulfstream - a system for dynamic topol-
ogy management in multi-domain server farms.
In Proc.
3rd IEEE Intnl. Conf. on Cluster Computing, pages 55–62,
2001.
[10] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility
of distributed consensus with one faulty process. Journ. of
the ACM, 32(2):374–382, 1985.
[11] I. Gupta, K. Birman, and R. van Renesse. Fighting ﬁre with
ﬁre: using randomized gossip to combat stochastic scalabil-
ity limits. To appear in The Journ. of Quality and Reliability
Engineering International, 2002.
[12] I. Gupta, T. D. Chandra, and G. S. Goldszmidt. On scalable
and efﬁcient distributed failure detectors. In Proc. 20th An-
nual ACM Symp. on Principles of Distributed Computing,
pages 170–179. ACM Press, 2001.
[13] A.-M. Kermarrec, L. Massoulie, and A. Ganesh. Reliable
probabilistic communication in large-scale information dis-
semination systems. Technical Report MMSR-TR-2000-
105, Microsoft Research, Cambridge, UK, 2000.
[14] K. Petersen, M. Spreitzer, D. Terry, M. Theimer, and
A.J.Demers. Flexible update propagation for weakly con-
sistent replication. In Proc. 16th ACM Symp. on Operating
Systems Principles, pages 3–6. ACM Press, 1997.
[15] A. Rowstron and F. Kaashoek, editors. Proc. 1st Intnl. Work-
shop on Peer-to-Peer Systems. Springer-Verlag, 2002.
[16] R. van Renesse, Y. Minsky, and M. Hayden. A gossip-style
failure detection service. In Proc. Middleware, pages 55–70,
1998.
http://www.cs.cornell.edu/gupta/swim
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:23:09 UTC from IEEE Xplore.  Restrictions apply.