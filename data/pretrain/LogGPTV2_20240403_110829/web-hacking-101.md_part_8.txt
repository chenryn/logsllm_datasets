databaseandthenpresentsittotheuserinamonolithicfile,templateenginesseparate
the presentation of that data from the rest of the code which computes it (as an aside,
popular frameworks and content management systems also separate the HTTP request
from the query as well).
Server Side Template Injection (SSTI) occurs when those engines render user input
withoutproperlysanitizingit,similiartoXSS.Forexample,Jinja2isatemplatinglanguage
for Python, and borrowing from nVisium, an example 404 error page might look like:
@app.errorhandler(404)
defpage_not_found(e):
template='''{%%extends"layout.html"%%}
{%%blockbody%%}
Opps!Thatpagedoesn'texist.
%s
{%%endblock%%}
'''%(request.url)
returnrender_template_string(template),404
Source: (https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2)
Here, the page_not_found function is rendering HTML and the developer is formatting
theURLasastringanddisplayingittotheuser.So,ifanattackerentershttp://foo.com/nope{{7*7}},
the developers code would render http://foo.com/nope49, actually evaluating the
expressionpassedin.TheseverityofthisincreaseswhenyoupassinactualPythoncode
which Jinja2 will evaluate.
Now, the severity of each SSTI depends on the template engine being used and what, if
any,validationthesiteisperformingonthefield.Forexample,Jinja2hasbeenassociated
with arbitrary file access and remote code execution, the Rails ERB template engine has
been associated with Remote Code Execution, Shopify’s Liquid Engine allowed access
TemplateInjection 58
to a limited number of Ruby methods, etc. Demonstrating the severity of your find will
really depend on testing out what is possible. And though you may be able to evaluate
some code, it may not be a significant vulnerability in the end. For example, I found an
SSTI by using the payload {{4+4}} which returned 8. However, when I used {{4*4}}, the
text {{44}} was returned because the asterisk was stripped out. The field also removed
special characters like () and [] and only allowed a maximum of 30 characters. All this
combined effectively rendered the SSTI useless.
IncontrasttoServerSideTemplateInjectionsareClientSideTemplateInjections.These
occur when applications using client side template frameworks, like AngularJS, embed
user content into web pages without sanitizing it. This is very similar to SSTI except it is
a client side framework which creates the vulnerability. Testing for CSTI with Angular is
similar to Jinja2 and involves using {{ }} with some expression inside.
Examples
1. Uber Angular Template Injection
Difficulty: High
Url: developer.uber.com
Report Link: https://hackerone.com/reports/1250271
Date Reported: March 22, 2016
Bounty Paid: $3,000
Description:
InMarch2016,JamesKettle(oneofthedevelopersofBurpSuite,atoolrecommendedin
theToolschapter)foundaCSTIvulnerabilitywiththeURLhttps://developer.uber.com/docs/deep-
linking?q=wrtz{{7*7}}withtheURL.Accordingtohisreport,ifyouviewedtherendered
pagesource,thestringwrtz49wouldexist,demonstratingthattheexpressionhadbeen
evaluated.
Now,interestingly,Angularuseswhatiscalledsandboxingto“maintainapropersepara-
tionofapplicationresponsibilities”.Sometimestheseparationprovidedbysandboxingis
designed as a security feature to limit what a potential attacker could access. However,
with regards to Angular, the documentation states that “this sandbox is not intended
to stop attacker who can edit the template [and] it may be possible to run arbitrary
Javascript inside double-curly bindings” And James managed to do just that.
Using the following Javascript, James was able to escape the Angular sandbox and get
arbitrary Javascript executed:
1https://hackerone.com/reports/125027
TemplateInjection 59
https://developer.uber.com/docs/deep-linking?q=wrtz{{(_="".sub).call.call({}[$="\
constructor"].getOwnPropertyDescriptor(_.__proto__,$).value,0,"alert(1)")()}}zzz\
z
AngularInjectioninUberDocs
Ashenotes,thisvulnerabilitycouldbeusedtohijackdeveloperaccountsandassociated
apps.
Takeaways
BeonthelookoutfortheuseofAngularJSand testoutfieldsusingtheAngular
syntax {{ }}. To make your life easier, get the Firefox plugin Wappalyzer - it will
showyouwhatsoftwareasiteisusing,includingtheuseofAngularJS.
2. Uber Template Injection
Difficulty: Medium
Url: riders.uber.com
Report Link: hackerone.com/reports/1259802
Date Reported: March 25, 2016
2hackerone.com/reports/125980
TemplateInjection 60
Bounty Paid: $10,000
Description:
WhenUberlaunchedtheirpublicbugbountyprogramonHackerOne,theyalsoincluded
a “treasure map” which can be found on their site, https://eng.uber.com/bug-bounty.
The map details a number of sensitive subdomains that Uber uses, including the
technologiesreliedonbyeach.So,withregardstothesiteinquestion,riders.uber.com,
thestackincludedPythonFlaskandNodeJS.So,withregardstothisvulnerability,Orange
(thehacker)notedthatFlaskandJinja2wereusedandtestedoutthesyntaxinthename
field.
Now,duringtesting,Orangenotedthatanychangetoaprofileonriders.uber.comresults
in an email and text message to the account owner. So, according to his blog post, he
testedout{{1+1}}whichresultedinthesiteparsingtheexpressionandprinting2inthe
email to himself.
Next he tried the payload {% For c in [1,2,3]%} {{c,c,c}} {% endfor %} which runs a for
loop resulting in the following on the profile page:
blog.orange.twUberprofileafterpayloadinjection
and the resulting email:
TemplateInjection 61
blog.orange.twUberemailafterpayloadinjection
As you can see, on the profile page, the actual text is rendered but the email actually
executedthecodeandinjecteditintheemail.Asaresult,avulnerabilityexistingallowing
an attacker to execute Python code.
Now, Jinja2 does try to mitigate the damage by sandboxing the execution, meaning
the functionality is limited but this can occasionally be bypassed. This report was
originallysupportedbyablogpost(whichwentupalittleearly)andincludedsomegreat
links to nVisium.com’s blog (yes, the same nVisium that executed the Rails RCE) which
demonstrated how to escape the sandbox functionality:
• https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2
• https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii
Takeaways
Take note of what technologies a site is using, these often lead to key insights
into how you can exploit a site. In this case, Flask and Jinja2 turned out to be
great attack vectors. And, as is the case with some of the XSS vulnerabilities,
thevulnerabilitymaynotbeimmediateorreadilyapparent,besuretocheckall
places were the text is rendered. In this case, the profile name on Uber’s site
showedplaintextanditwastheemailwhichactuallyrevealedthevulnerability.
TemplateInjection 62
3. Rails Dynamic Render
Difficulty: Medium
Url: N/A
ReportLink:https://nvisium.com/blog/2016/01/26/rails-dynamic-render-to-rce-cve-2016-
07523
Date Reported: February 1, 2015
Bounty Paid: N/A
Description:
Inresearchingthisexploit, nVisiumprovidesan awesomebreakdownandwalk through
of the exploit. Based on their writeup, Ruby on Rails controllers are responsible for the
business logic in a Rails app. The framework provides some pretty robust functionality,
includingtheabilitytoinferwhatcontentshouldberenderedtotheuserbasedonsimple
values passed to the render method.
Working with Rails, developers have the ability to implicitly or explicitly control what is
renderedbasedontheparameterpassedtothefunction.So,developerscouldexplicitly
render content as text, JSON, HTML, or some other file.
With that functionality, developers can take parameters passed in from the URL, pass
themtoRailswhichwilldeterminethefiletorender.So,Railswouldlookforsomething
like app/views/user/#{params[:template]}.
Nvisium uses the example of passing in dashboard which might render an .html, .haml,
.html.erbdashboardview.Receivingthiscall,Railswillscandirectoriesforfiletypesthat
matchtheRailsconvention(theRailsmantraisconventionoverconfiguration).However,
when you tell Rails to render something and it can’t find the appropriate file to use, it
will search in the RAILS_ROOT/app/views, RAILS_ROOT and the system root.
This is part of the issue. The RAILS_ROOT refers to the root folder of your app, looking
there makes sense. The system root doesn’t, and is dangerous.
So, using this, you can pass in %2fetc%2fpasswd and Rails will print your /etc/passwd
file. Scary.
Now, this goes even further, if you pass in , this gets interpreted as
. In the erb templating language, the  signifies code to be executed
and printed, so here, the ls command would be executed, or allows for Remote Code
Execution.
3https://nvisium.com/blog/2016/01/26/rails-dynamic-render-to-rce-cve-2016-0752
TemplateInjection 63
Takeaways
This vulnerability wouldn’t exist on every single Rails site - it would depend on
howthesitewascoded.Asaresult,thisisn’tsomethingthataautomatedtoolwill
necessarilypickup.BeonthelookoutwhenyouknowasiteisbuiltusingRailsas
mostfollowacommonconventionforURLs-atthemostbasic,it’s/controller/id
forsimpleGETrequests,or/controller/id/editforedits,etc.
Whenyouseethisurlpatternemerging,startplayingaround.Passinunexpected
valuesandseewhatgetsreturned.
Summary
When searching for vulnerabilities, it is a good idea to try and identify the underlying
technology(beitwebframework,frontendrenderingengine,etc.)tofindpossibleattack
vectors.Thedifferentvarietyoftemplatingenginesmakesitdifficulttosayexactlywhat
willworkinallcircumstancesbutthatiswhereknowingwhattechnologyisusedwillhelp
you. Be on the lookout for opportunities where text you control is being rendered back
to you on the page or some other location (like an email).
11. SQL Injection
Description
A SQL Injection, or SQLi, is a vulnerability which allows a hacker to “inject” a SQL
statementsintoatargetandaccesstheirdatabase.Thepotentialhereisprettyextensive
often making it a highly rewarded vulnerability. For example, attackers may be able
to perform all or some CRUD actions (Creating, Reading, Updating, Deleting) database
information. Attackers may even be able to achieve remote command execution.
SQLiattacksareusuallyaresultofunescapedinputbeingpassedintoasiteandusedas
part of a database query. An example of this might look like:
$name=$_GET['name'];
$query="SELECT*FROMusersWHEREname=$name";
Here, the value being passed in from user input is being inserted straight into the
database query. If a user entered test’ OR 1=1, the query would return the first record
where the name = test OR 1=1, so the first row. Now other times, you may have
something like:
$query="SELECT*FROMusersWHERE(name=$nameANDpassword=12345");
In this case, if you used the same payload, test’ OR 1=1, your statement would end up
as:
$query="SELECT*FROMusersWHERE(name='test'OR1=1ANDpassword=12345");
So, here, the query would behave a little different (at least with MySQL). We would get
all records where the name is test and all records where the password is 12345. This
obviouslywouldn’tachieveourgoaloffindingthefirstrecordinthedatabase.Asaresult,
weneedtoeliminatethepasswordparameterandcandothatwithacomment,test’OR
1=1;–.Here,whatwe’vedoneisaddasemicolontoproperlyendtheSQLstatementand
immediately added two dashes to signify anything which comes after should be treated
as a comment and therefore, not evaluated. This will end up having the same result as
our initial example.
SQLInjection 65
Examples
1. Drupal SQL Injection
Difficulty: Medium
Url: Any Drupal site with version less than 7.32
Report Link: https://hackerone.com/reports/317561
Date Reported: October 17, 2014
Bounty Paid: $3000
Description:
Drupal is a popular content management system used to build websites, very similar
to Wordpress and Joomla. It’s written in PHP and is modular based, meaning new
functionalitycanbeaddedtoaDrupalsitebyinstallingamodule.TheDrupalcommunity
haswrittenthousandsandmadethemavailableforfree.Examplesincludee-commerce,
third party integration, content production, etc. However, every Drupal install contains
the same set of core modules used to run the platform and requires a connection to a
database. These are typically referred to as Drupal core.
In 2014, the Drupal security team released an urgent security update to Drupal core
indicatingallDrupalsiteswerevulnerabletoaSQLinjectionwhichcouldbeachievedby
anonymous users. The impact of the vulnerability could allow an attacker to take over
any Drupal site that wasn’t updated.
In terms of the vulnerability, Stefan Horst had discovered that the Drupal developers
has incorrectly implemented wrapper functionality for database queries which could
be abused by attackers. More specifically, Drupal was using PHP Data Objects (PDO)
as an interface for accessing the database. Drupal core developers wrote code which
called those PDO functions and that Drupal code was to be used any time other
developers were writing code to interact with a Drupal database. This is a common
practice in software development. The reason for this was to allow Drupal to be used
withdifferenttypesofdatabases(MySQL,Postgres,etc.),removecomplexityandprovide
standardization.
Now, that said, turns out, Stefan discovered that the Drupal wrapper code made an
incorrect assumption about array data being passed to a SQL query. Here’s the original
code:
1https://hackerone.com/reports/31756
SQLInjection 66
foreach($dataas$i=>$value){
[...]
$new_keys[$key.'_'.$i]=$value;
}
Canyouspottheerror(Iwouldn’thavebeenableto)?Developersmadetheassumption
that the array data would always contain numerical keys, like 0, 1, 2, etc. (the $i value)
and so they joined the $key variable to the $i and made that equal to the value. Here’s
what a typically query would look like from Drupal’s db_query function:
db_query("SELECT*FROM{users}WHEREnameIN(:name)",array(':name'=>array('us\
er1','user2')));
Here, the db_query function takes a database query SELECT * FROM {users} where
nameIN(:name)andanarrayofvaluestosubstitutefortheplaceholdersinthequery.
InPHP,whenyoudeclareanarrayasarray(‘value’,‘value2’,‘value3’),itactuallycreates[0
)‘value’,1)‘value2’,2)‘value3’]whereeachvalueisaccessiblebythenumericalkey.
So in this case, the :name variable was substituted by values in the array [0 ) ‘user1’, 1
) ‘user2’]. What you would get from this is:
SELECT*FROMusersWHEREnameIN(:name_0,:name_1)
Sogood,sofar.Theproblemariseswhenyougetanarraywhichdoesnothavenumerical
keys, like the following:
db_query("SELECT*FROM{users}wherenameIN(:name)",
array(':name'=>array('test)--'=>'user1','test'=>'user2')));
In this case, :name is an array and its keys are ‘test) –’, ‘test’. Can you see where this is
going? When Drupal received this and processed the array to create the query, what we
would get is:
SELECT*FROMusersWHEREnameIN(:name_test)--,:name_test)
Itmightbetrickytoseewhythisissolet’swalkthroughit.Basedontheforeachdescribed
above, Drupal would go through each element in the array one by one. So, for the first
iteration $i = test) – and $value = user1. Now, $key is (:name) from the query and
combining with $i, we get name_test) –. For the second iteration, $i = test and $value