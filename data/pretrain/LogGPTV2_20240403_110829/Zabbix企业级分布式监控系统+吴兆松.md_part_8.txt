Outgoingnetworktrafficon etho
[avg]
118.6Kbps
79.26Kbps136.13Kbps
671.26Kbps
图3-35
Trends的图像数据如图3-36所示，读取的是Trends表中的数据，图中的数据
是每三个小时的平均数据图。
160 Kbps
140Kbps
120Kbps
100Kbps
80Kbps
60Kbps
40Kbps
20Kbps
0bps
00000
12.02
last
Incomingnetwork trafficonetho
49.3Kbps
[avg]
Outgoingnetwork trafficonetho
143.16Kbps
853.5Kbps
[avg]
图3-36
Trends数据的存储有以下两个数据表。
·Trends（存储浮点数据类型）。
46
---
## Page 63
第3章安装与部署
●trends_unit（存储非符号的整数）。
这两个表中都包含：最小值（value_min）、最大值（value_max）和平均值
(value_avg)。
下面看看Trends表，其创建表的语句如下。
mysql> show create table trends\G;
Table: trends
Create Table:CREATE TABLEtrends（
itemid bigint(20) unsigned NOT NULL,
clock int(1l) NOT NULL DEFAULT '0',
numint(l1) NOT NULL DEFAULT '0',
value min  double(16,4) NOT NULL DEFAULT '0.0000',
value_avg  double(16,4) NOT NULL DEFAULT '0.0000',
value maxdouble(16, 4) NOT NULL DEFAULT '0.0000'
PRIMARY KEY (itemid,clock)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
同时，还有一个表trendsuint，其创建表的语句如下。
mysql> show create table trends uint\G;
Table: trends uint
Create Table: CREATE TABLE trends uint
itemidbigint(20) unsigned NOT NULL,
clock int(ll) NOT NULL DEFAULT 'O',
num int(11) NOT NULL DEFAULT 'o',
value_min bigint(2O) unsigned NOT NULL DEFAULT 'O',
PRIMARY KEY(itemid,clock)
)ENGINE=InnoDB DEFAULT CHARSET=utf8
同样，History也有以下几个表。
·history：浮点数据。
·history_log：日志。
●history_str：字符串，255个字符限制。
●history_text：文本，不限制长度。
●history_uint：无符号整数。
History表结构如图3-37至图3-39所示。
mysql> desc history;
Field
Type
|Null|Key
DefauTt
Extra
bigint(20) unsigned
NO
MUL
NULL
lock
value
NO
0.0000
int(i1)
ns
0
图3-37
47
---
## Page 64
Zabbix企业级分布式监控系统
Field
Type
Nul1
Default
Extra
id
bigint(20)
unsigned
NO
MUL
NULL
NO
MUL
NULL
int(11)
#
timestamp
int(11)
source
value
text
NULL
logeventid
int（11）
int(i1)
图3-38
mysqi> desc history_str:
Field
|Type
Null
Key
（20)unsigned
NO
MUL
ULL
value
(255)
NO
int(11)
(0.00
mysql>desc history_text;
Field
Type
NuT7
Default
bigint(20)
paubtsun
MUL
NO
NULL
int(11)
int(11)
rowsinset (o.oo sec)
mysql>desc history_uint;
Field
Type
Null
(20）unsigned
MUL
NULL
bigin
(20)unsigned
N
图3-39
在表3-8中，对History的常用字段进行了说明。
表3-8
字段名称
数据类型
含
义
id
string
History的ID
timestamp
接收到数据的时间
clock
itemid
string
Items的ID
接收到数据的时间纳秒，Zabbix2.0以上版本支持，例如，日志，可以将时
integer
ns
间精确到毫秒
value
string
接收到的数据
在本章的前面，我们已经学习了如何计算数据库的大小，基本上可以估算出
Zabbix-Server的数据库会占用多大，但随着Zabbix数据库的增大，问题随之而来。
对于超过存储期限的数据，Zabbix-Server用Housekeeper进程进行数据清理，
读者可以分析源代码了解其实现过程（如图3-40所示），代码位置如下：
src/zabbix_server/housekeeper/housekeeper.c
48
---
## Page 65
第3章安装与部署
housekeeping_history_and_trends(int now)
const char
zbxhk_history_rule_t
deleted w 0, 1, res
zabi_1og(oG_EvEL_EBUG,，funtfon_name,now）:
prsrar_deletequeuespfeparlahicterhistusereepinroles
/process housekeeping rcle*7
zbx_vector_ptr_sort（&rule->delete_queue,hk_item_update_cache_compare);
for(i=idelete_queue.values.num;1)
zbx.hk.deletequeue.titem.record rule->delete.queue,values[i];
1f (zBxDletedrc:
bbix_1og(LOG_LEVEL_DEBUG
图3-40
通过分析源代码，我们知道了Zabbix-Server对数据的清理主要是通过
DELETE的SQL语句来执行删除动作。随着数据存储的越来越多，其执行效率会
显著下降，有经验的读者都知道，在一个千万级、亿万级的表中执行一条DELETE
的SQL语句，少则几十秒，多则几十分钟才能够完成，所以Housekeeper程序执
行的SQL语句会严重影响DB的性能，从而导致数据库会成为整个监控系统的性
能瓶颈。
对于很大的表，SQL优化的方案中最常见的方式有横向扩展和纵向扩展，这
两种方式中，一是用足够好的硬件，二是将数据进行分布式，而分表可以看作是
分布式的一种，即按一定的规则将数据划分区间，从而避免全表扫描所带来的性
能损失，最大程度地提高了性能。在这里采取的就是对表区间进行划分。
下面来看一个在线的Zabbix数据库中History表数据量的大小（见图3-41）。
mysql> select table name,(data length+index length)/1024/1024 as
total_mb, table_rows from information_schema.tables where table_
schema='zabbix';
143414105
641270
0.04687500
iate
0.04687500
0.04667500
30072.3
388921915
0.046B7500
285.00000000
4100497
10988711
0.04687500
239
0.093750
1.57812500
2297
0.03125000
users
0.04687500
0.0812500
0.0312500
图3-41
49
---
## Page 66
Zabbix企业级分布式监控系统
在history_uint 表中，数据达到3.8亿条，如果在这个表中执行DELETE 的
SQL语句，其速度是可想而知的。
在了解对Zabbix的数据库进行分表的必要性之后，下面介绍如何划分表的区
间。首先，对Trends表（见图3-42）进行区间划分，这里分区的标准是按天进行
划分的（见图3-43）。
对表进行分区（按天）
不分区的表
Partition 2014_06_01
Zabbix
Zabbix
Server
Server
&GUI
Trends
ZABBIX
Partition2014_06_03
ZABBIX
Partition2014_06_04
图3-42
图3-43
如果数据量不是特别大，也可以按月进行划分（见图3-44）。
对表进行分区（按月）
Partition 2014_06
Zabbix
Server
&GUI
ZABBIX
Partitlon2014_08
Partition2014_09
图3-44
采用表分区后，需要关闭Housekeeper的功能，此时如果需要清理历史数据，
只需要对表区间对应的历史期限数据进行删除即可。
注意，对于Housekeeper进程的关闭，可以在Zabbix2.0的zabbix_server.conf
中设置，设置完成后，重启zabbix server服务，即可使修改后的配置生效。
### Option:DisableHousekeeping
# If set to 1, disables housekeeping.
#
#Mandatory: no
#Range:0-1
DisableHousekeeping=l（值设置为l，关闭）
在Zabbix2.2中，zabbix_server.conf没有这个可配置的参数，Zabbix2.2的
housekeeper是在Web界面中进行的配置（见图3-45）。
在Web页面中，依次找到Administration→General→Housekeeper，去掉勾选
50
---
## Page 67
第3章安装与部署
状态，即可关闭History和Trends的housekeeper功能。
History
Enable housekeeping 
Overrideitemhistoryperiod
Keepdatafor(in days)
90
Trends
Enable housekeeping 
Overrideitemtrendperiod
Keep datafor(in days)
365
图3-45
3.9.2MySQL表分区实例
下面用一个MySQL表分区脚本对MySQL进行表分区，该脚本来自以下地址。
http://blog.hbis.fr/2013/01/31/zabbix-mysql_partitioning/
1.表分区脚本
脚本下载（参照https://github.com/itnihao/zabbix-book/blob/master/03-chapter/）
命令如下。
shell# wget  https://raw2.github.com/cdand/zabbixdbpartitioning/
master/partitiontables.sh
脚本具备的功能如下。
①备份数据库。
②对表进行分区间。
③添加定时任务。
注：该脚本在Zabbix2.0.6和Zabbix2.2.2中均测试通过，适合于已经安装过
Zabbix，但未分区的数据库；对于已经在线运行的环境，Zabbix数据库中的表数
据量会较大，执行此脚本时间会非常长，笔者测试过的有10多个小时还在执行，
故建议读者先清空表数据（注意历史记录会全部被清空，或者备份数据库），再执
行，清空语句如下。
mysql> use zabbix;
mysql>truncate table history;
mysql> optimize table history;
mysql> truncate table history_str;
mysql>optimize table history_str;
mysql> truncate table history_uint;
mysql> optimize table history_uint;
mysql> truncate table trends;
mysql> optimize table trends;
mysql> truncate table trends_uint;
mysql>optimize table trends_uint;
51
---
## Page 68
Zabbix企业级分布式监控系统
mysql> truncate table events;
mysql> optimize table events;
另外，需要注意脚本中保存天数的设置，读者可以参考脚本的注释自行设置。
2.运行表分区脚本
为了防止网络中断后引起脚本运行中断而造成数据库敌障，我们应该选用
screen后台执行的方法。如果没有screen程序，请先安装（运维人员要处处持有
谨慎的态度）。
shell# screen -R zabbix
shell# bash partitiontables.sh
退出 screen，脚本将在后台执行，方法如下：
按组合键CRTL+A之后再按组合键CRTL+D
进入screen，可以查看后台运行的任务：
shell# screen -R zabbix
输入用户名为zabbix，密码为zabbix，选择备份数据库，连续按两次回车键
（见图3-46和图3-47），观察/tmp/zabbix.sql会逐渐增大。
eadytopartitiontables
Ready to update permissions of zabbix user to create routines
terzabtixuserzabzabix
Do you want to backup the datahase (recommended) (Y/n):
Enter outut file,pressreturnfor defaltof/m/zabbix.sq
图3-46
Ready to proceed
y_tent
as
100
图3-47
当脚本中用zabbix用户去连接数据库时，会出现访问被拒绝的提示，主要是
因为以下两条SQL语句无法执行，解决方法是可以忽略，直接按回车键即可。
52
---
## Page 69
第3章安装与部署
mysql-B-h $DBHOST-u $DBADMINUSER-p$DBADMINPASS-e"GRANT CREAT
E ROUTINE ON zabbix.*TO'$DBUSER'@'localhost';"
注意：严禁在脚本执行的过程中断脚本的运行，否则可能造成表的损坏。脚
本运行完毕后，会添加定时任务（用于每天创建新的表空间）。
[root@localhost ~] # cat /etc/cron.daily/zabbixhousekeeping
#!/bin/bash
/usr/local/zabbix/cron.d/housekeeping.sh
[root@localhost ~]# cat /usr/local/zabbix/cron.d/housekeeping.sh
#!/bin/bash
MAILTO=Y
tmpfile=/tmp/housekeepingss
date>stmpfile
/usr/bin/mysql --skip-column-names -B -h localhost -u zabbix -pzab
bix zabbix-e"CALL create_zabbix_partitions();">>$tmpfile 2>&1
/usr/bin/mail-s"ZabbixMySql PartitionHousekeeping"$MAILTO<$t
mpfile
rm -f $tmpfile
为了验证表分区的SQL触发器能否正常运行（如果你的MySQL是自已编译
安装，由于sock文件等位置为非标准，会导致此SQL语句执行失败，需要修改
此脚本，可增加--soket=路径），通过手动方式运行命令调用触发器，验证表分区
能否正常创建，命令如下。
ix zabbix-e"CALL create_zabbix_partitions();"#如图3-48所示
[root@localhost softw
eate_part
tion(zabbix,histor
6000
D20131218.1387
82400
reate.par
tion
zabbix
.histor
p20131219,1387468800)
387123200）
rtition
ystr.
1215
1387123
abbix.histo
P20131216.1382
ition
p20131217
1387296000
ext.p20131216.138
p20131217.13872
abbix.
020131218.138
D20131219.1387468800
zabbix.
y_uin
p20131219,1387468800
create_partition(zabbix,tre
图3-48
53
---
## Page 70
Zabbix企业级分布式监控系统
验证是否分表成功，可以查看History的表结构，如图3-49所示。
ABLEhistory_log(
NULL
clock
int（11)N
0
sourc
value
NOT
ntid
int(11)
lock"),
mid,id,
his