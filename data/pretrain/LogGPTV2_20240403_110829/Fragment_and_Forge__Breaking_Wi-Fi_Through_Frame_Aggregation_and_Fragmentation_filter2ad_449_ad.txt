### Fragment Cache Attack Against a Vulnerable AP

**Objective:** To exfiltrate (decrypt) client data by exploiting the fragment cache of a vulnerable Access Point (AP).

1. **Spoof Client MAC Address:**
   - The attacker spoofs the client's MAC address and connects to the AP using this spoofed address.
   
2. **Inject Encrypted Fragment:**
   - The attacker sends an encrypted fragment, \( k\{Frag0(s)\} \), to the AP. The AP decrypts and stores this fragment in its fragment cache.

3. **Deauthenticate Client:**
   - The attacker deauthenticates the client, but the fragment cache is not cleared.

4. **Client Reconnects:**
   - The client reconnects to the AP and resumes normal traffic.

5. **Send Sensitive Data:**
   - The client sends sensitive data, which includes fragments \( \{Frag0(s')\} \) and \( \{Frag1(s')\} \).

6. **Inject Second Fragment:**
   - The attacker injects a second fragment, \( \{Frag1(s)\} \), with the same sequence number as the stored fragment. The AP combines these fragments, resulting in a reassembled frame that contains the sensitive data.

7. **Exfiltration:**
   - The reassembled frame is sent to the attacker, thereby exfiltrating the client’s data.

**Figure 6: Fragment Cache Attack Against a Vulnerable AP**

### Packet Injection via Fragment Cache Poisoning

**Objective:** To inject packets under another client’s identity, which is otherwise not possible in hotspot-type networks.

1. **Spoof AP MAC Address:**
   - The attacker spoofs the AP’s MAC address and connects to an untrusted network.

2. **Inject Encrypted Fragment:**
   - The attacker injects a fragment, \( k\{Frag0(s)\} \), into the victim’s memory. This fragment contains the packet to be injected.

3. **Disconnect and Reconnect:**
   - The client disconnects from the untrusted network and reconnects to a trusted network. During this process, the attacker establishes a Man-in-the-Middle (MitM) position between the client and the AP.

4. **Forward Second Fragment:**
   - When the AP sends a second fragment with packet number \( n + 1 \), the attacker forwards it with sequence number \( s \). The client reassembles the frame with the injected fragment, and the network layer discards the unknown content, processing the injected packet.

**Figure 7: Fragment Cache Attack Against a Client for Packet Injection**

### Experiments and Implementation Flaws

**Experimental Setup:**
- **Devices Tested:**
  - Smartphones, laptops, IoT devices, home routers, and professional APs.
  - Windows 10 and Linux 5.5 on various wireless network cards.
  - FreeBSD 12.1, NetBSD 7.0, and OpenBSD 6.4 on several network cards.
- **Total Devices Tested:** 75
- **Tool Development:**
  - A tool was created to test if clients or APs are affected by the discovered design and implementation flaws. It supports over 45 test cases and has been used to perform over a thousand tests.

**Common Implementation Flaw: Non-Consecutive Packet Numbers**
- **Vulnerability:** Devices do not check whether all fragments of a frame have consecutive packet numbers.
- **CVE-2020-26146:** Assigned to this flaw.
- **Affected Devices:** Out of 68 tested devices, 52 were vulnerable.
- **Protocols Affected:**
  - CCMP and GCMP are affected.
  - TKIP is only affected if the authenticity of reassembled frames is not verified.
  - WEP is inherently vulnerable.

**Table 1: Devices Tested Using Default Built-In Wireless Network Cards and Operating Systems**

| Device                  | U | D | S | M | A | Y | E | K | D | E | X | I | M | C | N | F | G | F | T | B | L | O | P | A | F |
|-------------------------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| Huawei Y6 prime         |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
| Nexus 5X                |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
| Samsung i9305           |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
| iPhone XR               |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
| iPad Pro 2              |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |

**Note:** The table columns represent different attacks and vulnerabilities, where "U" stands for a specific attack or vulnerability.

This document provides a detailed overview of the fragment cache attack, including the steps involved, the experimental setup, and the common implementation flaws.