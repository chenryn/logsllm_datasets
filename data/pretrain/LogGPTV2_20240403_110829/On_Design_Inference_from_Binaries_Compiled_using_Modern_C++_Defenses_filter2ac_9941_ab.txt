Since most C++ compiler-based defenses adhere to the
Itanium ABI, our solution targets defenses that adhere to the
Itanium ABI. Although, due to the high similarity between
Itanium and MSVC ABIs, our technique will also apply to
potential solutions on MSVC. IVT [4] is a compiler-based
defense that violates the ABI. Therefore, IVT can not inter-
operate with binaries that adhere to the ABI. It is outside our
scope.
3.3 High-Level Approach
At a high level, our approach comprises of two steps. First,
given a protected C++ binary, we extract all the polymorphic
classes from it. This is simply the set of all complete-object
VTables in the binary. Each complete-object VTable maps
to a speciﬁc polymorphic type in the program. Recall that
CaVer and TypeSan represent classes, polymorphic and non-
polymorphic, as THTables. Each THTable contains informa-
tion such as base classes of the representing class. Second,
for each type, we generate a Type Congruency Set or (TCSet),
which is simply a set of types that are congruent or exhibit a
is-a relationship with the type. That is:
TCSet(X) = {Y, where Y is− a X and X, Y
are polymorphic types }
Intuitively, TCSet(X) of a type X contains the type X itself
and all the classes that derive from X because derived classes
exhibit is− a relationship to their bases. The TCSet provides
a commonality between different defenses. Defense policies
for both virtual call dispatch and type casting are based on
polymorphic relationship between types, which is succinctly
captured by TCSet.
Given the TCSet for all the polymorphic types in the binary,
we construct a directed inheritance graph for the binary.
Does the underlying compiler matter? Our approach relies
solely on the C++ ABI that a compiler adheres to, and not on
speciﬁc compiler features. Further, as a proof of concept, we
evaluate defenses that adhere to Itanium ABI, which is imple-
mented in two popular compilers GCC and LLVM. Given that
the high-level design and data structures (e.g., offset-to-top,
RTTI) in Itanium [3] and MSVC [22] ABIs are largely similar,
we believe that with insigniﬁcant changes to our approach,
defenses that adhere to the MSVC ABI can also be targeted.
Unavailability of Runtime Type Information. Without ac-
cess to symbol information, inferring class hierarchy is a
hard but important part of C++ reverse engineering. Prior
efforts have relied on the RunTime Type Information (RTTI)
to recover inheritance structure. However, RTTI is an op-
tional data structure that can be omitted if typeinfo and
dynamic_cast are not used in the code. In fact, due to the
rich semantic information contained within RTTI, along with
performance penalties incurred in using dynamic_cast, com-
mercial closed-source software often exclude RTTI informa-
tion and hinder reverse engineering.
In the absence of RTTI, past efforts have relied on the sizes
and contents of VTables for reverse engineering class hier-
archy. For example, Fokin et al., [8, 9] derive rules between
two polymorphic classes, and apply them to infer inheritance.
These approaches either (1) lack in precision [1,5], or (2) lack
in directionality of class inheritance graph [20].
From a software vendor’s point of view, such inaccuracies
are preferable, and hinder reversing of software design. Yet,
from an end-user point of view, such inaccuracies result in
coarse-grained CFI policies that introduce an attack surface
in the form of redundant edges in the CFG.
Compiler Optimizations. Function inlining and removal of
unused code become aggressive with higher levels of opti-
mization. These occurrences limit the amount of information
available for reverse engineering. For instance, constructors
give indications about the base classes of a class as well as the
direction of inheritance. However, the compiler could either
inline them or even remove them completely, thereby making
their identiﬁcation difﬁcult and incomplete. This eventually
results in incomplete or over approximation of class relations.
4 Design Inference
4.1 VTable Accumulation and Grouping
As a ﬁrst step, we extract all the complete-object VTables in
the binary. Complete-object VTables provide an unlabeled
representation of all the polymorphic classes in the binary. In
essence, they represent the nodes in the class inheritance tree
of the program.
Extracting VTables from a binary is a previously studied
problem [10, 21, 30]. The well deﬁned nature of VTables,
particularly the existence of mandatory ﬁelds [3], provides
a robust signature that can retrieve all the VTables in the bi-
nary. Objects are initialized with a vptr in the constructors
and destructors of polymorphic classes. These VTable ad-
dresses appear as immediate values. We scan the binary for
immediate values that point to readonly sections of memory.
We then examine each of those addresses for VTables, and
accumulate all the VTables. Our approach to VTable recovery
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 21is similar to the one presented in vfGuard [21]. However, the
recovered VTables (using vfGuard approach) include both
the primary and secondary VTables. This means that one or
more VTables in the gathered list map to a single polymor-
phic class in the program. Therefore, we merge the primary
and all corresponding secondary VTables to obtain a set com-
prising of only the complete-object VTables. We implement
Algorithm 1 to group recovered VTables into complete-object
VTables.
Algorithm 1 is based on two key observations:
• Modern compilers (g++ and LLVM-clang) layout pri-
mary and secondary VTables for a derived class in se-
quential order.
• Since offset-to-top represents the displacement from the
top of the object to a sub-object, a value of 0 represents
primary VTable, and a non-zero value represents sec-
ondary VTable.
Given a set of VTables, we ﬁrst sort the VTables in increas-
ing order of vptrs. Then, we merge the primary VTables with
succeeding (zero or more) secondary VTables to form the
complete object VTables. VTable grouping for OVT is done
differently. This is necessary because OVT reorders VTable
which separates secondary VTables from their corresponding
primary VTables. Each VTable is placed in a tree where the
most base class it inherits from is the root. We adopt two
techniques to obtain the complete-object VTables for OVT
binaries: thunk and constructor analysis, they are discussed
in Section 4.4.
Algorithm 1 GroupVTables groups VTables in V to form
complete-object VTables VGroup where each VTable in
VGroup is a Primary VTable, and contains a list of zero or
more Secondary VTables.
1: procedure GROUPVTABLES(V )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
VSorted ←
sort_increasing(V )
VGroup ← /0
for each VT in VSorted do
VPrimary ← VT
VGroup.append(VPrimary)
VPrimary.Secondaries.append(VT )
if VT .O f f setToTop == 0 then
end for
end if
else
return VGroup
13: end procedure
4.2 Generating Type Congruency Set
The format in which design information is represented in the
binary determines how the TCSet can be recovered. FCFI,
Shrinkwrap and SafeDispatch use similar representation,
while CaVer and TypeSan use a different representation. TCSet
for FCFI, Shrinkwrap and OVT comprises of complete-object
VTables while that for CaVer and TypeSan comprises of
THTables.
4.2.1 C1 Defenses
Algorithm 2 shows how metadata is recovered for C1 de-
fenses.
addr ← get_next_8bytes_aligned_addr(sAddr)
if is_valid_metadata_start(addr) then
M DTables ← /0
addr ← sAddr
while addr ≤ eAddr do
Algorithm 2 GatherTCSet for C1 defenses
1: procedure GATHERTCSET(sAddr,eAddr)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
end if
M DTables.append(MDTable)
M DTable ← /0
while !is_valid_metadata_end(addr) do
key ← extract_next_key(addr)
M DTable.append(key)
addr ← get_next_8bytes_aligned_addr(addr)
end while
end while
return M DTables
16: end procedure
FCFI and Shrinkwrap. The VTable maps embedded by
FCFI and Shrinkwrap are simply arrays of pointers to VTable
with nothing indicating its start or end. However, the VTable
maps are initialized with calls to a function named __VL-
TRegisterSetDebug, which contains details about the VTable
map addresses and their lengths. As shown in listing 1, the
ﬁrst argument to this function is a pointer to the VTable map
for a given class while the second argument is the length of
the map. Once the ﬁrst and second arguments to this function
are identiﬁed, we can recover the complete inheritance graph
for the program. After identiﬁcation of these callsites and
extraction of VTable map addresses and length, we locate all
the VTable maps and use the length to decide the end of each
map. Since Shrinkwrap puts primary and secondary VTables
in different VTable maps, we use VTable grouping to locate
the primary VTable of any secondary VTable we ﬁnd in a
map.
Listing 1: Function used to initialize VTable maps
...
1 init & vtable_map
2 init length_of_vtable_map
...
3 call __VLTRegisterSetDebug
...
CaVer and TypeSan. The data structures embeded by these
defenses are well deﬁned, starting and ending with easily
distinguishable entries and stored in the data section. CaVer
and TypeSan represent matadata differently but the idea is
22          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationthe same, hence, we generally refer to metadata representa-
tion in both as THTables. We ﬁrst perform a linear sweep
through the data section to gather THTables. For CaVer, the
ﬁrst ﬁeld in a THTable is the length of allowable casts for
the class which it represents. The next ﬁeld is the key for the
representing class. Next set of ﬁelds are keys to the THTables
of the base classes or phantom class. The ﬁnal ﬁeld is the
name of the representing class. TypeSan divides the operation
performed with THTable into two phases, using two different
data structures. Even though they are laid out differently, they
both specify the inheritance relationship among classes. In
some cases, each structure may contain partial information
for a given class, by combining them we get the complete
information.
4.2.2 C2 Defenses
OVT. OVT performs both range and alignment check in a
single branch. To obtain TCSet for binaries compiled using
OVT, we identify callsites to extract vptrs corresponding to
speciﬁc types as well as the range of its subclasses. Listing
2 shows OVT’s instrumentation at virtual function callsites.
As explained in Section 2, each type has an associated range
which speciﬁes the number of its subclasses. OVT computes
the position of the runtime type of an object within a subtree
(hierarchy) by ﬁrst subtracting its vptr "$vptr" from that of
its static type "$a" and then performing a right bit rotation
using a literal l. It then compares the resulting value with the
maximum range for the object’s static type, which should be
greater. ($b - $a) (cid:29) l equates to the maximum range in a
given subtree (class hierarchy), where $b is the last vptr in
that subtree. If the static type of the object is a leaf class, i.e.
has no subclass, its vptr is compared with the vptr of the type
used at runtime for equality. That vptr is used if the equality
check is successful, otherwise a violation is reported.
We retrieve the range for each class by following the se-
quence of operations performed by OVT. The range as well
as the vptr are used to recover the TCSet (X). Speciﬁcally,
we group all the VTables within the identiﬁed range into
TCSet (X) for the callsite’s static type. For every secondary
VTable found in a given range, we obtain the corresponding
primary VTable using thunk or constructor analysis. Algo-
rithm 3 shows how we identify and extract the vptrs and
ranges of pointer types.
VTrust and CFIXX. VTrust like OVT implicitly embeds
class hierarchy into the binary by assigning similar hash val-
ues to functions deﬁned by classes in the same hierarchy. The
information provided is sufﬁcient to group related classes
into sets (similar to Marx), but does not provide direction of
inheritance. CFIXX keeps track of the single correct object
type that can be used for a virtual call, it neither provides
information about classes in the same hierarchy nor direction
of inheritance. Therefore, VTrust reveals only partial CHT in
Idec ← dec_instr(addr)
if !(isDere f Ob jectV ptrInst(Idec)) then
continue
addr ← tsAddr
while addr ≥ teAddr do
end if
addr ← get_next_addr(addr)
Idec ← dec_instr(addr)
if !(isMoveTypeV ptrInstr(Idec)) then
end if
vptr ← Idec.opr[2]
addr ← get_next_addr(addr)
Idec ← dec_instr(addr)
if isOV TCompInstr(Idec) then
Algorithm 3 GatherTCSet for OVT
1: procedure GATHERTCSET(tsAddr,teAddr)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
end if
addr ← get_next_addr(addr)
Idec ← dec_instr(addr)
if !(isOV T Di f f RInstr(Idec)) then
end if
addr ← get_next_addr(addr)
Idec ← dec_instr(addr)
if !(isOV TCompInstr(Idec)) then
V T Tree.append(vptr,1)
continue
end if
addr ← get_next_addr(addr)
Idec ← dec_instr(addr)
if !(isOV T Di f f Instr(Idec)) then
continue
continue
end if
V T Tree.append(vptr,Idec.opr[2])
continue
continue
end while
return V T Tree
37: end procedure
comparison with binaries without defense, whereas CFIXX
reveals no more information than binaries without defense.
4.3 Inferring Inheritance
We combine all recovered type congruency set into the class
hierarchy for the entire binary. TCSets having similar entries
are merged into a single tree, which still maintains the edges
and the direction of inheritance.
4.4 Thunk and Constructor Analysis
Thunk and constructor analysis are done to identify the cor-
responding primary VTable of a secondary VTable found in
subtrees of binaries compiled using OVT. This is necessary
because OVT reorders all sub VTables of a given class into
the various subtrees they belong to, which makes VTable
grouping (explained in subsection 4.1) not applicable.
Every function in a secondary base class that is redeﬁned
by the derived class has a thunk entry in the Base-in-Derived
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 23Listing 2: Callsite generated by OVT
...
// $a = vptr of most base class in subtree
1 $diff = $vptr - $a
2 $diffR = rotr $diff , l
// ( $b - $a ) >> l equates to max range for $a
3 cmp $diffR , ( $b - $a ) >> l
...
VTable. Hence, we link every secondary VTable which con-
tains a thunk entry to the primary VTable containing the
function it references. This method is certain to identify the
correct primary of a given secondary VTable, however, a thunk
might not always be present. For this reason, we also employ
grouping VTables through constructor analysis.
One of the operations performed within a constructor is to
write the vptrs (primary and secondary) of the class whose
object is to be constructed in the memory space allocated for
that object. To group VTables using constructor analysis, we
ﬁrst scan for constructors in the .text section of the binary.
Next, we extract all valid vptrs from each constructor. Finally,
we identify the primary VTable by looking at the offset-to-top
entry which must be zero.
4.5 Executables vs Shared Libraries
Design information recoverable from shared libraries tend to
be more comprehensive and accurate compared to executables.
The scope of use of shared libraries is unknown at compile