be blocked in system calls, but by default only one can be executing user-level code at any
time. It should be smarter and one day it will be smarter, but until it is if you want CPU
parallelism you must tell the run-time how many goroutines you want executing code
simultaneously. There are two related ways to do this. Either run your job with environment
variable GOMAXPROCS set to the number of cores to use or import the runtime package
and call runtime.GOMAXPROCS(NCPU). A helpful value might be runtime.NumCPU(),
which reports the number of logical CPUs on the local machine. Again, this requirement is
expected to be retired as the scheduling and run-time improve.
目前 Go 运行时的实现默认并不会并行执行代码，它只为用户层代码提供单一的处理核心。
任意数量的 Go 程都可能在系统调用中被阻塞，而在任意时刻默认只有一个会执行用户层代
码。 它应当变得更智能，而且它将来肯定会变得更智能。但现在，若你希望 CPU 并行执
行， 就必须告诉运行时你希望同时有多少 Go 程能执行代码。有两种途径可意识形态，要么
在运行你的工作时将 GOMAXPROCS 环境变量设为你要使用的核心数， 要么导入 runtime
包并调用 runtime.GOMAXPROCS(NCPU)。 runtime.NumCPU() 的值可能很有用，它会返回
当前机器的逻辑 CPU 核心数。 当然，随着调度算法和运行时的改进，将来会不再需要这种
方法。
Be sure not to confuse the ideas of concurrency—structuring a program as independently
executing components—and parallelism—executing calculations in parallel for efficiency on
multiple CPUs. Although the concurrency features of Go can make some problems easy to
structure as parallel computations, Go is a concurrent language, not a parallel one, and not
all parallelization problems fit Go's model. For a discussion of the distinction, see the talk
cited in this blog post.
注意不要混淆并发和并行的概念：并发是用可独立执行的组件构造程序的方法， 而并行则是
为了效率在多 CPU 上平行地进行计算。尽管 Go 的并发特性能够让某些问题更易构造成并行
计算， 但 Go 仍然是种并发而非并行的语言，且 Go 的模型并不适合所有的并行问题。 关于
100
并发
其中区别的讨论，见 此博文。
A leaky buffer
可能泄露的缓冲区
The tools of concurrent programming can even make non-concurrent ideas easier to
express. Here's an example abstracted from an RPC package. The client goroutine loops
receiving data from some source, perhaps a network. To avoid allocating and freeing buffers,
it keeps a free list, and uses a buffered channel to represent it. If the channel is empty, a
new buffer gets allocated. Once the message buffer is ready, it's sent to the server on
serverChan.
并发编程的工具甚至能很容易地表达非并发的思想。这里有个提取自 RPC 包的例子。 客户
端 Go 程从某些来源，可能是网络中循环接收数据。为避免分配和释放缓冲区， 它保存了一
个空闲链表，使用一个带缓冲信道表示。若信道为空，就会分配新的缓冲区。 一旦消息缓冲
区就绪，它将通过 serverChan 被发送到服务器。 serverChan.
var freeList = make(chan *Buffer, 100)
var serverChan = make(chan *Buffer)
func client() {
for {
var b *Buffer
// Grab a buffer if available; allocate if not.
select {
case b = <-freeList:
// Got one; nothing more to do.
default:
// None free, so allocate a new one.
b = new(Buffer)
}
load(b) // Read next message from the net.
serverChan <- b // Send to server.
}
}
101
并发
var freeList = make(chan *Buffer, 100)
var serverChan = make(chan *Buffer)
func client() {
for {
var b *Buffer
// 若缓冲区可用就用它，不可用就分配个新的。
select {
case b = <-freeList:
// 获取一个，不做别的。
default:
// 非空闲，因此分配一个新的。
b = new(Buffer)
}
load(b) // 从网络中读取下一条消息。
serverChan <- b // 发送至服务器。
}
}
The server loop receives each message from the client, processes it, and returns the buffer
to the free list.
服务器从客户端循环接收每个消息，处理它们，并将缓冲区返回给空闲列表。
func server() {
for {
b := <-serverChan // Wait for work.
process(b)
// Reuse buffer if there's room.
select {
case freeList <- b:
// Buffer on free list; nothing more to do.
default:
// Free list full, just carry on.
}
}
}
102
并发
func server() {
for {
b := <-serverChan // 等待工作。
process(b)
// 若缓冲区有空间就重用它。
select {
case freeList <- b:
// 将缓冲区放大空闲列表中，不做别的。
default:
// 空闲列表已满，保持就好。
}
}
}
The client attempts to retrieve a buffer from freeList; if none is available, it allocates a fresh
one. The server's send to freeList puts b back on the free list unless the list is full, in which
case the buffer is dropped on the floor to be reclaimed by the garbage collector. (The default
clauses in the select statements execute when no other case is ready, meaning that the
selects never block.) This implementation builds a leaky bucket free list in just a few lines,
relying on the buffered channel and the garbage collector for bookkeeping.
客户端试图从 freeList 中获取缓冲区；若没有缓冲区可用， 它就将分配一个新的。服务器将
b 放回空闲列表 freeList 中直到列表已满，此时缓冲区将被丢弃，并被垃圾回收器回收。
（select 语句中的 default 子句在没有条件符合时执行，这也就意味着 selects 永远不会被阻
塞。）依靠带缓冲的信道和垃圾回收器的记录， 我们仅用短短几行代码就构建了一个可能导
致缓冲区槽位泄露的空闲列表。
103
错误
Errors
错误
Library routines must often return some sort of error indication to the caller. As mentioned
earlier, Go's multivalue return makes it easy to return a detailed error description alongside
the normal return value. It is good style to use this feature to provide detailed error
information. For example, as we'll see, os.Open doesn't just return a nil pointer on failure, it
also returns an error value that describes what went wrong.
By convention, errors have type error, a simple built-in interface.
库例程通常需要向调用者返回某种类型的错误提示。之前提到过，Go 语言的多值返回特性，
使得它在返回常规的值时，还能轻松地返回详细的错误描述。按照约定，错误的类型通常为
error，这是一个内建的简单接口。
type error interface {
Error() string
}
A library writer is free to implement this interface with a richer model under the covers,
making it possible not only to see the error but also to provide some context. As mentioned,
alongside the usual *os.File return value, os.Open also returns an error value. If the file is
opened successfully, the error will be nil, but when there is a problem, it will hold an
os.PathError:
库的编写者通过更丰富的底层模型可以轻松实现这个接口，这样不仅能看见错误， 还能提供
一些上下文。例如，os.Open 可返回一个 os.PathError。
// PathError records an error and the operation and
// file path that caused it.
type PathError struct {
Op string // "open", "unlink", etc.
Path string // The associated file.
Err error // Returned by the system call.
}
func (e *PathError) Error() string {
return e.Op + " " + e.Path + ": " + e.Err.Error()
}
104
错误
// PathError 记录一个错误以及产生该错误的路径和操作。
type PathError struct {
Op string // "open"、"unlink" 等等。
Path string // 相关联的文件。
Err error // 由系统调用返回。
}
func (e *PathError) Error() string {
return e.Op + " " + e.Path + ": " + e.Err.Error()
}
PathError's Error generates a string like this:
PathError 的 Error 会生成如下错误信息：
open /etc/passwx: no such file or directory
Such an error, which includes the problematic file name, the operation, and the operating
system error it triggered, is useful even if printed far from the call that caused it; it is much
more informative than the plain "no such file or directory".
这种错误包含了出错的文件名、操作和触发的操作系统错误，即便在产生该错误的调用 和输
出的错误信息相距甚远时，它也会非常有用，这比苍白的 “不存在该文件或目录” 更具说明
性。
When feasible, error strings should identify their origin, such as by having a prefix naming
the operation or package that generated the error. For example, in package image, the string
representation for a decoding error due to an unknown format is "image: unknown format".
错误字符串应尽可能地指明它们的来源，例如产生该错误的包名前缀。例如在 image 包中，
由于未知格式导致解码错误的字符串为 “image: unknown format”。
Callers that care about the precise error details can use a type switch or a type assertion to
look for specific errors and extract details. For PathErrors this might include examining the
internal Err field for recoverable failures.
若调用者关心错误的完整细节，可使用类型选择或者类型断言来查看特定错误，并抽取其细
节。 对于 PathErrors，它应该还包含检查内部的 Err 字段以进行可能的错误恢复。
105
错误
for try := 0; try < 2; try++ {
file, err = os.Create(filename)
if err == nil {
return
}
if e, ok := err.(*os.PathError); ok && e.Err == syscall.ENOSPC {
deleteTempFiles() // Recover some space.
continue
}
return
}
for try := 0; try < 2; try++ {
file, err = os.Create(filename)
if err == nil {
return
}
if e, ok := err.(*os.PathError); ok && e.Err == syscall.ENOSPC {
deleteTempFiles() // 恢复一些空间。
continue
}
return
}
The second if statement here is another type assertion. If it fails, ok will be false, and e will
be nil. If it succeeds, ok will be true, which means the error was of type *os.PathError , and
then so is e, which we can examine for more information about the error.
这里的第二条 if 是另一种 类型断言。若它失败， ok 将为 false，而 e 则为 nil. 若它成功，ok
将为 true，这意味着该错误属于 *os.PathError 类型，而 e 能够检测关于该错误的更多信
息。
Panic
Panic
The usual way to report an error to a caller is to return an error as an extra return value. The
canonical Read method is a well-known instance; it returns a byte count and an error. But
what if the error is unrecoverable? Sometimes the program simply cannot continue.
向调用者报告错误的一般方式就是将 error 作为额外的值返回。 标准的 Read 方法就是个众所
周知的实例，它返回一个字节计数和一个 error。但如果错误时不可恢复的呢？有时程序就是
不能继续运行。
106
错误
For this purpose, there is a built-in function panic that in effect creates a run-time error that
will stop the program (but see the next section). The function takes a single argument of
arbitrary type—often a string—to be printed as the program dies. It's also a way to indicate
that something impossible has happened, such as exiting an infinite loop.
为此，我们提供了内建的 panic 函数，它会产生一个运行时错误并终止程序 （但请继续看下
一节）。该函数接受一个任意类型的实参（一般为字符串），并在程序终止时打印。 它还能
表明发生了意料之外的事情，比如从无限循环中退出了。
// A toy implementation of cube root using Newton's method.
func CubeRoot(x float64) float64 {
z := x/3 // Arbitrary initial value
for i := 0; i < 1e6; i++ {
prevz := z
z -= (z*z*z-x) / (3*z*z)
if veryClose(z, prevz) {
return z
}
}
// A million iterations has not converged; something is wrong.
panic(fmt.Sprintf("CubeRoot(%g) did not converge", x))
}
// 用牛顿法计算立方根的一个玩具实现。
func CubeRoot(x float64) float64 {
z := x/3 // 任意初始值
for i := 0; i < 1e6; i++ {
prevz := z
z -= (z*z*z-x) / (3*z*z)
if veryClose(z, prevz) {
return z
}
}
// 一百万次迭代并未收敛，事情出错了。
panic(fmt.Sprintf("CubeRoot(%g) did not converge", x))
}
This is only an example but real library functions should avoid panic. If the problem can be
masked or worked around, it's always better to let things continue to run rather than taking
down the whole program. One possible counterexample is during initialization: if the library
truly cannot set itself up, it might be reasonable to panic, so to speak.
这仅仅是个示例，实际的库函数应避免 panic。若问题可以被屏蔽或解决， 最好就是让程序