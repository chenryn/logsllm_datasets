# 六、Docker 网络
在本章中，我们将了解 Docker 网络。我们将深入 Docker 网络，学习容器如何隔离，它们如何相互通信，以及它们如何与外部世界通信。我们将探讨 Docker 在开箱即用安装中提供的本地网络驱动程序。然后，我们将通过一个 Weave 驱动程序的部署示例来检查远程网络驱动程序的使用。之后，我们将学习如何创建 Docker 网络。我们将通过了解 Docker 网络提供的免费服务来结束讨论。
"Approximately 97% of all shipping containers are manufactured in China. It is far easier to produce the container close to the shipment than to re-position containers around the world." – [https://www.billiebox.co.uk/](https://www.billiebox.co.uk/)
在本章中，我们将涵盖以下主题:
*   什么是 Docker 网络？
*   内置(也称为**本地** ) Docker 网络是关于什么的
*   那么第三方(也称**远程** ) Docker 网络呢？
*   如何创建 Docker 网络
*   免费服务发现和负载平衡功能
*   适合您需求的 Docker 网络驱动程序
# 技术要求
您将从 Docker 的公共报告中获取 Docker 映像，并从 Weave 安装网络驱动程序，因此需要基本的互联网访问来执行本章中的示例。另外，我们将使用`jq software`包，所以如果您还没有安装它，请查看如何安装的说明—它们可以在[第 2 章](2.html)*学习 Docker 命令*的*容器检查命令*部分找到。
本章代码文件可在 GitHub:
[https://GitHub . com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/chapter 06](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter06)
查看以下视频，查看正在运行的代码:
[http://bit.ly/2FJ2iBK](http://bit.ly/2FJ2iBK)
# 什么是 Docker 网络？
正如你已经知道的，网络是一个链接系统，允许计算机和其他硬件设备进行通信。Docker 网络也是如此。它是一个链接系统，允许 Docker 容器在同一个 Docker 主机上相互通信，或者与容器主机之外的容器、计算机和硬件通信，包括在其他 Docker 主机上运行的容器。
如果你熟悉宠物和牛的云计算类比，你就明白能够大规模管理资源的必要性。Docker 网络允许您这样做。它们抽象出网络的大部分复杂性，为您的容器化应用提供易于理解、易于记录和易于使用的网络。Docker 网络基于 Docker 创建的标准，称为**容器网络模型** ( **CNM** )。有一个竞争网络标准，由 CoreOS 创建，称为**容器网络接口** ( **CNI** )。CNI 标准已经被几个项目采用，最著名的是 Kubernetes，可以提出论据来支持它的使用。然而，在本章中，我们将把注意力集中在 Docker 的 CNM 标准上。
libnetwork 项目已经实现了 CNM，您可以通过本节参考资料中的链接了解该项目的更多信息。用 Go 编写的 CNM 实现由三个结构组成:沙箱、端点和网络。沙箱是一个网络命名空间。每个容器都有自己的沙箱。它保存容器网络栈的配置。这包括它的路由表、接口以及 IP 和 MAC 地址的 DNS 设置。沙箱还包含容器的网络端点。接下来，端点是将沙箱加入网络的东西。端点本质上是网络接口，如 **eth0** 。一个容器的沙箱可能有多个端点，但是每个端点将只连接到一个网络。最后，网络是连接端点的集合，允许连接之间的通信。每个网络都有名称、地址空间、标识和网络类型。
Libnetwork 是一个可插拔的架构，它允许网络驱动程序实现我们刚刚描述的组件的细节。每种网络类型都有自己的网络驱动程序。Docker 提供内置驱动程序。这些默认或本地驱动程序包括桥驱动程序和覆盖驱动程序。除了内置驱动程序，libnetwork 还支持第三方创建的驱动程序。这些驱动程序被称为远程驱动程序。远程驱动程序的一些示例包括 Calico、Contiv 和 Weave。
你现在对什么是 Docker 网络有了一点了解，看完这些细节，你可能会想，他说的*容易*在哪里？坚持住。现在我们将开始讨论您创建和使用 Docker 网络有多容易。与 Docker 卷一样，网络命令代表它们自己的管理类别。如您所料，网络的顶级管理命令如下:
```
# Docker network managment command
docker network 
```
网络管理组中可用的子命令包括:
```
# Docker network management subcommands
docker network connect # Connect a container to a network
docker network create            # Create a network
docker network disconnect        # Disconnect a container from a network
docker network inspect # Display network details
docker network ls # List networks
docker network rm # Remove one or more networks
docker network prune # Remove all unused networks
```
现在让我们看看内置或本地网络驱动程序。
# 参考
有关更多信息，请查看以下链接:
*   宠物与牛的对话幻灯片平台:[https://www . slide share . net/Randy bias/面向开放和可扩展云的架构](https://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds)
*   Libnetwork 项目:[https://github.com/docker/libnetwork](https://github.com/docker/libnetwork)
*   Libnetwork 设计:[https://github . com/docker/lib network/blob/master/docs/design . MD](https://github.com/docker/libnetwork/blob/master/docs/design.md)
*   卡利科网络驱动程序:[https://www.projectcalico.org/](https://www.projectcalico.org/)
*   Contiv 网络驱动程序: [http://contiv.github.io/](http://contiv.github.io/)
*   织网驱动:[https://www.weave.works/docs/net/latest/overview/](https://www.weave.works/docs/net/latest/overview/)
# 内置(本地)Docker 网络
Docker 的开箱即用安装包括一些内置的网络驱动程序。这些也被称为本地司机。两个最常用的驱动程序是桥接网络驱动程序和覆盖网络驱动程序。其他内置驱动程序包括无、主机和 MACVLAN。此外，如果不创建网络，您的新安装将会有几个预先创建的网络可供使用。使用`network ls`命令，我们可以很容易地看到新安装中可用的预创建网络列表:
![](img/75a654de-335d-4082-bf45-f0a8b6a60b6f.png)
在这个列表中，您会注意到每个网络都有其唯一的标识、名称、用于创建它的驱动程序(以及控制它的驱动程序)和网络范围。不要混淆本地的范围和驱动程序的类别，后者也是本地的。本地类别用于区分驾驶员的来源和具有远程类别的第三方驾驶员。范围值“本地”表示网络的通信限制在本地 Docker 主机内。澄清一下，如果两个 Docker 主机，H1 和 H2，都包含一个具有本地范围的网络，H1 上的容器将永远无法与 H2 上的容器直接通信，即使它们使用相同的驱动程序并且网络具有相同的名称。另一个范围值是 swarm，我们稍后将详细讨论它。
The pre-created networks that are found in all deployments of Docker are special in that they cannot be removed. It is not necessary to attach containers to any of them, but attempts to remove them with the `docker network rm` command will always result in an error.
有三种内置网络驱动程序具有本地范围:网桥、主机和无。主机网络驱动程序利用 Docker 主机的网络栈，基本上绕过了 Docker 的网络。主机网络上的所有容器都能够通过主机的接口相互通信。使用主机网络驱动程序的一个显著限制是每个端口只能由一个容器使用。也就是说，例如，您不能运行两个都绑定到端口`80`的 nginx 容器。您可能已经猜到，因为主机驱动程序利用了运行它的主机的网络，所以每个 Docker 主机只能有一个使用主机驱动程序的网络:
![](img/8878cc4b-db35-4ae2-9bd1-2bef6653af31.png)
接下来是空或无网络。使用空网络驱动程序会创建一个网络，当容器连接到该网络时，该网络会提供完整的网络栈，但不会在容器内配置任何接口。这使得容器完全隔离。该驱动程序主要是为了向后兼容的目的而提供的，与主机驱动程序一样，在 Docker 主机上只能创建一个空类型的网络:
![](img/ae095a5c-2365-445b-84b0-f4930d6f947e.png)
范围为 local 的第三个网络驱动程序是桥驱动程序。桥接网络是最常见的类型。任何连接到同一桥接网络的容器都能够相互通信。Docker 主机可以使用网桥驱动程序创建多个网络。但是，连接到一个网桥网络的容器无法与不同网桥网络上的容器通信，即使这些网络位于同一个 Docker 主机上。请注意，内置网桥网络和任何用户创建的网桥网络在功能上略有不同。最佳做法是创建自己的网桥网络并加以利用，而不是使用内置的网桥网络。下面是一个使用桥接网络运行容器的示例:
![](img/e929dbdf-7012-41dc-8577-789de4f1c1ae.png)
除了创建具有本地范围的网络的驱动程序之外，还有创建具有群范围的网络的内置网络驱动程序。这种网络将跨越群中的所有主机，并允许连接到它们的容器进行通信，尽管它们运行在不同的 Docker 主机上。正如你可能已经猜测的，使用具有集群范围的网络需要 Docker 集群模式。事实上，当您将 Docker 主机初始化为集群模式时，会为您创建一个具有集群范围的特殊新网络。这个群范围网络被命名为*入口*，并使用内置的覆盖驱动程序创建。该网络对于群模式的负载平衡功能至关重要，该功能用于 [第 5 章](5.html)*Docker Swarm*的*访问群中的容器应用*部分。在`swarm init`中还创建了一个新的桥接网络，名为 docker_gwbridge。这个网络被 swarm 用来对外通信，有点像默认网关。以下是新 Docker Swarm 中的默认内置网络:
![](img/73d4326f-1d8f-409a-906d-603de525d80c.png)
使用覆盖驱动程序可以创建跨越 Docker 主机的网络。这些是第 2 层网络。当您创建覆盖网络时，会有许多网络管道在幕后铺设。群中的每台主机都获得一个带有网络栈的网络沙箱。在这个沙箱中，创建了一个名为 br0 的桥。然后，创建一个 VXLAN 隧道端点，并将其连接到网桥 br0。一旦所有群主机都创建了隧道端点，就会创建一个 VXLAN 隧道，将所有端点连接在一起。这条隧道实际上就是我们所看到的覆盖网络。当容器连接到覆盖网络时，它们会获得一个从覆盖子网分配的 IP 地址，并且该网络上容器之间的所有通信都是通过覆盖进行的。当然，在幕后，通信流量通过 VXLAN 端点，穿过 Docker 主机网络，以及将主机连接到其他 Docker 主机网络的任何路由器。但是，你永远不用担心所有的幕后工作。只要创建一个覆盖网络，把你的容器连接到上面，你就是黄金。
我们要讨论的下一个本地网络驱动程序叫做 MACVLAN。该驱动程序创建网络，允许每个容器都有自己的 IP 和 MAC 地址，并连接到非 Docker 网络。这意味着，除了通过网桥和覆盖网络获得的容器到容器的通信之外，通过 MACVLAN 网络，您还能够与 VLAN、虚拟机和其他物理服务器连接。换句话说，MACVLAN 驱动程序允许你把你的容器放到现有的网络和 VLAN 上。必须在每个 Docker 主机上创建一个 MACVLAN 网络，您将在其中运行需要连接到现有网络的容器。此外，您还需要为您希望容器连接到的每个 VLAN 创建一个不同的 MACVLAN 网络。虽然使用 MACVLAN 网络听起来是一种可行的方法，但使用它有两个重要的挑战。首先，您必须非常小心分配给 MACVLAN 网络的子网范围。将从您的范围内为容器分配 IP，而不考虑其他地方正在使用的 IP。如果您的 DHCP 系统分发的 IP 与您给 MACVLAN 驱动程序的范围重叠，它很容易导致重复的 IP 场景。第二个挑战是，MACVLAN 网络要求您的网卡配置为混杂模式。这在内部网络中通常是不受欢迎的，但在云提供商网络(如 AWS 和 Azure)中几乎是被禁止的，因此 MACVLAN 驱动程序的用例非常有限。
本节包含了大量关于本地或内置网络驱动程序的信息。不要绝望！它们比这些丰富的信息显示的更容易创建和使用。我们将在*创建 Docker 网络*一节中讨论创建和使用信息，但是接下来，让我们快速讨论一下远程(也称为第三方)网络驱动程序。
# 参考
查看这些链接了解更多信息:
*   面向 Docker 网络的优秀、深入的 Docker 文章:[https://success.docker.com/article/networking](https://success.docker.com/article/networking)
*   与覆盖网络联网:[https://docs.docker.com/network/network-tutorial-overlay/](https://docs.docker.com/network/network-tutorial-overlay/)
*   使用 MACVLAN 网络:[https://docs.docker.com/v17.12/network/macvlan/](https://docs.docker.com/v17.12/network/macvlan/)