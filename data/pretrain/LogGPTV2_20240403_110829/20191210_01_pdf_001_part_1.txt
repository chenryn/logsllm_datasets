# Introduction to PostgreSQL for Oracle and MySQL DBAs
## Avinash Vallarapu, Percona

### The History of PostgreSQL

#### Ingres
- **1973**: Eugene Wong and Michael Stonebraker at the University of California, Berkeley, began work on INGRES (INteractive GRaphics Retrieval System), one of the world's first RDBMS.
- **1979**: Oracle Database released its first version.
- **Early 1980s**: INGRES used QUEL as its preferred query language, while Oracle adopted SQL.

- **1985**: The UC Berkeley INGRES research project officially ended.

#### Postgres
- **1986**: Postgres was introduced as a post-Ingres evolution, using POSTQUEL as its query language until 1994.
- **1995**: Postgres95 replaced Postgres, introducing support for SQL as the query language.

#### PostgreSQL
- **1996**: The project was renamed to PostgreSQL to reflect its origins and SQL compatibility.
- **1997**: PostgreSQL 6.0, the first version, was released.

### PostgreSQL Features

- **Portability**
  - Written in C
  - Flexible across all UNIX platforms, Windows, macOS, and others
  - World’s most advanced open-source database, community-driven
  - ANSI/ISO Compliant SQL support

- **Reliability**
  - ACID Compliance
  - Supports Transactions
  - Uses Write-Ahead Logging (WAL)

- **Scalability**
  - Multi-Version Concurrency Control (MVCC)
  - Table Partitioning
  - Tablespaces
  - Foreign Data Wrappers (FDWs)
  - Sharding

### Advanced Features of PostgreSQL

- **Security**
  - Host-Based Access Control
  - Object-Level and Row-Level Security
  - Logging and Auditing
  - Encryption using SSL

- **High Availability**
  - Synchronous/Asynchronous Replication and Delayed Standby
  - Cascading Replication
  - Online Consistent Physical and Logical Backups
  - Point-in-Time Recovery (PITR)

- **Other Features**
  - Triggers and Functions/Stored Procedures
  - Custom Stored Procedural Languages like PL/pgSQL, PL/perl, PL/TCL, PL/php, PL/python, PL/java
  - PostgreSQL Major Version Upgrade using `pg_upgrade`
  - Unlogged Tables, Parallel Query, Native Partitioning, FDWs
  - Materialized Views
  - Hot Standby: Slaves accept read-only queries

### PostgreSQL Cluster

- After initializing PostgreSQL using `initdb` (similar to `mysqld --initialize`) and starting it, you can create multiple databases within it.
- A group of databases running on one server and one port is called a **Cluster** in PostgreSQL.
- A PostgreSQL cluster may also be referred to as a **PostgreSQL Instance**.
- **Characteristics of a PostgreSQL Cluster/Instance:**
  - Serves only one TCP/IP Port
  - Has a dedicated data directory
  - Contains three default databases: `postgres`, `template0`, and `template1`

- When you add a slave (standby) to your PostgreSQL cluster (master), it may be referred to as a **PostgreSQL High Availability Cluster** or a **PostgreSQL Replication Cluster**.
- The master in a PostgreSQL cluster accepts writes and ships WALs to the slave (standby).

### PostgreSQL Database and Schema

- A PostgreSQL database can contain one or more schemas.
- The default schema is `public`.
- A schema is a logical entity that helps you group objects of a certain application logic together, allowing multiple objects with the same name in one database.
- A database can be related to a parent folder/directory. You can always have more than one database, each with one or more schemas.
- For example, in a database named `percona`, a table `employee` can exist in both `scott` and `tiger` schemas:
  - **Database**: percona
  - **Schemas**: scott & tiger
  - **Tables**: 
    - `scott.employee`
    - `tiger.employee`
- To query a particular table in a schema, use the fully qualified table name: `schemaname.tablename`.
  - Example: `SELECT * FROM scott.employee WHERE salary > 10000;`

### PostgreSQL ACID Compliance

- **Atomicity**: Transactions are either all committed or all rolled back.
  - `BEGIN ... SQL1, SQL2, ... SQLn ... COMMIT/ROLLBACK/END`

- **Consistency**: Provides a consistent view of the data based on isolation levels.
  - Example: If the isolation level is `READ_COMMITTED`, a query started before a delete operation will still return the original count after the delete.

- **Isolation**: Prevents concurrent data access through locking.
- **Durability**: Once data is committed, it must be safe.
  - Ensured through WALs, `fsync`, `synchronous_commit`, and replication.

### PostgreSQL Terminology

- PostgreSQL was designed in an academic setting.
- Objects and terminology are based on relational calculus/algebra.

### PostgreSQL Installation

- **Using RPMs**
  - **PGDG Repository**: PostgreSQL Global Development Group maintains YUM and APT repositories.
  - **YUM**: https://yum.postgresql.org
  - **APT**: https://apt.postgresql.org/pub/repos/apt/

- **Step 1**: Choose the appropriate RPM to add the PGDG repo to your server.
  - `# yum install https://yum.postgresql.org/11/redhat/rhel-7.5-x86_64/pgdg-centos11-11-2.noarch.rpm`

- **Step 2**: Install PostgreSQL.
  - `# yum install postgresql11 postgresql11-contrib postgresql11-libs postgresql11-server`

### Initialize Your First PostgreSQL Cluster

- Use `initdb` to initialize a PostgreSQL cluster.
  - `$ echo "PATH=/usr/pgsql-11/bin:$PATH" >> ~/.bash_profile`
  - `$ source .bash_profile`
  - `$ echo $PGDATA`
  - `/var/lib/pgsql/11/data`
  - `$ initdb --version`
  - `initdb (PostgreSQL) 11.0`
  - `$ initdb`

### Starting and Stopping PostgreSQL

- **Starting PostgreSQL**:
  - `pg_ctl -D $PGDATA start`

- **Stopping PostgreSQL**:
  - `pg_ctl -D $PGDATA stop`

### Shutdown Modes in PostgreSQL

- **-ms (Smart Mode - Default mode)**
  - Waits for all connections to exit and does not allow new transactions.
  - Committed transactions are applied to disk through a CHECKPOINT before shutdown.
  - May take more time on busy systems.
  - `pg_ctl -D $PGDATA stop -ms`

- **-mf (Fast Mode - Recommended on Busy Systems)**
  - Closes/kills all open transactions and does not allow new transactions.
  - Committed transactions are applied to disk through a CHECKPOINT before shutdown.
  - `pg_ctl -D $PGDATA stop -mf`

- **-mi (Immediate Mode - Forced and Abnormal Shutdown during Emergencies)**
  - Sends SIGQUIT to all processes to exit immediately without proper shutdown.
  - Requires crash recovery after instance start.
  - `pg_ctl -D $PGDATA stop -mi`

### psql and Shortcuts

- **Connect to PostgreSQL**:
  - `$ psql`

- **List Databases**:
  - `\l`
  - `\l+` (Observe the difference)

- **Connect to a Database**:
  - `\c dbname`

- **List Objects**:
  - `\dt` -> List all tables
  - `\dn` -> List all schemas

- **Show All Backslash Commands**:
  - `\?`

### PostgreSQL Architecture

- **Multi-Process Architecture**
  - **Postmaster (Parent PostgreSQL Process)**
  - **Backend Utility Processes**
  - **Per-Connection Backend Processes**

### Background Utility Processes

- **BGWriter**:
  - Writes/flushes dirty data blocks to disk.

- **WAL Writer**:
  - Writes WAL buffers to disk.

- **Autovacuum**:
  - Starts autovacuum worker processes to perform vacuum and analyze operations.

- **Checkpointer**:
  - Performs a CHECKPOINT to ensure all changes are flushed to disk.
  - Depends on configuration parameters.

- **Archiver**:
  - Archives Write-Ahead-Logs.
  - Used for high availability, backups, and PITR.

- **Logger**:
  - Logs messages, events, and errors to syslog or log files.

- **Stats Collector**:
  - Collects statistics of relations.

- **WAL Sender**:
  - Sends WALs to replicas.
  - One WAL sender for each slave connected for replication.

- **WAL Receiver**:
  - Started on a slave (standby or replica) in replication.
  - Streams WALs from the master.

- **bgworker**:
  - Extensible to run user-supplied code in separate processes monitored by PostgreSQL.
  - Can access PostgreSQL's shared memory area.
  - Connects as a client using `libpq`.
  - **Logical Replication Launcher**: Manages logical replication between a publisher and a subscriber.

### Memory Components

- **Shared Buffers**:
  - PostgreSQL database memory area shared by all databases in the cluster.
  - Pages are fetched from disk to shared buffers during reads/writes.
  - Modified buffers (dirty buffers) are written to disk after a CHECKPOINT.
  - Parameter: `shared_buffers` sets the amount of RAM allocated to shared buffers.
  - Uses LRU algorithm to flush less frequently used buffers.

- **WAL Buffers**:
  - Stores write-ahead log records.
  - Contains the change vector for a buffer being modified.
  - WAL buffers are written to WAL segments on disk.

- **work_mem**:
  - Memory used by each query for internal sort operations such as `ORDER BY` and `DISTINCT`.
  - Postgres writes to disk (temp files) if memory is not sufficient.

- **maintenance_work_mem**:
  - Amount of RAM used by maintenance operations like VACUUM, CREATE INDEX, and REINDEX.
  - Setting this to a higher value can help in faster database restore.

### PostgreSQL and Direct I/O

- When PostgreSQL needs a page (data block), it searches its own memory (shared buffers).
- If not found in shared buffers, it requests the OS for the same block.
- The OS fetches the block from the disk and gives it to PostgreSQL if the block is not found in the OS cache.
- This is more important for caching when the database and active data set cannot fit in memory.

### Disk Components

- **Data Directory**
  - Initialized using `initdb` in PostgreSQL (similar to `mysqld --initialize` in MySQL).
  - Contains Write-Ahead-Logs, log files, databases, objects, and other configuration files.
  - You can move WALs and logs to different directories using symlinks and parameters.
  - Environment Variable: `$PGDATA`

- **Configuration Files inside the Data Directory**
  - `postgresql.conf` (similar to `my.cnf` in MySQL)
  - `pg_ident.conf`
  - `pg_hba.conf`
  - `postgresql.auto.conf`

### What’s Inside the Data Directory?

- **PG_VERSION**
  - Version string of the database cluster.
- **pg_hba.conf**
  - Host-based access control file (built-in firewall).
- **pg_ident.conf**
  - Ident-based access file for OS user to DB user mapping.
- **postgresql.conf**
  - Primary configuration file for the database.
- **postmaster.opts**
  - Contains the options used to start the PostgreSQL instance.
- **postmaster.pid**
  - The parent process ID or the postmaster process ID.

### `postgresql.conf` vs `postgresql.auto.conf`

- **postgresql.conf**: Primary configuration file for the database.
- **postgresql.auto.conf**: Automatically generated and managed by PostgreSQL for settings that are altered using `ALTER SYSTEM`.