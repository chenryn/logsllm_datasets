# 【技术分享】Chrome浏览器安全之沙盒逃逸（上）
|
##### 译文声明
本文是翻译文章，文章来源：technet.microsoft.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**【技术分享】Chrome浏览器安全之沙盒逃逸（下）**](http://bobao.360.cn/learning/detail/4581.html)[](http://bobao.360.cn/learning/detail/4580.html)
**简介**
现在人们在选择浏览器的时候，在诸多的考虑因素中，安全性无疑是首当其冲的。在我们的日常活动中，浏览器的应用几乎无处不在，例如通过它与亲人保持联系、编辑敏感的私人和公司文档，甚至管理我们的金融资产。因此，如果网络浏览器被黑客攻陷的话，可能会产生灾难性的后果。实际上，随着浏览器功能的增加，其代码也变得越来越复杂，从而增加了潜在的攻击面。
我们微软攻防安全研究（OSR）团队的工作使命，便是让计算技术变得更安全。我们每天都在通过各种方法来识别exploit软件，并与公司其他团队紧密合作，以便为缓解网络世界所面临的各种攻击提供相应的解决方案。在我们的工作过程中，通常涉及软件漏洞的识别。但是，我们认为，无论我们多么努力，总是会有更多的漏洞被发现，因此，这并不是我们关注的重点。相反，我们更关心的问题是：假设存在一个漏洞，我们该怎么办？
迄今为止，我们已经取得了不错的成绩。比如，在我们的协助下，已经提高了多款Microsoft产品的安全性，其中就包括Microsoft
Edge。与此同时，我们在防止远程执行代码（RCE）方面也取得了取得重大进展，其中涉及的缓解措施包括：控制流程保护（CFG）、禁止导出、任意代码保护（ACG）和隔离，特别是Less
Privileged AppContainer（LPAC）和Windows Defender Application
Guard（WDAG）。不过，我们认为，还必须对自己的安全策略进行严格的验证。为此，我们经常采用的一种方法是看看其他公司在做什么，并深入学习他们的研究结果。
为此，我们开始研究Google的Chrome浏览器，因为其安全策略的重点在于沙盒上面。我们想知道Chrome是如何阻止RCE漏洞攻击的，并尝试回答：沙盒模式是否强大到足以保护浏览器的安全？
我们的主要研究发现包括：
我们发现的CVE-2017-5121漏洞表明，在现代浏览器中找到可远程利用的漏洞是完全可能的
Chrome相对缺乏的RCE缓解措施，意味着从内存损坏漏洞到exploit的路径可能会很短
在沙箱内进行的多次安全检查导致RCE
exploit能够绕过同源策略（SOP），从而使RCE攻击者可以访问受害者的在线服务（如电子邮件，文档和银行会话）并保存凭据
Chrome的漏洞处理流程会导致安全漏洞的细节在相关的安全补丁推送到用户之前就已经被公开。
**远程漏洞的查找和利用**
为了完成这次安全评估，我们首先需要找到某些漏洞作为突破口。通常，我们首先想到的是寻找内存损坏漏洞，例如缓冲区溢出或UAF漏洞。对于所有网络浏览器来说，其攻击面都是非常广泛的，包括V8
JavaScript解释器、Blink DOM引擎和ium PDF PDF渲染器等。对于这个项目来说，我们将把注意力集中在V8上面。
利用fuzzing，我们最终为exploit找到了一个漏洞。实际上，我们是利用Windows Security
Assurance小组的基于Azure的fuzzing基础架构来运行ExprGen的，这是一个由Chakra背后的团队编写的内部JavaScript
fuzzer，使用的是我们自己的JavaScript引擎。迄今为止，所有公开可用的fuzzer可能都在V8上跑过了；从另一方面来说，ExprGen只在Chakra内部使用，所以我们更有可能在V8上发现新的漏洞。
**寻找bug**
与手动代码审查相比，fuzzing的一个缺点是，无法立即搞清楚到底是测试用例触发了一个漏洞，还是意外的行为造成了一个漏洞。这对我们的OSR来说，尤其如此；我们之前没有V8方面的使用经验，因此对其内部工作机制知之甚少。在我们的测试中，ExprGen产生的测试用例能够可靠令V8崩溃，但并不总是以相同的方式，或者说无法以一种有利于攻击者的方式让其崩溃。
由于fuzzer通常产生的代码会非常庞大和复杂（在我们的测试中，产生了将近1,500行不可读的JavaScript代码），所以，首先要做的事情就是将测试用例最小化
——为其瘦身，直到变成一个比较小而且可理解的代码。下面就是我们最终得到的结果：
上面的代码看起来很令人费解，并且没有真正实现任何东西，但它却是合法的JavaScript代码。它所做的事情，就是创建一个奇怪的结构化对象，然后对其中的一些字段进行设置。按理说，这不应该触发任何奇怪的行为，不过事实上，的确发生了这样的情况。当使用D8运行该代码时，崩溃发生了：
我们看到，崩溃发生在（ **0x000002d168004f14**
）处，说明不是位于静态模块中。因此，它必定是由V8的即时（JIT）编译器动态生成的代码。同时，我们还可以发现崩溃是因为rax寄存器的值为零导致的。