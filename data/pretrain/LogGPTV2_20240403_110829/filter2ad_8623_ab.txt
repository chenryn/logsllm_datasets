        DWORD   SizeOfRawData;
        DWORD   PointerToRawData;
        DWORD   PointerToRelocations;
        DWORD   PointerToLinenumbers;
        WORD    NumberOfRelocations;
        WORD    NumberOfLinenumbers;
        DWORD   Characteristics;
    } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
在看一下Stud_PE中区段表：
可以发现有总共有三个节区，所以应该有三个节区头，这里可以发现一个很奇怪的事：节区一和节区三的Raw Address和Raw
size是一样的，也就是说，这两个节区是重叠的，这是UPack的一个重要操作：重叠节区，下面会详细介绍这个操作。
### 重叠节区：
根据tud_PE中的区段信息，可以得知第一节区和第三节区是重叠的，但是文件在被映射到内存时，文件中0x10~0x1FF这段内容会被分别映射到其实地址为0x1000和0x27000的两块内存中，大概的映射过程如下图所示：
这里还可以发现一个信息，第二节区的大小是AE28，这比第一和第三节区打了很多，其实这里就是原本notepad.exe的代码压缩后存储的地方，它在文件被装入内存时填充进第二节区中，在经过程序中的解压代码处理后再放入到第一节区中，而第一节区中就会有可以执行的，完整的代码（
**观察区段信息时其实也可以发现第一节区的virtual size是14000，比第二节区的12000要大一些，其实就是解压后的大小要大一点** ）。
上一篇文章对壳的简述中其实也提到了这个问题，就是经过压缩壳处理后的文件在载入内存时的解压与覆盖操作，如果在上一篇文章中没有理解到的话就可以结合这个例子来看：
  1. 将压缩后的代码全部放在一个区段中
  2. 再装入内存时设置两个节区（一个大一点的用存储解压后的代码，一个小一点用来存储解压前的代码）
  3. 将被解码处理后的代码放入先前准备好的节区中，执行时直接执行该节区中的代码即可
## RVA to RAW转换的新理解：
当涉及到文件到内存的映射时，就会有RVA to RAW的转换，在正常的PE文件中，这个转化的过程是：
    RAW - PointerToRawData = RVA - VirtualAddress
    RAW = RVA - VirtualAddress + PointerToRawData
如果在UPack处理后的PE文件中也使用这个公式的话，那么第一节区的开始位置就应该是：
    RAW = RVA（0x1018）- VirtualAddress(0x1000) + PointerToRawData(0x10)
    RAW = 0x28
这里的RVA和PointerToRawData信息要自己去找：
PointerToRawData
RVA（EntryPoint）：
这里计算出来的RAW是0x28，去OD里面看一下这个地方：
这里的数据无法被解析为代码，这也是为什么UPack处理后文件无法被正常解析或者执行的原因，就是由于无法正常进行RVA to RAW转换。那么这个RVA to
RAW的转换应该怎幺正常进行？
在OPTIONAL_HEADER中有这样一个成员：
    DWORD   FileAlignment
这个成员就是文件对齐参数，简单来说就是在文件中的PointerToRawData需要是是它的整数倍，在这个文件中它的值为：0x200
也就是说用于计算RAW的PointerToRawData值需要为0,0x200,0x400,0x600等，而这里的PointerToRawData值为0x10，显然不是整数倍，应该要被处理为0才能正常进行运算，也就是说正确的计算结果应该是：
    RAW = RVA（0x1018）- VirtualAddress(0x1000) + PointerToRawData(0)
    RAW = 0x18
到OD中看一下这个部分：
这里出现了跳转指令和数据传送指令，基本可以判断这里就是正确的EP。
## IMAGE_IMPORT_DESCRIPTOR：
现在分析只剩下最后一个重要的结构了，就是这个程序的导入表，UPack处理后的导入表构造很奇特，下面来具体看一下：
首先在OPTIONAL_HEADER中找到导入表的数据目录：
RVA是0x217EE，Size为0x14；根据这个RVA找到导入表的具体位置：
蓝框选中的部分即使导入表的数据，再来看一下导入表结构体的构造：
    typedef struct _IMAGE_IMPORT_DESCRIPTOR {
        union {
            DWORD   Characteristics;            // 0 for terminating null import descriptor
            DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)
        } DUMMYUNIONNAME;
        DWORD   TimeDateStamp;                  // 0 if not bound,
                                                // -1 if bound, and real date\time stamp
                                                //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)
                                                // O.W. date/time stamp of DLL bound to (Old BIND)
        DWORD   ForwarderChain;                 // -1 if no forwarders
        DWORD   Name;
        DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)
    } IMAGE_IMPORT_DESCRIPTOR;
那么就可以找到这几个关键信息：
    DWORD   Name:0x2
    DWORD   FirstThunk:0x11E8
根据这两个RVA可以找到name的RVA为：0x2 FirstThunk的RVA为0x1E8:
Name:
FirstThunk(先找指针再找数据):
到这里看起来一切都是正常的，但是按照正常的规范来说，导入表后应该用一个NULL的结构体作为结尾，但是这里却没有正常使用NULL结构体截断导入表，这里其实就是他奇特的地方：
**它使用区段的结束作为导入表的结束**
什么意思呢？首先我们知道 **第一节区的结束位置是：0x10 + 0x1F0 = 0x200**
，也就是说，第一节区的数据在0X200的地方就截断了，导入表只使用了一个WORD来表示FirstThunk，而0x200后面的数据不会被映射入第一节区，导入表就这要被截断了（省去了一个NULL结构体的空间）
### IAT与INT：
在学习PE文件的时候总会遇到这个问题，就是IAT与INT到底有什么区别？
这两个结构的差异要看阶段，当文件处于磁盘中时，这两个结构是相同的，使用的都是一个位置上的数据，但是当文件被加载到内存中时，
**IAT中的数据会根据INT中的函数名称、序号和库文件导出表信息被修改为函数的具体地址，而INT中的数据则保持原样**
，这也是为什么在IMAGE_IMPORT_DESCRIPTOR中INT对应的成员是OriginalFirstThunk（原初首thunk）。
# 调试程序：
**#调试软件是高版本的OD，高版本的OD修复了这个RAW to RAV的bug，可以直接找到EP，旧版本的OD可能需要自己定位一下EP#**
OD打开文件后就是程序的EP：
跟随这个跳转继续调试：
这一段代码的主要操作就是将ESI指向的地址（RVA:10270F0 RAW:F0）开始的0x27个字节拷贝到EDI指向的地址（RVA:0x101FE28
RAW：B028），这个EDI指向的地址正好就是文件的末尾。总体操作就是将文件头中的一段数据复制到文件的末尾。然后继续调试：
来到这样一段代码：
这里有一个函数调用，进入里面看一下：
这其实就是程序中的解码函数，但是光从这个地方来看还看不出来它是什么功能，要继续F8跟踪，来到这样一段代码：
这里发生了一个向前的跳转，转回了了这个地方
也就是这个0x101FCCB的位置上，再次跟踪的话会发现多次调用这个函数，印证了前面说到的它是解码函数的猜想，在调用函数后的操作就是某种算法以及将解码出来的代码放在文件末尾（也就是前面说到的第二节区解码出来的放入第一届全），感兴趣的话可以仔细的去分析一下。
那么当解码循环完成后，又要进行什么操作，我们下断点跳过循环后看一下：
我们单步运行到这个地方：
注意这个call ecx和call ebp，逐步运行，可以发现这个call ecx是调用
LoadLibrary和GetProcAddress这两个函数，也就是出现在我们PE文件头中的两个函数，这两个函数组合起来就是获得某个导入函数的实际地址，并且在call
ebp后出现了一个jmp
跳转回最开始的地方，是一个明显的循环结构，在中间出现了lods的数据传送指令。那么我们就可以基本确定这个地方在循环获取导入函数的地址并填入到IAT中。（
**一直跟踪的话会发现esi中有类似于函数名的字符串在不停变动，也可以印证我们的猜想** ）
这个循环就是在修复被壳抹去的IAT。
在程序完成解码和修复IAT后，就会进入到真正的程序入口地址，也就是OEP，在程序中以RETN的形式表现：
步进到这个retn即可返回程序的OEP：
这里也就找到了程序的OEP：0x100739D
参考资料：
《逆向工程核心原理》 [韩] 李承远
工具下载:
Stud_PE: