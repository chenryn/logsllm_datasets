etc. Where are the application properties/configuration parameters stored?  How is the business class identified for 
any feature/URL?  What types of classes get executed for any processing any request? (e.g. centralized controller, 
command classes, view pages etc.)  How is the view rendered to the users for any request?
Company Standards and Guidelines
Many companies will have standards and guidelines dictated by management.  This is how the management (ulti-
mately responsible for the organizations information security) control what levels of security are applied to various 
functions, and how they should be applied.  For example, if the company has a Secure Coding Guidelines document, 
reviewers should know and understand the guidelines and apply them during the code review.
6.7 Code Review Discovery and Gathering Information
The reviewers will need certain information about the application in order to be effective. Frequently, this informa-
tion can be obtained by studying design documents, business requirements, functional specifications, test results, 
and the like. However, in most real-world projects, the documentation is significantly out of date and almost never 
has appropriate security information. If the development organization has procedures and templates for architecture 
and design documents, the reviewer can suggest updates to ensure security is considered (and documented) at 
these phases.
If the reviewers are initially unfamiliar with the application, one of the most effective ways to get started is to talk 
with the developers and the lead architect for the application. This does not have to be a long meeting, it could be a 
whiteboard session for the development team to share some basic information about the key security considerations 
Methodology
28
and controls. A walkthrough of the actual running application is very helpful to give the reviewers a good idea about 
how the application is intended to work. Also a brief overview of the structure of the code base and any libraries used 
can help the reviewers get started.
If the information about the application cannot be gained in any other way, then the reviewers will have to spend 
some time doing reconnaissance and sharing information about how the application appears to work by examining 
the code.  Preferably this information can then be documented to aid future reviews.
Security code review is not simply about the code structure. It is important to remember the data; the reason that 
we review code is to ensure that it adequately protects the information and assets it has been entrusted with, such 
as money, intellectual property, trade secrets, or lives. The context of the data with which the application is intended 
to process is very important in establishing potential risk. If the application is developed using an inbuilt/well-known 
design framework the answers to the most of these questions would be pre-defined. But, in case it is custom then this 
information will surely aid the review process, mainly in capturing the data flow and internal validations. Knowing 
the architecture of the application goes a long way in understanding the security threats that can be applicable to 
the application. 
A design is a blueprint of an application; it lays a foundation for its development. It illustrates the layout of the appli-
cation and identifies different application components needed for it. It is a structure that determines execution flow 
of the application. Most of the application designs are based on a concept of MVC. In such designs different compo-
nents interact with each other in an ordered sequence to serve any user request.  Design review should be an integral 
part of secure software development process. Design reviews also help to implementing the security requirements 
in a better way.
Collecting all the required information of the proposed design including flow charts, sequence diagrams, class dia-
grams and requirements documents to understand the objective of the proposed design.  The design is thoroughly 
studied mainly with respect to the data flow, different application component interactions and data handling. This is 
achieved through manual analysis and discussions with the design or technical architect’s team. The design and the 
architecture of the application must be understood thoroughly to analyze vulnerable areas that can lead to security 
breaches in the application. 
After understanding the design, the next phase is to analyze the threats to the design. This involves observing the 
design from an attacker’s perspective and uncovering the backdoors and insecure areas present in it.  Table 4 below 
Methodology
Existing security controls
• Are there any known weaknesses in third-part security controls
• Is the placements of security controls correct?
Architecture
• Are connections to external servers secure?
• Are inputs from external sources validated?
Configuration files and 
data stores
• Is there any sensitive data in configuration files?
• Who has access to configuration or data files?
Authentication and 
access control
• Does the design implement access control for all resources?
• Are sessions handled correctly?
• What functionality can be accessed without authentication?
Design Area
Questions to consider
Data Flow
• Are user inputs used to directly reference business logic?
• Is there potential for data binding flaws?
• Is the execution flow correct in failure cases?
Table 4: Example Design Questions During Secure Code Review
29
highlights some questions that can be asked of the architecture and design to aid secure code reviews.
Every security requirement should be associated with a security control best suited for the design. Here, we would 
identify exact changes or additions to be incorporated in the design that are needed to meet any requirement or 
mitigate a threat. The list of security requirements and proposed controls can be then discussed with the develop-
ment teams. The queries of the teams should be addressed and feasibility of incorporating the controls must be 
determined. Exceptions, if any must be taken into account and alternate recommendations should be proposed. In 
this phase a final agreement on the security controls is achieved. The final design incorporated by the development 
teams can be reviewed again and finalized for further development process.
6.8 Static Code Analysis
Static Code Analysis is carried out during the implementation phase of S-SDLC. Static code analysis commonly 
refers to running static code analysis tools that attempt to highlight possible vulnerabilities within the ‘static’ 
(non-running) source code.
Ideally static code analysis tools would automatically find security flaws with few false positives. That means it should 
have a high degree of confidence that the bugs that it finds are real flaws. However, this ideal is beyond the state of 
the art for many types of application security flaws. Thus, such tools frequently serve as aids for an analyst to help 
them zero in on security relevant portions of code so they can find flaws more efficiently, rather than a tool that finds 
all flaws automatically.
Bugs may exist in the application due to insecure code, design or configuration. Automated analysis can be carried on 
the application code to identify bugs through either of the following two options:
Methodology
Defining a generic checklist, which the development team can fill out can give reviewers the desired context. The 
checklist is a good barometer for the level of security the developers have attempted or thought of. If security 
code review becomes a common requirement, then this checklist can be incorporated into a development pro-
cedure (e.g. document templates) so that the information is always available to code reviewers. See Appendix A 
for a sample code review checklist.
The checklist should cover the most critical security controls and vulnerability areas such as:
• Data Validation
• Authentication
• Session Management
• Authorization
• Cryptography
• Error Handling
• Logging
• Security Configuration
• Network Architecture
Code Review Checklist
30
1. Static code scanner scripts based on a pattern search (in-house and open source).
2. Static code analyzers (commercial and open source).
Advantages and disadvantages of source code scanners are shown in tables 5 and 6.
Though code scanning scripts and open source tools can be efficient at finding insecure code patterns, they often 
lack the capability of tracing the data flow. This gap is filled by static code analyzers, which identify the insecure code 
patterns by partially (or fully) compiling the code and investigating the execution branches, allowing for source to 
sink analysis. Static code analyzers and scanners are comprehensive options to complement the process of code 
review.
Choosing a static analysis tool
Choosing a static analysis tool is a difficult task since there are a lot of choices. The comparison charts below could 
help organization decide which tool is right for them, although this list is not exhaustive. 
Methodology
Source to sink analysis
Some analyzers can trace the code and identify the vulnerabilities through source to sink analysis. They identify possible 
inputs to the application and trace them thoroughly throughout the code until they find them to be associated with any 
insecure code pattern. Such a source to sink analysis helps the developers in understanding the flaws better as they get 
a complete root cause analysis of the flaw
Elaborate reporting 
format
Scanners provide a detailed report on the observed vulnerabilities with exact code snippets, risk rating and complete 
description of the vulnerabilities. This helps the development teams to easily understand the flaws and implement 
necessary controls
Advantage
Explanation
Reduction in manual 
efforts
The type of patterns to be scanned for remains common across applications, computers are better at such scans than 
humans. In this scenario, scanners play a big role is automating the process of searching the vulnerabilities through 
large codebases.
Find all the instances of 
the vulnerabilities
Scanners are very effective in identifying all the instances of a particular vulnerability with their exact location. This is 
helpful for larger code base where tracing for flaws in all the files is difficult.
Table 5: Advantages To Using Source Code Scanners
Limitation
Explanation
Business logic flaws 
remain untouched
The flaws that are related to application’s business logic, transactions, and sensitive data remain untouched by the scan-
ners. The security controls that need to be implemented in the application specific to its features and design are often 
not pointed by the scanners. This is considered as the biggest limitation of static code analyzers.
Limited scope
Static code analyzers are often designed for specific frameworks or languages and within that scope they can search 
for a certain set of vulnerable patterns.  Outside of this scope they fail to address the issues not covered in their search 
pattern repository.
Design flaws
Design flaws are not specific to the code structure and static code analyzers focus on the code. A scanner/analyzer will 
not spot a design issue when looking at the code, whilst a human can often identify design issues when looking at their 
implementation.
False positives
Not all of the issues flagged by static code analyzers are truly issues, and thus the results from these tools need to be 
understood and triaged by an experienced programmer who understands secure coding.  Therefore anyone hoping 
that secure code checking can be automated and run at the end of the build will be disappointed, and there is still a 
deal of manual intervention required with analyzers.
Table 6: Disadvantages To Using Source Code Scanners
31
Some of the criteria for choosing a tool are:
• Does the tool support the programming language used?
• Is there a preference between commercial or free tools? Usually the commercial tools have more features and are 
more reliable than the free ones, whilst their usability might differ.
• What type of analysis is being carried out? Is it security, quality, static or dynamic analysis?
The next step requires that some work is done since it is quite subjective. The best thing to do is to test a few tools to 
see if the team is satisfied with different aspects such as the user experience, the reporting of vulnerabilities, the level 
of false positives and the customization and the customer support. The choice should not be based on the number of 
features, but on the features needed and how they could be integrated in the S-SDLC. Also, before choosing the tool, 
the expertise of the targeted users should be clearly evaluated in order to choose an appropriate tool.
6.9 Application Threat Modeling
Threat modeling is an in-depth approach for analyzing the security of an application. It is a structured approach that 
enables employees to identify, quantify, and address the security risks associated with an application. Threat model-
ing is not an approach to reviewing code, but it complements the secure code review process by providing context 
and risk analysis of the application. 
The inclusion of threat modeling in the S-SDLC can help to ensure that applications are being developed with securi-
ty built-in from the very beginning. This, combined with the documentation produced as part of the threat modeling 
process, can give the reviewer a greater understanding of the system, allows the reviewer to see where the entry 
points to the application are (i.e. the attack surface) and the associated threats with each entry point (i.e. attack vec-
tors). 
The concept of threat modeling is not new but there has been a clear mind-set change in recent years. Modern threat 
modeling looks at a system from a potential attacker’s perspective, as opposed to a defender’s viewpoint. Many com-
panies have been strong advocates of the process over the past number of years, including Microsoft who has made 
threat modeling a core component of their S-SDLC, which they claim to be one of the reasons for the increased se-
curity of their products in recent years.
When source code analysis is performed outside the S-SDLC, such as on existing applications, the results of the threat 
modeling help in reducing the complexity of the source code analysis by promoting a risk based approach. Instead of 
reviewing all source code with equal focus, a reviewer can prioritize the security code review of components whose 
threat modeling has ranked with high risk threats.
The threat modeling process can be decomposed into 3 high level steps:
6.9.1. Step 1: Decompose the Application. 
The first step in the threat modelling process is concerned with gaining an understanding of the application and how 
it interacts with external entities. This involves creating use-cases to understand how the application is used, identi-
fying entry points to see where a potential attacker could interact with the application, identifying assets i.e. items/
areas that the attacker would be interested in, and identifying trust levels which represent the access rights that the 
application will grant to external entities. This information is documented in the threat model document and it is also 
used to produce data flow diagrams (DFDs) for the application. The DFDs show the different data paths through the 
system, highlighting the privilege (trust) boundaries.
Methodology
32
Items to consider when decomposing the application include
External Dependencies
External dependencies are items external to the code of the application that may pose a threat to the application. 
These items are typically still within the control of the organization, but possibly not within the control of the de-
velopment team. The first area to look at when investigating external dependencies is how the application will be 
deployed in a production environment. 
This involves looking at how the application is or is not intended to be run. For example if the application is expected 
to be run on a server that has been hardened to the organization’s hardening standard and it is expected to sit behind 
a firewall, then this information should be documented. 
Entry Points
Entry points (aka attack vectors) define the interfaces through which potential attackers can interact with the appli-
cation or supply it with data. In order for a potential attacker to attack an application, entry points must exist. Entry 
points in an application can be layered, for example each web page in a web application may contain multiple entry 
points. 
Assets
The system must have something that the attacker is interested in; these items/areas of interest are defined as assets. 
Assets are essentially threat targets, i.e. they are the reason threats will exist. Assets can be both physical assets and 
abstract assets. For example, an asset of an application might be a list of clients and their personal information; this is 
a physical asset. An abstract asset might be the reputation of an organization.
Determining the Attack Surface
The attack surface is determined by analyzing the inputs, data flows and transactions. A major part of actually per-
forming a security code review is performing an analysis of the attack surface. An application takes inputs and pro-
duces output of some kind. The first step is to identify all input to the code.
Inputs to the application may include the bullet points below and figure 4 describes an example process for identi-
fying an applications input paths: 
• Browser input
• Cookies
• Property files
• External processes
• Data feeds
• Service responses
• Flat files
• Command line parameters
• Environment variables
Methodology
33
Methodology
TRANSITIONAL
ANALYSIS
INITIATION
IDENTIFY INPUT PATHS
IDENTIFY AREAS 
OF LATE & DY-
NAMIC BINDING
FOLLOW PATH 
EACH PARAME-
TER THROUGH 
CODE
IDENTIFY AREAS 
OF CONFIG FILE 
REFERENCE
IDENTIFY
ATTACK
SURFACE
INPUT
PARAMETERS
(USER)
INPUT
PARAMETERS
(CONFIG)
IDENTIFY
ATTACK
SURFACE
IDENTIFY
ATTACK
SURFACE
IDENTIFY
ATTACK
SURFACE
INPUT
PARAMETERS
(CONTROL)
INPUT
PARAMETERS
(BLACKEND)
Figure 4: Example process diagram for identifying input paths
34
Methodology
Trust Levels
Trust levels represent the access rights that the application will grant to external entities. The trust levels are cross-ref-
erenced with the entry points and assets. This allows a team to define the access rights or privileges required at each 
entry point, and those required to interact with each asset.
Data flow analysis
Exploring the attack surface includes dynamic and static data flow analysis. Where and when variables are set and 
how the variables are used throughout the workflow, how attributes of objects and parameters might affect other 
data within the program. It determines if the parameters, method calls, and data exchange mechanisms implement 
the required security.
Transaction analysis
Transaction analysis is needed to identify and analyze all transactions within the application, along with the relevant 
security functions invoked. 
The areas that are covered during transaction analysis are:
• Data/Input Validation of data from all untrusted sources
• Authentication
• Session Management
• Authorization
• Cryptography (data at rest and in transit)
• Error Handling /Information Leakage
• Logging /Auditing
Data Flow Diagrams
All of the information collected allows an accurately model the application through the use of Data Flow Diagrams 
(DFDs). The DFDs will allow the employee to gain a better understanding of the application by providing a visual 
representation of how the application processes data. The focus of the DFDs is on how data moves through the 
application and what happens to the data as it moves. DFDs are hierarchical in structure, so they can be used to 
decompose the application into subsystems. The high level DFD will allow the employee to clarify the scope of the 
application being modelled. The lower level iterations will allow more focus on the specific processes involved when 
processing specific data. 
There are a number of symbols that are used in DFDs for threat modelling, as show in the following table 7 below:
The process shape represents a task that handles data within 
the application. The task may process the data or perform an 
action based on the data.
PROCESS
Methodology
ELEMENT
IMAGE
DESCRIPTION
The external entity shape is used to represent any entity 
outside the application that interacts with the application via 
an entry point.
EXTERNAL ENTITY
Table 7: Threat Modeling Symbols