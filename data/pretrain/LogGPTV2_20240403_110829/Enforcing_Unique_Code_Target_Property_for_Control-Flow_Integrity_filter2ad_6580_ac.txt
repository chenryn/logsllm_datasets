9
10
11
12
13
14
15
16
17
18
19 }}
if (real_target != PTS[fun]) abort();
else continue;
PTS[fun] = PTS[arr[uid]];
break;
case ID4: int real_target = getPTPacket();
case ID3: int uid
= read_data();
break;
(a) Instrumented program in Figure 1
(b) Monitor internal
Figure 4: Instrumentation and execution monitoring of the program in Figure 1. µCFI compiler adds extra instructions (shaded) to record constraining
data (c-data) and basic block IDs into the PT trace. µCFI monitor extracts BBIDs and constraining data from the trace, performs points-to analysis for sensitive
instructions (s-instr), and validates ICT targets.
Our method for constructing IR-level control-flow is as follows.
µCFI compiler identifies LLVM IR basic blocks that have at least
one sensitive instruction, and assigns each a unique ID (referred to
as a BBID). During program instrumentation, the compiler inserts
write_data calls at block entries, taking BBID as the argument.
Once the basic block gets executed, its BBID will be recorded into
the PT trace. µCFI monitor extracts BBID from the PT trace, maps
it to the corresponding LLVM IR-level basic block, and performs
the points-to analysis for each contained sensitive instruction. As
function write_data has side effect, the compiled binary has the
same order of original side-effecting operations as the LLVM IR
between any two consecutive BBID packets. µCFI compiler outputs
a map (ID2BB in Figure 2) for µCFI monitor to translate a BBID
in the PT trace into the corresponding IR basic block. With this
novel method, our PT parser can simply ignore all TNT packets
and focuses on the TIP packets that encode BBIDs (detailed in §5.3).
Figure 4a shows the instrumentation of the code in Figure 1,
represented in C language for clarity. The newly added statements
are highlighted, including 4 calls to write_data to dump BBIDs
and another call to record the constraining data uid. The sensitive
instructions related to ICT target calculation are labeled with “s-
instr”, which the monitor will use for analysis.
3.4 Online points-to analysis
We perform the points-to analysis with the full execution context to
enforce the UCT property. µCFI monitor first extracts a BBID from
the trace through the read_data function. Based on the mapping
from BBID to LLVM IR-level basic block, the monitor locates the
current basic block and performs the points-to analysis for each
contained sensitive instruction. Our analysis maintains a global
points-to table with one entry for each program variable. To process
one sensitive instruction, the analysis simply queries the points-
to table to retrieve the target of the source operand and uses it
to update the entry of the destination operand according to the
semantics of the instruction. Figure 4b illustrates the monitoring
code for the example in Figure 1 in C format. Before the analysis
loop, the code initializes the global points-to table PTS with NULL
targets. Inside the loop, it retrieves a BBID (line 3) and performs the
analysis (line 5-18). For example, if the BBID is ID2, the code will
find the target of arr[0] from the table PTS and use it to update the
entry for fun. When the BBID is ID3, the code retrieves the concrete
value of the constraining data uid and then updates the entry for
fun accordingly. Based on the instrumentation in Figure 4a, uid is
logged immediately after ID3 so the code at line 12 of Figure 4b will
get the correct value.
The µCFI monitor performs its analysis in a memory-safe manner
so that the results are correct in spite of any memory corruptions
in the execution process due to spatial memory errors (e.g., buffer
overflow) or temporal memory errors (e.g., use-after-free). Unlike
the execution process, our analysis represents each object as a Node
object and each pointer as a (Node,offset) pair. The first element of
the pair indicates the object pointed by the pointer, and the second
element is the distance from the object start to the pointed location.
We use this representation to create shadow objects in the monitor
and maintain their points-to information. The (Node,offset) repre-
sentation allows us to implement a relaxed model of memory safety
under the “infinite spacing” definition [31]. This mode has two
properties: 1) there is no access to undefined memory; 2) memory
regions are allocated infinitely far apart. The first property rules out
memory errors like use-after-free and uninitialized memory access,
as each pointer (A,x) has an attribute to indicate its status (e.g.,
allocated, freed). The second property rules out buffer overflows.
Since data objects under our analysis are allocated from an infinite
object space, writing to a Node A with an out-of-bound offset x will
have no effect to other nodes, even though in the real execution
the address corresponding to the pointer (A,x) could be the same
address as some other pointer (B,y).
3.5 ICT target validation
When the analysis reaches an ICT instruction, the µCFI monitor
queries the points-to table to get the unique allowed target calcu-
lated by the points-to analysis. It then retrieves the TIP packet from
PT to find the real target used in the execution. If they mismatch,
the monitor concludes that memory corruption occurred and ter-
minates the protected program. In the strongest security policy, the
monitor would block the execution after each ICT instruction to
validate the target. However, frequent suspensions introduce an un-
acceptably high performance overhead. Therefore, µCFI performs
CFI checks in parallel with the execution and only suspends the
execution at critical system calls. It waits for the validation logic to
finish checking all indirect control-flow transfers, and then resumes
the execution if no CFI violations are detected. We consider the fol-
lowing system calls to be security-sensitive, similar to many other
security systems [15, 21, 50, 61]: mmap, mremap, remap_file_pages,
mprotect, execve, execveat, sendmsg, sendmmsg, sendto, and write.
µCFI focuses on determining the unique target for each invoca-
tion of each ICT instruction. Attackers may corrupt the constraining
data before it is recorded by PT, as we do not enforce data integrity.
In this case, our analysis may derive the wrong ICT target and thus
miss an attack. However, malicious corruption of constraining data
falls into the category of non-control data attacks [14, 32] and is
thus out of the scope of this work.
4 IMPLEMENTATION
We implement a prototype of µCFI on x86_64 system with 6010
source lines of code for the program compiler and the execution
monitor. We choose x86_64 system as it is widely used and long-
term supported. However, our idea of enforcing the UCT property
is general and applicable to similar systems, like x86.
Our compiler is built on top of LLVM 3.6, with a LLVM pass for
IR-level instrumentation and a set of updates to the X86 backend for
assembly-level instrumentation. The LLVM pass performs the con-
straining data identification and encoding, and the BBID encoding,
as we discuss in Section §3. The updated X86 backend helps achieve
trace size reduction and shadow stack protection, which we will
discuss in this section. We implement the monitor as one root user
process, which makes it suitable for protecting non-root processes.
However, this is only a limitation of the current implementation
and not the overall design, which can have a kernel monitor or ad-
ditional protection mechanisms (e.g., SELinux). It uses two threads,
one for PT trace parsing and another for points-to analysis and
CFI validation. We use a modified version of the PT driver from
Griffin [24] for trace management, in which we write the trace
into per-thread pseudo-files and set appropriate permissions for
our user-space µCFI monitor to read it. Next we present several
implementation details of the µCFI system, including efforts for
trace reduction, integration with shadow stack, and a practical type
analyzer for the points-to analysis.
Trace reduction. PT allows users to specify the traced code range
of a particular program, and only generates packets when the pro-
gram executes inside the traced range. To utilize this feature to
minimize the trace size, we perform program instrumentation to
redirect all necessary packets into one dedicated code range. Specif-
ically, we implement a function iCall to realize indirect function
calls, and a function oneRet to achieve function returns. µCFI com-
piler replaces each indirect function call in the program with a
direct call to iCall, with the original function pointer as the first
argument. iCall contains one indirect jump instruction that goes
to the address specified in the argument. µCFI replaces each ret
instruction with a direct jump to the oneRet function, which con-
tains one ret instruction to perform function return. During the
execution, we configure the trace range to cover only oneRet and
iCall, which is 48 bytes (8 for instruction and 40 for padding). In
this way, we avoid all TNT packets that usually dominate PT traces.
We show that our trace reduction significantly reduces the size and
helps mitigate the performance overhead of parsing in Section §5.3.
Integration with shadow stack. To demonstrate the compatibil-
ity of µCFI with existing backward-edge CFI solutions, we imple-
ment a parallel shadow stack in µCFI compiler [17]. Parallel shadow
stack saves return addresses in a different stack, but with a fixed
(optionally randomized) offset from the original location. Upon
function return, it compares the two versions of the return address
to detect attacks, or overwrites the one on the real stack with the
shadowed copy to disable attacks. Our implementation of parallel
shadow stack contains a patch to LLVM X86 backend, and an ELF
constructor function. The former inserts two assembly instructions
into each function, one at the function entry for saving the return
address to the shadow stack, and another before the ret instruction
for bringing the shadow copy back. ELF constructor functions are
invoked by the binary loader before giving control to the program
code, which we use to set up the shadow stack and create guard
pages between two stacks. We evaluate it with µCFI in Section §5.4.
Lazy type analysis. Type flattening is the technique of represent-
ing a composite type as basic types [21, 30, 38]. Our points-to
analysis requires type flattening to represent an object as a set of
(Node,offset) pairs, each representing a basic-type element. The
common way to flatten a type is to recursively replace its element
types with their definitions until all elements have basic types. How-
ever, this method requires accurate type information during the
object allocation, which may not be available in highly optimized
LLVM IR. We propose lazy flattening to expand an object when it
is accessed at runtime. During the object allocation, we represent it
as an empty set. When it is accessed through a pointer (Node,x), we
know that at offset x the object has an element with a particular
type, and will update the object representation accordingly. There-
fore, lazy flattening tolerates the type missing problem. However, it
may slow down the analysis due to the dynamic type analysis. µCFI
uses a hybrid solution: we flatten an object as much as possible
based on the type information during its allocation, and use lazy
type flattening to address the type missing problem.
5 EVALUATION
We perform empirical evaluations to answer the following questions
regarding µCFI’s security and performance:
Q1. can µCFI enforce the unique code target property?
Q2. can µCFI prevent real-world advanced attacks?
Q3. what is the cost of using µCFI for protection?
Q4. can µCFI work well with backward CFI solutions?
Benchmarks. We use µCFI to protect 14 SPEC CPU2006 bench-
marks and 2 real-world applications, the nginx web server and the
vsftpd file server, and measure the allowed target number among
all executed ICT instructions (Q1). We also measure the overhead
of µCFI on these benchmarks and applications, including execution
time, memory usage, and code size (Q3). We collect 5 publicly avail-
able control-hijacking attacks against 4 vulnerable applications, 1
Table 3: Evaluation result of µCFI on SPEC CPU2006, nginx and vsftpd. We measure the number of allowed targets for all ICT instructions in
Allowed Target #. We report the overhead introduced by µCFI regarding time, memory, and code size; instru only covers code instrumentation; +monitor also
considers the µCFI monitoring; +stack integrates the parallel shadow stack. Other columns show the number of PT packets for BBID, return and constraining
data. – means no function pointer. Gray rows indicate C++ benchmarks. We calculate an extra average, excluding benchmarks without any ICT instruction.
kilo-
sLOC
128.2
5.7
1.6
9.6
3.9
157.7
28.3
20.7
10.5
2.6
36.1
0.9
4.3
13.1
Allowed Target #
w/o c-data
µCFI
1∼1.8e19
1
1
1
–
–
1
1
1
1
1∼1.8e19
1
1
1
1
1
1
7
–
–
1∼1200
1
–
–
1
1
1
1
all above
w/o mcf, libq & lbm
103.4
16.5
1
1
1∼6.2e6
1∼13
instru
13.79
0.70
0.22
0.56
0.07
4.96
0.11
1.25
4.07
0.33
6.53
0.05
4.00
1.09
2.65
3.38
0.69
0.15
0.46
1.13
Time Overhead (%)
+stack
+monitor
47.63
49.67
1.82
1.06
0.73
-0.82
0.52
1.25
-0.01
0.24
18.63
8.55
3.37
3.95
1.29
0.78
18.36
10.56
-1.64
0.00
35.14
24.32
-0.02
0.00
10.09
13.97
0.03
0.86
9.95
7.88
12.74
10.10
1.58
1.36
1.92
2.32
4.05
4.05
0.75
0.83
PittyPat
47.3
17.7
4.3
1.8
28.8
4.0
27.5
20.2
6.7
14.1
11.8
0.7
22.5
16.0