```  
postgres=# create table tbl1(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# insert into tbl1 (id,info,crt_time) values (1,'test',now());  
INSERT 0 1  
postgres=# select * from tbl1;  
 id | info |          crt_time            
----+------+----------------------------  
  1 | test | 2017-04-11 15:30:38.810826  
(1 row)  
```  
批量插入1  
```  
postgres=# insert into tbl1 (id, info ,crt_time) select generate_series(1,10000),'test',now();  
INSERT 0 10000  
postgres=# select count(*) from tbl1;  
 count   
-------  
 10001  
(1 row)  
```  
批量插入2  
```  
postgres=# insert into tbl1 (id,info,crt_time) values (1,'test',now()), (2,'test2',now()), (3,'test3',now());  
INSERT 0 3  
```  
批量插入3  
```  
postgres=# begin;  
BEGIN  
postgres=# insert into tbl1 (id,info,crt_time) values (1,'test',now());  
INSERT 0 1  
postgres=# insert into tbl1 (id,info,crt_time) values (2,'test2',now());  
INSERT 0 1  
postgres=# insert into tbl1 (id,info,crt_time) values (3,'test3',now());  
INSERT 0 1  
postgres=# end;  
COMMIT  
```  
更新  
```  
postgres=# update tbl1 set info='new value' where id=1;  
UPDATE 4  
```  
有则更新、无则插入  
```  
postgres=# create table tbl2(id int primary key, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# insert into tbl2 select generate_series(1,1000),'test',now() on conflict  (id) do update set info=excluded.info, crt_time=excluded.crt_time;  
INSERT 0 1000  
postgres=# insert into tbl2 select generate_series(1,1000),'test',now() on conflict  (id) do update set info=excluded.info, crt_time=excluded.crt_time;  
INSERT 0 1000  
postgres=# insert into tbl2 select generate_series(1,1000),'test',now() on conflict  (id) do nothing;  
INSERT 0 0  
```  
删除数据  
```  
postgres=# delete from tbl1 where id=1;  
DELETE 4  
```  
批量更新  
```
update target_table set c2 = t.c2 from (values(1,1),(2,2),(3,3)...(2000,2000)) as t(c1,c2) where target_table.c1=t.c1;
```
批量删除  
```
delete from target_table using (values(1,1),(2,2),(3,3)...(2000,2000)) as t(c1,c2) where target_table.c1 = t.c1;
```
truncate(如果要清除全表，建议使用truncate)  
注意，请使用DDL锁超时，如果有继承表，并且只想清理当前表，使用ONLY.  
建议所有的DDL操作前，都设置锁超时，避免堵塞其他操作。  
```  
postgres=# \h truncate  
Command:     TRUNCATE  
Description: empty a table or set of tables  
Syntax:  
TRUNCATE [ TABLE ] [ ONLY ] name [ * ] [, ... ]  
    [ RESTART IDENTITY | CONTINUE IDENTITY ] [ CASCADE | RESTRICT ]  
postgres=# set lock_timeout = '1s';  -- 设置锁超时  
SET  
postgres=# truncate only tbl1;  -- 清理当前表（不清理继承表）  
TRUNCATE TABLE  
```  
drop表  
drop表时，如果有依赖对象，想一同删除，可以使用cascade关键字  
```  
postgres=# drop table p;  
ERROR:  cannot drop table p because other objects depend on it  
DETAIL:  table c1 depends on table p  
table cc1 depends on table c1  
table c2 depends on table p  
HINT:  Use DROP ... CASCADE to drop the dependent objects too.  
postgres=# drop table p cascade;  
NOTICE:  drop cascades to 3 other objects  
DETAIL:  drop cascades to table c1  
drop cascades to table cc1  
drop cascades to table c2  
DROP TABLE  
```  
alter table修改表  
例如添加字段  
```  
postgres=# alter table tbl1 add column c1 int;  
ALTER TABLE  
```  
添加字段，并添加默认值（会rewrite table, 不建议对大表这么操作，会很久。大表增加字段和默认值，建议先增加自动，默认值可以异步小批量的UPDATE）  
```  
postgres=# alter table tbl1 add column c2 int default 100;  
ALTER TABLE  
```  
转换兼容类型  
```  
postgres=# alter table tbl1 alter column c2 type int2;  
ALTER TABLE  
```  
转换不兼容类型  
```  
postgres=# create table tbl2(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# insert into tbl2 values (1,'1', now());  
INSERT 0 1  
postgres=# insert into tbl2 values (2,'2a', now());  
INSERT 0 1  
postgres=# select to_number(info,'9999999999999999999') from tbl2;  
 to_number   
-----------  
         1  
         2  
(2 rows)  
postgres=# alter table tbl2 alter column info type int using to_number(info,'9999999999999999999');  
ALTER TABLE  
```  
psql服务端COPY(文件读写在数据库所在服务器)  
```  
postgres=# \h copy  
Command:     COPY  
Description: copy data between a file and a table  
Syntax:  
COPY table_name [ ( column_name [, ...] ) ]  
    FROM { 'filename' | PROGRAM 'command' | STDIN }  
    [ [ WITH ] ( option [, ...] ) ]  
COPY { table_name [ ( column_name [, ...] ) ] | ( query ) }  
    TO { 'filename' | PROGRAM 'command' | STDOUT }  
    [ [ WITH ] ( option [, ...] ) ]  
where option can be one of:  
    FORMAT format_name  
    OIDS [ boolean ]  
    FREEZE [ boolean ]  
    DELIMITER 'delimiter_character'  
    NULL 'null_string'  
    HEADER [ boolean ]  
    QUOTE 'quote_character'  
    ESCAPE 'escape_character'  
    FORCE_QUOTE { ( column_name [, ...] ) | * }  
    FORCE_NOT_NULL ( column_name [, ...] )  
    FORCE_NULL ( column_name [, ...] )  
    ENCODING 'encoding_name'  
```  
COPY out  
```  
postgres=# copy tbl2 to '/tmp/test.csv';  
COPY 2  
```  
COPY in  
```  
postgres=# copy tbl2 from '/tmp/test.csv';  
COPY 2  
```  
psql客户端COPY(文件读写在客户端)  
COPY in  
```  
 cat /tmp/test.csv | psql -h 127.0.0.1 -p 1921 -U postgres -d postgres -c "copy tbl2 from stdin"  
COPY 2  
```  
COPY out  
```  
psql -h 127.0.0.1 -p 1921 -U postgres -d postgres -c "copy tbl2 to stdout" > /tmp/test.csv  
cat /tmp/test.csv  
1       1       2017-04-11 15:48:39.728835  
2       2       2017-04-11 15:48:44.370834  
1       1       2017-04-11 15:48:39.728835  
2       2       2017-04-11 15:48:44.370834  
1       1       2017-04-11 15:48:39.728835  
2       2       2017-04-11 15:48:44.370834  
```  
软件开发时请使用程序语言对应的驱动接口。  
### 7. 选择行  
where子句过滤条件  
```  
postgres=# select tableoid::regclass,xmin,xmax,cmin,cmax,ctid,relname from pg_class where relname='pg_type';  
 tableoid |   xmin   | xmax | cmin | cmax | ctid  | relname   
----------+----------+------+------+------+-------+---------  
 pg_class | 94858157 |    0 |    1 |    1 | (0,3) | pg_type  
(1 row)  
```  
隐藏字段(表oid, 插入事务号, 删除事务号, 事务命令偏移值, 行号)  
```  
postgres=# select tableoid::regclass,xmin,xmax,cmin,cmax,ctid,relname from pg_class limit 10;  
 tableoid |   xmin   | xmax | cmin | cmax |  ctid  |        relname          
----------+----------+------+------+------+--------+-----------------------  
 pg_class | 94858157 |    0 |    1 |    1 | (0,3)  | pg_type  
 pg_class | 94858326 |    0 |    1 |    1 | (0,4)  | pg_toast_187550  
 pg_class | 94858205 |    0 |  232 |  232 | (0,5)  | new_type  
 pg_class | 94858326 |    0 |    2 |    2 | (0,6)  | pg_toast_187550_index  
 pg_class | 94858326 |    0 |    4 |    4 | (0,7)  | test  
 pg_class | 95516401 |    0 |    1 |    1 | (0,9)  | pg_toast_187556  
 pg_class | 95516401 |    0 |    2 |    2 | (0,10) | pg_toast_187556_index  
 pg_class | 95516401 |    0 |    4 |    4 | (0,11) | tblaccount4  
 pg_class |     1726 |    0 |    2 |    2 | (0,20) | hints_id_seq  
 pg_class |     1726 |    0 |    5 |    5 | (0,22) | pg_toast_17134  
(10 rows)  
```  
### 8. 使用序列  
PostgreSQL允许创建多个序列，每个序列独立自主，有自己的取值空间。  
序列一旦消耗掉，就无法回退，除非设置它。  
序列通常用来表示唯一自增值。  
创建序列  
```  
postgres=# \h create sequence  
Command:     CREATE SEQUENCE  
Description: define a new sequence generator  
Syntax:  
CREATE [ TEMPORARY | TEMP ] SEQUENCE [ IF NOT EXISTS ] name [ INCREMENT [ BY ] increment ]  
    [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ]  
    [ START [ WITH ] start ] [ CACHE cache ] [ [ NO ] CYCLE ]  
    [ OWNED BY { table_name.column_name | NONE } ]  
postgres=# create sequence seq;  
CREATE SEQUENCE  
```  
获取序列值  
```  
postgres=# select nextval('seq'::regclass);  
 nextval   
---------  
       1  
(1 row)  
postgres=# select nextval('seq'::regclass);  
 nextval   
---------  
       2  
(1 row)  
```  
读取序列当前状态  
```  
postgres=# select * from seq;  
 sequence_name | last_value | start_value | increment_by |      max_value      | min_value | cache_value | log_cnt | is_cycled | is_called   
---------------+------------+-------------+--------------+---------------------+-----------+-------------+---------+-----------+-----------  
 seq           |          2 |           1 |            1 | 9223372036854775807 |         1 |           1 |      31 | f         | t  
(1 row)  
```  
读取当前会话，上一次获取的序列值  
```  
postgres=# select * from currval('seq'::regclass);  
 currval   
---------  
       2  
(1 row)  
```  
设置序列起始值  
```  
postgres=# \h alter sequence  
Command:     ALTER SEQUENCE  
Description: change the definition of a sequence generator  
Syntax:  
ALTER SEQUENCE [ IF EXISTS ] name [ INCREMENT [ BY ] increment ]  
    [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ]  
    [ START [ WITH ] start ]  
    [ RESTART [ [ WITH ] restart ] ]  
    [ CACHE cache ] [ [ NO ] CYCLE ]  
    [ OWNED BY { table_name.column_name | NONE } ]  
postgres=# alter sequence seq restart with 1;  
ALTER SEQUENCE  
postgres=# select nextval('seq'::regclass);  
 nextval   
---------  
       1  
(1 row)  
```  
设置序列是否轮回  
```  
postgres=# alter sequence seq cycle;  
ALTER SEQUENCE  
```  
设置序列的cache值，提升性能，每个会话，一次会获取一个CACHE的VALUE。  
```  
postgres=# alter sequence seq cache 10000;  
ALTER SEQUENCE  
```  
设置序列的步调  
```  
postgres=# alter sequence seq increment by 99;  
ALTER SEQUENCE  
postgres=# select nextval('seq'::regclass);  
 nextval   
---------  
     100  
(1 row)  
postgres=# select nextval('seq'::regclass);  
 nextval   
---------  
     199  
(1 row)  
```  
修改序列的nextval(与restart效果一样)  
```  
postgres=# select setval('seq'::regclass, 1);  
 setval   
--------  
      1  
(1 row)  
postgres=# select nextval('seq'::regclass);  
 nextval   
---------  
     100  
(1 row)  
postgres=# select nextval('seq'::regclass);  
 nextval   
---------  
     199  
(1 row)  
```  
serial2,serial4,serial8类型  
这三个类型，对应int2,int4,int8，同时会自动创建序列，并将默认值设置为序列值。  
```  
postgres=# create table tbl3(id serial2);  
CREATE TABLE  
postgres=# \d+ tbl3  
                                             Table "public.tbl3"  
 Column |   Type   |                     Modifiers                     | Storage | Stats target | Description   
--------+----------+---------------------------------------------------+---------+--------------+-------------  
 id     | smallint | not null default nextval('tbl3_id_seq'::regclass) | plain   |              |   
```  
### 9. 使用默认值  
```  
postgres=# create table tbl4(id int, info text, crt_time timestamp default now());  
CREATE TABLE  
postgres=# insert into tbl4 (id, info) values (1,'test');  
INSERT 0 1  
postgres=# select * from tbl4;  
 id | info |          crt_time            
----+------+----------------------------  
  1 | test | 2017-04-11 16:08:12.232796  
(1 row)  
```  
### 10. 生成数据  
PostgreSQL 的函数支持返回多条记录，使用这种方法可以很方便的生成测试数据。  
```  
postgres=# \df generate_series  
                                                               List of functions  
   Schema   |      Name       |         Result data type          |                        Argument data types                         |  Type    
------------+-----------------+-----------------------------------+--------------------------------------------------------------------+--------  
 pg_catalog | generate_series | SETOF bigint                      | bigint, bigint                                                     | normal  
 pg_catalog | generate_series | SETOF bigint                      | bigint, bigint, bigint                                             | normal  
 pg_catalog | generate_series | SETOF integer                     | integer, integer                                                   | normal  
 pg_catalog | generate_series | SETOF integer                     | integer, integer, integer                                          | normal  
 pg_catalog | generate_series | SETOF numeric                     | numeric, numeric                                                   | normal  
 pg_catalog | generate_series | SETOF numeric                     | numeric, numeric, numeric                                          | normal  
 pg_catalog | generate_series | SETOF timestamp with time zone    | timestamp with time zone, timestamp with time zone, interval       | normal  
 pg_catalog | generate_series | SETOF timestamp without time zone | timestamp without time zone, timestamp without time zone, interval | normal  
(8 rows)  
```  
插入1万条测试数据  
```  
postgres=# create table tbl5(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# insert into tbl5 select id, md5(random()::text), clock_timestamp() from generate_series(1,10000) t(id);  
INSERT 0 10000  
postgres=# select * from tbl5 limit 10;  
 id |               info               |          crt_time            
----+----------------------------------+----------------------------  
  1 | 1b9e90de0b1236339503a9a79b13dd55 | 2017-04-11 16:11:07.106191  
  2 | c43a151d1a7df9d587488ca5ac4df7c3 | 2017-04-11 16:11:07.106326  
  3 | 789ec7d6feb1cdac55f252cc17ef8bf1 | 2017-04-11 16:11:07.106335  
  4 | 1c229df1e6b2aa344bee239b91b9c1af | 2017-04-11 16:11:07.10634  
  5 | 88d95fc422a28361292201dc7f648a54 | 2017-04-11 16:11:07.106345  
  6 | 3f8f88d9a69fdd92062a8bd9e49e5a6a | 2017-04-11 16:11:07.10635  
  7 | b66c5c9b46eef16e28e9d909442cb675 | 2017-04-11 16:11:07.106355  
  8 | 2a28d6a7b760821d826d6fc4891fa167 | 2017-04-11 16:11:07.106361  
  9 | 3fd0ec10c7068b83646b1920e4f97319 | 2017-04-11 16:11:07.106366  
 10 | d0544855ee8f926c5e5ee821e3932344 | 2017-04-11 16:11:07.106371  
(10 rows)  
```  
其他生产数据的方法  
pgbench 压测生成tpc-B测试数据  
```  
pgbench -i -s 10  
NOTICE:  table "pgbench_history" does not exist, skipping  
NOTICE:  table "pgbench_tellers" does not exist, skipping  
NOTICE:  table "pgbench_accounts" does not exist, skipping  
NOTICE:  table "pgbench_branches" does not exist, skipping  
creating tables...  
100000 of 1000000 tuples (10%) done (elapsed 0.08 s, remaining 0.74 s)  
200000 of 1000000 tuples (20%) done (elapsed 0.19 s, remaining 0.75 s)  
300000 of 1000000 tuples (30%) done (elapsed 0.30 s, remaining 0.69 s)  