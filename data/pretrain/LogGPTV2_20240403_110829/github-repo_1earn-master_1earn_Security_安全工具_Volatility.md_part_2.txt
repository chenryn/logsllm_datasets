yarascan            # 以 Yara 签名扫描进程或内核内存
```
**Linux 内存取证插件参数**
```bash
# 获取系统进程信息相关命令
linux_pstree        # 进程树列表
linux_pslist_cache  # 来自的 kmem_cache 活动进程
linux_psxview       # 比较进程列表
linux_lsof          # 打开文件描述符的每个活动进程
linux_pslist        # 活动的进程列表
linux_psaux         # 活动的进程列表（输出内容包括更多的细节）
# 获取系统内存信息的相关命令
linux_memmap        # 内存映射文件
linux_pidhashtable  # Linux 内核中的 PID 散列表
linux_proc_maps     # 转储由-s/-vma 参数到磁盘上指定的内存范围。
linux_dump_map      # 进程内存的详细信息，包括堆和共享库。
linux_bash          # bash 历史文件
# 获取网络接口信息的相关命令
linux_arp           # 显示 arp 列表
linux_ifconfig      # 显示网络接口详细情况
linux_route_cache   # 显示网络路由表
linux_netstat       # 查看网络链接情况
# 获取系统硬件信息的相关命令
linux_cpuinfo       # 显示 cpu 的相关命令信息。
linux_dmesg         # 显示内核缓存信息。
linux_iomem         # 显示 io 设备信息。
linux_mount         # 显示/proc/mouns 的相关命令信息，主要是挂载的磁盘设备。
linux_mount_cache   # 显示 kmem_cache 的相关命令信息。
linux_slabinfo      # 显示/proc/slabinfo 的相关命令信息。
# rootkit 检测的相关命令
linux_check_afinfo  # 检查篡改网络协议结构。
linux_check_creds   # 检查进程共享结构。
linux_check_fop     # 检查文件操作数据结构篡改情况。
linux_check_idt     # 检查中断描述符表（IDT）的篡改情况。
linux_check_syscall # 在系统调用表检查功能情况。
linux_check_modules # 检查用于从内核模块列表中缺少在 sysfs 中的项目。
# 获取内核模块信息的相关命令
linux_lsmod         # 加载内核模块。
linux_tmpfs         # tmpfs 的内容。
```
**获取镜像信息**
首先获取镜像的摘要信息，一般这是进行镜像分析的第一步
```bash
volatility -f [image] imageinfo
```
![](../../../assets/img/Security/安全工具/Volatility/1.png)
这其中比较有用的信息就是 Suggested Profile(s) ，这个是工具识别的系统版本，存在多个的原因是这是根据一些特征识别的，所以可能有误报，就把各种结果按照可能性排列出来了，一般直接选择第一个，如果加载插件报错的话，可以尝试后面的。
这里根据给出的结果选择第一个，然后使用 pslist 插件，看一下系统中运行的进程。
### 进程
**按照 EPROCESS 列表列出所有正在运行的进程**
```bash
volatility -f [image] --profile=[profile] pslist
```
![](../../../assets/img/Security/安全工具/Volatility/2.png)
如图中 lsass.exe、winlogon.exe ,在 windows 本地登录时，用户的密码存储在 `%SystemRoot%\system32\config\SAM` 这个文件里。当用户输入密码进行本地认证的过程中，所有的操作都是在本地进行的。他其实就是将用户输入的密码转换为 NTLM Hash，然后与 SAM 中的 NTLM Hash 进行比较。当用户注销、重启、锁屏后，操作系统会让 winlogon 显示登录界面，也就是输入框。当 winlogon.exe 接收输入后，将密码交给 lsass 进程，这个进程中会存一份明文密码，将明文密码加密成 NTLM Hash，对 SAM 数据库比较认证。
notepad.exe 是指正在运行一个记事本程序，而 mspaint.exe 是指是微软画图程序， cmd.exe 指正在运行命令行程序
**显示隐藏/终止的进程**
```bash
volatility -f [image] --profile=[profile] psscan
```
**以 dot 图的形式导出**
```bash
python vol.py -f [image] --profile=[profile] psscan --output=dot --output-file=out.dot
apt install -y xdot
```
![](../../../assets/img/Security/安全工具/Volatility/29.png)
![](../../../assets/img/Security/安全工具/Volatility/30.png)
**把进程以树的形式显示**
```bash
volatility -f [image] --profile=[profile] pstree
```
![](../../../assets/img/Security/安全工具/Volatility/23.png)
**查看 DLL 文件**
当我们发现可疑进程后，可通过此命令进行深度查看
```bash
volatility -f [image] --profile=[profile] dlllist -p [pid]
```
![](../../../assets/img/Security/安全工具/Volatility/24.png)
**转储出可寻址的内存数据**
在上面的进程中可以看到，存在一个 mspaint.exe 的进程，它是微软的画图软件，对于这样的情况，可以使用工具还原内存中的图片, 来当时查看的图片或者当时状态的图片，使用的工具是 gimp，可以在 linux 上安装使用。
这里首先将 mspaint.exe 的进程内存 dump 出来，使用 memdump 插件，在之前列举进程的截图中，进程名字后面一行就是该进程的 PID。
```bash
volatility -f [image] --profile=[profile] memdump -p [pid] --dump-dir ./
```
![](../../../assets/img/Security/安全工具/Volatility/9.png)
将获取到的 2276.dmp 文件改名为 2276.data，然后在 gime 中点击显示全部文件，选择 2276.data 打开
```bash
add-apt-repository ppa:otto-kesselgulasch/gimp
apt-get update
apt-get install -y gimp     # 安装 gimp
gimp                        # 启动 gimp
mv 2276.dmp 2276.data
```
首先选择一个固定的宽度，这里选择 1000，然后调节高度把屏幕铺满，然后再大幅度拖动 Image 下的 Offset 的滑块，当看到图片类似下图时停止，可以看到隐隐约约有一张图，但是有点重叠，这时，点击上下箭头缓慢调节 Width，其中 Heigth 在调节中作用是不大的，主要是 Width 和 Offset 的调节决定是否能看到图片
微调位移为图像的左右方向平移，大幅调节位移则是图像的上下方向平移。而宽度不变时，始终显示的都是同一幅图像。
![](../../../assets/img/Security/安全工具/Volatility/10.png)
![](../../../assets/img/Security/安全工具/Volatility/11.png)
在调节时，不仅仅只能看到画图程序的图片，如下图，就调出了另一个状态的一个系统图片
![](../../../assets/img/Security/安全工具/Volatility/12.png)
**获取运行过的命令**
在上面查看进程时，可以看到存在一个 cmd 进程，那么可以使用 cmdscan 插件来查看运行过的命令，
```bash
volatility -f [image] --profile=[profile] cmdscan
```
![](../../../assets/img/Security/安全工具/Volatility/13.png)
可以看到执行了 whoami、ifconfig、ipconfig 这三个命令
**查看进程命令行参数**
```bash
volatility -f [image] --profile=[profile] cmdline
```
![](../../../assets/img/Security/安全工具/Volatility/25.png)
---
### 信息
**获取记事本数据**
```bash
volatility -f [image] --profile=[profile] notepad
# 当上面这个插件不支持这个系统，这时可以使用 editbox 查看
volatility -f [image] --profile=[profile] editbox
```
![](../../../assets/img/Security/安全工具/Volatility/8.png)
**查看当前桌面截图**
可以使用 screenshot 查看查看当前桌面的伪截图，其中会显示桌面上窗口的框，不会显示其中的内容
```bash
volatility -f [image] --profile=[profile] screenshot --dump-dir ./
```
![](../../../assets/img/Security/安全工具/Volatility/4.png)
![](../../../assets/img/Security/安全工具/Volatility/3.png)
**获取系统中的用户以及密码**
```bash
volatility -f [image] --profile=[profile] hashdump
```
![](../../../assets/img/Security/安全工具/Volatility/6.png)
**dump 明文**
```hash
volatility -f [image] --profile=[profile] lsadump
```
![](../../../assets/img/Security/安全工具/Volatility/58.png)
**注册表 dump 明文**
```bash
volatility -f [image] --profile=[profile] hivelist
volatility -f [image] --profile=[profile] hashdump -y [SYSTEM的地址] -s [SAM的地址]
```
![](../../../assets/img/Security/安全工具/Volatility/59.png)
**查看剪切版中的信息**
```bash
volatility -f [image] --profile=[profile] clipboard
```
**扫一下 ie 浏览记录**
```bash
volatility -f [image] --profile=[profile] yarascan
```
---
### 文件
**查看系统中的文件**
通过 filescan 命令，可以扫描当前状态下的一些文件，例如桌面的文件，或者特定类型的文件，这些都是结合 grep 命令来实现的
```bash
volatility -f [image] --profile=[profile] filescan | grep -E "zip|txt|doc|pdf"
```
![](../../../assets/img/Security/安全工具/Volatility/14.png)
查看桌面的文件
```bash
volatility -f [image] --profile=[profile] filescan | grep "Desktop"
```
![](../../../assets/img/Security/安全工具/Volatility/15.png)
**dump 扫描到的文件**
在上一步中，发现了桌面的一个 flag.txt，那么可以使用 dumpfiles 命令来将文件 dump 出来
```bash
volatility -f [image] --profile=[profile] dumpfiles -Q 0x000000007de00130 --dump-dir ./
# 这里的 -Q 参数是前面扫描时候的第一个参数，标记了文件的转储的物理地址
```
![](../../../assets/img/Security/安全工具/Volatility/16.png)
dump 出的文件默认是 dat 后缀的，可以使用 linux 下的 file 命令来查看获取的文件类型，或者是根据之前扫描文件获取到的文件名来修改后缀
![](../../../assets/img/Security/安全工具/Volatility/17.png)
**转储内存中的进程里 exe 文件**
```bash
volatility -f [image] --profile=[profile] procdump -p [pid] --dump-dir ./
```
![](../../../assets/img/Security/安全工具/Volatility/18.png)
![](../../../assets/img/Security/安全工具/Volatility/19.png)
---
### 网络