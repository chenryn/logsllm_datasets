---
## Page 156
plist中的键。正如你在第4章里看到的那样，Q对于这些类型的行为在本质上是未定义的。从实
GETF总是使用EQ来测试所提供的键是否匹配plist中的键。因此，你一定不能用数字和字符作为
第三个参数，它将在键没有被找到时代替NIL作为返回值。
受一个plist和一个键，返回所关联的值或是在键没有被找到时返回NIL。GETF也接受一个可选的
它看起来像这样：
分别映射到1、2和3的plist就是一个简单的列表(A1 B2C3）。用方框和箭头的形式来表示,
plist只是一个正常的列表，其中带有交替出现的键和值作为列表中的值。例如，一个将A、B和C
能含有与原先列表相同或相反顺序的键值对。例如，你可能得到下面这样的结果：
本将同时含有相同的对象作为键和值，哪怕这些键或值刚好也由点对单元构成也是如此。
构的点对单元，外加那些单元的cAR部分直接引用的点对单元。换句话说，原先的alist和它的副
每个元素的CDR中的值作为键，从而进行反向查询。
数，即RASSOC、RASSOC-IF和RASSOC-IF-NOT，和对应的ASSOC系列函数相似，只是它们使用
在ASSOC-IF-NOT的情况下）传递到指定项上的测试函数的第一个键值对。并且还有另外3个函
满足你的需要时，可以使用ASSOC-IF和ASSOC-IF-NOT函数，其返回CAR部分满足（或不满足，
方面也提供了更大的灵活性。我已经提到了Assoc接受：key和：test关键字参数。当这些还不能
是如此轻量，故而对于小型的表来说，alist可以在性能上超过哈希表。另外，alist在如何做查询
最坏情况下，检测到没有匹配的对将需要ASSOc扫描alist的每一个元素。但由于alist的基本机制
盛
要修改alist，你需要这样写成。
与ASSOC不同，其使用FQL作为默认测试并允许通过：teSt参数提供一个不同的测试函数，
最后，你可以从两个分开的键和值的列表中用函数PAIRLIS构造出一个alist。返回的alist可
函数COPY-ALIST与COPY-TREE相似，除了代替复制整个树结构，它只复制那些构成列表结
不过，plist不像alist那样灵活。事实上，plist仅支持一种基本查询操作，即函数GETF，其接
很明显，使用ASSOc搜索一个alist所花的时间是当匹配对被发现时当前列表深度的函数。在
((astie anea-mau, Kay-mau: suooe) aste ynas) 
和coNS一样，ACONS是一个函数，因此它不能修改用来保存所传递的alist的位置。如果你想
另一类查询表是属性表或plist，你曾经在第3章里用它来表示数据库中的行。从结构上来讲，
CL-USER> (pairlis '(a b c)'(1 2 3))
或者你也可能刚好得到下面这样的效果：
(ste (ane-mau, ay-ma, suo) snd)
AB②C③m
1））
www.TopSage.com
13.3查询表：alist和 plist
139
---
## Page 157
符号的SYMBOL-PLIST上对同一个键使用GETF。
plist，以便用来保存关于该符号的信息。这个plist可以通过函数SYMBOL-PLIST获取到。但你很
键列表的Plist中的所有键/值对。
的开始处重新扫描。例如，下面的函数使用假想的函数process-property有效地处理用于指定
键开始的列表的头部。这可以允许你处理一个属性表，抽取出想要的属性，而无需持续地从列表
需要被搜索的键的列表，并返回多个值：第一个被找到的键、其对应的值，以及一个以被找到的
置成含有除了指定的那一个以外的所有键值对的plist。当给定的键被实际找到时，它返回真。
中添加新的键值对。
GETF的第一个参数被视为将要修改的位置。这样，你可以使用GETF的SETF来向一个已有的plist
性”，即名字和值之间的任意映射。
践上来讲，一个plist中的键差不多总是符号，这是合理的，因为plist最初被发明用于实现符号“属
一
你可以将SETF与GETF一起使用来设置与给定键关联的值。SETF也会稍微特别地对待GETF,
140
(Aay. (Toqu *plist*
CL-USER> (remf *plist* :a)
为了从plist中移除一个键/值对，你可以使用宏REMF，它将作为其第一个参数给定的位置设
CL-USER>
CL-USER>
CL-USER>
CL-USER>
NIL
CL-USER>
*PLIST*
CL-USER>
:A2)
:A1)
(loop while plist do
第13章超越列表：点对单元的其他用法
 (multiple-value-bind (key value tail) (get-properties plist keys)
*plist*
(setf (getf *plist* :a) 2)
*plist*
*plist*
(setf (getf *plist* :a) 1)
(defparameter *plist* ())
(setf plist (cddr tail)))))
www.TopSage.com
：所以Common Lisp还提供了
---
## Page 158
列表，其随后被解构并且适当的值会被绑定到形参列表的对应变量中，然后那些body-form将在
从而将一个原本绑定在单个参数上的列表拆开。其中的list形式被求值一次并且应当返回一个
参数。?并且，如同在宏参数列表中一样，任何参数都可以被替换成一个嵌套的解构参数列表，
形参列表分拆它们的参数列表的方式。DESTRUCTURING-BIND的基本骨架如下所示：
DESTRUCTURING-BIND宏。这个宏提供了一种解构（destructure）任意列表的方式，这类似于宏
REMPROP.
这些绑定的作用下被求值。一些简单的例子如下所示：
13.4
个宏，它将向名字中附加信息，以便同一个宏的其他实例能将其抽取出并用于生成它们的展开式。
号上：
②
① 直接SETF SYMBOL-PLIST也是有可能的。不过这是一个坏主意，因为不同的代码可能出于不同的原因添加了
该参数列表可以包含宏参数列表中支持的任何参数类型，比如&optional、&rest和&key
(destructuring-bind (parameter*) list
向名字中附加任意信息对于任何类型的符号编程来说都是很有用的。例如，第24章将编写一
为了从一个符号的plist中移除属性，你可以使用SYMBOL-PLIST上的REMF或是更便捷的函数
( (-, -, ) )
(destructuring-bind
(destructuring-bind (
(destructuring-bind (x Y z) (list 1 (list 2 20) 3)
(destructuring-bind (x y z)(list 1 2 3)
(destructuring-bind (x (yl y2) z)
(remprop 'symbol 'key) = (remf (symbol-plist 'symbol key))
在第8章里讨论这种参数类型，并且你现在也不需要考虑它。
代码。
不同的属性到符号的plist上。如果一段代码清除了该符号的整个plist，它可能干扰其他向plist中添加自己的属性的
(list :x x :yl yl :
(list :x x :yl yl
(list :x x :yl yl :y2 y2
(list :x x :y y :z z))
body-form*)
 DESTRUCTURING-BIND
(x(yl &optional y2) z)(list 1 (list 2) 3)
:y2
(x (yl &optional y2) z)(list 1 (list 2 20) 3)
Y2
:22)）→
:Z2))
(:X 1:Y (2 20):Z 3)
(:X
www.TopSage.com
:Y 2:Z 3)
→(:X 1:Y1 2 :Y2 20:Z 3)
(list 1 (list 2 20) 3)
(:X 1:Y1 2:Y2 20:Z 3)
13.4
 DESTRUCTURING-BIND
141
---
## Page 159
如何处理文件和文件名这种相对乏味的问题。
在那之前，我还要谈及更多的主题。在关于点对单元的两章相当Lisp化的主题之后，下面将介绍
没有&whole参数存在那样抽取出列表中的指定部分。一个将&whole与DESTRUCTURING-BIND
它会绑定到整个列表形式上。“在一个&whole参数之后，其他参数可以像通常那样出现并且将像
以用在宏参数列表中，这就是&whole。如果被指定，它必须是参数列表中的第一个参数，并且
一起使用的例子如下所示：
① 当一个&whole参数被用在宏参数列表中时，它所绑定的形式是整个宏形式，包括该宏的名字。
142
你将在一个宏里使用&whole参数，它是将在第31章里开发的HTML生成库的一部分。不过，
另外还有一种参数（尽管第8章并未介绍），它既可以用在DESTRUCTURING-BIND中，也可
→(:X3
(destructuring-bind (&whole whole &key xy z) (list :z 1 :y 2 :x 3)
(destructuring-bind (&key x y z) (list :z 1 :y 2 :x 3)
(destructuring-bind (&key x y z) (list :x 1 :y 2 :z 3)
(list :x x :Y y :z z))
第 13章 超越列表：点对单元的其他用法
:Y2
:Z 1:WHOLE (:Z 1:Y 2:X 3))
:whole whole))
→(:X3:Y2:Z1)
www.TopSage.com
---
## Page 160
数：if-does-not-exist来指定不同的行为。三个可能的值是：：error，报错（默认
的函数都可接受参数来修改这些异常情况下的行为。
在第19章里，我将讨论如何从这类错误中恢复。不过眼下有一个更轻量级的解决方案：每个这样
取时无意中遇到了文件结尾。默认情况下，OPEN和READ-*系列函数将在出现这些情况时报错。
组合使用OPEN、READ-LINE和CLOSE，如下所示：
名的字符串。因此，假设/some/file/name.txt是一个文件，那么可以像下面这样打开它：
提供了许多表示文件名的方式，但最简单的方式是使用一个含有以本地文件命名语法表示的文件
后，你可以使用CLOSE函数来关闭它。
后作为一个字符串返回；而READ读取单一的S-表达式并返回一个Lisp对象。当完成了对流的操作
中的一个或多个字符：READ-CHAR读取单个字符；READ-LINE读取一行文本，去掉行结束字符
内容。默认情况下，OPEN返回一个基于字符的输入流，你可以将它传给许多函数以便读取文本
CommonLisp还提供了其他一些只有Lisp才有的功能，比如读写S-表达式。
个称为路径名（pathname）的抽象，它们以一种与操作系统无关的方式来管理文件名。另外，
务，CommonLisp的I/O机制与其他语言相似。CommonLisp为读写数据提供了一个流的抽象和一
14.1
如果你想打开一个可能不存在的文件而又不想让OPEN报错，那么可以使用关键字参
OPEN的唯一必要参数是需要读取的文件名。如同你将会在14.6节里看到的那样，CommonLisp
最基本的文件I/O任务是读取文件的内容。可以通过OPEN函数获得一个流并从中读取文件的
当然，在试图打开和读取一个文件时可能会出现一些错误。该文件可能不存在或者可能在读
你可以把返回对象作为任何读取函数的第一个参数。例如，为了打印文件的第一行，你可以
(let((in (open "/some/file/name.txt")))
(open"/some/file/name.txt")
(closein）)
在少数基本的文件相关的任务上：读写文件以及列出文件系统中的文件。对这些基本任
读取文件数据
ommonLisp提供了一个功能丰富的用于处理文件的函数库。在本章里，我将把重点放
第14章
文件和文件I/C
www.TopSage.com
大家网
---
## Page 161
由于S-表达式被设计成是供人编辑的，所以它也是用于诸如配置文件等事务的良好格式。
式或编写一个解析器。它们甚至可以让你自由地添加注释，如同前面的示例所演示的那样。并且
件中保存一点数据时，PRINT和RBAD就提供了一个做这件事的简单途径，而无须设计一套数据格
你可以像下面这样读取这些表达式：
回由S-表达式代表的Lisp对象。例如，假设/some/file/name.txt带有下列内容：
它用于读取Lisp源代码。当每次被调用时，它会读取单一的S-表达式，跳过空格和注释，然后返
返回它们第三个参数的值，默认为NIL。因此，可以像下面这样打印一个文件的所有行：
指定当函数在文件结尾处被调用时是否应该报错。如果该参数为NIL，它们在遇到文件结尾时将
NIL来代替一个流。这样，你就可以改变前面的示例来处理文件可能不存在的情况。
值)；:create，继续进行并创建该文件，然后就像它已经存在那样进行处理；NIL，让它返回
144
①尽管如此，注意Lisp读取器知道如何跳过注释，它会完全跳过它们。这样，如果你使用READ来读取一个含有注释
CL-UsER> (defparameter *s* (open "/some/file/name.txt"))
如同第3章所述，你可以使用PRINT以“可读的”形式打印Lisp对象。这样，每当你需要在文
在这三个文本读取函数中，READ是Lisp独有的。这跟提供了REPL中R部分的函数是同一个，
(let ((in (open "/some/file/name.txt" :if-does-not-exist nil)))
CL-USER>(read *s*)
读取函数，即READ-CHAR、READ-LINE和READ，都接受一个可选的参数，其默认值为真并
(((tu astxa-aou-saop-gt: "ax'aweu/as/awos/" uado) ut)) za)
CL-USER>(close *s*
astring"