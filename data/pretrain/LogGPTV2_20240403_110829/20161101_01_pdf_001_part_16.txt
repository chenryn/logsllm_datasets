 log_rotation_age = 1d -- 表示一天建立一个日志文件
 log_rotation_size = 10MB -- 表示大于10MB后新建一个日志文件
 log_min_duration_statement = 1000ms -- 记录运行时间超过1秒的SQL
 log_checkpoints = on -- 记录checkpoint的运行情况
 log_lock_waits = on -- 记录锁等待时间
 log_statement = 'ddl' -- 记录DDLSQL
Server Configuration
 track_activity_query_size = 2048 -- 记录SQL长度最大限度改为2048, 可以记录更长的SQL
 autovacuum = on -- 开启自动vacuum
 log_autovacuum_min_duration = 0 -- 记录所有的auto vacuum动作
 deadlock_timeout = 1s -- 死锁检测的最小值为1秒, 如果系统因为检测死锁造成压力较大
可以调大这个值
 custom_variable_classes = 'pg_stat_statements' -- pg_stat_statements模块的定制参数
 pg_stat_statements.max = 1000
 pg_stat_statements.track = all
 危险设置, 将导致数据库CRASH后不可恢复或数据不一致.
 fsync = off
 full_page_writes = off
Server Configuration
 模块参数
 http://www.postgresql.org/docs/9.1/static/runtime-config-custom.html
 开发参数 -- 一般用于调试, 恢复等特殊场景.
 http://www.postgresql.org/docs/9.1/static/runtime-config-developer.html
 命令行选项
Routine Database
Maintenance Tasks
 Routine Vacuuming
 为什么要vacuum
PostgreSQL的MVCC机制, 有很好的读些并发性以及极高的事务隔离性, 但是由于数据更新
和删除操作后并没有在物理上从PAGE里面删除, 所以需要一种机制来回收这些费数据.否则
会导致膨胀.一般的做法是让系统自动回收, 开启autovacuum.
Preventing Transaction ID Wraparound Failures.
 autovacuum
 如何跟踪哪些PAGE有脏数据需要回收
PostgreSQL 8.3以及更老的版本
 max_fsm_pages
 Six bytes of shared memory are consumed for each page slot.
 max_fsm_relations
 Roughly seventy bytes of shared memory are consumed for each slot.
 可能溢出, 跟踪不到.
PostgreSQL 8.4以及更新的版本
 fsm, vm文件(对应每个对象). 不会溢出, vm(no dead tuple pages)加入后可以大大降
低扫描的块的数量.
Routine Database
Maintenance Tasks
 Routine Vacuuming
 fsm结构
PostgreSQL8.4 Free Space Map Principle
http://blog.163.com/digoal@126/blog/static/1638770402010411115555401/
 autovacuum在什么情况下会被触发
autovacuum = on
autovacuum_vacuum_threshold = 50
autovacuum_analyze_threshold = 50
autovacuum_vacuum_scale_factor = 0.2
autovacuum_analyze_scale_factor = 0.1
vacuum threshold = vacuum base threshold + vacuum scale factor * number of tuples
analyze threshold = analyze base threshold + analyze scale factor * number of tuples
-- Preventing Transaction ID Wraparound Failures.
Autovacuum is invoked on any table that might contain XIDs older than the age
specified by the configuration parameter autovacuum_freeze_max_age. (This will
happen even if autovacuum is disabled.)
Routine Database
Maintenance Tasks
 Routine Vacuuming
 autovacuum在什么情况下会被触发
If for some reason autovacuum fails to clear old XIDs from a table, the system will
begin to emit warning messages like this when the database's oldest XIDs reach ten
million transactions from the wraparound point:
WARNING: database "mydb" must be vacuumed within 177009986 transactions
HINT: To avoid a database shutdown, execute a database-wide VACUUM in
"mydb".
If these warnings are ignored, the system will shut down and refuse to start any new
transactions once there are fewer than 1 million transactions left until wraparound:
ERROR: database is not accepting commands to avoid wraparound data loss in
database "mydb"
HINT: Stop the postmaster and use a standalone backend to VACUUM in "mydb".
Routine Database
Maintenance Tasks
 Routine Vacuuming
 不同的触发场景分别扫描哪些块
一个表对应的系统表pg_class中的relfrozenxid字段的值表示这个表所有记录中存
在的最老的记录. 只有发生扫全表的vacuum后(请区别于VACUUM FULL),才会
更新这个值.
当执行vacuum时, 决定要做什么?, 首先它会获取表的年龄
age(pg_class.relforzenxid), 用这个年龄和下面的参数进行比较.
vacuum根据vacuum_freeze_min_age参数的值来决定要把哪些行的版本号更新为
FrozenXID(比任何版本号都老的版本号).
vacuum根据vacuum_freeze_table_age参数的值来决定是否要扫表的所有块, 也就
是扫完后可以更新pg_class中的relfrozenxid字段.
还有两种情况是vacuum freeze, 或所有PAGE都有dead row版本需要扫描.
 The whole table is scanned when
 relfrozenxid is more than vacuum_freeze_table_age transactions old,
when VACUUM's FREEZE option is used,
 or when all pages happen to require vacuuming to remove dead row
versions.
Routine Database
Maintenance Tasks
 Routine Vacuuming
 表级别的autovacuum参数
Routine Database
Maintenance Tasks
 Routine Reindexing
 为什么要reindex b-tree 索引
频繁的non-HOT Update后b-tree索引会膨胀, B-tree index pages that have become
completely empty are reclaimed for re-use.
一个全新的btree索引和一个频繁non-HOT Update后的b-tree索引的page逻辑顺序
和物理顺序顺性不一样, 效率也不一样.
concurrently rebuild bloated indexes
http://blog.163.com/digoal@126/blog/static/163877040201231781923116/
 为什么要reindex non-b-tree 索引
如果发现non-b-tree索引膨胀比较厉害, 并且性能下降严重的时候需要reindex他
们.
 监控
 http://bucardo.org/check_postgres/check_postgres.pl.html
 Use PostgreSQL collect and analyze Operation System statistics
 http://blog.163.com/digoal@126/blog/static/163877040201211354145701/
Backup and Restore
 备份数据或SQL
 数据或SQL的备份, 支持不同版本的备份和恢复, 如果要将低版本的数据备份后还原
到高版本的数据库中, 一般建议使用高版本的pg_dump备份, 高版本的pg_resotre还
原.
 pg_dump
输出支持两种格式, 一种是纯文本格式, 另一种是PostgreSQL bin格式.
pg_dump [connection-option...] [option...] [dbname]
 pg_dumpall
输出仅支持纯文本格式.
pg_dumpall [connection-option...] [option...]
 COPY
类似纯文本格式的备份, 但是可以支持定制化备份列和行的信息.
Backup and Restore
 备份数据或SQL
 pg_dump
Backup and Restore
 备份数据或SQL
 pg_dump
Backup and Restore
 备份数据或SQL
 pg_dumpall
Backup and Restore
 备份数据或SQL
 pg_dumpall
Backup and Restore
 备份数据或SQL
 COPY
Backup and Restore
 备份数据文件, 增量备份, 可用于做基于时间点的恢复, 基于xid的恢复, 基于定制还原点的恢复
 有效备份数据文件的前提
full_page_writes = on
fsync = on
wal_level = archive 或 hot_standby
archive_mode = on
archive_command = 'cp %p /backup/%f'
 pg_start_backup -- 排他. 同一时间只允许一个pg_start_backup运行.
 备份$PGDATA, pg_tblspc中软链接对应的表空间目录
 pg_xlog目录不需要备份
 pg_stop_backup -- 停止备份.
 CHECKPOINT;
 pg_switch_xlog();
 备份在备份过程中产生的wal_archive
 pg_basebackup -- 一般被用于创建standby.
Backup and Restore
 执行pg_start_backup后, $PGDATA目录生成一个backup_label文件
 文件内容类似
 START WAL LOCATION: 0/B0000020 (file 00000001000000000000002C)
 CHECKPOINT LOCATION: 0/B0000058
 BACKUP METHOD: pg_start_backup
 START TIME: 2012-05-03 12:07:32 CST
 LABEL: test
 执行pg_stop_backup后会在pg_xlog中生成一个备份完成标记的文件, 文件及内容如下
Backup and Restore
 pg_basebackup
Backup and Restore
 xlog.c
Backup and Restore
 还原
 纯文本备份解读
 postgres@db-172-16-3-150-> pg_dump -F p -f ./test.dmp.20120503 -C -E UTF8 -b -h 127.0.0.1 -U postgres
test
 postgres@db-172-16-3-150-> cat test.dmp.20120503
Backup and Restore
 纯文本备份解读
Backup and Restore
 纯文本备份解读
Backup and Restore
 纯文本备份解读
Backup and Restore
 使用psql -f还原纯文本格式的备份
 postgres=# drop database test;
 DROP DATABASE
 postgres@db-172-16-3-150-> psql -f ./test.dmp.20120503
 使用pg_restore还原BIN格式的备份
 postgres@db-172-16-3-150-> pg_dump -F c -f ./test.dmp.20120503.c -C -E UTF8
-b -h 127.0.0.1 -U postgres test
 postgres=# drop database test;
 DROP DATABASE
 postgres@db-172-16-3-150-> pg_restore -v -d postgres -C -F c -h 127.0.0.1 -U
postgres ./test.dmp.20120503.c
 pg_restore: connecting to database for restore
 pg_restore: creating DATABASE test
 pg_restore: connecting to new database "test"
 pg_restore: connecting to database "test" as user "postgres"
 pg_restore: creating SCHEMA public
Backup and Restore
 使用pg_restore还原BIN格式的备份
 pg_restore: creating COMMENT SCHEMA public
 pg_restore: creating EXTENSION plpgsql
 pg_restore: creating COMMENT EXTENSION plpgsql
 pg_restore: creating FUNCTION f_void()
 pg_restore: creating SEQUENCE seq
 pg_restore: executing SEQUENCE SET seq
 pg_restore: creating TABLE userinfo
 pg_restore: creating VIEW v_test
 pg_restore: restoring data for table "userinfo"
 pg_restore: creating CONSTRAINT userinfo_pkey
 pg_restore: setting owner and privileges for DATABASE test
 pg_restore: setting owner and privileges for SCHEMA public
 pg_restore: setting owner and privileges for COMMENT SCHEMA public
 pg_restore: setting owner and privileges for ACL public
 pg_restore: setting owner and privileges for EXTENSION plpgsql
Backup and Restore
 使用pg_restore还原BIN格式的备份
 pg_restore: setting owner and privileges for COMMENT EXTENSION plpgsql
 pg_restore: setting owner and privileges for FUNCTION f_void()
 pg_restore: setting owner and privileges for SEQUENCE seq
 pg_restore: setting owner and privileges for SEQUENCE SET seq
 pg_restore: setting owner and privileges for TABLE userinfo
 pg_restore: setting owner and privileges for VIEW v_test
 pg_restore: setting owner and privileges for TABLE DATA userinfo
 pg_restore: setting owner and privileges for CONSTRAINT userinfo_pkey
 通过编辑TOC文件定制还原
 http://blog.163.com/digoal@126/blog/static/16387704020123129649342/