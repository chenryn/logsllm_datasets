---
title:  pair_probabilities_fl()
description: This article describes the pair_probabilities_fl() user-defined function in Azure Data Explorer.
ms.reviewer: andkar
ms.topic: reference
ms.date: 03/13/2023
---
# pair_probabilities_fl()
Calculate various probabilities and related metrics for a pair of categorical variables.
The function `pair_probabilities_fl()` is a [UDF (user-defined function)](../query/functions/user-defined-functions.md) that calculates the following probabilities and related metrics for a pair of categorical variables, A and B, as follows:
* P(A) is the probability of each value *A=a*
* P(B) is the probability of each value *B=b*
* P(A|B) is the conditional probability of *A=a* given *B=b*
* P(B|A) is the conditional probability of *B=b* given *A=a*
* P(A&#8746;B) is the union probability (*A=a* or *B=b*)
* P(A&#8745;B) is the intersection probability (*A=a* and *B=b*)
* The **lift metric** is calculated as P(A&#8745;B)/P(A)*P(B). For more information, see [lift metric](https://en.wikipedia.org/wiki/Lift_(data_mining)).
  * A lift near 1 means that the joint probability of two values is similar to what is expected in case that both variables are independent.
  * Lift >> 1 means that values cooccur more often than expected under independence assumption.
  * Lift **Jaccard similarity coefficient** is calculated as P(A&#8745;B)/P(A&#8746;B). For more information, see [Jaccard similarity coefficient](https://en.wikipedia.org/wiki/Jaccard_index).
  * A high Jaccard coefficient, close to 1, means that the values tend to occur together.
  * A low Jaccard coefficient, close to 0, means that the values tend to stay apart.
## Syntax
`pair_probabilities_fl(`*A*, *B*, *Scope*`)`
[!INCLUDE [syntax-conventions-note](../../includes/syntax-conventions-note.md)]
## Parameters
|Name|Type|Required|Description|
|--|--|--|--|
|*A*|scalar| :heavy_check_mark:|The first categorical variable.|
|*B*|scalar| :heavy_check_mark:|The second categorical variable.|
|*Scope*|scalar| :heavy_check_mark:|The field that contains the scope, so that the probabilities for *A* and *B* are calculated independently for each scope value.|
## Function definition
You can define the function by either embedding its code as a query-defined function, or creating it as a stored function in your database, as follows:
### [Query-defined](#tab/query-defined)
Define the function using the following [let statement](../query/let-statement.md). No permissions are required.
> [!IMPORTANT]
> A [let statement](../query/let-statement.md) can't run on its own. It must be followed by a [tabular expression statement](../query/tabular-expression-statements.md). To run a working example of `pair_probabilities_fl()`, see [Example](#example).
```kusto
let pair_probabilities_fl = (tbl:(*), A_col:string, B_col:string, scope_col:string)
{
let T = materialize(tbl | extend _A = column_ifexists(A_col, ''), _B = column_ifexists(B_col, ''), _scope = column_ifexists(scope_col, ''));
let countOnScope = T | summarize countAllOnScope = count() by _scope;
let probAB = T | summarize countAB = count() by _A, _B, _scope | join kind = leftouter (countOnScope) on _scope | extend P_AB = todouble(countAB)/countAllOnScope;
let probA  = probAB | summarize countA = sum(countAB), countAllOnScope = max(countAllOnScope) by _A, _scope | extend P_A = todouble(countA)/countAllOnScope;
let probB  = probAB | summarize countB = sum(countAB), countAllOnScope = max(countAllOnScope) by _B, _scope | extend P_B = todouble(countB)/countAllOnScope;
probAB
| join kind = leftouter (probA) on _A, _scope           // probability for each value of A
| join kind = leftouter (probB) on _B, _scope           // probability for each value of B
| extend P_AUB = P_A + P_B - P_AB                       // union probability
       , P_AIB = P_AB/P_B                               // conditional probability of A on B
       , P_BIA = P_AB/P_A                               // conditional probability of B on A
| extend Lift_AB = P_AB/(P_A * P_B)                     // lift metric
       , Jaccard_AB = P_AB/P_AUB                        // Jaccard similarity index
| project _A, _B, _scope, bin(P_A, 0.00001), bin(P_B, 0.00001), bin(P_AB, 0.00001), bin(P_AUB, 0.00001), bin(P_AIB, 0.00001)
, bin(P_BIA, 0.00001), bin(Lift_AB, 0.00001), bin(Jaccard_AB, 0.00001)
| sort by _scope, _A, _B
};
// Write your query to use the function here.
```
### [Stored](#tab/stored)
Define the stored function once using the following [`.create function`](../management/create-function.md). [Database User permissions](../management/access-control/role-based-access-control.md) are required.
> [!IMPORTANT]
> You must run this code to create the function before you can use the function as shown in the [Example](#example).
```kusto
.create-or-alter function with (folder = "Packages\\Stats", docstring = "Calculate probabilities and related metrics for a pair of categorical variables")
pair_probabilities_fl = (tbl:(*), A_col:string, B_col:string, scope_col:string)
{
let T = materialize(tbl | extend _A = column_ifexists(A_col, ''), _B = column_ifexists(B_col, ''), _scope = column_ifexists(scope_col, ''));
let countOnScope = T | summarize countAllOnScope = count() by _scope;
let probAB = T | summarize countAB = count() by _A, _B, _scope | join kind = leftouter (countOnScope) on _scope | extend P_AB = todouble(countAB)/countAllOnScope;
let probA  = probAB | summarize countA = sum(countAB), countAllOnScope = max(countAllOnScope) by _A, _scope | extend P_A = todouble(countA)/countAllOnScope;
let probB  = probAB | summarize countB = sum(countAB), countAllOnScope = max(countAllOnScope) by _B, _scope | extend P_B = todouble(countB)/countAllOnScope;
probAB
| join kind = leftouter (probA) on _A, _scope           // probability for each value of A
| join kind = leftouter (probB) on _B, _scope           // probability for each value of B
| extend P_AUB = P_A + P_B - P_AB                       // union probability
       , P_AIB = P_AB/P_B                               // conditional probability of A on B
       , P_BIA = P_AB/P_A                               // conditional probability of B on A
| extend Lift_AB = P_AB/(P_A * P_B)                     // lift metric
       , Jaccard_AB = P_AB/P_AUB                        // Jaccard similarity index
| project _A, _B, _scope, bin(P_A, 0.00001), bin(P_B, 0.00001), bin(P_AB, 0.00001), bin(P_AUB, 0.00001), bin(P_AIB, 0.00001)
, bin(P_BIA, 0.00001), bin(Lift_AB, 0.00001), bin(Jaccard_AB, 0.00001)
| sort by _scope, _A, _B
};
```
---
## Example
The following example uses the [invoke operator](../query/invoke-operator.md) to run the function.
### [Query-defined](#tab/query-defined)