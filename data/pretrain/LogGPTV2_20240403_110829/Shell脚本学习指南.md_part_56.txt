pgpgpg -ka/tmp/pgp-0xD333cBA1.tmp.21643
rm -f/tmp/pgp-0xD333cBA1.tmp.21643
注15：可在ftp://ftp.gnu.org/gnu/wge/取得
www.TopSage.com
---
## Page 332
320
第10章
一些密钥可同时用于PGP与GnuPG，但有很多是不可以的，所以提醒会包含两者。因
为gpg与pgp的命令行选项各异，而pgP先开发，9Pg则来自一个包装程序p9P9Pg，
其采用与pgp相同的选项，但却是调用gpg执行任务。在此pqpgpg-ka意同于gpg
-import.
getpubkey可以将取得的密钥加人到你的GnuPG与/或PGP密钥环中，只要花点剪切/
粘贴的气力。gPg则提供一次到位的方式，但它只更新你的GnuPG密钥环：
$ gpg --keyaerver pgp.mdt.odu --searcb-keys 0xD333cBA1
gpg: searching for *0xD333CBA1* fron HKP server pgp mit.edu
Keys 1-6 of 6 for *0xD333cBA1*
(1)
Jin Meyering 
1024 bit DSA key D333CBA1, cre8ted 1999-09-26
Enter number (s), N) ext, or Q)uit > 1
aodu  Duxee wr. Aex oTnd :ca Kex :5d5
1passaooad 1aqunu [eaog :bd6
9Pg:
inported: 1
-keyserver选项只有第一次才需要，不过你之后还是可以用它来指定不同的服务器。
除了密钥ID以外，--search-keys选项还可以接受电子邮件地址、用户名称或个人姓
名。
10.8
3小结
本章我们介绍的是如何使用1s与stat列出文件与文件meta数据，还有如何使用touch
设置文件时间戳。touch可显示有关日期时间相关的信息以及在许多现行系统上的范围
限制。
我们说明了如何以Shell的进程ID变量SS，搭配mktemp工具并自已动手取出随机数
据流样本，建立唯一的临时性文件名称。计算机的世界可以说是一个充满敌意的环境，
所以可通过此方式给予临时性文件具有唯一性与唯一访问性，让你的程序可以免于遵受
攻击。
locate与slocate命令可用于定期更薪的数据库（是经由完整地扫描文件系统所构建
的）中，快速地壹寻文件名称。当你知道全部或部分的文件名，且只想知道它在文件系
统里的什么位置，那么使用locate就是最好的方式，除非文件是在查找数据库构建完成
之后薪产生的。
type命令是找出有关Shell命令相关信息的好方法，我们在第8章提供的pathfind脚
本，则是提供较一般性的解决方案，便于找出特定目录路径下的文件。
www.TopSage.com
---
## Page 333
文件处理
321
我们花了很多篇幅探讨功能强大的find命令，它采用暴力破解遍历文件系统，寻找与
用户指定条件匹配的文件。尽管如此，我们仍留下它许多未曾提及的性能，待你自行从
使用手册或其他更好的GNUfind文件里深入了解它。
我们简短说明了xargs的处理方式，这是另一个用以处理文件列表的命令，通常出现在
上游为find的管道里。它除了能克服很多系统上命令行长度的限制，还能让你在管道
里括入额外的过滤器，以便进一步处理文件。
df与du命令会报告文件系统与目录树里的空间使用状态。把它们学好，因为你会经常
用到它们。
最后，我们描述比较文件的命令、应用补丁、产生文件校验和以及验证数字签名。
www.TopSage.com
---
## Page 334
TopSage.com
第11章
扩展实例：合并用户数据库
到现在为止，我们已经一路学习、探索，也看过许多Shell脚本了。本章的目标是将前
面所学的，结合Shell程序编写，挑战中等难度的任务。
11.1问题描述
UNIX的密码文件/etc/passwd已经在本书出现过很多次，系统管理者的工作多半也都
是围绕着密码文件（还有相对的组文件/etc/group）的操作。格式如下所示（注1）：
to1stoy :x:2076 :10:Leo To1stoy : /home/to1stoy: /bin/bash
有7个字段：用户名称（username）、加密密码、用户ID编号（UID）、组ID编号（GID）、
全名、根目录以及登录Shell。字段为空不是个好做法：特别是第2个字段，如果为空，
用户无须密码即可登录，且任何可以访问系统或其终端的人都可以该用户身份登录，如
果第7个字段（Shell）为空，则UNIX默认为BourneShell一/bin/sh。
如我们在附录B里所讨论到的：用户与组ID编号，都为UNIX在访问文件时用来检查权
限所用。如果两个用户具有不同的名称却拥有相同的UID编号，则就UNIX来说，它们
是相同的（identical）。这种情况很少见，不过两个账号拥有相同UID编号是不对的。特
好是相同的用户（tolstoy），否则有可能出现相当严重的安全性问题。
现在，随我们回到多年前（大约1986年）吧，那时Sun的NFS正越来越受欢迎，还能
应用在非Sun的系统上。同时，我们之中有一个系统管理员，手下有两台为4.2BSD
注1：
BSD系统还使用/etc/master.Dasswd文件，它其有三个额外的字段：用户的登录类
别、要码变受时润以及账号过期时间，这些字段的位里就在GID字段与全名字投之间。
322
www.TopSage.com
---
## Page 335
扩展实例：合并用户数据库
323
UNIX的计算机系统。这两个系统以TCP/IP相互通信，但未使用NFS。然而，新的OS
厂商已规划要让4.3BSD+NFS在这些系统上可使用，有许多用户在这两台系统上都
有账号，基本上，用户名称都一样，但UID却不同！这些系统很快就要通过NFS共享文
件系统：它们的UID空间要被合并是势在必行的。我们的任务就是编写一系列的脚本，
功能是：
将两个系统里的/etc/passwd文件合井，这是为了确保来自这两台系统的所有用
户都具有独一无二的UID编号。
针对已存在的UID、但被应用在不同的用户身上的情况，则将其所有文件的所有权
变更为正确用户。
这就是本章的任务，我们从零开始（原始的脚本太长，它只是偶尔的兴趣，并且像是在
做学术研究）。这里的问题不单单是学术性的，试想：公司里有两个原本是分开的部门，
现在是合并的时候，用户可能在多个部门的系统里都有账号。如果你是系统管理者，就
有可能面临这样的任务。我们觉得解决这个间题应该是相当有趣的。
11.2密码文件
我们就叫这两个假定的UNIX系统为u1与u2吧i例11-1呈现的是u1的/etc/passwd：
例11-1：ul的/etc/passwd 文件
root :x:0:0:root :/root 1/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daenon:x:2:2:daenon: /sbin:/sbin/no1ogin
adn:x:3:4:adm:/var/adm: /8bin/no1ogin
to18toy:x:2076:10:Leo Tolstoy1/hone/tolstoy:/bin/bash
camus :x:112 :10:A1bert Camu8:/home/camu8: /bin/bash
Shancockix1200:10 :John Kancock:/home/jhancock:/bin/bash
ben:x:201:10:Ben Prank1in:/home/ben:/bin/bash
abe:x:105:10:Honest Abe Lincoln:/home/abe:/bin/besh
dorothy:x:110:10:Dorothy Gale:/hone/dorothy:/bin/bash
而例 11-2 为 u2的 /etc/passwd;
例11-2：u2 的/etc/passwd 文件
root :x:0:0:root :/root1/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daenon ;x:2: 2 :daenon: /8bin:/8bin/no1ogin
adm:x:3:4:adm:/var/&dm:/sbin/no1ogin
george:x:1100:10:George Washington:/home/george1/bin/bash
betay :x:1110:10:Bet8y Ro881/home/betsy:/bin/bash
jhancock1x1300:10:John Kancock:/home/jhancock: /bin/bash
www.TopSage.com
---
## Page 336
324
第11章
t§ 1x1105:10:Thomas Jefferson:/hone/t : /bin/bash
ben:x:301:10:Ben Franklin:/home/ben:/bin/bash
toto:x:110:10:roto Gale:/home/toto:/bin/bash
如果你仔细审视这些文件，就会发现我们程序所必须处理的可能情况很多：
用卢在两个系统上都提有相同的用户名称（username）与UiD.这多半都是管理性
账号，例如root和bin。
·用户的username与UID只有一台系统里有，另一台没有。这种情况在合并时，不
会有问题，
·用户在两台系统上拥有相同的username，但UID不同。
用户在两台系统上拥有相同的UID，但username不同。
11.3合并密码文件
第一参就是先建立合并的/etc/passwd文件。这句话包含几个子步骤：
1.直接地物理合并文件，将重复的username聚在一起，产生的结果将成为下个步骤
的输入。
2.将合并文件分割为三份，供而后处理：
具相同username与UID的用户放进uniquel文件。未重复的用户username也
放入此文件。
·具相同username，但不同UID的用户，放人第二个文件：dupusers。
其相同UID但不同username的用户放入第三个文件：dupids。
3.建立已使用中具唯一性的所有UID编号的列表。这是为了日后出现冲突而我们必须
变更UID时（例如，用户jhancock与ben），可用来寻找新的、未使用的UID编
号。
4.编写另一个程序，搭配使用中UID编号的列表，以便我们寻找新的、未使用的UID
编号。
5.建立用以产生最后/etc/passwd记录的三项组合（username、旧的UID、新的UID）
列表。还有最重要的：产生命令，以变更文件系统中文件的所有权。
与此同时，针对原来就拥有数个UID的用户以及同一UID拥有多个用户，建立最
后的密码文件项目。
6.建立最终密码文件。
www.TopSage.com
---
## Page 337
扩展实例：合并用户数据库
7.
建立变更文件所有权的命令列表，并执行它，这部分必须谨慎处理，有很多的地方COI11
必须小心规划。
另外，在这里提供的所有程序代码，前提假设都是在username与UID不会重复被使用
超过两次之下运行的。实际上这不应该是个问题，但也值得你深思，将来有一天，你可
能会遇到比这更复杂的情况。
11.3.1根据管理性切分用户
合并密码文件不难，两个文件名分别为ul.passwd与u2.passwd，我们以sort命令
完成这件事，再搭配tee存储文件，并同时将其打印到标准输出以便能够看到：
S sort u1.passwd u2.passwd 1 tee merge1
abe:x:105:10:Honest Abe Linco1n:/home/abe:/bin/bash
adm:x:3:4:adm:/var/adm:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
ben:x1201:10:Ben Frank1in:/hone/ben:/bin/bash
ben:x:301:10:Ben Frank1in:/home/ben:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
betsy:x:1110:10:Betsy Ross:/home/betsy:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
camus:x:112:10:A1bert Camus:/home/camus:/bin/bash
daemon:x:2:2:daemon:/ebin:/sbin/nologin
dorothy:x:110:10:Dorothy Gale:/home/dorothy:/bin/bash
jhancock:x:200:10:John Hancock:/home/jhancock:/bin/bash
george1x:1100:10:George Washington:/home/george:/bin/bash
jhancock:x:300:10:John Hancock:/home/jhancock:/bin/bash
root1x:0:0:root:/root:/bin/bash
root:x:0:0:xoot :/root:/bin/bash
tj:x:105:10:Thomas Jefferson:/home/t5:/bin/bagh
tolstoy:x:2076:10:Leo To1stoy:/home/to1stoy:/bin/bash
toto:x:110:10:Toto Gale:/home/toto:/bin/bash
例11-3呈现的是splitout.awk，该脚本的功能是将合并后的文件切分为三个新文件
名，分别为 dupusers、dupids以及unique1。
例11-3：splitout.awk程序
#1/bin/awk -f
user:passwd:uid:gid:1ong name:homedir:She11
$1
2$
$3$4
S$
$6
49
（.1, = S& ） NI088
name []
#uid[]
以uid 为索引
如果出现重复，决定其配置
www.TopSage.com
---
## Page 338
326
第11章
it($1in name)（
if ($3 in uid)
：
名称与uid一致，什么事都不微
else {:
print name[$1]>*dupusers*
asndnp， *dupids*:
print so > *dupids*
delete uid[$3]
除具有相同uid、不同名称的已存储项目
remove_name_by_uid($3)
} elee
nane[$1] = uid($3] = $0
第一次看到这条记录
END (
for (i in name)
print nane[1] >
-TenBTun,
close(“unique1*)
[,sxasndrp,)aso[o
(sptdnp,)asoto
function
re_uid_by_name (n,
for (i in uid) (
(1,‘ *[1Pn)aFtds
1f（f[2] ss n）（
[T]pn aqatap
break