and non-technical description of a potential negative consequence
and (ii) they should be given from a “position of authority” [30]. In
addition to the content, the design matters as well, as shown in two
separate instances: First, by Akhawe and Felt [7] who compared
SSL warnings from two different web browsers and showed that
users of one browser proceeded to potentially malicious websites
twice as often as the users of the other web browser; second, by
Bravo-Lillo et al. [11] who showed that by changing the user inter-
face (UI) elements in the warning to highlight the most important
elements for the users, they can reduce by half the installation rate
of potentially malicious apps.
When looking at what motivates users for act or ignore security
warnings and advice, several studies point out that the most impor-
tant factors are the perceived security/convenience trade-off and the
perceived risk of pursuing potentially dangerous actions [20, 43, 51].
For instance, Fagan and Khan [20] show that most users who follow
a security advice do so for security benefits, whereas those who do
not follow it do so to avoid an inconvenience mostly related to the
lack of time.
2.3 File Integrity Verification
Several works have studied, by means of online surveys, the security
and usability of different fingerprint representations for authenti-
cation and integrity verifications. Hsiao et al. have compared the
speed and accuracy of hash verification with various textual and
visual representations [26]. Their between-subjects online study
with 436 participants is the first to show that users struggle with
comparing long fingerprints. More recently, Dechand et al. have
studied the performance and usability of six textual fingerprint rep-
resentations [39]. Their online experiment with 1,047 participants
demonstrates that the state-of-the-art hexadecimal representation
is prone to partial pre-image attacks more than others, with more
than 10% of attacks being missed by the users. Similarly, Tan et
al. evaluate the usability and security of eight textual and visual
fingerprint representations [44]. The results of their 661-participant
experiments suggest that, when security is paramount, the best
strategy is to remove the human from the loop and automate the
verification process, which the authors did not test.
Research on secure messaging also provides us with relevant
findings on the usability and security of fingerprints for authen-
ticating the communicating entities. In their systematization of
knowledge on secure messaging, Unger et al. emphasize the usabil-
ity and adoption limitations of manual fingerprint verification [46].
Moreover, they mention short authentication strings, which rely
on truncated cryptographic hashes, as a more usable alternative to
fingerprints. In a 60-participant study on secure communication
Session 6D: Usable 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada1258CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Mauro Cherubini et al.
tools, Abu-Salma et al. show that fingerprints are not understood by
participants, thus indirectly hindering the adoption of such tools [6].
Vaziripour et al. evaluate the usability of the authentication pro-
cesses in three popular messaging applications (WhatsApp, Viber,
Facebook Messenger) through a two-phase study involving 36 pairs
of participants [19]. These participants notably report that finger-
print strings are too long, and some WhatsApp users appreciate
being able to scan QR codes instead of having to compare long
digit strings. Note that in these contexts, unlike for web down-
loads, automating fingerprint comparison is not possible because
fingerprints usually come from a different channel. On the practical
side, a number of programs (including browser extensions [1, 2])
to compute and verify checksums with graphical user interface are
available. Yet, they only enable users to compute checksums, not to
automatically verify them against those extracted from webpages.
Finally, digital certificates can be used to certify the authenticity
and integrity of programs. Such a solution, however, has shortcom-
ings including the fact that certificates are costly, that the problem
of certificate validation remains, and that private keys (of devel-
opers and certification authorities) can be compromised [4, 48].
In fact, digital certificates (used for code-signing) do not provide
the same guarantees that checksums do: Certificates guarantee
that the downloaded files have been produced by certain develop-
ers, whereas checksums guarantee that the downloaded files are
those the website administrators intended to point to. Therefore,
checksums do not provide protection in the case where a malicious
website administrator includes a link to a corrupted version of a
program (e.g., Transmission). And certificates do not provide pro-
tection in the case where a hacker replaces a program file with a
corrupted version of the program signed with the (valid) account
of a malicious developer (or with a stolen account).
In our work, we focused on one aspect that was neglected by
prior research: What is the behavior of the users when they are
asked to verify file integrity? Instead of testing different design of
the checksum, we focused on the process by which participants
were comparing a checksum with the output of the hash functions
and their overall understanding of it. This point is highly relevant
for this area of research as finding that people have a hard time
understanding the whole idea behind checksum, like we did, would
make automating the verification process a more secure solution
over designing simpler checksums. In summary, we go beyond
the sole investigation of manual fingerprint comparison, and we
consider the overlooked context of web download integrity. We also
employ eye-tracking techniques to gain a deeper understanding of
how people perform fingerprint/checksum comparisons.
2.4 Automating Integrity Verification
In certain contexts, checksum verification is automated. It is the
case with W3C’s subresource integrity, described below in the back-
ground section. It is also the case of package managers such as
brew (macOS) or aptitude (Linux), which enable users to download
packages and programs from so-called repositories. They automati-
cally compare the checksums of the downloaded packages to those
specified in the package description: A typical brew “cask” package
contains a link to an installer hosted on an external platform, a
command line to run it and a checksum to verify its integrity (see
that of VLC3). Such package managers, however, are mostly popular
on Linux systems and they are used mainly by experienced users
(e.g., users familiar with the terminal). Note that package managers
are also subject to attacks [12].
3 SYSTEM AND THREAT MODEL
In this section, we describe the general system and adversarial
model, as well as the technical background necessary to understand
the work (i.e., checksums and digital signatures). Readers familiar
with these concepts can skip the corresponding paragraphs.
3.1 System and Threat Model
We consider a website hosted on a given web server. The website
contains a download page that includes a link to a program hosted
on an external web server (a hosting platform, typically on a mirror
or a content delivery network) managed by a different entity. The
original website is managed by the developers. We consider an
adversary who is able to tamper with the program files hosted on
the external server. It could be the operator of the external hosting
platform or a hacker. In order to enable users to check the integrity
of the files they download from the external server, when clicking
on the link in the download page hosted on the original server, the
download page contains a checksum of the program, generated as
explained below.
3.2 Checksums and Digital Signatures
Checksum. A checksum is a fixed-size binary string derived from
a block of data of arbitrary size (e.g., a file): it is used to verify the
integrity of the data, i.e., that the data has not been corrupted
(e.g., when the data is transmitted or stored). In adversarial set-
tings, the output of cryptographic hash functions, called hashes
or digests, are used as checksums. Checksums are usually repre-
sented as hexadecimal strings (e.g., 2cae915ae0e...), the sizes of
which usually range from 32 digits (i.e., 128 bits) to 128 digits (i.e.,
512 bits). Cryptographic hash functions enjoy three core properties:
pre-image resistance, second pre-image resistance, and collision
resistance [33, 38]. In the settings of web downloads hosted on
external servers, the second property is key: It guarantees that it is
computationally hard for an adversary with access to the original
file (and its hash) to forge a different file (e.g., a malware) that has
the same hash. Essentially, an adversary would have to rely on
brute-force attacks, that is, to generate a huge number of different
versions of a program (e.g., by varying a number of innocuous bytes
such as strings in the program file) until it finds one with a hash
that matches that of the original file. An adversary can perform a
brute-force attack to forge a file with a hash that partially matches
that of the original file, namely partial pre-image attacks. In ad-
dition, hash functions usually ensure that even a minor change
(even just one bit) in the input data results in a completely different
output hash. That is, two checksums should be very different if
applied to very similar (but not identical) data.
Today, the most popular cryptographic hash functions are: MD5,
SHA-1, SHA-2 (with 256, 384 or 512 bits) and the upcoming SHA-3.
MD5 was one of the first proposed cryptographic hash functions;
it was broken in the late 1990’s and its use is strongly discouraged.
3https://github.com/caskroom/homebrew-cask/blob/master/Casks/vlc.rb
Session 6D: Usable 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada1259Automating the Integrity Verification of Web Downloads for the Masses
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
SHA-1 was recommended by the National Institute of Standards
and Technology (NIST) until 2015, when it was broken. SHA-2 is
the most popular hash function today and it is currently the recom-
mended (by NIST) algorithm for file integrity verification [15].
For integrity verification, users must input the downloaded file
to a dedicated program (e.g., shasum) and compare the computed
checksum to the one specified on the download page.
Digital Signature. Digital signatures usually rely on asymmetric
cryptography. The signer (e.g., the developer) has a pair of crypto-
graphic keys: a public one, known to everyone, and a private one,
kept secret. By using their private key, the signer can generate a
fixed-size block of data, i.e., a (detached) digital signature, from a
file. Based on the signer’s public key, a user can verify the validity
of the signature and thus the integrity (and authenticity) of the cor-
responding file. To do so, users must input the downloaded file, the
signature and the public key of the signer to a dedicated program
(e.g., gpg). A popular cryptographic standard for digital signature is
OpenPGP4 that relies on the RSA and DSA cryptographic schemes.
3.3 Subresource Integrity
Subresource integrity (SRI) was introduced by the W3C in 2016 [49].
It specifies that, for external resources linked to a webpage through
an HTML element, an integrity attribute containing a checksum
can be added to the element.5 This mechanism was introduced
to detect corruption of externally hosted scripts. Therefore, in its
6 and script.
current form, SRI covers only two elements: the link
These elements are used to include external style sheets (e.g., cascad-
ing style sheets–CSS) and scripts (e.g., JavaScript–JS) respectively.
The verification of the integrity of the subresources, based on the
provided checksum, is performed by the user agent, typically the
web browser. SRI is currently supported by all the major browser
except Internet Explorer.
4 SURVEY OF WEBSITES
In order to assess the current practices of developers regarding the
use of checksums and signatures7 in the context of web downloads,
we analyzed the download pages of various popular programs for
computers (not for smartphones), such as VLC media player.
4.1 Methodology
To obtain a list of software programs to analyze, we wanted to
focus on popular programs that can be freely downloaded on the
Internet and that have an associated checksum on their download
pages (on the official website). We started by looking at websites
from the Alexa top 500 ranking, but we were unable to find any
meaningful datasets, not to mention the fact that the number of
visits on the website is not necessarily correlated with the number
of downloads of the program. We then explored a second dataset
from App Annie that provides a list of popular apps but only for
mobile devices. A third possibility would have been to look at the
4https://www.openpgp.org
5https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity
6The link element should not be confused with the a element which defines
7For the sake of clarity, in this section, we refer to both digests produced by
hyperlinks users can click on to download files or to navigate to other webpages.
cryptographic hash functions and signatures as checksums.
official app stores, but this would make little sense, as those apps can
already be safely downloaded from there. In addition, some popular
apps are not on such app stores. Hence, we collected examples of
free software programs from within our lab as well as from lists of
popular free software gathered from the Web.8 We converged on
20 programs that (i) can be freely downloaded from their respective
websites, (ii) are provided with their associated checksums and
(iii) are from different app categories, according to Wikipedia. We
manually analyzed each of the download pages in a systematic way,
by checking the following properties:
• If the checksum and the program are hosted on the same
server, on different servers in the same domain, or on dif-
ferent servers in different domains. We compared the URLs
of the checksum file (or of the webpage, if the checksum is
embedded in the webpage) to that of the program. We per-
formed a complementary comparison of the corresponding
IP addresses.9 From a security point of view, it is better to
host the website and the program on different servers, as
this reduces the risks that an attacker can tamper with both
the checksum displayed on the page and program file. This
is less problematic for signatures as they cannot be forged.
• Whether the checksum and the program are served through
HTTP or HTTPS by default. From a security perspective,
HTTPS is better as it protects the integrity of the data while
in transit and authenticates the hosting website.
• Which cryptographic schemes are used to generate the
checksum (i.e., MD5, SHA1, SHA2 with 256 or 512 bits, or
PGP). As of today, both MD5 and SHA1 are considered inse-
cure and their use is strongly discouraged [15].
• Whether the webpage contains instructions on how to verify
the integrity of the downloaded program with the corre-
sponding checksum.
• Whether our browser extension (described in Section 6) can
extract the checksum from the original download page and
verify the integrity of the downloaded program.
We collected, whenever available, the average number of down-
loads per day. We conducted the survey in April 2018. To limit the
possible data collection errors, three experts from our lab indepen-
dently verified each website according to the properties above and
found no discrepancies. Table 1 shows the raw data of this survey.
Note that the Tor client was included in our survey, even though
it does not include a checksum (but includes a signature). This
is because the integrity of such a program is particularly impor-
tant, considering the contexts in which it is used (e.g., censorship
circumvention).
4.2 Results and Analysis
It is important to note that the list of analyzed programs is not
representative of all the programs available for download on the
Web. Therefore, the statistics derived from this survey are useful
mostly to obtain a sense of the current practices and the relevant
criteria regarding the use of checksums for securing web downloads
of programs. For future work, we intend to perform such an analysis
8See, e.g., https://www.techradar.com/news/the-best-open-source-software
9Note that this method is a heuristic; as such, it could induce both false positives
and false negatives.
Session 6D: Usable 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada1260CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Mauro Cherubini et al.
SHA1
SHA2
PGP
instr.
#dl/day
description
programming suite
audio editor
3D graphics editor
FTP client
raster graphics editor
cryptographic suite
video transcoder
vector graphics editor
programming suite
password manager
text editor
office suite
media server
remote administration
antivirus
anonymity network
BitTorrent client
operating system
media player
virtual machine hypervisor