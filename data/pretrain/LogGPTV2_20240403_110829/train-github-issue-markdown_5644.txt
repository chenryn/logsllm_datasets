### Issue with current documentation:
The documentation for scipy.interpolate.RegularGridInterpolator describes the
class as for "Interpolation on a regular grid in arbitrary dimensions" and
there is this statement, "The data must be defined on a regular grid; the grid
spacing however may be uneven." Isn't such a grid a rectilinear grid, and not
explicitly _not_ a regular grid? See Regular Grid.
The really odd thing about all of this is that the code on which this class is
based, _regulargrid_ by Johannes Buchner, seems to make the same mistake. In
the README for the regulargrid repo, it even links the wikipedia article I've
just referenced here at the top. Then it goes on to describe a Cartesian Grid
as one with equal spacing between points (correct, but that spacing has to
also be equal across each dimension) and a Regular Grid as having unequal
spacing between points (incorrect). Beneath this definition of "Cartesian
grid", there's an example of a grid which is Regular but not Cartesian.
Just to make sure that the "Regular grid" was actually rectilinear, I checked
regulargrid/test/test_regulargrid.py. On line 13, the breaks are distributed
randomly in each of two spatial dimensions, making it in fact rectilinear and
not regular.
I can also confirm that the same mistake is made in scipy.interpolate.interpn
- I've used this code on rectilinear grids and it seems to work fine, despite
the method saying that a "regular grid" is required many times in the
documentation.
I think correcting this is important - I tried for hours to find a rectilinear
grid interpolator so that I could use it instead of interpn... it turns out I
need not have bothered!
### Suggested fix:
The documentation for scipy.interpolate.RegularGridInterpolator and
scipy.interpolate.interpn should be updated to specify that the interpolation
happens on a rectilinear grid rather than a regular grid.