# 复现与分析

在Coherence包中，`com.tangosol.io.ExternalizableLite` 接口提供了序列化和反序列化的实现。此接口通过 `readObject()` 和 `readObjectInternal()` 方法来处理对象的反序列化。具体来说，`readObjectInternal()` 会依据 `nType` 的值调用不同的反序列化函数，而 `nType` 是在 `writeObject` 过程中通过 `getStreamFormat()` 函数确定的。

`getStreamFormat()` 方法基于传入对象的类型返回一个整数值，以标识特定的数据格式。例如，如果对象实现了 `ExternalizableLite` 接口，则对应的 `nType` 值为10。下面是该方法的部分代码示例：

```java
public static int getStreamFormat(Object o) {
    return o == null ? 0 : (o instanceof String ? 6 : 
        // ...省略其他条件判断...
        (o instanceof ExternalizableLite ? 10 : 
            // ...更多条件判断...
            255));
}
```

对于实现了 `ExternalizableLite` 接口的对象，在执行 `readExternalizableLite()` 时，将使用 `loadClass` 来加载类，这一过程不受WebLogic黑名单限制。因此，可以利用这一点来调用黑名单中的 `readExternal` 方法。

作者选择了一个已知漏洞中使用的类 `com.tangosol.coherence.rest.util.extractor.MvelExtractor`，它实现了 `ExternalizableLite` 接口，并且在其 `readExternal` 方法内设置了可控制的表达式 `m_sExpr`。为了触发这个漏洞，需要找到一种方式来调用 `MvelExtractor` 中的 `extract` 方法。

经过进一步的研究发现，`com.tangosol.util.aggregator.TopNAggregator.PartialResult` 类的 `readExternal` 方法内部会自动触发 `instantiateInternalMap` 方法，这提供了一种途径去控制比较器（Comparator），进而间接地调用了 `MvelExtractor` 的 `compare` 方法，从而激活了 `extract` 方法。

然而，由于 `PartialResult` 并未直接实现 `ExternalizableLite` 接口，其 `readExternal` 方法不会在标准反序列化过程中被调用。解决这个问题的方法是寻找另一个实现了 `Externalizable` 接口并且能够调用 `ExternalizableHelper.readObject` 方法的类。最终发现了 `com.tangosol.coherence.servlet.AttributeHolder` 类满足上述条件，它在 `readExternal` 方法中确实调用了 `ExternalizableHelper.readObject`，从而成功触发了 `PartialResult` 的 `readExternal` 方法。

# 漏洞利用

具体的漏洞利用代码可以在我的GitHub仓库中查看：[CVE-2020-14756](https://github.com/Y4er/CVE-2020-14756)

# 思考

考虑到 `com.tangosol.util.ExternalizableHelper#readObjectInternal` 方法根据 `nType` 分支处理不同类型的对象，推测其他分支也可能存在类似的安全隐患。

# 参考资料
1. [此处应填写参考文献链接或信息]