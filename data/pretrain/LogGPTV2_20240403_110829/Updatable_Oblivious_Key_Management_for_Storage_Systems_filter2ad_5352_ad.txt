uokms(A, (cid:96)) − Advideal
uokms(A, SIM, (cid:96))| is negligible in (cid:96).
The real experiment Expreal
uokms(A, (cid:96)) in Figure 5 models an interaction of adversary A with
a UOKMS scheme which progresses through epochs t = 0, 1, ... where the ﬂag corrt designates
whether A corrupts KmS (kms) or the storage server StS (sts) in epoch t. After the initialization
which generates the initial KMS key pair (sk0, pk0) we give pk0 to A and let A interact with the
encryption, decryption, and ciphertext update oracles. We model the progress from one epoch to
the next via “party corruption” oracle Corr which uses A’s decision bit corrt+1 to corrupt either KmS
or StS in the next epoch6. This oracle triggers a key update, i.e. a new KMS key pair is created as
(skt+1, pkt+1, ∆t+1) ← UGen(skt, pkt), and the epoch counter t is incremented. Adversary A then
receives the new public key pkt+1 and possibly more, depending on the parties it corrupts: Namely,
if corrt+1 = kms then A also gets the new secret key skt+1, and if corrt+1 = corrt, i.e. if A corrupts
the same party in the two consecutive epochs, then A also gets the update token ∆t+1. Crucially,
A does not get ∆t+1 if corrt+1 (cid:54)= corrt. (Indeed, as mentioned above, in the UOKMS scheme of
Figure 4, receiving the update token would allow the adversary to eﬀectively extend the corruption
of KmS from epoch t to epoch t+1 and vice versa.)
The security experiment assumes that KmS corruptions are passive in the sense that if corrt =
kms we let A learn skt (and ∆t if corrt−1 = kms), but we do not let A interfere in the update
generation and/or the dissemination of the created update token and a public key, or in the execution
of the decryption protocol. (All existing Updatable Encryption security notions make such choices,
e.g. assuming that even if the adversary compromises the entity that stores the key, the key update
is still generated honestly.)
We assume that StS corruptions are active in the sense that for epochs where corrt = sts we not
only let A learn ∆t, but we also give A an access to the ciphertext update oracle UEnc which on
input (t(cid:48), c), for t(cid:48)<t and c a ciphertext from epoch t(cid:48), outputs the updated value of c at epoch t.
That is, the oracle runs the update algorithm on (supposed) ciphertext ct(cid:48) = c using update tokens
∆t(cid:48)+1, ..., ∆t, and outputs the updated ciphertext ct. This models the ability of the adversary to
inject ciphertexts to StS in some epoch – either by directly modifying these ciphertexts when StS is
corrupted, or by sending a ciphertext to the client who then stores it at StS7 – and then having this
ciphertext updated by the UEnc oracle. Note that the Update protocol is not provided at epochs
where corrt = kms since this would allow A to decrypt challenge ciphertexts using the compromised
KmS key.
Our UOKMS models a public key encryption where adversary A can encrypt any message
at will, but the role of the encryption oracle Enc in the UOKMS security game is to model the
generation of challenge ciphertexts. Namely, in the real game, oracle Enc on A’s input m generates
a ciphertext c = Enc(pkt, m), but in the ideal game the same ciphertext c must be produced by the
6 We assume w.l.o.g. that A corrupts exactly one of these parties in each epoch. In particular, the real-world
event when both StS and KmS are corrupted in epoch t is reﬂected in our model by KmS corrupted in two consecutive
epochs t−1, t, because this reveals both skt and ∆t to A. On the other hand, the epoch without corruption strictly
weakens the adversary capabilities hence it is subsumed by the other cases.
7Note that our treatment is of a public key encryption, so other parties can potentially create ciphertexts which
land in the StS storage.
12
simulator algorithm SIM given only |m| (and ﬂag enc) as an input while the plaintext m is added to
the (secret) list L of encrypted challenge plaintexts. Adversary A can decrypt any ciphertexts (or
indeed any ciphertext-like objects of its choice) using the decryption oracle Dec. Because we aim to
support oblivious decryption, the precise ciphertext which A eﬀectively enters into the decryption
oracle is hidden from the oracle, hence we must count each decryption oracle access as an attempt
to decrypt some challenge ciphertext. We model this in the ideal game by giving SIM access to a
single location in list L of challenge plaintexts, per each Dec query of A. Note that this technically
implies that the simulator can extract the unique ciphertext which A attempts to decrypt in this
oblivious decryption protocol instance, or otherwise the simulator wouldn’t know which plaintext on
list L it should access. Observe also that we do not create challenge ciphertexts in an epoch where
KmS is corrupted, because knowledge of KmS’s private key makes all such ciphertexts insecure.
We stress that the Expreal
uokms security game allows any pattern of corruptions except corruption
of both StS and KmS in a single epoch (see footnote 6). However, our model of corruptions is static
in the sense that A must decide which party to corrupt at the beginning of each epoch. (See also
the discussion below.)
Prior Updatable Encryption Models. Our notion of Updatable (Oblivious) KMS is related
to Updatable Encryption (UE) or Encryption with Key Rotation, which was studied in several
recent works [9, 10, 20, 37, 35]. UOKMS extends the notion of UE by splitting the UE’s client
into two separate entities, the KMS server, which holds the client’s decryption key and generates
key updates, and the client itself, who decrypts the ciphertexts retrieved from the storage server
via an interactive decryption protocol with the KMS. The UOKMS model thus lifts the notion of
Updatable Encryption to the setting that reﬂects realistic large cloud storage deployments, where
the decryption keys of all clients are held by a specialized Key Managment server. On the other
hand, collapsing the client and the KMS in the UOKMS model into a single entity gives exactly
the setting of UE, hence our UOKMS scheme and security notion give rise to the corresponding
UE scheme and notion.
Our security model corresponds to the ciphertext-independent UE model of Lehmann et al. [37]
(which reﬁnes the model of Everspaugh et al. [20]), where a single update message can be used to
update any number of ciphertexts. Of these only the recent work of Klooss et al. [35] addresses
CCA security, and lets the adversary access a decryption oracle, as we do in our model. However,
of the two schemes shown secure in [35] the one whose eﬃciency is comparable to ours does not
allow the adversary an unrestricted access to the Ciphertext Update oracle, while our model allows
unrestricted access to both Dec and UEnc oracles. The scheme of [35] which allows such unrestricted
oracle access relies heavily on pairing-based NIZKs, using e.g. 22 pairings in decryption, in contrast
to a single standard group exponentiation used in decryption in our scheme. However, our model of
UOKMS security is specialized to the case of oblivious interactive decryption where the decryption
oracle, which models the KMS server, runs on blinded ciphertexts. In such setting a standard CCA
notion, where the decryption oracle is restricted from decrypting a challenge ciphertext, does not
apply. Thus we capture security with a “counting method” which enforces that any Q accesses to
the decryption oracle allow for learning plaintext information in at most Q challenge ciphertexts.
Ours is the ﬁrst treatment of Updatable Encryption with oblivious decryption procedure, and this
setting necessitates a “counting-based” notion of security in the presence of decryption oracle.
The UE schemes of [20, 37, 35] achieve update indistinguishability, i.e. a ciphertext updated to
the new epoch cannot be eﬃciently linked to the original from the previous epoch. We do not
consider this property, although our scheme can be extended to support it, because achieving this
property requires update cost proportional to the total size of the encrypted data, which we believe
is impractical in large storage deployments (see footnote 3). The above UE schemes also consider
ciphertext integrity, but this notion is specialized to the case of symmetric key encryption, while
our UOKMS model treats the case of public key encryption.
13
Finally, we should point out that our security model is static in the sense that an adversary must
choose at the beginning of each epoch whether it compromises the decryption key stored by the KMS
or the update token held by the storage server (or both). By contrast, [37, 35] consider an adaptive
model of corruptions, where an adversary can request either the decryption key or the update token
or both for any past epoch as well. The adaptive security model is more general and less restrictive,
but we analyze the security of our scheme only in the static model because adaptive security presents
subtle technical challenges which we do not know how to overcome.8 Technically, the simulator
would have to make bets about past epochs, guessing whether an adverary will eventually ask for
a decryption key for some past epoch (in which case the simulator needs to know this epoch key),
or whether an adversary will ask for an update token which allows updating a challenge ciphertext
to that epoch (in which case the simulator needs to embed an encryption challenge in that epoch
key). Since the simulator needs to make these bets with respect to polynomially-many past epochs,
the probability that its guesses are all correct will be negligible, and it is not clear if such strategy
can lead to eﬃcient simulation. We thus believe that security analysis in the fully adaptive model
of [37, 35] remains an open question.
4 Security Analysis of the UOKMS Scheme
The UOKMS scheme shown in Figure 4 is information-theoretic oblivious, as is the OPRF protocol
dh-op on which the Decryption protocol in Fig. 4 is based, but the security of this scheme relies on
the OMDH-IO computational assumption and the (receiver) non-committing property of symmetric
encryption, both deﬁned below:
One-More DH with Inverse Oracle (OMDH-IO) Assumption. For any PPT A the following
probability is negligible:
Prob[A(·)k,(·)1/k
(g, gk, g1, . . . , gN ) = {(gjs, gk
js
)}s=1,...,Q+1]
with the probability going over random k in Zq, random choice of group elements g1, . . . , gN in
G = (cid:104)g(cid:105), and A’s randomness, and where (·)k and (·)1/k are exponentiation oracles, and Q is the
number of A’s queries to the (·)k oracle.
Without access to oracle (·)1/k, the above is identical to the One-More DH (OMDH) assumption
[6, 33], which was used e.g. for proving the security of the practical OPRF schemes [28, 29], partic-
ularly the one shown in Figure 3 in Section 2.1. Thus, OMDH-IO is a strengthening of OMDH; its
security can be proven in the Generic Group Model (GGM) as an extension to the proof of OMDH
in that model [31] and with a slight modiﬁcation of the security bounds. We sketch this adaptation
in Appendix A.
Receiver Non-Committing Symmetric-Key Encryption. This property of symmetric-key
encryption (SKE) is used in our security analysis to enable the simulation required by the security
game in Fig. 5.
Informally, it states that without knowledge of the encryption key, ciphertexts
do not commit to their underlying plaintexts, thus allowing the simulator to “explain” a ﬁxed
ciphertext as the encrypton of any plaintext. Formally, a symmetric encryption scheme (Enc, Dec)
if for any PPT A there exists PPT SIM s.t. A’s view in the
is receiver non-committing (RNC)
following real and ideal games is indistinguishable: (1) In the real game A interacts with oracles
Enc and Reveal, where Enc(i, m) picks random key ki and outputs e = Enc(ki, m) while Reveal(i)
reveals ki; (2) In the ideal game A interacts with a stateful algorithm SIM, s.t. when A sends (i, m)
as an Enc query, SIM must return e on input (i,|m|), and when A sends i as a Reveal query, SIM
must output ki on input (i, m).
8We stress that this is an issue in the proof only and not an explicit attack, and that similar technical issues were
observed regarding adaptive security in other contexts, e.g. in proactive cryptosystems, see e.g. [13, 1, 38].
14
Theorem 3 The UOKMS scheme in Figure 4 is unconditionally oblivious and is secure under the
OMDH-IO assumption in ROM if the symmetric encryption scheme Enc is receiver non-committing.
Notes on the Proof. The proof of Theorem 3 is presented in Section 4.1. We note that the
inverse exponentiation oracle in OMDH-IO is necessary to obtain the theorem as the protocol (in
the context of our model) provides an attacker A that corrupts KmS in epoch t− 1 and StS in
period t with an oracle to the function (·)1/kt. Indeed, in epoch t, A obtains access to UEnc which
implements an exponentiation oracle (·)∆t = (·)kt−1/kt, and together with knowledge of kt−1, A
can compute (·)1/kt on any value of its choice. The RNC property of SKE Enc is likewise necessary.
Consider an attacker A making two queries: (a) an Enc query on some m, and (b) a Dec query
where A runs the Dec.C protocol on the received ciphertext c = (ObjId, w, e). By the UOKMS
security game rules of Fig. 5 the simulator SIM has to simulate this as follows: (a) it produces c
on message length |m|, and (b) on input m retrieved from list L, it simulates protocol Dec.S so
that c decrypts to m. SIM’s response v to A’s message u in the decryption protocol, see Fig. 4,
deﬁnes the eﬀective KMS key as k = DL(u, v), and consequently deﬁnes the data encryption key
for (ObjId, w, e) as dek = H(wk). Thus when SIM deﬁnes the output dek of oracle H on input wk
it must satisfy that e = Encdek(m). In particular, SIM ﬁrst creates ciphertext e given just |m| and
then, given m, it creates dek s.t. e = Encdek(m), wihch implies that SKE Enc satisﬁes the RNC
property.
Corollary 4 The UOKMS scheme in Figure 4 is secure under the OMDH-IO assumption in the
Ideal Cipher Model and ROM if the symmetric encryption is implemented using CTR or CBC
modes.
The corollary follows because CTR and CBC encryption modes satisfy the receiver non-committing
property in the Ideal Cipher model: If message length |m| deﬁnes n blocks for block cipher E then
SIM services Enc query on input (i,|m|) by setting ciphertext e = (IV, e1, ..., en) where IV and
all ei’s are random blocks. When SIM gets m = (m1, ..., mn) to service Reveal(i) query, values
(IV, e1, ..., en, m1, ..., mn) deﬁne n input/output pairs which SIM needs to set for E(k,·) for random
key k. For counter mode CTR, SIM sets E(k, IV + j) = mj ⊕ ej for all j while for CBC mode,
SIM sets E(k, mj ⊕ ej−1) = ej for all j where e0 = IV . Either way by randomness of ei’s this sets
E(k,·) outputs on n given points to n random values. The probability that this creates collisions
in E(k,·) is negligible, and by randomness of k there is a negligible probability that any points of
E(k,·) were queried before.
Note. The above argument can be expanded to include authenticated encryption via encrypt-then-
mac where the simulator chooses the MAC key.
4.1 Proof of Theorem 3
Proof:
Note ﬁrst that the unconditional obliviousness of this UOKMS scheme is immediate,
because for any public key pk and any two valid ciphertexts c0 = (ObjId0, w0, e0) and c1 =
(ObjId1, w1, e1), the interaction with Dec.C on (pk, cb) for b = 0 and b = 1 is identical: In ei-
ther case C sends u = (wb)r(cid:48)
for r(cid:48) ←R Zq, which is a random group element if wb ∈ G and
wb (cid:54)= 1 because the group order is prime. To argue UOKMS security we will ﬁrst show an eﬃcient
simulator algorithm SIM which having access to (any) adversary algorithm A, interacts with the
uokms. We will then re-write SIM as a reduction algorithm R s.t. if A has 
ideal UOKMS game Expideal
advantage in distinguishing an interaction with the real UOKMS game Expreal
uokms and an interaction
with SIM and Expideal
uokms, i.e. if
 = | Pr[1 ← Expreal
|
uokms(A, (cid:96))] − Pr[1 ← Expideal