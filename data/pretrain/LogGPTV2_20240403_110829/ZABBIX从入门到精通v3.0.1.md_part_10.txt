### Zabbix 网络发现规则及事件

在配置完 Zabbix 的网络发现规则后，Zabbix 会定期扫描指定的 IP 段。一旦检测到主机或服务的变化，就会生成相应的事件。以下是常见的网络发现事件及其描述：

| 事件           | 描述                                                         |
|----------------|--------------------------------------------------------------|
| Service Up     | 当 Zabbix 检测到一个活动的服务时生成此事件。                 |
| Service Down   | 当 Zabbix 无法检测到某个服务时生成此事件。                   |
| Host Up        | 目标 IP 至少有一个服务处于 UP 状态时生成此事件。             |
| Host Down      | 所有服务均无响应时生成此事件。                               |
| Service Discovered | 在维护时间之后恢复或首次被发现的服务时生成此事件。          |
| Service Lost   | 在服务从 UP 状态变为丢失状态时生成此事件。                   |
| Host Discovered | 在维护时间之后恢复或首次被发现的主机时生成此事件。           |
| Host Lost      | 在主机从 UP 状态变为丢失状态时生成此事件。                   |

关于 Zabbix 自动发现的详细内容将在后续文章中介绍。

### Zabbix 触发器事件

触发器是 Zabbix 事件系统中的核心部分，常用于定义报警动作。每当触发器的状态发生变化时，都会生成一个包含详细状态信息的触发器事件，包括事件发生的时间和当前状态等。

### Zabbix 自动注册事件

当主动代理（active agent）与 Zabbix 服务器通信时，Zabbix 服务器会使用代理的 IP 地址和端口来添加主机，并生成一个自动注册事件。关于自动注册的详细内容将在后续文章中介绍。

### Zabbix 脚本报警媒介自定义

#### 概述
Zabbix 支持多种媒介类型，包括邮件、短信和自定义脚本。本文将重点介绍自定义脚本媒介。

#### 媒介配置
1. **创建媒介类型**：
   - 导航至 `Administration` -> `Media types` -> `Create media type`。
   - 配置以下属性：
     - **Type**: 选择自定义脚本。
     - **Script name**: 脚本名称（需要先定义 `AlertScriptsPath`，并将脚本放在该目录下）。
     - **Enabled**: 启用状态。

2. **配置 AlertScriptsPath**：
   ```bash
   # mkdir /usr/local/zabbix-2.2.1/alertscripts
   # cat /usr/local/zabbix-2.2.1/etc/zabbix_server.conf | grep -i aler
   AlertScriptsPath=/usr/local/zabbix-2.2.1/alertscripts
   ```

3. **编写脚本**：
   ```bash
   # cd /usr/local/zabbix-2.2.1/alertscripts
   # cat mail.sh
   #!/bin/sh
   to=$1
   subject=$2
   body=$3
   /usr/local/bin/sendEmail -f PI:EMAIL -t "$to" -s smtp.ttlsa.com -u "$subject" -o message-content-type=html -o message-charset=utf8 -xu PI:EMAIL -xp123456 -m "$body" 2>>/tmp/22.log
   ```
   备注：`sendEmail` 需要额外安装，请参考《sendEmail 发送邮件》。

4. **用户媒介配置**：
   - 导航至 `Administration` -> `Users` -> 选择用户 -> `Media` 标签 -> `Add`。
   - 配置以下属性：
     - **Type**: 选择自定义媒介。
     - **Send to**: 发送到的目标地址（例如 `PI:EMAIL`）。
     - **When active**: 报警时间限定（例如 `1-5,09:00-18:00`）。
     - **Use if severity**: 严重性类型（只接收指定的类型）。
     - **Status**: 媒介状态（启用或禁用）。

### Zabbix Action 报警配置

#### 介绍
Zabbix 的 action 配置用于定义报警行为，支持以下事件类型：
- 触发器事件：触发器状态在 OK 和 PROBLEM 之间变化。
- 发现事件：网络发现事件。
- 自动注册事件：新的客户端注册进来。
- 内部事件：item 变为 unsupported 状态，触发器变为 unknown 状态。

#### 配置 Action
1. **创建 Action**：
   - 导航至 `Configuration` -> `Actions` -> 选择事件来源 -> `Create action`。
   - 配置基本内容后，设置条件。

2. **条件配置**：
   - **Type Of calculation**: 条件之间的关系（AND、OR 或 AND/OR）。
   - 示例：同时满足机器不在维护状态且触发器值为 PROBLEM 时触发报警。

3. **操作配置**：
   - **Operation type**: 选择远程命令。
   - **Type**: 选择远程命令类型（IPMI、Custom script、SSH、Telnet、Global script）。
   - **Command**: 输入远程命令。

示例：
```bash
sudo /etc/init.d/apache restart
```
备注：确保 Zabbix 用户具有执行命令的权限。

### Zabbix 用户宏变量详解

#### 概述
Zabbix 宏变量使配置更加灵活，可以在主机、模板和全局级别定义。宏变量名称以 `{$MACRO}` 形式表示，仅允许使用大写字母、数字、下划线和点号。

#### 宏变量优先级
1. 主机宏（优先级最高）
2. 主机模板宏（按模板顺序优先级递减）
3. 全局宏（优先级最低）

#### 自定义宏
- **全局宏**：导航至 `Administration` -> `General` -> `Macros`。
- **主机/模板宏**：编辑主机或模板 -> `Macros` 标签 -> 定义宏变量。

#### 使用实例
1. **主机 SSH 服务**：
   ```bash
   net.tcp.service[ssh,{$SSH_PORT}]
   ```
2. **主机 CPU 负载触发器**：
   ```bash
   {ca_001:system.cpu.load[,avg1].last(0)}>{$MAX_CPULOAD}
   ```
3. **使用两个宏的主机 CPU 负载触发器**：
   ```bash
   {ca_001:system.cpu.load[,avg1].min({$CPULOAD_PERIOD})}>{$MAX_CPULOAD}
   ```

### Zabbix 执行远程命令

#### 概述
Zabbix 可以通过远程命令自动化处理一些常见问题，如重启应用、释放磁盘空间等。

#### 配置
1. **启用远程命令**：
   - 编辑 `zabbix_agentd.conf` 文件，设置 `EnableRemoteCommands = 1`。
   - 重启客户端。

2. **配置 Action**：
   - 导航至 `Configuration` -> `Actions` -> 选择 `Operation` 标签 -> 选择 `Remote Command`。
   - 选择远程命令类型并输入命令。

示例：
```bash
sudo /etc/init.d/apache restart
```

#### 访问权限
- 确保 Zabbix 用户具有执行命令的权限。
- 编辑 `sudoers` 文件，允许 Zabbix 用户执行特定命令。

#### 使用多种接口执行远程命令
- **通过 Zabbix Agent 重启 Windows**：
  ```bash
  c:\windows\system32\shutdown.exe -r
  ```
- **使用 IPMI 重启服务器**：
  ```bash
  reset on
  ```
- **使用 IPMI 关机**：
  ```bash
  power off
  ```

### Zabbix Trapper 监控项配置

#### 概述
Zabbix Trapper 功能允许客户端自行提交数据给 Zabbix 服务器，适用于长时间运行的数据采集任务。

#### 配置
1. **创建监控项**：
   - 导航至 `Configuration` -> `Hosts` -> 选择主机 -> `Create item`。
   - 配置以下属性：
     - **Type**: 选择 `Zabbix trapper`。
     - **Key**: 自定义 key 名称。
     - **Type of information**: 数据类型（数字、文本、浮点等）。
     - **Allowed hosts**: 可选，指定接受数据的 IP 地址。

2. **传送数据**：
   ```bash
   # ./bin/zabbix_sender -z 10.9.4.20 -p 10051 -s "test_01" -k trap -o 'ttlsa.com你好'
   info from server: "processed: 1; failed: 0; total: 1; seconds spent: 0.000038"
   sent: 1; skipped: 0; total: 1
   ```

#### 展示数据
- 导航至 `Monitoring` -> `Latest data` 查看数据。

### Zabbix Aggregate Checks 聚合检测

#### 概述
Aggregate checks 用于聚合多个主机或组的数据，例如计算某个组的平均负载或硬盘剩余总量。数据来源于数据库，不需要 agent。

#### 聚合项 key 语法
```bash
groupfunc["Host group","Item key",itemfunc,timeperiod]
```
- **Group Function**: 支持 `grpavg`（平均值）等函数。

通过以上配置和使用方法，可以充分利用 Zabbix 的功能，实现高效、灵活的监控和报警。