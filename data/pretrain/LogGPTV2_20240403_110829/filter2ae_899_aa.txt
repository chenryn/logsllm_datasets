**Author:LoRexxar@Knownsec 404Team & Dawu@Knownsec 404Team  
Chinese version:  **
This may be a vulnerability that has been released a long time ago, but I saw
Dragon Sector and Cykor used it as a trick to get an unintendend solution for
the challenge h4x0r's club in the offline TCTF2018 final game.
I then realized it was an interesting trick when I was having a discussion
with @Dawu. In the process of tracing this vulnerability, I discovered that
this has remained as a feature of mysql for many years, and has been shared
since 2013.
  * [Database Honeypot by design (2013 8月 Presentation from Yuri Goltsev)](https://www.slideshare.net/qqlan/database-honeypot-by-design-25195927)
  * [Rogue-MySql-Server Tool (2013年 9月 MySQL fake server to read files of connected clients)](https://github.com/Gifts/Rogue-MySql-Server)
  * [Abusing MySQL LOCAL INFILE to read client files (2018年4月23日)](https://w00tsec.blogspot.com/2018/04/abusing-mysql-local-infile-to-read.html)
In the process of digging, we are constantly discovering new ways to use it,
so most of these findings are summarized and prepared for sharing on the CSS.
Let us do the analysis step by step.
# Load Data Infile
Load data infile is a very special syntax. Friends who know about injection or
often play CTF may be familiar with this syntax. In CTF, we often encounter
situations where there is no way to load_file to read the file. At this time,
load data infile is the only possible way to read files. Generally our
statement is this:
    load data infile "/etc/passwd" into table test FIELDS TERMINATED BY '\n';
The mysql server will read the server's / etc / passwd and insert the data
into the table according to `'\n'`. But now this statement also requires you
to have FILE permissions, and non-local loaded statements are also restricted
by `secure_file_priv`.
    mysql> load data infile "/etc/passwd" into table test FIELDS TERMINATED BY '\n';
    ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
If we add a keyword local.
    mysql> load data local infile "/etc/passwd" into table test FIELDS TERMINATED BY '\n';
    Query OK, 11 rows affected, 11 warnings (0.01 sec)
    Records: 11  Deleted: 0  Skipped: 0  Warnings: 11
The client's file will be read and send to the server. The execution result of
the above statement is as follows.
Obviously, this statement is not safe, and it is fully explained in the mysql
documentation.
As mentioned in the mysql documentation, **clients should not connect to
untrusted servers**.
And our analysis is based on this.
# Constructing A Malicious Server
After understanding the previous question, the question is about how do we
construct a malicious mysql server.
Before we figure this out, we need to study the packet structure that mysql
normally performs linking and querying.
1.Greeting package, the server returned the banner, which contains the version
of mysql
2.Client login request
3.Initializing query. There are a lot of queries because it is phpmyadmin.
4.load file local
The statement is as follows
    load data local infile "C:/Windows/win.ini" into table test FIELDS TERMINATED BY '\n';
First the client sends the query
Then the server returned the required path.
Then the client sends the content directly to the server
It seems very clear, and the path for the client to read the file is not
specified from the client but the server.
The original query process was
    Client: I want to insert win.ini into the test table
    Server: I want your win.ini content
    Client: The contents of win.ini are as follows ...
Suppose the server is controlled by us, and a normal process is tampered with
as follows
    Client: I want data in the test table
    Server: I want your win.ini content
    Client: The content of win.ini is as follows ???
Will the third sentence above be executed?
In [mysql documention](https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html):
**A patched server could in fact reply with a file-transfer request to any
statement**. This answers our question.
It is not difficult to find out the vulnerability is due to the configuration
problem of the MySQL client. After some research, I found that during the
MySQL login verification process, the client configuration will be sent.
After the greeting package, the client will connect and try to log in. At the
same time, there is a configuration in the data package about whether to allow
the use of load data local, from which we can see whether the client has this
problem (the returned configuration may not be always accurate, and this issue
will be mentioned later).
# PoC
After trying to understand the principle, it is not so difficult to build a
malicious server. The process is very simple.
1.Reply to the mysql client with a greeting package
2.Wait for the client to send a query packet
3.Reply to a file transfer package
The problem is all about constructing the package format. You can follow the
original text and various documents to complete the above several queries.
It is worth noting that the poc given by the original author did not adapt to
all situations. Some mysql clients will send ping packets after successful
login, and if there is no reply, they will disconnect. There are also some
mysql clients that have a strong check on the greeting package. It is
recommended to directly capture the package and construct it according to the
real package content.
  * 
  * 
poc given by the author.
# Demo
I used a Tencent Cloud as the server, and phpmyadmin the client
We successfully read the file.
# Sphere of influence
## Underlying Application
To know what impact the vulnerability woud bring, we must first know what kind
of clients are threatened by it.
  * mysql client (pwned)
  * php mysqli (pwned，fixed by 7.3.4)
  * php pdo (Disabled by default)
  * python MySQLdb (pwned)
  * python mysqlclient (pwned)
  * java JDBC Driver (pwned，Disabled by default in some conditions)
  * navicat （pwned)
## Probe
My first thought was the mysql probe, but unfortunately, after testing most of
the probes on the market, I found that most of the probes disconnected without
any query just after accepting the greeting package.
  * Yahei PHP Probe failed
  * iprober2 probe failed
  * One-click installation of PHP probe for LNMP failed
  * UPUPW PHP probe failed
  * ...
## Cloud Service Provider Cloud Database Data Migration Service
All the above loopholes will be reported to the official in 2018 and the
loopholes principle will be observed
Domestic
  * Tencent Cloud DTS failed, Load data local disabled 
  * Alibaba Cloud RDS data migration failed, Load data local disabled 
  * Huawei Cloud RDS DRS Service succeeded 
  * JD Cloud RDS does not support remote migration function, distributed relational database is not open 
  * UCloud RDS does not support remote migration function, and distributed relational databases cannot synchronize external data 
  * QiNiu Cloud RDS does not support remote migration function 
  * New Cloud RDS does not support remote migration function 
  * NetEase Cloud RDS external instance migration succeeded 
  * Kingsoft Cloud RDS DTS data migration succeeded 
  * Qingyun Cloud RDS data import failed, load data local disabled 
  * Baidu Cloud RDS DTS secceeded 
International Cloud Service Provider
  * Google could SQL database migration failed, Load data infile disabled 
  * AWS RDS DMS Service succeeded 
## Excel Online Sql Query
As mentioned in a previous article, there is generally a function in Excel to
synchronize data from a database to a table so that the file can be read in
the above manner.
Inspired by this idea, we thought that we could find excel function of online
so that we could read arbitrary files.
  * WPS failed（Did not find it）
  * Microsoft excel failed (infile statement disabled)
  * Google Sheets (not natively, but supports plugins, the following mainly describes plugins)
    * Supermetrics pwned 
\- Advanced CFO Solutions MySQL Query failed \- SeekWell failed \- Skyvia
Query Gallery failed \- database Borwser failed
# Expand? 2RCE!
Setting aside some of the very special situations we mentioned earlier, we
also need to discuss some of the exploit chain of this vulnerability in
general situations.
Since the discussion is about arbitrary file reading, the most direct thought
must be the vulnerability caused by the leakage of the configuration file.
## Leakage of arbitrary files reading with configuration file
There two files in the configuration of Discuz x3.4.
    config/config_ucenter.php
    config/config_global.php
In the back end of dz, there is a ucenter setting function. This function
provides ucenter's database server configuration. By configuring the database
to link to a malicious server, you can read any file to obtain configuration
information.
Configure the access address of ucenter.
    Original address： http://localhost:8086/upload/uc_server
    Changed to： http://localhost:8086/upload/uc_server\');phpinfo();//
After we get the authkey, we can calculate the admin cookie by the admin's uid
and salt. Then use the admin cookie and `UC_KEY` to access it.
## Deserialization of arbitrary files reading to
File Operation Induced Unserialization via the “phar: //” Stream Wrapper topic
shared by Sam Thomas at the BlackHat 2018[https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf ](https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf).
It mentioned [Stream
API](https://secure.php.net/manual/zh/internals2.ze1.streams.php). The
corresponding pseudo-protocol can be registered by registering the extension,
and the phar extension registers the `phar: //` stream wrapper.
In the past research of Seaii from 404
Lab()shows that all file functions support
stream wrapper.