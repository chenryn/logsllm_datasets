   ->  Bitmap Heap Scan on t3  (cost=0.06..1.43 rows=5 width=48)  
         Recheck Cond: (id = (t1.id)::bigint)  
         ->  Bitmap Index Scan on idx_t3  (cost=0.00..0.05 rows=5 width=0)  
               Index Cond: (id = (t1.id)::bigint)  
(6 rows)  
```  
绑定变量不受影响，因为绑定变量的类型是指定的。    
```  
postgres=# prepare p (int8) as select * from t3 where id=$1;  
PREPARE  
postgres=# explain execute p(1::int4);  
                             QUERY PLAN                                
---------------------------------------------------------------------  
 Bitmap Heap Scan on t3  (cost=2.64..7.14 rows=5 width=48)  
   Recheck Cond: (id = '1'::bigint)  
   ->  Bitmap Index Scan on idx_t3  (cost=0.00..2.64 rows=5 width=0)  
         Index Cond: (id = '1'::bigint)  
(4 rows)  
postgres=# explain execute p(1::int2);  
                             QUERY PLAN                                
---------------------------------------------------------------------  
 Bitmap Heap Scan on t3  (cost=2.64..7.14 rows=5 width=48)  
   Recheck Cond: (id = '1'::bigint)  
   ->  Bitmap Index Scan on idx_t3  (cost=0.00..2.64 rows=5 width=0)  
         Index Cond: (id = '1'::bigint)  
(4 rows)  
postgres=# explain execute p1(current_date);  
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t3  (cost=2.64..7.14 rows=5 width=48)  
   Recheck Cond: (crt_time = '2017-02-08 00:00:00'::timestamp without time zone)  
   ->  Bitmap Index Scan on idx_t3  (cost=0.00..2.64 rows=5 width=0)  
         Index Cond: (crt_time = '2017-02-08 00:00:00'::timestamp without time zone)  
(4 rows)  
```  
6\. btree_gin暂时还不可用于group by    
```  
postgres=# \d t3  
                 Table "public.t3"  
  Column  |            Type             | Modifiers   
----------+-----------------------------+-----------  
 id       | bigint                      |   
 info     | text                        |   
 crt_time | timestamp without time zone |   
Indexes:  
    "idx_t3" gin (id, info, crt_time)  
postgres=# explain select id from t3 group by id,info,crt_time;  
                                      QUERY PLAN                                        
--------------------------------------------------------------------------------------  
 Group  (cost=10000000074.54..10000000085.24 rows=200 width=48)  
   Group Key: id, info, crt_time  
   ->  Sort  (cost=10000000074.54..10000000077.21 rows=1070 width=48)  
         Sort Key: id, info, crt_time  
         ->  Seq Scan on t3  (cost=10000000000.00..10000000020.70 rows=1070 width=48)  
(5 rows)  
postgres=# explain select id from t3 group by id;  
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Group  (cost=10000000074.54..10000000079.89 rows=200 width=8)  
   Group Key: id  
   ->  Sort  (cost=10000000074.54..10000000077.21 rows=1070 width=8)  
         Sort Key: id  
         ->  Seq Scan on t3  (cost=10000000000.00..10000000020.70 rows=1070 width=8)  
(5 rows)  
btree 可以  
postgres=# \d t1  
                 Table "public.t1"  
  Column  |            Type             | Modifiers   
----------+-----------------------------+-----------  
 id       | integer                     |   
 info     | text                        |   
 crt_time | timestamp without time zone |   
Indexes:  
    "idx_t1_crt_time" btree (crt_time)  
    "idx_t1_id" btree (id)  
postgres=# explain select id from t1 group by id;  
                                    QUERY PLAN                                       
-----------------------------------------------------------------------------------  
 Group  (cost=0.15..34.23 rows=200 width=4)  
   Group Key: id  
   ->  Index Only Scan using idx_t1_id on t1  (cost=0.15..31.40 rows=1130 width=4)  
(3 rows)  
```  
对于character类型，你需要新建一个OPC才能支持GIN       
```  
CREATE OPERATOR CLASS character_ops  
DEFAULT FOR TYPE character USING gin  
AS  
    OPERATOR        1       =(character,character),  
    OPERATOR        5       >(character,character),  
    FUNCTION        1       bpcharcmp(character,character),  
    FUNCTION        2       gin_extract_value_text(text, internal),  
    FUNCTION        3       gin_extract_query_text(text, internal, int2, internal, internal),  
    FUNCTION        4       gin_btree_consistent(internal, int2, anyelement, int4, internal, internal),  
    FUNCTION        5       gin_compare_prefix_text(text,text,int2, internal),  
STORAGE         character;  
postgres=# \d t22  
           Table "public.t22"  
 Column |       Type        | Modifiers   
--------+-------------------+-----------  
 c1     | character(1)      |   
 c2     | character(10)     |   
 c3     | character varying |   
 c4     | "char"            |   
Indexes:  
    "idx1" gin (c3)  
    "idx2" gin (c4)  
postgres=# create index idx3 on t22 using gin (c1 );  
CREATE INDEX  
postgres=# explain select * from t22 where c1='1';  
                            QUERY PLAN                               
-------------------------------------------------------------------  
 Bitmap Heap Scan on t22  (cost=2.61..3.92 rows=1 width=85)  
   Recheck Cond: (c1 = '1'::bpchar)  
   ->  Bitmap Index Scan on idx3  (cost=0.00..2.61 rows=1 width=0)  
         Index Cond: (c1 = '1'::bpchar)  
(4 rows)  
postgres=# select * from t22 where c1='1';  
 c1 | c2 | c3 | c4   
----+----+----+----  
 1  |    |    |   
(1 row)  
```  
## 十 小结        
宝剑赠英雄，美玉配佳人。        
PostgreSQL 数据库，了解越多，才会更加随心所欲，驾驭自如。        
对于任意字段查询，在PostgreSQL中提供了多种索引黑科技：  
1、布隆索引，利用布隆过滤算法，适合在一组字段中进行任意字段或任意组合字段的等值查询。将搜索范围缩小到一个可以接受的范围。  
2、复合Btree索引，适合指定复合搜索字段（包含驱动列时最为高效）的高效率检索。  
3、多列多Btree索引bitmapAnd bitmapOr SCAN，从每个索引中得到满足条件的HEAP BLOCK ID，然后采用bitmap and\or的方式合并，扫描复合条件的HEAP BLOCK(s)。  
4、多列单GIN索引bitmapAnd bitmapOr SCAN，将每一列的元素倒排存储。在多列过滤时，从GIN索引的每个列的倒排数据得到满足条件的HEAP BLOCK ID，然后采用bitmap and\or的方式合并，扫描复合条件的HEAP BLOCK(s)。  
5、BRIN索引，块级索引（非常非常小的索引），通过对数据进行多维空间编排（即聚集存储），可以让BRIN索引支持任意列的高效率组合搜索。通常1亿以上数据，任意两列或两列以上的搜索，可以在100毫秒内返回。  
本文重点介绍了GIN倒排多列索引的原理，用户如果想了解其他的索引，可以参考我的BLOG。  
[《PostgreSQL 应用案例 - 目录》](../201706/20170601_02.md)    
https://github.com/digoal/blog/blob/master/201706/20170601_02.md   
## 参考        
https://www.postgresql.org/docs/9.6/static/indexes-bitmap-scans.html        
https://www.postgresql.org/docs/current/static/indexes-multicolumn.html        
https://www.postgresql.org/docs/9.6/static/btree-gin.html        
https://www.postgresql.org/docs/9.6/static/btree-gist.html        
https://www.postgresql.org/docs/9.6/static/pageinspect.html        
[《深入浅出PostgreSQL B-Tree索引结构》](../201605/20160528_01.md)        
[《B-Tree和B+Tree》](../201606/20160610_01.md)          
[《PostgreSQL GIN索引实现原理》](../201702/20170204_01.md)        
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)     
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")