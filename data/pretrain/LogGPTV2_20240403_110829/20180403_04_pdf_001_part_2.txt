# Using LLVM for Program Transformation
## ANDREW RUEF, UNIVERSITY OF MARYLAND, COMPUTER SCIENCE

### Introduction to LLVM and Runtime Type Information (RTTI)
LLVM's codebase includes its own RTTI for LLVM objects. When writing passes, you can use specific helpers:
- `isa<T>`: Returns true or false if the pointer/reference is of type T.
- `cast<T>`: Performs a "checked cast," asserting on failure if not of type T.
- `dyn_cast<T>`: Performs an unchecked cast, returning null if not of type T.

The project advises against using long chains of these functions to approximate 'match' from ML. Instead, it provides a Visitor pattern for more elegant solutions.

### Common Patterns in LLVM
- **Iterate over BasicBlocks in a Function**: Use `begin()` and `end()` iterators of the `Function` class.
- **Iterate over Instructions in a Function**: Use `inst_iterator`.
- **Iterate over Def-Use Chains**: Use `use_begin` and `use_end`.

### InstVisitor
To avoid large blocks of conditional casts, inherit from the `InstVisitor` class and define a `visitTInst` method. This can help manage control flow more effectively.

### Including LLVM in Your Project
- **llvm-config**: An executable that provides useful information about the installed LLVM, including paths to headers and library files.
- **CMake Integration**: If LLVM is built with CMake, it will add a `FindLLVM.cmake` file to your `/usr/share` directory.
- **Compile Options**: Compiling your code with `â€“fno-rtti` is often required. If you compiled LLVM yourself, you can pass `LLVM_REQUIRES_RTTI` to CMake, especially when combining Boost and LLVM.

### Passes and Transformations
- **Passes**: In the previous lab, we wrote a pass. Compiling involves passing over and analyzing/transforming IR. Most LLVM operations occur within the context of a pass.
- **Pass Dependencies**: Passes can depend on the output of other passes. Analysis passes, such as alias analysis, note their dependencies by overriding the `getAnalysisUsage` method. The `PassManager` manages the dependency graph and optimizes pass ordering.
- **Pass Manager**: Manages dependencies and performs optimizations. It supports different types of passes:
  - **ModulePass**: Runs on the entire module.
  - **FunctionPass**: Runs on individual functions.
  - **BasicBlockPass**: Runs on individual basic blocks.

### Pass Rules
- **Non-analysis Passes**: Should not retain any information about a function or basic block.
- **Analysis Passes**: Should remember some information to justify their execution.
- **Transformation Passes**: Should be idempotent.

### Lab: Escape Analysis
- **Objective**: Ensure that a variable allocated on the local stack does not have a pointer outliving the stack. This can happen if a pointer to a local variable is returned or assigned to a global.
- **Algorithm**:
  - Populate a set of values that escape the function via return or store.
  - Traverse the set, checking for alloca-ed values in the values descending from the escapes.

### Structure of Provided Driver
- The driver is laid out similarly to previous labs.
- A collection of tests is included.

### Projects Built on LLVM
- **Google AddressSanitizer/ThreadSanitizer**: Memory error detector.
- **Utah Integer Overflow Checker**: Checks for integer overflows.
- **Emscripten**: Translates LLVM to JavaScript.
- **Dagger**: Decompiles x86 to LLVM.

### Important LLVM Subprojects
- **poolalloc**: Field-sensitive, context-sensitive alias analysis.
- **lldb**: LLVM debugger.
- **klee**: Symbolic execution for LLVM.
- **FreeBSD**: Uses Clang and is transitioning to building exclusively with Clang.

### Conclusion
- **LLVM Enables Powerful Transformations**: Includes an "industry-grade" C/C++ frontend (Clang), which is the default compiler on macOS and can compile much of the Linux userspace.
- **Well-Defined Intermediate Language**: Provides a modular and pluggable framework for analysis and transformation.

### Project Documentation
- **Online Resources**: [LLVM Documentation](http://www.llvm.org/docs)
- **Programmer's Manual**: Details the finer points of the C++ API.
- **Language Reference**: Ultimate source for language details and semantics.
- **Community Support**: Responsive IRC channel on OFTC and active mailing list.