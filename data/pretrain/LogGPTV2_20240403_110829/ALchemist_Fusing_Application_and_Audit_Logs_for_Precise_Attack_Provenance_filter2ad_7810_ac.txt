open
open
open
execve
0
0
34
0
86
130
152
0
is generality,
Existing commercial log analysis tools such as Splunk [13]
and Elasticsearch [8] have different structures for various
applications’ built-in logs. Different correlation rules may
be needed for various pairs/combinations of logs. As such,
they require intensive human efforts. A very important design
goal of ALchemist
is, minimizing the
efforts of constructing parsers and fusion rules for individual
applications. Therefore, a key design choice is to parse all
logs, including both application logs and the audit log, to an
expressive canonical representation. General log fusion rules
can hence be built on this central representation to reduce
application-speciﬁc efforts. As such, in order to support an
application in ALchemist, we just need to write a parser to
parse its built-in log to the canonical form. According to our
aforementioned study, such efforts are largely one-time.
that
A. Normalizing Logs to the Canonical Form
A Universal Execution Model. In Section III, we identify that
the execution models of popular applications can be mainly
classiﬁed in ﬁve categories. In order to enable the canonical
log representation, we devise a universal execution model that
can describe all these classes and captures all the information
needed in attack forensics. The model features expressing the
asynchronous/background behaviors. It is formally deﬁned in
Fig. 8. An execution consists of a set of units, whose deﬁnition
is similar to that in the literature [53], [33]. A unit is composed
of a sequence of transactions, each of which denotes an atomic
sequential sub-execution of the unit. Each unit may require
multiple transactions to complete its task. Transactions from
different units may interleave, e.g., when they are executed by a
thread. A transaction is composed of a sequence of events that
access certain objects that are of interest for forensic analysts
6
T1 18:06:228331 A2
T2 21:17:468890 A2
-
-
INBOXcreateFilepiMN2BuJQb5d368700piMN2BuJQb
INBOX openFile piMN2BuJQb 603c9b80 piMN2BuJQb
Execution E
U nit u
T ransaction t
Event e
:=
:=
:=
:=
{u1, u2, ...}
t∗ | e+
e+
read/write/create/... (ﬁle | (cid:104)IP,port(cid:105) | URI | ...)
Fig. 8: Universal Execution Model
such as ﬁles, IPs, and URIs. In some cases, a unit does not
have transactions but rather a sequence of events.
The universal model can describe the aforementioned ﬁve
classes. For example, in the task queue execution model (class
III) of ﬁrefox, a unit
is a tab. A transaction is a ﬁrefox
transaction created and dispatched to some worker thread,
which serves many tabs. In the thread pool execution model
(class IV) of apache, a unit is a request. A transaction is the
execution of a thread (from the pool) that handles part of
the request. In some execution models such as class I that
sequentially processes tasks, transactions are not necessary.
Canonical Log Representation. Based on the universal ex-
ecution model, we devise the canonical log form. Each log
event in the application and audit logs are parsed to an entry
in the canonical form. It consists of 20 ﬁelds, which denote
the timestamp, process/thread information, unit id, transaction
id, operation (action), return value, and the resource that is
being accessed, such as ﬁle and IP. Note that many of these
ﬁelds(e.g., unit and transaction ids) may be vacant if the raw
log does not have such information. However, such information
can be inferred through log fusion.
In the following, we show a few examples of raw log
entries and their canonical forms. To save space, we omit the
vacant ﬁelds in the canonical forms. These examples are also
intended to illustrate the beneﬁts of log fusion.
Application Log and the Corresponding Audit Log For
Sample Operations. Fig. 7 shows some (simpliﬁed) sample
application logs and the corresponding audit logs. Speciﬁcally,
Fig. 7(a) shows the log for ﬁrefox downloading a C ﬁle
and then invoking vim to edit it; Fig. 7(b) shows the log
for opening an email in thunderbird and then accessing an
embedded hyper-link. The application logs are on the top and
the corresponding audit logs are on the bottom.
In Fig. 7(a), the application log shows that ﬁrefox ﬁrst
resolves website a.com to IP address 192.168.143.1
(lines 1-2), and then starts a transaction 0xfc9acb80 to
request resource main.c from a.com (lines 4-5). Next,
ﬁrefox saves the ﬁle to /tmp/mozilla /main.c (lines 7-
9). In contrast, at the low level, we see the socket connections
to a local port 127.0.1.1:53 for name resolution (lines
10-12) and then to 192.168.143.1:80 for ﬁle download
(lines 14-16). As audit log does not have semantic information,
PATH 18:06:22 name=~/.thunderbird/INBOXSYSCALL 18:06:22 syscall=open exit=86 ppid=8262 pid=8331 exe=thunderbird...PATH 21:17:46 name=~/.thunderbird/INBOXSYSCALL 21:17:46 syscall=open exit=130 ppid=8262 pid=8331 exe=thunderbird...PATH 21:29:30 name=~/.thunderbird/handlers.jsontype=SYSCALL 21:29:30 syscall=open exit=152 ppid=8331 pid=8903 exe=thunderbird...type=EXECVE a0=firefox a1=http://click.email-puma.com type=SYSCALL 21:29:32 syscall=execve exit=0 ppid=8331 pid=8903 exe=thunderbird18:06:22 [8331] mozStorage ATTACH ‘~/.thunderbird/INBOX’18:06:22 [8331] mozStorage (TranID=0x5d368700)INSERT INTO messageAttributes (folderID, messageID) VALUES (2, piMN2BuJQb)...21:17:46 [8331] mozStorage ATTACH ‘~/.thunderbird/INBOX’21:17:46 [8331] mozStorage (TranID=0x603c9b80)SELECT * FROM messageAttributes (folderID, messageID) VALUES (2, piMN2BuJQb)(b)type=SOCKADDR 15:54:25 host:127.0.1.1 serv:53 type=SYSCALL 15:54:25 syscall=connect exit=0 ppid=2275 pid=2553 exe=firefox...SOCKADDR 15:54:29 host:192.168.143.1 serv:80 SYSCALL 15:54:29 syscall=connect exit=0 a0=23 ppid=2275 pid=2553 exe=firefox...PATH 15:54:48 name=/tmp/mozilla/main.cSYSCALL 15:54:48 syscall=open exit=34 ppid=2275 pid=2553 exe=firefox...type=EXECVE a0=vim a1=/tmp/mozilla/main.c type=SYSCALL 15:59:57 syscall=execve exit=0 ppid=2553 pid=2842 exe=firefox15:54:25 [2553] nsHostResolver (TranID=0xfc9c51b0)a.com has 192.168.143.1...15:54:29 [2553] Socket (TranID=0xfc9acb80) request [TabID = 0, uri=a.com/main.c, referrer=a.com]...15:54:48 [2553] mozStorage (TranID=0xfd9b3380)INSERT INTO moz_annos(attribute_id, content) VALUES ('FileURI', 'file:/tmp/mozilla/main.c’)(a) 101112131415161718192021222324 1 23456789343536373839404142434445464748 252627282930313233it is difﬁcult to know that the network connection at lines 14-
16 is for sending the HTTP request and receiving main.c.
On the other hand, the audit log discloses that ﬁrefox opens
vim (lines 22-24), which is invisible in the application log.
In Fig. 7(b), the application log shows that an email is
received and put into INBOX through a database insertion
operation (lines 25-28) with a folder id and a message id.
Then the email is read through a database selection operation
(lines 30-33). Observe that the highlighted id values (in pink)
denote an email, which is a natural execution unit for the
email client. In the audit log, the email write and read are
recorded as accesses to ﬁle .thunderbird/INBOX, without
any information about the speciﬁc email. On the other hand,
the audit log captures the behavior that the user clicks a link
in the email and then opens a web page (lines 42-48), which
are invisible from the application log.
In addition to being complementary, audit log and appli-
cation logs share a lot of common information, which can be
leveraged in log fusion. For instance, in the ﬁrefox example,
the two levels of logs share the same IP address and the same
ﬁle name; in the thunderbird example, the two levels of logs
share the same INBOX directory and similar timestamps.
Table I shows the reduced canonical representation of audit
log entries. Most ﬁelds are self-explaining. Index ﬁeld is a
global ID; PNAME is the process name; Action represents
the type of the syscall and Return the return value. Similarly,
Table II shows the normalized application logs. Observe that
the normalized audit logs and application log entries can be
correlated through their common ﬁelds. Observe that some
canonical ﬁrefox log entries have the UnitID, TranID and
URI ﬁelds ﬁlled as such information can be directly extracted
from the tab id, transaction id, and resource URL, respectively,
in ﬁrefox’s built-in log. The UnitID’s are missing in some
entries. They will be ﬁlled by log fusion. As shown in the lower
part of Table II, a normalized thunderbird log entry contains
transaction id TranID similar to the ﬁrefox transaction id.
An email is essentially a block inside the INBOX ﬁle and
uniquely identiﬁed by a so-called StorageInfo, for instance
the string “piMN2BuJQb” in the table. Since we consider
continuous operations on an email as an unit, both the URI
and UnitID ﬁelds are ﬁlled with the StorageInfo string.
In ALchemist, we have developed 15 parsers. Most logs
can be expressed using regular expressions, without requir-
ing the more complex context-free or even context-sensitive
languages. As mentioned earlier, most popular applications
have their own logs. For those that do not (e.g., wget in
our benchmark set), ALchemist resorts only to the audit log
to derive dependence. Speciﬁcally, for an application without
its own log, ALchemist conservatively assumes any output
event in the process of the application is dependent on all the
preceding input events in the same process, similar to previous
works [41], [42]. Since these applications are rarely long
running, the conservativeness unlikely leads to undesirable
consequences in practice.
B. Log Fusion
After normalization, ALchemist performs log fusion on
information from
logs. It ﬁrst infers critical
the canonical
built-in log entries of individual applications, e.g., identify-
ing tab switches in ﬁrefox log that serve as execution unit
boundaries. It then correlates logs of different kinds through
their shared ﬁelds to allow information to be propagated
across applications, enabling discovery of new dependencies
and avoiding the bogus ones. While the correlation analysis
can be directly performed among different applications, doing
so incurs quadratic complexity. We hence design a star-shape
fusion scheme, in which each application log is fused with the
common audit log. Information can be propagated from one
application to another through the central audit log. The infer-
ence and fusion procedures are denoted as a set of inference
rules in Datalog [7], which is a Prolog-like representation for
relation computation. Note that these rules are general (i.e.,
not application-speciﬁc). Intuitively, each rule derives a new
relation from existing ones. The inference terminates when a
ﬁxed point is reached.
The rules and the related deﬁnitions are presented in Fig. 9. At
the beginning, we ﬁrst deﬁne a number of types. Speciﬁcally,
an application log event after normalization HR is a relation
of 20 ﬁelds, which are a direct mapping from the canonical
form. An audit event LR is similarly deﬁned. We distinguish
application log event from audit event although they are
normalized to the same canonical form, because the fusion
rules entail different operations on the two kinds. We also call
them high level event and low level event, respectively. We
deﬁne ActionH and ActionL as the type of event for the two
kinds, respectively. For example, switch means switching
to a tab, init and end denote transaction initialization and
termination, respectively.
In the middle of Fig. 9, we deﬁne a number of basic
relations called atoms. These relations are directly acquired
from the normalized log entries without inference. We use form
p(x1, x2,··· , xn) to represent a relation, with p the predicate
··· , xn the variables.
(or name of the relation), and x1,
For instance, isMember(whale, mammal) means that the pair
(whale, mammal) is a tuple in the relation with the name of
isMember, or, the predicate isMember holds on the pair.
Atom (A1) inSeqL(LR1, LR2) denotes that two low-level
events LR1, LR2 are next to each other (in the audit log). Note
that the explanation of each atom is to its right. These atoms
also denote a list of relation short-hands for log entries. For
example, (A7) initU nit(HR, U nitID) denotes an event that
starts a unit, for instance, a ﬁrefox event switching to a new
tab denoted by U nitID. Atoms (A9)-(A13) denote the I/O
related application events. For instance, (A9) denotes reading
a URI, which could be a ﬁle, a remote URL, a ﬁle block, and
so on. Note that URI stands for uniform resource id that can
represent a wide range of resources. We also have a similar
set of I/O atoms for low level events. In fact, we have a total
of 258 atoms and only those necessary for the illustration of
our technique are presented. These atoms are not application
speciﬁc.
After the atoms, we deﬁne a set of inference rules that
derive additional relations from atoms and fuse application and
audit logs. These rules are in the following format.
H :− B1 & B2 & ··· & Bn
Speciﬁcally, H is the target relation, and Bt a predicate
or a relation. It means that the presence of relations B1, B2,
7
AppEvent
Types:
HR
AuditEvent LR
ActionH
ActionL
Action
A
Atoms:
(A1) inSeqL(LR1, LR2)
(A2) atomicL(LR1, LR2)
(A3) sameT ime(T ime1, T ime2)
(A4) inputAction(A)
(A5) outputAction(A)
(A6) sameT ype(A1, A2)
(A7) initU nit(HR, U nitID)
(A8) initT ran(HR, T ranID)
(A9) readURI(HR, URI)
(A10) writeURI(HR, URI)
(A11) resolve(HR, URI, IP )
(A12) readN twk(HR, IP, P ort)
(A13) requestF rom(HR, IP, URI)
:=
:=
:=
:=
:=
:
:
:
:
:
:
:
:
:
:
:
:
:
(cid:104)T ime, IDX, PID, PPID, PNAME, IP, P ort, F ile, U nitID, T ranID, ActionH,
Return, URI : uniform resource identiﬁer, ...(cid:105)
(cid:104)T ime, IDX, PID, PPID, PNAME, IP, P ort, F ile, U nitID, T ranID, ActionL,
Return, ...(cid:105)
switch | request | init | end | readURI | writeURI | · · ·
open | close | socket | connect | read | write | · · ·
ActionH | ActionL
LR1.IDX + 1 = LR2.IDX
LR1 and LR2 belong to the same atomic operation (i.e., socket create and connect)
the two timestamps have negligible difference
A is an input-related action
A is an output related action
A1 and A2 belong to the same I/O type
HR starts a unit U nitID, e.g., ﬁrefox switches to a tab denoted by U nitID
HR starts a transaction with T ranID
HR requests URI
HR writes to URI, e.g., an email denoted by URI
HR resolves URI to IP
HR reads from P ort of IP
HR denotes a remote request from IP for URI
Inference Rules:
/* high level record is correlated to low level record if they operate on the same ip and port */
(R1) correlated(HR, LR)
:- HR.PID = LR.PID & HR.IP = LR.IP & HR.P ort = LR.P ort
& sameT ype(HR.ActionH, LR.ActionL)
/* high level record is correlated to low level record if they operate on the same ﬁle */
(R2) correlated(HR, LR)
/* high level record is mapped to the nearest correlated low level record */
(R3) project(HR, LR)
/* if two low level records belong to the same atomic action (e.g. socket create and connect), they are all mapped to the same high level record */
(R4) project(HR, LR)
:- HR.PID = LR.PID & HR.F ile = LR.F ile & sameT ype(HR.ActionH, LR.ActionL)
correlated(HR, LR) & sameT ime(HR.T ime, LR.T ime)
project(HR, LR1) & atomicL(LR, LR1)
:-
:-
/* two high level events belong to the same transaction if they have the same transaction id */
:- HR1.T ranID = HR2.T ranID
(R5) sameT ran(HR1, HR2)
/* two high level events with the same unit id belong to the same unit */
(R6) sameU nitH(HR1, HR2)
:- HR1.U nitID = HR2.U nitID
/* two high level events with the same transaction id belong to the same unit
(R7) sameU nitH(HR1, HR2)
/* two high level events with different transaction id belong to the same unit if the ﬁrst transaction initializes the second one
(R8) sameU nitH(HR1, HR2)
initT ran(HR1, HR2.T ranID)
sameT ran(HR1, HR2)
:-
:-
/* two low level events belong to the same unit if the corresponding high level records belong to same high level unit */
(R10) sameU nitL(LR1, LR2)
/* a low level record is in the same unit as its preceding low level record if itself is not projected to a high level record */