parameters as cando. do(X,Y,+,Z) expresses a ﬁnal
authorization to permit/prohibit a holder of the at-
tribute set X is in using to services Y depending on
the sign + or -.
Definition 1
(ABAC rules and policies). ABAC
policies are constructed using reserved predicates and possi-
bly other application speciﬁc predicates as follows.
1. Rules using cando heads must be of the form
cando(X, Y,±,{∅})←B where the body B must not have
any other reserved predicates. These are used to state
basic facts about granting/denying access to services.
2. Rules using dercando heads must conform to the fol-
lowing restrictions.
(a) dercando can appear in their bodies only posi-
tively.
(b) The bodies of a rule with a dercando head can
have cando and non-reserved predicates.
(c) Any rule with a dercando head must be of the
form given below where dercando(−, Y −,±,
Z1), . . ., dercando(−, Y −,±, Zn) are the only oc-
currences of dercando in the body and Li are ei-
ther cando or any application speciﬁc (non-recur-
sive) predicate. Here the - in predicate instances
such as dercando(−, Y −,±, Z1) means that the
term could be anything of the appropriate sort.
dercando(−,−,−, Z) ←
(1)
dercando(−, Y −,±, Z1), . . .
dercando(−, Y −,±, Zn),
Z1 ∈ Z, . . . Zn ∈ Z
L1, . . . Lm, . . . , Z1 ∈ Z, . . . Zn ∈ Z
3. Rules with a do(X, Y, +, Z), as their head must also
conform to the second restriction for dercando but can
have only dercando, cando or application speciﬁc (non-
recursive) predicates in their body.
4. The only rule with a do(−,−,−,−) head is of the form
do(X, Y,−,{Z})←¬do(X, Y, +, Z), where the third at-
tribute is a negative sign.
Any ﬁnite collection of rules conforming to constraints (1)
through (3) and one rule (4) is said to be an ABAC policy.
We usually use P as a symbol for an ABAC policy.
Example 2. A policy for the digital library hierarchies
in example 1 is that members can check their membership
status by submitting the membership ID or alternatively us-
ing their name and mother’s maiden name. Any member
can also browse the table of contents (toc). Senior members
and fellows are allowed to browse the abstracts and contents.
Printing is free for fellows, but others pay for printing priv-
ileges. Members paying in dollars print on letter quality
paper and those paying in euros print on A4 paper.
cando({y}, X, +,{∅}) ←
memID(y), memStatus({y}, X).
cando({y, z,{y}}, X, +,{∅}) ←
isAN ame(y), isAN ame(z),
memM other(y, z), memStatus({y, z}, X)
dercando(X, Y, Z,{U}) ←
cando(X, Y, Z, U )
(2)
(3)
(4)
(5)
dercando(U,{{dlS, br, brT OC} | X}, +,{Z}) ←
(6)
dercando(U, X, +, Z), X (cid:17)= ∅
We have an application speciﬁc binary predicate
memStatus(−,−), with two set arguments, where
memStatus(X, Y ) holds iﬀ Y is the proﬁle of the entity
identiﬁed by the attribute set X. For example, a user identi-
ﬁed by the member ID where X = {ID1234} has the proﬁle
Y = {senior−member, began−01−01−1960, paidT o−05−
05 − 2005, Address − M odena − Italy}. We use three other
application speciﬁc predicates memID(−), isAN ame(−),
and memM other(−,−). memID(x) is true if x is a mem-
ber, and isAN ame(x) holds iﬀ x is a name. Appropriate
instances of
memM other(x, y) must exists at the access controller.
Rule (3) says that X is the membership status that can be
obtained for the attribute {y} (i.e. member ID). Rule (4)
says that X is the obtainable membership status for the at-
tributes {name, mothersname} pair. (Notice that {y,z,{y}}
is used to model the ordered pair (y,z) as a set in ZF set
dlS
br
ckStat
print
patron
payment
brToC
brAbs
brCont
letter
A4
member
senior
fellow
dollar
euro
Figure 1: An example of Attribute Hierarchies
dercando(U,{{dlS, br, brT OC},{dlS, br, brAbs},{dlS, br, brCont} | X}, +,{Z}) ← senior ∈ X
dercando(U,{{dlS, br, brT OC},{dlS, br, brAbs},{dlS, br, brCont} | X}, +,{Z}) ← f ellow ∈ X
dercando(U, X, +, Z)
dercando(U, X, +, Z)
dercando({pay,{pay, dollar} | U},{print,{print, letter} | X}, +, Z) ← dercando(U, X, +, Z
(cid:3)
),
(cid:3) ∈ Z
f ellow /∈ X, X (cid:17)= ∅, Z
dercando({pay,{pay, euro} | U},{print,{print, A4} | X}, +, Z) ← dercando(U, X, +, Z
(cid:3)
),
(cid:3) ∈ Z
f ellow /∈ X, X (cid:17)= ∅, Z
dercando(U,{print | X}, +, Z) ← dercando(U, X, +, Z
(cid:3)
),
(cid:3) ∈ Z
f ellow ∈ X, Z
do(U, X, +, Z) ← dercando(U, X, +, Z
do(U, X,−, Z) ← ¬do(U, X, +, Z
), Z
(cid:3)
), Z
(cid:3) ∈ Z
(cid:3)
(cid:3) ∈ Z
(7)
(8)
(9)
(10)
(11)
(12)
(13)
theory.) Notice that the membership status obtainable us-
ing rules (3)and (4) may not be the same, as we are in an
identity-less system. As seen, speciﬁed policies do not have
to divulge the same user proﬁles. Rule (5) facilitates using
information available in the cando predicates to be used in
recursive queries. Rule (7) permits any member (identiﬁed
by having a nonempty proﬁle) to browse the table of contents
of the digital library. Similarly, rules (7) and (8) state that
senior members and fellows can browse abstracts and the
contents of the digital library. Rule (9) and (10) states that
in addition to other privileges, non-fellows can either pay
in dollars and obtain prints on letter paper or pay in euros
and obtain copies on A4 paper. Rule (11) says that fellows
can print, without paying. Conversely, the policy does not
state what paper must be used by them.
If we wanted to
allow both kinds of paper, either inclusively or exclusively
then the rule (11) could be modiﬁed to rule (14) or rules
(15) and (16). Finally rules (12) and (13) applies the policy
of prohibiting any accesses that are not explicitly permitted
by the previous rules. Notice that the given policy explicitly
stratiﬁes all instances of rules, where the strata are given
by the rank of the last variable of the head predicates. All
cando predicates belong to the ﬁrst strata as the rank of its
ﬁrst predicate {∅} is 1. All instances of dercando predicates
where the service term has browsing options have strata 3,
as the dercando head in rule (5) has strata 2, and therefore
any dercando instance from rules (7) through (8) has strata
3. Similarly, any dercando predicate where the service term
has a printing term has strata 4, as these come from rules
(9) through (11). Finally, according to rules (12) and (13),
all instances of do with a (+) third variable instance has
rank 5, and those with a (-) third variable instance has rank
6. But again, rules 7 through 11 can be recursive, giving
many other ranks for these predicates instances.
4. SEMANTICS
This section describes models of ABAC policies. As stated
in Deﬁnition 1, an ABAC policy consists of a ﬁnite collec-
tion of rules with cando, dercando and do(-,-,+,-) heads
and one rule with a do(-,-,(-),-) head. Of these rules, only
dercando rules are recursive. But as a constraint logic pro-
gram, it has a three valued Kripke-Kleene model [Kun87,
Fit85] where every predicate instance evaluates to one of
three truth values true, false or undeﬁned. We will shortly
show that every query (a request) will evaluate to either
true or false, and therefore has only two truth values - en-
suring that every access request is either granted or denied.
Because we allow nested negative predicates, we need to in-
terpret negation. We can either use negation as failure or
constructive negation [Cha88, Cha89] as proposed by Fages
[FG96, Fag97]. This is because the third alternative namely
using constructive negation as proposed by Stuckey [Stu91,
Stu95] requires that the constraint domain be admissibly
closed. But Dovier shows that set constraints as we use
them in ABAC policies are not admissibly closed, and pro-
poses an alternative formulation to handle nested negations
[DPR01]. Conversely, at the cost of requiring some unifor-
mity in computing negated subgoals of a computation tree,
Fages’s formulation does not require the constraint domain
to be admissibly closed [FG96, Fag97]. Formalities follow.
We ﬁrst repeat some standard deﬁnitions in [Fit02] to clar-
ify notations. This enables us to describe a materilization
structure for three-valued models in section 5.2.
dercando(U,{print,{print, letter},{print, A4} | X}, +, Z) ← dercando(U, X, +, Z
(cid:3) ∈ Z
dercando(U,{print,{print, letter} | X}, +, Z) ← dercando(U, X, +, Z
(cid:3) ∈ Z
dercando(U,{print,{print, A4} | X}, +, Z) ← dercando(U, X, +, Z
(cid:3) ∈ Z
f ellow ∈ X, Z
f ellow ∈ X, Z
f ellow ∈ X, Z
(cid:3)
(cid:3)
(cid:3)
),
),
),
(14)
(15)
(16)
∗
∗
(P
Definition 2
, TP and ΦP ↑ operators). Let P be
be all ground instances of clauses
a logic program, and let P
in P . We take A← as A and any ground atom A not in
the head of any rule as A←false. We now deﬁne two
and three valued truth lattices to be 2 = (cid:27){T, F}, <2(cid:28) and
3 = (cid:27){T, F,⊥}, <3(cid:28) respectively, where T , F and ⊥ are taken
to mean true, false and unknown truth values. Partial or-
derings <2 and <3 satisfy as F <2 T and ⊥ <3 T,⊥ <3 F
respectively. A mapping V from ground atoms of P to 2 and
3 is said to be respectively a two-valued or a three-valued val-
uation of P . Given a valuation V , the two and three valued
immediate consequence operators TP (V ) and ΦP (V ) are de-
ﬁned as follows.
TP (V ): TP (V ) = W is deﬁned as:
• W (H) = T if there is a ground clause
H←B1, . . . , Bn in P
i ≤ n.
• W (H) = F otherwise.
∗
such that V (Bi) = T for
ΦP (V ): ΦP (V ) = W is deﬁned as:
• W (H) = T if there is a ground clause
such that V (Bi) = T for
• W (H) = F if for every ground clause
where V (Bi) = F holds for
∗
H←B1, . . . , Bn in P
i ≤ n.
H←B1, . . . , Bn in P
some i ≤ n.
• W (H) = ⊥ otherwise.
∗
In evaluating Φ, negation is interpreted as ¬T = F,¬F =
T and ¬⊥ = ⊥. Now we deﬁne bottom-up semantic opera-
tors for both TP and ΦP , where Ψ stand for either of them
in the following.