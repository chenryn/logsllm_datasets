    }
如此修改后，`docunt()`函数就可以进行内联了，并且可以保证函数的健壮性。
### **_7.4 让Pin决定插桩位置_**
在某些情况下，我们不关心具体在什么位置进行插桩，只要保证插桩代码位于基本块内部即可。在这种情况下，我们可以将插桩位置的选择权交给Pin自身，Pin可以选择需要最少寄存器进行保存和恢复的插入点，提升性能。
一个样例如下：
    #include 
    #include 
    #include "pin.H"
    using std::cerr;
    using std::endl;
    using std::ios;
    using std::ofstream;
    using std::string;
    ofstream OutFile;
    // 记录运行的指令的数量，设置为静态变量方便编译器优化docount函数
    static UINT64 icount = 0;
    // 在每个块之前调用该函数
    // 对calls使用fast linkage
    VOID PIN_FAST_ANALYSIS_CALL docount(ADDRINT c) { icount += c; }
    // Pin在遇到一个新块时调用，插入对docount 函数的调用
    VOID Trace(TRACE trace, VOID* v)
    {
        // 检查trace中的每个基本块
        for (BBL bbl = TRACE_BblHead(trace); BBL_Valid(bbl); bbl = BBL_Next(bbl))
        {
            // 对每个bbl插入对docount函数的调用，将指令数量作为参数传递
            // IPOINT_ANYWHERE参数允许Pin在bbl内部任意位置插入call以获取最好的性能
            // 对call使用fast linkage
            BBL_InsertCall(bbl, IPOINT_ANYWHERE, AFUNPTR(docount), IARG_FAST_ANALYSIS_CALL, IARG_UINT32, BBL_NumIns(bbl), IARG_END);
        }
    }
    KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "inscount.out", "specify output file name");
    // 程序退出时调用
    VOID Fini(INT32 code, VOID* v)
    {
        OutFile.setf(ios::showbase);
        OutFile 
    #include 
    #include "pin.H"
    FILE* trace;
    const INT32 N = 100000;
    const INT32 M = 50000;
    INT32 icount = N;
    /*
     *  IP-sampling分析routine实现:
     *
     *        VOID IpSample(VOID *ip)
     *        {
     *            --icount;
     *            if (icount == 0)
     *            {
     *               fprintf(trace, "%p\n", ip);
     *               icount = N + rand() % M;
     *            }
     *        }
     */
    // 计算icount
    ADDRINT CountDown()
    {
        --icount;
        return (icount == 0);
    }
    // 打印当前指令的IP并且icount被重置为N和N+M中的一个随机数
    VOID PrintIp(VOID* ip)
    {
        fprintf(trace, "%p\n", ip);
        // 准备下次计算
        icount = N + rand() % M;
    }
    VOID Instruction(INS ins, VOID* v)
    {
        // 每条指令执行后都会调用CountDown()
        INS_InsertIfCall(ins, IPOINT_BEFORE, (AFUNPTR)CountDown, IARG_END);
        // 只有当CountDown返回非0值时才会调用PrintIp() 
        INS_InsertThenCall(ins, IPOINT_BEFORE, (AFUNPTR)PrintIp, IARG_INST_PTR, IARG_END);
    }
    VOID Fini(INT32 code, VOID* v)
    {
        fprintf(trace, "#eof\n");
        fclose(trace);
    }
    /* ===================================================================== */
    /* Print Help Message                                                    */
    /* ===================================================================== */
    INT32 Usage()
    {
        PIN_ERROR("This Pintool samples the IPs of instruction executed\n" + KNOB_BASE::StringKnobSummary() + "\n");
        return -1;
    }
    /* ===================================================================== */
    /* Main                                                                  */
    /* ===================================================================== */
    int main(int argc, char* argv[])
    {
        trace = fopen("isampling.out", "w");
        if (PIN_Init(argc, argv)) return Usage();
        INS_AddInstrumentFunction(Instruction, 0);
        PIN_StartProgram();
        return 0;
    }
使用条件插桩API
`INS_InsertIfCall()`和`INS_InsertThenCall()`来告诉Pin只有当`CountDown()`执行结果非0时，才执行`PrintIp()`。这样一来，`CountDown()`函数就可以内联在Pin中，对于没有内联的PrintIp()则只有在满足条件时才会执行一次。
`INS_InsertThenCall()`插进去的函数只有在`INS_InsertIfCall()`插进去的函数返回非0值时才会执行。这个功能可以说是一个十分巧妙的功能。
## **_8\. 构建自己的Pintool_**
在开发自己的Pintool时，可以copy一份example目录，
然后在`makefile.rules`文件中添加上自己的tool，可以以最简单的MyPinTool为模版。
### **_8.1 在套件目录树内进行构建_**
如果直接修改`MyPinTool`，并且没有特殊的编译需求，则直接使用默认配置就好。如果要新增tool或者需要指定特殊的构建标志，则需要修改`makeifile.rules`文件。
构建YourTool.so(源文件为YourTool.cpp)：
    make obj-intel64/YourTool.so
如果想编译成IA-32架构，则使用“obj-ia32”替换“obj-intel64”即可。
### **_8.2 在套件目录树外构建_**
copy文件夹`MyPinTool`到指定位置子，然后编辑`makefile.rules`文件。
    make PIN_ROOT= obj-intel64/YourTool.so
要更改将创建工具的目录，可以从命令行覆盖 OBJDIR 变量：
    make PIN_ROOT= OBJDIR= /YourTool.so
## **_9\. Pin的makefile_**
### **_9.1 配置目录_**
目录`source/tools/Config`中存放了make配置的基本文件，不要轻易修改这些文件，可以基于其中的模版文件进行更新。
下面对其中的几个关键文件进行说明：
  * makefile.config：在include链中第一个应该include的文件。它保存了用户可用的所有相关标识和变量的文档，此外还包括特定于OS的配置文件。
  * unix.vars：该文件包含makefile使用的一些架构变量和实用程序的Unix定义。
  * makefile.default.rules：该文件包含默认的make目标、测试用例和构建规则。
### **_9.2 测试目录_**
`source/tools`目录下的每个测试性质的目录中都包含makefile链中的两个文件：
  * makefile：运行make时调用，不要修改。其中保存了makefile链的所有相关配置文件的包含指令，属于通用文件，在所有的测试目录中都是相同的。
  * makefile.rules：目录特定文件，不同测试目录，文件内容不同。它保存了当前目录的逻辑，应该在目录中构建和运行的所有工具、应用程序和测试等都在该文件中进行定义。
### **_9.3 向makefile中添加测试、工具和应用_**
下面介绍如何通过makefile构建二进制程序并运行测试。以下描述的变量都在`makefile.rules`文件的"Test targets"部分进行描述：
  * TOOL_ROOTS：定义工具名称，不带文件扩展名，具体的文件扩展名将由make自动添加，例如YourTools.so；
  * APP_ROOTS：定义应用程序，不带文件扩展名，具体的文件扩展名将由make自动添加，例如YourApp.exe；
  * TEST_ROOTS：定义测试，不要加.test后缀，make会自动添加，例如YourTest.test。
### **_9.4 定义构建规则_**
默认使用的构建规则是`source/tools/Config/makefile.default.rules`，输入为单一的c/cpp文件，生成相同名字的二进制程序。如果输入为多个源文件，且需要自定义构建规则，可以在`make.rules`文件的"Build
rules"部分的末尾添加。如下是规则例子：
构建单一源文件且不进行优化：
    # Build the intermediate object file.
    $(OBJDIR)YourTool$(OBJ_SUFFIX): YourTool.cpp
      $(CXX) $(TOOL_CXXFLAGS_NOOPT) $(COMP_OBJ)$@ $<
    # Build the tool as a dll (shared object).
    $(OBJDIR)YourTool$(PINTOOL_SUFFIX): $(OBJDIR)YourTool$(OBJ_SUFFIX)
      $(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $< $(TOOL_LPATHS) $(TOOL_LIBS)
构建多源文件且进行优化：
    # Build the intermediate object file.
    $(OBJDIR)Source1$(OBJ_SUFFIX): Source1.cpp
      $(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<
    # Build the intermediate object file.
    $(OBJDIR)Source2$(OBJ_SUFFIX): Source2.c Source2.h
      $(CC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<
    # Build the tool as a dll (shared object).
    $(OBJDIR)YourTool$(PINTOOL_SUFFIX): $(OBJDIR)Source1$(OBJ_SUFFIX) $(OBJDIR)Source2$(OBJ_SUFFIX) Source2.h
      $(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^**:**%.h**=**) $(TOOL_LPATHS) $(TOOL_LIBS)
### **_9.5 在makefile.rules定义测试片段_**
在"Test recipes"部分自定义自己的测试需求，例如：
    YourTest.test: $(OBJDIR)YourTool$(PINTOOL_SUFFIX) $(OBJDIR)YourApp$(EXE_SUFFIX)
      $(PIN) -t $< -- $(OBJDIR)YourApp$(EXE_SUFFIX)
### **_9.6 变量和标志_**
摘取`makefile.config`中几个重点的标志进行说明：
`IN_ROOT`：在套件外构建工具时指定Pin套件的位置。
`CC`: 指定工具的默认c编译器。
`CXX`：指定工具的默认c++编译器。
`APP_CC`：指定应用程序的默认 c 编译器。如果未定义，APP_CC 将与 CC 相同。
`APP_CXX`：指定应用程序的默认 c++ 编译器。如果未定义，APP_CXX 将与 CXX 相同。
`TARGET`：指定默认目标架构，例如交叉编译。
`ICC`: 使用英特尔编译器构建工具时指定 ICC=1。
`DEBUG`: 当指定 DEBUG=1 时，在构建工具和应用程序时会生成调试信息。此外，不会执行任何编译和/或链接优化。
* * *