title:Leveraging Hardware Transactional Memory for Cache Side-Channel Defenses
author:Sanchuan Chen and
Fangfei Liu and
Zeyu Mi and
Yinqian Zhang and
Ruby B. Lee and
Haibo Chen and
XiaoFeng Wang
Leveraging Hardware Transactional Memory for Cache
Side-Channel Defenses
Fangfei Liu
Zeyu Mi
Sanchuan Chen
The Ohio State University
PI:EMAIL
Intel Corporation
PI:EMAIL
Shanghai Jiao Tong
University
PI:EMAIL
Yinqian Zhang
The Ohio State University
yinqian@cse.ohio-state.
edu
Ruby B. Lee
Princeton University
PI:EMAIL
Haibo Chen
Shanghai Jiao Tong
University
PI:EMAIL
XiaoFeng Wang
Indiana University at
Bloomington
PI:EMAIL
ABSTRACT
A program’s use of CPU caches may reveal its memory access
pattern and thus leak sensitive information when the program
performs secret-dependent memory accesses. In recent studies, it
has been demonstrated that cache side-channel attacks that ex-
tract secrets by observing the victim program’s cache uses can be
conducted under a variety of scenarios, among which the most con-
cerning are cross-VM attacks and those against SGX enclaves. In
this paper, we propose a mechanism that leverages hardware trans-
actional memory (HTM) to enable software programs to defend
themselves against various cache side-channel attacks. We observe
that when the HTM is implemented by retrofitting cache coherence
protocols, as is the case of Intel’s Transactional Synchronization
Extensions, the cache interference that is necessary in cache side-
channel attacks will inevitably terminate hardware transactions.
We provide a systematic analysis of the security requirements that
a software-only solution must meet to defeat cache attacks, propose
a software design that leverages HTM to satisfy these requirements
and devise several optimization techniques in our implementation
to reduce performance impact caused by transaction aborts. The em-
pirical evaluation suggests that the performance overhead caused
by the HTM-based solution is low.
1 INTRODUCTION
Cache side-channel attacks are one type of security threats that
break the confidentiality of a computer system or application which
have several variants, e.g., Prime-Probe [9, 12, 16, 17, 26], Flush-
Reload [23, 24, 27], Evict-Time [21], and Cache-Collision [3]
attacks. These attacks differ in ways they are conducted, their un-
derlying assumptions about the attack scenarios, and exploitable
levels of CPU caches (e.g., L1, LLC), which makes the construction
of effective defenses challenging.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196501
Existing defenses against these attacks are generally classified
into one of the three categories: hardware defenses, system-level
defenses and software-level defenses. Hardware defenses propose
new hardware designs to eliminate cache side-channel attacks from
the root cause, e.g., by randomizing cache accesses, partitioning
cache regions, etc. Some of these approaches are particularly effec-
tive against certain types of attacks while preserving performance
efficiency [22]. However, it usually takes a very long time for a
novel cache design to be adopted in commercial products. In con-
trast, system-level defenses leverage the privileges of an operating
system or hypervisor to enforce isolation between unprivileged soft-
ware components by static cache partition [19] or dynamic cache
partition [10, 11, 29], or to add random noise into side-channel
observations [28]. System-level defenses can be effective solutions
to many types of side-channel threats, but also come with the draw-
backs of being very specific to the attacks they aim to defeat, usually
at the cost of inefficient use of hardware resources, and more impor-
tantly not applicable in cases where the system software is not fully
trusted. A third approach, software-level defenses, transforms the
victim software itself to eliminate secret-dependent control flow and
data flow [14], or to diversify the victim software to enforce proba-
bilistic defenses [5]. Software-level defenses face the challenges of
generalizing the protection to arbitrary software programs and at
the same time to maintain low performance overhead.
In this paper, we present a mechanism to enable software appli-
cations to defend themselves against a wide range of cache side-
channel attacks. Our solution leverages an existing hardware-based
performance enhancement feature, hardware transactional mem-
ory (HTM), available on modern commercial processors to deter-
ministically eliminate cache side-channel threats. The hardware
transactional memory is usually implemented through cache, such
as Intel’s Transactional Synchronization Extensions (TSX) [4]. The
hidden assumption of this mechanism is that whenever the cache
line contained in the read set or write set is evicted out of the cache,
it loses track of the cache line, therefore the transaction will abort,
and all the modifications are rolled back.
In this work, we particularly explore Intel TSX as a case study,
and show how such hardware features, when facilitated by a set
of software mechanisms, can be leveraged to defeat known cache
side-channel attacks that target various cache levels. To do so, we
systematically analyzed four types of side-channel attacks, includ-
ing Prime-Probe, Flush-Reload, Evict-Time, Cache-Collision,
and enumerated the security requirements that the software so-
lution must meet to defeat all these types of cache side-channel
attacks. Guided by the security requirements, we propose a system
design that uses Intel TSX to protect security-critical regions from
cache attacks and elaborated the implementation efforts to satisfy
the requirements. We applied the solution to the vulnerable imple-
mentation of AES and ECDSA algorithm in OpenSSL and vulnerable
modular exponentiation algorithm (used in RSA and ElGamal al-
gorithms) in the mbedTLS-SGX library. Experimental evaluation
suggests that the induced performance overhead is small.
In summary, we make the following contributions in this paper:
• An analysis of security requirements for software solutions to
defeat all four types of side-channel attacks, including Prime-
Probe, Flush-Reload, Evict-Time, Cache-Collision attacks.
• A software-level solution leveraging hardware transactional
memory features in commodity processor to enable a program
to protect itself from a wide range of cache side-channel attacks.
• Case studies of applying the solution to the AES, RSA and
ECDSA implementations of popular open-source cryptographic
libraries, such as OpenSSL and mbedTLS-SGX, demonstrating the
efficiency of the protected algorithms.
2 BACKGROUND
Cache Side-Channel Attacks. Cache side-channel attacks exploit
the timing difference between cache hits and cache misses to infer
the victim’s memory access patterns, hence indirectly deduce the
secret information if it is dependent on such access patterns. Secret
information can be modulated into the memory accesses through
secret-dependent control flow or secret-dependent data flow.
Cache side-channel attacks are conventionally categorized into
access-driven attacks and timing-driven attacks. In access-driven
attacks, attacker can observe which cache lines have been accessed
by victim by measuring his own memory access time, e.g., Prime-
Probe and Flush-Reload attacks. In timing-driven attacks, attacker
can measure execution time of some fragment of victim program,
e.g., Evict-Time and Cache-Collision.
To systemetically model the threats we consider, we formally
define a cache side-channel attack as 4-tuple: (C, M, L, G), which
refers to type of caches exploited, attack method used, type of
information leakage, and the granularity of information learned
by attacker, respectively. We particularly consider two types of
G: synchronous attacks (SYNC) and asynchronous attacks (ASYNC).
In synchronous attacks, attacker is assumed to explicitly interact
with victim by invoking victim’s execution through regular service
interface. In contrast, in asynchronous attacks, we do not assume
any explicit interaction and assume an “asynchronous” attacker to
perform multiple cache measurements during victim’s execution.
We summarize prior studies in cache side-channel attacks in Table 1.
Transactional Memory. Transaction memory is a parallel pro-
gramming model for coordinating concurrent reads and writes of
shared data, without the use of locks for synchronization. One of
the simplest and most widely implemented Hardware Transaction
memory (HTM) is the cache-based HTM. CPU cache serves as a
natural place to track a transaction’s read set and write set because
memory accesses involve cache lookups. Furthermore, existing
Table 1: Existing cache side channel attacks in literature.
Cache Side-Channel Attacks
(L1C, Prime-Probe, *, ASYNC)
(L1C, Prime-Probe, data, SYNC)
(LLC, Prime-Probe, inst, ASYNC)
(LLC, Prime-Probe, data, SYNC)
(L1C, Flush-Reload, data, ASYNC)
(LLC, Flush-Reload, inst, ASYNC)
(LLC, Flush-Reload, *, SYNC)
(L1C, Evict-Time, data, SYNC)
(LLC, Evict-Time, data, SYNC)
(L1C, Cache-Collision, data, SYNC)
Literature
[16–18, 26]
[17, 21]
[23, 24]
[27]
[2, 17, 21]
[12]
[9]
[8]
[1]
[3]
cache coherence protocol can be easily extended for conflict de-
tection. In cache-based HTMs, a transaction must be terminated
whenever an overflow occurs due to set associativity conflicts.
3 SECURITY REQUIREMENTS AND SYSTEM
DESIGN
pendent of the cache hits and misses.
critical region are independent of its sensitive code or data.
3.1 Security Requirements
To defeat various cache side channels we listed in Table 1, a software
solution must satisfy the following design goals:
• S1: Cache lines loaded in the security-critical regions cannot
be evicted or invalidated during the execution of the security-
critical regions. If so it happens, the code must be able to detect
such occurrences.
• S2: The execution time of the security-critical region is inde-
• S3: The cache footprints after the execution of the security-
• P1: Performance overhead for the protected program is low
without attacks.
We argue by satisfying the security goals (S1 - S3), we can prevent
all types of cache side-channel attacks we consider. The security
analysis is listed as follows.
• Asynchronous attacks: Asynchronous attacks can only be per-
formed using Prime-Probe or Flush-Reload techniques. In
either case, the attacker needs to evict (or invalidate) the vic-
tim’s loaded cache lines out of the cache during the execution of
the victim process. S1 guarantees that such activities will not
be conducted successfully without being detected.
• Synchronous timing-driven attacks: In these synchronous timing-
driven attacks, the attacker does not perform measurements
during the execution of the victim, hence achieving S1 only can-
not defeat the attacks. However, S2 guarantees that the attacker
cannot extract any information from the execution time.
• Synchronous access-driven attacks: In these attacks, the at-
tacker tries to infer information from the cache footprints of the
security-critical regions after the execution of the victim process.
S3 guarantees that the attacker cannot obtain information by
observing the cache footprints.
3.2 System Design
Each of the security-critical regions is first enclosed into a single
HTM-based transaction, as shown in Listing 1.
Satisfying S1 using TSX: Our key insight is that the root cause
of many cache side channels is that victim’s cache lines can be
evicted by the adversary during the execution of the sensitive oper-
ations. How exactly transaction aborts can be associated with cache
Listing 1: Pseudo code for the prudent design.
if (_xbegin() == _XBEGIN_STARTED)
break;
retry++;
if (retry == THRESHOLD)
goto fail;
1 while(1) {
2
3
4
5
6
7 }
8
9
10
11
12
13 fail:
14
preload();
//
// security-critical region;
//
_xend();
failure handler;
action out of LLC will abort the transaction.
line evictions is clouded by the interaction with multiple layers of
processor caches and undisclosed implementation details of TSX.
We empirically study the implementation of Intel TSX by conduct-
ing a series of experiments, which can be found in Appendix A.
Through these experiments, we have concluded with the following
observations:
• O1: Eviction of cache lines written in a transaction out of L1 data
cache will terminate the transaction, while eviction of cache
lines read in the transaction will not.
• O2: Eviction of data read and instructions executed in a trans-
• O3: Transactions will abort upon context switches.
We note that as observed in O1, when the cache lines that are
read during the transaction are evicted out of the L1 cache by
another thread sharing the same core, transaction will not abort.
Therefore, Intel TSX cannot be used to protect against cache attacks
when Intel HyperThreading is enabled.
Satisfying S2 and S3 by cache preloading: One promising ap-
proach to achieve S2 and S3 is to normalize cache usage inside the
transactions, by either preloading all sensitive memory regions at
the beginning of the transaction or touching all these regions at the