if { (flag&x) == 0) {
flag |= x;
if ( (flag&2) == 0) {
flag |= 2 ;
app1icationInfo.flags = flag;
paran.setRegult (v2) ;
}) ;
Forcing the application debug fag in getPackagelnfo function of
PackageManagerService to debug state will force the debug mode to open, allowing
us to finish dynamic debugging in any rooted device.
4.2.2IDA
When reverse engineering native libraries, IDA is better than other reversing tools
such as JEB, and its dynamic debugging can greatly accelerate the speed of Android
Native layer reverse engineering. This section mainly discusses how to use IDA to
analyse Android native libraries (so files).
---
## Page 292
4.2 APK Reverse Tool
277
Apou
83
L'F
---
## Page 293
278
4APK
fish:/5
er64
Fig, 4.8 IDA use android_server debug Android Native Libraries
DebuggerOptionsWindowsHelp
Run
Attach
4
Local Bochs debugger
IDA v6.95.160808
Local Mac OS X debugger
口
Local PIN debugger
Local Replayer debugger
Remote ARMLinux/Android debugger
Remote GDB debugger
Remote Linux debugger
Remote Mac OS X debugger
Remote WinCE debugger (TCP/IP)
Remote Windows debugger
Remote iOS debugger
Fig, 4.9 IDA debugging interface
IDA’s own tool android_server is needed for Android native layer debugging: for
32-bit Android phones, use the 32-bit android_server and the 32-bit IDA; for 64-bit
Android phones, use the 64-bit android_server and the 64-bit IDA. If you want to
change the permissions, see Fig. 4.8.
qpe aq asn o1 paou no. nejap q 9f6 uod uo uais m saas Snqap s,v
forward command to forward Android port commands to the local machine.
adb forward tcp :23946 tcp :23946
Open the IDA Remote ARM/Android Debugger, see Fig. 4.9.
For Hostname, select the default 127.0.0.1 or local IP address. For Port, select the
default 23946, see Fig. 4.10.
Then choose the application to be debugged, see Fig. 4.11.
Go to the IDA main page and select modules, find the native layer so file
corresponding to the process, see Fig. 4.12.
Double-click to open the export table of the so, find the native function you want
to debug (see Fig. 4.13), then double-click to enter the function page, we can then set
breakpoints and inspect the register changes (see Fig. 4.14).
---
## Page 294
4.2 APK Reverse Tool
279
NOTE: all paths must be valid on the remote computer
Debug options
Hostname
127.0.0.1
Port
23946
Passyord
Save network settings as default
Help
Cancel
OK
Fig, 4.10 IDA debugging interface
Some native functions (JNI_OnLoad, init_array) will be executed automatically
by default when the so is loaded. These functions can not be directly debugged using
the above method, you need to break before the dynamic library is loaded. Since all
dynamic libraries are loaded by the linker, we need to locate the position where the
linker loads the library, then set the breakpoint before the linker initializes the so.
4.2.3XposedHook
Xposed is an Android Hook framework for rooted devices, which allows you to
modify an application’s running state without modifying its source code. It works by
s u oz mo s,psox m z rq s  ea
XposedBridge.jar during startup. The steps for Xposed Hook are as follows.
 Add Xposed-related meta-data to the application tag in AndroidManifest.xml.
cmeta-data
android :nane=*xposeddescription"
android:value=*xposed description goes here* / >
cmeta-data
android :nane=*xposedminversion"
andro1d:value=*54* / >
---
## Page 295
280
4 APK
achto
ID
26131
[64] com.android.defcontainer
Name
26163
[64] com.android.gallery3d
26200
[32] com,alipay.jiot.launcher
26220
[32] com.sohu.inputmethod.sogou:classic
26247
[32] com.umetrip.android.msky.app:pushservice
26310
[32] com.eg.android.AlipayGphone:teols
26398
[64] com.android.packageinstaller
26434
[32] com.android.keychain
26534
[64] com.example.ring.wantashell
26570
[32] com.tencent.mobileqq:MSF
26588
[32] com.tencent.mobileqq
3013
[32] com.alipay.auto.testall:channel
3080
[32] com.youku.phone:channel
3409
[32] com.eg.android.AlipayGphone:push
4036
[32] /data/app/com.youku.phone-m8n-VVTmathAqdrrbn515w=/ib/
4368
[32] com.youku.phone:phone_monitor
4507
[32] com,alibaba.android.security.activity
464
[64] /vendor/bin/qseecomd 
479
[64] /vendor/bi/qseecomd
499
[64] /vendor/bin/hw/android.hardware.graphics.composer@/2.1-service
5144
[64] com.alipay.lot,master:worker
5150
[32] com.hupan.app
5223
[64] com,alipay.iot.master:monitor
5394
[32] com.hupan.app:TcmsService
5485
[32] com.hupan.app:channel
#coml
X
Help
Search
Cancel
OK
Line 35 of 62
Fig, 4.11 Choose the application to be debugged
心心心
图
/data/dalvik-cache/batlarmf4/xposed_XTypedAmaySuperClass.odes
00000079096
0078FDS
Adata/daivik-cacheloat/larm64/xposed_xoResou
csSuperClass.odex
0000007909E
9002
Fig, 4.12 Choose the .so file
where xposedmodule indicates that this is an Xposed module, xposeddescription
describes the purpose of the module and can reference a string in string.xml, and
xposedminversion is the minimum version of the Xposed Framework required.
---
## Page 296
4.2 APK Reverse Tool
281
Modules
78FCCO
GDFO
P8FC00724C
DexSterPKv
F8FCC074A4
ZN10,
biL_
EPFvE
T8FCC074E0
78FCC0926C
bir112._
78FCC04724
78FCCD92E4
ZN10_
78FCCDE724
D
indootv
78FCCDE728
ZN10_
xabitt9_foeeign
sxceptiorD2E
raFCCDE74C
Fig, 4.13 Find the native function you want to debug
Fig, 4.14 Inspect the register changes
 Import the XposedBridgeApi jar package. Modify app/build.gradle in Android
studio by adding the following:
dependencies (
provided files (′1ib/XposedBridgeApi -54 . jar′)
After syncing, the import is complete.
 Writing Hook codes.
package com.test.ctf
import de robv.android.xposed IXposedHookLoadPackage;
import de .robv.android.xposed . XposedBridge;
import android.uti1. Log;
import de robv,android.xposed .callbacks .xC_LoadPackage. LoadiPackageParam;
public class CTFDemo inplements IXposedHookLoadPackage {
public void handleLoadPackage (final LoadPackageParan lpparam) throvs
Throvab1e 
XposedBridge . 1og (*Loaded app : * + 1pparam.packageName) ;
Log d ("yoUR_TAG*, "Loaded app : " + 1pparam, packageName )
---
## Page 297
282
4APK
 Declare the Xposed entry. Create a new assets folder and create an xposed_init
file, from which you can fill in the Xposed module entry class name, such as com.
test.ctf.CTFDemo.
 Activate the Xposed module. Activate the module in the Xposed application
and reboot to see the results of the Hook.
4.2.4Frida Hook
Frida is a cross-platform Hook framework that supports iOS and Android For
Android applications, Frida can hook not only Java layer functions, but also native
functions, which can greatly improve the speed of reverse analysis. To install Frida,
please see the official documentation for details. Next, we are going to talk about
some techniques of using Frida.
(1) Hook Android Native Functions.
Interceptor, attach (Module .findExportBytame ("1ibc.so* , "open*) , {
onEnter: function (args) {
 ( (u+ [T] s6.xe+a a+ ( [o] s6xe) 6uxasopeax* Axouoy+u) uado)puos
onLeave : function (retval) 
}） ;
(2) Hook Android Java Functions.
Java.perfozm (function () (
var logtool = Java.use ("com.tencent ,mm.sdk-platformtools .y*) ;
1ogtoo1 .i .overload ( 'Java.lang.Stxing′ , 'java lang.String′,
' [Ljava . 1ang- Object ; '] . 
console. 1og ("hook 1og-->+a+b) ;
implenentation = function (a, b, c) (
}) ：
(3) Get class member variables from _ _fields_ 
console log (Activity -SclassWrapper. _fields__-map (function (field) {
return Java cast (field, Field)
})) ;
(4) Get Android jni env on the Native layer.
---
## Page 298
4.3 APK Anti-debugging
283
var env = Java . vm getEnv [1 ;
var arr = env getByteArrayElements (args [2] , 0) ;
var len = env getArrayLength (args [2] ) ;
(5) Get fields of the Java layer class.
var bui1d = Java .use (*android.os.Build*) ;
console . 1og (tag + bui1d. PRODUCT. value) ;
(6) Get specific native address.
var fungetInt =new RativeFunction (fctToHookPtr or (1) , *int′ , [′int ′] 1 ;
var fctToHookPtr = Module.findBaseAddzess (*1ibnative-1ib . so*) . add (0x5A8) ;
console. 1og("invoke 99 > * + fungetInt (99) ) :
(7) Get app context.
var currentApp1ication = Dalvik.use (android . app . ActivityThread*) 
currentApplication () ;
var context = currentApp1ication. getApplicationContext (1 :
Frida needs to be used in a rooted environment, but it also provides a way to inject
codes without the root environment by decompiling, injecting code into the appli-
cation, making it load Frida Gadget-related so files when initializing, and storing the
configuration file libgadget.config.so in the lib directory to indicate the path to the
dynamically injected JS code. After repackaging the application, you can use Frida
Hook without rooting the device.
4.3 APK Anti-debugging
In order to protect an app, developers often make it difficult to reverse engineer the
core routines of the app in various ways. Debugging techniques are vital means for
reverse-engineers to understand the logic of these core routines. As a result, the
corresponding anti-debugging techniques are the “armors" of developers. These anti
techniques are mostly derived from the Windows platform and can be divided into
the following categories.
1. Detect debugger characteristics.
Check debugger ports, such as port 23946, which is used by default for IDA
debugging.
---
## Page 299
284
4APK
• Detect common debugger process names, such as android_server, gdbserver
and so on.
Check if Tracepid is 0 in /proc/pid/status or /proc/pid/task/pid/status.
dosnd s mqpds/pd/d o umqs/pd/oo/  
Detects if the 2nd field of /proc/pid/stat or /proc/pid/task/pid/stat is a °t? or not.
2. Detect the state of the process itself.
▪ Check if the parent process is zygote.
•Use the function android.os.Debug.isDebuggerConnected to check.
Detect if it is being ptraced.
Detect if the code contains software breakpoints.
  isix u 1asngap e qeugs a amdeo o n pue uondaoxa ue sas
signal cannot be captured.
Check if a code segment runs longer than expected.
The easiest way for an aftacker to bypass the above detection methods is to
customize the Android ROM to hide the debugger features on the Android system
level. For example, when using the ptrace function to detect whether the process is
being ptraced, we can modify the source code so that the ptrace function always
returns a non-debugging state, thus bypassing the ptrace detection. The system’s API
isDebuggerConnected function can also be bypassed by modifying the source code.
In short, being familiar with the Android source code and having a customized
firmware prepared can help speed up the reverse engineering process.
4.4 APK Unpacking
4.4.1InjectingProcess and Dumping Memory
The following is a code snippet to unpack an APK protected by a certain kind of
protector, with the help of Frida Hook, under Android 8.1 systems.
http://andxoidbref . com/8 .1 . 0_r33/xref/azt/zuntime/dex_file,cc#OpenCommon
Interceptor attach (Module.findExportByName (*1ibart . so",
'_ZN3art15DexFileVerifier6
VerifyEPKNs_7DexFileEPKhj PKcbPNSt3__112basic_stringIcNS8_
11char_traitsIcgENs8
onEnter: funetion (arga) {
_9a1locatorIcEEEE") , (
console.1og (*verify. .")
var begin = args [1]
var dex_size = args [2]
---
## Page 300
4.4 APK Unpacking
285
var file = new Fi1e ("/data/data/com. xxx.xoox/*+dex_s1ze+" , dexa , "wb#)
console .1og (*dex size:*+dex_size .toInt32 ( )
file. write (Memory .readByteAzray (begin, dex_size toInt32 (11)
file .flush (1
file.close ()
onLeave:function (retval) {}
]。
}) ;
The idea behind this method is that under Dalvik/ART mode if the DEX file is
stored in memory sequentially at some time, we must be able to find a specific point
where the DEX file is intact in memory. Using Hook, we can then obtain the
complete original DEX file. If there is no anti-Hook code or the anti-Hook is not
jae1 au xoedun o Kem juaoga pue adturs Aran t s! su “qnou Suons
4.4.2Modifying the Source
The idea of unpacking by modifying the Android source is similar to that of using
Hook, which is to find a specific point where the DEX file is stored intact in memory.
For example, it is posible to modify the dex2oat source to get rid of a certain
vendor's shell.
art/dex2oat/dex2oat.cc Android8.x
make dex2oat
/ / compilation and verification.
verification_results_->AddDexFile (dex_file) ;
std : :string dex_name = dex_file- >GetLocation () ;
LOG (INFo) Size [1 :
char filename [256] - {o) ;
sprintf (filenane, *Ve_d.dex*, dex_name ,c_str () , len) ;
int fd=open (filename , O_WRoNLY |O_CREAT|O_TRUNC, S_IRNXU) ;
if (fd>0) (
if (write (fd, (chaz*) dex_file->Begin (1 , len) 