the executions, we limit the corruption strategies that are available
against robustness. While independent challenges would possibly
reduce the robustness error further, using identical ones also al-
lows for implementation optimizations and we therefore establish
a theoretical basis for this practice.
Definition 3.5 (𝜏-parallel execution). Let Π𝑓 be a client-server
𝜌-phase MPC protocol for a functionality 𝑓 with 𝑛 server parties.
For an integer 𝜏, Π𝜏
is the 𝜏-fold parallel execution of Π𝑓 as a
𝑓
client-server 𝜌-phase protocol where there is only one sender 𝑃𝑆,
one receiver 𝑃𝑅, but 𝜏 independent sets of 𝑛 server parties.
The client parties 𝑃𝑆 and 𝑃𝑅 independently run an execution of
Π𝑓 with each set of servers who also do not communicate across
sets, excepted for the calls to RandomCoin which are shared across
the 𝜏 executions; i.e. the 𝜏 · 𝑛 servers receive the same output
from RandomCoin. If the 𝜏 executions output the same result, then
𝑃𝑅 outputs the same; if any one of the executions dissents, 𝑃𝑅 aborts
the protocol.
We first argue that privacy and robustness properties of the
underlying protocol are maintained by the one run in parallel. The
proofs of Propositions 3.6 and 3.7 are given in the full version.
Proposition 3.6. If Π𝑓 is (𝑃𝑅, 𝑛 − 1)-private in the semi-honest
𝑓 is (𝑃𝑅, 𝜏(𝑛 − 1))-private in the semi-honest model
model, then Π𝜏
with the restriction that at most 𝑛 − 1 servers are corrupted for each
of the 𝜏 executions.
Proposition 3.7. If Π𝑓 is (𝑃𝑆, 0)-robust in the malicious model
𝑓 is (𝑃𝑆, 0)-robust in the malicious model with
with error 𝛿, then Π𝜏
error at most 𝛿.
We then argue that the IOP construction equivalent to that of
instead of Π𝑓 is also a ZKIOP with improved
Figure 1 using Π𝜏
𝑓
soundness error.
Theorem 3.8. Let 𝑥 be a public statement, and 𝑤 an additional
input, let 𝑓 be the functionality for 𝑃𝑆, 𝑃1, . . . , 𝑃𝑛, 𝑃𝑅 that outputs
ℛ(𝑥, 𝑤) to 𝑃𝑅. Let Π𝑓 be a 𝜌-phase MPC protocol in the client-server
model that correctly realizes 𝑓 with (𝑃𝑅, (𝑛 − 1))-privacy in the semi-
honest model and (𝑃𝑆, 0)-robustness in the malicious model with
robustness error 𝛿.
With Π𝜏
𝑓 constructed from Π𝑓 as in Definition 3.5, the protocol
𝑓 is a ZKIOP for ℛ with
Π𝜌−ZKIOP as described in Figure 1 using Π𝜏
soundness error
1 − 1
𝑛𝜏
1
𝑛𝜏 + 𝛿
𝜖 =
.
(cid:18)
(cid:19)
𝑓
.
1))-privacy of Π𝜏
given by Proposition 3.6.
Proof: (Completeness) This follows from the completeness of Π𝑓
and the construction of Π𝜏
𝑓
(Honest verifier zero-knowledge) This follows from the (𝑃𝑅, 𝜏(𝑛 −
(Soundness) The same strategy for a malicious prover 𝒫∗ applies
as for the first protocol: by first corrupting only 𝑃𝑆, it has a prob-
ability of at most 𝛿 of causing Π𝜏
to output accept; if this fails,
𝑓
it can then corrupt at most one server for each of the 𝜏 indepen-
dent executions to make 𝑃𝑅 accept, this is not detected by 𝒱 with
probability 1/𝑛𝜏.
□
4 MULTIPLICATIONS CHECK
In this section we describe an efficient MPC protocol in the client-
server model for checking multiplication triples. This protocol is
an adaptation of previous protocols described in [15, 16, 27], and
constitutes one of the main building block of our MPC component.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3027Protocol ΠMultCheck
We consider an extension field G ⊇ F. We assume access to a random
coin functionality, RandomCoin.
Phase 1 𝑃𝑆 sends the shares ⟨𝑥ℓ ⟩𝑖, ⟨𝑦ℓ ⟩𝑖, ⟨𝑧ℓ ⟩𝑖 for ℓ ∈ [𝑚], and the
shares ⟨a⟩𝑖, ⟨b⟩𝑖, ⟨𝑐⟩𝑖 of a random inner-product tuple to each
server 𝑃𝑖 .
Sampling The parties call RandomCoin to obtain 𝑅 ∈ G and 𝑠 ∈ G.
Phase 2 The servers parties proceed as follows:
(1) Lift {⟨𝑥ℓ ⟩, ⟨𝑦ℓ ⟩, ⟨𝑧ℓ ⟩}ℓ∈[𝑚] to G.
(2) Set
⟨x⟩ = (⟨𝑥1⟩, 𝑅 · ⟨𝑥2⟩, . . . , 𝑅𝑚−1 · ⟨𝑥𝑚⟩),
⟨y⟩ = (⟨𝑦1⟩, ⟨𝑦2⟩, . . . , ⟨𝑦𝑚⟩)
⟨𝑧⟩ =ℓ∈[𝑚] 𝑅ℓ−1 · ⟨𝑧ℓ ⟩
(3) Compute ⟨𝝈⟩ = 𝑠 · ⟨x⟩ − ⟨a⟩ and ⟨𝝆⟩ = ⟨y⟩ − ⟨b⟩.
(4) Open ⟨𝝈⟩ and ⟨𝝆⟩ using a broadcast channel.
(5) Compute ⟨𝑣⟩ = 𝑠 · ⟨𝑧⟩ − ⟨𝑐⟩ − ⟨b⟩ ∗ 𝝈 − ⟨a⟩ ∗ 𝝆 − 𝝆 ∗ 𝝈.
(6) Send ⟨𝑣⟩ to 𝑃𝑅.
The receiver party 𝑃𝑅 accepts if 𝑣 = 0 and rejects if not.
Figure 2: Protocol ΠMultCheck
More concretely, the goal is for the server parties to verify the
correctness of 𝑚 multiplication tuples {𝑥ℓ, 𝑦ℓ, 𝑧ℓ}ℓ∈[𝑚] given by
the sender client; i.e. that 𝑥ℓ · 𝑦ℓ = 𝑧ℓ, for each ℓ ∈ [𝑚]. We de-
scribe two different MPC checking protocols; the first, ΠMultCheck,
presents how to check multiplications using inner-products, the
second, ΠCompressedMC extends this idea by repeating several com-
pression rounds to reduce the communication between the servers
and the recipient. While we do not prove the MPC security of these
protocols, we present several properties which we will use in the
next section.
4.1 First Multiplication Check Protocol
The first protocol, presented in Figure 2, checks the correctness
of 𝑚 secret-shared multuplication tuples by testing the correctness
of a single secret-shared inner product tuple of size 𝑚.
It proceeds in two steps: first, given {⟨x𝑖⟩, ⟨y𝑖⟩, ⟨z𝑖⟩}𝑖∈[𝑚], the
parties call a random coin functionality, RandomCoin, to obtain
a random value 𝑅 in an extension field G of F. Using 𝑅, the par-
ties construct the inner-product tuple ⟨x⟩ ∈ G𝑚, ⟨y⟩ ∈ G𝑚, and
⟨𝑧⟩ ∈ G, such that x ∗ y = 𝑧. In the second step, parties test the
correctness of this tuple using an auxiliary random inner-product
tuple (⟨a⟩, ⟨b⟩, ⟨𝑐⟩) and a random field element 𝑠 ∈ G.
if any, of the input tuples with high probability.
The idea here is that both steps will maintain the “incorrectness”,
We note that the parties make use of a broadcast channel in the
second phase, which does not respect our restriction to servers
which communicate only with 𝑃𝑅 in Phase 𝜌 of the protocol. This
broadcast channel will not be required by the next protocol.
The proofs of the following lemmas given in the full version.
Lemma 4.1. If at least one multiplication triple is incorrect, the re-
sulting inner-product tuple obtained in Step 2. of protocol ΠMultCheck
is correct with probability at most 𝑚−1
|G| .
Lemma 4.2. If at least one of the two inner-product tuples (x, y, 𝑧)
and (a, b, 𝑐) is incorrect, the probability that the check passes is 2/|G|.
Combining the two previous lemma we obtain.
Compressed multiplication check, ΠCompressedMC
We consider an extension field G ⊇ F. We assume access to a random
coin functionality, RandomCoin.
Phase 1 𝑃𝑆 sends the shares ⟨𝑥ℓ ⟩𝑖, ⟨𝑦ℓ ⟩𝑖, ⟨𝑧ℓ ⟩𝑖 in F to each server 𝑃𝑖
Sampling The parties call RandomCoin to obtain 𝑅 ∈ G.
Phase 2 The server parties proceed as follows:
for ℓ ∈ [𝑚].
(1) Lift {⟨𝑥ℓ ⟩, ⟨𝑦ℓ ⟩, ⟨𝑧ℓ ⟩}ℓ∈[𝑚] to G.
(2) Set
⟨x0⟩ = (⟨𝑥1⟩, 𝑅 · ⟨𝑥2⟩, . . . , 𝑅𝑚−1 · ⟨𝑥𝑚⟩),
⟨y0⟩ = (⟨𝑦1⟩, ⟨𝑦2⟩, . . . , ⟨𝑦𝑚⟩)
⟨𝑧0⟩ =ℓ∈[𝑚] 𝑅ℓ−1 · ⟨𝑧ℓ ⟩
For each compression round 𝑗 ∈ [⌊log𝑘 (𝑚)⌋]:
Phase 3 + ( 𝑗 − 1) The server parties proceed as follows:
⟨x𝑗−1⟩ = (⟨a𝑗
⟨y𝑗−1⟩ = (⟨b𝑗
(1) Parse ⟨x𝑗−1⟩ and ⟨y𝑗−1⟩ as
𝑘 ⟩),
1⟩, . . . , ⟨a𝑗
𝑘 ⟩),
1⟩, . . . , ⟨b𝑗
𝑢⟩, ⟨b𝑗
𝑢⟩) to obtain ⟨𝑐 𝑗
(2) Call ΠInnerProd(⟨a𝑗
(3) Set ⟨𝑐 𝑗
(4) If 𝑗 ≠ ⌊log𝑘 𝑚⌋, begin ΠCompress on (⟨a𝑗
𝑘 ⟩ = ⟨𝑧 𝑗−1⟩ −𝑢∈[𝑘−1] ⟨𝑐 𝑗
a𝑗
𝑢, b𝑗
𝑢𝑠⟩.
𝑗 = ⌊log𝑘 𝑚⌋, begin ΠCompressRand instead.
𝑢 ∈ G𝑚/𝑘 𝑗
.
𝑢⟩, for 𝑢 ∈ [𝑘 − 1].
𝑖 ⟩)𝑖∈[𝑘]; if
𝑖 ⟩, ⟨b𝑗
𝑖 ⟩, ⟨𝑐 𝑗
Sampling Within ΠCompress or ΠCompressRand.
Phase 3 + 𝑗 Complete ΠCompress
(⟨x𝑗 ⟩, ⟨y𝑗 ⟩, ⟨𝑧 𝑗 ⟩) of dimension 𝑚/𝑘 𝑗 .
or ΠCompressRand
to
obtain
After the last compression round:
Phase 3 + ⌊log𝑘 (𝑚)⌋ cont. Servers open the last tuple to 𝑃𝑅 which
outputs either accept if it is correct, or abort if not.
Figure 3: Compressed multiplication check
Proposition 4.3. We have that if at least one of the 𝑚 triples
{(⟨𝑥𝑖⟩, ⟨𝑦𝑖⟩, ⟨𝑧𝑖⟩)}𝑖∈[𝑚] is incorrect, the probability that the protocol
ΠMultCheck outputs accept is at most 𝑚−1
|G| ) · 2
|G| .
4.2 Second Multiplication Check Protocol
|G| + (1 − 𝑚−1
Here we describe a more efficient protocol which allows to com-
press the size of the inner-product to be tested in order to reduce
the communication complexity at the expense of (potentially) more
interactions.
The protocol ΠCompressedMC, described in Figure 3, uses two
core subroutines, ΠCompress and ΠCompressRand given in Figure 4,
which compress a set of 𝑘 inner-product tuples down to only one
(of the same dimension) in such a way that, with high probability,
the output tuple is incorrect if one of the inputs is.
The difference between the two subroutines is that the second
introduces randomness in such a way that the compressed tuple can
be opened without leaking information about the input tuples. This
also enables the protocol to dispense with the broadcast channel
used in ΠMultCheck.
The protocol assumes access to a RandomCoin functionality and
to two untrusted subroutines ΠInnerProd and ΠRand, which we don’t
instantiate. On input of two vectors ⟨a⟩ and ⟨b⟩, ΠInnerProd outputs a
possibly incorrect ⟨𝑐⟩, with a ∗ b = 𝑐. When queried by the servers,
ΠRand outputs a possibly biased random value. At a high level,
ΠCompressedMC proceeds as follows. The first step is similar to the
first step in ΠMultCheck, where parties produce the inner-product
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3028Sub-protocols ΠCompress and ΠCompressRand
ΠCompressRand is identical to ΠCompress except where highlighted below.
Input: 𝑘 inner-product tuples (⟨x𝑖 ⟩, ⟨y𝑖 ⟩, ⟨𝑧𝑖 ⟩)𝑖∈[𝑘], of dimension ℓ.
(1) Define two dimension-ℓ vectors of degree-(𝑘 − 1) polynomials
⟨f(·)⟩, ⟨g(·)⟩ such that:
f(𝑢) = x𝑢,
g(𝑢) = y𝑢,
∀𝑢 ∈ [𝑘].
In ΠCompressRand, for 𝑗 ∈ [ℓ], the 𝑓𝑗 and 𝑔𝑗 polynomials are of
degree 𝑘 and are defined by the additional points ⟨𝑓𝑗 (𝑘 + 1)⟩ =
⟨𝑣𝑗 ⟩ and ⟨𝑔𝑗 (𝑘 + 1)⟩ = ⟨𝑤𝑗 ⟩ where the shares of 𝑣𝑗 and 𝑤𝑗 are
given by ΠRand.
(2) Define the polynomial ℎ(·) of degree 2(𝑘 − 1) such that:
⟨ℎ(𝑢)⟩ = ⟨𝑧𝑢⟩,
∀𝑢 ∈ [𝑘],
⟨ℎ(𝑢)⟩ = ΠInnerProd(⟨f(𝑢)⟩, ⟨g(𝑢)⟩),
In ΠCompressRand, ℎ is of degree 2𝑘 and is defined by the two
additional points ⟨ℎ(2𝑘)⟩ and ⟨ℎ(2𝑘 + 1)⟩ defined as the other
points ⟨ℎ(𝑖)⟩ for 𝑖 ∈ [𝑘 + 1, 2𝑘 − 1].
∀𝑖 ∈ [𝑘 + 1, 2𝑘 − 1].
Sampling Call RandomCoin to obtain 𝑠 ∈ G \ [𝑘],
(3) Compute ⟨f(𝑠)⟩, ⟨g(𝑠)⟩, ⟨ℎ(𝑠)⟩.
Output: One tuple (⟨f(𝑠)⟩, ⟨g(𝑠)⟩, ⟨ℎ(𝑠)⟩) of dimension ℓ.
Figure 4: Compressing inner products
tuple (⟨x⟩, ⟨y⟩, ⟨𝑧⟩) of dimension 𝑚. To reduce the dimension of
this tuple, parties divide the vectors ⟨x⟩ and ⟨y⟩ into 𝑘 smaller
vectors of dimension ℓ and perform ΠCompress. In this way parties
obtain a single inner-product tuple, but this time of dimension
ℓ = 𝑚/𝑘, for any divisor 𝑘 of 𝑚. This step can then be repeated with
identical or different values of 𝑘 until a final inner-product tuple
(potentially of dimension 1) needs to be checked. (For identical
values of 𝑘, these steps need to be repeated log𝑘 𝑚 times to check a
single multiplication triple at the end).
The proof of the following proposition is given in the full version.
Proposition 4.4. If at least one of the 𝑚 multiplication triples
{(⟨𝑥𝑖⟩, ⟨𝑦𝑖⟩, ⟨𝑧𝑖⟩)}𝑖∈[𝑚] is incorrect, the probability that protocol
ΠCompressedMC outputs accept is at most
(cid:18)
(cid:18)
𝑚 − 1
|G| +
1 − 𝑚 − 1
+
|G|
(cid:19)
(cid:18)
1 − 𝑚 − 1
|G|
·
(cid:19)
(cid:18)
𝐵 ·∑︁⌊log𝑘 (𝑚)⌋−2
· (1 − 𝐵) ⌊log𝑘 (𝑚)⌋−1(cid:19)
(1 − 𝐵)𝑖(cid:19)
|G| − 𝑘
2𝑘
·
𝑖=0
where 𝑘 is the compression parameter and 𝐵 =
2(𝑘−1)
|G|−𝑘
5 OUR ZERO-KNOWLEDGE ARGUMENT FOR
ARITHMETIC AND BOOLEAN CIRCUITS
We describe now our ZK system for circuit satisfiability based
on the MPCitH paradigm. We combine a concrete MPC protocol
which verifies all the properties defined in Definition 3.2 and the
general 𝜌-phase ZK interactive oracle protocol Π𝜌−ZKIOP defined
in Section 3.2. Given an NP relation ℛ, we consider a circuit 𝐶
over a finite field F such that 𝐶(𝑤) = 1 if and only if (𝑥, 𝑤) ∈ ℛ.
Without loss of generality we assume that 𝐶 only contains linear
and multiplication gates.
Our MPC instantiation. Concretely, our MPC protocol Π𝑓 can be
divided in two phases. First, we have an input and evaluation phase
where the sender client 𝑃𝑆 generates and distributes to the servers
𝛿𝑘 =
(cid:18)
(cid:32)
(cid:19)
𝑚 − 1
1 − 𝑚 − 1
(cid:18)
|G| +
·
|G|
1 − 2(𝑘 − 1)
2𝑘
|G| − 2 ·
⌊log𝑘 (𝑚)⌋−2∑︁
|G| − 𝑘
+ 2(𝑘 − 1)
|G| − 𝑘
·
(cid:19) ⌊log𝑘 (𝑚)⌋−1
(cid:18)
1 − 2(𝑘 − 1)
|G| − 𝑘
(cid:19)𝑖(cid:33)
𝑃𝑖, 𝑖 ∈ [𝑛], an additive sharing of the input and sharings of the
output of each multiplication gate in the circuit. Given those, the
servers locally evaluate the circuit. In the second phase, parties
run the protocol ΠCompressedMC described in the previous section
where 𝑃𝑆 further plays the role of ΠInnerProd and ΠRand.
Looking ahead, the protocol Π𝑓 , and therefore the MPCitH pro-
tocol based on it, will depend on several parameters: the size of the
circuit 𝐶, 𝑚, i.e. the number of multiplication gates, the number 𝑛 of
servers parties in Π𝑓 , the size of the fields F and G, with |G| > 𝑚−1,
and the compression parameter 𝑘 used in ΠCompressedMC.