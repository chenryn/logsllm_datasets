BRUTE-FORCINGRC2
RC2isasymmetric-keyblockciphercreatedbyRonRivestin
1987.Promptedbyrecommendationsfromthegovernment,
thedesignersuseda40-bitencryptionkey,whichmadethe
cipherweakenoughthattheUSgovernmentcouldbrute-force
thekeyanddecryptcommunications.Itprovidedample
confidentialityformostcommunicationsbutallowedthe
governmenttopeepintochatterwithforeignentities,for
example.Ofcourse,backinthe1980s,brute-forcingthekey
requiredsignificantcomputingpower,andonlywell-funded
nationstatesorspecialtyorganizationshadthemeansto
decryptitinareasonableamountoftime.Fast-forward30
years;today,thecommonhomecomputercanbrute-forcea
40-bitkeyinafewdaysorweeks.
So,whattheheck,let’sbruteforcea40-bitkey.
GettingStarted
Beforewediveintothecode,let’ssetthestage.Firstofall,
neitherthestandardnorextendedGocryptolibrarieshavean
RC2packageintendedforpublicconsumption.However,
there’saninternalGopackageforit.Youcan’timportinternal
packagesdirectlyinexternalprograms,soyou’llhavetofind
anotherwaytouseit.
Second,tokeepthingssimple,you’llmakesome
assumptionsaboutthedatathatyounormallywouldn’twantto
make.Specifically,you’llassumethatthelengthofyour
cleartextdataisamultipleoftheRC2blocksize(8bytes)to
avoidcloudingyourlogicwithadministrativetaskslike
handlingPKCS#5padding.Handlingthepaddingissimilarto
whatyoudidwithAESpreviouslyinthischapter(seeListing
11-4),butyou’dneedtobemorediligentinvalidatingthe
contentstomaintaintheintegrityofthedatayou’llbeworking
with.You’llalsoassumethatyourciphertextisanencrypted
creditcardnumber.You’llcheckthepotentialkeysby
validatingtheresultingplaintextdata.Inthiscase,validating
thedatainvolvesmakingsurethetextisnumericandthen
subjectingittoaLuhncheck,whichisamethodofvalidating
creditcardnumbersandothersensitivedata.
Next,you’llassumeyouwereabletodetermine—perhaps
frompilferingfilesystemdataorsourcecode—thatthedatais
encryptedusinga40-bitkeyinECBmodewithno
initializationvector.RC2supportsvariable-lengthkeysand,
sinceit’sablockcipher,canoperateindifferentmodes.In
ECBmode,whichisthesimplestmode,blocksofdataare
encryptedindependentlyofotherblocks.Thiswillmakeyour
logicalittlemorestraightforward.Lastly,althoughyoucan
crackthekeyinanonconcurrentimplementation,ifyouso
choose,aconcurrentimplementationwillbefarbetter
performing.Ratherthanbuildingthisthingiteratively,
showingfirstanonconcurrentversionfollowedbya
concurrentone,we’llgostraightfortheconcurrentbuild.
Nowyou’llinstallacoupleofprerequisites.First,retrieve
theofficialRC2Goimplementationfrom
https://github.com/golang/crypto/blob/master/pkcs12/internal/
rc2/rc2.go.You’llneedtoinstallthisinyourlocalworkspace
sothatyoucanimportitintoyourbrute-forcer.Aswe
mentionedearlier,thepackageisaninternalpackage,meaning
that,bydefault,outsidepackagescan’timportanduseit.This
isalittlehacky,butit’llpreventyoufromhavingtousea
third-partyimplementationor—shudder—writingyourown
RC2ciphercode.Ifyoucopyitintoyourworkspace,thenon-
exportedfunctionsandtypesbecomepartofyour
developmentpackage,whichmakesthemaccessible.
Let’salsoinstallapackagethatyou’llusetoperformthe
Luhncheck:
$gogetgithub.com/joeljunstrom/go-luhn
ALuhncheckcalculateschecksumsoncreditcardnumbers
orotheridentificationdatatodeterminewhetherthey’revalid.
You’llusetheexistingpackageforthis.It’swell-documented
andit’llsaveyoufromre-creatingthewheel.
Nowyoucanwriteyourcode.You’llneedtoiterate
througheverycombinationoftheentirekeyspace(40-bits),
decryptingyourciphertextwitheachkey,andthenvalidating
yourresultbymakingsureitbothconsistsofonlynumeric
charactersandpassesaLuhncheck.You’llusea
producer/consumermodeltomanagethework—theproducer
willpushakeytoachannelandtheconsumerswillreadthe
keyfromthechannelandexecuteaccordingly.Theworkitself
willbeasinglekeyvalue.Whenyoufindakeythatproduces
properlyvalidatedplaintext(indicatingyoufoundacreditcard
number),you’llsignaleachofthegoroutinestostoptheir
work.
Oneoftheinterestingchallengesofthisproblemishowto
iteratethekeyspace.Inoursolution,youiterateitusingafor
loop,traversingthekeyspacerepresentedasuint64values.The
challenge,asyou’llsee,isthatuint64occupies64bitsofspace
inmemory.So,convertingfromauint64toa40-bit(5-byte)
[]byteRC2keyrequiresthatyoucropoff24bits(3bytes)of
unnecessarydata.Hopefully,thisprocessbecomesclearonce
you’velookedatthecode.We’lltakeitslow,breakingdown
sectionsoftheprogramandworkingthroughthemonebyone.
Listing11-8beginstheprogram.
import(
"crypto/cipher"
"encoding/binary"
"encoding/hex"
"fmt"
"log"
"regexp"
"sync"
❶luhn"github.com/joeljunstrom/go-luhn"
❷"github.com/bhg/ch-11/rc2-brute/rc2"
)
❸varnumeric=regexp.MustCompile(`^\d{8}$`)
❹typeCryptoDatastruct{
blockcipher.Block
key[]byte
}
Listing11-8:ImportingtheRC2brute-forcetype(/ch-11/rc2-brute/main.go)
We’veincludedtheimportstatementsheretodrawattention
totheinclusionofthethird-partygo-luhnpackage❶,aswellas
theinclusionoftherc2package❷youclonedfromthe
internalGorepository.Youalsocompilearegularexpression
❸thatyou’llusetocheckwhethertheresultingplaintext
blockis8bytesofnumericdata.
Notethatyou’rechecking8bytesofdataandnot16bytes,
whichisthelengthofyourcreditcardnumber.You’re
checking8bytesbecausethat’sthelengthofanRC2block.
You’llbedecryptingyourciphertextblockbyblock,soyou
cancheckthefirstblockyoudecrypttoseewhetherit’s
numeric.Ifthe8bytesoftheblockaren’tallnumeric,youcan
confidentlyassumethatyouaren’tdealingwithacreditcard
numberandcanskipthedecryptionofthesecondblockof
ciphertextaltogether.Thisminorperformanceimprovement
willsignificantlyreducethetimeittakestoexecutemillions
oftimesover.
Lastly,youdefineatypenamedCryptoData❹thatyou’lluse
tostoreyourkeyandacipher.Block.You’llusethisstructto
defineunitsofwork,whichproducerswillcreateand
consumerswillactupon.
ProducingWork
Let’slookattheproducerfunction(Listing11-9).Youplace
thisfunctionafteryourtypedefinitionsinthepreviouscode
listing.
❶funcgenerate(start,stopuint64,outchanmax{
end=max
}
generate(start,end,work,done,&prodWg)❺
end+=step
start+=step
}
log.Println("Producersstarted!")
log.Println("Startingconsumers...")
fori:=0;i<30;i++{❻
decrypt(ciphertext,work,done,&consWg)❼
}
log.Println("Consumersstarted!")
log.Println("Nowwewait...")
prodWg.Wait()❽
close(work)
consWg.Wait()❾
log.Println("Brute-forcecomplete")
}
Listing11-11:TheRC2main()function(/ch-11/rc2-brute/main.go)
Yourmain()functiondecodesyourciphertext,representedas
ahexadecimalstring❶.Next,youcreateseveralvariables❷.
FirstyoucreateWaitGroupvariablesusedfortrackingboth
producerandconsumergoroutines.Youalsodefineseveral
uint64valuesfortrackingtheminimumvalueina40-bitkey
space(0x0000000000),themaximumvalueinthekeyspace
(0xffffffffff),andthenumberofproducersyouintendtostart,
inthiscase75.Youusethesevaluestocalculateastepor
range,whichrepresentsthenumberofkeyseachproducerwill
iterate,sinceyourintentistodistributetheseeffortsuniformly
acrossallyourproducers.Youalsocreatea*CryptoDatawork
channelandadonesignalingchannel.You’llpassthesearound
toyourproducerandconsumerfunctions.
Sinceyou’redoingbasicintegermathtocalculateyour
stepvaluefortheproducers,there’sachancethatyou’lllose
somedataifthekeyspacesizeisn’tamultipleofthenumber
ofproducersyou’llspinup.Toaccountforthis—andtoavoid
losingprecisionwhileconvertingtoafloating-pointnumber
foruseinacalltomath.Ceil()—youcheckwhetherthemaximum
key(step*prods)islessthanyourmaximumvaluefortheentire
keyspace(0xffffffffff)❸.Ifitis,ahandfulofvaluesinthe