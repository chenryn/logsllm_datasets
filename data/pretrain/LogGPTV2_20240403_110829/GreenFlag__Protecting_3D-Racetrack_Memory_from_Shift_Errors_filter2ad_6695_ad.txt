checksum to categorize shift errors. Delimiters alone do not 
suffice to detect nor to determine the type of shift errors. 
C.  Decoding in Presence of Shift Errors 
If  a  shift  error  is  detected,  we  shift  so  that  the  correct 
domain is over the read/write port. If it is a double shift error, 
7
Checksum 
≠0 
0 
1 deletion and 1 insertion 
Decision 
no error 
1 deletion 
1 insertion 
2 deletions 
2 insertions 
Example for (cid:2196)=(cid:2785),(cid:2194)=(cid:2780) 
(cid:2185)=0 1 1 0 0 1 1 0 →(cid:2185)(cid:4593)=0 1 1 0 0 1 0 
=2+3+6=11 
 (cid:2033)=3 
(cid:3533) (cid:1861)(cid:1855)′(cid:3036)
(cid:2876)(cid:3036)(cid:2880)(cid:2869)
 (cid:1871)=7 
(cid:1871)>(cid:2033)→ restore the codeword by adding a 1 immediately 
to the right of the leftmost ((cid:1871)−(cid:2033)−1)=3 zeros to arrive 
at the correct codeword: 0 1 1 0 0 1 1 0. 
Example for (cid:2196)=(cid:2785),(cid:2194)=(cid:2780) 
(cid:2185)=0 1 1 0 0 1 1 0 →(cid:2185)(cid:4593)=0 1 1 0 0 0 1 1 0 
=2+3+7+8=20 
 (cid:2033)=4 
(cid:3533) (cid:1861)(cid:1855)′(cid:3036)
(cid:2876)(cid:3036)(cid:2880)(cid:2869)
 (cid:1871)=2 
(cid:1871)≤(cid:2033)→ restore the codeword by removing a 0 
immediately to the right of the leftmost (cid:1871)=2 ones to arrive 
at the correct codeword: 0 1 1 0×0 0 1 1 0. 
we need to re-read the entire extended codeword. In the case 
of a single shift error, we correct the erroneous bit values as 
explained next. 
Correcting  a  single  deletion  error:  This  can  be 
accomplished  using  the  elegant  algorithm  proposed  by 
Levenshtein  [28,  29]  and  which  we  present  in  Table  V 
alongside an example for n=8. The main idea is that we want 
to  find  a  position  at  which  inserting  a  bit  will  make  the 
checksum zero. Using the decoding algorithm, we reconstruct 
the  correct  codeword.  Then  we  recover  the  dataword  as 
discussed for the error free case. It is worth mentioning that 
while the decoding algorithm corrects the codeword, it does 
not reveal the exact position where the deletion occurred. In 
fact, in the example in Table V, if either of the 1's in positions 
6  or  7  was  deleted,  the  algorithm  would  have  behaved  in 
exactly the same way. 
Correcting a single insertion error: Handling an insertion is 
very similar to handling a deletion and follows the same logic. 
We modify the Deletion Correction Algorithm to handle an 
insertion as given in Table VI. Again, it is worth mentioning 
that  while  the  algorithm  corrects  the codeword, it  does  not 
reveal the exact position where the insertion occurred. 
D.  Block Organization 
In  order  to  minimize  the  access  latency  of  a  block, 
GreenFlag uses multiple tracks to store a single block similar 
to prior work [12, 30]. Assuming a 512-bit block, prior work 
uses 512 tracks to stripe a block at a bit granularity. GreenFlag 
stripes  a  block  at  an  extended  codeword  granularity.  For 
example, GreenFlag(8,4,6) uses 128 tracks that each stores a 
(8+6)-bit-long  extended  codeword.  All  128  extended 
codewords can be read in parallel to retrieve a single block.  
VI.  HARDWARE IMPLEMENTATION  
In this section, we discuss the hardware implementation of 
the encoding and decoding process of GreenFlag. Designing 
an encoder and decoder helps us analyze and understand the 
overheads of GreenFlag in terms of latency, energy and area. 
We used Verilog to describe all of the hardware down to 
the RTL, and we then synthesized it using Synopsys design 
compiler with the 15nm CMOS technology node. 
A.  Encoding 
has a size of (cid:1866)=2(cid:3039), i.e., the length of our codeword. We place 
1) Simple Implementation 
To start the encoding process, we fill a FIFO queue that 
the desired data bits in all the positions of the queue that are 
not  powers  of  2  as  described  in  Section  V.  This  process 
represents steps 1 and 2 of our encoding algorithm. 
 The content of the FIFO queue is then shifted to a full 
adder (FA) as seen in Fig. 8. The FA uses the shifted bits of 
the queue as its enable input. In other words, the FA performs 
an addition only when the shifted bit has a value of 1. The first  
input  of  the  FA  is  driven  by  a  counter  that  counts  from  0 
input is driven through a feedback loop from the output of the 
FA.  The  output  is  latched  in  order  to  allow  for  correct 
synchronization. Thus, we have now completed step 3 of our 
algorithm and calculated the desired sum. 
to (cid:1866)−1. Additionally the carry input of the FA is always set 
to 1 and thus we add the numbers from 1 to (cid:1866). The second 
We continue by calculating the (cid:1866)+1 modulo of the sum. 
follow expression. (cid:3533) (cid:1861)(cid:1855)(cid:3036)
(cid:3041)(cid:3036)(cid:2880)(cid:2869)
This allows us to efficiently calculate the (cid:1866)+1 modulo 
 ≤(cid:3533) (cid:1861)(cid:3041)(cid:3036)(cid:2880)(cid:2869) = (cid:1866)((cid:1866)+1)
2
To efficiently perform the modulo operation we exploit some 
observations. The calculated sum of step 3 is bounded by the 
operation with the following algorithm: 
8
1.  Divide (cid:1871)(cid:1873)(cid:1865) with (cid:1866) and store the result in (cid:1869)(cid:1873)(cid:1867)(cid:1872)_(cid:1872)(cid:1865)(cid:1868). 
2.  Store the remainder in (cid:1870)(cid:1857)(cid:1865)_(cid:1872)(cid:1865)(cid:1868). 
3.  If (cid:1869)(cid:1873)(cid:1867)(cid:1872)_(cid:1872)(cid:1865)(cid:1868)≤(cid:1870)(cid:1857)(cid:1865)_(cid:1872)(cid:1865)(cid:1868) then (cid:1870)(cid:1857)(cid:1865)(cid:1853)(cid:1861)(cid:1866)(cid:1856)(cid:1857)(cid:1870)=
 (cid:1870)(cid:1857)(cid:1865)_(cid:1872)(cid:1865)(cid:1868)−(cid:1869)(cid:1873)(cid:1867)(cid:1872)_(cid:1872)(cid:1865)(cid:1868).  
4.  Else (cid:1869)(cid:1873)(cid:1867)(cid:1872)_(cid:1872)(cid:1865)(cid:1868)= (cid:1869)(cid:1873)(cid:1867)(cid:1872)_(cid:1872)(cid:1865)(cid:1868)−1; (cid:1870)(cid:1857)(cid:1865)_(cid:1872)(cid:1865)(cid:1868) =
(cid:1870)(cid:1857)(cid:1865)_(cid:1872)(cid:1865)(cid:1868)+(cid:1866); (cid:1870)(cid:1857)(cid:1865)(cid:1853)(cid:1861)(cid:1866)(cid:1856)(cid:1857)(cid:1870)= (cid:1870)(cid:1857)(cid:1865)_(cid:1872)(cid:1865)(cid:1868)−(cid:1869)(cid:1873)(cid:1867)(cid:1872)_(cid:1872)(cid:1865)(cid:1868)  
This algorithm performs division with (cid:1866) instead of (cid:1866)+1, 
which is a simple operation, because (cid:1866) is always a power of 2 
(i.e., (cid:1866)=2(cid:3039) ).  Thus, (cid:1869)(cid:1873)(cid:1867)(cid:1872)_(cid:1872)(cid:1865)(cid:1868)  can  be  calculated  by  just 
extracting  the (cid:1864)−log(cid:2870)(cid:1866)  most  significant  bits  of  the  sum. 
Then (cid:1870)(cid:1857)(cid:1865)_(cid:1872)(cid:1865)(cid:1868)  is  the log(cid:2870)(cid:1866)  least  significant  bits.  The 
Now we can calculate (cid:1871) by just subtracting the calculated 
(cid:1870)(cid:1857)(cid:1865)(cid:1853)(cid:1861)(cid:1866)(cid:1856)(cid:1857)(cid:1870) from (cid:1866)+1. Note that the result of this operation 
modulo block implements this algorithm. 
is already the desired binary expansion and thus we simply 
place the output bits in the codeword positions that are powers 
of 2. We have now completed steps 4 and 5 of the encoding 
algorithm. 
A  drawback  of  this  implementation  is  that  the  delay 
overhead  due  to  encoding  depends  on  the  length  of  the 
codeword.  As  the  codewords  become  larger,  in  order  to 
achieve better rate, the delay overhead becomes significant.  
2) Performance Optimized Implementation 
In  order  to  mitigate  the  increase  in  delay  overhead  we 
slightly modify the  encoding process by calculating  sum in 
parallel. We split the FIFO queue into smaller queues of 8-bit 
length. Each queue is now connected to a separate FA  that 
computes a partial sum. Multiple partial sums are computed 
in parallel. We then add all the partial sums together to get the 
final sum.  
This optimization allows us to trade area for lower latency. 
We  note  that  although  the  two  implementations  differ  in 
power consumption, there are negligible differences in energy 
due to a significant reduction in latency. In other words, we 
now spend more power over less time.   
B.  Decoding 
Decoding has some of the same steps as encoding. As we 
read our codeword from the racetrack, we calculate the sum as 
we did for encoding. We then perform the modulo operation 
to get the desired Checksum. Also, as we read the codeword  
we calculate its weight ω. We use the module “Delimiter” to 
store the delimiter bits. We then use the Checksum with the  
delimiter bits to decide if there was an error as well as the type 
of the error as discussed in Section V.  
(cid:1871)(cid:1873)(cid:1865)
In
Modulo
(cid:1866)+1
(cid:1866)+1
Out
Out
Counter
  (cid:1871)(cid:3040)(cid:1855)(cid:3041)
(cid:1855)(cid:3041)(cid:2879)(cid:2869)
  (cid:1856)(cid:3038)
In1
In2
Subtractor
(cid:1871)
(cid:1855)(cid:2870)
(cid:1855)(cid:2869)
  (cid:1871)(cid:2870)  (cid:1871)(cid:2869)
(cid:1855)(cid:2871)
  (cid:1856)(cid:2869)
(cid:1855)(cid:2873)
  (cid:1856)(cid:2870)
(cid:1855)(cid:2872)
  (cid:1871)(cid:2871)
(cid:2869)
(cid:1855)
0
(cid:2870)
0
(cid:1855)
(cid:2869)
(cid:2871)
(cid:1856)
(cid:1855)
Enable
Out
Full Adder
In2
In1
Cin
1
(cid:2872)
(cid:1855)
0
(cid:2870)
(cid:2873)
(cid:1856)
(cid:1855)
e
u
e
u
Q
O
F
I
F
(cid:2869)
(cid:2879)
(cid:3038)
(cid:3041)
(cid:1856)
(cid:1855)
0(cid:1855)
(cid:3041)
Fig. 8. Hardware implementation of the encoder 
Complete codeword 
Codeword length (bits) 
Cycles 
Frequency (GHz) 
Latency (ns) 
Power (uW) 
Energy (pJ) 
Area ((cid:1821)(cid:1813)(cid:2779)) 
Rate (w/ 6-bit delimiter) 
4 
1 
1 
1 
10 
0.01 
11 
0.1 
TABLE VII. HARDWARE IMPLEMENTATION OVERHEADS 
Encoding (optimized) 
32 
8 
12 
15 
1 
1 
15 
12 
755 
204 
2.45 
11.33 
1117 
326 
0.286 
0.684 
16 
14 
1 
14 
311 
4.35 
646 
0.5 
The “Error Correction” module uses the Checksum, ω, and 
the error decision to decode and recover the correct codeword  
by performing steps 4 and 5 of the decoding process. From the 
correct  codeword  we  can  now  extract  the  initial  stored 
dataword by just reading the positions that are not powers of 
2. The whole process is shown in Fig. 9. 
C.  Analysis: Latency, Power, Energy, and Area 
However, we observe that the latency for error-free decoding 
We now present the results of evaluating the hardware that 
we  implemented in Verilog  and  synthesized  with  Synopsys 
Design Compiler. Table VII presents latency, power, energy, 
optimized  encoding  process  and  the  error-free  decoding 
process. These results do not include the actual costs to read 
or write a codeword; in Section VII we use these results to 
evaluate GreenFlag as a whole. 
and  area  results  for  various  codeword  lengths  ((cid:1866))  for  the 
As  expected,  overheads  tend  to  increase  as (cid:1866) increases. 
is constant with respect to (cid:1866). That happens because part of the 
(the error-free latency) plus (cid:1866)/2 cycles (at 0.8GHz) to shift 
half-way  through  the  codeword.  For (cid:1866)=32,  that  latency 
Table VII). For (cid:1866)=32, this latency equals 203ns.  
Even though error-free performance is more critical, we 
also study decoding performance in the presence of errors. For 
single shift errors, the latency depends on the position of the 
error.  On  average,  the  expected  decoding  latency  is  8.75ns 
equals 28.75ns. For double shift errors, the latency is twice the 
error-free latency plus the product of n and the latency to re-
read each bit (i.e., 3.7ns to shift and 2.1ns to read, as shown in 
decoding  process  is  done  in  parallel  with  reading  the 
codeword from the racetrack.  
4 
11 
0.8 
8.75 
212 
0.24 
652 
0.1 
64 
71 
0.8 
8.75 
812 
72.07 
2321 
0.814 
16 
23 
0.8 