# Command Line Interface (CLI) Quick Reference and Usage Guide

## Table of Contents
1. Viewing the CLI Quick Reference Using the `help` Command
2. Viewing Context-Sensitive Help in the CLI
3. Using the `no` Command
4. Configuring and Viewing Command History
5. Editing Features and Shortcuts
6. Searching and Filtering CLI Output
7. Working with Regular Expressions
8. Special Character Support in Strings

---

### 1. Viewing the CLI Quick Reference Using the `help` Command

The `help` command, available at any command level, provides a quick reference to the CLI. 

**Example:**
```bash
ACOS> help
```

**Output:**
```
CLI Quick Reference
===============
1. Online Help
   - Enter “?” at a command prompt to list the commands available at that CLI level.
   - Enter "?" at any point within a command to list the available options.
   - Two types of help are provided:
     1. Type "?" to display each possible option and its description. Example: `show ?`
     2. Enter part of an option followed by "?". Example: `show us?`

2. Word Completion
   - The CLI supports command completion. Press "tab" after entering enough characters to avoid ambiguity.
```

---

### 2. Viewing Context-Sensitive Help in the CLI

Context-sensitive help provides a list of available commands, arguments, and keywords for any command.

**Commands:**
- `Help`: Displays the CLI Quick Reference.
- `abbreviated-command-help?`: Lists all commands beginning with the abbreviation before the (?).
- `abbreviated-command-complete`: Completes a partial command name if unambiguous.
- `command ?`: Lists the available syntax options for the entered command.
- `command keyword ?`: Lists the next available syntax option for the command.

**Examples:**
- **Word Help:**
  ```bash
  ACOS# co?
  configure Entering config mode
  ```

- **Command Syntax Help:**
  ```bash
  ACOS# configure ?
  terminal Config from the terminal
  ```

---

### 3. Using the `no` Command

Most configuration commands have a `no` form to disable a feature or function. The command without the `no` keyword re-enables the feature.

**Example:**
- To disable `terminal auto-size`:
  ```bash
  no terminal auto-size
  ```
- To re-enable it:
  ```bash
  terminal auto-size
  ```

---

### 4. Configuring and Viewing Command History

The CLI maintains a history of commands. You can set the buffer size and recall commands.

**Setting the Command History Buffer Size:**
- Default: 256 command lines.
- Change the buffer size:
  ```bash
  ACOS# terminal history size 500
  ACOS# show terminal | sec history
  History is enabled, history size is 500
  ```

**Recalling Commands:**
- Use `Ctrl+P` or the Up Arrow key to recall recent commands.
- Use `Ctrl+N` or the Down Arrow key to return to more recent commands.
- List recent commands:
  ```bash
  ACOS> show history
  ```

---

### 5. Editing Features and Shortcuts

Various shortcuts and editing features are available in the CLI.

**Cursor Positioning:**
- `Left Arrow` or `Ctrl+B`: Move cursor left.
- `Right Arrow` or `Ctrl+F`: Move cursor right.
- `Ctrl+A`: Move to the beginning of the line.
- `Ctrl+E`: Move to the end of the line.

**Completing Partial Command Names:**
- Enter the first few letters of a command and press `Tab` to complete it.
- If ambiguous, use `?` to list possible commands.

**Deleting Entries:**
- `Backspace`: Delete the character left of the cursor.
- `Delete` or `Ctrl+D`: Delete the character under the cursor.
- `Ctrl+K`: Delete from the cursor to the end of the line.
- `Ctrl+U` or `Ctrl+X`: Delete from the cursor to the beginning of the line.
- `Ctrl+W`: Delete the word to the left of the cursor.

**Continuing Output at the `--MORE--` Prompt:**
- Press `Enter` to scroll down one line.
- Press the spacebar to display the next full screen of output.

**Redisplaying the Current Command Line:**
- Use `Ctrl+L` or `Ctrl+R` to refresh the screen.

**Editing Pre-Configured SLB Items:**
- Display a list of configured items by entering a partial command followed by `?`.
- Example:
  ```bash
  ACOS(config)# slb server ?
  NAME Server Name
  a1
  a2
  deploy1
  rs1
  ```

---

### 6. Searching and Filtering CLI Output

Filter the output of `show` commands to exclude unnecessary information.

**Common Output Filters:**
- `begin string`: Begins the output with the line containing the specified string.
- `include string`: Displays only lines containing the specified string.
- `exclude string`: Displays only lines not containing the specified string.
- `section string`: Displays only lines for the specified section.

**Advanced Output Filters:**
- `grep [invert-match] string`: Display lines matching the specified `grep` expression.
- `awk [fs separator] print expression`: Display fields matching the specified `awk` expression.
- `cut [delimiter char] fields field`: Do not show the output matching the specified `cut` expression.
- `sort [numeric-sort] [reverse] [unique]`: Sort the lines in the output.
- `uniq [skip-chars num] [skip-fields num] [count] [repeated]`: Show only unique lines.

**Examples:**
- **Using Regular Expressions:**
  ```bash
  ACOS(config)# show arp | include 192.168.1.3*
  192.168.1.3 001d.4608.1e40 Dynamic ethernet4
  192.168.1.33 0019.d165.c2ab Dynamic ethernet4
  ```

- **Viewing a Specific Section:**
  ```bash
  ACOS(config)# show startup-config | section logging
  logging console error
  logging buffered debugging
  logging monitor debugging
  logging buffered 30000
  logging facility local0
  ```

- **Viewing Unique Output Strings:**
  ```bash
  AX5100(config)# show log | grep Error | sort | uniq
  Apr 03 2015 01:55:42 Error [SYSTEM]:The user, admin, from the remote host, 172.17.1.169:52130, failed in the CLI authentication.
  Apr 06 2015 21:48:45 Error [SYSTEM]:The user, admin, from the remote host, 172.17.1.169:51582, failed in the CLI authentication.
  ...
  ```

---

### 7. Working with Regular Expressions

Regular expressions are used to match patterns in CLI output. They are case-sensitive and can be simple or complex.

**Single-Character Patterns:**
- `.`: Matches any single character, including white space.
- `*`: Matches 0 or more sequences of the pattern.
- `+`: Matches 1 or more sequences of the pattern.
- `?`: Matches 0 or 1 occurrences of the pattern.
- `^`: Matches the beginning of the string.
- `$`: Matches the end of the string.
- `_` (underscore): Matches a comma (,), left brace ({), right brace (}), left parenthesis ( ( ), right parenthesis ( ) ), the beginning of the string, the end of the string, or a space.

---

### 8. Special Character Support in Strings

Special characters in strings have specific meanings in regular expressions. Refer to the table below for their usage.

**Table 8: Single-Character Regular Expression Patterns**
| Character | Meaning |
|-----------|---------|
| `.`       | Matches any single character, including white space |
| `*`       | Matches 0 or more sequences of the pattern |
| `+`       | Matches 1 or more sequences of the pattern |
| `?`       | Matches 0 or 1 occurrences of the pattern |
| `^`       | Matches the beginning of the string |
| `$`       | Matches the end of the string |
| `_` (underscore) | Matches a comma (,), left brace ({), right brace (}), left parenthesis ( ( ), right parenthesis ( ) ), the beginning of the string, the end of the string, or a space |

---

This guide provides a comprehensive overview of using the CLI, including help commands, context-sensitive help, the `no` command, command history, editing features, and filtering and searching output.