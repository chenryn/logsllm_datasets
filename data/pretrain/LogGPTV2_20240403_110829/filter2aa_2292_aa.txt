WMCTF WriteUp By Nu1L
AuthorNu1L Team
WMCTF WriteUp By Nu1L
RE
Meet_in_July
Welcome to CTF
Wmware
easy_apk
easy_re
WEB
Make PHP Great Again
gogogo
base64
Make PHP Great Again 2.0
web_checkin2
SimpleAuth
webweb
web_checkin
Misc
Music_game
XMAN_Happy_birthday
Performance_artist
sign-in
Dalabengba
Part1
Part2
Part3
Music_game_2
FeedBack
Crypto
piece_of_cake
babySum
Game
Pwn
roshambo
cfgo-CheckIn
mengyedekending
RE
Meet_in_July
exeMIRACL
N
320265757102059730318470218759311257989*361550014853497117429835520396253724753
Mathematicax
Welcome to CTF
Maincheck
WMCTF{VGlrcFtsdVhmZn5UamFvaBAREhMVFxUTHR8dExUXFRM=}
patchpatch
// flag: flag{flag_part}flag_part 0-9A-F
x = bytes_to_long(unhexlify(flag_part))
d = 
15956426724371358762446154331862284300421200863619433817153609426765022725189
N = 
115792089237316195423570985008687907932742180837157534228835789659027378301717
check if -7 x + 14 x^3 - 7 x^5 + x^7 == d (mod N)
Solve[{-7 *x + 14 *x^3 - 7 *x^5 + x^7 == 
   Mod[159564267243713587624461543318622843004212008636194338171536094\
26765022725189, 320265757102059730318470218759311257989]}, 
 Modulus -> 320265757102059730318470218759311257989]
// {{x -> 314046182507365208896881670173330660473}}
Solve[{-7 *x + 14 *x^3 - 7 *x^5 + x^7 == 
   Mod[159564267243713587624461543318622843004212008636194338171536094\
26765022725189, 361550014853497117429835520396253724753]}, 
 Modulus -> 361550014853497117429835520396253724753]
// {{x -> 10723067319997533594300359658518990548}}
ChineseRemainder[{314046182507365208896881670173330660473, 
  10723067319997533594300359658518990548}, \
{320265757102059730318470218759311257989, 
  361550014853497117429835520396253724753}]
// 1760820454524237872034879379805812342557597909323435364594773299479816\
3637792
x = 176082045452423787203487937980581234255759790932343536459477329947\
98163637792
Mod[-7 *x + 14 *x^3 - 7 *x^5 + 
  x^7, 115792089237316195423570985008687907932742180837157534228835789\
659027378301717]
// 1595642672437135876244615433186228430042120086361943381715360942676502\
2725189
0040208Ca**3 + b**3 + c**3 == 43
80435758145817515(-80538738812075974)**3 + 80435758145817515**3 +
12602123297335631**3==424243
42bn_cmppatch
edx
43420040208C42
00402316base64 decodedump
b64decode004021AERSAe65537N
0xcad984557c97e039431a226ad727f0c6d43ef3d418469f1b375049b229843ee9f83b1f97738ac27
4f5f61f401f21f1913e4b64bb31b55a38d398c0dfed00b1392f0889711c44b359e7976c617fcc734f06
e3e95c26476091b52f462e79413db5
00405B00numdig
RSAnumdig298bytes-a7bytesb0040208C
7bytes2*7=148bytes29-14=15RSA
0y aa aa aa aa aa aa aa bb bb bb bb bb bb bbya80538738812075974
b1260212329733563101 1e 21 8e 65 8d 3f c6 2c c5 90 7a 8d a9 4f
0040216B  EB FE 
00564080  01 00 00 00 8C 40 56 00 00 00 00 00 2A 00 00 00  .....@V.....*...  
00564090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
python3 RsaCtfTool.py -n 
0xcad984557c97e039431a226ad727f0c6d43ef3d418469f1b375049b229843ee9f83b1f97738a
c274f5f61f401f21f1913e4b64bb31b55a38d398c0dfed00b1392f0889711c44b359e7976c617f
cc734f06e3e95c26476091b52f462e79413db5 -e 65537 --uncipher 
0x11e218e658d3fc62cc5907a8da94f
Unciphered data :
b'\x14\xe3\x87iT\xc3\xc2\x9d@\x8c1\x8d"\x18\xcd-
7Uk;\xacM\xfe\x93\x8f\xdb\xf6\x17\x07\x9b\x04\x1c\xc8\xa3\x96 
h\x87D\x8b>Y\xfa\x186P\xf3\x15I\xba\xe0\x084\xe4z*\xcb\xc1\xed\xe2\xfb\xe5\xe1
x\xcd\xaffhU\xc6\x1d\x1e\x96)\x93]\x93f\xd8\xde\xe7n\x95\xfc\x18Mt\'\xe4y\xde\
xe6\xfbP"7'
import base64
from binascii import unhexlify
from Crypto.Util.number import bytes_to_long
def evil_b64encode(m):
Wmware
0x7c00disk16bit
0xb19
sub_164
cx = 
eax = LBA
bx = 
0x0B28 -> 0x0BBD get_inputabcdef01234567890
    tbl = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    real_tbl = [0] * 64
    result = unhexlify(
        '77 5A 4B 47 B1 71 54 74 23 A0 29 98 DD EF 1A CA 21 9F B7 46 57 C3 A4 
EC 3F EC F8 35 C0 52 51 6F 4E 82 BE 65 0E A8 64 FC 8B 8C 11 B2 80 9E F2 
76'.replace(' ', ''))
    result = bin(bytes_to_long(result))[2:].rjust(0x30*8, '0')
    for i in range(0x30 * 8 // 6):
        idx = int(result[6*i:6*(i+1)], 2)
        real_tbl[idx] = tbl[i]
    real_tbl = ''.join(real_tbl)
    trans = str.maketrans(tbl, real_tbl)
    enc_test = base64.b64encode(m).decode().translate(trans)
    return enc_test
if __name__ == '__main__':
    rsa_dec = b'\x14\xe3\x87iT\xc3\xc2\x9d@\x8c1\x8d"\x18\xcd-
7Uk;\xacM\xfe\x93\x8f\xdb\xf6\x17\x07\x9b\x04\x1c\xc8\xa3\x96 
h\x87D\x8b>Y\xfa\x186P\xf3\x15I\xba\xe0\x084\xe4z*\xcb\xc1\xed\xe2\xfb\xe5\xe1
x\xcd\xaffhU\xc6\x1d\x1e\x96)\x93]\x93f\xd8\xde\xe7n\x95\xfc\x18Mt\'\xe4y\xde\
xe6\xfbP"7'
    # print(hex(bytes_to_long(rsa_dec)))
    print('WMCTF{' + evil_b64encode(rsa_dec) + '}')
inputarr
for i in range(81):
  for x in range(9):
    if i % 3 == 0:
      ...
    elif i % 3 == 1:
      ...
    else:
      ...
81
0
a = *(DWORD *)(arr)
b = *(DWORD)(arr + 1)
edx = ~((a | b) & (~a | ~b) & 0x24114514)
edi = 0x24114514
eax = ~(~((a | b) & (~a | ~b)) & ~0x24114514) & ~((a | b) & (~a | ~b) & 
0x24114514)
ebx = ~0x24114514
eaxa
81*9
1
a = *(DWORD *)(arr)
b = *(DWORD *)(arr + 1)
eax = ((~(~a & ~b) & ~(a & b)) & ~0x1919810) | (~(~(~a & ~b) & ~(a & b)) & 
0x1919810)
ebx = ~0x1919810
edx = ~(~(~a & ~b) & ~(a & b)) & 0x1919810
edi = 0x1919810
eaxa
2
a = *(DWORD *)(arr)
b = *(DWORD)(arr + 1)
eax = (((a & ~b) | (~a & b)) | 0x19260817) & (~((a & ~b) | (~a & b)) | 
~0x19260817)
ebx = 0x19260817
edx = ~((a & ~b) | (~a & b)) | ~0x19260817
edi = ~0x19260817
eaxa
for i in range(0x81):
        if i % 3 == 0:
            for x in range(9):
                inp[x % 9] = inp[x % 9] ^ inp[(x + 1) % 9] ^ 0x24114514
        elif i % 3 == 1:
            for x in range(9):
                inp[x % 9] = inp[x % 9] ^ inp[(x + 1) % 9] ^ 0x1919810
        elif i % 3 == 2:
            for x in range(9):
                # print(enc[x % 9] ^ 0x19260817)
                inp[x % 9] = inp[x % 9] ^ inp[(x + 1) % 9] ^ 0x19260817
    print(list(map(hex, inp)))
    print(enc == inp)
# 
for i in range(0x80, -1, -1):
        if i % 3 == 0:
            for x in range(9, 0, -1):
                enc[(x - 1) % 9] = enc[(x - 1) % 9] ^ enc[x % 9] ^ 0x24114514
        elif i % 3 == 1:
            for x in range(9, 0, -1):
                enc[(x - 1) % 9] = enc[(x - 1) % 9] ^ enc[x % 9] ^ 0x1919810
        elif i % 3 == 2:
            for x in range(9, 0, -1):
                # print(enc[x % 9] ^ 0x19260817)
                enc[(x - 1) % 9] = enc[(x - 1) % 9] ^ enc[x % 9] ^ 0x19260817
solve
[0xD8, 0x74, 0x55, 0xEC, 0xB5, 0x04, 0x1A, 0x42, 0x11, 0x6D, 0xBA, 0x02, 0x5F, 
0x05, 0x05, 0x81, 0x28, 0x6C, 0xA0, 0xED, 0x99, 0x04, 0xE0, 0x6A, 0xE7, 0x55, 
0xA9, 0x18, 0x91, 0x35, 0xD6, 0x71, 0x64, 0xA8, 0x37, 0x45]
#coding=utf-8
import struct
enc = [0xEC5574D8, 0x421A04B5, 0x02BA6D11, 0x8105055F, 0xEDA06C28, 0x6AE00499, 
0x18A955E7, 0x71D63591, 0x4537A864]
# 
# enc = [0x01919A12, 0x4DE2C752, 0x01939812, 0x4FE2C550, 0x03919810, 
0x4FE2C750, 0x01939A12, 0x4DE0C750, 0x72D78851]
# inp = [0x55575757, 0x57575555, 0x55555557, 0x55575757, 0x57575555, 
0x55555557, 0x55555757, 0x57575555, 0x55555555]
def main():
  # 
  for i in range(0x80, -1, -1):
    if i % 3 == 0:
      for x in range(9, 0, -1):
        enc[(x - 1) % 9] = enc[(x - 1) % 9] ^ enc[x % 9] ^ 0x24114514
    elif i % 3 == 1:
      for x in range(9, 0, -1):
        enc[(x - 1) % 9] = enc[(x - 1) % 9] ^ enc[x % 9] ^ 0x1919810
    elif i % 3 == 2:
      for x in range(9, 0, -1):
        # print(enc[x % 9] ^ 0x19260817)
        enc[(x - 1) % 9] = enc[(x - 1) % 9] ^ enc[x % 9] ^ 0x19260817
  # 
  # for i in range(0x81):
  #  if i % 3 == 0:
  #    for x in range(9):
  #      inp[x % 9] = inp[x % 9] ^ inp[(x + 1) % 9] ^ 0x24114514
  #  elif i % 3 == 1:
  #    for x in range(9):
  #      inp[x % 9] = inp[x % 9] ^ inp[(x + 1) % 9] ^ 0x1919810
  #  elif i % 3 == 2:
  #    for x in range(9):
  #      # print(enc[x % 9] ^ 0x19260817)
  #      inp[x % 9] = inp[x % 9] ^ inp[(x + 1) % 9] ^ 0x19260817
  print(list(map(hex, enc)))
  table1='1234567890abcdefghijklmnopqrstuvwxyz{}_+ABCDEFGHIJKLMNOPQRSTUVWXYZ'
easy_apk
dextestservicesetprop
persist.sys.usb.config noneAPKtestservicesmaliManifest
testservicedex
ELFpatchflagAES(0x0-0x1f)
liblte_security_decryption_eea3 (https://github.com/EinarGaustad/MasterThesis/blob/27e928512
1002e1dcec1ca0d4325a6d144c3ee72/lib/src/common/liblte_security.cc)
patch liblte_security_decryption_eea3messageflag
easy_re
perl codeflag
WEB
  table2=
[0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x1e,0x30,0x2e,0x20,0x12,0x
21,0x22,0x23,0x17,0x24,0x25,0x26,0x32,0x31,0x18,0x19,0x10,0x13,0x1f,0x14,0x16,
0x2f,0x11,0x2d,0x15,0x2c,0x1a,0x1b,0x0c,0x0d,0x4e,0x60,0x5e,0x50,0x42,0x51,0x5
2,0x53,0x47,0x54,0x55,0x56,0x62,0x61,0x48,0x49,0x40,0x43,0x4f,0x44,0x46,0x5f,0
x41,0x5d,0x5c,0x45]
  final=[0x6961a596, 0x60b77560, 0xb769787a, 0x598661b3, 0x9a996059, 
0x75836160, 0x9e6660a6, 0x6b6f5969, 0x70596861]
  flag=''
  real_flag=''
  for x in final:
    x1=(x&0xff)-0x55
    flag+=table1[table2.index(x1)]
    x2=((x>>8)&0xff)-0x55
    flag+=table1[table2.index(x2)]
    x3=((x>>16)&0xff)-0x55
    flag+=table1[table2.index(x3)]
    x4=((x>>24)&0xff)-0x55
    flag+=table1[table2.index(x4)]
  for i in range(6):
    for j in range(6):
      real_flag+=flag[j*6+i]
  print real_flag
if __name__ == '__main__':
  main()
W3lcomeT0WMCTF!_*Fu2^_AnT1_32E3$