### Presenters
- **Michael Ligh, Malicious Code Engineer**
- **Greg Sinclair, Rapid-Response Engineer**
- **iDefense Security Intelligence Services**

### Topic: Malware Reverse Engineering (RCE): Debuggers and Decryptor Development

#### Overview
- **How to script a debugger for malware RCE**
- **Obfuscation in Malware:**
  - Strings
  - Configurations
  - Command-and-Control (C&C) protocols/hosts
  - Stolen Data
- **Leveraging the code’s own functions to save time**
- **Examples:**
  - Kraken
  - Laqma
  - Silent Banker
  - DHTMLSpy
  - Torpig/MBR

#### The Hiding Game
- **Why do malicious code authors obfuscate?**
  - To make RCE significantly more difficult
  - To prevent others from reading stolen data
  - To prevent others from deciphering the C&C protocol
  - To make building IDS/IPS and anti-virus signatures more difficult

- **Why do we de-obfuscate?**
  - To make RCE easier
  - To recover stolen data and credentials
  - To decipher the C&C protocol
  - To build IDS/IPS and anti-virus signatures

#### Decryptor Development Methods
1. **Manual RCE: Decryptor development based on ASM**
   - Requires the most intimacy with ASM
   - More code + more complexity = more time-consuming

2. **Assisted RCE: Pressing F5 (Hex-rays)**
   - Requires type fix-up often

3. **Scripting the debugger: Let the malware do the work**
   - More code + more complexity = more time-consuming

- **The best method depends on the project.**
  - For example, Wireshark plugins require manual or assisted RCE.

#### Scripting the Debugger
- **Classes of scriptable analysis:**
  - **Active:**
    - You control which functions execute and in which order
    - Redirect EIP (“New origin here”) and “crawl” through code
    - Example: Silent Banker encoded strings (max code coverage)
  - **Passive:**
    - Monitor Trojan with function hooks, API, or internal
    - Let it run through (may need !hidedebug)
    - Example: Kraken network traffic
  - **Recon and utility scripting:**
    - Kind of a catch-all, hybrid class
    - Examples include:
      - Scanning an arbitrary file for shell code
      - Checking shared DLLs for hooks
      - Unpacking malware or other “protected” binaries

#### Requirements
- **Required:**
  - Copy of the Trojan
  - Debugger (e.g., Immunity Debugger + Python, Olly + OllyScript, IDA + IDC/IDAPython)
  - Basic RCE knowledge (unpacking, breakpoints, stepping, running, registers)

- **Optional:**
  - Disassembler
  - Virtual environment

#### Demo Summary
- **Demo Line-up:**
  - **Silent Banker:**
    - Decode binary strings
    - Resolve hash-based API imports
  - **Kraken:**
    - Print decrypted network traffic
    - Generate C&C hostnames
  - **Laqma:**
    - Snoop on shared memory and window messages (IPC)
  - **Torpig/MBR:**
    - Extract decrypted data from the kernel driver

#### Active Example: SilentBanker Strings Decoder
- **Decoding strings requires some basic RCE work:**
  - Locate obfuscated strings
  - Locate function xrefs to the obfuscated string
  - Analyze parameters/output (registers and stack) if the function looks like a decoder

#### Active Example: Silent Banker API Resolution
- **Run-time dynamic linking (RTDL) effect:**
  - LoadLibrary/GetProcAddress instead of IAT
  - API calls look like “call dword ptr [eax+20h]”
  - Makes static analysis difficult

- **SilentBanker uses hash-based RTDL:**
  - Binary contains 32-bit hash instead of function name
  - Walks a loaded library's exports
  - Example: `if hash(getNextExportName()) == 0x19272710`

- **Quick solution:**
  - Find the base address of call table
  - Run the Trojan until it fills in the call table
  - Loop through the call table with reverse lookups
  - Add a structure to the IDB and rename if desired

#### Active Example: Kraken C&C Hostname Generation
- **Spam bot uses UDP 447 and HTTP POST for C&C:**
  - Locates C&C servers based on hostname algorithm
  - Analyze the function parameters

#### Utility: Importing and Exporting Data
- **Transfer data into IDA for static analysis:**
  - Save the debugger script's output to text file
  - Use IDAPython to import the data to the .idb
  - Patch decoded strings, rename call tables with API

- **Transfer data into Immdbg for dynamic analysis:**
  - Reverse the process above
  - Save named functions, comments, structure members

#### Utility: Detect Shellcode in Arbitrary Files
- **Is that .pdf, .doc, or .jpeg malicious?**
  - Applies to any file type
  - Based on common characteristics of shellcode
  - Load the file into memory and scan each byte
  - Check for jump or call instructions, valid destination addresses, and valid instructions at the destination

- **Other methods/resources:**
  - Open suspect file in IDA and press “c”
  - Use a stream disassembler (e.g., diStorm64, Libemu)
  - Resources: Polymorphic Shellcode (Detection) by Christoph Gratl, Hybrid Engine for Polymorphic Shellcode Detection by Payer, Teufl, and Lamberger

#### Utility: Detect Hooked API Functions
- **Multiple methods for user mode API hooking:**
  - Trampoline hooks
  - IAT hooks (watch out for LoadLibrary/GetProcAddress hooks)
  - Modify DLL on disk

- **Check for trampoline hooks:**
  - For each loaded DLL and exported function, check if the prologue is overwritten

- **Determine the purpose of an API hook:**
  - Set breakpoints on the hooked functions
  - Use the target process as desired (e.g., browse to a web page)
  - Debug

#### Potential Caveats
- **The project may require “manual” or “assisted” RCE:**
  - Wireshark, Glamour/Gpcoder tool
- **Scripting ring-zero malicious code is possible but challenging:**
  - Patch API calls (e.g., ntoskrnl.exe:RtlTimeToTimeFields -> ntdll.dll:RtlTimeToFileFields)
- **Interpreted scripts can take a while to execute**
- **Subject to anti-debugger detection:**
  - Try http://www.PEiD.info/BobSoft

#### Additional Resources
- **Immunity Debugger and Forums:**
  - http://www.immunitysec.com/products-immdbg.shtml
  - http://forum.immunityinc.com
- **OpenRCE:**
  - http://www.openrce.org
- **Google Code:**
  - http://code.google.com/p/mhl-malware-scripts

### Q and A
- **Presenters:**
  - Michael Ligh
  - Greg Sinclair
  - iDefense Security Intelligence Services

**Date: June 27, 2008**