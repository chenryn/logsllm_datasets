title:Dr. Watson provides data for post-breach analysis
author:Wasim Ahmad Bhat and
S. M. K. Quadri
POSTER: Dr. Watson Provides Data for Post-Breach
Analysis
Wasim Ahmad Bhat
Department of Computer Sciences
University of Kashmir
PI:EMAIL
S.M.K. Quadri
PI:EMAIL
Department of Computer Sciences
University of Kashmir
ABSTRACT
Nowadays security systems have become highly sophisti-
cated. However, breaches are inevitable. Nevertheless, post-
breach analysis is performed to assess the severity of the
breach and to trace the intruder’s actions. This paper pro-
poses drWatson, a layered ﬁle system that in case of an
illegitimate ﬁle system access provides data for post-breach
analysis to assess the severity of the breach and to trace
the intruder’s actions. drWatson, when mounted on top of
any concrete ﬁle system, works by logging all the operations
along with their date time stamps targeted to the below
mounted ﬁle system.
Categories and Subject Descriptors
D.4 [Operating Systems]: File Systems Management ;;
D.4.6 [Operating Systems]: Security and Protection—Ac-
cess controls, Information ﬂow controls, Security kernels
General Terms
Design, Experimentation, Human Factors, Security
Keywords
ﬁle system; security breach; post-breach analysis; Dr.Watson
INTRODUCTION
1.
Computer security encompasses concepts and methods for
protecting sensitive resources in computer systems. Com-
puter security starts from the policies that regulate access
to protected resources. In technology, the focus is on mecha-
nisms for enforcing these policies. A common motivation to
invest in information security is to safeguard the conﬁden-
tial as well as the personal information. Over time, infor-
mation security systems have evolved signiﬁcantly. Policies
are brought into action at various levels across all domains.
However, even due to existence and continuous development
of strong & reliable security mechanisms for all levels, se-
curity issues still worry administrators. The fact is that
counter policies and techniques also evolve side by side to
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2512522
overcome new security blockages. Thus, it is mandatory to
invest in security systems but equally is important to antic-
ipate a breach and be prepared to retaliate. Taking regular
backups can be one of the preparations for a breach while
as the general retaliation would be to assess the severity of
the breach, to trace the intruder’s actions and to possibly
hunt down the culprit.
As part of the preparation for the retaliation, the system
needs to keep track of every possible access, modiﬁcation,
etc. done to the system resources. The persistent data resid-
ing in a ﬁle system in the form of hierarchy of ﬁles and folders
is more vulnerable to breach than some transient data that
resides in memory as the prey is always available to preda-
tor. Unfortunately, ﬁle systems are inherently incapable to
help security systems during postmortem. As an example,
all ﬁle systems maintain only 3 date time stamps per ﬁle
or folder: Last Modiﬁed, Last Accessed and Creation date
time stamps (together called as MAC DTS). This means
during postmortem, the ﬁle system can’t answer following
questions: 1) How many times was the ﬁle/folder accessed
or modiﬁed? 2) When was it accessed/modiﬁed for the ﬁrst
time? 3) What part of the ﬁle was accessed/modiﬁed every
time? 4) What was the pattern of browsing? The answer
to these questions will deﬁnitely not locate the intruder but
will certainly help in assessing the damage and speculating
the intention of intrusion.
We propose a layered ﬁle system, namely drWatson, to en-
hance the capability of ﬁle systems to help in post-breach
analysis. drWatson when mounted on top of any ﬁle system,
logs all the operations along-with their date time stamps
targeted to it. During postmortem this log provides enough
information to assess the damage and to speculate the in-
tentions of an intruder.
2. RELATED WORK
Barik et al. [2] argued that MAC DTS procedures of popu-
lar operating systems are inherently ﬂawed and were created
only for the sake of convenience and not necessarily keeping
in mind the security and digital forensic aspects. They pro-
posed a solution in context of ext2 ﬁle system by using spe-
ciﬁc data structures to preserve the Authentic date and time
stamps (ADTS). Similarly, Das et al.
[3] and Ansari et al.
[1] proposed preserving ADTS in Linux kernel 2.6.x using
Linux Loadable Kernel Module (LKM) that can be applied
to all ﬁle systems. However, all these solutions ([2] [3] & [1])
aim at preserving ADTS but not documenting every change
in MAC DTS and the cause of change. Moreover, they don’t
document the type of access and amount of access.
1445In contrast, we propose documenting every relevant infor-
mation related to any type of access to any ﬁle or folder
that will help in post-breach analysis. Furthermore, we pro-
pose using ﬁle system layering that has been used for many
purposes (like monitoring, data transformation, operation
transformation, size changing, and fan-out [8]) instead of
using any ﬁle system speciﬁc data structures or ﬁle system
source instrumentation.
3. THE DESIGN
The design of drWatson is motivated by many goals which
include:
1. The solution should be applicable to all ﬁle systems i.e.
no source modiﬁcation and no data structures speciﬁc
to any particular ﬁle system should be used.
2. The solution should log every operation targeted to
the below mounted ﬁle system along with the type
of operation, pre- and post-operation DTS, oﬀset &
amount of data read/written, and eﬀective UID.
3. The solution should hide the log from normal listing
and should deny access to it.
4. The solution should be portable across all OSes.
5. The solution should not add signiﬁcant performance
overhead to the ﬁle system operations.
In order to mitigate our goals, we designed drWatson as a
layered ﬁle system so that it is applicable to all ﬁle systems.
The capability of below mounted ﬁle system is augmented
by the layered ﬁle system as the operations can be both pre-
and post-processed while not modifying the source. There-
fore, during pre- and post-processing, drWatson documents
all parameters of the operation in a log hidden from user
applications. Also, the layered ﬁle system is able to trap
every ﬁle system operation.
Moreover, in order to be portable across all OSes it should
be layered as a user process and not as some kernel mod-
ule. Also, in order to be light-weight a well developed and a
highly optimized framework should be used. Therefore, dr-
Watson was developed using FUSE framework [7]. Figure 1
shows the interaction between various OS components and
drWatson using a FUSE framework.
Figure 1: Interaction between OS components & dr-
Watson
IMPLEMENTATION DETAILS
4.
drWatson is implemented as a layered ﬁle system using FUSE
framework. FUSE is an acronym for Filesystem in UserSpacE
and is used to develop full-ﬂedged ﬁle systems and to extend
existing ﬁle systems [7]. As such, while maintaining the reli-
ability of kernel, it allows access to facilities (like C library)
which are lacking in kernel development; the one that is ex-
ploited by drWatson is usage of simple ﬁle I/O functions of
C library to create and maintain the log.
The ﬁgure 2 shows that every ﬁle system operation can be
Figure 2: Pre- & post-processing performed by dr-
Watson
pre- and post-processed in user space by drWatson to reﬂect
the desired operation. Also, drWatson readdir() implements
the logic to restrict listing of the log ﬁle.
The FUSE framework contains a null-pass virtual ﬁle sys-
tem, fusexmp, which passes all the ﬁle system operations to
below mounted ﬁle system without any modiﬁcation. dr-
Watson is implemented by overriding the various proce-
dures of fusexmp. However, fusexmp doesn’t support over-
lay mounting and as such any mount point passed to fu-
sexmp during mounting, mounts the root directory (/) on
that mount point. Having said that, a little modiﬁcation to
fusexmp gets it overlaid on the speciﬁed mount point, which
can be a simple directory or a mount point of some other
ﬁle system. It has two beneﬁts; 1) it adds to transparency
of drWatson as no path change is required by applications
accessing that volume, and 2) it leaves no path to access
native ﬁle system without the intervention of drWatson.
Furthermore, FUSE framework has been ported to almost
all platforms including Windows [4].
drWatson in speciﬁc and FUSE ﬁle systems in general, in-
cur performance overhead as kernel boundary is crossed to
process the call.
In addition to multiple context switch-
ing, multiple process switching and data copying during
call processing also add overhead [6]. However, the bene-
ﬁts of development-ease, reliable environment and portable
ﬁle system outweigh the drawbacks.
5. WORKING
The working of drWatson is simple. Whenever a ﬁle system
syscall is invoked on any ﬁle system having drWatson lay-
ered over it, drWatson pre-processes the call by opening the
log, followed by documenting the type of operation, name
of target ﬁle/folder, eﬀective UID, current MAC DTS of the
target ﬁle/folder and in case of a read/write operation the
oﬀset at which read/write is supposed to take place and ﬁ-
nally the amount of data read/written. This is followed by
passing the operation to the actual ﬁle system. Finally, after
VFSFUSEFile SystemUser-ModeKernel-ModeFile System OperationsdrWatsonPre-ProcessingUser-ModeKernel-Mode/dev/fusePost-Processingfs_op()vfs_op()fs_op()vfs_op()op()1446the call returns, drWatson post-processes the call to docu-
ment the new MAC DTS of the target ﬁle/folder. Algorithm
1 summarizes the working of drWatson.
Algorithm 1 Algorithm for pre- and post-processing of
syscalls
Input: f sOperation, eU ID
1: open(log)
2: append(log) ← f sOperation.T ype
3: append(log) ← f sOperation.f ilename
4: append(log) ← f sOperation.eU ID
5: append(log) ← f sOperation.f ilename.DT S
6: if f sOperation.T ype = READ/WRITE then
append(log) ← f sOperation.of f set
7:
append(log) ← f sOperation.count
8:
9: end if
10: if f sOperation.f ilename (cid:54)= log then
11:
12: end if
13: append(log) ← f sOperation.f ilename.DT S
14: close(log)
call(f sOperation)
6. EXPERIMENT & RESULTS
We employed Filebench [5] to exercise ext2 ﬁle system with
drWatson layered over it. Filebench is a ﬁle system and
storage benchmark that allows to generate a large variety
of workloads. The experiment was intended to check the
amount of information documented by drWatson and to test
the implementation for ﬂaws. The results indicate that dr-
Watson is successfully able to document every piece of in-
formation relevant to post-breach analysis.
7. CONCLUSION
In this paper we argued that ﬁle systems don’t store enough
information relevant to post-breach analysis as they main-
tain only 3 date time stamps viz.
last Modiﬁed, last Ac-
cessed & Creation (MAC DTS). We found that current pro-
posals are only able to preserve the authentic date time
stamps (ADTS).
We proposed preserving MAC DTS (along with other rele-
vant information) after every ﬁle system operation so that
enough information is available during postmortem of the
ﬁle system. However, in order to have the proposal appli-
cable to all ﬁle systems and portable across all platforms,
we proposed that the solution be developed as a layered ﬁle
system in userspace.
Based on this idea, we developed a layered ﬁle system, namely
drWatson, using FUSE framework that documents every in-
formation of every ﬁle system operation relevant to the post-
breach analysis. On exercising the ext2 ﬁle system with
Filebench benchmark, we found that drWatson is able to
log enough information required during postmortem in case
of a breach.
8. REFERENCES
[1] A. Ansari, A. Chattopadhayay, and S. Das. A kernel
level vfs logger for building eﬃcient ﬁle system
intrusion detection system. In Computer and Network
Technology (ICCNT), 2010 Second International
Conference on, pages 273–279. IEEE, 2010.
[2] M. S. Barik, G. Gupta, S. Sinha, A. Mishra, and
C. Mazumdar. An eﬃcient technique for enhancing
forensic capabilities of ext2 ﬁle system. digital
investigation, 4:55–61, 2007.
[3] S. Das, A. Chattopadhayay, D. K. Kalyani, and
M. Saha. File-system intrusion detection by preserving
mac dts: a loadable kernel module based approach for
linux kernel 2.6. x. CSIIRW, 9:1–6, 2009.
[4] E. Driscoll, J. Beavers, and H. Tokuda. Fuse-nt:
Userspace ﬁle systems for windows nt. 2008.
[5] R. McDougall and J. Mauro. Filebench, 2005.
[6] A. Rajgarhia and A. Gehani. Performance and
extension of user space ﬁle systems. In Proceedings of
the 2010 ACM Symposium on Applied Computing, SAC
’10, pages 206–213, New York, NY, USA, 2010. ACM.
[7] M. Szeredi. Filesystem in userspace, 2005.
[8] E. Zadok, R. Iyer, N. Joukov, G. Sivathanu, and C. P.
Wright. On incremental ﬁle system development.
Transactions on Storage, 2:161–196, May 2006.
1447