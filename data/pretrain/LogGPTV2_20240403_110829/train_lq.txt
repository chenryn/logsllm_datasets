.i copy
of the namespace of the process that called
.br clone (2);
or it calls
.br unshare (2)
with the
.br clone_newns
flag,
which causes the caller's mount namespace to obtain a private copy
of the namespace that it was previously sharing with other processes,
so that future mounts and unmounts by the caller are invisible
to other processes (except child processes that the caller
subsequently creates) and vice versa.
.pp
for further details on mount namespaces, see
.br mount_namespaces (7).
.\"
.ss parental relationship between mounts
each mount has a parent mount.
the overall parental relationship of all mounts defines
the single directory hierarchy seen by the processes within a mount namespace.
.pp
the parent of a new mount is defined when the mount is created.
in the usual case,
the parent of a new mount is the mount of the filesystem
containing the directory or file at which the new mount is attached.
in the case where a new mount is stacked on top of an existing mount,
the parent of the new mount is the previous mount that was stacked
at that location.
.pp
the parental relationship between mounts can be discovered via the
.i /proc/[pid]/mountinfo
file (see below).
.\"
.ss /proc/[pid]/mounts and /proc/[pid]/mountinfo
the linux-specific
.i /proc/[pid]/mounts
file exposes the list of mounts in the mount
namespace of the process with the specified id.
the
.i /proc/[pid]/mountinfo
file exposes even more information about mounts,
including the propagation type and mount id information that makes it
possible to discover the parental relationship between mounts.
see
.br proc (5)
and
.br mount_namespaces (7)
for details of this file.
.sh see also
.br mountpoint (1),
.br chroot (2),
.br ioctl_iflags (2),
.br mount_settatr (2),
.br pivot_root (2),
.br umount (2),
.br mount_namespaces (7),
.br path_resolution (7),
.br findmnt (8),
.br lsblk (8),
.br mount (8),
.br umount (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
for general information about how to contribute, see:
https://www.kernel.org/doc/man-pages/contributing.html
for information on how to send patches, see:
https://www.kernel.org/doc/man-pages/patches.html
for a description of the preferred layout of manual pages,
as well as some style guide notes, see:
    $ man 7 man-pages
for information about reporting bugs, see:
https://www.kernel.org/doc/man-pages/reporting_bugs.html
.\" copyright (c) 2012 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th mcheck 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
mcheck, mcheck_check_all, mcheck_pedantic, mprobe \- heap consistency checking
.sh synopsis
.nf
.b #include 
.pp
.bi "int mcheck(void (*" abortfunc ")(enum mcheck_status " mstatus ));
.bi "int mcheck_pedantic(void (*" abortfunc ")(enum mcheck_status " mstatus ));
.b void mcheck_check_all(void);
.pp
.bi "enum mcheck_status mprobe(void *" ptr );
.fi
.sh description
the
.br mcheck ()
function installs a set of debugging hooks for the
.br malloc (3)
family of memory-allocation functions.
these hooks cause certain consistency checks to be performed
on the state of the heap.
the checks can detect application errors such as freeing a block of memory
more than once or corrupting the bookkeeping data structures
that immediately precede a block of allocated memory.
.pp
to be effective, the
.br mcheck ()
function must be called before the first call to
.br malloc (3)
or a related function.
in cases where this is difficult to ensure, linking the program with
.ir \-lmcheck
inserts an implicit call to
.br mcheck ()
(with a null argument)
before the first call to a memory-allocation function.
.pp
the
.br mcheck_pedantic ()
function is similar to
.br mcheck (),
but performs checks on all allocated blocks whenever
one of the memory-allocation functions is called.
this can be very slow!
.pp
the
.br mcheck_check_all ()
function causes an immediate check on all allocated blocks.
this call is effective only if
.br mcheck ()
is called beforehand.
.pp
if the system detects an inconsistency in the heap,
the caller-supplied function pointed to by
.i abortfunc
is invoked with a single argument,
.ir mstatus ,
that indicates what type of inconsistency was detected.
if
.i abortfunc
is null, a default function prints an error message on
.ir stderr
and calls
.br abort (3).
.pp
the
.br mprobe ()
function performs a consistency check on
the block of allocated memory pointed to by
.ir ptr .
the
.br mcheck ()
function should be called beforehand (otherwise
.br mprobe ()
returns
.br mcheck_disabled ).
.pp
the following list describes the values returned by
.br mprobe ()
or passed as the
.i mstatus
argument when
.i abortfunc
is invoked:
.tp
.br mcheck_disabled " (" mprobe "() only)"
.br mcheck ()
was not called before the first memory allocation function was called.
consistency checking is not possible.
.tp
.br mcheck_ok " (" mprobe "() only)"
no inconsistency detected.
.tp
.b mcheck_head
memory preceding an allocated block was clobbered.
.tp
.b mcheck_tail
memory following an allocated block was clobbered.
.tp
.b
mcheck_free
a block of memory was freed twice.
.sh return value
.br mcheck ()
and
.br mcheck_pedantic ()
return 0 on success, or \-1 on error.
.sh versions
the
.br mcheck_pedantic ()
and
.br mcheck_check_all ()
functions are available since glibc 2.2.
the
.br mcheck ()
and
.br mprobe ()
functions are present since at least glibc 2.0
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mcheck (),
.br mcheck_pedantic (),
.br mcheck_check_all (),
.br mprobe ()
t}	thread safety	t{
mt-unsafe race:mcheck
const:malloc_hooks
t}
.te
.hy
.ad
.sp 1
.sh conforming to
these functions are gnu extensions.
.sh notes
linking a program with
.i \-lmcheck
and using the
.b malloc_check_
environment variable (described in
.br mallopt (3))
cause the same kinds of errors to be detected.
but, using
.b malloc_check_
does not require the application to be relinked.
.\" but is malloc_check_ slower?
.sh examples
the program below calls
.br mcheck ()
with a null argument and then frees the same block of memory twice.
the following shell session demonstrates what happens
when running the program:
.pp
.in +4n
.ex
.rb "$" " ./a.out"
about to free
about to free a second time
block freed twice
aborted (core dumped)
.ee
.in
.ss program source
\&
.ex
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    char *p;
    if (mcheck(null) != 0) {
        fprintf(stderr, "mcheck() failed\en");
        exit(exit_failure);
    }
    p = malloc(1000);
    fprintf(stderr, "about to free\en");
    free(p);
    fprintf(stderr, "\enabout to free a second time\en");
    free(p);
    exit(exit_success);
}
.ee
.sh see also
.br malloc (3),
.br mallopt (3),
.br mtrace (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/ctime.3
.\" copyright (c) 2014 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th sprof 1 2020-11-01 "linux" "linux user manual"
.sh name
sprof \- read and display shared object profiling data
.sh synopsis
.nf
.br sprof " [\fioption\fp]... \fishared-object-path\fp \
[\fiprofile-data-path\fp]"
.fi
.sh description
the
.b sprof
command displays a profiling summary for the
shared object (shared library) specified as its first command-line argument.
the profiling summary is created using previously generated
profiling data in the (optional) second command-line argument.
if the profiling data pathname is omitted, then
.b sprof
will attempt to deduce it using the soname of the shared object,
looking for a file with the name
.i .profile
in the current directory.
.sh options
the following command-line options specify the profile output
to be produced:
.tp
.br \-c ", " \-\-call\-pairs
print a list of pairs of call paths for the interfaces exported
by the shared object,
along with the number of times each path is used.
.tp
.br \-p ", " \-\-flat\-profile
generate a flat profile of all of the functions in the monitored object,
with counts and ticks.
.tp
.br \-q ", " \-\-graph
generate a call graph.
.pp
if none of the above options is specified,
then the default behavior is to display a flat profile and a call graph.
.pp
the following additional command-line options are available:
.tp
.br \-? ", " \-\-help
display a summary of command-line options and arguments and exit.
.tp
.b \-\-usage
display a short usage message and exit.
.tp
.br \-v ", " \-\-version
display the program version and exit.
.sh conforming to
the
.b sprof
command is a gnu extension, not present in posix.1.
.sh examples
the following example demonstrates the use of
.br sprof .
the example consists of a main program that calls two functions
in a shared object.
first, the code of the main program:
.pp
.in +4n
.ex
$ \fbcat prog.c\fp
#include 
void x1(void);
void x2(void);
int
main(int argc, char *argv[])
{
    x1();
    x2();
    exit(exit_success);
}
.ee
.in
.pp
the functions
.ir x1 ()
and
.ir x2 ()
are defined in the following source file that is used to
construct the shared object:
.pp
.in +4n
.ex
$ \fbcat libdemo.c\fp
#include 
void
consumecpu1(int lim)
{
    for (int j = 0; j   (0x00007fff86d66000)
	libdemo.so.1 => not found
	libc.so.6 => /lib64/libc.so.6 (0x00007fd4dc138000)
	/lib64/ld\-linux\-x86\-64.so.2 (0x00007fd4dc51f000)
.ee
.in
.pp
in order to get profiling information for the shared object,
we define the environment variable
.b ld_profile
with the soname of the library:
.pp
.in +4n
.ex
$ \fbexport ld_profile=libdemo.so.1\fp
.ee
.in
.pp
we then define the environment variable
.b ld_profile_output
with the pathname of the directory where profile output should be written,
and create that directory if it does not exist already:
.pp
.in +4n
.ex
$ \fbexport ld_profile_output=$(pwd)/prof_data\fp
$ \fbmkdir \-p $ld_profile_output\fp
.ee
.in
.pp
.b ld_profile
causes profiling output to be
.i appended
to the output file if it already exists,
so we ensure that there is no preexisting profiling data:
.pp
.in +4n
.ex
$ \fbrm \-f $ld_profile_output/$ld_profile.profile\fp
.ee
.in
.pp
we then run the program to produce the profiling output,
which is written to a file in the directory specified in
.br ld_profile_output :
.pp
.in +4n
.ex
$ \fbld_library_path=. ./prog\fp
$ \fbls prof_data\fp
libdemo.so.1.profile
.ee
.in
.pp
we then use the
.b sprof \-p