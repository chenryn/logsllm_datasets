ple equivocation check achieves consistency because a replica stops
outputting if it detects equivocation. A faulty sender can exploit this
to break liveness (in particular totality): after some honest repica
outputs a value, the sender rushes to send a conflicting proposal
to another honest replica to stop it from outputting. To prevent
this attack, we perform equivocation check on both proposals and
certificates. We first perform equivocation check on proposal to
rule out conflicting votes among honest replicas. Then, after re-
ceiving a certificate, we perform equivocation check on certificates
to rule out conflicting decisions. The latter easily achieves consis-
tency with an arbitrary 𝛽𝑠  𝛾𝑠, both values must have been voted by honest replicas.
Let 𝑟 and 𝑟′ be the first honest replicas that have voted for 𝑏 and 𝑏′
at time 𝑡 and 𝑡′, respectively. Without loss of generality, we assume
𝑡 ≤ 𝑡′. As 𝑟 votes for 𝑏 at 𝑡, it must have received and broadcast
⟨propose, 𝑏⟩𝑟𝑠 at 𝑡 − Δ. Then, all honest replicas including 𝑟′ must
have received it by 𝑡 ≤ 𝑡′. Therefore, 𝑟′ could not have voted for
𝑏′ ≠ 𝑏 at 𝑡′, a contradiction.
An honest designated sender broadcasts ⟨propose, 𝑏𝑖𝑛⟩𝑟𝑠 , and all
𝑛 − 𝛾𝑠 honest replicas vote for 𝑏𝑖𝑛 forming a certificate C(𝑏𝑖𝑛). As
no conflicting certificate exists, all honest replicas output the value
𝑏𝑖𝑛. Thus, the validity holds.
If an honest replica outputs a value 𝑏, then it must have received
and broadcast C(𝑏), which is received by all honest replicas. As no
conflicting certificate exists, all honest replicas output the value 𝑏.
Thus, the totality holds.
□
Lemma 3.4 (Safety). If the network is asynchronous and there are
at most 𝛽𝑎 faults, then safety holds.
Proof. Integrity proof is identical to Lemma 3.2. We prove con-
sistency. Suppose for the sake of contradiction that honest replicas
output two different values 𝑏 and 𝑏′, then two certificates C(𝑏)
and C(𝑏′) are both formed. Let 𝐶 and 𝐶′ be the two sets of 𝑛 − 𝛾𝑠
replicas that have voted for 𝑏 and 𝑏′. As 𝐶 and 𝐶′ intersect at
2(𝑛 −𝛾𝑠) − 𝑛 = 𝛽𝑎 + 1 replicas, at least an honest replicas must have
voted for both values, a contradiction.
□
Lemma 3.5 (Liveness). If the network is under asynchrony and
there are at most 𝛾𝑎 faults, then liveness holds.
Proof. Due to a quorum-intersection argument like the proof of
Lemma 3.4 in the presence of 𝛾𝑎 ≤ 𝛽𝑎 faults, there cannot be conflict-
ing certificates. The rest of the proof is identical to Lemma 3.3. □
Efficiency. When the leader is honest, the latency of the protocol is
two rounds plus 2Δ time; under synchrony, it can be written as 2Δ+
2𝛿 where 𝛿 is the actual network delay and is usually significantly
smaller than the conservative delay bound Δ. Our protocol requires
𝑂(𝑛2) messages, matching that of the Bracha’s broadcast [10]. The
communication complexity (in bits) of our protocol is 𝑂(𝑛3) as
replicas send certificates containing 𝑂(𝑛) signatures. This is more
expensive than Bracha’s 𝑂(𝑛2) RBC. It can be reduced to 𝑂(𝑛2)
using threshold signatures [13, 25].
4 TIGHT FAULT TOLERANCE BOUND ON
MT-BFT SMR IN THE PSYNC-SYNC MODEL
This section establishes a tight bound on the fault thresholds of
MT-BFT for state machine replication in the psync-sync model.
4.1 Fault Tolerance Limit of MT-BFT SMR
As mentioned before, a SMR protocol can solve RBC under the
same condition. Suppose we have a SMR protocol. The 𝑛 replicas
participating in the RBC execution run the SMR protocol. The
designated sender 𝑟𝑠 generates a transaction containing the signed
input value ⟨𝑏𝑖𝑛⟩𝑟𝑠 . A replica outputs the first transaction in the
SMR log that is signed by the sender 𝑟𝑠. That is, when a replica
outputs in SMR a log [𝑡𝑥1, 𝑡𝑥2, ..𝑡𝑥𝑙] where 𝑡𝑥𝑖 is ⟨𝑏⟩𝑟𝑠 and no 𝑡𝑥 𝑗
(𝑗  0, its threshold parameters satisfy 𝛽𝑠 + 𝛾𝑠 ≥ 𝑛.
Proof. Suppose for the sake of contradiction there exists a MT-
BFT PVRBC protocol whose threshold parameters satisfy 𝛽𝑠+𝛾𝑠 = 𝑛
for a certain 𝑛 > 0 (trivially extended for 𝛽𝑠 + 𝛾𝑠 > 𝑛). Suppose the
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1690network consists of two partitions 𝑃 and 𝑄 with size 𝛾𝑠 > 0 and
𝛽𝑠 > 0, respectively. A designated sender 𝑟𝑠 is in 𝑄. In this setting,
there are three possible executions below.
In the first execution (W1), all replicas are honest. The sender 𝑟𝑠
has an input value 𝑏. By the liveness, every honest replica outputs
𝑏, i.e., obtains a proof 𝜋 such that Verify(𝑏, 𝜋) = 1.
In the second execution (W2), all 𝛾𝑠 replicas in 𝑃 crash. The
sender 𝑟𝑠 has an input value 𝑏′ ≠ 𝑏. By the liveness in the presence
of 𝛾𝑠 faults, every honest replica outputs 𝑏′, i.e., obtains a proof 𝜋′
such that Verify(𝑏′, 𝜋′) = 1.
In the third execution (W3), all 𝛽𝑠 replicas in 𝑄 are Byzantine. 𝑄
behave towards 𝑃 as in W1. Replicas in 𝑃 cannot distinguish W1
and W3, so they behave as in W1. Thus, Byzantine replicas in 𝑄
can obtain 𝜋 such that Verify(𝑏, 𝜋) = 1. On the other hand, 𝑄 can
simulate the execution of W2 in which 𝑃 crash. Thus, Byzantine
replicas in 𝑄 can also generate 𝜋′ such that Verify(𝑏′, 𝜋) = 1. This
means honest replicas can receive proofs 𝜋 and 𝜋′ for two different
values 𝑏 ≠ 𝑏′ such that Verify(𝑏, 𝜋) = 1 and Verify(𝑏′, 𝜋′) = 1. This
violates consistency. However, as the number of faults is |𝑄| = 𝛽𝑠,
consistency should hold. This is a contradiction.
□
The extra constraint shows that BFT SMR can achieve higher
(though not perfect) synchronous safety at the cost of synchronous
liveness. This observation helps us find new improvements to classic
asynchronous and partially synchronous protocols to potentially
tolerate 𝛽𝑠 < 2𝑛/3 for synchronous safety.
A remark on Schneider [45]. It has been stated, without a proof,
that BFT SMR can tolerate only 𝑓 < 𝑛/2 faults due to the need
for public verifiability [45]. While intuition is clear for this claim,
we are not aware of a rigorous proof for it. We observe that it is a
special form of our Theorem 4.1 with a restriction of 𝑡 = 𝛽𝑠 = 𝛾𝑠.
So we have provided a rigorous proof for this well-known result.
4.2 A MT-BFT SMR Protocol with Optimal
Fault Tolerance
We present a MT-BFT SMR protocol with optimal fault tolerance in
the psync-sync model. Our protocol allows any parameter choice
within the optimal trade-offs. Namely, a protocol designer can first
pick 𝛾𝑠 < 𝑛/2. Then, other parameters are determined as follows
(1) 𝛽𝑎 = 𝑛 − 2𝛾𝑠 − 1
(2) 𝛽𝑠 = 𝑛 − 𝛾𝑠 − 1
(3) 𝛾𝑎 = min{𝛽𝑎, 𝛾𝑠}
This is optimal given Theorem 3.1 and 4.1 and also establish the
tightness of the bounds for MT-BFT SMR in the psync-sync model.
Commit and public verifiability. When proving a negative re-
sult, we had to use the most general definition of SMR. But in de-
signing a protocol, we can use a set of safety and liveness conditions
convenient for us as long as they are sufficient for SMR. Towards this
end, we introduce the batching technique and the commit operation
that are widely used in the SMR literature [2, 11, 14, 31, 35, 45, 47].
Note that batching transactions into blocks is compatible with
the SMR definition in Section 2.1 where each position contains
a single transaction. Transactions within a block are totally or-
dered, so a log of blocks can be flattened into a log of transactions.
For example, suppose we have a log of blocks [𝐵0, 𝐵1, . . .] with
𝐵0 = [𝑡𝑥0,1, 𝑡𝑥0,2, . . . , 𝑡𝑥0,ℓ0] and 𝐵1 = [𝑡𝑥1,1, 𝑡𝑥1,2, . . . , 𝑡𝑥1,ℓ1]. This
can be interpreted as a log of transactions [𝑡𝑥0,1, 𝑡𝑥0,2, . . . , 𝑡𝑥0,ℓ0,
𝑡𝑥1,1, 𝑡𝑥1,2, . . . , 𝑡𝑥1,ℓ1, . . .]. The publicly verifiable proof for a block
serves as the publicly verifiable proof for each transaction in that
block.
When a replica commits a new block, it broadcasts a signature on
the block. With some foresight, we will adopt the recent paradigm
of chained SMR in which the last block of a log uniquely identifies
the entire log, and hence signing a block is equivalent to signing the
the entire log up to the block. Then, a set of signatures on a block
from 𝑛 − 𝛾𝑠 = 𝛽𝑠 + 1 replicas forms a publicly verifiable proof for
the log up to that block. Hereafter, when designing new protocols,
we aim at achieving the following safety and liveness properties.
(1) Safety. If two honest replicas commit two logs [𝐵0, 𝐵1, ..., 𝐵 𝑗]
𝑗′], then 𝐵𝑖 = 𝐵′
𝑖 for all 𝑖 ≤ min( 𝑗, 𝑗′).
(2) Liveness. Every transaction is eventually committed by all
0, 𝐵′
and [𝐵′
1, ..., 𝐵′
honest replicas.
The above safety and liveness allow us to focus on replicas and
deal with clients and public verifiability easily in a single extra step.
This is sufficient for the safety and liveness for SMR defined in
Section 2.1. Simply observe that at least one honest replica must
commit a log in order for the log to have a publicly verifiable proof;
If all honest replicas commit a log, all honest replicas will obtain a
publicly verifiable proof for it.
Intuitive overview of the protocol. At a high level, we combine a
partially synchronous SMR protocol (PBFT [14]) and a synchronous
SMR protocol (Sync HotStuff [2]). These two protocols share a
similar view-by-view construction. In the steady state of each view,
a leader 𝐿 proposes a value to the next log position and replicas vote
and commit the value. When no progress is being made (possibly
because of a faulty leader), replicas replace the leader and enter the
next view using a view change procedure.