title:Inferring browser activity and status through remote monitoring of
storage usage
author:Hyungsub Kim and
Sangho Lee and
Jong Kim
Inferring Browser Activity and Status Through
Remote Monitoring of Storage Usage
Hyungsub Kim∗,† Sangho Lee§ Jong Kim∗
∗ Department of Computer Science and Engineering, POSTECH, Republic of Korea
† Agency for Defense Development (ADD), Republic of Korea
§ School of Computer Science, Georgia Institute of Technology, USA
PI:EMAIL PI:EMAIL PI:EMAIL
ABSTRACT
Web applications use the local storage of a web browser to tem-
porarily store static resources for caching and persistently store
personalized data for stateful services. Since different web appli-
cations use the local storage differently in terms of size and time,
attackers can infer a user’s browser activity and status if they can
monitor storage usage: for example, which web site a user is view-
ing and whether a user has logged in to a certain web site. In this
paper, we explore passive and active web attacks that exploit the
Quota Management API to extract such information from a web
browser, as the API allows us to continuously monitor the size of
available storage space. We develop two web attacks: a cross-tab
activity inference attack to passively monitor which web site a user
is currently visiting and a browser status inference attack to actively
identify the browser status such as browser history and login infor-
mation. Our attacks are successful at stealing private information
from Chrome running on various platforms with ∼90% accuracy.
We further propose an effective solution against the attacks.
1.
INTRODUCTION
Modern web applications heavily use the local storage of a client
web browser to temporarily store static web resources (e.g., browser
cache) and persistently store data for stateful services (e.g., cookie).
Since many multimedia and text resources composing a web page
usually do not frequently change, a web browser does not need
to repeatedly download them for each visit to avoid unnecessary
network trafﬁc. Instead, the browser caches such resources into
its local storage and loads them from there until the corresponding
remote resources have changed. Also, a web browser needs to
keep cookie information to maintain login status and other stateful
information (e.g., items in a shopping cart).
Moreover, HTML5 provides ofﬂine storage APIs as many people
tend to use mobile devices to browse the Web, suffering from con-
nection failures or slow connection speed. For example, the APIs
allow a web application to specify resources to be cached in the
local storage of a web browser (Application Cache [18] and Service
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
c⃝ 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991080
410
Worker [36]), and request an amount of storage space (quota) and
monitor how much storage space it takes (the Quota Management
API [47]).
However, such heavy usage of the local storage of a web browser
could be exploited to breach user privacy if attackers can moni-
tor it, as different web pages consist of different resources such
that their storage usage patterns are distinguishable. Researchers
have discovered that network usage patterns to download web re-
sources [5–7, 16, 17, 22, 24, 29, 33, 39, 43, 44] and memory usage
patterns to load downloaded resources [20] can be used to infer
which web site a victim browser visits. Since downloaded resources
are temporarily stored into the local storage and then loaded into the
memory, attackers have possibility to conduct similar attacks if they
can monitor storage usage patterns.
Surprisingly, we identify the Quota Management API can be
used to perform such attacks because it allows a web application
to know how much storage space remains in a user’s local device
by querying the quota of temporary storage—a shared pool among
web applications—without any user conﬁrmation. When explaining
the quota attribute of the StorageInfo interface, the speciﬁcation
states that “For temporary storage this value may reﬂect the actual
storage space available on the user’s local device and may change
from time to time” [47]. Further, the Quota Management API is a
JavaScript method, so attackers do not need to have access to the
network [5–7, 16, 17, 22, 24, 29, 33, 39, 43, 44] or machine [20] to
which a client web browser belongs.
In this paper, we explore how web attackers can exploit the Quota
Management API as a side channel to infer sensitive information
from web browsers. When visiting a web site, a web browser takes
a portion of local disk space to cache the resources transferred from
the web site. The time-varying amount of storage space to store
such resources differs from each other, which is the unique feature
of each web site. Therefore, by monitoring temporal changes in
the quota of temporary storage (we call it storage footprint, see
§2.2) through an attack web site, attackers can remotely determine
the feature of a web site that a victim web browser visits. For
example, Figure 1 shows temporal changes in the size of storage
footprints when we visited the front pages of four popular web sites
(google.com, facebook.com, yahoo.com, and youtube.com) by using
Chromium 34 running on an Ubuntu 12.04 desktop. The temporal
changes in the size of the storage footprints differ from each other,
so we can distinguish web sites by comparing them.
We consider two attacks using storage footprints. The ﬁrst attack,
a cross-tab activity inference attack, allows an attack web site to
identify the other web site a victim web browser is currently visiting
via a different tab or window. While a victim web browser opens an
attack web page in a browser tab or window, the web page passively
i
)
B
K
(
e
z
i
s
t
n
i
r
p
t
o
o
f
e
g
a
r
o
t
S
youtube.com
yahoo.com
facebook.com
google.com
1400
1200
1000
800
600
400
200
0
0
2
4
6
Time (s)
8
10
Figure 1: Temporal changes in the size of storage footprints belonging
to the front pages of four popular web sites, obtained through the Quota
Management API. Different web sites use the local storage differently in
terms of size and time.
monitors temporal changes in the size of the victim web browser’s
storage footprints to identify which web site the victim web browser
visits through a new tab or window. The accuracy of the cross-tab
activity inference attack is up to 97.3% when a victim web browser
is Chrome running on Linux (§3).
The second attack, a browser status inference attack, allows an
attack web site to identify the history and login status of a victim web
browser associated with a target web site. When accessing a web site
visited in the past, a web browser occupies no or small additional
disk space because the browser cache has already stored the web
site’s resources. By visiting a target web site while monitoring
temporal size changes in the storage footprints, an attack web site
can identify whether the browser has visited the web site before.
The accuracy of our browser history stealing attack is up to 99%
when a victim web browser is Chrome running on Android (§4.3).
Moreover, by using a similar technique, an attacker can recognize
the login status of a victim web browser. Many web sites have
privileged web pages only accessible by permitted users who belong
to some groups, companies, universities, or societies. A web browser
either cannot fully fetch the entire resources of the privileged web
page or is redirected to login or error page if it has no permission to
access the web page. By attempting to visit such a web page while
monitoring storage usage, we can recognize whether a browser has
a permission to access the web page (§4.6).
We consider a countermeasure against the explored attacks: pro-
viding coarse-grained quota information. We suggest rounding
quota size down to the nearest multiple of several kilobyte or megabyte.
Our countermeasure considerably decreases overall inference accu-
racy while introducing negligible overhead.
This work makes the following contributions:
• Novel security problem. To the best of our knowledge, this
is the ﬁrst study that handles the security problems of the
Quota Management API, and considers a web side-channel
attack exploiting temporal changes in the size of available
storage space.
• Novel web attack. Our attack allows a remote web attacker to
passively monitor the current activity of a victim web browser
and to actively inspect the status of the browser.
• Effective countermeasure. We suggest an effective coun-
termeasure against our attack: a round-down method. The
countermeasure can substantially decrease attack accuracy
even in an ideal scenario while only demanding minor modiﬁ-
cation of the Quota Management API.
The remainder of this paper is organized as follows. §2 explains
background information of our work. §3 introduces our cross-tab
activity attack. §4 introduces our browser status inference attack.
queryUsageAndQuota(onSuccess, onError);
1 //Request storage usage and capacity left.
2 navigator.webkitTemporaryStorage.
3
4
5 function onSuccess(usedSpace, remainingSpace) {
6
7
8 }
Figure 2: JavaScript pseudocode to monitor temporal changes in storage
footprint size.
console.log("Used: " + usedSpace + ", remaining: " +
remainingSpace);
§5.1 discusses countermeasures against our attacks. §6 introduces
related studies of our work. Lastly, §7 concludes this work.
2. BACKGROUND
In this section, we explain the browser cache, the Quota Manage-
ment API, and an optimal subsequence bijection algorithm.
2.1 Web Browser Cache
Modern web browsers use the browser cache for reducing network
trafﬁc and load time of web pages. When a user ﬁrst visits a web
site, the user’s web browser fetches the resources of the web site,
stores them in the browser cache, and renders and displays them on
a screen. Later, when the user visits the web site again, instead of
fetching the resources again, the web browser loads cached resources
from the browser cache if the web site does not change them.
We brieﬂy explain resource types that Chrome caches in the
local storage. Chrome stores (1) HTTP responses from a web
site (e.g., HTML and JavaScript code, images, CSS, and media
ﬁles); (2) resources speciﬁed by a web application using AppCache
or IndexedDB; (3) SSL sessions to skip round trips of SSL hand-
shake [11]; and (4) GPU shaders to reduce GPU rendering time [40].
2.2 Quota Management API
The Quota Management API is proposed to manage and moni-
tor the available storage space in a web browser to support other
HTML5 storage APIs (e.g., AppCache [18], ServiceWorker [36],
and IndexedDB [31]). This API provides two types of storage space.
The ﬁrst one is persistent storage that enables a web site to store
persistent data in a user’s local storage. The second one is temporary
storage that enables a web site to store temporary data in the local
storage. In this paper, we focus on the temporary storage which
allows an attacker to infer a user’s secret information. Also, we
consider Chrome because, up to now, only Chrome implements the
Quota Management API. 1
The temporary storage space, also known as the shared pool [14],
is freely accessible by all web applications running on Chrome with-
out any user conﬁrmation. The temporary storage is approximately
50% of available storage space and each web application can use up
to 20% of the temporary storage. Consequently, a web application
can use up to 10% of remaining storage space.
Figure 2 describes JavaScript code that uses the Quota Manage-
ment API to check the available temporary storage space. At Line 2,
the script calls a queryUsageAndQuota() method to obtain the stor-
age information of a web browser. The method has two parameters:
success callback onSuccess() and error callback onError(). When
the method successfully obtains the temporary storage information,
it calls onSuccess(). Otherwise, it calls onError(). The success
callback function has two arguments: usedSpace to inform how
much storage space a web application occupies; remainingSpace
to inform remaining temporary storage space.
1Opera uses Chrome’s Blink engine, so it has the same problem.
411
Although the Quota Management API is useful, it has security
problems because it gives the ﬁne-grained storage space information
of a web browser to a web application. By monitoring the temporal
changes of the information, attackers can develop attack methods to
reveal sensitive user information. We will explain the details of the
attack methods in §3 and §4.
Note that the security problems considered in this paper are due to
not the security bugs of Chrome but the problems of the Quota Man-
agement API speciﬁcation. Therefore, other web browsers, such
as Firefox, Internet Explorer, and Safari, are supposed to vulnera-
ble to the security problems if their vendors implement the Quota
Management API to meet the current speciﬁcation.
2.3 Optimal Subsequence Bijection
We used an optimal subsequence bijection (OSB) algorithm [25,
32] to compare change logs of storage footprint size. The OSB
algorithm is a well-known algorithm not only to measure the sim-
ilarity between time-series, but also to effectively deal with noise
elements of them. Whenever a victim web browser visits a web
page, an attacker can obtain a change log of storage footprint size
that reﬂects the changes in available storage space size. However,
each instance of the obtained change logs slightly differs from each
other in terms of length and size due to background disk activ-
ity (§3.3.3) and network latency (§3.3.4). Unlike a dynamic time
warping (DTW) algorithm [38], another well-known algorithm to
compare time-series, the OSB algorithm can skip outliers of query
and target time-series, making the inference accuracy of our attacks
better. We compared the OSB algorithm with the DTW algorithm
in our evaluation settings (§3); the OSB algorithm always showed
better accuracy than the DTW algorithm. Consequently, we decided
to use the OSB algorithm for our attacks.
3. CROSS-TAB ACTIVITY INFERENCE
In this section, we explain assumptions we have made and a
passive attack to infer a user’s current browsing activity in a different
tab or window, called as a cross-tab activity inference attack.
3.1 Threat Model
We assume an attacker who prepares an attack web site to deceive
visitors and runs attack scripts in a background tab. The attack web
site could be a compromised web site, a phishing web site, or a semi-
honest web site that tracks its users browsing patterns. The attacker’s
goal is to know the very next web site the visitor will visit to know
detailed information of the visitor in real time, which can be used
to perform targeted attacks (e.g., spear phishing and personalized
advertisement). The attacker does not compromise the network or
machine a visitor is currently using, so the attacker cannot analyze
network trafﬁc [5–7, 16, 17, 22, 24, 29, 33, 39, 43, 44] and monitor
local resource usage [8, 20, 27] to achieve the goal. Further, a
visitor’s browser has no well-known vulnerability such that the
attacker cannot break the same origin policy.
3.2 Attack Procedure
We explain the procedure of our cross-tab activity inference attack
that exploits storage footprints with Figure 3.
1. A victim opens a browser tab to visit an attack site Attack.com
to view or download interesting contents.
2. Attack.com deceives the victim into keeping the tab open
and initiates a monitoring script (Figure 4). For example,
many web sites display countdown timers to expose advertise-
ments for a long time before delivering actual contents, such
as one-click hosting sites (e.g., rapidshare.com) and URL
shortening services (e.g., adf.ly).
(cid:57)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:54)(cid:76)(cid:87)(cid:72)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:50)(cid:83)(cid:72)(cid:81)(cid:3)(cid:55)(cid:68)(cid:69)(cid:20)(cid:3)
(cid:50)(cid:83)(cid:72)(cid:81)(cid:3)(cid:55)(cid:68)(cid:69)(cid:21)(cid:3)
(cid:20)(cid:17) (cid:57)(cid:76)(cid:86)(cid:76)(cid:87)(cid:3)(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:21)(cid:17) (cid:40)(cid:91)(cid:72)(cid:70)(cid:88)(cid:87)(cid:72)(cid:3)(cid:68)(cid:3)(cid:80)(cid:82)(cid:81)(cid:76)(cid:87)(cid:82)(cid:85)(cid:76)(cid:81)(cid:74)
(cid:86)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)
(cid:23)(cid:17) (cid:47)(cid:82)(cid:74)(cid:3)(cid:70)(cid:75)(cid:68)(cid:81)(cid:74)(cid:72)(cid:86)(cid:3)(cid:76)(cid:81)(cid:3)(cid:87)(cid:75)(cid:72)
(cid:86)(cid:76)(cid:93)(cid:72)(cid:3)(cid:82)(cid:73)(cid:3)(cid:86)(cid:87)(cid:82)(cid:85)(cid:68)(cid:74)(cid:72)(cid:3)(cid:73)(cid:82)(cid:82)(cid:87)(cid:83)(cid:85)(cid:76)(cid:81)(cid:87)(cid:86)
(cid:31)(cid:41)(cid:82)(cid:85)(cid:72)(cid:74)(cid:85)(cid:82)(cid:88)(cid:81)(cid:71)(cid:33)
(cid:31)(cid:37)(cid:68)(cid:70)(cid:78)(cid:74)(cid:85)(cid:82)(cid:88)(cid:81)(cid:71)(cid:33)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:17)(cid:70)(cid:82)(cid:80) (cid:54)(cid:76)(cid:87)(cid:72)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:75)(cid:87)(cid:87)(cid:83)(cid:29)(cid:18)(cid:18)(cid:54)(cid:76)(cid:87)(cid:72)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:22)(cid:17) (cid:57)(cid:76)(cid:86)(cid:76)(cid:87)(cid:3)(cid:54)(cid:76)(cid:87)(cid:72)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:24)(cid:17) (cid:41)(cid:72)(cid:87)(cid:70)(cid:75)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:85)(cid:72)(cid:86)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:86)
(cid:82)(cid:73)(cid:3)(cid:54)(cid:76)(cid:87)(cid:72)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:25)(cid:17) (cid:54)(cid:72)(cid:81)(cid:71)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:70)(cid:75)(cid:68)(cid:81)(cid:74)(cid:72)(cid:3)(cid:79)(cid:82)(cid:74)
(cid:55)(cid:76)(cid:80)(cid:72)
Figure 3: The procedure of a cross-tab activity inference attack using storage
footprints. We assume that a victim visits Site.com via the front tab while
maintaining a background tab for Attack.com.
if (document.hidden) {
queryUsageAndQuota(onSuccess, onError);
// This web page is hidden. Initiate monitoring.
navigator.webkitTemporaryStorage.
1 document.addEventListener(’visibilitychange’, function(event) {
2
3
4
5
}
6
7 });
8
9 function onSuccess(usedSpace, remainingSpace) {
10
11
12
13 }
Figure 4: Pseudocode to infer sensitive user information with the Quota
Management API.
// Post "remainingSpace" and current time to an attack server.
navigator.webkitTemporaryStorage.
queryUsageAndQuota(onSuccess, onError);
3. The victim opens a new browser tab or window to visit another
web site Site.com.
4. When the monitoring script recognizes that the tab of At-