3.  client将签名后的交易信息发送给order
    service集群进行交易排序和打包。Order
    service集群通过共识算法，对所有交易信息进行排序，然后打包成区块。Order
    service的共识算法是以组件化形态插入Hyperledger系统的，也就是说开发者可以自由选择合适的共识算法，共识算法有：Solo（单节点共识）、kafka（分布式队列）和SBFT（简单拜占庭容错）。
4.  ordering service将排序打包后的区块广播发送给committing
    peers，由其做最后的交易验证，并写入区块链。ordering
    service只是决定交易处理的顺序，并不对交易的合法性进行校验，也不负责维护账本信息。只有committing
    peers才有账本写入权限。
5.  总体交易流程图（待自己完善）
![](media/image2.png){width="6.968998250218723in"
height="2.1387620297462817in"}![](media/image3.jpeg)
![](media/image4.png){width="7.290697725284339in"
height="3.7245155293088366in"}
**交易流程总结**
区块链的账本由peer节点维护，并不是由ordering
service集群维护，所以，只有peer节点上可以找到完整的区块链信息，而order
service集群只负责对交易进行排序，只保留处理过程中的一部分区块链信息。Hyperledger
Fabric系统中的节点是一个逻辑的概念，并不一定是一个台物理设备，但是对于生产环境的设计者来说，peer节点不能和order节点部署在一台机器上，而enduring
peers和committing
peers可以部署在同一台机器上，这种设计主要是为了系统架构的解耦，提高扩展性，以及通过主机隔离提高安全性。
Endorsing
peer校验客户端的签名，然后执行智能合约代码模拟交易。交易处理完成后，对交易信息签名，返回给客户端。客户端收到签名后的交易信息后，发给order节点排序。Order节点将交易信息排序打包成区块后，广播发给committing
peers，写入区块链中。
## Hyperledger Fabric Network的共识算法：
在所有peers中，交易信息必须按照一致的顺序写入账本（区块链的基本原则）。例如，比特币通过POW机制（共识算法），由最先完成数学难题的节点决定本次区块中的信息顺序，并广播给全网所有节点，以此来达成账本的共识。而Hyperledger
Fabric采用了更加灵活、高效的共识算法，以适应企业场景下，对高TPS的要求。目前，Hyperledger
Fabric有三种交易排序算法可以选择。
-   SOLO：只有一个order服务节点负责接收交易信息并排序，这是最简单的一种排序算法，一般用在实验室测试环境中。Sole属于中心化的处理方式。
-   Kafka：是Apache的一个开源项目，主要提供分布式的消息处理／分发服务，每个kafka集群由多个服务节点组成。Hyperledger
    Fabric利用kafka对交易信息进行排序处理，提供高吞吐、低延时的处理能力，并且在集群内部支持节点故障容错。
-   SBFT：简单拜占庭算法，相比于kafka，提供更加可靠的排序算法，包括容忍节点故障以及一定数量的恶意节点。目前，Hyperledger
    Fabric社区正在开发该算法。
## 相关概念
**Channel的概念**
Channels能够让上层不同的用户业务共享同一个区块链系统资源，主要包括网络、计算、存储资源。从本质上来说，channels是通过不同的区块链账本来为上层业务服务，而且，这些区块链统一部署在peers节点上，统一通过ordering
service进行交易排序和打包区块。Channels之间通过权限隔离控制，不同channel内的成员，无法访问对方的交易信息，只能访问所属channel的交易信息。
channel可以理解为系统资源的逻辑单元，每个channel都包含peers资源、order资源、网络资源等等，而且这些资源有可能是和其它channel所共享。
**State Database**
状态数据库保存了账本所有资产的最新状态（例如，账户A拥有某种资产的总量），同时，为智能合约提供了丰富的资产查询语义。所有的资产信息最终以文件形式记录在区块链账本中，而数据库是区块链账本的视图表现形式，能够让智能合约更加高效的和账本信息进行交互。数据库自动从底层区块链账本中更新或者恢复数据，默认的状态数据库是LevelDB，也可以替换为CouchDB。
LevelDB：Hyperledger Fabric的默认数据库，简单的存储键值对信息；
CouchDB：提供更加丰富的查询语义，可以保存JSON对象，以及范围key的查询。
**Smart Contract**
智能合约就是一段部署在区块链账本中的计算机程序，用于执行交易以及修改资产的状态。在Hyperledger
Fabric中，智能合约被称作chaincode，使用Go语言编写。
**Membership Service Provider（MSP）**
Hyperledger Fabric是一种permissioned
blockchain，所有的节点都是必须经过授权后才能访问区块链网络（比特币属于permissionless
blockchain）。MSP是Hyperledger
Fabric中的身份认证模块，用于对用户身份的校验、授权以及网络访问权限控制。默认的MSP接口是Fabric-CA
API，同时，开发者可以根据自身的业务需要，实现自己的身份认证接口，对接MSP。Hyperledger
Fabric网络可以被多个MSP控制，用以满足各个组织的需要。
**Hyperledger Fabric的商业价值**
随着比特币、以太坊等一系列虚拟货币的疯涨，区块链一度被认为是可以颠覆互联网的下一代革命性技术。但是，我们需要清楚的意识到，虚拟货币的价格并不能代表区块链技术能够为人类创造的实际价值，而且，大多数区块链应用本身并不需要token(令牌)激励机制。所以，区块链未来的发展取决于能否广泛应用在商业领域，为人类的生活生产降低成本、提高效率。
Hyperledger
Fabric的意义在于，迈出了区块链向商业领域进军的第一步，未来会有更多的区块链项目在各个行业中创造价值。
**Fabric 0.6与1.0**
Fabric 0.6的特点：
-   结构简单：
    应用-成员管理-Peer的三角形关系，主要业务功能全部集中于Peer节点；
-   架构问题：由于peer节点承担了太多的功能，所以带来扩展性、可维护性、安全性、业务隔离等方面的诸多问题，所以0.6版本在推出后，并没有大规模被行业使用，只是在一些零星的案例中进行业务验证
Fabric 1.0的特点：
-   分拆Peer的功能，将Blockchain的数据维护和共识服务进行分离，共识服务从Peer节点中完全分离出来，独立为Orderer节点提供共识服务；
-   基于新的架构，实现多通道（channel）的结构，实现了更为灵活的业务适应性（业务隔离、安全性等方面）
-   支持更强的配置功能和策略管理功能，进一步增强系统的灵活性和适应性；
## fabric结构
Fabric组件只有两个：Peer和Orderer，它们就是两个二进制程序。每个参与方可以选择部署一个/多个Peer，或者一个/多个Orderer，或者两个都部署。所有参与方的Peer/Orderer，彼此通信、连接，就组成了Fabric网络。
-   Peer：每个Peer中都存放全量的数据（账本），也就是完整的链（必须是Peer参与的链，见后面"控制信息的传播范围"）。
-   Orderer：通过Orderer之间的协商，确保每个Peer都能收到正确的数据。
-   system chain：Fabric中有一组特殊的链，叫做"system
    chain"。这组链相当于整个Fabric网络的配置文件，里面记录了所有的Channel信息、参与者的信息。（每个Channel对应一条system
    chain）
-   创世块（Gengsis Block）：是system
    chain的第一个区块。这个区块通常是用configtxgen命令生成的。
-   Anchor Peer(锚点):[每个参与者可以将自己的一个Peer地址写入到system
    chain中，这样的Peer被称为"锚点"]{.underline}（Anchor
    Peer）。Orderer们从system chain中获得Anchor
    Peer的地址，并将形成的共识通知给它们。Anchor
    Peer通过Gossip协议，将结论发送给其它的Peer。通道中能被所有对等节点探测，并能与之通信的一种对等节点。通道中都有一个或多个锚节点，允许属于不同成员身份的节点来发现通道中存在的其他节点。
-   Leader
    Peer：leader英文意思为领导。Orderer是将共识发送给每个组织的Leader
    Peer，Leader
    Peer是一个组织的多个Peer之间选举出来的，或者组织的主动指定的。Anchor
    Peer（锚点）主要作用是用于Peer之间的发现。
-   System
    Chain与Orderer的存在，使"控制信息的传播范围"成为可能。既然Orderer是输出数据的源头，那么就可以通过Orderer控制信息的传播范围了。
-   联盟链：企业与企业之间的链，不全公开，接入需要验证接入。
-   私链：也就是Channel，Orderer的data目录，就会发现每个Channel都会有一个独立的链。
-   
Peer的data目录中，只会有Peer所加入的Channel的链：
Orderer中的链与Peer中的链是不同的，Oderer的链中存放的是Channel的配置，是system
chain，Peer的链中存放的是Channel的数据。比对一下它们的内容就可以知道。
Peer与Orderer交织，数据更新请求在Orderer之间来回穿梭，最终被送往了Anchor
Peer，大嘴巴的Anchor Peer转身通知了身边的所有Peer。
**合约**
-   参与者们在现实世界里达成共识。这个共识，更像谈判后签署的合同，在区块链中，被称为合约。