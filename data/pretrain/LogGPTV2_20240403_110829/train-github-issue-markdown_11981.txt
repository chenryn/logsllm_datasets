Duplicate some `addEventListener` signature in XMLHttpRequest interface.
`onxxx` props are not, but `addEventListener` methods are duplicate. At least,
this is inconsistent coding.
actual:
    // lib.d.ts
    interface XMLHttpRequestEventTarget {
        onabort: (ev: Event) => any;
        onerror: (ev: Event) => any;
        onload: (ev: Event) => any;
        onloadend: (ev: ProgressEvent) => any;
        onloadstart: (ev: Event) => any;
        onprogress: (ev: ProgressEvent) => any;
        ontimeout: (ev: ProgressEvent) => any;
        addEventListener(type: "abort", listener: (ev: Event) => any, useCapture?: boolean): void;
        addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;
        addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;
        addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void;
        addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: "timeout", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;
    }
    interface XMLHttpRequest extends EventTarget, XMLHttpRequestEventTarget {
        ...
        onreadystatechange: (ev: ProgressEvent) => any;
        ...
        addEventListener(type: "abort", listener: (ev: Event) => any, useCapture?: boolean): void;
        addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;
        addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;
        addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void;
        addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: "readystatechange", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: "timeout", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;
    }
expected:
    // lib.d.ts
    interface XMLHttpRequestEventTarget {
        ...
    }
    interface XMLHttpRequest extends EventTarget, XMLHttpRequestEventTarget {
        ...
        onreadystatechange: (ev: ProgressEvent) => any;
        ...
        addEventListener(type: "readystatechange", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;
    }