定义一个开发团队可以填写的通用清单，可以为审计者提供所需的上下文。是一个
很好的晴雨表，反映了开发人员尝试或想到的安全级别。如果代码安全审计成为一个常
见的需求，那么这个清单可以被合并到一个开发过程中(例如，文档模板)，以便代码审阅
者始终可以使用这些信息。参见附录 A 中的示例代码审计清单。 
核对表应涵盖最关键的安全控制和漏洞领域，例如: 
数据验证 
认证 
会话管理 
授权 
密码学 
错误处理 
日志记录 
安全配置 
网络架构 
强调了一些可以向体系结构和设计提出的问题，以帮助进行安全的代码审计。 
每个安全需求都应该与最适合该设计的安全控制相关联。在这里，我们将确定为满足任
何要求或减轻威胁而需要在设计中包含的确切更改或添加。然后，可以与开发团队讨论安全
要求和建议控制的列表。应解决团队的疑问，并且必须确定纳入控制的可行性。必须考虑例
47 
外情况(如果有)，并提出替代建议。在此阶段，就安全控制达成最终协议。由开发团队合并
的最终设计可以再次审计，并最终确定用于进一步的开发过程。 
2.2.8 静态代码分析 
静态代码分析在软件开发生命周期的实施阶段进行。静态代码分析通常是指运行静态代
码分析工具试图查找“静态”(非运行)源代码中可能存在的漏洞。 
理想情况下，静态代码分析工具会在几乎没有误报的情况下自动发现安全缺陷。这意味
着它应该高度相信它发现的缺陷是真正的缺陷。然而，对于许多类型的应用程序安全缺陷来
说，这种理想已经超出了现有技术水平。因此，这类工具经常作为分析师的辅助工具，帮助
他们专注于代码的安全相关部分，以便他们能够更有效地发现缺陷，而不是自动发现所有缺
陷的工具。 
由于不安全的代码、设计或配置，应用程序中可能存在 bug。可以对应用程序代码进
行自动分析，通过以下两个选项之一来识别错误: 
1.基于模式搜索的静态代码扫描脚本(内部和开源)。 
2.静态代码分析器(商业和开源)。 
源代码扫描器的优缺点见表 5 和表 6。 
48 
尽管代码扫描脚本和开源工具可以有效地发现不安全的代码模式，但它们通常缺乏跟踪
数据流的能力。静态代码分析器填补了这一空白，它通过部分(或全部)编译代码和调查执行
分支来识别不安全的代码模式，允许从源到宿的分析。静态代码分析器和扫描器是补充代码
审计过程的综合选项。 
选择静态分析工具 
选择静态分析工具是一项困难的任务，因为有很多选择。下面的对比图表可以帮助组织
决定哪种工具适合他们，尽管这个列表并不详尽。 
选择工具的一些标准包括: 
⚫ 
工具是否支持所使用的编程语言？ 
49 
⚫ 
商业工具和免费工具之间有偏好吗？通常，商业工具比免费工具有更多的特性，也更可
靠，尽管它们的可用性可能有所不同。 
⚫ 
正在进行何种类型的分析？是安全、质量、静态还是动态分析？ 
下一步需要做一些主观的工作。最好的办法是测试一些工具，看看团队是否对不同方面
感到满意，比如用户体验、漏洞报告、误报水平以及定制和客户支持。选择不应基于功能的
数量，而应基于所需的功能以及它们如何集成到 S-SDLC 中。此外，在选择工具之前，应明
确评估目标用户的专业知识，以便选择合适的工具。 
2.2.9 应用威胁建模 
威胁建模是一种深入分析应用程序安全性的方法。这是一种结构化的方法，使员工能够
识别、量化和解决与应用程序相关的安全风险。威胁建模不是一种审计代码的方法，但它通
过提供应用程序的上下文和风险分析来补充安全的代码审计过程。 
在 S-SDLC 中包含威胁建模有助于确保应用程序从一开始就以内置的安全性进行开发。
这与作为威胁建模过程的一部分而产生的文档相结合，可以使审计者更好地理解系统，允许
审计者看到应用程序的入口点在哪里(即，攻击面)和每个入口点的相关威胁(即，攻击向量)。 
威胁建模的概念并不新鲜，但近年来，人们的思维方式发生了明显的变化。现代威胁建
模从潜在攻击者的角度看待系统，而不是从防御者的角度。过去几年来，许多公司都大力提
倡这一流程，包括微软，他们将威胁建模作为 S-SDLC 的核心组件，他们声称这是近年来产
品安全性提高的原因之一。 
当源代码分析在软件开发生命周期之外执行时，例如在现有的应用程序上，威胁建模的
结果有助于通过促进基于风险的方法来降低源代码分析的复杂性。审计者可以优先审计威胁
50 
建模被列为高风险威胁的组件的安全代码，而不是同等关注地审计所有源代码。 
威胁建模过程可以分解为 3 个高级步骤: 
步骤 1:分解应用程序。 
威胁建模过程的第一步是了解应用程序及其与外部实体的交互方式。这包括创建用例来
理解应用程序是如何使用的，识别入口点来查看潜在的攻击者可以在哪里与应用程序交互，
识别资产，即，攻击者可能感兴趣的项目/领域，并确定代表应用程序将授予外部实体的访
问权限的信任级别。这些信息记录在威胁模型文档中，也用于为应用程序生成数据流图。
DFD 显示了通过系统的不同数据路径，突出了特权(信任)边界。 
分解应用程序时要考虑的项目包括外部依赖关系，外部依赖是应用程序代码外部的项目，
可能对应用程序构成威胁。这些项目通常仍在组织的控制范围内，但可能不在开发团队的控
制范围内。在研究外部依赖关系时，首先要考虑的是如何在生产环境中部署应用程序。 
这包括查看应用程序是如何运行的。例如，如果应用程序预期运行在已经按照组织的强
化标准进行了强化的服务器上，并且预期位于防火墙之后，则应该记录这些信息。 
入口点 
入口点(又称攻击向量)定义了潜在攻击者可以通过其与应用程序交互或向其提供数据
的接口。潜在的攻击者如果要攻击应用程序，入口点必须存在。应用程序中的入口点可以分
层，例如，网络应用程序中的每个网页可能包含多个入口点。 
资产 
51 
系统一定有攻击者感兴趣的东西，这些感兴趣的项目/领域被定义为资产。资产本质上
是威胁目标，即，它们是威胁存在的原因。资产既可以是实物资产，也可以是抽象资产。例
如，应用程序的实物资产可能是客户及其个人信息的列表。抽象资产可能是一个组织的声誉。 
确定攻击面 
通过分析输入、数据流和事务来确定攻击面。实际执行代码安全审计的主要部分是对攻
击面进行分析。应用程序接受输入并产生某种输出。第一步是识别代码的所有输入。 
应用程序的输入可能包括以下要点: 
⚫ 
浏览器输入 
⚫ 
Cookie 
⚫ 
财产档案 
⚫ 
外部流程 
⚫ 
数据馈送 
⚫ 
服务响应 
⚫ 
平面文件 
⚫ 
命令行参数 
⚫ 
环境变量 
图 4 描述了识别应用程序输入路径的示例过程：  
52 
信任级别 
信任级别表示应用程序将授予外部实体的访问权限。信任级别与进入点和资产相互参照。
这允许团队定义每个入口点所需的访问权限或特权，以及与每个资产交互所需的权限或特权。 
数据流分析 
探索攻击面包括动态和静态数据流分析。变量在何时何地设置，变量在整个工作流程中
如何使用，对象和参数的属性如何影响程序中的其他数据。它确定参数、方法调用和数据交
换机制是否实现了所需的安全性。 
53 
交易分析 
需要事务分析来识别和分析应用程序中的所有事务，以及调用的相关安全功能。 
交易分析涵盖的领域包括: 
⚫ 
来自所有不可信来源的数据的数据/输入验证 
⚫ 
认证 
⚫ 
会话管理 
⚫ 
授权 
⚫ 
密码学(静态和传输中的数据) 
⚫ 
错误处理/信息泄露 
⚫ 
日志/审计 
数据流图 
收集的所有信息允许通过使用数据流图对应用程序进行精确建模。DFDs 将通过提供应
用程序如何处理数据的可视化表示，让员工更好地理解应用程序。DFDs 的重点是数据如何
在应用程序中移动，以及数据移动时会发生什么。DFD 在结构上是分层的，因此它们可以
用来将应用程序分解成子系统。高水平的 DFD 将允许员工阐明正在建模的应用范围。当处
理特定数据时，较低层次的迭代将允许更多的关注于所涉及的特定过程。 
如下表 7 所示，在威胁建模的设计文件中使用了许多符号: 
54 
DFD 显示数据如何在系统中逻辑移动，并允许识别数据进入或离开系统，以及数据存
储和通过这些组件的控制流。信任边界显示信任级别变化的任何位置。流程组件显示数据在
哪里被处理，如 web 服务器、应用程序服务器和数据库服务器。入口点显示数据进入系统
的位置(即，输入字段、方法)和退出点是它离开系统的地方(即，动态输出、方法)。入口点
和出口点定义了信任边界。 
55 
步骤 2:确定威胁并对其进行排名 
识别威胁的关键是使用威胁分类方法。可以使用威胁分类(如 STRIDE)或应用安全框架
(ASF)，它定义了威胁类别，如授权和日志记录、身份验证、授权、配置管理、存储和传输
中的数据保护、数据验证和异常管理。 
威胁分类的目标是帮助从攻击者(STRIDE)和防御角度(ASF)识别威胁。步骤 1 中生成的
DFD 有助于从攻击者的角度识别潜在的威胁目标，例如数据源、流程、数据流和与用户的
交互。这些威胁可以进一步确定为威胁树的根源，每个威胁目标都有一棵树。 
从防御的角度来看，ASF 分类有助于将威胁识别为针对此类威胁的安全控制的弱点。
常见威胁列表和示例有助于识别此类威胁。使用和滥用案例可以说明如何绕过现有的保护措
施，或者哪里缺乏这种保护。 
每个威胁的安全风险的确定可以使用基于价值的风险模型来确定，例如基于一般风险因
素(例如，可能性和影响)。 
确定威胁的第一步是采用威胁分类。威胁分类支持提供一组带有相应示例的威胁类别，
以便在应用程序中以结构化和可重复的方式系统地识别威胁。 
STRIDE 
基于 STRIDE 模型的威胁列表有助于识别与攻击者目标相关的威胁。例如，如果威胁场
景是攻击登录，攻击者会强行破解密码来破坏身份验证吗？如果威胁场景是试图提升权限以
获得另一个用户的权限，攻击者会尝试执行强制浏览吗？ 
威胁分类(如 STRIDE)通过对攻击者目标进行分类(如表 8 所示)，有助于识别威胁。 
56 
从攻击者的角度评估所有可能的攻击媒介是至关重要的。例如，登录页面允许发送身份
验证凭据，入口点接受的输入数据必须验证潜在的恶意输入，例如 SQL 注入、跨站点脚本
和缓冲区溢出等漏洞。此外，通过该点的数据流必须用于确定对该流中下一个组件入口点的
威胁。如果下列组件被认为是关键的(例如，持有敏感数据)，入口点也可以被认为是更关键。
在端到端数据流中，输入数据(即，用户名和密码)，未经验证就传递，可能会被 SQL 注入
攻击利用来操纵查询以破坏身份验证或修改数据库中的表。 
出口点可以作为客户端的攻击点(例如。XSS 漏洞)以及信息披露漏洞的实现。对于处理
机密数据的组件的出口点(例如，数据访问组件)，任何缺乏安全控制以保护机密性和完整性
的出口点都可能导致向未经授权的用户披露此类机密信息。 
在许多情况下，出口点启用的威胁与相应入口点的威胁相关。在登录示例中，通过出口
点返回给用户的错误消息可能会导致入口点攻击，如帐户枚举(例如，找不到用户名)或 SQL
注入(例如，SQL 异常错误)。从防御的角度来看，由安全控制分类(如 ASF)驱动的威胁识别
允许威胁分析师关注与弱点相关的特定问题(例如，漏洞)。典型地，威胁识别过程包括经历
57 
迭代循环，其中最初评估威胁列表中适用于每个组件的所有可能的威胁。在下一次迭代中，
通过探索攻击路径，要利用的威胁的根本原因（例如，漏洞）以及必要的缓解控制措施（例
如，未采取措施）来进一步分析威胁。 
一旦评估了常见的威胁、漏洞和攻击，就应该考虑使用和滥用情况，进行更集中的威胁
分析。通过彻底分析使用场景，可以识别可能导致威胁实现的弱点。滥用案例应被确定为安
全需求工程活动的一部分。这些滥用案件可以说明如何绕过现有的保护措施，或者哪里缺乏
这种保护。最后，通过确定对分解系统的每个组成部分的威胁类型，可以将所有这些结合起
来。这可以通过重复已经在较低级别威胁模型上讨论过的技术来完成，再次使用威胁分类(如
STRIDE 或 ASF)，使用威胁树来确定威胁如何通过漏洞暴露，以及使用和误用案例来进一
步验证缺乏减轻威胁的对策。 
微软 DREAD 威胁-风险排名模型 
在微软 DREAD 威胁风险排名模型中，影响的技术风险因素是损害和受影响用户，而易
利用因素是可再现性、可利用性和可发现性。这种风险因子为威胁的不同影响因素赋值。 
为了确定威胁的等级，威胁分析师必须回答每个风险因素的基本问题，例如: 
58 
影响主要取决于潜在的损害和影响的程度，例如受威胁影响的组件数量。 
这些问题通过将定性值(如高、中和低)分配可能性和影响因素，有助于计算总体风险值。
在这种情况下，使用定性的值，而不是像 BARRE 模型那样的数字值，有助于避免排名变得
过于主观。 
可能性 
更一般的风险模型考虑了可能性(例如。攻击的概率)和影响(例如。潜在损坏): 
风险=可能性 x 影响 
请注意，这是一个概念公式，不应将实际值用于可能性和影响。 可能性或概率由利用的