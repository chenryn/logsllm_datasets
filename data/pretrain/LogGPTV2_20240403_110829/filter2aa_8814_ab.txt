from B import D
class C:
    pass
```
还有个模块 `B` ：
```python
# B.py
from A import C
class D:
    pass
```
我们简单分析一下程序，如果程序运行，应该会去从模块B中调用对象D。
我们尝试执行一下 `python A.py` ：
报 `ImportError` 的错误，似乎是没有加载到对象 `D` ，而我们将 `from B import D` 改成 `import B` ，我们似乎就能执行成功了。
这是怎么回事呢？这其实是跟 `Python` 内部 `import` 的机制是有关的，具体到 `from B import D` ， `Python` 内部会分成以下几个步骤：
- 在 `sys.modules` 中查找符号 `B`
- 如果符号 `B` 存在，则获得符号 `B` 对应的 `module` 对象 `` 。从 `` 的 `__dict__` 中获得符号 `D` 对应的对象，如果 `D` 不存在，则抛出异常
- 如果符号 `B` 不存在，则创建一个新的 `module` 对象 `` ，注意，此时 `module` 对象的 `__dict__` 为空。执行 `B.py` 中的表达式，填充 `` 的 `__dict__`  。从 `` 的 `__dict__` 中获得 `D` 对应的对象。如果 `D` 不存在，则抛出异常。
所以，这个例子的执行顺序如下：
1、执行 `A.py` 中的 `from B import D` 
> 注：由于是执行的 `python A.py` ，所以在 `sys.modules` 中并没有 `` 存在，首先为 `B.py` 创建一个 `module` 对象( `` )，注意，这时创建的这个 `module` 对象是空的，里边啥也没有，在 `Python` 内部创建了这个 `module` 对象之后，就会解析执行 `B.py` ，其目的是填充 `` 这个 `dict` 。
2、执行 `B.py` 中的 `from A import C` 
> 注：在执行 `B.py` 的过程中，会碰到这一句，首先检查 `sys.modules` 这个 `module` 缓存中是否已经存在 `` 了，由于这时缓存还没有缓存 `` ，所以类似的， `Python` 内部会为 `A.py` 创建一个 `module` 对象( `` )，然后，同样地，执行 `A.py` 中的语句。
3、再次执行 `A.py` 中的 `from B import D` 
> 注：这时，由于在第 `1` 步时，创建的 `` 对象已经缓存在了 `sys.modules` 中，所以直接就得到了 `` ，但是，注意，从整个过程来看，我们知道，这时 `` 还是一个空的对象，里面啥也没有，所以从这个 `module` 中获得符号 `D` 的操作就会抛出异常。如果这里只是 `import B` ，由于 `B` 这个符号在 `sys.modules` 中已经存在，所以是不会抛出异常的。
我们可以从下图很清楚的看到 `import` 嵌套导入的过程：
**`Package` 导入**
包 `(Package)` 可以看成模块的集合，只要一个文件夹下面有个 `__init__.py` 文件，那么这个文件夹就可以看做是一个包。包下面的文件夹还可以成为包(子包)。更进一步的讲，多个较小的包可以聚合成一个较大的包。通过包这种结构，我们可以很方便的进行类的管理和维护，也方便了用户的使用。比如 `SQLAlchemy` 等都是以包的形式发布给用户的。
包和模块其实是很类似的东西，如果查看包的类型： `import SQLAlchemy type(SQLAlchemy)` ，可以看到其实也是 `` 。 `import` 包的时候查找的路径也是 `sys.path`。
包导入的过程和模块的基本一致，只是导入包的时候会执行此包目录下的 **`__init__.py`** ，而不是模块里面的语句了。另外，如果只是单纯的导入包，而包的 `__init__.py` 中又没有明确的其他初始化操作，那么此包下面的模块是不会自动导入的。
假设我们有如下文件结构：
```markdown
.
└── PA
    ├── __init__.py
    ├── PB1
    │   ├── __init__.py
    │   └── pb1_m.py
    ├── PB2
    │   ├── __init__.py
    │   └── pb2_m.py
    └── wave.py
```
`wave.py` ， `pb1_m.py` ， `pb2_m.py` 文件中我们均定义了如下函数：
```python
def getName():
	pass
```
`__init__.py` 文件内容均为空。
我们新建一个 `test.py` ，内容如下：
```python
import sys
import PA.wave #1
import PA.PB1 #2
import PA.PB1.pb1_m as m1 #3
import PA.PB2.pb2_m #4
PA.wave.getName() #5
m1.getName() #6
PA.PB2.pb2_m.getName() #7
```
我们运行以后，可以看出是成功执行成功了，我们再看看目录结构：
```markdown
.
├── PA
│   ├── __init__.py
│   ├── __init__.pyc
│   ├── PB1
│   │   ├── __init__.py
│   │   ├── __init__.pyc
│   │   ├── pb1_m.py
│   │   └── pb1_m.pyc
│   ├── PB2
│   │   ├── __init__.py
│   │   ├── __init__.pyc
│   │   ├── pb2_m.py
│   │   └── pb2_m.pyc
│   ├── wave.py
│   └── wave.pyc
└── test.py
```
我们来分析一下这个过程：
- 当执行`#1` 后， `sys.modules` 会同时存在 `PA` 、 `PA.wave` 两个模块，此时可以调用 `PA.wave` 的任何类或函数了。但不能调用 `PA.PB1(2)` 下的任何模块。当前 `Local` 中有了 `PA` 名字。
- 当执行 `#2` 后，只是将 `PA.PB1` 载入内存， `sys.modules` 中会有 `PA` 、 `PA.wave` 、 `PA.PB1` 三个模块，但是 `PA.PB1` 下的任何模块都没有自动载入内存，此时如果直接执行 `PA.PB1.pb1_m.getName()` 则会出错，因为 `PA.PB1` 中并没有 `pb1_m` 。当前 `Local` 中还是只有 `PA` 名字，并没有 `PA.PB1` 名字。
- 当执行 `#3` 后，会将 `PA.PB1` 下的 `pb1_m` 载入内存， `sys.modules` 中会有 `PA` 、 `PA.wave` 、 `PA.PB1` 、 `PA.PB1.pb1_m` 四个模块，此时可以执行 `PA.PB1.pb1_m.getName()` 了。由于使用了 `as` ，当前 `Local` 中除了 `PA` 名字，另外添加了 `m1` 作为 `PA.PB1.pb1_m` 的别名。
- 当执行 `#4` 后，会将 `PA.PB2` 、 `PA.PB2.pb2_m` 载入内存， `sys.modules` 中会有 `PA` 、 `PA.wave` 、 `PA.PB1` 、 `PA.PB1.pb1_m` 、 `PA.PB2` 、 `PA.PB2.pb2_m` 六个模块。当前 `Local` 中还是只有 `PA` 、 `m1` 。
- 下面的 `#5` ，`#6` ， `#7` 都是可以正确运行的。
> 注：需要注意的问题是如果 `PA.PB2.pb2_m` 想导入 `PA.PB1.pb1_m` 、 `PA.wave` 是可以直接成功的。最好是采用明确的导入路径，对于 `../..` 相对导入路径还是不推荐使用。
既然我们已经知道 `pyc` 文件的产生，再回到那道赛题，我们尝试将 `pyc` 文件反编译回 `python` 源码。我们使用在线的开源工具进行尝试：
部分代码没有反编译成功？？？我们可以尝试分析一下，大概意思就是读取 `cipher.txt` 那个文件，将那个文件内容是通过 `base64` 编码的，我们的目的是将文件内容解码，然后又已知 `key` ，通过 `encryt` 函数进行加密的，我们可以尝试将代码补全：
```python
def encryt(key, plain):
    cipher = ''
    for i in range(len(plain)):
        cipher += chr(ord(key[i % len(key)]) ^ ord(plain[i]))
    return cipher
def getPlainText():
    plain = ''
    with open('cipher.txt') as (f):
        while True:
            line = f.readline()
            if line:
                plain += line
            else:
                break
    return plain.decode('base_64')
def main():
    key = 'LordCasser'
    plain = getPlainText()
    cipher = encryt(key, plain)
    with open('xxx.txt', 'w') as (f):
        f.write(cipher)
if __name__ == '__main__':
    main()
```
结果如下：
```markdown
YOU ARE FOOLED
THIS IS NOT THAT YOU WANT
GO ON DUDE
CATCH THAT STEGOSAURUS
```
提示告诉我们用 `STEGOSAURUS` 工具进行隐写的，我们直接将隐藏的payload分离出来即可。
```shell
python3 stegosaurus.py -x QAQ.pyc
```
我们得到了最终的 `flag` 为：**`flag{fin4lly_z3r0_d34d}`**
既然都说到这个份子上了，我们就来分析一下我们是如何通过 `Stegosaurus` 来嵌入 `Payload` 。
我们仍然以上面这个代码为例子，我们设置脚本名称为 `encode.py` 。
第一步，我们使用 `Stegosaurus` 来查看在不改变源文件 `(Carrier)` 大小的情况下，我们的 `Payload` 能携带多少字节的数据：
```
python3 -m stegosaurus encode.py -r
```
现在，我们可以安全地嵌入最多24个字节的 `Payload` 了。如果不想覆盖源文件的话，我们可以使用 `-s` 参数来单独生成一个嵌入了 `Payload` 的 `py` 文件：
```shell
python3 -m stegosaurus encode.py -s --payload "flag{fin4lly_z3r0_d34d}"
```
现在我们可以用 `ls` 命令查看磁盘目录，嵌入了 `Payload` 的文件( `carrier` 文件)和原始的字节码文件两者大小是完全相同的：
> 注：如果没有使用 `-s` 参数，那么原始的字节码文件将会被覆盖。
我们可以通过向 `Stegosaurus` 传递 `-x` 参数来提取出 `Payload` ：
```shell
python3 -m stegosaurus __pycache__/encode.cpython-36-stegosaurus.pyc -x
```
我们构造的 `Payload` 不一定要是一个 `ASCII` 字符串， `shellcode` 也是可以的：
我们重新编写一个 `example.py` 模块，代码如下：
```python
import sys
import os
import math
def add(a,b):
    return int(a)+int(b)
def sum1(result):
    return int(result)*3
def sum2(result):
    return int(result)/3
def sum3(result):