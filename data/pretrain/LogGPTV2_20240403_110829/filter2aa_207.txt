# Web Server Data Structures and Types

## 0x00: Basic Data Types and Sizes

### 32-bit Architecture
- `char`: 1 byte
- `char*`: 4 bytes (pointer size)
- `short int`: 2 bytes
- `int`: 4 bytes
- `unsigned int`: 4 bytes
- `float`: 4 bytes
- `double`: 8 bytes
- `long`: 4 bytes
- `long long`: 8 bytes
- `unsigned long`: 4 bytes

### 64-bit Architecture
- `char`: 1 byte
- `char*`: 8 bytes (pointer size)
- `short int`: 2 bytes
- `int`: 4 bytes
- `unsigned int`: 4 bytes
- `float`: 4 bytes
- `double`: 8 bytes
- `long`: 8 bytes
- `long long`: 8 bytes
- `unsigned long`: 8 bytes

## Apache Data Types

- `apr_off_t`: 8 bytes (in both 32-bit and 64-bit architectures)

## 0x01: `request_rec` Structure in Apache

The `request_rec` structure is a fundamental data structure in the Apache HTTP server, used to store information about an HTTP request. Below is a detailed breakdown of its members:

| Offset | Type | Member | Description |
|--------|------|--------|-------------|
| 0      | `apr_pool_t*` | `pool` | The pool associated with the request. |
| 8      | `conn_rec*` | `connection` | The connection to the client. |
| 16     | `server_rec*` | `server` | The virtual host for this request. |
| 24     | `request_rec*` | `next` | Pointer to the redirected request if this is an external redirect. |
| 32     | `request_rec*` | `prev` | Pointer to the previous request if this is an internal redirect. |
| 40     | `request_rec*` | `main` | Pointer to the main request if this is a sub-request. |
| 48     | `char*` | `the_request` | First line of the request. |
| 56     | `int` | `assbackwards` | HTTP/0.9, "simple" request (e.g., GET /foo\n w/no headers). |
| 60     | `int` | `proxyreq` | A proxy request (possible values: PROXYREQ_NONE, PROXYREQ_PROXY, PROXYREQ_REVERSE, PROXYREQ_RESPONSE). |
| 64     | `int` | `header_only` | HEAD request, as opposed to GET. |
| 68     | `int` | `proto_num` | Protocol version number of protocol; 1.1 = 1001. |
| 72     | `const char*` | `protocol` | Protocol string, as given to us, or HTTP/0.9. |
| 80     | `const char*` | `hostname` | Host, as set by full URI or Host: header. For literal IPv6 addresses, this does NOT include the surrounding [ ]. |
| 88     | `apr_time_t` | `request_time` | Time when the request started. |
| 96     | `const char*` | `status_line` | Status line, if set by script. |
| 104    | `int` | `status` | Status code. |
| 108    | `int` | `method_number` | M_GET, M_POST, etc. |
| 112    | `const char*` | `method` | Request method (e.g., GET, HEAD, POST, etc.). |
| 120    | `ap_method_mask_t` | `allowed` | 'allowed' is a bitvector of the allowed methods. |
| 128    | `apr_array_header_t*` | `allowed_xmethods` | Array of extension methods. |
| 136    | `ap_method_list_t*` | `allowed_methods` | List of allowed methods. |
| 144    | `apr_off_t` | `sent_bodyct` | Byte count in stream is for body. |
| 152    | `apr_off_t` | `bytes_sent` | Body byte count, for easy access. |
| 160    | `apr_time_t` | `mtime` | Last modified time of the requested resource. |
| 168    | `const char*` | `range` | The Range: header. |
| 176    | `apr_off_t` | `clength` | The "real" content length. |
| 184    | `int` | `chunked` | Sending chunked transfer-coding. |
| 188    | `int` | `read_body` | Method for reading the request body (e.g., REQUEST_CHUNKED_ERROR, REQUEST_NO_BODY, REQUEST_CHUNKED_DECHUNK, etc.). |
| 192    | `int` | `read_chunked` | Reading chunked transfer-coding. |
| 196    | `unsigned` | `expecting_100` | Is client waiting for a 100 response? |
| 208    | `apr_bucket_brigade*` | `kept_body` | The optional kept body of the request. |
| 216    | `apr_table_t*` | `body_table` | For ap_body_to_table(): parsed body. Note: ap_body_to_table has been removed. Consider removing body_table or keeping it for future use. |
| 224    | `apr_off_t` | `remaining` | Remaining bytes left to read from the request body. |
| 232    | `apr_off_t` | `read_length` | Number of bytes that have been read from the request body. |
| 240    | `apr_table_t*` | `headers_in` | MIME header environment from the request. |
| 248    | `apr_table_t*` | `headers_out` | MIME header environment for the response. |
| 256    | `apr_table_t*` | `err_headers_out` | MIME header environment for the response, printed even on errors and persist across internal redirects. |
| 264    | `apr_table_t*` | `subprocess_env` | Array of environment variables to be used for sub processes. |
| 272    | `apr_table_t*` | `notes` | Notes from one module to another. |
| 280    | `const char*` | `content_type` | The content-type for the current request. |
| 288    | `const char*` | `handler` | The handler string that we use to call a handler function. This is what we really dispatch on. |
| 296    | `const char*` | `content_encoding` | How to encode the data. |
| 304    | `apr_array_header_t*` | `content_languages` | Array of strings representing the content languages. |
| 312    | `char*` | `vlist_validator` | Variant list validator (if negotiated). |
| 320    | `char*` | `user` | If an authentication check was made, this gets set to the user name. |
| 328    | `char*` | `ap_auth_type` | If an authentication check was made, this gets set to the auth type. |
| 336    | `char*` | `unparsed_uri` | The URI without any parsing performed. |
| 344    | `char*` | `uri` | The path portion of the URI, or "/" if no path provided. |
| 352    | `char*` | `filename` | The filename on disk corresponding to this response. |
| 360    | `char*` | `canonical_filename` | The true filename stored in the filesystem, as in the true alpha case and alias correction, e.g., "Image.jpeg" not "IMAGE$1.JPE" on Windows. The core map_to_storage canonicalizes r->filename when they mismatch. |
| 368    | `char*` | `path_info` | The PATH_INFO extracted from this request. |
| 376    | `char*` | `args` | The QUERY_ARGS extracted from this request. |
| 380    | `int` | `used_path_info` | Flag for the handler to accept or reject path_info on the current request. All modules should respect the AP_REQ_ACCEPT_PATH_INFO and AP_REQ_REJECT_PATH_INFO values, while AP_REQ_DEFAULT_PATH_INFO indicates they may follow existing conventions. This is set to the user's preference upon HOOK_VERY_FIRST of the fixups. |
| 384    | `int` | `eos_sent` | A flag to determine if the eos bucket has been sent yet. |
| 392    | `struct ap_conf_vector_t*` | `per_dir_config` | Options set in config files, etc. |
| 400    | `struct ap_conf_vector_t*` | `request_config` | Notes on this request. |
| 408    | `const struct ap_logconf*` | `log` | Optional request log level configuration. Will usually point to a server or per_dir config, i.e., must be copied before modifying. |
| 416    | `const char*` | `log_id` | Id to identify request in access and error log. Set when the first error log entry for this request is generated. |
| 424    | `const struct htaccess_result*` | `htaccess` | A linked list of the .htaccess configuration directives accessed by this request. N.B. always add to the head of the list, never to the end. That way, a sub request's list can (temporarily) point to a parent's list. |
| 432    | `struct ap_filter_t*` | `output_filters` | A list of output filters to be used for this request. |
| 440    | `struct ap_filter_t*` | `input_filters` | A list of input filters to be used for this request. |
| 448    | `struct ap_filter_t*` | `proto_output_filters` | A list of protocol level output filters to be used for this request. |
| 456    | `struct ap_filter_t*` | `proto_input_filters` | A list of protocol level input filters to be used for this request. |
| 460    | `int` | `no_cache` | This response cannot be cached. |
| 464    | `int` | `no_local_copy` | There is no local copy of this response. |
| 472    | `apr_thread_mutex_t*` | `invoke_mtx` | Mutex to protect callbacks registered with ap_mpm_register_timed_callback from being run before the original handler finishes running. |
| 480    | `apr_uri_t` | `parsed_uri` | A struct containing the components of URI. |
| 488    | `apr_finfo_t` | `finfo` | finfo.protection (st_mode) set to zero if no such file. |
| 496    | `apr_sockaddr_t*` | `useragent_addr` | Remote address information from conn_rec, can be overridden if necessary by a module. This is the address that originated the request. |
| 504    | `char*` | `useragent_ip` | User agent IP address. |
| 512    | `apr_table_t*` | `trailers_in` | MIME trailer environment from the request. |
| 520    | `apr_table_t*` | `trailers_out` | MIME trailer environment from the response. |
| 528    | `char*` | `useragent_host` | Originator's DNS name, if known. NULL if DNS hasn't been checked, "" if it has and no address was found. N.B. Only access this through ap_get_useragent_host(). |
| 532    | `int` | `double_reverse` | Have we done double-reverse DNS? -1 yes/failure, 0 not yet, 1 yes/success. TODO: 2-bit signed bitfield when this structure is compacted. |
| 536    | `int` | `taint` | Mark the request as potentially tainted. This might become a bitfield if we identify different taints to be flagged. Always use ap_request_tainted() to check taint. |
| 540    | `unsigned int` | `flushed` | Whether the response has been flushed through the network, relevant at ap_run_log_transaction() time only. TODO: compact elsewhere. |
| 544    | `ap_request_bnotes_t` | `bnotes` | Request flags associated with this request. Use AP_REQUEST_GET_FLAGS() and AP_REQUEST_SET_FLAGS() to access the elements of this field. |

## 0x03: Additional Notes

- `apache8 (a1+xxx)`: This section seems to be incomplete or requires further context. Please provide more details or clarify the intended content.

This document provides a comprehensive overview of the `request_rec` structure and its members, along with the basic data types and their sizes in both 32-bit and 64-bit architectures.