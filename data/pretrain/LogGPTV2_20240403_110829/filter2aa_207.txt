web⸺ 
0x00  
ida88
32
  char 1
  char*: 4322^32, 32bit464
  short int : 2
  int  4
  unsigned int : 4
  float:  4
  double:   8
  long:   4
  long long:  8
  unsigned long:  4
64
  char 1
  char*(): 8
  short int : 2
  int  4
  unsigned int : 4
  float:  4
  double:   8
  long:   8
  long long:  8
  unsigned long:  8
apache
apr_off_t8
64request_rec
0x01  
a1request_rec29
0e8h10232232829ida8
8
apr_int64intint4apr_int64long8232
0x02 request_rec 
‘*’ifdefine‘-’
0
0
The pool associated with the request
apr_pool_t *pool;
1
8
The connection to the client
conn_rec
*connection;
2
16
The virtual host for this request
server_rec *server;
3
24
Pointer to the redirected request if this is an external redirect
request_rec *next;
4
32
Pointer to the previous request if this is an internal redirect
request_rec *prev;
5
40
Pointer to the main request if this is a sub-request * (see http_request.h)
request_rec *main;
6
48
First line of request
char *the_request;
7
56
HTTP/0.9, "simple" request (e.g. GET /foo\n w/no headers)
int assbackwards;
8
60
A proxy request (calculated during post_read_request/translate_name) * possible values
PROXYREQ_NONE, PROXYREQ_PROXY, PROXYREQ_REVERSE,*PROXYREQ_RESPONSE
int proxyreq;
9
64
HEAD request, as opposed to GET
int header_only;
10
68
Protocol version number of protocol; 1.1 = 1001
int proto_num;
11
72
Protocol string, as given to us, or HTTP/0.9
const char *protocol;
12
80
Host, as set by full URI or Host: header.* For literal IPv6 addresses, this does NOT include the
surrounding [ ]
const char
*hostname;
13
88
Time when the request started
apr_time_t
request_time;
14
96
Status line, if set by script
const char
*status_line;
15
104
/** Status line */
int status;
16
108
/** M_GET, M_POST, etc. */
int method_number;
17
112
/** Request method (eg. GET, HEAD, POST, etc.) */
const char *method;
18
120
'allowed' is a bitvector of the allowed methods.
ap_method_mask_t
allowed;
19
128
/** Array of extension methods */
apr_array_header_t
*allowed_xmethods;
20
136
/** List of allowed methods */
ap_method_list_t
*allowed_methods;
21
144
/** byte count in stream is for body */
apr_off_t
sent_bodyct;
22
152
/** body byte count, for easy access */
apr_off_t bytes_sent;
23
160
/** Last modified time of the requested resource */
apr_time_t mtime;
24
168
/** The Range: header */
const char *range;
25
176
/** The "real" content length */
apr_off_t clength;
26
184
/** sending chunked transfer-coding */
int chunked;
27
188
/** Method for reading the request body * (eg. REQUEST_CHUNKED_ERROR,
REQUEST_NO_BODY, * REQUEST_CHUNKED_DECHUNK, etc...) */
int read_body;
28
192
/** reading chunked transfer-coding */
int read_chunked;
29
196
/** is client waiting for a 100 response? */
unsigned
expecting_100;
30
220
/** The optional kept body of the request. */
apr_bucket_brigade
*kept_body;
31
208
/** For ap_body_to_table(): parsed body XXX: ap_body_to_table has been removed. Remove
body_table too or * XXX: keep it to reintroduce ap_body_to_table without major bump?
apr_table_t
*body_table;
32
216
/** Remaining bytes left to read from the request body */
apr_off_t remaining;
33
224
/** Number of bytes that have been read from the request body */
apr_off_t
read_length;
34
232
/** MIME header environment from the request */
apr_table_t
*headers_in;
35
240
/** MIME header environment for the response */
apr_table_t
*headers_out;
36
248
/** MIME header environment for the response, printed even on errors and* persist across
internal redirects */
apr_table_t
*err_headers_out;
37
256
/** Array of environment variables to be used for sub processes */
apr_table_t
*subprocess_env;
38
264
/** Notes from one module to another */
apr_table_t *notes;
39
272
The content-type for the current request
const char
*content_type; Break
these out --- we
dispatch on 'em */
40
280
/** The handler string that we use to call a handler function */
const char *handler;
What we *really *
dispatch on
41
288
/** How to encode the data */
const char
*content_encoding;
42
296
/** Array of strings representing the content languages */
apr_array_header_t
*content_languages;
43
304
/** variant list validator (if negotiated) */
char *vlist_validator;
44
312
/** If an authentication check was made, this gets set to the user name. */
char *user;
45
320
/** If an authentication check was made, this gets set to the auth type. */
char *ap_auth_type;
46
328
/** The URI without any parsing performed */
char *unparsed_uri;
47
336
/** The path portion of the URI, or "/" if no path provided */
char *uri;
48
344
/** The filename on disk corresponding to this response */
char *filename;
49
352
The true filename stored in the filesystem, as in the true alpha case * and alias correction, e.g.
"Image.jpeg" not "IMAGE$1.JPE" on Windows. * The core map_to_storage canonicalizes r-
>filename when they mismatch
char
*canonical_filename;
50
360
/** The PATH_INFO extracted from this request */
char *path_info;
51
368
/** The QUERY_ARGS extracted from this request */
char *args;
52
376
* Flag for the handler to accept or reject path_info on the current request. All modules should
respect the AP_REQ_ACCEPT_PATH_INFO and AP_REQ_REJECT_PATH_INFO values, while
AP_REQ_DEFAULT_PATH_INFO indicates they may follow existing conventions. This is set to
the user's preference upon HOOK_VERY_FIRST of the fixups.
int used_path_info;
53
380
/** A flag to determine if the eos bucket has been sent yet */
int eos_sent;
54
384
/** Options set in config files, etc. */
struct
ap_conf_vector_t
*per_dir_config;
55
392
/** Notes on * this * request */
struct
ap_conf_vector_t
*request_config;
56
400
/** Optional request log level configuration. Will usually point to a server or per_dir config, i.e.
must be copied before modifying */
const struct
ap_logconf *log;
57
408
/** Id to identify request in access and error log. Set when the first error log entry for this
request is generated.
const char *log_id;
58
416
/** A linked list of the .htaccess configuration directives accessed by this request.N.B. always
add to the head of the list, never to the end. that way, a sub request's list can (temporarily)
point to a parent's list
const struct
htaccess_result
*htaccess;
59
424
/** A list of output filters to be used for this request */
struct ap_filter_t
*output_filters;
60
432
/** A list of input filters to be used for this request */
struct ap_filter_t
*input_filters;
61
440
/** A list of protocol level output filters to be used for this request */
struct ap_filter_t
*proto_output_filters;
62
448
/** A list of protocol level input filters to be used for this request */
struct ap_filter_t
*proto_input_filters;
63
456
/** This response can not be cached */
int no_cache;
64
460
/** There is no local copy of this response */
int no_local_copy;
*
65
464
/** Mutex protect callbacks registered with ap_mpm_register_timed_callback from being run
before the original handler finishes running
apr_thread_mutex_t
*invoke_mtx;
66-
1
472
/** A struct containing the components of URI */
apr_uri_t parsed_uri;
67-
1
480
/** finfo.protection (st_mode) set to zero if no such file */
apr_finfo_t finfo;
68-
1
488
/** remote address information from conn_rec, can be overridden if necessary by a module.
This is the address that originated the request.
apr_sockaddr_t
*useragent_addr;
69-
1
496
char *useragent_ip;
70-
1
504
/** MIME trailer environment from the request */
apr_table_t
*trailers_in;
71-
1
512
/** MIME trailer environment from the response */
apr_table_t
*trailers_out;
72-
/** Originator's DNS name, if known. NULL if DNS hasn't been checked, "" if it has and no
char
1
520
address was found. N.B. Only access this though ap_get_useragent_host() */
*useragent_host;
73-
1
528
/** have we done double-reverse DNS? -1 yes/failure, 0 not yet,1 yes/success TODO: 2 bit
signed bitfield when this structure is compacted
int double_reverse;
74-
1
532
/** Mark the request as potentially tainted. This might become a bitfield if we identify different
taints to be flagged. Always use ap_request_tainted() to check taint.
int taint;
75-
1
536
/** Whether the response has been flushed through the network, relevant at
ap_run_log_transaction() time only. TODO: compact elsewhere
unsigned int
flushed:1;
76-
1
540
/** Request flags associated with this request. Use AP_REQUEST_GET_FLAGS() and
AP_REQUEST_SET_FLAGS() to access the elements of this field.
ap_request_bnotes_t
bnotes;
0x03  
apache8 (a1+xxx)