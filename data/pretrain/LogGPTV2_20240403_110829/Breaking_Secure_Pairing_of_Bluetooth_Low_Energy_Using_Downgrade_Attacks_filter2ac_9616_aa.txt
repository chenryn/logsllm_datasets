title:Breaking Secure Pairing of Bluetooth Low Energy Using Downgrade Attacks
author:Yue Zhang and
Jian Weng and
Rajib Dey and
Yier Jin and
Zhiqiang Lin and
Xinwen Fu
Breaking Secure Pairing of Bluetooth Low Energy 
Using Downgrade Attacks
Yue Zhang, College of Information Science and Technology, Jinan University 
(Department of Computer Science, University of Central Florida); Jian Weng, 
College of Information Science and Technology, Jinan University; Rajib Dey, 
Department of Computer Science, University of Central Florida; Yier Jin, 
Department of Electrical and Computer Engineering, University of Florida; 
Zhiqiang Lin, Computer Science and Engineering, The Ohio State University; 
Xinwen Fu, Department of Computer Science, University of Central Florida
https://www.usenix.org/conference/usenixsecurity20/presentation/zhang-yue
This paper is included in the Proceedings of the 
29th USENIX Security Symposium.
August 12–14, 2020
978-1-939133-17-5
Open access to the Proceedings of the 
29th USENIX Security Symposium 
is sponsored by USENIX.
Breaking Secure Pairing of Bluetooth Low Energy Using Downgrade Attacks
Yue Zhang Δ,γ, Jian WengΔ, Rajib Deyγ, Yier Jin*, Zhiqiang Lin‡, and Xinwen Fuγ
ΔCollege of Information Science and Technology, Jinan University
γDepartment of Computer Science, University of Central Florida
*Department of Electrical and Computer Engineering, University of Florida
‡Department of Computer Science and Engineering, Ohio State University
Abstract
To defeat security threats such as man-in-the-middle
(MITM) attacks, Bluetooth Low Energy (BLE) 4.2 and 5.x
introduced a Secure Connections Only (SCO) mode, under
which a BLE device can only accept secure pairing such as
Passkey Entry and Numeric Comparison from an initiator,
e.g., an Android mobile. However, the BLE speciﬁcation
does not require the SCO mode for the initiator, and does
not specify how the BLE programming framework should
implement this mode. In this paper we show that the BLE
programming framework of the initiator must properly han-
dle SCO initiation, status management, error handling, and
bond management; otherwise severe ﬂaws can be exploited
to perform downgrade attacks, forcing the BLE pairing pro-
tocols to run in an insecure mode without user’s awareness.
To validate our ﬁndings, we have tested 18 popular BLE
commercial products with 5 Android phones. Our experi-
mental results proved that MITM attacks (caused by down-
grading) are possible to all these products. More importantly,
due to such system ﬂaws from the BLE programming frame-
work, all BLE apps in Android are subject to our downgrade
attacks. To defend against our attacks, we have built a pro-
totype for the SCO mode on Android 8 atop Android Open
Source Project (AOSP). Finally, in addition to Android, we
also ﬁnd all major OSes including iOS, macOS, Windows,
and Linux do not support the SCO mode properly. We have
reported the identiﬁed BLE pairing vulnerabilities to Blue-
tooth Special Interest Group, Google, Apple, Texas Instru-
ments, and Microsoft.
1 Introduction
Bluetooth Low Energy (BLE) is a widely adopted wireless
communication technology and is broadly used in many
IoT applications such as retail (e.g., beacons), healthcare
(e.g., blood pressure monitor), and wearables (e.g., smart
watches). BLE has two salient features: (i) low energy con-
sumption, increasing the lifetime of battery-powered BLE
devices, and (ii) Generic Attribute Proﬁle (GATT) based data
transmission, allowing mobile, tablet and PC applications
for arbitrary data transmission with peer BLE devices.
Being a wireless communication technology, BLE relies
on pairing, under which two paired devices authenticate each
other and negotiate a secret key, to encrypt the communi-
cation channel and ensure the secure communication. Lat-
est versions of the speciﬁcation ([1, 2]) introduced four as-
sociation methods: (i) Just Works, (ii) Passkey Entry, (iii)
Numeric Comparison, and (iv) Out Of Band (OOB). How-
ever, Just Works uses a plain Elliptic-curve Difﬁe–Hellman
key exchange protocol without authentication of exchanged
public keys and it is therefore subject to the Man-in-the-
Middle (MITM) attack [3]. Out of Band (OOB) requires a
non-Bluetooth channel such as Near Field Communication
(NFC) for key exchanging to defeat passive eavesdropping
and MITM attacks. It is rarely used due to the requirement of
an extra non-Bluetooth channel [4]. Consequently, Passkey
Entry and Numeric Comparison are actually the two practi-
cal secure association methods.
In addition to these four association methods, the latest
BLE 4.2 [1] and 5.x [2] added a new Secure Connections
Only (SCO) mode for BLE enabled devices to address vul-
nerabilities found in the previous generations of Bluetooth.
For example, in Bluetooth Classic 2.1 and 3.0, Bluetooth
Secure Simple Pairing (SSP) is used [5]. Under SSP, two
Bluetooth devices use only input/output (I/O) capabilities
(such as display and keyboard) to determine the association
method. However, an attacker can falsely declare their I/O
capabilities and conduct an MITM attack [5]. Therefore,
with BLE 4.2 and 5.x, if a BLE device supports the SCO
mode, it can be forced to authenticate the user/mobile de-
vice with secure association methods, which are expected to
defeat the MITM attacks.
However, we discover that in the BLE speciﬁcation, the
SCO mode only speciﬁes that a BLE device needs to au-
thenticate the mobile device (typically the BLE connection
initiator), but the mobile device is not required to authen-
ticate the BLE device. Therefore, an attacker can spoof a
victim BLE device’s MAC address and other characteristics
USENIX Association
29th USENIX Security Symposium    37
to create a fake BLE device and attack the initiators. We
further discover that a proper implementation of the SCO
mode is in fact quite challenging for the BLE programming
framework. That is, at least four capabilities are required:
(i) Initiation: An application shall have the capability of
instructing the BLE stack the speciﬁc secure association
method to enforce; (ii) Status management: The BLE stack
shall memorize the speciﬁed secure association method,
enforce it at the right time and notify the corresponding
result; (iii) Error handling: When errors occur during com-
munications, the BLE stack and application shall coordinate
to handle these errors and enforce the speciﬁed secure asso-
ciation method; and (iv) Bond management: The application
shall have the capability of removing its broken bond caused
by errors in order to initiate the enforcement process again.
The lack of the above capabilities in the BLE program-
ming framework leads to security ﬂaws, as demonstrated
in this paper. Speciﬁcally, we show that the lack of proper
enforcement and handling of the SCO mode in the BLE
programming framework for the mobile device can lead to a
variety of attacks by a fake BLE device, including (i) expo-
sure of secret data from mobile apps, e.g., a user’s password
for device access, and from mobiles, e.g., a mobile device’s
Identity Resolving Key (IRK) and MAC address;
(ii)
injection of false data to affect the mobile app data integrity.
As a concrete example, even if an Android mobile was
paired with a peer BLE device through secure pairing using
secure association methods, a fake device can downgrade
the association method into insecure ones, i.e., Just Works or
even communicating in plaintext. These attacks go beyond
mobiles. For instance, by stealing an Android mobile’s
IRK and MAC address with a fake device, an attacker can
pretend to be the legitimate mobile to bypass a peer device’s
whitelist if there is any. Not only the BLE programming
framework in Android has these security ﬂaws, but also all
other major OSes including iOS, macOS, Windows, and
Linux contain them as well, as shown in our experiment.
Contributions. Our major contributions are summarized as
follows.
• Novel Discovery. We are the ﬁrst to discover that in
the SCO mode, the BLE programming framework at
the mobile device side must properly handle initiation,
status management, error handling, and bound man-
agement during the life cycle of a BLE pairing process;
any ﬂaws among them will allow a fake device to steal
secrets or tamper with sensitive data to mobile devices.
• Practical Attacks. We demonstrate with attacks on 18
commercial BLE devices to show the speciﬁc design
ﬂaws in the BLE programming framework of Android.
These attacks also apply to all of the 18,929 BLE
Android apps we examined. Our extensive experiments
also conﬁrm that the design ﬂaws exist in all major
OSes including Android, iOS, macOS, Windows and
Linux while these ﬂaws may vary in particular OSes.
The attack against mobiles and peer devices may be
deployed from tens of meters with off-the-shelf devices.
• Countermeasures. Security defenses are also pro-
posed and prototyped to enhance the SCO mode for
Android by enforcing secure association methods in
Android Open Source Project (AOSP) [6]. Our security
analysis with BLE keyboards further shows that Nu-
merical Comparison is more secure than Passkey Entry
when both the mobile and the peer device enforce
secure pairing.
Responsible Disclosures: We have reported our ﬁndings
to Bluetooth Special Interest Group (SIG), Google Android
Security Team, Apple, Windows, and Texas Instruments
(TI) Product Security Incident Response Team (PSIRT).
Googled rated the identiﬁed Android vulnerabilities as High
severity and released a patch in December 2019 Android
Security Bulletin, which ﬁxes part of the issue. TI patched
its BLE stack [7]. Progress with Apple can be tracked
through CVE-2020-9770. The Microsoft Security Response
Center (MSRC) assigned a vulnerability tracking number
(VULN-012119) to the raised issues.
2 Background
2.1 BLE Protocol Stack
BLE is a short-range wireless communications technol-
ogy. Figure 1 shows its protocol stack using a BLE-equipped
blood pressure monitor as an example. As illustrated, there
are two apps involved: one running in the blood pressure
monitor, and the other running in the mobile device such
as Android. These two apps use the BLE core system for
communication, which consists of two building blocks: LE
controller and host. The LE controller uses the link layer
and physical layer to create a connection for sending/receiv-
ing data. The physical layer uses frequency hopping for
communication, where data is exchanged over a sequence
of hopping frequencies, which is negotiated between two
devices. The host implements multiple protocols including
the Security Manager Protocol (SMP) and Attribute Protocol
(ATT) for secure communication. The Host Controller Inter-
face (HCI) moves data, e.g., blood pressure measurements or
SMP control commands, from the host to the LE controller
through a physical interface, a function call or other venues
depending on speciﬁc implementations.
2.2 BLE Workﬂow
The typical workﬂow between a BLE master (e.g., the mo-
bile device) and slave (e.g., the blood pressure monitor) is il-
lustrated in Figure 2. In total, there are 11 steps within three
stages: (i) Connection, (ii) Pairing (which is optional), and
(iii) Communication. A typical BLE connection setup pro-
cess goes through steps 1 to 4. After the two BLE devices
38    29th USENIX Security Symposium
USENIX Association
Mobile
Blood Pressure Monitor
Mobile
Blood Pressure Monitor
ood Pressure Moni
App
Core system
SMP
Host
(cid:258)
ATT
HCI
LE controller
Link layer
LE physical layer
App
Core system
SMP
Host
(cid:258)
ATT
HCI
LE controller
Link layer
LE physical layer
B
L
E
P
r
o
t
o
c
o
l
S
t
a
c
k
r
e
t
s
a
M
S
l
a
v
e
(i). Connection
1. Advertisements
2. Scan request
3. Scan response
4. Connection request
(ii). Pairing (optional)
5. Pairing features exchange
6. Public key exchange
7. Authentication stage 1: (Just Works,
Passkey-Entry, Numeric Comparison, OOB)
8. Authentication stage 2 & LTK calculation
(Encrypted communication begins)
Phase 1
Phase 2
9. Transport specific key distribution
Phase 3
(iii). Communication
10. Write data
11. Read data
Figure 2: BLE workﬂow
vice sets MITM protection as true, then there will be two
potential cases: (i) Passkey Entry or Numeric Comparison is
chosen if I/O capabilities of both devices support the asso-
ciation method; or (ii) Just Works is used. 2. I/O capabili-
ties – The exchanged I/O capabilities determine a association
method with authentication requirements. Different associa-
tion methods require different I/O capabilities as introduced
in §2.3.1. 3. BLE version – BLE version is indicated in the
Secure Connections (SC) bit. If the mobile and peer device
set the SC bit, BLE 4.2 and above will be adopted. Other-
wise, the BLE legacy pairing protocol is used.
Phase 2 – Key exchange and authentication This phase
includes three steps (Steps 6, 7, and 8) as follows. 1. Public
key exchange: In Step 6, the master and slave use the Elliptic-
Curve Difﬁe–Hellman (ECDH) key exchange protocol to ob-
tain each other’s public key and generate a symmetric key,
known as the Difﬁe–Hellman Key (DHKey). 2. Authentica-
tion stage 1: In Step 7, depending on the exchanged I/O ca-
pabilities and authentication requirements of the two devices,
one of the following four association methods is adopted, in-
cluding “Just Works”, “Passkey Entry”, “Numeric Compar-
ison” and “Out of Band (OOB)”. 3. Authentication stage
2 and LTK calculation: In Step 8, the two pairing devices
use previously exchanged authentication information includ-
ing DHKey to generate MacKey and Long Term Key (LTK).
MacKey is used to ensure both devices generate the same
LTK. If the pairing feature bonding is required, LTK is saved
for future SessionKey generation and link encryption.
Phase 3 – Transport speciﬁc key distribution In Step 9,
the communication after Phase 2 will be encrypted with a
SessionKey generated from LTK. In this phase, the Identity
Resolution Key (IRK) may be distributed from one device
(either the master or the slave) to the other and is used for
privacy preserving.
Figure 1: BLE protocol stack
establish the connection, if no device explicitly requests pair-
ing, the communication continues in plaintext. Otherwise,
pairing is started to negotiate keys and encrypt the commu-
nication. Steps 5 to 9 in Figure 2 illustrate a typical pairing
process. Afterwards, the two devices start to exchange data
and communicate via the ATT protocol as demonstrated in
Step 10 and 11. We will present the workﬂow in detail be-
tween a mobile and a blood pressure monitor as follows.
2.2.1 Connection Stage
In Step 1, when the blood pressure monitor tries to es-