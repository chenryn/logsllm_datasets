# Breaking Secure Pairing of Bluetooth Low Energy Using Downgrade Attacks

**Authors:**
- Yue Zhang, College of Information Science and Technology, Jinan University; Department of Computer Science, University of Central Florida
- Jian Weng, College of Information Science and Technology, Jinan University
- Rajib Dey, Department of Computer Science, University of Central Florida
- Yier Jin, Department of Electrical and Computer Engineering, University of Florida
- Zhiqiang Lin, Department of Computer Science and Engineering, The Ohio State University
- Xinwen Fu, Department of Computer Science, University of Central Florida

**Abstract:**
To mitigate security threats such as man-in-the-middle (MITM) attacks, Bluetooth Low Energy (BLE) 4.2 and 5.x introduced the Secure Connections Only (SCO) mode, which restricts BLE devices to accept only secure pairing methods like Passkey Entry and Numeric Comparison from an initiator, such as an Android mobile. However, the BLE specification does not mandate the SCO mode for initiators and lacks guidelines for its implementation in the BLE programming framework. This paper demonstrates that the BLE programming framework must properly handle SCO initiation, status management, error handling, and bond management. Otherwise, severe flaws can be exploited to perform downgrade attacks, forcing BLE pairing protocols into insecure modes without user awareness.

To validate our findings, we tested 18 popular BLE commercial products with 5 Android phones. Our experimental results confirmed that MITM attacks (caused by downgrading) are possible on all these products. More importantly, due to system flaws in the BLE programming framework, all BLE apps on Android are susceptible to our downgrade attacks. To defend against these attacks, we developed a prototype for the SCO mode on Android 8 using the Android Open Source Project (AOSP). Additionally, we found that major operating systems, including iOS, macOS, Windows, and Linux, do not support the SCO mode properly. We have reported the identified BLE pairing vulnerabilities to the Bluetooth Special Interest Group, Google, Apple, Texas Instruments, and Microsoft.

## 1. Introduction

Bluetooth Low Energy (BLE) is a widely adopted wireless communication technology used in various IoT applications, such as retail (e.g., beacons), healthcare (e.g., blood pressure monitors), and wearables (e.g., smartwatches). BLE offers two key features: low energy consumption, which extends the battery life of BLE devices, and Generic Attribute Profile (GATT) based data transmission, enabling arbitrary data exchange between mobile, tablet, and PC applications and peer BLE devices.

As a wireless communication technology, BLE relies on pairing, where two paired devices authenticate each other and negotiate a secret key to encrypt the communication channel and ensure secure communication. The latest versions of the BLE specification ([1, 2]) introduced four association methods: Just Works, Passkey Entry, Numeric Comparison, and Out Of Band (OOB). However, Just Works uses a plain Elliptic-curve Diffie–Hellman key exchange protocol without authenticating exchanged public keys, making it vulnerable to MITM attacks [3]. OOB requires a non-Bluetooth channel, such as Near Field Communication (NFC), for key exchange, but it is rarely used due to the need for an extra non-Bluetooth channel [4]. Consequently, Passkey Entry and Numeric Comparison are the two practical secure association methods.

In addition to these four association methods, BLE 4.2 [1] and 5.x [2] introduced the Secure Connections Only (SCO) mode to address vulnerabilities in previous Bluetooth generations. For example, in Bluetooth Classic 2.1 and 3.0, Bluetooth Secure Simple Pairing (SSP) was used [5], where two Bluetooth devices use input/output (I/O) capabilities (such as display and keyboard) to determine the association method. However, an attacker can falsely declare their I/O capabilities and conduct MITM attacks [5]. With BLE 4.2 and 5.x, if a BLE device supports the SCO mode, it can be forced to authenticate the user/mobile device with secure association methods, which are expected to defeat MITM attacks.

However, we discovered that the BLE specification only specifies that a BLE device needs to authenticate the mobile device (typically the BLE connection initiator), but the mobile device is not required to authenticate the BLE device. Therefore, an attacker can spoof a victim BLE device's MAC address and other characteristics to create a fake BLE device and attack the initiators. We further discovered that a proper implementation of the SCO mode is challenging for the BLE programming framework. At least four capabilities are required:
1. **Initiation:** An application must instruct the BLE stack to enforce a specific secure association method.
2. **Status Management:** The BLE stack must remember the specified secure association method, enforce it at the right time, and notify the corresponding result.
3. **Error Handling:** When errors occur during communications, the BLE stack and application must coordinate to handle these errors and enforce the specified secure association method.
4. **Bond Management:** The application must be able to remove broken bonds caused by errors to initiate the enforcement process again.

The lack of these capabilities in the BLE programming framework leads to security flaws, as demonstrated in this paper. Specifically, the lack of proper enforcement and handling of the SCO mode in the BLE programming framework for the mobile device can lead to various attacks by a fake BLE device, including:
1. **Exposure of Secret Data:** From mobile apps (e.g., a user’s password for device access) and mobiles (e.g., a mobile device’s Identity Resolving Key (IRK) and MAC address).
2. **Injection of False Data:** Affecting the integrity of mobile app data.

For example, even if an Android mobile was paired with a peer BLE device through secure pairing, a fake device can downgrade the association method into insecure ones, such as Just Works or plaintext communication. These attacks extend beyond mobiles. For instance, by stealing an Android mobile’s IRK and MAC address with a fake device, an attacker can pretend to be the legitimate mobile and bypass a peer device’s whitelist. Not only does the BLE programming framework in Android have these security flaws, but all other major OSes, including iOS, macOS, Windows, and Linux, also contain them, as shown in our experiments.

### Contributions

Our major contributions are summarized as follows:
- **Novel Discovery:** We are the first to discover that in the SCO mode, the BLE programming framework at the mobile device side must properly handle initiation, status management, error handling, and bond management during the lifecycle of a BLE pairing process. Any flaws among these will allow a fake device to steal secrets or tamper with sensitive data on mobile devices.
- **Practical Attacks:** We demonstrate attacks on 18 commercial BLE devices to show specific design flaws in the BLE programming framework of Android. These attacks also apply to all 18,929 BLE Android apps we examined. Our extensive experiments confirm that the design flaws exist in all major OSes, including Android, iOS, macOS, Windows, and Linux, though the specifics may vary. The attacks against mobiles and peer devices can be deployed from tens of meters with off-the-shelf devices.
- **Countermeasures:** We propose and prototype security defenses to enhance the SCO mode for Android by enforcing secure association methods in the Android Open Source Project (AOSP) [6]. Our security analysis with BLE keyboards further shows that Numeric Comparison is more secure than Passkey Entry when both the mobile and the peer device enforce secure pairing.

### Responsible Disclosures

We have reported our findings to the Bluetooth Special Interest Group (SIG), Google Android Security Team, Apple, Windows, and Texas Instruments (TI) Product Security Incident Response Team (PSIRT). Google rated the identified Android vulnerabilities as high severity and released a patch in the December 2019 Android Security Bulletin, which fixes part of the issue. TI patched its BLE stack [7]. Progress with Apple can be tracked through CVE-2020-9770. The Microsoft Security Response Center (MSRC) assigned a vulnerability tracking number (VULN-012119) to the raised issues.

## 2. Background

### 2.1 BLE Protocol Stack

BLE is a short-range wireless communication technology. Figure 1 shows its protocol stack using a BLE-equipped blood pressure monitor as an example. There are two apps involved: one running in the blood pressure monitor and the other in the mobile device (e.g., Android). These two apps use the BLE core system for communication, which consists of two building blocks: LE controller and host. The LE controller uses the link layer and physical layer to create a connection for sending/receiving data. The physical layer uses frequency hopping for communication, where data is exchanged over a sequence of hopping frequencies negotiated between two devices. The host implements multiple protocols, including the Security Manager Protocol (SMP) and Attribute Protocol (ATT), for secure communication. The Host Controller Interface (HCI) moves data, such as blood pressure measurements or SMP control commands, from the host to the LE controller through a physical interface, function call, or other means depending on specific implementations.

### 2.2 BLE Workflow

The typical workflow between a BLE master (e.g., the mobile device) and slave (e.g., the blood pressure monitor) is illustrated in Figure 2. In total, there are 11 steps within three stages: Connection, Pairing (optional), and Communication. A typical BLE connection setup process goes through steps 1 to 4. After the two BLE devices establish the connection, if no device explicitly requests pairing, the communication continues in plaintext. Otherwise, pairing is started to negotiate keys and encrypt the communication. Steps 5 to 9 in Figure 2 illustrate a typical pairing process. Afterwards, the two devices start to exchange data and communicate via the ATT protocol, as demonstrated in steps 10 and 11.

#### 2.2.1 Connection Stage

In Step 1, when the blood pressure monitor tries to establish a connection, it sends advertisements. In Step 2, the mobile device sends a scan request. In Step 3, the blood pressure monitor responds with a scan response. In Step 4, the mobile device sends a connection request to establish the connection.

#### 2.2.2 Pairing Stage (Optional)

If pairing is requested, the following steps occur:
- **Step 5:** Pairing features exchange, where the two devices exchange information about supported pairing methods and security features.
- **Step 6:** Public key exchange, where the master and slave use the Elliptic-Curve Diffie–Hellman (ECDH) key exchange protocol to obtain each other’s public key and generate a symmetric key (DHKey).
- **Step 7:** Authentication stage 1, where one of the four association methods (Just Works, Passkey Entry, Numeric Comparison, or OOB) is chosen based on the exchanged I/O capabilities and authentication requirements.
- **Step 8:** Authentication stage 2 and LTK calculation, where the two pairing devices use previously exchanged authentication information, including DHKey, to generate MacKey and Long Term Key (LTK). If bonding is required, LTK is saved for future SessionKey generation and link encryption.
- **Step 9:** Transport-specific key distribution, where the communication after Phase 2 is encrypted with a SessionKey generated from LTK. The Identity Resolution Key (IRK) may be distributed from one device to the other for privacy preservation.

#### 2.2.3 Communication Stage

- **Step 10:** Write data, where the mobile device writes data to the blood pressure monitor.
- **Step 11:** Read data, where the mobile device reads data from the blood pressure monitor.

![Figure 1: BLE Protocol Stack](path_to_image)
![Figure 2: BLE Workflow](path_to_image)