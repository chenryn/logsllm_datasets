            if P1 == '0' * 128:
                return '%s%s' % (P2, '1')
            if P2 == '0' * 128:
                return '%s%s' % (P1, '1')
            len_2 = 2 * self.para_len
            l1 = len(P1)
            l2 = len(P2)
            if (l1  Bob : hash(ra * G) * AlicePublickey + ra * G
    Bob -> Alice : hash(rb * G) * BobPublickey + rb * G
接着，他们通过下面过程计算一个共同的点
    (hash(rb * G) * BobPrivatekey + rb) * (hash(ra * G) * AlicePublickey + ra * G)
    = (hash(rb * G) * BobPrivatekey + rb) * (hash(ra * G) * AlicePrivatekey + ra) * G
    = (hash(rb * G) * BobPublickey + rb * G) * (hash(ra * G) * AlicePrivatekey + ra)
而后续加密用的共享密钥是通过这个点经过SM3得到，两个不同的点得到的密钥之间没有任何关系
因此在消息转发时要让Alice与Bob计算的共享密钥需相同，并且由于Alice的密钥每次更换，若不知道给Bob发送的公钥对应的私钥，也不可能解密成功。
我们可控的点为：
  * 给Alice的Bob rb
  * 给Bob的Alice ra
  * 给Bob的Alice publickey
因为Bob的公钥无法改变，给alice发送的消息只有rb可控，但由于还要进行哈希计算，所以改变rb所得到的值难以控制，因此尝试直接将Bob发送的rb转发，试图通过给Bob的ra与publickey来实现共享密钥计算值相等。  
即
    hash(ra * G) * AlicePublickey + ra * G = hash(R) * Publickey + R
（以下为我在比赛时第一时间的想法）
将左边看作一个整体点P
若先任意选取R，则
    Publickey = (P - R) * invert(hash(R) , n) = xG
但无法知道x的值，则最后一步Bob发送的flag无法解密。
若先选取Publickey，几乎没法确定R。
所以想到找低阶点，若Publickey的阶低，则x可以通过爆破得到，同时，也可以通过爆破来确定R。
    R = P - i * Publickey
如果hash(R) % order = i，则能得到满足条件的R。
对于选取的一个低阶点，计算order次，碰撞不成功的概率为(1 – 1/order)^order >>").strip()