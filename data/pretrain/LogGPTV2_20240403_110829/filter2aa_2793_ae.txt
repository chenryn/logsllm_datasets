rbp
mov
rbp, rsp
mov
edi, OFFSET FLAT:.LC0
call
puts
mov
eax, 0
pop
rbp
ret
.size
main, .-main
.ident
"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609"
第 2 章
二进制文件 ┃ XXX
.section.note.GNU-stack,"",@progbits
值得注意的是，生成的汇编代码中函数 printf()被替换成了 puts()，这是因为当 printf()只有单一
参数时，与 puts()是十分类似的，于是 GCC 的优化策略就将其替换以提高性能。
2.1.5
汇编阶段
GCC 编译的第三阶段是汇编，汇编器根据汇编指令与机器指令的对照表进行翻译，将 hello.s 汇
编成目标文件 hello.o。在命令中添加编译选项“-c”，操作对象可以是 hello.s，也可以从源代码 hello.c
开始，经过预处理、编译和汇编直接生成目标文件。
$ gcc -c hello.c -o hello.o
$ gcc -c hello.s -o hello.o
此时的目标文件 hello.o 是一个可重定位文件（Relocatable File），可以使用 objdump 命令来查
看其内容。
$ file hello.o
hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped
$ objdump -sd hello.o -M intel
Contents of section .text:
0000 554889e5 bf000000 00e80000 0000b800
UH..............
0010 0000005d c3
...].
Contents of section .rodata:
0000 68656c6c 6f2c2077 6f726c64 00
hello, world.
......
Disassembly of section .text:
0000000000000000 :
0:
55
push
rbp
1:
48 89 e5
mov
rbp,rsp
4:
bf 00 00 00 00
mov
edi,0x0
9:
e8 00 00 00 00
call
e 
e:
b8 00 00 00 00
mov
eax,0x0
13:
5d
pop
rbp
14:
c3
ret
此时由于还未进行链接，对象文件中符号的虚拟地址无法确定，于是我们看到字符串“hello,
world.”的地址被设置为 0x0000，作为参数传递字符串地址的 rdi 寄存器被设置为 0x0，而“call puts”
指令中函数 puts()的地址则被设置为下一条指令的地址 0xe。
2.1.6
链接阶段
GCC 编译的第四阶段是链接，可分为静态链接和动态链接两种。GCC 默认使用动态链接，添加
编译选项“-static”即可指定使用静态链接。这一阶段将目标文件及其依赖库进行链接，生成可执行
文件，主要包括地址和空间分配（Address and Storage Allocation）、符号绑定（Symbol Binding）和
重定位（Relocation）等操作。
第 2 章
二进制文件 ┃ XXXI
$ gcc hello.o -o hello -static
链接操作由链接器（ld.so）完成，结果就得到了 hello 文件，这是一个静态链接的可执行文件
（Executable File），其包含了大量的库文件，因此我们只将关键部分展示如下。
$ file hello
hello: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked,
for GNU/Linux 2.6.32, BuildID[sha1]=4d3bba9e3336550c1af6912f040c1d6f918becb1, not
stripped
$ objdump -sd hello -M intel
......
Contents of section .rodata:
4a1080 01000200 68656c6c 6f2c2077 6f726c64
....hello, world
4a1090 002e2e2f 6373752f 6c696263 2d737461
.../csu/libc-sta
......
00000000004009ae :
4009ae:
55
push
rbp
4009af:
48 89 e5
mov
rbp,rsp
4009b2:
bf 84 10 4a 00
mov
edi,0x4a1084
4009b7:
e8 d4 f0 00 00
call
40fa90 
4009bc:
b8 00 00 00 00
mov
eax,0x0
4009c1:
5d
pop
rbp
4009c2:
c3
ret
......
000000000040fa90 :
40fa90:
41 54
push
r12
40fa92:
55
push
rbp
40fa93:
49 89 fc
mov
r12,rdi
......
可以看到，通过链接操作，对象文件中无法确定的符号地址已经被修正为实际的符号地址，程
序也就可以被加载到内存中正常执行了。
第 5 章
分析环境搭建 ┃ XXXII
第 5 章
分析环境搭建
5.1
虚拟机环境
对二进制安全研究者而言，搭建一个安全、稳定、可靠且易于迁移的分析环境十分重要。在 CTF
中，我们也常常需要为各种二进制文件准备运行环境。本章我们将分别介绍虚拟机、Docker、QEMU
等环境的搭建以及常用的配置。
5.1.1
虚拟化与虚拟机管理程序
虚拟化（Virtualization）是资源的抽象化，是单一物理资源的多个逻辑表示，具有兼容、隔离的
优良特性。控制虚拟化的软件被称为虚拟机管理程序（Hypervisor），或者 VMM（Virtual Machine
Monitor），使用虚拟机管理程序在特定硬件平台上创建的计算机环境被称为虚拟机（Virtual
Machine），而特定的硬件平台被称为宿主机（Host Machine）。
在恶意代码和漏洞分析过程中常常需要使用虚拟化技术来进行辅助，这不仅可以保护真实的物
理设备环境不被恶意代码攻击、固化保存分析环境以提高工作效率，而且还能够在不影响程序执行
流的情况下动态捕获程序内存、CPU 寄存器等关键数据。
虚拟化技术根据实现技术的不同可以分为以下几类。
操作系统层虚拟化（OS-level Virtualization）：应用于服务器操作系统中的轻量级虚拟化技
术，不能模拟硬件设备，但可以创建多个虚拟的操作系统实例，如 Docker。
硬件辅助虚拟化（Hardware-assisted Virtualization）：由硬件平台对特殊指令进行截获和重
定向，交由虚拟机管理程序进行处理，这需要 CPU、主板、BIOS 和软件的支持。2005 年 Intel
公司提出了 Intel-VT，该技术包括处理器虚拟化技术 Intel VT-x、芯片组虚拟化技术 Intel VT-d
和网络虚拟化技术 Intel VT-c。同时，AMD 公司也提出了自己的虚拟化技术 AMD-V，如
VMware、VirtualBox。
半虚拟化（Para-Virtualization）：通过修改开源操作系统，在其中加入与虚拟机管理程序
协同的代码，但不需要进行拦截和模拟，理论上性能更高，如 Hyper-V、Xen。
全虚拟化（Full Virtualization）：不需要对操作系统进行改动，提供了完整的包括处理器、
内存和外设的虚拟化平台，对虚拟机中运行的高权限指令进行拦截和模拟，保证相关操作被
隔离在当前虚拟机中。通常情况下，全虚拟化对虚拟机操作系统的适配更加简便，如 VMware、
第 5 章
分析环境搭建 ┃ XXXIII
VirtualBox、QEMU。
目前主流的全虚拟化虚拟机管理程序有 VirtualBox 和 VMware Workstation。其中 VirtualBox 是
由 Oracle 公司开发的开源软件，而 VMware Workstation 则是商业化产品，当然我们也可以尝试免费
的 Player 版本，但是缺乏快照以及更高级的虚拟网络管理功能。
基于 x86 的架构设计和 CPU、主板厂商的支持，我们可以很方便地在 PC 上开启硬件虚拟化。
在 PC 的 BIOS 设置中开启虚拟化选项，不同的主板和 CPU（此处指 Intel 与 AMD），其设置可能有
所不同，具体情况请查阅相关操作手册。
5.1.2
安装虚拟机
本书我们选择使用 Ubuntu16.04 amd64 desktop 虚拟机作为工作环境，下面简述如何通过 VMware
Workstation 创建该虚拟机。
首先在 BIOS 设置中开启虚拟化选项，并下载安装 VMware Workstation。系统镜像文件推荐到速
度较快的国内开源镜像站中下载，如清华大学 TUNA。在新建虚拟机向导中选择对应的 ISO 文件，
并对虚拟机名称、用户名、密码和硬件选项等进行设置，耐心等待即可完成安装。对于虚拟机的网
络设置，通常使用桥接模式（独立 IP 地址，虚拟机相当于网络中一台独立的机器，虚拟机之间以及
虚拟机与宿主机之间都可以互相访问）和 NAT 模式（共享主机 IP 地址，虚拟机与宿主机之间可以
互相访问，但与其他主机不能互相访问）。另外，强烈建议安装 VMware Tools，以获得更方便的虚
拟机使用体验，如文件拖曳、共享剪贴板等功能。
虚拟机安装完成后，要做的第一件事情就是更换系统软件源，同样推荐清华大学 TUNA，更换
源的方法请参阅站点的帮助文件。接下来就是安装二进制安全研究或者 CTF 比赛的常用工具，以及
安装 32 位程序的依赖库等，部分安装命令如下所示。
$ sudo dpkg --add-architecture i386
$ sudo apt update && sudo apt upgrade
$ sudo apt install libc6:i386
$ sudo apt install gcc-4.8 cmake gdb socat vim
$ sudo apt install python-dev python-pip python3 python3-dev python3-pip
$ sudo pip install zio pwntools ropgadget capstone keystone-engine unicorn
$ wget -q -O- https://github.com/hugsy/gef/raw/master/scripts/gef.sh | sh
$ sudo wget https://github.com/slimm609/checksec.sh/raw/master/checksec -O
/usr/local/bin/checksec && sudo chmod +x /usr/local/bin/checksec
5.1.3
编译 debug 版本的 glibc
glibc 即 GNU C Library，是 GNU 操作系统的 C 标准库，主要由两部分组成：一部分是头文件，
位于/usr/include；另一部分是库的二进制文件，主要是 C 标准库，分为动态（libc.so.6）和静态（libc.a）
两个版本。通常系统中的共享库均为 release 版本，去除了符号表等调试信息。但有时为了方便调试，
第 5 章
分析环境搭建 ┃ XXXIV
我们就需要准备一份 debug 版本的 glibc。另外，有时 CTF 比赛中二进制程序所需的 libc 版本与我们
本地系统的版本不同（如 libc-2.26.so），那么为了使该程序在本地正常运行，同样也需要配置合适
的 libc。
从服务器中下载 glibc 源码，并切换到所需的分支，这里以 2.26 版本为例。
$ git clone git://sourceware.org/git/glibc.git && cd glibc
$ git checkout glibc-2.26
$ # 编译 64 位
$ mkdir build && cd build
$ ../configure --prefix=/usr/local/glibc-2.26 --enable-debug=yes
$ make -j4 && sudo make install
$ # 或者编译 32 位
$ mkdir build_32 && cd build_32
$ ../configure --prefix=/usr/local/glibc-2.26_32 --enable-debug=yes
--host=i686-linux-gnu --build=i686-linux-gnu CC="gcc -m32" CXX="g++ -m32"
CFLAGS="-O2 -march=i686" CXXFLAGS="-O2 -march=i686"
$ make -j4 && sudo make install
这样 debug 版本的 glibc 就被安装到了/usr/local/glibc-2.26 路径下。如果想要使用该 libc 编译源
代码，那么只需要通过--rpath 指定共享库路径，-I 指定动态链接器就可以了，如下所示。
$ gcc -L/usr/local/glibc-2.26/lib -Wl,--rpath=/usr/local/glibc-2.26/lib
-Wl,-I/usr/local/glibc-2.26/lib/ld-2.26.so hello.c -o hello
$ ldd hello
linux-vdso.so.1 =>
(0x00007ffef3dc7000)
libc.so.6 => /usr/local/glibc-2.26/lib/libc.so.6 (0x00007fe826646000)
/usr/local/glibc-2.26/lib/ld-2.26.so => /lib64/ld-linux-x86-64.so.2
(0x00007fe8269f7000)
那么如何使用该 libc 运行其他已编译的程序呢？随着越来越多的 Pwn 题开始基于新版本的 libc，
这一需求也就产生了。一种方法是直接使用该 libc 的动态链接器。如下所示。
$ /usr/local/glibc-2.26/lib/ld-2.26.so ./hello
hello, world
另一种方法则是替换二进制文件的解释器（interpreter）路径，该路径在程序编译时被写入程序
头（PT_INTERP）。解释器在程序加载时对共享库进行动态链接，此时就需要 libc 与 ld 相匹配，否
则就会出错。使用如下脚本可以很方便地修改 ELF 文件的 PT_INTERP。
import os
import argparse
from pwn import *
def change_ld(binary, ld, output):
if not binary or not ld or not output:
log.failure("Try 'python change_ld.py -h' for more information.")
return None
第 5 章
分析环境搭建 ┃ XXXV
binary = ELF(binary)
for segment in binary.segments:
if segment.header['p_type'] == 'PT_INTERP':
size = segment.header['p_memsz']
addr = segment.header['p_paddr']
data = segment.data()
if size <= len(ld):
log.failure("Failed to change PT_INTERP")
return None
binary.write(addr, "/lib64/ld-glibc-{}".format(ld).ljust(size, '\0'))
if os.access(output, os.F_OK):