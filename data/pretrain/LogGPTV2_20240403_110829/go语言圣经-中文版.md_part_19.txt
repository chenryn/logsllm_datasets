func Bonus(e *Employee, percent int) int {
return e.Salary * percent / 100
}
如果要在函数内部修改结构体成员的话，用指针传入是必须的；因为在Go语言中，所有的函
数参数都是值拷贝传入的，函数参数将不再是函数调用时的原始变量。
func AwardAnnualRaise(e *Employee) {
e.Salary = e.Salary * 105 / 100
}
因为结构体通常通过指针处理，可以用下面的写法来创建并初始化一个结构体变量，并返回
结构体的地址：
pp := &Point{1, 2}
它是下面的语句是等价的
pp := new(Point)
*pp = Point{1, 2}
不过&Point{1, 2}写法可以直接在表达式中使用，比如一个函数调用。
4.4.2. 结构体比较
如果结构体的全部成员都是可以比较的，那么结构体也是可以比较的，那样的话两个结构体
将可以使用==或!=运算符进行比较。相等比较运算符==将比较两个结构体的每个成员，因此
下面两个比较的表达式是等价的：
结构体 146
gopl
type Point struct{ X, Y int }
p := Point{1, 2}
q := Point{2, 1}
fmt.Println(p.X == q.X && p.Y == q.Y) // "false"
fmt.Println(p == q) // "false"
可比较的结构体类型和其他可比较的类型一样，可以用于map的key类型。
type address struct {
hostname string
port int
}
hits := make(map[address]int)
hits[address{"golang.org", 443}]++
4.4.3. 结构体嵌入和匿名成员
在本节中，我们将看到如何使用Go语言提供的不同寻常的结构体嵌入机制让一个命名的结构
体包含另一个结构体类型的匿名成员，这样就可以通过简单的点运算符x.f来访问匿名成员链
中嵌套的x.d.e.f成员。
考虑一个二维的绘图程序，提供了一个各种图形的库，例如矩形、椭圆形、星形和轮形等几
何形状。这里是其中两个的定义：
type Circle struct {
X, Y, Radius int
}
type Wheel struct {
X, Y, Radius, Spokes int
}
一个Circle代表的圆形类型包含了标准圆心的X和Y坐标信息，和一个Radius表示的半径信
息。一个Wheel轮形除了包含Circle类型所有的全部成员外，还增加了Spokes表示径向辐条的
数量。我们可以这样创建一个wheel变量：
var w Wheel
w.X = 8
w.Y = 8
w.Radius = 5
w.Spokes = 20
结构体 147
gopl
随着库中几何形状数量的增多，我们一定会注意到它们之间的相似和重复之处，所以我们可
能为了便于维护而将相同的属性独立出来：
type Point struct {
X, Y int
}
type Circle struct {
Center Point
Radius int
}
type Wheel struct {
Circle Circle
Spokes int
}
这样改动之后结构体类型变的清晰了，但是这种修改同时也导致了访问每个成员变得繁琐：
var w Wheel
w.Circle.Center.X = 8
w.Circle.Center.Y = 8
w.Circle.Radius = 5
w.Spokes = 20
Go语言有一个特性让我们只声明一个成员对应的数据类型而不指名成员的名字；这类成员就
叫匿名成员。匿名成员的数据类型必须是命名的类型或指向一个命名的类型的指针。下面的
代码中，Circle和Wheel各自都有一个匿名成员。我们可以说Point类型被嵌入到了Circle结构
体，同时Circle类型被嵌入到了Wheel结构体。
type Circle struct {
Point
Radius int
}
type Wheel struct {
Circle
Spokes int
}
得意于匿名嵌入的特性，我们可以直接访问叶子属性而不需要给出完整的路径：
结构体 148
gopl
var w Wheel
w.X = 8 // equivalent to w.Circle.Point.X = 8
w.Y = 8 // equivalent to w.Circle.Point.Y = 8
w.Radius = 5 // equivalent to w.Circle.Radius = 5
w.Spokes = 20
在右边的注释中给出的显式形式访问这些叶子成员的语法依然有效，因此匿名成员并不是真
的无法访问了。其中匿名成员Circle和Point都有自己的名字——就是命名的类型名字——但是
这些名字在点操作符中是可选的。我们在访问子成员的时候可以忽略任何匿名成员部分。
不幸的是，结构体字面值并没有简短表示匿名成员的语法， 因此下面的语句都不能编译通
过：
w = Wheel{8, 8, 5, 20} // compile error: unknown fields
w = Wheel{X: 8, Y: 8, Radius: 5, Spokes: 20} // compile error: unknown fields
结构体字面值必须遵循形状类型声明时的结构，所以我们只能用下面的两种语法，它们彼此
是等价的：
gopl.io/ch4/embed
w = Wheel{Circle{Point{8, 8}, 5}, 20}
w = Wheel{
Circle: Circle{
Point: Point{X: 8, Y: 8},
Radius: 5,
},
Spokes: 20, // NOTE: trailing comma necessary here (and at Radius)
}
fmt.Printf("%#v\n", w)
// Output:
// Wheel{Circle:Circle{Point:Point{X:8, Y:8}, Radius:5}, Spokes:20}
w.X = 42
fmt.Printf("%#v\n", w)
// Output:
// Wheel{Circle:Circle{Point:Point{X:42, Y:8}, Radius:5}, Spokes:20}
需要注意的是Printf函数中%v参数包含的#副词，它表示用和Go语言类似的语法打印值。对于
结构体类型来说，将包含每个成员的名字。
结构体 149
gopl
因为匿名成员也有一个隐式的名字，因此不能同时包含两个类型相同的匿名成员，这会导致
名字冲突。同时，因为成员的名字是由其类型隐式地决定的，所有匿名成员也有可见性的规
则约束。在上面的例子中，Point和Circle匿名成员都是导出的。即使它们不导出（比如改成小
写字母开头的point和circle），我们依然可以用简短形式访问匿名成员嵌套的成员
w.X = 8 // equivalent to w.circle.point.X = 8
但是在包外部，因为circle和point没有导出不能访问它们的成员，因此简短的匿名成员访问语
法也是禁止的。
到目前为止，我们看到匿名成员特性只是对访问嵌套成员的点运算符提供了简短的语法糖。
稍后，我们将会看到匿名成员并不要求是结构体类型；其实任何命名的类型都可以作为结构
体的匿名成员。但是为什么要嵌入一个没有任何子成员类型的匿名成员类型呢？
答案是匿名类型的方法集。简短的点运算符语法可以用于选择匿名成员嵌套的成员，也可以
用于访问它们的方法。实际上，外层的结构体不仅仅是获得了匿名成员类型的所有成员，而
且也获得了该类型导出的全部的方法。这个机制可以用于将一个有简单行为的对象组合成有
复杂行为的对象。组合是Go语言中面向对象编程的核心，我们将在6.3节中专门讨论。
结构体 150
gopl
4.5. JSON
JavaScript对象表示法（JSON）是一种用于发送和接收结构化信息的标准协议。在类似的协
议中，JSON并不是唯一的一个标准协议。 XML（§7.14）、ASN.1和Google的Protocol
Buffers都是类似的协议，并且有各自的特色，但是由于简洁性、可读性和流行程度等原因，
JSON是应用最广泛的一个。
Go语言对于这些标准格式的编码和解码都有良好的支持，由标准库中的encoding/json、
encoding/xml、encoding/asn1等包提供支持（译注：Protocol Buffers的支持由
github.com/golang/protobuf 包提供），并且这类包都有着相似的API接口。本节，我们将对
重要的encoding/json包的用法做个概述。
JSON是对JavaScript中各种类型的值——字符串、数字、布尔值和对象——Unicode本文编
码。它可以用有效可读的方式表示第三章的基础数据类型和本章的数组、slice、结构体和
map等聚合数据类型。
基本的JSON类型有数字（十进制或科学记数法）、布尔值（true或false）、字符串，其中字
符串是以双引号包含的Unicode字符序列，支持和Go语言类似的反斜杠转义特性，不过JSON
使用的是 转义数字来表示一个UTF-16编码（译注：UTF-16和UTF-8一样是一种变长
\Uhhhh
的编码，有些Unicode码点较大的字符需要用4个字节表示；而且UTF-16还有大端和小端的问
题），而不是Go语言的rune类型。
这些基础类型可以通过JSON的数组和对象类型进行递归组合。一个JSON数组是一个有序的
值序列，写在一个方括号中并以逗号分隔；一个JSON数组可以用于编码Go语言的数组和
slice。一个JSON对象是一个字符串到值的映射，写成以系列的name:value对形式，用花括号
包含并以逗号分隔；JSON的对象类型可以用于编码Go语言的map类型（key类型是字符串）
和结构体。例如：
boolean true
number -273.15
string "She said \"Hello, BF\""
array ["gold", "silver", "bronze"]
object {"year": 1980,
"event": "archery",
"medals": ["gold", "silver", "bronze"]}
考虑一个应用程序，该程序负责收集各种电影评论并提供反馈功能。它的Movie数据类型和一
个典型的表示电影的值列表如下所示。（在结构体声明中，Year和Color成员后面的字符串面
值是结构体成员Tag；我们稍后会解释它的作用。）
gopl.io/ch4/movie
JSON 151
gopl
type Movie struct {
Title string
Year int `json:"released"`
Color bool `json:"color,omitempty"`
Actors []string
}
var movies = []Movie{
{Title: "Casablanca", Year: 1942, Color: false,
Actors: []string{"Humphrey Bogart", "Ingrid Bergman"}},
{Title: "Cool Hand Luke", Year: 1967, Color: true,
Actors: []string{"Paul Newman"}},
{Title: "Bullitt", Year: 1968, Color: true,
Actors: []string{"Steve McQueen", "Jacqueline Bisset"}},
// ...
}
这样的数据结构特别适合JSON格式，并且在两种之间相互转换也很容易。将一个Go语言中
类似movies的结构体slice转为JSON的过程叫编组（marshaling）。编组通过调用
json.Marshal函数完成：
data, err := json.Marshal(movies)
if err != nil {
log.Fatalf("JSON marshaling failed: %s", err)
}
fmt.Printf("%s\n", data)
Marshal函数返还一个编码后的字节slice，包含很长的字符串，并且没有空白缩进；我们将它
折行以便于显示：
[{"Title":"Casablanca","released":1942,"Actors":["Humphrey Bogart","Ingr
id Bergman"]},{"Title":"Cool Hand Luke","released":1967,"color":true,"Ac
tors":["Paul Newman"]},{"Title":"Bullitt","released":1968,"color":true,"
Actors":["Steve McQueen","Jacqueline Bisset"]}]
这种紧凑的表示形式虽然包含了全部的信息，但是很难阅读。为了生成便于阅读的格式，另
一个json.MarshalIndent函数将产生整齐缩进的输出。该函数有两个额外的字符串参数用于表
示每一行输出的前缀和每一个层级的缩进：
data, err := json.MarshalIndent(movies, "", " ")
if err != nil {
log.Fatalf("JSON marshaling failed: %s", err)
}
fmt.Printf("%s\n", data)
JSON 152
gopl
上面的代码将产生这样的输出（译注：在最后一个成员或元素后面并没有逗号分隔符）：
[
{
"Title": "Casablanca",
"released": 1942,
"Actors": [
"Humphrey Bogart",
"Ingrid Bergman"
]
},
{
"Title": "Cool Hand Luke",
"released": 1967,
"color": true,
"Actors": [
"Paul Newman"
]
},
{
"Title": "Bullitt",
"released": 1968,
"color": true,
"Actors": [