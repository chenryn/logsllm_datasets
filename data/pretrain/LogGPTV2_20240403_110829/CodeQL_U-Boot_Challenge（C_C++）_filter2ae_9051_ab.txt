    from Person t
    where exists(string c | t.getHairColor() = c)
    select t
    /*在CodeQL中，以下代码功能同于以上代码，给出只是为了更好地理解*/
    from Person t, string c
    where t.getHairColor() = c
    select t
再来看看类定义中给出的案例
    class OneTwoThree extends int {
      OneTwoThree() { // characteristic predicate
        this = 1 or this = 2 or this = 3
      }
      string getAString() { // member predicate
        result = "One, two or three: " + this.toString()
      }
      predicate isEven() { // member predicate
        this = 2
      }
    }
以上代码定义了一个名为`OneTwoThree`的类，继承于int  
类似于构造函数的部分是`this = 1 or this = 2 or this = 3`  
文档中解释说明这个类中包括了1,2,3这三个值  
运行以下规则，可以发现ott中确实有1，2，3这三个值
    import cpp
     /*from MacroInvocation macInvo
     where macInvo.getMacro().getName().regexpMatch("ntoh.*")
     select macInvo.getExpr()*/
     class OneTwoThree extends int {
        OneTwoThree() { // characteristic predicate
          this = 1 or this = 2 or 3=this
        }
        string getAString() { // member predicate
          result = "One, two or three: " + this.toString()
        }
        predicate isEven() { // member predicate
          this = 2
        }
      }
      from OneTwoThree ott
      select ott
其中还有一个熟悉的单词`predicate`  
这个是在类的主体内定义的谓词，是使用变量来限制类中可能的值的逻辑属性  
举个例子，运行以下规则，就会得到值2
     class OneTwoThree extends int {
        OneTwoThree() { // characteristic predicate
          this = 1 or this = 2 or 3=this
        }
        string getAString() { // member predicate
          result = "One, two or three: " + this.toString()
        }
        predicate isEven() { // member predicate
          this = 2
        }
      }
      from OneTwoThree ott
      where ott.isEven()
      select ott
运行截图：
再更改规则如下：
     class OneTwoThree extends int {
        OneTwoThree() { // characteristic predicate
          this = 1 or this = 2 or 3=this
        }
        string getAString() { // member predicate
          result = "One, two or three: " + this.toString()
        }
        predicate isEven() { // member predicate
          this = 2
        }
      }
      from OneTwoThree ott
      where ott = 2
      select ott
他们会得到相同的结果
也就是说`where ott.isEven()`和`where ott = 2`做出的是相同的限制  
那么我们也就能更好地理解，`predicate`特征是用于限制类中可能值的逻辑属性了
其中`string getAString()`就不必多说，返回一个字符串，其中包含对应值
其中我发现一个很神奇事，不知该如何解释  
我将代码中`this=1`改成`1=this`也会得到一样的结果，没有任何不同或报错  
它和赋值语句不同，但好像又具有相似的功能  
在对变量做限制时，例如`where ott = 2`，它就变成了一个符号，用于对两个值进行比较，这里还好理解，因为sql语法类似  
但是同样在以下代码中
     predicate isEven() { // member predicate
          this = 2
        }
`this=2`也是用于对两个值进行比较  
我认为这是由于`predicate`带来的改变，使得其中的代码和`where`后的代码具有相同得到功能  
如果有更好的见解，还不忘赐教
最后来写题  
题目给了模板和提示  
按照step8中的规则进行编写，`exists`第二个参数放上step8中的where条件  
由于select由题目给出并为Expr的子类，所以我们需要增加一个条件获取宏调用相关表达式  
根据以上`exists`案例可知，我们需要在`mi.getExpr() =` 后面写出他返回值的类型，这样当`mi`为表达式时，就会被选中  
`NetworkByteSwap`是`Expr`的子类，因此
9_class_network_byteswap.ql
    import cpp
    class NetworkByteSwap extends Expr {
        NetworkByteSwap() { 
            exists(MacroInvocation mi | mi.getMacro().getName().regexpMatch("ntoh.*") | mi.getExpr() = this)
         }
    }
    from NetworkByteSwap n
    select n, "Network byte swap"
## Step 10 – Data flow and taint tracking analysis
最后一步，进行数据流分析
先了解以下我们需要查询的函数背景，`ntoh*`函数会返回一个数，并用于`memcpy`的第三个参数`size`，所以我们需要追踪的数据流就是从`ntoh*`到`memcpy`
> 在C/C++写网络程序的时候，往往会遇到字节的网络顺序和主机顺序的问题。 这时就可能用到htons(), ntohl(),
> ntohs()，htons()这4个网络字节顺序与本地字节顺序之间的转换函数
>
>
> memcpy指的是c和c++使用的内存拷贝函数，memcpy函数的功能是从源src所指的内存地址的起始位置开始拷贝n个字节到目标dest所指的内存地址的起始位置中
创建`Config`类，查找此类的数据流并进行污染点追踪分析  
进行数据流分析，我们需要用到，部分代码已经在给出的模板中
    import semmle.code.cpp.dataflow.TaintTracking
    import DataFlow::PathGraph
我们需要写两个`predicate`，一个是来源`isSource`，一个是接收器`isSink`
`isSource`中我们需要查询`ntoh*`宏定义调用的相关表达式，这一步我们已经在`NetworkByteSwap`中写过了  
`isSink`中我们需要查询调用`memcpy`函数时，传入的第三个参数`size`，这一步我们需要新增加的步骤是获取参数
弄清楚这些后，在编写规则时，根据提示完善代码  
我们就能获得10_taint_tracking.ql的答案
    /**
     * @kind path-problem
     */
    import cpp
    import semmle.code.cpp.dataflow.TaintTracking
    import DataFlow::PathGraph
    class NetworkByteSwap extends Expr {
        NetworkByteSwap() { 
            exists(MacroInvocation mi| mi.getMacro().getName().regexpMatch("ntoh(s|l|ll)") | this = mi.getExpr())
         }
    }
    class Config extends TaintTracking::Configuration {
      Config() { this = "NetworkToMemFuncLength" }
      override predicate isSource(DataFlow::Node source) {
        // TODO
        /*获取与此节点对应的表达式（如果有）。
        此谓词仅在表示表达式求值值的节点上具有结果。
        对于从表达式中流出的数据，例如通过引用传递参数时，请使用asDefiningArgument而不是asExpr。*/
        source.asExpr() instanceof NetworkByteSwap
      }
      override predicate isSink(DataFlow::Node sink) {
        // TODO
        exists(FunctionCall fc | fc.getTarget().hasName("memcpy") | sink.asExpr() = fc.getArgument(2))
      }
    }
    from Config cfg, DataFlow::PathNode source, DataFlow::PathNode sink
    where cfg.hasFlowPath(source, sink)
    select sink, source, sink, "Network byte swap flows to memcpy"
## 传送门
[cpp规则语法说明](https://lgtm.com/help/lgtm/console/ql-cpp-basic-example)  
[Java正则模式](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)  
[给出的参考案例：CVE-2018-4259: MacOS NFS vulnerabilties lead to kernel
RCE](https://securitylab.github.com/research/cve-2018-4259-macos-nfs-vulnerability/)（知识点挺多的）  
[codeql-swing](https://bestwing.me/codeql.html)（swing的语言云淡风轻，条理清晰，如沐春风，我的的语言阿巴阿巴阿巴）  
[讨论区](https://github.com/github/securitylab/discussions)