Web3 API. We measure CPU-time of the prover from the sys-
tem clock. Finally, we measure network costs by measuring
the number of bytes transmitted from Piperine’s prover to the
veriﬁer (in case of Piperine) and by measuring the number of
bytes in a raw transaction (in case of our baselines).
e
m
i
t
r
e
v
o
r
P
)
t
n
i
a
r
t
s
n
o
c
/
s
μ
(
 120
 100
 80
 60
 40
 20
 0
212
214
216
218
220
222
Number of Constraints
FIGURE 4—Proof generation costs per constraint the number of con-
straints in a computation Ψ varies. The solid curve is 1150μs/ log(n),
suggested by the n/ log(n) cost of multi-exponentiation algorithms.
6.1 Beneﬁts of Piperine’s techniques
To answer the ﬁrst question, we ﬁrst experimentally establish
that, in Piperine, the prover’s costs depend primarily on the
number of constraints. Thus, we can evaluate the beneﬁts of
our signature optimization by measuring their impact on the
number of constraints generated.
The two principal costs to generate a proof for a com-
putation with n constraints in Piperine are several multi-
exponentiations of size n in a pairing-friendly elliptic curve
and an FFT of size n over the ﬁeld of scalars [15, 18, 24,
47, 67, 81, 83]. Using standard algorithms, such a multi-
exponentiation takes O(n/ log n) time, whilst the FFT takes
O(n log n) time. For computations used in our evaluation,
we measure P’s CPU-time per constraint. Figure 4 depicts
our results that conﬁrm that P’s CPU-time scales roughly as
O(n/ log n), which is consistent with the theoretical predic-
tion that the prover is bottlenecked by multiexponentiations.
This experiment also conﬁrms the beneﬁts of our batching
optimization (§3.2) on the prover’s costs.
Effect of signature optimizations. To examine the impact
of signature optimizations in Piperine, we measure the num-
ber of constraints needed for a transfer state transition (to
transfer currency from one account to another) over the course
of several rounds of optimization. This metric is directly pro-
duced as a part of the process of compiling transfer with
our toolchain. Figure 5 depicts our results. As can be seen,
these optimizations reduce the number of constraints by up
to 1000×. Our individual techniques reduce the number of
constraints required by ≈ 2× compared to a baseline depicted
on the second line. While the latter is a modest improvement,
it directly impacts the number of replicas needed to amortize
the prover’s costs, in the context of RSMs (so any reﬁnement
to reduce the prover’s costs is valuable).
Effect of using a block store. To examine the impact of re-
placing modular exponentiations with hashing in Piperine, we
compile a state machine that performs transfer operations
at a range of batch sizes, with and without the optimization.
The batch size parameter does not impact the improvements,
so we report results for a batch size of 64 transactions. Fig-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
128
naive
careful choice of cryptographic parameters
+ double-scalar multiplication
+ windowing
+ mod N arithmetic
+ limb optimization
# of constraints
> 107
20414
17080
16451
12574
11249
FIGURE 5—Cost of a transfer operation, in terms of number of
algebraic constraints, in Piperine with host of optimizations to the
signature veriﬁcation algorithm. Each line depicts an optimization
atop its prior line and the resulting number of constraints.
prover (x86)
(s / txn)
0.79
0.84
veriﬁer (x86)
(μs / txn)
107
104
veriﬁer (Eth)
(gas / txn)
13241
9301
w/o block store
w/ block store
FIGURE 6—Effects of the block store optimization on the CPU
costs of the prover and the veriﬁer (batch size is 64). The veriﬁer on
Ethereum beneﬁts signiﬁcantly while slightly increasing the prover’s
costs. The veriﬁer on x86 beneﬁts only slightly (see text).
ure 6 depicts the per-transaction CPU costs for the prover and
the veriﬁer; we also report gas required to execute the veriﬁer
running as a smart contract on Ethereum. As can be seen, for
the Ethereum veriﬁer, the costs are reduced by ≈ 3.3×, whilst
the cost for the prover does not increase substantially. The
veriﬁer on x86 does not beneﬁt from the optimization. This
is because the cost of multi-exponentiation is O(n/ log n),
whilst the cost of hashing for the block store is O(n) with a
smaller implied constant. However, for larger input sizes, we
expect the block store optimization to provide a beneﬁt.
6.2 Beneﬁts of Piperine for delegating state machines
We now assess the regimes in which it is cheaper to employ
delegation than naive reexecution in RSMs. Our focus here
is on resource costs (CPU and network costs) and cross-over
points (the number of replicas necessary to make the total
cost of the Piperine-enhanced RSM, including the prover’s
costs, to be cheaper than a baseline RSM).
We run Piperine and our baseline on a synthetic workload
of create and transfer operations, modeled on the trans-
action history of a popular ERC-20 token [25]. For Piperine,
we experiment with a range of batch sizes for transfer
and measure the per-transaction CPU costs to the prover and
the veriﬁer, and to our baseline. We also measure the size
of a transaction (in bytes) processed by the replicated state
machine under Piperine and the baseline.
CPU costs and cross-over points. Figure 7 depicts the per-
transaction CPU costs of the prover, the veriﬁer, and the
baseline for varying batch sizes. As expected, the baseline
CPU cost does not decrease with batch size whereas the
veriﬁer beneﬁts signiﬁcantly from batching. Furthermore, for
batch sizes ≥ 64 the Piperine V has lower CPU costs than
batch size
(#txns)
1
4
16
64
256
1024
baseline
(μs/txn)
120
116
115
118
118
117
veriﬁer
(μs/txn)
3799
931
275
107
63
42
prover
(s/txn)
1.34
1.02
0.88
0.79
0.78
0.75
cross-over
(#replicas)
–
–
–
68365
14280
10072
FIGURE 7—The per-transaction CPU cost of the prover, the veriﬁer,
and the baseline with varying batch sizes. We also depict cross-
over points: the number of replicas needed to make the Piperine-
enhanced RSM (including the prover’s costs) to incur lower CPU
costs than a replicated baseline. The veriﬁer beneﬁts signiﬁcantly
from batching while the prover’s gains are modest. Beyond batch
size of 64, Piperine-enhanced RSM is cheaper than the baseline.
batch size
(#txns)
1
4
16
64
256
1024
baseline
(bytes)
224
224
224
224
224
224
Piperine
(bytes)
588
259
147
132
129
80
savings
(×)
–
–
1.5
1.7
1.7
2.8
FIGURE 8—The per-transaction network costs of Piperine and the
baseline with varying batch sizes. At the largest batch size, the per-
transaction network costs to propagate a transaction to the replicated
system is 2.8× lower in Piperine than the baseline.
the baseline. At large batch sizes, the veriﬁer’s CPU costs are
lower than that of the baseline by about 2.7×. Although the
prover’s CPU costs are ≈ 6,300–11,000× higher than that
of the baseline, there exists a cross-over point (in terms of
the number of replicas in an RSM) at which the CPU cost of
the prover and the replicated veriﬁer is lower than the CPU
cost of the replicated baseline. With a batch size of 1024, the
cross-over point is about 10,000 replicas.
Network costs. Figure 8 depicts the size of a transaction
processed by the RSM in Piperine and the baseline. Beyond a
batch size of 16, Piperine always incurs lower network costs
than the baseline. This is because Piperine compresses each
transaction to a hash and a minimal speciﬁcation of its impact
on the state. At a batch size of 1024, the savings are a factor
of 2.8, which can be signiﬁcant in blockchains [36].
6.3 Beneﬁts of Piperine for large-scale RSMs
To answer the third question, we run a set of experiments
similar to the previous subsection, except that we experiment
with the Piperine veriﬁer running as a smart contract. Further-
more, instead of an optimistic baseline based on libsodium,
the baseline here is an ERC-20 smart contract [79].
End-to-end per-transaction costs in gas and USD. Be-
sides the metrics used in the last subsection (CPU costs,
network transfers, etc.), we use an additional metric—
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
129
Ethereum’s gas (§4)—that captures the end-to-end costs of
the prover and the veriﬁer in a uniﬁed manner. Although the
prover runs on a cluster of machines in the cloud and billed
in USD for the total machine cost (CPU, network, storage,
etc.), the prover’s cost can be converted to gas because gas is
fungible in USD. It might seem that this conversion must be
done with care since the exchange rate between gas and USD
is highly volatile. Since 2017, the daily average price for 106
gas has varied between $0.80 and $100, with intra-day volatil-
ity of ≥ 10×. As shown below, perhaps surprisingly, picking
any rate in the above range does not signiﬁcantly affect our
results. This is because the total cost of a Piperine-enhanced
ERC-20 contract is dominated by the veriﬁer’s gas costs, so
the prover’s costs in USD (when converted to gas) do not
substantially affect the end-to-end costs of the system. Below,
we conservatively assume an exchange rate of $1 for 106 gas.