n
i
d
o
c
e
D
20
15
10
5
0
Reed-Solomon
LDPC
0
20
80
100
60
40
N (and M)
Hodgepodge
i
)
s
(
e
m
T
g
n
i
d
o
c
e
D
20
15
10
5
0
Reed-Solomon
LDPC
0
20
80
100
60
40
N (and M)
Regional
i
)
s
(
e
m
T
g
n
i
d
o
c
e
D
20
15
10
5
0
Reed-Solomon
LDPC
0
20
80
100
60
40
N (and M)
Slow Regional
Figure 8. Total Decoding Time in Best Performances
spent downloading and decoding in the best performing instances of each distribution. Note that although
one might think that the computational overhead would be similar for equal values of n and m, in the Re-
gional distribution, the computational overhead is lower than the rest because the fastest instances prefer
data blocks to coding blocks. In general, these Figures clearly show that Reed-Solomon codes require more
time to decode than LDPC codes. However, since the decoding of sets can overlap with the downloading
of subsequent sets, the cost of decoding will negatively impact performance only when the decoding time
surpasses the downloading time, and when the last sets of the ﬁle retrieved are being decoded.
7 Conclusions
When downloading algorithms are applied to a wide-area ﬁle system based on erasure codes, additional
considerations must be taken into account. First, performance depends greatly on the interactions of en-
coding rate, set size, and ﬁle distribution. The predominant trend in our experiments is that performance
15
improves as the rate of encoding decreases, and that performance ultimately diminishes as n increases, but
to a somewhat lesser extent, it appears that larger sets do have an advantage in terms of download time
depending on the distribution of the ﬁle. Performance amounts to a balance between the time it takes to
download the necessary number blocks and the time it takes to decode the blocks that have been retrieved,
and thus distribution, which is intimately related to download time, strengthens and weakens the trends that
arise from encoding rate and set size.
Though less thoroughly explored in this work, the type of erasure codes being used also has interac-
tions with encoding rate, set size, and distribution, that shift performance. LDPC codes outperform Reed-
Solomon codes in large sets because LDPC decoding is very inexpensive, but LDPC codes also require more
blocks than Reed-Solomon codes and mildly limit which blocks can be used.
In the end, given a speciﬁc application or wide-area ﬁle system based on erasure codes, decisions about
set size, encoding rate, and coding scheme should be based on the following issues: ﬁrst, what kind of
distribution is being used, and can it be changed; second, what level of fault tolerance is necessary, and what
set size and coding scheme can achieve this level given the available physical storage; last, given the set size
and coding scheme pairs that meet storage constraints and fault tolerance requirements, which has the best
performance and the best ability to scale in ways that the ﬁle system is likely to scale in the future.
8 Acknowledgments
This material is based upon work supported by the National Science Foundation under grants CNS-
0437508, ACI-0204007, ANI-0222945, and EIA-9972889. The authors thank Micah Beck and Scott Atch-
ley for helpful discussions, and Larry Peterson for PlanetLab access.
References
[1] M. S. Allen and R. Wolski. The Livny and Plank-Beck Problems: Studies in data movement on the
computational grid. In SC2003, Phoenix, November 2003.
[2] A. Bassi, M. Beck, T. Moore, and J. S. Plank. The logistical backbone: Scalable infrastructure for
global data grids. In Asian Computing Science Conference 2002, Hanoi, Vietnam, December 2002.
[3] M. Beck, T. Moore, and J. S. Plank. An end-to-end approach to globally scalable network storage. In
ACM SIGCOMM ’02, Pittsburgh, August 2002.
16
[4] J. Byers, M. Luby, M. Mitzenmacher, and A. Rege. A digital fountain approach to reliable distribution
of bulk data. In ACM SIGCOMM ’98, pages 56–67, Vancouver, August 1998.
[5] B. Cohen.
Incentives build robustness in BitTorrent.
In Workshop on Economics of Peer-to-Peer
Systems, Berkely, CA, June 2003.
[6] R. L. Collins and J. S. Plank. Downloading replicated, wide-area ﬁles – a framework and empirical
evaluation.
In 3rd IEEE International Symposium on Network Computing and Applications (NCA-
2004), Cambridge, MA, August 2004.
[7] Paul J.M. Havinga. Energy efﬁciency of error correction on wireless systems, 1999.
[8] J. Kubiatowicz, D. Bindel, Y. Chen, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon,
W. Weimer, C. Wells, and B. Zhao. Oceanstore: An architecture for global-scale persistent storage. In
Proceedings of ACM ASPLOS. ACM, November 2000.
[9] Witold Litwin and Thomas Schwarz. LH* RS : A high-availability scalable distributed data structure
using reed solomon codes. In SIGMOD Conference, pages 237–248, 2000.
[10] M. Luby, M. Mitzenmacher, A. Shokrollahi, D. Spielman, and V. Stemann. Practical loss-resilient
codes. In 29th Annual ACM Symposium on Theory of Computing,, pages 150–159, El Paso, TX, 1997.
ACM.
[11] M. G. Luby, M. Mitzenmacher, M. A. Shokrollahi, and D. A. Spielman. Efﬁcient erasure correcting
codes. IEEE Transactions on Information Theory, 47(2):569–584, February 2001.
[12] J. S. Plank.
Improving the performance of coordinated checkpointers on networks of workstations
using RAID techniques. In 15th Symposium on Reliable Distributed Systems, pages 76–85, October
1996.
[13] J. S. Plank. A tutorial on Reed-Solomon coding for fault-tolerance in RAID-like systems. Software –
Practice & Experience, 27(9):995–1012, September 1997.
[14] J. S. Plank, A. Bassi, M. Beck, T. Moore, D. M. Swany, and R. Wolski. Managing data storage in the
network. IEEE Internet Computing, 5(5):50–58, September/October 2001.
[15] J. S. Plank and Y. Ding. Note: Correction to the 1997 tutorial on reed-solomon coding. Technical
Report CS-03-504, University of Tennessee, April 2003.
17
[16] J. S. Plank and M. G. Thomason. A practical analysis of low-density parity-check erasure codes for
wide-area storage applications. In DSN-2004: The International Conference on Dependable Systems
and Networks. IEEE, June 2004.
[17] S. Rhea, C. Wells, P. Eaton, D. Geels, B. Zhao, H. Weatherspoon, and J. Kubiatowicz. Maintenance-
free global data storage. IEEE Internet Computing, 5(5):40–49, 2001.
[18] H. Weatherspoon and J. Kubiatowicz. Erasure coding vs. replication: A quantitative comparison. In
First International Workshop on Peer-to-Peer Systems (IPTPS), March 2002.
[19] S. B. Wicker and S. Kim. Fundamentals of Codes, Graphs, and Iterative Decoding. Kluwer Academic
Publishers, Norwell, MA, 2003.
[20] R. Wolski, N Spring, and J. Hayes. The network weather service: A distributed resource performance
forecasting service for metacomputing. Future Generation Computer Systems, 15(5):757–768, Octo-
ber 1999.
[21] Z. Zhang and Q. Lian. Reperasure: Replication protocol using erasure-code in peer-to-peer storage net-
work. In 21st IEEE Symposium on Reliable Distributed Systems (SRDS’02), pages 330–339, October
2002.
9 Appendix
Below we list the ﬁve LDPC codes used for the experiments. They are speciﬁed as the edge lists of each
left-hand node.
(cid:15) n = 5, m = 5: f(0, 2, 3), (2, 3, 4), (0, 1, 4), (1, 3, 4), (0, 1, 2)g. Overhead = 5.464. This is the graph
pictured in Figure 1.
(cid:15) n = 10, m = 10: f(0, 1, 3, 8), (0, 2, 6), (1, 2, 4, 9), (2, 3, 4, 6), (3, 5, 7, 8), (1, 2, 7, 8), (6, 8, 9), (1, 5,
6), (0, 5, 7, 9), (0, 1, 4)g. Overhead = 11.416.
(cid:15) n = 20, m = 20: f(3, 4, 5, 6, 8, 10, 14, 15), (0, 2, 6, 11, 17), (3, 6, 7, 9, 10, 15, 16, 17), (8, 10, 15,
17, 19), (2, 6, 9, 10, 14), (1, 2, 4, 6, 9, 10, 12, 15), (1, 8, 9, 12, 15), (4, 9, 10, 15, 19), (3, 6, 9, 10, 11,
17, 19), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (0, 1, 5, 6, 8, 10, 12, 15, 16,
18), (0, 1, 10, 14, 15), (2, 6, 10, 12, 13, 15), (2, 6, 15, 16, 18), (1, 6, 10, 15, 16), (1, 6, 10, 13, 14, 15),
(3, 5, 6, 10, 15, 17), (2, 7, 10, 15), (6, 10, 11, 15), (6, 7, 10, 13, 15, 17, 18)g. Overhead is 23.884.
18
(cid:15) n = 50, m = 50: f(1, 4, 9, 12, 14, 15, 16, 19, 23, 25, 29, 32, 46), (1, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15,
16, 17, 18, 19, 23, 25, 29, 31, 35, 41, 45, 46, 47, 49), (1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 17, 18, 19,
23, 25, 35, 36, 40, 41, 45, 46, 47), (1, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25, 27, 28, 29, 33, 35,
36, 39, 44, 45, 46, 49), (1, 3, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 25, 26, 28, 29, 33, 35, 41, 43,
45, 46, 47), (1, 3, 4, 6, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 23, 25, 28, 33, 34, 35, 44, 45, 46, 47, 49),
(0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 35, 36, 41, 45, 46, 47, 49), (1, 2,
3, 4, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 28, 29, 30, 33, 34, 35, 46, 47, 49), (1, 4, 6,
9, 11, 12, 13, 14, 15, 16, 18, 19, 23, 25, 27, 32, 34, 40, 45, 46, 48, 49), (1, 3, 4, 9, 14, 16, 18, 25, 27,
46, 49), (1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 23, 24, 25, 27, 29, 34, 35, 36, 38, 40, 41,
45, 46, 47, 49), (4, 6, 14, 46), (1, 4, 5, 6, 7, 9, 12, 14, 15, 16, 18, 19, 20, 21, 22, 25, 27, 28, 33, 34, 35,
41, 42, 44, 45, 46, 47, 49), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49), (1, 4, 9,
11, 14, 16, 18, 19, 22, 23, 25, 27, 46, 49), (4, 12, 18, 25), (1, 7, 14, 16, 23, 46, 49), (0, 1, 3, 4, 5, 6, 9,
14, 16, 17, 18, 19, 22, 25, 27, 28, 31, 35, 46), (1, 3, 4, 5, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 22, 25, 27,
33, 35, 37, 41, 46, 49), (1, 3, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 22, 23, 25, 28, 29, 30, 33, 35, 46,
47, 48, 49), (4, 7, 9, 16, 35, 46), (1, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 25, 29, 35, 40, 43, 45, 46,
49), (0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33,
34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), (1, 3, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 23,
25, 26, 27, 28, 34, 35, 36, 39, 41, 46, 49), (1, 3, 4, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 27,
28, 29, 31, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 49), (1, 4, 5, 6, 15, 16, 18, 19, 35, 46, 49), (1,
3, 4, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 22, 23, 27, 28, 29, 34, 35, 46, 47, 48), (1, 3, 4, 9, 14, 15, 16,
17, 18, 19, 22, 23, 25, 29, 35, 41, 44, 45, 46, 47, 48, 49), (1, 2, 4, 6, 7, 9, 12, 13, 14, 15, 16, 18, 19,
22, 23, 24, 25, 27, 28, 34, 35, 36, 46, 47, 49), (1, 3, 4, 9, 12, 14, 15, 16, 18, 19, 23, 25, 41, 46), (0, 1,
2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36,
39, 40, 41, 42, 46, 47, 49), (1, 9, 16, 18, 25, 31, 46, 47), (1, 3, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 22,
23, 25, 27, 29, 35, 41, 45, 46, 49), (1, 3, 7, 16, 19, 25, 41, 45), (1, 3, 4, 14, 16, 19, 36, 46), (1, 3, 4, 9,
12, 14, 15, 16, 18, 19, 22, 23, 24, 25, 26, 28, 31, 34, 35, 46, 47, 49), (1, 4, 6, 18), (1, 4, 16, 18, 35, 36,
44, 46, 49), (1, 4, 6, 12, 14, 16, 19, 22, 46, 47), (1, 4, 6, 14, 18, 19, 22, 35, 46, 49), (1, 3, 4, 7, 8, 9, 11,
12, 14, 15, 16, 17, 18, 19, 23, 25, 27, 29, 34, 35, 39, 41, 42, 45, 46, 47, 48, 49), (1, 4, 6, 14, 15, 16,
18, 19, 28, 35, 46, 47), (1, 4, 11, 16, 18, 46), (1, 3, 4, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 25,
27, 28, 33, 35, 36, 40, 41, 45, 46, 47, 48, 49), (4, 9, 16, 18, 19, 47), (3, 4, 9, 14, 16, 18, 19, 34), (1, 4,
19
18, 19, 25, 35, 45, 46), (1, 4, 6, 9, 14, 15, 16, 18, 19, 22, 29, 35, 41), (1, 3, 4, 9, 11, 12, 13, 14, 15, 16,
18, 19, 21, 22, 23, 25, 27, 28, 29, 34, 35, 41, 45, 46, 49), (6, 16, 22, 35)g. Overhead is 63.96944.
(cid:15) n = 100, m = 100: f(6, 7, 18, 22, 31, 78), (8, 22, 45, 54, 57, 63, 73, 74), (1, 25, 28, 32, 33, 68, 72),
(4, 11, 12, 13, 18, 30, 46), (4, 16, 25, 27, 34, 78), (2, 31, 39, 52, 66, 78, 98), (25, 31, 34, 42, 72, 87),
(3, 10, 16, 25, 32, 41, 97), (0, 4, 7, 18, 53, 69, 78), (2, 7, 52, 55, 74, 75, 82, 88), (10, 43, 59, 64, 67,
87, 99), (23, 26, 48, 55, 62, 68, 88), (0, 7, 10, 25, 36, 51, 79), (15, 24, 48, 75, 84, 97), (4, 16, 18, 38,
61, 70, 77, 96), (39, 53, 65, 76, 78, 91, 94), (7, 18, 25, 55, 62), (4, 14, 16, 18, 25, 48, 54, 80), (34, 47,
54, 55, 61, 75), (10, 20, 22, 48, 60, 62, 78), (14, 29, 32, 34, 48, 51, 66), (14, 15, 34, 50, 51, 91), (1, 7,
39, 61, 83, 95), (7, 18, 27, 34, 63, 69, 95), (7, 11, 14, 27, 28, 55, 73), (7, 25, 48, 58, 86, 90, 95), (0,
10, 34, 35, 64, 89, 95), (5, 10, 20, 31, 68, 71, 84, 90), (28, 40, 48, 54, 55, 80, 84, 96), (3, 7, 19, 37, 40,
59, 94), (7, 15, 17, 20, 27, 83), (9, 21, 26, 31, 54, 78, 85, 97), (24, 25, 29, 48, 69, 81, 85), (21, 41, 52,
55, 62, 65), (16, 34, 65, 85, 86, 89, 99), (3, 9, 18, 24, 25, 83, 91), (3, 7, 10, 18, 48, 68, 94, 98), (31,
37, 49, 58, 72, 78), (6, 7, 10, 42, 47, 80, 92), (13, 18, 36, 50, 51, 67, 72), (14, 55, 57, 72, 75, 77, 85,
89), (31, 39, 45, 70, 72, 79, 94), (4, 6, 14, 25, 41, 79, 84), (13, 20, 34, 40, 46, 51, 60), (3, 19, 31, 34,
42, 65, 71, 73), (12, 19, 27, 44, 58, 65, 70, 72), (9, 17, 30, 44, 58, 64, 70), (1, 40, 55, 81, 83, 89, 92),
(18, 23, 29, 38, 63, 65, 77), (21, 38, 66, 72, 81, 82, 92), (8, 25, 34, 81, 94, 98), (17, 34, 43, 52, 55, 76,
77), (9, 25, 32, 41, 48, 55, 56, 70), (0, 6, 13, 19, 46, 63, 92), (25, 48, 49, 50, 85, 88, 92), (24, 26, 49,
52, 55, 84, 86, 99), (4, 25, 34, 38, 48, 57, 97), (5, 10, 13, 17, 31, 34, 58), (12, 25, 31, 45, 57, 65, 82,
92), (10, 29, 44, 77, 82, 87, 96), (8, 11, 31, 34, 60, 88, 96), (10, 12, 21, 35, 37, 55, 78, 82), (3, 21, 46,
47, 48, 74, 78, 96), (36, 38, 46, 48, 59, 83), (1, 4, 31, 40, 46, 78, 81), (1, 18, 34, 39, 57, 71, 98), (4,
31, 33, 41, 53, 67, 72), (16, 17, 18, 23, 40, 50, 85), (5, 7, 35, 54, 65, 72, 75), (5, 8, 26, 30, 31, 55, 94),
(4, 44, 48, 56, 60, 61, 78), (27, 31, 65, 71, 76, 78, 88, 97), (2, 23, 26, 32, 37, 49, 78), (25, 42, 72, 77,
79, 83), (4, 15, 25, 51, 76, 93, 99), (4, 18, 56, 64, 65, 72), (4, 36, 41, 48, 59, 76, 80), (15, 18, 24, 28,
33, 65, 72), (7, 28, 34, 47, 71, 74, 99), (0, 9, 10, 25, 43, 44, 60), (4, 6, 39, 72, 73, 75, 89), (7, 12, 26,
31, 33, 34, 48, 66), (18, 25, 31, 34, 65, 72, 90), (6, 10, 13, 36, 43, 49, 61), (1, 28, 33, 35, 41, 48, 78,
84), (7, 19, 66, 79, 93, 98), (2, 23, 25, 50, 58, 60, 63), (10, 42, 45, 65, 78, 87, 91), (2, 8, 10, 18, 22,
53, 72), (53, 55, 62, 65, 80), (7, 35, 47, 71, 90, 92), (0, 10, 31, 56, 65, 72), (4, 48, 57, 65, 88), (20, 24,
34, 66, 72, 78, 82), (30, 31, 55, 65, 90, 93), (4, 32, 45, 55, 68, 72, 76, 86), (18, 34, 35, 43, 64, 72, 99),
(7, 18, 20, 37, 72, 78, 93), (7, 11, 22, 65, 69, 95), (4, 10, 18, 31, 67, 73)g. Overhead is 114.81.
20