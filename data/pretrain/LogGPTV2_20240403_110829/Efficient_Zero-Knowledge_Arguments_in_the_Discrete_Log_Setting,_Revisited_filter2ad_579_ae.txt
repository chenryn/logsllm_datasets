and suitably (re)defined
It is straightforward to encode arithmetic circuits (ACs) as sys-
tems of quadratic equations. Doing this allows for ACs built from
quadratic gates, i.e. gates whose input-output behaviour is described
by a quadratic equation.
4.2 Arithmetic circuits and rank 1 constraint
systems
⊤
⊤
⊤
⊤
a)(b
Rank 1 constraint systems (R1CS) are systems of equations of the
p . Evidently, these
form (w
⊤.⁷
are special cases of quadratic equations with (cid:0) = ab
+ e1c
Arithmetic circuit satisfiability can be encoded in R1CS, c.f. [6].
w = 0, where a; b; c 2 Fn
w)(cid:0)c
The gates testable by one R1CS equation allow a single “multi-
plication”. As we saw in the introduction, quadratic equations are
⊤
more flexible. For example, the inner product x
y is a single qua-
dratic gate. To the best of our knowledge, n gates are necessary to
encode this in R1CS (essentially one per xiyi multiplication). Thus,
quadratic gates enable new optimisations. Indeed, all “AC to R1CS”
optimisations (and more), are applicable for “AC to QE”.
⊤
⊤
∑
∑
4.3 The verification strategy
Verifying that a system of quadratic gates is satisfied is easy given
the witness w, in our case the wire assignments of the AC, and
equations (cid:0)g (the gate g encoded as a matrix). Just check w
(cid:0)gw =
0 for all g 2 G. By batching this can be sped up: Pick (rg)g   χ#G
g2G rg(cid:0)g as the
from a testing distribution. Then compute (cid:0) B
“batched statement”. Finally, check if w
(cid:0)w = 0.
(cid:0)w = 0 where (cid:0) B
We run this strategy in a commit-then-prove manner. First, com-
mit to the witness w. Then let the verifier pick testing randomness
g2G rg(cid:0)g is the
(rg)g and prove that w
(cid:0)w = ⟨w; (cid:0)w⟩ is an inner prod-
“batched statement”. Note that w
uct. Hence, we require a zero-knowledge inner-product argument.
For technical reasons, we cannot generate a commitment to (cid:0)w
efficiently (prior to knowing (cid:0)). Therefore, the prover first com-
mits to w as [cx ] = Comck1 (w). Then he obtains (cid:0) and commits to
(cid:0)w as [cy ] = Comck2 ((cid:0)w). Then the prover carries out the inner
product argument. He must also prove that the commitments [cx ]
and [cy ] open to values x = w and y = (cid:0)w as promised. Again,
we use (linear) batching to shorten the proof for y = (cid:0)x. Namely,
⊤
⊤
⁷ The name R1CS may be misleading, since (cid:0) can have (tensor) rank 2, i.e. the (tensor)
rank of (cid:0) is (cid:20) 2 for R1CS. Nevertheless, we follow this standard naming convention.
to check y = (cid:0)x, the verifier picks random s   χn (after [cx ]; [cy ]
and hence x, y are fixed) and the prover proves 0 = ⟨(cid:0)x (cid:0) y; s⟩.
Instead of two inner product arguments (for ⟨x; y⟩ = 0 and
⟨(cid:0)x (cid:0) y; s⟩ = 0) we batch verify again: The verifier picks random-
ness α and the prover proves knowledge of openings x; y such that,
⊤
⊤
s⟩
⟨x (cid:0) αs; y + α(cid:0)
s⟩ (cid:0) ⟨s; y⟩) (cid:0) α 2⟨s; (cid:0)
(⟨x; (cid:0)
s⟩ = ⟨x; y⟩ + α
⊤
= ⟨x; y⟩ + α⟨(cid:0)x (cid:0) y; s⟩ (cid:0) α 2⟨s; (cid:0)
⊤
= (cid:0)α 2⟨s; (cid:0)
s⟩ C t
!
⊤
s⟩
(4.1)
where t is fixed by the random choices of the verifier. If x; y; (cid:0); s
are fixed, the lemma of Schwartz–Zippel can be applied to the poly-
nomial in α. If α   S, the probability that Eq. (4.1) holds but
⟨x; y⟩ , 0 or ⟨(cid:0)x (cid:0) y; s⟩ , 0 is 2/#S. If s is chosen from a testing
distribution χn with error δsnd(χn ), the probability that (cid:0)x(cid:0)y , 0
is at most δsnd(χn ). Thus, this strategy is sound. To instantiate it,
we need a zero-knowledge inner product argument.
4.4 Zero-knowledge inner product argument
Now, we show how to construct a zero-knowledge inner product
argument (IPA). We first recall [10, 13], from a high level. We iden-
tify [13] as a linear combination of protocols. We achieve HVZK
similar to Protocol 3.8 by masking the witness, but we also exploit
redundancy (or kernel) guideline. Addition of zero-knowledge adds
a single round, where one group element and one challenge are
sent. For technical reasons we have a base case at n = 8.
′′
Inner product argument (IPA). First, we describe the IPA fol-
Our setting is as follows: We have a CRS crs = ([д
′; д
4.4.1
lowing [10, 13]. For simplicity, we ignore zero-knowledge.
′
]; [д
]; [Q])
′′; Q] 2 G2n+1
for which finding a non-trivial kernel element of [д
is hard. In other words, these are three independent (or one large
three-split) Pedersen commitment keys.
′′
w with
′′⟩ = t. The idea and argument Protocol 3.8 allow to recur-
⟨w
sively shrink our statement. After one recursion step, we obtain
⟩ (for j (cid:0) i = (cid:6)1),
⟨bw
′;bw
so that the verifier can computebt, analogous to [u(cid:6)1] in Section 3.4,
′′⟩ =bt. The prover sends v(cid:6)1 = ⟨w
Naively, one proves knowledge of openings of c
′; w
′
w and c
To save communication, we use a linear combination of Proto-
col LMPAnoZK in our argument. Using the same challenge (x; y; z)
for both runs does not work. But when swapping the challenge for,
say the first instance, we see that the linear combination works.
′′
j
; w
′
i
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2102′
w
w
],
[д
′′
′′
⊤
⊤
]w
′
1
′′
2
⟨x
′; y
′′
2(cid:0)i
′; w
′′⟩ + ⟨w
′′⟩ = ξ⟨w
⟩ (for i = 1; 2).
Concretely, let x = (1; ξ ), y = (ξ ; 1). Then
; w
′
′′
⟩ + ξ 2⟨w
⟩
; w
2
1
′′⟩ = t
′; w
Thus, analogous to [u0] = [t] in LMPAnoZK, the term ⟨w
′ with flipped
is preserved. Therefore we run the first protocol for w
′′ with challenge
challenge (y; x), and the second protocol for w
(x; y). Now, as in Protocol LMPAnoZK, it suffices to send vj(cid:0)i B
⟨w
′
; w
i
The argument described above is a hybrid of [10] and [13]. For
security, we need that “commitment merging” (see Remark 3.9),
which the linear combination of protocols induces, still is binding.
To obtain [13], we simply commit to vℓ as well (using [Q]), and send
the combined commitment, i.e. apply again a linear combination.
′′; Q]. Thus instead
This “merged” commitment key is now [д
′′
∓1], [v∓1Q]), we
of sending two messages thrice (namely [u
′′
only send the two “merged commitments” [u(cid:6)1] = [u
∓1] +
(cid:0)1; ξ ) we prefer x = (1; ξ )
[v∓1Q]. Unlike [13], which uses x = (ξ
since exponentiation with 1 is free.
′′; Q] where [д
′
′; д
We sketch the protocol. The CRS is crs = [д
] 2 G1(cid:2)n and [Q] 2 G are random. To prove
′′
9w
′′⟩ = t;
′
′; w
+ [д
]w
p : [c] = [д
′
′′
the prover computes [u
ℓ as in Protocol 3.8, but with chal-
ℓ], [u
lenges flipped as described above. For ℓ = (cid:6)1, the prover sends
′′
(cid:0)ℓ] + v(cid:0)ℓ[Q]. Both parties compute the reduced
[uℓ] B [u
statement, and another iteration (or base case) is run.
+ t[Q] ^ ⟨w
′; д
′
(cid:6)1], [u
′
(cid:6)1] + [u
′
ℓ] + [u
′′ 2 Fn
The resulting protocol is called IPAnoZK, see the full version [31]
for a full description. It is µ-special sound (with µ = (2; 4; : : : ; 4))
′; д
for finding a witness or a non-trivial element in the kernel of [д
And it has short-circuit extraction with µ
= (1; 2; : : : ; 2). The
proof is essentially as in [10, 13].
4.4.2 Going zero-knowledge. Making the inner-product argument
zero-knowledge can be done in many ways. To be competetive
with Bulletproofs [13], we directly mask the witness. This is prob-
lematic, since the scalar product is non-linear. Consequently, our
(initial) approach only works under some (mild) constraints.
As mentioned above, the problem with using masking random-
′′⟩ is the non-linearity: Sending
′
ness and proving ⟨w
+ r
′′⟩ to the verifier is not enough. So we need to send
′; r
only tr = ⟨r
′′⟩ or some other “error term” to correct the
′′⟩ or ⟨r
′; w
′; r
also ⟨w
non-linearity. Then we have to show that these terms don’t expose
′,
“information” about the witness. In particular, sending βw
+ r
which was possible in Section 3.3, seems impossible.
′; w
′; w
Fortunately, we already saw that the recursive argument only
needs a small amount of randomness to conceal the witness. We
exploit this now to show that the sketched masking almost yields
zero-knowledge. Instead of sending the error terms, we pick ran-
domness with the “kernel guideline” in mind:
′; r
′
′; r
In other words, we pick randomness which does not induce errors.
′′ to the ver-
Thus, the prover only has to send [tr ] = [д
ifier. We first outline an almost zero-knowledge argument, using
augmented masking sets M+
′′⟩ = 0 = ⟨r
′
′′⊤
′ 2 ker(w
′′ 2 ker(w
′⊤
′; w
), i.e. ⟨r
′⊤
) \ ker(r
n which are defined later.
′′⟩ = 0.
), i.e. ⟨w
(cid:15) r
(cid:15) r
′′⟩.
+ [д
+ r
′′
′′
]r
]r
′
′′; Q].
′
Protocol 4.1 (IPAalmZK). The following is an inner product argu-
ment with the same statement, witness and notation as in IPAnoZK.
(
)
]r
′⊤
′⊤
)\
′′⊤
′
′   ker(w
′
n . Compute [cr ] B [д
(cid:15) P ! V: Pick r
)\M+
n and r
′′
M+