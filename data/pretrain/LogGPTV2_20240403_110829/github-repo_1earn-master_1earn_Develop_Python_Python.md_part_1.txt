# Pyhon
---
**推荐工具/资源**
- [pycharm](https://www.jetbrains.com/pycharm/)
- [vscode](https://code.visualstudio.com/)
- [jackzhenguo/python-small-examples](https://github.com/jackzhenguo/python-small-examples)
---
## 安装/配置/报错
### 安装
**yum 安装**
```bash
yum install epel-release
或
wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
yum -y install python36 python36-devel
wget https://bootstrap.pypa.io/get-pip.py	## 安装pip3
python3 get-pip.py
```
**源代码编译方式安装**
安装依赖环境
```bash
yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel
```
下载Python3
`wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz`
安装python3
```bash
mkdir -p /usr/local/python3
tar zxvf Python-3.6.1.tgz
cd Python-3.6.1
./configure --prefix=/usr/local/python3
make
make install 或者 make && make install
```
添加到环境变量
```bash
ln -s /usr/local/python3/bin/python3 /usr/bin/python3
```
```vim
vim ~/.bash_profile ## 永久修改变量
PATH=$PATH:/usr/local/python3/bin/
```
`source ~/.bash_profile	`
检查 Python3 及 pip3 是否正常可用
```bash
python3 -V
pip3 -V
```
---
### 打包
**Pyinstaller**
安装 Pyinstaller
```bash
pip3 install PyInstaller
```
使用 Pyinstaller
```bash
python3 PyInstaller.py -F test.py
或
python -m PyInstaller -F test.py
## -F 表示生成单个可执行文件
## -w 表示去掉控制台窗口,这在GUI界面时非常有用.不过如果是命令行程序的话那就把这个选项删除吧
## -p 表示你自己自定义需要加载的类路径,一般情况下用不到
## -i 表示可执行文件的图标
```
文件中使用了第三方库的打包方式
在打包之前务必找到第三方库的包,把包复制到到跟 test.py 同目录下,然后再使用以上2种方式打包,否则会打包失败或者即使打包成功,程序也会闪退.
exe文件生成
如果程序打包过程没有报错,则会生成3个文件夹(有时候是2个),其中名为 dist 的文件夹中会有一个 test.exe 文件,运行一下,如果没有问题就打包成功,可以把这个 exe 文件单独拿出去用,其他的生成的文件夹可以删掉了.
**py2exe**
py2exe 就是将 python 代码打包成 windows 可执行程序的一个 python 开源项目。
安装
```
python -m pip install py2exe
```
基础方式 setup.py
```py
from distutils.core import setup
import py2exe
import sys
sys.argv.append('py2exe')
setup(console=["yourcode.py"])
```
```
python setup.py
```
进阶方法
```py
from distutils.core import setup
import py2exe
import sys
## 允许程序通过双击的形式执行。
sys.argv.append('py2exe')
py2exe_options = {
        ## 选项中 “includes” 是需要包含的文件，这里的”sip”是 PyQt 程序打包时需要添加的，如果不是 PyQt 程序不需要此项。
        "includes": ["sip"],
        ## “dll_excludes”是需要排除的 dll 文件，这里的”MSVCP90.dll”文件，如果不排除的话会报 error: MSVCP90.dll: No such file or directory 错误。
        "dll_excludes": ["MSVCP90.dll",],
        ## “compressed”为 1，则压缩文件
        "compressed": 1,
        ## “optimize”为优化级别，默认为 0。
        "optimize": 2,
        ## “ascii”指不自动包含 encodings 和 codecs。
        "ascii": 0,
        ## bundle_files”是指将程序打包成单文件（此时除了 exe 文件外，还会生成一个 zip 文件。如果不需要 zip 文件，还需要设置 zipfile = None）
        ## 1 表示 pyd 和 dll 文件会被打包到单文件中，且不能从文件系统中加载 python 模块；值为 2 表示 pyd 和 dll 文件会被打包到单文件中，但是可以从文件系统中加载 python 模块。64位的Py2exe不要添加本句。
        "bundle_files": 1,
        }
setup(
        name = 'PyQt Demo',
        version = '1.0',
        ## “myico.ico” 是程序图标,
        ## 将 setup 函数中的 console 改为 windows, 即没有命令行窗口出现，如果使用 console 则表示有命令行窗口出现。
        windows = [{ "script":'wordreplace.py',"icon_resources":[(1,"myico.ico")]}],
        zipfile = None,
        options = {'py2exe': py2exe_options}
      )
#如果 bundle_files 不为 1、2，则 dist 文件夹中还会包括一些 dll 文件和 pyd 文件（Python Dll 文件）。如果 bundle_files 为 2，dist 文件夹会包括一个 python##.dll 文件，如果为 1 则不会。
## 如果没有使用 zipfile=None，还会生成一个 library.zip 文件。
```
打包后的 exe 不可执行，是由于缺少两个必要的文件，msvcr90.dll 和 Microsoft.VC90.CRT.manifest，其中 msvcr90.dll 的版本为 9.0.21022.8，详细解释见官网，
解决方法：将上述两个文件 copy 进 dist 文件夹，或者见官网的解决方式（在打包前，将这两个文件作为资源，直接复制到 dist 文件夹下）。
打包后的 exe 报错，说缺少文件，这个问题的主要原因是 python 代码 import 文件时，使用了某些模块提供的所谓 lazy import，使得打包时，py2exe 找不到类库真正的路径
解决方法：重新 import 类库文件的真实路径，然后重新打包，问题解决。
当我们想要将一些 dll 打包进 exe 里面，就需要修改 py2exe 的默认配置
---
### 常见报错
- **UnicodeDecodeError: 'gbk' codec can't decode byte 0xad in position 9: illegal multibyte sequence**
    - 在 Linux 环境下运行即可
- **UnicodeDecodeError: 'ascii' codec can't decode byte 0xce in position 7: ordinal not in range(128)**
    - 路径有中文,修改下即可
- **DLL load failed: %1 不是有效的 Win32 应用程序**
    - python 的版本是32位的,重装成64位的即可
- **TabError: inconsistent use of tabs and spaces in indentation**
    代码中空格和 tab 混用了
- **Python“Non-ASCII character 'xe5' in file”**
    Python 默认是以 ASCII 作为编码方式的，如果在自己的 Python 源码中包含了中文（或者其他非英语系的语言），此时即使你把自己编写的 Python 源文件以 UTF-8 格式保存了，但实际上，这依然是不行的。
    解决办法很简单，只要在文件开头加入下面代码就行了
    ```py
    ## -*- coding: UTF-8 -*-
    ```
    或
    ```py
    #coding:UTF-8
    ```
- **fatal error: Python.h: No such file or directory**
    For apt (Ubuntu, Debian...):
    ```bash
    sudo apt-get install python-dev   ## for python2.x installs
    sudo apt-get install python3-dev  ## for python3.x installs
    ```
    For yum (CentOS, RHEL...):
    ```bash
    sudo yum install python-devel   ## for python2.x installs
    sudo yum install python3-devel   ## for python3.x installs
    ```
    For dnf (Fedora...):
    ```bash
    sudo dnf install python2-devel  ## for python2.x installs
    sudo dnf install python3-devel  ## for python3.x installs
    ```
    For zypper (openSUSE...):
    ```bash
    sudo zypper in python-devel   ## for python2.x installs
    sudo zypper in python3-devel  ## for python3.x installs
    ```
    For apk (Alpine...):