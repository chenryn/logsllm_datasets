0x070015BC
0x0700A8B0
. . .
. . .
. . .
Table 1: Detection of ROP Attack on Adobe Reader
detects all malicious returns, we temporarily allow the ex-
ploit to continue. As can be seen from Table 1, ROPde-
fender also detects the subsequent malicious returns. All
following expected return addresses are NULL, because the
shadow stack is empty after the ﬁrst mismatch.
5.3 Discussion
ROPdefender detects all ROP attacks based on returns
and any attack that is based on corrupting a return address,
e.g., conventional stack smashing [4] or return-into-libc [56].
Recently, Checkoway et al. [11] presented a new ROP at-
tack that is only based on indirect jump instructions rather
on returns. Since ROPdefender does currently only check
return instructions, it can not detect this attack. ROP at-
tacks without returns simulate the return instruction by a
pop-jump sequence which pops the address of an instruction
sequence from the stack and afterwards redirects control to
it by an indirect jump instruction. Since such pop-jump
sequences (even not unintended) rarely occur in practice,
the attack uses the following technique: Each instruction
sequence ends in an indirect jump to a single pop-jump se-
quence that acts as a trampoline after each instruction se-
quence.
In order to defend against ROP without returns,
ROPdefender would have to decide at runtime if an indi-
rect jump is a legal one or not. Since there exists no con-
vention regarding the target of an indirect jump (in con-
trast to returns), it seems impossible to defend against such
ROP attacks without having some information about the
program’s structure. However, indirect jumps do not oc-
cur as frequently as returns and the concrete implementa-
tion presented in [11] makes even use of two indirect jumps
within three instructions (jmp *x; pop *y; jmp *y). Thus,
frequency analysis against ROP attacks based on indirect
jumps can be deployed as ﬁrst ad-hoc solution. However,
if the adversary issues a longer instruction sequence in be-
tween, he might be able to bypass such a defense. Moreover,
the adversary might be also able to use other return-like in-
structions such as indirect calls and thus bypass a solution
that looks only for returns and indirect jumps.
In parallel work, Chen et al. [14] extended ROPdefender ’s
return address protection and showed ﬁrst techniques to de-
feat ROP without returns based on jit-instrumentation. The
main idea of their approach is that an indirect jump must
remain within the boundaries of the function from where it
has been issued. Hence, the adversary can no longer enforce
a jump from one library function to another one. However,
he is still able to jump to an arbitrary instruction within
the current function. Moreover, as mentioned in [14], there
are a few exceptions where an indirect jump targets an in-
struction outside of the current function, e.g., tail calls or
indirect jumps used in the PLT (Procedure Linkage Table)
to redirect execution to the GOT (Global Oﬀset Table). In
our future work we aim to address these problems and aim
to extend ROPdefender allowing it to eﬃciently detect ROP
410.bwaves416.gamess433.milc434.zeusmp435.gromacs436.cactusADM437.leslie3d444.namd447.dealII450.soplex453.povray454.calculix459.GemsFDTD465.tonto470.lbm481.wrf482.sphinx300,511,522,533,541,21,261,321,061,041,011,071,063,61,253,41,161,131,9611,511,29PinROPdefenderSlowdown400.perlbench  401.bzip2 403.gcc 429.mcf 445.gobmk 456.hmmer 458.sjeng 462.libquantum 464.h264ref 471.omnetpp 473.astar 483.xalancbmk 00,511,522,533,543,541,432,421,052,641,482,541,372,392,191,673,34PinROPdefenderSlowdownattacks without returns. In particular, we aim to detect any
misuse of an indirect jump instruction to completely pre-
vent ROP without returns. For this we plan to integrate
ROPdefender into a control-ﬂow integrity framework.
6. RELATED WORK
In the following we explore countermeasures against re-
turn address attacks and discuss their shortcomings.
6.1 Randomization
Address Space Layout Randomization (ASLR) [49, 31]
aims to prevent return-into-libc attacks by randomizing base
addresses of code segments. Since the adversary has to know
the precise addresses of all instruction sequences, this ap-
proach seems to eﬀectively prevent ROP attacks. However,
it has been shown that ASLR can be bypassed by mount-
ing brute-force attacks [54] or through information leakage
attacks [57, 52, 60] allowing adversaries to gain useful infor-
mation on the memory layout. Moreover, some libraries or
parts of the code segment may not be ASLR-compatible
allowing adversaries to ﬁnd enough useful instruction se-
quences to launch a ROP attack [51, 39]. Roglia et al. [51]
also propose to encrypt function addresses contained in the
Global Oﬀset Table (GOT) to prevent their ROP attack.
However, their solution does not support lazy binding and
cannot detect return address attacks beyond exploiting the
GOT. In contrast, ROPdefender can detect all ROP-based
attacks even if adversaries are able to bypass ASLR.
6.2 Compiler-Based Solutions
Below we discuss diﬀerent compiler-based approaches that
aim to mitigate return address attacks. One problem they
all have in common is that they require recompilation and
access to source code. Further, they are not able to detect
ROP attacks based on unintended instruction sequences.
StackGuard [19] places a dummy value, referred to as ca-
nary, below the return address on the stack. A more general
approach, called PointGuard [18], encrypts all pointers and
only decrypts them when they are loaded into CPU reg-
isters. Hence, the adversary has only access to encrypted
pointers stored on memory. Close to our approach, Stack
Shield [59] and Return Address Defender (RAD) [15] guard
return addresses by holding copies of them in a safe memory
area (i.e., on the shadow stack).
Finally, two compiler-based solutions were developed in
parallel to our work that speciﬁcally address ROP attacks [40,
48]. Li et al. [40] developed a compiler-based solution against
return-oriented kernel rootkits [32]. First, all unintended
return instructions are eliminated through code transforma-
tion. Second, the intended return instructions are protected
by a technique referred to as return indirection: Call in-
structions push a return index onto the stack which points
to a return address table entry. The return address table
contains valid return addresses the kernel is allowed to use.
The solution in [40] is complementary to our work, because
it provides protection at the kernel-level, whereas ROPde-
fender targets ROP attacks on the application-level. How-
ever, ROPdefender requires no access to source code and
also addresses exceptional cases which might occur during
ordinary program execution.
A noteworthy compiler-based approach is G-Free [48] that
defeats ROP attacks through gadget-less binaries. In con-
trast to the aforementioned approach and to ROPdefender ,
G-Free also addresses ROP attacks without returns. Ba-
sically, G-Free guarantees during compilation that the re-
sulting binary does not contain unintended instruction se-
quences. Intended return instructions are encrypted against
a random cookie created at runtime. Moreover, (intended)
indirect jumps (and calls) are only allowed if the function
(from where the indirect jump originates) has been entered
through a valid entry point. This prevents an adversary
from executing indirect jumps outside the currently execut-
ing functions. As proof of concept, G-Free has been applied
to GNU libc. However, to provide full protection against
ROP attacks, each linked library and the original program
code have to be compiled with G-Free, which might in prac-
tice result in false positives if a library is not compatible
to G-Free. Although G-Free already prevents ROP attacks
without returns, ROPdefender does not need programs and
libraries to be recompiled.
6.3
Instrumentation-Based Solutions
Securing Function Epilogues.
There exist two works [29, 16] that aim to detect ma-
licious changes of return addresses by using probe-based
instrumentation techniques. Both approaches instrument
function prologues and epilogues to incorporate a return ad-
dress check on each function return. However, as we already
described in Section 2.2, both approaches are not able to de-
tect ROP attacks that use unintended instruction sequences
because they only instrument intended function epilogues.
Control-Flow Integrity.
XFI [2] enforces control-ﬂow integrity (CFI) [1] which
guarantees that program execution follows a Control-Flow
Graph (CFG) created at load-time. It disassembles the bi-
nary in order to ﬁnd all branch instructions (such as return
instructions) and afterwards rewrites the return instructions
with additional instrumentation code to enforce return ad-
dress protection. While XFI only instruments intended re-
turn instructions, it also checks whether indirect jumps or
calls follow a valid path in the CFG. This makes it hard, if
not impossible, for an adversary to launch the attack even
with unintended instructions. However, XFI mainly suf-
fers from practical deﬁciencies: The binary instrumentation
framework Vulcan [23] used by XFI is not publicly avail-
able and is restricted to Windows. More importantly, to
build the CFG, XFI requires some information on the pro-
gram’s structure which are extracted from Windows debug-
ging information ﬁles (PDB ﬁles). These are not provided
by default. In contrast, our ROPdefender requires no side
information and is based on an open source framework.
Measuring Frequency of Returns.
Chen et al. [13] and Davi et al. [21] exploit jit-based in-
strumentation to detect ROP attacks. Both solutions count
instructions issued between two return instructions. If short
instruction sequences are issued three times in a row, they
report a ROP attack. To bypass such a defense, an adversary
could enlarge the instruction sequences or enforce a longer
sequence after, e.g., each second instruction sequence.
Just-in-Time Instrumentation.
Program Shepherding [37] is based on the jit-based instru-
mentation framework DynamoRIO and monitors control-
ﬂow transfers to enforce a security policy.
It instruments
direct and indirect branch instructions with the goal to pre-
vent execution of malicious code. As part of its restricted
control-ﬂow policy it also provides return address protection:
It guarantees that a return only targets an instruction that
is preceded by a call instruction. Hence, the adversary can
only invoke instruction sequences where the ﬁrst instruction
is preceded by a call instruction. Although this prevents
basic ROP attacks, it is still possible to construct ROP at-
tacks and to manipulate return addresses because Program
Shepherding does not ensure that a return really targets
its original destination (e.g., the calling function). Since
each library linked into the program’s memory space con-
tains various call instructions, the adversary can still return
and invoke instruction sequences without being detected by
Program Shepherding.
In contrast, ROPdefender detects
any return address manipulation and therefore completely
prevents the conventional ROP attacks that are based on
returns. Moreover, Program Shepherding only handles the
special case of setjmp/longjmp, whereas ROPdefender also
handles exceptions of Class 2 and 3 (see Section 4).
TRUSS (Transparent Runtime Shadow Stack) [55] is an-
other tool based on DynamoRIO. Similar to our approach,
return addresses are pushed onto a shadow stack and a re-
turn address check is enforced upon a function return. Due
to jit-based instrumentation, TRUSS is also able to detect
unintended sequences issued in a ROP attack. However,
the DynamoRIO framework does not allow to instrument a
program from its very ﬁrst instruction. It depends on the
LD_PRELOAD variable which is responsible for mapping the
DynamoRIO code into the address space of the application.
Further, similar to Program Shepherding, TRUSS does not
handle exceptions of Class 2 and 3.
Taint Tracking.
Dynamic taint analysis based on jit-based instrumentation
(e.g., [47, 17]) marks any untrusted data as tainted. Tainted
data could be user input or any input from an untrusted
device or resource. After marking data as tainted, taint
analysis tracks the propagation of tainted data, and alerts
or terminates the program if tainted data is misused. Misuse
of the tainted data is, for instance, using the tainted data as
jump/call or return target. This mechanism induces a high
performance overhead (30x to 50x for TaintCheck [47] and
DYTAN [17]). However, we believe that ROPdefender can
be incorporated into existing taint analysis systems.
6.4 Hardware-Facilitated Solutions
In [25] an embedded microprocessor is adapted to include
memory access control for the stack, which is split into data-
only and call/return addresses-only parts. The processor
enforces access control that does not allow to overwrite the
call/return stack with arbitrary data. This eﬀectively pre-
vents ROP attacks. However, the approach is only demon-
strated on a modiﬁed microprocessor and cannot be trans-
ferred easily to complex instruction CPUs like x86 architec-
tures. Moreover, we do not expect CPU-integrated protec-
tion against ROP to appear in the near future. In contrast,
our solution is software-based and works with general pur-
pose CPUs and operating systems.
StackGhost [26] is another hardware-facilitated solution,
but available on SPARC systems. StackGhost is based on
stack cookies that are XORed against return addresses. The
design of StackGhost also includes a return address stack
(similar to our shadow stack), but to the best of our knowl-
edge, this has not been implemented and benchmarked. Note
further that StackGhost depends on speciﬁc features which
are unique to SPARC and which, according to [26], cannot
be easily adopted to other hardware platforms.
7. CONCLUSION AND FUTURE WORK
Return-oriented programming (ROP) is a powerful at-
tack that bypasses current security mechanisms widely used
in today’s computing platforms.
It enables the adversary
to perform Turing-complete computation without injecting
any new code and executing instruction sequences never in-
tended by the original programmer.
The main contribution of our work is to present a prac-
tical countermeasure against ROP attacks (based on return
instructions) without requiring access to side information
such as source code or debugging information. In this pa-
per, we presented our ROPdefender that fulﬁlls accurately
this requirement and that is able to detect and prevent even
ROP attacks that are based on unintended instruction se-
quences. For this, we exploited the idea of duplicating return
addresses onto a shadow stack and the concept of jit-based
binary instrumentation to evaluate each return instruction