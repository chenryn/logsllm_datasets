SPRAAO8–April 2009
Submit Documentation Feedback
.text
.text
section
header
.text
Rawdata
.text
Relocationinformation
0−7
8−11
12−15 16−19
20−23 24−27
28−31
32−33
34−35
36−37 38
39
5
Structuring Relocation Information
www.ti.com
Structuring Relocation Information
Figure 3. Section Header Pointers for the .text Section
As Figure 2 shows, uninitialized sections (created with the .bss and .usect directives) vary from this
format. Although uninitialized sections have section headers, they have no raw data or relocation
information; or, for MSP430 and TMS470, line number information. They occupy no actual space in the
object file. Therefore, the number of relocation entries, the number of line number entries, and the file
pointers are 0 for an uninitialized section. The header of an uninitialized section simply tells the link step
how much space for variables it should reserve in the memory map.
A COFF object file has one relocation entry for each relocatable reference. The assembler automatically
generates relocation entries. The link step reads the relocation entries as it reads each input section and
performs relocation. The relocation entries determine how references within each input section are
treated.
For C2800, C6000, MSP430, and TMS470, COFF file relocation information entries use the 10-byte
format shown in Table 8.
Table 8. Relocation Entry Contents, 10-Byte Format
Byte
Number
Type
Description
0-3
Long
Virtual address of the reference
4-5
Short
Symbol table index (0-65 535)
6-7
Unsigned short
Reserved
8-9
Unsigned short
Relocation type (see Table 11)
SPRAAO8–April 2009
Common Object File Format
7
Submit Documentation Feedback
Structuring Relocation Information
www.ti.com
For C5400 and C5500, COFF file relocation information entries use the 12-byte format shown in Table 8.
Table 9. Relocation Entry Contents, 12-Byte Format
Byte
Number
Type
Description
0-3
Long
Virtual address of the reference
4-7
Unsigned long
Symbol table index (0-65 535)
8-9
Unsigned short
For COFF1 files for C5400 only: Reserved
For COFF2 files: Additional byte used for extended address
calculations
10-11
Unsigned short
Relocation type (see Table 11)
The virtual address is the symbol's address in the current section before relocation; it specifies where a
relocation must occur. (This is the address of the field in the object code that must be patched.)
Following is an example of C6000 code that generates a relocation entry:
2
.global X
3 00000000 !00000012
b
X
In this example, the virtual address of the relocatable field is 0001.
The symbol table index is the index of the referenced symbol. In the preceding example, this field
contains the index of X in the symbol table. The amount of the relocation is the difference between the
symbol's current address in the section and its assembly-time address. The relocatable field must be
relocated by the same amount as the referenced symbol. In the example, X has a value of 0 before
relocation. Suppose X is relocated to address 2000h. This is the relocation amount (2000h - 0 = 2000h),
so the relocation field at address 1 is patched by adding 2000h to it.
You can determine a symbol's relocated address if you know which section it is defined in. For example, if
X is defined in .data and .data is relocated by 2000h, X is relocated by 2000h.
If the symbol table index in a relocation entry is -1 (0FFFFh), this is called an internal relocation. In this
case, the relocation amount is simply the amount by which the current section is being relocated.
The relocation type specifies the size of the field to be patched and describes how the patched value is
calculated. The type field depends on the addressing mode that was used to generate the relocatable
reference. In the preceding example for C6000, the actual address of the referenced symbol X is placed in
an 8-bit field in the object code. This is an 8-bit address, so the relocation type is R_RELBYTE. The
following tables list the relocation types by device family.
Table 10. Generic Relocation Types (Bytes 8 and 9)
Mnemonic
Flag
Relocation Type
RE_ADD
4000h
Addition (+)
RE_SUB
4001h
Subtraction (-)
RE_NEG
4002h
Negate (-)
RE_MPY
4003h
Multiplication (*)
RE_DIV
4004h
Division (/)
RE_MOD
4005h
Modulus (%)
RE_SR
4006h
Logical shift right (unsigned >>)
RE_ASR
4007h
Arithmetic shift right (signed >>)
RE_SL
4008h
Shift left (<<)
RE_AND
4009h
And (&)
RE_OR
400Ah
Or (|)
RE_XOR
400Bh
Exclusive Or (^)
RE_NOTB
400Ch
Not (~)
RE_ULDFLD
400Dh
Unsigned relocation field load
RE_SLDFLD
400Eh
Signed relocation field load
8
Common Object File Format
SPRAAO8–April 2009
Submit Documentation Feedback
www.ti.com
Structuring Relocation Information
Table 10. Generic Relocation Types (Bytes 8 and 9) (continued)
Mnemonic
Flag
Relocation Type
RE_USTFLD
400Fh
Unsigned relocation field store
RE_SSTFLD
4010h
Signed relocation field store
RE_PUSH
4011h
Push symbol on the stack
RE_PUSHSK
4012h
Push signed constant on the stack
RE_PUSHUK
4013h
Push unsigned constant on the stack
RE_PUSHPC
4014h
Push current section PC on the stack
RE_DUP
4015h
Duplicate top-of-stack and push a copy
RE_XSTFLD
4016h
Relocation field store, signedness is irrelevant
RE_PUSHSV
C011h
Push symbol: SEGVALUE flag is set
Table 11. C6000 Relocation Types (Bytes 8 and 9)
Mnemonic
Flag
Relocation Type
R_ABS
0000h
No relocation
R_RELBYTE
000Fh
8-bit direct reference to symbol's address
R_RELWORD
0010h
16-bit direct reference to symbol's address
R_RELLONG
0011h
32-bit direct reference to symbol's address
R_C60BASE
0050h
Data page pointer-based offset
R_C60DIR15
0051h
Load or store long displacement
R_C60PCR21
0052h
21-bit packet, PC relative
R_C60PCR10
0053h
10-bit Packet PC Relative (BDEC, BPOS)
R_C60LO16
0054h
MVK instruction low half register
R_C60HI16
0055h
MVKH or MVKLH high half register
R_C60SECT
0056h
Section-based offset
R_C60S16
0057h
Signed 16-bit offset for MVK
R_C60PCR7
0070h
7-bit Packet PC Relative (ADDKPC)
R_C60PCR12
0071h
12-bit Packet PC Relative (BNOP)
Table 12. C2800 Relocation Types (Bytes 8 and 9)
Mnemonic
Flag
Relocation Type
R_ABS
0000h
No relocation
R_RELBYTE
000Fh
8-bit direct reference to symbol's address
R_RELWORD
0010h
16-bit direct reference to symbol's address
R_RELLONG
0011h
32-bit direct reference to symbol's address
R_PARTLS7
0028h
7-bit offset of a 22-bit address
R_PARTLS6
005Dh
6-bit offset of a 22-bit address
R_PARTMID10
005Eh
Middle 10 bits of a 22-bit address
R_REL22
005Fh
22-bit direct reference to a symbol's address
R_PARTMS6
0060h
Upper 6 bits of an 22-bit address
R_PARTS16
0061h
Upper 16 bits of an 22-bit address
R_C28PCR16
0062h
PC relative 16-bit address
R_C28PCR8
0063h
PC relative 8-bit address
R_C28PTR
0064h
22-bit pointer
R_C28HI16
0065h
High 16 bits of address data
R_C28LOPTR
0066h
Pointer to low 64K
R_C28NWORD
0067h
16-bit negated relocation
R_C28NBYTE
0068h
8-bit negated relocation
SPRAAO8–April 2009
Common Object File Format
9
Submit Documentation Feedback
Structuring Relocation Information
www.ti.com
Table 12. C2800 Relocation Types (Bytes 8 and 9) (continued)
Mnemonic
Flag
Relocation Type
R_C28HIBYTE
0069h
High 8 bits of a 16-bit data
R_C28RELS13
006Ah
Signed 13-bit value relocated as a 16-bit value
Table 13. C5400 Relocation Types (Bytes 10 and 11)
Mnemonic
Flag
Relocation Type
R_ABS
0000h
No relocation
R_REL24
0005h
24-bit reference to symbol's address
R_RELBYTE
0017h
8-bit direct reference to symbol's address
R_RELWORD
0020h
16-bit direct reference to symbol's address
R_RELLONG
0021h
32-bit direct reference to symbol's address
R_PARTLS7
0028h
7 LSBs of an address
R_PARTMS9
0029h
9 MSBs of an address
R_REL13
002Ah
13-bit direct reference to symbol's address
Table 14. C5500 Relocation Types (Bytes 10 and 11)
Mnemonic
Flag
Relocation Type
R_ABS
0000h
No relocation
R_REL24
0005h
24-bit direct reference to symbol's address
R_RELBYTE
0017h
8-bit direct reference to symbol's address
R_RELWORD
0020h
16-bit direct reference to symbol's address
R_RELLONG
0021h
32-bit direct reference to symbol's address
R_LD3_DMA
0170h
7 MSBs of a byte, unsigned; used in DMA address
R_LD3_MDP
0172h
7 bits spanning 2 bytes, unsigned; used as MDP register value
R_LD3_PDP
0173h
9 bits spanning 2 bytes, unsigned; used as PDP register value
R_LD3_REL23
0174h
23-bit unsigned value in 24-bit field
R_LD3_k8
0210h
8-bit unsigned direct reference
R_LD3_k16
0211h
16-bit unsigned direct reference
R_LD3_K8
0212h
8-bit signed direct reference
R_LD3_K16
0213h
16-bit signed direct reference
R_LD3_I8
0214h
8-bit unsigned PC-relative reference
R_LD3_I16
0215h
16-bit unsigned PC-relative reference
R_LD3_L8
0216h
8-bit signed PC-relative reference
R_LD3_L16
0217h
16-bit signed PC-relative reference
R_LD3_k4
0220h
Unsigned 4-bit shift immediate
R_LD3_k5
0221h
Unsigned 5-bit shift immediate
R_LD3_K5
0222h
Signed 5-bit shift immediate
R_LD3_k6
0223h
Unsigned 6-bit shift immediate
R_LD3_k12
0224h
Unigned 12-bit shift immediate
Table 15. MSP430 and TMS470 Relocation Types (Bytes 8 and 9)
Mnemonic
Flag
Relocation Type
R_RELLONG
0011h
32-bit direct reference to symbol's address
R_PCR23H
0016h
23-bit PC-relative reference to a symbol's address, in halfwords
(divided by 2)
R_PCR24W
0017h
24-bit PC-relative reference to a symbol's address, in words
(divided by 4)