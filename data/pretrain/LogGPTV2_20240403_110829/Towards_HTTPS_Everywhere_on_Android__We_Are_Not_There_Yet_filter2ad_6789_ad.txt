(see Table 3), we have disclosed our ﬁndings to the developers.
We are still working towards full bugs ﬁxes.
6
Impact of Advertisement Libraries
Advertisements (ads, in short) play a key role in mobile apps. In
this section, we ﬁrst provide an overview of how advertisement
libraries (ad libraries) operate and their complexity, and we
then explore the implications for the adoption of the NSP.
Ads are the most important source of income for many app
developers, especially when they can be freely downloaded
from the Play Store. An app can simultaneously embed one or
multiple ad libraries. While the app is running, the ad library re-
trieves the contentofthe ads from a remote serveranditdisplays
itto the user. Everytime an adis shown to the user,the developer
earns a revenue. If the user clicks on the ad, the developer then
gets a more substantial revenue. Even though this mechanism is
conceptually simple, the actual implementation details and the
underlying process are far from trivial. We now quickly discuss
the main steps, which are also depicted in Figure 2. First, the
developer embeds a given ad library in her application. Then,
when the app is running, the ad library contacts its backend
server and asks for an ad to be displayed. Depending on the
ad library’s implementation, this ﬁrst request can reach one or
multiple servers. In case of an individual ad network,the library
contacts a single server, while in case of an ads aggregator the
request is sent to multiple servers. The server then forwards the
request to its ad network, which might be more or less complex.
Within the ad network, the bidding auction starts. Bidding
consists of advertisers (brand) declaring the maximum amount
of money they are willing to pay for each impression (or click)
of their ad. The winner sends the content of the ad back to the
library, and the ad is then displayed in the app, normally within
a WebView. Moreover, if the user clicks on the ad, then the full
enriched content is retrieved from the server of the auction’s
winner (which is related to the speciﬁc ad, and not to the ad
library itself). The complexity of the ad ecosystem and the inter-
connection of multiple players—each of which only controls a
portion of the ecosystem—opens interesting questions related
to the NSP. Since the winner of the auction is usually not under
352    29th USENIX Security Symposium
USENIX Association
ApplicationADSLibraryWebViewADNetworkAdsServerWinnerURL1. Request foran AD2. Forwardthe request3. Biddingauction4. Who wants toshow an AD?5. Winner ADContent to show: URL, Images6. Winner AD7. Forward the request8. Content to showin the WebView of theapplication9. User clicked.Show the full content10. Contact the URLand retrieve the contentBrand 1Brand 2Brand 3Brand 4the control of the ad library, the enriched content downloaded
upon a user’s clickmaybe servedvia HTTP: this aspectmakes it
interesting to determine how diﬀerent ad libraries deal with this
“uncertainty” on the protocol used by the advertiser. Motivated
by these observations, we set out to perform the ﬁrst systematic
analysis of the NSPs deﬁned by ad libraries.
The rest of the section is organized as follows. First, we
present the dataset we built for the analysis. Then, we analyze
and characterize the NSPs deﬁned by ad libraries, and we show
how several of these libraries push app developers to severely
weaken their policies, oftentimes justifying these requests
with misleading arguments. We then end our discussion with
an in-depth case study. We note that, ideally, it would be
interesting to perform large-scale and automated analysis over
many ad libraries. However, we refrain from performing such
study due to ethical concerns: in fact, automatically visiting
apps with the mere goal of generating ad impressions that
would not be seen by real users (or, even worse, automatically
clicking on these ads) would generate illegitimate revenues
for the app developer (who could be framed as fraudster), and
it would damage all the ads ecosystem’s parties involved.
6.1 Dataset
To perform this investigation, we built a comprehensive and
representative dataset of the most used ad libraries. We choose
the Top 29 ad libraries from AppBrain [10] based on the
ranking “number of applications.” Table 4, in Appendix,
summarizes the statistics about the ad libraries.
6.2 Policy Characterization
We investigated whether a given ad library requires a policy
modiﬁcation and of which kind. To identify if a library requires
a policy, we start by looking at its oﬃcial documentation. In
case we do not ﬁnd any reference to the NSP, we then proceed
by analyzing the source code of the “reference example app,”
which is always provided by the ad library developers to show
how such a library can be integrated. Among the 29 libraries
that we analyzed, we found that 12 of them do require the
developer to modify the policy. (The remaining 17 do not
require any modiﬁcation, which suggests that their backend
infrastructure is fully compliant with the latest standards and
defaults.) One of these is the Facebook ad library, which only
requires the developer to specify a conﬁguration for a single
domain (see Section 5.2). The other libraries require more
invasive modiﬁcations, which we discuss next.
Cleartext. Our ﬁrst ﬁnding is concerning: All the 11 libraries
require the developer to allow cleartext on her application. We
found that MoPub, HyprMx, HeyZap, Pollﬁsh, AppMediation,
and Appodeal do force the developer to completely allow cleart-
ext protocols for all domains. We also found that AdColony,Ver-
izonMedia,Smaato,AerServ,andDuAppspushthedeveloperto
adopt the ﬁrst version of the policy, with similarly negative con-
sequences. Theseconﬁgurationsmakeineﬀectiveanysafetynet
thata NSP mayprovide. However,we note thatthese adlibraries
mayberequired toaskforthismodiﬁcation sinceitcouldbethat
agivenadframeworkdoesnothaveenoughcontroloverthetype
of URLs (HTTP vs. HTTPS) that are served as part of the ads.
Trusted Anchors. We have identiﬁed ad libraries deﬁning
a trust-anchors node. Even in this case, the ﬁndings are
concerning: Appodeal [20] and HeyZap [21] suggest the
developer to add User KeyStore as trusted, thus providing a
venue to perform MITM attacks. Moreover, none of these
libraries provide any custom CA, nor ask the developer (or
the user) to do so, making this risk completely unnecessary.
Misleading Documentation. We argue that the security reper-
cussions of NSP modiﬁcations should be explained and justi-
ﬁed to developers so that they can take informed decisions on
whether to include a given ad library. However, we found how
this “transparency” is not a common practice. After closely
inspecting the documentation of the 11 ad libraries mentioned
above, we found that none of them inform developers of the
possible consequences of allowing cleartext protocols or trust-
ing User KeyStores. Some of these libraries simply inform
the developers that they need to apply their modiﬁcations of
the NSP in the name of “usability” and to avoid any faulty be-
havior. Moreover, we identiﬁed how Millenial Media, Smaato,
HyprMX, and AerServr simply ask the developer to copy-paste
the provided sample AndroidManifest, without explicitly men-
tioning the fact that such a sample manifest silently speciﬁes
a “usesCleartextTraﬃc” policy. Even worse, we found how Du
Apps misleadingly justiﬁes the need to allow cleartext traﬃc
because it is “required for target SDK28.” We believe that the
underlying reason for these problems is that most of these ad li-
braries found themselves in diﬃculty due to their infrastructure
not being ready to deal with Google’s HTTPS everywhere push.
6.3 Ad Libraries in Apps
As previouslydiscussed,we identiﬁedsome adlibraries thatask
developerstoweakentheirsecuritypolicyandtoallowcleartext.
We performed additional experiments that aim at determining
how frequently these ad libraries are used within our dataset
and whether these apps allow cleartext as part of their NSP.
To detecta third-partylibrarywithin a given app,we use Lib-
Scout [12],the state ofthe artstatic analysis toolforthis kindof
task. Accordingtothepaper,LibScoutcandetecttheinclusion
of external libraries within apps even when common bytecode
obfuscation techniques are used. LibScout supports two types
of detection: the ﬁrst one is based on a simple matching with the
package name, while the second one relies on code similarity.
By default, it reports only matches that have a similarity of at
least 70%. For our experiment, we used the same threshold.
Currently, LibScout supports only the Facebook Audience ad
library. We extended it by creating proﬁles, necessary for the
detection, for all the ad libraries that require the developer to
USENIX Association
29th USENIX Security Symposium    353
Table 1: The table summarizes the results of the analysis with
LibScout. Dataset 1 represents the analysis over 16,324 apps,
while Dataset 2 represents the analysis over the second version
of the dataset composed of 108,542 apps.
Table 2: The table presents the distribution of the dataset in
terms of inclusion of ad libraries (that ask developers to weaken
their policy) and whether the apps’ NSP allows cleartext.
#AppswithAdlibrarymatchedby Dataset 1 Dataset 2
Package Name (PN)
Code Similarity (CS)
PN ∧ ¬ CS
CS ∧ ¬ PN
PN ∧ CS
PN ∨ CS
3,189
2,072
1,158
41
2,031
3,230
9,304
5,918
3,727
341
5,577
9,645
NSP
Cleartext
No Cleartext
Ads
2,891
339
Dataset 1
Dataset 2
No Ads
10,956
2,138
Ads
7,298
2,347
No Ads
65,455
33,442
6.4 Case Study: MoPub
We now present an in-depth analysis of one of the most
prominent ad libraries, MoPub [22]. This library is an
individual ad serving platform used by over 19k applications,
some of which have more than 50M unique installations.
MoPub is one of those libraries that requires an app developer
to allow cleartext for her entire app. For this case study, we set
out to determine whether this library really had no other choice
but to require cleartext on the entire app to properly work. To
shed some light, we aimed at monitoring the network requests
performed by this ad library at run time. We note that a simple
network monitor on the traﬃc generated by the entire app is
not enough: by just observing network traces, it would be very
challenging to determine which traﬃc has been generated by
the ad library and which by unrelated components of the app.
Thus, we developed an instrumentation framework that
records all network activities and, moreover, hooks the network
Socket.connect API (by using Frida [38]). This API is the
lowest-level API used for any HTTP or HTTPS connection
and it provides the target domain name and the port. Every
time the API is invoked, we perform a stack trace inspection
to determine which package has originated the call: this setup
allows us to match which component (i.e., library) of the app
initiated the network request.
Due to the ethical concerns mentioned earlier, we limited
ourselves to a very small-scale experiment: we opted to select
and analyze only one representative app, Hunter Assassin [44],
an action game with more than 50M installations. This app
embeds MoPub and speciﬁes a NSP that reﬂects MoPub’s
documentation. For the experiments, we executed the app
10 times, with each execution lasting 10 minutes. Due to
ethical concerns, we opted to not use automatic UI stimulation
techniques, but we performed this analysis step manually, by
just simulating the interaction of a “real” user. This approach
allows us to avoid generating excessive traﬃc and damage the
app developer’s reputation and ad libraries.
During the analysis,ourinstrumentation frameworkdetected
that the MoPub library initiated connections to 83 unique
domains. (For this experiment, we discarded the domain names
reached by other components of the app.) Surprisingly, for 82
domains (out of 83) the connection was actually established
using HTTPS, the only exception loaded over HTTP being
modify the NSP to allow cleartext. Then, for each of the apps in
ourdatasets,we run LibScout fora maximum time ofone hour.
We run LibScout on the ﬁrst dataset of 16,324 apps (which
specify a NSP), and also on the second “fresher” dataset of
108,542 apps. For the ﬁrst dataset, LibScout was not able to
conclude the analysis in time for 8 apps, while it terminated cor-
rectlyforalltheappsin theseconddataset. In total,thematching
engine was able to identify that 19.7% of the apps belonging
to the ﬁrst dataset (3,230) do have one of the ad libraries that
requires cleartext. For the second dataset, instead, it identiﬁed
8.8% of apps (9,645) containing at least one of the libraries.
Table 1 summarizes the results. Unfortunately, we suspect
that LibScout may miss several matches (that is, it does not
ﬁnd libraries even if they are included). In fact, Table 1 shows
how the matching results are dominated by the “package name”
heuristic, and how only 41 matches for the ﬁrst dataset, and 341
for the second, were solely due to the similarity analysis engine
(i.e., all other matches were already covered by the package
name heuristic, hinting that the apps were not obfuscated). We
thus remind the reader that, for the numbers reported in this
section, the accuracy of these numbers is based on the accuracy
of the underlying libraries matching engine, LibScout.
We then proceeded by checking how many of the apps identi-
ﬁedbyLibScouteﬀectivelyhaveaNSPthatallowsglobalclear-
text, as deﬁned by the ad libraries. Table 2 summarizes our ﬁnd-
ings. We note how for the ﬁrst dataset, 89% of the apps (2,891)
embedding an ad library do have a NSP that allows cleartext.
However,11%(339)donotallowit:fortheseapps,theadsserved
overHTTPwillnotbedisplayedandanExceptionisthrown. We
also note that even if apps do not use ad libraries, a large portion
ofthem(83%)stilluseHTTP. Thus,whileadlibrariesaskingde-
velopers to weaken their security policy certainly does not help,
it does not seem to be the only reason app developers stick to in-
secureHTTPconnections. Fortheseconddataset,wefoundthat,
among apps that include an ad library, 75.6% of them (7,298)
deﬁne a NSP that permits cleartext. The percentage of apps
that allow cleartext decreases to 66.1% when considering apps
that do not include one of the ad libraries we have checked for.
354    29th USENIX Security Symposium
USENIX Association
an image, retrieved from a MoPub server. Even though this
HTTP connection would be blocked by a non-permissive
cleartext policy, we do not believe this is the core reason why
MoPub requires the policy to allow cleartext for the entire app.
According to the MoPub documentation, it requires HTTP
because it may need to serve ads via HTTP—and to do so, it
asks the app developer to weaken the policy for the entire app.
We believe this to be a clear violation of the principle of
least privilege, as the ad library should allow cleartext for its
own connections, without interfering with the rest of the app.
However, we note that this current situation is not solely fault
of the ad library: with the current policy format, it would be
impossible to enumerate all possible domain names that the
ad library should be able to reach since this list is not known
in advance (and since the NSP cannot be changed at run-time).
We identiﬁed a conceptual limitation: the current policy format
allows developers to specifypolicies perdomain,butwe believe
a betterabstraction forpolicy speciﬁcation to be perpackage. In
an ideal world, the ad library should be able to express that only
the connections that are initiated by the MoPub library itself
shouldbesubjecttousecleartext,withouttheneedofweakening
the rest of the app. Guided by these insights, we designed and
implemented a drop-in extension to the NSP that would address
this concern. We discuss this proposal in the next section.
7 Network Security Policy Extension
As previously discussed, third-party libraries can signiﬁcantly
weakentheNSPofanapp,andadlibrariesactuallyoftendoso.In
somescenarios,however,itisverychallengingforadlibrariesto
“dobetter.”Infact,thecomplexityoftheadecosystemmaymake
it impossible, for example, to know in advance which domain
names require HTTP connections, thus leaving the ad library
developerstoasktoallowcleartextfortheentireapp. Webelieve
the current format of the policy is fundamentally limited. The
current policy allows developers to specify diﬀerent policies at
the granularity level of domain names: we argue that, in some
scenarios (e.g., ad libraries), this is the wrong abstraction level.
This section discusses our proposal for an extension of the
NSPformattoallowforthespeciﬁcationofpoliciesatadiﬀerent
granularity: app components,identiﬁedby theirpackage names.
Our New Extension. The core idea behind the extension is
to allow a developer to bind a speciﬁc policy to a speciﬁc
package name(s). To this end, we introduce a new XML node,
package-config, which allows developers to specify custom
policies for speciﬁc external libraries, without the need to
modify (and negatively aﬀect) the policy of the main app. To
ease the explanation, consider the following concrete example:
This policy speciﬁes that, by default, all HTTP traﬃc should