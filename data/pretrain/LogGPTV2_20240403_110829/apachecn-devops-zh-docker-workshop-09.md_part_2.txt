    web.3        nginx:latest     Pending 2 minutes ago
      "no suitable node (1 node…"
    \_ web.3     nginx:latest     Shutdown 2 minutes ago
    ```
12.  Run the `docker node ls` command:
    ```
    docker node ls
    ```
    这表明您的节点已准备好，但处于`Drain`的`AVAILABILITY`状态:
    ```
    ID         HOSTNAME          STATUS    AVAILABILITY
      MANAGER STATUS
    j2qx.. *   docker-desktop    Ready     Drain
      Leader 
    ```
13.  Stop the service from running. Use the `service rm` command, followed by the service name (in this instance, `web`) to stop the service from running:
    ```
    docker service rm web
    ```
    显示的唯一输出将是您要删除的服务的名称:
    ```
    web
    ```
14.  You don't want to leave your node in a `Drain` state as you want to keep using it through the rest of the exercises. To get the node out of a `Drain` state and prepare to start managing swarm, set the availability to `active` with the following command using your node ID:
    ```
    docker node update --availability active j2qxrpf0a1yhvcax6n2ajux69
    ```
    该命令将返回节点的哈希值，每个用户的哈希值都不同。
15.  Run the `node ls` command:
    ```
    docker node ls
    ```
    现在它将显示我们节点的可用性`Active`，并准备好您的服务再次运行:
    ```
    ID         HOSTNAME          STATUS    AVAILABILITY
      MANAGER STATUS
    j2qx.. *   docker-desktop    Ready     Active
      Leader 
    ```
16.  Use the `docker node inspect` command with the `--format` option and search for the `ManagerStatus.Reachability` status to ensure that your node is reachable:
    ```
    docker node inspect j2qxrpf0a1yhvcax6n2ajux69 --format "{{ .ManagerStatus.Reachability }}"
    ```
    如果节点可用，可以联系，应该会看到`reachable`的结果:
    ```
    reachable
    ```
17.  Search for `Status.State` to ensure that the node is ready:
    ```
    docker node inspect j2qxrpf0a1yhvcax6n2ajux69 --format "{{ .Status.State }}"
    ```
    这会产生`ready`:
    ```
    ready
    ```
本练习应该已经很好地向您展示了 Docker Swarm 是如何简化您的工作的，尤其是当您开始考虑将您的工作部署到生产环境中时。我们使用了 Docker Hub NGINX 映像，但是我们可以轻松地使用我们创建的任何服务作为我们的 Swarm 节点可用的 Docker 映像。
下一节将快速讨论如果你发现自己在 Swarm 节点上遇到麻烦时需要采取的一些行动。
# 集群节点故障排除
对于我们将在本章中进行的工作，我们将只使用单节点群来托管我们的服务。Docker Swarm 多年来一直在提供生产级环境。然而，这并不意味着您的环境永远不会有任何问题，尤其是当您开始在多节点群中托管服务时。如果您需要对集群上运行的任何节点进行故障排除，您可以采取许多步骤来确保纠正它们可能存在的任何问题:
*   **重启**:通常最简单的选择是重启或重启节点系统，看看这是否解决了您可能遇到的问题。
*   **Demote the node**: If the node is a manager on your cluster, try demoting the node using the `node demote` command:
    ```
    docker node demote 
    ```
    如果这个节点是领导者，它将允许其他管理节点之一成为群体的领导者，并希望解决您可能遇到的任何问题。
*   **Remove the node from the cluster**: Using the `node rm` command, you can remove the node from the cluster:
    ```
    docker node rm 
    ```
    如果节点没有与集群的其他节点正确通信，这也可能是一个问题，您可能需要使用`--force`选项从集群中删除该节点:
    ```
    docker node rm --force 
    ```
*   **Join back to the cluster**: If the preceding has worked correctly, you may be able to successfully join the node back onto the cluster with the `swarm join` command. Remember to use the token that you used before when joining the swarm:
    ```
    docker node swarm join --token  :
    ```
    注意
    如果您的服务在 Docker Swarm 上运行时仍然有问题，并且您已经纠正了 Swarm 节点的所有问题，Swarm 只是使用 Docker 来运行您的服务并将其部署到您环境中的节点上。任何问题都可以归结为您试图在 Swarm 上运行的容器映像的基本故障排除，而不是 Swarm 环境本身。
一群管理人员被称为“T2”法定人数“T3”，大多数管理人员需要就群的建议更新达成一致，例如添加新节点或缩减容器数量。正如我们在上一节中看到的，您可以通过运行`docker node ls`命令来监控集群管理器或节点的运行状况，使用管理器的标识，然后使用`docker node inspect`命令，如下所示:
```
docker node inspect 
```
注意
关于 Swarm 节点的最后一个注意事项是记住将服务部署到已经创建为 Docker 映像的节点。容器映像本身需要可以从中央 Docker 注册表下载，该注册表可供所有节点下载，而不是简单地构建在一个 Swarm 节点上。
虽然我们已经绕了一小段路来讨论如何对您的 Swarm 节点进行故障排除，但这不应该是在 Swarm 上运行服务的一个主要方面。本章的下一部分将进一步向您展示如何使用新的或现有的`docker-compose.yml`文件来自动将您的服务部署到 Docker Swarm 中。
# 从 Docker Compose 部署集群部署
使用 Docker Swarm 部署一个完整的环境很容易；如果您一直使用 Docker Compose 运行容器，您会看到大部分工作已经完成。这意味着您不需要像我们在本章前面部分所做的那样，在 Swarm 中逐个手动启动服务。
如果您已经有了一个`docker-compose.yml`文件来启动您的服务和应用，那么它很有可能会毫无问题地工作。Swarm 将使用`stack deploy`命令在 Swarm 节点上部署您的所有服务。您所需要做的就是提供`compose`文件并为栈指定一个名称:
```
docker stack deploy --compose-file  
```
栈的创建是快速和无缝的，但是在后台发生了很多事情来确保所有服务都正确运行，包括在所有服务之间建立网络以及按照所需的顺序启动每个服务。使用您在创建时提供的`swarm_name`运行`stack ps`命令将显示您部署中的所有服务是否都在运行:
```
docker stack ps 
```
一旦您使用完集群上的服务，或者您需要清理部署的所有内容，您只需使用`stack rm`命令，提供您在创建栈部署时提供的`swarm_name`。这将自动停止并清理群集中运行的所有服务，并为您重新分配给其他服务做好准备:
```
docker stack rm 
```
现在，由于我们知道了用于部署、运行和管理 Swarm 栈的命令，我们可以看看如何为我们的服务执行滚动更新。
# 群组服务滚动更新
Swarm 还能够对正在运行的服务执行滚动更新。这意味着，如果您的 Swarm 上运行的应用有新的更新，您可以创建一个新的 Docker 映像并更新您的服务，Swarm 将确保新映像在关闭旧版本的容器映像之前启动并成功运行。
对您在 Swarm 中运行的服务执行滚动更新只是运行`service update`命令。在下面的命令中，您可以看到新的容器映像名称和要更新的服务。Swarm 会处理剩下的:
```
docker service update --image  
```
您将很快有机会使用我们在这里解释的所有命令。在下面的例子中，您将使用 Django 和 PostgreSQL 创建一个小的测试应用。您将要设置的网络应用是非常基本的，因此不需要事先了解姜戈网络框架。简单地跟着做，我们将在练习中解释正在发生的事情。
## 练习 9.02:从 Docker Compose 部署你的群
在下面的练习中，您将使用`docker-compose.yml`使用 PostgreSQL 数据库和 Django web 框架创建一个基本的 web 应用。然后，您将使用此`compose`文件将您的服务部署到群中，而无需手动运行您的服务:
1.  首先，创建一个运行应用的目录。调用目录`swarm`并使用`cd`命令进入目录:
    ```
    mkdir swarm; cd swarm
    ```
2.  在新目录中为您的 Django 应用创建一个`Dockerfile`，并使用您的文本编辑器在下面的代码块中输入详细信息。`Dockerfile`将使用默认的`Python3`映像，设置与 Django 相关的环境变量，安装相关应用，并将代码复制到容器映像的当前目录:
    ```
    FROM python:3
    ENV PYTHONUNBUFFERED 1
    RUN mkdir /application
    WORKDIR /application
    COPY requirements.txt /application/
    RUN pip install -r requirements.txt
    COPY . /application/
    ```
3.  创建您的`Dockerfile`在上一步中使用的`requirements.txt`文件，以安装运行所需的所有相关应用。用文本编辑器添加以下两行，安装 Django 应用与 PostgreSQL 数据库通信所需的版本`Django`和`Psycopg2`:
    ```
    1 Django>=2.0,=2.7,<3.0
    ```
4.  使用文本编辑器创建一个`docker-compose.yml`文件。为您的数据库添加第一个服务，如下面的代码所示。`db`服务将使用来自 Docker Hub 的最新`postgres`映像，暴露端口`5432`，并为`POSTGRES_PASSWORD` :
    ```
    1 version: '3.3'
    2
    3 services:
    4   db:
    5     image: postgres
    6     ports:
    7       - 5432:5432
    8     environment:
    9       - POSTGRES_PASSWORD=docker
    ```
    设置环境变量
5.  `docker-compose.yml`文件的后半部分构建和部署您的 web 应用。在*第 10 行*中建立您的`Dockerfile`，暴露端口`8000`以从您的网络浏览器访问它，并设置数据库密码以匹配您的`db`服务。您还会注意到第 13 行*中的一个 Python 命令，该命令将启动 Django 应用的开发 web 服务器:
    ```
    10   web:
    11     build: .
    12     image: swarm_web:latest
    13     command: python manage.py runserver 0.0.0.0:8000
    14     volumes:
    15       - .:/application
    16     ports:
    17       - 8000:8000
    18     environment:
    19       - PGPASSWORD=docker
    20     depends_on:
    21       - db
    ```* 
6.  Run the following command to pull and build the `db` and `web` services in your `docker-compose.yml`. The command will then run `django-admin startproject`, which will create your basic Django project, named `chapter_nine`:
    ```
    docker-compose run web django-admin startproject chapter_nine .
    ```
    该命令应该返回以下输出，在其中您可以看到容器被拉出和构建:
    ```
    …
    Status: Downloaded newer image for postgres:latest
    Creating swarm_db_1 ... done
    Building web
    …
    Successfully built 41ff06e17fe2
    Successfully tagged swarm_web:latest
    ```
7.  The `startproject` command you ran in the previous step should have created some extra files and directories in your swarm directory. Run the `ls` command to list all the files and directories in the swarm directory:
    ```
    ls -l
    ```
    您之前创建了`Dockerfile`、`docker-compose.yml`文件和`requirements.txt`文件，但是现在容器的构建添加了`chapter_nine` Django 目录和`manage.py`文件:
    ```
    -rw-r--r--  1 user  staff  175  3 Mar 13:45 Dockerfile
    drwxr-xr-x  6 user  staff  192  3 Mar 13:48 chapter_nine
    -rw-r--r--  1 user  staff  304  3 Mar 13:46 docker-compose.yml
    -rwxr-xr-x  1 user  staff  634  3 Mar 13:48 manage.py
    -rw-r--r--  1 user  staff   36  3 Mar 13:46 requirements.txt
    ```
8.  To get your basic application running, you need to make some minor changes to the Django project settings. Open the `chapter_nine/settings.py` file with your text editor and locate the entry that starts with `DATABASES`. This controls how Django will connect to your database, and by default, Django is set up to work with an SQLite database. The `DATABASES` entry should look like the following:
    ```
    76 DATABASES = {
    77     'default': {
    78         'ENGINE': 'django.db.backends.sqlite3',
    79         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    80     }
    81 }
    ```
    作为我们安装的一部分，您有一个 PostgreSQL 数据库要部署到 Swarm，因此请使用以下八行代码编辑`DATABASES`设置，这样 Django 就可以访问这个 PostgreSQL 数据库:
    settings.py
    ```
    76 DATABASES = {
    77     'default': {