Figure 2), such a decision is not memorized by the host. The
connections will be re-established when the devices are paired
next time.
Weakness #3: Deceivable and Vague UI. When a user
browses the list of paired Bluetooth devices, he could see
the name and the icon of the device (example shown in
Figure 2), which is given by the device during the pairing
process. Though the information should be relevant to the
core functionality of the device, there is no way to certify
they are authentic. Previous research shows that a malicious
device can choose the same name as another validated device’s,
to trick the user during pairing [34]. In this work, we found
the icon can be manipulated as well for the same purpose.
In fact, Bluetooth speciﬁcation has deﬁned a list of Class
Device/Service (CoD) numbers [5] and each CoD number is
associated with one icon reserved by Android. By changing the
CoD number, the adversary can select the icon to be presented.
Another issue with Android UI is the lack of Bluetooth-
relevant information. For example, only two events relevant
to Bluetooth are prompted in the notiﬁcation bar: one showing
that the Bluetooth of the host is turned on, and another showing
that a remote device is connected. None of them reveals the
status of proﬁles.
Weakness #4: Silent Pairing with Device. Pairing is supposed
to have user to verify device identity, unless the bond has been
successfully set up before. However, we found pairing can be
completely hidden to the user even for the ﬁrst-time setup.
When pairing request is sent from the device side, Android
system will pop up the pairing dialog for user conﬁrmation.
However, if the phone initiates this process, there might be no
notiﬁcation presented. Speciﬁcally, when the device has neither
display ability nor input ability (e.g., headset), the pairing
falls into “Just Works” mode [6], because both numerical
Fig. 2: Bluetooth Menu of Android (Google Pixel 2). The area
in the red square shows the connection status - left one is
disconnected, right one is connected. The area in the purple
square lists the proﬁles currently in use, which can be adjusted
by the user.
comparison or PIN input method become impossible. In this
case, Android phone will not prompt to users. By manipulating
the device conﬁguration, this feature could be leveraged to pair
with a Bluetooth device silently.
Weakness #5: No Permission Management for Proﬁle. As
described in Section II-B, Android restricts whether an app can
access a Bluetooth device through a set of permissions. How-
ever, such a permission framework turns out to be too coarse-
grained and mis-aligned with proﬁles. In particular, not all
proﬁles are equally sensitive but which proﬁle can be accessed
is not regulated under the current permission framework. For
instance, the proﬁle regarding the Bluetooth keyboard (i.e.,
HID) should only be accessible to a system process. How-
ever, when a third-party app is granted BLUETOOTH_ADMIN
permission, the keyboard becomes accessible automatically.
Therefore, the app can further utilize the keyboard to inject
inputs and take control of the phone and we demonstrate a
working attack in Section V-A (the goal here is similar to
the attack proposed by Fratantonio et al. [25] but our attack
enables far more operations). So far, the protection on the
critical proﬁles relies on removing the relevant code from the
public APIs. However, we found a third-party app can still
access those proﬁles through Java reﬂection.
Though the issue of coarse-grained Bluetooth permission
has been mentioned by Naveed et al. [34], the focus is dif-
ferent. In particular, their work shows the permission does not
prevent an unauthorized app (Bluetooth permission granted) to
tamper the bond of an authorized device on the same phone.
The issue we studied here regards proﬁle.
IV. ATTACK OVERVIEW
The goal of our research is to explore and understand
how the Bluetooth peripherals can gain high privileges and
compromise user privacy in smartphones. Particularly, we
focus on the Android platform due to its prevalence and its
support of countless Bluetooth applications and services. In
this section, we ﬁrst introduce the adversary model in our
4
attacks. Then we describe the attack primitives and procedures.
In Section V, we further explore how the attacks are achieved
in real-world scenarios.
A. Adversary Model
In this study, we make two basic assumptions. We ﬁrst as-
sume a malicious app with Bluetooth permissions has been in-
stalled on the victim smartphone. Being granted with the Blue-
tooth permissions BLUETOOTH and BLUETOOTH_ADMIN
which are the standard and common permissions for typical
Bluetooth apps,
the malicious app will be able to estab-
lish the bond and connecting the proﬁles with Bluetooth
devices stealthily. Note that, since both BLUETOOTH and
BLUETOOTH_ADMIN are just the normal-level permissions,
the OS or Google Play will grant them to the malicious app
without user conﬁrmation. Therefore, this malicious app could
be disguised as any type of apps, not just a Bluetooth app. As
we will show later, such a malicious app can exploit the vul-
nerable designs in existing Android OS and Bluetooth devices
and elevate its capabilities. For example, without requesting
sensitive permissions or breaking the sandbox, it can capture
the UI of other apps and steal sensitive information.
We also assume a Bluetooth device has been compromised
and its ﬁrmware now contains malicious code. Adversaries
can achieve this goal in several different ways. For example,
they can ﬁrst compromise the SDK of Bluetooth devices,
which is similar to the attack of XcodeGhost [49]. Besides,
Bluetooth devices may be hacked by previous owners, sellers
or during the shipping process. What is more, the adversaries
may be able to exploit the security weakness of Over-The-
Air upgrading mechanism [22], especially with the help of
the malicious app previously installed. We have studied the
technical documents of popular Bluetooth chip-sets, including
Nordic [37], Silicon Labs [32], TI [27], and found that their
ﬁrmware veriﬁcation is mainly to guarantee the transmission
integrity (like CRC checksum, Hash values, etc), and there
is no integrity check based on digital signatures. For CSR,
another major Bluetooth chip-sets vendor, we do not have ac-
cess their technical document [43], but according to messages
from developers on GitHub [41], their OTA “protocol seems to
do challenge-response with a shared key rather than properly
signing the ﬁrmware”, which might be insecure if adversaries
could get the key via reverse engineering (and it would be left
for future studies).
A large number of previous works on Bluetooth security
focus on the vulnerabilities residing in the communication
protocols and implementation of the software stack. Different
to those works, we study the fundamental design ﬂaws, which
are much more difﬁcult to ﬁx.
To notice, previous works attacking the design ﬂaw of
Bluetooth stack or framework require the similar adversary
capabilities [34]. In Section VIII, we will discuss more about
the model and expansion of attacks.
B. Attack Procedure
Figure 3 illustrates the high-level attack procedures. We
assume the malicious app is running at the background on
user’s smartphone. The attack could be launched when the
screen is turned off, which indicates that the user is not around.
Fig. 3: Attack Flow. The existence of the dotted line depends. If
the device is not paired yet, the app can request pair stealthily.
Then, the app creates the bond with the malicious device and
set up the proﬁle channel. After that, the app issues commands
to the device to carry on the attack. We carefully design the
attack ﬂow to avoid any user interaction, making it hard to be
observed.
Attack Primitives. We ﬁrst describe the four attack primitives
that enable our attack. The design weaknesses discussed in
Section III are listed along with each primitive.
Changeable Proﬁle (Weakness #1, #2, #3). To hide
certain proﬁle from the user (e.g., HID proﬁle), we
instruct the device to add the proﬁle after pairing, and
remove it after the attack is completed. This could
be achieved by programing the device to broadcast
the service record related to the proﬁle using SDP.
Realizing the change of proﬁles is difﬁcult from
the user’s perspective: the device detail menu (see
Figure 2) would keep the same until the new proﬁle
is connected or the bond is reset. In addition, which
proﬁle is added is not shown in the notiﬁcation bar.
Changeable Icon (Weakness #3). Device icon is an
important indicator to help user know the functionali-
ties of the Bluetooth device. However, it can be easily
changed when the device modiﬁes the CoD number.
Table I shows the icons we use to mislead user. The
CoD number is composed of two ﬁelds. The ﬁrst ﬁeld
describes the Major Device Class. And the second
ﬁeld describes the optional Minor Device Class or the
Major Service Class, which can be set to all 0. If the
CoD number is not recognized by Android, a general
Bluetooth icon will be displayed.
Silent Pairing (Weakness #4). Previous research [34]
also constructed the
and app developers
similar
an
primitive. However,
they
[14]
rely
on
•
•
•
5
Detect phone statusBluetooth DeviceBluetooth App (on the phone)Android PhoneInform peripheral Change profiles to maliciousConnectConnectLaunch attacksFind suitable attack timeChange profiles to normalDestroy the evidence PairRequest pairPerform connectTABLE I: Bluetooth Device Icons.
Icon
CoD
Class Description
0x100
0x200
0x404
0x418
0x500
0x540
0x580
0x600
0x000
Computer
Phone
Audio/Video-Wearable Headset
Audio/Video-Headphones
Peripheral
Peripheral-Keyboard
Peripheral-Pointing device
Imaging
General Bluetooth
•
the
signatured
protected with
(setPairingConfirmation()), which
API
permission
is
BLUETOOTH_PRIVILEGED since Android
6.0.
In contrast, our attack does not require such API
use. As described before, we conﬁgure the remote
device to work under
the “Just Works” pairing
mode. Then, the app can invoke just one API named
createBond() using the identiﬁer (MAC) of the
device. Therefore, there is no manual conﬁrmation
involved.
Connecting Sensitive Proﬁle (Weakness #5). Our
attack relies on exploiting sensitive proﬁles on the
phone, which are supposed to be hidden from a third-
party app. However, those proﬁles can be still ac-
cessed regardless of the protection. Normally, Android
assumes the app creates a proxy class to operate
on a proﬁle, which encapsulates the IPC binder to
the Bluetooth system process. The proxy classes of
the sensitive proﬁles are not public, but when we
program our app using framework.jar from a real
phone instead of android.jar from Android SDK
[1], we can directly use the non-public classes and
methods, including the proxies of the hidden proﬁles.
For example, as shown in the following code snippet,
we invoke getProfileProxy() with a proﬁle
type INPUT_DEVICE as its parameter. If succeed,
we can receive the proxy object whose class is
BluetoothInputDevice. This class is non-public
and has a method connect(). Our app could invoke
this method to establish a channel to the input proﬁle
of the remote device.
1 final BluetoothDevice mDevice =
mBtAdapter.getRemoteDevice("MAC");
2 private BluetoothInputDevice mProfile;
3 mBtAdapter.getProfileProxy(this,new
BluetoothProfile.ServiceListenner()
4 { @override
5
public void onServiceConnected(int
profile,BluetoothProfile proxy){
6
mProfile=(BluetoothInputDevice)
proxy;
mProfile.connect(mDevice);
7
8 }
9 ...
10 },BluetoothProfile.INPUT_DEVICE);
Attack Phases. To deceive the user that the device is innocu-
ous when pairing, the device can pretend to be a smart speaker
or temperature sensor by using related icons and friendly
names. The whole pairing process could also be completed
stealthily. To communicate with the app, the device could use
RFCOMM (regulated by Serial Port Proﬁle), which is widely
adopted by app-device communication and no proﬁle will show
up in the menu of device details. Below we elaborate our attack
ﬂow.
1)
the malicious app starts,
it
API
6.0,
such
process
it’s not
compulsory for our
After
runs as an
Android background service or a scheduled job.
This service waits until the user is not around, by
checking whether the phone screen is off through
PowerManager or whether the time is at midnight.
If needed, the app will turn on Bluetooth through
the
BluetoothAdapter.enable()
and search for the other malicious device. After
requires
Android
scanning
permission.
ACCESS_COARSE_LOCATION
However,
attack
because the app could use the pre-stored device
address directly and this will not result in Bluetooth
scanning. As a result, the app could do silent pairing
to stealthily create a bond.
Now the device is waiting for the commands from the
app. Those commands are transmitted either through
an in-band channel (e.g., Bluetooth RFCOMM chan-
nel) or an off-band channel (e.g., an Internet server
connected by both).
Once receiving the commands, the device enables the
attack-speciﬁc proﬁle. Since the corresponding proﬁle
on the phone is sensitive, the app can use the proﬁle
connection primitive to establish the proﬁle channel.
In some scenarios, the device can take the ﬁrst action
to initiate the connection, and we discuss them in
details in Section V. The malicious device and the app
then leverage the capabilities of the enabled proﬁle
to attack the victim, like exﬁltrating sensitive data.
Finally, the device could disable the used proﬁle or
terminate the connection. Moreover, the app could
also unpair with the device using removeBond()
API to avoid the victim’s attention.
2)
3)
4)
5)
V. ATTACKS
In this section, we explore what kinds of attacks could
be achieved under the general attack model described in the
previous section. First we overview the supported Bluetooth
proﬁles on Android and the ones we exploit. Then we demon-
strate three types of concrete attacks through proﬁle abuse.
Exploited Proﬁles. Table II lists the proﬁles supported by
Android [2] with the corresponding usage scenarios. We do
not list the transport-layer proﬁles like Bluetooth Network
Encapsulation (BNEP), Object Exchange (OBEX) in this table
since they are used to support other proﬁles and do not directly
handle user information. In the list, Health Device Proﬁle
(HDP) and Serial Port Proﬁle (SPP) are used to carry data
for normal user apps, which can not be leveraged to attack the
phone directly. Device ID Proﬁle (DIP) helps SDP broadcast
extra device information. The remaining proﬁles are evaluated
for conducting our attack, and we identify three proﬁles which
6
TABLE II: Android Supported Proﬁles
TABLE III: HID Report Format
Name
Description
Usage
HID
PAN
HFP/HSP
SAP
MAP
PBAP
OPP
A2DP
AVRCP
DIP
HDP
SPP
Human Interface Device
Personal Area Networking
Hands-Free/Headset
SIM Access
Message Access
Phone Book Access