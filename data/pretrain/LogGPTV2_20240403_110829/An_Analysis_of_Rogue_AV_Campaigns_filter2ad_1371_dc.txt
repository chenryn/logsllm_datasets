### Privilege States Based Access Control for Fine-Grained Intrusion Response

#### 1. Access Control Enforcement Algorithm

```java
List<Role> roleList = getRoles(user);

// Iterate over each user
for (User user : users) {
    // Iterate over each ACL entry
    for (ACL acl : acls) {
        // Check for every role directly assigned to the user
        for (Role userRole : roleList) {
            // Check if the role in ACL is in GRANT state
            if (acl.getState() == GRANT) {
                if ((userRole.equals(acl.getRole()) && acl.getPrivilegeState().isGranted()) ||
                    (userRole.isAncestorOf(acl.getRole()) && acl.getPrivilegeState().isGranted()) ||
                    (userRole.hasPrivilege(acl.getPrivilege()))) {
                    return true;
                }
            } else {
                // Check if the role in ACL is in NEUTRAL state
                if (userRole.isDescendantOf(acl.getRole()) && acl.getPrivilegeState().isNeutral()) {
                    continue; // Continue looping through AclToCheck
                } else {
                    return true;
                }
            }
        }
    }
}
return false;
```

#### 2. Experimental Results

In this section, we present the experimental results comparing the performance of the access control enforcement mechanism in BASE:PostgreSQL and PSAC:PostgreSQL. Specifically, we measure the time required by the access control enforcement mechanism to check the state of a privilege, `test_priv`, for a user, `test_user`, on a database table, `test_table`. We vary the ACL Size parameter in our experiments.

- **For BASE:PostgreSQL**, the ACL Size is the number of entries in the `acl` column of the `pg_class` catalog.
- **For PSAC:PostgreSQL**, the ACL size is the combined number of entries in the `acl`, `acldeny`, `aclsuspend`, and `acltaint` columns.

Note that for these experiments, we do not maintain any privileges in the neutral orientation mode.

We perform two sets of experiments:

1. **Experiment 1**: Compares the access control overhead in the absence of a role hierarchy. The results are reported in Figure 2. As expected, the access control overhead for both BASE and PSAC PostgreSQL increases with the ACL Size. The key observation is that the access control overhead for PSAC:PostgreSQL is not much higher than that of BASE:PostgreSQL.

2. **Experiment 2**: Compares the access control overhead in the presence of a hypothetically large role hierarchy. We use a role hierarchy of 781 roles with a depth of 4. The edges and cross-links in the role hierarchy are randomly assigned. The rationale behind this setup is to observe a reasonable amount of overhead in the access control enforcement code. The role hierarchy is maintained in PSAC:PostgreSQL in a manner similar to that in BASE:PostgreSQL, where a role `rp` is the parent of a role `rc` if `rc` is assigned to `rp` using the `GRANT ROLE` command. A role and its assigned roles are stored in the `pg_auth_members` catalog. In the experiment, we randomly assigned 10 roles to the test user. To vary the size of the ACL on the test table, we developed a procedure to assign privileges on the test table to randomly chosen roles. The results of this experiment are reported in Figure 3. First, observe that the access check time in the presence of a role hierarchy is not much higher than that in the absence of a role hierarchy. This is mainly because we maintain a cache of the roles assigned to a user (directly or indirectly), thus preventing expensive role inheritance tests at runtime. Second, the access control enforcement algorithm of PSAC:PostgreSQL is very efficient, with a maximum time of approximately 97 microseconds for an ACL of size 512. This is not much higher than the maximum access control enforcement time in BASE:PostgreSQL, which stands at approximately 46 microseconds.

Overall, the two experiments confirm the extremely low overhead associated with our design in PSAC:PostgreSQL.

#### 3. Related Work

Access control models have been widely researched in the context of DBMSs. To the best of our knowledge, ours is the first solution formally introducing the concept of privilege states in an access control model.

- **Windows Operating System and NFS V4.1**: The implementation of the access control mechanism in the Windows operating system and Network File System protocol V4.1 is similar to the semantics of the taint privilege state. These systems use Discretionary Access Control Lists (DACLs) and System Access Control Lists (SACLs). A DACL is similar to a traditional ACL, while a SACL identifies actions that cause the system to generate a security log record. Our concept of privilege states is more general, as reflected by the semantics of the other states introduced in our work.
- **Privilege Orientation**: The up, down, and neutral privilege orientations (in terms of privilege inheritance) have been introduced by Jason Crampton. The main purpose of such privilege orientation in Crampton's work is to show how such a scheme can be used to derive a role-based model with multi-level secure policies. However, our main purpose for introducing the privilege orientation modes is to control the propagation of privilege states in a role hierarchy.
- **Anomaly Detection and Intrusion Response**: Much research has been carried out in the area of network and host-based anomaly detection mechanisms. Similarly, many intrusion response methods are in the context of networks and hosts. The fine-grained response actions we support are more suitable in the context of application-level anomaly detection systems, where there is an end-user interacting with the system. For example, re-authenticating users based on their anomalous mouse movements and forcing re-authentication in web applications to prevent CSRF attacks.
- **Survey of Intrusion Response Systems**: Foo et al. have presented a survey of intrusion response systems, but it is specific to distributed systems. Since our focus is on fine-grained response actions in the context of an application-level anomaly detection system, most of the techniques described in their survey are not applicable to our scenario.

#### 4. Conclusion

In this paper, we have presented the design, formal model, and implementation of a privilege state-based access control (PSAC) system tailored for a DBMS. The fundamental design change in PSAC is that a privilege, assigned to a principal on an object, has a state attached to it. We identify five states in which a privilege can exist: unassigned, granted, tainted, suspended, and denied. A privilege state transition to either the taint or suspend state acts as a fine-grained response to an anomalous request. We designed PSAC to take into account a role hierarchy and introduced the concept of privilege orientation to control the propagation of privilege states in a role hierarchy. We have extended the PostgreSQL DBMS with PSAC, describing various design issues. The low access control enforcement overhead in PostgreSQL extended with PSAC confirms that our design is very efficient.

#### References

1. Access control lists in win32 (June 7, 2009), <http://msdn.microsoft.com/en-us/library/aa374872VS.85.aspx>
2. Incits/iso/iec 9075. SQL-99 standard (January 2, 2009), <http://webstore.ansi.org/>
3. NFS version 4 minor version 1 (June 7, 2009), <http://www.ietf.org/internet-drafts/draft-ietf-nfsv4-minorversion1-29.txt>
4. Oracle database security guide 11g release 1 (11.1) (January 2, 2009), <http://download.oracle.com/docs/cd/B28359_01/network.111/b28531/toc.htm>
5. The PostgreSQL Global Development Group. PostgreSQL 8.3 (June 7, 2009), <http://www.postgresql.org/>
6. PostgreSQL Global Development Group. PostgreSQL 8.3 documentation (January 2, 2009), <http://www.postgresql.org/docs/8.3/static/sql-grant.html>
7. SQL Server 2008 books online. Identity and access control (database engine) (January 2, 2009), <http://msdn.microsoft.com/en-us/library/bb510418(SQL.100).aspx>
8. Bertino, E., Kamra, A., Terzi, E., Vakali, A.: Intrusion detection in RBAC-administered databases. In: ACSAC, pp. 170–182. IEEE Computer Society, Los Alamitos (2005)
9. Bertino, E., Samarati, P., Jajodia, S.: An extended authorization model for relational databases. IEEE Transactions on Knowledge and Data Engineering 9(1), 85–101 (1997)
10. Bertino, E., Sandhu, R.: Database security—concepts, approaches, and challenges. IEEE Transactions on Dependable and Secure Computing 2(1), 2–19 (2005)
11. Chandramouli, R., Sandhu, R.: Role-based access control features in commercial database management systems. In: National Information Systems Security Conference, pp. 503–511
12. Crampton, J.: Understanding and developing role-based administrative models. In: ACM Conference on Computer and Communications Security, pp. 158–167 (2005)
13. Foo, B., Glause, M., Modelo-Howard, G., Wu, Y.-S., Bagchi, S., Spafford, E.H.: Information Assurance: Dependability and Security in Networked Systems. Morgan Kaufmann, San Francisco (2007)
14. Kamra, A., Bertino, E.: Design and implementation of an intrusion response system for relational databases. IEEE Transactions on Knowledge and Data Engineering, TKDE (to appear 2010)
15. Kamra, A., Bertino, E., Terzi, E.: Detecting anomalous access patterns in relational databases. The International Journal on Very Large Data Bases, VLDB (2008)
16. Patcha, A., Park, J.-M.: An overview of anomaly detection techniques: Existing solutions and latest technological trends. Computer Networks 51(12), 3448–3470 (2007)
17. Pusara, M., Brodley, C.E.: User re-authentication via mouse movements. In: ACM Workshop on Visualization and Data Mining for Computer Security (VizSEC/DMSEC), pp. 1–8. ACM, New York (2004)
18. Sandhu, R., Ferraiolo, D., Kuhn, R.: The NIST model for role-based access control: Towards a unified standard. In: ACM Workshop on Role-based Access Control, pp. 47–63 (2000)
19. Somayaji, A., Forrest, S.: Automated response using system-call delays. In: Proceedings of the 9th USENIX Security Symposium, p. 185. USENIX Association, Berkeley (2000)
20. Toth, T., Krügel, C.: Evaluating the impact of automated intrusion response mechanisms, pp. 301–310. IEEE Computer Society, Los Alamitos (2002)

### Abusing Social Networks for Automated User Profiling

**Authors:**
- Marco Balduzzi, Institute Eurecom, Sophia Antipolis
- Christian Platzer, Secure Systems Lab, Technical University of Vienna
- Thorsten Holz, Secure Systems Lab, Technical University of Vienna
- Engin Kirda, Institute Eurecom, Sophia Antipolis
- Davide Balzarotti, Institute Eurecom, Sophia Antipolis
- Christopher Kruegel, University of California, Santa Barbara

**Abstract:**

Recently, social networks such as Facebook have experienced a huge surge in popularity. The amount of personal information stored on these sites calls for appropriate security precautions to protect this data.

In this paper, we describe how we are able to take advantage of a common weakness, namely the fact that an attacker can query popular social networks for registered email addresses on a large scale. Starting with a list of about 10.4 million email addresses, we were able to automatically identify more than 1.2 million user profiles associated with these addresses. By automatically crawling and correlating these profiles, we collect detailed personal information about each user, which we use for automated profiling (i.e., to enrich the information available from each user). Having access to such information would allow an attacker to launch sophisticated, targeted attacks, or to improve the efficiency of spam campaigns. We have contacted the most popular providers, who acknowledged the threat and are currently implementing our proposed countermeasures. Facebook and XING, in particular, have recently fixed the problem.