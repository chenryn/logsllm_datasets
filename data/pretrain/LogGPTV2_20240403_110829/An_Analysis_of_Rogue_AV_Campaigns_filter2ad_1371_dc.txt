r o l e l i s t = g e t
r o l e s ( i n u s e r ) ;
/ / Do t h e
f o r each u s e r
{
/ / Do t h e
f o r each a c l
{
f o l l o w i n g f o r
e v e r y
r o l e d i r e c t l y a s s i g n e d t o i n u s e r
r o l e
i n u s e r
r o l e l i s t
f o l l o w i n g f o r
e v e r y
r o l e
e n t r y
i n A cl T oCheck
r o l e
i n AclToCheck
( s t a t e t o c h e c k == GRANT)
i f
{
Privilege States Based Access Control for Fine-Grained Intrusion Response
417
/ / O r i e n t a t i o n o f p r i v i l e g e s
i f
r o l e == a c l
r o l e ) AND a c l
( ( u s e r
o f
a c l
r o l e h a s
i n p r i v )
i n GRANT s t a t e
i s UP
r o l e OR u s e r
r o l e
i s an ANCESTOR
r o l e OR u s e r
r o l e
r o l e h a s
i s a
i n p r i v )
r e t u r n t r u e ;
}
e l s e
i f
( ( u s e r
r o l e == a c l
DESCENDANT o f
a c l
r o l e ) AND a c l
i f
( a c l
r o l e h a s
i n p r i v i n NeutACL )
c o n t i n u e
l o o p i n g t h r o u g h AclToCheck ;
e l s e
r e t u r n t r u e ;
{
}
}
}
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
r e t u r n f a l s e ;
72
73 }
Lising 1. Access Control Enforcement Algorithm in PSAC:PostgreSQL
3.2 Experimental Results
In this section, we report the experimental results comparing the performance of the
access control enforcement mechanism in BASE:PostgreSQL and PSAC:PostgreSQL.
Speciﬁcally, we measure the time required by the access control enforcement mech-
anism to check the state of a privilege, test priv, for a user, test user, on a
database table, test table. We vary the ACL Size parameter in our experiments. For
BASE:ProstgreSQL, the ACL Size is the number of entries in the acl column of the
pg class catalog. For PSAC:PostgreSQL, the ACL size is the combined number of
entries in the acl, the acldeny, the aclsuspend, and the acltaint columns. Note that
for the purpose of these experiments we do not maintain any privileges in the neutral
orientation mode.
We perform two sets of experiments. The ﬁrst experiment compares the access con-
trol overhead in the absence of a role hierarchy. The results are reported in Figure 2.
As expected, the access control overhead for both BASE and PSAC PostgreSQL in-
creases with the ACL Size. The key observation is that the access control overhead for
PSAC:PostgreSQL is not much higher than that of BASE:PostgreSQL.
The second experiment compares the access control overhead in the presence of a hy-
pothetically large role hierarchy. We use a role hierarchy of 781 roles with depth equal to
4. The edges and cross-links in the role hierarchy are randomly assigned. The rationale
behind such set-up is that we want to observe a reasonable amount of overhead in the ac-
cess control enforcement code. The role hierarchy is maintained in PSAC:PostgreSQL
in a manner similar to that in BASE:PostgreSQL, that is, a role rp is the parent of a
role rc if rc is assigned to rp using the GRANT ROLE command. A role and its as-
signed roles are stored in the pg auth members catalog [5]. Next, in the experiment,
we randomly assigned 10 roles to the test user. In order to vary the size of the ACL
418
A. Kamra and E. Bertino
 100
 80
 60
 40
 20
)
s
d
n
o
c
e
s
o
r
c
m
i
(
i
e
m
T
k
c
e
h
C
s
s
e
c
c
A
 0
 0
BASE:PostgreSQL
SAACS:PostgreSQL
 100
 200
 300
 400
 500
 600
ACL Size
Lising 2. Exp 1: Access Control Enforcement Time in BASE and PSAC PostgreSQL in the ab-
sence of a role hierarchy
on the test table, we developed a procedure to assign privileges on the test table to
randomly chosen roles. Figure 3 reports the results of this experiment. First, observe
that the access check time in the presence of a role hierarchy is not much higher than
that in the absence of a role hierarchy. As mentioned before, this is mainly because we
maintain a cache of the roles assigned to a user (directly or indirectly), thus preventing
expensive role inheritance tests at the run-time. Second, the access control enforcement
algorithm of PSAC:PostgreSQL reported in Section 3.1 is very efﬁcient with a maxi-
mum time of approximately 97 microseconds for an ACL of size 512. Also, it is not
 200
 150
 100
 50
)
s
d
n
o
c
e
s
o
r
c
m
i
(
i
e
m
T
k
c
e
h
C
s
s
e
c
c
A
 0
 0
BASE:PostgreSQL
SAACS:PostgreSQL
 100
 200
 300
 400
 500
 600
ACL Size
Lising 3. Exp 2: Access Control Enforcement Time in BASE and PSAC PostgreSQL in the pres-
ence of a role hierarchy
Privilege States Based Access Control for Fine-Grained Intrusion Response
419
much higher than the maximum access control enforcement time in BASE:PostgreSQL
which stands at approximately 46 microseconds.
Overall, the two experiments conﬁrm the extremely low overhead associated with
our design in PSAC:PostgreSQL.
4 Related Work
Access control models have been widely researched in the context of DBMSs [10]. To
the best of our knowledge, ours is the ﬁrst solution formally introducing the concept of
privilege states in an access control model.
The implementation of the access control mechanism in the Windows operating sys-
tem [1], and Network File System protocol V4.1 [3] is similar to the semantics of the
taint privilege state. In such implementation, the security descriptor of a protected re-
source can contain two types of ACLs: a Discretionary Access Control List (DACL),
and a System Access Control List (SACL). A DACL is similar to the traditional ACL
in that it identiﬁes the principals that are allowed or denied some actions on a protected
resource. A SACL, on other hand, identiﬁes the principals and the type of actions that
cause the system to generate a record in the security log. In that sense, a SACL ACL
entry is similar to a PSAC ACL entry with taint privilege state. Our concept of priv-
ilege states, however, is more general as reﬂected by the semantics of the other states
introduced in our work.
The up,down, and neutral privilege orientations (in terms of privilege inheritance)
have been introduced by Jason Crampton [12]. The main purpose for such privilege
orientation in [12] is to show how such scheme can be used to derive a role-based
model with multi-level secure policies. However, our main purpose for introducing the
privilege orientation modes is to control the propagation of privilege states in a role
hierarchy.
Much research work has been carried out in the area of network and host based
anomaly detection mechanisms [16]. Similarly, much work on intrusion response meth-
ods is also in the context of networks and hosts [19,20]. The ﬁne-grained response ac-
tions that we support in this work are more suitable in the context of application level
anomaly detection systems in which there is an end user interacting with the system.
In that context, an approach to re-authenticate users based on their anomalous mouse
movements has been proposed in [17]. In addition, many web applications may force
a re-authentication (or a second factor of authentication) in cases when the original au-
thenticator has gone stale (for example expired cookies) to prevent cross-site request
forgery (CSRF) attacks.
Foo et. al. [13] have also presented a survey of intrusion response systems. How-
ever, the survey is speciﬁc to distributed systems. Since the focus of our work is on
ﬁne-grained response actions in the context of an application level anomaly detection
system, most of the techniques described in [13] are not applicable our scenario.
5 Conclusion
In this paper, we have presented the design, formal model and implementation of a priv-
ilege state based access control (PSAC) system tailored for a DBMS. The fundamental
420
A. Kamra and E. Bertino
design change in PSAC is that a privilege, assigned to a principal on an object, has a
state attached to it. We identify ﬁve states in which a privilege can exist namely, unas-
sign, grant, taint, suspend and deny. A privilege state transition to either the taint or
the suspend state acts as a ﬁne-grained response to an anomalous request. We design
PSAC to take into account a role hierarchy. We also introduce the concept of privilege
orientation to control the propagation of privilege states in a role hierarchy. We have
extended the PostgreSQL DBMS with PSAC describing various design issues. The low
access control enforcement overhead in PostgreSQL extended with PSAC conﬁrms that
out design is very efﬁcient.
References
1. Access control lists in win32 (June 7, 2009),
http://msdn.microsoft.com/en-us/library/aa374872VS.85.aspx
2. Incits/iso/iec 9075. sql-99 standard (January 2, 2009), http://webstore.ansi.org/
3. Nfs version 4 minor version 1 (June 7, 2009),
http://www.ietf.org/internet-drafts/
draft-ietf-nfsv4-minorversion1-29.txt
4. Oracle database security guide 11g release 1 (11.1) (January 2, 2009),
http://download.oracle.com/docs/cd/B28359 01/
network.111/b28531/toc.htm
5. The postgresql global development group. postgresql 8.3 (June 7, 2009),
http://www.postgresql.org/
6. Postgresql global development group. postgresql 8.3 documentation (January 2, 2009),
http://www.postgresql.org/docs/8.3/static/sql-grant.html
7. Sql server 2008 books online. identity and access control (database engine) (January 2, 2009),
http://msdn.microsoft.com/en-us/library/bb510418(SQL.100).aspx
8. Bertino, E., Kamra, A., Terzi, E., Vakali, A.: Intrusion detection in rbac-administered
databases. In: ACSAC, pp. 170–182. IEEE Computer Society, Los Alamitos (2005)
9. Bertino, E., Samarati, P., Jajodia, S.: An extended authorization model for relational
databases. IEEE Transactions on Knowledge and Data Engineering 9(1), 85–101 (1997)
10. Bertino, E., Sandhu, R.: Database security-concepts, approaches, and challenges. IEEE
Transactions on Dependable and Secure Computing 2(1), 2–19 (2005)
11. Chandramouli, R., Sandhu, R.: Role based access control features in commercial database
management systems. In: National Information Systems Security Conference, pp. 503–511
12. Crampton, J.: Understanding and developing role-based administrative models. In: ACM
Conference on Computer and Communications Security, pp. 158–167 (2005)
13. Foo, B., Glause, M., Modelo-Howard, G., Wu, Y.-S., Bagchi, S., Spafford, E.H.: Informa-
tion Assurance: Dependability and Security in Networked Systems. Morgan Kaufmann, San
Francisco (2007)
14. Kamra, A., Bertino, E.: Design and implementation of a intrusion response system for rela-
tional database. IEEE Transactions on Knowledge and Data Engineering, TKDE (to appear
2010)
15. Kamra, A., Bertino, E., Terzi, E.: Detecting anomalous access patterns in relational
databases. The International Journal on Very Large Data Bases, VLDB (2008)
16. Patcha, A., Park, J.-M.: An overview of anomaly detection techniques: Existing solutions
and latest technological trends. Computer Networks 51(12), 3448–3470 (2007)
Privilege States Based Access Control for Fine-Grained Intrusion Response
421
17. Pusara, M., Brodley, C.E.: User re-authentication via mouse movements. In: ACM Workshop
on Visualization and Data Mining for Computer Security (VizSEC/DMSEC), pp. 1–8. ACM,
New York (2004)
18. Sandhu, R., Ferraiolo, D., Kuhn, R.: The nist model for role-based access control: Towards
a uniﬁed standard. In: ACM Workshop on Role-based Access Control, pp. 47–63 (2000)
19. Somayaji, A., Forrest, S.: Automated response using system-call delays. In: Proceedings of
the 9th USENIX Security Symposium, p. 185. USENIX Association, Berkeley (2000)
20. Toth, T., Kr¨ugel, C.: Evaluating the impact of automated intrusion response mechanisms, pp.
301–310. IEEE Computer Society, Los Alamitos (2002)
Abusing Social Networks for Automated User Proﬁling
Marco Balduzzi1, Christian Platzer2, Thorsten Holz2,
Engin Kirda1, Davide Balzarotti1, and Christopher Kruegel3
1 Institute Eurecom, Sophia Antipolis
2 Secure Systems Lab, Technical University of Vienna
3 University of California, Santa Barbara
Abstract. Recently, social networks such as Facebook have experienced a huge
surge in popularity. The amount of personal information stored on these sites calls
for appropriate security precautions to protect this data.
In this paper, we describe how we are able to take advantage of a common
weakness, namely the fact that an attacker can query popular social networks for
registered e-mail addresses on a large scale. Starting with a list of about 10.4 mil-
lion email addresses, we were able to automatically identify more than 1.2 million
user proﬁles associated with these addresses. By automatically crawling and cor-
relating these proﬁles, we collect detailed personal information about each user,
which we use for automated proﬁling (i.e., to enrich the information available
from each user). Having access to such information would allow an attacker to
launch sophisticated, targeted attacks, or to improve the efﬁciency of spam cam-
paigns. We have contacted the most popular providers, who acknowledged the
threat and are currently implementing our proposed countermeasures. Facebook
and XING, in particular, have recently ﬁxed the problem.