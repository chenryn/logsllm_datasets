## 前言
Hi, 这是`a case of cve study` 的第一部分. 做这个系列的起因源于自己想搭建一个`win32k`的`fuzzer`.
于是我阅读了`mwrlab`的这篇[博客(what the
fuzz)](https://labs.mwrinfosecurity.com/blog/what-the-fuzz/).
了解了一个`fuzzer`大概应该长什么样子. 之后,
又在`github`上面看到了[n3k](https://twitter.com/kiqueNissim)师傅[针对NDIS的fuzzer](https://github.com/IOActive/FuzzNDIS),
我阅读了相关的源码, 结合我前几天代码审计写的那些失败了的`POC`, 思考着自己的`fuzzer`的大体框架应该长什么样子,
于是写出了自己的第一个丑陋的`fuzzer`.
但是听起来不错, 可是`win32k`的fuzzer比单纯的`IOCTL`的`fuzzer`似乎要更麻烦一些. 在`win32k`当中, 为了触发漏洞,
`A`和`B`是有关系的, `C`和`B`又有关系.
与其说是去写一个针对传送畸形数据的`fuzzer`,去写一个针对畸形的关系的`fuzzer`好像会更有效果一些.
思路到这里之后就断了, 怎么去生成一个畸形的关系的`fuzzer`.
以前看过[泉哥](https://github.com/riusksk)的[一篇文章](http://riusksk.me/2019/01/06/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/).
说是一个`fuzzer`最好能够触发一个老的漏洞. 印象深刻. 所以开始调试一些老的漏洞, 希望能够抽象出一个模型来.
这篇文章相应的样例代码我把它放到了我的[github](https://github.com/redogwu/cve-study-write/tree/master/cve-2016-0038)上面. 文章的所牵涉的条件为`windows 7 x86 sp1系统`.
## cve-2016-3308概览.
`cve-2016-3308`的漏洞代码存在于`win32k!xxxInsertMenuItem`函数当中.
该函数当中调用了两次`MNLookUPMenuItem` 函数, `MNLookUPMenuItem`函数用于获取菜单的某个子项的具体内容的指针.
在第二次调用该函数的时候. 该函数采用的是递归查找. 通过特殊的构造, 我们获取的指针其实指向的是子项的子项. 后面进行copy操作的时候,
误认为是子项的位置. 导致内存破坏.(这一部分的疑惑请暂时保存. 阅读完后面的内容之后再来看这个绕口的地方).
    // [+] xxxInsertMenuItem
    if (wIndex != MFMWFP_NOITEM)
            pItem = MNLookUpItem(pMenu, wIndex, fByPosition, &pMenuItemIsOn);   // [+] 第二次调用MNLookUpItem
    }
    pMenu->cItems++;    // [+] 这个地方加一
    if (pItem != NULL) {
        // Move this item up to make room for the one we want to insert.
        memmove(pItem + 1, pItem, (pMenu->cItems - 1) * sizeof(ITEM) - ((char *)pItem - (char *)pMenu->rgItems));   // pItem进行填充, 然后把剩余的部分放进去
### cve-2016-3308 -- MNLookUPMenuItem函数
我们先来看`MNLookUPMenuItem`函数. 该函数的原型如下.
    PITEM MNLookUpItem(
        PMENU pMenu,    // [+] 从哪个菜单开始找
        UINT wCmd,      // [+] ID(0) 或 index(1)
        BOOL fByPosition,   // [+] 如果是FALSE, 以index方式进行查找
        PMENU *ppMenuItemIsOn)  // [+] 返回在哪一个菜单找到的
此时你可以鼠标右键随机点出一个菜单. 你会发现有很多项. 菜单子项里面又嵌套菜单子项, 每一个子项在内存当中以`tagITEM`的形式存储相关的信息.
该函数就是为了返回该子项在内存当中的位置.
  * pMenu: 该参数指向我们需要查找的菜单对象. 菜单对象在win32k当中以`tagMENU`的形式组织.
  * wCmd: 根据后面的fByPosition来决定.  
[+] 如果fByPosition为TRUE, 说明我们是通过排序顺序的形式查找. 比如我们上面的截图. 查看为第1项, 排序方式为第二项, 刷新为第三项.
此时的wCmd对应的就是第几项的意思.  
[+] 如果fByPosition为FALSE. 说明我们是按标识符来查找. 我们知道. 进程有PID可以来标识不同的进程. 菜单子项也有类似的观点.
我们可以给不同的菜单子项不同的wID. 来区分不同的菜单子项.
  * fByPosition: 见第二个参数
  * ppMenuItemIsOn: 用于存储我们是在哪个菜单当中找到的. 该函数的算法是递归算法. 所以我们有可能是在子项当中进行查找.
接着, 让我们来看相应的算法:
    if (fByPosition) 
    {
        if (wCmd cItems) 
        {
            pItemRet = &((PITEM)REBASEALWAYS(pMenu, rgItems))[wCmd];    
            if (ppMenuItemIsOn != NULL)
                *ppMenuItemIsOn = pMenu;
            return (pItemRet);
        } else
            return NULL;
    }
此时我们fByPosition的值为TRUE. 我们使用排序顺序的方式查找. tagMenu->rgItem成员变量指向菜单子项数组的第一项.
所以直接取下标即可获取. 类似于你要找a`[] = {1, 2, 3, 4, 5}`的第n项. 你只要`return a[n]`即可.
接着我们fByPosition为`FALSE`. 我们使用wID来进行查找.
    for (i = 0, pItem = REBASEALWAYS(pMenu, rgItems); i cItems;
            i++, pItem++) 
    {
        if (pItem->spSubMenu != NULL)
        {
            if (pItem->wID == wCmd)     // [+] ID相等
            {
                pMenuMaybe = pMenu;
                pItemMaybe = pItem;
            }
            pItemRet = MNLookUpItem((PMENU)REBASEPTR(pMenu, pItem->spSubMenu),
                    wCmd, FALSE, ppMenuItemIsOn);   // [+] 如果子菜单当中找到了 那么就返回子菜单当中的
            if (pItemRet != NULL)
                return pItemRet;
        } 
        else if (pItem->wID == wCmd)    // [+] 没有子菜单 就根据ID来判断
        {
                if (ppMenuItemIsOn != NULL)
                    *ppMenuItemIsOn = pMenu;
                return pItem;
        }
    }
该算法的思路是, 搜先判断当前菜单是否有子菜单. 如果有. 则进行递归查找. 否则直接判断当前子菜单是否符合要求.
### cve-2016-3308 -- xxxInsertMenuItem函数
先来看函数原型:
    BOOL xxxInsertMenuItem函数(   // [+] 这份代码存在一个漏洞   
        PMENU pMenu,        // [+] pMenu 进行插入操作的Menu对象的指针
        UINT wIndex,        // [+] 选择在哪个位置进行插入操作
        BOOL fByPosition,   // [+] 是根据Index还是根据ID
        LPMENUITEMINFOW lpmii,  // [+] 需要插入的信息
        PUNICODE_STRING pstrItem)   // [+] 没有逆向.
该函数对应的是`Windows API`的[InsertMenuItemA ](https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-insertmenuitema)函数.
psrtItem参数我并没有进行逆向, 但是猜测到应该是每个菜单子项的文字内容. 该函数的主要目的可以参见微软的文档:
    Inserts a new menu item at the specified position in a menu.
采用我二把刀的英文翻译就是为了向指定的菜单的某个具体位置插入一个新的菜单子项. 由于1, 2, 3参数和`MNLookUPMenuItem`函数类似,
在这里就不再做详细的解释. 让我们来看第四个参数.
  * lpmii: 该参数是一个LPMENUITEMINFOW指针. 官方文档上面有关于此[结构体](MENUITEMINFO)的详细解释. 该信息包含你要新插入子项的具体信息(包括wID等). 最后在内存当中以`tagITEM`的形式存在.
接着我们来看相应的算法. 看算法之前让我们自己模拟一下如果是我们来实现该算法我们会这么实现. 我们把该任务抽象一下. 简化如下:
    [+] 给定一个数组DWORD a[6] = {1, 2, 3, 4, 5, 6}. 我们需要在第3项插入一个9.
不考虑bug不考虑编译错误的情况下我们能快速写出一个算法:
    DWORD * ptr = &a[3]; // [+] 找到第三项的位置
    memcpy(ptr+1, ptr, (6-3) * sizeof(DWORD) ) // 此时挪出一个位置. 用于插入新的项. a变为这个样子. a[] = {1, 2, 3, 3, 4, 5, 6};
    a[3] = 9; // [+] 执行赋值操作.
这个虽然是一个bug多多的算法. 但是确实是最简单的实现模型. 微软的实现也基本上是这种思路. 只是把a[]换成了菜单子项的数组. 以及加了很多的检查.
我们先来看第一步:
    // 对应DWORD * ptr = &a[3]; // [+] 找到第三项的位置
     if (wIndex != MFMWFP_NOITEM) 
    { 
        pItem = MNLookUpItem(pMenu, wIndex, fByPosition, &pMenuItemIsOn);   // 查找wIndex对应的内容
        [...]
    }
首先第一次调用`MNLookUpItem`找到相应的位置.
接着我们再来看我们的第二步:
    // 对应memcpy(ptr+1, ptr, (6-3) * sizeof(DWORD) ) // 此时挪出一个位置. 用于插入新的项. a变为这个样子. a[] = {1, 2, 3, 3, 4, 5, 6};
    if (pItem != NULL) {
            // Move this item up to make room for the one we want to insert.
            memmove(pItem + 1, pItem, (pMenu->cItems - 1) * sizeof(ITEM) - ((char *)pItem - (char *)pMenu->rgItems));   // pItem进行填充, 然后把剩余的部分放进去
这个地方进行了挪菜单子项的操作.
接着调用`xxxSetLPITEMInfo`函数执行第三步操作.
    xxxSetLPITEMInfo(pMenu, pItem, lpmii, pstrItem)
听起来不错. 问题出在哪里呢?
首先我们来看`tagMENU`结构体.
`cItems`一共是该菜单有多少个子项. `cAlloced`是分配了多少个菜单子项的内存. 举个例子. 某个菜单一共有3个菜单项.
我们给他分配了8个菜单项的内内存. 当进行第四个菜单项的操作的时候. 我们把他插入分配的内存当中即可了. 但是特殊的情况是. 如果此时已经有8个菜单项.
需要插入第九个的时候. `cAlloc`分配的内存就不够第九个了. 所以我们需要进行重新的分配(cAlloc的分配是n*8的形式.
这一部分我是不断改变分配的项数, 然后调试验证). 于是在第二步和第三步之间, 先增加了一个操作.
我们来看第2.5步:
    if (pMenu->cItems >= pMenu->cAlloced)  // [+] a. cItem是现在有的对象 b. cAlloced是总共能够填充的对象
    {                                       // [+] 可以去创建一个简单的菜单 看下会分配几个对象
        if (pMenu->rgItems)     // [+] 如果pMenu->rgItems是存在的