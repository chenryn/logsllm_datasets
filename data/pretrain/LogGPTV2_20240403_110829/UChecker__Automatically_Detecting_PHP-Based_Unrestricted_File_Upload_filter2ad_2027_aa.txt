title:UChecker: Automatically Detecting PHP-Based Unrestricted File Upload
Vulnerabilities
author:Jin Huang and
Yu Li and
Junjie Zhang and
Rui Dai
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
UChecker: Automatically Detecting PHP-Based
Unrestricted File Upload Vulnerabilities
Jin Huang(cid:2), Yu Li(cid:2), Junjie Zhang(cid:2), and Rui Dai†
(cid:2)Wright State University, †University of Cincinnati
{huang.70, li.137, junjie.zhang}@wright.edu, PI:EMAIL
Abstract—Unrestricted ﬁle upload vulnerabilities enable at-
tackers to upload and execute malicious scripts in web servers.
We have built a system, namely UChecker, to effectively and
automatically detect such vulnerabilities in PHP server-side web
applications. Towards this end, UChecker ﬁrst interprets abstract
syntax trees (AST) of program source code to perform symbolic
execution. It then models vulnerabilities using SMT constraints
and further leverages an SMT solver to verify the satisﬁability
of these constraints. UChecker features a novel vulnerability-
oriented locality analysis algorithm to reduce the workload of
symbolic execution, an AST-driven symbolic execution engine
with compact data structures, and rules to translate PHP-
based constraints into SMT-based constraints by mitigating their
semantic gaps. Experiments based on real-world examples have
demonstrated that UChecker has accomplished a high detection
accuracy. In addition, it detected three vulnerable PHP scripts
that are previously unknown.
Keywords—web security, vulnerability, detection, symbolic
execution, program analysis
I. INTRODUCTION
Web applications with unrestricted ﬁle upload vulnera-
bilities will allow attackers to upload a ﬁle with malicious
code, which can be executed on the server. The uploaded
ﬁle, once executed, could be used to launch a variety of
attacks such as installing web shells [1], contaminating
web applications, spreading malware, and phishing. Such
vulnerabilities are particularly signiﬁcant for server side
scripts (e.g., those with extensions such as “.php”, “.asp”,
and “.js”) that are treated as automatically executable,
requiring no ﬁle system permissions for execution. File
upload vulnerabilities are taken as top web vulnerabilities
by OWASP [2]; they have also been recognized as one of
most common vulnerability types [3] for WordPress, a lead-
ing PHP-based open-source content management system
(CMS) [4].
It is therefore of urgent importance to detect unre-
stricted ﬁle upload vulnerabilities. Unfortunately, despite
active case studies [5], [6], a systematic detection method
is still missing. To this end, we have built a system, namely
UChecker, to detect PHP server-side web applications with
unrestricted ﬁle upload vulnerabilities. UChecker currently
focuses on PHP considering its dominating role in imple-
menting server-side web applications. We proposed follow-
ing design objectives for UChecker:
• Automated: UChecker will be fully automated, requir-
• Effective and Efﬁcient: UChecker can detect vulnerable
ing no users’ intervention.
web applications to achieve high accuracy with reason-
able consumption of computational resources.
• Source-Code-Focused: UChecker can offer developers
with precise source-code-level formation of the pro-
gram such as lines of code that are relevant to the
vulnerability.
[8]. Different
In order to accomplish these objectives, UChecker per-
forms automated symbolic execution to model conditions
to exploit a vulnerability. These conditions are expressed
using SMT constraints and veriﬁed using an SMT solver
with provable accuracy [7],
from existing
symbolic execution methods [9], [10] that use intermediate
representation (IR) such as static single assignment (i.e.,
SSA), UChecker performs symbolic execution directly using
abstract syntax trees (AST) derived from web applications.
Compared to after-compilation IR, AST offers unique ad-
vantages since it enables the one-to-one mapping between
AST nodes and lines of source code. Such mapping makes
possible the identiﬁcation of source code that are directly
relevant to the vulnerability. This not only offers developers
with immediate source-code-level feedbacks, but also facil-
itates various vulnerability-mitigation applications such as
annotation and visualization.
Building UChecker, however,
is faced with signiﬁcant
challenges. First, symbolic execution is computationally
expensive and known to suffer from the path explosion
challenge [11]. Web applications, unfortunately, are usually
sizable, implying a large number of execution paths. Second,
the PHP programming language has signiﬁcant semantic
gaps compared to languages used by SMT solvers. For
example, PHP is dynamic-typing while SMT solvers are
static-typing. Finally, abstract syntax trees features complex
tree structures and a variety of source-code-level operations,
making it impossible to applying symbolic execution meth-
ods designed for IRs such as SSA and its variants.
In order to systematically address these challenges, we
have made the following contributions:
• We have designed a novel algorithm to drastically
reduce the workload of symbolic execution using
vulnerability-oriented locality analysis.
• We have designed an interpreter to perform context-
sensitive symbolic execution using AST, modeling vul-
nerabilities using PHP-based operations, functions, and
symbolic values in the form of s-expressions.
• We have designed a set of rules to translates PHP-based
vulnerability models into SMT constraints by mitigating
semantic gaps between PHP and the SMT language.
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00064
581
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
2
Client
(Attacker)
Server
(Vulnerable)
1
4
Unrestricted-File-Upload.php
3
5
Fig. 1: A typical scenario of unrestricted ﬁle upload vulnerability
• We have implemented UChecker and evaluated it using
13 vulnerable and 28 non-vulnerable real-world PHP
applications. UChecker has detected 12 out of 13 vul-
nerable applications at the cost of introducing 2 false
positives out of 28 benign samples.
• UChecker has also detected 3 potentially-exploitable
WordPress plugins, which, to the best of our knowl-
edge, have not been previously reported.
II. BACKGROUND
Figure 1 presents an example of a server script with
an unrestricted ﬁle upload vulnerability. In this example,
the web server responds the client with a webpage for
image uploading. Its sample source code is shown in 1(cid:2)
and its presentation to the client user is presented in 2(cid:2).
The client (an attacker), instead of uploading an image,
uploads a PHP ﬁle named UnrestrictedFileUpload.php
as displayed in 3(cid:2), whose source code is also mani-
fested. The server side program saves the uploaded ﬁle
(using move_uploaded_file(esr c,ed st )) to the local direc-
tory without validating the extension of the uploaded ﬁle
(see 4(cid:2)). Later, the attacker accesses the uploaded ﬁle as
presented in 5(cid:2). Since this uploaded ﬁle has “.php” as
extension, it will be executed by server. Speciﬁcally, “PHP
executed!” is the execution result of the uploaded script
named UnrestrictedFileUpload.php. One root cause of
this vulnerability is that it does not check the extension of
the ﬁle to be permanently saved. Therefore, executables ﬁles
(i.e., those with “.php” extensions) can be uploaded.
The ﬁle uploading function is usually implemented us-
ing the “ﬁle” input type with a particular name assigned in
the script from server to the client (i.e., “userpic” in this
case), as shown in 1(cid:2). When the ﬁle is transmitted to the
server, the server retrieves client-offered information such
as the original ﬁle name and the ﬁle type. It also identiﬁes
the possible transmission error and calculates the ﬁle size.
The server saves this ﬁle in the local ﬁle system using a
temporal name. Such information is stored in a built-in
superglobal variable, namely $_FILES, which is automati-
cally enabled when the “ﬁle” input type is used. Speciﬁcally,
$_FILES can be considered as a two-dimensional array (i.e.,
582
$_FILES[i][j]), where both indices are strings. The ﬁrst index
refers to the ﬁle name; accessing $_FILES using the ﬁrst
index returns an array with a pre-structured array. For
example, $_FILES[‘userpic’] returns such array for the ﬁle
submitted through “userpic”. The second index refers to
properties of this ﬁle, such as the original ﬁle name, the type
information, the temporal ﬁlename, the error information,
and the size of the ﬁle, which are indexed by “name”, “type”,
“tmp_name”, “error”, or “size”, respectively.
As indicated in 4(cid:2) of Figure 1, $ﬁle refers to the pre-
structured array for the ﬁle “userpic”. A path is then created
to store the ﬁle, which is composed of the directory (i.e.,
$uploaddir[‘path’]) and the original ﬁlename (i.e., base-
name($ﬁle[‘name’])). Speciﬁcally, basename($ﬁle[‘name’])
returns Unrestricted-File-Upload.php. As indicated by
the function name, “move_uploaded_ﬁle($ﬁle[’tmp_name’],
$uploadﬁle)” moves the uploaded PHP script to a direc-
tory and name it as Unrestricted-File-Upload.php. Since
its extension is “.php”, Unrestricted-File-Upload.php
will be executed when it
than
move_uploaded_file(esr c,ed st ), another function, namely
file_put_content(ed st ,esr c ),
is also commonly used to
save an uploaded ﬁle.
requested. Other
is
III. SYSTEM DESIGN
Figure 2 presents the architectural overview of UChecker,
which has 6 major phases.
• Parsing: The input of UChecker is a set of PHP ﬁles
for a web application, where UChecker parses them to
generate AST(s).
• Vuln-Oriented Locality Analysis: UChecker identiﬁes
a small fraction of code, in the form of AST(s), which
is relevant to the vulnerability, aiming at reducing the
workload of symbolic execution. (see Sec. III-A)
• AST-Based Symbolic Execution: UChecker next per-
forms symbolic execution on a small fraction of AST
using a novel, compact data structure named heap
graph. (see Sec. III-B)
graph,
UChecker models vulnerabilities using two constraints
Modeling:
• Vulnerability
Using
heap
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
(1) Parser
(2) Locality Analysis
PHP Source 
Code
DNS Streams
DNS Streams
DNS Streams
Abstract Syntax Trees
DNS Streams
DNS Streams
DNS Streams
(3) AST-Oriented 
Symbolic 
Execution
Relevant ASTs
DNS Streams
(4) Vulnerability 
Modeling
(5) Z3-Oriented 
Translator
(6) Z3 Solver
Vulnerable
Non-Vulnerable
Heap Graph and 
Environments
DNS Streams
DNS Streams
DNS Streams
PHP-Based 
Constraints
DNS Streams
DNS Streams
DNS Streams
Z3-Based 
Constraints
DNS Streams
DNS Streams
DNS Streams
Fig. 2: UChecker architecture
including a reachability constraint and an extension
constraint. While the ﬁrst constraint concerns whether
a ﬁle uploading operation (i.e., move_uploaded_file()
or file_put_content()) is reachable, the second one
models the extension of a ﬁle to upload (e.g., a
“.php” ﬁle). These constraints are s-expressions using
PHP-based operators and functions. (see Sec. III-C)
• Z3-Oriented Translation: UChecker translates PHP-
based constraints into Z3-based constraints [8] guided
by a set of novel translation rules. These rules aim to
mitigate the semantic gap between PHP and Z3. (see
Sec. III-D)
• SMT-Based Veriﬁcation: UChecker evaluates the satisﬁ-
ability of Z3-based constraints using the Z3 SMT solver.
A. Vulnerability-Oriented Locality Analysis
It is challenging to perform whole-program symbolic ex-
ecution considering the large number of external inputs and
large program sizes, which are typical for web applications.
To address this challenge, we propose to identify a fraction
of code that is highly likely to be relevant to ﬁle upload and
conduct symbolic analysis only for it.
Our locality analysis is driven by the observation that
ﬁle upload is usually one of many functions of a web
application. Therefore, the objective of locality analysis is
to identify modules,
functions, and ﬁles that are likely
used for ﬁle upload. As discussed in Section II, ﬁle
upload usually retrieves ﬁle information from $_FILES
and save it to local ﬁle system using built-in functions
such as move_uploaded_file() and file_put_content().
Hence,
the access to $_FILES and the invocation of
move_uploaded_file() (or file_put_content()) together
imply the boundary of the program relevant to ﬁle upload.
Our locality analysis algorithm accordingly has two
steps. First, we build a set of call graphs, which slightly
extend the original deﬁnition of call graphs [12]. Specif-
ically, each node in the graph can represent a function,
a PHP ﬁle, a read access to $_FILES,
the invocation
of move_uploaded_file() (or file_put_content()). A di-
rected edge (say e = (a,b)) between two nodes represents
one of the following four scenarios.
“include” or “require”.
• Both a and b are PHP ﬁles and a refers b using
• a is a PHP ﬁle, b is function, and a calls b in its body.
• Both a and b are functions, where a calls b.
• a is a PHP ﬁle or a function, b is $_FILE, and a accesses
b in its body (or its parameter input if a is a function).
It is worth noting that we will not build edges for
recursive calls. As a result, each call graph is connected but
acyclic, thereby forming a tree.
Second,
if a call graph contains both the $_FILES
node, say node1, and the move_uploaded_file() (or
file_put_content()), say node2, we will identify the node