Algorithm
Edit Distance
NeoBio Needleman
Argo Global Alignment
NeoBio Waterman
Blast
Argo Local Alignment
JAligner Waterman
Divide-and-Conquer
Multiple Alignment
Problem Size
400×400
400×400
400×400
200×100000
200×100000
200×100000
200×100000
200×1000000
100×100×100
SNP
2
2
2
55
55
55
55
1056
1
Table 2: Performance.
Native
DC
DP
Time(s) Mem(MB)
0.523
0.665
0.801
95.664
2.416
109.132
27.056
646.909
6.545
3.665
2.052
3.432
87.830
18.624
133.521
124.215
34.738
6.606
Time
28.526
42.465
46.151
1009.029
64.286
1512.368
1637.066
6857.100
394.865
Mem
46.915
56.897
44.736
626.167
49.893
661.880
604.712
168.808
113.188
Time
0.000033
0.000078
0.000054
0.000014
0.000019
0.000017
0.000016
0
Mem
1.536
2.740
2.740
2.740
2.740
2.740
2.740
0
0.000021
2.052
Bandwidth
(KB)
1.841
2.760
2.535
1.968
2.017
1.996
1.968
0
2.038
balance between computation time and memory use [34]. We also
recorded the bandwidth consumptions for both our approach and
the prior approach. The results are presented in Table 4.
As illustrated by Table 4, the optimized SMC protocol took more
than an hour and 2.56GB bandwidth to deal with a 200 × 1000
problem. This is actually not necessary, as real genome sequences
of such sizes typically contain very few sensitive nucleotides. In
contrast, our approach ﬁrst specialized the computation to a much
smaller problem and then performed SMC on it. Though the SMC
protocol we used was not optimal, we achieved a signiﬁcantly bet-
ter performance: a little more than 106 seconds in computation
time and merely 5.2 KB in bandwidth usage. When the problem
size grew to 300 × 10000, direct application of SMC to the whole
sequences could not ﬁnish the computation in 3 hours, while our
approach accomplished the task within 411 seconds with 13.9KB
bandwidth consumption. This result demonstrates that our approach
can offer more practical privacy protection for genome computing.
5. DISCUSSION
Beside the threshold policy, our framework is open to other pri-
vacy policies [46, 44, 33] for regulating information leaks from
outcomes of a computation. We feel that there is reason to expect
these policies and their enforcement, which have been extensively
studied in database security, to be successfully combined into our
approach, as the interactions between the DP and the DC does not
have any substantial difference from those between clients and a
database. However, it remains to be seen how effectively and efﬁ-
ciently these techniques work under our framework, which is left
as future research.
Though DPAs are among the most important building blocks for
computational genomics, there are many other algorithms that need
to be further studied. For decades, program specialization has been
proven to be valuable to the research on a wide variety of areas,
including compiler generation [36], computer graphics [49] and
others. We expect the same success in applying the techniques to
genomic computations. On the other hand, it is also important to
understand the limitations of specialization techniques. For exam-
ple, some data structures such as sufﬁx trees [48] can be hard to
specialize because to correctly build these structures, the DC may
have to know the exact values of every genome strings, including
those carrying sensitive information.
Our program-transformation tool is designed for Java. Actually,
C is more pervasive in genomic computation, due to its high perfor-
mance. Given its complicated structure, in particular, extensive use
of pointers, C programs can be more difﬁcult to transform. Prior
research [8] studies specialization of part of C, which we can take
advantage of. Such work, however, is more about partial evaluation
at compiling time than ofﬂine transformation for run-time special-
ization of existing code, which is our focus.
6. RELATED WORK
Privacy preserving computations over genome data have been
studied recently. Most prior approaches are based on cryptographic
protocols [10, 34, 15]. A prominent example is the recent work
that optimizes SMC techniques for computing DPA-based bioin-
formatics algorithms [34]. This approach signiﬁcantly improves
the efﬁciency of SMC and is demonstrated to be very effective on
small-scale computing tasks, such as global alignment involving
hundreds of nucleotides. However, it is unable to deal with a large-
scale computation, as demonstrated in Section 4. Another approach
is distributed Smith-Waterman algorithm [65] that decomposes a
computation problem into small sub-problems and allocates them
to multiple problem solvers. This technique, however, leaks more
information than what is revealed by the outcome of a computa-
tion, and offers little privacy guarantee. In contrast, our approach
takes advantage of the fact that a genome sequence is actually a
mixture of public and sensitive data, and only a very small portion
of it needs protection. As a result, we can simplify a computation
to the extent that millions of nucleotides can be easily handled and
information leaks can be effectively assessed.
Information ﬂow security was proposed decades ago [23, 13]
and its application to programming languages like Java has also
been studied for many years. A prominent example is Jif [52, 53],
a security-typed programming language that supports information-
345Table 3: Information Leakage.
Algorithm
Edit Distance
NeoBio Needleman
Argo Global Alignment
NeoBio Waterman
Blast
Argo Local Alignment
JAligner Waterman
Divide-and-Conquer
Problem Size
400×400
400×400
400×400
200×100000
200×100000
200×100000
200×100000
200×1000000
SNP
2
2
2
55
55
55
55
1056
Value
Leakage(%)
0
0
0
1.8
1.8
1.8
1.8
0
Time(s)
0.053
0.274
0.249
0.010
0.007
0.003
0.008
0
Path
Leakage(%)
0
0
0
1.8
1.8
1.8
1.8
0
Time(s)
0.063
0.209
0.196
0.010
0.003
0.005
0.008
0
Value and Path
Leakage(%)
0
0
0
1.8
1.8
1.8
1.8
0
Time(s)
0.070
0.304
0.291
0.005
0.011
0.001
0.004
0
Table 4: Facilitation of secure multi-party computation.
Problem Size
200 × 1000
300 × 10000
SNP
Optimized SMC [34]
DP
DC
Time
Mem