return ⟨A, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
(𝑚, fd′′) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
𝑚𝑖𝑑′ ←R {0, 1}𝑛
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑′] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd′′)
return 𝑚𝑖𝑑′
getUser(𝑈 , 𝑖𝑠𝑀𝑎𝑙)
U ← Uℎ𝑜𝑛𝑒𝑠𝑡 ∪ U𝑚𝑎𝑙
if 𝑈 ∈ U :
return ⊥
if 𝑖𝑠𝑀𝑎𝑙 :
U′ ← ⟨A, 𝑃𝑛𝑒𝑤 (sk, U)⟩(𝑈 , pk)
if U′ = ⊥ : return ⊥
return U𝑚𝑎𝑙 .𝑎𝑑𝑑(𝑈)
(𝑎𝑑, U′) ← ⟨𝑈𝑛𝑒𝑤, 𝑃𝑛𝑒𝑤 (sk, U)⟩(𝑈 , pk)
if (𝑎𝑑, U′) = ⊥ :
Uℎ𝑜𝑛𝑒𝑠𝑡 .𝑎𝑑𝑑(𝑈)
𝑇𝑎𝑢𝑡ℎ[𝑈 ] ← ad
return ⊥
malSend(𝑈𝑠, 𝑈𝑟 , md)
if 𝑈𝑠 ∉ U𝑚𝑎𝑙 :
(𝑝𝑑, 𝑒) ← ⟨A, 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
if 𝑈𝑟 ∈ U𝑚𝑎𝑙 :
return ⊥
return ⟨A, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
(𝑚, fd) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
if fd = ⊥ :
𝑚𝑖𝑑 ←R {0, 1}𝑛
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd)
return 𝑚𝑖𝑑
return ⊥
𝑆𝑇 ,E
return 0
𝑠𝑟𝑐𝐵𝐼 𝑁 𝐷A
(sk, pk) ← KGen(𝑝𝑎𝑟𝑎𝑚𝑠)
(𝑈𝑠, 𝑈𝑟 , md, 𝑠𝑡) ← AO
1 (pk)
if 𝑈𝑟 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 :
return 0
(𝑝𝑑, 𝑒) ← ⟨A2(𝑠𝑡), 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
(𝑚, fd) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐 (𝑝𝑑, sk)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
if fd = ⊥ :
(𝑠𝑟𝑐, md) ← ⟨𝑈𝑟𝑒𝑝 (fd), 𝑃𝑟𝑒𝑝 (sk)⟩(𝑚, pk)
if (𝑠𝑟𝑐, md) = ⊥ :
else : return 0
𝑢𝑛𝐹𝑂𝑅𝐺𝐸A
(sk, pk) ← KGen(𝑝𝑎𝑟𝑎𝑚𝑠)
(𝑚, 𝑠𝑡, M𝑠𝑒𝑛𝑡) ← AO
1 (pk)
(𝑠𝑟𝑐, md) ← ⟨A2(𝑠𝑡), 𝑃𝑟𝑒𝑝 (sk)⟩(𝑚, pk)
if (𝑠𝑟𝑐, md) = ⊥ :
if 𝑠𝑟𝑐 ∉ U𝑚𝑎𝑙 ∧ (𝑠𝑟𝑐, md, 𝑚) ∉ M𝑠𝑒𝑛𝑡 :
return 0
return 1
𝑆𝑇 ,E
return 1
else : return 0
Figure 2: Unforgeability and accountability games with their accompanying oracles. The adversary is also given access to send(·, 𝑈 , ·)
and receive(·, ·, 𝑈) oracles for the underlying encrypted messaging scheme for all adversary-controlled users 𝑈 ∈ U𝑚𝑎𝑙 , as well a
reporting oracle ⟨·, 𝑃𝑟𝑒𝑝 (sk)⟩(·, pk).
We say that 𝑆𝑇 is accountable or has accountability if Adv
is negligible for all efficient adversaries A.
Definition 3.6. We define the advantage of an adversary A in the
𝑢𝑛𝐹𝑂𝑅𝐺𝐸 game for a source-tracking scheme 𝑆𝑇 and messaging
scheme E as
src−bind
𝑆𝑇 ,E
(A)
Adv
unforge
𝑆𝑇 ,E (A) = Pr[𝑢𝑛𝐹𝑂𝑅𝐺𝐸A
𝑆𝑇 ,E = 1].
We say that 𝑆𝑇 is unforgeable if Adv
efficient adversaries A.
unforge
𝑆𝑇 ,E (A) is negligible for all
We note that our unforgeability and accountability requirements
do not apply to the platform, only to users. As observed by [31],
requiring that a scheme be secure against platform-produced forg-
eries would conflict with the deniability properties discussed below.
3.4 Deniability
We require that a source-tracking scheme satisfies two types of
deniability to protect users if the messaging system is compromised:
• universal deniability: Users should be able to deny participating
• platform compromise deniability: If the platform’s secret key sk is
leaked publicly, a user should still be able to deny participating
in a reported forwarding path.
in a forwarding path of a reported message.
Motivated by the approach of [31], we capture these goals by re-
quiring the existence of efficient protocols UForge and PForge that
can be executed by any user (with access to the platform’s secret
keys in the case of PForge). These protocols must successfully create
a set of forged transcripts and forwarding data indistinguishable to
a third party from the actual transcripts resulting from the path and
subsequent report of a forwarded message. In universal deniability,
the party tasked with differentiating transcripts has access to the
platform’s public keys and the secret keys of all users in the system,
while for platform compromise deniability, they are given access to
the platform’s secret keys as well. We discuss the space of potential
deniability definitions and formalize security games for univer-
sal deniability (𝑈 𝑛𝑖𝑣𝐷𝐸𝑁 ) and platform-compromise deniability
(𝑃𝑙𝑎𝑡𝐷𝐸𝑁 ) in Appendix A.2.
Definition 3.7. For a deniability game 𝐷𝐸𝑁 and forgery algo-
rithm Forge, the advantage of an adversary A against this game,
Adv
𝑆𝑇 ,E,Forge(A), is defined as
den
(cid:12)(cid:12)(cid:12)Pr(cid:104)𝐷𝐸𝑁 A,1
𝑆𝑇 ,E,Forge = 1(cid:105) − Pr(cid:104)𝐷𝐸𝑁 A,0
𝑆𝑇 ,E,Forge = 1(cid:105)(cid:12)(cid:12)(cid:12) .
𝑆𝑇 ,E,Forge(A) =
Adv
den
Definition 3.8. We say that a source-tracking scheme 𝑆𝑇 is deni-
able if there exist efficient (possibly interactive) algorithms UForge
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1490and PForge such that for any efficient adversaries A𝑢 and A𝑝,
platden
𝑆𝑇 ,E,PForge(A𝑝) are both negligible.
Adv
𝑆𝑇 ,E,UForge(A𝑢) and Adv
univden
4 TREE-LINKABLE SOURCE TRACKING
Straw-man scheme. A first straw-man attempt at tree-linkable
source-tracking could have the identity 𝑈𝑆 of the original sender
of a message included with the message plaintext, so the final mes-
sage becomes an encryption of (𝑈𝑠, 𝑚). While this approach would
satisfy platform confidentiality and deniability requirements, it
does not satisfy user confidentiality, accountability, or unforgeabil-
ity, as nothing would prevent malicious users from observing or
tampering with the sender identity included in the message.
Our scheme. Instead, the starting point for our approach is to
have the platform append a signature on (Enc(𝑘, 𝑈𝑠), 𝑐𝑚) to each
message, where 𝑘 is an encryption key known only to the platform
and 𝑐𝑚 is a commitment to the message plaintext, provided by
the sender. This signature is passed along whenever a message is
forwarded, and the signature is checked by each message recipient
using the platform’s public key and commitment randomness 𝑟
included by the sender alongside the end-to-end encrypted plain-
text. This scheme enforces user confidentiality, unforgeability, and
accountability, but it does not yet provide platform confidentiality
because the platform can always decrypt the sender identity that is
sent alongside each message.
Our final scheme combines the construction thus far with the
straw-man construction. When a message is forwarded for the
first time, the forwarder includes the signature, commitment, and
commitment randomness alongside the message plaintext that is
end-to-end encrypted and hidden from the platform, i.e., it encrypts
and sends (𝑚, Enc(𝑘, 𝑈𝑆), 𝑐𝑚, 𝑟). Subsequent forwards pass along
the same information inside the end-to-end encrypted ciphertext,
with each recipient checking that the signature and commitment
match the provided message and encrypted sender pair. Fresh mes-
sages include padding to hide the fact that they do not contain
forwarding information, and forwarded messages send the server
a commitment to an empty message to hide the fact that they are
forwards. Users report messages by sending the message plain-
text, commitment, randomness, and signature to the platform, who
checks the signature and decrypts the identity of the original sender.
In terms of security, hiding the forwarding information inside the
end-to-end encrypted message provides platform confidentiality,
while encrypting the original sender provides user confidentiality.
The fact that the forwarding information a user sees does not change
when a message is forwarded makes the scheme tree-linkable: a
user can tell when the same original message has been forwarded
to it twice. Accountability and unforgeability are provided by the
platform being the one to include the sender identity and signing
it, and deniability results from the sender identity being encrypted
and therefore hidden from everyone except the platform (and being
trivial to forge if the platform keys are known).
Our scheme, formalized in Figure 3, makes use of the underly-
ing messaging scheme E = (send(𝑚, 𝑈𝑠, 𝑈𝑟), receive(𝑐𝑡, 𝑈𝑠, 𝑈𝑟)) as
well as the following cryptographic tools.
• A symmetric encryption scheme
P = (KGen𝑠𝑦𝑚 → k, Enc(k, 𝑚) → 𝑐𝑡, Dec(k, 𝑐𝑡) → 𝑚).
Report(𝑚, pk)
𝑈𝑟𝑒𝑝 (fd)
𝑃𝑟𝑒𝑝 (sk = (k, sk𝑠))
fd
KGen(params)
k ← KGen𝑠𝑦𝑚
(sk𝑠, vk𝑠) ← KGen𝑠𝑖𝑔
pk ← vk𝑠, sk ← (k, sk𝑠)
return (pk, sk)
newUser(𝑈𝑖, sk)
if 𝑈𝑖 ∈ U :
return ⊥
U.𝑎𝑑𝑑(𝑈𝑖)
return U
AuthMsg(𝑈𝑠, 𝑈𝑟 , pk)
𝑈𝑎𝑢𝑡ℎ(𝑚𝑠𝑔)
(𝑚,⊥) ← 𝑚𝑠𝑔
(𝑐𝑚, 𝑟) ← Commit(𝑚)
//send (m,data) via underlying msg scheme
𝑒 ← send((𝑚,⊥, 𝑐𝑚, 𝑟), 𝑈𝑠, 𝑈𝑟)
(𝜎, 𝑠𝑟𝑐, 𝑐𝑚, 𝑟) ← fd
if ¬Open(𝑐𝑚, 𝑚, 𝑟) :
if ¬Vf(pk, 𝜎, (𝑐𝑚, 𝑠𝑟𝑐)) :
return ⊥
return ⊥
return Dec(k, 𝑠𝑟𝑐)
𝑃𝑠𝑒𝑛𝑑 (sk = (k, sk𝑠), md)
(𝑐𝑚, 𝑒)
return 𝑒
FwdMsg(𝑈𝑠, 𝑈𝑟 , pk)
𝑈𝑓 𝑤𝑑 (𝑚𝑠𝑔)
(𝑚, fd) ← 𝑚𝑠𝑔
(𝑐𝑚, 𝑟) ← Commit(⊥)
𝑒 ← send((𝑚, fd, 𝑐𝑚, 𝑟), 𝑈𝑠, 𝑈𝑟)
(𝑐𝑚, 𝑒)
RecMsg(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
𝑈𝑟𝑒𝑐
𝑠𝑟𝑐 ← Enc(k, (𝑈𝑠, md))
𝜎 ← Sig(sk𝑠, (𝑐𝑚, 𝑠𝑟𝑐))
return (𝑝𝑑 = (𝜎, 𝑠𝑟𝑐), 𝑒)
𝑃𝑠𝑒𝑛𝑑 (sk = (k, sk𝑠), md)
𝑠𝑟𝑐 ← Enc(k, (𝑈𝑠, md))
𝜎 ← Sig(sk𝑠, (𝑐𝑚, 𝑠𝑟𝑐))
return (𝑝𝑑 = (𝜎, 𝑠𝑟𝑐), 𝑒)
𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)
𝑝𝑑
(𝜎, 𝑠𝑟𝑐) ← 𝑝𝑑
(𝑚, fd′, 𝑐𝑚, 𝑟) ← receive(𝑒, 𝑈𝑠, 𝑈𝑟)
//verify platform signature
if ¬Vf(pk, 𝜎, (𝑐𝑚, 𝑠𝑟𝑐)) :
if fd′ = ⊥ : //If message is new
return ⊥
if ¬Open(𝑐𝑚, 𝑚, 𝑟) :
return 𝑚, fd ← (𝜎, 𝑠𝑟𝑐, 𝑐𝑚, 𝑟)
𝑚, 𝑟′) ← fd′
(𝜎′, 𝑠𝑟𝑐′, 𝑐′
return ⊥
else :
return ⊥
return ⊥
if ¬Open(𝑐𝑚,⊥, 𝑟) :
if ¬Open(𝑐′