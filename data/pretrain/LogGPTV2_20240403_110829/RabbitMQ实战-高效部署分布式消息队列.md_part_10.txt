---
## Page 68
46
第3章运行和管理Rabbit
以通过这个脚本来完成关闭任务。这时，整个RabbitMQ节点包括Erlang都关闭了。
有时候，你只想停止RabbitMQ应用程序，而让Erlang实例继续运行。让我们看看
如何做到这一点。
3.1.3关闭和重启应用程序：有何差别
到目前为止，我们讨论了如何停止整个RabbitMQ节点（应用程序和Erlang节
点一起）。但有些时候你只想要重启RabbitMQ应用程序，而同时保持Erlang节点运
行。这有什么好处呢？对集群来说，这种做法是必需的。rabbitmq-server同时
启动了节点和应用程序，因为它把RabbitMQ应用程序预先配置成了独立运行模式。
为了把节点加入现有的集群当中，你需要做的是停止应用程序，把节点重置为原始
状态。这样节点就准备好加人集群了。如果你使用./rabbitmqctlstop命令的话，
就会把应用程序和节点同时关闭。这时如果运行./rabbitmq-server，由于独立
运行模式的关系，又会迫使你把应用程序和节点同时启动起来。另外还有一点就是，
你会在同一节点上运行除了RabbitMQ之外的其他Erlang应用程序，这使得停止整
个节点是不可取的。
停止RabbitMQ轻而易举。只需运行./rabbitmqctlstop_app即可。Rabbit
日志会显示和之前关团整个节点时一样的关闭消息。
我们已经学习了怎样启动和停止RabbitMQ。但是，如何配置RabbitMQ让它不
会吞噬整台服务器的RAM？怎样更改RabbitMQ监听的端口呢？这就是RabbitMQ
配置文件起作用的地方了。
3.1.4Rabbit配置文件
像大多数服务器应用程序一样，RabbitMQ充许你设置系统范围的可调参数并通过
配置文件进行设置。典型地，该配置文件位于/etc/rabbitmq/rabbitmq.config。
不过，文件位置可以通过rabbitmq-serVer脚本对cONFIG_FILE环境变量进行
设置。你会发现rabbitmq.config的文件格式有点吓人：
[ (mnesia, [(dump_log_write_threshold, 1000}]},
{rabbit, [{vm_memory_high_watermark, 0.4}]} ].
你看到的本质上是原始的 Erlang 数据结构。但是如果你对 Python、JavaScript
或者其他任何现代编程语言熟悉的话，一旦对它进行分解之后，就很容易理解了。
---
## Page 69
3.1服务器管理
47
让我们把配置格式化一下，让它变得更为友好：
1）[
2)
(mnesia, [(dump_log_write_threshold, 1000}]},
3)
{rabbit, [(vm_memory_high_watermark, 0.4}]}
4）1.
这样看来就好多了。你会发现RabbitMQ配置文件事实上是一个包含了嵌套哈
希表（字典或者命名数组）的数组。第一行和第四行分别开启和关闭了配置数组。
通过外部配置数组，每个Erlang应用程序会有自己的哈希表来配置选项（此处我们
有两个应用）。mnesia指的是Mnesia数据库配置选项（Mnesia是RabbitMQ用来
存储交换器和队列元数据的）。rabbit指的是RabbitMQ特定的配置选项。每个选
项都表达为这种形式：{[option_name],[option_value]}。例如，{dump_log_write_
threshold，1ooo）更改了Mnesia把条目从仅限追加的日志文件刷出到真实数据
库文件的频度。为了添加另一个Mnesia配置选项，只需增加一个{[option_name],
[option_value]}条目，该条目需要和最后一个之间以逗号隔开。
注意：RabbitMQ中的每个队列、交换器和绑定的元数据（除了消息的内
容）都是保存到Mnesia 的。Mnesia是内建在Erlang 的非SQL型数据库。
Mnesia通过将RabbitMQ元数据首先写入一个仅限追加的日志文件，以确
保其完整性。然后，它再定期将日志内容转储到真实的Mnesia数据库文件
中。如果你对MySQL的InnoDB这样的日志型数据库，或者像XFS这样
的日志文件系统的工作方式熟悉的话，它们在概念上是相同的。Mnesia的
dump_log_write_threshold选项控制着转储的频度。将其设置成1000
就告诉Mnesia，每1000个条目就转储日志内容到数据库文件。
Rabbit配置文件格式了解清楚了，那么你可以更改哪些真实的选项呢？如表3.1
和表3.2所示，有些是关于Mnesia数据库的，有些是直接设置Rabbit的。
表3.1Mnesia配置选项
选项名称
默认值
描述
值类型
dump_log_write_threshold
整型
100
将仅限追加的日志内容刷出/转储至真实数据库文件的频
度。它明确指定了在转储操作发生前，必须有多少个条目
存储在日志中。设置更高的数值将减少1/O负载并增加持
久化消息的性能
---
## Page 70
48
第3章运行和管理Rabbit
表3.2Rabbit配置选项
选项名称
默认值
描述
值类型
tcp_listeners
{"ip地址"，端口号}数组
["0.0.0.0",
定义了RabbitMQ应该监听的非SSL加
5672),]
密通信的IP地址和端口
ssl_listeners
{"ip地址",端口号}数组
空
定义了RabbitMQ应该监听的SSL加密
通信的IP地址和端口
ssl_options
{"键"值}数组
空
指定SSL相关的选项。有效的选项有
cacertfile（CA证书文件）、certfile
（服务器证书文件）、keyfile（服务
器密钥文件）和fail_if_no_peer
cert（需要客户端安装有效证书：True
False)
vm_memory_high_watermark
十进制百分数
0.4
控制RabbitMQ允许消耗的内存。它以
十进制数值的形式明确了Rabbit允许使
用的安装内存百分比（0.4=40%）
msg_store_file_size_limit
整型（字节）
16777216
RabbitMQ垃圾收集存储内容之前，消
息存储数据库的最大大小
queue_index_max_journal_entries
整型
262144
在转储到消息存储数据库并提交之前，
消息存储日志里的最大条目数
虽然配置文件允许更改RabbitMQ运作的方方面面，但有一件事配置文件做不
了：对RabbitMQ的访问控制。RabbitMQ拥有整个专业子系统专门负责权限。让我
们从学习如何创建用户开始来一步步熟悉权限吧。
3.2请求许可
如果你熟悉不同操作系统的访问控制列表的话，那么理解RabbitMQ的权限系
统对你来说易如反掌。就像大多数权限系统那样，首先创建用户，然后为其赋予权
限，如图3.2所示。
---
## Page 71
3.2请求许可
49
用户：read_quet
用户：install_ap
读、写、配置
vhost1
vhost3
vhost2
RabbitMQ
图3.2RabbitMQ权限工作原理：用户可以为连接到RabbitMQ主机的应用程序设置不同级别的
权限（读、写、和/或配置）
RabbitMQ权限系统一个好的地方在于单个用户可以跨越多个vhost进行授权。
当应用程序需要跨越多个安全域进行通信时（使用虚拟机进行隔离），这会极大地
方便访问控制的管理。废话少说，让我们创建用户吧！
3.2.1管理用户
在RabbitMQ中，用户是访问控制的基本单元。针对一到多个vhost，其可以被
赋予不同级别的访问权限，并使用标准的用户名/密码对来认证用户。对用户的增加、
删除以及列出列表，都非常简单。这些操作都是通过rabbitmqctl完成的。让我
们为check-cashing应用程序创建一个新用户吧。
从RabbitMQ安装目录下的./sbin运行如下命令：
$./rabbitmqctl add_user cashing-tier cashMel
Creating user "cashing-tier" ...
...done.
这样就创建了一个新的Rabbit用户，用户名为cashing-tier，密码是
cashMe1。如果想要删除该用户，则只需简单运行如下命令：
---
## Page 72
50
第3章运行和管理Rabbit
$./rabbitmqctl delete_user cashing-tier
Deleting user "cashing-tier" ...
...done.
请注意，当你删除用户的时候，任何引用该用户的访问控制条目都会从Rabbit
权限数据库中自动删除。同时，rabbitmgctl也不会警告你与用户相关的访问控
制条目也会一并被删除。所以请谨慎删除用户；否则你会发现不得不重建一大堆访
问控制条目。
你经常会需要知道在当前Rabbit服务器上存在哪些用户。通过传入1ist
user命令到rabbitmqctl就可以进行查看：
$ ./rabbitmqctl list_users
Listing users ...
cashing-tier
guest
...done.
你也许会问自己：“不错。不过，我如何更改已经存在的用户的密码呢？我需
要重新创建用户？那不是会丢失用户的访问控制条目吗？”别害怕，rabbitmqct1
早就考虑到了。只要简单运行change_password命令，指明需要更改密码的用户
名称和新密码即可：
$ . /rabbitmqctl change_password cashing-tier comp13xPassword
Changing password for user "cashing-tier" ...
...done.
你看！cashing-tier的新密码已经变成compl3xPassword了。你会发现，
RabbitMQ管理用户是很简单的。当你开始为用户赋予访问控制条目时，复杂性才
真正体现出来。
3.2.2Rabbit的权限系统
从1.6.0版本开始，RabbitMQ实现了一套访问控制列表（ACL）风格的权限系统。
在这以前，用户只能针对整个vhost进行授权或拒绝访问（对于已授权的vhost，用
户可以做任何事情）。新的权限系统允许大量细粒度控制，同时可以授予用户读、写
和配置权限。那么这三者之间有何差异？
作的成功)
---
## Page 73
3.2请求许可
51
■写一发布消息（同样需要绑定操作的成功）
■配置一队列和交换器的创建和删除
表3.3展示了不同AMQP命令的列表和对应的权限（当前RabbitMQ版本为2.0.0）。
表3.3AMQP操作到RabbitMQ权限的映射关系
AMQP命令
配置
写
读
exchange.declare
exchange
exchange.delete
exchange
queue.declare
queue
queue.delete
queue
queue.bind
queue
exchange
basic.publish
exchange
basic.get
queue
basic.consume
queue
queue.purge
queue
每一条访问控制条目由以下四部分组成：
·被授予访问权限的用户。
■权限控制应用的vhost。
■需要授予的读/写/配置权限的组合。
■权限范围一一权限控制仅应用于客户端命名的队列/交换器呢，还是仅用于
用程序设置了交换器/队列的名称；服务器端命名意味着你的应用程序不提
供名字而是让服务器随机指派。
谨记：访问控制条目是无法跨越vhost的。举例来说，如果你想要给用户
cashing-tier在vhostoak和vhostsycamore上赋予相同的权限，那么你必须创建
两份访问控制条目（每个vhost一份）。理论讲解到此为止。让我们动手创建一个访
问控制条目吧！
在这个例子里，假设你有名为sycamore的vhost，你想要授予cashing-tier完
全的访问权限（配置、写和读权限）。你需要rabbitmqctl的set_permissions
命令来完成：
$ ./rabbitmqctl set_permissions -p sycamore \
cashing-tier".*" ".*"".*"
---
## Page 74
52
第3章运行和管理Rabbit
...done.
让我们把set_permissions命令分解开来，一块块分开看：
■-psycamore一这告诉了set_permissions条目应该应用到哪个vhost上。
·cashing-tier—被授予权限的用户。
■＂.*"＂.*”＂.*"—这是授予的权限。这些值分别映射到配置，以及写
和读。
权限值是这个命令中最有趣的部分了。三个值中的每一个都是正则表达式。在