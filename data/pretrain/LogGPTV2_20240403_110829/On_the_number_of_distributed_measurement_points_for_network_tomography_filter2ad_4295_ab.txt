a node un. Then the path from u0 to ui, with 1 ≤ i  0.
CLAIM 3. Any connected network of n computers requires at
most (n + 1)/3 computers and may require up to (n− 1)/3 beacon
nodes under a link distance minimization routing policy.
PROOF. To prove the upper bound, consider any arbitrary net-
work. Choose any node in the network as the root of a depth-ﬁrst-
search tree. Every edge is now either a tree edge, joining a node to
its child, or a back edge, leading from a node to an ancestor in the
tree. Label each node in the DFS-tree by its distance to the root in
the tree (number of ancestors), and reduced modulo 3, with the root
labelled 0, its children are labelled 1, etc. To make the proof work,
label the root 2 as well as 0.
Every edge in the tree joins a node v labelled i to a node labelled
(i + 1) mod 3. The parent of v is labelled (i − 1) mod 3, unless v
is the root. Therefore every edge in the tree is within one edge of
a node with any given label. This is true even when v is the root,
because the root is labelled 2 as well as 0.
Now consider the other edges in the network, the back edges of
the DFS-tree. The ancestor is labelled i, its parent is labelled i − 1
(if it is the root, it itself is labelled i − 1) and its child is labelled
i + 1. Thus for any edge in the network, and for any label i = 0,
1 or 2, either one endpoint of the edge is labelled i or one of the
endpoints is adjacent to a node labelled i.
From this last observation one can show that the nodes labelled
i, for i = 0, 1 or 2, form a beacon set. Consider an edge (u, v).
If either u or v is labelled i, then that node can test it directly.
Otherwise, there is a node n labelled i that is adjacent to u or v,
say u. Then n sends a message to u for v. By the link distance
minimization routing policy, u must send it directly to v. If it does
not, then the edge must be down. Since the number of labels is
n + 1, some label occurs no more than (n + 1)/3 times. This
completes the proof for the upper bound.
For the lower bound, consider the network shown in Figure 4.
Edge a can only be tested via a message sent from one of the ver-
tices of the triangle. Analogously, we can apply the same argument
to all other triangles in the network and hence every triangle must
contain a beacon node. There are (n − 1)/3 such triangles from
which the lower bound follows.
In the case of an arbitrary routing policy, a network with n nodes
may require as many as n− 2 beacon nodes. To verify this consider
a network where the links form a complete graph. The routing
policy is such that the default route used by all nodes is a cycle
containing all the nodes. Now, by way of contradiction assume
there is a beacon set with strictly less than n − 2 beacons. This
means there are at least three nodes which are not beacons. These
three nodes taken together are connected by a triangle, as the graph
is complete. At most two of the triangle edges are in the default-
routing cycle. Then if this third edge is down, and no other edge is
down, there is no node outside its two end points who could send
data on it. Hence in the worst case as many as n − 2 nodes are
required to test an arbitrary network.
Indeed this suggests, perhaps not at all surprisingly, that care
must be taken when designing a network so that is readily testable
from a few selected measurement points. This is also yet another
argument against deploying a complete network: not only is it ex-
pensive to build and maintain, a complete network is also expensive
to test and accurately diagnose.
5. PLACING BEACONS: PRACTICE
In the previous section we showed that, in general, beacons are
not a very cost effective method for discovering the topology of an
unknown arbitrary network. This demarcates the limits of the effec-
tiveness of beacon sets in general. On the other hand, the internet
is far from being an arbitrary network. Hence in this section we
blend theoretical properties from the previous section with knowl-
edge of the special properties of the internet to obtain an effective
procedure to select a beacon set.
CLAIM 4. Placing a beacon on every node of higher arity (if
there are any) forms a beacon set in a network in which every node
of higher arity offers transit so long as the network remains con-
nected.
PROOF. Consider an arbitrary edge (u, v) on the network. Us-
ing a case analysis we show that this edge can always be tested.
• if u or v are beacons, then they can send a message directly
on this edge,
• otherwise there exists a beacon b distinct from u and v; this
beacon sends a message to u and v, if either of these mes-
sages traverses the edge (u, v) we are done,
• let b, r1, r2, . . . , rk, u denote the path of a message from b
to u. Now, b sends a message destined for v via r1. Observe
that since all nodes in the network offer transit and u is con-
nected to v, the message for v must be delivered through this
path. If the message traverses the edge (u, v) then we are
done,
• otherwise, the message destined for v via r1 shares a portion
of the path from b to u, namely, b, r1, r2, . . . , rj for some
1 ≤ j ≤ k. This means that at the node rj the paths bifurcate
and v is reachable via both rj+1 and its default route. Hence
ri is of higher arity and is a beacon. Moreover, notice that ri
is now closer to u than b. Now by recursion, we can repeat
the same case analysis, and as the edge-distance is reduced at
some point one of the three earlier cases apply and the edge
(u, v) is traversed by a message from a beacon.
Notice that the Claim above gives an effective —albeit perhaps not
always cost efﬁcient— method to deploy a beacon set. We can