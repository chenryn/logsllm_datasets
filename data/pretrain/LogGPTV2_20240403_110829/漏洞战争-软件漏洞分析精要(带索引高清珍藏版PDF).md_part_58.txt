图7-54DbgFlashVul调试插件
使用它之前还需要先获得Flash模块基址，然后用！SetBaseAddress设置后，才可以追踪JIT调用方
法和下断点，如图7-55所示，执行效果如图7-56所示。正是由于该插件的便利和高效，笔者专门补充
本节，介绍给各位读者试用。
0:054） 1aF132_18.0-_209
0:43bi 
4321
图7-55设置Flash基址
---
## Page 373
354漏洞战争：软件漏洞分析精要
ss-102a790
reee-00a2a7606
图7-56追踪JIT调用方法
来自阿里的h4ckmp同学也在微博上分享其制作的avmplus符号文件（下载地址：http:/vdisk
weibo.com/s/BY9EvewxqT4D_1435050804），导入IDA后（按“Shift+F5”组合键后按Insert键添加下
载的sig文件）可以帮助识别大部分的Flash模块中的函数，以当前最新版Flash18.0.0.209为例，能够
识别其中3001个函数，也有一些识别不了，特别是Adobe自己在avmplus基础上添加或修改过的函数，
如图7-57所示。
xeLitiirey er
Son name
Fle
200
Lbrary rane
Mierose VaiaC 2-11/net runtime
smpluLiaib
rpiussAggregateone
7
plutByteArrtyOt
dv2iDy-
eArr
mplusnlsolate
aed
msatsgeodympli congt
图7-57加载avmplus符号文件识别Flash函数
7.6.4漏洞利用
在测试Metasploit生成的利用代码时，发现其相当稳定，此处就直接针对它的利用技术进行分析。
首先，在主线程中创建一堆Vector.用于构建内存布局，然后间隔释放它们，从而产生内存间
---
## Page 374
第7章释放重引1用漏润分析355
隙，然后用ByteArray填充每个Vector元素，如图7-58所示。
public cless Koin extends Sprite
private vur ov:Vecter. eObjectb> = ntw Vector eobject>(256ee)
28
privote
构建内存布局
接下来，在Worker线程里面，清除ByteArray，然后分配Vector.uint>（1022），并修改vector的长
度，从0x3FE变成0xFFFFFFFF，如图7-59所示，相应的调试情况，笔者已直接以注释形式写在代码
中。
vor bo:Bytekrrey - Borker-current-getShoredroperty(*ba*)
or mc:MessegeC
ov[8] = new Vecter, avrint>(1822) // 1022 (bx3FE) *4-d-0x200. /jbs/t大-小
11
0:013> g
0(e274c0 8747:000 00001000 00001000 00000
's..s ByteArray Buffer *.*
11
17
0747co00o000fe// 证量成vecter.cuint放售
0:034s 6d 0747c00 11
C.send**)
11
/
0:013s be s4 0747c000
//下2月，项其值的费化
2470008
//
1/c在oessoge函始中长8xFr
91
shi1e (ec.nessogekvai1ob1e);
图7-59释放ByteArray，并修改vector对象长度
开始计算ov[0][0]所在内存地址，它通过读取ov[0][0x403]的值获取，但在图7-59中，我们知道ov
数组的元素大小为1014(0x3F6）长度的Vector.对象，所以ov[0][0x403]已经超过单个元素大
小，它就相当于ov[1][0x0d]，这个位置的值刚好是vector地址偏移0x18，所以要获取ov[0][0]（等同
ov[0]）的地址等于ov[0][0x403]-0x18-0x1000，相应的调试情况如图7-60所示。
---
## Page 375
356漏洞战争：软件漏洞分析精要
73-1vecto+(640)-03F)*4-0x18=
]-][040]-x18-0x1
/ 其as8x1Be0 (Ve
874740c
06e27868 87475000 8747018 40000010
/
8747c9eefffffrr 8sc55eee 0747cese
0:826 
11
ef810
图7-60获取ov[0][0]内存地址
继续获取后面用于写入rop+Shellcode的buffer地址，其实就是设置长度0x500000之后的ByteArray
对应的buffer，如图7-61所示，里面0x40是buffer偏移ByteArray对应的位置，8是头信息大小，其中的
vector_read函数定义如图7-62所示。
vor buffer:uint = vector_reod(vecter_read（iiCe(ex4et] - 1 + ex4e) • Il) + ex1eeeoe
//B率用于年人rop+shel1code的uffer地址
124
129
Foaluote
7
121
苏 buffer  vecter_red(vector_reasl(aeelcm) d)ieee
图7-61
获取buffer地址
201
retun adr >[e][#] 7 e][（eser
[e][e]) / 4 - 2] : [e][e  ([#][] - dr) / 4 - 1]
282
）
图7-62
vector_read函数
由于addr（0x06ee1cd0） dd e6ee1cde 11
06ee1cde 06e274b8
然后，获取vector对象中的虚表指针，如图7-63所示，通过它去搜索PE头来定位Flash模块基址，
如图7-64所示，同时通过覆盖它来劫持程序的执行流程。
125
/
13
r vttesin  vecter,(si)
11
0:026 1n 6ericc38
137
图7-63获取虚表指针
private funcELon bese(edr:usnt) utnt
eddr) s exbe9eSstd) return odsr
图7-64暴力搜索flash模块基址
接下来，设置buffer的长度值length为0xfmm，如图7-65所示。
rector_arit
eStringo
图7-65设置buffer的长度
再利用获取的Flash基址获取相应API的函数地址及其他ROP指令，然后覆盖虚表地址，最后调用
toString会触发伪造的虚表指针被引用，如图7-66所示。
此时，虚表指针及偏移0x70的虚函数均已经寡改，当调用虚函数时，就成功执行到ROP指令，
如图7-67所示。首条ROP指令是xchgeax,esp，目前是将栈顶esp切换到虚表地址，这样当返回之后，
就可以在栈上执行我们预置的下一条ROP指令xchgcax,esi，返回后就执行到VirtualProtect函数，对
buffer内存设置可执行属性，如图7-68所示，再调用WinExec执行PowerShell命令，如图7-69所示，以
此绕过ASLR+DEP保护，最后成功弹出计算器。
---
## Page 377
358漏洞战争：软件漏洞分析精要
34
vor lash:vint = bose(vtable)
vtable:uint = porseInt(deta[3]) es wint
ver
int.-od
m.d1°, flesh)
gr
bytrit(bffer8pyld:/6人
// nExec(payloof,a)
0x30000)
187
185
eitring0)
图7-66
伪造虚表指针井构造ROP指令
509d19le
abd1
ndx.
09d1998
932904
93eit9
d
2.00
oed ptr [esx*4]
dt
8b4049
0300
0811
P32_1
_0_296+Dx20
调用伪流的虚函数
成功执行ROP期令
504
3_16_0_0_296+Gx207a4(603st7a4)
push
图7-67调用伪造的虚函数
---
## Page 378
第7章释放重引用漏洞分析359
CPGetAPI+Dx7tb65B (60tBoc3B)
8903
0
0000
图7-68
调用VirtualProtect修改ROP指令所在内存的可执行属性
eb.
drcrd ptr [ebp+0Ch]
posb
Tpe
0001（0001)0:***
:0133da
edi.edi
图7-69调用WinExec执行PowerShell命令
---
## Page 379
360漏洞战争：软件漏洞分析精要
7.6.5漏洞修复
下载临近版本的漏洞修复版本16.0.0.352，依然按照上面介绍的方法，对UnprotectClear与
notifyGlobalMemoryChanged函数下断点，运行后发现并没有断下。也就是说，ByteArray并没有清除，
domainMemory也并没有分配。于是笔者使用调试版flashplayer16_Or0_305_win_sa_debug.exe打开
poc.swf，直接弹出提示发生ActionScript错误“This API cannot accept shared ByteArrays”，如图7-70
所示。
Adobe FlashPaeyr1s
发生Ao
全部取消D]续：
图7-70ActionScript错误提示
看下上面栈回测中显示的第34行代码，下面的ba（即ByteArray）具有sharedable共享属性：
ApplicationDomain.currentDomain.domainMemory = ba
也就是说，具有sharedable共享属性的ByteArray是不允许设置为domainMemory的，自然也就没
有后面的释放ByteArray与创建domainMemory的行为，这就是Adobe针对此漏洞的修复方式。
7.7本章总结
本章主要介绍了UAF的润润原理及利用，这类漏润在测览器利用中最为常见，因此挑选了IE和
Firefox作为实例，同时也结合频繁出现漏洞的PDF与Flash作为示例，这里只是取比较有代表性的漏
洞讲解，当然，还有其他比如PHP或者Ofce也出现UAF漏润，但究于篇幅，很难一一细讲到。基于
前面的几个漏润实例分析，介绍了几种不同的漏洞分析技巧，比如PDF分析工具pdfpeef的使用，AVM
虚拟机源码分析、正浏览器漏洞分析技巧等，这些是笔者平时常用的技巧，希望对读者有所帮助。
---
## Page 380
第8章：数组越界访问漏洞分析
8.1数组越界与溢出的关系
在网上的多数漏洞分析文章中，经常没有具体区分数组越界与溢出，有时也把数组越界直接称
为溢出漏洞，这有时是正确的，但不是通用的，两者之间既有交集，也有其区别之处。
1.数组越界访问包含读写类型，而溢出属于数据写入
通常数组越界访问是由于数组下标数值超出数组元素个数导致的，比如定义数组buf[5]，但程序
却通过bu[8]访问数据，此时即为数组越界。数组的读写操作有时是同时并存的，比如在第2.2节中的
栈溢出示例程序，程序越界索引栈上分配的数组，同时又向其写入数据，最终造成溢出。
2.部分溢出漏润的本质就是数组越界
导致溢出的原因有多种，有些正是由于对数组下标范围未做有效限制，导致允许越界访问数组
并对其写入数据，比如前面提到的第2章的栈溢出示例程序，它就是由于数组越界导致的栈溢出，如
果数组是分配在堆上的，就是堆溢出，由此可见，部分溢出漏洞的本质就是数组越界，这就是一些
数组越界索引漏润直接被称为溢出的原因。
3.数组越界犹如倒水时倒错水杯，溢出犹如倒水时水从杯子里漫出来
如果要用一些比较形象具体的例子来做比喻的话，也许上面这句话就是最好的总结。
8.2数组越界访问漏洞原理
下面我们以C代码为例讲解数组越界访问漏洞的原理，其代码如下：
#include “stdio.h"
int main(){
int index;
漏洞战争：软件漏洞分析精要
---
## Page 381
362漏洞战争：软件漏润分析精要
int array[3] -{111,222,333);
printf（“输入数组索引下标：“）;
scanf("%d", &index);
printf（"输出数组元素：
array[%d]=%d\n*,index,array[index]);
//数组越界读操作
//array[index]=1;//数组越界写操作
return 0;
测试环境如表8-1所示。
表8-1测试环境
推荐使用的环境
备注
操作系统
Windows 7 SP1
简体中文版
编译器
Microsoft Visual C++ 6.0
企业中文版
说明：实验过程中的一些地址可能会出现变化，读者需要在实际测试中调试确定。
执行生成程序，然后分别输入2和5作为数组下标，输出的结果如图8-1所示。当输入的数组下标
索引值为0、1、2时，都会依次得到正常的数组值：111、222、333，但从索引值3开始就超出原定数
组aray的范围，比如下标输入5时，就会越界访间array数组，导致读取到不在程序控制范围内的数值。
通过VC6调试该程序，直接查看array数组所在栈数据，可以发现array[5]（从o开始计算）刚好就
是从array开始往后第6个数据0x4012A9（十进制：4199081），已经读取到array数组之外的数据了，
如图8-2所示。
CPrgrFilesMiortVilStudioM
Memory
地址：
array
0012
38F00000111
5
88 FF 12 09
88802850
>4199081
0012FF50
36 85 2469
0012FF54 38 10 2E 00
4199081