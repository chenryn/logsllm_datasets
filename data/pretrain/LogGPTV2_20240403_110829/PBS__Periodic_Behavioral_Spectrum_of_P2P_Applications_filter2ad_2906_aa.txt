title:PBS: Periodic Behavioral Spectrum of P2P Applications
author:Tom Z. J. Fu and
Yan Hu and
Xingang Shi and
Dah-Ming Chiu and
John C. S. Lui
PBS: Periodic Behavioral Spectrum of P2P
Applications
Tom Z.J. Fu1, Yan Hu1, Xingang Shi1, Dah Ming Chiu1, and John C.S. Lui2
{zjfu6,yhu4,sxg007,dmchiu}@ie.cuhk.edu.hk
1 IE Dept., CUHK
2 CSE Dept., CUHK
PI:EMAIL
Abstract. Due to the signiﬁcant increase of peer-to-peer (P2P) traf-
ﬁc in the past few years, more attentions are put on designing eﬀective
methodologies of monitoring and identifying P2P traﬃc. In this paper,
we propose a novel approach to measure and discover the special char-
acteristics of P2P applications, the periodic behaviors, from the packet
traces. We call this the “periodic behavioral spectrum” (PBS) of P2P
applications. This new ﬁnding, learning the characteristics of P2P traﬃc
from a new angle, could enhance our understanding on P2P applica-
tions. To show the eﬀectiveness of our approach, we not only provide
justiﬁcations as to why P2P applications should have some inherent pe-
riodic behaviors, but also conduct hundreds of experiments of applying
the approach on several popular P2P applications.
1 Introduction
There is a signiﬁcant increase in P2P applications running over the Internet and
enterprise IP networks during the past few years. These applications include P2P
content distribution applications like BitTorrent, BitComet and eMule, and P2P
streaming applications like Sopcast, PPLive, PPStream. Since P2P applications
account for a large portion of total Internet traﬃc, it is important to correctly
identify P2P traﬃc for traﬃc monitoring and network operations. However, ex-
isting approaches to classifying P2P traﬃc have well known drawbacks: Port-
based method is ineﬀective since many P2P applications rarely use ﬁxed port
numbers. Payload signature-based method is more reliable, but constraints like
hardware resource limitation, payload encryption and privacy and legal concerns
make it ineﬀective. Hence, it is important to have a better understanding of the
characteristics of P2P traﬃc and thus being able to eﬀectively diﬀerentiate it
from other conventional applications such as Web and FTP.
In this paper, we propose a novel approach, Two Phase Transformation, to
measure and discover “periodic” behaviors of P2P applications. In addition, we
provide justiﬁcations to why P2P applications should have some inherent peri-
odic behaviors. To show the eﬀectiveness of our approach, we carry out a number
of experiments by applying this novel approach on several popular P2P appli-
cations (such as PPLive, PPStream, eMule etc.). Interestingly, the experimental
S.B. Moon et al. (Eds.): PAM 2009, LNCS 5448, pp. 155–164, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009
156
T.Z.J. Fu et al.
results show that diﬀerent frequency characteristics of P2P applications could
form a periodic behavioral spectrum (PBS), which could be used as a new form
of signatures to help to solve the monitoring and identifying problem. This is
the main contribution of this paper.
In the rest of the paper, we ﬁrst introduce three diﬀerent periodic communica-
tion patterns and provide justiﬁcations why P2P applications should have these
periodic behaviors (section 2). We propose our approach of how to discover the
periodic behavioral patterns of P2P applications from packet traces (section 3).
Then we show PBS we developed for a number of popular P2P applications, by
individually doing experiments and applying our approach to observe their be-
haviors in isolation, and its application (section 4). Finally we discuss the related
work (section 5) and conclusion (section 6).
2 Periodic Group Communication Patterns
Independent of the service type (e.g., ﬁle sharing, content streaming, or VoIP),
a P2P application needs to form an overlay with other peers for reachability.
In order to form and maintain this overlay, and often in the use of this overlay,
peers inevitably exhibit periodic group communication.
We distinguish between two classes of periodic group communication pat-
terns: (a) control plane - that used to form and maintain the overlay; (b) data
plane - that used to multicast content. In P2P systems, especially those P2P
systems performing application layer multicasting, there are basically two kinds
of overlays formed:
– Structured overlays: This includes overlays with mesh-based topology, such
as ESM[4], and tree-based topology such as NICE[3] and Yoid[6]. In ESM,
group members periodically generate refresh messages and exchange their
knowledge of group membership with their neighbors in the mesh. Similarly
for tree-based topologies, peers also periodically refresh the overlay links so
as to maintain the soft state information.
– Data-driven overlays: The classic example is BitTorrent[5]. In this case, the
topology is more dynamic, driven by which neighbors have the right content
needed by a peer. Such dynamic P2P systems are normally bootstrapped
by a server known as the tracker. All peers may need to periodically update
their information to the tracker for system health monitoring.
In both kinds of overlays, some active measurements may be used to optimize the
eﬃciency of the overlay. For example, neighboring peers may periodically mea-
sure the distance (in terms of round trip time) between each other. In summary,
these activities generate periodic group communication patterns.
2.1 Terminology for Behavioral Patterns
In this section, we describe three speciﬁc periodic group communication patterns
that are common for many P2P applications. Note that these three patterns
PBS: Periodic Behavioral Spectrum of P2P Applications
157
of periodic group communication behaviors are just examples to illustrate our
methodology. The particular values of periodicity of diﬀerent behaviors are ap-
plication dependent. A given P2P application may exhibit one or more of such
behaviors.
In doing so, we need to deﬁne some terminology in our framework. First,
time is divided into discrete time intervals. The length of the time interval is
quite critical in the ability to identify the periodic behavior, and needs to be
carefully chosen. Unless we state otherwise, the length of the time interval is set
as 1 second for all our experiments. For the host running the P2P applications
(target host), it communicates with a number of neighbors. Such communications
are organized into a sequence of ﬂows, similar to the ﬂows deﬁned in Netﬂow,
although the inactivity interval that starts and ends a ﬂow is application behavior
dependent. The start and end of a ﬂow is indicated with a Start Event (SE) and
an End Event (EE), each event has an associated time stamp.
(a) Pattern 1
(b) Pattern 2
(c) Pattern 3
Fig. 1. Examples of three periodic communication patterns
Pattern 1 (Gossip of Buﬀer Maps): A popular type of P2P applications
is P2P streaming based on a data-driven overlay. This includes live streaming
applications such as Sopcast, PPLive, PPStream and P2P Video-on-Demand
(VoD) streaming systems. Because of the data-driven approach for forming and
maintaining the overlay, all these applications rely on gossip of buﬀer maps to
maintain active links between peers. Typically, one or two packets are enough
to present a buﬀer map.
For P2P Live Streaming systems, because peers only store the streaming con-
tent in their RAM (much smaller size compared with VoD) and remove the
content as soon as it is played back, the buﬀer map information changes rather
quickly. Each peer needs to periodically exchange its buﬀer map with neighbors
to optimize the scheduling of content exchange to ensure good playback perfor-
mance. The buﬀer map exchange period is as short as 5 seconds for some cases.
Note, each peer must exchange this information with all its neighbors although it
only exchanges content with a subset of these neighbors. For P2P VoD systems,
peers also exchange buﬀer maps with their neighbors periodically, although the
period may be longer. Figure 1(a) is an illustration of the traﬃc pattern for P2P
Live Streaming systems. In this ﬁgure, we have three ﬂows, e.g., there is a ﬂow
which starts right after t = 5 and ends between [35, 40]. The ﬁgure also shows
158
T.Z.J. Fu et al.
the periodicity property. For example, every 5 seconds, this node sends out some
packets to its neighbors (say at t = 5, this node sends out 10 packets describing
its buﬀer maps to its neighbors).
Pattern 2 (Content ﬂow control): The second pattern occurs in the data
plane. For streamed video content, it often happens that peers download at a
higher speed than the playback rate, behaving like ﬁle downloading. Although
this is good for these peers, the content provider actually prefers the peers down-
load at the pace of playback, to ensure all the peers stay around to help the server
in distributing content, rather than watch the content oﬀ-line. Content providers
thus implement various mechanisms to make peers continue to contribute. One
way is to make peers periodically send keep-alive messages to a tracker when
they are watching the video, even after the whole video has ﬁnished download-
ing (e.g. in the VoD case[7]). Another way is to perform the Pre-Downloading
Control (PDC), which is a form of content ﬂow control to make the download
rate match with the playback rate. Such ﬂow control often results in alternating
bursts of download activities and sleep periods, as illustrated in Figure 1(b).
Pattern 3 (Synchronized Link Activation and Deactivation): It is
well-known that BitTorrent implements the tit-for-tat mechanism to provide
incentives for peers to serve each other. The third pattern of periodic group
communication behavior is a direct consequence of how BitTorrent-like proto-
cols might implement the tit-for-tat mechanism. As described in [5,10], each
peer uses two timers (10 seconds and 30 seconds) to decide whether to choke
and optimistically unchoke neighboring peers, respectively. This results in the
synchronization of Start Events (SE) and End Events (EE) at the beginning of
the time intervals, as illustrated in Figure 1(c).
3 Discovering Periodic Behavioral Patterns
In this section, we describe the approach of how to discover the periodic behaviors
of P2P applications, especially the periodic patterns discussed in Section 2.
The overview of the approach is as follows. First, we run a particular P2P
application and collect the application’s packet trace in a controlled environment
where all other network applications are disabled from the target host. While
doing so, we only collect packet header information.
Second, we feed the packet trace into three independent and parallel analyz-
ing processes. For each analyzing process, there are two transformation phases.
The ﬁrst one is the transformation from packet-trace to discrete-time sequence,
or sequence generator (SG). Three diﬀerent sequence generators are speciﬁcally
designed to extract those three periodic patterns. The second transformation
phase is the same for all three analyzing processes. It transforms the time-domain
sequence to frequency-domain sequence. In this phase, we ﬁrst apply the Auto-
correlation Function (ACF) then the Discrete Fourier Transform (DFT1).
1 In our implementation, Fast Fourier Transform (FFT) is applied.
PBS: Periodic Behavioral Spectrum of P2P Applications
159
Finally, we analyze the frequency-domain results derived by ACF and DFT
to identify periodic characteristics. In the following section, we present the three
sequence generators in detail along with some empirical results.
3.1 Sequence Generators
SG1: Time Series for the Gossip Pattern. Recall that in our basic model,
time is divided into intervals, of length T . Xin[i] and Xout[i] denote time series
generated by SG1, where Xin[i] represents for the number of source hosts sending
data to the target host during the ith interval; and Xout[i] is correspondingly
the number of destinations which are receiving data from the target host. When
the target host is engaged in gossiping, Xin[i] and Xout[i] represent the number
of neighbors gossiping with the target host over the time interval i.
Then the ACF is applied on Xin[i] and Xout[i] respectively. We denote rXin(n)
and rXout(n) the result sequences. Finally, we apply DFT on rXin(n) and rXout(n)
and derive the frequency-domain results denoted by RXin( k
N).
Since the ACF and DFT are basic functions in signal processing, the deﬁnition
and detailed explanation of them can be found in many books and articles, such
as[13]. Here we just give the basic formulas. The ACF and DFT are described in Eq.
(1) and (2) where X(i) is any input time-domain sequence (e.g., Xin[i] or Xout[i])
and N is the sequence length of X(i).
N−n(cid:2)
N) and RXout( k
r(n) =
X(i)X(i + n).
R(k)=
r(n)e− 2πi
N kn where k ∈ [0, N − 1].
n=0
The sequence, R(0), R(1), . . . , R(N − 1) is a sequence of N complex numbers
(see [13]). For discovering the periodic behavioral patterns, it is suﬃcient for us
to take the modulo of R(k) to get the magnitude of each frequency component.
For example, Figure 2 shows Xout[i] and its ACF and FFT transformations
for a PPLive streaming session (N = 200). In Figure 2(c), we observe that there
1
N − n
N−1(cid:2)
i=1
(1)
(2)
140
120
100
Start_ts = 50s
End_ts = 250s
T = 1s
1.0
0.5 
)
n
(
t
u
o
X
r
0   
]
i
[
t
u
o
X
80
60
40
20
0
50
( −0.2Hz, 32.15 )
( 0.2Hz, 32.15 )
40
30
20
10
l
e
u
a
V
T
F
F
150
200
100
ts ( = i + Start_ts − 1 )
(a) Xout(i)
250
−0.5
0
20
40
60
Lag n
(b) rXout(n)
80
100
0
−0.5
−0.25
0
0.25
0.5
Frequency (Hz)
(c) |RXout( k
N )|
Fig. 2. Xout[i], ACF and FFT transformation results for a PPLive streaming session
160
T.Z.J. Fu et al.
is a frequency pulse at f = 0.2Hz, which means sequence Xout[i] has a 5-second
periodic characteristic and reveals the periodic gossip pattern.
SG2: Time Series for Content Flow Control Pattern. Recall that the
content ﬂow control traﬃc pattern (Figure 1(b)) is about the rate a target host
is sending or receiving content from all its neighbors. We represent these as two
time-domain sequences, Yin[i] and Yout[i].
The procedure of SG2 is similar to SG1. Yin[i] and Yout[i] are used to accumu-
late in and out data transmission rate during the ith interval separately, rather
than ﬂow count in and out of the target host. After the time-domain sequences
are generated, ACF and FFT are applied.
2500
2000
1500
]
i
[
n
i
Y
1000
Start_ts = 300s
End_ts = 500s
T = 1s
1.0
0.5 
)
n
(
i
n
Y
r
0   
35
30
25
20
15
10
l
e
u
a
V
T
F
F
( −0.025, 29.53 )
( 0.025Hz, 29.53 )
500
0
300
400
350
450
ts ( = i + Start_ts − 1 )
(a) Yin(i)
500
−0.5
0
20
40
60
Lag n
(b) rY in(n)
80
100
5
0
−0.5
−0.25
0
0.25
0.5
Frequency (Hz)
(c) |RYin( k
N )|
Fig. 3. Yin[i], ACF and FFT transformation results for a PPStream VoD session
We illustrate an example of PPStream VoD session (N = 200). Figure 3 shows
Yin[i] and its ACF and FFT transformation results. From the frequency pulse
at f = 0, 025Hz as shown in Figure 3(c), it becomes apparent that PPStream
VoD session executes the PDC mechanism in every 40 seconds.
SG3: Time Series for Synchronized Start and Finish of Flows. In
BitTorrent-like applications, due to the periodic choking and optimistic unchok-
ing mechanism, the occurrences of the data transmission Start Event (SE) and
End Event (EE) will also have the periodicity (Refer to Figure 1(c)). This time,
the results will be accumulated in time-domain sequences Zin[i] and Zout[i]. The
algorithm of SG3 is slightly more complicated than the ﬁrst two algorithms.
There are three steps of this algorithm. In the ﬁrst step, all the packets in
the input packet trace are reorganized into ﬂows according to their ﬁve-tuple
information {srcIP, srcPort, dstIP, dstPort and protocol} and then sorted in the
ascending order by their Time Stamp (TS). Flows destined for the target host
are in-ﬂows; others are out-ﬂows.
In the second step, all the ﬂows are divided into subﬂows, each subﬂow with
its distinctive SE and EE. Each subﬂow should correspond to content exchange
(cid:85)(cid:84)(cid:59)
(cid:71)(cid:109)(cid:112)(cid:120)(cid:59)
(cid:50)
(cid:81)(cid:50)
(cid:51)
(cid:52)
(cid:53)
(cid:81)(cid:51)
(cid:54)
(cid:55)
(cid:81)(cid:52)
(cid:56)
(cid:57)
(cid:58)
(cid:50)(cid:49)
(cid:84)(cid:118)(cid:99)(cid:103)(cid:109)(cid:112)(cid:120)(cid:59)
(cid:84)(cid:118)(cid:99)(cid:103)(cid:109)(cid:112)(cid:120)(cid:50)
(cid:50)(cid:50)
(cid:81)(cid:53)
(cid:50)(cid:51)
(cid:81)(cid:54)
(cid:84)(cid:118)(cid:99)(cid:103)(cid:109)(cid:112)(cid:120)(cid:51)
Fig. 4. An example of how to separate a ﬂow into subﬂows (interval threshold = 3)
PBS: Periodic Behavioral Spectrum of P2P Applications
161
between the target host and one of its neighbors. The rule for marking the begin-
ning and end of subﬂows is that the time interval of any two consecutive packets
of the same ﬂow should not be larger than the given parameter interval threshold.
This is like the inactivity timer in Netﬂow[1]. Figure 4 gives a simple example.
In the end, all the triggered events are sorted into ascending order of TS.
12
10
Start_ts = 100s
End_ts = 300s
T = 1s
]
i
[
t
u
o
Z
8
6
4
2
0
100
200
150
250
ts ( = i + Start_ts − 1 )
(a) Zout(i)
1.0 
0.8 
0.6 
0.4 
0.2 
0   
( −0.1Hz, 10.83 )
( 0.1Hz, 10.83 )
( 0.035Hz, 4.54 )
( 0.135Hz, 4.55 )
( 0.2Hz, 3.98 )
12
10
8
6
4
2
l
e