title:Erays: Reverse Engineering Ethereum's Opaque Smart Contracts
author:Yi Zhou and
Deepak Kumar and
Surya Bakshi and
Joshua Mason and
Andrew Miller and
Michael Bailey
Erays: Reverse Engineering Ethereum’s 
Opaque Smart Contracts
Yi Zhou, Deepak Kumar, Surya Bakshi, Joshua Mason, Andrew Miller,  
and Michael Bailey, University of Illinois, Urbana-Champaign
https://www.usenix.org/conference/usenixsecurity18/presentation/zhou
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Erays: Reverse Engineering Ethereum’s Opaque Smart Contracts
Yi Zhou Deepak Kumar Surya Bakshi
Joshua Mason Andrew Miller Michael Bailey
University of Illinois, Urbana-Champaign
Abstract
Interacting with Ethereum smart contracts can have po-
tentially devastating ﬁnancial consequences. In light of
this, several regulatory bodies have called for a need to
audit smart contracts for security and correctness guar-
antees. Unfortunately, auditing smart contracts that do
not have readily available source code can be challeng-
ing, and there are currently few tools available that aid in
this process. Such contracts remain opaque to auditors.
To address this, we present Erays, a reverse engineering
tool for smart contracts. Erays takes in smart contract
from the Ethereum blockchain, and produces high-level
pseudocode suitable for manual analysis. We show how
Erays can be used to provide insight into several contract
properties, such as code complexity and code reuse in
the ecosystem. We then leverage Erays to link contracts
with no previously available source code to public source
code, thus reducing the overall opacity in the ecosys-
tem. Finally, we demonstrate how Erays can be used for
reverse-engineering in four case studies: high-value multi-
signature wallets, arbitrage bots, exchange accounts, and
ﬁnally, a popular smart-contract game, Cryptokitties. We
conclude with a discussion regarding the value of reverse
engineering in the smart contract ecosystem, and how
Erays can be leveraged to address the challenges that lie
ahead.
1
Introduction
Smart contracts are programs that facilitate trackable, ir-
reversible digital transactions. Smart contracts are promi-
nently featured in Ethereum, the second largest cryptocur-
rency. In 2018, Ethereum smart contracts hold over $10 B
USD1. These can be used to facilitate a wide array of
tasks, such as crowdfunding, decentralized exchanges,
and supply-chain tracking [32].
1At the time of writing in February 2018 the Ethereum to USD
conversion is approximately $1.2 K USD per ETH
Unfortunately, smart contracts are historically error-
prone [14, 24, 52] and there is a potential high ﬁnancial
risk associated with interacting with smart contracts. As
a result, smart contracts have attracted the attention of
several regulatory bodies, including the FTC [18] and the
SEC [43], which are intent on auditing these contracts to
prevent unintended ﬁnancial consequences. Many smart
contracts do not have readily linkable public source code
available, making them opaque to auditors.
To better understand opaque smart contracts, we
present Erays, a reverse engineering tool for Ethereum
smart contracts. Erays takes as input a compiled Ethereum
Virtual Machine (EVM) smart contract without modiﬁ-
cation from the blockchain, and returns high-level pseu-
docode suitable for manual analysis. To build Erays, we
apply a number of well-known program analysis algo-
rithms and techniques. Notably, we transform EVM from
a stack-based language to a register based machine to ease
readability of the output for the end-user.
We next turn to measuring the Ethereum smart con-
tract ecosystem, leveraging Erays to provide insight into
code complexity and code reuse. We crawl the Ethereum
blockchain for all contracts and collect a total of 34 K
unique smart contracts up until January 3rd, 2018. Of
these, 26 K (77.3%) have no readily available source code.
These contracts are involved with 12.7 M (31.6%) trans-
actions, and hold $3 B USD.
We next leverage Erays to demonstrate how it can be
used to link smart contracts that have no readily available
source code to publicly available source code. We build a
“fuzzy hash” mechanism that can compare two smart con-
tracts and identify whether a function in one contract has
similar syntactic structure to functions in another contract.
Using this technique, we are able to map a median 50% of
functions and 14.7% of instructions per opaque contract,
giving immediate partial insight to opaque contracts in
the ecosystem.
Finally, we show how Erays works as a reverse en-
gineering tool applied to four case studies—high-value
USENIX Association
27th USENIX Security Symposium    1371
multi-signature wallets, arbitrage bots, exchange accounts,
and ﬁnally, a popular smart contract game, Cryptokit-
ties. In investigating high-value wallets, we were able
to reverse engineer the access control policies of a large,
commercial exchange. We ﬁnd some standard policies,
however, also uncover ad-hoc security devices involving
timers and deposits. In studying arbitrage contracts, we
ﬁnd examples of new obfuscation techniques. We then
successfully reverse engineer the opaque portion of code
from the Cryptokitties game, which plays a role in en-
suring fair gameplay. In all of these cases, we ﬁnd that
opacity is expected and sometimes important to the cor-
rect functionality of these contracts. In light of this, we
posit that smart contract developers may be expecting to
achieve “security by obscurity” by withholding their high
level code.
We conclude with a discussion of the value of audits,
reverse engineering, and where Erays can aid in solving
the growing needs of the Ethereum community. We hope
Erays will prove useful to the security and cryptocurrency
communities to address the challenges that lie ahead.
2 Background
Blockchains and Cryptocurrencies. A blockchain is
a distributed network that maintains a globally consis-
tent log of transactions. Public blockchains, such as Bit-
coin [40] and Ethereum [50], are typically implemented
as open peer-to-peer networks, based on proof-of-work
mining. Cryptocurrencies are virtual currencies imple-
mented on a public blockchain, where the transactions are
digitally signed messages that transfer balances from one
user account (i.e., public key) to another.
Ethereum Smart Contracts.
In addition to user ac-
counts, Ethereum also features smart contract accounts.
A contract account is associated with a fragment of exe-
cutable code, located at an address. Smart contracts make
up approximately 5% of the total Ethereum accounts, ac-
count for 31.2% of the overall transactions, and hold 9.4%
of total Ether in their balances.
A smart contract is executed when a user submits a
transaction with the contract as the recipient. Users in-
clude payload data in the transaction, which in turn is
provided as input to the smart contract program. A con-
tract is arranged as a collection of functions, which users
can invoke. A contract can also trigger the execution of
another smart contract through a CALL instruction that
sends a message, similar to a remote procedure call in
other programming paradigms.
Smart contract execution must be replicated by validat-
ing nodes on the network. To prevent resource exhaustion,
users that create transactions must pay an amount of gas
for every opcode executed, which translates to certain
amount of Ether depending on a market rate.
Contracts are executed in a virtual environment known
as the Ethereum Virtual Machine (EVM). EVM deﬁnes a
machine language called EVM bytecode, which includes
approximately 150 opcodes [50]. EVM is a stack-based
machine, where opcodes read and write from an operand
stack. EVM further provides memory and storage for
additional functionality. Memory is speciﬁed as an array
used to store volatile data during contract execution. Stor-
age is a key-value store indexed by 256-bit values (one
EVM-word). Unlike memory, storage persists across the
execution history of a contract and is stored as a part of
the global blockchain state.
Developers typically write smart contract code in high-
level languages, which are then compiled into EVM byte-
code. In 2018, the most popular programming language
for Ethereum smart contracts is Solidity [7]. Solidity
syntax is heavily inﬂuenced by Javascript and C++, and
supports a number of complex language features, such as
inheritance, libraries, and user-deﬁned types.
Ethereum-based Tokens.
In addition to the built-in
Ether currency, the Ethereum blockchain is also widely
used as a host for “tokens”, which are separate currency-
like instruments built on top of a smart contract. There are
currently more than 33 K such contracts on the Ethereum
network. Tokens can be traded as currencies on a va-
riety of market exchanges. Together, the total market
capitalization of tokens exceeds $60 B USD.2 Tokens to-
day are used to support a variety of functions, such as
crowd-funding and exchanges.
3 Opacity in Smart Contracts
The bytecode for every smart contract is readily available
on the blockchain. However, bytecode alone is is difﬁcult
to read and understand, limiting its use in effectively
determining what a smart contract does. We begin our
analysis of smart contracts by ﬁrst investigating how many
contracts can not be immediately linked back to source
code, and characterizing how important those contracts
are in the ecosystem.
3.1 Collecting and Compiling Contracts
In order to investigate contracts with missing source code,
we ﬁrst collect all Ethereum smart contracts from the
beginning of the blockchain through January 3rd, 2018.
This resulted in 1,024,886 contract instances. Not all of
these contracts have unique bytecode. After removing
duplicates, we ﬁnd only 34,328 unique contracts, which
is a 97% reduction in contracts from the original set.
2At the time of writing in February 2018, the Ethereum to USD
conversion is approximately $1.2 K USD per ETH.
1372    27th USENIX Security Symposium
USENIX Association
Type
Total
Unique
Opaque
Transparent
Contracts
1,024,886
34,328
26,594
7,734
Transactions
Balance (Ether)
40,380,705
40,380,705
12,753,734
27,626,971
(100%)
(100%)
(31.6%)
(68.4%)
9,884,533
9,884,533
2,559,745
7,324,788
(100%)
(100%)
(25.9%)
(74.1%)
Table 1: Opacity in Ethereum Blockchain—We show the opacity of contracts in the Ethereum blockchain, as well as the number
of transactions and Ether in each category. Although opaque contracts make up 77.3% of unique contracts, they only account for
31.6% of the transactions and 25.9% of the Ether held by contracts.
In order to determine how many blockchain contracts
have readily accessibly source code, we turned to Ether-
scan [3]. Etherscan has become the de facto source for
Ethereum blockchain exploration. Etherscan offers a use-
ful feature called “veriﬁed” contracts, where contract writ-
ers can publish source code associated with blockchain
contracts. Etherscan then independently veriﬁes that the
compiled source code produces exactly the bytecode avail-
able at a given address. Etherscan then makes the veriﬁed
source available to the public. We scraped Etherscan for
all veriﬁed contracts as of January 3rd, 2018, collecting a
total of 10,387 Solidity ﬁles.
We then compiled the Etherscan veriﬁed contracts to
determine exact bytecode matches with blockchain con-
tracts. Etherscan provides the precise compiler version
for each veriﬁed source ﬁle, so to begin, we compiled
each source ﬁle with its provided compiler version. From
these, we collected 7.5 K unique binaries. To identify
variants of contracts that were compiled with older ver-
sions of the Solidity compiler, we aggregated every major
compiler version from v0.1.3 to v0.4.19 and compiled
each contract with every version. In total, from the seed
set of 10.4 K source ﬁles, we collected 88.4 K unique
binaries across 35 compiler versions.
3.2 Opacity
We next investigated contract opacity in the Ethereum
ecosystem today. Of the 1 M contract instances, we could
not successfully match 965 K, or 96.5% to any compiled
source code. We ﬁnd that of the 34 K unique contracts,
we are able to successfully match 7.7 K ( 22.7%) of con-
tracts. Unfortunately, this leaves 77.3% of unique con-
tracts opaque.
We next turn to the question of how important these
77.3% of contracts are to the ecosystem. To quantify
importance, we use two metrics: the amount of money
stored in each contract, and the transaction volume (by
number of transactions) with each contract. Table 1 shows
a breakdown of the contracts in our dataset by these two
metrics. Although opaque contracts make up most of the
smart contracts in the ecosystem, we ﬁnd that they are
in the minority by both transaction volume and balance.
Opaque contracts are transacted with 12.7 M times, com-
pared with transparent contracts, which are transacted
with 27.6 M times. In addition, opaque contracts only
hold $3.1 B USD, while transparent contracts hold $7.3 B
USD. Although it appears that transparency in the ecosys-
tem prevails, the fact remains that 12.7 M interactions
with contracts and a total of $3.1 B USD are held in con-
tracts for which auditors and regulators have no insight
into.
4 System Design
In order to investigate opaque contracts in the Ethereum
ecosystem, we introduce Erays, an EVM reverse engi-
neering tool. Erays takes a hex encoded contract as input
and transforms it into human readable expressions. In this
section, we describe the transformations Erays makes in
order to build human-readable representations of smart
contracts.
4.1 Disassembly and Basic Block Identiﬁ-
cation
In the ﬁrst stage, we disassemble the hex string into EVM
instructions, and then partition these instructions into
basic blocks. A basic block is a linear code sequence
with a single entry point and single exit point [9]. We
generate the instructions using a straightforward linear
sweep [42]. Starting from the ﬁrst byte in the hex string,
each byte is sequentially decoded into the corresponding
instruction.
Next, we aggregate instructions into their resultant
basic blocks. These are derived through two simple
rules. Instructions that alter the control ﬂow (i.e., exits or
branches) mark block exit, while the special instruction
JUMPDEST marks block entry. When all block entries and
exits are identiﬁed, basic block partitioning is complete.
Code Block 1 shows an example of this transformation.
4.2 Control Flow Graph Recovery
In this stage, we recover the control ﬂow graph (CFG) [9]
from the basic blocks. A CFG is a directed graph where
USENIX Association
27th USENIX Security Symposium    1373