lowest accuracy of 94.34% for Threat-3 for only one benign smart
app installed in the system. With the increment of benign apps in
the SHS (highest 12 benign apps), accuracy ranges between 98%
to 95% and 94% to 92.5% for Threat-2 and Threat-3, respectively.
MotionDoorTemperatureLightMissing Sensor0.60.650.70.750.80.850.90.95True Positive (TP)Single BedroomDouble BedroomDuplexMotionDoorTemperatureLightMissing Sensor0.050.10.150.20.250.30.350.4False Negative (FN)Single BedroomDouble BedroomDuplexMotionDoorTemperatureLlightMissing Sensor0.60.650.70.750.80.850.90.95AccuracySingle BedroomDouble BedroomDuplexMotionDoorTemperatureLightMissing Sensor0.650.70.750.80.850.90.95F-ScoreSingle BedroomDouble BedroomDuplex02468101214Number of Sensors00.20.40.60.81AccuracyAccuracy:Min = 0Max = 0.96No. of Sensors:Min = 0Max = 130510152025Number of Sensors00.20.40.60.81AccuracyAccuracy:Min = 0Max = 0.96No. of Sensors:Min = 0Max = 2401020304050Number of Sensors00.20.40.60.81AccuracyAccuracy:Min = 0Max = 0.91No. of Sensors:Min = 0Max = 45024681012Number of Benign Apps9293949596979899Accuracy (%)Threat-1Threat-2Threat-3Threat-4Threat-511.522.533.544.55Number of Malicious Apps9293949596979899Accuracy (%)No. of Malicious Apps:Min = 1Max = 5Accuracy:Min = 94.89%Max = 96.54%Version Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac
FOR EDUCATIONAL PURPOSES ONLY
(a) User Policy 1
(b) User Policy 2
(c) User notification vs time
(d) Accuracy vs. Feedback
(e) Training time vs. Device
Figure 7: Performance evaluation of Aegis in a policy-enforced SHS (a), (b) and performance of Aegis in terms of user feedback
(c), (d), (e).
The accuracy of Aegis in detecting Threat-1, Threat-2, and Threat-5
varies between 96% to 93%. We also tested different malicious apps
installed at once in the SHS with a fixed number of benign apps (12
benign apps) to understand the effectiveness of Aegis completely.
Figure 6e depicts the accuracy of Aegis based on the number of
malicious apps installed on the system. One can notice that Aegis
can achieve an accuracy of 98% for one malicious app installed
in the SHS which decreases very little with the higher number of
malicious apps (92.57% with five malicious apps). In conclusion, the
performance of Aegis changed very little with the change in the
number of benign apps and malicious apps installed in the SHS.
Evaluation Based on User Policies: In modern SHS, users can
define customized policies to control the smart home devices. For
example, users can impose a time window to activate a smart light
in a SHS. In this sub-section, we test the efficiency of Aegis with
different policies enforced in SHS. We consider the following user
policies to evaluate Aegis:
User Policy 1: Users can apply time-specific operations for different
smart home entities. In policy 1, users configure a smart light with
the motion sensor which will be enforced only from sunset to
sunrise.
User Policy 2: Users can apply sensor-specific operations for different
smart home devices. In policy 2, users configure smart lights with
light, motion, and door sensors.
Aegis in different smart home settings over a 10 day period. One can
notice that in all three layouts the number of generated notification
decreases significantly. For the single home layout, the number of
notifications decreases by 59% in 5 days. For double bedroom and
duplex layout, the number of notifications also decreases by 52.45%
and 74.67%, respectively. This indicates that users only have to deal
with higher feedback requests for a short period of time. Note that
Aegis pushes a notification for both FP and TN events as our test
dataset includes both normal user activity and malicious events.
Hence, the number of notifications generated for only FP events is
lower than it seems in Figure 7c. For example, in day 10, the total
number of notification is 10 among which 6 notifications are from
FP. Figure 7d shows how user feedback affects the accuracy of Aegis
in detecting different threats. One can notice that the accuracy of
Aegis increases very little from 50% to 100% user feedback. This
indicates that if the users actively train Aegis in the initial period
(1-5 days) in adaptive training mode, the performance improves
significantly. Again, Aegis always provides the option to choose a
specific time for adaptive training mode to the users. In conclusion,
Aegis can negate the consequence of user fatigue by terminating
adaptive training mode after an initial period, which is configurable
by the users.
Figures 7a and 7b present the performance of Aegis in these
policies enforced in SHSs. One can observe that Aegis achieved
accuracy as high as 95% while enforcing time-specific operations
in SHS (Figure 7a). The F-score also ranges from 89% to 94% for
different smart home layouts with time-specific operations with low
FN rate (5%-8%). For User Policy 2, one can observe a slight fall in
the accuracy and F-score as changing sensor-device configuration
introduces FN cases in the system. From Figure 7a, we can see that
Aegis can perform with an accuracy ranging from 85% to 93% for
different smart home layouts while changing the sensor-device
configurations. Aegis also achieves F-score ranging from 86.5-92%
for different configurations. In summary, Aegis can detect malicious
activities in policy-enforced SHS with high accuracy and F-score.
5.4 Evaluation with Different User Behavior
In this sub-section, we test Aegis in terms of user interactions and
behavior in the SHS. Aegis uses an adaptive training method which
requires users’ feedback to detect FP and FN cases. This adaptive
training method may cause user fatigue with excessive feedback
notifications [2]. To determine how the user fatigue may affect the
performance of Aegis, we performed accuracy vs. user feedback
study which is shown in Figure 7c and 7d. Figure 7c shows the
number of notifications generated in adaptive training mode by
5.5 Performance Overhead
We illustrate the performance overhead of Aegis, including resource
overhead and latency. We identify two major features that could
introduce a time delay in real-time operation.
Delay in adaptive training model: Aegis offers adaptive training
mode where any malicious event detected by Aegis is forwarded to
the user for validation. Aegis uses this validated data to retrain the
analytical model which introduces a time delay in the operation. In
Figure 7e, we illustrate the time needed for retraining the framework
with respect to the number of devices installed in the device. One
can notice that Aegis takes approximately 230 ms to train when
the system has 6 different installed in the SHS. The training time
increases to 519 ms for 24 installed devices in the SHS. In short, Aegis
introduces negligible overhead in terms of time delay in adaptive
training mode.
Delay in action management module: Action management module
of Aegis alerts users in the event of malicious activity in SHS. The
alert message is sent to the controller device (smartphone, tablet,
etc.) in the form of notification which introduces a time delay in
the action management module. We use a SmartThings app to send
notifications to controller devices of authorized users. This app
communicates with the cloud server via http protocol which is
connected with the action management module (Section 4.4). On
681012141618202224Number of Installed Devices200250300350400450500550Time (ms)No. of Sensors:Min = 0Max = 24Delay:Min = 234msMax = 517msVersion Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac
FOR EDUCATIONAL PURPOSES ONLY
average, action management takes 210 ms time to send a notifica-
tion to the controller device from the moment of malicious activity
detection which is low for real-world deployment. In short, we
conclude that Aegis meets the efficient demands in the action man-
agement module. Appendix E provides details of the alert system
of Aegis in normal and adaptive training mode.
6 USER SCENARIOS AND DISCUSSION
In this section, we illustrate how deploying Aegis in a smart home
can help different groups of consumers using several use scenarios
and discuss different benefits of Aegis.
6.1 User Scenarios
We illustrate three different user scenarios to understand the bene-
fits of Aegis among vendors, end-users, and developers.
Vendors- Smart home vendors can use Aegis to detect an abnormal
behavior in a customer’s home. Here, a customer, Alice, installs
several smart security devices (smart lock, smart camera, smart
fire alarm, etc.) and the corresponding smart apps to control them.
However, one of the installed app has malicious code that injects
false data when no one is at home to trigger the fire alarm (Table 1-
Threat- 2). As Alice does not have any idea of this malicious event,
she calls the security service provider/vendor for support. In this
situation, the security service provider can identify that the alarm
is generated from a false data from the state model generated by
Aegis and support the customer with appropriate suggestions such
as deleting the malicious app, reinstalling the correct app, etc.
End-users- End-users constitute the most common victims of ma-
licious events in a smart home. Attackers can perform several mali-
cious activities including gaining physical access to the home. For
instance, a smart home user, Bob, installs a new smart lock and the
corresponding app in the SHS. However, the installed app has a
malicious snippet to forward the unlock code to the attacker so he
can unlock the smart lock by impersonating Bob (Table 1- Threat 2).
Aegis can identify this event and notify the user in real-time. More-
over, Bob can change the state of the lock to unlock and prevent
any physical access of the smart home.
Developers- Developers or tech enthusiastic users can deploy
Aegis in their SHS and specify different rules to enhance the se-
curity of the their homes. For instance, Kyle, a smart home user,
installs multiple smart lights and motion sensors in his SHS. Kyle
also builds a new smart app to control the lights with motion. By
using the logic extractor of Aegis, Kyle can understand whether
his app logic is correct or not. Moreover, Kyle can use the adap-
tive training mode to see how the overall state of the SHS changes
with new devices and apps. If the action of the new smart lights
contradicts the existing system, or any malicious event occurs (e.g.,
Table 1- Threat 3), Kyle can understand the cause of the event and
take necessary steps. Moreover, Kyle can understand the working
conditions of smart home devices and improve his technological
knowledge using Aegis.
6.2 Discussion
Deployability in Real-life System- One of the prime features of
Aegis is easy deployability in real-life systems. Aegis uses a simple
smart app to collect device states in a SHS and build the context-
aware model. The detection mechanism runs in the cloud which
does not hamper the normal operation of the SHS. Users can install
Aegis similarly to any other smart app.
Applicability and Real-life Threats- Security risks may arise
from smart home apps performing side-channel attacks. For in-
stance, a smart app can flash the light in a specific pattern to leak
information or trigger another connected device which can be con-
sidered as a threat. While most of the existing solutions consider
this threat as out of scope [6, 22], Aegis successfully detects such
malicious behaviors. In addition, Aegis can detect device malfunc-
tions inside a SHS. For instance, if a smart light is configured with
the motion sensor, one should expect that the light turns on due to
the active motion. Other outcomes from this specific context may
be categorized by Aegis as a malfunction.
Multi-user activity in SHS- In SHS, more than one user may
perform different activities simultaneously. As Aegis utilizes user
activity contexts to detect malicious actions, correctly distinguish-
ing between different user activities is key. Instead of single-context
analysis, Aegis uses a pattern of contexts to understand the user ac-
tivities. Hence, Aegis can detect simultaneous activities performed
by different users and devices in a SHS. For instance, if two users
are walking towards the same point from opposite directions, Aegis
observes the related contexts to identify two different motion activ-
ities.
Time interval in device states- Smart home devices use sensors
to automate tasks. For instance, a smart light can be triggered by a
motion sensor or a door sensor. Each trigger-action scenario has
an effect time (time duration of a device being active). This effect
time has to be correctly considered to build the context of the user
activity. Aegis mitigates this time dependency by considering the
pattern of device utilization. For instance, the user sets a smart light
to remain on for two minutes if a motion is detected. This case
is detected by Aegis by checking consecutive states of the overall
smart home and is used to detect malicious apps or malfunctioning
devices (if the motion is sensed by the sensor and it holds the state
for 20s, the smart light should be also on for, at least, 20s otherwise
broken or malicious). Aegis uses these trigger-action scenarios to
mitigate the effect of the time interval and builds the contextual
model from device state patterns.
Detecting rare events- In a smart home, different autonomous
events occur based on device configuration and user activities.
These events may include rare events such as triggering fire alarms.
As Aegis uses daily user activities to train its analytical model,
these rare events might be unaddressed and flagged as threat. To
solve this, we use the app context to verify unrecognized events in
Aegis. Any alert triggered in Aegis is verified with the app context
generated from the installed app (Section 4.2). If the app context is
matched with the rare event, Aegis considers the event as benign and
retrain the model automatically. Users can also check and verify rare
natural events through action management module (Appendix E).
7 RELATED WORK
In this section, we discuss threats to Smart Home Systems (SHSs)
and the shortcomings of existing security solutions available for
SHSs platforms.
Security Vulnerabilities: Recent works have outlined security
threats to SHSs [10, 23, 25].These threats focus on three SHSs com-
ponents: communication protocols, devices, and apps. Attackers
Version Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac
FOR EDUCATIONAL PURPOSES ONLY
may exploit implementation flaws in communication protocols to
leak sensitive information from devices [13, 21, 26] via information
extracted from network packets [1, 5, 16]. Fernandes et al. reported
several design flaws in SHSs [11]. Chi et al. showed that it is possible
to exploit smart home platform by triggering malicious activities
from legitimate user action [8]. As smart home devices can be con-
trolled by an accompanying smartphone app, the smartphone itself
can also be used to implement attacks [11, 30]. Jia et al. reported
the existence of several malicious apps that can be migrated from
smartphone and IoT platforms to SHSs [18]. Recently, IoTBench
repository [6, 17] revealed 19 different malicious apps for SHSs.
Existing Security Solutions: Researchers have introduced solu-
tions to secure SHSs against existing vulnerabilities.
Permission-based approach. Previous studies proposed permission-
based approaches to provide security in SHSs. Jia et al. introduced
ContextIoT, a context-aware permission model to restrict unautho-
rized device access and detect malicious activities in SHSs [18].
Policy and configuration analysis. Several policy-based security mea-
sures were proposed to limit unauthorized access to SHSs [7, 31, 35].
Similar to permission-based approaches, these solutions depend
on user decision. Mohsin et al. presented IoTSAT, a framework to
analyze threats on SHSs using device configurations and enforced
user policies [22].
Static analysis. Recently, static analysis of smart home apps have
been proposed to detect information leakage and cross-app inter-
ference. Berkay and Babun et al. introduced a static analysis tool,
SaINT, to track sensitive information in smart home apps [6]. Chi
et al. proposed a static analysis tool to extract app context from
smart home apps to detect cross-app interference [8].
Forensic analysis. Forensic analysis of smart home data has been
proposed to identify malicious events in a SHS. Wang et al. proposed
a security tool, ProvThings, which logs run-time data from smart
home apps and perform provenance tracking to detect malicious
activities in a SHS [36]. Babun et al. proposed IoTDots, a forensic
analysis tools which can detect user behavior from logged data in
a SHS [4].
Differences from the existing solutions: The differences between
Aegis and existing solutions (although they are useful) can be ar-
ticulated as follows. (1) While existing solutions focus on securing
shared data and improving current user permission system [18],
Aegis detects malicious behaviors by considering user and device
activity contexts in a SHS. (2) Aegis considers both smart home
configurations and installed apps to build a context-aware model
and detect threats at run-time which outdo user-dependent so-
lutions [18]. (3) Additionally, no source code modification [4] is
needed for Aegis to collect data from smart home devices and detect
malicious activities in a SHS. (4) Unlike threat-specific existing solu-
tions [6, 36], Aegis can detect five different types of threat in a SHS
which makes it a more robust solution. (5) Finally, Aegis collects
data from a common access point and performs behavior analysis
at run-time which reduces cost in terms of processing and over-
head from other prior works [4, 6]. In addition, Aegis does not store
user data from smart home devices which reduces the privacy risks
and concerns from prior solutions [4]. In summary, Aegis offers a
context-aware security framework which uses behavior analysis,
usage patterns, and app context to detect malicious activities at
run-time and ensures security against five different threats to SHS
with high accuracy and minimal overhead.
8 CONCLUSION
New app-based smart home systems (SHSs) expose the smart home
ecosystem to novel threats. Attackers can perform different attacks
or deceive users into installing malicious apps. In this paper, we
presented Aegis, a novel context-aware security framework for
smart homes that detects malicious activities by (1) observing the
change in device behavior based on user activities and (2) building a
contextual model to differentiate benign and malicious behavior. We
evaluated Aegis in multiple smart home settings, with real-life users,
with real SHS devices (i.e., Samsung SmartThings platform), and
with different day-to-day activities. Our detailed evaluation shows
that Aegis can achieve over 95% of accuracy and F-score in different
smart home settings. We also tested Aegis against several malicious
behaviors. Aegis is highly effective in detecting threats to smart
home systems regardless of the smart home layouts, the number of
users, and enforced user policies. Finally, Aegis can detect different
malicious behavior and threats in SHS with minimum overhead. As
future work, we will expand our framework by considering new
multi-user settings and policies into the analysis.
9 ACKNOWLEDGMENT
This work is partially supported by the US National Science Foun-
dation (Awards: NSF-CAREER-CNS-1453647, NSF-1663051) and
Florida Center for Cybersecurity’s Capacity Building Program. The
views expressed are those of the authors only, not of the funding
agencies.
REFERENCES
[1] Abbas Acar, Hossein Fereidooni, Tigist Abera, Amit Kumar Sikder, Markus Miet-
tinen, Hidayet Aksu, Mauro Conti, Ahmad-Reza Sadeghi, and A Selcuk Uluagac.
2018. Peek-a-Boo: I see your smart home activities, even encrypted! arXiv
preprint arXiv:1808.02741 (2018).
[2] Devdatta Akhawe and Adrienne Porter Felt. 2013. Alice in Warningland: A
Large-Scale Field Study of Browser Security Warning Effectiveness. In USENIX
Security Symposium.
[3] Amazon AWS. 2019.
Splitting the Data into Training and Evaluation
Data. https://docs.aws.amazon.com/machine-learning/latest/dg/splitting-the-
data-into-training-and-evaluation-data.html
[4] Leonardo Babun, Amit Kumar Sikder, Abbas Acar, and A Selcuk Uluagac. 2018.
IoTDots: A Digital Forensics Framework for Smart Environments. arXiv preprint
arXiv:1809.00745 (2018).
[5] Joseph Bugeja, Andreas Jacobsson, and Paul Davidsson. 2016. On Privacy and
Security Challenges in Smart Connected Homes. In IEEE European Intelligence
and Security Informatics Conference (EISIC),.
[6] Z. Berkay Celik, Leonardo Babun, Amit Kumar Sikder, Hidayet Aksu, Gang Tan,
Patrick McDaniel, and A. Selcuk Uluagac. 2018. Sensitive Information Tracking
in Commodity IoT. In 27th USENIX Security Symposium.
[7] Antorweep Chakravorty, Tomasz Wlodarczyk, and Chunming Rong. 2013. Pri-
vacy preserving data analytics for smart homes. In IEEE Security and Privacy
Workshops (SPW).
[8] Haotian Chi, Qiang Zeng, Xiaojiang Du, and Jiaping Yu. 2018. Cross-App
Threats in Smart Homes: Categorization, Detection and Handling. arXiv preprint
arXiv:1808.02125 (2018).
[9] Sudhir Chitnis, Neha Deshpande, and Arvind Shaligram. 2016. An investiga-
tive study for smart home security: Issues, challenges and countermeasures. In
Wireless Sensor Network.
[10] Tamara Denning, Tadayoshi Kohno, and Henry M. Levy. 2013. Computer Security
and the Modern Home. In Commun. ACM.
[11] Earlence Fernandes, Jaeyeon Jung, and Atul Prakash. 2016. Security analysis of
emerging smart home applications. In IEEE Symposium on Security and Privacy
(SP).
Version Accepted by ACSAC'19: A. K. Sikder, L. Babun, H. Aksu, A. Selcuk Uluagac