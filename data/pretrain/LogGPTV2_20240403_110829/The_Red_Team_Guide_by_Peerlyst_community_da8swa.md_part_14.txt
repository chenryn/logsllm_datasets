![](media/image149.png)As you can see from the
[screenshot](https://www.peerlyst.com/tags/screenshot) Metasploit is
loaded with [Modules](https://www.peerlyst.com/tags/modules)
(**Exploits**,**payloads**,**auxiliaries** and so on). Let's explore
them one by one.
### Modules
Modules are components that perform specific tasks.To list them on your
Kali linux console:
> *ls /usr/share/metasploit-framework/modules*
### ![](media/image150.png)Exploits
Metasploit is an amazing exploitation tool. Thus it is loaded by a
various number of exploits. To check the available Metasploit
[exploits](https://www.peerlyst.com/tags/exploits) simply type:
> *show exploits*
>
> ![](media/image151.png)
Exploits can be divided into three types:
-   ### Server-side exploits
-   **Client-side exploits**
-   **Local-privilege escalation**
If you want to search for a specific type of exploits you can use the
"**searchsploit**" utility (To search for exploits that are provided by
[Exploit-DB](https://www.peerlyst.com/tags/exploit-db)). For example, if
you want to search for Linux exploits just type:
> *searchsploit linux*
>
> ![](media/image152.jpeg)
### Payloads
A [payload](https://www.peerlyst.com/tags/payload) is a piece of
[code](https://www.peerlyst.com/tags/code) to be executed through an
exploit.
> List the [payloads](https://www.peerlyst.com/tags/payloads) folder
> contents and you will notice three different
> folders(**singles,stagers,stages**)
>
> ![](media/image153.png)
Metasploit payloads can be:
-   **Singles** (or called Inline Payloads): these payloads are
    self-contained
-   **Staged** payloads: they contain multiple pieces of the payload
    (stagers). In other words: 1 payload = Many Stagers
> To Know more about Payload types: **Metasploit Unleashed official
> guide** defines them as the following:
### Singles
Singles are payloads that are self-contained and completely standalone.
A **Single payload** can be something as simple as adding a user to the
target system or running calc.exe.
These kinds of payloads are self-contained, so they can be caught with
non-metasploit handlers such as netcat.
### Stagers
Stagers setup a [network](https://www.peerlyst.com/tags/network)
connection between the attacker and
[victim](https://www.peerlyst.com/tags/victim) and are designed to be
small and reliable.
> **Windows NX vs NO-NX Stagers**
-   *Reliability issue for NX CPUs and
    [DEP](https://www.peerlyst.com/tags/dep)*
-   *NX stagers are bigger (VirtualAlloc)*
-   *Default is now NX + Win7 compatible*
## Stages
Stages are *payload components* that are downloaded by Stagers modules.
The various payload stages provide advanced features with no size limits
such as
[*Meterpreter*](https://www.offensive-security.com/metasploit-unleashed/about-meterpreter/),
[VNC](https://www.peerlyst.com/tags/vnc)
[Injection](https://www.peerlyst.com/tags/injection), and the
[iPhone](https://www.peerlyst.com/tags/iphone) 'ipwn' Shell.
[Payload stages]{.underline} automatically use 'middle stagers'
-   A single recv() fails with large payloads
-   The stager receives the middle stager
-   The middle stager then performs a full
    [download](https://www.peerlyst.com/tags/download)
-   Also better [for RWX](https://www.peerlyst.com/tags/rwx)
**Meterpreter**: is a command environment that works entirely within
memory. The following are some of the most used commands:
-   ### sysinfo
-   **getsystem**
-   **getuid**
-   **reg**
-   **background**
-   **ps**
-   **kill**
> **Auxiliaries**
As discussed before Auxiliaries are performing some specific tasks such
as [scanning](https://www.peerlyst.com/tags/scanning),
[DNS](https://www.peerlyst.com/tags/dns) interrogation and so on.
> ![](media/image154.png)
## Encoders
Encoders are very useful when it comes to avoiding detection. Generally,
all the generated payloads by Metasploit are detectable by most
[protection](https://www.peerlyst.com/tags/protection) products.
Encoding could be a solution to avoid
[detection](https://www.peerlyst.com/tags/detection) (Also encoding is
not an ultimate solution)
## ![](media/image155.png)NOPs
> *[In assembly](https://www.peerlyst.com/tags/assembly) code,*
> [*[NOP]{.underline}*](http://en.wikipedia.org/wiki/NOP) *is short for
> No OPeration. This is most popularly known for x86 chips as 0x90. When
> a [processor loads](https://www.peerlyst.com/tags/processor) that
> instruction, it simply does nothing (at least useful) for the one
> cycle and then advances [the
> register](https://www.peerlyst.com/tags/the-register) to the next
> instruction. (Source*
> [*[https://security.stackexchange.com/questions/30497/nops-in-metasploit]{.underline}*](https://security.stackexchange.com/questions/30497/nops-in-metasploit)
> *)*
## Posts
Posts are great and handy modules used in Post-Exploitation.
According to The [Penetration
Testing](https://www.peerlyst.com/tags/penetration-testing) Execution
Standard
> *"The purpose of the Post-Exploitation phase is to determine the value
> of the machine
> [compromised](https://www.peerlyst.com/tags/compromised) and to
> maintain control of the machine for later use. The value of the
> machine is determined by the sensitivity of the data stored on it and
> the machines usefulness in further compromising the network."*
Once you exploit the target you can use the posts. To list them type
**show post**
> ![](media/image156.png)![](media/image157.png)To know more about a
> Post Module simply type info followed by the post module name. For
> example type: *info firefox/gather/passwords*
## Metasploit Persistence scripts
Persistence is a necessary aspect in every successful attack. Thus
Metasploit included some persistence
[scripts](https://www.peerlyst.com/tags/scripts) that you can use:
-   S4U Persistence (Scheduled Persistence)
-   Volume Shadow Copy [Service](https://www.peerlyst.com/tags/service)
    Persistence (VSS Persistence)
-   VNCInject
## ![](media/image158.png)Linux Post Exploitation with Empire:
To use the [project](https://www.peerlyst.com/tags/project) check clone
it from the following [github
repository](https://www.peerlyst.com/tags/github-repository):
[[https://github.com/EmpireProject/Empire]{.underline}](https://github.com/EmpireProject/Empire)
Clone it and run
> ![](media/image159.png)*sudo ./setup/install.sh*
![](media/image160.jpeg)This is the main screen of Empire:
As you can see, this great project contains 3 major component as the
following:
-   ### Modules
-   **Listeners**
-   **Agents**
[Kali](https://www.peerlyst.com/tags/kali) Ninja
([[https://creator.wonderhowto.com/kalininja/]{.underline}](https://creator.wonderhowto.com/kalininja/))
defines them as the following:
-   A **listener** is a process which listens for a connection from the
    machine we are attacking. This helps Empire send the loot back to
    the attacker\'s computer.
-   A **stager** is a snippet of code that allows our [malicious
    code](https://www.peerlyst.com/tags/malicious-code) to be run via
    the agent on the compromised host.
-   An **agent** is a program that maintains a connection between your
    computer and the compromised host.
> To check listeners type: **listeners**
>
> To use a specific listener type: **uselistener .**
To take a look at the options type **info.**
## Linux kernel exploitation
![](media/image161.jpeg)[Linux Kernel
exploits](https://www.peerlyst.com/tags/linux-kernel-exploits) are very
critical because attackers are compromising the core of the systems.
Every modern operating system is based on what we call a "ring
protection model". Usually, they are 4 layers numbered from 0 to 3 as
the following graph illustrates:
> [Figure
> source](https://1.bp.blogspot.com/-8PL0K0AQ6-M/WG8qLGeEUII/AAAAAAAAGxc/mV51Z6oeyEwVkCxT_KtYbSEsmMe-LGWLQCLcB/s1600/AutoLocalPrivilegeEscalation.gif)
Linux operating system is based on the same mechanism but with 2 layers:
The **User Land** and the **Kernel Land**. Memory management is one of
the greatest capabilities delivered by the linux Kernel.
[Criminals](https://www.peerlyst.com/tags/criminals) and attackers are
using many techniques to exploit the Linux
[Kernel](https://www.peerlyst.com/tags/kernel):
## 1- NULL pointer dereference
This attack occurs because of a NULL pointer error. Thus a
**NullPointerException** will be raised. In other words, the programming
object refers to an address with Value NULL.
## -Arbitrary kernel read/write
This attack occurs by passing data to the Linux Kernel
## - Memory corruption vulnerabilities
The [memory](https://www.peerlyst.com/tags/memory) is divided into
4,096-byte memory chunks named pages, to facilitate internal handling.
The 12 least significant bits are the offset; the rest is the page
number. On the recent [x86
architecture](https://www.peerlyst.com/tags/x86-architecture), Linux
kernel divides the [virtual](https://www.peerlyst.com/tags/virtual)
space, usually 4 GB into 3 GB dedicated to UserLand, and 1 GB for kernel
land. This operation is named segmentation.
The kernel uses a page [table](https://www.peerlyst.com/tags/table) for
the correspondence between physical and virtual
![](media/image162.jpeg)addresses. To manage the different regions of
memory, it uses a virtual memory area (VMA):
> [Figure
> source](http://static.duartes.org/img/blogPosts/linuxClassicAddressSpaceLayout.png)
## A - Kernel stack vulnerabilities:
The stack is a special memory space. This memory space grows
automatically. Attackers are exploiting the fact that if this section
gets closer to another memory space a
[problem](https://www.peerlyst.com/tags/problem) will occur and the
system will be confused.
## B- Kernel heap vulnerabilities:
The heap is used for dynamic memory allocation. Kernel heap
[exploits](https://www.peerlyst.com/tags/exploits) are dangerous because
in most cases, the attacker doesn\'t need to prepare a Linux module
[debugging](https://www.peerlyst.com/tags/debugging) environment.
## Race conditions
Race conditions exploits are done when the Linux threads are racing to
change the same data structure. To avoid this problem Linux implement
what we call a **Mutex** (mutual exclusion object)**.**
## Buffer overflow prevention techniques
To defend against [buffer
overflow](https://www.peerlyst.com/tags/buffer-overflow) attacks, there
are many implemented techniques to do that like:
### Address space layout randomization
[Address space layout
randomization](https://www.peerlyst.com/tags/address-space-layout-randomization)
(ASLR) is a memory-protection process for
[operating](https://www.peerlyst.com/tags/operating-systems)
[systems](https://www.peerlyst.com/tags/operating-systems) (OSes) that
guards against buffer-overflow attacks by randomizing the location where
system executables are loaded into memory.
### Stack canaries
Stack canaries are used to detect buffer overflow attacks before they
occur. Not to prevent them exactly, but they are implemented by
[compilers](https://www.peerlyst.com/tags/compilers) to make the
[exploitation](https://www.peerlyst.com/tags/exploitation) harder by
using canaries in potentially
[vulnerable](https://www.peerlyst.com/tags/vulnerable) functions. The
function prologue puts a value into the canary location and the epilogue
checks to make sure that value is not altered.
> ![](media/image163.png)[Figure
> source](https://ocw.cs.pub.ro/courses/_media/cns/labs/stack_canary_illustration.png?w=500&amp;tok=eb1cc3)
### Non-executable stack
Non-executable stack (NX) is a virtual [memory
protection](https://www.peerlyst.com/tags/memory-protection) mechanism
to block shell [code](https://www.peerlyst.com/tags/code-injection)
[injection](https://www.peerlyst.com/tags/code-injection) from executing
on the stack by restricting a particular memory and implementing the NX
bit. But this technique is not really worthy against return to libc
attacks, although they do not need
[executable](https://www.peerlyst.com/tags/executable) stacks.
## Linux return-oriented programming
[Return-oriented
programming](https://www.peerlyst.com/tags/return-oriented-programming)
(ROP) is a well-known technique to
[bypass](https://www.peerlyst.com/tags/bypass) most of the discussed
protection mechanisms. It is done by finding what we call
[ROP](https://www.peerlyst.com/tags/rop) gadgets (code snippets) and
jump to them. In this technique, the attacker hijacks and manipulates
program control flow and executes a chain of
[instructions](https://www.peerlyst.com/tags/instructions) that reside
in memory to perform the attack. This is called ROP chaining.
> ![](media/image164.jpeg)Figure source
## Linux Hardening
To harden your [Linux
systems](https://www.peerlyst.com/tags/linux-systems), you need to do
the following:
-   ### Update Linux kernel and applications
-   **Avoid using insecure services such as FTP and telnet and use SFTP
    and OpenSSH instead**
-   **Minimize the attack surface by using only the needed applications
    and services**
-   **If possible, use SELinux**
-   **Use a strong password policy**
-   **Keep an eye on faillog records**
-   **Harden /etc/sysctl.conf**
-   **Use an authentication server**
> **Summary**
This chapter was a lightweight overview of the Linux operating system.
We started by exploring the main Linux used commands and discussing many
important terminologies in Linux OS. Later we dived deep into the
security aspects of Linux and [how
to](https://www.peerlyst.com/tags/how-to) exploit a Linux Machine and we
finished the chapter by giving some