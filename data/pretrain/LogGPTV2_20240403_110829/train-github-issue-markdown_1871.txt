Choose one: is this a bug report or feature request? Bug
Given a rest property inside an object destructuring, Babel generates member
expressions to access the inner object incorrectly.
### Input Code
**Gist:** https://gist.github.com/also/578b123c2be5aecc53f7fd79c9547313
**Repl:**
https://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=stage-3&targets=&browsers=&builtIns=false&debug=false&code=const%20o%20%3D%20%7Ba%3A%20%7Bb%3A%20%7Bc%3A%20%7Bd%3A%20%7Bx%3A%201%2C%20y%3A%202%2C%20z%3A%203%7D%7D%7D%7D%7D%3B%0A%0Afunction%20works()%20%7B%0A%20%20const%20%7Ba%3A%20%7Bb%3A%20%7Bc%3A%20%7Bd%3A%20temp%7D%7D%7D%7D%20%3D%20o%3B%0A%20%20const%20%7Bx%2C%20y%2C%20...rest%7D%20%3D%20temp%3B%0A%20%20return%20rest%3B%0A%7D%0A%0Afunction%20broken()%20%7B%0A%20%20const%20%7Ba%3A%20%7Bb%3A%20%7Bc%3A%20%7Bd%3A%20%7Bx%2C%20y%2C%20...rest%7D%7D%7D%7D%7D%20%3D%20o%3B%0A%20%20return%20rest%3B%0A%7D%0A%0Aconsole.log(works())%3B%0Aconsole.log(broken())%3B%0A  
Note that when testing in the repl, the bug is only apparent when es2015 is
disabled, because es2015 compiles away the destructuring.
    const {a: {b: {c: {d: {x, y, ...rest}}}}} = o;
### Babel Configuration (.babelrc, package.json, cli command)
    {
      "plugins": [
        "transform-object-rest-spread"
      ]
    }
### Expected Behavior
Babel should apply the `_objectWithoutProperties` helper to `o.a.b.c.d`.
### Current Behavior
The generated member expressions `o.d.c.b.a` for the destructuring are
backwards:
    const { a: { b: { c: { d: { x, y } } } } } = o,
          rest = _objectWithoutProperties(o.d.c.b.a, ["x", "y"]);