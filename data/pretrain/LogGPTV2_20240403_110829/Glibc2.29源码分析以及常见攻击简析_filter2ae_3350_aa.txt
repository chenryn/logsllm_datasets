# Glibc2.29源码分析以及常见攻击简析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 零：前言
对glibc2.29的源码分析及一些攻击方式的介绍
## 一：整体介绍
我们平常做pwn题大概所利用的漏洞都是经过malloc，free等一些对内存进行操作的函数。下面我会对一些函数进行分析（如有错误，请师傅们直接指出）
libc_malloc,libc_free,int_malloc,int_free等一些函数分析
二：基本结构和定义的介绍
###  1.malloc_chunk
    struct malloc_chunk {
      INTERNAL_SIZE_T      mchunk_prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      mchunk_size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
    /*
    malloc_chunk details:
        (The following includes lightly edited explanations by Colin Plumb.)
        Chunks of memory are maintained using a `boundary tag' method as
        described in e.g., Knuth or Standish.  (See the paper by Paul
        Wilson ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps for a
        survey of such techniques.)  Sizes of free chunks are stored both
        in the front of each chunk and at the end.  This makes
        consolidating fragmented chunks into bigger chunks very fast.  The
        size fields also hold bits representing whether chunks are free or
        in use.
        An allocated chunk looks like this:
        chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if unallocated (P clear)  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk, in bytes                     |A|M|P|
          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             User data starts here...                          .
            .                                                               .
            .             (malloc_usable_size() bytes)                      .
            .                                                               |
    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             (size of chunk, but used for application data)    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of next chunk, in bytes                |A|0|1|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        Where "chunk" is the front of the chunk for the purpose of most of
        the malloc code, but "mem" is the pointer that is returned to the
        user.  "Nextchunk" is the beginning of the next contiguous chunk.
        Chunks always begin on even word boundaries, so the mem portion
        (which is returned to the user) is also on an even word boundary, and
        thus at least double-word aligned.
        Free chunks are stored in circular doubly-linked lists, and look like this:
        chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if unallocated (P clear)  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        `head:' |             Size of chunk, in bytes                     |A|0|P|
          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Forward pointer to next chunk in list             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Back pointer to previous chunk in list            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Unused space (may be 0 bytes long)                .
            .                                                               .
            .                                                               |
    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        `foot:' |             Size of chunk, in bytes                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of next chunk, in bytes                |A|0|0|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        The P (PREV_INUSE) bit, stored in the unused low-order bit of the
        chunk size (which is always a multiple of two words), is an in-use
        bit for the *previous* chunk.  If that bit is *clear*, then the
        word before the current chunk size contains the previous chunk
        size, and can be used to find the front of the previous chunk.
        The very first chunk allocated always has this bit set,
        preventing access to non-existent (or non-owned) memory. If
        prev_inuse is set for any given chunk, then you CANNOT determine
        the size of the previous chunk, and might even get a memory
        addressing fault when trying to do so.
        The A (NON_MAIN_ARENA) bit is cleared for chunks on the initial,
        main arena, described by the main_arena variable.  When additional
        threads are spawned, each thread receives its own arena (up to a
        configurable limit, after which arenas are reused for multiple
        threads), and the chunks in these arenas have the A bit set.  To
        find the arena for a chunk on such a non-main arena, heap_for_ptr
        performs a bit mask operation and indirection through the ar_ptr
        member of the per-heap header heap_info (see arena.c).
        Note that the `foot' of the current chunk is actually represented
        as the prev_size of the NEXT chunk. This makes it easier to
        deal with alignments etc but can be very confusing when trying
        to extend or adapt this code.
        The three exceptions to all this are:
         1. The special chunk `top' doesn't bother using the
        trailing size field since there is no next contiguous chunk
        that would have to index off it. After initialization, `top'
        is forced to always exist.  If it would become less than
        MINSIZE bytes long, it is replenished.  
         top chunk永远存在，且没有prev size字段
         2. Chunks allocated via mmap, which have the second-lowest-order
        bit M (IS_MMAPPED) set in their size fields.  Because they are
        allocated one-by-one, each must contain its own trailing size
        field.  If the M bit is set, the other bits are ignored
        (because mmapped chunks are neither in an arena, nor adjacent
        to a freed chunk).  The M bit is also used for chunks which
        originally came from a dumped heap via malloc_set_state in
        hooks.c.
         3. Chunks in fastbins are treated as allocated chunks from the
        point of view of the chunk allocator.  They are consolidated
        with their neighbors only in bulk, in malloc_consolidate.
    */   fastbin中的chunk的p位不会置零，是为了防止合并
###  2.malloc_stats
    void
    __malloc_stats (void)
    {
      int i;
      mstate ar_ptr;
      unsigned int in_use_b = mp_.mmapped_mem, system_b = in_use_b;
      if (__malloc_initialized _flags2;
      stderr->_flags2 |= _IO_FLAGS2_NOTCANCEL;
      for (i = 0, ar_ptr = &main_arena;; i++)
        {
          struct mallinfo mi;
          memset (&mi, 0, sizeof (mi));
          __libc_lock_lock (ar_ptr->mutex);
          int_mallinfo (ar_ptr, &mi);
          fprintf (stderr, "Arena %d:\n", i);
          fprintf (stderr, "system bytes     = %10u\n", (unsigned int) mi.arena);
          fprintf (stderr, "in use bytes     = %10u\n", (unsigned int) mi.uordblks);
    #if MALLOC_DEBUG > 1
          if (i > 0)
            dump_heap (heap_for_ptr (top (ar_ptr)));
    #endif
          system_b += mi.arena;
          in_use_b += mi.uordblks;
          __libc_lock_unlock (ar_ptr->mutex);
          ar_ptr = ar_ptr->next;
          if (ar_ptr == &main_arena)
            break;
        }
      fprintf (stderr, "Total (incl. mmap):\n");
      fprintf (stderr, "system bytes     = %10u\n", system_b);
      fprintf (stderr, "in use bytes     = %10u\n", in_use_b);
      fprintf (stderr, "max mmap regions = %10u\n", (unsigned int) mp_.max_n_mmaps);
      fprintf (stderr, "max mmap bytes   = %10lu\n",
               (unsigned long) mp_.max_mmapped_mem);
      stderr->_flags2 = old_flags2;
      _IO_funlockfile (stderr);
      }
其实这个我没太看懂，可能是缺少操作系统的知识吧，后期补！
###  3.#if USE_TCACHE
    #if USE_TCACHE
    /* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */
    # define TCACHE_MAX_BINS        64  //定义了一共有几种大小的tcache
    # define MAX_TCACHE_SIZE    tidx2usize (TCACHE_MAX_BINS-1)
    /* Only used to pre-fill the tunables.  */
    # define tidx2usize(idx)    (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)
    /* When "x" is from chunksize().  */
    # define csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)
    /* When "x" is a user-provided size.  */
    # define usize2tidx(x) csize2tidx (request2size (x))
    /* With rounding and alignment, the bins are...
       idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)
       idx 1   bytes 25..40 or 13..20
       idx 2   bytes 41..56 or 21..28
       etc.  */
    /* This is another arbitrary limit, which tunables can change.  Each
       tcache bin will hold at most this number of chunks.  */
    # define TCACHE_FILL_COUNT 7   //定义了同大小tcache最多能有多少个chunk
    #endif
## 三：bin介绍
###  1.bins数组
    mchunkptr bins[ NBINS * 2 - 2 ]：
    bins[1]: unsorted bin
    bins[2]: small bin(1)
    ...
    bins[63]: small bin(62)
    bins[64]: large bin(1)
    bins[65]: large bin(2)
    ...
    bins[126]: large bin(63)
bins数组一共有0~127个，bins[0]和bins[127]都不存在，bins[1]是unsortedbin的头部，有62个smallbin数组，63个largebin数组
###  2.fastbin
    /* offset 2 to use otherwise unindexable first 2 bins */
    #define fastbin_index(sz) \
      ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2)   //SIZE_SZ在64位下是8字节，在32位下是4字节
    /* The maximum fastbin request size we support */
    #define MAX_FAST_SIZE     (80 * SIZE_SZ / 4)       //160和80字节
    #define NFASTBINS  (fastbin_index (request2size (MAX_FAST_SIZE)) + 1)
###  3.smallbin
    /*
       Indexing
        Bins for sizes  2 * SIZE_SZ)
    #define MIN_LARGE_SIZE    ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)
    #define in_smallbin_range(sz)  \
      ((unsigned long) (sz) > 4) : (((unsigned) (sz)) >> 3))\
       + SMALLBIN_CORRECTION)
###  4.largebin
    #define largebin_index_32(sz)                                                \
      (((((unsigned long) (sz)) >> 6) > 6) :\
       ((((unsigned long) (sz)) >> 9) > 9) :\
       ((((unsigned long) (sz)) >> 12) > 12) :\
       ((((unsigned long) (sz)) >> 15) > 15) :\
       ((((unsigned long) (sz)) >> 18) > 18) :\
       126)
    #define largebin_index_32_big(sz)                                            \
      (((((unsigned long) (sz)) >> 6) > 6) :\
       ((((unsigned long) (sz)) >> 9) > 9) :\
       ((((unsigned long) (sz)) >> 12) > 12) :\
       ((((unsigned long) (sz)) >> 15) > 15) :\
       ((((unsigned long) (sz)) >> 18) > 18) :\
       126)
    // XXX It remains to be seen whether it is good to keep the widths of
    // XXX the buckets the same or whether it should be scaled by a factor
    // XXX of two as well.
    #define largebin_index_64(sz)                                                \
      (((((unsigned long) (sz)) >> 6) > 6) :\
       ((((unsigned long) (sz)) >> 9) > 9) :\
       ((((unsigned long) (sz)) >> 12) > 12) :\
       ((((unsigned long) (sz)) >> 15) > 15) :\
       ((((unsigned long) (sz)) >> 18) > 18) :\
       126)
    #define largebin_index(sz) \
      (SIZE_SZ == 8 ? largebin_index_64 (sz)                                     \
       : MALLOC_ALIGNMENT == 16 ? largebin_index_32_big (sz)                     \
       : largebin_index_32 (sz))
largebin中每个bin中含有chunk的大小都可能不一致，63个bin被分为6组，每组之间的公差一致，且链表头的bk指向最小的chunk。
###  5.tcache
**1.tcache_entry**
    typedef struct tcache_entry  
    {
      struct tcache_entry *next;     
      /* This field exists to detect double frees.  */
      struct tcache_perthread_struct *key;  //防止double free
    } tcache_entry;
**2.tcache_perthread_struct**
    typedef struct tcache_perthread_struct
    {
      char counts[TCACHE_MAX_BINS]; //设置tcache大小的数量，共64个