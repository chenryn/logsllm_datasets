difficult to reason about how a receiver will behave.
IMC ’17, November 1–3, 2017, London, UK
Figure 1: Threat Model
This observation has motivated work on TCP reset attack eva-
sion. For example, Khattak et al. [17] manually crafted a fairly
comprehensive set of the evasion strategies at the TCP and HTTP
layers against the GFW and verified them successfully in a lim-
ited setting with a fixed client and server. Unfortunately, there are
a large number of factors that were not taken into account (e.g.,
different types of GFW devices may be encountered on different
network paths, various middleboxes may interfere with the evasion
strategies by dropping crafted packets).
3 MEASUREMENT OF EXISTING EVASION
STRATEGIES
Based on the fundamental limitations of NIDS outlined by Ptacek et
al. [23], the GFW’s modeling by the Khattak et al. [17], and the
implementation of the West Chamber Project [25], we divide cen-
sorship evasion strategies based on TCB-manipulations into three
high-level categories, viz., (1) TCB creation, (2) data reassembly, and
(3)TCB teardown. In this section, we perform in-depth measure-
ments to evaluate the effectiveness of existing evasion strategies,
developed based on the currently known model of the GFW in these
categories.
3.1 Threat model
The threat model is depicted in Fig. 1. The client initiates a TCP con-
nection with the server. The GFW establishes a shadow connection
by creating a TCB and can read from and inject packets to the orig-
inal connection. Meanwhile, there could be network middleboxes
on the path. We refer to the middleboxes between the client and
the GFW as client-side middleboxes and the middleboxes between
the GFW and the server as server-side middleboxes.
3.2 Existing evasion strategies
The goal of current evasion strategies (listed below) is to cause the
GFW and the server to enter different states (i.e., become desynchro-
nized) by sending specially crafted packets, especially “insertion”
packets. These insertion packets are crafted such that they are ig-
nored by the intended server (or never reach the server) but are
accepted and processed by the GFW.
TCB Creation. As per previous work [17], the GFW creates a
TCB upon seeing a SYN packet. Thus the client can send a SYN
insertion packet with a fake/wrong sequence number to create a
false TCB on the GFW, and then build the real connection. The GFW
will ignore the real connection because of its “unexpected” sequence
number. The TTL (time to live) or checksum in the insertion packet,
IMC ’17, November 1–3, 2017, London, UK
Zhongjie Wang et al.
is manipulated to prevent the acceptance of the first injected SYN
by the server—a packet with a lower TTL value would never reach
the intended server and a packet with wrong checksum would be
discarded by the server.
Data Reassembly. The data reassembly strategy has two cases:
1. Out-of-order data overlapping. Different TCP implementations
treat overlapping out-of-order data fragments in different ways.
Previous work [17] has shown that if the GFW encounters two out-
of-order IP fragments with the same offset and length, it prefers
(records) the former and discards the latter. However, with regards
to out-of-order TCP segments with the same sequence number and
length, it prefers the latter (details in [17]). This characteristic with
regards to IP fragmentation can be exploited as follows. First, a gap
is intentionally left in the payload and a fragment with offset X and
length Y, containing random garbage data is sent. Subsequently,
the real data with offset X and length Y, containing the sensitive
keyword, is sent to evade the GFW (since the GFW is expected to
choose the former packet). Finally the gap is filled by sending the
real data with offset 0 and length X. To exploit the GFW’s handling
of TCP segments, we simply switch the order of the garbage data
and the real data.
2. In-order data overlapping. When two in-order data packets
carrying IP or TCP fragments arrive, both the GFW and the server
will accept the first in-order packet that carries a specific fragment
(specified by offset/sequence number). One can then craft insertion
packets that contain junk data to fill the GFW’s receive buffer, while
making them to be ignored by the server. For example, one can craft
an insertion data packet with a small TTL or a wrong checksum;
such packets either never reach or are dropped by the server but
are accepted and processed by the GFW.
TCB Teardown. As per the known model, the GFW is expected
to tear down the TCB that it maintains when it sees a RST, RST/ACK,
or a FIN packet. One can craft such packets to cause the TCB tear-
down, while manipulating fields such as the TTL or the checksum
to ensure that the connection on the server is alive.
3.3 Experimental Setup
We employ 11 vantage points in China, in 9 different cities (Bei-
jing, Shanghai, Guangzhou, Shenzhen, Hangzhou, Tianjin, Qingdao,
Zhangjiakou, Shijiazhuang) and spanning 3 ISPs. 9 of these use the
cloud service providers (Ailyun and Qcloud) and the other two
use home networks (China Unicom). The servers are chosen from
Alexa’s top websites worldwide. We first filter out the websites
that are affected by IP blocking, DNS poisoning, or are located
inside China. We exclude the websites that use HTTPS by default,
for two reasons. First, HTTPS traffic is not currently censored by
the GFW; thus, we can already access them freely without using
any anti-censorship technique. Second, if we access these HTTPS
websites using HTTP, they send HTTP 301 responses to redirect
us to HTTPS, and the sensitive keyword is copied to the Location
header field of the response. We find that the GFW devices on some
paths can in fact detect this in the response packets. This is similar
to the HTML response censorship measured in [20]. Furthermore,
assuming that GFW devices deployed in a particular autonomous
systems (AS) usually are of the same type and version, and config-
ured with the same policy, we choose only one IP from each AS, in
order to diversify our experiments by spanning a large set of ASes.
By applying filters based on the above rules, and removing a few
slow or unresponsive websites, we finally obtain a dataset of 77
websites (from the considered 77 ASes) with Alexa ranks between
41 and 2091. We manually verify that these websites are accessible
(outside of China) and are affected by GFW’s TCP connection reset
upon containing a sensitive keyword, i.e., ultrasurf, in the HTTP
request. For each strategy and website, we repeat the test 50 times
and find the average. Since the GFW will blacklist a pair of hosts
for 90 seconds upon the detection of any sensitive keyword, we
add intervals between tests when necessary.
3.4 Results
We measure the effectiveness of existing strategies in evading the
GFW during April and May in 2017. The results are summarized in
Table 1.
has a high “Failure 2” rate (around 89%).
Results. Our findings are summarized below.
Notation: We use the following notation in Table 1: Success means
that we receive the HTTP response from the server and receive no
reset packets from the GFW. Failure 1 means that we receive no
HTTP response from the server nor do we receive any resets from
the GFW. Failure 2 means that we receive reset packets from the
GFW, i.e., either RST (type-1) or RST/ACK (type-2).
• We find that, possibly because of overloading of the GFW, even if
we do not use any evasion strategy, there is a still a 2.8% success
rate with regards to retrieving sensitive content. Interestingly
this behavior was first documented in 2007 [11] and persists until
now.
• We see that TCB creation with SYN does not generally work and
• With regards to data reassembly, we find that (a) out of order
data reassembly strategies have both high “Failure 1” and high
“Failure 2” rates but (b) sending in-order data to prefill the GFW’s
buffer results in a much higher success rate (typically > 80%).
• TCB teardown with FIN experiences high “Failure 2” rates while
TCB teardown with RST or RST/ACK experience around a 70%
success rate, but with a 25% chance trigger reset packets from
the GFW.
Evolution of the GFW. We believe that the primary reason for
the high failure rates with many existing strategies is because the
model of GFW assumed in previous work [17] is no longer valid.
While we defer a detailed discussion of how the model has evolved
to the next section, we point out here that the “checksum” field is
still not validated by the GFW, i.e., a packet with a wrong checksum
is still a good insertion packet (the GFW considers it to update
its TCB but the server discards it) if there’s no interference from
network middleboxes. We break down the results with regards to
the other reasons why these strategies fail, and analyze them below.
Interference from client-side middleboxes. Client-side mid-
dleboxes may drop our insertion packets. Since we manipulate
packet fields (e.g., wrong checksum, no TCP flag, etc.) to cause
the server or server-side middleboxes to discard insertion packets,
client-side middleboxes could also discard them. Thus the strategies
are voided, and will result in “Failures 2.”
IMC ’17, November 1–3, 2017, London, UK
w/ sensitive keyword
Failure 1
Strategy
No Strategy
TCB creation with SYN
Reassembly out-of-order data
Reassembly in-order data
TCB teardown with RST
TCB teardown with RST/ACK
TCB teardown with FIN
Discrepancy
N/A
TTL
Bad shecksum
IP fragments
TCP segments
TTL
Bad ACK number
Bad checksum
No TCP flag
TTL
TTL
TTL
Bad checksum
Bad checksum
Bad checksum
Success
2.8%
6.9%
6.2%
1.6%
30.8%
90.6%
83.1%
87.2%
48.3%
73.2%
63.1%
73.1%
68.9%
11.1%
8.4%
0.4%
4.2%
5.1%
54.8%
6.5%
5.7%
7.5%
1.9%
3.3%
3.2%
7.6%
3.2%
1.9%
1.0%
0.8%
Failure 2
96.8%
88.9%
88.7%
43.6%
62.6%
3.7%
9.5%
10.8%
48.4%
23.6%
29.3%
23.7%
29.2%
87.9%
90.7%
Failure 1
w/o sensitive keyword
Success
98.9%
95.3%
93.5%
45.1%
92.8%
95.1%
93.5%
98.4%
97.1%
94.7%
89.5%
97.1%
98.2%
99.4%
99.0%
1.1%
4.7%
6.5%
54.9%
7.2%
4.9%
6.5%
1.6%
2.9%
5.3%
10.5%
2.9%
1.8%
0.6%
1.0%
Table 1: Probing the GFW from 11 vantage points with 77 websites; experiments are repeated 50 times for each client/server
pair.
Wrong TCP checksum
Packet Type
IP fragments
No TCP flag
RST packets
FIN packets
Aliyun(6/11)
Discarded
QCloud(3/11)