There seems to be a genuine bug in `scipy.interpolate.interp2d`. In this
example the input arrays are given as full coordinates (and not as a regular
grid). This data here, is part of a much bigger non-regularly sampled surface,
thus I can't call `interp2d` with x, y as column and raw coordinates on a
regular grid.
    >>>  data
    array([(0.11, 1.0, 10.045999999999999), (0.13, 1.0, 9.6010000000000009),
           (0.14999999999999999, 1.0, 9.2579999999999991),
           (0.17499999999999999, 1.0, 8.9199999999999999),
           (0.20000000000000001, 1.0, 8.6479999999999997),
           (0.25, 1.0, 8.2159999999999993), (0.11, 2.0, 10.045999999999999),
           (0.13, 2.0, 9.5999999999999996),
           (0.14999999999999999, 2.0, 9.2579999999999991),
           (0.17499999999999999, 2.0, 8.9190000000000005),
           (0.20000000000000001, 2.0, 8.6460000000000008),
           (0.25, 2.0, 8.2089999999999996)], 
          dtype=[('M', '>> interp_data = interp2d(data['M'], data['age'], data['J'])
    Warning:     No more knots can be added because the number of B-spline coefficients
        already exceeds the number of data points m. Probably causes: either
        s or m too small. (fp>s)
            kx,ky=1,1 nx,ny=7,5 m=12 fp=0.000284 s=0.000000
The result definitely doesn't look right, I don't expect any interpolated
value to be around 0 especially with linear interpolation.  
![failed_interp2d](https://cloud.githubusercontent.com/assets/6788290/5002954/033c3ee2-69ff-11e4-9b9a-a68d3e19b2b4.png)