            cbActual += pInfo->cParms * sizeof(HGCMFunctionParameter32);
        else
    #endif
            cbActual += pInfo->cParms * sizeof(HGCMFunctionParameter);
        if (RT_LIKELY(cbData >= cbActual))
        { /* likely */}
        else
        {
            LogRel(("VBOXGUEST_IOCTL_HGCM_CALL: cbData=%#zx (%zu) required size is %#zx (%zu)\n",
                   cbData, cbData, cbActual, cbActual));
            return VERR_INVALID_PARAMETER;
        }
        pInfo->Hdr.cbOut = (uint32_t)cbActual;
     ........................................................
            else
                rc = VbglR0HGCMInternalCall(pInfo, cbInfo, fFlags, pSession->fRequestor,
                                            vgdrvHgcmAsyncWaitCallback, pDevExt, cMillies);
        }
    .............................................................
        return rc;
    }
从中可以看到`cbActual += pInfo->cParms *
sizeof(HGCMFunctionParameter);`，并且该值最后赋值`pInfo->Hdr.cbOut =
(uint32_t)cbActual;`，由此可见`pInfo->cParms`代表需要调用的函数的参数个数，而pInfo结构体下方就是cParms个`HGCMFunctionParameter`结构体对象。与`VBGL_IOCTL_HGCM_CONNECT`类似，最后驱动也是通过`IO端口操作`将数据发送到Host中的虚拟设备中，然后在设备的`vmmdevReqDispatcher`函数中处理。  
如下代码
    # ifdef VBOX_WITH_64_BITS_GUESTS
            case VMMDevReq_HGCMCall64:
    # endif
            case VMMDevReq_HGCMCall32:
                vmmdevReqHdrSetHgcmAsyncExecute(pThis, GCPhysReqHdr, *ppLock);
                pReqHdr->rc = vmmdevReqHandler_HGCMCall(pThis, pReqHdr, GCPhysReqHdr, tsArrival, ppLock);
                Assert(pReqHdr->rc == VINF_HGCM_ASYNC_EXECUTE || RT_FAILURE_NP(pReqHdr->rc));
                if (RT_SUCCESS(pReqHdr->rc))
                    *pfPostOptimize |= VMMDEVREQDISP_POST_F_NO_WRITE_OUT;
                break;
该操作仍然是异步处理，需要等待处理完成后回调函数响应，将结果通过IO端口传回Guest。操作主要是调用`vmmdevHGCMCall`来对相应的service里的函数进行调用。
####  vmmdevHGCMCall
    /**
     * Handles VMMDevHGCMCall request.
     *
     * @returns VBox status code that the guest should see.
     * @param   pThis           The VMMDev instance data.
     * @param   pHGCMCall       The request to handle (cached in host memory).
     * @param   cbHGCMCall      Size of the entire request (including HGCM parameters).
     * @param   GCPhys          The guest physical address of the request.
     * @param   enmRequestType  The request type. Distinguishes 64 and 32 bit calls.
     * @param   tsArrival       The STAM_GET_TS() value when the request arrived.
     * @param   ppLock          Pointer to the lock info pointer (latter can be
     *                          NULL).  Set to NULL if HGCM takes lock ownership.
     */
    int vmmdevHGCMCall(PVMMDEV pThis, const VMMDevHGCMCall *pHGCMCall, uint32_t cbHGCMCall, RTGCPHYS GCPhys,
                       VMMDevRequestType enmRequestType, uint64_t tsArrival, PVMMDEVREQLOCK *ppLock)
    {
    .............................................................
            rc = vmmdevHGCMCallFetchGuestParms(pThis, pCmd, pHGCMCall, cbHGCMCall, enmRequestType, cbHGCMParmStruct);
            if (RT_SUCCESS(rc))
            {
                /* Copy guest data to host parameters, so HGCM services can use the data. */
                rc = vmmdevHGCMInitHostParameters(pThis, pCmd, (uint8_t const *)pHGCMCall);
                if (RT_SUCCESS(rc))
                {
                    /*
                     * Pass the function call to HGCM connector for actual processing
                     */
                    vmmdevHGCMAddCommand(pThis, pCmd);
    #if 0 /* DONT ENABLE - for performance hacking. */
                    if (    pCmd->u.call.u32Function == 9
                        &&  pCmd->u.call.cParms      == 5)
                    {
                        vmmdevHGCMRemoveCommand(pThis, pCmd);
                        if (pCmd->pvReqLocked)
                        {
                            VMMDevHGCMRequestHeader volatile *pHeader = (VMMDevHGCMRequestHeader volatile *)pCmd->pvReqLocked;
                            pHeader->header.rc = VINF_SUCCESS;
                            pHeader->result    = VINF_SUCCESS;
                            pHeader->fu32Flags |= VBOX_HGCM_REQ_DONE;
                        }
                        else
                        {
                            VMMDevHGCMRequestHeader *pHeader = (VMMDevHGCMRequestHeader *)pHGCMCall;
                            pHeader->header.rc = VINF_SUCCESS;
                            pHeader->result    = VINF_SUCCESS;
                            pHeader->fu32Flags |= VBOX_HGCM_REQ_DONE;
                            PDMDevHlpPhysWrite(pThis->pDevInsR3, GCPhys, pHeader,  sizeof(*pHeader));
                        }
                        vmmdevHGCMCmdFree(pThis, pCmd);
                        return VINF_HGCM_ASYNC_EXECUTE; /* ignored, but avoids assertions. */
                    }
    #endif
                    rc = pThis->pHGCMDrv->pfnCall(pThis->pHGCMDrv, pCmd,
                                                  pCmd->u.call.u32ClientID, pCmd->u.call.u32Function,
                                                  pCmd->u.call.cParms, pCmd->u.call.paHostParms, tsArrival);
    ...................................................
        return rc;
    }
可以看出，vmmdevHGCMCall中首先是使用`vmmdevHGCMCallFetchGuestParms`函数和`vmmdevHGCMInitHostParameters`函数，将参数从Guest中拷贝到了设备本地缓冲区中，然后通过`pThis->pHGCMDrv->pfnCall`调用了对应的函数。  
通过调试
    In file: /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Devices/VMMDev/VMMDevHGCM.cpp
       1107                 }
       1108 #endif
       1109 
       1110                 rc = pThis->pHGCMDrv->pfnCall(pThis->pHGCMDrv, pCmd,
       1111                                               pCmd->u.call.u32ClientID, pCmd->u.call.u32Function,
     ► 1112                                               pCmd->u.call.cParms, pCmd->u.call.paHostParms, tsArrival);
       1113 
       1114                 if (rc == VINF_HGCM_ASYNC_EXECUTE)
       1115                 {
       1116                     /*
       1117                      * Done.  Just update statistics and return.
    pwndbg> s
       638 }
       639 
       640 static DECLCALLBACK(int) iface_hgcmCall(PPDMIHGCMCONNECTOR pInterface, PVBOXHGCMCMD pCmd, uint32_t u32ClientID,
       641                                         uint32_t u32Function, uint32_t cParms, PVBOXHGCMSVCPARM paParms, uint64_t tsArrival)
可以知道该函数指针指向的是`iface_hgcmCall`函数
####  iface_hgcmCall
    static DECLCALLBACK(int) iface_hgcmCall(PPDMIHGCMCONNECTOR pInterface, PVBOXHGCMCMD pCmd, uint32_t u32ClientID,
                                            uint32_t u32Function, uint32_t cParms, PVBOXHGCMSVCPARM paParms, uint64_t tsArrival)
    {
        Log9(("Enter\n"));
        PDRVMAINVMMDEV pDrv = RT_FROM_MEMBER(pInterface, DRVMAINVMMDEV, HGCMConnector);
        if (!pDrv->pVMMDev || !pDrv->pVMMDev->hgcmIsActive())
            return VERR_INVALID_STATE;
        return HGCMGuestCall(pDrv->pHGCMPort, pCmd, u32ClientID, u32Function, cParms, paParms, tsArrival);
    }
该函数简单的调用了`HGCMGuestCall`函数，而`HGCMGuestCall`函数继续调用`HGCMService::GuestCall`函数，同样也是通过`hgcmMsgPost`将消息挂到队列中，等待`hgcmServiceThread`线程取出消息并处理。
    /*
     * The service thread. Loads the service library and calls the service entry points.
     */
    DECLCALLBACK(void) hgcmServiceThread(HGCMThread *pThread, void *pvUser)
    {
        HGCMService *pSvc = (HGCMService *)pvUser;
        AssertRelease(pSvc != NULL);
           /* Cache required information to avoid unnecessary pMsgCore access. */
            uint32_t u32MsgId = pMsgCore->MsgId();
            switch (u32MsgId)
            {
               case SVC_MSG_GUESTCALL:
                {
                    HGCMMsgCall *pMsg = (HGCMMsgCall *)pMsgCore;
                    LogFlowFunc(("SVC_MSG_GUESTCALL u32ClientId = %d, u32Function = %d, cParms = %d, paParms = %p\n",
                                 pMsg->u32ClientId, pMsg->u32Function, pMsg->cParms, pMsg->paParms));
                    HGCMClient *pClient = (HGCMClient *)hgcmObjReference(pMsg->u32ClientId, HGCMOBJ_CLIENT);
                    if (pClient)
                    {
                        pSvc->m_fntable.pfnCall(pSvc->m_fntable.pvService, (VBOXHGCMCALLHANDLE)pMsg, pMsg->u32ClientId,
                                                HGCM_CLIENT_DATA(pSvc, pClient), pMsg->u32Function,
                                                pMsg->cParms, pMsg->paParms, pMsg->tsArrival);
                        hgcmObjDereference(pClient);
                    }
                    else
                    {
                        rc = VERR_HGCM_INVALID_CLIENT_ID;
                    }
                } break;
代码中，通过`HGCMClient *pClient = (HGCMClient *)hgcmObjReference(pMsg->u32ClientId,
HGCMOBJ_CLIENT);`获取到了`HGCMClient`服务对象，然后通过`pSvc->m_fntable.pfnCall`进入了对应服务的处理函数。  
调试如下
    In file: /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedClipboard/service.cpp
       407                                    void *pvClient,
       408                                    uint32_t u32Function,
       409                                    uint32_t cParms,
       410                                    VBOXHGCMSVCPARM paParms[],
       411                                    uint64_t tsArrival)
     ► 412 {
       413     RT_NOREF_PV(tsArrival);
       414     int rc = VINF_SUCCESS;
       415 
       416     LogRel2(("svcCall: u32ClientID = %d, fn = %d, cParms = %d, pparms = %d\n",
       417              u32ClientID, u32Function, cParms, paParms));
此时我们进入的是`SharedClipboard`服务的程序`svcCall`函数。对于`HostServices`目录下的各种服务都有一个`svcCall`函数的实现，由此可见，`svcCall`函数是服务程序的处理机入口。从代码可以看出这个函数是在`VBoxHGCMSvcLoad`中注册的
    extern "C" DECLCALLBACK(DECLEXPORT(int)) VBoxHGCMSvcLoad (VBOXHGCMSVCFNTABLE *ptable)
    {
        int rc = VINF_SUCCESS;
                g_pHelpers = ptable->pHelpers;
                ptable->cbClient = sizeof (VBOXCLIPBOARDCLIENTDATA);
                ptable->pfnUnload     = svcUnload;
                ptable->pfnConnect    = svcConnect;
                ptable->pfnDisconnect = svcDisconnect;
                ptable->pfnCall       = svcCall;
                ptable->pfnHostCall   = svcHostCall;
                ptable->pfnSaveState  = svcSaveState;
                ptable->pfnLoadState  = svcLoadState;
                ptable->pfnRegisterExtension  = svcRegisterExtension;
                ptable->pfnNotify     = NULL;
                ptable->pvService     = NULL;
                /* Service specific initialization. */
                rc = svcInit ();
    .................................................
至此，我们对于`VBGL_IOCTL_HGCM_CALL`调用Service中的函数的整个流程也有所清楚了。
###  VBGL_IOCTL_IDC_DISCONNECT
对于`VBGL_IOCTL_IDC_DISCONNECT`，流程与前面类似，比较简单，调用了对应服务的`DisconnectClient`函数，然后使用`hgcmObjDereference(pClient);`将服务句柄从设备缓存列表中移除。
                case HGCM_MSG_DISCONNECT:
                {
                    HGCMMsgMainDisconnect *pMsg = (HGCMMsgMainDisconnect *)pMsgCore;
                    LogFlowFunc(("HGCM_MSG_DISCONNECT u32ClientId = %d\n",
                                 pMsg->u32ClientId));
                    HGCMClient *pClient = (HGCMClient *)hgcmObjReference(pMsg->u32ClientId, HGCMOBJ_CLIENT);
                    if (!pClient)
                    {
                        rc = VERR_HGCM_INVALID_CLIENT_ID;
                        break;
                    }
                    /* The service the client belongs to. */
                    HGCMService *pService = pClient->pService;
                    /* Call the service instance to disconnect the client. */
                    rc = pService->DisconnectClient(pMsg->u32ClientId, false);
                    hgcmObjDereference(pClient);
                } break;
至此，我们对HGCM协议已经有了进一步的深刻了解。
## 0x02 HGCM调用库封装
经过上面的协议源代码分析，我们可以很轻松的写出HGCM的调用方法，国外`niklasb`大牛已经做了一个python版的封装库名为[3dpwn](https://github.com/niklasb/3dpwn/)，而这里，我们自己同样实现了一个C语言版
###  hgcm.h
    #ifndef HGM_HELPER_H
    #define HGM_HELPER_H
    #define VBGLREQHDR_VERSION 0x10001
    #define VBGLREQHDR_TYPE_DEFAULT 0
    #define VERR_INTERNAL_ERROR -225
    #define VBGL_IOCTL_CODE_SIZE(func, size) (0xc0005600 + (size<<16) + func)
    #define VBGL_IOCTL_HGCM_CONNECT                    VBGL_IOCTL_CODE_SIZE(4, VBGL_IOCTL_HGCM_CONNECT_SIZE)
    #define VBGL_IOCTL_HGCM_CONNECT_SIZE               sizeof(VBGLIOCHGCMCONNECT)
    # define VBGL_IOCTL_HGCM_DISCONNECT                 VBGL_IOCTL_CODE_SIZE(5, VBGL_IOCTL_HGCM_DISCONNECT_SIZE)
    # define VBGL_IOCTL_HGCM_DISCONNECT_SIZE            sizeof(VBGLIOCHGCMDISCONNECT)
    #define IOCTL_HGCM_CALL 7
    /** Guest Physical Memory Address; limited to 64 bits.*/
    typedef uint64_t                RTGCPHYS64;
    /** Unsigned integer which can contain a 64 bits GC pointer. */
    typedef uint64_t                RTGCUINTPTR64;
    /** Guest context pointer, 64 bits.
     */
    typedef RTGCUINTPTR64           RTGCPTR64;
    typedef uint8_t bool;
    typedef struct VBGLREQHDR
    {
        /** IN: The request input size, and output size if cbOut is zero.
         * @sa VMMDevRequestHeader::size  */
        uint32_t        cbIn;
        /** IN: Structure version (VBGLREQHDR_VERSION)
         * @sa VMMDevRequestHeader::version */
        uint32_t        uVersion;
        /** IN: The VMMDev request type, set to VBGLREQHDR_TYPE_DEFAULT unless this is a
         * kind of VMMDev request.
         * @sa VMMDevRequestType, VMMDevRequestHeader::requestType */
        uint32_t        uType;
        /** OUT: The VBox status code of the operation, out direction only. */
        int32_t         rc;
        /** IN: The output size.  This is optional - set to zero to use cbIn as the
         * output size. */
        uint32_t        cbOut;
        /** Reserved / filled in by kernel, MBZ.
         * @sa VMMDevRequestHeader::fRequestor */
        uint32_t        uReserved;
    } VBGLREQHDR;
    /**
     * HGCM host service location.
     * @ingroup grp_vmmdev_req
     */
    typedef struct
    {
        char achName[128]; /**< This is really szName. */
    } HGCMServiceLocationHost;
    typedef enum
    {
        VMMDevHGCMLoc_Invalid    = 0,
        VMMDevHGCMLoc_LocalHost  = 1,
        VMMDevHGCMLoc_LocalHost_Existing = 2,
        VMMDevHGCMLoc_SizeHack   = 0x7fffffff
    } HGCMServiceLocationType;
    /**
     * HGCM service location.
     * @ingroup grp_vmmdev_req
     */