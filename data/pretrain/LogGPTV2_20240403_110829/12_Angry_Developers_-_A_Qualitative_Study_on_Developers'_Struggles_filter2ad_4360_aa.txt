# 12 Angry Developers: A Qualitative Study on Developers' Struggles with CSP

**Authors:**
- Sebastian Roth †‡
- Lea Gröber †‡
- Michael Backes †
- Katharina Krombholz †
- Ben Stock †

**Affiliations:**
- † CISPA Helmholtz Center for Information Security
- ‡ Saarland University Graduate School of Computer Science

**Contact:**
{sebastian.roth, lea.groeber, backes, krombholz, stock}@cispa.de

## Abstract
The Web has revolutionized communication, collaboration, education, and entertainment. However, it is also a prime target for attacks, particularly Cross-Site Scripting (XSS). A correctly configured Content Security Policy (CSP) can effectively mitigate XSS attacks. Despite this, research indicates that the majority of deployed CSPs are trivially bypassable. To uncover the root causes behind the widespread misconfiguration of CSP, we conducted a qualitative study involving 12 real-world web developers. Through a combination of semi-structured interviews, drawing tasks, and programming tasks, we identified misconceptions regarding the attacker model covered by CSP and the roadblocks to secure deployment.

## CCS Concepts
- **Security and Privacy:** Web application security, Usability in security and privacy.

## Keywords
Usable Security, Web Security, Content Security Policy, Roadblocks

## ACM Reference Format
Sebastian Roth †‡, Lea Gröber †‡, Michael Backes †, Katharina Krombholz †, and Ben Stock †. 2021. 12 Angry Developers: A Qualitative Study on Developers' Struggles with CSP. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 19 pages. https://doi.org/10.1145/3460120.3484780

## 1 Introduction
Web applications have become increasingly important in both business and personal life, evolving from simple information documents to sophisticated office and entertainment applications. As critical applications like online banking are implemented on the Web, attacks against these platforms have become more severe. One such attack is Cross-Site Scripting (XSS), which is one of the most prevalent security issues in web applications, with over 750 CVEs reported in 2021 [13]. Research has shown that client-side XSS can be found on approximately 8-10% of top websites [48, 50].

By exploiting an XSS vulnerability, an attacker can steal session cookies, impersonate the victim, and perform various malicious actions. To mitigate these attacks, browsers support Content Security Policy (CSP). A well-crafted CSP can specify allowed JavaScript sources and prohibit the execution of inline scripts, making it difficult or impossible for an attacker to execute their malicious payload.

Despite its potential, CSP suffers from several issues. Many deployed policies are trivially bypassable because they either allow inline JavaScript or permit all resources from a specific scheme [44, 58]. If inline code is allowed, attackers can inject script tags or event handlers. If a scheme like `https:` is allowed, attackers can host malicious payloads via free certificate authorities like Let's Encrypt [24].

Previous studies have documented the insecurity of CSPs in the wild [7, 44, 49, 58, 59], but the underlying reasons remain unclear. Roth et al. [44] investigated HTML documents and found a high reliance on inline event handlers, which are not easily managed by CSP. They also discovered that developers often lack knowledge about CSP capabilities and face challenges with its complex content control mechanisms.

To address this gap, we conducted a study with 12 developers familiar with CSP. The study included semi-structured interviews, drawing exercises, and coding tasks. Our findings suggest that the complexity of CSP, inconsistencies in browser and framework support, and misleading information sources contribute to insecure CSP deployment.

### Contributions
1. We present the first qualitative study with 12 real-world web developers to evaluate the usability of CSP.
2. We investigate developers' understanding of the different attacker models that CSP covers.
3. We uncover the root causes of insecure CSP deployment to improve the initial deployment of security mechanisms.
4. We provide a methodological discussion on conducting an online interview study with coding and drawing tasks, sharing lessons learned.

## 2 Background & Related Work
This section provides an overview of CSP, the threat model it mitigates, and related user studies. It also includes a brief discussion on qualitative methodologies used in usable security.

### 2.1 Cross-Site Scripting (XSS)
The Same-Origin Policy (SOP) is a fundamental security mechanism in browsers, ensuring that only documents with the same origin (protocol, hostname, and port) can access each other's content. XSS attacks allow an adversary to execute JavaScript in the context of a vulnerable web page, enabling them to modify content, exfiltrate sensitive information, and perform actions on behalf of the victim. Since its discovery in 1999, numerous publications have focused on XSS and its variants [20–22, 25, 28, 33, 34, 41, 45, 48, 52].

### 2.2 Content Security Policy (CSP)
CSP was introduced by Stamm et al. [47] to mitigate XSS attacks. By deploying a CSP, developers can control which sources are allowed for certain types of resources, such as scripts or images. A policy consists of multiple directives, each followed by a list of source expressions. For example, a policy that restricts scripts to the same origin and `ad.com` can be enforced as follows:
```plaintext
default-src 'none'; script-src 'self' ad.com;
```
Inline scripts, event handlers, and functions like `eval` are implicitly forbidden when `script-src` or `default-src` are specified. To re-enable these, developers can use `unsafe-inline` or `unsafe-eval`, which undermines CSP's security. 

CSP Level 2 introduced nonces and hashes to allow inline scripts securely. Nonces and hashes enable developers to explicitly allow their scripts without compromising security. However, event handlers cannot be allowed through nonces. The latest CSP Level 3 draft adds the `unsafe-hashes` keyword to enable hashed event handlers.

The `strict-dynamic` expression allows trusted scripts to propagate trust to programmatically added scripts, addressing the issue of frequently changing scripting resources. CSP can also be delivered as a report-only policy, generating reports for violations instead of blocking them. Violation information can be sent to a logging endpoint using the `report-to` and `report-uri` directives.

Studies have shown that many deployed CSPs are insecure [7, 44, 58, 59]. Even when CSPs are secure, inconsistent deployment across an origin can lead to bypasses [9, 46]. Browser extensions and third-party content can also cause breakage and false warnings [19, 49].

### 2.3 Qualitative Methods
Qualitative and quantitative research methods complement each other, offering different perspectives. Quantitative research follows a "top-down" approach, while qualitative research is a "bottom-up" approach, useful for exploring new areas and understanding the origins of behaviors and misconceptions. Semi-structured interviews are a prominent qualitative method, allowing for in-depth exploration of problems, perspectives, and needs. Lab studies, with their controlled settings, can also collect qualitative data, providing insights into motivations, misunderstandings, and mistakes.

Gorski et al. [18] conducted a lab study to investigate the impact of default CSP enforcement on the usability of a web framework and the effectiveness of CSP warnings in developer consoles. They recruited 30 students and had them create a website using the Play framework, embedding a Google Maps point.

In this paper, we use qualitative methods to delve deeper into the roadblocks of CSP, aligning them with technical challenges and human misconceptions.