m
T
i
MT-EINT RAND-EINT COMP-EINT
Read micro-benchmarks for text files
90
80
70
60
50
40
30
20
10
0
70
60
50
40
30
20
10
0
)
s
n
i
(
e
m
T
i
)
s
n
i
(
e
m
T
i
MT-EINT RAND-EINT COMP-EINT
Read micro-benchmarks for compressed files
MT-EINT RAND-EINT COMP-EINT
MT-EINT RAND-EINT COMP-EINT
Encryption
SHA1/HMAC
Randomness check
Tree operations
Update/check root
Disk wait time
Other
Encryption
SHA1/HMAC
Randomness check
Tree operations
Update/check root
Disk wait time
Other
Figure 7: Micro-benchmarks for text and compressed ﬁles.
Results for low-entropy ﬁles. For sets of ﬁles with a
low percent of random-looking blocks (text, object and
executable ﬁles), RAND-EINT outperforms MT-EINT
with respect to all the metrics considered. The perfor-
mance of RAND-EINT compared to that of MT-EINT
is improved by 31.77% for writes and 20.63% for reads.
The performance of the COMP-EINT ﬁle system is very
different in the write and read experiments due to the
cost difference of compression and decompression. The
write time of COMP-EINT is within 4% of the write time
of MT-EINT and in the read experiment COMP-EINT
outperforms MT-EINT by 25.27%. The integrity band-
width of RAND-EINT and COMP-EINT is 92.93 and
58.25 times, respectively, lower than that of MT-EINT.
The untrusted storage for integrity for RAND-EINT and
COMP-EINT is reduced 2.3 and 1.17 times, respectively,
compared to MT-EINT.
Results for high-entropy ﬁles. For sets of ﬁles with
a high percent of random-looking blocks (image and
compressed ﬁles), RAND-EINT adds a maximum per-
formance overhead of 4.43% for writes and 18.15%
for reads compared to MT-EINT for a 1KB cache.
COMP-EINT adds a write performance overhead of
38.39% compared to MT-EINT, and performs within
1% of MT-EINT in the read experiment. The aver-
age integrity bandwidth needed by RAND-EINT and
COMP-EINT is lower by 30.15% and 10.22%, respec-
tively, than that used by MT-EINT. The untrusted stor-
age for integrity used by RAND-EINT is improved by
9.52% compared to MT-EINT and that of COMP-EINT
is within 1% of the storage used by MT-EINT. The rea-
son that the average integrity bandwidth and untrusted
storage for integrity are still reduced in RAND-EINT
compared to MT-EINT is that in the set of high-entropy
194
16th USENIX Security Symposium
USENIX Association
300
250
200
150
100
50
0
1000
100
10
1
)
s
n
i
(
e
m
i
t
e
t
i
r
W
)
s
e
t
y
b
n
i
(
h
t
i
d
w
d
n
a
b
y
t
i
r
g
e
t
n
i
e
g
a
r
e
v
A
Write time for low entropy files
Read time for low entropy files
MT-EINT
RAND-EINT
COMP-EINT
0
1024
2048
4096
Size of cache for Merkle trees (in bytes)
Average integrity bandwidth for low entropy files
MT-EINT
RAND-EINT
COMP-EINT
MT-EINT
RAND-EINT
COMP-EINT
0
1024
2048
4096
Size of cache for Merkle trees (in bytes)
Total untrusted storage for integrity for low entropy files
MT-EINT
RAND-EINT
COMP-EINT
250
200
150
100
50
0
50
40
30
20
10
0
)
s
n
i
(
e
m
i
t
d
a
e
R
)
B
M
n
i
(
e
g
a
r
o
t
s
d
e
t
s
u
r
t
n
U
0
1024
2048
4096
Size of cache for Merkle trees (in bytes)
0
1024
2048
4096
Size of cache for Merkle trees (in bytes)
Figure 8: Evaluation for low-entropy ﬁles (text, object and executable ﬁles).
ﬁles considered only about 70% of the blocks have high
entropy. We would expect that for ﬁles with 100% high-
entropy blocks, these two metrics will exhibit a small
overhead with both RAND-EINT and COMP-EINT
compared to MT-EINT (this is actually conﬁrmed in
the experiments from the next section). However, such
workloads with 100% high entropy ﬁles are very unlikely
to occur in practice.
7.2 The Impact of File Access Patterns on
Integrity Performance
File traces. We considered a subset of the three NFS
Harvard traces [9] (LAIR, DEASNA and HOME02),
each collected during one day. We show several charac-
teristics of each trace, including the number of ﬁles and
the total number of block write and read operations, in
Table 3. The block size in these traces is 4096 bytes and
we have implemented a 1KB cache for Merkle trees.
Number of ﬁles
Number of writes
Number of reads
LAIR
DEASNA
HOME02
7017
890
183
66331
64091
89425
23281
521
11815
Table 3: NFS Harvard trace characteristics.
Experiments. We replayed each of the three traces
with three types of block contents: all low-entropy, all
high-entropy and 50% high-entropy. For each experi-
ment, we measured the total running time, the average
integrity bandwidth and the total untrusted storage for
integrity for RAND-EINT and COMP-EINT relative to
MT-EINT and plot the results in Figure 10. We rep-
resent the performance of MT-EINT as the horizontal
axis in these graphs and the performance of RAND-EINT
and COMP-EINT relative to MT-EINT. The points
above the horizontal axis are overheads compared to
MT-EINT, and the points below the horizontal axis rep-
resent improvements relative to MT-EINT. The labels on
the graphs denote the percent of random-looking blocks
synthetically generated.
performance
improvements
of
Results. The
RAND-EINT and COMP-EINT compared to MT-EINT
are as high as 56.21% and 56.85%, respectively, for the
HOME02 trace for low-entropy blocks. On the other
hand, the performance overhead for high-entropy blocks
are at most 54.14% for RAND-EINT (in the LAIR trace)
and 61.48% for COMP-EINT (in the DEASNA trace).
RAND-EINT performs better than COMP-EINT when
the ratio of read to write operations is small, as is the
case for the DEASNA and HOME02 trace. As this ratio
increases, COMP-EINT outperforms RAND-EINT.
For low-entropy ﬁles, both the average integrity band-
width and the untrusted storage for integrity for both
RAND-EINT and COMP-EINT are greatly reduced
compared to MT-EINT. For instance, in the DEASNA
trace, MT-EINT needs 215 bytes on average to update
or check the integrity of a block, whereas RAND-EINT
and COMP-EINT only require on average 0.4 bytes.
USENIX Association
16th USENIX Security Symposium
195
200
150
100
50
0
100
10
)
s
n
i
(
e
m
i
t
e
t
i
r
W
)
s
e
t
y
b
n
i
(
h
t
i
d
w
d
n
a
b
y
t
i
r
g
e
t
n
i
e
g
a
r
e
v
A
Write time for high entropy files
Read time for high entropy files
MT-EINT
RAND-EINT
COMP-EINT
0
1024
2048
4096
Size of cache for Merkle trees (in bytes)
Average integrity bandwidth for high entropy files
MT-EINT
RAND-EINT
COMP-EINT
MT-EINT
RAND-EINT
COMP-EINT
160
140
120
100
80
60
40
20
0
0
1024
2048
4096
Size of cache for Merkle trees (in bytes)
Total untrusted storage for integrity for high entropy files
MT-EINT
RAND-EINT
COMP-EINT
12
10
8
6
4
2
0
)
s
n
i
(
e
m