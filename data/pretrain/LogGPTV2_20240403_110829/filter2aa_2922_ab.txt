# Kerberos Security and Loopback Library Vulnerabilities

## Overview
This document provides a detailed analysis of the Kerberos security package, focusing on the loopback library vulnerabilities and their implications. It also discusses potential mitigations and detection strategies.

## Kerberos Security Package Flow

### 1. Begin Tracking
- **Session ID**: User Session X
- **Hash Value**: Initial Hash
- **Local Security Authority (LSA)**
- **Action**: Update AES-CMAC hash with security buffer contents

### 2. Update Tracking
- **Session ID**: User Session
- **Hash Value**: Updated Hash
- **Local Security Authority (LSA)**
- **Action**: Accept AP-REQ and add AES-CMAC entry

### 3. Create Token and Lookup Final Hash
- **Session ID**: User Session
- **Hash Value**: Final Hash
- **Local Security Authority (LSA)**
- **Action**: Create token and lookup final hash. If a match is found, move the token to the client session.

### 4. Explanation
- **Loopback Library**: Hashes all security buffers between LSA and clients. If hashes match when a token is being built, the token will be moved to the client session.
- **InitializeSecurityContext**: Use with silver tickets to initialize the hash entry.
- **AP-REQ Modification**: Modify the PAC inside the AP-REQ, but avoid touching the buffers to prevent hash lookup from breaking.

## Security Buffer Types
- **SECBUFFER_EMPTY**: Undefined, replaced by the security package function (0x00000000)
- **SECBUFFER_TOKEN**: Security token (0x00000002)
- **SECBUFFER_READONLY**: Buffer is read-only, no checksum (0x80000000)
- **SECBUFFER_READONLY_WITH_CHECKSUM**: Buffer is read-only, and checksummed (0x10000000)

**Note**: Buffer types can be combined using a bitwise-OR operation with the READONLY buffer types.

## Type Confusion in `AcceptSecurityContext`
- **Original AP-REQ**: SECBUFFER_TOKEN
- **Modified AP-REQ**: SECBUFFER_TOKEN | SECBUFFER_READONLY
- **Behavior**:
  - **Loopback Library**: Ignores the modified AP-REQ.
  - **Kerberos**: Uses the modified AP-REQ.
  - **Hashing**: Hashed by LoopbackLibrary, ignored by Kerberos.

### Demo Time
- **Windows 10**:
  ```c
  if (pBuffer.BufferType == SECBUFFER_TOKEN) {
      BCryptHashData(hHash, pDirectionGuid, cbDirectionGuid);
      BCryptHashData(hHash, pBuffer->pvBuffer, pBuffer->cbBuffer);
  }
  ```
- **Windows 11**:
  ```c
  if ((pBuffer.BufferType & ~SECBUFFER_ATTRMASK) == SECBUFFER_TOKEN) {
      BCryptHashData(hHash, pDirectionGuid, cbDirectionGuid);
      BCryptHashData(hHash, pBuffer->pvBuffer, pBuffer->cbBuffer);
  }
  ```

## Man-in-the-Middle Attack
- **KDC.REALM**: Modifying on the wire
- **CIFS/ABC**: TGS U2U
- **bob@REALM**: PAC with admin
- **KDC**: TGS-REP (evil)

### Credential Guard Considerations
- **Credential Guard**: Disables Kerberos unconstrained delegation and DES encryption.
- **Unconstrained Delegation**: Allows attackers to extract Kerberos keys from the isolated LSA process.
- **Recommended**: Use constrained or resource-based Kerberos delegation instead.

## Bring Your Own KDC (BYOKDC)
- **Custom KDC**: Pinning and issuing tickets with arbitrary PAC data.
- **LsaCallAuthPackage**: Request service ticket and session key from ticket cache.
- **Manually Renew**: Service ticket without any authorization data.
- **Pass Clean Ticket**: To RPC server for full token access.

## S4U2Self and UAC Bypass
- **S4U2Self**: Service account impersonation.
- **UAC Bypass**: Manually renew service ticket without authorization data and pass clean ticket to RPC server.

### Token Filtering Logic
- **LSA Token Filtering**: No filtering if the user is a local account and local account token filtering is enabled.
- **MachineID Check**: Network auth token filtering is enabled and MachineID matches LsapGlobalMachineID.

## Mitigation Thoughts
- **Enable KerbGlobalValidateKDCPACSignature**: Prevent "NT AUTHORITY\SERVICE" SID from bypassing PAC verification.
- **Force Kerberos Armoring/FAST**: Makes it harder to tamper with network traffic.
- **Enable Credential Guard**: Blocks trivial access to TGT session keys.
- **Build Kerberos Firewall Rules**: Block access to KDCs outside an approved list.

## Detection Thoughts
- **Special Logon Event 4672**: Monitor for special privileges assigned to new logons.
- **NtApiDotNet Tooling**: Used for presentation and analysis.
- **References**:
  - [Bypassing UAC in the Most Complex Way](https://www.tiraniddo.dev/2022/03/bypassing-uac-in-most-complex-way.html)
  - [Remote Credential Guard Code Execution](https://bugs.chromium.org/p/project-zero/issues/detail?id=2271)
  - [AppContainer Escapes](https://bugs.chromium.org/p/project-zero/issues/detail?id=2273)
  - [LSASS Impersonation Check Failures](https://bugs.chromium.org/p/project-zero/issues/detail?id=2278)
  - [Abusing Kerberos S4U2Self for Local Privilege Escalation](https://cyberstoph.org/posts/2021/06/abusing-kerberos-s4u2self-for-local-privilege-escalation/)

## Acknowledgements
- **Elad Shamir** (@elad_shamir)
- **Benjamin Delpy** (@gentilkiwi)
- **Will Schroeder** (@harmj0y)
- **Christoph Falta** (@cfalta)
- **Charlie Clark** (@exploitph)

## Questions?
Feel free to ask any questions or provide feedback.