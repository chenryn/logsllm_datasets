opt,par)'(69 files)
/data/mysql _data/mysql/*.(rm,isl,MYD,MYI,MAD,MAI,MRG,TRG,TRN,ARM,ARZ,CSM,CSV
(pid=43055)
-socket=/data/mysql_data/mysql.sock'
44432
通过设置环境变量PATH 指定了二进制文件的寻找路径，然后执行innobackupex脚本备
innobackupex: MysQL binlog position: filename mysql-bin.00ooo1', position
innobackupex:Backup created in directory'/data/backup/2015-08-22_12-13-16
13082212:13:37
xtrabackup:
13082212:13:34
innobackupex: Backing up files
130822 12:13:34
130822 12:13:32
13082212:13:21
13082212:13:19
[root@Cent0s 2015-08-22_12-13-16]#cat -n/etc/new,cnf
【示例6-62】
恢复过程如【示例6-62】所示。
首先解压源码包，然后使用提供的./utils/build.sh工具进行编译安装，编译时需要指定版本
innobackupex:MysQL slave binlog position: master host , filename ', position
130822
xtrabackup: Transaction 1og of 1sn (0 1059943)
13082212:13:34
innobackupex:
innobackupex:
工
[mysqld]
12:13:37
The latest check point （for
10
innobackupex:Waiting for log copying to finish
innobackupex:Finished backing up non-InnoDB tables and files
innobackupex: Starting
innobackupex: All tables locked and flushed to disk
innobackupex: Starting to lock all tables...
innobackupex: All tables unlocked
subdirectories of'/data/mysql_data'
--unbuffered--
to backup non-InnoDB tables and files
incremental):0:1164431'
to(0 1164431)wascopied
---
## Page 189
717273747576
evi
9899
xtrabackup
xtrabackup:
xtrabackup
xtrabackup:
xtrabackup:
xtrabackup
xtrabackup:
[root@Centos 2015-08-22_12-13-16j#xtrabackup
130822 13:28:20
InnoDB:
13082213:28:19
InnoDB:
InnoDB
130822
InnoDB
130822
130822
xtrabackup:
xtrabackup
xtrabackup
xtrabackup
xtrabackup
xtrabackup
xt
[notice (again)]
ision id: undefined
-08-22 12-10-22/
root@Cent0s 2015-08-22_12-13-16]#xtrabackup
5
:Starting
log-bin=/data/mysql_new/mysql-bin
13:28:19
13:28:19
socket
port
Progress in percents:54 55 56 57 58 59 60 61 62 6364 65 66 67 68 69
Temporary
This target
innodb
innodb _log group home dir =
innodb
emporary.
innodb
innodb
innodb data file path = ibdatal:10m:autoextend
innodb data home dir =
57778798081828384858687888990919293949596
InnoDB:
crash recovery.
InnoDB:
progressed past the checkpoint 1sn 0 703883
InnoDB:
Ddb data home dir =
log_group_home_dir=
log_files in group=
3308
/data/mysql_new/mysql.sock
logfile
Completed initialization of buffer pool
seems
Database was not shut
detected: size=2097152
二
ibdatal:l0M:autoextend
down normally
51
.ibd files.
ce
number 0 765235
as followings.
-prepare
第6章搭建LAMP服务
start 1sn=(0 703883)
(38）
177
---
## Page 190
178
CentOS7系统管理与运维实战
(revision id:undefined)
-target-dir=/data/backup/2015-08-22 12-10-22/
InnoDB: Starting crash recovery.
130822 13:28:26
130822
InnoDB: Reading
InnoDB: Database physically writes the file full:wait.
xtrabackup: Using 104857600 bytes for buffer pool (set by 
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup_51 version 2.0.7 for MysQL server 5.1.59 unknown-1inux-gnu (x86_64)
1root@Cent0s 2015-08-22
130822 13:28:25 InnoDB: Shutdown completed; 1og sequence number 0 765235
notice (again)]
InnoDB: the
InnoDB:
13082213:28:26
nnoDB: Setting
xtrabackup:
xtrabackup:
trabackup:
xtrabackup:
xtrabackup:
xtrabackup:
xtrabackup:
If you use binary log and don't use any hack of group commit,
nnoDB:
nnoDB:
30822
30822
nnoDB
the binary log position seems to be:
If you use binary log and don't
13:28:26
213:28:26
13:28:26
3:The InnoDB memory heap is disabled
The
1og
log
Temporary instance for recovery is set as followings.
notice:
innodb data_file path
innodb_log_group_home_dir=
inno
innodb
tablespace information from the
sequence number in ibdata files does not match
InnoDB: Log file/ib logfilel did not exist: new to be created
innodb data _home_dir
to
log file./ib logfile0 size to 5 MB
InnoDB: Started; 1og sequence number 0 765452
InnoDB:
InnoDB:
/data/backup/2015-08-22_12-10-22/
_data_file_path=
xtrabackup_logfile was already used to
Log file ./ib_logfile0 did not exist: new to be created
Completed initialization of buffer pool
12-13-161#xtrabackup_51
/ib logfilel size
ibdatal:10M:autoextend
ibdatal:10M:autoextend
N
2
tO5MB
.ibd files.
size
"-prepare
'--prepare'.
---
## Page 191
请求。数据库管理员将数据的查询请求全部转发到从服务器中。同时通过设置多台从服务器处
器上只实现数据的更新操作，包括数据记录的更新、删除、插入等操作，而不关心数据的查询
之后有充足的时间检查主服务器的故障。
性。当主服务器出现问题时，数据库管理员可以马上让从服务器作为主服务器以便接管服务。
支持简单的主从拓扑，也可实现复杂、极具可伸缩性的链式集群。
群，其中不乏eBay、Facebook、Tumblr、Twitter 和YouTube 等互联网巨头。MySQL复制，既
可用性。全球许多流量最大的网站都通过MySQL 复制来支持数以亿计、呈指数级增长的用户
6.5.4MySQL复制
提示
通过在主服务器和从服务器之间实现读写分离，可以更快地响应客户端的请求。如主服务
借助MySQL提供的复制功能，应用者可以经济高效地提高应用程序的性能、扩展力和高
数据库复制功能实现了主服务器与从服务器之间数据的同步，增加了数据库系统的可用
利用MySQL的复制有以下好处：
W
123450/1234501
[root@Centos~]#mysql-s/data/mysql _new/mysql.sock
lrootecentos
Irootecentos
[rooteCentos
13082213:28:32
130822 13:28:26
xtrabackup:starting shutdown with innodb_fast shutdown
（2）实现负载均衡
（1）增加MySQL服务健壮性
rows in set (o.o0 sec)
a
rootecentos
the binary
27175122781
主服务器上的表进行的更新与对从服务器上的表所进行的更新产生冲突。
当使用MySQL复制时，所有对复制中的表的更新必须在主服务器上进行。否则可能引起
b
26181
]#chown -R mysql.mysql /data/mysgl_new
log position seems to be:
)#mysqld_safe --defaults-file=/etc/new.cnf --user-mysgl
InnoDB: Starting shutdown..
InnoDB: Shutdown completed;
log sequence number 0765452
第6章搭建LAMP服务
"p123456
179
---
## Page 192
CentOS7系统管理与运维实战
数据库数据的一致性。整个过程如【示例6-63】所示。
志文件中。从服务器的SQL线程负责读取中继日志并重做日志中包含的更新，从而达到主从
当执行START SLAVE时，主服务器创建一线程负责发送二进制日志。从服务器创建一个IVO
户请求。
而在从服务器进行数据的导出操作不但能达到数据备份的目的而且不会影响主服务器上的客
通过异地备份增加了数据的安全性。
器可以通过设置参数 slave_compressed_protocol启用binlog压缩传输，数据传输效率大大提高，
本地也可以设置在异地，从而增加了容灾的健壮性，为避免异地传输速度过慢，MySQL服务
添加或删除实例，以便动态按需调整容量。
缩短应用程序的响应时间、提高系统的性能。用户可根据数据库服务的负载情况灵活、弹性地
理用户的查询请求。
当使用mysqldump导出数据进行备份时如果作用于主服务器可能会影响主服务器的服务，
通过将数据更新与查询分别放在不同的服务器上进行，既可以提高数据的安全性，同时也
Command:Connect
#在从服务器上，SHOW PROCESSLIST的输出
Command:
mysql> show processlist \G
#主服务器上，SHOW PROCESSLIST的输出
【示例6-63】
首先通过MySQL的实时复制数据从主服务器上复制到从服务器上，从服务器可以设置在
（3）实现数据备份
State: Waiting for master to send event
Time:46
Info:NULL
State: Has sent all binlog to slave waiting for binlog to be updated
Time:
Host:
User:
Host:
User:
db:NULL
Id:5
db:NULL
Id:2
100
192.168.19.102:43986
system user
Binlog Dump
rep
---
## Page 193
replication slave 权限。
实例。
服务器为192.168.19.102:3306。为便于演示主从复制的部署过程，以上两个实例都为新部署的
6.5.5MySQL复制搭建过程
恭示
的SQL线程。SHOW PROCESSLIST运行时，两个线程均空闲，等待其他更新。
服务器，主服务器正等待更多的更新出现。
本节示例涉及的主从数据库信息为：主MySQL服务器192.168.19.101:3306，从MySQL
该信息表示线程5是同主服务器通信的I/O线程，线程6是处理保存在中继日志中的更新
这里，线程2是一个连接从服务器的复制线程。该信息表示所有主要更新已经被发送到从
[root@Centos~]# cat -n/etc/master.cnf
【示例6-64】
2rows in set (0.00 sec)
Command:Connect
（3）在MySQL 主服务器上，分配一个复制使用的账户给MySQL从服务器，并授予
***************************
（2）确认主从服务器已经启动并正常提供服务，主从服务器的关键配置如下：
（1）确认主从服务器上安装了相同版本的数据库，本节以MySQL5.1.71为例。
State: Has read all relay log; waiting for the slave I/o thread to update it
Info:NULL
Time:125
Host:
User: system user
Info:NULL
db:NULL
Id:6
Time列的值可以显示从服务器比主服务器滞后多长时间。
datadir
server-id
log-bin
port
bind-address
[mysqld]
datadir
server-id
log-bin
port
bind-address=192.168.19.101
[mysqld]
/data/slave/binlog/mysql-bin
/data/master/binlog/mysgl-bin
3306
/data/slave/dbdata
192.168.19.102
/data/master/dbdata
row
第6章搭建LAMP服务
181
---
## Page 194
CentoS7系统管理与运维实战