## 文章出处
[Bypass McAfee with McAfee](https://github.com/dmaasland/mcfridafee)

## 0x00 引言
撰写这篇博客文章并非我的初衷。尽管内容不涉及敏感信息，但个人的懒惰让我迟迟未动笔。最终，在[@fsdominguez](https://twitter.com/fsdominguez) 和 [_dirkjan](https://twitter.com/_dirkjan) 的催促下，我决定分享在红队任务中如何利用McAfee工具绕过McAfee Endpoint Security的经历。

## 0x01 关于McAfee
过去，在遇到McAfee Virus Scan Enterprise (VSE)时，我们通常会感到轻松，因为通过查询注册表可以轻易获取管理员设置的排除项。然而，这次情况有所不同——目标系统已升级为McAfee Endpoint Security。这导致了从最初的乐观转变为失望，原因是新版本不再将关键信息如排除列表以明文形式存储于易访问位置。

## 0x02 ESConfigTool
经研究发现，McAfee Endpoint Security附带了一个名为ESConfigTool的应用程序，用于导入导出配置文件。使用说明见[官方文档](https://docs.mcafee.com/bundle/endpoint-security-10.6.0-installation-guide-unmanaged-windows/page/GUID-31F0BE99-2186-4C4E-B0E3-96F3FED8DF49.html)。要成功获取配置（包括排除项），需要解锁密码及管理权限。鉴于我们缺乏这两者，于是下载了McAfee Endpoint Security的评估版进行测试。

## 0x03 反向工程尝试
面对挑战，我们首先创建了三个排除规则并启用了密码保护功能。接着尝试使用ESConfigTool命令行工具导出配置，但仅限于拥有正确密码与管理员权限的情况下才能成功。为了进一步探索，我们试图通过反向工程技术来突破限制。

## 0x04 自我防御机制
安全解决方案往往具备自我防御能力，McAfee也不例外。直接附加调试器会导致被拦截。经过反复试验，采用了一种特定技术绕过了这一障碍。接下来复制相关DLL文件至临时目录，并重新加载调试器继续分析。

## 0x05 绕过密码验证
输入错误密码后观察到特定错误信息。通过日志记录中的线索定位到相应代码段，并设置了断点。当提供错误密码时，修改RAX寄存器值为0，试图欺骗程序认为密码校验成功。然而，这种方法并未奏效，表明密码验证逻辑并不依赖于该返回值。

## 0x06 绕过管理员权限检查
无管理员权限运行ESConfigTool只会显示帮助信息而无其他反馈。通过追踪代码路径找到了负责执行权限检查的位置。类似地修改函数返回值使其非零，从而绕过了权限要求。现在即使没有管理员权限也能正常导出配置。

## 0x07 自动化处理
手动操作虽然可行但效率低下。为此引入了Frida框架，它允许用户无需深入了解底层语言即可实现对目标进程的功能挂钩和数据篡改。具体步骤包括：在目标主机上启动frida-server服务，然后通过Python脚本远程连接并控制目标应用程序的行为。
### 7.1 配置环境
- **McAfee主机:**
  ```cmd
  C:\Users\admin>cd \temp
  C:\temp>frida-server-12.7.9-windows-x86_64.exe
  ```
- **Python客户端:**
  ```python
  >>> import frida
  >>> devmgr = frida.get_device_manager()
  >>> devmgr.add_remote_device('192.168.31.150')
  Device(id="PI:EMAIL", name="192.168.31.150", type='remote')
  >>> rdev = frida.get_device('PI:EMAIL')
  >>> args = [
  ...   'ESConfigTool.exe',
  ...   '/export',
  ...   'frida-export.xml',
  ...
  ```

通过上述方法，我们不仅展示了如何绕过McAfee Endpoint Security的安全措施，还介绍了如何利用自动化工具简化整个过程。