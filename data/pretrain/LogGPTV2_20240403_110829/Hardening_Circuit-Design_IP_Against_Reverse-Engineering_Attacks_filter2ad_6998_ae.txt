properties to compute its estimates of the sets M0 and M1
that can help the foundry reduce the guess space. We will use
these observations in our upcoming analysis.
Scoping the set F.
In what follows, we will focus on
the case that m = 1, i.e., F ⊂ Func(n, 1). We focus on
Boolean functions for a few reasons. First, even if the circuit
representation of the hidden function has n(cid:48) ≥ n bits of input
and m > 1 bits of output, we can take as a ﬁrst consideration
whether or not one can securely hide the transitive fan-in cone
(TFC) of any particular output bit. For a collection of output
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
1681
bits that have disjoint transitive fan-in cones, one can consider
hiding these in parallel.
Second, focusing on Boolean functions makes the analysis
less complicated. In particular, for all distinguishing inputs
Ui ∈ I(cid:54)=(F, H), Vi = ¬F (Ui); otherwise Vi ←$ Um \ F (Ui).
Note that when m > 1, the TFCs of different output bits may
not be disjoint. In such a case, the adversary can potentially
use information it learns about one TFC to learn about the
functionality of a different TFC.
Third, barring SFLL-ﬂex [15], in the remaining SAT-attack-
resistant DH schemes (AntiSAT [27], SARLock [28], TTLock
[29] and SFLL-HD [15]), F is Boolean.
Simple functions cannot be hidden. We borrow the def-
inition of “simple” functions from learning theory; simple
functions are those that can be efﬁciently learned via a
reasonably small number of input-output values of F . Now,
if F consists predominantly of simple functions, then no DH
scheme will be secure4 in hiding functions sampled from F.
For example, functions that have a small domain can be
learned by brute force. In addition, results from computational
learning theory tell us that functions whose decision-tree
representation have small depth/size can be learned via the
Kushilevitz-Mansour algorithm [42]. More generally, meth-
ods exist to (approximately) learn Boolean functions whose
Fourier spectra are sparse (e.g., dominated by relatively few
Fourier coefﬁcients) [43].
To loosely capture a measure of the density of “simple”
Boolean functions within a given set F, we give the following
deﬁnition.
Deﬁnition 3. [“Simple” functions in F.] Let F ⊆ Func(n, 1)
be a set of Boolean functions. Let t, q ≥ 0 be integers,
and let δ ∈ [0, 1] be a real number. Let Ft,q,δ ⊆ F be
a subset such that the following holds: ∃ a q-query, t-time
adversary A such that, ∀f ∈ Ft,q,δ, when g ←$ Af (·) we have
Pr[ x ←$ {0, 1}n : g(x) = f (x) ] ≥ δ. Furthermore, deﬁne
t,q,δ = |Ft,q,δ|/|F|. In particular, t,q,1 is the fraction of F
that can be exactly learned (by some A) with q input-output
(cid:5)
values and time-complexity t.
Our security bounds for OneChaffhd will reﬂect the term
t,q,1, although we stress that corresponding bounds for any
DH scheme would also have to reﬂect this term (perhaps not
explicitly) because any “simple” function will not be hideable.
In general, specifying a set F for which t,q,1 is small
enough for practically meaningful security statements (for
reasonable t, q) is challenging, as this would require results
of the following kind: There exist no adversary that can learn
any function in F \Ft,q,1 with q queries in time t. We are not
aware of any such results. Also, note that it is not sufﬁcient
for F to be large (although it is necessary to avoid simply
guessing F ), as one can specify large sets of functions with
sparse Fourier spectra.
4Shamsi et al. [5] made a similar observation and gave impossibility results
on logic locking when F consists of entirely simple functions. Our security
experiments are more generic as they allow F to contain functions of varying
degrees of “simplicity”.
Under
the above conjecture, we will
We conjecture that if F is sufﬁciently “unstructured”, then
t,q,1 will be small enough to not dominate the FR-security
bounds we will prove, for practically reasonable t, q. For
example, a random Boolean function lacks the highly con-
centrated spectral structure — the number of non-zero Fourier
coefﬁcients is (1 − o(1))2n [51] — that leads to efﬁcient
learnability from input-output pairs.
focus on F =
F[h0,h1] ⊆ Func(n, 1) that consists of all Boolean functions
with hamming weight at least h0 and at most h1. Recall that
the set F in our FR experiment is meant to reﬂect the adver-
sary’s a priori “knowledge” about the function hidden in the
opaque circuit, and that our FR-notion samples F uniformly
from F. At the extremes, setting h0 = 0, h1 = 2n considers
the case that the adversary has no a priori knowledge; setting
h0 = h1 considers an adversary that knows exactly the
hamming weight of the hidden function F . In our analysis
of OneChaffhd, we will conservatively assume the latter.
A random Boolean function has an expected hamming
weight close to 2n−1. Hence, when F comprises functions
with hamming weights close to 2n−1, then a randomly sam-
pled function from F is unlikely to be easily learned (i.e.,
“simple”) given the current state of the art, and will have
very small t,q,1. We conjecture this based on the fact that
a random Boolean function almost certainly does not have a
concentrated Fourier spectrum [51] thereby making efﬁcient
learning-theoretic attacks out-of-scope.
(cid:104)(cid:103)FR(B) = 1
(cid:105)
A practical warm-up: FR security with q = 0. Chips that
are used in critical infrastructure (e.g., military devices) will
most likely require considerable effort to obtain. In this case,
we can assume that the foundry cannot get access to honestly
restored chips, and thereby learn the true input-output behavior
of F on inputs of its choice. Thus, we begin our analysis of
OneChaffhd for F[h,h] in the q = 0 case.
realizable by the opaque circuit L = (cid:104)H,(cid:103)Tab(cid:105), we have
Given Lemma 1, recall that we were left to ﬁnd an up-
, where B has some time-
per bound on Pr
complexity t and asks q queries to its TRUE oracle. Let us
ﬁx q = 0, and consider an arbitrary adversary B0 with these
resource bounds.
Recalling the notation that RL is the set of functions
RL = N∆(H); F ∈ RL. The adversary B0 knows a
priori that F ∈ F[h,h]. Hence, for all ˆF ∈ RL, hw( ˆF ) ∈
[hw(H)− ∆, hw(H) + ∆]. To get an intuition of the claim on
hw( ˆF ), consider two cases: hw(H) = 0 and hw(H) = 2n.
When hw(H) = 0, hw( ˆF ) = hw(H) + ∆ = ∆; when
hw(H) = 2n, hw( ˆF ) = hw(H) − ∆ = 2n − ∆.
While attacking OneChaffhd, the optimal strategy for B0
is to return the circuit
implementation of the most-likely
function in F[h,h] ∩ RL. (We will use F j
L to denote
the subset of functions in F[h,h] and RL, respectively, that
have correct values on some 0 ≤ j ≤ q inputs.) But as
sampling is done in a uniform and independent fashion in
are equally likely.
(cid:103)FR, all functions in M0 =
[h,h], Rj
(cid:17)
(cid:16)F 0
[h,h] ∩ R0
L
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
1682
.
L
(cid:105)
(cid:104)(cid:103)FR(B0) = 1
(cid:12)(cid:12)(cid:12)(cid:16)F 0
[h,h] ∩ R0
= |M0|−1. We will proceed to give
Then, Pr
a lowerbound on |M0| in the q = 0 case.
Claim 1. Let hw(H) = h + α, where α  h (instead of the
tighter bound in Claim 2) to make the ﬁnal bound even more
interpretable. Note that practical OneChaffhd schemes will
have ∆ (cid:28) 2n−1 as the run time of Hide as well as Restore
will be linear in ∆. Thus, the loss in using hw(H) > h instead
of hw(H) ≥ h + ∆(1 − h/2(n−1)) will not be signiﬁcantly
large.
Theorem 2. Fix m = 1 and integers n, h, ∆ > 0 such that
∆  0. The ability to learn
true input-output pairs, via queries to TRUE, provide a way for
the adversary to verify guesses at portions of the key KO.
Recall that the key encodes (X1, F (X1)), . . . , (X∆, F (X∆))
for Xi ∈ I(cid:54)=(F, H), and the opaque circuit CL allows for
local computation of H(X). Thus, as a ﬁrst step in analyzing
the FR security of OneChaffhd in the q > 0 case, we derive a
bound on the number of points in I(cid:54)=(F, H) that an adversary
uncovers in its q queries to the TRUE oracle.
| = |Qkey
j−1| if not.
Let Qj = {x1, x2, . . . , xj} be the the ﬁrst j queries to
TRUE, and let random variable Qkey
j = Qj ∩I(cid:54)=(F, H) denote
the queries in Qj that uncover a portion of the distinguishing
| = 0, and for j > 0 the value
inputs. Observe that |Qkey
of |Qkey
j−1| and the query xj; in
particular that |Qkey
j−1| + 1 if xj ∈ I(cid:54)=(F, H), and
|Qkey
| depends only upon |Qkey
j
Let Ij be the indicator random variable indicating that the
event xj ∈ Qkey
occurs. We claim that Pr[ Ij = 1 ] = (∆ −
j−1|)/ (hw(H) − (j − 1)). To see this, observe that the
|Qkey
number of uncovered points in I(cid:54)=(F, H) is precisely (∆ −
|Qkey
j−1|) and, given how those points were sampled, any of the
remaining, unqueried points in X1(H) are equally likely to be
in I(cid:54)=(F, H). Given this, we can prove the following lemma.
Lemma 2. Let ∆ < h and (∆ + h) < 2n−1. Then, we have
4q ln ∆
with probability at least 1 − (2/∆2).
(cid:7)
| < E(cid:2)|Qkey
|(cid:3) = q∆
hw(H) , and, |Qkey
E(cid:2)|Qkey
|(cid:3) +
| = |Qkey
√
0
q
q
q
j
j
j
(cid:17)
(cid:16)F 0
Notice that when q < ∆2/(256 ln ∆),
4q ln ∆ < ∆/8;
when q < hw(H)/8, q∆/hw(H) < ∆/8. Thus, with
probability 1 − (2/∆2), the adversary will uncover no more
than quarter of the distinguishing inputs in I(cid:54)=(F, H) when
q < min(hw(H)/8, ∆2/(256ln∆)).
q
L
[h,h] ∩ R0
The adversary can increase its FR advantage by removing
that are not correct on any input
. In fact, it can remove all functions that do not agree
functions from
in Qkey
with F on any point in the query set Qq.
Extending Claim 1 to account for Qkey
, we give a lower
[h,h] ∩ Rq
(cid:105)
bound on |M1| =
wins against OneChaffhd if and only if the hidden function F
is completely recovered, a lowerbound on |M1| will give us an
upperbound on Pr
, and in turn (by Lemma 1)
an upper bound on the FR advantage of an adversary A that
attacks OneChaffhd.
Claim 3. Let hw(H) = h + δ, where δ = ∆(1 − h/2n−1),
(cid:17)(cid:12)(cid:12)(cid:12) in Claim 3. Since one
(cid:12)(cid:12)(cid:12)(cid:16)F q
(cid:104)(cid:103)FR(B) = 1
L