(cid:885)(cid:887)
(cid:885)(cid:882)
(cid:884)(cid:887)
(cid:884)(cid:882)
(cid:883)(cid:887)
(cid:883)(cid:882)
(cid:887)
(cid:882)
(cid:4667)
(cid:5)
(cid:14)
(cid:4666)
(cid:3)
(cid:135)
(cid:156)
(cid:139)
(cid:22)
(cid:143)
(cid:131)
(cid:148)
(cid:137)
(cid:145)
(cid:148)
(cid:19)
(cid:3)
(cid:888)(cid:882)
(cid:887)(cid:882)
(cid:886)(cid:882)
(cid:885)(cid:882)
(cid:884)(cid:882)
(cid:883)(cid:882)
(cid:882)
(cid:4667)
(cid:5)
(cid:14)
(cid:4666)
(cid:3)
(cid:135)
(cid:156)
(cid:139)
(cid:22)
(cid:143)
(cid:131)
(cid:148)
(cid:137)
(cid:145)
(cid:148)
(cid:19)
(cid:3)
(cid:883)(cid:886)(cid:882)
(cid:883)(cid:884)(cid:882)
(cid:883)(cid:882)(cid:882)
(cid:890)(cid:882)
(cid:888)(cid:882)
(cid:886)(cid:882)
(cid:884)(cid:882)
(cid:882)
(cid:4667)
(cid:5)
(cid:14)
(cid:4666)
(cid:3)
(cid:135)
(cid:156)
(cid:139)
(cid:22)
(cid:143)
(cid:131)
(cid:148)
(cid:137)
(cid:145)
(cid:148)
(cid:19)
(cid:3)
(cid:883)(cid:886)(cid:882)
(cid:883)(cid:884)(cid:882)
(cid:883)(cid:882)(cid:882)
(cid:890)(cid:882)
(cid:888)(cid:882)
(cid:886)(cid:882)
(cid:884)(cid:882)
(cid:882)
(cid:4667)
(cid:5)
(cid:14)
(cid:4666)
(cid:3)
(cid:135)
(cid:156)
(cid:139)
(cid:22)
(cid:143)
(cid:131)
(cid:148)
(cid:137)
(cid:145)
(cid:148)
(cid:19)
(cid:3)
(cid:886)(cid:882)
(cid:885)(cid:887)
(cid:885)(cid:882)
(cid:884)(cid:887)
(cid:884)(cid:882)
(cid:883)(cid:887)
(cid:883)(cid:882)
(cid:887)
(cid:882)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:16)(cid:135)(cid:143)(cid:145)(cid:148)(cid:155)
(cid:9)(cid:142)(cid:145)(cid:131)(cid:150)(cid:139)(cid:144)(cid:137)(cid:486)(cid:146)(cid:145)(cid:139)(cid:144)(cid:150)(cid:3)(cid:17)(cid:151)(cid:143)(cid:132)(cid:135)(cid:148)
(cid:6)(cid:145)(cid:152)(cid:135)(cid:148)(cid:150)(cid:3)(cid:19)(cid:148)(cid:145)(cid:146)(cid:131)(cid:137)(cid:131)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:19)(cid:131)(cid:148)(cid:131)(cid:142)(cid:142)(cid:135)(cid:142)(cid:3)(cid:19)(cid:148)(cid:145)(cid:137)(cid:148)(cid:131)(cid:143)(cid:143)(cid:139)(cid:144)(cid:137)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:16)(cid:135)(cid:143)(cid:145)(cid:148)(cid:155)
(cid:9)(cid:142)(cid:145)(cid:131)(cid:150)(cid:139)(cid:144)(cid:137)(cid:486)(cid:146)(cid:145)(cid:139)(cid:144)(cid:150)(cid:3)(cid:17)(cid:151)(cid:143)(cid:132)(cid:135)(cid:148)
(cid:6)(cid:145)(cid:152)(cid:135)(cid:148)(cid:150)(cid:3)(cid:19)(cid:148)(cid:145)(cid:146)(cid:131)(cid:137)(cid:131)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:19)(cid:131)(cid:148)(cid:131)(cid:142)(cid:142)(cid:135)(cid:142)(cid:3)(cid:19)(cid:148)(cid:145)(cid:137)(cid:148)(cid:131)(cid:143)(cid:143)(cid:139)(cid:144)(cid:137)
(i) Size overhead when obfuscating MD5.
(j) Execution overhead when obfuscating MD5.
Fig. 9: Cost of symbolic opaque predicates.
675
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply. 
they generally have higher security requirements, and therefore
obfuscation is more needed. When obfuscating the programs,
we employ 80% obfuscation rate (i.e., a conﬁguration of
LLVM-Obfuscator) as the baseline. Then for each program,
we replace a certain number (1, 5, 10, and no limit) of opaque
predicates from the obfuscated software with the symbolic
opaque predicates. We watch the performance variations with
different numbers of symbolic opaque predicates.
Figure 9 shows our evaluation results. We measure the
performance of obfuscation with both program size and
execution time. From the result, we observe that the size
overhead is not a big issue. The symbolic opaque pred-
icates based on symbolic memory and ﬂoating-point both
incur similar size overhead in comparison with the default
opaque predicate employed by Obfuscator-LLVM. The covert
propagation sample involves more instructions and therefore
incurs more overhead. However, such cost can be mitigated by
employing a call-based implementation. For example, although
the parallel program sample also involves many instructions,
the resulting obfuscated program is even smaller than the
program obfuscated by the original Obfuscator-LLVM.
Some symbolic opaque predicates are also very efﬁcient in
execution time, such as those based on symbolic memory and
ﬂoating-point numbers. Their costs are similar to the default
opaque predicates employed in Obfuscator-LLVM. However,
some symbolic opaque predicates incur much cost during
execution. As shown in e.g., Figure 9(h) and Figure 9(j),
the execution overhead may be thousands of times when
employing covert propagation and parallel programming to
obfuscate encryption programs. Such predicates involve heavy
operations (e.g., ﬁle read/write, thread creation/execution) and
incur nontrivial execution cost. The overhead seems acceptable
for general Linux programs, but
it can be ampliﬁed for
encryption programs because the symbolic opaque predicates
are nested in loops in such programs.
In a word, the cost of symbolic opaque predicates depends
on the employed challenging problems and their implemen-
tation mechanisms. Some symbolic opaque predicates can
be very promising with trivial costs. But we should be
careful when employing other opaque predicates with heavy
cost, especially when using them with loops. In practice, we
may prioritize the cost of symbolic opaque predicates and
preemptively employ more efﬁcient ones. Note that there is
still a large room to improve the usability issue, which is
beyond the scope of this work.
V. RELATED WORK
A. Symbolic Execution for Deobfuscation
Recently, the development of symbolic execution techniques
has bred several important attempts to deobfuscation(e.g., [5,
6, 28, 29]). Ming et al. [5] proposed LOOP, which is a
logic-oriented tool for opaque predicate detection. LOOP is
made up of a symbolic execution engine and a rule-based
predicate analyzer. The rule can detect three types of opaque
predicates, including invariant opaque predicates, contextual
opaque predicates, and dynamic opaque predicates. Another
work [29] from the same group employs symbolic execution
techniques to detect malware camouﬂage from obfuscated
binaries. Yadegari et al. [28] proposed a generic framework
to deobfuscate binaries based on symbolic execution. Their
framework collects traces generated by a symbolic execution