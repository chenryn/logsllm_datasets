During the network phase, the machine is either receiving
data or sending the result. When the POWERALERT-protocol
is initiated, the CPU performs an IO operation to transfer data
from the network card. While when the machine returns the
results, the CPU performs an IO operation to transfer data to
the network card. We learn the timing model of the network
phase by varying the number of bytes to be transferred and
then measuring the time it takes to transfer those bytes. Using
our test machine, yn = 0.129 × x + 12.48 is the linear model
that predicts the timing for the network phase as a function
of the number of bytes (x). The mean error of the model is
σn = 1.902μs. The model’s constant component is the time it
takes the OS to create the buffers and the linear component is
the time to transfer the data over the buses using DMA. The
linear coefﬁcient models the bus speed.
F. Measurement Validation
POWERALERT measures the current drawn in during
the
POWERALERT-protocol and attempts to validate that
trace is generated due to the POWERALERT-protocol PFSM
in Figure 4. The power states are extracted from the
519
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:32:10 UTC from IEEE Xplore.  Restrictions apply. 
resulting in a sequence of states S =
current signal
S(0), S(1), S(2), . . . , S(n). A state is detected by matching
the frequency spectrum of the current signal to the stored
spectra in the PFSM, and then the duration of each state
is compared to the learned timing model. For each phase
POWERALERT computes the different between the measured
duration and the model estimate, an alarm is raised if the
difference exceeds the maximum value of the model error and
the sampling error.
If errors are not detected during state estimation, POW-
ERALERT then matches the sequence of states to the regular
language which is generated by the POWERALERT-protocol
PFSM learned by POWERALERT during the training phase
(Figure 4).
L = (S0, S1)+(S0, S2, S3, S0)(S0, S1).
The ﬁrst part of the language, (S0, S1)+, is the protocol initi-
ation phase. The second part, (S0, S2, S3, S0), is the hashing
phase. Finally, the last part, (S0, S1), is the output phase. If
the language is not matched an alarm is raised.
G. Parameter Search
The parameters of the IC-program determine the execution
duration; if the execution is within the sampling error or model
error, then an attacker can hide. Thus, we design the IC-
program such that added instructions can be detected.
In order to ﬁnd the optimal parameters for the IC-program,
is solved by POW-
the optimization in Equation (V-G)
ERALERT. The optimization minimizes the total running time
constrained by the hardware sampling rate, the cost to run the
IC-program, and the coverage required. Where N is the input
set size, c is the IC-program size, y(·) and yn(·) are the learned
models, σm and σn are the model errors, σs is the sampling
error, γ is a tolerance factor, cost is the maximum cost, and
coverage is the minimum coverage.
y(N, c)
minimize
subject to y(N, c + k) − y(N, c) > γ · max(σm, σs)
N,c
yn(c) > γ · max(σn, σs)
c  coverage.
We compute the parameters of the IC-program for k = 4
with a tolerance factor γ = 10, cost = 300, and coverage =
0.000001. When the sampling rate is 1 MHz, the input set
size is 2,019 bytes for a program size of 40 instructions.
While when the sampling rate is 200 KHz, the optimal input
size becomes 3,269 for a program size of 40 instructions.
Our computations show that the higher the sampling rate the
smaller the input IC-program has to be. So if the designer
invests more in the hardware capabilities of POWERALERT,
the attacker’s leeway will be tighter and with low overhead to
the machine.
520
We model
VI. ATTACKER-VERIFIER GAME
the interaction the interactions between the
defender (POWERALERT) and the attacker using a continuous
time game with actions performed asynchronously. In this
game, the defender initiates the POWERALERT-protocol at ran-
dom times with a pre-deﬁned strategy while the attacker tries
to anticipate the defender’s strategy and disables the malicious
changes to the kernel in order to avoid detection. The attacker’s
goal is to coincide her actions with the defender’s actions so
that her malicious activity is hidden when the POWERALERT-
protocol is taking place.
In what follows, we ﬁnd the Nash equilibrium strategy
for the game when the defender chooses her action times
by sampling an exponential distribution, then the attacker’s
best strategy is to hide her activities by sampling a different
exponential distribution in response to the defender. The Nash
equilibrium strategy is the optimal strategy for the attacker and
defender such that if either the attacker or defender deviate,
their payoff decreases.
A. Formalization as a Game
We present a continuous time game in which a defender
(Pd) makes a move to detect an attacker and an attacker
(Pa) makes a move to hide in order to avoid detection.
A player’s strategy deﬁnes the time instants at which she
wants to make her move. For the attacker, Player a, it is the
set Sa = {ta,0, ta,1, ta,2, ta,3 . . .}. For the defender, Player
is the set Sd = {td,0, td,1, td,2, td,3 . . .}. A strategy
d,
Si is a renewal strategy if the action inter-arrival times are
independent and identically distributed [3].
it
The attacker’s action consists of hiding her malicious activ-
ity for a speciﬁed period of time (duration α). Such an action
would restore the machine to its untampered state, thus avoid-
ing detection in case the defender initiates the POWERALERT-
protocol. After the period α elapses, the attacker restores the
malicious state of the machine.
The defender’s action consists of
initiating the POW-
ERALERT-protocol to validate the victim machine’s a portion
state, the ratio of checked state is pc; the ratio pc is the
coverage set by POWERALERT. pc is also the probability of
detection when an attacker is present in the machine. An action
succeeds when the defender detects the attacker has modiﬁed a
memory location. The action fails when the detection does not
detect an attacker. A failed action does not necessarily mean
the absence of malicious activities; the attacker might have
changed memory locations not checked by the POWERALERT-
protocol.
B. Analysis of Nash Equilibrium
In this section, we study the game in which both players use
exponential strategies. First, we ﬁnd the form of the expected
payoff of both players for any renewal strategy;
then we
compute the expected payoffs for the exponential strategy.
Finally, we ﬁnd the best response strategies for both players
and the Nash equilibrium of the game.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:32:10 UTC from IEEE Xplore.  Restrictions apply. 
Let y = Za(t) be the age of the renewal process for the
attacker; it is the time since the last move, i.e., y = t − ta.
Let x = Zd(t) be the age of the renewal process for the
defender, i.e., x = t − td. Let the size-bias density function
∗(z) = 1−F (z)
of random variable X with PDF f be f
,
where μ = E[X] and F (z) is the CDF of X. The size-
1−F (x)dx
.
bias cumulative distribution function F
∗(z) and
Based on the results in [9], limt→∞ fZ(t)(z) = f
∗(z). In the following compute the
limt→∞ FZ(t)(z) = F
probability of overlap between the defender’s and attacker’s
actions. Consider the following cases:
• No overlap, x ≤ y or y + α ≤ x:
∗(z) =
(cid:2) z
μ
μ
0
C1(t) =
∗
1 =
C
fa,t(y)fd,t(x)dxdy
x=0
∗
a (y) [F
∗
d (y)] dy
y=0
(cid:3) y
(cid:3) +∞
(cid:3) +∞
(cid:3) ∞
(cid:3) +∞
(cid:3) +∞
f
0
C2(t) =
fa,t(y)fd,t(x)dxdy
y=0
∗
2 =
x=y+α
a (x) [1 − F
∗
f
• Overlap, y ≤ x ≤ y + α:
(cid:3) y+α
C
0
∗
d (y + α)] dx
C3(t) =
∗
3 =
C
fa,t(y)fd,t(x)dxdy
d (y + α) − F
∗
x=y
∗
a (y) [F
∗
d (y)] dy
(cid:3) +∞
(cid:3) +∞
y=0
f
0
• Attacker running, y > α:
(cid:3) +∞
(cid:3) +∞
α
α
C4(t) =
∗
4 =
C
fa,t(y)dy
∗
a (y)dy
f
We compute the time-averaged payoff for the attacker as:
(cid:5)(cid:6)
βa =−cl(pc)(C
(cid:4) (cid:5)(cid:6) (cid:7)
+ ca × C
∗
1 + C
∗
2 )
(cid:7)
(cid:4)
∗
4
1
.
− caα
(cid:4)
(cid:5)(cid:6)
E[Xa]
(cid:7)
Detection
Attack running
Hiding
The ﬁrst term is the cost incurred when the action succeeds
and the attack is detected; the second term is the gains of the
attacker when the attack is running; and the third term is the
costs of the action of hiding.
We also compute the time-averaged payoff for the defender:
βd = + cw(pc)(C
(cid:4)
(cid:5)(cid:6)
∗
1 + C
∗
2 )
(cid:7)
Detection
− cm × 1
(cid:5)(cid:6)
(cid:4)
E[Xd]
(cid:7)
.
Action
The ﬁrst term is the beneﬁt of detecting the attack (this is when
the integrity check determines that the state was tampered),
and the second term is the cost incurred when an action is
performed.
Consider the case of the exponential underlying random
variable. Speciﬁcally, let Xa ∼ exp(λa) and Xd ∼ exp(λd).
λa+λd
−λaz, f
−λaz), and F
First, observe that fa,t(z) = λae
In the following we consider two cases, the defender wanting
to minimize the cost of the checks (Theorem 1), or the de-
fender wanting to inﬂict damage on the attacker (Theorem 2).
∗(z) = 1 −
−λaz). So
∗(z) = 1 − (e
F (z)/E(X) = λa(e
the probabilities for the cases above are as follows:
C2 = λae−αλd
λa+λd
−αλa
C4 = e
C1 = 1 − λa
C3 = −C1 + 1 − λae−αλd
In computing the best response for each player, we ﬁnd
the rate that maximizes the payoff given the rate of the
other player. If the payoff function is convex then the global
= 0. For α ≪ 1
maximum represents the best response, dβx
λ,
dλx
the exponential terms in the probabilities are approximated as
−αλ ≈ 1 − αλ. Using the approximation, we compute the
e
∗
a of ∂βa
positive root λ
∂λa
∗
a = λd
(cid:8)(cid:9)
− 1
= 0.
(cid:10)
λa+λd
λ
With pccl (cid:6) ca, ∂βa
λa > λ
given the defender rate is:
pccl
2ca
(cid:8)(cid:9)
∗
a and ∂βa
(cid:10)
∂λa  0 for λa < λ
BRa(λd) = λd
.
(1)
− 1
pccl
2ca