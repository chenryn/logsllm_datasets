(flags-r-us-example.com)
betsy在哪？
betsy
pts/3
Dec 27 11:07
知道如何寻找特定的用户后，我们可以将命令放进脚本里，这段脚本的第一个参数就是
我们要找的用户名称：
www.TopSage.com
---
## Page 50
38
第2章
S cat >finduser
建立新文件
1/bln/eh
findaer---察看第一个参数所指定的用户是否登录
T$dex51on
*D
以L&nd-of-file 结尾
$ chmod +x finduser
设置执行权限
$ ./findueer betay
试：寻找betsy
pt8/3
Dec 27 11:07
(flag6-r-u8.example,com)
$ ./finduser benfamin
再找找好友Ben
ben}anin
dtlocal
(kites.exarple,com)
$ mv finduser $HcM/bin
这个文件存进自已的bin目录
以finduser...开头的这一行是一个注释（comment）.Shell会忽略由#开头的每一
行，（相信你也已经发现：当Shell读取脚本时，前面所提及的#！行也同样扮演注释的
角色。）为你的程序加上注释绝对不会错。这样可以帮助其他人或是自已在一年以后还
能够了解你在做什么以及为什么要这么做。等到我们觉得程序能够运行无误时，就可以
把它移到个人的bin目录。
这个程序还没有达到完美。要是我们没给任何参数，会发生什么事？
Usage: grep [OPTION] .. PATTERN [FILE] ..
S finduser
我们将在6.2.4节看到，如何测试命令行参数数目，以及在参数数目不符时，如何采取
适当的操作。
2.71
简单的执行跟踪
程序是人写的，难免会出错。想知道你的程序正在做什么，有个好方法，就是把执行跟
踪（executiontracing）的功能打开。这会使得Shell显示每个被执行到的命令，井在前
面加上“+”：一个加号后面跟着一个空格。（你可以通过给Shell变量PS4赋一个新值以
改变打印方式.）
例如：
S sh -x nuser8
打开执行银踪功能
+whc
拨显除的命令
+ wc -1
实际的输出
www.TopSage.com
---
## Page 51
入门
39
你可以在脚本里，用set-x命令将执行跟踪的功能打开，然后再用set+x命令关闭
它。这个功能对复杂的脚本比较有用，不过这里只用简单的程序来做说明：
$ cat > tracel.8h
建立脚本
qn/uTq/1#
set =x
打开版踪功能
ecbo 1st ecbo
做些事
set +x
关闭跟踪功能
再做些事
D
 end-of-file 结尾
S chnod +x trace1.sb
设置执行权限
S./tracel.sh
执行
+ echo 1st echo
破跟踪的第一行
1st echo
被跟踪的下一行
命令的输出
+ set +x
2nd echo
下一个命令的输出
执行时，set-x不会被融踪，因为跟踪功能是在这条命令执行后才打开的。同理，set
+x会被跟踪，因为跟踪功能是在这条命令执行后才关闭的。最后的echo命令不会被跟
踪，因为此时跟踪功能已经关闭。
2.8国际化与本地化
编写软件给全世界的人使用，是一项艰难的挑战。整个工作通常可以分成两个部分：国
际化（internationalization，缩写为il8n，因为这个单字在头尾之间包含了18个字母），
以及本地化（localization，缩写为110n，理由同前）。
当国际化作为设计软件的过程时，软件无须再修改或重新编译程序代码，就可以给特定
的用户群使用。至少这表示，你必须将“所要显示的任何信息”包含在特定的程序库调
用里，执行期间由此“程序库调用”负责在消息目录（messagecatalog）中找到适当的
译文。一般来说，消息的译文就放在软件附带的文本文件中，再通过gencat或msgfmt
编译成紧凑的二进制文件，以利快速查询。编译后的信息文件会被安装到特定的系统目
录树中。例如 GNU的/usr/share/1ocale 与/usr/1ocal/share/1ocale，或离用
UNIX系统的/usr/1ib/nls或/usr/1ib/1ocale,详情可见setlocale(3）、catgets(3C)
与gettext(3C）等手册页面（manualpages）。
当本地化作为设计软件的过程时，目的是让特定的用户群得以使用软件，在本地化的过
程可能需要翻译软件文件和软件所输出的所有文字，可能还必须修改程序输出中的货币、
日期、数字、时间、单位换算等格式。文字所使用的字符集（characterset）可能也得
www.TopSage.com
---
## Page 52
40
第2常双
变动（除非使用通用的Unicode字符集），并且使用不同的字体，对某些语盲来说（书写）Im
方向（writingdirection）也可能需要变动。
UNIX的世界中，ISO程序语言标准与POSIX对此类问题的处理都提供了有限度的支持，
不过要做的事还很多，而且各种UNIX版本之间差异极大。对用户而言，用来控制让哪
种语言或文化环境生效的功能就叫做locale，你可以通过如表2-3所示的一个或多个环
境变量（environment variable）来设置它。
表2-3：各种Locale环境变量
名称
说明
LANG
未设置任何LC_xXXX变量时所使用的默认值
LC_ALL
用来覆盖掉所有其他LC_XXx变量的值
LC_COLLATE
使用所指定地区的排序规则
LC_CTYPE
使用所指定地区的字符集（字母、数字、标点符号等）
LC_MESSAGES
使用所指定地区的响应与信息：仅POSIX适用
LC_MONBTARY
使用所指定地区的货币格式
LC_NUMERIC
使用所指定地区的数字格式
使用所指定地区的日期与时间格式
一般来说，你可以用LC_ALL来强制设置单一locale；而LANG则是用来设置locale的
默认值，大多数时候，应避免为任何的LC_xxx变量赋值。举例来说，当你使用sort命
令时，可能会出现要你正确设置LC_COLLATE的信息，因为这个设置可能会跟LC_CTYPE
的设置相冲突，也可能在LC_ALL已设置的情况下完全被忽略。
ISOC与C++标准只定义了c这个标准的local名称：用来选择传统的面向ASCII的行
为模式。POSIX标准则另外定义了POSIX这个locale名称，其功能等同于C。
除c与POSIx外，locale名称井未标准化。不过，有很多厂商采用类似但不一致的名称。
locale名称带有语言和地域的意义，有时甚至会加上一个内码集（codeset）与一个修饰
符（modifier）。一般来说，它会被表示成ISO639语言代码（language code，注7）的
两个小写字母、一个下划线符号与ISO3166-1国家代码（countrycode，注8）的两个
大写字母，最后可能还会加上一个点号、字符集编码、@符号与修饰词（modifierword）。
语文名称有时也会用上。你可以像下面这样列出系统认得哪些locale名称：
注 7：元 hrrp://www.ics.nci.edu/pub/ietf/http/related/iso639.txt,
注8：元 htp://aserpage.chemie.fu-berlin.de/diverse/doc//S0_3166.html
www.TopSage.com
---
## Page 53
入门
41
$ locale -8
列出所有locale名称
francais
fr_BB
fr_BB.16o88591
fr_BEBeuro
fr_B8.iso885915eeuro
fr_BE.utf8
fr_Bg.utf8eeuro
fr_CA.1so88591
fr_CA
fr_CA.utf8
french
+ i +
**
查询特定locale变量相关细节的方法如下：为执行环境指定locale（放在命令前面）并
以-ck选项与一个LC_xxx变量来执行1ocale命令。下面的例子是在SunSolaris系
统下，以Danish（丹麦文）locale来查询日期时间格式所得到结果：
$ IC_ALL=da locale -ck LC_rIE
取得Danish的日期时间格式
d_t_fnt=*ea ed eb eY # 82*
LC_TIKE
d_fmt=*ad&n-$y*
t_fmt=*8r*
c_fmt_anpn=*$I: ex: $S p*
K.1,xv,=ude
day=*s(n dag*; *mandag*:*tirsdag*: *onsdag*: *torsdag* ; *fredag* ; *1grdag*
.xgt.,ox.1,xo,,euo。1,x1.,ueu,,uge,=Aepqe
non=*januar*;*februar*;*marts*;*apri1*;*maj*:*juni*;*juli*;*august*: \
,xequeoep..,xequenou,1,xeqoaxo,1,xequesde8。
r,axo,1,dos,1,one,1,tnf.1,um.1,feu,1,xde,r,zeu,1,qa.1,ue.-uouqe
*nov*;*dec*
era=**
era_d_fnt=*.
era_t_fnt=**
alt_digitss**
能够使用的1ocale相当多。一份调查了约20种UNIX版本的报告发现，BSD与
MacOSX系统完全不支持locale（没有locale命令可用），甚至在某些系统上也只支
持5种，不过新近发布的GNU/Linux版本则几乎可以支持500种。locale的支持在安装
时或许可以由系统管理者自行决定，所以即便是相同的操作系统，安装在两个类似的机
器上，对locale的支持可能有所不同，我们发现，在某些系统上，要提供locale的支持，
可能需要用到约300MB（注9）的文件系统。
3.9:
MB=megabyte，约1百万字节，一个字节传统上有8位，不过更大或更小的尺寸都有
人用过。通常M意即2的20次方，电就是1048576.
www.TopSage.com
---
## Page 54
42
第2章
有些GNU包已完成国际化，并在本地化支持上加入了许多locale。例如，以Italian（意
大利文）locale来说，GNU的1s命令已提供如下的辅助说明：
$ LC_ALL=it_IP 1s --help
取得GNU 1s的 Ita11an 辅助说明
U8o: 1s [OPZIONB]... [PILE]...
glenca infornazioni sui FILE (predefinito: la directory corrente).
-a, *-a11
non nasconde 1e voci che iniziano con .
-A, --almost-al1
non elenca le voci inplicite . e -
"*author
stanpa 1°autore di ogni fi1e
-b, --escape
U8a blocchi lunghi DIMENS byte
stanpa escape ottali per 1 ,caratteri non graficl
b1ock=81ze=DIM&NS
注意，没有译文的地方（输出结果的第5行）会回到原本的语言：英文。程序名称及选
项名称没有翻译，因为这么做会破坏软件的可移植性。
目前大多数系统均已对国际化与本地化提供些许支持，让Shell程序员得以处理这方面
的问题。我们所写的Shell脚本常受到locale的影响，尤其是排序规则（collationorder），
以及正则表达式（regularexpression）的“方括号表示式”（bracket-expression）里的
字符范围。不过，当我们在3.2.1节讨论到字特集（characterclass）、排序符号（collating
symbol）与等价字符集（equivalence class）的时候，你会发现，在大多数UNIX系统
以及有哪些排序符号可用，这也反映出，在目前的系统上，locale的支持仍未成熟。
GNUgettexr包（注10）或许可用来支持Shel1脚本的国际化与本地化，这个高级主题
不在本书的探讨范围，不过相关细节可以在gettext.info在线手册中的“Preparing Shell
Scripts for Internationalization”—节找到。
支持locale的系统很多，但缺乏标准的locale名称，因此locale对Shell脚本的可移植性
帮助不大，最多只是将LC_ALL设置为C，强制采用传统的locale。在本书中，当遇到
locale的设置可能会产生非预期结果时，我们就会这么做。
2.9小结
该选编译型语言还是脚本编程语言，通常视应用程序的需求而定。脚本编程语言多半用
注10：
见fp://ftp.gnu.org/gnm/geltext/。megabyte的商易算法就是把它怒成大概一本书的字数
(300 页×60行/页× 60字基 /什=1 080 000字持)。
www.TopSage.com
---
## Page 55
入门
于比编译型语言高级的情况，当你对性能的要求不高，希望尽快开发出程序并以较高级OIm
的方式工作时，也就是使用脚本编程语言的好时机。
Shell是UNIX系统中最重要、也是广为使用的脚本语言。因为它的无所不在，而且遵循
POSIX标准，这使得写出来的Shell程序多半能够在各厂商的系统下运行。由于Shell函
数是一个高级的功能，所有Shell程序其实相当实用，用户只要花一点力气就能做很多
事情。
所有的Shell脚本都应该以#为第一行，这一机制可让你的脚本更有灵活性，你可以选
择使用Shell或其他语言来编写脚本。