# ls
Category: Crypto, 300 Points
## Description
> Boss wanted to give people access to only see the directories list in a filesystem.
> 
> Now you can run anything on my OS... so long as it's `ls` (with parameters).
> 
> Send the commands in one or more files, then zip that file. I only accept zips, everything else is inefficient.
> 
> I'll verify that you aren't playing games, if I see a command that isn't `ls`, I'm not running it.
> 
> I don't like redundancy, so I'll save the hash of the zips that were already verified...using the best hash algorithm of them all: **MD5**!
## Solution
It's pretty obvious that we need to create an MD5 collision here: Two zip files, one containing a legal `ls` command and one containing a `cat` command to dump the flag. But, first thing first, let's check that we can communicate with the server:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls]
└─$ echo "ls -al" > ls.txt
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls]
└─$ zip ls.zip ls.txt
  adding: ls.txt (stored 0%)
┌──(user@kali)-[/media/sf_CTFs/checkpoint/ls]
└─$ curl -X POST -H "Content-Type: application/zip" https://ls.csa-challenge.com/upload-zip --data-binary @ls.zip -s | python3 -m json.tool
{
    "statusCode": 200,
    "body": "[\"total 5\\ndrwxr-xr-x 2 root  root    57 Aug 19 06:30 .\\ndrwxr-xr-x 1 12569 users 4096 Aug 12 09:59 ..\\n-rwxr-xr-x 1 root  root    25 Aug  4 18:56 flag.txt\\n-rwxr-xr-x 1 root  root   504 Aug 19 06:30 lambda_function.py\\n\"]"
}
```
We can see `flag.txt` just waiting for us in the current directory, and all that we need to do is `cat` it. MD5 collisions have been achievable for a few years now, so the challenge here isn't to discover a way to perform the collision, but just to follow the super-laconic and unclear instructions of how to do so, as detailed in the bible of MD5/SHA1 hash collisions: [corkami](https://github.com/corkami/collisions#zip). 
Due to the structure of ZIP files, creating a zip file collision isn't trivial, but they offer a W/A: Finding a collision for a dual ZIP file, which is crafted to be able to host two different archive files. This dual ZIP file is provided to a tool which knows how to find hash collisions under some constraints: Given the original file, it will produce two files with the same MD5 and *almost* the same prefix. For example, if we provide the tool with `a.bin` as input, it will return `a1.bin` and `a2.bin` such that both files start with the contents of `a.bin` with just a few bits changed, and each file has some unpredictable suffix. The important thing is that the few changed bits are predictable, so one can craft a file where the changed bits are meaningful. In our case, the dual zip file is crafted so that one of the bits will control to which of the two archived files the zip applies for.
For the first stage, we need to take their provided [assembly source](https://github.com/corkami/collisions/blob/master/scripts/zip.asm), which describes the structure of a dual ZIP file, and edit it for our needs:
```assembly
; a nasm source to defines a dual ZIP for MD5 collisions
; build with `nasm -o zip.zip zip.asm`
; Ange Albertini 2018
BITS 32
%include "zip.inc"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Replace File 1 and 2 values.
; reminder: incbin "", , 
; File 1
%macro file1.name 0
  db 'hello.txt'
%endmacro
%macro file1.content 0
%%start:
  db 'ls -al', 0ah
file1.compsize equ $ - %%start
%endmacro
file1.compression equ COMP_STORED
file1.decsize     equ file1.compsize
file1.CRC32       equ 0xafddb2c5
                                                          ; File 2
                                                          %macro file2.name 0
                                                              db 'bye.txt'
                                                          %endmacro
                                                          %macro file2.content 0
                                                          %%start:
                                                            db 'cat flag.txt', 0ah
                                                          file2.compsize equ $ - %%start
                                                          %endmacro
                                                          file2.compression equ COMP_STORED
                                                          file2.decsize     equ file2.compsize
                                                          file2.CRC32       equ 0xf5d90d17
                                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                          file2:
                                                          istruc filerecord
                                                            at filerecord.frSignature,        db "PK", 3, 4
                                                            at filerecord.frVersion,          dw 0ah
                                                            at filerecord.frCompression,      dw file2.compression
                                                            at filerecord.frCrc,              dd file2.CRC32
                                                            at filerecord.frCompressedSize,   dd file2.compsize
                                                            at filerecord.frUncompressedSize, dd file2.decsize
                                                            at filerecord.frFileNameLength,   dw lfhname2.len
                                                            at filerecord.frExtraFieldLength, dw extra2.len
                                                          iend
                                                          lfhname2:
                                                            file2.name
                                                          lfhname2.len equ $ - lfhname2
                                                          extra2:
                                                            field2:
                                                              .id dw 0
                                                              .len dw extra2.len - 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
file1:
istruc filerecord
  at filerecord.frSignature,        db "PK", 3, 4
  at filerecord.frVersion,          dw 0ah
  at filerecord.frCompression,      dw file1.compression
  at filerecord.frCrc,              dd file1.CRC32
  at filerecord.frCompressedSize,   dd file1.compsize
  at filerecord.frUncompressedSize, dd file1.decsize
  at filerecord.frFileNameLength,   dw lfhname1.len
  at filerecord.frExtraFieldLength, dw extra1.len
iend
lfhname1:
  file1.name
lfhname1.len equ $ - lfhname1
extra1:
  field1:
    .id dw 0
    .len dw extra1.len - 4
                                                            extra2.len equ $ - extra2
                                                          data2:
                                                            file2.content
                                                          data2.len equ $ - data2
                                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                          CD2:
                                                            istruc direntry
                                                              at direntry.deSignature,        db "PK", 1, 2
                                                              at direntry.deVersionToExtract, dw 0ah
                                                              at direntry.deCrc,              dd file2.CRC32
                                                              at direntry.deCompressedSize,   dd data2.len
                                                              at direntry.deUncompressedSize, dd data2.len
                                                              at direntry.deFileNameLength,   dw cdname2.len
                                                              at direntry.deFileCommentLength,dw cdcom2.len
                                                              at direntry.deHeaderOffset,     dd file2
                                                            iend
                                                            cdname2:
                                                              file2.name
                                                            .len equ $ - cdname2
                                                            cdcom2:
                                                              db 0 ; truncating
  extra1.len equ $ - extra1
data1:
  file1.content
data1.len equ $ - data1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CD1:
  istruc direntry
    at direntry.deSignature,        db "PK", 1, 2
    at direntry.deVersionToExtract, dw 0ah
    at direntry.deCrc,              dd file1.CRC32
    at direntry.deCompressedSize,   dd data1.len
    at direntry.deUncompressedSize, dd data1.len
    at direntry.deFileNameLength,   dw cdname1.len
    at direntry.deFileCommentLength,dw cdcom1.len
    at direntry.deHeaderOffset,     dd file1
  iend
  cdname1:
    file1.name
  cdname1.len equ $ - cdname1