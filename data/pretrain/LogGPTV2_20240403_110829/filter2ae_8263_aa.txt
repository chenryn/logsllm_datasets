## 0x01 前言
前段时间续师傅又给我指出了fastadmin 后台低权限拿 shell 的漏洞点：
在忙好自己的事情后，有了这次的分析
影响版本： **V1.0.0.20191212_beta** 及以下版本
## 0x02 fastadmin 的鉴权流程
低权限后台拿 shell 遇到的最大的问题就是有些功能存在 getshell 的点，但是低权限没有权限去访问。因此我们有以下几个思路：
  * 在低权限的情况下，找到某些功能存在 getshell 的点
  * 把低权限提升到高权限，再利用高权限可访问的功能点去 getshell
  * 绕过权限的限制，找到 getshell 的点
本文利用的就是第一种和第二种相结合的情况，在低权限的情况下，找到可利用的某些方法，利用这种方法本身存在的漏洞去获取高权限，然后利用高权限可访问的功能点去
getshell。
既然强调了权限，因此必须要介绍一下fastadmin 的鉴权流程，只有清楚在什么情况下，有权限访问，什么情况下无权限访问，才可以找到系统中可能存在的漏洞点。
在 fastadmin
中的`/application/common/controller/Backend.php`文件中，详细说明了鉴权的一些信息。关键信息如下：
    protected $noNeedLogin = [];    
     protected $noNeedRight = [];    
    ...
       public function _initialize()
        {
            $modulename = $this->request->module();
            $controllername = Loader::parseName($this->request->controller());
            $actionname = strtolower($this->request->action());
            $path = str_replace('.', '/', $controllername) . '/' . $actionname;
            !defined('IS_ADDTABS') && define('IS_ADDTABS', input("addtabs") ? true : false);
            !defined('IS_DIALOG') && define('IS_DIALOG', input("dialog") ? true : false);
            !defined('IS_AJAX') && define('IS_AJAX', $this->request->isAjax());
            $this->auth = Auth::instance();
            // 设置当前请求的URI
            $this->auth->setRequestUri($path);
            // 检测是否需要验证登录
            if (!$this->auth->match($this->noNeedLogin)) {
                //检测是否登录
                if (!$this->auth->isLogin()) {
                    Hook::listen('admin_nologin', $this);
                    $url = Session::get('referer');
                    $url = $url ? $url : $this->request->url();
                    if ($url == '/') {
                        $this->redirect('index/login', [], 302, ['referer' => $url]);
                        exit;
                    }
                    $this->error(__('Please login first'), url('index/login', ['url' => $url]));
                }
                // 判断是否需要验证权限
                if (!$this->auth->match($this->noNeedRight)) {
                    // 判断控制器和方法判断是否有对应权限
                    if (!$this->auth->check($path)) {
                        Hook::listen('admin_nopermission', $this);
                        $this->error(__('You have no permission'), '');
                    }
                }
            }
fastamdin
规定了两个集合，一个集合为无需登录，无需鉴权，即可访问的`$noNeedLogin`，一个集合为需要登录，无需鉴权，即可访问的`$noNeedRight`，然后定义了初始化函数`_initialize()`，该方法主要用于验证访问当前
URL的用户是否登录，访问的方法是否需要登录以及访问的方法是否需要检验权限。
这个鉴权文件被各个控制器所引用，并且这些控制器在开始处都会规定哪些方法属于`$noNeedLogin`，哪些方法属于`$noNeedRight`，如在`/application/admin/index.php`文件中的开头处：
规定了`login`方法为无需登录，无需鉴权的方法，`index`和`logout`为需要登录，无需鉴权的方法。然后重写`_initialize()`，并且在该方法中引入了`Backend.php`中的`_initialize()`判断方法。
以上为 fastadmin 的简单的鉴权流程，更复杂的鉴权，如需要登录并且需要鉴权等，有兴趣的朋友可自行阅读源代码去研究。
## 0x03 漏洞分析
漏洞点：`/application/admin/controller/Ajax.php`
在该文件的开头处，定义了各类方法的权限，如下：
规定`lang`方法无需登录、无需鉴权即可访问，其他方法（upload、weigh、wipecache、category、area、icon）为需要登录、无需鉴权即可访问的方法。其中，`weigh`方法的主要内容如下：
    public function weigh()
        {
            //排序的数组
            $ids = $this->request->post("ids");
            //拖动的记录ID
            $changeid = $this->request->post("changeid");
            //操作字段
            $field = $this->request->post("field");
            //操作的数据表
            $table = $this->request->post("table");
            //主键
            $pk = $this->request->post("pk");
            //排序的方式
            $orderway = strtolower($this->request->post("orderway", ""));
            $orderway = $orderway == 'asc' ? 'ASC' : 'DESC';
            $sour = $weighdata = [];
            $ids = explode(',', $ids);
            $prikey = $pk ? $pk : (Db::name($table)->getPk() ?: 'id');
            $pid = $this->request->post("pid");
            //限制更新的字段
            $field = in_array($field, ['weigh']) ? $field : 'weigh';
            // 如果设定了pid的值,此时只匹配满足条件的ID,其它忽略
            if ($pid !== '') {
                $hasids = [];
                $list = Db::name($table)->where($prikey, 'in', $ids)->where('pid', 'in', $pid)->field("{$prikey},pid")->select();
                foreach ($list as $k => $v) {
                    $hasids[] = $v[$prikey];
                }
                $ids = array_values(array_intersect($ids, $hasids));
            }
            $list = Db::name($table)->field("$prikey,$field")->where($prikey, 'in', $ids)->order($field, $orderway)->select();
            foreach ($list as $k => $v) {
                $sour[] = $v[$prikey];
                $weighdata[$v[$prikey]] = $v[$field];
            }
            $position = array_search($changeid, $ids);
            $desc_id = $sour[$position];    //移动到目标的ID值,取出所处改变前位置的值
            $sour_id = $changeid;
            $weighids = array();
            $temp = array_values(array_diff_assoc($ids, $sour));
            foreach ($temp as $m => $n) {
                if ($n == $sour_id) {
                    $offset = $desc_id;
                } else {
                    if ($sour_id == $temp[0]) {
                        $offset = isset($temp[$m + 1]) ? $temp[$m + 1] : $sour_id;
                    } else {
                        $offset = isset($temp[$m - 1]) ? $temp[$m - 1] : $sour_id;
                    }
                }
                $weighids[$n] = $weighdata[$offset];