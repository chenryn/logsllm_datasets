## Page 960
我们觉得保持CreationCenter对DVD格式和布局的完全控制是很重要
的，所以我们在自己的工作范围内增加了一个程序：DvdLoader，
DvdLoader运行在打印工厂中，负责读取DVD并调用PCS中的不同存
储过程，添加订单、构图和图像。PCS将组合指令看成是一个透明
的字符事，我们很小心地避免让PCS"打并"这个字符事中的XML。
有时候这意味着我们会有重复信息，诸如对基本图像本身的依赖关
系，但这对于维持一个清晰的边界来说是一种可以接受的折中。
类似地，我们定义了一个接口，让RenderEngine从PCS中取得渲染任
务，同时保持渲染本身的XML描述处于CreationCenter的控制之下。
我们编写了这些接口的规格说明，然后利用运行在并发服务器上的
FIT来“敲定"准确的含义。实际上，我们将FIT作为这些接口的可执
行的规格说明。后来发现这很重要，因为即使对于参加谈判某个接
口的人来说，也会发现在他们认为同意的内容和实际构建的东西之
间存在着差异。FIT让我们在开发中就消除了这些差异，不需要在
集成测试或生产环境中再来消除，那样会更糟。
DVD加载
DvdLoader程序运行在打印工厂，它实际上是一个批处理器，从
DVD上读出订单并将它们装入PCS。像其他程序一样，我们关注的
是健壮性。DvdLoader读取一条完整的订单，验证该DVD包含了该
订单的所有构成元素，然后将它加入PCS。通过这种方式，我们不
会将不完整的订单或有冲突的订单加人数据库。
因为图像可能出现在许多DVD上，加载程序会利用GUID来检查是
否某张图像已加载。如果没有，加载程序就加上它。这样，在需要
时，订单就可以从照相馆重新发出，就算PCS已经清除了订单和相
关的图像也没关系。这也意味着设计中使用的背景图像只在使用该
设计的第一份订单到达时加载。
所以，DVD是自包含的，不论加载儿次得到的结果都一样。
渲染管道
对于渲染引擎本身，我们使用了经典的管道和过滤器架构。“管道”
是对图像渲染的自然隐喻，它将一系列复杂的动作分解成具体的步
骤，让单元测试变得简单。
959
---
## Page 961
在从PCS取出一项任务时，渲染引擎会创建一个RenderRequest。它
将这个RenderRequest送入渲染管道，其中的每一个步骤都作用于该
请求。在最后一个步骤，管道将渲染好的图像保存到PCS指定的路
径下。在该请求退出管道时，它只保存得到的结果，包括成功标记
以及可能有的问题集合。
管道中的每个步骤都有机会报告问题，将错误信息添加到结果中。
如果某个步骤发生错误，管道就会终止，引擎将问题报告给PCS。
快速失败
每个系统都有一些失败模式，唯一的问题在于你是针对失败进行设
计还是任其发生。我们仔细设计“安全的”失败，特别是在生产过程
中。我们绝不希望因为软件的原因而导致生产线停下来。
还有另一个方面。当客户回来取他的订单时，应该取走正确的照
片！也就是说，我们交付的产品需要对产品和客户的订单进行匹
配。这看起来是小事一桩，但让产品图像的渲染和屏幕图像的渲染
保持方式一致是非常重要的。我们努力确保在生产使用的渲染代码
与照相馆中使用的相同。我们也确保渲染引擎在生产时使用相同的
字体和背景。
在我们的渲染引擎中，我们采用的哲学是“快速失败、大声失败”。
当渲染引擎从PCS取出一项任务时，它会检查所有指令，验证该任
务需要的所有资源都实际存在。如果该任务包含文字，那么渲染引
擎就立即装入字体。如果该任务包含某些背景图或alpha遮罩，那么
渲染引擎就立即装入相关的图像。如果缺了什么，它就马上向PCS
报告错误并终止该任务。在渲染管道的16个步骤中，前5个都是进
行验证。
在上线几个月之后，我们终于发现了一个渲染引擎没有及早检测到
的错误：它没有为前面渲染的图像预订磁盘空间。某天当PCS的存
储卷满了的时候，渲染任务很晚才失败，而不是尽早失败。在此之
前，没有因为失败的渲染而返工的。
伸缩性
每个渲染引擎都是独立操作的。PCS不会保留现有渲染引擎的清
单，每个引擎直接从PCS中取任务。实际上，引擎可以根据需要添
加或移除。因为每个引擎在完成一项任务之后就立即请求新的任
960
---
## Page 962
务，我们自动实现了负载均衡的效果，充分利用了每个引擎的能
力。快速的渲染引擎以较快的速度完成任务。不同配置的渲染引擎
不会引起问题。
唯一的瓶颈将是PCS本身。因为渲染引擎会调用存储过程来取得任
务和更新状态，每个渲染引擎每过三五分钟都产生成两个事务。
PCS运行在还算不错的MicrosoftSQLServer服务器集群上，所以没
有很快成为吞吐量瓶颈的危险。
4.4用户反应
我们的第一个版本安装在两个本地照相馆中，它们的距离容易让我
们产生“驱车过去除错"的冲动。合伙人的反馈很及时，也相当积
极。一个照相馆经理认为新系统快了许多，而且更易用，所以她预
计在假期能够多接待50%的客户。据说有一个客户曾询问在哪里能
够买到这个软件的副本。我们常常听说客户直接拿起鼠标自己修饰
照片。你可以想象，客户更愿意订购他们自己创建的照片。
我们在生产过程中遇到了一些缺陷，但很快就纠正了。由于我们在
加载程序和渲染集群中设计的弹性，打印工厂能够很容易进行伸
缩，处理来自比预期更多的照相馆的照片，同时保持很高的生产品
质。
4.5结论
我本可以花更多的时间和篇幅来描述每个类、每次选代或每个设计
决定，就像初为人父的人描述宝宝的每次打幅和摇晃一样。但这一
章浓缩了一年的努力、探索和心血。它展示了CreationCenter架构的
结构与功能如何从业务的基本需求及环境中浮现。通过保持关注点
分离，坚持增量式设计和开发，CreationCenter以一种令人满意的方
式平衡了各方面的需求。
参考文献
Buschmann,Frank,Kevlin Henney,and Douglas C.Schmidt.2007.Pattern-
Oriented.
Software Architecture:A Pattern for Distributed
Computing,vol.4.Hoboken,NJ:Wiley
196
---
## Page 963
Fowler,Martin. 1996.Analysis Patterns:Reusable Object
Models.Boston,MA: Addison-Wesley.
Fowler,Martin."Application facades."http://martinfowler.
com/apsupp/appfacades.pdf.
Gamma,Erich,et al.1994.Design Patterns:Elements ofReusable Object-
Oriented Software.Boston,MA: Addison-Wesley.
Hunt,Andrew,and David Thomas.1999.The Pragmatic
Programmer.Boston,MA: Addison-Wesley.
Lea,Doug.20oo.Concurrent Programming in Java,Second
Edition.Boston,MA: Addison-Wesley.
Martin,Robert C.2002.AgileSoftware
Development,Principles,Patterns,and Practices.Upper Saddle River,NJ:
Prentice-Hall.
第5章面向资源的架构：在Web中BrianSletten
原则与特性
结构
功能多样性
模块
V概念完整性
依赖关系
修改独立性
进程
自动传播
V数据访问
962
---
## Page 964
可构建性
V增长适应性
V熵增抵抗力
架构是有人居住的雕塑。
—康斯坦丁·布朗库西（ConstantinBrancusi）
在这一章中，我们将说明企业中聚焦信息的架构展示了与Web一样
的明确特点：伸缩性、弹性、架构迁移策略、信息驱动的访问控制
等。在这个过程中，业务部门有权力根据业务需求来决定资金投入
和软件开发，而不是简单地因为选择容易失效的技术而要求业务部
门为不断的改变付费。
5.1简介
作为T行业从业人员，我们很没面子，因为我们不得不承认这个令
人尴尬的事实：大多数的组织机构更容易在Web上找到信息，而不
是在他们自己的系统中。想一想这一点。他们更容易通过第三方、
在全球信息系统中找到数据，而不是在他们自已能够完全控制和访
问的环境中。这种尴尬的事情有许多原因，但最大的问题是我们倾
向于在内部使用错误的抽象，过分强调我们的软件和服务，忽视了
数据。这种方向性错误在一定程度上导致了业务部门对IT部门感到
烦恼。我们忘记了公司并不关心软件，而只是关心它提供的特征和
功能。业务部门真正想要的是一些更容易的方法，这些方法能够管
理他们收集的数据，对数据进行分析，通过复用数据来支持客户和
核心功能。
为什么组织机构内的信息管理与Web有着如此巨大的差别？遗憾的
是，答案既与技术选择有关，也与公司策略有关。我们有一些遗留
系统，使交互模式变得复杂。我们试图利用供应商的一些解决方
案，而这些供应商的利益并不与我们保持一致。我们希望有银弹来
解决所有的问题（尽管Brooks博士在多年前就纠正过我们的观念1
。即使你碰巧进入了一个拥有非常合适的技术基础设施的组织机
构，数据管理人和数据用户通常也会互相争夺，这抑制了信息共
享。这是公司不像Web那么清楚的原因之一：似乎没有合适的动机
来分享数据，尽管分享数据的需求是很明确的。最重要的信息是，
963
---
## Page 965
有些问题与技术无关。在一定程度上，Web技术也会帮助我们绕过
策略问题，因为你不总是需要特别许可才能暴露出你通过其他形式
得到的信息。
好消息是我们可以借助Web来指导我们，弄明白这种寻找信息的极
好环境背后的原因。在组织机构中应用这些概念将帮助我们解决这
些问题，得到类似的好处，如低成本的数据管理、架构迁移的策
略、信息驱动的访问控制，以及满足法律法规。Web的成功在很大
程度上是因为它增大了信息共享的可能性，同时文降低了门槛。我
们已经创建了一些工具和协议，不但支持世界领先的科学家之间的
知识传递，而且也支持我们的祖母与家人之间保持联系，并找到他
们感兴趣的内容和社区。这不是一件小事，我们应该好好考虑一下
导致这些现实背后的思想所产生的影响。我们必须住在我们创建的
架构里，所以我们应该建造既能满足我们的需求又能为我们带来灵
感的架构。
[1]_http://en.wikipedia.org/wiki/No_Silver_Bullet
5.2传统的Web服务
在我们并始为信息驱动的环境寻找新的架构之前，我们应该简单回
顾一下最近我们如何构建了类似的系统，怎样才能做得更好。在最
近10年里，我们一直在推销企业级架构的愿景，这种架构是建立在
可复用的业务服务的基础之上的。我们需要提醒自已，Web服务的
目标是要成为一种业务策略，成为一种方式，让我们能够在一些地
方定义功能，在任何地方、以各种编程语言异步地访问这些功能。
我们希望能够在不影响客户的情况下升级这些服务。遗憾的是，与