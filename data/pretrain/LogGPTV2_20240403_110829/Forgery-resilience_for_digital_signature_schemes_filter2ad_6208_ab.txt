tation of the validation key. Since that function maps an exponen-
tial number of elements to a single one, recovering the secret key
from the public key, even when the factorization of the modulus is
known, is highly unlikely. Conceptually, acceptable signatures are
constructed from any of those candidate secret keys while the valid
one can only be produced using the key that is held by the signer.
Nevertheless, in order to distinguish that secret key from the oth-
ers, we show that only one key can be valid with respect to both the
public and validation keys.
One drawback of our scheme is that the veriﬁcation key’s size
grows linearly with the number of messages the signer is allowed
to sign. This is not a concern in practice since those keys only serve
in case of forgery.
We also introduce a stronger security property for accumulator
schemes, that is still satisﬁed by some existing proposals [2], that
we name strong collision-freeness. We use such an accumulator
scheme to stop malicious signers from disavowing the public ran-
domness included in each signature. Furthermore, we make the
signer generate this randomness by means of a pseudorandom func-
tion.
1.4 Outline
The rest of the paper is structured as follows. Section 2 pro-
vides the necessary background and the factoring intractability as-
sumption. Whereas, Section 3 is devoted to formally deﬁning the
notion of forgery-resilient digital signature schemes. We then ded-
icate Section 4 to our concrete instantiation of the ﬁrst forgery-
resilient digital signature scheme. In Section 5, we focus on ana-
lyzing the security of the scheme, prove its correctness, soundness,
undeniability, and validatibility. We leave the deﬁnition of strongly
collision-free accumulators, our construction’s proof of trustability,
and the efﬁciency analysis to the Appendices.
2. PRELIMINARIES
This section is devoted to setting the necessary background for
this paper. We start by a formal deﬁnition of classical digital sig-
natures. We then continue with the deﬁnition of pseudorandom
functions and ﬁnally ﬁnish with listing the number theoretic results
and assumptions.
Throughout this paper, a function f (s) is said to be polynomial
in s if there exists a constant c ∈ N such that f (s) is O(sc). Sim-
ilarly, f (s) is said to be negligible if, for every c ∈ N, f (s) is
O(s−c). For simplicity, we use the notation f (s) = negl(s) to
express that f is negligible in s.
An algorithm is said to be PPT, PPT for short, if its running time
is polynomial in the size of its inputs. When the output of an al-
gorithm is fully determined by its inputs, we say that it is deter-
ministic, otherwise, we say that it is probabilistic. Generic PPT
algorithms are denoted by Ap while computationally unbounded
adversaries are denoted by A∞. If an algorithm A can query an
external O, it will be denoted AO. An algorithm may also have
access to a special oracle, referred to as Ohard, that takes as input
an instance of a problem P ∈ FNP1, which is assumed to be hard,
and returns a solution to this problem.
2.1 Number Theoretic Background
We call a prime number p a strong prime if p = 2ap + 1 and
p  2a is also a prime number. We then consider a PPT algorithm
Gen that, on input a security parameter 1k and two integers a and
b of bit-size α, generates two random strong primes p = 2ap + 1
and q = 2bq + 1, such that log2 p = log2 q = F(k)/2,
where, for any security parameter k ∈ N, F(k) denotes a func-
tion that represents the recommended (bit-)size of the RSA mod-
ulus n = pq. Gen outputs n = pq along with p and q. A popu-
lar choice to match 80-bit security against factorization is to take
F(80) = 1024. However, we take the equations of Lenstra and
Verheul as a reference [16] for selecting parameter and key sizes
and use F(80) = 1184.
When n is an -bit long integer, multiplication in Z
n is per-
formed with time complexity O(2) while exponentiation modulo
1FNP is the class of function problems of the following form:
Given an input x and a polynomial-time predicate P (x, y), if there
exists a y satisfying F (x, y), then output any such y, otherwise out-
put ⊥. Also, note that, without loss of generality, we could restrict
our oracle to solve problems in NP.
n is performed in time O(3). ϕ(·) denotes the Euler totient func-
tion.
When implied by the context, we omit writing explicitly mod n
for calculations modulo n.
DEFINITION 1. Let us consider a PPT algorithm AFACT who
takes as input a, b, n = pq, such that p, q, (p − 1)/2a, and (p − 1)/2b
are prime numbers, and outputs p and q. The factoring assumption
states that for any such AFACT, we have
∀a, b ∈ N : Pr(p, q) ← AFACT(1k, n, a, b)
The probability is taken over the random coins of Gen and AFACT.
DEFINITION 2. Let ARSA be a polynomial-time algorithm who
takes as input a, b, n = pq, such that p, q, (p − 1)/2a, and (p − 1)/2b
are prime numbers, and outputs an element from Z
N . We further
let e be an integer co-prime with ϕ(n). We say that the RSA as-
sumption holds in Z
(n, p, q) ← Gen(1k, a, b) = negl(k).
∀a, b ∈ N : Prg ← ARSA(1k, n, a, b, e, h = ge)
 = negl(k)
The probability is taken over the random coins of Gen and AFACT
as well as the random choice of e and g.
(n, p, q) ← Gen(1k, a, b)
e ∈R Z
ϕ(n), g ∈R Z
n if
n
Such RSA moduli were used by Naccache and Stern to con-
struct a public-key cryptosystem [17]. We also refer to the work
of Groth [14] that makes a more detailed treatment of the factor-
ization of such numbers by Pollard’s rho method [23] and other
generic factoring algorithms such as the general number ﬁeld sieve.
Note that the subsequent attack of Coron et al. [8] restricts the set
of parameters for which the assumption holds.
In Z
n, every element has a unique a-th root if and only if we
have gcd(a, ϕ(n)) = 1. In fact, this ensures the correctness of the
RSA cryptosystem. However, when a and ϕ(n) are not coprime,
there exists many a-th roots as stated by the following theorem.
THEOREM 1. If a divides the order of a group, then the number
of elements in the group whose order divides a is a multiple of a. If
the group is cyclic, then this number is exactly a.
Note that Z
n is not cyclic when n is an RSA modulus. How-
ever, the next theorem proves that the number of a-th roots of any
element in Z
n is exactly equal to a in the class of RSA moduli we
consider in this paper, i.e., product of two strong primes.
THEOREM 2. Let n = pq be an RSA modulus such that p and
q are strong prime numbers, i.e., p = 2ap + 1, q = 2bq + 1.
If gcd(a, q − 1) = gcd(b, p − 1) = 1, then for any y ∈ Z
n, the
equation ga = y mod n has exactly a solutions.
PROOF. Let CRT : Z
q denote the isomorphism
induced by the CRT. By applying CRT, if g is a solution to the
equation ga = y mod n, then (gp, gq) = (g mod p, g mod q)
is a solution to the two equations
n → Z
p × Z
(gp)a = y mod p,
(gq)a = y mod q.
(1)
(2)
p is cyclic, we can apply Thm 1
to deduce that Equation (1) has exactly a solutions (remember that
ϕ(p) = ap). On the other hand, we have that gcd(a, ϕ(q)) = 1
On one hand, recalling that Z
as a is coprime with 2, b, and q by assumption. Consequently,
Equation (2) accepts only one solution. As there exist a tuples
of the form (gp, gq) satisﬁes Equations (1) and (2), by applying
CRT−1, we deduce that the number of a-th roots of y in Z
n is
exactly a.
As it is the case for the classical Rabin function, we can rather
easily prove that extracting an a-th root of an a-th residue in Z
n
is equivalent to factoring with an even lower reduction gap (for the
case of Rabin it is equal to 1/2). Assume an adversary Aroot who, on
input an a-th residue y ∈ Z
n, outputs an x s.t. xa = y (mod n).
We now construct an adversary against factoring AFACT that has
access to Aroot. AFACT picks a random x1 ∈ Z
n and computes
1 mod n. It then calls upon Aroot on input y and gets x2.
y = xa
When x1 = x2, AFACT computes gcd(x1 − x2, N ), a non-trivial
factor of N. Since the equality x1 = x2 holds with probability
2−a, we obtain
Pr[AFACT wins] = (1 − 2−a) Pr[Aroot wins].
2.2 Pseudorandom Functions
(3)
Informally, a pseudorandom function (PRF) is a function which
cannot be distinguished from a uniformly chosen random function
by any algorithm that is allowed a certain number of evaluations of
that function.
DEFINITION 3. Let F : K × D → R be a family of functions
from D to R indexed by keys taken from the set K. Let R : K×D →
R be a family of random functions from D to R indexed by keys
taken from the set K. We say that F is a family of pseudorandom
functions if it satisﬁes the following properties.
1. There exists a PPT (in λ) sampling algorithm that outputs a
random element of K.
2. For every K ∈ K and every x ∈ D, FK(x) is computable
by a polynomial-time algorithm (in λ) .
3. For every PPT distinguisher D, interacting with a black-box
implementing either FK or RK, for a randomly chosen K,
and outputing a bit b, we have
P r[DFK (1λ) → 1] − P r[DRK (1λ) → 1] = negl(λ).
The probabilty is taken over the random choice of K ∈ K
and the random tape of D.
In the sequel, we will restrict ourselves to ﬁxed-input-length
PRFs: the number of queries the distinguisher is allowed to make is
bounded by a value N. Such a primitive has the advantage of being
implementable by an encryption scheme that is provably indistin-
guishable from the ideal cipher with respect to adversaries limited
to N queries to the encryption oracle. For instance, the block cipher
KFC [1] is a good candidate for our PRF.
2.3 Classical Digital Signature Schemes
The message space is denoted by M, the signature space by S,
the public key space by PK, and the private key space SK. A digi-
tal signature scheme is composed of the three following algorithms.
Keygen(1λ) → (pk, sk).
A PPT algorithm for generating the pair of public and private
keys (pk, sk). It takes as input a security parameter λ ∈ N written
in unary form.
Sign(sk, m) → σ.
A PPT algorithm that takes as input a message m ∈ M and
a private key sk, and outputs a signature σ ∈ S. Note that this
algorithm may be either probabilistic or deterministic.
Verify(pk, m, σ) → b.
A deterministic polynomial-time algorithm that outputs 1 when
σ is a correct signature of a message m with respect to the public
key pk. Otherwise, it outputs 0.
The standard security model for such a scheme is the existential
unforgeability under the adaptive chosen message attack model in-
troduced by Goldwasser et al. [13]. In summary, it considers an
adversary fed with the public key pk who is assumed to have ac-
cess to a signing Oracle OSign that she can query as many times as
the signer can sign. This oracle has the ability to compute the sig-
nature of any message chosen by the adversary whose ﬁnal goal is
to produce a valid signature (i.e., one that passes the validation) for
a message he did not submit to OSign. If no polynomially bounded
adversary is able to produce that signature except with probability
negligible in λ, then the signature scheme is secure.
3. DEFINITION OF FORGERY-RESILIENT
DIGITAL SIGNATURE SCHEMES
Like classical digital signature schemes, a forgery-resilient sig-
nature scheme is composed of the classical key generation algo-
rithm, run by an authority (acting as a trusted third party TTP), the
signing algorithm, run by the signer, and the acceptance algorithm,
run by veriﬁers. Additionally, in order to show that a forgery has
occurred, a judge is given a validation key which is used to assert
the validity of a signature. A corresponding validation algorithm
has thus to be deﬁned. Considering practical scenarios, one can
consider the judge as a TTP.
DEFINITION 4. A forgery-resilient digital signature scheme is
composed of the following ﬁve algorithms.
1. Setup(1α, 1λ) → param: generates the parameters of the
scheme and a trapdoor information that is discarded. This
algorithm runs in polynomial-time in its inputs and is exe-
cuted by the authority.
2. KeyGen(param, 1N ) → (sk, pk, vk): is a PPT protocol run
by the signer and the judge that generates three keys which
will be used to produce N signatures. At the end of the proto-
col, both parties obtain a public key pk that is later published
and the signer obtains a private key sk while the judge ob-
tains the validation key vk. We also assume the existence
of two predicates computable in polynomial-time Ψ and Ψ
such that Ψ(sk, pk, vk), resp. Ψ(pk, vk), returns 1 if and
only if the triplet (sk, pk, vk), resp. the pair (pk, vk), is a
valid output, resp. partial output, of KeyGen. Anytime the
predicate Ψ is not satisﬁed, the judge outputs ⊥, meaning
that the key generation failed, and no public key is published.
3. Sign(sk, m) → σ: computes the signature σ of the message
m ∈ M, the message space in polynomial-time (in λ). When
this operation runs correctly, σ is said to be a valid signature
of the message m.
4. Accept(pk, m, σ) → b ∈ {0, 1}: is an algorithm that yields
1 if the signature σ of the message m is acceptable with
respect to pk. Otherwise, it returns 0. A pair (m, σ) that
passes the acceptance test is said to be acceptable.
5. Validate(vk, pk, m, σ) → b ∈ {0, 1}: returns 0 if the sig-
nature is spurious and 1 if it is valid. This algorithm is used
by the judge in case of a dispute between parties to determine
whether the alleged forgery (m, σ) is a spurious signature or
a valid one.
We require such a scheme to be correct and sound (Properties 1 and
2, resp.). Moreover, forgery resilience induces that the algorithms
should satisfy undeniability and validatability (Properties 3 and 4,
resp.).
1. Completness. The scheme is said to be complete if for every
α, λ we have
Accept(pk, m, σ) = 1,
Validate(vk, pk, m, σ) = 1
param ← Setup(1α, 1λ)
(sk, pk, vk) ← KeyGen(param, 1N )
m ∈R M
σ ← Sign(sk, m)
 = 1,
where the probability is taken over the random coins of Setup,
KeyGen, and Sign (when it is probabilistic) along with the
choice of m.
2. Soundness. This property states that every valid signature
is acceptable. So, if Σ denotes the space of signatures, we
require that for every α, λ
Pr
Pr