# Apache安全——挂钩分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Apache
是一个被广泛使用的web服务器，这段时间爆出了很多关于Apache挂钩模块的漏洞，比如CVE-2021-40438、CVE-2021-22986等等，为了更好的理解漏洞挖掘的原理以及梳理知识体系，本文从Apache挂钩模块的角度分析Apache安全。笔者将从什么是挂钩、调试环境搭建、挂钩操作流程、自己编写挂钩等多个角度给大家无死角的介绍隐藏在挂钩中的安全问题。
## 0x01 挂钩简介
###  0x1 简介
为了让Apache
2.0版本能够更模块化，更具拓展性，Apache采取了更加灵活的处理策略—“模块自行管理”策略，即挂钩（Hooks）的概念。Hooks的使用将函数从静态变为动态，模块编写者可以通过Hooks自行增加处理句柄，而不需要所有的模块都千篇一律。因此，每次增加新函数时，唯一修改的就是函数所在的模块而已。  
​
想必大家已经对Apache挂钩有了基本的认识，本文主要记录在学习挂钩过程中思考总结的东西。打算从apache默认挂钩开始分析，比如Basic认证模块，通过分析标准挂钩的声明、注册、使用，打造属于自己的挂钩已经挂钩处理函数，下面开始进入正题。
###  0x2 环境搭建
docker 调试环境
    docker run -it 8237:80 turkeys/apache:2.4.41 bash
源码安装可参考
《Apache 源码编译及调试》
## 0x02 挂钩名词梳理
我们以Aapche内部挂钩为例详细分析整个Apache挂钩操作过程中的操作细节。
**因为Apache挂钩知识点比较多，为了方便理解，从宏观角度首先给大家引入几个概念，以及梳理其中的关系** 。主要涉及到了以下几个名词和几个动词  
n:
  * 挂钩
  * 挂钩数组
  * 挂钩结构
  * 挂钩注册函数
  * 挂钩处理函数
v:
  * 声明挂钩
  * 声明挂钩数组
  * 声明挂钩结构
  * 注册挂钩处理函数
  * 注册挂钩函数
猛的一看这些名词及其相似，但细细品味还是有很多不同的，我们暂且把其关系用下图表示：
1.挂钩的名字需要在 **声明挂钩** 中指定，同时在声明挂钩的过程中定义了很多挂钩信息  
2.每个挂钩有一个 **数组结构** 用来保存该挂钩信息  
3.利用 **挂钩结构** 保存 **挂钩数组**  
4.每个挂钩需要利用 **挂钩注册函数** 去单独注册  
5.在 **声明挂钩** 的同时会产生 **注册挂钩处理函数的函数、挂钩执行函数、获取挂钩函数的函数**  
6. **挂钩处理函数** 需要 **注册挂钩处理函数的函数** 才能注册到对应的 **挂钩数组** 中
可能看着上面的流程图也会感觉到懵逼，不过没关系我们具体结合着Apache源码，一起品尝其中的知识盛宴。
## 0x03 挂钩操作流程
在一个挂钩的生命周期中要经历以下过程：
1.声明挂钩  
2.声明挂钩数组  
3.声明挂钩结构  
4.声明挂钩函数调用类型  
5.编写挂钩函数  
6.注册挂钩函数
这个过程有线性调用也有回调函数，我们由浅入深具体分析下整个挂钩操作流程。
###  0x1 声明挂钩
声明一个挂钩的结构类型，用来保存挂钩的相关定义。Apache中关于挂钩的实现大部分通过宏来完成，先看下怎么去声明一个挂钩
    AP_DECLARE_HOOK(int,check_user_id,(request_rec *r))
* * *
对应的宏定义在ap_hooks.h文件中体现，发现它是由 APR_DECLARE_EXTERNAL_HOOK 宏实现的，再次寻找调用。
    /**
     * Declare a hook function
     * @param ret The return type of the hook
     * @param name The hook's name (as a literal)
     * @param args The arguments the hook function takes, in brackets.
     */
    #define AP_DECLARE_HOOK(ret,name,args) \
            APR_DECLARE_EXTERNAL_HOOK(ap,AP,ret,name,args)
* * *
APR_DECLARE_EXTERNAL_HOOK 宏定义如下，这个是Hook声明的核心处理代码
我们来捋一捋其中都干了什么事，关于宏定义的分析需要点前置知识。
1.##宏主要用来连接它两边的字符串，形成一个新的字符串  
2.typedef 为类型取一个新的名字，但仅限于为类型定义符号名称，由编译器执行解释  
3.#define 给类型和数值起别名，由与编译器进行处理
首先对这段代码进行编译处理
通过上述代码可以看出该代码的五个功能
**1\. 定义挂钩执行函数原型**
ap_HOOK_check_user_id_t 为挂钩在实际调用过程中的处理函数，我们所有的注册的函数都将会通过这个函数执行。
**2\. 定义挂钩注册函数原型**
如图中的ap_hook_check_user_id
    AP_DECLARE(void) ap_hook_check_user_id(ap_HOOK_check_user_id_t *pf,
                                          const char * const *aszPre, 
                                          const char * const *aszSucc, int nOrder);
简单解释下他的几个参数的含义：
  * ap_HOOK_check_user_id_t 为执行函数原型，为挂钩内部函数，最终会加入到在处理请求期间的指定调用列表中。
  * aszPre规定必须在这个函数之前调用的函数模块
  * aszSucc规定必须在这个函数之后调用的函数模块
  * nOrder 挂钩的综合排序参数，如果这个数值越低，那么这个挂钩函数在列表中排列将越靠前，因此也越早被调用。其定义如下图所示
**3\. 声明挂钩调用函数**
    AP_DECLARE(int) ap_run_check_user_id args;
在声明这些挂钩后就要调用挂钩函数了，不同的挂钩函数对应的调用函数不同不过都长 **ap_run_xxx ，**
这写个挂钩调用函数会在request.c里调用
**4\. 获取挂钩定义函数**
宏定义展开后如下图所示，生成挂钩访问函数原型，在模块外部可以调用该函数获得注册为该挂钩的所有函数。
**5\. 定义挂钩信息保存结构**
    typedef struct ap_LINK_check_user_id_t 
        { 
        ap_HOOK_check_user_id_t *pFunc; 
        const char *szName; 
        const char * const *aszPredecessors; 
        const char * const *aszSuccessors; 
        int nOrder; 
        } ap_LINK_check_user_id_t;
该宏定义了一个结构类型，用来保存挂钩的相关定义信息。由于同一个挂钩会有多个模块对其感兴趣并实现该挂钩，同一个挂钩所有的实现都保存在一个链表中，链表中的每一个元素都是
**ap_LINK_check_user_id_t** 结构
###  0x2 声明挂钩数组
对于同一挂钩，不同模块对应于它的处理函数各不相同，为了能够保存各个模块对同一挂钩的使用信息，Apache使用 **apr_array_header_t**
数组进行保存，该数组通过宏APR_HOOK_LINK声明，在request.c中的声明方式
其宏定义如下，很简单针对每个挂钩声明了一个 **apr_array_header_t** 数组
    /** macro to link the hook structure */
    #define APR_HOOK_LINK(name) \
        apr_array_header_t *link_##name;
关于挂钩的大部分信息都由下面这个结构提供，这里就不展开讲了，我们只需要知道 apr_array_header_t 里面实现了动态数组结构，可以动态的插入查询
**ap_LINK_xxxx** 结构。
###  0x3 声明挂钩结构
为什么设计挂钩结构，主要是因为在Apache2.0中并不支持直接访问挂钩数组，目前的操作是将所有的数组通过宏定义实现一个统一的结构体。
    ARP_HOOK_STRUCT()
该宏展开后实际上定义了一个限于模块内部的_hooks结构，该模块内所实现的所有挂钩的对应数组都保存为_hooks的成员。Apache
对挂钩数组的访问都要通过_hooks来实现。
###  0x4 注册挂钩函数
挂钩数组、挂钩结构声明过后，需要使用 AP _IMPLEMENT_HOOK_RUN_ (FIRST|ALL)
创建挂钩数组，并通过APR_IMPLEMENT_EXTERNAL_HOOK_BASE 宏实现了我们所需要的挂钩注册函数及挂钩信息获取函数。使用方法如下：
    AP_IMPLEMENT_HOOK_RUN_FIRST(int,check_user_id,(request_rec *r), (r), DECLINED)
    AP_IMPLEMENT_HOOK_RUN_ALL(int,fixups,(request_rec *r), (r), OK, DECLINED)
以 AP_IMPLEMENT_HOOK_RUN_ALL 为例进行分析，最终会在 APR_IMPLEMENT_EXTERNAL_HOOK_BASE
中实现核心功能。从宏定义中可以看出它实现了 **ap_hook_xxxx** 和 **ap_run_xxxx** 两个函数。
核心功能是使用apr_array_make创建每个挂钩对应的apr_array_header_t数组，并通过apr_array_push函数向_hooks结构体添加元素。
PS:  
RUN_FIRST：被调用的 hook函数的返回值为 OK 或者是DECLINE时，后面的hook是不被执行的。  
RUN_ALL：被调用的 hook函数的返回值不为 DECLINE时，已经加载的hook将被全部执行。
###  0x5 编写挂钩处理函数
关于挂钩的声明和注册操作到这里就接近尾声了，下面就是如何使用挂钩的相关操作，步骤如下