m
(cid:2)(k +m)/2(cid:3)
k +m
i=1
, 2k
|BEL| ≤
(cid:18)(cid:13)
(cid:18)(cid:13)
min
min
|MEL| ≤
The bound on the size of the MEL is as follows:
if m 
(0, 4, 5) and EV
(cid:1) = (0, 4, 4), then EV  4. If EV  2, and k = 3
& m > 4). We wonder if this is generally true: if m
sufﬁciently exceeds k, then the “RAID 4 parity sym-
bol” is replicated many times in the best code.
• We were surprised to ﬁnd that there does not exist a
systematic XOR-based erasure code with 5 ≤ k ≤ 7
and m = 7 that tolerates all erasures of size 4.
To appreciate the value of considering only non-
isomorphic Tanner graphs in a corpus, compare the number
of codes in any (k , m)-code corpus to the value of 2km. For
the (7, 7)-code corpus the reduction is of over a factor of 19
million times. We had hoped to consider all code corpi up
to k = 10 and m = 10 but the growth in the size of such
corpi was prohibitive. To identify the best codes in larger
corpi we may need to develop additional theory to reduce
the number of codes we need to evaluate in each corpus,
improve the efﬁciency of the mela implementation, or get
a larger compute cluster. Our approach to enumerating all
non-isomorphic codes for a given k and m to evaluate is
quite different from the traditional approach of identifying
families of codes: most coding theorists focus on identify-
ing a code family, parameterized on k and m, that constructs
“good” codes given k, m, and possibly a random seed.
5. Discussion
Concurrently to our work, Hafner and Rao investigated
the reliability of irregular erasure codes [7]. They did so in
the “standard” RAID framework: they developed a Markov
model with failure and recovery rates for various compo-
nents. Irregular XOR-based codes do not simply “plug” into
such a model though. They calculate the conditional proba-
bilities qj that a state in their Markov model with j failures
results in irrecoverable data loss (note that they use sub-
script k not j for their notation). They do so by counting
the number of erasure sets of size j that do not lead to data
loss for all j ≤ m (resulting in vector sj). To get qj, they
. The vector sj is the complement of the
divide sj by
(cid:13)
(cid:14)
k +m
j
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:52 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007k m # in corpus
3
2
5
2
8
2
2
11
15
2
19
2
3
5
17
3
42
3
91
3
3
180
328
3
8
4
42
4
4
179
633
4
2001
4
5745
4
5
11
91
5
633
5
3835
5
5
20755
102089
5
15
6
6
180
2001
6
20755
6
200082
6
6
1781941
19
7
328
7
5745
7
7
102089
1781941
7
7
29610804
2
3
4
5
6
7
2
3
4
5
6
7
2
3
4
5
6
7
2
3
4
5
6