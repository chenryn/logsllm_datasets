isolated trusted applications on a low-end embedded processor
architectures. All these approaches are based on CPU archi-
tectures not commonly available in end-user devices, while
SANCTUARY is based on the widely used ARM architecture.
13
B. Secure Software Architectures
Komodo aims to strengthen software isolation between the
TrustZone applications in the secure world by using a
hardened, formally veriﬁed microkernel as the secure-world
OS [18]. Komodo replaces deployed microkernels by solutions
like MobiCore [7] and hence does not support legacy systems.
Hypervisor-based approaches like vTZ [28], AppSec [46],
Terra [21], InkTag [26], TrustVisor [37] or MiniBox [35]
provide isolation using virtualization. This has four main
disadvantages: (i) their TCB contains a relatively large hyper-
visor, (ii) they block usage of virtualization for non-security
purposes, (iii) they require additional hardware to protect
against Direct Memory Access (DMA) attacks, and (iv) they
negatively inﬂuence the performance of the OS. SANCTUARY
does not rely on virtualization and can even be used in com-
bination with a hypervisor. Cho et al. [13] try to mitigate the
inﬂuence on the OS by activating the hypervisor on-demand.
Therefore, the OS is only inﬂuenced when sensitive code is
executed. In SANCTUARY, the performance of the OS is not
inﬂuenced when sensitive code is executed in parallel since no
hypervisor is running underneath the normal-world OS.
Other approaches try to minimize the normal-world TCB
by protecting the non-secure kernel. TZ-RKP [10] and
SPROBES [22] both protect the LOS kernel by instrumenting
critical functionality to trap into the secure world, where the
call is ﬁltered. As demonstrated by the Towelroot exploit [27],
such mechanisms can be circumvented. KENALI [48] instead
uses data-ﬂow integrity to enforce policies of the LOS ker-
nel’s access control system, while SKEE [9] aims to detect
attacks against the kernel by providing an isolated execution
environment at the kernel’s privilege level running a kernel
monitor. SANCTUARY does not require the kernel to be trusted
to guarantee isolated execution, moreover, SANCTUARY also
protects the LOS kernel from potentially malicious SAs.
Flicker [38] and TrustICE [51] provide temporal isolation only,
i.e., they cannot provide isolation for systems where TEEs
execute in parallel with untrusted software. Hence, on todays
commonly used multi-core systems the applicability of these
approaches is very limited. With temporal isolation, the entire
system has to be suspended, i.e., hibernation of the LOS and
all applications. Afterwards, the TEE can execute exclusively
on the system and only after the TEE has terminated, the
normal system can be restored and continue execution. Flicker
uses Intel’s Trusted Execution Technology (TXT) to reset the
system at runtime to a trusted execution state. TrustICE is con-
ceptually similar to Flicker: it uses the secure world, rather than
TXT, to reset the normal world to a trusted state. In TrustICE,
TA binaries are stored in TrustZone memory. When a TEE is
started, the LOS is suspended and the binaries are copied to
normal-world memory for execution. After the TEE ﬁnished
execution, the LOS has to be restored by the secure world.
During execution, TrustICE provides only one-way isolation
and executes in kernel-mode, this means that malicious TAs
can manipulate normal-world software, e.g., compromise the
LOS. SANCTUARY, in contrast, does provide spacial isolation,
which enables the parallel execution of untrusted code with
one or multiple TEE instances. Furthermore, SANCTUARY
offers hardware-enforced two-way isolation and restricts SAs
to user-mode execution. Hence, SANCTUARY protects systems
from malicious SAs, which is highly relevant for practical
deployment.
IX. CONCLUSION
We presented SANCTUARY, our novel security architecture for
extending the TrustZone software ecosystem with user-space
enclaves. SANCTUARY provides hardware-enforced two-way
isolation obviating the need to trust or vet the code of SAs, as
malicious SAs cannot have more power than normal user-space
applications.
SANCTUARY is based on the bus master identity ﬁltering
introduced with ARM’s latest memory controller design and
allows the parallel
isolation of individual CPU cores for
executing security-sensitive code, i.e., SANCTUARY does not
affect the user experience negatively. Furthermore, our per-
formance evaluations for our proof-of-concept implementation
shows low latencies for typical use cases, all of which makes
SANCTUARY highly practical.
ACKNOWLEDGMENTS
This work was co-funded by the DFG (projects P3 and S2
within CRC 1119 CROSSING, and HWSec), by the German
Federal Ministry of Education and Research (BMBF) and the
Hessen State Ministry for Higher Education, Research and the
Arts (HMWK) within CRISP, and by the Intel Collaborative
Research Institute for Collaborative Autonomous & Resilient
Systems (ICRI-CARS).
REFERENCES
[1]
[2]
“OP-TEE,” https://www.op-tee.org/.
I. Anati, S. Gueron, S. P. Johnson, and V. R. Scarlata, “Innovative
Technology for CPU Based Attestation and Sealing,” in Workshop on
Hardware and Architectural Support for Security and Privacy (HASP).
ACM, 2013.
[3] ARM Limited, “ARM Cortex-A Series Programmer’s Guide for
http : / / infocenter. arm . com / help / topic / com . arm . doc .
ARMv8-A,”
den0024a/DEN0024A_v8_architecture_PG.pdf.
[4] ——, “GlobalPlatform TEE & ARM TrustZone technology: Build-
https://pdfs.semanticscholar.org/
ing security into your platform,”
presentation/7b94/63d58a2d4ec9724c5933419be6f08754ce86.pdf.
[5] ——, “Security technology: building a secure system using Trust-
Zone technology,”
http://infocenter.arm.com/help/topic/com.arm.
doc.prd29-genc-009492c/PRD29-GENC-009492C_trustzone_security_
whitepaper.pdf, 2008.
[6] ——, “CoreLink TrustZone Address Space Controller TZC-380,” http:
//infocenter.arm.com/help/topic/com.arm.doc.ddi0431c/DDI0431C_
tzasc_tzc380_r0p1_trm.pdf, 2010.
[7] ——, “Giesecke & Devrient and ARM Protect Mobile Applications
From Data Theft,” https://www.arm.com/about/newsroom/26718.php,
2010.
[8] ——, “ARM CoreLink TZC-400 TrustZone Address Space Con-
troller,” http://infocenter.arm.com/help/topic/com.arm.doc.ddi0504c/
DDI0504C_tzc400_r0p1_trm.pdf, 2013.
[9] A. Azab, K. Swidowski, R. Bhutkar, J. Ma, W. Shen, R. Wang, and
P. Ning, “Skee: A lightweight secure kernel-level execution environment
for arm,” in 23rd Annual Network and Distributed System Security
Symposium, ser. NDSS, 2016.
[10] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma,
and W. Shen, “Hypervision across worlds: Real-time kernel protection
from the arm trustzone secure world,” in ACM SIGSAC Conference on
Computer and Communications Security, ser. CCS, 2014.
[11] S. S. Bhat, “Interaction of suspend code (s3) with the cpu hotplug
https://www.kernel.org/doc/Documentation/power/
infrastructure,”
suspend-and-cpuhotplug.txt, 2014.
14
the Ninth European Conference on Computer Systems. ACM, 2014,
p. 10.
[36]
[35] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry,
“Minibox: A two-way sandbox for x86 native code,” in 2014 USENIX
Annual Technical Conference (USENIX ATC 14), 2014.
J. M., “Intel Software Guard Extensions Remote Attestation End-to-
End Example,” https://software.intel.com/en-us/articles/intel-software-
guard-extensions-remote-attestation-end-to-end-example, 2018.
J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig,
“Trustvisor: Efﬁcient tcb reduction and attestation,” in Security and
Privacy (SP), 2010 IEEE Symposium on, 2010.
J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for tcb minimization,” in ACM
SIGOPS Operating Systems Review, 2008.
[37]
[38]
[39] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative Instructions and
Software Model for Isolated Execution,” in Workshop on Hardware and
Architectural Support for Security and Privacy (HASP). ACM, 2013.
[40] M. Meeker, “Internet trends 2015,” Glokalde, vol. 1, no. 3, 2015.
[41]
J. Noorman, P. Agten, W. Daniels, R. Strackx, A. Van Herrewege,
C. Huygens, B. Preneel, I. Verbauwhede, and F. Piessens, “Sancus:
Low-cost trustworthy extensible networked devices with a zero-software
trusted computing base,” in 22nd USENIX Security symposium, 2013.
J. Noorman, J. V. Bulck, J. T. Mühlberg, F. Piessens, P. Maene,
B. Preneel, I. Verbauwhede, J. Götzfried, T. Müller, and F. Freiling,
“Sancus 2.0: A low-cost security architecture for IoT Devices,” ACM
Transactions on Privacy and Security (TOPS), vol. 20, no. 3, p. 7, 2017.
[43] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and counter-
[42]
measures: the case of AES,” in RSA Conference, 2006.
[44] Project Zero, “Lifting the hyper visor,”
https://googleprojectzero.
blogspot.de/2017/02/lifting- hyper- visor- bypassing- samsungs.html,
2017.
[45] ——,
trustzone
“Trust
issues:
Exploiting
https :
/ / googleprojectzero . blogspot . com / 2017 / 07 / trust - issues - exploiting -
trustzone-tees.html, 2017.
J. Ren, Y. Qi, Y. Dai, X. Wang, and Y. Shi, “Appsec: A safe execution
environment for security sensitive applications,” in Proceedings of
the 11th ACM SIGPLAN/SIGOPS International Conference on Virtual
Execution Environments, ser. VEE, 2015.
tees,”
[46]
[47] D. Shen, “Exploiting trustzone on android,”
https://www.blackhat.
com/docs/us-15/materials/us-15-Shen-Attacking-Your-Trusted-Core-
Exploiting-Trustzone-On-Android-wp.pdf, 2015.
[48] C. Song, B. Lee, K. Lu, W. R. Harris, T. Kim, and W. Lee, “Enforcing
kernel security invariants with data ﬂow integrity,” in 23rd Annual
Network and Distributed System Security Symposium, ser. NDSS, 2016.
[49] N. Stephens, “Behind the pwn of a trustzone,” https://www.slideshare.
net / GeekPwnKeen / nick - stephenshow - does - someone - unlock - your-
phone-with-nose, 2016.
[50] R. Strackx, F. Piessens, and B. Preneel, “Efﬁcient isolation of trusted
subsystems in embedded systems,” in Security and Privacy in Commu-
nication Networks, 2010.
[51] H. Sun, K. Sun, Y. Wang, J. Jing, and H. Wang, “Trustice: Hardware-
assisted isolated computing environments on mobile devices,” in Pro-
ceedings of the 2015 45th Annual IEEE/IFIP International Conference
on Dependable Systems and Networks, 2015.
[52] Tencent, “Defeating samsung knox with zero privilege,” https://www.
blackhat.com/docs/us- 17/thursday/us- 17- Shen- Defeating- Samsung-
KNOX-With-Zero-Privilege-wp.pdf, 2017.
[53] Y. Yarom and K. Falkner, “Flush+reload: A high resolution, low noise,
l3 cache side-channel attack.” in USENIX Security Symposium, 2014.
[12] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and
A.-R. Sadeghi, “Leakage-resilient layout randomization for mobile de-
vices,” in Annual Network and Distributed System Security Symposium,
ser. NDSS, 2016.
[13] Y. Cho, J. Shin, D. Kwon, M. Ham, Y. Kim, and Y. Paek, “Hardware-
assisted on-demand hypervisor activation for efﬁcient security critical
code execution on mobile devices,” in USENIX Annual Technical
Conference (USENIX ATC), 2016.
[14] V. Costan, I. A. Lebedev, and S. Devadas, “Sanctum: Minimal Hard-
ware Extensions for Strong Software Isolation.” in USENIX Security
Symposium, 2016.
[15] Dan Rosenberg, “Reﬂections on trusting trustzone,”
https://www.
blackhat.com/docs/us-14/materials/us-14-Rosenberg-Reﬂections-on-
Trusting-TrustZone.pdf, 2014.
[16] L. Davi, A. Dmitrienko, S. Nürnberger, and A. Sadeghi, “Gadge me if
you can: secure and efﬁcient ad-hoc instruction-level randomization for
x86 and ARM,” in 8th ACM Symposium on Information, Computer and
Communications Security, ser. ASIACCS, 2013.
J.-E. Ekberg, K. Kostiainen, and N. Asokan, “The untapped potential
of trusted execution environments on mobile devices,” IEEE Security
& Privacy, 2014.
[17]
[18] A. Ferraiuolo, A. Baumann, C. Hawblitzel, and B. Parno, “Komodo:
Using veriﬁcation to disentangle secure-enclave hardware from soft-
ware,” in Proceedings of the 26th Symposium on Operating Systems
Principles, ser. SOSP, 2017.
[19] Gal Beniamini, “Qsee privilege escalation vulnerabilitiy,” http://bits-
please.blogspot.de/2015/08/full-trustzone-exploit-for-msm8974.html,
2015.
[20] ——, “Qsee privilege escalation vulnerabilitiy,”
http://bits- please.
blogspot.com/2016/05/qsee- privilege- escalation- vulnerability.html,
2016.
[21] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh, “Terra: A
virtual machine-based platform for trusted computing,” in Proceedings
of the Nineteenth ACM Symposium on Operating Systems Principles,
ser. SOSP, 2003.
[22] X. Ge, H. Vijayakumar, and T. Jaeger, “SPROBES: Enforcing kernel
code integrity on the trustzone architecture,” in Mobile Security Tech-
nologies, ser. MoST, 2014.
[23] Global Platform, “Tee management framework (version 1.0),” https:
//www.globalplatform.org/speciﬁcationform.asp?ﬁd=7866, 2016.
[24] Google, “Zircon micro kernel,”
zircon.
https://fuchsia.googlesource.com/
[25] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo, “Us-
ing Innovative Instructions to Create Trustworthy Software Solutions,”
in Workshop on Hardware and Architectural Support for Security and
Privacy (HASP). ACM, 2013.
[26] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel,
“Inktag: Secure applications on an untrusted operating system,” in
Proceedings of the Eighteenth International Conference on Architec-
tural Support for Programming Languages and Operating Systems, ser.
ASPLOS, 2013.
[27] G. Hotz, “Towelroot android root exploit,” https://towelroot.com/, 2014.
[28] Z. Hua, J. Gu, Y. Xia, H. Chen, B. Zang, and H. Guan, “vTZ:
Virtualizing ARM TrustZone,” in 26th USENIX Security Symposium
(USENIX Security 17), 2017.
[29] W. Huang, V. Rudchenko, H. Shuang, Z. Huang, and D. Lie, “Pearl-
[30]
[31]
TEE: Supporting Untrusted Applications in TrustZone,” 2018.
IETF, “Totp: Time-based one-time password algorithm - rfc6238,”
https://tools.ietf.org/html/rfc6238, 2011.
Intel, “Intel Software Guard Extensions Programming Reference,”
https://software.intel.com/sites/default/ﬁles/managed/48/88/329298-
002.pdf, 2014.
[32] C. Josh Thomas, Nathan Keltner, “Reﬂections on trusting trustzone,”
https://pacsec.jp/psj14/PSJ2014_Josh_PacSec2014-v1.pdf, 2014.
[33] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp,
S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre attacks:
Exploiting speculative execution,” ArXiv e-prints.
[34] P. Koeberl, S. Schulz, A.-R. Sadeghi, and V. Varadharajan, “Trustlite:
A security architecture for tiny embedded devices,” in Proceedings of
15