6.11 Numbers with Thousand Separators
399
6.12 Add Thousand Separators to Numbers
401
6.13 Roman Numerals
406
7.Source Code and Log Files ..
409
7.1 Keywords
409
7.2 Identifiers
412
7.3 Numeric Constants
413
7.4 Operators
414
7.5 Single-Line Comments
415
Table of Contents |v
---
## Page 8
7.6 Multiline Comments
416
7.7 All Comments
417
7.8 Strings
418
7.9 Strings with Escapes
421
7.10 Regex Literals
423
7.11 Here Documents
425
7.12 Common Log Format
426
7.13 Combined Log Format
430
7.14 Broken Links Reported in Web Logs
431
8.URLs, Paths, and Intermet Addresses .
435
8.1 Validating URLs
435
8.2 Finding URLs Within Full Text
438
8.3 Finding Quoted URLs in Full Text
440
8.4 Finding URLs with Parentheses in Full Text
442
8.5 Tum URLs into Links
444
8.6 Validating URNs
445
8.7 Validating Generic URLs
447
8.8 Extracting the Scheme from a URL
453
8.9 Extracting the User from a URL
455
8.10 Extracting the Host from a URL
457
8.11 Extracting the Port from a URL
459
8.12 Extracting the Path from a URL
461
8.13 Extracting the Query from a URL
464
8.14 Extracting the Fragment from a URL
465
8.15 Validating Domain Names
466
8.16 Matching IPv4 Addresses
469
8.17 Matching IPv6 Addresses
472
8.18 Validate Windows Paths
486
8.19 Split Windows Paths into Their Parts
68
8.20 Extract the Drive Letter from a Windows Path
494
8.21 Extract the Server and Share from a UNC Path
495
8.22 Extract the Folder from a Windows Path
496
8.23 Extract the Filename from a Windows Path
86
8.24 Extract the File Extension from a Windows Path
499
8.25 Strip Invalid Characters from Filenames
500
9.Markup and Data Formats
503
Processing Markup and Data Formats with Regular Expressions
503
9.1 Find XML-Style Tags
510
9.2 Replace  Tags with 
526
9.3 Remove All XML-Style Tags Except  and 
530
9.4 Match XML Names
533
vi | Table of Contents
---
## Page 9
9.5 Convert Plain Text to HTML by Adding  and  Tags
539
9.6 Decode XML Entities
543
9.7 Find a Specific Attribute in XML-Style Tags
545
9.8 Add a cellspacing Attribute to  Tags That Do Not Already
Include It
550
9.9 Remove XML-Style Comments
553
9.10 Find Words Within XML-Style Comments
558
9.11 Change the Delimiter Used in CSV Files
562
9.12 Extract CSV Fields from a Specific Column
565
9.13 Match INI Section Headers
569
9.14 Match INI Section Blocks
571
9.15 Match INI Name-Value Pairs
572
Table ef Contents |  vii
---
## Page 11
ace
Over the past decade, regular expressions have experienced a remarkable rise in pop-
ularity. Today, all the popular programming languages include a powerful regular ex-
pression library, or even have regular expression support built right into the language.
Many developers have taken advantage of these regular expression features to provide
the users of their applications the ability to search or filter through their data using a
regular expression. Regular expressions are everywhere.
Many books have been published to ride the wave of regular expression adoption. Most
do a good job of explaining the regular expression syntax along with some examples
and a reference. But there aren’t any books that present solutions based on regular
expressions to a wide range of real-world practical problems dealing with text on a
computer and in a range of Internet applications. We, Steve and Jan, decided to fill that
need with this book.
We particularly wanted to show how you can use regular expressions in situations
where people with limited regular expression experience would say it can’t be done, or
where sofrware purists would say a regular expression isn't the right tool for the job.
Because regular expressions are everywhere these days, they are often a readily available
tool that can be used by end users, without the need to involve a team of programmers.
Even programmers can often save time by using a few regular expressions for informa-
code, or that would othewise require a third-party library that needs prior review and
tion retrieval and alteration tasks that would take hours or days to code in procedural
management approval.
CaughtintheSnarlsof DifferentVersions
As with anything that becomes popular in the IT industry, regular expressions come
in many different implementations, with varying degrees of compatibility. This has
resulted in many different regular expression flavors that don’t always act the same
way, or work at all, on a particular regular expression.
Many books do mention that there are different flavors and point out some of the
differences. But they often leave out certain flavors here and there—particularly
I送
---
## Page 12
when a flavor lacks certain features—instead of providing altermative solutions or
workarounds. This is frustrating when you have to work with different regular expres-
sion flavors in difeent applications or programming languages.
Casual statements in the literature, such as *everybody uses Perl-style regular expres-
sions now,” unfortunately rivialize a wide range ofincompatibilities. Even *Perl-style*
packages have important differences, and meanwhile Perl continues to evolve. Over-
simplified impressions can lead programmers to spend half an hour or so fruitlessly
running the debugger instead of checking the details of their regular expression imple-
mentation. Even when they discover that some feature they were depending on is not
present, they don’t always know how to work around it
This book is the first book on the market that discusses the most popular and feature
rich regular expression flavors side by side, and does so consistently throughout the
book.
IntendedAudience
You should read this book if you regularly work with text on a computer, whether that's
searchingthroughapileofdocumens,manipulating text ina text ditor, ordeveloping
excellent tool for the job. Regalar Expressions Cookbook teaches you everything you
software that needs to search through or manipulate text. Regular expressions are an
need to know about regular expressions. You don’t need any prior experience what-
soever, because we explain even the most basic aspects of regular expressions.
If you do have experience with regular expressions, you’ll find a wealth of detail that
other books and online articles often gloss over. If youve everbeen stumped by a regex
that works in one application but not another, you'll find this book's detailed and equal
coverage of seven of the world’s most popular regular expression flavors very valuable.
We organized the whole book as a cookbook, so you can jump right to the topics you
want to read up on. If you read the book cover to cover, you'll become a world-class
chef of regular expressions.
This book teaches you everything you need to know about regular expressions and then
some, regardless of whether you are a programmer. If you want to use regular expres-
sions with a text editor, search tool, or any application with an input box labeled
"regex," you can read this book with no programming experience at all. Most of the
recipes in this book have solutions purely based on one or more regular expressions.
If you are a programmer, Chaprer 3 provides al the information you need to implement
regular expressions in your source code. This chapter assumes you’re familiar with the
basic language features of the programming language of your choice, but it does not
assume you have ever used a regular expression in your source code.
x∣Preface
---
## Page 13
TechnologyCovered
NET, Java, JavaScript, PCRE, Perl, Python, and Ruby aren’t just back-cover buzz-
all seven flavors equally. Weve particularly taken care to point out all the inconsisten-
words. These are the seven regular expression flavors covered by this book. We cover
cies that we could find between those regular expression flavors.
The programming chapter (Chaprer 3 has code listings in C#, Java, JavaScript, PHP,
suogeuedxa pue suonnos seq adioau Aiass “uesy LaN'A pue *qny uoad °pad
for all eight languages. While this makes the chapter somewhat repetitive, you can easily
noA fuque Surssu snoum u pasaaasu 1uare no sssengue uo suorssnosip dxs
should know about your language of choice.
OrganizationofThisBook
The first three chapters of this book cover useful tools and basic information that give
you a basis for using regular expressions; each of the subsequent chapters presents a
variety of regular expressions while investigating one area of text processing in depth.
Chapter 1, Introdactiot o Regaelar Expressons, explains the role of regular expressions
and introduces a number of tools that will make it easier to leam, create, and debug
them.
Chapter 2, Basic Regular Expression Seills, covers each element and feature of regular
expressions, along with important guidelines for effective use. It forms a complete tu-
torial to regular expressions.
includes code listings for using regular expressions in each of the programming lan-
Chapter 3, Programuming with Regealar Expressions, specifies coding techniques and
guages covered by this book.
Chapte 4, Validio d Formttg, contains recipes fr handling typical user iput,
such as dates, phone numbers, and postal codes in various countries.
Chaper 5, Words, Lines, and pecial Chracters, explores common text processing
tasks, such as checking for lines that contain or fail to contain certain words.
Chapter 6, Nehers, shows how to detect integers, floating-point numbers, and several
other formats for this kind of input.
Chapter 7, Source Coxde and Log Files, provides building blocks for parsing source code
and other text file formats, and shows how you can process log files with regular
expressions.
Chapter 8, URLs, Paths, and Internet Azddresses, shows you how to take apart and
manipulate the strings commonly used on the Intermet and Windows systems to find
things.
Preface | xi
---
## Page 14
Chapter 9, Markup cnd Data Forrmats, covers the manipulation of HTML, XML.
comma-separated values (CSV), and INI-style configuration files.
ConventionsUsedinThisBook
The following typographical conventions are used in this book:
Italic
Indicates new terms, URLs, email addresses, filenames, and file extensions.
Constant width
Used for program listings, program elements such as variable or function names,
values returned as the result of a regular expression replacement, and subject or
input text that is applied to a regular expression. This could be the contents of a
text box in an application, a file on disk, or the contents of a string variable.
Constant width italic
Shows text that should be replaced with user-supplied values or by values deter-
mined by context.
Regular#express1on>
Represents a regular expression, standing alone or as you would type it into the
search box of an application. Spaces in regular expressions are indicated with gray
circles to make them more obvious. Spaces are not indicated with gray circles in
free-spacing mode because this mode ignores spaces.
αReplacementtext
Represents the text that regular expression matches will be replaced within a
search-and-replace operation. Spaces in replacement text are indicated with gray
circles to make them more obvious.
Matched_text
Represents the part of the subject text that matches a regular expression.
A gray ellipsis in a regular expression indicates that you have to *fill in the blank*
before you can use the regular expression. The accompanying text explains what
you can fll in.
CR, LF, and CRLF in boxes represent actual line break characters in strings, rather
than character escapes such as r, \n, and \r^n. Such strings can be created by
pressing Enter in a multiline edit control in an application, or by using multiline
string constants in source code such as verbatim strings in C# or triple-quoted
strings in Python.
indicates that wehad tobreak upa line to make it fit the width of the printed page.
The return arrow, as you may see on the Returm or Enter key on your keyboard,
xii | Preface
---
## Page 15
When typing the text into your source code, youshould not press Enter, but instead
type everything on a single line.
This icon signifies a tip, suggestion, or general note.
UsingCodeExamples
This book is here to help you get your job done. In general, you may use the code in
this book in your programs and documentation. You do not need to contact us for
permission unless you're reproducing a significant portion of the code. For example,
writing a program that uses several chunks of code from this book does not require
permission. Selling or distributing a CD-ROM of examples from O'Reilly books does
require permission. Answering a question by citing this book and quoting example
code does not require pemission. Incorporating a significant amount of example code
from this book into your product’'s documentation does require permission.
We appreciatebut dntrequire atribution. Anattribution usually includesthetite,
author, publisher, and ISBN. For example: *Regular Expressions Cookbook by Jan
Goyvaerts and Steven Levithan. Copyright 2012 Jan Goyvaerts and Steven Levithan,
978-1-449-31943-4."
If you feel your use of code examples falls outside fair use or the permission given here,
feel free to contact us at permissions@oreilly.comm.
SafariBooks Online
Safari
Safari Books Online (www.safaribooksonline.com) is an on-demand digital
library that delivers expert content in both book and video form from the
world’s leading authors in technology and business.
Technology professionals, sofrware developers, web designers, and business and cre-
ative professionals use Safari Books Online as their primary resource for research,
problem solving, learning, and certification training.
Safari Books Online offers a range of product mixes and pricing programs for organi-
zations, government agencies, and individuals. Subscribers have access to thousands