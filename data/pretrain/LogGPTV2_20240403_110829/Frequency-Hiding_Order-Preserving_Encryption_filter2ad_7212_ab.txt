such as ﬁrst and last name, birthdate, gender, etc. – each
encrypted with its own key. This allows queries on each
individual ﬁeld, e.g. all men born on the 4th of July.
The problem can be even more severe.
Yet, in most of those ﬁelds inputs are not distributed uni-
formly. The last name Smith is certainly more common in
the United States than Huxtable. This information about
frequencies of inputs can be used in cryptanalysis of any
database table encrypted with order-preserving encryption.
In fact, Islam et al. [18] have shown that even partial fre-
quency information – as it is the case in searchable encryp-
tion – can be used to decrypt entries with high probability.
For many ﬁelds in a typical database information about the
frequency distribution is readily available, e.g. many web
sites list the most common ﬁrst and last names per region.
In many ﬁelds
we have many more database rows than values in the plain-
text domain, i.e. it is likely that all plaintexts are encrypted
at least once. In this case, the security of order-preserving
encryption (up to this paper) breaks down. The ordered ci-
phertexts can simply be matched to the ordered plaintexts.
Consider, for example, the ﬁeld “gender”. It is unlikely that
many database tables about people contain only men or
women. Any order-preserving encryption would hence re-
veal the gender, since lexicographically “female”  xj =⇒ γi > γj
∀i, j.γi > γj =⇒ xi ≥ xj
Consider the following example. Let the plaintext se-
quence be X = 1, 2, 2, 3. Possible randomized orders are
Γ1 = 1, 3, 2, 4 and Γ2 = 1, 2, 3, 4. There are many plain-
text sequences with randomized order Γ1 not all of which
have the same plaintext frequencies. Examples with any fre-
quency of 1 are X ′
3 = 1, 1, 1, 3
or X ′
4 = 1, 1, 1, 1. There are many more.
1 = 2, 2, 2, 3, X ′
2 = 1, 2, 1, 3, X ′
The goal of our security deﬁnition is that the ciphertexts
only leak the randomized order of the plaintexts, i.e. two
sequences with the same randomized order – but diﬀerent
plaintext frequencies – should be indistinguishable. Note
that the randomized order does not contain any frequency
information, since each value always occurs exactly once.
We deﬁne the following security game GameF AOCP A(λ):
We call the encryption scheme correct if Decrypt(Encrypt(S,
x)) = x for any valid state S and x. We call it order-
preserving if the order is preserved, i.e. yi ≥ yj =⇒ xi ≥ xj
for any i and j.
We now need to deﬁne the security guarantees of our
frequency-hiding order-preserving encryption scheme, i.e. why
it is frequency-hiding. We start with the deﬁnition of indis-
tinguishability under ordered chosen plaintext attack (IND-
IND-OCPA is – so far – the strongest
OCPA) from [9].
deﬁnition of security of order-preserving encryption.
It is
achieved by the encryption schemes of [23, 30].
IND-OCPA security is deﬁned by a game between a chal-
lenger and an adversary. The adversary prepares two se-
quences of plaintexts where both sequences have the same
1. The adversary chooses two sequences X0 and X1 of n
not necessarily distinct plaintexts, such that they have
at least one common randomized order Γ.2 He sends
them to the challenger.
2. The challenger ﬂips an unbiased coin c ∈ {0, 1}, ex-
ecutes the key generation KeyGen(λ), and encrypts
Xc as Y , i.e. Si, yi ←Encrypt(Si−1, xi). He sends
the ciphertexts Y to the adversary.
3. The adversary outputs a guess c⋆ of c, i.e. which of the
two sequences it is.
2Multiple common randomized orders are possible and al-
lowed.
We can now deﬁne security against frequency-analyzing
ordered chosen-plaintext attack.
Definition 2. We say a (stateful) order-preserving en-
cryption scheme ΠF HOP E is IND-FAOCPA secure against
frequency-analyzing ordered chosen plaintext attack if the ad-
versary A’s advantage of outputting c in GameF AOCP A(λ)
is negligible in λ, i.e.
P r[A(GameF AOCP A(λ)) = c] = minC (’Alice’) AND
name = 10 and wage = minC (10) and wage )
and greater-or-equal (>=) comparisons and we cannot apply
the minC and maxC operators on the database. Consider
the following the query clause WHERE wage > (SELECT wage
WHERE name = ’Alice’) which selects all employees with a
wage greater than Alice’s. Naively executing this query on a
randomized order may introduce some additional employees
which have the same salary as Alice. In this case, it can be
solved by executing the sub-select ﬁrst, applying the maxC
operator on the client and then executing the query. An
automated rewriting algorithm for such queries is presented
in [22]. For a few, rare queries this download to the client
can imply a signiﬁcant overhead.
5. ALGORITHMS
We initially proceed as the deterministic order-preserving
encryption scheme of [23] and insert plaintexts into a sorted
binary tree in the order they are encrypted. Diﬀerently from
their scheme in our algorithm the data structure on the client
side is very important. We begin to describe the algorithm
using a binary search tree with dynamically allocated leaves
and pointers. Later we describe how we compress the tree
in order to save space compared to storing all plaintexts on
the client.
It is important to note that although our tree is dynamic,
there is a threshold depth beyond which we need to rebal-
ance. This threshold depth is determined by the ciphertext
length and may be exceeded in rare cases of ordering of plain-
texts to encrypt. The scheme in [23] contains a proof that
the probability of exceeding this ciphertext length is negligi-
ble in case of uniformly distributed input. Their Theorem 6
also holds for our encryption scheme.
We begin by encrypting each plaintext as the mean value
of the ciphertexts for the next plaintext just smaller and
greater. We insert this plaintext, ciphertext pair in our bi-
nary search tree. We then handle plaintexts that have al-
ready been encrypted diﬀerently.
In this case, i.e. when
inserted plaintext and to be encrypted plaintext are equal,
we traverse the tree in a randomly chosen fashion and insert
the new plaintext as a leaf. We ﬁrst deﬁne the basic data
structure of the tree in Algorithm 1.
We ﬁx the following parameters for all of our algorithms:
Let n be the number of not necessarily distinct plaintexts
to be inserted. Let N be the number of distinct plaintexts.
Hence the bitlength is k = ⌈log2 N⌉ in Algorithm 1. Let λ
be the security parameter and the expansion factor of the
ciphertext. Hence l = λk in Algorithm 1. The security
parameter can also be used to determine the length of the
seed for pseudo-randomness, although this seed should be
much (but polynomial) longer than the expansion factor.
Algorithm 1 Tree Structure T ree
struct Tree {
Tree left;
Tree right;
bitstring plain;
bitstring cipher;
}
We now proceed for encryption as in randomized Algo-
rithm 2. We denote the binary search tree – the state – as
a set T of nodes {t} and do not list it as a separate input.
Furthermore we add inputs t for the current node and min
and max for the lower and upper limit in order to enable
recursion.
Initially the function is called with the plaintext x to be
encrypted, the root of the tree T , min = −1 and max =
2λlog2n. We create a new root, if none exists. If n is un-
known, it needs to be estimated. We denote this initial call
as Encrypt(x) leaving out the state S from our deﬁnition
of a frequency-hiding order-preserving encryption scheme
ΠF HOP E. Recall that according to [23] the probability of
rebalancing is negligible in n for uniform inputs, if λ > 6.4.
Furthermore, Kerschbaum and Schr¨opfer have shown that
for real-world, non-uniform inputs smaller λ are likely to
suﬃce [23].
An example of encryption is the plaintext sequence X =
1, 2, 1, 3 with min = −1 and max = 128. Then the ﬁrst
two plaintexts are deterministically y1 = 64 and y2 = 96,
respectively. The ciphertext for the third plaintext x3 = 1
is randomized, since it is a repeated plaintext. It could be
either y3 = 32 or y3 = 80 depending on the random coin.
The fourth ciphertext is deterministic y3 = 112.
The function RandomCoin draws uniformly distributed
random coins from a keyed pseudo-random function. We
now describe the decryption algorithm in the simpliﬁed data
structure in Algorithm 3. The idea is to simply traverse
the tree and ﬁnd the matching ciphertext. We will later
Algorithm 2 Encryption Encrypt
Input: x, t, min, max
Output: y
Algorithm 4 is an intuitive to understand version of the
rebalancing algorithm and more eﬃcient versions can be en-
gineered if needed.
State: Sorted binary tree T of nodes {t}
Initialization: T is empty
1. If x = t.plain, then coin =RandomCoin() ∈ {0, 1},
else coin = ⊥
2. If x > t.plain or coin = 1, then
Algorithm 4 Rebalancing the search tree Rebalance
Input: x, min, max
Output: y
State: Sorted binary tree T of nodes {t}
3a. If t.right 6=null, then
4. Return Encrypt(x, t.right, t.cipher, max)
1. Let X = {t.plain} ∪ {x}
2. Sort X in ascending order
3b. Else
5. If max − t.cipher
Rebalance(x,−1, n)
t.right
6. Insert
T ree (cid:0)x, t.cipher + (cid:6) max−t.cipher
t.right.cipher.
2
<
2,
then
return
=
new
(cid:7)(cid:1) and return
3c. EndIf
7. If x < t.plain or coin = 0, then
8a. If t.lef t 6=null, then
9. Return Encrypt(x, t.lef t, min, t.cipher)
8b. Else
10. If
t.cipher − min
<
Rebalance(x,−1, 2λlog2 n)
2,
then
return
11. Insert t.lef t = T ree(x, min + (cid:6) t.cipher−min
2
(cid:7) and
return t.lef t.cipher.
8c. EndIf
describe how to compress the data structure, such that not
all encrypted plaintexts have to be stored on the client. We
add the recursion input t in Algorithm 3 compared to our
formal deﬁnition. A decryption call Decrypt(x) forwards
to Decrypt(x, root(T )).
Algorithm 3 Decryption Decrypt
Input: y, t
Output: x
State: Sorted binary tree T of nodes {t}