As an example of how to write a Sulley specification, we provide a description
of the TLS protocol. TLS is commonly known as SSL and is most often used to
secure web traffic for e-commerce applications. This first snippet is the session code
named fuzz_tls.py (Figure 5.1):
Figure 5.2 shows the implementation of the requests. As a quick overview, the
TLS handshake protocol is as follows:
client_hello →
← server_hello_certificate
← server_key_exchange
client_key_exchange_change_cipher_finish →
← server_change_cipher_finish
6760 Book.indb 146 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 147
Figure 5.1 fuzz_tls.py.
Figure 5.2 The Sulley request for a TLS client hello message.
6760 Book.indb 147 12/22/17 10:50 AM
148 Building and Classifying Fuzzers
Figure 5.2 Continued
If it is desirable to fuzz the server, really only two messages (requests) are impor-
tant: the client_hello and the client_key_exchange. There could be others based on
specific implementations. Additionally, it might be wise to fuzz SSL clients (Web
browsers in many cases). The session file (called fuzz_tls.py) calls the two requests of
interest. Both of these requests (and the session file) had to be created from scratch.
Thus, you see the weakness of intelligent fuzzing: it requires understanding TLS,
being proficient with Sulley, and implementing specific requests. By contrast, setting
up ProxyFuzz (described later) would only take a few moments, but fewer bugs would
likely be found. Implementing the second request is left as an exercise to the reader.
5.2.2.2 Peach
Peach Fuzzer™ (Peach) is a model-based fuzzer framework that is available in two
editions: Peach Fuzzer Community Edition and Peach Fuzzer Professional Edition.
This section focuses on Peach Fuzzer Community Edition that is an open-source
6760 Book.indb 148 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 149
project and is available free of charge. Peach is available for Windows, Linux, and
OS X.
Peach is capable of both generation- and mutation-based fuzzing. To use Peach,
one has to create an XML file, a Peach Pit, that defines general configuration, data
model, state model, agents, and test configuration for fuzzing. Data models can
describe binary and typed data items, individual data items and arrays of data, and
relationships between data items. State modeling describes flows through a system
from data entering the test target to its exit. Agents describe one or more processes
that run locally or remote. These processes host one or more Monitors that are used
to detect undesired behavior from the target. Test configuration specifies a fuzzing
test that combines a StateModel with a Publisher and other configuration options
such as elements being mutated, Agents, and fuzzing strategies.
As an example of a Peach Pit file (Figure 5.3), we provide a fuzzing description
for a domain name system (DNS). DNS is used to translate domain names to their
IP addresses, and is core component of the functionality of the internet.
5.2.3 Using prebuilt protocol-Specific Fuzzers
A protocol-specific fuzzer can be engineered for any given protocol or application.
It takes effort (and a lot of RFC reading), but the reward is strong code coverage,
which will likely lead to more discovered bugs. Typically, protocol fuzzers are
developed for a particular protocol (SIP, HTTP, LDAP, etc.) and not a particu-
lar code base (OpenSSH, Apache, etc.). This makes them particularly useful for
baselining or performing cross-vendor auditing of particular implementations of
a given protocol. Automated result recording and reporting is ideal to mature the
testing process.
Much work has been done on protocol-specific, generation-based fuzzers. Spe-
cifically, the Oulu University Secure Programming Group (OUSPG) has created
a tool called the Mini-Simulation Toolkit (PROTOS).20 They used a context-free
grammar to represent the protocol (language) and build anomalous test cases. The
PROTOS project has been responsible for some widely publicized protocol vulner-
ability disclosures, including SNMP, LDAP, and SIP. For vendor evaluations of IP
applications, PROTOS has been good for creating a baseline tool: Specific implemen-
tations of a protocol that are found to have flaws don’t pass, and those that are bug
free pass the test. They admit that this approach is likely to have a pesticide effect:
Widespread use of the tool will result in vendors fixing the specific types of bugs
the tool is programmed to look for. Therefore, it will become less effective as the
tool is run and bugs are repaired; shared knowledge (code and techniques) becomes
more and more immune to the tool. But this will happen to every bug-finding tool
that doesn’t employ randomness or isn’t updated.
20 Rauli Kaksonen, “A Functional Method for Assessing Protocol Implementation Security,” Techni-
cal Research Centre of Finland, VTT Publications. www.ee.oulu.fi/research/ouspg/protos/ analysis/
WP2000-robustness.
6760 Book.indb 149 12/22/17 10:50 AM
150 Building and Classifying Fuzzers
Figure. 5.3 Peach Pit file for DNS fuzz test.
6760 Book.indb 150 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 151
5.2.3.1 ikefuzz
For a simple example of a home-grown protocol-specific fuzzer, consider ikefuzz.21
This tool was created a few years ago to test the ISAKMP protocol. The primary
reason for this is because IKE is loaded with cryptographic routines. This fuzzer
will test this specific protocol, but nothing else.
5.2.3.2 FTPfuzz
FTPfuzz22 is a protocol-specific fuzzer that is designed to fuzz FTP servers. It
understands the protocol and can actively talk to FTP servers and determine which
commands it accepts. It is managed by a Windows GUI application, which makes
it particularly friendly to use. Furthermore, the heuristics used can be selected by
the user from within the GUI interface.
5.2.4 Generic Fuzzers
A generic fuzzer is one that can be utilized to test multiple interfaces or applica-
tions. For example, a file fuzzer that flips bits in any file type might be thought of
as generic, since it can flip bits in arbitrary file types to be consumed by a variety
of applications. However, such a fuzzer would be nonintelligent because it blindly
makes changes with no knowledge of the underlying files structure. A file fuzzer
might still be generic and receive as an initialization parameter a partial or full
description of the file type to be fuzzed; this would increase its intelligence. The file
fuzzer would be a one-off or protocol-specific tool if it can only fuzz files of one type.
5.2.4.1 ProxyFuzz
An example of a generic fuzzer is ProxyFuzz.23 This fuzzer, written in Python, acts
as a man in the middle proxy and randomly makes changes to packets as they pass
through it. It doesn’t understand anything about the underlying protocol, it is com-
pletely unintelligent. It can be used to fuzz the server side of the communication, the
client side, or both. It can also handle either TCP or UDP data. The advantage of
using a simple fuzzer like ProxyFuzz is that it can be set up in a matter of minutes
and can find bugs. Obviously, it will not perform well against protocols that utilize
checksums, encryption, or challenge responses. The command line usage statement
reveals exactly how simple this fuzzer actual is. It looks like
python proxyfuzz -l  -r  -p  [options]
[options]
-c: Fuzz only client side (both otherwise)
-s: Fuzz only server side (both otherwise)
-w: Number of requests to send before start fuzzing
21 Can be downloaded from www.vdalabs.com/resources.
22 https://code.google.com/p/ftpfuzz/.
23 http://www.secforce.com/blog/tag/proxyfuzz/.
6760 Book.indb 151 12/22/17 10:50 AM
152 Building and Classifying Fuzzers
-u: UDP protocol (otherwise TCP is used)
-v: Verbose (outputs network traffic)
-h: Help page
5.2.4.2 FileFuzz
FileFuzz24 is a graphical Windows-based fuzzer written by Michael Sutton when
he worked for iDefense Labs. The GUI allows for the creation of fuzzed files and
a way to execute and monitor the application. During the creation phase, portions
of the initial valid file can be provided and the types of changes to those bytes can
be specified. For example, all bytes, one group at a time, in a file can quickly be
replaced with the value 0xFF. Then, these files are launched in a specified application
as the command line argument. Additionally, FileFuzz comes with a monitoring tool
called crashme.exe. When FileFuzz actually launches the application, it launches it
by first calling crashme, which attaches to the target as a debugger and monitors it
for faults. The GUI displays the progress as each fuzzed file is launched, recording
any crashes that it discovers. A newer version of a tool like this has been created
by Microsoft: miniFuzz.25
5.2.5 Capture-replay
Most mutation or capture-replay fuzzers are generic. They operate by obtaining a
known good communication (a file, network sniff, typical arguments to a function,
etc), modifying it, and repeatedly delivering it to the target. The goal is to quickly
fuzz a new or unknown protocol; the capture provides a sort of partial interface
definition. One good thing about this approach is that if the protocol doesn’t oper-
ate in a manner consistent with the RFC, it is not a problem for mutation based
fuzzers since they don’t understand the RFC. If the capture includes this undocu-
mented capability, a mutation-based fuzzer will fuzz it, while a generation-based
fuzzer might miss the undocumented feature since it is built from the specification.
As in generic fuzzers, many mutation fuzzers can be tuned to a particular protocol,
increasing its protocol awareness and consequent code coverage. Mutation fuzzers
that record results during run-time will mature the testing process.
5.2.5.1 Autodafé
One generic capture-replay tool is known as Autodafé. Autodafé employs grey-box
techniques. The tool was created by Martin Vuagnoux26 and can be downloaded
from http://autodafe.sourceforge.net/. Helpful tutorials can also be found at this
URL. Autodafé includes automatic protocol detection with manual updating avail-
able, a large list of attack strings, and an incorporated debugger to dynamically place
weights on areas of target code that utilize external data in dangerous functions.
24 http://packetstormsecurity.com/files/39626/FileFuzz.zip.html.
25 http://www.microsoft.com/en-us/download/details.aspx?id=21769.
26 Martin Vuagnoux, “Autodafé: an Act of Software Torture,” 22nd Chaos Communication Con-
gress, Dec. 2005 (http://events.ccc.de/congress/2005/fahrplan/events/606.en.html). http://autodafe
.sourceforge.net.
6760 Book.indb 152 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 153
Multiplying the number of attack strings by the number of variables to fuzz yields the
complexity. By minimizing and ordering the tests, the overall runtime is decreased.
In the fuzzing field, Vuagnoux is probably the first to calculate such a metric, even
though it is relatively simple. There is an excellent tutorial online at http://autodafe.
sourceforge.net/tutorial/index.html, which we highly recommend you examine if
you’re considering fuzzing Unix applications.
5.2.5.2 The Art of Fuzzing
The Art of Fuzzing (TAOF27) is a fuzzer that builds upon the work of many others.
This tool operates by capturing a proxied session and replaying with mutated traf-
fic. TAOF is a GUI cross-platform Python generic network protocol fuzzer. It has
been designed for minimizing setup time during fuzzing sessions, and it is especially
useful for fast testing of proprietary or undocumented protocols.28, 27 Here are some
self-explanatory screen shots from the Website (Figures 5.4 to 5.8):
TAOF allows the user to decompose the captured packets according to the pro-
tocol specification. In this way TAOF can more intelligently add anomalies to the
captured exchange and hopefully find more bugs.
5.2.5.3 Ioctlizer
Ioctlizer29 is a two-part tool, written by Justin Seitz, which learns how a user mode
process utilizes IOCTLs to communicate with device drivers. From the test cases
that are trapped, it will fuzz the actual device. As a quick overview, an IOCTL (pro-
nounced i-oc-tel), is part of the user-to-kernel interface of a conventional operating
system. Short for input/output control, IOCTLs are typically employed to allow
user space code to communicate with hardware devices through kernel drivers.
Ioctlizer is a generic IOCTL mutation (capture-replay) tool. As such, it suf-
fers and excels in the same way that all capture-replay tools do. This is also an
example of a one-off, because it was a quick tool designed only to fuzz IOCTLs.
Mr. Seitz created a more advanced tool that will enumerate all of the IOCTLs IDs
via an Immunity Debugger plug-in. Figures 5.9 to 5.14 show an example of how
one might use this tool:
In this case, the Windows calculator application (calc.exe) did not access an
IOCTL. The wireshark program did, but no errors were found. This is likely due
to three things:
1. There are no bugs to be found (probably not the case here).
2. Ten iterations were not enough to find the bug.
3. Wireshark did not access all possible IOCTLs in the limited amount of time
observed (most likely).
Thus, we see the primary weakness of mutation based systems in action here.
27 http://sourceforge.net/projects/taof.
28 www.theartoffuzzing.com/joomla/index.php?option=com_content&task=view&id=16&Itemid= 35.
29 http://code.google.com/p/ioctlizer/.
6760 Book.indb 153 12/22/17 10:50 AM
154 Building and Classifying Fuzzers
Figure 5.4 Setting fuzzing points.
Figure 5.5 Starting fuzzing session.
6760 Book.indb 154 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 155
Figure 5.6 Adding fuzzing points.
6760 Book.indb 155 12/22/17 10:50 AM
156 Building and Classifying Fuzzers
Figure 5.7 TAOF shows a list of retrieved requests.
Figure 5.8 Network forwarding settings for data retrieval.
6760 Book.indb 156 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 157
Figure 5.9 Choosing the application to fuzz.
Figure 5.10 Output from ioctltrap.py.
Figure 5.11 This happens when no valid IOCTL calls were observed
Figure 5.12 Trapped IOCTLs observed by the wireshark application.
6760 Book.indb 157 12/22/17 10:50 AM
158 Building and Classifying Fuzzers
Figure 5.13 Preparing to fuzz the wireshark IOCTLs.
Figure 5.14 Finished auditing the wireshark IOCTLs.
6760 Book.indb 158 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 159
5.2.5.4 The General Purpose Fuzzer
Another open-source generic mutation tool for download is called the General
Purpose Fuzzer (GPF) written by Jared DeMott. The typical use is performed in
the following manner:
1. Capture the network traffic to be fuzzed.
a. Be sure to save only the traffic you want by using an ethereal or wire-
shark filter.
b. Typically, this capture will be converted from the pcap format to the .gpf
format via a command like: ./GPF –C imap.cap imap.gpf
c. Optionally, a .gpf “capture” file can easily be defined by hand. For exam-
ple, the file prelogin.gpf in the directory /GPF/bin/imap was created
entirely by hand and was useful for finding (prelogin imap) bugs. The
file looks like:
Source:S Size:0021 Data:* OK Dovecot ready.
Source:C Size:0020 Data:02 LOGIN jared {5}
Source:S Size:0005 Data:02
Source:C Size:0007 Data:jared
Source:S Size:0005 Data:02
Source:C Size:0015 Data:03 CAPABILITY
Source:S Size:0005 Data:02
Source:C Size:0023 Data:04 AUTHENTICATE PLAIN
Source:S Size:0004 Data:+
Source:C Size:0026 Data:amFykjdAamFyZWQAamFyZWQ=
Source:S Size:0018 Data:04 OK Logged in.
Source:C Size:0030 Data:05 NOOP
04 LOGIN jared jared
Source:S Size:0005 Data:05
Source:C Size:0022 Data:06 LOGIN jared jared
Source:S Size:0005 Data:06
Source:C Size:0013 Data:07 STARTTLS
Source:S Size:0005 Data:07
Source:C Size:0011 Data:08 LOGOUT
The Source indicates which direction this communication originated
from—S is server and C is client. At fuzz time these can easily be flipped by
running GPF in the opposite mode than the capture was originally made.
It will then send “02 LOGIN jared {5},” and so on. The Size indicates the
amount of data. This allows for binary data to also be easily represented
in a .gpf file. Everything of Size length following the Data tag is the data
for this leg. A leg is one read or write communication of an entire session.
2. Choose an attack type.
a. The –R simply sends random data to an IP/PORT. This is only good
for fuzzing the first layer of a protocol. It’s very naive/dumb, but has
found bugs.
6760 Book.indb 159 12/22/17 10:50 AM
160 Building and Classifying Fuzzers
b. The original GPF mode has four submodes: replay, buffer overflow, for-
mat, and logic. Replay will simply replay the capture. This is useful for
demonstrating an already discovered bug, or for validating a capture. The
buffer overflow submode inserts long strings at places of your choosing,
and the format attack mode inserts format string characters (such as %n)
in a similar manner. The logic mode is focused on bit flipping
c. The –P or pattern matching mode is the most popular GPF mode. It
automates the best of the above attack types. Each time the capture is
replayed, attacks of all types are inserted in random positions based on