或者数据库连接不上了，业务提示无法连接该怎么办；这些看起来好像没有太大的关系
人问你，MySQL数据库响应慢了，该怎么办；如果数据库服务器CPU100%了该怎么办;
每个房间里存放的才是真正的“数据”。
于每个房间来说，有主卧，次卧，客厅，卫生间等，这些房间就可以理解为一个行（Row)，
层都好比是一个区（extent），每一层楼里有好几个房间，可以理解为一个页（Page)，对
空间，而一栋居民楼就好比是一个段（segment）的角色，每一栋楼都分为很多层，每一
层面。比如一个居民小区，里面可能有好多栋大楼，这个居民小区就可以理解为一个表
单位存储，每一行会分为多个更细粒度的单元（比如字段），存储最小单元是页，即16k
在 MySQL中，对于性能问题诊断，最开始的时候总是感觉有些束手无策，如果一个
可以换一个角度来理解存储结构，不管数据逻辑的关系如何，它都需要映射到存储
通过上面的小结，可以对 MySQL 文件有一个整体的认识，但是还是比较粗粒度的，
慢日志诊断
从例子来理解 MySQL 存储结构
Non-leaf node segment
Field1Field2
Leaf node segment
Tablespace
Rollback segment
Fieldpointers
Roll pointer
Trx id
Row
Fieldn
RowRow
Row
Row
图2-3
Extent
Extent
Row Row
Page
Segment
Row
Extent
Extent
an extent=64pages
"Exten
---
## Page 55
（有个参数 log_queries_not_using_indexes）。
比如执行时间的问题，超过阈值就会记录；全表扫描的问题，如果没有走索引也会记录
时间长、全表扫描、资源使用率高等几个维度，这几个维度，慢日志可以涵盖大多数，
理论支撑，只追求短平快，但是细细想来也是合理有效。SQL性能问题无非体现在执行
通过慢日志去查看，查看的标准就是SQL的执行性能差一些。这个维度看起来有些缺少
非就是解决存在的、潜在的性能问题，如果问题没有发生，那就是潜在问题，我们只能
两个维度的工作，但是都指向了同一个终点，那就是性能优化。看慢日志的最终目的无
们参考，或者DBA是否也希望做一些慢日志的分析（无论是在线还是离线）。这其实是
了现在的cloud(12c、18c、19c...)。
本迭代的过程，9i想当年也是一个很经典的版本，也是风尘仆仆的迈过了 10g和 1lg，到
sys schema 就是一个好的开始，等待事件也补充起来了。这让我看到了一个 Oracle 9i 版
典的3A 工具（AWR、ASH、ADDM)，看起来和 MySQL 不搭边，所幸的是 MySQL 的
实就是慢日志了，你想想到了这个时候，你还能够参考什么呢。
就是随用随开，用完即关，因为大多数情况下通用日志量都太大了。那么我们的选择其
现在通用日志或者慢日志层面。在极少数的情况下，我们才可能会去用通用日志，基本
这是一种后知后觉的处理方式。
能问题的时候，错误日志的粒度是无法探测到根因的，我们通过日志看不到主要的错误，
有资源问题，但是无法告诉你更多信息。
能看到的 MySQL 层面的信息就很有限了，所以系统层面的日志只能告诉你 MySQL 层面
们看到的连接是在线程层面的。所以除了看到一个mysqld的进程CPU100%之外，我们
我提两个问题大家思考一下：是不是开发同学很多时候都希望DBA提供慢日志供他
把利器。慢日志层面分析好了，我们的工作现状就会大大改善。
MySQL 在短时间内不会出现经典的 3A工具，但是慢日志就是我们改善 DBA 现状的
在Oracle里面有一个性能诊断模型是OWI，是基于等待事件所做的分析，里面有经
那么我们分析问题的一个必然之路就是MySQL层面提供的明细信息了，这个可以体
那么来看 MySQL 的错误日志，这个错误日志的信息也是有限，如果出现了 SQL 性
(6） pt-query-digest:基于 perl
(2）mysqlsla:基于 perl 
(1） mysqldumpslow
慢日志的分析工具有多少呢，简单来说有以下几个：
在系统层面，其实所能做的工作实在有限，因为MySQL 是单进程多线程的架构，我
(5）mysql-log-filter：基于python和 php
（3）myprofi：基于 php
第2章理解MySQL体系结构|33
---
## Page 56
34丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
localhost
过千，已经能够说明其有一定的影响力了，如下图2-4所示。
如果看下 pt-query-digest 的结果，就会看到专业的输出，如图 2-5 所示。
select *from test
Count: 2 Time=0.00s (0s) Lock=0.00s (0s) Rows=3.0 (6), root[root]@localhost
select
Count:1 Time=0.00s (0s) Lock=0.00s (0s) Rows=586.0 (586),root[root]@
Reading mysql slow query log from
mysqlslowlog 得到的结果如下：
· select *from test;执行 2次;
其中mysqldumpslow是原生的，其他的都是第三方的，还有第三方的平台，比如开
其实是有些简陋的。
●select *from cmdb_server;执行1次。
我执行了3条SQL：
我们来简单看一下慢日志的一个演化方案。
当然还有很多基于ES 的方案，不再一一讲述。
0X0187225000391.4%
oCk
exec
*from cmdb_server
size
Watch
ne
pct
tota
131
★Unstar
218-084ey
图2-5
图2-4
/data/mysql/dev01-slow.1og
1,092
avg
avg
Fork261
95%
Item
stddev median
median
1846
---
## Page 57
参数（图2-6）。
不是一个好的方法，有些简单暴力，有没有更好的方案呢，我们再来看看慢日志相关的
不少的空间，但是数据库层面还是写入不了数据。
的方式却不奏效，看起来是文件的句柄没有正确释放，在这种情况下，系统虽然释放了
为后续的分析所用，然后清理了这个日志文件。
MySQL 服务已经写入不了数据了，如下：
device)
以提供给大家作参考。
的信息，例如：
我们用哲学的方式来考虑：存在即合理，那么我们对于每一套SQL可以下钻出更多维度
的定位瓶颈SQL，报告后面是每一条SQL 的详细信息。
快速定位问题方向。
间（Exec time），锁定时间（Lock time）等指标可以快速地得到整个慢日志的概览信息，
心的概念就是response time，里面的很多概念都会基于时间维度来进行统计，比如执行时
除了有合适的工具外，我们还需要了解 pt工具解析的报告格式，整个报告里面有个很核
理方式不够专业，导致很多时候没有把慢日志的效果发挥出来。对于慢日志的报告解读
，这种情况该怎么做，释放句柄最好的一种方式就是重启，
问题的起因就是收到同事提醒，根据监控报警提示，磁盘空间满了。上面有一个
而对于慢日志的 Profile 部分，我更愿意称它为排行榜，通过这个榜单我们可以快速
系统层面是清理了文件，空间也可以通过 du 的方式看到是释放了，但是使用 df -h
作为DBA，我们不仅是要做这些信息的解析，还需要做更多的性能问题诊断，比如
当时也是为了尽快地释放慢日志文件的空间，所以先选择导出部分日志到本地，作
-rw-r----- 1 mysql mysql 302365433856 Nov 7 07:55 slowquery.1og
碰到这类问题，首先想到的就是查看分区下最大的文件。
ERROR 14 (HY000):Can't
>>create table test(id int);
有一台预上线的服务器最近在做压力测试，引发了一系列的相关问题，排查思路可
（2）考虑同比环比的信息，让SQL的信息更具有参考性。
（1）在不同时间范围内的性能信息。
对于慢日志的报告解读，之前和开发同学做过一些沟通，发现大家对于慢日志的处
当我切换到日志目录的时候，我发现慢日志文件竟然有如下这么大，都是百G级别。
案例 2-1：MySQL日志故障的处理和分析
: change size of file (Errcode: 28 - No space left on
，但是在当时而言，显然这
第2章理解MySQL体系结构|35
---
## Page 58
36丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
plugin 要好很多，推荐使用。
从性价比来说，这个插件的控制粒度还算比较粗，如果从控制的粒度来说，MariaDB Audit
审计日志出了问题，
数据字典表存在大量的查询请求，添加了索引之后，该问题得到了有效控制。
重启开启。
前面已经讲过，审计插件有几类比较流行的，这里用到的是 Percona audit plugin,其实
/dev/mapper/data-main
/dev/sda3
Filesystem
$df -h 
谁知好景不长，
# df -hFilesystem
>set global
>set global slow_query_log=off;
想明白了，操作就很简单了。
/dev/sda1
tmpfs
/dev/mapper/data-main
/dev/sda3
很明显，
这里我们可用的一个直接方式就是先关闭慢日志，达到释放句柄的目的，然后再次
>show variables like ’%slow%
S
S
log_s
log_slow_admin_statements
Variable_name
og_s
ow_query_
low_query_l
磁盘空间释放了不少；
ow_query_
slow_rate_
slow_query_log=on;
如下：
又收到报警说磁盘空间又满了，
log_use_global_control
log_file
log_always_write_time
717G 609G
717G 400G281G 59%/data
limit
190M
25G
Size
190M
25G
G
G
5.5G
 Used Avail
12K
5.5G
78M
 Size Used Avail Use% Mounted on
对于慢日志的问题进行分析，可以看到其中有一个
72G90%/data
103M
31G
31G
18G
图2-6
18G
/data/mysql_4350/1og/slowquery.1og
10.000000
OFF
Value
OFF
44%/boot
Use% Mounted on
44%/boot
1%
24%
/dev/shm
这次排除了慢日志的影响，发现是
---
## Page 59
如图2-8。
而且这个测试还在进行中，为了避免不必要的解释和麻烦，我们也是不能重启数据库的，
些未释放的句柄，比如通过 Isof来查看（图 2-7)。
没有生效，这时可供选择的方案就很少了，
我们删除了600G 的审计日志文件。
但是这里有一个参数引起了我的注意，那就是 audit_log_flush，有点类似于 MySQL
很明显这个进程就是 MySQL 服务的进程号，如果直接kill MySQL 实在是太暴力了，
这里可选的操作是修改审计日志的策略，比如从ALL 修改为NONE，但是这种方式
>show variables like'%audit';
打开审计日志的参数选项，如下：
18 rows in set(0.01 sec)
审计日志有差不多600G，
audit_log_syslog_priority
audit_log_syslog_facility
Variable_name
audit
audit
audit_log_rotate_on_size
audit
audit
audit_log_include_commands
audit
audit_log_format
audit_log_f
audit
audit_log_exclude_accounts
audit_log_buffer_size
mysqid
mysqld
mysqld
mysqld
87186
log
log_
log_
1og
Log
bot
mysql
mysql
mysql
strategy
include_databases
include_accounts
flush
file
exclude_databases
01
(1]
bu
ident
，在这种高压测试之下，量级还是很大的，为了缓解问题，
5uREG253,026946
85458956
Value
ASYNCHRONOUS
ALL
FILE
OLD
OFF
audit.1og
0/data/mysql
1048576
grep3218
图2-7
/data/mysq
LOG_INFO
percona-audit
LOG_USER
0
图
，如果要释放句柄，我们可以简单先看看有哪
2-8
85458954/data/mysql_4350/tmp/ib6i518w（deleted)
4350
一
/ibhdSF1K
/ibUZDal0
/ibzgbLJz
(deleted)
ted
第2章理解MySQL 体系结构|37
---