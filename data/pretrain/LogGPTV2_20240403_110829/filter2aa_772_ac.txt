  elseif (string.byte)(f, 20) ~= dict[9] + 8 then -- m
    return false
  elseif (string.byte)(f, 21) ~= ad(100, 22) then -- z
    return false
  elseif (string.byte)(f, 22) ~= 55 then -- 7
    return false
  elseif (string.byte)(f, 23) ~= mul(51, 2) then -- f
    return false
  elseif (string.byte)(f, 24) - 1 ~= 108 then -- m
    return false
  elseif (string.byte)(f, 25) ~= 48 then -- 0
    return false
  elseif (string.byte)(f, 26) ~= 100 then -- d
    return false
  elseif (string.byte)(f, 27) ~= 102 then -- f
    return false
  elseif (string.byte)(f, 28) ~= 120 then -- x
发现对函数 0x00000000004D5DC0 下断，⾛到 0x00000000004D5E5E 时输⼊会出现在寄存器中，尝试对输⼊的字
符串未知部分下硬件断点。
通过⼀个拷⻉后对拷⻉值再下硬件断点。
最后发现在 0x00000000004E8DFE 处被使⽤。
这个函数的开头在stack中放⼊了⼀个字符串：
    return false
  end
  do return true end
  -- DECOMPILER ERROR: 22 unprocessed JMP targets
end
check3 = function(f)
  -- function num : 0_3 , upvalues : _ENV
  if (string.byte)(f, 1) ~= 66 then -- B
    return false
  elseif (string.byte)(f, 2) ~= 121 then -- y
    return false
  elseif (string.byte)(f, 3) ~= 116 then -- t
    return false
  elseif (string.byte)(f, 4) ~= 101 then -- e
    return false
  elseif (string.byte)(f, 5) ~= 67 then -- C
    return false
  elseif (string.byte)(f, 6) ~= 84 then -- T
    return false
  elseif (string.byte)(f, 7) ~= 70 then -- F
    return false
  elseif (string.byte)(f, 8) ~= 123 then -- {
    return false
  elseif (string.byte)(f, 29) ~= 125 then -- }
    return false
  end
  do return true end
  -- DECOMPILER ERROR: 18 unprocessed JMP targets
end
local flag1 = _(flag)
local flag2 = check2(flag)
local flag3 = check3(flag)
if not not flag1 or flag2 or flag3 then
  print("flag is right")
elseif true then
  print("flag is wrong")
end
之后理解⼀下判断逻辑：
解密如下，得到 1golcwm6q
从⽽得到最终flag： ByteCTF{1golcwm6q_ymz7fm0dfx}
.text:00000000004E8DA2 050                 mov     rcx, 39637A6F67656E39h
.text:00000000004E8DAC 050                 mov     [rsp+50h+var_32], rcx
.text:00000000004E8DB1 050                 mov     [rsp+50h+var_2A], 6A61h
.text:00000000004E8DDB 050                 mov     ecx, 8
.text:00000000004E8DE0 050                 mov     edx, 1
.text:00000000004E8DE5 050                 jmp     short loc_4E8DEA
.text:00000000004E8DE7     ; ----------------------------------------------------------
-----------------
.text:00000000004E8DE7
.text:00000000004E8DE7     loc_4E8DE7:                             ; CODE XREF: 
AXjIVygOebTSlrNJffL+83↓j
.text:00000000004E8DE7                                             ; 
AXjIVygOebTSlrNJffL+87↓j
.text:00000000004E8DE7 050                 inc     rcx
.text:00000000004E8DEA
.text:00000000004E8DEA     loc_4E8DEA:                             ; CODE XREF: 
AXjIVygOebTSlrNJffL+65↑j
.text:00000000004E8DEA 050                 cmp     rcx, 11h
.text:00000000004E8DEE 050                 jge     short loc_4E8E09
.text:00000000004E8DF0 050                 movzx   esi, [rsp+rcx+50h+var_3A]
.text:00000000004E8DF5 050                 cmp     rbx, rcx
.text:00000000004E8DF8 050                 jbe     short loc_4E8E2D
.text:00000000004E8DFA 050                 movzx   edi, byte ptr [rax+rcx]
.text:00000000004E8DFE 050                 xor     edi, ecx
.text:00000000004E8E00 050                 cmp     sil, dil
.text:00000000004E8E03 050                 jz      short loc_4E8DE7
.text:00000000004E8E05 050                 xor     edx, edx
.text:00000000004E8E07 050                 jmp     short loc_4E8DE7
a=bytearray(b'9negozc9a')
ans2=bytearray()
for i in range(len(a)):
    c = a[i]
    ans2.append(c^(8+i))
print(ans2)
moderncpp
c++ 逆向
1.输⼊ flag 变换
⼆进制映射，对应关系爆破提取⼀下就⾏
2.tea，位于 4024A4 内调⽤
tea 密钥[0x6F6D657E, 0x77656C63, 0x2D637466, 0x62797465]
{'b': '00001', 'y': '10011', 't': '11000', 'e': '0011010', 'c': '01110', 'f': '010010', 
'{': '10001', '0': '1110010', '1': '100100', '2': '111111', '3': '01101', '4': '11010', 
'5': '11110111', '6': '001100', '7': '111010', '8': '00111', '9': '10101', 'a': '100101', 
'd': '11011', 'g': '111011', 'h': '01000', 'i': '10110', 'j': '00110111', 'k': '1111010', 
'l': '110010', 'm': '00011', 'n': '10000', 'o': '10100011101', 'p': '0110011', 'q': 
'011000', 'r': '111110', 's': '01011', 'u': '11110110', 'v': '000001', '}': '1010001111', 
'w': '111000', 'x': '00101', 'z': '101000110', '_': '01010', '(': '010011', ')': '111100', 
'#': '101001', '@': '1110011', '!': '00110110', '%': '00010', '^': '01111', '&': 
'10100011100', '*': '0110010', '-': '10100010', '=': '000000', '+': '10111', ';': 
'1010000'}
脚本
# bytectf{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}
# H4ckingT0Th3Gate
# 00001
# 1011 0x74 -> 1101
# 11000 , 000011 -> 11000
# 001101,        -> 001101
# 01110, 0000110011110000011010 -> 01110
# 00001, 
# bytectf{66AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}
# bytectf{6qq66666666666666666666666666666}
# 6qq6byte666666666666666666666666666666666
# 00001 10011 11000 001101 01110
# 00001 10011 11000 001101 01110
# 00001100 -> 00001100
# 11110000 -> 11110000
# 0CF069D84A2618618618618618618618618618618618618618618618619478
# 00001 b
# 10011 y
# 11000 t
# 001101 e
# 01110 c
# 11000 t
# 010010 f
# 10001 {
# 001100 6
# 011000 q
# 011000 q
# 001100 6
# 001100 6
# bytectf{0123456789abcdefghijklmnopqrstuv}
# bytectf{wxyz0000000000000000000000000000}
# bytectf{wxyz000000000000000000000000000_}
# bytectf{wxyz000000000000000000000000000(}
# bytectf{wxyz000000000000000000000000000)}
# bytectf{wxyz000000000000000000000000000~}
# bytectf{wxyz000000000000000000000000000~}
import ctypes
from pwn import *
import binascii
def tea_enc(data):
    key = [0x6F6D657E, 0x77656C63, 0x2D637466, 0x62797465]
    delta = 0x9E3779B9
    enc_data = b''
    for i in range(len(data) // 8):
        part_data = data[8 * i: 8 * (i + 1)]
        val1 = ctypes.c_uint32(u32(part_data[0:4]))
        val2 = ctypes.c_uint32(u32(part_data[4:8]))
        sum = ctypes.c_uint32(0)
        for n in range(32):
            sum.value += delta
            val1.value += (val2.value + sum.value) ^ (16 * val2.value + key[3]) ^ 
((val2.value >> 5) + key[2])
            val2.value += (val1.value + sum.value) ^ (16 * val1.value + key[1]) ^ 
((val1.value >> 5) + key[0])
        enc_data += p32(val1.value)
        enc_data += p32(val2.value)
    return enc_data
def tea_dec(data):
    key = [0x6F6D657E, 0x77656C63, 0x2D637466, 0x62797465]
    delta = 0x9E3779B9
    enc_data = b''
    for i in range(len(data) // 8):
        part_data = data[8 * i: 8 * (i + 1)]
        val1 = ctypes.c_uint32(u32(part_data[0:4]))
        val2 = ctypes.c_uint32(u32(part_data[4:8]))
        sum = ctypes.c_uint32(0xc6ef3720)
        for n in range(32):
            val2.value -= (val1.value + sum.value) ^ (16 * val1.value + key[1]) ^ 
((val1.value >> 5) + key[0])
            val1.value -= (val2.value + sum.value) ^ (16 * val2.value + key[3]) ^ 
((val2.value >> 5) + key[2])
            sum.value -= delta
        enc_data += p32(val1.value)
        enc_data += p32(val2.value)
    return enc_data
r = 
tea_enc(binascii.a2b_hex("0CF069D84A261861861861861861861861861861861861861861861861947
800"))
print("enc:", binascii.b2a_hex(r))
rr = tea_dec(r)
print(binascii.b2a_hex(rr))
# 9F66D3C51A1717B9197BB3B45F0CE80A7F30808D802852218905D834D1836CDE
r = 
tea_dec(binascii.a2b_hex("9F66D3C51A1717B9197BB3B45F0CE80A7F30808D802852218905D834D1836
CDE1836B759355DE6C6"))
t1 = 'bytectf{0123456789abcdefghijklmnopqrstuv}'
d1="""00001
10011
11000
0011010
01110
11000
010010
10001
1110010
100100
111111
01101
11010
11110111
001100
111010
00111
10101
100101
00001
01110
11011
0011010
010010
111011
01000
10110
00110111
1111010
110010
00011
10000
10100011101
0110011
011000
111110
01011
11000
11110110
000001
1010001111"""
t2="bytectf{wxyz0000000000000000000000000000}"
d2 = """00001
10011
11000
0011010
01110
11000
010010
10001
111000
00101
10011
101000110
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010
1110010