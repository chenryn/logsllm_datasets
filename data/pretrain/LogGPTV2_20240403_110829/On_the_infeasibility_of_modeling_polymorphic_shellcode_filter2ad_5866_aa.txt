title:On the infeasibility of modeling polymorphic shellcode
author:Yingbo Song and
Michael E. Locasto and
Angelos Stavrou and
Angelos D. Keromytis and
Salvatore J. Stolfo
On the Infeasibility of Modeling Polymorphic Shellcode (cid:3)
Yingbo Song
Dept. of Computer Science
PI:EMAIL
Columbia University
Michael E. Locasto
Columbia University
Dept. of Computer Science
PI:EMAIL
Angelos Stavrou
Columbia University
Dept. of Computer Science
PI:EMAIL
Angelos D. Keromytis
Dept. of Computer Science
PI:EMAIL
Columbia University
Salvatore J. Stolfo
Columbia University
Dept. of Computer Science
PI:EMAIL
ABSTRACT
Polymorphic malcode remains a troubling threat. The ability for
malcode to automatically transform into semantically equivalent
variants frustrates attempts to rapidly construct a single, simple,
easily veri(cid:2)able representation. We present a quantitative analy-
sis of the strengths and limitations of shellcode polymorphism and
consider its impact on current intrusion detection practice.
We focus on the nature of shellcode decoding routines. The em-
pirical evidence we gather helps show that modeling the class of
self(cid:150)modifying code is likely intractable by known methods, in-
cluding both statistical constructs and string signatures. In addi-
tion, we develop and present measures that provide insight into the
capabilities, strengths, and weaknesses of polymorphic engines. In
order to explore countermeasures to future polymorphic threats, we
show how to improve polymorphic techniques and create a proof-
of-concept engine expressing these improvements.
Our results indicate that the class of polymorphic behavior is
too greatly spread and varied to model effectively. Our analysis
also supplies a novel way to understand the limitations of current
signature(cid:150)based techniques. We conclude that modeling normal
content is ultimately a more promising defense mechanism than
modeling malicious or abnormal content.
Categories and Subject Descriptors
H.1.1 [Models and Principles]: Systems and Information The-
ory(cid:151)Value of Information
(cid:3)This material is based on research sponsored by the Air Force
Research Laboratory under agreement number FA8750-06-2-0221,
Army Research Of(cid:2)ce contract number W911NF0610151, and by
NSF Grant 06-27473, with additional support from Google. The
U.S. Government is authorized to reproduce and distribute reprints
for Governmental purposes notwithstanding any copyright notation
thereon.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for pro(cid:2)t or commercial advantage and that copies
bear this notice and the full citation on the (cid:2)rst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speci(cid:2)c
permission and/or a fee.
CCS'07, October 29-November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010...$5.00.
General Terms
Experimentation, Measurement, Security
Keywords
polymorphism, shellcode, signature generation, statistical models
1.
INTRODUCTION
Code injection attacks have traditionally received a great deal of
attention from both security researchers and the blackhat commu-
nity [1, 14], and researchers have proposed a variety of defenses,
from arti(cid:2)cial diversity of the address space [5] or instruction set
[20, 4] to compiler-added integrity checking of the stack [10, 15]
or heap variables [34] and (cid:147)safer(cid:148) versions of library functions [3].
Other systems explore the use of tainted data(cid:3)ow analysis to pre-
vent the use of untrusted network or (cid:2)le input [9, 29] as part of
the instruction stream. Finally, a large number of schemes propose
capturing a representation of the exploit to create a signature for
use in detecting and (cid:2)ltering future versions of the attack. Signa-
ture generation methods are based on a number of content mod-
eling strategies, including simple string(cid:150)based signature matching
techniques like those used in Snort [36]. Many signature genera-
tion schemes focus on relatively simple detection heuristics, such
as traf(cid:2)c characteristics [35, 22] (e.g., frequency of various packet
types) or identi(cid:2)cation of the NOP sled [38], while others derive
a signature from the actual exploit code [24, 43, 25] or statistical
measures of packet content [41, 40, 28], including content captured
by honeypots [44].
This paper presents a study of the ef(cid:2)cacy of contemporary poly-
morphism techniques, as well as methods to combine and improve
them. Our analysis focuses on what we consider the most con-
strained section of malcode, the decoder portion. Since this section
of a malcode sample or exploit instance must contain executable
code, it cannot easily be disguised (unlike most other parts of a
malcode sample, except, perhaps, the higher order bits of the re-
turn address section).
We derive our motivation from the challenge of modeling this
particular type of malcode data. We wondered whether, given un-
limited samples of polymorphic code, it is possible to compute and
store a set of signatures or a statistical model that could represent
this class of code. If so, how costly would such a task be in terms of
memory and processing time? In the span of the n-byte space that
these samples of code populate, how much overlap is there with the
class of benign network traf(cid:2)c? Unlike current research on poly-
541morphic engines [17], our work focuses on the general class of code
that performs decryption independent of the payload. Although
other research focuses on determining if an arbitrary sequence of
bytes represents executable malcode (either by employing content
anomaly detection or detecting streams of executable code in net-
work traf(cid:2)c), our objective is quite different: we aim to determine
if malcode itself has any distinguishing features that might support
the construction and use of exploit signatures or statistical models.
1.1 Shellcode Background
Aleph0ne (cid:2)rst illustrated the basics of smashing the stack [1].
The virus writer Dark Avenger’s Mutation Engine in(cid:3)uenced the
shellcoder K2 to develop shellcode polymorphism [19]. rix then
proceeds to show how to perform alphanumeric encoding [32], Ob-
scue described how to encode shellcode to make it survive ASCII to
unicode transformations [30], the CLET team developed the tech-
nique of spectrum spoo(cid:2)ng and implemented a recursive NOP sled
[13] and most recently the Metasploit project combined vulnerabil-
ity probing, code injection, and polymorphism (among other fea-
tures) into one complete system [26].
While injected malcode can follow a wide variety of internal ar-
rangements in order to trigger a particular vulnerability, such code
is conceptually structured as a set that contains a NOP sled, a se-
quence of positions containing the targeted return address, and the
executable payload of the exploit i.e., shellcode. Recently, poly-
morphism has been successfully employed in disguising shellcode.
One approach is to use code obfuscation and masking, such as en-
crypting the shellcode with a randomly chosen key. A decoding en-
gine is then inserted into the shellcode and must run before the ex-
ploit to reverse the obfuscation during runtime, resulting in a fairly
standard conceptual format for shellcode:
[NOP][DECODER][ENCPAYLOAD][RETADDR]
Only the decoding routine now need be polymorphic; this task
proves less daunting than morphing arbitrary exploit code. Rapid
development of polymorphic techniques has resulted in a number
of off(cid:150)the(cid:150)shelf polymorphic engines [19, 13, 26, 6]. Counter-
measures to polymorphism range from emulation methods [31] to
graph(cid:150)theoretic paradigms aimed at detecting the underlying vul-
nerability [7] or signatures based on higher order information such
as the control-(cid:3)ow graph of the exploit [23, 8] or correlating pro-
tocol format information with memory corruption vulnerabilities
[12]. We elaborate on defense techniques in Section 5.
There are two main ways to disguise shellcode. The (cid:2)rst rewrites
the code each time so that it differs syntactically but retains the
same operational semantics. This process, akin to metamorphism,
is decomposable to graph isomorphism [37], and unlike virus meta-
morphism (see Zmist [16]), it is, in general, a non(cid:150)trivial solution
to implement. The other more common approach is self-ciphering:
the exploit is wrapped as payload within a larger malcode compo-
nent and is disguised using a reversible cipher (usually a sequence
of operational loops e.g., xor, add, subtract, ror, rol, etc., although a
looping construct is not always required). An attacker typically
uses several rounds of ciphering. Polymorphism is obtained by
randomizing the order of these ciphers and using different keys.
In order to reverse the cipher, a clear(cid:150)text program must exist im-
mediately before (in terms of execution (cid:3)ow) the payload. This
program decodes the exploit payload at runtime. Such (cid:147)decoders(cid:148)
typically have a length of 30 to 50 bytes and can decode arbitrary
payloads. Decoders provide an effective technique for rapid and
simple dissemination of malcode variants. Attackers reuse exploits
in arbitrarily different forms. In fact, many polymorphic engine in
the wild carry a copy of the shellcode listed in Aleph0ne’s seminal
paper [1].
address
byte values
-------- ------------
00000000 EB2D
00000002 59
00000003 31D2
00000005 B220
00000007 8B01
00000009 C1C017
0000000C 35892FC9D1
00000011 C1C81F
00000014 2D9F253D76
00000019 0543354F48
0000001E 8901
00000020 81E9FDFFFFFF
00000026 41
00000027 80EA03
0000002A 4A
0000002B 7407
0000002D EBD8
0000002F E8CEFFFFFF
00000034 FE
...
payload follows
x86 code
------------------
jmp short 0x2f
pop ecx
xor edx,edx
mov dl,0x20
mov eax,[ecx]
rol eax,0x17
xor eax,0xd1c92f89
ror eax,0x1f
sub eax,0x763d259f
add eax,0x484f3543
mov [ecx],eax
sub ecx,0xfffffffd
inc ecx
sub dl,0x3
dec edx
jz 0x34
jmp short 0x7
call 0x2
db 0xFE
Figure 1: A 35 byte polymorphic decryption loop. From left
to right, the columns contain the address or offset of the in-
struction, the byte value of the instruction, and an x86 assem-
bly representation. Note the (cid:2)ve cipher operations, ror xor
ror sub add, that begin at 0x0C. The working register for
the cipher is %eax. Note the stop condition at 0x2B.
1.2 Shellcode Polymorphism
Polymorphic techniques no longer consist of simply disguising
the payload; attackers frequently conceal other sections of malcode.
(cid:15) [NOP]: The most basic design of a nop-sled is a buffer of NOP
instructions fx90,x90,: : :,x90g inserted ahead of the decoder
to safely capture a future change in the value of the instruction
pointer. Many signature(cid:150)based systems rely on this artifact for de-
tection. Attackers, however, have introduced various innovations
to make the NOP sled polymorphic. The sled need not consist of
actual NOP instructions (cid:151) it only has to pass the (cid:3)ow of execution
safely into the decoder without causing instability. K2 described at
least 55 different ways to write such single byte benign instructions
[19] and implemented this method in the ADMmutate engine. This
technique provides the potential for 55n unique NOP sleds (where
n is the sled length).
The CLET polymorphic engine [13] employs a more advanced
NOP sled design. This method discovers benign instructions by
(cid:2)rst (cid:2)nding a set of 1-byte benign instructions, then (cid:2)nding a set of
2-byte benign instructions that contains the 1-byte instructions in
the lower byte. Therefore, it does not matter if control (cid:3)ow enters
the 2-byte instruction or if it lands one byte to the right since that
position will hold another equally benign instruction. Recursive
use of this method to additional depths (cid:2)nds longer benign instruc-
tion sequences for a NOP sled. To the best of our knowledge, no
analysis of the potential of this method exists, but it serves as a use-
ful polymorphic technique because modeling this type of sled may
amount to modeling random instructions.
(cid:15) [RETADDR]: Without address space randomization, the location
of the stack and stack variables on most architectures remains con-
sistent across program executions. Thus, the attacker has a basis for
guessing the appropriate value for an injected return address to redi-
rect the instruction pointer into the malcode. Generating signatures
that use these speci(cid:2)c address values to (cid:2)lter out malcode seems
possible for certain types of code injection attacks. An attacker
can, however, achieve return address polymorphism by modifying
the lower order bits [19]. This method causes control (cid:3)ow to jump
into different positions in the stack. As long as it lands somewhere
in the sled, the exploit still works. The return address section con-
sists of the return target repeated m number of times. Each repeat
can be modi(cid:2)ed v times (where v is some tolerable variance in the
jmp target) for a total of vm possible variations.
(cid:15) Spectrum shaping & byte padding: In polymorphic
blending attacks [17], exploits attempt to appear similar to benign
traf(cid:2)c in terms of the n-gram content distribution. The CLET team’s
polymorphic engine [13] is an example of such a technique. Their
engine alters the shellcode to take on the form:
[NOP][DECODER][ENC PAYLOAD][PADDING][RETADDR]
The engine adds junk bytes in the new padding area to ensure the 1-
gram distribution of the shellcode appears different. In addition, the
shellcode itself is ciphered with different length keys. These keys
exhibit a variety of byte distributions that reshape the byte spectrum
of the payload. This technique increases both the variation and
propagation strengths of a polymorphic engine to make it resistant
to a statistical content anomaly detectors [40].
Perhaps the most worrisome threat is that these individual tech-
niques are interchangeable and can be combined into a single poly-
morphic engine. Section 3 shows that this engine is simple to