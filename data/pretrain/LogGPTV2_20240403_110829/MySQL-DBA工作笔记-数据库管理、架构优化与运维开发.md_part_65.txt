分片2
9613.49
9604.29
8402.38
7827.59
QPS
分片3
分片
---
## Page 434
412丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
理的架构，这个合理主要就是两个边界：
和业务需求来看，目前 SATA-SSD 的资源配置能够完全满足我们的压力场景。
在这个基础上进行了多次讨论和迭代，我们梳理了如下图10-42所示的服务器部署架
（1）满足现有的性能，能够支撑指数级的压力支撑。
对于整体架构设计方案已经具备交付条件，
补充要点2：需要考虑的服务器部署架构
其中，TPS：QPS大概是1：20，我们对于性能测试情况有了一个整体地认识，从成本
（2）成本合理。
从以上的数据我们可以分析得到如下图10-41所示的图形。
SATA-SSD大OP
17899
37104.36
PCIE-SSD
磁盘类型
QPS1(SATA-SSD小OP)QPS2(SATA-SSD大OP)QPS3(PCID-SSD)
15911.69
61658.88
线程数
32
128
9
32
128
128
8
图10-41
8652254
，那么线上环境的部署我们还需要设计合
5572.14
4849.37
4326.13
3082.94
1855.22
1128.48
963.56
926.92
845.58
704.96
500.82
TPS
96987.35
111442.85
96987.35
86522.54
61658.88
37104.36
22569.67
19271.18
18538.42
16911.69
14099.11
10016.48
QPS
续表
1142.85
---
## Page 435
源中无需重复申请。
同时节省了大量的服务器资源成本。其中LVS服务可以作为通用的配置资源，故如下资
都会存在较大的冗余，所以我们考虑了单机多实例，交叉互备，从而提高资源使用效率，
说，MySQL 的使用场景更偏向于 PC 服务，但是对于单机来说，CPU、内存、磁盘资源
构，对于 30多个实例，我们最终采用了10台物理服务器来支撑。从机器的使用成本来
图10-42
第10章基于业务的数据库架构设计|413
---
## Page 436
路上，那么有些问题可能会产生共鸣。
DBA 技术栈的演进，另外一个是对于运维开发的常见问题，如果你们团队已经在转型的
技能水平可以再培养，但是不懂开发技术，没有开发基础，要通关拿到Offer 还是很难的。
用与数据库的整合才行。
读懂代码还是有必要的。
言好？
先简单来谈一个问题：DBA 到底要不要掌握开发技能。
11.1
个就是开发基础，我选择了两门语言，一个是Shell，
发技能的，运维开发技能已经默认成为了招聘的一个硬需求。或者退一步来说，数据库
答案是铁定的：需要，而且需要熟练掌握。
行了。
先从招聘需求来看，但凡是招聘系统运维和 DBA 的岗位，几乎很少能看到不需要开
我们会分几个层面来对运维开发基础做出补充，一个是运维开发的发展情况，另一
（5）C、C++和Java 是编程语言，DBA 和这些有什么关系？你了解相应的 SQL 不就
（4）编程知识总是有用的，学习一下思路和总体的运行情况，任何一个系统都是应
可能有的同学还存在疑问，我们就通过以下的两个环节来解读下，
上面的很多评论时间是在2012年前后，在当时看来是一个待确认的问题，现在看来
（3）应该要懂开发吧，
（2）最近总有冲动想去学编程，
（1）一直在做DBA，但是不懂开发，现在想学一门语言，大家提点建议，学什么语
在回答这个问题之前，我们先来看一些网友的疑问和评论：
看到本章的标题，很多同学可能会疑惑，运维开发和DBA有什么关系，那好，我们
水之积也不厚，则其负大舟也无力。——庄子
运维开发是 DBA 新的挑战
第11章
，虽然不是专职的开发人员，但有时要测试之类的要使用啊，
但是又怕学下来在工作上没啥用。
运维开发基础
一个是Python，选择的目的不是说
一个是通过分析
---
## Page 437
会是2：4：4，如图11-2所示。
是后期运维开发和架构优化的工作会越来越多，这个比例会有很大的变动，基本的比例
威性，而且更重要的是有一个明确的场景去支持，否则写出来了推广也会很难。
外，对于内核的定制和改动，需要对数据库方向有着很深入的理解或者有绝对的技术权
面你即使开发修改了代码，但是后续的维护怎么去做，如果更加平滑这是一个问题；另
一类，而另外一个则是内核级别的开发。而内核级别的开发则不具有普遍性，因为一方
用组件的开发，比如数据库中间件的开发或者定制就是一种，智能运维模块的开发也是
动化系统的开发，而在早期更多是脚本的开发。第二大类分为两个子类，一个是系统/应
集群方案等方面对于DBA 都是很大的挑战，而这也印证了MySQLDBA比较“贵”的一个原因。
库性能和存储的水平扩展是摆在DBA面前紧迫的任务，在技术选型、架构设计、高可用设计、
看慢日志等，很多问题都是后知后觉，属于被动的处理方式，而随着业务的快速扩展，对于数据
备份恢复、监控等，都是基础运维的范畴。
11.1.1
（3）运维开发，我把它分为两个大类，第一个大类是一些应用的开发，比如运维自
而在我的理解中，前期事务性工作的意义在于我们可以做的更快，做得更高效。但
上面三个部分所占的比例在早期是一种很不平衡的状态，大体是6：3：1，如下图11-1所示。
（2）数据库架构和优化，这是一个比较大的方向，早期的优化策略其实更多是添加索引，查
（1）运维管理，比如基础的安装部署、搭建从库、数据库权限开通、系统权限开通、
同时，对于一些表结构的变更、SQL审核和数据迁移类的操作大都属于运维管理类的操作。
在我的理解里，早期DBA的工作内容基本是分为三个方向。
通过DBA技术栈的发展，可以让我们更加清晰地了解 DBA的方向和未来。
 运维开发和 DBA 技术栈的演进
G
运维管理
图11-1
架构和优化
运维开发
第11章运维开发基础|415
---
## Page 438
416|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
评论对大家都有一些启示和帮助。
多人都有相似的痛点，很多路可能我们都在走过，在此没有绝对正确的答案，希望这些
11.1.2
两者之家的人会比较尴尬了，从趋势来看，对人的要求会越来越高。
的水涨船高，不进则退。
然不至于到喝咖啡看报纸的地步，但是我们所做的工作技术含量会提高，也所谓行业里
团队工作方向的一些比例变化。
许多企业现在都是两极化，要么需要高潜新人，要么需要有经验的专家，反而介于
对于运维开发，有一天我抛出了几个问题，引发了大家的热烈讨论，可以看出，很
其实可以看到在运维价值提升以后，可以有更多的时间去做更有价值的事情了。虽
我们来看一些行业里的数据情况，图11-3 是某互联网公司在使用自动化之前和之后
运维开发常见的六个问题
自动化后
自动化前
4%3%
20%
20%
13%
自动化前
20%
20%
8%
3%20%
自动化
新技术研究
支持与
图11-3
26.9
图11-2
优化
与变更
20%
5%
4%
自动化后
3%
构
20%
其他
自动化
首新技术研究
优化
支持与变更
部署初始化
---
## Page 439
高度自治，外部调用勾连紧密。
像阿里云那样的绝对例外。业务系统完全不一样，变化快，发布周期短，业务细部功能
架构基本稳定，花那么大代价微服务化，阶段和时间节点大部分企业都还没有到，但是
来想规划开发团队、自研发很多应用项目则适用。
其是IT企业；其他行业如果之前便采购了一堆应用软件的公司就不适用微服务，但对未
搞什么服务发展、服务注册之类的东西。
也不用担心某部分故障导致系统整体故障，还有，部署、发布多了，倒轻松了
发选择就Java吧，招聘容易点。
员
Java。
实在在带来便利和提高效率，也是一个灰度过程。
运维操作逐渐转移到运维系统；其次是逐渐从小范围扩展到开发团队，比如 sql审核，实
身，
同学3：个人觉得自动化要搞好，首先运维团队自身得有思维转变，有意识将传统的
同学7：应用的微服务部署对运维提出了更高的要求。
同学6：运维的顶层设计到目前主止，一般的大中型企业都旨在解决现实运维问题，
同学8：微服务的很多程序，我们上线部署，也麻烦，如果调用链长，又没跟踪监控，
同学5：传统IT 架构、现有业务系统改造，自有庞大开发团队的公司可以考虑，尤
同学4：关于微服务，个人觉得只要参考思想，形成一个个独立模块就好了，没必要
同学3：微服务架构在业务层面应用较多，运维有待改进。
同学2：我在福州和深圳见过专门搞微服务的公司，还可以，只是投入有点小大。
同学1：感觉做微服务对运维很大的一个好处是不用过于担心业务陡增，系统宕机，
问题3：微服务架构对于目前的运维来说落地情况如何？
同学6：Python，Java各有秋千，角度和立场观点不一样，语言之争不讨论，应用开
同学5：Python 成本低，入门易，贴合度高。
则要看开发人员熟悉的技能。
同学 4：如果运维人员来开发，Python 或者 Go更合适，简单易上手。如果是开发人
同学3：现在感觉好多公司都开始搞Go了，实在跟不上。
同学2：选择语言的关键在开发运维系统的团队整体技术栈，很多互联网公司是选择
同学1：Python 好用，但是要懂Java，因为开发Java 多，尤其是问题调查方面。
问题 2：运维自动化使用 Python 还是Java 要好一些？
同学4：可以抓痛点，单点突破，小范围试点。
或者不了解运维，leader 并不一定都会重视。
同学2：首先运维团队并非所有人都重视自动化；思维无法转变。其次如果非运维出
同学1：从部门发起先做出一个demo，然后后续争取公司的支持，可以自己慢慢做。
问题1：你觉得运维自动化平台从公司层面来推和从部门自发做起，各有什么利？
第11章运维开发基础”417
---
## Page 440
418丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
不上。
也是建议，因为产品开发迭代的前端工作也不少！
代合并需求还是不错的！
总监可能关注成本的节省，要让这么多人认同其实还是不容易的，小范围试运行逐步迭
最重要的就是稳定，不能出“幺蛾子”。
专业活。
个更容易成功？
好的工作方便性进行引导。
决现实问题的能力下降，其生命力就在走下坡路。
用 Zabbix。当然这里的成功率要分阶段、分组织文化来看，通常一开始还不错，随着解
便，若找领导要钱去造会很难。除非，绕行十分困难。
条小河沟，以前都是绕一绕就过去了，你觉得造个桥方便，
是解决了实际问题，带来了可观的价值，不管是从人力还是物力上。
产品正常上线，否则肯定他们先行。
就尴尬了。
统，
同学4：需要，运维人员最好忽略前端，通常运维想出来的前端都不靠谱，前端是个
同学5：自上而下的推进即使强推下去，实用性也欠佳，需要特殊模块带动，提供很
同学2：赞同楼上，如果这个需求上升了到领导或公司层面，那至少你做的平台确实
，对不起，第一个通常是Demo。
问题5：一个大而全的系统（投入人员多一些）和一个快速迭代的系统，大家觉得哪
同学3：说白了，运维平台，除了大公司，小公司只能一个部门自己先搞，就像有一
同学3：这个平台开发肯定不能依赖开发人员，开发人员自己事情多的要死，根本顾
同学5：快速迭代，快速迭代的需求源泉都是来自需求，来自生产一线；大而全的系
同学4：运维平台从上向下推进的成功率不算高，有见过，公司用Tivoli，下面都在
同学1：由上推下，领导CTO认可，就会较容易，但是不能影响开发的项目进度和
问题4：大家了解的行业里的运维平台从上向下推进的成功率如何？
同学5：前后端需分工也需沟通，计划应用的时候，有基础架构、服务器的人参与建议。
同学2：我觉得沟通成本太大了。
同学1：如果是运维自动化平台前端的话，
同学4：每个人关注点都不一样，你可能关注功能的实现，领导可能关注带来的便利
同学
同学2：有领导支持当然好了，前提还要看执行者质量；开发的系统如果大范围使用，
同学1：个人推崇快速迭代。大而全，时间久，
题6：前后端技术是否需要分离，比如运维不需要关注前端，不需要写前端页面？
学3：千万别大而全，这东西没有一个整体的思路或是规划，后面自己都会放弃了
一般还是运维自己写吧，前端工程师最多
，变数大。
，你只能自己造，同路的搭个
---
## Page 441
结果。
面，我想运行这个 test.sh，可能就需要输入ksh /u01/orallg/test.sh xxxxx。
当前目录下执行脚本和在其他路径下执行就有很大的差别，甚至是严重的错误。
一些经验。
写一些简单的 Shell脚本，在这个过程中，我们很可能碰到一些坑或者问题，可以先吸取
11.2.1Shell脚本心得
聊一些 Shell 的心得。
11.2
同的阶段，自有不同的实践路线，仅仅参考。
如果路径的一些通用性没有考虑到的话，这个脚本很可能出错，或者出现不期望的
Shell虽不是我们常见的运维开发语言，却是系统运维的基本功，我们本小节不会展
xxxx_rename_file.tmp 等等。
对于临时文件的处理，个人建议统一命名，比如可以用以下特定的操作、功能命名。
那么我在/u01/ora11g下面执行自然没有问题，但是如果我现在在/u02/db2 的目录下
比如我现在有一个脚本 test.sh在目录／u01/ora1lg下面。
这个问题比较纠结，在自己写的一些脚本中，没有注意到一些路径的设置，可能在
从我的实践来看，对于一个新人，如果系统学习 Shell的基础知识，基本一天就可以
3．临时文件的处理和命名
2．脚本路径规划
可以根据工作的需要和实际情况来选择，目前我使用比较多的就是bash 和 ksh。
·/bin/zsh：基于ksh 发展出来的，功能更强大的 Shell。
●/bin/tcsh：整合C和 Shell，提供更多的功能。
●/bin/bash：就是Linux预设的 Shell。
·/bin/sh：已经被/bin/bash所取代。
Shell本身有很多种，大体如下：
1．选择合适的 Shell
上面的回答仅供参考，我也没有刻意去放大某些答案的结果。对于不同的企业、不
./bin/csh:
●/bin/ksh:
运维开发基本功：Shell基础
：已经被/bin/tcsh所取代。
：Kornshell 由 AT&T Bell lab 发展出来的，相融于 bash。
第11章运维开发基础丨419
---
## Page 442
420丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
行动态数据比较。
中直接调用即可。