### Slave Evaluator and Main Protocol

The slave evaluator processes (Step 5) and initiates the main protocol. The arrows in the diagram illustrate the message flow.

### Timing Methodology

When multiple processes are involved on each side, it is crucial to carefully measure the system's timings. The timings reported in this section represent the time required by the root process at each stage of the system. This was chosen because the root process is always the longest-running process, as it must wait for all slave processes to complete. Additionally, the root process performs the input consistency check and the coin-tossing protocol, in addition to the tasks performed by the slaves.

### Impact of Performance Optimization Techniques

In Section 4, we presented several performance optimization techniques with theoretical analyses. Here, we demonstrate their empirical effectiveness in Table 4. As anticipated, Random Seed Checking reduces the communication cost for garbled circuits by 60%, and Garbled Row Reduction further reduces it by another 25%. The small deviations from the theoretical fractions of 40% and 30% in the RS and GRR columns, respectively, are due to specific implementation needs. Our compiler is designed to minimize the number of non-XOR gates. In the four circuits, the ratio of non-XOR gates is less than 43%. After applying the Free-XOR technique, the final communication is less than 13% of that in the baseline approach.

| Circuit | non-XOR (%) | Baseline (MB) | RS (%) | GRR (%) | FX (%) |
|---------|--------------|---------------|--------|---------|--------|
| AES     | 30.81        | 509           | 39.97  | 30.03   | 9.09   |
| Dot64   | 29.55        | 4,707         | 39.86  | 29.91   | 8.88   |
| RSA-32  | 34.44        | 17,928        | 39.84  | 29.88   | 10.29  |
| EDT-255 | 41.36        | 159,129       | 39.84  | 29.87   | 12.36  |

**Table 4: Impact of Various Optimization Techniques**
- **Baseline**: Communication cost for 256 copies of the original Yao garbled circuit when k = 80.
- **RS**: Remaining fraction after applying the Random Seed technique.
- **GRR**: Further reduction after applying Garbled Row Reduction.
- **FX**: Final reduction after applying the previous two techniques and the Free-XOR.

### Performance Gain with AES-NI

On a machine with a 2.53 GHz Intel Core i5 processor and 4GB 1067 MHz DDR3 memory, running a single SHA-256 (with OpenSSL 1.0.0g) takes 784 clock cycles, while AES-256 (with AES-NI) requires only 225 cycles. To measure the benefits of AES-NI, we constructed various circuits listed in Table 5 and observed a consistent 20% saving in circuit construction.

| Circuit | Size (gate) | AES-NI (sec) | SHA-256 (sec) | Ratio (%) |
|---------|-------------|--------------|---------------|-----------|
| AES     | 49,912      | 0.12 ± 1%    | 0.15 ± 1%     | 78.04     |
| Dot64   | 460,018     | 1.11 ± 0.4%  | 1.41 ± 0.5%   | 78.58     |
| RSA-32  | 1,750,787   | 4.53 ± 0.5%  | 5.9 ± 0.8%    | 76.78     |
| EDT-255 | 15,540,196  | 42.0 ± 0.5%  | 57.6 ± 1%     | 72.92     |

**Table 5: Circuit Generation Time (for a single copy) with Different Instantiations (AES-NI vs. SHA-256) of the 2-Circular Correlation Robust Function.**

### AES Benchmarking

We used AES as a benchmark to compare our compiler to the Fairplay compiler and as a test circuit for our system. We tested the full AES circuit as specified in FIPS-197 [8]. In the semi-honest model, it is possible to reduce the number of gates in an AES circuit by computing the key schedule offline. However, in the malicious model, such an optimization is not possible, as the party holding the key could attempt to reduce the security level of the cipher by computing a malicious key schedule. Therefore, in our experiments, we compute the entire function, including the key schedule, online.

In this experiment, two parties collaboratively compute the function \( f : (x, y) \rightarrow (\perp, \text{AES}_x(y)) \), where the circuit generator holds the encryption key \( x \), and the evaluator has the message \( y \) to be encrypted. At the end, the generator will not receive any output, whereas the evaluator will receive the ciphertext \( \text{AES}_x(y) \).

| Type | non-XOR | XOR |
|------|---------|-----|
| Fairplay | 9,100 | 15,316 |
| Ours-A | 35,084 | 21,628 |
| Pinkas et al. | 15,300 | 34,228 |
| Ours-B | 11,286 | 22,594 |

**Table 6: Components of the AES Circuits from Different Sources.**
- **Ours-A**: From the textbook AES algorithm.
- **Ours-B**: Uses an optimized S-box circuit from [3].

Our compiler produces smaller AES circuits than Fairplay. Given the same high-level description of AES encryption, our compiler generates a circuit with fewer gates and even fewer non-XOR gates. When using the compact S-Box description proposed by Boyar and Parelta [3], our compiler generates a smaller AES circuit than the hand-optimized one from Pinkas et al. with less effort.

### Computational and Communication Costs

In Table 7, the computational and communication costs for each main stage are listed under the traditional setting, where there is only one process on each side. These stages include oblivious transfer, garbled circuit construction, the generator’s input consistency check, and circuit evaluation. Each row includes both computation and communication times. Note that network conditions can vary, and our experiments were conducted in a local area network. The data provides a rough estimate of system performance in an ideal environment, but the exact amount of data exchanged is reported.

| Stage | Generator (sec) | Evaluator (sec) | Communication (KB) |
|-------|-----------------|-----------------|--------------------|
| OT    | 45.8 ± 0.09%    | 34.0 ± 0.2%     | 5,516              |
| Gen.  | 0.1 ± 1%        | 11.9 ± 0.6%     | 3                  |
| Inp.  | 14.9 ± 0.6%     | 32.4 ± 0.4%     | 266                |
| Chk   | 3.2 ± 0.8%      | 18.2 ± 1%       | 28,781             |
| Evl.  | 96.3 ± 0.3%     | 68.0 ± 0.2%     | 34,566             |

**Table 7: 95% Two-Sided Confidence Intervals of Computation and Communication Time for Each Stage in the Experiment \( (x, y) \rightarrow (\perp, \text{AES}_x(y)) \).**

The evaluator spends a significant amount of time on communication during the oblivious transfer and circuit construction stages, waiting for the generator to finish computation-intensive tasks. This waiting results from the need for both parties to run the protocol in a synchronized manner. A generator-evaluator pair cannot start the next communication round until all other pairs have finished the current one. This synchronization is crucial for ensuring the security of the protocol, which is guaranteed only when each communication round is performed sequentially. Using TCP sockets in "blocking" mode enforces this communication round synchronization.

The low communication during the circuit construction stage is due to the random seed checking technique. The generator spends more time in the evaluation stage than traditionally, due to the second construction for evaluation circuits. Only 40% of the garbled circuits (102 out of 256) are evaluation circuits, resulting in a ratio of the generator's computation time in the generation and evaluation stages of approximately 5:2.

### Experimental Limitations

Unfortunately, we were unable to find a cluster of hundreds of nodes that all support AES-NI. Therefore, our experimental results do not fully showcase the potential of all the optimization techniques. However, in the semi-honest setting, the running time for certain circuits is roughly half of that in the malicious setting.

| Node # | OT (sec) | Gen. (sec) | Inp. Chk (sec) | Evl. (sec) | Inter-com (sec) | Intra-com (sec) | Total Time (sec) |
|--------|----------|------------|----------------|------------|-----------------|-----------------|------------------|
| 4      | 1.92 ± 0.7% | 0.42 ± 4% | 12.56 ± 0.1% | 8.41 ± 0.1% | 4.06 ± 0.1% | 2.13 ± 0.2% | 1.96 ± 0.1% | 0.58 ± 0.2% | 0.64 ± 0.1% | 0.19 ± 0.2% |
| 16     | 8.18 ± 0.4% | 3.3 ± 4% | 7.08 ± 1% | 0.80 ± 10% | 1.58 ± 4% | 0.23 ± 17% | 0.37 ± 7% | 0.12 ± 0.5% | 0.05 ± 0.6% |
| 64     | 4 ± 5% | 13.2 ± 0.3% | 0.93 ± 10% | 4.08 ± 0.8% | 0.31 ± 20% | 1.98 ± 1% | 0.11 ± 40% | 0.72 ± 0.2% |
| 256    | 0.17 ± 30% | 0.23 ± 20% | 0.18 ± 8% | 0.25 ± 6% | 0.45 ± 20% | 0.48 ± 15% | 0.34 ± 30% | 0.34 ± 30% |

**Table 8: 95% Two-Sided Confidence Intervals of Computation and Communication Time for Each Stage in the Experiment with Varying Node Counts.**

The low communication during the circuit construction stage is due to the random seed checking technique. The generator spends more time in the evaluation stage than traditionally, due to the second construction for evaluation circuits. Only 40% of the garbled circuits (102 out of 256) are evaluation circuits, resulting in a ratio of the generator's computation time in the generation and evaluation stages of approximately 5:2.