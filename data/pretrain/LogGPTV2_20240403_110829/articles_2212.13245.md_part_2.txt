### 2.2.4 Search AIOps Projects (Second Round)
Using the four pairs of keywords extracted from the previous step, we conducted a second round of searches on GitHub to identify additional AIOps-related projects. The process followed the same methodology as described in Section 2.2.1. After removing duplicate projects from the first-round search results, this search yielded a total of 383 unique AIOps projects.

### 2.2.5 Filtering
Based on insights gained from the first-round manual verification, we applied a filtering phase to eliminate toy projects. The criteria for filtering included the number of stars and forks, with only projects having at least one star and one fork (stars: ≥1 & forks: ≥1) being retained. This filtering ensures that the selected projects are relatively mature, thereby avoiding the inclusion of small, less significant repositories (Munaiah et al., 2017). The filtering was applied to both the first-round and second-round search results. For the first-round projects, filtering was applied after the manual verification step, while for the second-round projects, it was applied before the manual verification to save unnecessary effort on projects that would be excluded by the filtering criteria. After filtering, the 84 manually verified projects from the first round were reduced to 40, and the 383 projects from the second round were also filtered accordingly.

### 2.2.6 Manual Verification (Second Round)
As detailed in Section 2.2.2, not all searched repositories are suitable for our study. To select appropriate projects, we repeated the manual verification process. Coders followed the same procedure to determine whether each of the 383 projects was a genuine AIOps project. After independent coding, discussion, revision, and resolution of disagreements, 57 projects were identified from the expanded keywords, resulting in a selection rate of 15%.

### 2.2.7 Measuring the Reliability of Our Manual Verification
Reliability is crucial for ensuring the validity of the coding results (Artstein and Poesio, 2008). We used Cohen’s kappa (Cohen, 1960) to measure inter-coder agreement, which is a common approach for assessing reliability (Artstein and Poesio, 2008). Table 1 provides the interpretation of Cohen’s kappa values in terms of agreement levels (McHugh, 2012).

| Value of Cohen’s k | Level of Agreement |
|-------------------|--------------------|
| 0-.20             | None               |
| .21-.39           | Minimal            |
| .40-.59           | Weak               |
| .60-.79           | Moderate           |
| .80-.90           | Strong             |
| .90-1             | Almost Perfect     |

Our initial manual verification for selecting AIOps projects achieved a Cohen’s kappa of 0.68. After a discussion session between coders, the kappa score increased to 0.81, indicating a strong agreement (kappa ≥ 0.80).

### 2.3 Collecting Baseline Projects
To understand how AIOps projects differ from traditional software projects, we created two baselines: Machine Learning (ML) projects and General projects.

### 2.3.1 Machine Learning Projects
For the first baseline, we selected ML projects because AIOps can be considered an application domain of machine learning. Unlike studies that focus on specific frameworks (e.g., TensorFlow), we used more general keywords: “machine learning” and “deep learning.” We applied the same filtering criteria as for AIOps projects, retaining only those with at least one star and one fork. Additionally, we limited the creation date range to match that of the AIOps projects (2012/12/25 to 2021/08/19). After removing duplicates, we obtained 75,198 unique repositories. Due to resource constraints, we randomly sampled 383 projects from this pool using a 95% confidence level and a 5% confidence interval, repeating the process 10 times to ensure robustness. This resulted in 3,830 ML baseline projects.

### 2.3.2 General Projects
For the second baseline, we selected general projects from GitHub without specifying any particular topic or language. This baseline captures the general characteristics of all GitHub projects. We applied the same filtering criteria as for the ML baseline but did not specify any topic. After filtering, we obtained 3,796,841 public and available repositories. Using the same sampling method as for the ML baseline, we sampled 385 projects, repeating the process 10 times to yield 3,850 General baseline projects.

### 3 Research Questions and Results
This section details our research questions (RQs) and the corresponding results, organized by motivation, approach, and findings.

### 3.1 RQ1: What Are the Characteristics of AIOps Projects in Terms of Their GitHub Metrics?

#### 3.1.1 Motivation
Previous studies have proposed AIOps solutions leveraging AI technologies to support various software operations (Di Stefano et al., 2021; Li et al., 2022, 2020). However, no work has investigated real-world AIOps projects and their characteristics. This RQ aims to bridge this gap by studying the characteristics of AIOps projects and comparing them with baseline projects in terms of GitHub metrics. Understanding these patterns can help AIOps researchers and practitioners gain insights into the current state of AIOps in practice.

#### 3.1.2 Approach
We analyzed the repository characteristics of AIOps projects and compared them with the baseline projects using the GitHub REST API (GitHub, 2022). Specifically, we examined three perspectives: growth of repositories, programming languages, and repository metrics.

- **Growth of Repositories:** We analyzed the distribution of AIOps projects based on their creation time and compared it with the baseline projects.
- **Programming Languages:** We studied the distribution of programming languages used in AIOps projects to provide insights for future development.
- **Repository Metrics:** We examined metrics such as the number of stars, forks, commits, contributors, releases, pull requests, issues, size, and archive status.

#### 3.1.3 Results
Compared to the ML and General baselines, AIOps projects are relatively new and have shown rapid growth in recent years. Figure 2 illustrates the cumulative distribution of the creation time of AIOps and baseline projects. The creation dates of all projects range from 2012/12/25 to 2021/08/19. In the early years (2012-2017), the number of AIOps projects was small, but from 2017 to 2021, AIOps projects experienced faster growth than the ML and General baselines.

Python is the dominant programming language in both AIOps and ML projects, but Java is also a major language in AIOps projects. Table 2 shows the top-5 languages for AIOps and baseline projects.

| Language | AIOps Usage (%) | ML Usage (%) | General Usage (%) |
|----------|-----------------|--------------|-------------------|
| Python   | 73.6            | 77.4         | 19.9              |
| Java     | 12.1            | 3.3          | 9.2               |
| HTML     | 4.4             | 2.7          | 16.6              |
| Go       | 3.3             | 2.3          | 5.7               |
| JavaScript | 2.2            | 2.0          | 5.3               |

On average, AIOps projects are more popular and active than the baselines. Table 3 presents the mean and median values of the selected repository metrics.

| Metric        | AIOps (µ, χ) | ML (µ, χ) | General (µ, χ) |
|---------------|--------------|-----------|----------------|
| Stars         | 122.7, 19.0  | 121.8, 6.0| 34.3, 3.0      |
| Forks         | 32.1, 7.0    | 30.3, 3.0 | 10.6, 2.0      |
| Commits       | 492.7, 25.0  | 133.4, 23.0| 885.6, 23.0    |
| Contributors  | 4.7, 2.0     | 3.8, 1.0  | 7.8, 1.0       |
| Archived      | 1.0%         | 1.7%      | 3.7%           |
| Releases*     | 2.6, 0.0     | 0.8, 0.0  | 1.7, 0.0       |
| Pull Requests*| 79.4, 0.0    | 20.8, 0.0 | 14.8, 0.0      |
| Issues*       | 89.9, 1.0    | 15.8, 0.0 | 9.6, 0.0       |
| Size (mb)     | 77.8, 7.8    | 59.4, 4.4 | 29.9, 0.5      |

*The median number of 0 for releases, pull requests, and issues indicates that more than half of the projects do not have any of these.

AIOps projects have 6 times more stars and 3 times more forks than the General baseline, indicating higher popularity. They also show more frequent commits, contributions, and releases, suggesting greater collaboration and activity. AIOps projects experience more pull requests and issues, which may be due to their complexity and the need for ongoing maintenance and improvement.