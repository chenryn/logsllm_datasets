# 使用分支
> 原文：
回到本地回购协议，它有两个提交。到目前为止，我们只有一条历史线索。提交链接在一行中。但是有时您可能需要在同一个 repo 中并行处理两个不同的特性。现在，这里的一个选项可能是用相同的代码创建一个新的文件夹/repo，并将其用于另一个功能开发。但是有更好的方法。使用*分支。由于 git 遵循树状结构进行提交，我们可以使用分支来处理不同的特性集。通过提交，可以创建两个或更多分支，也可以合并分支。*
使用分支，可以存在多行历史，我们可以签出其中的任何一行并对其进行操作。正如我们前面所讨论的，检出仅仅意味着用检出版本的快照替换目录(repo)的内容。
让我们创建一个分支，看看它看起来像什么:
```sh
$ git branch b1
$ git log --oneline --graph
* 7f3b00e (HEAD -> master, b1) adding file 2
* df2fb7a adding file 1 
```
我们创建一个名为`b1`的分支。Git 日志告诉我们，b1 也指向最后一次提交(7f3b00e ),但是`HEAD`仍然指向 master。如果你还记得的话，HEAD 会指向提交/引用。所以如果我们结账去`b1`，头应该指向那个。我们来确认一下:
```sh
$ git checkout b1
Switched to branch 'b1'
$ git log --oneline --graph
* 7f3b00e (HEAD -> b1, master) adding file 2
* df2fb7a adding file 1 
```
`b1`仍然指向同一个提交，但 HEAD 现在指向`b1`。因为我们在提交`7f3b00e`时创建了一个分支，所以将有两行历史记录开始这个提交。根据你在哪个分支上被检查，历史的线将会前进。
此时，我们在分支`b1`上被签出，因此进行新的提交将使分支引用`b1`前进到该提交，并且当前的`b1`提交将成为其父提交。就这么办吧。
```sh
# Creating a file and making a commit
$ echo "I am a file in b1 branch" > b1.txt
$ git add b1.txt
$ git commit -m "adding b1 file"
[b1 872a38f] adding b1 file
1 file changed, 1 insertion(+)
create mode 100644 b1.txt
# The new line of history
$ git log --oneline --graph
* 872a38f (HEAD -> b1) adding b1 file
* 7f3b00e (master) adding file 2
* df2fb7a adding file 1
$ 
```
请注意，master 仍然指向它所指向的旧提交。我们现在可以签出到主分支并在那里提交。这将导致从提交 7f3b00e 开始的另一行历史。
```sh
# checkout to master branch
$ git checkout master
Switched to branch 'master'
# Creating a new commit on master branch
$ echo "new file in master branch" > master.txt
$ git add master.txt
$ git commit -m "adding master.txt file"
[master 60dc441] adding master.txt file
1 file changed, 1 insertion(+)
create mode 100644 master.txt
# The history line
$ git log --oneline --graph
* 60dc441 (HEAD -> master) adding master.txt file
* 7f3b00e adding file 2
* df2fb7a adding file 1 
```
注意分支 b1 在这里是不可见的，因为我们在主节点上。让我们试着将这两者形象化，以了解全貌:
```sh
$ git log --oneline --graph --all
* 60dc441 (HEAD -> master) adding master.txt file
| * 872a38f (b1) adding b1 file
|/
* 7f3b00e adding file 2
* df2fb7a adding file 1 
```
上面的树形结构应该把事情说清楚了。注意在提交 7f3b00e 时有一个清晰的分支/分叉。这就是我们创建分支的方式。现在它们都是两条独立的历史线，特性开发可以独立完成。
再次重申，在内部，git 只是一个提交树。分支名称(人类可读)是指向树中那些提交的指针。我们使用各种 git 命令来处理树结构和引用。Git 相应地修改我们的回购内容。
## 合并
现在假设您在分支`b1`上工作的特性已经完成，您需要将它合并到主分支上，所有最终版本的代码都放在那里。所以首先你将签出到 branch master，然后你从上游拉最新的代码(例如:GitHub)。然后你需要将你的代码从`b1`合并到 master 中。有两种方法可以做到这一点。
以下是当前历史:
```sh
$ git log --oneline --graph --all
* 60dc441 (HEAD -> master) adding master.txt file
| * 872a38f (b1) adding b1 file
|/
* 7f3b00e adding file 2
* df2fb7a adding file 1 
```
**方案一:直接合并分行。**将分支 b1 合并到主分支将导致新的合并提交。这将合并两个不同历史行的更改，并创建一个新的结果提交。
```sh
$ git merge b1
Merge made by the 'recursive' strategy.
b1.txt | 1 +
1 file changed, 1 insertion(+)
create mode 100644 b1.txt
$ git log --oneline --graph --all
*   8fc28f9 (HEAD -> master) Merge branch 'b1'
|\
| * 872a38f (b1) adding b1 file
* | 60dc441 adding master.txt file
|/
* 7f3b00e adding file 2
* df2fb7a adding file 1 
```
您可以看到创建了一个新的合并提交(8fc28f9)。系统将提示您提交消息。如果回购中有许多分支，这个结果将以许多合并提交结束。与单一的发展历史相比，这看起来很丑陋。所以让我们来看看另一种方法
首先让我们[重置](https://git-scm.com/docs/git-reset)我们的最后一次合并，回到之前的状态。
```sh
$ git reset --hard 60dc441
HEAD is now at 60dc441 adding master.txt file
$ git log --oneline --graph --all
* 60dc441 (HEAD -> master) adding master.txt file
| * 872a38f (b1) adding b1 file
|/
* 7f3b00e adding file 2
* df2fb7a adding file 1 
```
**方案二:重定基数。**现在，不要合并两个具有相似基础的分支(提交:7f3b00e)，让我们将分支 b1 重新基础到当前的主节点上。**这意味着取分支`b1`(从提交 7f3b00e 到提交 872a38f)和 rebase(把它们放在上面)master (60dc441)。**
```sh
# Switch to b1
$ git checkout b1
Switched to branch 'b1'
# Rebase (b1 which is current branch) on master
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: adding b1 file
# The result
$ git log --oneline --graph --all
* 5372c8f (HEAD -> b1) adding b1 file
* 60dc441 (master) adding master.txt file
* 7f3b00e adding file 2
* df2fb7a adding file 1 
```
您可以看到有 1 个提交的`b1`。该提交的父级是`7f3b00e`。但是既然我们把它重新放在主人(`60dc441`)身上。它现在成为了父节点。作为一个副作用，你也看到它已经成为历史的一条线。现在，如果我们要将`b1`合并到`master`，这仅仅意味着将`master`改为指向`5372c8f`，也就是`b1`。让我们来试试:
```sh
# checkout to master since we want to merge code into master
$ git checkout master
Switched to branch 'master'
# the current history, where b1 is based on master
$ git log --oneline --graph --all
* 5372c8f (b1) adding b1 file
* 60dc441 (HEAD -> master) adding master.txt file
* 7f3b00e adding file 2
* df2fb7a adding file 1
# Performing the merge, notice the "fast-forward" message
$ git merge b1
Updating 60dc441..5372c8f
Fast-forward
b1.txt | 1 +
1 file changed, 1 insertion(+)
create mode 100644 b1.txt
# The Result
$ git log --oneline --graph --all
* 5372c8f (HEAD -> master, b1) adding b1 file
* 60dc441 adding master.txt file
* 7f3b00e adding file 2
* df2fb7a adding file 1 
```
现在你可以看到`b1`和`master`都指向同一个提交。您的代码已经合并到主分支，可以推送了。我们也有干净的历史！:D