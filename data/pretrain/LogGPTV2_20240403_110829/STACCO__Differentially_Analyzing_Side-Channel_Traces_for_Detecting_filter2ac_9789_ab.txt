respectively. They are all still being used broadly. TLS v1.3 is still
a working draft as of August 2017. SSL and TLS are referred to-
gether as the SSL/TLS protocol. SSL/TLS has two sub-protocols, the
handshake protocol, and the record layer protocol. The handshake
protocol negotiates security primitives (ciphers, their parameters,
and cryptographic keys), and the record layer protocol uses the
negotiated security primitives for encryption and authentication of
the payload data, such as HTTP, IMAP, SMTP, POP3, etc.
Handshake protocol. The SSL handshake protocol allows the
communicating server and client to authenticate each other and
negotiate an algorithm for message encryption and integrity protec-
tion. The protocol is illustrated in Figure 1. The client initiates the
SSL connection with a ClientHello message, which tells the server
the maximum SSL version it supports, a 28-byte random value, the
identifier of the SSL session that this current SSL connection is
associated to, the set of supported ciphers, and the compression al-
gorithms. The server, upon receiving the client’s request, responds
with a ServerHello message, with the same set of information
from the server. The server will then send a Certificate message,
if it is the first connection of the session, to offer its certificate to
the client. If the certificate used by the server is a certificate that
uses Digital Signature Algorithms (DSA) or a signing-only RSA
certificate, it does not have a key that can be used for encryption
purposes. In this case, the server will send a ServerKeyExchange
message to inform the client its Diffie-Hellman (DH) parameters to
perform the key exchange.
Upon receiving the ServerHelloDone message from the server,
the client sends a ClientKeyExchange message to the server. If RSA
key exchanges are used, the PreMasterSecret will be encrypted
using the RSA public key embedded in the certificate and sent along
with the message; if Diffie-Hellman key exchange algorithms are
used, this message will only include the client’s DH parameters—the
PreMasterSecret is calculated by the server and client respectively
without being sent over the network. After this step, the server and
the client already share the secrets for generating the symmetric
encryption keys and Message Authentication Code (MAC) keys.
The ChangeCipherSpec messages from the client and the server
notify the other party about the forthcoming changes to the cipher
algorithms that have just been negotiated.
Particularly, when RSA-based key exchange method is selected,
the PreMasterSecret is encrypted using the server’s public RSA
key. The format of the plaintext message of ClientKeyExchange
conforms to a variant of PKCS#1 v1.5 format (shown in Figure 3):
it must start with 0x0002 which is followed by 205 bytes of non-
zero paddings provided that the total message is 256-byte long
(determined by the size of the server’s private key). Then a 0x00
byte following the padding is regarded as the segmentation mark,
and the 48-byte PreMasterSecret is attached at the end. According
to RFC5246 (TLS v1.2), in order to defeat Bleichenbacher Attacks,
which we will detail shortly, the server first generates a random
value, and then decrypts the ClientKeyExchange message. If the
decrypted data does not conform to the PKCS#1 standard or the
length of the PreMasterSecret is incorrect, the random value will
be used for the rest of the computation, as if the decryption was
successful.
TLS v1.0, v1.1, and v1.2 support a variety of cipher suites. For
example, TLS_RSA_WITH_AES_128_CBC_SHA is one of the cipher
suites which employs RSA for both authentication and key ex-
change, the symmetric encryption uses the AES block cipher in
Cipher Block Chaining (CBC) mode, and SHA-1 based HMAC is
used for integrity protection of the payload. Other key exchange
algorithms can also be specified. For instance, TLS_ECDHE_ECDSA
uses elliptic curve Diffie-Hellman key exchange and Elliptic Curve
Digital Signature Algorithm for authentication.
Record layer protocol. The record protocol of TLS protects the
confidentiality and integrity of the payload via symmetric encryp-
tion and MAC algorithms. Block encryption in the Cipher Block
Chaining Mode (CBC) is one of the most widely used modes of
operation for block ciphers. The encryption and authentication is
conducted in the MAC-pad-encrypt scheme, as shown in Figure 2.
The MAC of the data payload is first calculated to protect its in-
tegrity, and then the resulting data is padded with dummy bytes
(conforming to SSL/TLS specifications) so that the total message
size is multiples of the block size (e.g., 16 bytes in AES). The result-
ing data blocks are then encrypted using the symmetric cipher in
the CBC mode.
Figure 3: Format of the plaintext of the ClientKeyExchange
message (with 2048-bit RSA keys).
2.3 Bleichenbacher Attacks against SSL/TLS
Bleichenbacher attacks [22] is the first practical adaptive chosen-
ciphertext attack against RSA cryptographic algorithms conforming
to the PKCS#1 v1.5 encoding schemes. It exploits the format cor-
rectness of the decrypted plaintext as an oracle and decrypts, by
repeatedly querying the oracle about the correctness of carefully-
crafted ciphertexts, an RSA public-key-encrypted message without
the need of the RSA private keys. Multiple studies have shown
that Bleichenbacher Attacks have practical implication in network
security [19, 22, 42, 47]. Particularly, these attacks have been demon-
strated to work against SSL/TLS protocols that adopt RSA algo-
rithms to encrypt the PreMasterSecrets and at the same time re-
veal non-conformant error messages over the network. Most widely
used SSL/TLS implementations today are believed to be immune
to Bleichenbacher Attacks as the oracle-enabling error messages
have been suppressed. We have summarized a brief history of the
related studies in Section 7.
In this paper, we implemented the optimized Bleichenbacher
attack proposed by Bardou et al. [19]. The attack relies on the
artifact that a correctly formatted ClientKeyExchange message,
before encryption, must begin with 0x0002. Therefore, its value m
must satisfy 2B ≤ m , where Bi is a basic block in the enclave
program’s control-flow graph (CFG).
3.2 Sensitive Control-Flow Vulnerabilities
If the enclave program has secret-dependent control flows, then
it is potentially vulnerable to control-flow inference attacks. Such
vulnerabilities are named sensitive control-flow vulnerabilities in
this paper. In this work, our focus is one of the most critical ap-
plications for SGX enclave—SSL/TLS libraries. Although SSL/TLS
libraries, e.g., OpenSSL, are implemented in a way that constant-
time execution is enforced, however, as we will show in this work,
they still have sensitive control-flow vulnerabilities due to improper
error handling and reporting, thus are vulnerable to control-flow
inference attacks.
4 DETECTING SSL/TLS VULNERABILITIES
WITH STACCO
In this section, we present the Side-channel Trace Analyzer for
finding Chosen-Ciphertext Oracles (Stacco), a differential analy-
sis framework for detecting sensitive control-flow vulnerabilities
in SSL/TLS implementations under the threat model we laid out
in Section 3. The core idea behind the framework is that when
provided with encrypted SSL/TLS packets with non-conformant
formats or incorrect paddings with different types of errors, the
decryption code may exhibit different control flows that give rise to
the decryption chosen-ciphertext oracles. To enable automated tests
for multiple oracle vulnerabilities on various SSL/TLS implementa-
tions under different attack models, i.e., page-level, cacheline-level
and branch-level control-flow inference attacks, we developed a
differential analysis framework (Section 4.1) and used it to evaluate
5 popular SSL/TLS libraries (Section 4.2).
4.1 Differential Analysis Framework
At the center of our differential analysis framework is a dynamic in-
strumentation engine to collect execution traces of the SSL/TLS im-
plementation. The overall architecture of our framework is shown
in Figure 6. Our framework consists of five components: a packet
generator (i.e., the TLS-attacker in the figure), an SSL/TLS program
linked to an SSL/TLS library under examination, a trace recorder
(i.e., Pin), a trace diff tool, and a vulnerability analyzer.
A complete run of one differential analysis test follows three
main steps. The first step is to collect two execution traces. The
packet generator generates two SSL/TLS packets following specific
rules (to be explained in Section 4.2) and sends them to the SSL/TLS
program. The program which is linked to the library being analyzed
runs on top of the Pin-based trace recorder, where the execution
traces of the analyzed library are collected. The second step is to
compare the two execution traces. Differences in the traces indicate
potential sensitive control-flow vulnerabilities. The final step is to
Figure 5: Three categories of control-flow inference attacks.
cacheline-level attacks, and branch-level attacks. We illustrate these
three levels in Figure 5.
Page-level attacks. It was reported by Xu et al. [73] that by clear-
ing the Present bit of the page table entries, the adversary controlling
the OS can force the EPC page accesses by the enclave program
to raise page fault exceptions and be trapped into the OS kernel
controlled by the adversary. In this way, the adversary could ob-
serve the enclave program’s page-level memory access pattern.
In our own exploration, we found not only the Present bit, other
bits in the page table entry, such as Reserved bits, NX bit, etc., as
well as Translation-Lookaside Buffers (TLB) and paging-structure
caches [1] also enable similar attack semantics. In this paper, we
model the side-channel observations collected in page-level attacks
as a sequence of page faults: , where Pi is the
virtual page frame number of the enclave program. With known
binary code of the enclave programs, Pi maps to a specific page of
executable code of the enclave program.
Cacheline-level attacks. Intel SGX does not prevent cache-based
side-channel attacks. Therefore, most prior work on cache-based
side-channel attacks is, in theory, applicable to SGX enclaves. While
it is challenging to model every single attack technique that has
been explored in previous studies, we abstractly model cache-based
side-channel attacks as a sequence of observations of the victim en-
clave program’s cacheline accesses: , where
Ci is the virtual address of the beginning of the cacheline (i.e., cache-
line sized and aligned memory block). With known binary code of
the enclave programs, Ci maps to a specific cacheline-sized block
of executable code of the enclave program.
Branch-level attacks. Very recently, Lee et al. [43] demonstrated
that the control flow of enclave programs can be precisely traced at
every branch instruction because the Branch Prediction Units (BPU)
inside the CPU core is not flushed upon Asynchronous Enclave
Exit (AEX). Therefore, a powerful adversary could interrupt the
enclave execution, which triggers an AEX, and then execute a piece
of shadow code whose virtual addresses are the same as the victim
code in the lower 32-bit range—so that they are mapped to the
same entries in the Branch Target Buffer (BTB). The adversary
Figure 6: Architecture of the differential analysis frame-
work.
decide whether the differences in the traces are exploitable by the at-
tacker. Given a specific attack model, e.g., page-level, cacheline-level,