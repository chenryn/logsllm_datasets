**目录**
    1. 背景
    2. 认识java序列化与反序列化
    3. 理解漏洞的产生
    4. POC构造
    5. 实际漏洞环境测试
    6. 总结
* * *
**背景**
2015年11月6日FoxGlove Security安全团队的@breenmachine 发布了一篇长博客，阐述了利用Java反序列化和Apache
Commons Collections这一基础类库实现远程命令执行的真实案例，各大Java Web
Server纷纷躺枪，这个漏洞横扫WebLogic、WebSphere、JBoss、Jenkins、OpenNMS的最新版。而在将近10个月前，
Gabriel Lawrence 和Chris Frohoff 就已经在AppSecCali上的一个报告里提到了这个漏洞利用思路。
目前，针对这个"2015年最被低估"的漏洞，各大受影响的Java应用厂商陆续发布了修复后的版本，Apache Commons
Collections项目也对存在漏洞的类库进行了一定的安全处理。但是网络上仍有大量网站受此漏洞影响。
* * *
**认识Java序列化与反序列化**
## 定义：
序列化就是把对象的状态信息转换为字节序列(即可以存储或传输的形式)过程  
反序列化即逆过程，由字节流还原成对象  
注： 字节序是指多字节数据在计算机内存中存储或者网络传输时各字节的存储顺序。
**用途：**
1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；  
2） 在网络上传送对象的字节序列。
**应用场景：**
1)
一般来说，服务器启动后，就不会再关闭了，但是如果逼不得已需要重启，而用户会话还在进行相应的操作，这时就需要使用序列化将session信息保存起来放在硬盘，服务器重启后，又重新加载。这样就保证了用户信息不会丢失，实现永久化保存。
2) 在很多应用中，需要对某些对象进行序列化，让它们离开内存空间，入住物理硬盘，以便减轻内存压力或便于长期保存。
比如最常见的是Web服务器中的Session对象，当有
10万用户并发访问，就有可能出现10万个Session对象，内存可能吃不消，于是Web容器就会把一些seesion先序列化到硬盘中，等要用了，再把保存在硬盘中的对象还原到内存中。
例子：
淘宝每年都会有定时抢购的活动，很多用户会提前登录等待，长时间不进行操作，一致保存在内存中，而到达指定时刻，几十万用户并发访问，就可能会有几十万个session，内存可能吃不消。这时就需要进行对象的活化、钝化，让其在闲置的时候离开内存，将信息保存至硬盘，等要用的时候，就重新加载进内存。
* * *
**Java中的API实现：**
位置： **Java.io.ObjectOutputStream java.io.ObjectInputStream**
**序列化：** **ObjectOutputStream类 -- > writeObject()**
`注：该方法对参数指定的obj对象进行序列化，把字节序列写到一个目标输出流中`
`按Java的标准约定是给文件一个.ser扩展名`
**反序列化:** **ObjectInputStream类 -- > readObject() **
注：该方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。
简单测试代码：
    import java.io.*;
    /*
    import java.io.ObjectOutputStream;
    import java.io.ObjectInputStream;
    import java.io.FileOutputStream;
    import java.io.FileInputStream;
    */
    public class Java_Test{
        public static void main(String args[]) throws Exception {
            String obj = "ls ";
            // 将序列化对象写入文件object.txt中
            FileOutputStream fos = new FileOutputStream("aa.ser");
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(obj);
            os.close();
            // 从文件object.txt中读取数据
            FileInputStream fis = new FileInputStream("aa.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            // 通过反序列化恢复对象obj
            String obj2 = (String)ois.readObject();
            System.out.println(obj2);
            ois.close();
        }
    }
我们可以看到，先通过输入流创建一个文件，再调用 **ObjectOutputStream类的
writeObject方法**`把序列化的数据写入该文件;然后调`
**用ObjectInputStream类的readObject方法**`反序列化数据并打印数据内容。`
实现Serializable和Externalizable接口的类的对象才能被序列化。
Externalizable接口继承自
Serializable接口，实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以采用默认的序列化方式
。  
对象序列化包括如下步骤：  
1） 创建一个对象输出流，它可以包装一个其他类型的目标输出流，如文件输出流；  
2） 通过对象输出流的writeObject()方法写对象。  
对象反序列化的步骤如下：  
1） 创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流；  
2） 通过对象输入流的readObject()方法读取对象。
**代码实例**
    我们创建一个Person接口，然后写两个方法：
        序列化方法：   创建一个Person实例，调用函数为其三个成员变量赋值，通过writeObject方法把该对象序列化，写入Person.txt文件中
        反序列化方法：调用readObject方法，返回一个经过饭序列化处理的对象
      在测试主类里面，我们先序列化Person实例对象，然后又反序列化该对象，最后调用函数获取各个成员变量的值。
测试代码如下：
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.text.MessageFormat;
    import java.io.Serializable;
    class Person implements Serializable {
        /**
         * 序列化ID
         */
        private static final long serialVersionUID = -5809782578272943999L;
        private int age;
        private String name;
        private String sex;
        public int getAge() {
            return age;
        }
        public String getName() {
            return name;
        }
        public String getSex() {
            return sex;
        }
        public void setAge(int age) {
            this.age = age;
        }
        public void setName(String name) {
            this.name = name;
        }
        public void setSex(String sex) {
            this.sex = sex;
        }
    }
    /**
     * ClassName: SerializeAndDeserialize
     * Description: 测试对象的序列化和反序列
     */
    public class SerializeDeserialize_readObject {
        public static void main(String[] args) throws Exception {
            SerializePerson();//序列化Person对象
            Person p = DeserializePerson();//反序列Perons对象
            System.out.println(MessageFormat.format("name={0},age={1},sex={2}",
                                                     p.getName(), p.getAge(), p.getSex()));
        }
        /**
         * MethodName: SerializePerson
         * Description: 序列化Person对象
         */
        private static void SerializePerson() throws FileNotFoundException,
                IOException {
            Person person = new Person();
            person.setName("ssooking");
            person.setAge(20);
            person.setSex("男");
            // ObjectOutputStream 对象输出流，将Person对象存储到Person.txt文件中，完成对Person对象的序列化操作
            ObjectOutputStream oo = new ObjectOutputStream(new FileOutputStream(
                    new File("Person.txt")));
            oo.writeObject(person);
            System.out.println("Person对象序列化成功！");
            oo.close();
        }
        /**
         * MethodName: DeserializePerson
         * Description: 反序列Perons对象
         */
        private static Person DeserializePerson() throws Exception, IOException {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File("Person.txt")));
            /*
                FileInputStream fis = new FileInputStream("Person.txt"); 
                ObjectInputStream ois = new ObjectInputStream(fis);
            */
            Person person = (Person) ois.readObject();
            System.out.println("Person对象反序列化成功！");
            return person;
        }
    }
* * *
**漏洞是怎么来的呢？**
我们既然已经知道了序列化与反序列化的过程，那么如果反序列化的时候，这些即将被反序列化的数据是我们特殊构造的呢！
如果Java应用对用户输入，即不可信数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象在产生过程中就有可能带来任意代码执行。
* * *
**漏洞分析**
**从Apache Commons Collections说起**
    项目地址
    官网：    http://commons.apache.org/proper/commons-collections/ 
    Github:  https://github.com/apache/commons-collections
由于对java序列化/反序列化的需求，开发过程中常使用一些公共库。
Apache Commons Collections
是一个扩展了Java标准库里的Collection结构的第三方基础库。它包含有很多jar工具包如下图所示，它提供了很多强有力的数据结构类型并且实现了各种集合工具类。
org.apache.commons.collections提供一个类包来扩展和增加标准的Java的collection框架，也就是说这些扩展也属于collection的基本概念，只是功能不同罢了。Java中的collection可以理解为一组对象，collection里面的对象称为collection的对象。具象的collection为
**set，list，queue** 等等，它们是 **集合类型** 。换一种理解方式，collection是set，list，queue的抽象。
作为Apache开源项目的重要组件，Commons
Collections被广泛应用于各种Java应用的开发，而正是因为在大量web应用程序中这些类的实现以及方法的调用，导致了反序列化用漏洞的普遍性和严重性。
Apache Commons Collections中有一个特殊的接口，其中有一个实现该接口的类可以通过调用Java的反射机制来 **调用任意函数**
，叫做InvokerTransformer。
    JAVA反射机制
        在运行状态中：
          对于任意一个类，都能够判断一个对象所属的类；
          对于任意一个类，都能够知道这个类的所有属性和方法；
          对于任意一个对象，都能够调用它的任意一个方法和属性；
        这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。
这里涉及到了很多概念，不要着急，接下来我们就来详细的分析一下。
* * *
**POC构造**
**** 经过对前面序列与反序列化的了解，我们蠢蠢欲动。那么怎样利用这个漏洞呢？
一丁点儿思路：
    构造一个对象 —— 反序列化 —— 提交数据
OK? 我们现在遇到的关键问题是： 什么样对象符合条件？如何执行命令？怎样让它在被反序列化的时候执行命令？
首先，我们可以知道，要想在java中调用外部命令，可以使用这个函数
Runtime.getRuntime().exec()，然而，我们现在需要先找到一个对象，可以存储并在特定情况下执行我们的命令。
**(1)Map类 -- > TransformedMap**
Map类是存储键值对的数据结构。 Apache Commons Collections中实现了TransformedMap
，该类可以在一个元素被添加/删除/或是被修改时(即key或value：集合中的数据存储形式即是一个索引对应一个值，就像身份证与人的关系那样)，会调用transform方法自动进行特定的修饰变换，具体的变换逻辑由Transformer类定义。
**也就是说，TransformedMap类中的数据发生改变时，可以自动对进行一些特殊的变换，比如在数据被修改时，把它改回来;
或者在数据改变时，进行一些我们提前设定好的操作。**
至于会进行怎样的操作或变换，这是由我们提前设定的，这个叫做transform。等会我们就来了解一下transform。
我们可以通过TransformedMap.decorate()方法获得一个TransformedMap的实例
    TransformedMap.decorate方法,预期是对Map类的数据结构进行转化，该方法有三个参数。
        第一个参数为待转化的Map对象