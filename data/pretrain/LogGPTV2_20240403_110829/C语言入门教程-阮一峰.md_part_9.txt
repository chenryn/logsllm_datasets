plus_one()
函数必须声明后使⽤，否则会报错。也就是说，⼀定要在使⽤ 之前，声明这个函数。如果像下
plus_one()
⾯这样写，编译时会报错。
int a = plus_one(13);
int plus_one(int n) {
return n + 1;
}
上⾯示例中，在调⽤ 之后，才声明这个函数，编译就会报错。
plus_one()
C 语⾔标准规定，函数只能声明在源码⽂件的顶层，不能声明在其他函数内部。
不返回值的函数，使⽤ 关键字表示返回值的类型。没有参数的函数，声明时要⽤ 关键字表示参
void void
数类型。
void myFunc(void) {
}
上⾯的 函数，既没有返回值，调⽤时也不需要参数。
myFunc()
函数可以调⽤⾃身，这就叫做递归（recursion）。下⾯是斐波那契数列的例⼦。
unsigned long Fibonacci(unsigned n) {
if (n > 2)
return Fibonacci(n - 1) + Fibonacci(n - 2);
else
return 1;
}
上⾯示例中，函数 调⽤了⾃身，⼤⼤简化了算法。
Fibonacci()
main() #
C 语⾔规定， 是程序的⼊⼝函数，即所有的程序⼀定要包含⼀个 函数。程序总是从这个函
main() main()
数开始执⾏，如果没有该函数，程序就⽆法启动。其他函数都是通过它引⼊程序的。
的写法与其他函数⼀样，要给出返回值的类型和参数的类型，就像下⾯这样。
main()
int main(void) {
printf("Hello World\n");
return 0;
}
上⾯示例中，最后的 表示函数结束运⾏，返回 。
return 0; 0
C 语⾔约定，返回值 表示函数运⾏成功，如果返回其他⾮零整数，就表示运⾏失败，代码出了问题。系
0
统根据 的返回值，作为整个程序的返回值，确定程序是否运⾏成功。
main()
正常情况下，如果 ⾥⾯省略 这⼀⾏，编译器会⾃动加上。所以，写成下⾯这样，效果完
main() return 0
全⼀样。
int main(void) {
printf("Hello World"\n);
}
由于 C 语⾔只会对 函数默认添加返回值，对其他函数不会这样做，所以建议总是保留 语
main() return
句，以便形成统⼀的代码⻛格。
参数的传值引⽤ #
如果函数的参数是⼀个变量，那么调⽤时，传⼊的是这个变量的值的拷⻉，⽽不是变量本身。
void increment(int a) {
a++;
}
int i = 10;
increment(i);
printf("%d\n", i);
上⾯示例中，调⽤ 以后，变量 本身不会发⽣变化，还是等于 。因为传⼊函数的是
increment(i) i 10 i
的拷⻉，⽽不是 本身，拷⻉的变化，影响不到原始变量。这就叫做 “传值引⽤”。
i
所以，如果参数变量发⽣变化，最好把它作为返回值传出来。
int increment(int a) {
a++;
return a;
}
int i = 10;
i = increment(i);
printf("%d\n", i);
再看下⾯的例⼦， 函数⽤来交换两个变量的值，由于传值引⽤，下⾯的写法不会⽣效。
Swap()
void Swap(int x, int y) {
int temp;
temp = x;
x = y;
y = temp;
}
int a = 1;
int b = 2;
Swap(a, b);
上⾯的写法不会产⽣交换变量值的效果，因为传⼊的变量是原始变量 和 的拷⻉，不管函数内部怎么
a b
操作，都影响不了原始变量。
如果想要传⼊变量本身，只有⼀个办法，就是传⼊变量的地址。
void Swap(int* x, int* y) {
int temp;
temp = *x;
*x = *y;
*y = temp;
}
int a = 1;
int b = 2;
Swap(&a, &b);
上⾯示例中，通过传⼊变量 和 的地址，函数内部就可以直接操作该地址，从⽽实现交换两个变量的
x y
值。
虽然跟传参⽆关，这⾥特别提⼀下，函数不要返回内部变量的指针。
int* f(void) {
int i;
return &i;
}
上⾯示例中，函数返回内部变量 的指针，这种写法是错的。因为当函数结束运⾏时，内部变量就消失
i
了，这时指向内部变量 的内存地址就是⽆效的，再去使⽤这个地址是⾮常危险的。
i
函数指针 #
函数本身就是⼀段内存⾥⾯的代码，C 语⾔允许通过指针获取函数。
void print(int a) {
printf("%d\n", a);
}
void (*print_ptr)(int) = &print;
上⾯示例中，变量 是⼀个函数指针，它指向函数 的地址。函数 的地址可以⽤
print_ptr print() print()
获得。注意， ⼀定要写在圆括号⾥⾯，否则函数参数 的优先级⾼于 ，整个
&print (*print_ptr) (int) *
式⼦就会变成 。
void* print_ptr(int)
有了函数指针，通过它也可以调⽤函数。
(*print_ptr)(10);
print(10);
⽐较特殊的是，C 语⾔还规定，函数名本身就是指向函数代码的指针，通过函数名就能获取函数地址。也
就是说， 和 是⼀回事。
print &print
if (print == &print)
因此，上⾯代码的 等同于 。
print_ptr print
void (*print_ptr)(int) = &print;
void (*print_ptr) = print;
if (print_ptr == print)
所以，对于任意函数，都有五种调⽤函数的写法。
print(10)
(*print)(10)
(&print)(10)
(*print_ptr)(10)
print_ptr(10)
为了简洁易读，⼀般情况下，函数名前⾯都不加 和 。
* &
这种特性的⼀个应⽤是，如果⼀个函数的参数或返回值，也是⼀个函数，那么函数原型可以写成下⾯这
样。
int compute(int (*myfunc)(int), int, int);
上⾯示例可以清晰地表明，函数 的第⼀个参数也是⼀个函数。
compute()
函数原型 #
前⾯说过，函数必须先声明，后使⽤。由于程序总是先运⾏ 函数，导致所有其他函数都必须在
main()
函数之前声明。
main()
void func1(void) {
}
void func2(void) {
}
int main(void) {
func1();
func2();
return 0;
}
上⾯代码中， 函数必须在最后声明，否则编译时会产⽣警告，找不到 或 的声
main() func1() func2()
明。
但是， 是整个程序的⼊⼝，也是主要逻辑，放在最前⾯⽐较好。另⼀⽅⾯，对于函数较多的程序，
main()
保证每个函数的顺序正确，会变得很麻烦。
C 语⾔提供的解决⽅法是，只要在程序开头处给出函数原型，函数就可以先使⽤、后声明。所谓函数原
型，就是提前告诉编译器，每个函数的返回类型和参数类型。其他信息都不需要，也不⽤包括函数体，具
体的函数实现可以后⾯再补上。
int twice(int);
int main(int num) {
return twice(num);
}
int twice(int num) {
return 2 * num;
}
上⾯示例中，函数 的实现是放在 后⾯，但是代码头部先给出了函数原型，所以可以正确编
twice() main()
译。只要提前给出函数原型，函数具体的实现放在哪⾥，就不重要了。
函数原型包括参数名也可以，虽然这样对于编译器是多余的，但是阅读代码的时候，可能有助于理解函数
的意图。
int twice(int);
int twice(int num);
上⾯示例中， 函数的参数名 ，⽆论是否出现在原型⾥⾯，都是可以的。
twice num
注意，函数原型必须以分号结尾。
⼀般来说，每个源码⽂件的头部，都会给出当前脚本使⽤的所有函数的原型。
exit() #
函数⽤来终⽌整个程序的运⾏。⼀旦执⾏到该函数，程序就会⽴即结束。该函数的原型定义在头⽂
exit()
件 ⾥⾯。
stdlib.h
可以向程序外部返回⼀个值，它的参数就是程序的返回值。⼀般来说，使⽤两个常量作为它的参
exit()
数： （相当于 0）表示程序运⾏成功， （相当于 1）表示程序异常中⽌。这两
EXIT_SUCCESS EXIT_FAILURE
个常数也是定义在 ⾥⾯。
stdlib.h
exit(EXIT_SUCCESS);
exit(EXIT_FAILURE);
在 函数⾥⾯， 等价于使⽤ 语句。其他函数使⽤ ，就是终⽌整个程序的运
main() exit() return exit()
⾏，没有其他作⽤。
C 语⾔还提供了⼀个 函数，⽤来登记 执⾏时额外执⾏的函数，⽤来做⼀些退出程序时的
atexit() exit()
收尾⼯作。该函数的原型也是定义在头⽂件 。
stdlib.h
int atexit(void (*func)(void));
的参数是⼀个函数指针。注意，它的参数函数（上例的 ）不能接受参数，也不能有返回
atexit() print
值。
void print(void) {
printf("something wrong!\n");
}
atexit(print);
exit(EXIT_FAILURE);
上⾯示例中， 执⾏时会先⾃动调⽤ 注册的 函数，然后再终⽌程序。
exit() atexit() print()
函数说明符 #
C 语⾔提供了⼀些函数说明符，让函数⽤法更加明确。
extern 说明符 #
对于多⽂件的项⽬，源码⽂件会⽤到其他⽂件声明的函数。这时，当前⽂件⾥⾯，需要给出外部函数的原
型，并⽤ 说明该函数的定义来⾃其他⽂件。
extern
extern int foo(int arg1, char arg2);
int main(void) {
int a = foo(2, 3);
return 0;
}
上⾯示例中，函数 定义在其他⽂件， 告诉编译器当前⽂件不包含该函数的定义。
foo() extern
不过，由于函数原型默认就是 ，所以这⾥不加 ，效果是⼀样的。
extern extern
static 说明符 #
默认情况下，每次调⽤函数时，函数的内部变量都会重新初始化，不会保留上⼀次运⾏的值。 说明
static
符可以改变这种⾏为。
⽤于函数内部声明变量时，表示该变量只需要初始化⼀次，不需要在每次调⽤时都进⾏初始化。也
static
就是说，它的值在两次调⽤之间保持不变。
#include 
void counter(void) {
static int count = 1;
printf("%d\n", count);
count++;
}
int main(void) {
counter();
counter();
counter();
counter();
}
上⾯示例中，函数 的内部变量 ，使⽤ 说明符修饰，表明这个变量只初始化⼀
counter() count static
次，以后每次调⽤时都会使⽤上⼀次的值，造成递增的效果。
注意， 修饰的变量初始化时，只能赋值为常量，不能赋值为变量。
static
int i = 3;