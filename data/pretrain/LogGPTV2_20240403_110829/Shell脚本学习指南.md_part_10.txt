ERE
匹配于1符号前或后的正则表达式。
()
ERE
匹配于方括号括起来的正则表达式群。
表3-2列举了一些简单的范例。
表3-2：简单的正则表达式匹配范例
表达式
匹配
位于一行上任何位置的7个字母：tolstoy
tolstoy
toletoy
7个字母tolstoy，出现在一行的开头
tolstoy$
7个字母tolstoy，出现在一行的结尾
*tolatoy$
正好包括tolstoy这7个字母的一行，没有其他的任何字符
[rt]olatoy
在一行上的任意位居中，含有Tolstoy或是tolstoy
tol.toy
在一行上的任意位居中，含有to1这3个字母，加上任何一个字符，再接
着toy这3个字母
tol.*toy
在一行上的任意位居中，含有to1这3个字母，加上任意的0或多个字符，
再继续toy这3个字母（例如，toltoy、tolstoy、tolwHOtoy等）
3.2.1.1
POSIX方括号表达式
为配合非英语的环境，POSIX标准强化其字符集范围的能力（例如，【a-z]），以匹配
www.TopSage.com
---
## Page 62
50
第3章
非英文字母字符。举例来说，法文的是字母字符，但以传统字符集【a-2]匹配并无该
字符。此外，该标准也提供字符序列功能，可用以在匹配及排序字符串数据时，将序列
里的字符视为一个独立单位（例如，将locale中ch这两个字符视为一个单位，在匹配
与排序时也应这样看待），越来越广为使用的Unicode字符集标准，进一步地增加了在简
单范围内使用它的复杂度，使得它们对于现代应用程序面言更加不适用。
POSIX也在一般术语上作了些变动，我们早先看到的范围表达式在UNIX里通常称为字
符集（characterclass），在POSIX的标准下，现在叫做方括号表达式（bracketexpression）。
在方括号表达式里，除了字面上的字符（例如z、：等等）之外，另有额外的组成部分，
包括：
字符集（Characterclass）
以[：与：1将关键字组合括起来的POSIX字符集。关键字描述各种不同的字符集，
例如英文字母字符、控制字符等，见表3-3。
排序符号（Collating symbol）
排序符号指的是将多字符序列视为一个单位。它使用（，与，1将字符组合括起来。
排序符号在系统所使用的特定locale上各有其定义。
等价字符集（Equivalence class）
等价字符集列出的是应视为等值的一组字符，例如e与é。它由取自于locale的名
字元素组成，以[=与=1括住。
这三种构造都必须使用方括号表达式。例如[[：alpba：]11匹配任一英文字母字符或惊
吸号（1），而【[.eh.1]则匹配于ch（排序元素），但字母c或h则不是。在法文French
的locale里，【[=e=]】可能匹配于e、é、é、é或é，接下来会有字符集、排序符号，以
及等价字符集的详细说明。
表3-3描述POSIX字符集。
表3-3：POSIX字符集
类别
匹配字符
类别
匹配字符
[：alnum：]数字字符
[:lower:]
小写字母字符
[：alpha：]字母字符
[:print :]
可显示的字符
[：blank：]空格（space）与定位（tab）字符
[:punct :]
标点符号字符
[:cntrl:]
控制字符
[:space:]
空白（whitespace）字符
[：digit：]数字字符
[:upper:]
大写字母字符
[:graph:）非空格（aonspace）字符
[：xdigit：]十六进制数字
www.TopSage.com
---
## Page 63
查找与替接
51
BRE与ERE共享一些常见的特性，不过仍有些重要差异。我们会从BRE的说明开始，
再介绍ERE附加的meta字符，最后针对使用相同（或类似）meta字符但拥有不同语义
（或含义）的情况进行说明。
3.2.2基本正则表达式
BRE是由多个组成部分所构建，一开始提供数种匹配单个字符的方式，而后又结合额外
的meta字符，进行多字符匹配。
3.2.2.1匹配单个字符
最先开始是匹配单个字符。可采用集中方式做到：以一般字符、以转义的mcta字符、以
：（点号）meta字符，或是用方括号表达式：
一般字符指的是未列于表3-1的字符，包括所有文字和数字字符、绝大多数的空白
（whitespace）字符以及标点符号字符。因此，正则表达式a，匹配于字符a。我们
可以说，一般字符所表示的就是它们自己，且这种用法应是最直接且易于理解的。
所以，shel1匹配十 shel1；WoRd匹配十 WoRd，但不匹配十word,
若meta字符不能表示它们自己，那当我们需要让meta字符表示它们自己的时候，
该怎么办？答案是转义它。在前面放一个反斜杠来做到这一点。因此，\*匹配于
字面上的*，1\匹配于字面上的反斜杠，还有\[匹配于左方括号（若将反斜杠放
在一般字符前，则POSIX标准保留此行为模式为未定义状态。不过通常这种情况
下反斜杠会被忽略，只是很少人会这么做）。
，（点号）字符意即“任一字符”。因此，a.c匹配于abc、aac以及aqc。单个点
号用以表示自己的情况很少，它多半与其他mcta字特搭配使用，这一结合充许匹
配多个字符，这部分稍后会提及。
最后一种匹配单个字符的方式是使用方括号表达式（bracketexpression）。最简单
的方括号表达式是直接将字符列表放在方括号里，例如，[aelouy]表示的就是所
有小写元音字母，举例来说，c[aelouy]t匹配于cat、cot以及cut（还有cet、
cit，与cyt），但不匹配于cbt。
在方括号表达式里，^放在字首表示是取反（complement）的意思；也就是说，不
在方括号列表里的任意字符。所以[^aelouy]指的就是小写元音字符以外的任何
字符，例如：大写元音字母、所有辅音字母、数字、标点符号等。
将所有要匹配的字母全列出来是一件无聊又麻填的事。例如[0123456789】指所有数字，
或【0123456789abcdefABCDBF】表示所有十六进制数字。因此，方括号表达式可以包
括字符的范围。像前面提到的两个例子，就可以分别以【0-9]与[0-9a-fA-F]表示。
www.TopSage.com
---
## Page 64
52
十一第多常区
网
警告：一开始，范围表示法匹配字符时，是根据它们在机器中字符集内的数值，因此字符集的不O71
同（ASCIIv.sEBCDIC），会使得表示法无法百分之百地具有可移植性，但实际上问题不
大，因为儿乎所有的UNIX系统都是使用ACSII，
以POSIX的locale来说，某些地方可能会有间题。范围使用的是各个字符在locale排序序
列里所定义的位置，与机器字符集里的数值不相关。因此，范围表示法仅在程序运行在
locale设置为“POSIX之下，才具可移植性。前面所提及的POSIX字符集表示法，提供
一种可移植方式表示概念，例如“所有数字”，或是“所有字每字符”，因此在方括号表达
式内的范围不建议用在新程序里。
在前面的3.2.1节里，我们曾简短地介绍POSIX的排序符号（collating symbol）、等价
字符集（equivalence class）以及字符集（characterclass）。这些是方括号表达式最后
出现的组成部分。接下来我们就要说明它们的构造方式。
在部分非英语系的语言里，为了匹配需要，某些成对的字符必须视为单个字符。像这样
的成对字符，当它们与语言里的单个字符比较时，都有其排序的定义方式。例如，在
Czech与Spanish语系下，ch两个字符会保持连续状态，在匹配时，会视为单个独立单
位。
排序（collating）是指给予成组的项目排列顺序的操作。一个POSIX的排序元素由当前
locale中的元素名称组成，并由（.与.1括起来。以刚才讨论的ch来说，locale可能会
）
[.ch.]是存在的，那幺正则表达式[ab[.ch.]de]则匹配于字符a、b、d或e，或者
是成对的ch：而单独的c或h字符则不匹配。
等价字符集（equivalenceclass）用来让不同字符在匹配时视为相同字符。等价字符集
将类别（class）名称以（=与=]括起来。举例来说，在French的locale下，可能有（=e=]
这样的等价字符集，在此类别存在的情况下，正则表达式[a[=e=]iouy]就等同于所有
小写英文字每元音，以及字母é、é等。
最后一个特殊组成部分：字符集，它表示字符的类别，例如数字、小写与大写字母、标
点符号、空白（whitespace）等。这些类别名称定义于（：与：]之间。完整列表如表3-
3所示。前POSIX（pre-POSIX）范围表达式对于十进制与十六进制数字的表示（应该）
是具有可移植性的，可使用字符集：[[:digit：]]与[[：xdigit：]]达成。
注意：排序元素、等价字符集以及字符集，都仅在方括号表达式的方括号内认可，也就是说，像
[：alpha：]这样的正则表达式，匹配字符为a、1、D、h以及：，表示所有英文字母的正
确写法应为[[1alpba:1]，
www.TopSage.com
---
## Page 65
查找与替换
53
在方括号表达式中，所有其他的meta字符都会失去其特殊含义。所以[*\.1匹配于字
面上的星号、反斜杠以及句点。要让1进人该集合，可以将它放在列表的最前面：[1*\.]，
将1增加至此列表中。要让减号字符进入该集合，也请将它放到列表最前端：【-*\.]。
若你需要右方括号与减号两者进入列表，请将右方括号放到第一个字符、减号放到最后
一个字符：[1*\，-]。
最后，POSIX明确陈述：NUL字符（数值的零）不需要是可匹配的。这个字符在C语
言里是用来指出字符事结尾，而POSIX标准则希望让它是直截了当的，通过正规C字符
串的使用实现其功能。除此之外，另有其他个别的工具程序不允许使用，（点号）meta
字符或方括号表达式来进行换行字符匹配。
3.2.2.2后向引用
BRE提供一种叫后向引I用（backreferences）的机制，指的是“匹配于正则表达式匹配
的先前的部分”，使用后向引用的步骤有两个。第一步是将子表达式包围在\（与\1里；
单个模式里可包括至多9个子表达式，且可为嵌套结构。
下一步是在同一模式之后使用\digit，digit指的是介于1至9的数字，指的是“匹配
于第个先前方括号内子表达式匹配成功的字符”，举例如下：
模式
\(ab\)\(cd\)[def} *\2\1
abcdcdab, abcdeeeodab, abcdddeeffodab, *
\(why\).*\1
一行里重现两个why
（[[：alpha:]_][[：almum：]_J*\）=\1;简易C/C++赋值语句]
后闻引用在寻找重复字以及医配引号时特别好用：
1[*]\），*\1匹配CL单引号或双引号括起来的手，例如'fo0'或“bax”
在这种方法下，就无须担心是单引号或是双引号先找到，
3.2.2.3单个表达式匹配多字符
匹配多字符最简单的方法就是把它们一个接一个（连接）列出来，所以正则表达式ab匹
配于ab，，.（两个点号）匹配于任意两个字符，而[[：upper：]][[：lower：]1则匹配
于任意一个大写字符，后面接着任意一个小写字符。不过，将这些字符全列出来只有在
简短的正则表达式里才好用。
虽然，（点号）meta字符与方括号表达式都提供了一次匹配一个字符的很好方式，但正
则表达式真正强而有力的功能，其实是在修饰符（modifier）meta字符的使用上。这类
meta字符紧接在具有单个字符的正则表达式之后，且它们会改变正则表达式的含义。
www.TopSage.com
---
## Page 66
54
第3章
最常用的修饰符为星号（*），表示“匹配0个或多个前面的单个字符”，因此，ab*c表
示的是“匹配1个a、0或多个b字符以及ae”，这个正则表达式匹配的有ac、abc、
abbc、abbbe 等。
正则表达式ab*e下，文本aQc是不匹配的--即便是aQc里拥有0个b字符。相对的，
以文本ac来说，b*在ab*c里表述的是匹配a与c之间含有空字符事（null string）
意即长度为0的字符中（若你先前没遇过字符中长度为0的概念，这里可能得花点时间消
化。总之，它在必要的时候会派得上用场，这在本章稍后会有所介绍）。
*修饰符是好用的，但它没有限制，你不能用·表示“匹配三个字符，而不是四个字符”
而要使用一个复杂的方括号表达式，表明所需的匹配次数一这也是件很麻烦的事。区
间表达式（intervalexpressions）可以解决这类问题。就像*，它们一样接在单个字符
正则表达式后面，控制该字符连续重复几次即为匹配成功，区间表达式是将一个或两个
数字，放在\（与八）之间，有3种变化，如下：
前置正则表达式所得结果重现n次
\（n.\）前置正则表达式所得的结果重现至少n次
{n，m）前置正期表达式所得的结果重现n至n次
这两项分别是：a\（5\}与q\{10，42\}。
n与m的值必须介于0至RE_DUP_MAX（含）之间，RE_DUP_MAX是POSIX定义的符号
型常数，且可通过getconf命令取得。RE_DUP_MAx的最小值为255：不过部分系统
允许更大值，在我们的GNU/Linux系统中，就遇到很大的值：
$ getconf RE_DUP_MAX
3.2.2.4文本匹配锚点
再介绍两个meta字符就能完成整个BRE的介绍了。这两个meta字符是貌字符号（~）
与货币符号（S），它们叫做铺点（anchor），因为其用途在限制正则表达式匹配时，针
对要被匹配字符申的开始或结尾处进行匹配（~在此处的用法与方括号表达式里的完全
不同）。假定现在有一串要进行匹配的字：abcABCdefDEF，我们以表3-4列举匹配的范
例。
www.TopSage.com
---
## Page 67
查找与替换
表3-4：正则表达式内锚点的范例
Sage.com
模式
是否匹配匹配文本（粗体）/匹配失败的理由
ABC
是
居中的第4、5及6个字符：abcABCdefDEF
^ABC
否
限定匹配字符串的起始处
def
是
居中的第7、8及9个字符：abcABCdefDEP
defs
否
限制匹配字符串的结尾处
[[：upper：]]\(3\)
是
居中的第4、5及6个字符：abcABCdefDEF
[[：upper]]\(3\）$
是
结尾的第10、11及12个字符：abcDEFdefDBF
[[：alpha:}1\(3\}
是
起始的第1、2及3个字符：abcABCdefDEF
与$也可同时使用，这种情况是将括起来的正则表达式匹配整个字符串（或行）。有时