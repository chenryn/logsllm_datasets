\[root@proxy nginx-1.12.2\]# nginx -s reload
### 3）客户端使用访问代理服务器测试\--with-stream轮询效果
**客户端远程测试:**
**远程客户端远程用ssh
方式远程连接nginx调度器4层代理(本实验的192.168.4.5),实际上轮询连接了两个web服务器,192.168.2.100和192.168.2.200**
\[root@client \~\]# ssh -p 12345 192.168.4.5
#客户端地址:192.168.4.10开始SSH
root@192.168.4.5\'s password:
Last login: Mon Jan 21 15:55:12 2019 from 192.168.2.5
\[root@Web1111 \~\]# exit #Web1111地址是:192.168.2.100
登出
Connection to 192.168.4.5 closed.
\[root@client \~\]# ssh -p 12345 192.168.4.5
root@192.168.4.5\'s password:
Last login: Mon Jan 21 16:05:34 2019 from 192.168.2.5
\[root@Web222 \~\]# #Web222地址是:192.168.2.200
\-\-\-\-\-\-\-\-\--可多个stream\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
stream {
upstream 名称2 {
server 192.168.2.100:22; #ssh端口为22
server 192.168.2.200:22;
}
server {
listen 23456; #启用23456端口为nginx监听端口
proxy_connect_timeout 1s; #连接超时
proxy_timeout 3s; #访问超时
proxy_pass 名称2;
}
}
# 3 案例3：Nginx常见问题处理
3.1 问题
本案例要求对Nginx服务器进行适当优化，解决如下问题，以提升服务器的处理性能：
1.  如何自定义返回给客户端的404错误页面
2.  如何查看服务器状态信息
3.  如果客户端访问服务器提示"Too many open files"如何解决
4.  如何解决客户端访问头部信息过长的问题
5.  如何让客户端浏览器缓存数据
6.  日志切割
7.  开启gzip压缩功能，提高数据传输效率
8.  开启文件缓存功能
然后客户机访问此Web服务器验证效果：
-   使用ab压力测试软件测试并发量
-   编写测试脚本生成长头部信息的访问请求
-   客户端访问不存在的页面，测试404错误页面是否重定向
## 步骤一：自定义报错页面
### 1)：自定义404报错页面
\[root@client \~\]# firefox http://192.168.4.5/asdfasdfasdf
 ＃访问不存在的网页
404 Not Found
nginx/1.12.2
\[root@proxy conf\]# vim /usr/local/nginx/conf/nginx.conf
server ｛
  ．．．．
error_page 404
/404.html;  ＃定义报错返回的页面，事先准备好404.html文件
error_page 505
/505.html;  ＃定义报错返回的页面，事先准备好505.html文件
charset utf-8;                  ＃字符集支持中文
｝
### 2）修改Nginx配置文件，自定义报错页面
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
error_page 404 /40x.html; //自定义错误页面
.. ..
\[root@proxy \~\]# vim /usr/local/nginx/html/40x.html //编辑错误页面
Oops,No NO no page ...
\[root@proxy \~\]# nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 3）优化后，客户端使用浏览器访问不存在的页面，会提示自己定义的40x.html页面
\[root@proxy conf\]# echo \"\123\" \>/usr/local/nginx/html/404.html
\[root@client \~\]# firefox
http://192.168.4.5/asdfasdfasdf  ＃访问不存在的网页
123
# 4）nginx优化
## 步骤一 常见http状态码可用参考表-1所示。
![table001 (1)](media/image17.png){width="4.386111111111111in"
height="2.9368055555555554in"}
## 步骤二：如何查看服务器状态信息（非常重要的功能）
1.  编译安装时使用\--with-http_stub_status_module开启状态页面模块
重装nginx
\[root@Web1111 nginx-1.12.2\]# .\\configure \\
\> \--prefix=/usr/local/nginx \\
\> \--user=nginx \\
\> \--group=nginx \\
\> \--with-http_ssl_module \\
\> \--with-stream \\
\> \--with-http_stub_status_module #开启状态页面模块
\[root@proxy nginx-1.12.2\]# vim /usr/local/nginx/conf/nginx.conf
location /suibianqiao {
stub_status on;
}
\[root@proxy nginx-1.12.2\]# firefox 192.168.4.5/suibianqiao
Active connections: 1
server accepts handled requests
6 6 102
Reading: 0 Writing: 1 Waiting: 0
#如果前面两个数字大,说明服务器大部分流量去处理;连接/断开请求,数据传输并不多.
nginx 重启,数字重置
HTTP(1.0) 1次链接,1次请求
HTTP(1.1) 1次链接,多次请求
Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。 6
Handled：已经处理客户端的连接总数量（一般与accepts一致，除非服务器限制了连接数量）。
6
Requests：客户端发送的请求数量。 102
Reading：当前服务器正在读取客户端请求头的数量。
#数字为0,表示服务器无压力
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应。
nginx 重启,数字重置
静态页面：主要是消耗内存与网卡流量
动态页面：主要是消耗CPU ,运行脚本
## 步骤三：优化Nginx并发量
1.  优化前使用ab高并发测试
-c并发量 -n 次数 -n必须大于-c
\[root@proxy \~\]# nginx
\[root@proxy \~\]# ab -n 100 -c 100 http://192.168.4.5/
\[root@proxy \~\]# curl http://192.168.4.5/suibianqiao
Active connections: 1
server accepts handled requests
101 101 101
Reading: 0 Writing: 1 Waiting: 0
\[root@proxy \~\]# ab -n 100 -c 100 http://192.168.4.5/
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
#以下为全局配置：
worker_processes 1; #启用多少可进程,跟CPU核心数量一致,例如八核就填8
events {
worker_connections 65536; #每个worker_能满足多少并发量,默认为1024
use epoll; #epoll： nginx的查询方式,
}
epoll 是nginx的查询方式,
3）优化Linux内核参数（最大文件数量）
\[root@proxy \~\]# ulimit -a #查看所有属性
core file size (blocks, -c) 0
data seg size (kbytes, -d) unlimited
scheduling priority (-e) 0
file size (blocks, -f) unlimited
pending signals (-i) 3845
max locked memory (kbytes, -l) 64
max memory size (kbytes, -m) unlimited
open files (-n) 1024
pipe size (512 bytes, -p) 8
POSIX message queues (bytes, -q) 819200
real-time priority (-r) 0
stack size (kbytes, -s) 8192
cpu time (seconds, -t) unlimited
max user processes (-u) 3845
virtual memory (kbytes, -v) unlimited
file locks (-x) unlimited
\[root@proxy \~\]# ulimit -Sn 10000 #设置软限制(临时规则)
\[root@proxy \~\]# ulimit -Hn 10000 #设置硬限制(临时规则)
\[root@proxy \~\]# vim /etc/security/limits.conf
#永久设置,内核参数,必须重启生效
.. ..
\* soft nofile 100000
\* hard nofile 100000
#该配置文件分4列，分别如下：
#用户或组(\*) 硬限制(hard)或软限制(soft) 需要限制的项目(nofile) 限制的值
## ab工具: 压力测试
![](media/image18.png){width="6.0in" height="0.4131944444444444in"}
\[root@proxy \~\]#yum --y install http-tools \#
apache自带的压力测试工具,安装httpd-tools而来
\[root@proxy \~\]#ab --V #查看版本
\[root@proxy \~\]# ab -n 2000 -c 2000 http://192.168.4.5/ #-c 并发数
--n请求总数 -n必须\>=-c
Percentage of the requests served within a certain time (ms
50% 12
66% 24
75% 32
80% 32
90% 48
95% 48
98% 49
99% 49
100% 202 (longest request)
\[root@proxy \~\]# curl 192.168.4.5/suibianqiao
Active connections: 1
server accepts handled requests
18104 18104 16649
Reading: 0 Writing: 1 Waiting: 0
**其他压力测试工具(需要额外下载)**：http_load、webbench、siege
## 步骤四：优化Nginx数据包头缓存（414）
**出现414报错怎么解决**
1）优化前，使用脚本测试长头部请求是否能获得响应
\[root@proxy \~\]# cat lnmp_soft/buffer.sh
\-\-\-\-\-\-\--脚本\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#!/bin/bash
URL=http://192.168.4.5/index.html?
for i in {1..5000}
do
URL=\${URL}v\$i=\$i
done
curl \$URL #经过5000次循环后，生成一个很长的URL地址栏,并访问
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\[root@proxy \~\]# ./buffer.sh
.. ..
\\414 Request-URI Too Large\\
#报错:提示头部信息过大
2）修改Nginx配置文件，增加数据包头部缓存大小,解决414报错
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
client_header_buffer_size 1k; //手打上去,默认请求包头信息的缓存
large_client_header_buffers 4 4k;
//手打上去,大请求包头部信息的缓存个数与容量
.. ..
}
\[root@proxy \~\]# nginx -s reload
3）优化后，使用脚本测试长头部请求是否能获得响应
## 步骤五：浏览器本地缓存静态数据
(每个浏览器都有,只是命令不一)
1）使用Firefox浏览器查看缓存
以Firefox浏览器为例，在Firefox地址栏内输入about:cache将显示Firefox浏
览器的缓存信息，如图-3所示，点击List Cache Entries可以查看详细信息。
3）修改Nginx配置文件，定义对静态页面的缓存时间(适合静态)
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
server {
listen 80;
server_name localhost;
location / {
root html;
index index.html index.htm;
}
location \~\* \\.(jpg\|jpeg\|gif\|png\|css\|js\|ico\|xml)\$ {
#在server中添加location
expires 30d; //定义客户端缓存时间为30天
}