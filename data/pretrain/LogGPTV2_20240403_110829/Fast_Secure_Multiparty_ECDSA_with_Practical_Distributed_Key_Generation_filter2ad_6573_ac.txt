A basic multiplication functionality (from additive shares) can be deﬁned by having each party Pi
provide ai and bi for input, and then returning ci to party Pi, where c1, . . . , cn are random under
the constraint that(cid:80)n
a · G is also returned to the parties, where a = (cid:80)n
(cid:96)=1 c(cid:96) = ((cid:80)n
(cid:96)=1 a(cid:96)) · ((cid:80)n
(cid:96)=1 b(cid:96)) mod q
We will actually need an extended version of this multiplication functionality, where the value
(cid:96)=1 a(cid:96) ((G, G, q) denotes the description of a
group of order q, with generator G). Although this looks “out of place”, this additional value can
be computed eﬃciently while computing Fmult. For this reason, we combine them together. In
addition, in our protocol, we need to enable multiplication with the same value more than once.
This is achieved by having an “input” command, and then enabling multiplications between inputs.
Finally, we deﬁne the functionality for random input shares only for the honest parties, whereas
corrupted parties can choose their own shares.3 This is needed in our proof of security (see Game 2
in the proof of Theorem B.1) and is anyway the way the functionality is used in order to securely
compute ECDSA. Finally, we add a local aﬃne transformation on an encrypted/shared input, that
is needed for computing ECDSA. This is a local operation only, and so is formalized by the honest
parties providing these values. See Functionality 4.1 for the speciﬁcation of Fmult that we use in
our protocol.
Observe that Fmult as described here is not a “standard” multiplication functionality and is
tailored to what we need for securely computing Fecdsa. Arguably, as such, one should call it
an ECDSA helper functionality. However, since it’s main operation (and most diﬃcult one) is
multiplications, we call it extended multiplication.
3As such, the functionality is “corruption aware”, meaning that it behaves diﬀerently for honest parties and
corrupted parties. This is standard in ideal-model formalizations.
10
FUNCTIONALITY 4.1 (The Extended Multiplication Functionality Fmult)
The functionality Fmult is given the set of indices of corrupted parties C ⊆ [n], and works with
parties P1, . . . , Pn as follows:
• Upon receiving (init, G, G, q) from all parties, Fmult stores (G, G, q).
If some (G, G, q) has
already been stored, then ignore the message.
• Upon receiving (input, sid, ai) from a party Pi with i ∈ C, if no value (sid, i,·) value is stored,
then Fmult stores (sid, i, ai). Else, the message is ignored.
• Upon receiving (input, sid) from a party Pi with i /∈ C, if no value (sid, i,·) value is stored, then
Fmult chooses a random ai ← Zq, returns (input, sid, ai) to Pi, and stores (sid, i, ai). Else, the
message is ignored.
• If some (sid, i, ai) has been stored for all i ∈ [n] then Fmult computes a =(cid:80)n
(cid:96)=1 a(cid:96) mod q, stores
(sid, a) and sends (input, sid) to all parties.
• Upon receiving (mult, sid1, sid2) from all parties, Fmult checks that some (sid1, a) and (sid2, b)
values have been stored. If yes, then Fmult sets c = a· b mod q and sends (mult-out, sid1, sid2, c)
to all parties.
• Upon receiving (aﬃne, sid1, sid2, x, y) from the honest parties with x, y ∈ Zq, functionality
Fmult checks that some (sid1, a) has been stored. If yes, Fmult computes b = a · x + y mod q,
stores (sid2, b), and sends (aﬃne, sid1, sid2, x, y) to A.
• Upon receiving (element-out, sid) from all parties, functionality Fmult checks that some (sid, a)
has been stored. If yes, Fmult computes A = a · G and sends (element-out, sid, A) to all parties.
In addition, Fmult sends A1, . . . , An to the ideal adversary, where Ai = ai·G (with ai as received
in input for sid).
has a share di such that P = d · G, with d = (cid:80)n
each other, and then all parties simply check that V =(cid:80)n
since we require that nothing be learned if the input is not a Diﬃe-Hellman tuple, and (cid:80)n
4.2 Checking Diﬃe-Hellman Tuples
In order to securely compute Fmult, one step involves the parties securely checking that a tuple
(G,P, U, V ) is a Diﬃe-Hellman tuple or not. As part of the initialization of Fmult, each party
(cid:96)=1 d(cid:96). Thus, (G,P, U, V ) is a Diﬃe-Hellman
tuple if and only if V = d · U . This can be veriﬁed by the parties each sending Ui = di · U to
(cid:96)=1 Ui. However, this will not be secure
(cid:96)=1 Ui
reveals the value T such that (G,P, U, V − T ) is a Diﬃe-Hellman tuple. Thus, the parties ﬁrst
each rerandomize the tuple and then continue as above. This is rather standard, and the full
speciﬁcation is therefore deferred to Section 7. We remark that as part of the protocol, the parties
need to verify values using P1, . . . ,Pn such that Pi = di · G for every i ∈ [n]. (In our multiplication
protocol, these values are learned in the initialization phase.) We deﬁne the ideal functionality
FcheckDH in Functionality 4.2, and show how to securely compute it in Section 7. The cost of
securely computing FcheckDH is 11 + 10(n− 1) group exponentiations per party, each party sending
7 group elements (or equivalent) to each other party, and 3 rounds of communication.
11
FUNCTIONALITY 4.2 (FcheckDH - Check DH Tuple)
FcheckDH runs with parties P1, . . . , Pn, as follows:
1. Upon receiving (init, i,Pi, di) from party Pi, FcheckDH veriﬁes that Pi = di · G. If not, it sends
abort to all parties. Otherwise, it stores {P1, . . . ,Pn} and sends {P1, . . . ,Pn} to all parties.
2. Upon receiving (check, i, U, V, di) from party Pi for every i ∈ [n], FcheckDH veriﬁes that Pi =
(cid:96)=1 d(cid:96) mod q. If all conditions were
di · G for all i ∈ [n] and that V = d · U where d = (cid:80)n
satisﬁed, FcheckDH sends accept to all the parties. Otherwise, it sends reject to all parties.
4.3 Securely Computing Fmult
We describe separate subprotocols for init, input, element-out, aﬃne and mult. We remark that init
must be called ﬁrst, and all other calls to Fmult are ignored until init is completed. In our description
of the protocol, each round is structured as follows: (a) each party receives the messages sent by
the other parties and/or ideal functionalities in the previous round, (b) each party carries out local
computation, and (c) each party sends the messages from this round to other parties and/or to
ideal functionalities.
party holding shares d1, . . . , dn of the private key (meaning that (cid:80)n
Init: The init procedure is used to generate an ElGamal (in-the-exponent) public key P, with each
(cid:96)=1 d(cid:96) = d where P = d · G).
In addition to each party storing its share di of the private key, and the public key P, the parties
also store all values P1, . . . ,Pn where Pi = di · G. These latter values are used inside the protocol
for FcheckDH in order to enforce the parties to use their correct value di. Speciﬁcally, if a party is
supposed to compute Y = di · X for some value X, then it can prove that it behaved honestly by
proving that (G, X,Pi, Y ) is a Diﬃe-Hellman tuple (since Pi = di · G and Y = di · X). Thus, the
parties need to have stored Pi.
The protocol for init is basically a type of simulatable coin tossing. In the ﬁrst round, each
party generates a value Pi = di · G and prepares a zero-knowledge proof of knowledge of di, and
commits to the value and proof. Then, in the second round, the parties decommit. Finally, P is set
to be the sum of all Pi. This is simulatable in the ideal commitment hybrid model using standard
simulation techniques. See Protocol 4.3 for a full speciﬁcation.
(cid:80)n
Input: The input procedure is used to generate an ElGamal in-the-exponent encryption of a =
(cid:96)=1 ai mod q, where each Pi chooses ai; the honest parties choose ai randomly whereas the cor-
rupted parties can choose ai as they wish (as prescribed in Fmult). In order to prevent the corrupted
parties from making their ai values dependent on the honest parties’ values (and thus inﬂuencing
the result a), each party encrypts its ai and provides a zero-knowledge proof of knowledge of the
encrypted value. The parties generate an encryption of a by using the additively homomorphic
properties of ElGamal in the exponent. In addition to storing the ﬁnal ciphertext, they store each
party’s encryption and this is used to enforce correct behavior later. See Protocol 4.4 for a full
speciﬁcation.
12
PROTOCOL 4.3 (Initialization Subprotocol of Fmult)
Upon joint input (init, G, G, q), number of parties n, and a unique session identiﬁer sid, the parties
run any initialization steps needed for πpriv
mult (e.g., base oblivious transfers). In parallel, each party
Pi works as follows:
1. Round 1: Party Pi chooses a random di ← Zq, and computes Pi = di · G. Then, Pi sends
com-zk (i.e., Pi sends a commitment to Pi and a POK of its discrete
(ComProve, init, i,Pi, di) to F RDL
log).
2. Round 2: Upon receiving (ProofReceipt, init, j) from F RDL
com-zk for every j ∈ [n], party Pi sends
(DecomProof, init, i) to F RDL
com-zk. In addition, Pi sends (init, i,Pi, di) to FcheckDH.
3. Output: Pi receives (DecomProof, init, j,Pj, βj) from F RDL
com-zk for every j ∈ [n], and receives
(P1, . . . ,Pn) from FcheckDH. If some βj = 0 (meaning that a proof is not valid), or the
Pj values received from F RDL
com-zk do not match the Pj values received from FcheckDH then it
(cid:96)=1 P(cid:96) and stores
(di,P,{P(cid:96)}n
aborts. Otherwise, Pi locally computes the ElGamal public-key P =(cid:80)n
(cid:96)=1).
PROTOCOL 4.4 (Input Subprotocol of Fmult)
Upon input (input, sid, ai) to Pi for all i ∈ [n], each party Pi works as follows:
1. Round 1: Pi chooses a random si ← Zq and computes (Ui, Vi) = EGexpEncP (ai; si). Then, Pi
sends (proof, sid, i, (P, Ui, Vi), (ai, si)) to F REG
2. Output: Pi receives (proof, sid, j, (P, Uj, Vj), βj) from F REG
βj = 0, then Pi aborts. Otherwise, Pi computes U =(cid:80)n
zk
.
(cid:96)=1 U(cid:96) and V =(cid:80)n
, for every j ∈ [n]\{i}. If some
(cid:96)=1 V(cid:96) and stores
zk
(sid, (U, V ), ai, si,{(U(cid:96), V(cid:96))}n
Pi outputs (input, sid).
(cid:96)=1).
In the point-to-point model, it is necessary for the parties to ensure that they all received the
same input. This is achieved by sending hashes of all received ciphertexts (U1, V1), . . . , (Un, Vn)
after receiving output. This can be done in parallel to the continuation of the protocol, and we
therefore do not add it as a separate round.
Get Element: As deﬁned in the Fmult ideal functionality, the element-out procedure is used by
the parties to obtain A = a · G for a value a that was input. Recall that in order to get input
a, each party Pi encrypted ai and the sum of all of these values equal a. As such, all that is
needed here is for each party Pi to provide Ai = ai · G and prove that this is generated using
the same value ai as was encrypted in the input phase. Recall that the parties store each party’s
encryption (Ui, Vi) of ai, meaning that Ui = si · G and Vi = si · P + ai · G. However, this means
that (G,P, Uj, Vj − Aj) = (G,P, si · G, si ·P) and so is a Diﬃe-Hellman tuple. Thus, Pi can provide
Ai and prove that it provided the correct Ai very eﬃciently by sending a zero-knowledge proof
of a Diﬃe-Hellman tuple. The ﬁnal value A is obtained easily by summing all Ai values. See
Protocol 4.5 for a full speciﬁcation.
13
PROTOCOL 4.5 (Element-Out Subprotocol of Fmult)
Upon input (element-out, sid), if Pi has some (sid, (U, V ), ai, si,{(U(cid:96), V(cid:96))}n
ceeds as follows (otherwise it ignores the input):
1. Round 1: Pi computes Ai = ai · G, and sends Ai to Pj for all j ∈ [n]\{i}, and sends
(cid:96)=1) stored, then it pro-
(proof, sid, i, (G,P, Ui, Vi − Ai), si) to F RDH
2. Output: Pi receives (proof, sid, j, (G,P, Uj, Vj − Aj), βj) from F RDH
some βj = 0, then Pi aborts. Otherwise, Pi computes A = (cid:80)n
zk
.
, for all j ∈ [n]\{i}. If
zk
(cid:96)=1 A(cid:96). Then, Pi outputs
(element-out, sid, A).
Aﬃne: The aﬃne procedure merely involves scalar multiplication and scalar addition to a given
ciphertext. Since ElGamal in-the-exponent is additively homomorphic, these operations can be
easily carried out on any value that was input. We remark that since the parties store their local
shares and randomness in all input values, and the encryptions of all the parties’ shares, these must
also be adjusted. However, this is also straightforward using the same homomorphic operations.
See Protocol 4.6 for a full speciﬁcation.
PROTOCOL 4.6 (Aﬃne Subprotocol of Fmult)
Upon input (aﬃne, sid1, sid2, x, y), if Pi has some (sid1, (U, V ), ai, si,{(U(cid:96), V(cid:96))}n
sid2 has not yet been used, then it proceeds as follows (otherwise it ignores the input):
1. Pi locally computes U(cid:48) = x · U and V (cid:48) = x · V + y · G, for all (cid:96) ∈ [n] it computes U(cid:48)
(cid:96) )}n
n · G. Then, Pi stores(cid:0)sid2, (U(cid:48), V (cid:48)), ai · x + y
(cid:96) = x · V(cid:96) + y
n , x · si,{(U(cid:48)
and V (cid:48)
(cid:96), V (cid:48)
(cid:1).
(cid:96)=1) stored and
(cid:96) = x · U(cid:96)
(cid:96)=1
Mult: The main procedure of Fmult is the multiplication procedure, and this is also the most
involved. The idea behind the protocol is as follows. From the input procedure, each party holds
and encryption (X, Y ) of b, along with encryptions (U1, V1), . . . , (Un, Vn) of a1, . . . , an, respectively.
In addition, each party knows its own share ai. As a result, it is possible for each party Pi to use
scalar multiplication on ElGamal in-the-exponent ciphertexts in order to generate an encryption of
ai · b. In addition, each party proves in zero-knowledge that the ciphertext was generated in this
way. This proof can be carried since each party already holds an encryption of ai and b, and so this
is a well-deﬁned NP-statement. In addition, due to the clean properties of ElGamal, the proof is