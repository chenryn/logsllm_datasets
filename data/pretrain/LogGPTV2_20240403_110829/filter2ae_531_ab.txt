      } else {
        try {
          const response = await axios.get(`http://127.0.0.1:${port}/search?url=${url}`)
          //开始进入啦
          res.render('base', response.data)
        } catch(error) {
          res.render('base', error.message)
        }
      }
    })
    router.post('/proxy', async(req, res, next) => { //发送post方法
      if(!req.session.admin) {
        return res.redirect('/index')
        //再验证session
      }
      // test url
      // not implemented here
      const url = "https://postman-echo.com/post"
      await axios.post(`http://127.0.0.1:${port}/search?url=${url}`)
      res.render('base', "Something needs to be implemented")
    })
    router.all('/search', async (req, res, next) => {
      if(!/127\.0\.0\.1/.test(req.ip)){
        return res.send({title: 'Error', content: 'You can only use proxy to aceess here!'})
      }//这里标明要利用/proxy
      const result = {title: 'Search Success', content: ''}
      const method = req.method.toLowerCase()
      const url = decodeURI(req.query.url)
      const data = req.body //请求数据
      try {//判断请求方法
        if(method == 'get') {
          const response = await axios.get(url)
          result.content = formatResopnse(response.data)
        } else if(method == 'post') {
          const response = await axios.post(url, data)
          result.content = formatResopnse(response.data)
        } else {
          result.title = 'Error'
          result.content = 'Unsupported Method'
        }
      } catch(error) {
        result.title = 'Error'
        result.content = error.message
      }
      return res.json(result)
    })
    router.get('/source', (req, res, next)=>{
      res.sendFile( __dirname + "/" + "index.js");
    })
    //返回当前页面的js代码
    router.get('/flag', (req, res, next) => {
      if(!/127\.0\.0\.1/.test(req.ip)){ //test方法判断127
        return res.send({title: 'Error', content: 'No Flag For You!'})
      }
      return res.json({hint: hint})
    })
    module.exports = router
跟着别人的wp，再查资料，自己加了些注释，勉强看懂了代码。
那么首先要绕过用户名的监测拿到session.admin来绕过大多数的waf
# 绕过
## 第一步绕过‘admin’
    //当数组（其中元素是字符串）与字符串拼接时，会返回字符串，所以
    'iam' + ['admin'] =  iamadmin
    //题目中会用username和password拼接进行sha256加密，所以将username变成username[],同样得到正确
## 请求端口
测试了一下请求  
（好耶，浏览量+1）
## 进入内部
上面已经提到过代码中设置的监听端口
const port = process.env.PORT || 3000  
那就用访问 
在服务器中，0.0.0.0指的是本机上的所有IPV4地址，如果一个主机有两个IP地址，192.168.1.1 和
10.1.2.1，并且该主机上的一个服务监听的地址是0.0.0.0,那么通过两个ip地址都能够访问该服务。  
访问/flag页面,得到hint
因为FLAG_WAF方法中对proxy请求的路径中，如果以/flag开头，则会被挡住。