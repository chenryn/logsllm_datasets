key authentication, 26
53–54
running commands on
coding poisoning script, 52–53
Windows client over SSH,
inspecting cache, 51
27–29
testing, 54–55
testing, 29–30
Metasploit, 117
network sniffers, 35–46
Microsoft. See Bing search engine;
discovering active hosts on network
Internet Explorer COM
segments, 36
automation
ICMP message decoding routine,
MitB attacks. See man-in-the-browser
42–46
attacks
Destination Unreachable
MITM attacks. See man-in-the-middle
message, 42–43, 43f
attacks
length calculation, 44
module_runner function, 108
message elements, 42
166 Index
sending UDP datagrams and py2exe, 105n
interpreting results, 44–45 PyCrypto package, 128n
testing, 45–46 PyHook library, 112n
IP header decoding routine, 38–42 Python GitHub API library, 102n
avoiding bit manipulation, Python WMI page, 139n
39–40 PyWin32 installer, 138
human-readable protocol, Scapy, 48, 48n
40–41 socket module, 9n
testing, 41–42 SVNDigger, 65n
typical IPv4 header VMWare Player, 1n
structure, 39f Volatility framework, 152
promiscuous mode, 37 Win32_Process class documentation,
setting up raw socket sniffer, 37 141n
Windows versus Linux, 36–38 Windows GDI, 116n
__new__ method, 41 WingIDE, 4
Wireshark, 35
OpenCV, 56, 59–60
O
os.walk function, 64
offensive forensics automation, 151–161 owned flag, 124–125
direct code injection, 156–161
installing Volatility, 152
P
profiles, 152
recovering password hashes, packet capture file processing. See
153–155 PCAP processing
online resources packet.show() function, 49
Bing API keys, 88n Paramiko, 26–30
Burp, 76 creating SSH server, 28–29
Cain and Abel, 74n installing, 26
Carlos Perez, 147n running commands on Windows
creating basic structure client over SSH, 27–29
for repo, 102 SSH key authentication, 26
DirBuster project, 65n testing, 29–30
El Jefe project, 139 password-guessing wordlist, 93–99
facial detection code, 59 converting selected HTTP traffic
generating Metasploit into wordlist, 95–96
payloads, 117n functionality to display wordlist,
hacking Python import 96–97
functionality, 107n testing, 97–99, 97f–99f
Hussam Khrais, 27n Payloads tab, Burp, 85, 86f
Immunity Debugger, 156n PCAP (packet capture file) processing,
input/output control (IOCTL), 37n 55–60
Joomla administrator login form, 69 adding facial detection code, 59
Jython, 76 adding supporting functions,
Kali Linux, 2 58–59
MessageBox shellcode, 157 ARP cache poisoning results, 53
netaddr module, 46 coding processing script, 56–57
OpenCV, 56n image carving script, 55–60
Paramiko, 26 testing, 59–60
PortSwigger Web Security, 76 Perez, Carlos, 147n
privilege escalation example pip package manager, 3
service, 138 POP3 credentials, stealing, 48, 50
Index 167
populate_offsets function, 154–155 response_handler function, 23–25
PortSwigger Web Security, 76 restore_target function, 53–54
Port Unreachable error, 42 reverse_forward_tunnel function, 31–32
Positions tab, Burp, 85, 86f reverse SSH tunneling, 30–33, 31f, 33f
post_to_tumblr function, 132 run function, 103
privilege escalation, 137–149
code injection, 147–149 S
installing example service, 138
installing libraries, 138 sandbox detection, 118–122
process monitoring, 139–141 Scapy library, 47–60
testing, 141 ARP cache poisoning, 51–55
with WMI, 139–141 adding supporting functions,
token privileges, 141–143 53–54
automatically retrieving coding poisoning script, 52–53
enabled privileges, 142–143 inspecting cache, 51
outputting and logging, 143 testing, 54–55
winning race against code installing, 48
execution, 144–147 PCAP processing
creating file monitor, 144–146 adding facial detection code, 59
testing, 146–147 adding supporting functions,
prn parameter, 48 58–59
process monitoring, 139–141 ARP cache poisoning results, 53
testing, 141 coding processing script, 56–57
with WMI, 139–141 image carving script, 55–60
process_watcher function, 140–141 testing, 59–60
--profile flag, 152 stealing email credentials, 48–50
proxy_handler function, 22–23 applying filter for common mail
Proxy tab, Burp, 85, 85f ports, 49–50
PSList class, 158–159 creating simple sniffer, 48–49
py2exe, 105 testing, 50
PyCrypto package, 128n, 130 Scope tab, Burp, 92, 93f
PyHook library, 112, 120 screenshots, 115–116
Python GitHub API library, 102 SeBackupPrivilege privilege, 142t
PyWin32 installer, 138 Secure Shell. See SSH
SeDebugPrivilege privilege, 142t
SelectObject function, 116
Q
SeLoadDriver privilege, 142, 142t
Queue objects, 63–64, 66–67 sendto() function, 11
server_loop function, 16–17
SetWindowsHookEx function, 112
R
shellcode execution, 116–118
random_sleep function, 131 SimpleHTTPServer module, 117–118
ReadDirectoryChangesW function, 144–146 Site map tab, Burp, 97f–98f
receive_from function, 23–24 SMTP credentials, stealing, 48, 50
recvfrom() function, 11 sniff function, 48
registerIntruderPayloadGeneratorFactory SOCK_DGRAM parameter, 11
function, 79–80 socket module, 9–10
RegistryApi class, 154–155 building TCP proxies, 20–21
Repeater tool, Burp, 78 creating TCP clients, 10–11
Request class, 62 creating TCP servers, 12–13
request_handler function, 23–25 creating UDP clients, 11
request_port_forward function, 32 netcat-like functionality, 13
reset function, 81 SOCK_STREAM parameter, 10–11
168 Index
SSH (Secure Shell) Windows tasks, 111–122
with Paramiko, 26–30 keylogging, 112–115
creating SSH server, 28–29 sandbox detection, 118–122
installing Paramiko, 26 screenshots, 115–116
key authentication, 26 shellcode execution, 116–118
running commands on Tumblr, 128–135
Windows client over SSH,
27–29
U
testing, 29–30
tunneling, 30–33 UDP clients, creating, 11
forward, 30, 30f udp_sender function, 44–45
reverse, 30–33, 31f, 33f urllib2 library, 62, 116
testing, 33 urlopen function, 62
ssh_command function, 26–27
Stack Data tab, WingIDE, 6–8 V
start_monitor function, 145–146
VMWare Player, 1
store_module_result function, 106
Volatility framework, 151–161
store parameter, 50
direct code injection, 157–161
strip function, 94–95
installing, 152
subprocess library, 17
profiles, 152
SVNDigger, 65
recovering password hashes,
153–155
T
tag_results dictionary, 72–73 W
TagStripper class, 94–96
wait_for_browser function, 126–127
Target tab, Burp, 92, 93f, 97f–98f
wb flag, 17
TCP clients, creating, 10–11
web application attacks, 61–74
TCP proxies
brute-forcing directories and file
creating, 20–25
locations, 65–68
hex dumping function, 23–24
applying list of extensions to
proxy_handler function, 22–23
test for, 67–68
reasons for building, 20
creating list of extensions, 68
testing, 25
creating Queue objects out of
TCPServer class, 127
wordlist files, 66
TCP servers, creating, 12–13
setting up wordlist, 68
test_remote function, 64
testing, 68
token privileges, 141–143
brute-forcing HTML form
automatically retrieving enabled
authentication, 69–74
privileges, 142–143
administrator login form,
outputting and logging, 143
69–70
transport method, 32
general settings, 70–71
trojans
HTML parsing class, 72–73
GitHub-aware, 101–109
pasting in wordlist, 73
account setup, 102
primary brute-forcing class,
building, 105–108
71–72
configuring, 104
request flow, 70
creating modules, 103
testing, 74
hacking import functionality,
GET requests
107–108
simple, 62
improvements and
using Request class, 62
enhancements to, 109
testing, 108–109
Index 169
web application attacks, continued Windows trojan tasks, 111–122
mapping open source web app keylogging, 112–115
installations, 63–65 sandbox detection, 118–122
socket library, 62 screenshots, 115–116
web application fuzzers, 78–87 shellcode execution, 116–118
accessing Burp documentation, WingIDE
78–81 accessing, 4f
implementing code to meet fixing missing dependencies, 4
requirements, 79–82 general discussion, 3–4
loading extension, 83–84, 83f–84f inspecting and modifying local
simple fuzzer, 82–83 variables, 8, 8f
using extension in attacks, 84–87, installing, 4
85f–87f opening blank Python file, 5f
Win32_Process class, 140–141, 141n setting breakpoints, 5
win32security module, 142–143 setting script for debugging, 6, 6f
Windows Graphics Device Interface viewing stack trace, 6, 7f
(GDI), 115–116 wordlist_menu function, 95–96
Windows privilege escalation, 137–149 Wuergler, Mark, 139
code injection, 147–149
installing example service, 138
installing libraries, 138
process monitoring, 139–141
testing, 141
with WMI, 139–141
token privileges, 141–143
automatically retrieving
enabled privileges, 142–143
outputting and logging, 143
winning race against code
execution, 144–147
creating file monitor, 144–146
testing, 146–147
170 Index
Updates
Visit http://www.nostarch.com/blackhatpython for updates, errata, and other
information.
More no-nonsense books from no starcH press
Gray Hat pytHon HackinG, 2nd edition tHe ida pro Book, 2nd edition
Python Programming for The Art of Exploitation The Unofficial Guide to the
Hackers and Reverse Engineers by jon erickson World’s Most Popular Disassembler
by justin seitz feb 2008, 488 pp., w/cd, $49.95 by chris eagle
apr 2009, 216 pp., $39.95 isbn 978-1-59327-144-2 jul 2011, 672 pp., $69.95
isbn 978-1-59327-192-3 isbn 978-1-59327-289-0
Metasploit android secUrity internals practical Malware analysis
The Penetration Tester’s Guide An In-Depth Guide to The Hands-On Guide to
by david kennedy, jim o’gorman, Android’s Security Architecture Dissecting Malicious Software
devon kearns, and mati aharoni by nikolay elenkov by michael sikorski and
jul 2011, 328 pp., $49.95 oct 2014, 432 pp., $49.95 andrew honig
isbn 978-1-59327-288-3 isbn 978-1-59327-581-5 feb 2012, 800 pp., $59.95
isbn 978-1-59327-290-6
phone: email:
800.420.7240 or PI:EMAIL
415.863.9900 web:
www.nostarch.com
“The difference between script kiddies and Black Hat python Black
professionals is the difference between merely
Hat
using other people’s tools and writing your own.”
python
— Charlie Miller, from the foreword
Python Programming for
Hackers and Pentesters
When it comes to creating powerful and effec- Extend the popular Burp Suite web-
tive hacking tools, Python is the language of hacking tool
choice for most security analysts. But just how
Abuse Windows COM automation to
does the magic happen?
perform a man-in-the-browser attack
In Black Hat Python, the latest from Justin Seitz Python
Exfiltrate data from a network most
(author of the best-selling Gray Hat Python),
sneakily
you’ll explore the darker side of Python’s
capabilities—writing network sniffers, manip-
Insider techniques and creative challenges Programming
ulating packets, infecting virtual machines,
throughout show you how to extend the hacks
creating stealthy trojans, and more. You’ll
and how to write your own exploits.
learn how to:
When it comes to offensive security, your
Create a trojan command-and-control using
ability to create powerful tools on the fly is
GitHub
indispensable. Learn how in Black Hat Python.
for
Detect sandboxing and automate com-
About the Author
mon malware tasks, like keylogging and Hackers
screenshotting
Justin Seitz is a senior security researcher
Escalate Windows privileges with creative
for Immunity, Inc., where he spends his time
process control
bug hunting, reverse engineering, writing and
exploits, and coding Python. He is the author
Use offensive memory forensics tricks
of Gray Hat Python (No Starch Press), the first to retrieve password hashes and inject Pentesters
book to cover Python for security analysis.
shellcode into a virtual machine
THE FINEST IN GEEK ENTERTAINMENT™
www.nostarch.com
Seitz
$34.95 ($36.95 CDN) Shelve In: ComputerS/SeCurIty
Justin Seitz
ISBN: 978-1-59327-590-7
53495
Foreword by Charlie Miller
9 781593 275907 6 89145 75900 6