很有用。
例10-1：find的复杂版Shell脚本
寻找所有的文件及目录，
#1/bin/sh -
在目录树下，将最近修改过的加以组化，
并于最上层的FILES.*与DIRECTORIES.·内置立列表。
语法：
filesdirectories directory
udnq/xn/:ua/1u/teo/x/
export PATH
if [ $# -ne 1 ]
then
echo *Usage: $0 directory* >&2
f1
exit 1
umask 077
允许另一个临时性目录
确保文件隐私
(du/-1GdN)$=dK
TMPPILES=*
$TMP/DIRSCTORIBS.a11.S$$TMP/DIRECTORIES.a11.SS.tmp
$TMP/DIRECTORIES.1aSt01.$SSTMP/DIRECTORIES.1aSt01.$$.tmp
www.TopSage.com
---
## Page 317
文件处理
305
STMP/DIRECTORIES.1ast07,$S $TMP/DTRBCTORIES.1a9tO7.SS.tmp
STMP/DIRECTORIES.1aSt02.$S STMP/DIRECTORIES.1aStO2.SS .tmp
$TMP/DIR&CTORIES.1aSt14.SS STMP/DIRECTORIES.1aSt14.SS.tmp
STMP/DIRECTORIES.1ast31.$S STMP/DIRECTORIES.1ast31.SS.tmp
$TMP/FIL&S.a11.$S $TMP/FILES.al1,$$.tmp
STMP/FIL&S.1ast01.$$ $TMP/FILES.1ast01,$S.tmp
STMP/FILES.1ast02.$$ $TMP/PILES.1ast02.$$.tmp
STMP/FILES.1ast07,$$ $TMP/FILES.1ast07,$S.tmp
STMP/FILES.1ast14.$S $TMP/PILE.last14.$S.tmp
STMP/FILES.1ast31.$$ $TMP/PILES.1ast31,$$.tmp
WD=$1
cd swD 11 exit 1
trap 'exit 1.
HUP INT PIPE QUIT TERM
IX2 .S2IIadKS 1- u1, de13
find . \
-name DIRECTORIESa11 -true \
-0 -name
'DIRECTORIEs.1ast [0-9][0-9]* -true \
ereu-0-
FIL&S.al1 -true \
-0
-name
*FI1&s.1ast[09][09]* true \
-0
-type f
mtime 31 
-fprint $TMP/FILES.a11.$$ \
*a
-a
-a
-mtime
-mt 1me
-2 -fprint STMP/FILES.1astD2,$$ \
-7 -fprint 
$TMP/PILES.1a8t07,$$\
-
-mtime
-a
=mt ine
1 -fprint $TMP/FILES.1ast01.$$\
-0
-type d
-mtime -31 -fprint $TMP/DIR8CTORIEs.1ast31.$$ \
-fprint $TMP/DIRECTORIES.a11.$S \
-a
-a
-mtime
-14
-7 -fprint $TMP/DIRBCTORIES.1ast07,$$ \
-fprint $TMP/DIRBCTORIES.1ast14.$$\
-a
-mtime
-a
-mt ine
-2 -fprint
$TMP/DZRBCrORIES.1astO2,$$\
-a
mtime
-1 fprint $TMP/DIRBCTORIES.1ast01,$$
for 1 1n FILBS.al1 PILES.last31 FILBS.1ast14 PILBS.last07 \
FILES.1ast02 FILES,1ast01 DIRECTORIES.al1 \
DIRECTORIES.1ast31 DIR&CTORIES.1ast14 \
DIRECTORIES,last07 DIRECTORIES.1aStO2 DIRSCTORIES.1a8t01
do
1$S'TS/aKS =QNS=s[]=9，a-=/GM$=/[·]、=9，-pes
cmp -s $TMP/$1.$$,tmp $1 11 mv $TMP/$1.$$.tmp $1
LC_ALL=C sort > STMP/$i.$$.tmp
done
10.4.4寻找问题文件
在10.1节里，我们注意到包含特殊字符（如换行字符）的文件名有点麻烦。GNUfind
具有-Drint0选项，以显示文件名为NUL终结的字符申，由于路径名称可包含任何字
符，除了NUL以外，所以这个选项，可产生能够被清楚解析的文件名列表。
www.TopSage.com
---
## Page 318
306
第10章
使用典型的UNIX工具很难去剖析这种列表，因为它们大部分都假定是行导向的文字输
入。然而，在使用一次一个字节（byte-at-a-time）输人的编译语言中，例如C、C++或
Java，会很直觉地编写一个程序诊断文件系统里是否有问题的文件名，有时它们只是单
纯程序员的错误，有时是攻击者通过伪装文件名隐藏他们的存在而放在那里的。
假设你执行目录列出，且得到这样的结果：
$ 16
列出目录
第一眼，你可能觉得没问题啊，因为我们知道空目录总是会包含两个特殊的隐藏点号文
件，指的是当前目录与父目录。然而，请注意这里我们并未使用-a选项，所以我们不
应该看到任何隐藏文件，而且在输出的第一个点号之前出现一个室格，有点不对劲！让
我们用find和od作进一步调查吧：
s fisd -printo 1 od -ab
000000
将以MUL 终结的文件名，转换为八进制及ASCII
- nul
950 L50 950 000 950 950 0#0 6S0 950 000 950 0#0 &S0 950 000 950
-nux
1
0000020nlmul./
0000040n1nlspspmul
2100095000 950 9500#0 950950010 950950 L50950 000210
012 012 040 040 900
0000045
我们通过tr的帮助，让这个信息更具可读性，将空格转换为S、换行字符转为N，而NUL
则变成换行符号：
5 find -print0 1 tr\n\o'ssn'
将问题字符转换为可见的S与N
-/S.
- /S..
- / .N
-/..S..S..S.SNMNSS
现在知道发生什么事了：我们有一个一般的点号目录，然后有一个文件叫作“空格一
Y各各.各各，一各
及最后一个叫作“点号—点号——空格—点号—点号-空格—点号
格一一空格”的文件。除非有人正在你的文件系统里练习摩斯码（Morsecode）.否
则这些文件看起来令人可疑，因此在去除这些文件之前，你应该先做一番调查。
10.5
执行命令：xargs
当find产生一个文件列表时，将该列表提供给另一个命令有时是很有用的。通常，这
www.TopSage.com
---
## Page 319
文件处理
MAX符号：
S grep PosIx_opgN_ux /dev/nul1 $(find /uar/1nclude -type f1 sort)
/usr/include/1imits.h:fdefine_POSIX_0PEN_RAX
16
当你编写程序或使用命令，处理这样一串对象列表时，如果列表为空，你也应该确保它
的行为是适当的。因为grep在没有给定任何文件参数的情况下，会读取标准输人，所
以我们可以提供/dev/null这样的参数，以确保不会因为find未产生输出，而等待
终端输人悬在那。在这里不会发生这种情况，但开发防御性程序的习惯是好的。
来自替换命令所产生的输出有时会很长，可能还会遇到在kernel里，因为对命令行的结
合长度的限制，以及超出其环境变量的问题，发生这种情况时，你会看到：
S grep PosIx_oP8N_MAx /dev/nul1 $(find /usr/include -type E 1 sort)
/usr/local/bin/grep: Argument 1ist too 1ong.
你可以通过getconf查询该限制：
$getconf ARG_MAX
取得ARG_MAX的系统组态值
131072
在我们测试过的系统中，报告值的范围从最少24576（IBMAIX）到最多1048320
(Sun Solaris),
ARG_MAx问题的解决方案就看xargs了：它可以在标准输入上取得参数列表、一行一
个，再将它们以适当大小组起来（由主机的ARG_MAX值决定）传给另一个命令，此命
令再作为xargs的参数。下面范例，即可剔除时厌的Argument 1ist toolong的
错误：
S find /usr/1nclude -type f 1 xargs grep PoSIx_oPRN_Mx /dev/nu11
/usr/Lnclude/bits/posix1_1im.h:#define_POSIX_OPEN_MAx
/usr/include/bits/posix1_1im.h:#define_pOSIx_FD_ssTsIz8
_POSIX_OPEN_MAX
1.6
这里的/dev/nul1参数可确保grep总是会看到至少两个文件参数，使它于每个报告匹
配的起始处，打印文件名。如果xargs未取得输入文件名，则它会默认地终止，甚至不
会调用它的参数程序。
结尾的文件名列表。xargs将每个这样的文件名作为一个完整参数，传递给它执行的命
令，而没有Shell（错误）解释问题或换行符号混淆的危险：然后是交给该命令处理它的
参数。
xargs的选项可以控制娜个参数需要被替换，还可以限制传递给参数命令的一次引用所
www.TopSage.com
---
## Page 320
308
第10章
使用的参数个数，GNU的版本甚至可以并行处理/执行多个参数进程。然而大多数时候，
我们这里介绍的简单形式已足够应付了，如需要进一步的细节，或参考更复杂之功能与
技巧的范例，可参考xargs（1)的手册页。
10.6
6文件系统的空间信息
辅以适当的选项，find与ls命令可以报告文件大小，所以加上简短的awk程序协助，
可以得到文件占据了多少字节的报告：
S find -1s 1 avk *(Bum += $7} 8ND (prIntf(*Total:%.0f bytes\n", Sum))*
Total: 23079017 bytes
然而，这样的报告低估了空间的使用，因为文件以固定大小的块（block）配置，它井未
告诉我们整个文件系统里已用了多少及还可用多少空间，有两个好用的工具提供更完美
的解决方案：df与du.
10.6.1df命令
df（diskfree，磁盘可用空间）提供单行摘要，一行显示一个加裁的文件系统的已使用
的和可用的空间，其单位视系统而定，有些使用块，有些则是kilobytes（KB）。大部分
现代实现都支持-k选项，也就是强制使用kilobyte单位，以及-1（小写L）选项，仅
显示本地文件系统，排除网络加载的文件系统。下面是我们自某个网页服务器输出的传
统范例：
$ df -k
Filesystem
1K-blocks
Used Available Usee Mounted on
/dev/sda5
5036284
2135488
2644964
45# /
/dev/sda2
10080520
6457072
8808
28794
3111380
68t/export
228 /boot
/dev/sda3
none
513964
0
513964
unte/Aep/ %0
/dev/sda8
101089
4421
91449
58/tmp
/dev/sda9
13432904
00969
12480948
38/var
/dev/8da6
4032092
1683824
2143444
44%/wW
GNU的df提供-h（human-readable，人们易于理解的）选项，产生更简洁，但可能较
令人混淆的报告：
$ df -b
Filesysten
Size Used Avai1 Usee Mounted on
/Gev/sda5
4.9G
2.1G
7.9
2.6G
22/boot
45号/