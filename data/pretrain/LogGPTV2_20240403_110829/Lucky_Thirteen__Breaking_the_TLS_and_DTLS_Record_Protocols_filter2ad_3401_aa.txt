# Title: Lucky Thirteen: Breaking the TLS and DTLS Record Protocols

## Authors
Nadhem J. AlFardan and Kenneth G. Paterson  
Information Security Group,  
Royal Holloway, University of London  
Egham, Surrey TW20 0EX, UK  
Email: {nadhem.alfardan.2009, kenny.paterson}@rhul.ac.uk  

## Conference
2013 IEEE Symposium on Security and Privacy

## Abstract
The Transport Layer Security (TLS) protocol is designed to ensure the confidentiality and integrity of data transmitted over untrusted networks. It has become the de facto standard for secure communication in internet and mobile applications. The Datagram Transport Layer Security (DTLS) protocol, a variant of TLS, is also gaining importance. In this paper, we present distinguishing and plaintext recovery attacks against both TLS and DTLS. These attacks are based on a detailed timing analysis of the decryption processes in these protocols. We provide experimental results demonstrating the feasibility of these attacks in realistic network environments for various implementations, including the widely used OpenSSL. We also propose countermeasures to mitigate these attacks and discuss their broader implications for the cryptographic design of TLS and DTLS.

## Keywords
TLS, DTLS, CBC-mode encryption, timing attack, plaintext recovery

## 1. Introduction
The Transport Layer Security (TLS) protocol is one of the most widely-used secure communication protocols on the Internet today. Initially developed as SSL, it was later standardized by the IETF and evolved through versions 1.0, 1.1, and 1.2. TLS is now used to secure a wide range of application-level traffic and is a serious competitor to IPsec for general Virtual Private Network (VPN) usage. It is supported in various client and server software, as well as in cryptographic libraries for embedded systems, mobile devices, and web application frameworks.

The Datagram Transport Layer Security (DTLS) protocol is a close relative of TLS, adapted to operate over UDP instead of TCP. This makes DTLS suitable for applications where the overhead of TCP connection establishment and retransmissions is not justified, such as voice and gaming applications. DTLS exists in two versions: DTLS 1.0, which corresponds to TLS 1.1, and DTLS 1.2, which aligns with TLS 1.2.

Both TLS and DTLS are protocol suites that include the Record Protocol, which uses symmetric key cryptography (block ciphers, stream ciphers, and MAC algorithms) combined with sequence numbers to create a secure channel for transporting application-layer data. Other major components include the Handshake Protocol, responsible for authentication, session key establishment, and ciphersuite negotiation, and the Alert Protocol, which handles error messages and management traffic.

The Record Protocol in TLS and DTLS typically uses a MAC-Encode-Encrypt (MEE) construction. The plaintext data is first passed through a MAC algorithm (HMAC-based, with MD5, SHA-1, or SHA-256 as the allowed hash algorithms in TLS 1.2). The encoded plaintext is then encrypted using the selected cipher, either RC4 or a block cipher in CBC mode (e.g., DES, 3DES, or AES).

The widespread use of TLS and the increasing adoption of DTLS make the continued study of their security crucial. The evolution of the TLS Record Protocol has been driven by cryptographic attacks, including those in [25], [5], [17], [3], [4], [10], [18], and [1]. Notably, the BEAST attack [10] exploited chained initialization vectors (IVs) in CBC mode, achieving full plaintext recovery in scenarios where an attacker can induce the user to download malicious JavaScript code into their browser.

Despite the strong requirements for such attacks, they have attracted significant industry and media attention. Possible countermeasures include upgrading to TLS 1.1 or 1.2, adding a dummy zero-length message before each real TLS message, or abandoning CBC-mode encryption in favor of RC4 or authenticated encryption algorithms.

Another line of attacks targets how padding is handled during decryption in MEE-TLS-CBC. These attacks exploit the fact that the padding is added after the MAC is computed, making it unauthenticated data in the encoded plaintext. While adopting RC4 or authenticated encryption modes could avoid these issues, RC4 is not recommended by NIST, and authenticated encryption modes are only available in TLS 1.2, which is not yet widely supported. Redesigning TLS and DTLS to use an Encrypt-then-MAC construction would require more radical changes.

### A. Our Results
We present a family of attacks that apply to all CBC-mode implementations of TLS and DTLS compliant with TLS 1.1 or 1.2, or with DTLS 1.0 or 1.2. These attacks also apply to SSL 3.0 and TLS 1.0 implementations that incorporate padding oracle attack countermeasures.

The attacks come in various forms, including distinguishing, partial plaintext recovery, and full plaintext recovery. Unlike the BEAST attacks, our plaintext recovery attacks do not require a chosen-plaintext capability. They can be mounted by a standard man-in-the-middle (MITM) attacker who sees only ciphertext and can inject ciphertexts of their own composition into the network. The specific attacks possible depend on the size of the MAC tags and the inclusion of exactly 13 bytes of header data in the MAC calculation.

The applicability of the attacks is implementation-dependent due to variations in how different implementations interpret the RFCs. We have investigated several open-source implementations of TLS and DTLS and found them all to be vulnerable to our new attacks or variants of them.

We have implemented a selection of these attacks in an experimental setting. While completely breaking TLS is challenging, our basic attack can extract full plaintext for the current OpenSSL implementation of TLS, assuming the attacker is located in the same LAN segment as the targeted TLS client or server. Variants of the attack are more effective:

- Distinguishing attacks against TLS are practical for OpenSSL, requiring just a handful of sessions to reliably tell apart the encryptions of chosen messages.
- Breaking DTLS implementations is fully practical even for a remote attacker, as DTLS errors are non-fatal, allowing the attacks to be mounted in a single session.
- More efficient partial plaintext recovery attacks on TLS and DTLS, such as recovering each byte in a block using 2^16 sessions if one byte is known.
- Using language models and sequential statistical techniques, the complexity of the attacks can be reduced. For example, if the plaintext is base64 encoded, the number of TLS sessions needed to recover a block reduces from roughly 2^23 to 2^19.
- In the web setting, our techniques can be combined with those used in the BEAST attack, where client-side malware running in the browser can initiate the needed TLS sessions, automatically injecting HTTP cookies in a predictable location in the plaintext stream. This reduces the number of sessions needed to recover HTTP cookies to 2^13 per byte.

### B. How the Attacks Work
Our new attacks exploit the fact that, when badly formatted padding is encountered during decryption, a MAC check must still be performed to prevent known timing attacks. The TLS 1.1 and 1.2 RFCs recommend checking the MAC as if there was a zero-length pad, but this leaves a small timing channel. We confirm that these timing differences can be exploited.

Provided there is a fortuitous alignment of factors such as the size of MAC tags, the block cipher's block size, and the number of header bytes, there will be a time difference in processing TLS records with good and bad padding. This timing side-channel can be analyzed statistically to reveal plaintext data.

### C. Disclosure
Given the large number of affected implementations, we first notified the IETF TLS Working Group chairs, the IETF Security Area directors, and the IRTF Crypto Forum Research Group (CFRG) chairs of our attacks in November 2012. We then contacted individual vendors, and patches have been issued by OpenSSL, NSS, GnuTLS, PolarSSL, CyaSSL, MatrixSSL, Opera, F5, BouncyCastle, and Oracle.

### D. Further Details on Related Work
Padding oracle attacks were first described by Vaudenay [25], who showed that the presence of a padding oracle could be leveraged to build a decryption capability. Canvel et al. [5] demonstrated that such an oracle could be obtained for OpenSSL by exploiting a timing difference in TLS decryption processing. Moeller [17] pointed out that not doing padding format checks enables even simpler attacks. The correct solution, as advocated in TLS 1.1 and 1.2, is to check the padding format carefully and report a single error message for padding and MAC failures, making the record processing time essentially the same whether or not the padding is correct.

Most recently, in [1], we showed that the OpenSSL implementation of DTLS did not adopt the known attack countermeasures. We also introduced novel timing amplification techniques to build full plaintext recovery attacks against this implementation of DTLS, even though DTLS has no explicit error messages to time.

Theoretical support for the MEE construction used in (D)TLS can be found in [12], [14], and [18]. Paterson et al. [18] provided the first positive security results for a fully accurate model MEE-TLS-CBC, proving that it provides Length Hiding Authenticated-Encryption security under certain conditions. Our attacks exploit the fact that current implementations of (D)TLS fail to meet these conditions, thus relativizing the applicability of the theoretical results to practice.

In independent work, Pironti et al. [19] identified the same timing channel in TLS but dismissed it as too small to be measured over the network. The recent CRIME attack exploits the optional use of compression in TLS in combination with a chosen plaintext capability to mount a plaintext recovery attack.

## 2. The (D)TLS Record Protocol
We focus on the cryptographic operation of the TLS and DTLS Record Protocols in the case of CBC-mode encryption. The core encryption process is illustrated in Figure 1 and explained in more detail below.

Data to be protected by TLS or DTLS is received from the application and may be fragmented and compressed before further processing. An individual record R (viewed as a byte sequence of length at least zero) is then processed as follows. The sender maintains an 8-byte sequence number SQN, which is incremented for each record sent, and forms a 5-byte field HDR consisting of a 2-byte version field, a 1-byte type field, and a 2-byte length field. It then calculates a MAC over the bytes SQN||HDR||R; let T denote the resulting MAC tag. Note that exactly 13 bytes of data are prepended to the record R before the MAC is computed. The size of the MAC tag is 16 bytes (HMAC-MD5), 20 bytes (HMAC-SHA-1), or 32 bytes (HMAC-SHA-256). We let t denote this size in bytes.

The record is then encoded to create the plaintext P by setting P = R||T||pad. Here, pad is a sequence of padding bytes chosen such that the length of P in bytes is a multiple of b, where b is the block size of the selected block cipher (b = 8 for 3DES and b = 16 for AES). In all versions of TLS and DTLS, the padding must consist of p + 1 copies of some byte value p, where 0 ≤ p ≤ 255.

![D(TLS) Encryption Process](figure1.png)

Figure 1: D(TLS) Encryption Process