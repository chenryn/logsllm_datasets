, Ghi
if i = 1
if i > 1
(10)
In the following, we shall elaborate on the conditional de-
pendencies in Equations (4)-(10).
Attack traﬃc.
Although the attacker speciﬁes the
number of bots used in the attack and the rate of transac-
tions sent from each bot, the traﬃc coming out of each bot’s
physical machine, however, is subject to random distortion,
and rates of attack traﬃc may be changed due to congestion
before packets arrive at the target enterprise network. Let
the true transaction rate from any bot arriving at the target
enterprise network be Kq, where 0 ≤ K ≤ n − 1 and q is
the traﬃc resolution. Note that in reality, traﬃc rates are in
the continuous space. To model them in our framework, we
discretize them and let the largest possible rate for each ﬂow
be (n − 1)q. We further assume that given A = (cid:104)M, R(cid:105), we
sample K using the following modiﬁed Poisson distribution:
(cid:26) Rke−k
Ck!
0
if 0 ≤ k ≤ n − 1
if k ≥ n
(11)
P{K = k} = g(k) =
where C =(cid:80)n−1
Rke−k
is the normalizer. We can further
easily obtain the attacker’s traﬃc J from Equation (11).
Note that size(J ) is equal to M .
k=0
k!
FCFS scheduling.
It is observed that Equations (4),
(5), and (10) all take one of the following forms:
h , U u
h , U u
h (cid:105) (cid:96) (cid:104)V a
h (cid:105) (cid:96) (cid:104)V l
h , V u
h, V a
h (cid:105), Gh
h , V u
h (cid:105), Gh
(12)
(cid:26) (cid:104)U l
(cid:104)U l
h, U a
h, U a
h and U u
h and V u
where U a
h are the output rate vectors of attack and
legitimate foreground traﬃc from resource h, respectively,
V a
h are the input rate vectors of attack and legit-
imate foreground traﬃc fed to resource h, respectively, U l
h
is the utilization of resource h, V l
h is the utilization level
of the previous critical resource, and Gh is the background
traﬃc rate. As V l
h is not used for computation, we can do
the computation in the same manner for both cases. The de-
pendency shown in Equation (12) is dictated by the schedul-
ing mechanism deployed by the resource. Here we consider
only the widely deployed FCFS (First Come First Serve)
packet scheduling scheme, but the proposed framework can
be easily extended to other scheduling schemes such as WFQ
(Weighted Fair Queueing) [24].
Let Φ(h) denote the capacity of resource h. If resource h
is a link, then Φ(h) gives the bandwidth of that link, and
Gh gives the background traﬃc rate in terms of bytes per
second. Otherwise, if resource h is a server, then Φ(h) pro-
vides the maximum number of transactions the server can
handle per second, and both Φ(h) and Gh are measured in
the number of transactions per second. Let constant b be
the number of bytes in a transaction. In order to deal with
two diﬀerent types of resources, we introduce notation τ (h):
τ (h) =
h is a link
h is a server
(13)
We also deﬁne Wh as follows:
Wh = Gh/τ (h) +
V a
h [k] +
k=1
k=1
h )(cid:88)
size(V u
V u
h [k],
(14)
(cid:26) b
h )(cid:88)
1
size(V a
557Figure 2: DDoS attack and defense modeled as a semi network-form game
which is to say, the handy variable Wh is actually the ag-
gregate input transaction rate fed to resource h.
According to the FCFS scheduling mechanism, when there
is no congestion (i.e., Wh ≤ Φ(h)/τ (h)), no transaction
is dropped; otherwise, transactions are dropped with the
same probability from each source IP. More speciﬁcally, if
Wh ≤ Φ(h)/τ (h), we have:
h
h [k] = V a
U a
U u
h [k] = V u
= τ (h)Wh
Φ(h)
h [k]
h [k]
∀k : 1 ≤ k ≤ size(U a
h )
∀k : 1 ≤ k ≤ size(U u
h )
(15)
and if Wh > Φ(h)/τ (h), we have:
 U l
 U l
h
U a
U u
= 1
h [k] = Φ(h)V a
h [i]
τ (h)Wh
h [k] = Φ(h)V u
h [i]
τ (h)Wh
∀k : 1 ≤ k ≤ size(U a
h )
∀k : 1 ≤ k ≤ size(U u
h )
(16)
h , V u
Instead, it takes the form (cid:104)U a
It is noted that Equation (6) does not take the form shown
h (cid:105) (cid:96)
in Equation (12).
h (cid:105), Gh, D. The computation is similar, though, ex-
(cid:104)V a
cept that Φ(h) in Equations (15) and (16) (including their
corresponding conditions) have to be replaced with the new
capacity, which is (1 + D[1]) · Φ(h).
h , U u
Static blocking. Static blocking is performed on traﬃc
destined to the server at each source IP level. We assume
a simple Bernoulli process for both attack traﬃc and legit-
imate users’ traﬃc: each source IP address in the attack
traﬃc is classiﬁed as a bot with probability p0 (true positive
rate), and each source IP address in legitimate users’ traﬃc
is classiﬁed as a bot with probability p1 (false positive rate).
If D[2] = 1, which means that static blocking is enabled,
then we have the following for j = 1, 2:
Ysb[j][k] | X af
[j + 1][k], D ∼
ISP →F0
(cid:26) X af
ISP →F0
[j + 1][k] with probability 1 − pj−1
0
with probability pj−1
Otherwise, if D[2] = 0, which means that static blocking
is disabled, then we always have
(cid:40)
Ysb[1][k] = X af
Ysb[2][k] = X af
ISP →F0
ISP →F0
[2][k]
[3][k]
(17)
Rate limiting. Recall D[3] is the maximum transaction
rate allowed per source IP. For each source IP, if its rate is
above the threshold D[3], its traﬃc is reshaped to make its
rate become D[3], irrespective of whether it is a bot or not.
Therefore, we have:
(cid:26) Ysb[j][k]
D[3]
Yrl[j][k] =
if Ysb[j][k] ≤ D[3]
if Ysb[j][k] > D[3]
,
(18)
for both j = 1 and j = 2.
Observed state by the defender. Recall that the de-
fender monitors the utilization level of each critical resource,
and also the number of unique source IPs and the average
transaction rate from each source IP in the traﬃc destined
to the server. The statistics of traﬃc destined to the server
can be obtained from X bf
. Hence, we have:
ISP →F0
d (cid:96) X bf
Obf
ISP →F0
, X bf
S .
(19)
More speciﬁcally, we have the following:
Obf
Obf
Obf
[1]
d [3] = (cid:80)3
d [1] = X bf
ISP →F0
d [2] = X bf
S [1]
j=2 size(X bf
(cid:80)size(X
(cid:80)3
(cid:80)3
d [4] =
Obf
k=1
j=2
[j])
ISP →F0
ISP →F0
bf
[j])
Xbf
ISP →F0
[j])
ISP →F0
[j][k]
j=2 size(Xbf
(20)
As the defender’s decision is made based on her observed
network state before her mitigation action, the following
holds:
D (cid:96) Obf
d .
(21)
Construction of Bayesian Network. After all depen-
dencies deﬁned, we can construct a Bayesian network. Each
state variable listed in Table 1 is a node in the Bayesian
558network. When there is such a dependency relationship
Z0 (cid:96) Z1, Z2, ..., Zm, then we create a directed edge from
each of Zi, where 1 ≤ i ≤ m, to Z0. The conditional prob-
ability density functions are also deﬁned accordingly based
on how each state variable is calculated. Following the same
example, its corresponding Bayesian network is illustrated
in Figure 2.
6. LEVEL-K REASONING
In contrast to previous attempts of applying game theory
to analyze DDoS attacks and defense, our evaluation frame-
work considers bounded rationality [21] for both the attacker
and the defender. Bounded rationality reﬂects many real-
world situations in which people tend to satisﬁce rather than
maximizing their preferences in decision making due to lim-
ited information or time available or the diﬃculty involved
in sophisticated reasoning. To this end, we assume that both
the attacker and the defender adopt the ”level-K thinking”
strategy [3], in which each player optimizes her best response
at level k based on her observations from the previous level.
Under the level-K reasoning model, we further deﬁne sat-
isﬁcing distributions, utility functions, and level-0 distribu-
tions for both the attacker and the defender.
Satisﬁcing distributions λ.
The satisﬁcing distri-
butions in the semi network-form game indicate a player’s
preferences in her decision making given an observed system
state. They serve the purpose of sampling from a player’s
decision space in her reasoning. In our model, the attacker
initiates the attack, and his decision does not depend on any
other system variables. We also assume that the traﬃc rate
from each bot is uniformly drawn from K by the attacker.
On the other hand, let B denote the set of the number of
bots that the attacker would like to choose in an attack. The
number of bots used in the attack is uniformly drawn from
B.
The defender’s satisﬁcing distribution hinges on her ob-
served network state Obf
d . The defender’s observed network
state helps her make decisions on (1) whether to perform a
speciﬁc mitigation action (bandwidth inﬂation, static block-
ing, and rate limiting) and (2) how to set the parameters if
a mitigation action is performed.
For each of these mitigation actions, we model the de-
fender’s satisﬁcing function with a two-step process includ-
ing whether to perform it and next how to set correspond-