then subsequently piped to the reader and out over the TCP
connection. How’s that for elegant?
With that, you’ve successfully implemented Netcat’s
gaping security hole from the perspective of a TCP listener
awaiting a connection. You can use similar logic to implement
the feature from the perspective of a connecting client
redirecting stdout and stdin of a local binary to a remote
listener. The precise details are left to you to determine, but
would likely include the following:
Establish a connection to a remote listener via net.Dial(network, address string).
Initialize a Cmd via exec.Command(name string, arg ...string).
Redirect Stdin and Stdout properties to utilize the net.Conn object.
Run the command.
At this point, the listener should receive a connection. Any
data sent to the client should be interpreted as stdin on the
client, and any data received on the listener should be
interpreted as stdout. The full code of this example is available
at https://github.com/blackhat-go/bhg/blob/master/ch-
2/netcat-exec/main.go.
SUMMARY
Now that you’ve explored practical applications and usage of
Go as it relates to networking, I/O, and concurrency, let’s
move on to creating usable HTTP clients.
3
HTTP CLIENTS AND REMOTE
INTERACTION WITH TOOLS
In Chapter 2, you learned how to harness the power of TCP
with various techniques for creating usable clients and servers.
This is the first in a series of chapters that explores a variety of
protocols on higher layers of the OSI model. Because of its
prevalence on networks, its affiliation with relaxed egress
controls, and its general flexibility, let’s begin with HTTP.
This chapter focuses on the client side. It will first
introduce you to the basics of building and customizing HTTP
requests and receiving their responses. Then you’ll learn how
to parse structured response data so the client can interrogate
the information to determine actionable or relevant data.
Finally, you’ll learn how to apply these fundamentals by
building HTTP clients that interact with a variety of security
tools and resources. The clients you develop will query and
consume the APIs of Shodan, Bing, and Metasploit and will
search and parse document metadata in a manner similar to the
metadata search tool FOCA.
HTTP FUNDAMENTALS WITH GO
Although you don’t need a comprehensive understanding of
HTTP, you should know some fundamentals before you get
started.
First, HTTP is a stateless protocol: the server doesn’t
inherently maintain state and status for each request. Instead,
state is tracked through a variety of means, which may include
session identifiers, cookies, HTTP headers, and more. The
client and servers have a responsibility to properly negotiate
and validate this state.
Second, communications between clients and servers can
occur either synchronously or asynchronously, but they
operate on a request/response cycle. You can include several
options and headers in the request in order to influence the
behavior of the server and to create usable web applications.
Most commonly, servers host files that a web browser renders
to produce a graphical, organized, and stylish representation of
the data. But the endpoint can serve arbitrary data types. APIs
commonly communicate via more structured data encoding,
such as XML, JSON, or MSGRPC. In some cases, the data
retrieved may be in binary format, representing an arbitrary
file type for download.
Finally, Go contains convenience functions so you can
quickly and easily build and send HTTP requests to a server
and subsequently retrieve and process the response. Through
some of the mechanisms you’ve learned in previous chapters,
you’ll find that the conventions for handling structured data
prove extremely convenient when interacting with HTTP
APIs.
Calling HTTP APIs
Calling HTTP APIs
Let’s begin the HTTP discussion by examining basic requests.
Go’s net/http standard package contains several convenience
functions to quickly and easily send POST, GET, and HEAD
requests, which are arguably the most common HTTP verbs
you’ll use. These functions take the following forms:
Get(url string) (resp *Response, err error)
Head(url string) (resp *Response, err error)
Post(url string, bodyType string, body io.Reader) (resp *Response, err error)
Each function takes—as a parameter—the URL as a string
value and uses it for the request’s destination. The Post()
function is slightly more complex than the Get() and Head()
functions. Post() takes two additional parameters: bodyType,
which is a string value that you use for the Content-Type
HTTP header (commonly application/x-www-form-urlencoded) of the
request body, and an io.Reader, which you learned about in
Chapter 2.
You can see a sample implementation of each of these
functions in Listing 3-1. (All the code listings at the root
location of / exist under the provided github repo
https://github.com/blackhat-go/bhg/.) Note that the POST
request creates the request body from form values and sets the
Content-Type header. In each case, you must close the
response body after you’re done reading data from it.
r1, err := http.Get("http://www.google.com/robots.txt")
// Read response body. Not shown.
defer r1.Body.Close()
r2, err := http.Head("http://www.google.com/robots.txt")
// Read response body. Not shown.
defer r2.Body.Close()
form := url.Values{}
form.Add("foo", "bar")
r3, err = http.Post❶(
"https://www.google.com/robots.txt",
❷ "application/x-www-form-urlencoded",
strings.NewReader(form.Encode()❸),
)
// Read response body. Not shown.
defer r3.Body.Close()
Listing 3-1: Sample implementations of the Get(), Head(), and Post() functions (/ch-
3/basic/main.go)
The POST function call ❶ follows the fairly common
pattern of setting the Content-Type to application/x-www-form-
urlencoded ❷, while URL-encoding form data ❸.
Go has an additional POST request convenience function,
called PostForm(), which removes the tediousness of setting
those values and manually encoding every request; you can
see its syntax here:
func PostForm(url string, data url.Values) (resp *Response, err error)
If you want to substitute the PostForm() function for the Post()
implementation in Listing 3-1, you use something like the bold
code in Listing 3-2.
form := url.Values{}
form.Add("foo", "bar")
r3, err := http.PostForm("https://www.google.com/robots.txt", form)
// Read response body and close.
Listing 3-2: Using the PostForm() function instead of Post() (/ch-3/basic/main.go)
Unfortunately, no convenience functions exist for other
HTTP verbs, such as PATCH, PUT, or DELETE. You’ll use
these verbs mostly to interact with RESTful APIs, which
employ general guidelines on how and why a server should
use them; but nothing is set in stone, and HTTP is like the Old
West when it comes to verbs. In fact, we’ve often toyed with
the idea of creating a new web framework that exclusively
uses DELETE for everything. we’d call it DELETE.js, and it
would be a top hit on Hacker News for sure. By reading this,
you’re agreeing not to steal this idea!
Generating a Request
To generate a request with one of these verbs, you can use the
NewRequest() function to create the Request struct, which you’ll
subsequently send using the Client function’s Do() method. We
promise that it’s simpler than it sounds. The function
prototype for http.NewRequest() is as follows:
func NewRequest(❶method, ❷url string, ❸body io.Reader) (req *Request, err
error)
You need to supply the HTTP verb ❶ and destination URL
❷ to NewRequest() as the first two string parameters. Much like
the first POST example in Listing 3-1, you can optionally
supply the request body by passing in an io.Reader as the third
and final parameter ❸.
Listing 3-3 shows a call without an HTTP body—a
DELETE request.
req, err := http.NewRequest("DELETE", "https://www.google.com/robots.txt", nil)
var client http.Client
resp, err := client.Do(req)
// Read response body and close.
Listing 3-3: Sending a DELETE request (/ch-3/basic/main.go)
Now, Listing 3-4 shows a PUT request with an io.Reader
body (a PATCH request looks similar).
form := url.Values{}
form.Add("foo", "bar")
var client http.Client
req, err := http.NewRequest(
"PUT",
"https://www.google.com/robots.txt",
strings.NewReader(form.Encode()),
)
resp, err := client.Do(req)
// Read response body and close.
Listing 3-4: Sending a PUT request (/ch-3/basic/main.go)
The standard Go net/http library contains several functions
that you can use to manipulate the request before it’s sent to
the server. You’ll learn some of the more relevant and
applicable variants as you work through practical examples
throughout this chapter. But first, we’ll show you how to do
something meaningful with the HTTP response that the server
receives.
Using Structured Response Parsing
In the previous section, you learned the mechanisms for
building and sending HTTP requests in Go. Each of those
examples glossed over response handling, essentially ignoring
it for the time being. But inspecting various components of the
HTTP response is a crucial aspect of any HTTP-related task,
like reading the response body, accessing cookies and headers,
or simply inspecting the HTTP status code.
Listing 3-5 refines the GET request in Listing 3-1 to
display the status code and response body—in this case,
Google’s robots.txt file. It uses the ioutil.ReadAll() function to
read data from the response body, does some error checking,
and prints the HTTP status code and response body to stdout.
❶ resp, err := http.Get("https://www.google.com/robots.txt")
if err != nil {
log.Panicln(err)
}
// Print HTTP Status
fmt.Println(resp.Status❷)
// Read and display response body
body, err := ioutil.ReadAll(resp.Body❸)
if err != nil {
log.Panicln(err)
}
fmt.Println(string(body))
❹ resp.Body.Close()
Listing 3-5: Processing the HTTP response body (/ch-3/basic/main.go)
Once you receive your response, named resp ❶ in the above
code, you can retrieve the status string (for example, 200 OK) by
accessing the exported Status parameter ❷; not shown in our
example, there is a similar StatusCode parameter that accesses
only the integer portion of the status string.
The Response type contains an exported Body parameter ❸,
which is of type io.ReadCloser. An io.ReadCloser is an interface that
acts as an io.Reader as well as an io.Closer, or an interface that
requires the implementation of a Close() function to close the
reader and perform any cleanup. The details are somewhat
inconsequential; just know that after reading the data from an
io.ReadCloser, you’ll need to call the Close() function ❹ on the
response body. Using defer to close the response body is a
common practice; this will ensure that the body is closed
before you return it.
Now, run the script to see the error status and response
body:
$ go run main.go
200 OK
User-agent: *
Disallow: /search
Allow: /search/about
Disallow: /sdch
Disallow: /groups
Disallow: /index.html?
Disallow: /?
Allow: /?hl=
Disallow: /?hl=*&
Allow: /?hl=*&gws_rd=ssl$
Disallow: /?hl=*&*&gws_rd=ssl
--snip--
If you encounter a need to parse more structured data—and
it’s likely that you will—you can read the response body and
decode it by using the conventions presented in Chapter 2. For
example, imagine you’re interacting with an API that
communicates using JSON, and one endpoint—say, /ping—
returns the following response indicating the server state:
{"Message":"All is good with the world","Status":"Success"}
You can interact with this endpoint and decode the JSON
message by using the program in Listing 3-6.
package main
import {
encoding/json"
log
net/http
}
❶ type Status struct {
Message string
Status string
}
func main() {
❷ res, err := http.Post(
"http://IP:PORT/ping",
"application/json",
nil,
)
if err != nil {
log.Fatalln(err)
}
var status Status
❸ if err := json.NewDecoder(res.Body).Decode(&status); err != nil {
log.Fatalln(err)
}
defer res.Body.Close()
log.Printf("%s -> %s\n", status.Status❹, status.Message❺)
}
Listing 3-6: Decoding a JSON response body (/ch-3/basic-parsing/main.go)
The code begins by defining a struct called Status ❶, which
contains the expected elements from the server response. The
main() function first sends the POST request ❷ and then
decodes the response body ❸. After doing so, you can query
the Status struct as you normally would—by accessing exported
data types Status ❹ and Message ❺.
This process of parsing structured data types is consistent
across other encoding formats, like XML or even binary
representations. You begin the process by defining a struct to
represent the expected response data and then decoding the
data into that struct. The details and actual implementation of
parsing other formats will be left up to you to determine.
The next sections will apply these fundamental concepts to
assist you in building tools to interact with third-party APIs for
the purpose of enhancing adversarial techniques and
reconnaissance.
BUILDING AN HTTP CLIENT THAT
INTERACTS WITH SHODAN
Prior to performing any authorized adversarial activities
against an organization, any good attacker begins with
reconnaissance. Typically, this starts with passive techniques
that don’t send packets to the target; that way, detection of the
activity is next to impossible. Attackers use a variety of
sources and services—including social networks, public
records, and search engines—to gain potentially useful
information about the target.
It’s absolutely incredible how seemingly benign
information becomes critical when environmental context is
applied during a chained attack scenario. For example, a web
application that discloses verbose error messages may, alone,
be considered low severity. However, if the error messages
disclose the enterprise username format, and if the
organization uses single-factor authentication for its VPN,
those error messages could increase the likelihood of an
internal network compromise through password-guessing
attacks.
Maintaining a low profile while gathering the information
ensures that the target’s awareness and security posture
remains neutral, increasing the likelihood that your attack will
be successful.
Shodan (https://www.shodan.io/), self-described as “the
world’s first search engine for internet-connected devices,”
facilitates passive reconnaissance by maintaining a searchable
database of networked devices and services, including
metadata such as product names, versions, locale, and more.
Think of Shodan as a repository of scan data, even if it does
much, much more.
Reviewing the Steps for Building an API Client
In the next few sections, you’ll build an HTTP client that
interacts with the Shodan API, parsing the results and
displaying relevant information. First, you’ll need a Shodan
API key, which you get after you register on Shodan’s
website. At the time of this writing, the fee is fairly nominal
for the lowest tier, which offers adequate credits for individual
use, so go sign up for that. Shodan occasionally offers
discounted pricing, so monitor it closely if you want to save a
few bucks.
Now, get your API key from the site and set it as an
environment variable. The following examples will work as-is
only if you save your API key as the variable SHODAN_API_KEY.
Refer to your operating system’s user manual, or better yet,
look at Chapter 1 if you need help setting the variable.
Before working through the code, understand that this
section demonstrates how to create a bare-bones
implementation of a client—not a fully featured,
comprehensive implementation. However, the basic
scaffolding you’ll build now will allow you to easily extend
the demonstrated code to implement other API calls as you
may need.
The client you build will implement two API calls: one to
query subscription credit information and the other to search
for hosts that contain a certain string. You use the latter call
for identifying hosts; for example, ports or operating systems
matching a certain product.
Luckily, the Shodan API is straightforward, producing
nicely structured JSON responses. This makes it a good
starting point for learning API interaction. Here is a high-level
overview of the typical steps for preparing and building an
API client:
1. Review the service’s API documentation.
2. Design a logical structure for the code in order to reduce complexity and
repetition.
3. Define request or response types, as necessary, in Go.
4. Create helper functions and types to facilitate simple initialization,
authentication, and communication to reduce verbose or repetitive logic.
5. Build the client that interacts with the API consumer functions and types.
We won’t explicitly call out each step in this section, but
you should use this list as a map to guide your development.
Start by quickly reviewing the API documentation on
Shodan’s website. The documentation is minimal but produces
everything needed to create a client program.
Designing the Project Structure
When building an API client, you should structure it so that
the function calls and logic stand alone. This allows you to
reuse the implementation as a library in other projects. That
way, you won’t have to reinvent the wheel in the future.
Building for reusability slightly changes a project’s structure.
For the Shodan example, here’s the project structure:
$ tree github.com/blackhat-go/bhg/ch-3/shodan
github.com/blackhat-go/bhg/ch-3/shodan
|---cmd
| |---shodan
| |---main.go
|---shodan
|---api.go
|---host.go
|---shodan.go
The main.go file defines package main and is used primarily as
a consumer of the API you’ll build; in this case, you use it
primarily to interact with your client implementation.
The files in the shodan directory—api.go, host.go, and
shodan.go—define package shodan, which contains the types and
functions necessary for communication to and from Shodan.