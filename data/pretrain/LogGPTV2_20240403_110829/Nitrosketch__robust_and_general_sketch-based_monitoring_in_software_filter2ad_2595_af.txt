[31] Paul Emmerich, Sebastian Gallenmüller, Daniel Raumer, Florian Wohlfart, and
Georg Carle. 2015. MoonGen: A Scriptable High-Speed Packet Generator. In
Proc. of ACM IMC.
346
[32] Zaoxing Liu et al. 2019. NitroSketch Source Code. https://github.com/zaoxing/
NitroSketch
[33] Seyed K. Fayaz, Yoshiaki Tobioka, Vyas Sekar, and Michael Bailey. 2015. Bohatei:
Flexible and Elastic DDoS Defense. In Proc. of USENIX Security.
[34] FD.io. 2018. Vector Packet Processing. https://fd.io/technology/
[35] William Feller. 1943. Generalization of a Probability Limit Theorem of Cramér.
Trans. Amer. Math. Soc. (1943).
[36] Pedro Garcia-Teodoro, Jesus E. Diaz-Verdejo, Gabriel Macia-Fernandez, and
E. Vazquez. 2009. Anomaly-Based Network Intrusion Detection: Techniques,
Systems and Challenges. Computers and Security (2009).
[37] Robert D Gordon. 1941. Values of Mills’ Ratio of Area to Bounding Ordinate and
of the Normal Probability Integral for Large Values of the Argument. The Annals
of Mathematical Statistics (1941).
[38] Arpit Gupta, Rob Harrison, Marco Canini, Nick Feamster, Jennifer Rexford, and
Walter Willinger. 2018. Sonata: Query-Driven Streaming Network Telemetry. In
Proc. of ACM SIGCOMM.
[39] Sangjin Han, Keon Jang, Aurojit Panda, Shoumik Palkar, Dongsu Han, and Sylvia
Ratnasamy. 2015. SoftNIC: A Software NIC to Augment Hardware. Technical
Report.
[40] Thomas Holterbach, Edgar Costa Molero, Maria Apostolaki, Alberto Dainotti, Ste-
fano Vissicchio, and Laurent Vanbever. 2019. Blink: Fast Connectivity Recovery
Entirely in the Data Plane. In Proc. of USENIX NSDI.
[41] Nan Hua, Bill Lin, Jun (Jim) Xu, and Haiquan (Chuck) Zhao. 2008. BRICK:
ANovel Exact Active Statistics Counter Architecture. In Proc. of ACM/IEEE
ANCS.
[42] Qi Huang, Ken Birman, Robbert van Renesse, Wyatt Lloyd, Sanjeev Kumar, and
Harry C. Li. 2013. An Analysis of Facebook Photo Caching. In Proc. of ACM
SOSP.
[43] Qun Huang, Xin Jin, Patrick P. C. Lee, Runhui Li, Lu Tang, Yi-Chao Chen, and
Gong Zhang. 2017. SketchVisor: Robust Network Measurement for Software
Packet Processing. In Proc. of ACM SIGCOMM.
[44] Qun Huang, Patrick PC Lee, and Yungang Bao. 2018. SketchLearn: Relieving
User Burdens in ApproximateMeasurement with Automated Statistical Inference.
In Proc. of ACM SIGCOMM.
[45] Intel. 2012. Intel Advanced Vector Extensions. https://software.intel.com/en-us/
isa-extensions/intel-avx
[46] Intel. 2018. Intel VTune Amplifier. https://software.intel.com/en-us/vtune
[47] T. S. Jayram, Andrew McGregor, S. Muthukrishnan, and Erik Vee. 2007. Estimat-
ing Statistical Aggregates on Probabilistic Data Streams. Proc. of ACM PODS
(2007).
[48] Xin Jin, Xiaozhou Li, Haoyu Zhang, Robert Soulé, Jeongkeun Lee, Nate Foster,
Changhoon Kim, and Ion Stoica. 2017. NetCache: Balancing Key-Value Stores
with Fast In-Network Caching. In Proc. of ACM SOSP.
[49] Abdul Kabbani, Mohammad Alizadeh, Masato Yasuda, Rong Pan, and Balaji
Prabhakar. 2010. AF-QCN: Approximate Fairness with Quantized Congestion
Notification for Multi-tenanted Data Centers. In Prof. of IEEE HOTI.
[50] Maurice George Kendall, Alan Stuart, and Keith Ord. 1987. Kendall’s Advanced
Theory of Statistics. Oxford University Press, Inc.
[51] Balachander Krishnamurthy, Subhabrata Sen, Yin Zhang, and Yan Chen. 2003.
Sketch-based Change Detection: Methods, Evaluation, and Applications. In Proc.
of ACM IMC.
[52] Ashwin Lall, Vyas Sekar, Mitsunori Ogihara, Jun Xu, and Hui Zhang. 2006. Data
Streaming Algorithms for Estimating Entropy of Network Traffic. In Proc. of
ACM SIGMETRICS/Performance.
[53] Junda Liu, Aurojit Panda, Ankit Singla, Brighten Godfrey, Michael Schapira, and
Scott Shenker. 2013. Ensuring Connectivity via Data Plane Mechanisms. In Proc.
of USENIX NSDI.
[54] Zaoxing Liu, Zhihao Bai, Zhenming Liu, Xiaozhou Li, Changhoon Kim, Vladimir
Braverman, Xin Jin, and Ion Stoica. 2019. DistCache: Provable Load Balancing
for Large-Scale Storage Systems with Distributed Caching. In Proc. of USENIX
FAST.
[55] Zaoxing Liu, Antonis Manousis, Gregory Vorsanger, Vyas Sekar, and Vladimir
Braverman. 2016. One Sketch to Rule Them All: Rethinking Network Flow
Monitoring with UnivMon. In Proc. of ACM SIGCOMM.
[56] Zaoxing Liu, Greg Vorsanger, Vladimir Braverman, and Vyas Sekar. 2015. En-
abling a "RISC" Approach for Software-Defined Monitoring Using Universal
Streaming. In Proc. of ACM HotNets.
[57] Yi Lu, Andrea Montanari, Balaji Prabhakar, Sarang Dharmapurikar, and Ab-
dul Kabbani. 2008. Counter Braids: A Novel Counter Architecture for Per-
FlowMeasurement. In Proc. of ACM SIGMETRICS.
[58] MACCDC. 2012. Capture Traces from Mid-Atlantic CCDC. http://www.netresec.
com/?page=MACCDC
[59] Jiri Matousek and Jan Vondrak. 2008. The Probabilistic Method-Lecture Notes.
http://www.cs.cmu.edu/~15850/handouts/matousek-vondrak-prob-ln.pdf
[60] Andrew McGregor, A Pavan, Srikanta Tirthapura, and David P. Woodruff. 2016.
Space-Efficient Estimation of Statistics Over Sub-Sampled Streams. Algorithmica
(2016).
SIGCOMM ’19, August 19–23, 2019, Beijing, China
Z. Liu et al.
[61] Ahmed Metwally, Divyakant Agrawal, and Amr El Abbadi. 2005. Efficient
Computation of Frequent and Top-k Elements in Data Streams. In Proc. of ICDT.
[62] Microsoft. 2016. Hyper-V Virtual Switch Overview. https://technet.microsoft.
com/en-us/library/hh831823.aspx
[63] Jayadev Misra and David Gries. 1982. Finding Repeated Elements. Technical
Report.
[64] M. Mitzenmacher, T. Steinke, and J. Thaler. 2012. Hierarchical Heavy Hitters
with the Space Saving Algorithm. In Proc. of ALENEX.
[65] Srinivas Narayana, Anirudh Sivaraman, Vikram Nathan, Prateesh Goyal, Venkat
Arun, Mohammad Alizadeh, Vimalkumar Jeyakumar, and Changhoon Kim. 2017.
Language-Directed Hardware Design for Network Performance Monitoring. In
Proc. of ACM SIGCOMM.
[66] George Nychis, Vyas Sekar, David G. Andersen, Hyong Kim, and Hui Zhang.
2008. An Empirical Evaluation of Entropy-based Traffic Anomaly Detection. In
Proc. of ACM IMC.
[67] Ben Pfaff, Justin Pettit, Teemu Koponen, Ethan Jackson, Andy Zhou, Jarno Raja-
halme, Jesse Gross, Alex Wang, Joe Stringer, Pravin Shelar, Keith Amidon, and
Martin Casado. 2015. The Design and Implementation of Open vSwitch. In Proc.
of USENIX NSDI.
[68] Robert Schweller, Ashish Gupta, Elliot Parsons, and Yan Chen. 2004. Reversible
Sketches for Efficient and Accurate Change Detection over Network Data Streams.
In Proc. of ACM IMC.
[69] Vibhaalakshmi Sivaraman, Srinivas Narayana, Ori Rottenstreich, S. Muthukrish-
nan, and Jennifer Rexford. 2017. Heavy-Hitter Detection Entirely in the Data
Plane. In Proc. of ACM SOSR.
[70] Eric V Slud. 1977. Distribution inequalities for the binomial law. The Annals of
Probability (1977).
[71] Mea Wang, Baochun Li, and Zongpeng Li. 2004. sFlow: Towards Resource-
Efficient and Agile Service Federation in Service Overlay Networks. In Proc. of
IEEE ICDCS.
[72] Li Yang, Wu Hao, Pan Tian, Dai Huichen, Lu Jianyuan, and Liu Bin. 2016. CASE:
Cache-assisted Stretchable Estimator for High Speed Per-flow Measurement. In
Proc. of IEEE INFOCOM.
[73] Tong Yang, Jie Jiang, Peng Liu, Qun Huang, Junzhi Gong, Yang Zhou, Rui
Miao, Xiaoming Li, and Steve Uhlig. 2018. Elastic Sketch: Adaptive and Fast
Network-wide Measurements. In Proc. of ACM SIGCOMM.
[74] Lei Ying, R. Srikant, and Xiaohan Kang. 2015. The Power of Slightly More than
One Sample in Randomized Load Balancing. In Proc. of IEEE INFOCOM.
[75] Da Yu, Yibo Zhu, Behnaz Arzani, Rodrigo Fonseca, Tianrong Zhang, Karl Deng,
and Lihua Yuan. 2019. dShark: A General, Easy to Program and Scalable Frame-
work for Analyzing In-network Packet Traces. In Proc. of USENIX NSDI.
[76] Minlan Yu, Lavanya Jose, and Rui Miao. 2013. Software Defined Traffic Mea-
surement with OpenSketch. In Proc. of USENIX NSDI.
A ANALYSIS OF ALWAYSCORRECT
NITROSKETCH
We now formally analyze the accuracy guarantees of AlwaysCorrect
NitroSketch (Algorithm 1). We start with Lemma 6 that shows that
once AlwaysCorrect NitroSketch converges (see Line 14), the L2 is
large enough to justify sampling with probability pmin. We analyze
the worst case scenario here where once starting to sample we always
use the smallest probability and for convenience denote p ≡ pmin.
LEMMA 6. When AlwaysCorrect NitroSketch starts sampling:
Pr(cid:2)L2 ≥ 11ϵ
−1(cid:3) ≥ 1 − δ .
−2p
PROOF. Since L2 grows monotonically with the number of pack-
ets, it is enough to show that the condition of Line 14 implies the
lower bound on the L2 value. Namely, we assume that
−2.
−4p
i,y > 121(1 + ϵ
C2
mediani∈[d]
w
√
p)ϵ
(1)
y=1
It is known that given a Count Sketch that is configured for a
(ϵ′, δ)-guarantee, it is possible to compute a (1 + ϵ′)-approximation
of the L2 with probability 1 − δ [5]. Specifically, as throughout
the processing of S our sketch is identical to a Count Sketch (for
ϵ′ = ϵ
√
p), we have that:
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:169)(cid:173)(cid:171)mediani∈[d]
w
y=1
i,y(cid:170)(cid:174)(cid:172) − L2
2
C2
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) > ϵ
′
L2
2
 ≤ δ .
Pr
Combining this with (1), the lemma follows.
□
In AlwaysCorrect NitroSketch, there are d = O(log δ−1) rows,
each having w = 11ϵ−2p−1 counters. As long as the sketch has
√
not ’converged’ (see Line 14), it is indistinguishable to a Count
Sketch [17] with a guarantee of ϵ′ ≜ ϵ
p. Thus, given a flow x, if
converged = 0 then Algorithm 1 guarantees:
(cid:104)|(cid:98)fx − fx | ≤ ϵL
′
2
(cid:105) ≤ δ .
Pr
√
As ϵ′ = ϵ
p ≤ ϵ the algorithm provides the desired accuracy
guarantee prior to convergence. Henceforth, we assume that we
converged and show that the error is still at most ϵL2.
We denote by u the index of the packet that during its processing
the condition in Line 14 was satisfied and the sketch converged. That
is, packets ai , . . . , au were processed using a UPDATE(1), while
au+1, . . . , am followed a UPDATE(p). Further, we denote by S ≜
a1, . . . , au the substream of the first u packets, by (cid:220)S ≜ au+1, . . . , am
the remaining substream, and for a flow x we use fx and (cid:220)fx to
denote its frequency in S and (cid:220)S. Note that the overall frequency of
x is fx = fx + (cid:220)fx . Additionally, we denote the number of times a
packet that belongs to a flow x in (cid:220)S was sampled by the i’th row as
(cid:220)fx,i . Similarly to the analysis of Theorem 2, we first analyze the
guarantee provided by a single row. Namely, fix some flow x ∈ U
and a row i ∈ {1, . . . , d}; the counter associated with x on this row is
Ci,hi(x). Observe that we can express the value of the i’th estimator
as:
Ci,hi(x)дi(x) = 
y:hi(y)=hi(x)
+ p
fyдi(x)дi(y)
−1 · 
y:hi(y)=hi(x)
(cid:220)fy,iдi(x)дi(y).
(2)
That is, every flow y that is mapped to the same counter as x (i.e.,
hi(y) = hi(x)) changes the estimation by fyдi(x)дi(y)+p−1 (cid:220)fy,iдi(x)дi(y)
– every packet of y in S surely adds дi(y) to the counter (Algorithm 1,
Next, we denote A ≜
Line 13), while every sampled packet in (cid:220)S modifies the counter by

p−1дi(y) (Algorithm 1, Line 20).
that A and B are independent and that E(cid:2)Ci,hi(x)дi(x)(cid:3) = E[A] +
y:hi(y)=hi(x) fyдi(x)дi(y) and B ≜ p−1 ·
(cid:220)fy,iдi(x)дi(y) (i.e., Ci,hi(x)дi(x) = A + B). We note
y:hi(y)=hi(x)
E[B] = fx + (cid:220)fx = fx . That is, the resulting estimator for row i is
unbiased.
Var[A − fx] and Var[B − p−1 (cid:220)fx,i]. First, since
Pr[hi(x) = hi(y)] = 1/w
We now turn to bound the variance of the estimator by bounding

fyдi(x)дi(y) − fx
y:hi(y)=hi(x)
for x (cid:44) y, observe that:
Var[A − fx] = Var
347
NitroSketch: Robust and General Sketch-based Monitoring
SIGCOMM ’19, August 19–23, 2019, Beijing, China


fyдi(x)дi(y)
2 ≤ 1/w

y∈U
2
.
fy
(3)
That is, the probability that each row estimates the frequency of x
with an error no larger than L2ϵ is at least 5/8. Finally, the standard
use of Chernoff’s inequality shows that d = O(log δ−1) (indepen-
dent) rows are required for their median to amplify the probability to
1 − δ. Taking the union bound over the events of sampling too early
and having an error in the row’s median, we have an error probability
no larger than 2δ. This concludes the proof of Theorem 5.
B COMPARISON TO UNIFORM SAMPLING
Our sketch updates each row, for every packet, with probability p.
An alternative approach, uniform sampling, would be updating all
rows with probability 1/p. We note that the two approaches make the
same number of hash computations in expectation. Here, we claim
that our approach is superior to that of uniform sampling.
L2
(cid:16)
(cid:16)
ability 3/4 we have L2,i = O(√
p log δ−1(cid:17)
(cid:112)
Intuitively, our sketch uses the fact that for each row i, with prob-
pL2). This reduction in the second
norm allows one to increase the row width by a factor of p (com-
pared to Count Sketch) to make up for the extra error introduced by