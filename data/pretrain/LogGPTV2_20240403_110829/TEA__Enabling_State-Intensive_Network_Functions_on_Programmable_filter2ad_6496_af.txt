以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

1. **Kemp Technologies** (2019). 比较 Kemp、F5 BIG-IP 和 Citrix NetScaler 硬件负载均衡器。[在线] 可访问: <https://kemptechnologies.com/compare-kemp-f5-big-ip-citrix-netscaler-hardware-load-balancers/>

2. **EdgeCore** (2019). EdgeCore Wedge 100BF-32X。[在线] 可访问: <https://www.edge-core.com/productsInfo.php?cls=1&cls2=5&cls3=181&id=335>

3. **FastClick** (2019)。GitHub 仓库：[在线] 可访问: <https://github.com/tbarbette/fastclick>

4. **Barefoot Networks** (2019)。网络中的 DDoS 检测。[在线] 可访问: <https://www.barefootnetworks.com/use-cases/in-nw-DDoS-detection/>

5. **P4 语言规范** (2019)。P4 16 语言规范。[在线] 可访问: <https://p4.org/p4-spec/docs/P4-16-v1.2.0.pdf>

6. **Mellanox 社区** (2019)。推荐的 RoCE 部署网络配置示例。[在线] 可访问: <https://community.mellanox.com/s/article/recommended-network-configuration-examples-for-roce-deployment>

7. **Arashloo, M.T., Shirshov, P., Gandhi, R., Lu, G., Yuan, L. 和 Rexford, J.** (2018)。多租户云服务的可扩展 VPN 网关。*SIGCOMM Comput. Commun. Rev.* 48(1), 49–55。

8. **Benson, T., Akella, A. 和 Maltz, D.A.** (2010)。野外数据中心的网络流量特征。*ACM IMC* (2010)。

9. **Bloom, B.H.** (1970)。哈希编码中的空间/时间权衡及允许的错误。*Commun. ACM* 13(7), 422–426。

10. **Bosshart, P., Daly, D., Gibb, G., Izzard, M., McKeown, N., Rexford, J., Schlesinger, C., Talayco, D., Vahdat, A., Varghese, G. 和 Walker, D.** (2014)。P4: 编程协议无关的数据包处理器。*SIGCOMM Comput. Commun. Rev.* 44(3), 87–95。

11. **Chen, Y., Wei, X., Shi, J., Chen, R. 和 Chen, H.** (2016)。使用 RDMA 和 HTM 的快速且通用的分布式事务。*EuroSys* (2016)。

12. **Cisco** (2018)。Cisco 全球云指数：预测和方法论，2016-2021 年。[在线] 可访问: <https://www.cisco.com/c/en/us/solutions/collateral/service-provider/global-cloud-index-gci/white-paper-c11-738075.html>

13. **Cormode, G. 和 Hadjieleftheriou, M.** (2008)。在数据流中查找频繁项。*Proc. VLDB Endow.* 1(2), 1530–1541。

14. **Dalton, M., Schultz, D., Adriaens, J., Arefin, A., Gupta, A., Fahs, B., Rubinstein, D., Zermeno, E.C., Rubow, E., Docauer, J.A., Alpert, J., Ai, J., Olson, J., DeCabooter, K., Kruijf, M.D., Hua, N., Lewis, N., Kasinadhuni, N., Crepaldi, R., Krishnan, S., Venkata, S., Richter, Y., Naik, U. 和 Vahdat, A.** (2018)。Andromeda：在云网络虚拟化中实现性能、隔离和速度的大规模应用。*USENIX NSDI* (2018)。

15. **Dragojević, A., Narayanan, D., Castro, M. 和 Hodson, O.** (2014)。FaRM：快速远程内存。*USENIX NSDI* (2014)。

16. **Dragojević, A., Narayanan, D., Nightingale, E.B., Renzelmann, M., Shamis, A., Badam, A. 和 Castro, M.** (2015)。无妥协：具有一致性、可用性和性能的分布式事务。*ACM SOSP* (2015)。

17. **Eisenbud, D.E., Yi, C., Contavalli, C., Smith, C., Kononov, R., Mann-Hielscher, E., Cilingiroglu, A., Cheyney, B., Shang, W. 和 Hosein, J.D.** (2015)。Maglev：一种快速可靠的软件网络负载均衡器。*USENIX NSDI* (2015)。

18. **Fan, B., Lim, H., Andersen, D.G. 和 Kaminsky, M.** (2011)。小缓存，大效果：随机分区集群服务的可证明负载均衡。*ACM SOCC* (2011)。

19. **Firestone, D., Putnam, A., Mundkur, S., Chiou, D., Dabagh, A., Andrewartha, M., Angepat, H., Bhanu, V., Caulfield, A., Chung, E., Chandrappa, H.K., Chaturmohta, S., Humphrey, M., Lavier, J., Lam, N., Liu, F., Ovtcharov, K., Padhye, J., Popuri, G., Raindel, S., Sapre, T., Shaw, M., Silva, G., Sivakumar, M., Srivastava, N., Verma, A., Zuhair, Q., Bansal, D., Burger, D., Vaid, K., Maltz, D.A. 和 Greenberg, A.** (2018)。Azure 加速网络：公共云中的 SmartNIC。*USENIX NSDI* (2018)。

20. **Gandhi, R., Liu, H.H., Hu, Y.C., Lu, G., Padhye, J., Yuan, L. 和 Zhang, M.** (2014)。Duet：硬件和软件结合的云规模负载均衡。*ACM SIGCOMM* (2014)。

21. **Gember-Jacobson, A., Viswanathan, R., Prakash, C., Grandl, R., Khalid, J., Das, S. 和 Akella, A.** (2014)。OpenNF：启用网络功能控制的创新。*ACM SIGCOMM* (2014)。

22. **Guo, C., Wu, H., Deng, Z., Soni, G., Ye, J., Padhye, J. 和 Lipshteyn, M.** (2016)。大规模商品以太网上的 RDMA。*ACM SIGCOMM* (2016)。

23. **Gupta, A., Harrison, R., Canini, M., Feamster, N., Rexford, J. 和 Willinger, W.** (2018)。Sonata：查询驱动的流式网络遥测。*ACM SIGCOMM* (2018)。

24. **Heinanen, J. 和 Guerin, R.** (1999)。双速率三色标记。RFC 2698。

25. **Infiniband Trace Association** (2010)。InfiniBand 架构规范第 1 卷第 1.2.1 版附录 A16：融合以太网上的 RDMA (RoCE)。

26. **Infiniband Trace Association** (2010)。InfiniBand 架构规范第 1 卷第 1.2.1 版附录 A17：融合以太网上的 RDMA (RoCE)。

27. **Jin, X., Li, X., Zhang, H., Foster, N., Lee, J., Soulé, R., Kim, C. 和 Stoica, I.** (2018)。NetChain：无尺度亚 RTT 协调。*USENIX NSDI* (2018)。

28. **Jin, X., Li, X., Zhang, H., Soulé, R., Lee, J., Foster, N., Kim, C. 和 Stoica, I.** (2017)。NetCache：通过快速网络内缓存平衡键值存储。*ACM SOSP* (2017)。

29. **Kablan, M., Alsudais, A., Keller, E. 和 Le, F.** (2017)。无状态网络功能：打破状态和处理的紧密耦合。*USENIX NSDI* (2017)。

30. **Kalia, A., Kaminsky, M. 和 Andersen, D.G.** (2014)。高效使用 RDMA 用于键值服务。*ACM SIGCOMM* (2014)。

31. **Karger, D., Lehman, E., Leighton, T., Panigrahy, R., Levine, M. 和 Lewin, D.** (1997)。一致哈希和随机树：用于缓解万维网上热点的分布式缓存协议。*ACM STOC* (1997)。

32. **Katta, N., Alipourfard, O., Rexford, J. 和 Walker, D.** (2016)。Cacheflow：软件定义网络中的依赖感知规则缓存。*ACM SOSR* (2016)。

33. **Kim, C., Caesar, M., Gerber, A. 和 Rexford, J.** (2009)。重新审视路由缓存：世界应该是平的。*PAM* (2009)。

34. **Kim, D., Memaripour, A., Badam, A., Zhu, Y., Liu, H.H., Padhye, J., Raindel, S., Swanson, S., Sekar, V. 和 Seshan, S.** (2018)。Hyperloop：基于组的 NIC 卸载以加速多租户存储系统中的复制事务。*ACM SIGCOMM* (2018)。

35. **Kim, D., Zhu, Y., Kim, C., Lee, J. 和 Seshan, S.** (2018)。交换机数据平面的通用外部存储器。*ACM HotNets* (2018)。

36. **Li, B., Tan, K., Luo, L.L., Peng, Y., Luo, R., Xu, N., Xiong, Y., Cheng, P. 和 Chen, E.** (2016)。ClickNP：高度灵活且高性能的可重构硬件网络处理。*ACM SIGCOMM* (2016)。

37. **Li, J., Michael, E., Sharma, N.K., Szekeres, A. 和 Ports, D.R.K.** (2016)。拒绝 Paxos 开销：用网络排序代替共识。*USENIX OSDI* (2016)。

38. **Liu, Z., Bai, Z., Liu, Z., Li, X., Kim, C., Braverman, V., Jin, X. 和 Stoica, I.** (2019)。DistCache：适用于带有分布式缓存的大规模存储系统的可证明负载均衡。*USENIX FAST* (2019)。

39. **Liu, Z., Manousis, A., Vorsanger, G., Sekar, V. 和 Braverman, V.** (2016)。一个统领所有草图：重新思考 UnivMon 的网络流监控。*ACM SIGCOMM* (2016)。

40. **Lu, Y., Shu, J., Chen, Y. 和 Li, T.** (2017)。Octopus：支持 RDMA 的分布式持久内存文件系统。*USENIX ATC* (2017)。

41. **Miao, R., Zeng, H., Kim, C., Lee, J. 和 Yu, M.** (2017)。SilkRoad：使用交换 ASIC 实现快速且廉价的状态化四层负载均衡。*ACM SIGCOMM* (2017)。

42. **Mitchell, C., Geng, Y. 和 Li, J.** (2013)。使用单边 RDMA 读取构建快速高效的键值存储。*USENIX ATC* (2013)。

43. **Mittal, R., Lam, V.T., Dukkipati, N., Blem, E., Wassel, H., Ghobadi, M., Vahdat, A., Wang, Y., Wetherall, D. 和 Zats, D.** (2015)。TIMELY：基于 RTT 的数据中心拥塞控制。*ACM SIGCOMM* (2015)。

44. **Narayana, S., Sivaraman, A., Nathan, V., Goyal, P., Arun, V., Alizadeh, M., Jeyakumar, V. 和 Kim, C.** (2017)。面向语言的硬件设计用于网络性能监控。*ACM SIGCOMM* (2017)。

45. **Ousterhout, J., Agrawal, P., Erickson, D., Kozyrakis, C., Leverich, J., Mazières, D., Mitra, S., Narayanan, A., Parulkar, G., Rosenblum, M. 等** (2010)。RAMClouds 的案例：完全在 DRAM 中的可扩展高性能存储。*ACM SIGOPS Operating Systems Review* 43(4), 92–105。

46. **Pagh, R. 和 Rodler, F.F.** (2001)。布谷鸟哈希。*欧洲算法研讨会* (2001)。

47. **Patel, P., Bansal, D., Yuan, L., Murthy, A., Greenberg, A., Maltz, D.A., Kern, R., Kumar, H., Zikos, M., Wu, H., Kim, C. 和 Karri, N.** (2013)。Ananta：云规模负载均衡。*ACM SIGCOMM* (2013)。

48. **Pontarelli, S., Reviriego, P. 和 Mitzenmacher, M.** (2018)。EMOMA：一次内存访问中的精确匹配。*IEEE Transactions on Knowledge and Data Engineering* 30(11), 2120–2133。

49. **Rajagopalan, S., Williams, D., Jamjoom, H. 和 Warfield, A.** (2013)。Split/Merge：虚拟中间盒的弹性执行系统支持。*USENIX NSDI* (2013)。

50. **Roy, A., Zeng, H., Bagga, J., Porter, G. 和 Snoeren, A.C.** (2015)。社交网络（数据中心）网络内部。*ACM SIGCOMM* (2015)。

51. **Shan, Y., Tsai, S.-Y. 和 Zhang, Y.** (2017)。分布式共享持久内存。*ACM SoCC* (2017)。

52. **Thaler, D.G. 和 Ravishankar, C.V.** (1998)。使用基于名称的映射提高命中率。*IEEE/ACM Trans. Netw.* 6(1), 1–14。

53. **Waldvogel, M., Varghese, G., Turner, J. 和 Plattner, B.** (1997)。可扩展的高速 IP 路由查找。*ACM SIGCOMM* (1997)。

54. **Woo, S., Sherry, J., Han, S., Moon, S., Ratnasamy, S. 和 Shenker, S.** (2018)。有状态网络功能的弹性扩展。*USENIX NSDI* (2018)。

55. **Zhou, D.** (2019)。高性能软件数据包处理的数据结构工程。博士论文。卡内基梅隆大学。

---

### 附录

#### A. TEA-Table 操作伪代码

**算法 1：TEA-Table 插入操作（控制平面）**

```plaintext
插入(key, value) for TEA-Table
1 tries = 0;
2 entry = (key, value);
3 while tries < MaxTries do
4   /* 临时将条目存储在 SRAM 中 */
5   将条目插入 SRAM Stash;
6   i = hash(key);
7   if bucket[i] 有一个空单元格 then
8     将条目插入该单元格;
9     从 SRAM 中移除条目;
10    将单元格复制到影子表;
11    返回 Done;
12  j = (i + 1) % n;
13  if bucket[j] 有一个空单元格 then
14    将条目插入该单元格;
15    从 SRAM 中移除条目;
16    将单元格复制到影子表;
17    返回 Done;
18  从 bucket[i] ∪ bucket[j] 中选择一个随机单元格 c;
19  victim = c.entry;
20  将条目插入 c;
21  从 SRAM Stash 中移除条目;
22  entry = victim;
23  tries++;
```

**算法 2：TEA-Table 查找操作（数据平面）**

```plaintext
查找(key) for TEA-Table
1 if key 存在于 SRAM Stash 或 Cache 中 then
2   返回 (SRAM[key], packet);
3 i = hash(key);
4 /* 解析桶的内存地址 */
5 addr = resolve_addr(i);
6 /* 将数据包写入 scratchpad */
7 RDMA_Write (addr + KV_LEN, packet, packet_length);
8 length = KV_LEN + packet_length;
9 /* 读取桶和数据包 */
10 (kv_cells, packet) = RDMA_Read (addr, length);
11 查找响应处理程序：
12  接收查找响应数据包后
13    返回 (kv_cells[key], packet);
```

#### B. 使用 TEA 的 NF 实现简化 P4 代码

如第 5 节所述，我们在 P4 中实现了 TEA API，并将其作为模块化的 P4 代码公开 [17, §13]。图 12 显示了一个使用 TEA API 编写的 P4 程序示例。TEA 提供的控制块，包括 LookupHandler、ServerResolver、MemResolver 和 LookupRequestor 在入口或出口管道中与 NF 逻辑一起使用。基于此模板，开发人员可以将 TEA 与其 NF 实现集成。根据模板，我们实现了 NAT、有状态防火墙、负载均衡器和 VPN 网关，如下是这些 NF 的简化 P4 代码。

**图 12：使用 TEA 抽象的 P4 程序模板。TEA 作为一个 P4 控制函数库（例如 lookup_response_handler）公开。**

```p4
#include "tea_core.p4"

control Ingress(headers hdr, metadata meta) {
  LookupHandler() lookup_handler;
  ServerResolver() server_resolver;
  MemResolver() mem_resolver;

  apply {
    lookup_handler.apply(hdr, meta);
    if (meta.lookup_md.found == true) {
      // [Ingress NF logic]
    } else {
      server_resolver.apply(meta);
      mem_resolver.apply(meta);
    }
  }
}

control Egress(headers hdr, metadata meta) {
  LookupRequestor() lookup_req;

  apply {
    if (meta.lookup_md.found == true) {
      // [Egress NF logic]
    } else {
      lookup_req.apply(hdr, meta);
    }
  }
}
```

**图 13：NAT**

```p4
#include "tea_core.p4"

// ...

control Ingress(headers hdr, metadata meta) {
  // ...

  action nat_ext_to_int() {
    hdr.ipv4.dstIP = meta.lookup_md.pip;
    hdr.ipv4.dstPort = meta.lookup_md.pport;
  }

  table nat {
    key = {meta.lookup_md.dir: exact;}
    actions = {nat_ext_to_int; nat_int_to_ext; drop;}
  }

  // ...

  LookupHandler() lookup_handler;
  ServerResolver() server_resolver;
  MemResolver() mem_resolver;

  apply {
    // ...
    lookup_handler.apply(hdr, meta);
    if (meta.lookup_md.found == true) {
      nat.apply();
      forward.apply();
    } else {
      server_resolver.apply(meta);
      mem_resolver.apply(meta);
    }
    // ...
  }
}

control Egress(headers hdr, metadata meta) {
  LookupRequestor() lookup_req;

  apply {
    if (meta.lookup_md.found == false) {
      lookup_req.apply(hdr, meta);
    }
  }
}
```

**图 14：防火墙**

```p4
#include "tea_core.p4"

// ...

control Ingress(headers hdr, metadata meta) {
  // ...

  LookupHandler() lookup_handler;
  ServerResolver() server_resolver;
  MemResolver() mem_resolver;

  apply {
    // ...
    lookup_handler.apply(hdr, meta);
    if (is_ext.apply().hit) { // 数据包来自外部？
      if (meta.lookup_md.found == true) {
        forward.apply();
      } else {
        if (meta.lookup_md.remote_miss == false) {
          server_resolver.apply(meta);
          mem_resolver.apply(meta);
        }
      }
    }
    // ...
  }
}

control Egress(headers hdr, metadata meta) {
  LookupRequestor() lookup_req;

  apply {
    if (meta.lookup_md.found == false && meta.lookup_md.remote_miss == false) {
      lookup_req.apply(hdr, meta);
    }
  }
}
```

**图 15：负载均衡器**

```p4
#include "tea_core.p4"

// ...

control Ingress(headers hdr, metadata meta) {
  // ...

  action update_server_addr() {
    hdr.ipv4.dstIP = meta.lookup_md.serverIP;
  }

  // ...

  LookupHandler() lookup_handler;
  ServerResolver() server_resolver;
  MemResolver() mem_resolver;

  apply {
    // ...
    lookup_handler.apply(hdr, meta);
    if (meta.lookup_md.found == true) {
      update_server_addr();
      forward.apply();
    } else {
      server_resolver.apply(meta);
      mem_resolver.apply(meta);
    }
    // ...
  }
}

control Egress(headers hdr, metadata meta) {
  LookupRequestor() lookup_req;

  apply {
    if (meta.lookup_md.found == false) {
      lookup_req.apply(hdr, meta);
    }
  }
}
```

**图 16：VPN 网关**

```p4
#include "tea_core.p4"

// ...

control Ingress(headers hdr, metadata meta) {
  // ...

  action encap_packet() {
    hdr.l3_tunnel.setValid();
    hdr.out_ipv4.setValid();
    // ...
    hdr.l3_tunnel.id = meta.lookup_md.l3_tun_id;
    hdr.out_ipv4.dstIP = meta.lookup_md.serverIP;
    // ...
  }

  // ...

  LookupHandler() lookup_handler;
  ServerResolver() server_resolver;
  MemResolver() mem_resolver;

  apply {
    // ...
    lookup_handler.apply(hdr, meta);
    if (is_ext.apply().hit) { // 数据包来自外部？
      if (meta.lookup_md.found == true) {
        encap_packet();
        forward.apply();
      } else {
        server_resolver.apply(meta);
        mem_resolver.apply(meta);
      }
    }
    // ...
  }
}

control Egress(headers hdr, metadata meta) {
  LookupRequestor() lookup_req;

  apply {
    if (meta.lookup_md.found == false) {
      lookup_req.apply(hdr, meta);
    }
  }
}
```

---

希望这能帮助你更好地组织和展示你的内容！如果有任何进一步的修改需求，请告诉我。