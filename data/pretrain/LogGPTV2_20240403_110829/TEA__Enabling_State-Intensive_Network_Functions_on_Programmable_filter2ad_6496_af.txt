https://kemptechnologies.com/compare-kemp-f5-big-ip-citrix-netscaler-
hardware-load-balancers/.
[14] 2019. EdgeCore Wedge 100BF-32X. https://www.edge-core.com/productsInfo.
php?cls=1&cls2=5&cls3=181&id=335.
[15] 2019. FastClick. https://github.com/tbarbette/fastclick.
[16] 2019.
In-network DDoS Detection. https://www.barefootnetworks.com/use-
cases/in-nw-DDoS-detection/.
[17] 2019. P416 Language Specification. https://p4.org/p4-spec/docs/P4-16-v1.2.0.
Recommended Network Configuration Examples for RoCE De-
ployment. https://community.mellanox.com/s/article/recommended-network-
configuration-examples-for-roce-deployment.
[19] Mina Tahmasbi Arashloo, Pavel Shirshov, Rohan Gandhi, Guohan Lu, Lihua Yuan,
and Jennifer Rexford. 2018. A Scalable VPN Gateway for Multi-Tenant Cloud
Services. SIGCOMM Comput. Commun. Rev. 48, 1 (April 2018), 49–55.
[20] Theophilus Benson, Aditya Akella, and David A. Maltz. 2010. Network Traffic
Characteristics of Data Centers in the Wild. In ACM IMC (2010).
[21] Burton H. Bloom. 1970. Space/Time Trade-offs in Hash Coding with Allowable
Errors. Commun. ACM 13, 7 (July 1970), 422–426.
[22] Pat Bosshart, Dan Daly, Glen Gibb, Martin Izzard, Nick McKeown, Jennifer
Rexford, Cole Schlesinger, Dan Talayco, Amin Vahdat, George Varghese, and
David Walker. 2014. P4: Programming Protocol-independent Packet Processors.
SIGCOMM Comput. Commun. Rev. 44, 3 (July 2014), 87–95.
[23] Yanzhe Chen, Xingda Wei, Jiaxin Shi, Rong Chen, and Haibo Chen. 2016. Fast
and General Distributed Transactions Using RDMA and HTM. In EuroSys (2016).
[24] Cisco. 2018. Cisco Global Cloud Index: Forecast and Methodology, 2016–2021
html.
[18] 2020.
[25] Graham Cormode and Marios Hadjieleftheriou. 2008. Finding Frequent Items in
Data Streams. Proc. VLDB Endow. 1, 2 (Aug. 2008), 1530–1541.
[26] Michael Dalton, David Schultz, Jacob Adriaens, Ahsan Arefin, Anshuman
Gupta, Brian Fahs, Dima Rubinstein, Enrique Cauich Zermeno, Erik Rubow,
James Alexander Docauer, Jesse Alpert, Jing Ai, Jon Olson, Kevin DeCabooter,
Marc de Kruijf, Nan Hua, Nathan Lewis, Nikhil Kasinadhuni, Riccardo Crepaldi,
Srinivas Krishnan, Subbaiah Venkata, Yossi Richter, Uday Naik, and Amin Vahdat.
2018. Andromeda: Performance, Isolation, and Velocity at Scale in Cloud Network
Virtualization. In USENIX NSDI (2018).
[27] Aleksandar Dragojević, Dushyanth Narayanan, Miguel Castro, and Orion Hodson.
2014. FaRM: Fast Remote Memory. In USENIX NSDI (2014).
[28] Aleksandar Dragojević, Dushyanth Narayanan, Edmund B. Nightingale, Matthew
Renzelmann, Alex Shamis, Anirudh Badam, and Miguel Castro. 2015. No Compro-
mises: Distributed Transactions with Consistency, Availability, and Performance.
In ACM SOSP (2015).
[29] Daniel E. Eisenbud, Cheng Yi, Carlo Contavalli, Cody Smith, Roman Kononov,
Eric Mann-Hielscher, Ardas Cilingiroglu, Bin Cheyney, Wentao Shang, and Jin-
nah Dylan Hosein. 2015. Maglev: A Fast and Reliable Software Network Load
Balancer. In USENIX NSDI (2015).
[30] Bin Fan, Hyeontaek Lim, David G. Andersen, and Michael Kaminsky. 2011. Small
Cache, Big Effect: Provable Load Balancing for Randomly Partitioned Cluster
Services. In ACM SOCC (2011).
White Paper.
Editor.
[31] Daniel Firestone, Andrew Putnam, Sambhrama Mundkur, Derek Chiou, Alireza
Dabagh, Mike Andrewartha, Hari Angepat, Vivek Bhanu, Adrian Caulfield, Eric
Chung, Harish Kumar Chandrappa, Somesh Chaturmohta, Matt Humphrey, Jack
Lavier, Norman Lam, Fengfen Liu, Kalin Ovtcharov, Jitu Padhye, Gautham Popuri,
Shachar Raindel, Tejas Sapre, Mark Shaw, Gabriel Silva, Madhan Sivakumar,
Nisheeth Srivastava, Anshuman Verma, Qasim Zuhair, Deepak Bansal, Doug
Burger, Kushagra Vaid, David A. Maltz, and Albert Greenberg. 2018. Azure
Accelerated Networking: SmartNICs in the Public Cloud. In USENIX NSDI (2018).
[32] Rohan Gandhi, Hongqiang Harry Liu, Y. Charlie Hu, Guohan Lu, Jitendra Padhye,
Lihua Yuan, and Ming Zhang. 2014. Duet: Cloud Scale Load Balancing with
Hardware and Software. In ACM SIGCOMM (2014).
[33] Aaron Gember-Jacobson, Raajay Viswanathan, Chaithan Prakash, Robert Grandl,
Junaid Khalid, Sourav Das, and Aditya Akella. 2014. OpenNF: Enabling Innovation
in Network Function Control. In ACM SIGCOMM (2014).
[34] Chuanxiong Guo, Haitao Wu, Zhong Deng, Gaurav Soni, Jianxi Ye, Jitu Padhye,
and Marina Lipshteyn. 2016. RDMA over Commodity Ethernet at Scale. In ACM
SIGCOMM (2016).
[35] Arpit Gupta, Rob Harrison, Marco Canini, Nick Feamster, Jennifer Rexford, and
Walter Willinger. 2018. Sonata: Query-driven Streaming Network Telemetry. In
ACM SIGCOMM (2018).
[36] J. Heinanen and R. Guerin. 1999. A Two Rate Three Color Marker. RFC 2698. RFC
[37] Infiniband Trace Association. 2010. Supplement to InfiniBand architecture spec-
ification volume 1 release 1.2.1 annex A16: RDMA over converged ethernet
(RoCE).
[38] Infiniband Trace Association. 2010. Supplement to InfiniBand architecture spec-
ification volume 1 release 1.2.1 annex A17: RDMA over converged ethernet
(RoCE).
[39] Xin Jin, Xiaozhou Li, Haoyu Zhang, Nate Foster, Jeongkeun Lee, Robert Soulé,
Changhoon Kim, and Ion Stoica. 2018. NetChain: Scale-Free Sub-RTT Coordina-
tion. In USENIX NSDI (2018).
[40] Xin Jin, Xiaozhou Li, Haoyu Zhang, Robert Soulé, Jeongkeun Lee, Nate Foster,
Changhoon Kim, and Ion Stoica. 2017. NetCache: Balancing Key-Value Stores
with Fast In-Network Caching. In ACM SOSP (2017).
[41] Murad Kablan, Azzam Alsudais, Eric Keller, and Franck Le. 2017. Stateless
Network Functions: Breaking the Tight Coupling of State and Processing. In
USENIX NSDI (2017).
[42] Anuj Kalia, Michael Kaminsky, and David G. Andersen. 2014. Using RDMA
Efficiently for Key-value Services. In ACM SIGCOMM (2014).
[43] David Karger, Eric Lehman, Tom Leighton, Rina Panigrahy, Matthew Levine, and
Daniel Lewin. 1997. Consistent Hashing and Random Trees: Distributed Caching
Protocols for Relieving Hot Spots on the World Wide Web. In ACM STOC (1997).
[44] Naga Katta, Omid Alipourfard, Jennifer Rexford, and David Walker. 2016.
Cacheflow: Dependency-aware rule-caching for software-defined networks. In
ACM SOSR (2016).
[45] Changhoon Kim, Matthew Caesar, Alexandre Gerber, and Jennifer Rexford. 2009.
Revisiting Route Caching: The World Should Be Flat. In PAM (2009).
[46] Daehyeok Kim, Amirsaman Memaripour, Anirudh Badam, Yibo Zhu,
Hongqiang Harry Liu, Jitu Padhye, Shachar Raindel, Steven Swanson, Vyas
Sekar, and Srinivasan Seshan. 2018. Hyperloop: Group-based NIC-offloading to
Accelerate Replicated Transactions in Multi-tenant Storage Systems. In ACM
SIGCOMM (2018).
[47] Daehyeok Kim, Yibo Zhu, Changhoon Kim, Jeongkeun Lee, and Srinivasan Seshan.
2018. Generic External Memory for Switch Data Planes. In ACM HotNets (2018).
[48] Bojie Li, Kun Tan, Layong Larry Luo, Yanqing Peng, Renqian Luo, Ningyi Xu,
Yongqiang Xiong, Peng Cheng, and Enhong Chen. 2016. Clicknp: Highly flexible
and high performance network processing with reconfigurable hardware. In
ACM SIGCOMM (2016).
[49] Jialin Li, Ellis Michael, Naveen Kr. Sharma, Adriana Szekeres, and Dan R. K.
Ports. 2016. Just Say No to Paxos Overhead: Replacing Consensus with Network
Ordering. In USENIX OSDI (2016).
[50] Zaoxing Liu, Zhihao Bai, Zhenming Liu, Xiaozhou Li, Changhoon Kim, Vladimir
Braverman, Xin Jin, and Ion Stoica. 2019. DistCache: Provable Load Balancing for
Large-Scale Storage Systems with Distributed Caching. In USENIX FAST (2019).
[51] Zaoxing Liu, Antonis Manousis, Gregory Vorsanger, Vyas Sekar, and Vladimir
Braverman. 2016. One Sketch to Rule Them All: Rethinking Network Flow
Monitoring with UnivMon. In ACM SIGCOMM (2016).
[52] Youyou Lu, Jiwu Shu, Youmin Chen, and Tao Li. 2017. Octopus: an RDMA-enabled
Distributed Persistent Memory File System. In USENIX ATC (2017).
[53] Rui Miao, Hongyi Zeng, Changhoon Kim, Jeongkeun Lee, and Minlan Yu. 2017.
SilkRoad: Making Stateful Layer-4 Load Balancing Fast and Cheap Using Switch-
ing ASICs. In ACM SIGCOMM (2017).
[54] Christopher Mitchell, Yifeng Geng, and Jinyang Li. 2013. Using One-Sided RDMA
Reads to Build a Fast, CPU-Efficient Key-Value Store. In USENIX ATC (2013).
[55] Radhika Mittal, Vinh The Lam, Nandita Dukkipati, Emily Blem, Hassan Wassel,
Monia Ghobadi, Amin Vahdat, Yaogong Wang, David Wetherall, and David
Zats. 2015. TIMELY: RTT-based Congestion Control for the Datacenter. In ACM
SIGCOMM (2015).
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Daehyeok Kim et al.
[56] Srinivas Narayana, Anirudh Sivaraman, Vikram Nathan, Prateesh Goyal, Venkat
Arun, Mohammad Alizadeh, Vimalkumar Jeyakumar, and Changhoon Kim. 2017.
Language-Directed Hardware Design for Network Performance Monitoring. In
ACM SIGCOMM (2017).
[57] John Ousterhout, Parag Agrawal, David Erickson, Christos Kozyrakis, Jacob Lev-
erich, David Mazières, Subhasish Mitra, Aravind Narayanan, Guru Parulkar,
Mendel Rosenblum, et al. 2010. The case for RAMClouds: scalable high-
performance storage entirely in DRAM. ACM SIGOPS Operating Systems Review
43, 4 (2010), 92–105.
[58] Rasmus Pagh and Flemming Friche Rodler. 2001. Cuckoo hashing. In European
Symposium on Algorithms (2001).
[59] Parveen Patel, Deepak Bansal, Lihua Yuan, Ashwin Murthy, Albert Green-
berg, David A. Maltz, Randy Kern, Hemant Kumar, Marios Zikos, Hongyu Wu,
Changhoon Kim, and Naveen Karri. 2013. Ananta: Cloud Scale Load Balancing.
In ACM SIGCOMM (2013).
[60] S. Pontarelli, P. Reviriego, and M. Mitzenmacher. 2018. EMOMA: Exact Match in
One Memory Access. IEEE Transactions on Knowledge and Data Engineering 30,
11 (Nov 2018), 2120–2133.
[61] Shriram Rajagopalan, Dan Williams, Hani Jamjoom, and Andrew Warfield. 2013.
Split/Merge: System Support for Elastic Execution in Virtual Middleboxes. In
USENIX NSDI (2013).
[62] Arjun Roy, Hongyi Zeng, Jasmeet Bagga, George Porter, and Alex C. Snoeren.
2015. Inside the Social Network’s (Datacenter) Network. In ACM SIGCOMM
(2015).
[63] Yizhou Shan, Shin-Yeh Tsai, and Yiying Zhang. 2017. Distributed Shared Persis-
tent Memory. In ACM SoCC (2017).
[64] David G. Thaler and Chinya V. Ravishankar. 1998. Using Name-based Mappings
to Increase Hit Rates. IEEE/ACM Trans. Netw. 6, 1 (Feb. 1998), 1–14.
[65] Marcel Waldvogel, George Varghese, Jon Turner, and Bernhard Plattner. 1997.
Scalable High Speed IP Routing Lookups. In ACM SIGCOMM (1997).
[66] Shinae Woo, Justine Sherry, Sangjin Han, Sue Moon, Sylvia Ratnasamy, and Scott
Shenker. 2018. Elastic Scaling of Stateful Network Functions. In USENIX NSDI
(2018).
[67] Dong Zhou. 2019. Data Structure Engineering for High Performance Software
Packet Processing. Ph.D. Dissertation. Carnegie Mellon University.
TEA: Enabling State-Intensive Network Functions on Programmable Switches
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Note: Appendices are supporting material that has
not been peer-reviewed.
A Psuedocode for TEA-Table Operations
Algorithm 1: Insert(key,value) for TEA-Table (Control
plane).
1 tries=0;
2 entry=(key,value);
3 while tries < MaxTries do
/* Temporaily store the entry in SRAM during insertion
insert entry to SRAM Stash;
i=hash(key);
if bucket[i] has an empty cell then
insert entry to the cell;
remove entry from SRAM;
copy the cell to the shadow table;
return Done;
j=(i+1) % n;
if bucket[j] has an empty cell then
insert entry to the cell;
remove entry from SRAM;
copy the cell to the shadow table;
return Done;
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
select a random cell c from bucket[i] ∪ bucket[j];
victim=c .entry;
insert entry to c;
remove entry from SRAM stash;
entry=victim;
tries++;
Algorithm 2: Lookup(key) for TEA-Table (Data plane).
1 if key exists in SRAM Stash or Cache then
2
3 i=hash(key);
return (SRAM[key],packet);
/* Resolve memory address of the bucket
4 addr=resolve_addr(i);
/* Write the packet to the scratchpad
5 RDMA_Write (addr+KV_LEN, packet, packet_length);
6 length=KV_LEN+packet_length;
/* Read the bucket and packet
7 (kv_cells, packet) = RDMA_Read (addr, length);
8 Lookup response handler:
9
10
Upon receive lookup response packet
return (kv_cells[key], packet);
B Simplified P4 codes of NF implementations
with TEA
As mentioned in §5, we implement the TEA APIs in P4 and expose
them as modularized P4 codes [17, §13]. Figure 12 shows an example
program written in P4 using the TEA APIs. Control blocks provided
by TEA, including LookupHandler, ServerResolver, MemResolver,
and LookupRequestor are used in the ingress or egress pipeline,
along with the NF logic. Extending this template, developers can
integrate TEA with their NF implementations. Based on the tem-
plate, we implement NAT, stateful firewall, load balancer, and VPN
gateway, described in §5 and below are the simplified P4 codes of
the NFs.
Figure 12: A template of P4 program using TEA abstrac-
tion. TEA exposes as a library of P4 control functions (e.g.,
lookup_response_handler).
*/
*/
*/
*/
12345678910111213141516171819202122232425#include"tea_core.p4"controlIngress(headershdr, metadata meta) {LookupHandler() lookup_handler;ServerResolver() server_resolver;MemResolver() mem_resolver;apply {lookup_handler.apply(hdr, meta);if(meta.lookup_md.found== true) {[Ingress NF logic]} else{server_resolver.apply(meta); mem_resolver.apply(meta); } }}controlEgress(headershdr, metadata meta) {LookupRequestor() lookup_req;apply {if(meta.lookup_md.found== true) {[Egress NF logic]} else{lookup_req.apply(hdr, meta);}}}SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Daehyeok Kim et al.
Figure 14: Firewall
Figure 13: NAT
1234567891011121314151617181920212223242526272829303132333435363738394041424344#include"tea_core.p4”...controlIngress(headershdr, metadata meta) {...actionnat_ext_to_int() {hdr.ipv4.dstIP = meta.lookup_md.pip;hdr.ipv4.dstPort = meta.lookup_md.pport;}...tablenat{key = {meta.lookup_md.dir: exact;}actions = {nat_ext_to_int;nat_int_to_ext;drop;}}...LookupHandler() lookup_handler;ServerResolver() server_resolver;MemResolver() mem_resolver;apply {...lookup_handler.apply(hdr, meta);if(meta.lookup_md.found== true) {nat.apply();forward.apply();} else{server_resolver.apply(meta); mem_resolver.apply(meta); } ...}}controlEgress(headershdr, metadata meta) {LookupRequestor() lookup_req;apply {if(meta.lookup_md.found== false) {lookup_req.apply(hdr, meta);} }}1234567891011121314151617181920212223242526272829303132#include"tea_core.p4”...controlIngress(headershdr, metadata meta) {...LookupHandler() lookup_handler;ServerResolver() server_resolver;MemResolver() mem_resolver;apply {...lookup_handler.apply(hdr, meta);if (is_ext.apply().hit) { //packet from external?if(meta.lookup_md.found== true) {forward.apply();} else{if (meta.lookup_md.remote_miss== false) {server_resolver.apply(meta); mem_resolver.apply(meta); }} }...}}controlEgress(headershdr, metadata meta) {LookupRequestor() lookup_req;apply {if(meta.lookup_md.found== false &&meta.lookup_md.remote_miss==false) {lookup_req.apply(hdr, meta);} }}TEA: Enabling State-Intensive Network Functions on Programmable Switches
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Figure 15: Load balancer
Figure 16: VPN gateway
1234567891011121314151617181920212223242526272829303132#include"tea_core.p4”...controlIngress(headershdr, metadata meta) {...actionupdate_server_addr() {hdr.ipv4.dstIP = meta.lookup_md.serverIP;}...LookupHandler() lookup_handler;ServerResolver() server_resolver;MemResolver() mem_resolver;apply {...lookup_handler.apply(hdr, meta);if(meta.lookup_md.found== true) {update_server_addr();forward.apply();} else{server_resolver.apply(meta); mem_resolver.apply(meta); } ...}}controlEgress(headershdr, metadata meta) {LookupRequestor() lookup_req;apply {if(meta.lookup_md.found== false) {lookup_req.apply(hdr, meta);} }}123456789101112131415161718192021222324252627282930313233343536373839#include"tea_core.p4”...controlIngress(headershdr, metadata meta) {...actionencap_packet() {hdr.l3_tunnel.setValid();hdr.out_ipv4.setValid();...hdr.l3_tunnel.id = meta.lookup_md.l3_tun_id;hdr.out_ipv4.dstIP = meta.lookup_md.serverIP;...}...LookupHandler() lookup_handler;ServerResolver() server_resolver;MemResolver() mem_resolver;apply {...lookup_handler.apply(hdr, meta);if (is_ext.apply().hit) { //packet from external?if(meta.lookup_md.found== true) {encap_packet();forward.apply();} else{server_resolver.apply(meta); mem_resolver.apply(meta); } }...}}controlEgress(headershdr, metadata meta) {LookupRequestor() lookup_req;apply {if(meta.lookup_md.found== false) {lookup_req.apply(hdr, meta);} }}