interaction with mobile devices and services, 2012.
[12] Android device names.
AndroidDeviceNames.
https://github.com/jaredrummler/
[13] S. Aonzo, A. Merlo, G. Tavella, and Y. Fratantonio. Phishing attacks
on modern android. In CCS, 2018.
[14] E. Fernandes, Q. A. Chen, J. Paupore, G. Essl, J. A. Halderman, Z. M.
Mao, and A. Prakash. Android ui deception revisited: Attacks and
defenses. In Financial Cryptography and Data Security, 2016.
[15] Android Q privacy change: Restrictions to background activ-
ity starts. https://developer.android.com/preview/privacy/
background-activity-starts#display-notification-user.
[16] A. P. Felt and D. Wagner. Phishing on mobile devices. 2011.
[17] E. Chin, A. Felt, K. Greenwood, and D. Wagner. Analyzing inter-
application communication in android. In MobiSys, 2011.
[18] R. Spreitzer, G. Palﬁnger, and S. Mangard. Scandroid: Automated side-
channel analysis of android apis. In Security & Privacy in Wireless and
Mobile Networks, 2018.
USENIX Association
29th USENIX Security Symposium    429
[19] M. Niemietz and J. Schwenk. Ui redressing attacks on android devices.
Black Hat Abu Dhabi, 2012.
[20] L. Wu, B. Brandt, X. Du, and B. Ji. Analysis of clickjacking attacks
and an effective defense scheme for android devices. In CNS, 2016.
[21] Y. Fratantonio, C. Qian, S. P Chung, and W. Lee. Cloak and dagger:
from two permissions to complete control of the ui feedback loop. In
IEEE Security and Privacy, 2017.
[22] A. Possemato, A. Lanzi, S. P. H. Chung, W. Lee, and Y. Fratantonio.
Clickshield: Are you hiding something? towards eradicating clickjack-
ing on android. In CCS, 2018.
[23] J. Jeon, K. K. Micinski, J. A Vaughan, A. Fogel, N. Reddy, J. S Foster,
and T. Millstein. Dr. android and mr. hide: ﬁne-grained permissions in
android applications. In SPSM, 2012.
[24] D. He, M. Naveed, C. A. Gunter, and K. Nahrstedt. Security concerns
in android mhealth apps. In AMIA, 2014.
[25] P. Sapiezynski, A. Stopczynski, R. Gatej, and S. Lehmann. Tracking
human mobility using wiﬁ signals. 2015.
[26] S. Narain, T. D. Vo-Huu, K. Block, and G. Noubir. Inferring user routes
and locations using zero-permission mobile sensors. In IEEE Security
and Privacy, 2016.
[27] Y. Michalevsky, A. Schulman, G. A. Veerapandian, D. Boneh, and
Gabi Nakibly. Powerspy: Location tracking using mobile device power
analysis. In USENIX Security, 2015.
[28] J. Sellwood and J. Crampton. Sleeping android: The danger of dormant
permissions. In SPSM, 2013.
[29] G. S. Tuncay, S. Demetriou, K. Ganju, and Carl A. Gunter. Resolving
the predicament of android custom permissions. In NDSS, 2018.
[30] K. Micinski, R. Votipka, D.and Stevens, N. Koﬁnas, M. L. Mazurek,
and J. S. Foster. User interactions and permission use on android. In
CHI, 2017.
[31] E. Alepis and C. Patsakis. Unravelling security issues of runtime
permissions in android. Hardware and Systems Security, 2019.
[32] G. S. Tuncay. Practical least privilege for cross-origin interactions
on mobile operating systems. PhD thesis, University of Illinois at
Urbana-Champaign, 2019.
[33] False transparency attacks.
https://sites.google.com/view/
false-transparency-attacks/home.
Appendices
A Frequently Asked Questions
Here we discuss some of the concerns that we thought might
be raised by the reader, in a Q&A format.
• Why doesn’t the attacker just launch a normal phishing
attack? Google Play (GP) already has some security mech-
anisms in place to detect phishing attacks. For example, GP
does not allow apps to be published with icons that are similar
to those of other apps. In addition, GP can also identify if
the title of an app is dangerously similar to that of another
app. If an app has some suspicious behavior as in these cases,
it will be suspended by GP indeﬁnitely. With our attack, the
adversary does not have the risk of detection by GP.
In addition, users are generally familiar with the concept
of classic phishing attacks, where the attacker impersonates
another app by mimicking its UI. Hence, it is more likely,
compared to our attacks, that they will be on the lookout for
such attacks. Our attacks do not require mimicking another
app’s UI and are previously unknown to the users (as well as
to the research and developer communities). Therefore, users
will be vulnerable and will get caught off-guard as they are
not expecting such attacks in the ﬁrst place. We have proven
the validity of this statement with our user study.
• Couldn’t the app just pretend to do something useful with the
permission to convince the users to grant it? While it is true
that the most important reason for users to grant permissions
is the permission’s relevance to utility, it is not the sole factor
that plays a role in these decisions. Previous work has shown
that users consider the relevance of the permission to the
app’s utility and the reputation of the app developer as a factor
inﬂuencing them to grant permissions, 68% and 32% of the
time, respectively while the average denial rate is reported to
be 14% [2]. This means that for an attacker who cannot really
make a convincing argument for needing a permission (e.g.,
QR app needing contact list), they will not be able to obtain
the permission 68% of the time with a direct attack. Similarly,
for an attacker whose app has not earned much reputation,
they will get their permission requests denied 32% of the time.
We perform two Chi-squared tests with Yates correction to
compare these two denial rates to the average denial rate. The
p-values for both tests are much less than 1× 10−5, which are
much smaller than the conﬁdence level of 0.05. This indicates
that a permission’s relevance to utility and the requesting
app’s reputation are both factors that signiﬁcantly contributes
to users’ grant decisions.
In general, both our user study and previous studies show
that users do try to make conscious decisions when it comes
to permissions. They feel more comfortable granting permis-
sions to some apps while they do not feel so for others based
on several factors. Our goal is to enable adversaries to take
advantage of the user’s trust in another app, without having
to gain that trust on their own.
• What is the attacker going to do with the permissions?
Our attacks serve as a platform for different adversaries to
obtain the permissions they need to realize their goals. Each
adversary can come up with a different attack strategy that
requires them to obtain a speciﬁc set of permissions, which
they could achieve using our attack scheme.
• Why does Android allow invisible activities? Android, being
the liberal operating system it is, aims to provide app develop-
ers the UI design freedom they need to achieve their purposes.
Transparent UI features often improve user experience. On
the other hand, restrictions to transparency are hard to imple-
ment. Android provides a range of transparency options, and
it is unclear which ones can be utilized for attack scenarios
similar to those we have illustrated in this paper. Indeed, a
modiﬁcation to restrict transparency could complicate the
code in a way that introduces new types of vulnerabilities.
430    29th USENIX Security Symposium
USENIX Association
B Survey Questions
Here, we present the questions that we used in our survey,
results of which we elaborated in detail in Section 6. State-
ments regarding the display logic (e.g., skip to question X
etc.) are not displayed to the participants and are included
only to provide our readers an accurate view of our survey.
We shufﬂe answer options at the time of participation in the
survey. We do not present our attention check and demograph-
ics questions here for brevity. In addition, we removed some
questions that we did not utilize in Section 6 for the sake of
brevity, but the missing questions have the potential to prime
the users to be security conscious, making them more likely
to deny permissions and think of defenses. Curious readers
can ﬁnd our full set of questions in [33].
Q1: Please choose your level of knowledge of Android per-
missions.
• Expert
• Knowledgeable
• Average
• Some familiarity
• No familiarity
Q2: On older Android versions, permissions required by an
app were displayed at the time of installation and the instal-
lation would not proceed if you did not agree to grant all the
listed permissions to the app.
• True
• False
• I don’t know
Q3: For your information, on more recent versions of Android,
apps can prompt you at runtime with a permission request
(also called permission prompt) to get access to some of the
device resources. Such permissions that are requested when
the app is in the foreground are called runtime permissions.
The following screen is an example of a permissions request.
You can give access to the app for the resource in question by
choosing "Allow". Similarly, you can deny access by choosing
"Deny". Please note that how this prompt screen looks might
slightly vary depending on the device and Android version.
Q4: I remember seeing a similar permission screen while
using my device (It could be for a different app and/or per-
mission).
• Yes
• No
• I am not sure
Q5: Let’s do some role-playing now. Suppose for the sake
of this survey that you have installed Viber, a popular
messaging app with millions of downloads that allows you
to communicate with your friends. Viber requires access to
your contacts to allow you to contact your friends. If you
(a) Q3 screen
(b) Q5 screen
(c) Q7 screen
Figure 2: Screens for Q3, Q5, and Q7
don’t grant this permission, the functionality likely will not
work. Suppose you have started Viber to message a friend
and Viber prompted you to get permission to access your
contacts for the ﬁrst time, as shown in the following screen.
Q6: Please decide if you would like to allow Viber to access
your contacts.
• Allow
• Deny
Q7: Continuing with the role-playing... Suppose now that
you received a permission request from an app installed on
your phone while you were not actively using any app. Be-
low screenshot is an example of such a request.
Q8: What would you do about such a permission request?
• Allow
• Deny
• It depends
Q9: An app can request a permission and prompt you again
in the future even if you might have denied this permission
previously.
• True
• False
• I don’t know
Q10: An app can request a permission and prompt you again
in the future even if you might have granted this permission
previously.
• True
• False
• I don’t know
Q11: Suppose you previously denied a permission to an app
you currently have on your device. If you were prompted
again for the same permission by this app in the future, would
you grant it?
• Yes - Skip to
USENIX Association
29th USENIX Security Symposium    431
• No - Skip to Q13
• It depends - Skip to Q12
Q12: Which of the following conditions would inﬂuence you
to grant the permission after denying it previously? (Choose
all that apply)
work
not consider particularly risky
• The requested permission is necessary for the app to
• The request is for a permission I do not care about or do
• The requesting app is highly popular (i.e., installed by
• The requesting app is developed by a well-known com-
• Other (Please specify):
millions of users)
pany
Q13: (Display if the ﬁrst option of Q6 is chosen) Now back
to role-playing again. Suppose you texted a couple of friends
on Viber, then you switched to some other applications or
perhaps stopped using your phone for a while. Eventually,
you switched back to Viber to continue texting your friends
and now you are prompted for the contacts permission as
shown in the following screenshot.
Q14: (Display if the second option of Q6 is chosen) Now
back to role-playing again. After being on your phone for a
while and doing useful things, you switched back to Viber to
text your friends and now you are prompted for the contacts
permission as shown in the following screenshot.
(a) Q13, Q14 screen
(b) Q17 screen
Figure 3: Screens for Q13, Q14, and Q17
Q15: What would you do?
• Allow - Skip to Q17
• Deny - Skip to Q16
Q16: What is the reason for denying the permission?
not ask me again
• I already granted this permission to Viber so it should
• I already denied this permission to Viber so it should not
• I always decline permissions
• Multiple requests for the same permission made me sus-
ask me again
picious of Viber
• Other (Please specify):
Q17: Suppose you are traveling the world and you found
yourself wanting to go to the magical ancient Greek city of
Ephesus. You open Google Maps to navigate to these ruins.
You are prompted with a permission dialog as in the following
picture.
Q18: Which option would you select?
• Allow - Skip to Q19
• Deny - Skip to Q20
Q19:
same
the
Just asking to make
page... Which
app
sure we
did
you
are on the
grant
to Q21
just
location
permission
to?
-
Skip
Q20: Just asking to make sure we are on the same page...
Which app did you just deny the location permission to?
Q21: On Android versions that support runtime permissions,
you are allowed to grant or revoke permissions to apps at any
time by modifying permission settings via the Settings app.
• True
• False
• I don’t know
ing/denying the permission normally.
Q22: What would you think if an app has requested a permis-
sion it had previously requested during the same launch (i.e.,
after you started the app it requested the same permission
twice within a small time frame)? Please select all that apply.
• I would not think anything of it and proceed with grant-
• I would be suspicious of the requesting app.
• I would be suspicious of the other apps I have installed
• I would be suspicious of the Android operating system
• Other (Please specify):
that use this permission.
itself.
Q23: (Display if the ﬁrst option of Q22 is not chosen) What
would you consider doing in this case (i.e., when an app
requests the same permission twice during the same launch)?
Please check all that apply.
the Settings app
• Uninstalling the app that requested the permission
• Investigating other apps that request this permission via
• Reformatting the operating system to go back to factory
• Other (Please specify):
settings
Q24: An app has to be in the foreground (i.e., showing on the
screen) when it prompts you for a permission.
• True
• False
• I don’t know
432    29th USENIX Security Symposium
USENIX Association