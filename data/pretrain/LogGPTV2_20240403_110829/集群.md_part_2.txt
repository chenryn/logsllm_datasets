所有的nginx主机，都用vip192.168.1.202挂载，在这用ansible批量挂载共享目录：
ansible web -m shell -a \'umount /usr/local/nginx/html/\'
ansible web -m shell -a \'mount -t nfs 192.168.1.202:/var/webroot
/usr/local/nginx/html/\'
![](media/image2.png){width="5.760416666666667in"
height="4.320138888888889in"}
# Mysql数据库主从
主：192.168.1.21 从：192.168.1.22\--192.168.1.26
## 准备软件包
\[root@jumpserver 数据库软件包\]# tar -xf mysql-5.7.17.tar -C
/var/ftp/localrepo/
\[root@jumpserver 数据库软件包\]# cd /var/ftp/localrepo/
\[root@jumpserver localrepo\]# ls
mysql-community-client-5.7.17-1.el7.x86_64.rpm
mysql-community-libs-compat-5.7.17-1.el7.x86_64.rpm
mysql-community-common-5.7.17-1.el7.x86_64.rpm
mysql-community-minimal-debuginfo-5.7.17-1.el7.x86_64.rpm
mysql-community-devel-5.7.17-1.el7.x86_64.rpm
mysql-community-server-5.7.17-1.el7.x86_64.rpm
mysql-community-embedded-5.7.17-1.el7.x86_64.rpm
mysql-community-test-5.7.17-1.el7.x86_64.rpm
mysql-community-embedded-compat-5.7.17-1.el7.x86_64.rpm
nginx-1.15.10-1.el7.centos.x86_64.rpm
mysql-community-embedded-devel-5.7.17-1.el7.x86_64.rpm repodata
mysql-community-libs-5.7.17-1.el7.x86_64.rpm
\[root@jumpserver localrepo\]# createrepo \--update .
## ansible 批量传送/etc/my.cnf文件
\[root@jumpserver localrepo\]# vim /etc/ansible/hosts
#hosts文件添加了所有的mysql主机
\[mysql\]
192.168.1.21
192.168.1.22
192.168.1.23
192.168.1.24
192.168.1.25
192.168.1.26
\[root@jumpserver localrepo\]# ansible mysql -m ping
**所有机器安装mysql**
\[root@jumpserver localrepo\]# ansible mysql -m yum -a
\'name=mysql-server state=installed\'
用ansible批量传配置文件，以及修改server-id用ip地址
在 mysql-master 上修改 my.cnf：
\[mysqld\]
bind-address=0.0.0.0 #监听地址，有些版本差异，添上不会出问题
server-id= {{id.stdout}} #用ansible批量传送，传参方式获取
binlog-format=mixed #binglog日志格式
log_bin=/var/log/mysql/mysql-bin
relay-log=/var/log/mysql/relay-log #relay-log中继日志
relay-log-index=/var/log/mysql/relay-log.info #relay-log中继日志
relay-log-info-file=/var/log/mysql/relay-log.info
relay_log_purge=0 #不删除日志，MHA用得上
#以下是主从半同步复制的配置（semi sync master/slave）
plugin-load=rpl_semi_sync_master=semisync_master.so
#加载主半同步复制模块
plugin-load=rpl_semi_sync_slave=semisync_slave.so #加载从半同步复制模块
rpl_semi_sync_slave_enabled=1 #启用从半同步复制模式
rpl_semi_sync_master_enabled=1 #启用主半同步复制模式
rpl_semi_sync_master_timeout=3000
\[root@jumpserver nsd1811\]# ifconfig eth0 \| grep -Po \"(?\
mysql\> show databases;
### 配置主从
启动 mysql
设置主从，binlog文件（master_log_file）及其执行位置（master_log_pos）在
/var/lib/mysql/xtrabackup_info 可查找到，也可在主库上执行：show master
status\\G;语句
change master to master_host=\'192.168.1.18\',\\
master_user=\'repl\',master_password=\'lper\',\\
master_log_file=\"mysql-bin.000001\", master_log_pos=615;
start slave;
### 检查验证
show slave status\\G
## Mysql数据库主从半同步复制模式
### #\-\-\-\-\-\--semi sync master\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--#
show plugins; #查看 mysql 插件
install plugin rpl_semi_sync_master soname \'semisync_master.so\';
#安装半同步插件
set global rpl_semi_sync_master_enabled=1; #开启半同步
set global rpl_semi_sync_master_timeout=1000; #等待超时时间
#等待超时时间：设置此参数值（ms）,为了防止半同步复制在没有收到确认的情况下发生堵塞，如果Master在超时之前没有收到任何确认，将恢复到正常的异步复制，并继续执行没有半同步的复制操作。
查看状态
show global variables like \'%rpl_semi%\';
show global status like \'%rpl_semi%\';
show variables like \'have_dynamic_loading\'; #查看是否允许动态加载模块
select plugin_name,plugin_status from information_schema.plugins where
plugin_name like \'%semi%\'; #查看模块是否被加载
show variables like \"rpl_semi_sync\_%\_enabled\"; #查看是否启用
### #\-\-\-\-\-\--semi sync slave\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--#
show plugins; #查看 mysql 插件
install plugin rpl_semi_sync_slave soname \'semisync_slave.so\';
#手动安装半同步插件
set global rpl_semi_sync_slave_enabled=1; #手动开启半同步
show global variables like \'%rpl_semi%\'; #查看状态
重启 IO 线程
stop slave io_thread;
start slave io_thread;
### #\-\-\-\-\-\--主从半同步my.cnf 永久配置内容\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--#
plugin-load=\"rpl_semi_sync_master=semisync_master.so\" #加载主配置模块
plugin-load=\"rpl_semi_sync_slave=semisync_slave.so\" #加载从配置模块
rpl_semi_sync_slave_enabled = 1 #启用从配置半同步复制模式
rpl_semi_sync_master_enabled = 1 #启用主配置半同步复制模式
rpl_semi_sync_master_timeout = 3000
#等待超时时间
设置此参数值（ms）,为了防止半同步复制在没有收到确认的情况下发生堵塞，如果Master在超时之前没有收到任何确认，将恢复到正常的异步复制，并继续执行没有半同步的复制操作。
# Mysql-MHA集群配置
MHAmanager服务器：192.168.1.20 其他节点：192.168.1.21-26 vip
192.168.1.203
## MHA node节点配置：
192.16.1.21\--192.168.1.26
安装依赖包：yum install gcc pcre-devel pkgconfig autoconf automake
perl-ExtUtils-MakeMaker perl-CPAN perl-DBI perl-DBD-MySQL
安装mha node节点包软件：mha4mysql-node-0.56-0.el6.noarch
安装方法：将所有包放入跳板机，做成私有源（createrepo --update
.）后ansible批量安装
## Mysql主库绑定VIP
把vip 192.168.1.203配置当前主数据库服务器192.168.4.21上
\[root@sql51 \~\]# ifconfig eth0:1 192.168.1.203
\[root@sql51 \~\]# ifconfig eth0:1
eth0:1: flags=4163\ mtu 1500
inet 192.168.1.203 netmask 255.255.255.0 broadcast 192.168.1.255
ether 52:54:00:57:34:54 txqueuelen 1000 (Ethernet)
所有服务器之间ssh免密登陆
所有的数据库my.cnf都设置了不自动删除本机的中继日志文件
\[mysqld\]
server_id=55
relay_log_purge=off #不自动删除本机的中继日志文件
mysql\> set global relay_log_purge=off;
## 登陆主库的mysql,给root授权
1授权监控用户,在21上做,22-26自动同步
mysql\> grant all on \*.\* to root@\"%\" identified by \"123456\";
Query OK, 0 rows affected, 1 warning (0.03 sec)
## MHA manager管理主机配置
管理主机地址：192.168.1.20
### 必须先装数据节点安装包:
mha4mysql-node-0.56-0.el6.noarch.rpm
\[root@sql56 mha-soft-student\]# rpm -ivh
mha4mysql-node-0.56-0.el6.noarch.rpm
### 再安装管理包:
mha4mysql-manager-0.56.tar.gz
\[root@sql56 mha-soft-student\]# tar -xvf mha4mysql-manager-0.56.tar.gz
\[root@sql56 mha-soft-student\]# ls
mha4mysql-manager-0.56
\[root@sql56 mha-soft-student\]# cd mha4mysql-manager-0.56/
\[root@sql56 mha4mysql-manager-0.56\]# ls
AUTHORS COPYING inc Makefile.PL META.yml rpm t
bin debian lib MANIFEST README samples tests
\[root@sql20 mha4mysql-manager-0.56\]# which perl #查看perl命令
/usr/bin/perl
\[root@sql20 mha4mysql-manager-0.56\]# perl Makefile.PL #先检测
\*\*\* Module::AutoInstall version 1.03
\*\*\* Checking for Perl dependencies\...
\[Core Features\]
\- DBI \...loaded. (1.627) #括号内不为0,表示依赖包被安装
\- DBD::mysql \...loaded. (4.023) #括号内不为0,表示依赖包被安装
\- Time::HiRes \...loaded. (1.9725) #括号内不为0,表示依赖包被安装
\- Config::Tiny \...loaded. (2.14) #括号内不为0,表示依赖包被安装
\- Log::Dispatch \...loaded. (2.41) #括号内不为0,表示依赖包被安装
\- Parallel::ForkManager \...loaded. (1.18)
#括号内不为0,表示依赖包被安装
\- MHA::NodeConst \...loaded. (0.56) #括号内不为0,表示依赖包被安装
\*\*\* Module::AutoInstall configuration finished.
Checking if your kit is complete\...
Looks good
Writing Makefile for mha4mysql::manager
Writing MYMETA.yml and MYMETA.json
\[root@sql20 mha4mysql-manager-0.56\]# make
\[root@sql20 mha4mysql-manager-0.56\]# make install
\[root@sql20 mha4mysql-manager-0.56\]# masterha\_ #连续tab,显示全部命令