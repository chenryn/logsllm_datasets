腾讯 WAF 挑战赛回忆录 
by do9gy 
Part 0 
应各位好友诚挚邀请，分享一下 WAF Bypass 相关的技巧。其实本来应该在比赛结束就
跟大家分享，无奈于 TSRC 那边对各位师傅提交的 Bypass 尚未统一修复，一直推迟到今日。
本文披露的相关技术信息已经得到 TSRC 有关方面的许可，且隐藏了相关 POC 的内容，只
分享技术原理及绕过思路，希望能够起到抛砖引玉的作用。 
    首先谈一下 WAF。Web 应用防火墙，主要用途是对 HTTP（s）协议进行校验，拦截恶
意的攻击请求，放行正常的业务请求。从架构来看，主要分为：网络层、应用层、云 WAF 三
类。从绕过来看，分为通用型绕过和单一规则绕过。通用型绕过即完全绕过 WAF 防护，一
旦产生绕过后，可以利用该 Payload 实现任意一种攻击；而单一规则绕过，则仅能够绕过特
定规则，例如：SQL 注入规则中使用 select-1.1from……来绕过 select\b[\s\S]*\bfrom 这一
正则规则，绕过以后仅能够实现 SQL 注入攻击。我所致力研究的属于前者。 
    从网络层、应用层、云 WAF 三类场景来看他们的绕过思路也有所区别，例如，对于传
统的网络层 WAF，采用 chunked 编码即可绕过，目前多数 WAF 厂商已经修复，但是我们仍
然可以在网络层发包这一方向进行尝试和探索。对于应用层 WAF，WAF 的处理引擎是经过
前端 Nginx 或 Apache（大多数场景都是 Nginx 及 Tengine）完成 HTTP 协议初步解析以后，
再转发给 WAF 处理引擎的，因而一些网络层组包的技术是无法绕过的。那么就需要我们去
研究：对于一个 HTTP 请求，Nginx 解析了什么内容？交给后面的 PHP、ASP 又解析了什么
内容？ 
    本文介绍的思路主要围绕： multipart/form-data。主要针对于 POST 参数的，对于漏洞
点在 GET 参数位置则用处不大。 
1. multipart/form-data 。我们知道，HTTP 协议 POST 请求，除了常规的 application/x-www-
form-urlencoded 以外，还有 multipart/form-data 这种形式，主要是为了解决上传文件场景
下文件内容较大且内置字符不可控的问题。multipart/form-data 格式也是可以传递 POST 参
数的。对于 Nginx+PHP 的架构，Nginx 实际上是不负责解析 multipart/form-data 的 body 部
分的，而是交由 PHP 来解析，因此 WAF 所获取的内容就很有可能与后端的 PHP 发生不一
致。 
以 PHP 为例，我们写一个简单的测试脚本： 
``` 
``` 
此时，我们将其转为 multipart/form-data 格式： 
可以看到，实际上和前一种 urlencoded 是达到了同一种效果，参数并没有进入$_FILES
数组，而是进入了$_POST 数组。那么，何时是上传文件？何时是 POST 参数呢？这个关键
点在于有没有一个完整的 filename=。这 9 个字符是经过反复测试的，缺一个字符不可，替
换一个字符也不可，在其中添加一个字符更不可。 
加上了 filename=以后的效果： 
Bypass WAF 的核心思想在于，一些 WAF 产品处于降低误报考虑，对用户上传文件的内
容不做匹配，直接放行。事实上，这些内容在绝大多数场景也无法引起攻击。但关键问题在
于，WAF 能否准确有效识别出哪些内容是传给$_POST 数组的，哪些传给$_FILES 数组？如
果不能，那我们是否就可以想办法让 WAF 以为我们是在上传文件，而实际上却是在 POST
一个参数，这个参数可以是命令注入、SQL 注入、SSRF 等任意的一种攻击，这样就实现了
通用 WAF Bypass。 
Part 1： 
    下面我们来看一下几种入门级的绕过思路： 
1. 0x00 截断 filename 
注意在 filename 之前加入了 0x00，而有些 WAF 在检测前会删除 HTTP 协议中的 0x00，
这样就导致了 WAF 认为是含有 filename 的普通上传，而后端 PHP 则认为是 POST 参数。 
2. 双写上传描述行 
双写后，一些 WAF 会取第二行，而实际 PHP 会获取第一行。 
 3. 双写整个 part 开头部分 
此时，该参数会引入一些垃圾数据，在命令注入及 SQL 注入的攻击场景，需要尽可能
将前面的内容闭合。 
4. 构造假的 part 部分 1 
该方法与前一种类似。 
5. 构造假的 part 部分 2 
注意这里比前一种少了一个换行，数据纯净了许多。 
6. 两个 boundary 
对于 php 来说，真正的 boundary 是 a 。 
7. 两个 Content-Type 
boundary 仍然是 a 
8. 空 boundary 
注意此时 boundary 是空的，并不是分号哦。 
9. 空格 boundary 
注意，此时 boundary 是可以为空格的。 
10. boundary 中的逗号 
boundary 遇到逗号就结束了。 
同理： 
Part2 
如果你能够融会贯通这十种思路，说明已经入门了，我们开始脑洞升级，来看一下进阶
版： 
1. 0x00 截断进阶 
前面，我们介绍了，如果是这样双写，其实是以第一行为主的，这样就是上传文件。但
如果我们在适当的地方加入 0x00、空格和 \t ， 就会破坏第一行，让 PHP 反以第二行为主： 
这三个位置是首选的。将其替换为 0x00 和 0x20 与之同理， 大家可自行测试。 
此外还有：  
这里的\0，也是可以的。 
最容易被忽视的是参数名中的 0x00。 
由此测试还有一个十分鸡肋的方式，用处不大，但有意思。只有当网站获取全部 POST 数组
后以参数前缀来取值的场景才可利用，因为参数名后缀部分不可控。 
2. boundary 进阶 
boundary 的名称是可以前后加入任意内容的，WAF 如果严格按 boundary 去取，又要
上当了。 
第一个 Content-Type 和冒号部分填入了空格。 
如何取 boundary 是一个问题： 
3. 单双引号混合进阶 
我们需要考虑的问题是，Content-Disposition 中的字段使用单引号还是双引号？ 
4. urlencoded 伪装成为 multipart 
这个 poc 很特殊。实际上是 urlencoded，但是伪装成了 multipart，通过&来截取前后装
饰部分，保留 id 参数的完整性。理论上 multipart/form-data 下的内容不进行 urldecoded，
一些 WAF 也正是这样设计的，这样做本没有问题，但是如果是 urlencoded 格式的内容，不
进行 url 解码就会引入%0a 这样字符，而这样的字符不解码是可以直接绕过防护规则的，从
而导致了绕过。 
Part2 部分相当于是 Part1 的一个扩展，篇幅有限，大家只需要在各个位置添加特殊字
符 fuzz 即可。对于 Part3 却需要看一点 PHP 源码了。 
Part3 
1. skip_upload 进阶 1 
在 PHP 中，实际上是有一个 skip_upload 来控制上传行是否为上传文件的。来看这样
一个例子： 
前面内容中我们介绍了，如果在第一行的 Content-Disposition 位置添加\0，是有可能引
起第一行失效，从而从上传文件变为 POST 参数的。除此以外，我们来看一下 php 源码 php-
5.3.3/main/rfc1867.c 
,其中 line: 991 有这样一段内容： 
if (!skip_upload) {  
    char *tmp = param;  
    long c = 0;  
    while (*tmp) {  
        if (*tmp == '[') {  
            c++;  
        } else if (*tmp == ']') {  
            c--;  
            if (tmp[1] && tmp[1] != '[') {  
                skip_upload = 1;  
                break;  
            }  
        }  
        if (c  
  string(8) "alert(1)" 
} 
FILES:array(20) { 
  ["a"]=> 
  array(5) { 
    ["name"]=> 
    string(5) "1.png" 
    ["type"]=> 
    string(9) "image/png" 