以下是优化后的文本，以提高清晰度、连贯性和专业性：

---

**参考文献**

[20] C. Holler, K. Herzig, 和 A. Zeller. 代码片段模糊测试. 在第21届USENIX安全研讨会（Security）论文集中, 美国华盛顿州贝尔维尤, 2012年8月.

[21] Honggfuzz. Honggfuzz发现的漏洞, 2018. https://github.com/google/honggfuzz#trophies.

[22] G. Klees, A. Ruef, B. Cooper, S. Wei, 和 M. Hicks. 模糊测试评估. 在第25届ACM计算机与通信安全会议（CCS）论文集中, 加拿大多伦多, 2018年10月.

[23] V. Le, M. Afshari, 和 Z. Su. 通过输入等价进行编译器验证. 在2013年ACM编程语言设计与实现会议（PLDI）论文集中, 英国爱丁堡, 2014年6月.

[24] V. Le, C. Sun, 和 Z. Su. 通过引导随机程序变异找到深层次的编译器错误. 在第26届ACM面向对象编程、系统、语言和应用年度会议（OOPSLA）论文集中, 美国宾夕法尼亚州匹兹堡, 2015年10月.

[25] J. Lee. Issue 1438: Microsoft Edge: Chakra: JIT: ImplicitCallFlags检查绕过. https://bugs.chromium.org/p/project-zero/issues/detail?id=1438, 2018.

[26] J. Lee. Issue 1565: Microsoft Edge: Chakra: JIT: 使用Intl的ImplicitCallFlags检查绕过. https://bugs.chromium.org/p/project-zero/issues/detail?id=1565, 2018.

[27] C. Lemieux 和 K. Sen. Fairfuzz: 提高灰盒模糊测试覆盖率的目标突变策略. 在第33届ACM/IEEE自动化软件工程国际会议论文集中, 第475-485页. ACM, 2018.

[28] S. McKenzie. Babel, JavaScript编译器, 2019. https://babeljs.io/.

[29] Microsoft. ChakraCore, 为Microsoft Edge提供支持的Chakra JavaScript引擎的核心部分, 2019. https://github.com/microsoft/ChakraCore.

[30] R. Padhye, C. Lemieux, K. Sen, M. Papadakis, 和 Y. Le Traon. 使用Zest进行语义模糊测试. 在国际软件测试与分析研讨会（ISSTA）论文集中, 中国北京, 2019年7月.

[31] J. Patra 和 M. Pradel. 学习模糊测试: 应用独立的概率生成模型输入数据模糊测试. 德国达姆施塔特工业大学, 计算机科学系, 技术报告TUD-CS-2016-14664, 2016.

[32] M. Rajpal, W. Blum, 和 R. Singh. 不是所有的字节都是平等的: 用于模糊测试的神经字节筛. arXiv预印本arXiv:1711.04596, 2017.

[33] M. Rash. AFL Fuzzer发现的一系列漏洞, 2017. https://github.com/mrash/afl-cve.

[34] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, G. Grieco, 和 D. Brumley. 优化模糊测试中的种子选择. 在第23届USENIX安全研讨会（Security）论文集中, 美国加利福尼亚州圣迭戈, 2014年8月.

[35] S. Sanfilippo. Redis, 开源内存数据库、缓存和消息代理, 2019. https://redis.io/.

[36] K. Serebryany. libfuzzer: 一个用于覆盖率引导模糊测试的库. LLVM项目, 2015.

[37] K. Serebryany. 清理、模糊测试并强化您的C++代码. 在第一届USENIX ENIGMA会议论文集中, 美国旧金山, 2016年1月.

[38] R. Swiecki. Honggfuzz. 可在线获取: http://code.google.com/p/honggfuzz, 2016.

[39] W. Snyder 和 M. Shaver. 构建和破解浏览器. 在Black Hat USA简报会（Black Hat USA）上, 美国内华达州拉斯维加斯, 2007年8月.

[40] Syzkaller. Syzkaller发现的Linux内核漏洞, 2018. https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs.md.

[41] B. Turner. 随机C程序生成器. 于2007年检索.

[42] S. Veggalam, S. Rawat, I. Haller, 和 H. Bos. Ifuzzer: 使用遗传编程的进化解释器模糊测试. 在第21届欧洲计算机安全研究研讨会（ESORICS）论文集中, 希腊克里特岛, 2016年9月.

[43] J. Wang, B. Chen, L. Wei, 和 Y. Liu. Skyfire: 数据驱动的模糊测试种子生成. 在第38届IEEE安全与隐私研讨会（Oakland）论文集中, 美国加利福尼亚州圣何塞, 2017年5月.

[44] J. Wang, B. Chen, L. Wei, 和 Y. Liu. Superion: 语法感知的灰盒模糊测试. 在第41届国际软件工程会议（ICSE）论文集中, 加拿大蒙特利尔, 2019年5月.

[45] G. Wen, Y. Zhang, Q. Liu, 和 D. Yang. ActionScript虚拟机的模糊测试. 在第8届ACM信息安全、计算机和通信安全研讨会（ASIACCS）论文集中, 中国杭州, 2013年5月.

[46] D. Yang, Y. Zhang, 和 Q. Liu. Blendfuzz: 用于具有语法输入的程序模糊测试的基于模型的框架. 在2012年IEEE第11届计算、通信中的信任、安全和隐私国际会议上, 第1070-1076页. IEEE, 2012.

[47] X. Yang, Y. Chen, E. Eide, 和 J. Regehr. 寻找并理解C编译器中的漏洞. 在2011年ACM编程语言设计与实现会议（PLDI）论文集中, 美国加利福尼亚州圣何塞, 2011年6月.

[48] H. Yoo 和 T. Shon. 基于语法的自适应模糊测试: 对SCADA Modbus协议的评估. 在2016年IEEE智能电网通信国际会议上, 第557-563页. IEEE, 2016.

[49] M. Zalewski. American Fuzzy Lop, 2019. http://lcamtuf.coredump.cx/afl/.

---

**附录A: DIE在JavaScript引擎中发现的漏洞**

表VIII列出了DIE在三个已知的JavaScript引擎（即，Microsoft Edge中的ChakraCore、Apple Webkit中的JavaScriptCore和Google Chrome中的V8）中发现的漏洞及其描述。

| 编号 | 类型 | 描述 | JS引擎 | 版本 | 方面 | 状态 | 安全性 |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 1 | 正则表达式解析错误 | 非ASCII正则表达式 | ChakraCore | 1.11.5 | 非ASCII正则表达式 | 已修复 | (cid:2) |
| 2 | 正则表达式解析错误 | 非ASCII正则表达式 | ChakraCore | 1.11.5 | 非ASCII正则表达式 | 已修复 | (cid:2) |
| 3 | 释放后使用 | 越界作用域 | ChakraCore | 1.11.5 | 嵌套函数中的巨大对象字面量 | 已修复 | (cid:2) |
| 4 | JIT编译期间不正确的剖析 | 异常处理中的无限递归 | ChakraCore | 1.11.7 | 排序大量数组 | 已修复 | (cid:2) |
| 5 | JavaScriptArray中的内存损坏 | 大数组排序 | ChakraCore | 1.11.7 | 自定义比较 | 已修复 | (cid:2) |
| ... | ... | ... | ... | ... | ... | ... | ... |

* Canary版本
† 该漏洞由我们报告，但由于修复不完全，DIE仍然可以触发。
(cid:2) 该漏洞导致内存损坏并崩溃。
(cid:2) 该漏洞被确认可利用于远程代码执行或信息泄露。

**表VIII**: DIE在ChakraCore、JavaScriptCore和V8中发现的新漏洞。每个漏洞影响的最新版本已列出。在“状态”列中，“已修复”表示开发人员在我们报告之前已经注意到并修复了该漏洞。

---