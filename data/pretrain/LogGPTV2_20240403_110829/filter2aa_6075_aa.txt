# Hashcat
## Hashcat软件描述
hashcat是世界上最快、最先进的密码恢复工具，支持五种独特的模式攻击超过200种哈希算法。hashcat目前支持Linux、Windows和OSX上的cpu、gpu和其他硬件加速器，并具有支持分布式密码破解的功能。
资料来源：https://github.com/hashcat/hashcat/
[hashcat主页](https://hashcat.net/hashcat/) | [Kali hashcat软件源](http://git.kali.org/gitweb/?p=packages/hashcat.git)
- 作者：atom
- 许可：Expat
### hashcat包含的工具
hashcat - 世界上最快、最先进的密码恢复工具
```
root@kali:~# hashcat --help
hashcat - advanced password recovery
Usage: hashcat [options]... hash|hashfile|hccapxfile [dictionary|mask|directory]...
- [ Options ] -
 Options Short / Long          | Type | Description                                          | Example
===============================+======+======================================================+=======================
 -m, --hash-type               | Num  | 哈希类型, 见下文                                      | -m 1000
 -a, --attack-mode             | Num  | 攻击模式, 见下文                                      | -a 3
 -V, --version                 |      | 打印版本信息                                         |
 -h, --help                    |      | 打印帮助                                             |
     --quiet                   |      | 静默输出                                              |
     --hex-charset             |      | 假定输入的字符集为十六进制表示                           |
     --hex-salt                |      | 假定盐值为十六进制表示                                  |
     --hex-wordlist            |      | 假定字典为十六进制表示                                  |
     --force                   |      | 忽略警告                                              |
     --status                  |      | 自动更新状态显示                                      |
     --status-timer            | Num  | 设置状态显示更新的间隔秒数                               | --status-timer=1
     --machine-readable        |      | 用机器易识别的格式显示状态信息                           |
     --keep-guessing           |      | 破解后仍继续猜测                                       |
     --loopback                |      | 在induct目录增加新的明文                                |
     --weak-hash-threshold     | Num  | 指定停止检查弱哈希的门限值                              | --weak=0
     --markov-hcstat           | File | 指定要使用的hcstat文件                                 | --markov-hc=my.hcstat
     --markov-disable          |      | 禁用markov-chains, 模拟典型的暴力破解                   |
     --markov-classic          |      | 启用典型的markov-chains, 不使用每位置模式                |
 -t, --markov-threshold        | Num  | 指定停止接受新的markov-chains的门限值                   | -t 50
     --runtime                 | Num  | 指定运行多少秒后退出会话                                | --runtime=10
     --session                 | Str  | 定义会话名                                            | --session=mysession
     --restore                 |      | 恢复会话                                              |
     --restore-disable         |      | 不写恢复文件                                           |
     --restore-file-path       | File | 指定恢复文件路径                                       | --restore-file-path=my.restore
 -o, --outfile                 | File | 指定输出文件                                           | -o outfile.txt
     --outfile-format          | Num  | 指定输出文件格式                                       | --outfile-format=7
     --outfile-autohex-disable |      | 输出中禁用$HEX[]格式                                   |
     --outfile-check-timer     | Num  | 设置检查输出文件的时间间隔                               | --outfile-check=30
 -p, --separator               | Char | 设置hashlists和输出文件的分隔符                         | -p :
     --stdout                  |      | 不破解哈希, 仅打印候选项                                |
     --show                    |      | 比较hashlist和potfile(已破解的哈希文件); 显示已破解的哈希 |
     --left                    |      | 比较hashlist和potfile; 显示未破解的哈希                 |
     --username                |      | 启用忽略hashfile中的用户名                             |
     --remove                  |      | 启用删除已破解的哈希                                    |
     --remove-timer            | Num  | 设置更新输入哈希文件的时间间隔                           | --remove-timer=30
     --potfile-disable         |      | 不写potfile                                           |
     --potfile-path            | Dir  | 指定potfile的路径                                     | --potfile-path=my.pot
     --encoding-from           | Code | 指定内部字典的编码                                      | --encoding-from=iso-8859-15
     --encoding-to             | Code | 指定内部字典的编码                                     | --encoding-to=utf-32le
     --debug-mode              | Num  | 指定调试模式(通过使用规则)                              | --debug-mode=4
     --debug-file              | File | 指定调试规则输出文件                                    | --debug-file=good.log
     --induction-dir           | Dir  | 指定用来本地查找的induction目录                        | --induction=inducts
     --outfile-check-dir       | Dir  | 指定用来检查明文输出文件的目录                           | --outfile-check-dir=x
     --logfile-disable         |      | 禁用日志文件                                           |
     --hccapx-message-pair     | Num  | 仅从hccapx加载匹配的消息对                              | --hccapx-message-pair=2
     --nonce-error-corrections | Num  | The BF size range to replace AP's nonce last bytes   | --nonce-error-corrections=16
     --truecrypt-keyfiles      | File | 指定Keyfiles, 用逗号分隔                               | --truecrypt-key=x.png
     --veracrypt-keyfiles      | File | 指定Keyfiles, 用逗号分隔                               | --veracrypt-key=x.txt
     --veracrypt-pim           | Num  | VeraCrypt personal iterations multiplier             | --veracrypt-pim=1000
 -b, --benchmark               |      | 运行基准测试                                          |
     --speed-only              |      | 返回预计的破解速度, 然后退出                            |
     --progress-only           |      | 返回预计的处理步骤内存占用和时间                         |
 -c, --segment-size            | Num  | 设置字典文件缓存大小MB                                  | -c 32
     --bitmap-min              | Num  | 设置bitmaps的最小位数                                  | --bitmap-min=24
     --bitmap-max              | Num  | 设置bitmaps的最大位数                                  | --bitmap-max=24
     --cpu-affinity            | Str  | 指定CPU, 用逗号分隔                                    | --cpu-affinity=1,2,3
 -I, --opencl-info             |      | 显示检测到的OpenCL平台/设备信息                         | -I
     --opencl-platforms        | Str  | 指定OpenCL平台, 用逗号分隔                              | --opencl-platforms=2
 -d, --opencl-devices          | Str  | 指定OpenCL设备, 用逗号分隔                              | -d 1
 -D, --opencl-device-types     | Str  | 指定OpenCL设备类型, 用逗号分隔                          | -D 1
     --opencl-vector-width     | Num  | 手动覆盖OpenCL向量宽度                                 | --opencl-vector=4
 -w, --workload-profile        | Num  | 指定工作负载配置文件, 见下面                             | -w 3
 -n, --kernel-accel            | Num  | 手动调优工作负载, 设置外部循环大小                        | -n 64
 -u, --kernel-loops            | Num  | 手动调优工作负载, 设置内部循环小小                        | -u 256
     --nvidia-spin-damp        | Num  | Workaround NVIDIAs CPU burning loop bug, in percent  | --nvidia-spin-damp=50
     --gpu-temp-disable        |      | 禁用温度和风扇速度监测报警                               |
     --gpu-temp-abort          | Num  | 当GPU温度达到指定摄氏度时退出                            | --gpu-temp-abort=100
     --gpu-temp-retain         | Num  | 尝试保持GPU温度在指定的摄氏度                            | --gpu-temp-retain=95
     --powertune-enable        |      | 启用电力调优. 完成后恢复设置                             |
     --scrypt-tmto             | Num  | Manually override TMTO value for scrypt to X         | --scrypt-tmto=3
 -s, --skip                    | Num  | 略过开始处的若干单词                                    | -s 1000000
 -l, --limit                   | Num  | 从略过处开始限制指定的单词数                             | -l 1000000
     --keyspace                |      | Show keyspace base:mod values and quit               |
 -j, --rule-left               | Rule | 对字典文件的每个单词从左侧应用单条规则                    | -j 'c'
 -k, --rule-right              | Rule | 对字典文件的每个单词从右侧应用单条规则                    | -k '^-'
 -r, --rules-file              | File | 对字典文件的每个单词应用多条规则                         | -r rules/best64.rule
 -g, --generate-rules          | Num  | 生成随机规则                                          | -g 10000
     --generate-rules-func-min | Num  | Force min X functions per rule                       |
     --generate-rules-func-max | Num  | Force max X functions per rule                       |
     --generate-rules-seed     | Num  | 设置随机数种子                                         |
 -1, --custom-charset1         | CS   | 用户自定义字符集 ?1                                  | -1 ?l?d?u
 -2, --custom-charset2         | CS   | 用户自定义字符集 ?2                                   | -2 ?l?d?s
 -3, --custom-charset3         | CS   | 用户自定义字符集 ?3                                    |
 -4, --custom-charset4         | CS   | 用户自定义字符集 ?4                                   |
 -i, --increment               |      | 启用增量掩码模式                                      |
     --increment-min           | Num  | 从指定处开始增量掩码                                    | --increment-min=4
     --increment-max           | Num  | 在指定处停止增量掩码                                    | --increment-max=8
- [ Hash modes ] -
      # | Name                                             | Category
  ======+==================================================+======================================
    900 | MD4                                              | Raw Hash
      0 | MD5                                              | Raw Hash
   5100 | Half MD5                                         | Raw Hash
    100 | SHA1                                             | Raw Hash
   1300 | SHA-224                                          | Raw Hash
   1400 | SHA-256                                          | Raw Hash
  10800 | SHA-384                                          | Raw Hash
   1700 | SHA-512                                          | Raw Hash
   5000 | SHA-3 (Keccak)                                   | Raw Hash
    600 | BLAKE2b-512                                      | Raw Hash
  10100 | SipHash                                          | Raw Hash
   6000 | RIPEMD-160                                       | Raw Hash
   6100 | Whirlpool                                        | Raw Hash
   6900 | GOST R 34.11-94                                  | Raw Hash
  11700 | GOST R 34.11-2012 (Streebog) 256-bit             | Raw Hash
  11800 | GOST R 34.11-2012 (Streebog) 512-bit             | Raw Hash
     10 | md5($pass.$salt)                                 | Raw Hash, Salted and/or Iterated
     20 | md5($salt.$pass)                                 | Raw Hash, Salted and/or Iterated
     30 | md5(utf16le($pass).$salt)                        | Raw Hash, Salted and/or Iterated
     40 | md5($salt.utf16le($pass))                        | Raw Hash, Salted and/or Iterated
   3800 | md5($salt.$pass.$salt)                           | Raw Hash, Salted and/or Iterated
   3710 | md5($salt.md5($pass))                            | Raw Hash, Salted and/or Iterated
   4010 | md5($salt.md5($salt.$pass))                      | Raw Hash, Salted and/or Iterated
   4110 | md5($salt.md5($pass.$salt))                      | Raw Hash, Salted and/or Iterated
   2600 | md5(md5($pass))                                  | Raw Hash, Salted and/or Iterated
   3910 | md5(md5($pass).md5($salt))                       | Raw Hash, Salted and/or Iterated
   4300 | md5(strtoupper(md5($pass)))                      | Raw Hash, Salted and/or Iterated
   4400 | md5(sha1($pass))                                 | Raw Hash, Salted and/or Iterated
    110 | sha1($pass.$salt)                                | Raw Hash, Salted and/or Iterated
    120 | sha1($salt.$pass)                                | Raw Hash, Salted and/or Iterated
    130 | sha1(utf16le($pass).$salt)                       | Raw Hash, Salted and/or Iterated
    140 | sha1($salt.utf16le($pass))                       | Raw Hash, Salted and/or Iterated
   4500 | sha1(sha1($pass))                                | Raw Hash, Salted and/or Iterated
   4520 | sha1($salt.sha1($pass))                          | Raw Hash, Salted and/or Iterated
   4700 | sha1(md5($pass))                                 | Raw Hash, Salted and/or Iterated
   4900 | sha1($salt.$pass.$salt)                          | Raw Hash, Salted and/or Iterated
  14400 | sha1(CX)                                         | Raw Hash, Salted and/or Iterated
   1410 | sha256($pass.$salt)                              | Raw Hash, Salted and/or Iterated
   1420 | sha256($salt.$pass)                              | Raw Hash, Salted and/or Iterated
   1430 | sha256(utf16le($pass).$salt)                     | Raw Hash, Salted and/or Iterated
   1440 | sha256($salt.utf16le($pass))                     | Raw Hash, Salted and/or Iterated
   1710 | sha512($pass.$salt)                              | Raw Hash, Salted and/or Iterated
   1720 | sha512($salt.$pass)                              | Raw Hash, Salted and/or Iterated
   1730 | sha512(utf16le($pass).$salt)                     | Raw Hash, Salted and/or Iterated
   1740 | sha512($salt.utf16le($pass))                     | Raw Hash, Salted and/or Iterated
     50 | HMAC-MD5 (key = $pass)                           | Raw Hash, Authenticated
     60 | HMAC-MD5 (key = $salt)                           | Raw Hash, Authenticated
    150 | HMAC-SHA1 (key = $pass)                          | Raw Hash, Authenticated
    160 | HMAC-SHA1 (key = $salt)                          | Raw Hash, Authenticated
   1450 | HMAC-SHA256 (key = $pass)                        | Raw Hash, Authenticated
   1460 | HMAC-SHA256 (key = $salt)                        | Raw Hash, Authenticated
   1750 | HMAC-SHA512 (key = $pass)                        | Raw Hash, Authenticated
   1760 | HMAC-SHA512 (key = $salt)                        | Raw Hash, Authenticated