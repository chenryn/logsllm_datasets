# BUGKU Reverse bingo题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
题目下载后得到一张图片
刚开始的时候没看分类，以为是 MISC 题，然后找了半天隐写内容，都没做找到，但是这个文件这么大，肯定是有问题。
然后又仔细找了一下，结果发现了这样一段内容，
看上去内容好像是 EXE 程序中才会有的，于是看了一下分类，好家伙，原来是 re 题。
百度了一下 png 文件尾
PNG (png)，
文件头：89504E47 文件尾：AE 42 60 82
搜索 AE 42 60 82
这不就是熟悉的 MZ 文件头吗，用 010 Editor 提取出这一段内容。
并重命名为 bingo.exe
结果报错了，随便找了一个 exe 文件，比对文件内容是否确实，发生少了 PE 文件头标识。
补上这一段内容。
数据补上后直接打开运行，发现可以显示黑框，但是运行后直接退出，于是打开 IDA 分析一下
ida 打开后似乎认不出来文件的其他内容，动态调试后发现这一段内容会出现异常的情况。
    pusha
    mov     ecx, 3E000h
    mov     ebx, 1000h
    mov     ebx, 400000h
    add     ebx, edx
    xor     byte ptr [ebx], 22h
    inc     ebx
    popa
    jmp     loc_408BE0
原因是 edx 的内容也是 400xxxh，相加之后到了 800xxx，超出了范围。  
这里不知道是作者预期还是怎么的，反正应该是这个解密函数出现了问题。
但是看到这里应该就是一个 xor 解密 (xor 0x22)，所以直接在外部解密吧。
编写解密脚本：
    #define MAXKEY 5000
    #define MAXFILE 1000
    #include 
    #include 
    using namespace std;
    int main()
    {
        char xor_key[MAXKEY], file_dir[MAXFILE];
        char* buf;
        //printf("xor key: ");
        //scanf("%s", xor_key);
        xor_key[0] = 0x22;
        xor_key[1] = 0;
        printf("file: ");
        scanf("%s", file_dir);
        FILE* fp = fopen(file_dir, "rb");
        strcat(file_dir, ".xor");
        FILE* fpw = fopen(file_dir, "wb+");
        if (fp && fpw)
        {
            fseek(fp, 0, SEEK_END);
            size_t size = ftell(fp);
            fseek(fp, 0, SEEK_SET);
            buf = new char[size];
            fread(buf, sizeof(char), size, fp);
            for (size_t i = 0, keySize = strlen(xor_key); i 
    #include 
    #include 
    using namespace std;
    int main()
    {
        char s[] = "zaciWjV!Xm[_XSqeThmegndq";
        char e[] = "                        ";
        char* v6 = (char*)operator new(strlen(s) + 1);
        memset(v6, 0, strlen(s) + 1);
        for (int i = 0; i < strlen(s); i++)
        {
            v6[i] = 'a' + i;
            _strrev(v6);
        }
        for (int i = 0; i < strlen(s); i++) e[v6[i] - 'a'] = s[i];
        printf("%s\n", v6);
        printf("%s\n", e);
        int a2 = 0x34;
        for (int i = 0; i < strlen(s); ++i)
        {
            for (char t = 1; t < 0xFF; t++)
            {
                int v2 = (signed __int64)pow((double)a2, 2.0);
                signed int v3 = (unsigned __int64)(signed __int64)pow((double)t, 2.0);
                v3 -= v2;
                v6[i] = (signed __int64)(sqrt((double)v3) + 0.5);
                if (v6[i] == e[i])
                {
                    printf("%c", t);
                    break;
                }
            }
            --a2;
        }
        return 0;
    }
运行后可以得到：flag {woc_6p_tql_moshifu}