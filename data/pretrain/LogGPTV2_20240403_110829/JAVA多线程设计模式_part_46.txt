//终止请求
private long countcr = U;
/·计教器的值
System.out.print.n("deshutdown: courter =
}catch (IrterruptodExcept-on e) {
counter++;
try f
 interrupt {};
try 1
finally { 
catch ((nterruptedException e)
Thread.sleep(5c0);
doshutdown(l;
whiie (!.sInterrupted())
CountupThread 类 (CountupThread Java)
dowork();
" + counter);
练习问题的解答
---
## Page 450
问题10-3的解答
publ.c class CouncupThread extends Thread f
import
如ListA10-2样。执行范例则如图A10-2所示。
inport
/！计数器的值
java.ic.TcFxception;
va.lc.Fi-eWriter;
(以下省略，按CTRL+C结束)
cowork: counter =
dowork: counzer =
dowork:(
dowezk: courter = 22
main: join
coWork: counter - 21
ma in: shutdownRegtest.
doWoik: ccunter = 20
dowork: courter
GoWcrk:
aoWork:
dohork:
dowork:
ioWevk:
aoWork:
donork:
dowork:
aoWerk:
deW:r k:
dowork:
dowerk:
doWork:
doWork:
donork:
dowcrk:
aowerk:
dework: counter
ma i1.: BFGTN
图A10-1执行范例（不予以结束）
ccuter
corrter
cotnter
ccunter
cotnter
counter
counter
courter
counter
counzer
cculer
ccunter
counrer
counter
courter
colnter
coti.ter
counter
二
1/
I
25
24
23
19
3
12
11
101
-1
.
←不移动到终止处理
一终止请求
---
## Page 451
private void doshuldown() {
！）终止处理
private void dowcrk() ihrows
！操作
pub-ie void run() [
/操作
publie boelean isshuldew:Reqcesced() {
‘，判断终止请求是否已经送出
public void shu.downRequestl)
/：终止请求
private vola.ile bsolean
；/已经送出终止请求则为t.rue
private lorg ccurler - c;
try { 
System.out.println("doshutdown:
System.oue-prineln("doshurdown:
Thread.sleep(50c);
Systen.out.prirtln("dowork: courter = " + counter);
counter++; 
ty
retrrn shutdownRequesled;
irterzup.();
shuzdownRequested - true;
finally{
catch (IrterruptedFxcepticn e)
FileWriter writer :
doshut dowr ();
while (!shutdownRequested)
dowerk();
 shutdowrReguested = false;
néw
TmterruptedExceplior.
FileWriter("counter.txt");
练习问题的解答
---
## Page 452
Method.
思）。这个问题中,run 变成 Template Method,而 doWork 与 doShutdown 变成 Hook
run 就会变成 Template Method（因比，我们将 run 设为final的方法）。
根据适当的顺序、时间被调用出。
下的做法。
问题10-4的解答
（请参照附录E[GoF}[Yuki01])。此类图请参照图A10-3。
此外，我们称以了类进行处理的方法为Hook Method（hook 为“挂上”的意
像这样，用父类的方法米组成处理的架构，
CountupThread 的 doWork 与 doShutdown，会从父类（Super Class）的 run 方法
扩允了 GracefuiThread 的 CountupThread 类即如同List A10-3。在此我们采取如
●将 GracefulThread 类的方法 doWork与doShutdown 给重载。
 System.out.prirtla("doShutdown: Save END"):
”catch (loexcepcion e)l
e.printStackTrace();
writer.close(l;
writer.write("counter = " 4 counter);
main: ENE
doshutdown: Save END
doSrutdown: Save BEGIN
main: join 
dowerk: courter = 20
main: shutdownRequest
dowerk: courter = 20
dowork: ccunter - l9
（中略）
dowork:
iowerk:
dowork: counter
main: BEGIN
counter 
colnter
图A10-2
2执行范例
，将该方法调用出来的方法用子类来
+结束保存
一开始保存
---
## Page 453
类（List 10-5），建立 ServiceThread 类，从 Service 类后动 ServiceThread 类。这
问题10-5的解答
解答如ListA10-4与A10-5。我们继承问题10-4中使用的GracefulThread
public class CountupThread extenas GracefulThread f
List A10-3
prot.ected void doshurdown() 1
／终止处理
protected void dowork() throws
操作
private long counter = O;
；计数器的值
 System.out.princin("doshutdown: couuter = " +
Thread.sleep(50c);
counter++;
图 AlU-3使用了 Template Method 模式的 CountupThread 的类图
dodoWork deShutdown是Hook Method
扩充了 GracefulThread 的 CountupThread 类 (CountupThread.java)
11
Requests shutdown.
InterruptedExceptior [
#doShutdown
+run frozen}
+isShutdownRequestedfconcurent}
+shutdownRequest {eoncurrent?
#dowork
-counter
-shutdewnRequested
CountupThread
GracefuIThread
+counter);
练习问题的解答
439
---
## Page 454
图A10-5 就是我们进行balk时的样了。
就是Thread-Per-Message Pattern（第7章）。图A10-4就是我们取消执行时的样
在连续单击[Execute]按钮时，我们使用] Balking Patterm（第4章）在过行 balk。
ptblic class ServiceThread extends GracefulThread
List At0-5
public class Service {
st A10-4
protected void doWcrk() throws InterruptedException
/执行中
private int count - O;
public synchronized statte void carce.() i
 private static (iracefulThread thread - nul-;
暂停服务
public synchrcnized static void service()
!!开始进行服务（如果是执行中的话就ba二k）
if (count >= 50){
count++; 
Thread.sleep(1c0) ;
System.ou".print(",");
it (thread != rull) {
thread.starc(); 
thread - new ServiceThread();
// Thread-Fer-Message
System.out.prinl("service");
ServiceThread 类(ServiceThread.java)
thread.shutdownRequest();
System.cut.printlr(" is baiked,");
// Baiking
Service 类(Service.java)
returr;
---
## Page 455
间几平是0秒。
字段，如果出现结束处理的要求，马上就会当场抛出异常 InterruptedException。
问题10-7的解答
shutdownRequest 字段声明为 volatile，
的同步请参照附录B.
因此必须以 synchromized来保护，或是将字段卢明成volatile，线程的同步以及内存
其他线程可能就无法进行引时。
synchronized 米保护，或声明为volatile。不然的话，
问题10-6的解答
执行结果如图A10-6所示。从提出结束处理的要求到进入结束处肆，所花的时
解答如List A10-6
在范例文件中，并不需要线程的同步，但是需要内存的同步，因此将
shutdlownRcquested字段为数个线程所共有，这数个线程都会连接上这个字段
Java 的记忆模式（Memory Model）|，由数个线程共享的字段必须要由
线程的同步以及内存的同步请参阅附录B，
protected veia doshurdowr() l
//结束处理
System.ou..prin-lnt"dore."l;
shttacwnkcqiest(); //
图A10-54执行服务时单击3次[Exccute]按钮
..servire is baiked.
图A10-4在执行服务时单山；1次[Cance’按钮
'alop
—
...cancel
自己结束
个线程对字段进行的修改，
练习问题的解答
---
## Page 456
throws IrterruptedException {
public class HanoiThread extends Thread f
List A10-6
pzivate void doWork(int. level, char posA, char posB, char posC)
public void run(） 1
//操作
pub.ic bcolean isshutdownRequested() 
！/判断终止请求是否已经送出
//操作
public void shutaownRequest() {
/！终止请求
private volatile lorg requestedrimeMillis = 0;
//提出终止处理的时刻
private volatile boclean shutdownRequested - false;
//提出终止处理的请求的话为rue
if (level > D) {
try{
return shutdownRequested;
interrpt();
shutdownReqreared = true;
requestedTimeMillis = System.currentTimeMillis();
finally{ 
catch (InterruptedExceptior e)
dowork(level -
if (shutdownRequested)
doShutdowr();
for (int. level - U; !shutdowrRequested; leveli+)
HanoiThread 类 (HanoiThread.java)
throw new InterruptedException();
System.out.println("");
doWork(level, 
System.out.prirtlr("-:
1， posA, posC, posBl;
'A', 'B',
'c');
"
---
## Page 457
C->BC->AB->AC->B->CA->BC->BC->A B->A B->CA->CB->AC->B
B->A B->CA->CB>AC->BC->A B->AB->C A->CA->BC->BA->CB->A
==== Level 5 -===
===- Ievel 0 -=-=
===-
->B
===
->C
===
A->B
-==
main: BFGiN
R->C A->C A->H
∧---
----
A->BC->B
"msec."};
A->BC->B
C->B A->B
Level 4 =-=
--AC->BA->B C->A B->B->AC->AC->BA->BA->CB->CA->B->A
main: join 
Main: shutdownRequest
×（1）产牛3个ThreadLocal的实例，
（中略】
×（6）产*生3个Log的实例。
○（5）产生3个TSLog的实例。
×（4）ThreadLocal的get方法会被调用3次。
（3）ThrcadLocal的 sct方法被调用出束3次。
○（2）产生3个PrintWriter 的实例.
的时间
--
B->A C->A B->C