至此，我们自定义的Panel
钮，或直接
当你修改了Dashboard后，记得点击顶部的
查询的 step 数值。
你也可以直接在管理界面中填写 Prometheus 的查询语句，以及修改
Grafana
Graph
default
CTRL+S
Metrics
+ Addqguery
保存。
Legend
14:05
14:05
：已添加完成
Display
14:10
14:10
Alert
Panel
14:15
14:15
Time range
Resolution
4:20
14:20
14:25
1/2
14:25
14:3014:3514:40
Save dashboard按
14:30
14:35
14:40
14:45
14:50
---
## Page 57
本文档使用书栈(BookStack.CN)构建
+ Prometheus 是个不错的选择。
Grafana
---
## Page 58
scrape_configs， remote_write， remote_read 等属性。
在配置文件中我们可以指定 global，
Prometheus 配置
本文档使用书栈(BookStack.CN)构建
其代码结构体定义为：
置文件，默认为
Prometheus 启动的时候，
配置
Prometheus 配置
5
切
3
2
10.
·配置
S
2
parsing.
type Config struct {
`yaml:"remote_read, omitempty"`
`yaml:"remote_write, omitempty"
`yaml:"scrape_configs, omitempty" 
files.
RemoteReadConfigs[]*RemoteReadConfig
 XXX map[string]interface{} `yaml:",inline"`
RemoteWriteConfigs []*RemoteWriteConfig
 ScrapeConfigs []*ScrapeConfig
 GlobalConfig Globalconfig
original string 
// original is the input from which the config was parsed.
RuleFiles 
Alertingconfig Alertingconfig
prometheus.yml。
[]string
，可以加载运行参数
，alerting, rule_files,
`yaml:"rule_files, omitempty"
yaml:"alerting, omitempty"
yaml:"global"`
 -config.file
指定配
---
## Page 59
本文档使用书栈(BookStack.CN)构建
配置文件结构大概为：
Prometheus 配置
3
2
2
乙
忆
2
乙
20
16
10
15
3
2
口
6
S
2
ae a  aa r   sa #
alerting:
 # Alerting specifies settings related to the Alertmanager.
 scrape_configs:
remote_write:
 # A list of scrape configurations.
rule_files: 
# all matching files.
from 
 # Rule files specifies a list of globs. Rules and alerts are read
communicating with 
 alertmanagers:
 alert_relabel_configs:
[ -  
[-
 # external systems 
 # The labels to add to any time series or alerts when
external_labels:
[ evaluation_interval:  丨 default = 1m ]
 # How frequently to evaluate rules.
# How long until a scrape request times out.
[ scrape_interval:  | default = 1m ］
 # How frequently to scrape targets by default
[ scrape_timeout:  丨 default = 10s
 [ －  ...
[ - 
[ :
:  ...
6 (federation, remote storage, Alertmanager).
---
## Page 60
本文档使用书栈(BookStack.CN)构建
Prometheus 配置
37.
5
 remote_read:
 # Settings related to the experimental remote read feature.
---
## Page 61
本文档使用书栈(BookStack.CN)构建
其代码结构体定义为：
全局配置
全局配置
全局配置
global
·全局配置
2
·external_labels：额外的属性，会添加到拉取的数据并存到数
·evaluation_interval：执行 rules 的时间间隔。
·scrape_timeout：拉取一个target 的超时时间。
·scrape_interval：拉取 targets 的默认时间间隔。
据库中。
parsing.
instance scrapes.
type Globalconfig struct { 
// objects.
configuration
yaml:"evaluation_interval, omitempty""
yaml:"scrape_interval,omitempty" 
 // Globalconfig configures values that are used across other
yaml:"external_labels, omitempty"
ExternalLabels model.LabelSet
// The labels to add to any timeseries that this Prometheus
 // catches all undefined fields and must be empty after
 ScrapeInterval model.Duration
// The default timeout when scraping targets.
 // How frequently to scrape targets by default.
EvaluationInterval model.Duration
// How frequently to evaluate rules by default.
属于全局的默认配置，它主要包含4个属性，
ScrapeTimeout model.Duration ^yaml:"scrape_timeout,omitempty" 
9
---
## Page 62
本文档使用书栈(BookStack.CN)构建
配置文件结构大概为：
全局配置
15.
14.
6
6
S
 global:
communicating with 
seconds.
seconds.
 scrape_timeout: 10s # is set to the global default (10s)
 evaluation_interval: 15s # By default, scrape targets every 15
 scrape_interval:
external_labels:
 # external systems (federation, remote storage, Alertmanager)
          #
 monitor: 'codelab-monitor
XXX map[string]interface{} 'yaml:",inline"
15s # By default, scrape targets every 15
---
## Page 63
本文档使用书栈(BookStack.CN)构建
配置文件结构大概为：
其代码结构体定义为：
Alertmanager，主要包含2个参数：
所以
Alertmanager,
告警配置
告警配置
以及动态定义告警属性。
通常我们可以使用运行参数
告警配置
·alert_relabel_configs：动态修改 alert属性的规则配
·告警配置
の
S
3
·alertmanagers：用于动态发现 Alertmanager 的配置。
置。
parsing.
type Alertingconfig struct { 
configs.
// Alertingconfig configures alerting and alertmanager related
yaml:"alertmanagers, omitempty" 
yaml:"alert_relabel_configs, omitempty"`
AlertRelabelConfigs []*RelabelConfig
Alertmanagerconfigs []*AlertmanagerConfig
alerting 
 XXX map[string]interface{} ‘yaml:",inline"
 // catches all undefined fields and must be empty after
配置主要用来解决这个问题，它能够更好的管理
但是这样不够灵活，没有办法做到动态更新加载，
-alertmanager.xxx]
来配置
---
## Page 64
本文档使用书栈(BookStack.CN) 构建
alertmanager_config 的代码结构体为,
其中 alertmanagers 为 alertmanager_config 数组，而
告警配置
21
2
15
切
3
6
8
9
O
2
2
// Alertmanagerconfig configures how Alertmanagers can be
alerting: 
 # Alerting specifies settings related to the Alertmanager
parsing.
`yaml:"relabel_configs,omitempty"
types.
will then parse
type Alertmanagerconfig struct {
discovered and communicated with.
 alert_relabel_configs:
alertmanagers:
 // values arbitrarily into the overflow maps of further-down
 // we cannot do proper Go type embedding below as the parser
 [-  ...
 XXX map[string]interface{} `yaml:",inline"
// Catches all undefined fields and must be empty after
RelabelConfigs []*RelabelConfig
// List of Alertmanager relabel configurations,
Timeout time.Duration yaml:"timeout,omitempty"
// The timeout used when sending alerts.
// Path prefix to add in front of the push endpoint path.
// The URL scheme to use when talking to Alertmanagers.
HTTPClientConfig
ServiceDiscoveryconfig ServiceDiscoveryconfig
PathPrefix string `yaml:"path_prefix,omitempty"
Scheme string`
`yaml:"scheme, omitempty"
HTTPClientConfig
`yaml:",inline"
`yaml:",inline"
---
## Page 65
本文档使用书栈(BookStack.CN)构建
配置文件结构大概为：
告警配置
33.
3
29
20
乙
2
2
乙
Z
2
15
切
3
2
8
S
4
C
6
2
 azure_sd_configs:
 # List of Azure service discovery configurations.
[ proxy_url:  
 # Optional proxy URL
 # Configures the scrape request's TLS settings
# Sets the 
# the configured bearer token. It is mutually exclusive with
 # Sets the ‘Authorization` header on every request with 
# configured username and password.
# Sets the ‘Authorization`
[ scheme:  | default = http ］
# Configures the protocol scheme used for requests.
tls_config:
[ path_prefix:  | default = / ]
# Prefix for the HTTP path alerts are pushed to.
[ timeout:  丨 default = 10s ］
 # Per-target Alertmanager timeout when pushing alerts.
[ bearer_token_file:
`bearer_token`
# read from the configured file. It is mutually exclusive with
token 
[ bearer_token:  
`bearer_token_file`.
basic_auth:
[- 
［ ]
[ password: 
[ username: 
`Authorization`
 /path/to/bearer/token/file 
 header on every request with the bearer
 header on every request with the
---
## Page 66
本文档使用书栈(BookStack.CN)构建
告警配置
71.
8
5
15
1
6
3
计
t
6
8
34.
 serverset_sd_configs:
 # List of Zookeeper Serverset service discovery configurations.
 # List of AirBnB's Nerve service discovery configurations.
 # List of Marathon service discovery configurations.
 kubernetes_sd_configs:
 gce_sd_configs: 
 # List of GCE service discovery configurations
 # List of file service discovery configurations.
 # List of Ec2 service discovery configurations.
 # List of DNS service discovery configurations.
 consul_sd_configs: 
 # List of Triton service discovery configurations.
 marathon_sd_configs:
 # List of Kubernetes service discovery configurations.
ec2_sd_configs:
 dns_sd_configs:
 # List of Consul service discovery configurations.
nerve_sd_configs: 
file_sd_configs:
 [ -  ...
 [ - 
[-  ...］
[- 
[ -  
 [-  ...
[ -  ...
...
---
## Page 67
本文档使用书栈(BookStack.CN) 构建
告警配置
81
3
80.
79.
4
72.
 relabel_configs:
 # List of Alertmanager 
 static_configs:
 # List of labeled statically configured Alertmanagers.
 triton_sd_configs:
[ -  ...
-  
 relabel configurations.
---
## Page 68
本文档使用书栈(BookStack.CN) 构建
配置文件结构大致为：
其代码结构定义为：
目录。
规则配置
规则配置
规则配置
rule_files
2
·规则配置
 rule_files:
 RuleFiles
- "rules2/*.rules"
"rules/node.rules"
主要用于配置rules 文件，它支持多个文件以及文件
[]string
`yaml:"rule_files,omitempty" 
---
## Page 69
本文档使用 书栈(BookStack.CN) 构建
其代码结构体定义为：
包含以下参数：
scrape_configs 主要用于配置拉取数据节点，
数据拉取配置
数据拉取配置
数据拉取配置
·metric_relabel_configs：metric 重置标签配置
人
·metrics_path：拉取节点的 metric路径
·params：数据拉取访问时带的请求参数
·honor_labels：用于解决拉取数据标签有冲突，当设置为
）Scheme：拉取数据访问协议
）scrape_timeout：拉取超时时间
·job_name：任务名称
·数据拉取配置
 relabel_configs: 
数据将被忽略，不入存储；默认值为θ，表示没有限制
sample_limit：存储的数据标签个数限制，如果超过限制，
scrape_interval：拉取时间间隔
true,
unmodified.
type Scrapeconfig struct {
// Indicator whether the scraped metrics should remain
// The job name to which the job label is set by default
// A set of query parameters with which the target is scraped.
HonorLabels bool `yaml:"honor_labels, omitempty"`
JobName string `yaml:"job_name"`
以拉取数据为准，否则以服务配置为准
拉取数据重置标签配置
，每一个拉取配置主要
该
69
---
## Page 70
本文档使用书栈(BookStack.CN)构建
为：
以上配置定义中还包含 ServiceDiscoveryConfig，它的代码定义
数据拉取配置
3
3
29
乙
Z
忆
23
15
2
口
6
08
parsing.
`yaml:"metric_relabel_configs,omitempty""
types.
will then parse 
cause the scrape to fail.
targets.
`yaml:"scrape_interval, omitempty"
yaml:"relabel_configs, omitempty"
// values arbitrarily into the overflow maps of further-down
 XXX map[string]interface{} `yaml:",inline" 
 // Catches all undefined fields and must be empty after
 MetricRelabelConfigs []*RelabelConfig
// List of metric relabel configurations.
RelabelConfigs []*RelabelConfig 
// List of target relabel configurations.
// we cannot do proper Go type embedding below as the parser
 SampleLimit uint `yaml:"sample_limit,omitempty" 
// More than this many samples post metric-relabelling will
Scheme string `yaml:"scheme,omitempty"
MetricsPath string `yaml:"metrics_path,omitempty"
HTTPClientConfig
 s  n u   ao di  
ScrapeTimeout model.Duration `yaml:"scrape_timeout,omitempty"
// The timeout for scraping targets of this config.
ScrapeInterval model.Duration
// How frequently to scrape the targets of this scrape config.
Params url.Values 
`yaml:"params, omitempty" 
HTTPClientConfig
`yaml:",inline"
70
---
## Page 71
本文档使用书栈(BookStack.CN)构建
数据拉取配置
乙
25
忆