Peer Discovery and Inter-Committee Routing. The nodes belonging to the same sharding com-
mittee discover each other via a peer-discovery algorithm. Each sharding committee is responsible
for maintaining a disjoint transaction ledger known as a shard, which is stored as a blockchain by
every member of the committee. Each transaction tx is submitted by a user of the system to a
small number of arbitrary RapidChain nodes who route tx, via an inter-committee routing protocol,
to a committee responsible for storing tx. We refer to this committee as the output committee for
tx and denote it by Cout. This committee is selected deterministically by hashing the ID of tx to a
number corresponding to Cout. Inspired by Kademlia [48], the verifying committee in RapidChain
1Total message complexity of consensus per transaction (see Section 6.6).
2Reduction in the amount of storage required for each participant after the same number of transactions are processed (and
conﬁrmed) by the network.
4
communicates with only a logarithmic number of other committees to discover the ones that store
the related transactions.
Cross-Shard Veriﬁcation. The members of Cout batch several transactions into a large block
(about 2 MB), and then, append it to their own ledger. Before the block can be appended, the
committee has to verify the validity of every transaction in the block. In Bitcoin, such a veriﬁ-
cation usually depends on other (input) transactions that record some previously-unspent money
being spent by the new transaction. Since transactions are stored into disjoint ledgers, each stored
by a diﬀerent committee, the members of Cout need to communicate with the corresponding input
committees to ensure the input transactions exist in their shards.
Intra-Committee Consensus. Once all of the transactions in the block are veriﬁed, the members
of Cout participate in an intra-committee consensus protocol to append the block to their shard.
The consensus protocol proceeds as follows. First, the members of Cout choose a local leader using
the current epoch randomness. Second, the leader sends the block to all the members of Cout
using a fast gossiping protocol that we build based on the information dispersal algorithm (IDA) of
Alon et al. [6, 5] for large blocks.
Third, to ensure the members of Cout agree on the same block, they participate in a Byzantine
consensus protocol that we construct based on the synchronous protocol of Ren et al. [60]. This
protocol allows RapidChain to obtain an intra-committee consensus with the optimal resiliency
of 1/2, and thus, achieve a total resiliency of 1/3 with small committees. While the protocol
of Ren et al. requires exchanging O(m2(cid:96)) bits to broadcast a message of length (cid:96) to m parties, our
intra-committee consensus protocol requires O(m2h log m + m(cid:96)) bits, where h is the length of a hash
that depends only on the security parameter.
Protocol Reconﬁguration. A consensus decision in RapidChain is made on either a block of
transactions or on a reconﬁguration block. A reconﬁguration block is generated periodically at the
end of a reconﬁguration phase that is executed at the end of every epoch by the members of CR to
establish two pieces of information: (1) a fresh epoch randomness, and (2) a new list of participants
and their committee memberships. The reconﬁguration phase allows RapidChain to re-organize its
committees in response to a slowly-adaptive adversary [56] that can commit join-leave attacks [25]
or corrupt nodes at the end of every epoch. Such an adversary is allowed to corrupt honest nodes
(and hence, take over committees) only at the end of epochs, i.e., the set of committees is ﬁxed
during each epoch.
Since re-electing all committees incurs a large communication overhead on the network, Rapid-
Chain performs only a small reconﬁguration protocol built on the Cuckoo rule [8, 62] at the end of
each epoch. Based on this strategy, only a constant number of nodes are moved between committees
while provably guaranteeing security as long as at most a constant number of nodes (with respect
to n) join/leave or are corrupted in each epoch.
During the reconﬁguration protocol happening at the end of the i-th epoch, CR generates a
fresh randomness, ri +1, for the next epoch and sends ri +1 to all committees. The fresh randomness
not only allows the protocol to move a certain number of nodes between committees in an unpre-
dictable manner, thus hindering malicious committee takeovers, but also allows creation of fresh
computational puzzles for nodes who want to participate in the next epoch (i.e., epoch i + 1).
Any node that wishes to participate in epoch i + 1 (including a node that has already partici-
pated in previous epochs) has to establish an identity (i.e., a public key) by solving a fresh PoW
puzzle that is randomized with ri +1. The node has to submit a valid PoW solution to CR before
a “cutoﬀ time” which is roughly 10 minutes after ri +1 is revealed by CR during the reconﬁguration
phase. Once the cutoﬀ time has passed, the members of CR verify each solution and, if accepted,
5
add the corresponding node’s identity to the list of valid participants for epoch i + 1. Next, CR
members run the intra-committee consensus protocol to agree on and record the identity list within
CR’s ledger in a reconﬁguration block that also includes ri +1 and the new committee memberships.
This block is sent to all committees using the inter-committee routing protocol (see Protocol 1).
Further Remarks. Note that nodes are allowed to reuse their identities (i.e., public keys) across
epochs as long as each of them solves a fresh puzzle per epoch for a PoW that is tied to its identity
and the latest epoch randomness. Also, note that the churn on CR is handled in exactly the same
way as it is handled in other committees: ri +1 generated by the CR members in epoch i determines
the new set of CR members for epoch i +1. Finally, the diﬃculty of PoW puzzles used for establishing
identities is ﬁxed for all nodes throughout the protocol and is chosen in such a way that each node
can only solve one puzzle during each 10-minute period, assuming without loss of generality, that
each node has exactly one unit of computational power (see Section 3 for more details).
In Section 2, we review related work and present a background on previous
Paper Organization.
work that RapidChain builds on. In Section 3, we state our network and threat models and deﬁne the
general problem we aim to solve. We present our protocol design in Section 4. We formally analyze
the security and performance of RapidChain in Section 6. Finally, we describe our implementation
and evaluation results in Section 5 and conclude in Section 7.
2 Background and Related Work
We review two categories of blockchain consensus protocols: committee-based and sharding-based
protocols. We refer the reader to [9] for a complete survey of previous blockchain consensus protocols.
Next, we review recent progress on synchronous Byzantine consensus and information dispersal
algorithms that RapidChain builds on.
2.1 Committee-Based Consensus
The notion of committees in the context of consensus protocols was ﬁrst introduced by Bracha [13] to
reduce the round complexity of Byzantine agreement, which was later improved in, e.g., [55, 61]. The
idea of using committees for scaling the communication and computation overhead of Byzantine
agreement dates back to the work of King et al. [39] and their follow-up work [38], which allow
Byzantine agreement in fully-connected networks with only a sublinear per-node overhead, w.r.t. the
number of participants. Unfortunately, both work provide only theoretical results and cannot be
directly used in the public blockchain setting (i.e., an open-membership peer-to-peer network).
Decker et al. [23] propose the ﬁrst committee-based consensus protocol, called PeerCensus, in the
public blockchain model. They propose to use PBFT [20] inside a committee to approve transactions.
Unfortunately, PeerCensus does not clearly mention how a committee is formed and maintained to
ensure honest majority in the committee throughout the protocol. Hybrid Consensus [56] proposes
to periodically select a committee that runs a Byzantine consensus protocol assuming a slowly-
adaptive adversary that can only corrupt honest nodes in certain periods of time. ByzCoin [41]
proposes to use a multi-signature protocol inside a committee to improve transaction throughput.
Unfortunately, ByzCoin’s speciﬁcation is incomplete and the protocol is known to be vulnerable to
Byzantine faults [56, 4, 9].
Algorand [32] proposes a committee-based consensus protocol called BA(cid:63) that uses a veriﬁable
random function (VRF) [51] to randomly select committee members, weighted by their account bal-
ances (i.e., stakes), in a private and non-interactive way. Therefore, the adversary does not know
6
which node to target until it participates in the BA(cid:63) protocol with other committee members. Algo-
rand replaces committee members with new members in every step of BA(cid:63) to avoid targeted attacks
on the committee members by a fully-adaptive adversary. Unfortunately, the randomness used in
each VRF invocation (i.e., the VRF seed) can be biased by the adversary; the protocol proposes a
look-back mechanism to ensure strong synchrony and hence unbiased seeds, which unfortunately,
results in a problematic situation known as the “nothing at stake” problem [32]. To solve the biased
coin problem, Dﬁnity[33] propose a new VRF protocol based on non-interactive threshold signature
scheme with uniqueness property.
Assuming a trusted genesis block, Solida [4] elects nodes onto a committee using their solutions to
PoWs puzzles that are revealed in every round via 2t + 1 committee member signatures to avoid pre-
computation (and withholding) attacks. To ﬁll every slot in the ledger, a reconﬁgurable Byzantine
consensus protocol is used, where a consensus decision is made on either a batch of transactions or a
reconﬁguration event. The latter records membership change in the committee and allows replacing
at most one member in every event by ranking candidates by their PoW solutions. The protocol
allows the winning candidate to lead the reconﬁguration consensus itself avoiding corrupt internal
leaders to intentionally delay the reconﬁguration events in order to buy time for other corrupt nodes
in the PoW process.
2.2 Sharding-Based Consensus
Unlike Bitcoin, a sharding-based blockchain protocol can increase its transaction processing power
with the number of participants joining the network by allowing multiple committees of nodes
process incoming transactions in parallel. Thus, the total number of transaction processed in each
consensus round by the entire protocol is multiplied by the number of committees. While there are
multiple exciting, parallel work on sharding-based blockchain protocols such as [64, 65], we only
study results that focus on handling sharding in the Bitcoin transaction model.
2.2.1 RSCoin
Danezis and Meiklejohn [22] propose RSCoin, a sharding-based technique to make centrally-banked
cryptocurrencies scalable. While RSCoin describes an interesting approach to combine a central-
ized monetary supply with a distributed network to introduce transparency and pseudonymity to
the traditional banking system, its blockchain protocol is not decentralized as it relies on a trusted
source of randomness for sharding of validator nodes (called mintettes) and auditing of transactions.
Moreover, RSCoin relies on a two-phase commit protocol executed within each shard which, unfor-
tunately, is not Byzantine fault tolerant and can result in double-spending attacks by a colluding
adversary.
2.2.2 Elastico
Luu et al. [47] propose Elastico, the ﬁrst sharding-based consensus protocol for public blockchains.
In every consensus epoch, each participant solves a PoW puzzle based on an epoch randomness
obtained from the last state of the blockchain. The PoW’s least-signiﬁcant bits are used to determine
the committees which coordinate with each other to process transactions.
While Elastico can improve the throughput and latency of Bitcoin by several orders of magni-
tude, it still has several drawbacks: (1) Elastico requires all parties to re-establish their identities
(i.e., solve PoWs) and re-build all committees in “every” epoch. Aside from a relatively large com-
munication overhead, this incurs a signiﬁcant latency that scales linearly with the network size as
the protocol requires more time to solve enough PoWs to ﬁll up all committees; (2) In practice,
7
Elastico requires a small committee size (about 100 parties) to limit the overhead of running PBFT
in each committee. Unfortunately, this increases the failure probability of the protocol signiﬁcantly
and, using a simple analysis (see [42]), this probability can be as high as 0.97 after only six epochs,
rendering the protocol completely insecure in practice; (3) The randomness used in each epoch of
Elastico can be biased by an adversary, and hence, compromise the committee selection process and
even allow malicious nodes to precompute PoW puzzles; (4) Elastico requires a trusted setup for
generating an initial common randomness that is revealed to all parties at the same time; (5) While
Elastico allows each party to only verify a subset of transactions, it still has to broadcast all blocks
to all parties and requires every party to store the entire ledger; (6) Finally, Elastico can only tol-
erate up to a 1/4 fraction faulty parties even with a high failure probability. Elastico requires this
low resiliency bound to allow practical committee sizes.
2.2.3 OmniLedger
In a more recent work, Kokoris-Kogias et al. [42] propose OmniLedger, a sharding-based distributed
ledger protocol that attempts to ﬁx some of the issues of Elastico. Assuming a slowly-adaptive
adversary that can corrupt up to a 1/4 fraction of the nodes at the beginning of each epoch, the
protocol runs a global reconﬁguration protocol at every epoch (about once a day) to allow new
participants to join the protocol.
The protocol generates identities and assigns participants to committees using a slow iden-
tity blockchain protocol that assumes synchronous channels. A fresh randomness is generated in
each epoch using a bias-resistant random generation protocol that relies on a veriﬁable random
function (VRF) [51] for unpredictable leader election in a way similar to the lottery algorithm
of Algorand [50]. The consensus protocol assumes partially-synchronous channels to achieve fast
consensus using a variant of ByzCoin [41], where the epoch randomness is further used to divide a
committee into smaller groups. The ByzCoin’s design is known to have several security/performance
issues [56, 4], notably that it falls back to all-to-all communication in the Byzantine setting. Unfor-
tunately, due to incomplete (and changing) speciﬁcation of the new scheme, it is unclear how the
new scheme used in OmniLedger can address these issues.
Furthermore, there are several challenges that OmniLedger leaves unsolved: (1) Similar to Elas-
tico, OmniLedger can only tolerate t < n/4 corruptions. In fact, the protocol can only achieve low
latency (less than 10 seconds) when t < n/8; (2) OmniLedger’s consensus protocol requires O(n)
per-node communication as each committee has to gossip multiple messages to all n nodes for each
block of transaction; (3) OmniLedger requires a trusted setup to generate an initial unpredictable
conﬁguration to “seed” the VRF in the ﬁrst epoch. Trivial algorithms for generating such a common
seed require Ω(n2) bits of communication; (4) OmniLedger requires the user to participate actively
in cross-shard transactions which is often a strong assumption for typically light-weight users; (5)
Finally, OmniLedger seems vulnerable to denial-of-service (DoS) attacks by a malicious user who
can lock arbitrary transactions leveraging the atomic cross-shard protocol.
When t < n/4, OmniLedger can achieve a high throughput (i.e., more than 500 tx/sec) only when
an optimistic trust-but-verify approach is used to trade-oﬀ between throughput and transaction
conﬁrmation latency. In this approach, a set of optimistic validators process transactions quickly
providing provisional commitments that are later veriﬁed by a set of core validators. While such
an approach seems useful for special scenarios such as micropayments to quickly process low-stake
small transactions, it can be considered as a high-risk approach in regular payments, especially
due to the lack of ﬁnancial liability mechanisms in today’s decentralized systems. Nevertheless,
any blockchain protocol (including Bitcoin’s) has a transaction conﬁrmation latency that has to be
considered in practice to limit the transaction risk.
8
2.3 Synchronous Consensus
The widely-used Byzantine consensus protocol of Castro and Liskov [20], known as PBFT, can
tolerate up to t < n/3 corrupt nodes in the authenticated setting (i.e., using digital signatures) with
asynchronous communication channels. While asynchronous Byzantine consensus requires t < n/3
even with digital signatures [15], synchronous consensus can be solved with t < n/2 using digital
signatures. Recently, Ren et al. [60] propose an expected constant-round algorithm for Byzantine
consensus in a synchronous, authenticated communication network, where up to t < n/2 nodes can
be corrupt. While the best known previous result, due to Katz and Koo [37], requires 24 rounds of
communication in expectation, the protocol of Ren et al. requires only 8 rounds in expectation.
Assuming a random leader-election protocol exists, the protocol of Ren et al. runs in iterations
with a new unique leader in every iteration. If the leader is honest, then the consensus is guaranteed
in that iteration. Otherwise, the Byzantine leader can prevent progress but cannot violate safety,
meaning that some honest nodes might not terminate at the end of the iteration but all honest
nodes who terminate in that iteration will output the same value, called the safe value. If at least
one node can show to the new leader that has decided on a safe value, then the new leader proposes
the same value in the next iteration. Otherwise, the new leader proposes a new value.
Information Dispersal Algorithms
2.4
Rabin [58] introduces the notion of information dispersal algorithms (IDA) that can split a message
(or ﬁle) into multiple chunks in such a way that a subset of them will be suﬃcient to reconstruct
the message. This is achieved using erasure codes [11] as a particular case of error-correcting
codes (ECC) allowing some of the chunks to be missing but not modiﬁed. Krawczyk [43] extends
this to tolerate corrupted (i.e., altered) chunks by computing a ﬁngerprint for each chunk and storing
the vector of ﬁngerprints using ECC. Alon et al. [6, 5] describe a more-eﬃcient IDA mechanism by
computing a Merkle hash tree [49] over encoded chunks in order to verify whether each of the
received chunks is corrupted.
In RapidChain, we build on the IDA of Alon et al. [5] to perform eﬃcient gossips on large blocks
within each committee. Once an ECC-encoded message is dispersed in the network via IDA, honest
nodes agree on the root of the Merkle tree using the intra-committee consensus protocol to ensure
consistency. Using the corresponding authentication path in the Merkle tree sent by the sender,
recipients can verify the integrity of all chunks and use a decoding mechanism to recover the message
(see Section 4.3 for more details).
3 Model and Problem Deﬁnition