# 十三、监控 Docker 指标
概观
本章将为您提供为系统设置监控环境以开始收集容器和资源指标所需的技能。到本章结束时，您将能够为您的度量设计一个监控策略，并确定在您开始项目开发之前需要考虑什么。您还将在系统上实现基本的普罗米修斯配置。本章将通过探索用户界面、PromQL 查询语言、配置选项以及 Docker 和应用度量的集合来扩展您对普罗米修斯的了解。它还将增强您的可视化和仪表板，将格拉夫纳作为普罗米修斯安装的一部分。
# 简介
在本书的前一章中，我们花了一些时间研究我们的容器如何使用它们的主机系统上的资源。我们这样做是为了确保我们的应用和容器尽可能高效地运行，但是当我们开始将我们的应用和容器移动到更大的生产环境中时，使用命令行工具(如`docker stats`)将开始变得麻烦。您会注意到，随着容器数量的增加，仅使用`stats`命令就很难理解这些指标。正如您将在接下来的页面中看到的，通过一点点规划和配置，为我们的容器环境设置监控将使我们能够轻松跟踪容器和系统的运行情况，并确保生产服务的正常运行时间。
随着我们进入更加敏捷的开发过程，应用的开发需要包含对应用的监控。在项目开始时有一个清晰的计划来监控我们的应用将允许开发人员将监控工具作为他们开发过程的一部分。这意味着，在创建应用之前，清楚地了解我们计划如何收集和监控应用非常重要。
除了应用和服务之外，监控环境中运行的基础架构、编排和容器也很重要，这样我们就可以全面了解环境中发生的一切。
当您建立度量监控策略时，您需要考虑的一些事情如下:
*   **应用和服务**:这包括您的代码可能依赖的第三方应用，它们不在您的硬件上。它还包括应用运行的编排服务。
*   **硬件**:退一步，确保你也注意到你的服务所依赖的所有硬件，包括数据库、应用编程接口网关和服务器，有时是很好的。
*   **要监控和提醒的服务**:随着应用的增长，您可能不仅希望监控特定的服务或网页；您可能还希望确保用户能够执行所有事务。这可能会增加您的警报和监控系统的复杂性。
*   **仪表盘和报表**:仪表盘和报表可以给非技术用户提供很多有用的信息。
*   **什么样的应用适合你的需求**:如果你在一家较大的公司工作，他们很可能会有一个应用列表供你选择。但它不应该是一刀切的。您决定用来监控您的环境的应用应该适合您的目的，并得到参与项目的每个人的同意。
这就是普罗米修斯进来的地方。在本章中，我们将使用普罗米修斯作为监控解决方案，因为它被广泛采用，是开源的，并且可以免费使用。市场上还有许多其他免费和企业应用提供类似的监控，包括自托管应用，如 Nagios 和 SCOM，以及更新的基于订阅的服务，包括新遗物、相扑逻辑和数据狗。普罗米修斯是基于监控云上服务的特殊需要而构建的。它提供了领先于市场其他主要参与者的一流功能。
其他一些应用也提供日志收集和聚合，但是我们已经将其分配给了一个单独的应用，并将在下一章专门讨论 Docker 环境的日志管理。Prometheus 只专注于度量收集和监控，由于日志管理中有合适的免费和开源替代方案，因此它没有将日志管理作为其关注的一部分。
# 用普罗米修斯监测环境指标
普罗米修斯最初是由 SoundCloud 创建和开发的，因为他们需要一种方法来监控他们高度动态的容器环境，并且对当时的当前工具不满意，因为他们觉得它不适合他们的需求。普罗米修斯被开发为一种让 SoundCloud 不仅监控其容器，还监控运行其服务的底层托管硬件和编排的方式。
它的最初创建要追溯到 2012 年，从那以后，该项目一直是免费和开源的，并且是云原生计算基金会的一部分。它也被全球需要深入了解其云环境表现的公司广泛采用。
普罗米修斯的工作原理是从我们的系统中收集感兴趣的指标，并将其存储在本地磁盘上的时间序列数据库中。它通过抓取您正在从中收集数据的服务或应用提供的 HTTP 端点来实现这一点。
端点可以被写入应用中，以提供一个提供与应用或服务相关的度量的基本网络接口，也可以由导出器提供，该导出器将从服务或应用中获取数据，然后以普罗米修斯可以理解的形式公开它。
注意
本章多次提到 HTTP 端点，这可能会导致混淆。您将在本章后面看到，HTTP 端点是由服务或应用提供的非常基本的 HTTP 网页。正如您将很快看到的，这个 HTTP 网页提供了服务向普罗米修斯公开的所有度量的列表，还提供了存储在普罗米修斯时间序列数据库中的度量值。
普罗米修斯包括许多组件:
*   **普罗米修斯**:普罗米修斯应用执行度量的抓取和收集，并将它们存储在其时间序列数据库中。
*   **Grafana** :普罗米修斯二进制还包括一个基本的 web 界面，帮助你开始查询数据库。在大多数情况下，Grafana 还将被添加到环境中，以实现更具视觉吸引力的界面。它将允许创建和存储仪表板，以更容易的方式进行度量监控。
*   **出口商**:出口商为普罗米修斯提供从不同应用和服务收集数据所需的指标端点。在本章中，我们将启用 Docker 守护程序来导出数据并安装`cAdvisor`来提供我们系统上运行的特定容器的度量。
*   **警报管理器**:虽然本章没有介绍，`AlertManager`通常会与 Prometheus 一起安装，以便在服务关闭时触发警报，或者在您的环境中触发其他警报。
普罗米修斯还提供了一个基于网络的表达式浏览器，允许您查看和聚合您使用功能性 PromQL 查询语言收集的时间序列指标。这意味着您可以在收集数据时查看数据。表达式浏览器有点有限，但可以与 Grafana 集成，允许您创建仪表板、监控服务和`AlertManager`以允许您触发警报并在需要时得到通知。
Prometheus 易于安装和配置(您将很快看到)，并自行收集数据以允许您开始测试应用。
由于普罗米修斯的采用率和受欢迎程度，许多公司为其应用和服务创建了出口商。我们将在本章中给你一些出口商的例子。
现在是你弄脏手的时候了。在下面的练习中，您将在自己的系统上下载并运行普罗米修斯二进制文件，以开始监控服务。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 13.01:安装和运行普罗米修斯
在本练习中，您将下载并解压缩普罗米修斯二进制文件，启动应用，并探索普罗米修斯的网络界面和一些基本配置。您还将练习监控指标，例如向 Prometheus 接口发出的 HTTP 请求总数。
注意
截至撰写本书时，普罗米修斯的最新版本为 2.15.1 版。该应用的最新版本可在以下网址找到:https://prometheus.io/download/.
1.  找到要安装的普罗米修斯的最新版本。使用`wget`命令将压缩的归档文件带到您的系统中。您在命令中使用的网址可能与这里的不同，这取决于您的操作系统和您使用的普罗米修斯版本:
    ```
    wget https://github.com/prometheus/prometheus/releases/download/v2.15.1/prometheus-2.15.1.-amd64.tar.gz
    ```
2.  使用`tar`命令解压缩您在上一步下载的普罗米修斯档案。以下命令使用`zxvf`选项解压缩文件，然后提取档案和文件，输出详细信息:
    ```
    tar zxvf prometheus-2.15.1.-amd64.tar.gz
    ```
3.  该档案提供了一个完全创建的普罗米修斯二进制应用，准备启动。进入应用目录，查看目录中包含的一些导入文件:
    ```
    cd prometheus-2.15.1.-amd64
    ```
4.  List the files in the application directory using the `ls` command to look into the important files in our application:
    ```
    ls
    ```
    请注意输出，因为它看起来应该类似于下面的内容，其中`prometheus.yml`文件是我们的配置文件。`prometheus`文件是应用二进制文件，`tsdb`和数据目录是存储我们的时间序列数据库数据的地方:
    ```
    LICENSE    console_libraries    data    prometheus.yml    tsdb
    NOTICE    consoles    prometheus    promtool
    ```
    在前面的目录列表中，请注意`console_libraries`和`consoles`目录包含了用来查看我们将很快处理的普罗米修斯 web 界面的二进制文件。`promtool`目录包含了你可以用来和普罗米修斯一起工作的工具，包括一个配置检查工具来确保你的`prometheus.yml`文件是有效的。
5.  If there is no issue with your binary and the application is ready to run, you should be able to verify the version of Prometheus. Run the application from the command line using the `--version` option:
    ```
    ./prometheus --version
    ```
    输出应该如下所示:
    ```
    prometheus, version 2.15.1 (branch: HEAD, revision: 8744510c6391d3ef46d8294a7e1f46e57407ab13)
      build user:       root@4b1e33c71b9d
      build date:       20191225-01:12:19
      go version:       go1.13.5
    ```
6.  You won't be making any changes to your configuration file, but before you get started, make sure it has valid information for Prometheus. Run the `cat` command to view the content of the file:
    ```
    cat prometheus.yml 
    ```
    这里减少了输出中的行数。从以下输出可以看出，您的全局`scrap_interval`参数和`evaluation_interval`参数被设置为`15`秒:
    ```
    # my global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 
    15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. 
    The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).
    …
    ```
    如果您有时间查看一下`prometheus.yml`配置文件，您会注意到它分为四个主要部分:
    `global`:控制服务器的全局配置。这些配置包括`scrape_interval`，以了解其刮擦目标的频率，以及`evaluation_interval`，以控制其评估规则以创建时间序列数据和生成规则的频率。
    `alerting`:默认情况下，配置文件也会通过 AlertManager 设置告警。
    `rule_files`:这是普罗米修斯将定位额外规则加载的地方，作为其度量收集的一部分。`rule_files`指向存储规则的位置。
    `scrape_configs`:这些是普罗米修斯将要监控的资源。我们希望监视的任何其他目标都将被添加到配置文件的这一部分。
7.  Starting Prometheus is simply a matter of running the binary and specifying the configuration file you would like it to use with the `--config.file` command-line option. Run the following command to start Prometheus:
    ```
    ./prometheus --config.file=prometheus.yml
    ```
    几秒钟后，你应该有希望看到`"Server is ready to receive web requests."`的信息:
    ```
    …
    msg="Server is ready to receive web requests."
    ```
8.  Enter the URL `http://localhost:9090`. Prometheus provides an easy-to-use web interface. If the application has started up correctly, you should now be able to open a web browser on your system. You should have the expression browser presented to you, similar to the following screenshot.Although the expression browser doesn't look very impressive, it does have some good functionality out of the box. It is set up in three distinct sections.
    **主菜单**:屏幕顶部的主菜单，黑色背景，允许您通过`Status`下拉菜单查看额外的配置详细信息，使用`Alerts`选项向您显示警报历史，使用`Prometheus`和`Graph`选项将您带回主表情浏览器屏幕。
    **表达式编辑器**:这是顶部的文本框，我们可以在其中输入 PromQL 查询或者从下拉列表中选择一个指标。然后点击`Execute`按钮开始显示数据。
    **图形和控制台显示**:一旦您决定要查询什么数据，它将以表格格式显示在`Console`选项卡中，并以时间序列图形格式显示在`Graph`选项卡中，您可以使用`Add Graph`按钮在网页下方添加更多图形:
    ![Figure 13.1: Loading the expression browser for the first time ](img/B15021_13_01.jpg)
    图 13.1:首次加载表达式浏览器
9.  Click the `Status` drop-down menu. You'll get to see the following image with useful information, including `Runtime & Build Information` to display details of the version running, `Command-Line Flags` to run the application with, `Configuration`, which displays the current `config` file running, and `Rules` for alerting rules. The final two options in the drop-down menu show `Targets`, which you are currently scraping data from, and `Service Discovery`, which is showing automatic services that are being monitored:
    ![Figure 13.2: Status drop-down menu ](img/B15021_13_02.jpg)
    图 13.2:状态下拉菜单
10.  From the `Status` menu, select the `Targets` option and you will be able to see what Prometheus is scraping data from. You can also get the same result by going to the URL `HTTP:localhost:9090/targets`. You should see a screenshot similar to the following, as Prometheus is currently only monitoring itself:
    ![Figure 13.3: The Prometheus Targets page ](img/B15021_13_03.jpg)
    图 13.3:普罗米修斯目标页面
11.  单击目标端点。您将能够看到目标公开的指标。您现在可以看到普罗米修斯如何利用其拉架构从其目标中抓取数据。点击链接或打开浏览器，输入网址`http://localhost:9090/metrics`查看普罗米修斯指标端点。您应该会看到类似于下面的内容，显示了普罗米修斯暴露的所有度量点，然后被自己刮擦:
    ```
    # HELP go_gc_duration_seconds A summary of the GC invocation 
    durations.
    # TYPE go_gc_duration_seconds summary
    go_gc_duration_seconds{quantile="0"} 9.268e-06
    go_gc_duration_seconds{quantile="0.25"} 1.1883e-05
    go_gc_duration_seconds{quantile="0.5"} 1.5802e-05
    go_gc_duration_seconds{quantile="0.75"} 2.6047e-05
    go_gc_duration_seconds{quantile="1"} 0.000478339
    go_gc_duration_seconds_sum 0.002706392
    …