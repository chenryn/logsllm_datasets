### 支持 ARM 平台的区域

- **运行区域**
- **水印区域**
- **富操作系统 (Rich OS)**
- **ICE 运行时环境 (ICE Runtime Environment)**
  - ICE n
  - ...
  - ICE i
  - ...
  - ICE 1
- 富操作系统 (Rich OS)
- ICE i
- ICE n
  - ...
  - ICE i
  - ...
  - ICE 1
- TDC (64KB)
- TDC (64KB)

**图 6: 多个 (>2) ICE 的内存映射**

(a) 富操作系统正在运行  
(b) ICE i 正在运行

### B. 加载 TDC

与其它嵌入式系统类似，i.MX53 QSB 在上电后从 Boot ROM 中的代码开始执行。Boot ROM 代码的内存地址位于 0x00000000 和 0x0000FFFF 之间。i.MX53 QSB 提供了高保证启动 (High Assurance Boot, HAB)，以确保加载到处理器芯片中的镜像的真实性和完整性 [13], [22]。Boot ROM 从 Micro SD 卡中加载安全引导镜像，然后 HAB 使用 Boot ROM 代码中嵌入的 SHA-256 和 RSA 算法验证安全引导镜像的真实性和完整性。根证书的公钥哈希存储在一个名为 SRK HASH 的可编程熔丝 (eFUSE) 中，其值在 eFUSE 吹熔后不可更改。

本研究中的安全引导加载程序基于 Uboot [23] 开发，负责使用 Uboot 的 `mmc read` 命令将 TDC 加载到水印区域。TDC 的开发证书由根证书签名，并与 TDC 一起存储。SRK HASH 的值用于验证 TDC 的开发证书。只有当验证成功时，TDC 才会被加载。

### C. 系统状态切换

TDC 负责实现从富操作系统到某个 ICE 再回到富操作系统的安全切换。图 7 显示了当应用程序需要执行安全代码时的切换步骤。当一个应用程序在正常域的用户模式下运行时，必须调用 SMC 指令来从正常域切换到安全域中的 TDC；然而，SMC 是特权指令，应用程序不能直接调用。因此，我们在富操作系统中添加了一个 SMC 系统调用，允许应用程序调用 SMC 指令。该系统调用包含一个 SMC 指令，用于将请求从应用程序转发到 TDC。

**图 7: 富操作系统和 ICE 之间的切换**

1. **系统调用**
2. **调用 SMC**
3. **配置 ICE**
4. **进入 ICE**
5. **系统调用**
6. **调用 SMC**
7. **恢复富操作系统**
8. **进入富操作系统**

**应用:**
- 正常代码
- 安全代码
- 正常代码

当需要执行安全代码时，会触发 SMC 系统调用，使系统进入安全域中的 TDC，并调用监视器模式异常向量表中偏移为 0x8 的代码。通过验证 ICE 代码的签名来检查其完整性，签名验证算法（我们的原型中使用 RSA）在 TDC 中实现。开发证书的有效性由 SRK HASH eFUSE 保证。接下来，TDC 通过以下操作进行切换过程：

1. 备份富操作系统使用的转换表、异常向量表和相关寄存器。TDC 重写转换表以包含 ICE 的内存映射；将 ICE 的异常向量表的起始地址写入非安全向量基址寄存器。然后，只启用 ICE 需要的中断，其他中断被屏蔽。
2. 使用 RSA 算法验证安全代码的签名。将安全代码加载到 ICE 并使用 TDC 的私钥生成 ICE 执行的安全证明。
3. 切换回正常域以在 ICE 中运行安全代码。
4. 恢复富操作系统。在安全代码结束时，将再次调用 SMC 系统调用以切换到 TDC，TDC 清理 CPU 寄存器并恢复富操作系统。

通过 TZIC 中的中断控制，ICE 的执行不会被不必要的中断中断。所需的中断将在 ICE 的异常向量表中处理。由于富操作系统可能会劫持 SMC 系统调用来欺骗用户进入假的 ICE 以执行敏感事务，我们的原型在开发板上使用了一个仅由 TDC 控制的 LED 灯来通知用户是否有一个 ICE 正在运行。

### D. ICE 开发

我们的 ICE 原型实现了一些基本的库函数供安全代码调用，包括支持 RSA 签名和 SHA-1 哈希的自包含加密库、使用 LCD 触摸屏的用户界面以及基于 HUAWEI MC323 CDMA 无线电模块的网络接口 [21]。

ICE 代码在非安全主管模式下运行，允许在非安全用户模式下运行的代码通过系统调用调用系统函数。我们定义了五个编号从 1 到 5 的系统调用：(1) ICE 退出调用，(2) RSA 签名调用，(3) SHA-1 哈希调用，(4) 网络接口调用，(5) 用户界面调用。在这五个系统调用中，只有第一个 ICE 退出调用是任何 ICE 返回富操作系统所必需的。

ICE 退出调用实现为调用 SMC 指令以清理 ICE 的痕迹并恢复富操作系统。RSA 算法从开源库 PolarSSL [24] 移植。在我们的原型中，SHA-1 算法使用板上的硬件加速器 (SAHARA [13])。HUAWEI MC323 CDMA 无线电模块包括完整的 TCP/IP 栈，因此 ICE 代码可以通过蜂窝网络轻松地与远程服务器通信。无线电模块是一个独立的设备，其逻辑代码固定，部署在移动设备上后无法篡改。用户界面调用基于触摸屏驱动程序，在 800*480 像素屏幕上显示 RGB565 格式的图片。它可以渲染适合屏幕的任何文字和图片。当 ICE 运行时，一旦屏幕上有触摸，就会产生中断。触摸屏驱动程序捕获中断并读取触摸点的 X-Y 坐标。图 8 显示了在进入 ICE 之前要求用户输入密码的屏幕快照。在未来的工作中，我们将在 ICE 中支持更多的系统功能，如 openGL 库和 Wi-Fi 驱动程序。此外，第三方程序员和服务提供商可以开发更强大的 ICE。

**表 I: TrustICE 切换时间**

| 操作 | 加密 ICE (微秒) | 接口 ICE (微秒) |
| --- | --- | --- |
| 从富操作系统到 ICE | 527.77 | 10611.21 |
| 从 ICE 到富操作系统 | 783.47 | 782.96 |

从富操作系统到 ICE 的切换时间包括：(1) 退出富操作系统，(2) 加载和验证 ICE 代码，(3) 加载和验证安全代码，(4) 挂起富操作系统并配置 ICE，(5) 进入 ICE。切换时间的细分如表 II 所示。从富操作系统切换到加密 ICE 花费 0.5 毫秒，切换到接口 ICE 花费 10 毫秒。这是因为接口 ICE 具有更大的代码库，使得 TDC 在将其加载到内存时花费更多时间验证其完整性。我们使用 SHA-1 算法验证 ICE 代码和安全代码。切换时间会随着 ICE 和安全代码的代码大小增加而增加。但是，由于 ICE 在挂起时受到水印保护，如果我们不担心 ICE 在运行时被破坏，我们可以跳过验证 ICE 代码完整性的阶段。如果这样做，任何 ICE 的切换时间将具有相似的值。

**表 II: 时间细分：从富操作系统到 ICE**

| 操作 | 加密 ICE (微秒) | 接口 ICE (微秒) |
| --- | --- | --- |
| 退出富操作系统 | 5.84 | 5.93 |
| 验证安全代码 | 9.76 | 9.75 |
| 验证 ICE | 475.85 | 10559.37 |
| 配置 ICE | 35.05 | 34.89 |
| 进入 ICE | 1.27 | 1.27 |
| 总计 | 527.77 | 10611.21 |

在执行完安全代码后，系统可以从加密 ICE 切换到富操作系统，耗时 783.47 微秒，从接口 ICE 切换到富操作系统，耗时 782.96 微秒。切换时间的细分包括：(1) 退出 ICE，(2) 恢复富操作系统和 DMA，(3) 进入富操作系统。细分结果列于表 III 中。由于我们不需要执行昂贵的 SHA-1 操作，切换时间比从富操作系统切换到某个 ICE 要小得多。此外，不同 ICE 的切换时间几乎相同。总体而言，双向切换的时间都非常小，用户几乎察觉不到。

**表 III: 时间细分：从 ICE 到富操作系统**

| 操作 | 加密 ICE (微秒) | 接口 ICE (微秒) |
| --- | --- | --- |
| 退出 ICE | 0.49 | 0.48 |
| 恢复富操作系统 | 19.26 | 19.41 |
| 进入富操作系统 | 763.72 | 763.07 |
| 总计 | 783.47 | 782.96 |

### B. ICE、TDC 和富操作系统的性能比较

我们比较了系统分别在 ICE、TDC 和富操作系统下运行时的性能差异。首先，我们测量了从富操作系统到 ICE 的切换时间。对于加密 ICE，由于不需要中断，所有中断都被屏蔽。对于接口 ICE，只启用了 4 线电阻触摸屏的中断。

加密 ICE 的大小为 46,424 字节，接口 ICE 的大小为 1,050,892 字节，其中包括 1,041,832 字节的显示图片。通过压缩图片或选择低质量图片，可以进一步减小接口 ICE 的大小。我们使用 Cortex-A8 核心处理器中的性能监视器来计数 CPU 周期，然后通过乘以 1 ns/周期将周期转换为时间。我们重复实验 100 次并取平均值。

#### A. 切换时间

我们测量了从富操作系统到 ICE 的切换时间。