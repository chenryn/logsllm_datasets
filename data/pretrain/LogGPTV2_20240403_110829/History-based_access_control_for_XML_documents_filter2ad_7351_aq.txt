can has unlimited access to the machine. Therefore, additional mechanisms
are required to avoid or to detect these manipulations. We also discuss these
mechanisms, which are similar to the mechanisms that we use in our security
architecture in Chapter 6.
The combination of server-side access control and client-side access con-
trol is referred to as Usage Control [PS04]. Usage control protects the infor-
mation at any time during its entire life cycle. To protect the information
while it resides on the client, the same mechanisms are required as in client-
side access control. Also usage control adds additional aspects to access
control, namely provisions and obligations [HBP05]. Provisions are condi-
tions that must be satisﬁed before access is granted, while obligations must
be fulﬁlled after access was granted. We discuss both concepts as well as
related work in the area of usage control in Section 8.3.
115
116
CHAPTER 8. RELATED WORK
8.1 Server-side Access Control
Server-side access control is the oldest form of access control. Here, access is
only controlled when the information is released. After it has been copied,
there is no more access control. Our model performs usage control, since
documents are protected during their entire life-cycle. But since server-side
access control is also one aspect of usage control, we discuss related work in
the area of server-side access control in the following.
8.1.1 “Secure and Selective Dissemination of XML Doc-
uments”
The model proposed in [BF02] supports selective access deﬁnition to por-
tions of XML documents based on their semantic structure. Access can be
deﬁned for diﬀerent nodes of the document together with propagation op-
tions, which specify whether the tree below the node in question is included.
Regarding these aspects, the model is very similar to our work. However, the
supported operations and their semantics are diﬀerent, since our approach is
able to diﬀerentiate between objects with diﬀerent histories. The support of
data transfers diﬀers from our work, since the model supports only a push
of diﬀerent views of a document to diﬀerent sets of users, whereas our model
allows us to deﬁne which elements of a document may be reused in other
documents. In addition to this, [BF02] uses a self-deﬁned language to spec-
ify the objects in an access control rule. This self-deﬁned language is less
expressive than XPath, since its expressions have a ﬁxed structure and do
not allow the arbitrary composition of conditions.
Moreover, in [BF02], the smallest unit of protection is an XML element,
which allows to deﬁne access in a ﬁne-grained manner. Our model goes a
step beyond this by deﬁning smaller units of protection, namely the text
blocks (see also Section 4.3.3). As a consequence, our model allows even
more ﬁne-grained access control.
Summing up, our model can express conditions on the documents history,
which is not possible in [BF02]. This enables a wide range of additional
policies that can be formulated as access control rules with our model.
Similar approaches to [BF02] can be found in [DCPS00, DdVPS02, MTK03,
GB02], where [MTK03] and [GB02] consider access control rules for the read
operation only. All these approaches consider the XML element as the small-
est unit of protection, in contrast to our approach, which is capable of han-
dling parts of the text content. None of these models is capable of deﬁning
access depending on the history of a document.
8.1. SERVER-SIDE ACCESS CONTROL
117
8.1.2 “X-GTRBAC: An XML-Based Policy Speciﬁca-
tion Framework and Architecture for Enterprise-
Wide Access Control”
In [BGBJ05], Bhatti et al. describe their framework “X-GTRBAC”, which is
designed for specifying access to XML documents. They refer to their work as
a framework instead of an model, since some aspects are left unspeciﬁed and
need to be speciﬁed before the framework can be applied. One such aspect is
the set of operations. X-GTRBAC is based on GTRBAC [JBLG05], which is
build upon on TRBAC [BBF01]. TRBAC itself is designed as an extension
to RBAC [SCFY96].
TRBAC has extended RBAC with so-called temporal constraints, which
are constraints that depend on the current time. TRBAC is limited to specify
temporal constraints only on the role activation and deactivation, but not
on the user-role or permission-role assignments, which both is needed to
deﬁne roles more dynamically. Finally, X-GTRBAC enhances GTRBAC
with support for XML in two aspects. X-GTRBAC deﬁnes access for XML
documents and also uses XML to denote this.
In contrast to our model, which focusses on how to specify the objects
of the system, X-GTRBAC has a strong focus on the subjects of the system
and how to dynamically change the roles of the system. Concerning these
aspects, X-GTRBAC uses a similar approach as our model. For example,
concerning the user-role assignment, the set of users of a role can be deﬁned
by a condition using the properties of users. This is similar to what we do
with objects in access control rules, where we specify the applicable objects
by their properties. We use the current content of objects and the infor-
mation stored in the history to deﬁne conditions for objects in our model.
X-GTRBAC uses properties of users like their age, their experience level,
their qualiﬁcations or the region where they live. For example, it can be
deﬁned that a user must have a PhD and must be older than 35 years to act
in the role Design Manager.
Another aspect that is diﬀerent from our model is that X-GTRAC uses a
self-deﬁned language for specifying conditions. For that purpose, X-GTRAC
uses the language X-Grammar , which follows the notation from the Backus-
Naur-Form (BNF). In addition to regular BNF, X-Grammar allows to specify
tags with attributes. This addition makes it possible to automatically trans-
late speciﬁcations in X-Grammar to an XML Schema.
In our model, we
use XPath as basic language to formulate conditions, since its clearly de-
ﬁned semantics makes the interpretation of the resulting rules unambiguous.
Moreover, XPath has a large predeﬁned set of built-in functions that are
118
CHAPTER 8. RELATED WORK
required for access control. In contrast to this, in the X-GTRAC framework
every required function has to be speciﬁed and implemented.
8.2 Client-side Access Control
Our security architecture of Chapter 6 and the User Interface of our archi-
tecture perform client-side access control. This is related to Digital Rights
Management (DRM), which is an approach to prevent illegal distribution
of paid content. In contrast to DRM, our security architecture focuses on
the protection of conﬁdential documents. Both have in common, that access
control mechanisms are also applied on the side of the client, instead of only
using access control on the server that stores the information. Therefore, we
discuss approaches for digital right management in Section 8.2.1.
The client can be manipulated easily, since it is under the control of the
user, who can has unlimited access to the machine. Therefore, additional
mechanisms are required to avoid or to detect these manipulations. We also
discuss these mechanisms, which are similar to the mechanisms that we used
in our security architecture in Chapter 6. As a consequence, we discuss
mechanisms to detect unauthorized modiﬁcations in Section 8.2.2.
A special aspect of this topic is Integrity Reporting, which describes pro-
tocols how to report the system state to an attester. In our security architec-
ture, we use an enhanced protocol for Integrity Reporting [STRE06], which
is robust against a special type of attack. Accordingly, we discuss related
work in the area of integrity reporting in Section 8.2.3.
8.2.1 Digital Rights Management
CIPRESS [IGD01] builds a local quarantine zone by encrypting all local ﬁles
with a machine speciﬁc key, which can optionally be stored on a tamper resis-
tant hardware module, the Elkey crypto board [CI06]. CIPRESS oﬀers only
coarse grained access rights, since there is no access control on application
level. Moreover, the security of CIPRESS is based on the assumption that
the client system is not compromised, since it oﬀers no mechanism to detect
or to handle a compromised system state.
Microsoft’s Rights Management Services [Cor03] oﬀer much more ﬁne-
grained access rights compared to CIPRESS. These access rights are embed-
ded in a signed usage license, are transferred together with the document, and
are enforced by a local client software, which is assumed to be not compro-
mised. Again, an unauthorized modiﬁcation of the client system is neither
8.2. CLIENT-SIDE ACCESS CONTROL
119
detected nor handled. Moreover, the encryption keys are stored together
with the encrypted documents without further protection.
In the Display-Only File Server (DOFS) architecture [YC04], all docu-
ments remain on the server and are accessed by executing the corresponding
applications on the server. Only the display content of these applications
is transferred to the client using windows terminal services. DOFS oﬀers
only coarsely grained access rights, since there is no access control on the
application level. The approach is limited to usage scenarios with a perma-
nent connection to the DOFS server. Moreover, a modiﬁed client is neither
detected nor handled.
Besides these three approaches, there are many others such as [Inc04] or
[Aut01]. All of these lack mechanisms to detect a compromised system state,
which could lead to an unauthorized information transfer. The mechanisms
speciﬁed by the Trusted Computing Group (TCG) provide a possible solution
for the described problem. We discuss these mechanisms in the next section.
8.2.2 Detecting a Compromised System State
In the following, we list some related research projects, which make use of the
TCG mechanisms to detect and handle unauthorized system modiﬁcations.
We use some of their results for our security architecture in Chapter 6.
TrustedGRUB [App06] is a bootloader that uses the TPM to extend in-
tegrity measurements to the bootloader and the OS kernel. Perseus [PRS+01]
and Turaya [LP06] are microkernel-based trusted operating systems that can
be combined with TrustedGRUB to establish a trusted computing base (for
details see [Pea02]). The Bear/Enforcer project [MSWM03] includes a TPM-
enabled Linux Security Module (LSM) to compare hash values of applications
with reference values. A similar approach is used in the Integrity Measure-
ment Architecture (IMA) [SZJvD04] developed by IBM, which performs in-
tegrity measurements for all started processes to enable a remote attestation.
The concepts provided in [Rei04] are very similar to our security architecture,
since they determine access rights of the client depending on the result of
the remote attestation. In contrast to security architecture, this work does
not focus on the protection of XML documents.
8.2.3
Integrity Reporting
Since the speciﬁcations of the TCG are still in progress, there are still many
open issues. For example, there is a large number of work focusing on the
concepts of trusted computing. One such work is [SZJvD04], which presents
a comprehensive prototype based on trusted computing technologies.
In
120
CHAPTER 8. RELATED WORK
particular, it is an architecture for integrity measurement, which contains an
integrity reporting protocol.
Terra [GRB03] is an approach for remote attestation.
It supports the
integrity measurement of virtual machines providing runtime environment
for sets of processes. The approach does not build up on TPM and does not
provide a protocol for integrity reporting to remote entities, which are the
main diﬀerences to our work.
Our security architecture is based on the assumption that a trusted oper-
ating system measures all executed code. This concept is also referred to as
binary attestation, because the binary ﬁles of the executables are measured.
In contrast to that, [HCF04, SS04] focus on semantic attestation based on at-
testing the behavior of software components. However, the idea of attesting
properties instead of binaries is very appealing, but the problem is to deﬁne
and measure these properties. There is still a lot of research required until
the concept of property-based attestation can be used in practice. Never-
theless, once all remaining problems are solved, the protocols of our security
architecture can easily be enriched with this approach.
The authors of [BLP05] propose the integration of key exchange pro-
tocols into Direct Anonymous Attestation (DAA) [BCC04] in peer-to-peer
networks, which is basically similar to the attestation protocol of our secu-
rity architecture. However, the objectives of the integration of key exchange
protocols are diﬀerent, since [BLP05] aims at building stable identities in
peer-to-peer networks. Additionally, the presented approach does not feature
integrity reporting and can not be directly applied to remote attestation.
Another related work is [GPS06] which aims at building secure tunnels
between endpoints. But this approach adds a new platform property certiﬁ-
cate, which links the attestation identity key to the TLS certiﬁcate. More-
over, the presented approach focuses on server attestation, which needs in
turn an additional trusted certiﬁcate authority that oﬀers the platform prop-
erty certiﬁcate. In contrast to that, our approach focuses on client attestation
without an additional trusted certiﬁcate authority, since we directly bind the
cryptographic channel to the attestation identity key.
8.3 Usage Control
Usage control combines server-side access control with client-side access con-
trol. As a consequence, the data is protected during its entire life-cycle. In
addition to regular access control, usage control also adds the aspects of pro-
visions and obligations [HBP05] to access control. A provision is a condition
that must be satisﬁed before access is granted, whereas an obligation is a
8.3. USAGE CONTROL
121
condition that must be fulﬁlled after access has been granted. For example,
a provision can be that the user must sign a contract that deﬁnes how the
access data must be used, e.g., a non-disclosure agreement. However, only
the signing of the agreement can be enforced technically. Whether the user
behaves as he signed in the contract is up to him. Another example for a
provision is the requirement to record the operation in a log ﬁle. An example
for an obligation is to delete the accessed data after a certain time or to only
use the data in a speciﬁed way, e.g., for a speciﬁed purpose.
Our model does neither include provisions nor obligations, because we
believe this will distract from our intended focus. Furthermore, the addi-
tion would cause an increased complexity and would reduce the clarity of
our model. Finally, as stated in [HBP05], obligations and provisions are an
optional concept of usage control, which can be added in case it is needed.
Nevertheless, both concepts can be included in our model by adding corre-
sponding ﬁelds to our access control rules (see also Section 4.6).
In the following, we discuss related work in the area of usage control. We
will present diﬀerent approaches and compare them with our model.
8.3.1 “Relevancy-based Access Control”
Iwaihara et al. allow to deﬁne access based on the version relationship of
documents and elements among each other [ICAW05]. The refer to their
approach as “Relevancy-based Access Control”, which is similar to our ap-
proach in some aspects. They refer to the approach as being relevancy-based,
since they capture how versions of a document depend on each other. As a
consequence, some parts of another document version of a document can be
relevant for the current version. In the following, we explain how [ICAW05]
captures which elements are relevant for each other.
The version relationship of documents and elements among each other
is captured by two graphs: the delta version graph and the element version
graph. The delta version graph describes the relation of diﬀerent document
versions among each other, where each edge denotes the delta between two
versions. A delta is a non-empty set of the operations deﬁned by the model.
The element version graph describes the relations among the elements of the
diﬀerent versions of documents. There are three possible relations, which are
denoted by edges labeled with the letters ’r’, ’u’ and ’n’. An edge labeled
with ’r’ states that an element was replaced by another element, whereas an
edge labeled with ’u’ denotes that the content of an element was updated,
where an update can represent any kind of modiﬁcation. Finally, an edge
labeled with ’n’ (no change) either denotes that no operations was applied
on an element within a document or that the element is the result of a copy
122
CHAPTER 8. RELATED WORK
operation from another document.
They deﬁne six operations including copy, which is similar to our copy
operation, but can only be applied to elements or subtrees and not to the
text content of an element or parts of its text content.
In contrast to our model, the modiﬁcation of the content of an element
is modeled by the operation update only, which describes that the entire
content of a node is replaced with a new content.
Iwaihara et al. only
consider read and write operations and do not deﬁne a copy operation as
part of their privileges. Consequently, they can not express which transfers
among documents are permitted or denied. This is a big advantage of our
model, since we can deﬁne which data transfers are allowed or denied between
diﬀerent documents.
Moreover, they do not have the concept of splitting copied elements to
have diﬀerent history information for parts from diﬀerent sources. Doing so,
Iwaihara et al. loose important information, which cannot be used for access
control.
To deﬁne the objects of a policy tuple Iwaihara et al. extend XPath
by a set of functions providing access to the element version graph. These
functions enable the traversing of the edges of the element version graph and
oﬀer a similar functionality as our predecessor, successor and copies functions.
This approach allows to express a subset of the policies that we can express.
As we record more details, we can formulate many policies which can not be
expressed in [ICAW05] language. For example, if the text of an element is
composed by copying text from diﬀerent sources, our model captures every
detail of this process and allows to express policies based on any of that
information.
In [ICAW05], this process is only described with an update
operation and all further details are not considered. Especially, the do not
diﬀerentiate whether information was created from scratch or whether text