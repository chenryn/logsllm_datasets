### 优化后的文本

#### 索引和扫描方法

**索引版本信息**
- 由于索引中没有版本信息，需要检查虚拟机（VM）中的堆页（HEAP PAGE），以确认是否存在脏数据。如果存在脏数据，则需要回表。

**索引扫描类型**
- **Index Scan**: 直接使用索引进行扫描。
- **Index Skip Scan**: 跳过部分索引进行扫描。
- **Bitmap Scan**: 使用位图进行扫描，适用于多条件查询。

**参考链接**
- [Index Skip Scan 示例](https://github.com/digoal/blog/blob/master/201803/20180323_03.md)
- [性能提升示例](https://github.com/digoal/blog/blob/master/201804/20180402_01.md)

**性能优化**
- 通过优化，查询时间从150毫秒降低到了0.256毫秒。
- 示例表创建和插入语句：
  ```sql
  CREATE TABLE t (
      sex INT,
      name TEXT
  );
  INSERT INTO t SELECT random(), md5(random()::text) FROM generate_series(1, 10000000);
  CREATE INDEX idx_t ON t(sex, name);
  SELECT * FROM t WHERE name = 'abc';
  ```

**扫描方法**
- **Bitmap Index Scan**: 使用位图索引进行扫描。
- **Sort Heap Block ID**: 对堆块ID进行排序。
- **Sorted Block ID Scan**: 按排序后的块ID进行扫描。
- **Recheck Index Cond**: 重新检查索引条件。

**优化器参考指标**
- **相关性**: 优化器会根据相关性选择最优的扫描方法。
- **IO放大问题消除**: 通过优化减少不必要的I/O操作。

**SQL示例**
- [离散扫描示例](https://github.com/digoal/blog/blob/master/201804/20180402_01.md)
  ```sql
  EXPLAIN (ANALYZE, VERBOSE, TIMING, COSTS, BUFFERS) 
  SELECT * FROM corr_test WHERE c2 BETWEEN 1 AND 10000000;
  ```

#### 合并扫描与CTID扫描

**合并扫描**
- [合并扫描示例](https://github.com/digoal/blog/blob/master/201702/20170221_02.md)

**CTID扫描**
- **单行扫描**:
  ```sql
  EXPLAIN (ANALYZE, VERBOSE, TIMING, COSTS, BUFFERS) 
  SELECT * FROM car WHERE ctid = '(0,1)';
  ```
- **多行扫描**:
  ```sql
  EXPLAIN (ANALYZE, VERBOSE, TIMING, COSTS, BUFFERS) 
  SELECT * FROM car WHERE ctid = ANY(ARRAY['(0,1)'::tid, '(0,2)'::tid, '(100,1)'::tid]);
  ```

**应用场景**
- **Update/Delete Limit**: 限制更新或删除的数量。
- **Parallel Big Update/Delete**: 并行批量更新或删除。
- [更多应用场景](https://github.com/digoal/blog/blob/master/201608/20160827_01.md)

#### 任意字段组合查询

**设计思路**
1. **每个字段都创建一个索引**:
   - 等值、范围、排序字段: B-Tree
   - 空间、范围字段: GiST
   - 多值列、全文检索、JSON、模糊查询字段: GIN
2. **等值查询列**: 联合 RUM/GIN (等值、包含、相交)
3. **非等值查询列**:
   - 范围、排序字段: B-Tree
   - 空间、范围字段: GiST
   - 多值列、全文检索、JSON、模糊查询字段: GIN
4. **组合等值、不等值查询列**:
   - Prefix + Value Array 化: RUM/GIN
   - 字典化: RUM/GIN

**示例**
- [PostgreSQL 任意字段组合查询](https://github.com/digoal/blog/blob/master/201903/20190320_02.md)
- [大宽表任意字段组合查询索引选择](https://github.com/digoal/blog/blob/master/201808/20180803_01.md)
- [ADHoc 查询 (RUM 索引加速)](https://github.com/digoal/blog/blob/master/201805/20180518_02.md)
- [空间应用](https://github.com/digoal/blog/blob/master/201711/20171107_48.md)

#### 参考资料

- [多维组合-任意维度组合搜索案例](https://github.com/digoal/blog/blob/master/201903/20190320_02.md)
- [MySQL 手册](https://www.mysqltutorial.org/)
- [PG 管理、开发规范](https://github.com/digoal/blog/blob/master/201609/20160926_01.md)
- [PG 手册](https://www.postgresql.org/docs/current/index.html)
- [GIS 手册](http://postgis.net/docs/manual-3.0/)

#### 一期开课计划 (PG+MySQL联合方案)

- **2019.12.30 19:30**: RDS PG产品概览，如何与MySQL结合使用
- **2019.12.31 19:30**: 如何连接PG，GUI，CLI的使用
- **2020.1.3 19:30**: 如何压测PG数据库、如何瞬间构造海量测试数据
- **2020.1.6 19:30**: MySQL与PG对比学习(面向开发者)
- **2020.1.7 19:30**: 如何将MySQL数据同步到PG（DTS）
- **2020.1.8 19:30**: PG外部表妙用 - mysql_fdw, oss_fdw（直接读写MySQL数据、冷热分离）
- **2020.1.9 19:30**: PG应用场景介绍 - 并行计算，实时分析
- **2020.1.10 19:30**: PG应用场景介绍 - GIS
- **2020.1.13 19:30**: PG应用场景介绍 - 用户画像、实时营销系统
- **2020.1.14 19:30**: PG应用场景介绍 - 多维搜索
- **2020.1.15 19:30**: PG应用场景介绍 - 向量计算、图像搜索
- **2020.1.16 19:30**: PG应用场景介绍 - 全文检索、模糊查询
- **2020.1.17 19:30**: PG 数据分析语法介绍
- **2020.1.18 19:30**: PG 更多功能了解：扩展语法、索引、类型、存储过程与函数。如何加入PG技术社群

#### 本课程习题

- PG支持哪几种索引？
- PG支持哪几种扫描方法？
- 多值列应该使用什么索引？
- 多个字段任意组合搜索应该使用什么类型的索引？
- 空间包含、相交、距离排序等查询应该使用什么类型的索引？
- 多个字段等值组合查询，可以使用哪几种索引加速？

#### 技术社群

- **PG技术交流钉钉群 (3600+人)**