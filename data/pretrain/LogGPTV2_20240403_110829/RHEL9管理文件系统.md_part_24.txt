    ``` screen
    # mount --bind /media /mnt
    ```
4.  现在可以验证 `/media`{.literal} 和 `/mnt`{.literal} 共享内容，但
    `/media`{.literal} 中的挂载内容没有出现在 `/mnt`{.literal}
    中。例如，如果 CD-ROM 驱动器包含非空介质，并且
    `/media/cdrom/`{.literal} 目录存在，请使用：
    ``` screen
    # mount /dev/cdrom /media/cdrom
    # ls /media/cdrom
    EFI  GPL  isolinux  LiveOS
    # ls /mnt/cdrom
    #
    ```
5.  还可以验证 `/mnt`{.literal} 目录中挂载的文件系统没有反映在
    `/media`{.literal} 中。例如，如果插入了使用 `/dev/sdc1`{.literal}
    设备的非空 USB 闪存，且 `/mnt/flashdisk/`{.literal}
    目录存在，请使用：
    ``` screen
    # mount /dev/sdc1 /mnt/flashdisk
    # ls /media/flashdisk
    # ls /mnt/flashdisk
    en-US  publican.cfg
    ```
:::
:::
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#creating-a-shared-mount-point-duplicate_sharing-a-mount-on-multiple-mount-points}创建共享挂载点副本 {.title}
:::
这个流程将挂载点复制为共享挂载。您稍后挂载到原始目录或副本下的文件系统始终反映在其它文件系统中。
::: orderedlist
**流程**
1.  从原始挂载点创建虚拟文件系统(VFS)节点：
    ``` screen
    # mount --bind original-dir original-dir
    ```
2.  将原始挂载点标记为共享：
    ``` screen
    # mount --make-shared original-dir
    ```
    或者，要更改所选挂载点和其下的所有挂载点的挂载类型，请使用
    `--make-rshared`{.literal} 选项,而不是 `--make-shared`{.literal}。
3.  创建副本：
    ``` screen
    # mount --bind original-dir duplicate-dir
    ```
:::
::: example
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#idm139895598836304}
**例 29.2. 将 /media 重复到 /mnt 作为共享挂载点**
::: example-contents
要使 `/media`{.literal} 和 `/mnt`{.literal} 目录共享相同的内容：
::: orderedlist
1.  从 `/media`{.literal} 目录创建 VFS 节点：
    ``` screen
    # mount --bind /media /media
    ```
2.  将 `/media`{.literal} 目录标记为共享：
    ``` screen
    # mount --make-shared /media
    ```
3.  在 `/mnt`{.literal} 中创建副本：
    ``` screen
    # mount --bind /media /mnt
    ```
4.  现在，可以验证 `/media`{.literal} 中的挂载是否也出现在
    `/mnt`{.literal} 中。例如，如果 CD-ROM 驱动器包含非空介质，并且
    `/media/cdrom/`{.literal} 目录存在，请使用：
    ``` screen
    # mount /dev/cdrom /media/cdrom
    # ls /media/cdrom
    EFI  GPL  isolinux  LiveOS
    # ls /mnt/cdrom
    EFI  GPL  isolinux  LiveOS
    ```
5.  同样，还可以验证 `/mnt`{.literal} 目录中挂载的任何文件系统是否反映在
    `/media`{.literal} 中。例如，如果插入了使用 `/dev/sdc1`{.literal}
    设备的非空 USB 闪存，且 `/mnt/flashdisk/`{.literal}
    目录存在，请使用：
    ``` screen
    # mount /dev/sdc1 /mnt/flashdisk
    # ls /media/flashdisk
    en-US  publican.cfg
    # ls /mnt/flashdisk
    en-US  publican.cfg
    ```
:::
:::
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#creating-a-slave-mount-point-duplicate_sharing-a-mount-on-multiple-mount-points}创建从挂载点副本 {.title}
:::
这个流程将挂载点复制为 `slave`{.literal}
挂载类型。您稍后挂载在原始挂载点下的文件系统将反映在副本中，而不是反过来。
::: orderedlist
**流程**
1.  从原始挂载点创建虚拟文件系统(VFS)节点：
    ``` screen
    # mount --bind original-dir original-dir
    ```
2.  将原始挂载点标记为共享：
    ``` screen
    # mount --make-shared original-dir
    ```
    或者，要更改所选挂载点和其下的所有挂载点的挂载类型，请使用
    `--make-rshared`{.literal} 选项,而不是 `--make-shared`{.literal}。
3.  创建副本，并将其标记为 `slave`{.literal} 类型：
    ``` screen
    # mount --bind original-dir duplicate-dir
    # mount --make-slave duplicate-dir
    ```
:::
::: example
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#idm139895586931632}
**例 29.3. 将 /media 复制到 /mnt 作为从挂载点**
::: example-contents
这个示例演示了如何使 `/media`{.literal} 目录的内容也出现在
`/mnt`{.literal} 中，但 `/mnt`{.literal} 目录中的任何挂载都不会反映在
`/media`{.literal} 中。
::: orderedlist
1.  从 `/media`{.literal} 目录创建 VFS 节点：
    ``` screen
    # mount --bind /media /media
    ```
2.  将 `/media`{.literal} 目录标记为共享：
    ``` screen
    # mount --make-shared /media
    ```
3.  在 `/mnt`{.literal} 中创建副本，并将其标记为 `slave`{.literal} ：
    ``` screen
    # mount --bind /media /mnt
    # mount --make-slave /mnt
    ```
4.  验证 `/media`{.literal} 中的挂载是否也出现在 `/mnt`{.literal}
    中。例如，如果 CD-ROM 驱动器包含非空介质，并且
    `/media/cdrom/`{.literal} 目录存在，请使用：
    ``` screen
    # mount /dev/cdrom /media/cdrom
    # ls /media/cdrom
    EFI  GPL  isolinux  LiveOS
    # ls /mnt/cdrom
    EFI  GPL  isolinux  LiveOS
    ```
5.  还要验证 `/mnt`{.literal} 目录中挂载的文件系统是否没有反映在
    `/media`{.literal} 中。例如，如果插入了使用 `/dev/sdc1`{.literal}
    设备的非空 USB 闪存，且 `/mnt/flashdisk/`{.literal}
    目录存在，请使用：
    ``` screen
    # mount /dev/sdc1 /mnt/flashdisk
    # ls /media/flashdisk
    # ls /mnt/flashdisk
    en-US  publican.cfg
    ```
:::
:::
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#preventing-a-mount-point-from-being-duplicated_sharing-a-mount-on-multiple-mount-points}防止挂载点重复 {.title}
:::
这个流程将挂载点标记为 unbindable，因此不能在另一个挂载点中复制它。
::: itemizedlist
**流程**
-   要将挂载点的类型改为 unbindable 挂载，请使用：
    ``` screen
    # mount --bind mount-point mount-point
    # mount --make-unbindable mount-point
    ```
    或者，要更改所选挂载点和其下的所有挂载点的挂载类型，请使用
    `--make-runbindable`{.literal} 选项，而不是
    `--make-unbindable`{.literal} 选项。
    重复此挂载的任何后续尝试都会失败，并显示以下错误：
    ``` screen
    # mount --bind mount-point duplicate-dir
    mount: wrong fs type, bad option, bad superblock on mount-point,
    missing codepage or helper program, or other error
    In some cases useful info is found in syslog - try
    dmesg | tail  or so
    ```
:::
::: example
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#idm139895478867136}
**例 29.4. 防止 /media 被复制**
::: example-contents
::: itemizedlist
-   要防止 `/media`{.literal} 目录被共享，请使用：
    ``` screen
    # mount --bind /media /media
    # mount --make-unbindable /media
    ```
:::
:::
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页
:::
:::
:::
[]{#assembly_persistently-mounting-file-systems_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_persistently-mounting-file-systems_managing-file-systems.html#assembly_persistently-mounting-file-systems_managing-file-systems}第 30 章 永久挂载文件系统 {.title}
:::
作为系统管理员，您可以永久地挂载文件系统以配置不可移动的存储。
::: section
::: titlepage
# []{#assembly_persistently-mounting-file-systems_managing-file-systems.html#con_the-etc-fstab-file_assembly_persistently-mounting-file-systems}/etc/fstab 文件 {.title}
:::
这部分描述了控制文件系统永久挂载点的 `/etc/fstab`{.literal}
配置文件。使用 `/etc/fstab`{.literal} 是永久挂载文件系统的建议方法。
`/etc/fstab`{.literal}
文件中的每一行定义了文件系统的挂载点。它包括六个字段，用空格分开：
::: orderedlist
1.  由持久属性标识的块设备或其 `/dev`{.literal} 目录的路径。
2.  挂载该设备的目录。
3.  该设备的文件系统。
4.  文件系统的挂载选项。选项 `defaults`{.literal}
    表示在启动时使用默认选项挂载分区。本节还识别
    `x-systemd.选项`{.literal} 格式的 `systemd`{.literal} 挂载单元选项。
5.  `dump`{.literal} 工具的备份选项。
6.  `fsck`{.literal} 工具的检查顺序。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
RHEL 9 中删除了用于备份文件系统的 `转储`{.literal} 实用程序，并可在 EPEL
9 软件仓库中找到。
:::
::: example
[]{#assembly_persistently-mounting-file-systems_managing-file-systems.html#idm139895582926736}
**例 30.1. `/etc/fstab`{.literal} 中的 `/boot`{.literal} 文件系统**
::: example-contents
::: informaltable
  块设备                                                  挂载点              File system       选项                   Backup          检查
  ------------------------------------------------------- ------------------- ----------------- ---------------------- --------------- ---------------
  `UUID=ea74bbec-536d-490c-b8d9-5b40bbd7545b`{.literal}   `/boot`{.literal}   `xfs`{.literal}   `defaults`{.literal}   `0`{.literal}   `0`{.literal}
:::
:::
:::
`systemd`{.literal} 服务从 `/etc/fstab`{.literal}
中的条目自动生成挂载单元。
::: itemizedlist
**其他资源**
-   `fstab(5)`{.literal} 手册页
-   `systemd.mount(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#assembly_persistently-mounting-file-systems_managing-file-systems.html#adding-a-file-system-to-etc-fstab_assembly_persistently-mounting-file-systems}在 /etc/fstab 中添加文件系统 {.title}
:::
这个流程描述了如何在 `/etc/fstab`{.literal}
配置文件中为文件系统配置持久性挂载点。
::: orderedlist
**流程**
1.  找到文件系统的 UUID 属性：
    ``` screen
    $ lsblk --fs storage-device
    ```
    例如：
    ::: example
    []{#assembly_persistently-mounting-file-systems_managing-file-systems.html#idm139895594443280}