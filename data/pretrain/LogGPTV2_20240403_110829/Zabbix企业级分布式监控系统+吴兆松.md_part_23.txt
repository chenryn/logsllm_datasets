### 7.5 SNMP监控方式

#### 7.5.1 SNMP概述
SNMP（Simple Network Management Protocol）即简单网络管理协议，用于管理基于IP的网络设备。它包括两个主要部分：管理进程和被管理设备。

**管理端与被管理端的通信方式有以下三种：**
- 被管理端向管理端发送数据。
- 管理端向被管理端请求获取数据。
- 管理端向被管理端请求改变数据。

基于TCP/IP的网络管理包含以下三个组成部分：
- **管理信息库 (MIB)**：包含所有代理进程中可查询和修改的参数。
- **管理信息结构 (SMI)**：关于MIB的一套公用结构和表示符号。
- **简单网络管理协议 (SNMP)**：管理进程和代理进程之间的通信协议。

#### 7.5.2 SNMP协议的运行
SNMP协议在OSI参考模型的应用层（第七层）运行，支持多种操作，主要有以下几种基本操作：
- **Get操作**：NMS使用该操作从Agent获取一个或多个参数值。
- **GetNext操作**：NMS使用该操作从Agent获取一个或多个参数的下一个参数值。
- **Set操作**：NMS使用该操作设置Agent一个或多个参数值。
- **Response操作**：Agent返回一个或多个参数值，作为前面三种操作的响应。
- **Trap操作**：Agent主动发出的操作，通知NMS某些事件的发生。

SNMP协议在执行前四种操作时，使用UDP协议，采用161端口发送报文；执行Trap操作时，设备使用UDP协议，采用162端口发送报文。由于收发采用了不同的端口号，所以一台设备可以同时作为Agent和NMS。

#### 7.5.3 SNMP协议原理

##### 1. SNMPv1和SNMPv2c实现机制
SNMPv1和SNMPv2c的实现机制基本相同，SNMPv2c丰富了错误码并新增了GetBulk操作。下面以在SNMPv1环境执行Get、GetNext和Set操作为例，介绍其实现机制。

###### （1）Get操作
NMS想要获取被管理设备MIB节点`sysName`的值，使用“public”为可读团体名，过程如下：
1. NMS给Agent发送Get请求，请求报文的主要字段设置为：Version字段的值为1，Community字段的值为“public”，PDU的Variablebindings中Name1字段的值为`sysName.0`。
2. Agent给NMS发送Get响应，说明是否获取成功。如果成功，则Response PDU的Variablebindings中Value1字段的值为设备的名字（如`Agent010-H3C`）；如果获取失败，则在Error status字段中填上出错的原因，在Error index字段中填上出错的位置信息。

###### （2）GetNext操作
NMS想要获取被管理设备MIB节点`sysName`的下一个节点`sysLocation`的值，过程如下：
1. NMS给Agent发送GetNext请求，请求报文的主要字段设置为：Version字段的值为1，Community字段的值为“public”，PDU的Variablebindings中Name1字段的值为`sysName.0`。
2. Agent给NMS发送GetNext响应。如果成功，则Response PDU的Variablebindings中Name1字段的值为`sysName.0`的下一个节点`sysLocation.0`，Value1字段的值为（如`BeijingChina`）；如果获取失败，则在Error status字段中填上出错的原因，在Error index字段中填上出错的位置信息。

###### （3）Set操作
NMS想要设置被管理设备MIB节点`sysName`的值为`Device01`，使用“private”为可写团体名，过程如下：
1. NMS给Agent发送Set请求，请求报文的主要字段设置为：Version字段的值为1，Community字段的值为“private”，PDU的Variablebindings中Name1字段的值为`sysName.0`，Value1字段的值为`Device01`。
2. Agent给NMS发送Set响应，说明是否设置成功。如果设置成功，则Response PDU的Variablebindings中Value1字段的值为设备的新名字（如`Device01`）；如果设置失败，则在Error status字段中填上出错的原因，在Error index字段中填上出错的位置信息。

###### （4）Trap操作
当设备发生某些异常需要通知NMS时，Agent会主动发出Trap报文。例如，设备某端口网线被拔出，Agent发送`linkDown`的Trap消息给NMS。Version字段的值为1，Community字段的值为“public”，PDU中enterprise字段的取值为`sysObjectID.0`（如`enterprises.25506`），Generic trap字段的值为`linkDown`，Variablebindings字段携带接口相关的信息。

##### 2. SNMPv3实现机制
SNMPv3操作的实现机制与SNMPv1和SNMPv2c基本相同，其主要区别在于SNMPv3新增加了认证、加密和解密的处理。下面以SNMPv3使用认证和加密方式执行Get操作为例，描述其实现机制。

1. NMS首先发送不带任何认证和加密参数的Get请求，Flags字段设置为0x4，以获取`contextEngineID`、`contextName`、`AuthoritativeEngineID`、`AuthoritativeEngineBoots`、`AuthoritativeEngineTime`等相关参数的值。
2. Agent解析消息，发送Report报文，并携带上述相关参数的值。
3. NMS再次给Agent发送Get请求，请求报文的主要字段设置为：Version字段的值为3，将步骤②获取到的参数值填入相应的字段，PDU的Variablebindings中Name1字段的值为`sysName.0`，并且根据配置的认证算法计算出`AuthenticationParameters`，使用配置的加密算法计算出`PrivacyParameters`，并对PDU数据进行加密。
4. Agent首先对消息进行认证，认证通过后对PDU报文进行解密。解密成功后，则获取`sysName.0`对象的值，并将Response PDU的Variablebindings中Value1字段的值填为设备的名字（如`Agent010`）。如果认证、解密失败或者获取参数值失败，则在Error status字段中填上出错的原因，在Error index字段中填上出错的位置信息。最后对PDU进行加密，设置`contextEngineID`、`contextName`、`AuthoritativeEngineID`、`AuthoritativeEngineBoots`、`AuthoritativeEngineTime`、`AuthenticationParameters`、`PrivacyParameters`等参数，发送响应报文。

#### 7.5.4 MIB简介

##### 1. MIB的含义
任何一个被管理的资源都表示为一个对象，称为被管理的对象。MIB是被管理对象的集合，定义了被管理对象的一系列属性，如对象的名称、访问权限和数据类型等。每个Agent都有自己的MIB。MIB也可以看作是NMS对对象进行读/写操作的接口，从而达到管理和监控设备的目的。NMS、Agent和MIB之间的关系如图7-13所示。

##### 2. MIB视图
MIB视图是MIB的子集合，配置Agent时，用户可以将团体名/用户名与MIB视图绑定，从而限制NMS能够访问的MIB对象。用户可以配置MIB视图内的对象为excluded或included。excluded表示当前视图不包括该MIB子树的所有节点；included表示当前视图包括该MIB子树的所有节点。

##### 3. OID和子树
MIB是以树状结构进行存储的。树的节点表示被管理对象，可以用从根开始的一条路径唯一地识别，这条路径就称为OID。如图7-14所示，管理对象`system`可以用一串数字`{1.3.6.1.2.1.1}`唯一标识，这串数字就是`system`的OID。子树可以用该子树根节点的OID来标识。

##### 4. 子树掩码
子树掩码可以和子树OID共同确定一个视图的范围。子树掩码用十六进制数格式表示，转化为二进制数格式后，每个比特位对应OID中的一个小节，其中：
- 1表示精确匹配，即要访问的节点OID与MIB对象子树OID对应小节的值必须相等。
- 0表示通配，即要访问的节点OID与MIB对象子树OID对应小节的值可以不相等。

#### 7.5.5 SNMP的相关术语
表7-1列出了SNMP相关的术语及其描述。

| 名称 | 描述 |
|------|------|
| SNMP | Simple Network Management Protocol（简单网络管理协议），是一个标准的用于管理基于IP网络设备的协议。 |
| MIB | Management Information Base（管理信息库），定义代理进程中所有可被查询和修改的参数。 |
| SMI | Structure of Management Information（管理信息结构），定义SNMP中使用到的ASN.1类型和语法，并定义SNMP中使用到的类型、宏、符号等。SMI用于后续协议的描述和MIB的定义。每个版本的SNMP都可能定义自己的SMI。 |
| ASN.1 | Abstract Syntax Notation One（抽象语法定义），用于定义语法的正式语言，在SNMP中定义SNMP的协议数据单元PDU和管理对象MIB的格式。SNMP只使用了ASN.1中的一部分，而且使用ASN.1的语言特性定义了一些自定义类型和类型宏，这些组成了SMI。 |
| PDU | Protocol Data Unit（协议数据单元），它是网络中传送的数据包。每一种SNMP操作在物理上都对应一个PDU。 |
| NMS | Network Management System（网络管理系统，又名网络管理站，简称“管理站"），是SNMP的总控机，提供统一的用户界面访问支持SNMP的设备，一般提供UI界面，并有统计、分析等功能，是网管系统的总控制台。NMS是网络管理操作的发起者。 |
| Agent | 是SNMP的访问代理，简称“代理”，为设备提供SNMP能力，负责设备与NMS的通信。 |
| Proxy | 代理服务器，对实现不同协议的设备进行协议转换，使非IP协议的设备也能被管理。 |
| Trap | 是由设备主动发出的告警数据，用于提示重要状态的改变。 |
| BER | Basic Encoding Rule（基本编码规格），描述如何将ASN.1类型的值编码为字符串的方法。它是ASN.1标准的一部分。BER编码将数据分成TLV三部分：T为Tag的缩写，是类型标识；L为Length的缩写，是标识类型的长度；V为Value的缩写，是标识数据内容。按照TLV的顺序对数据进行编码，生成字节流。SNMP使用BER将SNMP的操作请求和应答编码后进行传输，并用于接收端进行解码。 |

#### 7.5.6 配置Zabbix以SNMP方式监控
使用SNMP可以监控路由器、交换机、打印机、UPS或其他开启SNMP的设备。如果要支持SNMP的监控方式，需要在编译Zabbix-Server源码时带上`--with-net-snmp`参数。

##### 1. 配置被监控端的SNMP
以Linux为例，配置方法如下：
```sh
# 安装net-snmp
yum -y install net-snmp

# 备份snmpd.conf文件
mv /etc/snmpd/snmpd.conf /etc/snmpd/snmpd.conf.bak

# 编辑snmpd.conf文件
vim /etc/snmpd/snmpd.conf

# 添加以下配置
com2sec mynetwork 192.168.0.240 public_monitor
com2sec mynetwork 127.0.0.1 public
group MyRoGroup v2c mynetwork
access MyRoGroup "" any noauth prefix all none none
view all included .1 80

# 启动并重启snmpd服务
chkconfig snmpd on
service snmpd restart
```

如果是Windows的SNMP监控方式，配置方法稍有不同。如果设备不是服务器，而是路由器、交换机、防火墙等其他硬件设备，则需要通过命令行或Web界面去配置SNMP。

##### 2. 测试能否获取SNMP数据
在Zabbix-Server上测试，语句如下：
```sh
snmpwalk -v 2c -c public 127.0.0.1
snmpwalk -v 2c -c public 127.0.0.1 SNMPv2-MIB::sysUpTime.0
```
如果没有`snmpwalk`命令，请安装`net-snmp-utils`（类RHEL系统）：
```sh
yum install net-snmp-utils
```

##### 3. 添加SNMP的Items
添加Items时，可以在Host中，也可以在Template中完成，如图7-16所示。

##### 4. Items SNMP各参数说明
图7-16中各参数的说明如表7-2所示。

| 名称 | 作用 |
|------|------|
| Name | Items的名称。 |
| Type | 选择Type为SNMPv2 agent。 |
| Key | 必须为一个唯一的字符串，这个Key是后面配置触发器时要用到的。 |
| SNMP OID | 填写OID的值。 |
| SNMP community | Community的值，默认是一个变量（macro），可以设置为一个实际的参数或值。 |
| Port | SNMP的端口。 |

##### 5. 配置SNMP community的Macro
前面我们配置的SNMP community是`public_monitor`，而默认的community值为`{SSNMP_COMMUNITY}`，在全局变量中，`{SSNMP_COMMUNITY}`的值为`public`，所以需要对`{$SNMP_COMMUNITY}`的变量进行重新定义。

在Template中定义Macros，如图7-17所示。

在Host中定义Macros，如图7-18所示。

配置Items后，可以按需配置Graphs和Trigger等，其方法与Agent方式相同。

### 7.6 IPMI监控方式

#### 1. IPMI的概念
IPMI（Intelligent Platform Management Interface）即智能平台管理接口，原本是Intel架构中企业系统的周边设备所采用的一种工业标准，后来成为业界通用的标准。用户可以利用IPMI监视服务器的物理特征，如温度、电压、风扇工作状态、电源供应以及机箱入侵等。

#### 2. IPMI的特性
IPMI独立于CPU BIOS和OS外自行运行，允许管理者在缺少操作系统、系统管理软件或受监控的系统关机但有接电源的情况下仍能远程管理服务器硬件。IPMI也能在操作系统启动后活动，与系统管理功能一并使用时还能提供加强功能。IPMI只定义架构和接口格式成为标准，具体操作时可能会有所不同。

#### 3. 配置Zabbix-Server监控IPMI
步骤如下：
1. 若要支持IPMI，必须在安装并编译zabbix_server程序时带上`--with-openipmi`编译参数。
2. 服务器端配置StartIPMIPollers参数，默认参数值为0，需修改为大于0的参数，即可开启对IPMI的支持，如这里将改为5，表示启动IPMI线程为5个。
   ```sh
   sed -i '/# StartIPMIPollers=0/aStartIPMIPollers=5' zabbix_server.conf
   service zabbix-server restart
   ```

在Zabbix中，对IPMI的支持是通过获取IPMI中sensor的参数获取数据。Zabbix-Server在获取IPMI监控数据的时候，zabbix_server.conf开启DebugLevel=4，会添加Addedsensor字符的日志。程序代码在源码的src/zabbix_server/poller/checks_ipmi.c中。

Zabbix中IPMI的设计文档网址如下：
https://www.zabbix.org/wiki/Docs/specs/ZBxNExT-300

#### 4. Zabbix自带的IPMI模板
Zabbix默认的IPMI模板如图7-19所示。

Key的设置如图7-20所示。默认的IPMI模板中Key值有限，在某些硬件中，还有其他更多的IPMI参数。