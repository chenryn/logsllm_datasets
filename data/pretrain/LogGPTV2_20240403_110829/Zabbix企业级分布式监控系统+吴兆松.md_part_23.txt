-other-(1Item）
trapper
Dec22nd,201311:37:54AM
trapper work is ok
图7-7
另一点需要注意，就是怎样把数据发送给Zabbix-Server？前面是用
zabbix_sender命令手工发送的，如何让其自动上传数据呢？在Linux系统中，可
以通过定时任务来实现自动发送，或者是第三方程序来调用zabbixsender发送
数据。
通过上面的学习，我们知道了zabbix_sender是一个程序，其程序是由zabbix
发行版自带的。在实际的环境中，我们完全可以根据自己的需要来写一个，与自
已的业务程序相结合使用，具体内容请读者参考14.2节。
7.5SNMP监控方式
7.5.1SNMP概述
SNMP是SimpleNetworkManagementProtocol的缩写形式，即简单网络管理
协议。简单网络管理包括两部分：管理进程和被管理设备。
管理端和被管理端的通信方式有如下三种。
·被管理端向管理端发送数据。
180
---
## Page 197
第7章监控方式剖析
·管理端向被管理端请求获取数据。
·管理端向被管理端请求改变数据。
基于TCP/IP的网络管理包含以下三个组成部分。
·管理信息库（managementInformationBase，MIB）：包含所有代理进程的
可被查询和修改的参数。
·管理信息结构（Stucture of Management Information，SMI）：关于MIB 的
一套公用结构和表示符号。
●简单网络管理协议（Simple Network ManagementProtocol，SNMP）：管理
进程和代理进程之间的通信协议。
7.5.2SNMP协议的运行
SNMP协议在OSI参考模型的应用层（第七层）运行，支持多种操作，主要
有以下几种基本操作。
·Get操作：NMS使用该操作从Agent获取一个或多个参数值。
·GetNext操作：NMS 使用该操作从Agent获取一个或多个参数的下一个参
数值。
·Set操作：NMS使用该操作设置Agent一个或多个参数值。
·Response操作：Agent返回一个或多个参数值。该操作是前面三种操作的
响应。
·Trap 操作：Agent主动发出的操作，通知NMS 有某些事情发生。
SNMP协议在执行前四种操作时，使用UDP协议，采用161端口发送报文；
执行Trap操作时，设备使用UDP协议，采用162端口发送报文。由于收发采用
了不同的端口号，所以一台设备可以同时作为Agent和NMS。
7.5.3SNMP协议原理
1.SNMPv1和SNMPv2c实现机制
SNMPv1和SNMPv2c的实现机制基本相同，SNMPv2c丰富了错误码，新增
了GetBulk操作。下面以在SNMPv1环境执行Get、GetNext和Set操作为例，介
绍SNMPv1和SNMPv2c的实现机制。
（1）Get操作（见图7-8)
NMS想要获取被管理设备MIB节点sysName的值（sysName对象在允许访
问的视图内），使用“public”为可读团体名，过程如下。
①NMS 给Agent发送Get请求，请求报文的主要字段将被设置为：Version
字段的值为1，Community字段的值为 public，PDU的Variablebindings 中Namel
181
---
## Page 198
Zabbix企业级分布式监控系统
字段的值为sysName.0。
②Agent 给NMS 发送Get 响应，说明是否获取成功。如果成功，则 Response
PDU的Variablebindings中Valuel字段的值为设备的名字（比如Agent010-H3C）；
如果获取失败，则在Error status 字段中填上出错的原因，在Error index中填上出
错的位置信息。
请求获取sysName节点的值
Agent获取sysName的值，并响应NMS
NMS
Aqen
图7-8
（2）GetNext操作（见图7-9）
NMS想要获取被管理设备MIB节点sysName的下一个节点sysLocation的值
体名，过程如下：
①NMS给Agent发送GetNext请求，请求报文的主要字段将被设置为：
Version字段的值为1，Community字段的值为public，PDU的Variablebindings
中Namel字段的值为sysName.0。
②Agent给NMS 发送GetNext响应。如果成功，则Response PDU的Variable
bindings中Name1字段的值为sysName.0的下一个节点sysLocation.0，Valuel字
段的值为（比如BeijingChina）：如果获取失败，则在Error status字段中填上出错
的原因，在Errorindex中填上出错的位置信息。
请求获取sysName下一个节点的值
Agent获取sysLocation的值，并响应NMS
NMS
Agent
图7-9
（3）Set操作（见图7-10）
NMS想要设置被管理设备MIB节点sysName的值为DeviceO1，使用“private”
为可写团体名，过程如下。
①NMS 给Agent发送Set请求，请求报文的主要字段将被设置为：Version
字段的值为1，Community字段的值为private，PDU的Variable bindings 中Namel
字段的值为sysName.0，Value1字段的值为Device01。
②Agent 给NMS发送Set响应，说明是否设置成功。如果设置成功，则
ResponsePDU的Variablebindings中Valuel字段的值为设备的新名字（比如
182
---
## Page 199
第7章监控方式剖析
Device01）：如果设置失败，则在Error status字段中填上出错的原因，在Errorindex
字段中填上出错的位置信息。
NMS要求设置sysName节点的值为Device01
Agent设置sysName的值为Device01，并响应NMS
Agent
NMS
图7-10
（4）Trap操作（见图7-11）
当设备发生某些异常需要通知NMS时，Agent会主动发出Trap报文。例如，
设备某端口网线被拔出，Agent发送linkDown的Trap消息给NMS。Version字段
的值为1，Community字段的值为public，PDU中enterprise字段的取值为
sysObjectID.0（比如为enterprises.25506），Generic trap字段的值为linkDown,
Variablebindings字段携带接口相关的信息。
发送linkDown的trap消息，报文携带接口相关信息
NMS
Agent
图7-11
2.SNMPv3实现机制
SNMPv3操作的实现机制与SNMPv1和SNMPv2c基本相同，其主要区别在
于SNMPv3新增加了认证、加密和解密的处理。下面以SNMPv3使用认证和加密
方式执行Get操作为例，描述其实现机制，如图7-12所示，过程如下。
①NMS首先发送不带任何认证和加密参数的Get请求，Flags字段设置为
Ox4，以获取 contextEngineID、contextName、AuthoritativeEngineID、Authoritative
EngineBoots、AuthoritativeEngineTime等相关参数的值。
②Agent解析消息，发送Report报文，并携带上述相关参数的值。
③NMS 再次给Agent发送Get请求，请求报文的主要字段将被设置为：
Version字段的值为3，将步骤②获取到的参数值填入相应的字段，PDU的Variable
bindings中Name1字段的值为sysName.0，并且根据配置的认证算法计算出
AuthenticationParameters，使用配置的加密算法计算出PrivacyParameters，并使用
配置的加密算法对PDU数据进行加密。
④Agent 首先对消息进行认证，认证通过后对PDU报文进行解密。解密成
功后，则获取 sysName.0对象的值，并将 Response PDU 的Variable bindings 中
Valuel字段的值填为设备的名字（比如Agent010）。如果认证、解密失败或者获
183
---
## Page 200
Zabbix企业级分布式监控系统
取参数值失败，则在Error status字段中填上出错的原因，在Error index字段中填
上出错的位置信息。最后对PDU进行加密，设置contextEngineID、contextName、
AuthoritativeEngineID、AuthoritativeEngineBoots、AuthoritativeEngineTime
AuthenticationParameters、PrivacyParameters等参数，发送响应报文。
Get请求获取SecurtyParameters参数
返回securityParameters参数值
使用获取的参数对消息鉴别、数据加密
发送Get请求，获取sysName的值
如果securityParameters参数合法，对消息鉴别、数据解密
NMS
获取sysName的值，响应NMS
图7-12
7.5.4MIB简介
1.MIB的含义
任何一个被管理的资源都表示为一个对象，称为被管理的对象。MIB是被管
理对象的集合，它定义了被管理对象的一系列属性：对象的名称、对象的访问权
限和对象的数据类型等。每个Agent都有自己的MIB。MIB也可以看作是NMS
对象进行读/写操作，从而达到管理和监控设备的目的。NMS、Agent和MIB之间
的关系如图7-13所示。
Get/Set请求
VIIE
NMS
Get/Set响应
图7-13
2.MIB视图
MIB视图是MIB的子集合，配置Agent时，用户可以将团体名/用户名与MIB
视图绑定，从而限制NMS能够访问的MIB对象。用户可以配置MIB视图内的对
象为excluded或included。excluded表示当前视图不包括该MIB子树的所有节点：
included表示当前视图包括该MIB子树的所有节点。
3.OID和子树
MIB是以树状结构进行存储的。树的节点表示被管理对象，它可以用从根开
始的一条路径唯一地识别，这条路径就称为OID。如图7-14所示，管理对象system
可以用一串数字{1.3.6.1.2.1.1}唯一标识，这串数字就是system的OID。
184
---
## Page 201
第7章监控方式剖析
子树可以用该子树根节点的OID来标识。如以private为根节点的子树的OID
为private的OID———{1.3.6.1.4}。
(o
iso(1)
joint-iso-ccit(2)
org(3)
dod(6)
internet(1)
directory(1)
mgmt(2)
experimental(3)
private(4)
mib-2(1)
1.3.6.1.2.1
eaterprises(1)
system(1) interface(2)
at(3)
ip(4)
(）dpn (9)d(s）du
图7-14
4.子树掩码
子树掩码可以和子树OID共同确定一个视图的范围。子树掩码用十六进制数
格式表示，转化成二进制数格式后，每个比特位对应OID中的一个小节，其中：
·1表示精确匹配，即要访问的节点OID与MIB对象子树OID对应小节的
值必须相等。
·O表示通配，即要访问的节点OID与MIB对象子树OID对应小节的值可
以不相等。
例如，子树掩码为0xDB（二进制数为11011011），子树OID为1.3.6.1.6.1.2.1，
则对应关系如图7-15所示，所确定的视图就包括子树0ID为1.3.*.1.6.*.2.1（*表
示可为任意数字）子树下的所有节点。
子树OID
3  6 
子树掩码
图7-15
说明：
·若子树掩码的位数目大于子树OID的小节数，则匹配时，子树掩码的第一
位与子树OID 的第一小节对齐，第二位与第二小节对齐，依此类推，子树
掩码中多出的位将被忽略。
·若子树掩码的位数目小于子树OID的小节数，则匹配时，子树掩码的第一
位与子树OID的第一小节对齐，第二位与第二小节对齐，依此类推，子树
掩码中不足的位将自动设置为1。
●如果没有指定子树掩码，则使用默认的子树掩码（全1)。
185
---
## Page 202
Zabbix企业级分布式监控系统
7.5.5SNMP的相关术语
SNMP的相关术语如表7-1所示。
表7-1
名称
描述
SimpleNetworkManagementProtocol（简单网络管理协议），是一个标准的用于管理基于IP网络
SNMP
设备的协议
MIB
Management InformationBase（管理信息库），定义代理进程中所有可被查询和修改的参数
StructureofManagementInformation（管理信息结构），定义SNMP中使用到的ASN.1类型和语
SMI
法，并定义SNMP中使用到的类型、宏、符号等。SMI用于后续协议的描述和MIB的定义。每个
版本的SNMP都可能定义自己的SMI
AbstractSyntaxNotationOne（抽象语法定义），用于定义语法的正式语言，在SNMP中定义SNMP
ASN.1
的协议数据单元PDU和管理对象MIB的格式。SNMP只使用了ASN.1中的一部分，而且使用ASN.1
的语言特性定义了一些自定义类型和类型宏，这些组成了SMI
ProtocolDataUnit（协议数据单元），它是网络中传送的数据包。每一种SNMP操作在物理上都
PDU
对应一个PDU
NetworkManagementSystem（网络管理系统，又名网络管理站，简称“管理站"），是SNMP的总
NMS
控机，提供统一的用户界面访问支持SNMP的设备，一般提供UI界面，并有统计、分析等功能，
是网管系统的总控制台。NMS是网络管理操作的发起者
Agent
是SNMP的访问代理，简称“代理”，为设备提供SNMP能力，负责设备与NMS的通信
Proxy
代理服务器，对实现不同协议的设备进行协议转换，使非IP协议的设备也能被管理
Trap
是由设备主动发出的告警数据，用于提示重要状态的改变
BasicEncodingRule（基本编码规格），描述如何将ASN.1类型的值编码为字符串的方法。它是
ASN.1标准的一部分。BER编码将数据分成TLV三部分：T为Tag的缩写，是类型标识：L为Length
BER
的缩写，是标识类型的长度；V为Value的缩写，是标识数据内容。按照TLV的顺序对数据进行编
码，生成字节流。SNMP使用BER将SNMP的操作请求和应答编码后进行传输，并用于接收端进
行解码
7.5.6配置Zabbix以SNMP方式监控
使用SNMP可以监控路由器、交换机、打印机、UPS或者是其他开启SNMP
的设备，如果要支持SNMP的监控方式，需要Zabbix-Server在源码编译的时候带
上with-net-snmp参数，语句如下。
shell./configure --with-net-snmp
1.配置被监控端的SNMP
以Linux为例，语句如下。
186
---
## Page 203
第7章监控方式剖析
shell# yum -y install net-snmp
shell#mv /etc/snmpd/snmpd.conf
/etc/snmpd/snmpd.conf.bak
shell# vim/etc/snmpd/snmpd.conf
com2sec mynetwork 192.168.0.240 pub1ic_monitor
com2sec mynetwork 127.0.0.1 public
group MyRoGroup v2cmynetwork
access MyRoGroup "" any noauth prefix all none none
view all included.1 80
shell# chkconfig snmpd on
shell# service snmpd restart
如果是Windows的SNMP监控方式，配置方法稍有不同。
如果设备不是服务器，而是路由器、交换机、防火墙等其他硬件设备，则需
要通过命令行或者Web界面去配置SNMP。
2.测试能否获取SNMP数据
在Zabbix-Server上测试，语句如下。
shell# snmpwalk -v 2c -c public 127.0.0.1
Shell# snmpwalk -v 2c -c public 127.0.0.1 SNMPv2-MIB::sysUpTime.0
DISMAN-EVENT-MIB::sysUpTimeInstance=Timeticks:(166696) 0:27:46.96
如果没有 snmpwalk命令，请安装net-snmp-utils（类RHEL系统），语句如下。
shell# yum install net-snmp-utils
3.添加SNMP的Items
添加Items时，可以在Host中，也可以在Template中完成，如图7-16所示。
Name
Devicename
Type
SNMPv2aqent
KeysysName
SNMPOID
SNMPv2-MIB::SysName.0
SNN
nityi
(SSNMP_COMMUNITY)
Port
Type of informatior
Characte
Update interval (in sec)
3600
Flexibleintervals
Interval
Period
Action
No flexible intervals defined.
New flexible interval Interval(in sec)
50Period1-7,00:00-24:00
Add
Keep history (in days)]
？
Showvalue
Asis
show
New application
Applications
图7-16
187
---
## Page 204
Zabbix企业级分布式监控系统
4.ItemsSNMP各参数说明
图7-16中各参数的说明如表7-2所示。
表7-2
名
称
作
用
Name
Items的名称
Type
选择Type为SNMPv2agent
Key
必须为一个唯一的字符串，这个Key是后面配置触发器时要用到的
SNMPOID
填写OID的值
SNMPcommunity
community的值，默认是一个变量（macro），可以设置为一个实际的参数或值
Port
SNMP的端口
5.配置SNMPcommunity的Macro
前面我们配置的SNMPcommunity是publib_monitor，而默认的community
值为{SSNMPCOMMUNITY}，在全局变量中，SSNMPCOMMUNITY}的值为
public，所以需要对{$SNMP_COMMUNITY}的变量进行重新定义。
在Template中定义Macros，如图7-17所示。
CONFTGURATION OFTEMPLATES
Applications（1）Items（5)Iriqqers（0)Graphs(0)Screens（0)
Template
Linked templatesMacros
Macro
Value
($SNMP_COMMUNITY)
Remove
Add
Fullclon
图7-17
在Host中定义Macros，如图7-18所示。
*Host list Host:win7 MonitoredZLeAoplications(9)Items(97)Triqqers(13）Graphs (37）Discovery rules(2)Web
HostTemplatesIpMIMacros
Host inventory
Macra
Value
($SNMP_COMMUNITY)
public_monitor
Remoy
Add
Save
Full clon
Delete
图7-18
配置Items后，可以按需配置Graphs和Trigger等，其方法与Agent方式相同。
188
---
## Page 205
第7章监控方式剖析
7.6IPMI监控方式
1.IPMI的概念
IPMI（Intelligent Platform Management Interface）即智能平台管理接口，原
本是Intel架构中企业系统的周边设备所采用的一种工业标准，后来成为业界通用
的标准。
用户可以利用IPMI监视服务器的物理特征，如温度、电压、电扇工作状态、
电源供应以及机箱入侵等。
2.IPMI的特性
IPMI独立于CPUBIOS和OS外自行运行，允许管理者在缺少操作系统、系
统管理软件或受监控的系统关机但有接电源的情况下仍能远端管理服务器硬件。
IPMII也能在操作系统启动后活动，与系统管理功能一并使用时还能提供加强功
能，IPMI只定义架构和接口格式成为标准，具体操作时可能会有所不同。
关于IPMI的更多信息，请读者自行参考相关书籍。
3.配置Zabbix-Server监控IPMI
步骤如下。
①若要支持IPMI，必须在安装并编译zabbix_server 程序时带上--with-
openipmi编译参数。
②服务器端配置StartIPMIPollers参数，默认参数值为O，需修改为大于0
的参数，即可开启对IPMI的支持，如这里将改为5，表示启动IPMI线程为5个。
shell# sed -i '/# StartIPMIPollers=0/aStartIPMIPollers=5' zabbix
_server.conf
shell# service zabbix-server restart
在Zabbix中，对IPMI的支持是通过获取IPMI中sensor的参数获取数据。
Zabbix-Server在获取IPMI 监控数据的时候，zabbix_server.conf开启DebugLevel=4，
会添加Addedsensor字符的日志。程序代码在源码的src/zabbix_server/poller/
checks_ipmi.c中，如下：
zabbix_log(LOG _LEVEL_DEBUG, "Added sensor: host:'%s:%d' id_type:%d id
_sz:%d id:'%s'"
";s%. :aueu Itng (,s%1) x%x0:ad (,s%;) xgx0:adA buTpea "
h->ip,h->port,
s->id_type, s->id_sz, sensor_id_to_str(id_str, sizeof(id_s
tr), s->id, s->id_type, s->id_sz),
s->reading_type, ipmi_sensor_get_event_reading_type_string
(s->sensor), s->type,
ipmi_sensor_get_sensor_type_string(s->sensor), full_name);
189
---
## Page 206
Zabbix企业级分布式监控系统
Zabbix中IPMI的设计文档网址如下。
https://www.zabbix.org/wiki/Docs/specs/ZBxNExT-300
4.Zabbix自带的IPMI模板
Zabbix默认的IPMI模板如图7-19所示。
TemplateIPMIIntel SR1530
Applications (3) Items (8)Tniaqers(11) Graphs(2)Screens (0) Discovery (0) Web (0)
Temolate IPMI Intel SR1630
Applications (3) Items (11) Iriqqers(21) Graphs (2) Screens (0) Discovery (0) Web (0)
图7-19
Key的设置如图7-20所示。
默认的IPMI模板中Key值有限，在某些硬件中，还有其他更多的IPMI参数。