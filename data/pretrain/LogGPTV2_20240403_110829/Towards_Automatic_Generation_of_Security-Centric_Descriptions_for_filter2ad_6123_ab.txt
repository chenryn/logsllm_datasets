with pattern nodes. This will be further discussed in Section 4.
3.3 SBG of Motivating Example
Figure 4 presents an SBG of the motivating example. It shows
that the app ﬁrst obtains the user’s phone number (getLine1Number())
and service provider name (getSimOperatorName()), then en-
codes the data into a format string (format(String,byte[])),
and ﬁnally sends the data to network (write(byte[])).
All APIs here are called after the user has clicked a GUI com-
ponent, so they share the same entry point, OnClickListener
.onClick. This indicates that these APIs are triggered by user.
The sensitive APIs, including getLine1Number(), getSim-
OperatorName() and write(byte[]), are predominated by a
UI-related condition. It checks whether the clicked component is a
Button object of a speciﬁc name. There exist two security impli-
cations behind this information: 1) the app is usually safe to use,
without leaking the user’s phone number; 2) a user should be cau-
tious when she is about to click this speciﬁc button, because the
subsequent actions can directly cause privacy leakage.
The encoding operation, format(String,byte[]), takes a con-
stant format string as the parameter. Such a string will later be used
Android AppgetDeviceId{}startRecording{}sendTextMessage{}getDeviceIdstartRecordingsendTextMessage{}{}getDeviceIdstartRecordingsendTextMessage{}Behavior Graph GenerationSubgraph Mining & Graph CompressionNatural Language GenerationSecurity-Centric DescriptionsAlgorithm 1 Condition Extraction for Sensitive APIs
SG ← Supergraph
Set ← null
Setapi ← {sensitive API statements in the SG}
for api ∈ Setapi do
Setpred ← GetConditionalPredecessors(SG,api)
for pred ∈ Setpred do
for ∀var deﬁned and used in pred do
DDG ← BackwardDataﬂowAnalysis(var)
Setcond ← ExtractCondition(DDG, var)
Set ← Set ∪ {}
end for
end for
end for
output Set as a set of  pairs
Figure 4: An example SBG
to compose the target URL, so it is an important clue to understand
the scenario in which the privacy-related data is used.
3.4 Graph Generation
To generate an SBG, we have implemented a static analysis tool,
built on top of Soot [8], in 22K lines of code.
To extract API data dependencies and constant parameters, we
perform context-sensitive, ﬂow-sensitive, and interprocedural data-
ﬂow analysis. In theory, we take the same approach as the prior
works [9,24,34,40]. Our analysis ﬁrst considers the dataﬂow within
individual program “splits” and then conducts inter-split analysis
with respect to Android Activity/Service lifecycles. Notice that our
analysis does not support implicit dataﬂow at this point.
We use the algorithm in prior work [40] to discover entry points.
We perform callgraph analysis while taking asynchronous calls into
consideration. Thus, the identiﬁed entry points can faithfully reﬂect
whether an API is triggered by a user action.
Condition Reconstruction. We then perform both control-ﬂow
and dataﬂow analyses to uncover the triggering conditions of sen-
sitive APIs. All conditions, in general, play an essential role in se-
curity analysis. However, we are only interested in certain trigger
conditions for our work. This is because our goal is to generate hu-
man understandable descriptions for end users. This implies that an
end user should be able to naturally evaluate the produced descrip-
tions, including any condition information. Hence, it is pointless if
we generate a condition that cannot be directly observed by a user.
Consequently, our analysis is only focused on three major types
1) User Interface.
of conditions that users can directly observe.
An end user actively communicates with the user interface of an
app, and therefore she directly notices the UI-related conditions,
such as a click on a speciﬁc button. 2) Device status. Similarly, a
user can also notice the current phone status, such as WIFI on/off,
screen locked/unlocked, speakerphone on/off, etc. 3) Natural envi-
ronment. A user is aware of environmental factors that can impact
the device’s behavior, including the current time and geolocation.
The algorithm for condition extraction is presented in Algorithm 1.
This algorithm accepts a supergraph SG as the input and produces
Set as the output. SG is derived from callgraph and control-
ﬂow analyses; Set is a set of  pairs, each of which
is a mapping between a sensitive API and its conditions.
Given the supergraph SG, our algorithm ﬁrst identiﬁes all the
sensitive API statements, Setapi, on the graph. Then, it discovers
the conditional predecessors Setpred (e.g., IF statement) for each
API statement via GetConditionalPredecessors(). Condi-
Figure 5: Extraction of UI Information from Resource Files
tional predecessor means that it is a predominator of that API state-
ment but the API statement is not its postdominator. Intuitively, it
means the occurrence of that API statement is indeed conditional
and depends on the predicate within that predecessor. Next, for ev-
ery conditional statement pred in Setpred, it performs backward
dataﬂow analysis on all the variables deﬁned or used in its pred-
icate. The result of BackwardDataflowAnalysis() is a data
dependency graph DDG, which represents the dataﬂow from the
variable deﬁnitions to the conditional statement. The algorithm fur-
ther calls ExtractCondition(), which traverses this DDG and
extracts the conditions Setcond for the corresponding api state-
ment.
In the end, the API/conditions pair  is
merged to output set Set.
We reiterate that ExtractCondition() only focuses on three
types of conditions: user interface, device status and natural en-
vironment.
It determines the condition types by examining the
API calls that occur in the DDG. For instance, an API call to
findViewById() indicates the condition is associated with GUI
components. The APIs retrieving phone states (e.g., isWifiEnabled(),
isSpeakerphoneOn()) are clues to identify phone status related
conditions. Similarly, if the DDG involves time- or location-related
APIs (e.g., getHours(), getLatitude()), the condition is cor-
responding to natural environment.
User Interface Analysis in Android Apps. We take special con-
siderations when extracting UI-related conditions. Once we dis-
cover such a condition, we expect to know exactly which GUI com-
ponent it corresponds to and what text is actually displayed to users.
In order to retrieve GUI information, we perform an analysis on
the Android resource ﬁles for the app. Our UI resource analysis is
different from the prior work (i.e., AsDroid [21]) in that AsDroid
examines solely the GUI-related call chains while we aim for the
depiction of application-wide behaviors. Therefore, AsDroid only
needs to correlate GUI texts to program entry points and then de-
, OnClickListener.onClick, Øconst, SetcondSetcond = {findViewById(View.getId)==Button(“Confirm”)}, OnClickListener.onClick, Øconst, Setcond, OnClickListener.onClick, Setconst, ØcondSetconst = {100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/company=%s/}, OnClickListener.onClick, Øconst, SetcondSetcond = {findViewById(View.getId)==Button(“Confirm”)}Setcond = {findViewById(View.getId)==Button(“Confirm”)}Send binary sms (to port 8091){type=Checkbox, id name=binary, string name=send_binarysms}   3-tuple={type=Checkbox, id=0x7f050002, text=Send binary sms (to port 8091)}res/values/public.xml{GUI type, id name, string name}{GUI type, GUI ID, text}res/values/strings.xmlres/layout/main.xmlStep 1Step 2Step 3Step 4tect any conﬂicts on the callgraph. In contrast, we have to further
associate the textual resources to speciﬁc conditional statements,
so that we can give concrete meaning to the subsequent program
logics preceded by the conditions. Besides, the previous work did
not consider those GUI callbacks that are registered in XML lay-
out ﬁles, whereas we handle both programmatically and statically
registered callbacks in order to guarantee the completeness.
Figure 5 illustrates how we perform UI analysis. This analysis
takes four steps. First, we analyze the res/values/public.xml
ﬁle to retrieve the mapping between the GUI ID and GUI name.
Then, we examine the res/values/strings.xml ﬁle to extract
the string names and corresponding string values. Next, we recur-
sively check all layout ﬁles in the res/layout/ directory to fetch
the mapping of GUI type, GUI name and string name. At last, all
the information is combined to generate a set of 3-tuples {GUI type,
GUI ID, string value}, which is queried by ExtractCondition()
to resolve UI-related conditions.
Notice that dynamically generated user interfaces are not han-
dled through our static analysis. To address this problem, more ad-
vanced dynamic analysis is required. We leave this for future study.
Condition Solving. Intuitively, we could use a constraint solver to
compute predicates and extract concrete conditions. However, we
argue that this technique is not suitable for our problem. Despite its
accuracy, a constraint solver may sometimes generate excessively
sophisticated predicates. It is therefore extremely hard to describe
such complex conditions in a human readable manner. Thus, we
instead focus on simple conditions, such as equations or negations,
because their semantics can be easily expressed in natural language.
Therefore, once we have extracted the deﬁnitions of condition
variables, we further analyze the equation and negation operations
to compute the condition predicates. To this end, we analyze how
the variables are evaluated in conditional statements. Assume such
a statement is if(hour == 8). In its predicate (hour == 8), we
record the constant value 8 and search backwardly for the deﬁnition
of variable hour. If the value of hour is received directly from API
call getHours(), we know that the condition is current time
is equal to 8:00am. For conditions that contain negation, such
as a condition like WIFI is NOT enabled, we examine the com-
parison operation and comparison value in the predicate to retrieve
the potential negation information. We also trace back across the
entire def-use chain of the condition variables.
If there exists a
negation operation, we negate the extracted condition.
One concern for our condition extraction is that attackers with
prior knowledge of our system can deliberately create complex
predicates to disable the analysis. However, we argue that even
if the logics cannot be resolved, the real malicious API calls will
still be captured and described alongside with other context and
dependency information.
4. SUBGRAPH MINING & COMPRESSION
Static analysis sometimes results in huge behavior graphs. To ad-
dress this problem, we identify higher-level behavior patterns from
raw SBGs so as to compress them and produce concise descriptions.
4.1 Frequent Behavior Mining
Experience tells us certain APIs are typically used together to
achieve particular functions. For example, SMSManager.getDefault()
always happens before SMSManager.sendTextMessage(). We
expect to extract these behavior patterns, so that we can describe
each pattern as an entirety instead of depicting every API included.
To this end, we ﬁrst discover the common subgraph patterns, and
later compress the original raw graphs by collapsing pattern nodes.
Figure 6: Graph Mining for getLastKnownLocation()
We leverage the graph mining technique to extract the frequent
behavior patterns in raw SBGs. Given the raw SBG dataset S =
{G1, G2, . . . , GN}, where N = |S| is the size of the set, we hope
to discover the frequent subgraphs appearing in S. To quantify the
subgraph frequency, we introduce the support value supportg for
a subgraph g. Suppose the set of graphs, containing subgraph g, is
deﬁned as Sg = {Gi|g ⊆ Gi, 1 ≤ i ≤ N}. Then, supportg =
|Sg|/N, where |Sg| denotes the cardinality of Sg. It demonstrates
the proportion of graphs in S that contains the subgraph g. Conse-
quently, we deﬁne the frequent subgraphs appearing in S as:
F(S, ρ) = {g | supportg ≥ ρ}
(1)
, where ρ is a threshold. Therefore, to discover a frequent behavior
pattern is to select a ρ and ﬁnd all subgraphs whose supportg ≥ ρ.
A naive way to solve this problem is to directly apply behavior
mining to the entire behavior graph set S, and extract the frequent
behaviors shared by all the graphs. However, there exist two prob-
lems in this solution. First, a behavior graph includes too many at-
tributes in a node. As a result, we cannot really learn the common
patterns when considering every attribute. In fact, we are more in-
terested in the correlations of API calls, and thus can focus only
on their topological relations. Second, critical behaviors may not
be discovered as patterns because they do not frequently happen
over all raw SBGs. To uncover those critical yet uncommon API
patterns, we conduct an “API-oriented” mining and extract the fre-
quent patterns that are speciﬁc to individual APIs.
Given an API θ, the “API-oriented” behavior mining operates
on the subset S/θ = {G1, G2, . . . , GM}, where G1, G2, . . . , GM
are raw SBGs in S containing the API θ. Hence, we need to select
an individual support threshold ρθ for each S/θ. The quality of
discovered patterns is then determined by these thresholds.
To achieve a better quality, we need to consider two factors: sup-
port value and graph size. On the one hand, we hope a discovered
pattern is prevalent over apps and therefore bears a higher support
value. On the other hand, we also expect an identiﬁed subgraph
is large enough to represent meaningful semantic information. To
strike a balance between these two factors, we utilize the data com-
pression ratio [27] to quantify the subgraph quality. Given an API
θ, g is any subgraph that contains θ; Sg is the set of graphs that
contain subgraph g; and G¯g is the compressed graph of G, where
subgraph g has been replaced. Then, our goal is to optimize the
total compression ration (TCR) by adjusting the threshold ρθ:
max
G,g
subject to
T CR(θ, ρθ) =
0 ≤ ρθ ≤ 1
supportg ≥ ρθ
G ∈ S/θ
|Sg|
|S/θ| . To maximize the objective function, we
, where supportg =
utilize the Hill Climbing algorithm [29] to ﬁnd the optimal support
values. This in turn produces subgraphs of optimized quality.
(2)
(cid:88)
(1 − |G¯g|/|G|)
getLastKnownLocation()getLongitude()getLatitude()getAltitude()write()getLastKnownLocation()getLongitude()getLatitude()getFromLocation()getLastKnownLocation()getLongitude()getLatitude()Graph Mininga) raw SBG# 1b) raw SBG# 2b) frequent pattern(cid:104)description(cid:105)
(cid:104)sentence(cid:105)
(cid:104)statement(cid:105)
(cid:104)subject(cid:105)
(cid:104)object(cid:105)
(cid:104)modiﬁer(cid:105)
(cid:104)conj(cid:105)
(cid:104)when(cid:105)
(cid:104)if(cid:105)
(cid:104)empty(cid:105)
(cid:104)empty(cid:105)
(cid:104)statement(cid:105) (cid:104)modiﬁer(cid:105)
::= (cid:104)sentence(cid:105)*
::= (cid:104)sentence(cid:105) ‘and’ (cid:104)sentence(cid:105)
|
::= (cid:104)subject(cid:105) (cid:104)verb(cid:105) (cid:104)object(cid:105)
::= (cid:104)noun phrase(cid:105)
::= (cid:104)noun phrase(cid:105)
|
::= (cid:104)modiﬁer(cid:105) (cid:104)conj(cid:105) (cid:104)modiﬁer(cid:105)
(cid:104)when(cid:105) (cid:104)sentence(cid:105)
|
(cid:104)if(cid:105) [‘not’] (cid:104)sentence(cid:105)
|
(cid:104)constant(cid:105)
|
(cid:104)empty(cid:105)
|
::= ‘and’
|
‘or’
::= ‘once’
::= ‘if’
|
::= ‘ ’
‘depending on if’