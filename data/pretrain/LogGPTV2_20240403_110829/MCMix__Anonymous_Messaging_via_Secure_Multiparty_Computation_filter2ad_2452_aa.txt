title:MCMix: Anonymous Messaging via Secure Multiparty Computation
author:Nikolaos Alexopoulos and
Aggelos Kiayias and
Riivo Talviste and
Thomas Zacharias
MCMix: Anonymous Messaging via  
Secure Multiparty Computation
Nikolaos Alexopoulos, TU Darmstadt; Aggelos Kiayias, University of Edinburgh;  
Riivo Talviste, Cybernetica AS; Thomas Zacharias, University of Edinburgh
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/alexopoulos
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXMCMix: Anonymous Messaging via Secure Multiparty Computation
Nikolaos Alexopoulos
Technische Universit¨at Darmstadt, Germany
PI:EMAIL
Riivo Talviste
Cybernetica AS, Estonia
PI:EMAIL
Aggelos Kiayias
University of Edinburgh, UK
PI:EMAIL
Thomas Zacharias
University of Edinburgh, UK
PI:EMAIL
Abstract
We present MCMix, an anonymous messaging system
that completely hides communication metadata and can
scale in the order of hundreds of thousands of users. Our
approach is to isolate two suitable functionalities, called
dialing and conversation, that when used in succession,
realize anonymous messaging. With this as a starting
point, we apply secure multiparty computation (“MC”
or MPC) and proceed to realize them. We then present
an implementation using Sharemind, a prevalent MPC
system. Our implementation is competitive in terms of
latency with previous messaging systems that only offer
weaker privacy guarantees. Our solution can be instan-
tiated in a variety of different ways with different MPC
implementations, overall illustrating how MPC is a vi-
able and competitive alternative to mix-nets and DC-nets
for anonymous communication.
1
Introduction
In an era in which privacy in communications is becom-
ing increasingly important, it is often the case that two
parties want to communicate anonymously, that is to ex-
change messages while hiding the very fact that they are
in conversation. A major problem in this setting is hid-
ing the communication metadata: while existing crypto-
graphic techniques (e.g., secure point-to-point channels
implemented with TLS) are sufﬁciently well developed
to hide the communication content, they are not intended
for hiding the metadata of the communication such as its
length, its directionality, and the identities of the commu-
nicating end points. Metadata are particularly important,
arguably some times as important to protect as the com-
munication content. The importance of metadata is re-
ﬂected in General Michael Hayden’s quote “We kill peo-
ple based on metadata”1 and in the persistence of secu-
1Complete quote: “We kill people based on metadata. But that’s
not what we do with this metadata.” General M. Hayden. The Johns
rity agencies with programs like PRISM (by the NSA)
and TEMPORA (by the GCHQ) in collecting metadata
for storage and mining.
Anonymous communication has been pioneered in the
work of Chaum, with mix-nets [16] and DC-nets [14]
providing the ﬁrst solutions to the problem of sender-
anonymous communication. In particular, a mix-net en-
ables the delivery of a set of messages from n senders
to a recipient so that the recipient is incapable of map-
ping outgoing messages to their respective senders. A
DC-net on the other hand, allows n parties to imple-
ment an anonymous broadcast channel so that any one of
them can use it to broadcast a message to the set of par-
ties without any participant being able to distinguish the
source. While initially posed as theoretical constructs,
these works have evolved to actual systems that have
been implemented and tested, for instance in the case
of Mixminion [25], that applies the mix-net concept to
e-mail, in the case of Vuvuzela [49] that applies the mix-
nets concept to messaging and in the case of Dissent [51]
that implements DC-nets in a client-server model.
It is important to emphasize that the adversarial set-
ting we wish to protect against is a model where the
adversary has a global view of the network, akin say to
what a global eavesdropper would have if they were pas-
sively observing the Internet backbone, rather than a lo-
calized view that a speciﬁc server or sub-network may
have. Furthermore, the adversary may manipulate mes-
sages as they are transmitted and received from users as
well as block users adaptively. Note that in a more “lo-
calized” adversary setting one may apply concepts like
Onion routing [48], e.g., as implemented in the Tor sys-
tem [27], or Freenet [20] to obtain a reasonable level of
anonymity with very low latency. Unfortunately such
systems are susceptible to trafﬁc analysis, see e.g., [34],
and, in principal, they cannot withstand a global adver-
sary.
Hopkins Foreign Affairs Symposium. 1/4/2014.
USENIX Association
26th USENIX Security Symposium    1217
Given the complexity of the anonymous communica-
tion problem in general, we focus our application objec-
tive to the important special case of anonymous messag-
ing, i.e., bidirectional communication with both sender
and receiver anonymity that requires moderately low la-
tency and has relatively small payloads (akin to SMS text
messaging). The question we ask is whether it is possi-
ble to achieve it with simulation-based security2 while
scaling to hundreds of thousands of users. In particular,
we consider two types of entities in our problem spec-
iﬁcation, clients and servers, and we ask how is it pos-
sible that the servers assist the clients that are online to
communicate privately without leaking any type of meta-
data to a global adversary, apart from the fact that they
are using the system. Furthermore, we seek a decentral-
ized solution, speciﬁcally one where no single entity in
the system can break the privacy of the clients even if it
is compromised. We allow the adversary to completely
control the network as well as a subset of the servers and
adaptively drop clients’ messages or manipulate them as
it wishes.
Our Contributions. We present MCMix, the ﬁrst anony-
mous messaging service that offers simulation-based se-
curity, under a well speciﬁed set of assumptions, and can
scale to hundreds of thousands of users. In our solution,
we adopt a different strategy compared to previous ap-
proaches to anonymous communication. Speciﬁcally, we
provide a way to cast the problem of anonymous mes-
saging natively in the setting of secure multiparty com-
putation (MPC). MPC, since its initial inception [31], is
known to be able to distribute and compute securely any
function, nevertheless, it is typically considered to be not
particularly efﬁcient for a large number of parties and
thus inconsistent with problems like anonymous messag-
ing. However, the commodity-based approach for MPC
[7] (client-server model), and more recent implementa-
tion efforts such as Fairplay [10], VIFF [23], Sharemind
[11], PICCO [53], ObliVM [40], Araki et al. [5] and [30]
increasingly suggest otherwise.
We ﬁrst propose two ideal functionalities that corre-
spond to the dialing operation and the conversation op-
eration. The MCMix system proceeds in rounds, where
in each round an invocation of either the dialing or the
conversation ideal functionality is performed. The dial-
ing functionality enables clients to either choose to dial
another client or check whether anyone is trying to dial
them (in practice in most dialing rounds the overwhelm-
ing majority of clients will be in dial-checking mode). If
a matching pair is determined by the ideal functionality,
2We use this term to refer to a level of metadata hiding that en-
sures, in a simulation based sense, that no information is leaked to an
adversary. This is distinguished from weaker levels of privacy, such as
e.g., a differential privacy setting where some controlled but non-trivial
amount of information is leaked to the adversary.
then the caller will be notiﬁed that the other client has
accepted their call and the callee will be notiﬁed about
the caller. Moreover, the ideal functionality will deliver
to both clients a random tag that can be thought of the
equivalent of a “dead drop” or “rendezvous” point. Sub-
sequently, the clients can access the conversation func-
tionality using the established random tag. When two
clients use the same random tag in the conversation func-
tionality, their messages are swapped and thus they can
send messages to each other (even concurrently).
The two ideal functionalities provide a useful abstrac-
tion of the anonymous messaging problem. We proceed
now to describe how they can be implemented by an
MPC system.
It is easy to see that a straightforward
implementation of the functionality programs results in
a circuit of size Θ(n2), where n is the number of on-
line users accessing the functionalities. Such a solution
would be clearly not scalable. We provide more efﬁ-
cient implementations that achieve O(nlogn) complex-
ity in both cases with very efﬁcient constants using state
of the art oblivious sorting algorithms [33, 13].
Given our high level functionality realizations, we pro-
ceed to an explicit implementation in the Sharemind sys-
tem [11] using its SecreC programming language [12].
We provide benchmarks for the Dialing and Conversa-
tion solutions. The Sharemind platform provides a 3-
server implementation of information theoretically se-
cure MPC. Our results showcase that our system can
handle hundreds of thousands of users in a reasonable
latency (little over a minute), that is consistent with mes-
saging.
In order
to provide theoretical evidence of
fur-
ther improving performance and scaling to even larger
anonymity sets, we provide a parallelized version of the
conversation functionality. Parallelization is a non-trivial
problem in our setting since we would like to maintain
anonymity across the whole user set; thus, a simplis-
tic approach that breaks users into chunks solving dial-
ing and conversation independently will isolate them to
smaller “communication islands”; if two users have to
be on the same island in order to communicate, this will
lead to privacy loss that is non-simulatable and we would
like to avoid. Our parallelized solution manages to make
the interaction between islands, in a way that maintains
strong privacy guarantees, at the cost of a correctness er-
ror that can become arbitrarily small.
In this way, by
utilizing a large number of servers, we provide evidence
that the system can scale up to anonymity sets of up to
half a million of users. To sum up, our contributions can
be expressed by the following points:
- A model for simulation-based anonymous messaging.
- A realization of this model with a set of programs that
are provably secure and expressed in a way so that they
can be implemented in any MPC platform.
1218    26th USENIX Security Symposium
USENIX Association
- An implementation of our programs in Sharemind that
can accomodate anonymity sets of hundreds of thou-
sands of users.
- A novel parallelization technique that allows our system
to scale, in theory, even beyond the order of hundreds of
thousands of users.
Organization. After shortly presenting some prelim-
inary topics in section 2, we formalize the concept of
anonymous messaging via an ideal MPC functionality
and introduce the Dialing and Conversation programs in
an abstract form that together solve the sender and re-
ceiver anonymous messaging problem (cf. Section 3). In
Section 4, we present the general architecture of MCMix
and in Sections 5 and 6, we propose a way to realize the
Dialing and Conversation programs, using MPC. Then,
in Section 7, we give more details regarding how the
MCMix system implements anonymous messaging in a
provably secure and privacy-preserving way.
In Sec-
tion 8, we present the results of benchmarking our proto-
type and in Section 9, we account for the client-side load
of our system. In Section 10, we provide an overview
of noticeable anonymous communication systems and
when applicable, we compare their performance and se-
curity level to MCMix. Finally, in Section 11, we intro-
duce a novel way to parallelize our conversation protocol
in order to achieve even better scalability.
2 Background
Secure Multiparty Computation.
Secure Multiparty
Computation (MPC), is an area of cryptography con-
cerned with methods and protocols that enable a set of
users U = u1, . . . ,un with private data d1, . . . ,dn from a
domain set D, to compute the result of a public function
f (d1, . . . ,dn) in a range set Y , without revealing their pri-
vate inputs. For clarity, we also assume that f accepts ⊥
as input, which denotes abstain behavior.
Sharemind. Sharemind [11] is an MPC framework that
offers a higher level representation of the circuit being
computed in the form of a program written in a C-like
language, namely the SecreC language [12].
It uses
three-server protocols that offer security in the presence
of an honest server majority. That is, we assume that
no two servers will collude in order to break the sys-
tems privacy. Our implementation is designed over the
Sharemind system, but the general approach that we in-
troduce for anonymous messaging can also be deployed
over other MPC protocols. The security of Sharemind
has been analyzed several settings including semi-honest
and active attacks (e.g., [11, 43]).
Oblivious Sorting. Sorting is used as a vital part of
many algorithms.
In the context of MPC, sorting an
array of values without revealing their ﬁnal position,
is called oblivious sorting. The ﬁrst approach to sort-
ing obliviously is using a data-independent algorithm
and performing each compare and exchange execution
obliviously. This approach uses sorting networks to per-
form oblivious sorting. Sorting networks are circuits that
solve the sorting problem on any set with an order re-
lation. What sets sorting networks apart from general
comparison sorts is that their sequence of comparisons
is set in advance, regardless of the outcome of previous
comparisons. Various algorithms exist to construct sim-
ple and efﬁcient networks of depth O(log2 n) and size
O(nlog2 n). The three more used ones are Batcher’s odd-
even mergesort and bitonic sort [6] and Shellsort [46].
All three of these networks are simple in principle and
efﬁcient. Sorting networks that achieve the theoretically
optimal O(logn) and O(nlogn) complexity in depth and
total number of comparisons, such as the AKS-network
[1] exist, but the constants involved are so large that make
them impractical for use. Note that even for 1 billion val-
ues, i.e., n = 109, it holds that logn < 30 so, in practice,
the extra log factor is preferable to the large constants.
A major drawback of all sorting network approaches is
that sorting a matrix by one of its columns would require
oblivious exchange operations of complete matrix rows,
which would be very expensive.
In recent years, techniques have been proposed from
Hamada et. al [33] to use well known data-dependent
algorithms, such as quicksort, in an oblivious manner to
achieve very efﬁcient implementations, especially when
considering a small number of MPC servers, which is
very often the case. This approach uses the “shufﬂing