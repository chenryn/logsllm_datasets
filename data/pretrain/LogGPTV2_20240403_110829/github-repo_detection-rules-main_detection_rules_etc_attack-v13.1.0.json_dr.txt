### Drive-by Compromise

**Description:**
Adversaries may gain unauthorized access to a system when a user visits a compromised website during regular browsing. In this scenario, the user's web browser is typically the primary target for exploitation, although adversaries may also use these compromised websites for non-exploitation activities, such as acquiring [Application Access Tokens](https://attack.mitre.org/techniques/T1550/001).

**Delivery Methods:**
Multiple methods exist for delivering exploit code to a web browser, including:

- **Compromised Legitimate Websites:**
  - Adversaries inject malicious code, such as JavaScript, iFrames, or cross-site scripting (XSS) into legitimate websites.
- **Modified Script Files:**
  - Script files served from publicly writable cloud storage buckets are altered by adversaries.
- **Malicious Ads:**
  - Adversaries pay for and serve malicious advertisements through legitimate ad providers, a technique known as [Malvertising](https://attack.mitre.org/techniques/T1583/008).
- **Web Application Interfaces:**
  - Built-in web application interfaces are leveraged to insert objects that can display web content or execute scripts on the visiting client, such as forum posts, comments, and other user-controllable web content.

**Targeted Campaigns:**
Often, the websites used by adversaries are those visited by specific communities, such as government, industry, or regional groups. The goal is to compromise specific users or sets of users based on shared interests. This type of targeted campaign is often referred to as a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)

**Typical Drive-by Compromise Process:**

1. **User Visits a Compromised Website:**
   - The user navigates to a website hosting adversary-controlled content.
2. **Scripts Execute Automatically:**
   - Scripts run automatically, searching for potentially vulnerable versions of the browser and plugins.
   - The user may be required to enable scripting or active website components and ignore warning dialog boxes.
3. **Exploit Code Delivery:**
   - Upon finding a vulnerable version, exploit code is delivered to the browser.
4. **Code Execution:**
   - If the exploitation is successful, it will give the adversary code execution on the user's system unless other protections are in place.
   - In some cases, a second visit to the website after the initial scan is required before the exploit code is delivered.

**Comparison with Exploit Public-Facing Application:**
Unlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), which focuses on exploiting software on a server, this technique targets software on a client endpoint upon visiting a website. This often provides the adversary with access to systems on the internal network rather than external systems that may be in a DMZ.

**Additional Uses:**
Adversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Tokens](https://attack.mitre.org/techniques/T1528), such as OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)

**References:**
- [MITRE ATT&CK T1189](https://attack.mitre.org/techniques/T1189)
- [Shadowserver Strategic Web Compromise](http://blog.shadowserver.org/2012/05/15/cyber-espionage-strategic-web-compromises-trusted-websites-serving-dangerous-results/)
- [Volexity OceanLotus Nov 2017](https://www.volexity.com/blog/2017/11/06/oceanlotus-blossoms-mass-digital-surveillance-and-attacks-targeting-asean-nations-the-media-human-rights-groups-and-civil-society/)

---

This optimized text provides a clear, structured, and professional overview of the "Drive-by Compromise" technique, making it easier to understand and follow.