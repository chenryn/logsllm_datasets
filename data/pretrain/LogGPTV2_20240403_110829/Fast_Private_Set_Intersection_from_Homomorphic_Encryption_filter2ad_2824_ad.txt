1
4 16
4
16
Receiver
64 Enc. Dec.
72.2 18.0 6.2
70.9 19.1 6.3
76.8 20.6 6.7
64.1 17.9 5.5
71.2 18.5 6.3
80.4 21.5 6.7
9.1 2.5 1.0
6.9 2.0 0.8
6.4 1.7 0.9
5.1 1.4 0.6
4.4 1.2 0.6
4.3 1.2 0.5
1.2 0.3 0.2
1.0 0.3 0.2
0.9 0.3 —
0.9 0.3 0.2
0.7 0.2 0.1
0.6 0.2 —
0.3 10.3
3.0 42.2 14.4 7.1 5.6
0.5 5.1
3.1 38.9 15.6 9.8 9.1
0.9 2.6
3.3 41.1 21.6 16.2 16.9
0.2 4.9
2.7 36.0 11.8 6.3 5.5
0.3 2.4
2.9 36.1 14.2 9.6 9.2
0.5 1.2
3.2 41.9 21.5 17.7 17.7
0.2 5.1
0.5 8.0 2.6 1.2 1.1
0.3 2.7
0.4 5.2 1.8 1.1 1.0
0.7 1.3
0.6 4.5 2.1 1.3 1.5
0.1 1.9
0.4 4.2 1.5 0.8 0.7
0.3 3.4 1.7 0.7 1.0
0.2 1.0
— 3.6 1.4 1.5 — 0.3 0.5
— 1.3 0.6 0.6 — 0.2 0.5
— 1.5 1.2 1.3 — 0.3 0.3
— 1.9 1.7 — — 0.5 0.1
— 0.9 0.4 0.3 — 0.1 0.5
— 0.7 0.3 0.3 — 0.1 0.2
— 0.7 0.5 — — 0.3 0.1
224
220
216
11041
SEAL16384-2
SEAL16384-1
5535 SEAL8192-1
11041 SEAL16384-1
5535 SEAL8192-2
11041 SEAL16384-3
5535 SEAL8192-2
256 1
128 2
64 3
256 1
128 2
64 3
128 1
64 2
32 3
128 1
64 2
32 3
16 1
2
8
4
3
32 1
16 2
8
3
Table 3: Running time in seconds for our protocol with T ∈ {1, 4, 16, 64} threads; λ = 40, σ = 32, h = 3.
Since we implemented multi-threading by dividing the α partitions evenly between threads, having T > α
oﬀers no performance beneﬁt. These cases are denoted by “—” in the table.
sender to prepare its coeﬃcients of the polynomial r(cid:81)
Pre-processing The “Sender pre-processing” column in Table 3 measures the computational cost for the
x∈X (y−x), as mentioned in Section 4.3. More precisely,
the sender’s pre-processing work includes hashing and batching of its data, computing the coeﬃcients in the
right-hand side of (3), and sampling the random vectors. We also have the sender perform number theoretic
transforms (NTT) to its plaintext polynomials to facilitate the underlying homomorphic multiplications in
the second step described in Section 4.3.
We remark that our pre-processing can be done entirely oﬄine without involving the receiver. Speciﬁcally,
given an upper bound on the receiver’s set size, the sender can locally choose parameters and perform
the pre-processing. Upon learning the receiver’s actual set size, the parameters selected by the sender are
communicated to the receiver. We note that in order to achieve simulation-based security, the selected hash
functions can only be used once. As such, each instance of the protocol must have an independent pre-
processing phase, and in the event that a single pre-processing phase is used between several instances, an
adversary with control of a party’s set could force a hashing failure to occur. However, if such adversaries are
not considered, then the pre-processing phase can be reused, resulting in signiﬁcantly better performance.
PSI with longer items When implementing our PSI protocol, we restrict the item length to be 32 bits.
The reason is, although we can accommodate arbitrary size items in principle as described in Section 4.2,
doing so naively with our protocol would require the encryption parameters to be substantially increased,
which has a large negative impact on performance. We leave the task of making our protocol eﬃcient for
arbitrary size items to future work.
6.2 Comparison to Pinkas et al. [PSZ16]
Our primary point of comparison is the Pinkas et al. PSI protocol [PSZ16], in which the authors consider
both the case of symmetric set sizes, and the setting where the receiver’s set is signiﬁcantly smaller than
the sender’s. While our protocol can easily handle symmetric set sizes, our main advantage over [PSZ16]
is in the asymmetric setting, which we now focus on. To make comparing the two protocols easier, we ran
them on the same machine, and summarized the total running times side by side in Table 5. We chose to
Parameters
Optim. Comm. size (MB)
S → R
Comm. time (seconds)
10 Gbps 100 Mbps 10 Mbps 1 Mbps
Nx Ny
FHE parameters α (cid:96)
224
220
216
11041
SEAL16384-2
SEAL16384-1
5535 SEAL8192-1
11041 SEAL16384-1
5535 SEAL8192-2
11041 SEAL16384-3
5535 SEAL8192-2
256 1
128 2
64 3
256 1
128 2
64 3
128 1
64 2
32 3
128 1
64 2
32 3
16 1
2
8
4
3
32 1
16 2
3
8
R → S
3.6
6.3
12.7
3.2
4.1
6.8
1.8
3.6
7.2
1.1
1.9
3.4
2.3
3.0
6.0
0.8
1.5
3.0
33.8
16.9
8.4
16.9
8.4
4.2
16.9
8.4
4.2
8.4
4.2
2.2
2.1
1.1
0.5
2.1
1.1
0.5
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
4.0
2.4
2.2
2.0
1.3
1.1
1.8
1.3
1.2
1.0
0.6
0.6
0.5
0.4
0.6
0.3
0.3
0.4
30.2
19.0
17.4