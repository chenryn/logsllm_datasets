PANE may use hints to derive and install policy atoms which
affect related trafﬁc, although it gives no guarantee or notiﬁcation
to the user. For example, a hint that a ﬂow is short may generate
(a)
(b)
Figure 3: (a) A PANE share. (b) A share hierarchy. The rectan-
gle above each share represents a ﬂowgroup according to one
dimension (e.g., source IP). Sub-shares are deﬁned on a subset
of their parent’s ﬂowgroup, and may not have more permissive
privileges than their parent.
a policy atom to increase that ﬂow’s priority. We call such hints
realized, and their corresponding policy atoms are tagged as merely
hints (cf. Table 1).
The integration of hints, which can beneﬁt non-PANE systems,
as in the examples above, is deliberate. PANE provides a network
administrator with the framework to delegate privileges, divide re-
sources, and account for their usage; the ability to issue hints is
a privilege, particularly those which affect limited resources. The
framework provided by PANE makes it more feasible to implement
hints in an untrusted environment, where malicious principals may
issue false or excessive hints in an attempt to gain an advantage.
Finally, in the absence of transactional-style requests (e.g., a re-
quest for “resource A or resource B”), PANE’s hints are a more
ﬂexible way to provide information to the network than via re-
quests. In this use, hints share a similar role to PANE’s partial ful-
ﬁllment mode for requests (§5.2).
4. PRIVILEGE DELEGATION
This section presents the semantics of shares and how princi-
pals’ messages are authorized in more detail. The PANE controller
maintains two key data structures. First, the share tree determines
the privileges that principals have to read or write network state.
The tree-structure allows principals to create new shares and del-
egate authority to each other. The share tree itself does not affect
the state of the network. Instead, the second key data-structure, the
policy tree, holds policy atoms that can affect the network. PANE
maintains the invariant that all policy atoms in the policy tree are
properly authorized by the share tree at all times.
A share-tree is an n-ary tree of shares, where a share gives a set
of principals some privileges to affect a set of ﬂows in the network.
We elaborate on these terms below.
Principals A PANE principal is a triple consisting of an applica-
tion running on a host by a user. For example, a principal may be
(Skype, 192.168.1.7, Alice) or (Hadoop, 10.20.20.20, Bob). Shares
in PANE are held by principal-sets. We abbreviate singleton sets
to their principal. We also use wildcards to denote large sets. e.g.,
(Alice, (cid:63), (cid:63)) is the set of all principals with Alice as the user, and
((cid:63), (cid:63), Hadoop) is the set of all principals with Hadoop as the ap-
plication. We write ((cid:63), (cid:63), (cid:63)) to denote the set of all principals.
Principals send messages to the PANE controller to request re-
sources and query the state of the network. For example, the prin-
cipal (Skype, 192.168.1.7, Alice) may request low-latency service
between the Skype call’s source and destination, and the principal
(Hadoop, 10.20.20.20, Bob) may request guaranteed bandwidth be-
tween the three machines in an HDFS write pipeline, as we imple-
ment in §7.1.
In a deployed system, PANE could use 802.1x to authenticate the
user portion of a principal against an existing user database such as
Active Directory or LDAP. In an ideal environment, the application
and host portions could be attested to by a TPM module and appli-
cation signatures on the end host [43]. For now, our prototype only
considers the user portion of a principal.
The three-part principal design allows users and network admin-
istrators to fully understand the provenance of each request. For
example, in a cluster of Hadoop machines, requests by different
Application Masters are identiﬁable back to the speciﬁc machine
they were made from. Similarly, users can differentiate between
requests from distinct applications on the same machine.
Flows A ﬂow is a set of related packets on which requests are
made. For example,
(cid:104)srcIP=w, dstIP=x, proto=TCP, srcPort=y, dstPort=z(cid:105)
is a ﬂowgroup that denotes a TCP connection from w : y to x : z.
A PANE share allows principals to affect a set of ﬂows, which we
denote with wildcards when possible. For example, the following
ﬂowgroup denotes all HTTP requests:
(cid:104)srcIP=(cid:63), dstIP=(cid:63), proto=TCP, srcPort=(cid:63), dstPort=80(cid:105)
whereas the following denotes HTTP requests and responses:
(cid:104)srcIP=(cid:63), dstIP=(cid:63), proto=TCP, srcPort=(cid:63), dstPort=80(cid:105)∪
(cid:104)srcIP=(cid:63), dstIP=(cid:63), proto=TCP, srcPort=80, dstPort=(cid:63)(cid:105)
A key invariant of the share tree is that if share S1 is a sub-share
of share S2, then S1’s ﬂowgroup is a subset of S2’s ﬂowgroup.
Therefore, sub-shares allow principals to implement ﬁne-grained
delegation of control.
Privileges Privileges in PANE deﬁne the messages principals may
send using the share. Each message type, as described in the pre-
vious section, has a corresponding privilege. For example, CanAl-
low n and CanDeny n permit admission-control policies to be re-
quested for n seconds, and CanWaypoint {IP} indicates that prin-
cipals can route trafﬁc through an IP address in the given set.
5. CONFLICT RESOLUTION
Conﬂicts arise naturally in a participatory network, as PANE is
designed to allow multiple, distributed principals to author the net-
work conﬁguration. For example, one principal may issue a request
to deny trafﬁc to TCP port 80, while another may request such traf-
ﬁc be allowed. This section discusses how PANE handles conﬂicts
between overlapping requests.
Two requests overlap when the intersection of their respective
ﬂowgroups is not empty, i.e., there are some ﬂows that match both.
As described in §2, principals make requests in the context of a
share, and accepted requests become policy atoms residing in this
share. Policy atoms, then, inherit from the share tree a natural hier-
archical relationship, which we call the policy tree. The network’s
effective policy is a function of the set of all policy atoms, their po-
sition in the tree, and the semantics of conﬂict resolution between
overlapping policy atoms.
The semantics of the policy tree is the ﬁnal action it produces
on an individual packet, after it has consolidated the actions of all
policy atoms in the tree. Figure 4 illustrates a packet’s evaluation:
matching policy atoms (shown in green) produce an action, such as
Allow (shown in blue), and conﬂicts are resolved up the hierarchy
until a ﬁnal action is emitted from the tree.
The policy tree is a declarative representation of the effective pol-
icy implemented by PANE and installed in the physical network. In
FlowgroupPrincipalsPrivilegessrc=128.12/16 ⋀ dst.port ≤1024AliceBobdeny, allowbandwidth: 5Mb/slimit: 10Mb/shintqueryRootsharexywzThese modes are useful for three reasons. First, strict mode pro-
vides the principal with a guarantee that the request will be im-
plemented in the network as speciﬁed. This is a limited form of
change-impact analysis: was the impact of my change on the net-
work’s conﬁguration what I expected? If not, cancel the request.
We will expand PANE’s ability to provide change-impact analysis
in future work.
Second, partial mode improves support for concurrent requests,
as at least a relaxed form of a partial request will succeed. Without
this, a principal faces the risk of repeatedly crafting strict requests
based on the network state at time t0, only to have the request arrive
at time t2 > t0 and conﬂict with a request accepted at time t1,
where t2 > t1 > t0.
Finally, partial mode’s ability to relax a request is a useful con-
venience. For example, if a principal has permissions which affect
dozens of speciﬁc TCP ports in the range 1000-2000, yet not all of
them, partial requests can be made for that range, and the requests
would be relaxed to just the speciﬁc ports, freeing the principal
from needing to specify the particular ports on each request.
Partial reservations, such as the 20 Mbps received of the 30 Mbps
requested in the example above, are particularly useful as applica-
tions can use them to provide upper-bounds for transfer time. Al-
though the faster reservation may have been preferred, the slower
one still provides predictability to the end-user (and in either sce-
nario, the actual bandwidth received by the transfer may be even
higher than the guaranteed minimum). Such a use case is different
from that for bandwidth hints; with hints, the principal does not
know how the information will be used, if at all.
5.3 Compiler Complexity
To realize a policy tree in OpenFlow hardware, we have to com-
pile it to ﬂow tables for each switch. We use a variation of Hier-
archical Flow Tables (HFT) [16]. A direct implementation of the
HFT algorithm produces ﬂow tables of size O(2n), where n is the
size of the policy tree. This algorithm is therefore useless on all but
trivial policies. However, we make two changes that greatly reduce
the complexity: the modiﬁed algorithm yields ﬂow tables of size
O(n2) in O(n2) time. This section is an overview of our results.
OpenFlow ﬂow tables are simple linear sequences of patterns
and actions. A ﬂow can match several, overlapping policy atoms
in a policy tree and trigger conﬂict-resolution that combines their
policies. However, in an OpenFlow ﬂow table, a ﬂow will only trig-
ger the action of the highest-priority matching pattern.
For example, suppose the policy tree has two atoms with the fol-
lowing ﬂowgroups:
(cid:104)srcIP=X, dstIP=Y, proto=tcp, srcPort=(cid:63), dstPort=(cid:63)(cid:105)
(cid:104)srcIP=(cid:63), dstIP=(cid:63), proto=tcp, srcPort=(cid:63), dstPort=80(cid:105)
Suppose ﬂows that match the ﬁrst ﬂowgroup – all ﬂows from X
to Y – are waypointed through some switch, and that ﬂows that
match the second ﬂowgroup – all HTTP requests – are given some
bandwidth reservation. These two ﬂowgroups overlap, thus a ﬂow
may be (1) waypointed with a reservation, (2) only waypointed, (3)
only given a reservation, or (4) not be affected by the policy.
An OpenFlow ﬂow table that realizes the above two-atom policy
tree must have entries for all four cases. The original algorithm [16]
generates all possible combinations given trees of size n — i.e. ﬂow
tables of size O(2n).
We make two changes to prune the generated ﬂow table: (1) we
remove all rules that generate empty patterns and (2) we remove all
rules whose patterns are fully shadowed by higher-priority rules.
The earlier algorithm is recursive, and we prune after each recur-
sive call. It is obvious that this simple pruning does not affect the
Figure 4: Evaluation of a single packet
PANE, we represent policy trees using HFTs, or Hierarchical Flow
Tables [16]. HFTs are a natural choice for PANE as they provide
two key features: ﬁrst, ﬂexible conﬂict resolution through the use of
conﬂict resolution operators; and second, a formally-veriﬁed com-
piler from HFTs to the ﬂow match tables used in OpenFlow. HFT’s
eval function implements the evaluation strategy described above.
We now describe how PANE uses the operators to resolve conﬂicts
(§5.1), the compiler to strictly or partially fulﬁll requests (§5.2),
and the complexity of this approach (§5.3).
5.1 Conﬂict-resolution Operators
HFTs resolve conﬂicts through the use of conﬂict resolution op-
erators. These operators take two conﬂicting requests as input, and
return a single resolved request. For example, a packet which matches
policy atoms from Reserve(10) and Reserve(30) may be resolved
to the higher guaranteed bandwidth, Reserve(30), as occurs at Node
1 in Figure 4.
HFTs have three types of conﬂict-resolution operators at each
node in the tree. These multiple types allow HFTs to resolve dif-
ferent types of conﬂicts using independent logic: +D is used to
resolve conﬂicts between requests within the same share, +P be-
tween conﬂicting requests in parent and child shares, and +S to
resolve conﬂicts between sibling shares. Their placement directly
in the nodes allows conﬂict resolution to make implicit use of the
hierarchy. This design makes it simple to express intuitive conﬂict
resolutions such as “child overrides parent.”
For PANE we chose simple conﬂict-resolution operators in the
interest of user and administrator understanding. PANE’s parent-
child operator (+P ) speciﬁes a “child overrides parent” policy for
admission control. PANE’s +S and +D operators are identical, and
specify a “Deny overrides Allow policy” between siblings.
5.2 Strict vs Partial Fulﬁllment
We now return to PANE’s strict and partial modes of fulﬁllment,
ﬁrst introduced with the Allow and Deny privileges. In each mode,
a request is ﬁrst authenticated against the share tree, then, as shown
in Figure 1, PANE veriﬁes the resulting policy tree can be compiled
to a valid network conﬁguration. After this veriﬁcation, the two
modes differ.
In strict mode, PANE ensures that a request’s speciﬁed action
is the same as the action returned by HFT’s eval function for all
packets in the request’s ﬂowgroup – that is, no conﬂict resolution
operator has changed the resulting action for any matching packets.
More formally, when a request with match rule M and action A is
added to a policy tree, yielding tree T , ∀ packets K ∈ {K|M ∩
K (cid:54)= ∅}, eval (T, K) = A. If this condition does not hold, the
request is rejected. In partial mode, the request is not subject to
this check, and may even be relaxed – for example, a request for
30 Mbps of guaranteed bandwidth on a share with only 20 Mbps
available will be relaxed to a request for 20 Mbps.
(dstPort=22,Deny)(dstIP=10.0.0.2,GMB=30)(dstPort=80,GMB=10)(srcIP=10.0.0.1,Allow)AllowGMB=10GMB=10GMB=3012345GMB=30[srcIP=10.0.0.1dstIP=10.0.0.2ddstPort=80]packet headers:semantics of ﬂow tables. However, a surprising result is that it dra-
matically improves the complexity of the algorithm.
The intuition behind our proof is that for sufﬁciently large pol-
icy trees, the intersections are guaranteed to produce duplicate and
empty patterns that get pruned. To see this, note OpenFlow patterns
have a bit-vector that determines which ﬁelds are wildcards. If pat-
terns have h header ﬁelds, there are only 2h unique wildcard bit-
vectors. Therefore, if a policy tree has more than 2h policy atoms,
then by the pigeonhole principle some patterns must have identical