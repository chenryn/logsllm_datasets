User: We need to automate the deployment and configuration management of multiple Linux servers. Please provide a viable automation script and tool, and deploy and configure as required.
Assistant: viable automation script and tool is Ansible. Below is an example of a basic Ansible playbook that can be used to deploy and configure packages, set up users, configure services, etc. on multiple Linux servers. 1. Install Ansible Install Ansible on one server, and configure SSH keys to other servers so that Ansible can connect to and manage other servers. You can use the following command to install Ansible on Ubuntu: ``` sudo apt update sudo apt install ansible ``` 2. Write Ansible playbook Create an Ansible playbook file named `deploy.yml`, and configure the required installation and configuration as required packages, users, services, etc. Here is a simple example: ```yaml --- hosts: webservers become: true vars: http_port: 80 database_name: myapp tasks: - name: Install Apache web server apt: name: apache2 state: present - name: Start Apache service service: name: apache2 state: started - name: Create new user user: name: john password: "{{ 'secure-password' | password_hash('sha256') }}" groups: sudo shell: /bin/bash - name: Create database mysql_db: name: "{{ database_name }}" state: present login_user: root login_password: "{{ mysql_root_password }}" - name: Install PHP and MySQL packages apt: name: - php - php-mysql - mysql-client - mysql-server state: present ``` In the above example, `hosts` specifies the target hosts on which to run this playbook (in this case, the `webservers` group), and `become` specifies that the task should be run with sudo privileges. `vars` defines some reusable variables like `http_port` and `database_name`. `tasks` contains a list of tasks to be performed on the target host. Each task has a name, and an Ansible module that performs the action. 3. Run the Ansible playbook Run the following command to run the Ansible playbook on the target host: ``` ansible-playbook deploy.yml -i hosts.ini ``` Among them, the `hosts.ini` file contains the target host list and SSH connection INFO: ``` [webservers] web1 ansible_host=192.168.1.10 ansible_user=admin ansible_ssh_private_key_file=/home/admin/.ssh/id_rsa web2 ansible_host=192.168.1.11 ansible_user=admin ansible_ssh_private_key_file=/ home/admin/.ssh/id_rsa web3 ansible_host =192.168.1.12 ansible_user=admin ansible_ssh_private_key_file=/home/admin/.ssh/id_rsa ``` In the above example, `web1`, `web2` and `web3` are the hostnames of the target host, and `ansible_host` is its IP address , `ansible_user` is the username used when connecting to SSH, and `ansible_ssh_private_key_file` is the path to the private key file used when connecting. After executing the above command, Ansible will automatically connect to the target host and deploy and configure according to the tasks defined in the playbook. Of course, Ansible also has many advanced functions that can be used, such as templates, loops, conditional statements, labels, debugging, etc., which can be used according to your own needs.