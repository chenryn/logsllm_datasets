= 𝐾0 · 𝐻𝑒
1 . If unsuccessful, output 0.
Figure 7: Prover and Verifier routine for NIZK proof for statements in language L2
• 𝑒𝑖 = (𝑑𝑖,1 + 𝑑𝑖,2) mod 2𝜆
• 𝐴𝑖,1 := 𝐺𝑟𝑖,1 · (𝑐𝑖,0)𝑑𝑖,1
• 𝐵𝑖,1 := 𝐾𝑟𝑖,1 · (𝑐𝑖,1)𝑑𝑖,1
• 𝐴𝑖,2 := 𝐺𝑟𝑖,2 · (𝑐𝑖,0)𝑑𝑖,2
• 𝐵𝑖,2 := 𝐾𝑟𝑖,2 · (𝑐𝑖,1/𝐺)𝑑𝑖,2
• ˜𝐴𝑖,1 := ˜𝐺 ˜𝑟𝑖,1 · ( ˜𝑐𝑖,0)𝑑𝑖,1
• ˜𝐵𝑖,1 := ˜𝐾 ˜𝑟𝑖,1 · ( ˜𝑐𝑖,1)𝑑𝑖,1
• ˜𝐴𝑖,2 := ˜𝐺 ˜𝑟𝑖,2 · ( ˜𝑐𝑖,0)𝑑𝑖,2
• ˜𝐵𝑖,2 := ˜𝐾 ˜𝑟𝑖,2 · ( ˜𝑐𝑖,1/ ˜𝐺)𝑑𝑖,2 .
It sets the random oracle H3 accordingly at the 𝑖-th point with
𝑒𝑖. The values (𝐴𝑖,1, 𝐵𝑖,1, 𝐴𝑖,2, 𝐵𝑖,2, ˜𝐴𝑖,1, ˜𝐵𝑖,1, ˜𝐴𝑖,2, ˜𝐵𝑖,2) output by the
simulator are statistically close to that in a honestly generated proof.
This is because 𝑤𝑖 if sampled uniformly from Z𝑄 is distributed
statistically close to 𝑟𝑖,1 + 𝑠𝑖 · 𝑑𝑖,1 (Lemma E.1).
□
Theorem E.7 (Simulation Soundness). The protocol in Figure 8
satisfies simulation soundness provided the 2𝜆-low order assumption
and the strong root assumption holds in G, in the random oracle
model.
Proof of Theorem E.7. As before, we assume without loss of
generality that the false statement (and the index 𝑖 where the state-
ment fails) is fixed ahead of time. This assumption can be lifted
with a polynomial loss in the success probability of the reduction by
guessing the correct query to the random oracle. In what follows,
we assume that the false statement only pertains to the prime-order
group ˜G. For the case of the class group elements, the argument
is similar to the proof of Theorems E.3 and E.5. Our reduction R
computes simulated proofs up until the point where the adversary
made the random oracle query on the false statement. Here the
reduction forks the execution and sets the 𝑖-th output of the random
oracle to two different values (𝑒𝑖 ≠ 𝑒′
𝑖). By the forking Lemma [63],
with inverse polynomial probability the adversary outputs two ac-
cepting proofs containing ˜𝐴𝑖,1, ˜𝐴𝑖,2, ˜𝐵𝑖,1, ˜𝐵𝑖,2, 𝑑𝑖,1, 𝑑𝑖,2, ˜𝑟𝑖,1, ˜𝑟𝑖,1 and
˜𝐴𝑖,1, ˜𝐴𝑖,2, ˜𝐵𝑖,1, ˜𝐵𝑖,2, 𝑑′
𝑖,1, 𝑑′
𝑖,1 (among other elements from G).
Since 𝑒𝑖 ≠ 𝑒′
𝑖,1 or 𝑑𝑖,2 ≠
𝑑′
𝑖,2. If we have 𝑑𝑖,1 ≠ 𝑑′
𝑖,2, ˜𝑟′
𝑖 , it must be the case that either 𝑑𝑖,1 ≠ 𝑑′
𝑖,1, then the reduction computes
𝑖,1 ˜𝑟′
(cid:16)˜𝑟𝑖,1 − ˜𝑟′
(cid:16)𝑑′
𝑖,1
𝑖,1 − 𝑑𝑖,1
(cid:17)
(cid:17)
˜𝑠𝑖 :=
from ˜𝐴𝑖,1, such that ˜𝑐𝑖,0 = ˜𝐺 ˜𝑠𝑖 . Similarly from ˜𝐵𝑖,1 we have ˜𝑐𝑖,1 = ˜𝐾 ˜𝑠𝑖 ,
therefore we have extracted the witness to the relation. If 𝑑𝑖,2 ≠ 𝑑′
𝑖,2,
then the reduction computes
(cid:16)˜𝑟𝑖,2 − ˜𝑟′
(cid:16)𝑑′
𝑖,2
𝑖,2 − 𝑑𝑖,2
(cid:17)
(cid:17)
˜𝑠𝑖 :=
from ˜𝐴𝑖,2, such that ˜𝑐𝑖,0 = ˜𝐺 ˜𝑠𝑖 . From ˜𝑏𝑖,2 we have that 𝐾 ˜𝑠𝑖 = ( ˜𝑐𝑖,1/ ˜𝐺)
and therefore ˜𝑠𝑖 is a valid witness for the relation. It is not possible
for both 𝑑𝑖,1 ≠ 𝑑′
𝑖,2, since this would mean we have
˜𝑐𝑖,1 = ˜𝐾 ˜𝑠𝑖 = ˜𝐾 ˜𝑠𝑖 · 𝐺. Therefore we are able to extract a valid witness
in one of the branches, which contradicts the fact that the statement
was false.
□
𝑖,1 and 𝑑𝑖,2 ≠ 𝑑′
F SECURITY ANALYSIS OF DISTRIBUTED
RANDOMNESS GENERATION PROTOCOL
Proof of Theorem 6.3. We assume for simplicity that the ad-
versary corrupts all but one parties and the honest party is 𝑃1. We
define the following series of hybrid distributions.
Hyb0: Is identical to the IND-RAN experiment with the bit 𝑏 fixed
to 𝑏 = 0, i.e. A is given the honestly computed 𝑟0.
Hyb1: This is identical to the previous hybrid except that now each
of the commitments output by the adversary are individually force-
opened using TForceOp. Let (𝑠2, . . . , 𝑠𝑛) be the resulting integers
and let 𝑠1 the integer sampled by the honest 𝑃1 (in the call to the
RGen protocol). Then the adversary is given
𝑟0 =
𝑠𝑖 .
𝑛
𝑛
𝑖=1
𝑖=2
𝑟0 =
𝑠𝑖 + ˜𝑠
Hyb2: This is identical to the previous hybrid except that we com-
pute
where ˜𝑠 ← Z𝑞 is sampled uniformly and independently from 𝑠1.
Hyb3: Here the adversary is given a uniformly sampled integer.
Note that the latter hybrid is identical to the experiment IND-RAN
with the bit 𝑏 fixed to 𝑏 = 1. We now argue the indistinguishability
of the hybrids.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2682PrvL3(crs, stmt, wit): The prover routine does the following:
• For 𝑖 ∈ [𝛼], do the following:
– If 𝑟𝑖 = 1, i.e.,(cid:16)(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖 , 𝐾𝑠𝑖 · 𝐺)( ˜𝑐𝑖,0, ˜𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖 · ˜𝐺)(cid:17), do the following:
∗ Sample 𝑤𝑖, 𝑟𝑖,1 ← Z𝑄, ˜𝑤𝑖, ˜𝑟𝑖,1 ← Z ˜𝑞 and 𝑑𝑖,1 ← Z2𝜆
∗ Set 𝐴𝑖,1 := 𝐺𝑟𝑖,1 · (𝑐𝑖,0)𝑑𝑖,1, 𝐵𝑖,1 := 𝐾𝑟𝑖,1 · (𝑐𝑖,1)𝑑𝑖,1
∗ Set ˜𝐴𝑖,1 := ˜𝐺 ˜𝑟𝑖,1 · ( ˜𝑐𝑖,0)𝑑𝑖,1, ˜𝐵𝑖,1 := ˜𝐾 ˜𝑟𝑖,1 · ( ˜𝑐𝑖,1)𝑑𝑖,1
∗ Set 𝐴𝑖,2 := 𝐺 𝑤𝑖 , 𝐵𝑖,2 := 𝐾 𝑤𝑖
∗ Set ˜𝐴𝑖,2 := ˜𝐺 ˜𝑤𝑖 , ˜𝐵𝑖,2 := ˜𝐾 ˜𝑤𝑖
– If 𝑟𝑖 = 0, i.e.,(cid:16)(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖 , 𝐾𝑠𝑖)( ˜𝑐𝑖,0˜,𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖)(cid:17), do the following:
∗ Sample 𝑤𝑖, 𝑟𝑖,2 ← Z𝑄, ˜𝑤𝑖, ˜𝑟𝑖,2 ← Z ˜𝑞 and 𝑑𝑖,2 ← Z2𝜆
∗ Set 𝐴𝑖,1 := 𝐺 𝑤𝑖 , 𝐵𝑖,1 := 𝐾 𝑤𝑖
∗ Set ˜𝐴𝑖,1 := ˜𝐺 ˜𝑤𝑖 , ˜𝐵𝑖,1 := ˜𝐾 ˜𝑤𝑖
∗ Set 𝐴𝑖,2 := 𝐺𝑟𝑖,2 · (𝑐𝑖,0)𝑑𝑖,2, 𝐵𝑖,2 := 𝐾𝑟𝑖,2 · (𝑐𝑖,1/𝐺)𝑑𝑖,2
∗ Set ˜𝐴𝑖,2 := ˜𝐺 ˜𝑟𝑖,2 · ( ˜𝑐𝑖,0)𝑑𝑖,2, ˜𝐵𝑖,2 := ˜𝐾 ˜𝑟𝑖,2 · ( ˜𝑐𝑖,1/ ˜𝐺)𝑑𝑖,2
• Compute (𝑒1, . . . , 𝑒[𝛼]) ← H3(stmt, {𝐴𝑖,1, 𝐵𝑖,1, 𝐴𝑖,2, 𝐵𝑖,2, ˜𝐴𝑖,1, ˜𝐵𝑖,1, ˜𝐴𝑖,2, ˜𝐵𝑖,2}𝑖∈[𝛼])
• For 𝑖 ∈ [𝛼], do the following:
– If 𝑟𝑖 = 1, do the following:
– If 𝑟𝑖 = 0, do the following:
∗ Compute 𝑑𝑖,2 := (𝑒𝑖 − 𝑑𝑖,1) mod 2𝜆
∗ Compute 𝑟𝑖,2 := 𝑤𝑖 − 𝑠𝑖 · 𝑑𝑖,2,
∗ Compute 𝑑𝑖,1 := (𝑒𝑖 − 𝑑𝑖,2) mod 2𝜆
∗ Compute 𝑟𝑖,1 := 𝑤𝑖 − 𝑠𝑖 · 𝑑𝑖,1,
˜𝑟𝑖,2 := ( ˜𝑤𝑖 − ˜𝑠𝑖 · 𝑑𝑖,2) mod ˜𝑞
˜𝑟𝑖,1 := ( ˜𝑤𝑖 − ˜𝑠𝑖 · 𝑑𝑖,1) mod ˜𝑞
• Output 𝜋 := {𝑒𝑖, 𝐴𝑖,1, 𝐵𝑖,1, 𝐴𝑖,2, 𝐵𝑖,2, ˜𝐴𝑖,1, ˜𝐵𝑖,1, ˜𝐴𝑖,2, ˜𝐵𝑖,2, 𝑑𝑖,1, 𝑑𝑖,2, 𝑟𝑖,1, 𝑟𝑖,2, ˜𝑟𝑖,1, ˜𝑟𝑖,2}𝑖∈[𝛼]
VfyL3(crs, stmt, 𝜋): The verifier routine does the following:
• Parse 𝜋 := {𝑒𝑖, 𝐴𝑖,1, 𝐵𝑖,1, 𝐴𝑖,2, 𝐵𝑖,2, ˜𝐴𝑖,1, ˜𝐵𝑖,1, ˜𝐴𝑖,2, ˜𝐵𝑖,2, 𝑑𝑖,1, 𝑑𝑖,2, 𝑟𝑖,1, 𝑟𝑖,2, ˜𝑟𝑖,1, ˜𝑟𝑖,2}𝑖∈[𝛼]
• Check if (𝑒1, . . . , 𝑒𝛼) ?
• For 𝑖 ∈ [𝛼], check if all the following hold, and output 0 otherwise:
= H3(stmt, {𝐴𝑖,1, 𝐵𝑖,1, 𝐴𝑖,2, 𝐵𝑖,2, ˜𝐴𝑖,1, ˜𝐵𝑖,1, ˜𝐴𝑖,2, ˜𝐵𝑖,2}𝑖∈[𝛼])
– 𝑒𝑖
– 𝐴𝑖,1
– 𝐵𝑖,1
– 𝐴𝑖,2
– 𝐵𝑖,2
– ˜𝐴𝑖,1
– ˜𝐵𝑖,1
– ˜𝐴𝑖,2
– ˜𝐵𝑖,2
?
= (𝑑𝑖,1 + 𝑑𝑖,2) mod 2𝜆
?
= 𝐺𝑟𝑖,1 · (𝑐𝑖,0)𝑑𝑖,1
?
= 𝐾𝑟𝑖,1 · (𝑐𝑖,1)𝑑𝑖,1
?
= 𝐺𝑟𝑖,2 · (𝑐𝑖,0)𝑑𝑖,2
?
= 𝐾𝑟𝑖,2 · (𝑐𝑖,1 · 𝐺−1)𝑑𝑖,2
?
= ˜𝐺 ˜𝑟𝑖,1 · ( ˜𝑐𝑖,0)𝑑𝑖,1
?
= ˜𝐾 ˜𝑟𝑖,1 · ( ˜𝑐𝑖,1)𝑑𝑖,1
?
= ˜𝐺 ˜𝑟𝑖,2 · ( ˜𝑐𝑖,0)𝑑𝑖,2
?
= ˜𝐾 ˜𝑟𝑖,2 · ( ˜𝑐𝑖,1 · ˜𝐺−1)𝑑𝑖,2
• If all the above conditions hold, output 1, else output 0.
Figure 8: Prover and Verifier routine for NIZK proof for statements in language L3
Hyb0 ≈𝑐 Hyb1: By the perfect correctness of the commitment sche-
me, the hybrids only differ in the case where one of the commit-
ments output by the adversary is not well-formed. However, such
a commitment is always rejected unless the adversary computes a
proof 𝜋 for a false statement, which contradicts the verifiability of
the CCA timed commitment scheme.
Hyb1 ≈T𝜖 Hyb2: We show this indinstinguishability via a reduction
to the CCA security of the timed commitment scheme. Let A be
a PPT adversary with depth less than T𝜖 (for some 𝜖 < 1) that
distinguishes between the two hybrids. The reduction R against
the CCA security of the timed commitment proceeds as follows. The
reduction obtains crs of the timed commitment scheme. When the
adversary queries the RGen oracle, the reduction locally samples
(𝑠0, 𝑠1) ← Z𝑞 and sends (𝑠0, 𝑠1) to its challenger. It receives (𝑐, 𝜋)
from its challenger and sends (𝑐, 𝜋) to the adversary as reply to the
oracle query. The adversary outputs 𝑉 := {(𝑐2, 𝜋2), . . . , (𝑐𝑛, 𝜋𝑛)}.
The reduction forwards each of these to its own oracle O. If the
oracle responds with ⊥ for any of the pairs (𝑐𝑖, 𝜋𝑖), the reduction
sets 𝑚𝑖 = 0. Otherwise, the reduction receives 𝑚𝑖 as a response and
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2683defines a set {𝑚2, . . . , 𝑚𝑛}. The reduction sets
𝑛
𝑖=2
𝑟 =
𝑚𝑖 + 𝑠0
and returns 𝑟 to the adversary. The adversary responds with a bit
𝑏′ and the reduction outputs 𝑏′ as its own answer to the challenger.
This concludes the description of R.
Notice that the reduction is efficient and it running time is only a
polynomial (in 𝜆) factor slower than A. The reduction violates the
CCA security of the timed commitments with the same probability
as A violates the IND-RAN security. To see this, observe that we
have two cases where (𝑐, 𝜋) embeds 𝑠0 or 𝑠1. If (𝑐, 𝜋) indeed embeds
𝑠0, then 𝑟 is distributed as in hybrid Hyb1, otherwise 𝑟 is distributed
uniformly, as in Hyb2. This is a contradiction to the CCA security
of the timed commitments.
Hyb2 ≡ Hyb3: Since ˜𝑠 is uniformly chosen and Z𝑞 defines a field,
the two hybrid distributions are identical.
□
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2684