### NIZK Proof for Statements in Language \( L_2 \)

**Prover and Verifier Routine:**

1. **Initialization:**
   - For each \( i \):
     - Compute \( e_i = (d_{i,1} + d_{i,2}) \mod 2\lambda \).
     - Set \( A_{i,1} := G^{r_{i,1}} \cdot (c_{i,0})^{d_{i,1}} \).
     - Set \( B_{i,1} := K^{r_{i,1}} \cdot (c_{i,1})^{d_{i,1}} \).
     - Set \( A_{i,2} := G^{r_{i,2}} \cdot (c_{i,0})^{d_{i,2}} \).
     - Set \( B_{i,2} := K^{r_{i,2}} \cdot \left(\frac{c_{i,1}}{G}\right)^{d_{i,2}} \).
     - Set \( \tilde{A}_{i,1} := \tilde{G}^{\tilde{r}_{i,1}} \cdot (\tilde{c}_{i,0})^{d_{i,1}} \).
     - Set \( \tilde{B}_{i,1} := \tilde{K}^{\tilde{r}_{i,1}} \cdot (\tilde{c}_{i,1})^{d_{i,1}} \).
     - Set \( \tilde{A}_{i,2} := \tilde{G}^{\tilde{r}_{i,2}} \cdot (\tilde{c}_{i,0})^{d_{i,2}} \).
     - Set \( \tilde{B}_{i,2} := \tilde{K}^{\tilde{r}_{i,2}} \cdot \left(\frac{\tilde{c}_{i,1}}{\tilde{G}}\right)^{d_{i,2}} \).

2. **Random Oracle Setup:**
   - The random oracle \( H_3 \) is set at the \( i \)-th point with \( e_i \). The values \( (A_{i,1}, B_{i,1}, A_{i,2}, B_{i,2}, \tilde{A}_{i,1}, \tilde{B}_{i,1}, \tilde{A}_{i,2}, \tilde{B}_{i,2}) \) output by the simulator are statistically close to those in a honestly generated proof. This is because \( w_i \), if sampled uniformly from \( \mathbb{Z}_Q \), is distributed statistically close to \( r_{i,1} + s_i \cdot d_{i,1} \) (Lemma E.1).

### Simulation Soundness

**Theorem E.7 (Simulation Soundness):**
- The protocol in Figure 8 satisfies simulation soundness provided the \( 2\lambda \)-low order assumption and the strong root assumption hold in \( G \), in the random oracle model.

**Proof of Theorem E.7:**
- We assume without loss of generality that the false statement (and the index \( i \) where the statement fails) is fixed ahead of time. This assumption can be lifted with a polynomial loss in the success probability of the reduction by guessing the correct query to the random oracle.
- We assume that the false statement only pertains to the prime-order group \( \tilde{G} \). For the case of the class group elements, the argument is similar to the proof of Theorems E.3 and E.5.
- Our reduction \( R \) computes simulated proofs up until the point where the adversary made the random oracle query on the false statement. Here the reduction forks the execution and sets the \( i \)-th output of the random oracle to two different values \( e_i \neq e'_i \).
- By the forking lemma [63], with inverse polynomial probability, the adversary outputs two accepting proofs containing \( \tilde{A}_{i,1}, \tilde{A}_{i,2}, \tilde{B}_{i,1}, \tilde{B}_{i,2}, d_{i,1}, d_{i,2}, \tilde{r}_{i,1}, \tilde{r}_{i,1} \) and \( \tilde{A}_{i,1}, \tilde{A}_{i,2}, \tilde{B}_{i,1}, \tilde{B}_{i,2}, d'_{i,1}, d'_{i,1} \) (among other elements from \( G \)).
- Since \( e_i \neq e'_i \), it must be the case that either \( d_{i,1} \neq d'_{i,1} \) or \( d_{i,2} \neq d'_{i,2} \). If \( d_{i,1} \neq d'_{i,1} \), the reduction computes:
  \[
  \tilde{s}_i := \frac{\tilde{r}_{i,1} - \tilde{r}'_{i,1}}{d'_{i,1} - d_{i,1}}
  \]
  from \( \tilde{A}_{i,1} \), such that \( \tilde{c}_{i,0} = \tilde{G}^{\tilde{s}_i} \). Similarly, from \( \tilde{B}_{i,1} \) we have \( \tilde{c}_{i,1} = \tilde{K}^{\tilde{s}_i} \), and therefore, we have extracted the witness to the relation.
- If \( d_{i,2} \neq d'_{i,2} \), the reduction computes:
  \[
  \tilde{s}_i := \frac{\tilde{r}_{i,2} - \tilde{r}'_{i,2}}{d'_{i,2} - d_{i,2}}
  \]
  from \( \tilde{A}_{i,2} \), such that \( \tilde{c}_{i,0} = \tilde{G}^{\tilde{s}_i} \). From \( \tilde{B}_{i,2} \) we have that \( \tilde{K}^{\tilde{s}_i} = \left(\frac{\tilde{c}_{i,1}}{\tilde{G}}\right) \) and therefore \( \tilde{s}_i \) is a valid witness for the relation.
- It is not possible for both \( d_{i,1} \neq d'_{i,1} \) and \( d_{i,2} \neq d'_{i,2} \), since this would mean we have \( \tilde{c}_{i,1} = \tilde{K}^{\tilde{s}_i} = \tilde{K}^{\tilde{s}_i} \cdot G \). Therefore, we are able to extract a valid witness in one of the branches, which contradicts the fact that the statement was false.

### Security Analysis of Distributed Randomness Generation Protocol

**Proof of Theorem 6.3:**
- We assume for simplicity that the adversary corrupts all but one party, and the honest party is \( P_1 \). We define the following series of hybrid distributions.

**Hybrid Distributions:**

- **Hyb0:**
  - Identical to the IND-RAN experiment with the bit \( b \) fixed to \( b = 0 \), i.e., \( A \) is given the honestly computed \( r_0 \).

- **Hyb1:**
  - Identical to the previous hybrid except that now each of the commitments output by the adversary are individually force-opened using TForceOp. Let \( (s_2, \ldots, s_n) \) be the resulting integers and let \( s_1 \) be the integer sampled by the honest \( P_1 \) (in the call to the RGen protocol). Then the adversary is given:
    \[
    r_0 = \sum_{i=1}^n s_i
    \]

- **Hyb2:**
  - Identical to the previous hybrid except that we compute:
    \[
    r_0 = \sum_{i=2}^n s_i + \tilde{s}
    \]
    where \( \tilde{s} \leftarrow \mathbb{Z}_q \) is sampled uniformly and independently from \( s_1 \).

- **Hyb3:**
  - Here the adversary is given a uniformly sampled integer. Note that the latter hybrid is identical to the experiment IND-RAN with the bit \( b \) fixed to \( b = 1 \).

**Indistinguishability of Hybrids:**

- **Hyb0 ≈ Hyb1:**
  - By the perfect correctness of the commitment scheme, the hybrids only differ in the case where one of the commitments output by the adversary is not well-formed. However, such a commitment is always rejected unless the adversary computes a proof \( \pi \) for a false statement, which contradicts the verifiability of the CCA timed commitment scheme.

- **Hyb1 ≈ Hyb2:**
  - We show this indistinguishability via a reduction to the CCA security of the timed commitment scheme. Let \( A \) be a PPT adversary with depth less than \( T_\epsilon \) (for some \( \epsilon < 1 \)) that distinguishes between the two hybrids. The reduction \( R \) against the CCA security of the timed commitment proceeds as follows:
    - The reduction obtains crs of the timed commitment scheme.
    - When the adversary queries the RGen oracle, the reduction locally samples \( (s_0, s_1) \leftarrow \mathbb{Z}_q \) and sends \( (s_0, s_1) \) to its challenger.
    - It receives \( (c, \pi) \) from its challenger and sends \( (c, \pi) \) to the adversary as a reply to the oracle query.
    - The adversary outputs \( V := \{(c_2, \pi_2), \ldots, (c_n, \pi_n)\} \).
    - The reduction forwards each of these to its own oracle \( O \). If the oracle responds with \( \bot \) for any of the pairs \( (c_i, \pi_i) \), the reduction sets \( m_i = 0 \). Otherwise, the reduction receives \( m_i \) as a response and defines a set \( \{m_2, \ldots, m_n\} \).
    - The reduction sets:
      \[
      r = \sum_{i=2}^n m_i + s_0
      \]
      and returns \( r \) to the adversary.
    - The adversary responds with a bit \( b' \) and the reduction outputs \( b' \) as its own answer to the challenger.
    - Notice that the reduction is efficient and its running time is only a polynomial (in \( \lambda \)) factor slower than \( A \). The reduction violates the CCA security of the timed commitments with the same probability as \( A \) violates the IND-RAN security. To see this, observe that we have two cases where \( (c, \pi) \) embeds \( s_0 \) or \( s_1 \). If \( (c, \pi) \) indeed embeds \( s_0 \), then \( r \) is distributed as in hybrid Hyb1, otherwise \( r \) is distributed uniformly, as in Hyb2. This is a contradiction to the CCA security of the timed commitments.

- **Hyb2 ≡ Hyb3:**
  - Since \( \tilde{s} \) is uniformly chosen and \( \mathbb{Z}_q \) defines a field, the two hybrid distributions are identical.

□