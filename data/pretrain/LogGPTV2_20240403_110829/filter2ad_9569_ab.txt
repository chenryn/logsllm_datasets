在软件世界里，这个好办，只要执行!locks:
WinDBG 告诉我们有两个临界区处于锁状态。因为临界区是不可以跨进程的，所以可以确定刚才的230c线程一定在等待其中的一个。哪一个呢？
如果是32位进程，那么很容易通过分析参数确定下来，64位下，参数回溯变得如登月般困难。不过只有两个，分别看一下吧。细节略过，老雷使用了大约2秒确定下来是下面一个。也就是说，230c想要进的临界区，被4fcc线程捷足先登了。干脆一点，是4fcc占着卫生间不出来。
切换到这个4fcc线程，看它在做啥？
天啊，它也在做 RPC。任何技术一旦被滥用后果都是很重的，比如塑料，还有......
#### 寻找另一个RPC服务进程
4fcc 在调用谁呢？服务进程是哪一个？重用刚才的套路，切换到本地内核调试会话，找到 4fcc 线程，观察它的状态。
继续观察 ALPC 消息的信息：
哦，服务进程的名字叫 audiodg.exe，著名的人物啊，其大名叫 Windows Audio Device Graph
Isolation。很有博士范的一个名字。
注意上面显示的信息中 ServerThread
条目为空。不过，这并不代表没有服务线程，观察服务端口（QueuePort），可以看到有三个线程登记注册了完成端口（线程间快速协作机制，名字翻译为中文后有点不通，姑且不论），记下它们的线程ID，分别是2c1c、441c和493c。
值得注意的是，这个端口的队列有61条消息在排队。堵车堵的非常厉害。
不妨与没有排队的端口比较一下。
#### 第四架马车
下一步应该调试 audiodg 进程了，看它在忙什么，有那么多消息排队而不处理。
在LKD会话里观察它的概要信息，老雷意外发现它已经在被调试。
    0: kd> !process ffffc48d958a1080
    PROCESS ffffc48d958a1080
        SessionId: 0  Cid: 323c    Peb: e327bdb000  ParentCid: 0994
    FreezeCount 1
        ElapsedTime                       3 Days 15:38:12.880
        DebugPort                         ffffc48d9b413760
谁在调试它呢？老雷没有啊。这个信息让老雷很诧异。
思考片刻，有了推测，或许是它崩溃了，触发了JIT调试。打开任务管理器观察，果然如此，在会话0里有 windbg 附加在它身上了。还有另外几个 WinDBG
实例，看来后台服务崩溃了好几个，分别是 vmms、DELL 预装的 DDV 服务、以及windows自动更新服务。（这么多的崩溃或许与前几天的
Windows 10 自动升级有关，留待以后讨论。）
启动第四个 WinDBG 实例，以非入侵方式附加到 auduidg
进程，观察上面记录的三个监听线程。从栈回溯来看，它们都在调用NtWaitForWorkViaWorkerFactory，进入内核等待任务了。
    0:005> kc
     # Call Site
    00 ntdll!NtWaitForWorkViaWorkerFactory
    01 ntdll!TppWorkerThread
    02 KERNEL32!BaseThreadInitThunk
    03 ntdll!RtlUserThreadStart
看起来没什么问题啊？怎么回事呢？
沿着这个方向继续思考的话，方向就错了。上上下下，跟来跟去，跑了几百公里了吧，老雷有点累了，差点进入死胡同。
看线程列表，可以看到所有线程的挂起计数都是2，说明它们都处于挂起状态。
为什么都被挂起来了呢？因为某个地方发生爆炸了。
#### 爆炸现场
浏览所有线程，6号线程果然硝烟弥漫。
    0:006> kc
     # Call Site
    00 ntdll!RtlReportCriticalFailure
    01 ntdll!RtlpHeapHandleError
    02 ntdll!RtlpLogHeapFailure
    03 ntdll!RtlFreeHeap
    04 MaxxAudioRenderAVX64!DllUnregisterServer
    05 MaxxAudioRenderAVX64!DllUnregisterServer
    06 MaxxAudioRenderAVX64!DllUnregisterServer
    07 kernel32!BaseThreadInitThunk
    08 ntdll!RtlUserThreadStart
从 RtlpLogHeapFailure 和 RtlFreeHeap 就可以看出，是堆有关的问题。执行!heap，触发 WinDBG
检查堆的错误记录，果然报告错误：
错误类型：HEAP_FAILURE_BLOCK_NOT_BUSY，释放并非处于占用状态的块，简单说就是释放空闲块，或者说多次释放，double free。
如此看来，追到源头了。可以很负责任的说，音频驱动模块 MaxxAudioRenderAVX64
内部多次释放堆块，引发堆的错误检查机制发起异常，MaxxAudioRenderAVX64 模块应负全部责任。
前些天，安卓版的微信小程序在处理一个特别的字符串时会陷入死循环。今天，微信开发团队的同行公开发文，承认问题，并详细描述了bug的来龙去脉，这种开放的心态和实事求是的精神真是值得表扬。
无独有偶，老雷今日花了几个小时的时间，上下求索，四个调试器实例齐上阵，终于让问题水落石出，证明不是微信本身模块的问题，还微信程序以清白。
想到大半天的时间没有了，多少有些可惜。不过，想到搞清楚了一个问题，定位到了根源（希望maxx
audio的同行联系老雷获取崩溃现场的dump），而且记录下来的分析过程或许对软件同行们解决类似问题有所帮助，那么时间花的也值得了。分析过程中，老雷保存下了几个关键现场的转储文件，供以后交流和研习使用（有兴趣的同行请关注软件调试研习班针对[Windows的特别专题](https://mp.weixin.qq.com/s?__biz=MzA3NTk5MDIzNw==&mid=2647665378&idx=1&sn=e2418771317c9edb88155dfa4cda1702&chksm=874c9f50b03b16467b29baa19369a0ea3d73c9c6010397ea5577155382428dee35df005beac8&scene=21#wechat_redirect
"Windows的特别专题")）。
在写这篇文章的时候，还发现公众号编辑环境上传图片功能的一个bug，如果粘贴板里有图片的话，那么每次上传新图片后，都会自动选择粘贴板的图片（如下图），而不是用户希望的新上传图片。
* * *