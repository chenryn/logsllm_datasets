title:Poisoning Attacks to Graph-Based Recommender Systems
author:Minghong Fang and
Guolei Yang and
Neil Zhenqiang Gong and
Jia Liu
Poisoning Aacks to Graph-Based Recommender Systems
Minghong Fang
Iowa State University
PI:EMAIL
Neil Zhenqiang Gong
Iowa State University
PI:EMAIL
Guolei Yang
Facebook, Inc.
glyang@.com
Jia Liu
Iowa State University
PI:EMAIL
ABSTRACT
Recommender system is an important component of many web
services to help users locate items that match their interests. Sev-
eral studies showed that recommender systems are vulnerable to
poisoning aacks, in which an aacker injects fake data to a recom-
mender system such that the system makes recommendations as
the aacker desires. However, these poisoning aacks are either ag-
nostic to recommendation algorithms or optimized to recommender
systems (e.g., association-rule-based or matrix-factorization-based
recommender systems) that are not graph-based. Like association-
rule-based and matrix-factorization-based recommender systems,
graph-based recommender system is also deployed in practice, e.g.,
eBay, Huawei App Store (a big app store in China). However, how to
design optimized poisoning aacks for graph-based recommender
systems is still an open problem.
In this work, we perform a systematic study on poisoning aacks
to graph-based recommender systems. We consider an aacker’s
goal is to promote a target item to be recommended to as many
users as possible. To achieve this goal, our aacks inject fake users
with carefully craed rating scores to the recommender system.
Due to limited resources and to avoid detection, we assume the
number of fake users that can be injected into the system is bounded.
e key challenge is how to assign rating scores to the fake users
such that the target item is recommended to as many normal users
as possible. To address the challenge, we formulate the poisoning
aacks as an optimization problem, solving which determines the
rating scores for the fake users. We also propose techniques to solve
the optimization problem. We evaluate our aacks and compare
them with existing aacks under white-box (recommendation algo-
rithm and its parameters are known), gray-box (recommendation
algorithm is known but its parameters are unknown), and black-
box (recommendation algorithm is unknown) seings using two
real-world datasets. Our results show that our aack is eective
and outperforms existing aacks for graph-based recommender
systems. For instance, when 1% of users are injected fake users,
our aack can make a target item recommended to 580 times more
normal users in certain scenarios.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permied. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specic permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’18, San Juan, PR, USA
© 2018 ACM. 978-1-4503-6569-7/18/12...$15.00
DOI: 10.1145/3274694.3274706
CCS CONCEPTS
•Security and privacy ! Web application security;
KEYWORDS
Adversarial recommender systems, poisoning aacks, adversarial
machine learning.
ACM Reference format:
Minghong Fang, Guolei Yang, Neil Zhenqiang Gong, and Jia Liu. 2018.
Poisoning Aacks to Graph-Based Recommender Systems. In Proceedings of
2018 Annual Computer Security Applications Conference, San Juan, PR, USA,
December 3–7, 2018 (ACSAC ’18), 12 pages.
DOI: 10.1145/3274694.3274706
1 INTRODUCTION
In the era of big data, a fundamental challenge is to locate the data
that are relevant to a particular user. Recommender systems aim to
address this challenge: given a user’s historical behavior and social
data, a recommender system nds the data that match the user’s
preference. Indeed, recommender systems are widely deployed by
web services (e.g., YouTube, Amazon, and Google News) to recom-
mend users relevant items such as products, videos, and news. In
particular, collaborative ltering based recommender systems, which
analyze the correlations between users’ historical behavior data
for making recommendations, are widely deployed due to their
eectiveness and generality. Depending on the techniques used to
capture the correlations between users’ behavior data, collaborative
ltering based recommender systems can further include matrix-
factorization-based [17], association-rule-based [6, 22], and graph-
based [7] recommender systems. For instance, matrix-factorization-
based recommender systems are deployed by Netix to recommend
movies, association-rule-based recommender systems are deployed
by YouTube to recommend videos [6], and graph-based recom-
mender systems are deployed by eBay [25, 26] and Huawei App
Store (a big app store in China) [12, 13].
It is commonly believed that recommender systems recommend
users items that match their personal interests. However, several
studies [19–21, 24, 35] have demonstrated that recommender sys-
tems are vulnerable to poisoning aacks, which inject fake data to
a recommender system such that the recommender system makes
recommendations as an aacker desires. For instance, an aacker
can inject fake users with carefully craed fake rating scores to a
recommender system such that a target item is recommended to as
many users as possible. Conventional poisoning aacks [19, 21, 24]
(also known as shilling aacks) are agnostic to recommendation
381
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Minghong Fang, Guolei Yang, Neil Zhenqiang Gong, and Jia Liu
algorithms, i.e., they are not optimized to a certain type of recom-
mender systems. erefore, such aacks oen achieve suboptimal
performance when the recommendation algorithm is known. To
address this limitation, recent studies [20, 35] proposed poisoning
aacks that were optimized for a particular type of recommender
systems. For instance, Li et al. [20] proposed poisoning aacks
optimized for matrix-factorization-based recommender systems,
while Yang et al. [35] proposed poisoning aacks optimized for
association-rule-based recommender systems. However, how to
design optimized poisoning aacks to graph-based recommender
systems is still an open problem.
In this work, we aim to design poisoning aacks for graph-
based recommender systems [7, 12, 13, 25, 26]. A graph-based
recommender system uses a user preference graph to represent
users’ rating scores to items. In the graph, a node is a user or an
item, an edge between a user and an item means that the user rated
the item, and the edge weight is the corresponding rating score.
To make recommendations to a user, the recommender system
performs a random walk in the user preference graph, where the
random walk starts from the user and jumps back to the user with
a certain probability (called restart probability) in each step. Aer
the random walk converges, each item has a stationary probability
that essentially characterizes the closeness between the item and
the user. Finally, the system recommends the items that have the
largest stationary probabilities to the user.
In our poisoning aacks, an aacker’s goal is to promote a target
item, i.e., making a graph-based recommender system recommend
the target item to as many users as possible. Like most existing
poisoning aacks to recommender systems [19–21, 24], our aacks
inject fake users with carefully craed rating scores to the target
recommender system to achieve the aack goal. Due to limited
resources and to avoid detection, we assume an aacker can inject
m fake users at most and each fake user rates n items at most. For
convenience, we call the items, which a fake user rates, the user’s
ller items. e key challenge is to determine the ller items and
their rating scores for each fake user. To address the challenge, we
formulate poisoning aacks to graph-based recommender systems
as an optimization problem, whose objective function is the hit
ratio of the target item (i.e., the fraction of normal users whose
recommended items include the target item) and whose constraints
are that at most m fake users with at most n ller items can be
injected. Solving this optimization problem produces m fake users
that maximize the hit ratio of the target item.
However, this optimization problem is computationally intractable
because 1) the hit ratio is related to the fake users’ rating scores in a
very complex way, and 2) the rating scores are integer variables. To
address the computational challenge, we propose several techniques
to solve the optimization problem approximately. Specically, we
approximate the hit ratio using the items’ stationary probabilities,
which are used to make recommendations in graph-based recom-
mender systems. Moreover, we relax the fake users’ rating scores
as continuous variables, solve the optimization problem, and then
generate ller items and their integer rating scores based on the
continuous variables. Finally, we propose a projected gradient de-
scent based method to solve the optimization problem with an
approximate hit ratio and relaxed continuous variables.
We evaluate our poisoning aacks and compare them with sev-
eral existing aacks using two real-world datasets. First, we eval-
uate the aacks under the white-box seing, i.e., the graph-based
recommendation algorithm and its parameter (i.e., restart prob-
ability) are known to the aacker. We nd that our aack can
eectively enhance the hit ratio of a target item. For instance, when
the system recommends 10 items to each user and the number of
injected fake users is 1% of the number of normal users, our at-
tack could improve the hit ratio of an unpopular target item by
around 580 times. Moreover, our aack is signicantly more eec-
tive than existing aacks for graph-based recommender systems.
For instance, compared to the poisoning aack proposed by Yang
et al. [35], our aack can improve the hit ratio from 0.0% to 0.4%
for an unpopular target item. e reason is that existing aacks are
not optimized for graph-based recommender systems. Second, we
evaluate the aacks under gray-box seing (the graph-based recom-
mendation algorithm is known but its parameter is unknown) and
black-box seing (the recommendation algorithm is unknown). We
nd that, in the gray-box seing, even if the aacker does not know
the restart probability, our aack can still substantially improve the
hit ratios of target items. In the black-box seing, we assume an
aacker generates fake users based on a graph-based recommender
system, while the target recommender system is based on matrix
factorization. Our results show that our aacks can also transfer to
matrix factorization based recommender systems.
We also study detecting fake users via supervised machine learn-
ing techniques and their impact on the eectiveness of poisoning
aacks. Intuitively, the rating scores of fake users are generated in
specic ways, and thus it could be possible to distinguish between
normal users and fake users using their rating scores. Specically,
we extract features from a user’s rating scores and learn a binary
classier using a training dataset that includes both normal users
and fake users. e binary classier is then used to predict a user
to be normal or fake. We nd that a small fraction of normal users
are falsely predicted to be fake, while a large fraction (20%⇠50%) of
fake users are falsely predicted to be normal. e service provider
could deploy such a detector to predict fake users and exclude the
predicted fake users from the recommender system. We evaluate
our poisoning aacks and existing aacks under such scenario.
We nd that the poisoning aacks are still eective when such
a detector is deployed, and our aack is still more eective than
existing aacks. e reason is that a large fraction of fake users are
not detected.
In summary, our contributions are as follows:
• We provide the rst systematic study on poisoning aacks to
graph-based recommender systems. We formulate poisoning
aacks as an optimization problem and propose techniques
to solve the optimization problem approximately.
• We extensively evaluate our aacks and compare them with
existing aacks using two real-world datasets.
• We study detecting fake users using their rating scores and
evaluate the eectiveness of poisoning aacks when such a
detector is deployed.
382
Poisoning Aacks to Graph-Based Recommender Systems
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
2 BACKGROUND AND RELATED WORK
2.1 Collaborative Filtering
Collaborative ltering based recommender systems have been widely
deployed in various web services such as Amazon, YouTube, Net-
ix, and Google Play. Suppose we are given a user-item rating score
matrix, where the entry rui is the rating score that user u gave to
item i, e.g., a product on Amazon, a video on YouTube, a movie on
Netix, and an app on Google Play. For instance, a rating score rui
can be 0, 1, 2, 3, 4, or 5, where rui=0 indicates that u did not rate
the item i, 1 means the most negative rating score, and 5 means the
most positive rating score. e goal of collaborative ltering is to
recommend each user in the user-item rating score matrix N items
that the user did not rate before but the user may have interests in,
via analyzing the rating score matrix. Depending on the techniques
that are used to analyze the rating score matrix, collaborative lter-
ing can be roughly classied to 4 categories, i.e., neighborhood-based,
association-rule-based, matrix-factorization-based, and graph-based.
Neighborhood-based, association-rule-based, and matrix-fac-
torization-based recommender systems: Neighborhood-based
recommender systems [27] nd neighbors of a user or neighbors
of an item in order to recommend items to a user. For instance, to
recommend a user items, the methods can rst nd the nearest-
neighbors of the user, predict the user’s rating scores to items based
on the rating scores of the nearest neighbors, and recommend the
N items that have the highest predicted rating scores to the user.
Association-rule-based recommender systems [6, 22] aim to identify
frequent co-occurrence between items in user reviews. For instance,
if many users give high rating scores to both item A and item B,
then there is a certain association between the two items. For a user
who gave a high rating score to item A, item B is recommended
to the user. Matrix-factorization-based recommender systems [17]
assume that the user-item rating score matrix can be explained by a
small number of latent factors. Based on the assumption, they use a
low-rank matrix to approximate the user-item rating score matrix.
e low-rank matrix predicts missing values in the user-item rating
score matrix, i.e., for each user, the low-rank matrix predicts rating
scores to all items that the user did not rate before; and the N items
that have the highest predicted rating scores are recommended to
the user.
Graph-based recommender systems: In this work, we focus on
graph-based recommender systems [7]. Graph-based recommender
systems were deployed by several popular web services such as
eBay [25, 26] and Huawei App Store [12, 13] in China. e key idea
of graph-based recommender system is to model users’ preference
for items as a weighted bipartite graph G = (U , I, E), namely user
preference graph. e two sets of vertex U and I represent the user
set and the item set, respectively; an edge (u, i) between a user
u 2 U and an item i 2 I represents that the user rated the item; and
the weight of an edge (u, i) is the rating score that the user gave
to the item. Figure 1 illustrates a user preference graph with an
example of 3 users and 3 items.
To generate the top-N recommendation list for a user, the rec-
ommender system performs a random walk in the graph, where the
random walk starts from the user and jumps back to the user with
a probability   in each step, where   is called restart probability.
e stationary probability distribution of the random walk is used
383
Figure 1: An illustration of user preference graph
to rank items and make recommendations. We denote by pu the
stationary probability distribution of the random walk that starts
from the user u. en, the stationary probability distribution is a
solution of the following linear system:
pu = (1    ) · Q · pu +   · eu,
(1)
where eu is a unit vector whose uth entry is 1 and all other entries
are 0, and the matrix Q is called transition matrix, which is dened
as follows:
rxz
rx Õz2 x
0
if (x,  ) 2 E
otherwise,
(2)
Qx  =8>><>>:
where  x is the set of neighbors of node x. More specically, for
a user node x,  x is the set of items that were rated by x; for an
item node x,  x is the set of users that rated x. To solve pu, we start
from a random probability distribution and then iteratively update
pu as p(t +1)
= (1    ) · Q · p(t)u +   · eu until convergence. en,
we rank the items that were not rated by the user u with respect
to their stationary probabilities. e top-N items with the largest
stationary probabilities are recommended to the user u.
2.2 Attacks to Recommender Systems
u
2.2.1
Security Aacks. ese aacks aim to spoof a recom-
mender system such that a target item is recommended to as many
or few users as possible. Specically, poisoning aacks (also known
as shilling aacks) [19, 21, 24] aim to inject fake users with fake
rating scores to the system such that a bad recommender system
is learnt from the user-item rating score matrix. Prole pollution
aacks [34] aim to pollute the rating behavior of normal users
to manipulate the recommendations to them. By analogy to ad-
versarial machine learning, poisoning aacks are to manipulate
ABCMikeEricJohnMikeEricJohnABC3514253User-item ratingsUser preference graphACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Minghong Fang, Guolei Yang, Neil Zhenqiang Gong, and Jia Liu
recommender systems at “training time”, while prole pollution
aacks are to manipulate recommender systems at “testing time”.
Poisoning attacks: Poisoning aacks were rst studied more than
a decade ago [19, 21, 24]. However, these aacks are heuristics-
driven and are not optimized to a particular type of recommender
systems. For instance, in random aacks [19], given the number