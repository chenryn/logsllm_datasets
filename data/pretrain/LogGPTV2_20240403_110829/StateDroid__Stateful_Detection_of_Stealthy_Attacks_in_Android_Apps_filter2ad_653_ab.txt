ringer and blocking an incoming call. Such functionalities can be
captured by actions, each of which involves a sequence of API calls
on multiple Android objects. However, the states of such objects
may change due to non-action related API calls, which may in turn
affect the API calls that accomplish an action.
In summary, these heterogeneous features pose three challen-
ges to stealthy attack detection: (1) detect actions that capture
application-specific functionalities; (2) keep track of states of An-
droid objects and use them to detect actions of an attack; (3) detect
sequences of actions that make up an attack. StateDroid is designed
to address these three challenges.
...Stealthy Attack ReportAPI-callEventsActionEventsDerive Callback SequencesDetect API Calls…1: Uri uri = Uri.parse(“tel:1234”);2: Intent it = new Intent ( CallAction, uri);3: startActivity(it);...API Call DetectorAction DetectorAttack DetectorLookup TableBlock calls and SMS silentlyObject State MachinesHorn-clause Generator Theorem ProverHorn-clause Generator Theorem ProverHorn-clause Generator Theorem ProverAttack State Machines200ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Mohsin Junaid, Jiang Ming, and David Kung
3 STATEDROID OVERVIEW
To detect the stealthy attack presented in the motivating example,
StateDroid performs three tasks in one go: (1) examine the bytecode
of of onReceive() method to identify APIs involved in the three
attack actions (silence device ringer, block incoming phone call,
and restore device ringer); (2) detect actions based on identified
API calls, their input parameter values, and states of the involved
objects; (3) use temporal order of detected actions to detect the
attack.
3.1 Architecture
These tasks described above are respectively accomplished by the
three components of StateDroid shown in Figure 1: API Call Detec-
tor, Action Detector, and Attack Detector.
API Call Detector: To detect stealthy attacks in Android apps,
StateDroid first derives sequences of callbacks from Android com-
ponent lifecycle models. Such callback sequences are used to guide
the analysis of an Android app. In particular, each callback function
in the sequence is statically examined to identify Android API calls
that can be used to launch an attack. For example, API calls such as
the ones invoked on lines 5-6 and 10-14 in Listing 1 are identified.
Action Detector: The resulting sequences of API calls and involved
objects are then analyzed to detect attack actions, such as silencing
the ringer and blocking an incoming call. Since an attack action
may involve several objects, and an API call may change the state
of the callee object, we design Object State Machines (OSMs) to
model attack action behaviors. The sequences of API calls are used
to trigger the state transitions of OSMs. Whenever an OSM reaches
a state that indicates completion of an action, an attack action is
detected and broadcast to the next component.
Attack Detector: StateDroid models each category of attack using
an Attack State Machine (ASM). Each state of an ASM represents
the status of an attack and a transition represents a detected attack
action. By default, each ASM begins with an initial state. It makes
a transition to a new state if an attack action is detected, and the
ASM is in a state expecting the attack action. A potential attack is
identified if one of the ASMs reaches an attack state.
3.2 Advance Over State-of-the-Art Work
The conceptual difference between StateDroid and related state-
of-the-art work [6, 7, 30, 49] is state behavior models vs. control-
flow/data-flow models. In particular, FlowDroid [6, 7] and Dex-
teroid [30] are taint analyzers, which use control-flow/data-flow
models. Sufatrio et al. [49] propose an API sequence-based specifi-
cation for action detection in which any two APIs are connected
with a control flow or taint flow. By contrast, StateDroid captu-
res the state behaviors of attacks that are executed by sequences
of actions, which give StateDroid several advantages. First, they
enable StateDroid to detect stealthy attacks that involve multiple
states. In comparison, FlowDroid, Dexteroid and Sufatrio et al’s
work were not designed to detect state behavior. It is also difficult
to extend either of these existing work to provide capabilities of
StateDroid, due to the fundamental difference in the underneath
computational models. For example, state machines can remember
the previous states as well as accumulate knowledge about prior
API calls. Control-flow and data-flow models do not possess such
memories. Second, state machines can model attack behaviors more
accurately, for example, a machine may go back to a previous state
due to a reversal action, as seen in benign apps. This may reduce
false positives, or detect more sophisticated attacks that pretend to
be benign. The separation into Object State Machines and Attack
State Machines (ASMs) allow an attack action to be reused by mul-
tiple ASMs. This also facilitates adding of new attack actions and
ASMs. By contrast, extending FlowDroid, Dexteroid or Sufatrio et
al’s work to detect new types of attack is difficult, if not impossi-
ble. Our comparative evaluation in Section 7.3 demonstrates the
advantages of StateDroid.
4 API CALL DETECTOR
StateDroid detects API calls by analyzing callbacks and developer-
defined methods that are invoked by callbacks. Android OS invokes
callbacks to respond to user-interaction events and system events
such as low memory. Moreover, the OS invokes callbacks in specific
orders, as dictated by the lifecycle models of Android components.
Each lifecycle model can be viewed as a state machine, with states
representing statuses of the components and transitions represen-
ting lifecycle callbacks. Ideally, we can perform graph traversals
to derive callback sequences from the Android lifecycle models.
After that, we analyze the callbacks in the given order to detect the
API call sequences that may launch an attack. However, Android-
supplied lifecycle models [4] omit many important states and state
transitions. The recent study [30] has pointed out that incomplete
lifecycle models can lead to imprecise analysis results and many
missed attacks. Therefore, it is necessary to reengineer lifecycle
models and use them to derive callback sequences.
In this section, we present reengineering of lifecycle models,
followed by derivation of event sequences from the reengineered li-
fecycle models, derivation of callback sequences from event sequen-
ces, and finally the analysis of callbacks in each callback sequence
to identify API call sequences. For simplicity, we present each of
these for the activity component only. The other three components
can be done similarly.
4.1 Reengineering Lifecycle Models
We first identify all existing callback functions for the activity com-
ponent from Android API documentation. Second, we create an
Android app, in which every activity implements all of the lifecycle
callbacks. Moreover, a call to the Log.v() is inserted into all of
the callbacks of each activity to record information when the call
is invoked, including the event that causes the invocation of the
callback, the begin state, and the end state of the event. Third, all
possible events that an activity can receive are generated to cause
Android OS to invoke sequences of callbacks. After that, we ana-
lyze the log file to identify events, their begin states and end states,
as well as the corresponding callback sequences. These are used
to construct a complete activity lifecycle model, which is a state
machine with transitions representing events.
We also maintain an event-callback sequence correspondence
table to map all events to their corresponding callbacks invoked by
the Android OS. For example, when an activity is created for the
first time, a launchActivity event is generated to cause invocation of
five activity callbacks (onCreate(), onStart(), onPostCreate(),
201StateDroid
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
if s is a user interface state && s.visits > 0 then
◃ user interface state is visited the second time
◃ It implies that s is not a UI state
return
print trans
return
if s.visits == 2 then
1: procedure deriveEventSeqences(s, trans)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
curV isits = s.visits
s.visits + +
for each transition t going out of s do
let s′ be the destination state of t
if s (cid:44) s′ then
trans′ = trans
append t to trans′
deriveEventSeqenses(s′, trans′)
s.visits = curV isits
Figure 2: Algorithm for deriving event sequences.
onResume(), and onPostResume()) in the given order. A tap to
re-launch the activity or app triggers relaunchActivity event which
displays back to the activity again. The mapping table contains
information on all such events and their corresponding callback
sequences. Note that the callback sequence for the launchActi-
vity event contains two additional callbacks (onPostCreate() and
onPostResume()), which are omitted by Android-supplied activity
lifecycle model [4].
4.2 Deriving Event & Callback Sequences
Android apps are interactive software, meaning that the app’s functi-
onality is accomplished through interaction with the app user. Each
user-interaction operation causes the Android OS to generate a
sequence of events, such as a sequence of hideActivity and relaun-
chActivity events. These events trigger the activity to go through
a sequence of states, and eventually cause it to return to the user
interface state in which the app expects the next user operation.
The next user operation occurs independently of all previous user
operations. The derivation of event sequences reflects this observa-
tion so that each derived event sequence visits the user interface
state twice. The first visit waits for the initial user-interaction ope-
ration. The second visit marks the completion of the processing of
the events and waits for the next user-interaction operation.
Figure 2 presents the algorithm of deriving event sequences. It
begins with the initial state of the activity lifecycle model and visits
each state by following the transitions in a depth-first manner [17].
The algorithm takes two input parameters: the state being visited,
denoted s, and the list of transitions that have been traversed, de-
noted trans. Initially, s is the initial state, and trans is an empty list.
Several states and transitions of the lifecycle model may form a
cycle, such as state A goes to state B, state B goes to state C, and C
goes to A. To include transitions involved in a cycle, the algorithm
allows a state to be visited more than two times. We use s.visits to
keep track of the number of visits to state s. When applied to the
activity lifecycle model, it derives 26 event sequences.
The event sequences produced above are used to generate call-
back sequences using the event-callback sequence correspondence
table produced in Section 4.1. More specifically, each event in an
event sequence is replaced by its corresponding callback sequence.
4.3 Detecting API Call Sequences
StateDroid examines the callbacks in the order as they appear in
each of the callback sequences and analyzes the Dalvik bytecode
instructions of the callbacks to identify sequences of API calls. For
each callback method and developer-defined method, StateDroid
invokes Androguard [19] to produce a control flow graph (CFG).
We perform a reverse-post-order traversal [11] on the CFG to pro-
duce a partial order for analyzing basic blocks. In this way, every
predecessor basic block in the CFG is analyzed before its successor
basic blocks.
StateDroid uses a stack of lookup tables to maintain information
about the objects and primitives created, updated, or used by the
instructions. The table entries store information such as data values,
data types, and identifiers (or names) for all objects and primitives.
The global-level objects and primitives such as static fields are
maintained using global level lookup tables. Initially, the stack of
lookup tables is empty. When a basic block is entered, a lookup
table is created and pushed onto the stack. When a basic block is
exited, the lookup table on top of the stack is popped and discarded.
To look up an object or a primitive, we search the lookup tables
from the top of the stack down to the bottom until an entry is found.
The steps of instruction analysis are as follows. If an instruction
defines a new object or a primitive, a new entry is created in the
lookup table on top of the stack. The new object or primitive is
represented by a register name in Dalvik bytecode for identification.
The state of the created object is initialized to the initial state of
its corresponding Object State Machine. If an instruction modifies
the object, its entry in the lookup table is also updated accordingly.
If an instruction invokes an Android API and that API is used by
an action, then an API call event is created and sent to the Action
Detector, and the analysis continues with the next instruction. The
API call event contains the information of the API call, the receiver
object, the parameters, and the call context.
We illustrate the above flow using Listing 1. When the analysis
of bytecode instructions enters the onReceive(Context contxt,
Intent paramIntent) method on line 2, a lookup table is created
and pushed onto the stack. Besides, two entries are created in
the lookup table for the two parameters that are passed in. The
state for the contxt entry is set to “ContextDefined", because this
contxt object is already created and defined by the Android OS
before being passed as an input parameter. The analysis detects
the getSystemService("audio") API call on line 5, for which the
API Call Detector generates an API call event and sends it to Action
Detector. This event also contains a lookup table entry which, as
discussed above, the API Call Detector creates for an object returned
by the API call. Similarly, for the setRingerMode(0) API call on
line 6, an API call event is created and sent to the Action Detector.
5 ACTION DETECTOR
Taking the API call events as inputs, the action detector identifies
actions that can be used to launch an attack. Actions perform app-
level functionalities such as setting the ringer to silent mode, starting
a call, and blocking a call. An action often involves multiple API
202ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Mohsin Junaid, Jiang Ming, and David Kung
object returned by the function depends on the parameter that is
passed to the function. To determine the return type, we parse the
API documentation for the class that contains the function. For ex-
ample, the summary of constants for the Context class contains the
following texts: “String AUDIO_SERVICE Use with getSystemSer-
vice(String) to retrieve a AudioManager for handling management
of volume, ringer modes and audio routing.” The parsing results
are then used to generate the following Horn clause C1:
C1: -Context(x, u) | AudioManager(y, [mode=10],
_call(y=getSystemService("AUDIO_SERVICE"), x, u)).
We use Android class names as predicate symbols and function
names as function symbols. “_call(...)” means calling a function
of an object x in state u and returns y. The above Horn clause
states that if x is a Context object in state u, then the getSystemSer-
vice(“AUDIO_SERVICE”) function call to x returns an AudioMana-
ger object y with an unknown ringer mode (denoted by [mode=10])
in the resulting new state.
Action Formalization: In addition to API formalization, we also
need to formalize the actions. Each action is formally specified with
a precondition and a postcondition. The precondition specifies the
condition or initial state for the action to take place. The postcon-
dition specifies the condition to become true when the action is
detected. For example, to set the ringer mode to silent, one must
access the context object. This means that in the initial state S0,
a Context object must exist. Whenever the ringer is set to silent
mode or normal mode, an action is detected and broadcast to the
Attack State Machines. Our goal is to prove that these actions will
be broadcast. These lead to the following clauses:
Context(context, [ ], S0).
-AudioManager(x, [mode=0], u) | broadcast(ringer_silent, u).
-AudioManager(x, [mode=2], u) | broadcast(ringer_normal, u).
-broadcast(ringer_silent, u) | $ans(broadcast(ringer_silent, u)).
-broadcast(ringer_normal, u) | $ans(broadcast(ringer_normal, u)).
“$ans(...)” is a mechanism to tell the theorem prover to print out
the API call sequence that leads from the initial state to an action
detection state:
5.3 Generating API Call Sequences
API call sequences that begin with the initial state and reach an
action detection state are generated using a theorem prover such
as Prover9/Mace4 [36]. For example, the Horn clauses presented
in the previous section produce several proofs. Three of them are
shown below:
$ans(broadcast(ringer_normal, _call(setRingerMode(2), x,
_call(x=getSystemService("AUDIO_SERVICE"), context, S0)))))).
$ans(broadcast(ringer_silent, _call(setRingerMode(0), x,
_call(x=getSystemService("AUDIO_SERVICE"), context, S0)))))).
$ans(broadcast(ringer_silent, _call(setRingerMode(0), x,
_call(setRingerMode(2 ), x, _call(setRingerMode(0), x,
_call(x=getSystemService("AUDIO_SERVICE"), context, S0)))))).
Figure 3: Object State Machines for detecting ringer_silent
and ringer_normal actions.
calls to several Android objects. For example, setting the ringer to
silent mode requires two API calls: (1) obtain an AudioManager
object by calling the getSystemService(...) function of a Context ob-
ject, and (2) call AudioManager.setRingerMode(0) to set the ringer
to silent mode. We wish to stress that the second API call does not
need to occur strictly right after the first as long as the second takes
place after the first. Moreover, the API call sequence to accomplish
an action is not unique. For example, the following sequence of
actions will also set the ringer to the silent mode: (1) obtain the Au-
dioManager object from an app’s context, (2) call setRingerMode(2)
of this object to set the ringer to the normal mode, and (3) call
setRingerMode(0) of the object to set the ringer to the silent mode.
5.1 Object State Machines
Above observation inspires us using an aggregate of Object State
Machines (OSMs) to model the temporal behavior of actions in-
volving multiple objects. Figure 3 shows two OSMs for detecting
ringer_silent and ringer_normal actions. Initially, a context object ex-
ists, as indicated by state S0. Whenever a getSystemService(“audio”)
API call event to the context object is received, a state transition ta-
kes place. As a consequence, state S1 of the second OSM is entered.
After this, many API call events may arrive, but only a setRinger-
Mode(0) or setRingerMode(2) event can cause the second OSM to
make a state transition and broadcast the detection of a ringer_silent
or ringer_normal action to the top-level Attack State Machines.
5.2 API & Action Formalization
API Formalization: To construct the OSMs, we derive the effects