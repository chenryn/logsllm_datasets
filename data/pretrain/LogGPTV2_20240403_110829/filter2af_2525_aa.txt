原文：
眼下，JavaScript已成为现代Web浏览器中最常用的技术之一，而且，使用客户端JavaScript框架（如AngularJS、ReactJS和Vue.js）构建的应用程序已经将大量功能和逻辑转移至前端。
    随着客户端功能/逻辑的增加，客户端的攻击面也会随之增加。
作为安全测试人员，我们必须了解这些应用程序的攻击面。对我们来说，挖掘应用程序中的潜在安全问题，必须掌握相关的信息，为此，必须知道要查找什么信息、在哪里查找以及如何查找所需的信息。
在本文中，我们将为读者介绍如何对客户端JavaScript代码进行静态分析，以挖掘应用程序中潜在的安全问题。
    在这篇文章中，我们专注于通过静态分析来发现安全问题。因此，这里不会深入研究性能分析或功能测试。
所谓静态分析，简单来说，就是在不执行代码的情况下，完成相应的分析工作。
**需要寻找哪些信息？**
* * *
作为渗透测试人员，对客户端JavaScript进行静态分析时，我们或多或少会对以下几类信息感兴趣：
  1. 能够增加攻击面（URL、域等）的信息
  2. 敏感信息（如密码、API密钥、存储设备等）
  3. 代码中潜在的危险区域（如eval、dangerouslySetInnerHTML等）
  4. 带有已知漏洞的组件（如过时的框架等）
* * *
静态分析过程如下所示：
  1. 在应用程序中识别和收集JavaScript文件
  2. 提高所收集JavaScript代码的可读性（反精简/去混淆）
  3. 识别可以用来挖掘安全问题的线索 
**收集JavaScript文件**
* * *
1.如果您使用Burp Suite测试应用程序，那么，可以通过多种方法来收集应用程序中的所有JavaScript文件。
    我们可以通过用户驱动的工作流程对Web应用程序进行测试，像最终用户那样，通过“浏览”整个应用程序来开始测试。
通过让Burp代理发送流量来浏览应用程序。完成“浏览”后，我们就可以使用Burp的tool-set来提取所有JavaScript文件了。
-如果您使用的是Burp Suite Community Edition，则可以切换至proxy > HTTP history，并通过显示过滤器仅显示应用程序使用的那些JavaScript文件。您还可以复制显示的所有JavaScript文件的URL。
Burp显示过滤器仅显示给定应用程序的JavaScript文件
复制过滤后显示的所有JavaScript文件的URL
-如果您使用的是Burp Suite Professional版本，那么，您不仅可以复制应用程序中所有JavaScript文件的URL，还可以导出所有脚本。在Target > Site map选项卡中右键单击感兴趣的站点，然后选择Engagement tools> Find scripts，这里不仅能够导出该应用程序中的所有脚本，还可以复制相应的URL。
利用Burp的“Find Scripts”功能识别应用程序中的所有JS文件
利用Burp的"Find Scripts"功能不仅可以导出所有脚本，还能导出相关的URL
2.另一种迅速找出应用程序中的JavaScript文件的方法是挖掘诸如[Wayback Machine](https://archive.org/web/
"Wayback Machine")之类的互联网档案数据库。不过，这种技术完全是被动式的，因为，我们不会向目标应用程序服务器发送任何请求。
    挖掘[Wayback Machine](https://archive.org/web/ "Wayback Machine")等互联网档案对于识别应用程序中的JavaScript文件非常有用。有时，您将能够找到服务器上未删除的旧JavaScript文件。
  * [waybackurls](https://github.com/tomnomnom/waybackurls/ "waybackurls")是一个利用Wayback Machine搜索目标网站的JavaScript文件（或任何其他URL）的简洁工具。
    go get waybackurls
    waybackurls internet.org | grep "\.js" | uniq | sort
使用“waybackurls”提取属于Wayback Machine归档中列出的域的JavaScript文件的URL
-使用Wayback Machine时，可能会出现误报的情况，即给出服务器上已经不存在的JavaScript文件。收集JavaScript文件的URL列表后，我们就可以使用curl快速检查服务器上JavaScript文件的状态了
    cat js_files_url_list.txt | parallel -j50 -q curl -w 'Status:%{http_code}\t Size:%{size_download}\t %{url_effective}\n' -o /dev/null -sk
使用cURL快速检查服务器上JavaScript文件的状态
**提高所收集的JavaScript代码得可读性**
* * *
有时，收集的JavaScript文件可读性非常差。具体原因，可能是开发人员对JavaScript代码进行了精简或混淆处理。
    精简是指在不影响浏览器处理资源的方式的情况下，删除不必要或冗余数据的过程，例如删除代码注释和格式化字符、删除未使用的代码、使用较短的变量和函数名称等。
         混淆则涉及对程序进行相应的修改，如修改变量、函数和成员的名称，让程序代码变得晦涩难懂。
-有许多工具都可以用来精简JavaScript代码。其中，UglifyJS就是一个简洁的JS代码工具，可以通过npm包安装
使用UglifyJS精简JavaScript代码
-我们可以利用各种工具来精简JavaScript代码。其中，[JS Beautifier](https://github.com/beautify-web/js-beautify "JS Beautifier")不仅可以美化代码，还能对采用某些混淆机制的代码进行去混淆的优秀工具。您可以通过[node.js](https://www.npmjs.com/package/js-beautify "node.js")、[python](https://pypi.org/project/jsbeautifier/ "python")、[online](https://beautifier.io/ "online")或[VS Code](https://github.com/HookyQR/VSCodeBeautify "VS Code")等代码编辑器使用该工具。