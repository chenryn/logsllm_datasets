[if]-[else] statement
[FS] variable
35 36 52
arithmetic operators
36 44
47
coercion rules
44
coercion-to string
coercion*to number
45
control-flov statenents
45
48
numeric comparison
44
string comparison
44
The next program, ix.rotate, produces rotations of the index terms from
comparison." This is much the same computation as in the KwIC index,
although weve written it differently. Notice the assignment expression in the
for loop.
ix.rotate -generate rotations of index terns
input:
output: rotations of string tab num num ..,
string tab num nun ...
BEGIN (FS = OFS ="\t")
print $1,s2
unrotatedform
for （i=1;（j =index（substr（$1,
，i+1），)）>0；）{
printf("%s, xs\txs\n",
+= j
 find each blank,rotate around it
substr（$1,i+1),substr（$1，1,i-1),$2)
)
The output from ix.rotate begins
[FS]variable
35 36 52
variable,[Fs]
35 36 52
[if]-[else]statement
47
statement,
[if]-[else]
47
arithmetic operators
36
44
operators,arithmetic
coercion rules
36
44
44
rules, coercion
coercion-to number
45
44
coercion-to string
nunber, coercion-to
45
45
The next stage is to sort these rotated index terms.The problem with sort-
ing them directly is that there may still be embedded formatting information
like [... ] that will interfere with the sort order. So each line is prefixed with a
key that assures the proper order; the key will be stripped off later. The pro-
gram ix.genkey creates the key from the index term by removing troff size
and font change commands, which look like \s+n, or \s=n, or \fx, or \f(xx.
It also converts the tildes to blanks, and removes any nonalphanumeric charac-
ters other than blank from the sort key.
---
## Page 138
128
PROCESSING WORDS
CHAPTER 5
ix.genkey - generate sort key to force ordering
input:
string tab num nun ...
output: sort key tab string tab num nun ...
BEGIN(FS = OFS = "\t” )
1
gsub(/-/,
“*, $1)
tildes now become blanks
key=s1
renove troff size and font change conmands from key
gsub（\f.1\\f\（..\s[-+}0-9]/,
"，key)
keep blanks, 1etters,digits only
gsub(/[a-zA-z0-9 ]+/,
"",key)
if （key/[a-zA-z]/)
force nonalpha to sort first
#by prefixing a blank
print key,$1,$2
The output is now
FS variable
[FS] variable
35 36 52
variable FS
variable,(FS]
ifelse statement
35 36 52
statenent ifelse
statenent,[if]-[else]
[if]-[else] statement
47
arithnetic operators
arithnetic operators
3644
47
operatozs arithmetic
operators,arithnetic
36 44
coercion rules
rules coercion
rules,coercion
coercion rules
44
44
coercion to number
coercion to number
45
+ + +
The first few lines should clarify the distinction between the sort key and the
actual data.
The second sort puts terms into alphabetical order; as before, the -f option
folds upper and lower case together, and d is dictionary order.
ix.sort2- sort by sort key
input/output: sort-key tab string tab num num ...
sort -f -d
This puts items into their final order:
arithmetic operators
arithmetic operators
36 44
coercion to nunber
coercion rules
coercion rules
coercion to number
45
44
coercion to string
coercion to string
45
comparison numeric
comparison, numeric
44
comparison string
comparison,string
44
controlflow statenents
control-flow statements
48
FS variable
[Fs] variable
35
36 52
ifelse statement
[if]-{else]statement
47
number coercion to
number,coercion to
45
+ + 
---
## Page 139
SECTION 5.3
TEXT PROCESSING
129
The last stage, ix.format, removes the sort key. expands any [..] into
troff font-change commands, and precedes each term by a formatting com-
mand .xx that can be used by a text formatter to control size, position, etc.
(The actual command sequences are quite specific to troff; you can safely
ignore the details.)
ix.format -renove key,restore size and font commands
input:
sort key tab string tab num num ...
#
output: troff fornat,ready to print
BEGIN（FS ="\t”)
gsub（//，"，"，s3)
（CW，s2）
commas between page numbers
gsub（八（/,
gaub(]/,
"\\fP，$2）
set constant-width font
print ".xx"
restore previous font
%s\n°,$2,$3)#actual index entry
# user-definable command
printf(*%s
The final output begins like this:
.XX
arithmetic operators 36,44
coercion rules 44
.XX
coercion to number 45
.XX
 + +
To recapitulate, the indexing process consists of a pipeline of six commands
sh ix.sort1:
awk -f ix.collapse 1
awk -f ix.rotate
awk -f ix.genkey1
1
sh ix.sort21
awk -f ix.format
If these are applied to the input of index-term, page-number pairs at the begin-
ning of this section, and formatted, the result looks like this:
arithmetic operators 36,44
coercion to number 45
coercion rules 44
coercion to string 45
comparison, numeric 44
comparison, string 44
control-flow statements 48
FS variable 35, 36, 52
if-else statement 47
number, coercion to 45
numeric comparison 44
---
## Page 140
130
PROCESSING WORDS
CHAPTER S
Many enhancements and variations are possible; some of the most useful are
suggested in the exercises. The important lesson, however, is that dividing the
job into a sequence of tiny programs makes the whole task quite simple, and
also makes it easy to adapt to new requirements.
Exercise 5-22. Modify or augment the indexing programs to provide hierarchical
indexes, See and See also terms, and Roman-numeral page numbers. 
Exercise 5-23. Allow literal [. 1. *, and % characters in index terms. 
Exercise 5-24. Attack the problem of creating an index automatically by building tools
that prepare lists of words, phrases, etc. How well does the list of word frequencies pro-
duced by wordfreq suggest index terms or topics?
5.4Summary
Awk programs can manipulate text with much the same case that languages
like C or Pascal manipulate numbers  storage is managed automatically, and
the built-in operators and functions provide many of the necessary services. As
a result, awk is usually good for prototyping, and sometimes it is quite adequate
for production use. The indexing programs are a good example - we used a
version of them to index this book.
Bibliographic Notes
Our quiz program is modeled after the Unix version, originally created by
Doug Mcllroy. The idea for the cliche generator comes from Ron Hardin. Par-
nas’ paper on KwIC indexes, *On the criteria to be used in decomposing sys-
1972. Jon Bentley provided carly versions of the KwIC index program.
tems into modules,”appeared in Communications of the ACM,December,
described in Programming Pearls in Communications of the ACM, June, 1985.
“Maintaining Cross-References in Manuscripts,” CSTR 129,AT&T Bell
The program for maintaining cross-references is based on Aho and Sethi.
Laboratories, Murray Hill, NJ (1986). The programs for constructing indexes
are derived from Bentley and Kernighan, “Tools for Printing Indexes," CSTR
130, AT&T Bell Laboratories, Murray Hill, NJ (1986).
---
## Page 141
6
LITTLELANGUAGES
Awk is often used to develop translators for “little languages," that is,
languages for specialized applications. One reason for writing a translator is to
learn how a language processor works. The first example in this chapter is an
assembler that in twenty lines or so shows the essentials of the assembly process.
It is accompanied by an interpreter that executes the assembled programs. The
combination illustrates the rudiments of assembly language and machine archi-
tecture.Other examples show the basic operation of a postfix calculator and of
a recursive-descent translator for a subset of awk itself.
As examples, this chapter describes languages for drawing graphs and for speci-
fying sort commands.
A third purpose may be to make a language for practical use, such as one of
the calculators in this chapter.
Language processors are built around this conceptual model:
alyzci
synthesizer
target
Soud
symbol table
The front end, the analyzer, reads the source program and breaks it apart into
its lexical units: operators, operands, and so on. It parses the source program to
check that it is grammatically correct, and if it is not, issues the appropriate
error messages. Finally, it translates the source program into some intermediate
program. The symbol table communicates information collected by the analyzer
about the source program to the synthesizer, which uses it during code genera-
tion.Although we have described language processing as a sequence of clearly
131
---
## Page 142
LITTLE LANGUAGES
CHAPTER 6
distinguishable phases, in practice the boundaries are often blurred and the
phases may be combined.
Awk is useful for creating processors for experimental languages because its
basic operations support many of the tasks involved in language translation.
Analysis can oftenbe handled withfield splitting and regularcxpression pattern
matching. Symbol tables can be managed with associative arrays. Code gen-
eration can be done with printf statements.
In this chapter we will develop several translators to illustrate these points.
In each case, we will do the minimum that will make the point or teach the les-
son; embellishments and refinements are left as exercises.
6.1AnAssembler and Interpreter
Our first example of a language processor is an assembler for a hypothetical
computer of the sort often encountered in an introductory course on computer
architecture or systems programming.The computer has a single accumulator,
ten instructions, and a word-addressable memory of 1000 words. We'll assume
instruction, the first two digits encode the operation and the last three digits are
that a “word" of machine memory holds five decimal digits; if the word is an
the address. The assembly-language instructions are shown in Table 6-1.
TABLE 6-1. ASSEMBLY-LANGUAGE INSTRUCTIONS
OPCODE
INSTRUCTION
MEANING
01
get
read a number from the input into the accumulator
02
put
write the contents of the accumulator to the output
03
1d M
load accumulator with contents of memory location M
04
st M
store contents of accumulator in location M
05
add H
add contents of location M to accumulator
06
sub H
subtract contents of location M from accumulator
07
Jpos M
jump to location  if accumulator is positive
08
jz M
jump to location M is accumulator is zero
09
J H
jump to location M
10
halt
stop execution
constC
assembler pseudo-operation to define a constant C
An assembly-language program is a sequence of statements, each consisting
of three fields: label, operation, and operand. Any field may be empty: labels
si  s  os  od o oo  q n
sum of a sequence of integers; the end of the input is marked by a zero.
---
## Page 143
SECTION 6.1
AN ASSEMBLER AND INTERPRETER
133
print sum of input numbers (terminated by zero)
1d
zero
 initialize sum to zero
ot
sum
1oop
get
read a number
jz
done
no more input if number is zero
add
sum
 add in accumulated sum
st
sum
store new value back in sum
3
1oop
 go back and read another number
done
1d
sum
 print sum
put
halt
zero const0
sum
const
The target program resulting from translating this program into machine
language is a sequence of integers that represents the contents of memory when
the target program is ready to be run. For this program, memory looks like
this:
0：
03010
1d
04011
zero
 initialize sum to zero
1:
2:
01000
1oop get
st
sum
read a number
3 :
08007
Jz
done
no more input if number is zero
4:
05011
add
sum
 add in accumulated sum
5 :
04011
st
sum
store new value back in sun
6:
7:
09002
1oop
 go back and read another number
03011
done
1d
sum
print sun
8:
02000
10000
put
10:
:6
00000
zero const0
halt
11:
00000
sum
const
The first field is the memory location; the second is the encoded instruction.
Memory location O contains the translation of the first instruction of the
assembly-language program, 1d zero.
The assembler does its translation in two passes. Pass 1 uses field splitting
to do lexical and syntactic analysis. It reads the assembly-language program,
discards comments, assigns a memory location to each label, and writes an
Pass 2 reads the temporary file, converts symbolic operands to the memory loca-
tions computed by pass 1, encodes the operations and operands, and puts the
resulting machine-language program into the array mem
As the other half of the job, we'll build an interpreter that simulates the
behavior of the computer on machine-language programs.The interpreter is a
operand, and then simulates the instruction. The program counter is kept in the
variable pc.
---
## Page 144
134