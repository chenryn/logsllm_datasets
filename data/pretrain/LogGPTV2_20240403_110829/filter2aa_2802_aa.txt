### Bugs in Multiplayer Game Engines: Finding and Exploiting

#### Background
Over a few months, I discovered over ten remotely exploitable bugs in two popular game engines. In this document, I will discuss four of these bugs—two from each engine.

#### Game Engines
A **game engine** is the foundational software used to create video games. The widespread use of certain game engines means that many games share common vulnerabilities. Updating a game engine can be a significant challenge, and games often do not receive "security patches" after release.

The two most commonly used game engines are:
- **Unreal Engine 4 (UE4)**
- **Unity**

For solo developers or small teams, Unity is a popular choice. Larger teams, especially those who have not built their own engine, often use UE4.

#### Unreal Engine 4 (UE4)
- **Created by**: Epic Games
- **Named for**: Its roots in the Unreal series
- **Licensing**: Open source with licensing restrictions
- **Notable Games**:
  - Fortnite
  - PlayerUnknown’s Battlegrounds (PUBG)

#### Unity
- **Created by**: Unity Technologies
- **Core Components**: Closed source
- **Networking Library**: UNET
- **Games Using UNET**: Countless indie releases on Steam

##### UNET
- **Status**: Technically deprecated, but still receives patches and occasional new features.
- **Encryption API**: Added post-deprecation.
- **Usage**: A large number of new and existing games continue to use UNET.

#### Multiplayer Protocols
The evolution of multiplayer architectures has focused on two primary goals:
- **Increasing Performance**
- **Moving Trust Away from the Client**

These goals are often in conflict.

To understand multiplayer protocols, it's essential to understand the attacks they aim to prevent. A good example is the evolution of **Movement Hacking**.

#### Movement Hacking
- **Definition**: One of the oldest and most common types of game hack involves manipulating the player’s location.
- **Historical Context**: In the past, player location was trusted to the client, allowing for teleportation by manipulating the location client-side.
- **Current Prevention**: Authority over player location is now trusted only to the server. Clients request movement, and the server updates the position accordingly.

This led to a new type of attack: **Speed Hacking**.

#### Speed Hacking
- **Definition**: The goal is to move extremely fast, typically by sending movement requests excessively fast.
- **Prevention**: The server restricts movement based on realistic movement parameters for a given time frame.

#### Multiplayer Protocol Basics
##### Distributed Architecture
- **Description**: Most multiplayer protocols use some form of distributed architecture.
- **Functionality**: Each system (client or server) has a copy of each "networked" object in the game world.
- **Actions**: Performed and propagated through Remote Procedure Calls (RPCs).

##### Remote Procedure Calls (RPCs)
- **Description**: Used to call functions on a remote system as if it were local.
- **Benefits**: Simplifies development.
- **Complexity**: Requires significant backend processing.

##### Object Ownership
- **Description**: Multiplayer protocols typically have a concept of ownership.
- **Ownership**: Means having the authority to issue RPCs on an object.
- **Example**: Each player owns their character and associated subobjects, allowing them to issue RPCs on their character but not others.

##### Network Protocol
- **Implementation**: Most multiplayer protocols use UDP for performance, except for browser games.
- **Requirements**:
  - Validate packet sender
  - Identify duplicate or out-of-order packets

#### UE4 Arbitrary File Access (Bug #1)
##### UE4 URLs
- **Description**: UE4 uses its own type of "URL" to communicate details between server and client, including package names and client information.
- **Vulnerability**: A malicious URL can cause a server or client to access any local file path, including UNC paths.
- **UNC Paths**: Special Windows paths used to access networked resources.
- **Exploit**: Can cause a server or client to connect to a remote SMB share, opening up to SMB-related attacks such as credential harvesting and authentication relaying.
- **Fix**: Addressed in UE4.25.2 with commit `cdfe253a5db58d8d525dd50be820e8106113a746`.

#### UNET Memory Disclosure (Bug #2)
##### UNET Packets
- **Description**: UNET packets allow for multiple RPCs in a single packet.
- **Vulnerability**: If a message size field is larger than the actual payload, the server acts on extra data already in memory.
- **Exploit**: This can leak old memory, including sensitive information like passwords and private messages.
- **Fix**: Addressed in UNET version 1.0.6.

#### UE4 Universal Speed Hack (Bug #3)
##### UE4 Movement
- **Description**: UE4 movement is server-authoritative, meaning the client cannot directly dictate the player’s position.
- **Process**: The client issues a movement RPC with a movement vector and a timestamp.
- **Exploit**: By manipulating the timestamp, a client can simulate unrealistic movement speeds.
- **Fix**: Not explicitly mentioned, but likely addressed in subsequent updates.

This document provides a detailed overview of the vulnerabilities found in popular game engines and the methods used to exploit them.