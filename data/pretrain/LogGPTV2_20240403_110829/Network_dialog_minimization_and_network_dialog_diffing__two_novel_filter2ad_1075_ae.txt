Agg.
Agg.
30
10
30
12
Precision Recall
100%
100%
100% 64.8%
100%
100%
100% 78.0%
F-Measure
100%
78.6%
100%
87.6%
Table 3: Dialog clustering results.
replay in that the aim is not cloning the original dialog on a new set-
ting, but rather to deliberately produce a different, minimized, dia-
log that achieves the same goal with minimal trafﬁc. Other works
automatically identify and adjust state-dependant ﬁelds, e.g., cook-
ies and IP addresses, in the trafﬁc to be replayed, regardless of
its protocol, using network-based [11] and dynamic binary anal-
ysis [27] approaches. Our goal is not replaying any protocol, but
rather minimizing a dialog or comparing two dialogs. The mini-
mization achieves signiﬁcant performance savings and enables un-
derstanding the minimum set of constraints to achieve a goal, while
dialog difﬁng is a very different problem. Our approach assumes
the protocol grammar is available, which is true in all our applica-
tions. If unknown, protocol reverse-engineering techniques can be
used to recover its grammar [6, 10, 24, 37], state-machine [9], and
application session structure [19]. Also related is ShieldGen [12],
which generates vulnerability data patches by modifying an attack
and replaying it to an oracle. A key difference with this work is that
NDM operates on a complete dialog rather than a packet.
Drive-by download malware collection. Honeyclients are a pop-
ular approach for collecting malware distributed through drive-by
downloads [36]. We develop drive-by download milkers that pe-
riodically replay a previous dialog for the same goal. Drive-by
download milkers are more lightweight but less ﬂexible than hon-
eyclients, being speciﬁc to an exploit kit. Our drive-by download
infrastructure [26] uses a combination of honeyclients and drive-by
download milkers to achieve both ﬂexibility and efﬁciency.
Cookie replay. Session hijacking through cookie replay has been
known for more than a decade [14,30]. Attacks on WiFi have been
demonstrated [17] and tools are available to exploit it [1, 4]. It has
also been mentioned that cookie replay still works after a user logs
out [4, 17]. A large number of techniques have also been proposed
to prevent session hijacking attacks [2,3,13,14,30]. Our work does
not discover any new attacks. Instead, we show how dialog min-
imization and replaying tools provide an efﬁcient and convenient
way to automate the periodic visiting of a large number of sites to
determine for how long cookie replays works, measuring the cur-
rent state of these issues.
Trafﬁc clustering. A number of works perform malware clus-
tering based on their trafﬁc [16, 31, 33, 38]. Most of these works
cluster trafﬁc at the packet level [16, 31, 33]. Most related is Ne-
mean [38], which generates semantics-aware network signatures,
clustering similar connections and sessions using request/response
types and byte distribution features. Our work is different in that we
propose a dialog alignment technique that ﬁnds a mapping between
dialogs that maximizes similarity.
8. CONCLUSION
In this work, we have introduced the problems of network dialog
minimization and network dialog difﬁng. We have proposed net-
work delta debugging, the ﬁrst technique to solve network dialog
minimization. We have also proposed a novel technique for net-
work dialog difﬁng, which aligns two dialogs by ﬁnding a mapping
between them that maximizes similarity.
Figure 8: Minimized SIP INVITE request revealing previously
unknown vulnerability on the OpenSBC SIP server.
Similarity matrix. The ﬁrst step is building the similarity matrix
by computing the similarity between each pair of dialogs. The av-
erage similarity between two dialogs from the same website is 0.96
and the minimum 0.80, which shows that our metric correctly cap-
tures their similarity despite changes due to non-determinism. The
average similarity for dialogs from different sites is 0.16 and the
maximum is 0.73 (between facebook and twitter which have
only 1 RRP), which shows that the dialog similarity metric prop-
erly differentiates between similar and different dialogs. For the
malicious dialogs the average similarity between dialogs from the
same family is 0.74 and the minimum 0.41. The average similarity
for dialogs from different families is 0.25 and the maximum is 0.73
(between zeroaccess and zbot).
Clustering algorithms. We use two different clustering algorithms:
partitioning around mediods (PAM) [20] and aggressive. PAM
takes as input the similarity matrix and the number k of clusters to
output, so we run it with different k values, selecting the one which
maximizes the silhouette width, an internal measure of clustering
quality [20]. Our aggressive clustering starts with zero clusters and
iterates on the list of dialogs. For each dialog, it checks if its sim-
ilarity is larger than 0.8 with any dialog already in a cluster. If the
comparison holds only for dialogs in the same cluster, it adds the
dialog to that cluster. If it holds for dialogs in multiple clusters,
it merges those clusters and adds the current dialog to the merged
cluster. Otherwise, it creates a new cluster for it.
To select the 0.8 threshold we measured the clustering accuracy
on a subset of the dataset for each threshold value between [0,1]
with a step of 0.1 [15]. A threshold of 0.8 achieved best results.
Clustering results. Table 3 shows the clustering results for benign
and malicious dialogs using both algorithms. For the benign di-
alogs, both algorithms output 30 clusters, each with the 2 dialogs
for the same website, achieving perfect precision and accuracy. For
the malware dialogs, the precision is perfect but the recall is 64.8%-
78.0% respectively. This is because the same malware family is
split into multiple clusters. There are two main reasons for this.
First, zbot is a malware kit and zeroaccess an afﬁliate program. In
both cases owners/afﬁliates may conﬁgure the malware differently,
which creates differences captured by our metric. In addition, our
metric fails to detect similarity for short dialogs with highly poly-
morphic requests. This is why signature generation tools use trafﬁc
clustering only as a ﬁrst step before analyzing other information
like content and endpoints [31, 33]. Given its perfect accuracy, our
dialog clustering could be integrated as a ﬁrst step in those tools.
7. RELATED WORK
Trafﬁc replay. A number of tools have been proposed to replay
trafﬁc from a network trace [7,18,28,35]. NDM differs from trafﬁc
RequestINVITECall-Id HeaderINVITEsip:service@10.1.1.1:5061Source_IP:sport UDP 10.x.x.x:5060 Root RootCseq HeaderRequest-LineSIP /2.0Call-Id:*Cseq:1 INVITEWe have demonstrated our techniques for 5 applications: build-
ing drive-by download milkers for 9 exploit kits, measuring cookie
replay on popular websites, simplifying cumbersome proprietary
web interfaces, vulnerability analysis, and clustering benign and
malicious dialogs.
9. ACKNOWLEDGMENTS.
This research was started while M. Zubair Raﬁque was an in-
tern at the IMDEA Software Institute. This research was partially
funded by the Research Fund KU Leuven, by the EU FP7 project
NESSoS (FP7-ICT No.256980), and by the Prevention of and Fight
against Crime Programme of the European Union (B-CCENTRE).
This research was also partially supported by the Spanish Gov-
ernment through Grant TIN2012-39391-C04-01 and a Juan de la
Cierva Fellowship for Juan Caballero. All opinions, ﬁndings, and
conclusions or recommendations expressed herein are those of the
authors and do not necessarily reﬂect the views of the sponsors.
10. REFERENCES
[1] Firesheep. http://codebutler.com/firesheep.
[2] B. Adida. Sessionlock: Securing web sessions against
eavesdropping. In International World Wide Web
Conference, 2008.
[3] A. Bittau, M. Hamburg, M. Handley, D. Mazieres, and
D. Boneh. The case for ubiquitous transport-level encryption.
In USENIX Security Symposium, 2010.
[4] S. Bowne. Cookie re-use in ofﬁce 365 and other web
services, 2013. http://samsclass.info/123/
proj10/cookie-reuse.htm#steps.
[5] J. Caballero, C. Grier, C. Kreibich, and V. Paxson.
Measuring pay-per-install: The commoditization of malware
distribution. In USENIX Security Symposium, 2011.
[6] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot:
Automatic extraction of protocol message format using
dynamic binary analysis. In ACM Conference on Computer
and Communications Security, 2007.
[7] Y.-C. Cheng, U. Hölzle, N. Cardwell, S. Savage, and G. M.
Voelker. Monkey see, monkey do: A tool for tcp tracing and
replaying. In USENIX Annual Technical Conference, 2004.
[8] C. Y. Cho, J. Caballero, C. Grier, V. Paxson, and D. Song.
Insights from the inside: A view of botnet management from
inﬁltration. In USENIX Workshop on Large-Scale Exploits
and Emergent Threats, 2010.
[9] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda.
Prospex: Protocol speciﬁcation extraction. In IEEE
Symposium on Security and Privacy, 2009.
[10] W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic
protocol description generation from network traces. In
USENIX Security Symposium, 2007.
[11] W. Cui, V. Paxson, N. C. Weaver, and R. H. Katz.
Protocol-independent adaptive replay of application dialog.
In Network and Distributed System Security Symposium,
2006.
[12] W. Cui, M. Peinado, H. J. Wang, and M. Locasto. shieldgen:
Automatic data patch generation for unknown vulnerabilities
with informed probing. In IEEE Symposium on Security and
Privacy, 2007.
[13] I. Dacosta, S. Chakradeo, P. Traynor, and M. Ahamad.
One-time cookies: Preventing session hijacking attacks with
disposable credentials. ACM Transactions on Internet
Technology, 12(1), 2012.
[14] K. Fu, E. Sit, K. Smith, and N. Feamster. Dos and don’ts of
client authentication on the web. In USENIX Security
Symposium, 2001.
[15] R. Gras, E. Suzuki, F. Guillet, and F. Spagnolo. Statistical
Implicative Analysis. Springer, 2008.
[16] G. Gu, R. Perdisci, J. Zhang, and W. Lee. Botminer:
Clustering analysis of network trafﬁc for protocol and
structure independent botnet detection. In USENIX Security
Symposium, 2008.
[17] Hamster, 2007. http://blog.erratasec.com/
2007/08/sidejacking-with-hamster_05.
html#.UwdUz4ZDuKk.
[18] S.-S. Hong and S. F. Wu. On interactive internet trafﬁc
replay. In International Symposium on Recent Advances in
Intrusion Detection, 2006.
[19] J. Kannan, J. Jung, V. Paxson, and C. E. Koksal.
Semi-automated discovery of application session structure.
In Internet Measurement Conference, 2006.
[20] L. Kaufman and P. J. Rousseeuw. Finding Groups In Data:
An Introduction To Cluster Analysis, volume 344. John
Wiley & Sons, 2009.
[21] S. Keates. Designing user interfaces for ordinary users in
extraordinary circumstances: A keyboard-only web-based
application for use in airports. Universal Access in the
Information Society, 12(2), 2013.
[22] H. W. Kuhn. The hungarian method for the assignment
problem. Naval Research Logistics Quarterly, 2(1-2), 1955.
[23] C. Leita, K. Mermoud, and M. Dacier. scriptgen: An
automated script generation tool for honeyd. In Annual
Computer Security Applications Conference, 2005.
[24] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol
format reverse engineering through context-aware monitored
execution. In Network and Distributed System Security
Symposium, 2008.
[25] G. Misherghi and Z. Su. Hdd: Hierarchical delta debugging.
In International Conference on Software Engineering, 2006.
[26] A. Nappa, M. Z. Raﬁque, and J. Caballero. Driving in the
cloud: An analysis of drive-by download operations and
abuse reporting. In SIG SIDAR Conference on Detection of
Intrusions and Malware & Vulnerability Assessment, 2013.
[27] J. Newsome, D. Brumley, J. Franklin, and D. Song.
Replayer: Automatic protocol replay by binary analysis. In
ACM Conference on Computer and Communications
Security, 2006.
[28] Ostinato. http://goo.gl/oo5rmn.
[29] OSVDB. opensipstack opensbc.exe null pointer dereference
remote dos, 2012. http://osvdb.org/86607.
[30] J. S. Park and R. Sandhu. Secure cookies on the web.
Internet Computing, IEEE, 4(4), 2000.
[31] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering
of http-based malware and signature generation using
malicious network traces. In Symposium on Networked
System Design and Implementation, 2010.
[32] M. Z. Raﬁque, M. A. Akbar, and M. Farooq. Evaluating dos
attacks against sip-based voip systems. In Globecom, 2009.
[33] M. Z. Raﬁque and J. Caballero. ﬁrma: malware clustering
and network signature generation with mixed network
behaviors. In International Symposium on Recent Advances
in Intrusion Detection, 2013.
[34] SIPp. http://sipp.sourceforge.net/.
[35] Tcpreplay. http://tcpreplay.synfin.net/.
[36] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski,
S. Chen, and S. King. Automated web patrol with strider
honeymonkeys: Finding web sites that exploit browser
vulnerabilities. In Network and Distributed System Security
Symposium, 2006.
[37] G. Wondracek, P. M. Comparetti, C. Kruegel, and E. Kirda.
Automatic network protocol analysis. In Network and
Distributed System Security Symposium, 2008.
[38] V. Yegneswaran, J. T. Gifﬁn, P. Barford, and S. Jha. An
architecture for generating semantics-aware signatures. In
USENIX Security Symposium, 2005.
[39] A. Zeller and R. Hildebrandt. Simplifying and isolating
failure-inducing input. IEEE Trans. Softw. Eng., 28(2), 2002.