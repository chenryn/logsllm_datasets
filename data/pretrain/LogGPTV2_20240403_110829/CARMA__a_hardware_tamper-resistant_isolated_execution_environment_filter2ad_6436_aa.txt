title:CARMA: a hardware tamper-resistant isolated execution environment
on commodity x86 platforms
author:Amit Vasudevan and
Jonathan M. McCune and
James Newsome and
Adrian Perrig and
Leendert van Doorn
CARMA: A Hardware Tamper-Resistant Isolated
Execution Environment on Commodity x86 Platforms
Amit Vasudevan
Jonathan McCune
James Newsome Adrian Perrig
CyLab / Carnegie Mellon University
{amitvasudevan, jonmccune,
jnewsome, perrig}@cmu.edu
Leendert van Doorn
Advanced Micro Devices
PI:EMAIL
Abstract
Much effort has been spent to reduce the software Trusted
Computing Base (TCB) of modern systems. However, the
hardware TCB remains complex and untrustworthy. Com-
ponents such as memory, peripherals, and system buses may
become malicious via ﬁrmware compromise, a malicious
manufacturer, a malicious supply chain, or local physical
tampering. We seek to reduce the hardware TCB to a min-
imal set of hardware components that must be trusted. We
describe the design and implementation of an isolated execu-
tion environment on commodity x86 platforms that only re-
lies on the CPU, without needing to trust the memory, buses,
peripherals, or any other system components.
Categories and Subject Descriptors D.4.6 [Software]: Op-
erating Systems-Security and Protection
General Terms Security, Systems
Keywords TCB reduction, Secure Execution, On-die Exe-
cution, Cache-as-RAM
Introduction
1.
Much effort has been spent to reduce the software Trusted
Computing Base (TCB) of modern systems. However, there
remains a large and complex hardware TCB, including
memory, peripherals, and system buses. There are many re-
alistic adversary models where this hardware may be ma-
licious or compromised. Thus, there is a practical need to
determine whether we can achieve secure program execu-
tion in the presence of not only malicious software, but also
malicious hardware.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior speciﬁc permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright c(cid:13) 2012 ACM 978-1-4503-1303-2/12/05. . . $10.00
Type
Description
Remote Malware in application
Remote Malware in Operating System
Remote Malware in devices’ ﬁrmware
Local
Attack
Level
AL0
AL1
AL2
AL3
AL4
Local
AL5
Local
Physical attachment of malicious peripheral equip-
ment (e.g., FireWire, Thunderbolt, PC Card, or PCIe
card)
Low-speed bus (e.g., LPC bus, 33 MHz) tampering,
e.g., interpositioning or TPM reset attacks [6, 18]
High-speed bus (e.g., memory or PCI bus, 1 GHz or
more) tampering, e.g., eavesdropping to attack data
secrecy, injection to attack code and data integrity
AL6
Local Malicious CPU
0
L
A
1
L
A
2
L
A
3
L
A
4
L
A
5
L
A
6
L
A
Y
Y
Y
Y
Operating system primitives
Information ﬂow controlled OS
Veriﬁed Kernel
Programming language primitives
Software Fault Isolation (SFI)
Sandboxes (NACL)
Hardware primitives
DRTM (Flicker [11], TV [10])
TRESOR [12]
Specialized processor
driaan
[24], Aegis
Cerium [1])
CARMA (this paper)
Cryptographic primitives
Secure Multi-Party Computa-
tion [25]
(Mon-
[20],
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Figure 1. Adversary attack levels on commodity x86 plat-
forms and comparison of existing approaches for defending
against them
Speciﬁcally, we consider the adversary attack levels as
shown in Figure 1. These attack levels correspond to an
increasing level of attack cost and complexity.
The current frontier in remote attacks (AL2) is to attack
peripheral devices. Arrigo et al. demonstrate how a com-
promised network card can use the GPU via peer-to-peer
PCI communication, creating a botnet node with powerful
computation and communication abilities, completely out of
reach of the OS [22].
For local attacks, simply booting from removable media
or plugging in a malicious device that obtains DMA access
to all of memory (AL3) is feasible without tools and with a
trivial amount of training. More sophisticated attacks require
opening the computer system and directly attaching to a bus,
either by resetting the bus or by interposing on the bus sig-
nals (AL4). The much faster speed of the memory and PCI
buses requires more sophistication in terms of equipment
and attacker skill (AL5). Supply-chain inﬁltration may be a
more realistic source of such malicious components [13, 23].
While a simple handheld device (e.g., a smartphone) could
be programmed to interface with low-speed buses, special-
ized equipment is needed for the high-speed buses.
Given this framework for increasing attack levels, it is
interesting to consider existing approaches for defending
against these threats. Figure 1 describes categories of cur-
rent defense mechanisms, and which attack levels they are
effective against.
TRESOR [12] is one recent system intended to defend
againt physical cold-boot attacks where memory chips are
frozen and extracted from a running system, by storing cryp-
tographic keys in debug registers within the CPU. However,
TRESOR assumes code integrity (i.e., that the attacker is un-
able to modify the contents of memory while the system is
still running). We grant the attacker this capability in AL3
and above, and seek to achieve code integrity even against
such stronger adversaries.
Secure co-processor hardware achieves strong secrecy
and integrity properties against even malicious peripherals
and buses (up to AL5), but these solutions represent expen-
sive specialized hardware [1, 20, 24].
Secure multi-party communication can address all of our
proposed attack levels, including malicious CPUs (AL6),
and does not require any trusted hardware. However, its
highly inefﬁcient computation (about six orders of magni-
tude slowdown) prohibits viable deployment today [2].
Contributions. The challenge that we tackle in this paper
is how to defend against a sophisticated adversary with phys-
ical access to the host; i.e., AL5. Our goal is to achieve ef-
ﬁcient execution, code integrity, data integrity and secrecy
against a class AL5 attacker on commodity hardware. To-
wards this end we have developed CARMA, a secure exe-
cution primitive that removes system buses and peripherals
from the TCB, requiring us to trust only the CPU and a sim-
ple inexpensive external veriﬁcation device. We implement
this basic primitive on an off-the-shelf PC (§3).
2. CARMA Design
On current x86 hardware platforms, the TCB for trustworthy
execution primitives includes various low-level system com-
ponents (CPU, memory-controller, IOMMU, TPM, buses).
The goal of CARMA is to achieve code integrity, launch
Figure 2. CARMA Architecture: A Secure Execution Envi-
ronment, running a Secure Executable Code (SEC) module,
is created entirely within CPU cache. An external Trusted
Device forms the initial root-of-trust to verify environment
instantiation, SEC load, and SEC execution. The TCB in-
cludes only the CPU and the Trusted Device.
point integrity, and data integrity/secrecy, with a dramat-
ically reduced TCB compared to previous work, so that
only the CPU needs to be trusted. Consequently, our desired
properties will hold even if all other hardware components
are malicious, including the TPM, peripherals, memory, etc.
Since the CPU is the primary system component that exe-
cutes instructions, it is natural to trust it for execution.
Figure 2 shows our high-level architecture. Our central
idea is to execute entirely inside the CPU enclosure, lever-
aging a special execution mode called Cache-as-RAM. This
allows the CPU to act as a self-contained computing envi-
ronment, without having to rely on external untrusted RAM.
We use a simple, inexpensive external trusted device (TD) to
act as a root of trust to bootstrap the environment. We em-
ploy a SoftWare-Only Root of Trust (SWORT) mechanism
to verify that the intended code is loaded, and to establish a
shared secret that we use to create a secure communication
channel.
2.1 Background: Cache-as-RAM (CAR)
Commodity CPUs include a cache subsystem to reduce the
average time to access memory (DRAM). The cache is a
smaller, faster, on-die memory which stores copies of the
data from the most frequently used DRAM locations. Most
modern desktop and server CPUs have at least three inde-
pendent caches: an instruction cache to speed up executable
instruction fetch, a data cache to speed up data fetch and
store, and a translation lookaside buffer (TLB) used to speed
up virtual-to-physical address translation for both executable
instructions and data. These caches are usually organized as
a hierarchy of one or more cache levels (L1, L2 and L3).
SystemMemorySecure Execution Environment Loader (SEEL) SetupSecure Executable Code blobCPUCacheSEEL Attestation and Secure Channel SetupSecure ExecutableCode (SEC)SEEL Secure ReturnLoad/MapExecuteDuring system startup, the BIOS ﬁrst initializes the CPU,
the cache subsystem, the memory controller (DRAM) and
then proceeds to initialize other hardware platform elements
(PCI, SMBus, peripherals, etc.) before transferring control
to the operating system. The BIOS is stored and accessed as
read-only memory on current platforms.1 This presents an
interesting problem to the early stages of the BIOS execu-
tion (CPU, cache and DRAM initialization) which require
a read-write data area and stack.2 To alleviate this problem,
CPUs allow portions of the cache subsystem to be addressed
as though they were DRAM until the DRAM controller is
initialized in the system. This mechanism is dubbed Cache-
as RAM (CAR) and is employed by most BIOSes today [9].
2.2 CARMA Approach
Typical CAR usage today is to instantiate a temporary one-
shot read/write data area during system bootup. However,
we found that by carefully programming the CPU, we can
use the cache as a general-purpose memory area, support-
ing simultaneous code-execution and data read/writes. This
provides us with an isolated execution environment entirely
within the CPU. Our ﬁndings also seem consistent with
publicly disclosed high-level information about the dynamic
launch facility in current x86 CPUs employing some form
of reserved memory inside the CPU for authenticated code
modules [4] – indicating that our scheme is general purpose
and applicable to commodity x86 CPUs. More details on the
actual implementation are available in §3.
We design an execution model where a Secure Execution
Environment Loader (SEEL) executes a Secure Executable
Code (SEC) module (Figure 2). The SEEL sets up the CAR
environment within the CPU and loads the SEC into the
CAR region.
The isolated execution environment is not very useful
without some means of communicating securely with an
external entity. In our design, that entity is a simple external