申参数，如下面的等价查询所示：
SELECT COUNT (id) FROM reviews WHERE review_author=*MadBob*
SELECT COUNT (id) FROM reviews WHERE review_author=*Mad*+CHAR (0x42) +′ob*
SELECT COUNT (id) FROM reviews WHERE review_author=*Mad*+SELECT (*B*)+*ob'
SELECT COUNT(id) FROM reviews WHERE review_author=*Mad*+ (SELECT(*B*)) +*ob*
SELECT COUNT (id) FROM reviews WHERE review_author='Mad'+(SEL&CT **)+'Bob*
最后一条语句中包含了一个以粗体显示的子查询。马上将会看到，我们可以使用更有意义
的漏洞字符申替代它。很明显，拆分与平衡方法的优点是：即便将漏润字符串插入到一个存储
过程调用中，它也仍然有效。
表5-1提供了许多拆分与平衡过的字符串，它们都包含了一个子查询占位符（)
分别用于 MySQL、PostgreSQL、Microsoft SQL Server 和 Oracle。采用简明 BNF 语法(Backus-Naur
Form）定义了产生的字符串。
警告：
将逻辑运算符（虽然可用）用于数字参数是不合适的，因为它们取决于的值。
表5-1带子查询占位符的拆分与平衡字符串
MySQL
TYPE_EXPR ::= STRING_EXPR ↑ NUMBER_EXPR 1 DATE_EXPR
INJECTION_STRING :: = TYPE_EXPR
STRING_EXPR ::= (see below)
NUMBER_EXPR ::= number NUMBER_OP ()
DATE_EXPR ::= date′ DATE_OP ()
NUMBER_OP ::= + 1 - I*-1 / 1 & 1 *|- I ^ I xor
DATE_OP ::= + 1 - 1 "|1* | *|" | ^ | xor
没有副作用，就不可能进行拆分与平衡，执行子查询很容易，但会改变查询结果。如果以ANSI模式
启动MySQL数据库，便可在子查询中使用“1”运算符来连接字符串：
STRING_EXPR ::= string′ I1 () I1 *
PostgreSQL
INJECTION_STRING :: = TYPE_EXPR 
STRING_EXPR ::= string* 11() 11 *
TYPE_EXPR ::= STRING_EXPR I NUMBER_EXPR I DATE_EXPR
NUMBER_EXPR ::= number NUMBER_OP ()
DATE_EXPR ::= date* 11() 11 *
1111$11/ 1▪丨- 1+=1:O38DN
SQL Server
INJECTION_STRING :: - TYPE_EXPR
TYPE_EXPR ::= STRING_EXPR I NUMBER_EXPR 1 DATE_EXPR
NUMBER_EXPR 1:= number NUMBER_OP ()
STRING_EXPR ::= string' + () + *
DATE_EXPR ::= date* + () + 
1-111/1.1- 1+=1:dO838nN
190
---
## Page 205
第5章SQL盲注利用
(续表）
Oracle
INJECTION_STRING :: - TYPE_EXPR
TYPE_EXPR ::= STRING_EXPR I NUMBER_EXPR 1 DATE_EXPR
STRING_EXPR ::= string′ 11 () 11 *
NUMBER_EXPR ::= number NUMBER_OP ()
-11。 1 / 1 . 1 - 1 + =: do3@H0N
DATE_EXPR ::= date′ 11 () 11 *
5.2.4常见的SQL盲注场景
在如下三种场景中，SQL首注非常有用：
1）提交一个导致SQL查询无效的漏洞时会返回一个通用的错误页面，而提交正确的SQL
时则会返回一个内容可被适度控制的页面。这种情况通常出现在根据用户选择来显示信息的页
面中。例如，用户点击一个包含id参数（能唯一识别数据库中的商品）的链接或者提交一个搜索
请求。对于这两种情况，用户可控制页面提供的输出，因为该页面是根据用户提供的信息来生
成的，比如提供一个产品的id，该页面还包含了从响应中获得的数据。
因为页面提供了反馈信息（虽然不是以详细的数据库错误消息方式)，所以可以使用基于时
间的确认漏洞以及能够修改页面显示数据集的漏洞。例如，某个攻击可能会显示香皂或刷子的
产品描述，以指示是否提取到了0-bit或1-bit的数据。大多数情况下，只需提交一个单引号就
足以破坏SQL查询平衡并强制产生一个通用的错误页面，这将有助于推断是否存在SQL注入
2)提交一个导致SQL查询无效的漏洞时会返回一个通用的错误页面，而提交正确的SQL
攻击且不产生输出时会碰到这种情况。还有一种场景也会引发这种情况：SQL注入位于
UPDATE或INSERT语句中，此时提交的信息虽然被写入数据库中且不产生输出，但却会产生
通用的错误。
使用单引号产生的通用错误页面可能会暴露这种页面（与基于时间的漏洞相同），但基于内
容的攻击却不会。
3）提交受损或不正确的SQL既不会产生错误页面，也不会以任何方式影响页面输出。因
为这种类型的SQL盲注场景不返回错误，面基于时间的漏洞或产生带外副作用的漏洞则最有
可能成功识别易受攻击的参数。
5.2.5SQL盲注技术
了解了SQL盲注的定义以及寻找这类漏洞的方法后，现在我们来深入研究利用这些漏洞
的技术。可以将这些技术分为两类：推新攻击技术和带外通道技术。推断攻击技术损述了一系
列攻击，它们使用SQL提出关于数据库的问题并通过推断一次一位地逐步提取信息：带外通
道技术则通过可用的带外通道并使用某些机制来直接提取大块信息。
对于特定的漏洞，选择采用哪一种攻击技术才是最佳方案，这取决于易受攻击的资源对攻
击作出的反应。在试图决定来用哪一种攻击办法时，应该思考以下两个问题：一是根据所提交
的受损的SQL片段，资源是否能返回通用的错误页面：二是资源是否允许我们在某种程度上
控制贞面的输出结果。
191
---
## Page 206
SQL注入攻击与防御（第2版）
1.推断攻击技术
从本质上看，所有推断攻击技术均可通过观察指定请求的响应来提取至少一位信息。观察
是关键，因为当请求的位为1时，响应会有专门的标志：而当请求的位为0时，则会产生不同
的响应。响应中的真正差异取决于所选用的推断工具，所使用的方法则大多基于响应时间、页
面内容、页面错误或以上这些因素的组合。
推断攻击技术支持向SQL语句注入一个条件分支以使提供两条路径，其中分支条件来自
我们所关心的位的状态，换言之，可以向SQL查询插入一条伪IF语句：IFxTHENyELSEz。
具体来说，x（转换为恰当的SQL）以“某行某列第一个字节的第二位的值是否等于1？”这样的
方式来叙述一件事情：y和z则是两个行为迥异的独立分支。攻击者可通过它们来推断执行了
哪个分支。提交推断利用后，攻击者观察返回了哪个响应：y还是z。如果执行的是y分支，
攻击者可推断出该位的值为1，否则该位为0。之后重复相同的请求，直到测试位到达最后
为止。
请记住，条件分支并没有明确的条件语法元素，比如IF语句。虽然可以使用“恰当”的
条件语句，但这样会增加复杂性和利用的长度。通常可使用接近正式IF语句且更简单的SQL
来获取相同的结来。
所提取的信息位不必是存储在数据库中的数据位(虽然通常是这么用的)。我们可以提这样
定字节的值是否大于127？”。这里提取的信息位并不是数据库记录中的位。相反，它们是配置
信息或者与数据库中的数据相关的信息，或者是元数据（mctadata）。提问这些问题时要求我们
能够在漏洞利用中提供一个条件分支以保证问题的答案要么是TRUE，要么是FALSE，因而推
断性向题是一段SQL代码，它根据攻击者提供的条件返回TRUE或FALSE。
下面结合一个简单的例子来讲解上述内容。我们将关注count_chickens.aspx这个示例页面，
它用于跟踪产蛋鸡场中健康的鸡蛋。每个鸡蛋都在chikens表中存在一条记录。在所有列中，
未孵化鸡蛋的 status 列值为Incubating。当浏览下面的 URL时，将显示未孵化鸡蛋的数量：
http://www victim, com/count_chickens.aspx?status=Incubating
计数页面中存在一个易受SQL盲注攻击的status参数，请求该页面时，它使用下列SELECT
语句查询数据库：
SELECT COUNT (chick_id) FROM chickens WHERE status=*Incubating*
我们想要实现的攻击是提取用户名，页面正是使用该用户名连接到数据库。MicrosoftSQL
Server数据库包含一个名为 SYSTEM_USER的函数，它会返回登录用户的用户名，数据库会
话正是建立在该用户的语境（context)之中。一般来说，可以使用SELECTSYSTEM_USERSQL
语句来查看这些内容，但在本例中结果是不可见的。图5-1描绘了使用详细的错误消息技术来
提取数据的会试，但页面只返回了一个标准的错误贝面。非常不率，并发人负采纳了不良的安
全建议，他们不是去努力弄清动态SQL，而是去选择捕获数据库异常并显示一个通用的错误
页面。
192
---
## Page 207
第5章SQL盲注利用
图5-1借助错误消息提取数据的失败尝试
提交status=Incubating时，页面执行上述SQL查询并返回图5-2所示的字符串。
990
2 egps gua
图5-2计数未孵化鸡蛋时的响应
可以通过向合法的查询添加永假子句and'T'=2来修改status参数，这样SQL查询会返回
一个空的结果集。修改后的SQL语句如下所示：
SELECT COUNT (chick_id) FROM chickens WHERE status=′Incubating* and *1'=′2*
图5-3展示了该查询的响应结果。从消息中我们可以推断出该查询返回了一个空的结果集。
请记住，数据库中有两行数据的 status 为Incubating，但尾部的永假子句保证了不存在相匹配
的行。
000
-5
Ko eggs bare that stacu
图5-3强制产生一个空的结果集
这是一个经典的SQL盲注示例。页面未向我们返回任何错误，但我们仍然可以向查询
注入SQL并且可以修改返回的结果（我们将得到鸡蛋的数量信息或“No eggs have that status”
消息）
现在我们不再插入一个永假子句，而是插入一个有时为真、有时为假的子句。由于我们想尽
力获取数据库的用户名，因而我们可以通过提交stahus='Incaubating’andSUBSTRING(SYSTEM_
USER,1.1)='a来询间登录用户名的第一个字符是否为a，产生的SQL语句如下所示：
193
---
## Page 208
SQL注入攻击与防御（第2版）
SELECT COUNT (chick_id) FROM chickens WHERE status=*Incubating* and
SUBSTRING (SYSTEM_OSER, 1, 1) =*a *
该SQL语句使用 SUBSTRINGO函数从SYSTEM_USER的输出中提取第一个字符。除了
SYSTEM_USER输出的字符串之外，SUBSTRINGO还包含另外两个参数，第一个参数是欲截
取子串的起始位置，第二个参数是子串的长度。
如果第一个字符确实为a，第二个子句为真，我们会看到与图5-2相同的结果；如果该字
符不为a，第二个子句为假，将返回一个空的结果集，这时产生的消息如图5-3所示。假设第
一个字符不为a，接下来我们使用自定义的status参数来提交第二个页面查询，询问第一个字
符是否为b，如此循环往复，直到找到第一个字符为止：
Incubating* AND SUBSTRING (SYSTEM_USER, 1, 1)=′a (False)
Incubating* AND SUBSTRING (SYSTEM_USER, 1, 1) =′b (False)
Incubating* AND SUBSTRING (SYSTEM_USER, 1, 1) =′c (Fa1se)
Incubating* AND SUBSTRING (SYSTEM_USER, 1, 1) =′s (True)
真假条件是每次请求提交之后我们根据返回的页面内容推断出来的状态，而不是指页面中
的内容。换言之，如果响应中包含“Noeggs..”，那么状态为假，否则状态为真。
一个重要的问题是确定搜索字符时所使用的字母表。如果要提取的数据是文本，那么字母表
就是该应用程序用户群所使用的语言，这是显而易见的。另外，数字和标点符号也必须考虑在
内。如果数据是二进制，还应该包括非打印字符（non-printable）或高代理项字符（high character)。
现在我们将注意力转移到第二个字符并重复该过程。从字母a开始并按着字母表顺序依次
移动。每成功找到一个字符之后，搜索便移动到下一字符。显示我们示例页面上用户名的页面
查询如下所示：
Incubating* AND SUBSTRING (SYSTEM_USER, 1, 1)-*s (True)
Incubat1ng* AND SUBSTRING (SYSTEM_OSER, 2, 1)='q (True)
Incubating* AND SUBSTRING (SYSTEM_USER, 3, 1) =′1 (True)
Incubating* AND SUBSTRING (SYSTEM_USER, 4, 1) =′0 (True)
InCubating* AND SUBSTRING (SYSTEM_USER, 8, 1) =*8 (True)
很简单，是吧？用户名是sql08。不过很不幸，事实上没有这么简单。我们漏掉了一个很
重要的问题：怎样才能知道已经到达用户名的结尾？如果目前已发现的用户名部分为sql08，
我们如何保证不存在第6个、第7个或第8个字符？如果要求SUBSTRINGO函数提供字符串
末尾后面的字符，它不会产生错误，相反它会返回空字符申。因此，我们可以在搜索的字母
表中包含空字符串。如果找到一个空字符串，那么使可以断定已到达了用户名的结尾。
status=Incubating′ AND SUBSTRING (SYSTEM_USER, 6, 1) * (True)
非常好！美中不足的是它不是非常轻使，而且要依赖特定数据库函数的显式行为。更简洁
的解决方案是在提取数据之前确定用户名的长度。这种方法除了比“SUBSTRINGO返回空字符
串”方法的应用范围更广之外，还有一个优点：攻击者可以估算提取用户名可能花费的最大时
间。可以采用寻找每个字符时所使用的技术来寻找用户名长度，即测试长度值是否为1、2、3
等，直到找到匹配的值为止：
status=Incubating′ AND LEN (SYSTEM_USER) =1-- (False)
194
---
## Page 209
第5章SQL盲注利用
status=Incubating* AND LEN (SYSTEM_USER) =2-- (False)
status=Incubating* AND LEN (SYSTEM_USER) =3-= (False)
status=Incubating* AND LEN (SYSTEM_USER)=4--  (Fa1se)
status=Incubating* AND LEN (SYSTEM_USER) =5== (True)
从该请求序列中可以推断出用户名长度为5。请注意，这里还使用了SQL注释（--)，虽然
不是必需的，但可以使漏洞的利用更简单。
有必要强调一点：用于判断给定问题是TRUE还是FALSE的推断工具，其判断依据是基
于在Web页面上是出现了鸡蛋的数量还是“No eggs have that status”消息。我们做出推断决定
所凭借的机制高度依赖于面对的场景，并且可使用很多不同的技术来替代。
你被攻击了么？
计数鸡蛋和请求
如果尚未明确，那么现在应该明白：本章介绍的推断攻击技术比较杂乱并且要耗费
大量的资源，一次请求提取一位数据意味着攻击者最少要发送成千条请求，如果要检索
兆字节的数据，就需发送上百万条请求，这一特点有助于使用基本的度量来发现这类攻
击，每分钟的请求次数、每分钟的数据库查询次数、跟踪数据库连接池错误以及带宽利
用率，这些都是可以监视的数据点，可通过它们来评估推断攻击是否正在进行。
对于大型的站点这些度量将会失效，有很多度量会处于监视之下，但是攻击可能不
会充分达到峰值。另外，逐页跟踪请求也会很有帮助，因为推断攻击很可能使用单个注
入点来完成
2.增加推断攻击技术的复杂性
读者可能已体会到，根据整张字母表（加上数字以及可能的非字母数字字符）测试用户名中
的每个字符是一种效率低下的数据提取方法。为检索用户名，我们必须向用户发送115次请求
（判断长度需要5次，判断字符’s、q、T、0和8'分别需要19、17、12、27和35次）。该方法
进一步的后果是：检索二进制数据时，会潜在地包含一张256个字符的字母表，这会显著增加