### False Positives and False Negatives in Automated Analysis

In this section, we discuss the false positives and false negatives encountered during our automated analysis process. For simplicity, we focus primarily on the apps in our Android dataset, with the iOS dataset following a similar pattern.

#### False Positives in the Android Dataset

Our detection method identified 75 false positives in the Android dataset. The primary reasons for these false positives are as follows:

1. **Suspended User Login or Sign-Up:**
   - Five out of the 75 apps had suspended user login or sign-up for various reasons, such as undergoing a national cybersecurity review. Consequently, these apps are temporarily unaffected by the SIMULATION attack.

2. **SDK Integration but No API Calls:**
   - Some apps integrate the OTAuth SDK but do not call any of its APIs during the login process. This can occur when an app integrates an SDK that supports the OTAuth feature (e.g., Alibaba Cloud SDK [57]) but uses it for other purposes (e.g., logging in with an Alibaba Taobao account). We found that 62 out of the 75 apps fall into this category.

3. **Additional Verification:**
   - The remaining 8 apps support the OTAuth login feature but also implement additional verification steps for user authentication. For example, Douyu TV [58] requires an SMS One-Time Password if a user tries to log in from a new device, while Codoon [59] requires the full phone number. We consider these apps not vulnerable to the SIMULATION attack due to these additional security measures.

#### False Negatives in the Android Dataset

Our approach missed 154 vulnerable apps, primarily because some apps use advanced packing techniques to hide code-level semantics at runtime, making valid signatures undetectable by our mechanisms. Specifically, we automatically detected common packing tool signatures in the 154 missed apps, and 135 of them were determined to be packed. A manual inspection of the remaining 19 missed apps revealed that they implemented more customized packing techniques.

Despite the presence of false negatives, our detection mechanism provides a concrete lower bound, highlighting the severity of the identified issues. Our detection showed that at least 38.63% (396/1025) of the apps in our Android dataset are vulnerable to the SIMULATION attack.

### Affected SDKs

In addition to the three SDKs provided by official Mobile Network Operators (MNOs), our SDK collection process identified 20 third-party SDKs that offer such services to app developers. Detailed information about these SDKs is presented in Table V. Among these, 8 SDKs are found in our app dataset. Since the root cause of the SIMULATION attack is the insecure design of the authentication scheme, all the investigated OTAuth SDKs (both MNO SDKs and third-party SDKs) are vulnerable to the SIMULATION attack.

**Table V: Details about Third-Party OTAuth SDKs Covered by Our Research**

| Third-Party SDK | Publicity1 App Num |
|-----------------|--------------------|
| Shanyan [60]    | 54                 |
| GEETEST [62]    | 25                 |
| NetEase Yidun [63] | 10                |
| Getui [65]      | 8                  |
| SUBMAIL [67]    | 0                  |
| Emay [69]       | 0                  |
| Tencent Cloud [70] | /                 |
| Up Cloud [72]   | 0                  |
| Huitong [74]    | 0                  |
| DCloud [76]     | 0                  |

**Third-Party SDK (continued)**

| Third-Party SDK | Publicity1 App Num |
|-----------------|--------------------|
| Jiguang [61]    | 38                 |
| U-Verify [53]   | 18                 |
| MobTech [64]    | 8                  |
| Shareinstall [66] | 4                 |
| Jixin [68]      | /                  |
| Alibaba Cloud [57] | /                 |
| Qianfan Cloud [71] | /                 |
| Baidu AI Cloud [73] | /                 |
| Santi Cloud [75] | 0                  |
| Weiwang [77]    | 0                  |

**Total Num: 163**

1. Publicity indicates whether the third-party agent has published its OTAuth SDK or highlighted apps.
2. Two apps integrate both GEETEST [62] SDK and Getui [65] SDK simultaneously.

### Impacts of SIMULATION Attacks

According to the statistical report by CNNIC [78], the total number of mobile internet users in mainland China exceeded 1 billion by June 2021, with nearly all using services provided by the three major MNOs. Since OTAuth service is enabled by default, the SIMULATION attack could potentially affect all users of the three MNOs. Furthermore, neither the MNOs nor the apps provide an option to disable this login scheme, making it difficult to mitigate the threat from the user side.

Among the vulnerable apps we identified, 17 have more than 100 million Monthly Active Users (MAU) (as shown in Table IV), and 87 have more than 10 million MAU. Therefore, if the SIMULATION attack can be conducted on any mobile device (Android or iOS), it is highly likely that the phone number has been registered to several popular apps.

### Additional Issues and Risks

In addition to the major design flaw discussed in Section III, we discovered several additional issues leading to extra unexpected risks. These are summarized below:

- **User Identity Leakage:**
  - The OTAuth only returns a masked phone number (e.g., "186******98") when receiving the OTAuth request. This partially leaks sensitive user identity information. Worse still, some app servers, upon receiving a valid token, not only send it to the MNO server to obtain the phone number but also respond with the phone number to the user (app). Such an app server can be easily abused as an oracle to obtain the victim’s phone number. An example of an affected app is ESurfing Cloud Disk [79], a highly popular private cloud storage app with over 400 million users.

- **OTAuth Service Piggybacking:**
  - To use OTAuth service, developers must register their apps and pay corresponding fees. However, an app can abuse the OTAuth service of other registered apps to implement free and unauthorized use. Similar to the user identity leakage cases, once a registered app can be abused as an oracle to retrieve the user’s phone number, a malicious app can reuse the appId and appKey of the victim app to first obtain a token from the MNO server and then use the token to exchange the phone number from the app server. This way, the malicious app freely uses the OTAuth service without the permission of both the MNO and app servers. More seriously, the use of OTAuth service is not free. For legitimate use, an app needs to pay a certain fee to the MNOs or third-party agents for each login. For instance, China Telecom charges a 0.1 RMB (approximately 0.016 USD) service fee for each OTAuth [80]. If the OTAuth service of a legitimate registered app is frequently abused by unregistered apps, the legitimate app would incur significant unexpected expenses.

- **Account Registration Without User Awareness:**
  - We observed that many app providers not only integrated OTAuth services but also simplified their app account registration and activation processes when a user uses OTAuth for the first time. If the used phone number has not yet been registered to the app service, it will be automatically registered without any user involvement. While this automated process facilitates new users, it expands the attack surface of the SIMULATION attack. Even if a user does not wish to use a certain app, the SIMULATION attack can exploit this insecure design to associate her phone number with a new account. In our research, our manual investigation confirmed that 390 out of 396 vulnerable Android apps allow an adversary to register a new account without any additional information. In other words, for these 390 apps, if the victim’s phone number has not been used for registration, the attacker can register a new account with the victim’s phone number.

### Other Implementation Weaknesses

Our analysis of the identified apps and SDKs also revealed additional implementation weaknesses of the OTAuth services, involving both SDK developers and app developers.

- **Insecure Token Usage:**
  - As an important credential, the use of tokens should be strictly restricted. However, in reality, some MNOs' restrictions on tokens are not strict enough:
    - **Token Reuse:** In theory, each token should be invalidated after being sent to the MNO server by the app server. However, our experiments found that in China Telecom’s OTAuth service, a token can be used to complete multiple logins within its valid time. Additionally, during the token's validity period, the tokens obtained by multiple requests from the app client remain unchanged.
    - **Multiple Effective Tokens:** Similar to SMS OTP, there should be only one valid token at a time. However, in China Unicom’s OTAuth service, newly obtained tokens do not invalidate older tokens.
    - **Too Long Validity Period:** Among the three MNOs in mainland China, China Mobile, China Unicom, and China Telecom have set token validity periods to be 2 minutes, 30 minutes, and 60 minutes, respectively. We believe the latter two MNOs have set too long a validity period, which poses security risks.

- **Authorization Without User Consent:**
  - OTAuth SDKs require the app to obtain the user’s mobile phone number only after obtaining user authorization. MNOs and third-party SDKs pop up an interface (see Figure 1) to ask for user authorization. While MNOs and third-party agents ensure that the interface pops up (e.g., through resource protection or manual review), we discovered that some apps, such as a popular payment app with over 1 billion users worldwide, retrieve the token before popping up the interface. With this token, these apps can easily obtain the user’s phone number without user authorization.

- **Plain-Text Storage of Sensitive Information:**
  - According to the MNO design, the appId and appKey of an app are specific and fixed. Through analyzing real-world apps, we found that many apps hard-code their appId and appKey into program files in plain text, making it easy for an attacker to obtain these credentials.

### Mitigation Strategies

We observed that both OTAuth SDK vendors and app developers have adopted some ineffective strategies to protect the OTAuth scheme. We summarize and analyze typical (insecure) defenses as follows:

- **Using App Hardening Techniques to Hide appId and appKey:**
  - Many app developers apply app hardening techniques such as code obfuscation, packing, or anti-debugging to prevent their apps from being reverse-engineered. However, such protection cannot fundamentally prevent attackers from retrieving appId and appKey.

- **Using appPkgSig to Verify Client Legitimacy:**
  - The MNO server asks the SDK to obtain the appPkgSig of the app client from the OS and adds it to the request to identify whether the request is sent from a benign app client. Unfortunately, attackers can easily replace the appPkgSig sent by the malicious app client (e.g., by patching the SDK or impersonating the benign app client to send network packets).

- **Using UI-Based Confirmation to Enforce User Involvement:**
  - The OTAuth SDKs, as we observed, prompt the user (as shown in the blue boxes in Figure 1) during the OTAuth process. Additionally, an app with the OTAuth SDK must be vetted by MNOs to ensure there is such a confirmation before the SDKs are invoked. However, this design cannot guarantee that the user is actually involved in the OTAuth process, as it requires no user-related input to construct the login request.

We argue that the failure of the above-mentioned defenses is that they cannot fundamentally prevent an attacker from impersonating a legitimate app. Correspondingly, we propose the following countermeasures by adding certain factors that only a legitimate app and its user could generate:

- **Adding User-Input Data into the Login Request:**
  - The OTAuth process could require users to provide some information unknown to the attacker (e.g., their full phone number or family name). However, this may raise usability issues and affect the user experience.

- **Adding OS-Level Support:**
  - The OS has the capability to dispatch a token to the legitimate app (i.e., the app with the corresponding package name). Thus, even if a malicious app can send a login request, it cannot obtain the token and perform the SIMULATION attack. However, this may require deeper cooperation between OS vendors and MNOs.

### Related Work

We discuss related work in two categories: bypassing authentication on mobile platforms and MNO services related to mobile authentication.

- **Bypassing Authentication on Mobile Platforms:**
  - Many recent studies have focused on the security risks in the authentication process on mobile platforms. These studies have achieved similar attacking results, such as logging in to the victim’s account without authorization. The major difference between these works and ours is that they focus on different authentication schemes provided by apps rather than third parties (e.g., MNOs). For example, Song et al. [6] developed an Android OS-level virtualization platform called VPDroid, which automates the login feature implemented by individual apps. Bianchi et al. [81] explored the exploitation of unsafe login-less authentication schemes that use distinguishing information of user devices. Lei et al. [8] revealed the insecurity of SMS-related new APIs provided by Android systems and showed how to abuse these features to perform unauthorized logins without user interaction. Jubur et al. [7] demonstrated the feasibility of bypassing app’s push-based authentication schemes by triggering human-indistinguishable notifications. Wang et al. [82], [83] focused on the security risks of apps that adopted OAuth-based authentication schemes.

- **MNO Services for Mobile Authentication:**
  - Traditionally, most MNOs provide SMS-based authentication services (i.e., One-Time Passwords), which are widely used by mobile apps. Following this, there are various malwares (e.g., ZitMo [84], SPITMO & Tatanga MITMO [85], and Crusewind [86]) that target stealing SMS messages to bypass user authentication. Additionally, Enck et al. [87] and Golde [88] conducted research on abusing SMS to perform DoS attacks, showing that SMS can be exploited to prevent phone users from making calls or exhaust the user’s phone balance.
  - Other than attacks targeting SMS, the SIM Swapping attack [9] exploits MNOs’ ability to seamlessly bind a phone number to a new SIM card, routing the authentication SMS to the attacker. SIM Clone attacks allow attackers to obtain a SIM card almost equivalent to the victim’s. Liu et al. [36] presented how to copy a 3G/4G USIM card within 15 minutes through Side-Channel Analysis. Coletta et al. [89] studied seven major Italian MNOs and found that attackers could steal user data (such as phone numbers and call amounts) by visiting specific web pages.

### Conclusion

In this paper, we conduct the first in-depth security study on the Mobile Network Operator-based One-Tap Authentication scheme (MNO-based OTAuth scheme). Our research has identified several fundamental design flaws in this authentication scheme, which bring severe security implications to apps that integrate this type of service. For example, an adversary who bypasses this authentication scheme can gain full access to the victim’s app account. To further evaluate the impact of our identified issues in the real world, we performed a large-scale measurement over a set of top popular apps in mainland China (including both Android and iOS apps). The measurement results showed that a large portion of highly popular apps are affected by this issue. Lastly, we discuss possible ways to mitigate such threats.

### Acknowledgment

We are grateful for the support and contributions from [acknowledged entities].