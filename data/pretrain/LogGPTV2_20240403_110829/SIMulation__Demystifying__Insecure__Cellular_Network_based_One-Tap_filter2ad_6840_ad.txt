Below we discuss the false positives and false negatives
during our automated analysis process. For simplicity, we here
mainly discuss the apps in our Android dataset, and the iOS
dataset follows a similar case.
For the Android dataset, our detection method resulted in 75
false positives. The main reasons for these false positives are as
follows: (1) 5 out of 75 apps suspended user login or sign-up
for various reasons (e.g., under national cyber security review),
thus they will not be affected by the SIMULATION attack
temporarily. (2) While some apps do integrate the OTAuth
SDK, we found they do not actually call any SDK APIs when
the user requests to log in. This may happen when an app
has integrated an SDK supporting the OTAuth feature (e.g.,
Alibaba Cloud SDK [57]) but the SDK is actually used by
the app for other features (e.g., login with Alibaba Taobao
account). We found that 62 out of 75 apps belong to this
case. (3) For the remaining 8 apps, while supporting OTAuth
login feature, they also adopt additional verification for user
authentication. For example, if the user tries to log in on
a new device, Douyu TV [58] will require SMS One-Time
Password and Codoon [59] will require the full phone number.
We consider such apps are not vulnerable to the SIMULATION
attack.
In terms of false negatives, our approach missed 154 vulner-
able apps. This is mainly because some apps have integrated
more advanced packing techniques to hide the code level
semantics at runtime, making the valid signature undetectable
by our mechanisms. Specifically, we automatically detected
the common packing tool signatures in the 154 apps we missed
and 135 of them are judged to be packed. A manual inspection
of the remaining 19 missed apps showed that
they have
implemented more customized packing techniques. Although
false negatives exist, our detection mechanism provides a
concrete lower bound, showing the severity of our identified
issues. Particularly, our detection mechanism showed that at
least 38.63% (396/1025) of the apps in our Android dataset
are vulnerable to the attack.
Affected SDKs.
In addition to the three SDKs provided
by the official MNOs, our aforementioned SDK collection
process has identified a total number of 20 third-party SDKs
that integrate such services for app developers. The detailed
information of such SDKs is presented in Table V. Among
them, 8 SDKs are found to exist in our app dataset. Since the
root cause of SIMULATION attack is the insecure design of
the authentication scheme, all our investigated OTAuth SDKs
(the MNO SDKs and third-party SDKs) are vulnerable to the
SIMULATION attack.
TABLE V: Details about third-party OTAuth SDKs covered by our research
Third-party
SDK
Shanyan [60]
GEETEST [62]
NetEase Yidun [63]
Getui [65]
SUBMAIL [67]
Emay [69]
Tencent Cloud [70]
Up Cloud [72]
Huitong [74]
DCloud [76]
Publicity1 App
Num
54
25
10
8
0
0
/
0
0
0
¸
¸
¸
¸
¸
¸
Ø
¸
¸
¸
Third-party
SDK
Jiguang [61]
U-Verify [53]
MobTech [64]
Shareinstall [66]
Jixin [68]
Alibaba Cloud [57]
Qianfan Cloud [71]
Baidu AI Cloud [73]
Santi Cloud [75]
Weiwang [77]
Publicity1 App
Num
38
18
8
4
/
/
/
0
0
0
¸
¸
¸
¸
Ø
Ø
Ø
¸
¸
¸
Total Num
163 2
1 Publicity indicates whether the third-party agent has published its OTAuth SDK or
highlighted apps.
2 Two apps integrate GEETEST [62] SDK and Getui [65] SDK at the same time.
Impacts of SIMulation Attacks. According to the statistical
report of CNNIC [78], the total number of mobile internet
users in mainland China has surpassed 1 billion by June 2021
and nearly all of them use services provided by the three
major MNOs. Since OTAuth service is enabled by default,
the SIMULATION attack could potentially affect all users of
the three MNOs. Even worse, according to our observations,
neither the MNOs nor the apps have provided an option that
allows users to disable this login scheme, meaning that it’s
hard to alleviate this threat from the user side.
In the meantime, among the vulnerable apps we have
identified, 17 apps have more than 100 million MAU (shown
in Table IV) and 87 apps have more than 10 million MAU3.
Therefore, if the SIMULATION attack could be conducted on
an arbitrary mobile device (either with Android or iOS), it
3 Based on statistics published by IiMedia Polaris [11].
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
542
is very likely that the phone number has been registered to
several popular apps.
In addition to the major design flaw discussed in Section III,
we also discovered several additional issues that lead to extra
unexpected risks. We summarized them as follows:
• User
design
original
Identity Leakage. The
of
OTAuth only returns a masked phone number (e.g.,
“186******98”) when receiving the OTAuth request.
This partially leaks the sensitive information of the user
identity. Even worse, we found a further step could be
leveraged to fully disclose the victim’s phone number:
when receiving a valid token, some app servers not only
send it to the MNO server to obtain the phone number
of the user but also respond this phone number to the
user (app). Such an app server can be easily abused as
an oracle to obtain the victim’s phone number. Examples
of affected apps in this case include ESurfing Cloud
Disk [79], a highly popular private cloud storage app
with more than 400 million users.
• OTAuth Service Piggybacking. To use OTAuth service,
developers are required to register their apps and pay
the corresponding fees. However, an app could abuse the
OTAuth service of other registered apps to implement a
free and unauthorized use. Similar to the user identity
leakage cases, once a registered app could be abused as
an oracle to retrieve user’s phone number, the malicious
app easily reuses the appId and appKey of the victim
app to first obtain a token from the MNO server, and
then uses the token to exchange phone number from the
app server. In this way, the malicious app freely uses
the OTAuth service without the permission of both MNO
and app servers. More seriously, we noticed that the use
of OTAuth service is not free. For the legitimate use of
OTAuth, an app needs to pay a certain fee to the MNOs
or third-party agents for each login. For instance, China
Telecom charged a 0.1 RMB (around 0.016 USD) service
fee for each OTAuth [80]. If the OTAuth service of a
legitimate registered app is frequently abused by those
unregistered apps, the legitimate app would suffer from
a lot of unexpected expenses.
time:
• Account Registration without User Awareness. We ob-
served that a large portion of app providers not only
integrated OTAuth services but also simplified their app
account registration and activation processes when a
user uses the OTAuth for the first
if the used
phone number has not yet been registered to the app
service, it will be automatically registered without any
user involvement. While this automated process facilitates
new users, it actually expands the attack surface of the
SIMULATION attack. Even if a user would not like to
use a certain app, SIMULATION attack could exploit this
(insecure) design to associate her phone number to a
new account. In our research, our manual investigation
confirmed that 390 out of 396 vulnerable Android apps
allow an adversary to register a new account without
any additional information. In other words, for these 390
apps, if the victim’s phone number has not been used for
registration, the attacker can register a new account with
the victim’s phone number.
D. Other Implementation Weaknesses
Our analysis of the identified apps and SDKs also revealed
a set of additional implementation weaknesses of the OTAuth
services, involving both SDK developers and app developers.
Insecure token usage. As an important credential, the use of
token should have been strictly restricted. However, in reality,
some MNO’s restrictions on tokens are not strict enough,
mainly including: (1) Token reuse. In theory, each token should
be invalidated after being sent to MNO server by app server (in
step 3.2 of Figure 3). However, after experiments, we found
that in China Telecom’s OTAuth service, a token can be used
to complete multiple logins within its valid time. In addition,
during the validity period of token, the tokens obtained by
multiple requests of the app client remain unchanged. (2)
Multiple effective tokens. Similar to SMS OTP, there should
be only one valid token at a time. However, in China Unicom’s
OTAuth service, newly obtained token will not invalidate the
older token. (3) Too long validity period. Among the three
MNOs in mainland China, China Mobile, China Unicom and
China Telecom have set token validity period to be 2 minutes,
30 minutes, and 60 minutes, respectively. We believe the latter
two MNOs have set a too long validity period, which brings
risks to security.
Authorization without user consent. OTAuth SDKs require
the app to obtain user’s mobile phone number only after ob-
taining user’s authorization (step 1.5 and step 2.1 of Figure 3).
MNO’s SDKs and third-party SDKs do pop up an interface
(see Figure 1) to ask for user’s authorization. While MNOs
and third-party agents ensure that the interface indeed pops
up (e.g., through resource protection or manual review), we
discovered that some apps, such as one popular payment app
with more than 1 billion users worldwide, have retrieved the
token before popping up the interface. With this token, these
apps can easily obtain the user’s phone number without user’s
authorization.
Plain-text storage of sensitive information. According to
the design of MNO, the appId and appKey of an app are
specific and fixed. Through analyzing real-world apps, we
found that many apps have hard-coded their appId and appKey
into program files in plain-text form, which makes it easy for
an attacker to obtain the appId and appKey.
V. MITIGATION
We observed that both the OTAuth SDK vendors and the app
developers have adopted some ineffective strategies to protect
the OTAuth scheme. We summarized and analyzed typical
(insecure) defenses as follows:
• Using app hardening technique to hide appId and
appKey. Many app developers applied app hardening
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
543
techniques such as code obfuscation, packing, or anti-
debugging to prevent
their apps from being reverse-
engineered. However, such protection cannot fundamen-
tally prevent attackers from retrieving appId and appKey.
• Using appPkgSig to verify the client’s legitimacy. The
MNO server asks the SDK to obtain the appPkgSig of
the app client from the OS, and adds it in request, trying
to identify whether the request is sent from a benign app
client. Unfortunately, attackers could easily replace the
appPkgSig sent by the malicious app client (e.g., through
patching the SDK or impersonating the benign app client
to send network packets).
• Using UI-based confirmation to enforce user’s involve-
ment. The OTAuth SDKs, as we observed, would prompt
the user (as the blue boxes in Figure 1 show) during an
OTAuth process. In addition, an app with OTAuth SDK
must be vetted by MNOs to ensure there exists such a
confirmation before the SDKs are invoked. However, such
a design cannot guarantee that the user really involves in
the OTAuth process, since it needs no user-related input
to construct the login request.
We argue that the failure of the above-mentioned defenses
is they cannot fundamentally prevent an attacker from imper-
sonating a legitimate app. Correspondingly, we proposed the
following countermeasures by adding certain factors that only
a legitimate app and its user could generate:
• Adding user-input data into the login request. The
OTAuth process could require users to provide some
information that is unknown to the attacker (e.g., her full
phone number or her family name). However, this may
raise usability issues and affect the user experience.
• Adding OS-level support. OS has the capability of
dispatching a token to the legitimate app (i.e., the app
with the corresponding package name). Thus, even if a
malicious app can send a login request, it cannot obtain
the token and perform the SIMULATION attack. However,
this may require a deeper cooperation between the OS
vendors and the MNOs.
VI. RELATED WORK
We discuss the related work to our research with the
following two categories, namely, bypassing authentication on
mobile platform, and MNO’s service that is related to mobile
authentication.
Bypassing authentication on mobile platform. Many recent
studies have paid attention to the security risks in authenti-
cation process on mobile platforms. These researches have
achieved similar attacking results to our works, such as log
in to the victim’s account without authorization. The major
difference between these works and ours is that they focus on
different authentication schemes provided by apps, instead of
third-parties (e.g., the MNOs). For example, Song et al. [6]
developed an Android OS-level virtualization platform that
is called VPDroid,
the automatic login feature
implemented by individual apps. Bianchi et al. [81] explored
to exploit
the unsafe login-less authentication schemes in which distin-
guishing information of user device are used. Lei et al. [8]
revealed the insecurity of SMS-related new APIs provided
by Android systems, and they showed how to abuse such
features to perform user-interaction-free unauthorized login.
Jubur et al. [7] demonstrated the feasibility of bypassing
app’s push-based authentication scheme by triggering human-
indistinguishable notifications. Wang et al. [82], [83] focused
on the security risks of apps that adopted the OAuth-based
authentication schemes.
MNO’s service for mobile authentication. Traditionally,
most Mobile Network Operators provide SMS-based authen-
tication services (i.e., the One-Time Password), which are
widely used by mobile apps. Following this line of topic, there
are a wide range of malwares (e.g., ZitMo [84], SPITMO &
Tatanga MITMO [85], and Crusewind [86]) that target stealing
the SMS message for bypassing the user authentication. In
addition, Enck et al. [87] and Golde [88] conducted research
on abusing SMS to perform DoS attacks. Their research
showed that SMS can be exploited to prevent phone users
from making calls or exhaust the user’s phone balance.
Other than attacks targeting SMS, the SIM Swapping at-
tack [9] exploits MNO’s ability of seamlessly binding a phone
number to a new SIM card, which can further route the
authentication SMS to the attacker. SIM Clone attack allow
attackers to obtain a SIM card, which is almost equivalent to
the victim’s. Liu et al. [36] presented how to copy a 3G/4G
USIM card within 15 minutes through Side-Channel Analysis.
Coletta et al. [89] studied seven major Italian MNOs and found
that attackers could steal user data (such as phone number, the
amount of phone calls, etc.) by visiting specific web pages.
VII. CONCLUSION
In this paper, we conduct the first in-depth security study on
the Mobile Network Operator based One-Tap Authentication
scheme (MNO-based OTAuth scheme). Our research has iden-
tified several fundamental design flaws in this authentication
scheme. Such design flaws bring severe security implications
to apps that integrate this type of service. For example, an
adversary who bypasses this authentication scheme can gain
full access to the victim’s app account. To further evaluate the
impact of our identified issues to the real world, we performed
a large-scale measurement over a set of top popular apps in
mainland China (including both Android and iOS apps). The
measurement results showed that a large portion of highly
popular apps are affected by this issue. Lastly, we discuss
possible ways to mitigate such threats.
We are grateful
ACKNOWLEDGMENT