# 【技术分享】使用 WinAFL 对 MSXML6 库进行模糊测试
|
##### 译文声明
本文是翻译文章，文章来源：symeonp.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[ **天鸽**](http://bobao.360.cn/member/contribute?uid=145812086)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**MSXML库模糊测试**
在这篇博客中，我将介绍怎样使用 [**WinAFL**](https://github.com/ivanfratric/winafl) **fuzzer**
来对 **MSXML** 库做模糊测试。
也许你还没有使用过 WinAFL，它是由 **Ivan** （Google's Project Zero）创造的一个大型 fuzzer，它基于
**Icumtuf** 创造的使用 **DynamoRIO** 来测量代码覆盖率的
[AFL](http://lcamtuf.coredump.cx/afl/)，和用于内存和进程创建的 Windows API。[Axel
Souchet](https://twitter.com/0vercl0k) 一直在积极地提供新功能，如最新稳定版中的 [corpus
minimization](https://github.com/ivanfratric/winafl/commit/691dc760690750752054794891f75fbce50fee56)，将在下一篇博客中介绍的
[persistent execution
mode](https://github.com/ivanfratric/winafl/commit/8aa1e138dd0284b1da5c844c5d21fc5ebe5d1c45)
和 [afl-tmin](https://github.com/ivanfratric/winafl/commit/992a68ba34df152e07453f0b592ff79aa8d4de9a)
工具。
我们将从创建一个测试框架（test harness）开始，它可以让我们在库中 fuzz 一些解析函数，计算覆盖范围和最小化测试用例，最后以启动 fuzzer
和对结果进行分类来结束。最后，感谢来自 0patch 的 Mitja Kolsek 提供的补丁，它展示了怎样用 0patch 来修补该漏洞！
使用上述步骤，我已经在函数 msxml6!DTD::findEntityGeneral 中找到了一个 NULL pointer dereference
的问题，我向微软报告后被拒绝，他们认为这不是一个安全问题。公平地说，只有 crash 确实没用，希望有人能发现一些有趣的东西。
**测试框架**
在做了一些研究的时候，我在[这里](https://msdn.microsoft.com/en-us/library/ms754517%28v=vs.85%29.aspx)发现了微软提供的一个 C++ 示例代码，它允许我们提供一些 XML
文件并验证其结构。我将使用 Visual Studio 2015 来构建下面的程序，但在之前，我稍微做了点修改，使用了 Ivan 的 charToWChar
方法，它接受一个参数作为一个文件：
    // xmlvalidate_fuzz.cpp : Defines the entry point for the console application.
    //
    #include "stdafx.h"
    #include 
    #include 
    #include 
    #import 
    extern "C" __declspec(dllexport)  int main(int argc, char** argv);
    // Macro that calls a COM method returning HRESULT value.
    #define CHK_HR(stmt)        do { hr=(stmt); if (FAILED(hr)) goto CleanUp; } while(0)
    void dump_com_error(_com_error &e)
    {
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());
        printf("Errorn");
        printf("atCode = %08lxn", e.Error());
        printf("atCode meaning = %s", e.ErrorMessage());
        printf("atSource = %sn", (LPCSTR)bstrSource);
        printf("atDescription = %sn", (LPCSTR)bstrDescription);
    }
    _bstr_t validateFile(_bstr_t bstrFile)
    {
        // Initialize objects and variables.
        MSXML2::IXMLDOMDocument2Ptr pXMLDoc;
        MSXML2::IXMLDOMParseErrorPtr pError;
        _bstr_t bstrResult = L"";
        HRESULT hr = S_OK;
        // Create a DOMDocument and set its properties.
        CHK_HR(pXMLDoc.CreateInstance(__uuidof(MSXML2::DOMDocument60), NULL, CLSCTX_INPROC_SERVER));
        pXMLDoc->async = VARIANT_FALSE;
        pXMLDoc->validateOnParse = VARIANT_TRUE;
        pXMLDoc->resolveExternals = VARIANT_TRUE;
        // Load and validate the specified file into the DOM.
        // And return validation results in message to the user.
        if (pXMLDoc->load(bstrFile) != VARIANT_TRUE)
        {
            pError = pXMLDoc->parseError;
            bstrResult = _bstr_t(L"Validation failed on ") + bstrFile +
                _bstr_t(L"n=====================") +
                _bstr_t(L"nReason: ") + _bstr_t(pError->Getreason()) +
                _bstr_t(L"nSource: ") + _bstr_t(pError->GetsrcText()) +
                _bstr_t(L"nLine: ") + _bstr_t(pError->Getline()) +
                _bstr_t(L"n");
        }
        else
        {
            bstrResult = _bstr_t(L"Validation succeeded for ") + bstrFile +
                _bstr_t(L"n======================n") +
                _bstr_t(pXMLDoc->xml) + _bstr_t(L"n");
        }
    CleanUp:
        return bstrResult;
    }
    wchar_t* charToWChar(const char* text)
    {
        size_t size = strlen(text) + 1;
        wchar_t* wa = new wchar_t[size];
        mbstowcs(wa, text, size);
        return wa;
    }
    int main(int argc, char** argv)
    {
        if (argc n", argv[0]);
            return 0;
        }
        HRESULT hr = CoInitialize(NULL);
        if (SUCCEEDED(hr))
        {
            try
            {
                _bstr_t bstrOutput = validateFile(charToWChar(argv[1]));
                MessageBoxW(NULL, bstrOutput, L"noNamespace", MB_OK);
            }
            catch (_com_error &e)
            {
                dump_com_error(e);
            }
            CoUninitialize();
        }
        return 0;
    }
请注意下面的代码片段：
    extern "C" __declspec(dllexport)  int main(int argc, char** argv);
本质上，这允许我们使用 target_method 参数，DynamoRIO 将尝试为给定的[符号名（symbol
name）](http://dynamorio.org/docs/group__drsyms.html#ga2e6f4d91b65fc835c047c8ca23c83d06%29)检索地址，如[这里](https://github.com/ivanfratric/winafl/blob/372a9746fb84a4c3a7656e7b79bf7e8c0c146142/winafl.c#L525)所示。  
我们可以按照 README 中使用的偏移方法，但是由于 ASLR
和所有这些东西，我们希望对模糊测试进行扩展，将二进制文件复制到许多台虚拟机里，并能使用相同的命令来进行 fuzz。指令 extern "C" 将
unmange 函数名，并使其看起来更漂亮。  
要确定 DynamoRIO 确实可以使用此方法，输入下面的命令：
    dumpbin /EXPORTS xmlvalidate_fuzz.exe