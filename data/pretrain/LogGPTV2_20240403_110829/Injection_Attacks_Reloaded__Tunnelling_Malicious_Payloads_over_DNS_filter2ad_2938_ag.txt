### Mitigations against Cache-Poisoning

Since cache-poisoning attacks cannot be reliably detected by downstream forwarders, they must be mitigated by patching the resolvers that cause the misinterpretation. If a resolver is only misinterpreting malicious records (but not caching them, as in the case of Verisign Public DNS), switching to a DNS forwarder that does not cache cross-CNAME records can prevent the attack. However, this does not address the root cause of the issue.

For operators who are unable to implement changes at the application or stub-resolver level, using filtering proxies that perform validation steps at the network level is an alternative. We provide a proof-of-concept implementation of such a proxy at [xdi-attack.net](https://xdi-attack.net).

If the resolver operator cannot fix the vulnerability, switching to another DNS resolver is the best option.

### Related Work

#### DNS Cache Poisoning

Kaminsky provided the first demonstration of a DNS cache poisoning attack [39]. Since then, DNS resolvers have been patched to support best practices, including randomizing fields in requests (such as source port and DNS TXID) and validating them in responses, and applying checks like bailiwick [21, 22]. This makes DNS more resilient to off-path cache poisoning attacks. However, recent works have developed cache poisoning attacks when DNS responses are served over UDP [40]. These attacks use different side channels to predict randomization parameters and other methodologies like fragmentation to bypass guessing the parameters altogether [8–10, 41–45].

Our attacks are not limited by the transport protocol and apply to both DNS over TCP and DNS over UDP. Unlike existing DNS cache poisoning attacks, which evaluate the cache poisoning on one victim DNS resolver and then check if some selected population of DNS resolvers have properties that could potentially make them vulnerable, our attack is the first to be fully automated and evaluated on a large set of target networks (3 million) and successfully launched against 105,000 resolvers. Prior attacks cannot be automated because they need to be tailored to each target victim resolver [8–10, 44, 45]. For example, servers set the fragmentation offset slightly differently, making fragmentation difficult to match, and servers randomize the records in responses, making the UDP checksum extremely difficult to match. Our attack is not restricted by these hurdles.

None of the proposed non-cryptographic defenses prevent our cache poisoning attacks. Even cryptographic protection with DNSSEC [RFC4033-RFC4035] [11–13], which blocks all previous DNS cache poisoning attacks, does not prevent our attacks in common settings. Furthermore, DNSSEC deployments often use weak cryptographic algorithms or vulnerable keys [46–48]. Cipher-suite negotiation schemes have been proposed to allow easy adoption of stronger cryptographic ciphers [49].

Recent proposals for encrypting DNS traffic, such as DNS over HTTPS [50] and DNS over TLS [51], although vulnerable to traffic analysis [52, 53], may enhance resilience to cache poisoning but do not prevent our injection attack.

#### User Input Injections in Web Applications

Injection vulnerabilities [54] are a primary medium for performing remote exploits, including SQL injection attacks [54], Cross-Site Scripting (XSS) [55], buffer overflow [56], XPath injections [57], LDAP injections [58], HTTP header injection [59], Email header injection [60], and SMTP injection [61]. These differ from our injection attacks, which apply even when user input is properly validated and where users cannot provide any meaningful input, as we deliver malicious payloads by encoding them into DNS records.

#### DNS Rebinding Attacks

DNS rebinding attacks [62, 63] use a script on the victim's network and an external attacker to create confusion in web browsers, bypassing the Same Origin Policy (SOP) by mapping the external attacker to an internal IP address. This allows the attacker to impersonate internal hosts to bypass filtering applied to external packets, such as for spam or Denial of Service (DoS) attacks. Our attacks target internal services directly without impersonating internal devices. DNS rebinding can be prevented by filtering private IP addresses, blocking the resolution of external hostnames into internal IP addresses, or via DNS pinning [62] in web browsers—none of which prevent our attacks.

### Conclusions

Our work highlights that central transparency-related principles in the development of Internet systems should be reconsidered:

**Flexibility:** The principle of being strict when sending and permissive when receiving is generally good for the Internet. Systems and protocols that are too rigid are much more difficult to use and require significant changes to the existing infrastructure for adopting new technologies or mechanisms. The success of DNS in providing a platform for new applications is due to its transparent handling of DNS records. If DNS were made less transparent, for example, by requiring that records be checked for invalid characters, it would make rolling out new applications in the Internet much more challenging. New applications using records containing unsupported characters, like those in SRV record types, would require changes to DNS servers across the Internet, risking failures or crashes on unupgraded servers. On the other hand, making systems too tolerant can expose them to vulnerabilities. We showed that leaving the specification completely open exposes DNS and the applications using it to attacks. Hence, a balance should be found between ease of deployment and security.

**Layering:** Although it is a known networking principle that each layer provides services to the layer above it, and the upper layer does not have to worry about the data provided by lower protocols, we show that when it comes to security, this principle may result in vulnerabilities. We recommend integrating the validation of DNS data directly into applications, rather than relying on lower layers to do this. For instance, it may not always be possible for DNS to predict all the applications of the data it provides and the scenarios in which it will be used. Therefore, even if DNS is changed to apply checks over the data in DNS records, the applications should still perform their own validation.

### Acknowledgements

We are grateful to Yuval Yarom and the anonymous referees for their thoughtful feedback on our work. This work has been co-funded by the German Federal Ministry of Education and Research and the Hessen State Ministry for Higher Education, Research, and Arts within their joint support of the National Research Center for Applied Cybersecurity ATHENE and by the Deutsche Forschungs-gemeinschaft (DFG, German Research Foundation) SFB 1119.

### References

[References listed as in the original text]

---

This version of the text is more structured, clear, and professional, with improved flow and coherence.