tacks, operators which are unable to implement changes on the
application- or stub-resolver-level might use ﬁltering proxies
which implement those validation steps on the network-level
instead7.
Mitigations against cache-poisoning. Since the cache-
poisoning attacks cannot be reliably detected by downstream
forwarders, these attacks must be mitigated by patching the
resolvers causing the misinterpretation. If the resolver is only
misinterpreting malicious records (but not caching them, like
Verisign Public DNS), switching to a DNS forwarder which
does not cache cross-CNAME records can prevent the at-
tack. This however does not ﬁx the root cause of the issue.
7We provide a proof-of-concept implementation of such a proxy at https:
//xdi-attack.net.
USENIX Association
30th USENIX Security Symposium    3179
When the resolver operator cannot not ﬁx the vulnerability,
switching to another DNS resolver is the best option.
6 Related Work
DNS cache poisoning. Kaminsky provided the ﬁrst demon-
stration of DNS cache poisoning attack [39]. Since then
DNS resolvers have been patched to support best practices
[RFC5452] [21]: randomising ﬁelds in requests, such as
source port and DNS TXID, and validating them in responses,
and also to apply checks such as bailiwick [22]. This makes
DNS resilient to off-path cache poisoning attacks. Neverthe-
less, recent works developed cache poisoning attacks when
DNS responses are served over UDP [40]. The attacks use
different side channels to predict the randomisation param-
eters, as well as other methodologies like fragmentation to
bypass guessing the parameters altogether, [8–10,41–45]. Our
attacks are not limited by the transport protocol and apply
to DNS over TCP as well as DNS over UDP. In contrast to
all existing DNS cache poisoning attacks which evaluate the
cache poisoning on one victim DNS resolver and then check
if some selected population of DNS resolvers have the prop-
erties that could potentially make them vulnerable, our attack
is the ﬁrst to have been fully automated and evaluated on a
large set of target networks, 3M, and the ﬁrst to have been
successfully launched against 105K resolvers. Prior attacks
cannot be automated since they need to be tailored per each
target victim resolver [8–10, 44, 45]. For instance, the servers
set the fragmentation offset slightly differently hence making
fragmentation difﬁcult to match, the servers randomise the
records in responses making the UDP checksum extremely
difﬁcult to match, UDP ports need to be measured per each
target separately, overwriting cached records with new values
depends on already cached records and caching policies, and
so on. Our attack is not restricted by these hurdles.
None of the proposed non-cryptographic defences prevent
our cache poisoning attacks. Even the cryptographic pro-
tection with DNSSEC [RFC4033-RFC4035] [11–13], which
blocks all previous DNS cache poisoning attacks, does not pre-
vent our attacks in common settings. Furthermore, DNSSEC
deployments were showed to often use weak cryptographic
algorithms or vulnerable keys, [46–48]. Cipher-suite nego-
tiation schemes were proposed to allow easy adoption of
stronger cryptographic ciphers [49].
Recent proposals for encryption of DNS trafﬁc, such as
DNS over HTTPS [50] and DNS over TLS [51], although
vulnerable to trafﬁc analysis [52, 53], may also enhance re-
silience to cache poisoning but do not prevent our injection
attack.
User input injections in web applications. Injection vul-
nerabilities [54] are the primary medium for performing re-
mote exploits, including SQL injection attacks [54], Cross
Site Scripting (XSS) [55], buffer overﬂow [56], XPath injec-
tions [57], LDAP injections [58], HTTP header injection [59],
Email header injection [60], SMTP injection [61]. All these
differ from our injection attacks. User injection attacks via the
web interfaces are typically blocked as user input is sanitised
prior to being accepted by applications. Our attacks apply
even when user input is properly validated and also where
the users cannot provide any meaningful input at all, since
we deliver malicious payloads by encoding them into DNS
records.
DNS rebinding attacks. DNS rebinding attack [62, 63]
uses a script on the victim network and an external attacker
to create a confusion in web browsers bypassing Same Ori-
gin Policy (SOP), say by mapping the external attacker to
an internal IP address. This allows the attacker to imperson-
ate internal hosts in order to bypass ﬁltering that is applied
on external packets, e.g., for spam or for Denial of Service
(DoS) attacks. Our attacks target the internal services directly,
without impersonation of internal devices. DNS rebinding
are prevented, e.g., with ﬁltering private IP addresses and
blocking the resolution of external hostnames into internal IP
addresses, or via DNS pinning [62] in web browsers - none
of which prevent our attacks.
7 Conclusions
Our work shows that central transparency-related principles
of development of Internet systems should be reconsidered:
Flexibility. Be strict when sending and permissive when
receiving is a good principle in the Internet. Systems and
protocols that are too rigid are much more difﬁcult to use
and require signiﬁcant changes to the existing infrastructure
for adoption of new technologies or mechanisms. The huge
success of DNS in providing platform to new applications is
thanks to its transparent handling of DNS records. If DNS
is made less transparent, e.g., by requiring that the records
are checked for invalid characters, it would make the roll out
of new applications in the Internet much more challenging.
For instance, if DNS parsed each record, new applications
using records containing not yet supported characters, e.g., not
just alphanumeric characters, like in SRV record type, would
require changes to the DNS servers all over the Internet to
enable support for new characters. Unupgraded servers would
risk failures or even crashes when processing the new records.
On the other hand, making systems too tolerant can expose
to vulnerabilities. We showed that leaving the speciﬁcation
completely open exposes DNS and the applications using
DNS to attacks. Hence, a balance should be found between
the ease of deployment and security.
Layering. Although it is a known networking principle
that each layer provides services to the layer above it, and the
upper layer does not have to worry about the data provided
by lower protocols, we show that when it comes to security
this principle may result in vulnerabilities. We recommend
that the validation of DNS data is integrated into applications
directly not relying on the lower layers to do this for them.
For instance, it may not always be possible for DNS to predict
all the applications of the data that it provides and scenarios
3180    30th USENIX Security Symposium
USENIX Association
where it will be used. Hence even if DNS is changed to apply
checks over the data in DNS records, the applications should
nevertheless do the validation also themselves.
Acknowledgements
We are grateful to Yuval Yarom and to the anonymous
referees for their thoughtful feedback on our work.
This work has been co-funded by the German Federal Min-
istry of Education and Research and the Hessen State Min-
istry for Higher Education, Research and Arts within their
joint support of the National Research Center for Applied
Cybersecurity ATHENE and by the Deutsche Forschungsge-
meinschaft (DFG, German Research Foundation) SFB 1119.
References
[1] C. Farrell, M. Schulze, S. Pleitner, and D. Baldoni, “DNS
Encoding of Geographical Location,” RFC 1712 (Experimental),
Internet Engineering Task Force, Nov. 1994. [Online]. Available:
http://www.ietf.org/rfc/rfc1712.txt
[2] P. Hoffman and J. Schlyter, “The DNS-Based Authentication of
Named Entities (DANE) Transport Layer Security (TLS) Protocol:
TLSA,” RFC 6698 (Proposed Standard), Internet Engineering Task
Force, Aug. 2012, updated by RFCs 7218, 7671. [Online]. Available:
http://www.ietf.org/rfc/rfc6698.txt
[3] A. Gustafsson, “Handling of Unknown DNS Resource Record (RR)
Types,” RFC 3597 (Proposed Standard), Internet Engineering Task
Force, Sep. 2003, updated by RFCs 4033, 4034, 4035, 5395, 6195,
6895. [Online]. Available: http://www.ietf.org/rfc/rfc3597.txt
[4] P. Mockapetris, “Domain names - implementation and speciﬁcation,”
RFC 1035 (INTERNET STANDARD), Internet Engineering Task
Force, Nov. 1987, updated by RFCs 1101, 1183, 1348, 1876, 1982,
1995, 1996, 2065, 2136, 2181, 2137, 2308, 2535, 2673, 2845, 3425,
3658, 4033, 4034, 4035, 4343, 5936, 5966, 6604, 7766. [Online].
Available: http://www.ietf.org/rfc/rfc1035.txt
[5] W. G. Halfond, J. Viegas, A. Orso et al., “A classiﬁcation of SQL-
injection attacks and countermeasures,” in Proceedings of the IEEE
international symposium on secure software engineering, vol. 1.
IEEE,
2006, pp. 13–15.
[6] J. Grossman, S. Fogie, R. Hansen, A. Rager, and P. D. Petkov, XSS
attacks: cross site scripting exploits and defense. Syngress, 2007.
[7] T. Pietraszek and C. V. Berghe, “Defending against injection attacks
through context-sensitive string evaluation,” in International Workshop
on Recent Advances in Intrusion Detection. Springer, 2005, pp. 124–
145.
[8] A. Herzberg and H. Shulman, “Fragmentation Considered Poisonous:
or one-domain-to-rule-them-all.org,” in IEEE CNS 2013. The Confer-
ence on Communications and Network Security, Washington, D.C., U.S.
IEEE, 2013.
[9] X. Zheng, C. Lu, J. Peng, Q. Yang, D. Zhou, B. Liu, K. Man, S. Hao,
H. Duan, and Z. Qian, “Poison over troubled forwarders: A cache
poisoning attack targeting DNS forwarding devices,” in 29th USENIX
Security Symposium (USENIX Security 20), 2020, pp. 577–593.
[10] K. Man, Z. Qian, Z. Wang, X. Zheng, Y. Huang, and H. Duan, “DNS
Cache Poisoning Attack Reloaded: Revolutions with Side Channels,”
in Proceedings of the 2020 ACM SIGSAC Conference on Computer
and Communications Security CCS. ACM, 2020.
[11] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose, “DNS
Security Introduction and Requirements,” RFC 4033 (Proposed
Standard), Internet Engineering Task Force, Mar. 2005, updated by
RFCs 6014, 6840. [Online]. Available: http://www.ietf.org/rfc/rfc4033.
txt
[12] ——, “Resource Records for the DNS Security Extensions,” RFC
4034 (Proposed Standard), Internet Engineering Task Force, Mar.
2005, updated by RFCs 4470, 6014, 6840, 6944. [Online]. Available:
http://www.ietf.org/rfc/rfc4034.txt
[13] ——, “Protocol Modiﬁcations for the DNS Security Extensions,”
RFC 4035 (Proposed Standard), Internet Engineering Task Force,
Mar. 2005, updated by RFCs 4470, 6014, 6840. [Online]. Available:
http://www.ietf.org/rfc/rfc4035.txt
[14] “Standard for Information Technology–Portable Operating System
Interface (POSIX(R)) Base Speciﬁcations, Issue 7,” IEEE Std 1003.1,
2016 Edition (incorporates IEEE Std 1003.1-2008, IEEE Std 1003.1-
2008/Cor 1-2013, and IEEE Std 1003.1-2008/Cor 2-2016), pp. 1–3957,
Sep. 2016.
[15] R. Gilligan, S. Thomson, J. Bound, J. McCann, and W. Stevens, “Basic
Socket Interface Extensions for IPv6,” RFC 3493 (Informational),
Internet Engineering Task Force, Feb. 2003. [Online]. Available:
http://www.ietf.org/rfc/rfc3493.txt
[16] K. Harrenstien, M. Stahl, and E. Feinler, “DoD Internet host
table speciﬁcation,” RFC 952, Internet Engineering Task Force,
Oct. 1985, updated by RFC 1123.
[Online]. Available: http:
//www.ietf.org/rfc/rfc952.txt
[17] R. Braden, “Requirements for Internet Hosts - Application and
Support,” RFC 1123 (INTERNET STANDARD), Internet Engineering
Task Force, Oct. 1989, updated by RFCs 1349, 2181, 5321, 5966, 7766.
[Online]. Available: http://www.ietf.org/rfc/rfc1123.txt
[18] D. E. 3rd, “Domain Name System (DNS) Case Insensitivity
Clariﬁcation,” RFC 4343 (Proposed Standard), Internet Engineering
Task Force, Jan. 2006. [Online]. Available: http://www.ietf.org/rfc/
rfc4343.txt
[19] ——, “Domain Name System (DNS) IANA Considerations,” RFC
6895 (Best Current Practice), Internet Engineering Task Force, Apr.
2013. [Online]. Available: http://www.ietf.org/rfc/rfc6895.txt
[20] H. Shulman and M. Waidner, “Towards security of internet naming
infrastructure,” in European Symposium on Research in Computer
Security. Springer, 2015, pp. 3–22.
[21] A. Hubert and R. van Mook, “Measures for Making DNS More
Resilient against Forged Answers,” RFC 5452 (Proposed Standard),
Internet Engineering Task Force, Jan. 2009. [Online]. Available:
http://www.ietf.org/rfc/rfc5452.txt
[22] R. Elz and R. Bush, “Clariﬁcations to the DNS Speciﬁcation,” RFC
2181 (Proposed Standard), Internet Engineering Task Force, Jul. 1997,
updated by RFCs 4035, 2535, 4343, 4033, 4034, 5452. [Online].
Available: http://www.ietf.org/rfc/rfc2181.txt
[23] C. Rigney, A. Rubens, W. Simpson, and S. Willens, “Remote
Authentication Dial In User Service (RADIUS),” RFC 2058 (Proposed
Standard), Internet Engineering Task Force, Jan. 1997, obsoleted by
RFC 2138. [Online]. Available: http://www.ietf.org/rfc/rfc2058.txt
[24] radsecproxy,
“naptr-eduroam.sh,”
Avail-
https://github.com/radsecproxy/radsecproxy/blob/
able:
8d287300f510e0559f01a2e7a4dec90674215f25/tools/naptr-
eduroam.sh
2012.
[Online].
[25] MITRE, “CVE-2010-4052 in GNU C Library (glibc),” 2010.
[Online]. Available: https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2010-4052
[26] M. Smith and T. Howes, “Lightweight Directory Access Protocol
(LDAP): Uniform Resource Locator,” RFC 4516 (Proposed Standard),
Internet Engineering Task Force, Jun. 2006. [Online]. Available:
http://www.ietf.org/rfc/rfc4516.txt
[27] S. Kitterman, “Sender Policy Framework (SPF) for Authorizing Use
of Domains in Email, Version 1,” RFC 7208 (Proposed Standard),
Internet Engineering Task Force, Apr. 2014, updated by RFC 7372.
[Online]. Available: http://www.ietf.org/rfc/rfc7208.txt
USENIX Association
30th USENIX Security Symposium    3181
[28] Ubuntu Community Help Wiki. (2013) Postﬁx/SPF. https://help.ubuntu.
com/community/Postﬁx/SPF, accessed 2020-02-04.
[29] The Postﬁx Home Page. (2020) Postﬁx SMTP Access Policy Dele-
gation. http://www.postﬁx.org/SMTPD_POLICY_README.html, ac-
cessed 2020-02-04.
[30] P. Mockapetris, “Domain names - concepts and facilities,” RFC 1034
(INTERNET STANDARD), Internet Engineering Task Force, Nov.
1987, updated by RFCs 1101, 1183, 1348, 1876, 1982, 2065, 2181,
2308, 2535, 4033, 4034, 4035, 4343, 4035, 4592, 5936. [Online].
Available: http://www.ietf.org/rfc/rfc1034.txt
[31] A. Costello, “Punycode: A Bootstring encoding of Unicode
for Internationalized Domain Names in Applications (IDNA),”
RFC 3492 (Proposed Standard), Internet Engineering Task Force,
Mar. 2003, updated by RFC 5891.
[Online]. Available: http:
//www.ietf.org/rfc/rfc3492.txt
[32] MITRE, “CVE-2009-4487 in nginx 0.7.64,” 2009. [Online]. Available:
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4487
[33] ——, “CVE-2013-1862 in Apache HTTP Server,” 2013. [On-
line]. Available: https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2013-1862
[34] The OpenWrt Project, “LuCI - OpenWrt Conﬁguration Interface,”
2020. [Online]. Available: https://github.com/openwrt/luci
[35] Z. Durumeric, D. Adrian, A. Mirian, M. Bailey, and J. A. Halderman,
“A search engine backed by Internet-wide scanning,” in 22nd ACM
Conference on Computer and Communications Security, Oct. 2015.
[36] M. Kührer, T. Hupperich, J. Bushart, C. Rossow, and T. Holz, “Going
wild: Large-scale classiﬁcation of open dns resolvers,” in Proceedings
of the 2015 Internet Measurement Conference, ser. IMC ’15. New
York, NY, USA: Association for Computing Machinery, 2015,
p. 355–368. [Online]. Available: https://doi.org/10.1145/2815675.
2815683
[37] D. Tatang, C. Schneider, and T. Holz, “Large-scale analysis of
infrastructure-leaking dns servers,” in International Conference on
Detection of Intrusions and Malware, and Vulnerability Assessment.
Springer, 2019, pp. 353–373.
[38] A. Gulbrandsen, P. Vixie, and L. Esibov, “A DNS RR for specifying
the location of services (DNS SRV),” RFC 2782 (Proposed Standard),
Internet Engineering Task Force, Feb. 2000, updated by RFC 6335.
[Online]. Available: http://www.ietf.org/rfc/rfc2782.txt
[39] D. Kaminsky, “It’s the End of the Cache As We Know It,” Presentation
at Blackhat Brieﬁngs, 2008.
[46] T. Dai, H. Shulman, and M. Waidner, “Dnssec misconﬁgurations in
popular domains,” in International Conference on Cryptology and
Network Security. Springer, 2016, pp. 651–660.
[47] H. Shulman and M. Waidner, “One key to sign them all considered
vulnerable: Evaluation of DNSSEC in the internet,” in 14th USENIX
Symposium on Networked Systems Design and Implementation (NSDI
17), 2017, pp. 131–144.
[48] T. Chung, R. van Rijswijk-Deij, D. Choffnes, D. Levin, B. M. Maggs,
A. Mislove, and C. Wilson, “Understanding the role of registrars in
dnssec deployment,” in Proceedings of the 2017 Internet Measurement
Conference, 2017, pp. 369–383.
[49] A. Herzberg, H. Shulman, and B. Crispo, “Less is more: cipher-suite
negotiation for dnssec,” in Proceedings of the 30th Annual Computer
Security Applications Conference, 2014, pp. 346–355.
[50] P. Hoffman and P. McManus, “Rfc 8484: Dns queries over https (doh),”
2018.
[51] Z. Hu, L. Zhu, J. Heidemann, A. Mankin, D. Wessels, and P. Hoffman,
“Rfc 7858-speciﬁcation for dns over transport layer security (tls),” 2016.
[52] H. Shulman, “Pretty bad privacy: Pitfalls of dns encryption,” in Pro-
ceedings of the 13th Workshop on Privacy in the Electronic Society,
2014, pp. 191–200.
[53] S. Siby, M. Juarez, C. Diaz, N. Vallina-Rodriguez, and C. Troncoso,
“Encrypted dns–> privacy? a trafﬁc analysis perspective,” arXiv preprint
arXiv:1906.09682, 2019.
[54] Z. Su and G. Wassermann, “The essence of command injection attacks
in web applications,” Acm Sigplan Notices, vol. 41, no. 1, pp. 372–382,
2006.
[55] Y. Nadji, P. Saxena, and D. Song, “Document structure integrity: A
robust basis for cross-site scripting defense.” in NDSS, vol. 20, 2009.
[56] M. Dalton, H. Kannan, and C. Kozyrakis, “Real-world buffer over-
ﬂow protection for userspace and kernelspace.” in USENIX Security
Symposium, 2008, pp. 395–410.
[57] J. Blasco, “Introduction to xpath injection techniques,” in Hakin9, Con-
ference on IT Underground, Czech Republic, 2007, pp. 23–31.
[58] J. M. Alonso, R. Bordon, M. Beltran, and A. Guzman, “LDAP injection
techniques,” in 2008 11th IEEE Singapore International Conference
on Communication Systems, Nov. 2008, pp. 980–986, iSSN: null.
[40] Y. Gilad, A. Herzberg, and H. Shulman, “Off-path hacking: The illu-
sion of challenge-response authentication,” IEEE Security & Privacy,
vol. 12, no. 5, pp. 68–77, 2013.
[59] M. Johns and J. Winter, “Requestrodeo: Client side protection against
session riding,” in Proceedings of the OWASP Europe 2006 Conference,
2006.
[41] A. Herzberg and H. Shulman, “Security of patched DNS,” in European
Symposium on Research in Computer Security. Springer, 2012, pp.
271–288.
[42] ——, “Socket overloading for fun and cache-poisoning,” in Proceed-
ings of the 29th Annual Computer Security Applications Conference,
2013, pp. 189–198.
[43] ——, “Vulnerable delegation of dns resolution,” in European Sympo-
sium on Research in Computer Security. Springer, 2013, pp. 219–236.
[44] M. Brandt, T. Dai, A. Klein, H. Shulman, and M. Waidner, “Domain
validation++ for mitm-resilient pki,” in Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications Security, 2018,
pp. 2060–2076.
[45] F. Alharbi, J. Chang, Y. Zhou, F. Qian, Z. Qian, and N. Abu-Ghazaleh,
“Collaborative Client-Side DNS Cache Poisoning Attack,” in INFO-
COM.
IEEE, 2019.
[60] S. P. Chandramouli, P.-M. Bajan, C. Kruegel, G. Vigna, Z. Zhao,
A. Doupé, and G.-J. Ahn, “Measuring e-mail header injections on the
world wide web,” in Proceedings of the 33rd Annual ACM Symposium
on Applied Computing, 2018, pp. 1647–1656.
[61] T. Terada, “Smtp injection via recipient email addresses,” MBSD White
Paper (December 2015), 2015.
[62] C. Jackson, A. Barth, A. Bortz, W. Shao, and D. Boneh, “Protecting
browsers from dns rebinding attacks,” ACM Transactions on the Web
(TWEB), vol. 3, no. 1, pp. 1–26, 2009.
[63] G. Acar, D. Y. Huang, F. Li, A. Narayanan, and N. Feamster, “Web-
based attacks to discover and control local iot devices,” in Proceedings
of the 2018 Workshop on IoT Security and Privacy, 2018, pp. 29–35.
3182    30th USENIX Security Symposium
USENIX Association