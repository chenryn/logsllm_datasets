as a countermeasure against their own attack (the seller performs
those checks before producing the proof). They first propose a full
check of consistency that results in S-ZK, but requires an expensive
computation. The prover’s runtime so far is estimated to exceed
one hour in [18]. Alternatively, the authors suggested to perform a
minimal check, which in fact does not guarantee that the zkSNARK
in use is S-ZK, but only S-WI. However, also in [27], another attack
against the pay-to-sudoku system was presented, successful even
when the minimal checks by [18] are performed. This result shows
that zkSNARK with these checks is not S-WI and it even exacerbates
the situation by implying that there is no other way around to avoid
the full expensive checks over the crs’ elements. With more than
one hour of estimated running time, the zkCP system using S-ZK
zkSNARK still leaves a lot of room for improvement.
1.1 Our contributions
Formal security definitions for contingent payment. We provide for-
mal security definitions for the properties that a contingent pay-
ment system must satisfy (see Section 3). More concretely, we define
a security game that models the soundness of the protocol: no ef-
ficiently computable seller should be able to receive the payment
without providing the buyer with the desired information (Figure 3).
Furthermore, we design a security game (that resembles the ZK
game) to model the fact that the buyer cannot learn any information
until the payment takes place (Figure 2).
To the best of our knowledge, these properties have not been
formalized in the literature before. (Although we acknowledge
the work by Campanelli et al. [18] for having provided informal
definitions for zero-knowledge contingent service payment.) As
a consequence, previous works contained incorrect statements or
proposed invalid repairs to existing security problems. Our for-
mal treatment of these notions allows us to give precise proofs of
security that make the constructions robust and reliable.
New WI security notion. We define a new security notion for proof
systems that we coin “trapdoor subversion witness indistinguish-
ablility” (tS-WI). Roughly, it states that the scheme is witness in-
distinguishable even if the verifier chooses the crs and samples the
relation (possibly getting a trapdoor associated to it). For example,
consider the following relation:
𝑅𝑓 ,H((𝑐, 𝑦), 𝑟) ⇔ {𝑓 (Dec𝑟 (𝑐)) ∧ 𝑦 = SHA(𝑟)} ∨ 𝑦 = H𝜅(𝑘, 𝑟) .
Trapdoor subversion witness indistinguishability for the above
relation (formally, it should be relative to a relation generator) would
state that the system is subversion witness indistinguishable even if
the distinguisher is given a trapdoor that allows them to efficiently
find preimages for H.
Formal security proof from tS-WI. In order to soften and amend the
criticism to [18] about S-WI not being enough for contingent pay-
ment, we show that our new notion of tS-WI is enough to achieve
secure contingent payment according to our formal definition (The-
orem 3.5). In particular, observe that the transformations of Fuchs-
bauer’s attacks (both the attack against CP and the one against CSP)
do not preserve our tS-WI property.3
Interactive approach for zkCP. We consider our previous contribu-
tion of theoretical interest. However, even if tS-WI suffices for the
contingent payment protocol of Campanelli et al. [18] to be secure,
to the best of our knowledge, no S-WI constructions are known
that are significantly more efficient than full S-ZK schemes. Im-
plementing zkCP in this direction with SNARKs is still risky and
hard to be made efficient. We take on this issue and approach it
with an interactive protocol. Particularly, we replace SNARKs with
an interactive ZK proof system using garbled circuits and oblivious
transfer, as proposed in [35]. In addition, we take into account not
only arithmetic statements but also those of hybrid nature. More
specifically, let 𝐺 be a group with generator 𝑃 and let 𝐴 ∈ 𝐺. Given
: {0, 1}𝑚 → {0, 1}𝑛 and given com ∈ 𝐺, in
a boolean circuit 𝑓
section 4, we propose a zero-knowledge proof system for:
PoK {(𝑠, 𝑥, 𝑡) : com = 𝑠 𝐴 + 𝑡𝑃 ∧ 𝑓 (𝑥) = 𝑠} .
(2)
We also prove that our construction is indeed a zero-knowledge
proof of knowledge.
Implementation. Finally, we implement our construction of interac-
tive proof systems for zkCP from Section 4 and present the results
in Section 5. The experiments concern selling ECDSA and RSA
signatures on a contract. To do so, we design a method for proving
the knowledge of an ECDSA signature or an RSA signature by just
proving knowledge of a discrete logarithm (see Sections 5.1, 5.2).
1.2 Other related works
In [35], Jawurek et al. proposed an efficient, interactive ZK proof
system for statements that are expressed as boolean circuits. Their
work was motivated by the idea of Yao’s garbled circuits and it
provides active security while having complexity proportional to
the size of the circuit representing the relation verification function.
Moreover, this protocol does not require the common cut-and-
choose technique to provide active security, because the verifier
does not have any secret information to hide. The verifier just needs
to transmit one single garbled circuit, which implies a significant
efficiency gain for communication time. Taking into account the
recent advances in garbling schemes, e.g. the half-gate technique
in [46], and in oblivious transfer, e.g. an elegant idea of a simple OT
in [20] or the OT extension technique [4, 5], the protocol of [35]
could result in an even more optimistic performance.
When there are algebraic operations included in the relation, e.g.
group exponentiations, the idea of having a proof system for state-
ments that involves both arithmetic and algebraic computation has
inspired other works in this line, in particular the work by Chase
et al. [19]. Their work originated from the question of verifying
signatures on committed messages, which usually concerns a hash
value of messages and an (EC)DSA or RSA signature on it. The
authors proposed a method that took advantage from the approach
3An adversary (against WI) with the ability to invert H can choose values 𝑠0 and 𝑠1 such
that 𝑓 (𝑠0) = 0 and 𝑓 (𝑠1) = 1, then sample 𝑟1 ←$ {0, 1}256, compute 𝑦 (cid:66) SHA(𝑟1)
and 𝑟0 (cid:66) H−1(𝑦), calling its oracle on instance 𝑦 and witnesses (𝑠0, 𝑟0), (𝑠1, 𝑟1). If
the received proof leaks 𝑓 (𝑠), the adversary will realize which witness was used.
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA643in [35] to prove the non-algebraic part, and link it with sigma pro-
tocols [22] for proving the algebraic one. Additionally, their results
showed the possibility to obtain an efficient proof of knowledge
of signatures on a committed message using DSA, ECDSA, and
RSA signature schemes. We observe that our protocols for proving
knowledge of ECDSA and RSA signatures are simpler, because we
are assuming that the message is public (a natural assumption in
the application of signing a contract), whereas their model can
provide privacy on the message. Furthermore, in the case of ECDSA
signature, we are assuming that the seller is the owner of the secret
key or, in other words, the signature (𝑟, 𝑠) is freshly generated (and
so the first half, 𝑟, can be sent in the clear).
Prior to our work, there was already an attempt by Banasik et
al. [6] that replaces the generic non-interactive ZK building block
by an interactive ZK protocol in the construction of a ZKCP sys-
tem. Their protocol does not use hash-locked transactions but only
standard transactions, which are preferably shorter and less error-
prone. At the same time, it employs the cut-and-choose technique
together with timed commitment to avoid expensive generic ZK
schemes. However, it is vulnerable to the so-called mauling attacks:
an adversary can “maul” a valid transaction in the ledger and output
an equivalent but invalid transaction, e.g., one with the same input
and output and of the same amount, but whose hash identifier is
different from the original one. The authors of [6] were aware of
this attack and pointed out that in some scenarios this attack may
be an issue because many Bitcoin clients cannot handle transactions
whose hash identifiers are different from what was posted in the
ledger. In an attempt to resolve this issue, the authors propose a fix
which prevents the mauling attack that exploits the malleability of
ECDSA signatures. However, their improved construction is still
vulnerable to mauling by changing the script, as mentioned in [18].
Hence, for CP systems that are implemented using the method
in [6], a mauling attack can still be mounted to make the transac-
tions unredeemable and lead to problems when creating Bitcoin
contracts, see [1, 2].
Speaking of subversion resistance for SNARKs, Ben-Sasson et
al. [11] provided a generic multi-party protocol for constructing the
crs, where only if all parties collude will they be able to reproduce
the trapdoor, or in other words, “cheat”. Motivated by this work,
Bowe et al. [15] proposed an efficient and simpler way to achieve
the same goal. More interestingly, the protocol in [15] provides
statistical zero-knowledge even in the case where all players are
malicious. These interactive methods indeed cast a light on possi-
ble solutions for the challenge of subverted crs and the systems
susceptible to it.
2 PRELIMINARIES
For a finite set 𝑆, we write 𝑎 ←$ 𝑆 to denote that 𝑎 is uniformly
sampled from 𝑆. We denote the security parameter by 𝜅 ∈ N. Given
two functions 𝑓 , 𝑔 : N → [0, 1], we write 𝑓 ≈ 𝑔 if the difference
|𝑓 (𝜅) − 𝑔(𝜅)| is asymptotically smaller than the inverse of any
polynomial in 𝜅. A function 𝑓 is said to be negligible if 𝑓 ≈ 0,
whereas it is said to be overwhelming when 𝑓 ≈ 1. For integers
𝑚, 𝑛 ∈ N, we denote by [𝑚, 𝑛] the range {𝑚, . . . , 𝑛} and by [𝑛] the
range [1, 𝑛]. We denote by Z𝑛 the set of integers modulo 𝑛 and
denote by =𝑛 equality modulo 𝑛. Given a string or an integer 𝑠, we
denote by |𝑠| the length of its binary representation. For a bit-string
𝑠 ∈ {0, 1}𝑛, when it is clear from the context, we abuse notation and
refer to 𝑠 as the integer that it represents in binary (in big-endian).
We use additive notation for groups. Given a cyclic group 𝐺 of order
𝑝 with generator 𝑃, and given 𝑎 ∈ Z𝑝, we use(cid:74)𝑎(cid:75) to denote the
For a cryptographic scheme Π with security notion sec and
Π,A(𝜅), we define:
implicit representation 𝑎𝑃 of 𝑎 in 𝐺, following [24].
advantage function (of an adversary A), Advsec
(cid:110)
Π,A(𝜅)(cid:111) .
Advsec
Π (𝜅) (cid:66) max
ppt A
Advsec
We explicitly write the state associated to stateful adversaries,
usually denoted by 𝜎. Given two distributions 𝐷1 and 𝐷2, we write
𝐷1 ≡ 𝐷2 if they are identical and 𝐷1 ≈ 𝐷2 if they are computation-
ally indistinguishable.
2.1 Zero-knowledge proof systems
A zero-knowledge (ZK) proof system [31] is a two party protocol
executed between a prover and a verifier that allows the prover
to convince the verifier about the validity of certain statement,
without revealing any other information, e.g., why the statement
is true. More formally, given a binary relation 𝑅 : X × W →
{0, 1}, defined over a set of statements X and a set of witnesses
W, let 𝐿𝑅 be the language defined as 𝐿𝑅 (cid:66) {𝑥 ∈ X | ∃𝑤 ∈ W :
𝑅(𝑥, 𝑤) = 1}. A zero-knowledge proof system allows a prover in
possession of (𝑥, 𝑤) ∈ 𝑅 to convince a verifier of the fact that 𝑥 ∈ 𝐿𝑅
without revealing any information about 𝑤. Non-interactive ZK
proof systems [13] are a version of ZK proof systems where the
prover sends one single message to the verifier.
Definition 2.1 (Non-Interactive Argument System). A non-interac-
tive argument system (NIZK) for relation 𝑅 is a triple of polynomial-
time algorithms Π = (CrsGen, Prove, Verify) where:
• CrsGen(1𝜅) → crs is a probabilistic algorithm that takes a
security parameter and generates a common reference string.
• Prove(crs, 𝑥, 𝑤) → 𝜋 is a probabilistic algorithm that on input
a crs, an instance 𝑥 and a witness 𝑤, outputs a proof 𝜋.
• Verify(crs, 𝑥, 𝜋) → 0/1 is a deterministic algorithm that on input
a crs, an instance 𝑥 and a proof 𝜋, outputs a bit representing
acceptance (1) or rejection (0).
A NIZK system is complete if for all (𝑥, 𝑤) ∈ 𝑅 and all 𝜅 ∈ N,
crs ← CrsGen(1𝜅), it holds Verify(crs, 𝑥, Prove(crs, 𝑥, 𝑤)) = 1. A
NIZK argument system is said to have the zero-knowledge property
if there exists a simulator that, without any witness (but possibly
some useful piece of information like a trapdoor, or the ability of
rewinding), can produce proofs that look indistinguishable from
proofs produced by an honest prover in possession of a valid wit-
ness. A NIZK argument system is knowledge-sound if there exists a
negligible function 𝜖ks and there exists a polynomial-time extractor
E such that for any ppt adversary A,
Following the notation introduced by Camenisch and Stadler
in [17], we denote a ZK proof of knowledge of secret 𝑤 satisfying
𝑅(𝑥, 𝑤) for some public 𝑅 and 𝑥 as PoK{(𝑤) : 𝑅(𝑥, 𝑤) = 1}.
 crs ← CrsGen(1𝜅)
(𝑥, 𝜋) ← A(crs)