this information in an easily accessible context associated with
each process. Our prototype stores this information inside the
task_struct, which is the data structure Linux uses to rep-
resent a process. Every task_struct is implicitly associated
with a unique process; therefore, this procedure only requires
us to locate the structure corresponding to the PID reported
inside the interaction notiﬁcation, and save the interaction
timestamp inside a new ﬁeld.
To perform a permission check, the permission monitor
ﬁrst receives the PID of the process that requests access to the
sensitive resource, either internally from the device mediation
layer, or from the X server via the netlink channel. Next, it re-
trieves the correct task_struct and compares the timestamp
recorded there (i.e., the most recent user interaction time) with
the privileged operation’s timestamp. If the temporal proximity
of the two is above a conﬁgurable threshold, permission is
granted (or a positive response is sent back to the X server).
We empirically determined that setting a threshold of less than
1 second could lead to falsely revoked permissions, but 2
seconds is sufﬁcient to prevent incorrectly denying access to
legitimate processes. In our long-term experiments with this
conﬁguration, described in Section V-D, we did not encounter
any broken functionality or unusual program behavior.
Process creation and IPC. As previously explained,
OVERHAUL must be able to track interaction information
across process boundaries for any meaningful real-life use. In
Linux, a new process (i.e., the child) is created by duplicating
an existing process (i.e., the parent), using the fork or clone
system calls. This operation duplicates the task_struct of
the parent to be used for the child process, which includes
the interaction timestamp stored in the same data structure.
In other words, our implementation ensures that the parent’s
interaction information is passed down to a newly created child
automatically, without additional modiﬁcation to the kernel.
This property also extends to the threads of a process, because
Linux does not have a strict distinction between processes and
threads and uses a separate task_struct for each.
In contrast, tracking interaction information across IPC
channels requires further modiﬁcations to the kernel, for each
IPC facility provided by the OS. Our implementation supports
all of POSIX shared memory and message queues, UNIX SysV
shared memory and message queues, FIFOs, anonymous pipes,
and UNIX domain sockets. Higher-level IPC mechanisms
that are built on these OS primitives (e.g., D-Bus) are also
automatically covered. These IPC mechanisms are modiﬁed in
a similar manner to propagate interaction information between
the two endpoint processes, which works as follows.
(1) When an IPC channel is ﬁrst established, we embed
inside the kernel data structures that correspond to the IPC
resource an expired interaction timestamp. (2) When a process
wants to send data through an IPC link, it ﬁrst embeds inside
the IPC resource its own interaction timestamp, unless the
structure already contains a more recent timestamp. (3) When
the receiving process reads the data from the channel,
it
compares its own interaction timestamp with that is embedded
inside the IPC resource. If the IPC channel has a more up-to-
date timestamp, the process saves it in its task_struct.
Implementation of this protocol requires adding a times-
tamp ﬁeld inside the IPC data structures, and inserting checks
inside the corresponding send and receive functions for each
IPC facility. However, a notable exception is POSIX and
SysV shared memory, which must be handled differently.
Speciﬁcally, once the kernel allocates and maps a shared
memory region with the mmap system call, writes and reads
to these regions are regular memory operations that cannot
be intercepted above the hardware level. We overcome this
obstacle by taking a different approach. We interpose on virtual
memory mapping operations inside the kernel, check whether
the mapped area is ﬂagged as shared (indicated by a ﬂag
inside the corresponding vm_area_struct), and if so, revoke
read and write permissions for that memory area. This causes
subsequent accesses to that memory region to generate access
violations, which allows OVERHAUL to capture the IPC at-
tempt inside the page fault handler. We then run the interaction
propagation protocol described above, and temporarily restore
450
the memory access permissions to their original values to allow
the memory operation to succeed on the next try. Clearly,
repeating this process for every memory access could lead
to severe performance overhead; therefore, after every access
violation, we put the corresponding vm_area_struct on a
wait list before its permissions are revoked once again. This
allows memory accesses that immediately follow the ﬁrst page
fault to proceed uninterrupted. This wait duration must be
sufﬁciently shorter than the 2 second interaction expiration
time, since we would miss shared memory IPC attempts and
fail to propagate interaction timestamps during this period.
We conﬁgured this duration to 500 ms, which yielded a good
performance-usability trade-off as shown in Section V.
CLI interactions. A ﬁnal
implementation requirement
arises from the fact that Linux systems often make extensive
use of the command line interface. On graphical desktops, this
is achieved by running a terminal emulator (e.g., xterm) which
communicates with a command line shell (e.g., bash) via a pair
of pseudo terminal devices. If the user was to type in the name
of a command line application inside a terminal emulator (as
opposed to using a graphical application launcher), the termi-
nal emulator would receive the input events, and communicate
the command to launch to the shell via the pseudo terminal
devices. Any subsequent device access requests would be made
by a program launched by the shell process, which has not
received any direct interaction (In fact, the shell usually is not
even an X client and, thus, cannot receive X11 input events).
To enable command line tools that access the protected
sensitive devices to function correctly under OVERHAUL, we
implemented an interaction timestamp propagation protocol
analogous to the one described for IPC channels above. Here,
the modiﬁcations are made inside the pseudo terminal device
driver. Whenever a process writes to a terminal endpoint,
that process embeds its timestamp into the kernel data struc-
ture representing the pseudo terminal device. Subsequently,
when another process reads from the corresponding terminal
endpoint, that process copies the embedded timestamp to its
task_struct, unless it already has a more recent timestamp.
Processes isolation and introspection. OVERHAUL does
not require sandboxing of individual user applications, or any
advanced process isolation mechanism beyond the kernel and
process memory isolation that commodity operating systems
provide. In particular, all interaction notiﬁcations in our design
are managed by the OS; they are never exposed to userspace
applications. This prevents malicious applications from tam-
pering with legitimate interaction notiﬁcations to mount denial-
of-service attacks, or hijacking interaction notiﬁcations of
other processes. Similarly, since each interaction notiﬁcation is
bound to a speciﬁc process, malicious applications that run in
the background and receive no user interaction cannot hijack
the permissions granted to another application.
However, process introspection and debugging facilities
offered by OSes need attention, because they might make it
possible to inject malicious code into legitimate applications
that are expected to have access to sensitive resources. In
Linux,
is somewhat contained since the Linux
debugging facilities, such as ptrace and /dev/{PID}/mem
(also using ptrace internally), do not allow attaching to
processes that are not direct descendants of the debugging
process. In other words, even if two unrelated processes run
this threat
Table I.
PERFORMANCE OVERHEAD OF OVERHAUL.
Benchmarks
Device Access
Clipboard
Screen Capture
Shared Memory
Bonnie++
Baseline
45.20 s
116.48 s
68.26 s
234.86 s
47319 ﬁles/s
OVERHAUL Overhead
2.17 %
2.96 %
2.34 %
0.63 %
0.11 %
46.18 s
119.93 s
69.86 s
236.33 s
47265 ﬁles/s
with identical (but non-super user) credentials, they cannot ma-
nipulate each other’s state. In our implementation, we provide
even stricter security by temporarily disabling all permissions
for a debugged process, with a trivial patch to the ptrace
system call. This also prevents parent processes from tracing
their own children, which, in turn, subverts attacks where a
malicious program could launch another legitimate executable,
and then inject code into it. OVERHAUL enables this protection
by default, but it could be toggled by the super user through a
proc ﬁlesystem node to facilitate legitimate debugging tasks.
V. EVALUATION
A. Performance Measurements
Since OVERHAUL is an input-driven system that only im-
pacts the operations performed on privacy-sensitive resources,
we expect its performance overhead to be overshadowed by
human-reaction times and I/O processing delays. Indeed, in
our experiments with the prototype implementation, we did not
observe a discernible performance drop compared to normal
system operation. Consequently, in order to obtain measurable
performance indicators to characterize the overhead of OVER-
HAUL, we created micro-benchmarks that exercise the critical
performance paths of our system. We also used a standard
ﬁlesystem benchmarking utility to measure the impact of our
modiﬁed open system call on regular ﬁlesystem operations.
We explain each of these benchmarks in more detail below.
Device access. In this benchmark, we measured the time
to open the ﬁlesystem device node corresponding to the
microphone installed on our testing system 10 million times.
Clipboard operations. We designed this benchmark to
measure the runtime for performing 100,000 clipboard opera-
tions. Since in the X Window System a paste is signiﬁcantly
more costly than a copy, we conﬁgured our benchmark to only
perform pastes for this test, and report the worst-case results.
Screen capture. This benchmark takes 1,000 screen cap-
tures using the imlib2 library and measures the total runtime.
The time to save the image ﬁles to disk is not included.
Shared memory IPC. Although OVERHAUL interposes
on every IPC mechanism, our preliminary measurements in-
dicated that the shared memory communication incurred the
highest overhead due to the necessity for intercepting page
faults, changing virtual memory access permissions, and in-
validating page tables. Consequently, to measure the worst-
case performance impact, in this benchmark we measured the
runtime for performing 10 billion write operations on a shared
memory area. We repeated this benchmark with different
shared memory sizes (i.e., from 1 to 10,000 pages, with a
page size of 4096 KB), and experimented with sequential and
random write patterns. We found no correlation between these
451
parameters and the performance impact; the overhead was
near-identical in all runs. Here, we present the results for a
shared memory size of 10,000 pages, and random writes.
and caused a visual alert to be displayed. Once the task was
complete, the participants were asked to explain whether they
have noticed anything unusual while performing their tasks.
Filesystem. To measure the performance impact of OVER-
HAUL on regular ﬁlesystem operations, we ran Bonnie++ [1],
conﬁgured to create, stat and delete 102,400 empty ﬁles in a
single directory. Since OVERHAUL does not interpose on stat
or unlink system calls, we were unable to reliably measure
any overhead for stat and delete operations, as expected. There-
fore, we only report the runtime overhead for ﬁle creation.
For the purpose of this evaluation we temporarily modiﬁed
OVERHAUL’s permission monitor to grant access to resources
even when there is no user interaction, in order to exercise
the entire execution path of the benchmarked operation. We
repeated all tests on a Linux system with OVERHAUL, and on
a system with an unmodiﬁed kernel and X server, ﬁve times
each, and compared the average results when calculating the
overhead. Experiments were performed on a computer with an
Intel i7-930 processor, 9 GB memory, and running Arch Linux
x86-64. We present the results of our experiments in Table I.
Our measurements show that OVERHAUL performs efﬁ-
ciently, with the highest overhead observed being below 3%.
Note that these experiments artiﬁcially stress each operation
under unusual workloads, and the overhead for a single opera-
tion is on the order of milliseconds in the worst case, and rang-
ing down to below a nanosecond. Hence, the overhead is often
not noticeable by the user. Moreover, the Bonnie++ benchmark
demonstrates that OVERHAUL does not signiﬁcantly impact the
performance of regular ﬁle open operations.
B. Usability Experiments
We conducted a user study with 46 participants to test
the usability of OVERHAUL. The participants were computer
science students at the authors’ institution, recruited by asking
for volunteers to help test a “defensive security system”. In
order to avoid the effects of priming, participants were not
informed about the functionality of OVERHAUL. The only
recruitment requirement was that the participants are familiar
with using Skype and web browsing, so that
they could
perform the given tasks correctly. No personal information was
collected from the participants at any point.
The participants were asked to perform two tasks to test
different aspects of our system. The ﬁrst task presented them
with a Skype instance on our test machine running OVER-
HAUL, logged into a test account. They were asked to perform
a call to a second test account, while OVERHAUL performed its
security checks without their knowledge. Once complete, an
experimenter asked the participants to compare this process
with their previous experience of using Skype. Speciﬁcally,
they were asked to rate the difﬁculty involved in interacting
with the test setup on a 5-point Likert scale, where a score of
1 indicated that their experience was almost identical, and 5
indicated that the test setup posed signiﬁcant difﬁculty.
In the next task, the participants were asked to perform
a speciﬁc search on the Internet on an OVERHAUL-enabled
machine. While they were occupied with the task, a hidden
background process that attempted to access the camera was
triggered at a random time, which was blocked by OVERHAUL
At the end of the ﬁrst phase of the experiment, all 46
participants found the experience to be identical
to using
Skype on an unmodiﬁed system. This empirically conﬁrms
that OVERHAUL is transparent to the users. In the second
phase, 24 participants immediately interrupted the task when
the OVERHAUL notiﬁcation was displayed, and alerted the
experiment observer to the blocked camera access. Another
16 noticed the alert, however continued the task and reported
the unexpected camera activity after being prompted by the
observer. Only 6 users reported not having noticed anything
unusual. These results conﬁrm that OVERHAUL alerts are able
to draw most users’ attention while they are occupied with
other tasks, and are effective security notiﬁcations.
C. Applicability & False Positives Assessment
To understand whether OVERHAUL interferes with the
normal functionality of applications, or produces false alerts
due to incorrectly blocked legitimate programs, we tested
the system on common applications. To compile the appli-
cation pool for this task, we ﬁrst manually inspected the
descriptions of all Top Rated packages in the Ubuntu Soft-
ware Center, and identiﬁed those that access the resources
OVERHAUL is designed to protect. Next, we searched the
ofﬁcial and community package repositories of Arch Linux,