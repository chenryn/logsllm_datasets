the start address of the malicious code based on a memory
corruption vulnerability inside the kernel. These vulnerabilities
are typically triggered by abusing the kernel’s interfaces such
as system calls and driver APIs. Third, the attacker triggers
the execution of a function that executes a branch on the
corrupted kernel code pointer. As a result, the kernel’s internal
control ﬂow will be dispatched to the previously injected,
malicious code. Although this code resides in user space, it
will be executed with kernel privileges because the control-
ﬂow hijacking occurred in the kernel mode. In a similar vein,
the attacker can launch code-reuse attacks using the return-
oriented programming (ROP) [46] technique. These attacks
combine and chain short instruction sequences (called gadgets)
that end in an indirect branch instruction. They are typically
leveraged if the attacker cannot allocate new malicious code
on an executable page. Thus, the user-mode buffer will hold
a ROP payload consisting of code pointers to gadgets. Upon
corruption of the kernel pointer, the ROP gadget chain will be
executed under kernel privileges [18].
Figure 1: Paging - translation of virtual addresses to physical
addresses.
access mode and a virtual memory address from the execution
unit as input 1 . To access the page tables, the MMU reads
out the pointer to the page table root which is always stored in
the third control register (CR3) on x86_64 2 . This pointer is
already a physical memory address pointing to the root of the
page table hierarchy 3 . That said, page tables are organized
in a tree-like hierarchy for space optimization reasons. The
MMU traverses the page table hierarchy until it reaches the
page table entry (PTE) which contains the physical address
for the given virtual memory address 4 . In addition, the PTE
holds the access permissions and ownership (user or kernel) of
the associated memory page. The memory subsystem leverages
this information to validate whether the target operation (read,
write, or execute) adheres to the permission set and ownership
of the page. If validation is successful, the translation informa-
tion is used to fetch the data from the physical memory slot
and stored into the cache 5 . Note that the cache internally
consists of a data and a instruction cache. For read and write
operations the fetched data is stored into the data cache. In
contrast, execute requests lead to a write of the fetched data to
the instruction cache. Finally, the fetched data is forwarded to
the execution unit of the CPU 6 . If the MMU either does not
ﬁnd a valid mapping in the page table hierarchy or observes
an unauthorized access in 4 , the memory subsystem generates
an exception 6 .
It is important to note that the page tables only contain
physical addresses. This becomes a performance bottleneck
when the kernel aims at changing the page permissions. As the
kernel operates on virtual addresses, all the physical addresses
belonging to a page would need to be mapped to virtual
addresses dynamically before the permission update can be
performed. To tackle this bottleneck, the kernel maintains a
so-called 1:1 mapping which permanently maps the whole
3
CPUPage TablesPage Table RootPage Table Entry (PTE)Page Table Entry (PTE)Memory SubsystemCachePhysical MemoryPhysical Page Page Tables4ExecutionUnitMMUAccess ModeVirtual AddressPage Table Pointer (CR3)1356PTEPage Table Hierarchy2Code-injection and Code-reuse Attacks. Modern CPUs fea-
ture hardware extensions Supervisor Mode Execution Protec-
tion (SMEP) and Supervisor Mode Access Protection (SMAP)
that prevent access to user-mode memory while the CPU
executes code in the kernel mode
[3, 27]. Alternatively,
if these extensions are not present, the kernel can simply
unmap the entire user space memory when kernel code is
executed [34]. Such protections force the attacker to directly
inject malicious code or the ROP payload into the kernel’s
memory space which is a challenging task since the attacker
cannot directly write into kernel memory. However, several
kernel functions accept and process user-mode buffers. A
prominent example is the msgsnd() system call which allows
exchange of messages. The attacker can exploit this function
to cause the kernel
to copy the user-mode exploit buffer
(the message) into kernel memory. By leveraging a memory
disclosure attack inside the kernel, the attacker can determine
the address where the buffer is located in kernel memory and
launch the exploit thereafter [40]. Several techniques are de-
ployed or proposed to harden the kernel against these attacks:
W⊕X (Writable ⊕ Executable) is leveraged by many modern
operating systems to prevent code to be executed from data
memory. Fine-grained code randomization diversiﬁes the code
address layout to complicate code-reuse attacks [31]. Many
modern operating systems apply Kernel Address Space Layout
Randomization (KASLR) [17, 34]. Control-ﬂow integrity (CFI)
mitigates control-ﬂow hijacking attacks by validating that the
application’s control ﬂow remains within a statically computed
control-ﬂow graph [1]. CFI has been also adapted to kernel
code [13, 19]. Recently a CFI-based protection for Linux
kernel (RAP [52]) has been released. Code pointer integrity
(CPI) [30] prevents control-ﬂow hijacking by ensuring the
integrity of code pointers.
Principally all these defenses signiﬁcantly raise the bar.
However, as observed in [13, 19] these defenses heavily
rely on the assumption that the instrumented code cannot be
manipulated, i.e., the attacker cannot compromise integrity
checks or exploit information leakage against randomization
schemes, and replace existing code with malicious code. On
the other hand, this assumption is easily undermined by data-
only attacks that tamper with the page tables as we describe
next.
Data-only Attacks against Page Tables. In contrast
to
control-ﬂow hijacking attacks, data-only attacks abstain from
compromising code pointers. For example, the attacker can
overwrite the is_admin variable of an application at run-
time [10]. Although no code pointer has been compromised,
the attacker can now execute benign functionality with higher
privileges. In the context of the kernel, data-only attacks allow
code injection attacks by modifying page table entries (PTEs)
which we explained in Section II. To initiate data-only attacks,
the attacker ﬁrst exploits a memory-corruption vulnerability in
the kernel or a device driver to gain read and write access to
kernel memory. Since kernel memory contains references to
page tables, the attacker can carefully read those references
and locate them [38]. In particular, the attacker can disclose
the virtual address of a PTE corresponding to a page that
encapsulates a kernel function which can be triggered from the
user space. Next, the attacker modiﬁes the page permissions
to writable and executable. For instance, the entire code of the
kernel function could be replaced with malicious code. Finally,
the attacker triggers the kernel function from user space to
execute the injected code with kernel privileges.
Generic Bypass of Kernel CFI. To demonstrate the potential
of data-only attacks against page tables, we ﬁrst hardened the
current Linux kernel with the open source version of RAP [52].
RAP is a state-of-the-art CFI implementation that instruments
the Linux kernel during compile-time to enforce ﬁne-grained
CFI at run-time. In particular, RAP ensures that the attacker
cannot overwrite code pointers (used for indirect branches)
with arbitrary values. This is achieved by emitting CFI checks
before all indirect branches that validate whether the program
ﬂow targets a valid destination. However, as mentioned before,
a fundamental assumption of RAP is the integrity of the kernel
code. If code integrity is not ensured, the attacker can simply
overwrite the CFI checks with NOP instructions or directly
overwrite existing kernel code with malicious code.
We undermine this assumption by using a data-only attack
to ﬁrst modify the page tables and change the memory per-
mission of the kernel code to writable. Next, we overwrite an
existing system call with our attack payload which elevates
the privileges of the current process to root. After successfully
overwriting the kernel code, we invoke the modiﬁed system
call from user mode to eventually obtain root access. The
details of this exploit are described in Section VI-A. While the
impact of the attack itself is not surprising (CFI does not aim
to prevent code-injection attacks), it highlights the importance
of having an effective protection against data-only attacks that
target page tables. We note that this attack is not limited to
RAP but can also be applied to randomization or isolation-
based defenses (CPI) against code-reuse attacks.
Existing Kernel Page Tables Protections. As we discuss
in detail in the related work Section VIII, the existing pro-
posals for protecting kernel page tables suffer from various
shortcomings: they either require a hardware trust anchor, or
privileged software (e.g., hypervisor), or are costly due to
integrity checks.
Summary. All known exploit mitigation schemes strongly
depend on memory protection to prevent the attacker from
injecting code or corrupting existing code. Even with these
schemes in place, page tables managing memory permis-
sions can be compromised through data-only attacks. Hence,
designing a defense against data-only attacks is vital and
complements the existing mitigation technologies allowing
their secure deployment for kernel code.
In this section, we present
IV. PT-RAND: DESIGN OF OUR PAGE TABLE PROTECTION
the adversarial model, ex-
plain the high-level design of our scheme, and elaborate on
challenges for implementing practical and secure page table
protection.
A. Adversary Model and Assumptions
The adversary setting for our protection scheme PT-Rand
against the corruption of page tables is based on the following
assumptions (which are along the lines of the assumptions of
related literature):
4
•
•
•
• Memory Corruption: There exists a memory corrup-
tion vulnerability in either the kernel or a driver. The
attacker can exploit this vulnerability to read and write
arbitrary memory (e.g., [38]).
Controlling User Space: The attacker has full control
over the user space, and consequently can execute
arbitrary code in user space and call kernel API
functions.
User Space Access: User-mode pages are not acces-
sible when the CPU is in the kernel mode. This is
enforced by modern CPU features such as SMAP/S-
MEP [3, 27] or by simply unmapping the user space
during kernel code execution [34].
• W⊕X: Kernel code pages are not per-se writable. This
is enforced by W⊕X protection inside the kernel. As
a consequence, the attacker needs to resort to a data-
only attack to manipulate code page permissions, and
inject code thereafter.
Code-reuse Defense: A defense mechanism against
kernel-related code-reuse attacks is enforced, such
as control-ﬂow integrity (CFI) [1, 19], ﬁne-grained
code randomization [12, 31], or code-pointer integrity
(CPI) [30]. Speciﬁcally, our prototype implementation
of PT-Rand incorporates RAP [52], a public state-
of-the-art CFI implementation for the Linux kernel.
As mentioned before, existing defenses against code-
reuse attacks cannot prevent data-only attacks against
the page tables. (Our solution serves as a building
block to prevent these protection frameworks from
being undermined by data-only attacks against page
tables.)
DMA Protection: Direct Memory Access (DMA) [44,
55] cannot be exploited to bypass virtual memory
permissions because an IOMMU [27] is conﬁgured
to prevent DMA to security-critical memory.
Safe Initialization: The attacker cannot attack the
kernel prior the initialization of PT-Rand. This is not
a limitation because PT-Rand is initialized at the early
boot phase during which the attacker cannot interact
with the kernel.
Source of randomness: A secure (hardware) random
number generator is available [3, 27, 53].
Side-channels: Timing and cache side channel attacks
as well as hardware attacks, like rowhammer [29], are
orthogonal problems, and hence, beyond the scope of
this paper. Nevertheless, we discuss in Section VI-A
how we can adopt known techniques from Apple’s
iOS to prevent practical side-channel attacks.
•
•
•
•
B. Overview of PT-Rand
Our goal is to mitigate data-only attacks against the kernel
page tables in the adversary setting explained in Section
IV-A. To do so, we introduce the design and implementation
of a novel kernel extension called PT-Rand. The main idea
of PT-Rand is to (i) randomize the location of page tables
securely, i.e., prevent the leakage of the randomization secret,
and (ii) substitute pointers that reference page tables with
physical addresses to obfuscate these references and prevent
their leakage.
5
Figure 2 depicts the overall architecture and workﬂow of
PT-Rand. During the early boot phase, the kernel operates
only on physical memory. To guarantee a successful switch
to virtual memory, contemporary kernels allocate an initial set
of page tables at a constant and ﬁxed address. These page
tables manage the kernel’s core functions as well as data
areas, and remain valid for the rest of the kernel’s life-time.
To prevent the attacker from tampering with page tables, PT-
Rand generates a randomization secret 1 , and randomizes the
location of the initial page tables 2 . The randomization secret
is stored in a privileged CPU register which is neither used
during normal operation of the kernel nor accessible from
user mode. Recall from Section IV-A that the attacker can
only access the kernel memory, but not the kernel’s registers.
The latter would require the attacker to either launch a code-
injection attack (prevented by W⊕X) or a code-reuse attack
(mitigated by CFI [1], code randomization [31] or CPI [30]).
After relocating the initial page tables to a random address,
the kernel can no longer access these page tables through the
1:1 mapping. In particular, PT-Rand relocates the initial page
tables in an unused memory region. As we will evaluate in
detail in Section VI-A, the entropy for this memory region
is reasonably high for contemporary 64-bit systems rendering
brute-force attacks infeasible A .
Note that the kernel features dedicated allocator functions
for page table memory. For PT-Rand, we instrument these
functions to (i) move the initial page tables to a random
address, and (ii) always return physical addresses for any page