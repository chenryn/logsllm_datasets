==== 维度
作为维度类图型，自动配置的两个参数及默认的字段取值规则：
1.	数值：取第一个统计数值
2.	切分（可添加）：取第一个分组字段
===== 饼图
饼图主要用于展现不同类别数值相对于总数的占比情况。图中每个分块（扇区）的弧长表示该类别的占比大小，所有分块数据总和为100%。
[source,bash]
* | stats count(apache.clientip) as ip_count by apache.clientip | sort by ip_count
例如：针对上面的搜索结果，鼠标点击“饼状图”，展示字段选择“ip_count”，分组字段选择“apache.clientip”，点击生成统计图，即看到：
image::images/pie-default.png[]
用户可以添加数据集中的一到多个字段进行二次分组转换，达到理想的可视化效果。
虽然饼图能快速有效地展示数据的比例分布，并被广泛用于各个领域，但是饼图及其变形图表一直是比较受争议的图表。因此，我们在使用饼图及其变形图表时一定要谨慎并避免走进误区。
[TIP]
====
1. 饼图适合用来展示单一维度数据的占比，要求其数值中没有零或负值，并确保各分块占比总和为100%。
2. 我们很难比较一个分块过多的饼图的数据，建议尽量将饼图分块数量控制在五个以内。当数据类别较多时，我们可以把较小或不重要的数据合并成第五个模块命名为"其它"。如果各类别都必须全部展示，此时选择柱状图或堆积柱状图或许更合适。
image::images/pie-suggest.png[]
====
饼图不适合被用于精确数据的比较，因此当各类别数据占比较接近时（如下左图），我们很难对比出每个类别占比的大小。此时建议选用柱状图或南丁格尔玫瑰图（如下右图）来获取更好的展示效果。玫瑰图的使用方法，请阅读稍后章节。
image::images/pie-vs-rose.png[]
饼图还有一些更详细的展示配置.
* 可以设置label展示数据的详细程度，包括全部展示、右侧展示、不展示和只展示名称(默认)。分组较多时，建议采用右侧展示：
+
image::images/pie-lable.png[]
+
* 可以设置内外径比例
+
image::images/pie-radius.png[]
+
* 可以设置仅展示前 N 项,其余数据聚合为"其他"
+
image::images/pie-other.png[]
===== 玫瑰图
玫瑰图，又叫极区图、鸡冠花图，是南丁格尔护士在推动医事改良过程中，为了表达军医院季节性的死亡率而发明的。其与普通饼图的区别在于：普通饼图采用扇形角度来表达大小，而玫瑰图采用扇形面积来表达大小，更有利于突出视觉差距。
日志易中，您可以按需无缝切换饼图成玫瑰图模式。比如上例的统计，玫瑰图效果如下：
image::images/rose.png[]
相比较而言，大小差异就比较明显。
===== 条形图[[bar]]
日志易中条形图与饼图配置方式相同，可以按需无缝切换成条带图模式：
image::images/column.png[]
如上图所示效果，也验证了前文已经提到过的使用建议，条带图比较适于分组数目较多，字段值名称较长的场景。
条形图可以设置标签的展示内容和展示位置：
* 展示内容：
** 不展示
** 只展示名称
** 展示全部
* 展示位置：
** 柱状外左侧
** 柱状外右侧
** 柱状外两侧
** 柱状内中央
** 柱状内左侧
** 柱状内右侧
比如，如果希望在坐标轴上看到分组字段值，同时在柱状图上看到对应的每个统计值时，可以设置为在柱状外两侧展示全部。效果如下：
image::images/bar-label.png[]
===== 旭日图[[sunburst]]
当用户需要多个分组进行饼图展示时，原始饼图只能自动把各分组字段的值拼接成一个长字符串。导致在仪表盘钻取时无法正确获取原始字段值，也不方便判断单个分组字段的大小关系。日志易推荐改用旭日图效果进行更合理的展示。
[source,bash]
* | stats count() by appname, hostname, tag
配置为旭日图效果如下。可以明显看出各层级的占比细节。
image::images/sunburst.png[]
=====  火焰图[[flamegraph]]
火焰图本质上是旭日图的直角坐标系变种。因此在数据和操作层面完全一致。不过火焰图一般专用于 IT 性能分析场景，是大多数 profiler 工具输出数据的专用可视化效果。
了解 profiler 性能分析，推荐阅读 2018 年 SREcon 上的一篇分享：。
一般来说，最常用的 profiler 工具是 perf 和 systemtap 命令。比如 `perf record` 和 `perf script`  指令的输出，通过  对应的 stackcollapse.pl 脚本转换后，可以得到类似下面这样的分析数据：
 hekad;[hekad] 12
 hekad;[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];[hekad];kfree 1
 hekad;[hekad];[hekad];_start;[hekad];_start;_start;_start;_start;_start;[hekad];do_futex 1
 hekad;[hekad];[hekad];_start;[hekad];_start;_start;_start;_start;_start;[hekad];hash_futex 1
 hekad;[hekad];__list_add 1
 hekad;[hekad];__vdso_clock_gettime;getnstimeofday 1
对该文件进行文件采集，或添加表头直接修改成 CSV 文件，进行 inputlookup 分析，可以配置成火焰图效果：
image::images/flamegraph.png[]
火焰图支持图内钻取，点击某层可以自动缩放查看从点击位置开始后续函数堆栈的细节。
==== 关系
作为关系类图，自动配置的三个参数及默认的字段取值规则：
1. 来源：取第一个分组字段
2. 目标：取第二个分组字段
3. 权重：取第一个统计数值
关系图统一支持颜色分组，采用字段名称约定的方式，只要有{name}_group,就自动把group值用上，同一group的数据颜色相同，没有{name}_group就和原来一样。详情请见桑基图
===== 和弦图
例如如下搜索：
[source,bash]
logtype:apache AND (apache.clientip:171.221.120.144 OR apache.clientip:121.236.143.48) | stats count() by apache.clientip, apache.request_path
自动配置结果为：
* 来源：apache.clientip
* 目标：apache.request_path
* 权重：count()
可以得到如下结果：
image::images/chord.png[]
以上配置得出的数据图表中，每一个来源与不同目标的对应关系都用同一颜色的关系线来连接，可清楚观察不同clientip之间在关系对应上的区别，若用户想观察区分的对象为request_path,则需要将两个分组字段的位置对调，如下所示：
[source,bash]
logtype:apache AND (apache.clientip:171.221.120.144 OR apache.clientip:121.236.143.48) | stats count() by apache.request_path, apache.clientip
统计图表结果如图：
image::images/chord-2.png[]
===== 桑基图
桑基图常用于链式数据流向展示。
例如如下搜索：
[source,bash]
appname:trans
 | transaction json.aid, json.bid, json.cid, json.did, json.eid, json.fid with states a, b, c, d, e, f in json.module results by flow
 | stats count() by fromstate, tostate
可以得到如下结果：
image::images/sankey-table.png[]
则可以配置得到如下桑基图：
image::images/sankey.png[]
有一类特殊的桑基图场景，比如春运迁徙的来源和目的，我们可能希望明确把来源城市都放一列，目的城市都放另一列，而不是根据城市名称做汇总。这时候可以采用二级桑基图效果。在"展示"设置项中，关闭"多级"开关即可：
image::images/multiple-sankey.png[]
桑基图上各节点的颜色默认自动分配，如果需要对部分节点采用相同的颜色标记，可以使用关系图的颜色分组特性，示例说明如下：[[relationship-color-example]]
* 普通效果
[source.bash]
(logtype:json AND appname:json) AND 'tag':sample04061424_json_sdyd_float_59 | stats count() by json.name, json.actionName, json.dimensions.cookie_CURRENT_MENUID, json.application
得到的表格如下：
image::images/relationship-table-result-without-group.png[]
配置桑基图如下：
image::images/relationship-chart-before.png[]
* 颜色分组效果
+
为节点字段name搭配一个同名的{name}_group字段，作为颜色标记的分组凭据：
[source.bash]
(logtype:json AND appname:json) AND 'tag':sample04061424_json_sdyd_float_59 | stats count() by json.name, json.actionName, json.dimensions.cookie_CURRENT_MENUID, json.application | rename json.name as json.actionName_group | rename json.application as json.dimensions.cookie_CURRENT_MENUID_group   
得到的表格如下：
image::images/relationship-table-result-with-group.png[]
配置桑基图如下：
image::images/relationship-chart-with-group.png[]
[NOTE]
======
关系图类别其他类型，同样支持颜色分组特性
======
===== 力图 [[li-tu]]
例如如下搜索：
[source,bash]
logtype:apache| stats count() by apache.clientip, apache.request_path
可以得到如下结果：
image::images/force-default.png[]
力图可以设置斥力因子：大于0的数值，值越大，斥力越大，两个球之间的距离越远。我们可以调节斥力因子使图形更美观。