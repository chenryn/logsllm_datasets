at least n − t processes. It implies that, at some point |J2i| ≥ n − t. Hence, pi certainly initiates the
underlying consensus. Since the underlying consensus guarantees termination, pi can decide when the
underlying consensus decides. It follows that each process eventually decides.
Lemma 2 (Agreement) No two correct processes decide diﬀerent values.
Proof Let two correct processes pi and pj decide vi and vj respectively. Then, we prove that vi = vj.
Consider the following six cases.
• (Case 1:) When both pi and pj decide in one step at line 8.
j , it follows that J1i ≤ I 1
Since both pi and pj decide in one step, P 1(J1i) and P 1(J1j) hold. Let us consider two vectors
j hold. Since there are
i , I 1
I 1
i and J1j ≤ I 1
j . From the deﬁnition of I 1
i , I 1
10
┴┴┴┴P1P2P3P411100010┴┴┴┴P1P2P3P411100011Standard BroadcastIdentical Broadcastat most t Byzantine processes and only the Byzantine processes send diﬀerent values to distinct
j ) ≤ t also holds. From
processes, the vectors I 1
property LA3, it is clear that vi = F (J1i) = F (J1j) = vj. Thus, we can conclude that pi and pj
decide the same value.
j can diﬀer in at most t entries . Hence, dist(I 1
i , I 2
i , I 1
• (Case 2:) When pi decides in one step at line 8 and pj decides in two steps at line 17.
Let pi and pj decide in one and two step(s) using J1i and J2j respectively. This implies that P 1(J1i)
and P 2(J2j) hold. Similar to Case 1, let us consider two vectors I 1
j . From the deﬁnition of I 1
i ,
j , it follows that J1i ≤ I 1
j . Since each correct process broadcasts the same value to
I 2
all processes using P-send() and Id-send(), the vectors I 1
j can diﬀer only in Byzantine entries.
j ) ≤ t holds. From property LA3, it is clear
As there are at most t Byzantine processes, dist(I 1
that vi = F (J1i) = F (J2j) = vj. Since pj decides using J2j, its decision value is vi.
i and J2j ≤ I 2
i , I 2
i , I 2
i , I 2
• (Case 3:) When both pi and pj decide in two steps at line 17.
Since pi and pj decide in two steps, P 2(J2i) and P 2(J2j) hold. From the agreement property of
the identical broadcast, it follows that if an entry in J2i(J2j) contains a non-default value v, then
the same entry in J2j(J2i) contains either v or ⊥. Hence, it is possible to have an vector I(cid:48) such
that ∀k(1 ≤ k ≤ n) : (J2i[k] (cid:54)=⊥⇒ I(cid:48)[k] = J2i[k])∧ (J2j[k] (cid:54)=⊥⇒ I(cid:48)[k] = J2j[k]). This implies that
J2i ≤ I(cid:48) and J2j ≤ I(cid:48) hold. From property LA4, we thus get vi = F (J2i) = F (J2j) = vj.
• (Case 4:) When pi decides in one step at line 8 and pj decides using underlying consensus at line
21.
Since pj decides using the underlying consensus, and the underlying consensus satisﬁes unanimity,
it is suﬃcient to show that every correct process pk proposes vi at line 13. We know that pi
decides using J1i and pk uses J2k to propose a value to the underlying consensus. Consider the
i , J2k ≤ I 2
two vectors I 1
i , I 2
k) ≤ t hold. Then, from property LA3, we can get vi = F (J1i) = F (J2k) = vk. It
k
and dist(I 1
i , I 2
implies that each process pk proposes vi.
k. By using the same argument in case 2, we can show that J1i ≤ I 1
• (Case 5:) When pi decides in two steps at line 17 and pj decides using underlying consensus at
line 21.
Since pj decides by the underlying consensus, similar to Case 4, we have to show that every correct
process pk proposes vi to the underlying consensus at line 13. We know that pi decides using J2i
and pk uses J2k to propose a value to the underlying consensus. By using the same argument in
case 3, we can prove that there exist an vector I(cid:48) such that J2i ≤ I(cid:48) and J2k ≤ I(cid:48). Then, from
property LA4, it is clear that vi = F (J2i) = F (J2k) = vk. Hence, we can conclude that each
process pk proposes vi.
• (Case 6:) When both pi and pj decide at line 21: Since the underlying consensus guarantees
agreement property, we can conclude that vi = vj.
Lemma 3 (Unanimity) If all correct processes propose the same value v, then no correct process
decides a value diﬀerent from v.
Proof Let f be the actual number of Byzantine processes, and all correct processes propose the same
value v. Since f ≤ t, at each correct process pi, no value except v appears more than t times in J1i and
J2i. If pi decides at line 8 or 17, its decision value is either F (J1i) or F (J2i). From the deﬁnition of LU5,
it follows that F (J1i) = F (J2i) = v. Hence, pi decides v. In addition, since each pi proposes F (J2i)(that
is, v) to the underlying consensus and the underlying consensus satisﬁes unanimity, any correct process
that decides using underlying consensus decides only v. Hence, the unanimity holds.
11
Lemma 4 The algorithm DEX guarantees one-step decision for any input vector I, I ∈ C1
processes exhibit Byzantine behavior.
k if at most k
Proof Since there are at most k Byzantine processes, each correct process pi is guaranteed to receive
messages from n − k correct processes. Hence, eventually dist(J1i, I) ≤ k holds. From property LT 1, it
follows that pi decides in one step.
Lemma 5 The algorithm DEX guarantees two-step decision if the input vector I belongs to C2
most k processes are Byzantine.
k and at
Proof As stated in lemma 4, since there are at most k Byzantine processes each correct process pi
receives messages from all (n − k) correct processes. Hence, eventually dist(J2i, I) ≤ k holds. From
property LT 2, it is clear that pi decides in two steps.
The above lemmas imply the following theorem:
Theorem 3 For any instantiation with legal condition-sequence pairs, the algorithm DEX is a doubly-
expedited one-step consensus algorithm.
5 Conclusion
Typically, Byzantine consensus algorithms guarantee one-step decision only in favorable situations, and
no one-step algorithm supports two-step decision. In this paper, we proposed a novel one-step Byzantine
algorithm DEX to circumvent these impossibilities. DEX has two distinguished features: Adaptiveness
and double-expedition property. Due to adaptiveness, its conditions are sensitive only to the actual num-
ber of failures, and hence it achieves fast termination for more number of inputs when there are fewer
failures. In addition, the double-expedition property enables it to support two-step decision in addition
to one-step decision. Even though DEX takes four steps at worst in well-behaved runs while existing
algorithms takes only three, it provides fast termination for more number of inputs. Practically, this is
a favorable feature because the worst case does not occur so often in real systems, which makes us to
expect that our algorithm can work eﬃciently on the average.
References
[1] H. Attiya and J. Welch. Distributed Computing: Fundamentals, Simulations and Advanced Topics. Wiley,
2004.
[2] V. Brasileiro, F. Greve, A. Most´efaoui, and M.Raynal. Consensus in one communication step. In Proc. of the
6th International Conference on Parallel Computing Technologies, volume 2127 of LNCS.
[3] D. Dobre and N. Suri. One-step consensus with zero-degradation. In Proc. of the International Conference
on Dependable Systems and Networks(DSN’06), pages 137–146, 2006.
[4] P. Dutta and R. Guerraoui. Fast indulgent consensus with zero degradation. In Proc. of the 4th European
Dependable Computing Conference on Dependable Computing, volume volume 2485 of LNCS, pages 191–208,
London, UK, 2002. Springer-Verlag.
[5] R. Friedman, A. Mostefaoui, and M. Raynal. Simple and eﬃcient oracle-based consensus protocols for asyn-
chronous byzantine systems. IEEE Transactions on Dependable and Secure Computing, 2(1):46–56, 2005.
[6] R. Guerraoui and M. Raynal. The information structure of indulgent consensus.
Computers, 53(4):453–466, 2004.
IEEE Transactions on
[7] T. Izumi and T. Masuzawa. Condition adaptation in synchronous consensus. IEEE Transactions on Comput-
ers, 55(7):843–853, 2006.
12
[8] T. Izumi and T. Masuzawa. One-step consensus solvability. In Proc. of the 22nd international symposium on
Distributed Computing(DISC’06), volume 4167 of LNCS, pages 224–237. Springer, 2006.
[9] I. Keider and S. Rajsbaum. On the cost of fault-tolerant consensus when there are no faults. SIGACT News,
32(2):45–63.
[10] A. Mostefaoui, S. Rajsbaum, and M. Raynal. Conditions on input vectors for consensus solvability in asyn-
chronous distributed systems. In Proc. of the thirty-third annual ACM symposium on Theory of computing
(STOC’01), pages 153–162, 2001.
[11] A. Most´efaoui, S. Rajsbaum, and M. Raynal. Using conditions to expedite consensus in synchronous distributed
systems. In Proc. of the 17th international symposium on Distributed Computing(DISC’03), volume 2848 of
LNCS, pages 249–263, 2003.
[12] Y. Song and R. Renesse. Bosco: One-step byzantine asynchronous consensus. In Proc. of the 22nd international
symposium on Distributed Computing(DISC’08), volume 5218 of LNCS.
A An Implementation of Identical Broadcast
This section presents an implementation of the Identical Broadcast communication system that helps
to build our two-step decision scheme. The basic idea of identical Broadcast is that even if Byzantine
processes send arbitrary messages, all processes that receive a message from a faulty process receive the
same message. In identical broadcast system, to successfully broadcast a message, a process has to obtain
a set of witnesses for this broadcast. Likewise, a correct process accepts a message only when it knows
there are enough witnesses for this broadcast.
The pseudocode appears in Figure 3. As speciﬁed in section 4, Id-send() and Id-Receive() are the
communication primitives of identical broadcast, and P-send() and P-receive() correspond to standard
broadcast.
Code for pi:
init: num ← 0
Upon Id-sendi(m) do :
P-sendi(init, m) to all processes.
Upon P-Receivei(init, m(cid:48)) from pj do :
if ﬁrst-echo(j) then
P-sendi(echo, m(cid:48), j) to all processes.
Upon P-Receivei (echo, m(cid:48), j) do :
num = number of copies of (echo, m(cid:48), j)
received so far from distinct processes.
if num ≥ n − 2t and ﬁrst-echo(j) then
P-sendi(echo, m(cid:48), j) to all processes.
if num ≥ n − t and ﬁrst-accept(j) then
Id-Receivei(m(cid:48)).
Figure 3: Algorithm IDB: An algorithm for Identical Broadcast.
To broadcast (that is, Id-send()) a message m, each process pi P-Sends(init, m) to all processes.
When pi P-Receives a ﬁrst (init, m(cid:48)) message from a process pj, it act as a witness for that broadcast
and P-sends its own message (echo, m(cid:48), j) to all processes. Also, when it collects at least n − 2t same
echo messages, it becomes a witness for that message and sends its own echo message to all processes.
13
When pi P-Receives at least n − t same echo messages, it accepts that message by invoking Id-receive()
if it has not already accepted a message from pi.
When pi invokes the function ﬁrst-accept(j), it returns true if and only if pi has not already accepted
a message for pj. Similarly, when the function ﬁrst-echo(j) is invoked, it returns true if and only if pi has
not sent a echo message for pj. From the code, it directly follows that two rounds of standard broadcast
is required to construct each round of identical broadcast.
We now prove correctness of the algorithm IDB.
Theorem 4 Let n > 4t. Algorithm IDB implements identical broadcast system.
Proof Termination : Let a correct process pi Id-Sends a message m. To do that, pi P-Sends(init, m) to
all processes. Consequently, each correct process pj P-Receives(init, m), and then it P-sends(echo, m, i)
message to all processes. As there are at most t Byzantine processes, each pj eventually P-Receives
at least n − t (echo, m, i) messages. As a result, Id-Receive(m) occurs at all correct processes.
Agreement: Proof by contradiction. Let two correct processes pi, pj invoke Id-receive(m), Id-receive(m’)
for a process ph such that m (cid:54)= m(cid:48). It implies that pi and pj must have collected n− t echo messages
from distinct processes for m and m(cid:48) each. Since n > 4t, these two sets share more than 2t common
senders. Given that there are only t Byzantine processes, more than t of these common senders are
correct processes. The function ﬁrst-echo() ensures that any correct process P-Sends only a single
echo message for ph to all processes. Hence, m = m(cid:48). This is a contradiction.
Validity Assume a correct process pi Id-Receives(m) from a process pj. The function ﬁrst-accept()
ensures that pi Id-Receives(m) exactly once for pj. Since pi collects at least n − t (echo, m, j)
messages, at least n− 2t of them are from correct processes. A correct process P-sends (echo, m, j)
if it collects at least n− 2t (echo, m, j) messages from distinct processes. Since n− 2t > t, a correct
process, that has sent an echo (echo, m, j) message, must have received (init, m) message from pj.
It implies that pj must have sent m.
Thus, the algorithm IDB implements identical broadcast system.
2
14