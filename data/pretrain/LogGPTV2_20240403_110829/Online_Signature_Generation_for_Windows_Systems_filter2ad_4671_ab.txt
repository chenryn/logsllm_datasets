paper: we develop general techniques that can perform attack
data correlation to input, while leveraging speciﬁc aspects of
Windows exploits to improve signature generation speed.
III. TECHNICAL APPROACH
Remote memory exploits rely on the ability of an attacker
to control the input to a vulnerable program. Taint-based
techniques, which track the ﬂow of remote (untrusted) data
within the target program, have proven to be very effective
in detecting these attacks, as well as in correlating attacks
to speciﬁc inputs that contained the attack. Unfortunately,
taint-based techniques incur high performance overhead.
Moreover, they require deep instrumentation, wherein ev-
ery instruction in the original program is augmented with
additional instructions to perform taint-related computation.
Our approach therefore relies on inferring taint by comparing
memory contents with recent inputs.
We made similar observations in the context of injection
attacks on web applications, leading to the development of
a taint inference [14] approach. However, web application
vulnerabilities are quite different from memory corruption
vulnerabilities. For instance,
they involve string data in
almost every case. More important, the technique described
in [14] is able to examine suspicious data before it is used in
an injection attack, whereas with memory corruption, attacks
are detected some time after data overﬂow takes place. Since
these attacks involve memory corruption, the copied data
may in turn be corrupted before it is analyzed by our post-
crash analyzer. For instance, if the vulnerability involves
a stack resident buffer, subsequent program execution may
result in changes to the data beyond the end of the buffer,
which may store local variables or saved registers. Thus, we
needed to develop a technique that infers taint in spite of
possible corruption of some sections of data copied into the
vulnerable buffer.
This problem of partial data corruption has been pointed
out by others, e.g., as the “gap” problem in [20]. Contrary to
what was initially thought of as a rare case, we encountered
gaps much more frequently on our experimental platform
(Windows), and hence believe that such corruptions may be
the norm rather than the exception.
To address corruption of overﬂowed data, we rely on
approximate matching rather than exact matching for in-
ferring taint (Approximate string matching is also used in
[14], but for a different purpose: to deal with minor input
transformations that take place in web applications, e.g., con-
version of lowercase characters to uppercase, replacement
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply. 
and contain error-handling code to recover from this error
and continue normal operation.
Input ﬁlters can support a “logging” mode for speciﬁed
signatures, instead of the default “blocking” mode. This
mode is useful if the conﬁdence level in a signature is not
high enough. In order to generate more accurate signatures,
additional
logging is turned on when input matching a
“logging” signature is received. This additional on-demand
logging can be very helpful because it can potentially
provide intermediate states before a crash, and hence help us
construct the traces of events leading to the crash. It is also
possible for the level of logging to be escalated gradually.
For instance, in the ﬁrst step of escalation, additional func-
tion interceptors could be turned on and the inputs/outputs
of these functions recorded. In the last step of escalation, an
entire memory dump could be produced.
Corruption Target Identiﬁcation (CTI) is the ﬁrst step
initiated when a security event is received by the live security
analysis (LSA) component. As described in Section III-B,
CTI computes a list of candidate memory locations that have
been targeted in the just-detected exploit.
Input Correlation is concerned with identifying the in-
put that was copied to the corruption target, and pinpoint
the bytes of this input involved in the attack. Our input
correlation relies on a fast approximate substring matching
algorithm and is described in more detail in Section III-C.
Signature generation is the last step of our analysis. Our
focus in this paper is on the correlation and corruption
target identiﬁcation steps, but not on the development of
sophisticated signature generation algorithms. This limits
the class of memory corruption exploits that our current
prototype can handle, but on the other hand, the online nature
of our signature generator gives us more ﬂexibility. For
instance, a coarse signature could be generated, and reﬁned
over time. Additional logging could be initiated during this
to help guide this reﬁnement. Signature generation is further
described in Section III-D.
B. Corruption Target Identiﬁcation (CTI)
The goal of the CTI phase is to identify candidate lo-
cations that were corrupted in the exploit. CTI may return
multiple targets, and may, in the worse case, need to scan
the entire victim process memory to complete its task. Our
implementation performs this search in several steps, starting
from the most speciﬁc (and efﬁcient) step and progressing to
the most general (and expensive) step. The search is stopped
at the ﬁrst step where signature generation succeeds.
/GS cookie corruption. When this corruption is detected,
Windows Vista throws an int 0x3 exception with STA-
TUS STACK BUFFER OVERRUN debugging message.
With older Windows versions, our system can set a break-
point in kernel32!UnhandledExceptionFilter to
detect whether a security cookie got tampered with. At this
Figure 1. System Overview
of spaces with underscore, etc.). This technique provides
a general solution to the problem of gaps, without any
regard to the speciﬁcs of the objects involved in corruption,
i.e.,
it does not matter if they relate to local variables,
compiler-generated temporaries, global variables, heap data,
etc. Another innovative aspect of our approach is that we
use this corruption to our beneﬁt: the byte positions where
corruption has occurred provide clues as to where the end of
the buffer is, and hence gives us a handle on the size limits
that should be imposed on the input to avoid the overﬂow.
A. System Overview
Figure 1 illustrates our system. On the left side is the
Process Security Runtime (PSR) hosted inside the protected
application process. PSR is responsible for capturing inputs,
usually by intercepting network or ﬁle reads, enforcing input
ﬁltering when applicable, and emitting security events from
security sensors to Live Security Analysis (LSA) on the
right side. LSA can be deployed at the local host or at
a remote host. It remains dormant during execution and
will be invoked only when a security event
is received
from PSR. LSA performs security analysis, input correlation
and generates input ﬁlter when applicable. The rest of the
components in the ﬁgure are described below.
Security sensors are responsible for emitting security events
of interest
to LSA. The most basic form of a security
event is a memory access exception, which is raised when
an instruction references an invalid address. In addition,
protections such as /GS and /SafeSEH can serve as sensors
as well, enabling attacks to be detected somewhat earlier.
Input Capture. When an input is received, our system will
make a copy and keep recent inputs around. Because attacks
typically lead to a crash quickly, these inputs are not buffered
for very long. The number of inputs to be buffered, as well as
the maximum time duration for which they may be buffered,
are both conﬁgurable.
Input Filter. When new inputs come in, they are matched
against the existing list of signatures previously generated.
Any input matching a signature will be dropped2. When
inputs received on a TCP connection are dropped,
the
connection is also severed so as to preserve (reliable data
delivery) semantics of TCP. When the application tries to
read a dropped input, a network error is signaled by the input
ﬁlter. Most applications expect occasional network errors,
2Since our signatures rely on length rather than content, all attacks that
exploit the same underlying vulnerability can be blocked, without any
regard to their payloads.
292
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply. 
point, we can easily obtain the location of the corrupted
cookie, and this is returned as the corruption target.
/SafeSEH corruption. On Windows, exception handlers are
maintained as a linked list on stack. A pointer to the ﬁrst
entry in this list is stored in the Exception Registration
Record in the Thread Environment Block, which in turn
resides at FS:[0]. CTI traverses this linked list to identify
the location of corrupted SEH entry. This location is returned
as the corruption target.
Heap metadata corruption detection. In this case, the lo-
cation of the corrupted heap block can be obtained and
returned as the corruption target. However, we have not
implemented this step in our prototype since it requires a
different implementation for Windows versions that support
heap metadata protection and those that don’t. Instead, our
approach was to “wrap” calls to malloc-related functions to
keep track of allocated heap blocks and their lengths. This
information is utilized, as described in step (4) below, to
identify corruption targets when an ASR/NX-induced mem-
ory access violation occurs after heap metadata corruption.
Generic ASR or NX detection. In the presence of NX,
injected code attacks always lead to a memory access vio-
lation. In the case of ASR, attack detection is probabilistic:
there is of course a small probability that the attacker is able
to guess the correct address, and the attack goes undetected.
Naturally, no signature generation is possible in this case.
A more likely scenario is that the attacker does not guess
the right address, but manages to guess a valid address.
In this case, a memory access violation may not happen
immediately; if and when it happens, it may be too late to
correctly diagnose the problem. As observed by Liang et al
[10], most servers use only a fraction of available memory
space, and hence the probability of delayed access violation
is quite small. We accept that signature generation would
fail in such cases, and will need to be attempted the next
time the attack is repeated3. Thus, we limit our discussion
to cases where there is an immediate access violation.
When a memory access violation occurs, we can easily
obtain the faulting address, i.e., the memory address whose
access caused the violation. However, in a typical memory
exploit based on corrupting a pointer value, the faulting
address corresponds to the value stored at the corruption
target, and not the corruption target itself. We therefore use
the following steps to identify the corruption target:
1) CTI examines the memory locations within a few
bytes of ESP to check if they contain the faulting
address. (This step will succeed on code that is not
compiled with /GS option.)
2) CTI traverses the SEH list to check if (a) any of excep-
tion handlers point outside legitimate code sections,
3If a server uses 10% of its address space, then the expected number of
attacks for an immediate crash to occur can be calculated as 1.1.
and (b) if any of the links in the list are broken. In
either case, the location of the corresponding SEH en-
try is returned as the corruption target. (This step will
succeed for SEH-based exploits when the /SafeSEH
option is not used.)
3) CTI traverses the entire stack of the faulting thread,
examining the stack for locations that contain the
faulting address, and returning all
those locations
as corruption targets. (This step succeeds when the
corruption target is on the stack, but the previous two
cases don’t apply.)
4) CTI traverses the heap blocks to identify if any of their
metadata ﬁelds contain the faulting address. All such
locations are returned as the corruption targets. (This
step succeeds in the case of heap overﬂows.)
5) Finally, if all previous steps fail, CTI searches the
entire data section for locations containing the faulting
address, and return all of the matching locations as
corruption targets.
We remark that in our search, rather than looking for
occurrences of the faulting address, we look for values that
are close (within a range of ±16) to the faulting address.
C. Input Correlation
Once the initial analysis is done, LSA has a list of can-
didate corrupted targets. Whether they are really the targets
would be determined by comparing the content surrounding
the target with recent inputs. We use approximate matching
to cope with the “gap” problem outlined earlier4. We want
to demonstrate not only that we can handle gaps, but also
that by proactively identifying the gap, we can use it to
enhance the accuracy of the vulnerability/signature because
local variables are overﬂowed before the usually sensitive
targets like return address, exception handler etc.
Before input correlation proceeds, recent inputs are ﬁrst
parsed and broken into message ﬁelds. Speciﬁcally, they are
broken into (cid:2)name, value(cid:3) pairs5. Then the following steps
are used to process each candidate C returned by the CTI.
• Quick elimination. The correlator scans the list of all
(cid:2)name, value(cid:3) pairs and eliminates those not con-
taining the value stored at C. This step speeds up
correlation (by avoiding the next few steps for most
benign inputs), but has no impact on the signature that
is ultimately generated.
• Approximate substring match. This step is undertaken
for each (cid:2)name, value(cid:3) pair that remains after the
previous step. Let s denote the content of memory
4As noted in [20], the gap problem poses a challenge for taint-tracking
techniques as well – it is not unique to taint-inference.
5Accurate parsing of complex network protocols can require signiﬁcant
effort. There is obviously a trade-off between this effort and the ability to
generate accurate signatures. Since protocol parsing is not the main focus
of this work, we rely on approximate parsing: i.e., breaking the message
into certain key ﬁelds, while accepting the possibility that some complex
substructures may not be broken into individual ﬁelds.
293
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply. 
locations around the corruption target C, speciﬁcally,
locations C−k1∗|value| through C+k2∗|value|, where
|value| denotes the length of value; and k1 and k2 are
tunable constants between 0 and 2. We use approximate
substring match to identify, among all substrings of
s, those substrings u of s that have the smallest edit
distance to value. In this regard, we limit ourselves to
substrings that are within an edit distance threshold d
that is speciﬁed6. Reference [14] describes an algorithm
speeding up approximate string matching so that it
provides much better than quadratic time performance
under these conditions.
Once a matching substring u is identiﬁed, we check if
the approximate string match reports a cluster of “delete”
operations in matching value with u, and if this cluster is
located close to (and before) C. If so, the beginning of these
delete operations is identiﬁed as the beginning of the gap.
The outputs of input correlation step include the message
and ﬁeld involved in the attack, the corresponding location
of u and C, and the location of a gap, if any. If multiple
candidates succeed in the approximate match step, we select
the best candidates (based on the length of match and edit
distance) and only output those.
There are times when there are a number of candidates
C1 < C2 < ··· < Cn that are close to each other, e.g.,
when an attacker replicates the jump address many times.
Rather than running the approximate substring search step
n times on these candidates, we can simply run it once