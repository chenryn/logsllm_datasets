### Problem Description
After installing an SSL certificate, my Node.js application is only accessible via `http://something.com`, while the Apache default directory listing appears at `https://something.com`. I have configured a redirect from HTTP to HTTPS, but I am unable to remove the Apache server's directory listing, which appears in an unappealing Times New Roman font.

### Current Configuration
I am using Apache 2, and in the `/etc/apache2/sites-available/` directory, I have the following configuration files:

#### 000-default.conf
```apache
<IfModule mod_ssl.c>
<VirtualHost *:*>
    ProxyPreserveHost On
    ProxyPass / http://0.0.0.0:3000/
    ProxyPassReverse / http://0.0.0.0:3000/
    ServerName something.com
    Redirect permanent / https://something.com
</VirtualHost>
</IfModule>
```

#### default-ssl.conf
```apache
<VirtualHost _default_:443>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    SSLEngine on

    SSLCertificateFile /var/www/html/public.crt
    SSLCertificateKeyFile /var/www/html/private.key
    SSLCertificateChainFile /var/www/html/intermediate.crt

    <FilesMatch "\.(cgi|shtml|phtml|php)$">
        SSLOptions +StdEnvVars
    </FilesMatch>
    <Directory /usr/lib/cgi-bin>
        SSLOptions +StdEnvVars
    </Directory>

    BrowserMatch "MSIE [2-6]" \
            nokeepalive ssl-unclean-shutdown \
            downgrade-1.0 force-response-1.0
    # MSIE 7 and newer should be able to use keepalive
    BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
</VirtualHost>
```

### Solution
To resolve the issue, you need to ensure that the Apache configuration correctly proxies all requests to your Node.js application and disables the directory listing. Here are the steps to achieve this:

1. **Update 000-default.conf**:
   - Remove the `Redirect permanent / https://something.com` line as it is redundant.
   - Ensure the `ProxyPass` and `ProxyPassReverse` directives are correctly set up.

   ```apache
   <IfModule mod_ssl.c>
   <VirtualHost *:80>
       ServerName something.com
       ProxyPreserveHost On
       ProxyPass / http://0.0.0.0:3000/
       ProxyPassReverse / http://0.0.0.0:3000/
       RewriteEngine On
       RewriteCond %{HTTPS} off
       RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
   </VirtualHost>
   </IfModule>
   ```

2. **Update default-ssl.conf**:
   - Ensure the `DocumentRoot` is not set to a directory that contains the files you do not want to list.
   - Add a directive to disable directory listings.

   ```apache
   <VirtualHost _default_:443>
       ServerAdmin webmaster@localhost
       DocumentRoot /var/www/html
       ErrorLog ${APACHE_LOG_DIR}/error.log
       CustomLog ${APACHE_LOG_DIR}/access.log combined

       SSLEngine on

       SSLCertificateFile /var/www/html/public.crt
       SSLCertificateKeyFile /var/www/html/private.key
       SSLCertificateChainFile /var/www/html/intermediate.crt

       <FilesMatch "\.(cgi|shtml|phtml|php)$">
           SSLOptions +StdEnvVars
       </FilesMatch>
       <Directory /usr/lib/cgi-bin>
           SSLOptions +StdEnvVars
       </Directory>

       BrowserMatch "MSIE [2-6]" \
               nokeepalive ssl-unclean-shutdown \
               downgrade-1.0 force-response-1.0
       # MSIE 7 and newer should be able to use keepalive
       BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown

       # Disable directory listing
       <Directory /var/www/html>
           Options -Indexes
       </Directory>

       ProxyPreserveHost On
       ProxyPass / http://0.0.0.0:3000/
       ProxyPassReverse / http://0.0.0.0:3000/
   </VirtualHost>
   ```

3. **Restart Apache**:
   - After making these changes, restart the Apache service to apply the new configuration.

   ```sh
   sudo systemctl restart apache2
   ```

### Alternative Solution: Using Nginx as SSL Offloader
As an alternative, you can use Nginx to handle SSL termination and proxy requests to your Node.js application. This can simplify your setup and improve performance. You can generate a secure SSL configuration using Mozilla's SSL Configuration Generator.

For more information on setting up Nginx as an SSL offloader, you can refer to the following resources:
- [Mozilla SSL Configuration Generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/)
- [Nginx SSL Termination with Node.js](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-as-a-reverse-proxy-for-node-js)

This approach will help you manage SSL and reverse proxying more efficiently.