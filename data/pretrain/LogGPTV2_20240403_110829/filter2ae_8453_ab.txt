            outputStream.close();
            // 配置云控
            setCloudConf();
            // 配置其它选项
            Map ymlData = new HashMap();
            if (App.raspId != null) {
                ymlData.put("rasp.id", App.raspId);
            }
            if (!ymlData.isEmpty()) {
                setRaspConf(ymlData, "# ");
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
其中通过setCloudConf()方法，把云控所需的程序启动参数，写到配置文件openrasp.yml中
    appid：OpenRASP连接到RASP Cloud的认证appid
    appsecret：OpenRASP连接到RASP Cloud的认证appsecret
    backendurl：RASP Cloud地址
    heartbeat：OpenRASP连接到RASP Cloud的心跳检测时间间隔
写入的格式（yml）：
    cloud:
        enable: true
        backend_url: backendurl
        app_id: appid
        app_secret: appsecret
        heartbeat_interval: heartbeat
  1. TomcatInstaller
相对于通用安装的主要流程，它们并没有什么区别，区别仅仅在于配置文件写完后，TomcatInstaller会tomcat的安装目录下的bin/catalina.sh脚本进行修改
    位于：com.baidu.rasp.install.BaseStandardInstaller#generateStartScript
    com.baidu.rasp.install.linux.TomcatInstaller#getScript -> foundScriptPath(String installDir)：查找bin/catalina.sh脚本路径
    com.baidu.rasp.install.BaseStandardInstaller#modifyStartScript(String content)：入参content即为脚本内容
在修改脚本时，会找到对应的位置写入或删除原有OpenRASP内容，写入新的脚本，然后根据程序启动参数prepend选择插入不同的rasp启动方式：
比web容器bootstrap更先启动：
    private static String PREPEND_JAVA_AGENT_CONFIG = "\tJAVA_OPTS=\"${JAVA_OPTS} -javaagent:${CATALINA_HOME}/rasp/rasp.jar\"\n";
较web容器bootstrap更后启动：
    private static String JAVA_AGENT_CONFIG = "\tJAVA_OPTS=\"-javaagent:${CATALINA_HOME}/rasp/rasp.jar ${JAVA_OPTS}\"\n";
#### 总结下来：
    /**
     * 操作判断：
     * 1.根据第一个参数判断是安装还是卸载
     *
     * 安装类型判断：
     * 1.判断操作系统
     * 2.判断服务器类型
     * 3.创建相应的安装器
     *
     * 普通安装：
     * 1.读启动参数
     * 2.把rasp目录copy到target目录
     * 3.若openrasp.yml存在则备份成openrasp.yml.bak，然后新写入openrasp.yml文件
     * 4.写入部分启动参数到openrasp.yml文件，启动云控
     * 
     * 非普通安装：
     * 1. 修改启动shell脚本，插入agent启动信息
     *
     */
* * *
### 0x03 OpenRASP的启动工作
java源码实现，位置：agent/java/boot
入口代码：
    /**
     * 启动时加载的agent入口方法
     *
     * 1. javaagent在JVMTI特定状态时调用premain
     * 2. 把自身jar包放到java根目录，让启动类加载器能加载到（后续在这个javaagent会对启动类加载的class进行插桩，插桩代码点会调用rasp代码，因为启动类加载器加载的类是没办法去调用得到启动类加载器加载不到的类）
     * 3. 在当前jar包所在目录找到rasp-engine.jar
     * 4. 使用rasp-engine.jar初始化模块容器
     * 5. 找到manifest文件制定的Rasp-Module-Class实例化成module，然后调用该module.start()
     *
     * @param agentArg 启动参数
     * @param inst     {@link Instrumentation}
     */
    public static void premain(String agentArg, Instrumentation inst) {
        init(START_MODE_NORMAL, START_ACTION_INSTALL, inst);
    }
    /**
     * attach 机制加载 agent
     *
     * @param agentArg 启动参数
     * @param inst     {@link Instrumentation}
     */
    public static void agentmain(String agentArg, Instrumentation inst) {
        init(Module.START_MODE_ATTACH, agentArg, inst);
    }
具有两种方式的启动，一种是JVMTI调用premain方式，一种是attach机制加载agent的方式。
    String START_MODE_ATTACH = "attach";
    String START_MODE_NORMAL = "normal";
核心：
    /**
     * attack 机制加载 agent
     *
     * @param mode 启动模式
     * @param inst {@link Instrumentation}
     */
    public static synchronized void init(String mode, String action, Instrumentation inst) {
        try {
            JarFileHelper.addJarToBootstrap(inst);
            readVersion();
            ModuleLoader.load(mode, action, inst);
        } catch (Throwable e) {
            System.err.println("[OpenRASP] Failed to initialize, will continue without security protection.");
            e.printStackTrace();
        }
    }
  1. JarFileHelper.addJarToBootstrap(inst)：添加当前执行的jar文件至jdk的跟路径下，启动类加载器能优先加载，后续在这个javaagent会对启动类加载的class进行插桩，插桩代码点会调用rasp代码，因为启动类加载器加载的类是没办法去调用得到启动类加载器加载不到的类，因为每个类加载器都有自己的类加载目录
  2. readVersion()：读取MANIFEST.MF相关信息
  3. ModuleLoader.load(mode, action, inst)：加载rasp-engine.jar中的module实现（目前为止，仅有这一个module实现）
    /**
     * 加载所有 RASP 模块
     *
     * @param mode 启动模式
     * @param inst {@link java.lang.instrument.Instrumentation}
     */
    public static synchronized void load(String mode, String action, Instrumentation inst) throws Throwable {
        if (Module.START_ACTION_INSTALL.equals(action)) {
            if (instance == null) {
                try {
                    instance = new ModuleLoader(mode, inst);
                } catch (Throwable t) {
                    instance = null;
                    throw t;
                }
            } else {
                System.out.println("[OpenRASP] The OpenRASP has bean initialized and cannot be initialized again");
            }
        } else if (Module.START_ACTION_UNINSTALL.equals(action)) {
            release(mode);
        } else {
            throw new IllegalStateException("[OpenRASP] Can not support the action: " + action);
        }
    }
    /**
     * 构造所有模块
     *
     * @param mode 启动模式
     * @param inst {@link java.lang.instrument.Instrumentation}
     */
    private ModuleLoader(String mode, Instrumentation inst) throws Throwable {
        if (Module.START_MODE_NORMAL == mode) {
            setStartupOptionForJboss();
        }
        engineContainer = new ModuleContainer(ENGINE_JAR);
        engineContainer.start(mode, inst);
    }
    public static final String ENGINE_JAR = "rasp-engine.jar";
可以看到，这里的实现是创建容器并启动，容器的实现是rasp-engine.jar，如果细看ModuleContainer的源码，可以发现，在其构造方法中，读取了rasp-engine.jar中MANIFEST.MF文件的Rasp-Module-Name、Rasp-Module-Class信息，此信息用于指定rasp-engine.jar中module容器的实现类，然后agent中的module加载器根据此信息加载module容器并调用start方法启动
* * *
### 0x04 OpenRASP engine的启动
java源码实现，位置：agent/java/engine
入口代码（com.baidu.openrasp.EngineBoot）：
    @Override
        public void start(String mode, Instrumentation inst) throws Exception {
            System.out.println("\n\n" +
                    "   ____                   ____  ___   _____ ____ \n" +
                    "  / __ \\____  ___  ____  / __ \\/   | / ___// __ \\\n" +
                    " / / / / __ \\/ _ \\/ __ \\/ /_/ / /| | \\__ \\/ /_/ /\n" +
                    "/ /_/ / /_/ /  __/ / / / _, _/ ___ |___/ / ____/ \n" +
                    "\\____/ .___/\\___/_/ /_/_/ |_/_/  |_/____/_/      \n" +
                    "    /_/                                          \n\n");
            try {
                V8.Load();
            } catch (Exception e) {
                System.out.println("[OpenRASP] Failed to load V8 library, please refer to https://rasp.baidu.com/doc/install/software.html#faq-v8-load for possible solutions.");
                e.printStackTrace();
                return;
            }
            if (!loadConfig()) {
                return;
            }
            //缓存rasp的build信息
            Agent.readVersion();
            BuildRASPModel.initRaspInfo(Agent.projectVersion, Agent.buildTime, Agent.gitCommit);
            // 初始化插件系统
            if (!JS.Initialize()) {
                return;
            }
            CheckerManager.init();
            initTransformer(inst);
            String message = "[OpenRASP] Engine Initialized [" + Agent.projectVersion + " (build: GitCommit="
                    + Agent.gitCommit + " date=" + Agent.buildTime + ")]";
            System.out.println(message);
            Logger.getLogger(EngineBoot.class.getName()).info(message);
        }
可以看到，一共就做了以下这些工作：
  1. 输出banner信息
  2. V8引擎的加载，用于解释执行JavaScript
  3. loadConfig()：初始化配置
    private boolean loadConfig() throws Exception {
        LogConfig.ConfigFileAppender();
        //单机模式下动态添加获取删除syslog
        if (!CloudUtils.checkCloudControlEnter()) {
            LogConfig.syslogManager();
        } else {
            System.out.println("[OpenRASP] RASP ID: " + CloudCacheModel.getInstance().getRaspId());
        }
        return true;
    }
LogConfig.ConfigFileAppender()：初始化log4j  
CloudUtils.checkCloudControlEnter()：检查云控配置信息  
LogConfig.syslogManager()：读取配置信息，初始化syslog服务连接
  1. JS.Initialize()：初始化插件系统
为V8配置java的logger以及栈堆信息Getter（用于在js中获取当前栈堆信息）
    public synchronized static boolean Initialize() {
        try {
            V8.Load();
            if (!V8.Initialize()) {
                throw new Exception("[OpenRASP] Failed to initialize V8 worker threads");
            }
            V8.SetLogger(new com.baidu.openrasp.v8.Logger() {
                @Override
                public void log(String msg) {
                    PLUGIN_LOGGER.info(msg);
                }
            });
            V8.SetStackGetter(new com.baidu.openrasp.v8.StackGetter() {
                @Override
                public byte[] get() {
                    try {
                        ByteArrayOutputStream stack = new ByteArrayOutputStream();
                        JsonStream.serialize(StackTrace.getParamStackTraceArray(), stack);
                        stack.write(0);
                        return stack.getByteArray();
                    } catch (Exception e) {
                        return null;
                    }
                }
            });
            Context.setKeys();
            if (!CloudUtils.checkCloudControlEnter()) {
                UpdatePlugin();
                InitFileWatcher();
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error(e);
            return false;