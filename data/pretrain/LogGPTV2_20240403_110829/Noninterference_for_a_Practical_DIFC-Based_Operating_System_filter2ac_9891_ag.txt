modern formulations, like Schneider’s. We use Schneider’s “interface paral-
lelism” in this model.
7If the channel has a compound name like i.c, its values are respectively
denoted i.c.v. Channel names are preﬁx-free so this is never ambiguous.
72
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
that cannot be observed by other processes through
transitions,
synchronization or channel communication. Concealment can induce
divergence—an inﬁnite sequence of internal transitions. For instance,
the process P = (c → P )\{c} diverges immediately, never to be
useful again. The use of concealment in the Flume model is careful
never to induce divergence in this manner.
Concealment enables subroutines (or subordination,
in Hoare’s
terminology). For two process P and Q whose alphabets fulﬁll
αP ⊆ αQ, the new process P (cid:2) Q is deﬁned as (P (cid:7) Q)\αP . This
means that the subroutine P is available within Q, but not visible to
the outside world. The notation p:P (cid:2) Q means a particular instance
p of the subroutine P is available in Q. Then an event such as p!x?y
within Q means that Q is calling subroutine p with argument x, and
that the return value is placed into y. Within P , the event ?x means
receive the argument x from the caller, and the event !y means return
the result y to the caller.
A ﬁnal important language feature is renaming. Given a “template”
process P , the notation i:P means a “renaming” of P with all events
preﬁxed by i. That is, if the event c!v appears in P , then the event
i.c!v appears in i:P , where i.c is the channel c that has been renamed
to i.c. Thus, for any i (cid:8)= j, the alphabets of i:P and j:P are disjoint:
α(i:P ) ∩ α(j:P ) = {}. This concludes our whirlwind tour of CSP
features. We refer the reader to Hoare’s [16], Schneider’s [20] and
Roscoe’s [19] books for many more details.
2) The Stable Failures Model: We now expand upon the idea of
traces to develop an idea of process equivalence in CSP. The traces of
P (denoted traces(P )) is the set of all traces accepted by the process
P . The refusals of P (denoted refusals(P )) is a set of sets. A set X
is in refusals(P ) if and only if P deadlocks when offered any event
from X. For instance, consider the process P0:
P0 = (a → STOP (cid:15) b → STOP) .
We write that refusals(P0) = {{a}, {b}}. That is, P0 can nondeter-
ministically choose the left branch, in which case it will only accept
{a} and will refuse {b}. On the other hand, if it nondeterministically
chooses the left branch, it will accept {b} and refuse {a}. Thus, due
to nondeterminism, we write refusals(P ) as above, and not as the
ﬂattened union {a, b}.
The notation Q ↓ is a predicate that denotes the process Q is
“stable.” Unstable states are those that transition internally, or those
that diverge. For example, the process P0 begins at an unstable
state, since it can make progress in either the left or right direction
without accepting any input. However, once it makes its ﬁrst internal
transition, arriving at either a → STOP or b → STOP, it becomes
stable. A process that diverges, such as (c → P )\{c}, has no stable
states.
Though the CSP literature explores many notions of process
equivalence, this paper uses the “stable failures” model, given in
Hoare’s book [16] and rephrased by Schneider [20] and Roscoe [19].
For a process P , the stable failures of P , written SF(cid:4)P (cid:5), are deﬁned
as:
SF(cid:4)P (cid:5) = {(s, X) | s ∈ traces(P ) ∧ P/s ↓ ∧
X ∈ refusals(P/s)}.
In other words, the failures of P captures which traces P accepts,
and which sets it refuses after accepting those traces. For example:
SF(cid:4)P0(cid:5) = {((cid:10)(cid:11), {a}), ((cid:10)(cid:11), {b}), ((cid:10)a(cid:11), {a, b}), ((cid:10)b(cid:11), {a, b})} .
Lastly, CSP offers a way to identify processes in states other than
their initial states: the process P/tr is P advanced to the state after
the trace tr has occurred. Next, we often talk about the effects of
“purging” certain events from traces and process states. The operator
“(cid:3)” denotes projection. The trace tr (cid:3) A is the trace tr projected onto
the set A, meaning all events not in A are removed. For instance, if
A = {a}, and tr = (cid:10)a, b, c, d, a, b, c(cid:11), then tr (cid:3) A = (cid:10)b, c, d, b, c(cid:11).
For a set C, the set C (cid:3) A is simply the intersection of the two.
Deﬁne two projected processes P (cid:3) A and Q (cid:3) A equivalent if and
only if SF(cid:4)P (cid:5) (cid:3) A = SF(cid:4)Q(cid:5) (cid:3) A, where:
SF(cid:4)P (cid:5) (cid:3) A = {(tr (cid:3) A, X ∩ A) | (tr, X) ∈ SF(cid:4)P (cid:5)}
and similarly for Q.
B. Per-process Queues (QUEUES)
Each kernel process i:K needs it own set of queues, to handle
messages received asynchronously from other processes. For con-
venience, we package up all of the queues in a single process
i:QUEUES, which i:K can access in all of its various states. The
channel q serves communication between the queues and the kernel
process. The building block of this process is a single QUEUE
process, similar to that deﬁned in Hoare’s book. This process is
parameterized by the value stored in the queue, and of course the
queue starts out empty:
QUEUE = QUEUE<>
From here, we deﬁne state transitions:
QUEUE(cid:6)(cid:7) =
QUEUE
(cid:4)
(cid:6)x(cid:7)
s
=
(cid:2)
?(enqueue, x) → QUEUE(cid:6)x(cid:7) |
(cid:3)
?(select, j)!{} → QUEUE(cid:6)(cid:7)
(cid:2)
?(enqueue, y) → if #s + 1 < NQ
then QUEUE
(cid:4)
(cid:4)
s
(cid:6)y(cid:7)
(cid:6)x(cid:7)
else QUEUE
|
s
(cid:4)
(cid:6)x(cid:7)
(cid:3)
(cid:4)
(cid:6)x(cid:7)
s
?(dequeue)!x → QUEUEs
?(select, j)!{j} → QUEUE
|
Note that these queues are bounded beneath NQ elements. Attempts
to enqueue messages on ﬁlled queues result in dropped messages.
The model combines many QUEUE subprocesses into a collection
processes called QUEUESET:
QUEUESET =(cid:7)i∈P i:QUEUE
The process called QUEUES communicates with kernel processes.
Recall that i.q is the channel shared between i:K and i:QUEUES:
QUEUES = s : QUEUESET (cid:2) sel : QSELECTs
(cid:2) μX•
(cid:2)
q?(enqueue, j, m) → s.j!(enqueue, m)
→ X |
q?(dequeue, j) → s.j!(dequeue)?m
→ q!m → X |
q?(select, Y ) → sel!Y ?Z → q!Z → X |
(cid:3)
q?(clear) → QUEUES
In the stable failures model, two processes P and Q are deemed
equivalent if and only if SF(cid:4)P (cid:5) = SF(cid:4)Q(cid:5).
Finally, the point of QSELECT is to determine which of the supplied
queues have pending messages. This process uses tail recursion to
73
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
add to the variable Z as readied queues are found.
QSELECTs =Z : VAR (cid:2) ?Y →
Z := {} ;
(cid:2)
μX • (if Y = {}
then (!Z → QSELECTs)
else pick j ∈ Y ;
Y := Y − {j} ;
(s.j!(select, j) → s.j?A →
(Z := Z ∪ A ; X))
(cid:3)
C. Determining Tag Sizes
We can solve for how big α must be in terms of β and .
Partitioning requires that functions from G must be injective, giving
4β ≤ 2α, or equivalently, α ≥ 4β. As for unpredictability, g is
2
chosen randomly from G, so it will output elements in {0, 1}α in
random order. After 2β calls, g outputs elements from a set sized
2α − 2β at random. Since α ≥ 4β1, this “restricted” range for g
still has well in excess of 2α−1 elements. Failure occurs when a
process can predict the output of g, which happens with probability no
greater than 2α−1. Thus, α−1 ≥ . Combining these two restrictions,
α ≥ max( + 1, 4β). For β = 80 and  = 100 we get α = 320.
D. Proof
1) Alphabets: The relevant high, mid and low alphabets were
deﬁned in Section V-A2. The rest of the events in the Flume
model (like communication through the switch, to the process or tag
manager, etc.) are all hidden by the CSP-hiding operators, as given
in Section IV-G. For convenience, we deﬁne the set of events that
correspond to kernel process i’s incoming system calls, and a set of
event that correspond to process i’s responses:
Ci (cid:2)
(cid:5)
i.s.(S, I, create tag, w) |
(cid:6)
S, I ⊂ T ∧ w ∈ {Add, Remove, None}
(cid:5)
i.s.(S, I, change label, w, L) |
(cid:6)
S, I, L ⊂ T ∧ w ∈ {Integrity, Secrecy}
(cid:5)
i.s.(S, I, get label, w) |
(cid:6)
w ∈ {Integrity, Secrecy}
∪ · · ·
∪
and so on for all system calls. The returns from system calls are:
(cid:6)
Ri (cid:2)
(cid:5)
(cid:5)
(cid:5)
(cid:5)
(cid:5)
∪
i.s.(S, I, t) | S, I ⊂ T ∧ t ∈ T
(cid:6)
i.s.(S, I, r) | S, I ⊂ T ∧ r ∈ {Ok, Error}
i.s.(S, I, L) | S, I, L ⊂ T
i.s.(S, I, O) | S, I ⊂ T ∧ O ⊂ O
(cid:6)
i.s.(S, I, p) | S, I ⊂ T ∧ p ∈ P
(cid:6)
(cid:6)
∪
∪
∪
Also, we often describe the failures of a process P projected onto
the low alphabet LOt − MIDt, abbreviated:
Lt(cid:4)P (cid:5) (cid:2) SF(cid:4)P (cid:5) (cid:3) (LOt − MIDt)
2) Proof: Consider any two traces tr and tr(cid:2) that are equivalent
when projected to LOt ∪ MIDt. Perform induction over the length of
the traces tr and tr(cid:2). To do so, invent a function λ(·):
λ(tr) (cid:2) # (tr (cid:3) (LOt ∪ MIDt))
(cid:2)
assume it holds for all traces with λ(tr) = λ(tr
it holds for all traces with λ(tr) = λ(tr(cid:2)) = k.
) = k − 1 and prove
a) Base Case: For
tr, tr(cid:2) ∈
traces(SYS) such that λ(tr) = λ(tr(cid:2)) = 0. In other words, tr, tr(cid:2) ∈
(HIt − MIDt)
the base case, consider all
∗.
At the system startup (SYS after no transitions), all of the kernel
process i:K are waiting on a message of the form i.b before they
spring to life. Until such a message arrives, i:K will refuse all events
Ci and Ri. The one exception is the process init, which is already
waiting to accept incoming system calls when the system starts. By
construction Sinit = {} and Iinit = T . Since t /∈ Sinit, Cinit ∪ Rinit ⊆
LOt. Therefore, the system refuses all high events at startup, and
tr = (cid:10)(cid:11) is the only trace of SYS without low symbols (and for which
λ(tr) = 0). For tr = tr(cid:2)
= (cid:10)(cid:11), the claim trivially holds.
b) Inductive Step, l /∈ MIDt: For the inductive step, assume the
claim holds for all traces tr, tr(cid:2) of SYS such that tr (cid:3) (LOt ∪ MIDt) =
tr(cid:2) (cid:3) (LOt ∪ MIDt) and also λ(tr) = λ(tr(cid:2)) = k − 1. Now, we seek
to show the claim holds for all equivalent traces with one more low
symbol.
l
(cid:4)
(cid:4)
Given an arbitrary trace tr ∈ traces(SYS) such that λ(tr) = k,
h, where p is a preﬁx of tr,
write tr in the form tr = p
∗ are
l ∈ LOt ∪ MIDt is a single low event, and h ∈ (HIt − MIDt)
traces of high events. There are two cases : l /∈ MIDt and l ∈ MIDt.
Consider the ﬁrst here (l /∈ MIDt), and see Section D2c below for
the second.
Write the right trace in the same form: tr(cid:2)
(cid:4)
(cid:2). It
= p
h
sufﬁces to show that Lt(cid:4)S/tr(cid:5) = Lt(cid:4)S/(p
l)(cid:5). Indeed, if we
have shown this equality for arbitrary tr, then the same applies for
S/tr(cid:2), meaning Lt(cid:4)S/tr(cid:2)(cid:5) = Lt(cid:4)S/(p
l)(cid:5). By inductive hypothesis,
Lt(cid:4)S/p(cid:5) = Lt(cid:4)S/p
l)(cid:5).
By transitivity, we have that Lt(cid:4)S/tr(cid:5) = Lt(cid:4)S/tr(cid:2)(cid:5), which is what
needs to be proven. Thus, the crux of the argument is to show that the
high events of tr do not affect low’s view of the system; the second
trace tr(cid:2) is immaterial.
(cid:2)(cid:5), and therefore Lt(cid:4)S/(p
l)(cid:5) = Lt(cid:4)S/(p
(cid:2) (cid:4)
(cid:2)(cid:4)
(cid:2)(cid:4)
(cid:4)
(cid:4)
l
We consider the event l case-by-case over the relevant events in
That is, l is a return from a system call into user space. Because
l is a low event, l is of the form i.s.(S, I, O, . . . ) where t /∈ S.
After this event, i:K is in a state ready to receive a new system
call (i : KS,I,O). Because all events in h are high events, none
are system calls of the form i.s.(S, I, O, . . . ) with t /∈ S, and
therefore, none can force i:K into a different state. In other
words, the events h can happen either before or after l; SYS
will accept (and refuse) the same events after either ordering.
That is:
Lt(cid:4)SYS/(p
(cid:4)
(cid:4)
l
h)(cid:5) = Lt(cid:4)SYS/(p
(cid:4)
(cid:4)
h
l)(cid:5).
We can apply the inductive hypothesis to deduce that:
Lt(cid:4)SYS/(p
(cid:4)
h)(cid:5) = Lt(cid:4)SYS/p(cid:5)
Appending the same event l to the tail of each trace gives:
Lt(cid:4)SYS/(p