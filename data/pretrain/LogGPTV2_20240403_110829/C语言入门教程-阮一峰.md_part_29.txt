它们都接受两个参数，第⼀个参数是需要转换的字符串，第⼆个参数是⼀个指针，指向原始字符串⾥⾯⽆
法转换的部分。
：待转换的字符串（起⾸的空⽩字符会被忽略）。
nptr
：⼀个指针，指向不能转换部分的第⼀个字符。如果字符串可以完全转成数值，该指针指
endprt
向字符串末尾的终⽌符 。这个参数如果设为 NULL，就表示不需要处理字符串剩余部分。
\0
它们的返回值是已经转换后的数值。如果字符串⽆法转换，则返回 。如果转换结果发⽣溢出，errno 会
0
被设置为 ERANGE。如果值太⼤（⽆论是正数还是负数），函数返回 ；如果值太⼩，函数返回
HUGE_VAL
零。
char *inp = " 123.4567abdc";
char *badchar;
double val = strtod(inp, &badchar);
printf("%f\n", val);
printf("%s\n", badchar);
字符串可以完全转换的情况下，第⼆个参数指向 ，因此可以⽤下⾯的写法判断是否完全转换。
\0
if (*endptr == '\0') {
} else {
}
如果不关⼼没有转换的部分，则可以将 endptr 设置为 NULL。
这些函数还可以将字符串转换为特殊值 Infinity 和 NaN。如果字符串包含 INF 或 INFINITY（⼤写或⼩写皆
可），则将转换为 Infinity；如果字符串包含 NAN，则将返回 NaN。
str 系列函数（整数转换） #
str 系列函数也有整数转换的对应函数。
strtol()：字符串转成 long int 类型。
strtoll()：字符串转成 long long int 类型。
strtoul()：字符串转成 unsigned long int 类型。
strtoull()：字符串转成 unsigned long long int 类型。
它们的原型如下。
long int strtol(
const char* restrict nptr,
char** restrict endptr,
int base
);
long long int strtoll(
const char* restrict nptr,
char** restrict endptr,
int base
);
unsigned long int strtoul(
const char* restrict nptr,
char** restrict endptr,
int base
);
unsigned long long int strtoull(
const char* restrict nptr,
char** restrict endptr, int base
);
它们接受三个参数。
（1） ：待转换的字符串（起⾸的空⽩字符会被忽略）。
nPtr
（2） ：⼀个指针，指向不能转换部分的第⼀个字符。如果字符串可以完全转成数值，该指针指向
endPrt
字符串末尾的终⽌符 。这个参数如果设为 NULL，就表示不需要处理字符串剩余部分。
\0
（3） ：待转换整数的进制。这个值应该是 到 之间的整数，代表相应的进制，如果是特殊值
base 2 36
，表示让函数根据数值的前缀，⾃⼰确定进制，即如果数字有前缀 ，则为⼋进制，如果数字有前缀
0 0
或 ，则为⼗六进制。
0x 0X
它们的返回值是转换后的数值，如果转换不成功，返回 。
0
下⾯是转换⼗进制整数的例⼦。
char* s = "3490";
unsigned long int x = strtoul(u, NULL, 10);
printf("%lu\n", x);
下⾯是转换⼗六进制整数的例⼦。
char* end;
long value = strtol("0xff", &end, 16);
printf("%ld\n", value);
printf("%s\n", end);
value = strtol("0xffxx", &end, 16);
printf("%ld\n", value);
printf("%s\n", end);
上⾯示例中， 可以指定字符串包含的是 16 进制整数。不能转换的部分，可以使⽤指针 进⾏
strtol() end
访问。
下⾯是转换⼆进制整数的例⼦。
char* s = "101010";
unsigned long int x = strtoul(s, NULL, 2);
printf("%lu\n", x);
下⾯是让函数⾃⾏判断整数进制的例⼦。
#include 
#include 
int main(void) {
const char* string = "-1234567abc";
char* remainderPtr;
long x = strtol(string, &remainderPtr, 0);
printf("%s\"%s\"\n%s%ld\n%s\"%s\"\n",
"The original string is ",
string,
"The converted value is ",
x,
"The remainder of the original string is ",
remainderPtr
);
}
上⾯代码的输出结果如下。
The original string is "-1234567abc"
The converted value is -1234567
The remainder of the original string is "abc"
如果被转换的值太⼤， 函数在 中存储 这个值，并返回 （原值为负数）
strtol() errno ERANGE LONG_MIN
或 （原值为正数）， 则返回 。
LONG_MAX strtoul() ULONG_MAX
rand() #
函数⽤来⽣成 0～RAND_MAX 之间的随机整数。 是⼀个定义在 ⾥⾯的宏，通
rand() RAND_MAX stdlib.h
常等于 INT_MAX。
int rand(void);
int x = rand();
如果希望获得整数 N 到 M 之间的随机数（包括 N 和 M 两个端点值），可以使⽤下⾯的写法。
int x = rand() % （M - N + 1) + N;
⽐如，1 到 6 之间的随机数，写法如下。
int x = rand() % 6 + 1;
获得浮点数的随机值，可以使⽤下⾯的写法。
printf("0 to 0.99999: %f\n", rand() / ((float)RAND_MAX + 1));
printf("10.5 to 15.7: %f\n", 10.5 + 5.2 * rand() / (float)RAND_MAX);
上⾯示例中，由于 和 都是 int 类型，要⽤显示的类型转换转为浮点数。
rand() RAND_MAX
srand() #
是伪随机数函数，为了增加随机性，必须在调⽤它之前，使⽤ 函数重置⼀下种⼦值。
rand() srand()
函数接受⼀个⽆符号整数（unsigned int）作为种⼦值，没有返回值。
srand()
void srand(unsigned int seed);
通常使⽤ 函数返回当前距离时间纪元的秒数，作为 的参数。
time(NULL) srand()
#include 
srand((unsigned int) time(NULL));
上⾯代码中， 的原型定义在头⽂件 ⾥⾯，返回值的类型是类型别名 ，具体的类型
time() time.h time_t
与系统有关，所以要强制转换⼀下类型。 的参数是⼀个指针，指向⼀个具体的 time_t 类型的时间
time()
值，这⾥传⼊空指针 作为参数，由于 NULL ⼀般是 ，所以也可以写成 。
NULL 0 time(0)
abort() #
⽤于不正常地终⽌⼀个正在执⾏的程序。使⽤这个函数的⽬的，主要是它会触发 SIGABRT 信
abort()
号，开发者可以在程序中为这个信号设置⼀个处理函数。
void abort(void);
该函数没有参数。
exit()，quick_exit()，_Exit() #
这三个函数都⽤来退出当前正在执⾏的程序。
void exit(int status);
void quick_exit(int status);
void _Exit(int status);
它们都接受⼀个整数，表示程序的退出状态， 是正常退出，⾮零值表示发⽣错误，可以使⽤宏
0
和 当作参数。它们本身没有返回值。
EXIT_SUCCESS EXIT_FAILURE
它们的区别是，退出时所做的清理⼯作不同。 是正常退出，系统会做完整的清理，⽐如更新所有⽂
exit()
件流，并且删除临时⽂件。 是快速退出，系统的清理⼯作稍微少⼀点。 是⽴即退
quick_exit() _Exit()
出，不做任何清理⼯作。
下⾯是⼀些⽤法示例。
exit(EXIT_SUCCESS);
quick_exit(EXIT_FAILURE);
_Exit(2);
atexit()，at_quick_exit() #
⽤来登记当前程序退出时（调⽤ 或 正常退出），所要执⾏的其他函数。
atexit() exit() main()
则是登记使⽤ ⽅法退出当前程序时，所要执⾏的其他函数。
at_quick_exit() quick_exit()
只能触发 登记的函数， 只能触发 登记的函数。
exit() atexit() quick_exit() at_quick_exit()
int atexit(void (*func)(void));
int at_quick_exit(void (*func)(void));
它们的参数是要执⾏的函数地址，即函数名。它们的返回值都是调⽤成功时返回 ，调⽤失败时返回⾮零
0
值。
下⾯是⼀个例⼦。
void sign_off(void);
void too_bad(void);
int main(void) {
int n;
atexit(sign_off);
puts("Enter an integer:");
if (scanf("%d", &n) != 1) {
puts("That's no integer!");
atexit(too_bad);
exit(EXIT_FAILURE);
}
printf("%d is %s.\n", n, (n % 2 == 0) ? "even" : "odd");
return 0;
}
void sign_off(void) {
puts("sign_off");
}
void too_bad(void) {
puts("too bad");
}
上⾯示例中，⽤户输⼊失败时，会调⽤ 和 函数；但是输⼊成功时只会调⽤
sign_off() too_bad()
。因为只有输⼊失败时，才会进⼊ 语句登记 。
sign_off() if too_bad()
另外，如果有多条 语句，函数退出时最先调⽤的，是最后⼀个登记的函数。
atexit()
登记的函数（如上例的 和 ）应该不带任何参数且返回类型为 。通常，
atexit() sign_off too_bad void
这些函数会执⾏⼀些清理任务，例如删除临时⽂件或重置环境变量。
也是同样的规则，下⾯是⼀个例⼦。
at_quick_exit()
void exit_handler_1(void) {
printf("1\n");
}
void exit_handler_2(void) {
printf("2\n");
}
int main(void) {
at_quick_exit(exit_handler_1);
at_quick_exit(exit_handler_2);
quick_exit(0);
}
执⾏上⾯的示例，命令⾏会先输出 2，再输出 1。
getenv() #
⽤于获取环境变量的值。环境变量是操作系统提供的程序之外的⼀些环境参数。
getenv()
char* getenv(const char* name);
它的参数是⼀个字符串，表示环境变量名。返回值也是⼀个字符串，表示环境变量的值。如果指定的环境
变量不存在，则返回 NULL。
下⾯是输出环境变量 的值的例⼦。
$PATH
printf("PATH is %s\n", getenv("PATH"));
system() #
函数⽤于执⾏外部程序。它会把它的参数字符串传递给操作系统，让操作系统的命令处理器来执
system()
⾏。
void system( char const * command );
这个函数的返回值因编译器⽽异。但是标准规定，如果 NULL 作为参数，表示询问操作系统，是否有可⽤
的命令处理器，如果有的话，返回⼀个⾮零值，否则返回零。
下⾯是执⾏ 命令的例⼦。
ls
system("ls -l");
内存管理函数 #
stdlib.h 提供了⼀些内存操作函数，下⾯⼏个函数详⻅《内存管理》⼀章，其余在本节介绍。
malloc()：分配内存区域
calloc()：分配内存区域。
realloc()：调节内存区域⼤⼩。
free()：释放内存区域。
aligned_alloc() #
很多系统有内存对⻬的要求，即内存块的⼤⼩必须是某个值（⽐如 64 字节）的倍数，这样有利于提⾼处理
速度。 就⽤于分配满⾜内存对⻬要求的内存块，它的原型如下。
aligned_alloc()
void* aligned_alloc(size_t alignment, size_t size);
它接受两个参数。
alignment：整数，表示内存对⻬的单位⼤⼩，⼀般是 2 的整数次幂（2、4、8、16……）。
size：整数，表示内存块的⼤⼩。
分配成功时，它返回⼀个⽆类型指针，指向新分配的内存块。分配失败时，返回 NULL。
char* p = aligned_alloc(64, 256);