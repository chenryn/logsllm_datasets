nearby shelf in case they were needed later.  The server
was  backed  up  regularly,  with  three  staff  members
taking it in turns to take the day(cid:146)s tapes home with them
for  off-site  storage  (the  standard  practice  was  to  drop
them in the back seat of the car until they were re-used
later on).  In short, the only way to securely delete the
encryption key being used to protect large amounts of
long-term  sensitive  data  would  have  been  to  carpet-
bomb the city, and even then it(cid:146)s not certain that copies
wouldn(cid:146)t  have  survived  somewhere.    While  this
represents  a  marvellous  backup  strategy,  it(cid:146)s  probably
not what(cid:146)s required for protecting private keys.
If  your  product  allows  the  export  of
private  keys  in  plaintext  form  or  some
other  widely-readable  format,  you  should
assume that your keys will end up in every
other  application  on  the  system,  and
occasionally  spread  across  other  systems
as well.
At  least  some  of  the  problem  arises  from  the  fact  the
much  current  software  makes  it  unnecessarily  easy  to
move  private  keys  around  (see  also  section  3.2  for  a
variation of this problem).  For example CAs frequently
use PKCS #12 files to send a (cid:147)certificate(cid:148) to a new user
because it makes things simpler than going through the
multi-stage process in which the browser generates the
private  key  itself.    These  files  are  invariably  sent  in
plain  text  email,  often  with  the  password  included.
Alternatively, when the password is sent by out-of-band
means,  the  PKCS  #12  decryption  key  is  generated
directly  from  a  hash  of  the  uppercase-only  ASCII
password, despite warnings about the insecurity of this
approach being well publicised several years ago [19].
Once  such  file,  provided  as  a  sample  to  the  author,
would  have  authorised  access  to  third-party  financial
records  in  a  European  country.    This  method  of  key
handling was standard practice for the CA involved.
Another CA took this process a step further when they
attempted to solve the problem of not having their root
certificate  trusted  by  various  browsers  and  mail
programs  by  distributing  a  PKCS  #12  file  containing
the  CA  root  key  and  certificate  to  all  relying  parties.
The  thinking  was  that  once  the  CA(cid:146)s  private  key  was
installed on their system, the user(cid:146)s PKI software would
regard the corresponding certificate as being trusted (it
still  didn(cid:146)t  quite  fix  the  problem,  but  it  was  a  start).
This (cid:147)solution(cid:148) is in fact so common that the OpenSSL
FAQ  contains  an  entry  specifically  warning  against  it
[55].  Incredibly, despite the strong warning in the FAQ
that  (cid:147)this  command  will  give  away  your  CA(cid:146)s  private
key  and  reduces  its  security  to  zero(cid:148),  security  books
have  appeared  which  give  clear,  step-by-step
instructions  on  how  to  distribute  the  CA(cid:146)s  private  key
(cid:147)to all your user(cid:146)s web browsers(cid:148) [10].
Making it more difficult to do this sort of thing might
help  alleviate  some  of  the  problems.    Certainly  in  the
case  of  cryptlib  when  users  are  informed  that  what
they(cid:146)re  asking  for  isn(cid:146)t  possible,  they  find  a  means  of
working within those constraints (or maybe they quietly
switch  to  CryptoAPI,  which  allows  private  keys  to  be
sprayed around freely).  However the real problem is a
social and financial one, and is examined in more detail
in section 3.2.
3.2 Everything is a Certificate
In 1996 Microsoft introduced a new storage format for
private keys and certificates to replace the collection of
ad  hoc  (and  insecure)  formats  which  had  been  in  use
before  then  [11][12].    Initially  called  PFX  (Personal
Information Exchange) [13][14][15][16], it was later re-
released in a cleaned-up form as PKCS #12 [17].  One
of the main motivations for its introduction was for use
in Internet kiosks in which users carried their personal
data  around  on  a  floppy  disk  for  use  wherever  they
needed it.  In practice this would have been a bad idea
since Internet Explorer retains copies of the key data so
that  the  next  user  who  came  along  could  obtain  the
previous  user(cid:146)s  keys  by  exporting  them  back  onto  a
floppy.  Internet kiosks never eventuated, but the PKCS
#12 format has remained with us.
Since PKCS #12 stores both keys and certificates, and
(at  least  under  Windows)  the  resulting  files  behave
exactly  like  certificates,  many  users  are  unable  to
distinguish certificates from PKCS #12 objects.  In the
same way that (cid:147)I(cid:146)m sending you a document(cid:148) typically
heralds  the  arrival  of  a  Microsoft  Word  file,  so  (cid:147)I(cid:146)m
sending  you  a  my  certificate(cid:148) 
is  frequently
accompanied  by  a  PKCS  #12  file.    This  problem  isn(cid:146)t
helped by the fact that the Windows (cid:147)Certificate Export
Wizard(cid:148)  actually  creates  PKCS  #12  files  as  output,
defaulting  to  exporting  the  private  key  alongside  the
certificate.  The situation is further confused by some of
the  accompanying  documentation,  which  refers  to  the
PKCS  #12  data  as  a  (cid:147)digital  ID(cid:148)  (rather  than
(cid:147)certificate(cid:148) or (cid:147)private key(cid:148)), with the implication that
it(cid:146)s  just  a  certificate  which  happens  to  require  a
password when exported. The practice of mixing public
and  private  keys  in  this  manner,  and  referring  to  the
process  of  and  making  the  behaviour  of  the  result
identical to the behaviour of a plain certificate, are akin
to  pouring  weedkiller  into  a  fruit  juice  bottle  and
storing  it  on  an  easily  accessible  shelf  in  the  kitchen
cupboard.
The  author,  being  a  known  open-source  crypto
developer,  is  occasionally  asked  for  help  with
certificate-management  code,  and  has  over  the  years
accumulated  a  small  collection  of  users(cid:146)  private  keys
and  certificates,  ranging  from  disposable  email
certificates  through  to  relatively  expensive  higher-
assurance  certificates  (the  users  were  notified  and  the
keys deleted where requested).  The current record for a
key obtained in this manner (reported by another open-
source crypto developer in a similar situation) is the key
for  a  Verisign  Class  3  code-signing  certificate,  the
highest-level  certificate  provided  by  Verisign  which
requires  notarisation,  background  investigations,  and
fairly extensive background checking [18].
Once  the  PKCS  #12  file  is  obtained,  the  contents  can
generally  be  recovered,  either  by  recovering  the
password  [19][20][21]  or  by  taking  advantage  of  the
fact that the Certificate Export Wizard will export keys
without  any  password  if  the  user  just  keeps  clicking
(cid:145)Next(cid:146)  in  standard  Wizard  fashion  (they  are  in  fact
encrypted  with  a  password  consisting  of  two  null
characters, a Microsoft implementation bug which was
reverse-engineered back into PKCS #12).
In contrast, PGP has no such problems.  PGP physically
separates the public and private portion of the key into
two files, and makes it quite clear that the private-key
file should never be distributed to anyone: (cid:147)keep your
secret  key  file  to  yourself  [...]  Never  give  your  secret
key to anyone else [...] Always keep physical control of
your secret key, and don(cid:146)t risk exposing it by storing it
on  a  remote  timesharing  computer.    Keep  it  on  your
own personal computer(cid:148) [22].  When distributing keys
to  other  users,  PGP  only  extracts  the  public
components,  even  if  the  user  explicitly  forces  PGP  to
read from the private key file (the default is to use the
public key file).  Even if the user never bothers to read
the  documentation  which  warns  about  private  key
security,  PGP(cid:146)s  safe-by-default  key  handling  ensures
that they can(cid:146)t accidentally compromise the key.
Make  very  clear  to  users  the  difference
between public and private keys, either in
the  documentation/user  interface  or,
better, by physically separating the two.
The single biggest reason for the re-use of a single key
wherever  possible  is,  as  already  mentioned  in  section
3.1, the cost of the associated certificate.  A secondary
reason  is  the  complexity  involved  in  obtaining  the
certificate, even if it is otherwise free.  Examples of the
latter 
include  no-assurance  email  certificates,
sometimes  known  as  (cid:147)clown-suit  certificates(cid:148)  because
of  the  level  of  identity  assurance  they  provide  [23].
Generating  a  new  key  rather  than  re-using  the  current
one  is  therefore  expensive  enough  and  cumbersome
enough that users are given the incentive to put up with
considerable  inconvenience  in  order  to  re-use  private
keys.    Users  have  even  tried  to  construct  ways  of
sharing  smart  cards  across  multiple  machines  in  order
to solve the annoying problem that they can(cid:146)t export the
private  key  from  the  card.    Another  approach,  which
only  works  with  some  cards,  is  to  generate  the  key
externally and load it onto the card, leaving a copy of
the  original  in  software  to  be  used  from  various
applications and/or machines (the fact that people were
doing this was discovered because some cards or card
drivers handle external key loads in a peculiar manner,
leading to requests for help from users).
PGP on the other hand, with its easily-generated, self-
signed  keys  and  certificates,  suffers  from  no  such
problem, and real-world experience indicates that users
are quite happy to switch to new keys and discard their
old ones whenever they feel the need.
In order to solve this problem, it is necessary to remove
the  strong  incentive  provided  by  current  X.509-style
certificate  management  to  re-use  private  keys.    One
solution to this problem would be for users to be issued
key-signing certificates which they could use to create
their  own  certificates  when  and  as  needed.    This
represents  a  somewhat  awkward  workaround  for  the
fact  that  X.509  doesn(cid:146)t  allow  multiple  signatures
binding  an  indentity  to  a  certificate,  so  that  it(cid:146)s  not
possible  to  generate  a  self-signed  certificate  which  is
then  endorsed  through  further,  external  signatures.    In
any  case  since  this  solution  would  deprive  CAs  of
revenue,  it(cid:146)s  unlikely  to  ever  be  implemented.    As  a
result, even if private key sharing is made as difficult as
possible,  sufficiently  motivated  users  will  still  find
ways to spread them around.  It is, unfortunately, very
difficult to fix social/economic issues using technology.
3.3 Making Key Management Easy
One  popular  solution  for  key  management,  which  has
been around since the technology was still referred to as
dinosaur oil, is the use of fixed, shared keys.  Despite
the  availability  of  public-key  encryption  technology,
the use of this type of key management is still popular,
particularly  in  sectors  such  as  banking  which  have  a
great  deal  of  experience  in  working  with  confidential
information.    Portions  of  the  process  have  now  been
overtaken  by  technology,  with  the  fax  machine
replacing trusted couriers for key exchange.
Another solution which is popular in EDI applications
is to transmit the key in another message segment in the
transaction.  If XML is being used, the encryption key
is  placed  in  a  field  carefully  tagged  as    or
.  Yet another solution, popularised in WEP, is to
use a single fixed key throughout an organisation [24].
Even  when  public-key  encryption  is  being  used,  users
often design their own key-management schemes to go
with  it.    One  (geographically  distributed)  organisation
solved the key management problem by using the same
private key on all of their systems.  This allowed them
to  deploy  public-key  encryption  throughout  the
organisation while at the same time eliminating any key
management problems, since it was no longer necessary
to track a confusing collection of individual keys.
Straight  Diffie-Hellman  requires  no  key
management.    This  is  always  better  than
other  no-key-management  alternatives
which users will create.
Obviously this method of (non-)key management is still