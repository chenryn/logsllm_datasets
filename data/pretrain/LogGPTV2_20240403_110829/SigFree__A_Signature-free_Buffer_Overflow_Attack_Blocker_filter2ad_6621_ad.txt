12
10
8
6
4
2
0
16
15
1
3
1
4
2
5
3
6
7
2
8
3
2
3
3
1
1
9
10
12
14
20
32
44
Number of push-calls
(a)
(a)
(b)
(b)
Figure 9: The number of push-calls in a request. (a) Normal requests. It shows that any instruction sequences of a normal request
contain at most one push-call code pattern. (b) Attack requests. It shows that an attack request contains more than two external
push-calls in one of its instruction sequences.
826
.
1000
900
800
700
600
500
400
300
200
100
0
s
t
s
e
u
q
e
r
l
a
m
r
o
n
f
o
r
e
b
m
u
N
166
117 119
80
73
44 25
15
12
9
5
5
3
1
.
s
k
c
a
t
t
a
f
o
r
e
b
m
u
N
12
10
8
6
4
2
0
10
10
6
6
2
2
2
2
2
1
1
1
1
1
1
1
1
1
1
1
0
1
2
3
4
5
6
7
8
9
10 11
12
13 14
19 26 29 30 33 34 38 39 40 41 52 59 64 72 73 82 83 92 407 517
Number of useful instructions
Number of useful instructions
Figure 10: The number of useful instructions in a request. (a) Normal requests. It shows that no normal requests contain an
instruction sequence which has over 14 useful instructions. (b) Attack requests. It shows that there exists an instruction sequence
of an attack request which contain more than 18 useful instructions.
Figure 9(b) shows that for all the 53 buffer overﬂow at-
tacks we tested, every attack request contains more than
two push-calls in one of its instruction sequences. There-
fore, by setting the threshold number of push-calls to 2,
Scheme 1 can detect all the attacks used in our experi-
ment.
Threshold of Useful Instructions for Scheme 2 Fig-
ure 10(a) shows that no normal requests contain an in-
struction sequence that has more than 14 useful instruc-
tions. Figure 10(b) shows that an attack request contains
over 18 useful instructions in one of its instruction se-
quences. Therefore, by setting the threshold to a number
between 15 and 17, Scheme 2 can detect all the attacks
used in our test. The three attacks, which have the largest
numbers of instructions (92, 407 and 517), are worm
Slammer, CodeRed.a and CodeRed.c, respectively. This
motivates us to investigate in our future work whether an
exceptional large number of useful instructions indicates
the occurrence of a worm.
6.2 Detection of Polymorphic Shellcode
We also tested SigFree on two well-known polymor-
phic engine, ADMmutate v0.84 [40] and CLET v1.0
[23]. Basically, ADMmutate obfuscates the shellcode of
buffer overﬂow attacks in two steps. First, it encrypts the
shellcode. Second, it obfuscates the decryption routine
by substituting instructions and inserting junk instruc-
tions. In addition, ADMmutate replaces the No OPera-
tions(NOP) instructions with other one-byte junk instruc-
tions to evade the detection of an IDS. This is because
most buffer overﬂow attacks contain many NOP instruc-
tions to help locate shellcode, making them suspicious to
an IDS.
CLET is a more powerful polymorphic engine com-
pared with ADMmutate. It disguises its NOPs zone with
2,3 bytes instructions (not implemented yet in CLET
v1.0), referred to as fake-NOPs, and generates a deci-
pher routine with different operations at each time, which
makes classical IDS pattern matching ineffective. More-
over, It uses spectrum analysis to defeat data mining
methods.
Because there is no push-call pattern in the code,
Scheme 1 cannot detect this type of attacks. However,
Scheme 2 is still very robust to these obfuscation tech-
niques. This is because although the original shellcode
contains more useful instructions than the decryption
routine has and it is also encrypted, Scheme 2 may still
ﬁnd enough number of useful instructions in the decryp-
USENIX Association
Security ’06: 15th USENIX Security Symposium
235
ADMmutate
CLET
40
35
30
25
20
15
10
s
n
o
i
t
c
u
r
t
s
n
i
l
u
f
e
s
U
0
10
20
30
40
50
60
70
80
90
100
Polymorph shellcode
Figure 11: The number of useful instructions in all 200 poly-
morphic shellcodes. It shows that the least number of useful
instructions in ADMmutate and CLET polymorphic shellcodes
is 17.
tion routines.
We used each of ADMmutate and CLET to generate
100 polymorphic shellcodes, respectively. Then, we used
Scheme 2 to detect the useful instructions in the code.
Figure 11 shows the (sorted) numbers of useful instruc-
tions in 200 polymorphic shellcodes. We observed that
the least number of useful instructions in these ADM-
mutate polymorphic shellcodes is 17, whereas the max-
imum number is 39; the least number of useful instruc-
tions in the CLET polymorphic shellcodes is 18, whereas
the maximum number is 25. Therefore, using the same
threshold value as before (i.e., between 15 and 17), we
can detect all the 200 polymorphic shellcodes generated
by ADMmutate and CLET.
6.3 Testing on Real Traces
We also tested SigFree over real traces. Due to privacy
concerns, we were unable to deploy SigFree in a public
web server to examine realtime web requests. To make
our test as realistic as possible, we deployed a client-side
proxy underneath a web browser. The proxy recorded
a normal user’s http requests during his/her daily Inter-
net surﬁng. During a one-week period, more than ten
of our lab members installed the proxy and helped col-
lect totally 18,569 HTTP requests. The requests include
manually typed urls, clicks through various web sites,
searchings from search engines such as Google and Ya-
hoo, secure logins to email servers and bank servers, and
HTTPs requests. In this way, we believe our data set is
diverse enough, not worse than that we might have got
if we install SigFree in a single web server that provides
only limited Internet services.
Our test based on the above real traces did not yield an
alarm. This output is of no surprise because our normal
web requests do not contain code.
6.4 Performance Evaluation
To evaluate the performance of SigFree, we imple-
mented a proxy-based SigFree prototype using the C pro-
gramming language in Win32 environment. SigFree was
compiled with Borland C++ version 5.5.1 at optimiza-
tion level O2. The prototype implementation was hosted
in a Windows 2003 server with Intel Pentium 4, 3.2GHz
CPU and 1G MB memory.
The proxy-based SigFree prototype accepts and ana-
lyzes all incoming requests from clients. The client test-
ing trafﬁcs were generated by Jef Poskanzer’s http load
program 3 from a Linux desktop PC with Intel Pentium 4
2.5GHz CPU connected to the Windows server via a 100
Mbps LAN switch. We modiﬁed the original http load
program so that clients can send code-injected data re-
quests.
For the requests which SigFree identiﬁes as normal,
SigFree forwards them to the web server, Apache HTTP
Server 2.0.54, hosted in a Linux server with dual Intel
Xeon 1.8G CPUs. Clients send requests from a pre-
deﬁned URL list. The documents referred in the URL
list are stored in the web server. In addition, the proto-
type implementation uses a time-to-live based cache to
reduce redundant HTTP connections and data transfers.
Rather than testing the absolute performance over-
head of SigFree, we consider it more meaningful mea-
suring the impact of SigFree on the normal web ser-
vices. Hence, we measured the average response la-
tency (which is also an indication of throughput although
we did not directly measure throughput) of the connec-
tions by running http load for 1000 fetches. Figure 12(a)
shows that when there are no buffer overﬂow attacks, the
average response time in the system with SigFree is only
slightly higher than the system without SigFree. This in-
dicates that, despite the connection and ASCII checking
overheads, the proxy-based implementation does not af-
fect the overall latency signiﬁcantly.
Figure 12(b) shows the average latency of connections
as a function of the percentage of attacking trafﬁcs. We
used CodeRed as the attacking data. Only successful
connections were used to calculate the average latency;
that is, the latencies of attacking connections were not
counted. This is because what we care is the impact of
attack requests on normal requests. We observe that the
average latency increases slightly worse than linear when
the percentage of malicious attacks increases. Generally,
Scheme 1 is about 20% faster than Scheme 2.
Overall, our experimental results from the prototype
implementation show that SigFree has reasonably low
performance overhead. Especially when the fraction of
attack messages is small (say < 10%), the additional la-
tency caused by SigFree is almost negligible.
236
Security ’06: 15th USENIX Security Symposium
USENIX Association
70
60
50
40
30
20
10
)
t
c
e
n
n
o
c
/
c
e
s
m
(
y
c
n
e
t
a
L
0
0
10
Apache
Apache + SigFree
20
30
Parallel connections
40
50
)
t
c
e
n
n
o
c
/
c
e
s
m
(
y
c
n
e
t
a
L
200
180
160
140
120
100
80
60
40
20
0
0
60
70
n=5 Scheme 1
n=5 Scheme 2
n=35 Scheme 1
n=35 Scheme 2
n=70 Scheme 1
n=70 Scheme 2
20
30
10
Percentage of code-injected packets (%)
50