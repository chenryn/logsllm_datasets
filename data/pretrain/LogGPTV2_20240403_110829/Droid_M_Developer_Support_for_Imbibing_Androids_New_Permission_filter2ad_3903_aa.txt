# Droid M+: Developer Support for Imbibing Android's New Permission Model

## Authors
- Ioannis Gasparis, University of California, Riverside (PI: EMAIL)
- Azeem Aqil, University of California, Riverside (PI: EMAIL)
- Zhiyun Qian, University of California, Riverside (PI: EMAIL)
- Chengyu Song, University of California, Riverside (PI: EMAIL)
- Srikanth V. Krishnamurthy, University of California, Riverside (PI: EMAIL)
- Rajiv Gupta, University of California, Riverside (PI: EMAIL)
- Edward Colbert, U.S. Army Research Lab (PI: EMAIL)

## Abstract
In Android 6.0, Google overhauled its long-criticized permission model to prompt users at runtime and allow them to dynamically revoke granted permissions. To guide developers towards this new model and enhance user experience, Google provided guidelines on formulating permission requests, educating users on the necessity of permissions, and providing feedback when permissions are denied. This paper presents, to the best of our knowledge, the first measurement study on the adoption of Android’s new permission model in recently updated apps from the official Google Play Store. Our findings indicate that (1) most apps have not yet transitioned to the new model, and (2) among those that have, many do not adhere to Google’s guidelines. We attribute this unsatisfactory state to the lack of automated transformation tools. Through an IRB-approved study, we found that developers felt migrating their apps to the new model required significant effort. To address this, we developed Droid M+, a system that helps developers easily retrofit their legacy code to support the new permission model and comply with Google’s guidelines. We believe Droid M+ is a significant step towards preserving user privacy and improving user experience.

## Keywords
Android permissions, mobile privacy, mobile security

## ACM Reference Format
Ioannis Gasparis, Azeem Aqil, Zhiyun Qian, Chengyu Song, Srikanth V. Krishnamurthy, Rajiv Gupta, and Edward Colbert. 2018. Droid M+: Developer Support for Imbibing Android’s New Permission Model. In ASIA CCS ’18: 2018 ACM Asia Conference on Computer and Communications Security, June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3196494.3196533

ACM acknowledges that this contribution was authored or co-authored by an employee, contractor, or affiliate of the United States government. As such, the United States government retains a nonexclusive, royalty-free right to publish or reproduce this article, or to allow others to do so, for government purposes only.

ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06. . . $15.00
https://doi.org/10.1145/3196494.3196533

## Introduction
Application sandboxing and the permission system are essential components of modern mobile operating systems, designed to protect users' personal data and privacy. Prior to Android 6.0, Android used the ask-on-install permission model, where (1) developers declare required permissions in the app’s manifest file, (2) at installation time, Android prompts users to review the requested permissions, and (3) users either grant all requested permissions or refuse the installation. Numerous studies have highlighted the problems with this design [15, 22, 47].

The old Android permission model was criticized for being complex and unintuitive. Over the years, the number of system permissions increased from 75 (API level 1) to 138 (API level 25) [45]. Without a clear understanding of the permission model, developers often requested more permissions than necessary [14, 22]. For example, one-third of the 940 apps analyzed in [14] were over-privileged. Requesting unnecessary permissions poses a significant security risk, as attackers can exploit these permissions to compromise user privacy, such as leaking personal photos over the internet. On the user side, few people carefully review the requested permissions, and even fewer correctly understand how permissions map to sensitive resources [15, 26].

Another issue with the old permission model was the lack of flexibility; users could neither grant a subset of all requested permissions nor revoke granted permissions. A recent user study [47] showed that 80% of participants would have preferred to decline at least one requested permission, and one-third of the requested accesses to sensitive resources, because they believed (1) the requested permission was not necessary for the app’s functions, or (2) it involved information they were uncomfortable sharing. The lack of flexibility led users to either ignore permission warnings or avoid using the app [15]. For instance, a recent survey [31] of over 400 adults found that over 60% decided not to install an app due to excessive permission requirements. Irrevocable permissions also raised privacy concerns, as apps could retain access to sensitive sensors (e.g., microphone) while running in the background [25].

Wijesekara et al. [47] proposed using Nissenbaum’s theory of context integrity [30] as a guideline to determine whether accesses to protected resources would violate users’ privacy. Under this guideline, the ask-on-install model lacks sufficient contextual information, making it difficult for users to determine why a permission is needed and if the app would violate their privacy [15]. They also found that even if permissions are requested during runtime, the lack of proper mechanisms to explain the necessity of a particular resource could lead to incorrect perceptions and reduced willingness to grant the permission.

In Android 6.0 (Marshmallow), Google revamped the Android permission model to address these issues. Specifically, Android no longer prompts users to grant permissions during installation; instead, normal permissions (i.e., those with minimal risk to users’ privacy and security) are automatically granted, and dangerous permissions are requested at runtime. To streamline the number of requests, dangerous permissions are grouped, and granting one permission in a group automatically grants the others. Google also added an API to check if further explanation is needed. Finally, users can revoke granted permissions at any time via system settings. We discuss the new permission model in detail in § 2, noting that it carries over to later versions of Android.

While the new permission model significantly improves user control over privacy and makes apps more appealing, we find that only a few apps have effectively migrated to the new model. To verify if this is a general issue, we conducted, to the best of our knowledge, the first systematic measurement study and an IRB-approved developer survey to answer the following questions: (a) How many newly released apps have adopted the new permission model? (b) For those that have not, what are the likely reasons? and (c) For those that have adopted, how well do they adhere to Google’s guidelines [17]?

Our analysis shows that, despite a 26.7% market share of Android M, very few apps have adopted the new model, and even those that have done so have significant shortcomings. We attribute this unsatisfactory state to the lack of a good development tool. Migrating to the new model requires non-trivial changes to existing code, especially if developers aim to follow Google’s guidelines, such as properly checking if a permission was revoked, educating users in-context on why a permission is needed, and handling instances where a permission request is denied. Our developer survey revealed that a majority of respondents have not migrated their apps to Android M due to the lack of an easy-to-use tool to facilitate the transition.

As a key contribution, we developed Droid M+, a toolset to help developers retrofit their legacy code to the new permission model. Given the source code of an Android app, Droid M+ will (1) identify different functionalities (i.e., contexts) of the app, (2) identify permissions required for each functionality, (3) automatically populate each functionality with annotations for developers to review and provide justifications, (4) automatically translate annotations into real Java code, and (5) provide a default callback function to handle denied requests. In summary, Droid M+ allows developers to easily adapt their apps to support revocable permissions and adhere to Google’s guidelines with minimal changes to their existing code. Without Droid M+, handling asynchronous `requestPermissions()` calls and placing permission checks properly (asking only when necessary) requires significant refactoring of the code.

In summary, this paper makes the following key contributions:
- We performed an in-depth measurement study of 4,743 top free apps from the Google Play Store to examine the adoption of the new Android permission model. Our study shows that only 62.6% of the apps have migrated to the new model. Of these, nearly 45% do not follow Google’s guidelines, and about 2.9% refuse to run if a permission request is denied.
- We conducted a developer survey, which indicates that about 54% of responding developers have not migrated their code to the new model because they find it challenging, and there is no helper tool available to facilitate the transition.
- We designed, implemented, and evaluated Droid M+, a toolset to help developers migrate to Android’s new permission model and adhere to Google’s guidelines.

## Background and Motivation
### The Android M Permission Model
Android uses application sandboxing to isolate apps and protect users’ privacy. Access to sensitive sensors, users’ personal data, and other services/apps is mediated by the Android permission system. To request authorizations, an app must declare the required permissions in its “manifest file.” Normal permissions (i.e., permissions with minimal risk to the user’s privacy or security) are automatically granted at installation. Android prompts the user when an app seeks to access a resource guarded by a dangerous permission. Users can then choose from three options: (1) grant the permission, (2) deny the request, or (3) for a previously denied permission, a chat box is provided to automatically deny all future requests. If the user denies a permission request, Android M allows the app to either continue running with limited functionality or completely disable its functionalities. Dangerous permissions are grouped into categories such as calendar, camera, contacts, location, microphone, phone, sensors, SMS, and storage. If one permission in a group is granted, the remaining permissions in the same group are automatically granted. Android M also allows users to modify the permissions granted to apps via system settings. Note that users can also revoke permissions for legacy apps (API level < 23); in such cases, the platform disables the APIs guarded by the permission, making them no-ops, which may return an empty result or a default error.

### Steps for Migration
To provide revocable permissions, developers should update their apps via the following steps (Fig. 1):
- At each instance when an app needs to invoke APIs requiring a permission, the developer should insert a call to explicitly check if the permission is granted. This is critical because users may revoke granted permissions at any time, even for legacy apps. Developers should also educate users in-context on why a permission is needed and handle instances where a permission request is denied.

## Analyzing Android M Adoption
Next, we present (a) our in-depth measurement study on the adoption of Android M’s new permission model and (b) our developer survey to offer possible explanations for the findings from the study.

### A Motivating Example
As a motivating example, we consider the app Any.do [5], one of the most popular to-do apps on Google Play (checked in November 2016). This app requires access to the microphone, location, contacts, calendar, device identifier, and local storage. It is unclear why a to-do app needs all these permissions, and the app description page on Google Play offers no proper information. Although the app targets the new permission model, it does not adhere to Google’s guidelines. Specifically, when the app is first launched, all permissions are requested upfront (Fig. 2). At this time, it is unclear why these permissions are required, and no justifications are offered, even though the permissions are legitimately used. This motivates us to perform an in-depth measurement study on how top apps on the Google Play Store adopt Android M’s permission model.

### Measurement Tool
We designed and implemented a novel tool, the Revocable Permission Analyzer, to experimentally quantify, via different metrics, how existing apps are developed using the new permission model of Android M. The Analyzer first uses apktool [7] to decompile and decode the APK’s resources, including the manifest file and the UI XML file. It then uses androguard [3] to generate the call graph of the APK. Using the call graph, the Analyzer looks for invocations of `checkSelfPermission`, `requestPermissions`, `shouldShowRequestPermissionRationale`, and `onRequestPermissionsResult`. By focusing on these API calls, it examines (1) whether the app is requesting and checking for dangerous permissions, (2) whether the app shows a rationale for requesting the permission, and (3) what it does after the user responds to the permission request.

Specifically, to collect permissions requested upfront, the Revocable Permission Analyzer checks the main “Activity” of a given app (i.e., `onCreate`, `onStart`, and `onResume`) and looks for invocations of `requestPermissions()` in the call graph rooted by the main activities. Any permission not asked upfront is considered as being asked in-context. To check if customized messages are included to justify requested permissions, the Analyzer looks for the invocation of `shouldShowRequestPermissionRationale()`. This API returns whether a customized message needs to be shown; if so, the app can display a message to the user and then call `requestPermissions()`. If `shouldShowRequestPermissionRationale()` is not invoked, it strongly indicates that no customized message (education) is included. When customized messages are shown, we look up the message from the `strings.xml` resource file. Recall that Google’s guidelines (§ 2) suggest that only critical and obvious permissions should be asked upfront, and developers should educate users in-context on why a permission is needed.