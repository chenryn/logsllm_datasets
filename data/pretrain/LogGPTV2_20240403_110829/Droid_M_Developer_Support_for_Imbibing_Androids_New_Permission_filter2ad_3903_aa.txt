title:Droid M+: Developer Support for Imbibing Android's New Permission
Model
author:Ioannis Gasparis and
Azeem Aqil and
Zhiyun Qian and
Chengyu Song and
Srikanth V. Krishnamurthy and
Rajiv Gupta and
Edward Colbert
Droid M+: Developer Support for Imbibing Android’s New
Permission Model
Ioannis Gasparis
University of California, Riverside
PI:EMAIL
Chengyu Song
University of California, Riverside
PI:EMAIL
Azeem Aqil
Zhiyun Qian
University of California, Riverside
University of California, Riverside
PI:EMAIL
PI:EMAIL
Srikanth V. Krishnamurthy
University of California, Riverside
PI:EMAIL
Edward Colbert
U.S. Army Research Lab
PI:EMAIL
Rajiv Gupta
University of California, Riverside
PI:EMAIL
ABSTRACT
In Android 6.0, Google revamped its long criticized permission
model to prompt the user during runtime, and allow her to dynam-
ically revoke granted permissions. Towards steering developers to
this new model and improve user experience, Google also provides
guidelines on (a) how permission requests should be formulated (b)
how to educate users on why a permission is needed and (c) how
to provide feedback when a permission is denied. In this paper we
perform, to the best of our knowledge, the first measurement study
on the adoption of Android’s new model on recently updated apps
from the official Google Play Store. We find that, unfortunately, (1)
most apps have not been migrated to this new model and (2) for
those that do support the model, many do not adhere to Google’s
guidelines. We attribute this unsatisfying status quo to the lack of
automated transformation tools that can help developers refactor
their code; via an IRB approved study we find that developers felt
that there was a non-trivial effort involved in migrating their apps
to the new model. Towards solving this problem, we develop Droid
M+, a system that helps developers to easily retrofit their legacy
code to support the new permission model and adhere to Google’s
guidelines. We believe that Droid M+ offers a significant step in
preserving user privacy and improving user experience.
KEYWORDS
android permissions; mobile privacy; mobile security
ACM Reference Format:
Ioannis Gasparis, Azeem Aqil, Zhiyun Qian, Chengyu Song, Srikanth V. Kr-
ishnamurthy, Rajiv Gupta, and Edward Colbert. 2018. Droid M+: Developer
Support for Imbibing Android’s New Permission Model. In ASIA CCS ’18:
2018 ACM Asia Conference on Computer and Communications Security,
June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY, USA,
12 pages. https://doi.org/10.1145/3196494.3196533
ACM acknowledges that this contribution was authored or co-authored by an employee,
contractor, or affiliate of the United States government. As such, the United States
government retains a nonexclusive, royalty-free right to publish or reproduce this article,
or to allow others to do so, for government purposes only.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06. . . $15.00
https://doi.org/10.1145/3196494.3196533
INTRODUCTION
1
Application sandboxing and the permission system are key compo-
nents of modern mobile operating systems for protecting the users’
personal data and privacy. Prior to Android 6.0, Android used the
ask-on-install permission model: (1) developers declare a set of
required permissions in the app’s manifest file, (2) at installation
time, Android asks users to review the requested permissions and,
then (3) users either grant all the requested permissions or refuse the
installation. Many prior studies have shown the problems with this
design (e.g., [15, 22, 47]).
The first frequently criticized aspect of the old Android permis-
sion model is that it is complex and unintuitive. Over the years, the
number of system permissions have increased from 75 (API level 1)
to 138 (API level 25) [45]. Without a good understanding of the per-
mission model, developers tended to ask for more permissions than
needed [14, 22]. For example, one-third of the 940 apps analyzed
in [14] were over privileged. Requesting unnecessary permissions
is a big security problem since attackers can leverage a multitude
of combinations of these permissions to compromise user privacy
(e.g., leaking personal photos over the Internet). On the user side,
due to the same problem, few people are likely to carefully review
the requested permissions and even fewer will correctly understand
how permissions are mapped to sensitive resources [15, 26].
The second problem with the old permission model is the lack
of flexibility; users can neither grant a subset of all requested per-
missions, nor revoke granted permissions. A recent user study [47]
showed that 80% of the participants would have preferred to decline
at least one requested permission and one-third of the requested
accesses to sensitive resources because of the belief that (1) the
requested permission did not pertain to the apps’ functions; or (2)
it involved information that they were uncomfortable sharing. The
lack of such flexibility has also led Android users to either ignore
the permission warnings or to not use the app [15]. For instance, a
recent survey [31] of over 400 adults showed that over 60% of the
participants decided not to install an app because it required many
permissions. Irrevocable permissions also pose privacy concerns
to users as apps can retain their access to sensitive sensors (e.g.,
microphone) while running in the background [25].
Wijesekara et al. [47] proposed using Nissenbaum’s theory of
context integrity [30] as a guideline to determine whether accesses
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea765to protected resources would violate users’ privacy. Under this guide-
line, the ask-on-install model clearly lacks enough contextual infor-
mation which makes it very difficult for normal users to determine
why a permission is needed and if the app would violate their pri-
vacy [15]. Moreover, they also found that even if permissions are
requested during runtime, the lack of proper mechanisms to explain
why a particular resource was necessary could also lead to incorrect
perceptions and less willingness to grant the permission.
In Android 6.0 or Android M(arshmallow), Google revamped the
Android permission model to solve the aforementioned problems.
Specifically, Android no longer promotes users to grant permissions
during install-time; instead, normal permissions (i.e., no great risk to
users’ privacy and security) are automatically granted and dangerous
permissions are requested during runtime. To further streamline the
number of requests, dangerous permissions are put into permission
groups and granting one dangerous permission would automatically
grant the others in the same group. To help developers convey to
users why a permission is needed, Google also added an API to
check whether further explanation may be needed. Finally, users can
revoke a granted permission at anytime using the system settings.
We discuss the new permission model in detail in § 2; note that the
permission model carries over to later versions of Android.
While the new permission model significantly improves (com-
pared to the old model) user control over privacy and in making
apps more appealing for adoption (recall that asking permissions at
install-time may affect users’ decisions on installing an app), we find
that only a few apps have effectively migrated to the new permission
model. To verify whether this is a general issue for the entire Google
Play Store, we conduct, to the best of our knowledge, the first sys-
tematic measurement study and an IRB approved developer survey
towards answering the following questions: (a) How many newly
released apps have adopted the new permission model? (b) For those
that have not, what are the likely reasons? and, (c) For those that
have adopted, how well do they adhere to Google’s guidelines [17]?
Our analysis results show that, despite a 26.7% market share of
Android M, (i) very few of the apps have adopted the new model and,
(ii) even those apps that have done so, have significant shortcomings.
We attribute one cause for this unsatisfying status quo to be the lack
of a good development tool. In particular, to migrate to the new
model, developers have to make non-trivial changes to their existing
code. This is especially true if they intend to follow Google’s guide-
lines, i.e., properly checking if a permission was revoked, educating
a user in-context on why a permission is needed, and properly han-
dling instances where a permission request is denied. We conduct
a developer survey wherein a majority of the respondents say that
they have not migrated their apps to Android M because of the lack
of an easy-to-use tool to help to migrate to the new model.
As a key contribution, we develop such a tool set, Droid M+, to
help developers to retrofit their legacy code to the new permission
model. Given the source code of an Android app, our tool will (1)
identify different functionalities (i.e., context) of the app; (2) identify
permissions that are required for each functionality; (3) automati-
cally populate the entry of each functionality with an annotation that
allows developers to review the requested permissions and provide
corresponding justifications; (4) automatically translate the annota-
tion into real Java code; and (5) provide a default callback function
to handle denied requests. In summary, Droid M+ allows developers
to easily morph their app(s) to support revocable permissions and
adhere to Google’s guidelines, with minimal changes to their exist-
ing code. Without Droid M+, it is currently a challenge to handle
the asynchronous requestPermissions() calls, as the code after
the check still executes. To place permission checks properly (ask
only when necessary), it requires significant refactoring of the code.
Our evaluations show that Droid M+ can facilitate easy permission
revocations as intended by Android M, hiding tedious details from
the developers.
In summary, this paper makes these key contributions:
• We perform an in depth measurement study of 4743 top free apps
from the Google Play Store and examine the adoption of the new
Android permission model. Our study shows that only 62.6% of
the apps have migrated to the new model. Of these, nearly 45% of
the apps do not follow the Google guidelines. Finally, about 2.9%
of them refuse to run if a permission request is denied.
• We conduct a developer survey which indicates that about 54 %
of the responding developers have not migrated their code to the
new model because they feel it is hard, and there is no helper tool
available to facilitate such a transition.
• We design, implement and evaluate Droid M+, a tool set to help
developers migrate to Android’s new permission model and adhere
to Google’s guidelines.
2 BACKGROUND AND MOTIVATION
The Android M Permission Model: Android uses application sand-
boxing to isolate apps and protect users’ privacy. Accesses to sensi-
tive sensors, users’ personal data, and other services/apps are medi-
ated by the Android permission system. To request authorizations,
an app must declare the required permissions in its “manifest file”.
Normal permissions (i.e., permissions with no great risk to the user’s
privacy or security) are automatically granted at install. Android will
prompt the user when an app seeks to access a resource guarded by a
dangerous permission. Users can then choose from three options: (1)
grant the permission and the app will retain access to the resource;
(2) deny this particular request; or, (3) for a permission that has been
previously denied, a chat box is provided using which, automatically
deny all future requests. If the user denies a permission request,
Android M allows the app to either continue running with limited
functionality or completely disables its functionalities. Dangerous
permissions are put into permission groups viz., calender, camera,
contacts, location, microphone, phone, sensors, sms, and storage.
If one permission in a permission group is granted, the remaining
permissions in the same group are taken to be automatically granted.
Android M also allows the user to modify the permissions granted to
apps using system settings. Note that a user can also revoke permis-
sions for legacy apps (API level < 23); in such cases, the platform
will disable the APIs guarded by the permission by making them
no-ops, which may return an empty result or a default error.
Steps for Migration: To provide revocable permissions, developers
should update their apps via the following steps (Fig. 1):
• At each instance when an app needs to invoke API(s) that require a
permission, the developer should insert a call to explicitly check if
the permission is granted. This is critical because users may revoke
granted permissions at anytime, even for legacy apps. Developers
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea7663 ANALYZING ANDROID M ADOPTION
Next, we present (a) our in-depth measurement study on the adoption
of Android M’s new permission model and (b) our developer survey
to offer possible explanations to the findings from the study.
3.1 A Motivating Example
As a motivating example, we consider an app Any.do [5], one of
the most popular to-do apps on Google Play (checked in November
2016). This app requires access to the microphone, location, contacts,
calendar, the device identifier, and local storage. It is unclear why a
to-do app needs all these permissions. The app description page on
Google Play offers no proper information either. Further, although
this app does target the new permission model, the way it requests
permissions does not adhere to Google’s guidelines. Specifically,
when the app is first launched, all the permissions are requested
up-front (Fig. 2). At this time, it is unclear why these permissions
are required, and no justifications are offered (even though the per-
missions are legitimately used). This motivates us to perform an in
depth measurement study on how top apps on the Google Play Store
adopt Android M’s permission model.
3.2 Measurement Tool
We design and implement a novel tool, the Revocable Permission
Analyzer, to experimentally quantify via different metrics, the way
existing apps are developed using the new permission model of
Android M. The Analyzer first uses apktool [7] to decompile and
decode the APK’s resources including the manifest file and the UI
XML file. It then uses androguard [3] to generate the call graph of
the APK. Using the call graph, the Analyzer looks for invocations of
checkSelfPermission, requestPermissions, shouldShowRequestPer-
missionRationale, and onRequestPermissionsResult. By focusing on
these API calls, it examines (1) whether the app is requesting and
checking for dangerous permissions, (2) whether the app shows a
rationale for requesting the permission, and (3) what it does after the
user responds to the permission request.
Specifically, to collect permissions requested up-front, Revocable
Permission Analyzer checks the main “Activity” of a given app
(i.e., onCreate, onStart, and onResume) and looks for invocation of
requestPermissions() in the call graph rooted by the main activities.
Any permission not asked upfront, is considered as being asked
in-context. To check if customized messages are included to justify
requested permissions, Revocable Permission Analyzer looks for
the invocation of shouldShowRequestPermissionRationale(). This
API returns whether a customized message needs to be shown; if
so, the app can display a message to the user and then call the
requestPermissions(). If shouldShowRequestPermissionRationale()
is not invoked, then it is a strong indication that no customized
message (education) is included. When customized messages are
shown, we look up the message from the strings.xml resource file.
Recall that Google’s guidelines (§ 2) suggest that only critical and
obvious permissions should be asked up-front and developers should