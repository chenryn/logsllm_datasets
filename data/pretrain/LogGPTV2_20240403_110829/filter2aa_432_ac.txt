何提供更方便的服务。这些程序一般由软硬件制造商提供开发工具并带有大量实用程序，
尽量减少应用时的开发。
关于客户机／服务器系统开发变化如表 1-3：
表 1-3  客户机／服务器系统开发变化
目前的 C/S 系统
下一步的 C/S 系统
将来的 C/S 系统
客户机
主要用 CASE 工具和程
序设计语言开发
主要用软部件开发
主要用软部件来
服务器
主要用程序设计语言开发
主要用程序设计语言
开发
主要用软部件或够
家 开 发 （ 基 于 分
布）
1.4  UNIX 的历史
“ One half of the world must sweat and goarn that
      the other half may dream.”
                                        ----Henry Wadworth Longfellow
1.4.1  Unix 诞生前的故事
我们先谈谈 UNIX 的创世之初，有两点需要牢牢把握：
1．虽然 UNIX 的许多部分和其实现过程是创造性的，但其几个重要的思想都可以追
溯到早期的操作系统发展。
2．如果不是 Ken Thompson，如果不是他心灵手巧，擅长摆弄当时那些身边触手可及
的工具，UNIX 是不可能被写出来的。那是 1968 年，Ken Thompson 和同在贝尔实验室计
算机研究小组的同事们一起进行关于 MULTICS 项目的研究工作。MULTICS 是一个误入歧
途而又辉煌灿烂的计算系统。她提供了非常复杂的功能，同时消耗大量的计算资源。她太
大而且太慢，研究人员们不得不一开始就缩减其初始设，进行简化实现。尽管如此，几个
可工作的 MULTICS 实现还是完成了，提供了非常好的计算环境。在贝尔实验室的那个是
- 8 -
Linux 网络编程
在一台模拟 GE635 的 GE645 上完成的。系统提供分时服务，但她主要是面向批处理的，
其环境笨拙且不友好。Ken 和他的伙伴们（特别是 Dennis Ritchie 和 Joseph Ossanna）不想
放弃 MULTICS 提供的舒适环境，于是他们开始向 AT&T 的管理部门游说，希望能获得一
个交互式平台，诸如 DEC-10，并在其上建造他们自己的操作系统。DEC-10 是 DEC 公司
（Digtal Equipment Corp.）推出的一系列机种的一种。该机有一个非常灵活的交互式分时
系统。很不幸，与那个时代的许多分时平台一样，DEC-10 非常昂贵。
我们应该庆幸，Ken 的请求被拒绝了。这样的情性又发生了几次，这对 Ken 来说是太
不幸了。由于 MULTICS 的失败，AT&T 管理当局被 Ken 的计划打动，他们也没有兴趣来
投资另一个仅仅是在不同的硬件上设计一个看起来与 MULTICS 一样的操作系统。
与此同时，Ken 对一个成为星际旅行的游戏非常有兴趣。该程序模拟太阳系的几个主
要的星体和一艘可在不同对方着陆的飞船。Ken 将其安装在 GE 系统上，GE 系统忽快忽慢
的响应时间使 Ken 大为失望。而且根据后来 Dennis 的说法，在 GE 系统上运行一次该游戏
需要 75 美元，太贵了。Ken 和 Dennis 后来找到了现在非常有名的“ little-used PDP-7 sitting in
a corner”，他们用 GE 系统生成了可在该机器运行的程序代码。
1.4.2  UNIX 的诞生
有了星际旅行，Ken 有了正当的理由去实现他曾在 MULTICS 计划中设计和模拟的理
论上的文件系统。很自然，一台有用的机器需要的不仅仅是一个文件系统。Ken 和他的朋
友还完成了第一个命令解释器（Shell）和一些简单的文件处理工具。开始时，他们用 GE
系统来为 PDP-7 进行交叉编译。很快，他们写好了汇编器（assembler），系统已经开始自
支持了。这时的系统已经有点象 UNIX 了（如用 fork()来支持多任务）。文件系统与现在的
文件系统相对相似。它使用 i-节点，而且有特殊的文件类型来支持目录和设备。那台 PDP-
7 可同时支持二个用户。
MULTICS 其实是代表“ MULTiplexed Information and Computing System”。1970 年，Brian
Kernighan 开玩笑称 Ken 的系统为“ UNICS”，代表“ UNiplexed Information and Computinig
System” ，毕竟与 Ken 的系统相比，MULTICS 过于庞大了。（某些人称 MULTICS 代表“ Many
Unnecessarily Large Tables In Core Simultaneously” 而 UNIX 则是裁剪了的 MULTICS。）不
久，UNICS 变成了 UNIX 而且被流传下来。
计算机研究小组并不对 PDP-7 十分满意。其一是它是借来的一台机器，更主要的是它
能力有限，不太可能提供计算服务。于是小组再次提交申请，这回是一台 PDP-11/20 来研
究文字处理。该申请与前一次的显著的区别是 PDP-10 的价格只是 DEC-10 的凤毛麟角。
由于这次的申请十分具体——一个文字处理系统，AT&T 的管理当局宽宏大量为他们购买
了 PDP-11。1970 年 UNIX 被移植到 PDP-11/20 上。那可不是一件轻而易举的事，整个系
统全是用汇编写的啊！小组又将汇编写的 roff（又称为 runoff，troff 的前身）从 PDP-7 移
植到 PDP-11 上。再加上一个编辑器就足以称为一个文字处理系统了。与此同时，贝尔实
验室的专利局正在寻找一个文字处理系统。他们选择了计算机研究小组的基于 UNIX 系统
的 PDP-11/20。贝尔实验室专利局成了 UNIX 的首家商业用户。这第一个系统有几点是很
值得注意的。跑 UNIX 的 PDP-11/20 没有存储保护。它仅有一个 0.5Mb 的磁盘。它同时支
持三个用户，分别完成编辑，排版，再加上计算机研究小组进行进一步的 UNIX 开发。该
系统的手册被标为“ First Edition”，日期为 1971 年 11 月。
第 1 章  概论
- 9 -
第二版于 1972 年发行，增添了管道的功能。该版本还加上了除汇编之外的编程语言
支持。特别值得一提的是 Ken 曾试图用 NB 语言来重写核心。NB 是由 B 语言（由 Ken 和
Dennis 设计）修改而来的。B 语言的前身是 BCPL，BCPL(Basic CPL)是 Martin Richards 于
1967 年在剑桥设计的。CPL（Combined Programming Language）则是 1963 年伦敦大学和
剑桥大学的合作项目。而 CPL 则颇受 Algol60（1960 设计）的设计思想影响。
所有这些语言在控制结构上都和 C 语言相似，不过 B 和 BCPL 都是“ 无类型” 的语言
（尽管有点用词不当），它们只支持按“ 字” 来访问内存。NB 演化为 C，而 C 则很快称为
新的工具和应用的首选语言。
参与 MULTICS（MULTICS 用 PL/I 书写）的经验告诉 Ken 和 Dennis，用高级语言来
写系统是合算的。由此，他们一直试图完成它。1973 年，C 语言加入了结构和全局变量。
与此同时，Ken 和 Dennis 成功地用 C 重写了 UNIX 核心。Shell 也被重写了。这增加系统
的健壮性，也使编程和调试变得容易了很多。那时，大约有 25 个 UNIX 系统。在贝尔实
验室内部成立了 UNIX 系统小组来进行内部维护工作。几家大学都和贝尔实验室签定协议，
获得了第四版的拷贝。协议主要是不泄露源码，在那时还没有许可证这回事。Ken 自己录
制磁带，不收任何费用。第一卷磁带由在纽约的哥伦比亚大学获得。
1974 年，Ken 和 Dennis 在 Communications of the ACM 上发表了论文介绍 UNIX 系统。
那时，Communications 是计算机科学的主要刊物，那篇文章在学术界引起了广泛的兴 趣。
第五版正式以“ 仅用于教育目的” 的方式向各大学提供。价格也只是名义上够磁带和手册
的费用。第五版在许多大学用作教学。这时 Ken 和 Dennis 仍在积极地投入 UNIX 的研究；
然而，他们继续避免提供支持的承诺。他们的小组被称为“ Research”（或在贝尔实验室内
部称为“ 1127”）。他们的机器被命名为 research。你可以通过 uucp 向他们发送 bug 报告，
打电话询问他们，甚至进他们的办公室和他们一起讨论 UNIX 的问题。通常他们总能在其
后的若干天内解决 bug。与 research 的在贝尔实验室的另一个小组被称为 PWB，Programmer's
Workbench。由 Rudd Canaday 领导的 PWB 小组支持一个用于大型软件开发的 UNIX 版本。
PWB 试图向那些并不对 UNIX 研究感兴趣的用户通过服务。他们做了大量的工作来强化了
UNIX 的核心，包括支持更多的用户。PWB 的两个非常有用的计划分别是 SCCS（源码控
制系统）和 RJE（使用 UNIX 作为实验室其它主机的前段）。PWB 最终注册为 PWB/UNIX1.0。
UNIX 替代了越来越多的 PDP-11 上的 DEC 公司的操作系统。尽管 UNIX 不被支持，但她
的魅力远胜于她的问题而吸引了许多的用户。除了系统本身的许多优点外，源码是可以获
得的，而且系统从整体上也是易于理解的。进行修改和扩充很容易。这使得 UNIX 与其同
类的其它操作系统大不一样。
1975 年，第六版 UNIX 系统发行了。这是第一个在贝尔实验室外广为流传的 UNIX 系
统。AT&T（通过 West Electric Co.）开始向商业和政府用户提供许可证。Mike Lesk 发行了
他的可移植 C 语言库。该库提供了可在任何支持 C 语言的机器上进行 I/O 的库例程。这是
用 C 书写可移植代码的重要的一步。Dennis 后来重写了该库并称其为标准 I/O 库（即所谓
stdio）。UNIX 用户们首次在纽约市进行会晤，有纽约城市大学的 Mel Ferentz 作东。当时
有 40 人参加。从此以后该会议每两年举行一次，会议是极不正式的。如果你想进行演讲，
你就举手，并且讲就行了。这些会议是极好的交流 bugs 报告，修改和软件的方式。每个人
都带上两卷磁带参加会议，一卷是给别人的，一卷是用来录制新东西的。
1977 年，Interactive Systems 公司称为首家向最终用户出售 UNIX 的公司。UNIX 终于
- 10 -
Linux 网络编程
成了产品。在同一时期有三个小组将 UNIX 移植到不同的机器上。Steve Johnson 和 Dennis
Ritchie 将 UNIX 移植到一台 Interdata 8/32 机器上。澳大利亚的 Wollongong 大学的 Richard
Miller 和同事们将 UNIX 移植到一台 Interdata 7/31 上。Tom Lyon 和其在普林斯顿（Princeton）
的助手们完成了到 VM/370 的移植。每次移植都干的十分漂亮。具体点，所有这三台机器
都与 PDP-11 有显著的差异。事实上，这正是问题之所在。许多操作系统都没有被设计为
能在多种机器上跑。类似地，许多机器又为了某种特定的操作系统而设计。例如，如果硬
件能完成进程之间的保护，操作系统利用这功能就很有意义了。
UNIX 很快被移植到其它类型的 PDP-11 上。每个都有些很有趣的功能且不断地加大了
UNIX 可支持硬件的复杂度（这些功能包括浮点处理器，可写微码，内存管理和保护，分
离的命令和数据空间等等）。然而，PDP-11 系列很明显地都是基于 16 位地址空间的，所有
的程序都实现于 64Kb 的大小。很滑稽的是这到促进了小程序的编写。有了支持合作进程
的管道以及 exec()之后，通过它们将几个小的应用连接一个大的应用。这是 UNIX 编程的
一个特点，也许我们要感谢 PDP-11 有限的地址空间。UNIX 被移植到 IBM 的 Series1 小型
机上（尽管有人认为这好比是将物质与反物质结合在一起）。Series1 有与 PDP-11 相同的字
大小，但它的字节是颠倒的。因此当系统初次启动时它打印出来的是“ NUXI” 而不是：
“ UNIX”。从那时起，“ NUXI” 问题就成了字节顺序问题的代名词。
1977 年，加利福尼亚伯克利分校（the University of California, Berkeley）的计算机科
学系开始发行他们的 Pascal 解释器。其中还包括了一些新的设备驱动程序，对核心的修改，
ex 编辑器，和一个比 V6 的 Shell 更好用的 Shell（“ Pascal Shell” ）。这就是所谓的 1BSD（1st
Berkeley Software Distribution）。
1.4.3  1979 –  UNIX 第七版
1979 年 UNIX 的第七版发行了。Version 7 包括了一个完整的 K&R C 编译器，它首次
包括了强制类型转换，联合和类型定义。系统还提供了一个更为复杂的 Shell（称为“ sh”
或“ Bourne shell”，取自它的作者之一，Stephen Bourne）。系统支持更大的文件。由于不
懈的努力移植的结果，核心更加鲁棒，系统有了更多的外设驱动程序。
第七版的程序员手册以达到了大约 400 页（仍然可以很合适地装在一卷里）。UNIX 的
其它读物则成为了第二和第三卷，大约各有 400 页。
在贝尔实验室，John Reiser 和 Tom London 将 V7 UNIX 移植到了 VAX 机上。这次移
植称为 UNIX32V。在某种程度上，VAX 是一个大一点的 PDP-11，按这样的理解移植工作
相对容易些。为了让 UNIX 快速移植和跑得快点，VAX 上的特殊硬件功能（换页）被忽略
了。虽然如此，由于 VAX 比 PDP-11 有了相当大的地址空间（4Gb），不带换页功能的 UNIX
仍旧在实验室里广为流传，且用了好一段时间。伯克利也获得了该版本并作为进一步研究
的基础。
Whitesmith 是第一个商业 C 编译器供应商。不幸的是由于在许可证问题上不够明确，
C 编译器的库函数不得不故意使用不兼容的函数名和参数规范。之后，C 语言的用户接口
（函数名）被裁决为不能拥有版权，现在 Whitesmith 的 C 与 UNIX 兼容了。
第 1 章  概论
- 11 -
1.4.4  UNIX 仅仅是历史吗?
UNIX 仅仅是历史吗? 不，UNIX 就在这。IDC（International Data Corporation）报导，
1985 年 UNIX 的市场大约价值$3.6 billion。全世界大约有 6%的预算是花在计算机上的。
根据 1987 年 12 月发行的 UNIX WORLD，该年度有大约$5.5 billion 花在 UNIX 系统上，
其中 10%是花在人员方面。IDC 估计该年度全世界有大约 8%的预算是用于计算机的。Novon
研究组宣称 1987 年间有大约 300,300 套 UNIX 系统出售。在使用的 UNIX 系统达 750,000
套。估计有 4.5 billion 的 UNIX 用户，而且用户花在 UNIX 上的机时高于 DOS 的。
预计 1990 年将销售的 UNIX 系统达 450,000 套，大部分是商业用途。到 1991 年, UNIX
市场将占整个计算机市场的 20%，而且还将不断地持续增涨。很清楚，UNIX 是成功的一
例。Dennis 和 Ken 曾说：“ UNIX 的成功并不是过分依赖于新的创意，更重要的是她是从
一组丰富的概念中精选并充分发掘的产物。” 这可能不是人们问 UNIX 为什么如此成功所
期望得到的答案。不管怎样，不断增涨的 UNIX 发行数目和 UNIX 持续的健康发展是惊人
的。
1.5  Linux 的发展
在迅猛发展的国际互联网上，有这样一群人，他们是一支由编程高手，业余计算机玩
家，黑客们组成的奇怪队伍，完全独立地开发出在功能上毫不逊色于微软的商业操作系统
的一个全新的免费 UNIX 操作系统——Linux（发音为 Li-nucks），成为网络上一支不可小
视的力量，以不到四年的微薄资格就成为微软的一个强劲对手。据很不精确的统计，全世
界使用 Linux 操作系统的人已经有数百万之多，而且绝大多数是在网络上使用的。而在中
国，随着 Internet 大潮的卷入，一批主要以高等院校的学生和 ISP（Internet Service Provider）
的技术人员组成的 Linux 爱好者队伍也已经蓬蓬勃勃地成长起来，可以说在中国，随着网
络的不断普及，免费而性能优异的 Linux 操作系统必将发挥出越来越大的作用。
Linux 是什么？按照 Linux 开发者的说法，Linux 是一个遵循 POSIX 标准的免费操作
系统，具有 BSD 和 SYSV 的扩展特性（表明其在外表和性能上同常见的 UNIX 非常相象，
但是所有系统核心代码已经全部被重新编写了）。它的版权所有者是芬兰籍的 Linus B.
Torvalds 先生（PI:EMAIL）和其他开发人员，并且遵循 GPL 声明（GNU
General Public License）。
Linux 可以在基于 Intel 386，486，Pentium，PentiumPro，Pentium MMX，PentiumII
型处理器以及 Cyrix，AMD 的兼容芯片（如 6x86，K6 等芯片）的个人计算机上运行，它
可以将一台普通的个人电脑立刻变成一台功能强劲的 UNIX 工作站，在 Linux 上可以运行
大多数 UNIX 程序：TEX，X Window 系统，GNU 的 C/C++编译器。它让用户端坐家中就
可以享受 UNIX 的全部威力。如今有越来越多的商业公司采用 Linux 作为操作系统，例如
科学工作者使用 Linux 来进行分布式计算，ISP 使用 Linux 配置 Intranet 服务器，电话拨号
服务器等网络服务器，CERN（西欧核子中心）采用 Linux 做物理数据处理，美国 98 年 1
月最卖座的影片《泰坦尼克号》的片中计算机动画的设计工作就是在 Linux 平台下进行的。
更有趣的是去年 InfoWorld 把年度最佳技术支持奖颁给了 Linux，给批评自由软件没有良好
服务的人好好地上了一课。越来越多的商业软件公司宣布支持 Linux。在国外的大学中很
- 12 -
Linux 网络编程
多教授用 Linux 来讲授操作系统原理和设计。当然对于大多数用户来说最重要的一点是，
现在我们可以在自己家中的计算机上进行 UNIX 编程，享受阅读操作系统的全部源代码的
乐趣了！
1.5.1  Linux 的发展历史
如果以人类的年龄来算的话，Linux 还是一个没有上学的七岁小娃娃。1991 年 8 月一
位来自芬兰赫尔辛基大学的年轻人 Linus Benedict Torvalds，对外发布了一套全新的操作系
统。事情的缘起是这样的：为了实习使用著名的计算机科学家 Andrew S. Tanenbaum 开发
的 Minix（一套功能简单，简单易懂的 UNIX 操作系统，可以在 8086 上运行，后来也支持
80386，在一些 PC 机平台上非常流行），Linus 购买了一台 486 微机，但是他发现 Minix 的
功能还很不完善，于是他决心自己写一个保护模式下的操作系统，这就是 Linux 的原型。
最开始的 Linux 是用汇编语言编写的。主要工作是用来处理 80386 保护模式
1991 年 10 月 5 日，Linus 发布了 Linux 的第一个“ 正式” 版本： 0.02 版，现在 Linus
可以运行 bash（GNU 的一个 UNIX shell 程序），GCC（GNU 的 C 编译器），它几乎还是什
么事情也做不了，但是它被设计成一个黑客的操作系统，主要的注意力被集中在系统核心
的开发工作上了，没有人去注意用户支持，文档工作，版本发布等等其他东西。
最开始的 Linux 版本被放置到一个 FTP 服务器上供大家自由下载，FTP 服务器的管理
员认为这是 Linus 的 Minix，因而就建了一个 Linux 目录来存放这些文件，于是 Linux 这个
名字就传开了，如今已经成了约定俗成的名称了。
然后这个娃娃操作系统就以两个星期出一次新的修正版本的速度迅速成长，在版本 0.03
之后 Linus 将版本号迅速提高到 0.10，这时候更多的人开始在这个系统上工作。在几次修
正之后 Linus 将版本号提高到 0.95，这表明他希望这个系统迅速成为一个“ 正式” 的操作
系统，这时候是 1992 年，但是直到一年半之后，Linux 的系统核心版本仍然是 0.99.p114，
已经非常接近 1.0 了。
Linux 终于在 1994 年的 3 月 14 日发布了它的第一个正式版本 1.0 版，而 Linux 的讨论
区也从原来的 comp.os.minix 中独立成为 alt.os.linux，后来又更名为 comp.os.Linux。这是
USENET 上有名的投票表决之一，有好几万用户参加了投票。后来由于使用者越来越多，
讨论区也越来越拥挤又不得不再细分成 comp.os.linux.*，如今已经有十几个讨论组了，这
还不把专门为 Redhat Linux 和 Debian Linux 设的讨论组计算在内。这个讨论组也是 USENET
上最热闹的讨论组之一，每天都有数以万计的文章发表。
目前 Linux 已经是一个完整的类 UNIX 操作系统了。其最新的稳定核心版本号为
2.2.11。
Linux 的吉祥物，是一只可爱的小企鹅（起因是因为 Linus 是芬兰人，因而挑选企鹅作
为吉祥物）。
说到这里，就不得不说一下同 Linux 密切相关的 GNU 了，如果没有 GNU，Linux 也
许不会发展得这么快，可是如果没有 Linux，GNU 也不会有如今这么巨大的影响力。
1.5.2  什么叫 GNU？
GNU 就是 GNU's Not Unix 的缩写，GNU 的创始人 Stallman 认为 UNIX 虽然不是最
第 1 章  概论
- 13 -
好的操作系统，但是至少不会太差，而他自信有能力把 UNIX 不足的地方加以改进，使它
成为一个优良的操作系统，就是名为 GNU 的一个同 UNIX 兼容的操作系统，并且开发这
个系统的目的就是为了让所有计算机用户都可以自由地获得这个系统。任何人都可以免费
地获得这个系统的源代码，并且可以相互自由拷贝。因而在使用 GNU 软件的时候我们可
以理直气壮地说我们使用的是正版软件。当然 GNU 也是有自己的版权声明的，就是它有
名的 Copyleft（相对于版权的英文 Copyright），就是用户获得 GNU 软件后可以自由使用和
修改，但是用户在散布 GNU 软件时，必须让下一个用户有获得源代码的权利并且必须告
知他这一点。这一条看似古怪的规定是为了防止有些别有用心的人或公司将 GNU 软件稍
加修改就去申请版权，说成是自己的产品。其目的就是要让 GNU 永远是免费和公开的。
GNU 是谁发起的？ GNU 是由自由软件基金会 （Free Software Foundation，FSF）的
董事长 Richard M. Stallman （RMS）于 1984 年发起的，如今已经有十几年的历史了。Stallman
本来是在美国麻省理工学院的人工智能实验室从事研究工作的研究员，同时也是世界上可
数的几个顶尖程序员之一，他的最著名的作品也是 GNU 的第一个软件就是 GNU Emacs，