title:BIND: A Fine-Grained Attestation Service for Secure Distributed
Systems
author:Elaine Shi and
Adrian Perrig and
Leendert van Doorn
BIND: A Fine-grained Attestation Service for
Secure Distributed Systems∗
Elaine Shi
Adrian Perrig
Carnegie Mellon University
Carnegie Mellon University
PI:EMAIL
PI:EMAIL
Leendert Van Doorn
IBM T.J. Watson Research Center
PI:EMAIL
Abstract
1 Introduction
In this paper, we propose BIND (Binding Instructions
aNd Data),1 a ﬁne-grained attestation service for secur-
ing distributed systems. Code attestation has recently re-
ceived considerable attention in trusted computing. How-
ever, current code attestation technology is relatively im-
mature. First, due to the great variability in software ver-
sions and conﬁgurations, veriﬁcation of the hash is difﬁcult.
Second, the time-of-use and time-of-attestation discrepancy
remains to be addressed, since the code may be correct at
the time of the attestation, but it may be compromised by
the time of use. The goal of BIND is to address these is-
sues and make code attestation more usable in securing dis-
tributed systems. BIND offers the following properties: 1)
BIND performs ﬁne-grained attestation. Instead of attest-
ing to the entire memory content, BIND attests only to the
piece of code we are concerned about. This greatly simpli-
ﬁes veriﬁcation. 2) BIND narrows the gap between time-of-
attestation and time-of-use. BIND measures a piece of code
immediately before it is executed and uses a sand-boxing
mechanism to protect the execution of the attested code. 3)
BIND ties the code attestation with the data that the code
produces, such that we can pinpoint what code has been
run to generate that data. In addition, by incorporating the
veriﬁcation of input data integrity into the attestation, BIND
offers transitive integrity veriﬁcation, i.e., through one sig-
nature, we can vouch for the entire chain of processes that
have performed transformations over a piece of data. BIND
offers a general solution toward establishing a trusted envi-
ronment for distributed system designers.
∗
This research was supported in part by CyLab at Carnegie Mellon un-
der grant DAAD19-02-1-0389 from the Army Research Ofﬁce, and grant
CAREER CNS-0347807 from NSF, and by gifts from IBM and Cisco. The
views and conclusions contained here are those of the authors and should
not be interpreted as necessarily representing the ofﬁcial policies or en-
dorsements, either express or implied, of ARO, Carnegie Mellon Univer-
sity, IBM, Cisco, NSF, or the U.S. Government or any of its agencies.
1The term BIND is also used in Domain Name Service (DNS) termi-
nology to stand for the Berkeley Internet Name Daemon. Here we use it in
a different context.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Securing distributed systems continues to be an impor-
tant research challenge. One hard problem in securing a
distributed system arises from the fact that a remote soft-
ware platform may be compromised and running malicious
code. In particular, a compromised platform may exhibit ar-
bitrarily malicious behavior. Such attacks are referred to as
Byzantine attacks [12] in the literature. The task of remote
code attestation then is to identify what software is running
on a remote platform and to detect a corrupted participant.
The Trusted Computing Group (TCG, formerly known
as TCPA) [40] and the Next Generation Secure Comput-
ing Base (NGSCB, formerly known as Palladium) [30] pro-
pose to use a secure coprocessor (Trusted Platform Mod-
ule) to bootstrap trust during system initialization. These
approaches compute a hash value of a loaded program be-
fore execution starts, the hash value can later be used by a
remote party to identify the system’s loaded code and con-
ﬁguration. Meanwhile, operating system architectures have
been built to incorporate this approach [35, 36].
Previously proposed TCG-style attestation mechanisms
have a coarse granularity, they verify the entire operating
system and loaded applications. However, operating sys-
tems often contain numerous modules that depend on the
installed hardware, as well as different versions of the same
software, or the same version compiled with different com-
piler settings, or patched with different patches. Even tiny
differences in the execution code result in a different hash
value. Thus, such coarse-grained attestation makes remote
veriﬁcation very difﬁcult. The Terra Virtual Machine Mon-
itor [16] alleviates this problem by decomposing attestable
entities into ﬁxed-sized blocks, and computing a separate
hash over each block. Apart from being coarse-grained,
TCG-style attestation only provides load-time guarantees,
as the attestation in TCG only reﬂects the memory state
right after the program is loaded. However, it may well be
that the software gets compromised at run time (e.g., buffer
overﬂows, format string vulnerabilities), which load-time
attestation cannot possibly detect.
In another line of work, researchers have proposed Copi-
lot [32], a run-time memory attestation mechanism. Here,
extra hardware periodically computes a hash of the mem-
ory to detect deviations from the expected contents, which
would indicate malicious code. However, Copilot checks
memory periodically, which may miss a short-lived intru-
sion. Meanwhile, Copilot also veriﬁes memory at a coarse
granularity much the same way as TCG-style attestation.
In this paper, our motivation is two-fold. First, we seek
to answer the question: how can code attestation aid us in
designing a distributed system? Second, we make an effort
at addressing the above mentioned issues regarding current
code attestation technology. We present the following con-
tributions: (1) We propose ﬁne-grained attestation, where
we attest only to the critical piece of code involved in pro-
ducing a certain output, instead of computing the checksum
across the entire software system. We achieve this through
an attestation annotation mechanism. We allow the pro-
grammer to identify and annotate the beginning and the end
of this critical piece of code; and every time this piece of
code is executed, our attestation service will be invoked. (2)
We narrow the gap between time-of-attestation and time-of-
use. We attest to the critical piece of code immediately be-
fore it is executed, and we use a sand-boxing mechanism
to protect the execution of the critical code. So even though
the rest of the software system may be compromised, it can-
not tamper with the execution of the critical code. (3) We
propose to tightly bind code integrity with data integrity. In
BIND (Binding Instructions aNd Data), an integrity proof
for a piece of code is cryptographically attached to the data
it has produced. This allows us to pinpoint what code has
been run to produce a certain piece of data. (4) We design a
construction where we incorporate the integrity proof of the
input data into the integrity statement of the code and out-
put data. This construction enables us to achieve transitive
integrity veriﬁcation with constant overhead, i.e., we only
need to verify one signature to guarantee the integrity of the
entire chain of processes that transformed the data.
We explain how to build BIND using current TCG and
microprocessor technology. To illustrate how BIND can be
used as a general solution toward establishing trust in real-
world distributed systems, we study a distributed computa-
tion application and the BGP routing protocol as examples.
2 Distributed System Security and Role of
Attestation
In this section, we seek to answer the question: how is
attestation useful in securing real distributed systems? We
begin by establishing a conceptual model for distributed
systems. We then examine the threat model and based on
that, we pinpoint the role of attestation in dealing with these
threats.
2.1 A Conceptual Model for Distributed Systems
We ﬁrst propose a conceptual model for distributed sys-
tems. We consider a distributed system to be comprised of
processes, data and intermediaries.
Process The process is a producer and consumer of data.
It represents protocol logic, i.e., the computations we per-
form on data. In the context of our discussion, a process
is a piece of software code which is to be attested. Note
that we borrow the term process from the operating system
literature, but use it in a different way.
Data Data represents information exchanged between the
processes. In our model, we distinguish between primitive
and derived data. Primitive data are external inputs to the
distributed system, whereas derived data are the output of
some process, i.e., derived data are generated by applying
protocol logic over some input data. In real-world systems,
primitive data usually exist in the form of human input, con-
ﬁguration ﬁles, external timing, etc.
Intermediary The intermediary represents the medium
over which data is communicated from/to a process, includ-
ing where data is stored outside the process. In reality, the
role of the intermediary is acted by the network that for-
wards the data between hosts, the operating system that dis-
patches the data to the process concerned. We also model
the local storage system as an intermediary, including the
hard drive or any part of RAM outside the process.
Local 
Configuration
Local 
Configuration
Local 
Configuration
 1.1.1.1
 2.2.2.2
3.3.3.3
Ping 3.3.3.3 -t 10
Dest = 3.3.3.3, 
TTL = 10
Dest = 3.3.3.3, 
TTL = 9
PA
PB
PC
Pong
Pong
Pong
Figure 1. Simple Ping: The Conceptual Model
for Distributed Protocols
To demonstrate the generality of this model, we consider
a simple ping-pong protocol (ICMP echo request and reply)
as an example (see Figure 1). We ﬁrst illustrate the proto-
col in descriptive language, then explain how this protocol
ﬁts into our model by identifying the processes, data, and
intermediaries. In this example, three hosts, A, B, and C,
each run a ping-pong process, namely PA, PB, and PC.
In reality, the ICMP protocol is part of the TCP/IP stack.
However, we are interested only in the critical piece of code
that performs transformation on ICMP data packets, not the
entire TCP/IP stack. Here our process is deﬁned to be that
piece of critical code. At host A, the user issues a ping com-
mand with destination=C, and TTL=10. The command is
dispatched to process PA, that sends it onto PB. PB decre-
ments the TTL by 1 and forwards it to PC. PC discovers
that it is the destination, and it replies with an echo mes-
sage. The echo is then passed by PB to PA. Finally the re-
sult is returned to the user. Applying our conceptual model
to the simple ping-pong protocol, the processes are PA, PB,
and PC which run on hosts A, B, and C, respectively. The
data includes the user command, the ping and pong mes-
sages as well as the local IP address of each host. Among
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
2
them, the human input command and the local IP addresses
are primitive data; the ping and pong messages are the de-
rived data. To reach a process, the data passes through the
network and the operating system on the a host. Therefore,
though they are not explicitly shown in the ﬁgure, the net-
work and the OS constitute the intermediaries in the simple
ping-pong protocol.
Our notion of process and data is related but not equiva-
lent to the concepts of code section and data section at the
binary executable level. For the ease of hash veriﬁcation,
we consider memory content that is immutable upon entry
to the critical code to be part of the process; this includes the
code section2 and possibly parts of the data section. Mem-
ory contents that are mutable upon entry to the process is
treated as data.
2.2 Security Problems in a Distributed System
Our goal is to eliminate software attacks, i.e., we assume
that a process is faulty because it is running some malicious
software code. We do not consider faults introduced by ma-
licious hardware such as a malicious processing unit.
In this context, we consider the Byzantine attacker
model [23] where a corrupted process or intermediary can
exhibit arbitrarily malicious behavior.
Malicious Intermediary and the Data Misuse Attack A
malicious intermediary may arbitrarily alter and inject pro-
tocol data. To prevent such attacks, we can employ crypto-
graphic constructions such as message authentication codes
or digital signatures. Through the use of cryptography, the
intermediary is rendered an outsider to the distributed pro-
tocol, for it does not possess the correct cryptographic keys
to modify or inject authenticated protocol data.
In spite of the cryptography mechanisms, a malicious in-
termediary is capable of the data misuse attack, where it
uses authenticated protocol data in a malicious way. For
instance, a malicious intermediary can perform a data sup-
pression attack by refusing to forward any data. She can
perform a replay attack by replaying data that have been
authenticated but are outdated. The malicious intermedi-
ary can also perform a substitution attack where he has two
pieces of authenticated data DA and DB; yet instead of
feeding the correct piece DA to some process, he feeds DB
instead.
Malicious Process and the Data Falsiﬁcation Attack In
a highly adversarial environment, an attacker may corrupt
one or more processes in the system. A malicious process
is capable of injecting bogus data into the distributed sys-
tem. We refer to this attack as the data falsiﬁcation attack.
Traditional cryptography does not defend against data fal-
siﬁcation attacks by a malicious process, for the malicious
process has the correct cryptographic keys to disguise itself
as a legitimate participant. For instance, in our simple ping-
pong protocol, a corrupted process can arbitrarily modify
2This assumes that no variable data exists in the code section.
the TTL ﬁeld in a ping message. Thus, if the simple ping-
pong protocol is intended for estimating network distances,
then the estimate will fail due to a TTL modiﬁcation attack.
2.3 Attestation Design Considerations
Fine-grained v.s. Coarse-grained Attestation We pro-
pose the concept of granularity in attestation. At one end
of the spectrum, we can do coarse-grained attestation over
entire software platforms; on the other hand, we can do
ﬁne-grained attestation by attesting to just a critical piece
of code, which becomes the notion of a process in our con-
ceptual model. The reason why we make an explicit distinc-
tion between the process and the intermediary is to enable
the notion of granularity in attestation; whereas in reality,
both the process and the intermediary can exist in the form
of software code on some computing device. In our con-
ceptual model, the boundary between the process and the
intermediary represents the boundary between what code is
being attested to and what is not.
The following arguments speak in favor of ﬁne-grained
attestation: 1) As we describe in Section 1, ﬁne-grained at-
testation simpliﬁes hash veriﬁcation. With ﬁne-grained at-
testation, we can also perform software upgrades more eas-
ily, since the expected hash for each process can be updated
independently. 2) Fine-grained attestation allows the dis-
tributed system architect to focus on the security of a criti-
cal module by singling it out from a potentially complicated
system.
On the other hand, with ﬁne-grained attestation, software
code omitted from the attestation is called an intermediary
in our conceptual model. Fine-grained attestation does not
address intermediary attacks. In Section 2.4, we examine
potential mechanisms that can be used to deal with interme-
diary attacks in this framework.
Desired Properties Regardless of the granularity of at-
testation, the following is a list of properties we would ul-
timately like to achieve, not saying that BIND achieves all
of them. 1) Ideally our attestation service should be free
of all software attacks; 2) Apart from making sure that the
process is correct at load-time, we would like to achieve in-
stantaneous detection of run-time compromises as well; 3)
The attestation service needs to be efﬁcient.
The BIND Endeavor BIND offers a ﬁne-grained attes-
tation service. Though BIND does not strictly guarantee
some of the above-mentioned properties, our goal is to see
how far we can push our limits under the constraints of
currently available microprocessor and trusted computing
technology.
In Section 3, we detail the properties BIND
achieves.
2.4 Using Fine-grained Attestation to Secure Dis-
tributed Systems
Before getting into the details of BIND, we address the
following question: suppose we were able to build a per-