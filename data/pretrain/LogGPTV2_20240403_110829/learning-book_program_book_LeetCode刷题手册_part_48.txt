忆化以后再次提交AC。
代码
package leetcode
import (
"math"
func longestIncreasingPath(matrix [][]int) int {
cache, res := make([][]int, len(matrix)), 0
for i:= 0;i= 0 && x = 0 && y  0 {
return cache[x][y]
count := 1
for i := 0; i 0即奇数。
X=X&（x-1）清零最低位的1
X&-X=>得到最低位的1
X&~X=>0
代码
---
## Page 447
package leetcode
func countBits(num int)[]int{
bits := make([]int, num+l)
for i := 1; i  0 &&（num&(num-1)） == 0 && （num-1)%3== 0
//解法二循环
func isPowerofFourl(num int) boo1{
for num >= 4 {
if num%4 == 0{
num = num / 4
}else{
return false
return num == 1
343.IntegerBreak
题目
Given a positive integer n, break it into the sum of at least two positive integers and maximize
the product of those integers. Return the maximum product you can get.
Example 1:
Input: 2
output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:
Input: 10
output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
Note: You may assume that n is not less than 2 and not larger than 58.
题目大意
给定一个正整数n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。返回你可以获得的
最大乘积。
解题思路
---
## Page 449
·这一题是DP的题目，将一个数字分成多个数字之和，至少分为2个数字之和，求解分解出来的数
字乘积最大是多少。
·这一题的动态转移方程是dp[i]=max（dp[i]，j*（i-j），j*dp[i-j]），一个数分解
成j和i-j两个数字，或者分解成j和更多的分解数，更多的分解数即是dp[i-j]，由于
dp[i-j]下标小于i，所以dp[i-j]在计算dp[i]的时候一定计算出来了。
代码
package leetcode
func integerBreak(n int) int {
dp := make([]int, n+1)
dp[0], dp[1] = 1, 1
for i := l; i <= n; i++ {
for j := 1; j < i; j++ {
// dp[i]=max(dp[i]，j*(i-j)，j*dp[i-j])
dp[i] = max(dp[i],j*max(dp[i-j],i-j))
return dp[n]
344.ReverseString
题目
Write a function that reverses a string. The input string is given as an array of characters char[].
Do not allocate extra space for another array, you must do this by modlifying the input array in-
place with O(1) extra memory.
You may assume all the characters consist of printable asci characters.
Example 1:
Input: ["h","e","I","?","o"]
Output: ["o","l","l","e","h"]
Example 2:
---
## Page 450
Input: ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]
题目大意
题目要求我们反转一个字符串。
解题思路
这一题的解题思路是用2个指针，指针对撞的思路，来不断交换首尾元素，即可。
代码
package leetcode
func reverseString(s []byte) {
for i, j := 0,1en(s)-1; i < j; {
s[i], s[j] = s[j], s[i]
i++
j-
345.ReverseVowelsofaString
题目
Write a function that takes a string as input and reverse only the vowels of a string.
Example 1:
Input: "he11o"
Output: "ho11e"
Example 2:
---
## Page 451
Input: "leetcode"
Output: "leotcede"
题目大意
题目要求我们反转字符串中的元音字母。需要注意字母大小写
解题思路
这一题的解题思路是用2个指针，指针对撞的思路，来不断交换首尾元素，即可。这一题和第344题思
路一样。
代码
package leetcode
func reversevowels(s string) string {
b := []byte(s)
for i, j := 0,len(b)-1; i < j; {
if isvowels(b[i]) && isvowels(b[j]){
b[i], b[j] = b[j], b[i]
i++
j--
}else if isvowels(b[i]) && !isvowels(b[j]) {
j--
}else if !isvowels(b[i]) && isvowels(b[j]){
i++
}else{
i++
j--
return string(b)
func isvowels(s byte) bool {
if s == 'a' 11 s ==
'e'1ls==
'o'11s=='u丨1s=='A'11s
'E'11s=='1′丨丨s=='o'11s==
'u'[
return true
return false
---
## Page 452
347.TopKFrequentElements
题目
Given a non-empty array of integers, return the k most frequent elements.
Example 1:
Input: nums = [1,1,1,2,2,3],k = 2
output: [1,2]
Example 2:
Input: nums = [1], k = 1
output: [1]
Note:
● You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
●Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
题目大意
给一个非空的数组，输出前K个频率最高的元素。
解题思路
这一题是考察优先队列的题目。把数组构造成一个优先队列，输出前K个即可。
代码
package leetcode
import "container/heap'
func topKFrequent(nums []int，k int) []int {
m := make(map[int]int)
for _, n := range nums {
++[u]
q := PriorityQueue{}
---
## Page 453
for key, count := range m {
heap.Push(&q, &Item(key: key, count: count})
var result []int
for len(result) <k{
item := heap.Pop(&q) .(*Item)
result = append(result, item.key)
return result
//Item define
type Item struct {
key
int
count int
}
//A PriorityQueue implements heap.Interface and holds Items.
type PriorityQueue []*Item
func (pq PriorityQueue) Len() int {
return 1en(pq)
}
func (pq PriorityQueue) Less(i, j int) bool{
//注意：因为golang中的heap是按最小堆组织的，所以count越大，Less（）越小，越靠近堆顶，