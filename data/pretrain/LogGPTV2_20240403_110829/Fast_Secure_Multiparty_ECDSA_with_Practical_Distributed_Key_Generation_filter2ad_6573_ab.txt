valid encryption scheme since decryption requires solving the discrete log problem. In particular,
given d where P = d · G and EGexpEncP (m), it is possible to eﬃciently compute m · G. The next
step of computing m requires solving the discrete log, and so can only be achieved if m is relatively
small.
2.3 Private Multiplication
Our protocol for secure multiplication utilizes a subprotocol πpriv
mult that computes the product of
additive shares with privacy but not correctness. Speciﬁcally, we consider the multiplication func-
tionality deﬁned by f ((a1, b1), . . . , (an, bn)) = (c1, . . . , cn), where the output values c1, . . . , cn are
(cid:96)=1 b(cid:96)) mod q, where q is a large prime
(say, 256 bits). We require that the protocol for computing f be private in the presence of malicious
random under the constraint that(cid:80)n
(cid:96)=1 c(cid:96) = ((cid:80)n
(cid:96)=1 a(cid:96)) · ((cid:80)n
5
adversaries; this means that the adversary cannot learn anything more than allowed, but correct-
ness is not guaranteed. This is actually problematic to deﬁne, since the adversary receives output,
and thus saying that it learns nothing more than allowed would typically require an ideal-model
type of deﬁnition. However, since the outputs of the parties are random in Zq under the constraint,
nothing is revealed unless the shares are reconstructed. We therefore require the following two
properties (let I ⊆ [n] denote the set of corrupted parties and let J = [n] \ I denote the set of
honest parties):
1. Privacy: For any probabilistic polynomial-time adversary malicious A running the protocol,
and any two sets of inputs {(aj, bj)}j∈J and {(a(cid:48)
j)}j∈J for the honest parties, the view of A
(including its input, randomness, message transcript and output shares {ci}i∈I ) when executing
the protocol with honest parties using inputs {(aj, bj)}j∈J is computationally indistinguishable
from its view when executing the protocol with honest parties using inputs {(a(cid:48)
j, b(cid:48)
j, b(cid:48)
j)}j∈J .
2. Input indistinguishability: Deﬁne an implicit-input function on the views of all parties in the
execution; this function outputs the implicit inputs of the adversary so that the output of the
protocol is the function being computed applied to these implicit adversary inputs and the honest
parties’ inputs. Then, input indistinguishability requires that for any probabilistic polynomial-
time adversary malicious A running the protocol, and any two sets of inputs {(aj, bj)}j∈J and
{(a(cid:48)
j)}j∈J for the honest parties, if the output of the function applied to A’s implicit inputs and
{(aj, bj)}j∈J equals the output of the function applied to A’s implicit inputs and {(a(cid:48)
j)}j∈J ,
then A’s view is indistinguishable even given c1, . . . , cn. This notion was formally deﬁned in [30]
in order to achieve concurrent security, but can also be applied to other settings.
j, b(cid:48)
j, b(cid:48)
to obtain(cid:80)n
even given(cid:80)n
Observe that the ﬁrst property mandates privacy irrespective of what inputs are used by the parties
and irrespective of A’s strategy. However, this only holds as long as the shares are not reconstructed
(cid:96)=1 c(cid:96), since indistinguishability is trivially impossible in such a case. Thus, the second
property guarantees that if two sets of inputs result in the same output, then the views of A
(cid:96)=1 c(cid:96) are indistinguishable. Thus, as long as the output is only reconstructed when
the output is correct, the protocol guarantees full privacy. Our protocol for secure multiplication
(used to compute ECDSA) will ensure this exact property; the output of the private multiplication
is securely veriﬁed against encrypted and validated values, and the result is only revealed if it is
correct. We stress that we require input indistinguishability of multiplication for the result of the
multiplication modulo q.
We show how private multiplication can be instantiated in Section 6. One instantiation is
based on oblivious transfer and has low computation cost but higher bandwidth, while our second
instantiation is based on Paillier encryption and has higher computation cost but much lower
bandwidth.
3 Deﬁnition of Security
3.1 The ECDSA Ideal Functionality
We show how to securely compute the functionality Fecdsa. The functionality is deﬁned with two
functions: key generation and signing. The key generation is called once, and then any arbitrary
number of signing operations can be carried out with the generated key. The functionality is deﬁned
in Figure 3.1.
6
FUNCTIONALITY 3.1 (The ECDSA Functionality Fecdsa)
Functionality Fecdsa works with parties P1, . . . , Pn, as follows:
• Upon receiving KeyGen(G, G, q) from all parties P1, . . . , Pn, where G is an Elliptic-curve group
of order q with generator G:
1. Generate an ECDSA key pair (Q, x) by choosing a random x ← Z∗
q and computing
Q = x · G. Then, store (G, G, q, x).
2. Send Q to all P1, . . . , Pn.
3. Ignore future calls to KeyGen.
• Upon receiving Sign(sid, m) from all P1, . . . , Pn, if KeyGen was already called and sid has not
been previously used, compute an ECDSA signature (r, s) on m, and send it to all P1, . . . , Pn.
q, compute (rx, ry) = k · G, r = rx mod q, and s(cid:48) ←
(Speciﬁcally, choose a random k ← Z∗
k−1(Hq(m) + r · x). Then, set s = min{s(cid:48), q − s(cid:48)} so that the signature (r, s) always has
s < q/2.)
We deﬁned Fecdsa using Elliptic curve (additive) group notation, although all of our protocols
work for any prime-order group.
3.2 Security Model
Security in the presence of malicious adversaries. We prove security according to the stan-
dard simulation paradigm with the real/ideal model [5, 23], in the presence of malicious adversaries
and static corruptions. As is standard for the case of no honest majority, we consider security with
abort meaning that a corrupted party can learn output while the honest party does not. In our
deﬁnition of functionalities, we describe the instructions of the trusted party. Since we consider se-
curity with abort, the ideal-model adversary receives output ﬁrst and then sends either (continue, j)
or (abort, j) to the trusted party, for every j ∈ [n] to instruct the trusted party to either deliver
the output to party Pj (in case of continue) or to send abort to party Pj. This means that honest
parties either receive the correct output or abort, but some honest parties may receive output
while others abort. This was termed non-unanimous abort in [24]. As described in Section 5 (after
Protocol 5.1), in this case of secure signing, it is easy to transform the protocol so that all parties
receive output if any single honest party received output.
We remark that when all of the zero-knowledge proofs are UC secure [6], then our protocol can
also be proven secure in this framework.
Security, the hybrid model and composition. We prove the security of our protocol in a
hybrid model with ideal functionalities that securely compute Fcom,Fzk,Fcom-zk, deﬁned next in
Section 3.3. The soundness of working in this model is justiﬁed in [5] (for stand-alone security) and
in [6] (for security under composition). Speciﬁcally, as long as subprotocols that securely compute
the functionalities are used (under the deﬁnition of [5] or [6], respectively), it is guaranteed that
the output of the honest and corrupted parties when using real subprotocols is indistinguishable to
when calling a trusted party that computes the ideal functionalities.
7
3.3 Ideal Functionalities
As in [28] and [13], we prove the security of our protocol using the ideal zero-knowledge functionality,
denoted Fzk, and an ideal commit-and-prove functionality, denoted Fcom-zk. In practice, these proofs
are instantiated using Fiat-Shamir on highly eﬃcient Sigma protocols. In this section, we deﬁne
these ideal functionalities, and the relations for the zero-knowledge proofs.
In order to realize Fcom-zk deﬁned below, we use
The ideal commitment functionality Fcom.
an ideal commitment functionality Fcom, formally deﬁned in Functionality 3.2. Any UC-secure
commitment scheme fulﬁlls Fcom; e.g., [27, 1, 16].
In the random-oracle model, Fcom can be
trivially realized with static security by simply deﬁning Com(x) = H(x, r) where r ← {0, 1}κ
is random, and sending Com(x) to all parties. Since Fcom is deﬁned so that all parties receive
the same commitment, the value Com(x) needs to be broadcasted. However, as shown in [24],
a simple echo-broadcast suﬃces here for the case of non-unanimous abort (this takes two rounds
of communication). In order to ensure this, the parties send a hash of all the commitments that
they received in the round after the commitments were sent. If any two parties received diﬀerent
commitments, then they notify all parties to abort and then halt. This adds very little complexity
and ensures the same view for any committed values.
FUNCTIONALITY 3.2 (The Commitment Functionality Fcom)
Functionality Fcom works with parties P1, . . . , Pn, as follows:
• Upon receiving (commit, sid, i, x) from party Pi (for i ∈ [n]), record (sid, i, x) and send
(receipt, sid, i) to all P1, . . . , Pn. If some (commit, sid, i,∗) is already stored, then ignore the
message.
• Upon receiving (decommit, sid, i) from party Pi,
(decommit, sid, i, x) to party P1, . . . , Pn.
if (sid, i, x) is recorded then send
The ideal zero knowledge functionality Fzk. We use the standard ideal zero-knowledge func-
tionality deﬁned by ((x, w), λ) → (λ, (x, R(x, w))), where λ denotes the empty string. For a relation
R, the functionality is denoted by F R
zk. Note that any zero-knowledge proof of knowledge fulﬁlls the
Fzk functionality [25, Section 6.5.3]; non-interactive versions can be achieved in the random-oracle
model via the Fiat-Shamir paradigm; see Functionality 3.3 for the formal deﬁnition.
FUNCTIONALITY 3.3 (The Zero-Knowledge Functionality F R
Upon receiving (prove, sid, i, x, w) from a party Pi (for i ∈ [n]): if sid has been previously used
then ignore the message. Otherwise, send (proof, sid, i, x, R(x, w)) to all parties P1, . . . , Pn, where
R(x, w) = 1 iﬀ (x, w) ∈ R.
zk for Relation R)
We deﬁne Sigma protocols for ﬁve languages; these can be compiled to zero-knowledge proofs
of knowledge in the standard manner. Namely, for non-interactive zero-knowledge in the random-
oracle model, the Fiat-Shamir paradigm [14] can be used, whereas standard techniques using eﬃ-
cient commitments can be used to obtain proofs in the standard model with interaction. We deﬁne
the following relations:
8
1. Knowledge of the discrete log of an Elliptic-curve point: Deﬁne the relation
RDL = {(G, G, q,P, w) | P = w · G}
of discrete log values (relative to the given group). We use the standard Schnorr proof for
this [32]. The cost of this proof is one exponentiation for the prover and two for the veriﬁer, and
communication cost of two elements of Zq.
2. Diﬃe-Hellman tuple of Elliptic-curve points: Deﬁne the relation
RDH = {(G, G, q, (A, B, C), w) | B = w · G ∧ C = w · A}
of Diﬃe-Hellman tuples (relative to the given group). We use the well-known proof that is an
extension of Schnorr’s proof for discrete log. The cost of this proof is two exponentiations for
the prover and four for the veriﬁer, and communication cost of two elements of Zq.
3. Rerandomization of tuple: Deﬁne the rerandomization relation
RRE = {(G, G, q, (P, A, B, A(cid:48), B(cid:48)), (r, s)) | A(cid:48) = r · G + s · A ∧ B(cid:48) = r · P + s · B}.
Observe that if (G,P, A, B) is a Diﬃe-Hellman tuple, then (G,P, A(cid:48), B(cid:48)) is a uniformly dis-
tributed and independent Diﬃe-Hellman tuple (with the same G,P). In contrast, if (G,P, A, B)
is not a Diﬃe-Hellman tuple, then A(cid:48), B(cid:48) are uniform and independent random group elements.
See Eq. Eq. (1) in the proof of Theorem B.1 for a proof of this fact. The Sigma protocol for
this relation is described in Appendix A.1; the cost of this proof is four exponentiations for the
prover and six for the veriﬁer, and communication cost of three elements of Zq.
4. Knowledge of x in EGexpEncP (x): we deﬁne the relation
REG = {((G, G, q,P, A, B), (x; r)) | (A, B) = EGexpEncP (x; r)}
of the encrypted value in an ElGamal encryption-in-the-exponent ciphertext. Note that this is
very diﬀerent from knowing a regular ElGamal plaintext since here x is “in the exponent”, and
the knowledge extractor must be able to extract x itself (and not just x· G). The Sigma protocol
for this relation is described in Appendix A.2; the cost of the proof is three exponentiations for
the prover and ﬁve for the veriﬁer, and communication cost of three elements of Zq.
5. Scalar product with encrypted values: we deﬁne the relation
Rprod = {((G, G, q,P, A, B, C, D, E, F ), (t, r, y)) |
(C, D) = EGexpEncP (y; t) ∧ E = y · A + r · G ∧ F = y · B + r · P}
which means that (E, F ) is generated by multiplying (A, B) by the scalar y which is encrypted-
in-the-exponent in (C, D), and then rerandomizing the result. The Sigma protocol for this
relation is described in Appendix A.3; the cost of this proof is eleven exponentiations for the
prover and twelve for the veriﬁer, and communication cost of six elements of Zq.
For clarity, we remove the (G, G, q) part from the input to the zero-knowledge proofs below, with
the understanding that these parameters are ﬁxed throughout.
9
The committed non-interactive zero knowledge functionality Fcom-zk.
In our protocol, we
will have parties send commitments to a statement together with a non-interactive zero-knowledge
proof of the statement. As in [28], we model this formally via a commit-zk functionality, denoted
Fcom-zk, deﬁned in Functionality 3.4. Given non-interactive zero-knowledge proofs of knowledge,
this functionality is securely realized by just having the prover commit to the statement together
with its proof, using the ideal commitment functionality Fcom. As in Fcom, consistency of views is
validated by all parties sending a hash of the commitments that they received.
FUNCTIONALITY 3.4 (The Committed NIZK Functionality F R
com-zk for Relation R)
Functionality Fcom-zk works with parties P1, . . . , Pn, as follows:
• Upon receiving (ComProve, sid, i, x, w) from a party Pi (for i ∈ [n]): if sid has been previously
used then ignore the message. Otherwise, store (sid, i, x) and send (ProofReceipt, sid, i) to
P1, . . . , Pn.
• Upon receiving (DecomProof, sid) from a party Pi (for i ∈ [n]):
if (sid, i, x) has been stored
then send (DecomProof, sid, i, x, R(x, w)) to P1, . . . , Pn.
4 Secure Multiplication – Fmult
4.1 Functionality Deﬁnition