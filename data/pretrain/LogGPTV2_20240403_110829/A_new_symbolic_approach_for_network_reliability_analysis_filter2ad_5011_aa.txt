title:A new symbolic approach for network reliability analysis
author:Marco Beccuti and
Andrea Bobbio and
Giuliana Franceschinis and
Roberta Terruggia
A new symbolic approach for network
reliability analysis
Marco Beccuti∗, Andrea Bobbio †, Giuliana Franceschinis† and Roberta Terruggia†
∗Dipartimento di Informatica,
Universit`a di Torino, Torino, Italy
PI:EMAIL
†DiSIT
Universit`a del Piemonte Orientale, Alessandria, Italy
andrea.bobbio, giuliana.franceschinis, PI:EMAIL
Abstract—In this paper we propose an improved BDD ap-
proach to the network reliability analysis, that allows the user
to compute an exact solution or an approximation based on
reliability bounds when network complexity makes the former
solution practically impossible.
To this purpose, a new algorithm for encoding the connectivity
graph on a Binary Decision Diagram (BDD) has been developed;
it reduces the computation memory peak with respect to previous
approaches based on the same type of data structure without
increasing the execution time, and allows us also to derive
from a subset of the minpaths/mincuts a lower/upper bound
of the network reliability, so that the quality of the obtained
approximation can be estimated.
Finally, a fair and detailed comparison between our approach
and another state of the art approach presented in the literature
is documented through a set of benchmarks.
Index Terms—Network Reliability, Exact and Approximate
Algorithms, Upper and Lower Bound, BDD
Paper category: regular paper
Word count: about 8500 words
The material has been cleared through the afﬁliations of the
author(s)
I. INTRODUCTION
Network structures have the property that each couple of
nodes is usually connected by multiple paths making the
systems intrinsically reliable. For this reason, the reliability
of networks has always been a major concern in the reliability
literature, as witnessed, for instance, by almost every issue of
IEEE Transactions on Reliability.
A network is represented by means of a graph whose
elements (both nodes and edges) are assumed to behave as
binary objects, and they can be in one of the following two
exhaustive and mutually exclusive states: working (up) or
failed (down).
If a probability measure is assigned to the up or down state, a
probability measure can be associated with the connectedness
of the whole graph.
The s-t network reliability is deﬁned as the probability that a
source node s communicates with a sink node t through at
least one path of working edges and has been the object of a
continuing attention in the literature.
The many proposed algorithms can be roughly classiﬁed as
exact or approximated algorithms. Exact algorithms pertain to
two main categories; i) - pivotal decomposition using keystone
components [18], [11]) and ii) - approaches where all the
possibilities for which two speciﬁed nodes can communicate
(or not communicate) are ﬁrst enumerated (path/cut set search
[3], [14]) and then the reliability expression is evaluated,
resorting to different techniques [2], like inclusion-exclusion
method or sum of disjoint products [13], [21], [1].
In the last decades, Binary Decision Diagrams (BDD) [7]
have provided an extraordinarily efﬁcient method to represent
and manipulate Boolean functions [8], and have been also
exploited to model the connectivity of networks and compute
their reliability [22], [12], [6].
To the best of our knowledge, the algorithm presented in
[22] is one of the best algorithms in terms of execution time
and memory utilization for the computation of the network
reliability and minpath/mincut set.
This algorithm generates the BDD encoding the connectivity
function directly, via a recursive visit on the graph, without
explicitly deriving the corresponding Boolean expression.
From this BDD it is possible to obtain, with some BDD
manipulations taken from [19],
the BDD encoding the
minpaths and/or
the BDD encoding the mincuts. With
this approach even if only the list of minpaths/mincuts is
necessary, the BDD encoding the connectivity function must
be created.
The exact computation of the network reliability problem
is known to be NP-complete [4], so that for large networks
techniques providing approximate values appear to be the
only possible solution. Natural and simple approximation
methods are based on the computation of the reliability based
on a subset of minpaths and mincuts.
Computing the reliability over a subset of minpaths provides
a lower bound, while computing the reliability over a
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:09 UTC from IEEE Xplore.  Restrictions apply. 
the probability of
subset of mincuts provides an upper bound, so that the total
approximation error may be evaluated.
However, also with a reduced number of minpaths (mincuts)
the computation of
the bound using
inclusion-exclusion formula or Sum of Disjoint Products
(SDP that is known to perform better) may be very time
consuming.
For
this reason some authors [9] have used a further
approximation by arresting the inclusion/exclusion formula to
the ﬁrst term.
Methods to ﬁnd the mincuts that have major inﬂuence on the
network reliability have been discussed [20], [9].
This paper proposes a new approach based on BDD to
compute the exact network reliability or an approximation
based on reliability bounds when the network complexity
makes the exact solution intractable.
A known problem in the use of BDDs is that
the peak
occupation of the memory during the BDD construction may
be orders of magnitude larger than the memory occupation of
the BDD in its ﬁnal form.
The present paper proposes a BDD manipulation algorithm
that reduces the peak occupation with respect to approach
presented in [22].
Furthermore, the proposed algorithm may compute the upper
and lower bounds on the exact connectivity probability with
a negligible additional cost.
With respect to the previous work presented in [22], in our
approach the minpaths or the mincuts of the net are derived
without storing the connectivity function.
Instead, if we need the network reliability then BDD encoding
the whole connectivity function must be derived from the
BDD encoding the minpaths or
the mincuts through a
symbolic algorithm.
Even if this requires to store the whole connectivity function,
our approach is able to achieve a reduction in terms of
memory peak and execution time with respect
to other
approach based on BDD as reported in the experiments of
Sec. VI.
The paper is organized as follows: Sec. II describes the main
concepts of network reliability analysis, Sec. III introduces
BDD and its operators.
Sec. IV and Sec. V introduce our exact method and its
extension to compute an approximation of network reliability
value.
Sec. VI presents some numerical results comparing ﬁrst our
exact approach with our implementation of the one in [22];
second our exact approach with its approximated extension.
Finally, Sec. VII draws some conclusions and presents direc-
tions for future work.
II. PROBLEM DEFINITION
A probabilistic network can be described as a labeled graph
G = (V, E, P ), where V is the set of vertices, E ⊆ V × V
the set of edges (or arcs), and P a function that assigns a
probability value to the elements of the graph (vertices and
edges) of being in the up state.
In this paper we assume that only edges can fail and we use
the notation e to denote a generic edge.
A network is undirected when the edges can be traversed in
both directions, while a network is directed if the edges can
be traversed only in one direction indicated by an arrow.
For undirected networks the presence of at least one edge per
node guarantees that all the nodes are connected.
Usually real networks are much more connected than this
minimal threshold thus allowing multiple paths among any pair
of vertices. Figure 1 exempliﬁes the graphical representation
of a bridge network.
In this paper, we concentrate on the evaluation of the s, t
reliability, deﬁned as the probability that a source node s is
connected with a terminal node t by at least one path of
working edges.
A path is a subset of arcs that guarantees the source s and sink
t to be connected when all the arcs of the subset are working.
A path is a minpath if there does not exist any subset of the
path that is also a path.
Furthermore, a path Hi can be also deﬁned as a boolean
formula of conjunction of terms indicating which arcs are in
up state.
If H1, H2, . . . , Hn are the n minpaths of a network, the
connectivity function Cs,t is deﬁned as the disjunction of its
minpaths:
Cs,t = H1 ∨ H2 ∨ . . . ∨ Hn =
n
_i=1
Hi
The disconnectivity function is then deﬁned as:
Cs,t = ¬ Cs,t
(1)
(2)
For instance,
in the network example of Figure 1 the
minpaths are H1 = e1 ∧ e4, H2 = e2 ∧ e5, H3 = e2 ∧ e3 ∧ e4.
The path he1 ∧ e2 ∧ e4i is a path but not a minpath.
Similarly, we can deﬁne a cut as a subset of arcs such that
the source s and sink t are disconnected if all the arcs of the
subset are down.
A cut is a mincut if there does not exist any subset of the cut
that is also a cut.
A cut Kj
is a boolean formula of conjunction of terms
indicating which are are in down state. If K1, K2, . . . , Km
are the m mincuts of a network, the disconnectivity function
Cs,t is deﬁned as as the disjunction of its mincuts:
Cs,t = K1 ∨ K2 ∨ . . . ∨ Km =
m
_j=1
Kj
(3)
In the network example of in Figure 1 the mincuts are K1 =
e1 ∧ e2, K2 = e4 ∧ e5, K3 = e2 ∧ e4, K4 = e1 ∧ e3 ∧ e5.
If the function P assigns to edge ei a probability pi of
being in the up state and 1 − pi of being in the down state, the
s, t network reliability can be computed as Rs,t = P r(Cs,t).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:09 UTC from IEEE Xplore.  Restrictions apply. 
Similarly the unreliability is computed as Us,t = 1 − Rs,t =
P r(Cs,t).
to the N variables that evaluates to false, and viceversa for a
path to 1.
Suppose now that we take a subset of the mincuts and we
deﬁne the Boolean function
we have that:
C ′
s,t =
n′
_i=1
Hi with n′ < n
P r(C ′
s,t) ≤ P r(Cs,t) = Rs,t.
(4)
(5)
Hence P r(C ′
s,t) provides a lower bound to the s, t reliability
Rs,t. Similarly if we take a subset m′ < m of the m mincuts
and we deﬁne the Boolean function
C ′′
s,t =
m′
_j=1
Kj
we have that:
P (C ′′
s,t) ≤ P r(Cs,t) = Us,t.
(6)
(7)
s,t) provides a lower bound to the s, t unreliability
s,t) an upper bound to the s, t reliability
s,t) is an upper bound to Us,t.
Hence P (C ′′
Us,t and 1 − P r(C ′′
Rs,t and 1 − P r(C ′
Hence,
taking any subset of minpaths and any subset of
mincuts and applying Equations (5) and (7) we obtain a lower
and an upper bound of Rs,t, respectively.
III. BINARY DECISION DIAGRAM
Before presenting in detail the algorithms to compute the
network reliability, we introduce the basic characteristics of
Binary Decision Diagrams (BDD) and of the functions to
manipulate them.
BDDs [7] are a well-known graph data structure used to
represent and manipulate efﬁciently complex Boolean func-
tions over Boolean variables.
They allow to ﬁnd efﬁcient solutions for a large class of prob-
lems in different research ﬁelds (e.g. digital system design,
combinatorial optimization, mathematical logic,. . .).
For instance,
in [22] the authors show that BDD can be
efﬁciently used for reliability graph analysis encoding directly
the connectivity function on BDD.
Formally a BDD is a directed acyclic graph that represents
functions of type f : VN × · · · × V1 → {0, 1}, where Vi is a
Boolean variable.
Nodes without outgoing arcs are called terminal, nodes with-
out incoming arcs are called root, all the others are termed
internal; a node at level i has two outgoing arcs.
Therefore, if we represent a Boolean function over N variables
with a BDD then the internal nodes are mapped onto the N
variables and their outgoing arcs correspond to the possible
assignments to these variables (true/1 or false/0).
The two possible values of the function (i.e. false and true)
are represented by two terminal nodes 0 and 1. A path in the
BDD from a root node to node 0 represents an assignment
Figure 2 shows a BDD encoding the Boolean function
e2 e5 e3 e1 e4+e2 e5 e3 e1 e4+e2 e5 e3 e1 e4. The edges labeled
with 0 represent the assignment false for the corresponding
variable while the edges labeled with 1 the assignment true.
A BDD in which nodes are organized into levels (one per
variable) are called ordered.
Moreover, two BDD nodes are duplicate one of the other if
their outgoing edges go to the same set of nodes.
An ordered BDD without duplicate nodes is called canonical,
and it assures that if two boolean functions are equal (have
the same value over all possible inputs), then they have the
same canonical BDD representation.
Optionally, BDDs may also eliminate redundant nodes, which
are non-terminal nodes with its edges pointing to the same
node. The BDD keeping all redundant nodes are called quasi–
reduced, while those that eliminate all redundant nodes are
called fully–reduced and allow skipping levels.
For instance, the BDD in Fig. 2 is an ordered fully–reduced
canonical BDD where the variables are ordered as follows
e2 ≺ e5 ≺ e3 ≺ e1 ≺ e4.
It is important to highlight that the variable order affects the
BDD size (number of nodes), and ﬁnding the optimal order
that minimizes the BDD size is a NP-complete problem.
In the rest of this paper we will use BDD to indicate an ordered
fully–reduced canonical BDD.
A very interesting aspect of BDDs is that they allow to
translate the basic boolean functions like and and or to basic
operations like intersection (for the and) and union (for the
or) over two BDDs.
A crucial factor in the efﬁciency of these operators is the
utilization of a hash table, called computed-table, used to cache
the result of each intermediate call to the algorithm, so that it
is never the case that the same operation is executed twice on
the same pair of nodes, if the cache is large enough.
IV. THE PROPOSED APPROACH: EXACT METHOD
In this section an extension of our previous work [5] is
described. We present our approach in detail, ﬁrst describing
how to derive the set of minpaths/mincuts from the network
and how to encode them on a BDD. Then, we describe our
algorithm to derive from the BDD encoding the minpaths
(mincuts) another BDD encoding the connectivity (discon-
nectivity) function. Finally we explain how to compute the
network s, t reliability using the algorithm proposed in [22]
from the connectivity Cs,t
(disconnectivity Cs,t) function
encoded in a BDD.
In the next section we show how this approach can be
extended to provide an approximate solution in the form of
upper and lower bounds on Rs,t/Us,t.
A. Minpath search
In our approach the minpath search is implemented through
a Depth First Search (DFS), an uninformed tree search algo-
rithm that, starting from the root explores as far as possible
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:48:09 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 MinPath search
1: procedure MINPATHSEARCH(BDDQ, Q, c, n, t)
BDDQ = BDD encoding the minpaths
Q = set of edges belonging to the current minpath
c = current node
n = parent node of c (along the current path, NULL if c == source)
t = target node
2:
3:
4:
5:
6:
7:
8:
Q.insert(n,c);
if (c == t) then
BDDQ.insertMinPath(Q);
else
for (j ∈ c.Child()) do
MinPathSearch(BDDQ,Q,j,c);
end for
end if
9:
10: end procedure
along each branch before backtracking.
The found minpaths are encoded on a BDD, where each
level is associated with an edge of the graph according to
a predeﬁned order.
Hence, each BDD path corresponds to a minpath mp where
only the variables/edges included in mp are true.
For instance, this algorithm applied on the directed bridge
network in Figure 1 returns the minpath BDD in Figure 2
assuming the following variables ordering e2 ≺ e5 ≺ e3 ≺
e1 ≺ e4. The BDD encodes the minpaths he1, e4i, he2, e5i
and he2, e3, e4i; corresponding respectively to the BDD paths
h0, 0, 0, 1, 1i, h1, 1, 0, 0, 0i and h1, 0, 1, 0, 1i where the notation
hSe2 , Se5 , Se3 , Se1 , Se4 i represents the fact that edge ei is up
if Sei = 1 while it is down if Sei = 0
It is important to highlight that since in general a minpath
involves only a subset of the network edges then a more
efﬁcient encoding of the minpath BDD could be obtained
using Zero-suppressed DD (ZDD) [16], a BDD extension
where a node is not explicitly represented if its positive edge
points to terminal node 0.
The pseudo-code of minpath search is shown in Algo-
rithm 1, where the BDDQ, initially empty, encodes the found
minpaths, the set Q, initially empty, stores the edges of the
current minpath, the pointer c, initially pointing to the source
node, identiﬁes the current node and the pointer n, initialized
to NULL, identiﬁes a node reaching c.
Recursively, the algorithm updates Q inserting the edge
connecting n to c (insert() method), and if c is the target
node then Q is inserted in BDDQ. Otherwise the algorithm
explores all the children of c (Children() method).
The pseudo-code in Algorithm 1 can be extended to avoid
loops introducing a further list storing all the nodes already
visited, so that a node shall be explored iff it is not in such
list.
Observe that the choice of implementing a DFS instead of
Breadth First Search (BFS), another uninformed tree search
algorithm that starting from the source node explores one level
s
node 1
e1
e2
node 3
e3
node 2
e4
e5
t
node 4
Fig. 1. A directed bridge network.
Fig. 2. Minpaths BDD of the directed bridge network.
of the graph at a time, is due to the fact that the latter requires
to maintain in memory for each visited node in the frontier its