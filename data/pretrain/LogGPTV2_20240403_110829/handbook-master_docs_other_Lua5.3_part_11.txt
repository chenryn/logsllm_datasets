### lua_setallocf
[-0, +0, –]
void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);
把指定状态机的分配器函数换成带上用户数据 ud 的 f 。
### lua_setfield
[-1, +0, e]
void lua_setfield (lua_State *L, int index, const char *k);
做一个等价于 t[k] = v 的操作， 这里 t 是给出的索引处的值， 而 v 是栈顶的那个值。
这个函数将把这个值弹出栈。 跟在 Lua 中一样，这个函数可能触发一个 "newindex" 事件的元方法 （参见 §2.4）。
### lua_setglobal
[-1, +0, e]
void lua_setglobal (lua_State *L, const char *name);
从堆栈上弹出一个值，并将其设为全局变量 name 的新值。
### lua_seti
[-1, +0, e]
void lua_seti (lua_State *L, int index, lua_Integer n);
做一个等价于 t[n] = v 的操作， 这里 t 是给出的索引处的值， 而 v 是栈顶的那个值。
这个函数将把这个值弹出栈。 跟在 Lua 中一样，这个函数可能触发一个 "newindex" 事件的元方法 （参见 §2.4）。
### lua_setmetatable
[-1, +0, –]
void lua_setmetatable (lua_State *L, int index);
把一张表弹出栈，并将其设为给定索引处的值的元表。
### lua_settable
[-2, +0, e]
void lua_settable (lua_State *L, int index);
做一个等价于 t[k] = v 的操作， 这里 t 是给出的索引处的值， v 是栈顶的那个值， k 是栈顶之下的值。
这个函数会将键和值都弹出栈。 跟在 Lua 中一样，这个函数可能触发一个 "newindex" 事件的元方法 （参见 §2.4）。
### lua_settop
[-?, +?, –]
void lua_settop (lua_State *L, int index);
参数允许传入任何索引以及 0 。 它将把堆栈的栈顶设为这个索引。 如果新的栈顶比原来的大， 超出部分的新元素将被填为 nil 。 如果 index 为 0 ， 把栈上所有元素移除。
### lua_setuservalue
[-1, +0, –]
void lua_setuservalue (lua_State *L, int index);
从栈上弹出一个值并将其设为给定索引处用户数据的关联值。
### lua_State
typedef struct lua_State lua_State;
一个不透明的结构， 它指向一条线程并间接（通过该线程）引用了整个 Lua 解释器的状态。 Lua 库是完全可重入的： 它没有任何全局变量。 状态机所有的信息都可以通过这个结构访问到。
这个结构的指针必须作为第一个参数传递给每一个库函数。 lua_newstate 是一个例外， 这个函数会从头创建一个 Lua 状态机。
### lua_status
[-0, +0, –]
int lua_status (lua_State *L);
返回线程 L 的状态。
正常的线程状态是 0 （LUA_OK）。 当线程用 lua_resume 执行完毕并抛出了一个错误时， 状态值是错误码。 如果线程被挂起，状态为 LUA_YIELD 。
你只能在状态为 LUA_OK 的线程中调用函数。 你可以延续一个状态为 LUA_OK 的线程 （用于开始新协程）或是状态为 LUA_YIELD 的线程 （用于延续协程）。
### lua_stringtonumber
[-0, +1, –]
size_t lua_stringtonumber (lua_State *L, const char *s);
将一个零结尾的字符串 s 转换为一个数字， 将这个数字压栈，并返回字符串的总长度（即长度加一）。 转换的结果可能是整数也可能是浮点数， 这取决于 Lua 的转换语法（参见 §3.1）。 这个字符串可以有前置和后置的空格以及符号。 如果字符串并非一个有效的数字，返回 0 并不把任何东西压栈。 （注意，这个结果可以当成一个布尔量使用，为真即转换成功。）
### lua_toboolean
[-0, +0, –]
int lua_toboolean (lua_State *L, int index);
把给定索引处的 Lua 值转换为一个 C 中的布尔量（ 0 或是 1 ）。 和 Lua 中做的所有测试一样， lua_toboolean 会把任何不同于 false 和 nil 的值当作真返回； 否则就返回假。 （如果你想只接收真正的 boolean 值， 就需要使用 lua_isboolean 来测试值的类型。）
### lua_tocfunction
[-0, +0, –]
lua_CFunction lua_tocfunction (lua_State *L, int index);
把给定索引处的 Lua 值转换为一个 C 函数。 这个值必须是一个 C 函数； 如果不是就返回 NULL 。
### lua_tointeger
[-0, +0, –]
lua_Integer lua_tointeger (lua_State *L, int index);
等价于调用 lua_tointegerx， 其参数 isnum 为 NULL。
### lua_tointegerx
[-0, +0, –]
lua_Integer lua_tointegerx (lua_State *L, int index, int *isnum);
将给定索引处的 Lua 值转换为带符号的整数类型 lua_Integer。 这个 Lua 值必须是一个整数，或是一个可以被转换为整数 （参见 §3.4.3）的数字或字符串； 否则，lua_tointegerx 返回 0 。
如果 isnum 不是 NULL， *isnum 会被设为操作是否成功。
### lua_tolstring
[-0, +0, e]
const char *lua_tolstring (lua_State *L, int index, size_t *len);
把给定索引处的 Lua 值转换为一个 C 字符串。 如果 len 不为 NULL ， 它还把字符串长度设到 *len 中。 这个 Lua 值必须是一个字符串或是一个数字； 否则返回返回 NULL 。 如果值是一个数字， lua_tolstring 还会 把堆栈中的那个值的实际类型转换为一个字符串。 （当遍历一张表的时候， 若把 lua_tolstring 作用在键上， 这个转换有可能导致 lua_next 弄错。）
lua_tolstring 返回一个已对齐指针 指向 Lua 状态机中的字符串。 这个字符串总能保证 （ C 要求的）最后一个字符为零 ('\0') ， 而且它允许在字符串内包含多个这样的零。
因为 Lua 中可能发生垃圾收集， 所以不保证 lua_tolstring 返回的指针， 在对应的值从堆栈中移除后依然有效。
### lua_tonumber
[-0, +0, –]
lua_Number lua_tonumber (lua_State *L, int index);
等价于调用 lua_tonumberx， 其参数 isnum 为 NULL。
### lua_tonumberx
[-0, +0, –]
lua_Number lua_tonumberx (lua_State *L, int index, int *isnum);
把给定索引处的 Lua 值转换为 lua_Number 这样一个 C 类型 （参见 lua_Number ）。 这个 Lua 值必须是一个数字或是一个可转换为数字的字符串 （参见 §3.4.3）； 否则， lua_tonumberx 返回 0 。
如果 isnum 不是 NULL， *isnum 会被设为操作是否成功。
### lua_topointer
[-0, +0, –]
const void *lua_topointer (lua_State *L, int index);
把给定索引处的值转换为一般的 C 指针 (void*) 。 这个值可以是一个用户对象，表 ，线程或是一个函数； 否则， lua_topointer 返回 NULL 。 不同的对象有不同的指针。 不存在把指针再转回原有类型的方法。
这个函数通常只用于调试信息。
### lua_tostring
[-0, +0, e]
const char *lua_tostring (lua_State *L, int index);
等价于调用 lua_tolstring ， 其参数 len 为 NULL 。
### lua_tothread
[-0, +0, –]
lua_State *lua_tothread (lua_State *L, int index);
把给定索引处的值转换为一个 Lua 线程 （表示为 lua_State*）。 这个值必须是一个线程； 否则函数返回 NULL。
### lua_touserdata
[-0, +0, –]
void *lua_touserdata (lua_State *L, int index);
如果给定索引处的值是一个完全用户数据， 函数返回其内存块的地址。 如果值是一个轻量用户数据， 那么就返回它表示的指针。 否则，返回 NULL 。
### lua_type
[-0, +0, –]
int lua_type (lua_State *L, int index);
返回给定有效索引处值的类型， 当索引无效（或无法访问）时则返回 LUA_TNONE。 lua_type 返回的类型被编码为一些个在 lua.h 中定义的常量： LUA_TNIL， LUA_TNUMBER， LUA_TBOOLEAN， LUA_TSTRING， LUA_TTABLE， LUA_TFUNCTION， LUA_TUSERDATA， LUA_TTHREAD， LUA_TLIGHTUSERDATA。
### lua_typename
[-0, +0, –]
const char *lua_typename (lua_State *L, int tp);
返回 tp 表示的类型名， 这个 tp 必须是 lua_type 可能返回的值中之一。
### lua_Unsigned
typedef ... lua_Unsigned;
lua_Integer 的无符号版本。
### lua_upvalueindex
[-0, +0, –]
int lua_upvalueindex (int i);
返回当前运行的函数（参见 §4.4）的第 i 个上值的伪索引。
### lua_version
[-0, +0, v]
const lua_Number *lua_version (lua_State *L);
返回保存在 Lua 内核中储存的版本数字的地址。 当调用时传入一个合法的 lua_State ， 返回创建该状态机时的版本地址。 如果用 NULL 调用， 返回调用者的版本地址。
### lua_Writer
typedef int (*lua_Writer) (lua_State *L,
                           const void* p,
                           size_t sz,
                           void* ud);
被 lua_dump 用到的写入器函数。 每次 lua_dump 产生了一段新的代码块， 它都会调用写入器。 传入要写入的缓冲区 (p) 和它的尺寸 (sz) ， 以及传给 lua_dump 的参数 data 。
写入器会返回一个错误码： 0 表示没有错误； 别的值均表示一个错误， 并且会让 lua_dump 停止再次调用写入器。
### lua_xmove
[-?, +?, –]
void lua_xmove (lua_State *from, lua_State *to, int n);
交换同一个状态机下不同线程中的值。
这个函数会从 from 的栈上弹出 n 个值， 然后把它们压入 to 的栈上。
### lua_yield
[-?, +?, e]
int lua_yield (lua_State *L, int nresults);
这个函数等价于调用 lua_yieldk， 不同的是不提供延续函数（参见 §4.7）。 因此，当线程被延续，线程会继续运行调用 lua_yield 函数的函数。
### lua_yieldk
[-?, +?, e]
int lua_yieldk (lua_State *L,
                int nresults,
                lua_KContext ctx,
                lua_KFunction k);
让出协程（线程）。
当 C 函数调用了 lua_yieldk， 当前运行的协程会挂起， 启动这个线程的 lua_resume 调用返回。 参数 nresults 指栈上需返回给 lua_resume 的返回值的个数。
当协程再次被延续时， Lua 调用延续函数 k 继续运行被挂起（参见 §4.7）的 C 函数。 延续函数会从前一个函数中接收到相同的栈， 栈中的 n 个返回值被移除而压入了从 lua_resume 传入的参数。 此外，延续函数还会收到传给 lua_yieldk 的参数 ctx。
通常，这个函数不会返回； 当协程一次次延续，将从延续函数继续运行。 然而，有一个例外： 当这个函数从一个逐行运行的钩子函数（参见 §4.9） 中调用时，lua_yieldk 不可以提供延续函数。 （也就是类似 lua_yield 的形式）， 而此时，钩子函数在调用完让出后将立刻返回。 Lua 会使协程让出，一旦协程再次被延续， 触发钩子的函数会继续正常运行。
当一个线程处于未提供延续函数的 C 调用中，调用它会抛出一个错误。 从并非用延续方式（例如：主线程）启动的线程中调用它也会这样。
## 调试接口
Lua 没有内置的调试机制。 但是它提供了一组特殊的函数接口以及 钩子。 这组接口可用于构建出不同的调试器、性能剖析器、 或是其它需要从解释器获取“内部信息”的工具。
### lua_Debug