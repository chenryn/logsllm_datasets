[ 169 ]
Figure 5 - AWS CloudWatch Metric details
Dashboards
Dashboards are web pages available in the AWS console that can be customized with
metrics information in the form of graphs. These dashboards auto refresh when they are
open and they can be shared with other users with appropriate permissions. Dashboards
provide a unique place to have a consolidated view of all metrics and alarms available for
all resources, such as AWS resources, or your applications located in all regions of an AWS
account. All dashboards are global in nature, they are not region specific. You can create a 
dashboard using the AWS console, command-line tools or through the PutDashboard API.
You can use dashboards to monitor critical resources and applications on a real-time basis.
You can have more than one dashboard; these can be saved and edited to add one or more
metrics, graphs, widgets, texts such as links, comments, and so on. You can create up to 500
dashboards in your AWS account. An alarm can be added to a dashboard as well; this
alarm will turn red when it is in a state of ALARM, that is, when it crosses the threshold set
for the metric to trigger the alarm.
For adding metrics from multiple AWS regions to a single dashboard, perform the
following steps as listed:
Navigate to the CloudWatch console through the AWS Management Console.
1.
Click on Metrics in the navigation pane.
2.
Choose the desired region in the navigation bar.
3.
Select the metrics from this region.
4.
5. Add them to the dashboard by clicking Add to Dashboard under Actions.
Monitoring in AWS
[ 170 ]
You can either add them to an existing dashboard or create a new dashboard.
6.
For adding more metrics from different regions, repeat the above mentioned
7.
process.
Click on Save Dashboard to save this dashboard.
8.
Let us also look at steps to create a dashboard through AWS Management Console:
Navigate to the CloudWatch console through the AWS Management Console.
1.
Click on Create Dashboard in the navigation pane after choosing Dashboards.
2.
Type the name of your dashboard and click on Create Dashboard.
3.
You can add one of four options, Line, Stacked area, Number, or Text to your
4.
dashboard, as shown in the next screenshot.
You can add multiple widgets to your dashboard by following a similar process.
5.
Once you have added all the required information to your dashboard, click on
6.
Save Dashboard.
Figure 6 - AWS CloudWatch dashboard options
Monitoring in AWS
[ 171 ]
You can configure the refresh interval for your CloudWatch dashboards, ranging from 10
seconds to 15 minutes. You can also configure the auto refresh option for all your
dashboards. Moreover, you can select a pre-defined time range for your dashboard,
beginning from 1 hour and going up to 1 week. There is an option to have a customized
time range, as well, for your dashboards.
Events
AWS CloudWatch Events is another useful component that provides a continuous stream of
the state of all AWS resources whenever there is a change. These are system events that
complement metrics and logs to provide a comprehensive picture of the overall health and
state of your AWS resources and applications. AWS CloudWatch events help you to
respond to changes to your resources, thereby making it a very useful tool for automating
your responses in the event of a security threat. So, when your AWS resource or application
changes their state, they will automatically send events to the AWS CloudWatch events
stream. You will write a rule to be associated with these events and send these events to
their targets to be processed, or you can take action on these events. You can also write rules
to take action on a pre-configured schedule. For example, you can write a rule to take a
snapshot of an Elastic Block Store volume at a pre-defined time. This lifecycle of events is
depicted in the next diagram:
Figure 7 - AWS CloudWatch Events
AWS services such as AWS EC2, auto scaling, and CloudTrail emit events that are visible in
AWS CloudWatch events. You can also generate custom events for your application using
the PutEvents API. Targets are systems that process events. These targets could be an EC2
instance, a Lambda function, Kinesis streams, or your built-in targets. A target receives an
event in the JavaScript Object Notation (JSON) format.
Monitoring in AWS
[ 172 ]
A rule will match events in a CloudWatch stream and route these events to targets for
further processing. You can use a single rule to route to multiple targets; up to a maximum
of 5 targets can be routed, and these can be processed in parallel. Rules are not sequential,
that is, they are not processed in any particular order, allowing all departments in an
organization to search and process events that are of interest to them. You can create a
maximum of 100 rules per region for your AWS account. This is a soft limit and can be
increased if required by contacting AWS support.
Alarms
An alarm watches over a single metric. You can create an alarm for any AWS resource you
monitor, for example. you can monitor EC2 instances, S3 buckets, S3, billing, EBS volumes,
databases, and so on. You can also create an alarm for a custom metric that you create for
your application. An alarm will take one or more actions based on that metric crossing the
threshold either once or multiple times over a period of time. These actions could be one of
the following:
EC2 action
Auto scaling
Notification to an SNS topic
You can add alarms to dashboards. You can also view alarm history for the past 14 days,
either through the AWS CloudWatch console or through the API by using the
DescribeAlarmHistory function. There are three states of an alarm, as follows:
OK: Metric is within the defined threshold
ALARM: Metric has breached the threshold
INSUFFICIENT_DATA: Either the metric is not available or there isn't enough
metric data available to evaluate the state of the alarm
You can create a maximum of 5000 alarms in every region in your AWS account. You can
create alarms for various functions such as starting, stopping, terminating, or recovering an
EC2 instance in the event of an incident, or when an instance is undergoing an interruption
in service.
Monitoring in AWS
[ 173 ]
There are two steps for creating an alarm; first we need to select a metric and second we
need to define an alarm. We have already looked at step 2 earlier in this chapter. Let us look
at step one, 1. Select Metric, as shown in the following figure.
The following example is for creating an alarm for a stand alone EC2 instance. Note that we
can also create alarms for an auto scaling group, an Amazon Machine Image (AMI), or 
across all instances. We selected CPUUtilization metric, among one of many metrics
available for an EC2 instance. Statistic chosen is Average and the period is 5 Minutes:
Figure 8 - AWS CloudWatch alarm
Monitoring in AWS
[ 174 ]
Log Monitoring
AWS CloudWatch Logs enable you to monitor and store logs from various sources such as
EC2 logs, CloudTrail logs, logs for Lambda functions, and so on. You can create metric
filters for these log data and treat them in similar way as any other metrics. You can create
alarms for these metrics, add them to dashboards, and take actions against these alarms. It
uses your log data to monitor, so it does not require any code changes. Your log data is
encrypted while in transit and at rest when it is processed by AWS CloudWatch Logs. You
can consume log data from resources in any region, however, you can view log data only
through AWS CloudWatch Logs in regions where this is supported.
AWS CloudWatch Logs is a fully managed service so you don't have to worry about
managing the infrastructure to support an increase in your load when you have scores of
resources sending continuous log streams to CloudWatch Logs for storage, processing, and
monitoring.
As shown in the next figure, we have created a graph called LambdaLog that shows log
group metrics such as IncomingLogEvents and IncomingBytes. These metrics can be
monitored for multiple log groups. Moreover, these logs can be shared through the AWS
CloudWatch console. Just like any other graph in AWS CloudWatch, we have an option to
select a period and graph type. For this example, we chose the graph 1 week of data in the
Stacked area format:
Figure 9 - AWS CloudWatch log monitoring
Monitoring in AWS
[ 175 ]
To create a logs metric filter, you need to follow a two step process: first you define a
pattern and then you assign a metric. By creating these metric filters, we can monitor events
in a log group as and when they are sent to CloudWatch Logs. We can monitor and count
exact values such as Error or 404 from these log events and use this information to take
any actions.
For the first step, we need to create a logs metric filter as shown in the next screenshot. In
this example, we are searching for the Error word in our log data to find out how many
errors we have received for our Lambda function. This Lambda function,
S3LambdaPutFunction, is sending continuous log streams to the CloudWatch Logs. You
can also test this metric filter based on your existing log data.
Once you are done with this step, you can go to the second step and assign values for your
metric such as metric name, metric value, and metric namespace:
Figure 10 - AWS CloudWatch Create Logs Metric
Monitoring in AWS
[ 176 ]
Monitoring Amazon EC2
For all your servers in the cloud that you provision through the Amazon Elastic Compute
Cloud (EC2) service, monitoring is an integral part for maintaining security, availability,
and an acceptable level of performance for these servers, as well as applications running on
those servers. AWS provides multiple manuals as well as automated solutions for
monitoring your EC2 instances comprehensively. AWS recommends having a monitoring
plan in place to effectively monitor your EC2 instances so that you can have reactive as well
as proactive measures in place in the event of an incident.
A typical monitoring plan contains the following information:
Identify resources to be monitored
Define tools for monitoring these resources
Choose metrics to be monitored for these resources
Define thresholds for these metrics
Set alarms for these thresholds with actions
Identify users to be notified through these alarms
Configure actions to be taken in the state of alarm
Once you have a monitoring plan in place, setup a baseline for acceptable performance of
your EC2 instances and applications. This baseline would consist of metrics such as CPU
utilization, disk usage, memory utilization, network performance, and so on. You should
continuously measure your monitoring plan against this baseline performance and update
your plan if required.
Automated monitoring tools
Let us look at automated monitoring tools available in AWS to monitor your EC2 instances:
System status checks: AWS continuously monitors the status of AWS resources that are
required to keep your EC2 instances up and running. If a problem is found, it will require
AWS involvement to get fixed. You have an option to wait for AWS to fix this problem or
you can resolve it yourself either by stopping, terminating, replacing, or restarting an
instance. The following are the common reasons for system status check failure:
Hardware and/or software issues on the system host
Loss of power on the system
Loss of network connectivity
Monitoring in AWS
[ 177 ]
Instance status checks: AWS also continuously checks the software and network
configuration for all of your instances that might result in the degradation of performance
of your EC2 instances. Usually, you will be required to fix such issues by either restarting
your instance or making changes in the operating system for your instance. The following
are the common reasons for instance status check failure:
Corrupt filesystem
Failed system status check
Exhausted memory
Issues with networking configuration
Incompatible Kernel
The following screenshot shows a successfully completed system status checks and instance
status checks for one instance in the AWS console:
Figure 11 - AWS system and instance checks
CloudWatch alarms: You can configure alarms for sustained state changes for
your resources for a configurable period or a number of periods. You can watch a
metric for your instance and take multiple actions such as sending a notification
or trigger to the auto scaling policy based on CloudWatch alarms. Note that
alarms work when there is a sustained change in the state of resources; they don't
work when the state is changed once.
Monitoring in AWS
[ 178 ]
CloudWatch events: You can automate responses to system events for all your
AWS services and resources by using CloudWatch events. System events or
custom events for your resources are delivered to the CloudWatch events stream
on a near real-time basis, which enables you to take action immediately. You can
write rules for system events as soon as they reach the CloudWatch events
stream. These rules can contain automated actions in response to system events.
CloudWatch logs: You can monitor, store, and process logs from your EC2
instances using CloudWatch logs. This is a fully managed service, so you don't
have to worry about managing the infrastructure for log management for your
EC2 instances.
EC2 monitoring scripts: You can write scripts in Perl or Python to monitor your
EC2 instances through custom metrics that are not natively provided by AWS
CloudWatch. Some of these metrics are memory, disk, and so on, and are not
available in AWS CloudWatch because AWS does not have access to the
operating systems of your EC2 instance.
AWS Management Pack for Microsoft System Center Operations Manager:
You can link your EC2 instances with operating systems such as Linux or
Windows running inside these EC2 instances with the help of this pack. It is an
extension to the existing Microsoft System Center Operations Manager. You can
access and monitor applications running on your AWS resources with the help of
this AWS Management Pack and gain deep insights about the health and
performance of these applications. This pack uses metrics and alarms to monitor
your AWS resources in AWS CloudWatch. These metrics and alarms appear as
performance counters and alerts in the Microsoft System Center.
By using this pack, which is available in the form of a plug in, you can view
all your resources in a single Operations Manager console. You need to
download and install it to use it.
Monitoring in AWS
[ 179 ]
You can monitor the following AWS resources, among many others that are shown in the
following figure:
EC2 instances
EBS volumes
CloudWatch alarms
CloudWatch custom alerts
CloudFormation stacks
Elastic beanstalk applications
The AWS Management Pack for System Center 2012 Operations Manager can discover and
monitor your AWS resources, such as EC2 instances, Elastic Load Balancers, and so on, by
using management servers that are part of a resource pool. This pool can get additional
capacity by adding more management servers if the number of AWS resources to be
monitored is increased.
A typical AWS Management Pack has multiple components as shown in the following
figure:
Operations manager infrastructure: This consists of management servers, one or
multiple servers that can be deployed either on-premises or in AWS. This
infrastructure also includes dependencies for these servers including Microsoft
SQL Server and so on.
Resource pool: This pool consists of one or more management server that have
internet connectivity for communicating with AWS through AWS SDK for .NET.
AWS credentials: These credentials include an access key ID along with a secret
access key. These credentials are passed in API calls to AWS by management
servers. AWS Management Pack needs to be configured with these credentials.
AWS recommends that an IAM user with read-only access is created along with
these credentials.
Monitoring in AWS
[ 180 ]
EC2 instances: You will install an operations manager agent on these EC2
instances in order to see the operating system and application metrics along with
EC2 instance metrics. These are virtual computers in the AWS cloud.
Figure 12 - AWS Management Pack
Manual monitoring tools
While AWS provides multiple tools, services, and solutions to automate monitoring for
your EC2 instances, there are data points and items that are not covered by these automated
monitoring tools. For such items, we need to rely on EC2 dashboards and CloudWatch
dashboards available in the AWS Management Console. Let us look at these two
dashboards:
Monitoring in AWS
[ 181 ]
EC2 dashboard: The EC2 dashboard shows the following information about your
EC2 instances and the environment in which your EC2 instances are running:
Service health and scheduled events for the selected region
Instance state
Status checks
Alarm status
Metric details for instances
Metric details for volumes
CloudWatch dashboard: You can use the CloudWatch dashboard to troubleshoot
issues related to EC2 instances and monitor the metrics trends. These trends can
be analyzed to provide insights about health and performance of your AWS
resources including your EC2 instances. You can search and plot metrics on
graphs for your EC2 instances. Alongside this, you can also see the following
information on the CloudWatch dashboard:
Current alarms and their status
Graphs of alarms and resources
Service health status
Best practices for monitoring EC2 instances
Let us look at the following best practices for monitoring EC2 instances:
Ensure monitoring is prioritized for hiving off small issues before they become
big problems; use the drill down approach
Create and implement a comprehensive monitoring plan as discussed earlier in
this chapter
Use AWS CloudWatch to collect, monitor, and analyze data for all your resources
in all regions
Automate monitoring of all your resources
Continuously monitor and check log files for your EC2 instances
Periodically review your alarms and thresholds
Use one monitoring platform to monitor all your AWS resources and applications
running on these AWS resources
Integrate metrics, logs, alarms, and trends to get a complete picture of your entire
environment
Monitoring in AWS
[ 182 ]
Summary
In this chapter, we learnt about monitoring the cloud and how AWS CloudWatch enables
us to monitor all resources in AWS cloud through its various features, and the benefits of
using AWS CloudWatch. We also went through its architecture in detail.
We learnt about all the components of AWS CloudWatch such as metrics, alarms,
dashboards, and so on, to create a comprehensive monitoring solution for our workload.
We now know how to monitor predefined and custom metrics as well as how to log data
from multiple sources, such as EC2 instances, applications, AWS CloudTrail, and so on.
Next, we learnt about monitoring EC2 instances for our servers in the cloud. We went
through various automated and manual tools available in AWS to monitor our EC2
instances thoroughly. We deep dived into AWS Management Pack, which helps us to
monitor all our resources in AWS and outside of AWS in one common console.
Lastly, we learnt about the best practices for monitoring EC2 instances.
In the next chapter, Logging and Auditing in AWS, we will learn how logging and auditing
works in AWS. These two activities go hand in hand for any environment, and AWS
ensures that its users have all the information they require when it comes to logging and
auditing. Most of the AWS service generates logs for all activities, and AWS has one fully
managed service in AWS CloudTrail that logs all API activities for your AWS account.
We will learn about these AWS services, and we will also learn about creating a fully
managed logging and auditing solution, in the next chapter.
8
Logging and Auditing in AWS