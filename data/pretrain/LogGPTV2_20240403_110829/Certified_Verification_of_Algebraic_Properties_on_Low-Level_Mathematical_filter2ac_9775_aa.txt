title:Certified Verification of Algebraic Properties on Low-Level Mathematical
Constructs in Cryptographic Programs
author:Ming-Hsien Tsai and
Bow-Yaw Wang and
Bo-Yin Yang
Certified Verification of Algebraic Properties on Low-
Level Mathematical Constructs in Cryptographic Programs
Ming-Hsien Tsai
Academia Sinica
Taipei, Taiwan
PI:EMAIL
Bow-Yaw Wang
Academia Sinica
Taipei, Taiwan
PI:EMAIL
Bo-Yin Yang
Academia Sinica
Taipei, Taiwan
PI:EMAIL
ABSTRACT
Mathematical constructs are necessary for computation on the
underlying algebraic structures of cryptosystems. They are often
written in assembly language and optimized manually for efficiency.
We develop a certified technique to verify low-level mathematical
constructs in X25519, the default elliptic curve Diffie-Hellman key
exchange protocol used in OpenSSH. Our technique translates an
algebraic specification of mathematical constructs into an algebraic
problem. The algebraic problem in turn is solved by the computer
algebra system Singular. The proof assistant Coq certifies the
translation and solution to algebraic problems. Specifications about
output ranges and potential program overflows are translated to
SMT problems and verified by SMT solvers. We report our case
studies on verifying arithmetic computation over a large finite field
and the Montgomery Ladderstep, a crucial loop in X25519.
CCS CONCEPTS
• Security and privacy → Logic and verification;
KEYWORDS
cryptography; verification; low-level implementation
1 INTRODUCTION
In order to take advantage of computer security offered by modern
cryptography, cryptosystems must be realized by cryptographic
programs where mathematical constructs are required to compute
on the underlying algebraic structures of cryptosystems. Such math-
ematical constructs are frequently invoked in cryptographic pro-
grams; they are often written in assembly language and manually
optimized for efficiency. Security of cryptosystems could be com-
promised should programming errors in mathematical constructs
be exploited by adversaries. Subsequently, security guarantees of
cryptographic programs depend heavily on the correctness of math-
ematical constructs. In order to build secure cryptosystems, we
This work was supported by the Ministry of Science and Technology (MOST), Tai-
wan, through projects no 103-2221-E-001-020-MY3 and 105-2221-E-001-014-MY3; and
by Academia Sinica Thematic Project Socially Accountable Privacy Framework for
Secondary Data Usage.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134076
develop a certified technique to verify low-level mathematical con-
structs used in the security protocol X25519 automatically in this
paper.
X25519 is an Elliptic Curve Diffie-Hellman (ECDH) key exchange
protocol; it is a high-performance cryptosystem designed to use the
secure elliptic curve Curve25519 [8]. Curve25519 is an elliptic curve
offering 128 bits of security when used with ECDH. In addition to al-
lowing high-speed elliptic curve arithmetic, it is easier to implement
properly, not covered by any known patents, and moreover less sus-
ceptible to implementation pitfalls such as weak random-number
generators. Its parameters were also selected by easily described
mathematical principles. These characteristics make Curve25519
a preferred choice for those who are leery of curves which might
have intentionally inserted backdoors, such as those standardized
by the United States National Institute of Standards and Technol-
ogy (NIST). Indeed, Curve25519 is currently the de facto alternative
to the NIST P-256 curve. Consequently, X25519 has a wide vari-
ety of applications including the default key exchange protocol in
OpenSSH since 2014 [31].
Most of the computation in X25519, in trade parlance, is in a
“variable base point multiplication,” and the centerpiece is the Mont-
gomery Ladderstep. This is usually a large constant-time assembly
program performing the finite-field arithmetic that implements the
mathematics on Curve25519. Should the implementation of Mont-
gomery Ladderstep be incorrect, so would that of X25519. Obviously
for all its virtues, X25519 would be pointless if its implementation
is incorrect. This may be even more relevant in cryptography than
most of engineering, because cryptography is one of the few disci-
plines with the concept of an omnipresent adversary, constantly
looking for the smallest edge — and hence eager to trigger any
unlikely event. Revising a cryptosystem due to rare failures poten-
tially leading to a cryptanalysis is not unheard of [24]. Thus, it is
important for security that we can show the computations com-
prising the Montgomery Ladderstep or (even better) the X25519
protocol to be correct.
Several obstacles need be overcome for the verification of math-
ematical constructs in X25519. The key exchange protocol is based
on a group induced by Curve25519. The elliptic curve is in turn de-
fined over the Galois field GF(2255 − 19). To compute on the elliptic
curve group, arithmetic computation over GF(2255−19) needs to be
correctly implemented. Particularly, 255-bit multiplications modulo
2255 − 19 must be verified. Worse, commodity computing devices
do not support 255-bit arithmetic computation directly. Arithmetic
over the Galois field needs to be implemented by sequences of 32-
or 64-bit instructions of the underlying architectures. One has to
verify that a sequence of 32- or 64-bit instructions indeed computes,
say, a 255-bit multiplication over the finite field. Yet this is only a
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1973single step in the operation on the elliptic curve group. In order to
compute the group operation, another sequence of arithmetic com-
putation over GF(2255 − 19) is needed. Particularly, a crucial step,
the Montgomery Ladderstep, requires 18 arithmetic computations
over GF(2255 − 19) [25]. The entire Ladderstep must be verified to
ensure security guarantees offered by Curve25519.
In this paper, we focus on algebraic properties about low-level
implementations of mathematical constructs in cryptographic pro-
grams as well as range properties about program outputs. Mathe-
matical constructs by their nature perform computation on underly-
ing algebraic structures. We aim to verify whether they perform the
intended algebraic computation correctly. To this end, we propose
the domain specific language bvCryptoLine with operations on
fixed-width bit-vectors for low-level mathematical constructs. Al-
gebraic pre- and post-conditions of programs together with range
information about inputs and outputs in bvCryptoLine are speci-
fied as Hoare triples [23]. Such a specification is converted to static
single assignment form and then translated into (1) an algebraic
problem (called the modular polynomial equation entailment prob-
lem) [4, 22] via zCryptoLine with operations on Z, (2) a range
problem, and (3) the absence of program overflows/underflows.
We use the computer algebra system Singular to solve the alge-
braic problem [21]. The proof assistant Coq is used to certify the
correctness of translations, as well as solutions to algebraic prob-
lems computed by Singular [12]. As range problems are hard to
be solved automatically with proof assistants, the range problem
and the absence of program overflows/underflows are verified by
SMT (Satisfiability Modulo Theories) solvers. Correctness of the
translation to SMT formulas is again certified by Coq. The results
of SMT solvers however are not certified in our implementation.
The trusted computing base of our approach hence includes SMT
solvers and Coq. The translation to bvCryptoLine is also included
in the base if the program to be verified is not in bvCryptoLine.
A fully certified integration of SMT solvers in Coq can be used to
reduce the trusted computing base in the future [17].
We report case studies on verifying mathematical constructs
used in the X25519 ECDH key exchange protocol [9, 10]. For each
arithmetic operation (such as addition, subtraction, and multiplica-
tion) over GF(2255−19), their low-level real-world implementations
are converted to our domain specific language bvCryptoLine man-
ually. We specify algebraic properties of mathematical constructs
in Hoare triples. Mathematical constructs are then verified against
their algebraic specifications with our automatic technique. The
implementation of the Montgomery Ladderstep is verified similarly.
We have the following contributions:
• We propose a domain specific language bvCryptoLine
for modeling low-level mathematical constructs used in
cryptographic programs.
• We give a certified verification condition generator from
algebraic specifications of programs to the modular poly-
nomial equation entailment problem.
• We give a certified translation from range problems and
overflow/underflow checks to SMT formulas.
• We verify arithmetic computation over a finite field of
order 2255 − 19 and a critical program (the Montgomery
Ladderstep) automatically.
algebraic and range speci-
fications in bvCryptoLine
to SSA (Sec. 4.1)
SSA form of algebraic and range
specification in bvCryptoLine
to zCryptoLine (Sec. 4.2)
SSA form of algebraic spec-
ification in zCryptoLine
to entailment (Sec. 4.3)
polynomial equation entailment
solved by (Sec. 5.2)
Singular
range specification
overflow/underflow check
solved by (Sec. 5.1)
SMT solvers
Figure 1: The verification flow. Except the answers from SMT
solvers, all the translations and the answers from Singular
are certified by Coq.
• To the best of our knowledge, our work is the first au-
tomatic and certified verification on real cryptographic
programs with minimal human intervention.
Related Work. Low-level implementations of mathematical con-
structs have been formalized and manually proved in proof assis-
tants [1–3, 26, 27]. A semi-automatic approach [14] has successfully
verified a hand-optimized assembly implementation of the Mont-
gomery Ladderstep with SMT solvers, manual program annotation,
and a few Coq proofs. A C implementation of the Montgomery Lad-
derstep has been automatically verified with gfverif [11], which
implements a specialized range analysis and translates verifica-
tion problems to polynomial equations later solved by the Sage
computer-algebra system [16]. Both the range analysis and the
translation in gfverif are uncertified. Re-implementations of math-
ematical constructs in F* [18] have been verified using a combi-
nation of SMT solving and manual proofs. Vale [13] provides a
meta language for defining syntax and semantics of assembly code.
Several algorithms have been implemented in Vale and verified
using SMT solvers with the help of manually constructed lemmas.
Several cryptographic implementations in C and Java have been
automatically verified by SAW to be equivalent to their reference
implementations written in Cryptol [30] but the correctness of ref-
erence implementations is not proven and the verification results
are not certified. The OpenSSL implementations of SHA-256 and
HMAC have been formalized and manually proved in Coq [5, 6].
Synthesis of assembly codes for mathematical constructs has been
proposed in [19]. Although the synthesized codes are correct by
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1974construction, they are not as efficient as hand-optimized assembly
implementations.
This paper is organized as follows. After preliminaries (Section 2),
our domain specific language is described in Section 3. Section 4
presents the translation to the algebraic problem. A certified trans-
lation from range and overflow/underflow checks to SMT formulas
plus a certified solver for the algebraic problem are discussed in
Section 5. Section 6 contains experimental results. It is followed by
conclusions.
2 PRELIMINARIES
We write B = {ff , tt} for the Boolean domain. Let N and Z denote
all natural numbers and all integers respectively. We use [n] to
denote the set {0, 1, . . . , n} for n ∈ N.
A monoid M = (M, ϵ,·) consists of a set M and an associative
binary operator · on M with the identity ϵ ∈ M. That is, ϵ · m =
m · ϵ = m for every m ∈ M. A group G = (G, 0, +) is an algebraic
structure where (G, 0, +) is a monoid and there is a −a ∈ G such
that (−a) + a = a + (−a) = 0 for every a ∈ G. The element −a is
called the inverse of a. G is Abelian if the operator + is commutative.
A ring R = (R, 0, 1, +,×) with 0 (cid:44) 1 is an algebraic structure such
that
• (R, 0, +) is an Abelian group;
• (R, 1,×) is a monoid; and
• × is distributive over +: a × (b + c) = a × b + a × c for every
a, b, c ∈ R.
If × is commutative, R is a commutative ring. A field F = (F , 0,
1, +, ×) is a commutative ring where (F\{0}, 1,×) is also a group.
(N, 1,×) is a monoid. (Z, 0, 1, +,×) is a commutative ring but not
a field. For any prime number ϱ, the set {0, . . . , ϱ − 1} with the
addition and multiplication modulo ϱ forms a Galois field of order
ϱ (written GF(ϱ)). We focus on Galois fields of very large orders,
in particular, ϱ = 2255 − 19.
Fix a set of variables ⃗x. R[⃗x] is the set of polynomials over ⃗x
with coefficients in the ring R. R[⃗x] is a ring. A set I ⊆ R[⃗x] is an
ideal if
• f + д ∈ I for every f , д ∈ I; and
• h × f ∈ I for every h ∈ R[⃗x] and f ∈ I.
Given G ⊆ R[⃗x], ⟨G⟩ is the minimal ideal containing G; G are the
generators of ⟨G⟩. The ideal membership problem is to decide if
f ∈ I for a given ideal I and f ∈ R[⃗x].
Let Vw be the set of all bit-vectors with a bit-width w. The
unsigned value of b ∈ Vw is denoted by |b|. For a natural number
or an integer n, let bvw (n) be the two’s complement representation
of n in a bit-width w. We use the following common operators
for fixed-width bit-vectors: Vw +V Vw : Vw for addition, Vw −V
Vw : Vw for subtraction, Vw ×V Vw : Vw for multiplication,
Vw1 .VVw2 : Vw1+w2 for concatenation, Vw #Vn : Vw +n for zero
extension, Vw ≪V n : Vw for left-shifting, Vw ≫V n : Vw for
logical right-shifting, and Vw [i, j] : Vi−j+1 with 0 ≤ j ≤ i < w for
bits extraction. We also assume comparison operators <V and ≤V
between unsigned values of bit-vectors.
Given a bit-vector b ∈ V2w , define hiV(b) ≜ b[2w − 1, w] for
the extraction of higher w bits, and loV (b) ≜ b[w − 1, 0] for the
extraction of lower w bits. For operations • ∈ {+V,−V,×V}, we
define their extended version •# which performs the original opera-
tion after doubling the width of operands by zero extension. In the
extended operations, the width of operands is doubled only once.
For example, given b1, b2, b3 ∈ Vw , we have b1 +#
V b1 ≜ (b1 #V w )
V b3 ≜ (b1 #V w ) +V (b2 #V w ) +V
+V (b2 #V w ) and b1 +#
(b3 #V w ).
3 DOMAIN SPECIFIC LANGUAGE –
V b2 +#
BVCRYPTOLINE
One of the big issues with modern cryptography is how the as-
sumptions match up with reality. In many situations, unexpected
channels through which information can leak to the attacker may
cause the cryptosystem to be broken. Typically this is about timing
or electric power used. In side-channel resilient implementations,
the execution time is kept constant (as much as possible) to prevent
unexpected information leakage. Constant execution time however
is harder to achieve than one would imagine. Modern processors
have caches and multitasking. This makes it possible for one ex-
ecution thread, even when no privilege is conferred, to affect the
running time of another – simply by caching a sufficient amount
of its own data in correct locations through repeated accesses, and
then observing the running time of the other thread. The instruc-
tions in the other thread which use the “evicted” data (to make
room for the data of the eavesdropping thread) then have to take
more time getting its data back to the cache [7].
Thus, the innocuous actions of executing (a) a conditional branch
instruction dependent on a secret bit, and (b) an indirect load in-
struction using a secret value in the register as the address, are both
potentially dangerous leaks of information. Consequently, we are
not often faced with secret-dependent branching or table-lookups in
the assembly instructions, but a language describing cryptographic
code might include pseudo-instructions to cover instruction se-
quences, phrases in the language if you will, that is used to achieve
the same effect. The domain specific language bvCryptoLine is
designed based on the same principles. Conditional branches and
indirect memory accesses are not admitted in bvCryptoLine.
Assume some machine architecture with a positive wordsize w.
A program is a straight line of instructions over bit-vectors with
bit-width w.
Var
bAtom ::= Var | Vw
bStmt
::= x | y | z | · · ·
::= Var ← bAtom
| Var ← bAtom + bAtom
| Var Var ← bAtom + bAtom
| Var ← bAtom + bAtom + Var
| Var Var ← bAtom + bAtom + Var
| Var ← bAtom − bAtom
| Var ← bAtom × bAtom
| Var Var ← bAtom × bAtom
| Var ← bAtom ≪ Vw
| Var Var ← bAtom@Vw
| Var Var ← (bAtom.bAtom) ≪ Vw
Let bSt ≜ Var → Vw and ν ∈ bSt be a state (or valuation).
That is, a state ν is a mapping from variables to bit-vectors in Vw.
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1975v←a1+a2
c v←a1+a2
v←a1+a2+y
c v←a1+a2+y
=⇒
=⇒
=⇒
=⇒
=⇒
=⇒
=⇒
v←a≪n
=⇒
vh vl←a@n
=⇒
=⇒
v←a1−a2
v←a1×a2
vh vl←a1×a2
vh vl←(a1 .a2)≪n