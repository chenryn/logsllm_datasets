如果文件存在/可执行，就返回“1”，否则返回“0"。
filesxlets*fred.txt*
file executable"fred.txt"
(4)extension和rootname选项
file extenslon name
file rootnane nane
分别返回文件的扩展名（文件名最后一-个句点后面的部分，包括该句点）和文件的根名字
（文件名最后一个句点前面的部分）。
file oxteneloa*fred.txt*
-txt
(5)isdirectory和isfile选项
fila iadirectory nane
file lsfile ame
如果name是一个子目录/普通文件，就返回“1"，否则返回“0”。
(6)owned选项
file owned nane
如果文件name的属主是当前用户，就返回“1”.否则返回“0”。
(7)readable和writeable选项
file readable naze
file writeable nane
如果文件name可读/可写，就返回“1"，否则返回“0”。
(8)size选项
file size nane
返回以字节计算的文件长度。
根据读者使用的操作系统，你还可能能够使用其他的选项。其中包括用来追踪某个Tcl数组
里stat或istat系统调用结果的选项。详细情况请参考系统方面的文档。
15.2一个Tcl程序
我们用下面这个简单的程序来演示部分Tcl语言中的功能。它的作用是统计一个文本文件里
各个单词使用的频率。它可以被用做某个单词索引软件的组成部分。
动手试试：一个单词使用频率统计程序
1）敬入下面给出的concord.tcl程序清单。在开始部分，先给出这个脚本在其下执行的shell并
加入jaVa编程群：524621833
---
## Page 493
第15章工具命今语言Tcl
475
对一些变量进行初始化。
#1'usr/bin/tcsh
set VerboseFlag false
.[1[-\pr:0e. #ss
set FileToRead *."
2）记住argv是程序的参数构成的数组，我们来分析命令行参数。设置FileToRead变量并给出
使用帮助。
foreach arg Sargv 
switchglob --$arg
{set FileToRead[string rane Saro 2 end]}
{set VerboseFiag true}
Gefault {error *bad argument: Sarg\n$Usage*:exit 1)
-h
puts stderr Susage: exit :)
1
3）把缺省的输入源设置为标准输人。如果指定了一个文件，就“安全地”打开它。
Set Input stdin
if {$FileToRead != *-*}{
1f[catch (set Input [open $File7oReadr]]res ]{
puts stderr '$res*
exit 1
4）对单词和文本行计数器进行初始化、然后读人输人中的每一行，根据标点符号拆分各行，
增加单词使用频率统计数组中相应的计数值。
set NumberofLines 0
set Numberofkords 0
while (Igets $Input 1ine}>= 0}[
incr NumberofLines
setwords(aplit$line\t.,{\）(\)\[\\;**]
foreach word Swords {
if （{info exists concord(*Sword′)]]{
}else[
iner NumberOfwords
5）输出最后的统计结果，然后输出所有找到的单词，再往后输出每一个单词及其计数值。
SNumberOfwords SNumberOfLines]
puts stdout [array names concord]
foreach word [array names concord][
puts*Svord: Sconcord($word)*
我们用一个文本文件来试试这个程序，比如这个程序的源代码文件。当我们用下面的命令
执行这个程序的时候：
加入jaVa编程群：524621833
---
## Page 494
476
Linux程序设计
S chnod +x concord.tcl
S./concord.tcl -fconcord.tcl
我们将得到如下所示的输出（略有删节）：
Fi1e contained 404.49 worda/1ines
(*SInput*}{f){*exists*}{*d/d)*}{*1ne）{concord²}{*format}{*1*}（*switch}
{xit"}（*stdin*)[*stdout*}(i（’stderr}（*SNumberofLines*){*defauit){*$arg*}
{\t²)（SUsage*)[*#/usr/bin/tclsh*(*2)（*open*}[*r*){*nanes*)[*-{**)
{*string*)(*Sword’]{*$argnsUsage*1
*nates° : 2
.f..,1
*string*: 1
“$arg\nSUsage”:1
Sword°:4
"NunberOfLines′:2
"sline*: 1
"arg":1
"in*r ':
5:.snd
*Usago*:1
"array*: 2
*FileToRead*:2
"foreach:3
"end*:1
"oops′:1
>="：1
"gets*-1
"false*: 1
"true*:1
*-*:2
"SNumberOfWords*:1
"words/1ines\n*: 1
"-glob*:1
操作注释：
出于演示的目的，这个程序在显示单词频率统计清单之前会先显示它找到的单词列表。数
组中的单词序是没有定义的，它依赖于关联数组在Tcl语言里的具体实现办法。如果我们想得
到一个经过排序的输出结果，可以把数组元素们拷贝到一个列表里去，再使用isort命令来完成这
一工作：或者，我们可以把输出经管道送往UNIX的sor程序。
这个程序的工作原理是：先把输人行拆分为一个一个的单词，去掉标点符号，再把这些单
词用做一个关联数组的下标。我们给这个数组起名为concord，它被用来统计单词的使用频率。
我们用一个加上了双引号的字符串做为这个数组的下标，目的是防止因单词中包含着特殊字符
而可能引发的问题。
网络支持
在Tcl7.5往后的版本里，Tel已经能够直接支持联网功能，而以前这需要有第三方增值软件
才行。Tel语言灵活而又简洁的特性加上网络程序设计范例使Tcl的用途更加广泛了。事实上，甚
加入jaVa编程群：524621833
---
## Page 495
第15章工具命令语言Tcl477
至有完全用Tcl语言编写的万维网浏览器呢。其中的关键命令就是socket。
socket host port
在缺省的情况下，socket命令打开一个SOCK_STREAM连接到指定的计算机host上和服务编
号port。它将返回一个能够用在普通Tci输人/输出命令里的通道标识符。
动手试试：
为了演示Tel中套接字的使用方法，我们来重湿一下第14章里的一个小例子，并把它和下面
的Tcl程序进行比较。下面就是用Tel语言编写的socket.c程序的完整清单，它的作用是显示某个
联网计算机上的日期和时间。
为了让这个程序能够正常地工作，请把主机名ilde替换为你自已内部网络上某个系
统正确的名字，或者也可以使用localhost.
#1/usr/bin/tclsh
set sockid [socket ti1de 13]
puts *Tilde says the date is: $date
gets Ssockid date
操作注释：
Tcl（7.5以上版本）内建有对UNIX网络功能的支持。这个程序使用socket命令创建了一个到
达主机tilde第13号端口，即dayrime服务的通信路径。它从套接字连接读取了一个字符串，然后
把它显示出来。
请比较一下这个只有三行的解决方案和第14章里的大程序！
在这个程序里使用gets会造成一个隐患，某些个别的系统管理员会故意把他们的
daytime服务配置为返团一个非常长的字符串的情况，而这可能会给你的机器造成不良
影响。这类不良行为已经在因特网上发生过了，人们称之为“拒绝服务”攻击。
15.3创建一个新Tcl语言
Tcl语言的设计目标之一就是它应该是可以嵌人的，因此我们可以把用Tei语言编写的脚本包
括在其他命令行程序里，甚至可以包括在C语言程序里。事实上，这正是Tel的起因和人们把它
称为工具命令语言的原因。从这一方面看，它与Perl非常相似。
把Tcl结合到你的程序里是相当容易的，只要编写一个简单的对Tcl解释器进行初始化的函数
就可以实现这一点。你可以用Tel函数库来链接你自己的函数，从而创建出符合你自己的特定需
求的Tel解释器来。
这个机制的具体做法超出了本章的讨论范围。事实上，许多Tcl程序员从不创建他们自已的
解释器。他们认为基本的Tcl系统再加上第三方提供的Tcl扩展已经足以满足他们的需要了。
加入jaVa编程群：524621833
---
## Page 496
478Linux程序设计
15.4Tcl语言的扩展
经过多年的努力，现在L经有了许许多多对Tel语言的扩展。它们大多数都是以Tcl语言附加
功能版的面日出现的，专门服务于某一特殊的目的。我们将在这里对其中的几个做一个简单的
介绍。
15.4.1 expect
expeci程序实际上是一个经过功能扩展的Tcl解释器，其附加功能的主要目的瞄准着交互式
程序的自动化控制。我们可以用它来对软件进行测试，这是因为我们可以编写expect脚本向其他
程序传递命令、等得响应、再对那些响应做出反应。它的内建功能包括倒计时和错误恢复。它
能够在接收到一些不同的事件时运行相应的Tcl函数。
expect是由NIST（National Institute of Standard and Technology，国家标准和技术
研究院）的DonLibes在Tcl语言在因特网上发行不久的时候编写的。它是围绕Tcl建立的
第一个大型的程序。
这个扩展的得名源于它所增加的两个重要函数。它们一个是send，用来向另一个被测试程序
发送交互式输入数据；另外一个是expect，用来安排在接收到不同响应（或没有接收到有关响应）
时的程序动作。
15.4.2[incr Tcl]
这个扩展的名字是C++语言的同义词，它给Tel增加了面向对象的功能。
15.4.3TclX
TclX是意思了“extendedTcl”（扩展了的Tcl）。因为它里面包含了许多对应于UNIX系统调
用的附加两数，所以它是UNIX环境里最常用的扩展。TcIX程序能够访问到操作系统的许多底层
功能，但在可移植性方面付出了一定的代价。
15.4.4围形
为了支持图形及其相关的附加操作，入们已经开发出了许多Tcl语言扩展。
Tk
--个由JohnOusterhout开发的重要的Tel扩展是Tk（“ToolKit”，工具箱）它使Tcl获得了创建
和处理图形化用户操作界面对象的能力。利用Tk，我们可以很容易地编写出复杂的图形化程序。
Tk最早是为X窗口系统开发的，但现在它已经有了能够在微软的Windows和苹果电脑公司的
MacOS上：运行的版本（当然还包括Tcl本身）.因此，Tel/Tk程序有能力在不做任何修改的前提下
在多种硬件平台上运行，
我们将在下一章以Tk程序设计为主题进行讨论。
加入iaVa编程群：524621833
---
## Page 497
第15章工具命令语言Tci
15.5本章总结
在这一章里，我们对ToolCommandLanguage（工其命令语言，简称Tel语言）进行了学习。
我们已经看到，它是一种影响深远的可扩展解释型程序设计语言，支持许多高级程序设计语言
才具备的功能，比如关联数组和列表等、
我们简要地介绍了Tcl的几个扩展，这些新创建出来的解释器满足了某些专用软件领域的需要。
我们将在下一章里对Tk（即Tei语言的图形程序设计工具包）进行学习，因为它的出现，
UNIX环境下的许多软件被开发和推广开来。
加入jaVva编程群：524621833
---
## Page 498
第16章X窗口系统的程序设计
在这-章和下一章里，我们将学习如何编写能够运行在UNIX图形化环境一X窗口系统
（简称X）甲的程序。现代的UNIX系统和几乎所有的Linux发行版本都带有某个版本的X。
我们将主要从程序员的角度看待X，并且假设读者对自已系统上X的配置、运行和使用都已
经很熟悉了。
我们将讨论以下几个问题：
·X概念
·X窗口管理器。
·X程序设计的模型。
·Tk：它的素材、绑定和儿何尺寸管理器。
在下.--章里，我们将学习GTK+工具包，它使我们能够使用C语言为GNOME系统编写用户
操作界面程序。
16.1什么是X
X诞生于MIT（麻省理工学院），开发它的目的是为了给图形化程序提供一个统一的环境。现如今，
只要读者使用过计算机、基本上就可以肯定你曾经遇到过微软的Windows、X或苹果公司的MacOS这
三者之一，因此你应该熟悉常用的与图形化用户操作界面（即GU1）有关的概念。需要提醒大家的
是，虽然--个Windows用户能玩得转Mac的操作界面，但对程序员来说它们可是完全不同的两码事。
每种系统上的每一种窗口化环境在程序设计上都是不同的。屏幕显示的控制和程序与用户
之间的通信是不同的。虽然每种系统都为程序员提供了打开和处理屏幕上的窗口的能力，但使
用的具体函数一般是不同的。编写能够运行在超过种系统上的应用程序（不使用额外的工具
包）几乎是一个不可能完成的任务。
为了克服大型主机、小型机和工作站上有专利权的接口系统给我们带来的问题，X窗口系统
对公众是完全开放的，并且已经在许多种系统上得到了实现。它定义了一个基于客户/服务器模
型的程序设计风格，在依赖于硬件的组件和软件应用程序之间有清晰的界线。
X窗口系统主要由四个部分组成，我们将简要对它们进行介绍。它们是：
·X服务器：与用户交互操作。
·X协议：客户/服务器之间的通信。
·X库：程序设计接口。
·X客户：软件应用程序。
16.1.1X服务器
X服务器，或者叫X显示服务器，是一个运行在软件用户计算机上的程序，它负责图形化显
加入jaVa编程群：524621833