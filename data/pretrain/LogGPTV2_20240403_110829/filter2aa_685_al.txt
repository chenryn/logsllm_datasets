### Optimized Text

#### Asynchronous File Reading and Writing
The following Nim code demonstrates how to read from and write to a file asynchronously using the `asyncdispatch` and `asyncfile` modules.

```nim
import asyncdispatch, asyncfile

proc readFiles() {.async.} =
  let file = openAsync("/home/profile/test.txt", fmReadWrite)
  let data = await file.readAll()
  echo(data)
  await file.write("Hello!\n")
  file.close()

waitFor readFiles()
```

**Explanation:**
- **Listing 3.17** performs the same actions as the previous example but with additional features.
- The `await` keyword is used to pause the execution of the `readFiles` procedure until the `Future` it is waiting for is completed.
- While the procedure is paused, the application continues to run, ensuring that the thread is never blocked.
- The entire process is executed in a single thread.
- Multiple asynchronous procedures can be paused at any point, waiting for an event to resume them. Callbacks are used in the background to resume these procedures.

**Return Type:**
- Every procedure marked with the `{.async.}` pragma must return a `Future[T]` object. In this case, `readFiles` returns `Future[void]`, which is done implicitly to avoid writing `Future[void]` explicitly.

**Event Loop Control:**
- The `waitFor` procedure runs the event loop until the `readFiles` procedure finishes its execution.
- `runForever` and `poll` are other ways to control the event loop, each with different use cases (see Table 3.2).

**Table 3.2: Comparison of Common Async Keywords**

| Procedure     | Controls Event Loop Directly | Use Case                                                                 | Description                                                                 |
|---------------|------------------------------|--------------------------------------------------------------------------|-----------------------------------------------------------------------------|
| `runForever`  | Yes                          | Server applications that need to stay alive indefinitely.                | Runs the event loop forever.                                                |
| `waitFor`     | Yes                          | Applications that need to quit after a specific asynchronous procedure.  | Runs the event loop until the specified future completes.                    |
| `poll`        | Yes                          | Applications that need precise control of the event loop.                | Listens for events for the specified amount of time.                         |
| `asyncCheck`  | No                           | Discarding futures safely, typically to execute an async proc without worrying about its result. | Sets the specified futureâ€™s callback property to handle exceptions.           |
| `await`       | No                           | Execute another async proc whose result is needed.                       | Pauses the execution of an async proc until the specified future completes.  |

**Figure 3.16: Execution of Listing 3.17**

- The `readFiles` procedure is paused at various points (e.g., reading and writing) and resumes when the respective operations complete.
- The program exits after the `readFiles` procedure finishes.

**Warning:**
- Procedures like `runForever`, `waitFor`, and `poll` should not be used within async procedures because they control the event loop directly.

### Transferring Data Using Sockets

Now, we will use `await` and asynchronous sockets to complete the implementation of the server.

#### 3.5.3 Transferring Data Asynchronously

You have already initialized an asynchronous socket and stored it in the `server` variable. The next steps are:

1. Bind the socket to a port such as 7687.
2. Call `listen` on the socket to begin listening for new connections.
3. Start accepting connections via the `accept` procedure.

The following code shows a `loop` procedure that performs these steps.

```nim
proc loop(server: Server, port = 7687) {.async.} =
  server.socket.bindAddr(port.Port)
  server.socket.listen()
  while true:
    let (netAddr, clientSocket) = await server.socket.acceptAddr()
    echo("Accepted connection from ", netAddr)
    let client = Client(
      socket: clientSocket,
      netAddr: netAddr,
      id: server.clients.len,
      connected: true
    )
    server.clients.add(client)
    asyncCheck processMessages(server, client)

waitFor loop(server)
```

**Explanation:**
- The `loop` procedure continuously waits for new client connections.
- When a connection is accepted, a new `Client` instance is created and added to the `clients` sequence.
- The `processMessages` procedure is called for each client to handle incoming messages.

#### Testing the Server Without a Client

To test the server, you can use the `telnet` command-line application to connect to the server.

- On Windows, enable Telnet in the Windows Features menu and then connect using `telnet localhost 7687`.
- On UNIX-like systems, simply run `telnet localhost 7687`.

#### Creating a New Client Instance

Extend the `loop` procedure to create a new `Client` instance and add it to the `clients` field.

```nim
while true:
  let (netAddr, clientSocket) = await server.socket.acceptAddr()
  echo("Accepted connection from ", netAddr)
  let client = Client(
    socket: clientSocket,
    netAddr: netAddr,
    id: server.clients.len,
    connected: true
  )
  server.clients.add(client)
  asyncCheck processMessages(server, client)
```

**Explanation:**
- The `acceptAddr` procedure returns the IP address and the client socket.
- A new `Client` instance is created and added to the `clients` sequence.
- The `processMessages` procedure is called for each client.

#### Processing the Client's Messages

Implement the `processMessages` procedure to handle messages from the client.

```nim
proc processMessages(server: Server, client: Client) {.async.} =
  while true:
    let line = await client.socket.recvLine()
    if line.len == 0:
      echo(client, " disconnected!")
      client.connected = false
      client.socket.close()
      return
    echo(client, " sent: ", line)
    for c in server.clients:
      if c.id != client.id and c.connected:
        await c.socket.send(line & "\c\l")
```

**Explanation:**
- The `processMessages` procedure reads messages from the client and displays them.
- If the client disconnects, the procedure closes the socket and exits.
- The message is sent to all other connected clients.

#### Full Server Implementation

The full code listing for `server.nim` should look like this:

```nim
import asyncdispatch, asyncnet

type
  Client = ref object
    socket: AsyncSocket
    netAddr: string
    id: int
    connected: bool

  Server = ref object
    socket: AsyncSocket
    clients: seq[Client]

proc newServer(): Server = Server(socket: newAsyncSocket(), clients: @[])

proc `$`(client: Client): string =
  $client.id & "(" & client.netAddr & ")"

proc processMessages(server: Server, client: Client) {.async.} =
  while true:
    let line = await client.socket.recvLine()
    if line.len == 0:
      echo(client, " disconnected!")
      client.connected = false
      client.socket.close()
      return
    echo(client, " sent: ", line)
    for c in server.clients:
      if c.id != client.id and c.connected:
        await c.socket.send(line & "\c\l")

proc loop(server: Server, port = 7687) {.async.} =
  server.socket.bindAddr(port.Port)
  server.socket.listen()
  while true:
    let (netAddr, clientSocket) = await server.socket.acceptAddr()
    echo("Accepted connection from ", netAddr)
    let client = Client(
      socket: clientSocket,
      netAddr: netAddr,
      id: server.clients.len,
      connected: true
    )
    server.clients.add(client)
    asyncCheck processMessages(server, client)

var server = newServer()
waitFor loop(server)
```

**Explanation:**
- The code includes the definition of `$` for the `Client` type and an `asyncCheck` command to run the `processMessages` procedure in the background.
- The `processMessages` procedure is called for each client, ensuring continuous reading and processing of messages.

#### Adding Network Functionality to the Client

Implement the `connect` procedure to allow the client to connect to the server and receive messages.

```nim
import asyncdispatch, asyncnet, protocol

proc connect(socket: AsyncSocket, serverAddr: string) {.async.} =
  echo("Connecting to ", serverAddr)
  await socket.connect(serverAddr, 7687.Port)
  echo("Connected!")
  while true:
    let line = await socket.recvLine()
    let parsed = parseMessage(line)
    echo(parsed.username, " said ", parsed.message)
```

**Explanation:**
- The `connect` procedure connects to the server and starts waiting for messages.
- The `recvLine` procedure reads a single line at a time, which is then parsed and displayed.

#### Non-blocking Standard Input Reading

Modify the `client.nim` to read standard input non-blockingly.

```nim
var messageFlowVar = spawn stdin.readLine()
while true:
  if messageFlowVar.isReady():
    let line = messageFlowVar.read()
    # Process the line
    messageFlowVar = spawn stdin.readLine()
```

**Explanation:**
- The `spawn` function is used to read from standard input non-blockingly.
- The `isReady` method checks if the input is ready to be read.

This completes the implementation of the server and client, allowing them to communicate asynchronously.