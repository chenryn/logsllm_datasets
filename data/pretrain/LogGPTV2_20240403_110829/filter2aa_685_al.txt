import asyncdispatch, asyncfile
proc readFiles() {.async.} =
var file = openAsync("/home/profile/test.txt", fmReadWrite)
let data = await file.readAll()
echo(data)
await file.write("Hello!\n")
  file.close()
waitFor readFiles()
Listing 3.17 performs the same actions and more than the code in listing 3.16. Every time
the await keyword is used, the execution of the readFiles procedure is paused until the
Future that’s awaited is completed. Then the procedure resumes its execution, and the
value of the Future is read automatically. While the procedure is paused, the application
continues running, so the thread is never blocked. This is all done in a single thread.
Multiple async procedures can be paused at any point, waiting for an event to resume
them, and callbacks are used in the background to resume these procedures.
 Every procedure marked with the {.async.} pragma must return a Future[T]
object. In listing 3.17, the procedure might seem like it returns nothing, but it returns
a Future[void]; this is done implicitly to avoid the pain of writing Future[void] all
the time. Any procedure that returns a Future[T] can be awaited. Figure 3.16 shows
what the execution of listing 3.17 looks like.
 The waitFor procedure that’s used instead of runForever runs the event loop
until the readFiles procedure finishes its execution. Table 3.2 compares all the dif-
ferent async keywords you’ve seen so far.
Listing 3.17
Reading files and writing to them in sequence using await
Table 3.2
Comparison of common async keywords
Procedure
Controls event 
loop directly
Use case
Description
runForever
Yes
Usually used for server applications 
that need to stay alive indefinitely.
Runs the event loop forever.
waitFor
Yes
Usually used for applications that 
need to quit after a specific asynchro-
nous procedure finishes its execution.
Runs the event loop until the speci-
fied future completes.
The {.async.} pragma is used to specify that 
the readFiles procedure is asynchronous.
Opens the ~/test.txt file
asynchronously in fmReadWrite
mode so that the file can be
read and written to
The await keyword 
signifies that 
readFiles should be 
paused until the file 
is fully read.
Displays the 
contents of the file
Writes some data to the file. The 
procedure is paused until the data 
is successfully written to the file.
Runs the event loop 
until readFiles finishes
Licensed to   
90
CHAPTER 3
Writing a chat application
poll
Yes
For applications that need precise 
control of the event loop. The 
runForever and waitFor proce-
dures call this.
Listens for events for the specified 
amount of time.
asyncCheck
No
Used for discarding futures safely, typ-
ically to execute an async proc without 
worrying about its result.
Sets the specified future’s callback 
property to a procedure that will 
handle exceptions appropriately.
await
No
Used to execute another async proc 
whose result is needed in the line of 
code after the await.
Pauses the execution of an async 
proc until the specified future 
completes.
Table 3.2
Comparison of common async keywords (continued)
Procedure
Controls event 
loop directly
Use case
Description
waitFor readFiles() 
openAsync(...)
await readAll()
poll()
poll()
poll()
Read 30% of ﬁle  
Read 80% of ﬁle  
Read 100% of ﬁle  
echo(data)
await write(...) 
poll()
Program exit 
Written 100% of ﬁle 
readFiles
paused 
readFiles
paused 
readFiles
ﬁnished 
Figure 3.16
The execution of listing 3.17
Licensed to   
91
Transferring data using sockets
WARNING: PROCEDURES THAT CONTROL THE EVENT LOOP
Typically, runForever,
waitFor, and poll shouldn’t be used within async procedures, because they
control the event loop directly.
Now, I’ll show you how to use await and asynchronous sockets to finish the implemen-
tation of the server. 
3.5.3
Transferring data asynchronously
You’ve already initialized an asynchronous socket and stored it in the server variable.
The next steps are as follows:
1
Bind the socket to a port such as 7687.4
2
Call listen on the socket to begin listening for new connections.
3
Start accepting connections via the accept procedure.
You’ll need to use await, so you’ll need to introduce a new async procedure. The fol-
lowing code shows a loop procedure that performs these steps.
proc loop(server: Server, port = 7687) {.async.} =
server.socket.bindAddr(port.Port)
server.socket.listen()
while true:
let clientSocket = await server.socket.accept()
echo("Accepted connection!")
waitFor loop(server)
The loop procedure will continuously wait for new client connections to be made.
Currently, nothing is done with those connections, but you can still test that this
works. Add the preceding code to the end of server.nim. Then, compile and run the
server by running nim c -r src/server.
TESTING A SERVER WITHOUT A CLIENT
Your client hasn’t yet been completed, so you can’t use it to test the server. But it’s
fairly easy to use a command-line application called telnet to connect to your new
server.
 On Windows, you may need to enable Telnet in the Windows Features menu—you
can find more information at this link: http://mng.bz/eSor. After enabling the telnet
feature, you should be able to open a new command window, type telnet at the
4 Most of the easy-to-remember ports are used by other applications: https://en.wikipedia.org/wiki/
List_of_TCP_and_UDP_port_numbers.
Listing 3.18
Creating a server socket and accepting connections from clients
Sets up the server socket by 
binding it to a port and 
calling listen. The integer 
port param needs to be cast 
to a Port type that the 
bindAddr procedure expects.
Calls accept on the server
socket to accept a new client.
The await keyword ensures that
the procedure is paused until a
new client has connected.
Executes the loop procedure and 
then runs the event loop until the 
loop procedure returns.
Licensed to   
92
CHAPTER 3
Writing a chat application
prompt, and then connect to your server by executing the open localhost 7687 com-
mand. The server should then output “Accepted connection!”
 On UNIX-like operating systems such as Linux and Mac OS, the telnet application
should be available by default. You can simply open a new terminal window and exe-
cute telnet localhost 7687. The server should then output “Accepted connection!”
CREATING A NEW CLIENT INSTANCE TO HOLD DATA ABOUT THE CLIENT
Now, let’s extend the loop procedure to create a new Client instance and add it to
the clients field. Replace the while loop with the following.
while true:
let (netAddr, clientSocket) = await server.socket.acceptAddr()
echo("Accepted connection from ", netAddr)
let client = Client(
socket: clientSocket,
netAddr: netAddr,
id: server.clients.len,
connected: true
)
server.clients.add(client)
The acceptAddr variant of the accept procedure has been changed to return the IP
address of the client that has connected. It returns a tuple, the first value of which is
the IP address of the client, and the second being the client socket. The preceding
code uses tuple unpacking, which allows for these two values to be assigned immediately
to two different variables.
 When a client successfully connects, the next line writes a message to the terminal
that includes the IP address of the client that just connected. After this, a new instance
of the Client object is created, with each field assigned a new value using a construc-
tor. Finally, the new instance is added to the server’s clients sequence.
 Recompiling this code and repeating the testing steps described in the section titled
“Testing a server without a client” should display “Accepted connection from 127.0.0.1.”
But sending messages won’t yet work. 
PROCESSING THE CLIENT’S MESSAGES
Messages typed into the prompt won’t be received by the server yet, even after con-
necting with Telnet, because the messages still aren’t being read from the connected
clients. Let’s implement the server code to do that now.
proc processMessages(server: Server, client: Client) {.async.} =
while true:
let line = await client.socket.recvLine()
Listing 3.19
Creating a new Client instance for each connection
Listing 3.20
Receiving messages from a client
acceptAddr returns a tuple[string, 
AsyncSocket] type. The tuple is unpacked 
into two variables.
A message is displayed, indicating that a
client has connected and providing its
network address.
Initializes a new instance of the 
Client object and sets its fields
Adds the new instance of the 
client to the clients sequence
Waits for a single line to 
be read from the client
Licensed to   
93
Transferring data using sockets
if line.len == 0:
echo(client, " disconnected!")
client.connected = false
client.socket.close()
return
echo(client, " sent: ", line)
Make sure you place this processMessages procedure above the loop procedure.
Later, you’ll need to call this procedure from the loop procedure, and this procedure
must be above the call site in order for that to work.
 You may find it strange to see another infinite loop, denoted by the while true
statement, at the top of the procedure body. Surely once this procedure is called, its
execution will never stop. There is truth to that, but note this is an async procedure, so
it can be paused. This procedure will never stop executing, but it will pause its execu-
tion when await client.socket.recvLine() is called. Other pieces of code will be
executing while this procedure waits for the result of client.socket.recvLine().
 The result will contain a single message sent by the client. A single message is guar-
anteed because the message protocol created in the previous section uses newline
characters as delimiters.
 There’s one case that will prevent a full message from being received: the client
disconnecting from the server. In that case, recvLine returns an empty string, which is
why the next line checks the length of the resulting string. If the string is empty, a mes-
sage is displayed on the terminal stating that the client disconnected. The client’s
connected flag is set to false, and the close procedure is called on the socket to free
its resources.
 Finally, assuming that the client hasn’t disconnected, the message that the client
sent is displayed in the terminal.
 If you try to recompile the code now, you’ll find that it doesn’t compile. The error
will be similar to the following:
server.nim(16, 54) template/generic instantiation from here
server.nim(20, 12) Error: type mismatch: got (Client)
but expected one of:
system.$(x: int)
system.$(x: seq[T])
system.$(x: cstring)
system.$(x: bool)
...
This is because of the echo(client, " disconnected!") line, which attempts to dis-
play the Client type in the terminal. The problem is that the echo procedure
attempts to use the $ operator to display all of the procedure’s arguments. If a $ oper-
ator isn’t defined for the type that you pass to echo, you’ll get an error message of this
sort. The fix is to define it.
Most procedures that read data from 
a socket may return an empty string, 
which signifies that the socket has 
disconnected from the server.
Closes the client’s socket 
because it has disconnected
Stops any
further
processing
of messages
Licensed to   
94
CHAPTER 3
Writing a chat application
 The full code listing for server.nim should now look something like this.
import asyncdispatch, asyncnet
type
Client = ref object
socket: AsyncSocket
netAddr: string
id: int
connected: bool
Server = ref object
socket: AsyncSocket
clients: seq[Client]
proc newServer(): Server = Server(socket: newAsyncSocket(), clients: @[])
proc `$`(client: Client): string =
$client.id & "(" & client.netAddr & ")"
proc processMessages(server: Server, client: Client) {.async.} =
while true:
let line = await client.socket.recvLine()
if line.len == 0:
echo(client, " disconnected!")
client.connected = false
client.socket.close()
return
echo(client, " sent: ", line)
proc loop(server: Server, port = 7687) {.async.} =
server.socket.bindAddr(port.Port)
server.socket.listen()
while true:
let (netAddr, clientSocket) = await server.socket.acceptAddr()
echo("Accepted connection from ", netAddr)
let client = Client(
socket: clientSocket,
netAddr: netAddr,
id: server.clients.len,
connected: true
)
server.clients.add(client)
asyncCheck processMessages(server, client)
var server = newServer()
waitFor loop(server)
The code now includes the definition of $ for the Client type, as well as an async-
Check command that runs the processMessages procedure in the background. These
are both shown in bold. The asyncCheck command can be used to run asynchronous
procedures without waiting on their result.
 This code will call the processMessages procedure for each client that connects
to the server, which is precisely what needs to be done. Each client needs to be
Listing 3.21
The full server implementation so far
Licensed to   
95
Transferring data using sockets
continuously read from to ensure that any messages it sends are processed. Because
of the nature of async procedures, all of this will be done in the background, with the
execution of loop continuing and thus being ready to accept more connections.
 Recompile the server module again, and then run it and connect to it using
telnet. Type some text into the Telnet window and press Enter; you should see your
server output messages showing the text you entered. 
SENDING THE MESSAGES TO OTHER CLIENTS
Lastly, you need to send the messages received from a client to all other clients that
are currently connected to the server. Add the following code to the bottom of the
processMessages procedure, making sure you indent this code so it’s within the
while loop.
for c in server.clients:
if c.id != client.id and c.connected:
await c.socket.send(line & "\c\l")
For completeness, the following listing shows what your processMessages procedure
should now look like. The addition is shown in bold.
proc processMessages(server: Server, client: Client) {.async.} =
while true:
let line = await client.socket.recvLine()
if line.len == 0:
echo(client, " disconnected!")
client.connected = false
client.socket.close()
return
echo(client, " sent: ", line)
for c in server.clients:
if c.id != client.id and c.connected:
await c.socket.send(line & "\c\l")
That’s all there is to the server! It can now receive messages and send them on to
other clients. The problem now is that the client still has no code to connect to the
server or to send messages to it. Let’s fix that. 
ADDING NETWORK FUNCTIONALITY TO THE CLIENT
The first network functionality that should be implemented in the client is the ability
for it to connect to the server. Before implementing a procedure to do that, though,
Listing 3.22
Sending messages on to other clients
Listing 3.23
The processMessages procedure after listing 3.22 is inserted
Loops through each of the clients 
in the clients sequence
Checks that the client isn’t 
the client that sent this 
message and that the client 
is still connected
Sends the message to the client, 
followed by the message separator: \c\l
Licensed to   
96
CHAPTER 3
Writing a chat application
you must import the asyncdispatch and asyncnet modules. You’ll need to also
import the protocol module you created earlier. You can then create a new async pro-
cedure called connect, as shown here.
proc connect(socket: AsyncSocket, serverAddr: string) {.async.} =
echo("Connecting to ", serverAddr)
await socket.connect(serverAddr, 7687.Port)
echo("Connected!")
while true:
let line = await socket.recvLine()
let parsed = parseMessage(line)
echo(parsed.username, " said ", parsed.message)
You should place this procedure just below the import statement at the top of the file.
It’s fairly simple: it connects to the server and starts waiting for messages from it. The
recvLine procedure is used to read a single line at a time. This line is then passed to
the parseMessage procedure, which parses it and returns an object that allows for spe-
cific parts of the message to be accessed. The message is then displayed, together with
the username of the messenger.
 Before the connect procedure can be called, you must first define a new socket
variable. This variable should be initialized using the newAsyncSocket procedure.
Define it after the serverAddr command-line argument is read, so, after the let
serverAddr = paramStr(1) line. The following code should do the trick: var socket
= newAsyncSocket().
 You can then replace echo("Connecting to ", serverAddr) with a call to connect,
using the asyncCheck procedure to discard the future safely: asyncCheck
connect(socket, serverAddr). This code will run in the background because nei-
ther await nor waitFor is used.
 It’s now time to make the reading of standard input in client.nim nonblocking.
Currently, the while loop that reads the standard input blocks, but for the connect
async procedure to work, the async event loop needs to be executed. This won’t hap-
pen if the thread is blocked, so the while loop needs to be modified to integrate the
standard input reading with the event loop. The following code shows how this can be
done—replace the while loop in client.nim with it.
var messageFlowVar = spawn stdin.readLine()
while true:
if messageFlowVar.isReady():
Listing 3.24
The client’s connect procedure
Listing 3.25
Reading from standard input asynchronously
Connects to the server address
supplied, on the default 7687 port.