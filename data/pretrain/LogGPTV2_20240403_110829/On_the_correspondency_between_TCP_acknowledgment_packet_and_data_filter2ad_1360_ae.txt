In 
the  simulation,  we  also  observed  ack  compression 
phenomenon  in  the  measured  TCP  according  to  the  definition 
made  by  Paxson  in  [14].  However,  the  magnitude  of  ack 
compression  is  small  in  this  simulation  scenario,  so  we  did  not 
observe  the  obvious  sign  that  ack  compression  adversely  affects 
the estimation performance here. 
Table 3 Simulation Results5 
1 
2 
3 
4 
5 
10 
1018 
424.8  517.1 
71.4 
41.4 
44.8 
9.7% 
7.0% 
8.7% 
247.6  262.4  435.9 
15.4 
13.0 
3.8% 
4.1% 
3.8% 
3.8% 
17.8 
3.7% 
3.4% 
Links 
mta 
σta 
235.9 
27.0 
143.9 
19.6 
332.7 
35.2 
σta / mta   13.6%  11.4%  10.6% 
197.2 
max-min 
W(aver) 
17.1 
5.9% 
5.2% 
153.4 
19.9 
5.4% 
4.7% 
98.8 
21.2 
5.1% 
4.2% 
εta  
εW 
4.10  Internet Experiments 
We  performed  experiments  in  the  Internet.  The  sender  and 
receiver are in two different ASes. There are 13 hops between the 
sender  and  receiver.  The  RTT  varies  greatly,  from  20ms  in  the 
night to 2000ms in the daytime. There are nearly no loss between 
the  two  hosts,  so  near  the  receiver  we  placed  another  FreeBSD 
host as a router. It uses dummynet to introduce losses. The sender 
is FreeBSD4.5 and uses TCP newreno. The receiver issues a file 
request every 10 minutes. The file is approximately 1.7MB, and 
needs roughly 1200 data packets(MSS1460). 
Figure 22 shows the estimation result of 208 TCP connections 
recorded at 02-19-2003. The average data loss rate and ack loss 
rate are 0.02. The average ta for each connection is from 10ms to 
2000ms. 185 out of 208 connections gave results. 23 connections 
fail to give results because the correct correspondency sequence is 
eliminated prematurely during the searching process. The average 
εW of 185 connections is 8.6%, and εta is 6.5%. From this graph, 
we can see that 80% of the connections have εW and εta less than 
10%,  90%  of  connections  have  εW  and  εta  less  than  20%. 
Connections with large ε are those with small RTT(around 20ms) 
and large RTT variations where the peak RTT can suddenly reach 
60ms at a certain period of the connection. Further investigation is 
needed in this case. 
S1 
S2 
Sn 
S0 
Rn+1 
R1 
Rn-1 
Rn 
Sn+1 
R0 
Figure 21 Simulation Topology -- Tandem Network with 
cross-traffic 
Figure 22  The εW, εta cumulative probability distribution of 
185 TCP connections 
5 max-min is (maximum ta – minimum ta) in a connection. 
5.  CONCLUSION AND FUTURE WORK 
This paper proposed a method to estimate the correspondency 
between  acks  and  data  packets  of  a  TCP  connection.  The 
advantage of the method is that the estimation does not require to 
use dump trace recorded at or near the sender side. Based on this 
method, we developed a tool tcpdep. It enables us to perform the 
estimation using tcpdump trace passively measured at the receiver 
side. Simulations and Internet experiments show the feasibility of 
this method. 
Below, we give two prospective uses of the method: 
1.  Analyze the RTT dynamics of a TCP at the receiver side: 
In many situations, analyzing the dynamics of round trip time 
between two points in the network reveals important network 
path properties between these two points. ping is such a tool. 
However,  the  RTT  dynamics  of  a  TCP  connection  is  tightly 
associated  with  its  data  sending  manner.  Different  data 
sending  manners  may  result  different  RTT  dynamics.  Even 
tools  such  as  TReno  are  difficult  to  simulate  the  exact 
behavior  of  a  real  TCP  connection.  So,  the  only  way  to 
analyze the RTT dynamics of TCP is to establish a real TCP 
connection.  However,  currently  such  analysis  can  only  be 
performed  with  traces  recorded  at  or  near  the  TCP  sender. 
This  is  because  that  when  only  the  trace  recorded  at  the 
receiver  is  provided,  we  do  not  know  which  data  packet  is 
triggered  by  which  ack  packet.  Our  method  gives  us  this 
crucial correspondency information and enables us to analyze 
the dynamics of ta, which is a kind of RTT in definition. The 
analysis of ta will give us the exact picture of how round-trip 
time varies during a real TCP connection. The receiver-based 
analysis technique gives us a lot of freedom. 
2.  Analyze  the  interactions  between  TCP  and  queuing 
dynamics  in  real  network  environment:  Detailed  analysis  of 
interactions  between  queuing  dynamics  and  TCP  is  usually 
confined in simulation environment now. One reason is that it 
is easy for us to dump traffic of end hosts and of the router’s 
queue  simultaneously  in  simulation  environment,  while  it  is 
difficult to do such things in real network environment. If the 
estimation of this method is accurately enough, we only need 
to measure at the router, and use the method to estimate the 
sender behavior. 
In the development of tcpdep, firstly, we found that to create a 
generic  TCP  congestion  state-transition  model  for  real  TCP 
implementations is a difficult task. Secondly, we found it hard to 
judiciously  explore  the  simulation  parameter  space,  such  as 
topology, queue length, link delay, and traffic type when we try to 
validate the estimation performance. 
In  the  future,  careful  and  thorough  studies  of  real  TCP 
implementations’ internal state transition path or their measurable 
ack and data pairing regulations are important. Moreover, further 
investigation of the channel model and analysis of the estimation 
performance are necessary. 
6.  ACKNOWLEDGMENTS 
The  authors  thank  for  Xuelong  Zhu  for  his  many  insightful 
comments  on  the  work.  The  authors  would  like  to  thank  the 
anonymous  reviewers  for  their  comments,  which  have  greatly 
helped us in preparing this paper. 
APPENDIX A—ESTIMATION 
PERFORMANCE METRICS 
There are two kinds of performance metrics: The first metric is 
to  describe  the  closeness  of  the  estimated  cwnd  process  to  the 
actual cwnd process. The second one is to describe the closeness 
of estimated ta to the actual ta for every packet. 
eW and εW are the metrics in describing the difference between 
estimated cwnd process and the actual cwnd process: 
T
= ∫
0
e
W
|
W t W t dt
( ) |
0
( )
−
T
, 
T
= ∫
0
ε
W
=
e
W
W
|
−
( ) |
( )
0
T
W t W t dt
∫
W t dt
( )
0
0
, 
where, W0(t) represents the actual cwnd process, and W(t) is the 
estimated  cwnd  process.  T  is  the  total  time  of  the  connection. 
Ideally, eW and εW are 0. 
eta and εta are the metrics in describing the difference between 
actual ta sequence and the estimated ta sequence: 
N
∑
j
1
=
|
ta
0
j
−
ta
j
|
, 
N
e
ta
=
N
∑
j
1
=
ε
ta
=
e
ta
ta
=
|
ta
0
j
−
ta
j
|
, 
ta
0
j
N
∑
j
1
=
0 represents the actual ta for the jth data packet, and taj is 
where taj
the estimated ta for the jth data packet. N is the total number data 
packets for the TCP connection. Ideally, eta and εta are 0. 
7.  REFERENCES 
[1]  Allman, M., H. Balakrishnan, and S. Floyd, Enhancing 
TCP's Loss Recovery Using Limited Transmit. RFC3042, 
2001.  
[2]  Allman, M., S. Floyd, and C. Partridge, Increasing TCP's 
Initial Window. RFC2414, 1998.  
[3]  Allman, M., V. Paxson, and W. Stevens, TCP Congestion 
Control. RFC2581, 1999.  
[4]  Barford, P. and M. Crovella. Critical Path Analysis of TCP 
Transactions. in SIGCOMM '00. 2000. 
[5]  Caceres, R., et al., Multicast-Based Inference of Network 
Internal Loss Characteristics. IEEE Trans. ON Information 
Theory, 1999. 45(7): p. 2462-2480. 
[6]  Floyd, S. and T. Henderson, the Newreno Modification to 
[7] 
TCP's Fast Recovery Algorithm. RFC2582, 1999.  
Jacobson, V. Congestion avoidance and control. in 
SIGCOMM '88. 1988. Stanford, CA,. 
[8]  Kleinrock, L., Queueing Systems. 1976: Wiley, NY. 
[9]  Li, Q. and D.L. Mills, Jitter-Based Delay-Boundary 
Prediction of Wide-Area Networks. IEEE Trans. on 
Networking, 2001. 9(5): p. 578-590. 
[10]  Ljung, L. and T. Soderstrom, Theory and Practive of 
Recursive Identification. 1983: The MIT Press. 
[11]  Mathis, M., et al., TCP Selective Acknowledgment Options. 
RFC2018, 1996.  
[12]  Padhye, J. and S. Floyd. On Inferring TCP Behavior. in 
SIGCOMM'01. 2001. 
[13]  Paxson, V. Automated Packet Trace analysis of TCP 
Implementations. in SIGCOMM '97. 1997. 
[14]  Paxson, V., End-to-End Internet Packet Dynamics. IEEE 
Trans. on Networking, 1997. 7(3): p. 277-292. 
[15]  Paxson, V. and M. Allman, Computing TCP's 
Retransmission Timer. RFC2988, 2000.  
[16]  Proakis, J.G., Digital communications(Fourth Edition). 
2001: McGraw-Hill Inc. 
[17]  Raheli, R., A. Polydoros, and C.-K. Tzou, Per-Survivor 
Processing: A General Approach to MLSE in Uncertain 
Environments. IEEE Trans. ON COMMUNICATIONS, 
1995. 43(2/3/4): p. 354-364. 
[18]  Seshadri, N., Joint Data and Channel estimation Using 
Blind Trellis Search Techniques. IEEE Trans. ON 
COMMUNICATIONS, 1994. 42(2/3/4): p. 1000. 
[19]  Zhang, Y., et al. On the Characteristics and Origins of 
Internet Flow Rates. in SIGCOMM '02. 2002.