### Troubleshooting and Support for IBM MQ

#### 1. Generating Javacores for Managed File Transfer (MFT) Loggers
- **Logger Name**: `LOGGERNAME` is the name of the MFT logger that is hanging.
- **Javacore Storage Location**:
  - The javacores generated by this method are stored in the MFT data directory, based on the coordination queue manager name (`COORDQMNAME`) and the agent name (`AGENTNAME`).
  - **UNIX and Linux**:
    - `/var/mqm/mqft/logs/COORDQMNAME/loggers/LOGGERNAME`
    - `/var/mqm/mqft/logs/COORDQMNAME/agents/AGENTNAME`
  - **Windows**:
    - `C:\Program Files\IBM\MQ\mqft\logs\COORDQMNAME\agents\AGENTNAME`
    - `C:\Program Files\IBM\MQ\mqft\logs\COORDQMNAME\loggers\LOGGERNAME`
  - **Note**: The exact location may vary depending on the version of IBM MQ. For more information, refer to "Program and data directory locations on Windows."

- **Example Variables**:
  - `AGENTNAME` or `LOGGERNAME`: The name of the MFT agent or logger that is hanging.
  - `COORDQMNAME`: The name of the coordination queue manager.

#### 2. Generating Javacores for Other MFT Commands
- **Procedure**:
  - Generate three javacores from the process as shown in the following examples. The javacores or thread dumps are typically written to the working directory of the command.

- **UNIX and Linux**:
  1. List the Java virtual machines using `ps` and find the one running the hanging MFT command.
  2. Send a `SIGQUIT` signal to the process identifier (PID) to generate a javacore or thread dump.
  - Example:
    ```sh
    sh> ps -ef | egrep 'PID|StartAgent'
    UID PID PPID C STIME TTY TIME CMD
    7001 37789 1 0 Sun03PM ?? 3:07.35 java ... com.ibm.wmqfte.api.StartAgent AGENT1
    7001 69177 64373 0 2:35PM ttys003 0:00.00 egrep PID|StartAgent
    sh> kill -QUIT 37789
    ...
    sh> kill -QUIT 37789
    ...
    sh> kill -QUIT 37789
    ```

- **Windows**:
  1. Start the MFT command from the Windows command prompt.
  2. Add the `-F` option to the `fteStartAgent` and `fteStartLogger` commands to run them in the foreground.
  3. Use the `Ctrl+Break` keyboard sequence to generate a javacore from the process.
  - Example:
    ```cmd
    C:\> fteStartLogger -F LOGGER1
    ...
    Ctrl+Break
    ...
    Ctrl+Break
    ...
    Ctrl+Break
    ```

- **IBM i**:
  1. List the Java virtual machine jobs in the system using the `WRKJVMJOB` option 7 to find the one running the hanging MFT command.
  2. Press `F3` to exit and use the job number, user, and job name to generate a Java thread dump from the job.
  - Example:
    ```sh
    ===> WRKJVMJOB
    Opt Job Name User Number Function Status
    QJVACMDSRV QMQM 136365 PGM-StartAgent THDW
    QYPSJSVR QYPSJSVR 136415 PGM-jvmStartPa SIGW
    Use option 7 to find the right job and F3 to return to the command line:
    ===> GENJVMDMP JOB(136365/QMQM/QJVACMDSRV) TYPE(*JAVA)
    ```

#### 3. Using Debugging Scripts on UNIX and Linux
- **Procedure**:
  1. Download the IBM `stackit` and `sigdump` scripts. On Linux systems, install the GNU debugger (GDB) if not already installed.
  2. Run the `stackit` script three times against the affected IBM MQ queue managers and applications, with a delay of a minute or less between each run.
  - Example:
    ```sh
    sh> stackit -m QMA -m QMB -n myapp -f /var/mqm/errors/stackit-1.txt
    sh> sleep 30
    sh> stackit -m QMA -m QMB -n myapp -f /var/mqm/errors/stackit-2.txt
    sh> sleep 30
    sh> stackit -m QMA -m QMB -n myapp -f /var/mqm/errors/stackit-3.txt
    ```
  3. Run the `sigdump` script once against the affected IBM MQ queue managers to generate diagnostic FFST files.
  - Example:
    ```sh
    sh> sigdump -m QMA -m QMB
    ```

#### 4. Generating Debugging Data on Windows
- **Procedure**:
  1. Download the following debugging utilities from Microsoft:
    - Debug Diagnostic Tool
    - PsList
    - Handle
    - Process Monitor
  2. Display the list of processes:
    ```cmd
    C:\> tasklist -v
    ```
  3. Display additional information about each process:
    ```cmd
    C:\> pslist -x
    ```
  4. Display information about IBM MQ processes and any affected applications:
    ```cmd
    C:\> handle -a -p amq
    C:\> handle -a -p runmq
    C:\> handle -a -p myapp
    ```
  5. Gather data from hangs or crashes of IBM MQ processes and any affected applications:
    ```cmd
    C:\> adplus -hang -pn amqzxma0.exe
    C:\> adplus -hang -pn amqzlaa0.exe
    C:\> adplus -crash -pn runmqchi.exe
    ```
  6. Use the Microsoft Process Monitor tool to provide real-time stack data, loaded modules, environment information, files accessed, libraries used, registry keys accessed, and more. This tool can be CPU-intensive, even with filtering options set. Refer to the `procmon.chm` help file for scripting information.

#### 5. Generating Debugging Data on IBM i
- **Procedure**:
  1. Download and run the IBM `MQSTACK` tool. `MQSTACK` will show the status of all threads for all queue manager processes but does not show information about non-IBM processes.
  2. For processes that are not part of the queue manager, such as application programs, run the `SERVICEDOCS` utility. `SERVICEDOCS` will show the stack for the main thread of every process on the system.

#### 6. Generating an IBM MQ Trace
- **Procedure**:
  - Generate an IBM MQ trace while the problem is happening. Stop the trace after a short period (e.g., after a minute) to avoid worsening system performance.
  - Refer to the specific platform documentation for tracing instructions:
    - Linux and UNIX
    - Windows
    - IBM i

#### 7. WebSphere Application Server Troubleshooting
- **Procedure**:
  - If the hang or high CPU usage is happening inside WebSphere Application Server, complete the MustGather instructions for your platform:
    - AIX
    - Linux
    - Windows
    - IBM i

#### 8. Saving Output from the `mqconfig` Command
- **Procedure**:
  - On UNIX and Linux systems, save the output from the `mqconfig` command.

#### 9. Placing Debug Files in the IBM MQ Errors Directory
- **Procedure**:
  - Place the following information directly in the top-level IBM MQ errors directory:
    - The debug files collected in Step 1.
    - The output from the `mqconfig` command collected in Step 4.

#### 10. Collecting IBM MQ Data
- **Procedure**:
  - You can collect the data either automatically or manually:
    - **Automatically**:
      - Use the `runmqras` command as described in "Collecting troubleshooting information automatically with runmqras" on page 303. Be sure to collect the `defs`, `cluster`, and `trace` sections, and specify your case number.
      - Example:
        ```sh
        runmqras -section defs,cluster,trace -qmlist QMA -caseno TS001234567
        ```
    - **Manually**:
      - Follow the instructions in "Collecting troubleshooting information manually" on page 306.

#### 11. Sending Information to IBM
- **Procedure**:
  - Provide a good description of the problem and the data. Do not send data without providing a description!
  - For FTP and email instructions, see "Exchanging information with IBM Software Support."
  - To open or update a case, go to the IBM My Support site.
  - Always update your case to indicate that data was sent.
  - If you need to speak with IBM Software Support, contact your country representative. In the US, call 1-800-IBM-SERV.

### Related Tasks
- **Troubleshooting Message Problems**: Refer to "Troubleshooting message problems" on page 177.
- **Collecting Information for IBM MQ Explorer Problems**:
  - If you need assistance from IBM Support to resolve a problem with IBM MQ Explorer, follow the steps to collect and send troubleshooting information.
- **Collecting Information for Installation and Uninstallation Problems**:
  - If you need assistance from IBM Support to resolve installation or uninstallation issues, follow the steps to collect and send troubleshooting information.