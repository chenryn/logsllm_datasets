The technical perspective allows specifying technical information of services exposed by an
organization. Since the lifecycle of services include several phases, this perspective is divided
into two main sections: invocation and execution. The first section describes how the invocation
with the service is done. The second section describes how the interaction with the executing
service is done. This perspective acts as a central point that allows to reference existing Web
International Symposium on Services Science, Leipzig, March 23-25, 2009.
standards in order to describe technical aspects of services such as interfaces (e.g., WSDL), user
interfaces, and communication, messaging and transaction protocols.
4 USDL Metamodel
In order to establish a proper base for USDL we provide a formal specification. This serves for
purposes such as communication and implementation for integration with other specifications.
Additionally, it refines the definition of the concepts presented. Therefore, we define and for-
malizing a metamodel for USDL.
Formalizing a language can be done in several ways. Some examples are: a metamodel, a
grammar, an ontology, a XML schema, an implementation in a specific programming language,
an algebraic specification, etc. We decided to define a metamodel and will advocate in the fol-
lowing paragraphs why a metamodel-based USDL specification is an appropriate solution.
While addressing the term metamodel we refer to the OMG specification of the Meta Object
Facility (MOF) [OMG03]. In MOF, a metamodel consists of concepts of the object-oriented
world in order to formalize the static structure of a language. These concepts are packages,
classes with attributes and operations, data types, inheritance as well as references and associa-
tions in order to express relationships between classes. For the definition of constraints, MOF is
accompanied by the Object Constraint Language for expressing invariants for a given context
(set of elements of a metamodel).
Fischer et al. [Fis04a, Fis04b] stated that a grammar, in contrast to a metamodel, lacks modula-
rization and specialization as well as of a notation of inter language relation for an integration of
existing languages. They argue that a modern language specification must offer more than a
pure syntax definition, but also show the internal structure and support relations to other lan-
guage specifications. This is supported by a metamodel approach on specifying a language and
it is one of the reasons for our option to use a metamodel.
Furthermore, we have chosen a metamodel approach because it grants a formal and matured
solution for expressing a language’s syntax (static structure). Since USDL is a descriptive lan-
guage, a metamodel is a good option for representing it. That is because a descriptive language
does not cover behavioral aspects of a system to model and does not impose the combination of
concepts in order to construct information to be modeled. In other words, it can be seen as a
definition of a form to be filled. Furthermore, the supporting technology should provide facili-
ties for the development of tools for USDL as well as the definition of an exchange format for
persisted service descriptions. This is covered by MOF implementations. Additionally, the
following points drove our decision:
(1) MOF-based metamodels are a matured, well-understood and established technology.
(2) MOF is an OMG standard which allows an easy integration of other standards such as
UML, BPMN, etc.
(3) The integration of other languages (existing data and models) such as process languages and
schema languages is supported.
International Symposium on Services Science, Leipzig, March 23-25, 2009.
Especially the last point is addressed by SAP using the Modeling Infrastructure (MOIN)
[AHK06]. MOIN is a MOF-based repository implementation, which is designated to provide a
common infrastructure for SAP models. The infrastructure also covers a design tool develop-
ment environment. MOIN is similar to the Eclipse Modeling Framework (EMF2) which also
provides a variety of supporting tools and frameworks.
We base our work on MOIN to allow the integration with existing data residing in SAP systems
such as process models or services definitions of the Enterprise Service Repository (ESR) (a
repository based on the UDDI3 specification). Besides the integration aspect, MOF also pro-
vides a mature base for tool generation and implementation. This allows a rapid prototyping, i.e.
by rapidly developing editors for the creation of USDL instances for testing purposes. Test
instances can be used to validate USDL and discover conceptual problems.
We have formalized USDL with a MOF-based metamodel (see Figure 1) to represent its formal
base. We pursued the goal to keep the model as simple as possible. We made use of composi-
tion and structuring of the elements, but avoided grouping mechanism and generalization, since
this reduces the comprehensibility of a model. Building upon MOF, as an established OMG-
standard with implementations available such as MOIN and EMF, we believe this will provide
a base for an implementation of USDL in terms of integration and tools.
5 From USDL to Service Level Agreements
After discussing the structure and formalization of USDL, we will now describe how service
level agreements (SLA) can be created from a USDL-based description instance. Service level
agreements are formal contracts between service consumers and providers negotiated prior to
service provisioning. They serve as a base for monitoring the provisioning and consumption of
the service, which is necessary to assure a trustful business interaction between the involved
parties [WCS08].
5.1 Specifying Service Level Agreements
A number of different approaches for specifying SLA exist (e.g. Web Service Level Agree-
ments (WSLA) [IBM03], SLAng [LSE03], WS-Agreement [GGF05]). WSLA and SLAng are
not being developed any further. WS-Agreement is a specification from the Open Grid Forum
[GGF05]. It defines a language and protocol for the offering of capabilities by service provid-
ers, the negotiation of agreements between service consumers and providers, and for monitoring
the compliance to these agreements. While the WS-Agreement language provides a structure
for SLA documents it does not specify which aspects of a service are described and how. This
needs to be handled by a specific language for service description. WS-Agreement facilitates
2 http://www.eclipse.org/emf
3 http://uddi.xml.org/
International Symposium on Services Science, Leipzig, March 23-25, 2009.
the negotiation procedure and enables us to use our own service description language, namely
USDL, for specifying the aspects and characteristics of the service.
WS-Agreement also specifies a process for creating SLA. Service consumer and provider take
the roles of agreement initiator and responder. The agreement initiator requests an agreement
template from the responder. Based on this template an offer is created and sent back to the
responder who then validates and accepts or rejects it. In this section we describe how to gener-
ate an initial agreement template while the negotiation process is out of scope.
An agreement template consists of three main sections: the agreement context, the terms, and
the creation constraints section. The agreement context specifies information about the involved
parties and their roles. The terms section is used to describe what the service will provide and a
number of guaranties for its execution. The creation constraints section specifies rules for the
creation of a valid offer from the template.
5.2 USDL to WS-Agreement Mapping
The WS-Agreement template (see Figure 2) can be generated from the USDL service descrip-
tion via a transformation. While some information available in the service description can be
mapped to WS-Agreement elements, it is necessary to extend WS-Agreement templates by
using USDL statements. General information on a service and the functionality it provides is
presented in the ServiceDescriptionTerms section. This section includes the name of the service,
its version number, and a functional classification. Further information such as a service ID,
other classifications or bundling information can be added but was omitted due to space limita-
tions. It is important to emphasize that the ServiceDescriptionTerms section contains USDL
statements from the service description since WS-Agreement, as mentioned above, does not
provide the means for describing services but requires a suitable service description language.
The ServiceProperties section is used to define further measurable service attributes. All mea-
surable attributes contained in the USDL description along with their metric are mapped to the
WS-Agreement Variable element. The service’s execution time is specified in our example. In
contrast to the ServiceDescriptionTerms section where USDL code fragments are integrated
into the template code we have a mapping from USDL to WS-Agreement.
Finally, the GuaranteeTerm section is used to set up specific ServiceLevelObjectives, e.g. min,
max, average, or concrete values which are guaranteed for service provisioning. They can be
specified for each service attribute listed as Variable in the ServiceProperties section. The in-
formation of concrete values for the service attributes in USDL is mapped to the CustomServi-
ceLevel element. In our example, the executionTime variable, which was defined in the Servi-
ceProperties section, is referenced. A ServiceLevelObjective is specified which guarantees that
executionTime is two hours maximum. As in the ServiceProperties section we defined a map-
ping to WS-Agreement instead of using USDL statements.
To extend the template with a CreationConstraints section, additional modeling beyond the
current scope of the USDL is necessary. The section can be used to specify a value range for a
specific parameter as well as certain relationships between different parameters. We will cap-
ture CreationConstraints at a later point of time within the project.
International Symposium on Services Science, Leipzig, March 23-25, 2009.
…
Eco Calculator
 v.1.5.3
UN/SPSC
12322122
…
Execution_Time
P2H
…
Figure 2. A WS-Agreement template with USDL elements
6 Conclusions
In this paper we have presented the Universal Service Description Language (USDL) as a lan-
guage for describing business, operational, and technical aspects of universal services. Such
description languages will be fundamental for the success of the Internet of Services. The
USDL accounts for the specific characteristics of universal services while at the same time
preserving means for describing aspects of accepted Web service standards, e.g. WSDL and
BPEL. USDL has a formal specification created using a MOF-based metamodel. Besides the
advantages of a formal specification, such as simplified communication and precise semantics,
we pursue the goal of integrating existing Web-based models and take advantage of existing
technologies. Using a MOF-implementation, such as MOIN infrastructure from SAP, existing
services and workflows can be easily integrated into USDL using reference mechanisms. Fur-
thermore, USDL models can be published within SAP systems, so existing models and tools
can access and use the information and vice versa. We have also presented a mapping between
USDL and WS-Agreement showing that USDL service descriptions can serve as a base for
specifying service level agreements. WS-Agreement SLA templates can be created via a trans-
formation from USDL descriptions.
International Symposium on Services Science, Leipzig, March 23-25, 2009.
Acknowledgments. The TEXO project was funded by means of the German Federal Ministry
of Economy and Technology under the promotional reference 01MQ07012. The authors take
the responsibility for the contents.
Literature
[AHK06] Michael Altenhofen, Thomas Hettel and Stefan Kusterer. OCL support in an industrial envi-
ronment. 6th OCL Workshop at the UML/MoDELS. 2006.
[CS05] Cardoso, Jorge and Sheth, Amit, Introduction to Semantic Web Services and Web Process Com-
position, Semantic Web Process: powering next generation of processes with Semantics and
Web services, LNCS, Springer-Verlag Heidelberg, Vol. 3387, pp.1-13, 2005. ISBN: 3-540-
24328-3.
[CVW08]Cardoso, Jorge, Voigt, Konrad and Winkler, Matthias, Service Engineering for The Internet of
Services, To appear in Enterprise Information Systems, Lecture Notes in Business Information
Processing (LNBIP), 2008.
[Cur01] Curbera, F., W. Nagy, et al. (2001). Web Services: Why and How. Workshop on Object-Oriented
Web Services - OOPSLA 2001, Tampa, Florida, USA.
[Fis04a] Joachim Fischer, Eckhardt Holz, Andreas Prinz and Markus Scheidgen. Tool-based Language
Development. Workshop on Integrated-reliability with Telecommunications and UML Languag-
es. 2004.
[Fis04b] Joachim Fischer, Michael Piefel and Markus Scheidgen. Using Metamodels for the definition of
Languages. Proceedings of fourth SDL and MSC workshop (SAM04). 2004.
[GGF05] Global Grid Forum, Web Service Agreement Specification (WS-Agreement), Version 2005/09.
[IBM03] IBM Corporation, Web Service Level Agreement (WSLA) Language Specification, version 1.0,
January 2003.
[IBM98] IBM, Annual Report 1998, http://www.ibm.com.
[LSE03] Lamanna, D.D., Skene, J., Emmerich, W. Specification Language for Service Level Agreements,
EU IST 34069 deliverable D”, March 2003.
[OEC00] OECD. The Service Economy. Science Technology Industry Business and Industry Policy Forum
Series. p. 7. 2000. Paris, France.
[OSu05] O’Sullivan, J., Edmond, D., Hofstede, A.H.t.: Formal description of non-functional service
properties. Technical FIT-TR-2005-01, Queensland University of Technology, Brisbane, 2005.
[ST07] Schroth, Christoph and Janner, Till, 2007. Web 2.0 and SOA: Converging Concepts Enabling the
Internet of Services. IT Professional, N. 3, p. 36-41, IEEE Computer Society.
[WCS08] Winkler, Matthias; Cardoso, Jorge and Scheithauer, Gregor, Challenges of Business Service
Monitoring in the Internet of Services, To appear in Proceedings of the iiWAS2008 November
24-26, 2008, Linz, Austria.