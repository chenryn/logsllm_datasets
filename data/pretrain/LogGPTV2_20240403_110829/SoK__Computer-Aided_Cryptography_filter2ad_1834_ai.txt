[118] J. P. Lim and S. Nagarakatte, “Automatic equivalence checking for
assembly implementations of cryptography libraries,” in Proc. of the
IEEE/ACM International Symposium on Code Generation and Opti-
mization, (CGO).
IEEE, 2019, pp. 37–49.
[119] P. L. Montgomery, “Modular multiplication without trial division,”
Mathematics of computation, vol. 44, no. 170, pp. 519–521, 1985.
[120] “The GNU Multiple Precision Arithmetic Library.” [Online]. Available:
https://gmplib.org/
[121] G. Klein, J. Andronick, K. Elphinstone, T. C. Murray, T. Sewell,
R. Kolanski, and G. Heiser, “Comprehensive formal veriﬁcation of
an OS microkernel,” ACM Trans. Comput. Syst., vol. 32, no. 1, pp.
2:1–2:70, 2014.
[122] R. Gu, J. Koenig, T. Ramananandro, Z. Shao, X. N. Wu, S. Weng,
H. Zhang, and Y. Guo, “Deep speciﬁcations and certiﬁed abstrac-
tion layers,” in Symposium on Principles of Programming Languages
(POPL). ACM, 2015, pp. 595–608.
[123] H. Mai, E. Pek, H. Xue, S. T. King, and P. Madhusudan, “Verifying
security invariants in ExpressOS,” in International Conference on
Architectural Support
for Programming Languages and Operating
Systems (ASPLOS). ACM, 2013, pp. 293–304.
[124] G. Morrisett, G. Tan, J. Tassarotti, J. Tristan, and E. Gan, “Rocksalt:
better, faster, stronger SFI for the x86,” in ACM SIGPLAN Confer-
ence on Programming Language Design and Implementation (PLDI).
ACM, 2012, pp. 395–404.
[125] X. Wang, D. Lazar, N. Zeldovich, A. Chlipala, and Z. Tatlock, “Jitk: A
trustworthy in-kernel interpreter infrastructure,” in USENIX Conference
on Operating Systems Design and Implementation (OSDI). USENIX
Association, 2014, pp. 33–47.
[126] H. Chen, D. Ziegler, T. Chajed, A. Chlipala, M. F. Kaashoek, and
N. Zeldovich, “Using crash hoare logic for certifying the FSCQ ﬁle
system,” in ACM Symposium on Operating Systems Principles (SOSP).
ACM, 2015, pp. 18–37.
[127] A. Vasudevan, S. Chaki, L. Jia, J. M. McCune, J. Newsome, and
A. Datta, “Design, implementation and veriﬁcation of an extensible
and modular hypervisor framework,” in IEEE Symposium on Security
and Privacy (S&P).
IEEE Computer Society, 2013, pp. 430–444.
[128] J. R. Wilcox, D. Woos, P. Panchekha, Z. Tatlock, X. Wang, M. D. Ernst,
and T. E. Anderson, “Verdi: a framework for implementing and for-
mally verifying distributed systems,” in ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI). ACM,
2015, pp. 357–368.
[129] O. Padon, K. L. McMillan, A. Panda, M. Sagiv, and S. Shoham, “Ivy:
safety veriﬁcation by interactive generalization,” in ACM SIGPLAN
Conference on Programming Language Design and Implementation
(PLDI). ACM, 2016, pp. 614–630.
[130] C. Hawblitzel, J. Howell, M. Kapritsos, J. R. Lorch, B. Parno, M. L.
Roberts, S. T. V. Setty, and B. Zill, “Ironﬂeet: proving practical
distributed systems correct,” in ACM Symposium on Operating Systems
Principles (SOSP). ACM, 2015, pp. 1–17.
[131] C. Hawblitzel, J. Howell, J. R. Lorch, A. Narayan, B. Parno, D. Zhang,
and B. Zill, “Ironclad apps: End-to-end security via automated full-
system veriﬁcation,” in USENIX Conference on Operating Systems
Design and Implementation (OSDI). USENIX Association, 2014, pp.
165–181.
[132] J. B. Almeida, M. Barbosa, J. S. Pinto, and B. Vieira, “Formal
veriﬁcation of side-channel countermeasures using self-composition,”
Sci. Comput. Program., vol. 78, no. 7, pp. 796–812, 2013.
[133] G. Doychev, D. Feld, B. K¨opf, L. Mauborgne, and J. Reineke,
“Cacheaudit: A tool for the static analysis of cache side channels,”
in USENIX Security Symposium (USENIX). USENIX Association,
2013, pp. 431–446.
[134] J. B. Almeida, M. Barbosa, G. Barthe, F. Dupressoir, and M. Emmi,
“Verifying constant-time implementations,” in USENIX Security Sym-
posium (USENIX). USENIX Association, 2016, pp. 53–70.
[135] C. Watt, J. Renner, N. Popescu, S. Cauligi, and D. Stefan, “Ct-wasm:
type-driven secure cryptography for the web ecosystem,” PACMPL,
vol. 3, no. POPL, pp. 77:1–77:29, 2019.
[136] S. Cauligi, G. Soeller, B. Johannesmeyer, F. Brown, R. S. Wahby,
J. Renner, B. Gr´egoire, G. Barthe, R. Jhala, and D. Stefan, “Fact: a DSL
for timing-sensitive computation,” in ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI). ACM,
2019, pp. 174–189.
[137] B. Rodrigues, F. M. Q. Pereira, and D. F. Aranha, “Sparse represen-
tation of implicit ﬂows with applications to side-channel detection,”
in International Conference on Compiler Construction (CC). ACM,
2016, pp. 110–120.
[138] B. K¨opf, L. Mauborgne, and M. Ochoa, “Automatic quantiﬁcation of
cache side-channels,” in International Conference on Computer-Aided
Veriﬁcation (CAV), ser. LNCS, vol. 7358. Springer, 2012, pp. 564–580.
[139] J. Protzenko, J. K. Zinzindohou´e, A. Rastogi, T. Ramananandro,
P. Wang, S. Z. B´eguelin, A. Delignat-Lavaud, C. Hritcu, K. Bhargavan,
C. Fournet, and N. Swamy, “Veriﬁed low-level programming embedded
in F,” PACMPL, vol. 1, no. ICFP, pp. 17:1–17:29, 2017.
[140] M. Wu, S. Guo, P. Schaumont, and C. Wang, “Eliminating timing side-
channel leaks using program repair,” in International Symposium on
Software Testing and Analysis (ISSTA). ACM, 2018, pp. 15–26.
[141] G. Barthe, G. Betarte, J. D. Campo, C. D. Luna, and D. Pichardie,
“System-level non-interference for constant-time cryptography,” in
ACM Conference on Computer and Communications Security (CCS).
ACM, 2014, pp. 1267–1279.
[142] D. Brumley and D. Boneh, “Remote timing attacks are practical,” in
USENIX Security Symposium (USENIX). USENIX Association, 2003.
[143] D. J. Bernstein, “Cache-timing attacks on AES,” 2005.
[144] J.-P. Aumasson, “Guidelines for Low-Level Cryptography Software,”
https://github.com/veorq/cryptocoding.
[145] B. Moller, “Security of CBC ciphersuites in SSL/TLS: Problems and
countermeasures,” 2004. [Online]. Available: http://www.openssl.org/
∼bodo/tls-cbc.txt
[146] N. J. AlFardan and K. G. Paterson, “Lucky thirteen: Breaking the
TLS and DTLS record protocols,” in IEEE Symposium on Security
and Privacy (S&P).
IEEE Computer Society, 2013, pp. 526–540.
[147] J. Somorovsky, “Curious padding oracle in OpenSSL (cve-2016-
[Online]. Available: https://web-in-security.blogspot.
2107),” 2016.
com/2016/05/curious-padding-oracle-in-openssl-cve.html
[148] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom,
“Spectre attacks: Exploiting speculative execution,” in IEEE Sympo-
sium on Security and Privacy (S&P).
IEEE, 2019, pp. 1–19.
[149] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg,
“Meltdown: Reading kernel memory from user space,” in USENIX
Security Symposium (USENIX). USENIX Association, 2018, pp. 973–
990.
[150] G. Barthe, B. Gr´egoire, and V. Laporte, “Secure compilation of side-
channel countermeasures: The case of cryptographic ”constant-time”,”
in IEEE Computer Security Foundations Symposium (CSF).
IEEE
Computer Society, 2018, pp. 328–343.
[151] D. Molnar, M. Piotrowski, D. Schultz, and D. A. Wagner, “The program
counter security model: Automatic detection and removal of control-
ﬂow side channel attacks,” in International Conference on Information
Security and Cryptology (ICISC), ser. LNCS, vol. 3935.
Springer,
2005, pp. 156–168.
[152] A. Langley, “ctgrind,” 2010. [Online]. Available: https://github.com/
agl/ctgrind/
[153] M. Andrysco, A. N¨otzli, F. Brown, R. Jhala, and D. Stefan, “Towards
veriﬁed, constant-time ﬂoating point operations,” in ACM Conference
on Computer and Communications Security (CCS). ACM, 2018, pp.
1369–1382.
[154] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and
H. Shacham, “On subnormal ﬂoating point and abnormal timing,” in
IEEE Symposium on Security and Privacy (S&P).
IEEE Computer
Society, 2015, pp. 623–639.
[155] D. Kohlbrenner and H. Shacham, “On the effectiveness of mitigations
against ﬂoating-point timing channels,” in USENIX Security Symposium
(USENIX). USENIX Association, 2017, pp. 69–81.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:25 UTC from IEEE Xplore.  Restrictions apply. 
794
[174] J. B. Almeida, M. Barbosa, G. Barthe, and F. Dupressoir, “Veriﬁable
side-channel security of cryptographic implementations: Constant-time
MEE-CBC,” in International Conference on Fast Software Encryption
(FSE), ser. LNCS, vol. 9783. Springer, 2016, pp. 163–184.
[175] A. Tomb, “Automated veriﬁcation of real-world cryptographic imple-
mentations,” IEEE Security & Privacy, vol. 14, no. 6, pp. 26–33, 2016.
[176] J. K. Zinzindohoue, E. Bartzia, and K. Bhargavan, “A veriﬁed extensi-
ble library of elliptic curves,” in IEEE Computer Security Foundations
Symposium (CSF).
IEEE Computer Society, 2016, pp. 296–309.
[177] K. Q. Ye, M. Green, N. Sanguansin, L. Beringer, A. Petcher, and A. W.
Appel, “Veriﬁed correctness and security of mbedTLS HMAC-DRBG,”
in ACM Conference on Computer and Communications Security (CCS).
ACM, 2017, pp. 2007–2020.
[178] A. Chudnov, N. Collins, B. Cook,
J. Dodds, B. Huffman,
C. MacC´arthaigh, S. Magill, E. Mertens, E. Mullen, S. Tasiran,
A. Tomb, and E. Westbrook, “Continuous formal veriﬁcation of amazon
s2n,” in International Conference on Computer-Aided Veriﬁcation
(CAV), ser. LNCS, vol. 10982. Springer, 2018, pp. 430–446.
[179] K. Eldefrawy and V. Pereira, “A high-assurance evaluator for machine-
checked secure multiparty computation,” in ACM Conference on Com-
puter and Communications Security (CCS). ACM, 2019, pp. 851–868.
[180] J. Protzenko, B. Beurdouche, D. Merigoux, and K. Bhargavan, “For-
mally veriﬁed cryptographic web applications in webassembly,” in
IEEE Symposium on Security and Privacy (S&P).
IEEE, 2019, pp.
1256–1274.
[181] C. Meyer and J. Schwenk, “Sok: Lessons learned from SSL/TLS
attacks,” in Proc. of the International Workshop on Information Security
Applications (WISA), ser. LNCS, vol. 8267. Springer, 2013, pp. 189–
209.
[182] J. Clark and P. C. van Oorschot, “Sok: SSL and HTTPS: revisiting
past challenges and evaluating certiﬁcate trust model enhancements,”
in IEEE Symposium on Security and Privacy (S&P).
IEEE Computer
Society, 2013, pp. 511–525.
[183] K. G. Paterson and T. van der Merwe, “Reactive and proactive
standardisation of TLS,” in International Conference on Security Stan-
dardisation Research (SSR), ser. LNCS, vol. 10074. Springer, 2016,
pp. 160–186.
[184] T. Ringer, K. Palmskog, I. Sergey, M. Gligoric, and Z. Tatlock, “QED
at
large: A survey of engineering of formally veriﬁed software,”
Foundations and Trends in Programming Languages, vol. 5, no. 2-3,
pp. 102–281, 2019.
[185] D. R. Jeffery, M. Staples, J. Andronick, G. Klein, and T. C. Murray,
“An empirical research agenda for understanding formal methods
productivity,” Information & Software Technology, vol. 60, pp. 102–
112, 2015.
[186] K. Bhargavan, F. Kiefer, and P. Strub, “hacspec: Towards veriﬁable
crypto standards,” in International Conference on Security Standardi-
sation Research (SSR), ser. LNCS, vol. 11322.
Springer, 2018, pp.
1–20.
[187] T. C. Hales, “The nsa back door to nist,” Notices of the AMS, vol. 61,
no. 2, pp. 190–192, 2014.
[188] S. Checkoway, J. Maskiewicz, C. Garman, J. Fried, S. Cohney,
M. Green, N. Heninger, R. Weinmann, E. Rescorla, and H. Shacham,
“A systematic analysis of the juniper dual EC incident,” in ACM
Conference on Computer and Communications Security (CCS). ACM,
2016, pp. 468–479.
[189] A. Inoue, T. Iwata, K. Minematsu, and B. Poettering, “Cryptanalysis
of OCB2: attacks on authenticity and conﬁdentiality,” in International
Cryptology Conference (CRYPTO), 2019, pp. 3–31.
[190] L. Chen, L. Chen, S. Jordan, Y.-K. Liu, D. Moody, R. Peralta,
R. Perlner, and D. Smith-Tone, Report on post-quantum cryptography.
US Department of Commerce, National Institute of Standards and
Technology, 2016.
in
[156] T. Kaufmann, H. Pelletier, S. Vaudenay, and K. Villegas, “When
binary: Exploiting
International
ser.
constant-time
curve25519-donna
Conference on Cryptology and Network Security (CANS),
LNCS, vol. 10052, 2016, pp. 573–582.
built with MSVC 2015,”
variable-time
source
yields
[157] G. Barthe, S. Blazy, B. Gr´egoire, R. Hutin, V. Laporte, D. Pichardie,
and A. Trieu, “Formal veriﬁcation of a constant-time preserving C
compiler,” Proc. ACM Program. Lang., vol. 4, no. POPL, pp. 7:1–7:30,
2020.
[158] A. Reid, “Trustworthy speciﬁcations of arm R(cid:13) v8-a and v8-m system
level architecture,” in 2016 Formal Methods in Computer-Aided De-
sign, FMCAD 2016, Mountain View, CA, USA, October 3-6, 2016.
IEEE, 2016, pp. 161–168.
[159] A. Armstrong, T. Bauereiss, B. Campbell, A. Reid, K. E. Gray, R. M.
Norton, P. Mundkur, M. Wassell, J. French, C. Pulte, S. Flur, I. Stark,
N. Krishnaswami, and P. Sewell, “ISA semantics for armv8-a, risc-v,
and CHERI-MIPS,” PACMPL, vol. 3, no. POPL, pp. 71:1–71:31, 2019.
[160] G. Heiser, “For safety’s sake: We need a new hardware-software
contract!” IEEE Design & Test, vol. 35, no. 2, pp. 27–30, 2018.
[161] D. Zhang, Y. Wang, G. E. Suh, and A. C. Myers, “A hardware
design language for timing-sensitive information-ﬂow security,” in
International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS). ACM, 2015, pp. 503–
516.
[162] M. Tiwari, H. M. G. Wassel, B. Mazloom, S. Mysore, F. T. Chong, and
T. Sherwood, “Complete information ﬂow tracking from the gates up,”
in International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS). ACM, 2009, pp. 109–
120.
[163] X. Li, V. Kashyap, J. K. Oberg, M. Tiwari, V. R. Rajarathinam,
R. Kastner, T. Sherwood, B. Hardekopf, and F. T. Chong, “Sap-
per: a language for hardware-level security policy enforcement,” in
International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS). ACM, 2014, pp. 97–
112.
[164] X. Li, M. Tiwari, J. Oberg, V. Kashyap, F. T. Chong, T. Sherwood, and
B. Hardekopf, “Caisson: a hardware description language for secure
information ﬂow,” in ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI). ACM, 2011, pp. 109–
120.
[165] K. von Gleissenthall, R. G. Kici, D. Stefan, and R. Jhala, “IODINE:
verifying constant-time execution of hardware,” in USENIX Security
Symposium (USENIX). USENIX Association, 2019, pp. 1411–1428.
[166] H. Eldib, C. Wang, and P. Schaumont, “Smt-based veriﬁcation of soft-
ware countermeasures against side-channel attacks,” in International
Conference on Tools and Algorithms for the Construction and Analysis
of Systems (TACAS), ser. LNCS, vol. 8413. Springer, 2014, pp. 62–77.
[167] A. G. Bayrak, F. Regazzoni, D. Novo, and P. Ienne, “Sleuth: Automated
veriﬁcation of software power analysis countermeasures,” in Confer-
ence on Cryptographic Hardware and Embedded Systems (CHES), ser.
LNCS, vol. 8086. Springer, 2013, pp. 293–310.
[168] A. Moss, E. Oswald, D. Page, and M. Tunstall, “Compiler assisted
masking,” in Conference on Cryptographic Hardware and Embedded
Systems (CHES), ser. LNCS, vol. 7428. Springer, 2012, pp. 58–75.
[169] H. Eldib and C. Wang, “Synthesis of masking countermeasures against
side channel attacks,” in International Conference on Computer-Aided
Veriﬁcation (CAV), ser. LNCS, vol. 8559. Springer, 2014, pp. 114–130.
[170] G. Barthe, S. Bela¨ıd, F. Dupressoir, P. Fouque, B. Gr´egoire, and
P. Strub, “Veriﬁed proofs of higher-order masking,” in Annual Inter-
national Conference on the Theory and Applications of Cryptographic
Techniques (EUROCRYPT), ser. LNCS, vol. 9056.
Springer, 2015,
pp. 457–485.
[171] G. Barthe, S. Bela¨ıd, G. Cassiers, P. Fouque, B. Gr´egoire, and F. Stan-
daert, “maskverif: Automated veriﬁcation of higher-order masking in
presence of physical defaults,” in European Symposium on Research
in Computer Security (ESORICS), ser. LNCS, vol. 11735. Springer,
2019, pp. 300–318.
[172] J. B. Almeida, M. Barbosa, G. Barthe, and F. Dupressoir, “Certiﬁed
computer-aided cryptography: efﬁcient provably secure machine code
from high-level implementations,” in ACM Conference on Computer
and Communications Security (CCS). ACM, 2013, pp. 1217–1230.
[173] L. Beringer, A. Petcher, K. Q. Ye, and A. W. Appel, “Veriﬁed correct-
ness and security of openssl HMAC,” in USENIX Security Symposium
(USENIX). USENIX Association, 2015, pp. 207–221.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:25 UTC from IEEE Xplore.  Restrictions apply. 
795