# Windows Search Indexer本地权限提升漏洞分析
|
##### 译文声明
本文是翻译文章，文章原作者 diffense，文章来源：blog.diffense.co.k
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 概述
2020年1月至2月期间，微软修复了Windows Search Indexer（Windows搜索索引器）中存在的多个漏洞。
如上图所示，微软在Windows Search Indexer中发现了众多本地权限提升漏洞。在本文中，我们将分析这些补丁的细节，并分享这些漏洞的详细信息。
## 关于Windows Search Indexer
Windows Search Indexer是一项用于为Windows
Search处理文件索引的Windows系统服务，该服务为Windows系统内置的文件搜索引擎提供了动力，而文件搜索引擎则用于包括“开始”菜单搜索框、Windows资源管理器以及库功能在内的诸多地方。
Search Indexer主要使用GUI图形界面，将用户定向到该服务的界面，如下图所示。
索引过程中的所有数据库（包括临时数据库）都将存储为文件的形式以进行管理。通常情况下，在Windows Server中，整个过程都是使用NT
AUTHORITY SYSTEM特权来执行的。然而，如果由于修改文件路径而导致出现逻辑错误，这可能会触发特权提升（例如：Symlink攻击）。
考虑到近期在Windows服务中发现的大多数漏洞都是由于逻辑错误而导致的本地权限提升（LPE）漏洞，因此我们在分析之前，也首先将Search
Indexer的漏洞假定为这种类型。但在详细分析的过程中，我们却发现事实并非如此。
## 补丁差异对比
我们进行分析所使用的环境是Windows 7
x86，因为该操作系统所对应的更新补丁相对较小，这将有助于我们识别补丁安装前后代码的差异。我们下载了该模块的两个补丁版本。
可以从Microsoft更新目录下载补丁：
1、修复后版本（2020年1月例行补丁）：KB45343142
2、修复后版本（2020年2月例行补丁）：KB45378133
要进行对比，我们首先需要对比补丁程序修改前后的二进制文件差异。实际上，这两个补丁仅修改了一个二进制文件，即searchindexer.exe。
上述补丁，是通过修改CSearchCrawlScopeManager和CSearchRoot类来完成漏洞修复的。前一个类是在1月补丁中实现了修复，而后者是在2月补丁中实现修复。这两个类中，都包含相同的更改内容，因此我们仅专注于对CSearchRoot类的分析。
如下图所示，展示了这个类中的原始代码，该代码使用锁来实现安全访问共享资源。我们推断，访问共享资源时会导致竞争条件漏洞的发生，因为在补丁中包含putter和getter函数。
## 如何与接口进行交互
我们参考了MSDN官方文档，以进一步了解如何使用这些类。我们发现，这些类都与Crawl Scope
Manager有关。接下来，我们详细分析这个类中包含的方法。
根据MSDN：
Crawl Scope Manager（CSM）是一组API，可以用于添加、删除和枚举Windows Search
Indexer的搜索根和范围规则。当使用索引器开始爬取新的容器时，可以使用CSM来设置要搜索的根，并为搜索根中的路径设置作用域规则。
CSM的接口包括：
IEnumSearchRoots  
IEnumSearchScopeRules  
ISearchCrawlScopeManager  
ISearchCrawlScopeManager2  
ISearchRoot  
ISearchScopeRule  
ISearchItem
举例来说，添加、删除和枚举搜索根和范围规则，可以通过以下方式来编写：
ISearchCrawlScopeManager通知搜索引擎需要爬取和（或）监控的容器，以及要包含或排除的容器下项目。如果需要添加新的搜索根，需要实例化ISearchRoot对象，设置根属性，然后调用ISearchCrawlScopeManager::AddRoot并将其传递给ISearchRoot对象的指针。
    // Add RootInfo & Scope Rule
    pISearchRoot->put_RootURL(L"file:///C: ");
    pSearchCrawlScopeManager->AddRoot(pISearchRoot);
    pSearchCrawlScopeManager->AddDefaultScopeRule(L"file:///C:Windows", fInclude, FF_INDEXCOMPLEXURLS);
    // Set Registry key
    pSearchCrawlScopeManager->SaveAll();
当我们不再希望对该URL进行索引时，还可以使用ISearchCrawlScopeManager从爬取范围中删除根。删除根的同时，会删除该URL的所有范围规则。我们可以卸载应用程序，删除所有数据，然后从搜索范围中删除搜索根目录，随后Crawl
Scope Manager将会删除根，同时也将删除与该根相关联的所有范围规则。
    // Remove RootInfo & Scope Rule
    ISearchCrawlScopeManager->RemoveRoot(pszURL);
    // Set Registry key
    ISearchCrawlScopeManager->SaveAll();
CSM使用IEnumSearchRoots来枚举搜索根。出于多种目的，我们可以使用这个类来枚举搜索根。例如，我们可能想要在用户界面中显示整个爬取的范围，或者发现爬取范围中是否已经包含特定的根目录或根目录的子级。
    // Display RootInfo
    PWSTR pszUrl = NULL;
    pSearchRoot->get_RootURL(&pszUrl);
    wcout EnumerateScopeRules(&pScopeRules);
    ISearchScopeRule *pSearchScopeRule;
    pScopeRules->Next(1, &pSearchScopeRule, NULL))
    pSearchScopeRule->get_PatternOrURL(&pszUrl);
    wcout put_RootURL(L"Shared RootURL");
        PWSTR pszUrl = NULL;
        HRESULT hr = pSearchRoot->get_RootURL(&pszUrl);
        wcout << L"t" << pszUrl;
        CoTaskMemFree(pszUrl);