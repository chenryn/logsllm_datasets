# Windows Search Indexer本地权限提升漏洞分析

## 译文声明
本文为翻译文章，原文作者为diffense，来源：blog.diffense.co.k。译文仅供参考，具体内容及含义以原文为准。

## 概述
2020年1月至2月期间，微软修复了Windows Search Indexer中存在的多个本地权限提升（LPE）漏洞。本文将详细分析这些补丁的细节，并分享这些漏洞的具体信息。

## 关于Windows Search Indexer
Windows Search Indexer是一项用于处理文件索引的系统服务，支持Windows内置的文件搜索引擎，该引擎广泛应用于“开始”菜单搜索框、Windows资源管理器以及库功能等场景中。索引过程中生成的所有数据库（包括临时数据库）均以文件形式存储并进行管理。通常情况下，在Windows Server中，整个索引过程使用NT AUTHORITY SYSTEM特权执行。然而，由于逻辑错误（如Symlink攻击）导致的路径修改可能会触发特权提升。

考虑到近期在Windows服务中发现的大多数LPE漏洞都源于逻辑错误，我们最初也假设Search Indexer中的漏洞属于此类。但在深入分析后，我们发现实际情况并非如此。

## 补丁差异对比
我们的分析基于Windows 7 x86环境，因为该版本的操作系统更新补丁相对较小，有助于识别代码变更。我们下载了以下两个补丁版本：
1. 2020年1月例行补丁：KB4534314
2. 2020年2月例行补丁：KB4537813

通过比较补丁前后的二进制文件，我们发现仅searchindexer.exe被修改。具体而言，这些补丁通过对CSearchCrawlScopeManager和CSearchRoot类进行修复来解决问题。前者在1月补丁中修复，后者在2月补丁中修复。这两个类中的更改内容相似，因此我们将重点放在对CSearchRoot类的分析上。

下图展示了原始代码，其中使用锁机制确保共享资源的安全访问。我们认为，在访问共享资源时可能会出现竞争条件漏洞，因为补丁中包含了putter和getter函数。

## 如何与接口进行交互
为了更好地理解这些类的用法，我们参考了MSDN官方文档。Crawl Scope Manager (CSM)是一组API，用于添加、删除和枚举Windows Search Indexer的搜索根和范围规则。当需要爬取新的容器时，可以使用CSM设置搜索根和作用域规则。

CSM的主要接口包括：
- IEnumSearchRoots
- IEnumSearchScopeRules
- ISearchCrawlScopeManager
- ISearchCrawlScopeManager2
- ISearchRoot
- ISearchScopeRule
- ISearchItem

例如，添加、删除和枚举搜索根和范围规则可以通过以下方式实现：

### 添加搜索根和范围规则
```cpp
// 添加根目录信息和范围规则
pISearchRoot->put_RootURL(L"file:///C: ");
pSearchCrawlScopeManager->AddRoot(pISearchRoot);
pSearchCrawlScopeManager->AddDefaultScopeRule(L"file:///C:Windows", fInclude, FF_INDEXCOMPLEXURLS);

// 设置注册表键
pSearchCrawlScopeManager->SaveAll();
```

### 删除搜索根和范围规则
```cpp
// 删除根目录信息和范围规则
ISearchCrawlScopeManager->RemoveRoot(pszURL);

// 设置注册表键
ISearchCrawlScopeManager->SaveAll();
```

### 枚举搜索根
```cpp
// 显示根目录信息
PWSTR pszUrl = NULL;
pSearchRoot->get_RootURL(&pszUrl);
wcout << L"Root URL: " << pszUrl << endl;
CoTaskMemFree(pszUrl);

// 枚举范围规则
IEnumSearchScopeRules *pScopeRules = NULL;
pSearchCrawlScopeManager->EnumerateScopeRules(&pScopeRules);
ISearchScopeRule *pSearchScopeRule;
while (pScopeRules->Next(1, &pSearchScopeRule, NULL) == S_OK)
{
    PWSTR pszPatternOrURL = NULL;
    pSearchScopeRule->get_PatternOrURL(&pszPatternOrURL);
    wcout << L"Scope Rule: " << pszPatternOrURL << endl;
    CoTaskMemFree(pszPatternOrURL);
}
```

通过这些示例，我们可以更清晰地了解如何使用CSM API来管理和控制Windows Search Indexer的搜索根和范围规则。