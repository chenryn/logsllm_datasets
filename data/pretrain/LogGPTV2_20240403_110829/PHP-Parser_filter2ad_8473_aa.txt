# 初探PHP-Parser
`PHP-Parser`是`nikic`用PHP编写的PHP5.2到PHP7.4解析器，其目的是简化静态代码分析和操作。
## Parsing
创建一个解析器实例：
    use PhpParser\ParserFactory;
    $parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
ParserFactory接收以下几个参数：
  * `ParserFactory::PREFER_PHP7`：优先解析PHP7，如果PHP7解析失败则将脚本解析成PHP5
  * `ParserFactory::PREFER_PHP5`：优先解析PHP5，如果PHP5解析失败则将脚本解析成PHP7
  * `ParserFactory::ONLY_PHP7`：只解析成PHP7
  * `ParserFactory::ONLY_PHP5`：只解析成PHP5
将PHP脚本解析成抽象语法树（AST）
    create(ParserFactory::PREFER_PHP7);
    try {
        $ast = $parser->parse($code);
    } catch (Error $error) {
        echo "Parse error: {$error->getMessage()}\n";
    }
    var_dump($ast);
    ?>
## Node dumping
如果是用上面的var_dump的话显示的AST可能会比较乱，那么我们可以使用`NodeDumper`生成一个更加直观的AST
    dump($stmts), "\n";
或者我们使用`vendor/bin/php-parse`也是一样的效果
    λ vendor/bin/php-parse test.php       
    ====> File test.php:                  
    ==> Node dump:                        
    array(                                
        0: Stmt_Expression(               
            expr: Expr_Assign(            
                var: Expr_Variable(       
                    name: a               
                )                         
                expr: Scalar_LNumber(     
                    value: 1              
                )                         
            )                             
        )                                 
    )
## Node tree structure
PHP是一个成熟的脚本语言，它大约有140个不同的节点。但是为了方便使用，将他们分为三类：
  * `PhpParser\Node\Stmts`是语句节点，即不返回值且不能出现在表达式中的语言构造。例如，类定义是一个语句，它不返回值，你不能编写类似func(class {})的语句。
  * `PhpParser\Node\expr`是表达式节点，即返回值的语言构造，因此可以出现在其他表达式中。如：`$var (PhpParser\Node\Expr\Variable)`和`func() (PhpParser\Node\Expr\FuncCall)`。
  * `PhpParser\Node\Scalars`是表示标量值的节点，如`"string" (PhpParser\Node\scalar\string)`、`0 (PhpParser\Node\scalar\LNumber)` 或魔术常量，如" **FILE** " `(PhpParser\Node\scalar\MagicConst\FILE)` 。所有`PhpParser\Node\scalar`都是延伸自`PhpParser\Node\Expr`，因为scalar也是表达式。
  * 需要注意的是`PhpParser\Node\Name`和`PhpParser\Node\Arg`不在以上的节点之中
## Pretty printer
使用`PhpParser\PrettyPrinter`格式化代码
    create(ParserFactory::PREFER_PHP7);
    try {
        $ast = $parser->parse($code);
    } catch (Error $error) {
        echo "Parse error: {$error->getMessage()}\n";
        return;
    }
    $prettyPrinter = new PrettyPrinter\Standard;
    $prettyCode = $prettyPrinter->prettyPrintFile($ast);
    echo $prettyCode;
## Node traversation
使用`PhpParser\NodeTraverser`我们可以遍历每一个节点，举几个简单的例子：解析php中的所有字符串，并输出
     value,"\n";
            }
        }
    }
    $code = file_get_contents("./test.php");
    $parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
    $traverser = New NodeTraverser;
    $traverser->addVisitor(new MyVisitor);
    try {
        $ast = $parser->parse($code);
        $stmts = $traverser->traverse($ast);
    } catch (Error $error) {
        echo "Parse error: {$error->getMessage()}\n";
        return;
    }
    ?>
遍历php中出现的函数以及类中的成员方法
    class MyVisitor extends NodeVisitorAbstract{
        public function leaveNode(Node $node)
        {
            if( $node instanceof Node\Expr\FuncCall
                || $node instanceof Node\Stmt\ClassMethod
                || $node instanceof Node\Stmt\Function_
                || $node instanceof Node\Expr\MethodCall
            ) {
                echo $node->name,"\n";
            }
        }
    }
替换php脚本中函数以及类的成员方法函数名为小写
    class MyVisitor extends NodeVisitorAbstract{
        public function leaveNode(Node $node)
        {
            if( $node instanceof Node\Expr\FuncCall) {
                $node->name->parts[0]=strtolower($node->name->parts[0]);
            }elseif($node instanceof Node\Stmt\ClassMethod){
                $node->name->name=strtolower($node->name->name);
            }elseif ($node instanceof Node\Stmt\Function_){
                $node->name->name=strtolower($node->name->name);
            }elseif($node instanceof Node\Expr\MethodCall){
                $node->name->name=strtolower($node->name->name);
            }
        }
    }
需要注意的是所有的`visitors`都必须实现`PhpParser\NodeVisitor`接口，该接口定义了如下4个方法：
    public function beforeTraverse(array $nodes);
    public function enterNode(\PhpParser\Node $node);
    public function leaveNode(\PhpParser\Node $node);
    public function afterTraverse(array $nodes);
  * `beforeTraverse`方法在遍历开始之前调用一次，并将其传递给调用遍历器的节点。此方法可用于在遍历之前重置值或准备遍历树。
  * `afterTraverse`方法与`beforeTraverse`方法类似，唯一的区别是它只在遍历之后调用一次。
  * 在每个节点上都调用`enterNode`和`leaveNode`方法，前者在它被输入时，即在它的子节点被遍历之前，后者在它被离开时。
  * 这四个方法要么返回更改的节点，要么根本不返回(即null)，在这种情况下，当前节点不更改。
## other
其余的知识点可以参考官方的，这里就不多赘述了。
[Documentation for version 4.x](https://github.com/nikic/PHP-Parser/tree/master/doc) (stable; for running on PHP >= 7.0; for parsing PHP
5.2 to PHP 7.4).
[Documentation for version 3.x](https://github.com/nikic/PHP-Parser/tree/3.x/doc) (unsupported; for running on PHP >= 5.5; for parsing PHP
5.2 to PHP 7.2).
# PHP代码混淆
下面举两个php混淆的例子，比较简单（郑老板@zsx所说的20分钟内能解密出来的那种），主要是加深一下我们对`PhpParser`使用
## phpjiami
大部分混淆都会把代码格式搞得很乱，用`PhpParser\PrettyPrinter`格式化一下代码
    create(ParserFactory::PREFER_PHP7);
    try {
        $ast = $parser->parse($code);
    } catch (Error $error) {
        echo "Parse error: {$error->getMessage()}\n";
        return;
    }
    $prettyPrinter = new PrettyPrinter\Standard;
    $prettyCode = $prettyPrinter->prettyPrintFile($ast);
    file_put_contents('en_test.php', $prettyCode);
格式基本能看了
因为函数和变量的乱码让我们之后的调试比较难受，所以简单替换一下混淆的函数和变量
    create(ParserFactory::PREFER_PHP7);
    $nodeFinder = new NodeFinder;
    try {
        $ast = $parser->parse($code);
    } catch (Error $error) {
        echo "Parse error: {$error->getMessage()}\n";
        return;
    }
    $Funcs =  $nodeFinder->findInstanceOf($ast, PhpParser\Node\Stmt\Function_::class);
    $map=[];
    $v=0;
    foreach ($Funcs as $func)
    {
        $funcname=$func->name->name;
        if(!isset($map[$funcname]))
        {
            if (!preg_match('/^[a-z0-9A-Z_]+$/', $funcname))
            {
                $code=str_replace($funcname,"func".$v,$code);
                $v++;
                $map[$funcname]=$v;
            }
        }
    }
    $v = 0;
    $map = [];
    $tokens = token_get_all($code);
    foreach ($tokens as $token) {
        if ($token[0] === T_VARIABLE) {
            if (!isset($map[$token[1]])) {
                if (!preg_match('/^\$[a-zA-Z0-9_]+$/', $token[1])) {
                    $code = str_replace($token[1], '$v' . $v++, $code);
                    $map[$token[1]] = $v;
                }
            }
        }
    }
    file_put_contents("index_2.php",$code);
变量和函数基本能看了，还是有一些数据是乱码，这个是它自定义函数加密的字符串，大多数都是php内置的函数，我们调试一下就基本能看到了
但是得注意一下，phpjiami有几个反调试的地方，在35行的地方打个断点
可以看到4个反调试的点：
第一个点：
当你是以cli运行php的时候就会直接die()掉，直接注释掉即可
    php_sapi_name()=="cli" ? die() : ''
第二个点：
和第一个差不多，也是验证运行环境的，直接注释即可
    if (!isset($_SERVER["HTTP_HOST"]) && !isset($_SERVER["SERVER_ADDR"]) && !isset($_SERVER["REMOTE_ADDR"])) {
        die();
    }
第三个点：
如果你在if语句处停留超过100ms的话就会直接die掉，注释即可
    $v46 = microtime(true) * 1000;
    eval("");
    if (microtime(true) * 1000 - $v46 > 100) {
        die();
    }
第四个点：
$51就是整个文件内容，这行是用于加密前的文件对比是否完整，如果不完整则执行$52()，因为$52不存在所以会直接报错退出，而如果对比是完整的话那么就是$53，虽然$53也不存在，但只是抛出一个`Warning`，所以我们这里也是直接把这行注释掉。
    !strpos(func2(substr($v51, func2("???"), func2("???"))), md5(substr($51, func2("??"), func2("???")))) ? $52() : $53;
注释完之后我们在return那里打一个断点，可以发现在return那里我们需要解密的文件内容呈现了出来。
解密之后的内容
    ?> 0){
                die($_FILES["file"]["error"]);
            }
            else{
                $filename=md5($_SERVER['REMOTE_ADDR'])."_".$_FILES["file"]["name"];
                move_uploaded_file($_FILES["file"]["tmp_name"], $filename);
                echo "save in:" . $sandbox."/" . $filename;
            }
        }
        else{
            echo "Not Allow!";
        }
    }
    function Check(){
        $BlackExts = array("php");
        $ext = explode(".", $_FILES["file"]["name"]);
        $exts = trim(end($ext));
        $file_content = file_get_contents($_FILES["file"]["tmp_name"]);
        if(!preg_match('/[a-z0-9;~^`&|]/is',$file_content)  && 
            !in_array($exts, $BlackExts) && 
            !preg_match('/\.\./',$_FILES["file"]["name"])) {
            return true;
        }
        return false;
    }
    ?>
    upload
    `最后面
整个解密过程也比较简单，其中$v51是我们加密之后内容，$v55是解密后的内容。