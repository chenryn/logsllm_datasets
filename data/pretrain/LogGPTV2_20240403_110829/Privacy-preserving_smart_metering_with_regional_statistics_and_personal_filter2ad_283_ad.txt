### Parameter Settings for Optimal Privacy Protection

To achieve the best privacy protection, specific parameters are fixed as follows:
- For \(\epsilon\), we set \(\delta = 0.05\) and \(m = 30\).
- For \(\delta\), we set \(\epsilon = 0.1\) and \(m = 30\).
- For \(m\), we set \(\epsilon = 0.1\) and \(\delta = 0.05\).

The experimental results for aggregation/billing error rates are shown in Figure 2, with variations in:
- \(\epsilon\) (Figure 2(a))
- \(\delta\) (Figure 2(b))
- \(m\) (Figure 2(c))

Similarly, the corresponding experimental results for reading error rates are presented in Figure 3.

### Observations

- **Error Rates and Parameters:**
  - Smaller values of \(\epsilon\) and \(\delta\), or larger values of \(m\), result in lower aggregation/billing and reading errors.
  - Aggregation/billing error rates are low, with UK data showing <1.2% and UMass data showing <4.1%.

- **Algorithm Performance:**
  - The CRC option in the streaming algorithm generates higher aggregation/billing errors but lower reading errors compared to the DRC option, for both UK and UMass datasets.

- **Impact of Privacy Parameters:**
  - The privacy parameter \(\epsilon\) has a more significant impact on utility than \(\delta\) and \(m\). Utility improves more quickly as \(\epsilon\) increases, with all errors decreasing more rapidly compared to increasing \(\delta\) or reducing \(m\).

- **Dynamic Energy Billing:**
  - In the context of dynamic energy billing, such as Time-of-Use (TOU) and Time-Based (TB) plans, a possible solution to ensure zero billing error is discussed in Appendix A.

### Efficiency Evaluation

#### Computational Performance

- **One-Time Offline Runtime:**
  - Figure 4(a) shows the one-time offline runtime for different numbers of appliances (\(|A| = 20, 25, 30, \ldots, 1000\)). For \(|A| \geq 60\), a heuristic smart meter initialization is implemented with a large termination threshold \(p = 10^9\). The one-time offline cost is manageable for any smart meter, such as a 120MHz processor [3].

- **Total Online Runtime:**
  - Figure 4(b) presents the total online runtime. Note that the aggregation error rate \(err_a\) always equals the billing error rate \(err_b\) in the case of a constant tariff.

### Figures

**Figure 2: Aggregation/Billing Error Rate (Constant Tariff) – UK and UMass Datasets**

- **(a) Aggregation/Billing Error Rate vs. \(\epsilon\)**
- **(b) Aggregation/Billing Error Rate vs. \(\delta\)**
- **(c) Aggregation/Billing Error Rate vs. \(m\)**

**Figure 3: Reading Error Rate – UK and UMass Datasets**

- **(a) Reading Error Rate vs. \(\epsilon\)**
- **(b) Reading Error Rate vs. \(\delta\)**
- **(c) Reading Error Rate vs. \(m\)**

**Figure 4: Computational Performance**

- **(a) One-Time Offline Runtime**
- **(b) Total Online Runtime**

These figures provide a visual representation of the error rates and computational performance, allowing for a detailed analysis of the algorithm's behavior under different parameter settings.