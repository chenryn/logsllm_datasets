::: table-contents
  标志   名称                     含义
  ------ ------------------------ ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  b      Blocking                 在设置 locked 标记时有效，并指示从 DLM 请求的操作可能会被阻断。对于演示操作和\"try\"锁定，这个标记会被清除。这个标志的目的是允许收集 DLM 响应时间的统计数据，与其他节点与降级锁无关。
  d      Pending demote           推迟（远程）降级请求
  D      Demote                   降级请求（本地或者远程）
  f      Log flush                释放这个 glock 前需要提交该日志
  F      Frozen                   回复忽略的远程节点 \-- 恢复正在进行。这个标志与文件系统冻结无关，它使用不同的机制，但仅在恢复中使用。
  i      Invalidate in progress   这个 glock 下无效页面的进程中
  I      Initial                  设定何时将 DLM 锁定与这个 glock 关联
  l      Locked                   这个 glock 处于更改状态中
  L      LRU                      glock 出现在 LRU 列表中时设置
  o      Object                   设置 glock 何时与对象关联（即类型为 2 glocks 的内节点，以及类型为 3 的 glock 的资源组）
  p      Demote in progress       glock 正在响应降级请求
  q      Queued                   设定当拥有者排队到 glock 时，并在 glock 保留时清除，但没有剩余所有者。作为算法的一部分使用，计算 glock 的最小保留时间。
  r      Reply pending            从远程节点接收的回复正在等待过程中
  y      Dirty                    释放这个 glock 前需要冲刷到磁盘中的数据
:::
:::
::: table
[]{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#tb-glock-holderflags}
**表 6.2. Glock 拥有者标记**
::: table-contents
  标志   名称        含义
  ------ ----------- -------------------------------------
  a      Async       不要等待 glock 结果（以后轮询结果）
  A      Any         接受任意兼容锁定模式
  c      No cache    取消锁定时，立即降级 DLM 锁定
  e      No expire   忽略随后的锁定取消请求
  E      exact       必须有准确的锁定模式
  F      First       设定赋予这个锁定的第一个拥有者
  H      Holder      表示赋予请求的锁定
  p      Priority    在队列头启用 ENQUEUE 拥有者
  t      Try         \"try\" 锁定
  T      Try 1CB     发送回调的 \"try\" 锁定
  W      Wait        等待请求完成的设置
:::
:::
在确定会导致问题的 glock 后，下一步就是找出它所相关的内节点。glock 号
(n: on the G: line) 表示这个值。它是格式
[*type*]{.emphasis}/[*number*]{.emphasis}，如果 [*type*]{.emphasis} 为
2，则 glock 是一个内节点 glock，[*number*]{.emphasis}
是一个内节点号。要跟踪内节点，运行 `find -inum number`{.literal}，其中
[*number*]{.emphasis} 是从 glocks
文件中的十六进制格式转换为十进制格式的索引节点编号。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
如果您在有锁定冲突的文件系统中运行 `find`{.literal}
命令，可能会让问题更加严重。当您查找冲突的内节点时，最好在运行
`find`{.literal} 命令前停止应用程序。
:::
下表显示了不同 glock 类型的含义。
::: table
[]{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#tb-glock-types}
**表 6.3. Glock 类型**
::: table-contents
  类型号   锁定类型   使用
  -------- ---------- -----------------------------
  1        Trans      事务锁定
  2        Inode      内节点元数据和数据
  3        Rgrp       源组群元数据
  4        Meta       超级块
  5        Iopen      内节点最近探测
  6        Flock      `flock`{.literal}(2)syscall
  8        Quota      配额操作
  9        Journal    Journal mutex
:::
:::
如果识别出的 glock 是不同的类型，那么最可能是类型
3（资源组）。如果您在正常负载时看到大量进程正在等待其它 glock
类型，请向红帽支持提交报告。
如果您看到在资源组锁定中排队了大量等待的请求,，那么可能有很多原因。一个原因可能是，在文件系统中，相对于资源组有大量的节点。另一个可能的原因是，文件系统可能接近完全被使用（平均来讲，需要较长的搜索时间）可以通过添加更多存储并使用
`gfs2_grow`{.literal} 命令来扩展文件系统来提高这种情况。
:::
::: section
::: titlepage
# []{#assembly_gfs2-performance-configuring-gfs2-file-systems.html#enabling-data-journaling-gfs2-performance}启用数据日志 {.title}
:::
通常 GFS2
只将元数据写入其日志中。文件内容会随后由内核定期进行的同步（同步会清除文件系统缓冲）写入磁盘。对一个文件的
`fsync()`{.literal}
调用会导致将文件数据立即写入磁盘。当磁盘报告所有数据被安全写入时，调用会返回。
对于非常小的文件，数据日志可缩短 `fsync()`{.literal}
时间，因为除元数据外，文件数据也会写入日志。随着文件的增大，这个优势会明显降低。在启用数据日志的情况下，对中等和较大文件的写操作会较慢。
对于依赖于 `fsync()`{.literal}
同步文件数据的应用程序，启用数据日志会提高性能。在标记的目录及其所有子目录中创建的
GFS2
文件可自动启用数据日志。现有的长度为零的文件也可以打开或者关闭数据日志。
在一个目录上启动数据日志会把目录设定为 \"inherit
jdata\"，这代表以后所有在这个目录中生成的文件和目录都会进行日志。您可以使用
`chattr`{.literal} 命令在文件中启用和禁用数据日志。
以下命令在 `/mnt/gfs2/gfs2_dir/newfile`{.literal}
文件中启用数据日志，然后检查是否正确设定了标志。
``` literallayout
# chattr +j /mnt/gfs2/gfs2_dir/newfile
# lsattr /mnt/gfs2/gfs2_dir
---------j--- /mnt/gfs2/gfs2_dir/newfile
```
以下命令在 `/mnt/gfs2/gfs2_dir/newfile`{.literal}
文件中禁用数据日志，然后检查是否正确设定了标志。
``` literallayout
# chattr -j /mnt/gfs2/gfs2_dir/newfile
# lsattr /mnt/gfs2/gfs2_dir
------------- /mnt/gfs2/gfs2_dir/newfile
```
您还可以使用 `chattr`{.literal} 命令在目录中设置 `j`{.literal}
标志。当您为某个目录设定此标记时，以后在那个目录中生成的所有文件和目录都会进行日志操作。以下命令在
`gfs2_dir`{.literal} 目录上设置 `j`{.literal}
标志，然后检查是否正确设定了标志。之后，命令会在
`/mnt/gfs2/gfs2_dir`{.literal} 目录中创建一个名为 `newfile`{.literal}
的新文件，然后检查是否为该文件设置了 `j`{.literal}
标志。因为为该目录设置了 `j`{.literal} 标志，因此 `newfile`{.literal}
也应启用日志功能。
``` literallayout
# chattr -j /mnt/gfs2/gfs2_dir
# lsattr /mnt/gfs2
---------j--- /mnt/gfs2/gfs2_dir
# touch /mnt/gfs2/gfs2_dir/newfile
# lsattr /mnt/gfs2/gfs2_dir
---------j--- /mnt/gfs2/gfs2_dir/newfile
```
:::
:::
[]{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems}第 7 章 诊断并修正 GFS2 文件系统的问题 {.title}
:::
以下流程描述了一些常见的 GFS2 问题，并提供了有关如何解决它们的信息。
::: section
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#ref_gfs2-filesystem-unavailable-troubleshooting-gfs2}在节点无法使用 GFS2 文件系统（GFS2 撤回功能） {.title}
:::
GFS2 [*withdraw*]{.emphasis} 功能是 GFS2
文件系统的数据完整性功能，可防止因为硬件或者内核软件造成潜在的文件系统损坏。如果
GFS2 内核模块在任何指定集群节点中使用 GFS2
文件系统时检测到不一致的情况，它会从该文件系统中撤回（withdraw），并使它在相应的节点上不可用，直到卸载并重新挂载该节点（或者被探测到有问题的机器被重启）。所有其他挂载的
GFS2 文件系统在那个节点中仍能完全正常工作。（GFS2 撤回功能没有内核的
panic 严重，内核 panic 会导致该节点被隔离。）
可能导致 GFS2 撤回的主要原因：
::: itemizedlist
-   内节点一致性错误
-   资源组一致性错误
-   日志一致性错误
-   Magic number 元数据一致性错误
-   元数据类型一致性错误
:::
因为不一致性导致 GFS2 撤回的一个示例是，文件内节点的不正确的块计数。当
GFS2
删除一个文件时，它会系统性地删除该文件引用的所有数据和元数据块。在完成后，它会检查内节点的块计数。如果块计数不是
1（1
代表所有剩下的都是磁盘内节点），这表示文件系统不一致，因为内节点的块数量与该文件使用的实际块不匹配。
在很多情况下，问题可能是由硬件故障造成的（内存、主板、HBA、磁盘驱动器、电缆等出问题）。也可能是由内核的程序漏洞（另一个内核模块意外覆盖
GFS2 内存）或者实际文件系统损坏（由 GFS2 错误导致）造成的。
在大多数情况下，从 GFS2
文件系统中恢复的最佳方法是重新引导或者隔离该节点。撤回的 GFS2
文件系统将给您一个将服务重新定位到集群的另一个节点的机会。重新定位服务后，您可以重新引导节点或使用这个命令强制进行隔离。
``` literallayout
# pcs stonith fence node
```
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
不要尝试使用 `umount`{.literal} 和 `mount`{.literal}
命令手动卸载并重新挂载文件系统。您必须使用 `pcs`{.literal} 命令，否则
Pacemaker 会检测到文件系统服务已消失并保护该节点。
:::
导致撤回的一致性问题可能会导致无法停止文件系统服务，因为它可能导致系统挂起。
如果重新挂载后问题仍然存在，应该停止该文件系统服务以从集群中的所有节点卸载该文件系统，然后按照以下步骤使用
`fsck.gfs2`{.literal} 命令执行文件系统检查。
::: orderedlist
1.  重新引导受影响的节点。
2.  在 Pacemaker
    中禁用非克隆的文件系统服务，从集群中的每个节点卸载该文件系统。
    ``` literallayout
    # pcs resource disable --wait=100 mydata_fs
    ```
3.  在集群的一个节点中，在文件系统设备上运行 `fsck.gfs2`{.literal}
    命令来检查并修复文件系统损坏。
    ``` literallayout
    # fsck.gfs2 -y /dev/vg_mydata/mydata > /tmp/fsck.out
    ```
4.  通过重新启用文件系统服务从所有节点中重新挂载 GFS2 文件系统：
    ``` literallayout
    # pcs resource enable --wait=100 mydata_fs
    ```
:::
您可以使用文件系统服务中指定的 `-o error=panic`{.literal}
选项挂载文件系统来覆盖 GFS2 撤回功能。
``` literallayout
# pcs resource update mydata_fs “options=noatime,errors=panic”
```
当指定这个选项时，所有会导致系统撤回的错误都是强制造成一个内核
panic。这样可停止节点的通讯，从而可以隔离该节点。这对于长期保持无人值守的集群特别有用，而无需监控或干预。
GFS2
撤回的内部工作原理是，断开锁定协议以确保以后所有的文件系统操作都会出现
I/O 错误。因此，当发生撤回时，通常会在系统日志中看到来自设备映射器的 I/O
错误。
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#ref_gfs2-filesystem-hangs-one-node-troubleshooting-gfs2}GFS2 文件系统挂起，需要重启一个节点 {.title}
:::
如果您的 GFS2
文件系统挂起且没有返回针对它运行的命令，但重启一个特定节点会使系统恢复正常，这可能表示有锁定问题或者存在程序漏洞。如果出现这种情况，在出现这个问题时收集
GFS2 数据并创建一个红帽支持问题单，如[收集 GFS2
数据进行故障排除](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_gfs2_file_systems/assembly_troubleshooting-gfs2-configuring-gfs2-file-systems#proc_gathering-gfs2-data-troubleshooting-gfs2){.link}所述。
:::
::: section
::: titlepage
# []{#assembly_troubleshooting-gfs2-configuring-gfs2-file-systems.html#ref_gfs2-filesystem-hangs-all-nodes-troubleshooting-gfs2}GFS2 文件系统挂起，需要重启所有节点 {.title}