try to solve this problem by providing those invariants through
JML annotations [25]; however, the resulting approach requires
significant manual effort on the part of the developer or security
analyst.
Another popular approach for proving k-safety is to construct so-
called product programs [12, 13, 71]. Similar to self-composition, the
product program method also reduces k-safety to standard safety
by constructing a new program containing an assertion. While
there are several different methods for constructing the product
program, the central idea –shared in this work– is to execute the
different copies of the program in lock step whenever possible. One
disadvantage of this approach is that it can cause a blow-up in
program size. As shown in the work of Sousa and Dillig [65], the
product program approach can therefore suffer from scalability
problems.
The approach advocated in this paper is most closely related
to relational program logic, such as Cartesian Hoare Logic [65]
and Relational Hoare Logic [15]. Specifically, the QCHL program
logic introduced in Section 4 builds on top of CHL by instantiating
it in the ϵ-bounded non-interference setting and augmenting it
with additional rules for tracking resource usage and utilizing taint
information. One advantage of this approach over explicit product
construction is that we decompose the proof into smaller lemmas
by constructing small product programs on-the-fly rather than
constructing a monolithic program that is subsequently checked
by an off-the-shelf verifier.
The approach described in this paper also shares similarities
with the work of Terauchi and Aiken, in which they extend self-
composition with type-directed translation [52, 66]. In particular,
this technique uses a type system for secure information flow to
guide product construction. Specifically, similar to our use of taint
information to determine when two loops can be synchronized, Ter-
auchi and Aiken use type information to construct a better product
program than standard self-composition. Our verification technique
differs from this approach in two major ways: First, our algorithm
is not guided purely by taint information and uses other forms
of semantic information (e.g., relational loop invariants) to deter-
mine when two loops can be executed in lock step. Second, similar
to other approaches for product construction, the type-directed
translation method generates a new program that is subsequently
verified by an off-the-shelf verifier. In contrast, our method decom-
poses the proof into smaller lemmas by constructing mini-products
on-the-fly, as needed.
Almeida et al. implement a tool named ct-verif based on afore-
mentioned techniques (involving both product programs and self-
composition) [6]. In particular, ct-verif is designed for verifying the
constant-time policy, which roughly corresponds to our notion of
0-bounded non-interference instantiated with a timing cost model.
In addition to using different techniques based on QCHL and taint
analysis, Themis provides support for verifying a more general
property, namely ϵ-bounded non-interference for any value of ϵ.
An alternative approach for verifying k-safety is the decompo-
sition method used in Blazer [8]: This method decomposes exe-
cution traces into different partitions using taint information and
then verifies k-safety of the whole program by proving a standard
safety property of each partition. One possible disadvantage of
this approach is that, unlike our method and product construction
techniques, Blazer does not directly reason about the relation-
ship between a pair of program executions. As illustrated through
some of the examples in Section 4, such relational reasoning can
greatly simplify the verification task in many cases. Furthermore,
as we demonstrate in Section 6, Themis can verify benchmarks that
cannot be proven by Blazer within a 10-minute time limit.
In their recent work, Ngo et al. propose a language-based system
for verifying and synthesizing synthesizes programs with constant-
resource usage, meaning that every execution path of the program
consumes the same amount of resource [53]. This technique uses
a novel type system to reason both locally and globally about the
resource usage bounds of a given program. Similar to work for
verifying constant-time policy, this technique also does not allow
proving ϵ-bounded non-interference for arbitrary values of ϵ. Fur-
thermore, as a type-based solution for a functional language, this
technique puts heavier annotation burden on the developer and is
not immediately applicable to standard imperative languages like
Java or C.
Secure information flow. There has been a significant body of
work on language-based solutions for enforcing information flow
properties [51, 56, 69, 72]. For instance, Zhang et al. [72] propose
a language-based approach that tracks side-channel leakage, and
Pottier et al. [56] design a type-based information flow analysis
inside an ML-style language. Themis differs from these language-
based solutions in that it requires minimal annotation effort and
works on existing Java programs.
One of the most popular tools for tracking information flow in ex-
isting Java applications is FlowDroid [9], and Themis builds on top
of FlowDroid to identify secret-tainted variables. FlowTracker [59]
is another information flow analysis for C/C++ featuring efficient
representation of implicit flow. We believe these techniques are
complimentary to our approach, and a tool like Themis can directly
benefit from advances in such static taint tracking tools.
There have also been attempts at verifying the constant-time
policy directly using information-flow checking [11]. However, this
approach is flow-insensitive (and therefore imprecise) and imposes
a number of restrictions on the input program.
Automatic resource bound computation. There has been a flurry
of research on statically computing upper bounds for the resource
usage of imperative programs. Existing techniques for this purpose
leverage abstract interpretation [37], size-change abstraction [74],
lossy vector addition systems [63], linear programming [20], dif-
ference constraints [64], recurrence relations [4, 7, 29], and term
rewriting [18]. Another line of research, called AARA [39–43], per-
forms bound analysis on functional languages.
Our approach differs from these approaches in that we perform
relational reasoning about resource usage. That is, rather than
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA886computing an upper bound on the resource usage of the program,
we use QCHL to prove an upper bound on the difference between the
resource usage of two program runs. Similar to our QCHL, recent
work by Çiçek et al. performs relational cost analysis to reason
about the difference in resource usage of a pair of programs [21].
Their work shares with us the insight that relational analysis may
be simplified by exploiting the structural similarity between the
inputs as well as the program codes. However, their non-relational
reasoning relies on range analysis while Themis relies on Hoare-
style weakest precondition computation; as a result Themis is more
precise. Also, Themis analyzes real-world Java programs, while [21]
is built on top of a hypothetical higher-order functional language.
Other defenses against side channels. In this paper, we consider a
purely static approach for detecting resource side channels. How-
ever, there are other possible ways of detecting vulnerabilities and
preventing against side channel attacks. For instance, Bang et al.
use symbolic execution and model counting to quantify leakage for
a particular type of side channel [10]. Pasareanu et al. have recently
implemented a symbolic execution based algorithm for generating
inputs that maximize side channel measurements (namely timing
and memory usage) [54]. Sidebuster [73] uses a hybrid static/dy-
namic analysis to detect side-channels based on irregularities in the
One key advantage of our approach compared to these other tech-
niques is that it can be used to verify the absence of side-channel
vulnerabilities in programs.
There has also been a line of research that focuses for defending
against side channels using runtime systems [49], compilers [50, 57,
58], or secure hardware [48]. Unlike these techniques, our approach
does not result in runtime overhead.
9 CONCLUSIONS
We have proposed a new security policy called ϵ-bounded non-
interference that can be used to verify the absence of resource side
channels in programs. We have also proposed an automated verifi-
cation algorithm, implemented in a tool called Themis, for proving
this property. Our approach verifies the absence of side channels by
combining lightweight static taint analysis with precise relational
verification using a new program logic called QCHL.
We have evaluated our tool, Themis, in a number of ways and
have shown that (a) it can find previously unknown vulnerabilities
in widely used Java programs, (b) it can verify that the repaired ver-
sions of vulnerable programs do not exhibit the original vulnerabil-
ity, and (c) it compares favorably against Blazer, a state-of-the-art
tool for finding timing side channels in Java programs.
There are a number of directions for future work. First, our cur-
rent implementation only provides cost models for timing and
response size; however, we would like to broaden the applica-
bility of Themis by providing cost models for other kinds of re-
sources. Second, our current implementation can verify bounded
non-interference for a given ϵ, but we would also like to automat-
ically infer the smallest ϵ for which the program is safe. While
this extension can be easily done by solving an optimization rather
than a satisfiability problem, our current implementation does not
provide this capability due to limitations in Z3’s OCaml API.
ACKNOWLEDGEMENT
We would like to thank the anonymous reviewers for their helpful
feedback. We also thank Calvin Lin for his insightful comments,
Marcelo Sousa for setting up the DESCARTES [65] tool, and the
Jetty developer team for their responsiveness as well as the assis-
tance they provide.
This material is based on research sponsored by DARPA award
FA8750-15-2-0096 as well as NSF Award CCF-1712067. The U.S.
Government is authorized to reproduce and distribute reprints for
Governmental purposes notwithstanding any copyright notation
thereon. The views and conclusions contained herein are those
of the authors and should not be interpreted as necessarily repre-
senting the official policies or endorsements, either expressed or
implied, of the U.S. Government.
REFERENCES
[1] 2017. A timing channel in Jetty. https://github.com/eclipse/jetty.project/commit/
2baa1abe4b1c380a30deacca1ed367466a1a62ea. (2017).
[2] Onur Aciiçmez, Çetin Kaya Koç, and Jean-Pierre Seifert. 2007. On the Power of
Simple Branch Prediction Analysis. In Proceedings of the 2Nd ACM Symposium
on Information, Computer and Communications Security (ASIACCS ’07). ACM,
312–320.
[3] Onur Aciiçmez and Werner Schindler. 2008. A Vulnerability in RSA Implemen-
tations Due to Instruction Cache Analysis and Its Demonstration on OpenSSL.
In Proceedings of the 2008 The Cryptopgraphers’ Track at the RSA Conference on
Topics in Cryptology (CT-RSA’08). Springer-Verlag, 256–273.
[4] Elvira Albert, Jesús Correas Fernández, and Guillermo Román-Díez. 2015. Non-
cumulative Resource Analysis. In Proceedings of the 21st International Conference
on Tools and Algorithms for the Construction and Analysis of Systems - Volume
9035. Springer-Verlag New York, Inc., 85–100.
[5] Nadhem J. AlFardan and Kenneth G. Paterson. 2013. Lucky Thirteen: Breaking
the TLS and DTLS Record Protocols. In 2013 IEEE Symposium on Security and
Privacy, SP 2013, Berkeley, CA, USA, May 19-22, 2013. 526–540.
[6] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, and
Michael Emmi. 2016. Verifying Constant-Time Implementations. In 25th USENIX
Security Symposium, USENIX Security 16, Austin, TX, USA, August 10-12, 2016.
53–70.
[7] Diego Esteban Alonso-Blas and Samir Genaim. 2012. On the Limits of the Classical
Approach to Cost Analysis. In Proceedings of the 19th International Conference on
Static Analysis (SAS’12). Springer-Verlag, 405–421.
[8] Timos Antonopoulos, Paul Gazzillo, Michael Hicks, Eric Koskinen, Tachio Ter-
auchi, and Shiyi Wei. 2017. Decomposition Instead of Self-Composition for
k-Safety. In Proceedings of the ACM Conference on Programming Language Design
and Implementation (PLDI).
[9] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick D. McDaniel. 2014.
FlowDroid: precise context, flow, field, object-sensitive and lifecycle-aware taint
analysis for Android apps. In ACM SIGPLAN Conference on Programming Lan-
guage Design and Implementation, PLDI ’14, Edinburgh, United Kingdom - June 09
- 11, 2014. 259–269.
[10] Lucas Bang, Abdulbaki Aydin, Quoc-Sang Phan, Corina S. Păsăreanu, and Tevfik
Bultan. 2016. String Analysis for Side Channels with Segmented Oracles. In Pro-
ceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations
of Software Engineering (FSE 2016). ACM, 193–204.
[11] Gilles Barthe, Gustavo Betarte, Juan Campo, Carlos Luna, and David Pichardie.
2014. System-level Non-interference for Constant-time Cryptography. In Pro-
ceedings of the 2014 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’14). ACM, 1267–1279.
[12] Gilles Barthe, Juan Manuel Crespo, and César Kunz. 2011. Relational Verifica-
tion Using Product Programs. In FM 2011: Formal Methods - 17th International
Symposium on Formal Methods, Limerick, Ireland, June 20-24, 2011. Proceedings.
200–214.
[13] Gilles Barthe, Juan Manuel Crespo, and César Kunz. 2013. Beyond 2-Safety:
Asymmetric Product Programs for Relational Program Verification. In Logical
Foundations of Computer Science, International Symposium, LFCS 2013, San Diego,
CA, USA, January 6-8, 2013. Proceedings, Sergei N. Artëmov and Anil Nerode
(Eds.), Vol. 7734. Springer, 29–43.
[14] Gilles Barthe, Pedro R D’Argenio, and Tamara Rezk. 2004. Secure information
flow by self-composition. In Computer Security Foundations Workshop, 2004. Pro-
ceedings. 17th IEEE. IEEE, 100–114.
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA887[15] Nick Benton. 2004. Simple relational correctness proofs for static analyses and
program transformations. In ACM SIGPLAN Notices, Vol. 39. ACM, 14–25.
[16] Eric Bodden, Andreas Sewe, Jan Sinschek, Hela Oueslati, and Mira Mezini. 2011.
Taming reflection: Aiding static analysis in the presence of reflection and custom
class loaders. In Proceedings of the 33rd International Conference on Software
Engineering, ICSE 2011, Waikiki, Honolulu , HI, USA, May 21-28, 2011. 241–250.
[17] Andrew Bortz and Dan Boneh. 2007. Exposing Private Information by Timing
Web Applications. In World Wide Web. ACM, 621–628.
[18] Marc Brockschmidt, Fabian Emmes, Stephan Falke, Carsten Fuhs, and Jürgen
Giesl. 2016. Analyzing Runtime and Size Complexity of Integer Programs. ACM
Trans. Program. Lang. Syst. 38, 4, Article 13 (Aug. 2016), 50 pages.
[19] David Brumley and Dan Boneh. 2003. Remote Timing Attacks Are Practical.
In Proceedings of the 12th USENIX Security Symposium, Washington, D.C., USA,
August 4-8, 2003.
[20] Quentin Carbonneaux, Jan Hoffmann, and Zhong Shao. 2015. Compositional
Certified Resource Bounds. In Proceedings of the 36th ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI ’15). ACM, 467–478.
[21] Ezgi Çiçek, Gilles Barthe, Marco Gaboardi, Deepak Garg, and Jan Hoffmann. 2017.
Relational Cost Analysis. In Proceedings of the 44th ACM SIGPLAN Symposium
on Principles of Programming Languages (POPL 2017). ACM, 316–329.
[22] Shuo Chen, Rui Wang, XiaoFeng Wang, and Kehuan Zhang. 2010. Side-Channel
Leaks in Web Applications: A Reality Today, a Challenge Tomorrow. In 31st IEEE
Symposium on Security and Privacy, S&P 2010, 16-19 May 2010, Berleley/Oakland,
California, USA. 191–206.
[23] Sujit Rokka Chhetri and Mohammad Abdullah Al Faruque. 2017. Side-Channels
of Cyber-Physical Systems: Case Study in Additive Manufacturing. IEEE Design
& Test (2017).
[24] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An efficient SMT solver.
In Tools and Algorithms for the Construction and Analysis of Systems. Springer,
337–340.
[25] Guillaume Dufay, Amy Felty, and Stan Matwin. 2005. Privacy-sensitive Infor-
mation Flow with JML. In Proceedings of the 20th International Conference on
Automated Deduction (CADE’ 20). Springer-Verlag, 116–130.
[26] Edward W. Felten and Michael A. Schneider. 2000. Timing attacks on Web
privacy. In CCS 2000, Proceedings of the 7th ACM Conference on Computer and
Communications Security, Athens, Greece, November 1-4, 2000. 25–32.
[27] Cormac Flanagan and K. Rustan M. Leino. 2001. Houdini, an Annotation Assistant
for ESC/Java. In Proceedings of the International Symposium of Formal Methods
Europe on Formal Methods for Increasing Software Productivity (FME ’01). Springer-
Verlag, 500–517.
[28] Cormac Flanagan, K. Rustan M. Leino, Mark Lillibridge, Greg Nelson, James B.
Saxe, and Raymie Stata. 2002. Extended Static Checking for Java. In Proceedings
of the ACM SIGPLAN 2002 Conference on Programming Language Design and
Implementation (PLDI ’02). ACM, New York, NY, USA, 234–245.
[29] Antonio Flores-Montoya and Reiner Hähnle. 2014. Resource Analysis of Complex
Programs with Cost Equations. Springer International Publishing, Cham, 275–295.
[30] Riccardo Focardi and Roberto Gorrieri. 1995. A Classification of Security Proper-
ties for Process Algebras1. Journal of Computer security 3, 1 (1995), 5–33.
[31] Karine Gandolfi, Christophe Mourtel, and Francis Olivier. 2001. Electromagnetic
Analysis: Concrete Results. In Proceedings of the Third International Workshop
on Cryptographic Hardware and Embedded Systems (CHES ’01). Springer-Verlag,
251–261.
[32] Nethanel Gelernter and Amir Herzberg. 2015. Cross-Site Search Attacks. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications
Security. ACM, 1394–1405.
[33] Daniel Genkin, Itamar Pipman, and Eran Tromer. 2014. Get Your Hands Off My
Laptop: Physical Side-Channel Key-Extraction Attacks on PCs. In Cryptographic
Hardware and Embedded Systems - CHES 2014 - 16th International Workshop,
Busan, South Korea, September 23-26, 2014. Proceedings. 242–260.
[34] Jan Goguen and Meseguer Jose. 1982. Security policies and security models. In
Symposium on Security and Privacy. IEEE Computer Society Press, 11–20.
[35] James W Gray III. 1992. Toward a mathematical foundation for information flow
security. Journal of Computer Security 1, 3-4 (1992), 255–294.
[36] David Gullasch, Endre Bangerter, and Stephan Krenn. 2011. Cache Games -
Bringing Access-Based Cache Attacks on AES to Practice. In 32nd IEEE Symposium
on Security and Privacy, S&P 2011, 22-25 May 2011, Berkeley, California, USA. 490–
505.
[37] Sumit Gulwani, Krishna K. Mehra, and Trishul Chilimbi. 2009. SPEED: Precise
and Efficient Static Estimation of Program Computational Complexity. In Pro-
ceedings of the 36th Annual ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages (POPL ’09). ACM, 127–139.
[38] Andreas Haeberlen, Benjamin C. Pierce, and Arjun Narayan. 2011. Differential