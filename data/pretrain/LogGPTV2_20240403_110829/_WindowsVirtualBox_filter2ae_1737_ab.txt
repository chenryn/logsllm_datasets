[NtCreateSection](https://msdn.microsoft.com/en-us/library/windows/hardware/ff566428\(v=vs.85\).aspx)。调用该函数来为磁盘上的PE文件创建一个Image
Section对象。
[LdrRegisterDllNotification](https://msdn.microsoft.com/en-us/library/dd347461\(v=vs.85\).aspx)。这是一个准官方支持的回调函数，当新的DLL被加载或卸载时，该函数就会通知应用程序相关事件。
这些钩子扩大了可被加载的经过签名的DLL的范围。由于内核中只包含Oracle以及微软代码，因此可以通过签名验证，能够用来引导进程。然而，当运行某个较为特别的应用时（VirtualBox.exe显然是个特别的应用），我们可能就需要加载第三方签名的代码（比如GPU驱动）。由于这些钩子位于用户模式下，因此程序可以很方便地调用系统的[WinVerifyTrust](https://msdn.microsoft.com/en-us/library/windows/desktop/aa388208\(v=vs.85\).aspx)
API函数，使用系统证书库来验证证书链，也可以验证使用[Catalog](https://docs.microsoft.com/en-us/windows-hardware/drivers/install/catalog-files)（.cat）文件签名的那些文件。
如果正在加载的某个DLL无法满足VBOX预期的签名标准，那么用户模式下的钩子就会拒绝加载这个DLL。VBOX仍然没有完全信任该用户，WinVerifyTrust会将证书链接回用户的CA证书中的根证书。然而，VBOX只会信任系统的CA证书。由于非管理员用户无法将新的可信根证书添加到系统的CA证书列表中，因此使用这种方法就可以大大限制恶意DLL的注入攻击。
当然，你可以使用合法的经过认证的签名证书，这样应该就能被程序信任，但一般情况下恶意代码不会走这条路。即使代码经过签名，加载程序同样会验证这个DLL文件是否属于TrustedInstaller用户所有。这个验证过程由[supHardNtViCheckIsOwnedByTrustedInstallerOrSimilar](https://www.virtualbox.org/browser/vbox/trunk/src/VBox/HostDrivers/Support/win/SUPHardenedVerifyImage-win.cpp?rev=67954#L454)来实现。除了自己以外，普通用户无法将文件的所有者改成其他人，因此这样就能限制加载任意签名文件可能造成的危害。
VBOX代码中的确存在一个函数（[supR3HardenedWinIsDesiredRootCA](https://www.virtualbox.org/browser/vbox/trunk/src/VBox/HostDrivers/Support/win/SUPHardenedVerifyImage-win.cpp?rev=67954#L1901)），可以限制哪些证书能够成为根证书。在官方发行版中，虽然这个函数中与CA白名单有关的代码已经被注释掉，然而却存在一个黑名单列表，只要你的公司名不叫做“[U.S.
Robots and Mechanical Men,
Inc](https://www.virtualbox.org/browser/vbox/trunk/src/VBox/HostDrivers/Support/win/SUPHardenedVerifyImage-win.cpp?rev=67954#L2016)”，那么这个黑名单就不会影响到你。
即使存在这些保护机制，对管理员而言，进程仍然处于不安全的状态。虽然管理员无法绕过打开进程时存在的安全限制条件，但是他们可以在本地主机中安装一个Trusted
Root CA证书，签名一个DLL文件，设置DLL文件的所有者然后强制加载该DLL。这种方法可以绕过镜像验证机制，将镜像加载到经过验证的VBOX进程中。
稍微总结一下，VBOX加固机制尝试提供如下几种保护措施：
1、确保在受保护程序初始化过程中，没有任何代码可以插入进来。
2、阻止用户进程打开受保护进程或线程的“可写”句柄，因为这种句柄可以实现任意代码注入。
3、阻止不可信DLL通过常见的加载方法（如COM）进行注入。
整个保护过程很有可能会存在一些bug或者没考虑到的边缘情况。这个过程中，有这么多不同的验证检查操作，这些检查必须全部满足。因此，假如我们不想申请一个合法的代码签名证书，我们也不具备管理员权限，那么这种情况下，我们要如何才能实现在受保护VBOX进程中运行任意代码？我们会重点关注第三种保护措施，因为这可能是所有保护措施中最为复杂的一种，因此很有可能存在最多的问题。
**三、利用COM注册中的信任链（Chain-of-Trust）**
****
我想介绍的第一个[漏洞](https://bugs.chromium.org/p/project-zero/issues/detail?id=1103)为
**CVE-2017-3563** 漏洞，这个漏洞在VBOX 5.0.38/5.1.20版本中被修复。该漏洞利用了DLL加载中存在的信任链（chain-of-trust）问题，诱导VBOX加载经过微软签名的DLL，最终实现不可信任意的代码执行。
如果运行[ **Process Monitor**](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)来观察受保护的VBOX进程，你会发现该进程使用了COM，更具体来说，该进程使用了在
**VBoxC.dll** COM服务器中实现的VirtualBoxClient类。
从攻击者的角度来看，COM服务器注册最有用的地方，在于COM对象的注册操作可以在两个地方完成，即用户的注册表中或者本地主机（local
machine）注册表中。出于兼容性方面的考虑，系统会优先查找用户的注册表，然后再查找本地主机注册表。因此，在普通用户权限下，攻击者可以覆盖COM注册操作，此时当某个应用程序试图加载指定的COM对象时，就会加载我们刚刚覆盖的任意DLL。
劫持COM对象并不是一种新颖的技术，这种技术已经存在多年，许多恶意软件利用这种技术来[实现持久化](https://attack.mitre.org/wiki/Technique/T1122)目的。随着众人重拾对COM的兴趣，这种技术又再度出现在公众视野中。然而，除了UAC绕过之外，COM劫持很少用来权限提升场景中。
除此之外，UAC以及COM劫持之间还存在着联系，COM运行时会主动去防止劫持技术用于权限提升（EoP）场景，采用的具体方法是，如果当前进程处于高权限下，那么COM运行时就会禁用特定的用户注册表的读取。当然这种方法不是每次都能[成功](https://www.virusbulletin.com/uploads/pdf/conference_slides/2011/Larimer-VB2011.pdf)。只有当你将UAC当成一种安全防御屏障时，这种方法才行之有效，然而微软坚称他们从来没有也永远不会承认过这个观点。例如，2007年初的[这篇文章](https://blogs.msdn.microsoft.com/cjacks/2007/02/21/per-user-com-registrations-and-elevated-processes-with-uac-on-windows-vista/)就明确指出这种方法是用于阻止权限提升操作。在我看来，COM的这种查找行为清楚地表明，UAC的设计初衷就是想成为一道安全屏障，然而，它并没有实现这一目标，因此只好被重新[包装](https://technet.microsoft.com/en-us/library/2007.06.uac.aspx)，用来帮助“开发者”开发更好的代码。
如果我们可以将自己的代码替换COM注册，那么我们应该就能实现在受保护的进程中运行代码。从理论上讲，所有的加固签名检查步骤应该都会阻止我们加载不可信的代码。在实际的研究过程中，我们还是应当具体尝试一下我们觉得会失败的那些操作，万一梦想实现就会收获巨大惊喜。经过尝试后，我们至少可以了解保护机制的具体工作流程。我在用户注册表中注册了一个COM对象，来劫持VirtualBoxClient类，将其指向一个未签名的DLL（实际上我使用了某个管理员账户将DLL的所有者改成
**TrustedInstaller** ，当然这只是为了测试方便）。当我尝试启动虚拟机时，程序弹出了如下对话框。
可能我在COM注册时犯了点错误，然而在另一个独立的应用程序中测试这个COM对象时，却显示一切正常。因此，这个错误很有可能意味着程序无法加载DLL。幸运的是，VBOX非常慷慨，默认就提供了所有进程加固事件的日志。日志名为
**VBoxHardening.log**
，位于当前虚拟机目录中的Logs文件夹中。在日志中查找DLL的名字，我们得到如下日志条目（我做了大量精简操作，以方便说明）：
    supHardenedWinVerifyImageByHandle: -> -22900 (c:dummytestdll.dll) 
    supR3HardenedScreenImage/LdrLoadDll: c:dummytestdll.dll: Not signed. 
    supR3HardenedMonitor_LdrLoadDll: rejecting 'c:dummytestdll.dll' 
    supR3HardenedMonitor_LdrLoadDll: returns rcNt=0xc0000190
因此，可以确认的是我们的测试DLL没有签名，所以LdrLoadDll hook拒绝加载这个DLL。LdrLoadDll
hook返回了一个错误代码，这个代码会传递给COM DLL加载器，导致COM认为该类不存在。
虽然事情并不是简单通过指定自己的DLL就能完成（别忘了我们还修改了DLL的所有者属性），但这至少给了我们一丝希望，因为结果表明VBOX进程还是会使用我们劫持过的COM注册。因此，我们需要的就是满足以下条件的一个COM对象：
1、由可信证书进行签名。
2、所有者为TrustedInstaller。
3、当加载时，可以实现在进程中执行任意代码。
条件1以及条件2很容易就能满足，系统中所有的微软COM对象都经过可信证书签名（微软内置的某个发行商证书），并且大多对象的所有者为TrustedInstaller。然而，条件3看起来非常难以满足，COM对象通常是在DLL内部实现的，我们不能修改DLL文件，否则文件就会变成未签名状态。我们最终还是找到了这样一个文件，这是一个默认安装的经过微软签名的COM对象，可以帮助我们满足条件3，这就是[Windows脚本组件](https://technet.microsoft.com/en-us/library/ee692848.aspx)（Windows Script Components，WSC）。
WSC有时候也称之为Scriptlets（脚本小程序），是可以利用的优秀运行载体。从HTTP
URL加载时，我们可以使用WSC来[绕过AppLocker](http://subt0x10.blogspot.co.uk/2017/04/bypass-application-whitelisting-script.html)。在这里，最让我们感兴趣的是它们也可以注册为COM对象。
经过注册的WSC包含如下两个部分：
1、WSC运行时：scrobj.dll，承担进程内部的COM服务器角色。
2、包含Scriptlet实现的一个文件，由兼容的脚本语言编写而成。
当某个应用程序试图加载注册后的类时，scrobj.dll就会加载到内存中。这个COM运行时会请求对应类的一个新对象，导致WSC运行时会在注册表中查找与Scriptlet文件对应的那个URL。然后，WSC运行时会加载Scriptlet文件，在进程中执行文件内部包含的脚本。这里最关键的一点是，从VBOX角度来看，只要scrobj.dll（还有其他相关的脚本语言库，如JScript.dll）是合法的DLL签名文件，那么脚本代码就会得到运行机会，因为VBOX的加固代码永远不会去检查这些脚本代码。这样我们就能实现在加固进程内部运行任意代码的目的。首先，我们来确认scrobj.dll的确可以被VBOX加载。如下图所示，这个DLL经过微软的签名，并且其所有者为TrustedInstaller。
那么，有效的Scriptlet文件应该满足什么格式？Scriptlet文件是简单的XML文件，我不会去详细阐述每个XML元素所代表的含义，只会重点突出其中涉及任意JScript代码的脚本段。在这个例子中，当被加载时，Scriptlet会启动计算器（Calculator）进程：
      <![CDATA[
      new ActiveXObject('WScript.Shell').Exec('calc');