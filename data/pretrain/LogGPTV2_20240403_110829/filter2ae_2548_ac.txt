搭建很简单，测试了一下，效果还可以。python开发的，做二次开发也比较容易。不过服务的模拟就直接是开放对应的端口，部署在外网很容易被识破。部署在内网使用还是ok的。
##### (5) Heralding
###### > 简介
Heralding是一款支持捕捉凭证的蜜罐。目前支持的协议：ftp，telnet，ssh，http，https，pop3，pop3s，imap，imaps，smtp，vnc，postgresql和socks5。
###### > 开发语言
Python
###### > 本地搭建测试
安装过程不难，但是有点小坑，故简单记录下安装过程。刚开始在Centos
6.x上搭，死活装不上psycopg2库，各种报错，后来换了个Ubuntu的虚拟机，就装成功了。
    # 安装相关依赖
    sudo yum -y install python3-pip python3-dev python3-venv build-essential libssl-dev libffi-dev
    git clone https://github.com/johnnykv/heralding.git
    cd heralding
    # 建立虚拟环境
    python3 -m venv heralding-env
    source heralding-env/bin/activate
    # 根据官方文档的安装方法，会报错，还需装如下的依赖
    sudo apt-get install postgresql python-psycopg2 libpq-dev python3-setuptools python3-wheel
    pip install -r requirements.txt
    pip install heralding
    # 拷贝配置文件（一些设置都是在这个配置文件中配置）
    cp heralding/heralding.yml .
    # 运行
    sudo ./heralding-env/bin/heralding &
Heralding运行后，本地监听的端口如下图所示（端口和服务可在heralding.yml配置文件中进行配置，我运行Heralding时，开启ssh服务报了错，所以我直接在配置文件里把ssh服务关掉了，故下图看到的22端口是我本地的，不是Heralding开启的）：
对该机器进行nmap扫描，端口识别如下：
Heralding记录的数据保存在log_session.json、log_auth.csv和log_session.csv三个文件中。
_log_session.json：_
该文件记录所有的与蜜罐的交互信息，包括时间戳、source_ip、source_port、destination_ip、destination_port、协议、尝试登陆次数等，算是个蜜罐日志汇总。
_log_auth.csv:_ 该文件记录所有尝试身份验证的用户名和明文密码（我这边只用nmap探测了下端口，所以没记录什么用户名和密码）。
_log_session.json:_
该文件存储与蜜罐的所有连接的条目。数据包括时间戳、持续时间、IP信息和身份验证尝试次数（跟log_session.json差不多，只是数据格式不同）。
###### > 说明
这个蜜罐搭建起来有点小坑，建议Ubuntu系统，Python版本大于3.5。这个蜜罐最大的特点是可以记录用户名密码，日志记录仪比较直观详细，也是个学习二次开发不错的项目。
##### (6) HFish
###### > 简介
**HFish** 是一款基于 **Golang**
开发的跨平台多功能主动诱导型开源蜜罐框架系统，为了企业安全防护做出了精心的打造，全程记录黑客攻击手段，实现防护自主化。目前HFish支持的蜜罐如下：
###### > 开发语言
Golang
###### > 本地搭建测试
搭建很简单，docker大法一分钟就能搞定。详细搭建方法可以参考[HFish的使用文档](https://hfish.io/docs/#/)。
部署完成后，监听端口如下：
搭建完成后，局域网内尝试对该ip进行nmap扫描，nmap扫描完成后，HFish记录了攻击日志（Telnet和Mysql），后台如下图所示：
还有个很炫的态势图（不过我部署在内网，效果一般）：
###### > 说明
试用了下，HFish挺不错的，页面做的很赞，也支持分布式部署。很适合内网分布式部署、运营。如果不用HFish，选择自己开发的话，HFish的设计思路也很值得借鉴。其他更详细的使用心得参考这篇文章：[HFish蜜罐使用心得](https://www.freebuf.com/vuls/220646.html)。
#### 0x03 总结
对于中小型企业来说，可选型OpenCanary或HFish在内网部署，因为这两款蜜罐都支持基本的异常行为发现、有前端页面、可支持分布式部署、可支持邮件告警，这几点就能满足大部分企业的需求。
喜欢自己折腾的可以考虑如下的架构：
同时蜜罐在内网部署也需关注自身的安全，做好基本的安全基线（比如修改SSH端口，可以改成一个不常用的大端口，这样假设攻击者已进入内网，在攻击者扫描和爆破SSH的时候我们的蜜罐机器不至于第一时间暴露）。
如果选择二次开发，文中提到的各个蜜罐项目都是很好的参考。
蜜罐没有孰好孰坏，理应尊重开源人员的心血。最主要的是真正使用运营起来，实现蜜罐在内网部署的意义。
#### 0x04 参考连接
  1. [awesome-honeypots: 精选的蜜罐清单集合和相关组件](https://github.com/paralax/awesome-honeypots) ；
  2. [通过Anglerfish蜜罐发现未知的恶意软件威胁](https://drive.google.com/file/d/1seWgXZBf-pHPgW3JFrCzPji29IuvqFm_/view)；
  3. [开源蜜罐测评报告](https://www.freebuf.com/articles/paper/207739.html)；
  4. [企业安全建设—模块化蜜罐平台的设计思路与想法](https://xz.aliyun.com/t/1885);
  5. [开源蜜罐Opencanary的实践与扩展](https://mp.weixin.qq.com/s/AvsW1wuJ7SvwJEBe0nGzcA);
  6. [个人蜜罐Cowrie的运营分析](https://www.freebuf.com/articles/network/197714.html);
  7. [构建一个高交互型的难以发现的蜜罐](https://www.freebuf.com/sectool/135032.html);
  8. [蜜罐与内网安全从0到1-共7篇](https://sosly.me/index.php/papers/)； 
  9. [opencanary二次开发(1)-日志格式](http://pirogue.org/2019/01/15/opencanary_2/)；
  10. [HFish蜜罐使用心得](https://www.freebuf.com/vuls/220646.html)；
  11. [开源蜜罐T-pot 19.03安装和使用](https://blog.csdn.net/yyws2039725/article/details/91353690)；
  12. [MHN蜜罐系统建设](https://www.cnblogs.com/backlion/p/10656399.html)；