1) Native JGR Entry: We use static call graph analy-
sis [7] to ﬁnd all the calling paths in the native code that
start from a JNI method and end at the IndirectReferenc-
eTable::Add(uint32 t cookie, mirror::Object* obj) method. We
ﬁnd 147 paths in the native code. However, through manual
(cid:8)(cid:12)(cid:23)(cid:14)(cid:16)(cid:20)(cid:3)(cid:21)(cid:12)(cid:24)(cid:19)(cid:25)(cid:16)(cid:9)(cid:16)(cid:12)(cid:15)(cid:10)(cid:24)(cid:23)(cid:22)(cid:21)(cid:18)(cid:6)(cid:19)(cid:21)(cid:15)(cid:16)(cid:23)(cid:1)(cid:2)
(cid:1)(cid:3)(cid:7)(cid:3)
(cid:18)(cid:29)(cid:21)(cid:31)(cid:30)(cid:25)(cid:21)(cid:17)(cid:30)(cid:32)(cid:17)(cid:13)(cid:18)(cid:31)(cid:20)(cid:22)(cid:27)(cid:3)(cid:3)(cid:18)(cid:29)(cid:21)(cid:31)(cid:30)(cid:25)(cid:21)(cid:17)(cid:30)(cid:32)(cid:17)(cid:13)(cid:18)(cid:31)(cid:20)(cid:22)(cid:27)(cid:17)(cid:31)(cid:22)(cid:18)(cid:21)(cid:15)(cid:33)(cid:31)(cid:30)(cid:29)(cid:24)(cid:5)(cid:25)(cid:29)(cid:21)(cid:22)(cid:31)(cid:1)(cid:2)
(cid:2)(cid:3)(cid:6)(cid:5)(cid:7)(cid:4)
(cid:18)(cid:29)(cid:21)(cid:31)(cid:30)(cid:25)(cid:21)(cid:17)(cid:34)(cid:33)(cid:25)(cid:27)(cid:17)(cid:5)(cid:25)(cid:29)(cid:21)(cid:22)(cid:31)(cid:3)(cid:3)(cid:26)(cid:18)(cid:35)(cid:18)(cid:12)(cid:19)(cid:26)(cid:22)(cid:20)(cid:33)(cid:7)(cid:30)(cid:31)(cid:9)(cid:5)(cid:25)(cid:29)(cid:21)(cid:22)(cid:31)(cid:1)(cid:2)
(cid:10)(cid:11)(cid:9)(cid:6)(cid:29)(cid:35)(cid:3)(cid:3)(cid:11)(cid:22)(cid:36)(cid:8)(cid:27)(cid:30)(cid:19)(cid:18)(cid:27)(cid:14)(cid:22)(cid:23)(cid:1)(cid:2)
(cid:10)(cid:18)(cid:35)(cid:18)(cid:16)(cid:28)(cid:6)(cid:37)(cid:33)(cid:3)(cid:3)(cid:4)(cid:21)(cid:21)(cid:8)(cid:27)(cid:30)(cid:19)(cid:18)(cid:27)(cid:14)(cid:22)(cid:23)(cid:1)(cid:2)
(cid:7)(cid:21)(cid:15)(cid:19)(cid:23)(cid:16)(cid:14)(cid:24)(cid:9)(cid:16)(cid:17)(cid:16)(cid:23)(cid:16)(cid:21)(cid:14)(cid:16)(cid:11)(cid:12)(cid:13)(cid:20)(cid:16)(cid:4)(cid:4)(cid:5)(cid:15)(cid:15)(cid:1)(cid:2)
Fig. 2. An example of JGR entry in Java code
analysis, we ﬁlter out 67 paths that cannot be exploited
by third-party apps, since those paths can only be gone
through during the Runtime initialization stage for resource
allocation, such as the WellKnownClasses::CacheClass() for
caching classes.
2) Java JGR Entry: After
locating the JGR entries
in the native code, we can map them to the calling
methods in the Java code. According to JNI speciﬁca-
tion [10], JNI methods are registered by using AndroidRun-
time::registerNativeMethods(JNIEnv* env, const char* class-
Name, const JNINativeMethod* gMethods,
int numMeth-
ods) in Android, where the className points to the call-
ing Java class and gMethods contains the mapping rela-
tionship between the native method and the Java method.
Therefore, we can enumerate all corresponding Java meth-
those JNI paths identiﬁed in the na-
ods that
instance, some critical mappings include
tive code. For
to JavaDeathRecipient::JavaDeathRe-
Binder.linkToDeath()
cipient(), Thread.nativeCreate()
to Thread::CreateNativeT-
hread(), and Parcel.nativeReadStrongBinder() to android::
ibinderForJavaObject().
trigger
C. Vulnerable IPC detector
With the collected JGR entry methods in the Java code,
the IPC detector searches an IPC call graph to identify IPC
methods that may trigger those JGR entry methods. Since not
all risky IPC methods may be misused to launch a JGRE
attack, we need to further narrow down the real vulnerable
IPC methods.
1) IPC Call Graph Generator: We use SOOT toolset [46]
to build a method-level call function graph (CFG) for each IPC
method. Then we use PScout [18] to parse the indirect depen-
dency such as Message Handler. Since Android 6.0, AOSP
adopts a new Java Android Compiler Kit (Jack) toolchain [4]
to generate .jack and .dex ﬁles as build target. Since PScout
uses .jar ﬁle as default input, we need to use dex2jar tool [6]
to convert .dex ﬁles to .jar ﬁles before inputting them into
PScout.
2) Risky IPC Detector: When searching the IPC call graph
of each IPC method, if the graph contains any Java JGR entry,
we mark this IPC method as a risky IPC method. There are
two special Java JGR entries, Parcel.nativeReadStrongBinder()
and Parcel.nativeWriteStrongBinder() that are not included in
the IPC method’s call graph, since they are typically called by
the Binder on Transact() in the Binder framework.
430
To solve this problem, we ﬁrst enumerate all four scenarios
when these two methods are called: transmit Binder object
through IPC, transmit IInterface object through IPC, trans-
mit object containing Binder or IInterface through IPC, and
transmit a array (or List) of Binder or IInterface through IPC.
We identify all classes that inherit from Binder or IInterface,
contain Binder or IInterface, or contain one IPC method that
uses Binder or IInterface as parameters. After recognizing
an array type, we can use a similar method to locate all
risky methods. For the type of List, since the detailed type
information is unknown in code static analysis due to Type
Erasure [15], we have to manually check if the List contains
Binder or IInterface elements.
3) Risky IPC Sifter: All the risky IPC methods identiﬁed
in the IPC detector can lead to the increase of JGR when they
are running. However, if those JGR entries will be revoked
quickly, such IPC methods can hardly be used to trigger
JGRE attacks. Therefore, we sift out the following special IPC
methods:
1) only contains Java JGR method Thread.nativeCreate().
The corresponding native JGR method Thread::Create-
NativeThread() immediately releases the JGR entry after
running.
2) Binder or IInterface as parameter will only be used
inside one IPC method and won’t be transmitted to
other methods. The Binder or IInterface object will be
collected by Garbage Collector after the IPC method
ends.
3) Binder or IInterface as parameter will only be used as
the read-only interface for data structures including Map,
Set, or RemoteCallBackList. The Binder or IInterface
object will be collected by Garbage Collector after the
IPC method ends.
4) Binder or IInterface as parameter will be assigned to one
Service’s class member variable. Though the Binder or
IInterface object will not be automatically collected after
the IPC method ends, when the IPC method is called
again with a different Binder or IInterface object, the
last Binder or IInterface object will be revoked.
We further sift out IPC methods that cannot be accessed by
third-party apps according to the permission map generated
by PScout.
D. JGRE Veriﬁcation
We use dynamic
the
testing to verify the
exploitabil-
ity of
identiﬁed IPC methods. We ﬁrst modify
the Android source code to monitor
IPC communica-
tion and JGR add/remove processes. Particularly, we use
Thread.currentThread().getStackTrace() to record IPC’s call
stack along with Binder object’s Object ID. We use AOSP’s
CallStack library to record the call stack for JGR add and JGR
remove along with the JGR number into a log ﬁle.
For each risky IPC interfaces identiﬁed in the previous stage,
we use a semi-automatic method to generate the test cases
for veriﬁcation. We manually extract parameters, e.g., package
name and binder object, and feed them to IPC interfaces so as
)
0
0
0
0
1
(
s
s
e
c
o
r
P
m
i
t
c
V
i
f
o
t
n
u
o
C
y
r
t
n
E
R
G
J
 5
 4
 3
 2
 1
 0
 0
 500
Attacking Time Duration (seconds)
 1000
 1500
 2000
Fig. 3. Misuse effectiveness of 54 vulnerable IPC interfaces
to invoke JGR allocation. Meanwhile, we utilize Javapoet [9]
to generate test code with only small manual changes, i.e.,
feed the analyzed parameters. Also, by analyzing the reference
of framework.jar ﬁle, our test cases can directly use the
hidden class or methods in the standard Android SDK. We
trigger 60000 IPC requests and use DDMS [5] tool to trigger
target process’s Garbage Collector periodically. From the JGR
number recorded in the log, we can verify if one IPC method
is vulnerable and exploitable.
IV. JGRE ANALYSIS RESULTS
We perform a study on the JGRE attack in Android 6.0.1.
In summary, we discover that 32 out of 104 (30.7%) system
services contain 54 vulnerable IPC interfaces that may be
exploited by malicious third-party apps. In addition, we ﬁnd
2 prebuilt apps containing 3 vulnerable IPC interfaces.
A. Vulnerabilities in System Services
Figure 3 shows the increasing JGR entry counts for 54
vulnerable interfaces in system services when they are under
JGRE attacks. The attacks succeed when the JGRE entry
counts are beyond the 51200 threshold. Due to distinct
implementation logics,
the JGR incremental rates vary on
different vulnerabilities. For instance, it takes 1800 seconds
to launch the DoS attack when exploiting INotiﬁcation-
Manager.enqueueToast(String, ITransientNotiﬁcation, int) in-
terface, while it takes only 100 seconds when using IAudioSer-
vice.startWatchingRoutes(IAudioRoutesObserver) interface.
By scrutinizing the 54 vulnerable IPC interfaces one by one,
we ﬁnd that 44 vulnerable interfaces have not been protected at
all. Even among the 13 IPC interfaces that have been protected,
10 interfaces are still vulnerable to JGRE attacks.
B. Unprotected Vulnerable IPC Interfaces
Table I summarizes 44 unprotected vulnerable IPC inter-
faces in Android. Among the 26 unprotected vulnerable system
services, 19 system services can be exploited without acquir-
ing any permission, 4 system services require Normal level
permissions, and only 3 system services require Dangerous
level permissions.
Android team was well aware of JGRE attacks [2], [3], [35],
but why can we still ﬁnd so many unprotected system services?
The major reason is that Android system adopts an ad hoc
431
way to selectively ﬁx a small number of vulnerable system
services. There are two major challenges when extending this
method on all vulnerable IPC methods. First, because of the
fragmentation of the Android ecosystem,
is challenging
to choose speciﬁc thresholds suitable for all apps and all
devices. Moreover, since different interfaces provide different
functions, the thresholds vary in those interfaces. For example,
WiﬁManager sets the threshold to 50 per process, while
InputManagerService sets the threshold to only 1 per process.
If the thresholds cannot be correctly set, Android system will
have a severe usability problem.
it
Second, most system services run in one common sys-
tem server process, and they share one JGR table. Therefore,
one vulnerable interface in any system service can be used to
attack the system server process. It is a challenge to locate
all vulnerable methods. Moreover, new Android versions will
provide some additional IPC methods in system services.
Thus, even if all vulnerable IPC methods have been ﬁxed,
new version may introduce new vulnerable IPC methods.
C. Protected but still Vulnerable IPC Interface
The ﬁrst JGRE attack had been identiﬁed and ﬁxed in
2009 [3]. Since then, Android Security Team has selectively
ﬁxed 13 vulnerable IPC methods by adopting two types of
defense mechanisms. The ﬁrst one depends on certain service
helper classes to constrain third-party apps’ JGR requests.
However,
this approach can be totally circumvented. The
second approach enforces per process constraint by directly
modifying the System Services to limit the JGR entries that
can be requested by each third-party app. Improper implemen-
tation can still fail the protection enforced by this approach.
1) Circumventing System Service Helpers: Android system
provides a number of system service helper classes to help
developers access system services by encapsulating the func-
tions in system services to interfaces that are more developer-
friendly. App developers usually invoke the methods from
system service helper instead of from the service directly.
For instance, ActivityManager is the helper class of Activi-
tyManagerService, and AudioManager is the helper class of
AudioService. Table II lists 9 vulnerable methods that have
been protected by service helper classes to constrain JGR IPC
requests.
This defense approach can effectively prevent
ignorant
developers from unintentionally requesting too many JGR
entries; however, a malicious app can easily bypass it by
directly calling Binder interface to communicate with the
system services. We verify that all 9 vulnerable interfaces in
Table II still can be exploited. Note that among 9 vulnerable
interfaces, only 2 interfaces of WiﬁManager have explicit
code with comments dedicated for DoS mitigation. The wiﬁ
service is implemented in W if iServiceImpl.java and its
helper class is W if iM anager. Because the acquireWiﬁLock()
interface in wiﬁ service is vulnerable, its helper class provides
a speciﬁc protection as shown in Code-Snippet 1 1. When a
1All code we present in this paper has been simpliﬁed for brevity.
Service Name
location
sip
midi
content
mount
appops
bluetooth manager
audio
country detector
power
input method
accessibility
print
package
telephony.registry
media session
media router
media projection
input
window
wallpaper
ﬁngerprint
textservices
network management
connectivity
activity
UNPROTECTED VULNERABLE IPC INTERFACES
TABLE I
Vulnerable IPC Interface
addGpsStatusListener
open3
createSession
registerListener
openDevice
openBluetoothDevice
registerDeviceServer
registerContentObserver
addStatusChangeListener
registerListener
startWatchingMode
getToken
registerAdapter
registerStateChangeCallback
bindBluetoothProﬁleService
bindBluetoothProﬁleService
registerRemoteController
startWatchingRoutes
addCountryListener
acquireWakeLock
addClient
addAccessibilityInteractionConnection
print
addPrintJobStateChangeListener
createPrinterDiscoverySession
getPackageSizeInfo
addOnSubscriptionsChangedListener
listen
listenForSubscriber
registerCallbackListener
createSession
registerClientAsUser
registerCallback
vibrate
watchRotation
getWallpaper
addLockoutResetCallback
getSpellCheckerService
registerNetworkActivityListener
requestNetwork
listenForNetwork
registerTaskStackListener