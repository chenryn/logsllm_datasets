# Experimenting with Multipath TCP

**Authors:**
- Sébastien Barré, Olivier Bonaventure
  - Université catholique de Louvain
  - B-1348 Louvain-la-Neuve
  - Email: [Your Email Here]
- Costin Raiciu, Mark Handley
  - University College London
  - {c.raiciu, m.handley}@cs.ucl.ac.uk

## Abstract
With the increasing availability of multiple connectivity options for mobile devices, there is a growing interest in solutions that can efficiently utilize these diverse communication mediums. We present a demonstration of our Multipath TCP (MPTCP) implementation for Linux, which allows a single TCP flow to be distributed across multiple Internet paths without requiring any modifications to applications. The demonstration will showcase real-world MPTCP communication, including simultaneous use of multiple paths and failover capabilities.

## Categories and Subject Descriptors
C.2.2 [Computer Systems Organization]: Computer-communication networks—Network Protocols

## General Terms
Experimentation

## 1. Introduction
Modern smartphones and tablets, such as Apple's iPad, often support multiple network interfaces like 3G and 802.11. This has led to an increased interest in using several access mediums simultaneously, enabling seamless transitions between them in case of failure and potentially improving end-to-end throughput.

The transport layer is the ideal place to implement multipath functionality due to its comprehensive knowledge of path properties and application byte streams. Simply scattering packets over multiple paths can lead to packet reordering, confusing the transport protocol and resulting in poor performance. By maintaining the reliable byte stream semantics of TCP, unmodified applications can immediately benefit from multipath TCP.

While the concept of multipath transport at the transport layer is not new, previous research efforts have not produced a real-world implementation. This gap is particularly evident in the evaluation of real-world scenarios involving simultaneous use of different communication mediums, such as 3G and Wi-Fi, and the impact of in-kernel implementations compared to simulations.

There is renewed interest in making multipath TCP a reality, as evidenced by the IETF's creation of a multipath working group. An in-kernel implementation of multipath TCP can serve multiple purposes, including experimentation on the Internet, highlighting benefits and drawbacks, understanding competition with traditional TCP, identifying protocol design issues, testing deployability, and conducting realistic experiments with high-speed links.

Our contribution is to provide a functional implementation of MPTCP, the IETF multipath solution. We will demonstrate the potential of this solution by showing a media transfer (e.g., video streaming) over multipath TCP between a remote server and a Nokia N900 device.

In the following sections, we outline the design of the multipath protocol, describe the architecture of our implementation, and discuss ongoing work.

## 2. MPTCP Protocol
The most critical design choice in a multipath protocol is the sequence numbering. Previous approaches, such as those in [7, 9, 5], used a single sequence number space, leading to significant reordering at the receiver. This reordering can be mistaken for packet loss, necessitating specific algorithms to distinguish between normal multipath reordering and actual failures. Additionally, a single sequence number space makes it difficult to identify which path(s) delivered a segment if it was sent redundantly.

To address these issues, the MPTCP proposal uses a dual sequence number space. Each subflow has its own sequence space, while a data (or connection-level) sequence space allows reordering at the aggregate connection level. Each segment carries both subflow and data sequence numbers.

Another important design choice is the handling of shared bottlenecks. To ensure fairness when multiple multipath flows share a bottleneck, MPTCP couples congestion control across paths, eliminating the need to detect shared bottlenecks [8]. MPTCP performs flow control in aggregate, not on individual subflows.

A key goal of MPTCP is to be deployable in the current Internet without changing routers, middleboxes, or NATs. Each subflow appears as a normal TCP flow to the network, with the only difference being the inclusion of new TCP options. These options are used to declare MPTCP support, exchange alternate addresses, and handle other control messages. The overall MPTCP architecture and design choices are detailed in [2], and the protocol is specified in [3].

## 3. MPTCP Implementation
The architecture of our MPTCP implementation is shown in Figure 1. All legacy TCP applications can benefit from the added multipath capability. When a new TCP flow is initiated, MPTCP adds a multipath capable option to the SYN packet. If the endpoint responds with a SYN/ACK containing the multipath capable option, the connection is established as multipath.

Connection-specific information is stored in a new structure called the meta-socket, which holds multipath identifiers, a list of associated subflows, and connection-level reordering queues. Initially, there is a single TCP socket (the master socket) corresponding to the first subflow. Additional subflows are opened by creating new socket structures associated with the meta-socket.

The master socket is the primary interface to the application. Writes to this socket are redirected to the meta-socket, which segments the bytestream and decides which subflow should send each segment. Reads from the master socket are serviced from the meta-socket’s receive buffer.

Data arriving on subflows is processed by the master and slave sockets, checked for in-order and in-window sequence numbers, and then passed to the meta-socket. The meta-socket reorders the data according to the connection sequence number, which is carried in each TCP segment as an option. Retransmissions are driven by the subflow sequence number, avoiding issues related to connection-level reordering.

Additional subflows are opened after the initial handshake succeeds. The stack checks for multiple addresses and routes to the destination, and if available, it opens subflows using currently unused addresses. To handle NATs, addresses are explicitly signaled to the remote end using TCP options.

## 4. Conclusion
Simulations are useful for evaluating large-scale protocol behavior, but fundamental changes like MPTCP require careful real-world evaluations. An implementation can reveal protocol behaviors and corner cases that are not observable in simulations. While previous works have produced code that benefits from multiple paths, our implementation is, to the best of our knowledge, the first to work across the Internet and allow unmodified applications to benefit. Our current work uses this implementation to analyze MPTCP behavior in various real-life scenarios, including data centers, mobile communications, and multi-homed networks.

## Acknowledgements
This research has received support from the Trilogy project (http://www.trilogy-project.eu), partially funded by the European Community under its Seventh Framework Programme. The views expressed here are those of the authors only. The European Commission is not liable for any use that may be made of the information in this document.

## References
[1] A. A. E. Al, T. N. Saadawi, and M. J. Lee. LS-SCTP: a bandwidth aggregation technique for stream control transmission protocol. Computer Communications, 27(10):1012–1024, 2004.
[2] A. Ford, C. Raiciu, S. Barré, and J. Iyengar. Architectural Guidelines for Multipath TCP Development. Internet draft, draft-ietf-mptcp-architecture-00.txt, Work in progress, February 2010.
[3] A. Ford, C. Raiciu, and M. Handley. TCP Extensions for Multipath Operation with Multiple Addresses. Internet draft, draft-ford-mptcp-multiaddressed-03.txt, Work in progress, March 2010.
[4] H.-Y. Hsieh and R. Sivakumar. pTCP: An End-to-End Transport Layer Protocol for Striped Connections. In ICNP, pages 24–33. IEEE Computer Society, 2002.
[5] J. R. Iyengar, P. D. Amer, and R. R. Stewart. Concurrent multipath transfer using SCTP multihoming over independent end-to-end paths. IEEE/ACM Trans. Netw., 14(5):951–964, 2006.
[6] J. Liao, J. Wang, and X. Zhu. cmpSCTP: An extension of SCTP to support concurrent multi-path transfer. Communications, 2008.
[7] L. Magalhaes and R. Kravets. Transport Level Mechanisms for Bandwidth Aggregation on Mobile Hosts. In ICNP, pages 165–171. IEEE Computer Society, 2001.
[8] C. Raiciu and D. Wischik. Coupled Multipath-Aware Congestion Control. Internet draft, draft-raiciu-mptcp-congestion-01.txt, Work in progress, March 2010.
[9] K. Rojviboonchai, T. Osuga, and H. Aida. R-M/TCP: Protocol for Reliable Multi-Path Transport over the Internet. In AINA, pages 801–806. IEEE Computer Society, 2005.
[10] M. Zhang, J. Lai, and A. Krishnamurthy. A transport layer approach for improving end-to-end performance and robustness using redundant paths. In USENIX 2004, pages 99–112, 2004.

![MPTCP Architecture](figure1.png)
*Figure 1: MPTCP Architecture*