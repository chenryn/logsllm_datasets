### PLAYBACK: A TLS 1.3 STORY

#### WHO ARE WE?
- Alfonso Garc√≠a Alguacil
- Alejo Murillo Moya

### INTRODUCING TLS 1.3

#### The Good
- **KISS (Keep It Simple, Stupid)**: Only 5 ciphers supported.
- **Security Enhancements**: Not vulnerable to attacks that impacted previous versions.
- **Forward Secrecy**: Enhanced security with forward secrecy.
- **Formal Security Analysis**: Rigorous security analysis performed on the protocol.

#### The Bad
- **Compatibility Issues**: Protocol may be tainted due to compatibility concerns.

#### The Ugly
- **0-RTT (Zero Round-Trip Time)**: This talk will focus on the trade-offs and vulnerabilities associated with 0-RTT.

### 0-RTT: SPEED AT A COST

Your browsers and CDNs may already support TLS 1.3 0-RTT. However, this feature comes with potential risks, such as replay attacks.

### TLS 1.3 HANDSHAKE

#### TLS 1.3 0-RTT
- **Replay Attacks**: As you can see, it is possible to perform replay attacks with 0-RTT.

### ANTI-REPLAY PROTECTIONS

#### Single-Use Tickets
- **Single-Use Tickets**: Each ticket is used only once.
- **Client-Hello Recording**: Recording Client-Hello messages to detect replays.
- **Freshness Checks**: Ensuring the freshness of the data.
- **Application Profiles**: Defining specific application profiles to handle 0-RTT.
- **Separate API**: Using a different API for handling 0-RTT.

#### Anti-Replay Protections (Jul-2018)
- **0-RTT without Protections**: Vulnerable to replay attacks.
- **Single-Use Tickets**: Each ticket is used only once.
- **Client-Hello Recording**: Recording Client-Hello messages to detect replays.
- **Application Profile**: Defining specific application profiles to handle 0-RTT.
- **0-RTT not available**: Disabling 0-RTT if protections are not in place.
- **Different API for Handling 0-RTT**: Using a separate API.
- **Other Protections**: Additional measures to prevent replay attacks.
- **0-RTT only on "Safe" Methods**: Limiting 0-RTT to safe HTTP methods.
- **0-RTT only on "Safe" Methods, No Params**: Further restricting 0-RTT to safe methods without parameters.

### ANATOMY OF AN ATTACK

- **Vantage Point in the Network**: An attacker needs a vantage point in the network.
- **Browser and Server Configuration**: Both the browser and server must have TLS 1.3 and 0-RTT enabled.
- **GET Method Reality**: GET is not always considered a "safe method" in real-world scenarios.

### THE BROWSER BEHAVIOR

- **Browser Control**: The browser decides when to send 0-RTT data, reducing the window for attacks.

### DEMO

### IMPROVING OUR ATTACK

- **Control Over 0-RTT Data**: Is it possible to control when 0-RTT data is sent? Yes, it is possible.

### CONTROLLING THE BROWSER

- **Demo**: Demonstration of controlling the browser's behavior.

### ANTI-REPLAY PROTECTIONS

- **Application Profiles**
- **Single-Use Tickets**
- **Client-Hello Recording**
- **Freshness Checks**
- **Separate API**

### IMPROVING OUR ATTACK (AGAIN)

- **Perfect Prevention**: Imagine that the TLS library and server perfectly prevent any replay attack on 0-RTT.
- **Possible Replay Attacks**: Could it still be possible to perform replay attacks? Yes, it is possible.

### UNIVERSAL REPLAY ATTACK

- **Universal Replay Attack**: Detailed explanation and demonstration of a universal replay attack.

### TOOL: HIGH-LEVEL DESCRIPTION

- **Network Vantage Point**: Assumes a vantage point in the network.
- **Template Creation**: Provides creation of templates for encrypted traffic.
- **Supports Two Attacks**: Supports the two attacks described in this presentation.
- **GitHub Repository**: Available at [https://github.com/portcullislabs/tlsplayback](https://github.com/portcullislabs/tlsplayback).

### SIDE EFFECTS OF 0-RTT

- **Dependency**: 0-RTT creates a dependency between the application and the underlying TLS 1.3 protocol.
- **Awareness**: The application needs to be 0-RTT aware.
- **Vulnerability**: Enabling 0-RTT could leave your application vulnerable to replay attacks.
- **Last Line of Defense**: The application itself is the last line of defense.

### MITIGATIONS

- **Disable 0-RTT**: Disable 0-RTT if it is not essential.
- **Prevent Replays**: Ensure that your application does not allow replays (e.g., strict CSRF). Develop REST services properly.
- **Strict Application Profile**: Create a strict application profile after careful analysis.

### KEY TAKEAWAYS

- **TLS 1.3 is Awesome**: But it can lead to a vulnerable application if 0-RTT is used.
- **0-RTT Awareness**: Your application (not just web apps) needs to be 0-RTT-aware to prevent side effects.
- **Configuration Changes**: You may need to change your application or server/CDN configuration to protect against replay attacks.

Thank you!