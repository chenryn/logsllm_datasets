low.
6.2.2 Performance
Service hotline detection. As described earlier, Sound-
comber looks at the ﬁrst segment of a recording to deter-
mine the hotline. In our experiments the ﬁrst segment had
an average length of 6.1 seconds (σ = 3.9s) and recognition
of the hotline took on average 34.6 seconds (σ = 23.0s).
In general, hotline detection requires computation time of
around 6 times the length of the segment analyzed.
Tone/speech recognition. The performance of tone/speech
recognition is given in table 3, including time, power and
memory. The recordings with speech inputs had an average
length of 19.7 seconds, with a standard deviation of 4.485
seconds. It took Soundcomber 6.749 seconds on average to
analyze and extract relevant menu choices and credit card
numbers. However, due to other delays caused by I/O oper-
ation and scheduling, it took Soundcomber a total of 7.168
seconds on average from starting to output the ﬁnal results.
The recordings with tone-based inputs were much longer,
45.3 seconds on average. Presumably, this was caused by
the extra time needed to switch between listening and tap-
ping numbers. However, Soundcomber turned out to be ef-
fective at processing such recordings. It located credit-card
numbers and extracted them within 5.524 seconds on av-
erage. The total time for such operations was found to be
7.694 seconds on average.
We ran PowerTutor17 to measure the power consump-
tion of Soundcomber. The average consumptions for an-
alyzing speech and tone data were 94 mW and 101 mW
respectively, which is higher than operations such as web
browsing (varying between 54 mW and 87 mW, depend-
ing on the content of a web page). This is understandable
because Soundcomber requires a number of computation-
intensive operations. However, such difference does not
seem to be signiﬁcant. Also, Soundcomber could take
measures to make its power consumptions less conspicu-
ous, through distributing the analysis over a longer period
time as discussed in Section 7. The memory usage was
measured in our study by running the Android phone in
17http://powertutor.org/
debugging mode and using the Android developing plug-
in for Eclipse18 to read the heap size. Soundcomber took
less than 3MB memory, which is reasonable, given some
Android applications consume similar amounts of memory
(e.g., vRecorder, voicememo, calendar and alarm clock: 2.8
MB each, VoiceDialer: 3.0 MB), and others could use even
more (browser: 5.0 MB).
Covert channels. We also measured the bandwidths of dif-
ferent covert channels:
the ﬁle-locking channel achieved
685 bps and the vibration channel transmitted data at a rate
of about 87 bps. These two channels can deliver a credit
card number in sub-seconds. The screen-setting channel
was found to be much slower at 5.29 bps. Nevertheless,
it was still able to transmit the 16 digits in 11 seconds. The
volume channel was found to be 150 bps. This research
shows that using covert-channels to leak sensitive informa-
tion is completely practical on smartphones.
Reference monitor. Since the reference service resides in
the RIL, it causes a certain delay when making a call. For
a sensitive call, the reference service makes an RPC call to
notify the controller, which on average causes a delay of
4.27ms. When a non-sensitive call is placed, no RPC call
is needed and the time spent in the reference service is just
0.09 ms. Both delays will not be perceptible by users in
practice.
The overhead of the controller of blanking audio when
in exclusive mode affects audio recording applications. We
ran an audio recorder software and measured the time spent
in the controller. On average only 0.85% of the time is spent
in the controller, showing that the overhead of the controller
is indeed minimal.
7 Discussion
7.1 Improvements to the attack
We believe that sensory malware can take the following
measures to improve its performance and stealthiness.
Stealthiness. To further reduce detectability, Soundcomber
can choose the right time to analyze audio recordings:
18http://developer.android.com/intl/fr/guide/
developing/eclipse-adt.html
length
Table 3. Performance of speech and tone recognition
Data
(seconds)
Mean
19.172
45.300
Total
(seconds)
Mean
7.168
7.694
CPU time only
(seconds)
Std Mean
6.749
5.524
4.485
5.814
Std
2.463
0.943
Std
2.243
0.678
time
Power
(mW)
93.68
101.4
Memory
(MB)
2.945
2.883
Speech
Tone
• Analysis at night: Soundcomber can defer processing
a recording to an opportune moment when heavy CPU
usage is less noticed, for example during the night or
during longer periods of inactivity.
• Analysis when user is not present: the Android plat-
form allows its applications to sense whether the user is
present or not. Tracking the usage allows Soundcomber
to ﬁnd the right time to analyze recordings, so as to min-
imize the chance of being detected.
• Analysis when charging: prior research proposes to de-
tect malware by tracking the power usage of a phone [8].
To evade this type of detection, Soundcomber can work
on recordings only when the phone is charging and no
power consumption information is available.
• Throttle processing: Soundcomber could easily be
made to refrain from using up all CPU cycles, and in-
stead only steal a small fraction of CPU time to analyze
the recording. This makes detection of its presence even
harder.
Performance. A more technical optimization is using
ﬁxed-point algorithms for DTMF detection. Current smart-
phones typically use ARM (Advanced RISC Machine) pro-
cessors, which often do not include ﬂoating-point units,
making ﬂoating-point operations expensive as they have to
be emulated. Using ﬁxed-point algorithms should increase
DTMF detection signiﬁcantly. We leave this exploration to
future work.
Hotline detection. The algorithm used to detect the ser-
vice hotline called can be improved. Brief experiments
with another algorithm [14] (used by Shazam19) to deter-
mine which hotline was called seemed to be more accurate
and efﬁcient. We will study better detection techniques in
follow-up research.
7.2 Defenses
We demonstrate the serious risk that sensory Trojan mal-
ware with even limited privileges poses to users. Sensitive
information from a person’s phone calls can be extracted
stealthily and all known mechanisms are inadequate to stop
the attack. In addition to the defense architecture we built,
19http://www.shazam.com/
here we list some other measures that could be taken to mit-
igate this threat:
Tone playback settings. A simple defense against our
tone-based attack is to to mute local playback of tones
(available on some phones). While not normally selected
by users, selecting it would prevent the tone-based attack,
but not the speech-based attack.
Isolation. A simple defense would be to isolate the phone
application by disallowing simultaneous access to any re-
source used by the phone application from other applica-
tions in the background. Unfortunately, this would also
preclude legitimate applications such as call voice memo,
speech translator and others.
Finer-grained sensor access. Given the sensitive nature of
sensors such as the microphone and video camera, a more
ﬁne-grained permission model should be considered. For
example, recording the microphone during a call could be
a separate permission. Time in general could be used to
regulate accesses (e.g., no recording during periods marked
as meetings in the calendar) or potentially even the place
(e.g., no recording at home).
Mediation of event management. Another problematic
area highlighted by our work is the use of the event system
as a covert channel. Android already has access control in
place for some events, but this should be revisited and tight-
ened, by monitoring and restricting (or having ﬁner-grained
control over) event ﬂows between applications.
Anomaly detection. Anomaly detection could identify
unauthorized uses of the microphone. Unfortunately, some
applications might legitimately need access to the micro-
phone even during phone calls, such as an application which
records all phone calls for archival.
Network monitoring. Monitoring the network for anoma-
lous trafﬁc is unlikely to identify the Deliverer app because
of the small amount of information that is sent over the net-
work. This information can be included as an unnoticeable
overhead in addition to its normal communication with the
remote server (recall that the Deliverer app has legitimate
Internet access). Obfuscated communications (e.g., through
encryption) eliminate the possibility of detecting credit card
numbers being leaked over the network interface.
8 Related Work
Using sensors such as the microphone [1] and video [15]
to capture secret information has been studied in prior re-
search. For example, Xu et al. [15] present a data collec-
tion technique using video cameras embedded in 3G smart-
phones. Their malware (also installed as a Trojan) stealthily
records video and transmits it using either email or MMS.
However, it does not automatically extract relevant infor-
mation from the video recording and only limited process-
ing of the captured data is done on the phone, informa-
tion extraction is ofﬂoaded to a colluding server, which is
not stealthy.
In contrast, Soundcomber performs an efﬁ-
cient data analysis locally and transmits much less informa-
tion (tens of bytes as opposed to video ﬁles). Also, with
Soundcomber the malware master is not bombarded with
numerous videos or data ﬁles from infected smartphones
that need processing. Soundcomber distributes the compu-
tation onto those phones itself, and the malware master re-
ceives only a small amount of high-value information. As
another example, Cai et al. [4] highlight the problems of
more and more capable smartphones with sensors such as
microphone, camera and GPS and how they can be used to
snoop on the user. They also propose (but did not imple-
ment) a framework that could mitigate such threats, which
involves black-/whitelisting and information ﬂow tracking
using taint analysis. Such a defense framework could have
only limited effect on a malware like Soundcomber: for ex-
ample, tracking taint propagation through covert channels
is known to be difﬁcult.
There are several approaches for detecting malicious ap-
plications on smartphones [3, 8]. For example, Bose et
al. [3] propose behavioral detection of malware by moni-
toring system events and low-level API calls of an appli-
cation on the Symbian platform. To classify applications,
Support Vector Machines (SVM) are used and trained with
both malicious and normal behavior of applications. Be-
havioral detection is promising in general; it is less clear,
however, how a Trojan application would be classiﬁed, if
the overt functionality mimics the behaviors deemed legiti-
mate under SVM.
Another approach by Liu et al. [8] relies on monitoring
the power consumption of a smartphone. This is only practi-
cal, though, if the smartphone is running on battery; Sound-
comber can defer work to when the phone is charging. It
also relies on hardware power-consumption monitors (not
present on Android). Kim et al. [7] present a similar ap-
proach.
Instead of detecting malware after it is already present
on the device, Enck et al. [5] propose to analyze the permis-
sions requested by an application (speciﬁcally for Android)
when the application is ﬁrst installed. Rules, which specify
what combinations of permissions are admissible, allow or
prevent the installation. In our work we managed to sep-
arate the necessary permissions over two applications and
let them communicate covertly, evading the security pol-
icy enforced by this approach — each application uses a
“reasonable” set of permissions that in conjunction are dan-
gerous. We also demonstrate that malware can use a legiti-
mate application to deliver data it stole. Follow-up research
by Ongtang et al. [10] not only examines permissions dur-
ing the installation but also monitors their use during run-
time, based on location and time, for example. Semanti-
cally rich policies deﬁne permissible interactions between
applications. This, however, does not block covert chan-
nels, which are used by Soundcomber.
Other research has focused on the effect of cellular bot-
nets on the network core, such as the research by Traynor et
al. [13]. Our work, on the other hand, focuses more on how
malware can extract information about individuals.
9 Conclusion
In this paper, we report our research on sensory malware,
a new strain of smartphone malware that uses on-board sen-
sors to collect private user information. We present Sound-
comber, a stealthy Trojan with innocuous permissions that
can sense the context of its audible surroundings to target
and extract a very small amount of high-value data.
As sensor-rich smartphones become more ubiquitous,
sensory malware has the potential to breach the privacy of
individuals at mass scales. While naive approaches may up-
load raw sensor data to the malware master, we show that
sensory malware can be stealthy and put minimal load on
the malware master’s resources. While we provide a de-
fense for Soundcomber, more research is needed to control
access to other types of sensor data depending on the con-
text in which such data is being requested. We hope that
our work with Soundcomber has highlighted the threat of
stealthy sensory malware to stimulate further research on
this topic.
Acknowledgments
We thank Zhou Li for his helpful comments. This re-
search was funded in part by the National Science Founda-
tion under grants CNS-0716292 and CNS-1017782.
References
[1] D. Asonov and R. Agrawal. Keyboard acoustic emanations.
Security and Privacy, IEEE Symposium on, 0:3, 2004.
[2] Bell and LaPadula. Secure Computer Systems: Uniﬁed Ex-
position and Multics Interpretation. Technical Report ESD-
TR-75-306, MTR 2997 Rev. 1, The MITRE Corporation,
Mar. 1976.
[3] A. Bose, X. Hu, K. G. Shin, and T. Park. Behavioral detec-
tion of malware on mobile handsets. In MobiSys ’08: Pro-
ceeding of the 6th international conference on Mobile sys-
tems, applications, and services, pages 225–238, New York,
NY, USA, 2008. ACM.
[4] L. Cai, S. Machiraju, and H. Chen. Defending against
sensor-snifﬁng attacks on mobile phones. In MobiHeld ’09:
Proceedings of the 1st ACM workshop on Networking, sys-
tems, and applications for mobile handhelds, pages 31–36,
New York, NY, USA, 2009. ACM.
[5] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mo-
bile phone application certiﬁcation. In CCS ’09: Proceed-
ings of the 16th ACM conference on Computer and com-
munications security, pages 235–245, New York, NY, USA,
2009. ACM.
[6] ITU-T. Recommendation Q.23, 1994.
[7] H. Kim, J. Smith, and K. Shin. Detecting energy-greedy
anomalies and mobile malware variants. In Proceeding of
the 6th international conference on Mobile systems, appli-
cations, and services, pages 239–252. ACM, 2008.
[8] L. Liu, G. Yan, X. Zhang, and S. Chen. Virusmeter: Pre-
venting your cellphone from spies. In E. Kirda, S. Jha, and
D. Balzarotti, editors, RAID, volume 5758 of Lecture Notes
in Computer Science, pages 244–264. Springer, 2009.
[9] J. Millen. Finite-state noiseless covert channels.
In Pro-
ceedings of the computer security foundations workshop II,
pages 81–86, 1989.
[10] M. Ongtang, S. E. McLaughlin, W. Enck, and P. D. Mc-
Daniel. Semantically rich application-centric security in an-
droid. In ACSAC, pages 340–349. IEEE Computer Society,
2009.
[11] A. V. Oppenheim and R. W. Schafer. Digital Signal Pro-
cessing. Prentice–Hall, 1975.
[12] J. Proakis and D. Manolakis. Digital Signal Processing:
Principles, Algorithms, and Applications, pages 480–481.
Upper Saddle River, NJ: Prentice Hall, 1996.
[13] P. Traynor, M. Lin, M. Ongtang, V. Rao, T. Jaeger, P. Mc-
Daniel, and T. La Porta. On cellular botnets: Measuring the
impact of malicious devices on a cellular network core. In
Proceedings of the 16th ACM conference on Computer and
communications security, pages 223–234. ACM, 2009.
[14] A. Wang. The shazam music recognition service. Commun.
ACM, 49(8):44–48, 2006.
[15] N. Xu, F. Zhang, Y. Luo, W. Jia, D. Xuan, and J. Teng.
Stealthy video capturer: a new video-based spyware in 3g
smartphones. In WiSec ’09: Proceedings of the second ACM
conference on Wireless network security, pages 69–78, New
York, NY, USA, 2009. ACM.