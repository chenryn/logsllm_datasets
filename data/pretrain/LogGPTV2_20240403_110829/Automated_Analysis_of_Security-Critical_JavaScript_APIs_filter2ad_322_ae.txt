Lemma 2: For all terms t ∈ SESlight, Enc(S0(t)) ⊆ F0(t)
The proof is straightforward and follows from the deﬁnition
of Enc. The ﬁnal lemma for proving soundness is that the
abstract points-to map PtsToD safely over-approximates the
concrete points-to map, under the encoding.
Lemma 3: For all v ∈ Vars u and set of states S ∈ 2Σ ,
PtsTo(v,S) ⊆ PtsToD(v, Enc(S)).
The proof is straighforward and follows from the deﬁnitions
of Enc, PtsTo and PtsToD. We now state the soundness
theorem.
Theorem 2: [Soundness] For all
allocation-site labels P , D(t, P ) =⇒ Conﬁne(t, P )
From ﬁgure 7, D(t, P ) holds
Proof Sketch:
iff
PtsToD(“un”, Cons(F0(t),R)) ∩ P = ∅. From mono-
tonicity of Cons and PtsToD and lemmas 1, 2, 3,
it
follows that the set PtsTo(“un”, Reach(S0(t))) is a subset
of PtsToD(“un”, Cons(F0(t),R)). The theorem follows im-
(cid:3)
mediately from this result.
terms t and forbidden
VI. APPLICATIONS
In this section, we demonstrate the value of our analysis
procedure by analyzing three benchmark examples: Yahoo!
ADsafe library [9], the Sealer-Unsealer mechanism ([17,
33]) and the Mint mechanism [30]. All
these examples
are of APIs that have been designed with an emphasis
on robustness and simplicity, and have been previously
subjected to security analysis. We analyze these examples
under the semantics and threat model of SESlight. The
goal of our experiments was to test the effectiveness of the
procedure D(t, P ) by checking if it could correctly prove
conﬁnement properties for these well-studied APIs.
Analyzer Architecture. We implemented the procedure
D(t, P ) from ﬁgure 7 in the form of a tool named ENCAP.
The tool has a JavaScript parser at the front end and the
bddbddb Datalog engine [39] at the back end. Given an
input API deﬁnition and a list of precious creation-site
1Also known as the elementary production principle (see [7])
373
labels, the parser generates an SESlight AST which is then
encoded into a set of Datalog facts. As described in the
procedure, this encoding is combined with the encoding
of the initial heap and the encoding of the eval statement
var “un”; eval(s, “api”, “un”) for any s ∈ SESlight.
Running SESlight on an ES5S browser. The procedure
D(t, P ) is designed to verify conﬁnement of APIs written
in SESlight, under the SESlight threat model. The ideal
deployment scenario would be for browsers that primitively
support SESlight. Given the absence of such browsers, we
present a ﬁrst cut to an approach for emulating the SESlight
restrictions on a browser supporting ES5S. The main idea is
to run an initialization script that makes the heap compliant
with the initial SESlight heap and then use a static veriﬁer
on all code that runs subsequently. The goal of the static
veriﬁer is to ensure that the code is valid SESlight code and
that it does not use any $-preﬁxed variable names, which is a
namespace reserved for book-keeping purposes. For the sake
of emulation, we modify the syntax of annotated property
lookups from e1[e2, a] to e1[a(e2)], that is, annotations are
expressed as (dynamic type-checking) functions applied on
the property being accessed.
The initialization script performs the following steps: (1)
Makes all built-in objects and properties that are not modeled
in SESlight unreachable from the ones that are modeled. This
can be done using the delete e1 [e2 ] construct. (2) Replaces
the built-in eval function with a wrapper that uses an SESlight
parser, written in ES5S, to ensure that code being eval-
ed has all its free variables mentioned as arguments, and
that no object literals appearing in the code contain literal
get and set properties. The latter ensures that code does
not use setters and getters. (3) Makes all built-in objects,
except the global object, transitively immutable, by applying
the built-in method Object.freeze to them, which results in
making the objects non-extensible and all their properties
non-conﬁgurable and non-writable. (4) For each annotation
a, we deﬁne a non-conﬁgurable and non-writable property
named a on the global object (using Object.deﬁneProperty),
and store a annotation-checking function on it. The code for
the function is as follows.
var a = function(x){ var $= String(x);
if(Ann($,a){return $}] else{throw ”bad”}}
Here Ann(m,n) is a pure function that checks if string m
annotates to string n. Recall that annotations in SESlight are
$-preﬁxed and therefore the properties created would not be
tampered or shadowed by code running subsequently.
We have an implementation of the initialization script
described above, but we do not have any rigorous proof of
correctness for it yet. We conjecture that for all SESlight
terms t that do not use $-preﬁxed variable names,
the
execution of t on the initial SESlight heap and stack under
the SESlight semantics, is safely emulated by the execution
of t on the appropriately initialized ES5S heap and stack
374
under the ES5S semantics.
A. ADsafe
Our ﬁrst application is the Yahoo! ADsafe framework
deﬁned by Douglas Crockford [9]
for protecting host
pages from untrusted advertisements that contain arbitrary
JavaScript code. Following the API+Sandbox approach, the
framework has two main components: (1) An ADsafe library
that provides restricted access to the DOM and other global
variables. (2) A static ﬁlter JSLint that discards untrusted
JavaScript code if it makes use of certain language constructs
” etc. The
like this, eval, with or properties beginning with “
goal of the ﬁlter is to ensure that JavaScript code that passes
through it only accesses security-critical objects by invoking
methods on the ADsafe library.
As described in this paper, under the SESlight semantics
the JSLint goal can be achieved simply by restricting all
untrusted code to the SESlight subset and wrapping it with
the context eval( ,“api”), where api stores the ADsafe library
object. In our experiments, we analyze if the ADsafe library
conﬁnes the DOM object, under the SESlight semantics and
threat model. Although the ADsafe library was implemented
in JavaScript, it does not use setters/getters and eval, and can
be de-sugared (using temporary variables) into semantically
equivalent SESlight code, thus making it amenable to con-
ﬁnement analysis using ENCAP.
Adding Annotations. In order to make our analysis precise
and to support certain JSLint restrictions on untrusted code,
we add suitable property annotations to the ADsafe library
implementation and to the encoding of eval statements.
The ADsafe library reserves a set of property names to
hide security-critical objects and certain book-keeping in-
formation. This set of property names is blacklisted and
JSLint ﬁlters out all untrusted programs that name any
property from this set. We support this restriction in our
analysis by annotating all Load and Store facts in the
encoding of eval statements with the annotation $Safe which
ensures that
the property name is not blacklisted. The
annotation $Safe is also added to patterns of the form
if (!reject(name)){ ... object[name] ... } in the library imple-
mentation, where reject is a function that checks if name
is blacklisted. The other annotation used in the library
implementation is $Num, which is added in the context of
for-loops to property lookups involving the loop index.
Attack. We ran ENCAP on the ADsafe library (approx.
1700 loc) and found that it leaks the document object via the
methods lib and go. The running time of the analysis was
5 mins 27 secs on a standard workstation. After analyzing
the methods lib and go, we were able to construct an actual
client program that used these methods to directly access
the document object, thus conﬁrming the leak to be a true
positive. The exploit code is present in ﬁgure 8.
In order to explain the root cause of the attack, we
describe the methods go and lib. The method go(id,f) takes
function(x){var steal = x.ownerDocument)},
ADSAFE.lib(
”,
”
function(lib){
nodes
var o = [{appendChild:
tagName:1}];
return o;}
);
// sets adsafe lib.
ADSAFE.go(
”test”,
function(dom,lib){
nodes
to o
// lib points to the adsafe lib object
var frag = dom.fragment();
var f = frag.value;
// f points to the value method of the dom library
lib.v = f;
lib.v(); }
);
Figure 8. ADsafe exploit code
a function f as an argument and provides it with an object
named dom that has methods that wrap the original DOM
methods, and a certain library object adsafe lib that is meant
to store libraries deﬁned by untrusted code. The adsafe lib
object method is populated by the lib method which is
deﬁned as function (name, f){adsafe lib[name] = f(adsafe lib);
One of the conﬁnement mechanisms used in the ADsafe
library is to hide DOM objects in the “
” property of
certain objects and forbid untrusted code from writing to or
reading from “
” properties. This mechanism is broken
by the lib method which allows untrusted code to write to
“
” property of the adsafe lib object, thus leading to the
attack. We refer the reader to [35] for further details.
Fixing the Attack. A ﬁx for the attack is to rewrite the lib
method using the annotation $Safe in the following way.
function (name, f){if(!reject name(name)){
adsafe lib[name, $Safe] = f(adsafe lib);}
With this rewriting, ENCAP reports no DOM leaks, thus
proving that the ADsafe library safely conﬁnes the DOM
object under the added annotations and the SESlight threat
model. We reported the vulnerability to Yahoo! and the
corresponding ﬁx was adopted immediately.
B. Sealer-Unsealer Pairs
Our next example is an implementation of the Sealer-
Unsealer encapsulation technique, which was ﬁrst
intro-
duced by Morris [17] in 1973, for providing an encryption
decryption like mechanism for functions. Sealer-Unsealer
pairs are important security mechanisms used in designing
capability based systems. We analyzed an SESlight imple-
mentation of sealers and unsealers, as shown in ﬁgure 9.
The API exposed to untrusted code provides access to the
seal method and a sealed secret function. By running ENCAP
on the implementation we successfully veriﬁed that the API
conﬁnes the secret function.
function SealerUnsealer(){
var ﬂag = false;
var payload = null;
return {seal: function (payloadToSeal){
function box(){
ﬂag = true;
payload = payloadToSeal;
},
}
return box;
unseal: function(box){
ﬂag = false;
payload = null;
try{
box();
if (!ﬂag){
}else{ return payload;}
throw ’Invalid Box’
}ﬁnally{
ﬂag = false;
payload = null;}
}
}
};
function secret(){ };
// a secret function
var brand = SealerUnsealer();
var box = brand.seal(secret);
// seals the secret function
var api = {seal: brand.seal, sealedFunc: box}
// API exposed to untrusted code
Figure 9. An Implementation of Sealer-Unsealer pairs
C. Mint
Our ﬁnal example is the Mint function, which is a
canonical example used in the Object-Capabilities literature
to demonstrate how capability patterns like sealers and
unsealers can be used for writing robust code that can be
safely run in potentially malicious environments. The source
code is present in ﬁgure 10. Untrusted code is handed the
function Mint, which can be invoked to create the Purse
constructor. The Purse constructor can be invoked to create
purse objects which encapsulate a balance ﬁeld, storing the
purse’s balance, and have methods deposit, getBalance to read
and update the balance ﬁeld. One of the correctness goals
for the mint is conservation of currency, which says that the
sum of balances of all purse objects must be constant. A
quick inspection of the code reveals that the decr function
can directly alter the balance ﬁeld. Thus the conservation
of currency property necessitates that the Mint object safely
conﬁnes the decr function. By running ENCAP on the code
in ﬁgure 10 combined with the implementation of sealer-
unselars pairs from ﬁgure 9, we successfully veriﬁed that
the decr function is safely conﬁned, under the SESlight threat
model.
D. Summary
We demonstrated the effectiveness of our tool by using it
to ﬁnd a security-oversight in the Yahoo! ADsafe library and
375
function Nat(n) { if (n !== n >>> 0) { throw ’NotNat’; } return n; }
function Mint(){
var brand = SealerUnsealer();
return function Purse(balance){
balance = Nat(balance − amount);
function decr(amount){
}
return {
getBalance: function(){return balance;},
makePurse: function(){return Purse(0);},
getDecr: function(){return brand.seal(decr);},
deposit: function(amount,src){
var box = src.getDecr();
var decr = brand.unseal(box);
Nat(balance + amount);
decr(Nat(amount));
balance += amount;}
}
}
}
var api = Mint;
// API exposed to untrusted code
Figure 10. An Implementation of the Mint
then verifying conﬁnement of the repaired library and some
benchmark examples from the Object-Capabilities literature.
The vulnerability that ENCAP found in the ADsafe library
is not only exploitable using untrusted SESlight code, but
also using code that satisﬁes the stronger JSLint syntactic