title:PCC Proteus: Scavenger Transport And Beyond
author:Tong Meng and
Neta Rozen Schiff and
Philip Brighten Godfrey and
Michael Schapira
PCC Proteus: Scavenger Transport And Beyond
P. Brighten Godfrey1 Michael Schapira2
Tong Meng1 Neta Rozen Schiff2
1UIUC
2Hebrew University of Jerusalem
ABSTRACT
Many Internet applications need high bandwidth but are not time
sensitive. This motivates a congestion control “scavenger” that
voluntarily yields to higher-priority applications, thus improving
overall user experience. However, the existing scavenger protocol,
LEDBAT, often fails to yield, has performance shortcomings, and
requires a codebase separate from other transport protocols.
We present PCC Proteus, a new congestion controller that can
behave as an effective scavenger or primary protocol. Proteus incor-
porates several novel ideas to ensure that it yields to primary flows
while still obtaining high performance, including using latency devi-
ation as a signal of competition, and techniques for noise tolerance
in dynamic environments. By extending the existing PCC utility
framework, Proteus also allows applications to specify a flexible
utility function that, in addition to scavenger and primary modes,
allows choice of hybrid modes between the two, better capturing
application needs. Extensive emulation and real-world evaluation
show that Proteus is capable of both being a much more effec-
tive scavenger than LEDBAT, and of acting as a high performance
primary protocol. Application-level experiments show Proteus sig-
nificantly improves page load time and DASH video delivery, and
its hybrid mode significantly reduces rebuffering in a bandwidth-
constrained environment.
CCS CONCEPTS
• Networks → Transport protocols.
KEYWORDS
Congestion Control; Scavenger
ACM Reference Format:
Tong Meng, Neta Rozen Schiff, P. Brighten Godfrey, Michael Schapira. 2020.
PCC Proteus: Scavenger Transport And Beyond. In Annual conference of
the ACM Special Interest Group on Data Communication on the applications,
technologies, architectures, and protocols for computer communication (SIG-
COMM ’20), August 10–14, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 17 pages. https://doi.org/10.1145/3387514.3405891
1 INTRODUCTION
It was a scorching summer. A camel and a zebra embarked on a
desert expedition. The two companions brought a container of wa-
ter, which, being best friends, they decided to share equally during
their journey. Unfortunately, the zebra suffered serious dehydration,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7955-7/20/08...$15.00
https://doi.org/10.1145/3387514.3405891
even though the camel could easily have waited until they reached
an oasis to quench its thirst. The moral of the story is that equally
sharing resources is often not optimal when user requirements are
heterogeneous.
The same principle applies to the classic problem of Internet con-
gestion control. Traditional congestion control, dividing bandwidth
equally among flows on a common bottleneck, may result in lower
network-wide utility. For example, in a typical home, Alice may
be watching a high-definition video, while Bob is sleeping at the
same time, having left his device downloading a large volume of
files from a remote-updated Dropbox folder. Ideally, Alice should
enjoy high video quality smoothly as usual, while the Dropbox
download could be delayed by hours without Bob even noticing.
However, thanks to the “fair” transport layer, Alice suffers from
constant video quality degradation.
Among the diverse applications using the network today, there
are many with similarly elastic resource requirements, for at least
some of their flows: software update, online data backup, back-
ground replication of cloud storage (e.g., Dropbox), proactive cache
warmup in CDNs, and aggregation of IoT sensor data for offline an-
alytics, among others. Those applications could occupy bandwidth
that is excessive for their users, and could have been consumed by
more data-intensive applications.
Even those applications that are often time-sensitive sometimes
become elastic. For example, a video client may not need to ur-
gently preload chunks as long as the highest bitrate is smoothly
streamed, or when the client has little free space in its playback
buffer. When a machine learning task is hindered by a slow worker,
receiving its input for its next phase of work may be lower priority.
Likewise, applications with usually-elastic requirements may at
times demand increased priority, e.g., when a Dropbox user specifi-
cally requests to view a file. Standard congestion control protocols
cannot accommodate such context-sensitive priorities.
We claim that a scavenger mode that yields to normal (primary)
flows helps mitigate this problem, by deprioritizing traffic with
elastic requirements. Of course, this approach will not be as close
to optimal as a centralized resource allocator, but its deployability
makes it a practical approach for general-purpose Internet conges-
tion control, i.e., within end-to-end transport. More specifically, a
scavenger has two goals:
(1) Yielding: Minimally impact primary flows on a common bot-
tleneck. That is, flows running traditional transport protocols
should experience throughput, latency, etc., almost as if the
scavenger were not present.
(2) Performance: Act like a traditional congestion controller when
only scavengers share a bottleneck. For example, competing
scavengers should fairly and fully utilize bandwidth while min-
imizing queueing delay.
The main existing scavenger proposal, Low Extra Delay Back-
ground Transport (LEDBAT) [34], tries to defer to high priority
615
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Tong Meng, Neta R. Schiff, Brighten Godfrey, and Michael Schapira
flows by never adding more than a target delay in queueing. How-
ever, it is designed mainly as a scavenger against TCP CUBIC [21].
As we will see, it is relatively aggressive compared with recently pro-
posed latency-sensitive protocols such as BBR [13] and COPA [8].
When only LEDBAT flows compete, it also has shortcomings: it
gives an advantage to latecomers [32], and as its design is based
on traditional TCP, it inherits problems like lack of tolerance to
random packet loss and poor performance with shallow buffers.
Therefore, LEDBAT falls short of both goals above.
Furthermore, as explained above, a flow may dynamically switch
between scavenger and primary modes. This is hard for LEDBAT,
which, as deployed in Microsoft Windows Server 2019 [7] and
BitTorrent [32], is implemented separately from primary protocols.
Maintaining separate codebases also imposes an increased software
engineering burden, and makes it difficult for improvements in the
implementation of one protocol to benefit another.1 We thus add a
third goal:
(3) Flexibility: A single transport protocol framework and code-
base should be able to easily switch between primary mode and
scavenger mode.
We aim to design a congestion control scavenger that meets all
three goals. However, this is challenging. The scavenger needs to
be both conservative (against primary flows) and aggressive (when
alone or among scavengers). It should ideally meet the desired goals
whatever the primary protocol is, and we can no longer assume
that will always be CUBIC: BBR has widespread deployment, and
many research advances are waiting in the wings [8, 16, 17, 42],
mostly latency-aware.
Our solution, PCC Proteus, extends the utility-based approach in
PCC [16, 17] with the following design contributions:
• To achieve our goals of performance and yielding, we build
utility function objectives for both primary (Proteus-P) and
scavenger (Proteus-S) senders. The scavenger utility employs
a penalty based on latency deviation which provides a sensi-
tive signal of competition and is typically not used by primary
flows, allowing Proteus-S to act as a good scavenger even relative
to latency-aware protocols. Our theoretical analyses show that
competing Proteus-P and Proteus-S senders produce a unique
equilibrium, and this equilibrium is fair when all senders use the
same utility function.
• We extend the utility design to support more than two modes of
service, including a hybrid mode, Proteus-H, with a piecewise
utility function that switches between primary and scavenger
modes at an adaptive threshold determined by cross-layer appli-
cation requirements (e.g., maximum bitrate for an online video).
The modular architecture of Proteus allows applications to easily
select modes and fulfills the goal of flexibility.
• To further improve performance in light of Proteus-S’s sensitivity
to latency deviation, we introduce techniques to better respond
to network latency noise (i.e., non-congestion variability in end-
to-end latency associated with the channel rather than with the
senders’ chosen rates) such that the scavenger can achieve robust
performance in highly dynamic environments such as wireless
networks.
1This cost is hard to quantify, but anecdotally, multiple major content providers have
expressed this concern to us.
616
We implement Proteus and evaluate it and LEDBAT along with
many primary protocols (CUBIC, BBR, COPA, and PCC Vivace)
in emulated networks and the live Internet. To the best of our
knowledge, this is the broadest performance test of scavengers
currently available. Our results show that Proteus achieves the
scavenger goals more effectively:
• Yielding: Proteus yields ≥ 90% of bandwidth to competing pri-
mary flows, while LEDBAT may yield less than 50%, particularly
against modern latency-aware protocols like BBR and COPA.
In application-level tests on the live Internet, web pages load
33% faster and DASH video delivery receives 2.5× higher bi-
trate when Proteus, instead of LEDBAT, is scavenging in the
background.
• Performance: When scavengers compete with themselves, Pro-
teus maintains a Jain’s index over 90%, and reaches up to 1.75×
higher than LEDBAT. Proteus needs 32× lower buffer to achieve
90% utilization when running alone.
• Flexibility: The hybrid mode in Proteus delivers up to 11% higher
bitrate for 4K video and 68% lower rebuffering ratio in a video
streaming benchmark.
Our code is available open source [4]. This work does not raise
any ethical issues.
2 PRELIMINARIES AND MOTIVATION
2.1 When Does Scavenging Makes Sense?
There is a rich literature on prioritizing network bandwidth across
flows in ways other than max-min fairness, such as using cen-
tralized knowledge of applications [23] or pricing [11], which are
generally impractical for the present Internet.
In contrast, a scavenger’s prioritization approach is very coarse:
flows that are clearly low priority can voluntarily deprioritize them-
selves. Given that the scavenger may lack incentive to yield for the
sake of another flow, and has no idea of other flows’ true priorities,
when does this make sense? Generally, we believe scavenging will
be effective when (1) the scavenger is so time-insensitive that the
cost is negligible, and (2) the application designer choosing to use a
scavenger has some chance of benefiting, perhaps indirectly.
As an example, a mobile phone manufacturer may choose a
scavenger for automated software updates. The long-running soft-
ware update is unlikely to be significantly delayed by occasional
higher-priority flows like web page loads, and even if it is, the user
is unlikely to notice. The manufacturer benefits because other apps
perform better, providing an improved user experience across the
whole device.
As another example, some large cloud providers offer multi-
ple popular services ranging from cloud storage to video delivery.
Background replication of stored files from the cloud to a particular
device can act as a scavenger with negligible cost. The provider
benefits from improved video quality of experience on the same
device, or on other devices with a shared bottleneck like a home
DSL connection.
We believe there are numerous other use cases following this
pattern. We will explore several in our evaluation.
PCC Proteus: Scavenger Transport And Beyond
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
2.2 Signaling Scavengers to Yield
Congestion control protocols typically reward and penalize spe-
cific control signals. Different sensitivities to these signals cause
differential aggressiveness among competing protocols. What met-
ric(s) should a scavenger use in order to yield to primary flows? We
consider two approaches.
(1) Same metrics, greater penalty. The scavenger could adopt
the same metrics as the primary protocol(s) of interest, but with a
greater penalty so it is more conservative. For example, a design
in [17] has greater or lesser tolerance for packet loss, for the purpose
of proportional bandwidth allocation among senders. This approach
has several difficulties.
First, metrics chosen by primary protocols generally represent
something very undesirable happening in the network; so if the pri-
mary and scavenger protocols have different sensitivities to these
important metrics, one or the other of them will sacrifice their per-
formance as a good stand-alone congestion controller (violating our
performance goal). For example, the aforementioned proportional
allocation design [17] can cause very high loss in order to acquire
more bandwidth.
Second, this approach assumes the primary and scavenger rely on
the same or similar metrics, which may not be true with a diversity
of primary protocol designs. Whatever its target bandwidth share
is, the aforementioned proportional allocator of [17] can easily
dominate a latency-sensitive sender.
(2) Different metric. Due to the above drawbacks, ideally, a
scavenger would somehow take signals from a different metric than
primary protocols of interest. To gain some insights on the require-
ments for this dedicated metric, we start by analyzing performance
metrics adopted by existing primary protocols.