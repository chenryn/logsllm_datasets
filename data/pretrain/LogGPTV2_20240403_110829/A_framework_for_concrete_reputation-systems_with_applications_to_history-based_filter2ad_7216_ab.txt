in distributed systems.
We present the event-structure framework as an abstract
interface providing two operations, new and update, which
respectively records the initiation of a new protocol run, and
updates the information recorded about an older run (i.e.
updates an event-set xi). A speci(cid:12)c implementation then
uses this interface to notify our framework about events.
2.1 The Event›Structure Framework
In order to illustrate the event-structure framework [21],
we use an example complementing its formal de(cid:12)nitions.
We will use a scenario inspired by the eBay online auction-
house [8], but deliberately over-simpli(cid:12)ed to illustrate the
framework.
On the eBay website, a seller starts an auction by an-
nouncing, via the website, the item to be auctioned. Once
the auction has started the highest bid is always visible, and
bidders can place bids. A typical auction runs for 7 days,
after which the bidder with the highest bid wins the auc-
tion. Once the auction has ended, the typical protocol is
the following. The buyer (winning bidder) sends payment
of the amount of the winning bid. When payment has been
received, the seller con(cid:12)rms the reception of payment, and
ships the auctioned item. Optionally, both buyer and seller
may leave feedback on the eBay site, expressing their opinion
about the transaction. Feedback consist of a choice between
ratings ‘positive’, ‘neutral’ and ‘negative’, and, optionally, a
comment.
We will model behavioural information in the eBay sce-
nario from the buyers point of view. We focus on the inter-
action following a winning bid, i.e. the protocol described
above. After winning the auction, buyer (B) has the option
to send payment, or ignore the auction (possibly risking to
upset the seller).
If B chooses to send payment, he may
observe con(cid:12)rmation of payment, and later the reception of
the auctioned item. However, it may also be the case that B
doesn’t observe the con(cid:12)rmation within a certain time-frame
(the likely scenario being that the seller is a fraud). At any
time during this process, each party may choose to leave
feedback about the other, expressing their degree of satis-
faction with the transaction. In the following, we will model
an abstraction of this scenario where we focus on the follow-
ing events: buyer pays for auction, buyer ignores auction,
buyer receives con(cid:12)rmation, buyer receives no con(cid:12)rmation
within a (cid:12)xed time-limit, and seller leaves positive, neutral
or negative feedback (note that we do not model the buyer
leaving feedback).
The basis of the event-structure framework is the fact that
the observations about protocol runs, such as an eBay trans-
action, have structure. Observations may be in con(cid:13)ict in
the sense that one observation may exclude the occurrence
of others, e.g. if the seller leaves positive feedback about the
transaction, he can not leave negative or neutral feedback.
An observation may depend on another in the sense that
the (cid:12)rst may only occur if the second has already occurred,
e.g. the buyer cannot receive a con(cid:12)rmation of received pay-
ment if he has not made a payment. Finally, if two ob-
servations are neither in con(cid:13)ict nor dependent, they are
said to be independent, and both may occur (in any order),
e.g. feedback-events and receiving con(cid:12)rmation are indepen-
dent. Note that ‘independent’ just means that the events are
not in con(cid:13)ict nor dependent (e.g., it does not mean that
the events are independent in any statistical sense). These
relations between observations are directly re(cid:13)ected in the
de(cid:12)nition of an event structure. (For a general account of
event structures, traditionally used in semantics of concur-
rent languages, consult the handbook chapter of Winskel
and Nielsen [30]).
De(cid:12)nition 2.1 (Event Structure). An event structure
is a triple ES = (E; (cid:20); #) consisting of a set E, and two
binary relations on E: (cid:20) and #. The elements e 2 E are
called events, and the relation #, called the con(cid:13)ict relation,
is symmetric and irre(cid:13)exive. The relation (cid:20) is called the
(causal) dependency relation, and partially orders E. The
dependency relation satis(cid:12)es the following axiom, for any
e 2 E:
the set dee
(def)
= fe0 2 E j e0 (cid:20) eg is (cid:12)nite.
The con(cid:13)ict- and dependency-relations satisfy the following
\transitivity" axiom for any e; e0; e00 2 E
(cid:0)e # e0 and e0 (cid:20) e00(cid:1) implies e # e00
Two events are independent if they are not in either of the
two relations.
We use event structures to model the possible observations
of a single agent in a protocol, e.g. the event structure in
Figure 1 models the events observable by the buyer in our
eBay scenario.
The two relations on event structures imply that not all
subsets of events can be observed in a protocol run. The
following de(cid:12)nition formalizes exactly what sets of observa-
tions are observable.
De(cid:12)nition 2.2 (Con(cid:12)guration). Let ES = (E; (cid:20); #) be
an event structure. We say that a subset of events x (cid:18) E is a
con(cid:12)guration if it is con(cid:13)ict free (C.F.), and causally closed
(C.C.). That is, it satis(cid:12)es the following two properties, for
any d; d0 2 x and e 2 E
(C.F.) d r# d0; and (C.C.) e (cid:20) d ) e 2 x
time-out
confirm
]:::::::
A(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)
pay
Remarks. Note, that while the order of sessions is recorded
(a local history is a sequence), in contrast, the order of inde-
pendent events within a single session is not. For example,
in our eBay scenario we have
ignore
positive
neutral /
o negative
Figure 1: An event structure modelling the buyer’s
observations in the eBay scenario.
(Immediate)
Con(cid:13)ict is represented by (cid:24), and dependency by !.
CES denotes the set of con(cid:12)gurations of
Notation 2.1.
ES, and C0
ES (cid:18) CES the set of (cid:12)nite con(cid:12)gurations. A
con(cid:12)guration is said to be maximal if it is maximal in the
partial order (CES; (cid:18)). Also, if e 2 E and x 2 CES, we
write e # x, meaning that 9e0 2 x:e # e0. Finally, for
x; x0 2 CES; e 2 E, de(cid:12)ne a relation ! by x e! x0 i(cid:11) e 62 x
and x0 = x [ feg. If y (cid:18) E and x 2 CES; e 2 E we write
x 6 e! y to mean that either y 62 CES or it is not the case that
x e! y.
A (cid:12)nite con(cid:12)guration models information regarding a sin-
gle interaction, i.e. a single run of a protocol. A maximal
con(cid:12)guration represents complete information about a single
interaction. In our eBay example, sets ;; fpay; positiveg
and fpay; confirm; positiveg are examples of con(cid:12)gurations
(the last con(cid:12)guration being maximal), whereas
fpay; confirm; positive; negativeg
and fconfirmg are non-examples.
In general, the information that one agent possesses about
another will consist of information about several protocol
runs; the information about each individual run being rep-
resented by a con(cid:12)guration in the corresponding event struc-
ture. The concept of a local interaction history models this.
De(cid:12)nition 2.3 (Local Interaction History). Let ES
be an event structure, and de(cid:12)ne a local interaction his-
tory in ES to be a sequence of (cid:12)nite con(cid:12)gurations, h =
x1x2 (cid:1) (cid:1) (cid:1) xn 2 C0
. The individual components xi in the
history h will be called sessions.
ES
(cid:3)
In our eBay example, a local interaction history could be
the following:
fpay; confirm; posgfpay; confirm; neugfpayg
Here pos and neu are abbreviations for the events positive
and neutral. The example history represents that the buyer
has won three auctions with the particular seller, e.g. in the
third session the buyer has (so-far) observed only event pay.
We assume that the actual system responsible for noti(cid:12)-
cation of events will use the following interface to the model.
(cid:3) ! C0
ES
De(cid:12)nition 2.4 (Interface). De(cid:12)ne an operation new :
(cid:3) by new(h) = h;. De(cid:12)ne also a partial oper-
C0
ES
ation update : C0
as follows. For any
h = x1x2 (cid:1) (cid:1) (cid:1) xi (cid:1) (cid:1) (cid:1) xn 2 C0
, e 2 E, i 2 N, update(h; e; i)
is unde(cid:12)ned if i 62 f1; 2; : : : ; ng or xi
e
6! xi [ feg. Otherwise
(cid:3) (cid:2) E (cid:2) N ! C0
ES
(cid:3)
ES
(cid:3)
ES
update(h; e; i) = x1x2 (cid:1) (cid:1) (cid:1) (xi [ feg) (cid:1) (cid:1) (cid:1) xn
update(update(fpayg; neutral; 1); confirm; 1) =
update(update(fpayg; confirm; 1); neutral; 1)
Hence independence of events is a choice of abstraction one
may make when designing an event-structure model (be-
cause one is not interested in the particular order of events,
or because the exact recording of the order of events is not
feasible). However, note that this is not a limitation of event
structures:
in a scenario where this order of events is rele-
vant (and observable), one can always use a \serialized" event
structure in which this order of occurrences is recorded. A
serialization of events consists of splitting the events in ques-
tion into di(cid:11)erent events depending on the order of occur-
rence, e.g., supposing in the example one wants to record the
order of pay and pos, one replaces these events with events
pay-before-pos,pos-before-pay, pay-after-pos and pos-
after-pay with the obvious causal- and con(cid:13)ict-relations.
When applying our logic (described in the next section)
to express policies for history-based access control (HBAC),
we often use a special type of event structure in which the
con(cid:13)ict relation is the maximal irre(cid:13)exive relation on a set E
of events. The reason is that histories in many frameworks
for HBAC, are sequences of single events for a set E. When
the con(cid:13)ict relation is maximal on E, the con(cid:12)gurations
of the corresponding event structure are exactly singleton
event-sets, hence we obtain a useful specialization of our
model, compatible with the tradition of HBAC.
3. A LANGUAGE FOR POLICIES
The reason for recording behavioural information is that
it can be used to guide future decisions about interaction.
We are interested in binary decisions, e.g., access-control and
deciding whether to interact or not. In our proposed system,
such decisions will be made according to interaction policies
that specify exact requirements on local interaction histories.
For example, in the eBay scenario from last section, the
bidder may adopt a policy stating: \only bid on auctions
run by a seller which has never failed to send goods for won
auctions in the past."
In this section, we propose a declarative language which
is suitable for specifying interaction policies.
In fact, we
shall use a pure-past variant of linear-time temporal logic, a
logic introduced by Pnueli for reasoning about parallel pro-
grams [22]. Pure-past temporal logic turns out to be a nat-
ural and expressive language for stating properties of past
behaviour. Furthermore, linear-temporal-logic models are
linear Kripke-structures, which resemble our local interac-
tion histories. We de(cid:12)ne a satisfaction relation j=, between
such histories and policies, where judgement h j=   means
that the history h satis(cid:12)es the requirements of policy  .
3.1 Formal Description
3.1.1 Syntax.
The syntax of the logic is parametric in an event structure
ES = (E; (cid:20); #). There are constant symbols e; e0; ei; : : : for
each e 2 E. The syntax of our language, which we denote
L(ES), is given by the following BNF.
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
]
A
3
s
3
s
2