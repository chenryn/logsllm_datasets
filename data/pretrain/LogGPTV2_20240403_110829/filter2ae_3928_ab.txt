## 七、简化模式

简化模式（Implicit Grant Type）允许浏览器直接向认证服务器申请访问令牌，而无需通过第三方应用程序的服务器。此模式跳过了"授权码"步骤，所有流程均在浏览器中完成，因此令牌对用户可见，且客户端不需要进行身份验证。

具体步骤如下：

1. **重定向至认证服务器**：客户端将用户重定向至认证服务器。
2. **用户授权**：用户决定是否授予客户端权限。
3. **重定向并携带令牌**：如果用户同意授权，认证服务器将用户重定向回客户端指定的URI，并在URI的哈希部分包含访问令牌。
4. **请求资源**：浏览器向资源服务器发出请求，但不包括从上一步收到的哈希值。
5. **获取令牌**：资源服务器返回一个网页，其中包含一段脚本用于提取哈希中的令牌。
6. **执行脚本**：浏览器运行该脚本以提取令牌。
7. **发送令牌**：浏览器将提取到的令牌传递给客户端。

### 参数说明
- 在第一步中，客户端发出的HTTP请求需包含以下参数：
  - `response_type`：表示授权类型，固定为"token"。
  - `client_id`：客户端ID。
  - `redirect_uri`：重定向的URI（可选）。
  - `scope`：权限范围（可选）。
  - `state`：客户端状态标识符，用来防止CSRF攻击（可选）。

示例请求：
```
GET /authorize?response_type=token&client_id=s6BhdRkqt3&state=xyz&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com
```

- 第三步中，认证服务器回应客户端的URI需包含以下参数：
  - `access_token`：访问令牌。
  - `token_type`：令牌类型。
  - `expires_in`：过期时间（单位秒），若省略则需通过其他方式设置有效期。
  - `scope`：权限范围（若与请求一致可省略）。
  - `state`：若客户端请求时提供了此参数，则响应中也必须包含相同值。

示例响应：
```
HTTP/1.1 302 Found
Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA&state=xyz&token_type=example&expires_in=3600
```

## 八、密码模式

密码模式（Resource Owner Password Credentials Grant）要求用户提供用户名和密码给客户端，后者再利用这些凭证向认证服务器请求令牌。这种方式仅适用于用户高度信任客户端的情况，如客户端是操作系统的一部分或由知名公司开发。认证服务器应尽量避免使用此模式，除非其他方法不可行。

过程如下：

1. 用户向客户端提供其用户名和密码。
2. 客户端用这些信息向认证服务器请求令牌。
3. 认证服务器确认无误后发放访问令牌给客户端。

### 请求参数
- 在第二步中，客户端发起的HTTP POST请求应包括：
  - `grant_type`：授权类型，此处固定为"password"。
  - `username`：用户名。
  - `password`：密码。
  - `scope`：权限范围（可选）。

示例请求：
```
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=password&username=johndoe&password=A3ddj3w
```

- 认证服务器成功处理后会返回类似下面的JSON响应：
```json
{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
```

请注意，整个过程中客户端不应存储用户的密码。

## 九、客户端模式

客户端模式（Client Credentials Grant）是指客户端以自身名义而非代表某个用户的身份向服务提供商进行认证。严格来说，这不属于OAuth框架解决的问题范畴。在这种情况下，用户直接注册于客户端，后者以其名义请求服务，实际上不存在授权问题。

流程如下：

1. 客户端向认证服务器证明身份并请求访问令牌。
2. 认证服务器核实信息无误后发放访问令牌给客户端。

### 请求参数
- 在第一步中，客户端发起的HTTP POST请求需包含：
  - `grant_type`：授权类型，此处固定为"client_credentials"。
  - `scope`：权限范围（可选）。

示例请求：
```
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
```

- 成功后认证服务器返回的JSON响应类似于：
```json
{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "example_parameter":"example_value"
}
```

## 十、更新令牌

当客户端持有的访问令牌已失效时，可以通过“刷新令牌”来获取新的访问令牌。

### 请求参数
- 更新令牌的HTTP POST请求应包括：
  - `grant_type`：授权模式，此处固定为"refresh_token"。
  - `refresh_token`：之前获得的刷新令牌。
  - `scope`：授权范围（不能超出原始请求范围；若省略则默认与上次相同）。

示例请求：
```
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
```