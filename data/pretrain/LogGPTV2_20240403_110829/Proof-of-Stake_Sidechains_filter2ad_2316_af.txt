positing funds to SC (Alg. 4) and withdrawing them back
to MC (Alg. 5), as well as creating a sidechain certiﬁcate
(Alg. 6). Additionally, we also describe the membership-
deciding procedure for the validity language VA in Alg. 7,
and the auxiliary veriﬁer algorithms for the mainchain and the
sidechain in Algorithms 8 and 10, respectively.
) ← Gen(P)
sidechain state[idSC] ← initializing
(vk(cid:5), sk(cid:5)
σ ← Sigsk(sidechain support, idSC, vk, vk(cid:5)
post (sidechain support, idSC, vk, vk(cid:5), σ) to MC
Algorithm 2 Sidechain initialisation procedures.
The algorithm is run by every stakeholder U that adopted the
sidechain. We denote by (vk, sk) its public and private keys.
1: upon SidechainAdoption(idSC) do
2:
3:
4:
5:
6: end upon
7: upon MC.NewEpoch() do
j ← MC.EpochIndex()
8:
if sidechain state[idSC] = initializing then
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
end if
25:
26: end upon
sidechain state[idSC] ← failed
post sidechain failure(idSC) to MC
else if ActivationSuccess() then
sidechain state[idSC] ← initialized
jstart ← ActivationEpoch()
Post sidechain success(idSC) to MC
¯ηjstart ← H(idSC, ηjstart )
VKjstart ← 2k last slot leaders of ejstart in SC
avkjstart ← AKey(VKjstart )
CSC ← (G)
end if
if sidechain state[idSC] = initialized ∧ j = jstart then
idSC, SDjstart , ¯ηjstart ,P, avkjstart
end if
G ←(cid:5)
if ActivationFailure() then
)
(cid:6)
C. Adaptation to Other Proof-of-Stake Blockchains
Our construction can be adapted to work with other prov-
ably secure proof-of-stake blockchains discussed in Sec-
tion II-C: Ouroboros Praos [11], Ouroboros Genesis [2], Snow
White [5], and Algorand [24]. Here we assume some famil-
iarity with the considered protocols and refer the interested
reader to the original papers for details.
1) Ouroboros Praos and Ouroboros Genesis: These proto-
cols [2], [11] are strongly related and differ from each other
only in the chain-selection rule they use, which is irrelevant for
our discussion here, hence we consider both of the protocols
simultaneously. Ouroboros Praos was shown secure in the
semi-synchronous model with fully adaptive corruptions (cf.
Section II-A) and this result extends to Ouroboros Genesis.
Algorithm 3 Mainchain maintenance procedures.
The algorithm is run by every stakeholder U with stake on
MC in every epoch j ≥ jstart, sk denotes the secret key of U.
An analogous mainchain-maintaining procedure was running
also before jstart and is omitted.
1: upon MC.NewSlot() do
sl ← MC.SlotIndex()
2:
(cid:10) First slot of a new epoch
3:
if sl mod R = 1 then
4:
j ← MC.EpochIndex()
5:
SDj ← MC.GetDistr(j)
6:
ηj ← MC.GetRandomness(j)
7:
end if
8:
C ← chains received via Diﬀuse
9:
(cid:10) Consensus-level validation
10:
Cvalid ← Filter(C, MC.ValidateConsensusLevel)
11:
(cid:10) Transaction-level validation
12:
Cvalidtx ← Filter(Cvalid, VERIFIERMC(·))
13:
(cid:10) Apply chain selection rule
14:
CMC ← MC.PickWinningChain(CMC,Cvalidtx)
15:
(cid:10) Decide slot leadership based on SDj and ηj
16:
if MC.SlotLeader(U, j, sl, SDj, ηj) then
17:
prev ← H(CMC[−1])
18:
(cid:9)txstate ← transaction sequence in CMC
19:
(cid:9)tx ← current transactions in mempool
20:
(cid:9)txvalid ← VERIFYTXMC((cid:9)txstate (cid:11) (cid:9)tx)[|(cid:9)txstate| :]
21:
σ ← Sigsk(prev, (cid:9)txvalid)
22:
B ← (prev, (cid:9)txvalid, σ)
23:
CMC ← CMC (cid:11) B
24:
Diﬀuse(CMC)
25:
end if
26:
27: end upon
txid $← {0, 1}k
σ ← Sigsk (txid, MC, (MC, sAcc), (SC, rAcc), v)
txsend ← (txid, MC, (MC, sAcc), (SC, rAcc), v, σ)
post txsend to MC
Algorithm 4 Depositing from MC to SC.
The algorithm is run by a stakeholder U in control of the
secret key sk corresponding to the account sAcc on MC.
1: function Send(sAcc, rAcc, v)
2:
3:
4:
5:
6: end function
7: function Receive(txid, sAcc, rAcc, v)
8:
9:
10:
11:
12: end function
wait until txsend ∈ MC
σ ← Sigsk (txid, SC, (MC, sAcc), (SC, rAcc), v)
txrec ← (txid, SC, (MC, sAcc), (SC, rAcc), v, σ)
post txrec to SC
153
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 5 Withdrawing from SC to MC.
The algorithm is run by a stakeholder U in control of the
secret key sk corresponding to the account sAcc on SC.
1: function Send(sAcc, rAcc, v)
(cid:10) Send v from sAcc on
SC to rAcc on MC
txid $← {0, 1}k
σ ← Sigsk (txid, SC, (SC, sAcc), (MC, rAcc), v)
txsend ← (txid, SC, (SC, sAcc), (MC, rAcc), v, σ)
post txsend to SC
2:
3:
4:
5:
6: end function
7: function Receive(txid, sAcc, rAcc, v)
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end function
jsend ← j(cid:5)
jsend ← j(cid:5)
else
+ 1
end if
wait until sc certjsend+1 ∈ CMC
π ← Merkle-tree proof of txsend in sc certjsend+1
σ ← Sigsk (txid, MC, (SC, sAcc), (MC, rAcc), v, π)
txrec ← (txid, MC, (SC, sAcc), (MC, rAcc), v, π, σ)
post txrec to MC
wait until txsend ∈ CSC
j(cid:5) ← epoch where CSC contains txsend
if (txsend included in slot sl ≤ R − 4 of ej(cid:3)) then
Algorithm 6 Constructing sidechain certiﬁcate sc cert.
The algorithm is run by every SC-maintainer at the end of
each epoch, j denotes the index of the ending epoch.
1: function ConstructSCCert(j)
2:
3:
4:
5:
6:
7:
8:
9:
pendingj+1 ←(cid:14)
(cid:15)
T ← last 4k slots of ej−1 and ﬁrst R − 4k slots of ej
(cid:9)tx ← transactions included in SC during T
tx ∈ (cid:9)tx : tx.send (cid:9)= tx.rec
(cid:4)
(cid:6)
m ←(cid:5)(cid:3)
VKj+1 ← keys of last 2k SC slot leaders in ej+1
avkj+1 ← AKey(VKj+1)
(cid:16)
(cid:17)
, avkj+1
VKj ← keys of last 2k SC slot leaders for ej
(cid:4)
(cid:3)
m,{(vki, σi)}d
σj+1 ← ASig
i=1 ,VKj
sc certj+1 ← (
, avkj+1, σj+1)
pendingj+1
return sc certj+1
pendingj+1
10:
11:
12: end function
Despite sharing the basic structure with Ouroboros, they differ
in several signiﬁcant points which we now outline.
The slot
leaders are elected differently: Namely, each
party for each slot evaluates a veriﬁable random function
(VRF, [13]) using the secret key associated with their stake,
and providing as inputs to the VRF both the slot index and
the epoch randomness. If the VRF output is below a certain
threshold that depends on the party’s stake, then the party is an
eligible slot leader for that slot, with the same consequences
as in Ouroboros. Each leader then includes into the block it
creates the VRF output and a proof of its validity to certify her
eligibility to act as slot leader. The probability of becoming a
return false
end if
if lid = send then
(cid:10) Replay protection
if seen[txid] (cid:9)= 0 then
end if
(cid:10) Law of conservation
if BALANCE[send][sAcc] − v < 0 then
BALANCE ← Initial stake distribution; seen ← ∅
(cid:10) Traverse transactions in order
for tx ∈ (cid:9)tx do
(cid:10) Destructure tx into its constituents
(txid, lid, (send, sAcc), (rec, rAcc), v, σ) ← tx
if ¬valid(σ) then
return false
Algorithm 7 The transaction sequence validator (membership-
deciding algorithm for VA).
1: function valid-seq((cid:9)tx)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
end if
(cid:10) Update receiver balance when money arrives
if (seen[txid] = 0 ∧ send = rec)∨
(seen[txid] = 1 ∧ send (cid:9)= rec)
BALANCE[rec][rAcc] += v
end if
(cid:10) The case lid = rec (cid:9)= send
if seen[txid] (cid:9)= 1 then
(cid:10) Update sender balance when money departs
BALANCE[send][sAcc] −= v
end if
if seen[txid] = 0 then
end if
(cid:10) Cross-ledger validity
(cid:5) ← eﬀect
tx
if tx
−1
L(1−lid)→Llid (tx)
(cid:5) has not appeared before then
return false
return false
return false
end if
else
then
end if
seen[txid]+ = 1
36:
37:
38:
39:
40:
41: end function
end for
return true
slot leader is roughly proportional to the amount of stake the
party controls, however now it is independent for each slot
and each party, as it is evaluated locally by each stakeholder
for herself. This local nature of the leader election implies
that there will inevitably be some slots with no, or several,
slot leaders. In each epoch j, the stake distribution used in
Praos and Genesis for slot leader election corresponds to the
distribution recorded in the ledger up to the last block of
epoch j − 2. Additionally, the epoch randomness ηj for epoch
154