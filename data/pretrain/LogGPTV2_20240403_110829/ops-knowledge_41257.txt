If you are looking to build a site similar to Omegle, here are some suggestions and considerations for your project:

### Technology Stack
1. **Twisted**:
   - **Pros**: Twisted is a robust, event-driven networking engine written in Python. It is well-suited for handling real-time communication, which is essential for a chat-based platform like Omegle.
   - **Cons**: It has a steeper learning curve compared to other frameworks and may require more advanced knowledge of asynchronous programming.

2. **Django**:
   - **Pros**: Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. It comes with many built-in features, such as an ORM, authentication, and an admin panel, making it easier to get started quickly.
   - **Cons**: While Django is great for traditional web applications, it may not be the best choice for real-time, low-latency applications without additional tools like Django Channels.

3. **Pylons (now Pyramid)**:
   - **Pros**: Pyramid is a lightweight, flexible, and modular web framework. It is highly customizable and can be a good choice if you need fine-grained control over your application.
   - **Cons**: Like Twisted, it may require more setup and configuration compared to Django.

### Real-Time Communication
- **Comet Server**: Comet is a technique for enabling web servers to send data to the browser without requiring the browser to explicitly request it. This can be useful for implementing real-time chat, but it may be less efficient than modern alternatives like WebSockets.
- **WebSockets**: Consider using WebSockets for real-time, bidirectional communication between the server and the client. Libraries like `autobahn` or `WebSocket-Stream` can be used with Twisted to implement WebSocket support.

### Additional Considerations
- **Scalability**: Ensure your architecture can handle a large number of concurrent users. This may involve load balancing, clustering, and efficient database management.
- **Security**: Implement strong security measures, including encryption, user authentication, and protection against common web vulnerabilities like XSS and CSRF.
- **User Experience**: Focus on providing a smooth and intuitive user experience. This includes responsive design, fast loading times, and easy navigation.

### Example Architecture
1. **Frontend**:
   - Use modern JavaScript frameworks like React, Vue.js, or Angular for a dynamic and responsive user interface.
   - Implement WebSockets for real-time communication.

2. **Backend**:
   - Use Twisted for the real-time server, handling WebSocket connections and managing user sessions.
   - Use Django for the main web application, handling user authentication, profile management, and other non-real-time functionalities.

3. **Database**:
   - Choose a scalable and reliable database system like PostgreSQL or MongoDB to store user data and chat history.

By combining these technologies and considering the above points, you can build a robust and efficient site similar to Omegle.