title:Edge-Based Fault Detection in a DiffServ Network
author:Aaron Striegel and
G. Manimaran
Edge-Based Fault Detection in a DiffServ Network
A. Striegel, G. Manimaran
Dependable Computing and Networking Laboratory
Department of Electrical and Computer Engineering
Iowa State University, USA
PI:EMAIL, PI:EMAIL
Abstract
The phenomenal growth of QoS-aware applications over
the Internet has accelerated the development of key tech-
nologies such as Differentiated Services (DiffServ). Al-
though QoS is provided through class-based service dif-
ferentiation, the aspect of fault tolerance is not addressed
in the DiffServ architecture. For traditional IP networks,
the underlying link state protocol provides fault detection
and recovery. However, for QoS sensitive ﬂows, the re-
covery times of such protocols may not be adequate. Al-
though such a problem may be solved through ﬁne grain
HELLO timers, the underlying core routers may not be able
to tolerate the additional CPU and bandwidth burden. The
edge-based intelligence of the DiffServ domain represents a
unique opportunity to improve the fault detection capability
of the link state protocol. In this paper, we propose a hy-
brid scheme whereby heartbeat packets are used to detect
possible faults coupled with a temporary ﬁne grain HELLO
interval for fault location and possible recovery. We ana-
lyze our scheme through extensive simulation studies and
we examine the tradeoffs and beneﬁts of our scheme.
visioning mechanisms. In addition, as the available band-
width to end users increases, new applications are continu-
ally being developed which erode gains in network capacity.
Thus, for the foreseeable future, some form of resource pro-
visioning is necessary to provide QoS across the Internet.
1.1. Differentiated Services
The Differentiated Services (DiffServ) architecture [1]
is a promising architecture proposed by the IETF for pro-
viding scalable QoS across the Internet.
In the DiffServ
architecture, intelligence is migrated to the edge of the do-
main in order to keep the core of the network simple and
scalable. Routers in a DiffServ domain are divided into
two categories, core routers (simple and high speed) and
edge routers (stateful and intelligent). Core routers do not
have per-ﬂow state and differentiate packets according to
the DSCP (DiffServ Codepoint) of the packet. In contrast,
edge routers are responsible for policing and/or marking all
packets according to an SLA (Service Level Agreement) be-
tween the source (other ISP, user, company) and domain, or
between two domains.
Keywords: Differentiated Services, Link state routing,
Multicasting, Fault detection
1.2. Fault Tolerance & QoS
1. Introduction
Recently, there has been a push from business and user
communities for next generation applications demanding
Quality of Service (QoS). However, the Internet in its cur-
rent form does not support the notion of Quality of Service
(QoS). This best-effort service model is inadequate in meet-
ing the growing demands of the next generation applica-
tions, most of which demand QoS assurances for effective
data delivery and presentations.
Although the bandwidth of the Internet is continually in-
creasing, the backbone of the Internet itself is still far from
being able to support QoS without appropriate resource pro-
Although the proper provisioning and monitoring of QoS
is critical for next generation applications, an equally im-
portant factor for QoS is the underlying fault-tolerance of
the network. As the QoS provisioning mechanisms (reser-
vation and scheduling) are responsible for providing the ac-
tual QoS, it is the task of the underlying routing protocols
(IS-IS [3], OSPF [4], BGP [5], etc.) to provide an up to date
network state for the QoS mechanisms to make accurate de-
cisions.
Due to the limited resources (bandwidth and CPU) and
the distributed nature of the edge routers in DiffServ, a
tradeoff exists at the routing protocol in providing accurate
state information. On one end of the spectrum, one can
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:40 UTC from IEEE Xplore.  Restrictions apply. 
keep the network burden low at the cost of a potentially in-
accurate network state. However, at the end of the other
spectrum a more accurate network picture is achieved at the
cost of signiﬁcant resources.
1.3. Motivation
The tradeoff of the underlying routing protocol intro-
duces the motivation for our paper. Whereas the Diff-
Serv architecture poses unique challenges, it also provides
unique opportunities to take advantage of the underly-
ing DiffServ infrastructure.
In our paper, we propose a
model, EI-HELLO (Edge-based Intelligent HELLO), that
uses DSMCast [6] (a model for DiffServ multicasting) to
augment the existing link state protocols through edge-
based monitoring of the internal core routers. By employing
the concept of a heartbeat data packet and a hybrid HELLO
mode, the method is able to achieve performance approach-
ing that of a millisecond-level HELLO method while dras-
tically reducing the amount of HELLO processing required.
The rest of our paper is organized as follows. In Sec-
tion 2, we further outline the importance of the link state
routing protocol in DiffServ and introduce a multicasting
model for DiffServ (DSMCast). Next, we outline our EI-
HELLO model in Section 3. Then, in Section 4 we inves-
tigate the performance of our model versus slow and fast
HELLO models. Finally, in Section 5 we make several con-
cluding remarks.
2. Network Model and Fault Model
As DiffServ is primarily concerned with per-hop differ-
entiation and edge-to-edge transport of packets, the intra-
domain routing protocol plays a critical role in the proper
functioning of the DiffServ architecture. Since the majority
of trafﬁc management is based at the edge routers, an accu-
rate network state is essential to avoid incorrectly allocating
network resources. Thus, we focus in the next subsection on
the shortcomings of the most common intra-domain routing
protocol type, link-state routing.
2.1. Link State Routing
For our paper, we assume that routers within the domain
use link state protocols (such as OSPF [4] or IS-IS [3]) to
exchange routing information. The inter-domain routing
case is not considered as we are only interested in pack-
ets crossing from one edge (ingress router) of the domain to
the other edge (egress router). In general for link state pro-
tocols, a HELLO message is sent to all of the router’s neigh-
bors to test the health of the links. Upon successful receipt
of a HELLO message, a router can be certain that packets
are ﬂowing correctly from its neighbor to the router1.
Unless the routers have an error notiﬁcation mechanism
from lower layers (such as in Packet-over-SONET inter-
faces), the router is forced to rely on timeouts to determine
that a link is down. Timeouts are speciﬁed typically by the
HELLO interval (H) and a dead time (D) where the time-
out is simply H × D seconds. When a topology change
is detected, the updated link state is ﬂooded to the entire
domain (or appropriate sub-area). If the HELLO interval
is large (i.e. 5-10 seconds), the re-route time may be ex-
tremely slow. It was observed in [7] that such slow re-route
times are typically the norm rather than a rarity, hence re-
sulting in re-routing times in the tens of seconds.
The simplest solution is to reduce the HELLO interval
to a much more acceptable level. Under the current speci-
ﬁcations of OSPF and IS-IS, the HELLO time is limited to
an integer value (in seconds). In order to improve the fault
detection time further, it was proposed in [8] to add an ex-
tension ﬁeld in IS-IS for millisecond HELLO intervals. For
highly delay and loss sensitive trafﬁc such as Voice over IP
(VoIP), such a recovery time is essential [7].
However, as discussed earlier, such a reduced HELLO
interval does not come without a cost.
In addition to
the additional bandwidth cost, the processing of additional
HELLO messages consumes valuable router CPU resources
as well.
In heavily loaded networks that fail fairly in-
frequently, such router resources might better be utilized
for routing data packets or other operations. Thus, as-
suming that data packets consume zero CPU resources and
HELLO packets consume signiﬁcant CPU resources, a hy-
brid method employing efﬁcient data packets for detecting
faults could offer signiﬁcant router CPU savings. However,
to use such data packets effectively, multicasting provides
the best method for accomplishing such a task.
2.2. DiffServ Multicasting: DSMCast
Although the two technologies of DiffServ and multi-
casting are complementary, the per-group packet replica-
tion information required at core routers for multicasting
and the sender-driven QoS nature of DiffServ make the in-
tegration a non-trivial problem. As a result, one must em-
ploy a DiffServ-aware multicasting approach for transport-
ing multicast packets across the DiffServ domain to address
the architectural conﬂicts between the two technologies.
In our paper, we employ the DSMCast (DiffServ Mul-
ticast) approach [6] which uses an encapsulation-based ap-
proach wherein the multicast tree information for a domain2
1Note: This does not ensure that packets can ﬂow the other direction
(i.e. out of the router to the neighbor).
2Only the tree for the domain is encoded, not the entire end-to-end tree
as with other approaches.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:40 UTC from IEEE Xplore.  Restrictions apply. 
2
is encoded and added to the packet as a DSMCast header.
An encapsulation-based model is used because it conforms
with the zero state concept of core routers (unlike traditional
IP multicast) and simpliﬁes tasks such as handling receiver
heterogeneity, resource provisioning, and billing [9].
By using multicast (DSMCast) for replication and pin-
ning the route of the packet, the edge-to-edge integrity of
critical paths in the DiffServ domain can be veriﬁed through
successful receipt of such packets.
In addition, since the
packet is a data packet, core routers do not have to process
the packet beyond the replication information (implemented
in hardware), thus adding zero overhead to the CPU of the
router.
2.3. Fault Model
For our model, we assume the underlying network is run-
ning a link state protocol such as OSPF or IS-IS. The type
of faults that may occur in the network are deﬁned in the
following manner:
(cid:127) Single link failure: For a duplex link between node A
and node B, only (A, B) or (B, A) fails.
(cid:127) Full link failure: For a duplex link between node A
and node B, both links (A, B) and (B, A) fail.
(cid:127) Node failure: For a node A in the network, all links
outgoing from A fail.
(cid:127) Congestion: Dropping of packets due to congestion is
not considered to be a failure in the network and is
considered a normal byproduct of network operation.
(cid:127) Byzantine failure: Nodes are assumed to not enter a
Byzantine state.
(cid:127) Malicious failure: The routing state protocol is as-
sumed to employ secure routing to prevent malicious
(user-initiated) routing failures (replay, man-in-the-
middle, etc.).
For multicast packets traversing the DiffServ domain, the
route is pinned via information in the DSMCast header. By
virtue of pinning the route within the packet header, such an
approach is susceptible to faults within the underlying net-
work. If the underlying link state protocol is slow to detect
the fault, packets are not routed around the fault until the
link state protocol updates the ingress router. However, the
route pinning that makes DSMCast susceptible to slow link
updates also provides the mechanism for detecting possible
faults. Since the route of the packet is known, the successful
receipt of packets can be used to produce a mechanism for
detecting possible faults.
3. EI-HELLO: Edge-based Intelligent HELLO
In this paper, we propose an efﬁcient fault detection
method, called EI-HELLO, that capitalizes on the unique
aspects of the DiffServ architecture (intelligent edge routers
and route-pinned multicasting) to monitor the health of in-
ternal core nodes in the network. Rather than greedily oper-
ating with a fast HELLO interval (sub-second) all the time,
the EI-HELLO method engages the sub-second HELLO in-
terval (hybrid HELLO) only when a possible fault is de-
tected. Potential faults are detected by the edge routers
through the use of heartbeat packets (speciﬁc route-pinned
data packets) sent across speciﬁed links. The edge routers
then use the distributed feedback of other edge routers
and internal timers to determine the appropriate circum-
stances for the fast HELLO intervals. The proposed EI-
HELLO method can be divided into two main components,
the heartbeat component (fault detection) and the hybrid
HELLO module (fault location + fault recovery).
(cid:127) Heartbeat: A heartbeat-style approach is used to allow
the edge nodes to periodically verify the health of spec-
iﬁed links in the network without the CPU overhead of
HELLO messages. In order to avoid additional CPU
overhead or the special treatment of control packets,
the heartbeat is sent as a data message with a minimal
packet loss probability. The heartbeats are processed
in a distributed manner by edge nodes to determine the
health of links in the network. The heartbeat compo-
nent is not responsible for pinpointing the exact loca-
tion of the fault, rather it is only responsible for detect-
ing that a fault may be present in the network.
(cid:127) Hybrid HELLO: When an edge router detects a possi-
ble fault, the edge router will selectively switch suspect
core routers into a hybrid HELLO mode. In the hybrid
HELLO mode, the core router will send HELLO mes-
sages to the speciﬁed neighbors (or all neighbors) at a
signiﬁcantly increased rate (sub-second interval) for a
speciﬁed number of HELLO packets. When the spec-
iﬁed number of hybrid packets is complete, the node
will switch back to normal HELLO message operation
(multiple second interval).
3.1. Edge-based Heartbeats
As mentioned earlier, core routers are not allowed to
maintain any state information besides per-class state infor-
mation. Thus, the monitoring of the successful delivery of
multicast or unicast packets is not possible via state infor-
mation in the core. From the perspective of the edge router,
the sender-driven QoS makes it desirable to be able to ver-
ify the health of the route to the egress nodes. Whereas per-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:40 UTC from IEEE Xplore.  Restrictions apply. 
3
ﬂow monitoring would offer the best monitoring capabil-
ities, both class-wise monitoring and simple edge-to-edge
connectivity monitoring would offer possible beneﬁts.
For example, if an edge router could monitor the conges-
tion in the core across a speciﬁc path for a range of classes,
the edge router would be able to offer an adaptive packet
marking scheme. In such a scheme, the edge routers could
try to intelligently minimize the network cost while appro-
priately meeting the edge-to-edge QoS requirements. In the
case of route-pinned packets (such as with MPLS [10]) , a
simple veriﬁcation of connectivity is key as such packets are
not locally rerouted in the core.
In order to accomplish the goal of external health mon-
itoring, the edge router will issue a special heartbeat data
packet to the other edge routers in the DiffServ (DS) do-
main. The route-pinned approach of DSMCast offers the
most efﬁcient method for accomplishing this goal. If the
multicast tree for the heartbeat packet contains all of the
paths employed by a given edge router for data packets to
all other edge routers, a successful acknowledgement of the
heartbeat packet from all of the edge nodes means that the
links used by the edge node to transmit data to the other
edge nodes are functioning. However, such a condition does
not imply that all of the links in the entire DS domain are
operating, rather only that packets are simply being routed
successfully from a given edge node to the other edge nodes
along the veriﬁed paths.
Formally, consider an edge node EIng, an ingress node
in the DS domain that wishes to verify that packets are ﬂow-
ing along valid paths (no links or nodes are down) to the
egress (downstream) edge nodes. Assume that EIng knows
the complete path from edge-to-edge across the domain3.
Let E1, . . . , EN represent the egress nodes receiving pack-
ets from EIng and let L1, . . . , LX represent all of the links
traversed by the packets. Thus, the problem is to construct
a set of multicast trees (T1, . . . , TX) such that for each Li,
Li is covered by at least one branch of one of the multicast
trees.
terval of HBeatIVal seconds across the multicast tree and
would be uniquely identiﬁed through the use of a sequence
number.
from EIng denotes that
Although the successful receipt of a heartbeat packet
the path P (EIng, Ei)
at Ei
is working,
the packet does not necessarily imply that
P (Ei, EIng)) is valid and thus is only marginally useful. As
a result, the downstream node (Ei) would need to acknowl-
edge the successful receipt of the packet to the ingress node
(EIng) since the ingress node is the node actually concerned
with the validity of P (EIng, Ei).
In order to avoid the problem of message explosion, the
heartbeat and acknowledgement information are consoli-
dated into a single packet. Rather than acknowledging indi-
vidual packets, an edge node simply includes the sequence
numbers from all known edge nodes in the heartbeat packet.
Since the heartbeat is transmitted to all other edge nodes,
the sender effectively acknowledges all other edge nodes
with a single packet.
As a result of receiving an acknowledgement from Ei,
EIng can be reasonably certain that data packets are cor-
rectly being sent to Ei if the heartbeat packet from Ei con-
tains the correct sequence number for EIng. In such an in-
stance, the paths used by the multicast distribution tree be-
tween EIng and Ei as well as in the reverse direction can
be assumed to be correct4 if the sequence numbers are syn-
chronized. Note that each edge node has its own indepen-
dent sequence number for its transmitted heartbeats.
Since the round-trip delay across the domain may exceed
the interval between when heartbeat packets are sent, heart-
beats are allowed to be out of sequence by a ﬁxed amount.
In order to characterize such tolerances, the EI-HELLO
model has two parameters for controlling the inconsistent
state of the sequence numbers, namely the Red and Green
parameters. As the names imply, the Green parameter im-
plies that an edge router is receiving packets while Red im-
plies that there is a potential fault in the network.
3.2. Simple Case - Single Tree
3.3. Red Parameter
To start, consider the case where all of the packets from
EIng to other edge nodes can be condensed into a single
multicast tree. In this case, only one potential path exists
for each ingress/egress pair. In such a case, it may be pos-
sible that the paths may not be the same in the forward and
reverse directions (i.e. P (Ex, Ey) may be different from
P (Ey, Ex)). In short, the multicast tree would contain all
paths for all data packets used by EIng for all outbound
packets. Heartbeat packets would be transmitted at an in-
3For ﬂows that have reserved resources, such paths would be available
from the BB (Bandwidth Broker). For other ﬂows, the link state routing
protocol would provide such paths.
The Red parameter is used to detect full link or node
failures between two edge routers. In such a case, heart-
beats are not reaching their respective targets in either di-
rection. From the perspective of EIng, it will notice that
it has not received a heartbeat message from Ei in Red ×
HBeatIV al seconds where Red is an number greater than
zero and HBeatIV al is the interval between successive
heartbeat messages.
In order to reduce the number of
timers, the status could be checked only on the periodic in-
terval. Although EIng does not know which link between
4This assumes that the neither EIng nor Ei is malicious nor that heart-
beat packets are being spoofed by an attacker.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:40 UTC from IEEE Xplore.  Restrictions apply. 
4
E0
E1
C3
C2
C4
EIng
E5
detect that it is out of sequence with EIng. EIng could also
use the same procedure with the heartbeat from E1 as well
for E0’s sequence number. Thus, although an edge node
may be blocked from receiving a heartbeat, it may attempt
to recover before the Red timeout as long as it is still re-
ceiving heartbeats from other nodes.
Figure 1. EI-HELLO Heartbeat Warning Anal-
ysis
3.5. Hybrid HELLO
EIng and Ei is down, EIng can assume with reasonable cer-
tainty that a link is probably down (i.e. not transient con-
gestion). In order to avoid false positives, the Red value
should be set sufﬁciently high as well as using an appropri-
ate DSCP to prevent excessive dropping of heartbeat pack-
ets.
In the case that such a node is discovered, the hybrid
HELLO routine should be invoked to probe the path from
EIng to Ei. The hybrid HELLO routine is discussed in
greater detail in Section 3.5.
3.4. Green Parameter
Although the Red parameter will detect faults via a time-
out, the Green parameter plays a much more critical role in
the operation of the EI-HELLO model. The Green param-
eter is responsible for detecting single link failures as well
as being used by other edge nodes to assist in detecting link
failures. The intuition behind the Green parameter relies
on the distributed intelligence of the edge routers to detect
potential failures before the Red timeout.
Consider a network such as the one pictured in Figure
1 where EIng is sending heartbeats to the three other edge
nodes, E0, E1, and E5. Suppose the link between nodes C2
and E0 goes down (both directions). In this case, the heart-
beat message between EIng and E0 will not be received
successfully. However, E1 will still receive heartbeats from
E0 due to the direct link between them. As a result, E1 will
notice that E0’s picture of EIng’s sequence number is out of
sync with the sequence number that E1 has for EIng. With-
out any intervention, the Red timeout would eventually oc-
cur and proper probing and recovery would soon follow.
However, since E1 recognizes that E0 is behind by more
than Green sequence numbers, E1 can attach a warning
to its next packet letting all of the edge nodes know that
there is a potential problem between E0 and EIng. Since
the heartbeat message is already going between E1 and the
other nodes, it is more efﬁcient to attach a warning to the
heartbeat message rather than separately unicasting to E0
and EIng.
Even if E1 does not detect that E0 is behind in the heart-
beat sequence, E0 could also use the heartbeat from E1 to
Once a possible fault has been detected, an edge node
needs to trigger the domain to try to locate/recover from
the possible fault. Although the edge node could attempt to
probe the domain itself via various probing packets to/from
core nodes, such a process would be wasteful and time-
consuming. Since the link state protocol is already respon-
sible for appropriately detecting faults, the edge node can
engage the routers along the suspected path to attempt to
detect potential faults.
Although the fault will eventually be recovered from by
the link state protocol, the re-routing time may be exces-
sively long. Thus, since the edge node knows the path(s)