### Overview of GOSHAWK's Analysis and Results

GOSHAWK, a tool designed to identify and analyze memory management (MM) functions, was tested on multiple projects, including the Linux kernel, FreeBSD kernel, OpenSSL, Redis, and IoT SDKs. The tool extracted over 676,000 function declarations and classified them using NLP-assisted classification. Initially, 90,069 functions were classified, and after further filtering based on data pointer presence in function prototypes, 53,977 MM function candidates were selected.

To reduce false positives, GOSHAWK applied data flow analysis-based validation, which reduced the number of candidates to 13,868 custom MM functions (5,820 allocators and 8,048 deallocators). Manual verification confirmed the accuracy of the identified functions for OpenSSL, Redis, and IoT SDKs. For the Linux and FreeBSD kernels, random checks on 300 functions showed no misidentifications. Additionally, 50 filtered functions were manually inspected, confirming that they did not perform memory allocation or deallocation despite having similar names.

### Evaluation of NLP-Assisted Classification and Data Flow Analysis

To systematically evaluate the impact of NLP-assisted classification and data flow analysis-based validation on accuracy, 200 allocators, 200 deallocators, and 600 non-MM functions were manually chosen for testing. The results, summarized in Table III, show that while NLP-assisted classification alone had low precision, combining it with data flow analysis increased precision to 100% but slightly reduced recall.

For a larger-scale comparison, GOSHAWK was applied to the Linux kernel versions 5.2.13 and 4.19, and the results were compared with K-MELD and SinkFinder. GOSHAWK outperformed these tools in identifying more MM functions, though it missed some functions labeled by K-MELD and SinkFinder. After manual review, many of the missed functions were found to be false positives in K-MELD and SinkFinder. The remaining missed functions were due to issues like indirect calls and complex pointer arithmetic.

### Features of Generated Memory Object Summaries (MOS)

GOSHAWK generated MOS for all 13,868 identified custom allocators and deallocators. The distribution of MM functions across different projects was analyzed, revealing more deallocators than allocators. This suggests that allocators and deallocators are not always paired, leading to varied usage patterns.

The generated MOS also highlighted the complexity of memory object management. For example, 74.1% of allocators return allocated memory objects via return values, while 25.9% use parameters. Similarly, deallocators exhibit diverse behaviors, such as directly releasing pointers or dereferencing pointers to release sub-objects. These findings underscore the importance of modeling extended MM functions accurately to avoid imprecise bug detection.

### Bug Detection

#### Code Exploration Settings
To utilize hardware resources efficiently (64-core AMD 3990x and 192GB RAM), the analysis parameters for Context-Sensitive Analysis (CSA) were set to MAX-AD=5, MAX-AB=225,000, and CTU-THR=100.

#### Detected Bugs
GOSHAWK detected 145 potential bugs in the tested projects. Manual audit confirmed 92 (63.4%) as real and previously unknown, even though these projects had been extensively tested by other code analyzers. Many of these bugs had been present for a long time, with some in the Linux kernel existing for over 15 years.

#### Detection Accuracy
Initially, GOSHAWK labeled 308 issues, of which 163 were infeasible paths. Using the Z3 SMT solver, 30 false warnings were excluded. The remaining 133 cases were manually examined, resulting in the confirmation of 33, 7, 0, 0, and 13 false positives for the Linux kernel, FreeBSD kernel, OpenSSL, Redis, and IoT SDKs, respectively. False negatives were evaluated using a list of 31 use-after-free bugs in Linux kernel 4.19 found by SinkFinder. GOSHAWK successfully detected 29 of these, missing two due to identification issues with specific deallocators.

### Time and Performance Analysis

Table V shows the analysis time costs for GOSHAWK. For the Linux kernel, the entire process took 427 minutes, with 61 minutes for NLP-assisted classification and data flow analysis, 38 minutes for MOS generation, and 328 minutes for bug detection. For other projects, the bug detection completed in less than one hour. GOSHAWK significantly reduces data flow length by removing internal data flows, improving scalability.

### Comparison with Related Works

GOSHAWK outperforms K-MELD and SinkFinder in identifying MM functions and is applicable to both large and small projects. In bug detection, GOSHAWK reported fewer false positives and missed fewer bugs compared to K-MELD and SinkFinder. The structure-aware and object-centric analysis of GOSHAWK enhances precision effectively.

### Discussion

#### Scalability Bottlenecks
Code exploration depth and breadth are key factors affecting analysis complexity. Path explosion is a well-known issue. Strategies to improve scalability include reducing the number of paths for symbolic execution and enhancing the performance of the symbolic execution engine.

#### Sources of False Positives/Negatives
Challenges in control-flow and data-flow analysis, such as indirect call resolution and alias analysis, contribute to imprecision. Improving these aspects can enhance the accuracy of GOSHAWK's results.

In conclusion, GOSHAWK provides a robust and accurate method for identifying and analyzing MM functions, with the potential for further improvements in scalability and precision.