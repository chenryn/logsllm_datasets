vTPM migration (e.g., minimal key regeneration). In what
follows, we provide a brief background on TPM functional-
ity and keys and discuss several issues with existent vTPM
key hierarchy proposals. We then introduce our vTPM hier-
archy and discuss its implications on VM-vTPM migration.
Background on TPM Keys: The hardware TPM enables
proofs of authenticity, attestation and secure storage based
on three main cryptographic keys, namely the Endorsement
Key (EK), the Storage Root Key (SRK) and the Attestation
Identity Key (AIK). The EK is a persistent non-migratable
encryption key that is used to establish the authenticity of
the TPM. The use of this key for transaction authentica-
tion in the network is not recommended as it would enable
TPM transaction linking. The SRK is a non-migratable
encryption key that is used to protect the storage of other
TPM keys outside the TPM. The AIK is an asymmetric
non-migratable signing key generated inside the TPM and
certiﬁed by a Certiﬁed Authority (Privacy CA). It is used
as a one time key to establish authenticity of the TPM dur-
ing attestation [1]. The AIK certiﬁcate proves the the AIK
was created by a genuine TPM. Since it does not expose
the EK, it can be safely used in network transactions with-
out privacy concerns. The Platform Conﬁguration Registers
(PCR) are additional components used for attestation and
secure storage; these components reside inside the TPM and
store platform conﬁguration measurements2
. The latter are
used either to attest the system integrity during remote at-
testation or seal data to particular system conﬁgurations [1].
Background on vTPM Keys: vTPM key hierarchies in-
clude keys analogous to their TPM key hierarchy counter-
parts. Each vTPM typically has its own virtual EK (vEK),
virtual SRK (vSRK) which is used to protect the storage
of other vTPM keys and virtual AIKs (vAIKs) used for
platform attestation purposes.
The relationship between vTPM and TPM key hierarchies
is an important design choice that needs to be taken into
account in secure VM-vTPM migration. Several vTPM key
hierarchy proposals completely decouple their keys from the
TPM keys [4, 7]. This is achieved by obtaining the vTPM
EK (vEK) and AIK (vAIK) credentials from a local au-
thority. While this procedure avoids generating those keys
on the platform vTPM after migration, it is not clear how it
removes the need for vTPM credential regeneration. The in-
clusion of TPM PCRs in the certiﬁcate of a vEK to achieve
VM-vTPM binding would require its frequent regeneration
if TPM PCRs are periodically modiﬁed (extended) by means
of dynamic system measurements [4]. All vAIKs obtained
before the TPM PCRs changed would not be valid anymore.
In addition, using a permanent vEK to prove vTPM-TPM
binding during attestation [4] allows linking vTPM trans-
actions. On the other hand, tight coupling of the vTPM
and TPM (as discussed in [4]) by signing vTPM credentials
2
These measurements often consist of hashing the state of
the software running on the platform.
(cid:1)(cid:2)(cid:3)
(cid:9)(cid:28)(cid:29)(cid:30)(cid:10)
(cid:33)(cid:21)(cid:16)(cid:26)(cid:21)(cid:16)(cid:8)(cid:19)
(cid:27)(cid:14)(cid:23)(cid:20)
(cid:6)(cid:16)(cid:13)(cid:14)(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:20)(cid:21)(cid:8)(cid:16)(cid:21)(cid:16)(cid:8)(cid:11)(cid:19)
(cid:34)(cid:21)(cid:16)(cid:26)(cid:21)(cid:16)(cid:8)(cid:19)(cid:17)(cid:16)(cid:26)(cid:19)
(cid:18)(cid:14)(cid:8)(cid:17)(cid:22)(cid:23)(cid:19)(cid:27)(cid:14)(cid:23)(cid:20)
(cid:1)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)
(cid:20)(cid:21)(cid:8)(cid:16)(cid:21)(cid:16)(cid:8)(cid:11)(cid:14)(cid:16)(cid:22)(cid:15)(cid:23)(cid:24)(cid:13)(cid:21)(cid:25)(cid:16)(cid:19)
(cid:17)(cid:16)(cid:26)(cid:19)(cid:18)(cid:14)(cid:8)(cid:17)(cid:22)(cid:23)(cid:19)(cid:27)(cid:14)(cid:23)(cid:20)
(cid:9)(cid:3)(cid:4)(cid:2)(cid:10)
(cid:9)(cid:5)(cid:6)(cid:2)(cid:10)
(cid:9)(cid:5)(cid:6)(cid:2)(cid:10)(cid:11)(cid:7)
(cid:9)(cid:5)(cid:6)(cid:2)(cid:10)(cid:11)(cid:31)
(cid:9)(cid:5)(cid:6)(cid:2)(cid:10)(cid:11)(cid:16)
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:28)(cid:29)(cid:30)
(cid:28)(cid:29)(cid:30)(cid:19)
(cid:27)(cid:14)(cid:23)(cid:20)
(cid:8)(cid:3)(cid:4)(cid:2)
(cid:1)(cid:2)
(cid:3)(cid:4)(cid:2)
(cid:3)(cid:2)
(cid:5)(cid:6)(cid:2)
(cid:3)(cid:2)(cid:7)
(cid:3)(cid:2)(cid:31)
(cid:5)(cid:6)(cid:2)(cid:7)
(cid:5)(cid:6)(cid:2)(cid:31)
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:3)(cid:2)(cid:16)
(cid:5)(cid:6)(cid:2)(cid:16)
Figure 2: vTPM key set and hierarchy. Our proposed hierarchy consists of an intermediate layer of a global SRK
(gSRK) and a set of signing keys (SKs) that connect the TPM SRK and AIKs to the vTPM vSRK and vAIK. We also
logically separate the vTPM keys into internal and external keys.
using the TPM AIK directly mandates that the correspond-
ing keys be non-migratable and thus, requires extensive re-
generation of vTPM keys on the destination platform after
VM migration. The same limitation arises for the vSRK
if it is encrypted directly using the TPM SRK. Refer to
Appendix A for more details regarding existent vTPM key
hierarchy designs.
ing and encrypting data exchanged between VMs over the
network. Corresponding vAIKs are therefore restricted to
one-time use in order to prevent vTPM transaction linking.
Hence, these vAIKs are not part of a migrating vTPM.
Below we provide a summary description of our vTPM
hierarchy keys and discuss the implications of this hierarchy
on VM-vTPM migration:
Our vTPM Key Hierarchy: In order to enable migra-
tion with minimized key regeneration after VM-vTPM mi-
gration, we propose a vTPM key hierarchy which introduces
an intermediate layer of keys between the TPM and vTPM.
This intermediate layer consists of one global SRK (gSRK)
and a set of signing keys (SK) that connect the TPM SRK
and AIKs to the vTPM vSRK and vAIK respectively (Fig-
ure 2). Even though this renders the signing keys gSRK and
SKs non-migratable3
, it allows the migration of the vSRK
and vAIKs and preserves the strong binding between the
TPM and vTPM. Furthermore, using a separate SK with
every vAIK used in external communications prevents link-
ing diﬀerent vTPM transactions. We point out here that
the vSRK and vAIK credentials can only be generated on
a TPM containing the corresponding SRK and AIK. Gen-
erating the vAIKs on the platform itself removes the need
for vEK because the authenticity of the vTPM only depends
on the TPM AIK.
We further separate the vTPM keys into internal and ex-
ternal keys (see Figure 2). Internal vTPM keys are retained
across VM migration. These include the vSRK and the
encryption and signing keys used only within the VM. The
encryption keys are part of the vSRK hierarchy and the cre-
dentials of the signing keys are signed by a vAIK key linked
to a TPM AIK (the key chain is shown in dotted ovals in
Figure 2). Given that one such vAIK could be suﬃcient
for all internal signing, binding and legacy keys, VM-vTPM
migration would incur minimal regeneration at the destina-
tion4
. External vTPM keys are those keys used for sign-
3
This is the case in order to preserve compliance with the
TPM key usage restrictions
4
We note, however, that several vAIK can be used if needed.
• vSRK : Analogous to the TPM SRK, the vSRK pro-
tects the storage of other TPM keys. However, the
storage of the vSRK itself is protected using the global
SRK.
• Global SRK (gSRK): This is an non-migratable asym-
metric encryption key that is a direct descendant of
the TPM SRK. It is used to protect the vSRK of in-
dividual TPMs (by sealing) which in turn protects the
other keys of their respective vTPMs (also by sealing).
Creating this intermediate gSRK makes the vSRKs
migratable which would have not been possible if they
were direct descendants of the TPM SRK.
• vAIK : Analogous to the TPM AIK, a vAIK can be
used to establish the authenticity of the vTPM and to
sign other keys. We use a special vAIK instance to
sign data and/or certiﬁcates used only within the VM.
This instance is transferred to the destination during
vTPM migration. If a vAIK signs data and/or certiﬁ-
cates to be sent over the network, it is restricted to one
time use to prevent vTPM transaction linking. Such
AIKs are not part of a migrating vTPM. All vAIKs
are linked to the TPM AIK via their own signing keys
(SK).
• Signing Keys (SKs): These are an intermediate layer
of non-migratable TPM signing keys that associate
vAIKs with TPM AIKs. At least one SK is used for
the special vAIK instance (see above). Note that this
SK can be common to all vTPMs on the same plat-
form. All the other SKs are used to bind vAIKs to
TPM AIKs intended to sign data and/or certiﬁcates
(cid:2)(cid:3)(cid:1)
to be sent over the network. SKs are not migrated
during vTPM migration and therefore need to be gen-
erated on the destination platform. This entire key
hierarchy is depicted in Figure 2.
Similar to most software-based vTPM solutions, our vTPM
keys are stored outside the TPM and are prone to leakage
and unauthorized modiﬁcation. While the conﬁdentiality
of vTPM keys is protected by the vSRK, it is also possi-
ble to protect their integrity by the use of hash veriﬁcation.
This enables the detection of key modiﬁcation, but does not
prevent denial of service attacks by modifying the hashes
themselves (on the ﬁlesystem).
During migration, the vSRK of the vTPM is unsealed
from the TPM using the corresponding gSRK and is trans-
ferred along with other vTPM keys that are used only within
the VM including the special vAIK instance. At the desti-
nation, after migration, the vSRK is sealed to the destina-
tion’s TPM using its gSRK. Furthermore, the credentials
for the special vAIK instance are regenerated using the des-
tination’s special AIK and SK instances.
3.2 Protocol Description
Given the above vTPM key hierarchy, we proceed to pre-
senting a possible construction of a secure VM-vTPM mi-
gration protocol (Figure 3).
Our exemplary construction mainly consists of three stages:
the authentication stage, the attestation stage and the data
transfer stage. In the ﬁrst stage, the authentication stage, S
and D mutually authenticate each other using their public
key certiﬁcates and establish a secure channel for their sub-
sequent communication. This can be achieved, for example,
by using a non-migratable binding key that is stored on the
TPM and that is bound to a secure conﬁguration of either
D or S. Although this approach has clear advantages, it be-
comes rather costly as the message size increases; that is, the
protocol will incur a prohibitively high overhead e.g., when
a VM RAM is transferred from S to D. In that case, a more
suitable approach would be to rely on the establishment of
Diﬃe-Hellman symmetric keys [17] between S and D. For
instance, this can be realized by using the TLS handshake
protocol [18]. Once a session key K is established, S and D
can use it to ensure the conﬁdentiality and integrity of their
communication. This can, for example, be done by concate-
nating each message with its hash (for integrity veriﬁcation)
and encrypting the result using key K (for conﬁdentiality).
Since we assume that an attacker cannot compromise the
machines of S and D during the migration process, the es-
tablished session keys can be stored in the system memory
of both S and D.
Once the authentication stage is completed, the attesta-
tion stage starts. This stage mainly consists of the integrity
veriﬁcation of both S and D. In Section 3.3, we show that
this veriﬁcation prevents a considerable number of security
threats.
To verify the integrity of D, S proceeds as follows. It initi-
ates the attestation process by sending D a freshly generated
random nonce Ns. This would trigger a measurement mod-
ule in D to perform a system measurement. System mea-
surements typically include load and/or run time properties
of the hypervisor [12,13]. These properties can be measured
using a number of techniques such as [19, 20].
The load time integrity of the measurement module itself
can be further protected using a dynamic root of trust (like
(cid:1)(cid:2)(cid:1)
in Flicker [15]), which also provides a secure isolated run
time environment. The measurement module also extends
5
the public key certiﬁcate of D (or its hash) into the PCRs
.
Given this, D then sends a signed copy of its PCRs (i.e.,
D sends SignAIK (P CR || Ns) signed using an AIK key
obtained from a Privacy CA) containing details about the
execution of the measurement module, the system conﬁgu-
ration, its public key certiﬁcate along with a freshly gener-
ated random nonce Ns. We point out that these integrity
measurements do not include any information correspond-
ing to the contents of the VM being transferred. Instead,
the integrity of the transferred VM is veriﬁed by S prior to
migration (if any) and by D before resumption. S then ver-
iﬁes that the extracted PCRs correspond to those of D by
checking the public key certiﬁcate extension into the PCRs.
It then checks the validity of the AIK to verify the authen-
ticity of D’s TPM and D’s PCRs to verify D’s integrity.
Similarly, D also veriﬁes the integrity of S. If these veriﬁca-
tions pass, then the data transfer stage can start.
In this last stage, the actual transfer of the VM-vTPM
occurs. Here, D sends S a freshly generated random nonce
Nd indicating its readiness to receive the migrating VM-
vTPM. S then transfers the contents of the VM-vTPM along
with the received nonce on the established secure channel.
In our construction, we require that D also checks the in-
tegrity of the migrated VM (for the reasoning why, refer to
Section 3.3). Since it is assumed that the vTPM (or VM)
queries the underlying TPM to obtain hardware and hyper-
visor measurement information, no separate mechanisms are
required to update the vTPM with this information after mi-
gration. Finally, S deletes its local copy of the VM-vTPM
and both S and D resume their operation.
3.3 Security Analysis
In what follows, we brieﬂy analyze the security of our
protocol construction.
7
6
The establishment of a secure channel between S and
D ensures the conﬁdentiality and integrity of all their ex-
changed messages. Furthermore, the use of Diﬃe-Hellman