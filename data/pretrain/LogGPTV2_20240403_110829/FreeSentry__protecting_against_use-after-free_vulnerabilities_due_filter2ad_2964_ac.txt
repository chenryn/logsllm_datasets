### Dangling Pointers and Use-After-Free Vulnerabilities

A dangling pointer vulnerability typically arises during a `free` operation, where no additional checks are performed to prevent double frees. In contrast, a general use-after-free vulnerability occurs when the pointer is dereferenced in a different operation. Both types of vulnerabilities involve dereferencing a pointer, and thus, the double free tests conducted here provide the same information about the mitigation as a more general use-after-free vulnerability.

### Case Study: ClamAV Vulnerability

A vulnerability (CVE-2014-9050) was privately reported by Damien Millescamps to the ClamAV team. This vulnerability would trigger a use-after-free in version 0.98.4 of the software when scanning a maliciously crafted PE binary. The reporter provided a proof-of-concept binary that triggered the vulnerability. When ClamAV was compiled with FreeSentry, the program crashed upon accessing an invalid pointer, thereby preventing the exploitation of this vulnerability.

### Related Work

#### Garbage Collection
A common approach to preventing use-after-free vulnerabilities is garbage collection. However, garbage collection does not deallocate memory immediately but defers it to a scheduled time or until memory constraints require it. Only memory with no remaining references is deallocated, preventing pointers from referring to freed memory. C programs, however, do not always clear all pointers to a memory location when they free it. Therefore, using garbage collection without modifying the program could lead to excessive memory usage. Additionally, it requires abandoning custom memory allocators in favor of the garbage collector.

#### Virtual Page Allocation
Dhurjati and Adve [11] propose a mitigation that uses a new virtual page for each allocation. To conserve memory, the new virtual page is mapped to the same physical page as the original allocation. This prevents stale pointers from using the memory while reusing the original allocation, reducing memory overhead. Although this approach has low overhead for UNIX servers, it significantly slows down programs with frequent memory allocations.

#### Cling
Cling [12] is a memory allocator designed to make use-after-free vulnerabilities harder to exploit. It has low overhead, but some performance improvements and slowdowns are due to the use of a different memory allocator, making it difficult to compare overhead completely. Cling allows address space reuse for freed objects of the same type, which constrains exploitation vectors but does not solve all issues introduced by dangling pointers, especially if the program's control flow makes it hard to guess the object type. It also does not protect against dangling pointers on the stack.

#### Undangle
Undangle [13] is another mitigation that prevents use-after-free vulnerabilities by tracking how pointers are copied using taint tracking. When memory is freed, it identifies which pointers still point to the memory location. It can report all dangling pointers at a given time and allows users to specify when to report findings, making it useful as a bug tracking tool. However, it has a high performance overhead, making it impractical for deployment, and relies on execution traces for analysis.

#### CETS
CETS [8] provides a compile-time approach to protect against dangling pointers in C by maintaining a unique identifier with each object and associating it with a pointer. When a pointer is dereferenced, the mitigation checks if the pointer’s unique identifier is still allocated. CETS achieves a mean overhead of 48% for the measured programs. However, due to implementation limitations, some complex SPEC CPU benchmarks did not compile. Comparing 14 overlapping benchmarks, CETS has a mean overhead of 48%, while FreeSentry has an overhead of 29% with stack protection and 12% with only dynamic memory protection. CETS does not offer the option to enable only dynamic memory protection.

#### DieHard and DieHarder
DieHard [14] is a memory allocator that tolerates errors, including buffer overflows and dangling pointers, through randomized allocation within a heap. DieHarder [15] extends this by improving randomization, making exploitation harder. However, attackers who can control allocations (e.g., via JavaScript) can still allocate memory until their desired chunk is reused. DieHarder has a comparable geometric mean performance overhead to FreeSentry, with an overhead of around 30% compared to dlmalloc 2.7.

#### SAFEDISPATCH, VTGuard, and VTV
SAFEDISPATCH [16], VTGuard [17], and VTV [18] protect against overwriting virtual table pointers, a common technique for exploiting use-after-free vulnerabilities in C++ objects. These approaches focus on protecting virtual tables and have low overhead. However, they are ineffective if the attacker targets a pointer within an object rather than the virtual table pointer.

#### Other Approaches
Several other approaches combine bounds checking and dangling pointer mitigation. Safe C [19] defines a safe pointer with attributes for value, base, size, storage class, and capability. It changes the pointer representation, leading to incompatibility with existing code and significant performance impact. Clause et al. [20] developed a dynamic taint tool that checks for spatial and temporal errors for dynamically allocated memory. Fail-safe C [21] implements a memory-safe version of ANSI C using techniques like fat pointers and integers, runtime type information, and garbage collection, but with significant overhead. Xu et al. [22] track metadata associated with pointers to check for spatial and temporal errors, also with significant overhead.

#### Safe Languages
Safe languages prevent memory corruption vulnerabilities by design. Some safe languages, such as Cyclone [23], CCured [25], and others, remain close to C or C++ and are referred to as safe dialects of C. While these languages can prevent implementation vulnerabilities, transforming existing projects to adhere to their syntactical changes may be impractical.

### Future Work
This approach can be extended to include bounds checking techniques using available bounds information [3] for a modest increase in performance. Combining FreeSentry and bounds checking should keep the overhead relatively close to the worst-performing technique, as both processes occur during pointer creation and modification, not access.

### Conclusion
While many widely deployed mitigations, such as stack cookies and address space layout randomization, exist, there are currently no widely deployed mitigations that prevent use-after-free vulnerabilities. This has made use-after-free vulnerabilities the most exploited type on Windows operating systems. FreeSentry offers a transparent and flexible mitigation with moderate performance overhead for CPU-intensive programs and no impact on I/O-heavy programs, making it suitable for server applications. In environments where security is critical, this mitigation can significantly improve security at a modest cost.

### Acknowledgements
The author thanks Matthew Watchinski, Richard B. Johnson, David Sufﬂing, David A. Raynor, Jason V. Miller, Miet Loubele, Aaron Adams, and Donato Ferrante for their insightful comments. Special thanks to Juan Caballero for his help as shepherd and the anonymous reviewers for their suggestions.

### References
[References listed as provided in the original text]

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.