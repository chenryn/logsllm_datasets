记⼀次突破反弹 酒仙
shell_
桥六号部队
- MdEditor
“ 记⼀次突破反弹 shell
背景
某天闲着⽆聊，⼩伙伴发来⼀个某⽹站，说只能执⾏命
令，不能反弹 shell。
测试
对着⽬标站点⼀顿测试。
发现确实存在 shiro 反序列化，并且存在可以利⽤的
gadget。
利⽤
发现确实可以执⾏命令，但是我们执⾏反弹的时候。
反弹不回来，emmm。
查看各种系命令以及分析。
发现是⼀个精简的 Linux，经常⽤于 docker 环境的搭
建。
并没有 bash 环境。
使⽤ sh 命令反弹结果⼀样，之后尝试了各种反弹的⽅
法，⼀⾔难尽。
所以我们需要⼀种新的反弹⽅法，利⽤ java 直接创建⼀
个 socket 反弹。
ysoserial
ysoserial 是⼀款在 Github 开源的知名 java 反序列化利
⽤⼯具，⾥⾯集合了各种 java 反序列化 payload。
源码下载地址：
https://codeload.github.com/frohoff/ysoserial/zip/m
aster
在很多 java 类的反序列化攻击场景中会利⽤到该⼯具。
例如：apache shiro 反序列化，会使⽤ ysoserial ⽣成
反序列化语句，再使⽤ key 加密，发送攻击 payload。
如下 python 脚本，就是利⽤ ysoserial ⽣成反序列化语
句，再⽤ key 加密⽣成 cookie。
⽬的
各种各样的反弹 shell 注⼊ bash、sh、perl、nc、
python 等等，都⽐较依赖⽬标系统的环境和操作系统类
型等等，如果可以直接利⽤ java 创建⼀个 socket 反弹
shell 则可以⽆需关⼼这些环境直接反弹 shell。
ysoserial 分析
在执⾏ ysoserial 的时候⼀般使⽤的命令是 java -cp
ysoserial.jar / 某个 payload/ / 命令 /
打开源码分析对应的 payload 类执⾏过程，如
CommonsCollections2。
在执⾏该类的时候，运⾏ payloadrunner 类的 run ⽅
法，来执⾏本类的 class ⽂件，再加上接收的参数，跟
⼊ payloadrunner 类。
这⾥会调⽤ payload 中的 getObject ⽅法传⼊要执⾏的
命令，命令是接收的输⼊或者是
getDefaultTestCmd()，也就是说我们如果不输⼊命令，
他会执⾏以下默认命令。
Windows:calc
MacOS:calculator
Linux:gnome-calculator\kclac
如果输⼊了命令会执⾏⾃定义命令， 接下来会执⾏
getObject ⽅法 () 来⽣成 payload， 跟⼊对应类的
getObject ⽅法。
getObject ⽅法中，调⽤ Gadgets 类中的
createTemplatesImpl ⽅法⽣成临时的 java 字节码⽂
件，跟⼊对应的⽅法。
ysoserial 改造
可以看到作者在命令获取处已经留下了注释。
待做: 也可以做⼀些有趣的事情，⽐如注⼊⼀个纯
JavaRev/BindShell 来绕过幼稚的保护。
TODO: could also do fun things like injecting a pure-j
⼀般情况我们在 ysoserial 后⾯写的命令调⽤的是
java.lang.Runtime.getRuntime().exec() ⽅法来执⾏命
令，写死了，此处我们可以进⾏改造。
在原来的代码基础上写成：
这样我们再重新打包 ysoserial ⽂件再执⾏命令时使⽤如
下格式。
java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsColl
可以直接获得⼀个反弹 shell。
⽣成 payload 利⽤
发送。
Bingo，得到⼀个反弹 shell。
ysoserial 改造总结
由于不是所有的 payload 在构造时都调⽤了
Gadgets.createTemplatesImpl, 所以只有以下⼏种适⽤
于以上修改。
CommonsBeanutils1
CommonsCollections2
CommonsCollections3
CommonsCollections4
Hibernate1
JavassistWeld1
JBossInterceptors1
Jdk7u21
JSON1
ROME
Spring1
Spring2
Vaadin1
此⽅法不依赖于⽬标操作系统和组件，可以直接利⽤
java 创建反弹 shell。
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明