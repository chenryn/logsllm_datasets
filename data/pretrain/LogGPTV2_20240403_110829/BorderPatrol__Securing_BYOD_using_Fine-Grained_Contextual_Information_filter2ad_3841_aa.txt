title:BorderPatrol: Securing BYOD using Fine-Grained Contextual Information
author:Onur Zungur and
Guillermo Suarez-Tangil and
Gianluca Stringhini and
Manuel Egele
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
BORDERPATROL: Securing BYOD using
ﬁne-grained contextual information
Onur Zungur
Boston University
Boston, USA
PI:EMAIL
Guillermo Suarez-Tangil
King’s College London
London, UK
PI:EMAIL
Gianluca Stringhini
Boston University
Boston, USA
PI:EMAIL
Manuel Egele
Boston University
Boston, USA
PI:EMAIL
Abstract—Companies adopt Bring Your Own Device (BYOD)
policies extensively, for both convenience and cost management.
The compelling way of putting private and business related
applications (apps) on the same device leads to the widespread
usage of employee owned devices to access sensitive company
data and services. Such practices create a security risk as a
legitimate app may send business-sensitive data to third party
servers through detrimental app functions or packaged libraries.
In this paper, we propose BORDERPATROL, a system for
extracting contextual data that businesses can leverage to enforce
access control
in BYOD-enabled corporate networks through
ﬁne-grained policies. BORDERPATROL extracts contextual infor-
mation, which is the stack trace of the app function that generated
the network trafﬁc, on provisioned user devices and transfers this
data in IP headers to enforce desired policies at network routers.
BORDERPATROL provides a way to selectively prevent undesired
functionalities, such as analytics activities or advertisements, and
help enforce information dissemination policies of the company
while leaving other functions of the app intact. Using 2,000 apps,
we demonstrate that BORDERPATROL is effective in preventing
packets which originate from previously identiﬁed analytics and
advertisement libraries from leaving the network premises. In
addition, we show BORDERPATROL’s capability in selectively
preventing undesirable app functions using case studies.
I. INTRODUCTION
Mobile smart-devices are omnipresent not only in a personal
setting but also in business environments. To accommodate
for this reality, corporations increasingly implement so-called
Bring Your Own Device (BYOD) processes that allow employ-
ees to access corporate data and applications (apps) on their
personal smart-devices. However, corporate priorities, such
as protecting intellectual property or preventing data leaks,
frequently differ from the priorities of users.
It is therefore customary for corporations to enforce re-
strictions on which apps are allowed to run on a mobile
device or what network properties the device is allowed to
access. Such restrictions allow companies to prevent apps
deemed unwanted or dangerous from executing while the
device is in the corporate network. Widespread solutions
often include commercial device management products such as
Samsung Knox [1] and software speciﬁc built-in capabilities
such as the Android Device Management (ADM) framework
[2]. However, such policy enforcement systems are prone
to failure in restraining communications that originate from
mobile devices, causing undesirable information ﬂows that
violate company policies. One such example is the news leak
of an Apple iPad prototype [3] through apps that use the Flurry
analytics software [4]. In this case, Flurry aggregated analytics
and geo-location data from apps which included the Flurry
library, and identiﬁed approximately 50 devices that matched
the hardware characteristics of Apple’s rumored tablet device
at company headquarters well before the ofﬁcial launch.
A straightforward solution to prevent undesirable informa-
tion ﬂow from employee owned devices is to use a BYOD pol-
icy that prevents apps unrelated to the corporate agenda from
executing. Unfortunately, most apps, including those that are
geared towards businesses, are an amalgamation of developer-
authored code and various third party libraries. This poses a
challenge from the perspective of designing a BYOD policy
that will provide selective permeability in access control. That
is, while an app might be in line with the corporate agenda, and
hence should be allowed to execute, the app might be bundled
with libraries that violate the security and privacy goals of
the company. For instance, business apps for word processing
such as Docs To Go [5] often include tracking libraries that
send detailed information about the device for usage analysis
and statistics to the developer.
Preventing communication with network endpoints that the
corporation has identiﬁed to be against its own priorities is
an attractive solution. Unfortunately, this only works for end-
points that are exclusively accessed by unwanted components
of an app, such as known tracker, statistics, or advertisement
libraries. The network trafﬁc that is visible by the corporate
infrastructure does not usually contain sufﬁcient information to
make an informed decision about whether the communication
should be allowed or prohibited. A concrete example is the
Dropbox Android app [6]. This app uses a variety of different
developer-created functionalities which serve two main pur-
poses: (i) login and authentication functionality, and (ii) ﬁle
synchronization with both upload and download functionali-
ties. While all functionalities are necessary for the daily use
of the app, uploading conﬁdential information to non-business
afﬁliated servers might violate the corporate policy.
Companies that adopt BYOD policies are also confronted
with novel regulatory challenges such as the European Union’s
General Data Protection Regulation (GDPR) [7]. GDPR ex-
pressively forbids employees to upload customer data to
third party services unless the company has obtained explicit
consent from the customer. Thus, an ideal BYOD policy for
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00054
460
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
an app should allow authentication and permit ﬁle downloads,
but prevent any uploads. Unfortunately, existing BYOD policy
enforcement mechanisms, such as Samsung KNOX or ADM,
lack the granularity to enforce such a policy as they do not
inspect network connections with respect to the app context,
but merely examine the data residing in IP packets such as
source/destination addresses.
Hence, to enable such ﬂexible BYOD policies, we propose
to augment the network trafﬁc originating from a device with
ﬁne-grained, app-execution context information. This informa-
tion allows a network-based policy enforcement mechanism
to pinpoint what functionalities of an app are responsible for
sending the corresponding trafﬁc. The contextual information
we speciﬁcally leverage is the Java call stack at the time a
network socket is connected. We then embed a compressed
representation of this call stack in the options ﬁeld of the
IP header in network packets. This information allows a policy
engine to easily distinguish different app functions, including
authentication and ﬁle uploads/downloads, and to selectively
prevent undesired functionalities.
To demonstrate the practicality and effectiveness of this
idea, we implemented a prototype of BORDERPATROL on
Android as an example of a BYOD-managed smart de-
vice and provided a policy enforcement mechanism that
integrates seamlessly into Linux’s net-ﬁlter mechanism. We
then evaluated BORDERPATROL on 2,000 apps from Google
Play’s BUSINESS and PRODUCTIVITY categories. BORDERPA-
TROL successfully enforces policies that prevent data leakage
through tracking libraries as well as more ﬁne-grained policies
where a single network endpoint is used for both desired and
potentially harmful purposes. In summary, this paper makes
the following contributions:
• We propose a novel, network-wide, ﬁne-grained pol-
icy enforcement scheme for BYOD devices with a re-
programmable access control framework which is aware
of mobile app contexts.
• We design (§IV) BORDERPATROL, as a system that aug-
ments network trafﬁc originating from BYOD-managed
smart devices with additional contextual
information,
which allows ﬁne-grained policies to be enforced at
the corporate network level. We then implement (§V)
a prototype to demonstrate that BORDERPATROL can
enforce policies with minimal modiﬁcations to existing
systems and at negligible throughput, latency, and per-
formance overheads even when seeking to thousands of
connections.
• We present our ﬁndings from our analysis of 2,000 apps
from the BUSINESS/PRODUCTIVITY categories of Google
Play (§VI) and demonstrate the effectiveness and utility
of BORDERPATROL through case studies (§VI-C).
II. BACKGROUND
As a basis for the details of our proposed system, BORDER-
PATROL, this section describes Android application packages,
networking subsystem in Linux and protocol speciﬁcations for
IP packets.
461
A. Composition of an Android application
Android apps are distributed as Application Package Kit
(apk) ﬁles. This package includes an app’s compiled code
(commonly compiled from Java source) as well as resources,
assets, certiﬁcates, and manifest ﬁles. The app’s code is stored
in the Dalvik bytecode format in a ﬁle called classes.dex.
Besides the implementation of
the methods in an app,
the Dalvik ﬁle-format also prescribes how to store meta-
information about the app. For our purposes, we are interested
in the class hierarchy, method signatures, and debug informa-
tion contained in a dex ﬁle.
The class hierarchy of a Java app is a graph that rep-
resents the inheritance relationships between classes. Java
programs and APIs frequently bundle related classes in so-
called packages. Within each class, a method is uniquely
identiﬁed by the method’s signature, which consists of the
method’s name and the types of the method’s parameters. In
addition, Java supports method overloading, where within the
same class, multiple methods share a common name but have
a different list of their parameter types, thus have different
method signatures. Hence, a method can be uniquely identiﬁed
within an app by the method’s signature. In addition, the
Dalvik format contains provisions to store debug information
along with the byte-code to easily determine and debug the
source of an exception in stack traces. This information can
map individual byte-code instructions to the source ﬁle and
line number of the Java code that produced the dex ﬁle.
B. Networking in Linux and Java
1) Sockets: A socket is one of the most central aspects
of networking in Linux (and Android) as well as in Java.
Any network communication in Linux will commence with a
socket system call, and the system call’s return value (a ﬁle
descriptor) uniquely identiﬁes the socket within a given pro-
cess. This requirement holds true independently of whether an
Android app establishes a network connection from managed
Dalvik code or whether it uses native code. While Java also
provides a java.net.Socket type, the behavior of Java’s
socket method call and the native socket system call are
slightly different. Speciﬁcally, the Dalvik virtual machine uses
a lazy initialization of operating system sockets, where it only
issues a socket system call when the app either connects or
binds to the socket. Hence, a call to the java.net.Socket
default constructor (i.e., the overloaded constructor without
arguments) does not result in a socket system call. However,
a subsequent call to connect or bind will automatically
issue a socket system call before connecting or binding to
the socket.
2) IP options: RFC 791 [8] prescribes that IP packet
headers can include an optional ﬁeld called IP_OPTIONS,
which can contain up to 40 bytes of data, including one byte
each for the option’s type and length in bytes. The Linux kernel
supports setting these options via the setsockopt system
call. However, besides a few well-known options (e.g., the
timestamp option used by the ping network utility), the
kernel requires administrative privileges (i.e. CAP_NET_RAW)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
to conﬁgure the IP_OPTIONS header ﬁeld. Similar to the
socket discussion above, Java also provides a setOption
API for sockets. Unfortunately, however, this API restricts
what values will be passed to the underlying setsockopt
system call and excludes the value to enable IP_OPTIONS.
III. THREAT MODEL AND ASSUMPTIONS
Our threat model is based on a business environment where
a company uses BYOD policies that allow employees to
use their personal mobile devices to access company owned
services and data. To ensure that personal devices do not cause
harm to the company’s network or assets, personal devices
have to be provisioned with a BYOD solution. Similar to the
kernel instrumentation of Samsung KNOX [9], these solutions
often include vendor-speciﬁc Read Only Memory (ROM),
therefore vendors can integrate necessary changes for different
frameworks. Hence, a production-level system would not need
any modiﬁcations on user devices other than the provisioning.
Following the common practice, work and private applications
are separated and root access is disabled in the device by
the BYOD framework, which can prevent the rooting process
through a hardware-backed chain of trust via Trusted Platform
Module and e-fuses [10]. Furthermore, we assume that the
enterprise network consists of secured network appliances and
previously authenticated devices.
With this business-centric mindset and technology in place,
we target a scenario where company-approved applications
contain highly desirable functionalities for productivity while
also containing features that are detrimental to business in-
terests. This detrimental functionality originates from either
(i) developer-authored application functionality that the busi-
ness does not wish to allow (e.g., ﬁle upload), or (ii) third party
libraries that are linked into the application (e.g., tracking and
advertisement libraries) and violate the business information
security policies of the company.
We further assume the operating system on employees’ de-
vices is trusted. Similarly, despite the detrimental functionality,
our threat model assumes that applications are benign in nature
but violate the company’s information security policy via app
functionalities or packaged libraries. Speciﬁcally, we assume
that applications do not actively try to circumvent our system.
As our system predominantly relies on dynamic analysis,
“light” obfuscation, such as the transformations performed by
ProGuard, are transparently tolerated. While more advanced
obfuscation techniques might thwart our system, we argue
that such obfuscation should rarely, if ever, occur in benign
applications. Importantly, despite the benign nature of the
applications we consider, our system does not require access
to the application’s source code (i.e., the system is compatible
with the regular app store distribution model).
IV. SYSTEM OVERVIEW
Our goal is to detect and drop network packets originating
from undesired application functionalities (e.g., ﬁle uploads
and analytics collection) to ensure an execution- and context-
aware policy enforcement for BYOD environments. Tradi-
tional policy enforcement systems focus on network trafﬁc
ﬂow without taking application state into account, which pre-
vents access control with ﬁne-grained rules. Although network
administrators can ﬁne-tune an access control scheme for
certain cases (e.g. preventing packet ﬂows to a speciﬁc IP), the
enforcement system should be ﬂexible enough for changing
company requirements in terms of policy management and
access-control. Additionally, inspecting application state on
user devices and enforcing policies at network perimeter
requires separate modules. Therefore, communication between