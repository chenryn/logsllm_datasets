        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }
**主动调用模块设计**
`FART`中的主动调用模块的设计，参考了`jni`桥的源码设计，`jni`提供了一系列`java`层函数与`Native`层函数交互的接口。当需要在`Native`层中的`c/c++`函数中调用位于`java`层的函数时，需要先获取到该函数的`jmethodid`然后再通过诸如`jni`中提供的`call`开头的一系列函数来完成对`java`层中函数的调用。
作者以`jni`中的`CallObjectMethod`函数为例，阐述该函数如何将参数转化成指针、进而层层深入、最终完成调用的，是`ArtMethod`类中的`Invoke`函数完成对`java`层中的函数的调用。
于是，作者构造出自己的`invoke`函数，在该函数中再调用`ArtMethod`的`Invoke`方法从而完成主动调用，并在`ArtMethod`的`Invoke`函数中首先进行判断，当发现是我们自己的主动调用时就进行方法体的`dump`并直接返回，从而完成对壳的欺骗，达到方法体的`dump`。
具体体现在代码上，主动调用就体现到这里了：`appClassloader.loadClass(eachclassname);`
  * 加壳程序`hook`了加载类的方法，当真正执行时加载类的时候会进行还原，这个加载类相当于隐式加载。
  * 我们这里`loadClass`是显示加载所有的类，这时候类的方法已经被还原。
  * `loadClassAndInvoke`，首先通过`loadClass`来主动加载所有类，然后调用`dumpMethodCode`来进行脱壳，参数为`Method`或者`Constructor`对象。
    public static void loadClassAndInvoke(ClassLoader appClassloader, String eachclassname, Method dumpMethodCode_method) {
        Class resultclass = null;
        try {
            ////主动加载dex中的所有类，此时Method数据已解密
            resultclass = appClassloader.loadClass(eachclassname);
        } catch (Exception e) {
            e.printStackTrace();
            return;
        } catch (Error e) {
            e.printStackTrace();
            return;
        }
        if (resultclass != null) {
            try {
                Constructor cons[] = resultclass.getDeclaredConstructors();
                for (Constructor constructor : cons) {
                    if (dumpMethodCode_method != null) {
                        try {
                            ////调用DexFile中dumpMethodCode方法，参数为Constructor对象
                            dumpMethodCode_method.invoke(null, constructor);
                        } catch (Exception e) {
                            e.printStackTrace();
                            continue;
                        } catch (Error e) {
                            e.printStackTrace();
                            continue;
                        }
                    } else {
                        Log.e("ActivityThread", "dumpMethodCode_method is null ");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } catch (Error e) {
                e.printStackTrace();
            }
            try {
                Method[] methods = resultclass.getDeclaredMethods();
                if (methods != null) {
                    ////调用DexFile中dumpMethodCode方法，参数为Method对象
                    for (Method m : methods) {
                        if (dumpMethodCode_method != null) {
                            try {
                                dumpMethodCode_method.invoke(null, m);
                                } catch (Exception e) {
                                e.printStackTrace();
                                continue;
                            } catch (Error e) {
                                e.printStackTrace();
                                continue;
                            }
                        } else {
                            Log.e("ActivityThread", "dumpMethodCode_method is null ");
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } catch (Error e) {
                e.printStackTrace();
            }
        }
    }
    //add
**方法体`dump`模块**
接下来则是在`art_method`中的`dumpMethodCode`部分，首先在`framework`层的`DexFile`类中添加个`Native`函数供调用，在文件`libcore/dalvik/src/main/java/dalvik/system/DexFile.java`中
    private static native void dumpMethodCode(String eachclassname, String methodname,Object cookie, Object method);
下面开始代码部分。在`/art/runtime/native/dalvik_system_DexFile.cc`的另一个`Native`函数`DexFile_dumpMethodCode`中添加如下代码：
    //addfunction
    static void DexFile_dumpMethodCode(JNIEnv* env, jclass,jobject method) {
      if(method!=nullptr)
      {
              ArtMethod* proxy_method = jobject2ArtMethod(env, method);
              myfartInvoke(proxy_method);
          }     
      return;
    }
    //addfunction
可以看到代码非常简洁，首先是对`Java`层传来的`Method`结构体进行了类型转换，转成`Native`层的`ArtMethod`对象，接下来就是调用`ArtMethod`类中`myfartInvoke`实现虚拟调用，并完成方法体的`dump`。下面看`ArtMethod.cc`中添加的函数`myfartInvoke`的实现主动调用的代码部分，具体修改的文件是`art_method.cc`：
    extern "C" void myfartInvoke(ArtMethod* artmethod)  REQUIRES_SHARED(Locks::mutator_lock_) {
        JValue *result=nullptr;
        Thread *self=nullptr;
        uint32_t temp=6;
        uint32_t* args=&temp;
        uint32_t args_size=6;
        artmethod->Invoke(self, args, args_size, result, "fart");
    }
这里代码依然很简洁，只是对`ArtMethod`类中的`Invoke`的一个调用包装，不同的是在参数方面，我们直接给`Thread*`传递了一个`nullptr`，作为对主动调用过来的标识。下面看`ArtMethod`类中的`Invoke`函数：
    ...
    void ArtMethod::Invoke(Thread* self, uint32_t* args, uint32_t args_size, JValue* result,
                           const char* shorty) {
            if (self== nullptr) {
            dumpArtMethod(this);
            return;
            }
      if (UNLIKELY(__builtin_frame_address(0) GetStackEnd())) {
        ThrowStackOverflowError(self);
        return;
      }
      ...
该函数只是在最开头添加了对`Thread*`参数的判断，当发现该参数为`nullptr`时，即表示是我们自己构造的主动调用链到达，则此时调用`dumpArtMethod()`函数完成对该`ArtMethod`的`CodeItem`的`dump`，这部分代码和`fupk3`一样直接采用`dexhunter`里的，这里不再赘述。
    extern "C" void dumpArtMethod(ArtMethod* artmethod)  REQUIRES_SHARED(Locks::mutator_lock_) {
                char *dexfilepath=(char*)malloc(sizeof(char)*1000);    
                if(dexfilepath==nullptr)
                {
                    LOG(ERROR) PrettyMethod().c_str()0)
                {
                    result=read(fcmdline, szProcName,256);
                    if(resultGetDexFile();
                          const uint8_t* begin_=dex_file->Begin();  // Start of data.
                          size_t size_=dex_file->Size();  // Length of data.
                          memset(dexfilepath,0,1000);
                          int size_int_=(int)size_;
                ...
                ...
    }
到这里，我们就完成了内存中`DexFile`结构体中的`dex`的整体`dump`以及主动调用完成对每一个类中的函数体的`dump`，下面就是修复被抽取的函数部分。
###  第三组件：函数体填充
壳在完成对内存中加载的`dex`的解密后，该`dex`的索引区即`stringid`，`typeid`，`methodid`，`classdef`和对应的`data`区中的`string`列表并未加密。
而对于`classdef`中类函数的`CodeItem`部分可能被加密存储或者直接指向内存中另一块区域。这里我们只需要使用`dump`下来的`method`的`CodeItem`来解析对应的被抽取的方法即可，这里大佬提供了一个用`python`实现的修复脚本，该脚本的`decode`部分与`art_method.cc`中的`encode`部分是相对应的，下面是`encode`部分的代码：
    //add
    uint8_t* codeitem_end(const uint8_t **pData)
    {
        uint32_t num_of_list = DecodeUnsignedLeb128(pData);
        for (;num_of_list>0;num_of_list--) {
            int32_t num_of_handlers=DecodeSignedLeb128(pData);
            int num=num_of_handlers;
            if (num_of_handlers 0; num--) {
                DecodeUnsignedLeb128(pData);
                DecodeUnsignedLeb128(pData);
            }
            if (num_of_handlers>2];  
            res[i+1]=base64_table[(str[j]&0x3)>4)]; 
            res[i+2]=base64_table[(str[j+1]&0xf)>6)]; 
            res[i+3]=base64_table[str[j+2]&0x3f]; 
        }  
        switch(str_len % 3)  
        {  
            case 1:  
                res[i-2]='=';  
                res[i-1]='=';  
                break;  
            case 2:  
                res[i-1]='=';  
                break;  
        }  
        return res;  
        }
    //addend
至于`fart.py`的那两千多行代码，主要就是看那几个类即可，无非是各种`parser`的叠加和组合。
感觉不一定要用`py`写，如果用[`dexlib2`](https://github.com/JesusFreke/smali/tree/master/dexlib2)之类的库可以更加方便，甚至直接合成`dex`，有心人可以玩一玩。
虽然大家没有`8.1.0`的源码，但是其实大佬公开的`6.0`的源码原理也是一模一样的，欢迎大家使用`FART`脱壳机，并且跟我们多多交流哈。