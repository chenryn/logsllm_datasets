另一方面，如果这个资料库中有著大量记录，则这个 `db_get` 函式的效能会非常糟糕。每次你想查询一个键时，`db_get` 必须从头到尾扫描整个资料库档案来查询键的出现。用演算法的语言来说，查询的开销是 `O(n)` ：如果资料库记录数量 n 翻了一倍，查询时间也要翻一倍。这就不好了。
为了高效查询资料库中特定键的值，我们需要一个数据结构：**索引（index）**。本章将介绍一系列的索引结构，并在它们之间进行比较。索引背后的大致思想是透过储存一些额外的元资料作为路标来帮助你找到想要的资料。如果你想以几种不同的方式搜寻同一份资料，那么你也许需要在资料的不同部分上建立多个索引。
索引是从主资料衍生的 **额外的（additional）** 结构。许多资料库允许新增与删除索引，这不会影响资料的内容，而只会影响查询的效能。维护额外的结构会产生开销，特别是在写入时。写入效能很难超过简单地追加写入档案，因为追加写入是最简单的写入操作。任何型别的索引通常都会减慢写入速度，因为每次写入资料时都需要更新索引。
这是储存系统中一个重要的权衡：精心选择的索引加快了读查询的速度，但是每个索引都会拖慢写入速度。因为这个原因，资料库预设并不会索引所有的内容，而需要你，也就是程式设计师或资料库管理员（DBA），基于对应用的典型查询模式的了解来手动选择索引。你可以选择那些能为应用带来最大收益而且又不会引入超出必要开销的索引。
### 杂凑索引
让我们从 **键值资料（key-value Data）** 的索引开始。这不是你可以索引的唯一资料型别，但键值资料是很常见的。在引入更复杂的索引之前，它是重要的第一步。
键值储存与在大多数程式语言中可以找到的 **字典（dictionary）** 型别非常相似，通常字典都是用 **杂凑对映（hash map）** 或 **散列表（hash table）** 实现的。杂凑对映在许多演算法教科书中都有描述【1,2】，所以这里我们不会讨论它的工作细节。既然我们已经可以用杂凑对映来表示 **记忆体中** 的资料结构，为什么不使用它来索引 **硬碟上** 的资料呢？
假设我们的资料储存只是一个追加写入的档案，就像前面的例子一样，那么最简单的索引策略就是：保留一个记忆体中的杂凑对映，其中每个键都对映到资料档案中的一个位元组偏移量，指明了可以找到对应值的位置，如 [图 3-1](../img/fig3-1.png) 所示。当你将新的键值对追加写入档案中时，还要更新杂凑对映，以反映刚刚写入的资料的偏移量（这同时适用于插入新键与更新现有键）。当你想查询一个值时，使用杂凑对映来查询资料档案中的偏移量，**寻找（seek）** 该位置并读取该值即可。
![](../img/fig3-1.png)
**图 3-1 以类 CSV 格式储存键值对的日志，并使用记忆体杂凑对映进行索引。**
听上去简单，但这是一个可行的方法。现实中，Bitcask 实际上就是这么做的（Riak 中预设的储存引擎）【3】。Bitcask 提供高效能的读取和写入操作，但要求所有的键必须能放入可用记忆体中，因为杂凑对映完全保留在记忆体中。而资料值可以使用比可用记忆体更多的空间，因为可以在硬碟上透过一次硬碟查询操作来载入所需部分，如果资料档案的那部分已经在档案系统快取中，则读取根本不需要任何硬碟 I/O。
像 Bitcask 这样的储存引擎非常适合每个键的值经常更新的情况。例如，键可能是某个猫咪影片的网址（URL），而值可能是该影片被播放的次数（每次有人点选播放按钮时递增）。在这种型别的工作负载中，有很多写操作，但是没有太多不同的键 —— 每个键有很多的写操作，但是将所有键储存在记忆体中是可行的。
到目前为止，我们只是在追加写入一个档案 —— 所以如何避免最终用完硬碟空间？一种好的解决方案是，将日志分为特定大小的 **段（segment）**，当日志增长到特定尺寸时关闭当前段档案，并开始写入一个新的段档案。然后，我们就可以对这些段进行 **压缩（compaction）**，如 [图 3-2](../img/fig3-2.png) 所示。这里的压缩意味著在日志中丢弃重复的键，只保留每个键的最近更新。
![](../img/fig3-2.png)
**图 3-2 键值更新日志（统计猫咪影片的播放次数）的压缩，只保留每个键的最近值**
而且，由于压缩经常会使得段变得很小（假设在一个段内键被平均重写了好几次），我们也可以在执行压缩的同时将多个段合并在一起，如 [图 3-3](../img/fig3-3.png) 所示。段被写入后永远不会被修改，所以合并的段被写入一个新的档案。冻结段的合并和压缩可以在后台执行绪中完成，这个过程进行的同时，我们仍然可以继续使用旧的段档案来正常提供读写请求。合并过程完成后，我们将读取请求转换为使用新合并的段而不是旧的段 —— 然后旧的段档案就可以简单地删除掉了。
![](../img/fig3-3.png)
**图 3-3 同时执行压缩和分段合并**
每个段现在都有自己的记忆体散列表，将键对映到档案偏移量。为了找到一个键的值，我们首先检查最近的段的杂凑对映；如果键不存在，我们就检查第二个最近的段，依此类推。合并过程将保持段的数量足够小，所以查询过程不需要检查太多的杂凑对映。
要让这个简单的想法在实际中能工作会涉及到大量的细节。简单来说，下面几点都是实现过程中需要认真考虑的问题：
* 档案格式
  CSV 不是日志的最佳格式。使用二进位制格式更快，更简单：首先以位元组为单位对字串的长度进行编码，然后是原始的字串（不需要转义）。
* 删除记录
  如果要删除一个键及其关联的值，则必须在资料档案中追加一个特殊的删除记录（逻辑删除，有时被称为墓碑，即 tombstone）。当日志段被合并时，合并过程会透过这个墓碑知道要将被删除键的所有历史值都丢弃掉。
* 崩溃恢复
  如果资料库重新启动，则记忆体杂凑对映将丢失。原则上，你可以透过从头到尾读取整个段档案并记录下来每个键的最近值来恢复每个段的杂凑对映。但是，如果段档案很大，可能需要很长时间，这会使服务的重启比较痛苦。Bitcask 透过将每个段的杂凑对映的快照储存在硬碟上来加速恢复，可以使杂凑对映更快地载入到记忆体中。
* 部分写入记录
  资料库随时可能崩溃，包括在将记录追加到日志的过程中。Bitcask 档案包含校验和，允许检测和忽略日志中的这些损坏部分。
* 并发控制
  由于写操作是以严格的顺序追加到日志中的，所以常见的实现是只有一个写入执行绪。也因为资料档案段是仅追加的或者说是不可变的，所以它们可以被多个执行绪同时读取。
乍一看，仅追加日志似乎很浪费：为什么不直接在档案里更新，用新值覆盖旧值？仅追加的设计之所以是个好的设计，有如下几个原因：
* 追加和分段合并都是顺序写入操作，通常比随机写入快得多，尤其是在磁性机械硬碟上。在某种程度上，顺序写入在基于快闪记忆体的 **固态硬碟（SSD）** 上也是好的选择【4】。我们将在“[比较 B 树和 LSM 树](#比较B树和LSM树)”中进一步讨论这个问题。
* 如果段档案是仅追加的或不可变的，并发和崩溃恢复就简单多了。例如，当一个数据值被更新的时候发生崩溃，你不用担心档案里将会同时包含旧值和新值各自的一部分。
* 合并旧段的处理也可以避免资料档案随著时间的推移而碎片化的问题。