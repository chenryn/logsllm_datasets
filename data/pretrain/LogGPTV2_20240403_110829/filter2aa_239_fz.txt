Date属性。利用Date属性，通过绑定定义一个StringFormat。把ItemsSource属性绑定到
Races.Value上，来定义层次结构中的下一层。
因为F1RaceResult类没有子集合，所以层次结构到此为止。对于这个数据类型，定义
一个正常的DataTemplate，来绑定Position、Racer和Car属性（代码文件
Formula1Demo/Controls/TreeUC.xaml）：
下面是填充分层控件的代码。在XAML代码的代码隐藏文件中，把DataContext赋予
Years属性。Years属性使用一个GetYears辅助方法中定义的LINQ查询，来获取数据库中所
有一级方程式比赛的年份，并为每个年份新建一个Championship对象。通过Championship
类的实例设置Year属性。这个类也有一个Races属性，可返回该年份的比赛信息，但这些
信息还没有填充（代码文件Formula1Demo/TreeUC.xaml.cs）。
  注意： LINQ参见第13章和第38章。
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows.Controls;
    namespace Formula1Demo
    {
      public partial class TreeUC : UserControl
      {
        public TreeUC()
        {
        InitializeComponent();
        this.DataContext = Years;
        }
        private List _years;
        private List GetYears()
        {
        using (var data = new Formula1Context())
        {
          return data.Races.Select(r => new Championship
          {
          Year = r.Date.Year
          }).Distinct().OrderBy(c => c.Year).ToList();
        }
        }
        public IEnumerable Years => _years ? ? (_years = GetYears()
);
      }
    }
Championship类有一个用于返回年份的简单的自动属性。Races属性的类型是
Lazy>。Lazy类是.NET 
4新增的，用于懒惰初始化。对于
TreeView控件，这个类非常方便。如果表达式树中的数据非常多，且不希望提前加载整个
表达式树，但仅在用户做出选择时加载，就可以使用懒惰加载方式。在Lazy类的构造
函数中使用Func>委托。在这个委托中，需要返回
IEnumerable。赋予该委托的lambda表达式的实现方式使用一个LINQ查询，来创
建一个F1Race对象列表，并指定它们的Date和Country属性（代码文件
Formula1Demo/Championship.cs）：
    public class Championship
    {
      public int Year { get; set; }
      private IEnumerable GetRaces()
      {
        using (var context = new Formula1Context())
        {
        return (from r in context.Races
                where r.Date.Year == Year
                orderby r.Date
                select new F1Race
                {
                  Date = r.Date,
                  Country = r.Circuit.Country
                }).ToList();
        }
      }
      public Lazy> Races =>
        new Lazy>(() => GetRaces());
    }
F1Race类也定义了Results属性，该属性使用Lazy类型返回一个F1RaceResult对象
列表（代码文件Formula1Demo/Championship.cs）：
      public class F1Race
      {
        public string Country { get; set; }
        public DateTime Date { get; set; }
        private IEnumerable GetResults()
        {
          using (var context = new Formula1Context())
          {
          return (from rr in context.RaceResults
                  where rr.Race.Date == this.Date
                  select new F1RaceResult
                  {
                    Position = rr.Position,
                    Racer = rr.Racer.FirstName + " " + rr.Racer.LastName,
                    Car = rr.Team.Name
                  }).ToList();
          }
        }
        public Lazy> Results =>
          new Lazy>(() => GetResults());
      }
层次结构中的最后一个类是F1RaceResult，它是Position、Racer和Car的简单数据存储
器（代码文件Formula1Demo/Championship.cs）：
    public class F1RaceResult
    {
      public int Position { get; set; }
      public string Racer { get; set; }
      public string Car { get; set; }
    }
运行应用程序，首先会在树型视图中看到所有年份的冠军。因为使用了绑定，所以也
访问了下一层——每个Championship对象已经关联到F1Race对象。用户不需要等待，就可
以看到年份下面的第一级，也不需要使用默认显示的小三角形来打开某个年份的信息。图
34-27打开了1984年的信息。只要用户单击某个年份，就会看到第二级绑定，第三级也绑
定了，并检索出比赛结果。
图34-27
当然也可以定制TreeView控件，并为整个模板或视图中的项定义不同的样式。
34.9 DataGrid
通过DataGrid控件，可以把信息显示在行和列中，还可以编辑它们。DataGrid控件是
一个ItemsControl，定义了绑定到集合上的ItemsSource属性。这个用户界面的XAML代码
也定义了两个RepeatButton控件，用于实现分页功能。这里不是一次加载所有比赛信息，
而是使用分页功能，这样用户就可以翻看各个页面。在简单的场景中，只需要指定
DataGrid的ItemsSource属性。默认情况下，DataGrid会根据绑定数据的属性来创建列（代
码文件Formula1Demo/Controls/GridUC.xaml）：
        Previous
        Next
        Previous
        Next
代码隐藏使用与前面TreeView示例相同的Formula1数据库。把UserControl的
DataContext设置为Races属性。这个属性返回IEnumerable。这里不指定强类型化
的枚举，而使用一个object，以通过LINQ查询创建一个匿名类。该LINQ查询使用Year、
Country、Position、Racer和Car属性创建匿名类，并使用复合语句访问Races和RaceResults
属性。它还访问Races的其他关联属性，以获取国籍、赛手和团队信息。使用Skip（）和
Take（）方法实现分页功能。页面的大小固定为50项，当前页面使用OnNext和OnPrevious
处理程序来改变（代码文件Formula1Demo/Controls/GridUC.xaml.cs）：
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows;
    using System.Windows.Controls;
    namespace Formula1Demo
    {
      public partial class GridUC : UserControl
      {
        private int _currentPage = 0;
        private int _pageSize = 50;
        public GridUC()
        {
        InitializeComponent();
        this.DataContext = Races;
        }
        private IEnumerable GetRaces()
        {
        using (var data = new Formula1Context())
        {
          return (from r in data.Races
                  from rr in r.RaceResults
                  orderby r.Date ascending
                  select new
                  {
                  r.Date.Year,
                  r.Circuit.Country,
                  rr.Position,
                  Racer = rr.Racer.FirstName + " " + rr.Racer.LastName,
                  Car = rr.Team.Name
                  }).Skip(_currentPage ＊ _pageSize).Take(_pageSize).ToList();
        }
        }
        public IEnumerable Races => GetRaces();
        private void OnPrevious(object sender, RoutedEventArgs e)
        {
        if (_currentPage > 0)
        {
          _currentPage--;
          this.DataContext = Races;
        }
        }
        private void OnNext(object sender, RoutedEventArgs e)
        {
        _currentPage++;
        this.DataContext = Races;
        }
      }
    }
图34-28显示了正在运行的应用程序，其中使用了默认的网格样式和标题。
图34-28
在下一个DataGrid示例中，用自定义列和组合来定制网格。
34.9.1 自定义列
把DataGrid的AutoGenerateColumns属性设置为False，就不会生成默认的列。使用
Columns属性可以创建自定义列。还可以指定派生自DataGridColumn的元素，也可以使用
预定义的类。DataGridTextColumn可以用于读取和编辑文本。DataGridHyperlinkColumn可
显示超链接。DataGrid-CheckBoxColumn可给布尔数据显示复选框。如果某列有一个项列
表，就可以使用DataGridCombo-BoxColumn。将来会有更多的DataGridColumn类型，但如
果现在就需要其他表示方式，可以使用DataGridTempalteColumn定义并绑定任意需要的元
素。
下面的示例代码使用DataGridTextColumn来绑定到Position和Racer属性。把Header属
性设置为要显示的字符串，当然也可以使用模板给列定义完全自定义的标题（代码文件
Formula1Demo/Controls/GridCustomUC.xaml.cs）：
34.9.2 行的细节
选择一行时，DataGrid可以显示该行的其他信息。为此，需要指定DataGrid的
RowDetailsTemplate。把一个DataTemplate赋予这个RowDetailsTemplate，其中包含几个显
示汽车和赛点的TextBlock元素（代码文件
Formula1Demo/Controls/GridCustomUC.xaml）：
34.9.3 用DataGrid进行分组
一级方程式比赛有几行包含相同的信息，如年份和国籍。对于这类数据，可以使用分
组功能，给用户组织信息。
对于分组功能，可以在XAML代码中使用CollectionViewSource来支持分组、排序和
筛选功能。在代码隐藏中，也可以使用ListCollectionView类，它仅由CollectionViewSource
使用。
CollectionViewSource在Resources集合中定义。CollectionViewSource的源是
ObjectDataProvider的结果。ObjectDataProvider调用F1Races类型的GetRaces（）方法。这
个方法有两个int参数，它们从MethodParameters集合中指定。CollectionViewSource给分组
使用了两个描述，分别用于Year属性和Country属性（代码文件
Formula1Demo/Controls/GridGroupingUC.xaml）：
        0
        20
这里显示的组使用DataGrid的GroupStyle属性定义。对于GroupStyle元素，需要自定义
ContainerStyle、HeaderTemplate和整个面板。为了动态选择GroupStyle和HeaderStyle，还
可以编写一个容器样式选择器和一个标题模板选择器。它们的功能非常类似于前面的数据
模板选择器。
示例中的GroupStyle设置了GroupStyle的ContainerStyle属性。在这个样式中，用模板