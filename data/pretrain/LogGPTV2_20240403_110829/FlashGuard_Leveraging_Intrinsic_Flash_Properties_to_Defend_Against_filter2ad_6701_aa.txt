title:FlashGuard: Leveraging Intrinsic Flash Properties to Defend Against
Encryption Ransomware
author:Jian Huang and
Jun Xu and
Xinyu Xing and
Peng Liu and
Moinuddin K. Qureshi
FlashGuard: Leveraging Intrinsic Flash Properties
to Defend Against Encryption Ransomware
Georgia Institute of Technology
Pennsylvania State University
Jian Huang
Atlanta, GA
PI:EMAIL
Jun Xu
University Park, PA
PI:EMAIL
Xinyu Xing
Pennsylvania State University
University Park, PA
PI:EMAIL
Peng Liu
Pennsylvania State University
University Park, PA
PI:EMAIL
Moinuddin K. Qureshi
Georgia Institute of Technology
Atlanta, GA
PI:EMAIL
ABSTRACT
Encryption ransomware is a malicious software that stealthily en-
crypts user files and demands a ransom to provide access to these
files. Several prior studies have developed systems to detect ran-
somware by monitoring the activities that typically occur during a
ransomware attack. Unfortunately, by the time the ransomware is
detected, some files already undergo encryption and the user is still
required to pay a ransom to access those files. Furthermore, ran-
somware variants can obtain kernel privilege, which allows them
to terminate software-based defense systems, such as anti-virus.
While periodic backups have been explored as a means to mitigate
ransomware, such backups incur storage overheads and are still
vulnerable as ransomware can obtain kernel privilege to stop or de-
stroy backups. Ideally, we would like to defend against ransomware
without relying on software-based solutions and without incurring
the storage overheads of backups.
To that end, this paper proposes FlashGuard, a ransomware-
tolerant Solid State Drive (SSD) which has a firmware-level recov-
ery system that allows quick and effective recovery from encryp-
tion ransomware without relying on explicit backups. FlashGuard
leverages the observation that the existing SSD already performs
out-of-place writes in order to mitigate the long erase latency of
flash memories. Therefore, when a page is updated or deleted, the
older copy of that page is anyway present in the SSD. FlashGuard
slightly modifies the garbage collection mechanism of the SSD to
retain the copies of the data encrypted by ransomware and ensure
effective data recovery. Our experiments with 1,447 manually la-
beled ransomware samples show that FlashGuard can efficiently
restore files encrypted by ransomware. In addition, we demonstrate
that FlashGuard has a negligible impact on the performance and
lifetime of the SSD.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134035
CCS CONCEPTS
• Security and privacy → systems security; hardware security;
KEYWORDS
Encryption ransomware; solid-state drive; data recovery
1 INTRODUCTION
Recently, criminals are unleashing brash attacks on users’ machines
through a new type of malicious software called encryption ran-
somware [34, 36, 53]. For example, the WannaCry ransomware [53]
launched on May 12, 2017 (one week before the CCS submission
deadline) has infected more than 230,000 computers across 150
countries. Among the victims are government agencies, schools,
hospitals, and police departments.
Different from traditional malware which typically disrupts com-
puter operations and gathers sensitive information, encryption
ransomware stealthily encrypts the files on user’s machine and
demands users pay a ransom to restore the files. Since the opera-
tions performed by ransomware are indistinguishable from benign
software, ransomware can easily bypass various antivirus, making
it increasingly prevalent in cyber criminals [30, 46]. According to a
study from IBM Security [17], the number of users who came across
encryption ransomware in 2016 increased by more than 6,000% over
the previous year. The ransomware attacks cost their victims about
a billion dollars in 2016 which is a 41x increase compared to the
cost in all of 2015 [13].
To counteract ransomware, researchers have proposed several
detection systems that use file access patterns [19, 44] or features
of cryptographic algorithms [9] to identify ransomware. However,
these detection mechanisms still cannot prevent ransomware from
locking up user data. First, existing ransomware detection occurs
only after observing the actual damage. Given that the encrypted
data may contain the files considered to be valuable, victims still
have to shoulder the burden of paying the ransom. Second, some
ransomware can run with administrator privileges, which allow
them to load kernel code and carry out kernel-level attacks. Given
that the existing defense systems typically run within the kernel,
ransomware can easily disable or work around the aforementioned
detection mechanisms.
To address these issues, one instinctive solution would be to en-
able file backup on local persistent storage (e.g., journaling and log-
structured file systems [32, 40]) or remote machines (e.g., NFS [31]
and cloud-based storage [12, 51]). However, this is insufficient at
guarding against ransomware. First, any file backup mechanisms
inevitably impose storage overhead. Second, ransomware may find
and jump to the backup and encrypt it regardless of whether it is
on shared network drives, local hard disk drives, external storage
devices, or plugged-in USB sticks [55]. Third, ransomware with the
kernel privilege can also terminate backup processes, making them
futile against ransomware defense.
As the replacement to conventional persistent storage devices –
hard disk drives (HDDs), Solid-State Drives (SSDs) have been widely
used on many kinds of computing platforms, because they provide
orders of magnitude better performance than HDDs while their
cost is fast approaching to that of HDDs [14, 16, 47, 54]. A unique
property of SSDs is that a physical page cannot be written until it
is erased, however the erase operation incurs significantly longer
latency. To overcome such a shortcoming, modern SSD performs
out-of-place write for every write. Therefore, SSDs intrinsically sup-
port the logging functionality without requiring an explicit backup.
Such a feature will naturally preserve the old copies of overwritten
or deleted files for a period of time before they are reclaimed by
the process of garbage collection. Moreover, the firmware-level log-
ging could isolate the data protection and recovery from operating
system (OS) kernels and upper-layer software.
Unlike existing ransomware detection systems [44, 45] and ex-
plicit file backups [33, 41], we take advantage of the intrinsic flash
properties and build a ransomware-tolerant SSD named FlashGuard,
which has a lightweight hardware-assisted data recovery system. It
allows users to reinstate the data held in captivity by ransomware.
While the proposed system is based on the out-of-place write
characteristic of an SSD, it is challenging to leverage such a fea-
ture for data recovery for two major reasons. First, once data is
deleted or overwritten but gets left behind on the drive, SSD con-
troller may perform garbage collection (GC) to erase the blocks
taken up by such stale data for free space. Given that stale data
may contain the original data copies “deleted” or “overwritten” by
ransomware, FlashGuard needs to hold stale data and prevent GC
from discarding them. Since holding too much stale data could
increase the GC overhead, which further affects the performance
of regular storage operations significantly [3] and even jeopardizes
the SSD lifetime [1], an efficient GC mechanism is desirable. Second,
we must guarantee that the change to the GC is resistant to the
potential attacks against SSDs from the ransomware running with
the kernel or administrator privilege.
To tackle these challenges, we implemented FlashGuard’s data
recovery system in SSD firmware by augmenting GC mechanism
with the ability to only hold the data potentially deleted or over-
written by ransomware. We prototyped FlashGuard on a 1 TB pro-
grammable SSD with minimal modifications to the exiting SSD
design. Using a real world set of 1,477 distinct ransomware samples
covering 13 families, we show FlashGuard can quickly recover the
files held by ransomware. For example, we demonstrate FlashGuard
can restore 4 GB of encrypted data in 30 seconds. Using a set of pub-
licly available storage traces, we extensively evaluated the impact
of FlashGuard upon the storage performance. Our experimental re-
sults show that FlashGuard incurs negligible performance overhead
(up to 6%) and has trivial impact (less than 4%) on SSD lifetime.
To the best of our knowledge, FlashGuard is the first defense
scheme that can efficiently offset the damage of ransomware to
user data even if ransomware run with administrator privileges
to load kernel code or exploits a kernel vulnerability. Overall, this
paper makes the following contributions:
• We conduct a study of more than a thousand ransomware sam-
ples and find meaningful insights on their characteristics of the
encryption time and backup spoliation behavior.
• We propose a ransomware-tolerant SSD, FlashGuard, which has a
firmware-level recovery system to defend against encryption ran-
somware by leveraging the inherent out-of-place write property
in existing SSDs.
• We design and implement FlashGuard in a real programmable
SSD and demonstrate that FlashGuard can rapidly restore en-
crypted data with a large set of ransomware samples.
• We perform extensive evaluations with acknowledged storage
traces collected from different real-world applications and show
that FlashGuard has negligible negative impact on storage per-
formance and SSD lifetime.
The rest of this paper is organized as follows. § 2 characterizes en-
cryption ransomware. § 3 discusses the threat model. We introduce
the background in § 4. § 5 presents the design and implementa-
tion of FlashGuard, followed by its evaluation in § 6. § 7 discusses
the possible attacks against FlashGuard and their solutions. § 8
summarizes the related work. We conclude our work in § 9.
2 RANSOMWARE STUDY
Among various strains of ransomware, encryption ransomware
is the most common type that encrypts user data and demands
money in exchange for decrypting them. The objective of this
work is to design and develop a ransomware-tolerant SSD which
has the data-recovery capability to offset the damage to user data
resulting from encryption ransomware. To achieve this, we first
analyze the behaviors of encryption ransomware and understand
how they interact with user data by conducting a study on a large
number of ransomware samples. Different from prior studies on ran-
somware [19, 20, 44], our study focuses on two aspects – encryption
time and backup spoliation.
2.1 Study Methodology
We gathered 1,477 encryption ransomware samples from VirusTo-
tal [52] and classified them into 13 distinct ransomware families
based on the ransom notes they present to victims. Table 1 illus-
trates these families, their encryption strategies and the number of
samples in each ransomware family.
Following the common scientific guidelines [10], we executed
each ransomware sample within a virtual machine (VM) running
64-bit Windows 7 SP1 with 2 CPU cores and 4 GB main memory on
a host machine (configured with 2.67 GHz Intel quad-core Xeon pro-
cessor and 8 GB DRAM). We removed the barriers of ransomware
1we do not deem Petya ransomware that it deletes backups because Petya demolishes
and replaces Windows file system.
Table 1: Ransomware families, their encryption time, and be-
haviors of deleting backup files (backup spoliation).
Family
Petya1
CTB-Locker
JigSaw
Mobef
Maktub
Stampado
cerber
Locky
7ev3n
TeslaCrypt
HydraCrypt
CryptoFortress
CryptoWall
Total
Samples
Num %
14
119
5
7
10
42
29
344
16
75
13
4
799
1477
0.95
8.05
0.34
0.47
0.68
2.84
1.96
23.29
1.08
5.08
0.88
0.27
54.10
100
Encryption
Target T (mins)
MFT
Files
Files
Files
Files
Files
Files
Files
Files
Files
Files
Files
Files
–
2
14
16
16
22
27
37
43
44
44
70
75
75
–
Backup
spoliation
✮
✗
✗
✗
✓
✗
✓
✓
✓
✓
✓
✓
✓
–
execution by disabling protection services such as firewall, Mi-
crosoft security protection, and user account control. Moreover, we
granted all ransomware samples the administrator privilege. Since
ransomware might perform key-exchange with the control server
and establish those encryption keys used for locking up user data,
we enabled the access to the Internet. However, considering ran-
somware may attempt to propagate themselves, we used a filtered
host-only adapter to control their traffic and minimize their impact
upon the host. After executing each ransomware, we revert the VM
to a clean snapshot.
We conduct two experiments to measure ransomware’s encryp-
tion time and examine whether ransomware attacks backup files
(e.g., Volume Shadow Copies [42]) respectively. We describe their
experimental setups as follows:
Encryption time. We placed a set of files (9,876 files in total)
following the file-type distribution in a normal user’s computer [11]
in each VM. Table 2 shows the distribution of these files covering
more than 18 unique file types. We run each ransomware sample
and use the screenshot method described in [19] to examine their
execution time. Specifically, we detect the changes to the screen of
the virtual machine, screenshot the ransom notifications, and calcu-
late the time it took for a ransomware to encrypt files and display
a message on the screen to notify victim. To avoid false positives,
we disabled Windows notification and manually examined each
screenshotted notification.
Backup spoliation. To determine whether a ransomware also
attacks file backups such as the volume shadow copies, we created
and enclosed several volume shadow copies on VMs. We deem a ran-
somware sample targets at backups if we observe the disappearance
of these shadow copies.
2.2 Our Findings
Table 1 describes how fast ransomware encrypts data and notifies
victim with a ransom screen (the 5th column), and whether ran-
somware attacks file backups (the last column). According to our
study, ransomware typically displays ransom screen immediately
after the encryption (sometimes even before the encryption has
Table 2: File distribution in a normal user’s computer.
Type