0
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0.7
0
0
0
0
0
0
0.5
0
0
0
0
0
0
0
0.6
0
0
0
0
0
0
0
0
0
0
0
0.4
0.7
0
0
0
0
0
0
0
0
0
1
0
0.3
0
0
0
0
0
0
0.2
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0.5
0
0
0
0
0
0
0
0
0
0.1
0
0
1
0
0
0
0
0
0
0
0
0.9
1
0
0
1
1
(2)
ai j in P is corresponding to the probability that transaction
ti transfers to transaction t j.
We can use equation 1 to predict the execution of trans-
actions. (π(0),π(1),π(2),π(3),π(4),π(5),π(6))T will be
0
.8
0
0
0
0
0
0
0
.24
0
0
0
0
0
0
0
.24
0
0
0
0
0
.66
0
0
0
0
0
0
0
.40
0
0
0
0
0
0
.26
0.28
0
0
0
0
0
0
.36
0
0
0
.2
0
0
0
0
0
0
0
.10
0
0
0
0
0
0
0
.10
.02
.03
0
0
0
0
0
.34
.97
1
1
0
0
0
0
0
0
where π(k),0 ≤ k ≤ 6 is the probability distribution in step
k. For example, according to π(4), in the 4th step, the prob-
ability to execute t7 is 0.28 and the probability to execute t8
is 0.36.
(3)
In the above results, if we select transactions with prob-
ability higher than 0.2 in each step, we will get transactions
t1,t2,t3,t5,t4,t6,t7,t8,t11,t12. These transactions cover ex-
actly the paths t1t2t5t7t12, t5t6t7 and t3t4t8 as we advocated
paths at the beginning of Section 3. Practically, the thresh-
old 0.2 in the example should be changed according to the
applications.
The above example demonstrated how to use the DTMC
model to predict the probability of executing a speciﬁc
transaction in each step. Generally, in the kth step of the
execution of a transactional process, after the execution se-
lected a successor t to execute, we select predicted transac-
tions, other than t, with the highest probabilities in π(k) to
execute. The probability of failing prediction will be pretty
low according to the DTMC model.
So far we discussed node coverage in a transac-
tional process.
It will be a little more complicated
Even though set T =
to consider path coverage.
{t1,t2,t3,t5,t4,t6,t7,t8,t11,t12} covers three different paths
that we preferred, T also covers a path t5t6t8t12 in Figure 1.
A problem is if we need to consider these paths separately.
Assume that there are a x = 5 in t5, a x = 3 in t6, and
a y = x + 2 in t7. The path covering t5t7 and the path cov-
ering t5t6t7 will be totally different. In such situation, the
backup execution of t7 should have a different version from
the actual one. The reason that we need different versions
of t7 is that t5 → f t7 and t6 → f t7 and t7 are covered by two
different paths.
The following theorem serves as a general rule to de-
termine if a speciﬁc transaction needs different executing
version in a backup execution.
Theorem 1 If a task t appears in both executing path P1
and P2 and one of P1 and P2 is a backup executing path, the
execution of t will need separate versions for each executing
path if and only if there exist t1 ∈ P1 and t2 ∈ P2 satisfying
the following conditions:
1. t1 (cid:9)= t2
2. t1 /∈ P2 ∧ t2 /∈ P1
3. t1 → f t ∧ t2 → f t
PROOF: If a task t appears in both executing path P1 and P2
and one of P1 and P2 is a backup executing path, the execu-
tion of t will need separate versions for each executing path
if and only the executions of t in different paths generate
different results.
The situation happens if and only if the computation of t
refers to different data values on different paths, which can
be described as ∃t1 ∈ P1,t1 → f t and ∃t2 ∈ P2,t2 → f t. If
t1 = t2 (two execution paths may have common part), t will
generate the same results since the calculation is based on
the same data set. Therefore, t1 must be different from t2.
Otherwise, t cannot generate different results in two paths.
If t1 ∈ P2 or t2 ∈ P1, then t1 or t2 is in the common part of
P1 and P2, there will be no difference for t in two executions
P1 and P2. Therefore, we have t1 /∈ P2 ∧ t2 /∈ P1.
(cid:1)
3.3 Multiple
revision
histories
to
support
multiple-branch execution
Defensive executions generate results from backup ex-
ecutions. The results will be useful if and only if user’s
executing path is discarded. Before the results become use-
ful, they should be cached as temporary versions. We use
multiple revision history to address the problem.
For any data object x written at time tm, we associate tm
with x as its reversion number. We do not call it a timestamp
since we do not perform recovery in real time. We assume
that any two ti and t j, where i (cid:9)= j, are distinguishable in the
system.
A revision history for data object x has a form
(cid:1)xv1 , xv2 ,··· , xvn(cid:2), where each vi,1 ≤ i ≤ n is a revision num-
ber of x and v j is later than vi if j > i. If we know that xvk is
corrupted by the attacker than any transaction that reads xvk
get wrong results.
Please note that it is possible that in x’s revision history,
there is only a speciﬁc version that is corrupted. For exam-
ple, x is generated periodically by a trustable transaction T
and an attacker only corrupts a speciﬁc version of x, e.g.,
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:44 UTC from IEEE Xplore.  Restrictions apply. 
4
xvk. Therefore, we cannot conclude if xv j , where j > k, is
dirty without further analysis.
For a speciﬁc version xvk, when it has a value that it is
not supposed to have, it is dirty. For example, when xvk
is created by an attacker or computed based on dirty data
objects, it is dirty. Otherwise, it is clean.
A data object may have one working history correspond-
ing to the actual executing path and multiple caching his-
tory corresponding to backup executions when necessary
(see Theorem 1).
3.4 Operations on the revision history
A normal transaction reads data objects with the highest
revision number, and it writes data objects with the highest
revision number in their revision histories. So, a revision
history does not change dependency relations among nor-
mal transactions. It operates just as if multiple versions did
not exist.
A recovery transaction, whether it is an undo or redo
transaction, operates on data objects with the same revi-
sion numbers as it used the ﬁrst time it executed. For ex-
ample, a undo(Ti) is implemented by removing all speciﬁc
versions from revision histories of data objects written by Ti.
A redo(Ti) will generate data objects with the same revision
number as it executed ﬁrst time. A revision history does not
change dependency relations among recovery transactions
either. We can consider that recovery transactions are for
revising part of the history of the system.
When we ﬁnd a dirty version xvk, there are two possible
ways that the dirty version was generated. One possibility
is that xvk should not exist at all, e.g, it was created by the
attacker. Any transaction that reads xvk is supposed to read
xvk−1 instead of xvk. Another possibility is that xvk has a dirty
value and needs to be recomputed by a redo transaction.
Any transaction that reads xvk needs to wait until the redo
transaction has completed to get a correct value of xvk. In
this case, we mark xvk as xvk
b to block possible reading until
the redo transaction is complete.
Multi-version data objects break dependency relations
among recovery transactions and normal
transactions,
which enable us to run the recovery transactions and nor-
mal transactions concurrently. According to the structure of
the revision history, operations on old versions happen as