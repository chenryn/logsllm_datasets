原文 
# AST 注入, 从原型污染到RCE
> 本文介绍如何使用一种称为 AST 注入的新技术在两个著名的模板引擎中RCE 。
# AST 注入
[什么是AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree)
NodeJS中的AST  
在NodeJS中，AST经常被在JS中使用，作为template engines
（引擎模版）和[typescript](http://nodejs.cn/learn/typescript)等。对于引擎模版，结构如上图所示⬆️。  
如果在JS应用中存在原型污染漏洞，任何 AST 都可以通过在`Parser(解析器)`或`Compiler(编译器)`过程中插入到函数中。
在这里，你可以在没有过滤、没有经过`lexer(分析器)`或`parser(解析器)`验证的输入(没有被适当的过滤)的情况下插入AST。
然后我们可以向`Parser(编译器)`非预期的输入。
下面就是展示如何实际中在`handlebars`和`pug`使用AST注入执行任意命令
# Handlebars
截止到编辑文章之时，`handlebars`的总下载量为`998,602,213`次。
`handlebars`是除 ejs 之外最常用的`template engine(模板引擎)`。
## 如何探测
    const Handlebars = require('handlebars');
    const source = `Hello {{ msg }}`;
    const template = Handlebars.compile(source);
    console.log(template({"msg": "posix"})); // Hello posix
在开始之前，这是如何在`handlebars`使用模板的方法。
`Handlebar.compile` 函数将字符串转换为模板函数并传递对象因子以供调用。
    const Handlebars = require('handlebars');
    Object.prototype.pendingContent = ``
    const source = `Hello {{ msg }}`;
    const template = Handlebars.compile(source);
    console.log(template({"msg": "posix"})); // Hello posix
在这里，我们可以使用原型污染来影响编译过程。
你可以插入任意字符串`payload`到`Object.prototype.pendingContent`中决定你想要的攻击。
当原型污染存在于黑盒环境中时，这使你可以确认服务器正在使用`handlebars`引擎。
    ...
    appendContent: function appendContent(content) {
        if (this.pendingContent) {
            content = this.pendingContent + content;
        } else {
            this.pendingLocation = this.source.currentLocation;
        }
        this.pendingContent = content;
    },
    pushSource: function pushSource(source) {
        if (this.pendingContent) {
            this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
            this.pendingContent = undefined;
        }
        if (source) {
            this.source.push(source);
        }
    }
    ...
这是由 `javascript-compiler.js`的 `appendContent`函数完成（`appendContent`is
this？）。如果存在 `pendingContent`，则附加到内容并返回。
`pushSource`使 `pendingContent`的值为 `undefined`，防止字符串被多次插入。
## Exploit
`handlebars`的工作原理如上图所示。
在经过`lexer(分析器)`和`parser(解析器)`生成`AST`之后，它传递给 `compiler.js`
这样我们就可以运行带有一些参数的模板函数编译器(template function compiler generated)。
它就会返回像“Hello posix”这样的字符串（当 msg 是 posix 时）。
    case 36:
        this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
        break;
`handlebars` 中的parser(解析器)通过`Number`构造函数强制类型为 `NumberLiteral`的节点的值始终为数字。
然而，在这里你可以使用原型污染去插入一个非数字型的字符串。
    function parseWithoutProcessing(input, options) {
      // Just return if an already-compiled AST was passed in.
      if (input.type === 'Program') {
        return input;
      }
      _parser2['default'].yy = yy;
      // Altering the shared object here, but this is ok as parser is a sync operation
      yy.locInfo = function (locInfo) {
        return new yy.SourceLocation(options && options.srcName, locInfo);
      };
      var ast = _parser2['default'].parse(input);
      return ast;
    }
    function parse(input, options) {
      var ast = parseWithoutProcessing(input, options);
      var strip = new _whitespaceControl2['default'](options);
      return strip.accept(ast);
    }
首先来看编译函数，它支持两种输入方式，`AST 对象`和`模板字符串`。
当 `input.type` 是`Program`时，虽然输入值实际上是字符串。`Parser` 认为它是已经被`parser.js`
解析过的`AST`了，然后将其发送给而`compiler`不做任何处理。
    ...
    accept: function accept(node) {
        /* istanbul ignore next: Sanity code */
        if (!this[node.type]) {
            throw new _exception2['default']('Unknown type: ' + node.type, node);
        }
        this.sourceNode.unshift(node);
        var ret = this[node.type](node);
        this.sourceNode.shift();
        return ret;
    },
    Program: function Program(program) {
        console.log((new Error).stack)
        this.options.blockParams.unshift(program.blockParams);
        var body = program.body,
            bodyLength = body.length;
        for (var i = 0; i < bodyLength; i++) {
            this.accept(body[i]);
        }
        this.options.blockParams.shift();