# 后门混淆和逃避技术
##### 译文声明
本文是翻译文章，文章来源：imperva.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
[后门](https://en.wikipedia.org/wiki/Backdoor_computing)是用于旁路系统的正常认证或加密的方法。有时开发人员会出于各种原因为自己的程序构建后门程序。例如，为了提供简单的维护，开发人员引入了一个后门，使他们能够恢复制造商的默认密码。
另一方面，攻击者经常将后门注入易受攻击的服务器来接管服务器，执行攻击并上传恶意payload。后门为黑客发动进一步攻击铺平了道路。例如，攻击者可能会注入后门，允许他们在受感染的服务器上执行代码或上传文件。此代码和文件将包含实际攻击，其中可能包含不同类型的有效payload，例如从内部数据库窃取数据或运行[加密恶意软件](https://www.imperva.com/resources/resource-library/webinars/protect-web-applications-cryptomining/)。
在这篇博客中，我们将讨论一些攻击者在逃避检测时注入后门的方法。我们将展示在数据中发现的真实后门的示例，以及它们如何使用不同的规避和混淆技术，其中一些非常复杂。
## 后门的类型
有几种后门，用不同的编程语言编写。例如，用PHP编写的后门设计用于在PHP上运行的服务器，而不是用ASP编写的后门用于在.net服务器上运行。
后门的目的可能各不相同，从允许攻击者在受感染机器上运行操作系统命令的Web shell到允许攻击者上载和执行文件的特制后门。
在像GitHub这样的网站上公开有很多开源后门。黑客可以选择注入一个已知的后门，但随后他们很容易被发现。更复杂的黑客创建他们自己的后门或混淆他们使用不同的逃避技术注入的已知后门。
## 常见的安全控制
安全控件可能会尝试使用几种不同的方法来阻止后门。其中之一是在HTTP请求期间阻止后门的初始注入，该请求通常使用已知漏洞注入服务器。另一种方法是在HTTP响应期间分析后门的内容，以查找它是否包含被视为恶意的代码。
这应该不足为奇，因为攻击者在注入这些后门时努力隐藏自己的真实意图。黑客通常使用几种规避技术，包括混淆已知的功能和参数名称以及使用恶意代码的编码。在接下来的部分中，我们将展示用PHP编写的后门，其中攻击者使用不同的技术以避免安全控制检测。
### PHP逃避技术
有许多方法可用于攻击者逃避检测。然而，总体动机是掩盖已知函数或PHP关键字。一些已知的功能和关键字包括：
### 字符重新排序
在此示例中，此页面的可视输出是众所周知的“404 Not
Found”消息（第2行），这可能表示错误。但是，此页面中有一个嵌入式后门代码（第3-13行）。关键字“_POST”写在普通网站上;
但是，攻击者使用一种简单的方法来隐藏它：
图1：后门隐藏“_POST”关键字
在第1行中，后门代码会关闭所有错误报告，以避免在出现错误时进行检测。在第3行中，“ 默认
”参数被定义为似乎是随机字符组合。在第4行中，当代码重新排序这些字符并将它们转换为大写以构建关键字“ _POST ” 时，定义“ about
”参数。此关键字在第5-12行中用于检查对此页面的HTTP请求是否通过POST方法完成，以及是否包含“ lequ ”参数。
如果是这样，后门使用“ eval ”函数来运行参数“ lequ ”中发送的代码。因此，后门从post请求中的参数读取值，而不使用关键字“ $ _POST
”。
### 字符串连接
攻击者用来混淆已知关键字的另一种流行方法是字符串连接，如下例所示：
图2：使用字符串连接隐藏已知函数的后门程序
与之前的后门相反，已知函数在没有混淆的情况下写入后门本身，此代码段中唯一可见的命令是“
chr”函数（第1行）。此函数采用0到255之间的数字并返回相关的ascii字符。
在字符或字符串末尾添加一个点是将它连接到下一个字符串的PHP方法。使用此功能，攻击者可以连接多个字符或字符串以创建表示已知函数的关键字，从而将其隐藏起来。  
最后，此功能在开头用“@”符号执行，超过了错误通知的打印。此后门的目的是创建一个函数，用于评估post请求的第一个参数中给出的代码。使用此后门，攻击者可以使用POST请求欺骗检测系统并将任意代码发送到受感染的服务器，其中代码将被执行。
### 不推荐使用的功能
虽然在以前版本的PHP中已经弃用了某些功能或功能，但我们仍然看到攻击试图在当前后门中滥用此功能，如下例所示：  
图3：使用preg_replace的弃用功能的后门程序
这个单行代码片段可能看起来很简单，但它实际上使用了一些规避技术，并且作为后门可能会带来很多危害。首先，“str_rot13”函数接受一个字符串，并将每个字母移位到字母表中的13个位置。这个函数在’riny’上的输出是众所周知的函数’eval’。接下来，“preg_replace”函数采用正则表达式，替换字符串和主题字符串。然后，它搜索主题中正则表达式的每次出现，并用替换字符串替换它。上例中的输出字符串将是：
意思是，从post请求中评估参数’rose’中的表达式。
注意’preg_replace ‘中的’/
e’标签。这是一个不推荐使用的标记，它告诉程序执行’preg_replace’函数的输出。PHP手册指出了有关此修饰符的以下警告：“
小心不建议使用此修饰符，因为它可以轻松引入安全漏洞”。此修饰符在PHP 5.5.0中已弃用，自PHP
7.0.0起已删除。那么为什么要担心自PHP新版本以来被删除的已弃用功能呢？请看W3Techs的以下调查：
图4：使用各种PHP版本的网站的百分比（W3Techs.com，2018年7月3日）
根据这项调查，超过80％的用PHP编写的网站都使用了一个版本，其中使用了’preg_replace’函数的弃用’e’修饰符。因此，用PHP编写的绝大多数网站都容易受到使用此弃用修饰符的攻击。
作为逃避检测的另一种方法，代码将使用前面示例中所示的“@”符号进行评估，这超出了错误消息。
### 多步PHP逃避技术
存在一些逃避方法，攻击者使用多种技术的组合来混淆他们的代码。
**反向字符串，连接，压缩和编码**  
图5：后门使用反向字符串，base64编码和gzinflate压缩来隐藏代码
在此示例中，攻击者使用多种方法组合来隐藏代码。首先，攻击者使用上述“ preg_replace”函数和评估代码的“ /