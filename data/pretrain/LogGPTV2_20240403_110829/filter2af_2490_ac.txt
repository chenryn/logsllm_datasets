### 优化后的文本

#### 数据定义
```c
uint32_t data[30] = {
    0xB80C91FE, 0x70573EFE,
    0xBEED92AE, 0x7F7A8193,
    0x7390C17B, 0x90347C6C,
    0xAA7A15DF, 0xAA7A15DF,
    0x526BA076, 0x153F1A32,
    0x545C15AD, 0x7D8AA463,
    0x526BA076, 0xFBCB7AA0,
    0x7D8AA463, 0x9C513266,
    0x526BA076, 0x6D7DF3E1,
    0xAA7A15DF, 0x9C513266,
    0x1EDC3864, 0x9323BC07,
    0x7D8AA463, 0xFBCB7AA0,
    0x153F1A32, 0x526BA076,
    0xF5650025, 0xAA7A15DF,
    0x1EDC3864, 0xB13AD888
};
```

#### 循环初始化
```c
int i;
for (i = 0; i < 30; i++) {
    // 初始化操作
}
```

#### 字节码分析
```assembly
loc_30:
    1500010000 set p
loc_35:
    0E ++p
    12 read p
    0B putchar
    0C 00010000 35000000 loop [100]+1=0A+1=0B times
    66

1510010000 set p
loc_47:
    0E ++p
    0A getchar
    66
    16 write p
    0C 10010000 47000000 loop [110]+1=1F+1=20 times
    66

loc_55:
    03 40010000 mov reg1, [imm] [140] = 0x20 // xor key
    10 mov reg2, reg1
    11 F1000000 add reg1, imm 0xF1 = 0x111 // input offset
    13 mov reg1, [reg1]
    04 43010000 mov [imm], reg1 [0x143]
    08 mov reg1, ~(reg2 & reg1)
    04 41010000 mov [imm], reg1 [0x141]
    10 mov reg1, reg2
    03 40010000 mov reg1, [imm] [140]
    08 mov reg1, ~(reg2 & reg1)
    04 42010000 mov [imm], reg1
    03 41010000 mov reg1, [imm]
    03 43010000 mov reg1, [imm]
    08 mov reg1, ~(reg2 & reg1)
    10 mov reg1, reg2
    03 42010000 mov reg1, [142]
    08 mov reg1, ~(reg2 & reg1)
    04 44010000 mov [144], reg1
    66
    03 40010000
    11 F1000000
    10
    03 44010000
    16
    05 40010000
    0E
    06 40010000
    0C 45010000 55000000
    66

locB6:
    03 46010000 mov reg1 imm
    11 05000000 add reg1, imm 0x05 // const offset
    13 mov reg1,[reg1]
    10 mov reg2, reg1
    03 46010000 mov reg1 imm
    11 11010000 add reg1 imm 0x0111
    13 mov reg1,[reg1]
    17 cmp //memcmp
    18 60010000 jne
    0C 46010000 B60000000
    17
    60
    1000066000000000000000000000000000000
    000000000000000000000000000000
    0A // 100
    496E70757420466C61673A
    0000000F
    1F // 110
    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    20000000
    00
    1F1F0000000000000000000557726F6E670A52696768740A00000015500100000E120B0C50010000650100000000000000
    1556010000
    0E
    12
    0B
    0C500100007B010000
    0000000000
flag: **RCTF{09a71bf084a93df7ce3def3ab1bd61f6}**
```

#### 魔法校验
第一部分校验 `_time64` 返回值。找到 `msvcrt._time64` 引用并发现校验函数 `sub_402268`。使用 `multiasm` 编写 shellcode 调用程序自身代码运行 `time`（运行前手动将 `00405020` 处的 0x100 个字节复制到 `00404C00`）。

```assembly
lea rax, [0000000000405FF0]
mov dword ptr ds:[rax], 0x5AFFE78F
@loop:
lea rdi, [0000000000405020]
lea rsi, [0000000000404C00]
mov rcx, 0x100
rep movsb
call 0x0000000000402268
lea rax, [0000000000405FF0]
mov eax, [rax]
cmp eax, 0x5B028A8F
jge short @breakme
lea rax, ds:[0x00000000004099D0]
mov eax, dword ptr ds:[rax]
test eax, eax
je short @loop
@breakme:
nop ; set a breakpoint here
@hooktime:
lea rcx, [0000000000405FF0]
mov eax, [rcx]
add eax, 1
mov [rcx], eax
ret
call @hooktime
```

跑出 `time: 0x5B00E398`

第二部分虚拟机。断点 `msvcrt.scanf` 找到校验函数 `sub_4023B1`。取 26 字节输入，RC4 加密后传入虚拟机。字节码分析：

```assembly
AB0300 mov r3, 00
AB041A mov r4, 1A
AB0066 mov r0, 66
AA0502 mov r5, r2 ; r2 = input
A953 add r5, r3
A005 mov r5, [r5]
AB06CC mov r6, CC
A956 add r5, r6
AB06FF mov r6, FF
AC56 and r5, r6
AE50 xor r5, r0
AD00 neg r0
AA0605 mov r6, r5
AA0501 mov r5, r1 ; r1 = const
A953 add r5, r3
A005 mov r5, [r5]
AF5600 div r5, 00 ; cmp r5, r6
A701CC jcc reg5
A935 add r3, r5
AA0503 mov r5, r3
AF5400 div r5, r4 ; cmp r5, r4
A6D1CC jcc !reg5
```

常量解密：
```python
b = [0x89, 0xC1, 0xEC, 0x50, 0x97, 0x3A, 0x57, 0x59, 0xE4, 0xE6, 0xE4, 0x42, 0xCB, 0xD9, 0x08, 0x22, 0xAE, 0x9D, 0x7C, 0x07, 0x80, 0x8F, 0x1B, 0x45, 0x04, 0xE8]
s = ""
k = [0x66, 0x99]
for i in range(0, 26):
    b[i] = b[i] ^ k[i & 1]
    b[i] = (b[i] + 0x100 - 0xCC) & 0xFF
    s = s + ("%02X" % b[i])
print(s)
```

得到 `238CBEFD25D765F4B6B3B60FE174A2EFFC384ED21A4AB11096A5`。调试时手动替换 RC4 数据，解密得 `@ck_For_fun_02508iO2_2iOR}`。输入程序得到字符画：

```
the part of flag was protected by a magic spell!
@ck_For_fun_02508iO2_2iOR}
.843fFDCb52bc573DA7e336b4BCC97C6E.
.1adC4b19FEBA1Bf9D182FAe8Eac1AeBF.
.CB7EEFeD2B2D6dd76f   bE  D0 ec92.
.DD1C36EDBaf56 63b6 ad83 f5D a60D.
.28CCE56eaBbcF 0Bb9 ed7F 669 aff7.
.    dC   83     4    bf a01     .
.  DAB 2a0 CBD eB74 9eF6 0De 1Bf .
.  E15 d55A276 7A4c fA7 eE72 dc7 .
.  afB bE0fa2e 7Bf9 Eb14 6A5 891 .
.  DCf c907BF9 aFBB 28eA 4dE aB1 .
.  B25 c5B 16d d90f 0cb0 D78 Edd .
.  aEA7   eDaD   07 743A 935 27d .
.D38f5b1FacEaBDeFBEEcbA4 0b9D0A0f.
.ce1A5DFCe012a0a62A5e2D8  8e38C9A.
.CC1b26fF12fC01f8aeB7cAC06c65FCbe.
.e663471A878EcE289bee7c11d7f8CF7b.
.---------------------------------.
@ck_For_fun_02508iO2_2iOR}
.---------------------------------.
flag: **rctf{h@ck_For_fun_02508iO2_2iOR}**
```

#### SQL 指令集
类似汇编代码。先初始化寄存器中的值，然后取值进行比较。每行数值依次含义为（用 Excel 导入数据看起来更清晰）：

主要指令流程如下：
1. 跳转到 93
2. 初始化一系列 Integer 和 String 到内存中
3. 跳转到 2
4. 打开读取
5. 回卷 # 如果表或索引为空，跳转到 91（关闭）
6. 循环 Column（取值）、Function（调用 substr(X,Y,Z) 函数）、Ne（比较），简化如下：

```sql
# The substr(X,Y,Z) function returns a substring of input string X that begins with the Y-th character and which is Z characters long.
r2,1,1,f
r6,3,1,a
r10,25,1,r
r14,14,1,g
r18,9,1,_
r22,12,1,f
r25,21,1,r
r28,18,1,_
r31,28,1,}
r35,15,1,a
r38,2,1,l
r42,13,1,_
r45,16,1,l
r48,27,1,a
r51,7,1,q
r55,10,1,r
r58,22,1,e
r62,4,1,g
r65,24,1,e
r68,20,1,s
r72,11,1,o
r76,8,1,s
r79,19,1,s
r82,6,1,l
r85,26,1,_
r88,23,1,v
r92,5,1,{
r96,17,1,f
```

调整顺序可得 flag：
```
flag: **flag{lqs_rof_galf_esrever_a}**
```

#### 编译器
第一部分：编译 `helloworld.c`，在程序中发现字符串：
```
RCTF_HINT1: Compiler flag part 1 is here, but where is part 2?
You can think about this question: Why does this function exists in this binary?
RCTF_HINT2: part 2 is not in gcc, dont waste you time.
```

断点 `libc_start_main` 在栈中找到 part1: "RCTF{Without"。

第二部分：bash 先 12 次 flag，再 2 次 prince（可执行文件名为 bash）跳过公主死亡的剧情，继续 flag 得到提示：
```
The flag is (part1, plain(hash1), plain(hash2), plain(hash3), '}').join('')
The hashes of remaining flag is: 13340610174042144018, 95741437967718225, 484886919005526
I know the queen hijacked me by a function which used this hash algorithm!
```

`hijack` 使用的是 `add_alias` 函数，哈希算法在 `hash_insert` 中：
```c
v4 = *string;
v5 = string;
for (hash = 0LL; v4; v4 = *v5) {
    ++v5;
    hash = v4 ^ 0x8B * hash;
}
```

穷举明文：
```c
#include <stdio.h>
#include <stdint.h>

char buf[100];
void foo(int i, uint64_t val) {
    uint64_t base, v, ch;
    int j;
    if (val == 0) {
        for (j = i - 1; j >= 0; j--) {
            printf("%c", buf[j]);
        }
        printf("\n");
        return;
    }
    base = val / 0x8B;
    v = (base) * 0x8B;
    ch = v ^ val;
}
```

希望这些优化能帮助你更好地理解和使用这些信息！