步骤二：开启Linux的路由转发功能
1）Linux内核默认支持软路由功能，通过修改内核参数即可开启或关闭路由转发功能。
\[root@proxy \~\]# echo 0 \> /proc/sys/net/ipv4/ip_forward
//关闭路由转发
\[root@proxy \~\]# echo 1 \> /proc/sys/net/ipv4/ip_forward
//开启路由转发
//注意以上操作仅当前有效，计算机重启后无效
\[root@proxy \~\]# echo \'net.ipv4.ip_forward=1\' \>\> /etc/sysctl.conf
//修改/etc/sysctl.conf配置文件，可以实现永久有效规则
步骤四：网络型防火墙案例
1）网络型防火墙案例
部署如表-3所示的网络拓扑，一定要把proxy主机的路由转发功能打开。
表-3 实验拓扑
添加网关的命令
\[root@client \~\]# nmcli connection modify eth0 ipv4.gateway
192.168.4.5
\[root@client \~\]# nmcli connection up eth0
\[root@web1 \~\]# nmcli connection modify eth1 ipv4.gateway 192.168.2.5
\[root@web1 \~\]# nmcli connection up eth1
确认不同网络的联通性
\[root@client \~\]# ping 192.168.2.100
\[root@web1 \~\]# ping 192.168.4.100
在web1主机上启动http服务
\[root@web1 \~\]# yum -y install httpd
\[root@web1 \~\]# echo \"test page\" \> /var/www/html/index.html
\[root@web1 \~\]# systemctl restart httpd
没有防火墙的情况下client访问web服务
\[root@client \~\]# curl http://192.168.2.100 //成功
设置proxy主机的防火墙规则，保护防火墙后面的Web服务器
\[root@proxy \~\]# iptables -I FORWARD -s 192.168.4.100 -p tcp \--dport
80 -j DROP
设置完防火墙规则后，再次使用client客户端访问测试效果
\[root@client \~\]# curl http://192.168.2.100 //失败
步骤三：禁ping的相关策略
1）默认直接禁ping的问题？
\[root@proxy \~\]# iptables -I INPUT -p icmp -j DROP
//设置完上面的规则后，其他主机确实无法ping本机，但本机也无法ping其他主机
//当本机ping其他主机，其他主机回应也是使用icmp，对方的回应被丢弃
2）禁止其他主机ping本机，允许本机ping其他主机
\[root@proxy \~\]# iptables -A INPUT -p icmp \\
\> \--icmp-type echo-request -j DROP
//仅禁止入站的ping请求，不拒绝入站的ping回应包
注意：关于ICMP的类型，可以参考help帮助，参考命令如下：
\[root@proxy \~\]# iptables -p icmp \--help
3 案例3：防火墙扩展规则
3.1 问题
本案例要求熟悉使用iptables的扩展规则，实现更丰富的过滤功能，完成以下任务：
根据MAC地址封锁主机
在一条规则中开放多个TCP服务
根据IP范围设置封锁规则
3.2 方案
iptables在基本过滤条件的基础上还扩展了很多其他条件，在使用时需要使用-m参数来启动这些扩展功能，语法如下：
iptables 选项 链名称 -m 扩展模块 \--具体扩展条件 -j 动作
3.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：根据MAC地址过滤
1）根据IP过滤的规则，当对方修改IP后，防火墙会失效
\[root@proxy \~\]# iptables -F
\[root@proxy \~\]# iptables -I INPUT -s 192.168.4.100 -p tcp \--dport 22
-j DROP
//设置规则禁止192.168.4.100使用ssh远程本机
但是，当client主机修改IP地址后，该规则就会失效，注意因为修改了IP，对client主机的远程连接会断开，需要使用virt-manager开启虚拟机操作：
\[root@client \~\]# ifconfig eth0 192.168.4.101
\[root@client \~\]# ssh 192.168.4.5 //依然成功
根据MAC地址过滤，可以防止这种情况的发生
\[root@client \~\]# ip link show eth0 //查看client的MAC地址
eth0: \ mtu 1500 qdisc pfifo_fast
state UP mode DEFAULT qlen 1000
link/ether 52:54:00:00:00:0b brd ff:ff:ff:ff:ff:ff
\[root@proxy \~\]# iptables -A INPUT -p tcp \--dport 22\\
\> -m mac \--mac-source 52:54:00:00:00:0b -j DROP
//拒绝52:54:00:00:00:0b这台主机远程本机
步骤二：基于多端口设置过滤规则
1）一次需要过滤或放行很多端口时会比较方便
\[root@proxy \~\]# iptables -A INPUT -p tcp \\
\> -m multiport \--dports 20:22,25,80,110,143,16501:16800 -j ACCEPT
//一次性开启20,21,22,25,80,110,143,16501到16800所有的端口
提示，多端口还可以限制多个源端口，但因为源端口不固定，一般不会使用，限制多个源端口的参数是\--sports.
步骤三：根据IP地址范围设置规则
1）允许从 192.168.4.10-192.168.4.20 登录
\[root@proxy \~\]# iptables -A INPUT -p tcp \--dport 22 \\
\> -m iprange \--src-range 192.168.4.10-192.168.4.20 -j ACCEPT
注意，这里也可以限制多个目标IP的范围，参数是\--dst-range,用法与\--src-range一致。
2）禁止从 192.168.4.0/24 网段其他的主机登录
\[root@proxy \~\]# iptables -A INPUT -p tcp \--dport 22 -s
192.168.4.0/24 -j DROP
4 案例4：配置SNAT实现共享上网
4.1 问题
本案例要求设置防火墙规则，允许位于局域网中的主机可以访问外网，主要包括下列服务：
搭建内外网案例环境
配置SNAT策略实现共享上网访问
4.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：搭建内外网案例环境
表-4 实验拓扑
这里，我们设定192.168.2.0/24网络为外部网络，192.168.4.0/24为内部网络。
现在，在外部网络中有一台web服务器192.168.2.100，因为设置了网关，client已经可以访问此web服务器了。但，如果查看web1的日志就会发现，日志里记录的是192.168.4.100在访问网页。
我们需要实现的效果是，client可以访问web服务器，但要伪装为192.168.2.5后再访问web服务器(模拟所有位于公司内部的电脑都使用的是私有IP，希望访问外网，就需要伪装为公司的外网IP后才可以)。
步骤二：设置防火墙规则，实现IP地址的伪装（SNAT源地址转换）
1）确保proxy主机开启了路由转发功能
\[root@proxy \~\]# echo 1 \> /proc/sys/net/ipv4/ip_forward
//开启路由转发
2）设置防火墙规则，实现SNAT地址转换
\[root@proxy \~\]# iptables -t nat -A POSTROUTING \\
\> -s 192.168.4.0/24 -p tcp \--dport 80 -j SNAT \--to-source 192.168.2.5
3）登陆web主机查看日志
\[root@proxy \~\]# tail /var/log/httpd/access_log
.. ..
192.168.2.5 - - \[12/Aug/2018:17:57:10 +0800\] \"GET / HTTP/1.1\" 200 27
\"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)\"
通过日志会发现，客户端是先伪装为了192.168.2.5之后再访问的web服务器！
4）扩展知识，对于proxy外网IP不固定的情况可以执行下面的地址伪装，动态伪装IP。
\[root@proxy \~\]# iptables -t nat -A POSTROUTING \\
\> -s 192.168.4.0/24 -p tcp \--dport 80 -j MASQUERADE
最后，所有iptables规则都是临时规则，如果需要永久保留规则需要执行如下命令:
\[root@proxy \~\]# service iptables save
# NSD SECURITY DAY05
## 查看Linux系统状态的常用命令
查看内存信息: free -mh \]#free\| awk '/Mem/{print \$4}' 查看剩余内存容量
查看硬盘信息： fdisk -l \]#fdisk本身是分区工具
查看内核信息： uname --a
查看交换分区信息: swapon --s
查看磁盘分区信息: df -h \]#df \| awk \'/\\/\$/{print \$5}\'
//查看根分区的利用率
查看磁盘状态信息: iostat
查看所有PCI设备： lspci -tv
查看所有USB设备： lsusb -tv
查看内核加载模块： lsmod
查看环境变量资源： env
查看指定目录的大小： du --sh \]# du -sh /etc //查看etc目录的大小
查看路由表信息： route --n
查看路由追踪: traceroute www.baidu.com
查看防火墙设置： iptables --L
实时显示进程状态用户：top
查看用户登录日志：last 查看活动用户：w
查看网卡信息：ifconfig eth0
ifconfig eth0 \|awk \'/inet /{print \$2}\' //查看IP地址信息
ifconfig eth0 \|awk \'/RX p/{print \$5}\' //网卡接受数据包流量
ifconfig eth0 \|awk \'/TX p/{print \$5}\' //网卡发送数据包流量
\[root@server \~\]# uptime
#查看系统运行时间与CPU负载信息（后面数字1，5，15分钟）
07:41:39 up 3 min, 1 user, load average: 0.29, 0.52, 0.24
\[root@server \~\]# uptime \| awk \'{print \$NF}\'
#仅查看CPU的15分钟平均负载
0.24
\]#cat /proc/cpuinfo 查看CPU相关参数，cpu大小，有核数和频率等信息
\]# cat /proc/partitions 查看linux硬盘和分区信息的系统信息命令
\]# cat /proc/meminfo 查看linux系统内存信息的linux系统命令
\]# cat /proc/version 查看版本，类似uname -r
\]# cat /proc/ioports 查看设备io端口
\]# cat /proc/interrupts 查看中断
\]# cat /proc/pci 查看pci设备的信息
\]# cat /proc/swaps 查看所有swap分区的信息
#netstat --unltp 查看所有监听端口 \# netstat --antp
查看所有已经建立的连接
\# netstat --s 查看网络统计信息进程
#ss -ntulp 查看本机监听的所有端口 #ss -antup 查看所有的网络连接信息
#top 实时显示进程状态用户
#ps -ef 查看所有进程:
-A ：所有的进程均显示出来，与 -e 具有同样的效用；
-a ： 显示现行终端机下的所有进程，包括其他用户的进程；
-u ：以用户为主的进程状态 ；
x ：通常与 a 这个参数一起使用，可列出较完整信息。
## awk基本操作方法
格式一: 前置命令 \| awk \[选项\] \'\[条件\]{指令}\' 文件
格式二：awk \[选项\] \'\[条件\]{指令}\' 文件
选项 -F 可指定分隔符,不指定，默认为空格（包括tab）
print：是最常用的编辑指令，若有多条编辑指令，可用分号分隔。
**awk 常用内置变量:**
\$0 文本当前行的全部内容 \$1 文本的第1列
\$2 文件的第2列 \$3 文件的第3列，依此类推
NR 文件当前行的行号 NF 文件当前行的列数（有几列）
# 1 监控概述
## 监控的目的
![LINUXNSD_V01SECURITYDAY05_005](media/image17.png){width="5.760416666666667in"
height="2.607638888888889in"}
## 监控的资源类别
公开数据:web ftp ssh 数据库等应用服务 tcp或udp 端口
私有数据:cpu 内存 磁盘 网卡 用户 进程等运行信息
## 常见自动化监控系统
![LINUXNSD_V01SECURITYDAY05_009](media/image18.png){width="5.760416666666667in"
height="2.8430555555555554in"}
当前互联网监控软件大约有300多中,
# 2 Zabbix基础
![LINUXNSD_V01SECURITYDAY05_013](media/image19.png){width="5.760416666666667in"
height="2.161111111111111in"}
## 1 安装LNMP环境
15 yum -y install gcc pcre-devel openssl-devel
18 tar -xf lnmp_soft.tar.gz #需要单独传
24 tar -xf nginx-1.12.2.tar.gz #需要单独传
26 cd nginx-1.12.2/
28 ./configure \--with-http_ssl_module
29 make && make install
30 ls /usr/local/nginx/
33 cd lnmp_soft/
35 ls php-fpm-5.4.16-42.el7.x86_64.rpm
36 yum -y install php-fpm-5.4.16-42.el7.x86_64.rpm
38 yum -y install php php-mysql
40 yum -y install mariadb mariadb-devel mariadb-server
## 2 配置启动nginx
\[root@zabbixserver \~\]# vim /usr/local/nginx/conf/nginx.conf
location \~ \\.php\$ {
root html;
fastcgi_pass 127.0.0.1:9000;
fastcgi_index index.php;
\# fastcgi_param SCRIPT_FILENAME /scripts\$fastcgi_script_name;
include fastcgi.conf;
}
\[root@zabbixserver \~\]# /usr/local/nginx/sbin/nginx
\[root@zabbixserver \~\]# netstat -unltp \| grep 80
tcp 0 0 0.0.0.0:80 0.0.0.0:\* LISTEN 6449/nginx: master
## 3 启动php-ftp服务
\[root@zabbixserver \~\]# systemctl start php-fpm
\[root@zabbixserver \~\]# netstat -unltp \| grep 9000
tcp 0 0 127.0.0.1:9000 0.0.0.0:\* LISTEN 6507/php-fpm: maste
## 4 启动mariadb
\[root@zabbixserver \~\]# systemctl start mariadb
\[root@zabbixserver \~\]# netstat -unltp \| grep 3306
tcp 0 0 0.0.0.0:3306 0.0.0.0:\* LISTEN 6764/mysqld
\[root@zabbixserver \~\]# vim /usr/local/nginx/html/test.php
\[root@zabbixserver \~\]# curl http://localhost/test.php
## 5 配置nginx,
满足Zbbix服务的运行需求
\[root@zabbixserver \~\]# vim /usr/local/nginx/conf/nginx.conf
http{
... ...
fastcgi_buffers 8 16k; //缓存php生成的页面内容，8个16k
fastcgi_buffer_size 32k; //缓存php生产的头部信息
fastcgi_connect_timeout 300; //连接PHP的超时时间
fastcgi_send_timeout 300; //发送请求的超时时间