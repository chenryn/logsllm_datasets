#####  3.2.2 存储
图6 合成存储设备高级概览
对于我们的研究，首先关注存储VSP。
它的设计非常有趣，因为VSC通过VMBus发送（在其他数据包类型中）封装的SCSI命令，然后将其解析并转换为存储VSP的简单文件访问操作。
图6显示了在enlightened Linux客户机上实现合成存储设备所涉及的组件。
Child partition中的存储VSC将SCSI命令封装在所谓的vstor数据包中。
该数据包由VMBus驱动程序封装到VMBus数据包中，并通过上述环形缓冲区传输。 在root
partition中，VMBus驱动程序将数据包交给storvsp.sys驱动程序，该驱动程序将其分派到vhdump.sys驱动程序中的相应处理程序函数中。
图7显示了这种SCSI命令处理程序的示例。 请注意BSWAP指令的使用，该指令用于在大端SCSI协议和小端系统架构之间进行转换。
图7 SCSI命令处理程序
为了评估存储VSP的安全性，我们再次从基本fuzzing开始。
这种率直的做法被证明是不可行的，因为vstor和vmbus数据包的fuzzing导致存储VSC的永久性崩溃，并因此导致整个child
partition的崩溃。
为了解决这个问题，我们改进了fuzzing测试框架，允许对执行的SCSI命令进行细粒度fuzzing：我们的fuzzer使用kprobes接口，它允许hooking几乎任意的内核函数。
通过挂钩通用VMBus packet_send函数并根据调用者操作传递的参数，我们可以将fuzzing限制为不会触发永久VM崩溃的数据。
当然，这会减少主动fuzz面，因此需要通过手动分析来提供这种方法。
最后，我们没有发现存储VSP中的任何关键漏洞。 然而，我们的分析非常有限，并且由于普通fuzzing的无效性，人工分析是绝对必要的。
## 4 HYPERCALL API
我们要在本文中讨论的最后一个组件是Hypercall API。 Hyper-V中的hypercalls类似于系统调用，但在来宾内核和hypervisor之间运行。 它们被enlightened
partitions用于增强性能并启用VMBus等高级功能。 此外，根分区使用管理超级调用来管理所有其他分区。
API本身非常强大，包括创建和销毁新分区，设置和读取不同VM的寄存器值等功能。 当然，此类功能受权限检查保护，通常仅限于root partition。
图8 HvGetVPRegisters说明文档
与VMBus及其合成设备相比，Microsoft在Hypervisor顶级功能规范中完全记录了Hypercall API。
例如，图8显示了HvGetVPRegisters这个hypercall接口描述，它允许对虚拟机的寄存器进行读访问。
所有其他可用的超级调用都以相同的格式记录。
图9 host_rip涉及vmwrite的相关VMCS 字段
为了审计hypercalls，我们首先要识别相应的处理函数。 使用第2.7.2节中概述的方法，我们可以通过搜索相应的VMWRITE指令快速识别主VM
exit处理程序，如图9所示。
所有hypervisors的VM exit处理程序遵循相同的基本结构：
  1. 1.存储Guest State
  2. 2.根据exit的原因调用相应的处理函数
  3. 3.恢复Guest State
基本hypercalls的接口如下所示：
  1. 1.将调用号存储在RCX中
  2. 2.将指向输入的Guest物理地址存储在RDX中
  3. 3.将指向输出的可写内存的GPA存储在R8中
最后，执行VMCALL指令以触发VM exit。 通过识别VMCS退出原因为VMCALL时调用的函数，我们可以识别负责处理hypercalls的代码。
通过分析此功能，我们可以快速识别处理hypercalls的主要数据结构，如图10所示。
图10 Hypercalls 处理程序表
利用此数据结构，可以快速识别所有相关的处理函数。 在审计单个hypercall处理程序的漏洞时，我们有几个优势：首先，处理函数本身是相对孤立的。
这样只有一个目的，可以更容易地识别被调用函数的功能。 其次，因为输入和输出接口由顶级规范记录，所以关于实际代码流的推理相对容易。
图11显示了HvGetPartitionId超级调用的处理函数。 在每个处理函数的开始处，RCX寄存器指向输入位置，而RDX指向输出。
两个内存区域都不直接映射到VM内存。 而是在启动处理程序之前复制输入，并在处理程序完成后将输出写入VM内存。
这消除了在处理程序运行时操纵hypercall输入的可能性，因此排除了整个类型的漏洞。
图11 HvGetPartitionId处理程序
当实际审核hypercall处理程序本身的漏洞时，我们可以快速识别一个大问题：最关注的功能仅适用于root
partition，并受到严格的早期权限检查的保护。 但是，在实际的hypercall处理程序执行之前，会执行大量检查。
当我们查看它们时，我们很快发现了导致MS13-092的一个关键问题。
## 5 MS13-092
在调用实际的hypercall处理程序之前，将执行多个健全性检查。 例如，必须确保hypercall实际上来自VM的ring0层。
此外，还执行输入和输出GPA的完整性检查。 它们是否正确对齐？ 它们看起来“合理”吗？
图12 GPA输入检查
其中一项检查如图12所示：输入的GPA存储在RSI寄存器中，并根据位图进行检查。 如果输入的GPA太大，则会引发错误情况。
漏洞位于错误处理函数之一的调用堆栈中：
图13 EPT 错误处理程序
图13显示了负责处理EPT（Extended Page Table）错误的函数。 当VM触发正常的EPT违规时，也会在设置上述错误条件时调用它。
图14 越界内存访问
如果EPT破坏是由内存读取触发的，则名为ept_read_error的函数会被调用。
在无效输入GPA作为hypercall参数的情况下执行的代码路径也是如此。 在函数开始时，RDX容纳攻击者控制的输入GPA。
然后将RDX复制到RAX，向右移动12位。 该值用作控制VM的页表项（page table entries PTE）的页表索引。
页表的目的是将客户物理页面映射到系统页表项。 每个VM只有一个这样的表，有趣的是它们以相互恒定的偏移量分配。
因为输入GPA几乎可以任意大小，所以阵列访问可以用于访问页表范围之外的内存。 通过触发无效的内存访问非常容易导致hypervisor崩溃。
输入GPA设置为0x4141414141的任何有效超级调用编号都将足以导致整个hypervisor的Hyper-V蓝屏和拒绝服务（DoS）情况，同时也包括所有操作的客户：
图15 Hyper-V蓝屏
我们向Microsoft报告了此错误，并于2013年11月在公告MS13-092中进行了修补。
有趣的是，Microsoft将此错误视为不同分区之间潜在的权限提升。 所以我们决定深入研究如何将这个bug从DoS转变为PrivEsc。
图16 简化的伪代码
图16显示了易受攻击的函数的简化版本。 在大多数情况下它将简单地返回0，并且仅当PTE中的页面帧号（page frame number
PFN）等于某个值时才执行相关操作。
分析Microsoft提供的补丁显示，作为唯一明显的变化，在函数调用前进行另外的大小检查，在失败时强制返回0。
这意味着在易受攻击的函数返回0之后执行的所有代码路径，对于利用漏洞都将失效。
总之，我们必须找到一种方法来读取包含“特殊”PFN号码的PTE（来自不同的VM），以便触发潜在的恶意内存访问。
使用纯静态分析，我们无法识别此PFN的用例，并且我们实验室中的VM未使用它。 这可能意味着它仅在某些可能与配置相关的情况下使用。
由于64位地址空间较大，且输入GPA值具有上述上限，并不能试图读取完全由攻击者控制的变量值。
如果攻击者能够通过此检查，他就可以获得有趣的代码。 但是，能够影响的只有PTE和输入GPA这两个值。
由于上述的PFN检查，这些影响都非常有限，所以对下一个执行步骤比较受限。
不仅无法把违规读内存转换为某种写内存损坏，而且将PTE从一个VM映射到另一个的可能性也同样是一个问题。尽管我们还没有利用这个特定问题的简单方法，但我们将进一步分析补丁和结果行为，并鼓励其他研究也这样做。
## 6 进一步研究和结论
本文总结了我们所做的关于Hyper-V安全性的研究。
尽管大部分时间都在详细理解架构，描述VM突破攻击的攻击面，但是也发现了处理hypercalls时的一个关键漏洞。
基于这项工作，我们计划对其他VSP进行更详细的分析，并开发技术来改进我们的fuzzing功能（主要是改善崩溃恢复/减少客户机崩溃的总体数量/需求）。
此外，分析不同版本Hyper-V的静默修补漏洞似乎是一项很有前景的活动，我们计划在今年晚些时候展示这些。
我们的研究表明，hypervisors是庞大而复杂的软件，具有显着的攻击面。 即使“虚拟隔离”这个术语现在非常流行，我们的研究表明这个隔离远弱于物理隔离。
虽然Hyper-V是可靠的软件，开发时考虑了安全性，但它仍然存在严重的安全漏洞。 这应该推动其他研究人员利用我们的结果，介入Hyper-V巨大的攻击面分析，跟随古老的“Make the Theoretical Practical”黑客精神！