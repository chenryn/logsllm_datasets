7
1588
1589
1590
1591
VCN
LCN
FIGURE 11-41 VCNs for a nonresident data attribute.
If this file had more than two runs, the numbering of the third run would start with VCN 8. As 
Figure 11-42 shows, the data attribute header contains VCN-to-LCN mappings for the two runs here, 
which allows NTFS to easily find the allocations on the disk.
670
CHAPTER 11
Caching and file systems
Standard
information
0
1
2
3
1355
1356
1357
1358
File name
Data
Data
Data
File 16
4
5
6
7
1588
1589
1590
1591
VCN
LCN
1355
1588
4
4
0
4
Starting
VCN
Starting
LCN
Number of
clusters
FIGURE 11-42 VCN-to-LCN mappings for a nonresident data attribute.
Although Figure 11-41 shows just data runs, other attributes can be stored in runs if there isn’t 
enough room in the MFT file record to contain them. And if a particular file has too many attributes 
to fit in the MFT record, a second MFT record is used to contain the additional attributes (or attribute 
headers for nonresident attributes). In this case, an attribute called the attribute list is added. The at-
tribute list attribute contains the name and type code of each of the file’s attributes and the file number 
of the MFT record where the attribute is located. The attribute list attribute is provided for those cases 
where all of a file’s attributes will not fit within the file’s file record or when a file grows so large or so 
fragmented that a single MFT record can’t contain the multitude of VCN-to-LCN mappings needed to 
find all its runs. Files with more than 200 runs typically require an attribute list. In summary, attribute 
headers are always contained within file records in the MFT, but an attribute’s value may be located 
outside the MFT in one or more extents.
Data compression and sparse files
NTFS supports compression on a per-file, per-directory, or per-volume basis using a variant of the LZ77 
algorithm, known as LZNT1. (NTFS compression is performed only on user data, not file system meta-
data.) In Windows 8.1 and later, files can also be compressed using a newer suite of algorithms, which 
include LZX (most compact) and XPRESS (including using 4, 8, or 16K block sizes, in order of speed). 
This type of compression, which can be used through commands such as the compact shell command (as 
well as File Provder APIs), leverages the Windows Overlay Filter (WOF) file system filter driver (Wof.sys), 
which uses an NTFS alternate data stream and sparse files, and is not part of the NTFS driver per se. 
WOF is outside the scope of this book, but you can read more about it here: https://devblogs.microsoft.
com/oldnewthing/20190618-00/p102597.
You can tell whether a volume is compressed by using the Windows GetVolumeInformation function. To 
retrieve the actual compressed size of a file, use the Windows GetCompressedFileSize function. Finally, 
to examine or change the compression setting for a file or directory, use the Windows DeviceIoControl
function. (See the FSCTL_GET_COMPRESSION and FSCTL_SET_COMPRESSION file system control 
codes.) Keep in mind that although setting a file’s compression state compresses (or decompresses) the 
file right away, setting a directory’s or volume’s compression state doesn’t cause any immediate com-
pression or decompression. Instead, setting a directory’s or volume’s compression state sets a default 
CHAPTER 11
Caching and file systems
671
compression state that will be given to all newly created files and subdirectories within that directory or 
volume (although, if you were to set directory compression using the directory’s property page within 
Explorer, the contents of the entire directory tree will be compressed immediately).
The following section introduces NTFS compression by examining the simple case of compress-
ing sparse data. The subsequent sections extend the discussion to the compression of ordinary files 
and sparse files.
Note NTFS compression is not supported in DAX volumes or for encrypted files.
Compressing sparse data
Sparse data is often large but contains only a small amount of nonzero data relative to its size. A sparse 
matrix is one example of sparse data. As described earlier, NTFS uses VCNs, from 0 through m, to enu-
merate the clusters of a file. Each VCN maps to a corresponding LCN, which identifies the disk location 
of the cluster. Figure 11-43 illustrates the runs (disk allocations) of a normal, noncompressed file, includ-
ing its VCNs and the LCNs they map to.
0
1
2
3
1355
1356
1357
1358
Data
Data
4
5
6
7
1588
1589
1590
1591
Data
8
9
10
11
2033
2034
2035
2036
VCN
LCN
FIGURE 11-43 Runs of a noncompressed file.
This file is stored in three runs, each of which is 4 clusters long, for a total of 12 clusters. Figure 11-44 
shows the MFT record for this file. As described earlier, to save space, the MFT record’s data attribute, 
which contains VCN-to-LCN mappings, records only one mapping for each run, rather than one for 
each cluster. Notice, however, that each VCN from 0 through 11 has a corresponding LCN associated 
with it. The first entry starts at VCN 0 and covers 4 clusters, the second entry starts at VCN 4 and covers 
4 clusters, and so on. This entry format is typical for a noncompressed file.
Standard
information File name
Data
1355
1588
4
4
0
2033
4
8
4
Starting
VCN
Starting
LCN
Number of
clusters
FIGURE 11-44 MFT record for a noncompressed file.
When a user selects a file on an NTFS volume for compression, one NTFS compression technique is 
to remove long strings of zeros from the file. If the file’s data is sparse, it typically shrinks to occupy a 
672
CHAPTER 11
Caching and file systems
fraction of the disk space it would otherwise require. On subsequent writes to the file, NTFS allocates 
space only for runs that contain nonzero data.
Figure 11-45 depicts the runs of a compressed file containing sparse data. Notice that certain ranges 
of the file’s VCNs (16–31 and 64–127) have no disk allocations.
0
15
133
Data
Data
Data
Data
VCN
LCN
134 135
136 137 138 139 140 141 142 143 144 145 146 147 148
32
47
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208
48
63
96
97
98
99
100 101 102 103 104 105 106 107 108 109 110
111
128
143
324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339
FIGURE 11-45 Runs of a compressed file containing sparse data.
The MFT record for this compressed file omits blocks of VCNs that contain zeros and therefore have 
no physical storage allocated to them. The first data entry in Figure 11-46, for example, starts at VCN 0 
and covers 16 clusters. The second entry jumps to VCN 32 and covers 16 clusters.
Standard
information File name
Data
133
193
16
16
0
96
16
48
32
Starting
VCN
Starting
LCN
Number of
clusters
324
16
128
FIGURE 11-46 MFT record for a compressed file containing sparse data.
When a program reads data from a compressed file, NTFS checks the MFT record to determine 
whether a VCN-to-LCN mapping covers the location being read. If the program is reading from an 
unallocated “hole” in the file, it means that the data in that part of the file consists of zeros, so NTFS 
returns zeros without further accessing the disk. If a program writes nonzero data to a “hole,” NTFS 
quietly allocates disk space and then writes the data. This technique is very efficient for sparse file data 
that contains a lot of zero data.
CHAPTER 11
Caching and file systems
673
Compressing nonsparse data
The preceding example of compressing a sparse file is somewhat contrived. It describes “compres-
sion” for a case in which whole sections of a file were filled with zeros, but the remaining data in the file 
wasn’t affected by the compression. The data in most files isn’t sparse, but it can still be compressed by 
the application of a compression algorithm.
In NTFS, users can specify compression for individual files or for all the files in a directory. (New 
files created in a directory marked for compression are automatically compressed—existing files 
must be compressed individually when programmatically enabling compression with FSCTL_SET_
COMPRESSION.) When it compresses a file, NTFS divides the file’s unprocessed data into compression 
units 16 clusters long (equal to 128 KB for a 8 KB cluster, for example). Certain sequences of data in a file 
might not compress much, if at all; so for each compression unit in the file, NTFS determines whether 
compressing the unit will save at least 1 cluster of storage. If compressing the unit won’t free up at least 
1 cluster, NTFS allocates a 16-cluster run and writes the data in that unit to disk without compressing 
it. If the data in a 16-cluster unit will compress to 15 or fewer clusters, NTFS allocates only the number 
of clusters needed to contain the compressed data and then writes it to disk. Figure 11-47 illustrates 
the compression of a file with four runs. The unshaded areas in this figure represent the actual storage 
locations that the file occupies after compression. The first, second, and fourth runs were compressed; 
the third run wasn’t. Even with one noncompressed run, compressing this file saved 26 clusters of disk 
space, or 41%.
0
15
19
VCN
LCN
20
21
22
16
31
23
24
25
26
27
28
29
30
32
47
112
97
98
99
100 101 102 103 104 105 106 107 108 109 110
111
48
63
113
114
115
116
117
118
119 120 121 122
Noncompressed data
Compressed data
Compressed data
Compressed data
Compressed data
Compressed data
Compressed data
FIGURE 11-47 Data runs of a compressed file.
Note Although the diagrams in this chapter show contiguous LCNs, a compression unit 
need not be stored in physically contiguous clusters. Runs that occupy noncontiguous clus-
ters produce slightly more complicated MFT records than the one shown in Figure 11-47.
674
CHAPTER 11
Caching and file systems
When it writes data to a compressed file, NTFS ensures that each run begins on a virtual 16-cluster 
boundary. Thus the starting VCN of each run is a multiple of 16, and the runs are no longer than 16 clus-
ters. NTFS reads and writes at least one compression unit at a time when it accesses compressed files. 
When it writes compressed data, however, NTFS tries to store compression units in physically contigu-
ous locations so that it can read them all in a single I/O operation. The 16-cluster size of the NTFS com-
pression unit was chosen to reduce internal fragmentation: the larger the compression unit, the less the 
overall disk space needed to store the data. This 16-cluster compression unit size represents a trade-off 
between producing smaller compressed files and slowing read operations for programs that randomly 
access files. The equivalent of 16 clusters must be decompressed for each cache miss. (A cache miss is 