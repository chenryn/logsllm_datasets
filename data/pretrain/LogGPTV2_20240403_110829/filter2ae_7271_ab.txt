### LC_CODE_SIGNATURE
Signature Command指定当前文件的签名信息，没有单独的结构体，而是使用下面这个结构来表示:
    struct linkedit_data_command {    uint32_t  cmd;        /* LC_CODE_SIGNATURE, LC_SEGMENT_SPLIT_INFO,                                   LC_FUNCTION_STARTS, LC_DATA_IN_CODE,                LC_DYLIB_CODE_SIGN_DRS or               LC_LINKER_OPTIMIZATION_HINT. */    uint32_t  cmdsize;    /* sizeof(struct linkedit_data_command) */    uint32_t  dataoff;    /* file offset of data in __LINKEDIT segment */    uint32_t datasize;   /* file size of data in __LINKEDIT segment  */ }; 
cmd/cmdsize和前面LC_SEGMENT的含义类似，只不过cmdsize是个常数，等于当前结构体的大小。 _dataoff_
表示前面信息在LINKEDIT数据中的偏移，注意这里不是相对文件头的偏移； _datasize_ 则表示签名信息的大小。
苹果的签名数据格式并不是常规类型，对其详细介绍超过了本文的范围，对于具体的签名实现有兴趣的可以参考Jonathan大神的`*OS
Internal`或者[Code Signing – Hashed
Out](http://www.newosxbook.com/articles/CodeSigning.pdf)。使用jtool工具可以打印出详细的签名信息，如下所示:
    $ jtool2 --sig -v main An embedded signature of 1953 bytes, with 3 blobs: Blob 0: Type: 0 @36: Code Directory (213 bytes)   Version:     20100  Flags:       none   CodeLimit:   0x22c0     Identifier:  main (@0x30)   CDHash:      f3d8c9a75487ecc6f3adbddca11ad987a171e8974e6df15e857d2ac962e4b886 (computed)    # of hashes: 3 code (4K pages) + 2 special  Hashes @117 size: 32 Type: SHA-256 Blob 1: Type: 2 @249: Requirement Set (80 bytes) with 1 requirement: Unknown opcode 14 - has Apple changed the op codes?Please notify J!     0: Designated Requirement (@20, 48 bytes): Ident(main) AND Blob 2: Type: 10000 @329: Blob Wrapper (1624 bytes) (0x10000 is CMS (RFC3852) signature)     Timestamp: 00:12:38 2020/09/06 
当然官方的`codesign -d`也可以。
### LC_DYLD_INFO_ONLY
这个Command的信息主要是提供给动态链接器`dyld`的，其结构如下:
    struct dyld_info_command {   uint32_t   cmd;        /* LC_DYLD_INFO or LC_DYLD_INFO_ONLY */   uint32_t   cmdsize;       /* sizeof(struct dyld_info_command) */   uint32_t   rebase_off; /* file offset to rebase info  */   uint32_t   rebase_size; /* size of rebase info   */   uint32_t   bind_off;  /* file offset to binding info   */   uint32_t   bind_size; /* size of binding info  */  uint32_t   weak_bind_off;  /* file offset to weak binding info   */   uint32_t   weak_bind_size;  /* size of weak binding info  */   uint32_t   lazy_bind_off; /* file offset to lazy binding info */   uint32_t   lazy_bind_size;  /* size of lazy binding infs */   uint32_t   export_off;   /* file offset to lazy binding info */   uint32_t   export_size;    /* size of lazy binding infs */ } 
虽然看起来很复杂，但实际上它的目的就是为了给dyld提供能够加载目标MachO所需要的必要信息:
因为可能加载到随机地址，所以需要rebase信息；如果进程依赖其他镜像的符号，则绑定需要bind信息；对于C++程序而言可能需要weak
bind实现代码/数据复用；对于一些外部符号不需要立即绑定的可以延时加载，这就需要lazy bind信息；对于导出符号也需要对应的export信息。
为了描述这些rebase/bind信息，dyld定义了一套伪指令，用来描述具体的操作(opcode)及其操作数据。以延时绑定为例，操作符看起来是这样:
其表达的实际含义用中文来描述就是:
  1. `_printf`符号(来自`libSystem.B.dylib`)延时绑定到`0x1018`偏移地址；
  2. `_set_foo`符号(来自`libfoo.dylib`)延时绑定到`0x1020`偏移地址；
其中0x1018/0x1020地址在`__DATA`段，更准确来说是在`__la_symbol_ptr`这个section中，可以自行编译验证。
### LC_XXX_DYLIB
`LC_LOAD_{,WEAK_}DYLIB`用来告诉内核(实际上是dyld)当前可执行文件需要使用哪些动态库，而其结构如下:
    struct dylib {    union lc_str  name;           /* library's path name */    uint32_t timestamp;            /* library's build time stamp */    uint32_t current_version;       /* library's current version number */    uint32_t compatibility_version;   /* library's compatibility vers number*/ }; struct dylib_command { uint32_t cmd;        /* LC_ID_DYLIB, LC_LOAD_{,WEAK_}DYLIB, LC_REEXPORT_DYLIB */ uint32_t    cmdsize;    /* includes pathname string */ struct dylib dylib;      /* the library identification */ }; 
动态库(filetype为`MH_DYLIB`)中会包含 `LC_ID_DYLIB` command
来说明自己是个什么库，包括名称、版本、时间戳等信息。需要注意的是`lc_str`并不是字符串本身，而是字符串的偏移值，字符串信息在command的内容之后，该偏移指的是距离
**command起始位置** 的偏移。
> `LC_REEXPORT_DYLIB`表示加载并重新导出dylib
### 其他
除了上面的介绍，还有许多其他类型的 command
，比如`LC_FUNCTION_STARTS`表示函数入口地址，`LC_MAIN`表示主函数地址，`LC_ENCRYPTION_INFO`表示加密的segment段等等，可以在遇到的时候用查看`loader.h`的定义，这里就不再赘述了。
# 加载过程
MachO的加载和ELF的加载过程没有太大区别，还是`系统调用->内核处理->返回执行`的一般流程，对于静态链接程序返回执行是直接返回到程序入口地址，而动态链接程序则需要在程序开始执行之前进行重定向，因此这里也按照这个顺序介绍。
## 内核空间
内核空间的主要任务是创建新taks并初始化内存页和对应的权限，我们主要关注MachO文件的处理部分，即`parse_machfile`函数，文件为[bsd/kern/mach_loader.c][src]，其主要功能为检查header以及cmdsize等长度符合预期，然后通过4次循环来处理不同的信息，如下:
        /*  *  Scan through the commands, processing each one as necessary.  *  We parse in three passes through the headers:  *  0: determine if TEXT and DATA boundary can be page-aligned  *  1: thread state, uuid, code signature  *  2: segments  *  3: dyld, encryption, check entry point  */ 
这里重点关注pass2，关键代码如下:
其中很多command比如`LC_LOAD_DYLIB`、`LC_DYLD_INFO_ONLY`等不在内核态中进行处理，直接进入default分支忽略。
### load_segment
这个函数主要负责加载segment到内存中，实现有几个值得一提的点:
  * total_section_size = lcp->cmdsize - sizeof(struct segment_command_64)；这是文件后面section的大小
  * LC_SEGMENT_32会转换为LC_SEGMENT_64，使用widen_segment_command
  * 映射的内存地址是`slide + scp->vmaddr`，slide为随机化的地址偏移(如果有的话)，映射的内存大小是`scp->vmsize`
  * 文件中对应内容起始位置是`scp->fileoff`，大小为`scp->filesize`
  * file_offset = pager_offset + scp->fileoff，是该segment在内核空间中的地址，需要页对齐
  * 对于0地址页的映射，由于用户空间不能访问，因此直接增加了vm能访问的最低地址值(vm_map_raise_min_offset)，仅允许对`PAGEZERO`段执行0地址的映射命令
对于映射的地址和大小，都需要是4k页对齐的，并且最终使用`map_segment`进行映射:
    file_start = vm_map_trunc_page(file_offset, effective_page_mask); file_end = vm_map_round_page(file_offset + file_size, effective_page_mask); vm_start = vm_map_trunc_page(vm_offset, effective_page_mask); vm_end = vm_map_round_page(vm_offset + vm_size, effective_page_mask); ret = map_segment(map, vm_start, vm_end, control, file_start, file_end,                  initprot, maxprot, result); 
根据对代码的分析，内核中并不关心具体section的内容，即不解析单个section头的具体字段，而是以segment为单位进行映射。一般而言映射的是具体内容的值，比如`__DATA`段就映射了数据段。前面也说过`__TEXT`段比较特别，它是从文件开头开始映射的，一直到代码段的末尾(数据段的开头)。
### load_code_signature
MachO和ELF的一个最大不同点，或者说XNU和Linux的不同点是前者原生支持了对可执行文件的签名认证，文件的签名信息保存在LINKEDIT数据段，在前面我们已经介绍过了`LC_CODE_SIGNATURE`的内容。
### load_dylinker
`load_main`函数主要用来处理`LC_MAIN`命令，这里面包括了可执行文件的入口地址以及栈大小信息。但是在内核中并不需要关心main函数信息，而只需要关心入口信息(entry_point)。因此在load_main中只对栈和线程进行初始化，并且修改对应的result信息:
        result->user_stack = addr; result->user_stack -= slide;     result->needs_dynlinker = TRUE; result->using_lcmain = TRUE;    ret = thread_state_initialize( thread ); 
此时`result->entry_point`还是0(MACH_VM_MIN_ADDRESS)。
>
> 另外一个能决定入口地址的command是`LC_UNIXTHREAD`，类似于UNIX中直接将`start`符号导出，该符号应该是在`crt1.o`里的，但苹果并不默认提供。也就是说如果想要静态编译，需要自己下载源文件自己去编译，或者自己链接并导出这个符号。苹果不支持静态编译的原因是出于兼容性的考虑。
在load_main结束后，需要加载动态链接器:
            /* Make sure if we need dyld, we got it */  if (result->needs_dynlinker && !dlp) {      ret = LOAD_FAILURE;     }       if ((ret == LOAD_SUCCESS) && (dlp != 0)) {      /*       * load the dylinker, and slide it by the independent DYLD ASLR          * offset regardless of the PIE-ness of the main binary.         */         ret = load_dylinker(dlp, dlarchbits, map, thread, depth,                    dyld_aslr_offset, result, imgp);    } 
动态链接器就是`dyld`，在`LC_LOAD_DYLINKER`命令中指定，通常是`/usr/lib/dyld`。load_dylinker内部也同样调用了`parse_machfile`函数，因此大部分操作是类似的。注意到这里其实涉及到了递归调用，因此需要在该函数中加depth参数表示递归层数。
dyld文件中有`LC_UNIXTHREAD`命令，因此其`result->entry_point`将被设置，在原先的parse_mach返回到load_machfile后，则初始化新的内核task并将执行流交还给用户空间，对于大部分程序而言，就是跳转到dyld的起始地址执行。
## 用户空间
从内核回到用户空间，便跳转到目标的入口地址开始执行。对于静态链接链接程序，实际上执行的是dyld中的指令，该程序的源码可以参考[opensource-apple/dyld](https://github.com/opensource-apple/dyld)。
dyld的起始地址固定为`0x1000`，这个地址对应的符号是`__dyld_start`，文件定义在`src/dyldStartup.s`。这部分代码和`crt0.o`中的代码是一样的，主要是用来初始化C