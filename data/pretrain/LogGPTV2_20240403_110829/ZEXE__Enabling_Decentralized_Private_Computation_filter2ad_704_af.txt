NIZK and an instance-witness pair
instance x, and proof π,
NIZK.
NIZK,
NIZK.Verify outputs a decision bit.
Completeness states that honestly generated proofs make the
veriﬁer accept; (computational) proof of knowledge states that
if the veriﬁer accepts a proof for an instance then the prover
“knows” a witness for it; and perfect zero knowledge states that
honestly generated proofs can be perfectly simulated, when
given a trapdoor to the public parameters. In fact, we require
a strong form of (computational) proof of knowledge known
as simulation-extractability, which states that proofs continue
to be proofs of knowledge even when the adversary has seen
prior simulated proofs. For more details, see [Sah99; DDO+01;
Gro06].
Remark B.1. If NIZK is additionally succinct (i.e., it is
a simulation-extractable zkSNARK) then the DPC scheme
constructed in this section is also succinct. This is the case in
our implementation; see Section VI.
B. Algorithms
e
).
CRH, pp
Pseudocode for our construction of a DPC scheme is in
Fig. 9. The construction involves invoking zero knowledge
proofs for the NP relation Re described in Fig. 10. The text
below is a summary of the construction.
System setup. DPC.Setup is a wrapper around the setup algo-
rithms of cryptographic building blocks. It invokes CM.Setup,
TCM.Setup, CRH.Setup, and NIZK.Setup to obtain (plain and
trapdoor) commitment public parameters pp
TCM,
CM and pp
CRH, and NIZK public parameters for
CRH public parameters pp
the NP relation Re (see Fig. 10). It then outputs pp := (pp
CM,
TCM, pp
pp
Address creation. DPC.GenAddress constructs an address
key pair as follows. The address secret key ask = (skPRF, rpk)
consists of a seed skPRF for the pseudorandom function PRF
and commitment randomness rpk. The address public key apk
is a hiding commitment to skPRF with randomness rpk.
Execution. DPC.Execute produces a transaction attesting
that some old records [ri]m
1 were consumed and some new
records [rj]n
1 were created, and that their death and birth
predicates were satisﬁed. First, DPC.Execute computes a ledger
membership witness and serial number for every old record.
Then, DPC.Execute invokes the following auxiliary function
to create record commitments for the new records.
DPC.ConstructRecord(pp, apk, payload, Φb, Φd, ρ) → (r, cm)
1) Sample new commitment randomness r.
2) Assemble new record commitment contents: m := (apk(cid:6)payload(cid:6)Φb(cid:6)Φd(cid:6)ρ).
3) Construct new record commitment: cm ← TCM.Commit(ppTCM
(cid:3)
4) Assemble new record
, m; r).
(cid:2)
address public key apk
payload payload
comm. rand. r
serial number nonce ρ
predicates (Φb, Φd) commitment cm
.
r :=
5) Output (r, cm).
Information about all records, secret addresses of old records,
the desired transaction memorandum memo, and desired
auxiliary predicate input aux are collected into the local data
ldata (see Fig. 10).
Finally, DPC.Execute produces a proof that all records are
well-formed and that several conditions hold.
• Old records are properly consumed, namely, for every old
record ri ∈ [ri]m
1 :
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
960
prime
s
r
t
p
q
value
0x4aad957a68b2955982d1347970dec005293a3afc43c8afeb95aee9ac33fd9ff
0x12ab655e9a2ca55660b44d1e5c37b00159aa76fed00000010a11800000000001
0x35c748c2f8a21d58c760b80d94292763445b3e601ea271e1
d75fe7d6eeb84234066d10f5d893814103486497d95295
0x1ae3a4617c510eac63b05c06ca1493b1a22d9f300f5138f1
ef3622fba094800170b5d44300000008508c00000000001
0x3848c4d2263babf8941fe959283d8f526663bc5d176b746a
f0266a7223ee72023d07830c728d80f9d78bab3596c8617c57
9252a3fb77c79c13201ad533049cfe6a399c2f764a12c4024b
ee135c065f4d26b7545d85c16dfd424adace79b57b942ae9
Fig. 8: The elliptic curves EBLS, ECP, EEd/BLS, EEd/CP.
size in bits
251
2-adicity
1
253
374
377
782
47
2
46
3
– (if ri is not dummy) ri exists, demonstrated by checking
a ledger membership witness for ri’s commitment;
– ri has not been consumed, demonstrated by publishing
ri’s serial number sni;
– ri’s death predicate Φd,i is satisﬁed, demonstrated by
checking that Φd,i(i(cid:4)ldata) = 1.
• New records are property created, namely, for every new
record rj ∈ [rj]n
1 :
– rj’s serial number is unique, achieved by generating the
nonce ρj as CRH.Eval(pp
– rj’s birth predicate Φb,j is satisﬁed, demonstrated by
checking that Φb,j(j(cid:4)ldata) = 1.
CRH, j(cid:4)sn1(cid:4) . . .(cid:4)snm);
The serial number sn of a record r relative to an address secret
key ask = (skPRF, rpk) is derived by evaluating PRF at r’s
serial number nonce ρ with seed skPRF. This ensures that sn is
pseudorandom even to a party that knows all of r but not ask
(e.g., to a party that created the record for some other party).
Note that each predicate receives its own position as input so
that it knows to which record in the local data it belongs.
References
[ADM+14a] M. Andrychowicz et al. “Fair Two-Party Com-
putations via Bitcoin Deposits”. In: FC ’14.
[ADM+14b] M. Andrychowicz et al. “Secure Multiparty
[AFK+12]
[Air]
[AKR+13]
[ANW+13]
[BAZ+19]
[BBB+18]
[BBD+17]
Computations on Bitcoin”. In: SP ’14.
D. F. Aranha et al. “Implementing Pairings at
the 192-Bit Security Level”. In: Pairing ’12.
“AirSwap”. https://www.airswap.io/. Accessed
2018-12-27.
E. Androulaki et al. “Evaluating User Privacy
in Bitcoin”. In: FC ’13.
J. Aumasson et al. “BLAKE2: Simpler, Smaller,
Fast as MD5”. In: ACNS ’13.
B. Bünz et al. “Zether: Towards Privacy in a
Smart Contract World”. https://crypto.stanford.
edu/~buenz/papers/zether.pdf.
B. Bünz et al. “Bulletproofs: Short Proofs
for Conﬁdential Transactions and More”. In:
S&P ’18.
I. Bentov et al. “The Cost of Decentralization in
0x and EtherDelta”. http://hackingdistributed.
com/2017/08/13/cost- of- decent/. Accessed
2019-01-03.
[BCC+13]
[BCC+16]
[BCG+13]
[BCG+14]
[BCG+15]
[BCS16]
[BCT+14]
[BCT+17]
[BDJ+17]
[BGG18]
[BGM17]
[Bin]
[Bit15]
[BKM17]
[BLS02]
N. Bitansky et al. “Recursive Composition and
Bootstrapping for SNARKs and Proof-Carrying
Data”. In: STOC ’13.
J. Bootle et al. “Eﬃcient Zero-Knowledge Ar-
guments for Arithmetic Circuits in the Discrete
Log Setting”. In: EUROCRYPT ’16.
E. Ben-Sasson et al. “SNARKs for C: verifying
program executions succinctly and in zero
knowledge”. In: CRYPTO ’13.
E. Ben-Sasson et al. “Zerocash: Decentral-
ized Anonymous Payments from Bitcoin”. In:
SP ’14.
E. Ben-Sasson et al. “Secure Sampling of
Public Parameters for Succinct Zero Knowledge
Proofs”. In: SP ’15.
E. Ben-Sasson et al. “Interactive Oracle
Proofs”. In: TCC ’16-B.
E. Ben-Sasson et al. “Succinct Non-Interactive
Zero Knowledge for a von Neumann Architec-
ture”. In: USENIX ’14.
E. Ben-Sasson et al. “Scalable Zero Knowledge
Via Cycles of Elliptic Curves”. In: Algorith-
mica (2017).
L. Breidenbach et al. “To Sink Frontrun-
ners, Send in the Submarines”. http : / /
hackingdistributed . com / 2017 / 08 / 28 /
submarine-sends/. Accessed 2019-01-03.
S. Bowe et al. “A multi-party protocol for con-
structing the public parameters of the Pinocchio
zk-SNARK”.
S. Bowe et al. “Scalable Multi-party Computa-
tion for zk-SNARK Parameters in the Random
Beacon Model”. ePrint Report 2017/1050.
“Binance”. https:// www.binance.com/. Ac-
cessed 2019-01-03.
Bitcoin. “Some miners generating invalid
blocks”. https:// bitcoin.org/ en/ alert/ 2015-
07-04-spv-mining.
I. Bentov et al. “Instantaneous Decentralized
Poker”. In: ASIACRYPT ’17.
P. Barreto et al. “Constructing Elliptic Curves
with Prescribed Embedding Degrees”.
In:
SCN ’02.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
961
DPC.Setup
Input: security parameter 1λ
Output: public parameters pp
DPC.GenAddress
Input: public parameters pp
Output: address key pair (apk, ask)
ppCM
1) Generate commitment parameters:
← CM.Setup(1λ), ppTCM
← TCM.Setup(1λ).
← CRH.Setup(1λ).
2) Generate CRH parameters: ppCRH
3) Generate NIZK parameters for Re (see Figure 10):
4) Output pp := (ppCM
← NIZK.Setup(1λ, Re).
, ppTCM
, ppCRH
, ppe
ppe
).
1) Sample secret key skPRF for pseudorandom function PRF.
2) Sample randomness rpk for commitment scheme CM.
3) Set address public key
apk := CM.Commit(ppCM
, skPRF; rpk).
4) Set address secret key ask := (skPRF, rpk).
5) Output (apk, ask).
L
DPC.Execute
Input:
• public parameters pp
records [ri]m
• old
address secret keys [aski]m
address public keys [apkj ]n
record payloads [payloadj ]n
record birth predicates [Φb,j ]n
record death predicates [Φd,j ]n
(cid:2)
⎧⎪⎪⎨
⎪⎪⎩
• new
1
1
1
1
1
1
• auxiliary predicate input aux
• transaction memorandum memo
Output: new records [rj ]n
1) For each i ∈ {1, . . . , m}, process the i-th old record as follows:
1 and transaction tx
(cid:7)
address public key
serial number nonce
apki
ρi
.
If payloadi.isDummy = 0, compute ledger membership witness for commitment: wL,i ← L.Prove(cmi).
a) Parse old record ri as
b) If payloadi.isDummy = 1, set ledger membership witness wL,i := ⊥.
c) Parse address secret key aski as (skPRF,i, rpk,i).
d) Compute serial number: sni ← PRFskPRF,i
(ρi).
a) Compute serial number nonce: ρj := CRH.Eval(ppCRH
b) Construct new record: (rj , cmj ) ← DPC.ConstructRecord(ppTCM
2) For each j ∈ {1, . . . , n}, construct the j-th new record as follows:
, apkj , payloadj , Φb,j , Φd,j , ρj ).
, j(cid:7)sn1(cid:7) . . . (cid:7)snm).
comm. rand.
commitment
ri
cmi
payload
predicates
payloadi
(Φb,i, Φd,i)
(cid:8)
3) Retrieve current ledger digest: stL ← L.Digest.
4) Construct instance xe for Re: xe := (stL, [sni]m
5) Construct witness we for Re: we := ([ri]m
6) Generate proof for Re: πe ← NIZK.Prove(ppe
7) Construct transaction: tx := ([sni]m
1 , [cmj ]n
8) Output ([rj ]n
1 , tx).
1 , [cmj ]n
1 , memo).
1 , [wL,i]m
1 , [aski]m
1 , [rj ]n
1 , aux).
, xe, we).
1 , memo, (cid:4)), where (cid:4) := (stL, πe).
L
DPC.Verify
Input: public parameters pp and transaction tx
Output: decision bit b
1) Parse tx as ([sni]m
2) Check that there are no duplicate serial numbers
1 , [cmj ]n
1 , memo, (cid:4)) and (cid:4) as (stL, πe).
a) within the transaction tx: sni (cid:8)= snj for every distinct i, j ∈ {1, . . . , m};
b) on the ledger: L.Contains(sni) = 0 for every i ∈ {1, . . . , m}.
3) Check that the ledger state is valid: L.ValidateDigest(stL) = 1.
4) Construct instance for the relation Re: xe := (stL, [sni]m
1 , [cmj ]n
5) Check proof for the relation Re: NIZK.Verify(ppe
1 , memo).
, xe, πe) = 1.
Fig. 9: Construction of a DPC scheme.
[Bow17a]
[Bow17b]
[CCW19]
[CFQ19]
[Cha14]
S. Bowe. “Bellman”. url: https://github.com/
zkcrypto/bellman.