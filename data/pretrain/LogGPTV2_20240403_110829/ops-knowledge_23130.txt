User: I help with streaming video production on a weekly basis. We stream live video to a number of satellite locations in the Dallas area. In order to ensure that all of the receiving locations are on the same schedule as the broadcasting location we use a desktop clock/timer application and the remote locations VNC into that desktop to see the clock. 
I would like to replace the current timer application with a web based one so that we can get rid of the inherently fragile VNC solution. 
Here are my requirements:

Single master clock that is always running (no users need be logged in for clock to continue running)
The variance between what any given viewer sees and the actual time on the master clock can not be greater than 1 second.
Any changes made to the master clock/countdown timer/countup timer need to be seen by all viewers near instantly. 

Here is my question:
I know enough java and python to be dangerous. But I've never written a web app that requires real time syncing between the server and the client like this. I'm looking for some recommendations on how to architect a web application that meets the above requirements. Any suggestions on languages, libraries, articles, or blogs that can point me in the right direction would be appreciated. One caveat though: I would prefer to avoid using Java EE or .Net if possible.
Assistant: Single master clock that is always running (no users need be logged in for clock to continue running)

That's not hard.

The variance between what any given viewer sees and the actual time on the master clock can not be greater than 1 second.

That's pretty much impossible.  You can take into account network delays and such , but you can't ensure this.

Any changes made to the master clock/countdown timer/countup timer need to be seen by all viewers near instantly.

You could do that with sockets, or you could just keep polling the server...
do a websearch for "javascript ntp".  There are a handful of libraries that will do most of what you want ( and i'd argue, enough of what you want ).  
most work like this:

try to calculate the offset of the local clock to the master clock
continually poll master clock for time, trying to figure out the average delay
show the time based on fancy math of local vs master clock.

years ago i worked on some flash-based chat rooms.  a SWF established a socket connection to a TwistedPython server.  that worked well enough for our needs, but we didn't care about latency.