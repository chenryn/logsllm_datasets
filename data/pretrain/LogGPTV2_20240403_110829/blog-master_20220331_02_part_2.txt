SELECT JSON_VALUE(jsonb '"\"aaa\""', '$' RETURNING json);  
 json_value   
------------  
 "\"aaa\""  
(1 row)  
SELECT JSON_VALUE(jsonb '"\"aaa\""', '$' RETURNING jsonb);  
 json_value   
------------  
 "\"aaa\""  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING int);  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING int ERROR ON ERROR);  
ERROR:  invalid input syntax for type integer: "aaa"  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING int DEFAULT 111 ON ERROR);  
 json_value   
------------  
        111  
(1 row)  
SELECT JSON_VALUE(jsonb '"123"', '$' RETURNING int) + 234;  
 ?column?   
----------  
      357  
(1 row)  
SELECT JSON_VALUE(jsonb '"2017-02-20"', '$' RETURNING date) + 9;  
  ?column?    
------------  
 03-01-2017  
(1 row)  
-- Test NULL checks execution in domain types  
CREATE DOMAIN sqljsonb_int_not_null AS int NOT NULL;  
SELECT JSON_VALUE(jsonb '1', '$.a' RETURNING sqljsonb_int_not_null);  
ERROR:  domain sqljsonb_int_not_null does not allow null values  
SELECT JSON_VALUE(jsonb '1', '$.a' RETURNING sqljsonb_int_not_null NULL ON ERROR);  
ERROR:  domain sqljsonb_int_not_null does not allow null values  
SELECT JSON_VALUE(jsonb '1', '$.a' RETURNING sqljsonb_int_not_null DEFAULT NULL ON ERROR);  
ERROR:  domain sqljsonb_int_not_null does not allow null values  
SELECT JSON_VALUE(jsonb '[]', '$');  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '[]', '$' ERROR ON ERROR);  
ERROR:  JSON path expression in JSON_VALUE should return singleton scalar item  
SELECT JSON_VALUE(jsonb '{}', '$');  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '{}', '$' ERROR ON ERROR);  
ERROR:  JSON path expression in JSON_VALUE should return singleton scalar item  
SELECT JSON_VALUE(jsonb '1', '$.a');  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'strict $.a' ERROR ON ERROR);  
ERROR:  jsonpath member accessor can only be applied to an object  
SELECT JSON_VALUE(jsonb '1', 'strict $.a' DEFAULT 'error' ON ERROR);  
 json_value   
------------  
 error  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'lax $.a' ERROR ON ERROR);  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'lax $.a' ERROR ON EMPTY ERROR ON ERROR);  
ERROR:  no SQL/JSON item  
SELECT JSON_VALUE(jsonb '1', 'strict $.a' DEFAULT 2 ON ERROR);  
 json_value   
------------  
 2  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'lax $.a' DEFAULT 2 ON ERROR);  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'lax $.a' DEFAULT '2' ON ERROR);  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'lax $.a' NULL ON EMPTY DEFAULT '2' ON ERROR);  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'lax $.a' DEFAULT '2' ON EMPTY DEFAULT '3' ON ERROR);  
 json_value   
------------  
 2  
(1 row)  
SELECT JSON_VALUE(jsonb '1', 'lax $.a' ERROR ON EMPTY DEFAULT '3' ON ERROR);  
 json_value   
------------  
 3  
(1 row)  
SELECT JSON_VALUE(jsonb '[1,2]', '$[*]' ERROR ON ERROR);  
ERROR:  JSON path expression in JSON_VALUE should return singleton scalar item  
SELECT JSON_VALUE(jsonb '[1,2]', '$[*]' DEFAULT '0' ON ERROR);  
 json_value   
------------  
 0  
(1 row)  
SELECT JSON_VALUE(jsonb '[" "]', '$[*]' RETURNING int ERROR ON ERROR);  
ERROR:  invalid input syntax for type integer: " "  
SELECT JSON_VALUE(jsonb '[" "]', '$[*]' RETURNING int DEFAULT 2 + 3 ON ERROR);  
 json_value   
------------  
          5  
(1 row)  
SELECT JSON_VALUE(jsonb '["1"]', '$[*]' RETURNING int DEFAULT 2 + 3 ON ERROR);  
 json_value   
------------  
          1  
(1 row)  
SELECT  
	x,  
	JSON_VALUE(  
		jsonb '{"a": 1, "b": 2}',  
		'$.* ? (@ > $x)' PASSING x AS x  
		RETURNING int  
		DEFAULT -1 ON EMPTY  
		DEFAULT -2 ON ERROR  
	) y  
FROM  
	generate_series(0, 2) x;  
 x | y    
---+----  
 0 | -2  
 1 |  2  
 2 | -1  
(3 rows)  
SELECT JSON_VALUE(jsonb 'null', '$a' PASSING point ' (1, 2 )' AS a);  
 json_value   
------------  
 (1,2)  
(1 row)  
SELECT JSON_VALUE(jsonb 'null', '$a' PASSING point ' (1, 2 )' AS a RETURNING point);  
 json_value   
------------  
 (1,2)  
(1 row)  
-- Test timestamptz passing and output  
SELECT JSON_VALUE(jsonb 'null', '$ts' PASSING timestamptz '2018-02-21 12:34:56 +10' AS ts);  
          json_value            
------------------------------  
 Tue Feb 20 18:34:56 2018 PST  
(1 row)  
SELECT JSON_VALUE(jsonb 'null', '$ts' PASSING timestamptz '2018-02-21 12:34:56 +10' AS ts RETURNING timestamptz);  
          json_value            
------------------------------  
 Tue Feb 20 18:34:56 2018 PST  
(1 row)  
SELECT JSON_VALUE(jsonb 'null', '$ts' PASSING timestamptz '2018-02-21 12:34:56 +10' AS ts RETURNING timestamp);  
        json_value          
--------------------------  
 Tue Feb 20 18:34:56 2018  
(1 row)  
SELECT JSON_VALUE(jsonb 'null', '$ts' PASSING timestamptz '2018-02-21 12:34:56 +10' AS ts RETURNING json);  
         json_value            
-----------------------------  
 "2018-02-21T02:34:56+00:00"  
(1 row)  
SELECT JSON_VALUE(jsonb 'null', '$ts' PASSING timestamptz '2018-02-21 12:34:56 +10' AS ts RETURNING jsonb);  
         json_value            
-----------------------------  
 "2018-02-21T02:34:56+00:00"  
(1 row)  
-- JSON_QUERY  
SELECT  
	JSON_QUERY(js, '$'),  
	JSON_QUERY(js, '$' WITHOUT WRAPPER),  
	JSON_QUERY(js, '$' WITH CONDITIONAL WRAPPER),  
	JSON_QUERY(js, '$' WITH UNCONDITIONAL ARRAY WRAPPER),  
	JSON_QUERY(js, '$' WITH ARRAY WRAPPER)  
FROM  
	(VALUES  
		(jsonb 'null'),  
		('12.3'),  
		('true'),  
		('"aaa"'),  
		('[1, null, "2"]'),  
		('{"a": 1, "b": [2]}')  
	) foo(js);  
     json_query     |     json_query     |     json_query     |      json_query      |      json_query        
--------------------+--------------------+--------------------+----------------------+----------------------  
 null               | null               | [null]             | [null]               | [null]  
 12.3               | 12.3               | [12.3]             | [12.3]               | [12.3]  
 true               | true               | [true]             | [true]               | [true]  
 "aaa"              | "aaa"              | ["aaa"]            | ["aaa"]              | ["aaa"]  
 [1, null, "2"]     | [1, null, "2"]     | [1, null, "2"]     | [[1, null, "2"]]     | [[1, null, "2"]]  
 {"a": 1, "b": [2]} | {"a": 1, "b": [2]} | {"a": 1, "b": [2]} | [{"a": 1, "b": [2]}] | [{"a": 1, "b": [2]}]  
(6 rows)  
SELECT  
	JSON_QUERY(js, 'strict $[*]') AS "unspec",  
	JSON_QUERY(js, 'strict $[*]' WITHOUT WRAPPER) AS "without",  
	JSON_QUERY(js, 'strict $[*]' WITH CONDITIONAL WRAPPER) AS "with cond",  
	JSON_QUERY(js, 'strict $[*]' WITH UNCONDITIONAL ARRAY WRAPPER) AS "with uncond",  
	JSON_QUERY(js, 'strict $[*]' WITH ARRAY WRAPPER) AS "with"  
FROM  
	(VALUES  
		(jsonb '1'),  
		('[]'),  
		('[null]'),  
		('[12.3]'),  
		('[true]'),  
		('["aaa"]'),  
		('[[1, 2, 3]]'),  
		('[{"a": 1, "b": [2]}]'),  
		('[1, "2", null, [3]]')  
	) foo(js);  
       unspec       |      without       |      with cond      |     with uncond      |         with           
--------------------+--------------------+---------------------+----------------------+----------------------  
                    |                    |                     |                      |   
                    |                    |                     |                      |   
 null               | null               | [null]              | [null]               | [null]  
 12.3               | 12.3               | [12.3]              | [12.3]               | [12.3]  
 true               | true               | [true]              | [true]               | [true]  
 "aaa"              | "aaa"              | ["aaa"]             | ["aaa"]              | ["aaa"]  
 [1, 2, 3]          | [1, 2, 3]          | [1, 2, 3]           | [[1, 2, 3]]          | [[1, 2, 3]]  
 {"a": 1, "b": [2]} | {"a": 1, "b": [2]} | {"a": 1, "b": [2]}  | [{"a": 1, "b": [2]}] | [{"a": 1, "b": [2]}]  
                    |                    | [1, "2", null, [3]] | [1, "2", null, [3]]  | [1, "2", null, [3]]  
(9 rows)  
SELECT JSON_QUERY(jsonb '"aaa"', '$' RETURNING text);  
 json_query   
------------  
 "aaa"  
(1 row)  
SELECT JSON_QUERY(jsonb '"aaa"', '$' RETURNING text KEEP QUOTES);  
 json_query   
------------  
 "aaa"  
(1 row)  
SELECT JSON_QUERY(jsonb '"aaa"', '$' RETURNING text KEEP QUOTES ON SCALAR STRING);  
 json_query   
------------  
 "aaa"  
(1 row)  
SELECT JSON_QUERY(jsonb '"aaa"', '$' RETURNING text OMIT QUOTES);  
 json_query   
------------  
 aaa  
(1 row)  
SELECT JSON_QUERY(jsonb '"aaa"', '$' RETURNING text OMIT QUOTES ON SCALAR STRING);  
 json_query   
------------  
 aaa  
(1 row)  
SELECT JSON_QUERY(jsonb '"aaa"', '$' OMIT QUOTES ERROR ON ERROR);  
ERROR:  invalid input syntax for type json  
DETAIL:  Token "aaa" is invalid.  
CONTEXT:  JSON data, line 1: aaa  
SELECT JSON_QUERY(jsonb '"aaa"', '$' RETURNING json OMIT QUOTES ERROR ON ERROR);  
ERROR:  invalid input syntax for type json  
DETAIL:  Token "aaa" is invalid.  
CONTEXT:  JSON data, line 1: aaa  
SELECT JSON_QUERY(jsonb '"aaa"', '$' RETURNING bytea FORMAT JSON OMIT QUOTES ERROR ON ERROR);  
 json_query   
------------  
 \x616161  
(1 row)  
-- QUOTES behavior should not be specified when WITH WRAPPER used:  
-- Should fail  
SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER OMIT QUOTES);  
ERROR:  SQL/JSON QUOTES behavior must not be specified when WITH WRAPPER is used  
LINE 1: SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER OMIT QUOTES)...  
                                                        ^  
SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER KEEP QUOTES);  
ERROR:  SQL/JSON QUOTES behavior must not be specified when WITH WRAPPER is used  
LINE 1: SELECT JSON_QUERY(jsonb '[1]', '$' WITH WRAPPER KEEP QUOTES)...  
                                                        ^  
SELECT JSON_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER KEEP QUOTES);  
ERROR:  SQL/JSON QUOTES behavior must not be specified when WITH WRAPPER is used  
LINE 1: ...N_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER KEEP QUOTE...  
                                                             ^  
SELECT JSON_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER OMIT QUOTES);  
ERROR:  SQL/JSON QUOTES behavior must not be specified when WITH WRAPPER is used  
LINE 1: ...N_QUERY(jsonb '[1]', '$' WITH CONDITIONAL WRAPPER OMIT QUOTE...  
                                                             ^  
-- Should succeed  
SELECT JSON_QUERY(jsonb '[1]', '$' WITHOUT WRAPPER OMIT QUOTES);  
 json_query   
------------  
 [1]  
(1 row)  
SELECT JSON_QUERY(jsonb '[1]', '$' WITHOUT WRAPPER KEEP QUOTES);  
 json_query   
------------  
 [1]  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]');  
 json_query   
------------  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' NULL ON EMPTY);  
 json_query   
------------  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' EMPTY ON EMPTY);  
 json_query   
------------  
 []  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' EMPTY ARRAY ON EMPTY);  
 json_query   
------------  
 []  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' EMPTY OBJECT ON EMPTY);  
 json_query   
------------  
 {}  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' ERROR ON EMPTY);  