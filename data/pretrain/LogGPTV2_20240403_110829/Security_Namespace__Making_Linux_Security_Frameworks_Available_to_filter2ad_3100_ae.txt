We thus evaluate the security effectiveness of the Ap-
pArmor namespace by showing that container owners
can leverage AppArmor namespace to further conﬁne
their applications (i.e., have autonomous security con-
trol), just like running applications within a VM or di-
rectly on the native system.
We selected 20 programs that have default AppAr-
mor proﬁles in Ubuntu and run them in a container 8.
8There are ∼70 programs that have default AppArmor pro-
1434    27th USENIX Security Symposium
USENIX Association
Containers apply these proﬁles in an AppArmor names-
pace to protect their containerized applications. The na-
tive system applies lxc-start, lxc-default and
docker-default proﬁles(also shipped as a default
in Ubuntu) in the native AppArmor namespace, in or-
der to protect the host system from accidental or inten-
tional misuse of privileges inside the container. Running
them together, we evaluate whether or not the AppArmor
namespace indeed enables autonomous security control
for container, by protecting the containerized application
and the host at the same time. Results are shown in Ta-
ble 2. As shown in the table, except 4 programs (Apache,
ntp, ﬁrefox and chrome), the application proﬁles of the
other 16 programs can be directly applied to the con-
tainer on top of the host system proﬁle. This demon-
strates that our AppArmor namespace enables containers
to have autonomous security control, independent from
the host system. For the four programs, the Policy En-
gine yields DoS conﬂicting rules, which means that op-
erations of these programs might be denied by the host
proﬁle even if they are allowed by the application pro-
ﬁle. This demonstrates that 1) containers may not lever-
age AppArmor namespace to compromise the host, as
these conﬂicting operation will eventually be denied by
the system, and 2) our Policy Engine can inform the con-
tainer at policy load time such that containers will not
run into unexpected runtime resource access errors.
Conﬂict Analysis. We found that policy conﬂicts of-
ten involve operations over ﬁlesystems that are shared
across containers (e.g., /proc, /dev, /sys). The reason is
that these ﬁlesystems have been historically used as an
interface between kernel and userspace for exchanging
information. On one hand, some information on those
ﬁlesystems are security sensitive—they may break iso-
lation between containers[19]. Therefore, host system
needs to apply a security policy to govern their access.
In fact, for the default AppArmor container host proﬁles,
majority of the rules (∼60%) are for governing access to
these shared ﬁlesystems. On the other hand, applications
often need to access information on those ﬁlesystems, so
such access is allowed by their AppArmor application
proﬁle. The challenge is, however, both host’s and appli-
cation’s proﬁle are often coarse grained (e.g., ”/proc r”
for ﬁrefox). The coarse granularity of policy may be due
to the large amount of information on those ﬁlesystems,
but it creates conﬂicts.
To avoid conﬂicts, one way is to ﬁne tune security
policies, at both application side and container host side.
For example, it seems not to make much sense for ﬁrefox
to require read access to all ﬁles under /proc in order to
ﬁles in Ubuntu. They are either part of the distribution or the
apparmor-profiles package. We selected 20 that are mostly of-
ten seen running in containers.
Table 3: Latency for IMA and AppArmor namespace
to mediate mmap system call.
mmap(µs)
No security
Native
Native + 1NS
Native + 2 NS
Native + 5 NS
Native + 10 NS
IMA (stdev) AppArmor (stdev)
1.08 (0.01)
1.26 (0.01)
1.26 (0.01)
1.27 (0.01)
1.27 (0.01)
1.28 (0.01)
1.08 (0.01)
1.38 (0.01)
1.39 (0.02)
1.39 (0.02)
1.41 (0.02)
1.43 (0.02)
slowdown
0.7%
0.8%
2.2%
3.5%
function. Instead, the application developer, or the con-
tainer owner, should ﬁne tune the AppArmor policies for
their applications to enforce a least privilege. The same
applies to container host policies as well. Currently, the
AppArmor policies enforced by container hosts are less
well understood—it is not thoroughly clear which ﬁles
under shared ﬁlesystems are required by applications at
runtime and whether or not they might lead to attacks
that can break container isolation. Instead, AppArmor
host policies are often revised or extended only after an
attack is reported. Ideally, we can design a better con-
tainer host security policy by examining each and every
ﬁle under these shared ﬁlesystems and ﬁne tune it to ﬁt
the application9, but this can be an extremely challeng-
ing task given the large amount of information stored on
those shared ﬁlesystems and the diversiﬁed requirements
from the containerized applications.
A more principled way to avoid conﬂicts is to avoid
sharing. One such proposal is to design new namespaces
for other types of resources that are currently shared
across host and containers. For example, the device
namespace proposal [12] can help resolve the conﬂicts
of NTP in Table 2. As an orthogonal work, we are also
investigating if it is possible to use multi-layered ﬁlesys-
tem to conceal sharing of /proc, or at least reduce the
exposure of ﬁles under the shared ﬁlesystems.
8.2 Performance
We examine the performance of IMA and AppArmor
namespace by measuring 1) the latency for namespaces
to mediate system calls and 2) throughput of container-
ized applications. Our testbed is a Dell M620 server with
2.4Ghz CPU and 64GB memory, installed with Ubuntu
16.10. The kernel version in test is 4.8.0.
Table 3 shows our latency result. We measured com-
mon system calls that are mediated by IMA and AppAr-
mor (e.g., mmap, read, execve, write), but due to
space constraint, only mmap is shown. We evaluated the
system call latency from various settings, ranging from
no security framework to only the native system to native
system plus 10 other security namespaces (i.e., a system
call is routed to the native system and 10 other security
9Docker already provides some container host AppArmor proﬁles
ﬁne tuned towards speciﬁc applications such as Nginx [14].
USENIX Association
27th USENIX Security Symposium    1435
9 SELinux and Beyond
By investigating IMA and AppArmor, we hope the
lessons we learned can help guide future namespace
abstractions for other kernel security frameworks, and
eventually lead to a generic and uniﬁed security names-
pace design for all kernel security frameworks. There-
fore, in this section we examine challenges in applying
the design proposed in this paper to SELinux.
SELinux adopts the type enforcement model to en-
force least privilege and multi-level security on a system.
SELinux has two features that challenge security names-
pace designs. The ﬁrst is the ﬁlesystem labeling where a
system admin assigns security labels to ﬁles (i.e., by set-
ting the extended attributes of ﬁles on ﬁlesystems). The
second is the label transition where subject labels may be
changed upon executing new program.
We found the most challenging part of developing a
SELinux namespace abstraction is the ﬁlesystem label-
ing, because container ﬁlesystems may be loaded dy-
namically. One possible approach is to have the host
system admin to label all the ﬁles on a system (i.e., in-
cluding ﬁles within containers). Each SELinux names-
pace will independently enforce its policy, but its policy
must be speciﬁed using those labels pre-deﬁned by the
host system admin. This approach, however, does not
work well in practice. For example, current SELinux
policy assigns all subjects in a container with label
svirt lxc net t and all objects in a container with
label svirt sandbox file t. Such coarse granular-
ity defeats the purpose of have an SELinux namespace in
the ﬁrst place, since now each SELinux namespace has
to work with only one subject label and object label, pre-
venting them from specifying any ﬁne grained security
policies.
A more practical approach is to enable SELinux
namespaces to independently label ﬁlesystems. This
means, however, each ﬁle may be associated with
multiple security labels, depending on how many
SELinux namespaces are in control of the ﬁle. The
kernel will have to maintain the mappings between
SELinux namespaces and their views of
the se-
curity labels and present different
security labels
accordingly during enforcement. As an example, an
web server running in a container can be attached
with
native:svirt lxc net t
| container:httpd t.
The
label
svirt lxc net t is used by the host
system
during enforcement of the host’s SELinux policy and
the label httpd t is used by the container during
enforcement of the container’s SELinux policy.
labels,
two
This approach requires dynamic manipulation of se-
curity attributes associated with ﬁles during runtime. In
addition, ﬁles will have multiple SELinux security at-
tributes associated with them. There has been pushback
Figure 9: Throughput of containerized Apache with
and w/o application AppArmor proﬁle enforced.
namespaces at the same time). Results show that security
namespace introduces about 0.7% overhead in the one
namespace scenario (the most typical scenario for con-
tainer cloud) and at most 3.5% overhead even when there
are 10 security namespaces in presence. Slowdown for
read is similar to mmap. For execve and write, the
slowdown is even less obvious due execve and write
themselves take longer time to ﬁnish. The overhead
is almost linear as the number of security namespaces
grow10, because in our current implementation we used
a sequential routing to avoid intrusive modiﬁcations to
the kernel (i.e., system calls are routed sequentially to all
affected security namespaces). In theory, since security
namespaces are isolated from each other, their mediation
of system call can be paralleled leveraging multi-core to
minimize the overhead. However, for small number of
security namespaces (e.g., one or two), our experience
suggests that the added complexity of synchronization
can often outweigh the mediation latency.
We also evaluated the macro performance of AppAr-
mor namespace by measuring the throughput of a con-
tainerized Apache with and without a default AppArmor
proﬁle(on top of a host proﬁle). The result is shown
in Figure 9.
In the experiment, one host runs a sin-
gle Docker container containing the Apache and another
host runs client sending HTTP requests. As shown in the
ﬁgure, the throughput is almost identical, since 1) only
few of Apache’s system calls are actually mediated by
AppArmor and 2) latency for single system call media-
tion is very small as shown above. As a result, we be-
lieve our security namespace implementation is practical
for the container cloud use case.
10Here the number of security namespaces is not referring to the total
number of security namespaces on a system, but rather the number of
security namespaces that the Operation Router routes to.
1436    27th USENIX Security Symposium
USENIX Association
	10000	15000	20000	25000	0	50	100	150	200Requests	per	second#	of	concurrent	clientswith	app	profile	enforcedw/o	app	profile	enforcedfrom the kernel community. One reason is that by allow-
ing runtime manipulation of security attributes without
reboot and multiple security attributes at the same time,
it may add additional complexity that admins may fail
to handle properly. A consensus has yet to be reached
within the community.
Since SELinux assigns labels to both subjects and ob-
jects, it naturally enables a deﬁnition of security from
the perspective of both subject and object. Therefore,
for enforcement we envision our routing algorithm can
be applied without much modiﬁcation since it already
takes into consideration of both perspectives. One thing
to note here is that label transition is also part of the sub-
ject’s perspective, therefore when a subject wants to tran-
sition into a new label (e.g., on execution of a binary),
not only the SELinux namespace that the subject is asso-
ciated with should be made aware of the transition, but
also all the parent SELinux namespaces.
10 Related Work
VM, Library OS and Container. Virtual machine [66,
58] enables mutually distrusting parties to securely share
the same hardware platform therefore becoming one pri-
mary success story of the cloud era. However, despite
a number of research proposals [17, 21, 62, 64], perfor-
mance of VM is still not satisfying—it incurs a relatively
high spin-up latency and low density [18, 65, 37, 57]. A
more efﬁcient solution is the library OS [3, 15, 36, 45].
However, library OS often suffers from compatibility
issues for applications running inside and turning a
legacy OS into a library OS is a non-trivial task. Con-
tainer [56, 38] is considered to be an alternative. Con-
tainers incurs lower overhead than VM, and allows full
compatibility for applications running inside. There are
two types of containers, system container and applica-
tion container. A system container [33, 35, 61] wraps
an entire OS into a container, providing system admins
and developers an environment similar to traditional vir-
tualization. In contrast, an application container [13, 52]
contains a single application, allowing the application to
be developed, distributed and deployed in a simple man-
ner. Work presented in this paper can be applied to pro-
tect both types of containers.
Container Security. There are a number of security is-
sues identiﬁed for container systems. First, the container
management program (e.g., docker daemon) often runs
as a privileged daemon on a system, making it an ap-
pealing target for privilege escalation [47, 46, 48] and
confused deputy attacks [67]. To address these concerns,
solutions were proposed to enhance container manage-
ment program with authority check [67] and run it with
reduced privilege. Second, the container ecosystem of-
ten relies on a public image repository, which can often
be leveraged by adversaries to spread malware or launch
attacks (similar to issues of VM image repository [4]).
Systems such as Clair [9] and DCT [10] were proposed to
scan container images for vulnerabilities and/or malware
before they are uploaded to the public repository. Third,
a number of attacks were found that may break the iso-
lation of containers [55, 50, 51, 25]. To improve the iso-
lation, multiple security mechanisms were adopted such
as user namespace [59], seccomp [54] and capability [5].
This paper complements above lines of research by pro-
viding kernel security features as a usable function to
containers, allowing containers to address their internal
threats, much like what a VM or host can do. There is
also another line of research aiming to improve the virtu-
alization of container systems. For example, the device
namespace abstraction [11] virtualizes physical devices
on a system. The time namespace [27] abstraction pro-
vides virtualized clocks for containers. Security names-
pace abstraction follows this line of research. But instead