variability of the content, we set up a simple experiment. We se-
lected the top 1000 most popular objects for each device type, i.e.,
the content requested by the majority of the devices in the data set,
with each set of objects requested once per hour from a PC over
a day. Comparing the objects returned we found that for 95% of
347Top AdMob Android Apps
Category
Arcade
System Tools
Sports
Arcade
Arcade
Angry Birds
Advanced Task Killer
Soccer Scores (FotMob)
Drag Racing
Bubble Blast
Rank App Name
1
2
3
4
5
Rank App Name
TV Guide
1
Grindr
2
iFooty
3
4
Words with Friends
Solitaire
5
Top AdMob iPhone Apps
Category
Entertainment
Dating
Sports
Arcade
Arcade
Users (%)
11.48
9.77
3.53
2.69
2.69
Users (%)
5.96
4.21
4.01
3.51
2.80
Table 5: Top apps requesting AdMob ads both in Android and
iPhone. The right column indicates the percentage of users that
had installed the app out of the total users with AdMob trafﬁc
for a given platform.
the cases there are no differences and many objects in the remain-
ing 5% corresponds to scripts differing only because of timestamps
embedded in the code, proving that ad content for mobile apps is
static.
that owns it.
Inspecting the hostnames and server IPs we have noticed that
the content is usually served through Content Delivery Networks
(CDNs). For each ad service we identiﬁed the CDN/hosts they
use, measuring the amount of bytes served by the CDN/host and
normalizing the values with respect to the total volume of each
ad service. To retrieve this information we relied on a commer-
cial database provided by MaxMind3 that maps an IP address to
the name of the organization (AS, CDN, network operator, hosting
company, etc.)
In Figure 7, we report a heat map
to show the relationships between ad services and the CDN/hosts
serving their content. The y-axis reports the ad service names
sorted as in Figure 5. The services are grouped together accord-
ing to the three classes of services previously introduced: analytics
services, mediation services and ad networks. The x-axis reports
the set of organizations used by the ad services. From the market
point of view, the heat map is sparse, given that most ad services
use a different organization for serving content. Most of the ad ser-
vices are served by a single organization, except AdMob, Burstly
and Jumptap, all of which balance the volume downloaded across
2 or 3 organizations. Beside Google, the only exception is Amazon
which is preferred to Akamai by many ad services.
3.4 Greedy apps requesting ads
Trafﬁc classiﬁcation of mobile apps is not a trivial task. The
methodologies available in the literature are usually based on the
inspection of both the user agent and URL of HTTP requests [8].
However, we found these techniques inaccurate especially for An-
droid where the user agent is usually not customized by app pub-
lishers. Considering the URLs of ad trafﬁc, we noticed some pa-
rameters related to conﬁguration (e.g., format and size of the ad),
and tracking info (e.g., country code, GPS position) but we found
also some identiﬁers related to the app name generating the trafﬁc.
In particular, some ad services identify apps using a hash code, the
package name (e.g., com.rovio.angrybirds) or the real name (e.g.,
Angry Birds). While package names can be mapped to the real
name using information available on the market, this is not true
for hash codes which are created by the service when the publisher
3http://www.maxmind.com/app/organization
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
Android
All
Mediat. Serv.
Analyt. Serv.
Ad Net
 1
 0.8
 0.6
 0.4
 0.2
 0
iPhone
All
Mediat. Serv.
Analyt. Serv.
Ad Net
 1
 10
 100  1000  10000
 1
 10
 100  1000  10000
Idle [s]
Idle [s]
Figure 8: CDF of the interleave between consecutive activity
periods.
registers the app. Given these constraints, we decided to focus only
on app using AdMob since i) is the most popular ad service (as
seen in Figure 5) and ii) is the only service we found having the
documentation describing the URLs parameters related to the app
name4.
In Table 5 we report the top 5 apps, on Android and iPhone,
requesting ads from AdMob either directly using the SDK or via
mediation services. For each app listed, we detail the category and
the popularity, deﬁned as the ratio between the number of devices
using the app and the number of devices contacting AdMob. Most
of the apps listed do not require the network access to use their
intended functionality. This is the case with games such as Angry
Birds, Bubble Blast, and system tools such as Advanced Task Killer.
Other apps related to sport, TV/cinema or social networking, such
as Grindr, instead require network access to perform properly. As
we will see later in more detail, in the ﬁrst case ads not only rep-
resent a “waste” in volume but they also increase the energy con-
sumption since downloads are likely to be happening outside of
other network activity.
Comparing the device types, we notice differences in the dis-
tribution of the popularity and app categories. For Android, the
popularity is skewed with the ﬁrst two apps accounting for 20% of
all devices. For iPhone, instead the differences in the popularity
are smoother. Interestingly, Angry Birds is top for Android but it is
20th for iPhone with a popularity of only 0.66%. We also noticed
that AdMob served more ads to games on Android than to iPhone
as eight out of the top 10 Android apps would operate ofﬂine if it
did not display mobile ads.
3.5 Ad trafﬁc frequency
Ad trafﬁc is, by nature, periodic, and one of the important pa-
rameters controlling it is the refresh interval, i.e. how frequently
the mobile app requests an ad. We have also seen that this trafﬁc
is mainly static and, given the ﬁnite catalog of ads available from a
service, an object might be requested multiple times. In this section
we investigate the frequency of ad trafﬁc considering both these ef-
fects, starting from the characterization of trafﬁc aggregates and
then moving more to the details of the speciﬁc objects.
3.5.1 Request interval
As described in Section 2.1, different ad services adopt different
protocols to deliver and manage ads. Reverse engineering is a difﬁ-
cult and time consuming task so we decided to opt for a more gen-
eral approach to capture the frequency of the trafﬁc grouping ﬂows
4For iPhone devices the app name is usually carried in the
app_name parameter. For Android devices it can be deduced from
the app package name speciﬁed in the msid URL parameter.
348e
c
i
v
e
d
r
e
p
s
t
s
e
u
q
e
R
e
c
i
v
e
d
r
e
p
s
t
s
e
u
q
e
R
 1000
 100
 10
 1
 1000
 100
 10
 1
1
 5
 10
1
 5
 10
Android
50th perc
 15
 20  25
 35
Object Popularity Rank
 30
 40
 45
 50
iPhone
50th perc
 15
 20  25
 35
Object Popularity Rank
 30
 40
 45
 50
e
c
i
v
e
d
r
e
p
e
m
u
l
o
v
t
o
t
/
d
a
o
i
t
a
R
e
c
i
v
e
d
r
e
p
e
m
u
l
o
v
t
o
t
/
d
a
o
i
t
a
R
 1
 0.1
 0.01
 0.001
 1
 0.1
 0.01
 0.001
Android
50th perc
avg
1
 5
 10  15  20  25  30  35  40  45  50
Object Popularity Rank
iPhone
50th perc
avg
1
 5
 10  15  20  25  30  35  40  45  50
Object Popularity Rank
Figure 9: Box plots of the number of requests each device
performs for the top 50 most popular objects on Android and
iPhone devices.
Figure 10: Box plots of the fraction of cumulated volume re-
lated to the 50 most popular objects on Android and iPhone
devices.
in time: we deﬁne an activity period as a group of concurrent ﬂows
such that two consecutive ﬂows ﬂow-A and ﬂow-B are part of the
same group if start(f lowA) < start(f lowB) < end(f lowA).
In this way, we cluster the trafﬁc in time and studying the inter-
leave between activity periods gives us an indication of the trafﬁc
frequency.
In Figure 8 we report the CDF of the interleave between two con-
secutive activity periods. Each of the three classes of ad trafﬁc is
considered individually and we also report the aggregate for com-
pleteness. We can see that Android and iPhone handsets present
similar distributions (this is true also for iPad but not reported due
to its similarity) but differences emerge between the different classes
of trafﬁc. In fact, analytics services are less interactive than media-
tion services which typically generate multiple ﬂows in a very short
period of time as they need to communicate both with its servers
and the ad network to report the action and obtain the ad respec-
tively (as seen in Figure 2). Despite the static nature of ad trafﬁc,
40% of the activity periods are interleaved by less than 10 seconds
and more than 80% in less than 100 seconds.
3.5.2 Re-downloads
Given the static nature of ad trafﬁc content, it is reasonable to
expect that the SDKs provide some caching capabilities to limit the
number of re-downloads of the objects, but instead they use stan-
dard HTTP libraries. Studying the HTTP response codes, we found
that only 5% of the requests from Android devices receive a “HTTP
304 Not Modified” reply while this accounts for only 2% of
requests from Apple devices. The limited adoption of conditional
HTTP requests suggests that, in presence of multiple requests for
the same object, it is very likely that it is re-downloaded.
In order to verify this assumption, for each object requested we
computed its popularity as the ratio between the number of devices
requesting such an object and the total number of devices that had
ad trafﬁc. For each object ranked in the top 50, we computed the
distribution of the number of times such an object was requested by
each device. The box plots shown in Figure 9 report the 5th, 25th,
75th and 95th percentile of each distribution. The median is equal
to 1 for most of the objects but their distribution is heavy tailed. In
particular, this is more notorious for Android devices, likely due to
potential bugs in the HTTP libraries as reported by [9]. Neverthe-
less, different objects present different distributions. In particular,
the objects presenting the highest number of requests (13/16th for
Android and 20/25th for iPhone) correspond to requests generated
by Angry Birds.
Figure 10 reports the distribution of the cumulated volume caused
by all HTTP requests, to the top 50 objects, as a fraction of the total
trafﬁc generated by each device. Considering Android devices, we
can see that the volume related to the top 10 objects is limited, as
most of the devices have a median of 0.002%. However, the dis-
tributions are heavy tailed and for 25% of the devices the top 10
objects account for 1% of the total volume. Despite the fact that 1-
2% of user volume may appear to be negligible, this fraction relates
to very few objects. It is interesting that such a small set of content
can have this impact of the overall trafﬁc of a device. Moreover,
this waste is not just related to volume as the unnecessary transmis-
sions also have energy costs.
4. ADS AND MOBILE NETWORKS:
ENERGY IMPLICATIONS
Most mobile devices boast a 3G network interface running on
the UMTS standard, with an IP stack of upper layers protocols. In
order to maximize the efﬁciency of spectrum allocated to these net-
works, each terminal (or user equipment in UMTS terminology) is
associated with the Radio Resource Control (RRC) state machine
that is responsible for the actual behavior in terms of bandwidth,
power consumption and latency of the physical layer. While the
speciﬁc parameters might have different values from one network
provider to another [10], most networks deﬁne three power modes:
IDLE which corresponds to no connection; CELL_DCH (dedicated
349AdNets + Mediat. Serv.
Energy
Consumed
~2s latency
~0.5s
latency
CELL_DCH
IDLE
inactivity timeout
~ 6 to 16 s.
inactivity timeout 
~ 2 to 8 s.
 1
 0.8
 0.6
 0.4
 0.2
F
D
C
Figure 11: A common 3G wireless RRC state machine.
 0
 1
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
Analytics Serv.
Android
iPhone
iPad
 10  100  1000 10000
Interleave [s]
Android
iPhone
iPad
 10  100  1000 10000
Interleave [s]
channel), the highest power state with highest throughput and low-
est latency; CELL_FACH (forward access channel) used to reduce
the latency caused by going from IDLE to CELL_DCH in case an-
other transmission occurs within a few seconds after the previous
transmission5. All promotions are based on trafﬁc volume whereas
demotions are triggered by inactivity timers deﬁned by the network
operators, as shown in Figure 11.
In the previous sections we have seen how ad trafﬁc has an in-
trinsic intensity due to the frequent communications between apps
and ad networks, and we also observed that some requests lead to
a waste of trafﬁc as it may result in objects being re-downloaded.
In this section, we will characterize and quantify the effect of ad
trafﬁc on power consumption. We start by investigating the isola-
tion of ad trafﬁc with respect to the RRC state machine, and then
present the power consumption results obtained using an extensive
set of active experiments in a controlled environment.
4.1 Ad trafﬁc isolation
In Section 3.4 we have seen that some of the most popular ad-