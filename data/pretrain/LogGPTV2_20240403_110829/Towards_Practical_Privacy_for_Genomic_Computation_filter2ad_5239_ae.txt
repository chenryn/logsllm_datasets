[23] M. Naor, B. Pinkas, and R. Sumner. Privacy preserving
www.hapmap.org/, 2007.
auctions and mechanism design. In EC, 1999.
227
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
[24] P. Paillier. Public-key cryptosystems based on composite
degree residuosity classes. In EUROCRYPT, 1999.
[25] Personal Genome Project.
Are guarantees of
genome anonymity realistic? http://arep.med.
harvard.edu/PGP/Anon.htm, 2006.
[26] M. Rabin. How to exchange secrets by oblivious trans-
fer. Technical Report TR-81, Aiken Computation Labo-
ratory, Harvard University, 1981.
[27] D. M. Rind, I. S. Kohane, P. Szolovits, C. Safran, H. C.
Chueh, and G. O. Barnett. Maintaining the conﬁdential-
ity of medical records shared over the Internet and the
World Wide Web. Annals of Internal Medicine, 127(2),
July 1997.
[28] T. Smith and M. Waterman. Identiﬁcation of common
molecular subsequences. Journal of Molecular Biology,
147, 1981.
[29] E. Szajda, M. Pohl, J. Owen, and B. Lawson. Toward
a practical data privacy scheme for a distributed im-
plementation of the Smith-Waterman genome sequence
comparison algrotihm. In NDSS, 2006.
[30] J. Turow. Americans and online privacy: The system
is broken. Technical report, Annenberg Public Policy
Center, June 2003.
[31] A. Yao. How to generate and exchange secrets. In FOCS,
1986.
A Proof of Lemma 1
The proof is by simultaneous induction on l and w.
For l = 1 and w = 1 the results follows using the fol-
lowing recursive relationship:
D(i, j) = min[D(i − 1, j) + 1, D(i, j − 1) + 1,
D(i − 1, j − 1) + t(i, j)]
(cid:2)
(cid:2)
and w
such that l
The induction step is tedious but simple. Assume that
(cid:2) ≤ l and
the result is true for all l
(cid:2) ≤ w. We will prove the result that for l + 1 and
w
w. Recall that we have to prove that D(i, j), can be
expressed as a function of bottom(D(i, j), l + 1, w),
left(D(i, j), l+1, w), α[i−w+1 ··· i], and β[j−l ··· j].
The following three statements are true by induction hy-
pothesis:
• D(i − 1, j) can be expressed as a function of
bottom(D(i− 1, j), l + 1, w − 1), left(D(i, j), l +
1, w − 1), α[i − w + 1 ··· i − 1], and β[j − l ··· j]
• D(i, j − 1) can be expressed as a function of
bottom(D(i, j − 1), l, w), left(D(i, j − 1), l, w),
α[i − w + 1 ··· i], and β[j − l ··· j − 1]
• D(i − 1, j − 1) can be expressed as a function of
bottom(D(i− 1, j− 1), l, w− 1), left(D(i− 1, j−
1), l, w−1), α[i−w+1 ··· i−1], and β[j−l ··· j−
1].
Notice that D(i, j) can be expressed in terms of D(i −
1, j), D(i, j − 1), D(i − 1, j − 1), α[i], and β[j]. Now
the result is clear by combining the the four statements
mentioned above. Similarly, we can prove that D(i, j),
can be expressed as a function of bottom(D(i, j), l, w +
1), left(D(i, j), l, w + 1), α[i − w ··· i], and β[j − l +
1 ··· j]. 2
B Detailed Results for Protocols 1 and 2
As a preparation step, a speciﬁc garbled circuit must
be constructed for each problem instance. To create
circuits, we used a prototype circuit compiler we are
developing, which can be downloaded from the web-
site at http://www.cs.wisc.edu/˜lpkruger/
sfe/ . Table 2 shows the network bandwidth (in bytes)
and execution times (in seconds) for various problem in-
stances. In this experiment, the circuits operate on 8-bit
integers, which allows for a maximum edit distance of
255. Results for Protocol 2 can be found in Table 3.
C Comparison with the Edit Distance Pro-
tocol of Atallah et al. [1]
In [1], Atallah et al. presented a privacy-preserving
edit distance protocol, which is superﬁcially similar to
our Protocol 2 in that the intermediate values D(i, j) are
additively shared between Alice and Bob. The protocol
of [1] relies on different cryptographic techniques, in-
cluding special-purpose solutions to the so called “mil-
lionaires’ problem” (a two-party protocol, in which the
parties determine whose input is bigger without reveal-
ing the actual input values) and additively homomorphic
encryption.
In this section, we present a detailed comparison of
the online computational cost of our protocol vs. that
of [1]. Let q = (cid:4)log w(cid:5) be the length of each alpha-
bet symbol, and let s = log(n + m) be the length of
random shares used to mask D(i, j) in our protocol. In
the protocol of [1], masking is done by adding random
values under encryption, in a group of unknown order
which is much larger than 2n+m. Therefore, this ad-
dition cannot be modular, and must be done over the
integers. To achieve standard cryptographic security,
the length of random shares in bits must be at least
(cid:2) = log(n + m) + 80 = s + 80.
s
Below, we compare the cost for a single iteration,
since the number of iterations is equal to nm in both
protocols.
Online computational cost of [1]. Each iteration has to
228
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
Problem
size
(8,8)
(12,12)
(16,16)
(20,20)
(25,25)
(100,100)
Bandwidth Bandwidth )
(Alice)
0.37 M
0.96 M
1.83 M
2.97 M
4.38M
86.7M
(Bob)
3633
5348
7057
8764
10472
43029
CPU
(Alice)
0.74
1.30
2.12
3.10
4.26
71.5
CPU
(Bob)
0.39
0.54
0.68
0.88
1.17
14.1
wall
clock
1.12
1.92
3.02
4.46
5.94
92.4
Table 2. Network bandwidth (in bytes) and timing measurements (in seconds) for the edit dis-
tance Protocol 1 (M refers to Megabytes).
Problem
size
(8,8)
(12,12)
(16,16)
(20,20)
(25,25)
(100,100)
Bandwidth
Bandwidth )
(Alice)
717 k
1.60 M
3.36 M
5.26 M
8.21 M
171.1 M
(Bob)
68 k
154 k
315 k
492 k
769 k
32.0 M
CPU
(Alice)
3.03
5.96
11.5
17.5
26.8
519
CPU
(Bob)
1.29
2.37
4.38
6.54
9.7
177
wall
clock
4.05
7.68
14.7
22.1
33.7
649
Table 3. Network bandwidth (in bytes) and timing measurements (in seconds) for the edit dis-
tance Protocol 2 with various problem sizes (k and M refer to Kilobytes and Megabytes, respec-
tively).
(cid:2)
compute a minimum or maximum three times: twice in
-bit val-
step 1 on q-bit values, and once in step 5 on s
ues [1, section 4.1]. Each minimum/maximum ﬁnding
protocol requires two instances of the millionaires’ sub-
protocol, and six re-randomizations of Paillier cipher-
texts. The latter involves exponentiation modulo N 2,
where N 2 is the modulus of an instance of Paillier cryp-
tosystem. N itself is an RSA modulus and must be at
least 1024 bits; therefore, N 2 is at least 2048 bits.
The implementations of the millionaires’ protocol
suggested in [1] are relatively inefﬁcient. For fair com-
parison, we will assume that the construction of [1] is
instantiated with a state-of-the-art sub-protocol for the
millionaires’ problem, e.g., the Lin-Tzeng protocol [19].
(cid:2)−6) online modular mul-
This protocol requires (1540s
(cid:2)
tiplications per instance if s
-bit values are being com-
pared (1540q−6 if q-bit values are being compared), as-
suming the standard size of 512 bits for the prime moduli
in ElGamal encryption.
Assuming that the permutations required by [1] are
free, the online cost of each iteration is thus equivalent
(cid:2)−6)+6×
to 2×(2×(1540q−6)+6×2048)+(2×(1540s
(cid:2)−12+12288)
2048) = 2×(3080q−12+12288)+(3080s
(cid:2) + 6160q + 36828 = 3080s + 6160q + 283228
= 3080s
modular multiplications.
Online computational cost of our Protocol 2. Each it-
eration of our Protocol 2 involves evaluation of several
“garbled circuits.” Each Ceq circuit has 2q gates of ar-
ity 2, and each Cmin3 circuit has 10s gates of arity 2,
and 5s − 6 gates of arity 3. In each iteration, a single
instance of Ceq and a single instance of Cmin3 must be
evaluated (in our presentation, evaluation of circuits Ceq
and Cmin3 is split between two phases, but there is a 1:1
correspondence between the iterations of each phase).
All garbled circuits can be pre-computed in advance,
because the representation of the circuit in Yao’s pro-
tocol is independent of the actual input values. Each
row of the truth table of each gate becomes a double-
encrypted symmetric ciphertext (see Section 2), for a to-
tal of 4× 2q + (4× 10s + 8× (5s− 6)) = 8q + 80s− 48
ciphertexts. Decrypting each double-encrypted cipher-
text requires two online symmetric decryptions, but, on
average, the evaluator of a garbled gate will only need
to try decrypting half the ciphertexts before decryption
succeeds and he obtains the wire key representing the bit
value of the gate’s output wire.
Transferring the wire-key representation of Bob’s q-
1 . The on-
bit input into Ceq requires q instances of OT 2
229
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
quence in joint medical studies, where it is reasonable
to assume that participants provide actual sequences as
inputs into the protocol, and are not deliberately sup-
plying fake sequences in an attempt to learn something
about the other participant’s data.
Security of our protocols follows directly from (i) se-
curity of subprotocols performed using standard meth-
ods for secure multi-party computation, and (ii) compo-
sition theorem for the semi-honest model [13, Theorem
7.3.3]. Proofs are standard and omitted from the confer-
ence version of the paper. Note that it is not possible to
completely hide the length of the sequences, as an upper
bound can be inferred from the size of the computation.
Random padding of the sequences can be used to miti-
gate this with a corresponding performance penalty.
line cost of each instance is 2 modular exponentiations
and 1 modular multiplication. Therefore, assuming 512-
bit moduli, the total online cost of obliviously transfer-
ring the inputs to Ceq is equivalent to 1025q modular
multiplications.
In the same iteration, a single instance of Cmin3 must
be evaluated. Bob has three s-bit inputs (after evaluat-
ing Ceq , he already has the representation for his fourth
input). Obliviously transferring the wire-key represen-
tation of these inputs requires 3s instances of OT 2
1 , for
a total cost of 3075s modular multiplications.
Therefore, the total online cost of each iteration of
our Protocol 2 is (3075s + 1025q) modular multipli-
cations and 8q + 80s − 48 symmetric decryptions vs.
(3080s + 6160q + 283228) modular multiplications in
each iteration of [1]. Since symmetric decryption is
much cheaper than modular multiplication, we conclude
that our Protocol 2 offers signiﬁcantly better efﬁciency
than the protocol of [1]. In general, the protocol of [1]
requires at least 300,000 modular multiplications per it-
eration, rendering it unrealistically expensive for practi-
cal applications.
D Security Proofs
Our protocols are secure in the so called the semi-
honest model of secure computation, i.e., under the as-
sumption that both participants faithfully follow the pro-
tocol speciﬁcation. To achieve security in the malicious
model, where participants may deviate arbitrarily from
protocol speciﬁcation, participants would need to com-
mit to their respective inputs prior to protocol start and
then prove in zero knowledge that they follow the proto-
col speciﬁcation.
Since we use Yao’s “garbled circuits” method as the
underlying primitive, security in the malicious model,
if needed, can be achieved at a constant cost [17].
For practical usage scenarios, however, it is not clear
whether security in the malicious model offers signiﬁ-
cant advantages over security in the semi-honest model.
For example, there is no external validation of the par-
ties’ inputs. Even if the protocol forces each party to run
the protocol on previously committed inputs, this does
not guarantee that the inputs are not maliciously chosen
in the ﬁrst place. In other words, a malicious party may
simply commit to a “bad” input (deliberately chosen so
that the result of the edit distance computation reveals
some information about the other party’s input) and pass
all proofs.
In general, we expect that our protocols will be used
for tasks such as collaborative analysis of genome se-
230
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply.