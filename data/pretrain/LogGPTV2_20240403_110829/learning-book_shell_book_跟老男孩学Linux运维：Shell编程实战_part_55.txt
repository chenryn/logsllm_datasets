Dear，选A啊，老公不但会赚钱，还会理财呦！）
19.2.4girlLove工具的Shell源码注释
1/bin/sh
 by oldboy training.
http://o1dboy.b1og.51cto.com
设置老婆、女朋友或潜在女朋友的名字，用来在终增展示，S1是执行脚本时传参的地的名字
girlname=*S1*
BttyBize命令的作用是打印用户当前屏幕终墙行数和列数（位置）。
pO8_Btdy：设置脚本内容输出位置为屏基上下位置（终墙Y轴长度）的2/3。
pos_stdy=*s((s（stty sizelcut -d.-f1)/3*2))*
pO8_Btdx：设置脚本内容输出位置为屏基左右位置（终墙x轴长度）的1/2
pos_stdx=*s((s(stty sizelcut -d’.-f2)/2))*
total_stdy=*s（（s（atty aizelcut-d.-f1)))*
total_stdy：获取系统终增Y轴长度。
tota1_stdx：获取系统终增x轴总长度。
total_atdx=*s((S（stty sizelcut -d,-f2)))*
---
## Page 390
372跟老男孩学 Linux 运维：Shell 编程实战
1ogo=·本节日为北京老男孩IT教育出品，祝天下所有有情人终成卷属！·
以下good和dec1两个变量是答题之后选给女照友的结束语。
good-*s（girlname）.你大排了，完美答对！
decl=·这案子最疯在的事，就是爱上了你，我会好好爱你的，请让我守候你一章子！
info=*亲，Sgirlname，这是我进给你的最特别的礼物，请选择A-D并按下国车开始答题吧。”
info变量，是开始答题的提示。
head=答则进度：
如果girlLove.txt文件不存在，则通出程序。
[-f./girlLove.txt 1llexit1
读入girlLove.txt文件中所设置的变量
../girlLove.txt
用户输入帮助函数。
function usage() (
echo s*Usage:$0 mm_name*
exit 1
tart 函数用于设置答题前的祝福语。
function start(1 (
设置红色肾景，有关颜色和肾景等内容请参考第9章的相关知识。
].
清屏。
clear
打印1ogo变量设置的祝福语，持续2秒。
printf *\r\e[10;30H\E[33mS(1ogo)\E[0m\n*
继续打印1ogo变量设置的祝福语，闪烁2秒。
printf*\r\e[10:30HE[33;5ms（1ogo}\E[0m\n*
sleep 2
打印黑色背景，清屏，后面就开始正题了。
].
clear
print_xy函数用来控制字将串（提示和问答）的打印位置。
参数1（S1）：为要打印的字符串。
参数3（S3）：用来控制字符在Y轴的打印位置。
参数2（S2）：根据参数2来选择不同的位置计算公式，对于不同类型的字特串，位置计算公式不同
参数4（S4）：用来控制字特在X轴的打印位置。
function print_xy () (
参数个数为0即退出。
---
## Page 391
第 19 章企业 Shell面试题及企业运维实战案例3T3
if（s#-eq 0 ]: then
return 1
fi
位置控制辅助数字。
len=32
如果参数个数小于2，则设定不同的位置坐标。
if[s#-1t2]:then
pos=*\e[s（pos_stdy}:$（(S(pos_otdx)-$(1en)))H*
根据传入的第二个参数的不同确定不同的屏幕坐标位置。
fi
一）如果第二个参数为-（减号），则定文如下的坐标位置，读者可以极据需求通行调整。
pos=*\e[S((S(pos_stdy) - $3));S((S(pos_stdx)-$(len)))H*
+）如果第二个参数为+（加号），则定文如下的坐标位置，读者可以概据需求进行调整。
po8=*\e[$((s(pos_stdy)+ $3）);$（（$(pos_atdx)-$(1en]))H*
lu）如果第二个参数为lu，则定义如下的坐标位置，读者可以账据需求进行调整。
D08=*\e[$((s（po8_stdy）-s3）):$（（$(pos_stdx)-$4）)*
1d）#如果第二个参数为1d号，则定义如下的坐标位置，读者可以根据需求进行调整。
pos=*\e[$（(s(pos_stdy) + $3)):$(($(pos_stdx) -$4))H*
打印第一个参数的内容到指定的层幕位置。
2ese
s（od)s.eu-oqo
答题结束以后打印一个红色的大背景，考看主人公的表决心信息。
function waiting()(
locali=1
通过while环实现///转圈的动丽效果。
while [ Si-gt 0]
do
for j in·-.····
op
打印前面若干个/特效将号·dec1变量中的内容。
033[32nS(dec1) *
打印后面若干个/特效符号。
打印前面若千个/特效特号·good变量中的内容。
echo-ne *033[1m\.033[$(($po_stdy-21）;$（（$s(poe_8tdx)/3））Hsj$5$j\033[4m\
033[32m$(good)*
打印后面若干个/特效符号。
---
## Page 392
374跟老男孩学Linux运维：Shell编程实战
done
done
设置答题问答相关的内容函数。
function print_info()(
在1/2x轴处减去32，在2/3Y轴的位置处打印如下字将串（格式化界面）。
即pos*\e[s（pon_stdy）;S（（S（pos_stdx）-$（1en}））H*变量所在位置。
D11nt_Xy**5*&*6*&*5*&*5*&*&*6*&*6*5*4*5*6*5*&*5*&*4*5*&*5*&*5*&*6*6*4*6*
紧接着上面字符申位置打印sinfo信息（具体位置同上，参考print_xy函数内容）。
print_xy*\E[33ms（info)\E[0m*+1
在终增底都中间位置打印SinEo信息。
#printf*\r\e[S（total_stdy]:$（（(S（total_stdx}-$（#info}*2）/2））Hs（info}\n
定又偏移量为数字20，读者可根据实际显示效果随意调整。
offset=20
定义数组序列，从0开始。
seq=0
环问题，为求效果，网题数要比Spoetrys变量行数多1。
while [$（seq)-1t s(#poetrya[9])]
op
isansvers=0
打印问题，传入4个参数，读入数组内的问题及传入参数控制字将事在屏幕的位置。
打印问题选项，传入4个参数，读入数组内的选项及传入参数控制字符事在屏幕的位置。
打印国答栏。
print_xy答：1d4 Soffset
读取终瑞答题者的内容输入到变量ans。
read ans
光标上移3行，并清除从光标到行尾的内容（清除问题行字特）。
echo -e *\033[3A\r\033[K*
清除问题选项行字特。
echo -e*\033[K*
清除回答栏字符。
echo-*\033[K
---
## Page 393
第19章企业Shell面试题及企业运维实战案例35
如果输入的字母和预设的答案不同，则魅续借环该问题，大小写都可以。
*S（anawers[Sseq])*]: then
.C-p-ezisuesoqo.e-bss]sxmsue]s.sues.]
打印……….，格式化界百。………-下面会星示该网题的tip。
print_xy *----
基示该问题的tip
print_xy*s(tips[$seq])·+7
星示提示后，等待3秒后返因。
sleep 3
将光标移到行首，并清除光标到行尾的字符。
xx.-
光标上移3行，并清除光标到行尾的字符。
echo -e*\033[3A\r\033[K*
continue
f1
问题序号·1。
、I+(bos}s xdxa=bos
获取poetrys的倒数第seg+1行。
(bos)s -（[e]sAx2aodg)s xdxo,=besxno
打印poetrys的倒数第sog+1行。
total定义左右位置及进度条总长度。
答题的进度条长度。
per=$[$(seg)*s(total)/s(#poetrys[θ])]
[（xd）s-（eo)s]snAbus
打印答则进度条。
printf *\r\e[$(tota1_stdy) ; 19Hs (head) \e[43m&s (per)s\e[41mS (shengyu)
....】8
done
printf *\z\e[$(（$(total_stdy））):19H\B[33m
恭喜我心中最美的S（girlname）全部
答对\B[0m*;
设置层幕红色背景。
printt *\e[41m*
清。
clear
---
## Page 394
376跟老男孩学Linux运维：Shell 编程实战
主函数开始调用所有函数执行整个脚本。
function main()(
if[S#-ne1]:then
usage
fi
start
打印答题首的祝福。
waiting
print_info
打印问答提示及调用问答函数打印更多信息、包括进度条等。
答题结末前的内心表达语，带有特效符号。
主函数开始执行，S*为脚本传参，其实就是一个你要连的女孩子的名字。
nain $*
19.2.5girlLove最终结果展示
具体展示结果见下面地址中的动画http://oldboy.blog.51cto.com/2561410/1864839
特别说明，追女孩神器案例来自于腾讯高级工程师Fork的案例拓展。
---
## Page 395
Linux
第20章
子Shell及Shell嵌套模式知识应用
前面19章所讲的Shell内容是老男孩在教学中会重点讲解的内容，但老男孩发现已
经毕业参加工作的学生在写复杂的 Shell（多个Shell相互调用）时，对Shell的执行模式
及子Shell相关知识还是有些模翻不清，因此老男孩猜想读者在看完前面的章节后可能
也会遇到此类问题，因而特意用一章来说明子Shell及Shell嵌套模式知识应用。
20.1子Shell的知识及实践说明
20.1.1什么是子Shell
子Shell的本质可以理解为Shell的子进程，子进程的概念是由父进程的概念引申面
来的，在Linux系统中，系统运行的应用程序几乎都是从init（Pid为1的进程）进程派
生面来的，所有这些应用程序都可以视为init进程的子进程，而init则为它们的父进程，
通过执行pstree-a命令就可以看到init及系统中其他进程的进程树信息：
[rooteoldgirl-]petree-a
init
Hcrond
1ogin
bash
ningetty/dev/tty2
rsyslogd -1/var/run/syslood.pid-c5
---
## Page 396
378跟老男孩学 Linux 运维：Shell 编程实战
——（rsyslogd)
(rsys1ogd)
(rsyslogd)
sshd
sshd
sshd
Lbash
sudo su-
su
Lbash
Lpstree -a
<=这就是老男孩则执行的显示
进程树的命令。
udevd -d
—udevd -d
udevd -d
对于Shell的子进程来说，它是一个从父级Shell进程派生而来的新的Shell进程，
我们将这种新的 Shell进程称为这个父级Shell的子Shell。
Shell脚本是从上至下、从左至右依次执行每一行的命令及语句的，即执行完一个
命令之后再执行下一个。如果在Shell脚本中遇到子脚本（即脚本嵌套），就会先执行子
脚本的内容，完成后再返回父脚本继续执行父脚本内后续的命令及语句。
通常情况下，当Shell脚本执行时，会向系统内核请求启动一个新的进程，以便在
该进程中执行脚本的命令及子Shell脚本，基本流程如图20-1所示，此部分在第2章中
已有闸述。
父Shell脚本
等待子Shell执行
父Shel脚本
外部命令
子Shel脾本
图20-1Shell脚本的基本执行流程
20.1.2子Shell的常见产生途径及特点
常见子Shell的产生途径主要包括以下4种。
1.带“&”提交后台作业
下面通过Shell脚本来实现一个由“&”产生的子Shell，脚本如下：
[root9oldboy scripts]# cat 20_1_1.sh
#1/bin/bash
Author:oldboy training
paront_var-*Parent*
 B1og:http://o1dboy-b1og.51cto.com
==定义父Shel1变量parent_var并赋值标性字符。
echo*Shell Start:ParentShell Level: SBASH_SUBSHBLL*
---
## Page 397
第20章子Shell及Shel嵌套模式知识应用379
<==输出父She11层级，BASH_SUBSHELL为系统环境变量
<=u通过花括号包豪需要被“6”影响的命令集。
echo*SubShe11Level：SBASH_SUBSHLL<==输出子She11的层级，和父she11是纸对比
sub_var=*Sub*
<==定义子Shel1的变量sub_var，并赋值标志性字符。
echo *sub_var=$sub_var*
<==输出子She11的变量字特事。
<==在子Shel1中输出父Shel1定义的变量，看子Shel1是否可以从父Shel1继承变量parent
echo *parent_var=Sparent_var*
var值
sleep 2
#<==休息28，用于分拥此处的子She11执行是不是异步的。
echo *SubShell is over.*
<==输出标识代表子She11结束。
<==通过“&”产生子She11，执行子She11的同时跳因父She11。
echo“NowParentShellstart again.<=子Shel1代码下面紧换看代码，目的是列断
此子Shel1是异步执行还是同步执行。
<==脚本即将结京时输出父She11的层级。
if[-z*Ssub_var′]then
<==判断，如果子Shel1中定义的变量sub_var为空，
echo *sub_var is not defined in ParentShel1*
#<==则说明子She11变量无法被父She11引用。
else
<==否则说明子She11变量可以被父She11引用
fi
执行结果如下：
[root@oldboy scripts]sh 20_1_1.ah
Shel1 Start：ParentShel1Level：0<=打印父Shel1某级，层级为0
SubShel1 Level:1
<==开始执行子Shel1，并打印子She1l1层级，层级为1。
sub_var=Sub
<==打印子She11的变量字串。
parent_var=Parent
打印父Shel1的变量字将串，证明子Shel1可以
从父Shell继承变量parent_var值。
Now ParentShell start again.
<父She11继续执行。
Shel1 Over:ParentShell Level:0
<==脚本即将结末时输出父She11的层级，层级为0。
sub_var is not defined in Parentshel1
<==输出此提示，证明子She11变量无法
被父Shel1引用。
以子She11最后才输出结束标识，也因此证明加“s”特号的子Shel1是异步执行的，使得Shel1脚本具
[root@oldboy scripts] SubShell1 i8 over.<==子Shell执行束，因为休惠了3s，所
了并发执行的功能，这个子She11的应用案例其体可参考19.1.4节。
根据20_1_1.sh执行的输出结果，可以得出以下结论：