PISE: Protocol Inference using Symbolic
Execution and Automata Learning
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
Computer Science Department, Technion, Haifa, Israel
{ron.mar,orna,gnakibly}@cs.technion.ac.il
Abstract. Protocol Inference is the process of gaining information about
a protocol from a binary code that implements it. This process is use-
ful in cases such as extraction of the command and control protocol of a
malware, uncovering security vulnerabilities in a network protocol imple-
mentation or verifying conformance to the protocol’s standard. Protocol
inference usually involves time-consuming work to manually reverse en-
gineer the binary code.
We present a novel method to automatically infer state machine of a net-
work protocol and its message formats directly from the binary code. To
the best of our knowledge, this is the ﬁrst method to achieve this solely
based on a binary code of a single peer. We do not assume any of the
following: access to a remote peer, access to captures of the protocol’s
traﬃc, and prior knowledge of message formats. The method leverages
extensions to symbolic execution and novel modiﬁcations to automata
learning. We validate the proposed method by inferring real-world proto-
cols including the C&C protocol of Gh0st RAT, a well-known malware.
Keywords: Protocol Inference · Network Security · Symbolic Execution
· Automata Learning · Network Protocols.
1
Introduction
The process of gaining information about a communication protocol from the
binary code that implements it is called Protocol Inference. Such a process is
employed in several practical scenarios. Many malwares set up a command and
control (C&C) channel with the attacker’s server. Over that channel they re-
ceive commands from the server and send information gathered from the victim
machine. Oftentimes, knowing the commands expected to be received by the
malware is helpful to analyze the goals and logic of the malware. Nonetheless,
these commands may not be easily obtained if no prior traﬃc of the C&C chan-
nel has been captured or the attacker server is no longer operational. In such
cases one needs to infer the C&C protocol from the malware’s binary only.
Additionally, security vulnerabilities of a network protocol software are often
caused by deviations from the intended protocol’s logic. For example, a vulnera-
bility in an implementation of a server program may accept data from the client
before the user was authenticated or after a message that closes the connection is
2
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
received. Such deviations may be even intentional and pose an undesirable back
door to the program. Moreover, improper implementation of a protocol logic
may lead to non-conformance to other implementations of the same protocol.
To reveal such improper implementations of a protocol, one needs to infer the
protocol implemented by the software and compare it to the protocol’s desired
logic.
In this work we propose PISE: a method to automatically infer the proto-
col directly from a given binary code. The method extracts the protocol state
machine and the formats of each of the protocol’s message types. The method
leverages an extended L* algorithm [2] to learn the protocol’s state machine.
L* is based on a Teacher and a Learner, whose goal is to reveal the state
machine of an unknown language (in our case, the sequences of the protocol’s
message exchanges). The Learner presents membership queries and equivalence
queries that the Teacher answer.
To answer the algorithm’s membership queries we use modiﬁed symbolic ex-
ecution of the binary program. The modiﬁcations track the program’s network
activity and guide the symbolic execution through a messages exchange accord-
ing to the Learner’s query. The symbolic execution is also leveraged to uncover
messages that may follow a valid message exchange. Predicates representing the
protocol’s message types are derived based on these example messages. As new
message types are revealed they are fed back to the L* algorithm to extend the
protocol’s state machine. Equivalence queries of the L* algorithm are answered
using a standard sampling approximation using membership queries.
We emphasize that the only input to the proposed method is the binary code
of a single peer of the protocol. In particular, we do not assume: (1) Access to
the binary code of the remote peer. (2) Access to network traﬃc recordings that
contain valid protocol sessions. (3) Access to an online instance of the remote
peer. Namely, we cannot recreate valid session traﬃc. (4) Prior knowledge of
messages’ formats and the partition to message types.
To the best of our knowledge, PISE is the ﬁrst protocol inference method
that has none of the above assumptions. We believe that the lack of such as-
sumptions makes our method widely suitable for many real-world use cases of
protocol inference. For example, often when the C&C protocol of a malware is
analyzed, the protocol peer, i.e. the C&C server, is unobtainable nor it is online,
furthermore past malware traﬃc has not been recorded. Hence, the binary code
of the malware is the only source of information about the protocol.
Previous Works There are several published works that deal with the problem
of learning information about a network protocol. The approach presented in [8]
uses recorded network traﬃc as input. It analyzes the traﬃc and uses heuristics
to extract diﬀerent protocol ﬁelds.
To infer information about the protocol that may not be captured in recorded
traﬃc only, several methods [4] [3] [16] [9] were introduced that combine the
recorded traﬃc with execution traces of the server, allowing them to learn more
PISE: Protocol Inference using Symbolic Execution and Automata Learning
3
about the messages’ formats, and even gain some insights about the semantics
of messages and message ﬁelds.
All of these works do not deal with the problem of learning the protocol state
machine. This was the motivation for the work [7] which introduced Prospex.
This work extended previous works in two directions: First, they developed a
mechanism to identify messages of the same type. They use this information
to partition messages with similar role in the protocol into clusters. The second
extension is a method to infer the state machine of the protocol. Prospex method,
like all the mentioned methods, requires captures of protocol’s traﬃc.
Another important contribution is the work [6] that introduced a method
for on-line inference of botnet C&C protocol, using active instances of it. They
chose to represent a protocol as a Mealy machine and used L* extension by [14]
for learning mealy machines. They actively query the control server responses
for a sequences of messages. They also introduced caching and prediction opti-
mizations to L* in order to reduce the amount of membership queries sent to
the server. Their work, as an on-line method, assumes the server is available
and answers appropriately. They also assume known message formats by using
previous work [4].
Another related work is the work [1] that introduces a method to infer a Java
class speciﬁcation (order of method calls) using model checking and L*, which
is similar to what we apply in our work. In their case, however, the alphabet
(the methods) is known in advance. The work [10] utilizes L* for the purpose of
model checking and suggests learning-based algorithms to automate assumption
generation in assume-guarantee veriﬁcation. The work [12] even extended this
to include alphabet reﬁnement, a technique to infer interface alphabets.
Another work called MACE [5] presents a method to learn a state machine
of a server using L* and symbolic execution. As in our method, they use L*
extension for inferring Mealy state machines [14] and use symbolic execution
to uncover messages that the client may send. There are, however, two main
diﬀerences to our method: First, MACE assumes a known abstraction function is
available that can extract the message type out of the server’s response. Second,
MACE assumes a running server is available, that can answer client requests.
We do not have these assumptions.
2
Preliminaries
2.1
Deterministic Finite Automaton (DFA) Learning
A deterministic ﬁnite automaton (DFA) M is a ﬁve-tuple, (Q, Σ, δ, q0, F), all of
them nonempty, whereas: Q is a ﬁnite set of states, Σ is a ﬁnite set of input
symbols (alphabet), δ : Q × Σ → Q is a transition function, q0 ∈ Q is an initial
state and F ⊆ Q is a set of accept states. Let w = σ1...σn be a string over the
alphabet Σ. We say that M accepts w if there exist r0, ..., rn ∈ Q such that
r0 = q0, rn ∈ F and ∀0 ≤ i ≤ n − 1, ri+1 = δ(ri, σi+1).
Let Σ∗ = {σ1...σn | σi ∈ Σ, n ≥ 0} be the set of all ﬁnite strings over the
alphabet Σ. We deﬁne L(M) = {w ∈ Σ∗ | M accepts w} as the language of M.
4
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
A set of words L ⊆ Σ∗ is a regular language iﬀ there exists DFA M such that
L = L(M).
Automata learning identiﬁes an unknown regular language L by learning a
DFA M such that L(M) = L. The L* algorithm [2] solves this problem. It as-
sumes a minimally adequate Teacher, which is an oracle that can answer two
types of queries: Membership query and Equivalence query. In a Member-
ship query, the Teacher should indicate whether a given word w is in L or not.
In an Equivalence query, the Teacher should indicate, given a conjectured DFA
M ′, whether L(M ′) = L, and provide a counterexample otherwise (a word in
the symmetric diﬀerence of L and L(M ′)).
In its internal data, the L* algorithm saves a description of the currently
learned automaton in a structure called observation table. The observation table
is updated during the learning process according to the answers of the Teacher.
The basic L* algorithm assumes Σ (alphabet) is known. Several works [12]
[13] propose extended algorithms to deal with an alphabet that is revealed (or
grows) during the the execution of the algorithm.
2.2
Symbolic Execution
Symbolic execution is a static method of analyzing a program. During the anal-
ysis it determines what constraints the program’s input must satisfy in order
to execute each execution path in the program. This is done by following the
program’s code assuming symbolic values for inputs. A symbolic state is deﬁned
to contain the current symbolic values for each variable in the program, as well
as constraints that should hold in order to reach that state.
Symbolic execution begins with a single initial state located at the entry
point of the program. The execution happens by stepping the set of states and
generating new descendant states. Stepping a single state may result with mul-
tiple new descendant states, if, for example, the parent state corresponds to a
conditional branch. Before stepping a state, the symbolic execution may verify
that the current constraints of the state are satisﬁable. This veriﬁcation is done
in order to discard states that represent infeasible paths, representing impossi-
ble executions. A symbolic state can represent an execution during which the
program failed and terminated, namely exits with a non-zero return value. We
call such a symbolic state an abort state.
3
Problem Deﬁnition
Our goal, given a binary code of a program, is ﬁnding a DFA that accepts a
language L, where each word in L matches a sequence of message types received
and sent by the program. We say that this DFA is the state machine of the
protocol implemented by the program. We say that a concrete run of the program
is valid if and only if it does not ﬁnish in an abort state.
We denote by S and R the ﬁnite set of messages that may be sent and
received by the program, respectively. S and R are disjoint. S and R are ﬁnite
because messages are limited in length (See Assumption 1 below).
PISE: Protocol Inference using Symbolic Execution and Automata Learning
5
A session is a sequence of messages m1 . . . mk such that ∀1 ≤ i ≤ k, mi ∈
S∪R. We say that a session m1 . . . mk is valid for the program if and only if there
exists a valid run of the program along which the same sequence of messages are
sent or received in exactly the same order as in m1 . . . mk. An empty session is
considered valid. Valid sessions are preﬁx-closed, meaning that if m1 . . . mk is a
valid session then ∀1 ≤ l ≤ k − 1, m1 . . . ml is also a valid session.
Messages are partitioned into subsets of message types according to their
semantics in the protocol and their eﬀect on the protocol state machine. Let TD
be a partition of message types of D where D ∈ {R, S}. Given a message m ∈ D,
we denote by type(m) the pair ⟨D, t⟩ such that t ∈ TD and m ∈ t. We call such
a pair ⟨D, t⟩ a Message Type. t is ﬁnite because both S and R are ﬁnite.
We deﬁne the alphabet of the protocol as a ﬁnite set of pairs:
ΣL = {⟨T, t⟩ | t ∈ TD, D ∈ {R, S}}
Given a session m1 . . . mk such that ∀1 ≤ i ≤ k, mi ∈ S ∪ R, we deﬁne
Θ : (S ∪ R)∗ → Σ∗
L:
Θ(m1 . . . mk) = type(m1) . . . type(mk)
We abstract all valid sessions to a regular language L over the alphabet ΣL:
L = {Θ(m1 . . . mk) | m1 . . . mk is a valid session}
Note that L is preﬁx closed because valid sessions are preﬁx closed. Note that
R and S, as well as their partitions TS and TR, are unknown in advance, hence
the alphabet Σ of the DFA in unknown in advance. It is the task of our method
to uncover ΣL as it determines the DFA.
Assumptions We assume the following about the input to our method:
1. Message Length is limited: there exists N such that no message in the
protocol to be inferred is longer than N bytes. This is a reasonable assump-
tion since concrete messages must be ﬁnite. In practice, our method allow a
message to be longer than N bytes, as long as the ﬁrst N bytes may allow
to infer its message type. This assumption is required since symbolic lengths
are computationally diﬃcult to infer.
2. Protocol Regularity: the protocol can be modeled as a DFA (See Sec-
tion 2.1) over ΣL in terms of message types allowed from each state. For-
mally, L is regular language. If L is not regular, our algorithm will fail or
will never complete the inference.
4
Learning a DFA of a Protocol (Exact Version)
The learning of the protocol’s DFA is based on a modiﬁed version of the L*
algorithm [2]. We modify the algorithm’s queries in order to uncover the alphabet
Σ, that is, the message types of the protocol. Initially, Σ is ∅.
6
Ron Marcovich, Orna Grumberg, and Gabi Nakibly
For ease of exposition, we assume here a Teacher that is capable of answer-
ing the queries we present. However, this assumption is unrealistic when both
the state machine and the alphabet ΣL are unknown. In Section 5 we propose
suitable approximations for the Learner and the Teacher.
Modiﬁed Membership Queries The classical membership query returns
True or False, indicating if a given w is in L or not. We modify it as fol-
lows: If w ∈ L, True is returned together with a set Cont(w) of message types
⟨D, t⟩ such that w · ⟨D, t⟩ ∈ L. If w /∈ L, False is returned. The set Cont(w)
may reveal new alphabet symbols.
Modiﬁed Equivalence Queries In a classical equivalence query the Learner
provides a conjectured DFA M over alphabet ΣM = Σ. True is returned if L =
L(M). Otherwise, False is returned and a counterexample w in the symmetric
diﬀerence of L and L(M) is returned as well. We modify it as follows: False
is returned if there exist w ∈ Σ∗
M for which one of the following hold: (1) w
is in the symmetric diﬀerence of L and L(M); (2) A set Miss(M) ̸= ∅ exists
such that for all σ ∈ Miss(M), σ /∈ ΣM but w · σ ∈ L. In the former case, w
is returned as a counterexample. In the latter case, every w · σ is considered a
counterexample. True is returned if for all w ∈ Σ∗
M, neither (1) nor (2) hold.
Handling a growing alphabet Given a set of message types C = Cont(w) or
C = Miss(M) output by a query, Σ is set to Σ ∪ C. If Σ changes during this
assignment, then we say that the alphabet grows. To handle a growing alphabet
we use a modiﬁed L* algorithm presented in [13]. In a nutshell, the modiﬁed
algorithm updates the observation table to handle the new alphabet symbols
while the general learning cycle is kept similar to the classical L* algorithm.
Initialization and Output The Learner starts with Σ = ∅. The ﬁrst query
of the Learner is w = ε. Note that the answer to this query is True since an
empty session is valid. Cont(ε) is then added to Σ. The Learner continues to
utilize queries according to the L* algorithm and extends Σ and the learnt DFA
according to the queries’ answers. The algorithm terminates when an equivalence
query returns True. The algorithm outputs the learnt DFA that represents the
protocol’s state machine and Σ that represents the protocol’s message types.
Correctness The correctness of the algorithm is based on the modiﬁed deﬁni-
tion of equivalence queries and correctness of the classical L* algorithm.
Theorem 1. The modiﬁed Learner terminates with L(M) = L and ΣM = ΣL.
Proof. The Learner terminates when it gets True as an answer from the Teacher
on an equivalence query. In this case, there is no w ∈ Σ∗
M, which is in the
symmetric diﬀerence of L and L(M). Thus, L = L(M). Also, there is no w ∈ Σ∗
M,
PISE: Protocol Inference using Symbolic Execution and Automata Learning
7
such that σ ̸∈ ΣM but w · σ ∈ L. This means that there is no (reachable)
message type σ ∈ ΣL that has not been revealed already by our modiﬁed Learner.
Consequently, Σ = ΣL, as required.
⊓⊔
5
Learning a DFA of a Protocol (Approximation)
This section details how the answers to the queries of the modiﬁed L* algorithm
presented in Section 4 are approximated. The components of the learning and
their interactions are presented in Figure 1.
Approximated Learner
Membership
Oracle
Equivalence
Oracle