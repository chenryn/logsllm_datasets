### Parsing the PE File Structure

#### Confirming the Initial Binary Signature
To begin, we use a Go file reader instance to read 96 bytes from the start of the file to confirm the initial binary signature. The first two bytes should provide the ASCII value "MZ". The `PE` package offers convenience objects to help marshal PE data structures into a more consumable format. However, manual binary readers and bitwise operations are still required for some tasks. We perform a binary read of the offset value referenced at `0x3c` and then read exactly 4 bytes composed of the value `0x50 0x45` (PE) followed by two `0x00` bytes.

#### Parsing the COFF File Header
Continuing down the PE file structure, immediately following the DOS Stub, is the COFF File Header. Let's parse the COFF File Header using the code defined in Listing 12-16 and then discuss some of its more interesting properties.

```go
// Create the reader and read COFF Header
u sr := io.NewSectionReader(f, 0, 1<<63-1)
v _, err := sr.Seek(pe_sig_offset+4, os.SEEK_SET)
check(err)
w binary.Read(sr, binary.LittleEndian, &pefile.FileHeader)
```

**Listing 12-16: Parsing the COFF File Header (`/ch-12/peParser/main.go`)**

We create a new `SectionReader` that starts from the beginning of the file at position 0 and reads to the maximum value of an `int64`. The `sr.Seek()` function resets the position to start reading immediately after the PE signature offset and value (recall the literal values `PE + 0x00 + 0x00`). Finally, we perform a binary read to marshal the bytes into the `pefile` object's `FileHeader` struct. Recall that we created `pefile` earlier when we called `pe.Newfile()`.

The Go documentation defines the `FileHeader` type with the struct defined in Listing 12-17. This struct aligns well with Microsoft’s documented PE COFF File Header format (defined at [Microsoft Documentation](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#coff-file-header-object-and-image)).

```go
type FileHeader struct {
    Machine              uint16
    NumberOfSections     uint16
    TimeDateStamp        uint32
    PointerToSymbolTable uint32
    NumberOfSymbols      uint32
    SizeOfOptionalHeader uint16
    Characteristics      uint16
}
```

**Listing 12-17: The Go PE package’s native PE File Header struct**

The most notable field in this struct, aside from the `Machine` value (which indicates the target system architecture), is the `NumberOfSections` property. This property contains the number of sections defined within the Section Table, which immediately follows the headers. If you intend to backdoor a PE file by adding a new section, you will need to update the `NumberOfSections` value. However, other strategies, such as searching for contiguous unused `0x00` or `0xCC` values in executable sections (like `.text`), may not require updating this value, as the number of sections remains unchanged.

To output some of the more interesting COFF File Header values, you can use the following print statements (Listing 12-18).

```go
// Print File Header
fmt.Println("[-----COFF File Header-----]")
fmt.Printf("[+] Machine Architecture: %#x\n", pefile.FileHeader.Machine)
fmt.Printf("[+] Number of Sections: %#x\n", pefile.FileHeader.NumberOfSections)
fmt.Printf("[+] Size of Optional Header: %#x\n", pefile.FileHeader.SizeOfOptionalHeader)
// Print section names
fmt.Println("[-----Section Offsets-----]")
fmt.Printf("[+] Number of Sections Field Offset: %#x\n", pe_sig_offset+6) // u
// this is the end of the Signature header (0x7c) + coff (20bytes) + oh32 (224bytes)
fmt.Printf("[+] Section Table Offset: %#x\n", pe_sig_offset+0xF8)
```

**Listing 12-18: Writing COFF File Header values to terminal output (`/ch-12/peParser/main.go`)**

You can locate the `NumberOfSections` value by calculating the offset of the PE signature + 4 bytes + 2 bytes—in other words, by adding 6 bytes. In our code, we already defined `pe_sig_offset`, so we just add 6 bytes to that value. We will discuss sections in more detail when we examine the Section Table structure.

The produced output describes the `Machine Architecture` value of `0x14c`: an `IMAGE_FILE_MACHINE_I386` as detailed in [Microsoft Documentation](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#machine-types). The number of sections is `0x8`, indicating that eight entries exist within the Section Table. The `Optional Header` (which will be discussed next) has a variable length depending on the architecture: the value is `0xe0` (224 in decimal), which corresponds to a 32-bit system. The last two sections can be considered more of convenience output. Specifically, the `Sections Field Offset` provides the offset to the number of sections, while the `Section Table Offset` provides the offset for the location of the Section Table. Both offset values would require modification if adding shellcode, for example.

#### Parsing the Optional Header
The next header in the PE file structure is the Optional Header. An executable binary image will have an Optional Header that provides important data to the loader, which loads the executable into virtual memory. A lot of data is contained within this header, so we will cover only a few items to get you used to navigating this structure.

To get started, we need to perform a binary read of the relevant byte length based on the architecture, as described in Listing 12-19.

```go
// Get size of OptionalHeader
u var sizeofOptionalHeader32 = uint16(binary.Size(pe.OptionalHeader32{}))
v var sizeofOptionalHeader64 = uint16(binary.Size(pe.OptionalHeader64{}))
w var oh32 pe.OptionalHeader32
x var oh64 pe.OptionalHeader64
// Read OptionalHeader
switch pefile.FileHeader.SizeOfOptionalHeader {
case sizeofOptionalHeader32:
    y binary.Read(sr, binary.LittleEndian, &oh32)
case sizeofOptionalHeader64:
    binary.Read(sr, binary.LittleEndian, &oh64)
}
```

**Listing 12-19: Reading the Optional Header bytes (`/ch-12/peParser/main.go`)**

In this code block, we initialize two variables, `sizeOfOptionalHeader32` and `sizeOfOptionalHeader64`, with 224 bytes and 240 bytes, respectively. This is an x86 binary, so we will use the former variable in our code. Immediately following the variable declarations are initializations of `pe.OptionalHeader32` and `pe.OptionalHeader64` interfaces, which will contain the Optional Header data. Finally, we perform the binary read and marshal it to the relevant data structure: the `oh32` based on a 32-bit binary.

Let's describe some of the more notable items of the Optional Header. The corresponding print statements and subsequent output are provided in Listing 12-20.

```go
// Print Optional Header
fmt.Println("[-----Optional Header-----]")
fmt.Printf("[+] Entry Point: %#x\n", oh32.AddressOfEntryPoint)
fmt.Printf("[+] ImageBase: %#x\n", oh32.ImageBase)
fmt.Printf("[+] Size of Image: %#x\n", oh32.SizeOfImage)
fmt.Printf("[+] Sections Alignment: %#x\n", oh32.SectionAlignment)
fmt.Printf("[+] File Alignment: %#x\n", oh32.FileAlignment)
fmt.Printf("[+] Characteristics: %#x\n", pefile.FileHeader.Characteristics)
fmt.Printf("[+] Size of Headers: %#x\n", oh32.SizeOfHeaders)
fmt.Printf("[+] Checksum: %#x\n", oh32.CheckSum)
fmt.Printf("[+] Machine: %#x\n", pefile.FileHeader.Machine)
fmt.Printf("[+] Subsystem: %#x\n", oh32.Subsystem)
fmt.Printf("[+] DLLCharacteristics: %#x\n", oh32.DllCharacteristics)
```

**Listing 12-20: Writing Optional Header values to terminal output (`/ch-12/peParser/main.go`)**

Assuming that the objective is to backdoor a PE file, you will need to know both the `ImageBase` and `Entry Point` in order to hijack and memory jump to the location of the shellcode or to a new section defined by the number of Section Table entries. The `ImageBase` is the address of the first byte of the image once it is loaded into memory, whereas the `Entry Point` is the address of the executable code relative to the `ImageBase`. The `Size of Image` is the actual size of the image, in its entirety, when loaded into memory. This value will need to be adjusted to accommodate any increase in image size, which could happen if you added a new section containing shellcode.

The `Sections Alignment` will provide the byte alignment when sections are loaded into memory: `0x1000` is a rather standard value. The `File Alignment` provides the byte alignment of the sections on raw disk: `0x200` (512K) is also a common value. You will need to modify these values to get working code, and you will have to use a hex editor and a debugger if you are planning to perform all this manually.

The Optional Header contains numerous entries. Instead of describing every single one of them, we recommend that you explore the documentation at [Microsoft Documentation](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#optional-header-windows-specific-fields-image-only) to gain a comprehensive understanding of each entry.

#### Parsing the Data Directory
At runtime, the Windows executable must know important information, such as how to consume a linked DLL or how to allow other application processes to consume resources that the executable has to offer. The binary also needs to manage granular data, such as thread storage. This is the primary function of the Data Directory.

The Data Directory is the last 128 bytes of the Optional Header and pertains specifically to a binary image. We use it to maintain a table of references containing both an individual directory’s offset address to the data location and the size of the data. Exactly 16 directory entries are defined within the `WINNT.H` header, which is a core Windows header file that defines various data types and constants to be used throughout the Windows operating system.

Note that not all of the directories are in use, as some are reserved or unimplemented by Microsoft. The entire list of data directories and details of their intended use can be referenced at [Microsoft Documentation](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#optional-header-data-directories-image-only). Again, a lot of information is associated with each individual directory, so we recommend you take some time to really research and get familiar with their structures.

Let's explore a couple of directory entries within the Data Directory using the code in Listing 12-21.

```go
// Print Data Directory
fmt.Println("[-----Data Directory-----]")
var winnt_datadirs = []string{
    "IMAGE_DIRECTORY_ENTRY_EXPORT",
    "IMAGE_DIRECTORY_ENTRY_IMPORT",
    "IMAGE_DIRECTORY_ENTRY_RESOURCE",
    "IMAGE_DIRECTORY_ENTRY_EXCEPTION",
    "IMAGE_DIRECTORY_ENTRY_SECURITY",
    "IMAGE_DIRECTORY_ENTRY_BASERELOC",
    "IMAGE_DIRECTORY_ENTRY_DEBUG",
    "IMAGE_DIRECTORY_ENTRY_COPYRIGHT",
    "IMAGE_DIRECTORY_ENTRY_GLOBALPTR",
    "IMAGE_DIRECTORY_ENTRY_TLS",
    "IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG",
    "IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT",
    "IMAGE_DIRECTORY_ENTRY_IAT",
    "IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT",
    "IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR",
    "IMAGE_NUMBEROF_DIRECTORY_ENTRIES",
}
for idx, directory := range oh32.DataDirectory {
    fmt.Printf("[!] Data Directory: %s\n", winnt_datadirs[idx])
    fmt.Printf("[+] Image Virtual Address: %#x\n", directory.VirtualAddress)
    fmt.Printf("[+] Image Size: %#x\n", directory.Size)
}
```

**Listing 12-21: Parsing the Data Directory for address offset and size (`/ch-12/peParser/main.go`)**

The Data Directory list is statically defined by Microsoft, meaning that the literal individual directory names will remain in a consistently ordered list. As such, they are considered to be constants. We will use a slice variable, `winnt_datadirs`, to store the individual directory entries so we can reconcile names to index positions. Specifically, the Go PE package implements the Data Directory as a struct object, so we are required to iterate over each entry to extract the individual directory entries, along with their respective address offset and size attributes. The `for` loop is 0-index based, so we just output each slice entry relative to its index position.

The directory entries being displayed to standard output are the `IMAGE_DIRECTORY_ENTRY_EXPORT` (or the EAT) and the `IMAGE_DIRECTORY_ENTRY_IMPORT` (or the IAT). Each of these directories maintains a table of exported and imported functions, respectively, relative to the running Windows executable. Looking further at `IMAGE_DIRECTORY_ENTRY_EXPORT`, you will see the virtual address containing the offset of the actual table data, along with the size of the data contained within.

#### Parsing the Section Table
The Section Table, the last PE byte structure, immediately follows the Optional Header. It contains the details of each relevant section in the Windows executable binary, such as executable code and initialized data location offsets. The number of entries matches the `NumberOfSections` defined within the COFF File Header. You can locate the Section Table at the PE signature offset + `0xF8`.

Let's take a look at this section within a hex editor (Figure 12-8).

**Figure 12-8: The Section Table, as observed using a hex editor**

This particular Section Table starts with `.text`, but it might start with a `CODE` section, depending on the binary’s compiler. The `.text` (or `CODE`) section contains the executable code, whereas the next section, `.rodata`, contains read-only constant data. The `.rdata` section contains resource data, and the `.data` section contains initialized data. Each section is at least 40 bytes in length.

You can access the Section Table within the COFF File Header. You can also access each section individually, using the code in Listing 12-22.

```go
s := pefile.Section(".text")
fmt.Printf("%v", *s)
```

**Listing 12-22: Parsing a specific section from the Section Table (`/ch-12/peParser/main.go`)**

The other option is to iterate over the entire Section Table, as shown in Listing 12-23.

```go
fmt.Println("[-----Section Table-----]")
for _, section := range pefile.Sections {
    fmt.Println("[+] --------------------")
    fmt.Printf("[+] Section Name: %s\n", section.Name)
    fmt.Printf("[+] Section Characteristics: %#x\n", section.Characteristics)
    fmt.Printf("[+] Section Virtual Size: %#x\n", section.VirtualSize)
    fmt.Printf("[+] Section Virtual Offset: %#x\n", section.VirtualAddress)
    fmt.Printf("[+] Section Raw Size: %#x\n", section.Size)
    fmt.Printf("[+] Section Raw Offset to Data: %#x\n", section.Offset)
    fmt.Printf("[+] Section Append Offset (Next Section): %#x\n", section.Offset+section.Size)
}
```

**Listing 12-23: Parsing all sections from a Section Table (`/ch-12/peParser/main.go`)**

Here, we are iterating over all the sections within the Section Table and writing the name, virtual size, virtual address, raw size, and raw offset to standard output. We also calculate the next 40-byte offset address in the event that we would want to append a new section. The characteristics value describes how the section is to behave as part of the binary. For example, the `.text` section provides a value of `0x60000020`. Referencing the relevant Section Flags data at [Microsoft Documentation](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#section-flags), we can see that three separate attributes make up the value.

**Table 12-2: Characteristics of Section Flags**

| Flag | Value | Description |
|------|-------|-------------|
| `IMAGE_SCN_CNT_CODE` | `0x00000020` | The section contains executable code. |
| `IMAGE_SCN_MEM_EXECUTE` | `0x20000000` | The section can be executed as code. |
| `IMAGE_SCN_MEM_READ` | `0x40000000` | The section can be read. |

By understanding and parsing these key components of the PE file structure, you can gain deep insights into the inner workings of Windows executables and perform advanced analysis and modifications.