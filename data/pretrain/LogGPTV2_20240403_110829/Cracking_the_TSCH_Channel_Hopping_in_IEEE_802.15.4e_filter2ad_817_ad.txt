consumption used by each method with 30,000 eavesdropped slots.
For each slotframe length, the time spent for cracking decreases
by more than 60% (e.g., from 5.55s to 1.85s for 578,429 slots) after
acceleration. Benefiting from the extraction, the actual combined
slotframe length decreases dramatically. The attacking program
therefore produces better cracking performance with less time con-
sumption.
Observation 7: The strong cyclic behavior of packet transmissions
significantly reduces the cracking difficulty.
4.5 Suggestions to Orchestra
Here are some suggestions gathered from our case study:
• It is beneficial to set three different prime numbers as the
lengths of the three slotframes in Orchestra. So the length
of the combined slotframe is large (LCM of those numbers),
significantly increasing the cracking difficulty. The larger
a combined slotframe is, the more time an attacker have
to spend on snooping and cracking. Orchestra’s decision
on using prime numbers as the lengths of the slotframes
significantly enhances the network security.
• It is beneficial to use multiple slotframes for application
traffic. So the length of the combined slotframe is enlarged
(LCM of those numbers), which significantly increases the
cracking difficulty.
• It is beneficial to randomize the distribution of the slots with
transmissions in each slotframe for routing and time synchro-
nization. The strong cyclic behavior of packet transmissions
greatly reduces the difficulty of cracking.
Table 3: Six data flows configured in WirelessHart network.
Flow Sensor Actuator
1
2
3
4
5
6
147
144
105
149
136
137
Period
320ms
640ms
1280ms
2560ms
5120ms
10240ms
Priority
1
2
3
4
5
6
146
143
104
102
135
108
5 CASE STUDY ON WIRELESSHART
In this section, we present our case study on cracking the channel
hopping sequence of the TSCH implementation in TinyOS operat-
ing system [18] developed for WirelessHART networks8 [19–21].
Typically, a WirelessHART network consists of a gateway, multi-
ple access points, and a set of field devices (sensors and actuators)
forming a multi-hop mesh network. The network is managed by
a centralized network manager, a software module running on
the gateway, which is responsible for generating routes and trans-
mission schedules and maintaining the operation of the network.
Different from Orchestra, all devices in the WirelessHART networks
follow the channel hopping sequences generated by the network
manager. To enhance the network utilization, the network man-
ager assigns different ChannelO f f sets to different links, allowing
up to Nchannels packets to be transmitted simultaneously in each
time slot. WirelessHART supports both source and graph routing.
Source routing provides a single route for each data flow, whereas
graph routing generates a reliable routing graph in which each de-
vice should have at least two neighbors to which they can forward
packets.
5.1 Experiment Methodology
We run the experiments on the same testbed and configure the
network to have two access points and 48 field devices operating
on four channels. As Table 3 lists, we set up six data flows with dif-
ferent sources, destinations, data periods, and priorities and employ
graph routing as well as the rate monotonic policy for transmission
scheduling. The slotframe lengths are 32, 64, 128, 256, 512 and 1,024
as suggested in the WirelessHART standard [49]. Therefore, the
8The implementation is provided by Li et al. and is publicly accessible [46].
Cracking the Channel Hopping Sequences in TSCH Networks
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
(a) TPR, TNR, and Accuracy.
(b) Time consumption.
Figure 9: Cracking performance on WirelessHART with different snooping periods.
combined slotframe includes 1,024 time slots in total. A maximum
of three transmission attempts are scheduled for each packet. The
first two attempts go through the main route and the final attempt
uses the backup route in the routing graph. WirelessHART [49]
specifies that Slenдth is equal to Nchannel and every channel ap-
pears one time in F. We perform two sets of experiments. First,
we measure the prediction performance and cracking time when
the attacker snoops different amount of time before launching the
attack. Second, we vary Slenдth and investigate its impact on the
cracking difficulty. We use the same device to execute the attacking
program.
5.2 Cracking Performance with Different
Snooping Periods
In this set of experiments, we vary the size of the training set
(number of eavesdropped time slots) from 171,008 slots (167 com-
bined slotframes) to 2,048,000 slots (2,000 combined slotframes)
and use the channel activities during the next 1,707,008 slots (1667
combined slotframes) as the validation set. Figure 9(a) plots TPR,
TNR, and Accuracy. As Figure 9(a) presents, TPR and Accuracy are
low (80.30% and 86.09% for TPR, 90.95% and 93.38% for Accuracy)
when 171,008 and 342,016 time slots are eavesdropped (167 and
334 combined slotframes as presented as the first two sets of bars).
Without enough observations, the cracking program fails to derive
the correct Ns. However, the Ns produced by the attacking pro-
gram shares a common factor with the actual value, resulting in
some correct predictions on the future channel usage (TPRs higher
than 80%). Comparing Figure 9(a) and Figure 5, we observe that
the attacking program achieves much higher TPR and Accuracy
on WirelessHART than those on Orchestra with a similar amount
of eavesdropped time slots which is insufficient for Algorithm 1
to derive the correct Ns. This is because the number of slots in
each slotframe is specified to be 2n in WirelessHART, resulting in
a smaller combined slotframe and a short repetition cycle. In con-
trast, the default slotframe lengths of Orchestra are prime numbers,
leading to a significant larger slotframe. Therefore, it is harder for
the attacker to capture the repetition cycle. As Figure 9(a) shows,
TPR and Accuracy experience a quick rise when 512,000 slots has
been eavesdropped. TPR and Accuracy reach 96.98% and 98.54%,
providing very accurate predictions on the channel usage. The
training set is large enough for the attacking program to derive
the correct Ns and predict the channel usage. TPR and Accuracy
then increase slowly when the training set becomes larger (TPR
ranging from 96.98% to 99.78% and Accuracy ranging from 98.54%
to 99.80%). We observe consistent high TNRs, since most time slots
in the slotframe are not scheduled with transmissions.
Figure 9(b) shows the time consumed by the attacking program
to crack the channel hopping sequence9. The time consumption
increases linearly from 83.18s (171,008 slots) to 1037.47s (2,048,000
slots), which accords with the O(Nr) time complexity of Algo-
rithm 1.
Observation 8: The cracking difficulty depends highly on the
length of combined slotframe (LCM of different slotframe lengths).
The attacking program consumes more time when cracking larger
combined slotframe but provides less accurate predictions.
5.3 Impact of the Length of Sequence Slenдth
In this set of experiments, we increase Slenдth from 1 to 16 and
repeat the experiments. For all experimental executions, we con-
figure the attacking program to crack after snooping the channel
activities for 1,366,016 time slots (1,334 combined slotframes) and
use the following 1,366,016 slots for validation. Figure 10(a) plots
False Positive Rate (F PR = F P/(F P + T N)). As Figure 10(a) shows,
FPRs are 5.88%, 4.08%, 6.49%, and 8.33% when 13∼16 channels are
available in the network, higher than the ones with less channels.
Figure 10(b) plots the time consumed by the attacking program to
crack the channel hopping sequences with different Slenдth. The
time consumption increases from 768.53s with 1 channel, to 973.15s
with 9 channels, and finally reaches 1465.03s with 16 channels. The
results present that the cracking becomes more difficult when more
channels are used in the network. This is because the data flows
involve more hops when more channels are available for use [12],
resulting in more transmissions in each slotframe.
Observation 9: It is difficult to crack the channel hopping se-
quences when a large Slenдth is used in WirelessHART networks.
5.4 Suggestions to WirelessHART
Here are some suggestions gathered from our case study:
• The specification on using slotframes with 2n slots in Wire-
lessHART makes the channel hopping sequences easier to
9The snooping period is not added into the result.
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
Xia Cheng, Junyang Shi, and Mo Sha
(a) FPR.
(b) Time consumption.
Figure 10: Cracking performance with different Slenдth in the network.
be derived. It is beneficial to use a prime number as the
slotframe length.
• It is beneficial to use more channels (increasing Slenдth),
which increases the cracking difficulty.
6 LESSONS LEARNED
In this section, we provide a series of insights on how to secure the
TSCH channel hopping based on our analysis and case studies.
6.1 Slotframe Length
As Figure 7(a) shows, the length of combined slotframe makes a
significant effect on the cracking difficulty. The larger the combined
slotframe is, the more difficult the cracking is. It is beneficial to set
the number of slots in different slotframes to be co-prime integers,
maximizing the length of combined slotframe. As an example, the
individual slotframes in the first three settings (listed in Table 2)
have similar lengths, but the cracking difficulty under the third
setting is much higher than the others, as Figure 7(a) shows. The
default slotframe lengths in Orchestra are prime numbers, while
the slotframes in WirelessHART include 2n slots, sharing common
factors with each other. Comparing Figure 9(a) against Figure 5,
cracking the channel hopping sequences in WirelessHART is much
easier than cracking Orchestra. Therefore, we would suggest em-
ploying multiple slotframes for different types of traffic, and even
for different data flows belonging to the same type of traffic, and
configuring the number of slots in each slotframe to be a prime
number. For instance, if 31, 61, 127, 257, 509, and 1,021 are used
as the slotframe lengths for the six data flows in WirelessHART
(replacing the setup in Section 5.1), the combined slotframe includes
more than 3.20 × 1013 time slots. The attacker has to spend more
than 15,256 years to snoop a complete combined slotframe.
6.2 Repetition Pattern
The network device running Orchestra makes scheduling decisions
based on its MAC address with a fixed offset in each slotframe,
significantly making the channel usage repetition cycle detectable.
As Figure 8(a) and Figure 8(b) show, the strong cyclic behavior
of packet transmissions significantly reduces the cracking diffi-
culty. As a comparison, there is no strong pattern observed in
WirelessHART, which can be used by the attacker to speed up the
cracking. Therefore, we would suggest the designer of transmis-
sion scheduler avoid strong repetition pattern and randomize the
transmissions. For example, Orchestra can employ pseudo-random
numbers to randomize the transmission slots in the routing and
time synchronization slotframes.
6.3 Channel Diversity
Using more channels not only improves the network performance
but also enhances the channel hopping security. As Figure 10(a)
shows, the cracking difficulty increases when using more channels.
Moreover, the channel hopping sequence used by each device re-
peats in every LCM(Ns , Slenдth) time slots (Section 3.1). Hence, a
large Slenдth without any common factor with Ns significantly ex-
tends the repetition cycle, making it hard for an attacker to identify
the channel repetition pattern. Therefore, we would suggest using
all available channels and choose Ns without having a common
factor with Slenдth.
6.4 Link Setting
Orchestra specifies that all links associating with the same slot-
frame uses a single ChannelO f f set. This design not only limits the
network capacity but also significantly reduces the size of channel
offset table which is created and maintained by the attacker. Because
of the small number of ChannelO f f set (up to three), the attacker
can perform the cracking very memory-efficiently. Therefore, we
would suggest using available ChannelO f f set (Slenдth).
7 RELATED WORKS
Jamming attacks have been extensively studied in the WSN and
wireless mesh network literature. Simply jamming a channel or
the whole spectrum continuously can be easily detected and lo-
cated by a WIPS [23, 34, 50, 51, 54]. Many countermeasures have
been developed in the literature to minimize the damage. For in-
stance, countermeasure strategies (e.g., adapting frequencies/codes
to enforce spread-spectrum techniques) can be implemented in
the physical layer to make jamming too complicated to carry
out [5, 30, 39, 41, 54, 55]. Adjusting routing [7, 16, 25, 52], adapting
transmission power [53], hopping channel [17, 52], adding redun-
dancy [52], increasing randomness on channel access [3, 6, 44] have
been shown effective against jamming attacks. Compared to contin-
uous jamming, selective (reactive) jamming has been shown to be
Cracking the Channel Hopping Sequences in TSCH Networks
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
much harder to detect [32, 33, 36, 39, 41, 48]. Selective jammers jam
wireless channels only when their target devices are transmitting
or specific packets of “high” importance are being transmitted, thus
making them active for a short period of time and expending orders
of magnitude with less energy. Recent studies have shown that
the selective jammers can be implemented on inexpensive com-
mercial off-the-shelf (COTS) platforms, making it a realistic threat
to wireless communications [32, 33, 36, 48]. However, the existing
solutions may fail to distinguish the damage caused by attacks from
the normal signal fluctuations, because the transmission failures
caused by the attacks happen occasionally and are buried in the
normal fluctuations of low-power links. In this paper, we consider
a specific kind of selective jamming, tailored to attack TSCH based
wireless networks, where jamming is selectively performed against