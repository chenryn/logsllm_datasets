# Shiro 权限绕过的历史线（下）

## 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

## 0x5 CVE-2020-13933

### 0x5.1 漏洞简介
受影响版本:
- `org.apache.shiro:shiro-web:1.5.3`
- `org.apache.shiro:shiro-spring:1.5.3`

Shiro配置示例：
```java
map.put("/hello/*", "authc");

@ResponseBody
@RequestMapping(value="/hello/{index}", method=RequestMethod.GET)
public String hello1(@PathVariable String index) {
    return "Hello World" + index.toString() + "!";
}
```

### 0x5.3 漏洞演示
访问路径 `/hello/%3bluanxie` 会导致302重定向。这个POC让我意识到在之前的分析中可能遗漏了一些关键点。特别是为什么需要对`;`进行编码才能成功利用漏洞，这让我感到困惑。接下来我们将通过详细分析来回顾前两次学习过程中出现的问题。

### 0x5.4 漏洞分析
断点设置在 `org.apache.shiro.web.util.WebUtils#getPathWithinApplication` 方法上。我们逐步跟进代码，发现 `removeSemicolon` 函数的作用是去除`;`号后面的内容，然后进行规范化处理。这一步并没有太大问题。

函数返回的结果是 `/hello/`。由于早期的 `shiro-682` 漏洞，会执行去掉末尾斜杠的操作：
```java
if (requestURI != null && !"/".equals(requestURI) && requestURI.endsWith("/")) {
    requestURI = requestURI.substring(0, requestURI.length() - 1);
}
```
最终结果变为 `/hello`。

接下来，通过 `Iterator var6 = filterChainManager.getChainNames().iterator()` 获取定义的过滤器，并进入循环逐个取值给 `pathPattern`。其实不需要深入了解匹配算法，因为 `/hello/*` 本来就不会匹配 `/hello`。如果改为 `map.put("/hello/", "authc")`，则在取出进行匹配时会被去掉 `/`。

尝试增加多个斜杠：
```java
map.put("/hello//", "authc");
```
稍微绕过了限制。

现在我们回头阅读Shiro的匹配算法：
1. 如果 `pattern` 和 `path` 开头不同，直接返回 `false`。
2. 使用 `StringUtils.tokenizeToStringArray` 分割字符串得到数组。
3. 循环比较每个字符串，如果出现不匹配且不是 `**`，返回 `false`。
4. 如果没有 `**` 且字符串数组长度为1，则直接返回：
   ```java
   pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator);
   ```
5. 如果 `pattern` 以 `/` 结尾，返回 `path.endsWith(this.pathSeparator)`。此时 `path` 不是以 `/` 结尾，所以不匹配。
6. 如果是 `/*`，字符串数组长度大于1，最终会进入：
   ```java
   /hello/* 可以匹配 /hello/，但不能匹配 /hello。而Shiro又做了去除 / 的处理，因此无法构造出 /hello/，即使构造出来也没有用。
   ```

如果是 `/hello/**`，则不会返回 `false`，直接跳到下面，最终返回 `true`。说明 `/hello/**` 可以匹配 `/hello`。

通过上述分析，我们可以明白：第一步通过 `%3b` 解码成 `;`，然后之前的漏洞删除了 `/`，导致绕过了Shiro。如果我们不用 `%3b`，而是直接使用 `;`，那么 `;` 会被 `request.getServletPath()` 处理掉，变成 `/hello/aa`，被 `/hello/**` 这种ant风格匹配，从而无法绕过。（这实际上是CVE-2020-1957的绕过思路，显然行不通）

### 0x5.5 漏洞修复
为了修复此漏洞，建议升级到最新版本的Apache Shiro，并确保所有路径配置正确，避免不必要的路径规范化操作。同时，加强对请求路径的验证和过滤，防止恶意输入绕过权限检查。