if l (cid:118) L
if l (cid:54)(cid:118) L
We say that output traces o1 and o2 are low equivalent, written
o1 ≈L o2, if and only if o1 (cid:22)L = o2 (cid:22)L.
Program conﬁgurations have the form (cid:104)c, m, o(cid:105) where c is the
command to be evaluated, m is the current memory, and o is the
output trace produced so far. Semantic transitions have the form
(cid:104)c, m, o(cid:105) −→ (cid:104)c(cid:48), m(cid:48), o(cid:48)(cid:105). The transition relation −→ is mostly
standard, and is presented in Figure 2. We write m(e) = v to
indicate that expression e evaluates to value v when variables x
occurring in e are replaced with their values m(x).
The rule for castp[c] requires that the termination or divergence
of command c is determined by low-security information. If that
is not the case, then the program is stuck. Rule S-CAST uses a
termination oracle O(p, m, o) to determine whether the termina-
tion behavior of c depends only on low-security information. The
oracle is given a program point p that identiﬁes a cast castp[c],
S-SKIP
(cid:104)skip, m, o(cid:105) −→ (cid:104)stop, m, o(cid:105)
S-ASSIGN
(cid:104)x := e, m, o(cid:105) −→ (cid:104)stop, m[x (cid:55)→ v], o(cid:105)
m(e) = v
S-SEQ-1
(cid:48)(cid:105)
(cid:104)c1, m, o(cid:105) −→ (cid:104)stop, m
(cid:48)
, o
(cid:104)c1; c2, m, o(cid:105) −→ (cid:104)c2, m
(cid:48)(cid:105)
(cid:48)
, o
S-SEQ-2
(cid:104)c1, m, o(cid:105) −→ (cid:104)c
(cid:48)(cid:105)
c
, o
(cid:104)c1; c2, m, o(cid:105) −→ (cid:104)c
(cid:48)
1; c2, m
(cid:48)
1, m
(cid:48)
1 (cid:54)= stop
(cid:48)
(cid:48)
, o
(cid:48)(cid:105)
S-IF
m(e) (cid:54)= 0 =⇒ i = 1
m(e) = 0 =⇒ i = 2
(cid:104)if e then c1 else c2, m, o(cid:105) −→ (cid:104)ci, m, o(cid:105)
S-WHILE-TRUE
(cid:104)while e do c, m, o(cid:105) −→ (cid:104)c; while e do c, m, o(cid:105)
m(e) (cid:54)= 0
S-WHILE-FALSE
(cid:104)while e do c, m, o(cid:105) −→ (cid:104)stop, m, o(cid:105)
m(e) = 0
m(e) = v
S-OUTPUT
(cid:104)outputl(e), m, o(cid:105) −→ (cid:104)stop, m, o :: (v, l)(cid:105)
S-CAST
O(p, m, o) ∈ {TERMINATE, DIVERGE}
(cid:104)castp[c], m, o(cid:105) −→ (cid:104)c, m, o(cid:105)
Figure 2: Semantics
the current memory m, and the current output trace o (and, im-
plicitly, the original program c0 and the initial memory m0), and
responds with one of TERMINATE, DIVERGE, or UNKNOWN. In-
tuitively, if the oracle responds TERMINATE then low-security in-
formation is sufﬁcient to determine that c will terminate. That is,
command c is guaranteed to terminate for any execution of pro-
gram c0 that starts with an initial memory that is low equivalent
to m0 and reaches castp[c], after producing an output trace o(cid:48) that
is low equivalent to o, in memory m(cid:48) that is low-equivalent to m.
Formally, if O(p, m, o) = TERMINATE, then
(cid:48) ≈L m ∧ o
0, (cid:105) −→∗ (cid:104)castp[c]; c
(cid:48)
(cid:48)
(cid:48)
, o
if ((cid:104)c0, m
0 ≈L m0 ∧ m
(cid:48)
. m
∀m
(cid:48)
0, m
(cid:48)
(cid:48)
(cid:48) ≈L o.
(cid:48)(cid:105))
, o
, m
∗ such that
(cid:48)(cid:105) −→∗ (cid:104)stop, m
∗ and o
, o
(cid:104)c, m
(cid:48)
∗
∗(cid:105).
, o
then there exist m
Similarly, if O(p, m, o) = DIVERGE then any low-equivalent exe-
cution of c0 that reaches castp[c] is guaranteed to diverge:
∀m
(cid:48)
0, m
(cid:48)
0 ≈L m0 ∧ m
(cid:48)
. m
(cid:48)
, o
if ((cid:104)c0, m
then there does not exist m
(cid:104)c, m
(cid:48)
(cid:48) ≈L o.
(cid:48) ≈L m ∧ o
(cid:48)(cid:105))
0, (cid:105) −→∗ (cid:104)castp[c]; c
(cid:48)
(cid:48)
, o
, m
∗ and o
∗ such that
(cid:48)(cid:105) −→∗ (cid:104)stop, m
, o
(cid:48)
∗
∗(cid:105).
, o
883Γ, pc (cid:96) skip : L
(cid:48)
pc (cid:116) l
Γ, pc (cid:96) x := e : L
(cid:48) (cid:118) Γ(x)
Γ (cid:96) e : l
Γ, pc (cid:96) c1 : l1
Γ, pc (cid:116) l1 (cid:96) c2 : l2
Γ, pc (cid:96) c1; c2 : l1 (cid:116) l2
Γ (cid:96) e : l
Γ, pc (cid:116) l (cid:96) ci : li
Γ, pc (cid:96) if e then c1 else c2 : l1 (cid:116) l2
(cid:48) (cid:96) c : l
Γ (cid:96) e : l
(cid:48)
Γ, pc (cid:116) l (cid:116) l
Γ, pc (cid:96) while e do c : l
(cid:48)
Γ, H (cid:96) c : l
Γ, L (cid:96) castp[c] : L
pc (cid:116) l
Γ (cid:96) e : l
(cid:48) (cid:118) l
Γ, pc (cid:96) outputl(e) : L
(cid:48)
Figure 3: Type system: commands
If the oracle responds with UNKNOWN then the oracle is unable
to determine whether the termination behavior of castp[c] depends
only on low-security information.
While the problem of proving program termination is clearly un-
decidable, there are many approaches to implementing sound and
useful (but incomplete) termination oracles. Simple, albeit im-
precise program analysis could identify common patterns (for ex-
ample, identifying for loops such that the loop counter is a low-
security variable, and the stride is a constant). For more complex
programs, existing tools (e.g., [19, 31, 52]) for proving program ter-
mination can be employed. More sophisticated approaches, such as
the work of Cook et al. [20], are able to automatically synthesize
sufﬁcient conditions to prove loop termination. We describe our
prototype implementation in Section 7.
3. TYPE SYSTEM
This section presents the typing rules for our language. The rules
for expressions are standard and have form Γ (cid:96) e : l, meaning that
in environment Γ, level l is an upper bound on the information that
may be learned by evaluating expression e. Typing rules for com-
mands have form Γ, pc (cid:96) c : l, where pc is the program counter
level, and l is the termination level. Figure 3 presents typing rules
for commands in our language. Termination level l of command c
is an upper bound on how much information may be learned by
observing c’s termination. For simple commands, such as skip,
assignment, and output, the termination level is always L—these
commands always terminate and thus the termination of the com-
mand reveals no information. The rule for sequential composition
c1; c2 propagates the termination level of c1 into the pc-level of c2,
since c2 executes only if c1 terminates. Therefore, if the termina-
tion level of c1 is H, no low assignments or low outputs are allowed
in c2. The termination level of c1; c2 is the join of the termination
levels of the individual commands. The termination level of con-
ditional if e then c1 else c2 is the join of the termination levels of
branches c1 and c2.
For command while e do c, the termination of the loop may de-
pend on both the guard expression e and the termination of loop
body c. Thus, the termination level for a while loop contains the
join of the level of the guard expression l and the termination level
of c. In addition, if the while loop diverges then program’s nonter-
mination may reveal that the while loop was executed. The pc-level
is an upper bound on the information that may be learned by know-
ing that the while loop executed, and so the pc-level is folded into
the termination level of the loop.
Example. Let Γ(h) = H and Γ(low ) = L. Consider program
while h > 0 do h := h − low ;
outputL(1)
The type system rejects this program, because the termination level
of the while loop is H, and so the pc-level of the output command
is also H, which does not type check.
The typing rule for cast[c] is noteworthy. It ignores the termina-
tion level of subcommand c, and the termination level of the casted
command is L. The intuition is that the termination behavior of c
is assumed to depend only on low-security information, and thus
the termination or non-termination of c will not leak secret infor-
mation. This assumption will be validated at runtime by the termi-
nation oracle. This is secure because the oracle’s decision is based
only on low-security information, and thus the success or failure
of the cast at runtime does not reveal any secret information. Sub-
command c must type check with a pc-level of H, which ensures
that c does not contain any assignments to low-security variables
or low-security outputs. This is a technical simpliﬁcation with no
loss of expressiveness—any casted command c that is well-typed
under low pc-level can be transformed into a form with (possibly
many) casts around subcommands of c that are well-typed under
high-pc. The latter is possible because a command of the form
Γ, L (cid:96) while h do c is well-typed if and only if Γ, H (cid:96) while h do c
is well-typed; the same holds for the conditionals. If original com-
mand contains no high loops or conditionals, then the cast is redun-
dant and can be omitted.
Example. Let Γ(h) = H and Γ(low ) = L. Consider program
cast[while h > 0 do h := h − low ];
outputL(1)
This program is accepted by the type system, because the termina-
tion level of the cast is L, and so the pc level of the output command
is also L, and thus the output command type checks. The termina-
tion of the while loop here depends on the values of low and h. In
particular, when low > 0, the while loop will terminate regardless
of the value of h; when low ≤ 0, termination depends on h. At
runtime, according to S-CAST, the termination oracle needs to ex-
amine variable low, and execution continues only when low > 0.
On placement of casts Note that our language allows casts to be
placed around any code block, not just loops. In fact, limiting casts
to just loops would be insufﬁcient, as illustrated by the following
program.
if h > 0
then while h(cid:48) > 0 do h(cid:48) := h(cid:48) − low ;
else skip;
outputL(1)
Placing the cast around the loop would not close the termination
channel of this program: when h ≤ 0, the program takes the
else branch, omitting the request to the termination oracle; yet, if
low ≤ 0, the subsequent output of value 1 reveals h ≤ 0, be-
cause otherwise the execution would have been stopped. For this
reason, our type system rules out casts in high contexts. The cor-
rect placement of cast for this example is around the if command,
which would allow the program to type check.
8844. SECURITY
We deﬁne security in terms of an attacker that is able to observe
both the initial values of low-security variables and the low-security
output of a program execution. We assume the attacker knows the
program text.
We say that conﬁguration (cid:104)c, m, (cid:105) emits incomplete trace τ,
written (cid:104)c, m, (cid:105) ↓ τ, if there exists command c(cid:48), memory m(cid:48), and
output trace o such that (cid:104)c, m, (cid:105) −→∗ (cid:104)c(cid:48), m(cid:48), o(cid:105) and o(cid:22)L = τ.
Intuitively, if a conﬁguration emits trace τ then the attacker ob-
serves the outputs τ during the execution of the program.
We strengthen the observational model to allow the attacker to
determine when an execution will no longer produce additional
output on the attacker’s channel (because, for example, the program
terminates, diverges, or gets stuck). Trace τ is maximal, written τ•,
when there are no more public outputs possible in the computation
that emitted τ•. We say that conﬁguration (cid:104)c, m, (cid:105) emits maximal
trace τ•, written (cid:104)c, m, (cid:105) ↓ τ•, if there exists c(cid:48), m(cid:48), and o such
that (cid:104)c, m, (cid:105) −→∗ (cid:104)c(cid:48), m(cid:48), o(cid:105) and there is no more public out-