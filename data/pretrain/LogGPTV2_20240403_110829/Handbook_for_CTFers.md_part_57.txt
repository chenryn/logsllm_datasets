struct key *process_keyring;
struct key *thread_keyzing;
// keyring private to this thread
struct key *request_key_auth;
// assumed request_key authority
#endif
#ifdef CONFIG_SECURITY
void *security:
// subjective LSN security
#endif
struct user_struct *user;
// real user ID subscription
struct user_namespace
*user_ns;
// user_ns the caps and keyzings
are relative to
struct group_info *group_info;
// supplementary groups for euid/
fsgid
}
struct rcu_head rcu;
// RCU deletion hook
---
## Page 506
6.7 Linux Kermel PWN
6
Kermel code to get the thread_info address.
#ifdef
CONFIG_KASAN
#define
#else
KASAN_STACK_ORDER
1
#define
KASAN_STACK_ORDER
#endif
0
#define
PAGE_SHIFT
1.2
#define
PAGE_SIZE
(_AC (1, UL) 
#include 
#include 
#include 
#include casm/uaccess .h>
#include 
#include 
NODULE_AUTHOR (*xXOXx*) 
MODULE_LICENSE (*Dua1 BSD/GPL") ;
struct babydevice_t {
char +buf;
1ong len;
struct babydevice_t babydev_struct ;
dev_t babydevn;
static struct class +buttons_cls;
struct cdev babycdev;
loff_t *f_posl {
ssize_t babyread (struct file +filp, char _user *buf, size_t count,
if (!babydev_struct .buf)
int result;
return -1;
if (babydev_struct . len > count) (
result = -2;
raw_copy_to_ueer (buf, babydev_struet ,buf, count) ;
result = count;
return result;
ssize_t babyurite (struct file +filp, const char user +buf, size_t
count, 1off_t *f_pos) (
---
## Page 509
496
6PWN
if (!babydev_stzuct .buf)
int result;
retuzn -1;
result = -2;
if (babydev_struct . len > count) (
raw_copy_from_user (babydev_struct .buf, buf, count) ;
result = count ;
return result;
static long babyioctl (stzuct file+ filp , unsigned int cnd , unsigned 1ong
arg) (
if (cmd == 65537) {
int result;
kfree (babydev_struct .buf) :
babydev_stzuct .buf = kma11oc (arg, GFP_KERNEL) ;
babydev_stzuct . 1en = arg:
printk ("alloc donen") ;
result = 0;
else{
printk (KERN_ERR “default :arg le $1d’n", arg) :
result = -22;
return result;
int babyopen (struct inode *inode, struct file *filp) (
babydev_struct .buf = kmem_cache_alloc_trace (kma11oc_caches [6] ,
37748928, 641 ;
babydev_atruet .1en = 64 ;
printk (*device open\n*) ;
return 0;
int babyrelease (struct inode *inode, struct file *filp1 {
kfree (babydev_struct .buf) ;
printk (*device release′n*) ;
return 0;
stzuct file_operations babyfops = {
.ovner = THIS_MODUL&,
.read = babyread,
.vrite = babyurite,
.unlocked_ioct1 = babyioct1,
-open = babyopen,
.release = babyrelease,
J :
---
## Page 510
6.8 PWN for Windows
497
int babydriver_init (void) {
int result, err;
struct device *1 ;
result = alloc_chrdev_region (4babydevn, 0, 1, *babydev*) ;
if (result >= 0) {
cdev_init (sbabyedev, 4babyfops) :
err = cdev_add (sbabyedev, babydevn, 1) ;
babycdev owner = THIS_MODULE;
if (err >= 0) {
buttons_c1s = class_create (THIs_MooULE, *babydev#) ;
if (buttons_cls) (
1 = device_create (buttons_cls, 0, babydevn, 0, *babydev*) ;
f (1)
printk (KERN_ERR *create device failed\n#) ;
return 0;
class_destroy (buttons_cls) ;
else 
printk (KERN_ERR *create class failed’n") ;
cdev_de1 (&babycdev) ;
else {
printk (KERN_gRR "cdev init failed`,n*) ;
unregister_chrdev_region (babydevn, 1) ;
retuzn result;
printk [KgRN_gRg *alloc_chrdev_region failed\,n*) ;
return 0;
void babydriver_exit (void) {
device_destroy (buttons_cls, babydevn) ;
class_destroy (buttons_cls) ;
 (AapoAqeqy) tapsapo
unregister_chrdev_region (babydevn, 1) :
module_init (babydriver_init) ;
module_exit (babydriver_exit) ;
6.8 PWN for Windows
Compared with Linux, Windows is larger and more complex and contains more
components in the default configuration. Due to the vast majority of closed-source
components, complex permission management,
，and different kemel
implementations, PWN challenges in the Windows environment rarely appear in
---
## Page 511
498
6PWN
CTF, but as the overall strength of CTF teams is increasing, PWN challenges in
Windows are gradually gaining attention. In this section, we will focus on the
differences between Linux and Windows, and introduce the PWN techniques for
Windows.
6.8.1Permission Management for Windows
The default permission management for Windows is more complex than for Linux.
Traditional Linux permissions management is based on the owner, group, and access
mask. Usually, the user only needs three commands, chown, chgrp, and chmod, to
make all the changes to the permissions of a file under Linux. Under Windows, the
identification of each user is called a SID, and the management of the permissions to
objects (files, devices, memory areas, etc.) is controlled by the Security Descriptor
(SD). The Security Descriptor contains the SID of the owner, the group, the
Discretionary ACL, and the System ACL. the ACL (Access Control List) is the
list used to control access permissions to objects and contains multiple ACEs
(Access Control Entry). Each ACE describes a user’s permissions for the current
object.
In Windows, users can modify an object's ACL with the icacls command. icacls
uses Microsoft’s SDDL (Security Descriptor Definition Language) to detail the
information contained in a security descriptor.
View file permissions via icacls.
C: \Users\bitma>icacls test .txt
test . tXt NT AUTHORITY\SYSTEM: (F)
BUILTIN",Administrators : (F)
Successfully processed 1 file; failed when processing 0 files
DESKTOP- JQF8ABP\b1tma : (F)
As you can see, the three SIDs SYSTEM, Administrators, and bitma have full
access to test.txt. Now try to remove bitma’s access to test.txt.
C: \Users\bitma>icacls test.txt /inheritance:d
Processed files: test . txt
1 file successfully processed; failed when processing 0 files
C: \Users\bitma>icacls test ,txt /remove bitma
Processed files: test, txt
1 file successfully processed; failed when processing 0 files
C: \Users\bitma>icacls test.txt
test txt NT AUTHORITY`,SYSTEM: (F)
1 file successfully processed; failed when processing 0 files
BUILTIN,Administrators : (F)
---
## Page 512
6.8 PWN for Windows
66
Note that when modifying a file’s ACL, if the modified ACE item is inherited, the
inheritance attribute should be disabled. ACL inheritance is a special mechanism in
Windows, if a file has enabled the ACL inheritance, its ACL will inherit the ACE in
its parent object (the directory of text.txt in this example)’s ACL.
6.8.2CallingConventionsforWindows
32-bit Windows typically uses the _stdcall calling convention, where parameters
are pressed into the stack one by one in right-to-left order, and after the call is
complete, the called function clears those parameters and the return value of the
function is placed in the EAX.
64-bit Windows typically uses Microsoft’s x64 calling convention, where the first
four parameters are placed in RCX, RDX, R8, and R9, respectively, and more
parameters are stored on the stack, with the returm value placed in RAX. Under
this calling convention, RAX, RCX, RDX, R8, R9, R10, R11 are stored by the
caller, and RBX, RBP, RDI, RSI, RSP, R12, R13, R14, R15 are stored by the callee.
6.8.3Vulnerability Mitigation MechanismsforWindows
To solve PWN challenges, vulnerability mitigation mechanisms are something that
CTF participants need to be familiar with. This section briefly describes common
Windows vulnerability mitigations. Since some of the vulnerability mitigation
mechanisms are compiler-related, the compiler used in this section is MSVC
19.16.27025.1.
1. Stack Cookies
Windows also has a Stack Cookie mechanism to mitigate stack overflow attacks.
Unlike Linux, howeve, Windows has a different implementation of Stack Cookies.
For example.
#include 
#include 
int main [int azgc, char* azgv [1)(
char name [100] ;
printf (*Nane?: ") ;
scanf (*$s*, name) ;
pxintf (*He11o, s’,na, name) ;
return 0;
---
## Page 513
500
6PWN
0814e2013c0：int
nain
cdecl naintiat aroc.cha
pree near
CODE xaCF:_naintj
0081422013ca
0081422013C0
0001400013C0
uar_88
byte ptr -8sh
0001482013C8
0001422013ca
arg_e
qrd ptr
d pa
-18R
835188251800
16h
[rsp*arg_8], rdx
r,
[rsp+
008142201307
B140201200
nov
xor
rax, rsp
CS:
security_cookie
000140201304
D001422013E
[rsp+0ASh+
+uar_18], rax
0001402013E9
 *Nane7: *
10081402013EE
1
cal1
00013FF
lea
1A22014a
lea
cal1
Jprintf
"Hel1o, ts\n"
B141022t1800
xor
eax,eax
1000140201410
B1A1022t1800
._security_check_cookie
rcx, rsp
rsp. 088h
nain
Fig, 6.18 Assembly code
The compiler generates an assembly after compilation as shown in Fig. 6.18.
As you can see, the _ _security_cookie is the Windows Stack Cookie. note that
the program also XORs the Stack Cookie with the RSP before placing it on the stack,
which enhances the level of protection somewhat, as the attacker needs to know both
the current top-of-stack address and the Stack cookie to exploit the stack overflow
vulnerabilities.
2. DEP
DEP (Data Execution Prevention) is similar to NX, the protection mechanism under
Linux, in that the memory protection property of the data area is made read-write
non-executable. Both mechanisms are designed to prevent attackers from using the
data area to place malicious code that can be executed arbitrarily.
3. CFG