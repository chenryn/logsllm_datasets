Page-Resident JavaScript and Extension Code

Our semantics, along with its corresponding safety property, results in a fine-grained security model for browser extensions. This model is robust against the effects of JavaScript on the web page.

### Understanding the Semantics

To appreciate our semantic design, we first discuss a hypothetical (straw-man) security property that depends on the instantaneous dynamic state of a web page. In this model, consider a well-behaved extension like FacePalm. Such an extension might query a metadata attribute on a DOM node (e.g., check if the `?label` attribute of a node is `label`), decide according to the policy that it has read privilege over the node, and then proceed to read the contents of the node. If the node’s metadata changes just before the read (due to the effect of page-resident JavaScript), the read must be rejected as insecure under an instantaneous view of the policy. This can lead to unpredictable time-of-check to time-of-use (TOCTOU) discrepancies. Worse, an adversarial web page can cause extensions to throw runtime security exceptions, making the browser platform unstable.

### Key Insight: Dynamic Log

To counter these difficulties, the key insight behind our semantics is to make the security behavior of extensions dependent only on a dynamic log, a monotonically increasing set of ground facts about page metadata. While page-resident JavaScript can introduce additional facts into the log, it cannot remove any facts. This, combined with our use of (strictly positive) Datalog as a policy language, ensures that page-resident JavaScript and any TOCTOU discrepancies it introduces cannot cause security failures in extension code.

### Reduction Relation

Figure 7 defines a reduction relation \(\vdash_{\mathcal{A}}\), where a runtime configuration \((\mathcal{A}, e)\), consisting of a dynamic log \(\mathcal{A}\) of ground facts and a \(\text{BX}\) term \(e\), reduces to \((\mathcal{A}', e')\) while under the purview of an unchanging policy \(\Pi\). This is a small-step reduction relation for a call-by-value language with a left-to-right evaluation order, extended with reductions for the primitive operators of \(\text{BX}\).

The definition of the relation uses an auxiliary judgment \(\mathcal{A} \models \phi\), a standard entailment relation for Datalog, stating that the fact \(\phi\) is derivable from the database of ground facts \(\mathcal{A}\) and intensional rules \(\Pi\). We omit the standard definition of the entailment relation for Datalog.

- **Rules (E-Ctx), (E-Var), (E-If), and (E-Call)** are standard.
- **Rule (E-Eq)** represents an equality test on string values.
- **Rule (E-SetAttr)** represents an attempt by the extension program to alter the DOM by changing the attribute \(a\) on the node \(n\) to the value \(v\). Our model views attribute mutation as a security-sensitive event, so the premise of (E-SetAttr) contains a security check. Specifically, we require the `+=setAttr(n, a, v)` privilege to be derivable from the facts in the log \(\mathcal{A}\) and the policy \(\Pi\).
- **Rule (E-GetCh)** allows an extension to traverse the structure of the page without a security check, but records facts in the log \(\mathcal{A}'\) to indicate parent/child relationships.
- **Rule (E-GetAttr)** combines elements from (E-SetAttr) and (E-GetCh). Depending on the policy, some attributes of a node (e.g., its `innerHTML` field) are considered security-sensitive and subject to access controls, while others (e.g., a CSS class) can be treated as security metadata. The premise of (E-GetAttr) contains a check to ensure that an extension has read privilege on the requested attribute. Additionally, we record facts in the log \(\mathcal{A}'\).

### Non-Determinism and Interleaving

Extensions and page-resident JavaScript interact via shared DOM state. In most browsers, they share a single thread of control. An event handler, whether JavaScript or extension, runs to completion on receiving an event, and then yields control back to the browser, which can then schedule another event handler. When extension code regains control, the page may have evolved arbitrarily since the last time the extension had control.

We model this characteristic feature by making the rules (E-GetCh) and (E-GetAttr) non-deterministic. The non-determinism in our formal model is at an arbitrarily fine level of granularity, allowing successive calls to (E-GetAttr) with the same arguments to return different results, modeling the fact that JavaScript code can be interleaved between the two calls.

### Safety Property

The main security definition of this paper is a notion of safety for \(\text{BX}\) programs, defined as a traditional type soundness property on the reduction relation.

**Definition 1 (Safety):** An extension \(e\) is \((\mathcal{A}, \Pi)\)-safe if either \(e\) is a value, or there exists an expression \(e'\) and a log \(\mathcal{A}'\) such that \(\vdash_{\mathcal{A}} (e) \Rightarrow (\mathcal{A}', e')\) and \(e'\) is \((\mathcal{A}', \Pi)\)-safe.

This safety property ensures that the security of an extension does not depend on the actions of page-resident JavaScript. However, it limits the kinds of security policies that can be defined, particularly those involving dynamic revocations. Future work will investigate a security property for extensions that is suitable for use with revocation while still being robust to the effects of untrusted JavaScript on the page.

### Static Enforcement of Extension Safety

This section describes a methodology based on refinement type checking to statically verify that extensions comply with their policies. We briefly review refinement types and Fine, discuss the high-level architecture of our verification methodology, and present fragments of the refined APIs we expose to extensions. We then show several small examples of extension code and how they are verified against the APIs. The section concludes with a discussion of the main theorem of the paper, namely that well-typed Fine programs are \((\mathcal{A}, \Pi)\)-safe.

#### Benefits of Our Approach

- **Robustness and Modular Verification:** While \((\mathcal{A}, \Pi)\)-safety is weak in the sense that it cannot model revocation, it lends itself to a modular verification strategy. Extensions can be verified independently of page-resident JavaScript, and this property is preserved under composition with JavaScript.
- **Efficient Policy Enforcement:** Static verification removes the performance cost of runtime monitoring. In the context of \((\mathcal{A}, \Pi)\)-safety, runtime monitoring requires maintaining a dynamic log and invoking a Datalog interpreter on each access to the DOM. Static enforcement virtualizes the dynamic log, eliminating the need for runtime Datalog interpretation and allowing data-flow-like taint-based properties to be enforced with no runtime overhead.

### Review of Refinement Types in Fine

Fine is a verification system for a core, functional subset of F#. Its principal novelty is in its type system, which supports static verification of safety properties via a mixture of refinement and substructural types. This section describes the syntax and intuitions behind refinement types in Fine.

- **Value-Indexed Types:** Types in Fine can be indexed by both types and values. For example, `array int 17` represents an array of 17 integers, where the index `17:nat` is a natural number value.
- **Dependent Function Types:** Functions in Fine are given dependent function types, where the range type depends on the argument. For example, the type of a function that allocates an array of \(n\) integers is `n:nat -> array int n`.
- **Refinement Types:** A refinement type in Fine is written `x:t | phi`, where `phi` is a formula in which the variable `x` is bound. Fine is parametric in the logic used for formulas, typically a first-order logic with equality. In this paper, we limit the formula language to strictly positive Datalog.
- **Reﬁnements as Pre- and Post-Conditions:** Reﬁnement types can place pre- and post-conditions on functions. For example, a list permutation function can be specified as `l:list a -> m:list a | forall x. In x l => In x m`.
- **Kind Language:** Types in Fine are categorized according to a language of kinds. The kind `*` is the kind of normal types, and `Prop` is the kind of propositions. Type constructors are given arrow kinds, which can be dependent or non-dependent.

### Refined APIs for Extensions

Our verification methodology involves giving refinement-typed interfaces to browser functionality exposed to extensions. The listing below shows a fragment of the refined DOM API we expose to extensions. It defines abstract types `doc` and `elt` for web documents and document nodes, respectively. Well-typed extensions can only manipulate values of these types using our exposed APIs.

```fsharp
type doc
type elt

// Metadata predicates
type DocDomain = doc -> string -> Prop
type NodeLabel = elt -> string -> Prop
type ParentChild = elt -> elt -> Prop

// Authorization privileges
type CanRead = elt -> string -> Prop
type CanWrite = elt -> string -> string -> Prop
```

These types map to the semantics discussed in Section V. For example, the `DocDomain` predicate constructs a proposition from a `doc` and a string value, reflecting the policy language's structure.

### Conclusion

Our approach provides a robust and efficient way to enforce security policies for browser extensions, ensuring that they remain secure even in the presence of untrusted JavaScript. By leveraging refinement types and a dynamic log, we achieve a fine-grained and modular security model that is amenable to static verification.