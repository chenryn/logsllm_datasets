# 零、前言
通常，当我提到 Docker 或这本书时，我得到的第一个问题是*什么是 Docker？*所以，我们不妨现在就回答这个问题，把它解决掉...
在我交往的朋友圈子里，我会回答这个问题说 *Docker 是一个软件解决方案，用于在任何地方建造、运输和运行容器*。但是如果你不是一个电脑人，那么这个答案对你来说毫无意义。那么，让我们再试一次，回答问题*什么是 Docker？*以一种值得快速入门指南的方式。
Docker 是一种工具，允许软件开发人员轻松创建应用，并将这些应用包装在一个名为**容器**的特殊包中。如果使用得当，打包为容器的应用可以非常高效、非常安全地运行。由于容器拥有应用运行所需的一切，它还允许开发人员几乎在任何地方共享他们的应用，而不必重新创建或重新打包它。
这意味着，作为使用 Docker 的结果，开发人员可以在他们自己的笔记本电脑上创建、运行和测试他们的应用容器，然后与他们的同行共享完全相同的容器，以便他们也可以运行和测试它。然后，他们可以与质量保证团队共享同一个容器，以进一步验证质量，最终，客户可以在生产环境中运行和使用完全相同的容器。
使用 Docker，软件开发人员可以创建更好、更安全的软件，可以比以往任何时候都更快地进行测试和部署。
在这本书的页面中，您将找到所有您需要的信息，以了解什么是 Docker 以及 Docker 提供的好处。使用详细但易于理解的描述和示例，本快速入门指南将教您如何设置自己的 Docker 开发环境，以及如何创建企业级 Docker 映像，利用 Docker 提供的所有重要功能。本快速入门指南将教您如何使用 Docker 网络和 Docker 的存储功能。您还将学习如何创建和部署多容器应用，以及如何使用 Docker Swarm 设置 Docker 集群。当您完成快速入门指南时，您将构建和共享您自己的 Docker 映像，并在 Docker 容器中运行您最重要的应用。本快速入门指南将为您将来的所有项目使用 Docker 做好充分准备。如果你准备好开始了，请翻开新的一页...
# 这本书是给谁的
这个快速入门指南是为那些想知道 Docker 是什么，想知道为什么这么多人对使用它如此兴奋的人而写的。它是为那些想马上开始使用 Docker，而没有时间涉猎完整的*掌握 Docker* 书籍，或者参加为期一周的培训课程的开发人员准备的。本指南适用于任何需要在下一个项目中快速决定使用 Docker 并立即开始的人。
# 充分利用这本书
您应该有一个开发人员工作站，可以安装 Docker 并用来测试本书中包含的示例。你将通过亲自尝试每一个例子，而不仅仅是通读，学到最多的东西。此外，您应该可以访问至少一个其他服务器，但最好是两个或三个其他服务器，以配置为 Docker Swarm。这些服务器可以是 AWS 中的 EC2 实例；或 VMware 工作站或融合平台上的虚拟机；或者，最坏的情况是，VirtualBox 中的虚拟机。本书使用的所有软件都是免费的或开源的，所以你应该可以在这里尝试你正在学习的所有东西。无论您使用哪种操作系统，大多数示例都同样有效，我已经尝试在适当的地方指出不同之处。你应该在[https://hub.docker.com](https://hub.docker.com)创建一个账户，在[https://github.com](https://github.com)创建一个账户。所有的代码示例都已经由我以及几个审阅者测试过了，所以如果您没有让它们工作，请再次检查代码并重试，或者从 Packt 下载代码并将其剪切并粘贴到您的系统中，然后重试。你会找到窍门的。
# 下载示例代码文件
你可以从你在[www.packtpub.com](http://www.packtpub.com)的账户下载这本书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[www.packtpub.com/support](http://www.packtpub.com/support)并注册将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件:
1.  登录或注册[www.packtpub.com](http://www.packtpub.com/support)。
2.  选择“支持”选项卡。
3.  点击代码下载和勘误表。
4.  在搜索框中输入图书的名称，并按照屏幕指示进行操作。
下载文件后，请确保使用最新版本的解压缩文件夹:
*   视窗系统的 WinRAR/7-Zip
*   zipeg/izp/un ARX for MAC
*   适用于 Linux 的 7-Zip/PeaZip
这本书的代码包也托管在 https://github.com/PacktPublishing/Docker-Quick-Start-Guide 的 GitHub 上。如果代码有更新，它将在现有的 GitHub 存储库中更新。
我们还有来自丰富的图书和视频目录的其他代码包，可在**[【https://github.com/PacktPublishing/】](https://github.com/PacktPublishing/)**获得。看看他们！
# 行动中的代码
访问以下链接查看正在运行的代码的视频:
[http://bit.ly/2Q1DbPq](http://bit.ly/2Q1DbPq)
# 使用的约定
本书通篇使用了许多文本约定。
`CodeInText`:表示文本中的码字、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟网址、用户输入和推特句柄。这里有一个例子:“在网络关键部分，我们指示 Docker 创建两个网络，一个名为`frontend`，一个名为`backend`
任何命令行输入或输出都编写如下:
```
# Enable autolock on your swarm cluster
docker swarm update --autolock=true
# Adjust certificate expiry to 30 days
docker swarm update --cert-expiry 720h
```
**粗体**:表示一个新的术语，一个重要的单词，或者你在屏幕上看到的单词。例如，菜单或对话框中的单词像这样出现在文本中。下面是一个例子:“一旦保存了配置，让我们通过单击立即构建链接来测试该作业。”
Warnings or important notes appear like this. Tips and tricks appear like this.
# 取得联系
我们随时欢迎读者的反馈。
**综合反馈**:发邮件`PI:EMAIL`并在邮件主题中提及书名。如果您对本书的任何方面有疑问，请发电子邮件至`PI:EMAIL`。
**勘误表**:虽然我们已经尽了最大的努力来保证内容的准确性，但是错误还是会发生。如果你在这本书里发现了一个错误，如果你能向我们报告，我们将不胜感激。请访问[www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的图书，点击勘误表提交链接，并输入详细信息。
**盗版**:如果您在互联网上遇到任何形式的我们作品的非法拷贝，如果您能提供我们的位置地址或网站名称，我们将不胜感激。请通过`PI:EMAIL`联系我们，并提供材料链接。
**如果你有兴趣成为一名作者**:如果有一个你有专长的话题，你有兴趣写或者投稿一本书，请访问[authors.packtpub.com](http://authors.packtpub.com/)。
# 复习
请留下评论。一旦你阅读并使用了这本书，为什么不在你购买它的网站上留下评论呢？然后，潜在的读者可以看到并使用您不带偏见的意见来做出购买决定，我们在 Packt 可以了解您对我们产品的看法，我们的作者可以看到您对他们的书的反馈。谢谢大家！
更多关于 Packt 的信息，请访问[packtpub.com](https://www.packtpub.com/)。