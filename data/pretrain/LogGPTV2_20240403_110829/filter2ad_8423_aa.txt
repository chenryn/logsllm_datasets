我收到了一个被称做“在线闹钟”的设备Aura，这个设备非常酷，它可以通过调节不同的声音和颜色模式帮助用户进入睡眠，并在睡眠周期结束时唤醒用户。
我很想对他进行一下逆向，因为：
• 好玩
• 我想完全控制这台设备，想在它上面运行自己的代码
这篇文章描述的就是我从抓取固件镜像到进行缓冲溢出攻击的一个过程。
> 本文所暴露的安全问题已经通知了厂商。
> 他们已经了解并修复了文章中所提到的漏洞，从2017年3月开始该固件已经不存在这些漏洞。本文不会发布任何固件镜像、二进制文件或者完整的攻击脚本，本文所涉及内容仅仅处于教育目的。
#### **初步分析**
首先需要了解Aura的硬件结构。Aura的造价并不便宜，我并没有轻易尝试去拆解该设备。我刚刚浏览了FCC认证报告中公开提供的文件：
模糊的内部图片显示Aura看起来是由飞思卡尔（现在的恩智浦）处理器和一个嵌入式的linux系统组成。
配置好设备，使它和WIFI热点建立连接后，我用nmap对其进行了扫描，确认了上面的假设。
    $ nmap 192.168.12.196
    Starting Nmap 7.40 ( https://nmap.org ) at 2017-01-15 21:52 CET
    Nmap scan report for 192.168.12.196
    Host is up (0.017s latency).
    Not shown: 999 closed ports
    PORT   STATE    SERVICE
    22/tcp filtered ssh
    MAC Address: 00:24:E4:22:95:C2
    Nmap done: 1 IP address (1 host up) scanned in 12.99 seconds
从扫描结果上看，22端口看起来被过滤了，但是SSH服务是有响应的。当然，没有密码或SSH密钥，没什么用。
Aura开启了蓝牙功能，通过其运行的SDP server，我们可以看到它开启了以下服务：
    $ sdptool records 00:24:E4:22:95:C3
    Service Name: Wireless iAP
    Service RecHandle: 0x10000
    Service Class ID List:
      UUID 128: 00000000-deca-fade-deca-deafdecacaff
    Protocol Descriptor List:
      "L2CAP" (0x0100)
      "RFCOMM" (0x0003)
        Channel: 3
    Profile Descriptor List:
      "Serial Port" (0x1101)
        Version: 0x0100
    Service Name: Wireless iAP
    Service RecHandle: 0x10001
    Service Class ID List:
      UUID 128: 00001101-0000-1000-8000-00805f9b34fb
    Protocol Descriptor List:
      "L2CAP" (0x0100)
      "RFCOMM" (0x0003)
        Channel: 9
    Profile Descriptor List:
      "Serial Port" (0x1101)
        Version: 0x0100
#### **固件抓取**
下一步，我需要抓取设备固件。前面解释过了，拆解它并不是一个好的选择。取而代之的是，我配置了一个MITM，在固件进行升级的时候嗅探设备和服务器之间的通信。
很快，发现了一个看似固件镜像的文件，它是通过HTTP协议进行传输的：
    GET /wsd01/wsd01_905.bin HTTP/1.1
    Host: XXXXXXXXXXXXXXXXXX
    Accept: */*
#### **固件镜像分析**
**提取文件系统**
通常镜像文件在文件开始的地方会有一个文件头，通过文件头，我们进一步确认该文件是一个FPKG格式的文件。
    $ file wsd01_905.bin
    wsd01_905.bin: data
    $ hexdump -C wsd01_905.bin | head -n 20
    00000000  66 70 6b 67 04 57 53 44  00 01 89 03 00 00 00 50  |fpkg.WSD.......P|
    00000010  4b 01 01 14 00 00 00 01  80 00 00 00 31 18 10 06  |K...........1...|
    00000020  7e bf 63 bf a7 37 00 00  00 00 00 00 00 10 00 00  |~.c..7..........|
    00000030  06 00 00 00 00 00 00 00  00 00 00 00 00 08 00 00  |................|
    00000040  00 f0 01 00 ab 00 00 00  e8 03 00 00 00 00 80 00  |................|
    00000050  00 00 00 00 05 00 00 00  02 00 00 00 01 00 00 00  |................|
    00000060  01 00 00 00 08 00 00 00  00 01 00 00 04 00 00 00  |................|
    00000070  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
    00000080  00 00 00 00 00 ca 9a 3b  bc 71 25 22 cd 1c 40 c0  |.......;.q%"..@.|
    00000090  8f 85 c0 aa 09 01 87 44  00 00 00 00 00 00 00 00  |.......D........|
    000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
    *
    00001010  00 00 00 00 00 00 00 00  00 00 00 00 ff ff ff ff  |................|
    00001020  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
    *
    0001f010  ff ff ff ff ff ff ff ff  ff ff ff ff 31 18 10 06  |............1...|
    0001f020  34 54 8c 8d a8 37 00 00  00 00 00 00 00 02 00 00  |4T...7..........|
    0001f030  07 00 00 00 f1 04 00 00  00 00 00 00 00 00 00 00  |................|
    0001f040  00 00 00 00 02 00 00 00  03 00 00 00 aa 00 00 00  |................|
    0001f050  30 e7 00 00 58 00 00 00  a7 00 00 00 aa 00 00 00  |0...X...........|
并且，通过 **binwalk** 我们总是可以快速地定位我们感兴趣的地方：
    $ binwalk wsd01_905.bin | head
    DECIMAL       HEXADECIMAL     DESCRIPTION
    --------------------------------------------------------------------------------    28            0x1C            UBIFS filesystem superblock node, CRC: 0xBF63BF7E, flags: 0x0, min I/O unit size: 2048, erase block size: 126976, erase block count: 171, max erase blocks: 1000, format version: 4, compression type: lzo
    127004        0x1F01C         UBIFS filesystem master node, CRC: 0x8D8C5434, highest inode: 1265, commit number: 0
    253980        0x3E01C         UBIFS filesystem master node, CRC: 0x81BCA129, highest inode: 1265, commit number: 0
    1438388       0x15F2B4        Unix path: /var/log/core
    1444812       0x160BCC        Executable script, shebang: "/bin/sh"
    1445117       0x160CFD        Executable script, shebang: "/bin/sh"
    1445941       0x161035        Executable script, shebang: "/bin/sh"
下载的数据块在偏移0x1c的地方包含一个UBIFS文件镜像（也有可能仅仅是像一个文件头）。
通过脚本 可以很轻易地从UBIFS镜像里提取文件:
    $ ubireader_extract_files -k 1C.ubi
    Extracting files to: ubifs-root
    $ ls ubifs-root
    bin  lib      mnt   services  uImage
    dev  libexec  proc  sys       usr
    etc  linuxrc  sbin  tmp       var
所有嵌入式linux里的文件都是可以访问的！我首先当然是查看/etc/shadow文件的内容。然后我通过john password
cracker来破解/etc/shadow里的密码，但是几分钟后我就放弃了。它的密码可能非常复杂，这种简单的爆破可能不会出什么结果。
**FPKG 文件格式**
现在所有文件都可用，我们需要了解一些FPKG文件结构。
固件更新和FPKG文件加载等相关功能都包含在共享库libfpkg.so and libufw.so里，通过反汇编以及猜测，我得到了以下文件结构：
描述这个结构的一个ksy文件（）可以[在这里找到](https://courk.fr/wp-content/uploads/fpkg.ksy)。
将此结构应用到我之前获取的文件中：
    [-] [root]
      [-] header
        [.] magic = 66 70 6b 67
        [.] product_name_size = 4
        [.] product_name = "WSD"
        [.] firmware_type = 1
        [.] firmware_version = 905
        [.] firmware_size = 21712896
        [.] checksum_type = 1
        [.] checksum_size = 20
        [.] signature_type = 1
        [.] signature_size = 128
      [.] firmware_data = 31 18 10 06 7e bf 63 bf a7 37 00 00 00 00 00 00 00 10 00 ...
      [.] checksum = 15 ec a1 c5 55 aa 54 dd f2 54 14 7c ef 1d a3 2a f6 aa ab 8b
      [.] signature = 3e db da 40 aa 9f 5b 49 3d a2 00 0f 37 65 22 29 00 cb 4e 73 ...
该文件已签名，因此无法更新我自己的固件。
**获取SSH ROOT访问权限**
获取固件后，下一步就是获取SSH访问权限。我开始查看电路板上运行的二进制文件，并尝试找到一些漏洞。
**Seqman目录遍历攻击**
其中一个叫做seqmand的守护进程引起了我的注意。seqmand负责从远程服务器自动下载音频文件。它的工作方式如下：
在启动时，seqmand下载一个csv文件。
    GET /content/aura/sequences-v3/aura_seq_list.csv HTTP/1.1
    Host: XXXXXXXXXXXXXXXXXXX
    Accept: */*
aura_seq_list.csv文件内容如下：
    #name;is_mandatory;filename;md5;filesize;
    WAKEUP_4;1;v3_audio_main_part_2.mp3;e7920da0ecb5e97a214ca9935f7e821f;720