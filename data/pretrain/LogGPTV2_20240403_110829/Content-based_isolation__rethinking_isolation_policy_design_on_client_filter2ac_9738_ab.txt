Content-Processor: “http://www.photoedit.com/editor.app”
The content owner can sign this mapping with its private
key. Users or the OS vendor can conﬁgure default content
processors.
4.2 Principal labeling and isolation policies
The labels of content processing stacks ultimately deter-
mine the isolation policy of the system. Content processing
stacks with the same label belong to the same principal and
isolation container. We establish three goals for the princi-
pal labeling design.
1. Enable isolation policies of arbitrary granularities for
URL-addressable resources (a ﬁle at a URL rather than
an internal object in a ﬁle). The most ﬁne-grained
principal can be a single document. However, a ﬁxed
policy like this can be unnecessary and can impede
functionality: some documents may not be mutually
distrusting and may have complex cross-document in-
teractions. For example, a Microsoft Word document
may interact with an Excel document by referencing
its data cells or charts. So, we need a ﬂexible mecha-
nism to group documents into a single principal.
2. Separate content owning from content hosting so that a
content owner can get its content hosted anywhere and
be treated as belonging to the same principal. Suppose
Alice created a number of documents or photos and
uploaded them to various online storage services (e.g.,
Dropbox) or photo sharing services (e.g., Google’s Pi-
casaweb). We would want to associate all this content
with the same owner Alice regardless of where it is
hosted. This goal is especially important for desktop
applications where users often create content locally
and then make a separate decision on where to host
it. This is unlike web applications, where content is
usually tightly associated with its host.
3. Be compatible with web browsers’ isolation policy. To-
day’s web browsers’ isolation policy is the same-origin
policy (SOP) [41] which treats web sites as mutu-
1169ally distrusting principals, labeled with web site ori-
gins, a triple of  [48]. Web
sites can create subdomains to have ﬁner-grained prin-
cipals (e.g., user1.socialnet.com, user2.socialnet.com).
SOP itself does not meet the above two goals that we
set for principal labeling. For example, youtube.com
and google.com belong to Google, but cannot be
conﬁgured to belong to the same principal.
SOP
also does not support ﬁner-grained isolation at path
or URL level: https://www.facebook.com/user1 and
https://www.facebook.com/user2 cannot be conﬁg-
ured to be diﬀerent principals.
Our goal of being compatible with SOP is due to two
reasons. First, it is undecidable for an OS to deter-
mine whether an application is a web browser. Even
non-browser applications may use core browser com-
ponents; for example, Microsoft .NET provides a web
browser control which allows any .NET application
to use browser functionality; similarly, iOS and An-
droid also allow browser components to be included
in applications. Second, even if an OS could tell the
diﬀerence, it is still desirable for browsers and non-
browser applications to have the same principal model
because an attacker could cause browsers to render
non-browser content and vice versa. Then, applica-
tions with coarser-grained isolation can be used to un-
dermine ﬁner-grained isolation in other applications.
For example, modern OSes like iOS and Android iso-
late by application package (see Section 1), which is
coarser-grained than browsers’ same-origin policy. An
application running on such OSes can access two web
sites from diﬀerent origins and have them coexist in the
same isolation container, not meeting the web sites’
expectation of being isolated from one another per
same-origin policy. Therefore, we aim to design a web-
compatible principal model.
4.2.1 Public key as owner ID
To achieve these goals, we propose a public-key-based
owner ID. Each URL-addressable content is tagged with
its owner’s public key and a signature that signs the host
URL. This signature indicates that the signed host URL
points to a resource owned by the owner of the public key.
We introduce a new HTTP response header for this purpose:
Owner: publicKey=; hostURLSig=signed(responseURL)
Content owners need to trust hosts to specify this header
correctly and this can be easily checked by the owners. Note
that ensuring content integrity and conﬁdentiality are or-
thogonal features that owners and hosts can collaborate on
and enable in addition to principal deﬁnition speciﬁcation.
A content processing stack is then labeled with a stack
of public key labels, which we refer to as the owner stack.
ServiceOS treats execution instances with the same owner
stack as the same principal.
Since legacy web sites do not use our Owner header for
principal deﬁnition, our system, by default, labels an exe-
cution instance with the origin stack of its content process-
ing stack, capturing the origin of the content at each layer.
This default gives the same isolation semantics as today’s
browsers: diﬀerent browser vendors are content processors of
diﬀerent origins, and they isolate an origin’s resources (e.g.,
Figure 3: The origin stack as the default principal label.
cookies, cache, local storage) from other origins in ServiceOS
as well as in today’s systems.
If an Owner header is present for public key-based princi-
pal deﬁnition, then our system overrides the origin label with
the public key value. Figure 3 shows six execution instances
(or content processing stacks) and their corresponding isola-
tion containers with the appropriate principal labels in the
form of the origin stack1. Note that traditional browser plu-
gins like Adobe Flash and browser renderers are treated as
content processors.
Note that our owner ID design is diﬀerent from locked
same-origin policy [25] which uses content host’s X.509 cer-
tiﬁcates as principal labels for HTTPS origins. That scheme
still ties the principal deﬁnition with the host. This design
also diﬀers from YURL [8] where YURL puts the host’s
public key as part of the URL, which also ties hosting with
owning.
4.2.2 Augmenting SOP with Trust Lists
Although an owner ID oﬀers both arbitrary isolation gran-
ularity and independence from hosts, some application de-
velopers will ﬁnd it cumbersome to maintain a key pair and
to compute signatures for each URL, and will resort to using
the same-origin policy. For these developers, we introduce a
“trust list” mechanism to augment SOP and to allow arbi-
trary isolation granularities (achieving Goal 1), but without
the independence from hosts (not achieving Goal 2).
A content server can associate a trust list with any URL
resource R at the server. The trust list contains a set of
URLs with which R trusts to coexist in the same isolation
container. This is one-way trust, meaning that R trusting
to coexist with S does not mean that S trusts to coexist
with R. Two resources from two diﬀerent URLs can live in
the same isolation container if and only if they have mutual
trust. A resource R is allowed to be admitted to an isolation
container if and only if all existing resources in the container
trust to coexist with R, and R trusts to coexist with each of
the existing resources.
For resources sent over HTTP, we propose a new HTTP
response header called Trust to allow specifying a trust list.
The value can be either a URL of the trust list or the trust
list itself. We allow the wildcard “*” at the end of a URL
for enumerating all resources at a path. We disallow wild-
cards for domains so that developers will not accidentally
1We omitted protocol schemes in the origins to save space,
but they should be part of the origin label.
1170return false
if (not MutuallyTrusted (us1, us2))
us1 = C.TopLayerUrls();
us2 = {u};
repeat
Algorithm 1 : Can the resource at URL u with a trust
list be admitted to an isolation container with an eﬀec-
tive label stack C? If IsSamePrincipal(C, u) returns true,
then ServiceOS admits u into C.
1: function IsSamePrincipal (C, u) {
2:
3:
4:
5:
6:
7:
8:
9:
10: UpdateContainerLabelWithNewURL (C, u)
11:
12:
13: function MutuallyTrusted(URLSet1, URLSet2) {
14:
15:
16:
17:
18:
if (u1 /∈ u2.TrustList or u2 /∈ u1.TrustList)
us1 = us1.processors
us2 = us2.processors
until (us2.processors == null)
foreach u1 in URLSet1
foreach u2 in URLSet2
return false
return true
return true
cluster mutually distrusting domains into a single principal.
When the Trust header is missing, ServiceOS resorts back
to the default, using the content server’s origin to label the
returned resource. For resources sent over non-HTTP pro-
tocols, we resort to the default SOP where we use the ap-
plication as the scheme and the IP address as the domain.
We expect this to be a rare case as existing trends indicate
that nearly all communication happens over HTTP [37].
The default SOP principal model is equivalent to all re-
sources from an origin indicating a trust list of just its origin
followed by a “*”.
of
The
trust
SOP. For
coarser-grained or ﬁner-grained2 principals
youtube.com
list mechanism can be used to real-
than
ize
and
that
google.com want
same principal,
then google.com’s server needs to provide the header
“Trust:list=http://youtube.com/”
youtube.com
needs to provide “Trust:list=http://google.com/”.
to belong to the
example,
and
if
Consider an example of using the Trust header
to achieve a ﬁne-grained principal deﬁnition.
A re-
source, say at http://blog.com/alice/index.html, spec-
iﬁes:
Trust:list=http://blog.com/alice/*, expressing
that the resource at the URL trusts to share the container
with all other content from the path corresponding to Alice.
If other resources at the path also indicate the same header,
then this achieves path-based principal isolation. Note that
only explicitly speciﬁed URLs are trusted. In this example,
the resource from http://blog.com/ is not trusted. Sim-
ilarly, individual document URLs can also be put into the
Trust header to achieve document-level granularity of isola-
tion.
ServiceOS enforces the Trust header as follows. At any
time, ServiceOS maintains a stack of eﬀective labels for the
2Jackson et al [24] warned against using more ﬁne-grained
principal deﬁnitions than an origin and claimed that the
isolation boundary can break down due to (1) a malicious
library being included or (2) data export (e.g., form submis-
sion) being manipulated to send to attacker URLs. These
two problems can also happen to the origin principal model
and are not speciﬁc to ﬁner-grained principals.
Figure 4: Non-transitivity in Trust. Although the trust
lists show that a and b are mutually trusting and b and c
are mutually trusting, transitive trust does not follow: a
and c do not trust each other (as desired by their trust
list speciﬁcation) and will never share an isolation con-
tainer.
content processing stacks (CPS) in an isolation container.
The eﬀective label of layer L is the set of URLs of resources
at layer L of all content processing stacks. Given an isola-
tion container with an eﬀective label stack C and and an
HTTP response for a resource at URL u with a trust list,
ServiceOS determines whether u should be treated as the
same principal as C and be admitted to the container with
Algorithm 1: ServiceOS iterates over u and its lower con-
tent processor layers and checks whether they are mutually
trusted with each layer of the eﬀective label stack C of the
isolation container. If all layers of u mutually trust corre-
sponding layers in C, u can be admitted to the container C.
In that case, C incorporates u’s and its content processors’
labels into its own.
A interesting and desirable property of trust list is its
non-transitivity: given that a and b are mutually trusted
and b and c are mutually trusted, it does not follow that a
and c are mutually trusted and can share the same isolation
container. Figure 4 illustrates this property.
A content server can easily manage trust lists by desig-
nating a URL to contain the list and having each resource
in the list use a Trust:url= header. The list
(principal deﬁnition) can then be evolved without changing
each resource’s Trust header value.
To simplify ServiceOS logic and content server tasks, we
do not mix the trust-list-based principal deﬁnition with
the public-key owner principal deﬁnition. A content server
should pick one to use. When both headers are present, Ser-
viceOS uses the Owner header and ignores the Trust header.
Note that Trust and Owner are applicable to only isolated
content [48] (e.g., a standalone program, HTML program
from a web site) whose principal label is the owner of the
isolated content. These headers are not applicable to library
content [48], such as JavaScript included via a 
tag or other libraries which do not have their own princi-
pal identity, but are designed to be included by standalone
programs.
We advocate both modern client platforms (e.g., iOS, An-
droid, Windows 8) and web browsers (and web standards)
to move towards such a ﬂexible, uniﬁed principal model.
4.2.3 Coexistence with legacy browsers
If web servers use our Trust and Owner headers to conﬁg-
ure principal deﬁnitions, their developers need to consider
their behavior on legacy browsers.
If a principal deﬁnition is coarser-grained than an origin, a
site can encounter functionality loss because legacy browsers
would deny legitimate cross-origin interactions permitted by
1171Figure 5: Two design choices for specifying the dispatch bit. Here, a Word application rendering a document from
alice.com attempts to retrieve a helper macro from bank.com, to be used in the alice.com principal instance.
the principal deﬁnition. The site would need additional
cross-origin communication code to maintain compatibility.
If a principal deﬁnition is ﬁner-grained than an ori-
gin, then the site may lose expected isolation on legacy
browsers.
Security-sensitive web sites may just resort
to the origin principal model to implement their isola-
tion policies and to avoid two implementations (one for
legacy browsers and one for new systems) until all ma-