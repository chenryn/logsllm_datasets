27 1B 1 Reserved.
28 1C Character 0 SM116END End of SMF header and start of self-
defining section.
Note: The (hexadecimal) values in the right-hand column relate to Figure 22 on page 363.
Self-defining sections
A self-defining section of an SMF record tells you where to find an accounting record, how long it is, and
how many times that type of record is repeated (with different values). The self-defining sections follow
the header, at a fixed offset from the start of the SMF record.
Each self-defining section points to accounting related data. Table 43 on page 362 summarizes the
offsets from the start of the SMF record header.
IBM MQ Monitoring and performance 361
Table 43. Offsets to self-defining sections
Record subtype Source of accounting Offset of self-defining section See...
(SMF116STF) data
Dec Hex
All Common header 28 X'1C' “Common IBM MQ
SMF header” on page
364
0 Message manager 44 X'2C' “Message manager
data records” on page
365
1 Thread identification 36 X'24' “Thread-level and
record queue-level data
records” on page 366
1 Thread-level accounting 44 X'2C' “Thread-level and
queue-level data
records” on page 366
1 Queue-level accounting 52 X'34' “Thread-level and
queue-level data
records” on page
366. This section
is present only if
the WTASWQCT field
in the task-related
information (WTAS)
structure is non-zero.
2 Thread identification 36 X'24' “Thread-level and
record queue-level data
records” on page 366
2 Queue-level accounting 44 X'2C' “Thread-level and
queue-level data
records” on page 366
10 Channel accounting “Channel accounting
data records” on page
370
Note: Other self-defining sections refer to data for IBM use only.
Each self-defining section is two fullwords long and has this format:
ssssssssllllnnnn
where:
ssssssss
Fullword containing the offset from start of the SMF record.
llll
Halfword giving the length of this data record.
nnnn
Halfword giving the number of data records in this SMF record.
Figure 22 on page 363 shows an example of part of an SMF type 116 record. The numbers in the left-hand
column represent the offset, in hexadecimal, from the start of the record. Each line corresponds to sixteen
bytes of data, where each byte is two hexadecimal characters, for example 0C. The characters in the
362 Monitoring and Performance for IBM MQ
right-hand column represent the printable characters for each byte. Non-printable characters are shown
by a period (.) character.
In this example, alternate fields in the SMF header are underlined to help you to see them; refer to Table
42 on page 361 to identify them. The self defining section for one of the message manager accounting
data records (at the offset given in Table 43 on page 362 ) is shown in bold.
000000 01A40000 5E740035 61240100 223FD4E5 *....;.../.....MV*
000000 F4F1D4D8 F0F70000 F6F0F000 00000134 *41MQ07..600.....*
000000 00700001 00000054 00B00001 00000104 *................*
000000 00300001 00000000 00000000 00000000 *................*
000000 00000000 00000000 00000000 00000000 *................*
Figure 22. Part of an SMF record 116 showing the header and self-defining sections
The self-defining section for the type of message manager accounting data is located at offset X'2C' from
the start of the SMF record and contains this information:
• The offset of the message manager accounting data is located X'00000104' bytes from the start of the
SMF record.
• This message manager record is X'0030' bytes long.
• There is one record (X'0001').
Note: Always use offsets in the self-defining sections to locate the accounting records.
Processing type 116 SMF records
Use this topic as a reference to the format of the processing type accounting record.
Any accounting data you collect from SMF must be processed to extract useful information. When you
process the data, verify that the records are from IBM MQ and that they are the records you are expecting.
Validate the value of the following fields:
• SM116RTY, the SMF record number = X'74' (116)
• SM116STF, the record subtype, must be 0000, 0001, 0002, or 0010
Reading from the active SMF data sets (or SMF logstreams) is not supported. You must use the SMF
program IFASMFDP (or IFASMFDL if logstreams are being used) to dump SMF records to a sequential
data set so that they can be processed. For more information see “Using System Management Facility” on
page 321.
There is a C sample program called CSQ4SMFD which prints the contents of SMF type 115 and 116
records from the sequential data set. The program is provided as source in thlqual.SCSQC37S and in
executable format in thlqual.SCSQLOAD. Sample JCL is provided in thlqual.SCSQPROC(CSQ4SMFJ).
You need to update the SMFIN DD card with the name of the SMF data set. Use the z/OS command '/D
SMF' to show the name of the data set, and you need to update the DUMPOUT DD card with the name for
the output data set.
You also need to specify the START and END times that you require.
The following sample JCL extracts SMF records from SMF data sets and dumps them to the SMFOUT data
set:
//SMFDUMP EXEC PGM=IFASMFDP,REGION=0M
//SYSPRINT DD SYSOUT=
//SMFIN DD DSN=xxxxxx.MANA,DISP=SHR
//SMFOUT DD DSN=xxxxxx.SMFOUT,SPACE=(CYL,(1,1)),DISP=(NEW,CATLG)
//SYSIN DD *
INDD(SMFIN,OPTIONS(DUMP))
OUTDD(SMFOUT,TYPE(116))
OUTDD(SMFOUT,TYPE(115))
START(1159) END(1210)
/*
IBM MQ Monitoring and performance 363
The following sample JCL extracts SMF records from the SMF log stream named in LSNAME and dumps
them to the SMFOUT data set:
//SMFDUMP EXEC PGM=IFASMFDL,REGION=0M
//SYSPRINT DD SYSOUT=*
//SMFOUT DD DSN=xxxxxx.SMFOUT,SPACE=(CYL,(1,1)),DISP=(NEW,CATLG)
//SYSIN DD *
LSNAME(IFASMF.MQ,OPTIONS(DUMP))
OUTDD(SMFOUT,TYPE(116))
OUTDD(SMFOUT,TYPE(115))
START(1159) END(1210)
/*
Common IBM MQ SMF header
Use this topic as a reference to the common IBM MQ SMF header type accounting record.
The format of this record is described in Table 44 on page 364 and in assembler
macros thlqual.SCSQMACS(CSQDQWHS) and thlqual.SCSQMACS(CSQDQWHC), and C header file
thlqual.SCSQC370(CSQDSMFC). The field names in C are all in lowercase, for example qwhs, qwhsnsda.
Details of the structures and fields can be found in IBM MQ supportpac MP1B.
The QWHS data includes the subsystem name. For subtype 1 records, it also shows whether there are
queue-level accounting records present. If the QWHSNSDA field is 3 or less, there are not, and the
corresponding self-defining section (at offset X'34') is not set.
The QWHC data gives you information about the user (for example, the user ID (QWHCAID) and the type
of application (QWHCATYP)). The QWHC section is completed only for subtype 0 records. The equivalent
information is present in the thread identification record for subtype 1 and 2 records.
Table 44. Structure of the common IBM MQ SMF header record QWHS
Offset: Offset
Dec : Hex Type Length Name Description
0 0 Structure 128 QWHS
0 0 6 Reserved
6 6 Character 1 QWHSNSDA Number of self defining sections in the
SMF records
7 7 5 Reserved
12 C Character 4 QWHSSSID Subsystem name
16 10 24 Reserved
40 28 Character 8 QWHCAID User ID associated with the z/OS job
48 30 Character 12 QWHCCV Thread cross-reference
60 3C Character 8 QWHCCN Connection name
68 44 8 Reserved
76 4C Character 8 QWHCOPID User ID associated with the transaction
84 54 Integer 4 QWHCATYP Type of connecting system (1=CICS,
2=Batch or TSO, 3=IMS control region,
4=IMS MPP or BMP, 5=Command server,
6=Channel initiator, 7=RRS Batch)
88 58 Character 22 QWHCTOKN Accounting token set to the z/OS
accounting information for the user
110 6E Character 16 QWHCNID Network identifier
364 Monitoring and Performance for IBM MQ
Table 44. Structure of the common IBM MQ SMF header record QWHS (continued)
Offset: Offset
Dec : Hex Type Length Name Description
126 7E 2 Reserved
Combining CICS and IBM MQ performance data
Use this topic as a reference to the combination of IBM MQ and CICS performance data.
The common IBM MQ SMF header type accounting record section, QWHCTOKN, is used to correlate CICS
type 110 SMF records with IBM MQ type 116 SMF records.
CICS generates an LU6.2 unit-of-work token, for each CICS task. The token is used to generate an
accounting token that is written to QWHCTOKN in the correlation header of subtype zero records.
Details are also written to the WTIDACCT section in subtype 1 and 2 records. The accounting token
enables correlation between CICS and IBM MQ performance data for a transaction.
Thread cross-reference data
Use this topic as a reference to the format of the thread cross-reference type accounting record.
The interpretation of the data in the thread cross-reference (QWHCCV) field varies. This depends on what
the data relates to:
• CICS connections (QWHCATYP=1) - see Table 45 on page 365
• IMS connections (QWHCATYP=3 or 4) - see Table 46 on page 365
• Batch connections (QWHCATYP=2 or 7) - this field consists of binary zeros
• Others - no meaningful data
Table 45. Structure of the thread cross-reference for a CICS system
Offset: Dec Offset: Hex Type Length Description
48 30 Character 4 CICS thread number.
52 34 Character 4 CICS transaction name.
56 38 Integer 4 CICS task number.
Some entries contain blank characters. These apply to the task, rather than to a specific transaction.
Table 46. Structure of the thread cross-reference for an IMS system
Offset: Dec Offset: Type Length Description
Hex
48 30 Character 4 IMS partition specification table (PST)
region identifier.
52 34 Character 8 IMS program specification block (PSB)
name.
Message manager data records
Use this topic as a reference to the format of the message manager accounting records.
The message manager is the component of IBM MQ that processes all API requests. The format of the
message manager accounting records is described in assembler macro thlqual.SCSQMACS(CSQDQMAC).
The QMAC data gives you information about the processor time spent processing IBM MQ calls, and
counts of the number of MQPUT and MQGET requests for messages of different sizes.
IBM MQ Monitoring and performance 365
Note: A single IMS application might write two SMF records. In this case, add the figures from both
records to provide the correct totals for the IMS application.
Records containing zero processor time
Records are sometimes produced that contain zero processor time in the QMACCPUT field. These
records occur when long running tasks identified to IBM MQ either terminate or are prompted to output
accounting records by accounting trace being stopped. Such tasks exist in the CICS adapter and in the
channel initiator (for distributed queuing). The number of these tasks with zero processor time depends
upon how much activity there has been in the system:
• For the CICS adapter, this can result in up to nine records with zero processor time.
• For the channel initiator, the number of records with zero processor time can be up to the sum of
Adapters + Dispatchers + 6, as defined in the queue manager attributes.
These records reflect the amount of work done under the task, and can be ignored.
Sample subtype zero accounting record
Use this topic as a reference to the format of the subtype zero accounting records.
Figure 23 on page 366 shows a type 116, subtype zero SMF record. In this figure, the SMF record header
and the QMAC accounting data record are underlined. The self-defining sections are in bold.
000000 01A40000 5E740035 61240100 223FD4E5 *....;.../.....MV*
000010 F4F1D4D8 F0F70000 F6F0F000 00000134 *41MQ07..600.....*
000020 00700001 00000054 00B00001 00000104 *................*
000030 00300001 00000000 00000000 00000000 *................*
000040 00000000 00000000 00000000 00000000 *................*
000050 00000000 B478AB43 9C6C2280 B478AB47 *.........%......*
000060 9DB47E02 00000000 04C0F631 00000001 *..=......{6.....*
000070 9880E72D 00000000 014D9540 00000000 *..X......(. ....*
000080 08480C80 00000010 40404040 40404040 *........ *
000090 00000000 00000000 00000051 00000000 *................*
0000A0 00000000 00000000 00000000 00000000 *................*
0000B0 00000000 00000000 00000000 00000000 *................*
0000C0 00000000 00000000 00000000 00000000 *................*
0000D0 00000000 00000000 00000000 00000000 *................*
0000E0 00000000 00000000 00000000 00000000 *................*
0000F0 00000000 00000000 00000000 00000000 *................*
000100 00000000 D4140030 D8D4C1C3 00000000 *....M...QMAC....*
000110 689C738D 00000050 00000000 00000050 *.......&.......&*
000120 0000000A 00000000 00000000 00000000 *................*
000130 00000000 0024011A 00030710 02DAACF0 *...............0*
Figure 23. Example SMF type 116, subtype zero record
Thread-level and queue-level data records
Use this topic as a reference to the format of the thread-level and queue-level accounting records.
Thread level accounting records are collected for each task using IBM MQ. In addition, queue-level
accounting records are gathered about each queue that the task opens. A queue-level accounting record
is written for each queue that the task has used since the thread-level accounting record was last written.
If the task uses a queue that is configured with a streaming queue, there is no queue-level accounting
record for the streaming queue. Instead, the accounting record for the original queue accumulates data
for the data points that would have been associated with the streaming queue.
The only exception to this is that the PUTN/PUT1N value shows the number of MQPUT/MQPUT1 requests
made by the application, and excludes the extra MQPUT requests made to the streaming queue.
So, for example, if an application issues a single MQPUT request, the:
• PUTN value is 1
366 Monitoring and Performance for IBM MQ
• Elapsed time (PUTET) and CPU time (PUTCT) for the MQPUT include the time taken to put to both the
primary and streaming queue
• Number of page set requests (PUTPSN) includes those for both the primary and secondary queue, and
so on
For each task, data is written to SMF when the task finishes.
From IBM MQ 9.3.0 onwards, for long running tasks, data is also written at the interval
specified by either the ACCTIME, or STATIME, parameter of the CSQ6SYSP system parameter macro, or
by the system SMF statistics broadcast, provided that the task was running the previous time data was
gathered.
Thread-level and queue-level accounting records are produced if you specify class 3 when you start the
accounting trace. For example, use the following command:
START TRACE(ACCTG) DEST(SMF) CLASS(3)
The thread level accounting information is written to an SMF type 116, subtype 1 record, and is followed
by queue-level records. If the task opened many queues, further queue information is written to one or
more SMF type 116 subtype 2 records. A thread identification control block is included in each subtype
1 and 2 record to enable you to relate each record to the correct task. Typically, the maximum number of
queue-level records in each SMF record is about 45.
The format of the thread-level accounting record is described in assembler macro
thlqual.SCSQMACS(CSQDWTAS). The format of the queue-level accounting record is described in
assembler macro thlqual.SCSQMACS(CSQDWQ). The format of the thread identification record is
described in assembler macro thlqual.SCSQMACS(CSQDWTID). All these records are also described
in C header file thlqual.SCSQC370(CSQDSMFC). The field names in C are all in lowercase, for example
wtas, wtasshex.
Meaning of the channel names
Use this topic as a reference to the meaning of channel names.
The channel name in the WTID is constructed as shown in the following example. In this example a
sender channel exists from queue manager QM1 to queue manager QM2.
The meaning of channel names are described in the following table.
Table 47. Meaning of channel names
Field name Meaning Example
For queue manager QM1 the sender channel has the following fields set:
WTIDCCN The job name QM1CHIN
WTIDCHL The channel name QM1.QM2
WTIDCHLC This is defined in the CONNAME of the WINMVS2B(2162)
channel
For queue manager QM2 the receiver channel has the following fields set:
WTIDCCN The job name QM2CHIN
WTIDCHL The channel name QM1.QM2
WTIDCHLC Where the channel came from 9.20.101.14
Sample subtype 1 and subtype 2 records
Use this topic as a reference to the format of the subtype 1 and subtype 2 accounting records.
Figure 24 on page 368 and Figure 25 on page 368 show examples of SMF type 116, subtype 1 and
subtype 2 records. These two accounting records were created for a batch job that opened 80 queues.
IBM MQ Monitoring and performance 367
Because many queues were opened, a subtype 2 record was required to contain all the information
produced.
000000 703C0000 5E74002D 983B0100 229FD4E5 *....;.........MV*
000010 F4F1D4D8 F0F70001 F6F0F000 00006FCC *41MQ07..600...?.*
000020 00700001 0000003C 00D00001 0000010C *.........}......*
000030 02C00001 000003CC 02400030 F70000D0 *.{....... ..7..}*
000040 E6E3C9C4 00000000 00000000 00000040 *WTID........... *
.
.
.
000100 00000000 00000000 7F4A4BB8 F70102C0 *........"...7..{*
000110 E6E3C1E2 B4802373 0BF07885 7F4AE718 *WTAS.....0..".X.*
Figure 24. Example SMF type 116, subtype 1 record
The first self-defining section starts at X'24' and is bold in the example; X'0000003C' is the offset to the
WTID data record, X'00D0' is the length of the WTID record, and X'0001' is the number of WTID records.
The second self-defining section starts at X'2C' and is in italic ; X'0000010C' is the offset to the WTAS
data record, X'02C0' is the length of the WTAS record, and X'0001' is the number of WTAS records.
The third self-defining section starts at X'34' and is bold in the example; X'000003CC' is the offset to the
first WQST data record, X'0240' is the length of the WQST record, and X'0030' is the number of WQST
records.
Figure 25 on page 368 shows an example of an SMF type 116, subtype 2 record.
000000 49740000 5E74002D 983B0100 229FD4E5 *....;.........MV*
000010 F4F1D4D8 F0F70002 F6F0F000 00004904 *41MQ07..600.....*
000020 00700001 00000034 00D00001 00000104 *.........}......*
000030 02400020 F70000D0 E6E3C9C4 00000002 *. ..7..}WTID....*
.
.
.
000100 7F4A4BB8 F7020240 E6D8E2E3 00000001 *"...7.. WQST....*
Figure 25. Example SMF type 116, subtype 2 record
The first self-defining section starts at X'24' and is bold in the example; X'00000034' is the offset to the
WTID data record, X'00D0' is the length of the WTID record, and X'0001' is the number of WTID records.
The second self-defining section starts at X'2C' and is in italic ; X'00000104' is the offset to the first WQST
data record, X'0240' is the length of the WQST record, and X'0020' is the number of WQST records.
Figure 26 on page 368 shows an example of an SMF type 116, subtype 1 record where no queues have
been opened and there are consequently no self-defining sections for WQST records..
000000 5E740039 4E9B0104 344FD4E5 * .........|MV*
000010 F4F1D4D8 F0F70001 F6F0F000 000003DC *41MQ07..600.....*
000020 00800001 00000034 00D00001 00000104 *................*
000030 02D80001 F70000D0 E6E3C9C4 00000002 *.Q..7...WTID....*
000040 C1F8C5C1 C4C5D740 C1F8C5C1 C4C54040 *A8EADEP A8EADE *
000050 40404040 40404040 00000000 00000000 * ........*
000060 40404040 40404040 4040 * *
Figure 26. Example SMF type 116, subtype 1 record with no WQST data records
The first self-defining section starts at X'24' and is bold in the example; X'00000034' is the offset to the
WTID data record, X'00D0' is the length of the WTID record, and X'0001' is the number of WTID records.
368 Monitoring and Performance for IBM MQ
The second self-defining section starts at X'2C' and is in italic ; X'0000010C' is the offset to the WTAS
data record, X'02D8' is the length of the WTAS record, and X'0001' is the number of WTAS records.
There is no self-defining section describing a WQST data record, equivalent to the third self-defining
section in Figure 24 on page 368.
Layout of channel initiator SMF type 116 records
The layout of channel accounting data (SMF type 116, subtype 10) records is described in this topic.
Self-defining section
The self-defining section for the channel accounting data follows the standard SMF header. It is
structured in the standard triplet format. The format of the triplets is described in structure qws5 in
the C programming language header file thlqual.SCSQC370(CSQDSMFC), and in assembler macro
thlqual.SCSQMACS(CSQDQWS5).
Table 48 on page 369 shows the format of the self-defining section.
Table 48. Structure of the channel accounting self-defining section
Offset: Offset Type Length Name Description
Dec : Hex
0 0 Integer 4 QWS50PSO Offset from the start of the SMF record to
the first instrumentation standard header
(QWHS)
4 4 Integer 2 QWS50PSL Length of the QWHS
6 6 Integer 2 QWS50PSN Number of instances of QWHS
8 8 Integer 4 QWS50R1O Offset from the start of the SMF record to
the first channel accounting data record
(QCST)
12 C Integer 2 QWS50R1L Length of the QCST