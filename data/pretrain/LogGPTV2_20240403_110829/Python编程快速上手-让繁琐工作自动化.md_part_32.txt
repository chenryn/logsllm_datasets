例如，在交互式环境中输入以下代码：
>>> podBayDoorStatus = 'open'
>>> assert podBayDoorStatus == 'open', 'The pod bay doors need to be "open".'
>>> podBayDoorStatus = 'I\'m sorry, Dave. I\'m afraid I can't do that.''
>>> assert podBayDoorStatus == 'open', 'The pod bay doors need to be "open".'
Traceback (most recent call last):
File "", line 1, in 
assert podBayDoorStatus == 'open', 'The pod bay doors need to be "open".'
AssertionError: The pod bay doors need to be "open".
这里将 podBayDoorStatus 设置为 'open'，所以从此以后，我们充分期望这个变
176 Python编程快速上手——让繁琐工作自动化
量的值是 'open'。在使用这个变量的程序中，基于这个值是 'open' 的假定，我们可能
写下了大量的代码，即这些代码依赖于它是 'open'，才能按照期望工作。所以添加了
一个断言，确保假定podBayDoorStatus是 'open' 是对的。这里，我们加入了信息 'The
pod bay doors need to be "open".'，这样如果断言失败，就很容易看到哪里出了错。
稍后，假如我们犯了一个明显的错误，把另外的值赋给 podBayDoorStatus，但
在很多行代码中，我们并没有意识到这一点。这个断言会抓住这个错误，清楚地告
诉我们出了什么错。
在日常英语中，assert 语句是说：“我断言这个条件为真，如果不为真，程序中什
么地方就有一个缺陷。”不像异常，代码不应该用try和except处理assert语句。如果
assert失败，程序就应该崩溃。通过这样的快速失败，产生缺陷和你第一次注意到该缺
陷之间的时间就缩短了。这将减少为了寻找导致该缺陷的代码，而需要检查的代码量。
断言针对的是程序员的错误，而不是用户的错误。对于那些可以恢复的错误（诸如
文件没有找到，或用户输入了无效的数据），请抛出异常，而不是用assert语句检测它。
10.3.1 在交通灯模拟中使用断言
假定你在编写一个交通信号灯的模拟程序。代表路口信号灯的数据结构是一个
字典，以 'ns' 和 'ew' 为键，分别表示南北向和东西向的信号灯。这些键的值可以
是 'green'、'yellow' 或 'red' 之一。代码看起来可能像这样：
market_2nd = {'ns': 'green', 'ew': 'red'}
mission_16th = {'ns': 'red', 'ew': 'green'}
这两个变量将针对Market街和第2街路口，以及Mission街和第16街路口。作
为项目启动，你希望编写一个switchLights() 函数，它接受一个路口字典作为参数，
并切换红绿灯。
开始你可能认为，switchLights() 只要将每一种灯按顺序切换到下一种颜色：
'green' 值应该切换到 'yellow'，'yellow' 应该切换到 'red'，'red' 应该切换到'green'。实
现这个思想的代码看起来像这样：
def switchLights(stoplight):
for key in stoplight.keys():
if stoplight[key] == 'green':
stoplight[key] = 'yellow'
elif stoplight[key] == 'yellow':
stoplight[key] = 'red'
elif stoplight[key] == 'red':
stoplight[key] = 'green'
switchLights(market_2nd)
你可能已经发现了这段代码的问题，但假设你编写了剩下的模拟代码，有几千
行，但没有注意到这个问题。当最后运行时，程序没有崩溃，但虚拟的汽车撞车了！
第10章 调试 177
因为你已经编写了剩下的程序，所以不知道缺陷在哪里。也许在模拟汽车的代
码中，或者在模拟司机的代码中。可能需要花几个小时追踪缺陷，才能找到
switchLights() 函数。
但如果在编写switchLights() 时，你添加了断言，确保至少一个交通灯是红色，
可能在函数的底部添加这样的代码：
assert 'red' in stoplight.values(), 'Neither light is red! ' + str(stoplight)
有了这个断言，程序就会崩溃，并提供这样的出错信息：
Traceback (most recent call last):
File "carSim.py", line 14, in 
switchLights(market_2nd)
File "carSim.py", line 13, in switchLights
assert 'red' in stoplight.values(), 'Neither light is red! ' + str(stoplight)
 AssertionError: Neither light is red! {'ns': 'yellow', 'ew': 'green'}
这里重要的一行是AssertionError。虽然程序崩溃并非如你所愿，但它马上指
出了心智正常检查失败：两个方向都没有红灯，这意味着两个方向的车都可以走。
在程序执行中尽早快速失败，可以省去将来大量的调试工作。
10.3.2 禁用断言
在运行 Python 时传入-O 选项，可以禁用断言。如果你已完成了程序的编写和
测试，不希望执行心智正常检测，从而减慢程序的速度，这样就很好（尽管大多数
断言语句所花的时间，不会让你觉察到速度的差异）。断言是针对开发的，不是针
对最终产品。当你将程序交给其他人运行时，它应该没有缺陷，不需要进行心智正
常检查。如何用-O选项启动也许并不疯狂的程序，详细内容请参考附录B。
10.4 日志
如果你曾经在代码中加入 print() 语句，在程序运行时输出某些变量的值，你
就使用了记日志的方式来调试代码。记日志是一种很好的方式，可以理解程序中
发生的事，以及事情发生的顺序。Python的logging模块使得你很容易创建自定义
的消息记录。这些日志消息将描述程序执行何时到达日志函数调用，并列出你指
定的任何变量当时的值。另一方面，缺失日志信息表明有一部分代码被跳过，从
未执行。
10.4.1 使用日志模块
要启用 logging 模块，在程序运行时将日志信息显示在屏幕上，请将下面的代
码复制到程序顶部（但在Python的#!行之下）：
178 Python编程快速上手——让繁琐工作自动化
import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s
- %(message)s')
你不需要过于担心它的工作原理，但基本上，当 Python 记录一个事件的日志时，
它会创建一个 LogRecord 对象，保存关于该事件的信息。logging 模块的函数让你
指定想看到的这个 LogRecord对象的细节，以及希望的细节展示方式。
假如你编写了一个函数，计算一个数的阶乘。在数学上，4 的阶乘是
1 × 2 × 3 × 4，即 24。7 的阶乘是 1 × 2 × 3 × 4 × 5 × 6 × 7，即 5040。打开一个新的
文件编辑器窗口，输入以下代码。其中有一个缺陷，但你也会输入一些日志信息，
帮助你弄清楚哪里出了问题。将该程序保存为factorialLog.py。
import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s
- %(message)s')
logging.debug('Start of program')
def factorial(n):
logging.debug('Start of factorial(%s%%)' % (n))
total = 1
for i in range(n + 1):
total *= i
logging.debug('i is ' + str(i) + ', total is ' + str(total))
logging.debug('End of factorial(%s%%)' % (n))
return total
print(factorial(5))
logging.debug('End of program')
这里，我们在想打印日志信息时，使用 logging.debug() 函数。这个 debug() 函数
将调用 basicConfig()，打印一行信息。这行信息的格式是我们在 basicConfig()函数
中指定的，并且包括我们传递给 debug() 的消息。print（factorial（5））调用是原来
程序的一部分，所以就算禁用日志信息，结果仍会显示。
这个程序的输出就像这样：
2015-05-23 16:20:12,664 - DEBUG - Start of program
2015-05-23 16:20:12,664 - DEBUG - Start of factorial(5)
2015-05-23 16:20:12,665 - DEBUG - i is 0, total is 0
2015-05-23 16:20:12,668 - DEBUG - i is 1, total is 0
2015-05-23 16:20:12,670 - DEBUG - i is 2, total is 0
2015-05-23 16:20:12,673 - DEBUG - i is 3, total is 0
2015-05-23 16:20:12,675 - DEBUG - i is 4, total is 0
2015-05-23 16:20:12,678 - DEBUG - i is 5, total is 0
2015-05-23 16:20:12,680 - DEBUG - End of factorial(5)
0
2015-05-23 16:20:12,684 - DEBUG - End of program
factorial() 函数返回 0 作为 5 的阶乘，这是不对的。for 循环应该用从 1 到 5
的数，乘以total的值。但logging.debug() 显示的日志信息表明，i变量从0开始，
而不是 1。因为 0 乘任何数都是 0，所以接下来的迭代中，total 的值都是错的。日
第10章 调试 179
志消息提供了可以追踪的痕迹，帮助你弄清楚何时事情开始不对。
将代码行for i in range（n + 1）：改为for i in range（1，n + 1）：，再次运行程序。
输出看起来像这样：
2015-05-23 17:13:40,650 - DEBUG - Start of program
2015-05-23 17:13:40,651 - DEBUG - Start of factorial(5)
2015-05-23 17:13:40,651 - DEBUG - i is 1, total is 1
2015-05-23 17:13:40,654 - DEBUG - i is 2, total is 2
2015-05-23 17:13:40,656 - DEBUG - i is 3, total is 6
2015-05-23 17:13:40,659 - DEBUG - i is 4, total is 24
2015-05-23 17:13:40,661 - DEBUG - i is 5, total is 120
2015-05-23 17:13:40,661 - DEBUG - End of factorial(5)
120
2015-05-23 17:13:40,666 - DEBUG - End of program
factorial（5）调用正确地返回 120。日志消息表明循环内发生了什么，这直接
指向了缺陷。
你可以看到，logging.debug() 调用不仅打印出了传递给它的字符串，而且包含
一个时间戳和单词DEBUG。
10.4.2 不要用print()调试
输入 import logging 和 logging.basicConfig（level=logging.DEBUG, format='%
(asctime)s - %(levelname)s - %(message)s'）有一点不方便。你可能想使用print() 调用
代替，但不要屈服于这种诱惑！在调试完成后，你需要花很多时间，从代码中清除每
条日志消息的print() 调用。你甚至有可能不小心删除一些print() 调用，而它们不是用
来产生日志消息的。日志消息的好处在于，你可以随心所欲地在程序中想加多少就加
多少，稍后只要加入一次 logging.disable（logging.CRITICAL）调用，就可以禁止日
志。不像print()，logging模块使得显示和隐藏日志信息之间的切换变得很容易。
日志消息是给程序员的，不是给用户的。用户不会因为你便于调试，而想看到
的字典值的内容。请将日志信息用于类似这样的目的。对于用户希望看到的消息，
例如“文件未找到”或者“无效的输入，请输入一个数字”，应该使用print() 调用。
我们不希望禁用日志消息之后，让用户看不到有用的信息。
10.4.3 日志级别
“日志级别”提供了一种方式，按重要性对日志消息进行分类。5 个日志级别如表
10-1所示，从最不重要到最重要。利用不同的日志函数，消息可以按某个级别记入日志。
表10-1 Python中的日志级别
级别 日志函数 描述
DEBUG logging.debug() 最低级别。用于小细节。通常只有在诊断问题时，你才会关心这些消息
INFO logging.info() 用于记录程序中一般事件的信息，或确认一切工作正常
180 Python编程快速上手——让繁琐工作自动化
续表
级别 日志函数 描述
WARNING logging.warning() 用于表示可能的问题，它不会阻止程序的工作，但将来可能会
ERROR logging.error() 用于记录错误，它导致程序做某事失败
最高级别。用于表示致命的错误，它导致或将要导致程序完全停止
CRITICAL logging.critical()
工作
日志消息作为一个字符串，传递给这些函数。日志级别是一种建议。归根到底，
还是由你来决定日志消息属于哪一种类型。在交互式环境中输入以下代码：
>>> import logging
>>> logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s -
%(levelname)s - %(message)s')
>>> logging.debug('Some debugging details.')
2015-05-18 19:04:26,901 - DEBUG - Some debugging details.
>>> logging.info('The logging module is working.')
2015-05-18 19:04:35,569 - INFO - The logging module is working.
>>> logging.warning('An error message is about to be logged.')
2015-05-18 19:04:56,843 - WARNING - An error message is about to be logged.
>>> logging.error('An error has occurred.')
2015-05-18 19:05:07,737 - ERROR - An error has occurred.
>>> logging.critical('The program is unable to recover!')
2015-05-18 19:05:45,794 - CRITICAL - The program is unable to recover!
日志级别的好处在于，你可以改变想看到的日志消息的优先级。向basicConfig()函数
传入logging.DEBUG作为level关键字参数，这将显示所有日志级别的消息（DEBUG
是最低的级别）。但在开发了更多的程序后，你可能只对错误感兴趣。在这种情况
下，可以将basicConfig() 的level参数设置为logging.ERROR，这将只显示ERROR
和CRITICAL消息，跳过DEBUG、INFO和WARNING消息。
10.4.4 禁用日志
在调试完程序后，你可能不希望所有这些日志消息出现在屏幕上。logging.
disable() 函数禁用了这些消息，这样就不必进入到程序中，手工删除所有的日志调
用。只要向 logging.disable() 传入一个日志级别，它就会禁止该级别和更低级别的所
有日志消息。所以，如果想要禁用所有日志，只要在程序中添加 logging. disable
（logging.CRITICAL）。例如，在交互式环境中输入以下代码：
>>> import logging
>>> logging.basicConfig(level=logging.INFO, format=' %(asctime)s -
%(levelname)s - %(message)s')
>>> logging.critical('Critical error! Critical error!')
2015-05-22 11:10:48,054 - CRITICAL - Critical error! Critical error!
>>> logging.disable(logging.CRITICAL)
>>> logging.critical('Critical error! Critical error!')
>>> logging.error('Error! Error!')
因为logging.disable() 将禁用它之后的所有消息，你可能希望将它添加到程序中
第10章 调试 181
接近 import logging 代码行的位置。这样就很容易找到它，根据需要注释掉它，或
取消注释，从而启用或禁用日志消息。
10.4.5 将日志记录到文件
除了将日志消息显示在屏幕上，还可以将它们写入文本文件。logging.basic
Config() 函数接受filename关键字参数，像这样：
import logging