vertices. Moreover, the ﬁrst (3n+1)(3n)
vertices of P2 each have an edge from separate vertices of ∆3n+1,
starting with the vertices in the bottom layer and moving upwards. We also create an edge to the following
vertex from the vertex α3n+1. The next (3n−2)(3n−3)
vertices of P2 each have an edge from separate vertices
of ∆3n−2, starting with the vertices in the bottom layer and moving upwards. We also create an edge to the
following vertex from the vertex α3n−2. We continue this process until all vertices from all pyramids of the
form ∆3i+1 are connected to P2, as well as the vertices α3i+1. Finally, we connect P2 to a sink node. Then
by setting P to be the path P1 concatenated with P2, we have the following result:
2
31
Algorithm 2: An algorithm for sampling a high aAT graph. [ABH17]
Function aATSample(H = ( ¯V = [n], ¯E), c ∈ (0, 1)):
V := [2n]
E := ¯E ∪ {(i, i + 1) : i ∈ [2n − 1]}
for v ∈ [n + 1, 2n] and i ∈ [2] do
E := E ∪ {(v, GetParentc(v, i))}
end
return G := (V, E).
Function GetParentc(v,i):
if i = 1 then
u := i − 1
end
else if v ≤ n then
u := GetParentH (v, i)
end
else
m := (cid:98)c log(n)(cid:99)
b := (v − n) mod (cid:98)n/m(cid:99)
u := bm
// Populate new edges of graph.
// Get ith parent of node v
// DRSample
end
return u
Lemma D.2. P contains exactly 3n + 3 +(cid:80)n
(cid:16) (3i+1)(3i)
2
(cid:17)
+ 1
= 4n + 3 + 3
2 n(n + 1)2 = 3n3+6n2+11n+6
2
i=1
vertices.
See Figure 5 for an example. Let Hφ = Gφ∪P . We claim that Hφ with capacity 3n+4 will have a certain
pebbling cost if and only if φ is satisﬁable. Thus, if φ is satisﬁable, the optimal pebbling will correspond to
the minimum space black pebbling and will require 0 blue moves.
Lemma D.3. If φ is satisﬁable, then there exists a pebbling strategy of Hφ with capacity 3n + 4 and cost
exactly
(cid:18) 3n3 + 15n2 + 40n + 14 + 12c
(cid:19)
2
cr.
Proof. The total number of nodes in Gφ corresponding to variable assignments from the GLT construction
is
This can be visualized in Figure 4 by the nodes on the left hand side, excluding the nodes qi. Additionally,
there are n nodes qi, six nodes for each of the c clauses pi for 1 ≤ i ≤ c, and an additional node for p0. Thus,
6n +
i =
9n2 + 33n + 12
2
.
3n+3(cid:88)
i=4
3n+3(cid:88)
6c + 1 + 7n +
i =
9n2 + 35n + 14
2
+ 6c
nodes must be pebbled in Gφ.
i=4
By Lemma D.2, the number of nodes in the additional path P is 3n3+6n2+21n+18
. However, pebbling
P requires that each of the pyramids ∆3i+1 are pebbled a second time, as well as each α3i+1, requiring an
2
32
Algorithm 3: An algorithm for sampling depth-robust graphs. [BDK15]
Function Argon2iB(n ∈ N≥2):
V := [v]
E := {(1, 2)}
for v ∈ [3, n] and i ∈ [2] do
E := E ∪ {(v, GetParent(v, i))}
end
return G := (V, E).
Function GetParent(v,i):
if i = 1 then
u := i − 1
// Populate edges
// Get ith parent
(cid:105)
// Set sample range.
// Get random range length.
// Set quadratic dependency.
else
(cid:104) g2
N := 232
g← [1, N ]
r :=
N 2 v
end
return v − r
additional
steps.
(cid:18) (3i + 1)(3i)
2
n(cid:88)
i=1
(cid:19)
+ 1
= n +
3
2
n(n + 1)2 =
3n3 + 6n2 + 5n
2
Thus, the total number of steps required to pebble Hφ is
9n2 + 35n + 14
2
+ 6c +
3n3 + 6n2 + 5n
2
=
3n3 + 15n2 + 40n + 14 + 12c
2
.
The GLT construction has pebbling number 3n + 3. Since the nodes in P are ordered corresponding to
the natural pebbling order in Gφ, a single additional pebble suﬃces for P . Thus, if the capacity of Gφ is
3n + 4, then all pebbling moves can be achieved with red moves, so there exists a pebbling strategy with
total cost is
(cid:16) 3n3+15n2+40n+14+12c
(cid:17)
cr.
2
By construction, the pebbling strategy of Lemma D.3 is the optimal pebbling with only red moves. Thus,
it remains to show that no strategy containing any blue pebbles has better cost.
Since blue pebbles are more expensive than red pebbles, the only place the above strategy can be possibly
improved would be using blue pebbles on nodes in Hφ that are pebbled multiple times in the strategy of
Lemma D.3. As it turns out, the only nodes that are pebbled multiple times are the pyramids ∆3i+1, which
are each pebbled twice, as well as the vertices α3i+1. However, all of the vertices in ∆3i+1 are parents of
vertices in P . Thus, a blue pebble on any of these nodes must be returned to red, and then subsequently
discarded. That is, a blue pebble will replace at most one red move in the pebbling strategy of Lemma D.3.
The number of the other red moves is unaﬀected so that the overall cost cannot be cheaper. Therefore, no
pebbling strategy has a better cost than
cr.
Lemma D.4. If φ is unsatisﬁable, then the pebbling cost of Hφ with capacity 3n + 4 is greater than
(cid:17)
(cid:16) 3n3+15n2+40n+14+12c
(cid:18) 3n3 + 15n2 + 40n + 14 + 12c
2
(cid:19)
2
cr.
Proof. By the construction of the DAG Hφ, if φ is unsatisﬁable, then Hφ has pebbling number at least
3n + 5. Thus, if Hφ has capacity 3n + 4, any pebbling strategy must have a blue pebble at some point.
33
Algorithm 4: An algorithm for sampling depth-robust graphs. [BDK15]
Function Argon2iA(n ∈ N≥2):
V := [v]
E := {(1, 2)}
for v ∈ [3, n] and i ∈ [2] do
E := E ∪ {(v, GetParent(v, i))}
end
return G := (V, E).
Function GetParent(v,i):
if i = 1 then
u := i − 1
else
N := 232
g← [1, N ]
r :=(cid:2) g
N v(cid:3)
end
return v − r
// Populate edges
// Get ith parent
// Set sample range.
// Get random range length.
// Set linear dependency.
As in the proof of Lemma D.3, any optimal strategy only places blue pebbles on nodes that the strategy
of Lemma D.3 pebbles twice. Again, the only nodes that are pebbled multiple times are the pyramids
∆3i+1, which are each pebbled twice, as well as the vertices α3i+1. Since each vertex in ∆3i+1 is a parent
of a vertex in P , a blue pebble on any of these nodes must be returned to red, and then subsequently
discarded. Thus, a blue pebble will replace at most one red move in the pebbling strategy of Lemma D.3.
The remaining red moves are unaﬀected, so the overall cost is more expensive, under the assumption that
blue pebbles are more expensive than red moves. Therefore, any pebbling strategy has a cost greater than
(cid:16) 3n3+15n2+40n+14+12c
(cid:17)
2
cr.
Together, Lemma D.3 and Lemma D.4 imply Theorem D.1.
Reminder of Theorem D.1.
For cb ≤ 3ncr, the problem rbpeb
(cid:107)
is NP − Hard.
Proof of Theorem D.1:
First, we remark that given a DAG Hφ with some capacity m, as well as a
complete pebbling strategy as the certiﬁcate, the certiﬁcate can be veriﬁed in polynomial time by checking
(cid:107)
the validity of each step in the pebbling strategy. Thus, the computation of rbpeb
(Hφ). Now, given an instance φ of 3 − SAT with
n variables, we construct the above DAG Hφ. This procedure clearly takes polynomial time. Moreover, by
Lemma D.3, if φ is satisﬁable, then the optimal pebbling cost of Hφ with capacity 3n + 4 is exactly
We now reduce 3 − SAT to the computation of rbpeb
(cid:107)
(Hφ) is in NP.
On the other hand, by Lemma D.4, if φ is unsatisﬁable, then the pebbling cost of Hφ with capacity 3n + 4
is greater than
(cid:107)
Thus, the computation of rbpeb
NP − Hard, it follows that the computation of rbpeb
(cid:107)
(Hφ) is NP − Hard.
(Hφ) distinguishes whether φ is satisﬁable or not. Since 3 − SAT is
2
(cid:18) 3n3 + 15n2 + 40n + 14 + 12c
(cid:18) 3n3 + 15n2 + 40n + 14 + 12c
2
(cid:19)
(cid:19)
cr.
cr.
2
34
q1: Sink
14
q2
11
q3
8
q4
5
x1
x1
x2
x3
x4
15
13
x2
12
10
x3
9
6
7
x4
4
p0
p1
p2 = q5
Fig. 4: Graph GT QBF for ∃x1, x2, x3, x4 s.t. (x1 ∨ x2 ∨ x4) ∧ (x2 ∨ x3 ∨ x4).
35
9
8
7
6
5
4
P
Fig. 5: Path P for Hφ.
36