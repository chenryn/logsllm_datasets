to Lm+1 where L = RSF,n,k,η, with an extended oracle U (cid:48) whose
(cid:27)rst m rows contain U and whose last row is u(cid:48) where additionally
c∈[(cid:96)] γc = 0. Letting
i =1 ri(•)·pi(•)+rblind(•) be the polynomial obtained by V
where rblind(•) is a polynomial (of degree  ni + s where
s is the number of gates in the circuit. Then P generates an
extended witness w ∈ Fm(cid:96) where the (cid:27)rst ni + s entries of w are
(α1, . . . , αni , β1, . . . , βs) where βi is the output of the ith gate
when evaluating C(α). P constructs vectors x, y and z in Fm(cid:96)
where the jth entry of x, y and z contains the values βa, βb, and
βc corresponding to the jth multiplication gate in w. P and V
construct matrices Px , Py and Pz in Fm(cid:96)×m(cid:96) such that
x = Px w, y = Pyw, z = Pzw.
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2097q
h, u
h , u
h , u
h, ux
y
h , r z
y
h , uz
y
h , uz
h, uadd
h
0
h, uadd
h
h ∈ Fn,
blind,h(•) +m
Finally, it constructs matrix Padd ∈ Fm(cid:96)×m(cid:96) such that the jth
row of Paddw equals βa +βb−βc where βa, βb, and βc correspond
to the jth addition gate of the circuit in w. The prover samples
random codewords U w , U x , U y , U z ∈ Lm where L = RSF,n,k,η
subject to w = Decζ (U w), x = Decζ (U x), y = Decζ (U y), z =
Decζ (U z) where ζ = (ζ1, . . . , ζ(cid:96)) is a sequence of distinct ele-
ments disjoint from (η1, . . . , ηn). Let u(cid:48)
be
auxiliary rows sampled randomly from L for every h ∈ [σ] where
encodes an independently sampled ran-
each of ux
0
c∈[(cid:96)] γc = 0 and u
h
encodes 0(cid:96). P sets the oracle as U ∈ L
4m which is set as the
vertical juxtaposition of the matrices U w , U x , U y , U z ∈ Lm.
(1) For every h ∈ [σ], V picks the following random elements
dom (cid:96) messages (γ1, . . . , γ(cid:96)) subject to
• The interactive protocol:
and sends them to P:
− rh ∈ F4m,
// Testing Interleaved Reed-Solomon Codes
∈ Fm(cid:96),
− r add
h
// Testing Addition Gates
− r x
h , ∈ Fm(cid:96), r
h ∈ Fm.
h , r
// Testing Multiplication Gates
(2) For every h ∈ [σ], P responds with
− vh = (rh)T U + u(cid:48)
// Testing Interleaved Reed-Solomon Codes
− Polynomial qadd
h (•) of degree < k + (cid:96) − 1 where
h (•) = r add
qadd
such that pi is the polynomial of degree < k corresponding
h,i (·) is the unique polynomial of degree
to row i of U w , r add
h,i (ζc) = ((r add
)T Padd)ic for every c ∈ [(cid:96)],
< (cid:96) such that r add
blind,h(•) is the polynomial of degree < k + (cid:96) − 1
and r add
corresponding to uadd
.
// Testing Addition Gates
h(•), q
h(•), qz
− Polynomials qx
and p0,h(•) of degree < 2k − 1 where
h,i(•) · px
h(•) = r x
qx
i =1 r x
pi−m(•)),
h(•) = r
h,i(•) · px
y
q
pi−m(•)),
(cid:1)
h,i(•) · px
h(•) = r z
qz
pi−m(•)),
p0,h(•) = r
i (•) · p
q
px
h
where for a ∈ {x, y, z}, pa
is the polynomial of degree
i
h,i(·) be the unique
< k corresponding to row i of U a, r a
h,i(ζc) = ((r a
h)T [Im(cid:96) | −
polynomial of degree < (cid:96) such that r a
Pa])ic for every c ∈ [(cid:96)], r a
blind,h(•) is the polynomial of
degree < k + (cid:96) − 1 corresponding to ua
0
is the
and r
h
blind,h
polynomial of degree < 2k − 1 corresponding u
// Testing Multiplication Gates
U[j] that is the vertical juxtaposition of U x
h[j], u
ux
lowing conditions hold for every h ∈ [σ]:
h(•) of degree < k + (cid:96) − 1,
h,i(•) ·
h,i(•) ·
h,i(•) ·
blind,h(•) +m
blind,h(•) +m
blind,h(•) +m
i =1(cid:0)r
blind,h(•) +m
(3) V picks a random index set Q ⊂ [n] of size t, and queries
h [j], U w
h[j], j ∈ Q and accepts if the fol-
i (•) +2m
i (•) +2m
i (•) +2m
i ·(cid:16)
i =m+1 r z
i (•) − pz
h,i (•) · pi(•),
i =m+1 r x
y
i (•)(cid:17)
h[j], uadd
h [j], u(cid:48)
h [j], U z
h[j], uz
h [j], U
i =1 r add
i =m+1 r
i =1 r z
i =1 r
0
h
h
h
y
y
y
.
y
0
y
y
h[j] = vh[j].
i =1 r add
c∈[(cid:96)] qadd
i =1 rh[j]·Ui, j +u(cid:48)
// Testing Interleaved Reed-Solomon Codes
h (ζc) = 0 and for every j ∈ Q we have
− For every j ∈ Q we have4m

h [j] +m
h,i (ηj) · U w
uadd

i, j
// Testing Addition Gates
h[j] +m
− For every a ∈ {x, y, z},
c∈[(cid:96)] qa
h,i(ηj) · U w
h,i(ηj) · U a
ua
h(ηj).
h[j] +m
qa
p0,h(ζc) = 0 for every c ∈ [(cid:96)] and for every j ∈ Q,
i, j − U z
= p0,h(ηj).
0
u
i, j
// Testing Multiplication Gates
h(ζc) = 0 and for every j ∈ Q we have
i =1 r a
h (ηj).
+2m
h)i ·(cid:104)
i, j · U
U x
i =m+1 r a
i =1(r
= qadd
(cid:105)
i, j
y
q
i−m, j
=
The completeness of our ZKIPCP follows from the next lemma.
Lemma 4.11. If U w , U x , U y , U z ∈ Lm encode vectors w, x, y, z ∈
Fm(cid:96) satisfying
x = Px w, y = Pyw, z = Pzw, x(cid:12)y+(−1)m(cid:96)(cid:12)z = 0m(cid:96), Paddw = 0m(cid:96)
and P is honest, V always accepts.
Next, soundness is argued by the following lemma.
Lemma 4.12. Let e be a positive integer such that e < d/4. Suppose
that there exists no α such that C(α) = 1. Then, for any maliciously
formed oracle U ∗ and any malicious prover strategy, the veri(cid:27)er
rejects except with at most (e + 6)/|F|σ + (1 − e/n)t + 5((e + 2k)/n)t