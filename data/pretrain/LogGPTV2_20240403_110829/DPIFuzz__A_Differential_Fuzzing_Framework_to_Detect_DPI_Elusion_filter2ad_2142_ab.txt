• The insertion packet/frame could affect the state of the DPI
system such that while the packet/frame itself does not lead
to an observable difference, it causes the DPI system to con-
sequently reassemble different data or run into an error or a
crash while the destination server does not.
Evasion Packet/Frame: Some packets/frames might be accepted
by the server and rejected by the DPI system (This can happen in
cases where the check performed by the DPI are different from
those performed by a server). These packets/frames are known
as evasion packets/frames [33, 41], and potentially result in the
following consequences:
• The evasion packet/frame allows sending data to the server
without it being registered at the DPI system.
• The evasion packet/frame could lead to a difference in the
state of the DPI and the server implementation such that it
eventually manifests as an observable difference between the
behaviour of the DPI system and the server implementation.
Ambiguity: A DPI system implementation might also have dif-
ferent rules defined compared to a destination server implemen-
tation in order to deal with ambiguous aspects of the protocol
specification. As stated by Wang et al. [41], most network protocol
specifications are inherently ambiguous because they are written
in a natural language like English. Often, some parts of the spec-
ifications are deliberately left unspecified, which in turn leads to
vendor-specific implementations. This results in accepted pack-
ets/frames being reassembled differently or affecting the state of
the protocol implementations in different ways.
4 DPIFUZZ ARCHITECTURE
4.1 Challenges Faced
Designing efficient and effective fuzzers for secure and encrypted
protocols is challenging. Using a “naive” fuzzer does not lead to
valuable results because protocol implementations expect struc-
tured packets with specific values for fields as input, in the absence
of which the input is simply discarded. Valid inputs are extremely
important to guide an implementation into states that are deep
in the state space of a protocol [32]. A fuzzer will only be able to
--------------------------------------------------------------------QUICLYQUANTQUICHENEQOMVFSTConnectionHandlerPacketGeneratorMutatorJKL............XYZabcdJKL............XYZ............XYZa`b`c`JKL............XYZ............XYZa`b`c`EncoderandEncryptor-----------------ResponseAnalyzerDPIFuzzTrace FilesDifferentialAnalysisResultFileDeterministicRNGQUICImplementations335DPIFuzz: A Differential Fuzzing Framework to Detect DPI Elusion Strategies for QUIC
ACSAC 2020, December 7–11, 2020, Austin, USA
detect meaningful vulnerabilities if it considers the state space of
a protocol implementation and then injects unexpected inputs to
test how such cases are handled. This is extremely important as the
obvious errors/unexpected inputs are usually already handled by
the developers using a variety of testing frameworks.
Thus, for protocol level fuzzing, a structure-aware fuzzer is es-
sential to obtain meaningful results. Then again, simply using a
structured fuzzer might not be enough for stateful protocols like
QUIC where the exchange of data only starts after a successful
handshake process.
Taking the above mentioned points into account, we design
a modular, stateful, structure-aware, generation+mutation based
fuzzer that can actively interact with the server-side implementa-
tion under test (IUT).
4.2 Fuzzer Design Overview
Figure 3 shows the general structure of our fuzzing framework
DPIFuzz. We design a fuzzer that is split into the following modules:
• Connection Handler: This module establishes a connection
with the IUT by completing the TLS handshake. It uses the
high level QUIC API provided by QUIC-Tracker [28].
• Packet Generator: This module generates a sequence of QUIC
packets without encoding or encrypting them. It supports
generating all types of QUIC frames and packets listed in the
specification. The design of the Packet Generator module is
explored in detail in Section 4.4.
• Mutator: This module mutates the QUIC packets generated
by the packet generator. The mutations are defined in Sec-
tion 4.3. We do not mutate the QUIC packet header.
• Encoder and Encryptor: This module performs the neces-
sary encoding and encrytion of the QUIC packets. It then
encapsulates the QUIC packet in a UDP datagram and sends
the UDP datagram to the server.
• Response Analyzer: This module analyses the responses that
the IUT sends on processing the fuzzed sequence of packets.
It creates a trace file that contains:
– The application level data sent by the IUT as a response to
the packets it receives. This response will later be used to
gauge if two QUIC implementations differ in their payload
reassembly.
– Status Codes: These indicate the state of an IUT after
processing a sequence of packets. Our fuzzer infers the
state of the IUT either from the responses that the IUT
sends or from the absence of a response. Status codes
are (i) ServerTimeOut, which indicates that the IUT was
in an unresponsive state after processing a sequence of
packets1, (ii) TLSHandshakeFail, which indicates that the
handshake could not be completed successfully with the
IUT, (iii) ServerDidNotRespond, which indicates that the
IUT was unresponsive right from the initial packet and
(iv) ServerIsAlive, which indicates that the server was re-
sponsive after processing the entire sequence of packets.
1We test the responsiveness of the IUT , after processing the fuzzed sequence of
packets, by sending a response eliciting packer/frame like a Stream Frame to it and
also attempting to establish a new connection with the IUT by sending an initial
packet.
Packet flow through the fuzzer: The fuzzing process starts
with the Connection Handler module establishing a connection
with the IUT. To ensure that the handshake between the client and
server completes successfully, we do not fuzz the initial and the
handshake packets. Following a successful connection, the Packet
Generator creates a sequence of QUIC packets that we wish to send
to the server. Since the Packet Generator creates QUIC packets
which are not yet encoded or encrypted, we can perform mutations
before the packet contents are encoded or encrypted.
Once we have a sequence of packets generated from the Packet
Generator, the sequence is passed through the mutator module. We
ensure that we do not fuzz the packet header. This fact coupled with
fuzzing the packet payload before encoding or encryption ensures
that the packets and most of the frames (some of the frames might
undergo structure altering mutations) remain structurally valid and
allows us to observe the effects that fuzzing different frame field
values can have on server implementations. Following this, each
packet will either just be encoded (like the initial client packet)
or both encoded and encrypted (like the handshake and the data
packets). Finally, the fuzzer encapsulates the QUIC packet in a UDP
datagram and sends the datagram to the IUT. The IUT response is
received at the Response Analyzer based on which a trace file is
created.
4.3 Mutations
We broadly define two types of mutations for our fuzzer:
Sequence-level mutations affect the sequence of packets, gen-
erated by the Packet Generator (see next subsection), as a whole.
We envision three such mutations:
shuffled.
• Shuffle: The order of packets in a sequence is randomly
• Duplicate: Packets are randomly selected and then duplicated
with varying degrees of duplication
• Drop: Randomly selected packets are dropped from the se-
quence of packets.
A sequence can undergo each of these three sub-mutations with
a probability α1, α2 and α3, respectively. The values for these prob-
abilities are defined in Table 7 in the appendix.
Packet-level mutations affect an individual packet payload in-
stead of an entire sequence. Every packet in a sequence of packets
can undergo packet-level mutations with a probability γ. We dis-
tinguish between payload mutations that are defined considering
QUIC Packet payload simply as a collection of bytes, and frame
mutations that are defined for the individual frames contained in
the QUIC packet payload, as outlined below. Once a packet has
been selected to undergo packet-level mutations, it could undergo
either a payload-level mutation or a frame-level mutation with a
probability ω and 1 − ω, respectively. It is important to note that
after performing the mutations on the packet payload, we update
the payload length field in the long headers of packets (if present)
to reflect the length of the mutated payload. This ensures that a
simple check of comparing the payload length field with actual
payload length does not lead to the packet being discarded.
• Payload mutations: These mutations do not take into con-
sideration the structure of the payload or the frames that
336ACSAC 2020, December 7–11, 2020, Austin, USA
Reen and Rossow
make up the payload. They could lead to alterations in the
structures of the frames within the packets. The four types
of payload mutations are:
– Repeat payload: A random substring of the entire packet
payload is selected and injected at a random position in
the packet payload. The existing payload content is not
overwritten.
– Alter payload: In this, we iterate over the payload at a
byte level. For each byte, a random decision is made about
whether to fuzz the byte or not.
– Add random payload: A payload with randomised content
and a random length lesser than the actual payload length
is selected and inserted at a random position in the original
payload without overwriting the existing payload content.
– Drop random payload: A random offset is selected and
then a random number of bytes, of length ≤ payload length
− offset, starting at that offset is dropped.
A selected packet will undergo one of the four mutations at
random.
• Frame mutations: The individual frames that a packet pay-
load contains are first extracted and then each frame is fuzzed
with a probability β.
As an example, consider the STREAM DATA FRAME which
carries the stream-level payload in QUIC. The different fields
in this frame are OFF bit, LEN bit, FIN bit, Stream ID, Offset,
Length and Stream Data. First, the maximum number of fields
that should be fuzzed in the frame is randomly determined.
Then, we randomly pick which fields to fuzz. All the other
types of frames defined in the QUIC specification are fuzzed
based on the same principle.
4.4 Packet Generators
The previous subsection discussed how we can mutate existing
sequences of QUIC packets. We will now discuss how to create
such streams and packets in the first place. Packet generators can
be of two types, which are different in whether or not the testers
have control over the sequence of packets being generated:
Randomised: These generators randomly decide which types
of frames/packets to create and randomly group frames into packet
payload. They fill the frame and packet fields with random but type-
accurate values. They attach frames as packet payload without
considering whether the specification allows a particular packet
to have specific frame types or if a client is even allowed to send
frames of a specific type.
Controlled: These generators create specific types of packet
sequences that we want to test the IUT with. This allows us to
focus more on specific aspects of an implementation that we want
to test. The total number of packets and frames, their field values
and their ordering can all still be randomised, but we can use the
generator to control the type of packets and frames being created
as well as the grouping of frames into packet payload. The packets
still undergo mutations after this.
In particular, we use three types of controlled generators. These
generators create sequences which allow us to specifically target
the stream reassembly mechanism of the IUTs.
• Basic Stream Reassembly Generator: This generator cre-
ates a sequence that contains a random number of pack-
ets with stream frames. Each stream established with the
server contains a random number of random-length and
random-content QUIC packets that will be sent to the server,
and finally, is gracefully terminated. QUIC stream frames
correctly encode the stream offets as if data was sent consec-
utively.
• Flow-Control-Aware Stream Reassembly Generator: In con-
trast to the previous generator, the sequence generated by
this generator also contains packets and frames which affect
the flow control parameters established for the streams as
well as the connection.
• Overlapping Offset Generator: This generator creates a se-
quence of packets and frames to specifically test how an
implementation deals with overlapping offsets in a stream.
The sequence that this generator creates is simply shuffled
but not passed through the mutators. This ensures that the
values of other fields in a frame are not fuzzed and offset field
is the only field affecting the results. Frames which contain
overlapping offsets as well as different data for the same
offsets are created by randomly deciding on the total length
for a stream and then fragmenting it in multiple different
ways using randomised data and offsets.
4.5 Differential Analysis
We now use the described fuzzing methodology to automatically
search for differences in protocol implementations. To this end, we
leverage differential fuzzing, which feeds the same input to similar
yet different programs and compares their behavior. In our context,
these “similar” programs are semantically equivalent QUIC servers
based on different QUIC implementations. Technically, we thus im-
plement simple “echo” servers for the QUIC libraries under test (see
Section 5.1 for more details), which reply with the application-level
payload they received from the client (i.e., from our fuzzer).
To compare the program behaviors, for every execution (which
is bootstrapped with a particular generator and seed, more later)
against an IUT, the fuzzer records a trace file containing (i) the
application-level data returned by the IUT and (ii) the correspond-
ing status code. The trace files do not necessarily distinguish be-
tween all possible states of IUTs; however, they contain enough
information to highlight the relevant differences from the perspec-
tive of DPI elusion. More details can be readily included in the trace
files for a more detailed comparison of IUT states depending on the
use case. To speed up comparisons, DPIFuzz computes the hash for
all generated trace files (i.e., the reassembled stream payloads and
status codes, but not headers). DPIFuzz then compares the hashes
of the trace files for all the executions of the fuzzer, with the same
seed and generator, for all the listed IUTs. If not all hashes of a
given seed are equal, DPIFuzz adds the seed value for the execution,
the name of the generator used and a hash map with the names of
all the listed IUTs as keys and names of the IUTs their hash differs
from, as values to a result file. The differing hashes indicate that
the servers under test do not all respond in the same way to the
same sequence of packets that were provided as input to them. That
is, either the data reassembled by the servers was different and/or
337DPIFuzz: A Differential Fuzzing Framework to Detect DPI Elusion Strategies for QUIC
ACSAC 2020, December 7–11, 2020, Austin, USA
the values assigned by the fuzzer for status codes differed. Thus,
the sequence of packets are of interest to us as they can be used to
detect elusion strategies.
A slight complication arises from the fact that we cannot simply
replay one actual packet capture to all IUTs, as the underlying
cryptographic material differs. On the one hand, we want that the
sequences sent to all IUTs essentially carry the same payload and
follow the same order of packets and frames. On the other hand,
packets cannot be fully identical, as QUIC streams are end-to-end
encrypted with diverging (and potentially ephemeral) key material.
To tackle this, the fuzzer first completes the handshake individually
with all the IUTs. All subsequent packets carry the appropriate
connection IDs and are correctly encrypted so that all the servers
see the same payload after decryption and decoding. This ensures
that we can replay “the same” sequence to multiple QUIC instances,
i.e., we can now recreate a sequence of randomly generated packets
in order to send identical sequencies to multiple implementations.
Technically, we use a deterministic random number generator to
randomize packet generations and to select mutations. This allows
us to easily regenerate the same sequence of packets as long as we
know the seed value used to initialise the random number generator.
DPIFuzz thus selects and records a new cryptographically secure
seed value after each fuzzer execution. This seed initializes the
deterministic random number generator used in the fuzzer.
Finally, we outline the inputs that DPIFuzz expects. DPIFuzz
requires an IUTList, which specifies the IUTs whose behaviour
will be compared, a GeneratorList, which specifies the packet
generators that will be used in the fuzzer, the value Ns, which
determines the number of times we execute the fuzzer with the
each specified generator against each IUT with different seed values,
and the value ParallelExecutions, which determines the number
of fuzzer instances that can be executed in parallel.
5 RESULTS
5.1 Experiment Methodology
We implement our entire framework using Golang. For our experi-
ments, we consider five actively developed, open source implemen-
tations2 of QUIC; namely, QUICHE [15] by Cloudflare, MVFST [16]
by Facebook, QUANT [31] by NetApp, NEQO [30] by Mozilla and
QUICLY [18] by Fastly.
In order to access the data reassembled by the DPI system and the
server, we create echo servers using the QUIC implementations3.
The echo servers allow us to easily validate whether or not there are
ambiguities in how QUIC libraries handle certain packet streams.
Having said this, they do not necessarily capture the full logic of
more complex QUIC applications—hence our findings represent
a lower bound of all potential QUIC implementation ambiguities.
From these five QUIC libraries, we create all potential pairs, i.e.,
exhaust all possible combinations of systems being used for DPI
inspection and data reception, respectively. We run DPIFuzz si-