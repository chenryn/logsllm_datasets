γ )), increasing c further
c
will not decrease T, because the downloading band-
width is no longer the bottleneck. A similar observa-
tion can be made regarding the uploading bandwidth
µ.
− 1
η ( 1
µ
• It is often true that the downloading bandwidth c of a
peer would be much higher than its uploading band-
width µ. Common examples of such an asymmetry are
DSL and cable modem connections. For performance
analysis purposes, it may be tempting to set c = ∞
as in [11, 24]. However, the expression for T in (6)
shows that the average download time is not always
constrained by the uploading bandwidth of the peers.
In fact, if the seed leaving rate γ is smaller than µ, then
the downloading bandwidth c determines the network
performance even though c may be much larger than
µ.
We brieﬂy comment on the case η = 0, which means that
downloaders do not upload data to each other and only
If γ  0 still holds and T = 1/c. On the other
hand, if γ > µ, from (1), we can see
≤ (µ − γ)y(t).
dy(t)
dt
This tells us that y(t) decreases at least exponentially. So
if γ > µ, the number of seeds will exponentially decrease to
zero and the system dies. Recall that when η > 0, the sys-
tem reaches a steady state no matter what γ is. So, it is very
important for the downloaders to upload data to each other.
and
„
«k
.
log N
N
η ≈ 1 −
(7)
ﬀ
ﬀk
,
In this section, we present a simple model to calculate
the value of η, which indicates the eﬀectiveness of the ﬁle
sharing. For a given downloader i, we assume that it is con-
nected to k = min{x − 1, K} other downloaders, where x is
the number of downloaders in the system and K is the max-
imum number of downloaders to which a peer can connect.
We also assume that each downloader has the information
about which pieces the connected peers have. Hence if peer
i has pieces that are of interest to at least one peer that is
connected to it, then peer i will upload data. We then have
η = 1 − P
downloader i has no piece that
the connected peers need
.
We assume that the piece distributions between diﬀerent
peers are independent and identical. Then
η = 1 − P
downloader j needs no
piece from downloader i
where j is a downloader connected to i.
For each downloader, we assume that the number of pieces
it has is uniformly distributed in {0, ··· , N − 1}, where N
is the number of pieces of the served ﬁle. Let ni denote the
random variable describing the number of pieces at down-
loader i. We assume that given ni, these pieces are chosen
randomly from the set of all pieces of the ﬁle. This is a rea-
sonable assumption because BitTorrent takes a rarest ﬁrst
piece selection policy when downloading. Under these as-
sumptions, we have
ﬀ
downloader j needs no
piece from downloader i
= P{j has all pieces of downloader i}
´
P{j has all pieces of i|ni, nj}
`
N−ni
`
´
nj−ni
´
´
N
nj
P
1
N 2
1
N 2
`
`
N+1
nj
N
nj
N−1X
njX
nj =1
N−1X
ni=0
njX
ni=0
1
N 2
nj =1
N−1X
nj =1
N−1X
nj =1
N + 1
N 2(N + 1 − nj)
N−1X
N + 1
N 2
N + 1
N 2
nj =1
NX
m=2
1
N + 1 − nj
1
m
≈ log N
N
=
=
=
=
=
=
Now, we will interpret the expression for realistic ﬁle sizes.
In BitTorrent, each piece is typically 256KB. Thus, for a
ﬁle that is a few hundreds of megabytes in size, N is of the
order of several hundreds. Hence, even if k = 1, η is very
close to one. For BitTorrent, k is actually larger, since the
maximum number of connections K is typically 40. This tells
us that BitTorrent is very eﬃcient in sharing ﬁles. When k
increases, η also increases but very slowly and the network
performance increases slowly. Note that, since k depends on
the number of other peers in the system, it may be related to
the arrival rate λ. Hence, when λ increases, the network per-
formance increases but very slowly. Thus, our observation in
the previous subsection that the network performance is es-
sentially independent of λ still holds. This also matches the
observations of real BitTorrent networks presented in [11,
24]. Note that when k = 0, the downloader is not connected
to any other downloaders and hence η = 0.
3.3 Local Stability
When deriving the steady-state quantities ¯x, ¯y and T, we
implicitly assumed that the system is stable and will reach
its equilibrium. In this section, we study the stability of the
ﬂuid model (1) around the equilibrium {¯x, ¯y}.
γ ), the uploading bandwidth is the
constraint and around a small neighborhood of {¯x, ¯y}, we
have
When 1
c  µ. When η > 0, both
µη + θ + γ − µ and µηγ + θ(γ − µ) are greater than zero.
So the eigenvalues have strictly negative real parts and the
system is stable.
− 1
Similarly, when 1
γ ), the downloading band-
width is the constraint and around a small neighborhood of
{¯x, ¯y}, we have
c > 1
− 1
η ( 1
(9)
µ
µ
dx(t)
dt
dy(t)
dt
A2 =
Let
= λ − θx(t) − cx(t)
= cx(t) − γy(t).
» −(θ + c)
–
0
−γ
.
c
(10)
Then the eigenvalues of A2 satisfy
2
ψ
+ (θ + γ + c)ψ + (θ + c)γ = 0.
(11)
Again, since both θ + γ + c and (θ + c)γ are greater than
zero, we see that the eigenvalues have strictly negative real
parts and the system is stable.
− 1
γ ) is a little more tricky since
the dynamics are determined by the matrix A1 or the matrix
The case where 1
c = 1
η ( 1
µ
Even in the cases where 1
c
A2, depending upon the direction in which the system is
perturbed. Thus, a linear analysis will not suﬃce to even
determine local stability. To avoid lengthy arguments, we
do not consider this special case here.
− 1
γ ), the global stability
of the ﬂuid model (1) may be hard to analyze because of
the fact that the dynamics of the system changes depending
upon whether cx > µ(ηx+y) or not. Such systems are called
switched linear systems; we refer the reader to the survey in
[16] for the stability issues associated with such models.
(cid:5)= 1
η ( 1
µ
3.4 Characterizing Variability
When the request arrival rate is large (which also means
a large number of downloaders and seeds), the ﬂuid model
is a good approximation of the real system. However, it
is important to understand how the number of seeds and
downloaders vary around the numbers predicted by the de-
terministic model. In this subsection, we present a simple
characterization of the variance of x and y around ¯x and ¯y
using a Gaussian approximation.
Under the assumptions that we have discussed in Sec-
tion 3, when the arrival rate λ is large, the number of down-
loaders and seeds at any time t can be described by
√
√
x(t) +
λˆx(t),
y(t) +
λˆy(t),
respectively, where ˆX = (ˆx, ˆy)T is the solution to the fol-
lowing stochastic ﬂuid diﬀerential equation whose solution
is known as the Ornstein-Uhlenbeck process:
d ˆX(t) = A ˆX(t)dt + BdW(t).
(12)
In (12), the components of W are independent standard
Wiener processes (Brownian motions), with the entries of
A and B being determined by whether the downloading
or the uploading bandwidth is the bottleneck. Speciﬁcally,
A = A1 given by (8) if 1
γ ) and A = A2 given by
(10) if 1
γ ). In both cases, we have
c  1
»
µ
− 1
η ( 1
1 −√
0
0
B =
ρ −p
p
–
(1 − ρ) −p
(1 − ρ)
0
(1 − ρ)
(13)
where ρ := θ
case 1
η ( 1
c = 1
µ
− 1
θ+β . We do not consider the more complicated
γ ) which is unlikely to occur in practice.
From (12), it is easy to compute the steady-state covari-
ance of ˆX, i.e, Σ = limt→∞ E( ˆX(t) ˆXT (t)). This is given by
the so-called Lyapunov equation [3]
AΣ + ΣA
T
T
+ BB
= 0.
(14)
The steady-state variance of ˆx is then given by (1, 1) ele-
ment of Σ and the steady-state variance of ˆy is given by
the (2, 2) element of Σ. The above result essentially states
that, in steady-state, the number of seeds and downloaders
is distributed as Gaussian random variables whose variances
are determined by Σ.
The formal proof required to establish (12) is beyond the
scope of this paper. We will simply state here that it involves
showing that the original stochastic process converges to
the deterministic and stochastic diﬀerential equation limits
when the arrival rate goes to ∞. This can be established
using weak-convergence theorems such as the ones in [5, 12,
23].
4.
INCENTIVE MECHANISM
In this section, we discuss the algorithm in BitTorrent
which is intended to discourage free-riding. We ﬁrst describe
the algorithm and then study the optimal selﬁsh behavior
of the users under this algorithm.
4.1 Peer Selection Algorithm
There is a built-in incentive mechanism in BitTorrent to
encourage users to upload. The basic idea is that each peer
uploads to nu peers from which it has the highest down-
loading rates (the default value of nu is 4). But since a peer
only has partial information of the whole network (i.e., it
doesn’t have the upload rate information of all peers), opti-
mistic unchoking [8] is used to explore the network. In this
section, our objective is to understand how the built-in in-
centive mechanism aﬀects the network performance. Hence,
we ignore the details of optimistic unchoking and assume
that each peer has the global information of uploading rates.
We also assume that there are no downloading bandwidth
constraints, all peers are fully connected and have demands
from each other.
Under the above assumptions, we can simplify the peer
selection algorithm of BitTorrent as follows. We ﬁrst sort
the peers according to their uploading bandwidth (it could
be the physical uploading bandwidth or the uploading band-
width that has been set manually by the user) such that the
ﬁrst peer has the highest uploading bandwidth. If two or
more peers have the same uploading bandwidth, they are
randomly ordered. The peer selection process proceeds in
steps with peer i choosing peers to upload at step i. In the
real BitTorrent, the peer selection does not proceed in steps
like this. However, after we describe the selection algorithm,
it would be clear that the step-by-step selection process does
not change the selection of the peers signiﬁcantly. Let N be
the total number of peers and let µi be the uploading band-
width of peer i. Then at step i, peer i selects peers to upload
according to the following rules.
1. If peer i is selected by peer j (j  i} using the following set
of rules to prioritize a peer, say k1, over another peer
k2 :
i
k1  µk2, select k1.
(b) If µk1 = µk2 and ni
(c) If µk1 = µk2, ni
i  N−i, peer i selects all peers in
i)− (N − i)
{k|k > i} and also randomly selects (nu− ni
peers from the peers that i has not selected yet.
k2, select k1.
3. If ni
These rules are easy to understand. Rule 1 states that if
the downloading rate from peer j to peer i is greater than
or equal to the uploading rate of i, peer i should upload
to peer j to try to keep the downloading rate high. We
i ≤ nu. So rule 1 will not
will show in Lemma 1 that ni
violate the requirement that the number of uploads cannot
exceed nu. Rule 2(a) simply gives priority to peers with
higher uploading rates. Rule 2(b) tries to treat peers with
the same uploading rate as fairly as possible and rule 2(c) is
simply a tie-break rule. Rule 3 takes care of the last several
peers and makes sure that all peers have nu uploads. The
following lemma is a simple property of the peer selection
algorithm.
Lemma 1. With the peer selection algorithm, when peer
i ≤ nu and for any k2 >
i selects uploading peers, we have ni
k1 ≥ i, ni
k1 ≤ nu.
k2 ≤ ni
i = 0 ≤ nu and ni
k2 = ni
i+1 ≤ ni
Proof: First, when i = 1, ni
k1 ≤ nu for any k2 > k1 ≥ i + 1. Now, if ni
k1 =