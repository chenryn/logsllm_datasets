Comparing the CNAME-based cnameslash and SRV-based
LDAP and Eduroam payloads, we can observe that there
is some difference of resolver behaviour in handling these
records, even thought they are based on the same property
(including non-standard characters in a domain name ﬁeld).
This can be seen as a conﬁrmation that many resolvers indeed
ignore the contents of record type ﬁeld that is not directly
needed for the DNS resolution (like SRV), but do not do so
for records which are important to ﬁnish the lookup (like A
or CNAME).
Cache injection vulnerabilities. For the injection speciﬁc
payloads inject\. and inject\000, the evaluation results also
mostly match the expectation from the in-lab evaluation. Like
all resolver implementations except Verisign Public DNS,
most Open DNS resolvers which do handle the injection pay-
USENIX Association
30th USENIX Security Symposium    3177
loads transparently and are not vulnerable to our injection
payloads.
Nevertheless, we found 1.3% to 4.6% of the open DNS
resolvers to be vulnerable to a cache poisoning attack without
any further requirements, which was veriﬁed by querying for
the maliciously injected record. Overall, 8.0% (or 105,854)
of the open resolvers are vulnerable to cache poisoning via
any of the injection payloads. This result is alarming consid-
ering that the inject\000 attack does not require any attacker
resources other than control over an arbitrary nameserver in
the internet.
Misinterpretation analysis. In our Internet measurement
we observed the following phenomenon: the resolvers re-
spond with the non-misinterpreted value in return to the ﬁrst
query for a record with injection payload in our domain. How-
ever, subsequent queries for the same resource record (with
the same domain name) which are responded from the cache
(without issuing a query to our nameserver) can result in one
of the two outcomes: (1) a misinterpreted value or (2) non-
misinterpreted value. Nevertheless a subsequent validation
of the cached record conﬁrms that in both cases the injection
was successful and the target cache stored a misinterpreted
record.
Vulnerable DNS software in Internet. We use version.
bind special query to infer the implementation and version of
the open resolvers. While most servers do not respond to these
queries (in our study 65%, see column ‘our study‘ in Table 5),
we ﬁnd that, depending on the implementation and attack
type, even those exact versions we have found not vulnerable
during our lab evaluation were found vulnerable during our
evaluation of open resolvers in the Internet, e.g., 19.2% of
vulnerable resolvers were Bind resolvers. In these cases we
ﬁnd that the misinterpretation causing the vulnerability does
not occur in the ‘visible’ software implementations, but rather
in one of the upstream (forwarding) resolvers in the resolution
chain, which we cannot identify.
In some cases upstream forwarders is a public DNS ser-
vice, like Google, OpenDNS and Cloudﬂare. We infer this by
mapping the IP addresses of the DNS queries received by our
nameservers to the Autonomous System (AS) numbers of the
resolvers sending the queries.
[RFC1034] non-compliant resolvers. 12% of the open
resolvers in the Internet exhibit the same ﬂaws as we found
in stub resolver implementations. These are misinterpreta-
tions when decoding line-format domain names into zero-
terminated string. Not only this allows for cache injection
attacks, but it also indicates that those resolvers do not follow
the recommendations in [RFC1034] [30], requiring that the
DNS software should store domain names in their line format
and not as decoded strings.
5 Root Causes, Insights and Mitigations
Missing Speciﬁcations
The study that we carried out in this work showed us that
one of the root factors allowing our attacks is a lack of threat
model in the standard RFCs as well as a lack of speciﬁcations
on DNS and on its interactions with applications:
Threat modelling. There is a lack of threat modelling in
the DNS infrastructure and in the interaction of DNS with
the applications. The RFCs should provide a threat model
discussing potential pitfalls. For instance, most applications
typically expect hostnames, but in the RFCs, this is not con-
sidered.
DNS record parsing. There is a lack of detailed speciﬁca-
tion on how to parse DNS records. This critical functionality
should be speciﬁed in the RFCs.
Validation of DNS records. There is a lack of standard-
ised implementation for validation of DNS records. This is
important esp. for non-address record types as these are not
supported by the OS resolver (e.g., libc). Similarly to, say
libraries for generating DNSSEC keys, there should be an
implementation for validation of received DNS records.
Domain names vs hostnames. There is a discrepancy be-
tween deﬁnitions of domain names and hostnames, which
leads to confusion in DNS software in how to parse the DNS
records. To avoid pitfalls the same rules should apply to both.
Mitigations
Applications. Since DNS resolvers serve data from un-
trusted Internet sources, the applications should always treat
data from DNS the same way they treat user input, hence
validation of formatting and escaping should always be per-
formed (ie. validate html special characters, etc.), regardless if
the API used to receive the data indicates an already checked
result (POSIX) or not.
System stub resolvers. Stub resolvers should be modi-
ﬁed to check if domain names returned by POSIX calls like
gethostbyname() are valid hostnames, [17]. If not, the do-
main name should not be given to the application, like it is
implemented in glibc already. Merely escaping special char-
acters as done by netbsd can still be vulnerable. For instance,
we demonstrate this with the 6.6.6.6.in-addr.arpa Cross-
Site Scripting payload in Figure 9 which does not contain
any character typically escaped in domain names and, for
example, can be used to execute an attack against OpenWRT.
Furthermore non-libc DNS libraries should follow the same
rules (i.e., only allow hostnames as per [17]) even for non-
standard lookup types like SRV to prevent confusion among
developers who only used libc resolvers before. Guidance on
how to implement such checks should ideally be given by
standardisation bodies.
DNS resolvers. Filtering DNS responses on the DNS re-
solver or forwarder level is possible but is against the DNS
standard [3, 4, 17]. Changing this requires a discussion in
3178    30th USENIX Security Symposium
USENIX Association
DNS Payload shown in
Test
s BIND (9.14.0)
r
e
v
l
o
s
e
r
MaraDNS Deadwood (3.2.14)
Unbound (1.9.1 )
PowerDNS Recursor (4.3.0)
Windows Server (2012 R2)
Windows Server (2016)
Windows Server (2019)
s
r
e
v
l
o
s
e
r
r
e
d
r
a
w
r
o
F
e
v
i
s
r
u
c
e
R
s pdnsd (1.2.9a)
dnsmasq (2.79)
NxFilter (4.3.3.9)
systemd resolved (237)
OpenDNS
Cloudﬂare Public DNS
Comodo Secure DNS
Google Public DNS
Hurricane Electric
Neustar UltraRecursive
Norton ConnectSafe
Oracle Dyn
SafeDNS
VeriSign Public DNS
Yandex DNS
glibc
musl
dietlibc
uclibc
Windows
NetBSD
Mac OS X
go*
nodejs
openjdk8*
s
r
e
v
l
o
s
e
r
c
i
l
b
u
P
b
u
t
S
Open resolvers in Internet
Base































ANSI
@



























()3



/































InetAddress.getCanonicalHostName() gives PTR instead of CNAME
SQL




1






1
1


















XSS






























