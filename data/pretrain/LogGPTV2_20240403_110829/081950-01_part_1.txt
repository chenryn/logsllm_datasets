第 1 章
自动化运维与Python
随着云计算、自动化及人工智能时代的来临，Python语言也成为当下最热门的语言之一。
本章首先从自动化运维展开，介绍自动化运维的趋势、成熟的自动化运维体系构成、自动化运
维相关的优秀开源工具；其次介绍了为什么选择 Python 语言作为自动化运维的必备工具；最
后重点讲述Python的安装、开发工具、基础语法及相应的实例。
一方面，随着IT技术的飞速发展，软/硬件的设施日益复杂，企业的运维压力随之上升，
自动化运维相关的人才供不应求；另一方面，国内Python方面的人才也非常短缺，学习Python
及自动化运维，前景自然非常光明。除此之外，学习 Python 不仅可以做自动化工具，还可以
做服务器后台、开发网络爬虫、Web网站等，因此本章关于Python的基础知识对Python初学
者也非常有帮助。
1.1
自动化运维概述
在运维技术还不成熟的早期，都是通过手工执行命令管理硬件、软件资源，但是随着技术
的成熟及软/硬件资源的增多，运维人员需要执行大量的重复性命令来完成日常的运维工作。
而自动化运维就是将这些原本大量重复性的日常工作自动化，让工具或系统代替人工来自动完
成具体的运维工作，解放生产力，提高效率，降低运维成本。可以说自动化运维是当下IT运
维工作的必经之路。
1.1.1 自动化运维势在必行
自动化运维之所以势在必行，原因有以下几点：
（1）手工运维缺点多。传统的手工执行命令管理软/硬件资源易发生操作风险，只要是手
工操作，难免会有失误，一旦执行错误的命令，后果可能是灾难性的。当软/硬件资源增多时，
手工配置效率低，增加运维人员的数量也会导致人力成本变高。
（2）传统人工运维难以管理大量的软/硬件资源。试想当机器数目增长到1000台以上时，
仅靠人力来维护几乎是非常困难的事情。
（3）业务需求的频繁变更。现在的市场瞬息万变，业务唯有快速响应市场的需求才能可持续
发展，对工具的需求和变更更是会越来越多，频率也越来越快，程序升级、上线、变更都是需要运
维条线来支撑的。同样的，只有借力自动化运维，使用工具才能满足频繁变更的业务需求。
Python自动化运维快速入门
（4）自动化运维的技术已经成熟。自动化运维被广泛关注的一个重要原因就是自动化运
维的技术已经非常成熟，技术的成熟为自动化运维提供了智力支持。云计算、大数据一方面刺
激着自动化运维的需求，另一方面也助力自动化运维。微服务的软件架构、容器等技术都在推
动自动化运维。
（5）工具已经到位。关于自动化运维的工具，无论是开源的工具还是企业级的产品，都
是应有尽有，实现自动化运维已经势不可挡。
1.1.2 什么是成熟的自动化运维平台
现在成熟的自动化运维平台都具备哪些要素呢？一般来说，有以下几点：
（1）需要有支持混合云的配置管理数据库（CMDB）。CMDB 存储与管理企业 IT 架构
中设备的各种配置信息，它与所有服务支持和服务交付流程都紧密相连，支持这些流程的运转、
发挥配置信息的价值，同时依赖于相关流程保证数据的准确性。现在更多的企业选择将服务器
资源放在云上，无论是公有云还是私有云都提供资源管理接口，利用这些接口构建一个自动化
的CMDB，同时增加日志审计功能，通过接口对资源的操作都应该记录，供后续审计。
（2）有完备的监控和应用性能分析系统。运维离不开监控和性能分析。资源监控（如服
务器、磁盘、网络）和性能监控（如中间件、数据库）都是较为基础的监控，开源工具有Zabbix、
Nagios、OpenFalcon（国产）。应用性能分析，如某些 Web 请求的响应速度、SQL 语句执行
的快慢等对于问题的定位是非常有帮助的，开源工具有pinpoint、zipkin、cat；商业工具有New
Reclic、Dynatrace。
（3）需要具备批量运维工具。如何有效降低运维的成本呢，肯定是更少的人干更多的活。
批量运维工具可有效节省大量人力，使用少量的人管理大量的服务器软/硬件资源成为可能。
开源的批量运维工具有ansible、saltstack、puppet、chef，其中ansible和saltstack纯由Python
编写，代码质量和社区活跃程度都很高，推荐使用。
（4）需要有日志分析工具。随着服务器的增多，日志的采集和分析成了运维中的难点，
试想如何快速地从成百上千台服务中采集日志并分析出问题所在呢？日志采集方面工具有
Sentry，也是纯由Python打造，日志分析有ELK，两者都是开源的。
（5）需要有持续集成和版本控制工具。持续集成是一种软件实践，团队成员经常集成他
们的工作，每次集成都通过自动化的构建来验证，从而尽早发现集成错误。持续集成的工具有
Hudson、CruiseControl、Continuum、Jenkins等。版本控制是软件开发中常用的工具，比较著
名的是svn、git。
（6）还要有漏洞扫描工具。借助商业的漏洞扫描工具扫描漏洞，保护服务器资源不受外
界的攻击。
1.1.3 为什么选择 Python 进行运维
为什么选择 Python 作为运维方面的编程语言呢？网络上不乏已经开发好的运维软件，但
是运维工作复杂多变，已有的运维软件不可能穷尽所有的运维需求，总有一些运维需求需要运
4
第1章 自动化运维与Python
维人员自己去编写程序解决，这样做运维很有必要学会一门编程语言来解决实际问题，让程序
代替人力去自动运维，减轻重复工作，提高效率。接下来，选择哪一门语言合适呢？当然是选
一门学习成本低、应用效果高的，这方面 Python 的性价比最高，原因是：一方面，大部分的
开源运维工具都是由纯Python编写的，如Celery、ansible、Paramiko、airflow等，学习Python
后可以更加顺畅地使用这些开源工具提供的API，可以阅读这些开源工具的源代码，甚至可以
修改源代码以满足个性化的运维需求；另一方面，Python与其他语言相比，有着以下优势。
 简单、易学。阅读Python程序类似读英文，编码上避免了其他语言的烦琐。
 更接近自然的思维方法，使你能够专注于解决问题而不是语法细节。
 规范的代码，Python采用强制缩进的方式使得代码具有较好的可读性。
 Python拥有一个强大的标准库和丰富的第三方库，拿来即用，无须重复造轮子。
 可移植性高，Linux、UNIX、Windows、Android、Mac OS等一次编写，处处运行。
 实用效果好，学习一个知识点，能够直接实战——用在工作上，立竿见影。
 潜移默化，学习Python能够顺利理解并学习其他语言。
Python也是最具潜力的编程语言，在2018年IEEE发布的顶级编程语言排行榜中， Python
排名第一，如图1.1所示。而图1.2表明，Python现在已成为美国名校中最流行的编程入门语
言。ANSI / ISO C + +标准委员会的创始成员Bruce Eckel曾说过：“life is short，You need
Python。”一度成为Python的宣传语，这正是说明Python有着简单、开发速度快、节省时间
和精力的特点。另外，Python 是开放的，也是开源的，有很多善良可爱的开发者在第三方库
贡献了自己的源代码，许多功能都可以直接拿来使用，无须重新开发，这也是 Python 的强大
之处。
图1.1 IEEE Spectrum 给出的编程语言排行榜
5
Python自动化运维快速入门
图1.2 在美国名校编程语言的流行情况
下面摘抄一段Python在维基百科中的介绍。
Python 是完全面向对象的语言。函数、模块、数字、字符串都是对象，并且完全支持继
承、重载、派生、多继承，有益于增强源代码的复用性。由于 Python 支持重载运算符，因此
Python也支持泛型设计。相对于Lisp这种传统的函数式编程语言，Python 对函数式设计只提
供了有限的支持。有两个标准库（functools, itertools）提供了Haskell和Standard ML中久经考
验的函数式程序设计工具。
虽然Python被粗略地分类为“脚本语言”（Script Language），但实际上一些大规模软件
开发项目，如Zope、Mnet及BitTorrent及Google也广泛地使用它。Python的支持者喜欢称它
为一种高级动态编程语言，原因是“脚本语言”泛指仅作简单程序设计任务的语言，如 shell
script、VBScript等只能处理简单任务的编程语言，并不能与 Python相提并论。
Python 本身被设计为可扩充的，并非所有的特性和功能都集成到语言核心。Python 提供
了丰富的 API 和工具，以便程序员能够轻松地使用 C、C++、Cython 来编写扩充模块。由于
Python编译器本身也可以被集成到其他需要脚本语言的程序内，因此很多人还把Python作为
一种“胶水语言”（Glue Language）使用，即使用Python将其他语言编写的程序进行集成和
封装。
在Google内部的很多项目中，比如Google Engine使用 C++编写性能要求极高的部分，
然后使用Python或Java/Go调用相应的模块。《Python技术手册》的作者马特利（Alex Martelli）
说：“这很难讲，不过在2004 年，Python已在Google内部使用，Google招募了许多Python
高手，但在这之前就已决定使用Python。他们的目的是尽量使用Python，在不得已时改用C++；
在操控硬件的场合使用C++，在快速开发时使用Python。”
一些技术术语不理解没关系，Python是许多大公司都在使用的语言，如Google、NASA、
知乎、豆瓣等，学习Python会有很大的用武之地，完全不用担心它的未来。
Python 的设计哲学是优雅、明确、简单。提倡最好使用一种方法做一件事，Python 的开
发者一般会拒绝花哨的语法，选择明确而很少有歧义的语法。下面再摘一段Python格言：
Beautiful is better than ugly.
Explicit is better than implicit.
6
第1章 自动化运维与Python
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
上面的格言来自Python官方，也有中文版本，如下：
优美胜于丑陋，明晰胜于隐晦，
简单胜于复杂，复杂胜于繁芜，
扁平胜于嵌套，稀疏胜于密集，
可读性很重要。
虽然实用性比纯粹性更重要，
但特例并不足以把规则破坏掉。
错误状态永远不要忽略，
除非你明确地保持沉默，
直面多义，永不臆断。
最佳的途径只有一条，然而他并非显而易见———谁叫你不是荷兰人？
置之不理或许会比慌忙应对要好，
然而现在动手远比束手无策更好。
难以解读的实现不会是个好主意，
容易解读的或许才是。
名字空间就是个“顶呱呱”的好主意。
让我们想出更多的好主意！
Python如此优秀，让我们一起来学习吧。
7
Python自动化运维快速入门
1.2
初识 Python
如果读者已经了解并正在使用 Python，则可以略读本章；如果是第一次听说 Python，那
也完全不必担心，Python 是一门优雅而易学的编程语言，即使零基础学 Python，也能丝毫不
输于科班出身的程序员。
Python 是一种面向对象的解释型计算机程序设计语言，由荷兰人 Guido van Rossum 于
1989年发明，第一个公开发行版发行于1991年。面向对象如果不理解可先不去理会，在实际
使用的过程中去理解它，解释型语言表明Python不需要预先编译成字节码而是由Python虚拟
机直接执行，当然Python也完全可以先编译成字节码来适当提高装载速度。总之，Python是
一种高级编程语言，其他高级语言能实现的功能，Python都能方便、快捷地实现。
Python目前有两个版本：Python 2和Python 3。至于选择哪个版本，完全不用纠结，建议
新手选择Python 3.x，因为Python 3是未来，Python 2 将会在2020年终止支持（还可以用，
但不更新了）；高手也尽可能选择Python 3，Python 3与Python 2相比有更多的优化。Python
2与Python 3之间区别不是很大，而且有脚本可以直接将Python 2的代码转成Python 3。
1.3
Python 环境搭建
Python编写的源代码要想得到运行的结果，就需要安装解释Python源代码的软件，由其
翻译成机器语言并提交操作系统运行，我们通常称之为Python解释器或Python编程环境。
我们从 Python 官方网站 https://www.python.org/的下载页面了解到目前有两个版本，即
Python2.7.x 与 Python3.x。作为初学者，我们要学就学最新的 Python3.x，目前绝大多数
Python2.7.x 的第三方库已经移植到 Python3.x 中了，如果遇到个别仅有 Python2.7.x 支持的，
我们也可以对代码稍做修改在 Python3.x 下运行。本书以 Python3.6.5 为例，讲解在 Windows
系统和Linux系统下安装Python的详细步骤。
1.3.1 Windows 系统下的 Python 安装
在Windows系统下安装Python非常简单，具体步骤如下。
（1）下载。在 Python 官方网站 https://www.python.org/中下载 Windows 安装包。如果
Windows操作系统是64位，对应的下载链接是https://www.python.org/ftp/python/3.6.5/python-
3.6.5-amd64.exe；如果Windows操作系统是32位，对应的下载链接是https://www.python.org/
ftp/python/3.6.5/python-3.6.5.exe。
（2）双击下载文件并进行安装，能选择如图 1.3 所示，建议都选择，无非就是多占用一
点磁盘空间，对电脑性能没有任何影响。单击Next按钮后如图1.4所示，将Python添加至环
境变量中，方便在命令行中快速启动Python，再单击Install按钮，等待安装完毕，如图1.5所
8
第1章 自动化运维与Python
示。其中disable path length limit表示禁用路径长度限制，是设置环境变量Path的，可忽略，
单击Close按钮结束安装。
图1.3 选择功能
图1.4 将Python添加至环境变量
图1.5 安装成功
9
Python自动化运维快速入门
（3）验证。在cmd命令窗口输入python，并在>>>提示符后输入print(“hello python”)，
如果打印出“hello python”信息，就表明安装成功，输入exit()可退出Python解释器环境，在
cmd命令窗口输入where python可查看python可执行文件所在的路径，如图1.6所示。
图1.6 验证安装是否成功
（4）创建虚拟环境。前三步已经把 Python 环境安装好了，但是在实际开发 Python 应用
程序时可能会遇到这种情形：项目A依赖Django1.10.1，而项目B依赖Django2.0。如果不创
建虚拟环境的话，运行项目A时安装Django1.10.1，运行项目B时先卸载Django1.10.1，再安
装Django2.0，然后运行项目A时，再次重复操作，这样就会显得很笨拙。Python已经为您想
好了解决方案——创建虚拟环境，每个项目一个独立的环境，这样井水不犯河水，合平共处，
互不干扰。
Windows创建虚拟环境的方法：在cmd窗口中顺序执行以下命令（#后面表示注释，执行
命令时要去掉）。
pip install virtualenv #安装virtualenv虚拟环境工具
python -m pip install --upgrade pip #升级pip
virtualenv projectA_env #创建projectA的虚拟环境
.\projectA_env\Scripts\activate.bat #启动projectA的虚拟环境，启动成功后命令提
示符有一个后缀（projectA_env）。
where python #查看可执行文件python的位置，第1个为当前运行的，
也可以直接使用绝对路径来运行projectA
deactivate #退出projectA的虚拟环境
运行结果如图1.7所示。
图1.7 创建虚拟环境
10
第1章 自动化运维与Python
virtualenv是如何创建独立的Python运行环境的呢？原理很简单，就是把系统Python复制
一份到虚拟环境。使用命令.\projectA_env\bin\activate.bat进入一个projectA虚拟环境时，
virtualenv会修改相关环境变量，让命令python和pip均指向当前的projectA虚拟环境。
1.3.2 Linux 系统下的 Python 安装
大多数 Linux 系统已经预装了 Python，直接在终端窗口输入 python 即可查看版本（见图
1.8）。以Ubuntu16.04为例，运行python命令。
图1.8 Ubuntu已预装了Python2.7.12
Ubuntu16.04已经预装了Python3.5.2，如图1.9所示。
图1.9 Ubuntu已预装Python3.5.2
对比图1.8和图1.9可以看出：Python 2中print是一条语句，Python 3中print是一个函数。
如果想省事，则可以直接使用Python3.5来学习；如果喜欢使用自己安装的Python，则可
以按以下步骤进行操作。
下载源代码包：wget http://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz，如图1.10
所示。如果下载其他版本，直接把版本号修改一下即可。
图1.10 下载Python3.6.5
11
Python自动化运维快速入门
解压源代码包。
tar -zxvf Python-3.6.5.tgz
编译与安装。
cd Python-3.6.5 #进入解压后的目录
./configure --prefix=/home/aaron/local/python3.6.5 #指定安装目录，一般为/usr/local，
这里改成home下的目录
make&&make install #编译并安装
如果提示缺少相关的包，如zlib等，请下载后再编译安装。
验证：输入/home/aaron/local/python3.6.5/bin/python3，并打印“hello,python3! ”，如
图1.11所示。
图1.11 Linux编译安装Python后验证
这样带路径的输入太长，有两种方法可以解决输入麻烦的问题。第一种是将 Python3.6.5
的路径/home/aaron/local/python3.6.5/bin添加到环境变量中。在terminal中顺序执行以下命令，
注意#后面的内容是注释，结果如图1.12所示。
cd ~ #切换到主目录
echo "#my python 3.6.5" >>.profile #在profile末尾添加注释
echo "export PATH=\"$PATH:$HOME/local/python3.6.5/bin\"" >>.profile #在profile
末尾添加环境变量/home/aaron/local/python3.6.5/bin，下次启动自动生效
source .profile #使环境变量立即生效
python3.6 #进入Python交互式环境
which python3.6 #查看是可执行文件Python3.6所在的位置
图1.12 为Python添加环境变量
第二种是建立软链接。在terminal中执行：
sudo ln -s /home/aaron/local/python3.6.5/bin/python3.6 /usr/bin/python3.6#建立