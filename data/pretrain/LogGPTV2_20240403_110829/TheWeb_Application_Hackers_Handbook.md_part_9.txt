Figure 2-7: Poorly protected application logs containing sensitive information
submitted by other users
cc0022..iinndddd 3322 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 33
Chapter 2 n Core Defense Mechanisms 33
Alerting Administrators
Audit logs enable an application’s owners to retrospectively investigate intrusion
attempts and, if possible, take legal action against the perpetrator. However, in
many situations it is desirable to take much more immediate action, in real time,
in response to attempted attacks. For example, administrators may block the IP
address or user account an attacker is using. In extreme cases, they may even
take the application offl ine while investigating the attack and taking remedial
action. Even if a successful intrusion has already occurred, its practical effects
may be mitigated if defensive action is taken at an early stage.
In most situations, alerting mechanisms must balance the confl icting objec-
tives of reporting each genuine attack reliably and of not generating so many
alerts that these come to be ignored. A well-designed alerting mechanism can
use a combination of factors to diagnose that a determined attack is under way
and can aggregate related events into a single alert where possible. Anomalous
events monitored by alerting mechanisms often include the following:
n Usage anomalies, such as large numbers of requests being received from
a single IP address or user, indicating a scripted attack
n Business anomalies, such as an unusual number of funds transfers being
made to or from a single bank account
n Requests containing known attack strings
n Requests where data that is hidden from ordinary users has been modifi ed
Some of these functions can be provided reasonably well by off-the-shelf
application fi rewalls and intrusion detection products. These typically use a
mixture of signature- and anomaly-based rules to identify malicious use of
the application and may reactively block malicious requests as well as issue
alerts to administrators. These products can form a valuable layer of defense
protecting a web application, particularly in the case of existing applications
known to contain problems but where resources to fi x these are not immedi-
ately available. However, their effectiveness usually is limited by the fact that
each web application is different, so the rules employed are inevitably generic
to some extent. Web application fi rewalls usually are good at identifying the
most obvious attacks, where an attacker submits standard attack strings in
each request parameter. However, many attacks are more subtle than this. For
example, perhaps they modify the account number in a hidden fi eld to access
another user’s data, or submit requests out of sequence to exploit defects in the
application’s logic. In these cases, a request submitted by an attacker may be
cc0022..iinndddd 3333 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 34
34 Chapter 2 n Core Defense Mechanisms
identical to that submitted by a benign user. What makes it malicious are the
circumstances under which it is made.
In any security-critical application, the most effective way to implement real-
time alerting is to integrate this tightly with the application’s input validation
mechanisms and other controls. For example, if a cookie is expected to have
one of a specifi c set of values, any violation of this indicates that its value has
been modifi ed in a way that is not possible for ordinary users of the application.
Similarly, if a user changes an account number in a hidden fi eld to identify a
different user’s account, this strongly indicates malicious intent. The application
should already be checking for these attacks as part of its primary defenses,
and these protective mechanisms can easily hook into the application’s alert-
ing mechanism to provide fully customized indicators of malicious activity.
Because these checks have been tailored to the application’s actual logic, with
a fi ne-grained knowledge of how ordinary users should be behaving, they
are much less prone to false positives than any off-the-shelf solution, however
confi gurable or easy-to-learn that solution may be.
Reacting to Attacks
In addition to alerting administrators, many security-critical applications con-
tain built-in mechanisms to react defensively to users who are identifi ed as
potentially malicious.
Because each application is different, most real-world attacks require an
attacker to probe systematically for vulnerabilities, submitting numerous requests
containing crafted input designed to indicate the presence of various common
vulnerabilities. Effective input validation mechanisms will identify many of
these requests as potentially malicious and block the input from having any
undesirable effect on the application. However, it is sensible to assume that
some bypasses to these fi lters exist and that the application does contain some
actual vulnerabilities waiting to be discovered and exploited. At some point, an
attacker working systematically is likely to discover these defects.
For this reason, some applications take automatic reactive measures to frus-
trate the activities of an attacker who is working in this way. For example, they
might respond increasingly slowly to the attacker’s requests or terminate the
attacker’s session, requiring him to log in or perform other steps before con-
tinuing the attack. Although these measures will not defeat the most patient
and determined attacker, they will deter many more casual attackers and will
buy additional time for administrators to monitor the situation and take more
drastic action if desired.
cc0022..iinndddd 3344 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 35
Chapter 2 n Core Defense Mechanisms 35
Reacting to apparent attackers is not, of course, a substitute for fi xing any
vulnerabilities that exist within the application. However, in the real world, even
the most diligent efforts to purge an application of security fl aws may leave
some exploitable defects. Placing further obstacles in the way of an attacker
is an effective defense-in-depth measure that reduces the likelihood that any
residual vulnerabilities will be found and exploited.
Managing the Application
Any useful application needs to be managed and administered. This facility
often forms a key part of the application’s security mechanisms, providing a
way for administrators to manage user accounts and roles, access monitoring
and audit functions, perform diagnostic tasks, and confi gure aspects of the
application’s functionality.
In many applications, administrative functions are implemented within
the application itself, accessible through the same web interface as its core
nonsecurity functionality, as shown in Figure 2-8. Where this is the case, the
administrative mechanism represents a critical part of the application’s attack
surface. Its primary attraction for an attacker is as a vehicle for privilege esca-
lation. For example:
n Weaknesses in the authentication mechanism may enable an attacker
to gain administrative access, effectively compromising the entire
application.
n Many applications do not implement effective access control of some of
their administrative functions. An attacker may fi nd a means of creating
a new user account with powerful privileges.
n Administrative functionality often involves displaying data that originated
from ordinary users. Any cross-site scripting fl aws within the administra-
tive interface can lead to compromise of a user session that is guaranteed
to have powerful privileges.
n Administrative functionality is often subjected to less rigorous security
testing, because its users are deemed to be trusted, or because penetration
testers are given access to only low-privileged accounts. Furthermore, the
functionality often needs to perform inherently dangerous operations,
involving access to fi les on disk or operating system commands. If an
attacker can compromise the administrative function, he can often lever-
age it to take control of the entire server.
cc0022..iinndddd 3355 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 36
36 Chapter 2 n Core Defense Mechanisms
Figure 2-8: An administrative interface within a web application
Summary
Despite their extensive differences, virtually all web applications employ the
same core security mechanisms in some shape or form. These mechanisms rep-
resent an application’s primary defenses against malicious users and therefore
also comprise the bulk of the application’s attack surface. The vulnerabilities
we will examine later in this book mainly arise from defects within these core
mechanisms.
Of these components, the mechanisms for handling user access and user input
are the most important and should receive most of your attention when you are
targeting an application. Defects in these mechanisms often lead to complete
compromise of the application, enabling you to access data belonging to other
users, perform unauthorized actions, and inject arbitrary code and commands.
Questions
Answers can be found at http://mdsec.net/wahh.
1. Why are an application’s mechanisms for handling user access only as
strong as the weakest of these components?
2. What is the difference between a session and a session token?
3. Why is it not always possible to use a whitelist-based approach to input
validation?
cc0022..iinndddd 3366 88//1199//22001111 1122::0022::4433 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 37
Chapter 2 n Core Defense Mechanisms 37
4. You are attacking an application that implements an administrative func-
tion. You do not have any valid credentials to use the function. Why should
you nevertheless pay close attention to it?
5. An input validation mechanism designed to block cross-site scripting
attacks performs the following sequence of steps on an item of input:
1. Strip any  expressions that appear.
2. Truncate the input to 50 characters.
3. Remove any quotation marks within the input.
4. URL-decode the input.
5. If any items were deleted, return to step 1.
Can you bypass this validation mechanism to smuggle the following data
past it?
“>
cc0022..iinndddd 3377 88//1199//22001111 1122::0022::4444 PPMM
Stuttard c02.indd V3 - 07/22/2011 Page 38
cc0022..iinndddd 3388 88//1199//22001111 1122::0022::4444 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 39
CHAPTER
3
Web Application Technologies
Web applications employ a myriad of technologies to implement their function-
ality. This chapter is a short primer on the key technologies that you are likely
to encounter when attacking web applications. We will examine the HTTP
protocol, the technologies commonly employed on the server and client sides,
and the encoding schemes used to represent data in different situations. These
technologies are in general easy to understand, and a grasp of their relevant
features is key to performing effective attacks against web applications.
If you are already familiar with the key technologies used in web applications,
you can skim through this chapter to confi rm that it offers you nothing new. If
you are still learning how web applications work, you should read this chapter
before continuing to the later chapters on specifi c vulnerabilities. For further
reading on many of the areas covered, we recommend HTTP: The Defi nitive
Guide by David Gourley and Brian Totty (O’Reilly, 2002), and also the website
of the World Wide Web Consortium at www.w3.org.
The HTTP Protocol
Hypertext transfer protocol (HTTP) is the core communications protocol used to
access the World Wide Web and is used by all of today’s web applications. It is
a simple protocol that was originally developed for retrieving static text-based
resources. It has since been extended and leveraged in various ways to enable
it to support the complex distributed applications that are now commonplace.
39
cc0033..iinndddd 3399 88//1199//22001111 1122::0033::4433 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 40
40 Chapter 3 n Web Application Technologies
HTTP uses a message-based model in which a client sends a request mes-
sage and the server returns a response message. The protocol is essentially
connectionless: although HTTP uses the stateful TCP protocol as its transport
mechanism, each exchange of request and response is an autonomous transac-
tion and may use a different TCP connection.
HTTP Requests
All HTTP messages (requests and responses) consist of one or more headers,
each on a separate line, followed by a mandatory blank line, followed by an
optional message body. A typical HTTP request is as follows:
GET /auth/488/YourDetails.ashx?uid=129 HTTP/1.1
Accept: application/x-ms-application, image/jpeg, application/xaml+xml,
image/gif, image/pjpeg, application/x-ms-xbap, application/x-shockwave-
flash, */*
Referer: https://mdsec.net/auth/488/Home.ashx
Accept-Language: en-GB
User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64;
Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR
3.0.30729; .NET4.0C; InfoPath.3; .NET4.0E; FDM; .NET CLR 1.1.4322)
Accept-Encoding: gzip, deflate
Host: mdsec.net
Connection: Keep-Alive
Cookie: SessionId=5B70C71F3FD4968935CDB6682E545476
The fi rst line of every HTTP request consists of three items, separated by spaces:
n A verb indicating the HTTP method. The most commonly used method
isGET, whose function is to retrieve a resource from the web server. GET
requests do not have a message body, so no further data follows the blank
line after the message headers.
n The requested URL. The URL typically functions as a name for the resource
being requested, together with an optional query string containing param-
eters that the client is passing to that resource. The query string is indicated
by the ? character in the URL. The example contains a single parameter
with the name uid and the value 129.
n The HTTP version being used. The only HTTP versions in common use
on the Internet are 1.0 and 1.1, and most browsers use version 1.1 by
default. There are a few differences between the specifi cations of these
two versions; however, the only difference you are likely to encounter
when attacking web applications is that in version 1.1 the Host request
header is mandatory.
cc0033..iinndddd 4400 88//1199//22001111 1122::0033::4433 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 41
Chapter 3 n Web Application Technologies 41
Here are some other points of interest in the sample request:
n TheReferer header is used to indicate the URL from which the request
originated (for example, because the user clicked a link on that page).
Note that this header was misspelled in the original HTTP specifi cation,
and the misspelled version has been retained ever since.
n TheUser-Agent header is used to provide information about the browser
or other client software that generated the request. Note that most brows-
ers include the Mozilla prefi x for historical reasons. This was the User-
Agent string used by the originally dominant Netscape browser, and other
browsers wanted to assert to websites that they were compatible with this
standard. As with many quirks from computing history, it has become so
established that it is still retained, even on the current version of Internet
Explorer, which made the request shown in the example.
n The Host header specifi es the hostname that appeared in the full URL
being accessed. This is necessary when multiple websites are hosted on
the same server, because the URL sent in the fi rst line of the request usu-
ally does not contain a hostname. (See Chapter 17 for more information
about virtually hosted websites.)
n The Cookie header is used to submit additional parameters that the server
has issued to the client (described in more detail later in this chapter).
HTTP Responses
A typical HTTP response is as follows:
HTTP/1.1 200 OK
Date: Tue, 19 Apr 2011 09:23:32 GMT
Server: Microsoft-IIS/6.0
X-Powered-By: ASP.NET
Set-Cookie: tracking=tI8rk7joMx44S2Uu85nSWc
X-AspNet-Version: 2.0.50727
Cache-Control: no-cache
Pragma: no-cache
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 1067
Your details
...
cc0033..iinndddd 4411 88//1199//22001111 1122::0033::4433 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 42
42 Chapter 3 n Web Application Technologies
The fi rst line of every HTTP response consists of three items, separated by
spaces:
n The HTTP version being used.
n A numeric status code indicating the result of the request. 200 is the most
common status code; it means that the request was successful and that
the requested resource is being returned.
n A textual “reason phrase” further describing the status of the response. This
can have any value and is not used for any purpose by current browsers.
Here are some other points of interest in the response:
n TheServer header contains a banner indicating the web server software
being used, and sometimes other details such as installed modules and
the server operating system. The information contained may or may not
be accurate.
n TheSet-Cookie header issues the browser a further cookie; this is sub-
mitted back in the Cookie header of subsequent requests to this server.
n ThePragma header instructs the browser not to store the response in its
cache. The Expires header indicates that the response content expired
in the past and therefore should not be cached. These instructions are
frequently issued when dynamic content is being returned to ensure
that browsers obtain a fresh version of this content on subsequent
occasions.
n Almost all HTTP responses contain a message body following the blank
line after the headers. The Content-Type header indicates that the body
of this message contains an HTML document.
n The Content-Length header indicates the length of the message body in