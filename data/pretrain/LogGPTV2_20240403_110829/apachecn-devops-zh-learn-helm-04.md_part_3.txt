{{ $appName := .Release.Name }}
{{- with .Values.application.configuration }}
My application is called {{ $appName }}
{{- end }}
```
虽然这是解决这个问题的一种可能的方法，但是最好使用美元符号来表示全局范围，因为它需要配置的行数较少，并且随着图表复杂性的增加，更容易阅读。
流量控制和变量是允许动态生成资源的强大概念。除了进行流程控制，图表开发人员还可以利用函数和管道来辅助资源渲染和格式化 ting。
### 具有功能和管道的复杂处理
Go 提供了函数和管道的概念，支持在模板中进行复杂的数据处理。
一个 Go 模板函数类似于你可能在其他语言和构造中遇到的其他函数。函数包含设计用于消费某些输入并基于所提供的输入提供输出的逻辑。
对于 Go 模板，使用以下语法调用函数:
```
functionName arg1 arg2 . . .
```
常用的一个围棋功能是`indent`功能。由于 YAML 是一种对空格敏感的标记语言，这个函数用于缩进指定数量的字符串，以确保字符串的格式正确。`indent`函数将缩进的空格数作为输入，以及应该缩进的字符串。
以下模板说明了这一点:
```
data:
  application-config: |-
{{ indent 4 .Values.config }}
```
本示例将包含在`config`值中的字符串缩进`4`个空格，以确保字符串在`application-config` YAML 键下正确缩进。
Helm 提供的另一个构造是管道。管道是从 **UNIX** 借用的一个概念，其中一个命令的输出被作为不同命令的输入:
```
cat file.txt | grep helm
```
前面的示例显示了一个 UNIX 管道。管道左侧(`|`)是第一个命令，右侧是第二个命令。第一个命令`cat file.txt`打印名为`file.txt`的文件的内容，并将其作为输入传递给`grep helm`命令，该命令为单词`helm`过滤第一个命令的输出。
Go 管道的工作方式类似。这可以通过`indent`功能再次证明:
```
data:
  application-config: |-
{{ .Values.config | indent 4 }}
```
这也将使`config`值缩进 4 个空格。管道最好用于将多个命令链接在一起。第三个命令可以添加到管道中，称为`quote`，在最终的模板化产品周围加上引号:
```
data:
  application-config: |-
{{ .Values.config | indent 4 | quote }}
```
因为这个写的是流水线，读起来简单自然。
有许多不同的围棋模板函数可以在一个 Helm 图表中使用。这些功能可以在 https://golang.org/pkg/text/template/#hdr-Functions 的 Go 文档和 T2 的 Sprig 模板中找到。io/sprig/图表开发过程中可能用到的一些常用围棋模板功能如下:
*   `date`:设置日期格式
*   `default`:设置一个默认值
*   `fail`:使模板渲染失败
*   `include`:执行一个 Go 模板并返回结果
*   `nindent`:类似缩进，只是在缩进前加一个新行
*   `indent`:将文本缩进一定数量的空格
*   `now`:至显示当前日期/时间
*   `quote`:用引号将串括起来
*   `required`:至需要用户输入
*   `splitList`:将一个字符串拆分成一个字符串列表
*   `toYaml`:将字符串转换为 YAML 格式
Go 模板语言还包含以下布尔运算符，可用于`if`操作以进一步控制 YAML 资源的生成:
*   `and`
*   `or`
*   `not`
*   `eq`(简称为相等)
*   `ne`(短的表示不相等)
*   `lt`(短为小于)
*   `le`(短表示小于或等于)
*   `gt`(短的表示大于)
*   `ge`(短表示大于或等于)
除了生成 Kubernetes 资源之外，Go 模板还可以用来创建可以在具有重复模板的 YAML 资源中重用的函数。这可以通过创建命名模板来实现，如下一节所述。
### 启用命名模板的代码重用
创建模板文件时，在 Kubernetes 资源中可能有样板或重复的 YAML 块。
这方面的一个例子是资源的标签，可以指定如下:
```
labels:
  'app.kubernetes.io/instance': {{ .Release.Name }}
  'app.kubernetes.io/managed-by': {{ .Release.Service }}
```
为了保持一致性，这些标签中的每一个都可以添加到 Helm 图表中的每个资源中。如果图表包含许多不同的 Kubernetes 资源，在每个文件中包含所需的标签可能会很麻烦，尤其是如果需要修改标签或者将来需要向每个资源添加新标签。
Helm 提供了一种称为命名模板的构造，它允许图表开发人员创建可重复使用的模板，这些模板可用于减少样板文件。命名模板在`templates/`目录下定义，是以下划线开头，以`.tpl`文件扩展名结尾的文件。许多图表是用一个名为`_helpers.tpl`的文件创建的，该文件包含命名模板，尽管该文件不需要被称为`helpers`。
要在`tpl`文件中创建命名模板，开发人员可以利用`define`动作。以下示例创建一个命名模板，可用于封装资源标签:
```
{{- define 'mychart.labels' }}
labels:
  'app.kubernetes.io/instance': {{ .Release.Name }}
  'app.kubernetes.io/managed-by': {{ .Release.Service }}
{{- end }}
```
`define`动作以模板名称作为参数。在前面的例子中，模板名叫做`mychart.labels`。命名模板的通用惯例是`$CHART_NAME.$TEMPLATE_NAME`，其中`$CHART_NAME`是 Helm 图表的名称，`$TEMPLATE_NAME`是描述模板用途的简短描述性名称。
`mychart.labels`名称意味着模板是`mychart` Helm 图表的原生模板，并将为其应用的资源生成标签。
要在 Kubernetes YAML 模板中使用命名模板，可以使用`include`函数，该函数有以下用法:
```
include [TEMPLATE_NAME] [SCOPE]
```
`TEMPLATE_NAME`参数是应该处理的命名模板的名称。`SCOPE`参数是应该处理的值和内置对象的范围。大多数情况下，此参数是一个点(`.`)来表示当前顶级范围，但是如果命名模板引用当前范围之外的值，则应使用美元符号(`$`)符号。
以下示例演示了如何使用`include`函数处理命名模板:
```
metadata:
  name: {{ .Release.Name }}
{{- include 'mychart.labels' . | indent 2 }}
```
本示例首先将资源的名称设置为版本的名称。然后它使用`include`函数来处理标签，并按照管道的声明将每一行缩进两个空格。处理完成后，一个名为`template-demonstration`的版本中的资源可能会显示如下:
```
metadata:
  name: template-demonstration
  labels:
    'app.kubernetes.io/instance': template-demonstration
    'app.kubernetes.io/managed-by': Helm
```
Helm 还提供了一个`template`动作，也可以展开命名模板。这个动作的用法与`include`相同，但是有一个主要的限制——它不能在管道中使用来提供额外的格式化和处理。`template`操作用于简单地内联显示数据。由于这个限制，图表开发人员应该在`template`操作上使用`include`功能，因为`include`具有与`template`相同的功能，但也提供了管道处理的额外好处。
在下一节中，我们将学习如何使用命名模板来减少跨多个不同图表的样板 ac 。
### 图书馆图表
Helm 图表在`Chart.yaml`文件中定义了一个`type`字段，该字段被设置为`application`或`library`。应用图表用于将完整的应用部署到 Kubernetes。这是最常见的图表类型，也是默认设置。但是，图表也可以定义为库图表。这种类型的图表不是用来部署应用的，而是用来提供可以跨多个不同图表使用的命名模板。这个用例的一个例子是前面章节中定义的`labels`例子。开发人员可以维护多个不同的图表，这些图表的资源具有相同的标签。开发人员无需在每个图表的`_helpers.tpl`文件中定义相同的命名模板，而是可以将提供用于生成资源标签的命名模板的库图表声明为依赖项。
虽然 Helm 最常用于创建传统的 Kubernetes 资源，但它也可以创建**自定义资源** ( **CRs** )，我们将在下一节对此进行解释。
### 模板化 CRs
**CRs** 用于创建非 Kubernetes API 本地的资源。您可能希望使用此功能来增强 Kubernetes 提供的功能。CRs 可以使用 Helm 模板(如本地 Kubernetes 资源)创建，但首先必须有一个定义 CR 的**自定义资源定义(CRD)** 。如果在创建 CR 之前 CRD 不存在，安装将失败。
Helm 图表可以包括一个`crds/`文件夹，该文件夹由模板安装前必须显示的 CRD 组成。这里显示了一个示例`crds/`文件夹:
```
crds/
  my-custom-resource-crd.yaml
```
文件`my-custom-resource-crd.yaml`可能有以下内容:
```
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: my-custom-resources.learnhelm.io
spec:
  group: learnhelm.io
  names:
    kind: MyCustomResource
    listKind: MyCustomResourceList
    plural: MyCustomResources
    singular: MyCustomResource
    scope: Namespaced
    version: v1
```
然后，模板/目录可以包含 MyCustomResource 资源的一个实例。
```
templates/
  my-custom-resource.yaml
```
像这样的文件结构将确保在`templates/`目录下定义的 CR 之前安装`MyCustomResource` CRD。
重要提示:
此功能要求用户是群集管理员，因为创建 CRD 需要升级权限。如果您不是集群管理员，最好让管理员提前创建您的 CRD。如果您这样做了，`crds/`文件夹将不需要包含在您的图表中，因为 CRDs 已经存在于集群中。
到目前为止，我们已经详细介绍了 Helm 模板。总而言之，Helm 模板是 Helm 图表的“大脑”，用于生成 Kubernetes 资源。我们将在 [*第 5 章*](05.html#_idTextAnchor265)*构建你的第一个 Helm 图表*中获得编写掌舵模板的实践经验，以及本章中讨论的其他主题。
现在，让我们用一个与图表模板同等重要的话题继续我们对 Helm 图表基础的讨论——文件`Chart.yaml`。
# 理解图表定义
`Chart.yaml`文件，也称为图表定义，是一个声明关于一个 Helm 图表的不同元数据的资源。此文件是必需的，如果它不包含在图表的文件结构中，您将收到以下错误:
```
Error: validation: chart.metadata is required
```
在 [*第三章*](03.html#_idTextAnchor147)*安装你的第一张 Helm 图表*中，我们通过运行`helm show chart`命令探索了**碧波的 WordPress 图表**的图表定义。通过再次运行此命令来调用此图表定义。我们将假设自从在 [*第 3 章*](03.html#_idTextAnchor147)*安装您的第一个舵手图*中执行该任务以来，已经添加了 Bitnami 图表存储库:
```
$ helm show chart bitnami/wordpress --version 8.1.0
```
下面列出了 wordpress 图表的图表定义。
![Figure 4.1 – The output of the Bitnami chart repository ](img/Figure_4.1.jpg)