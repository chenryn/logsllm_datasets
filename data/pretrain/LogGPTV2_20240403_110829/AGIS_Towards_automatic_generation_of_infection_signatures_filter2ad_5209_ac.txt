### Program that Logs Keystrokes

This program can log keystrokes and monitor various activities, including instant messaging, web browsing, and application usage. Symantec rates its risk impact as high (http://www.symantec.com/security_response/writeup.jsp?docid=2006-020913-4035-99).

### Infection Process

Within the AGIS environment, the malware, known as KidLogger, deposited and executed a temporary executable named `is-i486L.trmp`. This executable then dropped several files, including the `Hooks.dll` and `MainWnd.exe` executables.

The `is-i486L.trmp` file modified the Run registry key to point to `MainWnd.exe`. After activation, `MainWnd.exe` further modified the RunService registry key to point to itself. The `NtUserSetWindowsHookEx` function was called with parameters indicating that the hook was set for the keyboard, and the callback function was located within `Hooks.dll`.

`Hooks.dll` responded to keystrokes by making multiple calls to `NtWriteFile`. Our static analyzer scanned `Hooks.dll` and found an execution path from the entry of the callback function to the API call leading to `NtWriteFile`. Additionally, the calls observed before `NtWriteFile` also appeared on this path, satisfying the `ExistPath` condition and triggering the keylogger rule (as shown in Table 1). This led to the classification of `MainWnd.exe`, `Hooks.dll`, and the KidLogger installer as malware.

### Policy False Positives

We tested both security policies on 19 common applications, including BitTorrent, web browsers, Microsoft Office, Google Desktop, and others. Our prototype did not classify any of these applications as infected. Google Desktop was found to hook the keyboard, but it did not write to files or make network connections. Other applications, such as Outlook, made connections to mail servers but did not read numerous files, as a mass-mailing worm would. The legitimate application making the most calls to `NtReadFile` from a unique call site was PowerPoint, which accessed 90 files. In contrast, MyDoom read 588 files in our experiment.

### Signature Generation

AGIS automatically extracted the chops for all the infections we tested. We use MyDoom.D and KidLogger as examples to explain our results.

#### MyDoom.D

The kernel monitor reported five malicious calls (Table 2) from the main executable of MyDoom, renamed as `TaskMon.exe`. Our static analyzer extracted three chops: one for setting the registry, one for scanning the file system, and one for sending emails. Figure 2 illustrates the execution path for scanning, highlighting the instructions on the chop. From the figure, we can identify the loop for searching directories, which includes API calls `FindFirstFileA` and `FindNextFileA`, and an embedded loop for reading files using `CreateFile` to open and continuously read from a file. The chops automatically extracted from other MyDoom and NetSky worms have similar structures.

#### Spyware.KidLogger

We detected five malicious calls from three executables dropped by KidLogger (`KidLogger.exe`, `MainWnd.exe`, and `Hooks.dll`). These calls are listed in Table 3. Our static analyzer extracted chops from the recorded calls. Figure 3 demonstrates the execution paths and chops for `MainWnd.exe` and `Hooks.dll`. `MainWnd.exe` hooked a callback function in `Hooks.dll` to intercept keystrokes. The chop of `Hooks.dll` preserved the important instructions of the keylogger, which first acquired keystrokes (`GetKeyNameTextA`) and then created or opened a log file (`CreateFileA`) to save them (`SetFilePointer` and `WriteFile`).

### Signature False Positives

Two types of signatures were generated from the chops: regular-expression signatures and vanilla malware directly built from the chops. To evaluate their false positive rates, we collected 1,378 PE files from the `C:\ProgramFiles` directory on Windows XP and used them as a test dataset.

#### Regular-Expression Signatures

The regular-expression signature is a conjunction of byte strings closest to the site of a malicious call on its chop. The selection of the call affects the quality of the signature, and the length of the signature also plays a role. Longer signatures are more specific and introduce fewer false positives. Our experiments aimed to study the relation between these factors and the false positive rate of our signatures. We developed a simple scanner to extract the executable section of a PE file and attempt to find the signature.

Figure 4 shows the experiment results. The signatures constructed from the API functions `RegSetValueExA` and `send` had the lowest false positive rates, possibly because these functions are less frequently used than others like `CreateProcessA`. False positives decreased with the increase in signature length, and they were eliminated after the length reached 28 bytes.

#### Vanilla Malware

To evaluate the quality of a vanilla-malware signature, we need to show that the instruction template (i.e., the chop) does not appear in a legitimate program. We developed a static-analysis-based scanner that checks if a program imports all the API functions on the template chop and attempts to find an execution path with all these functions. If both conditions are satisfied, the scanner further chops the path and compares the sequence of the operators of the instructions on the template chop with those on the chop of the normal program. For example, if the template instructions are `push eax; add eax, ebx; mov ebx, 10;`, the sequence we look for in a normal program is `push add move`.

In our experiment, we scanned all 1,378 files, and no false positives were reported by our scanners.

### Resilience to Metamorphism

AGIS's ability to withstand metamorphic malware was evaluated using a mutation engine based on RPME (http://vx.netlux.org/vx.php?id=erlO), which performs junk code injection, instruction transposition, and instruction replacement. We ran the mutation engine on the execution paths used to extract chops.

RPME performed all three mutation operations on the execution paths of MyDoom.D and KidLogger, which were subsequently analyzed using our static analyzer. As expected, all the chops extracted were identical to the original ones, except for some adjacent but independent instructions being swapped. This issue is minor because it will not mislead our analyzer into extracting unrelated instructions. Chopping also reveals the dependency relations among individual instructions, which can be used to identify sequences differing only in the positions of independent instructions. In our experiments, the code size of the execution paths varied from 39 bytes to 467 bytes, while the mutated code maintained a constant size of 4K bytes.

### Effectiveness against Encoded Infections

We also evaluated our prototype using an encoded infection, MyDoom.D.