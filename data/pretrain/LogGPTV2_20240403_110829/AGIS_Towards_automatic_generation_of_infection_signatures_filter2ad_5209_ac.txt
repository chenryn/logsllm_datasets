program that logs keystrokes.
It can also monitor in(cid:173)
stant messaging, web browsing and the applications ac(cid:173)
tivated periodically.
Symantec rates its risk impact
as high (http://www.syrnantec.com/securi ty_responsel
writeup.jsp?docid=2006-020913-4035-99).
Then,
it
initiated a call
Within AGIS, KidLogger deposited and executed
a temporary executable is-I486L.trnp which further
dropped several files, including executables Hook s . dll
and MainWnd.exe.
is-I486L.trnp then modified
the Run registry key to point to MainWnd. exe. Af(cid:173)
ter being activated, MainWnd pointed the RunService
registry key to itself.
to
NtUserSetWindowsHookEx, the parameters of which
indicated that
the hook was set for the keyboard, and
that the callback function was located inside Hooks. dll.
That file responded to keystrokes with a number of calls
to NtWriteFile. Our static analyzer scanned that
DLL and found an execution path from the entry of
the callback function to the site of the API call which
led to NtWriteFile. Moreover,
the
calls observed from Hooks. dll which happened be(cid:173)
fore NtWriteFile also appeared on that path. This
matched the ExistPath condition, and triggered the key(cid:173)
logger rule (in Table 1), which classified MainWnd. exe,
Hooks. dll and the KidLogger installer as malware.
the sites of all
Policy False Positives. We ran both security policies on 19
common applications including BitTorrent, web browsers,
Microsoft Office, Google desktop and others. Our prototype
did not classify any of them as an infection. Google desktop
was found to hook the keyboard. However, its hook pro-
API Call
Comments
Call Site
#
1
1
3
RegSetValueExA
ReadFile
WS2_32 . dll : send
Set the Run Registry key to point to Taskmon. exe
Scan the file system for email addresses
Send emails to SMTP servers
Table 2. Malicious Calls in MyDoom.D.
cedure did not write to files or make network connections.
Other applications' behavior did not even come close to the
keylogger policy. Some applications such as Outlook were
observed to make connections to a mail server. However,
they did not read numerous files as a mass-mailing worm
does. The legitimate application making the largest number
of calls to NtReadF i Ie from a unique call site was Pow(cid:173)
erPoint, which accessed 90 files. In contrast, MyDoom read
588 files in our experiment.
3.2 Signature Generation
AGIS automatically extracted the chops for all the infec(cid:173)
tions we tested. Again, we use MyDoom.D and KidLogger
as examples to explain our results.
MyDoom.D. The kernel monitor reported five malicious
calls (Table 2) from the main executable of MyDoom,
which was renamed as TaskMon . exe. Our static analyzer
extracted three chops, one for setting the registry, one for
scanning the file system and one for sending emails. Fig(cid:173)
ure 2 illustrates the execution path for scanning, in which
the instructions on the chop are highlighted. From that fig(cid:173)
ure we can easily identify the loop for searching directories
(on the left) which contains API calls FindFirstFileA
and FindNextFiIeA, and its embedded loop for reading
files (on the right) which uses CreateFile to open an ex(cid:173)
isting file and then continuously read from that file. More(cid:173)
over,
the chops automatically extracted from other My(cid:173)
Doom worms and NetSky worms have similar structures.
Spyware.KidLogger.
We detected five malicious
calls
from three executables dropped by KidLogger
(KidLogger. exe, MainWnd. exe and Hooks. dll).
Our static ana(cid:173)
These calls are listed in Table 3.
lyzer extracted chops from the recorded calls.
Fig(cid:173)
ure 3 demonstrates the execution paths and the chops
for MainWnd. exe and Hooks. dll. MainWnd. exe
hooked a callback function in Hooks. dll to inter(cid:173)
cept keystrokes. The chop of that DLL preserved the
important instructions of the keylogger, which first ac(cid:173)
quired keystrokes (GetKeyNarneTextA), and then cre(cid:173)
ated or opened a log file (CreateFileA) to save them
(SetFiIePointer and WriteFiIe).
Signature False Positives. Two types of signatures were
generated from the chops: the regular-expression signature
constructed using the approach described in Section 2.3,
and the vanilla malware directly built from these chops. To
evaluate their false positive rates, we collected 1378 PE
files from directory 'C: \PrograrnFiles' on Windows
XP and used them as a test dataset.
1-4244-2398-9/08/$20.00 ©2008 IEEE
242
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
...A69U. LD ~.~om .n::·:~~~:r::~~'·:··"··········"·i::::·.1
00tA69A8: PUSH BAX
OOtAnAB: LBA EAX,DWORD PTR SS: [EBP+FPPFPEB4)
004A69Bl: PUSH EAX
1
004A69B2: CALL DWORD PTR DS: [004A10CC)
i FindFiratFileA Ill'::!::::
004A69DO: PUSH DWORD PTR SS: [BBP-04H]
00tAnD3: CALL DWORD PTR DS: [004Al094)
; FindNextPileA
......... LD ~.~om .n SS, l
€~~~~~7D: CALL 004A6A9F
«"i~,;:X<2
,."'·'T "r',U<i,:,i;
DA.j
I,
I
i LOOP ••••••••••••••••1
004A666A: CALL DWORD PTR DS: [004A1068)
;CreateFileA
o04A66C2: PUSH lAX
004A66C2: PUSH EAX
004A66C3: LEA BAX, DWORD PTR SS: [EBP+PPPEPPP4)
004A66C9: PUSH BAX
004A66CA: CALL 004A67U
004A66P2: PUSH EBX
004A66P3: PUSH BAX
004A66P4: LEA BAX,DWORD PTR SS: [EBP+PPPEPPP4)
004A66PA: PUSH BDI
004A66PB: PUSH EAX
004A66FC: PUSH DWORD PTR SS: [EBP-OCH)
004A66PP: MOV DWORD PTR SS: [EBP+08H) ,EBX
i LooP······J
Figure 2. The execution path for scanning email addresses in MyDoom.D. Highlighted instructions are on the chop.
i LoadLibraryA
0040146C: MOV ICX,DWORD PTR os: [004183DC]
00401472: PUSH ESI
00401473: MOV ESI,DWORD PTR OS: [00418390]
00401479: PUSH 00
00401478: PUSH lAX
0040147C: PUSH ICX
00401470: PUSH 02
0040147P: CALL lSI
iSetWindow8HooklxA
100010E9: LEA EAX.OWORD PTR SS: [EBP-14H)
100010EC: PUSH 13
10001018, PUSH SAX
1000101F: PUSH DWORD PTR SS: [EBP+10H]
100010F2: CALL DWORD PTR DS: [10006114)
iOetKeyNameTextA
100011B8: LEA EAX.DWORD PTR SS: [EBP+FFFFFE301
1000UCE: PUSH EAX
10001lCF: CALL DWORD PTR os: [10006028]
10001248: CALL EDI
1000124A: PUSH 02
1000124C: PUSH EBX
1000124D: PUSH EBX
1000124E: PUSH DWORD PTR SS: [EBP+OCB]
10001251: CALL DWORD PTR os: [10006054]
iCreateFileA
iWrit.File
i SatFilePointer
10001263: PUSH EAX
10001264: PUSH ESI
10001265, PUSH DWORD PTR SS: [EBP+OCH]
000
68: C
I
,WriteFile
(A) The Execution Path of SetWindowsHookExA
in MainWnd.exe and its Chop
(B) The Execution Path of NtWriteFile in
Hooks.dll and its Chop.
Figure 3. The execution paths and their chops for Spyware.Kidlogger. Highlighted instructions are on the chop.
Regular-expression Signatures. The regular-expression sig(cid:173)
nature we used is a conjunction of byte strings which are
closest to the site of a malicious call on its chop. Therefore,
it is natural to conjecture that the selection of the call af(cid:173)
fects the quality of the signature. Another important factor
related to false positives is signature length. The longer a
signature is, the more specific it becomes and therefore the
fewer false positives it will introduce. The objective of our
experiments was to study the relation between these factors
and the false positive rate of our signatures. We developed
a simple scanner which first took out the executable section
of a PE file and then attenlpted to find the signature from it.
Figure 4 describes the experiment results.
In the figure,
the signatures constructed from the API
functions RegSetValueExA and Send had the lowest
false positive rates. A possible reason is that these func(cid:173)
tions are less frequently used than the other functions,
such as CreateProcessA. False positives also decreased
False Positive Rate vs. Signature Length
0.05
0.01
o .b--...------r-.,.----r---.~. . . .==II............~........~
16 18 20 22 24 26 28 30
Signature length (Bytes)
10 12 14
o
4
6
8
-+- CreateProcessA(KidLogger)
-RegSetValueExA(MyDoom)
-+-WS2_32.dll: send (MyDoom)
-.i.- SetWindowsHookExA(KidLogger)
_ReadFile(MyDoom)
Figure 4. False positive rate vs. signature length.
with the increase of the signature length. As illustrated in
Figure 4, false positives were eliminated after the length
reached 28 bytes.
Vanilla Malware. To evaluate the quality of a vanilla(cid:173)
malware signature, we need to demonstrate that the in(cid:173)
struction template (i.e, the chop) we extracted will not ap(cid:173)
pear in a legitimate program. To this end, we developed
1-4244-2398-9/08/$20.00 ©2008 IEEE
243
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
File Name
kidlogger.exe
MainWnd.exe
Hooks.dll
API Call
CreateProcessA
RegSetValueExA
SetWindowsHookExA
WriteFile
Call Site #
I
1
1
2
Comments
Create a process (i s - I 48 6L. t mp) to install other code
Set the Run Registry key to point to itself
Hook the keyboard
Export keystrokes to a log file
Table 3. Malicious calls of Spyware.KidLogger. Note that there was one temporary executable (is- 148 6L. trnp) with malicious
calls. However, we did not use them because the file was deleted and could not be used for signature generation.
a static-analysis based scanner which works as follows. It
first checks if a program imports all the API functions on
the template chop, and then attempts to find an execution
path in the program with all these functions on it. If both
conditions are satisfied, the scanner further chops that path
with regard to the last call within the path, and compares
the sequence of the operators of the instructions on the
template chop with those on the chop of the normal pro(cid:173)
gram. For example, suppose the instructions on the tem(cid:173)
plate are push eax; add eax, ebx; mov ebx,10;
the sequence we attempt to find from the chop in a nor(cid:173)
mal program is push add move In our experiment, we
scanned all 1378 files, and no false positive was reported by
our scanners.
Resilience to Metamorphism. The ability of AGIS to with(cid:173)
stand metamorphic malware was evaluated using a mutation
engine based on RPME (http://vx.netlux.org/vx.php?
id=erlO), which can perform three mutations:
junk code
injection, instruction transposition and instruction replace(cid:173)
ment. To generate metamorphic code, we ran the mutation
engine on the execution paths used to extract chops.
RPME performed all three mutation operations on the
execution paths of MyDoom.D and KidLogger, which were
subsequently analyzed using our static analyzer. As ex(cid:173)
pected, all the chops extracted were identical to the origi(cid:173)
nal ones except that some adjacent but independent instruc(cid:173)
tions were swapped. We believe that this problem is minor
because it will not cheat our analyzer into extracting the
instructions unrelated to malicious behaviors. Moreover,
chopping also reveals the dependency relations among in(cid:173)
dividual instructions, which can be used to identify the in(cid:173)
struction sequences differing only in the positions of inde(cid:173)
pendent instructions. In our experiments, the code size of
the execution paths varied from 39 bytes to 467 bytes, while
the mutated code kept a constant size of 4K bytes.
Effectiveness against Encode Infections. We also evalu(cid:173)
ated our prototype using an encoded infection, MyDoom.D,