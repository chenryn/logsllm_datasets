produced by the Bitcoin network rather than by an adver-
sary.
3.2 Double-Spending Attacks
The risk of double-spending arises from the fact that a payer
has always access to private keys of bitcoins he owns, and,
hence, can always reuse them.
While online Bitcoin clients can protect themselves from
double-spending attacks by observing the Bitcoin network
and verifying a transaction conﬁrmation issued by the net-
work, oﬄine clients do not have this option. Further, in
immediate payments, even connected clients are vulnerable
to double-spending, as they consider transactions being valid
as soon as they appear in the Bitcoin network, but before
their conﬁrmations are generated.
Our approach to deal with double-spending attacks in of-
ﬂine scenarios is to rely on an oﬄine wallet, which either
behaves correctly, or its misbehavior is penalized. One way
to achieve this in practice is to realize such a wallet on top of
tamper-proof secure hardware, which can be compromised
only at signiﬁcant costs [53]. Furthermore, even if compro-
mised, one can detect and revoke it, so that it can only
misbehave for a limited period of time.
While the idea of using secure hardware may seem con-
troversial in context of Bitcoin payments, as it would nor-
mally imply some trust assumptions on origin of this hard-
ware, we argue that (online) Bitcoin users already trust in
similar way to manufacturers of their computing platforms.
There are also other implicitly trusted parties in Bitcoin
ecosystem, such as developers of bitcoin wallets or large
mining pools [38]. Hence, we believe that it is reasonable
to trust manufacturers of secure hardware, such as ARM
TrustZone [14] or Intel SGX [45], as long as users already
use ARM and Intel processors to run their online bitcoin
wallets. Nevertheless, in Section 7 we discuss an alternative
deployment approach for oﬄine wallets, which does not rely
on secure hardware.
State-of-the-art payment solutions, such as GoogleWal-
let [7] and ApplePay [2], already rely on tamper-proof wal-
let environments. However, they are inapplicable in case of
Bitcoin and cannot be used to achieve oﬄine Bitcoin pay-
ments, as they commonly rely on a trusted authority, such
as a bank, to pre-load coins into the wallet – an entity which
does not exist in Bitcoin ecosystem. Moreover, as we elabo-
rate in the following, limitations and constrains of commod-
ity secure wallet environments make it challenging to verify
validity of bitcoins from within the wallet even for online
users.
3.3 Challenges
(1) The ﬁrst challenge is related to resource constrains of
commodity wallet environments which are likely to render
full validation of the blockchain (and, hence, transaction
validation) within the wallet environment infeasible, and
even while being online.
In fact, it takes days to down-
load and verify the whole blockhain even on resource-reach
platforms such as PCs [5], while wallet environments are
typically much more constrained. Especially mobile wallets
may not be able to perform even lightweight SPV veriﬁca-
tion which is carried out at the level of blockheaders (cf.
Section 2 for more details), as they may not have enough
resources to store suﬃcient number of blockheaders. This
makes it challenging to ensure within the wallet environ-
ment that the transaction conﬁrmation blocks are linked to
the blockchain. We approach this problem in the same way
as the problem of coin forgery attacks against oﬄine clients
(cf. Section 3.1), and apply time-based transaction conﬁrma-
tion veriﬁcation to verify (online) transactions from within
wallet environments.
(2) The second challenge is imposed by the fact that typ-
ical wallet environments do not feature direct access to net-
working interfaces, but their network access is rather medi-
ated by hosting platforms to which they are connected to.
This is speciﬁcally a problem if a host platform is controlled
by an adversary, who can then mediate network access of the
wallet and manipulate its system view in the similar manner
as performed during Eclipse attacks [41]. For instance, the
wallet can be tricked to accept a fake transaction as valid
by providing an adversarial blockchain, generated with low
diﬃculty, in which this fake transaction is referenced. To
address this challenge, we propose to use delayed parame-
ters veriﬁcation, which postpones the veriﬁcation of critical
parameters to a later oﬄine payment stage and involves the
payee to verify them.
(3) The third challenge is related to the estimation of time
window within which the transaction conﬁrmation was pro-
duced by the Bitcoin network, which is a security-sensitive
veriﬁcation parameter of our time-based transaction conﬁr-
mation veriﬁcation. This requires either a local time source
(e.g., a timer), or access to external time provider. How-
ever, a secure timer is not a standard feature of commodity
wallet environments. Further, although correct time can be
obtained from network-based time services and even in au-
thenticated manner [10], it is preferable to avoid relying on
third party services. To overcome this challenge, we pro-
pose a method to reliably estimate an upper bound for the
time window and compensate over-approximation by infer-
ring limits on transaction amounts, which should render re-
spective attacks unproﬁtable for an adversary.
(4) The fourth challenge arises from a threat of the of-
ﬂine wallet being compromised. And, although it is known
to be diﬃcult to compromise commodity secure wallet envi-
ronments in practice [53], advanced adversaries might invest
522parties occasionally go online, for instance, X to receive pre-
ceding transactions to their account, while Y to redeem the
received oﬄine transaction after the payment2.
Payment scenario Our solution consists of 3 phases (cf.
Figure 1): (i) online coin preloading, (ii) oﬄine payment,
and (iii) online coin redemption and double-spender revoca-
tion. In the ﬁrst phase, the payer X generates pre-loading
transaction τl (step 1) that transfers some bitcoins from her
standard Bitcoin account x to the oﬄine wallet’s account
w, so that the balance of w becomes positive. This is done
by means of standard online Bitcoin transaction, for which
the network generates n-transaction conﬁrmation n -Tl. In
the second phase the payer X requests W to generate an
oﬄine transaction τo with the desired amount destined to
the account y (step 3).
In the third phase, the payee Y
redeems the bitcoins he received oﬄine by broadcasting τo
into the Bitcoin network (step 4) and optionally obtaining
network conﬁrmation n -To (step 5). The network conﬁr-
mation will only be issued, if the network has not detected
a double-spending attack against τo. Otherwise, the payee
Y will trigger an optional double-spender revocation pro-
cedure, which includes sending a double-spender revocation
transaction τr (step 6) to the Bitcoin network and obtaining
corresponding conﬁrmation n -Tr (step 7). We indicate op-
tional and conditional steps in Figure 1 using dashed arrows.
Adversary model and assumptions Our adversary model
is similar to that of Bitcoin, where an adversary A is a ma-
licious user X ∈ U, and, optionally, X ∈ M. In particular,
X aims to get ﬁnancial beneﬁt by paying with invalid bit-
coins such as forged or double-spent transactions and/or get
them included into the blockchain. The most fundamental
assumption is that even if X ∈ M, she does not control more
than 50% of the computational power available to the Bit-
coin network. Moreover, it is assumed that the adversary
A has control over her own platform PY , but she cannot
compromise platforms of other users, i.e., she has no control
over the platform of the payee PY
3.
We also assume that the malicious payer X can compro-
mise her oﬄine wallet W , however, the attack is associated
with signiﬁcant costs. The latter assumption is beyond stan-
dard adversary model of Bitcoin, and, as we discussed al-
ready in Section 3.2, it can be fulﬁlled by utilizing tamper-
resistant wallet environments, which are widely available on
both, mobile and PC platforms (e.g., Intel SGX [45], ARM
TrustZone [14] and ASSD cards [39], to name some), and
already commonly used by payment solutions (e.g., Google-
Wallet [7] and ApplePay [2]).
In Section 7 we discuss an alternative deployment option
of the oﬄine wallet which neither relies on secure hardware
nor on their manufacturers for certiﬁcation.
4.2 Security Mechanisms
In the following we present our new security mechanisms
which are motivated by threats and challenges discussed in
Section 3.
2Note that even oﬄine devices like vending machines may
have temporary connectivity (e.g., provided via hotspots of
personnel supplying items).
3Otherwise the adversary could trivially trick the payee Y
to accept any invalid translation by displaying the fake no-
tiﬁcation that the transaction is valid.
Figure 1: System model for oﬄine Bitcoin payments
signiﬁcant amount of time and resources into an attack if in
return they can double-spend without any limit. Hence, in-
spired by previous works on digital cash [27], we propose to
detect misbehaving wallets and enforce their revocation and
present a new distributed wallet revocation scheme which
does not rely on any external third party, but utilizes Bit-
coin network to distribute revocation information.
4 Secure Ofﬂine Bitcoin Payments
In this section we present details of our solution. We begin
by specifying our system and adversary model, then intro-
duce new security mechanisms and, ﬁnally, present protocols
which illustrate integration of new building blocks into the
payment scheme.
4.1 System Model
Our system model is depicted in Figure 1. It includes the
Bitcoin infrastructure consisting of the blockchain B and the
miners M. Further, it includes two regular users X, Y ∈ U ,
where X is a payer who sends an oﬄine transaction τo to
the payee Y . Both users have computing platforms PX and
PY , respectively. Each platform PX (resp. PY ) executes
the Bitcoin client software, which manages respective user
accounts x, y and corresponding key pairs (P KX , skX ) and
(P KY , skY ). Additionally, the platform PX has an oﬄine
wallet W which manages its own account w and correspond-
ing key pair (P KW , skW ). Furthermore, the wallet W has
a certiﬁed key pair (P KT , skT )1, and its certiﬁcate certT is
known to PX .
Because both, the payer X and the payee Y , have no on-
line connection during the payment, the oﬄine transaction
τo is sent via local interfaces (e.g., Near Field Communica-
tion (NFC) or Bluetooth Low Energy (LTE)), in contrast to
regular (online) Bitcoin transactions which are transferred
via the Bitcoin peer-to-peer network. Nevertheless, both
1Such keys are typically available within hardware-based se-
cure environments and certiﬁed by secure hardware manu-
facturers.
PayerOnline pre-loading phaseOffline payment phaseOnline coin redemption and double-spender revocation phaseMinersoperatingtheblockchainPayee;1.2.4.3.5.6.7.523Figure 2: Coin preloading protocol
Time-based Transaction Conﬁrmation Veriﬁcation
This mechanism enables us to get a high conﬁdence in va-
lidity of transaction conﬁrmation even without the ability
to check that the transaction conﬁrmation is linked to the
entire blockciain. In a nutshell, it is an enhancement of a
standard transaction conﬁrmation of Bitcoin, which requires
Bitcoin network to produce n-transaction conﬁrmation n -T
= {Bi, ..., Bi+n} with the speciﬁed diﬃculty. Beyond that,
our mechanism additionally requires n-transaction conﬁrma-
tion to satisfy time constraints δn := ti − ti+n ≤ n· δ, where
ti and ti+n are time stamps extracted from blocks Bi and
Bi+n, respectively, and δ is a security parameter.
We analyze this mechanism and potential attacks as well
as provide estimations for reasonable values for δ and n in
Section 5.1.
Delayed Parameters Veriﬁcation To deal with the chal-
lenge of untrusted and potentially manipulated inputs within
the wallet environment, we propose to split transaction con-
ﬁrmation veriﬁcation process into two phases. In the ﬁrst
phase the wallet W validates the pre-loading transaction
τl without getting assured that validation parameters (ob-
tained from untrusted input sources) are correct, but storing
them for future use. In the second phase, which takes place
during an oﬄine payment, these parameters are compared
against reference values provided by PY , which are trustwor-
thy, as there is no incentive for PY to manipulate the values
(otherwise it would risk to accept an invalid transaction).
The values which can be veriﬁed using this method are the
security parameter δ, the number of conﬁrmation blocks n,
and the target value tgt. However, obtaining the reference
values for ti and ti+n is more challenging, as there might be
no n -Tl available on PY (e.g., if the payee Y got oﬄine be-
fore τl have been conﬁrmed by the network). Furthermore,
the time stamps extracted from n-transaction conﬁrmation
received by W during pre-loading phase are not trustwor-
thy, as they could be forged by an adversary controlling
less than 50% of the network power. In particular, an ad-
versary A could search for conﬁrmation blocks over longer
time, while manipulating time stamps in such a way that
they look like the conﬁrmation was generated faster. Even
more crucial, once generated, such a spoofed transaction
conﬁrmation could be re-used to cheat multiple wallets.
As a countermeasure, we propose to estimate bounds for
δn := ti − ti+n by (i) creating a fresh bitcoin address for
every pre-loading transaction, which eﬀectively bounds ti
and also prevents an adversary from re-using the spoofed
conﬁrmation with several wallets. Further, we suggest to
(ii) use time of oﬄine payment tp as an upper bound of
ti+n.
4
Transaction Limits Depending on time passed in between
the transaction τl was loaded and until τo is spent, veri-
ﬁcation of a condition δn := tp − ti ≤ n · δ may fail for