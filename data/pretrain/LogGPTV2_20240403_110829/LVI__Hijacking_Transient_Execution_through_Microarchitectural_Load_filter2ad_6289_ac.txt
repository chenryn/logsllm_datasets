behavior. We exploit that faulting or assisted loads do not al-
ways yield the expected architectural result, but may transiently
serve dummy values or poisoned data from various microarchi-
tectural buffers. There are many instances of incorrect transient
forwarding in modern CPUs [9, 10, 42, 53, 57, 61, 67]. In
this work, we show that such incorrect transient forwarding is
not limited to cross-domain data leakage. We are the ﬁrst to
show cross-domain data injection and identify dummy 0x00
values as an exploitable incorrect transient forwarding source,
thereby widening the scope of LVI even to microarchitectures
that were previously considered Meltdown-resistant.
b) Faulting or assisted loads: LVI requires ﬁrstly the
ability to (directly or indirectly) provoke architectural excep-
tions or microcode assists for legitimate loads executed by
the victim. This includes implicit load micro-ops as part of
larger ISA instructions, e.g., popping the return address from
the stack in the x86 ret instruction. Privileged SGX attackers
can straightforwardly provoke page faults for enclave memory
loads by modifying untrusted page tables, as demonstrated
by prior research [65, 71]. Even unprivileged attackers can
induce demand paging non-present faults by abusing the
OS interface to unmap targeted victim pages through legacy
interfaces or contention of the shared page cache [19]. Finally,
more recent works showed that Meltdown-type effects are not
limited to architectural exceptions, but also exist for assisted
loads [9, 53, 67]. In case a microcode assist is required, the
load micro-op does not architecturally commit, but may still
transiently forward incorrect values before being re-issued as
a microcode routine. Microcode assists occur in a wide variety
of conditions, including subnormal ﬂoating point numbers and
setting of “accessed” and “dirty” PTE bits [13, 29].
c) Code gadgets: A ﬁnal yet crucial requirement for LVI
is the presence of a suitable code gadget that allows to hijack the
victim’s transient execution and encode unintended secrets in
the microarchitectural state. In practice, this requirement comes
down to identifying a load operation in the victim code that
can be faulting or assisted, followed by an instruction sequence
that redirects control or data ﬂow based on the loaded value
(e.g., a pointer, or array index). We ﬁnd that there are many
different types of gadgets which mostly consist of only a few
ubiquitously used instructions. We provide practical instances
of such exploitable gadgets in Section VI.
V. BUILDING BLOCKS OF THE ATTACK
We compose transient fault-injection attacks using the three
building blocks described in the previous section and Figure 3.
A. Phase P1: Microarchitectural Poisoning
The main challenge in the ﬁrst phase is to prepare the
CPU’s microarchitectural state such that a (controlled) incorrect
transient forwarding happens for the faulting load in the
second stage. We later classify LVI variants based on the
microarchitectural buffer that forwards the incorrect data.
Depending on the variant, it sufﬁces in this phase to ﬁll a
particular buffer (cf. Section II-A: L1D, LFB, SB, LP) with
a chosen value at a chosen location. This is not always a
requirement, as we also consider a special LVI-NULL variant
that abuses incorrect forwarding of 0x00 dummy values which
are often returned when faulting loads miss the cache, or on
Meltdown-resistant microarchitectures [28]. Such null values
are “hard wired” in the CPU, and the poisoning phase can
hence be entirely omitted for LVI-NULL attacks.
In a straightforward scenario, the shared microarchitectural
buffer can be poisoned directly from within the attacker context.
This scenario assumes, however, that said buffer is not explicitly
overwritten or ﬂushed when switching from the attacker to the
victim domain, which is often not anymore the case with recent
software and microcode mitigations [25, 29]. Alternatively,
for buffers competitively shared among logical CPUs, LVI
attackers can resort to concurrent poisoning from a co-resident
hyperthread running in parallel to the victim [53, 61, 67].
Finally,
in the most versatile LVI scenario,
the attack
runs entirely within the victim domain without placing any
assumptions on prior attacker execution or co-residence. We
abuse appropriate “ﬁll gadgets” preceding the faulting load
within the victim execution. As explored in Section VI, LVI
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
59
variants may impose more or fewer restrictions on suitable ﬁll
gadget candidates. The most generically exploitable ﬁll gadget
loads or stores attacker-controlled data from or to an attacker-
chosen location, without introducing any architectural security
problem. This is a common case if attacker and victim share
an address space (enclave, user-kernel boundary, sandbox) and
exchange arguments or return values via pointer passing.
B. Phase P2: Provoking Faulting or Assisted Loads
In the second and principal LVI phase, the victim executes a
faulting or assisted load micro-op triggering incorrect transient
forwarding. The crucial challenge here is to provoke a fault or
assist for a legitimate and trusted load executed by the victim.
a) Intel SGX: When targeting Intel SGX enclaves,
privileged adversaries can straightforwardly manipulate PTEs
in the untrusted OS to provoke page-fault exceptions [71]
or microcode assists [9, 53]. Even user-space SGX attackers
can indirectly revoke permissions for enclave code and data
pages through the unprivileged mprotect system call [61].
Alternatively, if the targeted LVI gadget requires a more precise
temporal granularity, privileged SGX attackers can leverage a
single-stepping interrupt attack framework like SGX-Step [63]
to manipulate PTEs and revoke enclave-page permissions
precisely at instruction-level granularity.
b) Generalization to other environments.: In the more
general case of unprivileged cross-process, cross-VM, or
sandboxed attackers, we investigated exploitation via memory
contention. Depending on the underlying OS or hypervisor
implementation and conﬁguration, an attacker can forcefully
evict selected virtual memory pages belonging to the victim
via legacy interfaces or by increasing physical memory utiliza-
tion [19]. The “present” bit of the associated PTE is cleared (cf.
Figure 1), and the next victim access faults. On Windows, this
can even affect the kernel heap due to demand paging [50].
Furthermore, prior research has shown that
the page-
replacement algorithm on Windows periodically clears “ac-
cessed” and “dirty” PTE bits [53]. Hence, unprivileged attackers
can simply wait until the OS clears the accessed bit on the
victim PTE. Upon the next access to that page, the CPU’s
page-miss handler circuitry prematurely aborts the victim’s
load micro-op to issue a microcode assist for re-setting the
accessed bit on the victim PTE [13, 53]. Finally, even without
any OS intervention, a victim program may expose certain
load gadget instructions that always require a microcode assist
(e.g., split-cacheline accesses which have been abused to leak
data from load ports [66, 67]).
C. Phase P3: Gadget-Based Secret Transmission
The key challenge in the third LVI phase is to identify an ex-
ploitable code “gadget” exhibiting incorrect transient behavior
over poisoned data forwarded from a faulting load micro-
op in the previous phase. In contrast to all prior Meltdown-
type attacks, LVI attackers do not control the instructions
surrounding the faulting load as the load runs entirely in
the victim domain. We, therefore, propose a gadget-oriented
exploitation methodology closely mirroring the classiﬁcation
from the Spectre world [10, 38].
60
a) Disclosure gadget: A ﬁrst type of gadget, akin Spectre-
PHT-style information disclosure, encodes victim secrets in
the instructions immediately following the faulting load (cf.
Listing 1). The gadget encodes secrets in conditional control
ﬂow or data accesses. Importantly, however, this gadget does
not need to be secret-dependent. Hence, LVI can even target
side-channel resistant constant-time code [16]. That is, at the
architectural level, the victim code only dereferences known,
non-conﬁdential values when evaluating branch conditions or
array indices. At the microarchitectural level, however, the
faulting load in the second LVI phase causes the known value to
be transiently replaced. As a result of this “transient remapping”
primitive, the gadget instructions may now inadvertently leak
secret values that were brought into the targeted microarchi-
tectural buffer during prior victim execution.
is not
the attacker’s goal
b) Control-ﬂow hijack gadget: A second and more
powerful type of LVI gadgets, mirroring Spectre-BTB-style
branch-target injection, exploits indirect branches in the victim
code. In this case,
to disclose
forwarded values, but instead to abuse them as a transient
control-ﬂow hijacking primitive. That is, when dereferencing
a function pointer (call, jmp) or loading a return address
from the stack (ret), the faulting load micro-op in the victim
code may incorrectly pick up attacker-controlled values from
the poisoned microarchitectural buffer. This essentially enables
the attacker to arbitrarily redirect the victim’s transient control
ﬂow to selected second-stage code gadgets found in the victim
address space. Adopting established techniques from jump-
oriented [5] and return-oriented programming (ROP) [56],
second-stage gadgets can further be chained together to com-
pose arbitrary transient instruction sequences. Akin traditional
memory-safety exploits, attackers may also leverage “stack
pivoting” techniques to transiently point the victim stack to an
attacker-controlled memory region.
Although they share similar goals and exploitation method-
ologies, LVI-based control-ﬂow hijacking should be regarded as
a complementary threat compared to Spectre-style branch-target
injection. Indeed, LVI only manifests after the victim attempts
to fetch the architectural branch target, whereas Spectre abuses
speculative execution before the actual branch outcome is
determined. Hence, the CPU may ﬁrst (correctly or incorrectly)
predict transient control ﬂow based on the history accumulated
in the BTB and RSB, until the victim execution later attempts
to verify the speculation by comparing the actual branch-target
address loaded from application memory. At this point, LVI
kicks in since the faulting load micro-op yields an incorrect
attacker-controlled value and erroneously redirects the transient
instruction stream to a poisoned branch-target address.
LVI-based control-ﬂow hijack gadgets can be as little as a
single x86 ret instruction, making this case extremely danger-
ous. As explained in Section IX, fully mitigating LVI requires
blacklisting all indirect branch instructions and emulating them
with equivalent serialized instruction sequences.
c) Widening the transient window: A ﬁnal challenge
is that, unlike traditional fault-injection attacks that cause
persistent bit ﬂips at the architectural level [36, 47, 59], LVI
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
attackers can only disturb victim computations for a limited
time interval before the CPU eventually catches up, detects
the fault, and aborts transient execution. This implies that
there is only a limited “transient window” in which the victim
inadvertently computes on the poisoned load values, and all
required gadget instructions need to complete within this
window to transmit secrets. The transient window is ultimately
bounded by the size of the processor’s reorder buffer [68].
Naturally, widening the transient window is a requirement
common to all transient-execution attacks. Therefore, we can
leverage techniques known from prior Spectre attacks [11, 39,
44]. Common techniques include, e.g., ﬂushing selected victim
addresses or PTEs from the CPU cache.
d) Summary: To summarize, we construct LVI attacks
with the three phases P1 (poisoning), P2 (provoking injection),
P3 (transmission). For each of the phases, we have different
instantiations, based on the speciﬁc environment, hardware,
and attacker capabilities. We now discuss gadgets in Section VI
and, subsequently, practical LVI attacks on SGX in Section VII.
VI. LVI TAXONOMY AND GADGET EXPLOITATION
We want to emphasize that LVI represents an entirely new
class of attack techniques. Building on the (extended) transient-
execution attack taxonomy by Canella et al. [10], we propose an
unambiguous naming scheme and multi-level classiﬁcation tree
to reason about and distinguish LVI variants in Appendix B.
In the following, we overview the leaves of our classiﬁcation
tree by introducing the main LVI variants exploiting different
microarchitectural injection sources (cf. Table I). Given the
particular relevance of LVI to Intel SGX, we especially focus
on enclave adversaries but also include a discussion on gadget
requirements and potential applicability to other environments.
A. LVI-L1D: L1 Data Cache Injection
In this section, we contribute an innovative “reverse Fore-
shadow” injection-based exploitation methodology for SGX
attackers. Essentially, LVI-L1D can best be regarded as a
transient page-remapping primitive allowing to arbitrarily
replace the outcome of any legitimate enclave load value (e.g.,
a return address on the stack) with any data currently residing
in the L1D cache and sharing the same virtual page offset.
a) Microarchitectural poisoning: An “L1 terminal fault”
(L1TF) occurs when the CPU prematurely early-outs address
translation when a PTE has the present bit cleared or a reserved
bit set [61, 70]. A special type of L1TF may also occur for
SGX EPCM page faults (cf. Appendix A) if the untrusted
PTE contains a rogue physical page number [25, 61]. In our
LVI-L1D attack, the root attacker replaces the PPN ﬁeld in
the targeted untrusted PTE, before entering or resuming the
victim enclave. If the enclave dereferences the targeted location,
SGX raises an EPCM page fault. However, before the fault
is architecturally raised, the poisoned PPN is sent to the L1D
cache. If a cache hit occurs at the rogue physical address
(composed of the poisoned PPN and the page offset speciﬁed
by the load operation), illegal values are “injected” into the
victim’s transient data stream.
e
h
c
a
c
D
1
L
RAX
P3 address
1
Page table entry stack
P1_gadget:
mov  (%rdi), %r12 
mov  -8(%rdi), %r13
2
LVI
3
4
P2_gadget:
pop  %rax
retq
P3_gadget:
movb (%rax), %al
mov  (%rdi,%al), %rcx
%rdi
RAX
P3 gadget address
virtual page offset
l
E
n
c
a
v
e
c
o
d
e
U
s
e
r
(cid:2)
(cid:2)
p
a
g
e
Fig. 5. Transient control-ﬂow hijacking using LVI-L1D: (1) the enclave’s stack
PTE is remapped to a user page outside the enclave; (2) a P1 gadget inside the
enclave loads attacker-controlled data into L1D; (3) a P2 gadget pops trusted
data (return address) from the enclave stack, leading to faulting loads which
are transiently served with poisoned data from L1D; (4) the enclave’s transient
execution continues at an attacker-chosen P3 gadget encoding arbitrary secrets
in the microarchitectural CPU state.
b) Gadget requirements: LVI-L1D works on processors
vulnerable to Foreshadow, but with patched microcode, i.e., not
on more recent silicon-resistant CPUs [25]. The P1 gadget, a
load or store, brings secrets or attacker-controlled data into the
L1D cache. The P2 gadget is a faulting or assisted memory
load. The P3 gadget creates a side-channel from the transient
domain, or it redirects control ﬂow based on the injected
data (e.g., x86 call or ret), ultimately also leading to the
execution of an attacker-chosen P3 gadget. The addresses in
both memory operations must have the same page offset (i.e.,
lowest 12 virtual address bits). This is not a limiting factor
since L1D can hold 32 KiB of data, allowing the three gadgets
(P1, P2, P3) to be far apart in the enclaved execution. Similar
to architectural memory-safety SGX attacks [62], we found
that high degrees of attacker control are often provided by
enclave entry and exit code gadgets copying user data to or
from chosen addresses outside the enclave.
Current microcode ﬂushes L1D on enclave entry and exit,
and hyperthreading is recommended to be disabled [25]. We
empirically conﬁrmed that if hyperthreading is enabled, no P1
gadget is required and that on outdated microcode, L1D can
trivially be poisoned before enclave entry.
c) Gadget exploitation: Figure 5 illustrates LVI-L1D
hijacking return control ﬂow in a minimal enclave. First, the
attacker uses a page fault controlled-channel [71] or SGX-
Step [63] to precisely advance the enclaved execution to right
before the desired P1 gadget. Next, the attacker sets up the
malicious memory mapping 1 by changing the PPN of the
enclave stack page to a user-controlled page. The enclave then
executes a P1 gadget 2 accessing the user page and loading
attacker-controlled data into the L1D cache (e.g., when invoking
memcpy to copy parameters into the enclave). Next, the enclave
executes the P2 gadget 3 which pops some data plus a return
address from the enclave stack. For address resolution, the CPU
ﬁrst walks the untrusted page tables leading to the rogue PPN
to be forwarded to L1D. Since the prior P1 gadget ensured
that data is indeed present in L1D at the required address, a
cache hit occurs, and the poisoned data (including the return
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
61
address) is served to the dependent transient micro-ops. Now,
execution transiently continues at the attacker-chosen P3 gadget
4 residing at an arbitrary location inside the enclave. The
P3 gadget encodes arbitrary secrets into the microarchitectural
state before the CPU resolves the EPCM memory accesses,
unrolls transient execution, and raises a page fault.
Note that for clarity, we focused on hijacking ret con-
trol ﬂow in the above example, but we also demonstrated
successful LVI attacks for jmp and call indirect control-
ﬂow instructions. We observe that large or repeated P1 loads
enable attackers to setup a fake “transient stack” in L1D to
repeatedly inject illegal values for consecutive enclave stack
loads (pop-ret sequences). Much like in architectural ROP
code re-use attacks [56], we experimentally conﬁrmed that
attackers may chain together multiple P3 gadgets to compose
arbitrary transient computations. LVI attackers are only limited
by the size of the transient window (cf. Section V-C).
d) Applicability to non-SGX environments: We care-
fully considered whether cross-process or virtual machine
Foreshadow variants [70] may also be reversely exploited
through an injection-based LVI methodology. However, we
concluded that these variants are already properly prevented by
the recommended PTE inversion [12] countermeasure, which
has been widely deployed in all major OSs (cf. Appendix B).
B. LVI-SB, LVI-LFB, and LVI-LP: Buffer and Port Injection
LVI-SB applies an injection-based methodology to reversely
exploit store buffer leakage. The recent Fallout [9] attack
revealed how faulting or assisted loads can pick up SB data if
the page offset of the load (least-signiﬁcant 12 virtual address
bits) matches with that of a recent outstanding store. Similarly,
LVI-LFB and LVI-LP inject from the line-ﬁll buffer and load
ports, respectively, which were exploited for data leakage in
the recent RIDL [67] and ZombieLoad [53] attacks.