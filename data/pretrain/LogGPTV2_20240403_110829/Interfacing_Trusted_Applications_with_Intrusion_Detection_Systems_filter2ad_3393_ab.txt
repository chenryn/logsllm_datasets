### Challenges in Anomaly Detection and Activity Monitoring

Anomaly detection systems face several challenges, including:

- **Variable Information for Constant Activities**: Even when the underlying activity remains constant, the information received by the system can vary significantly. This variability complicates the training of anomaly detectors and the specification of complete signatures.
  
- **Similar Appearance of Different Activities**: Conversely, different activities may appear identical to a third party. For example, reading a line from a file, computing its hash, and sending the hash to a remote system might look similar to a task that omits the hashing step, leading to indistinguishable audit trails.

- **Internal Protection Subdomains**: Applications often have their own protection subdomains and execution environments. Security violations within these subdomains may not be visible to external monitoring. For instance, attempts to escalate rights within a database server or macro virus attacks might not generate distinctive system calls.

We believe that direct instrumentation of applications for detecting subversions has not been fully explored, which motivates the introduction of the IDS/A (Intrusion Detection System/Application) interface.

### Intrusion Response

Designing effective intrusion response mechanisms is a significant challenge for intrusion detection systems (IDS). While automatic responses are desirable to limit, isolate, or prevent intrusions, false positives can lead to undesirable consequences, such as denial of service attacks.

Current intrusion response methods are often coarse and crude, typically limited to inserting firewall rules or resetting network connections. We propose using a direct interface between the application and the IDS to make responses more fine-grained and less vulnerable to subversion. By merging the functionality of a reference monitor and an IDS, we aim to allow access control policies and availability requirements to modulate IDS responses.

### Direct Interface Between IDS and Application

We propose a direct interface between the IDS and the application, providing the IDS with real-time access to the application through direct instrumentation. This interface, similar to conventional logging interfaces like Unix syslog or XDAS, is visible to the application programmer as a set of library calls. However, unlike traditional logging, our interface is bidirectional, allowing applications to submit pending events or actions to the IDS for approval. This makes the interface an additional, external, voluntary reference monitor for applications.

#### Advantages of the Bidirectional Interface

- **Prevention of Overloading**: As the application waits for a reply from the IDS, it becomes infeasible to overload the IDS with the hope of discarding events still visible to the target.
- **Fail-Closed Policy**: When the IDS is unavailable, requests made by the application are simply denied, implementing a fail-closed policy.
- **Preventive Measures**: By reporting pending rather than past activities, it becomes possible to prevent intrusions by disallowing unauthorized actions, enabling highly specific and difficult-to-bypass responses.

### Performance Considerations

While making the IDS an active component visible to applications may raise performance concerns, we believe that the benefits outweigh the costs for most applications, except those requiring hard real-time performance. A "fair-weather" IDS that cannot keep up with worst-case traffic is of limited use, as attackers can easily overload it. Real protection requires that every event be processed by the IDS, and integrating the IDS into the infrastructure ensures this.

The direct coupling of the IDS to the application may actually reduce overall resource demands compared to a conventional intercepting IDS. The directly coupled IDS:
- Uses state information reported by the application, eliminating the need for message decoding/decryption.
- Filters out less extraneous information, as it is only consulted when necessary.

### Event Reporting

Our approach relies on the application to provide the following types of information to the IDS:

1. **Credentials**: The application must identify itself to the IDS to distinguish between different applications and application domains.
2. **Domain-Specific Information**: This information and its semantics depend on the domain in which the application operates. For example, a database server would have a different vocabulary than a mailer.
3. **Domain-Independent Information**: This information remains consistent across application domains, providing a fallback if the IDS lacks knowledge of a particular application domain.

We believe that separating domain-dependent and independent information is a reasonable approach to managing complexity. Designing a universal semantics for all conceivable applications would be impractical and result in poor fits. Instead, we propose a two-tiered approach, leaving domain-specific information to individual applications and designing a simpler, yet meaningful, domain-independent security rating.

### Implementation of IDS/A

We have built an experimental platform that implements some of the concepts outlined above. Our implementation resembles the conventional Unix system logger, consisting of a set of library functions linked to applications and a central daemon (idsad) that collects events from applications. Unlike syslog, our interface is bidirectional, allowing idsad to act as a reference monitor for applications.

#### Performance Optimization

Interprocess communication between idsad and the application imposes a performance penalty. To mitigate this, we shift intrusion detection components into the application context/process space when appropriate. This approach allows for filtering of interesting events or autonomous intrusion detection, access control, and logging within the application.

### Example Applications

We have instrumented several applications to use idsad as a reference monitor, including:

- **Apache**: Using a module (mod_idsa) to request permission to process HTTP requests.
- **FTP Servers**: Two experimental FTP servers that allow idsad to monitor and block individual FTP requests.
- **Access Control Applications**: Applications like login, xdm, or xlock, using a pluggable authentication module (PAM) to report authentication requests to idsad for approval.

By leveraging the IDS/A interface, we aim to enhance the effectiveness and specificity of intrusion detection and response mechanisms.