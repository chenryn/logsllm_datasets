      __int16 v5; // r2
      _DWORD *v7; // [sp+0h] [bp-24h]
      char *v9; // [sp+Ch] [bp-18h]
      char *v10; // [sp+10h] [bp-14h]
      int v11; // [sp+1Ch] [bp-8h]
      v7 = count;
      v10 = ctx->rev_buff;
      v9 = ctx->some_buff;
      ctx->some_buff[0] = 1;
      switch ( ctx->rev_buff[1] )                   // check type
      {
        case 4:
          printf("[%s():%d] TDDPv1: receive CMD_AUTO_TEST\n", "tddp_parserVerOneOpt", 697);
          v11 = CMD_AUTO_TEST(ctx);
          break;
        case 6:
          printf("[%s():%d] TDDPv1: receive CMD_CONFIG_MAC\n", 103928, 638);
          v11 = CMD_CONFIG_MAC(ctx);
          break;
        case 7:
          printf("[%s():%d] TDDPv1: receive CMD_CANCEL_TEST\n", "tddp_parserVerOneOpt", 648);
          v11 = CMD_CANCEL_TEST(ctx);
          if ( !ctx || !(ctx->field_2C & 4) || !ctx || !(ctx->field_2C & 8) || !ctx || !(ctx->field_2C & 0x10) )
            ctx->field_2C &= 0xFFFFFFFD;
          ctx->rev_flag = 0;
          ctx->field_2C &= 0xFFFFFFFE;
          break;
        case 8:
          printf("[%s():%d] TDDPv1: receive CMD_REBOOT_FOR_TEST\n", "tddp_parserVerOneOpt", 702);
          ctx->field_2C &= 0xFFFFFFFE;
          v11 = 0;
          break;
        case 0xA:
          printf("[%s():%d] TDDPv1: receive CMD_GET_PROD_ID\n", 103928, 643);
          v11 = CMD_GET_PROD_ID(ctx);
          break;
        case 0xC:
          printf("[%s():%d] TDDPv1: receive CMD_SYS_INIT\n", 103928, 615);
          if ( ctx && ctx->field_2C & 2 )
          {
            v9[1] = 4;
            v9[3] = 0;
            v9[2] = 1;
            v2 = htonl(0);
            *((_WORD *)v9 + 2) = v2;
            v9[6] = BYTE2(v2);
            v9[7] = HIBYTE(v2);
            v3 = ((unsigned __int8)v10[9] field_2C &= 0xFFFFFFFE;
            v11 = -10411;
          }
          break;
        case 0xD:
          printf("[%s():%d] TDDPv1: receive CMD_CONFIG_PIN\n", 103928, 682);
          v11 = CMD_CONFIG_PIN(ctx);
          break;
        case 0x30:
          printf("[%s():%d] TDDPv1: receive CMD_FTEST_USB\n", 103928, 687);
          v11 = CMD_FTEST_USB(ctx);
          break;
        case 0x31:
          printf("[%s():%d] TDDPv1: receive CMD_FTEST_CONFIG\n", "tddp_parserVerOneOpt", 692);
          v11 = CMD_FTEST_CONFIG(ctx);
          break;
        default:
          printf("[%s():%d] TDDPv1: receive unknown type: %d\n", 103928, 713, (unsigned __int8)ctx->rev_buff[1], count);
          v9[1] = v10[1];
          v9[3] = 2;
          v9[2] = 2;
          v4 = htonl(0);
          *((_WORD *)v9 + 2) = v4;
          v9[6] = BYTE2(v4);
          v9[7] = HIBYTE(v4);
          v5 = ((unsigned __int8)v10[9] << 8) | (unsigned __int8)v10[8];
          v9[8] = v10[8];
          v9[9] = HIBYTE(v5);
          v11 = -10302;
          break;
      }
      *v7 = ntohl(((unsigned __int8)v9[7] << 24) | ((unsigned __int8)v9[6] << 16) | ((unsigned __int8)v9[5] << 8) | (unsigned __int8)v9[4])
          + 12;
      return v11;
程序判断接收数据的第二字节，并根据其类型调用相关代码。根据协议格式，第二字节为`type`字段，同时根据poc，知道了出问题的类型为`0x31`。看上面的代码我们知道`0x31`对应为`CMD_FTEST_CONFIG`，看专利说明知道该字段为配置程序：
    [0049] For setting the configuration information and the configuration information, without subtype. Thus, this type of packet subtype SubType value is cleared (0x00)
跟进去该函数看是如何实现的：
可以看到该函数中就从数据中获取了字符串并形成命令`cd /tmp;tftp -gr %s
%s`，即实现了使用`tftp`去连接过来的ip地址中下载相应的文件，并最终通过c代码调用该文件中的`config_test`函数，从而实现任意代码执行。
事实上，根据最终使用的是`execve`函数来执行tftp下载，该漏洞也可以形成一个命令注入漏洞。
至此，漏洞分析结束。
## 补丁比对
最新版本的固件已经修复了该漏洞，我想比对下厂商是如何修复该漏洞的。用bindiff将该程序与最新版本的固件中的tddp程序进行对比。
可以看到`tddp_version1_type_handle`存在一定的差距，查看该函数的流程。
可以看到流程图中部分的基本块被删除了，猜测是直接将`0x31`字段对应的基本块给删掉了来修复该漏洞。
点击各个基本块，可以看到确实是`CMD_FTEST_CONFIG`基本块被删掉了。同时也可以在ida中确认该基本块被删除。
## 小结
该漏洞只能称之为任意命令执行（ACE）而不是远程命令执行（RCE）的原因似乎是因为TDDP 服务只能通过有线网络访问，连 Wi-Fi
也不能访问，没有真机，不好确认，有点可惜。
总的来说，漏洞还是很简单的。tddp第一版协议竟然未对用户进行验证就允许执行如此强大的调试功能，实在是有点不应该。
相关代码和脚本在我的[github](https://github.com/ray-cp/Vuln_Analysis/tree/master/TP-Link_sr20_tddp_ACE)
## 参考链接
  1. [重现 TP-Link SR20 本地网络远程代码执行漏洞](https://paper.seebug.org/879/)
  2. [A Story About TP-link Device Debug Protocol (TDDP) Research](https://www.coresecurity.com/blog/story-about-tp-link-device-debug-protocol-tddp-research)
  3. [Data communication method, system and processor among CPUs](https://patents.google.com/patent/CN102096654A/en)
  4. [[Remote code execution as root from the local network on TP-Link SR20 routers](https://mjg59.dreamwidth.org/51672.html)]
  5. [Download for SR20 V1](https://www.tp-link.com/us/support/download/sr20/#Firmware)
  6. [lua学习笔记3-c调用lua](https://www.jianshu.com/p/008541576635)
  7. [MIPS漏洞调试环境安装及栈溢出](https://ray-cp.github.io/archivers/MIPS_Debug_Environment_and_Stack_Overflow)