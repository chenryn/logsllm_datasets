本文概述：为了方便初学者进行架构学习，文章从基础开始讲起，以比特币、以太坊、超级账本的架构开始讲起（包括了一部分源码分析）。之后针对P2P现存安全问题进行分析，包括概念层的女巫攻击、Eclipse攻击以及落地DDos攻击。之后依照密码学的知识，详细剖析了部分安全问题的解决方法。
    文章为原创，是我在经过大量的文献阅读已经源码分析后总结的知识，其中可能涉及到部分密码学等不容易理解的问题。大家有需要讨论的请在下方留言！希望我的分析能给大家带来收获！
### 一、三大应用的P2P架构详情
要学会攻击就要懂得详细的机制。而P2P中最精妙的地方就在于其涉及的巧妙之处。具体我们看他们是如何一步一步打造出“区块链P2P网络”这个大厦的。
#### 1 比特币中P2P架构
比特币开启了区块链时代，任何节点开启客户端后即可实现去中心化可信任的比特币交易。然而分布式网络最大的特点就是能够做到无中心化、能够任意接入网络、离开网络等。为了能够做到上述要求，比特币设计了如下三种节点发现方式。
**（1）种子节点的采用**
如同我上一篇文章所介绍的内容一样，比特币采用了“全分布式非结构化”的网络---[区块链安全—区块链P2P网络安全密码协议分析](https://xz.aliyun.com/t/2965#toc-5)。为了方便节点间获取整个网络的详细信息，比特币设定了一部分期稳定的节点硬编码至代码中。这些节点在初始启动时，提供最初接入网络的入口节点。新节点通过这些稳定节点作为中介连接其他节点，以达到获取整个网络节点地址的所有列表。这些地址又被称为比特币的初始化加载种子地址。
**（2）地址广播手法**
当新加入的节点连入网络后，其就可以以这个节点作为中介来帮助其他新点接入网络（老带新政策）。这个帮助的过程称为 **地址广播** 。包括：
  * 主动广播（push）
    在比特币源码中，其采用了Net.AdvertiseLocal()函数push自己。这是单项过程，其他节点接收到推送的地址信息后会将内容保存在本地并且不会做出回应。
  * 主动拉取（pull）
    主动将自身地址告诉周围节点还不足以保证network中所有的节点均获得网络结构。这里还需要进行主动拉取的过程。
    在区块链源码中，比特币通过Net.GetAddresses( )方法主动拉去地址。节点A只向周围节点发出请求（例如向B请求），并接受到B发回的其本地存储的所有收录的地址信息。并且此请求只进行一次（避免网络资源浪费）。同时网路中所有的节点均可以向周围节点发出请求。PS：**这里就特别像计算机网络中的洪范，我认为是有所借鉴**
比特币的两种地址获取方式是独立的，这样可以防止攻击者通过伪造大量假的地址并广泛散播，导致正常节点无法接入比特币网络或接入虚假网络。
**（3） 地址数据库方法**
在比特币节点的本地中，存在地址数据库的概念。为了避免每次接入网络都进行大量的地址申请，比特币客户端使用的是levelDB格式储存数据将获取的节点信息保存在
peers.dat
本地文件中。A节点会定时向周围节点发送Ping指令，其余节点收到后会进行随机数回复。倘若节点持续了超过20min没有响应，那么A就会认为其邻居已经断开。除此之外，比特币客户端启动后会发起定时循环任务，检查连接节点是否在线，并将失败的节点保存在
banlist.dat 本地文件中。
#### 2 以太坊中P2P架构
比特币作为区块链的鼻祖对后续的应用有着先天的影响。以太坊就收到了比特币架构的影响。所以以
太坊不仅能够实现类似比特币的交易系统，更希望构建基于区块链的生态环境，拓展依赖于以太坊衍生的分布式应用。由上文我们知道，以太坊使用了“全分布式结构化”的网络架构，这些应用的实现依赖于节点可以根据需要精确查找另一个节点地址的功能，而非结构化
P2P网络结构无法满足。我们下面就谈一谈以太坊是如何发现周围节点的。
**（1）种子节点**
如同比特币的设计理念相同，以太坊的初始也是有其“硬编码种子节点”。它由节点信息、网络地址 URL
和数据协议三部分构成：节点信息、网络地址url、tcp端口号或者udp发现端口号。入下图所示。
初次之外，除了上图中的几个官方种子节点外，以太坊为了提高网络搭建的效率，选取了优质的个人节点并打包成static-nodes.json
文件后发布。以太坊用户下载后可以连 接到更多国内节点，加快以太坊国内网络速度。类似的配置文 件还有 trusted-nodes.json
保存信任节点信息，这两个文件不限定内容，只限定文件名及格式，以固定文件名的形式硬编码保存在配置文件内，配置的节点会在以太坊启动时加载。
**（2）地址数据库**
以太坊同样采用了地址数据库来保存历史节点。其使用leveldb作为历史文件格式，并生成多个*.ldb文件。对于首次连接以太坊网络的节点，地址数据库是空的，后续随着地址广播，逐渐填满地址列表。而对于多次连接的节点，其启动使用了`loadSeedNodes(
)`方法将种子节点和历史数据一起读取，快速高效连接以太坊 P2P 网络。
#### 3 HyperLedger Fabric中P2P架构
而我们通过之前的知识了解到，区块链与以太坊均是公链的形式存在。而我们在实际的开发项目应用中很少会采取公链的形式。为了实现解决某系特殊场合的要求，超级账本孕育而生。虽然
Fabric 没有实现去中心化，却可以通过划分不 同节点之间的工作负载实现优化网络效率。为了保证区块链网 络的安全性、可信赖性及可测量性，Fabric 采用
Gossip 作为 P2P 网络传播协议。
在Fabric源码中我们可以看到：
而Gossip 支持超级节点网络架构，超级节点具有稳定的网络服务和计算处理能力。超级节点负责Fabric的交易排序和新区块广播功能，维护 Fabric
网络信息更新、节点列表管理等内容。
简单来说，Gossip协议如同上述区块链、以太坊中的方法一样，它保证了新区块能够顺利的加入网络。
下面我们就具体的分析一下Fabric中的源码。
**（1）种子节点**  
Fabric采用的不是硬编码的形式，而是配置文件的形式通过 core.yaml 配置文件进行配置。  
而这种机制可以保证系统在无需重启的情况下更新配置信息并使其生效。
而Fabric中种子节点的加载流程如下：
  * 首先节点启动Gossip 服务 `NewGossipService( )`方法，在服务 启动过程中调用 `g.connect2BootstrapPeers( )`方法加载种子节点。入下图：
    func NewGossipService(conf *Config, s *grpc.Server, sa api.SecurityAdvisor,
        mcs api.MessageCryptoService, selfIdentity api.PeerIdentityType,
        secureDialOpts api.PeerSecureDialOpts) Gossip {
        var err error
        lgr := util.GetLogger(util.LoggingGossipModule, conf.ID)
        g := &gossipServiceImpl{
            selfOrg:               sa.OrgByPeerIdentity(selfIdentity),
            secAdvisor:            sa,
            selfIdentity:          selfIdentity,
            presumedDead:          make(chan common.PKIidType, presumedDeadChanSize),
            disc:                  nil,
            mcs:                   mcs,
            conf:                  conf,
            ChannelDeMultiplexer:  comm.NewChannelDemultiplexer(),
            logger:                lgr,
            toDieChan:             make(chan struct{}, 1),
            stopFlag:              int32(0),
            stopSignal:            &sync.WaitGroup{},
            includeIdentityPeriod: time.Now().Add(conf.PublishCertPeriod),
        }
        g.stateInfoMsgStore = g.newStateInfoMsgStore()
        g.idMapper = identity.NewIdentityMapper(mcs, selfIdentity, func(pkiID common.PKIidType, identity api.PeerIdentityType) {
            g.comm.CloseConn(&comm.RemotePeer{PKIID: pkiID})
            g.certPuller.Remove(string(pkiID))
        }, sa)
        if s == nil {
            g.comm, err = createCommWithServer(conf.BindPort, g.idMapper, selfIdentity, secureDialOpts, sa)
        } else {
            g.comm, err = createCommWithoutServer(s, conf.TLSCerts, g.idMapper, selfIdentity, secureDialOpts, sa)
        }
        if err != nil {
            lgr.Error("Failed instntiating communication layer:", err)
            return nil
        }
        g.chanState = newChannelState(g)
        g.emitter = newBatchingEmitter(conf.PropagateIterations,
            conf.MaxPropagationBurstSize, conf.MaxPropagationBurstLatency,
            g.sendGossipBatch)
        g.discAdapter = g.newDiscoveryAdapter()
        g.disSecAdap = g.newDiscoverySecurityAdapter()
        g.disc = discovery.NewDiscoveryService(g.selfNetworkMember(), g.discAdapter, g.disSecAdap, g.disclosurePolicy)