随后，系统会使用 **nt!ExCompareExchangeCallBack** 将新分配的EXCALLBACKROUTINEBLOCK添加到
**nt!PspCreateProcessNotifyRoutine**
数组中的空闲（NULL）位置（需要确保数组没有超过64个元素大小限制）。最后，对应的全局计数值会增加计数，
**nt!PspNotifyEnableMask** 中也会设置一个全局标识，表明系统中注册了用户指定类型的回调函数。
**3.3 其他回调**
幸运的是，线程以及映像创建回调与进程回调非常类似，它们使用了相同的底层数据结构。唯一的区别在于，线程创建/终止回调存储在nt!PspCreateThreadNotifyRoutine数组中，而映像加载通知回调存储在
**nt!PspLoadImageNotifyRoutine** 中。
**四、实用脚本**
****
现在我们可以将这些信息综合利用起来。我们可以使用WinDbg创建一个简单便捷的脚本来自动枚举进程、线程以及镜像回调例程。
我选择使用其他方法，而不去使用WinDbg自带的脚本引擎来完成这个任务。WinDbg中有个非常棒的第三方扩展PyKd，可以在WinDbg中运行Python脚本。安装这个扩展的过程非常简单，你只需要使用正确版本的Python即可（如64位的WinDbg需要安装64位版）。
    ''' Module Name: enumwincallbacks.py
    Abstract:
        Iterates over the nt!PspCreateProcessNotifyRoutine,
        nt!PspCreateThreadNotifyRoutine, and nt!PspLoadImageNotifyRoutine 
        callback arrays.
    Requirements:
        WinDbg: https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/
        PyKd: https://pykd.codeplex.com/
    Author:
        Nemanja (Nemi) Mulasmajic 
            http://triplefault.io
    ''' from pykd import * import argparse
    Discovers the size of a pointer for this system.
    SIZEOFPOINTER = (8 if (is64bitSystem()) else 4)
    The number of potential callback objects in the array.
    MAXIMUMNUMBEROF_CALLBACKS = 0
    def readptr(memory): ''' Read a pointer of memory. ''' try: return (ptrPtr(memory)) except: print "ERROR: Could not read {} bytes from location {:#x}.".format(SIZEOF_POINTER, memory) exit(-4)
    def read_dword(memory): ''' Read a DWORD of memory. ''' try: return (ptrDWord(memory)) except: print "ERROR: Could not read 4 bytes from location {:#x}.".format(memory) exit(-5)
    def getaddressfromfastref(EXFASTREF): ''' Given a EXFAST_REF structure, this function will extract the pointer to the raw object. '''
    # kd> dt nt!_EX_FAST_REF
    #   +0x000 Object           : Ptr64 Void
    #   +0x000 RefCnt           : Pos 0, 4 Bits
    #   +0x000 Value            : Uint8B
    # Remove the last 4 bits of the pointer.
    return ((_EX_FAST_REF >> 4) = 6000) else 8)
    For process callbacks.
    if args.processcallbacks: PspCreateProcessNotifyRoutine = getaddressfromsymbol(mod, "PspCreateProcessNotifyRoutine") PspCreateProcessNotifyRoutineCount = readdword(getaddressfromsymbol(mod, "PspCreateProcessNotifyRoutineCount"))
    if ver.buildNumber >= 6001: # Vista SP1+ 
        PspCreateProcessNotifyRoutineExCount = read_dword(get_address_from_symbol(mod, "PspCreateProcessNotifyRoutineExCount"))
    else:
        PspCreateProcessNotifyRoutineExCount = 0
    print "nIterating over the nt!PspCreateProcessNotifyRoutine array at {:#x}.".format(PspCreateProcessNotifyRoutine)
    print "Expecting {} nt!PspCreateProcessNotifyRoutineCount and {} nt!PspCreateProcessNotifyRoutineExCount entries.".format(PspCreateProcessNotifyRoutineCount, PspCreateProcessNotifyRoutineExCount)
    print spacer
    enumerate_over_callbacks(PspCreateProcessNotifyRoutine)
    print spacer
    For thread callbacks.
    if args.threadcallbacks: PspCreateThreadNotifyRoutine = getaddressfromsymbol(mod, "PspCreateThreadNotifyRoutine") PspCreateThreadNotifyRoutineCount = readdword(getaddressfromsymbol(mod, "PspCreateThreadNotifyRoutineCount"))
    if ver.buildNumber >= 10240: # Windows 10+
        PspCreateThreadNotifyRoutineNonSystemCount = read_dword(get_address_from_symbol(mod, "PspCreateThreadNotifyRoutineNonSystemCount"))
    else:
        PspCreateThreadNotifyRoutineNonSystemCount = 0
    print "nIterating over the nt!PspCreateThreadNotifyRoutine array at {:#x}.".format(PspCreateThreadNotifyRoutine)
    print "Expecting {} nt!PspCreateThreadNotifyRoutineCount and {} nt!PspCreateThreadNotifyRoutineNonSystemCount entries.".format(PspCreateThreadNotifyRoutineCount, PspCreateThreadNotifyRoutineNonSystemCount)
    print spacer
    enumerate_over_callbacks(PspCreateThreadNotifyRoutine)
    print spacer
    For image callbacks.
    if args.imagecallbacks: PspLoadImageNotifyRoutine = getaddressfromsymbol(mod, "PspLoadImageNotifyRoutine") PspLoadImageNotifyRoutineCount = readdword(getaddressfromsymbol(mod, "PspLoadImageNotifyRoutineCount"))
    print "nIterating over the nt!PspLoadImageNotifyRoutine array at {:#x}.".format(PspLoadImageNotifyRoutine)
    print "Expecting {} nt!PspLoadImageNotifyRoutineCount entries.".format(PspLoadImageNotifyRoutineCount)
    print spacer
    enumerate_over_callbacks(PspLoadImageNotifyRoutine)
    print spacer
这个脚本读起来应该没什么困难，我已经尽量在代码中给出了足够多的注释。这段代码的兼容性也不错，可以兼容从XP以来的所有Windows系统（32位及64位都兼容）。
在WinDbg中使用“!py”命令运行这段脚本后，输出结果如下所示：
    kd> !py "C:UsersrootDesktopWinDbgScriptsenumwin_callbacks.py"
    Iterating over the nt!PspCreateProcessNotifyRoutine array at 0xfffff8036e6042d0.
    Expecting 6 nt!PspCreateProcessNotifyRoutineCount and 4 nt!PspCreateProcessNotifyRoutineExCount entries.
    0: EXCALLBACKROUTINEBLOCK 0xffffc98b8c84b660 RundownProtect: 0x20 Function: 0xfffff8036e3979f0 (nt!ViCreateProcessCallback) Context: 0x0 (Normal) 1: EXCALLBACKROUTINEBLOCK 0xffffc98b8c8f1410 RundownProtect: 0x20 Function: 0xfffff8099e9358a0 (cng!CngCreateProcessNotifyRoutine) Context: 0x0 (Normal) 2: EXCALLBACKROUTINEBLOCK 0xffffc98b8dd607a0 RundownProtect: 0x20 Function: 0xfffff8099f33bcf0 (WdFilter!MpCreateProcessNotifyRoutineEx) Context: 0x6 (Extended #2) 3: EXCALLBACKROUTINEBLOCK 0xffffc98b8dd6db60 RundownProtect: 0x20 Function: 0xfffff8099de7a0c0 (ksecdd!KsecCreateProcessNotifyRoutine) Context: 0x0 (Normal) 4: EXCALLBACKROUTINEBLOCK 0xffffc98b8d7c9670 RundownProtect: 0x20 Function: 0xfffff8099ee88080 (tcpip!CreateProcessNotifyRoutineEx) Context: 0x6 (Extended #2) 5: EXCALLBACKROUTINEBLOCK 0xffffc98b8e05b070 RundownProtect: 0x20 Function: 0xfffff8099f2ec860 (iorate!IoRateProcessCreateNotify) Context: 0x2 (Extended) 6: EXCALLBACKROUTINEBLOCK 0xffffc98b8e0736a0 RundownProtect: 0x20 Function: 0xfffff8099e8c8b30 (CI!IPEProcessNotify) Context: 0x0 (Normal) 7: EXCALLBACKROUTINEBLOCK 0xffffc98b8cb9e440 RundownProtect: 0x20 Function: 0xfffff8099f4e2e60 (dxgkrnl!DxgkProcessNotify) Context: 0x2 (Extended) 8: EXCALLBACKROUTINEBLOCK 0xffffc98b8e3ed150 RundownProtect: 0x20 Function: 0xfffff809a0e13ecc (vm3dmp+13ecc) Context: 0x0 (Normal) 9: EXCALLBACKROUTINE_BLOCK 0xffffc98b8eec1a30 RundownProtect: 0x20 Function: 0xfffff809a07ebbe0 (peauth+2bbe0)
    Context: 0x0 (Normal)
    Iterating over the nt!PspCreateThreadNotifyRoutine array at 0xfffff8036e6040d0.
    Expecting 2 nt!PspCreateThreadNotifyRoutineCount and 0 nt!PspCreateThreadNotifyRoutineNonSystemCount entries.
    0: EXCALLBACKROUTINEBLOCK 0xffffc98b8dd627a0 RundownProtect: 0x20 Function: 0xfffff8099f33c000 (WdFilter!MpCreateThreadNotifyRoutine) Context: 0x0 (Normal) 1: EXCALLBACKROUTINEBLOCK 0xffffc98b8c8df4a0 RundownProtect: 0x20 Function: 0xfffff809a0721ae0 (mmcss!CiThreadNotification)
    Context: 0x0 (Normal)
    Iterating over the nt!PspLoadImageNotifyRoutine array at 0xfffff8036e603ed0.
    Expecting 2 nt!PspLoadImageNotifyRoutineCount entries.
    0: EXCALLBACKROUTINEBLOCK 0xffffc98b8dd617a0 RundownProtect: 0x20 Function: 0xfffff8099f33fa50 (WdFilter!MpLoadImageNotifyRoutine) Context: 0x0 (Normal) 1: EXCALLBACKROUTINEBLOCK 0xffffc98b8df671c0 RundownProtect: 0x20 Function: 0xfffff8099fb45d60 (ahcache!CitmpLoadImageCallback)
    Context: 0x0 (Normal)
**  
**
**五、总结**
****
理清Windows中系统回调函数的工作原理后，我们就可以做许多有趣的事情。如上所述，我们可以编个程序，遍历每个回调数组，探测已注册的所有回调。这对于安全取证来说非常重要。
此外，这些底层数组不受[PatchGuard](https://en.wikipedia.org/wiki/Kernel_Patch_Protection)的保护。为了开发与64位系统上PatchGuard完美兼容的驱动，反病毒产品或多或少都需要注册回调函数，因此恶意软件可以动态禁用（或者替换）已注册的这些回调函数，以禁用安全防护服务。还有其他可能性能够实现相同目的。
非常感谢[ReactOS](https://www.reactos.org/)精心准备的文档资料。需要着重感谢的是ReactOS的[Alex
Ionescu](http://www.alex-ionescu.com/)，我用到的大多数结构都是他识别出来的。此外，也顺便感谢[PyKd](https://pykd.codeplex.com/)的[开发者](https://pykd.codeplex.com/team/view)，在我看来，这个工具比WinDbg原生脚本接口更加好用。
如果读者有需要的话，欢迎提出意见及建议。