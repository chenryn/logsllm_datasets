# 【技术分享】Android内核漏洞利用技术实战：环境搭建&栈溢出实战
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[for_while](http://bobao.360.cn/member/contribute?uid=2553709124)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
Android的内核采用的是 Linux 内核，所以在Android 内核中进行漏洞利用其实和在 一般的
x86平台下的linux内核中进行利用差不多。主要区别在于Android下使用的是arm汇编以及环境的搭建方面。本文对我最近的实践做一个分享，其实很简单。
**内核调试环境搭建**
搭建平台:  ubuntu 16.04
这里使用android模拟器来进行内核调试。首先下载内核代码
    git clone https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish.git
然后下载github上的一个[安卓漏洞利用的项目](https://github.com/Fuzion24/AndroidKernelExploitationPlayground)，
    git clone https://github.com/Fuzion24/AndroidKernelExploitationPlayground.git kernel_exploit_challenges
然后使用项目中的[patch文件](https://raw.githubusercontent.com/Fuzion24/AndroidKernelExploitationPlayground/master/kernel_build/debug_symbols_and_challenges.patch)把
patch 内核编译配置，来把项目中的带漏洞的模块编译进linux内核
    git am --signoff 
然后把 sdk解压
    tar xvf android-sdk_r24.4.1-linux.tgz
把 android-sdk-linux/tools 加入环境变量，把下面的命令添加到 ~/.bashrc 的末尾
    export PATH=/home/haclh/hacktools/android-sdk-linux/tools:$PATH
然后重新打开一个shell, 使用下面的命令 
    android
然后把下面标注的两个下载下来
下载完后。首先查看下载的镜像文件
    $android list targets
    Available Android targets:
    ----------    id: 1 or "android-19"
         Name: Android 4.4.2
         Type: Platform
         API level: 19
         Revision: 4
         Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in
然后创建 模拟器
    android create avd --force -t "android-19" -n kernel_challenges
然后进入 goldfish 目录，使用下面的命令来使用我们的内核来运行模拟器，并在 1234 端口起一个 gdbserver 来方便进行 内核调试
    emulator -show-kernel -kernel arch/arm/boot/zImage -avd kernel_challenges -no-boot-anim -no-skin -no-audio -no-window -qemu -monitor unix:/tmp/qemuSocket,server,nowait -s
第一次运行有类似的结果：
    $ emulator -show-kernel -kernel arch/arm/boot/zImage -avd kernel_challenges -no-boot-anim -no-skin -no-audio -no-window -qemu -monitor unix:/tmp/qemuSocket,server,nowait -s
    WARNING: userdata image already in use, changes will not persist!
    Creating filesystem with parameters:
        Size: 576716800
        Block size: 4096
        Blocks per group: 32768
        Inodes per group: 7040
        Inode size: 256
        Journal blocks: 2200
        Label: 
        Blocks: 140800
        Block groups: 5
        Reserved block group size: 39
    Created filesystem with 11/35200 inodes and 4536/140800 blocks
    WARNING: cache image already in use, changes will not persist!
    Creating filesystem with parameters:
        Size: 69206016
        Block size: 4096
        Blocks per group: 32768
        Inodes per group: 4224
        Inode size: 256
        Journal blocks: 1024
        Label: 
        Blocks: 16896
        Block groups: 1
        Reserved block group size: 7
    Created filesystem with 11/4224 inodes and 1302/16896 blocks
    ......................
    ......................
    ......................
为了便于后面的操作我们需要把 交叉编译工具链 添加到环境变量里。把下面的命令添加到 ~/.bashrc 的末尾
    export
    PATH=/home/haclh/hacktools/arm-linux-androideabi-4.6/bin/:$PATH
然后重新开个 shell, 进入到 goldfish 目录，加载 vmlinux 以便调试内核
    arm-linux-androideabi-gdb vmlinux
如果一切正常，应该可以得到下面的类似输出
    GNU gdb (GDB) 7.3.1-gg2
    Copyright (C) 2011 Free Software Foundation, Inc.
    License GPLv3+: GNU GPL version 3 or later 
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
    and "show warranty" for details.
    This GDB was configured as "--host=x86_64-apple-darwin --target=arm-linux-android".
    For bug reporting instructions, please see:
    ...
    Reading symbols from /goldfish/vmlinux...done.
    (gdb)
然后连接 模拟器里面的 调试端口
    (gdb) target remote :1234
    Remote debugging using :1234
    cpu_v7_do_idle () at arch/arm/mm/proc-v7.S:74
    74movpc, lr
    (gdb)
如果能看到这样的输出说明已经可以正常进行内核调试了。
**内核栈溢出漏洞利用**
首先看看漏洞代码，
kernel_exploit_challenges/challenges/stack_buffer_overflow/module/stack_buffer_overflow.c:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define MAX_LENGTH 64
    MODULE_LICENSE("GPL");
    MODULE_AUTHOR("Ryan Welton");
    MODULE_DESCRIPTION("Stack Buffer Overflow Example");