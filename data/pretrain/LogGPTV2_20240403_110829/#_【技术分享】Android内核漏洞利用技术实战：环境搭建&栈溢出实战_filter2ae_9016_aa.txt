# 【技术分享】Android内核漏洞利用技术实战：环境搭建与栈溢出实战

##### 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义请以原文为准。

作者：[for_while](http://bobao.360.cn/member/contribute?uid=2553709124)  
预估稿费：300 RMB  
投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 前言
Android 内核基于 Linux，因此在 Android 内核中进行漏洞利用与在 x86 平台下的 Linux 内核中类似。主要区别在于 Android 使用 ARM 汇编以及环境搭建的不同。本文将分享我在近期实践中的经验，其实过程相对简单。

## 内核调试环境搭建

### 搭建平台
- Ubuntu 16.04

### 步骤
1. **下载内核代码**
   ```sh
   git clone https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish.git
   ```

2. **克隆安卓漏洞利用项目**
   ```sh
   git clone https://github.com/Fuzion24/AndroidKernelExploitationPlayground.git kernel_exploit_challenges
   ```

3. **应用补丁文件**
   ```sh
   git am --signoff <(curl -sSL https://raw.githubusercontent.com/Fuzion24/AndroidKernelExploitationPlayground/master/kernel_build/debug_symbols_and_challenges.patch)
   ```

4. **解压 SDK**
   ```sh
   tar xvf android-sdk_r24.4.1-linux.tgz
   ```

5. **设置环境变量**
   在 `~/.bashrc` 文件末尾添加以下内容：
   ```sh
   export PATH=/home/haclh/hacktools/android-sdk-linux/tools:$PATH
   ```
   然后重新打开一个 shell，并运行：
   ```sh
   source ~/.bashrc
   ```

6. **安装必要的工具**
   运行 `android` 命令并下载所需的镜像文件：
   ```sh
   android list targets
   ```
   查看可用的 Android 目标，例如：
   ```sh
   Available Android targets:
   ----------    id: 1 or "android-19"
        Name: Android 4.4.2
        Type: Platform
        API level: 19
        Revision: 4
        Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in
   ```

7. **创建模拟器**
   ```sh
   android create avd --force -t "android-19" -n kernel_challenges
   ```

8. **启动模拟器**
   进入 goldfish 目录，并使用以下命令启动模拟器，并在 1234 端口启动 GDB 服务器以便进行内核调试：
   ```sh
   emulator -show-kernel -kernel arch/arm/boot/zImage -avd kernel_challenges -no-boot-anim -no-skin -no-audio -no-window -qemu -monitor unix:/tmp/qemuSocket,server,nowait -s
   ```

9. **配置交叉编译工具链**
   将交叉编译工具链添加到环境变量中，在 `~/.bashrc` 文件末尾添加以下内容：
   ```sh
   export PATH=/home/haclh/hacktools/arm-linux-androideabi-4.6/bin/:$PATH
   ```
   然后重新打开一个 shell，并进入 goldfish 目录，加载 `vmlinux` 以便调试内核：
   ```sh
   arm-linux-androideabi-gdb vmlinux
   ```

10. **连接 GDB 服务器**
    在 GDB 中连接模拟器的调试端口：
    ```sh
    (gdb) target remote :1234
    Remote debugging using :1234
    cpu_v7_do_idle () at arch/arm/mm/proc-v7.S:74
    74 mov pc, lr
    (gdb)
    ```

如果看到类似输出，说明可以正常进行内核调试了。

## 内核栈溢出漏洞利用

### 漏洞代码
查看漏洞代码：
```c
// kernel_exploit_challenges/challenges/stack_buffer_overflow/module/stack_buffer_overflow.c
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/sched.h>
#include <linux/string.h>
#include <linux/fs.h>

#define MAX_LENGTH 64

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Ryan Welton");
MODULE_DESCRIPTION("Stack Buffer Overflow Example");
```

接下来，我们将详细介绍如何利用这个栈溢出漏洞。