nodes, SPURT on average can generate 145, 83, 42, and 12
beacon outputs per minute.
We will try to compare with Drand and Hydrand, but there
is a subtlety here. Since Hydrand assumes a synchronous
network, their throughput is directly decided by a hard-coded
parameter, the estimated network delay upper bound. A lower
estimate improves throughput but is riskier since synchronous
protocols lose security when the delay bound is violated.
Thus, we ﬁrst look for the smallest network delay parameter
that does not break their implementation and then measure
throughput with that delay parameter. The throughput we
found for Hydrand in our experiment is much lower than what
was reported in [3], so we simply use Hydrand’s reported
throughput in Figure 6 in their favor. Interestingly, SPURT
achieves signiﬁcantly better throughput than Hydrand despite
having only slightly better bandwidth. We believe this is in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
112512
)
n
o
c
a
e
b
/
B
K
(
h
t
d
i
w
d
n
a
B
250
200
150
100
50
0
SPURT
Drand
Hydrand
16
32
64
Number of nodes
128
Figure 5: Average bandwidth usage (sent + received data) measured
in Kilobytes per beacon output with varying number of nodes.
Time taken (in milliseconds)
Protocol Phase
Commitment
Aggregation
Agreement
Reconstruction
n = 16
9.72
108.08
120.77
188.91
n = 32
19.53
371.5
240.22
359.39
n = 64
39.00
1447.07
479.74
702.38
n = 128
78.89
5728.5
957.66
1392.21
Table IV: Time taken (in milliseconds) to compute different crypto-
graphic functions required in the different phases of SPURT.
part because SPURT is partially synchronous and can make
progress at
the speed of true network delay. In contrast,
Hydrand assumes synchrony and needs to run at the speed
of a conservatively chosen network delay estimate.
The deployed implementation of Drand hard-codes its
throughput to be two beacon values per minute (one per 30
seconds). Hence, we compute Drand’s throughput by mea-
suring the time it takes Drand to produce continuous beacon
outputs, which is in their favor. In our experiments, SPURT
slightly outperforms Drand in terms of throughput despite
having a higher communication cost. There may be imple-
mentation inefﬁciencies in Drand that hindered its throughput.
Also, we could only evaluate Drand for up to 32 nodes, as in
our experiments, the DKG step in Drand keeps aborting for
64 or more nodes, even when we choose very large estimates
for the network delay.
Computation cost. Table IV presents the concrete time re-
quired for each of the four phases. As expected, the aggrega-
tion phase requires the leader to perform a quadratic amount
of computation while the computation times for the other three
phases scale linearly with the number of nodes. But since we
pipeline the aggregation phase by sending the commitments
to the leader in advance (cf. §V-E), the aggregation phase is
not the bottleneck in the critical path.
VIII. RELATED WORK
Based on the setup assumption, existing distributed pro-
tocols can be classiﬁed into two categories; protocols with
trusted setup and protocols with transparent setup. Protocols
with a trusted setup involve generation of public parameters
that embed a secret trapdoor. These parameters can either be
generated by a trusted third party (hence the name trusted
)
n
i
m
/
n
o
c
a
e
b
(
t
u
p
h
g
u
o
r
h
T
150
100
50
0
SPURT
Drand
Hydrand
16
32
64
Number of nodes
128
Figure 6: Average number of random beacon generated per minute
with varying number of nodes.
setup) or by running a maliciously secure multi-party computa-
tion protocol, often a Distributed Key Generation (DKG) pro-
tocol. Note that protocols without a trusted setup assumption
may also require a step to generate some uniformly random
public parameters. The subtle difference is that these public
parameters do not contain secrets or trapdoors (hence the name
transparent setup) and it is hence a milder assumption.
Protocols in the ﬁrst category include [2], [13], [21], [23],
[29], [37], [69]. Most of them follow the approach of Cachin et
al. [21] where the random beacon output at any given epoch is
a unique threshold signature on the hash of the epoch number.
Cachin et al. assumes a trusted setup phase. Dﬁnity [23]
adopts the partially asynchronous DKG of Groth [43] while
Drand adopts the synchronous DKG of Gennaro et al. [38].
Aleph [37] observes that a full DKG is not required and pro-
poses a customized setup protocol. After the setup phase, all
four protocols tolerate asynchrony and have a communication
cost of O(λn2) per beacon output.
Protocols in the transparent setup category include [8], [25],
[32], [40], [51], [58], [65]. Most relevant to our work are
Scrape [25] and Hydrand [65]. Both Scrape and Hydrand as-
sume the underlying network is synchronous. Scrape [25] im-
proves the computation complexity of PVSS protocol of [66]
from O(n2) exponentiation to O(n) exponentiation, and uses
their PVSS over a broadcast channel to generate distributed
randomness. In particular, for every beacon output in Scrape,
each node uses the broadcast channel to share their secret.
Once t + 1 nodes share their secret, nodes reconstruct the
secrets and combine them to produce the beacon output. In
Scrape, each node uses the broadcast channel to share O(λn)-
sized message per beacon output. With existing broadcast
channel implementations [], the total communication cost per
beacon output is O(λn4). Also, for every beacon output, each
node performs O(n2) exponentiations.
Hydrand [65] modiﬁes the Scrape protocol to remove the
broadcast channel. Unlike Scrape, in each epoch of Hydrand,
only a leader node shares a secret using Scrape’s PVSS.
Hydrand has an initialization phase where each node shares a
secret using PVSS, which costs O(λn3 log n) communication.
After the initialization phase, for every beacon, Hydrand has
a total communication and computation cost of O(λn2) and
O(n), respectively. One major disadvantage of Hydrand is that
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
122513
it only provides imperfect unpredictability, i.e., an adversary
may predict the beacon outputs for up to t future epochs.
A concurrent work by Bhat et al. [13] presents GRandPiper,
which improves upon Hydrand to have one-half fault tolerance,
but requires a trusted setup to generate q-SDH parameters.
To ﬁx the unpredictability issue of Hydrand and GRandPiper,
Bhat et al. [13] further presents BRandPiper, where the leader
shares n secrets in a single epoch and nodes reconstruct a
random beacon by accumulating secrets from t+1 nodes. As a
trade-off, BRandPiper increases the worst-case communication
cost to O(λn3) per beacon output.
Randherd [69] uses Randhound as a one-time setup to par-
tition nodes into smaller subgroups of size c, and additionally
set up keys for threshold signatures. The total complexity of
Randherd is O(λc2log n). Randherd, as presented, is not bias-
resistant as a malicious leader can abort the protocol after
observing the beacon output. It requires additional mechanisms
to achieve bias-resistance. The committee sampling technique
is orthogonal to random beacon designs and can be applied
to most random beacon protocols. It is effective in improving
scalability when there are a very large number of nodes at the
cost of slightly reducing fault tolerance.
protocols
In addition to the above mentioned protocols, other
include Bitcoin’s Proof-of-
random beacon
Work (PoW)
[58], Proof-of-Delay [20], Algorand [40],
Ouroboros [51], Ouroboros Praos [32], etc. Bitcoin, Algorand
and Ouroboros Praos are not bias-resistant as a malicious
adversary can decide to discard undesirable beacon outputs
(even though they are still secure as blockchain protocols).
Protocols based on Proof-of-Delay rely on strong and new
assumptions about veriﬁable time-lock puzzles [10], [26],
[64] or Veriﬁable Delay Functions [16].
PVSS schemes without Random Oracle. PVSS schemes
in the plain model, i.e., without random oracle, were ﬁrst
proposed in [63] and later improved in [25], [46]–[48]. These
schemes either rely on non-standard assumption or have high
computation cost. For example, the schemes due to Ruiz and
Villar [63] and Jhanwar et al. [48] are based on the hard-
ness of Decisional Composite Residuosity assumption [59]
and the veriﬁer in these schemes need to perform O(n2)
exponentiations. The schemes from [46] and [25] rely on the
Decisional Bilinear Square Assumption and require 2n pairing
operations for each veriﬁer. Jhanwar [47] reduces the number
of pairing operation needed during veriﬁcation to 4 using the
even less standard (n, t)-multi-sequence of exponents Difﬁe-
Hellman assumption [47]. Our new PVSS scheme relies on
the standard Decisional Bilinear Difﬁe-Hellman assumption
and achieves similar performance as Scrape, which assumes
the less standard hardness of Decisional Bilinear Squaring
problem. Both in our PVSS scheme and Scrape’s PVSS
scheme, a veriﬁer needs to perform n exponentiations and 2n
pairings to validate shares for all the nodes.
Concurrently and independently, Gurkan et al. [44] proposes
a modiﬁcation to the PVSS scheme of Scrape and uses it to
design a DKG protocol. The PVSS scheme of [44] assumes
hardness of the Symmetric External Difﬁe-Hellman (SXDH)
problem in Type-III pairing groups. The DKG protocol of [44]
requires each node to broadcast log n messages of size O(n)
each, and n messages of O(1) size each. Hence, it is not
immediately suitable for improving SPURT.
IX. CONCLUSION AND FUTURE DIRECTIONS
We have presented SPURT, an efﬁcient distributed random-
ness beacon protocol with a transparent setup, i.e., trapdoor-
free public parameters. SPURT guarantees that each beacon
output is unpredictable, bias-resistant, and publicly veriﬁable,
and provides these properties in a partially synchronous net-
work against a malicious adversary controlling up to one-third
of the total nodes. SPURT has amortized total communication
of O(λn2). Computation wise, each node performs O(n)
group exponentiations per beacon output. While designing
SPURT, we design a publicly-veriﬁable secret sharing (PVSS)
scheme whose security relies on the standard Decisional
bilinear Difﬁe-Hellman assumption and does not require a
Random oracle.
An interesting question for future work is whether it is
possible to design a randomness beacon protocol with optimal
fault tolerance and sub-quadratic communication complexity
(possibly with a trusted setup). Note that protocols that sample
subsets can be easily made sub-quadratic in the trusted setup
phase. But such protocols come with reduced fault tolerance.
It is interesting to study whether we can design a sub-quadratic
protocol that does not resort to subset sampling. On the ﬂip
side, it would also be very interesting to show study commu-
nication lower bound for randomness beacon. Similar lower
bounds for Byzantine agreement or multiparty computation
may be good starting points towards that direction. One may
also try to extend SPURT to fully asynchronous networks.
The major hurdle we encounter is that consensus (SMR)
protocols in the fully asynchronous network require shared
randomness [36], which creates a circularity.
ACKNOWLEDGMENTS
The authors would like to thank Amit Agarwal, Adithya
Bhat, Aniket Kate, Jong Chan Lee, Kartik Nayak, Nibesh
Shrestha, Zhuolun Xiang, Tom Yurek, and the anonymous
reviewers and our shepherd Christian Cachin of IEEE S&P
for helpful discussions and suggestions related to the paper.
REFERENCES
[1] “bls12381,” 2020. [Online]. Available: https://github.com/ConsenSys/
gnark-crypto/tree/master/ecc/bls12-381
[2] “Drand - a distributed randomness beacon daemon,” 2020, https://github.
com/drand/drand.
[3] “Hydrand,”
PhilippSchindler/HydRand
2020.
[Online].
Available:
https://github.com/
[4] “Proof of stake (pos),” 2020. [Online]. Available: https://docs.ethhub.
io/ethereum-roadmap/ethereum-2.0/proof-of-stake/
[5] I. Abraham, T. H. Chan, D. Dolev, K. Nayak, R. Pass, L. Ren, and
E. Shi, “Communication complexity of byzantine agreement, revisited,”
in Proceedings of the 2019 ACM Symposium on Principles of Distributed
Computing, 2019, pp. 317–326.
[6] B. Adida, “Helios: Web-based open-audit voting.” in USENIX security
symposium, vol. 17, 2008, pp. 335–348.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
132514
[7] M. Al-Bassam, A. Sonnino, S. Bano, D. Hrycyszyn, and G. Danezis,
“Chainspace: A sharded smart contracts platform,” in Proceedings of
the 25th Annual Network and Distributed System Security Symposium,
2017.
[8] S. Azouvi, P. McCorry, and S. Meiklejohn, “Winning the caucus race:
Continuous leader election via public randomness,” arXiv preprint
arXiv:1801.07965, 2018.
[9] T. Baigneres, C. Delerablée, M. Finiasz, L. Goubin, T. Lepoint, and
M. Rivain, “Trap me if you can-million dollar curve.” IACR Cryptol.
ePrint Arch., vol. 2015, p. 1249, 2015.
[10] C. Baum, B. David, R. Dowsley, J. B. Nielsen, and S. Oechsner, “Craft:
Composable randomness and almost fairness from time,” 2020, https:
//eprint.iacr.org/2020/784.
[11] D. J. Bernstein, J. Doumen, T. Lange, and J.-J. Oosterwijk, “Faster batch
forgery identiﬁcation,” in International Conference on Cryptology in
India. Springer, 2012, pp. 454–473.
[12] D. J. Bernstein, T. Lange, and R. Niederhagen, “Dual ec: A standardized
back door,” in The New Codebreakers. Springer, 2016, pp. 256–281.
[13] A. Bhat, N. Shrestha, A. Kate, and K. Nayak, “Randpiper–
reconﬁguration-friendly random beacons with quadratic communica-
tion,” in Proceedings of the 2021 ACM SIGSAC Conference on Computer
and Communications Security, 2021.
[14] G. R. Blakley, “Safeguarding cryptographic keys,” in 1979 International
IEEE,
Workshop on Managing Requirements Knowledge (MARK).
1979, pp. 313–318.
[15] M. Blum, “Coin ﬂipping by telephone a protocol for solving impossible
problems,” ACM SIGACT News, vol. 15, no. 1, pp. 23–27, 1983.
[16] D. Boneh, J. Bonneau, B. Bünz, and B. Fisch, “Veriﬁable delay
Springer,
functions,” in Annual international cryptology conference.
2018, pp. 757–788.
[17] D. Boneh, B. Lynn, and H. Shacham, “Short signatures from the weil
pairing,” in International conference on the theory and application of
cryptology and information security. Springer, 2001, pp. 514–532.
[18] J. Bonneau, J. Clark, and S. Goldfeder, “On bitcoin as a public
randomness source.” IACR Cryptol. ePrint Arch., vol. 2015, p. 1015,
2015.
[19] G. Bracha, “Asynchronous byzantine agreement protocols,” Information
and Computation, vol. 75, no. 2, pp. 130–143, 1987.
[20] B. Bünz, S. Goldfeder, and J. Bonneau, “Proofs-of-delay and random-