### 9.2 Carrier and Service Provider Fuzzing

**Figure 9.3: The third-generation Defensics TLS fuzzer from Synopsys.**

#### 9.2 Carrier and Service Provider Fuzzing

In the past, carriers and service providers were relatively simple entities in the telecommunications industry. However, today, many of these companies are involved in both traffic carriage and providing services to enterprises and consumers. The carrier business primarily focuses on delivering specific data streams to their intended recipients, with increasing use of content-aware protocols like MPLS for traffic labeling and prioritization. Service providers, on the other hand, add value through services such as VoIP, email, or web hosting, often without providing the last-mile connection.

In such environments, untrusted data and users are common, and all customers have access to business-critical services. This can enable malicious attacks on services, either directly or by using the network and identity provided by the service provider. Consequently, the internet service provider (ISP) segment is one of the largest consumers of fuzzing tools. We will focus on two case studies: Voice over IP (VoIP) and WiFi.

#### 9.2.1 VoIP Fuzzing

While enterprise VoIP is just another data service, in telecommunications, it is a critical service set to replace legacy telephony. Building a robust VoIP infrastructure is complex, as the devices themselves often maintain the identities of callers and callees. Theft or compromise of these devices can lead to impersonation and fraud. Attacks on VoIP clients pose a greater threat than disabling centralized servers, which are easier to secure and maintain. VoIP infrastructures handle critical data, often using hop-to-hop encryption rather than end-to-end encryption, making intermediary machines vulnerable to eavesdropping.

**Protocols used in VoIP:**
- **Signaling Protocols:** SIP, SDP, H.323, RTSP, Sigtran (SS7 over IP)
- **Media Protocols:** RTP (and encrypted variants), RTCP
- **Other Protocols:** IPv4/IPv6 (UDP/TCP), SCTP, TLS/SSL, Diameter, Radius, DHCP, DNS, ENUM, SigComp, RSVP

All VoIP implementations must support both client and server functionalities, such as SIP-UAC (User-Agent Client) and SIP-UAS (User-Agent Server). Testing requires two fuzzer configurations, and signaling protocols can operate over both TCP/IP and UDP. Media protocols like RTP are often point-to-point, requiring special considerations for fuzzing.

For more information on VoIP security, see: Peter Thermos & Ari Takanen. (2007). *Securing VoIP Networksâ€”Threats, Vulnerabilities, and Countermeasures*. Boston: Addison-Wesley.

#### 9.2.2 WiFi Fuzzing

Wireless fuzzing has unique requirements due to the nature of wireless devices and networks. Not all wireless devices advertise themselves, necessitating advanced scanning techniques or configuration to detect the device under test (DUT). Wireless networks are inherently open, and with adequate amplifiers, their range can be extended significantly. For example, Bluetooth devices with a nominal 10-meter range have been attacked from up to a kilometer away.

A WiFi fuzzer disrupts 802.11 frames at any layer below IP transport. As frames are broadcast, any device on the same channel can detect and crash. Therefore, tests should be conducted in a physically protected area, such as a Faraday cage. Wireless fuzzers require specialized hardware and certification for use in different markets.

**WiFi Specifications to Test:**
- Management frames
- Open authentication
- QoS parameters
- WEP
- WPA1
- WPA2
- IEEE 802.1X / EAPOL

When testing access points, additional interfaces to consider include:
- IPv4 (ARP, UDP, TCP)
- HTTP
- DHCP

In a study of seven WiFi access points, all could be crashed with some type of fuzzing. Simple DHCP fuzzing was particularly effective, crashing four out of five devices. These results highlight the need for thorough testing, as many devices had not been fuzzed before.

### 9.3 Application Developer Fuzzing

Application fuzzing is a common area, with targets ranging from web applications to software running on standard operating systems like Linux or Windows. This is also where many open-source fuzzers operate.

#### 9.3.1 Command-Line Application Fuzzing

The first known fuzzer, "The Fuzz" by Professor Barton Miller and his team, targeted command-line utilities in Unix-style operating systems. These tests were later extended to Microsoft and Apple operating systems. A command-line application fuzzer executes commands with parameters, originally focusing on "Set User ID" (SUID) commands but later addressing any commands that can be launched remotely.

#### 9.3.2 File Fuzzing

File fuzzing involves mutating or generating files based on a specification. It is simpler than stateless request-response protocols because there is no state information involved. Tests are static and can be reused. Advanced file fuzzing uses automatic file specification engines, such as the PROTOS Genome project, which reverse-engineers file structures.

To conduct file fuzzing, analyze the file formats parsed by the application. For example, a web browser supports various image formats. A pregenerated suite of tests can be a good starting point, but deciding when to stop fuzzing can be challenging.

**Case Study: Libpng Fuzzing**
- Mutation-based approach: 100,000 fuzzed PNGs created from an original file, achieving 10.7% code coverage.
- Repeating with different initial PNGs showed significant variations in code coverage.
- Generational-based approach: 30,000 fuzzed PNGs generated, achieving 25.5% code coverage.

#### 9.3.3 Web Application Fuzzing

Web application fuzzing simulates a browser responding with malicious inputs to form fields, cookies, URLs, etc., ignoring client-side input validation. The diverse developer community creating web applications makes this a popular area for fuzzing.

**Web Fuzzing Layers:**
- Most tools test the highest layer with simple request-response cases.
- Some tools spider through a website, testing each form automatically.
- Advanced tools read server-side source code and test hidden parameters.

**Example Attack Vectors:**
- HTTP headers
- Transport protocols (IP, TCP, SSL, TLS)
- Database query languages (SQL)
- Execution flaws (scripting language-specific)
- Web 2.0 remote procedure calls (SOAP, XML-RPC)
- XML XPath and XQuery
- HTML content (Cross-Site Scripting, XSS)
- LDAP, Flash, Java Remoting, Email, and other application protocols

Both free and commercial web testing tools are available, with a well-maintained list on the OWASP portal.

#### 9.3.4 Browser Fuzzing

Web browsers are popular targets for fuzz testing, especially within the bug bounty hunter community. Major browser vendors offer bug bounty programs, and similar functionalities across browsers mean a fuzzer for one browser often works for others.

**Large User Base:**
- Browsers are widely used, making them attractive targets for criminals.
- Zero-day flaws in browsers can result in devastating attacks.
- Browsers are available in IoT devices, where updating software is difficult.

**Easy Setup:**
- Browsers support a wide range of functionalities, making them easy to test.
- They can trigger local applications like PDF readers and document viewers.

**Example Attack Vectors:**
- HTTP
- HTML, SVG
- JavaScript
- XML and SOAP
- JSON
- WebSockets, WebRTC
- IndexedDB

Browsers are a rich target for fuzzing, with a vast array of potential attack vectors.