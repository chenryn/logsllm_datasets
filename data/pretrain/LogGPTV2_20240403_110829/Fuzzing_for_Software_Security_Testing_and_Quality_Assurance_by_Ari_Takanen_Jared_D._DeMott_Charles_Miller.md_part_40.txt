9.2 Carrier and Service Provider Fuzzing 285
Figure 9.3 The third-generation Defensics TLS fuzzer from Synopsys.
9.2 Carrier and Service provider Fuzzing
Carriers and service providers were simple entities in the past world of legacy tele-
communications, but more and more of these types of companies are today involved
in both carrying traffic and providing service to enterprises and consumers. The
carrier-type business is mostly about getting a specific stream to its intended recipi-
ent, although today there are more and more content-aware offerings. Protocols
such as MPLS are used to label and prioritize various types of traffic. The service-
provider-type business is adding value through services such as VoIP, email, or
Web hosting, with or without providing the last mile connection to the customer.
A carrier or service provider is always handling untrusted data. In such environ-
ment, all users will also be untrusted. All customers will have access to business-
critical services, and this can enable customers to attack services. All customers can
also potentially attack services of others using the network and the identity provided
by the service provider. It should come as no surprise that the internet service pro-
vider segment is one of the biggest consumers of fuzzing tools. From this segment,
we have chosen two case studies: voice over IP (VoIP) and WiFi.
9.2.1 VoIp Fuzzing
Whereas enterprise VoIP is just another data service, in telecommunications it is a
critical service that is destined to replace all legacy telephony. However, building
6760 Book.indb 285 12/22/17 10:50 AM
286 Fuzzing Case Studies
VoIP is anything but simple.6 In VoIP, the device itself often maintains the identity
of the callee and caller, and theft of such a device or possession of the processing
capability of such a device will allow someone to impersonate people and conduct
fraud. An attack against VoIP clients is an even greater threat than disabling a
centralized server, which is under the control of the provider and is thus easier to
maintain and secure. All VoIP infrastructures are also always handling critical data
because almost no single call flow is securely encrypted from end-to-end, but often
use hop-to-hop encryption. Access to any intermediary machine will allow someone
to eavesdrop on all calls using that particular machine.
Protocols used in VoIP include those dedicated for signaling and others for the
actual media, such as voice. In addition to those, a wide range of other protocols
are used.
Signaling protocols include:
• SIP and SDP;
• H.323;
• RTSP;
• Sigtran (SS7 over IP).
Media protocols include:
• RTP (and encrypted variants);
• RTCP.
Other protocols used in VoIP also include:
• IPv4 and IPv6 (both UDP and TCP);
• SCTP;
• TLS/SSL;
• Diameter and Radius;
• DHCP, DNS and ENUM extensions to those;
• SigComp;
• RSVP.
All VoIP implementations must have both client and server functionality, which
is required in order to both make calls and to receive them. In SIP, these components
are called SIP-UAC (User-Agent Client) and SIP-UAS (User-Agent Server). Testing
both requires two fuzzer configurations, or test tools. Additionally, signaling pro-
tocols can be used on top of both TCP/IP and UDP.
In a typical configuration, many VoIP signaling protocols travel through dedi-
cated infrastructure, and authentication is performed against this same infrastruc-
ture. The media protocols such as RTP are often point-to-point, with messages
arriving from arbitrary clients on the internet. This places special requirements for
fuzzing media protocols such as RTP and RTCP.
6 For more information about VoIP Security, check out: Peter Thermos & Ari Takanen. (2007).
Securing VoIP Networks—Threats, Vulnerabilities, and Countermeasures. Boston: Addison-Wesley.
6760 Book.indb 286 12/22/17 10:50 AM
9.2 Carrier and Service Provider Fuzzing 287
9.2.2 WiFi Fuzzing
Wireless fuzzing is a special field, with some special requirements for the equipment
being tested. Not all wireless devices advertise themselves, and therefore the tools
need to have advanced scanning techniques or need to be configured to detect the
device under test (DUT). Wireless networks are always open; there is no physical
wire or network device protecting a user from attackers. With adequate amplifiers,
the range of wireless networks can be surprisingly long. For example, short-range
wireless devices such as Bluetooth (about 10 meter range) have been attacked from
up to a kilometer away.
A WiFi fuzzer will break the wireless 802.11 frames at any layer below IP trans-
port (Figure 9.4). As the frames are broadcast over the wireless network, any device
on the same channel can detect fuzzed wireless frames and crash. Therefore, tests
should always be performed in a physically protected area, such as in a Faraday
cage. This can require additional planning for the test setup. As wireless fuzzers
require tailored hardware for access to low-level wireless frames, they always need
to be certified for use in different markets. Without such certification, testers can-
not use the tools outside protected test environments.
Note that many tool vendors advertise wireless fuzzing, but what they really
mean is that they can inject IP frames over a wireless network. They do not neces-
sarily break the wireless packets themselves, but rather focus on traditional appli-
cation fuzzing.
The WiFi specifications that a fuzzing tool should test include
• Management frames;
• Open authentication;
• QoS parameters;
Figure 9.4 802.11 frame fuzzed with Defensics fuzzer.
6760 Book.indb 287 12/22/17 10:50 AM
288 Fuzzing Case Studies
• WEP;
• WPA1;
• WPA2;
• IEEE 802.1X / EAPOL.
When you are testing access points and not the client implementations, you will
most probably also want to test the following interfaces:
• IPv4, at least ARP, UDP and TCP;
• HTTP;
• DHCP.
In a fuzzing study against seven different WiFi access points, we noted that all
access points could be crashed with at least some type of fuzzing.7 In Table 9.1, we
can see that 33% of the devices crashed with fuzzing. The remaining devices did
not actually pass the tests, but the test resulted in some other instabilities. These
failures were not analyzed any further. These poor testing results with WiFi fuzz-
ing were to be expected as none of these devices had probably been fuzzed before.
But, a more serious result was that even simple DHCP fuzzing was able to crash
four out of the five devices. N/A in the table means those tests were not executed
due to time limitations.
9.3 Application Developer Fuzzing
Perhaps the most common area of fuzzing is in application fuzzing. For most indi-
viduals, the most interesting target of tests is some self-developed Web application
or a piece of software running on a standard operating system such as Linux or
Windows. This is also an area where most open-source fuzzers operate.
Table 9.1 Results of Fuzzing Wireless Devices
AP1 AP2 AP3 AP4 AP5 AP6 AP7
WLAN INC FAIL INC FAIL N/A INC INC 33%
IPv4 FAIL PASS FAIL PASS N/A FAIL INC 50%
ARP PASS PASS PASS N/A FAIL PASS PASS 16%
TCP N/A N/A FAIL N/A FAIL PASS N/A 66%
HTTP N/A PASS FAIL PASS INC FAIL FAIL 50%
DHCP FAIL FAIL INC N/A FAIL FAIL N/A 80%
50% 40% 50% 33% 75% 50% 25%
7 Ari Takanen and Sami Petäjäsoja. “Assuring the Robustness and Security of New Wireless Technolo-
gies.” Presentation and paper at ISSE/SECURE 2007 conference, Warsaw, Poland. October 3, 2007.
6760 Book.indb 288 12/22/17 10:50 AM
9.3 Application Developer Fuzzing 289
9.3.1 Command-Line Application Fuzzing
The first publicly known fuzzer,8 The Fuzz, by Professor Barton Miller and his team,
targeted command line utilities in Unix-style operating systems. Later, those tests
were also extended to cover various Microsoft and Apple operating system versions.
Simply, a command-line application fuzzer will execute commands (or scripts)
that take their parameters over the command line. Originally, this was an issue with
“Set User ID” or SUID9 commands in Unix, but later, these fuzzed inputs were
noted to cause security issues with any commands that can be launched over remote
triggers, such as media received over the internet, or launched by server-side scripts.
9.3.2 File Fuzzing
File fuzzing is the simplest form of fuzzing. In file fuzzing, you either take a file and
mutate it (mutation-based fuzzing), or you teach your fuzzer the specification of the
file type and generate the fuzzed files (generational-based fuzzing). File fuzzing is
simpler than simple stateless request-response protocols because there usually is no
state information involved. The tests are static. Once generated, you can reuse them
over and over again. Some fuzz-file databases can contain tens of millions of tests
(files) that can be used for testing against various versions of software. The more
advanced file fuzzing techniques are based on automatic file specification engines.
These engines will automatically reverse-engineer the file structure and deploy fuzz
tests to the structure. For example, the PROTOS Genome10 project (ongoing since
2001) has used the same algorithms that are used to reverse-engineer structures
in the human genome to map common structures and understand the logic inside.
When conducting file fuzzing, you first need to analyze which file formats are
parsed by the application you wish to test. For example, a standard Web browser,
such as Internet Explorer, can easily support many different image formats and their
variants. A full coverage of tests with file fuzzing can be laborious, and therefore a
pregenerated suite of tests might give a good starting point for fuzzing. The greatest
challenge with file fuzzing, at least for QA people, is deciding when to stop fuzzing.
For an interesting case study, consider the work done fuzzing libpng, an open-
source PNG image decoder.11 Libpng is the decoder used by many common applica-
tions such as Firefox, Opera, and Safari. In this case, we began fuzzing this library
by using a mutation-based approach and monitoring the number of lines executed.
In other words, a particular PNG was obtained from the internet and 100,000
fuzzed PNGs were created by randomly changing bytes in the original file. Using
these files, approximately 10.7% of the library was executed. Next, in order to get
a feel for how important the choice of initial PNG was to this particular case of
mutation-based fuzzing, the same procedure was repeated starting from four other
8 There have been other testing tools that have attempted to crash the SUT with various inputs, but
the Fuzz project was probably the first in which the intention was to find security vulnerabilities and
not just quality errors.
9 A SUID bit in the file system will tell the operating system to launch the program with other privi-
leges, typically those of a system administrator.
10 www.ee.oulu.fi/roles/ouspg/genome.
11 www.defcon.org/html/defcon-15/dc-15-speakers.html#Miller.
6760 Book.indb 289 12/22/17 10:50 AM
290 Fuzzing Case Studies
different PNGs. In other words, for 5 distinct PNGs, 100,000 fuzzed PNGs were
created for each of the 5 initial files. Again, code coverage was monitored during
testing. It turns out that the choice of initial input to a mutation-based fuzzer is
very important, as Table 9.2 indicates.
Thus, it is important when fuzzing with a mutation-based approach to always
use a variety of initial files (or in general inputs) in order to mutate, because in this
small sample, some files obtained almost 50% more code coverage than others when
used as an initial file. Likewise, if you compute the code coverage from all 500,000
of the PNGs, you obtain code coverage of 17.4%, which is better than any one of
the files by itself. In other words, some of the PNGs exercise certain portions of the
code while other PNGs may exercise other portions of the code. No matter how
many bytes you change randomly, you will never duplicate the structure found in
different PNGs in a reasonable amount of time starting from one file.
Finally, we took libpng and fuzzed it using a generational-based approach with
SPIKEfile. This required writing out a complete specification for the PNG file for-
mat and intelligently fuzzing each particular field of the format. This required many
hours of labor to produce 30,000 fuzzed PNGs. However, the benefit was clear, as
25.5% code coverage was obtained by these 30,000 files. By consulting the results
of the mutation-based fuzzing, this is roughly twice the code coverage that you
would typically find with mutation-based fuzzing. Throughout all of this testing
of libpng, no crashes were observed, although deep monitoring was not conducted.
9.3.3 Web Application Fuzzing
In Web application fuzzing, the fuzzer will simulate a browser that will respond to
the Web application using many malicious inputs into all the form fields, cookies,
URLs, and so on. Furthermore, it will ignore all possible input validation performed
in the client, such as that done with JavaScript. Of course, input validation should
always be performed on the server side, even if a legal user would be restricted from
inputting whatever they pleased in the standard user interface.
The main reason why Web fuzzing is such a popular area of fuzzing is because
of the diverse developer community creating Web applications. Almost every Web
designer knows some scripting languages and will happily implement a server-side
script that receives input from a Web browser. Those Web applications can be quite
complex, and almost always tailored to each user.
Web application fuzzing happens in several different layers. Most Web fuzzing
tools only test the highest layer, and only with simple request-response test cases,
apparently going for the low-hanging fruit. Others spider through a Website look-
ing for individual targets, such as Web forms, and then test each of these automati-
cally with all visible parameters. Some tools can even benefit from reading in the
Table 9.2 Code Coverage Obtained with a Mutation-Based Fuzzer for Five
Different Initial “Good” Inputs
PNG 1 PNG 2 PNG 3 PNG 4 PNG 5
Code coverage 10.7% 14.9% 13.7% 12.5% 10.5%
6760 Book.indb 290 12/22/17 10:50 AM
9.3 Application Developer Fuzzing 291
server-side source code and also testing those parameters that are left in the scripts
from older releases but are not visible in the public Web form.
But, real-life Web fuzzing can be much more complex than these examples. A
complex business application may contain a complicated state machine, and therefore
each Web application test case can consist of a sequence of messages. For example,
an automated fuzz test against an e-commerce portal could include the preamble of
logging in, then adding items to a shopping basket, activating the purchase, and then
logging out. Web fuzzing is actually an interesting target for model-based fuzzing,
and numerous security consultants using most available fuzzing frameworks have
already conducted such tests.
When the use case or template for fuzzing is defined, or the model is built, the
fuzzers will then automatically input anomalies into various parts of the inputs. Most
Web fuzzing tools test through a predefined set of inputs for each parameter in the
Web forms. More advanced fuzzers will also enable the user to define substructure
for the parameters. The goal is to try inputs that would be passed through the Web
application and into a middleware component, operating system command, or a
database. Therefore, the inputs are almost always targeted against specific imple-
mentations. A set of test cases targeted to a specific variant of database query lan-
guage (such as the many variants of SQL) will probably not trigger a failure when
some other database is used in the server. Similarly, if the Web server is running on
a proprietary operating system, then tests that target Unix-based shell commands
would be doomed to fail.
Web 2.0 increases the complexity of Web fuzzing significantly, and makes it
even harder for standard off-the-shelf fuzzing tools to succeed due to the increased
proprietary communication interfaces between the browser and the server(s).12
Example attack vectors include
• HTTP headers;
• Transport protocols such as IP, TCP, SSL, and TLS;
• Database query languages: SQL;
• Execution flaws (scripting language specific);
• Web 2.0 remote procedure calls and streams such as SOAP and XML-RPC;
• XML XPath and XQuery;
• HTML content: Cross-Site Scripting (XSS);
• LDAP;
• Flash;
• Java Remoting;
• Email, and any other application protocol launched by a Web application.
Both free and commercial Web testing tools are numerous, and a well-maintained
list is available from, for example, the OWASP portal.13
12 Alex Stamos and Zane Lackey. “Attacking AJAX Web Applications,” Presentation at Black Hat
USA 2007 conference. Las Vegas, NV. (July/August 2007).
13 www.owasp.org/index.php/Appendix_A:_Testing_Tools.
6760 Book.indb 291 12/22/17 10:50 AM
292 Fuzzing Case Studies
9.3.4 Browser Fuzzing
Web browsers are quite popular targets for fuzz testing within the bug bounty hunter
community. The reason is that most of the major Web browser vendors also have
a bug bounty program. Different browsers also have same, or at least nearly the
same, functionalities, so if you implement a fuzzer for one browser it is very likely
that it will also work with other browsers.
A large user base of Web browsers also make browsers an interesting target
for criminals. A set of 0-day flaws found in a widely used browser can result in a
devastating attack tool, with the capability to infect every customer that browses to
a malicious site. Browsers, and browser-like applications, are also available in IoT
devices, like SmartTVs and cars, where updating the software is hard.
Browsers are the easiest fuzzing targets to set up, and you will never run out
of tests that you can run against them because they support almost everything that
most users are familiar with. Browsers can also be used to trigger a variety of local
applications on the host, such as PDF readers and office document viewers.
Some example attack vectors against browsers include
• HTTP;
• HTML, SVG;
• JavaScript;
• XML and SOAP;
• JSON (e.g., JavaScript Arrays);
• WebSockets, WebRTC;
• IndexedDB;