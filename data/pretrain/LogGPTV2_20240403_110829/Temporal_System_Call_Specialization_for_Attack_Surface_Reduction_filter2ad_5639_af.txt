[10] Syslog NG. https://www.syslog-ng.com/.
[11] Mathieu Acher, Hugo Martin, Juliana Pereira, Arnaud
Blouin, Jean-Marc Jézéquel, Djamel Khelladi, Luc
Lesoil, and Olivier Barais. Learning very large con-
ﬁguration spaces: What matters for Linux kernel sizes.
Technical Report HAL-02314830, Inria Rennes - Bre-
tagne Atlantique, 2019.
[12] Ioannis Agadakos, Di
Jin, David Williams-King,
Vasileios P Kemerlis, and Georgios Portokalidis. Nib-
bler: Debloating binary shared libraries. In Proceedings
of the 35th Annual Computer Security Applications Con-
ference (ACSAC), pages 70–83, 2019.
[13] Babak Amin Azad, Pierre Laperdrix, and Nick Niki-
forakis. Less is more: Quantifying the security beneﬁts
of debloating web applications. In Proceedings of the
28th USENIX Security Symposium, 2019.
[14] Lars Ole Andersen. Program analysis and specializa-
tion for the C programming language. PhD thesis, Uni-
versity of Cophenhagen, 1994.
[15] Apache.
Apache Httpd, 2019.
httpd.apache.org/.
https : / /
[16] Nicolai Davidsson, Andre Pawlowski, and Thorsten
Holz. Towards automated application-speciﬁc software
stacks. In Proceedings of the 24th European Symposium
on Research in Computer Security (ESORICS), 2019.
[17] Nicholas DeMarinis, Kent Williams-King, Di Jin, Ro-
drigo Fonseca, and Vasileios P. Kemerlis. Sysﬁlter:
Automated system call ﬁltering for commodity soft-
ware. In Proceedings of the International Conference on
Research in Attacks, Intrusions, and Defenses (RAID),
2020.
[18] Henry Hanping Feng, Jonathon T Gifﬁn, Yong Huang,
Somesh Jha, Wenke Lee, and Barton P Miller. Formal-
izing sensitivity in static analysis for intrusion detection.
In Proceedings of the IEEE Symposium on Security &
Privacy (S&P), pages 194–208, 2004.
[19] Stephanie Forrest, Steven A Hofmeyr, Anil Somayaji,
and Thomas A Longstaff. A sense of self for Unix
processes. In Proceedings of the IEEE Symposium on
Security & Privacy (S&P), pages 120–128, 1996.
USENIX Association
29th USENIX Security Symposium    1763
[20] Tal Garﬁnkel, Ben Pfaff, and Mendel Rosenblum. Ostia:
A delegating architecture for secure system call interpo-
sition. In Proceedings of the Network and Distributed
System Security Symposium (NDSS), 2004.
[32] Vasileios P. Kemerlis, Michalis Polychronakis, and An-
gelos D. Keromytis. ret2dir: Rethinking kernel isolation.
In Proceedings of the 23rd USENIX Security Sympo-
sium, pages 957–972, 2014.
[21] Masoud Ghaffarinia and Kevin W. Hamlen. Binary
control-ﬂow trimming. In Proceedings of the 26th ACM
Conference on Computer and Communications Security
(CCS), 2019.
[33] Vasileios P. Kemerlis, Georgios Portokalidis, and Ange-
los D. Keromytis. kguard: Lightweight kernel protection
against return-to-user attacks. In Proceedings of the 21st
USENIX Security Symposium, 2012.
[22] Seyedhamed Ghavamnia, Tapti Palit, Azzedine Be-
nameur, and Michalis Polychronakis. Conﬁne: Auto-
mated system call policy generation for container attack
surface reduction. In Proceedings of the International
Conference on Research in Attacks, Intrusions, and De-
fenses (RAID), 2020.
[23] Arie Gurﬁnkel and Jorge A Navas. A context-sensitive
memory model for veriﬁcation of C/C++ programs. In
Proceedings of the International Static Analysis Sympo-
sium, pages 148–168. Springer, 2017.
[24] Andreas Gustafsson. Egypt. https://www.gson.org/
egypt/egypt.html.
[25] Ashish Gehani Hashim Sharif, Muhammad Abubakar
and Fareed Zaffar. Trimmer: Application specializa-
tion for code debloating. In Proceedings of the 33rd
ACM/IEEE International Conference on Automated Soft-
ware Engineering (ASE), 2018.
[26] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and
Mayur Naik. Effective program debloating via rein-
forcement learning. In Proceedings of the 24th ACM
Conference on Computer and Communications Security
(CCS), 2018.
[27] Michael Hind. Pointer analysis: Haven’t we solved this
problem yet? In Proceedings of the ACM SIGPLAN-
SIGSOFT Workshop on Program Analysis for Software
Tools and Engineering (PASTE), pages 54–61, 2001.
[28] Gerard J Holzmann. Code inﬂation. IEEE Software,
(2):10–13, 2015.
[29] Kapil Jain and R Sekar. User-level infrastructure for sys-
tem call interposition: A platform for intrusion detection
and conﬁnement. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2000.
[30] Yufei Jiang, Can Zhang, Dinghao Wu, and Peng Liu.
Feature-based software customization: Preliminary anal-
ysis, formalization, and methods. In Proceedings of the
17th IEEE International Symposium on High Assurance
Systems Engineering (HASE), 2016.
[31] Vasileios P. Kemerlis. Protecting Commodity Operating
Systems through Strong Kernel Isolation. PhD thesis,
Columbia University, 2015.
[34] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis
Polychronakis. Conﬁguration-driven software debloat-
ing. In Proceedings of the 12th European Workshop on
Systems Security, 2019.
[35] Christopher Kruegel, Engin Kirda, Darren Mutz,
William Robertson, and Giovanni Vigna. Automating
mimicry attacks using static binary analysis. In Proceed-
ings of the USENIX Security Symposium, 2005.
[36] Jakub Kuderski, Jorge A Navas, and Arie Gurﬁnkel.
Uniﬁcation-based pointer analysis without oversharing.
In Proceedings of the Formal Methods in Computer
Aided Design (FMCAD), pages 37–45. IEEE, 2019.
[37] Anil Kurmus, Reinhard Tartler, Daniela Dorneanu, Bern-
hard Heinloth, Valentin Rothberg, Andreas Ruprecht,
Wolfgang Schroder-Preikschat, Daniel Lohmann, and
Rudiger Kapitza. Attack surface metrics and automated
compile-time OS kernel tailoring. In Proceedings of the
Network and Distributed System Security Symposium
(NDSS), 2013.
[38] Lingguang Lei, Jianhua Sun, Kun Sun, Chris Sheneﬁel,
Rui Ma, Yuewu Wang, and Qi Li. SPEAKER: Split-
phase execution of application containers. In Proceed-
ings of the 12th Conference on Detection of Intrusions
and Malware, and Vulnerability Assessment (DIMVA),
pages 230–251, 2017.
[39] Yiwen Li, Brendan Dolan-Gavitt, Sam Weber, and Justin
Cappos. Lock-in-pop: Securing privileged operating
system kernels by keeping on the beaten path. In Pro-
ceedings of the USENIX Annual Technical Conference
(ATC), 2017.
[40] Steven McCanne and Van Jacobson. The BSD packet
ﬁlter: A new architecture for user-level packet capture.
In Proceedings of the USENIX Winter Conference, 1993.
[41] Shachee Mishra and Michalis Polychronakis. Shred-
der: Breaking Exploits through API Specialization. In
Proceedings of the 34th Annual Computer Security Ap-
plications Conference (ACSAC), 2018.
[42] Shachee Mishra and Michalis Polychronakis. Safﬁre:
Context-sensitive function specialization against code
reuse attacks. In Proceedings of the 5th IEEE European
Symposium on Security and Privacy (EuroS&P), 2020.
1764    29th USENIX Security Symposium
USENIX Association
[43] Collin Mulliner and Matthias Neugschwandtner. Break-
ing payloads with runtime code stripping and image
freezing, 2015. Black Hat USA.
[44] Chetan Parampalli, R Sekar, and Rob Johnson. A prac-
tical mimicry attack against powerful system-call moni-
tors. In Proceedings of the ACM Symposium on Infor-
mation, Computer and Communications Security (ASI-
ACCS), pages 156–167, 2008.
[45] Fernando Magno Quintao Pereira and Daniel Berlin.
Wave propagation and deep propagation for pointer anal-
ysis. In Proceedings of the International Symposium
on Code Generation and Optimization (CGO), pages
126–135, 2009.
[46] Marios Pomonis, Theoﬁlos Petsios, Angelos D.
Keromytis, Michalis Polychronakis, and Vasileios P.
kRˆX: Comprehensive kernel protection
Kemerlis.
In Proceedings of
against just-in-time code reuse.
the 12th European Conference on Computer Systems
(EuroSys), pages 420–436, 2017.
[47] Chris Porter, Girish Mururu, Prithayan Barua, and San-
tosh Pande. Blankit library debloating: Getting what you
want instead of cutting what you don’t. In Proceedings
of the 41st ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), pages
164–180, 2020.
[48] Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho
Chung, Taesoo Kim, and Wenke Lee. RAZOR: A frame-
work for post-deployment software debloating. In Pro-
ceedings of the 28th USENIX Security Symposium, 2019.
[49] Anh Quach, Rukayat Erinfolami, David Demicco, and
Aravind Prakash. A multi-OS cross-layer study of bloat-
ing in user programs, kernel and managed execution
In Proceedings of the Workshop on
environments.
Forming an Ecosystem Around Software Transforma-
tion (FEAST), pages 65–70, 2017.
[50] Anh Quach and Aravind Prakash. Bloat factors and
binary specialization. In Proceedings of the 3rd ACM
Workshop on Forming an Ecosystem Around Software
Transformation (FEAST), pages 31–38, 2019.
[51] Anh Quach, Aravind Prakash, and Lok Yan. Debloating
software through piece-wise compilation and loading.
In Proceedings of the 27th USENIX Security Symposium,
pages 869–886, 2018.
[52] Mohan Rajagopalan, Matti Hiltunen, Trevor Jim, and
Richard Schlichting. Authenticated system calls. In Pro-
ceedings of the International Conference on Dependable
Systems and Networks (DSN), pages 358–367, 2005.
[53] Linhai Song and Xinyu Xing. Fine-grained library cus-
tomization. In Proceedings of the 1st ECOOP Interna-
tional Workshop on Software Debloating and Delayer-
ing (SALAD), 2018.
[54] Bjarne Steensgaard. Points-to analysis in almost lin-
ear time. In Proceedings of the 23rd ACM SIGPLAN-
SIGACT symposium on Principles of programming lan-
guages, pages 32–41, 1996.
[55] Yulei Sui and Jingling Xue. SVF: interprocedural static
value-ﬂow analysis in LLVM. In Proceedings of the
25th International Conference on Compiler Construc-
tion, 2016.
[56] Yulei Sui, Ding Ye, and Jingling Xue. Detecting mem-
ory leaks statically with full-sparse value-ﬂow analysis.
IEEE Transactions on Software Engineering, 40(2):107–
122, 2014.
[57] Kanchi Gopinath Suparna Bhattacharya and Man-
gala Gowri Nanda. Combining concern input with pro-
gram analysis for bloat detection. In Proceedings of the
ACM SIGPLAN International Conference on Object Ori-
ented Programming Systems Languages & Applications
(OOPSLA), 2013.
[58] David Wagner and Drew Dean. Intrusion detection via
static analysis. In Proceedings of the IEEE Symposium
on Security & Privacy, pages 156–168, 2001.
[59] Zhiyuan Wan, David Lo, Xin Xia, Liang Cai, and Shan-
ping Li. Mining sandboxes for Linux containers. In
Proceedings of the 10th IEEE International Conference
on Software Testing, Veriﬁcation and Validation (ICST),
pages 92–102, 2017.
[60] Jinpeng Wei and Calton Pu. TOCTTOU vulnerabilities
in UNIX-style ﬁle systems: An anatomical study. In
Proceedings of the USENIX Conference on File and
Storage Technologies (FAST), 2005.
[61] Tatu Ylönen. SSH Agent. https://www.ssh.com/ssh/
agent.
[62] Dinghao Wu Yufei Jiang and Peng Liu. Jred: Program
customization and bloatware mitigation based on static
analysis. In Proceedings of the 40th Annual Computer
Software and Applications Conference (ACSAC), 2016.
[63] Tian Lan Yurong Chen and Guru Venkataramani.
Damgate: Dynamic adaptive multi-feature gating in
program binaries. In Proceedings of the Workshop on
Forming an Ecosystem Around Software Transformation
(FEAST), 2017.
[64] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee
Jung, Ahmed M. Azab, and Ruowen Wang. PeX: A
USENIX Association
29th USENIX Security Symposium    1765
permission check analysis framework for linux kernel.
In Proceedings of the 28th USENIX Security Symposium,
pages 1205–1220, 2019.
[65] Zhi Zhang, Yueqiang Cheng, Surya Nepal, Dongxi Liu,
Qingni Shen, and Fethi Rabhi. KASR: A reliable and
practical approach to attack surface reduction of com-
modity OS kernels. In Proceedings of the International
Conference on Research in Attacks, Intrusions, and De-
fenses (RAID), pages 691–710, 2018.
[66] Xiangyu Zhang Zhongshu Gu, Brendan Saltaformaggio
and Dongyan Xu. Face-change: Application-driven dy-
namic kernel view switching in a virtual machine. In
Proceedings of the 44th IEEE/IFIP International Con-
ference on Dependable Systems and Networks (DSN),
2014.
A Appendix
Imprecision of Points-to Analysis
In Sections 4.2 and 5.1, we discussed how context sensitivity
and path sensitivity contribute to the overapproximation prob-
lem and make the results of Andersen’s analysis imprecise.
While our experiences show that the lack of context sensitivity
and path sensitivity are the primary contributors to this impre-
cision, other factors too contribute to overapproximation in
the results of the points-to analysis.
Field Sensitivity The points-to analysis provided by the
SVF library is ﬁeld-sensitive. Field sensitivity allows every
ﬁeld of a struct to be uniquely modeled, which is critical for
the precision of the analysis. For example, in case of Apache
Httpd, the cleanup_t type contains function pointers for
cleaning memory allocated on various heaps. To distinguish
between the different function pointers in this structure, we
must model the individual ﬁelds of the struct cleanup_t
as ﬁeld-sensitive. However, there are certain circumstances
under which SVF forsakes ﬁeld sensitivity in lieu of simplicity
of implementation and reduction in analysis time.
Array Index Sensitivity SVF’s implementation of Ander-
sen’s algorithm is not array-index-sensitive. Individual ele-
ments of an array are not modeled uniquely. Therefore, if
multiple struct objects are stored in a array, the individual
struct objects become ﬁeld-insensitive, because the array
elements themselves are not modeled uniquely.
For example, objects of type ap_listen_rec are stored
in the array of pointers listen_buckets. The type
ap_listen_rec has a ﬁeld accept_func which stores a
pointer to the function that is invoked on the accept event. As
these objects are stored in an index-insensitive array, they lose
Table 8: Linux ROP payloads used in our evaluation.
1)
2)
3)
4)
5)
6)
7)
8)
9)
10)
11)
12)
13)
14)
15)
16)
17)
Return Oriented Programming and ROPgadget tool
http : / / shell - storm.org / blog / Return - Oriented - Programming - and -
ROPgadget-tool/
ARM Exploitation - Defeating DEP - executing mprotect()
https : / / blog.3or.de / arm - exploitation - defeating - dep - executing -
mprotect.html
64-bit ROP | You rule ’em all!
https://0x00sec.org/t/64-bit-rop-you-rule-em-all/1937
64-bit Linux Return-Oriented Programming
https://crypto.stanford.edu/~blynn/rop/
Return-Oriented-Programming(ROP FTW)
http : / / www.exploit - db.com / docs / english / 28479 - return - oriented -
programming-(rop-ftw).pdf
PMS 0.42 - Local Stack-Based Overﬂow (ROP)
https://www.exploit-db.com/exploits/44426/
Crashmail 1.6 - Stack-Based Buffer Overﬂow (ROP)
https://www.exploit-db.com/exploits/44331/
PHP 5.3.6 - Local Buffer Overﬂow (ROP)
https://www.exploit-db.com/exploits/17486/
HT Editor 2.0.20 - Local Buffer Overﬂow (ROP)
https://www.exploit-db.com/exploits/22683/
Bypassing non-executable memory, ASLR and stack canaries on x86-64 Linux
https://www.antoniobarresi.com/security/exploitdev/2014/05/03/
64bitexploitation/
Bypassing non-executable-stack during Exploitation (return-to-libc)
https://www.exploit-db.com/papers/13204/
Exploitation - Returning into libc
https://www.exploit-db.com/papers/13197/
Bypass DEP/NX and ASLR with Return Oriented Programming technique
https : / / medium.com / 4ndr3w / linux - x86 - bypass - dep - nx - and - aslr -
with-return-oriented-programming-ef4768363c9a/
ROP-CTF101
https : / / ctf101.org / binary - exploitation / return - oriented -
programming/
Introduction to return oriented programming (ROP)
https://codearcana.com/posts/2013/05/28/introduction- to- return-
oriented-programming-rop.html/
Simple ROP Exploit Example
https://gist.github.com/mayanez/c6bb9f2a26fa75261a9a26a0a637531b/
Analysis of Defenses against Return Oriented Programming
https://www.eit.lth.se/sprapport.php?uid=829/
their ﬁeld sensitivity, and SVF cannot distinguish between
the targets of the accept_func ﬁeld and the targets of the
other ﬁelds in ap_listen_rec that hold function pointers.
Moreover, due to array index insensitivity, it is impossible
to distinguish the accept_func ﬁeld of one ap_listen_rec
object, from the accept_func ﬁeld of another object, stored
in the same array.
Positive Weight Cycles Due to context insensitivity, espe-
cially for memory allocation wrappers, it is possible for the
constraint graph to contain cycles. Cycle elimination [27] is
a popular optimization in points-to analysis—the key idea
being that constraint nodes that are part of a cycle in the con-
straint graph share the same solution, and therefore can be
collapsed into a single node. However, cycle elimination is
not trivial in ﬁeld-sensitive analysis, because the edges be-
tween the constraint nodes are weighted (where the weight of
the edge is the index of the ﬁeld being accessed).
Moreover, SVF implements an optimization of Andersen’s
algorithm, called Wave Propagation [45]. This optimization
requires the constraint graph to be topologically sorted, and
that there are no edges. Due to this requirement, at the end
of each iteration, SVF converts every ﬁeld-sensitive struct
object that is involved in a cycle into ﬁeld-insensitive.
1766    29th USENIX Security Symposium
USENIX Association