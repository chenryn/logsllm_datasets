long-term key kBT and extracts the session key kAB. The
session key enables B to decrypt the authenticator from the
AP REQ message, which, if successful, proves A’s identity
since only a legitimate entity possessing kAB can generate
a valid authenticator. Finally, message AP REP, sent from
B to A, conﬁrms B’s true identity and completes the mutual
authentication.
3. ECDH / ECMQV KEY EXCHANGE
The elliptic curve Diﬃe-Hellman (ECDH) key exchange
is the elliptic curve analogue of the classical Diﬃe-Hellman
scheme in the group Z∗
p [5]. Similar to other elliptic curve
cryptosystems, ECDH operates on an elliptic curve deﬁned
over a ﬁnite ﬁeld. The ECDH protocol requires the involved
entities to compute a so-called point multiplication, i.e. an
operation of the form k · P where k is an integer and P is a
point on the curve [5]. A point multiplication is performed
through arithmetic operations in the underlying ﬁnite ﬁeld
(in particular ﬁeld multiplication), which makes ECDH very
computation-intensive since the ﬁelds used in elliptic curve
cryptography have an order of at least 160 bits.
Before an ECDH key exchange can be accomplished, the
two involved entities have to agree upon a set of domain
parameters. These parameters include the elliptic curve to
be used, the underlying ﬁnite ﬁeld, a generator G of the
group, and the group order n. Let A and B be two entities
wishing to establish a shared secret. First, entity A chooses
a random secret number a with 2 ≤ a ≤ n − 2, calculates
U = a · G, and sends U to entity B. Entity B also chooses a
random secret number b in the range [ 2, n − 2 ], calculates
V = b · G, and sends V to entity A. Entity A is now able to
compute the shared secret key as K = a · V = a · b · G and
entity B can compute K = b · U = b · a · G. Both entities
have agreed on the same key because a · b · G = b · a · G. In
summary, an ECDH key exchange requires to perform four
point multiplications and to send two messages.
The standard ECDH protocol, as described before, does
not authenticate the two entities A and B, and is therefore
vulnerable to man-in-the-middle attacks. An example of a
key exchange protocol providing implicit authentication is
the Menezes-Qu-Vanstone (MQV) protocol, and its elliptic
curve analogue, the ECMQV protocol [8]. The two entities
participating in the ECMQV key exchange are assumed to
TAB1. AS_REQ2. AS_REP3. AP_REQ4. AP_REP1. AS_REQ:  A, B, nA2. AS_REP:  { kAB, B, tS, tE, nA } kAT ,  { kAB, A, tS, tE } kBT3. AP_REQ:  { kAB, A, tS, tE } kBT ,  { A, tA } kAB4. AP_REP:  { tA } kABhave both a static (i.e. long-term) public/private key pair
and an ephemeral (i.e. short-term) key pair. A key pair in
ECMQV consists of a private key, which is just a random
number x, and a public key, given by the product of the
random number x and the base point G. The static key pair
is valid for a certain period of time, whereas new ephemeral
keys are generated for each run of the protocol. A shared
secret is derived using the static keys and the ephemeral
keys, which guarantees that each protocol run between two
entities A and B produces a diﬀerent shared secret. Before
the actual ECMQV key agreement can take place, the two
involved entities have to exchange the public part of their
static keys. Then, each entity generates an ephemeral key
pair (which requires to compute a point multiplication) and
sends the public part of this key to the other entity, similar
to the standard ECDH protocol. Now, in order to derive a
shared secret key, each entity has to calculate a so-called
multiple point multiplication of the form k · P + l · Q, which
is only slightly more costly than calculating k· P if Shamir’s
trick is used [5]. We refer to [4, 5] for a detailed description
of ECMQV key exchange.
In summary, every run of the ECMQV protocol requires
to calculate two point multiplications of the form k · P , two
multiple point multiplications of the form k · P + l · Q, and
to send two messages, provided that the public parts of the
static keys have already been exchanged.
4. RESULTS AND CONCLUSIONS
The overall energy cost of key establishment in a wireless
sensor network is determined by the energy required for the
execution of cryptographic primitives and the energy cost
of radio communication between the involved entities. We
conducted the energy evaluation of our lightweight Kerberos
protocol and the ECMQV protocol on a Wireless Integrated
Network Sensor (WINS) node from Rockwell Scientiﬁc. The
WINS node is equipped with a StrongARM microprocessor
clocked at 133 MHz and features a 100 kbit/s radio module
[1]. According to [10], the WINS node has an average power
consumption of 360 mW when the processor is active. The
transmission of a single bit of data requires, depending on
the transmit power level, an energy of between 7.71 µJ and
10.8 µJ on the sending node, and 7.52 µJ on the receiving
node [10]. Thus, the overall energy required for sending and
receiving of data ranges from 15.2 µJ/bit to 18.3 µJ/bit.
Comp. Msg. transfer Total energy
Protocol
39.6–47.6 mJ
Kerberos
0.1 mJ
ECMQV 51.8 mJ
79.0–84.6 mJ
39.5–47.5 mJ
27.2–32.8 mJ
Table 1: Energy analysis of Kerberos and ECMQV.
The lightweight Kerberos protocol described in Section 2
requires to send four messages between entities A, B, and
T . According to the analysis in [4], the payload of the four
messages is 1568 bits altogether. In addition to the actual
payload, each message contains other data like a protocol
ID, a message ID, a checksum, as well as low-level headers
and footers, which increase the size of each message by 256
bits. Thus, a total of 2592 bits has to be transmitted, and
consequently the communication energy cost of Kerberos is
between 39.5 mJ and 47.5 mJ (the exact value depends on
the transmit power level). As illustrated in Figure 1, three
of the four Kerberos messages are encrypted. When using
128-bit AES, the overall energy required for encryption and
decryption of the messages is less than 0.1 mJ (see [4] for
a detailed analysis). In summary, the Kerberos protocol is
characterized by high communication energy cost, while the
energy needed for en/decryption is almost negligible.
We implemented the ECDH/ECMQV key exchange using
a 256-bit prime ﬁeld as underlying algebraic structure in
order to match the security level of Kerberos key transport
with 128-bit AES encryption. A point multiplication over a
256-bit prime ﬁeld takes approximately 4.25·106 clock cycles
on a StrongARM processor when implemented as described
in [4]. The execution time of a multiple point multiplication
of the form k · P + l · Q is about 5.31 · 106 cycles [4]. Given
a clock frequency of 133 MHz and a power consumption
of 360 mW, the corresponding energy values are 11.5 and
14.4 mJ, respectively. Every run of the ECMQV protocol
requires to perform two point multiplications k · P and two
multiple point multiplications k · P + l · Q, resulting in an
overall computation energy cost of 51.8 mJ. Moreover, two
messages have to be exchanged, each with a payload of 640
bits (see [4] for further details). Adding an overhead of 256
bits to each message, the total communication energy cost
of ECMQV is between 27.2 mJ and 32.8 mJ.
Putting it all together, the overall energy cost of Kerberos
key establishment is between 39.6 mJ and 47.6 mJ, while
ECMQV key exchange requires an energy of between 79.0
mJ and 84.6 mJ (see Table 1). In other words, the energy
consumption of ECMQV and Kerberos diﬀers merely by a
factor of between 1.78 (for high transmit power) and 1.99
(for low transmit power). Thus, key establishment protocols
using public-key cryptography can no longer be considered
prohibitively expensive in terms of energy consumption.
5. REFERENCES
[1] D. W. Carman, P. S. Kruus, and B. J. Matt. Constraints
and Approaches for Distributed Sensor Network Security.
Technical Report #00-010, Network Associates Inc., 2000.
[2] H. Chan and A. Perrig. PIKE: Peer intermediaries for key
establishment in sensor networks. In Proceedings of the
24th IEEE Conference on Computer Communications
(INFOCOM 2005), vol. 1, pp. 524–535. IEEE, 2005.
[3] L. Eschenauer and V. Gligor. A key-management scheme
for distributed sensor networks. In Proceedings of the 9th
ACM Conference on Computer and Communications
Security (CCS 2002), pp. 41–47. ACM Press, 2002.
[4] J. Großsch¨adl, A. Szekely, and S. Tillich. The energy cost
of cryptographic key establishment in wireless sensor
networks. Cryptology ePrint Archive, Report 2007/003.
Available for download at http://eprint.iacr.org, 2007.
[5] D. Hankerson, A. J. Menezes, and S. A. Vanstone. Guide
to Elliptic Curve Cryptography. Springer Verlag, 2004.
[6] A. Hodjat and I. Verbauwhede. The energy cost of secrets
in ad-hoc networks. In Proceedings of the 5th Workshop on
Wireless Communications and Networking. IEEE, 2002.
[7] J. T. Kohl and B. C. Neuman. The Kerberos Network
Authentication Service (Version 5). Internet Engineering
Task Force (IETF), Internet Draft RFC 1510, Sept. 1993.
[8] L. E. Law et al. An eﬃcient protocol for authenticated key
agreement. Designs, Codes and Cryptography,
28(2):119–134, Mar. 2003.
[9] A. Perrig et al. SPINS: Security protocols for sensor
networks. In Proceedings of the 7th Annual International
Conference on Mobile Computing and Networking
(MOBICOM 2001), pp. 189–199. ACM Press, 2001.
[10] V. Raghunathan, C. Schurgers, S. Park, and M. B.
Srivastava. Energy-aware wireless microsensor networks.
IEEE Signal Processing Magazine, 19(2):40–50, Mar. 2002.
382