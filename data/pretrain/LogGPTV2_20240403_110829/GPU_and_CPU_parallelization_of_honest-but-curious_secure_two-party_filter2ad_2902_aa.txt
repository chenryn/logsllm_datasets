title:GPU and CPU parallelization of honest-but-curious secure two-party
computation
author:Nathaniel Husted and
Steven A. Myers and
Abhi Shelat and
Paul Grubbs
GPU and CPU Parallelization of Honest-but-Curious
Secure Two-Party Computation∗
Nathaniel Husted
Dept. of Comp. Sc.
Indiana University
PI:EMAIL
Steven Myers
Dept. of Comp. Sc.
Indiana University
PI:EMAIL
abhi shelat
Dept. of Comp. Sc.
University of Virginia
PI:EMAIL
Paul Grubbs
Dept. of Comp. Sc.
Indiana University
PI:EMAIL
ABSTRACT
Recent work demonstrates the feasibility and practical use of se-
cure two-party computation [5, 9, 15, 23]. In this work, we present
the ﬁrst Graphical Processing Unit (GPU)-optimized implementa-
tion of an optimized Yao’s garbled-circuit protocol for two-party
secure computation in the honest-but-curious and 1-bit-leaked ma-
licious models. We implement nearly all of the modern protocol
advancements, such as Free-XOR, Pipelining, and OT extension.
Our implementation is the ﬁrst allowing entire circuits to be gen-
erated concurrently, and makes use of a modiﬁcation of the XOR
technique so that circuit generation is optimized for implementa-
tion on SIMD architectures of GPUs. In our best cases we generate
about 75 million gates per second and we exceed the state of the art
performance metrics on modern CPU systems by a factor of about
200, and GPU systems by about a factor of 2.3. While many re-
cent works on garbled circuits exploit the embarrassingly parallel
nature of many tasks that are part of a secure computation protocol,
we show that there are still various forms and levels of paralleliza-
tion that may yet improve the performance of these protocols. In
particular, we highlight that implementations on the SIMD archi-
tecture of modern GPUs require signiﬁcantly different approaches
than the general purpose MIMD architecture of multi-core CPUs,
which again differ from the needs of parallelizing on compute clus-
ters. Additionally, modiﬁcations to the security models for many
common protocols have large effects on reasonable parallel archi-
tectures for implementation.
∗
This work is supported by Defense Advanced Research Projects
Agency (DARPA) and the Air Force Research Laboratory (AFRL)
under contract FA8750-11-2-0211. The views and conclusions
contained in this document are those of the authors and should not
be interpreted as representing the ofﬁcial policies, either expressed
or implied, of the Defense Advanced Research Projects Agency or
the US government. This material is based upon work supported
by the National Science Foundation under Grant No. 1111149.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’13 Dec. 9-13, 2013, New Orleans, Louisiana USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00
http://dx.doi.org/10.1145/2523649.2523681.
169
1.
INTRODUCTION
A company may wish to offer a generic screening service which
would let patients know if they are susceptible to disease based
on the presence of different proprietary markers in their DNA. In
such a scenario the company does not want to divulge its propri-
etary markers, and the consumer does not want to divulge their
genetic information in fear that it will be exploited by the com-
pany. The above problem represents a speciﬁc case of secure two-
party computation, in which there are two parties who wish to com-
pute a function f : ({0, 1}m)2 → {0, 1}m, on respective inputs
x0, x1 ∈ {0, 1}m, with the guarantee that no party learns anything
beyond what can be efﬁciently inferred from the output.
Cryptographers have studied this problem, and have suggested
solutions in various security models. However, while theoretically
interesting, it was historically believed that these protocols are too
inefﬁcient for practical implementation. Work by Malkhi et al. [18]
gave the ﬁrst implementation of Yao’s garbled-circuit protocol and,
while it could perform very modest computations in a reasonable
amount of time, the result seemed to validate the belief that these
protocols would not be practical. This has resulted in cryptogra-
phers pursuing speciﬁc protocols to solve speciﬁc instances of se-
cure two-party computation. For example, speciﬁc algorithms for
looking at the edit distance between two strings (e.g., for the ge-
netic problem discussed above), with the goal of making practi-
cal algorithms that could be deployed. However, recent advances
and improvements to Yao-based protocols and implementations (cf.
[13, 21, 8]) have shattered the belief that general purpose solutions
are too inefﬁcient to be deployed in practice. These works have
lead to renewed interest in practical implementations of Yao’s pro-
tocol. Research now focuses on determining which problems might
be solved by efﬁciently engineered versions of Yao’s garbled cir-
cuits. Any such engineering will make use of parallel processing,
as Yao’s circuit protocol (and its improvements), have a high level
of inherent parallelism for both the honest-but-curious and mali-
cious security models. Importantly, there are key differences in the
available parallelism available in the two security models.
In this paper, we provide a high-performance parallel imple-
mentation of Yao’s circuits in the honest-but-curious (HbC) and
1-bit-leaked malicious model (1BM). The implementation is op-
timized for parallel processing architectures with both multi-core
CPUs and GPUs. We have implemented both circuit generation
and evaluation on GPUs. Additionally, on multi-core CPUs we
have implemented evaluation. GPUs have shown to provide more
GFLOPS per dollar and more GFLOPS per watt than leading x86
CPUs, and the gap in performance is expected to widen. There-
fore, any compute intensive task that can naturally be parallelized,
such as Yao’s garbled circuit technique, needs to be investigated
in this model. Further, it has previously been noted that GPUs
can potentially be used as cheap, “off-the-shelf” cryptographic co-
processors, and work has been done showing their use for imple-
menting both symmetric and asymmetric cryptographic primitives,
as well as for cryptanalysis.
Frederiksen and Nielsen[5] have recently produced a somewhat
optimized version of Yao’s protocol in the malicious security model
for GPUs. However, differences in Yao’s protocol for the malicious
model, as compared to the ones we consider, necessitate different
architectural approaches for implementation. This is particularly
poignant due to the the Single Instruction Multiple Data (SIMD) ar-
chitecture of the GPU: small changes in protocols can lead to large
changes in the appropriate processing units for a GPU. Thus, our
work is important as it provides a new GPU work scheduling ar-
chitecture optimized for the HbC and 1BM security models, which
have many practical deployment scenarios.
1.1 Our Contributions
We present the ﬁrst modern implementation of Yao’s for the
Honest-but-Curious (HbC) and One-bit Leak Malicious (1BM) se-
curity models. There are many settings in practice, where these
security models are more than sufﬁcient for use in secure compu-
tation. Due to the fact that protocols that satisfy these weaker se-
curity models are substantially less resource demanding, it permits
for either a larger array of circuits to be evaluated, or for systems
to potentially be much faster.
In this paper, we ﬁrst present a new method to generate garbled
circuits with Free-XORs so that generation can be entirely paral-
lelized on the GPU. Prior works have parallelized the generation of
“layers" of the circuit, but suffered from inherent data dependen-
cies that prevented parallelizing the generation of the entire circuit
due to the Free-XOR optimization technique. By default, garbled
circuits are not designed to be optimal for GPUs and SIMD compu-
tation when using the Free-XOR technique because this technique
creates dependencies in XOR gate chains. A principle contribution
of this work is to ﬁx this issue at the protocol level; we are the ﬁrst
implementation to do so and our experimental results validate the
beneﬁts of the approach. Our resulting GPU-based implementa-
tion provides signiﬁcant improvements in circuit generation speed,
compared to all previous constructions, both those using GPUs and
those that do not. We provide a more detailed explanation of our
system in Sec. 7 and additionally discuss implementation issues
for the GPU and some simple optimizations to implementations of
SHA1.
Next we see that for our security models the evaluation of cir-
cuits on a relatively simple CPU implementation outperforms our
GPU implementation. Therefore, any system in which the GPU is
going to be used to maximal capacity for evaluation is going to need
to improve the ability to fully parallelize evaluation. Speciﬁcally,
evaluation of a garbled circuit has an inherent data dependency be-
tween layers; one cannot evaluate layer i of the circuit without hav-
ing ﬁrst evaluated all the gates which it depends on layer i − 1. A
strong deployment will need to have a ﬁner understanding of de-
pendency that allows for gates in higher levels to be evaluated (if
possible), before all lower level gates are evaluated. Further, our
experiments suggest a reasonable architecture for Yao circuits in
the HbC and 1bM models may also involve a hybrid approach: use
the GPU for generation and veriﬁcation and then splitting evalua-
170
tion between the CPU and GPU.
Overall our performance results are better or comparable to the
other state of the art implementations, with results varying on the
facets of circuit generation or evaluation considered. We show we
can generate gates using the GPU signiﬁcantly faster than the only
other GPU implementation of Yao’s [5], and on a per system basis
we can generate and evaluate gates on CPUs faster than Kreuter
et al. [15]. Speciﬁcally, on similar top-end hardware from 2013,
our system can generate roughly 74 million gates/sec, whereas [5]
achieves 21 million gates/sec and Kreuter et al. achieves 0.35 mil-
lion gates/sec.
1.2 Roadmap
In Section 2 we present related work. Section 3 gives a brief
overview of the different security models discussed in the paper,
and of Yao’s protocol and its variants. In Sections 4 and 5 we brieﬂy
introduce and discuss some of the architectural issues in GPU de-
velopment and multi-core CPU development respectively. In Sec-
tion 6, we discuss how the different security models induce differ-
ent architectural approaches to accommodate the different types of
parallelism in the underlying protocols and the resources they use.
In Section 7 we detail how our system works, and our modiﬁca-
tion to the Free-XOR technique that allows for faster circuit gen-
eration. In Section 8, we provide experimental results validating
our claims. Section 9 gives conclusions and discusses our current
directions with this work.
2. RELATED WORK
Malkhi et al.[18] describe the ﬁrst secure multi-party scheme im-
plementing garbled circuits in the Fairplay system. Their system
uses a custom circuit deﬁnition language called SFDL compiled
into a machine-readable representation language called SHDL.
The ﬁrst paper to consider the feasibility in practice of these
schemes was Pinkas et al. [22], who implemented the ﬁrst Free-
XOR scheme [13] and OT Extension, and introduced the notion
of Garbled Row Reduction to save communication costs. They
also considered all modern security models. Huang et al. [8] im-
proved Pinkas’ et al.’s performance by utilizing a number of en-
hanced construction techniques for garbled circuits including Free-
XOR, oblivious-transfer extension [11], the Naor-Pinkas OT pro-
tocol [20], and introducing the notion of pipelined gate generation
and evaluation. The system still used serial gate generation and
evaluation, but the authors showed the potential performance ben-
eﬁts of well-crafted circuits. Finally, the scheme was implemented
in Java which is highly portable, but suffers from the need to be run
through the virtual machine.
Pu et al. [23] gave the ﬁrst implementation of Yao’s circuits us-
ing a GPU. However, their implementation only used the GPU as
a cryptographic co-processor to calculate symmetric encryptions
(i.e. 3DES) and elliptic curve operations. They do not attempt
to use the GPU to actually build or evaluate any of the garbled
circuits. The system does not implement any of the modern algo-
rithmic advances in garbled circuits such as Free-XORs, Pipelin-
ing, OT-extension, etc. The implementation is in the HbC security
model.
Kreuter et al.
[15] presented the ﬁrst garbled circuit protocol
that is secure against malicious adversaries and can scale to handle
circuits with several billion gates. They implement all of the mod-
ern efﬁciency improvements to Yao’s protocol, such as Free-XOR,
Pipelining, OT-extension, etc. They also introduced a circuit com-
piler that translated C-like code into circuits and both the compiler
and Yao’s system could scale to handle several billion gates.
Huang et al.[9]present the ﬁrst efﬁcient protocol and implemen-
tation of Yao’s in the 1BM model suggested by Franklin and Mo-
hassel [19], but do not consider a parallelized implementation. They
implement the Free-XOR technique, garbled row reduction and
pipelining.
Frederiksen and Nielsen [5] have recently implemented Yao’s on
the GPU in the malicious model. Unlike the work in [23], they use
the GPU not only to compute cryptographic primitives efﬁciently,
but to generate and evaluate the circuit. They also implement mod-
ern efﬁciency improvements such as Free-XOR, garbled gate row
reduction, OT extension. They do not implement pipelining.
Our approach is similar to the latter two works in that we ex-
ploit the parallel nature of certain subproblems of garbled circuits.
However, we target the HbC and 1BM security models and thus
the protocols we are implementing have less inherent parallelism.
This is because the malicious model adds another layer of an in-
herently parallelizable protocol. Thus Kreuter et al. accelerate the
cut-and-choose technique in the malicious model by giving each
thread (i.e., processor) a circuit. They use a large compute clusters
with hundreds of nodes to run their system. In particular, their MPI
implementation is optimized for a speciﬁc type of cluster. Their
code assumes the cluster’s scheduler allocates work at the granu-
larity of processors. Modern, high-end super computing clusters
schedule at the granularity of nodes thus will not work optimally
with their code. Similarly, Frederiksen and Nielsen also generate
each copy of a circuit’s gate in the cut-and-choose protocol on a
separate GPU core.
In contrast, our system parallelizes the generation of circuits
themselves, thus each core generates distinct gates of the circuit.
Indeed, doing so requires changes to the protocol itself, but nonethe-
less, our systems are highly complementary, and a garbled circuit
implementation that is a hybrid of our techniques could provide
high performance. Further, because of the differences in the proto-
col, communication overhead in the HBC or 1BM security model
is approximately 2 orders of magnitude less than these two prior
works. This means that circuit generation and evaluation times are
of prime importance, as compared to communication overhead as
Frederiksen and Nielsen observe for the malicious model.
While there are competing approaches for constructing two-party
secure computation protocols, it appears that the Yao garbled cir-
cuits approach is currently one of the fore-runner’s in performance,
although the recent SPDZ system of Damgard et al.[3] performs
efﬁciently on some forms of circuit (such as, importantly, AES).
Still, Major questions remain on how to optimize Yao’s garbled
circuits for speed depending on different compute models, and dif-
ferent security models. Solutions have currently focused on four
approaches: i) Implementation Optimizations (Parallelism, pipelin-
ing), ii) Security Model Compromises (Hybrid Model), iii) Con-
struction Optimizations (Free-XOR technique, OT Extension), and
iv) Compiler Optimizations (Maximize XOR gates, minimize gate
counts). This work focuses on implementation optimizations us-
ing the current best security model optimizations, construction op-
timizations, and compiler optimizations from the state of the art
work. Speciﬁcally, we focus on parallelizing the generation and
evaluation of garbled circuits so as to perform well on single ma-
chines with GPUs.
3. BACKGROUND
inputs without revealing anything to either party other than the re-
sult f (x, y). At a high level, the idea behind the base protocol
is that one party—the garbled-circuit generator—prepares an “en-
crypted” version of a boolean circuit for f (the garbled circuit) and
sends it, along with an “encryption” of its input (say, x), to the
second party. This other party—the garbled-circuit evaluator—
obtains some additional information from the garbled-circuit gen-
erator (this information depends on the evaluator’s input y), and
then obliviously computes the output value f (x, y) without learn-
ing the values on any intermediate wires of the circuit.
Security Models.
In the honest-but-curious model, both parties execute a proto-
col correctly, but the parties are willing to try and extract any extra
information they can from protocol execution in other external pro-
cesses. Thus, informally, a secure protocol must ensure that no
extra information other than the output can be extracted or deduced
in polynomial time from the protocol transcripts. A secure protocol
in the malicious model is one that ensures the same even when an
adversary deviates arbitrarily from the protocols speciﬁcation. The
prior two models apply rather generically to many cryptographic
protocols. The ﬁnal model is the one-bit-leaked malicious model.
A secure computation protocol is secure in this model, if it is secure
against malicious adversaries with the relaxation that an arbitrary
predicate of the private inputs can be leaked to the adversary during
any execution. Formal deﬁnitions of each of these models can be
found in [6, 9].
All three of the models have legitimate practical scenarios. For
example, hospitals might, in order to preserve privacy as dictated by
law, determine if they have patients in common using the honest-
but-curious model. Whereas, its use to securely compute in the
presence of an adversary, such as a nation’s intelligence bureau,
would require malicious security. Companies might use secure
computation in the one-bit-leaked malicious model, when the com-
putation is not repeated frequently, and when no bit of the data is
particularly valuable.
Yao’s Protocol for the Honest-but-Curious Setting.
Given a boolean circuit for f (pre-agreed upon by the parties),
the circuit generator chooses two random cryptographic keys W 0
for each wire i of the circuit. (The semantics are that W 0
i encodes
a 0-bit on the ith wire, while W 1
i encodes a 1-bit.) In addition, for
each wire i he chooses a random permutation bit πi, and assigns
i = b ⊕ πi. Next, for each binary gate g of
key W b
i
the circuit, having input wires i, j and output wire k, the circuit
generator computes a garbled gate consisting of the following four
ciphertexts (in order):
the label λb
i , W 1
i
(cid:3)
(cid:5)λg(πi,πj )
k
(cid:2)
Encg
W
πi
i
πj
j
,W
Encg
W
πi
i
,W
1⊕πj
j
Encg
W
1⊕πi
i