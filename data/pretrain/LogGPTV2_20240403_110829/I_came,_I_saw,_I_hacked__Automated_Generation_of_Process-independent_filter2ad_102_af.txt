[9] Critical Infrastructure Protection Vigilence. 2011. SCADA Security Evaporates
in Texas. https://ciip.wordpress.com/tag/scada-incidents/. [Online].
[10] J.J. Downs and E.F. Vogel. 1993. A plant-wide industrial process control problem.
Computers & Chemical Engineering 17, 3 (1993), 245 – 255.
[11] Dragos. 2017. TRISIS Malware: Analysis of Safety System Targeted Malware.
https://dragos.com/wp-content/uploads/TRISIS-01.pdf. [Online].
[12] N. Falliere, L. O. Murchu, and E. Chien. 2011. W32. stuxnet dossier. White paper,
Symantec Corp., Security Response (Feb 2011).
[13] C. Feng, T. Li, Z. Zhu, and D. Chana. 2017.
A Deep Learning-based
Framework for Conducting Stealthy Attacks in Industrial Control Systems.
arXiv:cs.CR/1709.06397
[14] David Formby, Preethi Srinivasan, Andrew M. Leonard, Jonathan D. Rogers, and
Raheem A. Beyah. 2016. Who’s in Control of Your Control System? Device
Fingerprinting for Cyber-Physical Systems. The Internet Society.
[15] L. Garcia, F. Brasser, M. Hazar Cintuglu, A. Sadeghi, O. A. Mohammed, and S. A.
Zonouz. 2017. Hey, My Malware Knows Physics! Attacking PLCs with Physical
Model Aware Rootkit. In NDSS.
[16] F. Golnaraghi and B. C. Kuo. 2009. Automatic Control Systems (9th ed.). Wiley.
[17] N. Govil, A. Agrawal, and N.O. Tippenhauer. 2018. On Ladder Logic Bombs in
Industrial Control Systems. Springer International Publishing, 110–126.
[18] D. Hadžiosmanović, R. Sommer, E. Zambon, and P. H. Hartel. 2014. Through
the Eye of the PLC: Semantic Security Monitoring for Industrial Processes. In
Proceedings of the 30th ACSAC (ACSAC ’14). 126–135.
[19] Y. Huang, M. Esmalifalak, H. Nguyen, R. Zheng, Z. Han, H. Li, and L. Song.
2013. Bad data injection in smart grid: attack and defense mechanisms. IEEE
Communications Magazine 51, 1 (2013), 27–33.
[20] Kaspersky. 2017. ICS cybersecurity: A view from the field. https://www.kaspersky.
com/blog/ics-report-2017/16967/. [Online].
[21] A. Keliris and M. Maniatakos. 2019. ICSREF: A Framework for Automated Reverse
Engineering of Industrial Control Systems Binaries. In NDSS.
[22] A. Keliris, H. Salehghaffari, B. Cairl, P. Krishnamurthy, M. Maniatakos, and F.
Khorrami. 2016. Machine learning-based defense against process-aware attacks
on Industrial Control Systems. In 2016 IEEE International Test Conference (ITC).
[23] C. Konstantinou, M. Sazos, and M. Maniatakos. 2016. Attacking the smart grid
using public information. In 2016 17th Latin-American Test Symposium (LATS).
105–110. https://doi.org/10.1109/LATW.2016.7483348
[24] Kowsari, J. Meimandi, H., Mendu, Barnes, and Brown. 2019. Text Classification
Algorithms: A Survey. Information 10, 4 (Apr 2019), 150.
[25] M. Krotofil. 2017.
Evil Bubbles.
https://www.blackhat.com/us-
17/briefings/schedule/#evil-bubbles-or-how-to-deliver-attack-payload-
via-the-physics-of-the-process-7689. [Online].
[26] M. Krotofil and J Larsen. 2015. rocking the pocket book: Hacking chemical
plants for competition and extortion cite. https://www.blackhat.com/docs/us-
15/materials/us-15-Krotofil-Rocking-The-Pocket-Book-Hacking-Chemical-
Plant-For-Competition-And-Extortion-wp.pdf. [Online].
[27] Marina Krotofil, Jason Larsen, and Dieter Gollmann. 2015. The Process Matters:
Ensuring Data Veracity in Cyber-Physical Systems. In Proceedings of the 10th
ACM Symposium on Information, Computer and Communications Security (ASIA
CCS ’15). Association for Computing Machinery, New York, NY, USA, 133–144.
https://doi.org/10.1145/2714576.2714599
[28] R. M. Lee, M. J. Assante, and T. Conway. 2016. Analysis of the cyber attack on
the Ukrainian power grid. SANS Industrial Control Systems 23 (2016).
[29] Y. Liu, P. Ning, and M. K. Reiter. 2009. False Data Injection Attacks Against State
Estimation in Electric Power Grids. In Proceedings of the 16th ACM CCS.
[30] J. Matherly. 2019. SHODAN. https://www.shodan.io/. [Online].
[31] A. P. Mathur and N. O. Tippenhauer. 2016. SWaT: a water treatment testbed
for research and training on ICS security. In 2016 International Workshop on
Cyber-physical Systems for Smart Water Networks (CySWater). 31–36.
[32] S. McLaughlin. 2011. On Dynamic Malware Payloads Aimed at Programmable
Logic Controllers. In Proceedings of the 6th USENIX Conference on Hot Topics in
Security (HotSec’11). USENIX Association, Berkeley, CA, USA, 10–10.
[33] S. McLaughlin and P. McDaniel. 2012. SABOT: Specification-based Payload
Generation for Programmable Logic Controllers. In Proceedings of the 2012 ACM
CCS (CCS ’12). New York, NY, USA, 439–449.
[34] Department of Homeland Security. [n.d.]. Critical Infrastructure Sectors. https:
//www.dhs.gov/cisa/critical-infrastructure-sectors. [Online].
[35] Prashant Hari Narayan Rajput, Pankaj Rajput, Marios Sazos, and Michail Mani-
atakos. 2019. Process-Aware Cyberattacks for Thermal Desalination Plants. In
Proceedings of the 2019 ACM Asia Conference on Computer and Communications
Security (Asia CCS ’19). Association for Computing Machinery, New York, NY,
USA, 441–452. https://doi.org/10.1145/3321705.3329805
[36] SANS Institute. 2014. German Steel Mill Cyber Attack. https://ics.sans.org/media/
ICS-CPPE-case-Study-2-German-Steelworks_Facility.pdf. [Online].
[37] SANS Institute. 2016. The Impact of Dragonfly Malware on Industrial Control Sys-
tems. https://www.sans.org/reading-room/whitepapers/ICS/impact-dragonfly-
malware-industrial-control-systems-36672. [Online].
[38] E. Sarkar, Y. Alkindi, and M. Maniatakos. 2020. Backdoor Suppression in Neural
Networks using Input Fuzzing and Majority Voting. IEEE Design Test (2020), 1–1.
https://doi.org/10.1109/MDAT.2020.2968275
[39] M. Sharif, S. Bhagavatula, L. Bauer, and M. K. Reiter. 2016. Accessorize to a Crime:
Real and Stealthy Attacks on State-of-the-Art Face Recognition. In Proceedings of
the 2016 ACM CCS (CCS ’16). 1528–1540.
[40] Y. Shoukry, P. Martin, Y. Yona, S. Diggavi, and M. Srivastava. 2015. PyCRA:
Physical Challenge-Response Authentication For Active Sensors Under Spoofing
Attacks. In Proceedings of the 22Nd ACM CCS (CCS ’15). 1004–1015.
[41] C. Song and V.Shmatikov. 2018. Fooling OCR Systems with Adversarial Text
Images. arXiv:cs.LG/1802.05385
[42] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and R. Salakhutdinov. 2014.
Dropout: A Simple Way to Prevent Neural Networks from Overfitting. Journal
of Machine Learning Research 15 (2014), 1929–1958.
[43] Keith A. Stouffer, Joseph A. Falco, and Karen A. Scarfone. 2011. SP 800-82. Guide to
Industrial Control Systems (ICS) Security: Supervisory Control and Data Acquisition
(SCADA) Systems, Distributed Control Systems (DCS), and Other Control System
Configurations Such As Programmable Logic Controllers (PLC). Technical Report.
Gaithersburg, MD, United States.
[44] D. I. Urbina, J. Giraldo, A. A. Cardenas, J. Valente, M. Faisal, N. O. Tippenhauer, J.
Ruths, R. Candell, and H. Sandberg. 2016. Survey and new directions for physics-
based attack detection in control systems. US Department of Commerce, NIST.
[45] David I. Urbina, Jairo A. Giraldo, Alvaro A. Cardenas, Nils Ole Tippenhauer, Junia
Valente, Mustafa Faisal, Justin Ruths, Richard Candell, and Henrik Sandberg.
2016. Limiting the Impact of Stealthy Attacks on Industrial Control Systems. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’16). Association for Computing Machinery, New York, NY, USA,
1092–1105. https://doi.org/10.1145/2976749.2978388
[46] A.R. Winnicki, M. Krotofil, and D. Gollmann. 2017. Cyber-Physical System
Discovery: Reverse Engineering Physical Processes. In Proceedings of the 3rd
ACM Workshop on Cyber-Physical System Security (CPSS ’17). 3–14.
[47] T. Yardley. 2008. SCADA: issues, vulnerabilities, and future directions. https:
//www.usenix.org/system/files/login/articles/258-yardley.pdf. [Online].
[48] M. B. Younis and G. Frey. 2006. UML-based Approach for the Re-Engineering
of PLC Programs. In IECON 2006 - 32nd Annual Conference on IEEE Industrial
Electronics. 3691–3696.
[49] S. Zonouz, J. Rrushi, and S. McLaughlin. 2014. Detecting Industrial Control
Malware Using Automated PLC Code Analytics. IEEE Security Privacy (2014).
This is the accepted version of the article shared by the authors. The final published version will be available at AsiaCCS 2020 Proceedings.
APPENDIX
A CONSTRUCTION OF DATASET
In this work, we propose to fingerprint a process on the basis of an
HMI screenshot but a collection of HMI screenshots is not avail-
able as a public database. To facilitate method of fingerprinting
using ML, we collected diverse images belonging to various Criti-
cal Infrastructure (CI) sectors. The Cyber + Infrastructure unit of
Department of Homeland Security, which is responsible for protect-
ing CI from cyber and physical attacks, enlists 16 different sectors
for categorization of functionalities, threats and, vulnerabilities
[34]. The subsubsection describes the methodology followed in the
collection of dataset.
A.1 Collection of HMI screenshots
We wanted to leverage the data publicly available on the inter-
net. Some vendors advertise their products and share screenshots
of their HMIs and some utilities advertise their projects sharing
pictures of the installed CI devices and SCADA systems. A varia-
tion of the second case was used by Stuxnet to find information
about Iranian Nuclear Power Plants. We used search engines like
Google and Bing to find such images. A Python package called
google_images_download was used along with chromedriver to
download images in bulk. Once a few viable images were found,
more images were found using image search option in these search
engines. The following search strings were used:
Name of each sector: Each sector was searched by adding key-
words like ‘scada’, ‘hmi’ and ‘human machine interface’ using
google_images_download package. For example, chemical sector
images were searched for with ‘chemical hmi scada human ma-
chine interface’ as the search string. Each  in the search
string is interpreted as ’+’ and thus, all the combinations were
searched using the api. We set the limit of download to 1000 per
sector but many images faced download errors due to broken links,
unknown file types or url-errors. We expected a total of 16k images
but around 6.3k images were downloaded using this method. This
method downloaded the maximum number of images in bulk.
Popular vendor names and their product names: We targeted
5 popular CI vendors: Siemens, General Electric, ABB, Schneider
Electric, Yokogawa and their corresponding SCADA softwares to
use in search strings like ‘SIMATIC WINCC’ from Siemens, ‘iFix’
from General Electric, ‘Wonderware’ from Invensys (now Schneider
Electric). Apart from SCADA, we also searched for products that
had HMI interfaces: iRIO PLC from Schneider Electric Telecontrol
runs a software called xFlow which has a web interface.
Utilities: We also looked at select Utilities for some countries like
‘National Thermal Power Corporation’, or ‘Saudi Arabia Desalina-
tion.’
Random search: standalone search strings like ‘Scada’, ‘HMI’, ‘Dis-
tributed Control System’, ‘PLC interface’ were used for collecting
more images.
Using search engines, we downloaded more than 10k images but
not all the images were useful. Many images were cartoons, many
depicted SCADA/HMI in concept and many were different images
of the words ‘SCADA’ and ‘HMI’. We cleaned the dataset for usable
images and we found less than 5 % of the images were actually
HMI screenshots. The usable dataset after cleaning resulted into
500 images belonging to different sectors.
In our second methodology, we used a Search Engine that finds
IoT deices on the internet, Shodan [30]. We used Shodan Images,
a dedicated API in Shodan that looks for images in IoTs, to search
for screenshots in Industrial Control System (ICS) (search string:
‘screenshot.label:ics’). As an exhaustive search, we also looked for
images running VNC service (search string: ‘has_screenshot:true
RFB’). Most of the screenshots were those of the login screen and
21 images were usable for constructing our dataset.
A.2 Image Annotation
Only three sectors, Chemical Sector, Water and Waste Water Man-
agement Sector, and Energy sector, had more than 100 usable HMI
images. Since small number of images in a sector would bias the
algorithm extremely, we chose these three sectors for classification.
We performed manual labelling of data following the steps listed
below:
Visual inspection: Presence of key elements like water tanks,
common chemical names, electrical switches and connections are
strongly indicative of the sector a process belongs to.
Visiting websites and collecting metadata: Visiting the source
of the image reveals more information about the image. Other
meta-data used for classifying images were filenames, description,
language and location. We also used the meta-data downloaded
using google_images_download to help in classification.
Sub components of a sector: Critical infrastructure sectors are
themselves composed of smaller processes. For example, power
consumption of a Chemical plant may be considered a critical pro-
cess of its own. In our method of image annotation, we classify a
screenshot based on the contents on the screenshot even though
it may be a part of another CI sector because the adversary is
interested in learning about the current system she was able to
hack.
A.3 Image metadata for reconnaissance
This subsection focuses on the information obtained from the im-
ages. This is done to exhaustively characterize our dataset. We
keep track of the meta-information collected while constructing
the dataset. We collected the data downloaded as metadata using
google_images_download python library. The ‘description’ section
of the images revealed precise plant information as well. For exam-
ple, the following is a description of one image: Stainless Steel HMI
Solution for Food and Beverages Industry. Although this particular
image was not used in this work because of resolution issues but
similar descriptions, available for images used for machine learning,
helped in image annotation.
We also searched for these information on Shodan to see if these
images verifiably correspond to IoTs on the internet. For example, if
a city is revealed from the metadata with some common CI vendor
names, we searched for the combination of city and vendor with
ICS ports like 502, 2404 which correspond to two common protocols
used in ICS, Modbus and IEC 104. Using metadata from images we
could learn more about CIs deployed in various places in the world.
This is the accepted version of the article shared by the authors. The final published version will be available at AsiaCCS 2020 Proceedings.
B ICS FINGERPRINTING
B.1 Process classification using HMI
screenshots
In Section 4.4.2, we have discussed how ICSREF could be used to
fingerprint a particular function block which could be a PLC control
loop. In this section we consider the attack scenario where con-
tinuous screenshots of HMI could be taken to build a time-series
of all the variables that are being monitored in the HMI. Using
this time-series, we demonstrate a possible way of automatically
fingerprinting the infected loop by considering the time-series as
a signature for that process variable. Please note, there cannot be a
machine learning model that can classify a process variable in this
way across all sectors in all plants. Therefore, this methodology
of reconnaissance depends on the plant attacked and is not gen-
eralizable according to our definition in Section 3. For example, a
process variable pressure may have a time series with average 2800
kPa and 1000 kPa for different kinds of ICS plants and we cannot
universally make a time-series representative of pressure in this
way. Thus, this method of process variable identification is depen-
dent on the attacked plant. In this methodology, the reconnaissance
tool identifies common process variable names from the HMI using
OCR and builds time-series for them.
As mentioned in the setup, each of the control (PID) loops may
be considered to be controlled by a PLC which in turn, may be
monitored by the HMI. Here, we collected data from TE model from
the inputs of the PID loops emulating collection of data from inputs
of the PLC. Each of these inputs are the process variables of the
plant considering the feedback value coming to the PLC (Fig. 5).
We built time-series for those process variables to train a Naive
Bayes Classifier. Our aim was to finger print all the independent
loops of the MATLAB model. We found 16 out of 18 loops were
directly interacting to the measured variables. We collected data
for 60 hours of operation amounting to 900 data points for every
PID loop. Further, we split the data into time-series consisting of
30 data-points and calculated the average values of the time-series
for the 16 different measured variables. We used 80% of the dataset
for training and the rest as test set to evaluate the efficiency of the
classifier. Our aim was to identify each of the PID loops with high
accuracy using the corresponding time-series. The test accuracy for
all the 16 PID loops was 91.67%. Thus, from this machine-learning
based reconnaissance, we were able to fingerprint a particular loop,
thus, a process variable and further assess the vulnerability of a
particular loop towards successful fingerprinting and attack.
B.2 Sector classification using PLC binaries
We perform experiments to show the efficacy of using PLC FB/FBs
and strings for sector classification. We use the same dataset of
binaries. Using FB/FBs, we achieved accuracy of 33% which attested
to the fact that a process F/FB cannot be used to fingerprint ICS
sector. After data cleansing and string translation, we trained ma-
chine learning models with these stings to classify binaries into the
sectors shown in Table 6. Our results show that that this method
is ineffective for classifying the binary with an accuracy of 33.33%.
Since the PLC string-based classification model performed poorly
for ICS sector classification, We performed another experiment
Figure 8: Oscillatory perturbation attack on production.
leveraging transfer-learning to classify the PLC binaries obtained
from the field without adding any binary specific information to
the machine-learning model. The machine learning model pre-
dicted 84.21% of the binaries to belong to the energy sector. On
manual analysis we found many binaries contain processes in the
energy sector, namely boiler control and temperature control and
the accuracy was found to be slightly better. This was a prelim-
inary experiment but this concept may be used for more robust
reconnaissance.
B.3 ICS device fingerprinting
ICS attack literature has also focussed on fingerprinting vendors
or specific devices to enable attack vectors be tailored according to
the device [14]. In this work, we target generalized attack vectors
which can be aided with device level fingerprinting for successful
infection.
C OTHER PROCESS-AWARE ATTACKS
C.1 Oscillatory perturbation attack
We performed oscillatory perturbations on plant production (Fig.
8). Production was chosen as the process variable for this attack
because we wanted to experiment with attacks that are not directly
leverage the modelled dynamics. The objective of these stealthier
attacks are malicious physical dynamics which are not part of plant
performance metrics and thus, are undetectable by any threshold.
For our first attack, we choose the alarm thresholds as follows: upper
limit 25 kg/hr and lower limit 20 kg/hr. The payload generated an
attack that oscillates the production between 23 kg/hr and 20 kg/hr.
The second attack is more aggressive and the alarm thresholds in
production are chosen to be between 15 kg/hr and 30 kg/hr. This
resulted in oscillations of production between 16 kg/hr and 30 kg/hr.
The oscillatory perturbations can be further increased with further
change in 𝐾𝑃, but then the system would be driven into unstable
region of operation (i.e. the exponential increase of oscillations).
This is the accepted version of the article shared by the authors. The final published version will be available at AsiaCCS 2020 Proceedings.
C.2 Physically configurable attack trigger time
From Fig. 7, we see that the attacked pressure values settle at dif-
ferent time for different payloads. Here we choose another process
variable to specifically perform this attack. We performed the stable
perturbation attack with physically configurable trigger time on
production. We chose production to perform this attack because
decrease in production causes direct losses to ICS. The trigger times
for such explosive attacks are chosen between 0 and 40 hours. As
can be seen from Fig. 9, the payload was able to find various trigger
times at 4, 10 and 36 hours after infection. Thus, if an adversary
chooses to cause explosive attacks to ICS plants, this completely
physical attack may be used to cause damage after he escapes.
Figure 9: Stable perturbation attacks with physically config-
urable trigger time.