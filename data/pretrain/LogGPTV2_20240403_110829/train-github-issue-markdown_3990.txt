### Waypoint: Passing Values to Functions with Arguments

In the provided example, you encounter a `RangeError` when running your code. Let's review and correct the code to ensure it works as expected.

#### Example Code
```javascript
function ourFunction(a, b) {
  console.log(a - b);
}
ourFunction(10, 5); // Outputs 5
```

This function `ourFunction` takes two arguments, `a` and `b`, and logs the result of `a - b`. When called with `ourFunction(10, 5)`, it correctly outputs `5`.

#### Your Code
```javascript
function myFunction(a, b) {
  console.log(a + b);
}
myFunction(1, 2); // Should output 3
```

Your function `myFunction` is designed to take two arguments, `a` and `b`, and log the result of `a + b`. When called with `myFunction(1, 2)`, it should output `3`.

#### Troubleshooting
If you are encountering a `RangeError`, it is likely due to an issue outside the provided code snippet. Here are a few steps to troubleshoot:

1. **Check for Infinite Recursion**: Ensure that there is no infinite recursion in your code. Infinite recursion can cause a `RangeError` because the call stack exceeds its maximum size.
2. **Review Other Code**: Check if there is any other code in your script that might be causing the error.
3. **Console Logs**: Add additional `console.log` statements to trace the flow of your program and identify where the error might be occurring.

#### Corrected Code
Here is the corrected and complete code for your function:

```javascript
// Example
function ourFunction(a, b) {
  console.log(a - b);
}
ourFunction(10, 5); // Outputs 5

// Your function
function myFunction(a, b) {
  console.log(a + b);
}
myFunction(1, 2); // Outputs 3
```

By following these steps and ensuring your code is structured correctly, you should be able to resolve the `RangeError` and have your functions working as intended.