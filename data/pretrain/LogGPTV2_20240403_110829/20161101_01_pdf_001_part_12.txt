 2
 postgres=# update test set info='session a' where id=1;
 ERROR: could not serialize access due to concurrent update
 postgres=# end;
 ROLLBACK
Concurrency Control
 SERIALIZABLE READ
 In fact, this isolation level works exactly the same as Repeatable Read except that it monitors
for conditions which could make execution of a concurrent set of serializable transactions
behave in a manner inconsistent with all possible serial (one at a time) executions of those
transactions. This monitoring does not introduce any blocking beyond that present in
repeatable read, but there is some overhead to the monitoring, and detection of the conditions
which could cause a serialization anomaly will trigger a serialization failure.
 SIReadLock
The particular locks acquired during execution of a query will depend on the plan used by the
query, and multiple finer-grained locks (e.g., tuple locks) may be combined into fewer coarser-
grained locks (e.g., page locks) during the course of the transaction to prevent exhaustion of the
memory used to track the locks. A READ ONLYtransaction may be able to release its SIRead
locks before completion, if it detects that no conflicts can still occur which could lead to a
serialization anomaly. In fact, READ ONLYtransactions will often be able to establish that fact at
startup and avoid taking any predicate locks. If you explicitly request a SERIALIZABLE READ
ONLY DEFERRABLE transaction, it will block until it can establish this fact. (This is
the only case where Serializable transactions block but Repeatable Read transactions don't.) On
the other hand, SIRead locks often need to be kept past transaction commit, until overlapping read
write transactions complete.
 成功的提交并行的serializable read事务表示这些事务不管以什么顺序执行得到的结果都是一样的. 否
则必将有事务会失败. 而应用必须要能够应对这种失败, 例如重新执行一遍失败的事务并再提交.
Concurrency Control
 SERIALIZABLE READ
 用例
要使用repeatable read隔离
 class | value
级别实现与此同样的场景,
 -------+-------
需要用到select for update
 1 | 10 或for share, 限制了并发并
且带来了PAGE扫描.因此
 1 | 20
serializable隔离级别更加
 2 | 100 适合.
 2 | 200
 SERIALIZABLE SESSION A:
 SELECT SUM(value) FROM mytab WHERE class = 1;
 inserts the result (30) as the value in a new row with class = 2;
 SERIALIZABLE SESSION B:
 SELECT SUM(value) FROM mytab WHERE class = 2;
 obtains the result 300, which it inserts in a new row with class = 1;
 SERIALIZABLE SESSION A:
 COMMIT;
 SERIALIZABLE SESSION B:
 COMMIT;失败, 反之亦然
Concurrency Control
 SERIALIZABLE READ
 事务冲突检测条件 :
 1. 首先圈定发生冲突的事务的隔离级别 : = serializable 。
 换句话说冲突只会在serializable 和serializable的事务之间发生，不会发生在serializable和read
committed的事务之间等等。后面会有例子。
 2. 发生冲突的事务必须存在至少同一个表的操作交集。（一个事务查询了某些记录，另一个事务更
新或删除了这些记录中的部分或全部。或者两个事务同时查询了相同的记录。）
 3. 发生冲突的事务必须对产生交集的表都有写的操作(insert,delete,update之一) ，并且每个事务的写操
作必须至少影响1行记录及以上。
 4. 发生冲突的事务都必须有2条或以上SQL(当DML和DSL没有已经存在的行交集时)，或者其中一个
SESSION的DML（update,delete）与另一个SESSION有行交集。
 当冲突发生时，第一时间提交的事务可以成功返回，在冲突域里面，后提交的所有事务都被自动
ROLLBACK。并且报错 ：
 ERROR: could not serialize access due to read/write dependencies among transactions
 DETAIL: Reason code: Canceled on identification as a pivot, during commit attempt .
 HINT: The transaction might succeed if retried .
Concurrency Control
 SERIALIZABLE READ
 以下情况不会触发could not serialize access due to read/write dependencies among transactions错误
 所以SERIALIZABLE不能帮你实现这种BUSSINESS RULE
 postgres=# create table t1 (class int, value int);
 postgres=# create table t2 (class int, value int);
 postgres=# insert into t1 values (1,10),(1,20),(2,100),(2,200);
 SESSION A:
 postgres=# begin transaction isolation level serializable;
 postgres=# select sum(value) from t1 where class=1;
 sum
 -----
 30
 (1 row)
 SESSION B:
 postgres=# begin transaction isolation level serializable;
Concurrency Control
 postgres=# select sum(value) from t1 where class=2;
 sum
 -----
 300
 (1 row)
 SESSION A:
 postgres=# insert into t1 values(2,30);
 -- 注意下面要插入的是另一张表.
 SESSION B:
 postgres=# insert into t2 values (1,300);
 SESSION B:
 postgres=# end;
 成功
 SESSION A:
 postgres=# end;
 成功, -- 多希望他失败啊. 因为它也用到了B所改变的记录啊.
Concurrency Control
 serializable使用注意实现以及优化建议
 Declare transactions as READ ONLY when possible.
 Control the number of active connections, using a connection pool if needed. This is always an important
performance consideration, but it can be particularly important in a busy system using Serializable
transactions.
 Don't put more into a single transaction than needed for integrity purposes.
 Don't leave connections dangling "idle in transaction" longer than necessary.
 Eliminate explicit locks, SELECT FOR UPDATE, and SELECT FOR SHARE where no longer needed due
to the protections automatically provided by Serializable transactions.
 When the system is forced to combine multiple page-level predicate locks into a single relation-level
predicate lock because the predicate lock table is short of memory, an increase in the rate of serialization
failures may occur. You can avoid this by increasing max_pred_locks_per_transaction.
 A sequential scan will always necessitate a relation-level predicate lock. This can result in an increased rate
of serialization failures. It may be helpful to encourage the use of index scans by reducing random_page_cost
and/or increasing cpu_tuple_cost. Be sure to weigh any decrease in transaction rollbacks and restarts against
any overall change in query execution time.
 hot standby最高只支持到repeatable read隔离级别.
 PostgreSQL 9.1 serializable isolation conflict occur condition and compared with Oracle
 http://blog.163.com/digoal@126/blog/static/16387704020118162950691/
Concurrency Control
 表级锁冲突模式
 Command: LOCK
 Description: lock a table
 Syntax:
 LOCK [ TABLE ] [ ONLY ] name [, ...] [ IN lockmode MODE ] [ NOWAIT ]
 where lockmode is one of:
 ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE
 | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE
Concurrency Control
 行锁
 select for update
 相互冲突
 select for share
 相互不冲突, 但是不允许修改或删除被锁的行.
 $PGDATA/pg_multixact中存储了此类信息
 行锁 modifies selected rows to mark them locked, and so will result in disk writes.
 页锁
 In addition to table and row locks, page-level share/exclusive locks are used to
control read/write access to table pages in the shared buffer pool. These locks are
released immediately after a row is fetched or updated.
 死锁
 事务直接形成了相互等待的局面, 可以发生在两个或以上事务中, 是应用设计的时候
需要避免的
Concurrency Control
 Lock and Index
 Though PostgreSQL provides nonblocking read/write access to table data, nonblocking read/write access is
not currently offered for every index access method implemented inPostgreSQL. The various index types are
handled as follows:
 B-tree and GiST indexesShort-term share/exclusive page-level locks are used for read/write access. Locks
are released immediately after each index row is fetched or inserted. These index types provide the highest
concurrency without deadlock conditions.
 Hash indexesShare/exclusive hash-bucket-level locks are used for read/write access. Locks are released after
the whole bucket is processed. Bucket-level locks provide better concurrency than index-level ones, but
deadlock is possible since the locks are held longer than one index operation.
 GIN indexesShort-term share/exclusive page-level locks are used for read/write access. Locks are released
immediately after each index row is fetched or inserted. But note that insertion of a GIN-indexed value
usually produces several index key insertions per row, so GIN might do substantial work for a single value's
insertion.
 Currently, B-tree indexes offer the best performance for concurrent applications; since they also have more
features than hash indexes, they are the recommended index type for concurrent applications that need to
index scalar data. When dealing with non-scalar data, B-trees are not useful, and GiST or GIN indexes
should be used instead.
Performance Tips
 SQL优化  #seq_page_cost = 1.0
 执行计划  #random_page_cost = 4.0
 影响执行计划的参数  #cpu_tuple_cost = 0.01
 #enable_bitmapscan = on  #cpu_index_tuple_cost = 0.005
 #enable_hashagg = on  #cpu_operator_cost = 0.0025
 #enable_hashjoin = on  #effective_cache_size = 128MB
 #enable_indexscan = on
 #enable_material = on  #default_statistics_target = 100
 #enable_mergejoin = on  #constraint_exclusion = partition
 #enable_nestloop = on  #cursor_tuple_fraction = 0.1
 #enable_seqscan = on  #from_collapse_limit = 8
 #enable_sort = on  #join_collapse_limit = 8
 #enable_tidscan = on
 Genetic Query Optimizer
Performance Tips
 确保统计信息的及时更新对执行计划的优劣起到很大作用
 点击进入
 PostgreSQL's statistics target and histogram_bounds
 http://blog.163.com/digoal@126/blog/static/16387704020111152495686/
 PostgreSQL Statistics and Query Explain Introduction
 http://blog.163.com/digoal@126/blog/static/163877040201041111454178/
 PostgreSQL 行评估算法
 http://blog.163.com/digoal@126/blog/static/163877040201041111499884/
 Controlling the Planner with Explicit JOIN Clauses
 举例
 CBO
Performance Tips
 CBO
Performance Tips
 CBO Principle
 autoanalyze
是否被继承；
空值比例；
平均长度；
唯一值个数(-1唯一)；
最常见的值；
最常见的值得占比；
记录分bucket边界值；
物理存储与该列的匹配顺性；
Performance Tips
 CBO Principle
 autoanalyze
Performance Tips
Performance Tips
 举例 : Change choice of the planer.
 digoal=> create table tbl_cbo_test (id int primary key,firstname text,lastname text);
 NOTICE: CREATE TABLE / PRIMARY KEY will create implicit index "tbl_cbo_test_pkey"
for table "tbl_cbo_test"
 CREATE TABLE
 digoal=> insert into tbl_cbo_test select generate_series(1,1000000),'zhou','digoal';
 INSERT 0 1000000
 digoal=> explain analyze select * from tbl_cbo_test where id=100000;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------
Index Scan using tbl_cbo_test_pkey on tbl_cbo_test (cost=0.00..4.32 rows=1 width=16)
(actual time=0.014..0.015 rows=1 loops=1)
 Index Cond: (id = 100000)
 Total runtime: 0.035 ms
 (3 rows)
Performance Tips
 digoal=> set enable_indexscan=off;
 SET
 digoal=> explain analyze select * from tbl_cbo_test where id=100000;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------
Bitmap Heap Scan on tbl_cbo_test (cost=2.31..4.33 rows=1 width=16) (actual
time=0.030..0.031 rows=1 loops=1)
 Recheck Cond: (id = 100000)
 -> Bitmap Index Scan on tbl_cbo_test_pkey (cost=0.00..2.31 rows=1 width=0) (actual
time=0.022..0.022 rows=1 loops=1)
 Index Cond: (id = 100000)
 Total runtime: 0.065 ms
 (5 rows)
Performance Tips
 digoal=> set enable_bitmapscan=off;
 SET
 digoal=> explain analyze select * from tbl_cbo_test where id=100000;
 QUERY PLAN
 --------------------------------------------------------------------------------------------------------------
 Seq Scan on tbl_cbo_test (cost=0.00..17906.00 rows=1 width=16) (actual
time=17.524..149.940 rows=1 loops=1)
 Filter: (id = 100000)
 Total runtime: 149.962 ms
 (3 rows)
Performance Tips
 举例 : JOIN Tuning
Performance Tips
 举例 : JOIN Tuning
Performance Tips
 举例 : JOIN Tuning
Which SQL is better !
Performance Tips
 举例 : JOIN Tuning
Performance Tips
 举例 : JOIN Tuning
Performance Tips
 举例 : JOIN Tuning
Performance Tips
 举例 : JOIN Tuning
 Explicit JOIN
 What happen when SET join_collapse_limit = 1 and use the join SQL;
 如果不限制, 查询的关联的表越多, 关联的顺序组合就越多, 会带来很大的生成执行计划
的开销(穷举).
 join_collapse_limit
 尽量把explict JOIN(除了FULL JOIN)涉及的表都放到一个列表, 以这个列表进行
JOIN顺序的排列组合得到最佳执行计划.(而join_collapse_limit就是限制这个列表
有多大, 或者说有几个表会放到这里面来进行排列组合)