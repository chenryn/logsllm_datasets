return first
}
//显示单向的环形链表[遍历]
funcShowBoy(first *Boy) {
//处理一下如果环形链表为空
iffirst.Next== nil{
fmt.Println("链表为空，没有小孩...")
return
}
//创建一个指针，帮助遍历.[说明至少有一个小孩]
curBoy :=first
for{
fmt.Printf("小孩编号=%d ->", curBoy.No)
//退出的条件?curBoy.Next == first
ifcurBoy.Next== first {
break
}
//curBoy 移动到下一个
curBoy =curBoy.Next
}
}
/*
设编号为1，2，… n的n个人围坐一圈，约定编号为 k（1 pivot;{
r--
}
//1>= r 表明本次分解任务完成,break
ifl >=r{
break
}
//交换
temp= array[l]
array[l]= array[r]
array[r] =temp
//优化
ifarray[l]==pivot {
r--
}
ifarray[r]== pivot{
l++
}
}
// 如果 1== r, 再移动下
ifl ==r{
l++
r--
}
// 向左递归
ifleft  l {
QuickSort(l, right, array)
}
}
funcmain() {
arr :=[9]int{-9,78,0,23,-567,70, 123,90,-23}
fmt.Println("初始", arr)
//调用快速排序
QuickSort(0, len(arr) -1,&arr)
fmt.Println("main..")
fmt.Println(arr)
}
20.7.16 三种排序方法的速度的分析
20.8 栈
20.8.1 看一个实际需求
20.8.2 栈的介绍
有些程序员也把栈称为堆栈, 即栈和堆栈是同一个概念
1) 栈的英文为(stack)
2) 栈是一个先入后出(FILO-First In Last Out)的有序列表。
3) 栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允
许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。
4) 根据堆栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相
反，最后放入的元素最先删除，最先放入的元素最后删除
20.8.3 栈的入栈和出栈的示意图
20.8.4 栈的应用场景
1) 子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再
将地址取出，以回到原来的程序中。
2) 处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变
量等数据存入堆栈中。
3) 表达式的转换与求值。
4) 二叉树的遍历。
5) 图形的深度优先(depth 一first)搜索法。
20.8.5 栈的案例
 代码实现
20.8.6 栈实现综合计算器
 分析了实现的思路
 代码实现
package main
import(
"fmt"
"errors"
"strconv"
)
//使用数组来模拟一个栈的使用
type Stack struct {
MaxTopint // 表示我们栈最大可以存放数个数
Top int// 表示栈顶, 因为栈顶固定，因此我们直接使用Top
arr [20]int// 数组模拟栈
}
//入栈
func(this *Stack) Push(val int)(err error) {
//先判断栈是否满了
ifthis.Top== this.MaxTop -1{
fmt.Println("stack full")
return errors.New("stack full")
}
this.Top++
//放入数据
this.arr[this.Top]=val
return
}
//出栈
func(this *Stack) Pop()(val int, err error){
//判断栈是否空
ifthis.Top== -1 {
fmt.Println("stack empty!")
return 0,errors.New("stack empty")
}
//先取值，再 this.Top--
val = this.arr[this.Top]
this.Top--
return val, nil
}
//遍历栈，注意需要从栈顶开始遍历
func(this *Stack) List() {
//先判断栈是否为空
ifthis.Top== -1 {
fmt.Println("stack empty")
return
}
fmt.Println("栈的情况如下：")
fori :=this.Top;i >= 0; i--{
fmt.Printf("arr[%d]=%d\n", i,this.arr[i])
}
}
//判断一个字符是不是一个运算符[+, -,*,/]
func(this *Stack) IsOper(val int)bool {
ifval == 42|| val == 43|| val == 45|| val == 47{
return true
} else{
return false
}
}
//运算的方法
func(this *Stack) Cal(num1 int,num2 int,oper int)int{
res :=0
switch oper {
case42:
res = num2*num1
case43:
res = num2+ num1
case45:
res = num2- num1
case47:
res = num2/ num1
default :
fmt.Println("运算符错误.")
}
return res
}
//编写一个方法，返回某个运算符的优先级[程序员定义]
//[* /=> 1+ -=>0]
func(this *Stack) Priority(oper int)int{
res :=0
ifoper ==42|| oper ==47{
res = 1
} elseifoper == 43|| oper== 45{
res = 0
}
return res
}
funcmain() {
//数栈
numStack:= &Stack{
MaxTop: 20,
Top :-1,
}
//符号栈
operStack := &Stack{
MaxTop: 20,
Top :-1,
}
exp:="30+30*6-4-6"
//定义一个 index ，帮助扫描exp
index:=0
//为了配合运算，我们定义需要的变量
num1:=0
num2:=0
oper:=0
result :=0