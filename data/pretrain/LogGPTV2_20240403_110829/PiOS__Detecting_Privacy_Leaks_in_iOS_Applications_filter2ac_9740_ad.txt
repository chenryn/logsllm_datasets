written by the application developer herself, or whether it is
part of a third-party library that was statically linked against
the application. In an early stage of our experiments, we re-
alized that many applications contained one (or even multi-
ple instances) of a few popular libraries. Moreover, all these
libraries triggered PiOS’ privacy leak detection because the
system detected paths over which the unique device ID was
transmitted to third parties.
A closer examination revealed that most of these li-
braries are used to display advertisement to users. As many
iOS applications include advertisements to create a stream
of revenue for the developer, their popularity was not sur-
prising. However, the fact that all these libraries also leak
the device IDs of users that install their applications was
less expected. Moreover, we also found tracking libraries,
whose sole purpose is to collect and compile statistics on
application users and usage. Clearly, these libraries send
the device ID as a part of their functionality.
Applications that leak device IDs are indeed pervasive,
and we found that 656 (or 55% of all applications) in our
evaluation data set include either advertisement or tracking
libraries. Some applications even include multiple differ-
ent libraries at once. In fact, these libraries were so frequent
that we decided to white-list them; in the sense that it was of
no use for PiOS to constantly re-analyze and reconﬁrm their
data ﬂows. More precisely, whenever a path starts from a
sensitive sink in a white-listed library, further analysis is
skipped for this path. Thus, the analysis results that we re-
port in the subsequent sections only cover the code that was
actually written by application developers. For complete-
ness, Table 2 shows how frequently our white-list triggered
for different applications.
Type
Library
Name
Advertising
AdMob
Statistics/Tracking
Pinchmedia
Statistics/Tracking
Flurry
Advertising
Mobclix
AdWhirl
Advertising
QWAdView Advertising
Statistics/Tracking
OMApp
Advertising
ArRoller
AdRollo
Advertising
MMadView Advertising
Total
#apps
using
538
79
51
49
14
14
10
8
7
2
772
#white-
listed
55,477
2,038
386
1,445
319
219
658
734
127
96
61,499
Table 2. Prevalence of advertising and track-
ing libraries.
While not directly written by an application developer,
libraries that leak device IDs still pose a privacy risk to
users. This is because the company that is running the ad-
vertisement or statistics service has the possibility to aggre-
gate detailed application usage proﬁles. In particular, for
a popular library, the advertiser could learn precisely which
subset of applications (that include this library) are installed
on which devices. For example, in our evaluation data set,
AdMob is the most-widely-used library to serve advertise-
ments. That is, 82% of the applications that rely on third-
party advertising libraries include AdMob. Since each re-
quest to the third-party server includes the unique device ID
and the application ID, AdMob can easily aggregate which
applications are used on any given device.
Obviously, the device ID cannot immediately be linked
to a particular user. However, there is always the risk that
such a connection can be made by leveraging additional in-
formation. For example, AdMob was recently acquired by
Google. Hence, if a user happens to have an active Google
account and uses her device to access Google’s services
(e.g., by using GMail), it now becomes possible for Google
to tie this user account to a mobile phone device. As a re-
sult, the information collected through the ad service can be
used to obtain a detailed overview of who is using which
applications. Similar considerations apply to many other
services (such as social networks like Facebook) that have
the potential to link a device ID to a user proﬁle (assuming
the user has installed the social networking application).
The aforementioned privacy risk could be mitigated by
Apple if an identiﬁer would be used that is unique for the
combination of application and device. That is, the device
ID returned to a program should be different for each appli-
cation.
6.3 Reachability Analysis
Excluding white-listed accesses to sensitive data, PiOS
checked the CFGs of the analyzed applications for the pres-
ence of paths that connect sensitive sources to sinks. This
analysis resulted in a set of 205 applications that contain at
least one path from a source to a sink, and hence, a poten-
tial privacy leak. Interestingly, 96 of the 656 applications
that triggered the white-list also contain paths in their core
application code (i.e., outside of ad or tracking libraries).
The overwhelming majority (i.e., 3,877) of the accessed
sources corresponds to the unique device identiﬁer. These
accesses originate from 195 distinct applications. 36 appli-
cations access the GPS location data at 104 different pro-
gram locations. Furthermore, PiOS identiﬁed 18 paths in 5
applications that start with an access to the address book.
One application accesses both the MobileSafari history and
the photo storage. An overview that summarizes the poten-
tial leaks is shown Table 3.
Source
DeviceID
Location
Address book
Phone number
Safari history
Photos
# App Store
170 (21%)
35 (4%)
4 (0.5%)
1 (0.1%)
0 (0%)
0 (0%)
# Cydia
25 (4%)
1 (0.2%)
1 (0.2%)
0 (0%)
1 (0.2%)
1 (0.2%)
Total
195 (14%)
36 (3%)
5 (0.4%)
1 (0.1%)
1 (0.1%)
1 (0.1%)
Table 3. Applications accessing sensitive
data.
An interesting conclusion that one can draw from look-
ing at Table 3 is that, overall, the programs on Cydia are
not more aggressive (malicious) than the applications on the
App Store. This is somewhat surprising, since Cydia does
not implement any vetting process.
6.4 Data Flow Analysis
For the 205 applications that were identiﬁed with possi-
ble information leaks, PiOS then performed additional anal-
ysis to attempt to conﬁrm whether sensitive information is
actually leaked. More precisely, the system enumerates all
paths in the CFG between a pair of source and sink nodes
whose length does not exceed 100 basic blocks. Data ﬂow
analysis is then performed on these paths until either a ﬂow
indicates that sensitive information is indeed transmitted
over the network, or all paths have been analyzed (with-
out result). Note that our analysis is not sound; that is, we
might miss data ﬂows due to code constructs that we can-
not resolve statically. However, the analysis is precise, and
every conﬁrmed ﬂow is indeed a privacy leak. This is use-
ful when the majority of paths actually correspond to leaks,
which we found to be true.
For 172 applications, the data ﬂow analysis conﬁrmed a
ﬂow of sensitive information to a sink. We manually ana-
lyzed the remaining 33 applications to asses whether there
really is no data ﬂow, or whether we encountered a false
negative. In six applications, even after extensive, manual
reverse engineering, we could not ﬁnd an actual ﬂow. In
these cases, our data ﬂow analysis produced the correct re-
sult. The remaining 27 cases were missed due to a variety
of program constructs that are hard to analyze statically (re-
call that we operate directly on binary code). We discuss a
few of the common problems below.
For six applications, the data ﬂow analysis was unsuc-
cessful because these applications make use of custom-
written functions to store data in aggregate types. Also,
PiOS does not support nested data structures such as dic-
tionaries stored inside dictionaries.
In four cases, the initial step could not resolve all the
necessary object types. For example, PiOS was only able
to resolve that the invoked method (the sent message) was
setValue:forHTTPHeader- Field. However, the
object on which the method was called could not be de-
termined. As a result, the analysis could not proceed.
Two applications made use of a JSON library that
adds categories to many data types. For example,
the
NSDictionary class is extended with a method that re-
turns the contents of this dictionary as a JSON string. To
this end, the method sends each object within the dictionary
a JSONRepresentation message. The ﬂows of sensi-
tive information were missed because PiOS does not keep
track of the object types stored within aggregate data types
(e.g., dictionaries).
In other cases, ﬂows were missed due to aliased pointers
(two different pointers that refer to the same object), leaks
that only occur in the applications exception handler (which
PiOS does not support), or a format string that was read
from a conﬁguration ﬁle.
6.5 Case Studies
When examining the results of our analysis (in Table 3),
we can see that most leaks are due to applications that trans-
mit the device ID. This is similar to the situation of the ad-
vertising and tracking libraries discussed previously. More-
over, a number of applications transmit the user’s location
to a third party. These cases, however, cannot be considered
real privacy leaks. The reason is that iOS itself warns users
(and asks for permission) whenever an application makes
use of the CoreLocation functionality. Unfortunately,
such warnings are not provided when other sensitive data is
accessed. In the following, we discuss in more detail the
few cases in which the address book, the browser history,
and the photo gallery is leaked.
Address book leaks. PiOS indicated a ﬂow of sensitive
information for the Gowalla social networking application.
Closer examination of the offending path showed that the
application ﬁrst accesses the address book and then uses
the loadRequest method of the UIWebView class to
launch a web request. As part of this request, the applica-
tion transmits all user names and their corresponding email
addresses.
We then attempted to manually conﬁrm the privacy
leak by installing Gowalla on a iOS device and monitor-
ing the network trafﬁc. The names of the methods in-
volved in the leak, emailsAndNamesQueryString
and emailsAndNamesFromAddressBook, both in the
InviterView- Controller class, made it easy to ﬁnd
the corresponding actions on the user interface. In particu-
lar, the aforementioned class is responsible for inviting a
user’s friends to also download and use the Gowalla appli-
cation. A user can choose to send invitations to her Twit-
ter followers, Facebook friends, or simply select a group of
users from the address book. This is certainly legitimate be-
havior. However, the application also, and before the user
makes any selection, transmits the address book in its en-
tirety to the developer. This is the ﬂow that PiOS detects.
The resulting message4 indicates that the developers are us-
ing this information to crosscheck with their user database
whether any of the user’s contacts already use the applica-
tion. When we discovered this privacy breach, we informed
Apple through the “Report a problem” link associated with
this application on iTunes. Despite our detailed report, Ap-
ple’s response indicated that we should discuss our privacy
concerns directly with the developer.
PiOS found another leak of address book data in twit-
tericki. This application checks all contacts in the address
book to determine whether there is a picture associated with
the person. If not, the application attempts to obtain a pic-
ture of this person from Facebook. While information from
the address book is used to create network requests, these
requests are sent to Facebook. It is not the application de-
velopers that attempt to harvest address book data.
In other three cases, the address book is also sent with-
out displaying a direct warning to the user before the sen-
sitive data is transferred. However, these applications ei-
ther clearly inform the user about their activity at the be-
ginning (Facebook) or require the user to actively initiate
the transfer by selecting contacts from the address book
(XibGameEngine, to invite friend; FastAddContacts to pop-
ulate the send-to ﬁeld when opening a mail editor). This
shows that not all leaks have the same impact on a user’s
4“We couldn’t ﬁnd any friends from your Address Book who use
Gowalla. Why don’t you invite some below?”
privacy, although in all cases, PiOS correctly recognized a
sensitive data ﬂow.
Browser history and photo gallery. Mobile-Spy offers
an application called smartphone on the Cydia market
place. This application is advertised as a surveillance so-
lution to monitor children or employees. Running only on
jailbroken devices, the software has direct access to SMS
messages, emails, GPS coordinates, browser history, and
call information. The application is designed as a daemon
process running in the background, where it collects all
available information and transmits it to Mobile-Spy’s site.
The user who installs this application can then go to the site
and check the collected data.
PiOS was able to detect two ﬂows of sensitive informa-
tion in this application. The upload of the MobileSafari his-
tory, and the upload of the Photo gallery. However, PiOS
was not able to identify the leaking of the address book, and
the transfer of the email box, or SMS messages. The rea-
son for all three cases is that the application calls system
with a cp command to make a local copy of the local phone
databases that hold this information. These copies are later
opened, and their content is transferred to the Mobile-Spy
service. Tracking through the invocation of the system li-
brary call would require PiOS to understand the semantics