        SInvalReadLock,  
        SInvalWriteLock,  
        WALInsertLock,  
        WALWriteLock,  
        ControlFileLock,  
        CheckpointLock,  
        CLogControlLock,  
        SubtransControlLock,  
        MultiXactGenLock,  
        MultiXactOffsetControlLock,  
        MultiXactMemberControlLock,  
        RelCacheInitLock,  
        CheckpointerCommLock,  
        TwoPhaseStateLock,  
        TablespaceCreateLock,  
        BtreeVacuumLock,  
        AddinShmemInitLock,  
        AutovacuumLock,  
        AutovacuumScheduleLock,  
        SyncScanLock,  
        RelationMappingLock,  
        AsyncCtlLock,  
        AsyncQueueLock,  
        SerializableXactHashLock,  
        SerializableFinishedListLock,  
        SerializablePredicateLockListLock,  
        OldSerXidLock,  
        SyncRepLock,  
        /* Individual lock IDs end here */  
        FirstBufMappingLock,  
        FirstLockMgrLock = FirstBufMappingLock + NUM_BUFFER_PARTITIONS,  
        FirstPredicateLockMgrLock = FirstLockMgrLock + NUM_LOCK_PARTITIONS,  
        /* must be last except for MaxDynamicLWLock: */  
        NumFixedLWLocks = FirstPredicateLockMgrLock + NUM_PREDICATELOCK_PARTITIONS,  
        MaxDynamicLWLock = 1000000000  
} LWLockId;  
```  
6\. LWLockMode 类型定义  
src/include/storage/lwlock.h  
```  
typedef enum LWLockMode  
{  
        LW_EXCLUSIVE,  
        LW_SHARED,  
        LW_WAIT_UNTIL_FREE                      /* A special mode used in PGPROC->lwlockMode,  
                                                                 * when waiting for lock to become free. Not  
                                                                 * to be used as LWLockAcquire argument */  
} LWLockMode;  
```  
7\. LOCKTAG以及LockTagType 类型定义  
src/include/storage/lock.h  
```  
/*  
 * LOCKTAG is the key information needed to look up a LOCK item in the  
 * lock hashtable.      A LOCKTAG value uniquely identifies a lockable object.  
 *  
 * The LockTagType enum defines the different kinds of objects we can lock.  
 * We can handle up to 256 different LockTagTypes.  
 */  
typedef enum LockTagType  
{  
        LOCKTAG_RELATION,                       /* whole relation */  
        /* ID info for a relation is DB OID + REL OID; DB OID = 0 if shared */  
        LOCKTAG_RELATION_EXTEND,        /* the right to extend a relation */  
        /* same ID info as RELATION */  
        LOCKTAG_PAGE,                           /* one page of a relation */  
        /* ID info for a page is RELATION info + BlockNumber */  
        LOCKTAG_TUPLE,                          /* one physical tuple */  
        /* ID info for a tuple is PAGE info + OffsetNumber */  
        LOCKTAG_TRANSACTION,            /* transaction (for waiting for xact done) */  
        /* ID info for a transaction is its TransactionId */  
        LOCKTAG_VIRTUALTRANSACTION, /* virtual transaction (ditto) */  
        /* ID info for a virtual transaction is its VirtualTransactionId */  
        LOCKTAG_OBJECT,                         /* non-relation database object */  
        /* ID info for an object is DB OID + CLASS OID + OBJECT OID + SUBID */  
        /*  
         * Note: object ID has same representation as in pg_depend and  
         * pg_description, but notice that we are constraining SUBID to 16 bits.  
         * Also, we use DB OID = 0 for shared objects such as tablespaces.  
         */  
        LOCKTAG_USERLOCK,                       /* reserved for old contrib/userlock code */  
        LOCKTAG_ADVISORY                        /* advisory user locks */  
} LockTagType;  
/*  
 * The LOCKTAG struct is defined with malice aforethought to fit into 16  
 * bytes with no padding.  Note that this would need adjustment if we were  
 * to widen Oid, BlockNumber, or TransactionId to more than 32 bits.  
 *  
 * We include lockmethodid in the locktag so that a single hash table in  
 * shared memory can store locks of different lockmethods.  
 */  
typedef struct LOCKTAG  
{  
        uint32          locktag_field1; /* a 32-bit ID field */  
        uint32          locktag_field2; /* a 32-bit ID field */  
        uint32          locktag_field3; /* a 32-bit ID field */  
        uint16          locktag_field4; /* a 16-bit ID field */  
        uint8           locktag_type;   /* see enum LockTagType */  
        uint8           locktag_lockmethodid;   /* lockmethod indicator */  
} LOCKTAG;  
```  
8\. LOCKMODE 类型定义以及值定义.  
src/include/storage/lock.h  
```  
/*  
 * LOCKMODE is an integer (1..N) indicating a lock type.  LOCKMASK is a bit  
 * mask indicating a set of held or requested lock types (the bit 1rd_lockInfo.lockRelId.dbId,  
  393                       relation->rd_lockInfo.lockRelId.relId,  
  394                       ItemPointerGetBlockNumber(tid),  
  395                       ItemPointerGetOffsetNumber(tid));  
  396   
  397     (void) LockAcquire(&tag, lockmode, false, false);  
  398 }  
```  
10\. 重量锁TAG设置宏定义请参考如下头文件 :   
src/include/storage/lock.h  
```  
/*  
 * These macros define how we map logical IDs of lockable objects into  
 * the physical fields of LOCKTAG.      Use these to set up LOCKTAG values,  
 * rather than accessing the fields directly.  Note multiple eval of target!  
 */  
#define SET_LOCKTAG_RELATION(locktag,dboid,reloid) \  
        ((locktag).locktag_field1 = (dboid), \  
         (locktag).locktag_field2 = (reloid), \  
         (locktag).locktag_field3 = 0, \  
         (locktag).locktag_field4 = 0, \  
         (locktag).locktag_type = LOCKTAG_RELATION, \  
         (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
#define SET_LOCKTAG_RELATION_EXTEND(locktag,dboid,reloid) \  
        ((locktag).locktag_field1 = (dboid), \  
         (locktag).locktag_field2 = (reloid), \  
         (locktag).locktag_field3 = 0, \  
         (locktag).locktag_field4 = 0, \  
         (locktag).locktag_type = LOCKTAG_RELATION_EXTEND, \  
         (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
#define SET_LOCKTAG_PAGE(locktag,dboid,reloid,blocknum) \  
        ((locktag).locktag_field1 = (dboid), \  
         (locktag).locktag_field2 = (reloid), \  
         (locktag).locktag_field3 = (blocknum), \  
         (locktag).locktag_field4 = 0, \  
         (locktag).locktag_type = LOCKTAG_PAGE, \  
         (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
#define SET_LOCKTAG_TUPLE(locktag,dboid,reloid,blocknum,offnum) \  
        ((locktag).locktag_field1 = (dboid), \  
         (locktag).locktag_field2 = (reloid), \  
         (locktag).locktag_field3 = (blocknum), \  
         (locktag).locktag_field4 = (offnum), \  
         (locktag).locktag_type = LOCKTAG_TUPLE, \  
         (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
#define SET_LOCKTAG_TRANSACTION(locktag,xid) \  
        ((locktag).locktag_field1 = (xid), \  
         (locktag).locktag_field2 = 0, \  
         (locktag).locktag_field3 = 0, \  
         (locktag).locktag_field4 = 0, \  
         (locktag).locktag_type = LOCKTAG_TRANSACTION, \  
         (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
#define SET_LOCKTAG_VIRTUALTRANSACTION(locktag,vxid) \  
        ((locktag).locktag_field1 = (vxid).backendId, \  
         (locktag).locktag_field2 = (vxid).localTransactionId, \  
         (locktag).locktag_field3 = 0, \  
         (locktag).locktag_field4 = 0, \  
         (locktag).locktag_type = LOCKTAG_VIRTUALTRANSACTION, \  
         (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
#define SET_LOCKTAG_OBJECT(locktag,dboid,classoid,objoid,objsubid) \  
        ((locktag).locktag_field1 = (dboid), \  
         (locktag).locktag_field2 = (classoid), \  
         (locktag).locktag_field3 = (objoid), \  
         (locktag).locktag_field4 = (objsubid), \  
         (locktag).locktag_type = LOCKTAG_OBJECT, \  
         (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
#define SET_LOCKTAG_ADVISORY(locktag,id1,id2,id3,id4) \  
        ((locktag).locktag_field1 = (id1), \  
         (locktag).locktag_field2 = (id2), \  
         (locktag).locktag_field3 = (id3), \  
         (locktag).locktag_field4 = (id4), \  
         (locktag).locktag_type = LOCKTAG_ADVISORY, \  
         (locktag).locktag_lockmethodid = USER_LOCKMETHOD)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")