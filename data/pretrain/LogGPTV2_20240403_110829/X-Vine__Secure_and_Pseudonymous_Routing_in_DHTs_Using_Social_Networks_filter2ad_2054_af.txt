curity Protocols, April 2004.
[51] J. Pouwelse, P. Garbacki, J. Wang, A. Bakker, J. Yang, A. Io-
sup, D. Epema, M. Reinders, M. van Steen, and H. Sips. Tri-
bler: A social-based peer-to-peer system. Technical report,
Delft University of Technology, Feb 2006.
[52] S. Ratnasamy, P. Francis, M. Handley, and R. Karp. A scal-
In SIGCOMM, August
able content-addressable network.
2001.
[53] M. Ripeanu, A. Iamnitchi, and I. Foster. Mapping the
Gnutella network. IEEE Internet Computing, 2002.
[54] T. Ristenpart, G. Maganis, A. Krishnamurthy, and T. Kohno.
Privacy-preserving location tracking of lost or stolen de-
vices: cryptographic techniques and replacing trusted third
parties with DHTs. In USENIX Security, 2008.
[55] H. Rowaihy, W. Enck, P. McDaniel, and T. L. Porta. Limit-
ing sybil attacks in structured p2p networks. In INFOCOM,
2007.
[56] A. Rowstron and P. Druschel. Pastry: scalable, decentral-
ized object location and routing for large-scale peer-to-peer
systems. In ACM Middleware, November 2001.
[57] E. Sit and R. Morris. Security considerations for peer-to-
peer distributed hash tables. In IPTPS, 2002.
[58] Y. Sovran, J. Li, and L. Subramanian. Unblocking the inter-
net: Social networks foil censors. Technical report, NYU,
2008.
[59] I. Stoica, R. Morris, D. Karger, M. Kaashoek, and H. Bal-
akrishnan. Chord: a scalable peer-to-peer lookup service for
Internet applications. In SIGCOMM, 2001.
[60] N. Tran, B. Min, J. Li, and L. Subramanian. Sybil-resilient
online content voting. In NSDI, pages 15–28, 2009.
[61] E. Vasserman, R. Jansen, J. Tyra, N. Hopper, and Y. Kim.
In CCS, pages
Membership-concealing overlay networks.
390–399, 2009.
[62] B. Viswanath, A. Mislove, M. Cha, and K. P. Gummadi. On
In WOSN,
the evolution of user interaction in Facebook.
2009.
[63] D. Wallach. A survey of peer-to-peer security issues. In In-
ternational Symposium on Software Security, Tokyo, Japan,
2002.
[64] P. Wang, J. Tyra, E. Chan-Tin, T. Malchow, D. F. Kune,
In
N. Hopper, and Y. Kim. Attacking the Kad network.
SecureComm, 2008.
[65] Q. Wang, P. Mittal, and N. Borisov. In search of an anony-
mous and secure lookup: attacks on structured peer-to-peer
anonymous communication systems. In CCS, 2010.
[66] C. Wilson, B. Boe, A. Sala, K. P. Puttaswamy, and B. Y.
Zhao. User interactions in social networks and their impli-
cations. In EuroSys, pages 205–218, 2009.
[67] S. Wolchok, O. S. Hofmann, N. Heninger, E. W. Felten,
J. A. Halderman, C. J. Rossbach, B. Waters, and E. Witchel.
Defeating vanish with low-cost sybil attacks against large
DHTs. In NDSS, 2010.
[68] H. Yu, P. Gibbons, M. Kaminsky, and F. Xiao. SybilLimit:
A near-optimal social network defense against sybil attacks.
In IEEE Security and Privacy, 2008.
[69] H. Yu, M. Kaminsky, P. Gibbons, and A. Flaxman. Sybil-
Guard: Defending against Sybil attacks via social networks.
In SIGCOMM, 2006.
A Mathematical Analysis of X-Vine:
As a ﬁrst step in formally modeling X-Vine security, we
develop an analytic model for routing in X-Vine. The model
enhances our understanding of the relationship between op-
erational parameters of X-Vine, and can serve as a stepping
stone for a complete formal model to analyze X-Vine’s se-
curity against Sybil identities.
Let there be N nodes in the system with node identiﬁers
ranging from 0..N − 1. Let L(0, w) be the expected lookup
path length between the node with identiﬁer 0 and w. Let
us suppose that node maintain trails with a single successor.
Without loss of generality, the average lookup path length
can be computed as follows:
E(L) = Pw=N −1
w=0
N
L(0, w)
(1)
In the simplest case, L(0, 0) = 0. Let us ﬁrst compute
L(0, 1). Note that node 0 and node 1 have a trail between
them because they are overlay neighbors. Let d be the aver-
age node degree in the underlying topology. We assume that
the length of the trail between overlay neighbors is close to
their shortest path in the social network topology (approx-
imately logd(N )). The lookup will proceed from node 0
along the trail to node 1. Thus we have that:
L(0, 1) = Expected trail length
L(0, 1) = logd(N )
(2a)
(2b)
Notice that there cannot be any shortcutting in the in-
termediate nodes on the trail path from node 0 to node 1
because we have assumed the trail to be the shortest path in
the social network topology. Let us now compute L(0, 2).
There are two possible scenarios.
In the ﬁrst case, there
may be a trail with an end point at node 2 going through
node 0. In this case, the packet is routed along the trail to
node 2. Again, there cannot be any shortcutting along this
trail because it is the shortest path. The mean path length
in this case is logd
. In the second case, the packet will be
2
routed towards overlay node 1 (successor of node 0). Thus
we have that:
N
L(0, 2) = P (trail) ·
logd N
2
+ (1 − P (trail)) · (1 + l((logd N ) − 1, 1, 2))
(3a)
node in node 0’s routing table be node i (shortcut to i 6= 1).
Now node i may either be a friend of node 0, in which case,
the path length is 1 + L(i, w), or node i may be the end
point of a trail going through node 0, in which case, the
path length is 1 + l (cid:16) logd
there is no shortcutting, and the lookup proceeds towards
the next overlay hop node 1. Thus, we have that:
2 − 1, i, w(cid:17). In the second case,
N
L(0, w) =
w
Xi=2
P (shortcut to i) · P (shortcut via friend)
· (1 + L(i, w)) +
w
Xi=2
P (shortcut to i)·
P (shortcut via trail) ·(cid:18)1 + l(cid:18) logd N
2
− 1, i, w(cid:19)(cid:19)
+ P (no shortcut) · (1 + l((logd N ) − 1, 1, w))
(6)
N
Let us now compute the probability of shortcutting to a
node i. The probability of shortcutting to node w is simply
d+2 logd
. The probability of shortcutting to node w − 1
can be computed as P (no shortcut to w)·P (shortcut to w−
(cid:17) ·
1| no shortcut to w). This is equal to (cid:16)1 − d+2 logd
N
N
N
. Similarly, we can compute the probability of
d+2 logd
N −1
N
shortcutting to node i as:
Figure 9. X(cid:173)Vine lookup
where l(x, y, z) is deﬁned as the expected path length
when z is the destination identiﬁer, y is the next overlay
hop in the lookup, and x is the physical distance along a
trail between the current node and y (Figure 9). This means
that l((logd N ) − 1, 1, 2) is the expected path length when
the destination identiﬁer is 2, the next overlay hop is 1, and
the next overlay hop is logd N hops away from the current
node.
Note that each node maintains a trail to its successor, and
the mean length of the trails is logd(N ). This means that the
average routing state maintained by a node in the system is
logd(N ). Since each routing table entry speciﬁes two end
points for a trail, the probability that a node has a trail with
a particular end point going through it is 2 logd
N . Thus:
N
L(0, 2) =
2 logd N
logd N
·
N
2 logd N
2
+(cid:18)1 −
N (cid:19) · (1 + l((logdN ) − 1, 1, 2))
(3b)
We now need to compute l(x, 1, 2). Similar to our com-
putation of L(0, 2), again, there are three possible scenarios.
In the ﬁrst case, the current node (say A) is a friend of node
2. Then the path length is 1. In the second case, there is a
trail with an end point at node 2 going through node A. In
this case, the mean path length is logd(N )
. In the third case,
the packet continues along the current trail to node 1.
2
P (shortcut to i) = P (no shortcut to w..i+1)·
d + 2 logd N
N − (w − i)
P (no shortcut to w..j) = P (no shortcut from w..j+1)·
(cid:18)1 −
d + 2 logd N
N − (w − j)(cid:19)
(7a)
(7b)
l(x, 1, 2) =
2 logd N
N
2 (cid:19)
·(cid:18) logd N
N (cid:19) · (1 + l(x − 1, 1, 2))
2 logd N
+(cid:18)1 −
(4)
Here, the boundary conditions for terminating the recur-
sion are as follows:
l(x, 1, 1) = x if 0 ≤ x ≤ logd N
l(x, z, z) = x if 0 ≤ x ≤ logd N, 1 ≤ z ≤ N − 1
l(0, y, z) = L(y, z) = L(0, (z − y)) if 1 ≤ y ≤ z ≤ N − 1
(5a)
(5b)
Let us now compute L(0, w). Consider the following
In the ﬁrst case, let the closest preceding
two scenarios.
(5c)
Now, given that the lookup shortcuts towards overlay
hop node i, it may do so because of a friendship entry
in the routing table, or a trail in the routing table. The
probability that the shortcut happened via a friend entry,
P (shortcut via friend) =
d+2 logd(N ) . The probability that
the shortcut happened because of a X-Vine entry is
P (shortcut via trail) = 2 logd(N )
equation (6) as
d+2 logd(N ) . Thus, we can rewrite
d
L(0, w) =
w
Xi=2
P (shortcut to i) ·
d
d + 2 logd N
· (1 + L(i, w))
+
w
Xi=2
P (shortcut to i)·
2 logd N
d + 2 logd N
·(cid:18)1 + l(cid:18) logd N
2
− 1, i, w(cid:19)(cid:19)
+ P (no shortcutting) · (1 + l((logd N ) − 1, 1, w))
(8)
Analysis, s=1
Simulation, s=1
Analysis, s=20
Simulation, s=20
h
t
g
n
e
L
h
t
a
P
p
u
k
o
o
L
n
a
e
M
 70
 60
 50
 40
 30
 20
 10
 0
 0
 2000
 4000
 6000
 8000
 10000
Number of Nodes
Figure 10. Validation of Analytic Model using
d = 10
Similar to the above analysis, we can compute l(x, i, w)
as follows:
l(x, j, w) =
j+1
Xi=2
P (shortcut to i) ·
d
d + 2 logd N
+
j+1
Xi=2
P (shortcut to i)·
2 logd N
d + 2 logd(N )
·(cid:18)1 + l(cid:18) logd N
2
− 1, i, w(cid:19)(cid:19)
+ P (no shortcutting) · (1 + l(x − 1, j, w))
(9)
The boundary conditions for the termination of recursion
are the same as in equation (5).
Validation of analytic model: Figure 10 plots the mean
lookup path length as a function of number of nodes for
a synthetic scale-free topology with average degree d = 10
using a redundancy parameter of r = 1. We can see that the
results of simulation are a very close match with our ana-
lytic model, increasing conﬁdence in our results. We note
that our analytic model has implications for modeling net-
work layer DHTs like VRR.
B Pseudocode
· (1 + L(i, w))
if distance(E.endpoint,M.dest) bn) or
(numtrailsto(E.nexthop) > bl) or
(distance(E.endpoint,M.dest) <
distance(M.nextovlhop,M.dest)
bestroutes.remove(E)
endfor
/* if no remaining options, backtrack */
if bestroutes == ∅
send reject to(M.prevhop)
return
/* of remaining routes, select route with maximum
namespace progress */
routetouse=0
foreach element E in bestroutes
if distance(E.endpoint,M.dest)<
distance(routetouse,M.dest)
routetouse=E
endfor
return routetouse