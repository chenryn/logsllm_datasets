arena
arena内存申请器
用来缓解线程间申请memory时的竞争问题
每一个arena彼此独立，管理各自的chunk
每个线程在第一次malloc时，建立起与各自的arena的联系，一个线程只指向一个arena
每个进程中，arena的数量由jemalloc配置决定，在Android上硬编码为两个。
在malloc申请内存中，arena与线程缓存的关系。
申请的memory在jemalloc内部实际是通过arena申请的，且在每一个线程中都有一个缓存。
查看进程的arena
    //common
    (gdb) x/2gx arenas
    0x7f99680080: 0x0000007f997c0180 0x0000007f996800c0
    //using shadow
    (gdb) jearenas
    [jemalloc] [arenas 02] [bins 36] [runs 1408]
    [arena 00 (0x0000007f997c0180)] [bins 36] [threads: 1, 3, 5]
    [arena 01 (0x0000007f996800c0)] [bins 36] [threads: 2, 4]
    arena bin
每个arena都有一个bin数组
每一个bin对应着一种small类型，大小固定的region。
同时bin数组还肩负着用树存储未满的run的职责，并选一个作为当前指向的run
查看arena bin，runcur为对应region所属run的地址
    (gdb) jebins
    [arena 00 (0x7f997c0180)] [bins 36]
    [bin 00 (0x7f997c0688)] [size class 08] [runcur 0x7f83080fe8]
    [bin 01 (0x7f997c0768)] [size class 16] [runcur 0x7f82941168]
    [bin 02 (0x7f997c0848)] [size class 32] [runcur 0x7f80ac0808]
    [bin 03 (0x7f997c0928)] [size class 48] [runcur 0x7f81cc14c8]
    [bin 04 (0x7f997c0a08)] [size class 64] [runcur 0x7f80ac0448]
    ...
查看当前run，以及其中region的信息。
    (gdb) jeruns -c
    [arena 00 (0x7f997c0180)] [bins 36]
    [run 0x7f83080fe8] [region size 08] [total regions 512] [free regions 158]
    [run 0x7f82941168] [region size 16] [total regions 256] [free regions 218]
    [run 0x7f80ac0808] [region size 32] [total regions 128] [free regions 041]
    [run 0x7f81cc14c8] [region size 48] [total regions 256] [free regions 093]
    [run 0x7f80ac0448] [region size 64] [total regions 064] [free regions 007]
    ...
通过arena申请内存流程
申请size为8字节的memory时，先查bin，发现bin[0]所代表size为8的small
region可以装的下，则查找对应存放这个连续region的run，并从中分配一块region返回。
通过arena释放内存流程
free与申请类似，查找到存放region的run，然后释放这个region。
arena中的线程缓存
什么是线程缓存(tcache)
arena与线程缓存的流程关系。
每一个线程维护着一个对small/large内存申请的缓存
对缓存的操作与栈相似
以申请时间为衡量的增长式“垃圾回收”机制
线程缓存栈以及其指向的run中region示意图，tbins[0]中存储着对应size的region缓存栈，每一种size的tbin中存储着其size下对应的缓存栈。
线程缓存在申请内存时候的作用
还是刚才malloc的图，加上了tcache，可以看到，没有直接去通过arena要region，而是先去查对应size的tbin缓存栈avail去了。
在缓存栈中，弹出一个最近被free“回收”到缓存栈上的内存地址做新malloc的返回地址。
按照如此大小一直申请，最终栈会弹空。之后arena再通过元数据向run中要对应size的region，申请的数量是lg_fill_div，将返回的内存地址再压入缓存栈。
线程缓存在释放内存时的作用
释放与申请类似，只不过变成了将释放的地址压入缓存栈。
同样，缓存栈满了后arena也会将对应region还回去，但是每次只还一半。申请时间久的先被归还回去。缓存栈的容量在结构体tcache_bin_info中有定义。
tcache中的数据结构
    struct tcache_s {
    ...
    tcache_bin_t tbins[];
    /* cached allocation
    pointers (stacks) */
    };
    struct tcache_bin_s {
    ...
    unsigned lg_fill_div;
    unsigned ncached;
    void **avail;
    };
    //tcache_bin_s 就是 tcache_bin_t
以上这些结构体的内存，是通过arenas[0]分配得到的。
每个线程的TSD中也会存着指向这些结构的指针。
内存中的tbin与其avail指针
如何从线程中找到tcache，x0就是线程结构体的地址，其中key_data就是线程特有数据（也叫TSD）的指针，所以这里存放的就包含了tcache的地址。从shadow中可以看到TSD是在size类型为0x80的run中的。
TSD中存放的tcache与arena的示意。从shadow中可以看到tcache是在size类型为0x1c00的run中的。
如果把tcache溢出了？
这些信息在arenas[0]中存放
tcache在size类型为0x1c00的run里分配，很难去找对并操作
但是这种情况有可能的
需要创建或者销毁线程
那如果吧TSD溢出了呢？
TSD在size类型为0x80的run里分配，很难去找对并操作
这种情况有可能，但是也难达到
需要创建或者破坏线程相关信息
小结：jemalloc内部结构在堆中的布局
jemalloc中固定的部分有
arena的大小
tcache的大小
arena与线程的关联部分(比如TSD)的大小
结构地址随机化
但是有一点值得注意，线程缓存使得访问相邻的region更加容易
**利用shadow搞事情！**
**基于double free的利用姿势**
为什么要用这个呢，是因为之前我们没有在jemalloc里实践过这样的姿势
而且这个姿势在Android和Firefox都有通用的代码模式
可以很通用的使用
在第一次free对象后，控制之后的两次申请
只要申请相同大小就可以进行利用
double free的示例代码
申请到了0x7f8fed1000，看看此时的tcache。
0x7f8fed1000压入tcache
受我们控制的第二次申请，又拿到了0x7f8fed1000
地址还回去，但是指针你留下来。最后我们用这个函数指针跳向我们想去的地方
给函数指针赋值。
**任意地址free的利用前提**
不是简单的原型，通常是有缺陷的清理逻辑（比如对树中节点的移除）。
jemalloc对于free传入的地址没有很好的检查
Android加入的检查可以被绕过
释放后会把地址压入对应的线程缓存栈
释放时候页索引检查代码段：
    chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(ptr);
    if (likely(chunk != ptr)) {
    pageind = ((uintptr_t)ptr - (uintptr_t)chunk) >> LG_PAGE;
    #if defined(__ANDROID__)
    /* Verify the ptr is actually in the chunk. */
    if (unlikely(pageind = chunk_npages)) {
    __libc_fatal_no_abort(...)
    return;
    }
    #endif
    /* chunksize_mask = chunksize - 1 */
    #define LG_PAGE 12
    #define CHUNK_ADDR2BASE(a) ((void *)((uintptr_t)(a) & ~chunksize_mask))
再来看看chunk的排布
chunk中对于mapbits的检查
    mapbits = arena_mapbits_get(chunk, pageind);
    assert(arena_mapbits_allocated_get(chunk, pageind) != 0);
    #if defined(__ANDROID__)
    /* Verify the ptr has been allocated. */
    if (unlikely((mapbits & CHUNK_MAP_ALLOCATED) == 0)) {
    __libc_fatal(...);
    }
    #endif
    if (likely((mapbits & CHUNK_MAP_LARGE) == 0)) {
    /* Small allocation. */
    /* ... */
    #define CHUNK_MAP_ALLOCATED ((size_t)0x1U)
    #define CHUNK_MAP_LARGE ((size_t)0x2U)
把这两个检查绕过，就可以任意地址进行free了，当然我们就可以传入一个从run中拿到的地址。也就是说，我们可以释放并往tcache里面压栈一个非对齐的region指针，但是有一个字节会被破坏。最后重新申请被free的region就会导致溢出到下一个region，如下图所示。
**利用案例**
boot.oat 里面有Android框架层的所有编译的native代码，在启动时候随机化加载。
boot.art 装载着一系列栈初始化类信息，以及相关的对象。
加载地址对每一个设备来说地址固定，由第一次启动时决定
包含着指向boot.oat的指针
在boot.art中我们找到一个函数指针0x713b6c40，我们先来分别计算mapbits，以及pagind，可以看到其绕过了这两个检查，注意64bit下的一些常量。
利用流程
1\. 把这个在boot.art中指向boot.oat的地址通过free压入缓存栈
2\. malloc后从缓存栈中弹出这个地址
3\. 把想要控制的PC的值写进新申请的memory里面，覆盖某个当前的函数指针
4\. 等风来，调用这个函数指针。
如何找boot.art中的地址
用shadow的jefreecheck找到可以被free的地址
确保这个地址中存储的函数指针会被调用
    (gdb) jefreecheck -b 0 boot.art
    searching system@PI:EMAIL (0x708ce000 -0x715c2000)
    [page 0x712cf000]
    + 0x712cf000
    + 0x712cf028
    + 0x712cf038
    + 0x712cf060
    + 0x712cf070
    ...
为了举例方便，在这里面我们用gdb直接向malloc得到后的问题地址0x713b6c40写入非法值。可以看到0x713b6c40这个地址存储的是一个函数指针。
free这个地址后，通过malloc再获得这个地址，然后向这个地址所指向的内存写一些值，比如AAAAA，我们便成功的控制了PC。