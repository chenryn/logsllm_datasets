title:Towards a binary integrity system for windows
author:Yongzheng Wu and
Roland H. C. Yap
Towards a Binary Integrity System for Windows(cid:3)
Yongzheng Wu
Temasek Laboratories
National University of Singapore
5A, Engineering Drive 1, Singapore
PI:EMAIL
Roland H.C. Yap
School of Computing
National University of Singapore
13 Computing Drive, Singapore
PI:EMAIL
ABSTRACT
Securing Windows is a challenge because of its large attack
surface which can lead to many ways where binaries can be
loaded and subsequently executed. Furthermore, the soft-
ware in the system is itself dynamic as binaries need to be
installed, updated and uninstalled. Binaries can also be cre-
ated dynamically during software development as well as
other situations. We present a new binary security mod-
el called BinInt which provides integrity for binaries and
prevents the use of unauthorized binaries. We have imple-
mented a BinInt prototype designed with usability in mind
to be compatible with existing software in binary form. It
has low overhead and thus can be permanently on.
Categories and Subject Descriptors
D.4.5 [Operating Systems]: Reliability|Veri(cid:12)cation; D.4.6
[Operating Systems]: Security and Protection|Security
kernels
General Terms
Security, Reliability
Keywords
binary integrity, operating system, sandboxing, security mod-
el, Windows
1.
INTRODUCTION
Securing Windows is a challenge because of its large at-
tack surface which can lead to many ways where binaries can
be loaded and subsequently executed. Software in Windows
also has many interactions with each other. These interac-
tions are often not well understood or speci(cid:12)ed. Software is
typically closed source, in binary form only.
(cid:3)
000-054-232 from DRTech.
This work is supported by grants 394-000-037-422 and 394-
In this paper, we use software to mean binary (cid:12)les which
are either executables or Dynamic Link Libraries (DLLs).
We have two goals. Firstly, the security objective is to en-
sure the use of trusted binaries and maintain their integrity.
This protects against attacks which attempt to modify or re-
move binaries commonly used in malware or denial of service
attacks. We prevent malware attacks which rely on getting
a malicious executable to be run or a malicious DLL to load.
In addition, we prevent the malware from being persistent.
Secondly, the security mechanism needs to be usable with
typical software in binary form.
It needs to be compati-
ble with the software life cycle of software in the system,
i.e.
software may be installed, then used, then updated,
and (cid:12)nally uninstalled. Portions of installed software, e.g.
DLLs, may be shared with other software. Ideally, the se-
curity mechanism should be (mostly) transparent to this
software life cycle. While it may not be possible to be
completely transparent/compatible for arbitrary binaries, it
should support the mechanisms used by typical software.
We remark that as we are concerned with closed source and
binaries, approaches which change the process of installa-
tion/update, usually requiring (some source code), are not
relevant. Clearly, there is a tradeo(cid:11) between security and
usability { we seek a practical middle ground with improved
security while being compatible with typical software.
In this paper, we present a new security model for bina-
ries called BinInt. We implement a prototype of BinInt for
Windows which meets our security objectives yet allows for
software to be changed as part of the software lifecyle. It
provides a number of modes for operation: default, install
and temporary trusted modes. BinInt provides protection
(in default mode) against a broad range of binary-based at-
tacks. Our system is e(cid:14)cient and has negligible overhead in
default and temporary trusted modes. In install mode, our
benchmarks show (cid:24)12% overhead which is reasonable since
the use of install mode is infrequent.
The paper is organized as follows. Mechanisms for loading
binaries in Windows and binary-based attacks are reviewed
in Sec. 2. Sec. 3 discusses related work. Our binary security
model is described in Sec. 4. Implementation and evaluation
of BinInt is in Sec. 5 and Sec. 6 concludes.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
2. WINDOWS BINARY SECURITY ISSUES
The Windows NT operating system is di(cid:14)cult to secure
because of its closed source and complex nature. To under-
stand the issues, we (cid:12)rst discuss how binaries are used in
Windows followed by some representative attacks.
503
2.1 Binary Usage in Windows
A binary in Windows is a (cid:12)le containing executable code.
Binaries in Windows occur in many contexts, the following is
a non-exhaustive list: applications/executables (exe), com-
mand (cid:12)les (com), Dynamic Linked Libraries (dll), ActiveX
controls (ocx), device drivers (drv, screensavers (scr), con-
trol panel applets (cpl), Input Method Editors (ime), and
codecs (acm, ax). Obviously a binary needs to be in the cor-
rect format. In Windows, the only way to identify a binary
is its format, the (cid:12)lename extension is only a convention.
A single process in Windows typically uses many bina-
ries which can originate from many sources. For example, a
software installation may introduce many binaries including
shared libraries which can be loaded by many/all process-
es. To illustrate, even a small program like notepad loads
13 binaries from 3 di(cid:11)erent directories.
(It happens here
that because the AVG antivirus is installed, the binary av-
grsstx.dll is also loaded). In contrast, Internet Explor-
er on a YouTube page may load 86 DLLs from System32,
14 other DLLs, 3 drivers and some other binaries. A more
detailed look at the sharing and dependencies of Windows
binaries can be found in [7].
There are numerous mechanisms in Windows which can
cause a binary to be used, i.e. load the binary. Subsequently,
code in the binary may be executed. Some of the common
mechanisms used both by legitimate software as well as mal-
ware are: DLL injection, DLL search order hijacking, Au-
torun/Autoplay, Autostart, shell extensions, Windows Ser-
vices, rundll32.exe, and Browser Helper Objects.
2.2 Normal Usage versus Malicious Attacks
A security model must be able to distinguish malicious at-
tacks from normal software usage. We (cid:12)rstly look at typical
software usage scenarios in the software life cycle, namely
running, installing, updating and developing a software. We
then look at some attacks which exploit binaries whose be-
havior is similar to the normal usage scenarios.
The most common scenario is that of running a soft-
ware. Normal usage typically involves loading binaries, read-
ing/writing data (cid:12)les and possibly the creation of child pro-
cesses. It is, however, not common for binaries to be created
or modi(cid:12)ed. We highlight that binaries can come from var-
ious (3rd party) sources. For example, Windows Explorer
(Windows GUI shell) loads 3rd party DLLs to provide shell
extensions. The shell extensions are used to preview images
or video, to add a control panel component, to customize (cid:12)le
icons and context menus, etc. Another example is anti-virus
software which forces its DLLs to be loaded by all processes,
e.g. avgrsstx.dll from the AVG anti-virus software.
Installing software involves creating binaries and data (cid:12)les.
Installers downloaded from the Internet are typically packed
as self-extracting archives, which unpack themselves into a
temporary directory and launch from there. This unpack-
and-run behaviour is also observed in the normal running
of some software, e.g. many Sysinternals tools unpack a
kernel driver into a temporary directory and then load it.
There are a number of software update mechanisms. Mi-
crosoft Windows Update employs a dedicated service (dae-
mon process) to check, download and apply updates.
In
this case, the updater is completely separate from the soft-
ware being updated. Other software, such as Mozilla Fire-
fox and Sun JDK, employ a self-update mechanism. We use
Firefox to illustrate the mechanism. Firefox checks online if
there is a new version available and downloads the update
as a compressed archive (cid:12)le. After downloading, Firefox
invokes the updater as a helper process and terminates it-
self. The updater process reads the downloaded archive and
updates firefox.exe and other (cid:12)les if necessary. When
updating is (cid:12)nished, the updater re-launches Firefox (fire-
fox.exe) and terminates itself. The helper process tech-
nique is usually used because in Windows, a binary cannot
be written to when it is loaded by another process.
Software development means that binaries have to be cre-
ated. For example, to debug a software using an IDE, the
IDE (cid:12)rstly builds the program and then runs it. Thus the
IDE creates or modi(cid:12)es binaries then executes them.
We now turn to some common attacks that involve binary
loading or modi(cid:12)cation. Furthermore, these attacks use bi-
nary vulnerabilities in trusted programs. We highlight how
the attacks behave in a similar fashion to the normal us-
age scenarios described earlier and the security mechanism
needs to distinguish between normal usage versus an attack.
2.2.1 Running Unintended Executables
A common attack is to employ social engineering tech-
niques to get the user to run a malware executable. How-
ever, the attack can be more subtle and exploit features of
various applications to hide the executable. For example, by
default, Windows Explorer hides (cid:12)le extensions. Consider a
malware postcard.jpg.exe where the icon of the malware
also looks like a photo. The user is then fooled into think-
ing it is a JPEG image and click it for viewing in Windows
Explorer. The malware could execute its payload and then
display the photo. Thus, the user would probably think this
is just the normal display of a JPEG image. Notice that the
behaviour of both a direct or (cid:12)le extension social engineering
attack is similar to the regular software running scenario.
2.2.2 Application Data with Embedded Binaries
Malware binaries can be embedded within documents. A
recent vulnerability in PDF readers [3] illustrates this attack
where a legal PDF (cid:12)le containing an embedded executable.
When the PDF (cid:12)le is viewed, the PDF viewer (e.g. Acro-
bat) also automatically executes the embedded executable.
Notice that the behavior in the attack resembles the unpack-
and-run in the normal installation scenarios.
2.2.3 DLL Attacks
DLL attacks typically exploit some feature of an appli-
cation to inadvertently load a malicious DLL. The \carpet
bomb" [13] attack involves bugs of two di(cid:11)erent browsers.
Safari had a feature1 which downloaded (cid:12)les onto the user’s
desktop automatically. Internet Explorer had a bug where
certain DLLs are speci(cid:12)ed by the (cid:12)le name rather than a
full pathname. By combining the behavior of Safari and In-
ternet Explorer, a malicious website can execute arbitrary
code on a machine that visits the site.
It is surprising to
see that this vulnerability where applications do not use a
su(cid:14)ciently quali(cid:12)ed path when loading DLLs has recently
re-surfaced (in Aug 2010) as \binary planting" attacks [5].
In some cases, an application has features to execute bina-
ries. This can be exploited. A vulnerability [4] in handling
Windows Help (cid:12)les in Internet Explorer was recently dis-
covered. A malicious web page can cause Internet Explorer
to load a malicious WinHelp (.hlp) (cid:12)le from an arbitrary
1Apple did not consider it as a bug.
504
path. WinHelp also has a feature to allow loading of ar-
bitrary DLLs. The bug and the feature together enable a
malicious website to execute arbitrary code on the client.
The recent Stuxnet worm [6] also uses a DLL attack. In-
terestingly, Windows 7 does not even give a UAC warning
with this attack. Stuxnet exploits a vulnerability in Win-
dows Explorer which displays an icon for shortcut (cid:12)les by
using a DLL speci(cid:12)ed in the shortcut.
All above attacks load existing malicious DLLs which could
be accidentally downloaded/copied or exist in a network
drive. Once the DLL is in place, the behaviour of the attacks
is similar to the regular software running scenario.
3. RELATED WORK
3.1 Isolation Models
Isolation can be used to prevent malware from changing
other parts of the system. A straight forward form of iso-
lation is to have multiple independent systems or virtual
machines (VM). This is useful for protecting one application
against another though it might not protect against the PDF
and WinHelp attacks discussed in Sec. 2.2 which are against
the applications themselves. There is also the question of
whether it is e(cid:11)ectively feasible to run each software within
its own VM. On the one hand, this by de(cid:12)nition also pre-
vents sharing which is incompatible with the use of implicit
sharing by software in Windows and may be incompatible
with system services and utilities. It also means a loss of us-
ability since data is not sharable between applications. The
isolation also leads to high maintenance cost of updating all
VMs against vulnerabilities as there are multiple copies of
the same software or library. On the other hand, using iso-
lation separately on each software can also have signi(cid:12)cant
system overheads since large numbers of virtual machines
need to be run.
One-way isolation is a form of isolation which lets untrust-
ed programs run in a sandbox where they can read from the
trusted base system but modi(cid:12)cations are con(cid:12)ned to the
sandbox.
In one-way isolation, processes can be executed
in isolation domains, other processes are executed normally
in the base system. The semantics of (cid:12)le access is modi-
(cid:12)ed such that an isolated process can read (cid:12)les in the base
system but when it tries to modify them, a private copy is
duplicated from the base system and subsequent modi(cid:12)ca-
tion is applied on the private copy. Special care must be
taken to handle (cid:12)le deletion so that (cid:12)les in the base system
are not accessed.
Kato et al. proposed an one-way isolation system named
SoftwarePot [9], whose main purpose is to allow software to
securely circulate among di(cid:11)erent hosts. Secure circulation
means that software in the sandbox should not interfere with
the base system. A security policy speci(cid:12)es (cid:12)les visible to
the sandbox, path mapping from base system to sandbox,
system calls allowed and network addresses allowed to inter-
act. Liang et al. proposed another one-way isolation system
named Alcatraz [10]. The main di(cid:11)erence between Software-
Pot and Alcatraz is that the latter enables modi(cid:12)cation from
the sandbox to be committed to the base system.
The problems of one-way isolation are similar to that of
virtual machines, namely, that isolation is the opposite of
sharing. Other than that, one-way isolation protects the in-
tegrity of non-isolated system from attackers in the isolated
system, but it does not protect the integrity of the isolated
system. There are many forms of interactions between the
sandbox and the base system, such as (cid:12)le system access, net-
working and IPC (including local sockets, pipes, process syn-
chronization mechanisms, signals, window messages, etc.).
The (cid:12)rst two forms are easier to sandbox because their se-
mantics are known. However, IPC is application dependent
and can be complicated and undocumented. Even if only
considering documented ones, it would take too much e(cid:11)ort
to implement (cid:12)lters for di(cid:11)erent IPC protocols (e.g. shared
memory, pipe, CORBA, D-Bus, SunRPC etc.). SoftwarePot
does not discuss IPC and Alcatraz simply disallows some
forms of IPC. However, IPC is important and cannot be ig-
nored. For example, the X window system, is implemented
as local sockets; the Windows GUI requires (undocumented)
IPC to the smss.exe and csrss.exe processes. Some ser-
vices are implemented as IPC such as service management
and domain name resolution in Windows, PulseAudio (the
sound system in Linux), and syslog (the UNIX logging ser-
vice). Simply allowing and denying them will lead to either
insecure sandboxing or unusable software.
3.2 Signed Binaries
There are systems [11, 1, 14, 8, 12] that only allow signed