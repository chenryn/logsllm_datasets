---
author: Seth Kenlon
category: 观点
comments_data:
- date: '2019-08-14 07:36:48'
  message: Portable在这里是可移植性的意思
  postip: 123.157.19.35
  username: 来自浙江金华的 Firefox 68.0|Ubuntu 用户
- date: '2019-08-16 08:42:31'
  message: 北京禁摩已经很多年了，有人还幻想着取消禁摩。越活越倒退了啊！
  postip: 117.171.162.203
  username: 来自江西九江的 Chrome Mobile 57.0|Android 8.1 用户
count:
  commentnum: 2
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 8583
date: '2019-08-13 23:18:00'
editorchoice: true
excerpt: 从计算机自由先驱的口中探寻操作系统兼容性标准背后的本质。
fromurl: https://opensource.com/article/19/7/what-posix-richard-stallman-explains
id: 11222
islctt: true
largepic: /data/attachment/album/201908/13/231737robbwoss7p3p7jwo.jpg
permalink: /article-11222-1.html
pic: /data/attachment/album/201908/13/231737robbwoss7p3p7jwo.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 从计算机自由先驱的口中探寻操作系统兼容性标准背后的本质。
tags:
- GNU
- POSIX
thumb: false
title: POSIX 是什么？让我们听听 Richard Stallman 的诠释
titlepic: true
translator: martin2011qi
updated: '2019-08-13 23:18:00'
---
> 
> 从计算机自由先驱的口中探寻操作系统兼容性标准背后的本质。
> 
> 
> 
![](/data/attachment/album/201908/13/231737robbwoss7p3p7jwo.jpg)
[POSIX](https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/) 是什么？为什么如此重要？你可能在很多的技术类文章中看到这个术语，但往往会在探寻其本质时迷失在 技术初始主义   techno-initialisms 的海洋或是 以 X 结尾的行话   jargon-that-ends-in-X 中。我给 [Richard Stallman](https://stallman.org/) 博士（在黑客圈里面常称之为 RMS）发了邮件以探寻这个术语的起源及其背后的概念。
Richard Stallman 认为用 “开源” 和 “闭源” 来归类软件是一种错误的方法。Stallman 将程序分类为  尊重自由的   freedom-respecting （“ 自由   free ” 或 “ 自由（西语）   libre ”）和  践踏自由的   freedom-trampling （“ 非自由   non-free ” 或 “ 专有   proprietary ”）。开源讨论通常会为了（用户）实际得到的 优势/便利   advantages 考虑去鼓励某些做法，而非作为道德层面上的约束。
Stallman 在由其本人于 1984 年发起的 自由软件运动   The free software movement 表明，不仅仅是这些  优势/便利   advantages  受到了威胁。计算机的用户  理应得到   deserve  计算机的控制权，因此拒绝被用户控制的程序即是  非正义   injustice ，理应被 拒绝   rejected 和 排斥   eliminated 。对于用户的控制权，程序应当给予用户 [四项基本自由](https://www.gnu.org/philosophy/free-sw.en.html)：
* 自由度 0：无论用户出于何种目的，必须可以按照用户意愿，自由地运行该软件。
* 自由度 1：用户可以自由地学习并修改该软件，以便按照自己的意愿进行计算。作为前提，用户必须可以访问到该软件的源代码。
* 自由度 2：用户可以自由地分发该软件的副本，以便可以帮助他人。
* 自由度 3：用户可以自由地分发该软件修改后的副本。借此，你可以让整个社区受益于你的改进。作为前提，用户必须可以访问到该软件的源代码。
### 关于 POSIX
**Seth:** POSIX 标准是由 [IEEE](https://www.ieee.org/) 发布，用于描述 “ 可移植操作系统   portable operating system ” 的文档。只要开发人员编写符合此描述的程序，他们生产的便是符合 POSIX 的程序。在科技行业，我们称之为 “ 规范   specification ” 或将其简写为 “spec”。就技术用语而言，这是可以理解的，但我们不禁要问是什么使操作系统 “可移植”？
**RMS:** 我认为是 接口   interface 应该（在不同系统之间）是可移植的，而非任何一种*系统*。实际上，内部构造不同的各种系统都支持部分的 POSIX 接口规范。
**Seth:** 因此，如果两个系统皆具有符合 POSIX 的程序，那么它们便可以彼此假设，从而知道如何相互 “交谈”。我了解到 “POSIX” 这个简称是你想出来的。那你是怎么想出来的呢？它是如何就被 IEEE 采纳了呢？
**RMS:** IEEE 已经完成了规范的开发，但还没为其想好简练的名称。标题类似是 “可移植操作系统接口”，虽然我已记不清确切的单词。委员会倾向于将 “IEEEIX” 作为简称。而我认为那不太好。发音有点怪 - 听起来像恐怖的尖叫，“Ayeee！” - 所以我觉得人们反而会倾向于称之为 “Unix”。
但是，由于    GNU 并不是 Unix    GNU’s Not Unix ，并且它打算取代之，我不希望人们将 GNU 称为 “Unix 系统”。因此，我提出了人们可能会实际使用的简称。那个时候也没有什么灵感，我就用了一个并不是非常聪明的方式创造了这个简称：我使用了 “ 可移植操作系统   （    portable operating system    ） ” 的首字母缩写，并在末尾添加了 “ix” 作为简称。IEEE 也欣然接受了。
**Seth:** POSIX 缩写中的 “操作系统” 是仅涉及 Unix 和类 Unix 的系统（如 GNU）呢？还是意图包含所有操作系统？
**RMS:** 术语 “操作系统” 抽象地说，涵盖了完全不像 Unix 的系统、完全和 POSIX 规范无关的系统。但是，POSIX 规范适用于大量类 Unix 系统；也只有这样的系统才适合 POSIX 规范。
**Seth:** 你是否参与审核或更新当前版本的 POSIX 标准？
**RMS:** 现在不了。
**Seth:** GNU Autotools 工具链可以使应用程序更容易移植，至少在构建和安装时如此。所以可以认为 Autotools 是构建可移植基础设施的重要一环吗？
**RMS:** 是的，因为即使在遵循 POSIX 的系统中，也存在着诸多差异。而 Autotools 可以使程序更容易适应这些差异。顺带一提，如果有人想助力 Autotools 的开发，可以发邮件联系我。
**Seth:** 我想，当 GNU 刚刚开始让人们意识到一个非 Unix 的系统可以从专有的技术中解放出来的时候，关于自由软件如何协作方面，这其间一定存在一些空白区域吧。
**RMS:** 我不认为有任何空白或不确定性。我只是照着 BSD 的接口写而已。
**Seth:** 一些 GNU 应用程序符合 POSIX 标准，而另一些 GNU 应用程序的 GNU 特定的功能，要么不在 POSIX 规范中，要么缺少该规范要求的功能。对于 GNU 应用程序 POSIX 合规性有多重要？
**RMS:** 遵循标准对于利于用户的程度很重要。我们不将标准视为权威，而是且将其作为可能有用的指南来遵循。因此，我们谈论的是 遵循   following 标准而不是“ 遵守   complying ”。可以参考  GNU 编码标准   GNU Coding Standards 中的 [非 GNU 标准](https://www.gnu.org/prep/standards/html_node/Non_002dGNU-Standards.html) 段落。
我们努力在大多数问题上与标准兼容，因为在大多数的问题上这最有利于用户。但也偶有例外。
例如，POSIX 指定某些实用程序以 512 字节为单位测量磁盘空间。我要求委员会将其改为 1K，但被拒绝了，说是有个 官僚主义的规则   bureaucratic rule 强迫选用 512。我不记得有多少人试图争辩说，用户会对这个决定感到满意的。
由于 GNU 在用户的 自由   freedom 之后的第二优先级，是用户的 便利   convenience ，我们使 GNU 程序以默认 1K 为单位按块测量磁盘空间。
然而，为了防止竞争对手利用这点给 GNU 安上 “ 不合规   noncompliant ” 的骂名，我们实现了遵循 POSIX 和 ISO C 的可选模式，这种妥协着实可笑。想要遵循 POSIX，只需设置环境变量 `POSIXLY_CORRECT`，即可使程序符合 POSIX 以 512 字节为单位列出磁盘空间。如果有人知道实际使用 `POSIXLY_CORRECT` 或者 GCC 中对应的 `--pedantic` 会为某些用户提供什么实际好处的话，请务必告诉我。
**Seth:** 符合 POSIX 标准的自由软件项目是否更容易移植到其他类 Unix 系统？
**RMS:** 我认为是这样，但自上世纪 80 年代开始，我决定不再把时间浪费在将软件移植到 GNU 以外的系统上。我开始专注于推进 GNU 系统，使其不必使用任何非自由软件。至于将 GNU 程序移植到非类 GNU 系统就留给想在其他系统上运行它们的人们了。
**Seth:** POSIX 对于软件的自由很重要吗？
**RMS:** 本质上说，（遵不遵循 POSIX）其实没有任何区别。但是，POSIX 和 ISO C 的标准化确实使 GNU 系统更容易迁移，这有助于我们更快地实现从非自由软件中解放用户的目标。这个目标于上世纪 90 年代早期达成，当时Linux成为自由软件，同时也填补了 GNU 中内核的空白。
### POSIX 采纳 GNU 的创新