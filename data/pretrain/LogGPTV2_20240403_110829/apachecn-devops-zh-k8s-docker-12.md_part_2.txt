  filename: ./events.txt
```
默认情况下，Falco 会将事件输出到`stdout`，所以设置为`true`。如果您需要禁用`stdout`的日志事件，您可以将该值更改为`false`:
```
stdout_output:
  enabled: true
```
`webserver`配置用于将 Kubernetes 审计事件与 Falco 集成。默认情况下，它能够使用 HTTP 监听端口`8765`。
您可以通过将`ssl_enabled`值更改为`true`，并为`ssl_certificate`值提供证书来启用安全通信:
```
webserver:
  enabled: true
  listen_port: 8765
  k8s_audit_endpoint: /k8s_audit
  ssl_enabled: false
  ssl_certificate: /etc/falco/falco.pem
```
Falco 可以配置为向其他系统发出警报。在我们的示例配置中，他们展示了一个使用`jq`和`curl`向 Slack 通道发送警报的示例。默认情况下，该部分被**禁用**，但是如果您想在触发警报时调用外部程序，您可以启用该选项并提供要执行的程序。与前面描述的文件输出类似，`keep_alive`选项默认为`false`，它告诉 Falco 为每个事件运行程序:
```
program_output:
  enabled: false
  keep_alive: false
  program: "jq '{text: .output}' | curl -d @- -X POST https://hooks.slack.com/services/XXX"
```
Falco 可以向 HTTP 端点发送警报。我们将为 Falco 部署一个名为`falcosidekick`的插件，它运行一个网络服务器来接收来自 Falco 吊舱的请求。默认情况下是禁用的，但是我们已经启用了它，并将其设置为将在本章稍后部署`Falcosidekick`时创建的服务的名称:
```
http_output:
  enabled: true
  url: http://falcosidekick:2801
```
文件的其余部分用于启用和配置 gRPC 服务器。这在将 Falco 与 Kubernetes 一起使用时并不是常见的配置，仅在此处提供，因为它在基础`falco.yaml`文件中:
```
grpc:
  enabled: false
  bind_address: "0.0.0.0:5060"
  threadiness: 8
  private_key: "/etc/falco/certs/server.key"
  cert_chain: "/etc/falco/certs/server.crt"
  root_certs: "/etc/falco/certs/ca.crt"
grpc_output:
  enabled: false
```
基本配置只是 Falco 部署的初始配置文件。它只设置 Falco 系统配置；它不创建任何用于创建警报的规则。在下一节中，我们将解释如何配置用于创建 Falco 警报的文件。
## Falco 规则配置文件
回想一下，在我们的配置文件中，第一部分有一个名为`rules_files`的键，该键可以有多个值。您提供的值将包含文件名，这些文件名使用`configmap`挂载，告诉 Falco 要审计什么以及如何就给定事件向我们发出警报。
规则文件可以包含三种类型的元素:
*   **规则**:配置 Falco 警报
*   **宏**:创建一个可以缩短规则中定义的函数
*   **列出**:可以在规则中使用的项目集合
在接下来的小节中，我们将逐一介绍这些元素。
### 理解规则
Falco 包含一组示例 Kubernetes 规则，您可以按原样使用，也可以修改现有规则以适应您的特殊要求。
Falco 是一个强大的审计系统，可以增强集群安全性。像任何提供审计的系统一样，创建规则来监控系统会变得复杂，Falco Kubernetes 也不例外。为了有效地使用 Falco，您需要了解它如何使用规则文件，以及如何正确地定制规则来满足您的需求。
默认的 Falco 安装将包括三个规则集:
![Table 12.1 – Rules files overview ](img/B15514_Table_12.1.jpg)
表 12.1–规则文件概述
每个规则文件都有相同的语法，所以在更详细地解释每个文件之前，让我们解释一下规则、宏和列表是如何一起工作来创建规则的。
我们的第一个示例将在不属于 Kubernetes 本身的 pod 尝试联系 API 服务器时生成警报。这种类型的活动可能表明攻击者想要利用 Kubernetes API 服务器。为了实现最高效的警报，我们不希望从属于 Kubernetes 集群的需要与 API 服务器通信的 pods 生成警报。
包含的规则列表包含此事件。在`falco_rules.yaml`文件中，对于 API 服务器通信有一个规则:
```
- rule: Contact K8S API Server From Container
  desc: Detect attempts to contact the K8S API Server from a container
  condition: evt.type=connect and evt.dir=
    (container.image.repository in (gcr.io/google_containers/hyperkube-amd64,
     gcr.io/google_containers/kube2sky, sysdig/agent, sysdig/falco,
     sysdig/sysdig, falcosecurity/falco) or (k8s.ns.name = "kube-system"))
```
宏和规则一样，使用类来创建条件。要评估`k8s_containers`条件，宏使用两个类:
*   `container.image.repository`类字段，用于验证条件的存储库。
*   `k8s.ns.name`类字段，用于包含在`kube-system`命名空间中运行的任何容器。
`k8s_api_server`已被定义为包含以下条件:
```
- macro: k8s_api_server
  condition: (fd.sip.name="kubernetes.default.svc.cluster.local")
```
对于`k8s_api_server`条件，宏使用单个类字段来评估条件——即`fd.sip.name`类字段，该字段检查**服务器 IP** ( **SIP** )的域名。如果等于`kubernetes.default.svc.cluster.local`，则认为匹配。
将上述两个宏用于规则条件将会阻止任何 Kubernetes 集群单元在与 API 服务器通信时生成警报。
### 理解列表
列表允许您将项目分组到一个对象中，该对象可用于规则、宏或嵌套在其他列表中。
一个列表在一个规则文件中只需要两个键，`list`和`items`。例如，您可以将二进制文件分组到一个`list`中，而不是在一个条件下列出多个二进制文件:
```
- list: editors
  items: [vi, nano, emacs]
```
使用列表允许您使用单个条目，而不是在一个条件中包含多个项目。
规则可能很有挑战性，但是当你阅读更多包含的规则并开始创建自己的规则时，它会变得更容易。到目前为止，我们已经介绍了如何创建规则、宏和列表的基础知识。对我们腰带下的这些对象有了基本的了解后，我们将进入下一个配置文件，您将在其中创建并附加 Falco 规则。
## 创建和附加自定义规则
Falco 附带了许多基本规则，位于`falco_rules.yaml`文件中。此文件不应编辑–如果您需要更改或创建新规则，您应编辑`falco_rules.local.yaml`文件。
### 附加到现有规则
重要说明