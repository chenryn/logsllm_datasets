b
ri d
S t e
y
d
a
R a
(b) Regret w.r.t. successful attacks.
h
c
o
p
E
v
e
P r
F li p
Figure 14: Effect of different adaptation strategies
(bars) vs. different attacker strategies (X axis).
shortest path routing without attacks. The main conclu-
sion in Figure 13 is that Bohatei reduces trafﬁc latency
by 20% to 65% across different scenarios.
8.3 Dynamic DDoS attacks
We consider the following dynamic DDoS attack strate-
gies: (1) RandIngress: In each epoch, pick a random
subset of attack ingresses and distribute the attack bud-
get evenly across attack types; (2) RandAttack: In each
epoch, pick a random subset of attack types and dis-
tribute the budget evenly across all ingresses; (3) Rand-
Hybrid: In each epoch, pick a random subset of ingresses
and attack types independently and distribute the attack
budget evenly across selected pairs; (4) Steady: The ad-
versary picks a random attack type and a subset of in-
gresses and sustains it during all epochs; and (5) Flip-
PrevEpoch: This is conceptually equivalent to conduct-
ing two Steady attacks A1 and A2 with each being active
during odd and even epochs, respectively.
Given the typical DDoS attack duration (≈ 6
hours [12]), we consider an attack lasting for 5000 5-
second epochs (i.e., ≈7 hours). Bohatei is initialized
with a zero starting point of attack estimates. The met-
ric of interest we report is the normalized regret with re-
spect to the best static decision in hindsight; i.e., if we
had to pick a single static strategy for the entire duration.
Figure 14a and Figure 14b show the regret w.r.t. the two
goals G1 (the number of VMs) and G2 (volume of suc-
cessful attack) for a 24-node topology. The results are
similar using other topologies and are not shown here.
Overall, Bohatei’s online adaptation achieves low regret
across the adversarial strategies compared to two straw-
man solutions: (1) uniform estimates, and (2) estimates
given the previous measurements.
9 Related Work
DDoS has a long history; we refer readers to surveys for a
taxonomy of DDoS attacks and defenses (e.g., [41]). We
have already discussed relevant SDN/NFV work in the
previous sections. Here, we brieﬂy review other related
topics.
Attack detection: There are several algorithms for de-
tecting and ﬁltering DDoS attacks. These include time
series detection techniques (e.g., [27]), use of backscat-
ter analysis (e.g., [42]), exploiting attack-speciﬁc fea-
tures (e.g., [35]), and network-wide analysis (e.g., [38]).
These are orthogonal to the focus of this paper.
DDoS-resilient Internet architectures: These include
the use of capabilities [58], better inter-domain routing
(e.g., [60]), inter-AS collaboration (e.g., [39]), packet
marking and unforgeable identiﬁers (e.g., [26]), and
traceback (e.g., [51]). However, they do not provide an
immediate deployment path or resolution for current net-
works. In contrast, Bohatei focuses on a more practical,
single-ISP context, and is aligned with economic incen-
tives for ISPs and their customers.
Overlay-based solutions: There are overlay-based so-
lutions (e.g., [25,52]) that act as a “buffer zone” between
attack sources and targets. The design contributions in
Bohatei can be applied to these as well.
SDN/NFV-based security: There are few efforts in
this space such as FRESCO [53] and AvantGuard [54].
As we saw earlier, these SDN solutions will introduce
new DDoS avenues because of the per-ﬂow and reac-
tive model [54]. Solving this control bottleneck requires
hardware modiﬁcations to SDN switches to add “state-
ful” components, which is unlikely to be supported by
switch vendors soon [54]. In contrast, Bohatei chooses
a proactive approach of setting up tag-based forwarding
rules that is immune to these pitfalls.
10 Conclusions
Bohatei brings the ﬂexibility and elasticity beneﬁts of
recent networking trends, such as SDN and NFV, to
DDoS defense. We addressed practical challenges in
the design of Bohatei’s resource management algorithms
USENIX Association  
24th USENIX Security Symposium  829
and control/data plane mechanisms to ensure that these
do not become bottlenecks for DDoS defense. We
implemented a full-featured Bohatei prototype built on
industry-standard SDN control platforms and commod-
ity network appliances. Our evaluations on a real testbed
show that Bohatei (1) is scalable and responds rapidly to
attacks, (2) outperforms naive SDN implementations that
do not address the control/data plane bottlenecks, and (3)
enables resilient defenses against dynamic adversaries.
Looking forward, we believe that these design principles
can also be applied to other aspects of network security.
Acknowledgments
This work was supported in part by grant number
N00014-13-1-0048 from the Ofﬁce of Naval Research,
and NSF awards 1409758, 1111699, 1440056, and
1440065. Seyed K. Fayaz was supported in part by the
CMU Bertucci Fellowship. We thank Limin Jia, Min
Suk Kang, the anonymous reviewers, and our shepherd
Patrick Traynor for their helpful suggestions.
References
[1] Bohatei. https://github.com/ddos-defense/bohatei.
[2] Amazon EC2. http://aws.amazon.com/ec2/.
[3] Arbor Networks, worldwide infrastructure security report, volume IX,
2014. http://bit.ly/1R0NDRi.
[4] AT&T and Intel: Transforming the Network with NFV and SDN. https:
//www.youtube.com/watch?v=F55pHxTeJLc#t=76.
[5] AT&T Denial of Service Protection.
[6] AT&T Domain 2.0 Vision White Paper.
http://soc.att.com/
http://soc.att.com/
1999.
[7] Click Modular Router. http://www.read.cs.ucla.edu/click/
SIGCOMM CCR, 2005.
[30] J. Czyz, M. Kallitsis, M. Gharaibeh, C. Papadopoulos, M. Bailey, and
M. Karir. Taming the 800 pound gorilla: The rise and decline of ntp ddos
attacks. In Proc. IMC, 2014.
[31] S. K. Fayazbakhsh, L. Chiang, V. Sekar, M. Yu, and J. C. Mogul. Enforcing
network-wide policies in the presence of dynamic middlebox actions using
FlowTags. In Proc. NSDI, 2014.
[32] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers, J. Rexford, G. Xie,
H. Yan, J. Zhan, and H. Zhang. A clean slate 4D approach to network
control and management. ACM CCR, 2005.
[33] V. Heorhiadi, S. K. Fayaz, M. Reiter, and V. Sekar. Frenetic: A network
programming language. Information Systems Security, 2014.
[34] Jain et al. B4: Experience with a globally-deployed software deﬁned wan.
In Proc. SIGCOMM, 2013.
[35] C. Jin, H. Wang, and K. G. Shin. Hop-count ﬁltering: An effective defense
against spoofed ddos trafﬁc. In Proc. CCS, 2003.
[36] A. Kalai and S. Vempala. Efﬁcient algorithms for online decision problems.
[37] M. S. Kang, S. B. Lee, and V. Gligor. The crossﬁre attack. In Proc. IEEE
J. Comput. Syst. Sci., 2005.
Security and Privacy, 2013.
[38] A. Lakhina, M. Crovella, and C. Diot. Mining Anomalies Using Trafﬁc
Feature Distributions. In Proc. SIGCOMM, 2005.
[39] R. Mahajan et al. Controlling high bandwidth aggregates in the network.
CCR, 2001.
CCR, March 2008.
[40] N. McKeown et al. OpenFlow: enabling innovation in campus networks.
[41] J. Mirkovic and P. Reiher. A taxonomy of ddos attack and ddos defense
mechanisms. In CCR, 2004.
[42] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker, and S. Savage. Infer-
ring internet denial-of-service activity. ACM Trans. Comput. Syst., 2006.
[43] Network functions virtualisation – introductory white paper. http://
portal.etsi.org/NFV/NFV_White_Paper.pdf.
[44] A. Networks. ATLAS Summary Report: Global Denial of Service. http:
//atlas.arbor.net/summary/dos.
[45] P. Patel et al. Ananta: cloud scale load balancing.
In Proc. ACM SIG-
COMM, 2013.
Computer Networks, 1999.
[46] V. Paxson. Bro: A system for detecting network intruders in real-time. In
[47] S. Peter, J. Li, I. Zhang, D. R. K. Ports, D. Woos, A. Krishnamurthy, T. An-
derson, and T. Roscoe. Arrakis: The operating system is the control plane.
In Proc. OSDI, 2014.
[48] M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In LISA,
[49] C. Rossow. Ampliﬁcation hell: Revisiting network protocols for ddos
abuse. In Proc. USENIX Security, 2014.
[50] M. Roughan. Simplifying the Synthesis of Internet Trafﬁc Matrices. ACM
[51] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical network
support for ip traceback. In Proc. SIGCOMM, 2000.
[52] E. Shi, I. Stoica, D. Andersen, and A. Perrig. OverDoSe: A generic DDoS
protection service using an overlay network. Technical Report CMU-CS-
06-114, School of Computer Science, Carnegie Mellon University, 2006.
[53] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson.
FRESCO: Modular composable security services for software-deﬁned net-
works. In Proc. NDSS, 2013.
[54] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. AVANT-GUARD: Scal-
able and vigilant switch ﬂow management in software-deﬁned networks.
In Proc. CCS, 2013.
[55] A. Studer and A. Perrig. The coremelt attack. In Proc. ESORICS, 2009.
[56] T. Koponen et al. Network virtualization in multi-tenant datacenters. In
Proc. NSDI, 2014.
[57] P. Verkaik, D. Pei, T. Schollf, A. Shaikh, A. C. Snoeren, and J. E. van der
Merwe. Wresting Control from BGP: Scalable Fine-grained Route Control.
In Proc. USENIX ATC, 2007.
[58] X. Yang, D. Wetherall, and T. Anderson. A dos-limiting network architec-
ture. In Proc. SIGCOMM, 2005.
[59] S. Yeganeh, A. Tootoonchian, and Y. Ganjali. On scalability of software-
deﬁned networking. Communications Magazine, IEEE, 2013.
[60] X. Zhang, H.-C. Hsiao, G. Hasker, H. Chan, A. Perrig, and D. G. Andersen.
Scion: Scalability, control, and isolation on next-generation networks. In
Proc. IEEE Security and Privacy, 2011.
A ILP Formulation
The ILP formulation for an optimal resource manage-
ment (mentioned in §4.2) is shown in Figure 15.
Vairables:
In addition to the parameters and variables
that we have deﬁned earlier in §4, we deﬁne the binary
variable qd,a,i,vm,s,i,vm,s,l as follows: if it is 1, VM vm of
1IIlUec.
1kAw1Kp.
click.
[8] CloudFlare. https://www.cloudflare.com/ddos.
[9] DDoS protection using Netﬁlter/iptables. http://bit.ly/1IImM2F.
[10] Dell PowerEdge Rack Servers. http://dell.to/1dtP5Jk.
[11] GSA Advantage. http://1.usa.gov/1ggEgFN.
[12]
Incapsula Survey : What DDoS Attacks Really Cost Businesses, 2014.
http://bit.ly/1CFZyIr.
[13]
iptables. http://www.netfilter.org/projects/iptables/.
[14] NTP attacks: Welcome to the hockey stick era. http://bit.ly/
1ROlwQe.
[15] ONS 2014 Keynote: John Donovan, Senior EVP, AT&T Technology &
Network Operations. http://bit.ly/1RQFMko.
[16] Open vSwitch. http://openvswitch.org/.
[17] OpenDaylight project. http://www.opendaylight.org/.
[18] Packet processing on Intel architecture. http://intel.ly/1efIEu6.
[19] Prolexic. http://www.prolexic.com/.
[20] Radware. http://www.radware.com/Solutions/Security/.
[21] Time for an SDN Sequel? http://bit.ly/1BSpdma.
[22] Topology Zoo. www.topology-zoo.org.
[23] Verizon-Carrier Adoption of Software-deﬁned Networking. https://
www.youtube.com/watch?v=WVczl03edi4.
[24] ZScaler Cloud Security. http://www.zscaler.com.
[25] D. G. Andersen. Mayday: Distributed ﬁltering for internet services.
In
Proc. USITS, 2003.
[26] D. G. Andersen, H. Balakrishnan, N. Feamster, T. Koponen, D. Moon, and
In Proc. SIGCOMM,
S. Shenker. Accountable internet protocol (AIP).
2008.
[27] P. Barford, J. Kline, D. Plonka, and A. Ron. A signal analysis of network
trafﬁc anomalies. In Proc. ACM SIGCOMM Workshop on Internet Mea-
surement, 2002.
[28] R. C´aceres, F. Douglis, A. Feldmann, G. Glass, and M. Rabinovich. Web
proxy caching: The devil is in the details. SIGMETRICS Perform. Eval.
Rev., 26(3):11–15, Dec. 1998.
[29] M. Casado, T. Koponen, S. Shenker, and A. Tootoonchian. Fabric: A ret-
rospective on evolving sdn. In Proc. HotSDN, 2012.
830  24th USENIX Security Symposium 
USENIX Association
1 Minimize α × ∑
e
s.t.
∑
a
∑
d
fe,a,d × Te,a × Le,d + ∑
d
dscd
fe,a,d = 1  all suspicious trafﬁc should be served
d
2 ∀e,a : ∑
3 ∀a,d : ta,d = ∑
4 ∀d : ∑
e
a
fe,a,d × Te,a  trafﬁc of each type to each datacenter
d  datacenter link capacity
ta,d ≤ Clink
nd,s
a,i ≥ ta,d ×
a,i ≤ Ccompute
nd,s
∑
i
d,s
i:(i,i)=eannotated
Wa,i→i
∑
a,i→i
Pa,i
 server compute capacity
 provisioning sufﬁcient VMs (Sd is the set of d’s servers.)
5 ∀d,a,i : ∑
s∈Sd
6 ∀d,s ∈ Sd : ∑
a
7 ∀d : dscd = intraRd × IntraUnitCost + interRd × InterUnitCost  total cost within each datacenter
8 ∀d : intraRd = ∑
qd,a,i,vm,s,i,vm,s,l  intra-rack cost
MaxVM
MaxVM
MaxVol
∑
∑
a
∑
l=1
9 ∀d : interRd = ∑
a
MaxVol
∑
l=1
qd,a,i,vm,s,i,vm,s,l  inter-rack cost
∑