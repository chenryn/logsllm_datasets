    ```
2.  启动 [*ubi8*]{.emphasis} 容器，它使用只读权限挂载 `/home`{.literal}
    目录，以及具有读取和写入的权限的 `/var/spool`{.literal}
    目录。容器会公开端口 [*21*]{.emphasis}。
    ``` screen
    # podman run --env container=podman -v /home:/home:ro -v /var/spool:/var/spool:rw -p 21:21 -it ubi8 bash
    ```
    请注意，现在容器使用 `container_t`{.literal} SELinux
    类型运行。这个类型是 SELinux
    策略中所有容器的通用域。针对于您的具体情况，这可能太严格或太宽松。
3.  打开一个新终端，并输入 `podman ps`{.literal} 命令以获取容器的 ID：
    ``` screen
    # podman ps
    CONTAINER ID   IMAGE                                   COMMAND   CREATED          STATUS              PORTS   NAMES
    37a3635afb8f   registry.access.redhat.com/ubi8:latest  bash      15 minutes ago   Up 15 minutes ago           heuristic_lewin
    ```
4.  创建容器 JSON 文件，并使用 `udica`{.literal} 根据 JSON
    文件中的信息创建策略模块：
    ``` screen
    # podman inspect 37a3635afb8f > container.json
    # udica -j container.json my_container
    Policy my_container with container id 37a3635afb8f created!
    [...]
    ```
    或者：
    ``` screen
    # podman inspect 37a3635afb8f | udica my_container
    Policy my_container with container id 37a3635afb8f created!
    Please load these modules using:
    # semodule -i my_container.cil /usr/share/udica/templates/{base_container.cil,net_container.cil,home_container.cil}
    Restart the container with: "--security-opt label=type:my_container.process" parameter
    ```
5.  如上一步中的 `udica`{.literal} 输出所建议，加载策略模块：
    ``` screen
    # semodule -i my_container.cil /usr/share/udica/templates/{base_container.cil,net_container.cil,home_container.cil}
    ```
6.  停止容器并使用
    `--security-opt label=type:my_container.process`{.literal}
    选项再次启动它：
    ``` screen
    # podman stop 37a3635afb8f
    # podman run --security-opt label=type:my_container.process -v /home:/home:ro -v /var/spool:/var/spool:rw -p 21:21 -it ubi8 bash
    ```
:::
::: orderedlist
**验证**
1.  检查容器使用 `my_container.process`{.literal} 类型运行：
    ``` screen
    # ps -efZ | grep my_container.process
    unconfined_u:system_r:container_runtime_t:s0-s0:c0.c1023 root 2275 434  1 13:49 pts/1 00:00:00 podman run --security-opt label=type:my_container.process -v /home:/home:ro -v /var/spool:/var/spool:rw -p 21:21 -it ubi8 bash
    system_u:system_r:my_container.process:s0:c270,c963 root 2317 2305  0 13:49 pts/0 00:00:00 bash
    ```
2.  验证 SELinux 现在允许访问 `/home`{.literal} 和
    `/var/spool`{.literal} 挂载点：
    ``` screen
    [root@37a3635afb8f /]# cd /home
    [root@37a3635afb8f home]# ls
    username
    [root@37a3635afb8f ~]# cd /var/spool/
    [root@37a3635afb8f spool]# touch test
    [root@37a3635afb8f spool]#
    ```
3.  检查 SELinux 是否只允许绑定到端口 21：
    ``` screen
    [root@37a3635afb8f /]# dnf install nmap-ncat
    [root@37a3635afb8f /]# nc -lvp 21
    ...
    Ncat: Listening on :::21
    Ncat: Listening on 0.0.0.0:21
    ^C
    [root@37a3635afb8f /]# nc -lvp 80
    ...
    Ncat: bind to :::80: Permission denied. QUITTING.
    ```
:::
::: itemizedlist
**其他资源**
-   `udica(8)`{.literal} 和 `podman(1)`{.literal} man page
-   [构建、运行和管理容器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/building_running_and_managing_containers/){.link}
:::
:::
::: section
::: titlepage
# []{#creating-selinux-policies-for-containers_using-selinux.html#_additional_resources_4}其他资源 {.title}
:::
::: itemizedlist
-   [udica - 为容器生成 SELinux
    策略](https://github.com/containers/udica#creating-selinux-policy-for-container){.link}
:::
:::
:::
[]{#deploying-the-same-selinux-configuration-on-multiple-systems_using-selinux.html}
::: chapter
::: titlepage
# []{#deploying-the-same-selinux-configuration-on-multiple-systems_using-selinux.html#deploying-the-same-selinux-configuration-on-multiple-systems_using-selinux}第 10 章 在多个系统中部署相同的 SELinux 配置 {.title}
:::
这部分提供了在多个系统中部署验证的 SELinux 配置的建议方法：
::: itemizedlist
-   使用 RHEL 系统角色和 Ansible
-   在脚本中使用 `semanage`{.literal} export 和导入命令
:::
::: section
::: titlepage
# []{#deploying-the-same-selinux-configuration-on-multiple-systems_using-selinux.html#introduction-to-the-selinux-system-role_deploying-the-same-selinux-configuration-on-multiple-systems}SELinux 系统角色简介 {.title}
:::
RHEL 系统角色是 Ansible 角色和模块的集合，为远程管理多个 RHEL
系统提供一致的配置界面。SELinux 系统角色启用以下操作：
::: itemizedlist
-   清理与 SELinux 布尔值、文件上下文、端口和登录相关的本地策略修改。
-   设置 SELinux 策略布尔值、文件上下文、端口和登录。
-   在指定文件或目录中恢复文件上下文。
-   管理 SELinux 模块。
:::
下表提供了 SELinux 系统角色中可用的输入变量概述。
::: table
[]{#deploying-the-same-selinux-configuration-on-multiple-systems_using-selinux.html#idm139972193508400}
**表 10.1. SELinux 系统角色变量**
::: table-contents
  角色变量               描述                                                                             CLI 的替代方案
  ---------------------- -------------------------------------------------------------------------------- -------------------------------------------------------------------------------------
  selinux_policy         选择保护目标进程或多级别安全保护的策略。                                         `/etc/selinux/config`{.literal}中的 `SELINUXTYPE`{.literal}
  selinux_state          切换 SELinux 模式。请参阅 `ansible-doc selinux`{.literal}                        `/etc/selinux/config`{.literal} 中的 `setenforce`{.literal} 和 `SELINUX`{.literal}.
  selinux_booleans       启用和禁用 SELinux 布尔值。请参阅 `ansible-doc seboolean`{.literal}。            `setsebool`{.literal}
  selinux_fcontexts      添加或删除 SELinux 文件上下文映射。请参阅 `ansible-doc sefcontext`{.literal}。   `semanage fcontext`{.literal}
  selinux_restore_dirs   在文件系统树中恢复 SELinux 标签。                                                `restorecon -R`{.literal}
  selinux_ports          在端口上设置 SELinux 标签。请参阅 `ansible-doc seport`{.literal}。               `semanage port`{.literal}
  selinux_logins         将用户设置为 SELinux 用户映射。请参阅 `ansible-doc selogin`{.literal}。          `semanage login`{.literal}
  selinux_modules        安装、启用、禁用或删除 SELinux 模块。                                            `semodule`{.literal}
:::
:::
`rhel-system-roles`{.literal} 软件包安装的
`/usr/share/doc/rhel-system-roles/selinux/example-selinux-playbook.yml`{.literal}
示例 playbook 演示了如何在 enforcing 模式下设置目标策略。playbook
还应用多个本地策略修改，并在 `/tmp/test_dir/`{.literal}
目录中恢复文件上下文。
有关 SELinux 角色变量的详细参考，请安装 `rhel-system-roles`{.literal}
软件包，并参阅 `/usr/share/doc/rhel-system-roles/selinux/`{.literal}
目录中的 `README.md`{.literal} 或 `README.html`{.literal} 文件。
::: itemizedlist
**其他资源**
-   [RHEL
    系统角色简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}。
:::
:::
::: section
::: titlepage
# []{#deploying-the-same-selinux-configuration-on-multiple-systems_using-selinux.html#using-the-selinux-system-role-to-apply-selinux-settings-on-multiple-systems_deploying-the-same-selinux-configuration-on-multiple-systems}使用 SELinux 系统角色在多个系统上应用 SELinux 设置 {.title}
:::
按照以下步骤，在已验证的 SELinux 设置中准备并应用 Ansible playbook。
::: itemizedlist
**先决条件**
-   对一个或多个 [*受管节点*]{.emphasis}
    的访问和权限，这些节点是您要使用 SELinux 系统角色进行配置的系统。
-   对 [*控制节点*]{.emphasis} 的访问和权限，控制节点是 Red Hat Ansible
    Engine 配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
        软件包已安装 。
    :::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
RHEL 8.0-8.5 提供对一个独立的 Ansible 存储库的访问权限，该存储库包含基于
Ansible 的自动化 Ansible Engine 2.9。Ansible Engine
包含命令行实用程序，如
`ansible`{.literal}、`ansible-playbook`{.literal}、连接器（如
`docker`{.literal} 和 `podman`{.literal}
）以及许多插件和模块。有关如何获取并安装 Ansible Engine 的详情，请参考
[如何下载并安装 Red Hat Ansible
Engine](https://access.redhat.com/articles/3174981){.link} 知识库文章。
RHEL 8.6 和 9.0 引入了 Ansible Core（作为 `ansible-core`{.literal}
软件包提供），其中包含 Ansible 命令行工具、命令以及小型内置 Ansible
插件。RHEL 通过 AppStream
软件仓库提供此软件包，它有一个有限的支持范围。如需更多信息，请参阅 [RHEL
9 和 RHEL 8.6 及更新的 AppStream 软件仓库文档中的 Ansible Core
软件包的支持范围](https://access.redhat.com/articles/6325611){.link}。
:::
::: itemizedlist
-   列出受管节点的清单文件。
:::
::: orderedlist
**步骤**
1.  准备您的 playbook。您可以从头开始，或修改作为
    `rhel-system-roles`{.literal} 软件包的一部分安装的示例 playbook：
    ``` screen
    # cp /usr/share/doc/rhel-system-roles/selinux/example-selinux-playbook.yml my-selinux-playbook.yml
    # vi my-selinux-playbook.yml
    ```
2.  更改 playbook
    的内容，使其适合您的场景。例如，以下部分确保系统安装并启用
    `selinux-local-1.pp`{.literal} SELinux 模块：
    ``` screen
    selinux_modules:
    - { path: "selinux-local-1.pp", priority: "400" }
    ```
3.  保存更改，然后退出文本编辑器。
4.  在 [*host1*]{.emphasis}、[*host2*]{.emphasis} 和
    [*host3*]{.emphasis} 系统上运行您的 playbook：
    ``` screen
    # ansible-playbook -i host1,host2,host3 my-selinux-playbook.yml
    ```
:::
::: itemizedlist
**其他资源**
-   如需更多信息，请安装 `rhel-system-roles`{.literal} 软件包，并查看
    `/usr/share/doc/rhel-system-roles/selinux/`{.literal} 和
    `/usr/share/ansible/roles/rhel-system-roles.selinux/`{.literal}
    目录。
-   [如何下载并安装 Red Hat Ansible
    Engine](https://access.redhat.com/articles/3174981){.link}。
:::
:::
::: section
::: titlepage
# []{#deploying-the-same-selinux-configuration-on-multiple-systems_using-selinux.html#transferring-selinux-settings-to-another-system-with-semanage_deploying-the-same-selinux-configuration-on-multiple-systems}使用 semanage 将 SELinux 设置传送到另一个系统中 {.title}
:::
使用以下步骤在基于 RHEL 9 的系统间传输自定义和验证的 SELinux 设置。
::: itemizedlist
**先决条件**
-   `policycoreutils-python-utils`{.literal} 软件包安装在您的系统中。
:::
::: orderedlist
**步骤**
1.  导出验证的 SELinux 设置：
    ``` screen
    # semanage export -f ./my-selinux-settings.mod
    ```
2.  使用设置将该文件复制到新系统：
    ``` screen
    # scp ./my-selinux-settings.mod new-system-hostname:
    ```
3.  登录新系统：
    ``` screen
    $ ssh root@new-system-hostname
    ```
4.  在新系统中导入设置：
    ``` screen
    new-system-hostname# semanage import -f ./my-selinux-settings.mod
    ```
:::
::: itemizedlist
**其他资源**
-   `semanage-export(8)`{.literal} 和 `semanage-import(8)`{.literal} man
    page
:::
:::
:::