```
docker run --rm -i -v ${PWD}/.hadolint.yml:/.hadolint.yaml hadolint/hadolint ' use 'apt-get install 
    ='
    /dev/stdin:2 DL3009 Delete the apt-get lists after installing 
    something
    /dev/stdin:2 DL3015 Avoid additional packages by specifying 
    '--no-install-recommends'
    /dev/stdin:2 DL3014 Use the '-y' switch to avoid manual input 
    'apt-get -y install '
    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD 
    and ENTRYPOINT arguments
    ```
    注意
    如果您的`Dockerfile`通过`hadolint`成功运行，并且没有发现任何问题，命令行上将不会向用户显示任何输出。
3.  `hadolint` also gives you the option to suppress different checks with the `--ignore` option. In the following command, we have chosen to ignore the `DL3008` warning, where it is suggesting that you pin the applications you are installing to a specific version number. Execute the `docker run` command to suppress the `DL3008` warning. Note that you need to provide the full `hadolint` command after specifying the image name you are running, as well as an extra dash (`-`) before you provide the `Dockerfile`:
    ```
    docker run --rm -i hadolint/hadolint hadolint --ignore DL3008 - '
    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD and 
    ENTRYPOINT arguments
    ```
4.  `hadolint`还允许您创建一个配置文件来添加任何要忽略的警告，以及在命令行上指定它们。使用`touch`命令创建一个名为`.hadolint.yml`的文件:
    ```
    touch .hadolint.yml
    ```
5.  用文本编辑器打开配置文件，并在`ignored`字段下输入您希望忽略的任何警告。如您所见，您还可以添加一个`trustedRegistries`字段，您可以在其中列出您将从中提取映像的所有注册表。请注意，`hadolint`将提供一个额外的警告，如果您的映像不是来自配置文件中列出的注册表之一:
    ```
    ignored:
      - DL3006
      - DL3008
      - DL3009
      - DL3015
      - DL3014
    trustedRegistries:
      - docker.io
    ```
6.  `hadolint` will look for your configuration file in the user's home directory. As you are running `hadolint` as a Docker image, mount the file from the current location onto the home directory on the running image when we execute the `docker run` command with the `-v` option:
    ```
    docker run --rm -i -v ${PWD}/.hadolint.yml:/.hadolint.yaml hadolint/hadolint < Dockerfile
    ```
    该命令将给出如下输出:
    ```
    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD and ENTRYPOINT arguments
    ```
    注意
    `hadolint`的源代码库提供了所有警告的列表以及如何在`Dockerfile`中解决它们的细节。如果您还没有这样做，请随意浏览位于[https://github.com/hadolint/hadolint/wiki](https://github.com/hadolint/hadolint/wiki)的 Hadolint 维基页面。
7.  Finally, `hadolint` also allows you the option to output the results of your check in JSON format. Once again, we need to add some extra values to the command line. In the command line, add the extra command-line options of `hadolint -f json` just before you have added and parsed your `Dockerfile` across to `hadolint`. In the following command, you will also need to have the `jq` package installed:
    ```
    docker run --rm -i -v ${PWD}/.hadolint.yml:/.hadolint.yaml hadolint/hadolint hadolint -f json - < Dockerfile | jq
    ```
    您应该得到如下输出:
    ```
    [
      {
        "line": 3,
        "code": "DL3025",
        "message": "Use arguments JSON notation for CMD and ENTRYPOINT arguments",
        "column": 1,
        "file": "/dev/stdin",
        "level": "warning"
      }
    ]
    ```
    注意
    `hadolint`可以很容易地集成到您的构建管道中，以便在构建之前将您的`Dockerfiles`修剪掉。如果您有兴趣将`hadolint`应用直接安装到您的系统上，而不是使用 Docker 映像，您可以通过克隆以下 GitHub 存储库[https://github.com/hadolint/hadolint](https://github.com/hadolint/hadolint)来实现。
    `hadolint`并不是您可以用来确保您的`Dockerfiles`遵守最佳实践的唯一应用。本练习的下一步将关注名为`FROM:latest`的在线服务，该服务也有助于在您的`Dockerfiles`上实现最佳实践。
8.  To use `FROM:latest`, open your favorite web browser and enter the following URL:
    ```
    https://www.fromlatest.io
    ```
    当网页加载时，您应该会看到类似于下面截图中的页面。在网页的左侧，您应该会看到一个输入的示例`Dockerfile`，在网页的右侧，您应该会看到一个潜在问题或优化您的`Dockerfile`的方法的列表。右侧列出的每个项目都有一个下拉列表，向用户提供更多详细信息:
    ![Figure 12.1: A screenshot of the FROM:latest website with a sample Dockerfile entered ](img/B15021_12_01.jpg)
    图 12.1:输入了示例 Dockerfile 的 FROM:最新网站的截图
9.  As in the previous part of this exercise, we will use the `Dockerfile` from our `docker-stress` image. To use this with `FROM:latest`, copy the following lines of code into the left-hand side of the web page over the sample `Dockerfile` provided by the site:
    ```
    FROM ubuntu
    RUN apt-get update && apt-get install stress
    CMD stress $var
    ```
    一旦你把`Dockerfile`代码发布到网页上，网页就会开始分析命令。从下面的截图中可以看出，它将提供如何解决潜在问题和优化`Dockerfile`以加快映像构建的详细信息:
    ![Figure 12.2: The Dockerfile entered for our docker-stress image ](img/B15021_12_02.jpg)
图 12.2:为我们的 Docker 压力映像输入的 Docker 文件
`hadolint`和`FROM latest`都提供了易于使用的选项，帮助您确保您的`Dockerfiles`遵循最佳实践。下一个练习将以类似的方式检查您的`docker-compose.yml`文件，以确保它们也将无问题运行，并且不会引入任何不良做法。
## 练习 12.05:验证你的文档
Docker 已经有了一个工具来验证你的`docker-compose.yml`文件，但是内置的验证器不会拾取你的`docker-compose`文件中的所有问题，包括错别字、分配给不同服务的相同端口或者重复的密钥。我们可以使用`dcvalidator`来查找诸如错别字、重复键和分配给号码服务的端口等问题。
要执行以下练习，您需要在系统上安装 Git 和 Python 3 的最新版本。不会向您介绍如何执行安装，但在开始之前需要这些项目:
1.  要开始使用`dcvalidator`，克隆项目的 GitHub 存储库。如果您还没有这样做，您将需要运行以下命令来克隆存储库:
    ```
    git clone https://github.com/serviceprototypinglab/dcvalidator.git