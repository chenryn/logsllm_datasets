When using the (unofficial) babel-plugin-transform-for-of-as-array on a
`for..of` loop that iterates over an imported array variable, the AMD (and
CommonJS) modules transform fail to rewrite all of the array references.
Repro: https://github.com/MattiasBuelens/babel-for-of-modules-regression
### Input Code
    import {array} from 'foo';
    for (let elem of array) {
        console.log(elem);
    }
### Babel Configuration (.babelrc, package.json, cli command)
    {
      "plugins": [
        "transform-for-of-as-array",
        "transform-es2015-modules-amd"
      ]
    }
### Expected Behavior
Babel version 7.0.0-beta.0 generates this code:
    define(["foo"], function (_foo) {
      "use strict";
      for (let _i = 0; _i < _foo.array.length; _i++) {
        let elem = _foo.array[_i];
        console.log(elem);
      }
    });
### Current Behavior
Babel version 7.0.0-beta.2 generates this code instead:
    define(["foo"], function (_foo) {
      "use strict";
      for (let _i = 0; _i < _foo.array.length; _i++) {
        let elem = array[_i];
        console.log(elem);
      }
    });
Note the `let elem = array[_i];` inside the loop.
The same problem also occurs with the CommonJS modules transform, which
generates:
    "use strict";
    var _foo = require("foo");
    for (let _i = 0; _i < _foo.array.length; _i++) {
      let elem = array[_i];
      console.log(elem);
    }
### Context
Our code base only uses `for..of` on arrays (or array-like objects), so we'd
like to keep using the optimized transformation provided by this unofficial
plugin.
I've tried to reproduce this issue with the standard `for..of` transform, but
that plugin always creates a temporarily variable for the imported array.
### Your Environment
software | version(s)  
---|---  
Babel | 7.0.0-beta.2  
node | 7.10.0  
npm | 5.4.2  
Operating System | Windows 10