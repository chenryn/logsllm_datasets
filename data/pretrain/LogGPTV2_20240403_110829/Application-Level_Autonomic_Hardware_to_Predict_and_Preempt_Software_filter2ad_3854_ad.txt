been discharged by the other prover. The two obligations
checked in the default behavior section prove that the set
of behaviors are both disjoint and complete. Thus, Frama-C
is able to provide conﬁdence that our TECEP protections
both correctly select the production controller output under
normal operating conditions and select the backup controller
in the event of malicious production controller behaviors or
anomalous plant sensor data.
Figure 7.
Jessie deductive veriﬁcation results
D. Module Integration
The system is implemented with Vivado Design Suite
2013.2 on a 64-bit Linux workstation host running the
2.6.32-28-generic kernel on an 4-core, 2.8 GHz Intel Core
i7 processor with 24GB of RAM. A Vivado Design Suite
project is used to create the junction box using HDL ﬁles
and to export it in IP block format. This IP block, along
with the hardware monitor and interface adapter IP blocks
generated by Vivado HLS, are imported into the IP catalog
of a new Vivado Design Suite project.
A block diagram is created with the Zynq processing sys-
tem and a performance-optimized MicroBlaze soft processor
with 16KB of local memory. Three interface adapters (the
production controller’s input and output, and the emulated
plant’s I/O) are added as AXI peripherals to the ARM.
Two interface adapters (the prediction unit’s output, and
handshaking signals) are added as AXI peripherals to the
MicroBlaze. The hardware monitor is instantiated in the
system and connected to the junction box, as are each of
the interface adapters. After implementation, a bitstream
is exported to the Xilinx SDK, wherein all software is
compiled and downloaded to the ARM and MicroBlaze
processors.
E. System Behavior
In this example, latent malicious behavior is inserted into
the production controller. The system begins with a unit
step response followed by activation of the latent malware.
This malware attempts to drive the plant’s output to its
maximum (clipped) value beginning at t = 350 ms. With no
countermeasures in place, Fig. 8 shows the plant’s output
exceeding the safe limit of 3.2. Plant behavior with the
hardware monitor appears in Fig. 9. Without prediction, the
plant’s output approaches the acceptable limit at t = 480 ms
before being corrected by the backup controller. With predic-
tion, the hardware monitor proactively invokes the backup
controller at t = 280 ms, thereby preventing the physical
plant from reaching an unsafe state. The backup controller
will remain active until the system is reset. Fig. 10 shows
the plant’s output with prediction and automatic resumption
of the production controller. As in Fig. 9, the prediction unit
forecasts the future consequences of the malware, and the
hardware monitor again preemptively switches to the backup
controller at t = 280 ms. The hardware monitor’s probation
counter expires and the production controller is reinstated
when the malware ends at t = 650 ms since 200 ms before
this time the physical plant, plant model, and predicted plant
state are found to be within speciﬁcations. General mech-
anisms are being developed to manage transitions between
controllers in order to avoid excessive overshoot caused by
stale state information.
Figure 8. Unprotected plant behavior
F. Time and Resource Utilization
Despite the implementation of software functions in hard-
ware, performance is not an objective in this work, as
145
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:47 UTC from IEEE Xplore.  Restrictions apply. 
Malware Start -0.5 0 0.5 1 1.5 2 2.5 3 3.5 0 100 200 300 400 500 600 700 800 900 1000 Plant Output Time (ms) ZYNQ-7020 PROGRAMMABLE LOGIC RESOURCE USAGE
Table II
Hardware Monitor
HLS interfaces
Junction Box
Prediction Unit
Total Used
Available
Percent Used
FF
677
295
70
2813
3855
53200
7
LUT
1046
78
80
3174
4378
106400
4
DSP
5
0
0
2
7
140
5
BRAM
0
0
0
4
4
220
2
V. CONCLUSIONS AND CURRENT WORK
Existing approaches to control system security add generic
hardware or software layers to help isolate and secure appli-
cations. We instead use rigorous veriﬁcation of application-
speciﬁc hardware to counter software reconﬁguration at-
tacks on critical processes, accomplished through the non-
standard use of existing languages, tools, platforms, process
speciﬁcations and models. C is used for all application-
speciﬁc software- and hardware-implemented functions in
the system-on-chip platform. This conforms with the C code
automatically synthesized from model-based design tools or
manually generated by control system designers, and enables
the novel use of C code static analysis tools for functions
implemented in hardware.
The Frama-C analysis tool best suits our needs because
of ACSL’s ﬁrst-order logic expressive power for annotating
partial functional speciﬁcations, support for ﬂoating point
arithmetic so that ﬁxed point error analysis is not needed,
and use of several provers to check the validity of assertions.
Although HLS from C is a commercial technology, our
additional use of formal speciﬁcations expressed in ACSL
addresses the equally important matter of high-level veriﬁca-
tion of hardware functionality, and further uniﬁes hardware
and software development. We use a three-level abstraction
hierarchy from ACSL (for specifying security-related system
properties) to C (for capturing the system implementation
without any hardware-level complications) to conﬁgurable
logic (where hardware utilization can be controlled and
reported by the Xilinx synthesis and implementation tools).
The lack of aggressive timing goals promotes hardware
generation without any manual intervention.
We are presently applying TECEP to an electromechanical
physical plant where non-ideal effects such as noise, distur-
bances, and actuator limitations are present. The Quanser
ROTPEN-SE apparatus allows testing our approach on an
increasingly complex set of systems, from simple rotary
motion control, to an inherently stable gantry crane system,
and ﬁnally to an inherently unstable inverted pendulum
system [27]. Because the ZedBoard is not yet supported by
Quanser, we created a custom SPI interface to the physical
system as well as custom Simulink blocks to allow the
Figure 9. Protected plant behavior with and without prediction
Figure 10. Protected plant behavior with return to the production controller
the system needs to operate only once per millisecond.
The ARM processor operates at 667 MHz; the MicroBlaze
processor, along with the remaining hardware, operates at
140 MHz. Both processors utilize full optimization and
hardware ﬂoating point instructions. One iteration of the
prediction unit requires 1.43 microseconds to complete. Con-
sidering this runtime, the comparatively minimal runtimes
of the production controller and hardware monitor and all
communication overheads, it is possible to predict over 500
cycles into the future during each 1 ms system cycle. This
prediction window is currently limited by the MicroBlaze’s
computational throughput. If a larger prediction window is
required, more intensive optimization of the MicroBlaze or
a faster platform speed grade may be necessary.
The resources consumed by the components and the
overall system are shown in Table II. The prediction unit’s
MicroBlaze processor has a large resource usage because it
is conﬁgured with a ﬁve-stage pipeline, hardware support
for ﬂoating point addition and multiplication, and an AXI
timer peripheral for measuring code latency.
146
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:47 UTC from IEEE Xplore.  Restrictions apply. 
Malware Start -0.5 0 0.5 1 1.5 2 2.5 3 3.5 0 100 200 300 400 500 600 700 800 900 1000 Plant Output Time (ms) With Prediction Without Prediction Malware Start Malware End -0.5 0 0.5 1 1.5 2 2.5 3 3.5 0 100 200 300 400 500 600 700 800 900 1000 Plant Output Time (ms) automated implementation of our controllers. A Kalman
ﬁlter will serve as a natural way to accurately estimate the
controlled system’s state for short time horizons. TECEP’s
ability to scale up to cyber-physical systems and applicabil-
ity to non-control domains are also being investigated.
This material
ACKNOWLEDGMENT
is based upon work supported by the
National Science Foundation under Grant Number CNS-
1222656. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the
authors and do not necessarily reﬂect
the views of the
National Science Foundation. We are grateful for ZedBoard
and tool donations from Xilinx, Inc.
REFERENCES
[1] M. Zeller, “Myth or reality – does the Aurora vulnerability
pose a risk to my generator?” in Protective Relay Engineers,
2011 64th Annual Conference for.
IEEE, 2011, pp. 130–136.
[2] N. Perlroth and D. E. Sanger, “Nations buying as hackers sell
ﬂaws in computer code,” New York Times, Jul 13, 2013.
[3] D. E. Sanger, “N.S.A. nominee promotes cyberwar units,”
New York Times, March 11, 2014.
[4] W. Saﬁre, “The Farewell Dossier,” New York Times, Feb 2,
2004.
[5] J. Weiss, Protecting industrial control systems from electronic
threats. Momentum Press, 2010.
[6] N. Falliere, L. O’Murchu, and E. Chien, “W32.stuxnet
dossier,” Symantec Corporation, 2011.
[7] C. Schuett, J. Butts, and S. Dunlap, “An evaluation of mod-
iﬁcation attacks on programmable logic controllers,” Inter-
national Journal of Critical Infrastructure Protection, vol. 7,
no. 1, pp. 61 – 68, 2014.
[8] L. W. Lerner, M. M. Farag, and C. D. Patterson, “Run-
time prediction and preemption of conﬁguration attacks on
embedded process controllers,” in International Conference
on Security of Internet of Things (SecurIT 2012), Kerala,
India, Aug 2012.
[9] L. W. Lerner, Z. R. Franklin, W. T. Baumann, and C. D.
Patterson, “Using high-level synthesis and formal analysis
to predict and preempt attacks on industrial control sys-
tems,” in ACM/SIGDA International Symposium on Field-
Programmable Gate Arrays, Monterey, CA, Feb 2014, pp.
209–212.
[10] A. A. C´ardenas, S. Amin, and S. Sastry, “Research challenges
for the security of control systems,” in Proceedings of the 3rd
Conference on Hot Topics in Security. Berkeley, CA, USA:
USENIX Association, 2008, pp. 6:1–6:6. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1496671.1496677
[12] MathWorks, “Embedded Coder,” http://www.mathworks.com/
products/embedded-coder/.
[13] K. J. Higgens, “Spaf on security,” Oct 2013, http://www.
darkreading.com/vulnerability/spaf-on-security/240162511.
[14] ARM Ltd., “ARM security technology: Building a secure
system using TrustZone technology,” 2009, http://www.arm.
com/products/processors/technologies/trustzone/index.php.
[15] D. Rosenberg,
2013,
“Unlocking the Motorola bootloader,”
http://blog.azimuthsecurity.com/2013/04/
Apr
unlocking-motorola-bootloader.html.
[16] A. C´ardenas, S. Amin, and S. Sastry, “Secure control:
Towards survivable cyber-physical systems,” in Distributed
Computing Systems Workshops, 2008. ICDCS ’08. 28th In-
ternational Conference on, Jun 2008, pp. 495–500.
[17] A. A. C´ardenas, S. Amin, Z.-S. Lin, Y.-L. Huang, C.-Y.
Huang, and S. Sastry, “Attacks against process control
systems:
risk assessment, detection, and response,” in
Proceedings of
the 6th ACM Symposium on Information,
Computer and Communications Security, ser. ASIACCS’11,
2011, pp. 355–366. [Online]. Available: http://doi.acm.org/
10.1145/1966913.1966959
[18] A. Bessani, P. Sousa, M. Correia, N. Neves, and P. Veris-
simo, “The Crutial way of critical infrastructure protection,”
Security Privacy, IEEE, vol. 6, no. 6, pp. 44–51, Nov 2008.
[19] J. Kirsch, S. Goose, Y. Amir, D. Wei, and P. Skare, “Surviv-
able SCADA via intrusion-tolerant replication,” Smart Grid,
IEEE Transactions on, vol. 5, no. 1, pp. 60–70, Jan 2014.
[20] L. Sha, “Using simplicity to control complexity,” Software,
IEEE, vol. 18, no. 4, pp. 20–28, Jul–Aug 2001.
[21] C. Dai, S. Yang, and L. Tan, “An approach for controller fault
detection,” in Fifth World Conference on Intelligent Control
and Automation (WCICA), vol. 2, Jun 2004, pp. 1637–1641.
[22] ARM Ltd., “Cortex-M1 FPGA processor,” 2013.
[23] P. Cuoq, B. Yakobowski, and V. Prevosto, Frama-C’s value
analysis plug-in: Fluorine-20130501, CEA LIST, Software
Reliability Laboratory, Saclay, F-91191, 2013, http://frama-c.
com.
[24] P. Baudin, P. Cuoq, J.-C. Filliˆatre, C. March´e, B. Monate,
Y. Moy, and V. Prevosto, ACSL: ANSI/ISO C Speciﬁcation
Language: Version 1.4 Boron-20100401, CEA LIST, France
T´el´ecom, INRIA Saclay, LRI – Univ Paris-Sud, 2010, http:
//frama-c.com.
[25] C. March´e and Y. Moy, The Jessie plugin for Deductive
Veriﬁcation in Frama-C, INRIA Saclay - T´el´e-de-France and
LRI, CNRS UMR 8623, 2013, http://proval.lri.fr/.
[26] D. Bagni
and D. Mackay,
PID
System
Controller Design with Vivado HLS
Generator
XAPP1163
(v1.0). [Online]. Available: http://www.xilinx.com/support/
documentation/application notes/xapp1163.pdf
“Floating-point
and
for
DSP,”
January
2013,
[11] R. C. Dorf and R. H. Bishop, Modern Control Systems, 9th ed.
Upper Saddle River, NJ, USA: Prentice-Hall, Inc., 2000.
[27] Quanser Inc., “The rotary control lab,” 2012, http://www.
quanser.com/ﬂippers/Rotary/2012/.
147
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:47 UTC from IEEE Xplore.  Restrictions apply.