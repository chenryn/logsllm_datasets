Figure 7. JBoss/J2EE-based NR-Invocation
In J2EE, service invocation equates to the remote invo-
cation of an operation on an enterprise bean. As shown in
Figure 7, the JBoss facility for server- and client-side inter-
ceptors is used to render the operation non-repudiable. The
client’s reference to the remote bean is a dynamic proxy
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:40 UTC from IEEE Xplore.  Restrictions apply. 
generated by the server. This proxy contains client-side in-
terceptors that are typically used for context propagation.
We add an extra interceptor — the JBoss NR interceptor —
to both client and server invocation paths. These NR in-
terceptors are responsible for triggering execution of a non-
repudiation protocol that achieves the exchange described
in Section 3.2. The client-side NR interceptor accesses the
client’s non-repudiation middleware that in turn manages
the client’s participation in protocols and its access to sup-
porting infrastructure to store evidence etc.
Each interceptor in a chain may execute on both the
outgoing and incoming invocation path. To achieve non-
repudiation of the request as constructed by the client and
to verify the integrity of the response presented to the client,
the client-side NR interceptor is the ﬁrst in the chain on the
outgoing path (and last on the return path). On the server-
side, to verify the integrity of the request as it entered the
server and to provide non-repudiation of the response as it
leaves the server, the NR interceptor is the ﬁrst in the chain
on the incoming path (the last on the return path).
Each JBoss interceptor has an invoke operation that
takes an Invocation object1 as a parameter for the intercep-
tor to process in some way. The interceptor then passes the
Invocation to the next interceptor in the chain by calling that
interceptor’s invoke operation. The invoke operation of the
client-side JBoss NR interceptor is:
public Object invoke(Invocation inv) {
B2BInvocationHandler b2bInvHdlr =
B2BInvocationHandler.getInstance(
“JBossJ2EE”, “direct”);
B2BInvocation b2bInv =
new JBossB2BInvocation(
nextInterceptor(), inv);
return b2bInvHdlr.invoke(b2bInv);
}
getInstance is a factory method that returns a refer-
ence to a B2BInvocationHandler for the given platform
(“JBossJ2EE”) to execute the given protocol (“direct”).
The concrete implementation of a B2BInvocationHandler
is under control of the client. A B2BInvocation ob-
ject is a generic wrapper for platform-speciﬁc representa-
tions of the service to invoke and the invocation param-
eter(s). For a JBossB2BInvocation, the service to invoke
is the next interceptor in the chain and a JBoss Invoca-
tion object encapsulates the invocation parameters. When
invoke is called, the general behaviour of the client-side
B2BInvocationHandler is: (i) obtain a reference to or in-
stantiate the local B2BCoordinator service; (ii) obtain a
reference to or instantiate a protocol handler for the given
protocol and register the handler with the coordinator ser-
vice; (iii) request that the protocol handler execute its non-
repudiation protocol using the given service and invocation
1an encapsulation of the client’s service invocation, including contex-
tual information and related payload
parameters; and (iv) return the outcome of protocol execu-
tion (normally the server’s response) to the client.
the protocol,
To start execution of
the client-side
B2BInvocationHandler replaces the arguments to the ser-
vice invocation with the ﬁrst message of the protocol and
a reference to its local coordinator service. These are then
passed up through the interceptor chain to the server. When
the server-side NR interceptor receives the Invocation ob-
ject, it instantiates a JBoss-speciﬁc B2BInvocationHandler
object and calls
the B2BInvocationHandler’s invoke
method with the Invocation object as a parameter. The
general behaviour of the server-side B2BInvocationHandler
is:
(i) obtain a reference to or instantiate the local
B2BCoordinator service; (ii) obtain a reference to or instan-
tiate a protocol handler for the type of B2BProtocolMessage
encapsulated in the Invocation object and register the han-
dler with the coordinator service; and (iii) request that the
protocol handler execute its non-repudiation protocol us-
ing the protocol message and remote coordinator reference
(obtained from the Invocation object). At the appropriate
point during execution of the non-repudiation protocol, the
client’s request is actually passed through the interceptor
chain to the EJB component for execution. The result of
this execution is then used to complete the non-repudiation
protocol.
for
identifying,
The application programmer on the server side is
responsible for
in a bean’s deployment
descriptor, when non-repudiation is required and for
identifying the platform and protocol
instantia-
the B2BInvocationHandler by the NR inter-
tion of
ceptor.
Thus the server controls activation of non-
repudiation. However, the client controls its own partici-
pation, through its own implementations of B2BInvocation-
Handler, B2BProtocolHandler and B2BCoordinator. Thus,
for example, the client may change the behaviour of its
B2BInvocationHandler to attempt to re-negotiate the non-
repudiation protocol to execute. As shown, the NR inter-
ceptor, B2BInvocationHandler, B2BProtocolHandler and
B2BCoordinator comprise each party’s trusted interceptor.
4.3. Implementation of non-repudiable information
sharing
The implementation of non-repudiable information shar-
ing is based on our previous work on B2BObjects. This
provides the abstraction of shared information depicted in
Figure 5(b) by coordinating the state of local (object) repli-
cas that encapsulate the information. Figure 8 illustrates
the component-based implementation when two organisa-
tions, A and B, share a B2BObject and A is updating the
object state. As in a standard J2EE application, an EJB
client makes invocations through an application interface (a
session bean) that may result in access and update to an as-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:40 UTC from IEEE Xplore.  Restrictions apply. 
EJB
Client
Org. A Server
session
bean
Application
Interface
Trusted Interceptor
B2BObject
Controller
Org. B Server
Trusted Interceptor
B2BObject
Controller
B2B Protocol
Handlers
B2B
Coordinators
entity
bean
B2BObject
session
bean
State Validators
entity
bean
B2BObject
Figure 8. JBoss/J2EE-based NR-Sharing
sociated entity bean. In this case, the entity bean has been
identiﬁed as a B2BObject that should be coordinated with
remote replicas. An interceptor traps invocations on the
entity bean to ensure that a B2BObjectController controls
access and update to the bean. The controller is the local
interface to conﬁguration, initiation and control of informa-
tion sharing.
It uses protocol handlers and a coordinator
service to execute non-repudiable state and membership co-
ordination protocols with remote parties. Implementations
of the interceptor, controller, protocol handlers and coordi-
nator are all provided by the middleware, as is the support-
ing infrastructure to store evidence etc. The controller uses
application-speciﬁc validation listeners to validate state and
membership changes proposed by remote parties. Figure 8
shows B’s controller validating A’s proposed update by ap-
pealing to one or more state validators (implemented as ses-
sion beans). The update is only applied to the replicas if B
agrees to the proposal. The process is the same for an up-
date proposed by B. Furthermore, the implementation sup-
ports sharing by more than two parties.
The middleware-provided JBoss interceptor is respon-
sible for interaction with the B2BObjectController, and,
through the controller, with the B2BObjects middleware.
The application programmer is responsible for: identifying
an entity bean as a B2BObject; providing conﬁguration in-
formation in the bean’s deployment descriptor (for example,
to identify validator beans); and providing implementations
of one or more session beans to perform validation. Op-
tionally, the application programmer can also specify that
a method in the application interface should result in a se-
ries of operations on an underlying B2BObject bean being
“rolled-up” into a single (atomic) coordination event. The
enhancement of an entity bean to become a B2BObject is
effectively transparent to the local EJB client and its appli-
cation interface.
5. Related work
We are not aware of other work that provides systematic
integration of services for trusted interaction with compo-
nent middleware. There is a Web Services non-repudiation
proposal [9] that speciﬁes a mechanism to request and send
a signed receipt for a SOAP (XML-encoded) message in or-
der to support so-called “voluntary” non-repudiation. The
OASIS Digital Signature Service [15] proposes XML re-
quest/response protocols for signing, verifying and time-
stamping data. The Universal Postal Union has proposed
the Global Electronic Postmark [17] (EPM) standard. This
is a TTP service for generation, veriﬁcation, time-stamping
and storage of non-repudiation evidence. The service would
also support linking of evidence under a unique transaction
identiﬁer to allow business transaction events to be bound
together. None of these proposals provide for the exchange
of non-repudiation evidence or the governance of complex
interactions. These would have to be delivered at the ap-
plication level with the proposed services used as back-end
infrastructure (which in the case of EPM would be provided
by a TTP).
Early work by Clark and Wilson [3] on security pol-
icy stressed the importance of data integrity in the com-
merce domain (as opposed to the military domain’s focus
on disclosure). In the Clark-Wilson model constrained data
items are only manipulated through veriﬁed transforma-
tion procedures as part of well-formed transactions. This
ensures that transformations respect an organisation’s in-
tegrity rules, for example respecting good accounting prac-
tice, and are logged for audit. The model was concerned
with enforcement of policy within organisations. The use
of veriﬁed transformation procedures that mediate the ac-
tions within an organisation is similar to the use of trusted
interceptors as mediators between organisations.
There has been much recent work on fair exchange and
fair non-repudiation, and on the formal veriﬁcation of pro-
tocols. Kremer et al [10] summarise the state of the art
and provide a useful classiﬁcation of protocols according
to types of fairness and the role of TTPs in protocols. There
have also been contributions on the transformation of fair
exchange to meet fault tolerance requirements [11, 7]. This
body of work can be brought to bear on the choice of pro-
tocols that trusted interceptors execute to meet interaction
requirements.
The work of Minsky et al on Law Governed Interaction
(LGI) [13] represents one of the earliest attempts to provide
coordination between autonomous organisations. Trusted
agents act as mediators that comply with a global policy.
This is similar to the trusted interceptor abstraction in that
the interaction between agents is assumed to be legal. LGI
does not address systematic non-repudiation.
Wichert et al [18] used ﬁlters in CORBA to provide non-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:40 UTC from IEEE Xplore.  Restrictions apply. 
repudiable invocation on a remote object. However, there
approach is asymmetric — the client provides the server
with non-repudiation of origin of a request but there is no
exchange to provide corresponding evidence to the client.
Their work did provide useful insights into representation of
evidence in XML documents. In our system the exact rep-
resentation of evidence is a matter for agreement between
parties concerned, the important requirement is that the rep-
resentation can be subsequently rendered meaningful and is
irrefutable.
6. Conclusions
This paper presented a uniﬁed approach to regulated in-
teraction based on the abstraction of trusted interceptors
that mediate interactions. The component-based middle-
ware implementation provides the basic building blocks for
the construction of a composite service by organisations
collaborating to form a virtual enterprise. This can be ex-
tended to support transactional interaction. Our preliminary
work in this area [6] shows how B2BObjects can partici-
pate in distributed (JTA [2]) transactions. We intend to build
on this work to provide component-based transactional and
non-repudiable interaction.
In effect, the trusted interceptor abstraction, and its reali-
sation in middleware, provides a ﬂexible framework for im-
plementation of different approaches to non-repudiable ser-
vice invocation (fair exchange) and regulated information
sharing. Future work will include the use of this framework
to provide a suite of protocols and other mechanisms that
can be deployed to meet different application requirements.
Acknowledgements
This work is part-funded by the EU under projects IST-
2001-34069: "TAPAS (Trusted and QoS-Aware Provision
of Application Services)" and IST-2001-37126: “ADAPT
(Middleware Technologies for Adaptive and Composable
Distributed Components)”; and by the UK EPSRC un-
der grant GR/S63199: “Trusted Coordination in Dynamic
Virtual Organisations”. We thank our colleague Paul
Ezhilchelvan for useful discussion of this work.
References
[1] R. Axelrod. The Evolution of Co-operation. Penguin Books,
1990.
[2] S. Cheung and V. Matena.
(JTA version
http://java.sun.com/products/jta/index.html, 2002.
1.0.1B).
Java Transaction API
Inc.,
Sun Microsystems
[3] D. R. Clark and D. R. Wilson. A Comparison of Commer-
cial and Military Computer Security Policies. In Proc. IEEE
Symp. on Security and Privacy, pages 184–194, 1987.
[4] N. Cook, P. Robinson, and S. Shrivastava. Component
Middleware to Support Non-repudiable Service Interactions.
Technical Report CS-TR 834, School of Computing Science,
Univ. Newcastle, 2004.
[5] N. Cook, S. Shrivastava, and S. Wheater. Distributed Object
Middleware to Support Dependable Information Sharing be-
tween Organisations. In Proc. IEEE Int. Conf. on Dependable
Syst. and Networks (DSN), Washington DC, USA, 2002.
[6] N. Cook, S. Shrivastava, and S. Wheater. Middleware Sup-
port for Non-repudiable Transactional Information Sharing
between Enterprises. In Proc. IFIP Int. Conf. on Distributed
Applications and Interoperable Syst. (DAIS), Springer LNCS
2893, Paris, France, Nov 2003.
[7] P. Ezhilchelvan and S. Shrivastava. Systematic Development
of a Family of Fair Exchange Protocols. In Proc. 17th IFIP
WG 11.3 Working Conf. on Database and Applications Secu-
rity, Colorado, USA, 2003.
[8] M. Fleury and F. Reverbel. The JBoss Extensible Server.
In Proc. ACM/IFIP/USENIX Int. Middleware Conf., Springer
LNCS 2672, Rio de Janeiro, Brazil, Jun 2003.
[9] E. Gravengaard, G. Goodale, M. Hanson, B. Roddy,
Non-
Reactivity,
and D. Walkowski.
Repudiation
http://schemas.reactivity.com/2003/04/web-services-non-
repudiation-05.pdf, Apr 2003.
Web Services Security:
Proposal Draft
05.
[10] S. Kremer, O. Markowitch, and J. Zhou. An Intensive Sur-
vey of Fair Non-repudiation Protocols. Computer Communi-
cations, 25:1601–1621, 2002.
[11] P. Liu, P. Ning, and S. Jajodia. Avoiding Loss of Fairness
Owing to Process Crashes in Fair Data Exchange Protocols.
In Proc. IEEE Int. Conf. on Dependable Syst. and Networks
(DSN), New York, USA, 2000.
[12] O. Markowitch, D. Gollmann, and S. Kremer. On Fairness
in Exchange Protocols. In Proc. 5th Int. Conf. on Information
Security and Cryptology (ISISC 2002), Springer LNCS 2587,
2002.
[13] N. Minsky and V. Ungureanu. Law-Governed Interaction:
A Coordination and Control Mechanism for Heterogeneous
Distributed Systems. ACM Trans. Softw. Eng. and Methodol-
ogy, 9(3):273–305, 2000.
[14] C. Molina-Jimenez, S. Shrivastava, E. Solaiman, and
J. Warne. Contract Representation for Run-time Monitoring
and Enforcement. In Proc. IEEE Int. Conf. on E-Commerce
(CEC), pages 103–110, Newport Beach, USA, 2003.
[15] T. Perrin, D. Andivahis, J. C. Cruellas, F. Hirsch, P. Kassel-
man, A. Kuehne, J. Messing, T. Moses, N. Pope, R. Salz, and
E. Shallow. Digital Signature Service Core Protocols and El-
ements. OASIS Committee Working Draft, http://www.oasis-
open.org/committees/dss, Dec 2003.
[16] Sun. Java 2 Platform Enterprise Edition (J2EE) Speciﬁca-
tion. Sun Microsystems Inc., http://java.sun.com/j2ee/, 1.4
edition, 2003.
[17] UPU. Global EPM Non-repudiation Service Deﬁnition
and the Electronic Postmark 1.1. Universal Postal Union,
http://www.globalepost.com/prodinfo.htm, Oct 2002.
[18] M. Wichert, D. Ingham, and S. Caughey. Non-repudiation
Evidence Generation for CORBA using XML. In Proc. IEEE
Annual Comp. Security Applications Conf., Phoenix, USA,
1999.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:40 UTC from IEEE Xplore.  Restrictions apply.