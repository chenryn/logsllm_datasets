# PSV-2020-0211-Netgear-R8300-UPnP栈溢出漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 漏洞简介
`PSV-2020-0211`对应`Netgear`
`R8300`型号路由器上的一个缓冲区溢出漏洞，`Netgear`官方在2020年7月31日发布了[安全公告](https://kb.netgear.com/000062158/Security-Advisory-for-Pre-Authentication-Command-Injection-on-R8300-PSV-2020-0211)，8月18日`SSD`公开了该漏洞的相关[细节](https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/)。该漏洞存在于设备的`UPnP`服务中，由于在处理数据包时缺乏适当的长度校验，通过发送一个特殊的数据包可造成缓冲区溢出。利用该漏洞，未经认证的用户可实现任意代码执行，从而获取设备的控制权。
该漏洞本身比较简单，但漏洞的利用思路值得借鉴，下面通过搭建`R8300`设备的仿真环境来对该漏洞进行分析。
## 漏洞分析
###  环境搭建
根据官方发布的安全公告，在版本`V1.0.2.134`中修复了该漏洞，于是选取之前的版本`V1.0.2.130`进行分析。由于手边没有真实设备，打算借助`qemu`工具来搭建仿真环境。[文章](https://paper.seebug.org/1311)通过`qemu
system mode`的方式来模拟整个设备的系统，我个人更偏向于通过`qemu user
mode`的方式来模拟单服务。当然，这两种方式可能都需要对环境进行修复，比如文件/目录缺失、`NVRAM`缺失等。
用`binwalk`对固件进行解压提取后，运行如下命令启动`UPnP`服务。
    # 添加`--strace`选项, 方便查看错误信息, 便于环境修复
    $ sudo chroot . ./qemu-arm-static --strace ./usr/sbin/upnpd
运行后提示如下错误，根据对应的目录结构，通过运行命令`mkdir -p tmp/var/run`解决。
    18336 open("/var/run/upnpd.pid",O_RDWR|O_CREAT|O_TRUNC,0666) = -1 errno=2 (No such file or directory)
之后再次运行上述命令，提示大量的错误信息，均与`NVRAM`有关，该错误在进行`IoT`设备仿真时会经常遇到。`NVRAM`中保存了设备的一些配置信息，而程序运行时需要读取配置信息，由于缺少对应的外设，因此会报错。一种常见的解决方案是`"劫持"`与`NVRAM`读写相关的函数，通过软件的方式来提供相应的配置。
网上有很多类似的模拟`NVRAM`行为的库，我个人经常使用`Firmadyne`框架提供的`libnvram`库：支持很多常见的`api`，对很多嵌入式设备进行了适配，同时还会解析固件中默认的一些`NVRAM`配置，实现方式比较优雅。采用该库，往往只需要做很少的改动，甚至无需改动，就可以满足需求。
参考`libnvram`的[文档](https://github.com/firmadyne/libnvram)，编译后然后将其置于文件系统中的`firmadyne`路径下，然后通过`LD_PRELOAD`环境变量进行加载，命令如下。
    $ sudo chroot . ./qemu-arm-static --strace -E LD_PRELOAD=./firmadyne/libnvram.so.armel ./usr/sbin/upnpd
运行后提示缺少某个键值对，在`libnvram/config.h`中添加对应的配置，编译后重复进行测试，直到程序成功运行起来即可，最终`libnvram/config.h`的变化如下。
    diff --git a/config.h b/config.h
    index 9908414..6598eba 100644
    --- a/config.h
    +++ b/config.h
    @@ -50,8 +50,10 @@
         ENTRY("sku_name", nvram_set, "") \
         ENTRY("wla_wlanstate", nvram_set, "") \
         ENTRY("lan_if", nvram_set, "br0") \
    -    ENTRY("lan_ipaddr", nvram_set, "192.168.0.50") \
    -    ENTRY("lan_bipaddr", nvram_set, "192.168.0.255") \
    +    /* ENTRY("lan_ipaddr", nvram_set, "192.168.0.50") */ \
    +    ENTRY("lan_ipaddr", nvram_set, "192.168.200.129") \
    +    /* ENTRY("lan_bipaddr", nvram_set, "192.168.0.255") */ \
    +    ENTRY("lan_bipaddr", nvram_set, "192.168.200.255") \
         ENTRY("lan_netmask", nvram_set, "255.255.255.0") \
         /* Set default timezone, required by multiple images */ \
         ENTRY("time_zone", nvram_set, "EST5EDT") \
    @@ -70,6 +72,10 @@
         /* Used by "DGND3700 Firmware Version 1.0.0.17(NA).zip" (3425) to prevent crashes */ \
         ENTRY("time_zone_x", nvram_set, "0") \
         ENTRY("rip_multicast", nvram_set, "0") \
    -    ENTRY("bs_trustedip_enable", nvram_set, "0")
    +    ENTRY("bs_trustedip_enable", nvram_set, "0") \
    +    /* Used by Netgear router: enable upnpd log */ \
    +    ENTRY("upnpd_debug_level", nvram_set, "3") \
    +    /* Used by "Netgear R8300" */ \
    +    ENTRY("hwrev", nvram_set, "MP1T99")
    # 成功运行
    $ sudo chroot . ./qemu-arm-static -E LD_PRELOAD=./firmadyne/libnvram.so.armel ./usr/sbin/upnpd
    nvram_get_buf: upnpd_debug_level
    sem_lock: Triggering NVRAM initialization!
    nvram_init: Initializing NVRAM...
    # ... 
    nvram_match: upnp_turn_on (1) ?= "1"
    nvram_match: true
    ssdp_http_method_check(203):
    ssdp_discovery_msearch(1007):
    ST = 20
    ssdp_check_USN(212)
    service:dial:1
    USER-AGENT: Google Chrome/84.0.4147.125 Windows
###  漏洞分析
在`upnp_main()`中，在`(1)`处`recvfrom()`用来读取来自`socket`的数据，并将其保存在`v55`指向的内存空间中。在`(2)`调用`ssdp_http_method_check()`，传入该函数的第一个参数为`v55`，即指向接收的`socket`数据。
    int upnp_main()
    {
      char v55[4]; // [sp+44h] [bp-20ECh]
      // ...
      while ( 1 )
      {
        // ...
        if ( (v20 >> (dword_C4580 & 0x1F)) & 1 )