sender and receiver. Furthermore, AirDrop is a protocol that
is performed ad-hoc with random communication partners
such that distributing encrypted databases in advance is not
possible. Finally, we aim at providing industry-grade imple-
mentations for integration into Apple’s ecosystem. Therefore,
we need a simple protocol that does not require complex li-
braries for oblivious transfer or garbled circuits as needed in
the most efﬁcient protocols of [55, 59].
AirDrop/PSI Sender S
Input: AB = {c1, . . . ,cn}
Output: ⊥
← Zq
k,r $
For i = 1 to m:
zi = yk
i , ai = yr
i
c = H(y1,z1,a1, . . . ,ym,zm,am)
p = r + k· c
For j = 1 to n:
u j = H(H(c j),H(c j)k)
AirDrop/PSI Receiver R
Input: IDs = {ID1, . . . ,IDm}
Output: AB∩ IDs
For i = 1 to m:
(y1,...,ym)
←−−−−−−−−−−
hi = H(IDi), αi
yi = hαi
i
$
← Zq,
(z1, . . . ,zm)
(a1, . . . ,am), p
−−−−−−−−−−→ c = H(y1,z1,a1, . . . ,ym,zm,am)
For i = 1 to m:
Abort if yp
i
vi = H(hi,z1/αi
(cid:54)= ai · zc
i
)
i
{u1,...,un}
−−−−−−−−−−→ output {IDi ∈ IDs|∃ j : u j = vi}
Figure 3: Maliciously secure PSI protocol of [53] applied
to DO2 (cf. § 4.2). The non-interactive zero-knowledge AND-proof
of knowledge is marked in blue [16, 37, 85].
The PSI Protocol of [53]. Considering all requirements,
we resort to a public key-based PSI protocol proposed
by Jarecki and Liu [53]. This Difﬁe-Hellman-style proto-
col extends the work of Baldi et al. [13] by adding malicious
security via zero-knowledge proofs.6 The required public key
operations can be efﬁciently instantiated with elliptic curve
cryptography, for which there exist industry-grade libraries
such as MIRACL [68] and built-in operating system capabili-
ties (Apple CryptoKit [7] in iOS and macOS).
In Fig. 3, we summarize the PSI protocol of [53] ap-
plied to our use case. Speciﬁcally, we show the application
to DO2 (cf. § 4.2). The application to DO3 works analo-
gously with the same type of inputs (address book AB for PSI
sender, identiﬁers IDs for PSI receiver), but the assignment
of AirDrop sender/receiver to PSI sender/receiver is swapped.
For simplicity, H in our description denotes a hash function
that maps either one or multiple bit strings or group elements
to a short bit string of ﬁxed length or an element in a multi-
plicative group of prime order q. The respective input and
output domains are clear from the context. We instantiate H
with the SHA-2 family [69] in our implementation (cf. § 5.2).
Informally, the protocol works as follows: (a) the PSI re-
ceiver hashes its input elements IDi with a collision-resistant
hash function H to group elements, encrypts the hash val-
ues hi with random keys αi, and sends the resulting values yi
to the PSI sender; (b) the PSI sender additionally encrypts the
received elements with a random secret key k and sends the re-
sults zi to the receiver; (c) the PSI receiver “removes” its own
keys αi such that it obliviously obtains the encryption of its
inputs under the sender’s key k; and ﬁnally (d) the PSI sender
sends hashed encryptions u j of its own input elements c j
in random order to the receiver, who then can compare the
6More precisely, malicious security is proven for an adaptive PSI func-
tionality, where the receiver makes a series of adaptive queries instead of
inputting its set as a whole. However, as the authors argue, any efﬁcient
adversary is committed to all its inputs at the execution time, and thus the
adaptive functionality can be assumed to be equivalent to regular PSI [13].
3582    30th USENIX Security Symposium
USENIX Association
values to determine the intersection. Following the PSI pro-
tocol of [76], the bitlength l of the values u j can be reduced
to λ + 2log2(n), where λ is the statistical security parame-
ter (which we set to λ = 40 in our implementation), and n is
an upper bound on the number of address book entries each
party has. This yields negligible failure probability 2−λ.
To achieve malicious security, the protocol utilizes a zero-
knowledge proof of knowledge that makes sure the PSI sender
knows and uses the same key k for computing all values zi.
This requires a so-called AND proof over the individual expo-
nentiations. For an efﬁcient and straight-forward instantiation,
we choose Schnorr’s DLOG proof [85] and apply the Fiat-
Shamir heuristic [16, 37] to turn it into a non-interactive
version (in the random oracle model), which does not require
additional communication rounds (cf. blue part in Fig. 3).
The protocol in Fig. 3 leaks some information via the num-
ber of inputs. For example, one can learn whether an AirDrop
sender is popular from the number of address book entries.
To prevent such leakage, we pad the input sets with dummy
elements to a globally ﬁxed upper bound. For example, it
is reasonable to limit the number of address book entries
to n = 10k and the number of contact identiﬁers to m = 10.
In § 6, we assess the practical performance implications of
such limits by conducting experiments with variable m and n.
4.4 Optimizing PSI for PrivateDrop
When integrating the PSI protocol of Fig. 3 into AirDrop, we
apply several performance improvements.
Precomputation. First, it is possible for the PSI sender to
generate the key k and compute the values ui ahead of time.
This can be done, e.g., overnight when the device is charging.
It is only necessary to update the precomputed values as ad-
dress book entries change. Since AB is the bigger input set,
this removes the largest computation bottleneck from the pro-
tocol execution. Likewise, the PSI receiver can precompute
the values yi, which change seldomly. Similar precomputation
techniques were proposed for passively secure DH-style PSI
in [59, 82], and with security against malicious clients in [55].
The security of our protocol follows from the security of
the protocol of [53]. Concretely, the simulation-based proof
of [53] applies equally, as the parties’ views remain identical.
Reusage. Moreover, it is possible to reuse the precom-
puted values across sessions. In previous works [55, 59, 82]
that consider large-scale databases as input sets, the precom-
puted values are reused by encoding and distributing them
in probabilistic data structures like Bloom or Cuckoo ﬁlters
against which OPRF evaluations are checked.
From a standalone perspective, this allows for user tracking,
but in AirDrop, users can already be tracked via the UUID
in the TLS certiﬁcate used for establishing the protocol com-
munication channel (cf. § 2.4). Avoiding user tracking in the
entire AirDrop execution is an important area for future work.
However, reusing precomputed encryptions of address book
entries over longer periods of time allows tracking changes
in the contact composition, i.e., how many contacts were
added or removed since the last protocol execution. Even
if no changes occur, this leaks some information, e.g., no
new person was met or no person was “unfriended”. In case
this leakage should be avoided, fresh encryptions should be
precomputed and never be reused.
Round Complexity. In terms of round complexity, it is
possible to bundle the last two messages from the PSI sender
to the receiver without changing the receiver’s view. Thus,
the PSI protocol consists of only one round, and the PSI
receiver may ignore the received values ui in case the zero-
knowledge proof veriﬁcation fails.
Furthermore, we optimize the sequential yet independent
execution of DO2 and DO3. For this, we bundle the second
message of DO2 with the ﬁrst message of DO3. In total,
both protocol executions require sending three messages, thus
two rounds. Importantly, directly including the ﬁrst DO3
message in the last DO2 message does not negatively impact
the AirDrop sender in case of engaging with a malicious re-
ceiver. This is because in a sequential execution, the AirDrop
sender gets no response at the end of DO2. Also, a mali-
cious AirDrop receiver cannot learn any additional private
information from receiving encryptions of hashed contact
identiﬁers. Moreover, since the AirDrop receiver gets no
response at the end of DO3 and the sender’s inputs can be ver-
iﬁed (cf. § 4.5), malicious behavior exploiting the sequential
execution of the online phases can only inﬂuence correctness,
but not input privacy.
Note that instead of our proposed three message protocol,
it would be possible to further parallelize computation with
a fully symmetric execution of DO2 and DO3. This would
require sending four messages but can still be done in two
rounds. However, to prevent malicious senders from causing
unnecessary work for innocent receivers (denial-of-service
attacks), we require the sender to ﬁrst process the receiver’s
inputs and reveal its encrypted address book entries before
starting the computation (cf. § 4.2). Moreover, the poten-
tial gain in overall efﬁciency via additional parallelization is
negligible, since the constant overhead caused by one commu-
nication round (≈ 100ms, cf. Fig. 8) is larger than the entire
online computation (< 50ms even for m = 10 IDs, cf. Fig. 7).
4.5 Countering Privacy Attacks
The security properties of the PSI protocol in Fig. 3 pre-
vent malicious parties from learning private information even
when arbitrarily deviating from the protocol deﬁnition. How-
ever, malicious parties might tamper with the protocol inputs,
which cannot be prevented by the protocol itself since this is
an attack on the ideal functionality of set intersection. We now
discuss the impact of such attacks and how to counter them
by leveraging Apple’s existing certiﬁcation infrastructure.
Malicious Sender. A malicious AirDrop sender could try
to obtain sensitive contact information of, e.g., VIPs by in-
cluding a VIP’s publicly known email address in their address
USENIX Association
30th USENIX Security Symposium    3583
book. The PSI protocol then yields a match, and the vulnera-
ble hash values of all contact identiﬁers of the VIP are sent in
subsequent steps of the AirDrop protocol (including, e.g., the
hashed phone number).
To prevent this attack, we modify the AirDrop protocol ﬂow
to release only hashed contact identiﬁers (in the validation
record) for which a match in the PSI protocol was found. This
requires a change to the current AirDrop validation record,
which contains all contact identiﬁers, cf. Eqs. (1) and (2)
on p. 3. In particular, we create individual validation records
for each of the user’s m contact identiﬁers IDi as follows:
VRi = (UUID,SHA-256 (IDi)) , ∀i ∈ 1, . . . ,m
VRσ,i = (VRi,sign (σVR,VRi) ,σVR) .
(3)
(4)
This yields a scalable solution as creating and distributing the
validation records is a one-time cost, and the number of IDs
per user m is expected to be small (e.g., m = 10).
Malicious Receiver. A malicious AirDrop receiver who
knows the sender could try to trick the sender into believing
they are mutual contacts by using contact identiﬁers that are
stored in the sender’s address book with high probability (e.g.,
emergency phone numbers). Moreover, with the same ap-
proach, a malicious AirDrop receiver can test whether the
sender knows a speciﬁc person. To prevent such attacks,
we propose to have the encrypted contact identiﬁers signed
by Apple. The resulting protocol is then closely related to au-
thorized PSI (APSI) [31, 33] and PSI with certiﬁed sets [21].
Similarly to the individual validation records in Eq. (4), we
introduce Apple-signed certiﬁcates that contain the UUID and
the precomputed values yi for the user’s contact identiﬁers:
(5)
(6)
PrivateDrop veriﬁes that the UUID in Eq. (5) equals the one
in the TLS certiﬁcate to prevent reuse by another party, thus,
mitigating replay and machine-in-the-middle attacks. As
with Eq. (4), this is a lightweight addition that does not re-
quire major changes in the existing infrastructure. The keys αi
can still be chosen on the client device. Only a simple zero-
knowledge protocol must be run with Apple to make sure yi
is actually an encryption of a legitimately hashed contact
identiﬁer and the client device is in possession of the keys αi.
This can again be efﬁciently instantiated with Schnorr’s pro-
tocol [85] and the Fiat-Shamir heuristic [16, 37] (cf. § 4.3).
Alternatively, Apple could choose the keys αi and hand them
to client devices together with signed values Yσ,i.
Yi = (UUID,yi) , ∀i ∈ 1, . . . ,m
Yσ,i = (Yi,sign (σVR,Yi) ,σVR)
.
Brute-force. Finally, either party could try to guess con-
tact identiﬁers of the other party by adding a large number
of “fake” address book entries (so-called enumeration at-
tacks [42]). However, in contrast to ofﬂine brute-force at-
tacks, where up to millions of guesses can be checked per
second, the success probability is signiﬁcantly lower since we
strictly limit the size of the input sets to a reasonable upper
bound (e.g., m = 10 and n = 10k, cf. § 4.3).
Table 2: Overhead of PrivateDrop’s PSI-based mutual authentication
protocol on n address book entries and m contact identiﬁers, respec-
tively. |q| is the size of group elements, |sign| the size of signatures
on encrypted contact identiﬁers, and l the length of hashes ui.
Precomputation
Online
Receiver R
Sender S
3mS + 3mR
3mS + 3mR
2mS + mR + 2 mS + 2mR + 2
(3mS + 3mR + 2)·|q| + (nS +
nR)· l + (mS + mS)·|sign|
Phase
Computation
Exp.
Hash calc.
Sender S Receiver R
mS + nS
mR + nR
mS + 3nS mR + 3nR
Communication
0
4.6 Our PrivateDrop Protocol
In Fig. 4, we show our full PSI-based mutual authentica-
tion protocol for AirDrop. Its computation and communi-
cation overhead is summarized in Tab. 2. For the compu-
tation overhead, we count the required exponentiations and
hash operations. We assume that verifying each signature
requires one such exponentiation and one hash operation. Ob-
taining the signature on the values yi is ignored since the