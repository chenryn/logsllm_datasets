title:BSOD: Binary-only Scalable fuzzing Of device Drivers
author:Dominik Maier and
Fabian Toepfer
BSOD: Binary-only Scalable fuzzing Of device Drivers
Fabian Toepfer
PI:EMAIL
TU Berlin
Berlin, Germany
Dominik Maier
PI:EMAIL
TU Berlin
Berlin, Germany
ABSTRACT
Operating system code interacting with the devices attached to our
computers, device drivers, are often provided by their respective
vendors. As they may run with kernel privileges, this effectively
means that kernel code is written by third parties. Some of these
may not live up to the high security standards the core kernel
code abides by. A single bug in a driver can harm the complete
operating system’s integrity, just as if the bug was in the kernel
itself. Attackers can exploit these bugs to escape sandboxes and to
gain system privileges. Automated security testing of device drivers
is hard. It depends on the attached device, and the driver code is
not freely available. Dependency on a physical device increases
the complexity even further. To alleviate these issues, we present
BSOD, a fuzzing framework for high-complexity device drivers,
based on KVM-VMI. BSOD retargets the well-known and battle-
proven fuzzers, Syzkaller and AFL++, for binary-only drivers. We
do not depend on vendor-specific CPU features and exceed 10k ex-
ecs/sec on COTS hardware for coverage-guided kernel fuzzing. For
evaluation, we focus on the highly complex closed-source drivers
of a major graphics-card vendor for multiple operating systems. To
overcome the strict hardware dependency of device driver fuzzing,
making scaling impractical, we implement BSOD-fakedev, a virtual
record & replay device, able to load a full graphics card driver with-
out a physical device attached. It allows to scale fuzz campaigns
to a large number of machines without the need for additional
hardware. BSOD was able to uncover numerous bugs in graphics
card drivers on Windows, Linux, and FreeBSD.
CCS CONCEPTS
• Security and privacy → Operating systems security.
KEYWORDS
Binary-Only, Fuzzing, Virtualization, Kernel Space, Drivers
ACM Reference Format:
Fabian Toepfer and Dominik Maier. 2021. BSOD: Binary-only Scalable
fuzzing Of device Drivers. In 24th International Symposium on Research
in Attacks, Intrusions and Defenses (RAID ’21), October 6–8, 2021, San Sebas-
tian, Spain. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/
3471621.3471863
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
RAID ’21, October 6–8, 2021, San Sebastian, Spain
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-9058-3/21/10...$15.00
https://doi.org/10.1145/3471621.3471863
1 INTRODUCTION
If users without administrative rights were able to freely execute
kernel code on systems like Windows, Linux, or FreeBSD, they
could alter their permissions directly in kernel memory to regain
these rights. Hence, in major operating systems, kernel code has
a trust boundary, shielding it from normal applications and their
users. Still, the amount of code running in the kernel of a mod-
ern operating system is huge. While the core components of an
operating system are usually well-tested, a large zoo of additional
device drivers from various vendors runs within the kernel as well.
Since device drivers must interact with user-mode processes and
hardware devices, they open up a large attack surface. The drivers,
often implemented as kernel modules, have extensive control inside
the kernel, which means that bugs or other forms of misbehavior
can have a significant impact on the overall system stability. The
threat is present in real-world products. In the Linux kernel, device
drivers constitute the majority of vulnerabilities [16]. In the past,
vulnerabilities were also discovered in the closed sourced kernel
components of graphic drivers [4, 18, 25, 28].
Since drivers are usually written in low-level languages like C
and C++, they can contain high-severity bugs that could lead to
memory corruptions. To uncover these issues, the security commu-
nity had good success with fuzzing in recent years. Fuzzing ker-
nels, however, is a more complex task than the common userspace
fuzzing, since it involves running a full operating system [17]. Sev-
eral kernel fuzzing approaches exist that depend on hand-crafted
interface descriptions [11, 19] or utilize hardware-assisted coverage
feedback [33, 40], but to the best of our knowledge, no fuzzers for
complex closed-source device drivers, such as those of graphics
cards, publicly exist.
Most personal computers and laptops contain GPUs from ei-
ther NVIDIA, AMD, or Intel. The gaming platform Steam collects
monthly data about what kind of hardware their customers are
using, including the distribution of used GPUs by the vendor. Their
Hardware Survey1 from January 2021 states that 74.41% of users
use an NVIDIA hardware. All of these customers are likely to run
the official drivers to make full use of their hardware. A bug in one
of the drivers, therefore, can be abused to attack a large share of
the computing market.
To safeguard these drivers, we present BSOD, a framework that
allows to fuzz binary-only drivers. After a researcher gains enough
knowledge about the target’s interfaces, they can set up an AFL++
or Syzkaller fuzzing campaign for the real device, using device
passthrough. Then, they can record traces and replay them on other
machines to parallelize fuzzing through BSOD-fakedev. This virtual
device, together with a fast breakpoint-based coverage method orig-
inally proposed for userspace applications by Nagy and Hicks [27],
1https://store.steampowered.com/hwsurvey
48RAID ’21, October 6–8, 2021, San Sebastian, Spain
Toepfer and Maier
Figure 1: BSOD overview: The supported fuzzers create inputs on the host system and gather, interact with QEMU/KVM using
KVM-VMI, and collect coverage feedback. The target OS executes each testcase against the driver, which either interacts with
real hardware, or with the BSOD-fakedev, a virtual replay of the real graphics card.
allow us to scale the fuzzing campaign to any hardware that can
run QEMU/KVM — without attaching a physical devices to all vir-
tual machines. Figure 1 depicts an overview of the components of
BSOD.
Contributions
collection for kernels.
binary-only device driver and kernel fuzzing.
• We develop and open-source BSOD, a framework for scalable
• BSOD includes hardware-agnostic untracer-style coverage
• BSOD allows fuzzing with AFL++ and Syzkaller. BSOD is the
first public use of Syzkaller for binary-only driver fuzzing.
• BSOD-fakedev is a virtual device that records and replays
PCI interactions. With it, we can load, and interact with,
complete graphics drivers.
• We fuzz the NVIDIA graphics drivers for Linux, FreeBSD,
and Windows, and uncovered multiple bugs.
2 BACKGROUND
Fuzzing is known to be an effective solution to uncover bugs by
executing generated inputs on target binaries [13, 34, 39]. Most re-
cent fuzzers rely on coverage information, which effectively guides
them through the program. Whenever a test case hits a previously
unseen program location, the fuzzer adds it to the corpus as a basis
for newly generated test cases [11, 39]. If the program’s source code
is available compilers can add instrumentation during the build pro-
cess [14, 34, 39]. For testing of binary-only targets, instrumentation
can be either achieved dynamically at run-time through emulation
with considerable overhead [39] or through binary rewriting [8].
In the following, we will further provide a quick introduction
to the attack surface in drivers in general, the case-study NVIDIA
driver in particular, as well as related work.
2.1 Kernel Driver Attack Surface
Device drivers are kernel modules and run in most privileged ring
0, which means they have full control over the system. A kernel
module can execute arbitrary code and has arbitrary read and write
primitives even for system-critical information that would render
any security mechanisms useless.
User-space applications that access the hardware devices need
to interface with the device drivers running in kernel space. For
this purpose, there exists the Input/Output Control (ioctl) system
call int ioctl(int fd, unsigned long cmd, ...);.
From an attacker’s point of view, system calls are an interesting
entry point since they allow executing code in kernel mode. Espe-
cially the ioctl system call provides a large attack surface since it is
generally defined so that the expected data and the correct handling
depend on the driver’s implementation. It has a high chance to con-
tain programming bugs that unexpected input data could trigger,
leading to memory corruption or unintended behavior. An attacker
could pass specifically crafted inputs to exploit these bugs to gain
higher privileges, perform arbitrary memory reads or writes, or
crash the system. When only proprietary device drivers are avail-
able for specific hardware devices, users have no other choice than
to trust the hardware vendor’s binaries. It is hard to know if these
trusted modules contain security bugs.
In our work, we focus on the scenario in which the attacker is
an unprivileged user that can access the driver’s device files. Most
components of the system have access to our target, the NVIDIA
drivers. Potential code execution in a fundamental driver like that
of a graphics card will, in most scenarios, grant an attacker full
kernel code execution.
While another possible source of untrusted data into the driver
can be the hardware device itself, we exclude it from this work.
Several systems [21, 29, 32] already covered this scenario.
2.2 NVIDIA Kernel Driver
In 2017, Google Project Zero [4] targeted the NVIDIA driver for the
Windows operating system and uncovered multiple bugs that reside
in the DxgkDdiEscape interface and in the exposed device nodes
that are accessible from user-mode applications. Even though, in
contrast to Windows, the Linux kernel is open source, the official
NVIDIA driver for Linux is proprietary, too. This means the kernel
components and the user-land implementations of the graphics API
standards are distributed in closed-source binary form.
The proprietary driver package supports a wide range of device
chips and generations. It consists of four kernel modules shown in
Figure 2 with their respective dependencies and licenses.
BSOD FuzzerAFL⁺⁺  QEMU KVM   Target OS Windows, Linux, FreeBSD, ...HarnessKernelBSOD-fakedevRecord & ReplayTarget DriverSyzkaller...Either⇅Using KVM-VMI:- UnTracer- Edge CoverageReal Hardwarei.e. Graphics Card (PCI)Either⇅BSODFuzz Input49BSOD: Binary-only Scalable fuzzing Of device Drivers
RAID ’21, October 6–8, 2021, San Sebastian, Spain
nvidia.ko
(NVIDIA)
nvidia-modeset.ko
(NVIDIA)
nvidia-drm.ko
(MIT)
nvidia-uvm.ko
(Dual MIT/GPL)
Figure 2: NVIDIA module dependencies on Linux
nvidia.ko. The main module comes with the closed-source bi-
nary nv-kernel.o_binary and only some source code needed to
interface with the running Linux kernel. When the driver is loaded,
it registers a control device and per GPU devices to be accessible
from user-mode applications via the device files /dev/nvidiactl
and /dev/nvidia0.
nvidia-modeset.ko. The module is responsible for retrieving and
setting the appropriate display properties by reading Extended
Display Identification Data (EDID) information from connected
display devices. It comes bundled with another closed-source binary,
nv-modeset-kernel.o_binary, and source code to interface with
the kernel, similarly to the main module. It registers a control device
that is accessible via the device file /dev/nvidia-modeset from
user-mode applications.
nvidia-drm.ko. This module implements the Direct Rendering
Infrastructure (DRM) interface that is typically used by the X win-
dow system. DRM exposes device files under /dev/dri/card0 for
control and /dev/dri/renderD128 for rendering.
nvidia-uvm.ko. The module provides the unified virtual memory
feature to use a single memory address space accessible by CPU and
GPU, which is typically used by CUDA applications. It registers two
devices that are accessible via the device files /dev/nvidia-uvm
and /dev/nvidia-uvm-tools for user-mode applications.
According to our reverse engineering efforts, the drivers for all
platforms, Windows, Linux, and FreeBSD appear to share a single
codebase. For instance, when comparing the Linux and FreeBSD
driver installation packages, they have a similar structure and
include both the identical binary modules nv-kernel.o_binary
and nv-modeset-kernel.o_binary together with a few source
code that interfaces with the kernel. The Windows kernel driver
nvlddmkm.sys also shares similarities in some functions and the
included text strings.
2.3 Related Work
UnTracer. Coverage-guided fuzzers search for inputs that trigger
previously unseen code paths to increase the coverage. Statistically,
such inputs are typically infrequent since similar inputs often re-
sult in the same code paths. Unfortunately, the coverage tracing
overhead is always the same, and inputs considered uninteresting
are discarded.
To minimize the coverage tracing overhead while fuzzing, espe-
cially for the majority of uninteresting inputs, the authors proposed
an implementation called UnTracer [27]. For the approach, they use
two versions of the program under test, which are an interest oracle
and a tracer binary. The purpose of the interest oracle is to deter-
mine whether a test case reached a previously unseen code location
in the program. It’s realized as a modified binary with inserted
software breakpoints at the start of every basic block. Whenever a
breakpoint triggers, the respective test case will be re-executed on
the tracer binary with full coverage tracing enabled. Afterward, the
system removes the breakpoints of all reached basic blocks from
the interest oracle. To realize the concept, the authors created a
customized version of AFL that generates the test cases for the
interest oracle. The benchmarks have shown that this approach
outperforms AFL’s QEMU mode [39] and reaches nearly identical