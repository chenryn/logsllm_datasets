tion web server, with which the browser performs an SSL handshake as
normal. To establish this relay, the browser makes an HTTP request to the
proxy server using the CONNECT method and specifying the destination
hostname and port number as the URL. If the proxy allows the request,
it returns an HTTP response with a 200 status, keeps the TCP connection
open, and from that point onward acts as a pure TCP-level relay to the
destination web server.
By some measure, the most useful item in your toolkit when attacking web
applications is a specialized kind of proxy server that sits between your browser
and the target website and allows you to intercept and modify all requests and
responses, even those using HTTPS. We will begin examining how you can use
this kind of tool in the next chapter.
HTTP Authentication
The HTTP protocol includes its own mechanisms for authenticating users using
various authentication schemes, including the following:
n Basic is a simple authentication mechanism that sends user credentials as
a Base64-encoded string in a request header with each message.
n NTLM is a challenge-response mechanism and uses a version of the
Windows NTLM protocol.
n Digest is a challenge-response mechanism and uses MD5 checksums of
a nonce with the user’s credentials.
cc0033..iinndddd 5500 88//1199//22001111 1122::0033::4444 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 51
Chapter 3 n Web Application Technologies 51
It is relatively rare to encounter these authentication protocols being used
by web applications deployed on the Internet. They are more commonly used
within organizations to access intranet-based services.
COMMON MYTH
“Basic authentication is insecure.”
Because basic authentication places credentials in unencrypted form within
the HTTP request, it is frequently stated that the protocol is insecure and
should not be used. But forms-based authentication, as used by numerous
banks, also places credentials in unencrypted form within the HTTP request.
Any HTTP message can be protected from eavesdropping attacks by using HTTPS
as a transport mechanism, which should be done by every security-conscious
application. In relation to eavesdropping, at least, basic authentication in itself
is no worse than the methods used by the majority of today’s web applications.
Web Functionality
In addition to the core communications protocol used to send messages between
client and server, web applications employ numerous technologies to deliver
their functionality. Any reasonably functional application may employ dozens
of distinct technologies within its server and client components. Before you can
mount a serious attack against a web application, you need a basic understand-
ing of how its functionality is implemented, how the technologies used are
designed to behave, and where their weak points are likely to lie.
Server-Side Functionality
The early World Wide Web contained entirely static content. Websites con-
sisted of various resources such as HTML pages and images, which were
simply loaded onto a web server and delivered to any user who requested
them. Each time a particular resource was requested, the server responded
with the same content.
Today’s web applications still typically employ a fair number of static resources.
However, a large amount of the content that they present to users is generated
dynamically. When a user requests a dynamic resource, the server’s response
is created on the fl y, and each user may receive content that is uniquely custom-
ized for him or her.
Dynamic content is generated by scripts or other code executing on the server.
These scripts are akin to computer programs in their own right. They have vari-
ous inputs, perform processing on these, and return their outputs to the user.
cc0033..iinndddd 5511 88//1199//22001111 1122::0033::4444 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 52
52 Chapter 3 n Web Application Technologies
When a user’s browser requests a dynamic resource, normally it does not
simply ask for a copy of that resource. In general, it also submits various
parameters along with its request. It is these parameters that enable the server-
side application to generate content that is tailored to the individual user.
HTTP requests can be used to send parameters to the application in three
main ways:
n In the URL query string
n In the fi le path of REST-style URLs
n In HTTP cookies
n In the body of requests using the POST method
In addition to these primary sources of input, the server-side application may
in principle use any part of the HTTP request as an input to its processing. For
example, an application may process the User-Agent header to generate content
that is optimized for the type of browser being used.
Like computer software in general, web applications employ a wide range of
technologies on the server side to deliver their functionality:
n Scripting languages such as PHP, VBScript, and Perl
n Web application platforms such as ASP.NET and Java
n Web servers such as Apache, IIS, and Netscape Enterprise
n Databases such as MS-SQL, Oracle, and MySQL
n Other back-end components such as fi lesystems, SOAP-based web services,
and directory services
All these technologies and the types of vulnerabilities that can arise in rela-
tion to them are examined in detail throughout this book. Some of the most
common web application platforms and technologies you are likely to encounter
are described in the following sections.
COMMON MYTH
“Our applications need only cursory security review, because they employ a
well-used framework.”
Use of a well-used framework is often a cause for complacency in web
application development, on the assumption that common vulnerabilities
such as SQL injection are automatically avoided. This assumption is mistaken
for two reasons.
First, a large number of web application vulnerabilities arise in an applica-
tion’s design, not its implementation, and are independent of the development
framework or language chosen.
cc0033..iinndddd 5522 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 53
Chapter 3 n Web Application Technologies 53
Second, because a framework typically employs plug-ins and packages
from the cutting edge of the latest repositories, it is likely that these packages
have not undergone security review. Interestingly, if a vulnerability is later
found in the application, the same proponents of the myth will readily swap
sides and blame their framework or third-party package!
The Java Platform
For many years, the Java Platform, Enterprise Edition (formerly known as J2EE)
was a de facto standard for large-scale enterprise applications. Originally devel-
oped by Sun Microsystems and now owned by Oracle, it lends itself to multitiered
and load-balanced architectures and is well suited to modular development and
code reuse. Because of its long history and widespread adoption, many high-
quality development tools, application servers, and frameworks are available to
assist developers. The Java Platform can be run on several underlying operating
systems, including Windows, Linux, and Solaris.
Descriptions of Java-based web applications often employ a number of poten-
tially confusing terms that you may need to be aware of:
n AnEnterprise Java Bean (EJB) is a relatively heavyweight software com-
ponent that encapsulates the logic of a specifi c business function within the
application. EJBs are intended to take care of various technical challenges
that application developers must address, such as transactional integrity.
n A Plain Old Java Object (POJO) is an ordinary Java object, as distinct
from a special object such as an EJB. A POJO normally is used to denote
objects that are user-defi ned and are much simpler and more lightweight
than EJBs and those used in other frameworks.
n AJava Servlet is an object that resides on an application server and receives
HTTP requests from clients and returns HTTP responses. Servlet imple-
mentations can use numerous interfaces to facilitate the development of
useful applications.
n A Java web container is a platform or engine that provides a runtime
environment for Java-based web applications. Examples of Java web con-
tainers are Apache Tomcat, BEA WebLogic, and JBoss.
Many Java web applications employ third-party and open source components
alongside custom-built code. This is an attractive option because it reduces
development effort, and Java is well suited to this modular approach. Here are
some examples of components commonly used for key application functions:
n Authentication — JAAS, ACEGI
n Presentation layer — SiteMesh, Tapestry
cc0033..iinndddd 5533 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 54
54 Chapter 3 n Web Application Technologies
n Database object relational mapping — Hibernate
n Logging — Log4J
If you can determine which open source packages are used in the application
you are attacking, you can download these and perform a code review or install
them to experiment on. A vulnerability in any of these may be exploitable to
compromise the wider application.
ASP.NET
ASP.NET is Microsoft’s web application framework and is a direct competitor
to the Java Platform. ASP.NET is several years younger than its counterpart but
has made signifi cant inroads into Java’s territory.
ASP.NET uses Microsoft’s .NET Framework, which provides a virtual machine
(the Common Language Runtime) and a set of powerful APIs. Hence, ASP.NET
applications can be written in any .NET language, such as C# or VB.NET.
ASP.NET lends itself to the event-driven programming paradigm that is
normally used in conventional desktop software, rather than the script-based
approach used in most earlier web application frameworks. This, together with
the powerful development tools provided with Visual Studio, makes devel-
oping a functional web application extremely easy for anyone with minimal
programming skills.
The ASP.NET framework helps protect against some common web application
vulnerabilities such as cross-site scripting, without requiring any effort from
the developer. However, one practical downside of its apparent simplicity is that
many small-scale ASP.NET applications are actually created by beginners who
lack any awareness of the core security problems faced by web applications.
PHP
The PHP language emerged from a hobby project (the acronym originally stood
for “personal home page”). It has since evolved almost unrecognizably into
a highly powerful and rich framework for developing web applications. It is
often used in conjunction with other free technologies in what is known as the
LAMP stack (composed of Linux as the operating system, Apache as the web
server, MySQL as the database server, and PHP as the programming language
for the web application).
Numerous open source applications and components have been developed
using PHP. Many of these provide off-the-shelf solutions for common application
functions, which are often incorporated into wider custom-built applications:
n Bulletin boards — PHPBB, PHP-Nuke
n Administrative front ends — PHPMyAdmin
cc0033..iinndddd 5544 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 55
Chapter 3 n Web Application Technologies 55
n Web mail — SquirrelMail, IlohaMail
n Photo galleries — Gallery
n Shopping carts — osCommerce, ECW-Shop
n Wikis — MediaWiki, WakkaWikki
Because PHP is free and easy to use, it has often been the language of choice
for many beginners writing web applications. Furthermore, the design and
default confi guration of the PHP framework has historically made it easy for
programmers to unwittingly introduce security bugs into their code. These
factors have meant that applications written in PHP have suffered from a dis-
proportionate number of security vulnerabilities. In addition, several defects
have existed within the PHP platform itself that often could be exploited via
applications running on it. See Chapter 19 for details on common defects aris-
ing in PHP applications.
Ruby on Rails
Rails 1.0 was released in 2005, with strong emphasis on Model-View-Controller
architecture. A key strength of Rails is the breakneck speed with which
fully fl edged data-driven applications can be created. If a developer follows the
Rails coding style and naming conventions, Rails can autogenerate a model
for database content, controller actions for modifying it, and default views for
the application user. As with any highly functional new technology, several
vulnerabilities have been found in Ruby on Rails, including the ability to bypass
a “safe mode,” analogous to that found in PHP.
More details on recent vulnerabilities can be found here:
www.ruby-lang.org/en/security/
SQL
Structured Query Language (SQL) is used to access data in relational databases,
such as Oracle, MS-SQL server and MySQL. The vast majority of today’s web
applications employ SQL-based databases as their back-end data store, and nearly
all application functions involve interaction with these data stores in some way.
Relational databases store data in tables, each of which contains a number
of rows and columns. Each column represents a data fi eld, such as “name” or
“e-mail address,” and each row represents an item with values assigned to some
or all of these fi elds.
SQL uses queries to perform common tasks such as reading, adding, updat-
ing, and deleting data. For example, to retrieve a user’s e-mail address with a
specifi ed name, an application might perform the following query:
select email from users where name = ‘daf’
cc0033..iinndddd 5555 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 56
56 Chapter 3 n Web Application Technologies
To implement the functionality they need, web applications may incorporate
user-supplied input into SQL queries that are executed by the back-end data-
base. If this process is not carried out safely, attackers may be able to submit
malicious input to interfere with the database and potentially read and write
sensitive data. These attacks are described in Chapter 9, along with detailed
explanations of the SQL language and how it can be used.
XML
Extensible Markup Language (XML) is a specifi cation for encoding data in a
machine-readable form. Like any markup language, the XML format sepa-
rates a document into content (which is data) and markup (which annotates
the data).
Markup is primarily represented using tags, which may be start tags, end
tags, or empty-element tags:
Start and end tags are paired into elements and may encapsulate document
content or child elements:
ginger
spotpaws
Tags may include attributes, which are name/value pairs:
...
XML is extensible in that it allows arbitrary tag and attribute names. XML
documents often include a Document Type Defi nition (DTD), which defi nes
the tags and attributes used in the documents and the ways in which they can
be combined.
XML and technologies derived from it are used extensively in web applica-
tions, on both the server and client side, as described in later sections of this
chapter.
Web Services
Although this book covers web application hacking, many of the vulnerabilities
described are equally applicable to web services. In fact, many applications are
essentially a GUI front-end to a set of back-end web services.
cc0033..iinndddd 5566 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 57
Chapter 3 n Web Application Technologies 57
Web services use Simple Object Access Protocol (SOAP) to exchange data.
SOAP typically uses the HTTP protocol to transmit messages and represents
data using the XML format.
A typical SOAP request is as follows:
POST /doTransfer.asp HTTP/1.0
Host: mdsec-mgr.int.mdsec.net
Content-Type: application/soap+xml; charset=utf-8
Content-Length: 891
18281008
1430
False
08447656
In the context of web applications accessed using a browser, you are most
likely to encounter SOAP being used by the server-side application to com-
municate with various back-end systems. If user-supplied data is incorporated
directly into back-end SOAP messages, similar vulnerabilities can arise as for
SQL. These issues are described in detail in Chapter 10.
If a web application also exposes web services directly, these are also worthy
of examination. Even if the front-end application is simply written on top of the
web service, differences may exist in input handling and in the functionality
exposed by the services themselves. The server normally publishes the available
services and parameters using the Web Services Description Language (WSDL)
format. Tools such as soapUI can be used to create sample requests based on a
published WSDL fi le to call the authentication web service, gain an authentica-
tion token, and make any subsequent web service requests.
Client-Side Functionality
For the server-side application to receive user input and actions and present
the results to the user, it needs to provide a client-side user interface. Because
all web applications are accessed via a web browser, these interfaces all share a
cc0033..iinndddd 5577 88//1199//22001111 1122::0033::4455 PPMM