Tree Mutable
String Mutable
Table 4: Mutability of request body symbols.
String Mutable
Tree Mutable
"CONNECT" | "OPTIONS" | "TRACE" | "PATCH"
 ::= 
 ::= 
 ::= 
‚Ü©‚Üí
 ::= "GET" | "HEAD" | "POST" | "PUT" | "DELETE" |
‚Ü©‚Üí
 ::= " "
 ::= "/_URI_"
 ::= "HTTP"
 ::= "/"
 ::= "0.9" | "1.0" | "1.1" | "2.0" | "3.0"
 ::= "\r\n"
 ::= "Host: _HOST_\r\nConnection:close\r\nX-Request-ID:
‚Ü©‚Üí
 ::= "Content-Length: 5\r\n\r\nBBBBB"
_REQUEST_ID_\r\n"
Listing 9: CFG for request line experiment.
Table 5: Experiment success values.
Experiment Name
Request line
Request headers
Request body
# Inputs
8,857K
3,096K
2,051K
# Successful
5K
1K
595K
test the HTTP/2 or HTTP/3 protocols, but our generated requests
merely appear to use them. As we show, the protocol values still
trigger unexpected parsing behaviors nonetheless.
Table 3 details what symbols of the grammar are marked as string
or tree mutable. In order to test mutations solely on the request
line, we mark only those symbols as mutable.
5.1.2 Request Headers Experiment Details. Listing 10 details the
grammar for the request headers experiment. We used all standard
HTTP request headers as detailed in the "Message Headers" reg-
istry of IANA [20], and valid values from their corresponding RFC
documents. For a full listing of all 67 headers and values used in
this experiment, refer to Section C in Appendix.
Mutable symbols for this experiment consist of the 67 headers
and their sub-elements depicted in the full grammar definition.
String literals in the grammar are marked as string mutable, while
all other symbols are marked as tree mutable.
5.1.3 Request Body Experiment Details. Listing 11 depicts the gram-
mar for the request body experiment. This experiment focuses on
chunked bodies, as they have a complex structure with the highest
potential for parsing discrepancies. We include all chunked body
components in the input grammar, namely, the chunk size, chunk ex-
tension, chunk data, trailer and last chunk. We also add the Trailer
header to the grammar, since it is required to include additional
fields at the end of chunked messages. Unlike other experiments,
we fix the method to POST and the version to 1.1.
The grammar defines a symbol called  which adds
200 D characters after the last chunk. This symbol lets us deter-
mine whether the experiment server used Transfer-Encoding
or Content-Length when parsing the body. If the server uses
Content-Length, the output will include our padding values; oth-
erwise, the padding will be omitted from the output, since this is
the expected behavior for chunked bodies.
"CONNECT" | "OPTIONS" | "TRACE"
 ::= 
 ::= 
‚Ü©‚Üí
 ::= " /_URI_ "
 ::= "HTTP/0.9" | "HTTP/1.0" | "HTTP/1.1"
 ::= "GET" | "HEAD" | "POST" | "PUT" | "DELETE" |
‚Ü©‚Üí
 ::= "\r\nHost: _HOST_\r\nConnection:close\r\nX-Request-ID:
‚Ü©‚Üí
 ::=  |
‚Ü©‚Üí
‚Ü©‚Üí
‚Ü©‚Üí
 ::=  |  | (truncated) |
‚Ü©‚Üí
 ::= "\r\nA\r\nBBBBBBBBBB\r\n0\r\n\r\nBBBBB(truncated)"
 |
 |
 | 
_REQUEST_ID_\r\n"
(truncated)
Listing 10: CFG for request headers experiment.
Transfer-Encoding\r\n\r\n" | "Trailer: Foo\r\n\r\n" | "\r\n"
_HOST_\r\nConnection:close\r\nX-Request-ID: _REQUEST_ID_\r\n"
 ::= 
 ::=
‚Ü©‚Üí
 ::= "POST /_URI_ HTTP/1.1\r\nHost:
‚Ü©‚Üí
 ::=  |
‚Ü©‚Üí
 ::= "Content-Length: 200\r\n"
‚Ü©‚Üí
 ::= "Transfer-Encoding: chunked\r\n"
 ::= "Trailer: Content-Length\r\n\r\n" | "Trailer:
‚Ü©‚Üí
 ::=  |
‚Ü©‚Üí
 ::=
‚Ü©‚Üí
‚Ü©‚Üí
 ::= "4"
 ::= ";foo=bar"
 ::= "BBBB"
‚Ü©‚Üí
‚Ü©‚Üí
‚Ü©‚Üí
 ::= "Transfer-Encoding: chunked\r\n" |
‚Ü©‚Üí
‚Ü©‚Üí
 ::= "\r\n"
 ::= "DDDDDDDDDD(truncated)"
 ::=  |
 ::= "0"
 |
"Transfer-Encoding: identity\r\n" | "Content-Length: 180\r\n" |
"Bar: Foo\r\n"
Listing 11: CFG for the request body experiment.
Table 4 shows that three chunked body symbols are marked as
tree mutable, while the other symbols are string mutable. The rest
of the request remains immutable.
Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1810Table 6: Examples for each request line mutation category.
Entrypoint-Exitpoint
Category
Request Line
mangled
method
h EAD / HTTP/1.1\r\n
Apache-Akamai
Apache-ATS
HAProxy-Akamai
HAProxy-ATS
GET / H h TTP/1.1\r\n
GET / HTTP/ 1 .1 9 \r\n
CONNECT / HTTP/1.0
\r\n \r\n
OPTIONS / HTTP/ OPTIONS
/ HTTP/0.9\r\n 1.1\r\n
GET / HT T P / /1.1\r\n
TRACE / HTTP/ 1.0 \r\n
ATS-Squid
ATS-Akamai
ATS-Squid
Varnish-NGINX
HAProxy-NGINX
Akamai-Squid
HAProxy-Squid
Apache-ATS
HAProxy-ATS
Squid-ATS
Varnish-ATS
distorted
protocol
invalid
version
manipulated
termination
embedded
request lines
multiple
mutations
various
method
version
combinations
Figure 2: Request line mutation categories affecting server pairs.
5.2 Stage 2 - Discrepancy Reduction and
Classification
We now detail the process for determining mutation success, and
present our classifications of mutation sets that cause discrepancies.
Successful Mutation Sets. To determine if a mutation from the
previous stage has HRS potential, we first need to define what a
successful mutation is.
A successful mutation set causes a discrepancy in the body pars-
ing behavior in at least one server pair, where the absence of the
mutation set does not. Essentially, if a mutation set causes a dis-
crepancy that the base unmutated request does not, we consider
that a successful mutation set.
Table 5 shows the number of successful mutations for each ex-
periment. To gain deeper insights into the causes and potential for
HRS, we set out to reduce this set further. We reduce mutation sets
based on the following definition.
A mutation set ùëÄ2 is reducible to ùëÄ1 iff. ùëÄ1 ‚äÜ ùëÄ2 and ùë†(ùëÄ2) ‚äÜ
ùë†(ùëÄ1) where ùë†(ùëÄ) is the set of server pairs which disagree about
parsing on an input mutated by a mutation set ùëÄ.
Classification of Mutation Sets. We classify mutation sets
based on their mutation pattern beyond the specifics of how the
mutations are carried out. For example, all mutations deleting, re-
placing, or inserting a character in the method of a request line
follow the same pattern: Distorting Method. We explore these cate-
gories and the server pairs they affect for each experiment below.
5.2.1 Request Line Experiment. Figure 2 lists all mutation cate-
gories affecting the request line, and the server pairs that disagree
on body parsing for each category. Table 6 shows examples for each
mutation category and the impacted server pairs.
Mangled Method. This class comprises mutation sets which
modify the method name. Mutations can change the case of a letter,
replace the entire method name, or modify it in another way. The
first row in a Table 6 shows an example where a single mutation
causes a discrepancy between 4 different server pairs. We observe
that the entrypoint (Apache or HAProxy) parses and forwards the
body of the request, while the exitpoint (Akamai or ATS) ignores it.
The remaining servers return an error because of the mutation. For
brevity, in the remainder of this section an error should be assumed
if an experiment server is not mentioned explicitly.
Distorted Protocol. This category consists of mutation sets that
replace one character in the protocol name with another, usually
adding the character h to the beginning of the protocol, or changing
the case of an existing letter. Table 6 shows a mutation that causes
a discrepancy between ATS and Squid. ATS handles the mutation
and parses the message body whereas Squid ignores the body.
Invalid Version. Mutation sets with this classification add a
digit, replace a digit with another, or remove a digit from the begin-
ning and adds one to the end. This category of mutations primarily
involve digits, keeping the versions numeric, yet invalid.
Manipulated Termination. These mutations primarily add a
space, tab, or CRLF before the CRLF that terminates the request
line. The example in Table 6 triggers a discrepancy when Varnish
or HAProxy is the entrypoint, and NGINX is the exitpoint. The
entrypoint determines that the body is what directly follows from
the double CRLF, whereas the exitpoint ignores the body completely.
Embedded Request Lines. This category includes mutation sets
that insert a whole request line into the existing request line at
various positions, including after the method and the protocol. The
example in Table 6 has a request line inserted after the protocol.
Multiple Mutations. We classify mutation sets into this cate-
gory when the individual mutations alone do not trigger a discrep-
ancy, but together they do. These mutation sets mainly have two
forms: 1) the method name is mutated while another CRLF is added
next to the terminating CRLF, or 2) a character is deleted from the
protocol name and a second slash is added after the protocol name.
Various Method Version Combinations. Sometimes inconsis-
tent behavior is triggered by bringing various methods and versions
together with no need for mutations. In the example in Table 6,
ATS ignores the message body for TRACE requests, whereas Apache,
HAProxy, Squid, and Varnish do not.
5.2.2 Request Headers Experiment. Figure 3 lists all server pairs
and mutation categories affecting request headers. Table 7 presents
examples as before; however, each example shows both the method
Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1811Table 7: Examples for each request header mutation category.
Category
Entrypoint-Exitpoint
Method ; Request Header
distorted
header value
manipulated
termination
expect
header
identity
encoding
v1.0 chunked
encoding
double
transfer-
encoding
various
method
version