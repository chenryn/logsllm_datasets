It is possible to
observe that for small burst sizes, the cost of agreement is
high – in a burst of 4 messages, it represents about 92% of
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
!
"
#
$
%
&
'
"
$
&
>
K
H
I
J

I
E

A


A
I
I
=
C
A
I


=
C
H
A
A

A

J

>
H

=
@
?
=
I
J
I
Figure 6. Latency and throughput for atomic broadcast with Byzantine faultload.
all broadcasts. This number, however, drops exponentially,
reaching as low as 2.4% for a burst size of 1000 messages.
4.3. Summary of Main Results
The protocols are robust. Performance (and correctness)
is not affected by the tested fault patterns, even when a ma-
licious process tries to delay the execution of the protocols.
The protocols are efﬁcient with respect to the number of
rounds to reach agreement. In the experiments, the multi-
valued consensus always reached an agreement with a value
distinct from the default ⊥, and the binary consensus always
terminated within one round.
Since protocols do not carry out any special actions when
a failure occurs, crashes have the effect of making execu-
tions faster. Less processes means less contention on the
network.
On the atomic broadcast protocol, the cost of the agree-
ments is diluted when the load is high. For a burst of 1000
messages, it represents only 2.4% of all (reliable or echo)
broadcasts that were made.
5. Related Work
Randomized intrusion-tolerant protocols have been
around since Ben-Or’s and Rabin’s seminal consensus pro-
tocols [2, 20]. These two papers deﬁned the two approaches
that each of the subsequent works followed. Essentially all
randomized protocols rely on a coin-tossing scheme that
generates random bits. Ben-Or’s approach relies on a lo-
cal coin-toss, while in Rabin’s shares of the coins are dis-
tributed by a trusted dealer before the execution of the pro-
tocol so all processes see the same coins.
Although many randomized asynchronous protocols
have been designed throughout the years [2, 20, 3, 24, 6,
18], only recently one implementation of a stack of ran-
domized multicast and agreement protocols has been re-
ported, SINTRA [5]. These protocols are built on top of
a binary consensus protocol that in practice terminates in
one or two communication steps [4]. The implementation
of the stack is in Java and uses several threads. The pro-
tocols depend heavily on public-key cryptography primi-
tives like digital and threshold signatures. The performance
values are presented in time between successive deliveries
(TBSD). In a LAN, the average TBSD for atomic and reli-
able broadcast was, respectively, 690 ms and 130 ms. The
inverses give throughput values of 1.45 and 7.69 msgs/s,
respectively. There is no information about latencies. RI-
TAS uses a Ben-Or-style protocol that uses no public-key
cryptography and theoretically runs in expected 2n−f com-
munication steps [3] but, in practice, in a LAN with realistic
faultloads, we observed that it runs in only three communi-
cation steps.
Randomization is only one of the techniques that can
be used to circumvent the FLP impossibility result. Other
techniques include failure detectors [15, 1, 16], partial-
synchrony [11] and distributed wormholes [8, 19]. It has
been proven that deterministic asynchronous consensus re-
quires a minimum of two communication steps in fault-free
executions [16]. The same number of steps has been shown
to be attainable extending the “normal” asynchronous sys-
tem with a synchronous and secure distributed component
called a wormhole, even when faults occur [8]. Partially
synchronous protocols have been presented that run in a
minimum of four steps in fault-free executions [11].
The ﬁrst evaluation of a set of asynchronous Byzantine
protocols (reliable and atomic broadcast) was made for the
Rampart toolkit [22]. The reliable broadcast is implemented
by Reiter’s echo broadcast (see Section 2) and the order is
deﬁned by a leader that also echo-broadcasts the order infor-
mation. Even with such a simple protocol, and using small
RSA keys (300 bits), Reiter acknowledges that “public-key
operations still dominate the latency of reliable multicast,
at least for small messages”. Moreover, if a process does
not echo-broadcast a message to all or if a malicious leader
performs some attack against the ordering of the messages,
these events have to be detected and the corrupt process re-
moved from the group. This detection is very costly in terms
of time [21] and requires synchrony assumptions about the
network delay, allowing attacks where malicious processes
delay others to force their removal. Our protocols do not
suffer from any of these problems since decisions (e.g., the
message order) are made in a distributed way. Our exper-
iments have shown that some attacks do not impact on the
performance of our protocols.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Like Rampart, SecureRing is an intrusion-tolerant group
communication system [14]. It relies on a token that rotates
among the processes. This signed token takes message di-
gests, a solution that allows a lower number of signatures
and an improvement of the performance when compared to
Rampart. In SecureRing malicious behavior has also to be
detected, which means that it suffers from the same prob-
lems as Rampart.
6. Conclusion
The paper presents an implementation and evaluation of
a stack of randomized protocols. These protocols have a
set of important structural properties, such as not requir-
ing the use of public-key cryptography (relevant for good
performance) and optimal resilience (signiﬁcant in terms of
system cost).
The experiments led to several conclusions: First, ran-
domized binary consensus protocols that in theory run in
high numbers of steps, in practice may execute in only a
few rounds under realistic conditions. Second, although
atomic broadcast is equivalent to consensus, with the right
implementation, a high number of atomic broadcasts can
be done with a small number of consensus. Consequently,
an atomic broadcast can cost almost as much as a reliable
broadcast. Third, taking decisions in a distributed way is
important to avoid performance penalties due to the exis-
tence of faults (the performance of our protocols is approx-
imately the same, or even improved, with realistic fault-
loads). This property is also important to avoid attacks
against time assumptions.
References
[1] R. Baldoni, J. Helary, M. Raynal, and L. Tanguy. Consen-
sus in Byzantine asynchronous systems. In Proc. of the Int.
Colloquium on Structural Information and Communication
Complexity, pages 1–16, June 2000.
[2] M. Ben-Or. Another advantage of free choice: Completely
asynchronous agreement protocols. In Proc. of the 2nd ACM
Symp. on Principles of Distributed Computing, 1983.
[3] G. Bracha. An asynchronous (cid:1)(n − 1)/3(cid:2)-resilient consen-
sus protocol. In Proc. of the 3rd ACM Symp. on Principles
of Distributed Computing, pages 154–162, Aug. 1984.
[4] C. Cachin, K. Kursawe, and V. Shoup. Random oracles in
constantipole: practical asynchronous byzantine agreement
using cryptography. In Proc. of the 19th annual ACM symp.
on Principles of distributed computing, pages 123–132, New
York, NY, USA, 2000. ACM Press.
[5] C. Cachin and J. A. Poritz. Secure intrusion-tolerant repli-
cation on the Internet. In Proceedings of the International
Conference on Dependable Systems and Networks, pages
167–176, June 2002.
[6] R. Canetti and T. Rabin. Fast asynchronous Byzantine agree-
ment with optimal resilience. In Proc. of the 25th Annual
ACM Symp. on Theory of Computing, pages 42–51, 1993.
[7] T. Chandra and S. Toueg. Unreliable failure detectors for
reliable distributed systems. Journal of the ACM, 43, 1996.
[8] M. Correia, N. F. Neves, L. C. Lung, and P. Ver´ıssimo.
Low complexity Byzantine-resilient consensus. Distributed
Computing, 17(3):237–249, 2005.
[9] M. Correia, N. F. Neves, and P. Ver´ıssimo. From consensus
to atomic broadcast: Time-free Byzantine-resistant proto-
cols without signatures. The Computer Journal, 41(1):82–
96, Jan. 2006.
[10] D. Dolev, C. Dwork, and L. Stockmeyer. On the minimal
synchronism needed for distributed consensus. Journal of
the ACM, 34(1):77–97, Jan. 1987.
[11] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in
Journal of the ACM,
the presence of partial synchrony.
35(2):288–323, Apr. 1988.
[12] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility
of distributed consensus with one faulty process. Journal of
the ACM, 32(2):374–382, Apr. 1985.
[13] S. Kent and R. Atkinson. Security architecture for the inter-
net protocol. IETF RFC 2093, Nov. 1998.
[14] K. P. Kihlstrom, L. E. Moser, and P. M. Melliar-Smith. The
SecureRing group communication system. ACM Transac-
tions on Information and System Security, 4, 2001.
[15] D. Malkhi and M. Reiter. Unreliable intrusion detection in
distributed computations. In Proc.of the 10th Computer Se-
curity Foundations Workshop, pages 116–124, June 1997.
[16] J. P. Martin and L. Alvisi. Fast Byzantine consensus.
In
Proceedings of the IEEE International Conference on De-
pendable Systems and Networks, June 2005.
[17] A. J. Menezes, P. C. V. Oorschot, and S. A. Vanstone. Hand-
book of Applied Cryptography. CRC Press, 1997.
[18] L. E. Moser and P. M. Melliar-Smith. Byzantine-resistant
Information and Computation,
total ordering algorithms.
150:75–111, 1999.
[19] N. F. Neves, M. Correia, and P. Ver´ıssimo. Solving vector
consensus with a wormhole. IEEE Transactions on Parallel
and Distributed Systems, 16(12), Dec. 2005.
[20] M. O. Rabin. Randomized Byzantine generals. In Proceed-
ings of the 24th Annual IEEE Symposium on Foundations of
Computer Science, pages 403–409, Nov. 1983.
[21] H. Ramasamy, P. Pandey, J. Lyons, M. Cukier, and W. H.
Sanders. Quantifying the cost of providing intrusion toler-
ance in group communication systems.
In Proceedings of
the International Conference on Dependable Systems and
Networks, pages 229–238, June 2002.
[22] M. Reiter. Secure agreement protocols: Reliable and atomic
group multicast in Rampart.
In Proceedings of the 2nd
ACM Conference on Computer and Communications Secu-
rity, pages 68–80, Nov. 1994.
[23] F. B. Schneider. Implementing faul-tolerant services using
the state machine approach: A tutorial. ACM Computing
Surveys, 22(4):299–319, Dec. 1990.
[24] S. Toueg. Randomized Byzantine agreements. In Proceed-
ings of the 3rd ACM Symposium on Principles of Distributed
Computing, pages 163–178, Aug. 1984.
[25] P. Ver´ıssimo, N. F. Neves, and M. Correia. Intrusion-tolerant
architectures: Concepts and design. In Architecting Depend-
able Systems. Springer-Verlag, 2003.
[26] G. R. Wright and W. R. Stevens. TCP/IP Illustrated, Volume
2: The Implementation. Addison Wesley, 1995.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE