webmail account, the victim’s browser sends the session cookie
with the attacker’s request, and the requested filter is applied. This
exact attack was performed against Gmail in 2007 [26].
CSRF attacks are possible because modern web applications or
websites are often required to be able to send HTTP requests to any
network address. This ability, however, allows an attacker that con-
trols a website visited by the victim’s browser to use resources not
otherwise under her control. These resources include leveraging
the browser state (e.g., by using authentication cookies to perform
privileged actions under the victim’s identity) and network connec-
tivity (e.g., accessing network resources behind a perimeter such as
a firewall) [5]. A common defense mechanism against CSRF attacks
are so-called CSRF tokens that are bound to a victim’s session and
need to be sent with every request made. Only if the token can be
correctly verified, the requested action is performed [5].
2.4 Related Work
Substantial work on identifying Internet-reachable services was
done in the past, and in the following, we survey work related to
our approach. Konzina et al. collected characteristic information on
web applications in 2009 by identifying linked applications-internal
URLs and forms [19]. However, their tool requires the attacker to
be on the same network to conduct a scan.
Acar et al. analyzed web-based attacks against local IoT devices
behind NATs using a malicious website [1]. Their work mainly
relies on circumventing the same-origin policy by exploiting HTML
MediaErrors and DNS rebinding in web browsers. Their attack will
not work with most modern browsers, because they do not generate
MediaErrors anymore [2, 13]. Furthermore, DNS Rebinding to
local IP addresses is blocked by many modern home routers [3, 25],
making this technique unreliable. Compared to this, CORSICA
stays within the borders of the SOP and thus does not rely on DNS
rebinding.
Stamm et al. presented attacks using a malicious web page to de-
tect and manipulate home routers [31]. The authors build upon this
to allow access to the internal network by reconfiguring the victim’s
DNS server and using these attack vectors to persist. The limita-
tions presented in their work, however, do not allow for generic
fingerprinting of Intranets.
Additionally, much work was done on fingerprinting JavaScript
files. In 2012, Blanc et al. described a procedure to characterize ob-
fuscated JavaScript using abstract syntax trees [7]. Even though this
would also help fingerprint non-obfuscated JavaScript files, such
a technique would require unrestricted access to the source code,
which is prevented by the SOP. In 2008, Johns documented state-of-
the-art techniques in JavaScript malware [17]. More specifically, he
presented readable attributes for cross-origin resources that are dy-
namically loaded on a website. CORSICA builds upon and extends
these loopholes in the SOP to build a web-based fingerprinter and
scanner for networks across perimeters.
In 2015, Frederic published a JavaScript-based ping script pingjs
on GitHub [10]. To determine if a host on the network is online, an
img element is created, and the resource URL is set to the IP address
of the host. The onload and onerror events [38, 39] of the image
element are used in conjunction with a timeout to determine if the
host is up. In March 2019, Bergbom published a research report
regarding the described attack scenario. It uses similar techniques
but is limited to one media type: images [6].
Subtle differences in HTML pages were found to not only leak
information about type and version of the web application but may
also correlate with confidential information that is leaked through
a storage-based side channel [11].
It is well-known that using JavaScript enables a website or web
service to fingerprint the user’s web browser using several tech-
niques [34]. As these fingerprinting techniques target the web
browser of the user, it raises privacy concerns about enabling user
tracking. These techniques rely – among other aspects – on the
fact that every browser interprets styles and scripts differently.
In the case of this work, this browser-specific behavior is rather
obstructive and complementary to our goals.
3 ATTACKER MODEL AND OVERVIEW
The goal of the attacker we consider in this paper is to attack
web services that are hidden behind security perimeters, e.g., on
private networks behind firewalls or NAT devices. To gain access
to this network, the attacker lures unwitting users located within
the private network to visit an attacker-controlled Internet website.
We assume that the victim uses a standards-compliant web browser
that executes the JavaScript code from the attacker’s website. The
browser strictly adheres to the Same-Origin Policy when executing
the JavaScript code.
For service identification, the attacker needs to scan the private
network and identify the type and possibly version of web services.
This information is key to find known security vulnerabilities that
can be exploited to conduct the actual attack. The winning con-
dition is reached when the attacker learns detailed information
Figure 2: The architecture of the cross-origin web service identification tool CORSICA.
about the type, version, port, and IP address of a web service that
has known security vulnerabilities but is hidden behind a security
perimeter. Note that the actual attack against this web service after
identification is out of scope for this work.
Figure 2 shows the overall process we follow in this paper. At
first, CORSICA queries a testbed of web applications with known
security vulnerabilities to generate feature vectors. Those feature
vectors are built into a classification engine that is published in a
JavaScript-based attacker website on a public webserver. When a
client inside the network visits the page, CORSICA is executed in
the client’s browser and discovers and identifies existing devices
and applications in the restricted network. CORSICA then exports
a map of discovered and identified services within the restricted
network.
4 IDENTIFYING SERVICES ACROSS
PERIMETERS
Websites often include code and resources into their own DOM, ei-
ther from a content delivery network (CDN) or from other domains.
As described in Section 2.2, this is explicitly allowed by the SOP, as
it prevents Cross-Origin reads but allows the inclusion of code (i.e.,
JavaScript or StyleSheets) and resources (i.e., images or videos).
Although the browser tries to reveal as little information as
possible about a loaded resource, some information is ultimately
necessary. For example, a web page needs to know the width and
height of an included image to format a web page correctly. In other
words, the SOP tries to be just permissive enough not to break
benign features of the web. However, these pieces of information
combined allow the precise identification of services.
4.1 Loopholes in the SOP
When a website loads resources, it can define multiple JavaScript
handlers, particularly onload and onerror. Those handlers are de-
signed to serve information to JavaScript concerning the loading
state and if a loading error has occurred. In most cases, this informa-
tion is not passed to JavaScript for cross-origin requests. However,
this behavior is inconsistent for different browsers and resource
types. While these events are essential to render websites embed-
ding external image files, they are usually not relayed for arbitrary
media files like PDF files and websites loaded in frames. This is to
prevent a website from checking the existence of these files across
origins. As shown in Table 1, the vast majority of accessible files
within web services are JavaScript, Style Sheet, or image files.
Table 1: File types within web services inside our database.
Filetype
.php:
.gif:
.png:
.js:
.css:
.yml:
.html:
.rst:
.xml:
.svg:
Number of files
1792301
657480
434389
380695
152453
146461
144020
135629
81685
71222
Images. Although pixel data is generally not available2, the im-
age dimensions are crucial for correct formatting. Thus, the width
and height of an image are always available across origins. This
information allows checking the presence of an image as well as
distinguishing between two images with identical file paths but
different dimensions.
Cascading Stylesheets. Even though the content of a style sheet
is not directly available to the embedding document, it is impossible
to hide the formatting from the embedding web page. Thus, after
applying a style to an object in the DOM, the resulting attributes
can be read. As a result, the embedding website can reconstruct a
loaded style sheet to a considerable extent.
2This also includes functions on the image, e.g. filters, as they are known to reveal
information about the image data [14, 32].
PerimeterTestbedTarget restricted networkAttacker siteVictim BrowserCORSICAFigure 3: Features representing a style sheet, a JavaScript and an image file from the CMS: Wordpress and TYPO3
The example style sheet directive displayed in Figure 3 defines
directives for an element with the id wp-members. Information on
the directive can be accessed to some extent by including the style
sheet into an HTML page and creating an element with the id
wp-members. After creation, the browser will automatically apply
the style values to the elements under the condition that the style
sheet was loaded correctly. In this specific case, we would expect
the browser to set the color attribute to #1982D1. Fortunately, we
are allowed to read those style values from any element we have
created with JavaScript using the function getComputedStyle. This
function returns the value of a specific style attribute the browser
has applied to an element. The applied values can be compared
with the expected results to determine if a style sheet file is present
on the device and contains the expected directives.
JavaScript. Remote JavaScript is necessarily accessible as if it
was loaded from the same origin (with some restrictions regarding
the visibility of syntax errors). Although variables and functions
cannot be listed via JavaScript, their existence can be checked.
Furthermore, the values of defined variables can be read, and the
embedding script can call functions. Lekies et al. [21] described
attacks based on this.
Including a -tag into an HTML page with the source
attribute directing to the JavaScript file to be checked makes all
functions and global variables accessible from a global context. Ad-
ditionally, the output of functions or operations inside a JavaScript
file is precalculated where possible. As a result, the presence of
functions and variables as well as their value can be checked using
JavaScript. Interestingly, calling .toString() on a function even
returns the source code, including comments [24].
Other Resources. Websites can also embed other types of media
files, for example, audio and video files. For videos, the dimen-
sions (.videoHeight and .videoWidth) and duration is available
(.duration).
4.2 Web-based Service Identification
Each service is identified by a set of files (i.e., features). A single
feature consists of one or more subfeatures. Subfeatures represent
actual attributes that can be extracted from a file and are necessary
to identify the file using the techniques described in Section 4.1.
Figure 3 shows example features representing a CSS, a JavaScript,
and an image file.
Once the feature vectors are generated, they can be used to
identify a service using JavaScript. To achieve this, a process based
on the decision tree shown in Figure 4 is used. At every node of
the tree, a single feature of a service group is checked, and the next
node is chosen according to the result. This will be repeated until
a leaf node is reached, and the service is identified as uniquely as
possible.
The process to check a single feature is described in Figure 5. To
check a single feature, an HTML-Element corresponding to the file
type is created on the test page:  for JavaScript, 
for CSS, and  for images. In the next step, the src attribute of
the created element is set to the URL of the file to identify. When it
is loaded, the techniques described in Section 4.1 are used to identify
the file. For images, the image size is checked and, for JavaScript,
all expected variables and functions are checked for their existence.
For style sheets, there is an additional step to be done. Here we need
to add test elements to our test page that can be formatted to check
the directives. Those test elements must have the right class or id
and the correct type. Once a test element is created, we can observe
if the test element is formatted as expected. This can be done by
Figure 4: Example identification tree. A single path in
the tree identifies a service uniquely. Each node repre-
sents a feature (file), for which the value can be tested
by checking the subfeatures.
using the JavaScript function getComputedStyle or the attribute
currentStyle, depending on the browser used. After checking a
directive, the element is removed, and a new test element is created
to prevent the page from slowing down due to excessive amounts
of elements. After all subfeatures of a feature are tested, the created
element from the beginning is removed from the test page.
5 LEARNING SERVICE FEATURE VECTORS
Before identifying web-based services across perimeters, feature
vectors need to be collected. This step is necessary because the
attacker needs to know which features to collect and which vectors
to compare the collected feature vectors to. In this section, we
describe the offline setup phase of the identification process.
5.1 Creating a Service Corpus
Files containing usable attributes for service identification can be
retrieved using three different approaches depending on the avail-
ability of the needed data: (1) using the installation files of a service,
(2) using a firmware image of a device, or (3) crawling an online
installation. As not all approaches are possible for every service,
we made sure that the output of the three approaches is compatible,
and that the results can be combined.
Installation files of Services. Obtaining installation files of a ser-
vice is often possible from the vendor’s or distributor’s web page.
After downloading and unpacking, we use the obtained files for the
feature vector generation.
Firmware Images of Devices. Firmware images of IoT devices of-
ten contain Linux based file systems and can be unpacked to access
the files. If the downloading and unpacking part is successful, we
can find the root directory of the web server and extract all relevant
files, while preserving the directory paths as well as the real web
path relative to the webroot on the device. This approach neverthe-
less has a couple of caveats. First, not all firmware images can be
successfully unpacked. Second, many vendors do not provide public
access to their firmware images but implement an automated up-
date process on the individual embedded devices. This complicates