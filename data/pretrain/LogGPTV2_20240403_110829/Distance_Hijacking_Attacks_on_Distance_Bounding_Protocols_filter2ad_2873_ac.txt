Tree [2]
WSBC+DB [21, p. 50]
WSBC+DB Noent [21, p. 51]
Discovered
attack
Yes
Yes
Yes
No
Yes
No
No
No
Yes
Yes
Yes
No
Yes
No
No
No
No
Yes
Yes
DISCOVERED DISTANCE HIJACKING ATTACKS ON EXISTING PROTOCOLS
(SINGLE PROTOCOL ENVIRONMENT).
Table I
V2. In this case, P sends the message addressed to V2, and
V ’s hardware may already ﬁlter out the message before it
arrives at the protocol level. Alternatively, the attacker can
jam-and-eavesdrop the signals sent by P (except for P ’s fast
response). Jamming seems to be possible on all protocols in
the table except for MAD, which explicitly requires jamming
detection, upon which the protocol aborts.
IV. PROTECTING AGAINST DISTANCE HIJACKING
We have seen that many protocols are vulnerable to
Distance Hijacking, and we now show how to repair them.
Without loss of generality, any distance bounding protocol
can be divided into three phases as depicted in Figure 7: the
setup phase, where nonces and commitments are exchanged;
the distance measurement phase, where the physical distance
is measured, often using rapid bit exchange; and the ﬁnalizing
phase that often includes a proof of identity. The only phase
that is required to be non-empty is the distance measurement
phase. The distance measurement phase follows the following
schema: the veriﬁer sends out a fresh challenge, to which the
prover responds with some value; this process may be split
into several rounds. The distance measurement is derived
from the measured response time, which means that the
prover must reply immediately. It is therefore infeasible to
use cryptographic functions (such as encryption or signatures)
in the computation of the response in this phase.
In a typical Distance Hijacking attack, a dishonest prover
exploits another prover’s response in the distance measure-
ment phase. Thus, although the dishonest prover has few
restrictions, because he does not have to follow the protocol
and can construct his own messages as he chooses, he can
only exploit honest provers as far as the protocol allows him
119
msc Phases
Prover
P
Veriﬁer
V
Setup phase
Distance measurement phase
Challenge
Response
Time measurement
Finalizing phase
Figure 7.
Phases in distance bounding protocols: Setup, distance
measurement, and ﬁnalizing. The setup and ﬁnalizing phases may be empty.
to. Therefore, in the ﬁxes we propose, we ensure that the
distance measurement response of an honest prover cannot
be abused by others in their communication with the veriﬁer.
Before we proceed to solutions, we provide more intuition
by showing why two seemingly straightforward ﬁxes to the
basic Brands and Chaum protocol fail.
Example 3 (Flawed ﬁx: Xor identity). A ﬁrst ﬂawed ﬁx is
to include the prover’s identity in the response messages
by sending challenge ⊕ NP ⊕ P. The problem with this
solution is that the identity of an attacker P (cid:2) might only
differ in a few bits from P . Then challenge ⊕ NP ⊕ P
agrees with challenge ⊕ NP ⊕ P
(cid:2) on all other bits and
the adversary only has to guess the remaining few bits in
challenge ⊕ NP ⊕ P
(cid:2) and overshadow them in P ’s response.
After learning challenge and NP, the dishonest prover can
check if his guesses were right and send the ﬁnal signature.
If the Hamming distance between P and P (cid:2) is k, then the
attacker has to guess k bits and his success probability is
therefore ( 1
Example 4 (Flawed ﬁx: secure channels). A second ﬁx is
to perform the setup and ﬁnalizing phases over some secure
channel, e. g., by using SSL/TLS, mutually authenticated
using client and server certiﬁcates. A protocol along these
lines is described in [16]. Because an attacker now cannot
eavesdrop (or change) the contents of the communication,
it might seem that any hijacking is thwarted. However, as
depicted in Figure 8, such protocols are still vulnerable to
Distance Hijacking. In the attack, P claims to be a veriﬁer
when communicating with P (cid:2), and P claims to be a prover
when communicating with V . Thus, P (cid:2) assumes that he
is proving his distance to P , and therefore transmits his
commit over the secure channel to P . P simply forwards
this commit to V . Because the distance measurement phase
is not protected by the secure channel, P (cid:2) will respond to
V ’s challenge. Afterwards, P (cid:2) will ﬁnalize his part over the
secure channel with P . P re-signs this information and sends
it to V over the secure channel.
2 )k.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:52 UTC from IEEE Xplore.  Restrictions apply. 
msc Attack on Brands and Chaum variant with secure channels
Dishonest prover
P
Honest prover
P (cid:2)
Veriﬁer
V
Generate β
commit (β)
commit (β)
Distance measurement phase
Generate α
α
α ⊕ β
sign P (cid:2)(V, α, β)
sign P (V, α, β)
Figure 8. Attack on Brands and Chaum variant where setup and ﬁnalization
use a secure channel. We use dashed arrows to denote transmission over a
secure channel. P (cid:2) assumes that P is a veriﬁer.
As shown by the examples, it is not trivial to make proto-
cols resilient against Distance Hijacking. The solution is to
make the prover’s messages during the distance measurement
phase distinguishable from those of other provers, such that
a veriﬁer will not mistake the response of one prover (say,
P (cid:2)) for the response of another (say, P ). We discuss two
possible solutions: explicit linking and implicit linking.
Solution family 1: Explicit linking: The ﬁrst solution, ex-
plicit linking, ensures that the response from different provers
is distinguishable by explicitly including identity information
in the response, combined with integrity protection. Example
instances of explicit linking are the following, where we
assume that NP is a nonce generated by the prover which
he commits to in the setup phase.
• challenge ⊕ h(P, NP ), where h is a hash function.
• challenge ⊕ sign P (NP ).
• challenge ⊕ MAC k(P,V )(P, NP ), where k(P, V ) is a
symmetric shared key between P and V .
Solution family 2: Implicit linking: The second solution
type, implicit linking, does not make the responses of different
provers distinguishable on their own. Rather, it relies on the
fact that honest provers do not reveal some secret, typically
their own nonce NP, before the distance measurement phase
has been completed. Thus, before this phase, only the prover
who generated NP knows the secret and can use it to
construct messages. In protocols that commit to a (temporary)
secret in the setup phase, the prover can include his identity
in the commit, hence sending commit(P, NP ) before the
distance measurement phase. Until the prover P releases this
nonce during or after his response, other (dishonest) provers
cannot commit to NP with their own identity. Thus, the
veriﬁer can check that the claimed identity for the distance
measurement phase corresponds to the commit he received
during the setup phase.
V. FORMAL ANALYSIS
Previous formal models capture Distance Hijacking to
an insufﬁcient extent. Speciﬁcally,
they do not capture
overshadowing parts of a message (see [22]), e. g., by sending
bits using a stronger signal. Several of our Distance Hijacking
attacks involve such overshadowing. To capture these attacks,
we extend the formal framework of Basin et al. [3] to
allow the attacker to perform message manipulation on the
wireless channel by overshadowing parts of a message, as
well as ﬂipping some bits of a message. The resulting new
framework allows to formally prove the absence all of the
previously described Distance Hijacking attacks. A complete
Isabelle/HOL formalization of all deﬁnitions and proofs in
this section is available in [26].
In Section V-A, we recall the basic model from [3] and
we present its extension in Section V-B.
A. Basic model
Agents and Environment: We assume that there are
countably inﬁnite disjoint sets Honest and Dishonest of
honest and dishonest agents. We deﬁne the set of all agents as
Agent = Honest∪ Dishonest. We use A, B, P , V for agents.
We associate a location locA ∈ R
3 to each agent. Based
on the location, we deﬁne the line-of-sight communication
distance between two agents A and B as
cdistLoS(A, B) =
|locA − locB|
c
(cid:2)
where c denotes the speed of light. This distance constitutes
a lower bound on the time required for a signal to travel
from A to B derived from the locations of both agents.
Messages: We assume that there is a countably inﬁnite
set Const of constants. We assume that there are countably
inﬁnite disjoint sets NonceA for each agent A and deﬁne
A∈Agent NonceA. We assume that there is a count-
Nonce =
ably inﬁnite set Key of keys that is partitioned into keys for
symmetric encryption and asymmetric encryption/signatures.
We assume that there is an inverse operator ·−1 on Key that is
the identity on symmetric keys. The set of syntactic messages
SMsg is deﬁned by the grammar
::= atom | (cid:4)M, M(cid:2)(cid:5) | h(M ) | {M}k | M ⊕ M(cid:2) | 0
M, M(cid:2)
where atom ∈ Agent ∪ Const ∪ Key ∪ Nonce is an atomic
message, and the remaining cases denote pairing, hashing,
encryption with k ∈ Key, exclusive-or, and the all-zero
message. We write signA(M ) as a shorthand for {M}sk(A).
We deﬁne the set Msg of messages as SMsg/=E, where
=E is the equational theory generated by the set of equations
E = {M ⊕ 0 =M, M ⊕ M = 0,
(M ⊕ M(cid:2)
M ⊕ M(cid:2)
) ⊕ M(cid:2)(cid:2)
= M(cid:2) ⊕ M}.
= M ⊕ (M(cid:2) ⊕ M(cid:2)(cid:2)
),
In the following, we abuse notation and write M to denote
=E M} ∈
the corresponding equivalence class {M(cid:2) | M(cid:2)
Msg.
120
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:52 UTC from IEEE Xplore.  Restrictions apply. 
M ∈ IKA
M ∈ DMA(tr)
(t, RecvA(M )) ∈ tr
M ∈ DMA(tr)
M ∈ DMA(tr) M(cid:2) ∈ DMA(tr)
M ⊕ M(cid:2) ∈ DMA(tr)
M ∈ DMA(tr) M(cid:2) ∈ DMA(tr)
(cid:4)M, M(cid:2)(cid:5) ∈ DMA(tr)
M ∈ DMA(tr) k ∈ DMA(tr)
{M}k ∈ DMA(tr)
M ∈ DMA(tr)
h(M ) ∈ DMA(tr)
(cid:4)M1, M2(cid:5) ∈ DMA(tr)
Mi ∈ DMA(tr)
 ∈ TR
NIL
tr ∈ TR I ∈ Dishonest M ∈ DMI (tr)
tr · (t, SendI (M )[]) ∈ TRP
tr ∈ TR (t(cid:2), SendA(M )[L]) ∈ tr
t ≥ t(cid:2)
+ cdistLoS(A, B)
tr · (t, RecvB(M )) ∈ TRP
INTR
BASICNET
Figure 10. Rules for network and attacker from the basic model.
{M}k ∈ DMA(tr) k−1 ∈ DMA(tr)
M ∈ DMA(tr)
Figure 9. Rules deﬁning DMA(tr).
tr ∈ TR
Events and Traces: The set of events is deﬁned as
] | RecvA(M ) | ClaimA(M ).
EV ::= SendA(M )[M∗
For Send, A denotes the agent executing the send, M the
sent message, and M∗ is a sequence of messages denoting
local state information associated with the event. For Recv, A
denotes the agent executing the receive and M the received
message. For Claim, A denotes the agent making the claim
and M the claim itself. A trace tr is a sequence of timed
events (t, EV ) with t ∈ R.
Initial knowledge: To model initial key distributions,
we deﬁne the functions pk : Agent → Key, sk : Agent → Key,
and K : Agent × Agent → Key that denote the public, secret,
and shared keys of agents with the expected properties, e. g.,
−1 = sk(A) and K(A, B) =K( B, A). We deﬁne the
pk(A)
initial knowledge of an agent A as
IKA = Agent ∪ Const ∪ NonceA ∪ {0}
∪ {sk(A)} ∪ {pk(B) | B ∈ Agent}
∪ {K(A, B) | B ∈ Agent}.
Message deduction: Let A be an agent and let tr be
a trace. Then the set DMA(tr) of deducible messages is
the least set closed under the rules in Figure 9. The rules
model message manipulations under the perfect cryptography
assumption, and are all considered modulo E.
Network and Attacker: The set of possible traces TR for
the basic model is deﬁned as the least set closed under the
START-rule, the attacker rule INTR, and the basic network
rule BASICNET2 given in Figure 10 and the rules formalizing
the analyzed protocol. For an example of protocol rules, see
Figure 12. All rules have the implicit side condition that
timestamps are monotonous, i. e., the timestamp of a newly
2Note that this rule is called NET in [3].
∀ X ∈ components(M ).
∃ t(cid:2) A L M(cid:2) Y ∈ components(M(cid:2)
)[L]) ∈ tr
(t(cid:2), SendA(M(cid:2)
∧ X ⊕ Y ∈ LHW
∧ t ≥ t(cid:2)
+ cdistLoS(A, B)
tr · (t, RecvB(M )) ∈ TRP
).
EXTNET
Figure 11. The new network rule for the extended model.
added event cannot be smaller than the maximal timestamp
in the trace. The INTR rule allows dishonest agents to send
arbitrary deducible messages. The BASICNET rule formalizes
that if there is a message M that has been sent by an agent
A, then B can receive the message at time t if t ≥ t(cid:2)
+
cdistLoS(A, B).
Given a set of traces of a protocol for a model, we can
deﬁne when a protocol is secure.
Deﬁnition 5. A distance bounding protocol is secure if all
claims (V, P, dist) that occur in traces of the protocol are
valid, i. e., they agree with locV and locP . Here, we account
for the fact that we allow dishonest nodes to share key
material and therefore identify all dishonest agents, i. e., a
claim (V, P, dist) for dishonest P is valid if there is some
dishonest P (cid:2) such that dist is an upper bound on the distance
between V and P (cid:2).
B. Extended model
The network rule BASICNET from [3] does not account
for message manipulation on the wireless channel. As a
result, several attacks from the previous sections (e. g., the
attack in Example 3) cannot be reproduced in the basic
model. We deﬁne our extended model by replacing the
network rule BASICNET by a new rule EXTNET, shown
in Figure 11, that allows for a more ﬁne-grained model of