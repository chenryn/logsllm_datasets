c. 不准向上写
D. 不准向下读
17. 当可信主体违反了 Bell-LaPadula 模型的星安全属性时， 为 了把客体写入低级别， 什么可行
的操作可能会发生 ?
A 扰动
B. 多 实例
C. 聚合
D. 移除分类
18. 什么 安全方法、 机制或模型揭示 了 一个主体访 问 多个客体的能力 ?
A. 职责分离
B. 访 问控制矩阵
C. Biba 模型
D. Clark-Wilson 模型
19. 什么安全模型拥有在理论上含有名称或标签的功能， 但是在解决方案中实现时 ， 需要安全
内 核的名称或标签?
A. Graham-Denning 模型
B. Deployment 模型
21 5
216
CISSP 官方学习指南(第 7 版)
C. 可信计算基
D. Chinese Wall
20. 下列哪一项不是 Clark-Wilson 模型的访问控制 关系 的一部分?
A. 客体
B. 接 口
C. 编程语言
D. 主体
第 9 ..z:c二
写主
安全脆弱性 、 威胁和对施
本章中覆盖的 CISSP 考试大纲包含 :
3) 安全工程(安全的工程学和管理)
• E. 评估和缓解安全架构、 设计和解决方案元素的脆弱性
E. l 基于客户端(例如 ， applet、 本地缓存)
E.2 基于服务器(例如 ， 数据流控制)
E.3 数据库安 全(例如 ， 推理、 汇聚、 数据挖掘 、 数据分析、 数据仓库)
E.4 大规模并行数据系统
E.5 分布式系统(例如 ， 云计算、 网格计算、 点对点)
E.6 密码系统
E.7 工业控制系统(例如， SCADA)
• F. 评估和缓解基于 Web 的系统(例如， XML、 OWASP)的脆弱性
• G. 评估和缓解移动系统的脆弱 性
• H. 评估和缓解嵌入式设备和物联网系统(例如 ， 网络使能设备、 物联网(loT))的脆弱性
本书前面的章节中 ， 我们 己经涉及了基本的安全原则 ， 以及防止这些原则被破坏的保护机制。
我们还研究了一些恶意人士为寻求规避这些保护机制而使用的特定类型攻击。 至此， 在讨论预防措
施时， 我们一直专注于策略措施和运行在系统上的软件。 然而， 安全专业人员也必须认真注意系统
本身， 并确保他们的更高级别的保护控制不是建立在摇摇欲坠的基础之上。 毕竟， 如果运行中的计
算机存在简单的安全漏洞， 并允许恶意人士轻易地完全绕过防火墙， 那么 即使世界上最安全的防火
墙配置也不会发挥一点儿作用 。
在本章中 ， 通过开展一项被称为计算机架构的简单调查， 我们将涉及这些潜在的安全关注点:
计算机不同组件的物理设计。 我们会从安全角度检查计算系统每一个主要的物理组件， 包括硬件和
固件。 显然， 由于受资源和时间的限制 ， 对系统硬件组件的详细分析不会很多 。 然而， 所有的安全
专业人员都应该对这些概念至少有个基本的了解， 以防止在遇到降低系统设计水平的安全事件时不
知所措。
安全工程领域涉及广泛的关注点和 问题， 包括安全设计元素、 安全体系结构、 漏洞、 威胁以及
相关的对策。 这个领域的其他元素在各章节中都有讨论: 第6章 " 密码学与对称密钥算法、 第7章
CISSP 官方学习指南(第 7 版)
" PKI 和密码学应用 "、 第8章 " 安全模型的原则 、 设计和功能"、 第 10 章 " 物理安全需求"。 请务
必 回顾所有这些内容 以便对这一领域的问题有个完整的 了解。
9.1 评估和缓解安全脆弱性
计算机体系结构是从逻辑层次考虑的计算系统的设计和构造的工程学规范要求。 许多学院的计
算机工程和计算机科学专业在教学中发现， 用一个学期的课程介绍计算机体系结构的基本原则是很
难完成的， 因此在大学阶段， 相应课程经常需要两个学期才能完成。 计算机体系结构课程在位级别
研究 CPU 组件、 内存设备、 设备通信和类似主题的设计， 为只进行 "0 "或" 1 " 判断的单独逻辑设
备定义处理路径。 大多数安全专家不需要理解到这么深的程度， 这些内 容已经超出本书和 CISSP 考
试的范围 。 但是， 如果工作涉及这个级别的计算系统的设计的安全方面， 那么建议应当更深入地研
究该领域的相关知识。
初步探讨的计算机体系结构似乎与 CISSP 无关， 但是大部分的安全体系结构和设计元素都基于
对计算机硬件的坚实理解和实现。
提示 :
系 统越复杂， 提供的保证越少 。 更多 的复杂性意味着更多存在漏洞的区域以及更多 需要防范威
胁的 区域。 更多 的漏洞和威胁意味着 系 统随后 提供安全的可信度更低。
9.1 .1 硬件
任何计算处理专业人士都熟悉硬件的概念。 与建筑业一样， 硬件是组成计算机的物理 "材料"。
术语 "硬件 " 包含计算机可以实际触摸到的任何有形部分， 范围从键盘、 显示器到CPU、 存储介质
和 内存条。 需要小心的是， 虽然存储设备(如硬盘或闪存)的物理部分可以认为是硬件， 但是在这些
设备里存储的 、 构成软件和数据的0和l 集合就不属于硬件了。 毕竟， 无法触摸到计算机的 内部， 然
后将一些 比特和宇节分离 出来!
218
1 . 处理器
通常被称为处理器的 CPU 是计算机的神经中枢， 是一个芯片或多个芯片(在多处理器系统中)，
负 责管理所有重要的计算操作， 并且直接执行或协调复杂的计算工作， 从而使计算机完成预定的任
务。 令人惊讶的是， 虽然允许计算机执行复杂的任务， 但 CPU 实际上都只能执行有限的计算和逻辑
操作集。操作系统和编译器负责将用于设计软件的高级编程语言翻译为 CPU 能够理解的简单汇编语
言指令。 限制功能的范围 是有 目 的 的 : 这允许 CPU 以极快的速度执行计算和逻辑操作 。
注意 :
对于这些年来关于计算机才支术数量级的发展， 可以参见 htφ:// en. wiki pedia. orglwikilMoore' s一1aw
上对摩 尔 定律的描述。
2. 执行类型
由于计算机的处理能力不断增强， 因此用户对计算机有了 更高的功能要求， 他们希望系统用更
快的速度处理信息， 并且能够同时处理多种功能。 于是， 计算机工程师设计出 了满足这些需求的一
第9章 安全脆弱性、 威胁和对施
些方法。
提示 :
乍看起来， 术语 "多 任务处理" 、 哆 处理" 、 "多程序设计" 和 "多 线程处理" 似乎完全相 同 。
然而， 它们所描述的 " 同 时办两件事" 问题的方式有很大的不同。 我们 强烈建议你多花一些时间来
仔细研究这些术语之间 的差别 ， 直到 熟悉它们 为止。
多任务处理 在计算处理中 ， 多任务处理指的是同时处理两个或更多个任务。 事实上， 大多数
系统并不是真正的多任务处理系统， 它们依靠操作系统， 通过仔细构造发送给 CPU 执行的命令的顺
序来模拟多任务处理。 毕竟， 当处理器正在以几千兆赫兹的速度进行处理并发出嗡嗡声时， 很难判
断是在任务之间进行转换(而非同时处理两个任务)。 不过， 可 以认定多任务处理系统在任意给定时
间都能够应付多个任务或进程。
多处理 在多处理环境中， 多处理器计算系统(也就是具有多个 CPU 的系统)利用 多个处理器的
能力完成一个应用程序的处理任务。 例如， 数据库服务器能够运行在包含三个处理器的系统上， 如
果数据库应用程序同时接收到多条独立的查询指令， 那么它就可以将每条查询指令发送给不同的处
理器去执行。
在具有多个 CPU 的现代系统中 ， 具有两种常见的多处理系统类型。 在刚才描述的场景中， 单个
计算机包含多个由一个操作系统控制的处理器， 这被称为对称多处理(Symmetric Mu1tiProcessing，
SMP)。 在 SMP 中 ， 处理器不但共享通用操作系统， 而且共享通用数据总线和内存资源。 在这种结
构类型中， 系统可 以使用很多个处理器。 幸运的是， 这种类型的计算能力足以驱动大多数系统。
某些计算密集的操作处理(例如， 那些支持科学家和数学家进行研究的计算操作)要求的处理能
力是一个操作系统无法独立提供的。 这样的计算操作通常由一种被称为大规模并行处理。但ssively
Parallel Processi吨， 陋的的技术提供。 MPP 系统中驻留 了数百个甚至上千个处理器， 每个处理器都
具有 自 己的操作系统和内存/总线资源 。 当协调整个系统的活动并调度处理的软件遇到某个计算密集
任务时， 会分配某个处理器负责完成任务。 这个处理器随后将任务分解为若干易于处理的部分， 并
把这些部分分配给其他处理器执行 。 那些处理器将它们的计算结果返回至协调处理器， 所有计算结
果在协调处理器中被重新组合并返回给提出请求的应用程序 。 MPP 系统的能力非常强大(不用说，
成本也十分高 昂)， 并且是很多计算研究中使用 的主要系统。
多处理系统的这两种类型都具有各自 独特的优点 ， 并且适用于不同的情况。 SMP 系统非常适合
以极高的速度处理简单的计算操作 ， 而 MPP 系统适合处理庞大和复杂的计算密集任务， 能将大的
任务分解成若干子任务并分配给不 同的处理器进行计算。
下一代多处理系统
在双核与 四核处理器出现之前， 创建多 处理系统的唯一方式是在母板上放直两个或多 个 CPU。
不过， 现在有 了 若干 多 核选项 ， 这样母板上的单个 CPU 芯 片 就存在两条或 4 条〈甚至更多 条周L行路
径. 因 为 九许同 时执行两 个(或多 个)计算 ， 所以确 实 准许存在只具有单个 CPU 的 多 处理系统。
多程序设计 多程序设计与多任务处理非常相似。 为 了达到提高计算效率的 目 的 ， 多程序设计
通过操作系统对单个处理器上的两个任务进行协调， 从而模拟两个任务同时执行的情况。 在很大程
度上， 多程序设计是一种批量或连续执行多个进程的方式， 这样一来， 一个进程结束并在外围等待，