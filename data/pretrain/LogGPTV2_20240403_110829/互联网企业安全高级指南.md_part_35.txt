口监控加关键应用扫描。
3）在系统和应用扫描上，不完全依赖于网络扫描器，可同时借助于本机agent扫描，
类似心脏滴血的漏洞与其从网络上去获取扫漏洞，不如在本地获取OpenSSL的版本更简
单。服务器OS本地的agent除了可以扫系统型漏洞，还可以扫本地配置型漏洞，相对来说
本地获取的信息比网络获取更准确，但代价是会消耗服务器资源，所以这块需要尽可能地
减少性能损耗
除了极个别大公司，对于绝大多数企业而言，自研扫描器比商业产品或成熟的开源产
品扫描能力更强的可能性是不高的，但是单机扫描又严重影响效率，所以对于业务有一定
规模但安全团队又没能力自制扫描器的公司，可以考虑将现有的扫描器改成分布式的，如
下所示：
口对于Web漏洞扫描，可以通过任务队列的方式将扫描任务发给awvs、arachni、w3af
等扫描器，改成分布式扫描器。
口对于服务器及网络漏洞扫描，可以多部署儿台Nessus 扫描器，并配置为集群模式，
调用API进行大规模扫描。
9.4小结
在攻防愈演愈烈的现代，光有基于静态漏洞规则和带fuzz功能的扫描还是会有许多漏
洞覆盖不到，安全部门需要采取基于数据的扫描，比如结合社工库等。其次需要建立应急
响应中心，让广大白帽子也参与到漏洞的挖掘与发现中，尽可能多地把暴露在外面的漏洞
消灭掉。
大型互联网公司在安全实践上可能采取一些精简手段，只做某些事情，前提是他们已
经做了另外一些看不见的防御措施，在某处精简必然是因为在其他地方削减了攻击面，并
---
## Page 211
第9章漏洞扫描199
且有多层次的防御机制做互补，也就是说他们的方案往往是针对自身特点的，不是一个完
全意义上的通用方案，如果我们的安全建设尚未到达那个阶段，直接和安全走在前沿的大
型互联网公司看齐，采用人家“高大上”的安全解决方案时，很有可能会发生刻舟求剑的
笑话，需要实事求是，根据实际情况逐步地建设所在机构的安全体系。
参考资料
2014ISC“金融Web应用系统漏润分析方法”，林榆坚
---
## Page 212
Clyco第10章
移动应用安全
互联网公司的安全体系基本上以运维安全，应用安全，业务安全三管齐下。而移动应
用安全则在应用安全中占据半壁江山，尤其对于移动端产品为主的公司而言，SDL的主要
实践对象就是移动应用。
10.1背景
随着智能手机和其他移动设备的爆发式普及，移动应用已成为互联网公司业务重要的
业务方向。本章中会以移动两大平台之一的安卓为主线，介绍移动应用所面临的安全风险
和解决方案。其中包含评估方法以及应对的思路，这些思路可以相应的借鉴于其他平台上。
本章的内容包括定义客户端应用安全的范围是什么，风险有哪些，攻击的来源，移动操作
素统所提供的工具。在了解这些基本的判断之后，当一些新的技术出现，我们仍然可以用
已有的标准去应对。
10.2业务架构分析
移动应用很少会单独存在，多数情况下会作为互联网业务流程中的承载平台出现。如
果业务同时存在传统Web页面服务模式，两者从逻辑上处于并行的关系，只是不同的表现
---
## Page 213
第10章移动应用安全201
形式。作为一种运行在用户控制设备上的应用，业务服务端应该假设客户端提交的信息存
在各种可能，在设计时需要关注哪些逻辑适合放在移动端，哪些逻辑需要保留在服务端。
涉及业务核心数据的行为，例如游戏中的物品掉落，支付行为的判断，账号信息的更改等
都需要在业务服务端进行判断，面非客户端。这些分割需要从设计阶段对移动客户端能做
哪些行为进行限定。
从整体业务角度来看，业务逻辑为皮，移动应用端的展示为毛。如何避免移动客户端
做不应承担的判断，如何将应用安全和业务服务端逻辑进行划定是首先需要明确的
10.3移动操作系统安全简介
图10-1是安卓系统的架构。和安全相关的介绍可以参看https://source.android.com
security/index.html. 其中:
ALAMBROWERCCULATOON
- PHOTO ALBUM - SMS/MMS VOICE DAL
, TELEPHONY,
ETYPE·UBC
SOLTE-SSL
FA XEATY3 - JY
SURFACE MANAGER
DEA
AUDIO- BLUETOOTH· CAMERA · DRM
INPUT · MEDIA - SENSORS · TV
EXTERNAL STORAGE - GRAPHICS *
MERA DISPL
KEYPAE, SHARED MEMORY,USE
WFT} · POWEH MANAGEMENT
图 10-1Android 体系架构
口硬件设备：安卓可运行在范围广泛的硬件上，并且支持某些硬件特有的安全功能，
例如ARM v6 的 eXecute-Never 功能。
口安卓操作系统：底层为Linux内核，所有设备资源都通过该层提供，包括相机，GPS
---
## Page 214
202技术篇
数据、蓝牙、电话、网络等服务。
口安卓应用：通常使用Java开发，运行在Dalvik/ART虚拟机中，除此之外还包括一
些二进制的组件。应用中不论是虚拟机还是二进制的部分都在相同的安全域，也就
是该应用的沙盒中。
现代移动操作系统和早期操作系统相比有一定的优势，以Windows为例，在不断更新
的过程中，会被过去的理念和代码实现所拖累。面安卓和iOS作为之后设计开发的操作系
统，在设计上加人了一些新的理念。此外现代操作系统如安卓中包含了大量的漏洞利用缓
解技术，例如ASLR，SELinux，FORTIFY_SOURCE编译选项等技术。这些技术能进一步
提高利用漏洞的难度，降低漏洞利用成功率。
以安卓为例，可以在下面的连接中看到安卓在5.0和6.0大版本中系统对应的安全升
级项。
https:/source.android.com/security/enhancements/enhancements50.html
https:/source.android.com/security/enhancements/enhancements60.html
由于这些措施的运用，在未越狱或root的设备上，更多的需要考虑应用自身遇到的安
全问题。应用需要信任并借用底层系统提供功能。
安卓在设计时已经考虑并集成了很多安全相关的功能和组件，一款普通的应用在设计
和开发过程中都可能用到这些。先来了解下一款安全应用的大体的结构。
Google提供了专门的SecurityTips给开发人员参考，可以参见下面的连接：
http://developer.android.com/training/articles/security-tips.html
其中的内容包括：数据安全性，服务安全性，应用权限安全性，以及其他一些内容
10.4签名管理
为了确定应用的来源，无论安卓还是iOS都会对应用的签名进行检查，确保用户安装
的应用来源可控。在来源检查上iOS环境下更加可控一些，造成这种情况的原因很多，但
最重要的一点是对应用市场的控制力。对于应用开发方，应该保护好本公司用于应用签名
的私钥，推荐的解决方案是建立签名服务器，开发者上传需要签名的应用，服务器完成签
---
## Page 215
第10章移动应用安全203
名后提供下载。签名服务可对申请应用签名的人员进行权限控制，并包含日志记录，保存
上传应用副本等功能，这样做的好处是降低私钥泄露的风险。
另外一点和签名相关的注意项是，在同一家公司内的应用推荐使用相同的签名密钥，
避免不同的应用使用不同的签名，这样不仅使于之后的发布和管理，在技术也使于之后可
能存在的应用间通信需求。无论iOS 中的Keychain Access Group和安卓权限定义中要求的
同签名来源（level=Signature）都要求应用被相同的密钥签名。
10.5应用沙盒及权限
如之前所说，安卓和iOS作为之后设计开发的操作系统，在设计上加人了一些新的理
念，其中重要的一点是通过沙盒（Sandbox）对各应用间的权限隔离，并在限定应用行为边界
后，通过按需申请应用权限的方式规范各应用的行为。这样就将单个应用面临的风险和其
他应用以及操作系统相隔离。
在安卓系统上，在接触任何系统资源前，应用都要通过权限检查，如图10-2所示，
应用
Android操作系统权限检查
个人信息
敏感输人设备
设备元数据
图10-2应用权限检查
那么是如何实现沙盒的？安卓和iOS内核都源自*nix类系统内核，对应用沙盒的技
术实现都是基于操作系统提供的用户机制。每个在系统上安装的应用，如果没有特殊设
定（SYSTEM或者安卓中SHARED-UID模式），都会有系统分配给应用一个独特的用户ID
（UID），单凭该UID，应用无法使用任何应用外的设备资源。只有当应用在安装时预先申请
了某些系统权限后，才会被准许进行权限对应的操作。
---
## Page 216
204技术篇
以安卓系统为例，申请系统权限需要按照如下格式在应用的AndroidManifest.xml文件
中添加 uses-permission的标签段。
android:maxSdkVersion="integer" />
其中android:name属性就是将要申请的权限名称，安卓所提供的所有权限定义的名称
和说明可以在下面的连接中查看：https://developer.android.com/reference/android/Manifest
permission.html
此外，应用在申请系统提供的权限的同时，也可以声明创建新的自定义权限，并且和
应用内提供的一些模块相关联。在下面的实例中，应用自定义了名为com.example.project
DEBIT_ACCT的权限，并且和com.example.project.FreneticActivity模块关联，之后如果
其他应用需要调用该模块，就需要在自已的AndroidManifest.xml文件中声明使用com
example.project.DEBIT_ACCT:
Cactivity android:name=*com,example.project ,FreneticActivity*
android:permission="con.example.project ,DEBIT_ACCT*
从上面的描述可以了解到，应用既可以作为权限的申请方，也可以提供自定义权限供
其他应用使用，而这些自定义权限相配合的是背后各种组件。
10.6应用安全风险分析
在应用和业务逻辑已经剥离的情况下，仍然可能存在严重的安全风险。首先需要意识
到这些风险的根源是应用实现形态的多样性。在提倡模块化的今天，应用在实现过程中会
分为数量众多的模块来实现，这些模块相互耦合，向模块外提供调用接口，或主动或被动
的接收外部数据并影响内部逻辑。通过梳理这些接口和数据来源，可以获取到安全风险的
---
## Page 217
第10章移动应用安全205
来源列表。
这些调用接口的形式是多样的，应用既可以在同系统下的组件层面提供各种服务，也
可能开放网络端口接受数据请求。此外客户端应用还更多的涉及文件内容的展示；各类型
的视频，音频，文档，图片，皮肤等公有和自定义文件类型的展示，网页内容展示也给移
动端应用带来了风险。在处理外部的数据过程中，会影响应用内部的逻辑。除了传统的数
据来源，由于现代操作系统已经进行了应用间的权限隔离，如何避免同系统中其他应用窃
取特定的权限也是需要关注方面。下面是一些具体的风险列表：
口应用间通信（IPC）：提供接口的组件权限，信息泄露，本地的数据加密和文
件权限等，以安卓为例，IPC接口包括Content Provider，Broadcast Receiver,
Activity，Service等形式。
口远程数据：开放端口接收数据，接收的各类型文件，应用的自动升级，数据传输明
文等
两类目标：用户：内容伪造，导致不能正确判断，程序：代码实现上的漏洞，代码执行，
权限窃取和绕过。从严重程度来看，首先需要注意远程来源数据。
10.7安全应对
对于大多数应用来说，都会使用到自身代码之外的三方逻辑，这些逻辑可能存在于调
用库中或作为独立组件被使用，这些逻辑可能引入安全问题。对于三方的选择，建议选取
保持更新的开源项目，查看项目升级日志中修补过的安全列表，确认应用中将要使用的版
本是否已经修补已知安全问题，并订阅此项目的版本更新邮件，能在之后发布安全更新时
第一时间评估影响。
具体到自身代码的引入的问题，需要符合最小化原则。举例来说，对只需要应用自身
使用到的组件，不提供给其他应用；对于不需要开放的端口，限定监听在特定的IP；对于
本地保存的数据库或文件等，严格的限定读写权限等。除此之外，另外两方面就是在需要
时提供完善的认证和加密机制。以近期的WormHole系列漏洞为例，利用的风险来源是开
放的端口，而这些端口在移动网络上的访问没有任何限制，并且在进行高危逻辑前没有做
好认证，这就是最小化原则和认证机制的一个反例。
---
## Page 218
206技术篇
10.8安全评估
1.代码审计
iOS 开发Xcode 环境可使用整合的 Clang Static Analyzer，而安卓Java代码可以
使用FindBugs来完成代码安全审计。具体审计范围和使用可参考之后第11章“代码
审计”。