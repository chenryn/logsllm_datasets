and exit by a client in location client loc to connect to a
destination in dst loc. The score must be a value in [0, 1],
and it should represent the expected total weight of the
adversaries that either are not present on the path between
client loc and guard or are not present on the path between
dst loc and exit (i.e., those not able to perform a correlation
attack), normalized by the sum of all adversary weights.
Thus, again, a higher score indicates higher security.
C. TrustAll
TrustAll consists of two separate processes:
1) CLUSTER: This process is run by the trust-policy provider
(e.g., by the Tor directory authorities for the default policy).
It clusters client and destination locations and makes the
results available to clients. To maintain the anonymity
sets provided by the clusters, this process should execute
infrequently (e.g., every 6 months) and only to reﬂect
signiﬁcant changes in the trust on entry and exit virtual
links. It takes the locations and relays data structures as
inputs and produces clusters as output, which is a mapping
from each location chosen as a cluster representative to the
set of locations in its cluster.
2) CONNECT: This process is run by a Tor client. It runs every
time a new connection is requested. It uses the output of
the CLUSTER process, the state of the client (e.g., current
network consensus, current circuits, and client IP address),
locations, and relays. It may create a new circuit or reuse
an existing one.
6
We now detail these processes.
1) Cluster: Network locations are clustered twice. One
clustering will be applied to the destination’s location during
path selection, and the other will be applied to the client’s
location. The output of a clustering is a partition of network
locations with a single member of each cluster in the partition
designated as that cluster’s representative. Client and destina-
tion clusterings are performed slightly differently because a
single client is likely to visit many destinations. Therefore,
if we were to bias destination clusters, we could potentially
reduce security for all clients on at least one connection, but
we can bias client clusters towards the most likely locations
and improve security for most clients.
a) Clustering destination locations: Destinations are
clustered with a k-medoids algorithm [31], modiﬁed to produce
balanced-size clusters. Balance is needed for good anonymity,
as each cluster is an anonymity set. The medoids of the
resulting clusters are used as representatives. The destination-
clustering algorithm takes two parameters: (i) num clusters,
the number of clusters to produce, and (ii) max rounds, the
maximum number of assignment rounds. The clustering is
accomplished as follows:
1) Choose as an initial cluster representative a location uni-
2) Choose the remaining num clusters−1 cluster representa-
tives by iteratively choosing the location with the largest
distance to the representatives already chosen (i.e., the
maximin distance), with distances determined by LOCA-
TIONDISTANCE().
formly at random from locations.
3) Assign locations to cluster representatives by greedily
assigning to the smallest cluster (in terms of the total size
of its locations) at a given time the location closest to its
representative, as measured by LOCATIONDISTANCE().
4) Recalculate the cluster representatives by determining the
location in each cluster with the smallest average distance
to each other member in the same cluster.
5) Repeat from step (3) if any cluster representative changed
and there have been fewer than max rounds assignment
rounds.
6) Return both the clusters and their representatives.
b) Clustering client locations: Client clustering uses
known popular client locations as cluster representatives and
then clusters the remaining locations in one round. The client-
clustering algorithm takes as input num clusters, the number of
clusters to produce. It creates the set of cluster representatives
by selecting the num clusters most-popular client locations.
The remaining locations are assigned to clusters by greedily
assigning to the smallest cluster at any time as in the destina-
tion clustering.
is requested to connect
2) CONNECT: The CONNECT process is invoked when
a Tor client
to a destination. We
assume for now that any needed DNS resolution has been
performed, and CONNECT has been given a destination IP
address. Section V-F discusses how DNS resolution might
occur.
The essential mechanism that TrustAll uses to improve se-
curity is to compute security scores for relays in the guard and
exit positions and then to only select the highest-scoring relays
for those positions. Guard security scores are determined with
GUARDSECURITY(), which takes into account any existing
guards when choosing a new one and thus provides security
with respect to the entire guard set. Exit security scores are
determined with EXITSECURITY(), which takes into account
the guard to be used for the circuit and thus can mitigate ﬁrst-
last correlation attacks.
Given scores for relays in position p ∈ {g, e} (g for guard
and e for exit), the SECURERELAYS() function (Alg. 1) is used
to determine the secure relays, that is, those relays with high-
enough scores to be selected for a given position. Note that
in Alg. 1 REVERSESORT(X, Y ) sorts the entries x ∈ X by
descending values Y [x], and LENGTH(X) returns the number
of entries in X. SECURERELAYS() identiﬁes the highest score
Algorithm 1 TrustAll secure relays to use for position p
function SECURERELAYS(αp, scores, relays, weights)
p )∧
R ← REVERSESORT(relays, scores)
s∗ ← scores[R[0]]
n ← LENGTH(relays)
S ← ∅, w ← 0, i ← 0
while (scores[R[i]] ≥ s∗αsu
(1 − scores[R[i]] ≤ (1 − s∗)αsc
(i < n) do
S ← S ∪ {R[i]}
w ← w + weights[R[i]]
i ← i + 1
while (scores[R[i]] ≥ s∗αau
(1 − scores[R[i]] ≤ (1 − s∗)αac
(i < n) do
S ← S ∪ {R[i]}
w ← w + weights[R[i]]
i ← i + 1
p )∧
return S
(cid:46) Maximum score
(cid:46) Number of relays
p )∧
(cid:46) Add all safe relays
p ) ∧ (w < αw
p )∧
(cid:46) Add acceptable relays
p
s∗. It adds to the set of secure relays all safe relays, that
is, relays with scores very close to s∗. Then it considers the
acceptable relays, that is, relays with scores close to s∗ but not
close enough to make them safe. Acceptable relays are added
in descending order of score until the desired fraction of the
total bandwidth in position p is reached. Distinguishing safe
from acceptable relays enables improved load balancing when
there are many highly-trusted choices available.
p , αau
p , αac
p , αsc
p , αau
p ). αsu
and αsc
p
p and αac
p ≤ αsu
p ≥ αsc
p .
p , αw
and αac
The “uncompromised” parameter αu ∈ {αsu
The parameters deﬁning these sets are given as the list
are used just
αp = (αsu
for safe relays, and αau
p are used just for acceptable
p
relays. Safe and acceptable relays are deﬁned using the same
method, but acceptable relays use less restrictive parameters,
with αau
p } is used
to include a relay only if it has a security score s such that s ≥
s∗αu. It must be that αu ≤ 1, or no relays would qualify. αu
is thus the required fraction of the maximum possible expected
weight of adversaries with respect to whom the circuit position
is considered uncompromised. One effect of this constraint is
that relays with completely untrusted paths will not be chosen
if there is at least one other option.
p } is used to
include a relay only if it has a score s such that 1 − s ≤
(1− s∗)αc. It must be that αc ≥ 1, or no relays would qualify.
αc is thus a limit on the multiple of the minimum possible
expected weight of adversaries to whom the circuit position is
considered compromised. An effect of this constraint is that
if relays with completely trusted paths are available, then no
The “compromised” parameter αc ∈ {αsc
p , αac
other options are considered.
p represents the desired minimum bandwidth fraction of
αw
relays in position p for the secure relays. It will be reached if
the safe and acceptable relays together constitute at least that
fraction. The weights argument to SECURERELAYS() maps
relays to their positional bandwidth to determine if and when
p is reached.
αw
Let client rep be the representative location for the client’s
cluster and dst rep be the representative location for destina-
tion’s cluster. The CONNECT process proceeds as follows:
If the number (cid:96) of selected and responsive guards is less
than the number k desired (e.g., k is the value of NumEntry-
Guards [36]), then k− (cid:96) new guards are selected. Each guard
is added by (i) creating scores where each potential guard g
has score GUARDSECURITY(client rep, G ∪ {g}), with G is
the current set of guards; (ii) identifying as the set of secure
guards S = SECURERELAYS(αg, scores, P, g weights), where
αg contains the guard security parameters, P contains all
potential guards not currently selected, and g weights contains
the relays’ weights for the guard position; and (iii) randomly
selecting from S with probability proportional to g weights
(i.e. making a bandwidth-weighted choice).
Consider the existing circuits in reverse order of the time
a stream was most-recently attached. If current circuit c is
too dirty, that is, a stream was ﬁrst attached too long ago
(Tor’s default dirtiness threshold is 10 minutes), then proceed
to the next circuit. Otherwise, let gc be the circuit’s guard, let
αe contain the security parameters for exit selection, let exits
contain all potential exits for the desired connection according
to the criteria Tor currently uses that don’t depend on the
guard (e.g., a compatible exit policy), and let e weights contain
the relays’ weights for the exit position. Let scores contain
the exit scores, with scores[e] = EXITSECURITY(client rep,
dst rep, gc, e) for all e ∈ exits. Compute the set of secure exit
relays S = SECURERELAYS(αe, scores, exits, e weights). If
the circuit’s exit ec is in S, then reuse the circuit. Otherwise,
proceed to the next circuit.
If no suitable circuit has been found and reused,
let
too dirty
c be the circuit among those that are not
that most
recently had a stream attached, and let gc
be its guard. Choose a new exit e by (i) creating
scores where each e ∈ exits has
score EXITSECU-
RITY(client rep, dst rep, gc, e); (ii) identifying as the set of se-
cure exits S = SECURERELAYS(αe, scores, exits, e weights);
and (iii) randomly selecting from S with probability propor-
tional to e weights. Reuse c through its ﬁrst two hops but
“splice” e onto the end after the middle relay. This effectively
operates as a new circuit, but the handshakes through the ﬁrst
two hops are not repeated to reduce the latency of creating it.
If no circuit exists that is not too dirty, create a new
circuit as follows: (i) choose a guard g uniformly at random
from the k selected and responsive guards, (ii) choose an
exit e as described for the case that a new exit is being
spliced onto an existing circuit with g as the guard, and (iii)
choose a middle node as Tor currently does given g and
e (e.g., bandwidth-weighted random selection). Note that, in
contrast to vanilla Tor path selection, the guard and exit are
not explicitly prevented from being contained in the same /16
subnet or relay family. Instead, the threat of entry and exit
paths being observed by the same relay family or network
is incorporated into the trust policy, and vulnerable paths are
avoided by TAPS.
7
D. TrustOne
TrustOne path selection is designed to be used when most
users are not using TAPS and instead are using vanilla Tor
path selection. Thus slightly different behavior is required in
order to fully blend in with the larger group. Also, if most
users do not use trust, then more secure parameters can be
used without impacting performance much.
As with TrustAll, TrustOne consists of a CLUSTER process
and a CONNECT process. CLUSTER is performed in the same
way as in TrustAll. The CONNECT process differs from that
of TrustAll in the following ways:
• SECURERELAYS() doesn’t use the notions of safe and
acceptable relays. It simply orders relays by their score
and chooses the most secure up to the desired bandwidth
fraction. The TrustOne version of this function appears
in Alg. 2. Note that
the performance parameter is a
single value (i.e., αp = αw
p ). TrustOne doesn’t use the
concept of acceptable relays because it must allow exit
relays to be chosen the same they are in vanilla Tor path
selection, which in TrustOne will happen when αw
e = 1.
Also, TrustOne can omit the distinction between safe and
acceptable relays because load balancing is less important
when few users are using trust.
• Given a guard, potential exits (i.e., the set over which
scores are computed with EXITSECURITY()) are chosen
exactly as they are in vanilla Tor path selection, including
in particular the constraints preventing exits and guards
from sharing a family or /16 subnet. This prevents a
TrustOne user from being identiﬁed as using non-standard
path selection (e.g., by a middle relay).
Algorithm 2 TrustOne secure relays to use for position p
p , scores, relays, weights)
function SECURERELAYS(αw
(cid:46) Add desired fraction of relays
R ← REVERSESORT(relays, scores)
S ← ∅, w ← 0, i ← 0
while w < αw
p do
S ← S ∪ {R[i]}
w ← w + weights[R[i]]
i ← i + 1
return S
Note that a client can choose not to protect the fact the he
is using TrustOne instead of vanilla Tor by setting a desired
exit bandwidth fraction of αw
e < 1. He may do this when he
doesn’t believe that revealing his use of TrustOne will reveal
his identity, and using a smaller αw
e will improve his security
against a ﬁrst-last correlation attack by restricting his circuits
to more-secure exits.
E. Trust API implementations
The efﬁciency of the trust API depends on the type of
trust policies used. For example, a user with trust in individual
relays may only need to store a single trust value for each
relay and perform simple arithmetic computations for the API
functions, while a user with trust in Autonomous Systems
may need to store an entire Internet topology and perform
routing inference. In general, because the API functions return
the expectation of values that can easily be computed if
the compromised relays and virtual links are unknown, they
can be implemented by repeatedly sampling the adversary
distributions. Thus the API functions are compatible with
8
the Bayesian-network representation of Jaggard et al. [16].
However, policies should use implementations that are efﬁcient
for their speciﬁc features.
For The Man policy, the trust API functions need access
to data describing the relay families, AS organizations, IXP
organizations, and the virtual entry and exit links on which
each AS and IXP organization has a presence. The API
functions can easily be implemented efﬁciently for The Man
because there is a single adversary whose presence on a virtual
link depends on the compromised status of network entities