OBCs can be used to strengthen cookie-based authen-
tication by “binding” cookies to OBCs. When issuing
cookies for an HTTP session, servers can associate the
client’s origin-bound certiﬁcate with the session (either
by unforgeably encoding information about the certiﬁ-
cate in the cookie value, or by associating the certiﬁcate
with the cookie’s session through some other means).
That way, if and when a cookie gets stolen from a client,
it cannot be used to authenticate a user when communi-
cated over a TLS connection initiated by a diﬀerent client
– the cookie thief would also have to steal the private
key associated with the client’s origin-bound certiﬁcate
– a task considerably harder to achieve (especially in the
presence of Trusted Platform Modules or other Secure
Elements that can protect private key material).
Service Cookie Hardening One way of unforgeably
encoding an OBC into a cookie is as follows. If a tradi-
tional cookie is set with value v, a channel bound cookie
may take the form of:
(cid:104)v, HMACk(v + f )(cid:105)
f
where v is the value,
is a ﬁngerprint of the client
OBC, k is a secret key (known only to the server), and
HMACk(v + f ) is a keyed message authentication code
computed over v concatenated to f with key k. This
information is all that is required to create and verify a
channel bound cookie. The general procedure for set-
ting a hardened cookie is illustrated in Figure 2. Care
must be taken not to allow downgrade attacks: if both
v and (cid:104)v, HMACk(v + f )(cid:105) are considered valid cook-
ies, a man-in-the-middle might be able to strip the sig-
nature and simply present v to the server. Therefore,
the protected cookie always has to take the form of
(cid:104)v, HMACk(v + f )(cid:105), even if the client doesn’t support
TLS-OBC.
Cookie Hardening for TLS Terminators The tech-
nique for hardening cookies, as discussed above, as-
sumes that the cookie-issuing service knows the OBC
of the connecting client. While this is a fair assumption
to make for most standalone services, it is not true for
many large-scale services running in datacenters. In fact,
for optimization and security reasons, some web services
have TLS “terminators”. That is, all TLS requests to and
from an application are ﬁrst passed through the TLS ter-
minator node to be “unwrapped” on their way in and are
“wrapped” on their way out.
There are two potential approaches to cookie harden-
ing with TLS terminators. First, TLS terminators could
extract a client’s OBC and pass it, along with other infor-
mation about the HTTP request (such as cookies sent by
Figure 3: MITM attack during a TLS handshake
the client) to the backend service. The backend service
can then create and verify channel-bound cookies using
the general procedure in the previous section.
The second approach involves using the TLS termina-
tor to channel-bind the cookies of legacy services that
cannot or will not be modiﬁed to deal with OBC in-
formation sent to them by the TLS terminator. Us-
ing this approach, TLS terminators must receive a list
of cookie names to harden for each service to which
they cater. When receiving an outbound HTTP response
with a Set-Cookie header for a protected cookie, the
TLS terminator must compute the hardened value us-
ing the OBC ﬁngerprint, rewrite the cookie value in the
Set-Cookie header, and only then wrap the request in
a TLS stream. Similarly, the TLS terminator must in-
spect incoming requests for Cookie headers bearing a
protected cookie, validate them, and rewrite them to only
have the raw value. Any inbound request with a channel-
bound cookie that fails veriﬁcation must be dropped by
the TLS veriﬁer.
Channel-Bound Cookies Protect Against MITM
As mentioned earlier, TLS MITM attacks happen and
some can go undetected (see Figure 3 for a depiction of a
conventional MITM attack). Channel-bound cookies can
be used to bring protection against MITM attacks to web
users.
Recall that our threat model assumes that at some time
in the past, the user’s client was able to successfully au-
thenticate with the server. At that point, the server would
have set a cookie on the client and would have bound
that cookie to the client’s legitimate origin-bound certiﬁ-
cate. This process is shown in Figure 2. Observe that on
a subsequent visit, the client will send its cookie (bound
to the client’s OBC). However, the MITM lacks the abil-
ity to forge the client’s OBC and must substitute a new
OBC in its handshake with the server. Therefore, when
the MITM forwards the user’s cookie on to the server,
the server will recognize that the cookie was bound to a
diﬀerent OBC and will drop the request. This process
is shown in Figure 4. The careful reader will observe
that a MITM attacker may strip the request of any bearer
tokens completely and force the user to provide his user-
name/password once more or fabricate a new cookie and
Figure 4: Using OBCs and bound cookies to protect
against MITM. The server recognizes a mismatch be-
tween the OBC to which the cookie is bound and the cert
of the client (attacker) with who it is communicating.
log the user in as another identity. We cover this more in
Section 4.3 and in an upcoming report.
4.2 Hardening Federation Protocols
Channel-binding cookies with OBCs allows a single en-
tity to protect the authentication information of its users,
but modern web users have a plethora of other login cre-
dentials and session tokens that make up their digital
identity. Federation protocols like OpenID [20], OpenID
Connect [23], and BrowserID [14] have been proposed
as a way to manage this explosion of user identity state.
At a high level, these federation protocols allow the user
to maintain a single account with an identity provider
(IdP). This IdP can then generate an identity assertion
that demonstrates to relying parties that the user con-
trols the identity established with the identity provider.
While these federation techniques reduce the number of
credentials a user is responsible for remembering, they
make the remaining credentials much more valuable. It
is therefore critical to protect the authentication creden-
tials for the identity provider as well as the mechanism
used to establish the identity assertion between identity
provider and relying party. Towards that end, we explore
using TLS-OBC and channel-binding to harden a generic
federation system against attack.
PostKey API The ﬁrst step towards hardening a feder-
ation protocol is to provide a way for an identity provider
and relying party to communicate in a secure, MITM re-
sistant manner. We introduce a new browser API called
the PostKey API to facilitate this secure communica-
tion. This new API is conceptually very similar to the
PostMessage [11] communication mechanism that al-
lows distinct windows within the browser to send mes-
sages to each other using inter-process communication
certiﬁcation from the web browser. In step 2, an Autho-
rization Request is issued to the IdP. Since the request
is sent over the TLS channel authenticated with KIdP the
server associates the incoming request with the user U
associated with KIdP. The authorization request contains
the cross certiﬁcation that asserts that KRP and KIdP be-
long to the same user’s browser so upon user consent, the
IdP can respond (in step 3) with a single use Identity As-
sertion that asserts that KRP is also associated with user
U. The IdP’s iFrame then passes the Identity Assertion
to the RP’s frame where, in step 4, the Identity Assertion
is forwarded to the relying party’s server. The relying
party veriﬁes that the Identity Assertion was delivered
over a channel authenticated with KRP, has been prop-
erly signed by the IdP, and has not been used yet. If this
veriﬁcation succeeds the RP can now associate user U
with key KRP by setting a cookie in the user’s browser as
shown in step 5.
4.3 Protecting user authentication
We’ve largely considered the initial user-authentication
phase, when the user submits his credentials (e.g., user-
name/password) in return for an authenticated session, to
be out of scope for this paper. However, we now brieﬂy
outline how TLS-OBC can be leveraged in order to se-
cure this tricky phase of the authentication ﬂow.
As a promising direction where TLS-OBC can make a
signiﬁcant impact, we explore the ideas put forth by a re-
cent workshop paper by Czeskis et al. [8], where the au-
thors frame authentication in terms of protected and un-
protected login. They deﬁne unprotected login as an au-
thentication during which all of the submitted credentials
are user-supplied and are therefore vulnerable to phish-
ing attacks. For example, these types of logins occur
when users ﬁrst sign in from a new device or after having
cleared all browser state (i.e., cleared cookies). The au-
thors observe that to combat the threats to unprotected lo-
gin, many websites are moving towards protected login,
whereby user-supplied credentials are accompanied by
supplementary, “unphishable” credentials such as cook-
ies or other similar tokens. For example, websites may
set long-lived cookies for users the ﬁrst time they log in
from a new device (an unprotected login), which will not
be cleared when a user logs out or his session expires.
On subsequent logins, the user’s credentials (i.e., user-
name/password) will be accompanied by the previously
set cookie, allowing websites to have some conﬁdence
that the login is coming from a user that has already had
some interaction with the website rather than a phisher.
The authors argue that websites should move all possible
authentications to protected login, minimize unprotected
login, and then alert users when unprotected logins oc-
cur. The paper argues that this approach is meaningful
Figure 5: Simpliﬁed federation protocol authorization
ﬂow using PostKey and OBCs.
rather than the network. The goal of PostKey extends be-
yond a simple communication mechanism to encompass
the secure establishment of a “proof key” that commu-
nicates the public key of an OBC to a diﬀerent origin
within the browser by exposing a new browser window
function:
otherWindow.postKey(message, targetOrigin)
This postKey call works like the existing postMessage
call but additional cert and crossCert parameters are
added to the event received by the recipient window’s
message handler. The cert parameter contains a cer-
tiﬁcate that is signed by the receiver’s origin-bound key
and includes: the sender’s origin, the sender’s OBC pub-
lic key, the receiver’s origin, and an X509 extension
that includes a random nonce. The crossCert has the
sender and receiver’s roles reversed (i.e., it contains the
receiver’s key, signed by the sender’s key) and includes
the same random nonce as in cert.
These certiﬁcates form what is called a cross certiﬁca-
tion, where the recipient of the certiﬁcation can establish
that the sender’s public key is KS because KS has been
signed, by the browser, with the receiver’s private key
KR. Additionally, the caller’s public key cross-certiﬁes
the receiver’s public key to establish that both keys be-
long to the same browser.
It’s important to note that the sender does not get to
choose the keys used in this cross certiﬁcation process.
Instead, the browser selects the OBCs associated with
the origins of the sender and receiver and automatically
performs the cross certiﬁcation using the keys associated
with the found OBCs.
Putting it all together The combination of the PostKey
API and origin-bound certiﬁcates can be used to improve
upon several federation protocols.
Figure 5 shows the steps required to federate a user’s
identity in a generic federation protocol that had been
modiﬁed to work with the PostKey API and OBCs. In
step 1 the relying party issues a PostKey javascript re-
quest to the IdP’s iFrame and the IdP receives a cross
iFrame:https://idp.comBrowserwindow:https://rp.comCertidpCuserCertidpCertrp.postKey(https://idp.com)rp[K    ]     , [K   ]idpKrpKrpidphttps://rp.comCertrpKrpKidpAuthRequest{U, [K   ]    , [K   ]    }idprpKidpKrpIdentityAssertion {U, K  , nonce}KrpidpIdentityAssertion {U, K  , nonce}Krpidphttps://idp.comCuser@rp.com12345because phishers are not able to produce protected logins
and will be forced to initiate unprotected logins instead.
Given that unprotected logins should occur rarely for le-
gitimate users, alerting users during an unprotected login
will make it signiﬁcantly harder for password thieves to
phish for user credentials.
It’s important to note that websites can’t fully trust
protected logins because they are vulnerable to MITM
attacks. However, with TLS-OBC, websites can pro-
tect themselves by channel-binding the long-lived cookie
that enables the protected login. Combining TLS-
OBC with the protected login paradigm allows us to
build systems which are resilient to more types of at-
tacks. For example, when describing the attack in Fig-
ure 4, we mentioned that attackers could deliver the
user cookie, but that would alert the server to the pres-
ence of a MITM. We also mentioned that attackers could
drop the channel-bound cookie altogether and force the
user to re-authenticate, but that this attack was out of
scope. However, using TLS-OBC along with the pro-
tected/unprotected paradigm, if the attacker forced the
user to re-authenticate, the server could force an unpro-
tected login to be initiated and an alert would be sent to
the user, notifying him of a possible attack in progress.
Hence, channel-bound cookies along with TLS-OBC
would protect the user against this type of attack as well.
The careful reader will observe that protecting ﬁrst
logins from new devices (an initial unprotected login)
is diﬃcult since the device and server have no pre-
established trust. We are currently in the beginning
stages of building a system to handle this case and leave
further discussion as future work.
5
Implementation
In order to demonstrate the feasibility of TLS origin-
bound certiﬁcates for channel-binding HTTP cookies,
we implemented the extensions discussed in Section 3.
The changes made while implementing origin-bound
certiﬁcates span many disparate systems, but the major
modiﬁcations were made to OpenSSL, Mozilla’s Net-
work Security Services (used in Firefox and Chrome),
the Google TLS terminator,
and the open-source
Chromium browser.
5.1 TLS Extension Support
We added support for TLS origin-bound certiﬁcates to
OpenSSL and Mozilla’s Network Security Stack by im-
plementing the new TLS-OBC extensions, following the
appropriate guidelines [5]. We summarize each of these
changes below.
NSS Client Modiﬁcations Mozilla’s Network Se-
curity Stack (NSS) was modiﬁed to publish its ac-
ceptance of the TLS-OBC extension when issuing a
ClientHello message to a TLS endpoint. Upon receipt
of a ServerHello message that demonstrated that the
communicating TLS endpoint also understands and ac-
cepts the TLS-OBC extension, a new X509 certiﬁcate
is generated on-the-ﬂy by the browser for use over the
negotiated TLS channel. These NSS modiﬁcations re-
quired 108 modiﬁed or added lines across 6 ﬁles in the
NSS source code.
OpenSSL Server Modiﬁcations The OpenSSL TLS
server code was modiﬁed to publish its acceptance of
the TLS-OBC extension in its ServerHello message.
Furthermore, if during the TLS handshake the client and
server agree to use origin bound certiﬁcates, the normal
client certiﬁcate veriﬁcation is disabled and the OBC ver-
iﬁcation process is used instead.
The new veriﬁcation process attempts to establish that
the certiﬁcate delivered by the client is an OBC rather
than a traditional client authentication certiﬁcate. The
check is performed by conﬁrming that the certiﬁcate is
self-signed and checking for the presence of the X509
OBC extension. With these two constraints satisﬁed, the
certiﬁcate is attached to the TLS session for later use by
higher levels of the software stack.
An upstream patch of these changes is pending and
has preliminary support from members of the OpenSSL
community. The proposed patch requires 316 lines of
modiﬁcation to the OpenSSL source code where most
of the changes focus on the TLS handshake and client
certiﬁcate veriﬁcation submodules.
5.2 Browser Modiﬁcations
In addition to the NSS client modiﬁcations discussed
above, Chromium’s cookie storage infrastructure was
adapted to handle the creation and storage of TLS origin-
bound certiﬁcates. The modiﬁcations required to gen-
erate the OBCs resulted in a 712 line patch (across 8
ﬁles) to the Chromium source code. Storage of OBCs
in the existing Chromium cookie infrastructure required
an additional 1,164 lines added across 15 ﬁles. These
changes have been upstreamed as an experimental fea-
ture of Chromium since version 16.
6 Performance Evaluation
We have conducted extensive testing of our modiﬁca-
tions to TLS and have found them to perform well, even
at a signiﬁcant scale. We report on these results below.
6.1 Chromium TLS-OBC Performance
Experimental methodology
In order to demonstrate
that the performance impact of adding origin-bound