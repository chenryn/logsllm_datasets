Redundant marking also helps in dealing with packet
losses. For example, we can mark a particular address
with four different markers, each using a destination port
number that is encoded with 2-bits of redundancy iden-
tiﬁer and 14-bits of address information. In this case, we
examine the feedback for occurrences of these encoded
ports.
4.3.2 Time Series Marking
Time series marking can be used when the feedback is in
the form of a time series property. It is used in conjunc-
tion with other marking algorithms such as the uniform
intensity marking described next. In time series mark-
ing, each sub-block is marked within the time resolution
window of the feedback so that results from marking can
be reverse back to the corresponding sub-block.
USENIX Association
14th USENIX Security Symposium
215
4.3.3 Uniform Intensity Marking
In uniform-intensity marking, all addresses are marked
with the same intensity. For example, let’s assume that
we are marking a /16 address block that is known to con-
tain several sensors. We divide the original block into
16 smaller /20 sub-blocks. Then we mark each of these
sub-blocks using time-series marking, one sub-block per
time unit, marking each address with a single marker.
t
n
u
o
C
t
e
k
c
a
P
6
5
4
3
2
1
0
0
2
4
6
8
10
12
14
16
Time (Sub-block # + 1)
Figure 8: An Example of Uniform-Intensity Marking
Feedback
Figure 8 shows an ideal (no packet loss, and all other
conditions being good) feedback graph from the mark-
ing described above. In this ﬁgure, the vertical axis rep-
resents the packet count and the horizontal axis repre-
sents time. We see that there is a spike of height one at
time 4, which means that there is one sensor in sub-block
#3, since the packet count at time 4 is accumulated be-
tween time 3 and time 4, when sub-block #3 was being
marked. Similarly, there is a spike of height one at time
8 and height two at time 11, meaning there is one sensor
in sub-block #7 and two sensors in sub-block #10.
4.3.4 Radix-Intensity Marking
In radix-intensity marking, selected address bits are
translated into marking intensity, i.e., the number of
packets for each address. Let us consider the example
used in the uniform-intensity section above. We exe-
cute the same marking procedure, but mark the ﬁrst /21
block within a sub-block with 2 markers, and the second
/21 block with 3 markers (Figure 9). Table 1 shows the
possible location of sensors within a sub-block, and how
they are reﬂected in the feedback intensity.
Markers
/16 Target
address
block
/21 /21
. . .
#0
#1
#2
#15
/20 Sub-blocks
Figure 9: An Example of Radix-Intensity Marking
Sensor
Count
Sensor Location (Block #)
third
ﬁrst
sensor
sensor
second
sensor
Feedback
Intensity
0
1
2
3
—
0
1
0
0
1
0
0
0
1
—
—
—
0
1
1
0
0
1
1
—
—
—
—
—
—
0
1
1
1
0
2
3
4
5
6
6
7
8
9
Table 1: Single Bit (2 for 0 and 3 for 1) Radix-Intensity
Feedback for up to 3 sensors in a sub-block.
t
n
u
o
C
t
e
k
c
a
P
6
5
4
3
2
1
0
Radix Intensity
Single Intensity
0
2
4
6
8
10
12
14
16
Time (Sub-block # + 1)
Figure 10: An Example of Radix-Intensity Marking
Feedback
For this example, we further assume that there are no
more than two sensors in each sub-block. Figure 10
shows the ideal feedback from this marking with solid
lines. The feedback from the uniform-intensity marking
is also drawn for comparison in dotted lines. Looking at
the solid line, we notice a spike with height 2 at time 4
meaning that there is one sensor in the ﬁrst half of sub-
block #4. There is also a spike with height 3 at time 8
meaning that there is one sensor in the second half of
sub-block #7. Another spike spike with height 5 can be
seen at time 11 meaning that there are two sensors, one
in the ﬁrst and another in the second half of sub-block
#10.
Notice that with uniform-intensity marking, the feed-
back would have derived only the numbers of sensors in
each sub-block, while radix-intensity marking was able
to also derive information about the positions of these
sensors within each sub-block. For this example, the
radix-intensity marking derived an extra bit of address
information.
In radix-intensity marking, the assignment of inten-
sity to address bit patterns has to be designed carefully
to minimize the ambiguity during feedback translation.
The above example used intensities 2 and 3 for a single
bit. As shown in Table 1, this assignment allows unique
216
14th USENIX Security Symposium
USENIX Association
decoding of up to two sensors in a single sub-block, and
with a single exception, it allows unique decoding of up
to three sensors in a single sub-block (there is an am-
biguity for feedback intensity value of 6 which decodes
into two cases).
In practice, code assignment has to consider the effect
of packet loss, so the assignment becomes more compli-
cated. Another drawback of the radix-intensity marking
is that aggressive encoding introduces unusually large
spikes in the feedback. The number of address bits that
are encoded as intensity should be kept relatively small
so that the marking activity can retain its stealthiness.
4.3.5 Radix-Port Marking
When several ports are available for marking, a port pair
can be assigned to toggle an address bit off or on (0/1).
Multiple pairs can be used to encode multiple address
bits, but we need to be careful that traces of multiple
event groups do not interfere with each other.
4.3.6 Delayed Development Marking
This is yet another marking algorithm, that can be com-
bined with the other more fundamental marking algo-
rithms.
This method is especially useful when the feedback
is a graph that displays “Top-N” activity. In time-series
marking on this type of feedback, we have to be sure
that results of successful hits are noticeable in the feed-
back by using the appropriate marking intensity for each
address. However, since Top-N graphs show only fre-
quently captured events, it is often necessary to use high
intensities to make signiﬁcant changes.
Delayed development marking solves this problem by
deploying two separate phases of marking which we
call “exposure” phase and “development” phase. These
terms were taken from the classical silver-oxide pho-
tography in which a hidden image accumulated on a
medium by exposure to light is later developed to pro-
duce a visible image.
Our algorithm use markers instead of light. In the ex-
posure phase, marking is done with minimal intensity
markers, leaving hidden traces in the feedback. The in-
tensity for this phase is the minimal sensitivity level of
the feedback, and the duration of the phase is determined
from the retention time of the feedback. After the ex-
posure phase but within the retention time of the feed-
back, development marking is done with high intensity
markers. This will introduce a new event group into the
feedback, revealing all hidden traces. Of course, it is
necessary that the development marking hits the sensor
for successful development. Thus, it is desirable to have
several known addresses for successful marking using
this algorithm.
A variation of the algorithm exploits the inactivity pe-
riod of existing or recurring top-N event groups. In this
case, the explicit development phase is not necessary,
since the natural background activity will effectively de-
velop the hidden traces. An example of this exploit is
given in section 5.2.
4.3.7 Combining Algorithms
As noted already earlier, it is possible to create new algo-
rithms by combining or varying the algorithms we have
presented. For example, an algorithm that spans differ-
ent feedback types is also possible.
4.4 Designing A Marking Activity
An actual marking activity can be characterized by sev-
eral parameters. Some of these parameters are interre-
lated, so the process of designing a marking activity can-
not be ﬁxed. In the following, we describe the typical
process of designing a marking activity.
Target Range
First, we need to decide on the range, or the block
of addresses that we want to mark. The initial range
may be determined from social engineering, reasonable
guesses or a combination of both. For example, sen-
sors for a monitor run by a national CERT are likely to
be placed in the address assigned to that nation. With-
out any information, we essentially have to start with the
full /0 address space, except for the bogons, i.e. the un-
routable addresses ranges. Later markings can use the
results from preceding markings.
Marking Algorithm
The marking algorithm is basically determined by the
properties of the selected feedback. If the feedback is
in table form, then the address-encoded-port marking
would be a good candidate.
If the feedback is in the
form of a graph, time-series marking with one of the
intensity-based algorithms would be a decent candidate.
Variations of selected algorithms to exploit the space that
the feedback provides are also considered here.
Marker Design
The marker packet is designed next.
• Marker type
Protocol, source and destination port number are
determined from the requirements of the selected
algorithm and the feedback’s type sensitivity.
• Source address
The source IP address of marking packets may be
spoofed because we do not require a reply to them.
The only information we require is the data from
feedback reports which can obtained independently
of the marking packets. However, spoofed source
addresses may affect the stealthiness of the mark-
USENIX Association
14th USENIX Security Symposium
217
ing activity. If someone running the target monitor
were to examine the source addresses of packets
they capture, addresses belonging to Bogon (un-
routable) address space would certainly draw at-
tention. So, randomly generated source addresses
should be avoided. A list of non-Bogon addresses
can be generated by taking a snapshot of BGP rout-
ing table from a core Internet router. Another easy
way is to use the addresses of actual attackers ob-
tained by running a passive packet monitor.
The presence of a payload is also considered here
based on the sensor type. While most ﬁrewall
type sensors are sensitive to small packets including
TCP handshaking segments and payload-less UDP
datagrams, most IDS type sensors require a payload
that the IDS is sensitive to.
• Payload
Intensity
The intensity of a marking speciﬁes how many mark-
ers are sent to a single address, and is usually determined
from the resolution and the noise level of a feedback.
The selected marking algorithm may impose additional
constraints, and we may also need to take the stealthi-
ness into account.
Bandwidth
The bandwidth parameter depends on limiting factors
imposed by the availability of physical resources, ca-
pacity of bottleneck routers, or our stealthiness require-
ments. If a botnet of an appropriate size can be utilized,
the bandwidth is not a limiting parameter. Nevertheless,
we assume that we have some concrete bandwidth ﬁgure
here.
Velocity
The velocity of a marking is the speed with which
marker packets can be generated. The bandwidth cap on
the velocity can be calculated from the bandwidth pa-
rameter above and the marker size, but the actual veloc-
ity is also limited by the CPU speed of the host gener-
ating the markers. For example, with a naive generator
based on libnet [17], a 350 MHz Intel Celeron can
generate only 100 small markers per second, while the
same software on a 2.4 GHz Intel Pentium 4 can gener-
ate packets of the same size 15 times faster. Neverthe-
less, whichever smaller becomes the actual velocity.
Address Range Subdivision
The number of addresses that can be marked per unit
time is calculated from the velocity and the intensity.
This ﬁgure together with the feedback’s timing proper-
ties discussed in Section 4.2 determines the number of
addresses that can be marked in a time unit. This num-
ber also determines how a target range is sub-divided
into smaller sub-blocks.
At this point, if a derived sub-block size is too big
or to small, or not appropriate by some other rea-
son, then parameters already determined above should
be adjusted. As readers might have noted,
there is
a inter-relationships among bandwidth, intensity, sub-
block size and marking duration. Figure 11 is a chart
that shows this dependency for 64-byte markers, in a
form of bandwidth against duration for various sized ad-
dress blocks and selected intensity. In reality, these inter-
relating parameters are ought to be tweaked around us-
ing the chart like this one.
1e+08
1e+07
1e+06
1e+05
1e+04
1e+03
1e+02
1e+01
)
c
e
s
(
e