###  解题过程
关键代码如下
    // Look's like weak JavaScript auth script :)
    $(".c_submit").click(function(event) {
        event.preventDefault();
        var u = $("#cpass").val();
        var k = $("#cuser").val();
        var func = "x2Bx09x4Ax03x49x0Fx0Ex14x15x1Ax00x10x3Fx1Ax71x5Cx5Bx5Bx00x1Ax16x38x06x46x66x5Ax55x30x0Ax03x1Dx08x50x5Fx51x15x6Bx4Fx19x56x00x54x1Bx50x58x21x1Ax0Fx13x07x46x1Dx58x58x21x0Ex16x1Fx06x5Cx1Dx5Cx45x27x09x4Cx1Fx07x56x56x4Cx78x24x47x40x49x19x0Fx11x1Dx17x7Fx52x42x5Bx58x1Bx13x4Fx17x26x00x01x03x04x57x5Dx40x19x2Ex00x01x17x1Dx5Bx5Cx5Ax17x7Fx4Fx06x19x0Ax47x5Ex51x59x36x41x0Ex19x0Ax53x47x5Dx58x2Cx41x0Ax04x0Cx54x13x1Fx17x60x50x12x4Bx4Bx12x18x14x42x79x4Fx1Fx56x14x12x56x58x44x27x4Fx19x56x49x16x1Bx16x14x21x1Dx07x05x19x5Dx5Dx47x52x60x46x4Cx1Ex1Dx5Fx5Fx1Cx15x7Ex0Bx0Bx00x49x51x5Fx55x44x31x52x45x13x1Bx40x5Cx46x10x7Cx38x10x19x07x55x13x44x56x31x1Cx15x19x1Bx56x13x47x58x30x1Dx1Bx58x55x1Dx57x5Dx41x7Cx4Dx4Bx4Dx49x4F";
        buf = "";
        if(k.length == 9) {
            for(i = 0, j = 0; i Wrong password sorry.");
        }
    });
    function a(h) {
        if(h.length != 2) {
            h = "x30" + h;
        }
        return "x5cx78" + h;
    }
    function x(d) {
        if(d " + b[t]);
                            }
                        }
                    }
                }
            }
        }
        if (n === 9) {
            n = 32;
        }else{
            n++;
        }
    }
运行结果如下所示
由此，我们可以知道`document.`所对应的密钥为`Bobvi2347`。而xor加密是使用密钥循环进行加密的，因此无法直接判断密文开头所对应的密钥是否是`B`，我们需要进一步进行计算。  
根据计算结果可知，`document.`中的`d`所对应的密文的编码为`x26`，在密文中可找到对应的值
通过计算可知，`x26`前面的字符长度为90，刚好是9的倍数，也就是说循环加密到`d`的时候刚好使用了密钥的第一个字符进行加密，则`Bobvi2347`这个顺序是对的。  
将用户名改为该值，在`eval(buf);`处下断点，继续运行，可观察到buf如下
    "if(u == "XorIsCoolButNotUnbreakable") { if(document.location.href.indexOf("?p=") == -1) { document.location = document.location.href + "?p=" + u; } } else {  $("#cresponse").html("Wrong password sorry."); }"
由此拿到密码，提交拿到flag  
[Link](https://ringzer0team.com/challenges/46)
## WTF Lol!
###  预览
###  解题过程
输入密码，拦截点击事件，程序先断在了这块
    function btn_click(value) {
        try {
            if (check_password(document.getElementById('pwd').value)) {
                alert('That's the flag !');
                return;
            }
        } catch(e) {}
        alert('Nope !');
    }
跟进check_password方法
    function check_password(password) {
        var stack = "qwertyuiopasdfghjklzxcvbnm".split("");
        var tmp = {
            "t" : 9, "h" : 6, "e" : 5,
            "f" : 1, "l" : 2, "a" : 3, "g" : 4,
            "i" : 7, "s" : 8, 
            "j" : 10, "u" : 11, "m" : 12, "p" : 13,
            "b" : 14, "r" : 15, "o" : 16, "w" : 17, "n" : 18,
            "c" : 19, "d" : 20, "j" : 21, "k" : 22, "q" : 23,
            "v" : 24, "x" : 25, "z" : 26
        };
        var i = 2;
        var a1 = Number.prototype.valueOf;
        var a2 = Number.prototype.toString;
        var a3 = Array.prototype.valueOf;
        var a4 = Array.prototype.toString;
        var a5 = Object.prototype.valueOf;
        var a6 = Object.prototype.toString;
        function f1() { return stack[ i++ % stack.length ].charCodeAt(0); }
        function f2() { i += 3; return stack.pop(); }
        function f3() {
            for (k in this) {
                if (this.hasOwnProperty(k)) {
                    i += stack.indexOf(this[k][0]);
                    stack.push(this[k]);
                }
            }
            return String.fromCharCode(new Number(stack[ i % stack.length ].charCodeAt(0)));
        }
        Number.prototype.valueOf = Number.prototype.toString = f1;
        Array.prototype.valueOf  = Array.prototype.toString  = f2;
        Object.prototype.valueOf = Object.prototype.toString = f3;
        var a  = (tmp[ [] ] * tmp[ [] ] * 1337 + tmp[ "" + { "wtf": password[1] } ]) / (tmp[ "" + { "wtf": password[0] } ] - tmp[ [] ]);
        var b  = (tmp[ [] ] * tmp[ [] ] * 7331 + tmp[ "" + { "lol": "o" } ]) / (tmp[ "" + { "wtf": password[1] } ] - tmp[ [] ]);
        var c  = (tmp[ [] ] * tmp[ [] ] * 1111 + tmp[ "" + { "wtf": password[3] } ]) / (tmp[ "" + { "lol": password[2] } ] - tmp[ [] ]);
        var d  = (tmp[ [] ] * tmp[ [] ] * 3333 + tmp[ "" + { "wtf": "g" } ]) / (tmp[ "" + { "wtf": password[3] } ] - tmp[ [] ]);
        var e  = (tmp[ [] ] * tmp[ [] ] * 7777 + tmp[ "" + { "wtf": "a" } ]) / (tmp[ "" + { "wtf": password[7] } ] - tmp[ [] ]);
        var f  = (tmp[ [] ] * tmp[ [] ] * 2222 + tmp[ "" + { "wtf": password[7] } ]) / (tmp[ "" + { "lol": password[5] } ] - tmp[ [] ]);
        var g  = (tmp[ [] ] * tmp[ [] ] * 6666 + tmp[ "" + { "lol": password[4] } ]) / (tmp[ "" + { "wtf": password[6] } ] - tmp[ [] ]);
        var h  = (tmp[ [] ] * tmp[ [] ] * 1234 + tmp[ "" + { "wtf": "a" } ]) / (tmp[ "" + { "wtf": password[4] } ] - tmp[ [] ]);
        var ii = (tmp[ [] ] * tmp[ [] ] * 2345 + tmp[ "" + { "wtf": "h" } ]) / (tmp[ "" + { "wtf": password[9] } ] - tmp[ [] ]);
        var j  = (tmp[ [] ] * tmp[ [] ] * 3456 + tmp[ "" + { "wtf": password[9] } ]) / (tmp[ "" + { "lol": password[8] } ] - tmp[ [] ]);
        var kk = (tmp[ [] ] * tmp[ [] ] * 4567 + tmp[ "" + { "lol": password[11] } ]) / (tmp[ "" + { "wtf": password[10] } ] - tmp[ [] ]);
        var l  = (tmp[ [] ] * tmp[ [] ] * 9999 + tmp[ "" + { "wtf": "o" } ]) / (tmp[ "" + { "wtf": password[11] } ] - tmp[ [] ]);
        Number.prototype.valueOf   = a1;
        Number.prototype.toString  = a2;
        Array.prototype.valueOf    = a3;
        Array.prototype.toString   = a4;
        Object.prototype.valueOf   = a5;
        Object.prototype.toString  = a6;
        var m = a === b && b === c && c === d && d === e && e === f && f === g && g === h && h === ii && ii === j && j === kk && kk === l;
        var n = password[0] != password[1] && password[2] != password[3] && password[4] != password[5]  && password[6] != password[7]  && password[8] != password[9] && password[10] != password[11]
        return m && n;
    }
这道题替换了`Number Array Object`这几个对象类型自带的`valueOf
toString`方法，而开发者工具的调试正是使用了这些方法，因此在使用调试时查看变量值、设置断点、代码测试，都会导致其中关键值`i`的改变。  
而这道题又要求计算出一个值，使得其中的`a b c d e f g h ii j kk l`完全相等。  
但是在另一方面，我们注意到，在计算完毕之后，对象的方法又被还原回来了。因此我们可以将其计算部分的代码段看作黑盒，然后进行猜解，只要不动方法被改过的那部分代码就可以了。  
由于算力问题，爆破12位字符是不现实的，但是由于判断的时候，是先判断a===b，如果通过，则判断b===c，否则直接返回false，由此，我们可以进行逐位猜解，最大限度的减少算力浪费。  
测试代码如下。
    function check_password(password) {
        var stack = "qwertyuiopasdfghjklzxcvbnm".split("");
        var tmp = {
            "t" : 9, "h" : 6, "e" : 5,
            "f" : 1, "l" : 2, "a" : 3, "g" : 4,
            "i" : 7, "s" : 8, 
            "j" : 10, "u" : 11, "m" : 12, "p" : 13,
            "b" : 14, "r" : 15, "o" : 16, "w" : 17, "n" : 18,
            "c" : 19, "d" : 20, "j" : 21, "k" : 22, "q" : 23, 
            "v" : 24, "x" : 25, "z" : 26
        };
        var i = 2;