$ kubectl create -f service.yml
```
要查看我们的服务是否创建正确，我们可以执行`kubectl get services`命令:
![](img/3a612521-d5be-4c1e-942e-cf7b5adc9104.png)
我们还可以通过添加`--all-namespaces`开关来列出其他服务(包括`minikube`集群本身提供的服务，如果你好奇的话):
```
$ kubectl get services --all-namespaces
```
要查看特定服务的详细信息，我们使用`describe`命令。执行以下操作查看我们的`rest-example` Java 服务的详细信息:
```
$ kubectl describe service rest-example
```
在输出中，我们看到了最有用的服务属性，尤其是端点(我们的内部容器 IP 和端口，在本例中只有一个，因为我们有一个 Pod 在服务中运行)、服务内部端口和代理节点端口:
![](img/d38f36be-8b9f-44b4-abce-e5b431bc246b.png)
将所有设置保存在`.yaml`文件中非常方便。但是，有时需要以更动态的方式创建服务；例如在一些自动化流程中。在这种情况下，我们可以通过向`kubectl`命令本身提供所有参数和选项来手动创建服务，而不是先创建`.yaml`文件。但是，在此之前，您需要先创建部署，因为手动创建服务只是使用`kubectl`命令公开部署。毕竟，服务是一个公开的部署，事实上，它只是一组 Pods。这种暴露的例子，将导致服务创建，看起来和这个一样:
```
$ kubectl expose deployment rest-example--type="NodePort"  
```
# 创建部署
在创建部署之前，我们需要准备好 Docker 映像并发布到注册表中，例如 Docker Hub。当然，它也可以是您组织中托管的私有存储库。正如你从[第 7 章](07.html)*对库本内斯*的介绍中所记得的，一个吊舱中的每个 Docker 容器都有自己的形象。默认情况下，Pod 中的 kubectl 进程会尝试从指定的注册表中提取每个映像。您可以通过在部署描述符中为`imagePullPolicy`属性指定一个值来更改此行为。它可以具有以下值:
*   `IfNotPresent`:使用此设置，只有当映像不在本地主机上时，才会从注册表中提取
*   `Never`:有了这个，kubelet 将只使用本地图片
创建部署时用值`IfNotPresent`设置`imagePullPolicy`是有用的；否则，Minikube 会在本地主机上寻找映像之前尝试下载映像。
Kubernetes 对映像使用与 Docker 本身相同的语法，包括私有注册表和标签。
请务必在映像名称中提供标签。否则，Kubernetes 在存储库中查找您的映像时将使用最新的标签，就像 Docker 一样。
在使用本地 Kubernetes 集群时，使用本地构建的映像有点棘手。Minikube 在单独的虚拟机中运行，因此它不会看到您在机器上使用 Docker 在本地构建的映像。有一个解决办法。您可以执行以下命令:
```
$ eval $(minikube docker-env)  
```
前面的命令实际上将利用运行在`minikube`上的 Docker 守护程序，并在 Minikube 的 Docker 上构建您的映像。这样，本地构建的映像将可用于 Minikube，而无需从外部注册表中提取。这不是很方便，将 Docker 映像推送到`remote`注册表当然更容易。让我们把剩下的例子图片放入`DockerHub`注册表。
1.  首先，我们需要登录:
```
$ docker login  
```
2.  然后，我们将使用`docker tag`命令标记我们的映像(并不是说您需要提供自己的 DockerHub 用户名而不是`$DOCKER_HUB_USER`):
```
$ docker tag 54529c0ebed7 $DOCKER_HUB_USER/rest-example  
```
3.  最后一步是使用`docker push`命令将我们的映像推送到 Docker Hub:
```
$ docker push $DOCKER_HUB_USER/rest-example
```
4.  现在我们在注册表中有了一个可用的映像，我们需要一个部署清单。又是一个`.yaml`文件，看起来可以和这个一样:
```
 apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rest-example
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: rest-example
        tier: backend
    spec:
      containers:
      - name: rest-example
        image: jotka/rest-example
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
        ports:
        - containerPort: 8080
```
要使用`kubectl`在集群上创建此部署，您需要执行以下命令，该命令与创建服务时完全相同，只是文件名不同:
```
$ kubectl create -f deployment.yml
```
![](img/3e1a8f0f-d280-473c-923d-c29bc170235d.png)
您可以通过以下方式查看部署属性:
```
$ kubectl describe deployment rest-service
```
![](img/6ba65cab-1419-42ff-b57e-f2803eaab13a.png)
如您所见，已经创建了一个 Pod 以及一个复制集和默认的滚动更新策略。您也可以通过以下方式查看 Pods:
```
$ kubectl get pods
```
`get pods`命令的输出将给出部署中运行的 Pods 的名称。这一点在后面会很重要，因为如果您想与特定的 Pod 进行交互，您需要知道它的名称:
![](img/e5869b5d-d5be-4493-bd1f-25c2f8c96f90.png)
作为`.yaml`文件中部署描述符的替代，您可以使用带有选项的`kubectl run`命令从命令行创建部署，如下例所示:
```
$ kubectl run rest-example --image=jotka/rest-example --replicas=1 --port=8080 --labels="app:rest-example;tier:backend" --expose       
```
让我们用一些例子在表格中总结一下与创建资源和获取资源信息相关的`kubectl`命令:
| **示例命令** | **表示** |
| `kubectl create -f ./service.yaml` | 创建资源 |
| `kubectl create -f ./service.yaml -f ./deployment.yaml` | 从多个文件创建 |
| `kubectl create -f ./dir` | 在指定目录的所有清单文件中创建资源 |
| `kubectl create -f https://sampleUrl` | 从网址创建资源 |
| `kubectl run nginx --image=nginx` | 启动 nginx 的单个实例 |
| `Kubectl get pods` | 获取`pod`的文档 |
| `kubectl get pods --selector=app=rest-example` | 列出所有符合指定标签的豆荚`selector` |
| `kubectl explain pods` | 显示所有 Pods 的详细信息 |
| `kubectl get services` | 列出所有创建的服务 |
| `kubectl explain service` | 显示指定服务的详细信息 |
| `kubectl explain services` | 显示所有已创建服务的详细信息 |
| `kubectl get deployments` | 列出所有创建的部署 |
| `kubectl get deployment` | 显示指定服务的详细信息 |
| `kubectl explain deployment` | 显示指定部署的详细信息 |
| `kubectl explain deployments` | 显示所有已创建部署的详细信息 |
| `kubectl get nodes` | 列出所有集群节点 |
| `kubectl explain node` | 显示指定节点的详细信息 |
```
 Calling the service  
```
正如我们在`kubectl`描述服务`rest-example`命令输出中看到的，我们的`rest-example service`可以通过端口`8080`和域名`rest-example`在集群内访问。在我们的例子中，端点的完整网址是`http://rest-example:8080`。但是，为了能够从外部执行服务，我们使用了`NodePort`映射，我们知道它被赋予了端口`31141`。我们需要调用的服务是集群的 IP。我们可以使用以下命令获得它:
```
$ minikube ip  
```
有一个快捷方式可以了解外部可访问的服务网址和端口号。我们可以使用`minikube service`命令来告诉我们确切的服务地址:
```
$ minikube service rest-example --url  
```
前一个命令的输出将是带有映射端口号的服务 URL。如果您跳过`--url`开关，`minikube`将使用默认的网络浏览器打开服务的网址。这有时很方便。
有了端点的完整 URL，我们可以使用任何`HTTP`客户端访问服务，例如`curl`:
![](img/eed23d6c-8ff3-45bc-97cd-137ab1ffaac6.png)
当服务运行时，应用日志通常可以帮助您了解集群内部发生的情况。日志对于调试问题和监控集群活动特别有用。让我们看看如何访问我们的容器日志。
# 与容器交互并查看日志
大多数现代应用都有某种日志机制。例如，我们的 Java REST 服务使用 slf4j 从 REST 控制器输出日志。对于容器化的应用来说，最简单的日志记录方法就是写入标准输出和标准错误流。Kubernetes 支持开箱即用。
假设我们已经使用浏览器或 curl 向我们的新 web 服务发送了请求，我们现在应该能够看到一些日志。在此之前，我们需要有一个在部署期间自动创建的 Pods 名称。要获取 Pod 的名称，请使用`kubectl get pods`命令。之后，您可以显示指定 Pod 的日志:
```
$ kubectl logs rest-example-3660361385-gkzb8 
```
正如您在下面的截图中看到的，我们将获得一个著名的 Spring Boot 横幅，它来自一个在 Pod 中运行的服务:
![](img/d85a2b09-4d8c-4ba2-b259-044bb69f11f9.png)
查看日志并不是我们对特定 Pod 唯一能做的事情。类似于 Docker(实际上一个 Pod 正在运行 Docker)，我们可以通过使用`kubectl exec`命令与一个容器进行交互。例如，要获取运行容器的外壳:
```
$ kubectl exec -it rest-example-3660361385-gkzb8 -- /bin/bash
```
前面的命令将您的 shell 控制台附加到运行容器中的 shell 中，您可以在其中与它进行交互，例如列出进程，如下面的屏幕截图所示:
![](img/808f1553-c619-4344-a770-cb4a25ecd4c4.png)