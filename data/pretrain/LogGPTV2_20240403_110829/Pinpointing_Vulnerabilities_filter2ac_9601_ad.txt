NGINX is a popular open-source web server.
It powers some
of the most popular web sites on the Internet, such as Netﬂix,
Hulu, CloudFlare, and GitHub [49]. Vulnerabilities in NGINX
consequently have very high impacts.
Figure 5 shows the CVE-2013-2028 vulnerability in NGINX (ver-
sion 1.3.9 to 1.4.0). This ﬂaw lies in NGINX’s faulty handling
of chunked transfer-encoding, a standard feature of HTTP 1.1. This
feature allows data to be sent in a series of chunks. It replaces the
regular Content-Length HTTP header with the “Transfer-Encoding:
chunked” header. Because it allows data to be transferred piecemeal
without knowing their total length, the chunked encoding is partic-
ularly useful for dynamically generated data. In this encoding, the
length of each chunk is preﬁxed to the actual data in the chunk. A
vulnerable NGINX server parses the chunk length and stores it in
r->headers_in.content_length_n. The length is then com-
pared to the buﬀer size in an eﬀort to prevent buﬀer overﬂows.
Unfortunately, there is a signedness error at line 9. Speciﬁcally,
content_length_n is a signed integer.
If the attacker makes it
negative, ngx_min returns it without any change. The length is
then casted to an unsigned integer (size). This vulnerability could
be exploited to overﬂow the buﬀer on the stack (buffer deﬁned at
line 7) at line 10.
Interestingly, this vulnerability cannot be exploited as is on the
FreeBSD system because the FreeBSD kernel prevents system calls
like recv from accepting unreasonably-large size parameters. This
is essentially an ad-hoc syscall parameter validation.
In spite of
that, it is a rather eﬀective defense against similar attacks without
requiring any change to user programs. With this protection, the
buﬀer overﬂow at line 10 is foiled by the kernel, i.e., the kernel
has located this vulnerability. As such, we can omit the data-
ﬂow analysis and directly start other analyses. Ravel reports the
signedness error at line 9.
If we remove the kernel’s protection,
this vulnerability becomes exploitable. Note that even though the
size parameter to recv is really large, the attack can control how
much data to be returned by recv because recv returns the existing
data cached in the socket without waiting for the full requested size.
In this experiment, we launched a return-oriented programming
(ROP [54]) attack against the server, similar to Blind ROP [7].
Exceptions caused by the attack allowed Ravel to detect the attack
and identify the buﬀer overﬂow at line 10. Ravel further traced it
back to the signedness error at line 9 based on the conﬂicts in the
1 /* ssl/ d1_both .c */
2 i n t dtls1_process_heartbeat (SSL *s)
3 {
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
unsigned char *p=&s->s3 ->rrec.data [0], *pl;
unsigned short hbtype ;
unsigned i n t payload ;
unsigned i n t padding = 16;
...
/* Read type and payload length first */
hbtype = *p++;
n2s(p, payload );
...
pl = p;
i f ( hbtype == TLS1_HB_REQUEST ) {
unsigned char *buffer , *bp;
...
i n t r;
...
buffer = OPENSSL_malloc (1 + 2 + payload +
padding );
bp = buffer ;
/* Enter response type , length and copy
payload */
*bp++ = TLS1_HB_RESPONSE ;
s2n(payload , bp);
memcpy (bp , pl , payload );
bp += payload ;
/* Random padding */
RAND_pseudo_bytes (bp , padding );
r = dtls1_write_bytes (s, TLS1_RT_HEARTBEAT ,
buffer , 3 + payload + padding );
...
}
...
20
21
22
23
24
25
26
27
28
29
30
31
32 }
Figure 6: Code sketch of CVE-2014-0160 (aka. Heartbleed). The
attacker controls payload. Memcpy may copy a large amount of ex-
tra data to buffer, and send it back through dtls1_write_bytes.
hinted signs of size: unsigned at line 10 (deduced from recv), and
signed at line 9. In particular, ngx_min is compiled into a signed
comparison followed by a conditional move instruction (cmovg) .
3.1.2 CVE-2014-0160 (Heartbleed)
CVE-2014-0160, commonly known as Heartbleed, is an informa-
tion leak in the popular OpenSSL library. OpenSSL is a ubiquitous
open-source TLS/SSL and cryptography library.
It is shipped in
most Unix-like systems (e.g., Linux and BSDs) and available for
other systems. It is also embedded in lots of devices like routers.
The impacts of this ﬂaw is serious and far-reaching.
Heartbleed is a ﬂaw in OpenSSL’s handling of the heart-beat
extension, which essentially is an echo protocol (similar to ping in
IP) to ensure the liveliness of an SSL connection. Heartbleed allows
an attacker to steal the victim’s memory up to 64KB at a time. It
has been demonstrated that critical data, such as the private key for
TLS/SSL, could be leaked by this ﬂaw. Figure 6 shows the code
sketch of this ﬂaw. Speciﬁcally, the payload ﬁeld of the heartbeat
request packet speciﬁes how many bytes of the request data should
be sent back to the requester. This ﬁeld is extracted from the request
packet at line 11. A response buﬀer is allocated at line 19 and the
response is assembled in it by line 22 to 27. Particularly, line 24
copies the data from the request packet to the buﬀer. Finally, the
response is sent to the requester at line 28. This bug is caused
by the missing check that the request payload has more bytes than
payload. Because the payload ﬁeld is 16 bits, at most 65, 535
bytes of the data can be exﬁltrated each time.
In our experiment, we ran OpenSSL 1.0.1 with NGINX to serve
HTTPS requests. We kept exploiting this bug with diﬀerent com-
binations of requests in order to obtain the server’s private key.
7
Program Name
BitBlaster
CGC_Planet_Markup_Language_Parser
Pinpointed?
Vulnerability Type
Null Pointer Derefernece
Heap Overﬂow
NULL Pointer Dereference
StackOverﬂow
Heap Overﬂow
Integer Overﬂow
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Diary_Parser
simple_integer_calculator
CGC_Board
CGC_Symbol_Viewer_CSV
CGC_Video_Format_Parser_and_Viewer Heap Overﬂow
Heap Overﬂow
Integer Overﬂow
NULL Pointer Dereference
Out-of-bounds Read
Null Pointer Dereference
Out-of-bounds Read
Stack Overﬂow
Heap Overﬂow
Integer Overﬂow
Untrusted Pointer Dereference
Use After Free
Heap Overﬂow
Arbitrary Format String
NULL Pointer Dereference
Double Free
Stack Overﬂow
Kaprica_Script_Interpreter
electronictrading
Enslavednode_chat
KTY_Pretty_Printer
Table 1: Summary of the evaluation results on a number of DARPA CGC programs.
Moreover, the server was conﬁgured to automatically restart if it
crashed due to invalid memory reads caused by the attack. After
catching an exception, Ravel replayed the attack and discovered ex-
tra def-use relations from other instructions to memcpy at line 24.
We concluded that the vulnerability lied at line 24 because those re-
lations had a common use. Ravel further checked for integer errors.
None was found.
3.1.3 Experiments with CGC Challenges
To evaluate Ravel’s eﬀectiveness on a more diverse set of vul-
nerabilities, we used the sample challenges from DARPA’s Cyber
Grand Challenge (CGC) [18], a competition to design better Cyber
Reasoning Systems that can automatically identify software ﬂaws
and scan for aﬀected hosts in the network. Challenges in CGC
are designed to represent a variety of software vulnerabilities. In-
stead of contrived simple test cases, they approximate real software
vulnerabilities with enough complexity, ideal for stressing vulner-
ability discovery and defense systems. Each challenge comes with
a set of proof-of-vulnerability (POV) inputs that can trigger these
vulnerabilities. The record and replay of CGC programs are sim-
ple since they only use a very small number of system calls.
In
our experiments, we used Ravel to pinpoint these vulnerabilities.
The results are summarized in Table 1.
It shows that Ravel can
help developers locate a variety of types of vulnerabilities. In the
following, we give details for one of the challenges (CNMP).
The CNMP (Chuck Norris Management Protocol) challenge mod-
els a message management system, in which users can add, list,
count, and show messages (jokes, to be more speciﬁc). The related
vulnerable functions are listed in Figure 7. insert_joke inserts a
message into the system’s database. If the message’s length exceeds
a threshold (line 7), the system logs this message using syslog (line
10) and returns an error code. Inside the syslog function, its argu-
ment format is passed to vsnprintf (line 21), a string-formatting
function. Since joke_str is controlled by the attacker, a format-
string vulnerability can be triggered by passing a crafted string.
In this experiment, we added a long message with format spec-
iﬁers to the system database. The program crashed due to its
vsnprintf implementation. Ravel replayed the program and re-
ported that over-read happened inside function vsnprintf, where
extra def-use relations were introduced. Since this function takes
a format string as its input, it is easy to ﬁgure out the vulnerability
by looking at the recorded function arguments (a format string).
A developer can ﬁx this vulnerability by using “%s” as the format
string in Line 10.
1 // add joke to joke_db .
2 i n t insert_joke ( jokedb_struct *jokedb , const char *
joke_str ) {
// return error (-1) if jokedb is already full.
i f (jokedb ->count >= MAX_JOKES ) {
return -1;
// return error (-2) if joke_str is too long.
} e l s e
i f ( strlen ( joke_str ) >=
MAX_JOKE_STRING_LEN - 1) {
i f ( LOGLEVEL >= LOG_INFO ) {
syslog (LOG_ERROR , "Joke was too long