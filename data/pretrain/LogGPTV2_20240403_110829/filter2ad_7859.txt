# 【技术分享】针对某APP的漏洞挖掘（抓包+逆向=发现重大漏洞）

##### 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容表达及含义以原文为准。

---

**作者**: [三思之旅](http://bobao.360.cn/member/contribute?uid=1630860495)  
**稿费**: 300 RMB （欢迎投稿！）  
**投稿方式**: 发送邮件至 linwei#360.cn 或登录网页版在线投稿

---

## 引言
我从事渗透测试（主要方向是Web安全）已有数月，现在算是初窥门径。在学习漏洞挖掘的过程中，除了阅读一些经典书籍外，我还特别希望看到高手们详细讲解如何发现漏洞的过程，例如他们是如何选择目标、从哪里入手以及遇到问题时如何解决。然而，网络上更多的是知识性的介绍，而较少叙述实际操作过程（也可能是我的搜索技巧有待提高）。尽管乌云平台上有一些大神会分享具体的挖洞思路，但大部分内容仍停留在“有图有真相”的阶段。对于经验丰富的安全研究人员来说，这或许足够了，但对于新手而言，往往会觉得一头雾水。因此，我想通过分享最近的一次漏洞挖掘经历来抛砖引玉，鼓励大家积极分享自己的挖洞经验。
注：作为一名有职业道德的白帽黑客，本文旨在分享方法与过程，细节部分已做模糊处理，避免泄露敏感信息。

## 寻找目标
本次漏洞挖掘的目标是我常用的一款手机应用（以下简称“某APP”）。选择该应用作为研究对象其实是个偶然的机会。因为我之前主要专注于Web安全领域，并未涉足过移动应用程序的安全分析。有一天，在阅读一篇关于Burp Suite使用技巧的文章时，我了解到可以通过Burp对手机APP进行抓包分析。于是决定亲自实践一番。首先，在Burp的Proxy设置中将监听地址配置为所有接口。接着确保手机与电脑处于同一局域网内，并将手机代理服务器设为计算机IP地址及端口8080。至此，便可以利用Burp捕获来自手机的所有HTTP请求了。

## 初步探索
启动某APP并执行常规操作后，Burp成功记录下了大量HTTP数据包。经过初步筛选，一条GET请求引起了我的注意：
```
http://www.example.com/path/get_some_data.jsp?id=1234567&param1=value1&param2=value2
```
直觉告诉我这里可能存在权限提升漏洞。通过浏览器访问上述URL，果然能够直接查看到用户数据。尝试更改`id`参数值后，结果依旧相同，均能获取到其他用户的信息。由此确认该应用存在越权访问漏洞。虽然此漏洞导致的数据泄露并不包含姓名、电话号码或身份证号等敏感信息，但依然值得进一步调查。

## 深入挖掘
随后我开始仔细检查登录过程中产生的流量。登录请求仅包含一个名为`params`的POST参数，其值经过了URL编码。解码后显示这是一个JSON格式字符串，其中最值得注意的是`userId`和`body`字段，推测它们分别对应用户名和密码。通过多次尝试不同组合验证了我的猜测——相同的用户名对应相同的`userId`值，不同的密码则产生不同的`body`值。进一步研究表明，这两个字段均采用了十六进制表示法且长度固定（`userId`为32位，`body`为128位），表明原始数据已被加密。考虑到MD5算法的可能性，但我很快排除了这一假设，因为即使加上盐值也无法匹配。

此时，由于关键信息被加密保护，深入研究遇到了障碍。于是转而关注服务器响应内容。令人惊讶的是，无论登录是否成功，返回的数据包大小几乎一致，并且包含大量重复字符。显然，这里隐藏着潜在风险。

## 反编译突破
鉴于直接破解加密无望，我决定采取反编译手段来揭示背后的逻辑。考虑到iOS版本难度较大，最终选择了Android平台作为突破口。经过简单学习后，成功获得了混淆后的源代码。尽管阅读起来较为困难，但仍从中发现了重要线索——加密算法采用AES标准，密钥长度为16字节。更令人震惊的是，开发人员竟然将密钥部分硬编码到了程序内部！

利用这些信息编写了一个Python脚本来实现AES加解密功能，从而恢复出原始的`userId`（即真实用户名）以及经过哈希处理后的密码。进一步审查源代码揭示了完整的密码处理流程——包括添加随机盐值在内的完整MD5散列生成步骤。

## 意外收获
掌握了足够的背景知识后，我能够构造伪造的数据包模拟正常登录行为。更重要的是，在解密服务器响应时意外发现了更大规模的信息泄露现象——无论身份验证是否成功，都会返回用户的个人信息如全名、联系电话甚至正确的密码哈希值，使得账户安全形同虚设。

## 结论
整个漏洞挖掘工作现已告一段落。回顾整个过程，我认为最重要的是：

- 多观察思考并勇于实践；
- 结合Web安全技术和软件逆向工程技能可以带来意想不到的效果；
- 不应盲目依赖暴力攻击手段解决问题。

希望这篇文章能够激发更多同行的兴趣，共同探讨和分享各自独特的漏洞挖掘策略。毕竟，有时候灵感来自于他人成功的案例。