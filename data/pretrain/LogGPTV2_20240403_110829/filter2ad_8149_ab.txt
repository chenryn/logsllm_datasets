DB，所以编写payload时候可以模拟请求获取下载文件读取文件然后查找是否有关键字StandardJet DB。这就是漏洞编写的原理。
编写完之后进行运行是否成功。如图 3-3-2-4 所示：
图 3-3-2-4 运行测试图
这样证明我们的payload文件编写正确了。还需要批量扫描50个网站，查看扫描结果，对验证成功的网站人工验证是否成功，修正并反复这一过程，来提高payload的准确率。
Payload文件编写流程如图所示：找到漏洞来源网站分析漏洞原因-本地搭建环境或网络上找漏洞环境进行测试漏洞写出payload，编写payload文件，用工具验证是否成功，用一千个网站跑这一payload文件验证是否有误差，如有误差重新编写继续上述过程。
##### 3.4 HTTP请求
Payload的原理是通过工具模拟发送HTTP请求，包括GET请求，POST请求，PUT请求来获取网页源代码，匹配特定字符，来验证漏洞。
HTTP是计算机与网络通信的协议，会给服务器一种浏览器访问的错觉，也就是在请求时候，模拟浏览器请求机制，加上浏览器的请求头[14]。如图 3-4-1 所示：
图 3-4-1 HTTP请求流程图
当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息，HTTP请求信息由3部分组成：请求方法URI协议/版本，请求头(Request
Header)， 请求正文。以下程序为验证漏洞是否存在，模拟请求：
##### 3.5 多线程
多线程通过划分时间来实现，即把时间分成一个个片，每片处理一个线程，所有的线程循环处理，而多处理器可以同时实现多线程[15]。多线程是为了把多项任务同步完成，来提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。简单来说，一个项目要在一天完成总共10个人同时进行，把一个项目细分为两个过程，第一过程划分为相似的10份小任务，都做完之后，又把第二过程分为相似的10份分配小任务作同时进行。如图
3-5-1 所示：
图3-5-1 多线程流程图
下面是使用多线程的实例：
#### 4 系统测试与运行
##### 4.1 测试环境
环境要求：Python 2.7.8 Python依赖包： pocsuite==1.2.6 python-docx==0.7.4 python-memcached==1.57 redis==2.10.5 requests==2.8.1 chardet==2.3.0
如图 4-1所示：
图4-1测试环境图
##### 4.2 工具运行参数
    sage: pocbase [options]
    optional arguments:
      -h,--help         Show help message and exit
     --version          Show program'sversion number and exit
    target:
      -u URL,--url URL  Target URL (e.g."http://www.targetsite.com/")
      -f URLFILE,--file URLFILE   Scan multiple targetsgiven in a textual file
      -rPOCFILE          Load POC from a file(e.g. "_0001_cms_sql_inj.py") or directory (e.g."modules/")
    mode:
     --verify           Run poc withverify mode
     --attack           Run poc withattack mode
    request:
      --timeoutTIMEOUT  Seconds to wait before timeoutconnection (default 30)
      --delayDELAY      Delay between two request ofone thread
    params:
      --extra-argumentsEXTRA_ARGUMENTS   Extra arguments (e.g."{username: '***', password: '***'}")
    optimization:
      --threadsTHREADS  Max number of concurrent HTTP(s)requests (default 1)
##### 4.3 功能测试
###### 4.3.1 多CMS漏洞对应多网站扫描
启动脚本，入口文件pocbase.py,参数r指向要扫描的文件夹路径，参数f为本次扫描的url文件路径，参数threads为本次扫描开启的线程数。如图
4-3-1-1所示：
图4-3-1-1 启动脚本扫描图
本次扫描只扫描SQL注入 扫描url文本url1.txt 本次线程数100，扫描结果如图 4-3-1-2所示：
图4-3-1-2 实际扫描结果图
本次扫描2419次 存在漏洞23个 黄色的是漏洞结果生成文件地址
扫描时间用时1分钟 扫描网站数42个 sql注入CMS漏洞数60个 本次扫描准确率100%
验证成功的SQL注入，如图4-3-1-3所示：
图 4-3-1-3 验证漏洞结果图
其中，编写的payload中，是ader_duo经过ascii码转换之后的字符，在获取源代码的匹配ader_duo关键字。匹配成功率为100%。因为payload里访问连接中并不存在。
    CHAR%2897%29%20%2b%20CHAR%28100%29%20%2b%20CHAR%28101%29%20%2b%20CHAR%28114%29%20%2b%20CHAR%2895%29%20%2b%20CHAR%28100%29%20%2b%20CHAR%28117%29%20%2b%20CHAR%28111%29%20%2b%20CHAR%2899%29
###### 4.3.2 多CMS漏洞对应一网站扫描
启动脚本如图 4-3-2-1所示：
图4-3-2-1 启动脚本扫描图
本次扫描只扫描sql注入 扫描url网站 http://www.xxx.cn 本次线程数150。如图4-3-2-2所示：
图4-3-2-2 启动脚本扫描图
本次扫描66次 存在漏洞1个 黄色的是漏洞结果生成文件地址
扫描时间用时6秒 网站数1个 SQL注入CMS漏洞数66个本次扫描准确率100%
本次验证成功的，data构造时候需要经过base64加密，可直接显示出authkey。如图4-3-2-3所示：
图4-3-2-3 漏洞结果图
###### 4.3.3 一CMS漏洞对应多网站扫描
启动脚本如图4-3-3-1所示：
图4-3-3-1 启动脚本扫描图
本次扫描只扫描IIS解析漏洞 扫描url文件11.txt 本次线程数150。如图 4-3-3-2所示：
图4-3-3-2 实际扫描结果图
本次扫描5次 存在漏洞4个 黄色的是漏洞结果生成文件地址
扫描时间用时3秒 扫描网站数5个 检测CMS漏洞数1个 本次扫描准确率100%
###### 4.3.4 一CMS漏洞对应一网站扫描
启动脚本如图4-3-4-1 所示：
图4-3-4-1 启动脚本扫描图
本次扫描只扫描IIS解析漏洞 扫描url网站 http://www.luohezx.xxx.cn 本次线程数未选择默认为1如图 4-3-4-2所示：
图4-3-4-2 实际扫描结果图
本次扫描1次 存在漏洞1个 黄色的是漏洞结果生成文件地址
扫描时间用时2秒 扫描网站数1个 检测CMS漏洞数1个 本次扫描准确率100%
本次验证成功的，访问连接证明漏洞存在。如图4-3-4-3所示：
图4-3-4-3 漏洞扫描结果图
###### 4.3.5 漏洞生成日志
扫描结束生成日志，显示日志文件地址在命令行里以黄色字体展示
日志内容如下（xxx.xxxxx.xxx.cn存在SQL注入漏洞为例）：
文件名为：[szb.zhengzhou.xxx.cn].doc
文件内容如图 4-3-5-1所示：
图4-3-5-1 漏洞生成日志图
#### 5 测试总结
能够实现工具扫描的完整流程，从扫描开启，灵活的扫描方式到多线程加快扫描速度，最后显示总扫描数量和存在漏洞的数量，将扫描结果写入日志文件，并输出日志文件地址结束整个扫描过程。该扫描工具能成功运行，并且延展性是比较强，编写CMS漏洞payload文件有一定规则，整合新的漏洞进去对整个工具的运行不会造成影响。
* * *