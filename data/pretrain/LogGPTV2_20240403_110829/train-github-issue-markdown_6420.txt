### Describe your issue.
I've noticed an inconsistency in the behavior of `scipy.sparse` objects when
using the built-in python operators (" _",` "@", "/") to multiply or divide by
a vector. The "_ " operator produces a dot product, as opposed to the expected
element-wise multiplication (lines 7-9). The "/" operator, on the other hand,
performs the expected element-wise operation with broadcasting (lines 11-12),
which may be more confusing since it is not consistent with the "*" operator.
I have not tested this behavior across all `scipy.sparse` matrix types, just
the `diags` used below. I'm happy to submit a PR if this is just a feature
that is not yet implemented.
### Reproducing Code Example
    [1]>>> import numpy as np
    [2]>>> from scipy.sparse import diags
    [3]>>> D = diags([1, 1], [-1, 0], shape=(6, 5))
    [4]>>> D.toarray()
    [4]===
    array([[1., 0., 0., 0., 0.],
           [1., 1., 0., 0., 0.],
           [0., 1., 1., 0., 0.],
           [0., 0., 1., 1., 0.],
           [0., 0., 0., 1., 1.],
           [0., 0., 0., 0., 1.]])
    [5]>>> x = 1 + np.arange(D.shape[1])
    [6]>>> x
    [6]=== array([1, 2, 3, 4, 5])
    [7]>>> D * x
    [7]=== array([1., 3., 5., 7., 9., 5.])
    [8]>>> D @ x
    [8]=== array([1., 3., 5., 7., 9., 5.])
    [9]>>> D.toarray() * x
    [9]===
    array([[1., 0., 0., 0., 0.],
           [1., 2., 0., 0., 0.],
           [0., 2., 3., 0., 0.],
           [0., 0., 3., 4., 0.],
           [0., 0., 0., 4., 5.],
           [0., 0., 0., 0., 5.]])
    [10]>>> D.toarray() @ x
    [10]=== array([1., 3., 5., 7., 9., 5.])
    [11]>>> D / x
    [11]===
    matrix([[1.    , 0.    , 0.    , 0.    , 0.    ],
            [1.    , 0.5   , 0.    , 0.    , 0.    ],
            [0.    , 0.5   , 0.3333, 0.    , 0.    ],
            [0.    , 0.    , 0.3333, 0.25  , 0.    ],
            [0.    , 0.    , 0.    , 0.25  , 0.2   ],
            [0.    , 0.    , 0.    , 0.    , 0.2   ]])
    [12]>>> D.toarray() / x
    [12]===
    array([[1.    , 0.    , 0.    , 0.    , 0.    ],
           [1.    , 0.5   , 0.    , 0.    , 0.    ],
           [0.    , 0.5   , 0.3333, 0.    , 0.    ],
           [0.    , 0.    , 0.3333, 0.25  , 0.    ],
           [0.    , 0.    , 0.    , 0.25  , 0.2   ],
           [0.    , 0.    , 0.    , 0.    , 0.2   ]])
### Error message
    No error message.
### SciPy/NumPy/Python version information
[1]>>> import sys, scipy, numpy; print(scipy. **version** , numpy. **version**
, sys.version_info) 1.7.1 1.20.3 sys.version_info(major=3, minor=9, micro=6,
releaselevel='final', serial=0)