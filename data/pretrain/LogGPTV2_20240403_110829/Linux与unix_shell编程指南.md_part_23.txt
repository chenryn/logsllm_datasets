第17章 条件测试
下载
17.6 小结
本章涉及e x p r和t e s t基本功能，讲到了怎样进行文件状态测试和字符串赋值，使用其他的
条件表达式如if then else和c a s e可以进行更广范围的测试及对测试结果采取一些动作。
加入java编程群：524621833
下载
第18章 控制流结构
所有功能脚本必须有能力进行判断，也必须有能力基于一定条件处理相关命令。本章讲
述这方面的功能，在脚本中创建和应用控制结构。
本章内容有：
• 退出状态。
• while、f o r和until loops循环。
• if then else语句。
• 脚本中动作。
• 菜单。
18.1 退出状态
在书写正确脚本前，大概讲一下退出状态。任何命令进行时都将返回一个退出状态。如
果要观察其退出状态，使用最后状态命令：
$ echo $?
主要有4种退出状态。前面已经讲到了两种，即最后命令退出状态$ ?和控制次序命令（$ $、
| |）。其余两种是处理s h e l l脚本或s h e l l退出及相应退出状态或函数返回码。在第 1 9章讲到函数
时，也将提到其返回码。
要退出当前进程，s h e l l提供命令e x i t，一般格式为：
exit n
其中，n为一数字。
如果只在命令提示符下键入e x i t，假定没有在当前状态创建另一个s h e l l，将退出当前s h e l l。
如果在脚本中键入e x i t，s h e l l将试图（通常是这样）返回上一个命令返回值。有许多退出脚本
值，但其中相对于脚本和一般系统命令最重要的有两种，即：
退出状态0 退出成功，无错误。
退出状态1 退出失败，某处有错误。
可以在s h e l l脚本中加入自己的退出状态（它将退出脚本）。本书鼓励这样做，因为另一个
s h e l l脚本或返回函数可能要从s h e l l脚本中抽取退出脚本。另外，相信加入脚本本身的退出脚
本值是一种好的编程习惯。
如果愿意，用户可以在一个用户输入错误后或一个不可覆盖错误后或正常地处理结束后
退出脚本。
注意 从现在起，本书所有脚本都将加入注释行。注释行将解释脚本具体含义，帮助用户
理解脚本。可以在任何地方加入注释行，因为其本身被解释器忽略。注释行应以#开头。
18.2 控制结构
几乎所有的脚本里都有某种流控制结构，很少有例外。流控制是什么？假定有一个脚本
加入java编程群：524621833
161
第18章 控制流结构
下载
包含下列几个命令：
上述脚本问题出在哪里？如果目录创建失败或目录创建成功文件拷贝失败，如何处理？
这里需要从不同的目录中拷贝不同的文件。必须在命令执行前或最后的命令退出前决定处理
方法。s h e l l会提供一系列命令声明语句等补救措施来帮助你在命令成功或失败时，或需要处
理一个命令清单时采取正确的动作。
这些命令语句大概分两类：
循环和流控制。
18.2.1 流控制
i f、t h e n、e l s e语句提供条件测试。测试可以基于各种条件。例如文件的权限、长度、数
值或字符串的比较。这些测试返回值或者为真（ 0），或者为假（1）。基于此结果，可以进行
相关操作。在讲到条件测试时已经涉及了一些测试语法。
c a s e语句允许匹配模式、单词或值。一旦模式或值匹配，就可以基于这个匹配条件作其他
声明。
18.2.2 循环
循环或跳转是一系列命令的重复执行过程，本书提到了 3种循环语句：
for 循环 每次处理依次列表内信息，直至循环耗尽。
Until 循环 此循环语句不常使用，u n t i l循环直至条件为真。条件部分在循环末尾部分。
While 循环 w h i l e循环当条件为真时，循环执行，条件部分在循环头。
流控制语句的任何循环均可嵌套使用，例如可以在一个 f o r循环中嵌入另一个f o r循环。
现在开始讲解循环和控制流，并举一些脚本实例。
从现在起，脚本中e c h o语句使用L I N U X或B S D版本，也就是说使用e c h o方法echo -e -n，
意即从e c h o结尾中下一行执行命令。应用于U N I X（系统V和B S D）的统一的e c h o命令参阅1 9
章s h e l l函数。
18.3 if then else语句
i f语句测试条件，测试条件返回真（ 0）或假（1）后，可相应执行一系列语句。 i f语句结
构对错误检查非常有用。其格式为：
if 条件1
then 命令1
elif 条件2
then 命令2
else 命令3
加入java编程群：524621833
162
第四部分 基础s h e l l编程
下载
f i
让我们来具体讲解i f语句的各部分功能。
If 条件1 如果条件1为真
Then 那么
命令1 执行命令1
elif 条件2 如果条件1不成立
then 那么
命令2 执行命令2
else 如果条件1，2均不成立
命令3 那么执行命令3
fi 完成
i f语句必须以单词f i终止。在i f语句中漏写f i是最一般的错误。我自己有时也是这样。
e l i f和e l s e为可选项，如果语句中没有否则部分，那么就不需要 e l i f和e l s e部分。I f语句可以
有许多e l i f部分。最常用的i f语句是if then fi结构。
下面看一些例子。
18.3.1 简单的if语句
最普通的i f语句是：
i f条件
then 命令
f i
使用i f语句时，必须将t h e n部分放在新行，否则会产生错误。如果要不分行，必须使用命
令分隔符。本书其余部分将采取这种形式。现在简单 i f语句变为：
if 条件；t h e n
命令
f i
注意，语句可以不这样缩排，但建议这样做，因为可以增强脚本的清晰程度。在条件流
下采取命令操作更方便。下面的例子测试1 0是否小于1 2，此条件当然为真。因为条件为真，i f
语句内部继续执行，这里只有一个简单的 e c h o命令。如果条件为假，脚本退出，因为此语句
无e l s e部分。
18.3.2 变量值测试
通过测试设置为接受用户输入的变量可以测知用户是否输入信息。下面的例子中测试用
加入java编程群：524621833
163
第18章 控制流结构
下载
户键入r e t u r n键后变量n a m e是否包含任何信息。
18.3.3 grep输出检查
不必拘泥于变量或数值测试，也可以测知系统命令是否成功返回。对 g r e p使用i f语句找出
g r e p是否成功返回信息。下面的例子中 g r e p用于查看D a v e是否在数据文件d a t a . f i l e中，注意
‘D a v e \ >’用于精确匹配。
上面的例子中，g r e p输出定向到系统垃圾堆。如果匹配成功，g r e p返回0，将g r e p嵌入i f语
句；如果g r e p成功返回，i f部分为真。
18.3.4 用变量测试grep输出
正像前面看到的，可以用 g r e p作字符串操作。下面的脚本中，用户输入一个名字列表，
g r e p在变量中查找，要求其包含人名P e t e r。
以下是对应输入名称的输出信息。
加入java编程群：524621833
164
第四部分 基础s h e l l编程
下载
18.3.5 文件拷贝输出检查
下面测试文件拷贝是否正常，如果 c p命令并没有拷贝文件m y f i l e到m y f i l e . b a k，则打印错
误信息。注意错误信息中`basename $0`打印脚本名。
如果脚本错误退出，一个好习惯是显示脚本名并将之定向到标准错误中。用户应该知道
产生错误的脚本名。
注意，文件可能没找到，系统也产生本身的错误信息，这类错误信息可能与输出混在一
起。既然已经显示系统错误信息获知脚本失败，就没必要显示两次。要去除系统产生的错误
和系统输出，只需简单的将标准错误和输出重定向即可。修改脚本为： >/dev/null 2>&1。
脚本运行时，所有输出包括错误重定向至系统垃圾堆。
18.3.6 当前目录测试
当运行一些管理脚本时，可能要在根目录下运行它，特别是移动某种全局文件或进行权
限改变时。一个简单的测试可以获知是否运行在根目录下。下面脚本中变量 D I R E C TO RY使用
当前目录的命令替换操作，然后此变量值与 " / "字符串比较（/为根目录）。如果变量值与字符
串不等，则用户退出脚本，退出状态为1意味错误信息产生。
加入java编程群：524621833
165
第18章 控制流结构
下载
18.3.7 文件权限测试
可以用i f语句测试文件权限，下面简单测试文件t e s t . t x t是否被设置到变量L O G N A M E。
18.3.8 测试传递到脚本中的参数
i f语句可用来测试传入脚本中参数的个数。使用特定变量 $ #，表示调用参数的个数。可以
测试所需参数个数与调用参数个数是否相等。
以下测试确保脚本有三个参数。如果没有，则返回一个可用信息到标准错误，然后代码
退出并显示退出状态。如果参数数目等于3，则显示所有参数。
如果只传入两个参数，则显示一可用信息，然后脚本退出。
这次传入三个参数。
18.3.9 决定脚本是否为交互模式
有时需要知道脚本运行是交互模式（终端模式）还是非交互模式（ c r o n或a t）。脚本也许
加入java编程群：524621833
166
第四部分 基础s h e l l编程
下载
需要这个信息以决定从哪里取得输入以及输出到哪里，使用 t e s t命令并带有- t选项很容易确认
这一点。如果t e s t返回值为1，则为交互模式。
18.3.10 简单的if else语句
下一个i f语句有可能是使用最广泛的：
if 条件
t h e n
命令1
e l s e
命令2
f i
使用i f语句的e l s e部分可在条件测试为假时采取适当动作。
18.3.11 变量设置测试
下面的例子测试环境变量E D I TO R是否已设置。如果E D I TO R变量为空，将此信息通知用
户。如果已设置，在屏幕上显示编辑类型。
18.3.12 检测运行脚本的用户
下面例子中，环境变量用于测试条件，即L O G N A M E是否包含r o o t值。这类语句是加在脚
本开头作为一安全性准则的普遍方法。当然L O G N A M E可用于测试任何有效用户。
如果变量不等r o o t，返回信息到标准错误输出即屏幕，也就是通知用户不是 r o o t，脚本然
后退出，并带有错误值1。
如果字符串r o o t等于L O G N A M E变量，e l s e部分后面语句开始执行。
实际上，脚本会继续进行正常的任务处理，这些语句在 f i后面，因为所有非r o o t用户在脚
本的前面测试部分已经被剔出掉了。
加入java编程群：524621833
167
第18章 控制流结构
下载
18.3.13 将脚本参数传入系统命令
可以向脚本传递位置参数，然后测试变量。这里，如果用户在脚本名字后键入目录名，