### 第17章 条件测试

#### 17.6 小结
本章介绍了`expr`和`test`命令的基本功能，包括如何进行文件状态测试和字符串赋值。此外，还讨论了其他条件表达式，如`if-then-else`和`case`语句，这些可以用于更广泛的测试，并根据测试结果执行相应的操作。

### 第18章 控制流结构

所有功能脚本都必须具备判断能力，并能基于一定条件处理相关命令。本章将介绍如何在脚本中创建和应用控制结构。

#### 本章内容包括：
- 退出状态
- `while`、`for`和`until`循环
- `if-then-else`语句
- 脚本中的动作
- 菜单

#### 18.1 退出状态
在编写正确的脚本之前，了解退出状态是必要的。任何命令执行时都会返回一个退出状态。要查看最近命令的退出状态，可以使用以下命令：

```bash
$ echo $?
```

主要有四种退出状态：
1. 最后命令的退出状态 `$?`
2. 控制顺序命令（`&&` 和 `||`）
3. 处理 shell 脚本或 shell 退出及相应的退出状态
4. 函数返回码（将在第19章中详细介绍）

要退出当前进程，shell 提供了 `exit` 命令，其一般格式为：

```bash
exit n
```

其中，`n` 是一个数字。如果只输入 `exit`，且没有在当前状态下创建另一个 shell，则会退出当前 shell。在脚本中，`exit` 命令通常返回上一个命令的返回值。两种重要的退出状态是：

- 退出状态 `0`：表示成功，无错误。
- 退出状态 `1`：表示失败，存在错误。

在 shell 脚本中加入自定义的退出状态是一种好的编程习惯，因为这有助于其他脚本或函数从当前脚本中获取退出状态。用户可以在出现输入错误、不可恢复的错误或正常处理结束后退出脚本。

**注意**：从现在起，本书的所有脚本都将包含注释行。注释行以 `#` 开头，解释脚本的具体含义，帮助用户理解脚本。注释行本身被解释器忽略。

#### 18.2 控制结构
几乎所有的脚本都包含某种形式的流控制结构。流控制允许你在命令成功或失败时，或需要处理一系列命令时采取适当的行动。常见的控制结构包括：

- **循环**：如 `for`、`while` 和 `until` 循环。
- **流控制**：如 `if-then-else` 和 `case` 语句。

##### 18.2.1 流控制
- **`if-then-else` 语句**：提供条件测试，测试可以基于文件权限、长度、数值或字符串比较。这些测试返回真（`0`）或假（`1`），并据此执行相应操作。
- **`case` 语句**：允许匹配模式、单词或值。一旦匹配成功，就可以基于此条件执行其他操作。

##### 18.2.2 循环
- **`for` 循环**：每次处理列表中的一个元素，直到列表耗尽。
- **`until` 循环**：直到条件为真时停止循环，条件部分在循环末尾。
- **`while` 循环**：当条件为真时继续循环，条件部分在循环开头。

任何流控制语句都可以嵌套使用，例如在一个 `for` 循环中嵌入另一个 `for` 循环。

#### 18.3 `if-then-else` 语句
`if` 语句用于测试条件，如果条件为真（`0`）或假（`1`），则执行相应的命令。`if` 语句对错误检查非常有用，其基本格式如下：

```bash
if 条件
then
    命令1
elif 条件2
then
    命令2
else
    命令3
fi
```

**示例**：
- **简单的 `if` 语句**：测试条件是否为真，如果是，则执行命令。
- **变量值测试**：测试用户输入的变量是否包含信息。
- **`grep` 输出检查**：测试 `grep` 命令是否成功返回信息。
- **文件拷贝输出检查**：测试文件拷贝是否成功，如果失败则打印错误信息。
- **当前目录测试**：测试脚本是否在根目录下运行。
- **文件权限测试**：测试文件权限设置。
- **测试传递到脚本中的参数**：确保脚本接收到正确数量的参数。
- **决定脚本是否为交互模式**：测试脚本是否在终端模式下运行。
- **简单的 `if-else` 语句**：在条件为假时执行相应的操作。
- **变量设置测试**：测试环境变量是否已设置。
- **检测运行脚本的用户**：测试脚本是否由特定用户运行。
- **将脚本参数传入系统命令**：向脚本传递位置参数，并在系统命令中使用它们。

通过这些示例，你将更好地理解如何在脚本中使用 `if-then-else` 语句来实现各种控制逻辑。