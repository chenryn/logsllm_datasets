for left  C { 
++MO L 
return true
else {
high--
---
## Page 634
解题思路
要根据函数的 Id 有序地返回每个函数的独占时间。
函数的独占时间定义是在该方法中花费的时间，调用其他函数花费的时间不算该函数的独占时间。你需
0 从0时刻开始运行。"00"表示函数0 在0时刻结束。
日志是具有以下格式的字符串：function_id：start_or_end：timestamp。例如："O:start:0" 表示函数
从 0到n-1，函数可能会递归调用或者被其他函数调用。
给出一个非抢占单线程CPU的n个函数运行日志，找到函数的独占时间。每个函数都有一个唯一的Id,
题目大意
Note:
·利用栈记录每一个开始了但是未完成的任务，完成以后任务就 pop一个。
2. Two functions won't start or end at the same time.
1. 1 <= n <= 100
spends 4 units of total time executing.
So function 0 spends 2 + 1 = 3 units of total time executing, and function 
end of time 6, thus executing for l unit of time.
Function 0 is running again at the beginning of time 6, and also ends at the
ends at time
Now function 1 starts at the beginning of time 2, executes 4 units of time and
and reaches the end of time 1.
Function O starts at the beginning of time O, then it executes 2 units of time
Explanation:
Output:[3,4] 
logs = ["0:start:0","1:start:2","1:end:5","0:end:6"] 
n=2
Input:
Functions will always log when they exit.
0
5
start
2
3
4
5
1end
9
0 end
---
## Page 635
代码
·注意题目中关于任务时长的定义，例如，start 7，end 7，这个任务执行了1秒而不是0秒
"start" && a[1] == "end") {
[]log{}
func exclusiveTime(n int, logs []string) []int {
type log struct {
res, lastLog, stack := make([]int, n), log{id: -l, order: "", time: O},
import （
package leetcode
for i := O; i < len(logs); i++ {
time 
order string
"strings'
"strconv'
return res
Y
lastlog = log{id: id, order: a[1], time: time}
} else{ 
if a[l] == "start" { 
 } o =i (yeis)ual  ues == []e  .pua == uapuo-boasl !
id，
 stack = stack[:len(stack)-1]
 stack = append(stack, log{id: id, order: a[1], time: time})
res[stack[len(stack)-l].id] += time - lastLog.time - 1 
res[id] += time - lastLog.time
h
} .pua, == [t]e  .pua == uapuo:bosel 
if a[1] == "end" { 
res[lastlog.id] += time - lastlog.time
int
res[lastLog.id]++
- := strconv.Atoi(a[o]]
int 
= "start" && a[1] == "start") Il (lastLog.order ==
":")
---
## Page 636
代码
解题思路
按层序从上到下遍历一颗树，计算每一层的平均值。
题目大意
The range of node's value is in the range of 32-bit signed integer.
Note:
Example 1:
an array. 
Given a non-empty binary tree, return the average value of the nodes on each level in the form of
题目
637. Average of Levels in Binary Tree
package leetcode
·第102 题和第107题都是按层序遍历的。
●用一个队列即可实现。
2 is l1. Hence return [3, 14.5, 11].
* Definition for a binary tree node.
The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level
Explanation:
Output: [3,14.5，11]
Input:
type TreeNode struct { 
3
20
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 637
given, where you could make optimal use of the special offers.
You are given the each item's price, a set of special offers, and the number we need to buy for
kinds of items with a sale price.
In LeetCode Store, there are some kinds of items to sell. Each item has a price.
题目
638. Shopping Offers
func averageofLevels(root *TreeNode) []float64 {
if root == nil {
*/
return res
for len(queue) != 0 {
curNum, nextLevelNum, res, count, sum := l, O, []float64{}, 1,
queue = append(queue, root) 
queue := []*TreeNode{} 
 return []float64{0}
if curNum == 0 { 
curNum, count, nextLevelNum, sum = nextLevelNum, nextLevelNum, O, 0
res = append(res, float64(sum) /float64(count))
queue = queue[1:]
if node.Right != nil {
if node.Left != nil {
node := queue[0] 
sum += node.Val
curNum--
 nextLevelNum++ 
 queue = append(queue, node.Right)
nextLevelNum++ 
queue = append(queue, node.Left)
O
---
## Page 638
例子 1:
别表示内含的其他种类物品的数量。任意大礼包可无限次购买。
最低花费。每个大礼包的由一个数组中的一组数据描述，最后一个数字代表大礼包的价格，其他数字分
现给定每个物品的价格，每个大礼包包含物品的清单，以及待购物品清单。请输出确切完成待购清单的
一组物品。
在LeetCode 商店中，
题目大意
Note:
Example 2: 
Example 1: 
You could use any of special offers as many times as you want.
could get if you buy this offer.
you need to pay for this special offer, other numbers represents how many specific items you
Each special offer is represented in the form of an array, the last number represents the price 
 3. You are not allowed to buy more items than you want, even if that would lower the overall 
7
1. There are at most 6 kinds of items, 100 special offers.
You cannot add more items, though only $9 for 2A ,2B and 1c.
#1), and $3 for 1B, $4 for 1c.
o ads)  pue  o t ed eu no os ‘ pue a7'  nq o paau no
The price of A is $2, and $3 for B, $4 for C. 
Explanation:
Output: 11 
Input: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]
In special offer 1, you can pay $5 for 3A and OB
respectively.
There are two kinds of items, A and B. Their prices are $2 and $5 
Explanation:
Output: 14 
Input: [2,5], [[3,0,5],[1,2,10]], [3,2]
 price.
 For each item, you need to buy at most 6 of them.
，有许多在售的物品。然而，也有一些大礼包，每个大礼包以优惠的价格捆绑销售
---
## Page 639
代码
解题思路
说明：
例子2:
func shoppingoffers(price []int, special [][]int, needs []int) int {
·给出3个数组，3个数组分别代表的意义是在售的商品价格，多个礼包以及礼包内每个商品的数量
你不可以购买超出待购清单的物品，尽管购买大礼包2更加便宜。
你需要买1A，2B和1C，所以你付了￥4买了1A和1B（大礼包1），
你可以用￥4购买1A和1B，也可以用￥9购买2A，2B和1C。
输入：[2,3,4]， [[1,1,0,4],[2,2,1,9]]， [1,2,1]
你需要购买3个A和2个B，
大礼包2，你可以以￥10的价格购买1A和2B。
大礼包1，你可以以￥5的价格购买3A和0B。
有A和B两种物品，价格分别为￥2和¥5。
输出：14
输入：[2,5]，[[3,0,5],[1,2,10]]，[3,2]
·你不可以购买超出待购清单的物品，即使更便宜。
解释：
解释：
dfsshoppingoffers(price, special, needs, O, &res)
res := -1 
已经超过清单数量了，那这种情况需要立即返回，当前这种购买方式不合题意。
包。这里包含2种情况，一种是当前商品已经满足清单个数了，不需要再买了；还有一种情况是
品，即使价格便宜，也不行。例如可以买 n个礼包A，但是最终商品数量超过了清单上的商品，
这一题需要注意的剪枝情况：是否需要购买礼包。题目中要求了，
Shopping(price，special，needs），其中 price 和 special 为题目中所述的物品的单价
这一题可以用 DFS 暴力解题，也可以用 DP。笔者这题先用 DFS 来解答。设当前搜索到的状态为
和总价，购物清单上需要购买每个商品的数量。问购买清单上的所有商品所需的最低花费。
每种物品，你最多只需要购买6个。
最多6种物品，
B，C的价格分别为￥2，￥3，￥4.
种购买方式是不行的。所以需要先判断当前递归中，满足 need 和 price 条件的，能否使用礼
况遍历完以后，可以返回出最小花费。
了礼包优惠，那么递归到下一层
公
买规则，第一种，选礼包里面的第一个优惠购买，第二种，不选当前礼包优惠，选下一个优惠进行
和捆绑销售的大礼包，而 needs 为当前需要的每种物品的数量。针对于每个商品，可以有 3 种购
买，第三种，不使用优惠，
L
100种大礼包。
所以你付了￥10购买了1A和2B（大礼包2），以及￥4购买2A。
直接购买。这样就对应了 3 种 DFS 的方向。具体见代码。如果选择
层，need 需要对应减少礼包里面的数量，最终金额累加。当所有情
以及￥3购买1B，
，不能购买超过清单上数量的商
￥4购买1C。
这
---
## Page 640
 Example 1:
 of an array.
find the number occurs twice and then find the number that is missing. Return them in the form
 Given an array nums representing the data status of this set after the error. Your task is to firstly
of one number and loss of another number.
of the numbers in the set got duplicated to another number in the set, which results in repetition
The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one
题目
645. Set Mismatch
res)
*int）{
func dfsshoppingoffers(price []int, special [][]int, needs []int, pay int, res
 dfsshoppingoffers(price, special[1:], needs, pay, res)
 dfsshoppingoffers(price, special[1:］, newNeeds, pay+special[o][len(price)],
dfsshoppingoffers(price, special, newNeeds, pay+special[o][len(price)], res)
copy(newNeeds, needs)
newNeeds := make([]int, len(needs))
if len(special) == O ll noNeeds {
for -, need := range needs {
//剪枝
noNeeds := true
for i， n := range newNeeds {
return res
for i, p := range price { 
if need < (
return
if need != O { 
pay += (p * needs[i]]
*res = pay
 noNeeds = false
 return
0
---
## Page 641
代码
解题思路
注意：
S 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形
的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。给定一个数组 nums 代表了集合
集合 S 包含从1到 n 的整数。不幸的是，因为数据错误，
题目大意
Note:
式返回。
·给出一个数组，数组里面装的是1-n 的数字，由于错误导致有一个数字变成了另外一个数字，要求
·给定数组的长度范围是[2,10000]。
 2. The given array's numbers won't have any order.
1. The given array size will in the range [2, 10000].
func findErrorNums(nums []int) []int {
package leetcode
Output:[2,3]
Input: nums = [1,2,2,4] 
return res
for -, n := range nums { 
m,res := make([]int, 
for i := range m {
哪个数字缺少了。
找出重复的一个数字和正确的数字。这一题是简单题，根据下标比对就可以找到哪个数字重复了，
给定的数组是无序的。
if m[i] == 0 { 
} else {
if m[n-1] == 0 { 
 m[n-1] = 1
res[1] =i + 1
res[o] =
break
n
len(nums))，make([]int,2)
导致集合里面某一个元素复制了成了集合里面
---