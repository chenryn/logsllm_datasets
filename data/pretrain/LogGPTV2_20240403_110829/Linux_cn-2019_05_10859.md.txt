---
author: Moshe Zadka
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6577
date: '2019-05-15 22:55:00'
editorchoice: false
excerpt: 在我们这个包含了 7 个 PyPI 库的系列文章中学习解决常见的 Python 问题的方法。
fromurl: https://opensource.com/article/19/5/python-cython
id: 10859
islctt: true
largepic: /data/attachment/album/201905/15/225506fnn2mz6l3u122n70.jpg
permalink: /article-10859-1.html
pic: /data/attachment/album/201905/15/225506fnn2mz6l3u122n70.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 10864
reviewer: wxy
selector: lujun9972
summary: 在我们这个包含了 7 个 PyPI 库的系列文章中学习解决常见的 Python 问题的方法。
tags:
- Python
- Cython
thumb: false
title: 使用 Cython 为 Python 编写更快的 C 扩展
titlepic: true
translator: geekpi
updated: '2019-05-15 22:55:00'
---
> 
> 在我们这个包含了 7 个 PyPI 库的系列文章中学习解决常见的 Python 问题的方法。
> 
> 
> 
![](/data/attachment/album/201905/15/225506fnn2mz6l3u122n70.jpg)
Python 是当今使用最多的[流行编程语言](https://opensource.com/article/18/5/numbers-python-community-trends)之一，因为：它是开源的，它有广泛的用途（例如 Web 编程、业务应用、游戏、科学编程等等），它有一个充满活力和专注的社区支持它。这个社区可以让我们在 [Python Package Index](https://pypi.org/)（PyPI）中有如此庞大、多样化的软件包，用以扩展和改进 Python 并解决不可避免的问题。
在本系列中，我们将介绍七个可以帮助你解决常见 Python 问题的 PyPI 库。首先是 [Cython](https://pypi.org/project/Cython/)，一个简化 Python 编写 C 扩展的语言。
### Cython
使用 Python 很有趣，但有时，用它编写的程序可能很慢。所有的运行时动态调度会带来很大的代价：有时它比用 C 或 Rust 等系统语言编写的等效代码慢 10 倍。
将代码迁移到一种全新的语言可能会在成本和可靠性方面付出巨大代价：所有的手工重写工作都将不可避免地引入错误。我们可以两者兼得么？
为了练习一下优化，我们需要一些慢代码。有什么比斐波那契数列的意外指数实现更慢？
```
def fib(n):
  if n >> import pyximport; pyximport.install()
>>> import fib
>>> fib.fib(36)
```
只使用 Cython 而不*修改*代码，这个算法在我笔记本上花费的时间减少到大约 2.5 秒。几乎无需任何努力，这几乎减少了 50％ 的运行时间。当然，得到了一个不错的成果。
加把劲，我们可以让它变得更快。
```
cpdef int fib(int n):
  if n 
作者：[Moshe Zadka](https://opensource.com/users/moshez/users/moshez/users/foundjem/users/jugmac00) 选题：[lujun9972](https://github.com/lujun9972) 译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出