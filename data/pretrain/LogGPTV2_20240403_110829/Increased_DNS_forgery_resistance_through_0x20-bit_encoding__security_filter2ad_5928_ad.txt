(d) Domain Depths vs. Other
Figure 7: (a) Correlation plots of query lengths against the number of 0x20-available characters. (b) Domain depth vs 0x20 charac-
ters. Since most high-value user sights (e.g., banks) are only 3LDs, the decline in 0x20-characters in deeper domain depths may not
be as signiﬁcant. (c) Query length and digits. (d) Domain depth vs other other characters.
(a) CDF of 0x20 Characters in Trace
(b) Histogram of 0x20 Character Counts
Figure 8: (a) CDF of number of 0x20 characters in domain names, observed in the passive DNS trace. (b) Histogram of the number
of 0x20 characters.
Type
Mismatch Mismatch pct. Domain scanned
.com TLD
.net TLD
15451
4437
0.327%
0.204%
4786993
2168352
Table 2: Authority servers preserving 0x20 encoding, by TLD
Thus, over 99.7% of all DNS servers we studied could support
our DNS-0x20 encoding scheme without changing their code base.
Those that don’t support it appear inconsistent in their “ﬂattening”
of queries. We therefore deem that 0x20 is not a radical departure
from existing protocols, and very likely to be adopted. We will
of course test this view in our IETF standards submission, which
seeks to codify what authority servers appear to already do.
6. RELATED WORK
Our proposal ﬁts into the larger debate about how to better secure
DNS systems. In [26], the authors consider how transitive trust (via
insecure secondaries) provides another potential avenue for attack-
ing DNS servers. Our work, in contrast, proposes a precise model
for characterizing the risk to a DNS server, and is restricted to poi-
soning attacks, rather than attacks on secondaries.
Some proposed standards RFCs have considered improving DNS
security. For example, TSIG [33] or SIG(0) [2], and TKEY [3]
all seek to improve message integrity. TSIG and SIG(0) use keys
between servers to verify messages. These techniques, while ef-
fective against forgery attacks, have proved difﬁcult to deploy, be-
cause of the need for key pairing between servers, and their strict
time synchronization requirements. TKEY solves the key distribu-
tion problem, but has considerable computational costs that may
be leveraged in a DDoS attack on the DNS server. DNS-0x20, by
contrast, is extremely light weight, and requires no coordination be-
tween pairs of DNS communicators. But unlike TSIG, SIG(0) and
TKEY, DNS-0x20 does not provide strong support against DNS
forgery. Instead, DNS-0x20 raises the bar.
A recent proposed IETF standard called “Domain Name Sys-
tem (DNS) Cookies” is related to our approach [1]. Like our ap-
proach, DNS Cookies attempt to provide weak, yet practical DNS
transactional protection, but creating an OPT RR option. The DNS
cookie is essentially an HMAC of the requestor’s IP, and transac-
tion. While still lightweight compared to other DNS transaction
protection systems, e.g., TSIG, DNS Cookies do require substan-
tially more implementation. Speciﬁcally, it requires DNS initiators
and responders make code changes to handle the DNS cookies. In
comparison, DNS-0x20 is even lighter weight, and requires only
implementation on a single recursive resolver to work.
A recent IETF draft on DNS forgery resilience discusses many
aspects of DNS poisoning [4]. We recommend the IETF draft as
an excellent overview of DNS poisoning, and practical counter-
measures.
DNS poisoning motivated the work in [37], where the authors
proposed DoX, a peer-to-peer DNS replacement. Their approach
requires the creation of veriﬁcation channels, using a P2P system.
In contrast, our system uses an existing channel in the working
DNS system. Similarly DoX requires a peer system to improve
DNS security. Our approach can be implemented by a single recur-
sive server today, and immediately improves the integrity of mes-
sages to authority servers.
We believe that the work most related to ours is found outside
of the DNS ﬁeld. TCP SYN Cookies were ﬁrst proposed by DJ
Bernstein and Eric Schenk in 1996, as a means to stop resource ex-
haustion DDoS attacks on TCP stacks [10]. The idea behind SYN
Cookies is superﬁcially similar to our DNS encoding scheme. Both
save server state to efﬁciently associate two packet events in time.
Both add this state by overloading the meaning of a protocol ﬁeld.
In the case of SYN Cookies, a selected TCP sequence number has
two meanings: that from the protocol, and also an HMAC. Ran-
domized DNS ports, also proposed by DJ Bernstein, uses a simi-
lar ﬁeld-overloading logic. We believe DNS-0x20 is in that same
spirit: ﬁeld overloading yields additional state, and can be done by
only one party in a transaction to improve security.
7. CONCLUSION
DNS poisoning attacks present a persistent, ongoing threat to the
Internet’s critical infrastructure. There have been many proposed
solutions, both from the operator and academic communities. The
lack of adoption and delays in deployment suggest the need for
very-light weight, practical improvements to DNS security. We
therefore considered solutions that provide incomplete security, but
nonetheless offer measured improvements.
To be successful, we argued that such a protocol must: (a) re-
quire no radical changes to the DNS infrastructure; (b) make no
major changes to the existing protocol; and (c) be backwards com-
patible, so that even just a few DNS servers can elect to adopt it.
We believe these elements will speed the adoption of the security
measure.
DNS-0x20 encoding meets these requirements, but necessarily
at the cost of complete protection. It does not require a radical re-
structure of the DNS infrastructure, and can be adopted unilaterally
by recursive servers. With small exceptions (≈ 0.3%) the world’s
authority servers appear to already preserve the encoding scheme.
Indeed, DNS vendors are now incorporating the system into their
code bases.
But unlike complete, heavy-weight solutions to DNS poisoning,
DNS-0x20 encoding does not provide strong guarantees for trans-
action integrity. Using large trace ﬁles, we found that on average,
DNS messages can have an additional 12-bits of state. The slow
adoption of other, more complete DNS transaction protection sys-
tems suggests the immediate need for this light-weight solution.
7.1 Future Works
We endeavored to create practical DNS-based security enhance-
ments that can be rapidly adopted. No doubt, there will be many
issues that arise in DNS-0x20 implementation that we have not con-
sidered. For example, as alluded to in Section 1, there may be key
management issues to consider.
Our future work will address other efﬁcient, stateless encod-
ing schemes for domain names, using the 0x20 bitset of queries.
We will also consider modiﬁcations and implementation strategies
for resource-limited systems, such as embedded devices and home
DSL systems. Although our system does not penalize recursive
DNS servers that refuse to implement DNS-0x20, our future work
will also consider techniques to update deployed embedded DNS
systems. We will also consider policy options for DNS-0x20 re-
cursive servers, so they can identify and work around the few (≈
0.3%) DNS servers that may not support DNS-0x20 encoding.
We also note that DNS-0x20 does not create, but rather exploits
for beneﬁcial purposes, a covert channel within DNS. Future work
will measure the capacity of such a channel, and note how DNS-
0x20 encoding indirectly contributes to a reduction in the capacity
of a malicious (if somewhat obvious) covert channel.
Acknowledgements
This material is based upon work supported in part by the Na-
tional Science Foundation under Grant No. 0627477 and the De-
partment of Homeland Security under Contract No. FA8750-08-
2-0141. Any opinions, ﬁndings, and conclusions or recommenda-
tions expressed in this material are those of the authors and do not
necessarily reﬂect the views of the National Science Foundation
and the Department of Homeland Security.
The authors would like to thank the Messaging Anti-Abuse Work-
ing Group for facilitiating ideas and discussion that lead to DNS-
0x20.
8. REFERENCES
[1] D. E. E. 3d. Domain name system (dns) cookies.
http://tools.ietf.org/html/
draft-eastlake-dnsext-cookies-03, 2008.
[2] D. E. 3rd. Dns request and transaction signatures (SIG(0)s).
http://tools.ietf.org/html/rfc2931,
September 2000.
[3] D. E. 3rd. Secret key establishment for DNS (TKEY RR).
http://tools.ietf.org/html/rfc2930,
September 2000.
[4] A. Hubert and R. van Mook. Measures for making dns more
resilient against forged answers.
http://tools.ietf.org/html/
draft-ietf-dnsext-forgery-resilience-06,
July 2008.
[5] M. Andrews. The dnssec lookaside validation (dlv) dns
resource record, rfc 4431.
http://tools.ietf.org/html/rfc4431, 2006.
[6] D. Barr. Common dns operational and conﬁguration errors.
http://tools.ietf.org/html/rfc2845, 1996.
[7] S. Biaz and N. H. Vaidya. Is the round-trip time correlated
with the number of packets in ﬂight? In Proceedings of the
ACM SIGCOMM Internet Measurement Conference
(IMC’03), 2003.
[8] D. Dagon, N. Provos, C. P. Lee, and W. Lee. Corrupted dns
resolution paths: The rise of a malicious resolution authority.
In Proceedings of Network and Distributed Security
Symposium (NDSS ’08), 2008.
[9] DJ Bernstein. The dns_random library interface.
http://cr.yp.to/djbdns/dns_random.html,
2008.
[10] DJ Bernstein. SYN cookies.
http://cr.yp.to/syncookies.html, 2008.
[11] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King:
estimating latency between arbitrary internet end hosts. In
Proceedings of the 2nd ACM SIGCOMM Workshop on
Internet measurment, pages 5–18, 2002.
[12] Internet Assigned Numbers Authority. Port numbers. http:
//www.iana.org/assignments/port-numbers,
2008.
[13] D. Kaminsky. Its the end of the cache as we know it.
http://www.doxpara.com/DMK_BO2K8.ppt, 2008.
[14] J. Kang and D. Lee. Advanced white list approach for
preventing access to phishing sites. In International
Conference on Convergence Information Technology, 2007.
[15] A. Klein. BIND 8 DNS cache poisoning. http:
//www.trusteer.com/docs/bind8dns.html,
2007.
[16] A. Klein. BIND 9 DNS cache poisoning. http:
//www.trusteer.com/docs/bind9dns.html,
2007.
[17] A. Klein. OpenBSD DNS cache poisoning and multiple OS
predictable IP ID vulnerability. http:
//www.trusteer.com/docs/dnsopenbsd.html,
2007.
[18] A. Klein. Windows DNS cache poisoning. http://www.
trusteer.com/docs/microsoftdns.html, 2007.
[19] A. Klein. PowerDNS recursor DNS cache poisoning.
http://www.trusteer.com/docs/
powerdnsrecursor.html, 2008.
[20] J. Markoff. Leaks in patch for web security hole.
http://www.nytimes.com/2008/08/09/
technology/09flaw.html, August 2008.
[21] P. Mockapetris. Domain names - concepts and facilities.
http://www.faqs.org/rfcs/rfc1034, November
1987.
[22] P. Mockapetris. Domain names - implementation and
speciﬁcation. www.faqs.org/rfcs/rfc1035,
November 1987.
[23] NIST. Announcing the advanced encryption standard (aes).
ttp://csrc.nist.gov/publications/fips/
fips197/fips-197.pdf, 2001.
[24] K. Park, V. S. Pai, L. Peterson, and Z. Wang. Codns:
Improving dns performance and reliability via cooperative
lookups. In In Proceedings of the Sixth Symposium on
Operating Systems Design and Implementation(OSDI ’04),
2004.
[25] V. Ramasubramanian and E. Sirer. The design and
implementation of a next generation name service for the
internet. Proceedings of the 2004 conference on
Applications, technologies, architectures, and protocols for
computer communications, pages 331–342, 2004.
[26] V. Ramasubramanian and E. G. Sirer. Perils of transitiive
trust in the domain system. In Proceedings of the ACM
SIGCOMM Internet Measurement Conference (IMC’05),
2005.
[27] S. Stamm, Z. Ramzan, and M. Jakobsson. Drive-by
pharming. http://www.cs.indiana.edu/
~sstamm/papers/driveby-pharming.pdf, 2006.
[28] J. Stewart. DNS cache poisoning – the next generation.
http://www.secureworks.com/research/
articles/dns-cache-poisoning/, 2003.
[29] US Cert. Vulnerability note vu#457875.
http://www.kb.cert.org/vuls/id/457875,
2002.
[30] US-CERT. Multiple dns implementations vulnerable to cache
poisoning. www.kb.cert.org/vuls/id/800113,
2008.
[31] P. Vixie. DNS complexity. ACM Queue, 5(3), April 2007.
[32] P. Vixie and D. Dagon. Use of bit 0x20 in DNS labels to
improve transaction identity. http://tools.ietf.
org/html/draft-vixie-dnsext-dns0x20-00,
2008.
[33] P. Vixie, O. Gudmundsson, D. E. 3rd, and B. Wellington.
Secret key transaction authentication for DNS (TSIG).
http://tools.ietf.org/html/rfc2845, May
2000.
[34] S. Weiler. Dnssec lookaside validation (dlv), rfc 5074.
http://tools.ietf.org/html/rfc5074,
November 2007.
[35] F. Weimer. Passive dns replication.
http://www.enyo.de/fw/software/
dnslogger/first2005-paper.pdf, April 2005.
[36] D. Wessels. The measurement factory open recursive dns
reports. http://dns.measurement-factory.com/
surveys/openresolvers/ASN-reports/, 2007.
[37] L. Yuan, K. Kant, P. Mohapatra, and C.-N. Chuah. DoX: A
peer-to-peer antidote for DNS cache poisoning attacks. In
Proceedings of the IEEE International Conference on
Communications (ICC’06), volume 5, pages 8164–9547,
June 2006.