### 4. 图表与数据分析

#### (d) 域名深度与其他因素
**图7:**
- **(a)** 查询长度与0x20可用字符数的相关性图。
- **(b)** 域名深度与0x20字符数的关系。由于大多数高价值用户站点（如银行）通常为三级域名（3LD），因此在更深的域名层级中，0x20字符数量的减少可能并不显著。
- **(c)** 查询长度与数字字符的关系。
- **(d)** 域名深度与其他字符的关系。

**图8:**
- **(a)** 被动DNS追踪中观察到的域名中的0x20字符数量的累积分布函数（CDF）。
- **(b)** 域名中0x20字符数量的直方图。

| 类型 | 不匹配数量 | 不匹配百分比 | 扫描的域名 |
| --- | --- | --- | --- |
| .com TLD | 15,451 | 0.327% | 4,786,993 |
| .net TLD | 4,437 | 0.204% | 2,168,352 |

**表2:** 按顶级域名（TLD）划分的保留0x20编码的权威服务器

因此，我们研究的所有DNS服务器中超过99.7%能够支持我们的DNS-0x20编码方案，而无需更改其代码库。那些不支持该方案的服务器在“扁平化”查询时表现出不一致。我们认为，0x20编码并不是对现有协议的重大偏离，并且非常有可能被采纳。当然，我们将在IETF标准提交中测试这一观点，以规范权威服务器的行为。

### 6. 相关工作
我们的提案涉及如何更好地保护DNS系统的大讨论。[26]文中，作者探讨了通过不安全的次级服务器传递信任所带来的潜在攻击途径。相比之下，我们的工作提出了一种精确的模型来评估DNS服务器的风险，并且仅限于中毒攻击，而不是针对次级服务器的攻击。

一些提出的RFC标准考虑了提高DNS安全性。例如，TSIG [33]、SIG(0) [2] 和 TKEY [3] 都旨在改善消息完整性。TSIG和SIG(0)使用服务器之间的密钥来验证消息。尽管这些技术在防止伪造攻击方面有效，但由于需要服务器之间的密钥配对及其严格的时间同步要求，部署起来较为困难。TKEY解决了密钥分发问题，但计算成本较高，可能会被用于对DNS服务器进行DDoS攻击。相比之下，DNS-0x20非常轻量，不需要DNS通信者之间的协调。然而，与TSIG、SIG(0)和TKEY不同，DNS-0x20不能提供强大的DNS伪造防护，而是提高了攻击门槛。

最近提出的IETF标准“Domain Name System (DNS) Cookies”[1]与我们的方法相关。类似于我们的方法，DNS Cookies试图通过创建OPT RR选项来提供弱但实用的DNS事务保护。DNS Cookie本质上是请求者的IP地址和事务的HMAC。虽然相比其他DNS事务保护系统（如TSIG）仍然较轻量，但DNS Cookies仍需要DNS发起者和响应者进行代码更改。相比之下，DNS-0x20更轻量，只需在一个递归解析器上实现即可生效。

最近的一份关于DNS伪造弹性的IETF草案讨论了许多DNS中毒的方面[4]。我们推荐这份草案作为DNS中毒及其实用对策的优秀概述。

DNS中毒激发了[37]中的工作，作者提出了DoX，一种点对点的DNS替代方案。他们的方法需要使用P2P系统创建验证通道。相比之下，我们的系统利用现有的DNS系统通道。类似地，DoX需要一个对等系统来提高DNS安全性。而我们的方法可以由单个递归服务器今天就实施，并立即提高发送给权威服务器的消息的完整性。

我们认为，与我们工作最相关的研究领域不在DNS领域内。TCP SYN Cookies最初由DJ Bernstein和Eric Schenk在1996年提出，作为一种阻止针对TCP堆栈的资源耗尽DDoS攻击的方法[10]。SYN Cookies的基本思想与我们的DNS编码方案表面上相似：两者都通过保存服务器状态来高效关联两个时间上的数据包事件。两者都是通过重载协议字段的意义来添加这种状态。对于SYN Cookies，选定的TCP序列号有两个含义：一个是协议规定的，另一个是HMAC。随机化的DNS端口，也是由DJ Bernstein提出的，使用了类似的字段重载逻辑。我们认为DNS-0x20也具有同样的精神：通过字段重载增加额外的状态，并且只需要交易中的一方来改进安全性。

### 7. 结论
DNS中毒攻击对互联网关键基础设施构成了持续威胁。运营商和学术界提出了许多解决方案，但由于缺乏采用和部署延迟，需要非常轻量且实际的安全改进。因此，我们考虑了提供部分安全但确实有所改进的解决方案。

为了成功，我们认为这样的协议必须：
- (a) 不需要对DNS基础设施进行重大改动；
- (b) 对现有协议不做重大修改；
- (c) 向后兼容，即使只有少数DNS服务器选择采用。

我们相信这些要素将加快安全措施的采用。DNS-0x20编码满足这些要求，但不可避免地牺牲了完全保护。它不需要对DNS基础设施进行根本性的重构，并且可以由递归服务器单方面采用。除了少数例外（约0.3%），全球的权威服务器似乎已经保留了这种编码方案。事实上，DNS供应商正在将其纳入其代码库中。

但是，与完整的、重量级的DNS中毒解决方案不同，DNS-0x20编码不能提供强大的事务完整性保证。通过分析大量跟踪文件，我们发现平均而言，DNS消息可以有额外的12位状态。其他更完整的DNS事务保护系统的缓慢采用表明，迫切需要这种轻量级解决方案。

### 7.1 未来工作
我们致力于创建可以迅速采用的实际DNS安全增强措施。毫无疑问，在DNS-0x20实现过程中会出现许多我们尚未考虑到的问题。例如，正如第1节所提到的，可能存在密钥管理问题需要考虑。

我们的未来工作将探讨其他高效的、无状态的域名编码方案，使用查询中的0x20位集。我们还将考虑资源受限系统的修改和实施策略，如嵌入式设备和家庭DSL系统。尽管我们的系统不会惩罚拒绝实施DNS-0x20的递归DNS服务器，但我们未来的工作还将考虑更新已部署的嵌入式DNS系统的技术。我们还将考虑DNS-0x20递归服务器的策略选项，以便它们能够识别并绕过少数（约0.3%）可能不支持DNS-0x20编码的DNS服务器。

我们还注意到，DNS-0x20并没有创建，而是利用了DNS内的隐蔽通道以达到有益的目的。未来的工作将测量这种通道的容量，并指出DNS-0x20编码如何间接减少了恶意（尽管有些明显）隐蔽通道的容量。

### 致谢
本材料部分得到了美国国家科学基金会（Grant No. 0627477）和国土安全部（Contract No. FA8750-08-2-0141）的支持。本文中表达的观点、发现和结论或建议仅代表作者个人观点，并不一定反映美国国家科学基金会和国土安全部的看法。

作者感谢信息反滥用工作组促进了导致DNS-0x20的想法和讨论。

### 参考文献
[此处省略参考文献列表]

希望这些优化后的段落更加清晰、连贯和专业。如果有进一步的修改需求，请随时告知！