### Precision in XSLT v1.0

**Figure 10: precision.xml**  
An associated XSLT v1.0 document will report the sum of the previous values.

**Figure 11: precision.xsl (XSLT v1.0)**  
The expected result should be 0. However, certain processors may not calculate this correctly. For instance, Safari, Firefox, and Internet Explorer fail to produce the correct result. A similar issue is observed with server-side processors:

**Figure 12: Output using server-side processors**

| Processor | Result |
|-----------|--------|
| xalan-c (Apache) | Errors |
| xalan-j (Apache) | Errors |
| Saxon | Errors |
| xsltproc | Errors |
| PHP | Errors |
| Python | Errors |
| Perl | Errors |
| Ruby | Errors |
| **Client** | **Result** |
| Safari | Errors |
| Opera | OK |
| Chrome | OK |
| Firefox | Errors |
| Internet Explorer | Errors |

**Table 3: Loss of Precision with Large Integers**

**Recommendation**  
Use an XSLT v1.0 processor capable of performing operations with real numbers. Note that XSLT v1.0 processors that handle real numbers may not process large integers accurately. Alternatively, use an XSLT v2.0 processor with the `xs:decimal` function to avoid precision loss.

- **CWE-682: Incorrect Calculation** ([http://cwe.mitre.org/data/definitions/682.html](http://cwe.mitre.org/data/definitions/682.html))
- **XML Schema Part 2: Datatypes Second Edition** ([http://www.w3.org/TR/xmlschema-2/#decimal](http://www.w3.org/TR/xmlschema-2/#decimal))

### Insecure Random Numbers

The World Wide Web Consortium (W3C) has not specified how random functions should be implemented in XSLT. Consequently, these functions are part of the Extensions for XSLT (EXSLT), leading to varying implementations.

**Pseudorandom Values Are Not Secure**  
Xalan-C, Xalan-J, and Saxon use an Initialization Vector (IV) for their random functions but rely on non-secure pseudorandom number generators. This is not inherently insecure unless the `Math:random()` function is used in security-sensitive applications.

- **Xalan-C**: Uses `srand()` from C++, which is defined as a "bad random number generator" in the man page.
- **Xalan-J and Saxon**: Use `java.lang.Math.random()`, which the Java documentation recommends against for security-sensitive applications, suggesting `SecureRandom` instead.

**No Initialization Vector (IV)**  
A Pseudorandom Number Generator (PRNG) starts with a seed value. Libxslt does not implement a default seed value for its random functionality. The following example demonstrates this with `random.xsl`:

**Figure 16: random.xsl**

**Figure 17: Random output using the same IV**

Notice that the `xsltproc` output remains the same across executions due to the constant seed. If the random function is used in Cipher Block Chaining (CBC) without a random IV, it can be susceptible to dictionary attacks.

When using LXML with Python, the first execution produces the same result, but subsequent results differ unless time is used as part of the seed.

**Recommendation**  
- If cryptographically secure numbers are required, do not use XSLT.
- If different values are needed each time, define a different IV value if using libxslt.

- **CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator** ([http://cwe.mitre.org/data/definitions/338.html](http://cwe.mitre.org/data/definitions/338.html))
- **CWE-329: Not Using a Random IV with CBC Mode** ([http://cwe.mitre.org/data/definitions/329.html](http://cwe.mitre.org/data/definitions/329.html))

### Same-Origin Policy Bypass

An origin is defined by the scheme, host, and port of a URL. Documents from different origins are typically isolated. For example, a document from `http://example.com/doc.html` cannot access the DOM of a document from `https://example.com/target.html`.

Safari processes XML and XHTML files, allowing manipulation with XSLT v1.0. The `document()` function can access well-formed XML documents, and Safari permits cross-origin URLs with corresponding cookies. Information from third-party websites can be retrieved and analyzed using `value-of()` and `copy-of()`, then manipulated with JavaScript and sent back to an attacker.

**Proof of Concept Code**  
An attacker uses a local XHTML file containing an in-line XSLT document. The document defines a URL element, accesses it with `document()`, and exposes the context using `value-of()` and `copy-of()`. The content is further manipulated with JavaScript.

**Figure 18: cross-origin.xhtml**

**Steps to Read Cross-Origin Information from www.bing.com:**
1. Log in to `www.bing.com` (if you have a valid cookie, this step is not required).
2. Open `cross-origin.xhtml`.

**Figure 19: Reading Information from Bing**

The code outputs three text areas:
- Text representation of `http://www.bing.com/account/general` using the user's cookie.
- XML representation of `http://www.bing.com/account/general` using the user's cookie.
- Name of the user logged in to `bing.com`.

**Recommendation**  
Do not allow violations of the same-origin policy.

- **CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')** ([http://cwe.mitre.org/data/definitions/79.html](http://cwe.mitre.org/data/definitions/79.html))

### Information Disclosure through Errors

Malformed XSLT documents terminate execution upon detecting an error, similar to malformed XML documents. Error messages can provide useful information about the problem, such as the corrupted file, the line, and the error type.

**Functions to Read Files:**
- `document()`: Accesses other XML documents.
- `include()`: Combines stylesheets without changing semantics.
- `import()`: Allows stylesheets to override each other.

**Example: Document Containing “/etc/passwd” Reference**  
A style sheet references `/etc/passwd` using `document()` and attempts to output its content with `value-of()`. Since `/etc/passwd` is not an XML document, the processor should not be able to read it. However, it may output an unexpected error message, potentially exposing the first line of the file.

**Figure 20: Document Containing “/etc/passwd” Reference**
**Figure 21: Style Sheet using document()**
**Figure 22: Error Message Containing First Line of “etc/passwd”**

**Table 4: Reading First Line**

| Processor | `document()` | `import()` | `include()` |
|-----------|--------------|------------|-------------|
| xalan-c (Apache) | No | No | No |
| xalan-j (Apache) | No | No | No |
| Saxon | No | No | No |
| xsltproc | Yes | Yes | Yes |
| PHP | Yes | Yes | Yes |
| Python | No | No | No |
| Perl | Yes | Yes | Yes |
| Ruby | No | Yes | Yes |
| **Client** | **`document()`** | **`import()`** | **`include()`** |
| Safari | No | No | No |
| Opera | No | No | No |
| Chrome | No | No | No |
| Firefox | No | No | Yes |
| Internet Explorer | No | No | No |

**Recommendation**  
Do not disclose information about files in error messages.

### About Fernando Arnaboldi

Fernando Arnaboldi is a senior security consultant at IOActive, specializing in code reviews and penetration tests.

### About IOActive

IOActive is a leading information security services firm, providing elite security services to Global 500 companies across all industries. Founded in 1998, IOActive is headquartered in Seattle, USA, with global operations in the Americas, EMEA, and Asia Pacific regions. Visit [www.ioactive.com](http://www.ioactive.com) for more information.

- **IOActive Labs Research Blog**: [http://blog.ioactive.com](http://blog.ioactive.com)
- **Follow IOActive on Twitter**: [http://twitter.com/ioactive](http://twitter.com/ioactive)

© 2015 IOActive, Inc. All Rights Reserved.