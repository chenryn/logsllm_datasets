**I'm submitting a ...** (check one with "x")
    [X ] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**
i have a route like : http://localhost:4200/customers/50/invoices
customers - is a lazy loaded module  
50 - is the :id parameter  
invoices is the :module parameter
i have resolvers for the 50, and invoices routes.  
if i use imperative navigation, to change to :
http://localhost:4200/customers/60/invoices  
only the resolver for the :id route is being called. the child resolver for
:module is not called.
**Expected behavior**
when a route is changed, we might consider to run the resolvers of it's child
routes, similar to Guards (??)
**Minimal reproduction of the problem with instructions**  
here is the route definition for the customers lazy loaded module:
const routes: Routes = [  
{ path: '',  
component: CustomersComponent,  
children: [  
{ path: '', component: CustomersListComponent },  
{ path: ':id', component: CustomersDetailsComponent,  
resolve: {  
xxx1: CustomerResolve1  
}  
,children: [  
{ path: ':module', component: CustomersModuleDetailsComponent,  
resolve: {  
xxx2: CustomerResolve2  
}  
}  
] }  
]  
}  
];
the resolvers just output to the console.
if i enter the following url in the browser:
http://localhost:4200/customers/45/invoices  
the 2 resolvers are executed.
if i press a button on the page that executes the following in my ts:
this.router.navigate(['customers','100','invoices']);  
only the first resolver is executed !
**What is the motivation / use case for changing the behavior?**
**Please tell us about your environment:**
win10, vscode, angular-cli
  * **Angular version:** 2.0.X
2.3.1
  * **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
Chrome