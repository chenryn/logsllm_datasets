without authentication. See Chapter 7 for techniques for performing
this attack.
n Even if the information stored for reidentifying users is suitably protected
(encrypted) to prevent other users from determining or guessing it, the
information may still be vulnerable to capture through a bug such as
cross-site scripting (see Chapter 12), or by an attacker who has local access
to the user’s computer.
HACK STEPS
1. Activate any “remember me” functionality, and determine whether the
functionality indeed does fully “remember” the user or whether it remem-
bers only his username and still requires him to enter a password on sub-
sequent visits. If the latter is the case, the functionality is much less likely
to expose any security flaw.
2. Closely inspect all persistent cookies that are set, and also any data that
is persisted in other local storage mechanisms, such as Internet Explorer’s
userData, Silverlight isolated storage, or Flash local shared objects. Look
for any saved data that identifies the user explicitly or appears to contain
some predictable identifier of the user.
3. Even where stored data appears to be heavily encoded or obfuscated,
review this closely. Compare the results of “remembering” several very
similar usernames and/or passwords to identify any opportunities to
reverse-engineer the original data. Here, use the same techniques that
are described in Chapter 7 to detect meaning and patterns in session
tokens.
4. Attempt to modify the contents of the persistent cookie to try to con-
vince the application that another user has saved his details on your
computer.
cc0066..iinndddd 117777 88//1199//22001111 1122::0066::3399 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 178
178 Chapter 6 n Attacking Authentication
TRY IT!
http://mdsec.net/auth/219/
http://mdsec.net/auth/224/
http://mdsec.net/auth/227/
http://mdsec.net/auth/229/
http://mdsec.net/auth/232/
http://mdsec.net/auth/236/
http://mdsec.net/auth/239/
http://mdsec.net/auth/245/
User Impersonation Functionality
Some applications implement the facility for a privileged user of the application
to impersonate other users in order to access data and carry out actions within
their user context. For example, some banking applications allow helpdesk opera-
tors to verbally authenticate a telephone user and then switch their application
session into that user’s context to assist him or her.
Various design fl aws commonly exist within impersonation functionality:
n It may be implemented as a “hidden” function, which is not subject to
proper access controls. For example, anyone who knows or guesses the
URL/admin/ImpersonateUser.jsp may be able to make use of the func-
tion and impersonate any other user (see Chapter 8).
n The application may trust user-controllable data when determining whether
the user is performing impersonation. For example, in addition to a valid
session token, a user may submit a cookie specifying which account his
session is currently using. An attacker may be able to modify this value
and gain access to other user accounts without authentication, as shown
in Figure 6-7.
n If an application allows administrative users to be impersonated, any weak-
ness in the impersonation logic may result in a vertical privilege escalation
vulnerability. Rather than simply gaining access to other ordinary users’
data, an attacker may gain full control of the application.
n Some impersonation functionality is implemented as a simple “backdoor”
password that can be submitted to the standard login page along with any
username to authenticate as that user. This design is highly insecure for
many reasons, but the biggest opportunity for attackers is that they are
likely to discover this password when performing standard attacks such
as brute-forcing of the login. If the backdoor password is matched before
the user’s actual password, the attacker is likely to discover the function of
cc0066..iinndddd 117788 88//1199//22001111 1122::0066::3399 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 179
Chapter 6 n Attacking Authentication 179
the backdoor password and therefore gain access to every user’s account.
Similarly, a brute-force attack might result in two different “hits,” thereby
revealing the backdoor password, as shown in Figure 6-8.
Figure 6-7: A vulnerable user impersonation function
HACK STEPS
1. Identify any impersonation functionality within the application. If this is
not explicitly linked from published content, it may still be implemented
(see Chapter 4).
2. Attempt to use the impersonation functionality directly to impersonate
other users.
3. Attempt to manipulate any user-supplied data that is processed by the
impersonation function in an attempt to impersonate other users. Pay
particular attention to any cases where your username is being submitted
other than during normal login.
4. If you succeed in making use of the functionality, attempt to impersonate
any known or guessed administrative users to elevate privileges.
5. When carrying out password-guessing attacks (see the “Brute-Forcible
Login” section), review whether any users appear to have more than one
valid password, or whether a specific password has been matched against
several usernames. Also, log in as many different users with the credentials
captured in a brute-force attack, and review whether everything appears
normal. Pay close attention to any “logged in as X” status message.
cc0066..iinndddd 117799 88//1199//22001111 1122::0066::3399 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 180
180 Chapter 6 n Attacking Authentication
TRY IT!
http://mdsec.net/auth/272/
http://mdsec.net/auth/290/
Figure 6-8: A password-guessing attack with two “hits,” indicating the
presence of a backdoor password
Incomplete Validation of Credentials
Well-designed authentication mechanisms enforce various requirements on
passwords, such as a minimum length or the presence of both uppercase and
lowercase characters. Correspondingly, some poorly designed authentication
mechanisms not only do not enforce these good practices but also do not take
into account users’ own attempts to comply with them.
For example, some applications truncate passwords and therefore validate
only the fi rst n characters. Some applications perform a case-insensitive check
of passwords. Some applications strip unusual characters (sometimes on the
pretext of performing input validation) before checking passwords. In recent
times, behavior of this kind has been identifi ed in some surprisingly high-profi le
web applications, usually as a result of trial and error by curious users.
cc0066..iinndddd 118800 88//1199//22001111 1122::0066::3399 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 181
Chapter 6 n Attacking Authentication 181
Each of these limitations on password validation reduces by an order of
magnitude the number of variations available in the set of possible passwords.
Through experimentation, you can determine whether a password is being
fully validated or whether any limitations are in effect. You can then fi ne-tune
your automated attacks against the login to remove unnecessary test cases,
thereby massively reducing the number of requests necessary to compromise
user accounts.
HACK STEPS
1. Using an account you control, attempt to log in with variations on your
own password: removing the last character, changing the case of a char-
acter, and removing any special typographical characters. If any of these
attempts is successful, continue experimenting to try to understand what
validation is actually occurring.
2. Feed any results back into your automated password-guessing attacks to
remove superfluous test cases and improve the chances of success.
TRY IT!
http://mdsec.net/auth/293/
Nonunique Usernames
Some applications that support self-registration allow users to specify their
own username and do not enforce a requirement that usernames be unique.
Although this is rare, the authors have encountered more than one application
with this behavior.
This represents a design fl aw for two reasons:
n One user who shares a username with another user may also happen to
select the same password as that user, either during registration or in a
subsequent password change. In this eventuality, the application either
rejects the second user’s chosen password or allows two accounts to
have identical credentials. In the fi rst instance, the application’s behavior
effectively discloses to one user the credentials of the other user. In the
second instance, subsequent logins by one of the users result in access to
the other user’s account.
n An attacker may exploit this behavior to carry out a successful brute-force
attack, even though this may not be possible elsewhere due to restrictions
on failed login attempts. An attacker can register a specifi c username
cc0066..iinndddd 118811 88//1199//22001111 1122::0066::3399 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 182
182 Chapter 6 n Attacking Authentication
multiple times with different passwords while monitoring for the dif-
ferential response that indicates that an account with that username
and password already exists. The attacker will have ascertained a target
user’s password without making a single attempt to log in as that user.
Badly designed self-registration functionality can also provide a means for
username enumeration. If an application disallows duplicate usernames, an
attacker may attempt to register large numbers of common usernames to iden-
tify the existing usernames that are rejected.
HACK STEPS
1. If self-registration is possible, attempt to register the same username
twice with different passwords.
2. If the application blocks the second registration attempt, you can exploit
this behavior to enumerate existing usernames even if this is not possible
on the main login page or elsewhere. Make multiple registration attempts
with a list of common usernames to identify the already registered names
that the application blocks.
3. If the registration of duplicate usernames succeeds, attempt to register
the same username twice with the same password, and determine the
application’s behavior:
a. If an error message results, you can exploit this behavior to carry out a
brute-force attack, even if this is not possible on the main login page.
Target an enumerated or guessed username, and attempt to register
this username multiple times with a list of common passwords. When
the application rejects a specific password, you have probably found
the existing password for the targeted account.
b. If no error message results, log in using the credentials you speci-
fied, and see what happens. You may need to register several users,
and modify different data held within each account, to understand
whether this behavior can be used to gain unauthorized access to
other users’ accounts.
Predictable Usernames
Some applications automatically generate account usernames according to
a predictable sequence (cust5331, cust5332, and so on). When an application
behaves like this, an attacker who can discern the sequence can quickly arrive
at a potentially exhaustive list of all valid usernames, which can be used as
the basis for further attacks. Unlike enumeration methods that rely on making
repeated requests driven by wordlists, this means of determining usernames
can be carried out nonintrusively with minimal interaction with the application.
cc0066..iinndddd 118822 88//1199//22001111 1122::0066::4400 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 183
Chapter 6 n Attacking Authentication 183
HACK STEPS
1. If the application generates usernames, try to obtain several in quick
succession, and determine whether any sequence or pattern can be
discerned.
2. If it can, extrapolate backwards to obtain a list of possible valid user-
names. This can be used as the basis for a brute-force attack against the
login and other attacks where valid usernames are required, such as the
exploitation of access control flaws (see Chapter 8).
TRY IT!
http://mdsec.net/auth/169/
Predictable Initial Passwords
In some applications, users are created all at once or in sizeable batches and are
automatically assigned initial passwords, which are then distributed to them
through some means. The means of generating passwords may enable an attacker
to predict the passwords of other application users. This kind of vulnerability is
more common on intranet-based corporate applications — for example, where
every employee has an account created on her behalf and receives a printed
notifi cation of her password.
In the most vulnerable cases, all users receive the same password, or one
closely derived from their username or job function. In other cases, generated
passwords may contain sequences that could be identifi ed or guessed with
access to a very small sample of initial passwords.
HACK STEPS
1. If the application generates passwords, try to obtain several in quick
succession, and determine whether any sequence or pattern can be
discerned.
2. If it can, extrapolate the pattern to obtain a list of passwords for other
application users.
3. If passwords demonstrate a pattern that can be correlated with user-
names, you can try to log in using known or guessed usernames and the
corresponding inferred passwords.
4. Otherwise, you can use the list of inferred passwords as the basis for a
brute-force attack with a list of enumerated or common usernames.
cc0066..iinndddd 118833 88//1199//22001111 1122::0066::4400 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 184
184 Chapter 6 n Attacking Authentication
TRY IT!
http://mdsec.net/auth/172/
Insecure Distribution of Credentials
Many applications employ a process in which credentials for newly created accounts
are distributed to users out-of-band of their normal interaction with the applica-
tion (for example, via post, e-mail, or SMS text message). Sometimes, this is done
for reasons motivated by security concerns, such as to provide assurance that
the postal or e-mail address supplied by the user actually belongs to that person.
In some cases, this process can present a security risk. For example, suppose
that the message distributed contains both username and password, there is
no time limit on their use, and there is no requirement for the user to change
the password on fi rst login. It is highly likely that a large number, even the
majority, of application users will not modify their initial credentials and that
the distribution messages will remain in existence for a lengthy period, during
which they may be accessed by an unauthorized party.
Sometimes, what is distributed is not the credentials themselves, but rather
an “account activation” URL, which enables users to set their own initial pass-
word. If the series of these URLs sent to successive users manifests any kind of
sequence, an attacker can identify this by registering multiple users in close suc-
cession and then infer the activation URLs sent to recent and forthcoming users.
A related behavior by some web applications is to allow new users to register
accounts in a seemingly secure manner and then to send a welcome e-mail to
each new user containing his full login credentials. In the worst case, a security-
conscious user who decides to immediately change his possibly compromised
password then receives another e-mail containing the new password “for future
reference.” This behavior is so bizarre and unnecessary that users would be
well advised to stop using web applications that indulge in it.
HACK STEPS
1. Obtain a new account. If you are not required to set all credentials during
registration, determine the means by which the application distributes
credentials to new users.
2. If an account activation URL is used, try to register several new accounts
in close succession, and identify any sequence in the URLs you receive.
If a pattern can be determined, try to predict the activation URLs sent to
recent and forthcoming users, and attempt to use these URLs to take own-
ership of their accounts.
3. Try to reuse a single activation URL multiple times, and see if the applica-
tion allows this. If not, try locking out the target account before reusing
the URL, and see if it now works.
cc0066..iinndddd 118844 88//1199//22001111 1122::0066::4400 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 185
Chapter 6 n Attacking Authentication 185
Implementation Flaws in Authentication
Even a well-designed authentication mechanism may be highly insecure due to
mistakes made in its implementation. These mistakes may lead to information
leakage, complete login bypassing, or a weakening of the overall security of
the mechanism as designed. Implementation fl aws tend to be more subtle and
harder to detect than design defects such as poor-quality passwords and brute-
forcibility. For this reason, they are often a fruitful target for attacks against
the most security-critical applications, where numerous threat models and
penetration tests are likely to have claimed any low-hanging fruit. The authors
have identifi ed each of the implementation fl aws described here within the web
applications deployed by large banks.
Fail-Open Login Mechanisms
Fail-open logic is a species of logic fl aw (described in detail in Chapter 11) that has
particularly serious consequences in the context of authentication mechanisms.
The following is a fairly contrived example of a login mechanism that fails
open. If the call to db.getUser() throws an exception for some reason (for
example, a null pointer exception arising because the user’s request did not
contain a username or password parameter), the login succeeds. Although the
resulting session may not be bound to a particular user identity and therefore
may not be fully functional, this may still enable an attacker to access some
sensitive data or functionality.
public Response checkLogin(Session session) {
try {
String uname = session.getParameter(“username”);
String passwd = session.getParameter(“password”);
User user = db.getUser(uname, passwd);