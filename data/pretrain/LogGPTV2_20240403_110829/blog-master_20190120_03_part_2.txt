recovery.conf  
restore_command = 'cp /data01/digoal/wal/%f %p'  
recovery_target_timeline = 'latest'  # 这一条一定要配置，才会走新时间线  
standby_mode = on  
# primary_conninfo = 'host=localhost port=8001 user=postgres'   # 注释这一条即可，或者改成指向新的主库，但是建议不要改，直接注释最好，因为主备可能经常切换。    
```  
如果就只想恢复到老时间线怎么做？配置recovery_target_timeline即可。   
什么情况下，会走错时间线？  
1、流式恢复，并连接了老的主库  
2、将老的主库的切换时的wal文件拷贝到了目标集的pg_wal目录（例如本例的000000010000000200000058文件）  
#### 配置PITR   
```  
cd /data01/digoal/pg_root8002  
```  
配置参数  
```  
postgresql.conf  
port = 8002  
```  
改recovery.done文件名  
```  
mv recovery.done recovery.conf  
```  
修改内容  
```  
recovery.conf  
restore_command = 'cp /data01/digoal/wal/%f %p'  
recovery_target_timeline = 'latest'  # 这一条一定要配置，才会走新时间线  
standby_mode = on  
# primary_conninfo = 'host=localhost port=8001 user=postgres'   # 注释这一条即可，或者改成指向新的主库，但是建议不要改，直接注释最好，因为主备可能经常切换。    
```  
启动PITR恢复实例  
```  
pg_ctl start -D /data01/digoal/pg_root8002  
```  
可以看到PITR恢复实例，正确的恢复到了TL2时间线上。  
### 创建新主库(之前的从库1)的从库2  
创建从库2  
```  
pg_basebackup -D /data01/digoal/pg_root8003 -F p -c fast -h 127.0.0.1 -p 8000 -U postgres  
```  
配置参数  
```  
postgresql.conf  
port = 8003  
```  
改recovery.done文件名  
```  
mv recovery.done recovery.conf  
vi recovery.conf  
restore_command = 'cp /data01/digoal/wal/%f %p'  
recovery_target_timeline = 'latest'     # 这一条一定要配置，才会走新时间线  
standby_mode = on  
primary_conninfo = 'host=localhost port=8000 user=postgres'     
```  
启动从库2  
```  
pg_ctl start -D /data01/digoal/pg_root8003  
```  
确保主从开始正常同步  
```  
查询主库8000  
postgres=# select * from pg_stat_replication ;  
```  
压测新主库（原从库1）  
```  
pgbench -M prepared -n -r -P 1 -c 16 -j 16 -T 120 -h 127.0.0.1 -p 8000  
```  
确保新主库的从库同步正常  
```  
查询主库8000  
postgres=# select * from pg_stat_replication ;  
```  
激活新主库的从库(即从库2)  
```  
pg_ctl promote -D /data01/digoal/pg_root8003  
时间线现在是TL3  
```  
压测新主库的从库  
```  
pgbench -M prepared -n -r -P 1 -c 16 -j 16 -T 120 -h 127.0.0.1 -p 8003  
```  
压测结束后，切换WAL文件，确保PITR使用restore_command可以恢复到最后的WAL  
```  
psql -h 127.0.0.1 -p 8003 -U postgres  
checkpoint;  
select pg_switch_wal();  
checkpoint;  
select pg_switch_wal();  
```  
检查PITR恢复实例，是否恢复到了新新主库（即老的从库2）  
```  
digoal@pg11-test-> psql -h 127.0.0.1 -p 8003  
psql (11.1)  
Type "help" for help.  
postgres=# select count(*) from pgbench_history ;  
  count    
---------  
 9319998  
(1 row)  
postgres=# \q  
digoal@pg11-test-> psql -h 127.0.0.1 -p 8002  
psql (11.1)  
Type "help" for help.  
postgres=# select count(*) from pgbench_history ;  
  count    
---------  
 9319998  
(1 row)  
```  
完全一致  
查看TL，也已经到3了。  
```  
digoal@pg11-test-> pg_controldata -D /data01/digoal/pg_root8002|grep -i timeline  
Latest checkpoint's TimeLineID:       2  
Latest checkpoint's PrevTimeLineID:   2  
Min recovery ending loc's timeline:   3  
digoal@pg11-test-> pg_controldata -D /data01/digoal/pg_root8003|grep -i timeline  
Latest checkpoint's TimeLineID:       3  
Latest checkpoint's PrevTimeLineID:   3  
Min recovery ending loc's timeline:   0  
PITR实例，做完检查点就打通了  
digoal@pg11-test-> psql -h 127.0.0.1 -p 8002  
psql (11.1)  
Type "help" for help.  
postgres=# checkpoint;  
CHECKPOINT  
postgres=# \q  
digoal@pg11-test-> pg_controldata -D /data01/digoal/pg_root8002|grep -i timeline  
Latest checkpoint's TimeLineID:       3  
Latest checkpoint's PrevTimeLineID:   3  
Min recovery ending loc's timeline:   3  
```  
## 小结  
### 如何让PITR实例可以一直跟到最新时间线  
1、recovery.conf 使用restore command , 不要使用 stream   
2、激活后，尽快归档history文件。  
### 什么情况下，会走错时间线？  
1、流式恢复，并连接了老的主库  
2、将老的主库的切换时的wal文件拷贝到了目标集的pg_wal目录（例如本例的000000010000000200000058文件）  
### 如果就只想恢复到老时间线怎么做？  
配置recovery_target_timeline即可。     
## 参考  
[《PostgreSQL standby recover的源码分析 (walreceiver唤醒时机？ 为什么standby crash后walreceiver不会立即被唤醒?)》](../201612/20161229_01.md)    
[《PostgreSQL recovery target introduce》](../201301/20130130_01.md)    
[《PostgreSQL 时间点恢复(PITR)时查找wal record的顺序 - loop(pg_wal, restore_command, stream)》](../201805/20180516_04.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")