# []{#encrypting-block-devices-using-luks_security-hardening.html#options-for-data-protection-during-luks2-re-encryption_encrypting-block-devices-using-luks}LUKS2 重新加密过程中数据保护选项 {.title}
:::
LUKS2 提供了几个选项，在重新加密过程中优先选择性能或数据保护：
::: variablelist
[`checksum`{.literal}]{.term}
:   这是默认的模式。它在数据保护和性能之间保持平衡。
    这个模式将单独的扇区校验和保存在重新加密区域,因此恢复过程可以检测哪些
    LUKS2 扇区已经重新加密。模式要求块设备扇区写入具有"原子"性。
[`journal`{.literal}]{.term}
:   这是最安全的模式，也是速度最慢的模式。此模式将重新加密区记录在二进制区中，因此
    LUKS2 将数据写入两次。
[`none`{.literal}]{.term}
:   此模式优先选择性能，不提供数据保护。它只保护数据，以防止安全进程终止，如
    `SIGTERM 信号`{.literal} 或用户按了
    [**Ctrl**]{.keycap}+[**C**]{.keycap}。任何意外的系统崩溃或应用程序崩溃都可能会导致数据损坏。
:::
您可以使用 `cryptsetup`{.literal} 的 `--resilience`{.literal}
选项选择模式。
如果 LUKS2 重新加密进程意外被强行终止，LUKU2 可通过以下方法执行恢复：
::: itemizedlist
-   在下一个 LUKS2 设备打开操作期间自动执行。此操作可以由
    `cryptsetup open`{.literal} 命令来触发，或者通过用
    `systemd-cryptsetup`{.literal} 连接设备来触发。
-   在 LUKS2 设备上使用 `cryptsetup repair`{.literal} 命令手动执行。
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-existing-data-on-a-block-device-using-luks2_encrypting-block-devices-using-luks}使用 LUKS2 加密块设备上的现有数据 {.title}
:::
这个过程使用 LUKS2 格式加密设备中的数据。新的 LUKS
标头保存在设备的标头中。
::: itemizedlist
**先决条件**
-   块设备包含一个文件系统。
-   已备份了数据。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在加密过程中可能会丢失数据：由于硬件、内核或人为故障。在开始加密数据之前，请确保您有可靠的备份。
    :::
:::
::: orderedlist
**流程**
1.  卸载您要加密的设备中的所有文件系统。例如：
    ``` screen
    # umount /dev/sdb1
    ```
2.  为存储 LUKS 标头腾出空间。选择适合您场景的以下一个选项：
    ::: itemizedlist
    -   如果是加密逻辑卷，您可以扩展逻辑卷而无需调整文件系统的大小。例如：
        ``` screen
        # lvextend -L+32M vg00/lv00
        ```
    -   使用分区管理工具（如 `parted`{.literal} ）扩展分区。
    -   缩小该设备的文件系统。您可以对 ext2、ext3 或 ext4 文件系统使用
        `resize2fs`{.literal} 工具。请注意，您无法缩小 XFS 文件系统。
    :::
3.  初始化加密。例如：
    ``` screen
    # cryptsetup reencrypt \ --encrypt \ --init-only \ --reduce-device-size 32M \ /dev/sdb1 sdb1_encrypted
    ```
    该命令会要求您输入密码短语并启动加密过程。
4.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_encrypted /mnt/sdb1_encrypted
    ```
5.  启动在线加密：
    ``` screen
    # cryptsetup reencrypt --resume-only /dev/sdb1
    ```
:::
::: itemizedlist
**其它资源**
-   `cryptsetup(8)`{.literal}、`lvextend(8)`{.literal}、`resize2fs(8)`{.literal}
    和 `parted(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-existing-data-on-a-block-device-using-luks2-with-a-detached-header_encrypting-block-devices-using-luks}使用带有分离标头的 LUKS2 在块设备上加密现有数据 {.title}
:::
此流程在设备上加密现有数据，而无需为存储 LUKS
标头创建可用空间。标头存储在分离的位置，它也充当额外的安全层。该流程使用
LUKS2 加密格式。
::: itemizedlist
**先决条件**
-   块设备包含一个文件系统。
-   已备份了数据。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在加密过程中可能会丢失数据：由于硬件、内核或人为故障。在开始加密数据之前，请确保您有可靠的备份。
    :::
:::
::: orderedlist
**流程**
1.  卸载该设备中的所有文件系统。例如：
    ``` screen
    # umount /dev/sdb1
    ```
2.  初始化加密：
    ``` screen
    # cryptsetup reencrypt \ --encrypt \ --init-only \ --header /path/to/header \ /dev/sdb1 sdb1_encrypted
    ```
    将 [*/path/to/header*]{.emphasis} 替换为使用分离的 LUKS
    标头指向该文件的路径。必须可以访问分离的 LUKS
    标头，以便稍后可以解锁加密的设备。
    该命令会要求您输入密码短语并启动加密过程。
3.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_encrypted /mnt/sdb1_encrypted
    ```
4.  启动在线加密：
    ``` screen
    # cryptsetup reencrypt --resume-only --header /path/to/header /dev/sdb1
    ```
:::
::: itemizedlist
**其它资源**
-   `cryptsetup(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-a-blank-block-device-using-luks2_encrypting-block-devices-using-luks}使用 LUKS2 加密空白块设备 {.title}
:::
此流程提供有关使用 LUKS2 格式加密空白块设备的信息。
::: itemizedlist
**先决条件**
-   空白块设备。
:::
::: orderedlist
**流程**
1.  将分区设置为加密的 LUKS 分区：
    ``` screen
    # cryptsetup luksFormat /dev/sdb1
    ```
2.  打开加密的 LUKS 分区：
    ``` screen
    # cryptsetup open /dev/sdb1 sdb1_encrypted
    ```
    这样可解锁分区并使用设备映射器将其映射到新设备中。这会提醒内核
    `设备`{.literal} 是加密设备，应通过 LUKS 并使用
    `/dev/mapper/device_mapped_name`{.literal}
    来寻址，以免覆盖加密的数据。
3.  要将加密的数据写入分区，必须通过设备映射名称访问该分区。为此，您必须创建一个文件系统。例如：
    ``` screen
    # mkfs -t ext4 /dev/mapper/sdb1_encrypted
    ```
4.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_encrypted mount-point
    ```
:::
::: itemizedlist
**其它资源**
-   `cryptsetup(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#proc_creating-a-luks-encrypted-volume-using-the-storage-role_encrypting-block-devices-using-luks}使用存储角色创建 LUKS 加密卷 {.title}
:::
您可以通过运行 Ansible playbook，使用 `storage`{.literal}
角色来创建和配置使用 LUKS 加密的卷。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要创建卷的系统中安装 Red Hat Ansible Automation Platform。
    :::
-   Ansible 控制器上安装了 `rhel-system-roles`{.literal} 软件包。
-   您有一个清单文件详细描述了您要使用存储系统角色部署 LUKS
    加密卷的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容创建新 `playbook.yml`{.literal} 文件：
    ``` screen
    - hosts: all
      vars:
        storage_volumes:
          - name: barefs
            type: disk
            disks:
             - sdb
            fs_type: xfs
            fs_label: label-name
            mount_point: /mnt/data
            encryption: true
            encryption_password: your-password
      roles:
       - rhel-system-roles.storage
    ```
2.  可选：验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   [使用 LUKS
    加密块设备](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/encrypting-block-devices-using-luks_managing-storage-devices){.link}
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件
:::
:::
:::
[]{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html}
::: chapter
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening}第 13 章 使用基于策略的解密配置加密卷的自动解锁 {.title}