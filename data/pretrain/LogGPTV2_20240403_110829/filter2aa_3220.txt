@Y4tacker
Java⽂件上传⼤杀器-绕waf(针对commons-
fileupload组件)
来个中⼆的标题，哈哈哈，灵感来源于昨晚赛博群有个师傅@我是killer发了篇新⽂章，在那
篇⽂章当中提到了在 filename="1.jsp" 的filename字符左右可以加上⼀些空⽩字符 %20 
%09 %0a %0b %0c %0d %1c %1d %1e %1f ，⽐如 %20filename%0a="1.jsp"(直接⽤
url编码为了区别) 这样导致waf匹配不到我们上传⽂件 名，⽽我们上传依然可以解析，我对
次进⾏了更深⼊的研究，也是对师傅⽂章对⼀次补充，下⾯为了衔接还是先梳理⼀遍，看过
赛博群的师傅可以先跳过前⾯的部分，直接看最后⼀部分(毕竟我想发个博客)
上传代码
针对使⽤commons-fileupload处理⽂件上传
public class TestServlet extends HttpServlet {
    public void doPost(HttpServletRequest request, HttpServletResponse 
response) throws IOException {
        String path = "/Users/y4tacker/Desktop/JavaStudy/testtest";
        try {
            ServletFileUpload servletFileUpload = new 
ServletFileUpload(new DiskFileItemFactory());
            servletFileUpload.setHeaderEncoding("UTF-8");
            List fileItems = 
servletFileUpload.parseRequest(request);
            for (FileItem fileItem : fileItems) {
                response.getWriter().write(fileItem.getName());
                fileItem.write(new File(path+"/"+fileItem.getName()));
前置分析
将断点打在 servletFileUpload.parseRequest(request) ,跟⼊ getItemIterator
⼀直往下
到 org.apache.commons.fileupload.FileUploadBase.FileItemIteratorImpl#File
ItemIteratorImpl
Content-Type  要开头为 multipart/  
            }
        }catch (Exception e){
        }
    }
}
接下来对流的处理部分忽略，到下⾯有个 this.boundary = 
FileUploadBase.this.getBoundary(contentType); ,因为⽂件上传的格式就是,可以猜
出这⾥就是解析这⼀部分
当时师傅跳过中间⼀些部分到了
org.apache.commons.fileupload.FileUploadBase#getFileName(java.lang.Strin
g)
在 parser.parse(pContentDisposition, ';'); ，简单说下作⽤是先⽤分号将 form-
data; name="file"; filename="1.jsp"  分割然后获取 等于号前⾯的值，这⾥我们看看
到getToken当中的栈（⽅便⼤家调试）
------WebKitFormBoundaryTyBDoKvamN58lcEw
Content-Disposition: form-data; name="filename"; filename="1.jsp"
233
------WebKitFormBoundaryTyBDoKvamN58lcEw--
这⾥有个到 Character.isWhitespace ，也就是@我是killer师傅提到的点，也是我们开篇
前⾔中说到的利⽤⽅式，就不多提了
正⽂开启
看看 getFileName 调⽤前，其实传⼊了⼀个 headers ，这个 headers 来源于上⾯的
this.multi
getToken:99, ParameterParser (org.apache.commons.fileupload)
parseToken:162, ParameterParser (org.apache.commons.fileupload)
parse:311, ParameterParser (org.apache.commons.fileupload)
parse:279, ParameterParser (org.apache.commons.fileupload)
parse:262, ParameterParser (org.apache.commons.fileupload)
parse:246, ParameterParser (org.apache.commons.fileupload)
getBoundary:423, FileUploadBase (org.apache.commons.fileupload)
:988, FileUploadBase$FileItemIteratorImpl 
⽽这个 multi 来源，还与我们上⾯的 bundary 有关
继续回到上⾯的getFileName之前 this.boundary = 
FileUploadBase.this.getBoundary(contentType);
失败的绕waf点
从这⾥可以看到和上⾯getFileName的分隔符不⼀样，这⾥⽤了两个分隔符，那么这⾥我就在
想如果getFileName那⾥如果和这个逻辑不相关岂不是可以拿下
我们知道上⾯getFileName的参数来源于
org.apache.commons.fileupload.MultipartStream#readHeaders ，可以看到这⾥是
通过for循环遍历并调⽤getBytes获取
⽽这个input来源就是我们之前传⼊的输⼊流
因此这⾥的绕过思路便是⽆法奏效，主要原因是，看getFilename这⾥，分割符只有 ; ，我也
是⿇了
成功的绕waf点
在 org.apache.commons.fileupload.ParameterParser#parse(char[], int, int, 
char) ，
wow！！，这⾥对value进⾏了 MimeUtility.decodeText 操作
我们知道对MIME的编码出现在邮件中，因为 SMTP 协议⼀开始只⽀持纯 ASCII ⽂本的传
输，这种情况下，⼆进制数据要通过 MIME 编码才能发送
那我们来看看这个decode⾥⾯⼲了啥,我直接看了下⾯如果 =? 开头则会调⽤decode⽅法
我来对这串又臭又长的代码进⾏解读，主要是为了符合RFC 2047规范
1. 要求以 =? 开头
2. 之后要求还要有⼀个 ? ，中间的内容为编码，也就是 =?charset?
3. 获取下⼀个 ? 间的内容，这⾥与下⾯的编解码有关
4. 之后定位到最后⼀个 ?= 间内容执⾏解码
这⾥我们来⼀个实例⽅便理解上⾯步骤 =?gbk?Q?=31=2e=6a=73=70?=
从上⾯的步骤可以看到对指⽀持两种解码⼀种是 B ⼀种 Q ，分别对应 Base64 以及 Quoted-
printable 编码，对于前者⼤家都很熟悉，对于后者我们这⾥只说如何编码
Quoted-printable将任何8-bit字节值可编码为3个字符：⼀个等号"="后跟随两个⼗六进制数
字(0–9或A–F)表⽰该字节的数值。例如，ASCII码换页符（⼗进制值为12）可以表⽰
为"=0C"， 等号"="（⼗进制值为61）必须表⽰为"=3D"，gb2312下“中”表⽰为=D6=D0
因此我们就可以对这个value进⾏⼀些编码的骚操作，下⾯我们来梳理下可利⽤的点
1. ⼀个是控制字符串的编码，这⾥⽀持编码很多因为是调⽤ new String(decodedData, 
javaCharset(charset)) ，这个javaCharset函数预制了⼀些，可以看到如果不是这⾥⾯
的就直接返回那个指，⽽new String函数⾥⾯会调⽤所有java⽀持的编码格式去解析，也
就是 charsets.jar ⾥⾯的内容
    private static String javaCharset(String charset) {
        if (charset == null) {
2. 控制 Base64 以及 Quoted-printable 去解码
这⾥来测试⼀下，对能编码的都编码⼀遍
            return null;
        } else {
            String mappedCharset = 
(String)MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));
            return mappedCharset == null ? charset : mappedCharset;
        }
    }
    static {
        MIME2JAVA.put("iso-2022-cn", "ISO2022CN");
        MIME2JAVA.put("iso-2022-kr", "ISO2022KR");
        MIME2JAVA.put("utf-8", "UTF8");
        MIME2JAVA.put("utf8", "UTF8");
        MIME2JAVA.put("ja_jp.iso2022-7", "ISO2022JP");
        MIME2JAVA.put("ja_jp.eucjp", "EUCJIS");
        MIME2JAVA.put("euc-kr", "KSC5601");
        MIME2JAVA.put("euckr", "KSC5601");
        MIME2JAVA.put("us-ascii", "ISO-8859-1");
        MIME2JAVA.put("x-us-ascii", "ISO-8859-1");
    }
成功上传怎么说
继续增强混淆
还记得吗，当时说的只会提取 =??= 之间的内容，那我们在后⾯加点其他东西也可以，当
然 boundary==?gbk?Q?
=2d=2d=2d=2d=57=65=62=4b=69=74=46=6f=72=6d=42=6f=75=6e=64=61=72=79=54=79
=42=44=6f=4b=76=61=6d=4e=35=38=6c=63=45=77?= 这个不能加，因为他在header头，会
造成解析出问题
你以为就这就完了？
再回到 org.apache.commons.fileupload.util.mime.MimeUtility#decodeText ，这
⾥还有判断 \t\r\n
直接解释代码有点累了，看图啥都懂了
测试相关代码
整合在⼀起了,最后再次感谢 @我是killer 师傅的⽂章带给我的思路
import base64
name = "test"
encode = name.encode("utf-8")
b = base64.b64encode(encode)
print("=?utf-8?B?"+b.decode()+"?=")
res = ""
for i in encode.decode("gbk"):
    tmp = hex(ord(i)).split("0x")[1]
    res += f"={tmp}"
print("=?gbk?Q?"+res+"?=")