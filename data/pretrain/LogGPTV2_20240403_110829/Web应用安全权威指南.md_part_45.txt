> TDE
> 数据库在数据库的文件、备份存档等被盗的情况下，可以有效保护数据库内容不会泄露。
#### **利用信息摘要来进行密码保护及其注意事项** {line-num="340 341"}
这一节我们将会对采用信息摘要进行密码保护的方法进行说明。
-   **什么是信息摘要**
    能将任意长度的数据（bit
    数组）压缩为固定长度（信息摘要，或者叫作散列值）的函数叫作散列函数，满足安全上要求（参考后面的专栏）的散列函数叫作密码学级别的散列函数（Cryptographic
    Hash Function）。在后面的章节中我们将简称为散列函数。
    我们下面来看一下几个信息摘要的例子。手头有 SSH
    客户端软件的用户可以登录本书中实验用的虚拟机，然后输入下面带下划线部分的命令。输入命令行的下一行白底黑字的内容是
    MD5 散列函数的输出结果。
    **程序示例 使用 md5sum 进行散列值计算**
    ![{%}](Image00190.jpg)
    其中"echo -n"是在 echo 内容后不输出回车符，md5sum
    是用来对给定文件或者标准输入进行散列值计算的命令。
    上面的例子分别对"password1"和"password2"做了散列值计算，从计算结果可以看出，虽然这两个字符串只有一个字符不一样，但是计算出来的结果却相差甚远。
    > **专栏：密码学级别的散列函数需要满足的要求**
    >
    > -   **原像计算困难性（Pre-image Resistance）**
    >
    >     原像计算困难性是指在现实的可接受时间内从散列值反推出原内容的困难程度。原像计算困难性也叫作单向性。
    >
    > -   **第 2 原像计算困难性（Second Pre-image Resistance）**
    >
    >     第 2
    >     原像计算困难性是指给定原数据，在现实的可接受时间内找出相同散列值的其他数据的困难程度。第
    >     2 原像计算困难性也称为弱耐冲突性（Weak Collision
    >     Resistance）。
    >
    > -   **冲突困难性（Collision Resistance）**
    >
    >     冲突困难性是指找出拥有相同散列值的两个不同数据的困难程度。原数据之间并没有什么关
    >     联，条件是散列值相同即可。冲突困难性也称为强耐冲突性（Strong
    >     Collision Resistance）。
    >
    >     广泛使用至今的 MD5
    >     散列函数已经被证明是不满足强耐冲突性性的，可以说弱耐冲突性被攻破也只是时间的问题。但是如果仅用作保护密码安全的话，能保证原像计算困难性已经足够了。也就是说，MD5
    >     散列函数还是能继续作为保护密码安全之用的。
    >
    >     但是根据目的去选择合适的散列函数可能会比较困难，如果选择不当，还可能带带来安全隐患。所以我们可以不用考虑具体的使用场景，而是选择那些通用的、安全的散列算法就可以了。比如
    >     SHA-256 就是一个不错的选择。
-   **利用信息摘要保护密码**
    图 5-7
    简单说明了使用信息摘要的密码保存和验证的方法。如图所示，数据库中保存的不再是密码原文而是其散列值，登录时验证的也是原密码的散列值。
    ![{%}](Image00191.jpg)
    **图 5-7 利用散列保存和验证密码**
    之所以对密码原文采用信息摘要能保护密码安全，是因为散列函数具有下面的特性。单向性和冲突困难性的详细定义请参考之前的专栏。
    -   不能从散列值倒推出明文密码（单向性）
    -   不同的密码生成相同的散列值的概率非常低（冲突困难性）
    尽管散列函数满足安全性上的那些需求，但是由于密码的字符种类和长度都是有限的，所以还是有一些方法能实现根据散列值得到原来的密码。这里我们选择其中的
    3 种方法来介绍一下。
-   **威胁 1：离线暴力破解**
    在这之前我们已经说过了散列函数不能从散列值得到原来的数据，但是那只适用于一般情况，对于密码来说就不合适了。由于在密码中使用的字符种类有限，且长度也有限，所以有时候通过暴力破解是可以得到原密码的。
    另外，对散列函数还有一个要求就是处理速度要足够快，因为散列函数的典型利用场景是为
    DVD-ROM 等巨大 ISO
    文件做信息摘要，计算其散列值的。考虑到我们会频繁地使用散列函数来计算散列值，如果计算过程花费时间过长的话，甚至可能会对系统性能产生影响。所以散列函数处理速度是越快越好。
    但是散列函数速度过快对密码做信息摘要来说有可能是一种灾难，因为处理速度提高了，也使得暴力破解的效率变高，增加暴力破解成功的可能性。
    这种攻击在从散列值反推出原文的时候并不需要连接到服务器（Offline），所以也叫作离线暴力破解攻击。
    下面介绍下笔者做的一个小实验的结果。在实验中使用了
    md5brute[9]{.注释编号} 这个用来从 MD5 散列值查找原文的工具。在长度是
    8
    位的小写英文字母这一测试条件下，查找"zzzzzzzz"的散列值。按字母顺序排列的话，这个字符串排在最后。
    **运行实例 从散列值倒推出原字符串的例子**
    ![{%}](Image00192.jpg)
    在系统配置为 Pentium Dual-Core 2GHz
    的机器上，如果只使用单核（Core）进行测试的话，大概只需要花费 40
    个小时就能成功地查找到该散列值对应的密码原文。平均算下来大概一个小时能进行
    138 万次散列值计算。
    基于此实验数据，如果用大小写英文字母加上数字作为密码，长度为 8
    位的话，需要大概 5 年才能找到原文。5
    年看上去时间很长了，但是如果使用 676 核的集群 [10]{.注释编号}
    的话，只需要 3 天就能破解出原文了。
    也就是说，如果密码长度在 8 位以下的话，以现在的 CPU
    能力来说，还是可以在可接受范围内从散列值得到密码原文的。而且破解并没有利用
    MD5 的漏洞等，其他的散列函数（SHA-1 或 SHA-256）也存在同样的问题。
    上面只是暴力破解的例子，利用字典攻击也能得到散列值的原字符串，如果该字符串已经在字典里存在的话，甚至可以瞬间（1
    秒以内）破解。
    后来，为了更高效的从散列值得到原文，有人发明了利用彩虹表进行破解的方法。
-   **威胁 2：彩虹破解（Rainbow Crack）**
    我们还可以考虑另一种办法来提高从散列值得到密码原文的效率，即预先使用暴力破解的方法生成一个散列值查找表，解析原密码的时候如果能查询到这个表的话，就能实现高速的密码解析工作。但实际上由于密码组合数量庞大，基本上创建这样一个查找表是很很困难的。
    然而到了 2003 年，一种基于彩虹表（Rainbow
    Table）的方法出现了，它使得创建一个可接受大小的查找表成为可能。后面的"参考：彩虹表原理"小节有针对彩虹表的详细说明，各位读者可以参考。这里我们通过实验来看一下彩虹表破解是如何利用彩虹表来解析出密码原文的。
    彩虹表需要为不同的字符种类和字符串长度创建不同的查找表，如果字符种类或字符串长度增加，彩虹表大小也会急速变大。笔者手头上的彩虹表是适用于密码为
    7
    位以下的小写字母加数字的密码，我们将使用这个彩虹表来进行实验。这里使用的工具
    rcrack.exe 可以从 RainbowCrack Project[11]{.注释编号} 下载，
    **运行实例 Rainbow Crack 的例子**
    ![{%}](Image00193.jpg)
    从上面的例子可以看出，Rainbow Crack 只用了 45
    秒就把密码原文给解析出来了。相比之下同样的散列值，之前介绍的
    md5brute 用了 997 分钟，使用彩虹的表速度足足是 md5brute 的 1300
    倍之多。不过这个实验对 md5brute
    来说有点不公平（我们使用的明文字符串排在所有字符组合的最后），实际用起来应该不会有这么大的差别，但是这也充分说明彩虹表的高效性和实用性了。
    RainbowCrack Project 的主页也在出售彩虹表数据，比如用户 MD5
    算法的彩虹表，我们可以买到 8 位以下所有 ASCII 字符，以及 10
    位以下小写字母加数字的彩虹表 [12]{.注释编号}
    。从理论上说，如果密码只是简单地进行散列处理后保存的话，我们用这些彩虹表就可以在很短的时间内破解出原密码。[13]{.注释编号}
    抵御彩虹表攻击的最简单的方法就是增加密码长度，现在能获取的彩虹表支持的最大长度都只有
    10 位左右，如果我们把密码长度设置为 20
    个字符以上，就可以预防用目前的彩虹表破解原密码的问题。但是强制用户使用
    20 多位的密码也有点不太现实，所以可以采用后面将要介绍的加 salt
    取散列值的对策。
-   **威胁 3：在用户数据库里创建密码字典**
    也许我们会觉得如果使用攻击者未知的散列函数，攻击者应该就没有办法计算出原密码了，但是实际上即使攻击者不知道保存密码时所使用的散列函数，也有其他方法能解析出原密码。
    这种方法就是通过在被攻击目标系统里注册大量的僵尸（Dummy）用户，在系统的数据库里制作一个"密码字典"出来。图
    5-8 是这种攻击的大概流程。
    ![{%}](Image00194.jpg)
    **图 5-8 在 Web 应用数据库中创建密码字典**
    如图 5-8
    说明的那样，攻击者首先在攻击对象系统中注册大量的虚假账号（①），然后再利用其他方法（比如
    SQL
    注入攻击等），盗取系统的用户数据库（②）。在取得的用户数据库里，查看保存散列密码的那一列的数据，寻找具有和在①里注册的用户相同散列值的记录，在图
    5-8 的例子里，用户 saburo 和 evil2 的密码散列值相同（③），因为 evil2
    的密码是 123456，所以可以断定 saburo 的密码也是 123456（④）。
    针对这种攻击，加盐也是一种有效的防御手段。
-   **如何防止散列值被破解**
    很多人认为将密码作为散列值的形式保存起来就安全了，但实际上有各种各样的方法可以破解散列密码，在上面我们已经介绍过了。之前介绍的方法都是恶意利用特定的散列函数（比如
    MD5）的特点及漏洞等。只要是使用算法公开的散列函数，基本上都会面临同样的问题。
    之前介绍的方法，都是密码组合模式数量不是特别大的情形下发生的破解，如果使用
    20
    位以上的随机数的话，我们可以认为基本上密码不会被破解。但是这样的密码使用起来非常地不便，现实中也不可能被采用，现实中使用最多的密码长度在
    8 位左右，所以我们要寻找防止散列值被破解的方法。
    基本的防止散列值被破解方法有下面两种：
    -   salt（加盐）
    -   stretching（延展计算）
-   **对策 1：salt（加盐）**
    salt 指的是在原本要散列的数据后面追加的内容。加上了
    salt，除了看上去密码字符串会变长之外，还因为每个用户的 salt
    都不一样，所以即使两个用户的密码相同，也能为这两个用户的密码生成不同的散列值。
    安全的使用 salt 需要满足以下条件：
    -   确保有一定的长度
    -   每个用户使用不同的 salt
    这其中"一定长度"的说法可能有些模棱两可，实际上考虑到对抗彩虹表攻击，salt
    和密码加起来的长度至少要保证在 20 位以上。
    不同用户使用不同 salt
    的原因，是让使用相同密码的用户也能生成不同的散列值。为不同用户生成不同的
    salt 有两种方法。
    -   使用随机数作为 salt
    -   使用以用户 ID 为输入参数的函数来生成 salt
    很多教材中都推荐使用随机数作为 salt 使用，因为使用随机数作为 salt
    的话，必须将 salt 也保存在数据库里。如果不知道 salt
    的话，就不能验证密码是否正确了。
    另一种方法，如果使用以用户 ID 为输入参数的函数的话，就不需要保存
    salt
    了，这是该方法的一个优点，和随机数比较起来，该方法没有明显的缺点。因此本书里比较推荐使用基于用户
    ID 的函数来产生 salt 值。salt 的实现例子可以参考后面的实现示例。
-   **对策 2：stretching（延展计算）**
    即使使用 salt，也不能降低暴力破解带来的危险。因为即使加上
    salt，也不会影响计算散列值所需要的时间。为了对抗暴力破解，需要让散列计算处理速度变慢。
    stretching（延展计算）是一种利用现有的 MD5 或者 SHA-1、SHA-256
    等散列函数，想办法增加计算散列值所需要时间的一种方法。它通过反复递归的调用散列函数来增加计算时间。具体的实现方法请参考下一小节。
-   **实现示例**
    下面的脚本是在上文的基础上，用来计算散列值的一个示例。
    > **代码清单 /51/51-001.php**
    ``` 代码无行号
    <?php
      // FIXEDSALT 要根据实际情况进行修改
      define('FIXEDSALT', 'bc578d1503b4602a590d8f8ce4a8e634a55bec0d');
      define('STRETCHCOUNT', 1000);
      // 生成 salt
      function get_salt($id) {
        return $id . pack('H*', FIXEDSALT);  // 将用户的 ID 和固定字符串连接起来
      }
      function get_password_hash($id, $pwd) {
        $salt = get_salt($id);
        $hash = '';  // 默认的散列值
        for ($i = 0; $i < STRETCHCOUNT; $i++) {
          $hash = hash('sha256', $hash . $pwd . $salt); // stretching
        }
      return $hash;
    }
    // 调用示例
    var_dump(get_password_hash('user1', 'pass1'));
    var_dump(get_password_hash('user1', 'pass2'));
    var_dump(get_password_hash('user2', 'pass1'));
    ```
    **执行结果**
    ``` 代码无行号
    string(64) "a44812a099b40ee49ffe2bd6c5de7403a1854e009ba9e2b417b9770d4ffac54b"
    string(64) "cc2c26c9a22d7318f48ed99e8915c6861559ade98e4df3dab64e51c7ea476389"
    string(64) "3fca4aab6f7bf9ed2ac855dbc0e22c148e7e23a137c497777e1e9269902571c8"
    ```
    `get_salt` 方法的输入参数为用户 ID，返回值是用于散列计算的
    salt。例子里只是简单地将用户 ID 和固定字符串用 `pack`
    函数从十六进制转换为二进制数据后连接在一起。通过使用二进制数据，可以达到增加字符种类的效果。
    `get_password_hash` 方法里面将密码原文和 salt 连起来后用 SHA-256
    算法进行了 1000 次的计算 [14]{.注释编号} ，这里之所以使用
    SHA-256，是因为它是目前来说比较安全的用在密码保存及其他领域的散列函数之一。
    如果每次调用 `get_password_hash` 方法时传递的 `$id` 和 `$pwd`
    参数的值都是一样的话，这个方法的返回值也会每次都一样，所以不需要在数据库里再额外保存
    salt 的值。
    stretching 次数（这里是 1000
    次）越高的话，对暴力破解等攻击的抵抗能力就越强。当然它也有不利的一面，就是与此同时它也会给服务器带来更高的负荷。如果负荷过高，则会给正常业务带来影响，甚至可能被人利用来发动
    DoS 攻击。所以这个 stretching