bitstream that were gathered through the analysis of the
output of the Xilinx ISE synthesis tool. After presenting
the in-vitro analysis on the bitstream, the section will de-
scribe the custom communication device we built to program
the FPGA and the measurement setup employed to record
the power consumption proﬁles of the Virtex-II Pro. Subse-
quently we describe the preliminary chip analysis oriented
at identifying the moment in time when the decryption is
performed and provide an analysis of the power proﬁle of
the device. The section then infers the inner architecture of
the DES decryption engine according to our ﬁndings about
the time instances in which the intermediate values are pro-
cessed. Finally, the precise attack techniques that allow to
recover the whole triple DES key used for the decryption
of the bitstream are illustrated and the minimal number of
traces required for the full-key recovery is determined.
3.1 Reverse Engineering of the Bitstream
As a ﬁrst step, the precise format of the bitstream needs to
be analyzed. Understanding the bitstream is a prerequisite
to ﬁnd out how the conﬁguration information is processed
by the internal decryption engine of the device. We assume
that the attacker is able to monitor the entire encrypted bit-
stream of the target FPGA, since the bitstream of an FPGA
115comprising just a single boolean gate. We synthesized the
test design once without activating the bitstream encryption
feature, to obtain an unencrypted bitstream, and then again
with varying keys for the encryption, producing several bit-
streams that are encrypted with the diﬀerent keys. In the
following we reveal the relevant details of the conﬁguration
by comparing the ﬁles containing the diﬀerent bitstreams.
The diﬀerences deduced from the comparison are summa-
rized in Fig. 2. The content of the bitstream is organized
in packets, preceded by a single 32-bit synchronization word
(namely, 0xAA995566). This initialization header is the same
for both encrypted and unencrypted bitstreams and has the
purpose to synchronize the FPGA logic and reset the in-
ner programming logic to a default state. After this phase,
the unencrypted variant of the bitstream simply consists of
a large packet with the whole conﬁguration information. In
contrast, the encrypted bitstream contains some extra infor-
mation for initializing the cryptographic engine. The ﬁrst
value indexes the ﬁrst key in the key storage to be employed
for the triple DES decryption. The two remaining keys are
determined by ﬂags marking two cells of the 6-keys buﬀer
as “middle” and “last”. After the key indexes, the value of
the IV required for the CBC mode is passed in plain. Fol-
lowing the IV value, the bitstream continues with a large
packet containing the whole conﬁguration information en-
crypted with triple DES. The writing command is the same
as for the unencrypted bitstream, with the exception of an
extra bit which is set to 1: we thus infer that setting the
bit eﬀectively enables the decryption engine. The next step
was to reverse-engineer how the 64-bit secret keys input to
the ISE synthesis tool are processed before being used for
the encryption of a bitstream. In contrast to the DES stan-
dard, which suggests either to discard the eighth bit of every
byte of the DES key or to employ it for a parity check, we
have discovered that the ISE tool discards the full ﬁrst byte
of the 64-bit supplied key in order to obtain the 56-bit key
for the DES encryption/decryption.This is done regardless
of the fact that the manuals point out that the ﬁrst byte
is employed only for key indexing in the storage. As a ﬁ-
nal check to all our inferences and in order to understand
the endianness of the bitstream, we generated a special bit-
stream that is encrypted with triple DES employing one of
the known weak keys of DES — the same for all three exe-
cutions of DES. These special weak keys have the property
that a DES encryption involving one of them becomes an
involutary operation, i.e., encrypting a second time with the
same weak key is identical to a decryption and hence yields
the plaintext. Through generating a bitstream that is en-
crypted with weak keys and with the IV of the CBC mode
set to zero, due to the properties of the CBC mode the sec-
ond 64-bit block contained in the bitstream is equal to the
plaintext corresponding to the ﬁrst block in the bitstream —
thus we obtain a correctly deciphered plaintext in the gen-
erated bitstream ﬁle. Comparing this deciphered plaintext
with the available unencrypted bitstream we conﬁrmed that
we correctly understood the triple DES engine input format
and in particular the order in which the bits are processed
internally.
Timing Issues.
The last information we were able to infer before tackling
the device pertains the minimum throughput of the internal
decryption engine. The Xilinx user guide reports that the
Figure 2: Comparison between the structure of an
encrypted and an unencrypted bitstream
retains the same size regardless of the design implemented
(the FPGA needs to be conﬁgured in full at least during
its boot phase). Moreover, in case the bitstream encryption
feature is enabled, the device cannot use the partial reconﬁg-
uration features — it is hence forced to perform a full recon-
ﬁguration for each update. To obtain the full (encrypted)
bitstream an attacker has two options: i) she can wire-tap
the data pin and command lines in order to eavesdrop on
the communication while the FPGA is being conﬁgured, or
ii) she can read out the content of the non-volatile memory
attached to the FPGA which is responsible to conﬁgure the
FPGA on power-ups. Note that this external memory is not
necessarily connected via JTAG, and feeding the encrypted
bitstream using diﬀerent conﬁguration schemes, e.g., Slave
Serial, is also possible, but this does not have any impact
on the attack that we present here. From now on, we as-
sume that the attacker is in possession of the full encrypted
bitstream through one of these methods.
Comparing Bitstreams.
While the Virtex-II Pro user guide [31] from Xilinx doc-
uments all the common conﬁguration registers and gives a
brief description of the inner addressing modes of the de-
vice, the internal registers driving the decryption are not
explicitly mentioned. The the Virtex-II Pro user guide [31]
describes the bitstream as split into packets which may tar-
get a speciﬁc conﬁguration register to set conﬁguration op-
tions, write to the SRAM conﬁguration memory, or toggle
internal signals, and are formed by a 32-bit header and a
variable length body. Depending on the packet length they
are split into two types: Type 1 packets may only handle a
body shorter than 211 − 1 32-bit words (i.e., 8 kB of data),
while Type 2 packets, used to write the bitstream to the
inner conﬁguration mechanisms, handle up to 227 − 1 words
(i.e., 512 MB of data). A peculiarity of the architecture man-
dates that only Type 1 packets may change the destination
of a read or write operation which is not changed during
a Type 2 packet operation. In order to understand which
parts of the bitstream drive the decryption, we start the re-
verse engineering on the basis of a very simple test design
FPGA LogicSynchronizationand StartupCRC-16 and finalizationWrite Plain BitstreamUnencryptedBitstreamFPGA LogicSynchronizationand StartupCRC-16 and finalizationSelect First Key + Key IDWrite IV + IV ValueWrite Enc. BitstreamTriple DES EncryptedBitstream116maximum clock rate to be externally supplied during JTAG
programming of an encrypted bitstream is fclk = 33 MHz.
In every clock cycle, one new bit of the bitstream is sup-
plied to the FPGA. This in turn implies that the triple DES
engine must be able to perform a full triple DES decryp-
tion of a 64-bit block in a time less than 64 × Tclk, where
Tclk = 1
denotes the duration of a clock cycle. This
fclk
gives us the expected time for a full triple DES of around
64 × Tclk = 1.94 µs which implies that, assuming all 48
rounds of the triple DES take roughly the same time, a sin-
gle round of the DES must be executed in around 40 ns.
Accordingly, the hypothesis of the DES being perfomed by
means of a software implementation running on an inter-
nal microcontroller becomes highly unlikely, since it would
be too slow — instead we now assume a hardware imple-
mentation. If the decryption was realized by implementing
one DES round in hardware and execute it 48 times for the
triple DES, the above details about the timing give a lower
bound for the clock rate of the inner cryptographic engine
of 24.75 MHz.
3.2 Customizing the Measurement Setup
After analyzing the format of the bitstream and the spec-
iﬁcations of the target device, we moved on to develop a
measurement workbench in order to record the power pro-
ﬁle of our target FPGA during its operation in a real-world
scenario. The ﬁrst step in this direction was to develop a
customized communication module that is able to correctly
conﬁgure an FPGA via JTAG. Hence, we designed an in-
system programmable board that is based on an Atmel AT-
Mega256 8-bit microcontroller and provides a JTAG port,
a universal serial bus (USB) as well as a dedicated pin for
triggering the oscilloscope. We implemented a framework
on the microcontroller comprising the JTAG protocol and
a serial protocol for communicating via USB. The ﬁrmware
allows to freeze the conﬁguration process through stopping
the clock signal fed to the Virtex-II Pro and enables to issue
the trigger signal to the oscilloscope before the clocking in
of any chosen bit, i.e., with a resolution of 125 ns. While the
ﬁxed header of the bitstream (see Fig. 2) ﬁts into the mem-
ory of the microcontroller, the remaining bits to be sent are
provided by the control PC and sent to the communication
module. The latter then wraps the bitstream in the JTAG
protocol and forwards it to the device under attack while
issuing trigger signals at the appropriate time instants.
As the target platform for attacking the bitstream en-
cryption we chose the customized FPGA development board
SASEBO [2]. It contains an XC2VP7 Virtex-II Pro FPGA
and provides stable and suitable voltages by means of on-
board voltage regulators. A JTAG connector is provided
to conﬁgure both the FPGA and a dedicated PROM which
are connected in a daisy chain form. During the analyses
we slightly modiﬁed the board by inserting resistors that
allow measuring the power consumption of the V CCIN T ,
V CCAU X and GN D paths. Similar modiﬁcations are also
required for attacking other real-world products comprising
a bitstream encryption.
A LeCroy WP715Zi digital oscilloscope with a maximum
sampling rate of 20 GSamples/s and an analog bandwidth
of 1.5 GHz was employed to record the instantaneous power
consumption of the target FPGA at a maximum vertical
precision of 2 mV/division.All the traces where acquired at
10 GSamples/s to avoid any possible aliasing due to under-
sampling. The program feeding the encrypted bitstreams to
our customized programmer and controlling the acquisition
of the power consumption traces runs on the oscilloscope it-
self, i.e., the communication module is connected to it via
USB. The employed probe connecting the oscilloscope to the
measurement resistor on the board is a LeCroy AP033 ac-
tive diﬀerential probe, which includes a low noise 10x analog
ampliﬁer that boosts the eﬀective vertical resolution of our
measurement subsystem to 200 µV/division.
For verifying that our setup allows to correctly conﬁgure
the target FPGA with custom (encrypted) bitstreams, we
again synthesized our test design comprising a single boolean
gate and connected the appropriate pins of the FPGA to two
external switches serving as inputs and an LED displaying
the output of the logical operation. Experimenting with var-
ious self-generated bitstreams, e.g., by means of arbitrary
IVs, we used the simple circuit as a practical means to de-
bug the proper conﬁguration of the FPGA and successfully
veriﬁed the functionality of our setup.
3.3 Timing and Power Proﬁle Analysis
With the framework for conﬁguring the FPGA and ac-
quiring its power consumption at hand we now proceed to
analyze the power proﬁle of the target FPGA, in order to
identify the point in time when the targeted triple DES
decryption takes place. We started our analyses from the
V CCIN T line, which, according to the speciﬁcations pro-
vided by Xilinx, powers the whole FPGA fabric and inner
circuits. This line turned out to be the actual line feeding
the decryption engine. For the sake of completeness, the
detection analyses have been repeated also on V CCAU X ,
which did not show any change in the power consumption
whether or not the decryption engine is enabled. We may
thus conclude that only V CCIN T is eﬀectively powering the
FPGA decryption engine. To record the power consumption
of the internal circuits connected to V CCIN T , there are two
options: the power consumption can be sampled either by
measuring the voltage drop across resistor between V CCIN T
and the device, or one between the device and GND.
Trying the second option ﬁrst, we detected a strong echo
from the ground plane, implying a strong variation of the oﬀ-
set of the measured power consumption that rendered the
power traces useless for further analysis. The disturbing ef-
fect turned out to be related to the activities at the input
and output ports of the FPGA during the conﬁguration, i.e.,
the communication via JTAG: the power consumption of all
voltage supply inputs (V CCIN T , V CCAU X and V CCO) is
summed up when measuring at the GND path, as a conse-
quence the data and clock signal of the JTAG port caused
the undesired variations in the oﬀset. As a remedy for the
problem we ﬁnally decided to acquire all our measurements
between V CCIN T and the device and thereby solely record
the power consumption of this pin, separated from all other
activities on the other power pins.
To learn more about the internal conﬁguration process
we performed tests with bitstreams that were generated in-
tentionally wrong, i.e., conﬁguring an FPGA with them re-
sults in an unpredictable behavior. During the tests, the
consumption of the FPGA spiked after a while, the device
heated up and the conﬁguration process eﬀectively stopped:
we proceeded no further in order to avoid damage to the
device. These ﬁndings let us suggest that the conﬁguration
information is written to the SRAM memory of the conﬁgu-
117ration fabric instantly upon reception of each conﬁguration
block, even before the actual boot command is given and
before the CRC checksum is properly veriﬁed.
The ﬁrst step in the detection of the time period in which
the decryption takes place was done through recording power
traces during the loading of 64 bits of the bitstream. Two
long traces have been collected: one from an encrypted bit-
stream and the other one from a plain bitstream.
(a) Not encrypted
(a) Not encrypted
(b) Encrypted
Figure 3: Raw measurements of the power consump-
tion at V CCIN T during the time period of the de-
cryption
Through comparison we spotted the key diﬀerence in power
consumption after the second bit of the 64-bit block is clocked
in. Fig. 3 depicts the power consumption of the FPGA for
the case of an encrypted bitstream (at the bottom) and its
unencrypted counterpart (at the top), revealing a clear in-
crement in the dynamic power consumption occurring at this
time instant only if the bitstream encryption feature is used.
Filtering the Measurements.
A strong oscillating signal with a frequency of 295 MHz
can be noticed in both traces. Being present also in the
unencrypted bitstream trace we followed the intuition that
it is not related to the decryption engine and tried to remove
it by means of a band block ﬁlter. The latter is realized in