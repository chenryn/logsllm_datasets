ate an onion-encrypted payload SPf encapsulating conﬁdential
data to send to the destination.
i
i
• UNWRAP_SPHX_PL_SEND. The function removes the last en-
cryption layer added by GEN_SPHX_PL_SEND, and allows the
destination to decrypt the SPf .
recover the plaintext of the payload that the destination sent.
• GEN_SPHX_PL_RECV. The function enables the destination to
cryptographically wrap a data payload into SPb before sending it
to the source.
• UNWRAP_SPHX_PL_RECV. The function allows the source to
• PROC_SPHX_PKT. Intermediate nodes use this function to pro-
cess a Sphinx packet, and establish symmetric keys shared with
the source. The function takes as inputs the packet (SHDR, SP),
and the node’s DH public key g
. The function outputs the
processed Sphinx packet (SHDR(cid:48), SP(cid:48)) and the established sym-
metric key sdir
4.3.2 Forwarding Segment
We extend Sphinx to allow each node to create a Forwarding
Segment (FS) and add it to a data structure we name FS payload
(see below). An FS contains a node’s per-session state, which con-
sists of a secret key s shared with the source, a routing segment R,
and the session’s expiration time EXP. To protect these contents, the
FS is encrypted with a PRP keyed by a secret value SV known only
by the node that creates the FS. A node seals and unseals its state
using two opposite functions: FS_CREATE and FS_OPEN. They are
deﬁned as follows:
xndir
.
i
i
FS = FS_CREATE(SV, s, R, EXP) =
= PRP(hPRP(SV );{s(cid:107) R(cid:107) EXP})
{s(cid:107) R(cid:107) EXP} = FS_OPEN(SV,FS)
= PRP−1(hPRP(SV );FS)
(1)
(2)
4.3.3 FS Payload
At the end of each HORNET setup packet is a data structure
we call FS payload (see Figure 1). The FS payload is an onion-
encrypted construction that allows intermediate nodes to add their
FSes as onion-layers.
Processing the FS payload leaks no information about the path’s
length or about an intermediate node’s position on the path. All
FS payloads are padded to a ﬁxed length, which is kept constant
by dropping the right number of trailing bits of the FS payload
before an FS is added to the front. Moreover, new FSes are always
added to the beginning of the FS payload, eliminating the need for
intermediate nodes to know their positions in order to process FS
payloads.
An FS payload also provides both secrecy and integrity for the
FSes it contains. Each node re-encrypts the FS payload after in-
serting a new FS and computes a MAC over the resulting structure.
Only the source, with symmetric keys shared with each node on a
path, can retrieve all the FSes from the FS payload and verify their
integrity.
Functions. There are three core functions for the FS payload:
INIT_FS_PAYLOAD, ADD_FS, and RETRIEVE_FSES.
INIT_FS_PAYLOAD. A node initializes an FS payload by using a
pseudo-random generator keyed with a symmetric key s to generate
rc random bits:
P = PRG1(hPRG1(s))
(3)
where c = |F S| + k is the size of a basic block of the FS payload
(consisting of an FS and a MAC).
ADD_FS. Each intermediate node uses ADD_FS to insert its FS
into the payload, as shown in Algorithm 1. First, the trailing c bits
1445Algorithm 1 Add FS into FS payload.
1: procedure ADD_FS
Input: s, FS, Pin
Output: Pout
Ptmp ←(cid:110)
(cid:111)
⊕PRG0(hPRG0(s))[k..end]
FS(cid:107) Pin[0..(r−1)c−1]
2:
α ← MAC(hMAC(s); Ptmp)
Pout ← α(cid:107) Ptmp
3:
4:
5: end procedure
Algorithm 2 Retrieve FSes from FS payload.
1: procedure RETRIEVE_FSES
Input: P , s, {si}
Output: {F Si}
Pinit ← INIT_FS_PAYLOAD(s)
ψ ← Pinit[(r−l)c..rc−1]
⊕PRG0(hPRG0(s0))[(r−l+1)c..end] (cid:107) 0c
⊕PRG0(hPRG0(s1))[(r−l+2)c..end] (cid:107) 02c
⊕PRG0(hPRG0(sl−2))[(r−1)c..end] (cid:107) 0(l−1)c
···
Pf ull = P (cid:107) ψ
for i ← (l− 1), . . . , 0 do
check Pf ull[0..k−1] =
MAC(hMAC(si); Pf ull[k..rc−1])
Pf ull ← Pf ull ⊕ (PRG0(hPRG0(si))(cid:107) 0(i+1)c)
FSi ← Pf ull[k..c−1]
Pf ull ← Pf ull[c..end]
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end procedure
end for
of the current FS payload, which are padding bits containing no
information about previously added FSes, are dropped, and then
the FS is prepended to the shortened FS payload. The result is
encrypted using a stream cipher (Line 2) and MACed (Line 4).
Note that no node-position information is required in ADD_FS, and
verifying that the length of the FS payload remains unchanged is
straightforward.
RETRIEVE_FSES. The source uses this function to recover all
FSes {F Si} inserted into an FS payload P . RETRIEVE_FSES starts
by recomputing the discarded trailing bits (Line 3) and obtaining a
complete payload Pf ull. Thus, intuitively, this full payload is what
would remain if no nodes dropped any bits before inserting a new
FS. Afterwards, the source retrieves the FSes from Pf ull in the
reverse order in which they were added by ADD_FS (see lines 6
and 8).
4.3.4 Setup Phase Protocol Description
Source processing. With the input
(cid:110)(cid:0)xS, gxS(cid:1) ,
(cid:110)
I =
xndir
i
g
(cid:111)
, pdir(cid:111)
the source node S bootstraps a session setup in 5 steps:
1. S selects the intended expiration time EXP for the session and
speciﬁes it in the common header CHDR (see Section 3.3).4
4EXP must not become an identiﬁer that allows matching packets
of the same ﬂow across multiple links. Since EXP does not change
during setup packet forwarding, a coarser granularity (e.g., 10s) is
desirable. In addition, the duration of the session should also have
2. S generates the send and the reply Sphinx headers by:
{SHDRf , SHDRb} = GEN_SPHX_HDR(I, CHDR)
(4)
The common header CHDR (see Figure 1) is passed to the func-
tion to extend the per-hop integrity protection of Sphinx over it.
GEN_SPHX_HDR also produces the symmetric keys shared with
each node on both paths {sdir
i }.
3. In order to enable the destination D to reply, S places the reply
Sphinx header SHDRb into the Sphinx payload:
SPf = GEN_SPHX_PL_SEND({sf
i }, SHDRb)
(5)
4. S creates an initial FS payload P f = INIT_FS_PAYLOAD(xS).
5. S composes P = {CHDR(cid:107) SHDRf (cid:107) SPf (cid:107) P f} and sends it to
the ﬁrst node on the forward path nf
0 .
Intermediate node processing. An intermediate node nf
i receiv-
ing a packet P = {CHDR (cid:107) SHDRf (cid:107) SPf (cid:107) P f} processes it as
follows:
1. nf
i ﬁrst processes SHDRf and SPf in P according to the
Sphinx protocol (using PROC_SPHX_PKT). As a result nf
i ob-
tains the established symmetric key sf
i shared with S, the pro-
, SPf (cid:48)
cessed header and payload (SHDRf (cid:48)
) as well as the rout-
ing information Rf
i . During this processing the integrity of the
CHDR is veriﬁed.
2. nf
i obtains EXP from CHDR and checks that EXP is not expired.
nf
i also veriﬁes that Rf
i generates its forwarding segment FSf
3. nf
metric key SV f
i
FSf
i by using its local sym-
i , and EXP (see Equation 1):
i = FS_CREATE(SV f
i , sf
(6)
i into the FS payload P f .
P f (cid:48)
i , F Sf
(7)
i assembles the processed packet P = {CHDR(cid:107)
SHDRf (cid:48) (cid:107) SPf (cid:48) (cid:107) P f (cid:48)} and routes it to the next node according
to the routing information Rf
i .
5. Finally node nf
i adds its FSf
= ADD_FS(sf
to encrypt sf
i is valid.
i , P f )
i , EXP)
i , Rf
i , Rf
4. nf
Destination processing. As the last node on the forward path, D
processes P in the same way as the previous nodes. It ﬁrst pro-
cesses the Sphinx packet in P and derives a symmetric key sD
shared with S, and then it encrypts per-session state, including sD,
into F SD, and inserts F SD into the FS payload.
After these operations, however, D moves on to create the sec-
ond setup packet P as follows:
1. D retrieves the Sphinx reply header using the symmetric key
sD:
SHDRb = UNWRAP_SPHX_PL_SEND(sD, SPf )
(8)
2. D places the FS payload Pf of P into the Sphinx payload SPb
of P (this will allow S to get the FSes {FSf
i }):
SPb = GEN_SPHX_PL_RECV(sD, P f )
(9)
Note that since D has no knowledge about the keys {sf
i } except
for sD, D learns nothing about the other FSes in the FS payload.
only a restricted set of possible values (e.g., 10s, 30s, 1min, 10min)
to avoid matching packets within long sessions. For long-lived con-
nections, the source can create a new session in the background
before expiration of the previous one to avoid additional latency.
14463. D creates a new FS payload P b = INIT_FS_PAYLOAD(sD) to
4. D composes P = {CHDR(cid:107) SHDRb (cid:107) SPb (cid:107) P b} and sends it to
collect the FSes along the backward path.
the ﬁrst node on the backward path, nb
0.
The nodes on the backward path process P in the exact same
way nodes on the forward path processed P. Finally P reaches
the source S with FSes {FSb
Post-setup processing. Once S receives P it extracts all FSes,
i.e., {FSf
1. S recovers the FS payload for the forward path P f from SPb:
i} added to the FS payload.
i}, as follows:
i } and {FSb
P f = UNWRAP_SPHX_PL_RECV({sb
(10)
2. S retrieves the FSes for the nodes on the forward path {FSf
i }:
(11)
i } = RETRIEVE_FSES({sf
i }, P f )
i}, SPb)
{FSf
3. S directly extracts from P bthe FSes for the nodes on the back-
i}:
ward path {FSb
i} = RETRIEVE_FSES({sb
{FSb
With the FSes for all nodes on both paths,(cid:8)FSf
i}, P b)
(cid:9) and(cid:8)FSb
(12)
(cid:9), S
i
i
is ready to start the data transmission phase.
4.4 Data Transmission Phase
Each HORNET data packet contains an anonymous header AHDR
and an onion-encrypted payload O as shown in Figure 1. Figure 2
illustrates the details of an AHDR. The AHDR allows each inter-
mediate node along the path to retrieve its per-session state in the
form of an FS and process the onion-encrypted data payload. All
processing of data packets in HORNET only involves symmetric-
key cryptography, therefore supporting fast packet processing.
Figure 2: Format of a HORNET anonymous header with de-
tails of a forwarding segment (FS).
At the beginning of the data transmission phase, S creates two
AHDRs, one for the forward path (AHDRf ) and one for the back-
ward path (AHDRb), by using FSes collected during the setup phase.
AHDRf enables S to send data payloads to D. To enable D to trans-
mit data payloads back, S sends AHDRb as payload in the ﬁrst data
packet. If this packet is lost, the source would notice from the fact
that no reply is seen from the destination. If this happens the source
simply resends the backward AHDR using a new data packet.
4.4.1 Anonymous Header
Like an FS payload, an AHDR is an onion-encrypted data struc-
ture that contains FSes.
It also offers the same guarantees, i.e.,
secrecy and integrity, for the individual FSes it contains, for their
number and for their order. Its functionalities, on the other hand,
are the inverse: while the FS payload allows the source to collect
the FSes added by intermediate nodes, the AHDR enables the source
to re-distribute the FSes back to the nodes for each transmitted data
packet.
Algorithm 3 Process an AHDR.
1: procedure PROC_AHDR
Input: SV , AHDR