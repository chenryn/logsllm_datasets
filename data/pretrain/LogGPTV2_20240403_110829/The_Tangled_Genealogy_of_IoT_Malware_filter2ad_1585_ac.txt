For instance, the analyst can use only best matches if the goal
is to highlight perfect similarity (e.g., code reused as is) between
two binaries, or a combination of best and partial matches if we
want to capture more generic dependencies between two binaries,
including minor variations and “evolutions” of the code.
Another problem with the similarity graph is that it contains
a large number of edges, with many samples being variations (or
simple recompilation) of the same family. Therefore, to make the
output more readable and better emphasize the evolution lines, in
our graphs we visualize the Minimum Spanning Tree (MST) G′ of
G that shows the path of minimum binary difference among all
samples. This approach to cluster binaries is inspired by the works
in clustering literature that are based on the minimum spanning
tree (MST) of the pairwise distance matrix between elements [4, 11].
Furthermore, we observed that MSTs—which are in general
used as an intermediate representation of the clustering structure—
faithfully convey information about the relationships between items
in our dataset which is not always preserved when converting the
MST to a set of clusters. For this reason, we base our analysis on
minimum spanning trees.
The tree can be further colored according to AV labels (to get
an overview of the relationships among different families and spot
erroneous labels assigned by AV engines) or to the closest source
file we downloaded using the symbol names (thus leading to a more
clear picture of the genealogy of a single malware family). In the
next sections we will explore these two views and present a number
of examples of the main findings.
4 RESULTS
We used the workflow for code-based clustering presented in the
previous section to plot phylogenetic trees for the six top archi-
tectures in our dataset. We found that the current IoT malware
scene is mainly invaded by three families tightly connected to each
other: Gafgyt, Mirai and Tsunami. They contain hundreds of vari-
ants grouped under the same AV label and are the ones with longer
Table 3: Common functions across top10 malware families.
VS
t
y
g
f
a
G
i
a
r
i
M
i
m
a
n
u
s
T
p
m
a
s
n
D
e
m
i
j
a
H
f
t
s
o
d
D
115
189
63
3
1
4
1
1
-
-
2
-
3
65
-
Gafgyt
Mirai
Tsunami
Dnsamp
Hajime
Ddostf
Lightaidra
Pnscan
Skeeyayh
VPNFilter
a
r
d
i
a
t
h
g
i
L
18
2
1
-
-
-
n
a
c
s
n
P
h
a
y
e
e
k
S
r
e
t
l
i
F
N
P
V
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
persistence on VirusTotal. All three started to present fused traits
over time and they still hit on VirusTotal. On the other hand, more
specialized IoT malware targets specific CPU architectures and
have a much shorter appearance. Today IoT malware code is not as
complex as the one found in Windows malware, yet AVs may lose
robustness when it comes to identifying widely reused functions
and packed samples.
As described in Section 3.5, the distance function we used for
the HNSW algorithm is based on the number of functions with
binary similarity ≥ 0.5 (as suggested by Diaphora). The analyst
can then adjust this threshold when plotting the graphs to either
display even uncertain similarities among families (at 0.5 threshold)
or highlight only the perfect matches of exact code reuse (at 1.0
threshold).
4.1 Code Reuse
Figure 3 shows the lineage graph for MIPS samples plotted at sim-
ilarity ≥ 0.9 and with node colored according to their AVClass
labels.
Overall, MIPS samples include 39 different labels. However, the
graph is dominated by few large families: Gafgyt, Tsunami and
Mirai. These three families cover 87% of the MIPS samples and they
are also the ones that served as inspiration for different groups of
malware developers, most likely because of the fact their source
code can be found online. It is interesting to note how this tangled
dependency is reflected in the fact that the most of the Tsunami
variants are located on the left side of the picture close to Gafgyt,
but some of them appear also on the right side due to an increased
number of routines borrowed from the Mirai code.
Besides these three main players, the graph also shows samples
without any label or belonging to minor families. For example,
the zoom region [A] contains a small connected component of
283 Dnsamp samples with a tail of 4 samples: 1 with label Ganiw
and 3 with label Kluh. All together are linked to ChinaZ, a group
known for developing DDoS ELF malware. The very high similarity
between Ganiw and Kluh seems to be more interesting, since Kluh
could be seen as an evolution of the first (and appeared 3 months
after on VirusTotal), yet AVs assign them different labels.
Table 3 reports the number of shared functions (at 0.9 similarity)
across the top 10 families in our dataset and takes into account
The Tangled Genealogy of IoT Malware
ACSAC 2020, December 7–11, 2020, Austin, USA
Figure 3: Lineage graph of MIPS samples colored by family.
Table 4: Outlier samples and AVClass labels
Architecture
ARM 32-bit
MIPS I
PowerPC
SPARC
Hitachi SH
Motorola 6800
Total
Number of samples
Wrong label Without label
Total
19
25
1
2
7
8
62
9
41
4
0
0
2
56
28
66
5
2
7
10
118
the full picture of the six main architectures. The code sharing
for Mirai, Gafgyt and Tsunami is once again confirmed to play
a fundamental role in IoT malware with hundreds of functions
shared across the three. However, we can see their incidence in
minor families like Dnsamp, which borrows functions for random
numbers generation and checksum computations, or Lightaidra,
reusing 18 functions from Gafgyt. Less widespread families such
as Dnsamp and Ddostf also show high similarity with a total of 65
shared functions. Instead, targeted campaigns like VPNFilter do not
overlap with main components of the famous families.
4.2 Outliers and AV Errors
One of the analysis we can perform on the phylogenetic trees is
the detection of anomalous labels, by looking for outlier nodes. We
define as outlier a (set of) nodes of one color which is part of a
cluster that contains only nodes of a different color. Outliers can
correspond to samples that are misclassified by the majority of AV
scanners or to variants of a given family that have a considerable
amount of code in common with another family (and for which,
therefore, it is difficult to decide which label is more appropriate).
But outlier can also be used to assign a label, based on its neighbors,
to samples for which AVClass did not return one.
Although the number of mislabelled samples is not significant in
our dataset, we can use our automated pipeline to promptly detect
suspicious cases in newly collected data. The outliers discussed in
this section also show that a very high ratio of code similarity can
often confuse several AV signatures.
Based on a manual inspection of each group of outliers, Table 4
reports a lower bound estimation of the mislabelling cases broken
down by architecture. Overall we found 118 cases with 62 samples
we believe to have a wrong AVClass label and 56 for which AVClass
was not able to agree on the AV labels. ARM and MIPS (which cover
66% of our dataset) are responsible for over 80% of the errors, with
MIPS samples being apparently the most problematic to classify.
The pattern is reversed for less popular architectures, like Hitachi
SH and Motorola 68000 (13.3% of the dataset) that account for
ABGafgytMiraiTsunamiDnsampACSAC 2020, December 7–11, 2020, Austin, USA
Cozzi, et al.
Table 5: Number of variants recognized for top 10 families in
our dataset. Malware families with - contained only stripped
samples which prevented any accurate variant identifica-
tion.
Family
Gafgyt
Mirai
Tsunami
Dnsamp
Hajime
Ddostf
Lightaidra
Pnscan
Skeeyah
VPNFilter
Total
Candidate Validated
Variants
(Source
code)
Variants
Number of samples
Persistence (days)
Min. Max. Avg. Max.
Avg.
1428
386
210
48
1
11
7
1
-
-
240
140
57
27
4
1
3
7
1
-
-
2091
1
1
1