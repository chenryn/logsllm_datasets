```  
持续插入离散值(uuid)的测试结果如下 :   
```  
digoal=> alter table test_text_pk drop constraint test_text_pk_pkey;  
ALTER TABLE  
digoal=> alter table test_uuid_pk drop constraint test_uuid_pk_pkey;  
ALTER TABLE  
insert into test_text_pk (id) values (uuid_generate_v4());  
```  
插入5000W数据 :   
```  
pgbench -M prepared -n -j 8 -c 8 -t 6250000 -f ./pgbench.sql -U digoal digoal   
```  
新建PK约束 :   
```  
\c digoal digoal  
insert into test_text_pk (id) values (uuid_generate_v4());  
set work_mem='4096MB';  
set maintenance_work_mem='4096MB';  
alter table test_text_pk add constraint test_text_pk_pkey primary key(id) using index tablespace tbs_digoal_idx;  
\c digoal postgres  
checkpoint;  
```  
测试 :   
```  
pg9.2.0@db-172-16-3-150-> pgbench -M prepared -n -j 8 -c 8 -T 60 -f ./pgbench.sql -U digoal digoal   
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 8  
duration: 60 s  
number of transactions actually processed: 212645  
tps = 3528.551941 (including connections establishing)  
tps = 3529.030665 (excluding connections establishing)  
```  
TOP数据 :   
```  
Tasks: 249 total,   2 running, 247 sleeping,   0 stopped,   0 zombie  
Cpu(s):  3.7%us,  4.0%sy,  0.0%ni, 78.3%id, 13.8%wa,  0.0%hi,  0.3%si,  0.0%st  
Mem:  98992440k total, 92512088k used,  6480352k free,   760656k buffers  
Swap:  8385920k total,       60k used,  8385860k free, 88177048k cached  
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                  
10378 pg9.2.0   16   0 1184m 320m 318m S  6.5  0.3   0:04.43 postgres: digoal digoal [local] INSERT                                   
10374 pg9.2.0   16   0 1184m 324m 322m S  5.9  0.3   0:04.54 postgres: digoal digoal [local] INSERT                                   
10375 pg9.2.0   16   0 1184m 321m 319m D  5.9  0.3   0:04.42 postgres: digoal digoal [local] INSERT                                   
10376 pg9.2.0   16   0 1184m 320m 318m S  5.9  0.3   0:04.46 postgres: digoal digoal [local] INSERT                                   
10377 pg9.2.0   16   0 1184m 325m 323m S  5.9  0.3   0:04.50 postgres: digoal digoal [local] INSERT waiting                           
10380 pg9.2.0   16   0 1184m 324m 322m S  5.9  0.3   0:04.49 postgres: digoal digoal [local] INSERT                                   
10379 pg9.2.0   16   0 1184m 328m 326m S  5.2  0.3   0:04.58 postgres: digoal digoal [local] INSERT                                   
10381 pg9.2.0   15   0 1184m 317m 315m S  4.6  0.3   0:04.37 postgres: digoal digoal [local] INSERT                                   
10365 pg9.2.0   15   0  256m 2088 1520 S  3.9  0.0   0:03.61 pgbench -M prepared -n -j 8 -c 8 -T 60 -f ./pgbench.sql -U digoal digoa  
```  
IOSTAT 数据 :   
```  
avg-cpu:  %user   %nice %system %iowait  %steal   %idle  
           3.13    0.00    4.63   19.90    0.00   72.34  
Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util  
sda               0.00  1113.86  0.00 597.03     0.00 17964.36    30.09   144.10  236.67   1.66  99.01  
sda1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
sda2              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
sda3              0.00  1113.86  0.00 597.03     0.00 17964.36    30.09   144.10  236.67   1.66  99.01  
sdb               0.00  7987.13  0.00 82.18     0.00 38114.85   463.81    35.87  280.34  10.96  90.10  
dm-0              0.00     0.00  0.00 8123.76     0.00 64990.10     8.00  2162.83  166.67   0.11  90.10  
dm-1              0.00     0.00  0.00 1700.99     0.00 13607.92     8.00   711.46  415.44   0.58  99.01  
dm-2              0.00     0.00  0.00 8123.76     0.00 64990.10     8.00  2162.84  166.67   0.11  90.10  
```  
3\. 测试没有索引的情况.  
在没有索引的情况下, uuid, text, int8的插入速度都很快, 关键是IO等待都在0点几左右. IO不再是问题. 这更加印证了连续插入离散值会带来索引的大量IO开销的事实.  
## 小结  
1\. 在做主键的类型选择时, 尽量不要使用UUID类型的字段, 如果要使用, 请使用有序生成的UUID, 不要使用无序生成的UUID.  
如果不是主键，仅仅是普通索引，而且没有排序、>, =, <=的查询需求的话，可以建立hash index，而不是b-tree索引。  
HASH INDEX可以解决无序数据频繁写入带来的b-tree索引也频繁分裂的问题。  
2\. 使用离散uuid值和text类型作为主键的IO等待大概是6%, int8作为主键IO等待大概是0.25% , 从这里看使用离散uuid作为主键值带来的IO开销是使用序列插入int8类型字段带来IO开销的24倍. 当表里面的数据越多, 使用离散uuid作为主键值带来的IO开销会越来越大, 与INT8的性能相差就更加大了. 几百倍都有可能.  
3\. checkpoint时, UUID索引所在的硬盘有大量的IO操作, 持续时间较长. 而表数据文件所在的硬盘IO操作很快完成.  
4\. 使用perf 可以更详细的观察到代码层面的瓶颈，佐证以上问题。  
[《PostgreSQL 源码性能诊断(perf profiling)指南》](../201611/20161129_01.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")