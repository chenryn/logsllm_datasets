ℓ∗
vi
= ln(L∗
vi) =
ln(edдeL(ej,i))
Following up on the earlier example given in Section 4.5 with
nodes A, B, C, D where C is a Sybil and the D → A edge is the
only edge to have failed randomly, the transformed probabilistic
proximity graph that would be created is depicted by Fig. 5 below.
Figure 5: Probabilistic proximity graph derived by apply-
ing the WiFi Direct prob function to the scenario from Sec-
tion 4.5, assuming shown locations to be at scale and with
dist(eA,B , rnd(eA,B)) = 12.5m. Incoming-edge-L∗
v values are
shown for every node; the Sybil’s value is noticeably low,
and the difference only becomes more extreme with higher
quantities of nodes.
5.2 Evaluating a Node’s Log-Likelihood
As Sybils are likely to exhibit lower likelihood values (and thereby
lower log-likelihood values) for their incoming edge sets, we deem
suspicious nodes with low ℓ∗ values. However, a node’s observed
ℓ∗ value is a realization of a random vector whose distribution is
dependent on the exact scenario of the total number of nodes and
their round-wise locations, and consequently a “low" threshold
does not have an absolute measure and is graph-dependent.
To find this distribution, we first define binary random variables
Xj,i each of which has two possible outcomes: the log-likelihood
value given a success of edge ej,i, and given its failure. While these
variables are mutually dependent through the node locations, they
become mutually independent once those locations are fixed when
the graph is formed. The Xj,i are defined as follows:
with probability pj,i
ln(pj,i)
ln(1 − pj,i) with probability 1 − pj,i
Xj,i =
(cid:40)
The total log-likelihood of all incoming edges into a node is given
, defined as the sum of the individual
by the random variable ℓvi
Xj,i variables:
=
Xj,i
ℓvi
As such, the observed ℓ∗
vi
j(cid:44)i
value of node vi is one particular
random variable. We deem vi a Sybil candidate
is so small that it falls under
realization of the ℓvi
if the p-value ρvi
the 5σ boundary (chosen empirically), namely when:
of its observed ℓ∗
vi
N
= P(ℓvi ≤ ℓ∗
vi) ≤ (3.5 ∗ 106)−1
.
ρvi
The probability density of ℓvi
may be computed directly by
evaluating every possible combination of edge outcomes, but this is
exponential in nature (of order 2N 2). It is possible to optimize this
process losslessly by computing the outcomes in a strict increasing
order, terminating early when their combined likelihoods exceed
the threshold and checking whether the observed value ℓ∗
is within
vi
the range of this computed left-tail. It is also possible to approximate
this computation by quantizing the values of the Xj,i variables,
allowing them to be bundled together, thereby greatly reducing
the number of distinct computations necessary. Neither of these
approaches fundamentally alters the exponential runtime however,
and thus both remain impractical.
5.3 Lyapunov’s CLT Approximation
To obtain the probability density of a particular node’s log-likelihood
random variable ℓvi
within practical time constraints, we accurately
approximate it via the Central Limit Theorem (CLT) in linear time.
As the random variable ℓvi
is a sum of independent but differently-
distributed random variables Xj,i, each with a bounded expectation
and bounded variance, we use Lyapunov’s version of the CLT to
deduce that ℓvi
is approximately normal. For Lyapunov’s CLT the-
orem to apply, it suffices to have the following condition hold for
some single value of δ > 0:
N
E
j(cid:44)i
(cid:104)(cid:12)(cid:12)Xj,i − E[Xj,i](cid:12)(cid:12)2+δ(cid:105)
N→∞−−−−−→ 0
We prove that this condition holds for Xj,i variables in proximity
graphs by setting δ = 2, finding an upper bound on the numerator
and a lower bound on the denominator, and showing that this total
upper bound on the fraction vanishes at the limit. Note that while
the numerator and denominator are not independent, examining
these two bounds separately can only yield a tighter bound.
Firstly, the value of each individual summand in the numerator—
as function over pj,i values—is shown in the left graph in Fig. 6.
Each summand is upper-bound by 5, giving the following upper
bound on the sum of N of these terms:
2+δ
N
s
(cid:104)(cid:12)(cid:12)Xj,i − E[Xj,i](cid:12)(cid:12)4(cid:105)
(cid:104)(cid:12)(cid:12)Xj,i − E[Xj,i](cid:12)(cid:12)4(cid:105)
⇒ N
E
E
j(cid:44)i
 γ Nη
With an upper bound on the numerator and a lower bound on
the denominator, we show that the Lyapunov condition is indeed
satisfied as the fraction vanishes with increasing N :
N
E
j(cid:44)i
(cid:104)(cid:12)(cid:12)Xj,i − E[Xj,i](cid:12)(cid:12)4(cid:105)
(s
N )2
2
(cid:19)
(cid:18) 1
N
5N
2
N
η
<
2
γ
2 = o
With the condition satisfied, we have that the sum of demeaned
and normalized Xj,i variables is approximately normal:
N
Xj,i − E[Xj,i]
D−−−→ N(0, 1)
j(cid:44)i
sn
We additionally verified this normal approximation empirically
to be extremely accurate even with as few as 22 nodes by randomly
generating moving nodes, simulating communication, obtaining
corresponding pj,i values, and then directly computing the proba-
bility densities for each node. Sample probability densities for the
log-likelihood of a typical node in models with 14, 18, and 22 total
nodes are shown in Fig. 7.
Figure 7: Distribution of summed log-likelihood of a typi-
cal node in a model with 14, 18, and 22 nodes respectively
(computed directly). Typical scenarios have over 100 nodes,
which allow for an even better normal approximation.
5.4 Sybil Identification Procedure
We outline the procedure to obtain the p-value for a node’s ob-
served log-likelihood value, utilizing the density approximation
via Lyapunov’s CLT, in the algorithm below. In this algorithm, the
observed value, the mean, and the variance of every edge (treated
as a random variable) is summed. Then, the left-tail p-value sum of
the observed variables is found from a Gaussian parametrized by
the mean-sum and variance-sum.
j = source_node_id(edge)
if j (cid:60) known_sybils then
llh ← 0
mean ← 0
var ← 0
for edge in edges_of_node(i) do
Algorithm 2 Computing the p-value of a Node’s log-likelihood ℓ∗
1: procedure node_llh_pval(i, known_sybils)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
E[X] ← (pj,i)ln(pj,i) + (1 − pj,i)ln(1 − pj,i)
E[X
llh += ln(edдeL(ej,i))
mean += E[X]
var += E[X
2] − E[X]2
Z ← llh−mean
√
var
pval ← inv_norm(Z)
return pval
2] ← (pj,i)ln(pj,i)2 + (1 − pj,i)ln(1 − pj,i)2
Perhaps the simplest algorithm for identifying Sybils is to sim-
ply assume that all Sybil candidates – those nodes with a log-
likelihood’s p-value lower than the 5σ left tail are, in fact, all Sybils.
We denote this method as the Simple Sybil Detection procedure,
and outline the algorithm below.
sybils ← []
for j = 1 ... N do
Algorithm 3 Simple Sybil Detection
1: procedure simple_sybil_detection
2:
3:
4:
5:
6:
7:
pval ← node_llh_pval(i, [])
if pval ≤ (3.5 ∗ 106)−1 then
sybils.append(i)
return sybils
While our simulation results show that this procedure is actually
very effective in practice, it nonetheless disregards the reinforc-
ing effect Sybils have on each others’ p-values and similarly their
diminishing effect on honest nodes’ p-values. To account for this
compounding effect, we propose the Iterative Sybil Detection
procedure.
Algorithm 4 Iterative Sybil Detection
1: procedure iterative_sybil_detection
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
sybils ← []
while true do
pvals ← []
for i = 1 ... N do
min ← argmin(pvals)
if pval[min] ≤ (3.5 ∗ 106)−1 then
sybils.append(min)
else
return sybils
pvals[i] ← node_llh_pval(i, sybils)
In this procedure, we perform a sequence of p-value compu-
tations for all nodes, declaring the single most suspicious node
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan739as a Sybil in every iteration and removing it from all further p-
value computations for all subsequent iterations. In this manner,
we crumble the entire Sybil network one Sybil at a time, as every
Sybil typically becomes increasingly more suspicious the fewer of
them remain. We demonstrate the superior performance of this
technique in Section 6.
6 SIMULATION OVERVIEW AND RESULTS
In order to examine the efficacy of our model, we built a to-scale
simulator that mimics the entire validation process (in python),
from generating the nodes, to generating a communications plan,
simulating its execution, employing the adversarial obfuscation
techniques, and analyzing the created proximity graph. The simu-
lator is publicly available on github2 and uses the SyPy library[12]
for comparative graph-detection methods. Each simulation run has
the following flow:
(1) Terrain layout is generated.
(2) Nodes can either be imported or generated using a simple
spawner which spawns clusters of specified dimensions, lo-
cations, and node types (‘hon’, ‘syb’, ‘mal’). Spawned nodes
have speeds sampled from N(1.3ms−1
, 0.2ms−1)[15].
(3) A set of nodewise state sequences is generated, detailing
whether a given node in a given round: is idle, listens, or
broadcasts a unique key.
* Impersonation: In every round, a subset of listening ma-
licious nodes instead broadcasts on behalf of Sybils.
(4) In every round, for every listener–broadcaster pair, a random
binary outcome is generated as described in Section 5. If the
outcome succeeds or if this is a Sybil–Sybil/Sybil–malicious
pair, broadcaster’s key is added to listener’s seen list.