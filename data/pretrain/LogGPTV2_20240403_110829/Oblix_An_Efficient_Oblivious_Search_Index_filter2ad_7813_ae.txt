### Framework for Doubly-Oblivious Data Structures (DODS)

Our framework for doubly-oblivious data structures (DODS) formalizes the aforementioned concepts by providing a richer interface that allows fine-grained control over memory accesses to internal memory. Below, we summarize the interface and implementation of each algorithm in this framework.

- **Initialization: DODS.Init**
  - Similar to ODS.Init, but calls DORAM.Init instead of ORAM.Init.
  
- **Start: DODS.Start(mut st, ptr) → (st, ptr)**
  - Equivalent to ODS.Start.
  
- **Access: DODS.AccessS(mut st, op) → res**
  - The input now has the form "op(data, dummy, isCached)". There are four cases:
    - `dummy = 1, isCached = ?`: Perform a dummy ReadBlock.
    - `dummy = 1, isCached = 1`: Fetch a dummy node from the cache without performing a dummy ReadBlock.
    - `dummy = 0, isCached = 1`: Fetch an actual node from the cache.
    - `dummy = 0, isCached = ?`: Perform a ReadBlock to fetch a real (non-dummy) node. If the queried node is already cached, perform a dummy ReadBlock.

- **Finalize: DODS.FinalizeS(mut st, node, bound) → ptr**
  - Similar to ODS.Finalize, but it does not perform additional dummy operations. Instead, it checks that the number of DORAM.ReadBlock operations thus far equals the specified bound. Ensuring this condition is the responsibility of the data structure designer. (In ODS, the designer only needs to specify the bound; padding occurs automatically.)

### Doubly-Oblivious Sorted Multimaps (DOSM)

We construct doubly-oblivious sorted multimaps (DOSM) by modifying our singly-oblivious sorted multimap (OSM) construction (see Section V-B) to use DODS as a building block and leverage its fine-grained interface for improved efficiency.

- **Naive Approach:**
  - A naive approach to make the OSM client doubly-oblivious is to replace the underlying ODS framework with the DODS framework. However, this is insufficient because the OSM client maintains internal state outside the ODS framework, and its accesses to this state are data-dependent. For example, OSM.Insert uses a depth-first search to find the insertion location, which terminates based on the key-value pair to insert. An adversary can infer information about the pair by observing when the search terminates.

- **Our Construction:**
  - To eliminate such leakage, we identify data-dependent sub-procedures and pad the number of accesses to worst-case bounds that depend only on the number of key-value pairs in the map. For instance, when initiating a depth-first search, we ensure it terminates after accessing exactly 1.44 log(n) (real or dummy) nodes, which is the worst-case height of an AVL tree with n nodes.
  - We design our algorithms to predict whether a given dummy access needs to return a cached node, allowing us to avoid unnecessary dummy operations.

- **Summary of DOSM Construction:**
  - **DOSM.Init**: Equals OSM.Init, but calls DODS.Init instead of ODS.Init.
  - **DOSM.Size**: Instead of halting the depth-first search when the first k-node is found, perform additional DODS.Access calls with input read(dummy = 1, isCached = ?, k) to ensure DORAM.ReadBlock is invoked 1.44 log(n) times.
  - **DOSM.Insert**: Modify the depth-first search to invoke DORAM.ReadBlock 1.44 log(n) times. In the retracing step, modify the rebalancing procedure to perform the same (real or dummy) operations regardless of the type of rebalancing required.
  - **DOSM.Find**:
    1. **Find path to s-th k-node**: Modify the depth-first search to invoke DORAM.ReadBlock 1.44 log(n) times.
    2. **Retrieve required nodes**: Find the node at which the paths to nodei and nodej diverge, and then run a modified breadth-first search using an oblivious priority queue. This search terminates after visiting 2 · 1.44 log(n) + j − i nodes.

### Evaluation and Applications

#### Implementation
We implemented singly- and doubly-oblivious versions of Oblix using approximately 10,000 lines of Rust code, split across libraries for singly- and doubly-oblivious Path ORAM, ODS, and OSM.

#### Evaluation
We evaluated Oblix through benchmarks and three applications:
1. **Private Contact Discovery for Signal Messaging Service** (Section VI-C)
2. **Private Retrieval of Public Keys in Key Transparency** (Section VI-D)
3. **Oblivious Searchable Encryption** (Section VI-E)

In each application, our results show that Oblix is competitive with, and sometimes improves upon, alternative approaches with similar security guarantees. Our work demonstrates that ORAM-based techniques, often avoided due to perceived high costs, can scale to large databases (tens of millions of records) and be effectively applied to concrete problem domains.

#### Experimental Setup
- **Server Configuration**: Intel Xeon E3-1230 v5 CPU at 3.40 GHz with 8 logical cores, running Ubuntu 16.04.
- **CPU Support**: Intel SGX v1 instruction set, with total memory available to enclaves limited to around 94 MB.
- **Database Size**: 64 GB in our testbed, with extrapolation for larger sizes.
- **Key-Value Pair Size**: Configured differently per application, with a Path ORAM block size of 160 bytes.
- **Warm-Up**: ORAM stash warmed up via dummy requests to capture steady-state performance.

#### Path DORAM Microbenchmarks
- **Performance Evaluation**: Single operation (ReadBlock followed by Evict) for n = m ∈ {101, ..., 107} and block sizes from 8 to 512 bytes.
- **Latency**: Between tens to hundreds of microseconds, reported as the average over 1000 operations.
- **Comparison with ZeroTrace**: Oblix outperforms ZeroTrace, with a speedup of ∼2.5× for a block size of 8 bytes and up to 6.5× for 512 bytes.

#### DOSM Microbenchmarks
- **Searches**:
  - **Latency Dependence**: On the total number of key-value pairs and the number of values requested for the queried key.
  - **Experiments**:
    - **Increasing Key-Value Pairs**: Logarithmic search time, with 4.4 ms for 224 key-value pairs.
    - **Increasing Requested Values**: Linear search time with the size of the interval.
    - **Values per Key**: Steady latency at 12.7 ms, independent of the number of values per key.
- **Inserts**:
  - **Logarithmic Insert Time**: 5.4 ms for 224 key-value pairs.

#### Private Contact Discovery in Signal
- **Signal's Approach**: Converts the list into an oblivious hash table and iterates over all Signal users, with latency O(m2 + N).
- **Our Approach**: Uses Oblix to achieve private contact discovery with latency O(m log N), avoiding a linear scan of all Signal users.
- **Experimental Comparison**:
  - **Database Size**: Up to N = 128 M users.
  - **Latency**: 950 − 830 ms for Signal's approach, significantly reduced with our approach.

This structured and detailed presentation aims to provide a clear and professional overview of the DODS framework, its implementation, and its applications.