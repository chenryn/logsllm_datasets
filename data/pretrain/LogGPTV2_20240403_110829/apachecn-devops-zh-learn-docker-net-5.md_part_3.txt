```
审核时，应检查所有容器的默认网络模式是否设置为`default`而非`host`:
```
$ docker ps -q | xargs docker inspect --format '{{ .Id }}: NetworkMode={{ .HostConfig.NetworkMode }}'
1aca7fe47882da0952702c383815fc650f24da2c94029b5ad8af165239b78968: NetworkMode=default
```
每个 Docker 容器都连接到一个以太网桥，以便在容器之间提供互连。它们可以相互 ping 通以发送/接收 UDP 数据包并建立 TCP 连接，但如果需要，这可以受到限制。名称空间还提供了一种简单的隔离，可以限制在另一个容器和主机中运行的进程的访问。
我们将使用`nsenter`命令行实用程序后面的来输入名称空间。这是 GitHub 上的一个开源项目，可在[https://github.com/jpetazzo/nsenter](https://github.com/jpetazzo/nsenter)获得。
使用它，我们将尝试输入现有的容器名称空间，或者尝试生成一组新的名称空间。它不同于 Docker `exec`命令的，因为`nsenter`不进入 cgroups，这通过使用名称空间逃避资源限制，为调试和外部审计带来了潜在的好处。
我们可以从 PyPI 安装`nsenter`(它需要 Python 3.4)并使用命令行实用程序连接到一个正在运行的容器:
```
$ pip install nsenter
```
要用容器的 pid 替换 pid，请使用以下命令:
```
$ sudo nsenter --net --target=PID /bin/ip a
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
 inet 127.0.0.1/8 scope host lo
 valid_lft forever preferred_lft forever
 inet6 ::1/128 scope host
 valid_lft forever preferred_lft forever
14: eth0:  mtu 1500 qdisc noqueue state UP group default
 link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff
 inet 172.17.0.6/16 scope global eth0
 valid_lft forever preferred_lft forever
 inet6 fe80::42:acff:fe11:6/64 scope link
 valid_lft forever preferred_lft forever
```
我们可以使用`docker inspect`命令使其更加方便，如下所示:
1.  首先启动一个新的 nginx 服务器:
    ```
    $ docker run -d --name=nginx -t nginx
    ```
2.  然后获取容器的 PID:
    ```
    PID=$(docker inspect --format {{.State.Pid}} nginx)
    ```
3.  连接到正在运行的 nginx 容器:
    ```
    $ nsenter --target $PID --uts --ipc --net –pid
    ```
`docker-enter`也是可以用来进入容器内部指定 shell 命令的包装器之一，如果没有指定命令，将会调用一个 shell 来代替。如果需要在不执行另一个命令行工具的情况下检查或操作容器，我们可以使用上下文管理器来完成:
```
import subprocess
from nsenter import Namespace
with Namespace(mypid, 'net'):
# output network interfaces as seen from within the mypid's net NS:
 subprocess.check_output(['ip', 'a'])
```
# 了解 Docker 安全二–小组
在本节中，我们看一下 cgroups 如何构成容器隔离的主干。
## 定义群组
控制组提供了一种机制，用于将任务(进程)集及其所有未来的子任务聚合/划分到分层组中。
一个组将一组任务与来自子系统的参数相关联。子系统本身是一个资源控制器，用于定义用户组的边界或提供资源。
层次结构是以树的形式排列的一组组，这样系统中的每一个任务都正好位于层次结构中的一个组和一组子系统中。
## 为什么需要 cgroups？
在 Linux 内核中提供进程聚合有多种努力，主要是为了资源跟踪的目的。
这些努力包括 cpusets、CKRM/资源组、用户计数器和虚拟服务器名称空间。这些都需要流程分组/分区的基本概念，新分叉的流程与它们的父流程在同一个组(cgroup)中结束。
内核组补丁提供了有效实现这些组的基本内核机制。它对系统快速路径的影响极小，并为特定的子系统(如 cpusets)提供挂钩，以根据需要提供额外的行为。
## 手动创建组
在以下步骤中，我们将创建一个`cpuset`控制组:
```
# mount -t tmpfs cgroup_root /sys/fs/cgroup
```
`tmpfs`是将所有文件保存在虚拟内存中的文件系统。`tmpfs`中的所有内容都是临时的，也就是说，您的硬盘上不会创建任何文件。如果卸载`tmpfs`实例，其中存储的所有内容都将丢失:
```
# mkdir /sys/fs/cgroup/cpuset
# mount -t cgroup -ocpuset cpuset /sys/fs/cgroup/cpuset
# cd /sys/fs/cgroup/cpuset
# mkdir Charlie
# cd Charlie
# ls
cgroup.clone_children  cpuset.cpu_exclusive  cpuset.mem_hardwall     cpuset.memory_spread_page  cpuset.sched_load_balance  tasks
cgroup.event_control   cpuset.cpus           cpuset.memory_migrate   cpuset.memory_spread_slab  cpuset.sched_relax_domain_level
cgroup.procs           cpuset.mem_exclusive  cpuset.memory_pressure  cpuset.mems                notify_on_release
```
为该组分配 CPU 和内存限制:
```
# /bin/echo 2-3 > cpuset.cpus
# /bin/echo 0 > cpuset.mems
# /bin/echo $$ > tasks
```
以下命令将`/Charlie`显示为 cpuset cgroup:
```
# cat /proc/self/cgroup
11:name=systemd:/user/1000.user/c2.session
10:hugetlb:/user/1000.user/c2.session
9:perf_event:/user/1000.user/c2.session
8:blkio:/user/1000.user/c2.session
7:freezer:/user/1000.user/c2.session
6:devices:/user/1000.user/c2.session
5:memory:/user/1000.user/c2.session
4:cpuacct:/user/1000.user/c2.session
3:cpu:/user/1000.user/c2.session
2:cpuset:/Charlie
```
## 将进程附加到组
将流程标识`PID{X}`添加到任务文件中，如下所示:
```
# /bin/echo PID > tasks
```
注意是`PID`，不是 PIDs。
一次只能附加一个任务。如果您有几个任务要附加，您必须一个接一个地完成:
```
# /bin/echo PID1 > tasks
# /bin/echo PID2 > tasks
...
# /bin/echo PIDn > tasks
```
通过回显`0`附加当前外壳任务:
```
# echo 0 > tasks
```
## Docker 和 cgroups
在 Docker 的 GitHub repo([https://GitHub . com/open containers/runc/tree/master/libcontainer/cggroups](https://github.com/opencontainers/runc/tree/master/libcontainer/cgroups)下，cggroups 作为 lib container 项目的一部分进行管理。有一个 cggroup 管理器，它管理与内核中的 cgroup APIs 的交互。
下面的代码显示了由管理器管理的生命周期事件:
```
type Manager interface {
 // Apply cgroup configuration to the process with the specified pid
 Apply(pid int) error
 // Returns the PIDs inside the cgroup set
 GetPids() ([]int, error)
 // Returns statistics for the cgroup set
 GetStats() (*Stats, error)
 // Toggles the freezer cgroup according with specified state
 Freeze(state configs.FreezerState) error
 // Destroys the cgroup set
 Destroy() error
 // Paths maps cgroup subsystem to path at which it is mounted.
 // Cgroups specifies specific cgroup settings for the various subsystems
 // Returns cgroup paths to save in a state file and to be able to
 // restore the object later.
 GetPaths() map[string]string
 // Set the cgroup as configured.
 Set(container *configs.Config) error
}
```
# 使用 AppArmor 保护 Docker 容器
AppArmor 是一个 **强制访问控制** ( **MAC** )系统，它是一个内核增强，将程序限制在有限的资源集内。AppArmor 的安全模型是将访问控制属性绑定到程序，而不是用户。
apparemor 限制是通过加载到内核中的配置文件来提供的，通常是在启动时。AppArmor 配置文件可以是两种模式之一:强制执行或投诉。
在强制模式下加载的配置文件将导致强制实施配置文件中定义的策略，并报告策略违规尝试(通过系统日志或审计)。
投诉模式下的配置文件不会强制执行策略，而是报告违反策略的尝试。
AppArmor 不同于 Linux 上的其他一些 MAC 系统:它是基于路径的，它允许混合强制和抱怨模式的配置文件，它使用 include 文件来简化开发，并且它的进入壁垒比其他流行的 MAC 系统低得多。下图显示了链接到应用的 AppArmour 应用配置文件:
![Using AppArmor to secure Docker containers](img/00044.jpeg)
AppArmor 是一种已建立的技术，最早见于 Immunix，后来集成到 Ubuntu、Novell/SUSE 和 Mandriva 中。核心 AppArmor 功能从 2.6.36 开始就在主线 Linux 内核中；apparemor、Ubuntu 和其他开发人员正在进行工作，将附加的 apparemor 功能合并到主线内核中。
你可以在 https://wiki.ubuntu.com/AppArmor 找到更多关于 AppArmor 的信息。
## 表面化和对接
在 Docker 内部运行的应用可以利用 AppArmor 来定义策略。这些配置文件可以手动创建，也可以使用名为 bane 的工具加载。
### 注
在 Ubuntu 14.x 上，确保安装了 systemd，以使以下命令正常工作。
以下步骤显示了如何使用该工具:
1.  Download the bane project for GitHub:
    ```
    $ git clone https://github.com/jfrazelle/bane
    ```
    确保这是在您的 GOPATH 目录中完成的。比如我们用`/home/ubuntu/go`，克星源在`/home/Ubuntu/go/src/github.com/jfrazelle/bane`下载。
2.  安装贝恩需要编译的 toml 解析器:
    ```
    $ go get github.com/BurntSushi/toml
    ```
3.  转到`/home/Ubuntu/go/src/github.com/jfrazelle/bane`目录，运行以下命令:
    ```
    $ go install
    ```
4.  你会在`/home/Ubuntu/go/bin`找到克星二进制。
5.  使用`.toml`文件创建配置文件:
    ```