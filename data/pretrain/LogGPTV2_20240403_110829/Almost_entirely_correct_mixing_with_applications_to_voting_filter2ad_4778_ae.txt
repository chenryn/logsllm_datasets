75to {0, 1} reveals that every row Ri of P must be of one of
the following 4 types:
• Type 1: there is only 1 non-zero coordinate and its
value is 1.
• Type 2: there are only 2 non-zero coordinates and their
values are 1, 1.
• Type 3: there are only 2 non-zero coordinates and their
values are 1,−1.
• Type 4: there are only 3 non-zero coordinates and their
values are 1, 1,−1.
Note that no row can have all zero coordinates since the
matrix P is of full rank. Let t1, t2, t3, t4 be the number of
rows of P of type 1, 2, 3 and 4 respectively. Observe that
t1 + t2 + t3 + t4 = n. We also know that
t1 + 2t2 + t4 =
pi,j = n
n:j=1
n:i=1
and therefore t2 = t3. Now suppose t2 ≥ 1. The matrix
P then contains at least one row v2 of type 2 and one row
v3 of type 3. Up to symmetries and permutations on the
columns of P , there are 4 distinct ways in which the non-
zero coordinates of v2 and v3 can be arranged relative to one
another:
 1
1 −1 
 1 1 0
0 0 1 −1 
 1 1
1 0 −1 
 1 1 0
−1 0 1 
All of these arrangements map at most a fraction 5/8 of all
vectors in {0, 1}n to vectors in {0, 1}n. This means that
t2 = t3 = 0.
1
0
0
It remains to show that t4 = 0. We proceed by con-
tradiction. Assume there is at least one row v4 of type 4.
Up to a re-ordering of the columns of P , we may assume
v4 = (−1, 1, 1, 0, 0, . . . , 0). Since L(P e1) = 1, there are at
least two other rows of P that have a 1 in the ﬁrst column.
These cannot both be of type 1 for otherwise they would
be linearly dependent and that cannot happen since P is of
full rank. Therefore there is at least one other row v(cid:48)
4 of
type 4 which has a 1 in the ﬁrst column. Up to symmetries
and permutations on the columns of P , there are 4 distinct
ways in which the non-zero coordinates of v4 and v(cid:48)
4 can be
arranged relative to one another:
1 1
 −1
1 −1 1 
 −1 1 1
1 1 0 −1 
1 0 0 1 −1 
 −1
1 −1 0 1 
 −1 1 1 0
1 1 0
0
0
All of these arrangements map at most a fraction 5/8 of all
vectors in {0, 1}n to vectors in {0, 1}n. This means that
t4 = 0. Therefore all the rows of P are of type 1 so that P

is a permutation matrix.
Lemma 7.9. Let |5| > 2n/2 and F : 5 → {0, 1}n be a
linear function such that F (5) spans all of n
a permutation matrix P ∈ GLn(q) such that F (v) = P v
for all v ∈ 5, then the outputs B of the mix server are a
q . If there exists
permutation of the inputs A.
Proof. Consider the unit vector ej for j ∈ 1, . . . , n. Since
P is a permutation matrix there exists a unit vector ei such
that P ei = ej. By Lemma 7.4, we can ﬁnd v, w ∈ 5 such
that w = v + ei. Let us write the coordinates of v and w
as v = (v1, . . . , vn) and w = (w1, . . . , wn). We also write
F (v) = (v(cid:48)
n) and F (w) = (w(cid:48)
1, . . . , v(cid:48)
F (w) = P w = P v + P ei = F (v) + ej.
1, . . . , w(cid:48)
n). We have
This implies that
(ak)vk
(bk)v(cid:48)
k
(ak)wk = ai
n;k=1
n;k=1
n;k=1
n;k=1
Since v, w ∈ 5,3n
k=0(ak)vk =3n
3n
(bk)w(cid:48)
k = bj
k and3n
k=1(ak)wk =
k=1(bk)w(cid:48)
k . Thus we must have bj = ai. The same reason-
ing holds for all 1 ≤ j ≤ n, which shows that the mix server

didn’t cheat.
Lemmas 7.8 and 7.9 show that when |5| > (5/8)2n and
F (5) spans all of n
q , then F cannot be a linear map on 5
unless the mix server did not cheat. The next lemma shows
that when F (5) spans all of n
q , step 6 succeeds with non-
negligible probability.
k=1(bi)v(cid:48)
Lemma 7.10. If |5| > 2n( 5
16 ) and F (5) spans all of
q , then algorithm A does not abort in step 6 with probability
n
at least /64.
8 + 13
Proof. By Lemma 7.6, we know that with probability
at least 1/32, the ﬁrst n vectors in step 6 of algorithm A,
χ(S1), . . . , χ(Sn) ∈ {0, 1}n will span all of n
q . Let M ∈
GLn(Zq) be the unique matrix that maps χ(F (Si)) to χ(Si)
for all i = 1, . . . , n.
Let T ⊆ 5 be the subset of all the vectors v ∈ 5 such
that v = M · F (v). By Lemmas 7.8 and 7.9, we know that
|T| ≤ (5/8)2n. Therefore the probability that the n + 1’st
vector χ(Sn+1) in step 6 of algorithm A is not in T is at
least 13
16 . When that happens, step 6 will not abort. The
probability of not aborting in step 6 is therefore at least
16 ) ≥ /64 as required.

(1/32)( 13
Proof of Proposition 7.3
To summarize, we prove here the lower bound given in Propo-
sition 7.3 on the probability that algorithm A succeeds in
outputting logg h. Algorithm A only ever aborts in steps 6
and 7. We know that the probability that A aborts in step
7 is at most 1/q. Furthermore, we have shown that with
probability at least /2, we have |5| > 2n( 5
16 ). When
• When F (5) does not span all of n
q , the probability
that A does not abort in step 6 is at least 1/32 by
Lemma 7.7.
that happens:
8 + 13
• When F (5) spans all of n
q , the probability that A does
not abort in step 6 is at least /64 by Lemma 7.10.
It follows that the probability of success of A is at least
2/128 − 1/q.

768. CONCLUSION
The strongest point of our new mix network is its ex-
ceptional speed. The real cost of proving almost entirely
correct mixing is orders of magnitude faster than all other
mix networks. An almost entirely correct output is available
instantly and can be announced long before it is conﬁrmed
by a slower perfectly correct mix network.
In practice, our new mix is of particular interest to large
electronic elections (say, a million ballots or more), where
a guarantee of almost entirely correct mixing may well be
suﬃcient to announce the outcome of an election pending
conﬁrmation by a slower perfectly correct mixnet. This ad-
ditional proof of perfect correctness does not require the
ballots to be mixed again, and of course doesn’t require any
involvement from the voters.
We propose the ﬁrst construction that exploits a trade-oﬀ
between eﬃciency and correctness. An interesting direction
for future work would be to study this trade-oﬀ further. In
particular, it would be interesting to determine whether it
is possible to build mix nets that span the entire continuum
of the trade-oﬀ between eﬃciency and correctness.
9. REFERENCES
[1] M. Abe. Universally veriﬁable mix-net with veriﬁcation
work independent of the number of mix-servers. In
Proc. of Eurocrypt ’98, pp. 437-447. Springer-Verlag,
1998. LNCS 1403.
[2] M. Abe. Mix-networks on permutation networks. In
Proc. of Asiacrypt ’99, pp. 258-273, 1999. LNCS 1716.
[3] M. Abe. Remarks on mix-networks based on
permutation networks.
[10] R. Gennaro, S. Jarecki, H. Krawczyk and T. Rabin.
Secure Distributed Key Generation for Discrete-Log
Based Cryptosystems. In Proc. of Eurocrypt ’99,
pp. 295-310. Springer-Verlag, 1999. LNCS 1592.
[11] P. Golle, S. Zhong, D. Boneh, M. Jakobsson and
A. Juels. Optimistic Mixing for Exit-Polls. To appear
in Asiacrypt 2002.
[12] M. Hirt and K. Sako. Eﬃcient receipt-free voting
based on homomorphic encryption. In Proc. of
Eurocrypt’00, pp. 539-556. Springer-Verlag, 2000.
LNCS 1807.
[13] M. Jakobsson. A practical mix. In Proc. of Eurocrypt
’98, pp. 448-461. Springer-Verlag, 1998. LNCS 1403.
[14] M. Jakobsson and D. M’Ra¨ıhi. Mix-based electronic
payments. In Proc. of SAC’98, pp. 157-173.
Springer-Verlag, 1998. LNCS 1556.
[15] M. Jakobsson. Flash mixing. In Proc. of PODC ’99,
pp. 83-89. ACM, 1999.
[16] M. Jakobsson and A. Juels. Millimix: mixing in small
batches. DIMACS Technical Report 99-33.
[17] M. Jakobsson and A. Juels. An optimally robust
hybrid mix network. In Proc. of PODC’01,
pp. 284-292. ACM Press. 2001.
[18] M. Jakobsson, A. Juels and R. Rivest. Making mix
nets robust for electronic voting by randomized partial
checking. In Proc. of USENIX’02.
[19] M. Mitomo and K. Kurosawa. Attack for ﬂash mix. In
Proc. of Asiacrypt’00, pp. 192-204. LNCS 1976.
[20] A. Neﬀ. A veriﬁable secret shuﬄe and its application
to E-Voting. In Proc. of ACM CCS’01, pp. 116-125.
ACM Press, 2001.
[4] M. Bellare, J. Garay and T. Rabin. Batch Veriﬁcation
[21] W. Ogata, K. Kurosawa, K. Sako and K. Takatani.
with Applications to Cryptography and Checking. In
Proc. of Eurocrypt ’98, pp. 170-182. Springer Verlag,
1998. LNCS 1380.
[5] D. Chaum. Untraceable electronic mail, return
addresses, and digital pseudonyms. In Communications
of the ACM, 24(2):84-88, 1981.
Fault tolerant anonymous channel. In Proc. of ICICS
’97, pp. 440-444, 1997. LNCS 1334.
[22] C. Park, K. Itoh and K. Kurosawa. Eﬃcient
anonymous channel and all/nothing election Scheme.
In Proc. of Eurocrypt ’93, pp. 248-259.
Springer-Verlag, 1993. LNCS 765.
[6] D. Chaum and T. Pedersen. Wallet databases with
[23] T. Pedersen. A Threshold cryptosystem without a
observers. In Proc. of Crypto’92, pp. 89-105.
Springer-Verlag, 1993. LNCS 740.
trusted party. In Proc. of Eurocrypt’91, pp. 522-526,
1991.
[7] Y. Desmedt and K. Kurosawa. How to break a
[24] B. Pﬁtzmann and A. Pﬁtzmann. How to break the
practical MIX and design a new one. In Proc. of
Eurocrypt’2000, pp. 557-572. LNCS 1807.
[8] D. Dolev, C. Dwork, M. Naor. Nonmalleable
Cryptography. In SIAM J. Comput. 30(2): 391-437
(2000)
direct RSA-implementation of mixes. In Proc. of
Eurocrypt ’89, pp. 373-381. Springer-Verlag, 1989.
LNCS 434.
[25] B. Pﬁzmann. Breaking an eﬃcient anonymous
channel. In Proc. of Eurocrypt’94, pp. 339-348.
[9] J. Furukawa and K. Sako. An eﬃcient scheme for
[26] K. Sako and J. Kilian. Receipt-free mix-type voting
proving a shuﬄe. In Proc. of Crypto ’01, pp. 368-387.
Springer-Verlag, 2001. LNCS 2139.
scheme. In Proc. of Eurocrypt ’95. Springer-Verlag,
1995. LNCS 921.
[27] Y. Tsiounis and M. Yung. On the security of ElGamal
based encryption. In Proc. of PKC’98.
77