samples in
MMAP
suspicious
(MB)
64.8
129.0
75.4
152.1
112.1
166.6
pool
size
(MB)
101
326
101
326
101
326
pool
100
100
200
200
500
500
Speed
MMAP
(secs)
Speed
pre-load
(secs)
11.9
32.7
14.3
39.4
14.9
38.1
1.7
4.9
2.4
7.2
6.0
8.6
Table 5. Speed and memory consumption un-
der different settings.
7.8 Attack Resilience
Here, we propose a new attack that is similar to the
coincidental-pattern attack mentioned in Polygraph, but
stronger. We call it the token-ﬁt attack. It is possible that
a hacker may obtain normal trafﬁc with a similar token dis-
tribution as the normal noise in the suspicious pool. She can
then extract tokens from the normal trafﬁc and intentionally
encode tokens into a worm. She may include different sets
of tokens into different worm samples. This does not in-
creases the similarity of worm samples in terms of shared
tokens, but can increase the similarity of worm samples to
normal trafﬁc noise in the suspicious pool; thus, degrading
the quality of the signature.
We evaluate both Hamsa and Polygraph for this attack
by modifying the ATPhttpd exploit to inject different 40 to-
kens to the variant part of each worm sample. The tokens
are extracted from the normal trafﬁc noise in the same sus-
picious pool. We test both systems for suspicious pool with
50 samples using a noise ratio of 50%. We run two different
trials, and ﬁnd that Hamsa always output a correct signature
as shown in Table 2. However, with the signature produced
by Polygraph, no such polymorphic worms can be detected
(100% false negative), although there is no false positive.
8 Related Work
Early automated worm signature generation efforts
include Honeycomb [12], Autograph [10], and Early-
Bird [24]. While these systems use different means to
classify worm ﬂows and normal trafﬁc, all of them assume
that a worm will have a long invariant substring. However,
these techniques cannot be used for polymorphic worms
since different instances of polymorphic worms do not
contain a long enough common substring.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore.  Restrictions apply. 
Hamsa
Polygraph
[16]
Similarity of
CFG [13]
PADS [26]
Network or Host based
Network
Network
Content or behavior based
Noise tolerance
On-line detection speed
Content
based
Yes
Fast
General purpose or applica-
tion speciﬁc
General
purpose
Provable attack resilience
Information exploited
Yes
γπ
Content
based
Yes (slow)
Fast
General
purpose
No
γπ
Network
Behavior
based
Yes
Slow
Host
Content
based
No
Fast
Nemean
[31]
Host
Content
based
No
Fast
COVERS
[14]
Host
Behavior
based
Yes
Fast
Malware
Detection [4]
Host
Behavior based
Yes
Slow
General pur-
pose
General
purpose
Protocol
speciﬁc
Server spe-
ciﬁc
General
pose
pur-
No
π
No
γπ
No

No
γ
No
π
Table 6. Summary of relative strengths and weaknesses of different polymorphic worm detection
and signature generation techniques proposed recently.
Recently, there has been active research on polymor-
phic worm signature generation and the related polymor-
phic worm and vulnerability study [4, 13, 14, 16, 26, 31]. In
Table 8, we compare Hamsa with them in terms of the fol-
lowing seven metrics: 1) Network vs. host based: a net-
work based system uses only the network trafﬁc for detec-
tion and can be deployed on routers/gateways; 2) Content
vs. behavior based detection approach; 3) Noise tolerance;
4) Online worm detection: this depends on the speed with
which the signature generated can be compared with net-
work trafﬁc; 5) General purpose vs. application speciﬁc:
some schemes like Nemean [31] and COVERS [14] require
detailed protocol/application speciﬁcation knowledge to de-
tect the worms for each protocol/application (thus they are
mostly host-based); 6) provable attack resilience; and 7) in-
formation exploited.
Polygraph [16] comes closest to our system. It considers
three methods of generating signatures: (1) set of tokens (2)
sequences of tokens, and (3) weighted set of tokens. As
shown in Section 7, Hamsa is a signiﬁcant improvement
over Polygraph in terms of both speed and attack resilience.
Position-Aware Distribution Signatures [26] (PADS)
bridge signature-based approaches with statistical anomaly-
based approaches and are able to detect variants of the
MSBlaster worms. However, in presence of noise the
accuracy of PADS suffers.
There are also some semantic based approaches. Basi-
cally, there are two kinds of semantic information which
can be exploited for containing polymorphic worms: proto-
col information and binary executable code information.
Nemean [31] uses protocol semantics to cluster the worm
trafﬁc of the same protocol to different clusters for different
worms.
It then uses automata learning to reconstruct the
connection and session level signature (automata). How-
ever, it requires detailed protocol speciﬁcations for each and
every application protocol. Also, Nemean may fail to pro-
duce effective signatures when the suspicious trafﬁc pool
contains noise.
Christopher et al., [13] propose an approach based on
structural similarity of Control Flow Graphs (CFG) to
generate a ﬁngerprint for detecting different polymorphic
worms. However, their approach can possibly be evaded by
using SED as discussed in Section 2.1. Furthermore, match-
ing ﬁngerprints is computationally expensive and hence
may not be useful for ﬁltering worm trafﬁc on high trafﬁc
links.
TaintCheck [17] and DACODA [5] dynamically traces
and correlates the network input to control ﬂow change to
ﬁnd the malicious input and infer the properties of worms.
Although TaintCheck can help in understanding worms and
vulnerabilities, it cannot automatically generate the signa-
ture of worms. Moreover their technique is very application
speciﬁc: a certain version of a server must be deployed to
monitor a vulnerability to discover how the worm interacts
with the server.
COVERS [14], a system based on address-space ran-
domization (ASR) [3] can detect and correlate the network
input and generate signatures for server protection. How-
ever, although the signature generated can efﬁciently protect
the servers, it cannot be used by NIDSes or ﬁrewalls since
the hacker can potentially evade it3. Moreover, COVERS is
application speciﬁc.
Mihai et al., [4] model the malicious program behavior
and detect the code pieces similar to the abstract model.
3Their signature is based on a single worm sample, so the length thresh-
old sometimes can cause false negatives.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore.  Restrictions apply. 
However, the their approach is computationally expensive.
9 Conclusion
In this paper we propose Hamsa, a network-based sig-
nature generation system for zero-day polymorphic worms
which generates multiset of tokens as signatures. Hamsa
achieves signiﬁcant improvements in speed, accuracy, and
attack resilience over Polygraph, the previously proposed
token-based approach. We prove that multiset signature
generation problem is NP-Hard in presence of noise and
design model based signature generation algorithms with
analytical attack resilience guarantees. The signature gen-
erated by Hamsa can be easily deployed at IDSes such as
Snort [22] or Bro [19].
10 Acknowledgement
We would like to thank Dawn Song and James Newsome
for the Polygraph source code and their insightful discus-
sions. We would also like to thank the anonymous review-
ers and our shepherd, Sal Stolfo, for their constructive com-
ments and suggestions. Support for this work was provided
by a DOE Early CAREER award.
References
[1] M. I. Abouelhoda, S. Kurtz, et al. Replacing sufﬁx trees
with enhanced sufﬁx arrays. Journal of Discrete Algorithms,
2004.
[2] A. V. Aho and M. J. Corasick. Efﬁcient string matching: An
aid to bibliographic search. Communications of the ACM,
1975.
[3] S. Bhatkar, D. DuVarney, and R. Sekar. Address obfusca-
tion: An efﬁcient approach to combat a broad range of mem-
ory error exploits. In Proc. of USENIX Security, 2003.
[4] M. Christodorescu, S. Jha, et al. Semantics-aware malware
In IEEE Symposium on Security and Privacy,
detection.
2005.
[5] J. R. Crandall, Z. Su, and S. F. Wu. On deriving unknown
vulnerabilities from zeroday polymorphic and metamorphic
worm exploits. In Proc. of ACM CCS, 2005.
[6] Critical Solutions Ltd. Critical TAPs: Ethernet splitters de-
signed for IDS. http://www.criticaltap.com.
[7] T. Detristan, T. Ulenspiegel, et al. Polymorphic shellcode
engine using spectrum analysis. http://www.phrack.
org/show.php?p=61&a=9.
[8] M. Farach and M. Thorup. String matching in lempel-ziv
compressed strings. Symposium on the Theory of Computing
(STOC), 1995.
[9] G. Gu, P. Fogla, et al. Measuring intrusion detection capa-
bility: An information-theoretic approach. In Proc of ACM
Symposium on InformAction, Computer and Communica-
tions Security (ASIACCS), 2006.
[10] H. Kim and B. Karp. Autograph: Toward automated, dis-
tributed worm signature detection. In USENIX Security Sym-
posium, 2004.
[11] C. Kreibich. libstree — generic sufﬁx tree library. http:
//www.cl.cam.ac.uk/˜cpk25/libstree/.
[12] C. Kreibich and J. Crowcroft. Honeycomb - creating intru-
In Proc. of the
sion detection signatures using honeypots.
Workshop on Hot Topics in Networks (HotNets), 2003.
[13] C. Kruegel, E. Kirda, et al. Polymorphic worm detection us-
ing structural information of executables. In Proc. of Recent
Advances in Intrusion Detection (RAID), 2005.
[14] Z. Liang and R. Sekar. Fast and automated generation of at-
tack signatures: A basis for building self-protecting servers.
In Proc. of ACM CCS, 2005.
[15] G. Manzini and P. Ferragina. Engineering a lightweight suf-
ﬁx array construction algorithm. Algorithmica, 40(1), 2004.
[16] J. Newsome, B. Karp, and D. Song. Polygraph: Automati-
cally generating signatures for polymorphic worms. In IEEE
Security and Privacy Symposium, 2005.
[17] J. Newsome and D. Song. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of ex-
ploits on commodity software. In Proc. of NDSS, 2005.
[18] Packeteer.
Solutions
for Malicious Applications.
http://www.packeteer.com/prod-sol/
solutions/dos.cfm.
[19] V. Paxson. Bro: A system for detecting network intruders in
real-time. Computer Networks, 31, 1999.
[20] R. Perdisci, D. Dagon, W. Lee, et al. Misleading worm sig-
nature generators using deliberate noise injection. In IEEE
Security and Privacy Symposium, 2006.
[21] Piotr Bania. TAPiON. http://pb.specialised.
info/all/tapion/.
[22] M. Roesch. Snort: The lightweight network intrusion detec-
tion system, 2001. http://www.snort.org/.
[23] K.-B. Schurmann and J. Stoye.
rithm for fast sufﬁx array construction.
ALENEX/ANALCO, 2005.
An incomplex algo-
In Proceedings of
[24] S. Singh, C. Estan, et al. Automated worm ﬁngerprinting.
In Proc. of OSDI, 2004.
[25] S. Staniford, V. Paxson, and N. Weaver. How to own the
In Proceedings of the 11th
Internet in your spare time.
USENIX Security Symposium, 2002.
[26] Y. Tang and S. Chen. Defending against internet worms: A
signature-based approach. In Proc. of Infocom, 2003.
[27] N. Tuck, T. Sherwood, B. Calder, and G. Varghese. De-
terministic memory-efﬁcient string matching algorithms for
intrusion detection. In Proc of IEEE Infocom, 2004.
[28] R. Vargiya and P. Chan. Boundary detection in tokeniz-
ing network application payload for anomaly detection. In
ICDM Workshop on Data Mining for Computer Security
(DMSEC), 2003.
[29] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-
based worm detection and signature generation. In Proc. of
Recent Advances in Intrusion Detection (RAID), 2005.
[30] K. Wang and S. J. Stolfo. Anomalous payload-based net-
In Proc. of Recent Advances in
work intrusion detection.
Intrusion Detection (RAID), 2004.
[31] V. Yegneswaran, J. Gifﬁn, P. Barford, and S. Jha. An
In
architecture for generating semantic-aware signatures.
USENIX Security Symposium, 2005.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore.  Restrictions apply.