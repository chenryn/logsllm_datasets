# 开篇词丨"老板，之前咱TPS是100，我优化完是10000"你好，我是高楼，网名叫 Zee。很高兴能在这里和你聊性能测试。 在课程开始之前，我先介绍下我自己的从业经历。 从 2005年毕业开始，除了第一年在做路由器方面的功能、性能测试之外，我后面的工作几乎都是围绕着性能测试分析展开的。 那时我还年轻，喜欢混迹于各大测试论坛，从而认识了很多行业内的高手，很多人也是从那里认识我的。再后来我开始自己弄测试论坛，其实主要是将自己在工作中的积攒的经验分享了出去，虽然一直没有商业化运营，但是不得不说，这个过程对我的知识体系积累起到了非常重要的作用。渐渐地，我用这个论坛形成了自己关于性能测试完整的知识链。 再后来，我开始带团队，我做性能项目的宗旨就是上线不死，死了不收钱。 我从四五个人的小团队开始，一直到有 300余人的国内外混合团队。我带着这些团队，完整地做过大概 40多个项目。你可能会问，"完整的项目"是什么意思？它指的就是持续时间在 2个月左右的性能项目。 为什么会耗时这么长呢？这就涉及到了性能测试的真正含义和工作内容。 我一开始也和大多数人一样，以为做性能测试，就是做些脚本、参数化、关联，压起来之后，再扔出一个结果。 随着时间的增长，我越做越多。慢慢地，我发现，性能测试好像远不止这些内容。 当我把性能分析也加入到工作中之后，性能工作一下子变得丰富起来。现在，我更关注一个性能测试项目在分析调优了之后，响应时间有多大的提升，TPS有多大的提高，资源有多少的节省。 我曾经在一个零售业大厂做过一个性能咨询。他们的硬件资源很多，256C512G的机器有一堆，在生产环境中，几乎没有把 CPU 用得超过 5%的，但是性能问题还不断出现。后来经过两周的性能分析，最后把硬件降到了原来的四分之一，但同时又把性能提高了10倍，降硬件的同时，性能也提高了。 类似的工作还有很多，正是这些经历让我觉得，在一个性能测试项目中，分析是必然的过程，只有这样，性能测试的工作才有落地的价值。而这个过程，最好是性能工程师来做，不是别人，因为**只有性能工程师才可以串起完整的链路**。 真正的性能工程师，可以把结果整理清楚之后，又可以下结论，提出解决方案：线上根据这个测试结果，做对应的配置，系统肯定可以稳定运行。又或者是这样的：当前测试说明了线上不能支持，后面应该如何优化。 你看，这样做，性能工程师的价值是不是立刻就显现出来了？ 所以，我们努力的方向是性能的完整工程，这就是我在开头提到的，既要有前期的测试，还要有中间的分析，以及最后的调优，而不仅仅是做做脚本。 当然了，做脚本和参数、压场景、出报告，这是所有新手都必经的一个过程，就像写代码先从"HelloWorld"开始一样。但是这个过程，必然要在短时间内渡过。 如果你想把性能测试做好，就不要局限自己的技术范围和认知范围。无论是系统、数据库、代码、中间件、存储、网络，你遇到什么问题，都要试着去分析下该如何判断，并考虑如何在后续的过程中进行调优。 **在此我需要强调一下，也希望借此可以纠正你的认知，那就是，在我们这个课程中，"性能测试"不仅仅包括测试，还包括分析和调优**。 学习性能测试的方法到底是什么？那现在你心里是不是有个问题：好，我知道了这些，但是到底怎样才能做到呢？ 在性能行业中，我看到很多人还在拿着一些看似合理实际没用的概念套在当前的性能领域中。 比如说，性能策略中的性能测试、压力测试、衰减测试、配置测试等等。这些概念你可能听了不下百遍了，但如果问你，你在项目中是否用到了这些策略？估计你都不大能想得起来，自己做的某个场景用到过什么样的策略。 比如说"二八原则"、"响应时间 258 或 2510"、"理发店模型"、"最大 TPS拐点"等等指标类的紧箍咒。在我看来，在项目的实践中，它们不只是百无一用，而且还产生了错误的导向。 因此，针对当前性能行业的现状，我结合自己多年来的经验，写了这个专栏。在专栏中，我将以实际的项目经历，告诉你在一个具体的项目是如何一步步落实到性能领域的每一个环节中的。 那这个专栏是怎么组织的呢？我主要分了四个模块。 第一个模块是性能测试基础篇。我想在这个模块里澄清一些性能测试的基础概念，讲解一些关键部分。但并不是对概念的简单描述，而是根据实际项目，告诉你真正具有指导价值的性能测试概念是什么，并解析这些概念在实际操作中的指导性作用。 在第二个模块中，我将通过性能测试工具的实际操作实例，对应性能测试的前后逻辑关系。在这一部分中，我会重点给你讲解，为什么要使用某些工具的某些功能，以便确保工具的使用及结果是为性能测试需求指标和性能分析报告而服务的，而不是浮于表面的"炫技"。 在第三个模块中，我将通过操作系统、应用服务器、数据库、缓存服务器、Java、C++等监控工具的使用和分析方法，告诉你它们产生的数据在性能分析过程中该如何判断，为测试报告及性能分析提供有效的历史数据。 最后一个模块是对前三个模块的凝练，我会讲解不同实际操作场景中的性能测试分析过程，比如实际的瓶颈判断的过程是怎样的，怎么分析出根本的原因，如何提出具体的解决方案，最后的实施效果又是怎样的。 总的来说，这门课我自己有一个原则，那就是：我不想用空中楼阁似的理论获得情感上的激情，也不想用未经实践的过程获得短暂认同。 性能工程师的前景到底在哪里？看到这里，如果你已经跃跃欲试想要一探性能测试分析的究竟了，热烈欢迎你。不过我还是有些心里话要再唠叨几句。 性能领域要求的专业技能并不少，发展的宽度和深度完全取决于你自己的意愿。**你可以选择只做一个写脚本的工程师，也可以选择成为一个性能调优的专家**。从技术范围上说，测试工具、操作系统、开发语言、实现架构、数据库、网络、存储、部署架构等，都是你需要掌握的内容。 所以，我希望这个专栏可以抛出一个价值观------**让性能变得有价值**。以此刷新你对性能测试的认识，知道这个方向可以干很多事情。 那价值体现在哪里呢？ 在性能测试分析优化之前，如果 TPS 是 100，你做完了之后 TPS 是10000，这就是价值。 在性能测试分析优化之前，如果响应时间是 0.1ms，你做完了之后是0.01ms，这就是有价值。 在性能测试分析优化之前，如果 CPU 使用率是 100%，你做完了之后是50%，这就是有价值。 希望你可以从实用的角度，理性看待性能市场，而不是人云亦云。更希望通过这个专栏，你能够在性能领域这条路上坚定地走下去，并获得长足的发展。可以骄傲地说，我的目标是性能工程师，我的职位是性能工程师。 好了，如果你准备好了，那我们就正式开始吧，欢迎你留言说说自己的情况，你心中的性能测试是怎样的？我们下一讲见！ 
# 01丨性能综述：性能测试的概念到底是什么？在性能测试行业中，长久以来，都存在几个关键的概念误差。在我从业性能测试十几年的经历中，也看到过书籍或网上传播着各种性能测试的概念、方法论等，但是究其本质，再对应到具体的项目工作中，我发现这些概念以及方法论实在没有指导的价值，并且有些概念的产出，也没有确凿的证据来源。 所以在今天，专栏正式更新的第一天，我希望能把这些内容做些梳理，同时这些梳理的内容也会对应到后续的篇幅之中，以便保持理念的一致性。 性能测试概念我们经常看到的性能测试概念，有人或称之为性能策略，或称之为性能方法，或称之为性能场景分类，大概可以看到性能测试、负载测试、压力测试、强度测试等一堆专有名词的解释。 针对这些概念，我不知道你看到的时候会不会像我的感觉一样：乱！一个小小的性能测试，就延伸出了这么多的概念，并且概念之间的界限又非常模糊。 就拿"压力测试"、"容量测试"和"极限测试"这三个概念来说吧。 网上针对这三个名词的解释是这样的： >  > **压力测试**> > >>>  > 压力测试是评估系统处于或超过预期负载时系统的运行情况。压力测试的关注点在于系统在峰值负载或超出最大载荷情况下的处理能力。在压力级别逐渐增加时，系统性能应该按照预期缓慢下降，但是不应该崩溃。压力测试还可以发现系统崩溃的临界点，从而发现系统中的薄弱环节。> > >>  > **容量测试**> > >>>  > 确定系统可处理同时在线的最大用户数，使系统承受超额的数据容量来发现它是否能够正确处理。> > >>  > **极限测试**> > >>>  > 在过量用户下的负载测试。> > >恕我直言，这三个概念，对我这个从事性能测试十几年的老鸟来说，都看不出来有啥区别。 也许你会说，你看那里不是说了吗？ "压力测试是在超过预期负载时系统的运行情况"，"容量测试是使系统承受超额的数据容量来发现它是否能够正确处理"。 来吧，就算我语文不好，我也认字的，谁能告诉我这两者的区别是什么？除了字不一样。 如果再抽象一层说一下这些概念，那就是，这些概念都在描述性能测试的不同侧面。而这些侧面本身构不成策略，构不成方法，不能说是概念，也不能说是理论。 此文一出，肯定会有人说，既然你评价当前的概念混乱，那你有什么好建议呢？作为可能被集体轰炸的话题，既然已经摆上了台面，我还是要冒死给一个自己认为的合理定义： >  > **性能测试针对系统的性能指标，建立性能测试模型，制定性能测试方案，制定监控策略，在场景条件之下执行性能场景，分析判断性能瓶颈并调优，最终得出性能结果来评估系统的性能指标是否满足既定值。**> > >这是我觉得唯一合理的概念定义，下面我就把这个概念详细解释一下。 性能测试需要有指标有人说，我们在做项目的时候，就没有指标，老板只说一句，系统压死为止。听起来很儿戏，但这样的场景不在少数。在我看来，把系统压死也算是一种指标。至于你用什么手段把系统"压死"，那就是实现的问题了。你可以采用很多种手段，告诉老板，这系统还没压就死了！这也是你的贡献。 而对"有指标"这个定义来说，理论上合理的，并且应该有的指标是：时间指标、容量指标和资源利用率指标。 而这里的指标又会有细分，细分的概念又是一团乱。这个话题我们后面再描述。 性能测试需要有模型模型是什么？它是真实场景的抽象，可以告诉性能测试人员，业务模型是什么样子。比如说，我们有100 种业务，但不是每个业务都需要有并发量，可能只有 50个业务有，那就要把这些有并发的业务统计出来，哪个业务并发多，哪个业务并发少，做压力时就要控制好这样的比例。 这种做法需要的数据通常都是从生产环境中的数据中统计来的，很多在线上不敢直接压测的企业都是这样做的。 而随着互联网中零售业、云基础架构的全面发展，有些企业直接在线上导流来做性能测试，这种思路上的转变来源于架构的发展及行业的真实需要。但这并不能说明性能测试不需要模型了，因为这个模型已经从生产流量中导过来了。这一点，还是需要你认清的。 但是对于其他的一些行业，比如银行这类金融机构，线上一个交易都不能错。像上面这样做的难度就太大了。所以这些行业中，仍然需要在测试环境中用业务模型来模拟出生产的流量。 同时也请你认清一点，现在的全链路压测，并没有像吹嘘得那么神乎其神，很多企业也只是在线上的硬件资源上做压力而已，并不是真正的逻辑链路修改。 我在工作中经常会被问到，性能流量直接从生产上导的话，是不是就可以不用性能测试人员了？性能测试人员就要被淘汰了？ 这未免太短视了，大家都盯着最新鲜的技术、方法、概念，各层的领导也都有自己的知识偏好，万一做了一个决定，影响了最终的结果，有可能会让很多人跟着受罪。 我之前带过的一个团队中，开发架构们一开始就规划了特别详细的微服务架构，说这一套非常好。我说这个你们自己决定，我只要在这里面拿到可用的结果就行。结果开发了不到两个月，一个个微服务都被合并了，还得天天加班做系统重构，只留了几大中台组件。这是为什么呢？因为不适用呀。 同理，性能测试也要选择适合自己系统业务逻辑的方式，用最低的成本、最快的时间来做事情。 性能测试要有方案方案规定的内容中有几个关键点，分别是测试环境、测试数据、测试模型、性能指标、压力策略、准入准出和进度风险。基本上有这些内容就够了，这些内容具体的信息还需要精准。 你可能会说，怎么没有测试计划？我的建议是，用项目管理工具单独画测试计划，比如用Project 或 OmniPlan之类的工具。这是因为在方案中，写测试计划，基本上只能写一个里程碑，再细化一点，就是在里面再加几个大阶段的条目。但是用项目管理工具做计划就不同了，它不仅可以细分条目，还能跟踪各个工作的动态进度，可以设置前后依赖关系，填入资源和成本以便计算项目偏差。 性能测试中要有监控这个部分的监控，要有分层、分段的能力，要有全局监控、定向监控的能力。关于这一点，我将在第三模块详细说明。 性能测试要有预定的条件这里的条件包括软硬件环境、测试数据、测试执行策略、压力补偿等内容。要是展开来说，在场景执行之前，这些条件应该是确定的。 有人说，我们压力中也会动态扩展。没问题，但是动态扩展的条件或者判断条件，也是有确定的策略的，比如说，我们判断CPU 使用率达到 80% 或 I/O 响应时间达到 10ms时，就做动态扩展。这些也是预定的条件。 关于这一点，在我的工作经历中，经常看到有性能测试工程师，对软硬件资源、测试数据和执行策略分不清楚，甚至都不明白为什么要几分钟加几个线程。在这种情况之下，就不能指望这个场景是有效的了。 性能测试中要有场景可以说，"性能场景"这个词在性能测试中占据着举足轻重的地位，只是我们很多人都不理解"场景"应该如何定义。场景来源于英文的scenario，对性能场景中的"场景"比较正宗的描述是：在既定的环境（包括动态扩展等策略）、既定的数据（包括场景执行中的数据变化）、既定的执行策略、既定的监控之下，执行性能脚本，同时观察系统各层级的性能状态参数变化，并实时判断分析场景是否符合预期。 这才是真正的场景全貌。 性能场景也要有分类，在我有限的工作经验中，性能场景从来都没有超出过这几个分类。 1.       基准性能场景：这里要做的是单交易的容量，为混合容量做准备（不要跟我说上几个线程跑三五遍脚本叫基准测试，在我看来，那只是场景执行之前的预执行，用来确定有没有基本的脚本和场景设计问题，不能称之为一个分类）。        2.       容量性能场景：这一环节必然是最核心的性能执行部分。根据业务复杂度的不同，这部分的场景会设计出很多个，在概念部分就不细展开了，我会在后面的文章中详细说明。        3.       稳定性性能场景：稳定性测试必然是性能场景的一个分类。只是现在在实际的项目中，稳定性测试基本没和生产一致过。在稳定性测试中，显然最核心的元素是时间（业务模型已经在容量场景中确定了），而时间的设置应该来自于运维周期，而不是来自于老板、产品和架构等这些人的心理安全感。        4.       异常性能场景：要做异常性能场景，前提就是要有压力。在压力流量之下，模拟异常。这个异常的定义是很宽泛的，在下一篇文章里，我们再细说。        很多性能测试工程师，都把场景叫成了测试用例。如果只是叫法不同，我觉得倒是可以接受，关键是内容也出现了很大的偏差，这个偏差就是，把用例限定在了描述测试脚本和测试数据上，并没有描述需要实时的判断和动态的分析。这就严重影响了下一个概念：性能结果。 性能测试中要有分析调优一直以来，需不需要在性能测试项目中调优，或者说是不是性能测试工程师做调优，人们有不同的争论。 从性能市场的整体状态来看，在性能测试工程师中，可以做瓶颈判断、性能分析、优化的人并不多，所以很多其他职位上的人对性能测试的定位也就是性能验证，并不包括调优的部分。于是有很多性能项目都定义在一两周之内。这类项目基本上也就是个性能验证，并不能称之为完整的性能项目。而加入了调优部分之后，性能项目就会变得复杂。对于大部分团队来说，分析瓶颈都可能需要很长时间，这里会涉及到相关性分析、趋势分析、证据链查找等等手段。 所以，就要不要进行调优，我做了如下划分。 对性能项目分为如下几类。 1.       **新系统性能测试类**        ：这样的项目一般都会要求测试出系统的最大容量，不然上线心里没底。        2.       **旧系统新版本性能测试类**        ：这样的项目一般都是和旧版本对比，只要性能不下降就可以根据历史数据推算容量，对调优要求一般都不大。        3.       **新系统性能测试优化类**        ：这类的系统不仅要测试出最大容量，还要求调优到最好。        对性能团队的职责定位有如下几种。 1.       **性能验证**        ：针对给定的指标，只做性能验证。第三方测试机构基本上都是这样做的。        2.       **性能测试**        ：针对给定的系统，做全面的性能测试，可以得到系统最大容量，但不涉及到调优。        3.       **性能测试 + 分析调优**        ：针对给定的系统，做全面的性能测试，同时将系统调优到最优状态。        当只能做性能验证的团队遇到旧系统新版本性能测试类和新系统性能测试优化类项目，那就会很吃力，这样的团队只能做新系统性能测试类项目。 当做性能测试的团队，遇到需要新系统性能测试优化类项目，照样很吃力。这样的团队能做前两种项目。 只有第三个团队才能做第三种项目。 性能测试肯定要有结果报告性能结果如何来定义呢？有了前面监控的定义，有了场景执行的过程，产生的数据就要整理到结果报告中了。这个文档工作也是很重要的，是体现性能团队是否专业的一个重要方面。并不是整理一个Word，美化一下格式就可以了。测试报告是需要汇报或者归档的。 如果是内部项目，测试报告可能就是一个表格，发个邮件就完整了，另外归档也是必须的。而对一些有甲乙方的项目，就需要汇报了。 那么，如何汇报呢？ 我们要知道，大部分老板或者上司关心的是测试的结果，而不是用了多少人，花了多少时间这些没有意义的数字。我们更应该在报告中写上调优前后的TPS、响应时间以及资源对比图。 有了上面的的解析，相信你对性能测试的定义有了明确的感觉了。这个定义其实就是描述了性能测试中要做的事情。 当然，也许会有人跳出来说，你这个说得太重了，不够敏捷。现在不都用DevOps了吗？还要按这个流程来走一遍吗？ 显然有这种说法的人，没有理解我要说的主旨。以上的内容是针对一个完整的项目，或系统或公司的系统演进。对于一些半路就跟着版本和新需求一轮轮迭代做下去的人的处境会不同，因为这样的人只看到了当前的部分，而不是整个过程。 并且这个过程也是不断在迭代演进的。 不管是敏捷开发过程还是DevOps，你可以一条条去仔细分析下项目中的各个环节（我说的是整个项目从无到有），都不会跳出以上定义，如果有的话，请随时联系我，我好改定义。:) 通过图示最后总结一下性能测试的概念： ![](Images/4cae922b5469c6e2823eb44d71184425.png)savepage-src="https://static001.geekbang.org/resource/image/c7/3e/c78852164f22f4aac124b8bf9679243e.png"}有了这个图示之后，就比较清晰了。 所以，前面所说的压力测试、容量测试、负载测试等等，在实际的项目实施过程中，都不具备全局的指导价值。我个人认为，你应该在性能领域中抛弃这些看似非常有道理实则毫无价值的概念。 总结今天的内容我只讲了一点，那就是性能测试的概念。请不要再使用像性能测试、负载测试、容量测试这样的词来概括性能执行策略，这是对实施过程没有任何指导价值的。 在性能测试的概念中，性能指标、性能模型、性能场景、性能监控、性能实施、性能报告，这些既是概念中的关键词，也可以说是性能测试的方法和流程。 而这些概念我们在实际的工作中，都是非常重要的。因为它们要抹平沟通的误解。让不同层级，不同角色的人，可以在同样的知识背景下沟通，也可以让做事情的人有清晰的逻辑思路，同时对同行间的交流，也有正向的促进作用。 思考题最后给你留两道思考题吧，我为什么不推荐使用性能测试、负载测试、容量测试这样的词来概括性能执行策略呢？以及，为什么性能测试中要有监控和分析？ 欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。 