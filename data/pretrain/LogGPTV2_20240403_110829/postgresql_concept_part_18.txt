TheUNIQUEconstraintpreventsduplicatevaluesfromappearinginthecolumn. Itisimplemented
bycreatingauniqueindexonacolumn. AsindicatedinFigure 14.3,UNIQUEpreventsduplicates.
CREATETABLEdisplaysthenameoftheuniqueindexcreated. Thefigurealsoshowsthatmultiple
NULLvaluescanbeinsertedintoaUNIQUEcolumn.
IfaUNIQUE constraintconsistsofmore thanonecolumn, UNIQUEcannotbeusedasacolumn
constraint. Instead,youmustuseaseparateUNIQUElinetospecifythecolumnsthatmakeupthe
constraint. ThisapproachcreatesaUNIQUEtableconstraint.
Figure 14.4 shows a multicolumn UNIQUE constraint. While col1 or col2 themselvesmay not
beunique,theconstraintrequiresthecombinationofcol1andcol2tobeunique. Forexample,ina
155
156 CHAPTER14. CONSTRAINTS
test=> CREATE TABLE not_null_test (
test(> col1 INTEGER,
test(> col2 INTEGER NOT NULL
test(> );
CREATE
test=> INSERT INTO not_null_test
test-> VALUES (1, NULL);
ERROR: ExecAppend: Fail to add null value in not null attribute col2
test=> INSERT INTO not_null_test (col1)
test-> VALUES (1);
ERROR: ExecAppend: Fail to add null value in not null attribute col2
test=> INSERT INTO not_null_test VALUES (1, 1);
INSERT 174368 1
test=> UPDATE not_null_test SET col2 = NULL;
ERROR: ExecReplace: Fail to add null value in not null attribute col2
Figure14.1: NOTNULLconstraint
test=> CREATE TABLE not_null_with_default_test (
test(> col1 INTEGER,
test(> col2 INTEGER NOT NULL DEFAULT 5
test(> );
CREATE
test=> INSERT INTO not_null_with_default_test (col1)
test-> VALUES (1);
INSERT 148520 1
test=> SELECT *
test-> FROM not_null_with_default_test;
col1 | col2
------+------
1 | 5
(1 row)
Figure14.2: NOTNULLwithDEFAULTconstraint
14.2. UNIQUE 157
test=> CREATE TABLE uniquetest (col1 INTEGER UNIQUE);
NOTICE: CREATE TABLE/UNIQUE will create implicit index ’uniquetest_col1_-
key’ for table ’uniquetest’
CREATE
test=> \d uniquetest
Table "uniquetest"
Attribute | Type | Modifier
-----------+---------+----------
col1 | integer |
Index: uniquetest_col1_key
test=> INSERT INTO uniquetest VALUES (1);
INSERT 148620 1
test=> INSERT INTO uniquetest VALUES (1);
ERROR: Cannot insert a duplicate key into unique index uniquetest_col1_key
test=> INSERT INTO uniquetest VALUES (NULL);
INSERT 148622 1
test=> INSERT INTO uniquetest VALUES (NULL);
INSERT
Figure14.3: UNIQUEcolumnconstraint
test=> CREATE TABLE uniquetest2 (
test(> col1 INTEGER,
test(> col2 INTEGER,
test(> UNIQUE (col1, col2)
test(> );
NOTICE: CREATE TABLE/UNIQUE will create implicit index ’uniquetest2_col1_-
key’ for table ’uniquetest2’
Figure14.4: MulticolumnUNIQUEconstraint
158 CHAPTER14. CONSTRAINTS
test=> CREATE TABLE primarytest (col INTEGER PRIMARY KEY);
NOTICE: CREATE TABLE/PRIMARY KEY will create implicit index ’primarytest_-
pkey’ for table ’primarytest’
CREATE
test=> \d primarytest
Table "primarytest"
Attribute | Type | Modifier
-----------+---------+----------
col | integer | not null
Index: primarytest_pkey
Figure14.5: CreationofaPRIMARYKEYcolumn
tablethatcontainsthedriver’slicensenumbersofpeopleinvariousstates,twopeopleindifferent
statesmighthavethesamelicensenumber,butthecombinationoftheirstateandlicensenumber
shouldalwaysbeunique.
14.3 PRIMARY KEY
The PRIMARY KEY constraint, which marks the column that uniquely identifies each row, is a
combination of UNIQUE andNOT NULL constraints. With thistypeof constraint, UNIQUE prevents
duplicates,andNOTNULLpreventsNULLvaluesinthecolumn. Figure 14.5showsthecreationof
aPRIMARYKEYcolumn. Noticethatanindexiscreatedautomatically,andthecolumnisdefinedas
NOTNULL.
Just as with UNIQUE, a multicolumn PRIMARY KEY constraint must be specified on a separate
line. InFigure14.6,col1andcol2arecombinedtoformtheprimarykey.
A table cannot have more than one PRIMARY KEY specification. Primary keys have special
meaningwhenusingforeignkeys,whicharecoveredinthenextsection.
14.4 Foreign Key/REFERENCES
Foreignkeysaremorecomplexthanprimarykeys. PrimarykeysmakeacolumnUNIQUEandNOT
NULL. Foreignkeys,ontheotherhand,constraindatabasedoncolumnsinothertables. Theyare
calledforeignkeysbecausetheconstraintsareforeign—thatis,outsidethetable.
Forexample,supposeatablecontainscustomeraddresses,andpartofeachaddressisaUnited
Statestwo-characterstatecode. Ifatableheldallvalidstatecodes,aforeignkeyconstraintcould
becreatedtopreventauserfromenteringinvalidstatecodes.
14.4. FOREIGNKEY/REFERENCES 159
test=> CREATE TABLE primarytest2 (
test(> col1 INTEGER,
test(> col2 INTEGER,
test(> PRIMARY KEY(col1, col2)
test(> );
NOTICE: CREATE TABLE/PRIMARY KEY will create implicit index ’primarytest2_-
pkey’ for table ’primarytest2’
CREATE
Figure14.6: ExampleofamulticolumnPRIMARYKEY
Figure 14.7 shows the creation of a primary key/foreign key relationship. Foreign key con-
straints are created by using REFERENCESto refer to the primary key of another table. Foreign
keyslinkthetablestogetherandpreventtheinsertionorupdatingofinvaliddata.
Figure14.8showshowforeignkeysconstraincolumnvalues. HereALisaprimarykeyvalue
instatename,sotheINSERTisaccepted. XXisnotaprimarykeyvalueinstatename,sotheINSERT
isrejectedbytheforeignkeyconstraint.
Figure14.9showsthecreationofthecompanytablesfromFigure6.3,page61,usingprimary
andforeignkeys.
Avarietyofforeignkeyoptionsarediscussednextthatmakeforeignkeysevenmorepowerful.
Modification of Primary Key Row
Ifaforeignkeyconstraintreferencesarowasitsprimarykey,andtheprimarykeyrowisupdated
ordeleted,thenthedefaultforeignkeyactionistopreventtheoperation. Theforeignkeyoptions
ONUPDATEandONDELETE,however,allowadifferentactiontobetaken. Figure14.10showshow
these options work. The new customer table’s ON UPDATE CASCADEspecifies that if statename’s
primarykeyisupdated,customer.stateshouldbeupdatedwiththenewvalueaswell. Theforeign
keyON DELETESET NULL option specifiesthat if someone triesto deletea statename row that is
referencedbyanothertable,thedeleteoperationshouldsettheforeignkeytoNULL.
TheONUPDATEandONDELETEoptionscanhavethefollowingactions:
NOACTION UPDATEsandDELETEstotheprimarykeyareprohibitedifreferencedbyaforeignkey
row. Thisisthedefault.
CASCADE UPDATEstotheprimarykeyupdateallforeignkeycolumnsthatreferenceit. DELETEs
ontheprimarykeycausethedeletionofallforeignkeyrowsthatreferenceit.
SETNULL UPDATEsandDELETEstotheprimarykeyrowcausetheforeignkeytobesettoNULL.
160 CHAPTER14. CONSTRAINTS
test=> CREATE TABLE statename (code CHAR(2) PRIMARY KEY,
test(> name CHAR(30)
test(> );
CREATE
test=> INSERT INTO statename VALUES (’AL’, ’Alabama’);
INSERT 18934 1
…
test=> CREATE TABLE customer (
test(> customer_id INTEGER,
test(> name CHAR(30),
test(> telephone CHAR(20),
test(> street CHAR(40),
test(> city CHAR(25),
test(> state CHAR(2) REFERENCES statename,
test(> zipcode CHAR(10),
test(> country CHAR(20)
test(> );
CREATE
Figure14.7: Foreignkeycreation
test=> INSERT INTO customer (state)
test-> VALUES (’AL’);
INSERT 148732 1
test=> INSERT INTO customer (state)
test-> VALUES (’XX’);
ERROR:  referential integrity violation -
key referenced from customer not found in statename
Figure14.8: Foreignkeyconstraints
14.4. FOREIGNKEY/REFERENCES 161
test=> CREATE TABLE customer (
test(> customer_id INTEGER PRIMARY KEY,
test(> name CHAR(30),
test(> telephone CHAR(20),
test(> street CHAR(40),
test(> city CHAR(25),
test(> state CHAR(2),
test(> zipcode CHAR(10),
test(> country CHAR(20)
test(> );
CREATE
test=> CREATE TABLE employee (
test(> employee_id INTEGER PRIMARY KEY,
test(> name CHAR(30),
test(> hire_date DATE
test(> );
CREATE
test=> CREATE TABLE part (
test(> part_id INTEGER PRIMARY KEY,
test(> name CHAR(30),
test(> cost NUMERIC(8,2),
test(> weight FLOAT
test(> );
CREATE
test=> CREATE TABLE salesorder (
test(> order_id INTEGER,
test(> customer_id INTEGER REFERENCES customer,
test(> employee_id INTEGER REFERENCES employee,
test(> part_id INTEGER REFERENCES part,
test(> order_date DATE,
test(> ship_date DATE,
test(> payment NUMERIC(8,2)
test(> );
CREATE
Figure14.9: Creationofcompanytablesusingprimaryandforeignkeys
162 CHAPTER14. CONSTRAINTS
test=> CREATE TABLE customer (
test(> customer_id INTEGER,
test(> name CHAR(30),
test(> telephone CHAR(20),
test(> street CHAR(40),
test(> city CHAR(25),
test(> state CHAR(2) REFERENCES statename
test(> ON UPDATE CASCADE
test(> ON DELETE SET NULL,
test(> zipcode CHAR(10),
test(> country CHAR(20)
test(> );
CREATE
Figure14.10: Customertablewithforeignkeyactions
SETDEFAULT UPDATEsandDELETEstotheprimarykeyrowcausetheforeignkeytobesettoits
DEFAULT.
Figure14.11illustratestheuseoftheCASCADEandNOACTIONrules. First,primarytest,whichwas
usedinFigure14.5,iscreated. ThenaforeigntesttablewithONUPDATECASCADEandONDELETE
NOACTIONiscreated. NOACTIONisthedefault,soONDELETENOACTIONwasnotrequired. Next,a
singlerowisinsertedintoeachtable,andanUPDATEonprimarytestcascadestoUPDATEforeigntest.
The primarytest row cannot be deleted unless the foreign key row is deleted first. Foreign key
actionsofferyougreatflexibilityincontrollinghowprimarykeychangesaffectforeignkeyrows.
Multicolumn Primary Keys
To specify a multicolumn primary key, it was necessary to use PRIMARY KEY on a separate line
in the CREATE TABLE statement. Multicolumn foreign keys have the same requirement. Using
primarytest2 from Figure 14.6, Figure 14.12 shows how to create a multicolumn foreign key.
FOREIGNKEY(col,…)mustbeusedtolabelanymulticolumnforeignkeytableconstraints.
Handling NULL Values in the Foreign Key
A NULL value cannot reference a primary key. A single-column foreign key is either NULL or
matches a primary key. In a multicolumn foreign key, sometimes only part of a foreign key can
beNULL. ThedefaultbehaviorallowssomecolumnsinamulticolumnforeignkeytobeNULLand
otherstobenotNULL.
14.4. FOREIGNKEY/REFERENCES 163
test=> CREATE TABLE primarytest (col INTEGER PRIMARY KEY);
NOTICE: CREATE TABLE/PRIMARY KEY will create implicit index ’primarytest_-
pkey’ for table ’primarytest’
CREATE
test=> CREATE TABLE foreigntest (
test(> col2 INTEGER REFERENCES primarytest
test(> ON UPDATE CASCADE
test(> ON DELETE NO ACTION
test(> );
NOTICE: CREATE TABLE will create implicit trigger(s) for FOREIGN KEY check(s)
CREATE
test=> INSERT INTO primarytest values (1);
INSERT 148835 1
test=> INSERT INTO foreigntest values (1);
INSERT 148836 1
test=>
test=> -- CASCADE UPDATE is performed
test=>
test=> UPDATE primarytest SET col = 2;
UPDATE 1
test=> SELECT * FROM foreigntest;
col2
------
2
(1 row)
test=>
test=> -- NO ACTION prevents deletion
test=>
test=> DELETE FROM primarytest;
ERROR:  referential integrity violation -
key in primarytest still referenced from foreigntest
test=>
test=> -- By deleting the foreign key first, the DELETE succeeds
test=>
test=> DELETE FROM foreigntest;
DELETE 1
test=> DELETE FROM primarytest;
DELETE 1
Figure14.11: Foreignkeyactions
164 CHAPTER14. CONSTRAINTS
test=> CREATE TABLE primarytest2 (
test(> col1 INTEGER,
test(> col2 INTEGER,
test(> PRIMARY KEY(col1, col2)
test(> );
NOTICE: CREATE TABLE/PRIMARY KEY will create implicit index ’primarytest2_-
pkey’ for table ’primarytest2’
CREATE
test=> CREATE TABLE foreigntest2 (col3 INTEGER,
test(> col4 INTEGER,
test(> FOREIGN KEY (col3, col4) REFERENCES primary-
test2
test-> );
NOTICE: CREATE TABLE will create implicit trigger(s) for FOREIGN KEY check(s)
CREATE
Figure14.12: Exampleofamulticolumnforeignkey
UsingMATCHFULLinamulticolumn foreignkeyconstraintrequiresallcolumnsin thekeyto
be NULL or all columns to be not NULL. Figure 14.13 illustratesthis case. First, the tablesfrom
Figure14.12areusedtoshowthatthedefaultallowsonecolumnofaforeignkeytobesettoNULL.
Next, the table matchtest is created with the MATCH FULL foreign key constraint option. MATCH
FULL allows all keycolumns to be set to NULL, but rejectsthe settingof only some multicolumn
keyvaluestoNULL.
Frequency of Foreign Key Checking
By default, foreign key constraints are checked at the end of each INSERT, UPDATE, and DELETE
query. Thus,ifyouperformasetofcomplextablemodifications,theforeignkeyconstraintsmust
remainvalidatalltimes. Forexample,usingthetablesinFigure 14.7,ifanewstateisaddedand
thenanewcustomerinthenewstateisinserted,thenewstatemustbeaddedtostatenamebefore
thecustomerisaddedtocustomer.
Insomecases,itmaynotbepossibletokeepforeignkeyconstraintsvalidbetweenqueries. For