whether their corresponding conﬁguration is activated at run-
time every time the function into which they are instrumented
is executed. When SWRRs are instrumented for patch-based
deployment, there is no additional runtime overhead because
there is no such check. Table VII gives the overhead of SWRRs
for in-place deployment, measured by the number of lines of
source code added by Talos and the number of corresponding
source ﬁles modiﬁed by Talos. Column “App.” shows the name
of the application. Column “LOC” and “Files” show the num-
ber of lines of code and the number of original source ﬁles,
respectively. Column “Added LOC” shows the percentage of
the lines of source code added by Talos, and column “Modiﬁed
Files” shows the percentage of corresponding source ﬁles
modiﬁed by SWRRs. Column “Runtime” shows the runtime
performance overhead of SWRRs. The last row shows the
average for all columns.
On one hand, we can see that Talos adds on average
2% more lines of source code to implement SWRRs in
applications. Given the high coverage achieved by Talos, this
indicates that Talos has a very small footprint for each SWRR.
On the other hand, the percentage of source ﬁles changed by
Talos in order to add SWRRs is on average 89%. This indicates
that the functions protected by SWRRs are distributed among
most of the source ﬁles.
To measure the runtime performance overhead of SWRRs,
we use standard benchmarks for each application if a stan-
dard benchmark is available, otherwise we write our own
benchmark. For each application, we compare the performance
of a version of the application that is hardened by SWRRs
with a version that is not. We run each benchmark three
times for each application and use the average of the three
measurements. To have a fair comparison, we run the hardened
version of each application with all SWRRs disabled, which
has the same functionality of the original application but with
the added execution of the SWRRs.
For web servers including lighttpd and apache, we use
ApacheBench [1]. For the squid cache proxy, we also use
ApacheBench, but we enable the use squid as web proxy in
its settings. We use the throughput as the performance metric
for these three applications. Roughly SWRRs reduce their
throughput by 2%.
For ftp servers including proftpd, we use the ftp benchmark
included with pyftpdlib [15], which measures the transfer
rate for both ﬁle uploads and downloads. SWRRs reduce
the transfer rate for ﬁle uploads by only 1.2%, and have a
negligible impact on ﬁle downloads.
For sqlite, we created our own benchmark, which is based
on the description of a series of SQL database performance
tests on sqlite’s ofﬁcial web site
[9]. It consists of over
70,000 SQL commands to create table, drop table, insert data,
update data, query data, delete data, and perform database
transactions. The benchmark measures the total execution
time of all these SQL commands on sqlite database tables
containing from 10,000 to 25,000 records of data. SWRRs
incur a performance overhead of 1.0% on sqlite. On average
in-place deployment of SWRRs has a very small runtime
performance overhead of 1.3% for all ﬁve applications.
VII. DISCUSSION
We begin by discussing the the limitations of SWRRs and
then other operational issues associated with the deployment
630630
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
of SWRRs.
A. Limitations
The ability of SWRRs to neutralize vulnerabilities without
security violations is limited by the assumption that applica-
tions correctly implement error-handling code. Naturally, this
is not the case – applications developers may fail to identify
and handle errors, or even if they do handle them, they may
handle them incorrectly, as previous work has shown [29],
[61]. Unfortunately, there is little that Talos can do if the error-
handling code it calls contains bugs. We hope, as previous
work has also implored, that developers should pay more
attention to the correctness of error-handling code. While it
is not invoked very often, when unexpected errors arise error-
handling code is the last line of defense the application has
against catastrophic failures.
Another obvious limitation is that Talos has no control over
where vulnerabilities occur. As illustrated in lighttpd (CVE-
2012-5533) and squid (CVE-2009-0478), if the vulnerability
occurs in a key function that is used in many operations, then
the availability of the application will be severely impacted.
Fortunately, this appears to be the less common case (only
3 out of 11 cases in our experiments). We speculate that
this is likely due to bugs and vulnerabilities occurring in
less commonly executed code, as that code receives fewer
opportunities for testing and has less chance of having a bug
triggered in production use.
Currently Talos does not leverage the structured exception
handling that is used in programming languages such as C++
and Java. However, Talos can be easily extended to do so,
since exception handling makes error-handling code explicit,
making it even easier for Talos to locate and use error-handling
code in the application. In these cases, Talos can look for a
type of exception that can be safely used to abort the execution
of a function and generate an SWRR that throws the exception
as the mechanism to prevent the execution of the function. To
identify the exception that can be used, Talos can examine
which exception is caught by existing exception handlers in
the function or which exception is thrown by the function. If
Talos cannot locate this kind of exception in the function itself,
it can look for it in the callers of the function. We believe that
leveraging structured exception handling would be interesting
future work to explore.
B. Other Issues
Another question is whether SWRRs and their use can
decrease the security of an application in other ways, or
whether the SWRRs themselves can be circumvented by
an attacker even when activated. For example, even if the
user activates an SWRR, an attacker can still corrupt the
value of an SWRR option and re-enable the vulnerable code.
While this is possible, we believe it sufﬁciently raises the
bar for the attacker, as she must have a memory corruption
vulnerability that is not in the function(s) disabled by the
activated SWRR(s). In other words, to exploit an SWRR, the
attacker needs a zero-day memory corruption vulnerability.
Given the nature of most memory corruption vulnerabilities,
it would be likely that an attacker who has access to such a
vulnerability would just use it to compromise the application
directly rather than use it to disable an SWRR.
In the rare instance that a memory corruption vulnerability
doesn’t allow remote code execution but can still corrupt an
SWRR option, the attacker now has the ability to activate
or deactivate SWRRs, allowing them to re-enable disabled
functions or disable enabled ones. As discussed above, they
could thus silently re-enable vulnerabilities, or they could
prevent code from being executed if the application has
no known vulnerabilities. However, as we have shown in
this paper, activated SWRRs generally do not cause security
vulnerabilities, and only impact availability. Thus, the most
the attacker can do is to cause a denial of service attack with
a memory corruption vulnerability – which is something they
could likely already do with a memory corruption vulnerability
even in the absence of SWRRs.
VIII. RELATED WORK
Most closely related to the concept of an SWRR are propos-
als that attempt to mitigate security vulnerabilities or software
ﬂaws by altering the execution of an application. These can
be broken down into those that harden the application code
and those that ﬁlter inputs to the application.
Hardening application code. Systems that harden application
code to prevent an attacker from exploiting vulnerabilities are
a rich area of research. For example, Software Fault Isola-
tion (SFI) [56] and similar techniques [37], [60], instrument
memory operations with bounds checks to make sure even
erroneous ones cannot corrupt memory. Another approach is
to validate every control transfer with Control Flow Integrity
(CFI) [20], [27], [40], [41], [55], [63], [64]. Compared to
the code instrumentation Talos uses for SWRRs, the code
instrumentation that these systems use is either more complex
in the case of CFI or needs to be called more frequently in the
case of SFI. As a result, these hardening approaches generally
have a higher performance overhead.
Filtering inputs. An alternative to hardening application code
is to detect and ﬁlter malicious inputs. In general,
these
techniques perform analysis of the application source code
to generate a vulnerability-speciﬁc input ﬁlter that will detect
inputs that could reach the speciﬁed vulnerability. Some pro-
posals detect and drop such inputs [26], [34], [53], [57], while
others convert malicious inputs into benign inputs [33], [46].
For example, Bouncer uses static analysis, combined with
dynamic symbolic analysis, on programs to infer the condi-
tions that inputs must satisfy to exploit a vulnerability and
then craft ﬁlters based on these conditions [26]. HEALERS
protects library functions by generating wrappers on them,
which intercept malicious inputs and return an error condition
instead of executing the vulnerable function [53]. It uses
static analysis-guided fault injection to infer predicates on the
input arguments to a function that can cause the function to
crash. HEALERS only works on libraries with a well deﬁned
631631
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
error speciﬁcation in their API. In contrast, Talos works on
arbitrary internal functions in an application, and thus must
infer error paths and values since it does not assume they are
speciﬁed. Shields [57] uses statically extracted information to
generate network ﬁlters, which then drop the network packets
that might potentially trigger a vulnerability. Finally, SOAP
heuristically converts malicious inputs into benign inputs [33]
so that an application can still return partial (though sometimes
inconsistent) results. It uses ofﬂine-training on benign inputs,
along with input format supplied by its users, to infer critical
ﬁelds of the input and the constraints over these critical ﬁelds.
Based on these constraints, it rectiﬁes inputs whose critical
ﬁelds contain values that violate the constraints.
The major difference between Talos and these approaches is
that they all require some malicious input, i.e. proof-of-concept
exploit, that can trigger a vulnerability. However, we ﬁnd
that most of times a proof-of-concept exploit is not publicly
available for a disclosed vulnerability, probably due to security
concerns. On the contrary, Talos does not require a proof-of-
concept exploit and requires only the name of a vulnerable
function, which is usually publicly available in vulnerability
databases.
Resuming execution after faults. Another area of related
work tries to improve fault tolerance by allowing an appli-
cation to continue execution after a fault has occurred [24],
[28], [35], [44], [45], [51]. In general, these do not have
the same level of security as Talos as they cannot guarantee
that the recovered application is secure, but they follow the
same principle of detecting an erroneous application state and
redirecting it to some non-erroneous state that Talos uses with
SWRRs.
Failure-Oblivious Computing is proposed to improve the
resilience of server applications after an attack has triggered
memory errors, by augmenting an application to ignore mem-
ory errors [45]. For out-of-bounds memory writes, it simply
discards them. For out-of-bounds memory reads, it redirects
them to a preallocated buffer that contains pre-deﬁned values
that are likely to reduce the possibility of a crash or inﬁnite
loop. Recently, this work was followed by RCV, which further
limits the propagation of the manufactured values within an
application by skipping any system call
tries to use
them [35]. Like Talos, these approaches seek to trigger error-
handling code in the application. The main difference is that
these approaches are simpler in that they guess the values
that will cause this to happen, while Talos uses static analysis
on the application source code to discover the location of
error-handling code and the appropriate place to intercept
and redirect execution to the error-handling code. Another
difference is that these approaches focus on executing past
out-of-bounds memory accesses, while Talos, which disables
individual functions, can handle a broader set of software
faults.
that
A technique has been proposed to abort the execution of a
function when it overruns a memory buffer, as a consequence
of malicious inputs, and resume the execution right after the
call to the offending function after making a best effort to
undo any side-effect caused by the offending function such as
changing global variables [51]. Their evaluation also indicates
that the program can continue run in many situations. The
challenge of this work is that many times it is difﬁcult if not
impossible to infer what side-effects the partial execution of
a function has caused and how to correctly undo them. Talos
avoids this problem by not executing any part of a function
and simply forcing the function to return an error code to its
caller.
Finding existing workarounds for failures. A recently
emerging area is searching the conﬁguration space of an
application for workarounds for a speciﬁc failure. REFRACT
searches for conﬁguration workaround for program fail-
ures [54]. Given a model of the conﬁguration space of a
program and strategies to avoid failures, REFRACT tries to
ﬁnd a conﬁguration workaround that can avoid the failures
caused by malicious inputs, by repeatedly replaying inputs
that trigger the failures to the program using different sample
conﬁgurations. For 6 of 7 Firefox bugs, it successfully found
conﬁguration workarounds. Unlike Talos, REFRACT relies on
the existing conﬁguration space of a program to workaround
a vulnerability. However, our ﬁndings show that conﬁgura-
tions often do not provide sufﬁcient coverage to workaround
most security vulnerabilities. Talos avoids this limitation by
instrumenting a program with SWRRs, which are designed
speciﬁcally to protect the program from being exploited.
Automatic patch generation. A very different approach to
solving the vulnerability problem is to try and ensure that
patches are always available by automatically generating them.
ClearView learns invariants of a program in a training
phase via dynamic analysis. Once the program is deployed,
it monitors for failures and identiﬁes the invariants that are
correlated with the failures. If a vulnerability is discovered, it
uses the extracted invariants and runtime feedback to generate
patches that can be applied to the binaries of the vulnerable
programs [44].
A large body of work also examines the automatic gener-
ation of source code patches using vulnerability reports [31],
[32], [39], [48], [58], [59]. Based on genetic programming,
GenProg takes the source code of a program and a set of test
cases as input to construct patches for bugs in programs [32].
A further study on software repair using GenProg achieves a
wide range of success rates between 5% to 100% for a set of
programs. Combining symbolic execution and constraint solv-
ing, SemFix synthesizes patches using program synthesis [39]
and achieves an average success rate around 51%. Their results
indicate that creating patches for bugs still largely requires
manual work from developers.
On top of ﬁxing vulnerabilities, a recent work aims to
misinform attackers about whether an exploit works or not by
transforming a regular patch into a honey-patch, which adds
additional logic to redirect malicious inputs to a vulnerable
version of a program, so that the exploit targeting the patched
vulnerability appears to be successful to attackers [22].
632632
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
Talos is largely complementary to work on automatic patch
generation. Automatic patch generation faces many of the
same difﬁculties of inferring and maintaining correctness in-
variants for programs. The difference is that Talos does not aim
to preserve all existing functionality, while automatic patch
generation does.
Characterizing software vulnerabilities. Since software vul-
nerabilities are such a major source of security threats, there
has been a lot of work on characterizing and understanding
software vulnerabilities to determine indicators that might pre-
dict their presence [21], [38], [50]. They measured characteris-
tics such as vulnerability density, defect density, vulnerability
discovery rate, structural complexity of code, code churns, and
developer activities on code; and built models based on the
relationships between them. We mention these as they served
as an inspiration for us to study conﬁguration workarounds to
mitigate such vulnerabilities.
A recent study on the life cycle of software releases [25]
indicates that the rapid-release methodology used by Mozilla
Firefox does not increase the ratio of vulnerabilities in the
code, somewhat contrary to the popular belief that frequent
code changes result in less secure software. Another study has
measured characteristics such as evolution of vulnerabilities
over the years, impacts of vulnerabilities, and access required
for exploits over vulnerabilities and their implications on soft-
ware design, development, deployment, and management [49].
IX. CONCLUSION
We describe the design and implementation of Talos, a sys-
tem that enables safe and precise SWRRs to protect software
vulnerabilities from being exploited by attackers. Our main
conclusion is that SWRRs are a rapid, secure, and low-cost
solution to enable applications to continue to be used until a
patch becomes available. To arrive at this conclusion we test
320 SWRRs in ﬁve real world applications and ﬁnd that the
majority of them are unobtrusive and that 75.1% of potential
vulnerabilities can be disabled by an SWRR. This indicates
that SWRRs can be effective in 2.1× more vulnerabilities
than traditional conﬁguration workarounds. We also reproduce
11 vulnerabilities and their exploits and try them on the
applications with and without SWRRs instrumented by Talos.
We ﬁnd that in all 11 cases, the security of the application is
upheld and that in 8 cases, the applications retains either all or
most of its functionality (with the exception of the vulnerable
code).