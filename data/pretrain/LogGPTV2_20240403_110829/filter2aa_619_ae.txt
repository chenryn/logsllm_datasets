### Example 10-24: Generating Test Messages with a Bash Script
```bash
#!/bin/bash
for i in {auth,auth-priv,cron,daemon,kern,lpr,mail,mark,news,syslog,user,uucp,local0,local1,local2,local3,local4,local5,local6,local7}; do
    for k in {debug,info,notice,warning,err,crit,alert,emerg}; do
        logger -p $i.$k "Test daemon message, facility $i priority $k"
    done
done
```

This script generates test messages for various syslog facilities and priorities using the `logger` command. It is useful for testing and validating syslog configurations.

---

## Managing System-Log Files

Configuring and fine-tuning your system-logging facilities is crucial for system security and general diagnostics. However, if log files grow too large and fill up their filesystem, all your efforts may be in vain.

Most Linux distributions come with a preconfigured log-rotation scheme. While this default configuration often works adequately, it is essential to understand, periodically evaluate, and, if necessary, customize your log-management setup.

### Log Management in Red Hat 7 and Debian 2.2

Both Red Hat 7 and Debian 2.2 use a binary program called `logrotate` to handle system-log growth. The global options and low-level (system) log files are configured in `/etc/logrotate.conf`, and application-specific configuration scripts are stored in `/etc/logrotate.d/`.

When `logrotate` is run, all scripts in `/etc/logrotate.d/` are included into `logrotate.conf` and parsed as one big script. This makes the configuration very modular. When you install an RPM or DEB package that creates logs, your package manager automatically installs a script in `/etc/logrotate.d/`, which will be removed if you uninstall the package.

**Important Note:** Do not remove the statement that includes `/etc/logrotate.d/` in `logrotate.conf` if you use Red Hat or Debian, as their package managers depend on this directory for package-specific log-rotation scripts.

#### Syntax of `logrotate.conf` and Its Included Scripts

There are two types of elements in `logrotate.conf` and its included scripts: directives (options) and log-file specifications. A directive is a parameter or variable declaration, while a log-file specification is a group of directives that apply to a specific log file or group of log files.

In Example 10-25, we see a simple `/etc/logrotate.conf` file. The global options at the top can be considered the default log-file specification. Any directive for a specific log file takes precedence over the global options.

**Example 10-25: Simple `logrotate.conf` File**
```conf
# Very simple logrotate.conf file
# Global options: rotate logs monthly, saving four old copies and sending
# error-messages to root. After "rotating out" a file, touch a new one
monthly
rotate 4
errors root
create

# Keep an eye on /var/log/messages
/var/log/messages {
   size 200k
   create
   postrotate
      /bin/kill -HUP `cat /var/run/syslog-ng.pid 2> /dev/null` 2> /dev/null || true
   endscript
}
```

**Table 10-12: Common `logrotate` Directives**

| Directive | Description |
|-----------|-------------|
| `/path/to/logfile { ... }` | Log file specification header/footer. Applies directives to the specified log file. Whitespace is ignored. Applicable global directives are also applied, but local settings override global ones. |
| `rotate number` | Retains `number` old versions of the specified log file. Setting this to zero overwrites the old log file. |
| `daily | weekly | monthly | size=number_bytes` | Criteria for rotating the specified file: daily, weekly, monthly, or when the file size reaches or exceeds `number_bytes`. |
| `mail [username|mail@address]` | Emails old files to the specified local user or email address rather than deleting them. |
| `errors [username|email@address]` | Emails `logrotate` error messages to the specified local user or email address. |
| `compress` | Uses `gzip` to compress old versions of log files. |
| `copytruncate` | Moves most of the data out into an archive file instead of renaming the current log file and creating a new (empty) one. Useful for programs that need to keep the log file open for continuous writing. |
| `create [octal_mode owner group]` | Recreates the (now empty) log file immediately after rotation. Can set file mode, owner, and group properties. |
| `ifempty | notifempty` | By default, `logrotate` will rotate a file even if it’s empty. `notifempty` cancels this behavior; `ifempty` restores it. |
| `include file_or_directory` | Includes the specified file or the files in the specified directory when parsing `logrotate.conf`. |
| `missingok | nomissingok` | By default, `logrotate` returns a message if a log file doesn’t exist. `nomissingok` cancels this behavior; `missingok` restores it. |
| `olddir dir | noolddir` | Keeps old versions of a log file in `dir`; `noolddir` keeps them in the same directory as the current version. |
| `postrotate ... endscript` | Executes specified lines after rotating the log file. Cannot be declared globally. Typically used to send a SIGHUP to the application that uses the log file. |
| `prerotate ... endscript` | Executes specified lines before rotating the log file. Cannot be declared globally. |

### Running `logrotate`

In both Red Hat 7 and Debian 2.2, `logrotate` is invoked by the script `/etc/cron.daily/logrotate`, which consists of a single command:
```sh
/usr/sbin/logrotate /etc/logrotate.conf
```

This does not necessarily mean that logs are rotated daily; it means that `logrotate` checks each log file daily against its configuration script and rotates or does not rotate the log file accordingly.

If you want `logrotate` to run less frequently, you can move this script to `/etc/cron.weekly/` or even `/etc/cron.monthly/` (though the latter is not recommended unless `logrotate` is configured to rotate each and every file monthly).

### Log Management in SuSE 7

Log rotation in SuSE is configured at a high level in `/etc/rc.config` (the configuration file for `suseconfig`, the primary backend engine of YaST). This file contains a variable called `MAX_DAYS_FOR_LOG_FILES`, which sets the maximum number of days system logs are kept (default is 365).

SuSE uses a script called `/etc/cron.daily/aaa_base_rotate_logs` for day-to-day log rotation. This script should not be manually edited; its behavior is controlled by the file `/etc/logfiles`, which lists the files to be rotated along with their maximum sizes, permissions, ownerships, and the startup script (if any) that should be restarted after rotation.

**Example 10-26: Excerpts from `/etc/logfiles`**
```conf
# /etc/logfiles - This file tells cron.daily, which log files have to be watched
#
# File                       max size   mode     ownership    service
#                                                           (reload if changed)
/var/log/mgetty.*              +1024k   644      root.root
/var/log/messages              +4096k   640      root.root
/var/log/httpd/access_log      +4096k   644      root.root     apache
/var/squid/logs/access.log     +4096k   640      squid.root
```

### Using Swatch for Automated Log Monitoring

After configuring and fine-tuning your system logger to sort system messages by type and importance and setting up a log-rotation scheme, you may find it challenging to read all those log messages. `swatch` (the "Simple WATCHer") is a free log-monitoring utility written in Perl that monitors logs as they are being written and takes action when it finds something you’ve told it to look out for.

#### Installing Swatch

There are two ways to install `swatch`:

1. **Binary Package**: Install via the binary package provided by your Linux distribution.
2. **Source Distribution**: Download the source distribution from [http://www.stanford.edu/~atkins/swatch](http://www.stanford.edu/~atkins/swatch). The source distribution includes a sophisticated script called `Makefile.PL` that automatically checks for necessary Perl modules, downloads and installs them using CPAN, and generates a Makefile.

**Example 10-27: Successful `Makefile.PL` Run**
```sh
[root@barrelofun swatch-3.0.1]# perl Makefile.PL
Checking for Time::HiRes 1.12 ... ok
Checking for Date::Calc ... ok
Checking for Date::Format ... ok
Checking for File::Tail ... ok
Checking if your kit is complete...
Looks good
Writing Makefile for swatch
[root@barrelofun swatch-3.0.1]#
```

Once `Makefile.PL` has successfully created a Makefile for `swatch`, you can build and install it with the following commands:
```sh
make
make test
make install
make realclean
```

The `make test` command is optional but useful for ensuring that `swatch` can properly use the Perl modules installed.

### Should We Let Perl Download and Install Its Own Modules?

The Comprehensive Perl Archive Network (CPAN) is a network of Perl software archives. Perl Version 5.6.x includes modules (CPAN and others) that can automatically download and install required Perl modules. This feature simplifies the installation process but requires careful consideration to ensure that only trusted sources are used.

---

This text has been optimized for clarity, coherence, and professionalism. If you have any further requests or need additional information, feel free to ask!