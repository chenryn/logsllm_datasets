line in each graph) for determining page mappings. In the upper
graph, the red line placed at 235 cycles clearly distinguishes the
mapped from the unmapped pages of the modules. Similarly, the
red line placed at 210 cycles in the lower graph clearly separates
the executable pages from the non-executable ones (including
unmapped pages). We probed the timing on accessing each page
in the Linux kernel module area 100 times, while running kernel
version 4.4.0. Modules are loaded from 0xffffffffc0347000
to 0xffffffffc0bf9000, and the DrK attack breaks KASLR
with perfect (100%) accuracy.
pages were 18–31 cycles1. Similarly, when we attempted
to execute arbitrary kernel memory pages using a jmp in-
struction, the timing differences between executable and
non-executable pages were 30–44 cycles.
While the timings depend on the architecture or clock
rate of the processor, the common characteristics of the
timing is that there is always a timing gap for the page
mapping types across different types of processors. Fur-
thermore, the minimum number does not depend on the
OS settings. On running the experiment over multiple en-
vironments (different OSes, or under the Xen hypervisor),
we discovered that the timing is the characteristic of the
1There was no difference between read and write attempts.
CPU, and it did not depend on the OS (see §4.4).
The difference between minimum timings for each
page mapping type can be exploited to determine the
memory mapping status. For example, on an Intel Core
i7-6700K Skylake processor, probing on unmapped pages
always took more than 240 cycles. In contrast, probing
on mapped pages took less than that, with a minimum of
209 cycles. Under this condition, if a page was probed
in 230 cycles, then it is a mapped page because for the
unmapped page, it is impossible to take less than 240
cycles to probe it. Thus, we set the threshold to use in
determining page mapping status as a value less than the
minimum timing of unmapped page. We also took the
minimum timing of executable page for distinguishing
executable and non-executable pages.
Figure 6 shows how the timing is measured for the
actual memory pages, for 100 iterations of probing. On
probing mapped and unmapped pages (Figure 6(a)), we
set the horizontal (red) line at 235 cycles (less than the
minimum of U), and use it as the threshold for mapped
pages. The line clearly separates the unmapped pages (the
upper half) from the mapped pages (the lower half), and
there is a clear gap of 30 cycles between the halves. On
probing the executable permission status (Figure 6(b)),
we set 210 cycles (less than the minimum of NX) as the
threshold for executable pages. The red line on the thresh-
old clearly separates the non-executable or unmapped
pages (the upper half) from the executable pages (the
lower half), and there is a clear gap of 40 cycles between
them.
As shown in the graph, the timing channel is highly
consistent. Using this timing channel, the DrK attack can
clearly determine the mapping status of a page and its ex-
ecutable permission by comparing measured timings with
minimum threshold for the types of pages. On evaluating
DrK for breaking KASLR in the commodity OSes (in
§4.2), we observed that the DrK attack can achieve 100%
accuracy in determining page mapping and executable
status across multiple runs of the attacks.
4.2 Breaking KASLR in Popular OSes
To demonstrate the feasibility of the DrK attack in realis-
tic settings, we evaluated the attack on commodity 64-bit
OSes that use KASLR, namely, Linux kernel 4.4.0, Win-
dows 10 10.0.10586, and Mac OS X El Capitan 10.11.4
2. Furthermore, we also mounted the DrK attack on a
Linux virtual machine (VM) running on Xen hardware
virtual machine (HVM) mode to test against cloud envi-
ronment settings. This setting resembles that of an X1
instance [2] in the Amazon Elastic Compute Cloud (EC2),
which (will) support TSX on the cloud.
2All tested operating systems are the latest version as of May 2016.
7
Table 4 summarizes the result of the DrK attack
on various hardware and software configurations.
In
short, the DrK attack demonstrates around 99%–100%
of accuracy—not just mapped and unmapped pages, but
also executable pages, independent to the OS—for deter-
mining kernel address mappings in all major OSes and
even in a virtualized environment, in few seconds with
near-perfect accuracy. To the best of our knowledge, this
level of accuracy, speed, and generality in a cache timing
side-channel attack has never been demonstrated before.
1. Accuracy. The DrK attack is highly accurate. It can
identify the mapping status of a kernel address at
the page-level granularity. In comparing the result
from the DrK attack with the ground truth page table
mappings, we achieved 100% accuracy in detecting
the correct page mapping across the OSes and CPUs.
The high accuracy of DrK lets the attacker infer
more information about the kernel; for example, the
mapping addresses can be used for detecting the
exact location of some kernel modules. The DrK
attack can accurately identify the location of the
driver code in Windows, by correctly determining
the base address of 97 specific drivers among a total
141 loaded drivers using the unique signature of
X/NX/U mapping size information.
2. Speed. DrK can scan the entire possible kernel allo-
cation space of 64-bit OSes very quickly. For attack-
ing the start address of the kernel image, i.e., getting
the ASLR slide, DrK is very fast: it only took 5 ms
to successfully identify the base address of the Linux
Kernel. For the full scanning of the Linux kernel
and modules pages (around 6,000 pages), it took less
than a second while achieving 100% accuracy.
3. Generality. DrK does not depend on software set-
tings. The attack works well over the latest version
of all three commodity OSes (Windows, Linux, and
OS X), and even worked on the virtualized environ-
ment (Linux guest under Xen HVM). The root cause
of the timing channel in the DrK attack bounds to the
hardware specifications; therefore, if the processor
supports TSX, then the system is vulnerable to the
attack. This also indicates that the attack would be
very difficult to defeat using software-level counter-
measures.
Attack strategy. The DrK attack consists of two stages.
First, we scan all possible slots of kernel pages mentioned
in Table 2 to find the base and the end address of both
kernel and drivers (modules). In this step, the base ad-
dress (ASLR slide) is found. The second step is to obtain
more accurate mapping information at a page-level gran-
ularity. We try to measure the permission of each page
CPU
Type
# Pages
OS
Linux
Windows
Linux Xen
Skylake (i7-6700K)
Skylake (i7-6700K)
Skylake (i5-6300HQ)
Haswell (E3-1271 v3)
Kernel/Modules
Kernel/Modules
Kernel/Modules
Kernel/Modules
Skylake (i5-6300HQ)
Skylake (i5-6300HQ)
Skylake (i5-6300HQ)
Kernel/Driver
Kernel/Driver
Kernel/Driver
Skylake (i5-6300HQ)
Skylake (i5-6300HQ)
Haswell (E3-1271 v3)
Haswell (E3-1271 v3)
Kernel/Modules
Kernel/Modules
Kernel/Modules
Kernel/Modules
Accuracy
M/U
Module
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
99.51%
100.00%
-
-
-
X/NX/U
Kernel
100.00%
100.00%
100.00%
100.00%
See (a)
See (a)
See (a)
99.98%
100.00%
99.95%
99.99%
-
-
-
M/U
Kernel
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
99.95%
99.99%
100.00%
100.00%
100.00%
X/NX/U Max M Max X
Module
# Iter
Time (s)
Clock
100.00%
100.00%
100.00%
100.00%
90.45%
98.60%
99.28%
99.98%
100.00%
99.51%
100.00%
-
-
-
235
235
183
192
183
183
183
580 (b)
580 (b)
192
192
235
183
235
210
210
163
177
163
163
163
530 (b)
530 (b)
177
177
-
-
-
100
20
100
100
100
500
1,000
100
500
100
500
100
100
100
0.54
0.45
0.63
0.53
4.96
22.5
45.9
1.68
3.70
0.94
1.45
5ms
797ms
31ms
3.9 GHz
3.9 GHz
3.0 GHz
3.9 GHz
2.8 GHz
2.8 GHz
2.8 GHz
2.3 GHz
2.3 GHz
3.6 GHz
3.6 GHz
3.9 GHz
3.0 GHz
3.9 GHz
6,147
6,147
6,147
6,147
34,258
34,258
34,258
5,633
5,633
5,375
5,375
64
8,192
256
Linux
Windows
OS X
Skylake (i7-6700K)
Skylake (i5-6300HQ)
Skylake (i7-6700K)
Kernel Base Addr
Kernel Base Addr
Kernel Base Addr
Table 4: Summary of the evaluation results of the DrK attack. To calculate the accuracy, we ran the full attack 10 times, then
calculated the geometric mean to show consistency of the result over multiple runs. To break KASLR in Linux, it took around a half
second with 100% accuracy in detecting the mapping status of each page. For Windows, while the attack on determining mapped /
unmapped address resulted 100% accuracy over 100 probing iterations, the attack on the executable permission did not. Running
more iterations gives better accuracy: 98.60% and 99.28% on 500, and 1,000 iterations respectively. The DrK attack also works well
in a virtualized environment. We ran Linux over a Xen hypervisor using two different kind of processors, and both resulted 100% of
accuracy over 500 iterations. For the last three rows, we only ran the DrK attack to find the base address of the kernel. It only took
5 ms for Linux, 31 ms for OS X, and 797 ms for Windows to find the ASLR slide. (a) In Windows, all pages of the kernel (HAL and
ntkrnlmp.exe) are mapped with executable permissions. Therefore, we did not run X/NX detection for the pages. (b) See §4.3 and
§4.4 for the effect of frequency scaling on the timings.
starting from the base address to the end address. Then,
we compare the result with the ground truth information
extracted from page table entries to evaluate the accuracy
of the DrK attack.
In the following, we describe in detail the experiment
configuration, settings, and interesting issues and tricks