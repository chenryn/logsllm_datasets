title:Horizontal Privilege Escalation in Trusted Applications
author:Darius Suciu and
Stephen E. McLaughlin and
Laurent Simon and
Radu Sion
Horizontal Privilege Escalation in Trusted Applications
Darius Suciu, Stony Brook University; Stephen McLaughlin and Laurent Simon, 
Samsung Research America; Radu Sion, Stony Brook University
https://www.usenix.org/conference/usenixsecurity20/presentation/suciu
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Horizontal Privilege Escalation in Trusted Applications
Darius Suciu
Stony Brook University
PI:EMAIL
Stephen McLaughlin
Samsung Research America
PI:EMAIL
Radu Sion
Stony Brook University
PI:EMAIL
Laurent Simon
Samsung Research America
PI:EMAIL
Abstract
Trusted Execution Environments (TEEs) use hardware-
based isolation to guard sensitive data from conventional mono-
lithic OSes. While such isolation strengthens security guaran-
tees, it also introduces a semantic gap between the TEE on the
one side and the conventional OS and applications on the other.
In this work, we studied the impact of this semantic gap on the
handling of sensitive data by Trusted Applications (TAs) run-
ning in popular TEEs. We found that the combination of two
properties, (i) multi-tenancy and (ii) statefulness in TAs leads
to vulnerabilities of Horizontal Privilege Escalation (HPE).
These vulnerabilities leaked sensitive session data or provided
cryptographic oracles without requiring code execution vul-
nerabilities in TEE logic. We identiﬁed 19 HPE vulnerabilities
present across 95 TAs running on three major ARM TrustZone-
based trusted OSes. Our results showed that HPE attacks can be
used to decrypt DRM protected content, to forge attestations,
and to obtain cryptographic keys under all three evaluated OSes.
Here, we present HOOPER an automatic symbolic execution
based scanner for HPE vulnerabilities, in order to aid manual
analysis and to dramatically reduce overall time. In particular,
in the Teegris Trusted OS HOOPER is able to identify 19 out
of 24 HPE-based attack ﬂows in 24-hours contrasted with our
original manual analysis time of approximately four weeks.
1 Introduction
Traditional OS-based protection mechanisms are routinely
bypassed due to vulnerabilities in their monolithic code bases.
As a response to this limitation, hardware-isolated Trusted
Execution Environments (TEEs) have gained widespread
use, particularly in mobile devices. TEEs provide hardware-
isolated memory and compute resources with Trusted
Applications (TAs) that handle highly sensitive operations on
behalf of applications running on the monolithic OS.
The most widely used TEE in mobile devices is ARM
TrustZone [1]. TrustZone provides a higher privilege level in
the form of the Secure World. The Secure World runs a Trusted
OS (TZOS) and TAs in hardware isolated memory, CPU, and
I/O. TAs handle requests on behalf of Client Applications
(CAs), which run on the traditional OS in the Normal World.
Sensitive data such as private keys, biometric data, and device
integrity measurements should never leave the Secure World.
The hardware isolation between the two worlds (Secure and
Normal) enables each to run independently from each other.
However, it also introduces a semantic gap between them. In
this case neither world has sufﬁcient information about the se-
mantics (i.e., data structure layout and locations) of the other to
accurately identify or authenticate principals in the other world.
A previous result of this semantic gap was the Boomerang [18]
attack, which leverages memory safety errors in TAs to exploit
the Normal World OS on behalf of malicious Normal World
applications. Here, we ﬁnd that cross-CA attacks are still
possible without relying on TA memory exploits.
In this paper, we present our work on Horizontal Privilege
Escalation (HPE) attacks [20] against TAs. These attacks result
in unauthorized cross-principal data access between Normal
World services. HPE does not require a compromised service
to escalate its privileges to access data belonging to other prin-
cipals. Instead, it leverages persistent state mismanagement by
TAs acting on behalf of other victim services. In this light, HPE
is a type of confused deputy [11] attack where the attacker
accesses victim data without directly escalating privilege.
We manually examined 95 TA binaries from mobile
devices running three popular TEEs: Trustonic’s Kinibi,
Qualcomm’s QSEE, and Samsung’s Teegris. We identiﬁed 19
unique HPE vulnerabilities (52 when counting duplicate from
porting between TZOSes). These 19 vulnerabilities led to 27
unique attacks against different TA APIs (78 when counting
duplicates) in our study. Here, We classify the discovered
issues using known Common Weakness Enumeration [19]
(CWEs) and provide case studies to show the impact of each.
To aid in the analysis of HPE attacks in TAs, we imple-
mented HOOPER, a tool based on the angr [28] symbolic
execution framework to search for HPE bugs in TAs for the
Teegris TZOS. HOOPER uses memory and storage API
inspection along with state matching to track TA handling
of CA data across invocations. These locations represent
opportunities for HPE attacks. In Teegris HOOPER found 19
out of 24 HPE-based attacks in 24-hours contrasted with our
original manual analysis time of approximately four weeks.
USENIX Association
29th USENIX Security Symposium    825
The contributions of this work include:
1. a ﬁrst study of HPE attacks in TAs. Attacks identiﬁed
are caused both by TA session management design ﬂaws,
and the TEEs - Normal World semantic gap.
2. an extensive analysis and detection of HPE vulnerabilities
in 95 TAs from three widely used TEEs. Results are
broken down according to known CWEs [19] and case
studies showing the real-world impact of each.
3. an evaluation of HOOPER, an automatic scanner for
HPE vulnerabilities in TAs. In the Teegris OS HOOPER
evaluating 31 TAs can detect in less than 24 hours 80%
of the HPE vulnerabilities previously identiﬁed through
manual analysis in four weeks.
2 Background
Trusted Execution Environments (TEEs) are secure partitions
of hardware providing isolated CPU, memory, and I/O access
for sensitive data and trusted code. The traditional OS and
applications run in the Rich Execution Environment (REE),
which lacks permission to access resources reserved for the
TEE. A typical TEE will consist of both hardware isolation
mechanisms, such as ARM TrustZone described in 2.1, and
a trusted software stack, which communicates with the REE
as described in 2.2.
2.1 TrustZone architecture
ARM Cortex processors implement the hardware portion of
a TEE using the ARM TrustZone security extensions, or Trust-
Zone. Under TrustZone, each physical processor core is split
into two virtual CPUs. The security state of a core depends on
the value of a special Non-Secure (NS) bit. If NS=0, then the
core runs in Secure World (SW). This is where the TEE soft-
ware is run. If NS=1, then the core runs in Normal World (NW)1,
where the REE is run. The TrustZone memory and peripheral
bus fabrics maintain NS bits for each memory region and I/O pe-
ripherals. Additionally,some peripherals,such as touch screens
may run with either NS=0 or NS=1 at different times depending
on the needs of the Secure World for exclusive hardware access.
TrustZone’s fundamental security mechanism is the
isolation of Secure World resources. Code running in Secure
World can access memory and I/O designated for both Secure
and Normal World, whereas code running in Normal World
is restricted to Normal World resources. Thus, any operations
on secure data (e.g., secret keys) or hardware (e.g., ﬁngerprint
reader) must be done by Secure World on behalf of Normal
World. The transition of control from Normal World to Secure
World is known as a world switch (Section 2.2).
The Secure World software stacks considered in this paper
all closely resemble that of a traditional operating system.
A TrustZone OS provides resource management and device
drivers from a supervisor privilege level. Complementing
1Also known as the Non-Secure World
this, a set of Trusted Applications (TAs) provide task-speciﬁc
functionality from the user privilege level. Thus, TAs are
restricted to their own address spaces, and are dependent on
the TZOS and drivers for I/O and IPC. TAs request access to
such resources through system calls to the TZOS.
Some TAs are completely driven by CA requests. A typical
example of this is a cryptographic keystore to manage keys
not accessible to Normal World. When a Normal World app
requires an operation such as encipherment or signing, it must
prepare the inputs in a shared buffer and specify which TA it
wants to perform the operation (see next section for details).
The TA, for its part, will wait for the TZOS to provide it with
the request from Normal World, and then process the request.
Thus, a typical TA will consist of a main loop to retrieve each
request, and a switch structure to dispatch the speciﬁc request
type (signing, decryption, etc.) to the appropriate handler.
2.2 TrustZone communication
A Client Application (CA) running in Normal World commu-
nicates with a TA as follows. First, the CA provides the Normal
World kernel with the request and UUID of the destination TA.
The Normal World kernel then issues a Secure Monitor Call
(SMC) instruction to invoke the Secure Monitor, which runs
at ARM exception level EL3. The monitor then interrupts the
TZOS with the request and UUID, and ﬁnally the TZOS either
creates a new instance of the TA, or uses it in existing instance
in the case of an already-running multi-tenant TA (see 2.3). The
process for returning results to the TA follows a similar path.
The request passed to the TA consists of a command ID
that dictates which function to run and a shared buffer for any
arguments. The shared buffer is kept in world shared memory,
a small memory region that is accessible to both the Normal
World and the Secure World. This buffer has a ﬁxed format
for all TAs depending on the underlying TZOS. For example,
in Kinibi, a single shared buffer is provided for both input
and output, whereas in QSEE and Teegris, separate input and
output buffers are provided.
Note that at no point in the above description did any
component check the TA UUID to determine if the CA
was authorized to communicate with that TA. In current
Android-based Normal World implementations, communi-
cation between CAs and TAs is many-to-many. In other words,
communication between a given Normal World service and
the set of TAs is all or nothing. This is typically regulated by
using SELinux policy to restrict access to the pseudo device
node and/or daemon used to notify the kernel of CA requests.
2.3 Multi-tenancy in TrustZone
The GlobalPlatform [10] deﬁnes two types of TA processes: (1)
Multi-instance TA, created on demand for every CA initiated
connection and destroyed once the connection is terminated;
(2) Single-instance TA, created to handle all incoming requests
in a single TA instance. Because multi-instance TAs start a
new instance for each communicating CA, we refer to them
as single-tenant, i.e., it is impossible for an attacker to break
826    29th USENIX Security Symposium
USENIX Association
into an existing session. We refer to single-instance TAs as
multi-tenant, because the TA must manage sessions for all
communicating CAs.
The TAs running under commercial TZOSes (Kinibi,
Teegris, QSEE) fall into one of the above two categories.
Under QSEE, all TA processes are executed as multi-tenant.
In the case of Kinibi and Teegris, each TA deﬁnes its operation
mode inside a signed binary segment. Then, every TA is
executed accordingly in one of the previously described
modes. For single-tenant conﬁgurations, a TA process is
spawned by the TZOS to handle each CA initiated connection.
2.4 Storing data in Secure World
CAs leverage the communication channel described in
Section 2.2 to send sensitive data to TAs. A TA accepts
CA requests through a set of APIs, which either process or
store received CA data, while protecting it against untrusted
Normal World access. A TA’s API is either stateful or stateless.
Stateless APIs are straight forward. A TA receives CA data,
processes it and returns a result. No data related to this process
is retained by the TA across invocations. An API is stateful
if it maintains state across multiple CA invocations.
Figure 1 illustrates the two methods a stateful TA API can
use to persist CA data across invocations. They are as follows:
• (A) Session state. Typically, a TA with a stateful API will
be called a number of times throughout a session with a
TA. In between calls in the session, the TA maintains CA
and other data in global variables, in what is essentially,
the .bss section.
• (B) Persistent storage. TZOSes supply TAs with APIs
to store data across instances. Examples include: Replay
Protected Memory Blocks (RPMBs), memory blocks pro-
tected by authenticated counters to prevent malicious
replays of old values and wrapped objects, which are ob-
jects encrypted and signed in a TA before being persisted
in the Normal World ﬁlesystem.
While session state should only exist within a single session,
persistent objects can last over many separate instances of a TA
over time. Wrapped objects in particular complicate matters,
because while it is infeasible for a Normal World process
to decrypt them directly, they are stored in Normal World
ﬁlesystem, and thus access to wrapped objects is governed
by often overly permissive access control policies.
3 Problem Overview
TAs are Secure World applications that wait for Normal World
CA requests, process them and return results. CAs entrust TAs
with their conﬁdential information and delegate performing
sensitive operations to them. For example, CAs typically
protect their private keys by storing them in Secure World
cryptographic keystores.
Figure 1: CA data storage in Secure World
Each TA has the responsibility of protecting CA-provided
information from unauthorized Normal World access. In
the case of keystores, the CA keys stored inside must not be
revealed or used without the CA’s explicit consent. When they
fail, we have HPE.
3.1 HPE vulnerabilities
An HPE vulnerability arises when TA exposed APIs enable
untrusted processes to access or manipulate CA provided
data. For example, keystores contain HPE vulnerabilities if
a malicious CA can obtain or use keys belonging to other
CAs. In the infrastructure used by TrustZone systems, the
CA-TA communication channel described in Section 2.2
allows vulnerable Normal World processes to send arbitrary
messages to TAs. Each message can be used by attackers to
target HPE vulnerabilities within TAs.
In this work, we study two types of vulnerabilities
within TAs that allow attackers to leak, compromise or use
cross-invocation maintained information.
TA multi-tenant interference. As described in Section 2.3, a
TZOS either routes messages from all CAs to a multi-tenant TA
or starts separate instances for each incoming CA connection.
In consequence, some portions of TA instances are designed
to handle simultaneous CA connections, while others operate
assuming all requests are incoming from a single CA.
Ideally, every multi-tenant TA should employ proper
session management to prevent CAs from affecting each
other’s cross-invocation states (e.g., keystores should provide
an isolated key storage for each CA). In practice, these
security measures can be imperfect, due to either the semantic
gap between the two worlds or implementation errors. For
example, TAs conﬁgured to execute as multi-tenant can be
designed to only handle incoming connections from a single
CA (e.g., missing session management). In such TAs, multiple
concurrent CA connections can lead to HPE attacks. We detail
USENIX Association
29th USENIX Security Symposium    827
A: Trusted App stores Client App data in global variablesNormal WorldSecure WorldClient AppTrusted AppGlobalAStorage (RPMB, etc.)BNormal WorldSecure WorldClient AppTrusted AppGlobalAStorage (RPMB, etc.)BB: Trusted App persists Client App data in Secure World storage A: Trusted App stores Client App data in global variablesNormal WorldSecure WorldClient AppTrusted AppGlobalAStorage (RPMB, etc.)BB: Trusted App persists Client App data in Secure World storage such scenarios in Section 3.3.
Unintentional resource sharing. Section 2.4 introduces
the ability of TA APIs to maintain data across multiple CA
requests. Each TA can temporarily maintain CA-provided
information in its global variables or requests the TZOS to per-
sist it in Secure World storage. In both cases, this data needs to