m
i
t
h
c
r
a
e
S
35
0
5
50
[5]
Baseline
BMTS
EMTS
10
15
20
25
30
35
40
45
Number of retrieved documents
(a)
(b)
(a)
(b)
Figure 9: Time cost for generating encrypted query,
when |Ti| = 80. (a) For the diﬀerent number of levels
where user intended keywords reside. (b) For the
diﬀerent number of keywords of interest in one level.
that this computation is a one-time cost on the data own-
er side. On the other hand, the storage overhead, listed in
Tab. 4, of the index tree with the ﬁxed size of document set
m=3000 is determined by the number of keywords in the
dictionary. EMTS is very close to BMTS in the size of the
index tree, and considering the massive storage capacity and
low storage cost in the cloud, it is practical and completely
aﬀordable.
5.3 Query Generation
Typical search requests only consist of a few keywords [1].
Therefore, it is ineﬃcient to generate a query that involves
all the keywords in the dictionary, which not only makes
the search process costly (similarity evaluation needs to be
carried out on long vectors) but also brings some unneces-
sary computation overhead into query generation procedure.
Fig. 9(a) demonstrates that when |Ti| is ﬁxed, the time cost
for generating an encrypted query is only linear to the num-
ber of levels where the searched keywords reside. Further-
more, the strategy to place the most frequently searched
keywords on the top levels of the index tree will lead to the
result that a good portion of queries are only generated for
a few limited levels. As such, when |Ti| is chosen proper-
ly, the average query generation can be extremely eﬃcient,
as shown in Fig. 9(b). The major computation overhead
stems from the vector encryption process, and due to the
dimension extension, the time cost in EMTS is a bit more
expensive than that in BMTS.
5.4 Search Efﬁciency
The search process executed at the cloud server is com-
prised of computing and ranking the similarity scores of rel-
evant documents. The search algorithm terminates after
the top-k documents have been selected. We evaluate the
search eﬃciency of BMTS and EMTS with our proposed
eﬃciency-improving strategies. Fig. 10(a) shows the search
time for BMTS and EMTS, compared with [5] and baseline
search with respect to the size of document set. In the base-
line search, all the keywords in the dictionary are dispersed
uniformly at random within the index tree, but it is still
far eﬃcient than [5] due to our proposed search algorithm
and the tree-based index structure.
It is noteworthy that
the time cost of our proposed encrypted cloud data search is
much more eﬃcient than [5] and baseline search. In addition,
Figure 10: Search eﬃciency, with the same 10 key-
words of interest.
(a) For the diﬀerent size of
document set with the same dictionary, n = 4000,
k = 10.
(b) For the diﬀerent number of retrieved
documents with the same document set and dictio-
nary, m = 1000, n = 4000.
with the increased size of document set, our two proposed
schemes enjoy almost the same and nearly constant search
time. Fig. 10(b) demonstrates that when user requests more
relevant documents, our search algorithm is still extremely
eﬃcient.
6. RELATED WORK
6.1 Searchable Encryption with Single Key-
word
Song et al. [27] propose the ﬁrst SE scheme, where, to
search a certain keyword in a document, user has to go
through the whole document. After this work, many im-
provements and novel schemes [6, 10, 11, 16] have been pro-
posed. Curtmola et al. [10] propose an inverted index based
SE scheme with extremely eﬃcient search process, but the
keyword privacy will be revealed if the corresponding key-
words have been searched. Frequency information is not
involved in the similarity evaluation processes of the above
techniques to provide accurate search functionality. In [28,
29, 34], the order-preserving techniques are utilized to pro-
tect the rank order. Due to the index and query built from
frequency related information and the inverted index as the
underlying index structure, they can achieve accurate and
eﬃcient search at the same time. Boneh et al. [3] propose the
ﬁrst PKC-based SE scheme, where anyone with public key
can write to the data stored on server but only authorized
users with private key can search. However, all of the afore-
mentioned solutions only support single keyword search.
6.2 Searchable Encryption with Multiple Key-
words
In the public key setting, a lot of works have been done
to realize the conjunctive keyword search, subset search,
or range queries [4, 12, 13], but they are too computation-
ally intensive to be implemented for practical use. Predi-
cate encryption is another promising technique to fulﬁll the
search over encrypted data [2, 23, 25]. In [17], a logarithmic-
time search scheme is presented to support range queries,
which is orthogonal to our text search scenario. Further-
more, no similarity measure is adopted in these works to
79provide multi-keyword ranked search functionality. In text
retrieval scenario, Pang et al. [20] also propose a vector s-
pace model based secure search scheme. An access manager
is supposed to exist in their protocol except for a documen-
t server, and additional overhead occur on the user side,
which is apparently not applicable to cloud environment.
Without the security analysis for frequency information in
their scheme, it is not clear whether such sensitive informa-
tion disclosure could lead to keyword privacy infringement.
Besides, the practical search performance is absent from the
demonstration of their experiment. Cao et al. [5] propose
a privacy-preserving multi-keyword ranked search scheme.
Although with “coordinate matching”, this scheme can pro-
duce the ranked search result by the number of matched
keywords, more accurate ranked search result is not consid-
ered there, and the search complexity is constant in that the
cloud server has to traverse all the indexes of the document
set for each search request.
7. CONCLUSION
In this paper, as an initial attempt to achieve practical
and eﬀective multi-keyword text search over encrypted cloud
data, we make contributions in two major aspects, support-
ing similarity-based ranking for more accurate search result
and a tree-based search algorithm that achieves better-than-
linear search eﬃciency. For the accuracy aspect, we ﬁrst
exploit the popular similarity measure,
i.e., vector space
model with cosine measure, to eﬀectively procure the accu-
rate search result. We propose two secure index schemes to
meet various privacy requirements in the two threat model-
s. Eventually, the leakage of sensitive frequency information
can be avoided. To boost search eﬃciency, we propose a tree-
based index structure for the whole document set. From the
utilization of the prototype of our secure search system, we
identify three essential eﬃciency-related factors, by which
the eﬃciency of the search algorithm upon our index tree
can be signiﬁcantly improved. Finally, thorough analysis on
the real-world document set demonstrates the performance
of BMTS and EMTS in terms of search eﬀectiveness, eﬃ-
ciency and privacy.
Acknowledgment We would like to thank Mat´uˇs Ondreiˇc-
ka for his helpful comments and sharing the source code
of MD-algorithm. This work was supported in part by the
NSFC 61272457, the FRFCU K50511010001, the PCSIRT
1078, and the NSF grants CNS-1217889, CNS-1155988 and
CNS-1218085.
8. REFERENCES
[1] Keyword and search engines statistics. http://www.
keyworddiscovery.com/keyword-stats.html?
date=2013-01-01, 2013.
[2] N. Attrapadung and B. Libert. Functional encryption
for inner product: Achieving constant-size ciphertexts
with adaptive security or support for negation. In
Proc. of PKC, pages 384–402, 2010.
[3] D. Boneh, G. D. Crescenzo, R. Ostrovsky, and
G. Persiano. Public key encryption with keyword
search. In Proc. of EUROCRYPT, pages 506–522,
2004.
[4] D. Boneh and B. Waters. Conjunctive, subset, and
range queries on encrypted data. In Proc. of TCC,
pages 535–554, 2007.
[5] N. Cao, C. Wang, M. Li, K. Ren, and W. Lou.
Privacy-preserving multi-keyword ranked search over
encrypted cloud data. In Proc. of IEEE INFOCOM,
pages 829–837, 2011.
[6] Y.-C. Chang and M. Mitzenmacher. Privacy
preserving keyword searches on remote encrypted
data. In Proc. of ACNS, pages 391–421, 2005.
[7] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan.
Private information retrieval. Journal of the ACM,
45(6):965–981, 1998.
[8] Cloud Security Alliance. Security guidance for critical
areas of focus in cloud computing v3.0. http://www.
cloudsecurityalliance.org, 2011.
[9] D. Comer. Ubiquitous b-tree. ACM computing
surveys, 11(2):121–137, 1979.
[10] R. Curtmola, J. A. Garay, S. Kamara, and
R. Ostrovsky. Searchable symmetric encryption:
improved deﬁnitions and eﬃcient constructions. In
Proc. of ACM CCS, pages 79–88, 2006.
[11] E.-J. Goh. Secure indexes. Cryptology ePrint Archive.
http://eprint.iacr.org/2003/216, 2003.
[12] P. Golle, J. Staddon, and B. R. Waters. Secure
conjunctive keyword search over encrypted data. In
Proc. of ACNS, pages 31–45, 2004.
[13] Y. Hwang and P. Lee. Public key encryption with
conjunctive keyword search and its extension to a
multi-user system. In Pairing, pages 2–22, 2007.
[14] B. Krebs. Payment processor breach may be largest
ever. http://voices.washingtonpost.com/
securityfix/2009/01/payment_processor_breach_
may_b.html, 2009.
[15] M. Li, S. Yu, K. Ren, and W. Lou. Securing personal
health records in cloud computing: Patient-centric
and ﬁne-grained data access control in multi-owner
settings. In Proc. of SecureComm, pages 89–106, 2010.
[16] P. Liesdonk, S. Sedghi, J. Doumen, P. Hartel, and
W. Jonker. Computationally eﬃcient searchable
symmetric encryption. Secure Data Management,
pages 87–100, 2010.
[17] Y. Lu. Privacy-preserving logarithmic-time search on
encrypted data in cloud. In Proc. of NDSS, 2012.
[18] NIST. NIST’s dictionary of algorithms and data
structures: inverted index. http://xlinux.nist.gov/
dads/HTML/invertedIndex.html.
[19] M. Ondreiˇcka and J. Pokorn´y. Extending fagin’s
algorithm for more users based on multidimensional
b-tree. In Proc. of ADBIS, pages 199–214, 2008.
[20] H. Pang, J. Shen, and R. Krishnan. Privacy-preserving
similarity-based text retrieval. ACM Transactions on
Internet Technology, 10(1):4, 2010.
[21] A. Rajaraman and J. D. Ullman. Mining of massive
datasets. Cambridge University Press, Dec. 2011.
[22] P. Scheuermann and M. Ouksel. Multidimensional
b-trees for associative searching in database systems.
Information systems, 7(2):123–137, 1982.
[23] E. Shen, E. Shi, and B. Waters. Predicate privacy in
encryption systems. In Proc. of TCC, pages 457–473,
2009.
[24] J. Sheridan and C. Cooper. Defending the cloud.
http://www.reactionpenetrationtesting.co.uk/
Defending%20the%20Cloud%20v1.0.pdf, 2012.
80[25] E. Shi, J. Bethencourt, H. Chan, D. Song, and
A. Perrig. Multi-dimensional range query over
encrypted data. In Proc. of S&P, pages 350–364, 2007.
[26] Z. Slocum. Your google docs: Soon in search results?
http://news.cnet.com/8301-17939_109-1035713
%207-2.html, 2009.
[27] D. Song, D. Wagner, and A. Perrig. Practical
techniques for searches on encrypted data. In Proc. of
S&P, pages 44–55, 2000.
[28] A. Swaminathan, Y. Mao, G.-M. Su, H. Gou, A. L.
Varna, S. He, M. Wu, and D. W. Oard.
Conﬁdentiality-preserving rank-ordered search. In
Proc. of the 2007 ACM Workshop on Storage Security
and Survivability, pages 7–12, 2007.
[29] C. Wang, N. Cao, K. Ren, and W. Lou. Enabling
secure and eﬃcient ranked keyword search over
outsourced cloud data. IEEE Transactions on Parallel
and Distributed Systems, 23(8):1467–1479, 2012.
[30] I. H. Witten, A. Moﬀat, and T. C. Bell. Managing
gigabytes: Compressing and indexing documents and
images. Morgan Kaufmann Publishing, San Francisco,
May 1999.
[31] W. K. Wong, D. W. Cheung, B. Kao, and
N. Mamoulis. Secure knn computation on encrypted
databases. In Proc. of SIGMOD, pages 139–152, 2009.
[32] B. Yao, F. Li, and X. Xiao. Secure nearest neighbor
revisited. http://www.cs.utah.edu/~lifeifei/
papers/snnicde.pdf, to appear in ICDE, 2013.
[33] S. Yu, C. Wang, K. Ren, and W. Lou. Achieving
secure, scalable, and ﬁne-grained data access control
in cloud computing. In Proc. of IEEE INFOCOM,
pages 1–9, 2010.
[34] S. Zerr, D. Olmedilla, W. Nejdl, and W. Siberski.
Zerber+r: Top-k retrieval from a conﬁdential index. In
Proc. of EDBT, pages 439–449, 2009.
[35] J. Zobel and A. Moﬀat. Exploring the similarity space.
SIGIR Forum, 32(1):18–34, 1998.
APPENDIX
The Proposed Tree-based Search Algorithm
The following notations are used in the pseudo code of the
algorithm:
simplicity, it could be a document ID.
• O – it is denoted as a subtree of the searched index
tree, or as a document array residing in the leaf node.
the tree identiﬁer ( (cid:7)Dd,1, (cid:7)Dd,2, ..., (cid:2)Dd,i−1).
For the subtree O at the ith level, it can be deﬁned by
• x – an encrypted document in a document array O. For
• Si – the similarity score that is equal to Cos((cid:7)Dd,i,(cid:3)Qi)
• P F( (cid:7)Dd,i) – the function for predicting the maximum
possible ﬁnal similarity score from index vector (cid:7)Dd,i.
P F( (cid:7)Dd,i) =
ˆPj, where h is the total
(cid:6)h
• F (·) – the ﬁnal similarity score of a document, e.g.,
• Lk – the list for selected top-k documents that are s-
number of levels of the index tree.
t=1 St +
(cid:6)h
F (x) =
as Eq. 2.
(cid:6)i
i=1 Si.
j=i+1
tored in descending order according to F (x).
• DLi – the list for index vectors (cid:7)Dd,i’s stored in a node
• Mk – the similarity score of the kth document in Lk.
at the ith level of a subtree of the index tree.
Algorithm 1 Proposed Search Algorithm for Top-k Rank-
ing on Index Tree
begin
for (i = 1 → h) do
if ((cid:3)Qi does not exist in the search request) then
ˆPi ← 0 and allS i ← 0 at the ith level;
else
use the received ˆPi with the search request;
end if
end for
ﬁndTopK(I, (∅), F (.), k);
return Lk;
end
procedure ﬁndTopK(IndexTree I, Identiﬁer ((cid:7)Dd,1,
(cid:7)Dd,2, ..., (cid:2)Dd,i−1), Score F (·), int k);
if (O is a document array) then
while (there is next document in O) do
if (|Lk|  Mk) then
delete kth document from Lk;
insert x into Lk according to F (x);
end if
end if
end while
else
DLi = getIndexList(I, ( (cid:7)Dd,1, (cid:7)Dd,2, ..., (cid:2)Dd,i−1));
counter ← 0;
while (there is next index vector in the subtree) do
if (|Lk| = k and F P( DLi(counter)) ≤ Mk) then
ﬁndTopK(I, ((cid:7)Dd,1, ..., (cid:2)Dd,i−1, (cid:7)Dd,i), F (·), k);
return;
else
end if
counter ← counter + 1;
end while
end if
end procedure
procedure getIndexList(IndexTree I, Identiﬁer ( (cid:7)Dd,1,
if ((cid:3)Qi exists in the search request) then
for (each (cid:7)Dd,i within the node at the ith level in
(cid:7)Dd,2, ..., (cid:2)Dd,i−1));
subtree of I with identiﬁer ( (cid:7)Dd,1, (cid:7)Dd,2, ..., (cid:2)Dd,i−1))
compute Si = Cos((cid:7)Dd,i,(cid:3)Qi);
do
end for
sort DLi in descending order according to Si;
return DLi;
else
return the original DLi;
end if
end procedure
81