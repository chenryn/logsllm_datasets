# 5.3 Query Generation

Typical search requests consist of only a few keywords [1]. Therefore, generating a query that involves all the keywords in the dictionary is inefficient. This not only makes the search process costly (as similarity evaluation needs to be carried out on long vectors) but also introduces unnecessary computation overhead during the query generation process.

Figure 9(a) shows that when \( |T_i| \) is fixed, the time cost for generating an encrypted query is linear with respect to the number of levels where the searched keywords reside. Furthermore, placing the most frequently searched keywords at the top levels of the index tree will result in a significant portion of queries being generated for only a few limited levels. Consequently, if \( |T_i| \) is chosen appropriately, the average query generation can be highly efficient, as demonstrated in Figure 9(b). The primary computation overhead comes from the vector encryption process, and due to the dimension extension, the time cost in EMTS is slightly higher than in BMTS.

# 5.4 Search Efficiency

The search process executed at the cloud server involves computing and ranking the similarity scores of relevant documents. The search algorithm terminates once the top-k documents have been selected. We evaluate the search efficiency of BMTS and EMTS using our proposed efficiency-improving strategies. Figure 10(a) compares the search time for BMTS and EMTS with [5] and baseline search, based on the size of the document set. In the baseline search, all the keywords in the dictionary are randomly distributed within the index tree, but it is still more efficient than [5] due to our proposed search algorithm and the tree-based index structure.

Notably, the time cost of our proposed encrypted cloud data search is significantly more efficient than [5] and the baseline search. Additionally, as shown in Figure 10(b), even with an increased number of retrieved documents, our search algorithm remains highly efficient.

# 6. Related Work

## 6.1 Searchable Encryption with Single Keyword

Song et al. [27] introduced the first searchable encryption (SE) scheme, where users had to scan the entire document to search for a specific keyword. Subsequent improvements and novel schemes [6, 10, 11, 16] have been proposed. Curtmola et al. [10] presented an inverted index-based SE scheme with an extremely efficient search process, but the privacy of the keywords could be compromised if they were frequently searched. Frequency information was not considered in the similarity evaluation processes of these techniques, which limits their ability to provide accurate search functionality. In [28, 29, 34], order-preserving techniques were used to protect rank order. These methods, which use frequency-related information and an inverted index, achieve both accuracy and efficiency. Boneh et al. [3] proposed the first public key cryptography (PKC)-based SE scheme, allowing anyone with the public key to write to the data stored on the server, while only authorized users with the private key can search. However, all these solutions support only single keyword search.

## 6.2 Searchable Encryption with Multiple Keywords

In the public key setting, many works have focused on achieving conjunctive keyword search, subset search, or range queries [4, 12, 13]. However, these approaches are too computationally intensive for practical use. Predicate encryption is another promising technique for searching over encrypted data [2, 23, 25]. In [17], a logarithmic-time search scheme was presented to support range queries, which is orthogonal to our text search scenario. None of these works adopted a similarity measure to provide multi-keyword ranked search functionality. In the context of text retrieval, Pang et al. [20] proposed a vector space model-based secure search scheme. Their protocol requires an access manager in addition to a document server, introducing additional overhead on the user side, which is not suitable for cloud environments. Moreover, their scheme lacks security analysis for frequency information, making it unclear whether sensitive information disclosure could lead to keyword privacy infringement. Cao et al. [5] proposed a privacy-preserving multi-keyword ranked search scheme. Although this scheme can produce ranked search results by the number of matched keywords, it does not consider more accurate ranking and has a constant search complexity, as the cloud server must traverse all the indexes of the document set for each search request.

# 7. Conclusion

In this paper, we present an initial attempt to achieve practical and effective multi-keyword text search over encrypted cloud data. Our contributions focus on two major aspects: supporting similarity-based ranking for more accurate search results and a tree-based search algorithm that achieves better-than-linear search efficiency. For accuracy, we exploit the popular vector space model with cosine similarity to effectively procure accurate search results. We propose two secure index schemes to meet various privacy requirements in different threat models, thereby avoiding the leakage of sensitive frequency information. To boost search efficiency, we introduce a tree-based index structure for the entire document set. From the utilization of our secure search system prototype, we identify three essential factors that significantly improve the efficiency of the search algorithm on our index tree. Finally, thorough analysis on real-world document sets demonstrates the performance of BMTS and EMTS in terms of search effectiveness, efficiency, and privacy.

# 8. References

[1] Keyword and search engines statistics. http://www.keyworddiscovery.com/keyword-stats.html?date=2013-01-01, 2013.
[2] N. Attrapadung and B. Libert. Functional encryption for inner product: Achieving constant-size ciphertexts with adaptive security or support for negation. In Proc. of PKC, pages 384–402, 2010.
[3] D. Boneh, G. D. Crescenzo, R. Ostrovsky, and G. Persiano. Public key encryption with keyword search. In Proc. of EUROCRYPT, pages 506–522, 2004.
[4] D. Boneh and B. Waters. Conjunctive, subset, and range queries on encrypted data. In Proc. of TCC, pages 535–554, 2007.
[5] N. Cao, C. Wang, M. Li, K. Ren, and W. Lou. Privacy-preserving multi-keyword ranked search over encrypted cloud data. In Proc. of IEEE INFOCOM, pages 829–837, 2011.
[6] Y.-C. Chang and M. Mitzenmacher. Privacy preserving keyword searches on remote encrypted data. In Proc. of ACNS, pages 391–421, 2005.
[7] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan. Private information retrieval. Journal of the ACM, 45(6):965–981, 1998.
[8] Cloud Security Alliance. Security guidance for critical areas of focus in cloud computing v3.0. http://www.cloudsecurityalliance.org, 2011.
[9] D. Comer. Ubiquitous b-tree. ACM computing surveys, 11(2):121–137, 1979.
[10] R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: improved definitions and efficient constructions. In Proc. of ACM CCS, pages 79–88, 2006.
[11] E.-J. Goh. Secure indexes. Cryptology ePrint Archive. http://eprint.iacr.org/2003/216, 2003.
[12] P. Golle, J. Staddon, and B. R. Waters. Secure conjunctive keyword search over encrypted data. In Proc. of ACNS, pages 31–45, 2004.
[13] Y. Hwang and P. Lee. Public key encryption with conjunctive keyword search and its extension to a multi-user system. In Pairing, pages 2–22, 2007.
[14] B. Krebs. Payment processor breach may be largest ever. http://voices.washingtonpost.com/securityfix/2009/01/payment_processor_breach_may_b.html, 2009.
[15] M. Li, S. Yu, K. Ren, and W. Lou. Securing personal health records in cloud computing: Patient-centric and fine-grained data access control in multi-owner settings. In Proc. of SecureComm, pages 89–106, 2010.
[16] P. Liesdonk, S. Sedghi, J. Doumen, P. Hartel, and W. Jonker. Computationally efficient searchable symmetric encryption. Secure Data Management, pages 87–100, 2010.
[17] Y. Lu. Privacy-preserving logarithmic-time search on encrypted data in cloud. In Proc. of NDSS, 2012.
[18] NIST. NIST’s dictionary of algorithms and data structures: inverted index. http://xlinux.nist.gov/dads/HTML/invertedIndex.html.
[19] M. Ondreička and J. Pokorný. Extending Fagin’s algorithm for more users based on multidimensional b-tree. In Proc. of ADBIS, pages 199–214, 2008.
[20] H. Pang, J. Shen, and R. Krishnan. Privacy-preserving similarity-based text retrieval. ACM Transactions on Internet Technology, 10(1):4, 2010.
[21] A. Rajaraman and J. D. Ullman. Mining of massive datasets. Cambridge University Press, Dec. 2011.
[22] P. Scheuermann and M. Ouksel. Multidimensional b-trees for associative searching in database systems. Information systems, 7(2):123–137, 1982.
[23] E. Shen, E. Shi, and B. Waters. Predicate privacy in encryption systems. In Proc. of TCC, pages 457–473, 2009.
[24] J. Sheridan and C. Cooper. Defending the cloud. http://www.reactionpenetrationtesting.co.uk/Defending%20the%20Cloud%20v1.0.pdf, 2012.
[25] E. Shi, J. Bethencourt, H. Chan, D. Song, and A. Perrig. Multi-dimensional range query over encrypted data. In Proc. of S&P, pages 350–364, 2007.
[26] Z. Slocum. Your Google Docs: Soon in search results? http://news.cnet.com/8301-17939_109-1035713%207-2.html, 2009.
[27] D. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In Proc. of S&P, pages 44–55, 2000.
[28] A. Swaminathan, Y. Mao, G.-M. Su, H. Gou, A. L. Varna, S. He, M. Wu, and D. W. Oard. Confidentiality-preserving rank-ordered search. In Proc. of the 2007 ACM Workshop on Storage Security and Survivability, pages 7–12, 2007.
[29] C. Wang, N. Cao, K. Ren, and W. Lou. Enabling secure and efficient ranked keyword search over outsourced cloud data. IEEE Transactions on Parallel and Distributed Systems, 23(8):1467–1479, 2012.
[30] I. H. Witten, A. Moffat, and T. C. Bell. Managing gigabytes: Compressing and indexing documents and images. Morgan Kaufmann Publishing, San Francisco, May 1999.
[31] W. K. Wong, D. W. Cheung, B. Kao, and N. Mamoulis. Secure kNN computation on encrypted databases. In Proc. of SIGMOD, pages 139–152, 2009.
[32] B. Yao, F. Li, and X. Xiao. Secure nearest neighbor revisited. http://www.cs.utah.edu/~lifeifei/papers/snnicde.pdf, to appear in ICDE, 2013.
[33] S. Yu, C. Wang, K. Ren, and W. Lou. Achieving secure, scalable, and fine-grained data access control in cloud computing. In Proc. of IEEE INFOCOM, pages 1–9, 2010.
[34] S. Zerr, D. Olmedilla, W. Nejdl, and W. Siberski. Zerber+r: Top-k retrieval from a confidential index. In Proc. of EDBT, pages 439–449, 2009.
[35] J. Zobel and A. Moffat. Exploring the similarity space. SIGIR Forum, 32(1):18–34, 1998.

# Appendix

## The Proposed Tree-based Search Algorithm

The following notations are used in the pseudo code of the algorithm:

- **O** - Denotes a subtree of the searched index tree or a document array residing in the leaf node.
- **x** - An encrypted document in a document array O.
- **Si** - The similarity score equal to \( \text{Cos}(\mathbf{\hat{D}_d,i}, \mathbf{\hat{Q}_i}) \).
- **PF(\(\mathbf{\hat{D}_d,i}\))** - The function for predicting the maximum possible final similarity score from index vector \(\mathbf{\hat{D}_d,i}\).
- **F(·)** - The final similarity score of a document, e.g., \( F(x) = \sum_{i=1}^{h} S_i \).
- **Lk** - The list for selected top-k documents stored in descending order according to F(x).
- **DLi** - The list for index vectors \(\mathbf{\hat{D}_d,i}\) stored in a node at the ith level of a subtree of the index tree.
- **Mk** - The similarity score of the kth document in Lk.

### Algorithm 1: Proposed Search Algorithm for Top-k Ranking on Index Tree

```plaintext
begin
    for (i = 1 to h) do
        if (\(\mathbf{\hat{Q}_i}\) does not exist in the search request) then
            \(\hat{P}_i \leftarrow 0\) and all \(S_i \leftarrow 0\) at the ith level;
        else
            use the received \(\hat{P}_i\) with the search request;
        end if
    end for
    findTopK(I, (∅), F(.), k);
    return Lk;
end

procedure findTopK(IndexTree I, Identifier (\(\mathbf{\hat{D}_d,1}, \mathbf{\hat{D}_d,2}, ..., \mathbf{\hat{D}_d,i-1}\)), Score F(·), int k)
    if (O is a document array) then
        while (there is next document in O) do
            x = next document in O
            if (|Lk| < k or F(x) > Mk) then
                delete kth document from Lk;
                insert x into Lk according to F(x);
            end if
        end while
    else
        DLi = getIndexList(I, (\(\mathbf{\hat{D}_d,1}, \mathbf{\hat{D}_d,2}, ..., \mathbf{\hat{D}_d,i-1}\)));
        counter = 0;
        while (there is next index vector in the subtree) do
            if (|Lk| = k and PF(DLi(counter)) ≤ Mk) then
                break;
            else
                findTopK(I, (\(\mathbf{\hat{D}_d,1}, ..., \mathbf{\hat{D}_d,i-1}, \mathbf{\hat{D}_d,i}\)), F(·), k);
            end if
            counter = counter + 1;
        end while
    end if
end procedure

procedure getIndexList(IndexTree I, Identifier (\(\mathbf{\hat{D}_d,1}, \mathbf{\hat{D}_d,2}, ..., \mathbf{\hat{D}_d,i-1}\)))
    if (\(\mathbf{\hat{Q}_i}\) exists in the search request) then
        for (each \(\mathbf{\hat{D}_d,i}\) within the node at the ith level in subtree of I with identifier (\(\mathbf{\hat{D}_d,1}, \mathbf{\hat{D}_d,2}, ..., \mathbf{\hat{D}_d,i-1}\))) do
            compute \(S_i = \text{Cos}(\mathbf{\hat{D}_d,i}, \mathbf{\hat{Q}_i})\);
        end for
        sort DLi in descending order according to \(S_i\);
    else
        return the original DLi;
    end if
    return DLi;
end procedure
```

This optimized version of the text provides a clearer and more coherent presentation of the content, making it easier to understand and follow.