# Virtual Playgrounds for Worm Behavior Investigation

## 4.3 Detailed Exploitation Steps

In this section, we demonstrate the fidelity of vGround in capturing detailed exploitation steps at the byte level.

### Lion Worm
Figure 8 shows a `tcpdump` trace generated in vGround for the Lion worm experiment (Section 4.1). The trace captures a complete infection process with network-level details. The initial TCP connection handshake is not shown in the figure.

The trace reveals that the vulnerability in the BIND service [14] is successfully exploited, leading to the creation of a remote shell. The byte sequence in lines 2, 3, and 4 matches the signature used by Snort [8] for Lion worm detection. The trace also shows the sequence of specially crafted commands executed, resulting in the transfer and activation of a worm copy.

### Slapper Worm
The Slapper worm is unique due to its heap-based exploitation [44]. vGround successfully reproduces the detailed exploits: Initially, a TCP connection is initiated to verify the reachability of a victim. If reachable, an invalid HTTP GET request is sent to acquire the version of the vulnerable Apache server. Once the version is obtained, a series of 20 connections at 100-millisecond intervals exhausts Apache's pool of server processes, forcing the creation of two fresh processes for the next two SSL connections. This "forking" ensures the same heap structures within these processes, preparing for the final two SSL handshake exploitations. The first SSL connection exploits the vulnerability to obtain the exact location of the affected heap allocation, which is then used in the second SSL connection to correctly patch the attack buffer. The second SSL connection re-triggers the heap-based buffer overflow, transferring control to the patched attack buffer.

Due to space constraints, we do not show the full vGround traces during the above exploitation process. Instead, the trace in the final stage of the attack is shown in Figure 9. From the decoded area of Figure 9, it is interesting to see that the worm source is transferred in the uuencoded format.

## 4.4 Malicious Payload

A worm’s payload reveals the intention of the worm author and often leads to destructive impact. vGround is an ideal venue to invoke the malicious payload because any consequent damage will be confined within the vGround. Moreover, the vGround can be easily recovered due to its all-software, user-level implementation.

In the Lion worm trace (Figure 8), the following string is found: `find / -name "index.html" -exec /bin/cp index.html {} \;`. The Lion worm recursively searches for all `index.html` files starting from the root directory and replaces them with a built-in web page. This malicious payload is confirmed by our forensic analysis enabled by the vGround post-infection trace collection service (Section 3.4). We also ran an earlier version of the Lion worm in a separate vGround and observed that it carries and installs the infamous rootkit t0rn [28], which can destroy the infected host. Without full-system virtualization, such kernel-level damage cannot be easily reproduced. Furthermore, the vGround contains the damage and makes system reinstallation fast and easy.

The Slapper worm does not destroy local disk content like the Lion worm. It is more advanced in self-organizing worm-infected hosts into a P2P attack network. In the vGround for the Slapper worm, we are able to observe the operations of this P2P network. Specifically, we deploy a special client [19] in one of the end hosts. The special client issues commands (listed in Figure 10) to the infected hosts. Each Slapper worm carries a DDoS payload component [19]. In the vGround, we can issue commands such as `list`, `udpflood`, and `tcpflood` via the special client. The vGround traces indicate that a command is propagated among the infected hosts in a P2P fashion, rather than being sent directly from the special client. The vGround provides a convenient environment to further investigate such advanced attack strategies.

## 4.5 Advanced Worm Experiments

In this section, we present several advanced experiments where vGrounds demonstrate unique advantages over other worm experiment environments.

### Multi-vector Worms
Multi-vector worms can infect via multiple infection vectors (IVs). In this experiment, we run the Ramen worm [3, 17], which carries three different IVs in three different services: LPRng (CVE-2000-0917), wu-ftp (CVE-2000-0573), and rpc.statd (CVE-2000-0666). A vGround with 1000 virtual nodes running these services is created, and only one seed Ramen worm is planted. Over time, we observe different infection attempts based on all three IVs. Interestingly, our vGround experiments reveal that the Ramen exploitation code for the vulnerable wu-ftp server is flawed—a result not mentioned in popular bulletins [3, 17]. To confirm, we also use the same exploitation code against a real machine running a vulnerable FTP server (wu-ftp-2.6.0-3). The result agrees with the vGround result.

### Stealthy/Polymorphic Worms
Using various polymorphic engines [34], worms can become extremely stealthy. Modeling and detecting stealthy behavior or polymorphic appearances require longer time and larger playground scale. Furthermore, it is challenging, if not impossible, for worm simulators [39] to experiment with polymorphic worms.

We synthesized a polymorphic worm based on the original Slapper worm to evaluate the effectiveness of signature-based worm detection schemes. As shown in Section 4.3, the Slapper worm transfers a uuencoded version of the worm source code after a successful exploitation. Our polymorphic Slapper first attempts to encrypt the source using the OpenSSL tool before transmission. The encryption password is randomly generated and XOR'ed with a shared key. Finally, the resultant value is prepended to the encrypted worm source file for transmission. Our vGround experiments show that Snort [8] is no longer able to detect the worm. The same worm could also be used to test the signatures generated by various signature extraction algorithms [42, 35, 37].

### Routing Worms
vGround can also be used to study the relationship between worm propagations and the underlying routing infrastructure. We recently synthesized the routing worm introduced in [52]. The routing worm takes advantage of information in BGP routing tables to reduce its scanning space without missing any potential target. With its network virtualization and real-world routing protocol support, the vGround provides a new venue to study (at least qualitatively) such an infrastructure-aware worm and the corresponding defense mechanisms.

## 5 Limitations and Extensions

It has been noted [11] that a UML-based VM exposes certain system-wide footprints. For example, the content in `/proc/cmdline` can reveal the command parameters when a UML VM is started, and these parameters contain UML-specific information (e.g., the special root device `ubd0`). Such deficiencies may undesirably disclose the existence of vGround. As a counter-measure, methods have been proposed [27] to minimize such VM-specific footprints. However, this is not the end of the problem. Instead, it may lead to another round of "arms race." From another perspective, an interesting trend is that VMs, including UML VMs, are increasingly used for general computing purposes such as web hosting, education, and Grid computing [30, 43]. If this trend continues, the arms race tension may be mitigated because a worm might as well infect a VM in such a "mixed-reality" cyberspace.

Additionally, the confined nature of vGround may disable some worm experiments where the worm needs to communicate with hosts outside the vGround to "succeed." For example, the Santy worm [22] relies on the Google search engine to locate targets for infection and can be effectively mitigated by filtering worm-related queries [20]. However, the vGround cannot be readily used to safely observe the dynamics of such worms. Although the vGround platform does have the capability to simulate external communication, additional measures and configurations are required to handle such scenarios.