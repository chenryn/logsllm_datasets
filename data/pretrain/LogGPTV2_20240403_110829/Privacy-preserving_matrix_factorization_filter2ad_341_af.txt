Electronic Commerce, 1999.
[49] A. Narayanan and V. Shmatikov. Robust de-anonymization
of large sparse datasets. In IEEE S&P, 2008.
[50] V. Nikolaenko, U. Weinsberg, S. Ioannidis, M. Joye,
D. Boneh, and N. Taft. Privacy-preserving ridge regression
on hundreds of millions of records. In IEEE S&P, 2013.
[51] K. Nissim and E. Weinreb. Communication eﬃcient secure
linear algebra. In TCC, 2006.
[52] P. Paillier. Public-key cryptosystems based on composite
degree residuosity classes. In EUROCRYPT, 1999.
[53] B. Pinkas, T. Schneider, N. P. Smart, and S. C. Williams.
Secure two-party computation is practical. In
ASIACRYPT, 2009.
[54] N. Pippenger and M. J. Fischer. Relations among
complexity measures. J. ACM, 26(2), 1979.
[55] M. O. Rabin. How to exchange secrets by oblivious
transfer. Technical Report TR-81, Aiken Computation
Laboratory, Harvard University, 1981.
[63] A. C.-C. Yao. How to generate and exchange secrets. In
FOCS, 1986.
APPENDIX
A. YAO’S GARBLED CIRCUITS
Yao’s protocol (a.k.a. garbled circuits) [63] (see also [42])
is a generic method for secure multi-party computation. In
a variant thereof (adapted from [48, 50]), the protocol is run
between a set of n input owners, where ai denotes the private
input of user i, 1 ≤ i ≤ n, an evaluator, that wishes to
evaluate f (a1, . . . , an), and a third party, the crypto-service
provider or CSP in short. At the end of the protocol, the
evaluator learns the value of f (a1, a2, . . . , an) but no party
learns more than what is revealed from this output value.
The protocol requires the function f can be expressed as a
Boolean circuit, e.g. as a graph of or, and, not and xor
gates, and that the evaluator and the CSP do not collude.
Oblivious Transfer. Oblivious transfer (OT) [55, 14] is
an important building block of Yao’s protocol. OT is two-
party protocol between a chooser and a sender. The sender
has two (cid:96)-bit strings σ0 and σ1. The chooser selects a bit b
and exactly obtains from the sender the string σb, without
the sender learning the value of b. In addition, the chooser
learns nothing about σ1−b (beyond its length).
Oblivious transfer protocols can be constructed from many
cryptographic assumptions. We describe below a protocol
based on the Decision Diﬃe-Hellman assumption [4].
Let G = (cid:104)g(cid:105) be a cyclic group of order q in which the
decisional Diﬃe-Hellman (DDH) assumption holds. Let also
Ω be an encoding map from {0, 1}(cid:96) onto G. Finally, let
c ∈ G whose discrete logarithm is unknown. The chooser
chooses x ∈R Zq and computes yb = gx and y1−b = c/gx.
She sends y0 to the sender. The sender represents σ0 and
σ1 as elements in G: ω0 = Ω(σ0) and ω1 = Ω(σ1). She
chooses r0, r1 ∈R Zq, recovers y1 = c/y0, and computes
C0 = (gr0 , ω0 y0
r1 ). The sender
sends C0, C1 to the chooser. Upon receiving C0, C1, the
rb /(grb )x using secret value x
chooser computes ωb as ωb yb
and obtains σb = Ω−1(ωb).
r0 ) and C1 = (gr1 , ω1 y1
Circuit Garbling. The key idea behind Yao’s protocol
resides in the circuit encoding. To each wire wi of the circuit,
the CSP associates two random cryptographic keys, K 0
wi and
K 1
wi , that respectively correspond to the bit-values bi = 0
and bi = 1. Next, for each binary gate g (e.g., an or-
gate) with input wires (wi, wj) and output wire wk, the CSP
811bi
bj
K0
wi
,K1
wi
K0
wj
,K1
wj
g
K0
wk
,K1
wk
g(bi, bj ) = bi ∨ bj
C. SORTING NETWORKS
for some random ρ ∈ Zq. Letting c = (c(1), c(2)), it is worth
remarking that one can publicly mask the ciphertext c with
any chosen random mask µ ∈ {0, 1}(cid:96) as
ˆc = (c(1), c(2) ⊕ µ) .
Decrypting ˆc = (ˆc(1), ˆc(2)) then yields the masked message
ˆm = m ⊕ µ. Indeed, we have
ˆc(2) ⊕ H(cid:0)(ˆc(1))x(cid:1) = (c(2) ⊕ µ) ⊕ H(cid:0)(gρ)x(cid:1)
=(cid:0)(m ⊕ H(yρ)) ⊕ µ(cid:1) ⊕ H(yρ)
= m ⊕ µ .
The scheme can be shown to be semantically secure in
the random oracle model, under the Decision Diﬃe-Hellman
assumption [59].
1, a(cid:48)
2, . . . , a(cid:48)
Sorting networks [9, 32] are circuits that sort an input
sequence (a1, a2, . . . , an) into a monotonically increasing se-
quence (a(cid:48)
n). They are constructed by wiring to-
gether compare-and-swap circuits, their main building block.
A compare-and-swap circuit is a binary operator taking on
input a pair (a1, a2), and returning the sorted pair (a(cid:48)
1, a(cid:48)
2)
where a(cid:48)
2 = max(a1, a2). For graphical
convenience, a comparator is usually represented as a ver-
tical line, as illustrated in Figure 8(a). Note that elements
are swapped if and only if the ﬁrst element is larger than the
second one. Figure 8(b) shows a sorting network example.
1 = min(a1, a2) and a(cid:48)
a1
a2
a(cid:48)
1 = min(a1, a2)
a(cid:48)
2 = max(a1, a2)
a1
a2
a3
a4
1
a(cid:48)
a(cid:48)
a(cid:48)
a(cid:48)
2
3
4
(a) Compare-and-Swap circuit
(b) Sorting network
Figure 8: Networks of compare-and-swap elements.
Sorting networks were speciﬁcally designed to admit an
eﬃcient hardware implementation, but also to be highly par-
allelizable. The eﬃciency of the sorting network can be mea-
sured by its size (the total number of comparisons) or depth
(the maximum number of stages, where each stage comprises
comparisons that can be executed in parallel). The depth of
the network reﬂects the parallel running time of the sorting.
For example, in Figure 8(b) the comparisons (a1, a2) and
(a3, a4) can be executed in parallel; so can comparisons
(a1, a3) and (a2, a4). As such, the depth of this network is 3,
which is the maximum number of compare-and-swaps along
each “line”. The network can be computed in 3 timesteps
with 2 processors or in 5 timesteps with just one processor.
The best known (and asymptotically optimal) sorting net-
work is the AKS network [2] that achieves size O(n log n)
and depth O(log n). Being an important theoretical discov-
ery, the AKS network has no pratical application because of
a large constant. Eﬃcient networks that are often used in
practice achieve depth O(log2 n) and size O(n log2 n). These
include Batcher, odd-even merge sort, bitonic sort, and Shell
sort networks [32]. In the presence of p processors, the run-
ning time of these networks is O(n(log2 n/p). Empirical
studies indicate that, in practice, Batcher has better average
performance than most widely used algorithms [60].
computes the four ciphertexts
(K g(bi,bj )
Enc
wk
(K
bi
wi
,K
bj
wj
)
for bi, bj ∈ {0, 1} .
)
(6)
wi , K 1
wj ) it is possible to recover the key K 1
The set of these four randomly ordered ciphertexts deﬁnes
the garbled gate. See [45] for an eﬃcient implementation.
For example, as illustrated on Fig. 7, given the pair of keys
(K 0
wk by decrypt-
ing Enc(K0
wk ). However, the other key, namely
wi
K 0
wk , cannot be recovered. More generally, it is worth not-
ing that the knowledge of (K bi
wj ) yields only the value
of K g(bi,bj )
and that no other output values can be recovered
for the corresponding gate.
wi , K bj
)(K 1
,K1
wk
wj
bi
0
0
1
1
bj
0
1
0
1
g(bi, bj )
0
1
1
1
wj
,K0
Garbled value
)(K0
wk
)(K1
wk
)(K1
wk
)(K1
wk
Enc(K0
wi
Enc(K0
wi
Enc(K1
wi
Enc(K1
wi
,K1
,K0
,K1
wj
wj
wj
)
)
)
)
Figure 7: Example of a garbled or-gate.
Circuit Evaluation. We are now ready to present the
complete protocol for evaluating f . The CSP generates a
private and public key, and makes the latter available to the
users. Each user i encrypts her private input ai under the
CSP’s public key to get ci, and sends ci to the evaluator.
Upon receiving all encrypted inputs, the evaluator contacts
the CSP to build a garbled circuit performing the steps of
(a) decrypting the encrypted input values, using the CSP’s
private key and (b) evaluating function f .
wk , 0) and (K 1
The CSP provides the evaluator with the garbled gates of
this circuit, each comprising a random permutation of the
ciphertexts (6), as well as the graph representing how these
connect.
It also provides the correspondence between the
garbled value and the real bit-value for the circuit-output
wires (the outcome of the computation): if wk is an circuit-
output wire, the pairs (K 0
wk , 1) are given to the
evaluator. To transfer the garbled values of the input wires,
the CSP engages in an oblivious transfer with the evalua-
tor, so that evaluator obliviously obtains the garbled-circuit
input values corresponding to the ci’s; this ensures that the
CSP does not learn the user inputs and that the evaluator
can only compute the function on these inputs alone. Hav-
ing the garbled inputs, the evaluator can “evaluate” each
gate sequentially, by decrypring gate and obtaining the keys
necessary to decrypt the output of the gates it connects to.
B. HASH-ELGAMAL ENCRYPTION
Let G = (cid:104)g(cid:105) be a cyclic group of order q and H : G →
{0, 1}(cid:96) be a cryptographic hash function. The public key is
pk = (g, y) where y = gx for some random x ∈ Zq, and the
private key is sk = x. A message m ∈ {0, 1}(cid:96) is encrypted
using
Epk : {0, 1}(cid:96) → G × {0, 1}(cid:96), m (cid:55)→ c =(cid:0)gρ, m ⊕ H(yρ)(cid:1)
812