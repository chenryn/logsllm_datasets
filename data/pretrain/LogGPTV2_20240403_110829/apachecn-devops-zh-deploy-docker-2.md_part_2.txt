CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
```
成功！
现在让我们回到前面的问题，即我们如何知道容器需要将端口 80 映射到它？我们有几个选项可以找到这些信息，最简单的是启动容器并检入`docker ps`来查看哪些端口是未绑定的:
```
$ docker run -d \
             --rm \
             nginx
f64b35fc42c33f4af2648bf4f1dce316b095b30d31edf703e099b93470ab725a
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
f64b35fc42c3 nginx "nginx -g 'daemon ..." 4 seconds ago Up 3 seconds 80/tcp awesome_bell
```
这里我们和`docker run`一起使用的新标志是`--rm`，我们刚才提到过，它告诉 Docker 守护程序在容器停止后完全移除容器，这样我们就不用自己手动了。
If you already have a container that you want to check the mapped ports on, you can use `docker port ` command but we are omitting it here since it cannot be used on images, but just containers.
虽然这是查看需要哪些端口的最快方法，但是除了读取其 Dockerfile 和文档之外，检查映像的一般方法是通过`docker inspect`:
```
$ # Inspect NGINX image info and after you match our query, return also next two lines
$ docker inspect nginx | grep -A2 "ExposedPorts"
"ExposedPorts": {
 "80/tcp": {}
},
```
另外，`docker inspect`可以显示各种其他有趣的信息，例如:
*   映像的标识
*   标签名
*   映像创建日期
*   核心环境变量
*   容器在启动时运行的命令
*   容器的大小
*   映像图层标识
*   指定的体积
随意在任何容器或映像上运行 inspect 命令，看看你能在那里找到什么宝石。大多数情况下，这个输出主要用于调试，但是在缺少映像文档的情况下，它可能是一个宝贵的工具，可以让您在最少的时间内运行。
# 调试容器
通常，在处理容器的一般工作中，您可能必须弄清楚正在运行的容器发生了什么，但是`docker ps`还不足以为您提供解决问题所需的所有信息。对于这些情况，首先要使用的命令是`docker logs`。该命令显示容器发出的任何输出，包括`stdout`和`stderr`流。对于以下日志，我从之前启动了相同的 NGINX 容器，并在`localhost`上访问了它的托管页面:
```
$ docker run -d \
             -p 8080:80 \
             nginx
06ebb46f64817329d360bb897bda824f932b9bcf380ed871709c2033af069118
$ # Access the page http://localhost:8080 with your browser
$ docker logs 06ebb46f
172.17.0.1 - - [02/Aug/2017:01:39:51 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.01" "-"
2017/08/02 01:39:51 [error] 6#6: *1 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "localhost:8080"
172.17.0.1 - - [02/Aug/2017:01:39:51 +0000] "GET /favicon.ico HTTP/1.1" 404 169 "-" "Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.01" "-"
172.17.0.1 - - [02/Aug/2017:01:39:52 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.01" "-"
```
您可以在这里看到，NGINX 记录了所有的访问和相关的响应代码，这些代码对于调试 web 服务器来说是非常宝贵的。一般来说，输出可能从非常有用到垃圾不等，这取决于运行服务的是什么，但它通常是开始搜索的好地方。如果您想在写入日志时跟踪日志，也可以添加`-f`标志，这在日志很大并且您试图从您正在寻找的特定事物中过滤噪音时非常有用。
# 看到容器看到的东西
当日志不足以解决问题时，要使用的命令是`docker exec`，以便在运行的容器上执行一个命令，该命令可以包括对完整外壳的访问:
```
$ docker run -d \
             -p 8080:80 \
             nginx
06ebb46f64817329d360bb897bda824f932b9bcf380ed871709c2033af069118
$ docker exec 06ebb46f ls -la /etc/nginx/conf.d/
total 12
drwxr-xr-x 2 root root 4096 Jul 26 07:33 .
drwxr-xr-x 3 root root 4096 Jul 26 07:33 ..
-rw-r--r-- 1 root root 1093 Jul 11 13:06 default.conf
```
在这种情况下，我们使用`docker exec`在容器中运行`ls`命令，但这并不是一个真正强大的调试工具。如果我们试着把那个完整的壳放进容器里，然后那样检查它，会怎么样？
```
$ docker exec -it \
              06ebb46f /bin/bash
root@06ebb46f6481:/# ls -la /etc/nginx/conf.d/
total 12
drwxr-xr-x 2 root root 4096 Jul 26 07:33 .
drwxr-xr-x 3 root root 4096 Jul 26 07:33 ..
-rw-r--r-- 1 root root 1093 Jul 11 13:06 default.conf
root@06ebb46f6481:/# exit
exit
$ # Back to host shell
```
这一次，我们使用了`-it`，这是`-i`和`-t`标志的简写，这两个标志结合起来设置了完整外壳访问所需的交互式终端，然后我们使用`/bin/bash`在容器内运行 Bash。容器内的外壳在这里是一个非常有用的工具，但是在安装的工具方面，我们受容器本身的支配，因为许多映像从映像中删除了任何不必要的包——在这种情况下，NGINX 容器没有`ps`，这是一个非常有价值的工具，用于查找问题的原因。由于容器通常是独立的一次性组件，有时向容器中添加调试工具以找出导致问题的原因可能会很好(尽管我们将在后面的章节中介绍一种更好的方法，让`pid`名称空间加入进来):
```
$ docker exec -it 06ebb46f /bin/bash
root@06ebb46f6481:/# ps  # No ps on system
bash: ps: command not found
root@06ebb46f6481:/# apt-get update -q
Hit:1 http://security.debian.org stretch/updates InRelease
Get:3 http://nginx.org/packages/mainline/debian stretch InRelease [2854 B]
Ign:2 http://cdn-fastly.deb.debian.org/debian stretch InRelease
Hit:4 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease
Hit:5 http://cdn-fastly.deb.debian.org/debian stretch Release
Fetched 2854 B in 0s (2860 B/s)
Reading package lists...
root@06ebb46f6481:/# apt-get install -y procps
The following NEW packages will be installed:
libgpm2 libncurses5 libprocps6 procps psmisc
0 upgraded, 5 newly installed, 0 to remove and 0 not upgraded.
Need to get 558 kB of archives.
After this operation, 1785 kB of additional disk space will be used.
root@06ebb46f6481:/# ps
PID TTY TIME CMD
31 ? 00:00:00 bash
595 ? 00:00:00 ps
root@06ebb46f6481:/#
```
如您所见，从容器的上游分发向容器添加任何调试工具都很容易，但是请注意，一旦您发现您的问题，您应该启动一个新的容器并移除旧的容器来清理剩余的垃圾，因为它正在浪费空间，并且新的容器将从没有添加您新安装的调试工具的映像开始(在我们的案例中为`procps`)。
另一件要记住的事情是，有时，映像会阻止安装额外的包，所以对于这些情况，我们需要等到后面的章节，看看我们如何使用名称空间在这种受约束的设置中工作。
Sometimes, the container is locked into a limited user shell, and because of it, you will be unable to access or modify other parts of the system of the container. In such configurations, you can add the `-u 0` flag to run the `docker exec` command as `root` (`user 0`). You can also specify any other username or user ID instead, but generally if you need a secondary user to work with on a container, `root` is what you want.
# 我们的第一份档案
现在我们已经知道了一些关于如何绕过容器的知识，这是一个尝试创建我们自己的容器的好地方。要开始构建一个容器，我们首先需要知道的是 Docker 在构建映像时寻找的默认文件名是`Dockerfile`。虽然您可以为这个主配置文件使用不同的名称，但这是非常不鼓励的，尽管在一些罕见的情况下，您可能无法避免它-例如，如果您需要一个测试套件映像和主映像构建文件在同一个文件夹中。现在，我们将假设您只有一个构建配置，考虑到这一点，我们来看看这些基本的`Dockerfile`之一是什么样子。在文件系统的某个地方创建一个测试文件夹，并将其放入名为`Dockerfile`的文件中:
```
FROM ubuntu:latest
RUN apt-get update -q && \
 apt-get install -qy iputils-ping
CMD ["ping", "google.com"]
```
让我们逐行检查这个文件。首先，我们有`FROM ubuntu:latest`线在里面。这一行表示我们希望使用最新的 Ubuntu Docker 映像作为我们的基础，我们将在此基础上构建自己的服务。该映像将自动从 Docker Hub 中提取，但是如果我们愿意，该映像也可以来自自定义存储库、您自己的本地映像，并且可以基于任何其他映像，只要它为您的服务提供了良好的基础(即 NGINX、Apline Linux、Jenkins 等)。