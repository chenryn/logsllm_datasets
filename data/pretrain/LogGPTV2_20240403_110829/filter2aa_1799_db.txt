new service process. In case the service that will be started is a packaged service, the SCM reads all the 
package information from the registry (package full name, origin, and application user model ID) and 
calls the Appinfo service, which stamps the token with the necessary AppModel security attributes and 
prepares the service process for the modern package activation. (See the “Packaged applications” sec-
tion in Chapter 8 for more details about the AppModel.)
After a successful logon, the SCM loads the account’s profile information, if it’s not already loaded, 
by calling the User Profile Basic Api DLL’s (%SystemRoot%\System32\Profapi.dll) LoadProfileBasic 
function. The value HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\\ProfileImagePath contains the location on disk of a registry hive that LoadUserProfile loads into 
the registry, making the information in the hive the HKEY_CURRENT_USER key for the service.
As its next step, LogonAndStartImage proceeds to launch the service’s process. The SCM starts the 
process in a suspended state with the CreateProcessAsUser Windows function. (Except for a process 
hosting services under a local system account, which are created through the standard CreateProcess 
API. The SCM already runs with a SYSTEM token, so there is no need of any other logon.) 
Before the process is resumed, the SCM creates the communication data structure that allows the 
service application and the SCM to communicate through asynchronous RPCs. The data structure con-
tains a control sequence, a pointer to a control and response buffer, service and hosting process data 
(like the PID, the service SID, and so on), a synchronization event, and a pointer to the async RPC state.
The SCM resumes the service process via the ResumeThread function and waits for the ser-
vice to connect to its SCM pipe. If it exists, the registry value HKLM\SYSTEM\CurrentControlSet\
Control\ServicesPipeTimeout determines the length of time that the SCM waits for a service to call 
StartServiceCtrlDispatcher and connect before it gives up, terminates the process, and concludes 
that the service failed to start (note that in this case the SCM terminates the process, unlike when the 
service doesn’t respond to the start request, discussed previously in the “Service start” section). If 
ServicesPipeTimeout doesn’t exist, the SCM uses a default timeout of 30 seconds. The SCM uses the 
same timeout value for all its service communications.
Delayed autostart services
Delayed autostart services enable Windows to cope with the growing number of services that are 
being started when a user logs on, which bogs down the boot-up process and increases the time 
before a user is able to get responsiveness from the desktop. The design of autostart services was 
primarily intended for services required early in the boot process because other services depend on 
them, a good example being the RPC service, on which all other services depend. The other use was to 
allow unattended startup of a service, such as the Windows Update service. Because many autostart 
458 
CHAPTER 10 Management, diagnostics, and tracing
services fall in this second category, marking them as delayed autostart allows critical services to start 
faster and for the user’s desktop to be ready sooner when a user logs on immediately after booting. 
Additionally, these services run in background mode, which lowers their thread, I/O, and memory 
priority. Configuring a service for delayed autostart requires calling the ChangeServiceConfig2 API. You 
can check the state of the flag for a service by using the qc option of sc.exe.
Note If a nondelayed autostart service has a delayed autostart service as one of its 
dependencies, the delayed autostart flag is ignored and the service is started immediately 
to satisfy the dependency.
Triggered-start services
Some services need to be started on demand, after certain system events occur. For that reason, 
Windows 7 introduced the concept of triggered-start service. A service control program can use the 
ChangeServiceConfig2 API (by specifying the SERVICE_CONFIG_TRIGGER_INFO information level) for 
configuring a demand-start service to be started (or stopped) after one or more system events occur. 
Examples of system events include the following:
I 
A specific device interface is connected to the system.
I 
The computer joins or leaves a domain.
I 
A TCP/IP port is opened or closed in the system firewall.
I 
A machine or user policy has been changed.
I 
An IP address on the network TCP/IP stack becomes available or unavailable.
I 
A RPC request or Named pipe packet arrives on a particular interface.
I 
An ETW event has been generated in the system.
The first implementation of triggered-start services relied on the Unified Background Process 
Manager (see the next section for details). Windows 8.1 introduced the Broker Infrastructure, which had 
the main goal of managing multiple system events targeted to Modern apps. All the previously listed 
events have been thus begun to be managed by mainly three brokers, which are all parts of the Broker 
Infrastructure (with the exception of the Event Aggregation): Desktop Activity Broker, System Event 
Broker, and the Event Aggregation. More information on the Broker Infrastructure is available in the 
“Packaged applications” section of Chapter 8.
After the first phase of ScAutoStartServices is complete (which usually starts critical services listed 
in the HKLM\SYSTEM\CurrentControlSet\Control\EarlyStartServices registry value), the SCM calls 
ScRegisterServicesForTriggerAction, the function responsible in registering the triggers for each trig-
gered-start service. The routine cycles between each Win32 service located in the SCM database. For 
each service, the function generates a temporary WNF state name (using the NtCreateWnfStateName 
CHAPTER 10 Management, diagnostics, and tracing
459
native API), protected by a proper security descriptor, and publishes it with the service status stored as 
state data. (WNF architecture is described in the “Windows Notification Facility” section of Chapter 8.) 
This WNF state name is used for publishing services status changes. The routine then queries all the 
service triggers from the TriggerInfo registry key, checking their validity and bailing out in case no trig-
gers are available. 
Note The list of supported triggers, described previously, together with their parameters, 
is documented at https://docs.microsoft.com/en-us/windows/win32/api/winsvc/ns-winsvc-
service_trigger.
If the check succeeded, for each trigger the SCM builds an internal data structure containing all the 
trigger information (like the targeted service name, SID, broker name, and trigger parameters) and 
determines the correct broker based on the trigger type: external devices events are managed by the 
System Events broker, while all the other types of events are managed by the Desktop Activity broker. 
The SCM at this stage is able to call the proper broker registration routine. The registration process is 
private and depends on the broker: multiple private WNF state names (which are broker specific) are 
generated for each trigger and condition. 
The Event Aggregation broker is the glue between the private WNF state names published by the 
two brokers and the Service Control Manager. It subscribes to all the WNF state names corresponding 
to the triggers and the conditions (by using the RtlSubscribeWnfStateChangeNotification API). When 
enough WNF state names have been signaled, the Event Aggregation calls back the SCM, which can 
start or stop the triggered start service.
Differently from the WNF state names used for each trigger, the SCM always independently publishes 
a WNF state name for each Win32 service whether or not the service has registered some triggers. This 
is because an SCP can receive notification when the specified service status changes by invoking the 
NotifyServiceStatusChange API, which subscribes to the service’s status WNF state name. Every time the 
SCM raises an event that changes the status of a service, it publishes new state data to the “service status 
change” WNF state, which wakes up a thread running the status change callback function in the SCP. 
Startup errors
If a driver or a service reports an error in response to the SCM’s startup command, the ErrorControl 
value of the service’s registry key determines how the SCM reacts. If the ErrorControl value is SERVICE_
ERROR_IGNORE (0) or the ErrorControl value isn’t specified, the SCM simply ignores the error and 
continues processing service startups. If the ErrorControl value is SERVICE_ERROR_NORMAL (1), the 
SCM writes an event to the system Event Log that says, “The  service failed to start due 
to the following error.” The SCM includes the textual representation of the Windows error code that the 
service returned to the SCM as the reason for the startup failure in the Event Log record. Figure 10-18 
shows the Event Log entry that reports a service startup error.
460 
CHAPTER 10 Management, diagnostics, and tracing
FIGURE 10-18 Service startup failure Event Log entry.
If a service with an ErrorControl value of SERVICE_ERROR_SEVERE (2) or SERVICE_ERROR_CRITICAL 
(3) reports a startup error, the SCM logs a record to the Event Log and then calls the internal function
ScRevertToLastKnownGood. This function checks whether the last known good feature is enabled, and,
if so, switches the system’s registry configuration to a version, named last known good, with which the
system last booted successfully. Then it restarts the system using the NtShutdownSystem system ser-
vice, which is implemented in the executive. If the system is already booting with the last known good
configuration, or if the last known good configuration is not enabled, the SCM does nothing more than
emit a log event.
Accepting the boot and last known good
Besides starting services, the system charges the SCM with determining when the system’s registry 
configuration, HKLM\SYSTEM\CurrentControlSet, should be saved as the last known good control 
set. The CurrentControlSet key contains the Services key as a subkey, so CurrentControlSet includes the 
registry representation of the SCM database. It also contains the Control key, which stores many kernel-
mode and user-mode subsystem configuration settings. By default, a successful boot consists of a suc-
cessful startup of autostart services and a successful user logon. A boot fails if the system halts because 
a device driver crashes the system during the boot or if an autostart service with an ErrorControl value 
of SERVICE_ERROR_SEVERE or SERVICE_ERROR_CRITICAL reports a startup error.
The last known good configuration feature is usually disabled in the client version of Windows. 
It can be enabled by setting the HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\
Configuration Manager\LastKnownGood\Enabled registry value to 1. In Server SKUs of Windows, the 
value is enabled by default.
The SCM knows when it has completed a successful startup of the autostart services, but Winlogon 
(%SystemRoot%\System32\Winlogon.exe) must notify it when there is a successful logon. Winlogon 
invokes the NotifyBootConfigStatus function when a user logs on, and NotifyBootConfigStatus sends a 
CHAPTER 10 Management, diagnostics, and tracing
461
message to the SCM. Following the successful start of the autostart services or the receipt of the mes-
sage from NotifyBootConfigStatus (whichever comes last), if the last known good feature is enabled, the 
SCM calls the system function NtInitializeRegistry to save the current registry startup configuration.
Third-party software developers can supersede Winlogon’s definition of a successful logon 
with their own definition. For example, a system running Microsoft SQL Server might not consider 
a boot successful until after SQL Server is able to accept and process transactions. Developers im-
pose their definition of a successful boot by writing a boot-verification program and installing the 
program by pointing to its location on disk with the value stored in the registry key HKLM\SYSTEM\
CurrentControlSet\Control\BootVerificationProgram. In addition, a boot-verification program’s instal-
lation must disable Winlogon’s call to NotifyBootConfigStatus by setting HKLM\SOFTWARE\Microsoft\
Windows NT\CurrentVersion\Winlogon\ReportBootOk to 0. When a boot-verification program is 
installed, the SCM launches it after finishing autostart services and waits for the program’s call to 
NotifyBootConfigStatus before saving the last known good control set.
Windows maintains several copies of CurrentControlSet, and CurrentControlSet is really a symbolic 
registry link that points to one of the copies. The control sets have names in the form HKLM\SYSTEM\
ControlSetnnn, where nnn is a number such as 001 or 002. The HKLM\SYSTEM\Select key contains values 
that identify the role of each control set. For example, if CurrentControlSet points to ControlSet001, the 
Current value under Select has a value of 1. The LastKnownGood value under Select contains the number 
of the last known good control set, which is the control set last used to boot successfully. Another value 
that might be on your system under the Select key is Failed, which points to the last control set for which 
the boot was deemed unsuccessful and aborted in favor of an attempt at booting with the last known 
good control set. Figure 10-19 displays a Windows Server system’s control sets and Select values.
NtInitializeRegistry takes the contents of the last known good control set and synchronizes it with 
that of the CurrentControlSet key’s tree. If this was the system’s first successful boot, the last known 
good won’t exist, and the system will create a new control set for it. If the last known good tree exists, 
the system simply updates it with differences between it and CurrentControlSet.
FIGURE 10-19 Control set selection key on Windows Server 2019.
462 
CHAPTER 10 Management, diagnostics, and tracing
Last known good is helpful in situations in which a change to CurrentControlSet, such as the modifi-
cation of a system performance-tuning value under HKLM\SYSTEM\Control or the addition of a service 
or device driver, causes the subsequent boot to fail. Figure 10-20 shows the Startup Settings of the 
modern boot menu. Indeed, when the Last Known Good feature is enabled, and the system is in the 
boot process, users can select the Startup Settings choice in the Troubleshoot section of the modern 
boot menu (or in the Windows Recovery Environment) to bring up another menu that lets them direct 
the boot to use the last known good control set. (In case the system is still using the Legacy boot 
menu, users should press F8 to enable the Advanced Boot Options.) As shown in the figure, when the 
Enable Last Known Good Configuration option is selected, the system boots by rolling the system’s 
registry configuration back to the way it was the last time the system booted successfully. Chapter 12 
describes in more detail the use of the Modern boot menu, the Windows Recovery Environment, and 
other recovery mechanisms for troubleshooting system startup problems.
FIGURE 10-20 Enabling the last known good configuration.
Service failures
A service can have optional FailureActions and FailureCommand values in its registry key that the SCM 
records during the service’s startup. The SCM registers with the system so that the system signals the 
SCM when a service process exits. When a service process terminates unexpectedly, the SCM deter-
mines which services ran in the process and takes the recovery steps specified by their failure-related 
registry values. Additionally, services are not only limited to requesting failure actions during crashes 
or unexpected service termination, since other problems, such as a memory leak, could also result in 
service failure.
CHAPTER 10 Management, diagnostics, and tracing
463
If a service enters the SERVICE_STOPPED state and the error code returned to the SCM is not 
ERROR_SUCCESS, the SCM checks whether the service has the FailureActionsOnNonCrashFailures flag 
set and performs the same recovery as if the service had crashed. To use this functionality, the service 
must be configured via the ChangeServiceConfig2 API or the system administrator can use the Sc.exe 
utility with the Failureflag parameter to set FailureActionsOnNonCrashFailures to 1. The default value 
being 0, the SCM will continue to honor the same behavior as on earlier versions of Windows for all 
other services.
Actions that a service can configure for the SCM include restarting the service, running a program, 
and rebooting the computer. Furthermore, a service can specify the failure actions that take place the 
first time the service process fails, the second time, and subsequent times, and it can indicate a delay 
period that the SCM waits before restarting the service if the service asks to be restarted. You can easily 
manage the recovery actions for a service using the Recovery tab of the service’s Properties dialog 
box in the Services MMC snap-in, as shown in Figure 10-21.
FIGURE 10-21 Service Recovery options.
Note that in case the next failure action is to reboot the computer, the SCM, after starting the ser-
vice, marks the hosting process as critical by invoking the NtSetInformationProcess native API with the 
ProcessBreakOnTermination information class. A critical process, if terminated unexpectedly, crashes 
the system with the CRITICAL_PROCESS_DIED bugcheck (as already explained in Part 1, Chapter 2, 
“System architecture.”
464 
CHAPTER 10 Management, diagnostics, and tracing
Service shutdown
When Winlogon calls the Windows ExitWindowsEx function, ExitWindowsEx sends a message to 
Csrss, the Windows subsystem process, to invoke Csrss’s shutdown routine. Csrss loops through the 
active processes and notifies them that the system is shutting down. For every system process except 
the SCM, Csrss waits up to the number of seconds specified in milliseconds by HKCU\Control Panel\
Desktop\WaitToKillTimeout (which defaults to 5 seconds) for the process to exit before moving on to the 
next process. When Csrss encounters the SCM process, it also notifies it that the system is shutting down 
but employs a timeout specific to the SCM. Csrss recognizes the SCM using the process ID Csrss saved 
when the SCM registered with Csrss using the RegisterServicesProcess function during its initialization. 
The SCM’s timeout differs from that of other processes because Csrss knows that the SCM communi-
cates with services that need to perform cleanup when they shut down, so an administrator might need 
to tune only the SCM’s timeout. The SCM’s timeout value in milliseconds resides in the HKLM\SYSTEM\
CurrentControlSet\Control\WaitToKillServiceTimeout registry value, and it defaults to 20 seconds.
The SCM’s shutdown handler is responsible for sending shutdown notifications to all the ser-
vices that requested shutdown notification when they initialized with the SCM. The SCM function 
ScShutdownAllServices first queries the value of the HKLM\SYSTEM\CurrentControlSet\Control\
ShutdownTimeout (by setting a default of 20 seconds in case the value does not exists). It then loops 
through the SCM services database. For each service, it unregisters eventual service triggers and deter-
mines whether the service desires to receive a shutdown notification, sending a shutdown command 
(SERVICE_CONTROL_SHUTDOWN) if that is the case. Note that all the notifications are sent to services 
in parallel by using thread pool work threads. For each service to which it sends a shutdown command, 
the SCM records the value of the service’s wait hint, a value that a service also specifies when it registers 
with the SCM. The SCM keeps track of the largest wait hint it receives (in case the maximum calculated 
wait hint is below the Shutdown timeout specified by the ShutdownTimeout registry value, the shutdown 
timeout is considered as maximum wait hint). After sending the shutdown messages, the SCM waits either 
until all the services it notified of shutdown exit or until the time specified by the largest wait hint passes.
While the SCM is busy telling services to shut down and waiting for them to exit, Csrss waits 
for the SCM to exit. If the wait hint expires without all services exiting, the SCM exits, and Csrss 
continues the shutdown process. In case Csrss’s wait ends without the SCM having exited (the 
WaitToKillServiceTimeout time expired), Csrss kills the SCM and continues the shutdown process. Thus, 
services that fail to shut down in a timely manner are killed. This logic lets the system shut down with 
the presence of services that never complete a shutdown as a result of flawed design, but it also means 
that services that require more than 5 seconds will not complete their shutdown operations.
Additionally, because the shutdown order is not deterministic, services that might depend on other 
services to shut down first (called shutdown dependencies) have no way to report this to the SCM and 
might never have the chance to clean up either.
To address these needs, Windows implements preshutdown notifications and shutdown ordering 
to combat the problems caused by these two scenarios. A preshutdown notification is sent to a service 
that has requested it via the SetServiceStatus API (through the SERVICE_ACCEPT_PRESHUTDOWN ac-
cepted control) using the same mechanism as shutdown notifications. Preshutdown notifications are 
sent before Wininit exits. The SCM generally waits for them to be acknowledged.
CHAPTER 10 Management, diagnostics, and tracing
465
The idea behind these notifications is to flag services that might take a long time to clean up (such as 
database server services) and give them more time to complete their work. The SCM sends a progress 
query request and waits 10 seconds for a service to respond to this notification. If the service does not 
respond within this time, it is killed during the shutdown procedure; otherwise, it can keep running as 
long as it needs, as long as it continues to respond to the SCM.
Services that participate in the preshutdown can also specify a shutdown order with respect to 
other preshutdown services. Services that depend on other services to shut down first (for example, 
the Group Policy service needs to wait for Windows Update to finish) can specify their shutdown de-
pendencies in the HKLM\SYSTEM\CurrentControlSet\Control\PreshutdownOrder registry value.
Shared service processes
Running every service in its own process instead of having services share a process whenever possible 
wastes system resources. However, sharing processes means that if any of the services in the process 
has a bug that causes the process to exit, all the services in that process terminate.
Of the Windows built-in services, some run in their own process and some share a process with 
other services. For example, the LSASS process contains security-related services—such as the Security 
Accounts Manager (SamSs) service, the Net Logon (Netlogon) service, the Encrypting File System (EFS) 
service, and the Crypto Next Generation (CNG) Key Isolation (KeyIso) service.
There is also a generic process named Service Host (SvcHost - %SystemRoot%\System32\Svchost.
exe) to contain multiple services. Multiple instances of SvcHost run as different processes. Services 
that run in SvcHost processes include Telephony (TapiSrv), Remote Procedure Call (RpcSs), and Remote 
Access Connection Manager (RasMan). Windows implements services that run in SvcHost as DLLs and 
includes an ImagePath definition of the form %SystemRoot%\System32\svchost.exe –k netsvcs in the 
service’s registry key. The service’s registry key must also have a registry value named ServiceDll under 
a Parameters subkey that points to the service’s DLL file.
All services that share a common SvcHost process specify the same parameter (–k netsvcs in the ex-
ample in the preceding paragraph) so that they have a single entry in the SCM’s image database. When 
the SCM encounters the first service that has a SvcHost ImagePath with a particular parameter during 
service startup, it creates a new image database entry and launches a SvcHost process with the param-
eter. The parameter specified with the -k switch is the name of the service group. The entire command 
line is parsed by the SCM while creating the new shared hosting process. As discussed in the “Service 
logon” section, in case another service in the database shares the same ImagePath value, its service SID 
will be added to the new hosting process’s group SIDs list.
The new SvcHost process takes the service group specified in the command line and looks for a val-
ue having the same name under HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost. 
SvcHost reads the contents of the value, interpreting it as a list of service names, and notifies the SCM 
that it’s hosting those services when SvcHost registers with the SCM. 
When the SCM encounters another shared service (by checking the service type value) during 
service startup with an ImagePath matching an entry it already has in the image database, it doesn’t 
launch a second process but instead just sends a start command for the service to the SvcHost it 
466 