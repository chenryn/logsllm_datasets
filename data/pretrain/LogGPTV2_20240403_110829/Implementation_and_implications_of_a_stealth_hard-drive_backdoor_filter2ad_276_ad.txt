the ﬁrmware is widely known, we have not been able to
assess how widespread its use is for hard-disks and storage
devices in general. We have found evidence that some RAID
controllers [26] and USB ﬂash storage sticks [20] have dig-
itally signed ﬁrmware, but these appear to be exceptions
rather than the rule.
Nevertheless, signed ﬁrmwares do not prevent an attacker
with physical access to the device from replacing it with an
apparently similar, but in reality backdoored, device. Also
note that the recent compromise of certiﬁcation authorities,
software vendors’ certiﬁcates, and hash collisions has demon-
strated real-world limitations of signature mechanisms.
Finally, ﬁrmware signatures merely check code integrity
at load time and do not prevent modiﬁcations at run time.
A vulnerability in the ﬁrmware that is exploitable from the
ATA bus2 would allow infection of the drive, bypassing the
signed update mechanism.
In addition, such vulnerabili-
ties are likely to be easily exploitable, because no mod-
ern exploit-mitigation techniques are present in the disk
ﬁrmwares we analyzed.
4.3
Intrusion Detection Systems
Current network-based intrusion detection systems and
antivirus software products use, to a large extent, simple
pattern matching to detect known malicious content. The
DEBs presented in this paper could be detected by such tools
if the magic value is known to the latter. This can be the
case if the attacker targets a large number of machines with
the same magic value, but is inadequate for targeted attacks.
For instance, an attacker could change the magic value for
each target machine or it would be possible to make the
magic values a time-dependent function to evade detection.
Finally, the attacker’s channel used for communication with
the ﬁrmware may be encrypted. We conclude that today’s
intrusion detection systems do not oﬀer a strong protection
mechanism against DEBs.
2Or an insecure functionality that could be abused without
physical access.
286
4.4 Page-cache-driven Integrity Checks
In addition to the standard mechanisms presented above,
one could also envision detection technique that relies on the
page cache. Most ﬁlesystems leverage the page cache to
signiﬁcantly speed up workloads by caching most recently
accessed blocks. We propose to modify the page cache to
also perform probabilistic detection of DEBs. As the cache
contains recently written data, it can be used to check the
integrity of disk-provided data.
More precisely, the cache would allocate a new entry on
write misses, and, after the data has been written to the disk
(immediately for write-through caches, and after launder-
ing for writeback caches), subsequent reads from the cache
would be randomly subject to asynchronous integrity checks.
The checks would simply read back data from the disk and
check for a match.
However, with deterministic cache-eviction algorithms such
as least recently used (LRU), both the disk and the remote
attacker could estimate the size of the cache in use, and the
attacker could adjust queries to guarantee that the data has
been evicted from the cache by the time it is read back.
Therefore, we suggest to partially randomize the cache evic-
tion policy. For instance, a good candidate would be a
randomization-modiﬁed LRU-2 algorithm, whereby the evic-
tion from the ﬁrst-level cache to the second-level cache would
remain LRU, but the eviction from the second level cache
would be uniformly random. This technique would intro-
duce a performance overhead, but we conjecture that this
could be an acceptable trade-oﬀ for detecting such back-
doors in the wild.
4.5 Detection Using Firmware Integrity Veri-
ﬁcation
Recent research in device attestation [22] could be applied
to detect malicious ﬁrmwares. However, we note that device
attestation is controversial [9], especially in the speciﬁc con-
text of this work: the ﬁrmware is typically stored in diﬀerent
regions of the drive (such as disk platters and serial ﬂash),
and accessing those diﬀerent regions is slow and subject to
various time delays. Delays are diﬃcult to predict, and this
questions standard assumptions made by existing software-
based attestation techniques, rendering them ineﬀective in
our scenario.
However, one could leverage the fact that the disk always
starts executing from the ROM code, essentially providing a
hardware root of trust. By interfacing with the ROM boot-
loader and using it to control execution and verify code load-
ing one could guarantee that only correct code was loaded.
5. RELATED WORK
Backdoors have a long history of creative implementa-
tions: Thompson [29] describes how to write a compiler
backdoor that would compile backdoors into other programs,
such as the login program, and persist when compiling fu-
ture compilers.
Many papers describe the design and implementation of
hardware backdoors. King et al. [19] present the design and
implementation of a malicious processor with a circuit-level
backdoor allowing, for example, a local attacker to bypass
MMU memory protection. Heasman presents implementa-
tions of PCI and ACPI backdoors [15, 16] that insert rootkits
into the kernel at boot time. However, with the exception
of Triulzi [30], who presented a NIC backdoor that provides
a shell running on the GPU, and contrary to our approach,
those previous backdoors were only bootstrapped from hard-
ware devices, from where they tried to compromise the host
machine’s kernel. Therefore, those kinds of backdoors can be
detected and prevented by kernel integrity protection mech-
anisms, such as Copilot [25], which is implemented as a PCI
device.
Cui et al. [11] present a ﬁrmware modiﬁcation attack on
HP LaserJet printers. The authors remark that,
in the
case of most printers, ﬁrmware updates could be performed
by sending specially-crafted printing jobs. Cui et al. also
state that ﬁrmware updates were not signed and that sign-
ing would not prove suﬃcient in the presence of exploitable
vulnerabilities, which is in line with our observations. In ad-
dition, they create, as payload, a VxWorks rootkit capable
of print job exﬁltration using the network link the printer
is connected to. However, all such communications can eas-
ily be prevented by following network-level best practices
(segregating printers into their own VLANs without direct
internet connectivity). In contrast, in this work, we focus
on hard drives and present a data-exﬁltration payload that
works without direct internet connectivity.
Concurrently and independently from our work, Domburg
(a.k.a. sprite tm) reverse-engineered a hard drive from an-
other manufacturer and also demonstrated that modifying a
hard disk ﬁrmware to insert a backdoor is feasible [2], albeit
without demonstrating data exﬁltration. This conﬁrms our
ﬁndings that reverse engineering of a hard-drive ﬁrmware is
possible and within reach of moderately funded attackers.
Other examples of data-exﬁltration attacks involving NICs
include [27], where the authors use IOAPIC redirection to
an unused IDT entry that they modify to perform data ex-
ﬁltration. More generally, remote-DMA-capable NICs (such
as InﬁniBand and iWARP) can be used to perform data
exﬁltration [28]. However, such traﬃc can equally easily be
identiﬁed and blocked by a ﬁrewall at the network boundary.
Thus, a covert channel is needed to communicate with the
backdoor, as mentioned in [12] for ICMP echo packets (inde-
pendently of any hardware backdoor). In comparison, our
approach leverages an existing channel on the backdoored
system (e.g., HTTP) and therefore cannot be easily distin-
guished from legitimate traﬃc at the network level.
6. CONCLUSION
This paper presents a practical, real-world implementa-
tion of a data exﬁltration backdoor for a SATA hard disk.
The backdoor is self-contained, requiring no cooperation
from the host.
It is stealthy, in that it only hooks legiti-
mate reads and writes, with no reliance on DMA or other
advanced features. We compromised a common oﬀ-the-shelf
disk drive with a backdoor that is able to intercept and per-
form read and write operations, with an almost impossible
to detect overhead. This backdoor can be installed by soft-
ware in very little time. We have also demonstrated that
it is feasible to build such a backdoor with an investment
of roughly ten man-months, despite diﬃculties in debugging
and reverse engineering a disk’s ﬁrmware. To mitigate the
threat, we recommend encrypting data at rest to reduce the
trust placed in the disk. We also present a number of foren-
sic techniques which can help to identify a similar backdoor,
although we emphasize that further research is needed to
catch such a backdoor in the wild.
287
7. ACKNOWLEDGEMENTS
The research leading to these results was partially funded
by the European Union Seventh Framework Programme (con-
tract N 257007) and the US National Science Foundation
(grant N 1218197).
References
[1] HDD Guru Forums, 2013.
hddguru.com/.
URL http://forum.
[2] Jeroen Domburg (a.k.a. Sprite tm). HDD Hacking.
URL http://spritesmods.com/?art=hddhack. Talk
given at OHM 2013.
[3] ARM. ARM966E-S, Revision: r2p1, Technical Refer-
ence Manual, 2004. URL http://infocenter.arm.com.
[4] backupworks.com. HDD Market Share - Rankings
in 2Q12, 2012. URL http://www.backupworks.com/
hdd-market-share-western-digital-seagate.aspx.
[5] F. Baker, B. Foster, and C. Sharp. Cisco Architecture
for Lawful Intercept in IP Networks. RFC 3924 (Infor-
mational), October 2004. URL http://www.ietf.org/
rfc/rfc3924.txt.
[6] M. Ben-Yehuda, J. Xenidis, M. Ostrowski, K. Rister,
A. Bruemmer, and L. van Doorn. The Price of Safety:
Evaluating IOMMU Performance. In The Ottawa Linux
Symposium, pages 9–20, Ottawa, Canada, 2007.
[7] E.-O. Blass and W. Robertson. TRESOR-HUNT: At-
tacking CPU-Bound Encryption.
In Annual Com-
puter Security Applications Conference, pages 71–78,
Orlando, USA, 2012. ISBN 978-1-4503-1312-4.
[8] Robert A. Caldeira, John C. Fravel, Richard G.
Hard disk
URL http://www.
Ramsdell, and Romeo N. Nolasco.
drive architecture, July 1995.
freepatentsonline.com/5396384.html.
[9] C. Castelluccia, A. Francillon, D. Perito, and C. Sori-
ente. On the diﬃculty of software-based attestation
of embedded devices.
In Conference on Computer
and Communications Security, pages 400–409, Chicago,
USA, 2009. ISBN 978-1-60558-894-0.
[10] T. Cross. Exploiting Lawful Intercept to Wiretap
the Internet. Black Hat, 2010. URL http://www.
blackhat.com/.
[11] A. Cui, M. Costello, and S.J. Stolfo. When Firmware
Modiﬁcations Attack: A Case Study of Embedded Ex-
ploitation. In Network and Distributed System Security
Symposium, 2013 (to appear).
[12] Daemon9. Project Loki. Phrack 49. URL http://www.
phrack.org/issues.html?id=6&issue=49.
[13] M. Dornseif. Owned by an iPod: Firewire/1394 Is-
sues. PacSec, http://md.hudora.de/presentations/
firewire/PacSec2004.pdf, 2004.
[16] J. Heasman.
PCI Rootkit.
//www.blackhat.com/presentations/bh-dc-07/
Heasman/Paper/bh-dc-07-Heasman-WP.pdf.
Implementing
Black Hat, 2007.
and Detecting
a
URL http:
[17] O.S. Hofmann, A.M. Dunn, S. Kim,
I. Roy, and
E. Witchel. Ensuring operating system kernel integrity
with OSck. In Conference on Architectural Support for
Programming Languages and Operating Systems, pages
279–290, Newport Beach, USA, 2011. ISBN 978-1-4503-
0266-1.
[18] IOZone.
IOZone, 2013. URL http://www.iozone.
org/.
[19] S.T. King, J. Tucek, A. Cozzie, C. Grier, W. Jiang,
and Y. Zhou. Designing and Implementing Malicious
Hardware.
In Workshop on Large-scale Exploits and
Emergent Threats, San Francisco, USA, 2008.
[20] Kingston. Secure USB Flash Drives, 2013. URL http:
//www.kingston.com/us/usb/encrypted_security.
[21] J. Larimer. Beyond Autorun: Exploiting vulnerabil-
ities with removable storage. Black Hat, 2011. URL
https://media.blackhat.com/bh-dc-11/Larimer/
BlackHat_DC_2011_Larimer_Vulnerabiliters_
w-removeable_storage-wp.pdf.
[22] Y. Li, J.M. McCune, and A. Perrig. VIPER: Verifying
the Integrity of PERipherals’ Firmware. In Conference
on Computer and Communications Security, pages 3–
16, Chicago, USA, 2011. ISBN 978-1-4503-0948-6.
[23] Maxtor.
Maxtor Basics Personal Storage 3200
virus, 2013. URL http://knowledge.seagate.com/
articles/en_US/FAQ/205131en?language=en_GB.
[24] T. M¨uller, F.C. Freiling, and A. Dewald. TRESOR
runs encryption securely outside RAM.
In USENIX
Security Symposium, pages 17–17, San Francisco, USA,
2011.
URL http://www.usenix.org/event/sec11/
tech/full_papers/Muller.pdf.
[25] N.L. Petroni Jr, T. Fraser, J. Molina, and W.A.
Copilot – a Coprocessor-based Kernel
Arbaugh.
Runtime Integrity Monitor.
In USENIX Security
Symposium, San Diego, USA, 2004. URL http:
//usenix.org/publications/library/proceedings/
sec04/tech/full_papers/petroni/petroni.pdf.
[26] RSA.
URL
RSAII-Card-Installation.
Conﬁguring the RSA II adapter, 2013.
http://www.scribd.com/doc/3507950/
[27] S. Sparks, S. Embleton, and C.C. Zou. A Chipset Level
Network Backdoor: Bypassing Host-Based Firewall &
IDS.
In Symposium on Information, Computer, and
Communications Security, pages 125–134, Sydney, Aus-
tralia, 2009. ISBN 978-1-60558-394-5.
[28] F. Sultan and A. Bohra. Nonintrusive Remote Heal-
ing Using Backdoors.
In Workshop on Algorithms
and Architectures for Self-Managing Systems, San
Diego, USA, 2003. URL http://www.cs.rutgers.edu/
~bohra/pubs/sm03.pdf.
[14] J.A. Halderman and E.W. Felten. Lessons from the
Sony CD DRM episode. In USENIX Security Sympo-
sium, pages 77–92, 2006.
[29] K. Thompson. Reﬂections on Trusting Trust. Com-
ISSN
munications of the ACM, 27(8):761–763, 1984.
0001-0782.
[15] J. Heasman.
Implementing and Detecting an
URL
Black Hat, 2006.
ACPI BIOS Rootkit.
www.blackhat.com/presentations/bh-europe-06/
bh-eu-06-Heasman.pdf.
[30] A. Triulzi. Project Maux Mk.II, I 0wn the NIC,
now I want a Shell!
In PacSec Conference, 2008.
URL http://www.alchemistowl.org/arrigo/Papers/
Arrigo-Triulzi-PACSEC08-Project-Maux-II.pdf.
288