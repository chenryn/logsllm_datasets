behavior.
VI. CASE STUDIES
While the previous section provided a basic experimental
evaluation of both the core mininig strategy and miners used
in REPRIV, this section goes more in depth using two case
studies, both evaluated on large quantities of real data. Sec-
tion VI-A talks about our search personalization experiment.
Section VI-B discusses news personalization.
A. Search Personalization
We wrote an extension that uses REPRIV’s APIs to person-
alize the results produced by the main Bing search engine. The
extension operates by observing the user’s previous behavior
on Bing, and memoizing certain aspects relevant to future
searches. Speciﬁcally, for a given search term, the extension
records which sites the user selected from the results pages,
as well as the frequency with which each host is selected in
search results (across all searches). When a new search query
is submitted, the extension checks its history of previously-
recorded searches for an identical match, and places the
previously-selected results at the top of the current ranking.
The remaining results are ranked by the frequency with which
the user visits the host of each result.
This type of search personalization is appealing for two
reasons. First, the quality of results it provides is quite good,
as discussed below. Second, it is not particularly invasive,
as it requires observing user interaction on a single domain
(bing.com). Furthermore, this information is leaked back to
no site other than Bing.com through re-arranging the result
pages of queries submitted to the search engine; if the user
has cookies enabled, then bing.com learns this information
by default. It is also important to note that information is only
leaked to bing.com if the results pages contain JavaScript
code that reﬂects on the layout of the DOM, and takes note of
the relative position of search results. This activity would not
be possible to hide from the Internet community, effectively
minimizing its risk to end-user privacy and giving bing.com
disincentive to do it.
To provide this functionality, the extension needs the fol-
lowing capabilities:
• To determine which search results the user selects from
bing.com sessions, the extension must be able to receive
onclick events from pages hosted by bing.com.
• To access a full list of search results over which it can
perform re-ranking, the extension uses a public web API.
For this, it must be able to make HTTP requests to
either bing.com, yahoo.com, or google.com (search
API providers).
• To re-arrange the results pages from bing.com,
the
extension must be able to change the TextContent of
HTML elements on bing.com, as well as well as call
change the href attribute of a elements.
• To memoize search engine interactions, the extension
must be able to write data from bing.com to the personal
store.
Implementation details: We implemented the extension
for C3 as 382 lines of Fine. The code is presented in
our corresponding technical report. The extension uses sev-
eral of the API’s exposed by REPRIV: XMLHttpRequest,
SetAttribute, SetTextContent, GetElementById, and
GetChildren. When loaded into the browser, the extension
requires approximately 200 KB of memory.
Experimental methodology: To evaluate the effectiveness of
search personalization, we utilized the histories of nineteen
users of the Bing search toolbar. Each history represents seven
months of Bing search activity. Our methodology for eval-
uating the effectiveness of search personalization algorithm
is based on the results selected by users for a given query.
For each search performed by a particular user, we split the
search history into two chronologically-contiguous halves. We
construct the relevant portions of a personal store needed to
perform search personalization using the ﬁrst half, and use
the second half to evaluate the effectiveness of the algorithm.
For each query in the second half of each trace, we evaluated
the effectiveness of our search personalization algorithm as
follows:
1) Submit the query to the Yahoo BOSS API [37], and
collect the default search result ranking.
2) Re-rank the results according to the algorithm discussed
above.
3) Note the difference in position for the search result se-
lected by the user between the default and personalized
rankings. A positive difference indicates that the se-
lected result is ranked higher in the personalized results,
whereas a negative difference indicates the opposite.
This process simulates the user’s interaction with a personal-
ized and non-personalized search engine, giving us a baseline
for comparison.
Evaluation: The results of our evaluation are summarized in
Figure 10. This histogram shows the number of positions the
user’s selected result moved towards the top of the ranking
when the search personalization extension was able to improve
results.
We found that for a given user, the extension was able
to improve results 49.1% of the time by raising the user’s
142
t
l
u
a
f
e
D
m
o
d
n
a
R
d
e
z
i
l
a
n
o
s
r
e
P
0
.
0
1
5
.
9
0
.
9
5
.
8
0
.
8
5
.
7
0
.
7
5
.
6
0
.
6
5
.
5
0
.
5
5
.
4
0
.
4
5
.
3
0
.
3
5
.
2
0
.
2
5
.
1
0
.
1
5
.
0
0
.
0
Fig. 11: News personalization effectiveness.
selected result 8.2 positions toward the top, on average. 7.7%
of the time, the extension lowered the ranking of the user’s
selected result, but when this occurred, the result was moved
downwards an average of only 2.4 positions. For the remaining
percentage of time, 43.2%, the extension had no effect on the
ranking of the user’s selected result. These results show that
our search personalization algorithm is able to provide useful
functionality for a large portion of the user’s web searching
activities, while giving the user explicit control over the way
in which personal information is used in the process.
B. News Personalization
We wrote an extension that uses REPRIV’s computed be-
havior proﬁle to personalize the New York Times front page.
The extension utilizes the collaborative ﬁltering provided by
the digg.com community by matching the user’s top interest
categories with topic names understood by Digg, and period-
ically querying its web API for “hot” stories in those topics.
When the user visits nytimes.com in their browser, New York
Times articles cached from Digg API queries are presented at
the top of the page, in place of the default headlines.
To perform this personalization, the extension needs several
capabilities.
• To query the Digg API, it must be able to send HTTP
requests to Digg and access the formatted responses
containing news stories.
• To locate the appropriate HTML elements on the
nytimes.com front page for personalized re-formatting,
the extension must be able to call GetElementById
and GetAttribute("class") on DOM nodes hosted
by nytimes.com.
• To re-format
the nytimes.com front page,
the ex-
tension must be able to change the TextContent
of nodes on nytimes.com nodes, as well as call
SetAttribute("href") on them.
• To construct the appropriate query to Digg, it must be
able to query the personal store to learn the top interests
of the user.
Implementation details: We implemented the extension for
C3 as 124 lines of Fine. The code is presented in our
corresponding technical report.
143
The extension uses several of
the API’s exposed by
REPRIV: XMLHttpRequest, GetAttribute, SetAttribute,
SetTextContent, GetTopInterests, GetElementById,
SetTimeout, and GetChildren. When loaded into the
browser,
the extension requires approximately 200 KB of
memory. When navigating to nytimes.com, we found that the
extension introduced a latency of 6% over the default loading
time without any personalization, which is a consequence of
the fact that the extension modiﬁes the DOM after initial
loading is complete. This overhead does not reﬂect the time
needed to query the Digg API, which occurs periodically in a
background thread that runs when the CPU is otherwise idle.
Experimental methodology: We performed a set of ex-
periments using Amazon’s Mechanical Turk service [25] to
demonstrate that our news personalization system does not
trivialize the problem of delivering personalized content in
fulﬁlling the goal of preserving user privacy. In other words,
we sought to show that the type of personalization offered by
our extension is relevant to internet users.
To do so, we generated 1,920 artiﬁcial behavior proﬁles. 900
of the proﬁles contained three randomly-selected user interest
topics, and the rest contained three topics related by the
same top-level ODP category. This distribution models users
with both focused and diverse interests. We then seeded our
personalization algorithm with each proﬁle, and captured an
image of the stories that would be presented by the extension.
The image contained the headline of each story, as well as a
short summary of each story, in a manner similar to the default
nytimes.com layout.
Using the images and interest proﬁles, we generated a set
of Mechanical Turk surveys. Each survey consisted of twelve
questions, where each question paired a news content image
with a potential behavior proﬁle, and asked the user how
relevant the stories presented in the image were to the given
set of interest topics, on a scale of 1 to 10. For each survey,
approximately half of the questions matched the image with
the interest proﬁle our algorithm used to generate them, and
the other half were paired randomly. Each survey contained
an additional question that paired the default nytimes.com
front page stories with a random interest proﬁle. The latter two
pairings served as our control, to determine how relevant users
found hypothetical interest proﬁles to general news stories.
Evaluation: “Personalized” denotes real pairings of person-
alized news stories to behavior proﬁles, “Random” refers to
pairings of news stories to randomly-generated behavior pro-
ﬁles that do not bear a meaningful connection, and “Default”
denotes the stories presented on the default nytimes.com
front page paired with a random behavior proﬁle. For each
column,
the statistical mean among survey responses, as
well as the surrounding vicinity of one standard-deviation, is
plotted.
As the Figure 11 indicates, respondents gave stories person-
alized with our algorithm signiﬁcantly higher relevance scores
than the control samples. For personalized content, ratings
between 6.5 and 8 recieved the most responses, with markedly
lower variance than the control. While some overlap in re-
sponse exists between personalized content and the control,
the majority of control responses mass around low relevance
scores, indicatating a clear improvement in percieved relevance
for content personalized using our algorithm.
In summary, the results of this news personalization ex-
periment show that REPRIV enables useful and effective
personalization of news content without sacriﬁcing control
over private information.
VII. DISCUSSION
In this section, we discuss issues surrounding the adoption
and feasibility of REPRIV.
Usability Concerns & Distribution Model: At some point,
the user must manually consent
to the information being
disseminated by REPRIV. The structure of core mining data
was designed to be highly informative to content providers and
intuitive for end-users: when prompted with a list of topics
that will be communicated to a remote party, most users will
understand the nature and degree of information sharing that
will take place if they consent.
However, the usability problems posed by miners is more
difﬁcult. While the privacy policies imposed on miners are
expressive and precise, it is difﬁcult to make their implications
explicit to an average user. To remedy this, we suggest a
distribution model that provides high-level policy review of
miners prior to their release, and allows for revocation. This
model
is similar to that adopted by Firefox, Apple, and
Symbian for supporting third-party functionality. The owner
of such a repository is expected to possess considerably
more technical sophistication than most browser users. Unlike
existing distribution mechanisms, the automatic veriﬁcation of
miners discussed in Section III-B allows the repository owner
to focus entirely on the high-level privacy implications of
miner policies, assured that the code cannot subvert it.
Anonimization and Privacy Modes: Recently, major
browsers have come to support some form of a “private