Cel1 = Nothing
ElseIf Keyword = *row" Then
If Table Is Nothing Then
Throw New Exception(*Invalid data: ron without table*)
Row - Table.addRow
End If
Cell = Nothing
ElseIf Keyword = *cell" Then
If Row Is Nothing Then
Throw New Exception(*Invalid data: cell without row°)
End If
Cell = Row.addCel1
Else
End If
Throw New Exception(*Parser bug: unknown keyword)
ElseIf MatchResults,Groups ("string*) -Success Then
Din Content As String = MatchResults.Groups(*string*) -Value
Content = Content.Replace("%%*, “%")
If Cell IsNot Nothing Then
Cell. addContent(Content)
ElseIf Row IsNot Nothing Then
Throw New Exception(*Invalid data: string after row keyword°)
ElseIf Table IsNot Nothing Then
Table .addCaption(Content)
Else
Throw New Exception(*Invalid data: string before table keyword")
End If
ElseIf MatchResults,Groups("error*) .Success Then
Throw New Exception("Invalid data)
Else
Throw New Exception("Parser bug: no capturing group matched")
End If
MatchResults = MatchResults.NextMatch()
If Table Is Nothing Then
End while
Throw New Exception("Invalid data: table keyword missing")
I pu3
End Function
Return Table
3.22 Construct a Parser 1 231
---
## Page 248
Java
RECTable ImportTable(String fileContents) throws Exception {
RECTable table = null;
RECRow row = null;
RECCell cell = null;
T = pxonaxdnox uT [eu
final int groupstring = 2;
final int grouperror = 3;
Pattern regex = Pattern.conpile(
\\b(table|row|cel1)\\b\n+
+ux（（x[%]x%）[%]）%1
‘.(+S\\)1
Pattern-CASE_INSENSITIVE I Pattern.COMMENTS);
Matcher regexMatcher = regex.matcher(fileContents);
while (regexMatcher find()) (
1f (regexMatcher.start(groupkeyword) >= o) {
String keyword = regexMatcher -group(groupkeyword) toLowerCase();
1f (keyword.equals(*table")(
table = new RECTable();
row = null;
}else if (keyuord.equals(“row") {
cell = null;
1f (table == nul1)
throw new Exception(*Invalid data: row without table*);
row = table.addRow();
cell = null;
}else if (keyword.equals("ce1l*){
1f (row == null)
throw new Exception(*Invalid data: cell without row");
cell = row.addcell();
} else {
throw new Exception(*Parser bug: unknown keyword");
}else if (regexMatcher,start(groupstring) >= 0) {
String content = regexMatcher -group(groupstring);
content = content.replaceAl1(*%%", "%");
if (cell != nul1)
cell. addContent(content) ;
else if (row != null)
else 1f (table I= null)
throw new Exception(*Invalid data: String after row keyword°);
table addCaption(content);
else
throw new Exception(*Invalid data: String before table keyword");
}else if (regexMatcher,start(grouperror) >= 0) {
throw new Exception("Invalid data: " +
regexMatcher -group(grouperror));
}else {
232 | Chapter 3: Programming with RegularExpressions
---
## Page 249
(upauppew dnox8 Supznqdes ou :3nq xasxed,)uotydaoxg mau mo.tq
1f (table == null)
throu new Exception("Invalid data: table keyword missing°);
return table;
JavaScript
function importTable(fileContents) {
var table = null;
var ro = null;
var cell = nul1;
var groupkeyword = 1;
var groupstring = 2;
var grouperror = 3;
8/(+s\)|%(([%]x%:)[%])|q(Ta|ox|[qe）q\/ = dxa8aAu xeA
var match;
var keyword;
while (match = myregexp-exec(fileContents)) {
var content;
1f (match[groupkeyword]!== undefined) {
keyword = natch[groupkeyword] -toLowerCase();
1f (keyword == *table){
table = new RECTable();
row = null;
cell = null;
} else if (keynord == *row") (
1f (!table)
throw nen Error("Invalid data: row without table");
row = table.addRow();
cell = null;
} else if (keyuord == “cell°) {
1f (!rom)
throw new Error("Invalid data: cell without row*);
cell = row.addcell();
} else {
throw new Exror("Parser bug: unknon keyword°);
}else if (match[groupstring]!== undefined) {
content = match[groupstring]-replace(/%%/g, “%*);
if (cel1)
else if (row)
cell. addContent(content);
throw new Error("Invalid data: string after row keyword");
else 1f (table)
table addCaption(content);
3.22 Construct a Parser  233
---
## Page 250
else
throw new Error("Invalid data: string before table keyword");
} else if (match[grouperror] == undefined) {
throw new Error("Invalid data: * + match[grouperror]);
}else {
throw new Error(*Parser bug: no capturing group matched");
}
1f (!table)
thron new Error(*Invalid data: table keyword missing");
return table;
function importTable(fileContents) 
var table = null;
var ro = null;
var cell = null;
var myregexp = XRegExp(*(?ix)\\b(?table|row|ce11)\\b" +
+x（（[%]3x）[%]）%
(?\S+)²);
XRegExp.forEach(fileContents, myregexp, function(match){
var keynord;
1f (match,keyword !== undefined) {
var content;
keyword = match,keyword. toLowerCase();
if (keyword == "table") {
table = new RECTable();
cell = null;
row = null;
} else if (keyuord == *row") {
1f (!table)
throw new Error("Invalid data: row without table");
row = table.addRow();
cell = null;
} else if (keyuord == *cell") {
1f (!ro)
throw nen Error("Invalid data: cell without row*);
}else (
cell = row.addcell();
throw new Exror("Parser bug: unknown keyword°);
}else if (match.string l== undefined) {
content = match,string-replace(/%%/g, "%");
if (cel1)
cell.addContent(content);
else if (row)
234 | Chapter 3: Programming with Regular Expressons
---
## Page 251
throw new Error("Invalid data: string after row keyuord");
else 1f (table)
table -addCaption(content);
else
throw new Error("Invalid data: string before table keyword°);
}else if (match.error != undefined) {
throw new Error("Invalid data: * + match.error);
}else {
throw new Error(“Parser bug: no capturing group matched);
}
});
1f (!table)
return table;
throu new Error(*Invalid data: table keyword missing");
Perl
sub importtable {
my $filecontents = shift;
my $table;
my Sron;
my Scell;
while ($filecontents =~
m/\b(table|xow|cel1)\b
%（（[%]xx)[%])%1
1(\5+)/ixg){
1f (defined($1)){ # Keyword
if ($keyword eq “table"){
my $keyword = 1c($1);
$table = new RECTable();
undef $row;
undef $cel1;
}elsif ($keyword eq “row") {
1f (!defined($table)) {
die "Invalid data: row without table";
$row = $table->addRow();
undef $cel1;
}elsif ($keyword eq “cell") (
1f (!defined($row)){
die "Invalid data: cell without row”;
$cell = $row->addCel1();
} else {
_pxomfax unouxun :8nq Ias.xed。 aTp
}elsif (defined($2)){# String
3.22 Construct a Parser | 235
---
## Page 252
my $content = $2;
$content =~ s/xx/%/g;
1f (defined($cell)){
$cel1->addContent($content);
}elsif (defined($xow))(
die "Invalid data: string after row keyword";
}elsif (defined($table)) {
$table->addCaption($content);
} else {
die “Invalid data: string before table keyword*;
}elsif (defined($3)){# Exror
$ :etep pTteAuI, ap
}else {
dle “Parser bug: no capturing group matched";
1f (!defined(table)) {
die *Invalid data: table keyword missing”;
f
return table;
Python
def importtable(filecontents):
table = None
xow = None
for match in re.finditer(
cell = None
"*"(?ix)\b(?Ptable |row|cel1)\b
x（（[%]%）[%]d)%
(?P\5+)"*",filecontents):
If match.group(“keyword") != None:
keyword = natch -group(*keyword") .lower()
If keyword == *table”:
row = None
table = RECTable()
ce11 = None
elif keyword == "row":
1f table == None:
raise Exception("Invalid data: row without table")
row = table.addRow()
a, -*pxoax [a
ce11 = None
1f row == None:
raise Exception("Invalid data: cell without row*)
cell = row.addcel1()
236 | Chapter 3: Programming with RegularExpressions
---
## Page 253
else:
raise Exception("Parser bug: unknoun keyword°)
elif match.group(astring") != None:
content = natch.group(*string*).replace("%%", *%")
if cel1 != None:
cell. addContent(content)
elif ron != None:
raise Exception("Invalid data: string after row keyuord")
elif table 1= None:
table.addCaption(content)
else:
raise Exception("Invalid data: string before table keyword")
elif match.group("error") != None:
raise Exception("Invalid data: * + match.group("error*)
else:
1f table == None:
raise Exception(*Parser bug: no capturing group matched")
raise Exception(*Invalid data: table keyword missing")
return table
PHP
function importTable($fileContents){
preg_match_all(
·/\b(?Ptable |row|cel1)\b
（%（[%]x)[%]gd)
1(?P\S+)/ix′,
$fileContents, $matches, PREG_PATTERN_oRDER);
$table = NULL;
$row = NULL;
$ce11 = NULL;
for ($i = 0; $i < count($matches[o]); $i++) {
1f ($matches[‘keyword’][$i]!= NULL) {
$keyword = strtolower($matches[*keyword′ ][$i]);
1f ($keyword - "table”){
$table = new RECTable();
$row = NULL;
$ce1l = MULL;
（mox == pxomaxs)asa {
1f (Stable *= NULL)