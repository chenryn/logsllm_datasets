### What is a Nimble Package?

A Nimble package is a structured way to bundle and manage resources such as images, sounds, and other files required by software, particularly useful in applications like video games. In its simplest form, a minimal Nimble package consists of a directory containing a `.nimble` file and one or more Nim modules.

#### The .nimble File

The `.nimble` file contains metadata about the package, including its name, version, author, dependencies, and more. The filename of the `.nimble` file should match the name of the package. Here is an example of a `.nimble` file:

```nim
# Package information
version = "0.1.0"
author = "Andreas Rumpf, Dominik Picheta"
description = "Example .nimble file."
license = "MIT"

# Dependencies
requires "nim >= 0.12.0"
```

- **Package Name**: The name of the package is derived from the filename of the `.nimble` file.
- **Version**: Version strings typically follow the semantic versioning specification (e.g., `0.1.0`).
- **Author**: Identifies the creators of the package.
- **Dependencies**: Specifies the required versions of other packages or the Nim compiler.

The `.nimble` file format supports a subset of Nim's features, allowing you to define variables, procedures, and even import other modules.

#### Tasks in .nimble Files

Nimble also supports defining tasks within the `.nimble` file. For example:

```nim
task test, "Run the package's tests!":
  exec "nim c -r tests/mytest.nim"
```

This task can be executed using the command `nimble test`.

### Structure of a Nimble Package

A typical Nimble package has the following structure:

- **MyPkg.nimble**: Contains the package metadata.
- **src/mypkg.nim**: Contains the Nim module(s) for the package.

For example, a package named `MyPkg` might have the following structure:

```
MyPkg/
├── MyPkg.nimble
└── src/
    └── mypkg.nim
```

### Installing Nimble Packages

#### Using the `install` Command

The `install` command is the primary method for installing Nimble packages. It can perform several actions:

- Install local packages.
- Install packages from a specified URL.
- Install a package by name.
- Install a specific version of a package.
- Install multiple packages at once.

**Installing Local Packages:**

To install a local package, navigate to the package directory and run:

```sh
nimble install
```

**Installing from a URL:**

To install a package from a URL, use:

```sh
nimble install <URL>
```

**Installing by Name:**

To install a package by name, use:

```sh
nimble install <package_name>
```

**Installing a Specific Version:**

To install a specific version of a package, use:

```sh
nimble install <package_name>@<version>
```

**Installing Multiple Packages:**

To install multiple packages, separate them with spaces:

```sh
nimble install <package1> <package2>
```

### How the `install` Command Works

When you run `nimble install`, Nimble performs the following steps:

1. **Find Download URL and Repository Type**: Nimble consults the package list to find the URL and repository type (Git or Mercurial) for the package.
2. **Download the Repository**: Nimble downloads the repository using the appropriate version control system.
3. **Parse the .nimble File**: Nimble reads and parses the `.nimble` file to verify the package's metadata and dependencies.
4. **Check Dependencies**: Nimble ensures that all required dependencies are installed. If any are missing, it installs them.
5. **Copy Files**: Nimble copies the package files to the installation directory, typically `~/.nimble/pkgs/pkg-ver`.

### Creating a Nimble Package

Creating a Nimble package involves the following steps:

1. **Choose a Name**: Select a unique and descriptive name for your package. Avoid using hyphens or at symbols (`-` or `@`).

2. **Directory Layout**: Create the necessary directory structure. For a library, place all modules in a subdirectory named after the package.

   Example:
   ```
   NimbleExample/
   ├── NimbleExample.nimble
   └── src/
       └── nimbleexample.nim
   ```

3. **Create the .nimble File**: Use the `nimble init` command to generate a `.nimble` file. You may need to edit it manually to customize the options.

4. **Open Source and Publish**: Initialize a Git or Mercurial repository and publish your package to the Nimble package list.

By following these steps, you can create, manage, and share Nimble packages effectively.