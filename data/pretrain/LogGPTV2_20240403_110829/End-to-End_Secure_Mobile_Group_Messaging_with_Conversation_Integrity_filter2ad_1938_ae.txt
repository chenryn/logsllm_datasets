### Verification and Consistency in Group Messaging Protocols

#### GOTR (Group Off-the-Record)

GOTR ensures that all users in a group conversation see the same messages. However, the paper does not provide detailed information on how this consistency is achieved. GOTR operates in a synchronous model, requiring all users to be online simultaneously to execute the Group Key Agreement (GKA) and consistency checks. This makes it unsuitable for mobile communication, where users may not always be online at the same time.

#### SYM-GOTR

SYM-GOTR is a recent proposal for synchronous end-to-end secure group conversations, sharing similar properties with our work. It is compatible with existing XMPP servers and requires a client plugin. The protocol involves the following steps:

1. **Pairwise Secure Channels**: Participants first establish pairwise secure channels among all participants.
2. **Key Sharing**: Participants share symmetric key inputs and verification keys.
3. **Message Encryption**: When Alice sends a message, she computes a symmetric encryption key by hashing all the symmetric key input material from other participants and encrypts the message.
4. **Broadcasting**: The ciphertext is broadcast to all participants.
5. **Consistency Check**: Upon receiving the ciphertext, all participants perform a two-phase consistency check over the pairwise secure channels:
   - **First Phase**: Verifies that all users have received the ciphertext.
   - **Second Phase**: Identifies any users who have misbehaved in the first phase.

**Modifications and Limitations**:
- Adding or removing participants involves distributing new symmetric key inputs and verification keys.
- All participants must be online simultaneously, and the two-phase interactive consistency check introduces additional delays in message processing.

#### Signal

Signal is the most widely deployed protocol for secure mobile messaging. Recent formal analyses [7], [4], [9] have identified several security properties, but also vulnerabilities related to participant consistency and conversation integrity in both two-party and group conversations.

**Group Conversation Protocol**:
1. **Pre-Key Registration**: When Alice registers with the Signal server, she uploads pre-keys, allowing Bob to execute an X3DH (Extended Triple Diffie-Hellman) two-party key agreement with her while she is offline.
2. **Group Setup**: When Bob wants to start a conversation with Alice and Charlie, he fetches a pre-key for each, executes the X3DH key agreement, and sends a secure "Group Setup" message to each.
3. **Message Sending**: Each message is sent by setting up or ratcheting forward a two-party symmetric key with every pair of users, then sending an encryption of the conversation message to each user individually.
4. **Receipts**: When Alice receives a group message from Bob, she sends a receipt back to Bob. Bob's phone indicates the message was delivered upon receiving the first receipt.

**Limitations**:
- Lack of conversation consistency: Charlie cannot verify if Alice has received Bob’s message.
- No enforced order of messages.

#### Asynchronous Ratcheting Trees (ART)

ART is a group key agreement protocol with forward and backward secrecy, including post-compromise security. It allows a single user to set up the group key while others are offline, making it asynchronous. ART forms a DH tree where the root node is the group key.

**Key Features**:
- **Bootstrapping**: Uses secure two-party channels similar to NAXOS two-party channels.
- **Group Setup**: Participants are added one at a time, forming a DH tree.
- **Complexity**: Setting up a group is O(n), and performing a single user key ratchet is O(log(n)).

**Limitations**:
- Only a group key agreement, not a full messaging protocol.
- Lacks authentication of message authors, support for dynamic groups, and conversation integrity.

### Conclusion

In this work, we addressed the challenge of practical end-to-end secure mobile messaging with support for group conversations. We identified a mobile messaging model and demonstrated that:
1. Multiple servers are necessary to provide strong conversation integrity.
2. Message unlinkability requires messages to be O(n) in size and provide pairwise unlinkability.

We showed that, given an any-trust multiple-server model, a relatively simple protocol, Mobile CoWPI, can achieve these security properties while being practically efficient. We provided proofs of the security of Mobile CoWPI and analyzed the performance of a Java implementation with groups of varying sizes, showing that the protocol performs well under realistic internet latencies.

### References

[1] C. Alexander and I. Goldberg, “Improved user authentication in off-the-record messaging,” in Proceedings of the 2007 ACM workshop on Privacy in electronic society. ACM, 2007, pp. 41–47.

[2] M. Bellare and C. Namprempre, “Authenticated encryption: Relations among notions and analysis of the generic composition paradigm,” J. Cryptol., vol. 21, no. 4, pp. 469–491, Sep. 2008. [Online]. Available: http://dx.doi.org/10.1007/s00145-008-9026-x

[3] N. Borisov, I. Goldberg, and E. Brewer, “Off-the-record communication, or, why not to use pgp,” in Proceedings of the 2004 ACM workshop on Privacy in the electronic society. ACM, 2004, pp. 77–84.

[4] K. Cohn-Gordon, C. Cremers, B. Dowling, L. Garratt, and D. Stebila, “A formal security analysis of the signal messaging protocol,” in Security and Privacy (EuroS&P), 2017 IEEE European Symposium on. IEEE, 2017, pp. 451–466.

[5] K. Cohn-Gordon, C. Cremers, L. Garratt, J. Millican, and K. Milner, “On ends-to-ends encryption: Asynchronous group messaging with strong security guarantees,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 1802–1819.

[6] M. Di Raimondo, R. Gennaro, and H. Krawczyk, “Deniable authentication and key exchange,” in Proceedings of the 13th ACM conference on Computer and communications security. ACM, 2006, pp. 400–409.

[7] T. Frosch, C. Mainka, C. Bader, F. Bergsma, J. Schwenk, and T. Holz, “How secure is textsecure?” in Security and Privacy (EuroS&P), 2016 IEEE European Symposium on. IEEE, 2016, pp. 457–472.

[8] I. Goldberg, B. Ustao˘glu, M. D. Van Gundy, and H. Chen, “Multi-party off-the-record messaging,” in Proceedings of the 16th ACM conference on Computer and communications security. ACM, 2009, pp. 358–368.

[9] N. Kobeissi, K. Bhargavan, and B. Blanchet, “Automated verification for secure messaging protocols and their implementations: A symbolic and computational approach,” in IEEE European Symposium on Security and Privacy (EuroS&P), 2017.

[10] F. Laguillaumie and D. Vergnaud, “Multi-designated verifiers signatures,” in International Conference on Information and Communications Security. Springer, 2004, pp. 495–507.

[11] B. LaMacchia, K. Lauter, and A. Mityagin, “Stronger security of authenticated key exchange,” in Provable Security. Springer, 2007, pp. 1–16.

[12] linode, https://linode.com/.

[13] H. Liu, E. Y. Vasserman, and N. Hopper, “Improved group off-the-record messaging,” in Proceedings of the 12th ACM workshop on Workshop on privacy in the electronic society. ACM, 2013, pp. 249–254.

[14] M. Marlinspike, “Facebook messenger deploys signal protocol end to end encryption,” 2016. [Online]. Available: https://whispersystems.org/blog/facebook-messenger/

[15] ——, “Open whisper systems partners with google on end-to-end encryption for allo,” 2016. [Online]. Available: https://whispersystems.org/blog/allo/

[16] M. Marlinspike and T. Perrin, “The x3dh key agreement protocol,” 2016. [Online]. Available: https://whispersystems.org/docs/specifications/x3dh/

[17] P. Rogaway, “Nonce-based symmetric encryption,” in International Workshop on Fast Software Encryption. Springer, 2004, pp. 348–358.

[18] P. Rössler, C. Mainka, and J. Schwenk, “More is less: On the end-to-end security of group chats in signal, whatsapp, and threema,” 2018.

[19] M. Schliep, I. Kariniemi, and N. Hopper, “Is bob sending mixed signals?” in Proceedings of the 2017 on Workshop on Privacy in the Electronic Society. ACM, 2017, pp. 31–40.

[20] M. Schliep, E. Vasserman, and N. Hopper, “Consistent synchronous group off-the-record messaging with sym-gotr,” Proceedings on Privacy Enhancing Technologies, vol. 2018, no. 3, pp. 181–202, 2018.

[21] O. W. Systems, Open Whisper Systems, https://whispersystems.org/.

[22] P. Syverson, R. Dingledine, and N. Mathewson, “Tor: The second-generation onion router,” in Usenix Security, 2004.

[23] N. Unger, S. Dechand, J. Bonneau, S. Fahl, H. Perl, I. Goldberg, and M. Smith, “Sok: Secure messaging,” in Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 2015, pp. 232–249.

[24] WhatsApp, 2017. [Online]. Available: https://www.whatsapp.com/security

### Appendix

#### Security Assumptions

We assume that our symmetric AEAD scheme provides indistinguishable ciphertexts from random bit strings (IND$-CPA) and ensures ciphertext integrity (INT-CTXT). The advantage of an adversary \( M \) winning these games is defined as \( \text{Adv}_{\text{IND-CPA}}(M) = \Pr[M \text{ wins}] - \frac{1}{2} \) and \( \text{Adv}_{\text{INT-CTXT}}(M) = \Pr[M \text{ wins}] \).

#### NAXOS Protocol

We assume the NAXOS protocol is a secure authenticated key agreement. The game used by the original authors is modified to include an additional bit string into the EPHEMERAL KEY REVEAL and TEST queries, which is included in the input of KDF2 of NAXOS. This modification allows the Mobile CoWPI session ID to be incorporated into the KDF without affecting the security of NAXOS.

An adversary wins if it issues a TEST on a clean session and guesses correctly in FINALIZE. A session is not clean if any of the following conditions hold:
- A or B is an adversary-controlled party.
- REVEAL is queried on sid or sid*.
- sid* exists, and both the long-term and ephemeral keys of A or B are revealed.
- sid* does not exist, and the long-term key of B is revealed, or both the long-term and ephemeral keys of A are revealed.

The advantage of an adversary \( M \) at winning the NAXOS game is defined as \( \text{Adv}_{\text{NAXOS}}(M) = \Pr[M \text{ wins}] - \frac{1}{2} \).

#### Message Confidentiality

Message confidentiality ensures that only conversation participants can read a message. The adversary controls the network, can register malicious users, and reveal long-term and ephemeral keys. The game for message confidentiality is described in Figure 6.

**Game Steps**:
1. **Initialization**: The adversary initializes with a set of honest user identities. The challenger sets up the PKI and generates long-term keys for the honest users.
2. **Network Messages**: The adversary can send network messages, instruct users to setup sessions, send group messages, and update participants.
3. **Key Reveal**: The adversary can reveal long-term and ephemeral secret keys of any participant or server.
4. **Test Query**: The adversary issues a single TEST query, and the challenger flips a coin to send either the encrypted message or a random ciphertext.
5. **Finalization**: The adversary calls FINALIZE, providing its guess of the bit. The adversary wins if it guesses correctly.

To prevent trivial winning, the adversary is not allowed to:
- Control a participant in the target session at the time of the target message.
- Call REVEALLONGTERMKEYS and REVEALEPHEMERALKEYS of the sender \( P \) and a receiving participant \( R \neq P \) in session Sid.

The advantage of an adversary \( M \) is defined as \( \text{Adv}_{\text{conf}}(M) = \Pr[M \text{ wins}] - \frac{1}{2} \).

**Theorem A.1**: Mobile CoWPI provides message confidentiality if all hash and key derivation functions are modeled as random oracles.