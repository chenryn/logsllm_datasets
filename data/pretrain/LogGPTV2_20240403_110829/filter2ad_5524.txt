# Quantitative Network Monitoring with NetQRE

**Authors:**
- Yifei Yuan (University of Pennsylvania, Carnegie Mellon University)
- Dong Lin (University of Pennsylvania, LinkedIn Inc.)
- Ankit Mishra (University of Pennsylvania)
- Sajal Marwaha (University of Pennsylvania)
- Rajeev Alur (University of Pennsylvania)
- Boon Thau Loo (University of Pennsylvania)

## Importance of Network Monitoring
Network monitoring is crucial for various security and performance-related tasks, including:
- **Security:**
  - Detecting heavy hitters
  - Identifying super spreaders
  - Detecting SYN flood attacks
  - Identifying Slowloris attacks
  - And more...
- **Performance:**
  - Analyzing traffic matrices
  - Measuring application usage
  - And more...

## Current Low-level Programming Abstraction
Today's network monitoring often involves low-level programming abstractions. For example:
```cpp
state s = s0;
Upon receiving packet p {
    s = update(s, p);
    output d = decide(s);
}
```
This approach requires manual state management and can be complex to implement and maintain.

## Motivating Example: VoIP Monitoring
### Example Policy:
1. Monitor the average number of VoIP calls per user.
2. Alert a user if their number of calls exceeds a threshold.

### Requirements:
- **Stateful:** Maintain state to track VoIP sessions with each incoming packet.
- **Quantitative:** Compute numerical aggregates based on past history and across users.

### Key Questions:
- What low-level state should be maintained?
- How should it be updated?

## NetQRE Overview
NetQRE provides a stream-level abstraction for network monitoring, enabling modular programming and automatic state management.

### Key Features:
- **Automatic State Inference:** Automatically infers and manages the necessary state.
- **Efficient State Update:** Efficiently updates state as new packets arrive.
- **Automatic Optimization:** Optimizes the monitoring query implementation.

## Outline
1. Motivation
2. NetQRE Language
3. NetQRE Compiler
4. Implementation
5. Evaluation

## Modular Programming of VoIP Monitoring
### Input:
- Packet stream from all users.

### Output:
- Average number of VoIP calls per user.

### Procedure:
1. **Step 1:** Focus on the packet stream from an arbitrary user \( x \).
2. **Step 2:** Identify each VoIP call in the stream.
3. **Step 3:** Aggregate across all calls in the stream of the user.
4. **Step 4:** Aggregate across all users.

### Step 1: Filter Packet Stream of User \( x \)
```cpp
filter(usr=x)
```
- This step filters out packets from other users, focusing only on those from user \( x \).

### Step 2: Identify a Call
- **Pattern Specification:**
  ```cpp
  re_call = [invite] [200] [ack] [data]* [BYE] [200]
  ```
- **Numerical Association:**
  ```cpp
  call = re_call?1
  ```

### Step 3: Aggregate over All Calls
- **Aggregation:**
  ```cpp
  call_usr(x) = iter(call, sum)
  ```

### Step 4: Aggregation over All Users
- **Final Aggregation:**
  ```cpp
  avg{ call_usr(x) | User x }
  ```

## Requirements and Key Ideas
### Requirements:
- **Pattern Matching:** Recognize traffic patterns.
- **Arbitrary Value Handling:** Handle unknown values.
- **Quantitative Aggregations:** Perform numerical aggregations.

### Key Ideas:
- **Regular Expression (RE):** For pattern matching.
- **Parametric Extension:** Extend RE to handle parameters.
- **Quantitative Extension:** Extend RE to handle numerical values.

## NetQRE Language
### Regular Expressions
- **Atoms:** Letters (e.g., `a`, `b`).
- **Base RE:** Atoms.
- **Union:** `f | g`
- **Concatenation:** `f âˆ˜ g`
- **Kleene Star:** `f*`

### NetQRE
- **Atoms:** Predicates over packets (e.g., `[srcip==x]`, `[dstip!=10.0.0.1]`).
- **Base NetQRE:** `re ? v`
- **Choice:** `re ? f : g`
- **Split:** `split(f, g, aggop)`
- **Iteration:** `iter(f, aggop)`
- **Aggregation over Parameter:** `aggop{ f(x) | Type x }`
- **Streaming Composition:** `f >> g`

## Stream Split: `split(f, g, aggop)`
- **Functions:** `f` and `g` are NetQRE functions.
- **Aggregation Operator:** `aggop` (e.g., `sum`, `avg`, `max`, `min`).
- **Substreams:** Split the stream into two substreams `s1` and `s2`.
- **Result:** `aggop(f(s1), g(s2))`

## NetQRE Compilation
### Goal:
- Evaluate queries online with minimal state, independent of the packet stream length.

### Insights:
- **Regular Expression Compilation:** Leverage compilation of regular expressions to Deterministic Finite Automata (DFA).
- **Parameter Handling:** Use lazy instantiation.
- **Online Evaluation:** Keep a bounded number of possible cases for `split(f, g, aggop)` and `iter(f, aggop)`.

## Implementation
- **Deployment:** Single-node deployment.
- **Compiler:** Implemented in C++.
- **Compiled Code:** C++.
- **Packet Capturing:** Using the `pcap` library.
- **Real-time Response:** Ensures real-time processing of traffic.

## Evaluation
### Questions:
- Is the NetQRE language expressive?
- Is the NetQRE compiled implementation efficient?

### Expressiveness
- **Examples:**
  - Heavy hitter detection
  - Super spreader detection
  - Entropy estimation
  - Flow size distribution
  - Traffic change detection
  - Count traffic
  - Completed flows
  - SYN flood detection
  - Slowloris detection
  - Connection lifetime
  - Newly opened connections
  - Number of duplicated ACKs
  - Number of VoIP calls
  - VoIP usage
  - DNS tunnel detection
  - DNS amplification

- **Conciseness:**
  - NetQRE: 6-18 lines of code (LoC)
  - Manual implementation: 100+ LoC
  - Compiled implementation: 100-1000+ LoC

### Throughput
- **Comparison:**
  - Baseline vs. NetQRE
  - 9% reduction in throughput

### Memory
- **Comparison:**
  - Baseline vs. NetQRE
  - ~40% increase in memory usage

## Conclusion
- **Motivation:** Network monitoring requires high-level abstractions.
- **Contributions:**
  - Stream-level programming abstraction
  - Parametric and quantitative extensions to regular expressions
  - Expressive language for capturing a wide range of monitoring policies
  - Efficient compiled implementation in terms of throughput and memory
- **Future Work:**
  - Hardware implementation
  - Distributed deployment of NetQRE programs