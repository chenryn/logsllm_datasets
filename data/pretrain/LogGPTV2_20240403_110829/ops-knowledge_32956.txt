User: 在Kubernetes集群中，如何部署一个容器应用，并配置它的资源限制和必要的环境变量？
Assistant: 1. 创建一个部署 Manifest 文件，指定容器镜像和运行参数，例如：

```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app
        image: my-app-image:latest
        env:
        - name: DATABASE_URL
          value: "postgres://user:password@postgres:5432/mydb"
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.25"
            memory: "256Mi"
```

2. 将 Manifest 文件应用到 Kubernetes 集群中：

```
kubectl apply -f my-app.yaml
```

这将创建一个名为 `my-app` 的 Deployment，其中包含 3 个副本，每个副本都运行一个名为 `my-app` 的容器镜像。容器镜像中将会有一个名为 `DATABASE_URL` 的环境变量被设置。此外，容器的 CPU 和内存资源限制也被设置为 `0.5/512Mi` 和 `0.25/256Mi`。

3. 查看部署的状态：

```
kubectl get deployment my-app
```

这将返回部署的详细信息，包括副本数、可用副本数、所在节点等。

4. 查看部署的 Pod：

```
kubectl get pods -l app=my-app
```

这将返回包含 `my-app` 标签的 Pod 列表，即 Deployment 所创建的副本。

5. 查看 Pod 中容器的资源使用情况：

```
kubectl top pod <pod-name>
```

这将返回 Pod 内容器的 CPU 和内存占用情况。

通过以上步骤，完成了在 Kubernetes 集群中部署一个带有资源限制和环境变量的容器应用。