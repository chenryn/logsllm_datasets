keystroke. The images are labeled in the order in which
they will be displayed, and thus reveal nothing of the
shared secret. Using the onkeydown event handler a
new image is displayed every time the use types a key.
With the method of Section 3.4 no action is needed until
the user submits.
In any of the three cases, when the user clicks the
“Submit” button on the entire obscured password string
gets uploaded to the webserver. This will be the pass-
word embedded in junk characters, or an encrypted ver-
sion of the password, depending on the entry method.
The webserver extracts the true password from the ob-
scured string and stores it temporarily for retrieval by
the proxy. The password is XORed with a user-speciﬁc
salt that was assigned at registration time.
The last action of the webserver is to instruct the
user’s browser to open actualLogin: using the onclick
event for the “Submit” button we can use, for example
the Javascript command http://www.bigbank.com/login.
4.4 KLASSP proxy
Recall that all connections for the browser pass through
the proxy. As our foundation we used the Fiddler de-
bugging proxy version 2.0.5.0 [2], which allows inter-
ception of all sessions, including those that are SSL en-
crypted. Fiddler also provides a Jscript scripting mech-
anism that allows ﬁltering and altering requests and
responses. While we have used Fiddler, we point out
that several other debugging proxies also allow modiﬁ-
cation of requests and responses; see, for example Paros
[3] and BurpSuite [4].
Observe from Figure 5 that, while it sits as a MITM
in all of the actions of the browser,
it is only after
the obscured password has been uploaded to the web-
server that the proxy starts to play a vital rˆole. When
the user retrieves the page actualLogin (e.g. http:
//www.bigbank.com/login) the request and response
both ﬂow through the proxy (Steps 5 and 6). Recall,
that actualLogin is the target login page, and thus
contains a both a userid and password form ﬁeld. At
this point the proxy scripts populate these ﬁelds before
passing them to the browser. The userid is populated
with the actual userid which has been deposited in the
database, while the password ﬁeld is populated with the
string “roguepwd.” To replace the password we merely
search for an replace the string type=‘‘password’’
with type=‘‘password’’ value=‘‘roguepwd’’. This
is done in the onBeforeReponse handler provided by
Fiddler; this handler allows us to edit responses coming
back from a server beﬁre they are passed to the browser.
To replace the userid value, we do similarly. However,
the userid is merely a text ﬁeld, and there may be sev-
eral on the page, so the string type=‘‘text’’ is not suf-
ﬁcient to indicate that we have found the right one. The
userid ﬁeld has an id that can be diﬀerent for diﬀerent
sites; for example at PayPal it is id=‘‘login email’’
and at WellsFargo it is id=‘‘SSN’’. Rather than man-
ually determine the string for each possible login site
we maintain a cumulative list of the id of the userid
ﬁelds for all of the login sites encountered so far. We
ﬁnd that the number of distinct labels is far fewer than
the number of sites (e.g.the id “SSN” is common). If
any of these labels is found we replace, for example
id=‘‘login email’’ with id=‘‘login email’’
value=‘‘ userid ’’, where userid is the actual userid
retrieved from the database. If this fails, and the userid
ﬁeld has a label we have not previously encountered,
we enter the userid as value for every text ﬁeld on the
page. This will have the eﬀect of populating every text
ﬁeld, including Search and any others present with the
userid. Since only the login form will be submitted,
these extra entries in other form ﬁelds will be ignored
when the user submits the login form. Note that by
populating the login form ﬁelds in the HTML response
from the login server we avoid the diﬃculties of the
Javascript same-origin policy.
8
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Figure 5: The sequence of steps logging in using the KLASSP proxy. See Section 4.1
Thus when actualLogin opens on the user’s machine
it is pre-populated with the correct userid, but a rogue
value password. Obviously we could not place the ac-
tual password in the page returned to the user, as this
would deliver the unobscured password. The reason
for the rogue value password is that many login pages
perform scripting checks to prevent submission of the
form if the password ﬁeld is empty. The user now clicks
the submit button on actualLogin. This request again
ﬂows through the proxy, and on this step the proxy re-
places the rogue value password with the password re-
trieved from the database (XORed once again with the
user speciﬁc salt). This is done in the onBeforeRequest
handler provided by Fiddler, which allows editting of
requests as they are passwed from browser to server.
From this point on the proxy merely acts as a MITM
between the user’s browser and the end site. It main-
tains an SSL connection to the user and another to the
end site.
4.5 Certiﬁcates
When a browser is SSL connected it displays certiﬁ-
cate information to the user. Generally this will give
details of which Certiﬁcate Authority (CA) issued, and
the details of the recipient institution. When our proxy
is running as a MITM it also must act as a CA, and
all of the certiﬁcates will show up as being issued by
the proxy. The user will get warnings that about this,
but can merely click “OK” to proceed. The only way
of preventing this is to explicitly declare the proxy as
a trusted issuer of certiﬁcates for that browser. This
is a simple process, but has several steps. On an in-
ternet kiosk machine the user may not have privilege
to declare the proxy CA trusted. Thus we view the
certiﬁcate warnings as an unavoidable annoyance. The
number of certiﬁcate warnings displayed to the user de-
pends on the site being visited and the browser; it can
as few as one, or as many as seven.
4.6 Registration
To use the service the user must register to establish
the shared secret to be used to obscure and un-obscure
the password. This is a separate service also hosted
by the web server. At registration the user is assigned
a shared secret, a position and symbol in the case of
Section 3.1, and encryption table in the case of Section
3.4, or uploads personal images in the case of Section
3.2. The user also speciﬁes the urls of the institutions
where she will login, and her userids at each of these
institutions. Any of the pairs userid and url uniquely
identiﬁes the user. This allows the web server to retrieve
the correct shared secret without having to ask the user
to authenticate herself (typing a password to get access
to the service would defeat the whole purpose).
4.7 Burden of maintenance and Trust
A diﬀerence between our system and an in-the-cloud
password management system is that the passwords do
not have to be maintained on the server. We believe
this carries two advantages. First, the burden of main-
tenance on the user is lower. Using a credential man-
agement system (CMS), the user must maintain all of
the credentials; if she changes her PayPal password, she
must then also update the record at the CMS. The user
of our system by contrast is not required to maintain
anything. She registers for the service once, and is as-
signed a shared secret. If she employs the image based
interface she uploads images once. She need maintain
nothing, and can still use the service after a gap of
months or years so long as she can successfully distin-
guish her L images from the 4L randomly assigned ones.
Secondly, a CMS must be trusted much more than our
system. A rogue employee at a CMS might have access
to all of the credentials of all of the users of the system.
9
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006A rogue employee at a service running our system by
contrast would have to wait for passwords as they come
in one at a time. The user of a CMS must trust the
service entirely with all of the credentials she uploads.
This is true whether she subsequently uses the service
or not. The user of our system must trust the system
with only the passwords of sites that she logs into, and
she does this only when the alternative is trusting an
internet kiosk machine.
4.8 Self-Hosting
In-the-cloud password management systems such as
Passport and LPWA have been hosted by large servers
and served many users. There is no reason, however,
that the entire KLASSP system cannot be hosted on a
machine maintained by the user herself, and dedicated
to serving only her. Exactly such a self-host model is
employed by Impostor [13]. Using this approach a user
who has a ﬁxed IP address on her home machine might
host both proxy and webserver there, and login to Big-
Bank using her home machine as a MITM proxy. This
entirely obviates the need to trust any intermediary,
and removes the single point of attack that a popular
centralized webserver might represent.
5. CONCLUSION
We have presented a new approach to entering a pass-
word on a spyware infected machine. We use a shared
secret to obscure the password as typed, and a proxy
to map back to the actual password. Obscuring the
password can be done in various ways. We investigate
two possible solutions. The ﬁrst solution insert random
characters between the true password characters by us-
ing a pre-agreed secret prompt. The secret prompt can
be either a symbol and position in a table, or images up-
loaded by the user. The second solution employs man-
ual encryption using a pre-printed table. In either case,
a proxy is the used to compute the actual password, ei-
ther by stripping the random keys in the ﬁrst solution,
or by inverting the key mapping in the second case. The
second is more secure, but requires that the user carry
and consult a printed substitution table.
To the question of whether one can enter passwords
securely from a compromised machine thus the answer
appears to be a qualiﬁed “Yes.” The qualiﬁcation is
that each of the schemes we presented burdens the user
with a more involved interface than the conventional
web login. Nonetheless we think they are the most
promising directions for simple password entry from un-
trusted machines. The diﬃculty of mounting a collusion
attack on a password entered on a public machine makes
this problem far more tractable that it appears on the
ﬁrst glance.
Acknowledgements: The authors thank Nikita Pandey
for assistance in implementing a version of the proxy.
10
6. REFERENCES
[1] http://labs.zarate.org/passwd/.
[2] http://www.fiddlertool.com.
[3] http://www.parosproxy.org.
[4] http://www.portswigger.net/proxy.
[5] W. Cheswick. Johnny Can Obfuscate: Beyond
Mother’s Maiden Name. In Proc. Usenix HotSec,
2006.
[6] R. Dhamija and J. D. Tygar. The battle against
phishing: Dynamic security skins. Symp. on
Usable Privacy and Security, 2005.
[7] Dinei Florˆencio and Cormac Herley. How To
Login From an Internet Caf´e without Worrying
about Keyloggers. Symp. on Usable Privacy and
Security, 2006.
[8] E. Gaber, P. Gibbons, Y. Matyas, and A. Mayer.
How to make personalized web browsing simple,
secure and anonymous. Proc. Finan. Crypto ’97.
[9] J. A. Halderman, B. Waters, and E. Felten. A
convenient method for securely managing
passwords. Proceedings of the 14th International
World Wide Web Conference (WWW 2005).
[10] H. Langweg. With Gaming Technology towards
Secure User Interfaces . ACSAC, 2002.
[11] S. McClure, J. Scambray, and G. Kurtz. Hacking
Exposed. McAfee, ﬁfth edition, 2005.
[12] P. Oorschot and S. Stubblebine. Countering
identity theft through digital uniqueness, location
cross-checking, and funneling. Financial
Cryptography, 2005.
[13] A. Pashalidis and C. J. Mitchell. Impostor: A
single sign-on system for use from untrusted
devices. Proceedings of IEEE Globecom, 2004.
http://impostor.sf.net.
[14] R. Rivest. Chaﬃng and Winnowing:
Conﬁdentiality without Encryption. 1998. http:
//theory.lcs.mit.edu/∼rivest/chaffing.txt.
[15] B. Ross, C. Jackson, N. Miyake, D. Boneh, and
J. C. Mitchell. Stronger password authentication
using browser extensions. Proceedings of the 14th
Usenix Security Symposium, 2005.
[16] S. Saroiu, S. D. Gribble, and H. M. Levy.
Measurement and Analysis of Spyware in a
University Environment. Proc. NSDI, 2004.
[17] B. Schneier. Applied Cryptography. Wiley, second
edition, 1996.
[18] E. Skoudis and L. Zeltser. Malware: Fighting
Malicious Code. Prentice Hall, 2004.
[19] D. Tan, P. Keryana, and M. Czerwinski.
Spy-resistant keyboard: more secure password
entry on public touch screen displays. CHISIG’05.
[20] Y.-M. Wang, D. Beck, X. Jiang, and R. Roussev.
Automated Web Patrol with Strider
HoneyMonkeys. MSR Tech Report, 2005.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006