# Combining Error Masking and Error Detection Plus Recovery to Combat Soft Errors in Static CMOS Circuits

**Authors: Srivathsan Krishnamohan and Nihar R. Mahapatra**

**Email:** {krishn37, nrm}@egr.msu.edu  
**Department of Electrical & Computer Engineering**  
**Michigan State University, East Lansing, MI 48824, U.S.A.**

## Abstract

Soft errors, which are changes in the logic state of a circuit or system resulting from the latching of single-event transients (SETs) caused by high-energy particle strikes or electrical noise, are becoming increasingly significant due to technology scaling and reduced supply voltages. This paper presents an efficient and systematic approach to combat soft errors in combinational and sequential logic circuits. The key features of our approach include:
1. Utilizing error masking in non-critical paths and error detection plus recovery in critical paths, thereby reducing the overhead for error correction.
2. Achieving an average 93% reduction in soft-error rate (SER) by tolerating SETs with widths approximately half the clock period.
3. Offering trade-offs between area and power overheads and SER reduction based on application requirements.

We also introduce two additional techniques to more aggressively utilize slack in circuits and further improve SER reduction:
1. Exploiting the circuit delay dependence on input vectors.
2. Redistributing slack in pipelined circuits.

## 1. Introduction

### 1.1. Background and Motivation

Soft errors are transient functional failures in static CMOS circuits caused by electrical noise or external radiation, particularly high-energy neutron strikes. Recent studies indicate that the contribution of logic circuits to the total chip SER (estimated at 60%) exceeds that of unprotected SRAMs (40%). This necessitates an efficient design approach to make static CMOS logic circuits resilient to soft errors without adversely affecting other design considerations such as power, performance, and cost.

### 1.2. Related Work

Traditional techniques for providing soft-error tolerance, such as triple modular redundancy (TMR), involve high overheads in terms of area and cost, limiting their use to reliability-critical applications. Time redundancy-based techniques, such as RE-computing using duplication with comparison (REDWC) and RE-computing with triplication and voting, have been proposed to reduce these overheads. However, they still suffer from significant performance overheads and limitations, such as not tolerating single-event multiple upsets (SEMUs).

Concurrent or online error detection (CED) schemes, which use output characteristic predictors, have also been explored. These include parity prediction, self-checking circuits, transition count, and residue checking. Techniques like Razor, which use an extra latch to sample the circuit output, can detect and recover from errors but have limitations when handling soft errors due to particle strikes.

Error masking, which corrects errors online, has been used to tackle soft errors. A technique presented in [9] uses sampling and majority voting within the available slack, resulting in zero performance overhead. However, this technique is less effective for circuits with few non-critical paths. Other approaches, such as quadruple time redundancy and error correction codes, have lower overheads for arithmetic units but are not cost-effective for random logic circuits.

### 1.3. Scope and Contributions

In this work, we combine error masking in non-critical paths with error detection and recovery in critical paths to enhance the soft error robustness of static CMOS logic circuits. Our contributions include:
1. Tolerating SETs with widths approximately half the clock period by combining error masking and detection.
2. Using efficient circuits to sample and vote on the circuit output, delay contamination paths, and prevent SEMUs from affecting sampled values.
3. Configuring the various techniques to meet specific application requirements.

We also present techniques to improve slack in circuits by:
- Exploiting the circuit delay dependence on input vectors.
- Redistributing slack in pipelined circuits based on the SER contribution of individual paths.

The rest of the paper is organized as follows. Section 2 discusses different ways to combine error masking with error detection. Section 3 presents methods to increase the effectiveness of error masking by utilizing input value characteristics. Section 4 introduces techniques to redistribute slack in pipelined circuits to reduce the total SER. Section 5 describes the simulation setup and presents results obtained with ISCAS85 circuits. Finally, Section 6 concludes the paper.

## 2. Techniques to Combine Error Masking and Error Detection

To improve the soft-error protection provided by the error masking technique, we propose doing only error detection in short-slack paths. This allows detecting SETs up to twice the width of nominal pulses masked by error correction schemes. By combining error detection in critical paths with error masking in non-critical paths, we achieve improved SER reduction.

However, traditional error detection schemes require recomputation to recover from errors, leading to high costs. To address this, we present a novel technique that combines both error detection and majority voting on a single path to provide sufficient soft-error protection for all circuits.

### 2.1. Error Detection and Correction in a Single Path

For error detection and correction (EDAC) on a single path, we sample the path output or primary output (PO) three times and perform a majority vote among the sampled values. If an error is detected, the correct value from the error correction circuitry is injected into the pipeline in the next clock cycle. The maximum slack available for sampling in a path where EDAC is used is given by:

\[ S_{\text{max}} = 2 \cdot T - (t_{\text{pd,worst}} + t_{\text{D-CLK}} + t_{\text{D-C2}} + t_{\text{C2-fb}}) \]

where \( t_{\text{pd,worst}} \) is the worst-case propagation delay, \( t_{\text{D-CLK}} \) and \( t_{\text{D-C2}} \) are the setup time requirements for the first and third samples, and \( t_{\text{C2-fb}} \) is the delay from signal C2 going high to the output of the multiplexer in the feedback path settling.

If the slack available while using error masking alone is sufficient, sampling and majority voting can be done within the available slack. Otherwise, EDAC should be applied, requiring the use of a modified flip-flop as shown in Fig. 1.

### 2.2. Delaying Short Paths

When error masking is done within a single clock period, short paths do not affect the sampled values. For paths where sampling extends into the next cycle, the PO should not change until the final sampling time. This can be achieved by adding control transistors P1 and N1 to the PO gate, as shown in Fig. 2(a).

### 2.3. Circuits for Error Detection and Correction

The flip-flop used for sampling the PO values within the available slack was described in [9]. The master stage samples the PO values three times, while the majority voter is embedded into the slave stage. The flip-flop for performing both error detection and correction on a single path is shown in Fig. 1. The first sampling is done at \( t_1 \), and D1 is latched by the CLK signal. Signals C1 and C2 go high corresponding to sampling times \( t_2 \) and \( t_3 \), respectively. If a SET occurs, D1 could latch and pass the wrong value to the next pipeline stage. If the width of the SET is shorter than the available slack, it will be corrected by the majority voter.

---

This optimized version of the text is more structured, coherent, and professional, making it easier to read and understand.