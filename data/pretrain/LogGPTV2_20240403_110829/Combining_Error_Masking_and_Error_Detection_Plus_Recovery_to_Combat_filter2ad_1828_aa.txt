title:Combining Error Masking and Error Detection Plus Recovery to Combat
Soft Errors in Static CMOS Circuits
author:Srivathsan Krishnamohan and
Nihar R. Mahapatra
Combining Error Masking and Error Detection Plus Recovery
to Combat Soft Errors in Static CMOS Circuits∗
Srivathsan Krishnamohan and Nihar R. Mahapatra
E-mail: {krishn37, nrm}@egr.msu.edu
Department of Electrical & Computer Engineering
Michigan State University, East Lansing, MI 48824, U.S.A.
Abstract
Soft errors are changes in logic state of a circuit/system
resulting from the latching of single-event transients (tran-
sient voltage ﬂuctuations at a logic node or SETs) caused by
high-energy particle strikes or electrical noise. Due to tech-
nology scaling and reduced supply voltages, they are ex-
pected to increase by several orders of magnitude in logic
circuits. In this work, we present a very efﬁcient and system-
atic approach to cope with soft errors in combinational and
sequential logic circuits. The features and merits of our ap-
proach are: (1) use of error masking in non-critical paths
along with error detection and recovery in critical paths,
which substantially lowers overhead for error correction;
(2) average 93% soft-error rate (SER) reduction as SETs of
width approximately half the clock period time can be toler-
ated; (3) area and power overheads can be traded-off with
SER reduction based on application requirements. We also
present two additional techniques to more aggressively uti-
lize slack in circuits and further improve SER reduction by:
(1) exploiting circuit delay dependence on input vectors and
(2) redistributing slack in pipelined circuits.
1. Introduction
1.1. Background and motivation
Soft errors are changes in logic state resulting from the
latching of single-event transients (transient voltage ﬂuctu-
ations at a logic node or SETs) caused by electrical noise
or external radiation. In this paper, we are concerned with
static CMOS circuit soft errors, which are transient func-
tional failures due to electrical noise or external radiation.
Although most of our discussion applies to soft errors due to
either source, our focus is on radiation-induced errors, par-
ticularly, those resulting from high-energy neutron strikes.
∗
This research was supported by U.S. National Science Foundation
grant # 0102830.
The smallest deposited charge required at a gate to cre-
ate an SET pulse that results in a soft error, if it is not
logically or latching-window masked, is called the criti-
cal charge Qcrit of the SET propagation path. Recent stud-
ies have shown that in designs manufactured using state-of-
the-art technology, SER contribution of logic circuits to to-
tal chip SER (estimated at 60%) exceeds the contribution
of unprotected SRAMs (40%) [1]. This necessitates an ef-
ﬁcient design approach for static CMOS logic circuits that
would make them soft-error resilient without adversely af-
fecting other design considerations such as power, perfor-
mance, and cost.
1.2. Related work
Traditional techniques to provide soft-error tolerance
rely on triple modular redundancy (TMR), in which the
original circuit is triplicated and a majority voter used to de-
termine the ﬁnal output. However, this technique involves
high overhead (> 200%) in terms of area and cost, which
limits its usage to reliability-critical applications. To over-
come, the high overhead of TMR, various time redun-
dancy based techniques for error detection and correction
have been proposed. RE-computing using duplication with
comparison (REDWC) was proposed to overcome transient
faults in a 32-bit adder [2]. Another time redundancy vari-
ant of TMR, called RE-computing with triplication and vot-
ing was proposed in [3]. This technique is applicable only to
arithmetic operations and has 200% performance overhead.
A more general approach for soft-error tolerance based on
time redundancy was presented in [4]. The time domain ma-
jority voter presented in [4] has a performance overhead
since the sampling is started after the longest path in the cir-
cuit settles. Also, the time domain majority voter does not
tolerate single-event multiple upsets (SEMUs). Hence, an
online error detection and retry procedure was considered
better [5].
Concurrent or online error detection (CED) schemes use
an output characteristic predictor which is then compared
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
(using a checker) with actual circuit output to detect an er-
ror [6]. The output characteristic predictor can be imple-
mented using hardware or time redundancy. Some of the
schemes used for CED are parity prediction, self-checking
circuits constructed using error detection codes, transition
count and residue checking [7]. Self checking circuits may
require high hardware cost for arbitrary logic functions. Ef-
ﬁcient techniques to do error detection of soft errors due to
particle strikes and delay faults were presented in [5, 8]. In
both techniques an extra latch (called shadow latch in Ra-
zor [8]) is used to sample the circuit output. The ﬁrst sam-
ple is stored in the main pipeline ﬂip-ﬂop at the rising edge
of the clock at T, while the second sample is stored half a
clock cycle later in the shadow latch. This means any tran-
sient pulse with width less than T
2 is detected as an error.
Razor recovers from the error by restoring the value stored
in shadow latch into the main ﬂip-ﬂop, while the work pre-
sented in [5] suggests re-doing the computation to get the
correct value. Implementing recomputation requires storing
the current state and executing the program from an instruc-
tion not affected by the soft error. Also, recomputation re-
quires many clock cycles, very high area and energy over-
head, and is difﬁcult to implement in modern super-scalar
processors due to complex circuitry required. The present
version of Razor works very efﬁciently for delay faults, but
there are certain limitations when it is used for handling soft
errors due to particle strikes. In the case of Razor, if a par-
ticle strike had altered the value stored in the shadow latch,
then restoring this value would result in a wrong circuit out-
put. As particle strikes are uniformly distributed in time,
there is equal probability of a particle strike affecting ei-
ther the main ﬂip-ﬂop or shadow latch. Moreover, a parti-
cle strike in the combinational logic circuit can also change
the value stored in the shadow latch. Hence, restoring the
value from the shadow latch does not reduce the probabil-
ity of soft error occurrence due to a particle strike on the
latch or in the combinational logic circuit.
Error masking, which refers to error correction on-line,
has also been used to tackle soft errors. An error mask-
ing technique, without any performance overhead, was pre-
sented in [9]. The sampling and majority voting were done
within the slack available in a circuit, which results in zero
performance overhead. The technique presented in [9] has
a very small ratio of the SER reduction to area and per-
formance overhead, for circuits with few non-critical paths.
Moreover, the non-idealities of the sampling latch such as
the setup time, clk-q delay and the majority voter delay
reduce the total slack available in a circuit path for sam-
pling and voting. Error masking can be done using error
correction codes or schemes such as quadruple time redun-
dancy [10]. Both these schemes have lower overhead for
arithmetic units, such as an adder, than for random logic cir-
cuits, for which they are not very cost effective.
Prior efforts have also focused on latch design for mit-
igating soft errors [11, 12], combinational logic design for
preventing pulse spreading [13], gate sizing to prevent SET
generation (which requires performance overhead) [14].
Our technique uses a delay line that is common to one or
more combinational logic blocks (CLBs) as opposed to a
delay line within each latch as done in [12]. The latch de-
sign in [11] requires resistor insertion to slow down the in-
put stage, which incurs both performance and area penalty.
Time redundancy based architectural approaches also have
signiﬁcant performance and power overheads and design
time cost [15].
1.3. Scope and contributions of our work
In our work, we combine error masking in non-critical
paths along with error detection and recovery in critical
paths to improve the soft error robustness of static CMOS
logic circuits. In case an error has been latched into the
pipeline, we correct or recover from the error within a sin-
gle clock cycle. The advantages of these techniques are: (1)
If the error masking technique is used alone, it prevents an
SET pulse of width less than approximately half of the slack
available in the propagation path from latching and turn-
ing into a soft error. However, if the error detection tech-
nique is used in combination with error correction, SET of
width approximately half the clock period time can be toler-
ated. Moreover, error detection and correction (EDAC) can
be used in circuits with no slack, to provide soft error pro-
tection without any performance overhead, as compared to
the techniques presented in [9]. (2) Use of efﬁcient circuits
to sample and vote on the circuit output, delay contamina-
tion paths, and prevent single event multiple upsets (SE-
MUs) from affecting sampled values. (3) The various tech-
niques presented can be conﬁgured to meet the application
requirements.
Techniques to improve slack in circuits such as: (i) Ex-
ploiting circuit delay dependence on input vectors, (2) Re-
distributing slack in pipelined circuits based on SER con-
tribution of individual paths, are also presented. The SER
reduction and the overhead required for the different tech-
niques are presented, so that any designer can select the ap-
propriate method depending on the application targeted.
The rest of the paper is organized as follows. Sec. 2 talks
about different ways in which error masking can be com-
bined with error detection to improve soft-error protection.
Sec. 3 presents ways to increase the effectiveness of the er-
ror masking technique by utilizing the input value character-
istics of a circuit. In Sec. 4, we present techniques to redis-
tribute slack in a pipelined circuit to reduce the total SER.
Sec. 5 describes the simulation setup and presents results
obtained with ISCAS85 circuits, and ﬁnally Sec. 6 con-
cludes.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
2. Techniques to combine error masking and
error detection
One way to improve the soft-error protection provided
by the error masking technique of [9] is to do only error
detection in short-slack paths. Error detection requires sam-
pling only twice within the slack available. Therefore, SETs
up to twice the width of nominal pulses masked by error
correction schemes can be detected. Thus, the error detec-
tion in critical paths can be combined with error masking
in non-critical paths to provide improved SER reduction.
However, as explained in Sec. 1.2, the costs of applying
such error detection schemes are high due to recomputation
required to recover from errors. To overcome these draw-
backs, we present a novel technique exploiting both error
detection and majority voting on a single path to provide
sufﬁcient soft-error protection for all circuits.
2.1. Error detection and correction in a single path
We ﬁrst explain the technique for doing EDAC on a sin-
gle path, then explain where EDAC needs to be used, as
opposed to error masking alone, analyze the overhead re-
quired, and then present techniques to reduce the overhead.
In the EDAC technique, to do error correction, we sample
the path output or primary output (PO) three times and do
a majority voting among the sampled values. As error de-
tection is also done, sampling is extended till the end of
the next clock cycle. Once an error is detected, the correct
value from the error correction circuitry is injected into the
pipeline in the next clock cycle. All time instants in the fol-
lowing discussion regarding the sampling time t1, t2, and t3
are speciﬁed in terms of the elapsed time after a cycle be-
gins. To better understand the discussion that follows, the
reader is referred to Fig. 1 which presents the latch used for
sampling. The PO is sampled at time t1, t2, and t3 to pro-
duce D1, D2, and D3. Let T denote the cycle time. To tol-
erate the maximum transient pulse width, the time interval
t3 − t1 must be maximum, with t2 − t1 = t3 − t2. The max-
imum slack (Smax) available for sampling in a path (where
EDAC is used) is given by:
Smax = 2· T − (tpd,worst + tD−CLK + tD−C2 + tC2−f b).
(1)
In eqn. 1, tpd,worst is the worst case propagation delay in
the path, while tD−CLK and tD−C2 are the setup time re-
quirement for the ﬁrst and third sample (D1 & D3, respec-
tively) in the sampling latch, tC2−f b is the delay from sig-
nal C2 going high to the output of multiplexor in the feed-
back path settling, which includes the majority voter delay.
The setup time tD−CLK is deﬁned as the D-to-CLK off-
set that causes a wrong value to be latched at D1, while
setup time tD−C2 is deﬁned as the minimum D-to-C2 off-
set that causes the D3 settling delay to be 5% higher than its
nominal value.
In the ideal case, the ﬁrst sampling can be done im-
mediately after the worst case output settling time, and
t3 = 2 · T − (tCLK−Q), while the second sampling is
done at the middle of the time interval between t3 and t1.
One of the sampled values needs to be passed onto the next
pipeline stage, hence one of the sampling times is ﬁxed at
time T. D1 is sampled at time T, as this enables the maxi-
mum pulse width to be tolerated. Based on the worst case
propagation delay of the path, we offer the following guide-
lines for choosing the soft-error protection scheme in a path.
• The slack available in a path while using error mask-
ing alone is given by:
Smax = T−(tpd,worst+tD−C1+tD−CLK+tCLK−Q).
(2)
The effective transient pulse width that can be tol-
erated is then Smax/2. If the transient pulse width tol-
erated is sufﬁcient then sampling and majority voting
can be done within the slack available.
• If error masking done within the slack available in a
circuit does not provide sufﬁcient soft-error protection,
then EDAC should be done in a path. This requires the
use of the modiﬁed ﬂip-ﬂop shown in Fig. 1. The ﬁrst
1 = T − tD−CLK and
and third sampling are done at t(cid:1)
3 = 2 · T − (tC2−f b). The second sampling can be
t(cid:1)
done at t(cid:1)
. The error detection is done by
XORing samples latched at t(cid:1)
(cid:1)
(cid:1)
2 = t
1+t
3
2
1 and t(cid:1)
2.
2.2. Delaying short paths
Whenever, error masking is done within a single clock
period time, short paths in the circuit do not affect the sam-
pled values. In paths where sampling extends into the next
cycle (such as when EDAC is applied), PO should not be al-
lowed to change till t(cid:1)
3. This can be done by adding control
transistors P1 and N1 to the PO gate as shown in Fig. 2(a).
The transistors P1 and N1 are controlled by the same phase
shifted clock signals used to latch D3, but with opposite
polarity. The PO gate starts evaluating only when C2 and
C(cid:1)
2 go high and low, respectively, during which time D3 is
latched.
2.3. Circuits for error detection and correction
The ﬂip-ﬂop used for sampling the PO values within the
slack available in a circuit was described in [9]. The mas-
ter stage samples the PO values thrice, while majority voter
is embedded into the slave stage of the ﬂip-ﬂop. The ﬂip-
ﬂop for doing both error detection and error correction on
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
a single path is given in Fig. 1. As the ﬁrst sampling of the
PO is done at t(cid:1)
1, D1 is latched by CLK signal. The sig-
nals C1 and C2 go high corresponding to sampling time t(cid:1)
2
and t(cid:1)
3, respectively. The slave stage passes the value latched
at time T, i.e. D1, to the next pipeline stage. Due to a SET,
D1 could have latched and passed on the wrong value to the
next pipeline stage. If the width of the SET is shorter than