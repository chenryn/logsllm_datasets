software can invoke an exception by executing an SVC (for
“supervisor call”) instruction. This same mechanism is used
to create a system call in a traditional OS.
C. Memory Protection Unit
ARMv7-M devices have a Memory Protection Unit or MPU
which can be used to set read, write, or execute permissions
on regions of the physical memory. The MPU is similar to
an MMU, but it does not provide virtual memory addressing.
In effect, the MPU adds an access control layer over the
physical memory but memory is still addressed by its physical
addresses. The MPU deﬁnes read, write, and execute privileges
for both privileged and unprivileged modes. It also enables
making regions of memory non executable (“execute never”
in ARM’s terminology). It supports setting up to 8 regions,
numbered from 0 to 7, with the following restrictions: (1) A
region’s size can be from 32 Bytes to 4 GBytes, in powers of
two; (2) Each region must be size-aligned (e.g., if the region
is 16KB, it must start on a multiple of 16KB); (3) If there is
a conﬂict of permissions (through overlapping regions), then
the higher numbered region’s permissions take effect. Figure 3
illustrates how memory permissions are applied.
Fig. 3. Diagram illustrating how the protection regions (R-x) deﬁned in
the MPU by EPOXY are applied to memory. Legend shows permissions
and purpose of each region. Note regions R1-R3 (not shown) are developer
deﬁned.
For the remainder of this paper we will use the follow-
ing notations to describe permissions for a memory region:
(P-R?W ?,U-R?W ?,X| −?) which encodes read and write per-
missions for privileged mode (P), unprivileged mode (U),
and execution permission for both privileged and unprivileged
mode. For example, the tuple (P-RW,U-R,X) encodes a region
as executable, read-write for privileged mode and executable,
read-only access for unprivileged mode. Note, execute per-
missions are set for both privileged and unprivileged mode.
For code to be executed, read access must be granted. Thus,
unprivileged code can be prevented from executing a region
by removing read access to it.
D. Background Summary
Current bare-metal system design exposes a large attack
surface—memory corruption, code injection, control-ﬂow hi-
jack attachs, writing to security-critical but system-speciﬁc IO,
and modiﬁcation of registers crucial for system operation such
as the SCB and MPU conﬁguration. Execution privilege modes
and the MPU provide the hardware foundation that can be used
to develop techniques that will reduce this vast attack surface.
However, the development assumption that all instructions and
all memory locations are accessible is in direct conﬂict with
the security requirements, as some instructions and memory
accesses can exploit the attack surface and need to be re-
stricted. Next we present the design of our solution EPOXY,
which resolves this tension by using privilege overlays, along
with various diversiﬁcation techniques to remove the attack
surface.
IV. DESIGN
EPOXY’s goal is to apply system speciﬁc protections to
bare-metal applications. This requires meeting several require-
ments: (1) Protections must be ﬂexible as protected areas
vary from system to system; (2) The compiler must enable
the enforcement of policies that protect against malicious
code injection, code reuse attacks, global data corruption, and
direct manipulation of IO; (3) Enforcement of the policies
must satisfy the non-functional constraints—runtime, energy
usage, and memory usage should not be signiﬁcantly higher
292
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
than in the baseline insecure execution. (4) The protections
should not cause the application developers to make changes
to their development workﬂow and ideally would involve no
application code changes.
EPOXY’s design utilizes four components to apply pro-
tections to bare-metal systems, while achieving the above
four goals. They are: (1) access controls which limit
the
use of speciﬁc instructions and accesses to sensitive memory
locations, (2) our novel privilege overlay which imposes the
access control on the unmodiﬁed application, (3) an adapted
SafeStack, and (4) diversiﬁcation techniques which utilize all
available memory.
A. Access Controls
Access controls are used to protect against code injection
attacks and defend against direct manipulation of IO. Access
controls specify the read, write, and execute permissions
for each memory region and the instructions which can
be executed for a given execution mode. As described in
Section III, modern micro-controllers contain an MPU and
multiple execution modes. These are designed to enable DEP
and to restrict access to speciﬁc memory locations. We utilize
the MPU and multiple execution modes to enforce access
controls in our design. Using this available hardware, rather
than using a software only approach, helps minimize the
impact on runtime, energy consumption, and memory usage.
On our target architecture, IO is handled through memory-
mapped registers as well and thus, the MPU can be used to
restrict access to sensitive IO. The counter argument to the
use of the MPU is that it imposes restrictions—how many
memory regions can be conﬁgured (8 in our chosen ARM
architecture) and how large each region needs to be and
how it should be aligned (Section III-C). However, we still
choose to use the MPU and this explains in part the low
overhead that EPOXY incurs (Table II). While the MPU and
the processor execution modes can enforce access controls at
runtime they must be properly conﬁgured to enable robust
protection. We ﬁrst identify the proper access controls and
how to enforce them. We then use the compiler to generate
the needed hardware conﬁguration to enforce access controls
at runtime. Attempts to access disallowed locations trap to a
fault handler. The action the fault handler takes is application
speciﬁc, e.g., halting the system, which provides the strongest
protects as it prevents repeated attack attempts.
The required access controls and mechanisms to enforce
them can be divided into two parts: architecture dependent and
system speciﬁc. Architecture-dependent access controls: All
systems using a speciﬁc architecture (e.g., ARMv7-M) have
a shared set of required access controls. They must restrict
access to instructions and memory-mapped registers that can
undermine the security of the system. The instructions that
require execution in privileged mode are speciﬁed in the pro-
cessor architecture and are typically those that change special-
purpose registers, such as the program status register (the MSR
and CPS instructions). Access to these instructions is limited
by executing the application by default in unprivileged mode.
Memory-mapped registers, such as the MPU conﬁguration
registers, and interrupt vector offset register, are common to
an architecture and must be protected. In our design, this is
done by conﬁguring the MPU to only allow access to these
regions (registers) from the privileged mode.
System-speciﬁc access controls: These are composed of
setting W ⊕ X on code and data, protection of the alias
control register, and protecting any sensitive IO. W⊕X should
be applied to every system; however, the locations of code
and data change from system to system, making the required
conﬁguration to enforce it system speciﬁc. For example, each
micro-controller has different amounts of memory and a devel-
oper may place code and data in different regions, depending
on her requirements. The peripheral that controls the aliased
memory is also system speciﬁc and needs protection and thus,
access to it should be set for the privileged mode only. Last,
what IO is sensitive varies from system to system and only
the subset of IO that is sensitive need be restricted to the
privileged mode.
To simplify the implementation of the correct access con-
trols, our compiler generates the necessary system conﬁgura-
tion automatically. At the linking stage, our compiler extracts
information (location, size, and permissions) for the code
region and the data region. In addition, the developer provides
on a per-application basis information about the location and
size of the alias control register and what IO is sensitive.
The compiler then uses this information, along with the
architecture-speciﬁc access controls,
to generate the MPU
conﬁguration. The MPU conﬁguration requires writing the
correct bits to speciﬁc registers to enforce the access controls.
Our compiler pass adds code to system startup to conﬁgure the
MPU (Figure 3 and Table I). The startup code thus drops the
privileges of the application that is about to execute, causing
it to start execution in unprivileged mode.
B. Privilege Overlay
We maintain the developer’s assumption of access to all
instructions and memory locations by using a technique that
we call, privilege overlay. This technique, identiﬁes all instruc-
tions and memory accesses which are restricted by the access
controls—referred to as restricted operations—and elevates
just these instructions. Conceptually, this is like overlaying
the original program with a mask which elevates just those
instructions which require privileged mode. In some ways,
this privilege overlaying is similar to an application making
an operating system call and transitioning from unprivileged
mode to privileged mode. However, here, instead of being
a ﬁxed set of calls which operate in the operating system’s
context, it creates a minimal set of instructions (loads and
stores from and to sensitive locations and two speciﬁc instruc-
tions) that execute in their original context (the only context
used in a bare-metal application execution) after being given
permissions to perform the restricted operation. By elevating
just
those instructions which perform restricted operations
through the privilege overlay, we simplify the development
293
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
process and by carefully selecting the restricted operations,
we limit the power of a write-what-where vulnerability.
Privilege overlaying requires two mechanisms: A mecha-
nism to elevate privileges for just the restricted operations
and a mechanism to identify all
the restricted operations.
Architectures employing multiple execution modes provide
a mechanism for requesting the execution of higher level
software. On ARM, this is the SVC instruction which causes
an exception handler to be invoked. This handler checks if the
call came from an authorized location, and if so, it elevates
the execution mode to the privileged mode and returns to the
original context. If it was not from an authorized location,
then it passes the request on to the original handler without
elevating the privilege, i.e., it denies the request silently. The
compiler identiﬁes each restricted operation and prepends it
with a call to the SVC handler and, immediately after the
restricted operation, adds instructions that drop the execution
privileges. Thus, each restricted operation executes in priv-
ileged mode and then immediately returns to unprivileged
mode.
The restrictions in the way MPU conﬁguration can be spec-
iﬁed, creates challenges for EPOXY. The MPU is restricted
to protecting blocks of memory of size at least 32 Bytes,
and sometimes these blocks include both memory-mapped
registers that must be protected to ensure system integrity,
and those which need to be accessed for correct functionality.
For example, the Vector Table Offset Register (VTOR) and
the Application Interrupt and Reset Control Register (AIRCR)
are immediately adjacent to each other in one 32 Byte region.
The VTOR is used to point to the location of the interrupt
vector table and is thus a security critical register, while the
AIRCR is used (among other things) for the software running
on the device to request a system reset (say, to reload a new
ﬁrmware image) and is thus not security critical. There is no
way to set permissions on the VTOR without also applying
the same permissions to the AIRCR. EPOXY overcomes this
restriction by adding accesses to the AIRCR to the privilege
overlay, thus elevating accesses whenever the AIRCR is being
accessed.
C. Identifying Restricted Operations
To identify restricted operations we utilize static analysis
and optionally, source code annotations by the developer.
Using static analysis enables the compiler to identify many of
the restricted operations, reducing the burden on the developer.
We use two analyses to identify restricted operations; one
for restricted instructions and a second to identify restricted
memory accesses. Restricted instructions are deﬁned by the
Instruction Set Architecture (ISA) and require execution in
privileged mode. For the ARMv7-M architecture these are the
CPS and MSR instructions, each of which controls speciﬁc
ﬂags in the program status register, such as enabling or
disabling interrupt processing. These privileged instructions
are identiﬁed by string matching during the appropriate LLVM
pass. Identifying restricted memory accesses however is more
challenging.
An important observation enables EPOXY to identify most
restricted accesses. In our case, the memory addresses being
accessed are memory-mapped registers. In software,
these
accesses are reads and writes to ﬁxed addresses. Typically,
a Hardware Abstraction Layer (HAL) is used to make these
accesses. Our study of HAL’s identiﬁed three patterns that
cover most accesses to these registers. The ﬁrst pattern uses
a macro to directly access a hard-coded address. The second
pattern uses a similar macro and a structure to access ﬁxed
offsets from a hard-coded address. The last pattern uses a
structure pointer set to a hard-coded address. All use a hard-
coded address or ﬁxed offsets from them. The use of hard-
coded addresses, and ﬁxed offsets from them, are readily
identiﬁable by static analysis.
Our static analysis uses backward slicing to identify these
accesses. A backward slice contains all instructions that af-
fect
the operands of a particular instruction. This enables
identifying the potential values of operands at a particular
location in a program. We limit our slices to a single function
and examine only the deﬁnitions for the address operand of
load and store operations. Accesses to sensitive registers are
identiﬁed by checking if the address being accessed is derived
from a constant address. This static analysis captures many of
the restricted memory accesses; however, not all accesses can
be statically identiﬁed and manual annotations (likely by the
developer) are required in these cases. Note that we observed
few annotations in practice and most are generic per hardware
platform, i.e., they can be provided by the manufacturer. This
primarily occurs when memory-mapped registers are used as
arguments in function calls or when aliasing of memory-
mapped registers occurs. Aliasing occurs when the register
is not directly referenced, but is assigned to a pointer, and
multiple copies of that pointer are made so that the register is
now accessible via many different pointers. These point to two
limitations of our current static analysis. Our backward slicing
is limited to a single function and with some bounded engi-
neering effort, we can expand it to perform inter-procedural
analysis. To overcome the second limitation though requires
precise alias analysis, which is undecidable in the general case
[50]. However, embedded programs—and speciﬁcally access
to memory mapped registers—are constrained in their program
structures reducing the concern of aliasing in this domain.
D. Modiﬁed SafeStack
EPOXY defends against control-ﬂow hijacking attack by
employing SafeStack [40], modiﬁed to bare-metal systems.
SafeStack is a protection mechanism that uses static analysis to
move local variables which may be used in an unsafe manner
to a separate unsafestack. A variable is unsafe if it may access
memory out-of-bounds or if it escapes the current function. For
example, if a supplied parameter is used as the index of an
array access, the array will be placed on the unsafestack. It
utilizes virtual addressing to isolate the unsafestack from the
rest of the memory. By design, return addresses are always
placed on the regular stack because they have to be protected
from illegal accesses. SafeStack ensures that illegal accesses
294
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
may only happen on items on the unsafestack. In addition
to its security properties, Safestack has low runtime overhead
(generally below 1% [40] §5.2) and a deterministic impact
on stack sizes makes it a good ﬁt for bare-metal systems.
The deterministic impact means—assuming known maximum
bounds for recursion—the maximum size for both the regular
and unsafestack is ﬁxed and can be determined a priori. Use
of recursion without knowing its bounds is bad design for
bare-metal systems.
While the low runtime overhead of SafeStack makes it
suitable for bare-metal systems, it needs an isolated memory
region to be effective. The original technique, deployed on
Intel architectures, relied on hardware support for isolation
(either segmentation or virtual memory) to ensure low over-
head. For example, it made the safe region accessible through
a dedicated segment register, which is otherwise unused, and
conﬁgured limits for all other segment registers to make the
region inaccessible through them (on x86). Such hardware
segment registers and hardware protection are not available
in embedded architectures. The alternate pure software mech-
anism based on Software Fault Isolation [56] would be too
expensive for our embedded applications because it requires
that all memory operations in a program are masked. While on
some architectures with a large amount of (virtual) memory,
this instrumentation can be lightweight (e.g., a single and
operation if the safe region occupies a linear part of the address
space – encoded in a mask, resulting in about 5% overhead),
here masking is unlikely to work because the safe region
will occupy a smaller and unaligned part of the scarce RAM
memory.
Therefore, to apply the SafeStack principle to bare-metal
systems, we place the unsafestack at the top of the RAM, and
make the stack grow up, as shown in Figure 4a. We then place
a guard between the unsafestack and the other regions in RAM,
shown as the black region in the ﬁgure. This follows best
practices for embedded systems to always grow a stack away
from other memory regions. The guard is created as part of
the MPU conﬁgurations generated by the compiler. The guard
region is inaccessible to both privileged and unprivileged
code (i.e., privileges are (P-,W-,XN)). Any overﬂow on the
unsafestack will cause a fault either by accessing beyond the
bounds of memory, or trying to access the guard region. It
also prevents traditional stack smashing attacks because any
local variable that can be overﬂown will be placed on the
unsafestack while return addresses are placed on the regular
stack. Our design for the ﬁrst
time provides strong stack
protection on bare-metal embedded systems.
V. IMPLEMENTATION
A. Access Controls
We developed a prototype implementation of EPOXY,
building on LLVM 3.9 [42]. In our implementation, access
controls are speciﬁed using a template. The template consists
of a set of regions that map to MPU region conﬁgurations
(see Section III-C for the conﬁguration details). Due to current
hardware restrictions, a maximum of 8 regions are supported.
295
THE MPU CONFIGURATION USED FOR EPOXY. FOR OVERLAPPING
REGIONS THE HIGHEST NUMBERED REGION (R) TAKES EFFECT.
TABLE I
R
0
4
5
6
7
Permissions
P-RW,U-RW,XN
None
P-RW,U-R,XN
P-RW,U-R,XN
P-R,U-R,X
Start Addr
0x00000000
Varies
0xE000E000