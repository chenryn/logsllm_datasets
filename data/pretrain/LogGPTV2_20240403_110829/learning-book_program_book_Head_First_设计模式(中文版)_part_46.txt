这似乎是一个更好的方案。我们依然可以返回一个选代器，客户不
用再担心返回值是否为null。我们等于是创建了一个选代器，其作
用是“没作用”。
当然第二个选择看起来比较好。让我们称它为空迭代器，下面是它的实
现：
这是你所看过最衡的选代器，什
import java.util.Iterator;
么事情都不做。
public class NullIterator implements Iterator (
public Object next(){
当next（）被调用时.返回null。
return null;
public boolean hasNext() {
最重要的，当hasNext（）被调用时
return false;
永远返回talse。
public void remove(){
空进代器当然不支持
throw new UnsupportedoperationException() ;<
temove.
372
第9章
---
## Page 409
选代器与组合模式
给我素食菜单
现在，我们已经有一种方式可以遍历菜单的每个项了。让我们
为女招待加上一个可以确切地告诉我们哪些项目是素食的方法。
public class Waitress {
MenuComponent allMenus;
public Waitress (MenuComponent allMenus) (
this.allMenus = allMenus;
ptint Vegetarin Menx(）方法取得atMenus
的组合并得到它的选代器来作为我们的
public void printMenu()(
CompositeSterator
allMenus.print () ;
public void printVegetarianMenu()(
Iterator iterator =allMenus.createIterator(）;
遍历组合内的每个元
System.out.println("\nVEGETARIAN MENU\n--
while（iterator.hasNext())(
意。
E
MenuComponentmenuComponent=
(MenuComponent)iterator.next();
调用每个元素的isVesetarian(方法
tryl
if（menuComponent.isVegetarian())(
如果为true，就调用它的ptint(）方法。
menuComponent.print();
)catch（UnsupportedOperationException e）()
只有莱单项的print（）方法可以被
调用，绝对不能调用莱单（组
合）的print（）方法。你能说出原
因吗？
我们在莱单上实现isVegetarian(）方法，让它永
远抛出异常。如果异常果真发生了，我们就
捕提这个异常，然后继续遍历。
你现在的位置
373
---
## Page 410
选代器和组合凑在一起的魔力
迭代器和组合凑在一起的魔力··
我们可是费了好大一番工夫才走到这里的。现在我们已经有了一个总菜单结构，可以应对未来餐
饮帝国的成长需求了。现在让我们坐下休息一会儿，顺便点些素食来吃吧：
java MenuTestDrive
素舍菜单内包含了每个菜单内的
VEGETARIAN MENU
素舍项。
K&B's Pancake Breakfast（v),2.99
Blueberry Pancakes(v),3.49
-Pancakes made with fresh blueberries,and blueberry syrup
Waffles（v),3.59
Waffles,with your choice of blueberries or strawberries
Vegetarian BLT（v),2.99
（Fakin'）Bacon with lettuce & tomato on whole wheat
Steamed Veggies and Brown Rice（v),3.99
--Steamedvegetables over brown rice
Pasta(v),3.89
-- Spaghetti with Marinara Sauce, and a slice of sourdough bread
Apple Pie（v)，1.59
Apple pie with a flakey crust，topped with vanilla ice cream
Cheesecake（v),1.99
--Creamy New York cheesecake，with a chocolate graham crust
Sorbet（v),i.89
--A scoopof raspberry and a scoop of 1ime
ApplePie（v),1.59
Apple pie with a flakey crust,topped with vanilla ice cream
Cheesecake（v)，1.99
Creamy New York cheesecake,with a chocolate graham crust
Sorbet（v),1.89
--A scoop of raspberry anda scoop of lime
Veggie Burger and Air Fries（v),3.99
--Veggie burger on a whole wheat bun,lettuce,tomato，and fries
Burrito（v),4.29
--A large burrito,with whole pinto beans,salsa,guacamole
374
第9章
---
## Page 411
选代器与组合模式
我注意到在你的printVegetarianMenu（）方法内，
你使用了try/eatch来处理那些不支持isVegetarian（）方
法的菜单的还辑。我老是听人家说这不是一个好
的编程形式。
我们调用全部MenaComponext的
你说的是这个吧：
isVesetarian（）方法，但是
try{
Menz会抛出一个异常因为它
if (menuComponent.isVegetarian())(
们不支持这个操作。
menuComponent.print() ;
1
}catch (UnsupportedOperationException) ()
如果莱单组件不支持这个操作，那我
们就对这个异常置之不理。
一般来说，我们同意你的看法；try/catch是一种错误处理的
方法，而不是程序逻辑的方法。如果不这么做，我们还有
哪些选择呢？我们可以在调用isVegetarian（）方法之前，用
instanceof来检查菜单组件的运行时类型，以确定它是菜单
项。但是这么做，我们就会因为无法统一处理菜单和菜单项
而失去透明性。
我们也可以改写Menu的isVegetarianO方法，让它返回false。
这提供了一个简单的解决方案，同时也保持了透明性。
我们的解决方案是为了要清楚地表示我们的想法。我们真正
想要传达的是：isVegetarianO是Menu没有支持的操作（这和
说isVegetarianO是false意义不等同）。这样的做法也允许后
来人去为Menu实现一个合理的isVegetarianO方法，而我们不
必为此再修改这里的代码了。
这是我们的说法，而且我们坚持这么做。
你现在的位置
375
---
## Page 412
访问组合模式
模式告白
本周访问：
组合模式，我们要讨论他在实现上的问题
HeadFirst：我们今天晚上的谈话来宾是组合模式。意义的方法调用。
组合，请向大家介绍一下你自己。
HeadFirst：那怎么办？
组合：好的.…当你有数个对象的集合，它们彼此
组合：有些方式可以处理这一点。有时候你可以让
之间有“整体/部分”的关系，并且你想用一致的方
这样的方法不做事，或者返回null值或false。至于挑
式对待这些对象时，你就需要我。
哪一种方式，就看哪一种在你的应用中比较合平逻
HeadFirst：好了，让我们从这里深人.你所谓辑。
的“整体/部分”关系，指的是什么？
有时候，你可能想要采取更激烈一点的手法，直接
组合：就拿图形用户界面来说，你经常会看到一个抛出异常。当然，客户就要愿意多做一些事情，以
顶层的组件（像是Frame或Panel）包含着其他组件（确定方法调用不会做意料之外的事情。
是一个整体。你告诉顶层的组件显示，然后就放手
应该调用什么呢？
不管，由顶层组件负责显示所有相关的部分。
组合：如果你稍微有一点创意，就可以将你的方法
我们称这种包含其他组件的组件为组合对象，而称
架构起来，好让默认实现能够做一些有意义的事
没有包含其他组件的组件为叶节点对象。
情。比方说，如果你的客户调用了getChildO，对组
HeadFirst：至于你所谓的“用一致的方式对待”所合来说，这个方法是有意义的。如果你把叶节点想
有的对象，又是什么意思？是不是说组合和叶节点象成没有孩子的对象，这个方法对叶节点来说也是有
之间具有共同的方法可以调用？
意义的。
组合：没错。我可以叫组合对象显示或是叫叶节点HeadFirst：噢聪明。但是，我听说一些客户
对象显示，他们会各自做出正确的事情。组合对象其实很担心这个问题，所以他们对不同的对象用了
会叫它所有的组件显示。
不同的接口，这样就不会产生没有意义的方法调用
了。这还算是组合模式吗？
HeadFirst：这意味着每一个对象都有相同的接口。
万一组合中有些对象的行为不太一样，怎么办？
组合：是的，这是更安全版本的组合模式，但是这
哪个对象是用哪个接口，这就失去了组合模式的意HeadFirst：请告诉我们更多的关于组合和叶节点对
义。很明显的，这也意味着有些对象具备一些没有象的结构的事吧。
376第9章
---
## Page 413
选代器与组合模式
组合：通常是用树形结构，也就是一种层次结构。
HeadFirst：哇！组合模式真的具有相当的内涵，远
后一个问题：你认为你的最大强项是什么？
是叶节点。
HeadFirst：孩子会不会反向指向它的父亲？
组合：我认为我让客户生活得更加简单。我的客户
不再需要操心面对的是组合对象还是叶节点对象
除它。一·旦孩子有了指向父亲的引用，这做起来就
HeadFirst：听起来像是一个很重要的好处。毫无疑
很容易。
问，你是一个很有用的模式，可以帮助我们收集和
题吗？
组合：老实说，还有.……其中之一就是孩子的次
序。万一你有一个需要保持特定孩子次序的组合对
象，就需要使用更复杂的管理方案来进行孩子的增
加和删除，而且当你在这个层次结构内游走时，应
该要更加小心。
HeadFirst：很好的观点，我根本没想到过。
组合：你想到过缓存（caching）吗？
HeadFirst：缓存？
组合：是的，缓存。有时候，如果这个组合结构很
复杂，或者遍历的代价太高，那么实现组合节点的
缓存就很有帮助。比方说，如果你要不断地遍历一
个组合，而且它的每一个子节点都需要进行某些计
算，那你就应该使用缓存来临时保存结果，省去遍
历的开支。
你现在的位置，377
---
## Page 414
填字游戏
又到了休闲的时刻
3
横排提示：
竖排提示：
1. User interface packages often use this pattern1. A composite holds this.
for their components.
2.We java-enabledher.
3.Collection and Iterator are in this package
4.We deletedPancakeHouseMenulterator
5. We encapsulated this.
because this classalreadyprovidesaniterator.
6.A separate object that can traverse a
5.The IteratorPatterndecouplesthe clientfrom
collection.
the aggregates
10.Merged with the Diner.
7.Compositelterator used a lot of this.
12. Has no children.
8.Iterators are usually created using this
13. Name of principle that states only one
pattern.
responsibility per class.
9.A component canbe a composite or this.
14. Third company acquired.
11.Hashtable and ArrayListboth implement this
15. A class should have only one reason to do
interface.
this.
16. This class indirectly supports Iterator.
17. This menu caused us to change our entire
implementation.
378
第9章
---
## Page 415
迭代器与组合模式
请将下列模式和描述配对：
模式
描述
策略
客户可以将对象的集合以
及个别的对象一视同仁
提供一个方式来遍历集合，
适配器
而无须暴露集合的实现
送代器
简化一群类的接口
外观
改变一个或多个类的接口
当某个状态改变时，允许
组合
一群对象能被通知到
封装可互换的行为，并使
观察者
用委托决定使用哪一个
你现在的位置
379
---
## Page 416
你的设计工具箱
设计箱内的工具
要点
多了两个模式，两种很棒的方法来处理集合对象。
·选代器允许访问聚合的元
素，而不需要暴露它的内
基础
部结构。
00原则
·选代器将遍历聚合的工作
象
封装进一个对象中。
封装变化
装
多用组合，少用继承
·当使用选代器的时候，我
们依赖聚合提供遍历。
针对接口编程，不针对实现编
承
程
选代器提供了一个通用的
为交互对象之间的松糯合设计
接口，让我们遍历聚合的
而努力
项，当我们编码使用聚合
类应该对扩展开放，对修改关
而。
的项时，就可以使用多态
依赖抽象，不要依赖具体类。
又有一个新的重要原则，涉
机制。
只和朋应文谈
及到设计的改变。
·我们应该努力让一个类只
别找我，我金找你
分配一个责任。
类应该只有一个改变的理由
·组合模式提供一个结构，
可同时包容个别对象和组
合对象。
本章又同时介绍了两
00模式
个模式。
·组合模式允许客户对个别
对象以及组合对象一视同
仁。
·组合结构内的任意对象称
为组件，组件可以是组
选代器模式—提供一种方法
合，也可以是叶节点。
可以
顺序访问一个聚合对象中的各个
■在实现组合模式时，有许
元素，而又不暴露其内部的表
组合模式—允许你将对象组成
多设计上的折衷。你要根
示。
树形结构来表现“整体/部分”的
据需要平衡透明性和安全
层次结构。组合能让客户以一致的
性。
方式处理个别对象和对象组合。
380
第9章
---
## Page 417
选代器与组合模式
习题解答
Sherpenyourpencil
根据我们的printMenu（）实现，下列哪一项为真？
A.我们是针对PancakeHouseMenu和
D.女招待需要知道每个菜单如何表达
DinerMenu的具体实现编码，而不是
内部的菜单项集合，这违反了封装。
针对接口。
E.我们有重复的代码：printMenuO方
口B.女招待没有实现Java女招待API，所
法需要两个循环，来遍历两种不同
以她没有遵守标准。
的菜单。如果我们加上第三种菜单，
C.如果我们决定从DinerMenu切换
我们就需要第三个循环。
到另一种菜单，此菜单的项是用
F.这个实现井没有基于MXML（Menu
Hashtable来存放的，我们会因此需要