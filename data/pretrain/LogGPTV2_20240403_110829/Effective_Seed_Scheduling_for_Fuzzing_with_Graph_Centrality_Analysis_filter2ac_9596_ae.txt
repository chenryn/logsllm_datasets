### Five Design Choices for K-Scheduler

We evaluate five key design choices in the K-Scheduler: (i) centrality measure, (ii) β parameterization, (iii) visited node deletion, (iv) loop removal, and (v) α parameterization. For each design choice, we conduct experiments using the 12 Google FuzzBench programs, running K-Scheduler with LibFuzzer for one hour, repeated 10 times, and compare their feature coverage. We choose a one-hour run because it often yields more coverage than later hours, and feature coverage provides more detailed information about the fuzzer's behavior compared to edge coverage.

#### 1. Centrality Measure
We investigate the impact of different centrality measures on seed scheduling by comparing Eigenvector, Degree, Katz, and PageRank centrality. Table IX shows the feature coverage results. Using Katz centrality improves feature coverage by 16.54%, 23.69%, and 19.17% in arithmetic mean over the 12 FuzzBench programs, relative to PageRank, Eigenvector, and Degree centrality, respectively. This supports our claim that Katz centrality is the most effective for seed scheduling. However, some programs, such as `re2` and `vorbis`, show better performance with other centrality measures.

**Table IX: Arithmetic Mean Feature Coverage with Different Centrality Metrics**

| Programs   | Katz       | PageRank   | Eigenvector | Degree     |
|------------|------------|------------|-------------|------------|
| freetype   | 51,184     | 44,394     | 40,723      | 40,396     |
| libxml2    | 39,240     | 29,575     | 38,332      | 31,733     |
| lcms       | 2,886      | 2,071      | 2,054       | 1,506      |
| harfbuzz   | 35,017     | 28,563     | 27,485      | 29,380     |
| libjpeg    | 10,974     | 9,250      | 10,454      | 8,834      |
| libpng     | 5,001      | 4,804      | 4,923       | 4,761      |
| openssl    | 14,520     | 13,035     | 13,555      | 12,542     |
| openthread | 6,525      | 5,201      | 5,298       | 5,271      |
| re2        | 31,292     | 32,309     | 29,595      | 28,263     |
| sqlite     | 73,532     | 68,328     | 65,538      | 64,893     |
| vorbis     | 9,106      | 8,129      | 9,363       | 7,679      |
| zlib       | 2,711      | 2,410      | 2,404       | 2,305      |

**Arithmetic Mean Coverage Gain:**
- Katz vs. PageRank: 16.54%
- Katz vs. Eigenvector: 23.69%
- Katz vs. Degree: 19.17%

#### 2. β Parameterization
In Section IV, we describe how we set β based on historical mutation data. Here, we compare K-Scheduler with uniform β against K-Scheduler with non-uniform β. Table X shows the feature coverage results. The non-uniform β technique increases feature coverage by 24.19% in arithmetic mean over the 12 FuzzBench programs, demonstrating the utility of biasing β.

**Table X: Arithmetic Mean Feature Coverage with Non-Uniform β**

| Programs   | Non-Uniform β | Uniform β  |
|------------|---------------|------------|
| freetype   | 51,184        | 40,396     |
| libxml2    | 39,240        | 31,733     |
| lcms       | 2,886         | 1,506      |
| harfbuzz   | 35,017        | 29,380     |
| libjpeg    | 10,974        | 8,834      |
| libpng     | 5,001         | 4,761      |
| openssl    | 14,520        | 12,542     |
| openthread | 6,525         | 5,271      |
| re2        | 31,292        | 28,263     |
| sqlite     | 73,532        | 64,893     |
| vorbis     | 9,106         | 7,679      |
| zlib       | 2,711         | 2,305      |

**Arithmetic Mean Coverage Gain:**
- Non-Uniform β: 24.19%

#### 3. Visited Node Deletion
In Section IV, we explain why we remove visited nodes from the edge horizon graph. In this comparison, we experimentally justify this choice. We compare K-Scheduler with visited node deletions against K-Scheduler without deletions. Table XIII shows the feature coverage results. Deleting visited nodes improves feature coverage by 24.13% in arithmetic mean over the 12 FuzzBench programs, justifying our deletion of visited nodes.

**Table XIII: Arithmetic Mean Feature Coverage with Visited Node Deletion**

| Programs   | Original    | Deleted    |
|------------|-------------|------------|
| freetype   | 51,184      | 39,892     |
| libxml2    | 39,240      | 28,973     |
| lcms       | 2,886       | 1,493      |
| harfbuzz   | 35,017      | 24,667     |
| libjpeg    | 10,974      | 9,715      |
| libpng     | 5,001       | 4,827      |
| openssl    | 14,520      | 13,121     |
| openthread | 6,525       | 5,712      |
| re2        | 31,292      | 29,408     |
| sqlite     | 73,532      | 61,609     |
| vorbis     | 9,106       | 8,020      |
| zlib       | 2,711       | 2,470      |

**Arithmetic Mean Coverage Gain:**
- Visited Node Deletion: 24.13%

#### 4. Loop Removal
In Section IV, we introduce loop removal to mitigate the effects of loops on computing centrality. In this experiment, we compare K-Scheduler with and without loop removal. Table XII shows that loop removal improves edge coverage by 21.70% in arithmetic mean over the 12 FuzzBench programs, justifying our loop removal transform.

**Table XII: Arithmetic Mean Feature Coverage with Loop Removal**

| Programs   | Loop Removal | No Loop Removal |
|------------|--------------|-----------------|
| freetype   | 51,184       | 38,646          |
| libxml2    | 39,240       | 28,737          |
| lcms       | 2,886        | 1,455           |
| harfbuzz   | 35,017       | 28,849          |
| libjpeg    | 10,974       | 10,142          |
| libpng     | 5,001        | 4,846           |
| openssl    | 14,520       | 13,300          |
| openthread | 6,525        | 5,430           |
| re2        | 31,292       | 31,609          |
| sqlite     | 73,532       | 64,560          |
| vorbis     | 9,106        | 9,350           |
| zlib       | 2,711        | 2,247           |

**Arithmetic Mean Coverage Gain:**
- Loop Removal: 21.70%

#### 5. α Parameterization
In this experiment, we study how the choice of α affects K-Scheduler's performance. Table XI summarizes our findings. As described in Section IV, α = 1 treats far and close paths with equal contribution to centrality, and its experimental results are worse compared to distinguishing them, showing the utility of the multiplicative decay effect. Given that α = 0.5 performs best in arithmetic mean over the 12 FuzzBench programs, we use it in our current implementation.

**Table XI: Arithmetic Mean Feature Coverage with Different α Values**

| Programs   | α = 0.5     | α = 0.25    | α = 0.75    | α = 1      |
|------------|-------------|-------------|-------------|------------|
| freetype   | 51,184      | 38,369      | 41,777      | 40,723     |
| libxml2    | 39,240      | 28,644      | 29,992      | 28,473     |
| lcms       | 2,886       | 1,313       | 1,552       | 1,557      |
| harfbuzz   | 35,017      | 27,250      | 28,276      | 26,253     |
| libjpeg    | 10,974      | 9,542       | 10,336      | 10,454     |
| libpng     | 5,001       | 4,913       | 4,929       | 4,505      |
| openssl    | 14,520      | 13,420      | 13,302      | 13,385     |
| openthread | 6,525       | 6,216       | 5,597       | 5,380      |
| re2        | 31,292      | 29,590      | 31,885      | 29,648     |
| sqlite     | 73,532      | 64,175      | 68,550      | 65,538     |
| vorbis     | 9,106       | 8,092       | 8,066       | 7,470      |
| zlib       | 2,711       | 2,378       | 2,282       | 2,323      |

**Arithmetic Mean Coverage Gain:**
- α = 0.5: 24.53%
- α = 0.25: 19.47%
- α = 0.75: 23.69%
- α = 1: 14.29%

### Conclusion
Our results empirically support K-Scheduler's design choices. K-Scheduler, implemented with these design choices, significantly improves feature coverage by 25.89% compared to Entropic and edge coverage by 4.21% compared to the next-best AFL-based seed scheduler, in arithmetic mean on 12 Google FuzzBench programs.