ter 0.728%jzq 0.0000002$
ate 0.672$zgq 0.00000028
三元字母组合的概率计算如下：
1593
---
## Page 1595
def logP3letters (text) :
"The log-probability of text using a letter 3-gram model."
return sum(logl0 (P3l(g)) for g in ngrams (text, 3) )
P3l=Pdist(datafile ('count_3l*) )
P2l=Pdist(datafile ('count_2l') ) ##We'll need it later
第二，枚举候选项：我们无法考虑全部的4x102种可能的密钥，而
似乎没有什么方法可以像文本分段那样，系统性地消除非最优候选
项。这种情况下，需要本地搜索策略，如"爬山算法"(hllclimbing)。
假设你想要到达最高峰，但是没有地图。通过爬山算法的策略，你
可以从随机位置x开始，向相邻位置走一步。如果该位置比之前位
置高，继续从那里并始“爬山”：如果不是，则考虑x的另一个相邻位
置。当然，如果你从地球上随机一个位置开始步行上山，你可能无
法到达珠穆朗玛峰的顶部。更有可能的是，你到达了某个地方的小
山头，或者困在一个平原里到处走。因此，我们为爬山算法增加了
随机次数的重试。在完成这些步骤后，我们并始从一个新的随机位
置从头并始。
以下是通用的爬山算法。它包含起始位置x，我们正试着优化的函
数f，生成一个位置的相邻位置的函数neighbors，以及最多采取的步
骤。（如果变量调试是真实的，它会输出最佳的位置x及其分
值）。
def hillclimb (x, f, neighbors, steps=10000) :
"Search for an x that miximizes f(x), considering
neighbors (x) . "
fx=f (×)
neighborhood=iter (neighbors (x) )
for i in range (steps) :
x2=neighborhood.next ()
f×2=f (x2)
1594
---
## Page 1596
if fx2>=fx:
x,fx=x2，fx2
neighborhood=iter (neighbors (x) )
if debugging:print'hillclimb: ', x,int (fx)
return x
debugging=False
为了使用爬山算法来解码，我们需要指定参数。我们将要搜索的位
置是纯文本（解码后的）消息。我们将试着最大化三元字母组词
频，因此，设置函数f=logP3letters。从根据随机的密钥解码生成的x
位置并始，做随机次数的重试，但是当从每次重试中收集候选项
时，我们会根据segment2，选择最佳的一个候选项，而不是根据函
数1logP3letters：
def decode_subst (msg,steps=4000, restarts=20) :
"Decode a substitution cipher with random restart
hillclimbing ."
msg=cat (allwords (msg) )
candidates=
[hillclimb (encode (msg, key=cat (shuffled (alphabet) ) ) ,
logP3letters, neighboring_msgs, steps)
for_in range (restarts)]
P, words=max (segment2 (c) for c in candidates)
return'* .join (words)
def shuffled(seq) :
"Return a randomly shuffled copy of the input sequence."
seq=list (seq)
random.shuffle (seq)
1595
---
## Page 1597
return seq
cat='' .join
现在，我们需要定义相邻消息函数neighboring_msgs，它生成下一步
要尝试的消息的解码。我们首先尝试“修复”不可能的二元字母组。
举个例子，最不频繁出现的二元字母组合"jq"的概率是0.0001%，它
比最频繁出现的二元字母组合"in"和"th"的概率低5万倍。因此，如
果我们在消息中看到"ja”，我们试着把""和其他每一个字母进行交
换，同样也交换“a”。如果一个交换生成更频繁的二元字母组，那
么我们生成由这次交换得到的消息。在遍历20次最不可能出现的二
元字母组“修复”后，我们考虑随机交换：
def neighboring_msgs (msg) :
"Generate nearby keys,hopefully better ones."
def swap (a,b) : return
msg.translate (string.maketrans (a+b, b+a) )
for bigram in heapq.nsmallest (20, set (ngrams (msg, 2) ),
P21) :
b1, b2=bigram
for c in alphabet:
i f b1==b 2 :
ifP21 (c+c) >P21 (bigram): yieldswap (c,b1)
else:
if P21 (c+b2) >P21(bigram): yield swap(c,b1)
if P21 (b1+c) >P21 (bigram) : yield swap (c,b2)
while True:
yield swap (random.choice (alphabet),
random.choice (alphabet) )
1596
---
## Page 1598
我们一起来看看它的效果如何。我们将从RobertRaynard的书
《Secret CodeBreaker》（Sith和Daniel；见
http：//secretcodebreaker.com)中抽取一些密码来尝试这种策略。首
先是一则“热身"的加密消息：
CGGXJ MMTQC IPJSB AQPDR
SDIMS DUAMB CQCMS AQDRS DMRJN SBAGC IYTCY ASBCS MQXKS
CICGX RSRCQ ACOGA SJPAS
AQHDI ASBAK GCDIS AWSJN CMDKB AQHAR RCYAE'
>>>decode_subst (msg)
'it is by knowing the frequency which letters usually
occur and other distinctive
characteristics of the language that crypt analysts are
able to determine the
plain text of a cipher message j*
解码后的消息，除了“crypt analyst"本应该是一个单词，其他都是正
确的。（这个词不在我们的词库中，但是它在1300亿的单词库
中）。注意最后一个字符（加密文本的"E”）是为了使所有分块都
是五个字母一组而增加的。
以下是来自第一次世界大战时德国间谍BaronAugustSchluga的真正
的密文：
>>>mSg='NKDIF SERLJ MIBFK FKDLV NQIBR HLCJU KFTFL KSTEN
YQNDQ NTTEB TTENM QLJFS
NOSUM MLQTL CTENC QNKRE BTTBR HKLQT ELCBQ QBSFS KLTML
SSFAI NLKBR RLUKT LCJUK
FTFLK FKSUC CFRFN KRYXB'
>>>decode_subst (msg)
1597
---
## Page 1599
'english complaining over lack of munitions they regret
that the promised support of
the french attack north of arras is not possible on
account of munition insufficiency wa
以下是在1992年，美国国家安全委员会(KB)向美国前中央情报局
(CA)主席AldrichAmes发送的密文，AldrichAmes在1994年被判为间
课：
>>>mSg='CNLGV QVELH WTTAI LEHOT WEQVP CEBTQ FJNPP EDMFM
LFCYF SQFSP NDHQF OEUTN
PPTPP CTDQN IFSQD TWHTN HHLFJ OLFSD HQFED HEGNQ TWVNQ
HTNHH LFJWE BBITS PTHDT
XQQFO EUTYF SLFJE DEFDN IFSQG NLNGN PCTTQ EDOED FGQFI
TLXNI '
>>>decode_subst (msg)
'march third week bridge with smile to pass info from you
to us and to give
assessment about new dead drop ground to indicate what
dead drop will be used next
to give your opinion about caracas meeting in october xab'
以下是在1943年德国的U-Boat命令的密文被截获并且被解码，从而
挽救了联合战舰护航队：
        1
IHBGP RWMWQ SOPSV PPIMJ
BISUF WIFOT HWBIS WBIQW FBJRB GPILP PXLPM SAJQQ PMJQS
RJASW LSBLW GBHMJ
QSWIL PXWOL*
>>>decode_subst (msg)
1598
---
## Page 1600
'a cony ov is headed northeast take up positions fifteen
miles apart between point
yd and bu maintain radio silence except for reports of
tactical importance x abc'
解码后的消息混淆了“y"和“x”。分析人员会意识到"conyov"应该是
单词"convoy”，因此"pointyd"应该是“pointvd”。我们的程序从未考
虑到这种可能性，因为正确文本的三元字母组合概率比这里结果所
显示的要低。通过发明一种更好的打分函数，它不会陷于局部最优
中，我们可能可以解决这个问题。或者我们可以增加第二层次的爬
山搜索：通过第一次搜索生成的候选项，以segment2作为打分函数
来简单搜索。我们将把它作为练习留给读者。
拼写纠止
我们的最后一个任务是拼写纠正：给定一个输入的单词w，确定单
词c是其最可能要表达的单词。举个例子，如果w是"acomodation"，
c应该是“accommodation”。（如果w是“the”，那么c也应该是
“the”。）
根据标准的方法，我们想要选择c，使得其条件概率P（cw）值最
大。但是如何定义该概率却不简单。假设w="thew”，那么c的一个
候选项是“the”——它是最常见的单词，我们可以想象是打字员的手
指输入“e”后不小心按到“w”。另一个候选项是"thaw”一个较常
见的单词（虽然出现概率比“the"低3万倍），而且用一个原因取代
另一个很常见。其他的候选项包括"thew"本身（表示肌肉或者肌腱
的模糊术语），“threw”和一种姓氏"Thwe”。我们应该选择哪一种？
看起来我们合并了两种因素：c本身的概率是多大？w是c的输入错
误，或者是拼读错误，或者是其他某种形式的误拼，它们的概率有
多大？有人可能会认为我们将通过某种特殊(ahoc)方式来结合这些
因素，但是实际上存在一个数学公式——贝叶斯理论——精确地告
诉我们如何组合这些因素来找到最佳的候选项：
argmaxc P(c|w)=argmaxc P(w|c )P(c)
这里，P(c)表示c是期望的结果单词的概率，称为语言模型；
P(wlc）表示用户期望获取c会输入w的概率，称为错误模型或者噪