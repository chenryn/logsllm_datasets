2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
原创 队员编号030 酒仙桥六号部队 7⽉2⽇
这是 酒仙桥六号部队 的第 30 篇⽂章。
全⽂共计2229个字，预计阅读时⻓8分钟。
000000000000000xxxxxxxxxxxxxxx000000000000000111111111111111 前前前前前前前前前前前前前前前⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔
⼤家在做代码审计或者学习代码审计的过程中，会有⼤量时间是对着代码的。有时候会
觉得代码枯燥⽆聊，看代码看到怀疑⾃我。
这时候不妨通过其他思路，换个思维，看点有趣的相关事务。回过头来再看代码，也许
会有意想不到的惊喜！
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 1/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
000000000000000xxxxxxxxxxxxxxx000000000000000222222222222222 查查查查查查查查查查查查查查查看看看看看看看看看看看看看看看各各各各各各各各各各各各各各各种种种种种种种种种种种种种种种记记记记记记记记记记记记记记记录录录录录录录录录录录录录录录
更新⽇志
我在 GITHUB上找到了⼀个合适的开源 CMS项⽬。在其官⽹上可以看到该CMS的更
新的⽇志。
查看更新⽇志（CHANGELOG）：
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 2/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
我们可以看到 1.2.3 版本修复了⼀个 SQL 盲注 (Issue#19) 和 1.2.4版本修复了⼀
个⽂件管理器上传漏洞 (Issue#20)。
查看该 CMS 的代码结构，发现是基于 CodeIgniter 框架(后⽂简称 CI )进⾏的⼆次
开发。对 CI 的相关类进⾏了继承，并⾃⼰封装了函数，进⾏⼀些特殊处理。
ISSUE记录
我们先来看下这个 SQL 盲注，⾸先访问下 GITHUB 上 Issue#19 的⻚⾯看下详
情。
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 3/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
这个是⼀个 1.2.2版本上报的 ISSUE 信息，从中我们可以看出这位漏洞上报者来⾃
ABT 实验室。漏洞信息⾮常全⾯，格式优美，图⽂并茂。
在 Issue 中不但给出了问题⽂件的路径是/core/MY_Security.php ，还给出了
Payload 细节：在前端登录时，User-Agent: '-( if( condition, sleep(5), 1))-
'', '192.168.1.11','time')# 。并且将漏洞产⽣原因进⾏了详细阐述：由于参数缺
失，该 CMS 会记录下该登录包的信息，以"⽆效的 CSRF 防护"为原因写⼊数据库。
但是信息中的 HTTP_USER_AGENT 这个参数未作任何检测，就直接拼接到 SQ L
语句中，故造成了漏洞可以被利⽤。
在最后漏洞上报者还给出了修复建议。
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 4/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
我们根据给出了⽂件名找到了 1.2.2 版本的 MY_Securtiy.php ⽂件。
MY_Securtiy 是继承 CI 框架的 CI_Security，并对其⼀些常⽤函数进⾏了封装扩
展。
我们的⽬标函数 csrf_show_error就是其中之⼀，我们先来看下该函数的调⽤过程：
调⽤在CI框架中的 Security.php ⽂件：在 csrf 验证时，如果 csrf_token 不合
法 ， 则 会 调 ⽤ csrf_show_error 函 数 。 所 以 我 们 在 构 建 请 求 报 ⽂ 时 ， 需 要 将
csrf_token 参数不设置或者改动⼀下。
CI_Security中的csrf_show_error:只有错误显示。
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 5/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
My_Security中的csrf_show_error:增加了对错误登录的记录⼊库并细分了错误种
类。
第45⾏，即漏洞上报者提到的condition，如果语句不会被执⾏，则count也不会增
加，所以条件⼀直为true。
第46⾏，可以看出直接将 $_SERVER['HTTP_USER_AGENT'] 拼接到 SQL 的
INSERT 语句中，并没有任何过滤，所以产⽣了SQL 注⼊。
看起来简单明了，这个漏洞应该会被完美的修复掉。但事实上这个漏洞修复的过程并没
有这么简单。在这个Issue#19中后续有⼀段很有趣的CMS开发者和漏洞上报者之间的
对话记录，引起了我的兴趣：
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 6/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
聊天记录
漏洞上报的版本为 1.2.2，⽽这时开发者已经开发出了 1.2.3-rev1版本，并且尝试修
复这个 SQL 注⼊的问题，并希望漏洞上报者使⽤ 1.2.3-rev1 来看看是否修复了此漏
洞。
这个漏洞上报者⾮常有耐⼼，他在实际尝试后发现问题并没有被修复的同时，还查看
1.2.3-rev1 的 MY_Security.php 的代码。他告诉CMS开发者使⽤ xss_clean 函
数并不能解决 SQL注⼊的问题，并且告诉他应该使⽤正确的函数为：escape-string
或者real_escape_string 这两个函数来防⽌ SQL 注⼊，并给出了这两个函数在
PHP.NET 的官⽅链接和以及修复之后的代码以及测试结果。
再来看之后的对话：
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 7/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
这个CMS开发者很勤奋，第⼆天就放出了 1.2.3-rev2 版本尝试修复了这个问题，并
且再次邀请漏洞上报者测试是否修复此问题。
漏洞上报者于当⽇确认已经修复，Payload 不再起作⽤，然后开发者关闭了此问题。
⾄此⼀个开源 CMS 的安全问题被修复了。
000000000000000xxxxxxxxxxxxxxx000000000000000333333333333333 从从从从从从从从从从从从从从从中中中中中中中中中中中中中中中所所所所所所所所所所所所所所所得得得得得得得得得得得得得得得
我们可以从中得到什么？
看起来⼀切正常，但是我们能从这段对话中得到什么呢？
我们这个开发者是有基本安全意识的，该 CMS 包含 xxs_clean 函数，证明开发者
在已经意识到 XSS 问题并且封装了相应的函数来做过滤处理。
但是该开发者对于安全问题的细节认识并不太清晰。在碰到 SQL 注⼊问题时企图⽤
xss_clean 来解决这个问题，这点说明他对于 SQL 注⼊产⽣的原因和修复⽅法并不
太明确。
我们来看下GITHUB上 1.2.3-rev2 版本中开发者对于这个问题的修复⽅案：
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 8/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
开发者很听话，使⽤了 escape_string 来修复 SQL 注⼊的问题，做的很好。但是
他并没有去掉 xss_clean ⽅法，⽽是在escape_string 调⽤之后仍然还继续调⽤
xss_clean ⽅法。
这是为什么呢？我们来尝试猜测开发者的想法：在1.2.3-rev2版本中使⽤xss_clean
后未修复，于是加上了escape_string来修复该漏洞。xss_clean 是处理危险字符的
⽅法，escape_string也是处理危险字符的⽅法，两个过滤危险字符的⽅法叠加起
来，理应是更安全的。就像两个 WAF 串联叠加，不应该是难上加难吗？
但是事实可能并⾮如此，也许正是这种情况给了我们绕过机会！
绕过修复⽅案
⾸先看⼀下 escape_string 到底转义了哪些字符:
下列字符受影响：
\x00
\n
\r
\
'
"
\x1a
由于这段 SQL 注⼊是字符型，我们需要 ' 来闭合语句，但是 escape_string 会将
' 变为 \' 从⽽阻⽌ SQL 注⼊。
我们来看下 xss_clean 中的代码：
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 9/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
第 354-365 ⾏是⼀个递归调⽤。
第 368⾏是⼀个移除不可⻅字符的⽅法，如：\x00、\x01 等等。
第 379-389 ⾏是我们的关键代码，这段代码是判断 $str 参数中是否包含 % 字
符，如果有的话就判定为需要 URL 解码并且调⽤ rawurldecode 来进⾏ URL 解
码。
这个不就是我们要找的代码吗？！
escape_string ⽅法并不会转义 % ，所以我们将 Payload 进⾏ URL 编码后并不
会被 escape_string ⽅法改变任何内容。⽽当到达 xss_clean 时 Payload 将被
URL 解码，从⽽绕过了对 SQL 注⼊的过滤。
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 10/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
漏洞验证
我们先来测试下原来的 Payload：
1 **'-( if((1=1), sleep(5), 1) )-'', '192.168.1.11','time') \#**
没有造成延时，原 Payload 失败。
新的 Payload 就是将原 Payload 进⾏ URL 编码，新 Payload：
1 **%27%2d%28%20%69%66%28%28%31%3d%31%29%2c%20%73%6c%65%65%70%28%35%29%2c%
造成延时成功，绕过修复⽅案，触发 SQL 时间盲注漏洞。
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 11/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
000000000000000xxxxxxxxxxxxxxx000000000000000444444444444444 后后后后后后后后后后后后后后后记记记记记记记记记记记记记记记
此漏洞在GITHUB中上报给了作者团队。
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 12/13
2020/7/27 察⾔观⾊也能挖到0day？在聊天记录中的漏洞挖掘
⽂章已于2020-07-02修改
https://mp.weixin.qq.com/s/zC8xgIKjuQikXnObEHzMJg 13/13
|---|--|--|
| 0 |  |  |
| 1 |  |  |