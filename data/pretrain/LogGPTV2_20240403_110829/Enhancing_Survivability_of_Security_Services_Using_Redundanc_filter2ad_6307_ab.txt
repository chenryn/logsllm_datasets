vices.  The main  features provided  by  Cactus messages are 
named  message  attributes  and  a  coordination  mechanism 
that only allows a message be sent out of the composite pro- 
tocol  when agreed by all micro-protocols. The message at- 
tributes are a generalization  of traditional message headers 
and have scopes corresponding to a single composite proto- 
col (local), all the protocols on a single machine (stuck), and 
the peer protocols at the sender and receiver (peer).  A cus- 
tomizable  pack  routine  concatenates peer  attributes  to  the 
message  body  for network  transmission, or for operations 
such as encryption and compression.  A  corresponding un- 
pack routine extracts the peer attributes from a message  at 
the receiver. 
Several prototype  implementations of Cactus have been 
constructed, including one written  in  C that runs on Mach 
version MK 7.3 from OpenCroup [21 J  and Red  Hat Linux 
release 6.2, another written in C++ that runs on Solaris and 
Linux, and a third written in Java that runs on multiple plat- 
forms. 
SecComm overview.  SecComm is a highly configurable 
secure  communication  service  with  the  inherent  flexibil- 
ity  needed  to realize  redundancy-based  survivability  tech- 
niques.  The system  model  for SecComm consists of a col- 
lection of machines connected by a local- or wide-area com- 
munication  network.  Application-level  processes  commu- 
nicate  by  using  a communication  subsystem that  typically 
consists of IP, some transport level protocol such as TCP or 
UDP, and potentially some middleware-level protocols. 
SecComm can  be  inserted  in  any  layer  above IP in  the 
communication  subsystem, as  illustrated  in  figure  I .   (The 
internal  structure  of  SecComm  is  explained  further  be- 
low.)  SecComm is  generally  independent of the choice  of 
the  lower  level  communication  protocol,  but  the  guaran- 
tees  provided  by  the  lower  level  may  affect  the  set  of  vi- 
able  micro-protocols.  For  example,  some security  micro- 
protocols require that the underlying protocol  provides re- 
liable  ordered  delivery,  which  constrains  the  use  of  these 
175 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
I 
I 
amclpants  W S A A u t h e n t i c i i y  
API: Pop ‘I*; 
I  7 ClieritKeyDistribution 
)..&&-- 
opens 
~ 
SecCoinm 
API  Opcn. Chnc. P w h  
Micro-protocols 
J 
Events 
r H  KeyedMD5lniegriiy 
... 
... 
Figure 1. System protocol stack. 
particular micro-protocols  to  the  case where  SecComm is 
used  on top  of TCP or  some other transport protocol  with 
similar guarantees. 
The  method  used  to  insert  SecComm  into the  commu- 
nication  subsystem depends  on  the  particular implementa- 
tion  platform.  Systems such as the x-kernel  [ 121, CORDS 
[25], and  Scout  [I81 allow  explicit  construction  of  proto- 
col graphs.  In  such  systems, SecComm is simply  inserted 
into the protocol  graph  before compilation.  On other sys- 
tems,  SecComm is  either inserted  into the  existing  kernel 
communication  subsystem using methods such as loadable 
modules,  or is built on top of TCP or UDP sockets in  user 
space. The method of integration does not affect the internal 
design of SecComm. 
A  secure  communication  connection  is  established  by 
opening a session through the SecComm service. Each ses- 
sion  has two sets of customized  security attributes that are 
specified at open time, one for messages traversing the ses- 
sion  from  the application  to the  network  and the other for 
messages  traversing  the  session  in  the  opposite  direction. 
This feature allows, for instance, the security guarantees for 
request  messages  from  a  client  to  a  server  to  be  different 
than  those for reply  messages.  SecComm is also indepen- 
dent  of  the communication  paradigm  used  by  the applica- 
tion, i.e., it can be used for symmetric group communication 
as well as for asymmetric clientherver interactions. Finally, 
the SecComm service does not impose a single form of key 
management on applications. 
Security properties.  As a first  step towards  exploiting 
redundancy, security properties and their variants are iden- 
tified,  each  of  which  can  be  implemented  using  different 
methods. Well-known  abstract security properties include: 
Authenticity.  Ensures  that  a  receiver  can  be  certain 
of the  identity  of the  message  sender.  Can be imple- 
mented using public key  cryptography, any shared se- 
cret, or a trusted intermediary such as Kerberos. 
Privacy.  Ensures that only  the intended receiver of  a 
message  is able to  interpret the contents.  Can be  im- 
plemented using any shared secret, public key cryptog- 
raphy, or combinations of methods. 
Integrity. Ensures that the receiver of a message  can 
be  certain  that  the  message  contents  have  not  been 
modified during transit.  Some authenticity and privacy 
methods also provide  integrity  as a  side effect  if  the 
message format has enough redundancy to detect vio- 
lations.  Additional redundancy can be provided using 
message digest algorithms such as MD5. Integrity can 
be  provided  without  privacy,  but  at  a  minimum,  the 
message digest itself must be protected. 
Non-repudiation.  Ensures that  a receiver can  be  as- 
sured that the sender cannot later deny having sent the 
message.  Relies  on  authenticity  provided  by  public 
key  cryptography  and requires that  the receiver  store 
the encrypted message as proof. 
We  can  identify  other  security  properties that  are  focused 
on prevention of specific security attacks. These properties 
include: 
Replay prevention. Prevents an intruder from gaining 
an  advantage by  retransmitting old messages.  Can be 
implemented using timestamps, sequence numbers, or 
other such nonces in messages. Typically used,in con- 
junction  with  authenticity,  privacy,  or  integrity  since 
otherwise it would be trivial for an intruder to generate 
a new message that appears to be valid. 
Known plain text attack prevention. Prevents an in- 
truder from utilizing known plain text based attacks by 
including additional random information (“salt”) at the 
beginning of a message. 
4  SecComm Design 
Application  programming  interface.  The  SecComm 
service allows a higher level  service or application to open 
secure  connections  and  then  send  and  receive  messages 
through these connections. The specific operations exported 
by  SecComm are the following: 
Open(participan ts,role,properties).  Opens  a  session 
for  a  new  communication  connection,  where  partici- 
pants is an array identifying the communicating princi- 
pals, role identifies the role of this participant in  open- 
ing the connection (active or passive), and properties is 
176 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
a specification  of the desired security  properties of the 
session. 
msgFromAbove(msg).  Indicates that msg has arrived 
from a higher level protocol  or application. 
Push(msg).  Passes a message from a higher level pro- 
tocol or application to a SecComm session to be trans- 
mitted  with  the  appropriate security attributes  to  the 
participants. 
Pop(msg).  Passes a message from a lower level proto- 
col to a  SecComm  session  to be decrypted, checked, 
and  potentially  delivered  to  a  higher  level  protocol. 
When  the  SecComm  protocol  passes  a  message  to 
the higher level  and authentication  is required, it adds 
a  stack  attribute  that  is  the  ID  of  the  authenticated 
sender. 
Close(). Closes a SecComm communication session. 
We assume that the participants of the communication con- 
nection  negotiate  the  properties  for  the  connection  on  a 
higher  level.  Once  negotiated,  properties are  specified  in 
the  open operation  as two ordered lists of micro-protocols 
and their arguments, the first for messages going downward 
through the composite protocol and the second for messages 
going upward.  Thus, for example, the  following  specifies 
that messages going downward are processed first by DES- 
Privacy  and then  by  RSAAuthenticity,  while messages go- 
ing upwards are processed  by the same micro-protocols but 
in the reverse order: 
{ DESPrivacy(DESkey), RSAAuthenticity(RSAkey); 
RSAAuthenticity(RSAkey),  DESPrivacy(DESkey)} 
This relatively  low  level  approach to specifying properties 
is  an  interim  strategy.  Our eventual  goal  is  to  develop an 
approach in which properties  are given as formal specifica- 
tions that  are then  translated  automatically into collections 
of micro-protocols and arguments. 
Shared  data  structures  and  events.  The  main  use  of 
shared data in SecComm is to store keys. In particular, each 
SecComm session  contains a  shared  table  Keys that  stores 
all the keys currently used  in this session. This table  is ini- 
tialized  using  the  predefined  keys passed  in the  Open() op- 
eration, with  other keys potentially  added during execution 
by  key distribution  micro-protocols. 
Our  prototype  implementation  of  SecComm  uses  the 
Cryptlib cryptographic package [ 101 to provide basic cryp- 
tographic functionality.  Any  cryptolibrary with  the  neces- 
sary functions could be used, however. 
The design  of  SecComm  uses  a  number  of  events  for 
communication between  micro-protocols and to initiate ex- 
ecution  when  messages  arrive.  The SecComm composite 
protocol  uses  the  following events to  indicate message ar- 
rivals from above and below: 
dataMsgFromBelow(msg). 
has arrived from a lower level protocol or OS. 
Indicates that  a data msg 
Indicates that  a  msg asso- 
keyMsgFromBelow(msg). 
ciated  with  key  distribution  has arrived  from a  lower 
level protocol  or OS. 
These events are raised  within the push and pop operations 
provided  as part  of  the  composite  protocol’s  runtime sys- 
tem. The pop operation has been customized using facilities 
provided  by  the  Cactus framework to distinguish  between 
data and key distribution  messages. 
Other  events  are  used  for communication  between  the 
micro-protocols that  secure data communication and those 
that implement key distribution  and security monitoring: 
keyMiss(index,length,check).  Indicates  that  the  key 
index  in  the  Keys table is  required.  The key  should 
be  of  size length and satisfy  validity  test  check.  The 
validity  test can be used to eliminate weak keys. 
securityAlert(type,msg).  Indicates that a potential  se- 
curity  violation  of  type related  to  msg  has  been  de- 
tected. 
Micro-protocol  structure.  The  abstract  security  at- 
tributes  described  in  section  3, as  well  as key distribution, 
are  implemented  by  one or more  micro-protocols.  When 
a  number  of  micro-protocols  implement  variations  of  the 
same abstract  property,  we  collectively  refer to  them  as a 
class  of  micro-protocols.  For  example,  the  class  of  pri- 
vacy  micro-protocols  includes  DESPrivacy,  RSAPrivacy, 
and IDEAPrivacy  micro-protocols that  use the  DES, RSA, 
and IDEA algorithms, respectively.  Figure 2 illustrates  the 
main  micro-protocol classes and  typical  event  interactions 
between them. 
The design of the SecComm  service allows  any combi- 
nation  of  security  micro-protocols to  be  used  together  in 
both  static  and dynamic ways.  The ability  to use multiple 
micro-protocols within  a given class at the  same time,  for 
example,  is one way  in  which  redundancy can  be  used  to 
support a survivable service. Naturally, there may be some 
configuration  constraints between  micro-protocols that  re- 
strict which combinations are feasible. 
The  SecComm  service  consists  of  two  major  types of 
micro-protocols:  basic security  micro-protocols that  per- 
form  simple  security  transformations  such  as  encryption 
or integrity checks, and metu-security micro-protocols that 
build  more complex, security protocols using  the  basic  se- 
curity  micro-protocols  as  building  blocks.  An  example 
of a simple security micro-protocol would be DESPrivacy, 
177 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
iecComm 
; 
micro-protocol BasicSecurity(dEvnt,dOrd,uEvnt, uOrd,key) { 
handler ProcessDownMsg(msg){ 
if Keys[myKey] == NULL raise(keyMiss,myKey,SYNC); 
add attributes, pack, encppt, etc. ; 
1 
handler Process UpMsg(msg){ 
if Keys[myKey] == NULL. raise(keyMiss,myKey,SYNC); 
decnpt, unpack. check attributes, etc. ; 
1 
initial { myKey =key; 
bind(dE vnt,ProcessDownMsg,dOrd); 
bind(uE vnt,Process UpMsg,uOrd); 
1 
1 
kevMseFromBelow 
Figure 3. Generic basic security MP. 
Figure 2. MP classes and interactions. 
which provides privacy of data exchange using the DES al- 
gorithm.  An  example  of  a  meta-security  protocol  would 
be MultiSecurity, which uses multiple basic security micro- 
protocols to provide stronger guarantees.  Each type is now 
described in turn. 
Basic  security  micro-protocols. 
The  basic  security 
micro-protocols  are  simple,  typically  consisting  of  two 