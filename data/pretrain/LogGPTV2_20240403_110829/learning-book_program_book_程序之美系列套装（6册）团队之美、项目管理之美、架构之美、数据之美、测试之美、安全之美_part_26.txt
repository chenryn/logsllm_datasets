取出一定的设计，画在白板上，然后深入讨论相关的变化。一旦大
方向没有问题，Pau就和我去他的格子间里面开始工作。
做了几分钟之后，我们遇到一个问题，于是重新阅读详细的用例。
其中有一块解释区域。半个小时之前，我们刚跟Johnmy讨论过，但
说：“不是的，在这种情况下，我们应该记录日志信息，然后继续
处理。你想的是用例扩展4B，那是下周的工作。”
当然，我们讨论（有礼貌地争论）了20分钟。突然我明百了，我们
回，
来，越过格子间的墙，看到Johnny就在他的办公室里面，门开着，
离我们就四五米远。我很惊讶他没有听到我们的话。不到一分钟，
Johnny就解决了我们的问题。不用发送电子邮件，没有尚未回答的
语音邮件，不需要启动需求评审过程。我们问Johnny，他给出回
答，我们就返回去继续工作。
可能有些人会说我们需要更好的规格说明，也许有些人会说用例要
加入更多细节。能有文档当然是好事一桩，可我觉得那样的工作量
并不能帮助我们，而且也不划算。要是想做到我们不需要让客户澄
140
---
## Page 142
清需求，那文档的细节永远都是不够的，而且也不好用。唯一具备
所有细节的需求形式就是代码。
还有其他情况，我们也需要客户澄清需求。很多时候，Johnnmy要求
离开一下，要去研究现有的代码库。我们正在重新设计的遗留应
用，其实也是我们事实上的需求文档的一部分。它是唯一足够详细
的文档，可以回答一些我们提出的、事关需求核心的问题。如果所
有这些核心需求都记录到文档中，那个文档恐怕就会像具体实现代
码一样详细了，可能也没多大作用。
问题出现
一切进展都很顺利，直到那个充满不祥之兆的周一上午。我们最新
的工程师Wally不请自来，而且带有某种情绪。他跟Ellen有点儿过
节，马上就开始开一些很粗鲁的玩笑，深深伤害了Ellen。我让他不
要这么做，他坚持说自己只是并玩笑而已，但是人们都能看出来
Ellen很受伤。像刀子一样的玩笑仍未停止。
大公司有这种坏习惯，人们被看作是一架机器的零件。第一个标志
就是把人们称为资源。管理层中的某个人认为Wally是可被替换的编
程工作单元。由于某种所谓“可用资源"的说法和项目的优先级，
Wally给我们带来了这个灾难性的上牛。
Wally很聪明，但是他根本不了解我们团队的文化。我们的团队协作
程度很高，对于项目在流程和技术方面提出的挑战，我们都感到很
兴奋。所有的团队成员都很认同团队，而且希望成为它的一份子，
并遵循我们已有的标准和工作道德规范。Wally不知道、也不想知道
我们为什么要写测试。他不知道为什么我们不会先做大量的设计工
作。他不了解短选代，而且令人惊讶的是（也许不奇怪）：他不适
合作为结对编程的伙伴。他的幽默感扰乱了站立会议和结对编程的
过程。
我很快就发现，wally不适合呆在我们团队。Fred想让我们尝试将他
融入进来。我们试过了，但是沙子跟隐形眼镜清洗药水是无法友好
相处的，它太伤人了。最后，Fred从我们的角度考虑问题，把Wally
移出了团队。在他与我们一起的短短几天内，整个团队的士气和产
出都降低了。
构成团队的是人，不是资源
141
---
## Page 143
这里有一个很重要的教训。人们不是可随意替换的零件。一粒老鼠
屎真的会坏一锅汤。某人的情绪不对头，真的会毒害整个协作团
队。我想象Wally这样的人就适合呆在格子间里面，等着别人分配让
他一个人做的工作。他还可能做得相当成功呢。但那不是我们团队
想要的工作方式。在我的职业生涯中，我最喜欢的就是像这样的、
互相协作的时光：最不喜欢的就是因为某人的恶劣态度所造成的伤
害。
Wally最终被送走后，我们恢复了过来。工作文充满了乐趣，而且产
出了很多成果。
公司在自寻烦恼
极限编程的实践之一，就是使用开放的工作空间。这个实践包括给
团队属于自已的空间去工作。中间是一张大桌子。项目信息遍布在
四周的墙上。电脑都放在桌子上，便于协作。
我们没有开放的工作空间，而且我们发现在格子间中工作很不舒
服。显示器放在角落里面，这让协作变得很困难。我们开始讨论拆
掉一些格子间的墙，这样就有了能够顺畅沟通和协作的空间。
我请求Johnny移去一些墙。他说：“我们不能那么做，有些工会的人
负责设置所有的办公家具，必须要征取他们的同意。"我已经能看
到电影《OficeSpace》之中的场景了，那个失意的程序员Peter
Gibbons拆掉了固定格子间的墙的螺钉，这些墙倒了下去，他也得以
脱离格子间，获得自由。不过那是不可能发生的。该是去见Bud的
时候了。
我说道：“Bud，格子间的墙影响了我们沟通。我们应该拆掉一些格
子间，给团队腾出些地方。”
“你还是省省吧，那是不可能的。我们对于办公家具的重新摆放有
政策，"Bud叹了口气，说道：“一旦某个办公区域的墙或办公室有
变动，”他边说，边做了个手势，划了大概50个甚至更多个格子间
的面积，“就需要在工程设计书上变动整个区域。”
我回应道：“是的，可那又意味着什么？我们能有并放的办公区域
么？”
142
---
## Page 144
，
道，指向外侧墙那边的个人办公室，“所有这些资深工程师和经理
们就会丢掉他们的个人办公室和门。你不能让这样的事情发生。”
Bud安慰我们，说如果是我们自已内部的流程，他愿意做些什么。
“但是移动一面墙会把工会牵连进来，这里是没有灵活性可言的。”
这场斗争在没有并始之前就已经结束了。我们本该发牢骚抱怨。然
而，我们回头去继续工作，并且接受了现有可能做到的条件。又当
了一回泡菜。
将来的项目
第一个项目成功后，Fred希望让更多团队并始极限编程。这要比预
期的难度大多了。首先，Fred希望其他每个团队都像我们团队这样
运作。“这是我们推进试点项目的工作方式，"Fred告诉我。当然，
BBS有推行新东西的流程，我们可不能打破那个模子！
我警告他，不要强道每个团队使用完全一样的实践。我觉得这是不
可能成功的。每个团队都是独特的，每个团队成员都有独特的技
能。这会有差异，而且他们不能像我们这样拥有流程上的灵活性。
不管怎么说，我们还是做了尝试。那些项目都成功了，这些可替换
的程序员每天交付的高质量软件数量是标准BBS开发项目的2～3
倍。可我们不管怎么试，都不能让每个团队都遵循完全一致的实
践。当然，很多核心都是一样的，但是会有很多变化。每个团队都
找到了自己的方式。
文化，是我遇到的最大障碍之一。他们自豪于自己制定和遵循的流
程，这是他们的文化。这些流程帮助他们完成了很多伟大的事情。
但是他们要变得更快。有些东西必须改变，但是文化会抗拒变化。
一年之后，我跟附近小组的首席工程师聊关，问他们团队是否在用
极限编程。他告诉那样做太麻烦了。团队想要“变得极限化”（这是
Bud的说法），那就得整理一个30页的流程说明，还得经过流程警
察的许可。没儿个项目团队自愿实施下个极限编程项目。
协作成功的要素
我们证明了：要改善现状还是有可能的。我们挑战了现有实践，并
掌握了如何完成工作的全新方法。事实再次向我证明了优秀团队的
重要性。优秀的团队一起工作，比起一帮组织在一起的个人，能够
143
---
## Page 145
完成更多事情。可我们如何才能得到一个有凝聚力、协作良好的团
队呢？
在AlistairCockburn的一篇博客中，我发现了一些有趣的看法，深
入洞察了团队动力学和写作。Alistair说：“只要人们想协作，他们
就会去协作，”他继续说，“但是如何让他们想协作呢？”通过非正式
的研究，他发现某些行动可以带来协作气氛的提升。下面是最佳行
动纲领的删节版本：
：提升他人：认可他人。
提升安全感：支持其他人，可以挑战别人的想法，但是要予以实
施。
：取得进度：成功孕育成功。
：增加活力：挑战和奉献。
回想起这个故事，我能清晰地在工作中看到Alistair的行动纲领。
Bud对我们团队充满信心，而且愿意提供支持，让我们前进，这对
团队来说是很大的提升。我们的学习和传授风格也提升了个人。而
将Wally分配到团队中就是一个反例。他没有提升其他人，反而打击
了别人的士气。
Bud提供的“自由出狱卡"和对我们提出的流程变更的许可，让我们
有安全感去尝试新东西。他那现实的期望值增强了这种安全感。
团队中的人都很棒。他们技能纯熟，但是不会自认为全知全能。团
队那种“我能做到”的积极态度和持续不断的学习，让工作成为了一
种快乐。早期的成功给予我们信心，大大推进了我们的工作进展。
我们发现了能够起作用的一点：我们让工作进度透明可见。每一天
都有新的成果出现，而且这些成果依赖于团队的写作。我们互相挑
战，也挑战了组织。真是值得牢记的团队经历。即使我不能将泡菜
变成黄瓜，我们还是改变了泡菜的口味！
参考与引用
1.Beck,Kent.1999.Extreme Programming Explained.Reading, MA:
Addison-Wesley.
144
---
## Page 146
2.Grenning,James.2002."Extreme Programming and Embedded Software
Development."Embedded Systems Conference(SanJose,CA).
3.Weinberg,Jerry.1985.The Secrets of Consulting.New York, NY: Dorset
House Publishing.
4.Fowler,Martin.1999.Refactoring.Reading, MA:Addison-Wesley
5.Cockburn,Alistair.2008."Collaboration:the dance of contribution";
hhtp://alistair.cockburn.us/Collaboration%3a+the+dance+of+contribution
第16章更好的实践
SteveMcConnell访谈录
在从事软件工作之后，我们两位编者就一直受到SteveMcConnell的
影响。在我们读过的书籍和文章中，他是最早能够用易于阅读、谈
话式的风格来介绍复杂的软件工程和质量主题的人。Steve对我们的
写作所产生的影响也比其他任何一个人都要大，在写作主题和表达
方式上都对我们产生了深远影响。在某种程度上可以说，是Steve向
我们证明了一本严肃的书也可以用一种非正式的方式来编写。
ScotBerkun是另一位对我们产生巨大影响的人，如果不是因为他，
我们今天也就不可能为OReilly写书了。Scott邀请Andrew担任他的
第一本书（同时也是一本非常出色的书）《MakingThingsHappen》
（项目管理之美）的技术审稿人，我们也正是从那时并始建立了与
OReilly的联系。（他也是我们自已编写的《Applied Software
ProjectManagement》（实用软件项目管理）一书非常有价值的审稿
人）。这样，当Scot主动提出为本书采访Steve时，我们迫不及待地
接受了这个机会，让两位我们尊敬的人坐在一起谈论团队，真是太
好了。
Scott：我首先想问的是你觉得“漂亮团队"这个说法有什么特别之处
参加或管理过的团队有什么关系吗？
Steve：我一般是按照字面理解的，所以漂亮团队这种说法不会让我
产生那么多共鸣。当我听到“漂亮团队"的时候，我估计人们在谈论
一些其他事情，也许他们谈论的是高绩效团队、高质量团队或类似
的团队。
145
---