title:Usable Access Control for the World Wide Web
author:Dirk Balfanz
Usable Access Control for the World Wide Web
Dirk Balfanz
Palo Alto Research Center
3333 Coyote Hill Road, Palo Alto, CA 94304
PI:EMAIL
Abstract
While publishing content on the World Wide Web has
moved within reach of the non-technical mainstream, con-
trolling access to published content still requires expertise
in Web server conﬁguration, public-key certiﬁcation, and a
variety of access control mechanisms. Lack of such exper-
tise can result in unnecessary exposure of content published
by non-experts, or can force cautious non-experts to leave
their content off-line. Recent research has focused on mak-
ing access control systems more ﬂexible and powerful, but
not on making them easier to use. In this paper, we propose
a usable access control systems for the World Wide Web, i.e.,
a system that is easy to use both for content providers (who
want to protect their content from unauthorized access) and
(authorized) content consumers (who want hassle-free ac-
cess to such protected content). Our system can be con-
structed with judicious use of conventional building blocks,
such as access control lists and public-key certiﬁcates. We
point out peculiarities in existing software that make it un-
necessarily hard to achieve our goal of usable access con-
trol, and assess the security provided by our usable system.
1. Introduction
On the World Wide Web, there are content providers
and content consumers. Content providers publish content
by making it available through Web servers. Content con-
sumers view or otherwise consume content by pointing their
Web browsers to the Web servers of the content providers.
In the early days of the World Wide Web, almost everybody
was, in addition to being a content consumer, also a con-
tent provider – if you were technical enough to connect to
the Web, you were probably technical enough to know how
to put up a home page. Then came a time when the bal-
ance shifted dramatically: On one side, there were a few
portals such as Yahoo! springing up, which delivered vast
amounts of content. On the other side, the proliferation of
Web client software and online services such as AOL or
MSN made millions of people content consumers. The re-
sult was a landscape in which we had relatively few signif-
icant content providers, and a large number of content con-
sumers.
This picture is starting to change again. More and more
users are becoming (small) content providers. Today, when
you sign up with an ISP for Internet service, you usually
get a few megabytes of “web space”, which you can use to
put up a web site. Content publishing software and services
make it easier to publish content: Teenagers broadcast mu-
sic they mix through Shoutcast channels. Users share songs
or other ﬁles through peer-to-peer networks. Photo hobby-
ists put their photo collections online. In fact, some applica-
tions make it as easy as pushing a button to export nicely-
formatted photo collections to a web-hosting service.
While it is getting easier and easier for small-time con-
tent providers to publish their content, it is not particularly
easy to do so securely, i.e., to allow content providers to eas-
ily specify who should have access to their content.
Large content providers can afford to manage databases
of subscribed customers, request certiﬁcates from well-
known certiﬁcation authorities, and hire developers to
put access control mechanisms in place. Small con-
tent providers (i.e., individual users), however, often lack
such resources and technical sophistication. They are left
with three choices:
1. They do not put any access control on their content. If
the content provider doesn’t care who sees their con-
tent, this is clearly the correct and easy solution. Of-
ten, however, content providers wish to restrict access
to their content, for example to protect their privacy.
Another reason is that opening up copyrighted or oth-
erwise protected material to unrestricted access makes
those content providers liable under copyright or other
laws.
2. Therefore, if content providers wish to restrict access
to their content, they have to ﬁght with whatever mech-
anism their content publishing software provides for
access control. As we will see in Section 3, this may
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
present an unacceptable overhead both to the content
publisher and content consumers.
3. Finally, content providers may therefore be forced not
to publish their content at all, being dissatisﬁed with
the choice between unrestricted access and having to
master archaic access control mechanisms.
In this paper, we will investigate why controlling access
to published content is not an easy thing to do – and point
out some ways to rectify the situation. In Section 2, we will
re-iterate the issue of usable security, and comment on re-
lated work. In Section 3 we will speciﬁcally look at some
currently existing systems, and how they handle access con-
trol.
In Section 4 we will outline a content publishing sys-
tem that is user-friendly, easy to use, and reasonably se-
cure. Our system uses a custom-built Web server on the con-
tent provider’s side, and off-the-shelf email and Web clients
on the content consumer’s side. Our Web server has a self-
signed root certiﬁcate and issues client certiﬁcates to users.
We construct simple access control lists based on known
public keys of users. We take some care to minimize the
overhead imposed to the user (i.e., number of links to click
on, number and nature of dialog boxes to deal with, etc.).
In Section 5 we will explain why it is difﬁcult to imple-
ment such a system with the building blocks available today
(such as commonly used Web browsers, commonly used au-
thentication protocols, etc.). Finally, we draw some conclu-
sions in Section 6.
2. Background
2.1. Usable Security
One of the reasons that security exploits happen is be-
cause users do not conﬁgure the security of their systems
correctly. Security patches are being ignored, access con-
trols lifted, security warnings about executable content such
as macros dismissed, and protections turned off.
There are two main reasons for this behavior: One, the
user doesn’t understand what’s going on. This is hardly the
user’s fault. For example, in its default setting, Internet Ex-
plorer will ask the user for a decision when a Web page tries
to launch a “ﬁle or program in an IFRAME”. We cannot ex-
pect the average user to understand the security implications
of that decision (see [14] for more examples). The second
reason is that even if the user understands what’s going on,
she may realize that the security mechanisms are in the way
of whatever she wants to do. For example, security mecha-
nisms often prevent the viewing of executable content deliv-
ered through email. If a user is curious what macro-enabled
birthday card she received from her best friend, she will
switch off the security mechanism in order to see the card.
More examples can be found in [2].
The goal of usable security is to relieve the users from
decisions they don’t understand or that they don’t want to
make (most of them boil down to “you will either be in-
secure or you will be inconvenienced”). Security should be
implicit and should follow what the user wants to do. In [13]
Smetters and Grinter point out that SSH is a good exam-
ple of usable security: it works just like rlogin, except
it’s more secure. The user speciﬁes what she wants to do
(log into another machine), and the security mechanism fol-
lows. In [8] Edwards et al. show how a collaborative group-
ware application can be outﬁtted with implicit security. In
their application, users simply specify who should belong to
their work group (which is something they need to do any-
way), and this information is used by the system to enforce
access control on system resources (access is restricted to
members of that work group). Groove1 is a commercial ap-
plication that is similar in that respect – access to shared
spaces is actually secured by SSL without the users nec-
essarily being aware of the fact that access control mecha-
nisms are in place.
Note that one usually pays a price for such convenience.
In SSH, if users are not careful, the ﬁrst connection to a
new host is subject to a man-in-the-middle attack. Edwards
et al.’s Casca application requires users to physically meet
at some point, and Groove sends root certiﬁcates around by
unsecured email. We believe, however, that the overall secu-
rity provided by these applications is better than in conven-
tional, “bullet-proof” approaches, since users are less likely
to turn off security or mismanage their security settings.
For content publishing, implicit security means that we
need to look for actions users have to perform anyway, and
associate reasonable security mechanisms with them. For
example, content providers are likely to announce the ex-
istence of their content to a circle of family and friends,
for example by sending them an email. We can use this ac-
tion to ﬁnd out who should have access to the published
content. Content providers never should have to decide how
access control is enforced. On the other side, content con-
sumers will probably click on a URL to visit the content
provider’s site. This should automatically cause the content
consumer’s Web client to use the necessary credentials to
authenticate itself to the content provider’s Web site, with-
out any further user interaction. In Section 4.1 we will elab-
orate on the usability goals for secure content publishing.
2.2. Trust Management Systems
Trust Management Systems are a great way to express
access control policies, and to enforce access control ac-
cording to those policies. In Keynote [4] one can express
arbitrary conditions for access. For example, one could say
1
http://www.groove.net/
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
that access to a certain resource is only allowed if the moon
is full and the accessor is orange. It would be up to some
other part of the system to determine the phase of the moon
and the color of the accessor, but once those are fed to
Keynote, it can decide whether to grant access. Keynote has
some built-in capabilities to handle cryptographic keys, but
it is not very comprehensive when it comes to delegation
certiﬁcates or role-based access control. Binder [6] is a lan-
guage that allows such statements to be made. In [3], Bauer
et al. introduce an even more general access control lan-
guage – they simply use high-order logic to express access
control policies2. The idea to use logic-based languages to
express policies was originally introduced in [1].
As much power as these trust management systems give
the content provider to specify who is allowed to access
what under which conditions, they all suffer from being too
technical for the non-expert content provider. They may be
justiﬁed as the enforcement mechanisms that runs “under
the hood”, but if users can’t be bothered to remember a pass-
word [2], then we can hardly expect them to write down a
Binder program to specify their access control policy.
Even the old-style, inﬂexible but supposedly easy-to-use,
identity certiﬁcates provided by X.509 [11] prove to be too
much of a hassle. To install a new certiﬁcate, for example,
users may have to go through a number of dialog boxes,
making decisions about certiﬁcate stores and key ﬁnger-
prints (see Figure 3 later in the paper).
We see that in the past, a lot of effort in the area of trust
management systems has gone into making them more ﬂex-
ible. Little concern has been given to the fact that non-expert
users might want to control access to their content.
3. Controlling Access to Content – The State
of the Art
In this section, we will give anecdotal evidence as to the
state of the art of access control in publishing systems for
the World Wide Web.
.MAC Apple’s .MAC Web hosting service is tightly inte-
grated with some applications available for the Macintosh.
For example, in Apple’s “iPhoto” digital photo management
application, it requires just little more than pressing of a but-
ton to export a photo collection to the .MAC hosting service.
There, the photos can be accessed from any Web client. If
a user wants to protect access to some of her online photo
collections, she can “password-protect” them. This involves
picking a password, telling the .MAC service that password,
and somehow distributing it to a set of authorized clients.
This is both insecure and not very user-friendly. First, the
password is likely to be weak.3 Second, it is probably com-
municated insecurely. Third, it is trivial for such a password
to be passed on to people the original content publisher did
not want to grant access to.
Web Servers Web servers such as Apache, Tomcat, or IIS
offer sophisticated access control mechanisms. Apache and
Tomcat give examples of a clean separation between au-
thentication and authorization. On one hand, site adminis-
trators can specify how users are authenticated, e.g., through
passwords or through client authentication using X.509 cer-
tiﬁcates. On the other hand, they can specify which of those
users are authorized to access which resource on the system.
While this separation makes a lot of sense, it does add com-
plication to the setup process. None of these servers have
tools to provide users with the necessary credentials (e.g.,
passwords or certiﬁcates) to authenticate to the server.
IIS is somewhat of an exception, since it provides a mode
in which authentication is “integrated” with a Windows Do-
main. All the site administrator needs to do is check the cor-
responding box to specify integrated Windows authentica-
tion. Then, authorization is delegated to the access control
lists protecting resources on the ﬁle system (i.e., a user can
access a resource served out by a Web server if and only
if she can also access that resource directly through the ﬁle
system). Now, specifying authorization for Web access is as