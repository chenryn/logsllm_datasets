m
d
y
a
w
-
2
y
a
w
-
8
y
a
w
-
4
y
a
w
-
6
1
equake
a
f
y
a
w
-
2
y
a
w
-
4
y
a
w
-
8
y
a
w
-
6
1
swim
Figure 7. Loss in fault recovery coverage. 
4. Fault injection experiments 
We perform fault injection on a detailed cycle-level 
simulator that models a microarchitecture similar to the 
MIPS R10K processor [5]. 
For  each  benchmark,  one  thousand  faults  are 
randomly injected on the decode signals from Table 2. 
Injecting a fault involves flipping a randomly selected 
bit. A separate “golden” (fault-free) simulator is run in 
parallel with the faulty simulator. When an instruction 
is  committed  to  the  architectural  state  in  the  faulty 
simulator, it is compared with its golden counterpart to 
determine  whether  or  not  the  architectural  state  is 
being corrupted. Any fault that leads to corruption of 
architectural state is classified as a potential silent data 
corruption  (SDC)  fault.  Likewise,  if  no  corruption  of 
architectural state is observed for a set period of time 
after a fault  is injected (the observation window),  it is 
classified  as  a  masked  fault.  In  this  study,  we  use  an 
observation window of one million cycles. 
An  injected  fault  may  lead  to  one  of  six  possible 
outcomes,  depending  on  (1)  whether  the  fault  is 
detected by an ITR check (“ITR”) or undetected within 
the scope of the observation window (“MayITR”)1 or 
undetected  for  sure  (“Undet”),  and  (2)  whether  the 
fault  corrupts  architectural  state  (“SDC”)  or  not 
(“Mask”). Based on this, the six possible outcomes are 
ITR+SDC, 
MayITR+SDC, 
MayITR+Mask, Undet+SDC, and Undet+Mask. 
1 A fault may not get detected within the scope of the observation 
window,  but  its  corresponding  faulty  signature  may  still  be  in  the 
ITR cache. In this case, it is possible that the fault will be detected by 
ITR  in  the  future,  but  we  would  have  to  extend  the  observation 
window to confirm this. 
ITR+Mask, 
Table 2. List of decode signals. 
Field
opcode
flags
shamt
rsrc1
rsrc2
rdst
lat
imm
Description
instruction opcode 
decoded control flags (is_int, is_fp, 
is_signed/unsigned, is_branch, is_uncond, 
is_ld, is_st, mem_left/right, is_RR, 
is_disp, is_direct, is_trap)
shift amount
source register operand
source register operand
destination register operand
execution latency
immediate
Width
8
12
5
5
5
5
2
16
2
1
3
64
num_rsrc number of source operands
num_rdst number of destination operands
mem_size size of memory word
Total width
recovery 
We  further  qualify  ITR+SDC  outcomes  with  the 
possibility  of 
(ITR+SDC+R)  or  only 
detection (ITR+SDC+D). On detecting a fault through 
ITR, if the signature accessing the ITR cache is faulty 
as opposed to the signature within the cache, then, the 
fault is recoverable by flushing the ROB (discussed in 
Section 2.3). 
We  add  two  more  fault  checks  to  support  our 
experiments. A watchdog timer check (wdog) is added 
to detect deadlocks caused by some faults (e.g., faulty 
source registers). A sequential-PC check (spc) is added 
at retirement (discussed in Section 2.5) to detect faults 
pertaining to control flow. 
In  the  following  experiments,  we  use  a  two-way 
set-associative ITR cache holding 1024 signatures. The 
breakdown  of  fault  injection  outcomes  is  shown  in 
Figure 8. We show fault injection results for the same 
set  of  SPEC  benchmarks  whose  coverage  results  are 
reported  in  Section  3.  As  seen,  a  large  percentage  of 
injected  faults  are  detected  through  the  ITR  cache 
(95.4% on average). On average, 32% of the injected 
faults  are  detected  and  recovered  by  ITR  that  would 
have  otherwise  led  to  a  SDC  (ITR+SDC+R).  Only  a 
small  percentage  (1%  on  average)  of  SDC  faults 
detected 
recoverable 
(ITR+SDC+D).  A  large  percentage  of  faults  that  are 
detected  by  ITR  happen  to  get  masked  (59.4%  on 
average). When a fault is injected on a decode signal 
that is not relevant to the instruction being decoded or 
does  not  lead  to  an  error  (e.g.,  increasing  lat,  the 
execution  latency,  only  delays  wakeup  of  dependent 
instructions),  then  the  fault  gets  masked,  but  the 
signature is faulty and gets detected by the ITR cache. 
A  noticeable  fraction  of  faults  (3%  on  average)  are 
detected  and  recovered  by  ITR  that  would  have 
otherwise 
(ITR+wdog+R), 
highlighting another important benefit. 
to  a  deadlock 
through 
The fraction of faults undetected by ITR within the 
observation  window  (MayITR+*)  is  negligible.  This 
led 
ITR 
is 
not 
indicates that a one million cycle observation window 
is sufficient. 
Interestingly,  the  sequential  PC  check  detected  a 
small  fraction  of  faults  (0.1%  on  average)  that  ITR 
alone could not detect (spc+SDC). The sequential-PC 
check mainly detected faults on the is_branch control 
flag, which indicates whether or not an instruction is a 
conditional  branch.  Consider 
the  following  fault 
scenario.  Suppose  that  the  fetch  unit  predicts  an 
instruction to be a conditional branch (BTB hit signals 
a  conditional  branch  and  gshare  predicts  taken). 
Suppose  the  instruction  is  truly  a  conditional  branch 
(BTB  correct)  and  is  actually  not  taken  (gshare 
incorrect). Then suppose that a fault causes is_branch 
to  be  false  instead  of  true.  First,  this  fault  causes  a 
SDC  because  the  branch  misprediction  will  not  be 
repaired.  Second,  because  is_branch  is  false,  the 
retirement PC is updated in a sequential way. The spc 
check  will  fire  in  this  case,  because  the  next  retiring 
instruction is not sequential. Note that if the prediction 
was  correct  (actually  taken),  the  spc  check  still  fires, 
but this is a masked rather than SDC fault. 
On average, 4.5% of injected faults go undetected 
by ITR. Only about 2.6% of the faults lead to SDC and 
are  not  detected  by  ITR  (Undet+SDC).  A  very  small 
fraction of faults (0.1% on average) lead to a deadlock 
that  is  not  detected  by  ITR  but  is  caught  by  the 
watchdog  timer.  The  remaining  undetected  faults  are 
masked (on average, 1.8% of all faults). 
5. Area and power comparisons 
Structural  duplication  can  be  used  to  protect  the 
fetch  and  decode  units  of  the  processor.  In  the  IBM 
S/390  G5  processor  [4],  the  I-unit,  comprised  of  the 
fetch and decode units, is duplicated and signals from 
the  two  units  are  compared  to  detect  transient  faults. 
However, this direct approach has significant area and 
power overheads. We attempt to compare the area and 
power  overhead  of  the  ITR  cache  with  that  of  the  I-
unit, to see whether or not the ITR-based approach is 
attractive compared to straightforward duplication. The 
die photo of the IBM S/390 G5 provides the area of the 
I-unit  [4].  To  estimate  the  area  of  the  ITR  cache,  a 
structure is selected from the die photo that is similar 
in  configuration  to  the  ITR  cache.  The  branch  target 
buffer (BTB) of the G5 has a configuration similar to 
the ITR cache: 2048 entries, 2-way associative, 35 bits 
per entry [15]. Based on the decode signals in Table 2, 
the size of the ITR signature is 64 bits. Though each 
ITR  entry  is  almost  twice  as  wide  as  the  G5’s  BTB 
entry,  only  half  as  many  entries  as  the  BTB  (1024 
entries) are needed for good coverage, from results in 
Section 3 and Section 4. 
100
90
80
70
60
50
40
30
20
10
0
d
e
t
c
e
j
n
i
s
t
l
u
a
f
l
a
t
o
t
f
o
%
Undet+SDC
Undet+wdog
Undet+Mask
spc+SDC
MayITR+SDC
MayITR+Mask
ITR+wdog+R
ITR+SDC+R
ITR+SDC+D
ITR+Mask
gap
gcc
parser
perl
twolf
vortex
vpr
applu
equake
apsi
swim
Avg
Figure 8. Fault injection results. 
The area of the I-unit from the die photo is 1.5 cm x 
1.4  cm,  i.e.,  2.1  cm2.  The  area  of  the  ITR-cache  like 
BTB structure from the die photo is 1.5 cm x 0.2 cm, 
i.e., 0.3 cm2. The ITR cache is about one seventh the 
area  of  the  I-unit.  Hence,  the  ITR-based  approach  to 
protect 
than 
structural duplication of the entire I-unit. 
is  more  area-effective 
the  frontend 
We next try to find the power-effectiveness of the 
ITR  approach.  A  major  power  overhead  of  structural 
duplication  and  conventional  time  redundancy  is  that 
of  fetching  an  instruction  twice  from  the  instruction 
cache.  We  model  power  consumption  by  measuring 
the  number  of  accesses  to  the  ITR  cache  and  the 
instruction cache of the processor. Both cache models 
are  fed  into  CACTI  [17]  to  obtain  the  energy 
consumption  per  access.  Multiplying  the  number  of 
accesses with the energy consumed per access gives us 
the energy consumption. 
Due to lack of information on the instruction cache 
configuration  of  the  IBM  S/390  G5,  we  chose  the 
instruction  cache  of  the  IBM  Power4  [16].  The 
configuration of the Power4 I-cache is: 64KB, direct-
mapped,  128  byte  line  and  one  read/write  port.  The 
configuration of the ITR cache is: 8KB (1024 entries), 
2-way associative, 8 byte line, and one read/write port 
(or  one  read  and  one  write  port).  We  chose  the  0.18 
micron technology used in the IBM Power4. 
The CACTI numbers were: 0.87 nJ per access for 
the I-cache, 0.58 nJ per access (or 0.84 nJ for separate 
read and write ports) for the ITR cache. Overall energy 
consumption is shown in Figure 9. As seen, the ITR-
based  approach  is  far  more  energy  efficient  than 
fetching twice from the instruction cache. Note that the 
energy savings will be even greater if also considering 
the redundant decoding of instructions in the frontend 
in the case of structural duplication or traditional time 
redundancy. 
ITR cache 1rd/wr
ITR cache 1rd+1wr
I-cache 1rd/wr
100
)
J
m
(
y
g
r
e
n
E
90
80
70
60
50
40
30
20
10
0
bzip
gap
gcc
mgrid
applu
gzip
parser
perl
twolf
equake
apsi art
vortex vpr
wupwise
swim
Figure 9. Energy of ITR cache vs. I-cache. 
We  see  that  the  ITR  cache  is  more  cost-effective 
than  straightforward  space  redundancy  in  the  IBM 
mainframe processor [4]. However, it should be noted 
that  complete  structural  duplication  provides  more 
robust fault tolerance than the ITR cache. They are two 
different design points in the cost/coverage spectrum. 
6. Related work 
Prior research on exploiting program repetition has 
focused on reusing previous instruction results through 
a  reuse  buffer 
total  number  of 
instructions executed [1][2]. Instruction reuse has also 
been  used 
the  number  of  redundant 
instructions  executed  in  a  time-redundant  execution 
to  reduce 
to  reduce 
the 
model  [8].  In  the  latter  work,  the  goal  was  to  reduce 
function unit pressure. Instead of executing two copies 
of  an  instruction  using  two  function  units,  in  some 
cases  it  is  possible  to  execute  one  copy  using  a 
function unit and the other copy using a reuse buffer. 
ITR  reduces  pressure  in  the  fetch  and  decode  units, 
whereas their approach requires fetching and decoding 
all  instructions  twice.  In  other  words,  their  approach 
only addresses the execution stage and is an orthogonal 
technique  that  could  be  used  in  an  overall  fault 
tolerance regimen. 
is  pricier 
Amongst the several proposals to reduce overheads 
of  full-redundant  execution,  using  ITR  to  protect  the 
fetch and decode units could improve approaches that 
either do not offer protection to the frontend [9][12], or 
trade  performance  for  protection  by  using  traditional 
time-redundancy  in  the  frontend  [10][11].  In  general, 
frontend  bandwidth 
than  execution 
bandwidth.  By  using  ITR  to  protect  the  frontend, 
traditional 
focused  on 
exploiting idle execution bandwidth [10][11][12][13]. 
ITR-based  fault  checks  augment  the  suite  of  fault 
checks  available  to  processor  designers.  Developing 
such a regimen of fault checks to protect the processor 
(e.g.,  [3])  will  lead  to  low-overhead  fault  tolerance 
solutions  compared 
space 
redundancy or time redundancy approaches. 
7. Summary 
time-redundancy  can  be 
to  more  expensive 
We  introduced  a  new  approach  to  develop  low-
overhead  fault  checks  for  a  processor,  based  on 
inherent  time  redundancy  (ITR)  in  programs.  We 
proposed  the  ITR  cache  to  store  microarchitectural 
events  that  depend  only  upon  program  instructions. 
We  demonstrated  its  effectiveness  by  developing 
microarchitectural  support  to  protect  the  fetch  and 
decode  units  of  the  processor.  We  gave  insights  on 
diagnosing  a  fault  to  determine  the  correct  recovery 
procedure. We quantified fault detection coverage and 
fault recovery coverage obtained for a given ITR cache 
configuration. Finally, we showed that using the ITR-
based approach is more favorable than costly structural 
duplication and traditional time redundancy.  
8. Acknowledgments 
We  would  like  to  thank  the  anonymous  reviewers 
for  their  helpful  comments  in  improving  this  paper. 
We  thank  Muawya  Al-Otoom  and  Hashem  Hashemi 
for  their  help  with  area  and  power  experiments.  This 
research  was  supported  by  NSF  CAREER  grant  No. 
CCR-0092832,  and  generous  funding  and  equipment 
donations  from  Intel.  Any  opinions,  findings,  and 
conclusions or recommendations expressed herein are 
those of the authors and do not necessarily reflect the 
views of the National Science Foundation. 
9. References 
[1]  A.  Sodani  and  G.  S.  Sohi.  Dynamic  instruction  reuse. 
ISCA 1997. 
[2]  A.  Sodani  and  G.  S.  Sohi.  An  empirical  analysis  of 
instruction repetition. ASPLOS 1998. 
[3]  V.  K.  Reddy,  A.  S.  Al-Zawawi  and  E.  Rotenberg. 
Assertion-based microarchitecture design for improved fault 
tolerance. ICCD 2006. 
[4] T. J. Slegel et al. IBM’s S/390 G5 microprocessor design. 
IEEE Micro, March 1999. 
[5] K. C. Yeager. The MIPS R10000 superscalar processor. 
IEEE Micro, April 1996. 
[6]  R.  Teodorescu,  J.  Nakano  and  J.  Torrellas.  SWICH:  A 
prototype  for  efficient  cache-level  checkpoint  and  rollback. 
IEEE Micro, Oct 2006. 
[7]  D.  Sorin,  M.  M.  K.  Martin  and  M.  D.  Hill.  Fast 
checkpoint/recovery  to  support  kilo-instruction  speculation 
and  hardware  fault  tolerance.  Tech.  Report:  CS-TR-2000-
1420, Univ. of Wisconsin, Madison. Oct 2000. 
[8] A. Parashar, S. Gurumurthi and A. Sivasubramaniam. A 
complexity 
to  ALU  bandwidth 
enhancement  for  instruction-level  temporal  redundancy. 
ISCA 2004. 
[9]  T.  M.  Austin.  Diva:  A  reliable  substrate  for  deep 
submicron microarchitecture design. MICRO 1999. 
[10] J. Ray, J. C. Hoe and B. Falsafi. Dual use of superscalar 
datapath  for  transient-fault  detection  and  recovery.  MICRO 
2001. 
[11] J. C. Smolens, J. Kim, J. C. Hoe and B. Falsafi. Efficient 
resource  sharing  in  concurrent  error  detecting  superscalar 
microarchitectures. MICRO 2004. 
[12] A. Mendelson and N. Suri. Designing high-performance 
and  reliable  superscalar  architectures  –  The  out  of  order 
reliable superscalar (O3RS) approach. DSN 2000. 
[13]  M.  Franklin,  G.  S.  Sohi  and  K.  K.  Saluja.  A  study  of 
time-redundant  techniques  for  high-performance  pipelined 
computers. FTCS 1989. 
[14] D. Burger, T. Austin and S. Bennett. The simplescalar 
toolset, version 2. Tech Report CS-TR-1997-1342, Univ. of 
Wisconsin, Madison. July 1997. 
[15] M. A. Check and T. J. Slegel. Custom S/390 G5 and G6 
microprocessors. IBM Journal of R&D, vol 43, #5/6. 1999. 
[16]  J.  M.  Tendler  et  al.  Power4  system  microarchitecture. 
IBM Journal of R&D, vol 46, #1, 2002. 
[17]  P.  Shivakumar  and  N.  P.  Jouppi.  Cacti  3.0:  An 
Integrated  Cache  Timing,  Power  and  Area  Model.  Western 
Research Lab (WRL) Research Report. 2002. 
approach 
effective