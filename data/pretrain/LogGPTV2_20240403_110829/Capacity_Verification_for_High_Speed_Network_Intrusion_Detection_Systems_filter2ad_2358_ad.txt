0.7
error:  fraction of short chains detected
0.4
0.5
0.6
2 hops allowed
5 hops allowed
9 hops allowed
0.8
0.9
1
Fig. 5. ROC curves for rejection region S(c).
for more than two hops downstream. As a test for more than ﬁve hops down-
stream or as a test for more than nine hops downstream, the performance of the
simple rejection region based on quan(E, 2α) alone deteriorates.
When there are many hops downstream, the variability introduced by the
machines downstream adds considerable complication. As expected, tolerance for
a big number of downstream hops is more diﬃcult to implement than tolerance
for a small of downstream hops. In practice, the low tolerance policy that rejects
sessions with more than two hops downstream is more useful and realistic.
6 Discussion
The rejection region in Equation 6 classiﬁes an outgoing connection as having
too many hops downstream if the outgoing connection has a packet sequence X
whose 2α(X) value is too small compared to the gaps in set E(X). To test for
an outgoing connection with more than two hops, experiments indicate that the
using cut-oﬀ parameter c = 0.9 would give reasonably accurate results without
high false alarms.
The experiments used a machine on the Stanford University network as the
logging machine. Although a wide range of experiments under diﬀerent settings
showed that the cut-oﬀ parameter c = 0.9 performed well, machine and network
properties can vary considerably. For best results, each deployment can train
on its own machines and networks to determine the optimal cut-oﬀ to meet
prescribed requirements for accuracy and precision.
14
K.H. Yung
6.1 Accuracy and Precision
Most intrusion-detection techniques suﬀer from too many false positives [4]. Be-
cause there is a wide range of network attacks, general intrusion-detection sys-
tems are diﬃcult to design. By narrowing the scope of detection to special types
of attacks, the number of false attacks can be lowered considerably, [2] for ex-
ample.
The problem of connection chains is well-deﬁned and narrow enough to be
considered as a speciﬁc attack. Yet, earlier techniques [8,10] for detecting step-
ping stones identify many harmless, short chains common in practice. Echo-delay
comparison proposed here speciﬁcally addresses these logical false positives and
detects only connection chains with many hops downstream.
On the other hand, echo-delay comparison does not detect the number of
upstream hops in connection chain. From the viewpoint of the recording machine,
only the nearest upstream client is known. If the recording machine is a stepping
stone in a long connection chain but is only one single hop away from the ﬁnal
victim, then the session will not trigger any warning because there are not many
hops downstream. This logical false negative will be addressed in future work.
Because delayed acknowledgments are sent in both directions, an extension of
the current work may prove useful in detecting many hops upstream.
6.2 Hacker Intervention
In the ever-raging battle between hackers and intrusion-detection systems, intel-
ligent hackers always search for new ways to elude detection. Echo-delay com-
parison and previous approaches [8,10] are all susceptible to hacker intervention.
In fact, in a theoretical sense [6], any intrusion detector relying solely on network
logs can be circumvented by carefully manipulating network signals.
The time gap between the client request and the delayed acknowledgment
of the nearest server provides an overestimate of the travel time for one hop
downstream. Since not all downstream hops are equally noisy, two problems
may arise. A fast connection between the client and the nearest server may
over-amplify the slow hops downstream. This conﬁguration does not beneﬁt the
hacker trying to avoid detection though.
Likewise, a slow connection between the client and the nearest server may
mask the fast hops downstream. If the detector is used at its optimal settings, to
detect more than two hops downstream, then there is minimal leeway for hiding
many hops behind the slow ﬁrst connection. Hiding many quick connections on
machines within close proximity would defeat the purpose of using a connection
chain.
A knowledgeable hacker can manipulate the network signals. To elude detec-
tion, the hacker may delay and suppress the delayed-acknowledgment signal and
the reply-echo signal. Because the analysis in this paper uses aggregate statistics,
targeting a few signals will not thwart the detector. Manipulating many signals
simultaneously without adversely aﬀecting the dynamics of the connection chain
would be diﬃcult even for the skilled hacker.
Detecting Long Connection Chains of Interactive Terminal Sessions
15
7 Summary
Echo-delay comparison monitors an outgoing connection to estimate two impor-
tant time gaps. First, the gap between the client request and the server delayed
acknowledgment estimates the round-trip travel time between the client and the
server. Second, the gap between the client request and the server reply echo
estimates the how far downstream the ﬁnal victim is away. Together these two
time gaps provide a simple test to identify a session whose ﬁnal victim is many
hops downstream.
Unlike previous approaches for detecting stepping stones, echo-delay compar-
ison works in isolation, without matching for similar sessions on the same con-
nection chain. Moreover, this new strategy will allow benign, short connection
chains common in practice. Echo-delay comparison makes use network signals
found in interactive terminal sessions, such as telnet, rlogin, and secure shell.
Experiments demonstrate that the technique is eﬀective under a wide range of
conditions and performs especially well in identifying sessions with more than
two hops downstream.
Acknowledgments. This research project was funded in part by the US De-
partment of Justice grant 2000-DT-CX-K001. Jeﬀrey D. Ullman of the Stanford
University Computer Science Department introduced the author to the ﬁeld
of intrusion detection and oﬀered invaluable advice throughout the past year.
Jerome H. Friedman of the Stanford University Statistics Department provided
important feedback in several discussions. The author is grateful for their help
and extends his delayed acknowledgment, long overdue.
References
1. Stefan Axelsson. “Intrusion Detection Systems: A Survey and Taxonomy.” Tech-
nical Report 99-15, Department of Computer Engineering, Chalmers University,
March 2000.
2. Robert K. Cunningham, et al. “Detecting and Deploying Novel Computer Attacks
with Macroscope.” Proceeding of the 2000 IEEE Workshop on Information Assur-
ance and Security. US Military Academy, West Point, NY, 6–7 June, 2001.
3. Harold S. Javitz and Alfonso Valdes. “The NIDES Statistical Component: De-
scription and Justiﬁcation.” Technical report, Computer Science Laboratory, SRI
International. Menlo Park, California, March 1993.
4. Richard P. Lippmann, et al. “Evaluating Intrusion Detection Systems: The 1998
ARPA Oﬀ-Line Intrusion Detection Evaluation.” Proceedings of DARPA Infor-
mation Survivability Conference and Exposition. DISCEX ’00, Jan 25–27, Hilton
Head, SC, 2000. http://www.ll.mit.edu/IST/ideval/index.html
5. Peter G. Neumann and Phillip A. Porras. “Experience with EMERALD to Date.”
1st USENIX Workshop on Intrusion Detection and Network Monitoring, pages
73-80. Santa Clara, California, USA, April 1999.
6. Thomas H. Ptacek and Timothy H. Newsham. “Insertion, Evasion, and Denial
of Service: Eluding Network Intrusion Detection.” Secure Networks, Inc., January
1998. http://www.aciri.org/vern/PtacekNewsham-Evasion-98.ps
16
K.H. Yung
7. Martin Roesch. “Snort: Lightweight intrusion detection for networks.” 13th Sys-
tems Administration Conference (LISA’99), pages 229–238. USENIX Associations,
1999.
8. Stuart Staniford-Chen and L. Todd Heberlein. “Holding Intruders Accountable on
the Internet.” Proceedings of the 1995 IEEE Symposium on Security and Privacy,
pages 39–49. Oakland, CA, May 1995.
9. W. Richard Stevens. TCP/IP Illustrated Volume 1: The Protocols. Addison-Wesley:
Reading, Massachusetts, 1994.
10. Yin Zhang and Vern Paxson. “Detecting stepping stones.” Proceedings of 9th
USENIX Security Symposium. August 2000.
Multiscale Stepping-Stone Detection:
Detecting Pairs of Jittered Interactive Streams
by Exploiting Maximum Tolerable Delay
David L. Donoho1, Ana Georgina Flesia1, Umesh Shankar2, Vern Paxson3,
Jason Coit4, and Stuart Staniford4
1 Department of Statistics, Stanford University
Sequoia Hall, 390 Serra Mall, Stanford, CA 94305-4065 USA
{donoho,flesia}@stanford.edu
2 Department of Computer Science, University of California at Berkeley
567 Soda Hall, Berkeley, CA 94704
PI:EMAIL
3 International Computer Science Institute
1947 Center St. suite 600, Berkeley, CA 94704-1198
PI:EMAIL
4 Silicon Defense
203 F Street, suit E, Davis, CA95616, USA
{stuart,jasonc}@silicondefense.com
Abstract. Computer attackers frequently relay their attacks through a
compromised host at an innocent site, thereby obscuring the true origin
of the attack. There is a growing literature on ways to detect that an
interactive connection into a site and another outbound from the site
give evidence of such a “stepping stone.” This has been done based on
monitoring the access link connecting the site to the Internet (Eg. [7,11,
8]). The earliest work was based on connection content comparisons but
more recent work has relied on timing information in order to compare
encrypted connections.
Past work on this problem has not yet attempted to cope with the
ways in which intruders might attempt to modify their traﬃc to defeat
stepping stone detection. In this paper we give the ﬁrst consideration
to constraining such intruder evasion. We present some unexpected
results that show there are theoretical limits on the ability of attackers
to disguise their traﬃc in this way for suﬃciently long connections.
We consider evasions that consist of local jittering of packet arrival times
(without addition and subtraction of packets), and also the addition of
superﬂuous packets which will be removed later in the connection chain
(chaﬀ).
To counter such evasion, we assume that the intruder has a “maximum
delay tolerance.” By using wavelets and similar multiscale methods,
we show that we can separate the short-term behavior of the streams
– where the jittering or chaﬀ indeed masks the correlation – from the
long-term behavior of the streams – where the correlation remains.
It therefore appears, at least in principle, that there is an eﬀective
countermeasure to this particular evasion tactic, at least for suﬃciently
long-lived interactive connections.
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 17–35, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
18
D. Donoho et al.
Keywords: Network intrusion detection. Evasion. Stepping Stone.
Interactive Session. Multiscale Methods. Wavelets. Universal Keystroke
Interarrival Distribution.
1 Introduction
Perpetrators launching network intrusions over the Internet of course wish to
evade surveillance. Of the many methods they use, one of the most common and
eﬀective is the construction of stepping stones. In this technique, the attacker
uses a series of compromised hosts as relay machines and constructs a chain of
interactive connections running on these hosts using protocols such as Telnet or
SSH. The commands typed by the attacker on their own host are then passed
along, unmodiﬁed, through the various hosts in the chain. The ultimate victim
of the attack sees traﬃc coming from the ﬁnal host in the chain, and because
this is not the actual origin of the attack, little is revealed about the real location
of the attacker.
An investigator seeking to locate the perpetrator would appear to be stymied
by the need to execute a lengthy and administratively complex ‘traceback’ pro-
cedure, working back host by host, ﬁguring out each predecessor in the chain
step-by-step (based on whatever log records may be available at each stepping-
stone site). For discussion of the use of stepping-stone attacks in high proﬁle
cases – and the diﬃculty of unraveling them – see for example [6] or [3].
An alternate paradigm for stepping-stone detection entails the installation of
a stepping-stone monitor at the network access point of an organization (such as
a university or other substantial local network). The monitor analyzes properties
of both incoming and outgoing traﬃc looking for correlations between ﬂows that
would suggest the existence of a stepping stone [7,11,8]. See Figure 1.
This tradition of work has all been concerned with traceback of interac-
tive connections: traceback of short non-interactive connections is harder and
is presently unaddressed in the literature. Nor do we address it here. However,
the interactive traceback problem is of interest, since there are many tasks that
attackers must perform interactively. If the hacker has a goal beyond just com-
promising machines for zombies, if he or she really wishes to exploit a particular
site for criminal ends, then the creative exploration and understanding of the
newly compromised site requires a signiﬁcant amount of human time, and for
this one or more interactive sessions are highly desirable.
Attackers who are aware of the risk of monitors looking for stepping stones
can attempt to evade detection of their stepping stones by modifying the streams
crossing the network access point so that they appear unrelated. Since the
stepping-stone hosts are under their control, we must assume that attackers
can arbitrarily modify their traﬃc in such evasion attempts. A wide spectrum
of possible evasions might be considered; in the worst case, the information the
attacker truly wishes to transmit could be embedded steganographically in con-
nections that appear to be quite unrelated, both as regards content and traﬃc
properties. On the other hand, such evasions might be very inconvenient to de-
sign, implement and use. It is of considerable interest to understand how well
Multiscale Stepping-Stone Detection
19
External
Internet
Connections
Univ.edu
Correlation
Finder
Fig. 1. Stepping-Stone Monitor
the various evasion techniques can work, and under what circumstances they can
be defeated by monitoring techniques – particularly the ones that are easiest to
deploy.
In this article we consider evasions based on keeping within the Telnet/SSH
connection paradigm – which is obviously the most convenient for the attacker
– and simply modifying the traﬃc being handled through the Telnet or SSH
connections. We discuss a class of evasions to the monitoring techniques based
on local timing perturbations, in which the stepping stone simply adds delay in
more or less random amounts to traﬃc crossing the stepping stone. However,
we assume that there is a maximum tolerable delay that the attacker is will-
ing to introduce (since humans are not able to work eﬀectively over interactive
connections with very long latencies). We give a theoretical result that such
packet conserving evasions are ineﬀective against appropriate correlation based
on multiscale analysis using wavelets, at least in the limit of long connections.
We then consider the case of attackers who add extra packets into their
connection, but still wish to have it look interactive. Again, we show that for
long enough connections, it will be possible to correlate the two connections
despite the added packets.
This suggests that the attacker wishing to evade stepping stone detection
would be ill-advised to rely solely on local timing jitter or addition of chaﬀ
packets to connections. Based on our analysis, it appears that the most likely
approach will require abandoning connection chains that use only standard in-
teractive protocols, such as Telnet or SSH, for more sophisticated schemes, that
can steganographically add traﬃc to connections that look like something else.
These tools will be correspondingly harder to install and use. However, we also
note that our results are primarily asymptotic, and require further analysis to
20
D. Donoho et al.
determine the degree to which attackers can still evade detection within the
framework by keeping their connections suﬃciently short.
2 Previous Approaches
Staniford and Heberlein (1995) [7] initiated the literature of stepping-stone de-
tection by considering chain-of-Telnet connections, in which the content is trans-
mitted in the clear, and therefore could be statistically analyzed. Their approach
was to tabulate character frequencies during set time intervals over all Telnet
connections into and out of a domain, and to compare the tables of character
frequencies looking for suspiciously good matches. As a technical feature, they
used statistical analysis tools (principal components) to reduce the dimension-
ality of the feature vector, enabling rapid comparisons of features of diﬀerent
connections.
The increasing use of SSH and other encrypted modes of communication in
recent years makes it important to develop a tool which does not require access
to the actual transmitted content. Zhang and Paxson (2000) [8] developed an
activity-based rather than content-based approach, which in particular could be
used with chain-of-SSH connections. Their approach was based on the observa-
tion that interactive sessions have a strong “on–oﬀ” structure. Given this, one
can then monitor the “oﬀ” periods of connections looking for suspicious coinci-
dences of connections making nearly simultaneous transitions to an “on” period.
They developed an on-line algorithm for looking for stepping stones and showed
they could do this in practice at a large site (though it turned out that most of
the stepping stones found were innocent).
Yoda and Etoh (2000) [11] also considered the problem of comparing interac-
tive network connections that might be encrypted and they too relied on timing
properties of the connection. However, they based their approach on looking at
the average time lag between one connection and another, minimized over pos-