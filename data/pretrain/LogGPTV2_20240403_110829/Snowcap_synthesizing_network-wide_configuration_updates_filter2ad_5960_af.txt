advertise each of the 5 different FECs with probability 50%. Every
generation is seeded, such that statistics correspond to the same
configuration and can be compared.
Initial configuration. Initially, every router has an iBGP session
with the route reflector of its component. In addition, all links
connecting the two components are disabled. All link weights of
the second network are scaled down by a factor of 10.
Reconfiguration. During the reconfiguration, we enable the links
connecting the two networks and scale up the link weights of the
one network by a factor of 10, to match the range of the other.
Additionally, we connect the two route reflectors as iBGP peers.
Results. Fig. 10 shows the full results of performing the reconfig-
uration on 42 networks from Topology Zoo. Since not all networks
in the Topology Zoo collection contain two external devices, con-
nected to different internal routers, we could not use every network.
B DEPENDENCIES WITHOUT IMMEDIATE
EFFECT
Intuitively, dependencies without immediate effect are violations
caused by configuration commands early in the reconfiguration
process that do not manifest themselves until several commands
later. Formally, we define them as follows:
Definition B.1 (Dependencies without immediate effect). let Q be a
set of commands, and ϕ be the specification. Then, G ⊆ Q contains
dependencies with no immediate effect, iff there exists a subset
д ⊂ G and an ordering oд ∈ P(д) (where P(·) is the set of all
possible permutations), for which the following two conditions
hold:
д ̸|= ϕ,
д ∈ P(G \ д) : (oд + o′
(1) oд|=ϕ,
(2) ∀o′
(3) ∃o ∈ P(G) : o |= ϕ.
Based on the Definition B.1, we can see that if there exists such
a dependency G, and if the ordering oд is explored first, then the
simple exploration algorithm (§4.1) needs to backtrack until the de-
pendency is solved. The example reconfiguration, depicted in Fig. 4,
contains a dependency without immediate effect. The sequence
a b |= ϕ is valid, but for both options: a b c ̸|= ϕ and a b d ̸|= ϕ.
Hence, the simple exploration algorithm needs to backtrack, until
the problem is solved (which is the case for the sequence d c a b
|= ϕ).
Figure 10: The reconfiguration costs of a random order com-
pared to the ideal costs. This is an extended version of Fig-
ure 3.
012WideJpnVisionNetVinarenUunetUranUninett2011UniCSwitchL3SanetRhnetRestenaRenater2010MissouriJgn2PlusJanetlenseIstarIowaStatewideFiberMapInternodeIijHiberniaUkHiberniaNirelandHiberniaCanadaHarnetGtsRomaniaGtsHungaryGtsCzechRepublicGarr201201FunetFatmanEsnetDfnCwixChinanetCesnet201006CanerieBtNorthAmericaBtEuropeBtAsiaPacBsonetEuropeBeyondTheNetworkBelnet2006AirtelCost(traﬃcshifts)RandomorderIdealcostSynthesizing Network-Wide Configuration Updates
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
C SPECIFICATION
C.1 Linear Temporal Logic
In the following, we describe all modal operators in LTL, and how
to evaluate them on a sequence of states w:
state and all future states.
state, or any of the future states.
• ϕ: The expression ϕ holds in the current state.
• Xϕ (neXt): The expression ϕ holds in the next state.
• Fϕ (Finally): The expression ϕ must hold in either the current
• Gϕ (Globally): The expression ϕ must hold in the current
• ψ U ϕ (Until): The expression ψ must hold, until the expres-
sion ϕ holds. ϕ must hold eventually. In the state, where ϕ
holds, ψ is not required to hold too.
• ψ R ϕ (Release): The expression ϕ must hold, until the ex-
pression ψ holds. The expression still evaluates to true, if ψ
never holds, but ϕ holds indefinitely. In the state, where ϕ
holds, ψ must hold too.
• ψ W ϕ (Weak until): The expression ψ must hold, until the
expression ϕ holds. The expression still evaluates to true, if
ϕ never holds, but ψ holds indefinitely. In the state, where ϕ
holds, ψ is not required to hold too.
• ψ M ϕ (strong release): The expression ϕ must hold, until
the expression ψ holds. ψ must hold eventually. In the state,
where ϕ holds, ψ must hold too.
C.2 Error Comparison with LTL
For comparing errors, we wish to extract a reason for why an LTL
expression ϕ does not hold weakly for a given sequence of states
w. In the following, we will denote a (partial) sequence of states
w = (s1, s2, . . . , sn), which has a finite length |w| = n. w |= ϕ
denotes that ϕ holds weakly on w. We denote wi = (si) to be the
state of w at position i, and wi ..j = (si , si +1 . . . , sj) to be the partial
sequence of w.
Assume we are given a sequence w, with |w| = n, where w ..n−1 |=
ϕ, but w ̸|= ϕ. We define the reason for a sequence w to be a set of
propositional variables, which, if changed in the last state wn of
w to form w∗, w∗ |= ϕ. Note, there must exist at least one set of
propositional variables, for which the statement before holds, since
w ..n−1 |= ϕ. More formally:
Definition C.1 (reason). Given ϕ, and a sequence w with |w| = n,
where w ..n−1 |= ϕ, but w ̸|= ϕ. The reason ϵϕ(w) for w ̸|= ϕ is given
by:
ϵϕ(w) =(cid:110)
p ⊆ wn | (w ..n−1
(cid:111)
, wn
p ) |= ϕ
,
where wn
propositional variables in p have changed.
p represents a state, similar to wn, where the value of all
w
As an example, assume w = ((x1, x2),(x1,¬x2)). and ϕ = x1 ∧ x2.
In this case, w ..1 |= ϕ, but w ̸|= ϕ. Then, ϵϕ(w) = {x2}, since
x2 = (x1,¬¬x2) causes (w ..1
2
D CONVERGENCE GUARANTEES
D.1 Generating rri(x) for BGP
The condition, presented in §5.2 requires the generation of the route
reachability information rri(x) for each route x in the network. In
x2) |= ϕ.
2
, w
= (V, E±
the following, we describe how to compute rri(x) for BGP, but
it can easily be generalized to other protocols. We first build the
two directed graphs G±
bgp) for both the network state
bgp
s− before the reconfiguration step, and s+ after the step, where
the edges e ∈ E±
are labelled e ∈ {U , O, D}, corresponding to
bgp
different BGP sessions, as described by [22]. Then, for each BGP
route x, we traverse both forwarding graphs G±
by following BGP
bgp
forwarding rules. For each matching BGP route map, we generate
a new route x′, which is traversed separately. Then, rri±(x) is the
set of nodes that are reached by x during this traversal.
D.2 Proof of Sufficiency
In the following, we proof that the condition presented in §5.2 is
sufficient, i.e., if there exists a convergence process that result in an
invalid transient network state, then our condition is necessarily
violated.
Definition D.1 (Similar Network States). Two network states s−
and s+ are similar if the following conditions are satisfied:
in s+ or s−.
(1) All routes, that can exist during convergence, are also present
(2) For all routes x, no router v (cid:60) rri(x) can ever learn x.
With careful construction of rri(·), as described for BGP in
App. D.1, the two states s+ and s− are always similar, if s+ can
be reached from s− by applying a single command.
Lemma D.2. If the two states s− and s+ are similar, then Gfsg
contains every possible path in the network during convergence.
Proof of Lemma D.2. In Gfsg, a node u has an edge to a neigh-
boring node v if there exists a route which might reach u, and where
the next hop is v. Since s− and s+ are similar, during construction of
Gfsg, we have considered every route in the network by analyzing
only the converged states s− and s+. Hence, there cannot exist a
route, which might reach u during convergence, but is not present
in Gfsg.
□
Theorem D.3. If the two states s− and s+ are similar, then our
algorithm for checking convergence guarantees is sufficient.
Proof of Theorem D.3. Due to Lemma D.2, the set of all paths
in Gfsg contains every possible path in the network during conver-
gence. Hence, if the conditions are satisfied on all paths, then there
cannot exist an ordering of messages during convergence, which
violates the condition.
□
D.3 Complexity for Convergence Guarantees
To provide the convergence guarantees, Snowcap must first gener-
ate the forwarding supergraph Gfsg, and then enumerate all paths
in Gfsg. We traverse both BGP graphs G±
in a DFS manner to gen-
erate rri±(x), which takes O(|Ebgp|) = O(|R|2). Then, constructing
Gfsg for any given prefix p takes O(|R|) time. Finally, enumerating
all simple paths in the Gfsg takes O(|Efsg|) = O(|R|2) time. Taking
everything together, we can perform the convergence behavior
analysis in O(|P| · |R|2) time.
bgp
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tibor Schneider, Rüdiger Birkner, and Laurent Vanbever
p
b1
lp = 50
r1
r2
Physical link
iBGP Session
(route reflector)
· · ·
p
rN
lp = 100
bN
p
eBGP Session
(prefix p)
iBGP Session
(new session)
Figure 11: Chain gadget with N routers in the chain.
t1
t2
p
r1
p
r2
p
Physical link
eBGP Session
(prefix p)
iBGP Session
(route reflector)
iBGP Session
(peer)
Figure 12: Unstable Gadget, where the order of advertise-
ment changes the final forwarding state.
E SYNTHETIC GADGETS
E.1 Chain Gadget
The chain gadget (see Fig. 11) consists of N + 2 routers, connected
in a single chain. The two routers at the end are border routers,
receiving the same external prefix. The router b1 sets the local-pref
to 50, while bN sets the local-pref to 100. In the initial configuration,
all routers only have an iBGP session with b1 and consequently
use it as egress router. During the reconfiguration, we add an iBGP
session from every router to bN . Since bN announces a route with
higher preference, all routers will choose it as egress in the end.
The only valid command ordering is adding the BGP sessions
from right to left, first adding the session bN → rN , followed by
bN → rN−1, etc. If ri is reconfigured before ri +1, then there will be
a forwarding loop between ri and ri +1.
E.2 Bipartite Gadget
The Bipartite Gadget, depicted in Fig. 13, is based on replicating a
smaller gadget, the Unstable Gadget (see Fig. 12), multiple times. The
Unstable Gadget represents one dependency group and consists of
three reconfiguration commands: a adds the iBGP session u1 → t1,
b adds u2 → t2, and c removes b2 → r2.
If command a is executed first, both t1 and t2 will choose b1 as
egress, but if b is applied before a, then both t1 and t2 will choose
b2. Then, applying c will force r2 to choose bx as an egress, and
hence, cause a forwarding loop between r2 and t1 if and only if b
is executed before a . Hence, the following three sequences a b c ,
a c b and c a b don’t cause a forwarding loop. However, b a c ,
b c a and c b a cause forwarding loops.
GN
.
.
.
G2
bx
10
10
t1
r1
b1
p
G1
a
u1
p
t2
r2
b2
p
b
u2
c
Figure 13: Bipartite Gadget with N groups of size 2. Two ses-
sions a and b are added during reconfiguration, and the
session c
is removed.
F EXHAUSTIVENESS OF SNOWCAP
In the following, we highlight the conditions under which the
divide-and-conquer approach (cf. §4.2) cannot find a solution. In
these cases, Snowcap falls back to the exploration tactic (cf. §4.1),
such that Snowcap remains exhaustive. First, we list all necessary
conditions for such a case, and construct a theoretical example.
Since the exploration phase is exhaustive as long as no depen-
dency group has been learned, the bad scenario needs to contain
at least two dependencies. The group, that is learned first (called
д1), must be included in the second one (called д2). Next, an already
learned group is never split up into different groups, it may only
be reordered during the Solve phase. A bad scenario must therefore
prevent the system from entering the Solve phase with the complete
set of commands required for the dependency to be solved. Hence,
any invalid ordering must produce the exact same error, such that
critical commands are removed during Reduce. Also, since the explo-
ration phase may try every possible ordering of the learned groups,
the group д2 must contain the commands from д1, but in a different
order than д1. Hence, a BGP Wedgie [21] needs to be present.
An example of such a case consists of three commands a , b
and c , with the only valid solution being a c b . There exists a
dependency with immediate effect, namely that a needs to happen
before b . Then, the sequences c and a b c need to produce the
exact same error (as described in App. C.2). Snowcap will either
find the valid ordering initially (with probability 1/6), or learn the
dependency a b first, in which case, our system will not be able to
find a valid solution. Notice, that a BGP Wedgie is present, since
a b c results in a different state than a c b , even though the exact
same configuration is running.
Synthesizing Network-Wide Configuration Updates
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
G ARTIFACT APPENDIX
Abstract
Snowcap’s artifact includes its full source code and documentation,
which is available on GitHub. In addition, we provide instructions
on how to build Snowcap, alongside a script to run all experiments
and reproduce the results described in this paper.
Scope
The artifact allows to reproduce all the results and claims made in
this paper. With the provided source code and documentation, one
can also run Snowcap in their own network and extend it.
Contents
The artifact consists of the full source code and all scripts neces-
sary to run Snowcap, conduct every experiment in this paper and
reproduce all the results. In addition, the artifact includes all the
data we used to generate the plots in this paper.
Hosting
Snowcap is publicly available on GitHub9. The artifact documen-
tation can be found in the main branch (commit b486620) in the
directory eval_sigcomm2021.
Requirements
Software. Snowcap is built using Rust and requires:
• a stable Rust toolchain (1.49 or higher);
• Python 3.8 or higher (with the packages numpy, pandas and
• a Latex build environment (including pdflatex);
• and GNS3 (gns3-server and gns3-gui).
matplotlib installed);
We provide detailed instructions on how to setup and run the ar-
tifact in the artifact documentation on GitHub. In addition, we
provide a pre-configured virtual machine.
Hardware. We ran all experiments on a server with 64 cores (128
threads). It took about a week (approximately 20 000 CPU hours)
to run all experiments. We provide an option to speedup the exper-
iments by reducing the number of iterations, which leads to less
precise data and less accurate statistics (more details can be found
in the artifact documentation).
9https://github.com/nsg-ethz/snowcap