# 七、Kubernetes 上的存储
在本章中，我们将学习如何在 Kubernetes 上提供应用存储。我们将回顾 Kubernetes 上的两个存储资源，卷和持久卷。卷非常适合瞬态数据需求，但是持久卷对于在 Kubernetes 上运行任何严重的有状态工作负载都是必要的。通过本章中学习的技能，您将能够以几种不同的方式和环境为运行在 Kubernetes 上的应用配置存储。
在本章中，我们将涵盖以下主题:
*   了解卷和持久卷之间的区别
*   使用卷
*   创建永久卷
*   持续批量索赔
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机以及一个工作正常的 Kubernetes 集群。参见 [*第 1 章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，了解几种与 Kubernetes 快速启动运行的方法，以及如何安装`kubectl`工具的说明。
本章使用的代码可以在本书的 GitHub 资源库中找到[https://GitHub . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 7](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7)。
# 了解卷和持久卷的区别
一个完全无状态的容器化应用可能只需要容器文件本身的磁盘空间。当运行这种类型的应用时，在 Kubernetes 上不需要额外的配置。
然而，这在现实世界中并不总是正确的。出于多种可能的原因，正在被移动到容器的旧应用可能需要磁盘空间卷。为了保存供容器使用的文件，您需要 Kubernetes 卷资源。
在 Kubernetes 中可以创建两种主要的存储资源:
*   卷
*   持久卷
两者的区别在于名称:虽然卷与特定 Pod 的生命周期相关联，但持久卷在被删除之前保持活动状态，并且可以在不同 Pod 之间共享。卷可以方便地跨 Pod 中的容器共享数据，而持久卷可以用于许多可能的高级目的。
让我们先看看如何实现卷。
# 卷
Kubernetes 支持许多不同的卷子类型。大多数可用于卷或持久卷，但有些是特定于任一资源的。我们将从最简单的开始，回顾一些类型。
重要说明
您可以在 https://kubernetes . io/docs/concepts/storage/volumes/# volumes-type-of-volumes 上看到当前卷类型的完整列表。
以下是卷子类型的简短列表:
*   `awsElasticBlockStore`
*   `cephfs`
*   `ConfigMap`
*   `emptyDir`
*   `hostPath`
*   `local`
*   `nfs`
*   `persistentVolumeClaim`
*   `rbd`
*   `Secret`
如您所见，配置图和机密实际上都实现为*类型的*卷。此外，该列表还包括云提供商卷类型，如`awsElasticBlockStore`。
与独立于任何一个 Pod 创建的持久卷不同，创建卷通常是在 Pod 的上下文中完成的。
要创建一个简单的卷，您可以使用以下 Pod YAML:
带 vol.yaml 的 pod
```
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-vol
spec:
  containers:
  - name: busybox
    image: busybox
    volumeMounts:
    - name: my-storage-volume
      mountPath: /data
  volumes:
  - name: my-storage-volume
    emptyDir: {}
```
这个 YAML 将会创造一个 PODS 和一个类型`emptyDir`的体积。使用调配类型为`emptyDir`的卷，无论 Pod 分配到的节点上已经存在什么存储。如前所述，卷与 Pod 的生命周期相关联，而不是其容器。
这意味着在具有多个容器的 Pod 中，所有容器都将能够访问卷数据。让我们以 Pod 的 YAML 文件为例:
多容器 pod . YAML
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: busybox
    image: busybox
    volumeMounts:
    - name: config-volume
      mountPath: /shared-config
  - name: busybox2
    image: busybox
    volumeMounts:
    - name: config-volume
      mountPath: /myconfig
  volumes:
  - name: config-volume
    emptyDir: {}
```
在本例中，Pod 中的两个容器都可以访问卷数据，尽管路径不同。容器甚至可以通过共享卷中的文件进行通信。
规格的重要部分是`volume spec`本身(在`volumes`下的列表项)和体积的`mount`(在`volumeMounts`下的列表项)。
每个装载项包含一个名称，该名称对应于`volumes`部分中的卷名称，以及一个`mountPath`，该名称将指示卷装载到容器上的哪个文件路径。例如，在前面的 YAML，可以从位于`/shared-config`的`busybox`容器内和位于`/myconfig`的`busybox2`容器内访问体积`config-volume`。
卷规格本身采用一个名称，在本例中为`my-storage`，以及特定于卷类型的附加键/值，在本例中为`emptyDir`，并且只采用空括号。
现在，让我们来看一下装载到 Pod 上的云供应卷的示例。例如，要安装 AWS **弹性块存储** ( **EBS** )卷，可以使用以下 YAML:
pod-with-ebs.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
  - image: busybox
    name: busybox
    volumeMounts:
    - mountPath: /data
      name: my-ebs-volume
  volumes:
  - name: my-ebs-volume
    awsElasticBlockStore:
      volumeID: [INSERT VOLUME ID HERE]
```
只要您的群集设置正确，可以通过 AWS 进行身份验证，YAML 就会将您现有的 EBS 卷连接到 Pod。如您所见，我们使用`awsElasticBlockStore`键专门配置要使用的确切卷标识。在这种情况下，您的 AWS 帐户和地区中必须已经存在 EBS 卷。使用 AWS **弹性 Kubernetes 服务** ( **EKS** )这要容易得多，因为它允许我们从 Kubernetes 内部自动调配 EBS 卷。
Kubernetes 还在 Kubernetes AWS 云提供商中包含了自动调配卷的功能，但这些功能是用于持久卷的。我们将在*持久卷*部分了解如何获取这些自动调配的卷。
# 持久卷
持久卷相对于常规 Kubernetes 卷有一些关键的优势。如前所述，它们(持久卷)的生命周期与集群的生命周期相关，而不是单个 Pod 的生命周期。这意味着只要集群在运行，持久卷就可以在 Pods 之间共享和重用。由于这个原因，该模式更好地匹配外部存储，如 EBS(AWS 上的块存储服务)，因为存储本身比单个 Pod 更持久。
使用持久卷实际上需要两种资源:`PersistentVolume`本身和一个`PersistentVolumeClaim`，用于将一个`PersistentVolume`安装到一个 Pod 上。
让我们从`PersistentVolume`本身开始——看看创建`PersistentVolume`的基本 YAML:
pv.yaml
```
apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mydata"
```
现在让我们把这个分开。从规格中的第一行开始–`storageClassName`。
第一个配置`storageClassName`代表我们想要使用的存储类型。对于`hostPath`卷类型，我们只需指定`manual`，但是对于 AWS EBS，例如，您可以创建并使用名为`gp2Encrypted`的存储类来匹配启用了 EBS 加密的 AWS 中的`gp2`存储类型。因此，存储类是可用于特定卷类型的配置组合，可在卷规范中参考。
继续我们的 AWS `StorageClass`示例，让我们为`gp2Encrypted`提供一个新的`StorageClass`:
gp 2-存储类. yaml
```
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: gp2Encrypted
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
  encrypted: "true"
  fsType: ext4
```
现在，我们可以使用`gp2Encrypted`存储类创建我们的`PersistentVolume`。但是，使用动态调配的 EBS(或其他云)卷创建`PersistentVolumes`有一个快捷方式。当使用动态调配的卷时，我们首先创建`PersistentVolumeClaim`，然后自动生成`PersistentVolume`。
## 持续卷索赔
我们现在知道，您可以在 Kubernetes 中轻松创建持久卷，但是，这不允许您将存储绑定到 Pod。您需要创建一个`PersistentVolumeClaim`，它声明一个`PersistentVolume`，并允许您将该声明绑定到一个 Pod 或多个 Pod。
在我们上一节新的`StorageClass`的基础上，让我们声明将自动创建一个新的`PersistentVolume`，因为没有其他具有我们期望的`StorageClass`的持久卷:
pvc .亚 ml
```
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-pv-claim
spec:
  storageClassName: gp2Encrypted
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```
在此文件上运行`kubectl apply -f`将会创建一个新的、自动生成的**持久卷** ( **PV** )。如果您的 AWS 云提供商设置正确，这将导致创建一个新的 EBS 卷，并启用 GP2 类型和加密。
在我们将 EBS 支持的持久卷附加到 Pod 之前，让我们确认 EBS 卷在 AWS 中创建正确。
为此，我们可以导航到我们的 AWS 控制台，并确保我们位于 EKS 集群运行所在的同一地区。然后转到**服务** > **EC2** 点击左侧菜单**弹性块商店**下的**卷**。在本节中，我们将看到一个与我们的聚氯乙烯状态具有相同大小的自动生成体积的行项目( **1 GiB** )。它应该具有 GP2 类，并且应该启用加密。让我们看看在 AWS 控制台中会是什么样子:
![Figure 7.1 – AWS console with autocreated EBS volume](img/B14790_07_001.jpg)
图 7.1–自动创建 EBS 卷的 AWS 控制台
如您所见，我们在 AWS 中正确创建了动态生成的 EBS 卷，启用了加密并分配了 **gp2** 卷类型。现在我们已经创建了我们的卷，我们已经确认它是在 AWS 中创建的，我们可以将其附加到我们的 Pod 上。
## 将持久卷声明(PVCs)附加到 Pods
现在我们有了一个`PersistentVolume`和一个`PersistentVolumeClaim`，我们可以将它们连接到一个 Pod 上进行消费。这个过程非常类似于附加一个配置映射或机密——这是有意义的，因为配置映射和机密本质上是卷的类型！
查看 YAML，它允许我们将加密的 EBS 卷附加到 Pod 上，并将其命名为`pod-with-attachment.yaml`:
带附件的 pod . YAML
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  volumes:
    - name: my-pv
      persistentVolumeClaim:
        claimName: my-pv-claim
  containers:
    - name: my-container
      image: busybox
      volumeMounts:
        - mountPath: "/usr/data"
          name: my-pv
```
运行`kubectl apply -f pod-with-attachment.yaml`将会产生一个 Pod ，通过我们对`/usr/data`的声明安装我们的`PersistentVolume`。
为了确认卷已成功创建，让我们将`exec`放入我们的 Pod，并在卷已装载的位置创建一个文件:
```
> kubectl exec -it shell-demo -- /bin/bash
> cd /usr/data
> touch myfile.txt
```
现在，让我们使用以下命令删除 Pod :
```
> kubectl delete pod my-pod
```
并使用以下命令重新创建:
```
> kubectl apply -f my-pod.yaml
```
如果我们做得对，我们应该能够在运行`kubectl exec`再次进入 Pod 时看到我们的文件:
```
> kubectl exec -it my-pod -- /bin/bash
> ls /usr/data
> myfile.txt
```
成功！
我们现在知道如何为 Kubernetes 创建云存储提供的持久卷。但是，您可能正在内部或使用 minikube 在笔记本电脑上运行 Kubernetes。让我们来看一些可以替代使用的备用持久卷子类型。
# 没有云存储的持久卷
我们之前的示例假设您正在云环境中运行 Kubernetes，并且可以利用云平台(AWS EBS 等)提供的存储服务。然而，这并不总是可能的。您可能正在数据中心环境或专用硬件上运行 Kubernetes。
在这种情况下，有许多潜在的解决方案可以为 Kubernetes 提供存储。一个简单的方法是将卷类型更改为`hostPath`，这将在节点的现有存储设备中创建持久卷。例如，当在 minikube 上运行时，这很好，但是没有像 AWS EBS 那样提供强大的抽象。对于一个具有类似于 EBS 等云存储工具的内部部署功能的工具，让我们看看如何将 Ceph 与 Rook 结合使用。要获得完整的文档，请查看 https://rook.io/docs/rook/v1.3/ceph-quickstart.html 的鲁克医生(他们也会教你 Ceph)。