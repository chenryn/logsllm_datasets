ff92b610: /atapi-disk
ff92daf0: /sbp2-disk
ff931508: /bootpath-search
ff9380f8: /terminal-emulator
ok
0 >
We came across the telnet support package earlier when we used it to connect to Open Firmware from
another computer. obp-tftp implements a TFTP client for use in network booting. atapi-disk lets you
communicate with an ATAPI device using the ATAPI protocol.
ATAPI
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 27 of 86
ATAPI stands for ATA Packet Interface, where ATA, in turn, stands for AT Attachment. AT
(advanced technology) refers to the IBM PC/AT of 1984. ATA is a device interface for mass-
storage devices. It is colloquially referred to as IDE (integrated device electronics) or EIDE
(extended IDE). ATAPI can be viewed as an ATA extension used by a variety of non-hard-
disk storage devices.
4.7. Open Firmware Interfaces
When we enumerated Open Firmware's key features, we noted that it provides multiple interfaces: for end
users, for client programs, and for device vendors.
4.7.1. The User Interface
In this chapter, we have so far used Open Firmware's user interface to interact with it. We likened the
Forth interpreter's command-line feature to a Unix shell. The user interface provides a set of words for
interactively performing various Open Firmware functions such as managing configurations; debugging
hardware, firmware, and software; and controlling aspects of booting.
4.7.2. The Client Interface
Open Firmware provides a client interface that its clients may use. A client is a programsuch as a
bootloader or an operating systemthat is loaded and executed by Open Firmware. As we will see shortly,
in the case of Mac OS X, Open Firmware's primary client is BootX, the bootloader. Examples of
important services provided through the client interface include the following.
It provides access to the device tree: walking and searching the tree, opening and closing devices,
performing I/O on devices, and so on. In particular, a client uses this interface to access devices that
may be critical for booting, such as console, network, and storage devices.
It provides capabilities for allocating, deallocating, and mapping memory.
It facilitates transfer of control during the boot process.
The device tree contains standard system nodes such as /chosen, /openprom, and /options. These nodes
play important roles in the client interface. We will take a look at them when we discuss the bootloader.
Typically, you need to open a device and get an instance handle before you can call the device's methods.
This can be achieved by using a method such as open-dev, although there are other approaches, including
shortcut methods that open a device, call a specified method in it, and close itall in a single invocation.
Opening a device using open-dev causes all devices in the chain to be opened. We will frequently use the
following idiom for calling device methods in our programming examples:
0 value mydevice
" devicename" open-dev to mydevice
arg1 arg2 ... argN " methodname" mydevice $call-method
4.7.3. The Device Interface
Open Firmware's third interface is the device interface, which exists between Open Firmware and a
developer's device. The expansion ROM in a plug-in device contains an FCode program that uses the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 28 of 86
device interface. This allows Open Firmware to identify the device during probing, to characterize it, and
to possibly use it during booting.
4.8. Programming Examples
In this section, we will look at examples of programming in the Open Firmware environment. While
doing so, we will also come across several device support extensions implemented by Apple's version of
Open Firmware. These device-specific extensions allow programs to access the keyboard, mouse, real-
time clock (RTC), NVRAM, and so on.
4.8.1. Dumping NVRAM Contents
In the example shown in Figure 44, we dump the entire contentsin a raw formatof the NVRAM device.
The following relevant methods are provided by the NVRAM device:
size ( --  )
seek ( position.low position.high --  )
read (   --  )
Figure 44. Dumping NVRAM contents
0 > 0 value mynvram ok
0 > " nvram" open-dev to mynvram ok
0 > " size" mynvram $call-method ok
1 > . 2000 ok
0 > 2000 buffer: mybuffer ok
0 > 0 0 " seek" mynvram $call-method ok
1 > . fffffff ok
0 > mybuffer 2000 " read" mynvram $call-method ok
1 > . 2000 ok
0 > mybuffer 2000 dump
ffbba000: 5a 82 00 02 6e 76 72 61 6d 00 00 00 00 00 00 00 |Z...nvram.......|
ffbba010: bb f1 64 59 00 00 03 3c 00 00 00 00 00 00 00 00 |..dY...system......|
ffbba030: 00 02 00 00 64 61 79 74 00 06 00 00 00 00 00 00 |....dayt........|
...
ffbba400: 70 bd 00 c1 63 6f 6d 6d 6f 6e 00 00 00 00 00 00 |p...common......|
ffbba410: 6c 69 74 74 6c 65 2d 65 6e 64 69 61 6e 3f 3d 66 |little-endian?=f|
ffbba420: 61 6c 73 65 00 72 65 61 6c 2d 6d 6f 64 65 3f 3d |alse.real-mode?=|
ffbba430: 66 61 6c 73 65 00 61 75 74 6f 2d 62 6f 6f 74 3f |false.auto-boot?|
ffbba440: 3d 74 72 75 65 00 64 69 61 67 2d 73 77 69 74 63 |=true.diag-switc|
ffbba450: 68 3f 3d 66 61 6c 73 65 00 66 63 6f 64 65 2d 64 |h?=false.fcode-d|
ffbba460: 65 62 75 67 3f 3d 66 61 6c 73 65 00 6f 65 6d 2d |ebug?=false.oem-|
ffbba470: 62 61 6e 6e 65 72 3f 3d 66 61 6c 73 65 00 6f 65 |banner?=false.oe|
ffbba480: 6d 2d 6c 6f 67 6f 3f 3d 66 61 6c 73 65 00 75 73 |m-logo?=false.us|
ffbba490: 65 2d 6e 76 72 61 6d 72 63 3f 3d 66 61 6c 73 65 |e-nvramrc?=false|
ffbba4a0: 00 75 73 65 2d 67 65 6e 65 72 69 63 3f 3d 66 61 |.use-generic?=fa|
ffbba4b0: 6c 73 65 00 64 65 66 61 75 6c 74 2d 6d 61 63 2d |lse.default-mac-|
ffbba4c0: 61 64 64 72 65 73 73 3f 3d 66 61 6c 73 65 00 73 |address?=false.s|
ffbba4d0: 6b 69 70 2d 6e 65 74 62 6f 6f 74 3f 3d 66 61 6c |kip-netboot?=fal|
ffbba4e0: 73 65 00 72 65 61 6c 2d 62 61 73 65 3d 2d 31 00 |se.real-base=-1.|
ffbba4f0: 72 65 61 6c 2d 73 69 7a 65 3d 2d 31 00 6c 6f 61 |real-size=-1.loa|
ffbba500: 64 2d 62 61 73 65 3d 30 78 38 30 30 30 30 30 00 |d-base=0x800000.|
ffbba510: 76 69 72 74 2d 62 61 73 65 3d 2d 31 00 76 69 72 |virt-base=-1.vir|
ffbba520: 74 2d 73 69 7a 65 3d 2d 31 00 6c 6f 67 67 65 72 |t-size=-1.logger|
ffbba530: 2d 62 61 73 65 3d 2d 31 00 6c 6f 67 67 65 72 2d |-base=-1.logger-|
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 29 of 86
We first open the NVRAM device and query its size, which is reported to be 8KB (0x2000 bytes). We
allocate an 8KB buffer to pass to the read method. Before we read from the device, we seek to its
beginning. We use the dump word to display the contents of the buffer in a meaningful format. Among the
NVRAM's contents, you can see the computer's serial number and the various Open Firmware variables.
4.8.2. Determining Screen Dimensions
In this example, we call the dimensions method of the screen device to retrieve the horizontal and
vertical pixel counts of the display associated with the device. Alternatively, the screen-width and
screen-height words can be used to query this information.
0 > showstack ok
->    1280 854   showstack ok
->    0 0 0   255 255 255   0   15  255 255 255     <- Empty
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 30 of 86
The foreground-color and background-color words, respectively, fetch the color numbers of the
foreground colorsdefined to be 0 (black)and background colorsdefined to be 15 (white). Note that color
number 15 also maps to the white color in the default CLUT. This is in accordance with Open Firmware's
16-color text extension, which states that the display driver shall initialize the first 16 colors per a
predefined list.
4.8.4. Drawing a Color-Filled Rectangle
Open Firmware's graphics extension standard provides a method to draw a color-filled rectangle (fill-
rectangle), a method to draw a rectangle using a specified pixel map (draw-rectangle), and a method
to read a rectangular pixel map from the display buffer (read-rectangle). Using these methods as
primitives, more sophisticated drawing routines can be constructed.
draw-rectangle ( src-pixmap x y width height -- )
fill-rectangle ( color# x y width height -- )
read-rectangle ( dest-pixmap x y width height -- )
The following program draws a black rectangle that is 100 pixels wide and 100 pixels tall, with its top-left
corner at the center of the screen.
\ fill-rectangle-demo
\ fill-rectangle usage example
0 value myscreen
" screen" open-dev to myscreen
0 value mycolor
\ color x y width height
mycolor screen-width 2 / screen-height 2 / 100 100
" fill-rectangle" myscreen $call-method
Running the fill-rectangle-demo program, say, by "booting" it using the TFTP method, should draw
the desired black rectangle. Note that the screen's origin, that is, position (0, 0), is located at the top left of
the physical display.
4.8.5. Creating an Animated Solution to the "Towers of Hanoi" Problem
Given the ability to draw a rectangle at a specified location on the screen, let us look at a more complex
example: an animated solution to the Towers of Hanoi problem.[13] We will use the ms word, which
sleeps for a specified number of milliseconds, to control the rate of animation. Figure 45 shows the layout
and relative dimensions of the objects we will draw on the screen.
[13] There are three towers arranged left to right. The leftmost tower contains some number of
unequally sized disks, arranged such that a smaller disk is never below a larger disk. The
objective is to move all the disks to the rightmost tower, one at a time, while using the middle
tower as temporary storage. At no time during the transfer may a larger disk be on top of a
smaller one.
Figure 45. The Towers of Hanoi: layout and relative dimensions of on-screen objects
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 31 of 86
The code for the program can be conveniently divided into two parts: the code for animating and the code
for generating moves for the Towers of Hanoi problem. We will use the stack-based algorithm shown as
pseudocode in Figure 46 for solving an N-disk Towers of Hanoi problem.
Figure 46. The Towers of Hanoi: simulating recursion using a stack
stack = (); /* empty */
push(stack, N, 1, 3, 0);
while (notempty(stack)) {
processed = pop(stack);
to = pop(stack);
from = pop(stack);
n = pop(stack);
left = 6 - from - to;
if (processed == 0) {
if (n == 1)
movedisk(from, to);
else
push(stack, n, from, to, 1, n - 1, from, left, 0);
} else {
movedisk(from, to);
push(stack, n - 1, left, to, 0);
}
}
The movedisk function in Figure 46 is required to graphically move a disk from one tower to another. It
could be broken down into distinct steps from an animation standpoint, corresponding to the horizontal
and vertical motion of the disk. For example, moving a disk from the left tower to the right tower requires
us to first move the disk up on the source tower, move it to the right so that it reaches the destination
tower, and finally move it down until it comes to rest in its appropriate position on the destination tower.
The code shown in Figure 47 is the first part of the program that provides the following key functionality:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 32 of 86
Initializes and draws all static graphical objects on the screenthat is, the tower bases, the tower
poles, and the specified number of disks on the source tower (hanoi-init)
Implements a function to animate the upward motion of a disk (hanoi-disk-move-up)
Implements a function to animate the horizontal (left or rightbased on a function argument) motion
of a disk (hanoi-disk-move-lr)
Implements a function to animate the downward motion of a disk (hanoi-disk-move-down)
Figure 47. The Towers of Hanoi: Forth code for animation
\ Towers of Hanoi Demo
\ Commentary required for "booting" this program.
\ Configurable values
variable h-delay 1 h-delay !
variable h-maxdisks 8 h-maxdisks !
: hanoi-about ( -- ) cr ." The Towers of Hanoi in Open Firmware" cr ;
: hanoi-usage ( -- ) cr ." usage: n hanoi, 1 <= n <= " h-maxdisks @ . cr ;
decimal \ Switch base to decimal
\ Open primary display
0 value myscreen
" screen" open-dev to myscreen
\ Convenience wrapper function
: hanoi-fillrect ( color x y w h -- ) " fill-rectangle" myscreen $call-method ;
\ Calculate display constants
screen-height 100 / 3 * value h-bh \ 3% of screen height
screen-width 100 / 12 * value h-bw \ 12% of screen width
screen-width 4 / value h-xmaxby4 \ 25% of screen width
screen-height 100 / 75 * value h-th \ 75% of screen height
h-bh 2 / value h-tw
screen-height h-th h-bh + - value h-tower-ymin
screen-height 100 / 2 * value h-disk-height \ 2% of screen height
screen-width 100 / 1 * value h-disk-delta
h-tower-ymin h-disk-height - value h-disk-ymin
\ Colors
2 value h-color-base
15 value h-color-bg
50 value h-color-disk
4 value h-color-tower
\ Miscellaneous variables
variable h-dx \ A disk's x-coordinate
variable h-dy \ A disk's y-coordinate
variable h-dw \ A disk's width
variable h-dh \ A disk's height
variable h-tx \ A tower's x-coordinate
variable h-N \ Number of disks to solve for
variable h-dcolor
variable h-delta
3 buffer: h-tower-disks
: hanoi-draw-tower-base ( n -- )
h-color-base swap
h-xmaxby4 * h-bw -
screen-height h-bh -
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 33 of 86
h-bw 2 *
h-bh
hanoi-fillrect
;
: hanoi-draw-tower-pole ( tid -- )
dup 1 - 0 swap h-tower-disks + c!
h-color-tower swap
h-xmaxby4 * h-tw -
screen-height h-th h-bh + -
h-tw 2 *
h-th
hanoi-fillrect
;
: hanoi-disk-width ( did -- cdw )
h-bw swap h-disk-delta * -
;
: hanoi-disk-x ( tid did -- x )
hanoi-disk-width ( tid cdw )
swap ( cdw tid )
h-xmaxby4 * swap ( [tid * h-xmaxby4] cdw )
- ( [tid * h-xmaxby4] - cdw )
;
: hanoi-disk-y ( tn -- y )