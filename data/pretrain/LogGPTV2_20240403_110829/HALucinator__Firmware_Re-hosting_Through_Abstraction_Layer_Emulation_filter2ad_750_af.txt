# References

[15] Saed Alrabaee, Paria Shirani, Lingyu Wang, and Mourad Debbabi. **Fossil: A Resilient and Efficient System for Identifying FOSS Functions in Malware Binaries**. *ACM Transactions on Privacy and Security (TOPS)*, 21(2):8, 2018.

[16] **Atmel Advanced Software Framework**. http://asf.atmel.com/docs/latest/architecture.html.

[17] Emmanuel Baccelli, Cenk Gündo˘gan, Oliver Hahm, Peter Kietzmann, Martine S Lenders, Hauke Petersen, Kaspar Schleiser, Thomas C Schmidt, and Matthias Wählisch. **RIOT: An Open Source Operating System for Low-End Embedded Devices in the IoT**. *IEEE Internet of Things Journal*, 2018.

[18] Fabrice Bellard. **QEMU: A Fast and Portable Dynamic Translator**. In *USENIX Annual Technical Conference*, volume 41, page 46, 2005.

[19] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. **Towards Automated Dynamic Analysis for Linux-Based Embedded Firmware**. In *NDSS*, 2016.

[20] Andrei Costin, Apostolis Zarras, and Aurélien Francillon. **Automated Dynamic Firmware Analysis at Scale: A Case Study on Embedded Web Interfaces**. In *Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security*, pages 437–448. ACM, 2016.

[21] **Diaphora: A Free and Open Source Program Differencing Tool**. http://diaphora.re/.

[22] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim Leek, and Ryan Whelan. **Repeatable Reverse Engineering with PANDA**. In *Program Protection and Reverse Engineering Workshop*, page 4. ACM, 2015.

[23] **Dolphin Emulator**. https://dolphin-emu.org/, 2019.

[24] Thomas Dullien. **Searching Statically-Linked Vulnerable Code in Executable Library Functions**. https://googleprojectzero.blogspot.com/2018/12/searching-statically-linked-vulnerable.html, 2018.

[25] Adam Dunkels, Björn Grönvall, and Thiemo Voigt. **Contiki: A Lightweight and Flexible Operating System for Tiny Networked Sensors**. In *Local Computer Networks, 29th Annual IEEE International Conference on*, pages 455–462. IEEE, 2004.

[27] **FatFs: Generic FAT Filesystem Module**. http://elm-chan.org/fsw/ff/00index_e.html.

[28] Halvar Flake. **Structural Comparison of Executable Objects**. In *Proc. Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA)*, pages 161–174, 2004.

[29] **FRDM-K64F Platform**. https://www.nxp.com/design/development-boards/freedom-development-boards/mcu-boards/freedom-development-platform-for-kinetis-k64-k63-and-k24-mcus:FRDM-K64F.

[30] **The FreeRTOS Kernel**. https://www.freertos.org/.

[31] Ilfak Guilfanov. **Fast Library Identification and Recognition Technology (FLIRT)**. https://www.hex-rays.com/products/ida/tech/flirt/index.shtml.

[32] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry, Aurélien Francillon, Davide Balzarotti, Yung Ryn Choe, Christopher Kruegel, and Giovanni Vigna. **Toward the Analysis of Embedded Firmware through Automated Re-hosting**. In *Research in Attacks, Intrusions, and Defenses (RAID '19)*. USENIX Association, 2019.

[33] Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin Raychev, and Martin Vechev. **Debin: Predicting Debug Information in Stripped Binaries**. In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18)*, pages 1667–1680, New York, NY, USA, 2018. ACM.

[34] **Texas Instruments. Code Composer Studio (CCS) Integrated Development Environment (IDE)**. http://www.ti.com/tool/CCSTUDIO, 2019.

[35] Emily R Jacobson, Nathan Rosenblum, and Barton P Miller. **Labeling Library Functions in Stripped Binaries**. In *ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools*. ACM, 2011.

[36] Karl Koscher, Tadayoshi Kohno, and David Molnar. **SURROGATES: Enabling Near-Real-Time Dynamic Analyses of Embedded Systems**. In *WOOT*, 2015.

[37] **lwIP - A Lightweight TCP/IP Stack**. http://savannah.nongnu.org/projects/lwip.

[26] **Stack Exchange. What Security Risks Does the Test Access Port (TAP) Introduce?** https://electronics.stackexchange.com/questions/253958/what-security-risks-does-the-test-access-port-tap-introduce, 2016.

[38] Peter S Magnusson, Magnus Christensson, Jesper Eskilson, Daniel Forsgren, Gustav Hallberg, Johan Hogberg, Fredrik Larsson, Andreas Moestedt, and Bengt Werner. **Simics: A Full System Simulation Platform**. *Computer*, 35(2):50–58, 2002.

[51] **STM NUCLEO-F401RE Development Board**. https://www.st.com/en/evaluation-tools/nucleo-f401re.html.

[52] **STM32479I-EVAL**. http://www.st.com/resource/en/user_manual/dm00219329.pdf.

[53] **STM32Cube MCU Packages**. https://www.st.com/en/embedded-software/stm32cube-mcu-packages.html.

[54] Matthew Tancreti, Vinaitheerthan Sundaram, Saurabh Bagchi, and Patrick Eugster. **TARDIS: Software-Only System-Level Record and Replay in Wireless Sensor Networks**. In *Proceedings of the 14th International Conference on Information Processing in Sensor Networks (IPSN)*, pages 286–297. ACM, 2015.

[55] Thomas Dullien and Rolf R. **Graph-Based Comparison of Executable Objects**. In *Proceedings of the Symposium sur la Sécurité des Technologies de l’Information et des Communications (SSTIC)*, volume 5, 2005.

[56] **UltraHLE**. https://en.wikipedia.org/wiki/UltraHLE, 2019.

[57] **Wind River SIMICS**. https://www.windriver.com/products/simics/.

[58] Jonas Zaddach, Luca Bruno, Aurélien Francillon, and Davide Balzarotti. **AVATAR: A Framework to Support Dynamic Security Analysis of Embedded Systems' Firmwares**. In *NDSS*, 2014.

[59] **ZeroMQ: Distributed Messaging**. https://zeromq.org/.

[39] **mbed OS**. https://www.mbed.com/en/development/mbed-os/.

[40] Stephen McLaughlin, Charalambos Konstantinou, Xueyang Wang, Lucas Davi, Ahmad-Reza Sadeghi, Michail Maniatakos, and Ramesh Karri. **The Cybersecurity Landscape in Industrial Control Systems**. *Proceedings of the IEEE*, 104(5):1039–1057, 2016.

[41] **MCUXpresso Integrated Development Environment (IDE)**. https://www.nxp.com/design/software/development-software/mcuxpresso-software-and-tools/mcuxpresso-integrated-development-environment-ide:MCUXpresso-IDE.

[42] **MCUXpresso Software Development Kit (SDK)**. https://www.nxp.com/design/software/development-software/mcuxpresso-software-and-tools/mcuxpresso-software-development-kit-sdk:MCUXpresso-SDK.

[43] Marius Muench, Aurélien Francillon, and Davide Balzarotti. **Avatar2: A Multi-Target Orchestration Platform**. In *BAR 2018, Workshop on Binary Analysis Research*, 2018.

[44] Marius Muench, Jan Stijohann, Frank Kargl, Aurélien Francillon, and Davide Balzarotti. **What You Corrupt Is Not What You Crash: Challenges in Fuzzing Embedded Devices**. In *Network and Distributed System Security Symposium*, San Diego, CA, 2018.

[45] Fredrik Österlind, Adam Dunkels, Joakim Eriksson, Niclas Finne, and Thiemo Voigt. **Cross-Level Sensor Network Simulation with Cooja**. In *IEEE Conference on Local Computer Networks*. IEEE, 2006.

[46] Jing Qiu, Xiaohong Su, and Peijun Ma. **Library Functions Identification in Binary Code by Using Graph Isomorphism Testing**. In *IEEE Conference on Software Analysis, Evolution and Reengineering (SANER)*. IEEE, 2015.

[47] Jing Qiu, Xiaohong Su, and Peijun Ma. **Using Reduced Execution Flow Graph to Identify Library Functions in Binary Code**. *IEEE Transactions on Software Engineering*, 42(2):187–202, 2016.

[48] **SAM R21 Xplained Pro User Guide**. http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42243-SAMR21-Xplained-Pro_User-Guide.pdf.

[49] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy Vyukov. **AddressSanitizer: A Fast Address Sanity Checker**. In *USENIX Annual Technical Conference*, pages 309–318, 2012.

[50] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. **SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis**. In *IEEE Symposium on Security and Privacy*, 2016.

## Appendix

### A.1 Code Complexity Metrics

To assess the difficulty and complexity of the required manual effort when programming the handlers and peripheral models, we examine the amount of code—in source lines of code (SLOC)—and its cyclomatic complexity (CC) in Table 5. Let us look at the largest handler for each peripheral. The ASF Ethernet handler requires 119 SLOC with an average function cyclomatic complexity of 1.9 and a maximum of 6. The Ethernet peripheral model takes an additional 60 SLOC with an average cyclomatic complexity of 2.2. This means an Ethernet interface can be emulated in under 200 lines of simple code.

However, firmware uses more than one peripheral. The 6LoWPAN firmware samples use the IEEE 802.15.4 radio, UART, Clock, the external interrupt controller (EXTI), and on-board debugger (EDBG) interfaces. For these firmware samples, the amount of code and complexity of the code is low. It requires 228 SLOC for the handlers and 177 SLOC for the peripheral models, with the highest average cyclomatic complexity being 2.2. Thus, with 405 lines of simple code, we emulate the firmware for a wireless sensor implementing the 6LoWPAN protocol.

### A.2 Evaluation of P2IM Firmware Samples

In order to test the applicability of HALucinator to realistic firmware, the authors of P2IM [12] provided us upon request with a portion of their real-world firmware samples. These samples represent multiple CPU manufacturers and various HAL implementations, as described in Table 6 of the paper. We re-hosted the five samples from this set that take input from outside the device. For the PLC, Heat Press, and car controller, the firmware contained the Arduino platform HAL, and we implemented handlers for a small subset of the Arduino platform's functions, comprising only five new handlers, to allow these samples to run. As this HAL is designed for those new to embedded programming, it helpfully abstracts all hardware-specific features, making it a natural fit for our technique. As a result, all handlers fell into the Trivial or Translating categories. The drone firmware contains the STM32 HAL used extensively in our evaluation in Section 5.3; we added three additional Translating handlers, and the firmware ran without issue.

Finally, the Console firmware uses RIOT OS [17], which is both an RTOS kernel and a set of hardware abstractions and drivers. RIOT OS exposes a standard set of functions for hardware peripherals, with multiple implementations depending on the chip in use. Of the seven new handlers that were required, five fell into the Trivial or Translating categories. However, there was one notable exception: the RIOT task switcher uses new ARM architectural features and CPU instructions not yet supported by QEMU or Unicorn Engine. Thankfully, this is a standard component of RIOT that, like any other, can be turned into a handler. By implementing the context switching as a handler (requiring 15 lines of handler code), we both get deep introspection into the behavior of RIOT OS programs and the ability to explore multi-threading-related issues in RIOT OS programs in the future, regardless of their underlying hardware.

We fuzzed these samples with HALucinator. Table 6 shows the results. We observed a variance in execution speed, both due to the nature and size of the input, but also how well this input is checked for correctness. For example, the Drone sample executed particularly slowly, due to the fact that if erroneous input was detected, the firmware would call an error handler routine, which caused the system to hang. We were able to reproduce the crashes in the PLC and Heat Press samples.

### Table 5: Code Complexity Metrics

| Peripheral | SLOC (Handlers) | Max CC (Handlers) | Avg CC (Handlers) | SLOC (Peripheral Model) | Max CC (Peripheral Model) | Avg CC (Peripheral Model) |
|------------|-----------------|--------------------|--------------------|-------------------------|---------------------------|---------------------------|
| 802.15.4   | 3               | 2.0                | 2.0                | 3                       | 2.2                       | 2.2                       |
| Clock      | 2               | 1.4                | 1.4                | 32                      | 1.3                       | 1.3                       |
| EDBG       | 2               | 1.3                | 1.3                | 36                      | 1.0                       | 1.0                       |
| Ethernet   | 4               | 2.3                | 2.3                | 60                      | 1.9                       | 1.9                       |
| EXTI       | 5               | 1.9                | 1.9                | 66                      | 1.7                       | 1.7                       |
| GPIO       | 5               | 2.2                | 2.2                | 59                      | 2.0                       | 2.0                       |
| SD Card    | 5               | 2.2                | 2.2                | 43                      | 1.7                       | 1.7                       |
| SPI        | 2               | 1.7                | 1.7                | 41                      | 1.0                       | 1.0                       |
| WiFi TCP   | 4               | 2.0                | 2.0                | 46                      | 1.0                       | 1.0                       |
| Timers     | 1               | 1.0                | 1.0                | 82                      | 1.0                       | 1.0                       |
| UART       | 5               | 1.7                | 1.7                | 55                      | 1.0                       | 1.0                       |

### Table 6: P2IM Case-Study Firmware Sample Fuzzing Results

| Name       | Time  | Executions | Total Paths | Crashes |
|------------|-------|------------|-------------|---------|
| PLC        | 9d1h  | 167,649,720| 634         | 13      |
| Heat Press | 9d1h  | 55,577,331 | 0           | 0       |
| Steering Ctlr | 23d14h| 98,393,268 | 1,585       | 991     |
| Drone      | 4d1h  | 9,234,661  | 4,666       | 2,834   |
| Console    | 4d1h  | 124,442,630| 0           | 0       |

---

This optimized version of your text is more organized, clear, and professional. If you have any further requests or need additional changes, please let me know!