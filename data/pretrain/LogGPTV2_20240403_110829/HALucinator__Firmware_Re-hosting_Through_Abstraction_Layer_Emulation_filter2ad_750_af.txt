https://github.com/Battelle/
USENIX Association
29th USENIX Security Symposium    1215
[15] Saed Alrabaee, Paria Shirani, Lingyu Wang, and Mourad
Debbabi. Fossil: A resilient and efﬁcient system for iden-
tifying foss functions in malware binaries. ACM Trans-
actions on Privacy and Security (TOPS), 21(2):8, 2018.
[16] Atmel Advanced Software Framework. http://asf.
atmel.com/docs/latest/architecture.html.
[17] Emmanuel Baccelli, Cenk Gündo˘gan, Oliver Hahm,
Peter Kietzmann, Martine S Lenders, Hauke Petersen,
Kaspar Schleiser, Thomas C Schmidt, and Matthias
Wählisch. RIOT: an Open Source Operating System for
Low-end Embedded Devices in the IoT. IEEE Internet
of Things Journal, 2018.
[18] Fabrice Bellard. QEMU, a fast and portable dynamic
translator. In USENIX Annual Technical Conference,
volume 41, page 46, 2005.
[19] Daming D Chen, Maverick Woo, David Brumley, and
Manuel Egele. Towards Automated Dynamic Analysis
for Linux-based Embedded Firmware. In NDSS, 2016.
[20] Andrei Costin, Apostolis Zarras, and Aurélien Francil-
lon. Automated dynamic ﬁrmware analysis at scale: a
case study on embedded web interfaces. In Proceedings
of the 11th ACM on Asia Conference on Computer and
Communications Security, pages 437–448. ACM, 2016.
[21] Diaphora: A Free and Open Source Program Difﬁng
Tool. http://diaphora.re/.
[22] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin,
Tim Leek, and Ryan Whelan. Repeatable reverse
engineering with PANDA. In Program Protection and
Reverse Engineering Workshop, page 4. ACM, 2015.
[23] Dolphin Emulator.
2019.
https://dolphin-emu.org/,
[24] Thomas Dullien.
Searching statically-linked vul-
code.
executable
library functions
nerable
https://googleprojectzero.blogspot.com/
2018/12/searching-statically-linked-
vulnerable.html.
in
[25] Adam Dunkels, Bjorn Gronvall, and Thiemo Voigt.
Contiki: a lightweight and ﬂexible operating system for
tiny networked sensors. In Local Computer Networks,
2004. 29th Annual IEEE International Conference on,
pages 455–462. IEEE, 2004.
[27] FatFs:
http://elm-chan.org/fsw/ff/00index_e.html.
Generic
FAT
Filesystem Module.
[28] Halvar Flake. Structural comparison of executable
objects. In Proc. Detection of Intrusions and Malware
& Vulnerability Assessment (DIMVA), pages 161–174,
2004.
[29] FRDM-K64F
Platform.
https://www.nxp.
com/design/development-boards/freedom-
development-boards/mcu-boards/freedom-
development-platform-for-kinetis-k64-k63-
and-k24-mcus:FRDM-K64F.
[30] The FreeRTOS Kernel.
org/.
https://www.freertos.
[31] Ilfak Guilfanov.
Recognition Technology.
com/products/ida/tech/flirt/index.shtml.
Fast Library Identiﬁcation and
https://www.hex-rays.
[32] Eric Gustafson, Marius Muench, Chad Spensky, Nilo
Redini, Aravind Machiry, Aurelien Francillon, Davide
Balzarotti, Yung Ryn Choe, Christopher Kruegel, and
Giovanni Vigna. Toward the Analysis of Embedded
Firmware through Automated Re-hosting. In Research
in Attacks, Intrusions, and Defenses (RAID ’19).
USENIX Association, 2019.
[33] Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin
Raychev, and Martin Vechev. Debin: Predicting debug
In Proceedings of
information in stripped binaries.
the 2018 ACM SIGSAC Conference on Computer and
Communications Security, CCS ’18, pages 1667–1680,
New York, NY, USA, 2018. ACM.
[34] Texas
Instruments.
Code Composer Studio
(CCS) Integrated Development Environment (IDE.
http://www.ti.com/tool/CCSTUDIO, 2019.
[35] Emily R Jacobson, Nathan Rosenblum, and Barton P
Miller. Labeling library functions in stripped binaries.
In ACM SIGPLAN-SIGSOFT Workshop on Program
Analysis for Software Tools. ACM, 2011.
[36] Karl Koscher, Tadayoshi Kohno, and David Molnar.
SURROGATES: Enabling Near-Real-Time Dynamic
Analyses of Embedded Systems. In WOOT, 2015.
[37] lwIP - A Lightweight TCP/IP stack.
//savannah.nongnu.org/projects/lwip.
http:
[26] Stack Exchange. What security risks does the Test
Access Port (TAP) introduce? https://electronics.
stackexchange.com/questions/253958/what-
security-risks-does-the-test-access-port-
tap-introduce, 2016.
[38] Peter S Magnusson, Magnus Christensson, Jesper
Eskilson, Daniel Forsgren, Gustav Hallberg, Johan
Hogberg, Fredrik Larsson, Andreas Moestedt, and
Bengt Werner.
Simics: A full system simulation
platform. Computer, 35(2):50–58, 2002.
1216    29th USENIX Security Symposium
USENIX Association
Grosen, Siji Feng, Christophe Hauser, Christopher
Kruegel, and Giovanni Vigna. SoK: (State of) The Art
of War: Offensive Techniques in Binary Analysis. In
IEEE Symposium on Security and Privacy, 2016.
[51] STM NUCLEO-F401RE Development Board.
https://www.st.com/en/evaluation-tools/
nucleo-f401re.html.
[52] STM32479I-EVAL. http://www.st.com/resource/
en/user_manual/dm00219329.pdf.
[53] STM32Cube MCU Packages.
https://www.st.
com/en/embedded-software/stm32cube-mcu-
packages.html.
[54] Matthew Tancreti, Vinaitheerthan Sundaram, Saurabh
Bagchi, and Patrick Eugster. TARDIS: software-only
system-level record and replay in wireless sensor
In Proceedings of the 14th International
networks.
Conference on Information Processing in Sensor
Networks (IPSN), pages 286–297. ACM, 2015.
[55] Dullien Thomas and R Rolf. Graph-based comparison
of executable objects. In Proceedings of the Symposium
sur la Securite des Technologies de l’Information et des
Communications, ser. SSTIC, volume 5, 2005.
[56] UltraHLE.
https://en.wikipedia.org/wiki/
UltraHLE, 2019.
[57] Wind River SIMICS. https://www.windriver.com/
products/simics/.
[58] Jonas Zaddach, Luca Bruno, Aurelien Francillon, and
Davide Balzarotti. AVATAR: A Framework to Support
Dynamic Security Analysis of Embedded Systems’
Firmwares. In NDSS, 2014.
[59] ZeroMQ:
Distributed Messaging.
//zeromq.org/.
http:
[39] mbed OS.
https://www.mbed.com/en/
development/mbed-os/.
[40] Stephen McLaughlin, Charalambos Konstantinou,
Xueyang Wang, Lucas Davi, Ahmad-Reza Sadeghi,
Michail Maniatakos, and Ramesh Karri.
The cy-
bersecurity landscape in industrial control systems.
Proceedings of the IEEE, 104(5):1039–1057, 2016.
[41] MCUXpresso
(IDE).
Integrated Development Environ-
https://www.nxp.com/design/
ment
software/development-software/mcuxpresso-
software-and-tools/mcuxpresso-integrated-
development-environment-ide:MCUXpresso-IDE.
[42] MCUXpresso Software Development Kit
https://www.nxp.com/design/software/
development-software/mcuxpresso-software-
and-tools/mcuxpresso-software-development-
kit-sdk:MCUXpresso-SDK.
(SDK).
[43] Marius Muench, Aurélien Francillon, and Davide
Avatar2: A multi-target orchestration
Balzarotti.
platform. In BAR 2018, Workshop on Binary Analysis
Research, 2018.
[44] Marius Muench, Jan Stijohann, Frank Kargl, Aurélien
Francillon, and Davide Balzarotti. What you corrupt
is not what you crash: Challenges in fuzzing embedded
devices. In Network and Distributed System Security
Symposium, San Diego, CA, 2018.
[45] Fredrik Osterlind, Adam Dunkels, Joakim Eriksson,
Niclas Finne, and Thiemo Voigt. Cross-level sensor
network simulation with cooja. In IEEE conference on
local computer networks. IEEE, 2006.
[46] Jing Qiu, Xiaohong Su, and Peijun Ma.
Library
functions identiﬁcation in binary code by using graph
isomorphism testings. In IEEE Conf. on Software Analy-
sis, Evolution and Reengineering (SANER). IEEE, 2015.
[47] Jing Qiu, Xiaohong Su, and Peijun Ma. Using reduced
execution ﬂow graph to identify library functions
IEEE Transactions on Software
in binary code.
Engineering, 42(2):187–202, 2016.
[48] SAM R21 Xplained Pro User Guide. http://ww1.
microchip.com/downloads/en/DeviceDoc/Atmel-
42243-SAMR21-Xplained-Pro_User-Guide.pdf.
[49] Konstantin Serebryany, Derek Bruening, Alexander
Potapenko, and Dmitriy Vyukov. AddressSanitizer:
A Fast Address Sanity Checker. In USENIX Annual
Technical Conference, pages 309–318, 2012.
[50] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls,
Nick Stephens, Mario Polino, Audrey Dutcher, John
USENIX Association
29th USENIX Security Symposium    1217
A Appendix
A.1 Code Complexity Metrics
To assess the difﬁculty and complexity of the required manual
effort when programming the handlers and peripheral model,
we examine the amount of code—in source lines of code
(SLOC)—and its cyclomatic complexity (CC) in Table 5. Let
us look at the largest handler for each peripheral. The ASF Eth-
ernet handler requires 119 SLOC across with an average func-
tion cyclomatic complexity of 1.9 and a maximum of 6. The
Ethernet peripheral model takes an additional 60 SLOC with
average cyclomatic complexity of 2.2. This means an Ethernet
interface can be emulated in under 200 lines of simple code.
However, ﬁrmware uses more than one peripheral. The
6LoWPAN ﬁrmware samples use the IEEE 802.15.4 radio,
UART, Clock, the external interrupt controller (EXTI), and
on-board debugger (EDBG) interfaces. For these ﬁrmware
samples the amount of code and complexity of the code is
low. It require 228 SLOC for the handlers and 177 SLOC
lines of code for the peripheral models with the highest
average cyclomatic complexity being 2.2. Thus, with 405
lines of simple code, we emulate the ﬁrmware for a wireless
sensor implementing the 6LoWPAN protocol.
A.2 Evaluation of P2IM Firmware Samples
In order to test the applicability of HALucinator to realistic
ﬁrmware, the authors of P2IM [12] provided us upon request
with a portion of their real-world ﬁrmware samples. These
samples represent multiple CPU manufacturers, and various
HAL implementations, as described in Table 6 of the paper.
We re-hosted the ﬁve samples from this set that take input
from outside the device. For the PLC, Heat Press, and car
controller, the ﬁrmware contained the Arduino platform
HAL, and we implemented handlers for a small subset
of the Arduino platform’s functions, comprising only ﬁve
new handlers, to allow these samples to run. As this HAL
is designed for those new to embedded programming, it
helpfully abstracts all hardware-speciﬁc features, making it
Time
Name
9d1h 167,649,720
PLC
55,577,331
Heat Press
9d1h
98,393,268
Steering Ctlr 23d14h
4d1h
9,234,661
Drone
Console
4d1h 124,442,630
Executions Total Paths Crashes
634
13
0
0
0
1,585
991
469
4666
2834
Table 6: P2IM case-study ﬁrmware sample fuzzing results
a natural ﬁt for our technique. As a result, this meant that all
handlers fell into the Trivial or Translating categories. The
drone ﬁrmware contains the STM32 HAL used extensively
in our evaluation in Section 5.3; we added three additional
Translating handlers, and the ﬁrmware ran without issue.
Finally, the Console ﬁrmware uses RIOT OS [17], which
is both an RTOS kernel and a set of hardware abstractions
and drivers. RIOT OS exposes a standard set of functions
for hardware peripherals, with multiple implementations
depending on the chip in use. Of the seven new handlers
that were required, ﬁve fell into the Trivial or Translating
categories. However, there was one notable exception: the
RIOT task switcher uses new ARM architectural features
and CPU instructions not yet supported by QEMU or
Unicorn Engine. Thankfully, this is a standard component
of RIOT that, like any other, can be turned into a handler. By
implementing the context switching as a handler (requiring
15 lines of handler code), we both get deep introspection into
the behavior of RIOT OS programs, and the ability to explore
multi-threading-related issues in RIOT OS programs in the
future, regardless of their underlying hardware.
We fuzzed these samples with HALucinator. Table 6 shows
the results. We observed a variance in execution speed, both
due to the nature and size of the input, but also how well
this input is checked for correctness. For example, the Drone
sample executed particularly slowly, due to the fact that if
erroneous input was detected, the ﬁrmware would call an
error handler routine, which caused the system to hang. We
were able to reproduce the crashes in the PLC and Heat Press
samples.
STM32 Handlers Atmel Handlers NXP Handlers Peripheral Model
CC
CC
CC
CC
21
67
—
—
—
1 1.0
4 1.5
89
25
30
119
47
3 1.4
2 1.3
2 1.6
6 1.9
4 2.2
Peripheral SLOC Max Ave SLOC Max Ave SLOC Max Ave SLOC Max Ave
802.15.4
3 2.0
Clock
EDBG
Ethernet
EXTI
GPIO
SD Card
SPI
WiFi TCP
Timers
UART
3 2.2
2 1.4
2 1.3
4 2.3
5 1.9
5 2.2
2 1.7
4 2.0
1 1.0
5 1.7
1 1.0
8 2.4
1 1.0
1 1.0
60
32
36
60
66
59
43
41
46
82
55
69
77
29
—
—
—
—
—
—
—
—
—
2 1.3
1 1.0
116
3 1.5
36
1 1.0
50
2 1.2
62
—
—
—
—
—
61
37
Table 5: Showing SLOC, maximum and average cyclomatic
complexity (CC) of the handlers written for the STM32,
Atmel, and NXP HALs and the associated peripheral models.
1218    29th USENIX Security Symposium
USENIX Association