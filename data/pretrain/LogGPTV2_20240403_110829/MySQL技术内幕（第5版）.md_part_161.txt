口
口
题。
端可以继续执行，无须等待。但是，在这种情况下，LAST_INSERT_ID（）不会为表里的任
DELAYED。它会导致行被放入一个延迟插入队列，而
同
其他更新语句的优先级。）HIGH_PRIORITY 选项的另一种用途是预防 INSERT 语句与访问
用。（如果在启动服务器时使用了--low-priority-updates 选项，它将降低INSERT 和
HIGH_PRIORITY。它会使服务器选项--low-priority-updates对于单条语句不起作
在将来的某个时候，它将不复存在，因此最好避免使用它。
InnoDB是默认存储引擎，不支持DELAYED。另外，自MySQL5.6.6起，DELAYED已被弃用，
数或触发器内调用了INSERT语句，那么它也会被忽略。视图或分区表都不支持DELAYED。
INTO
MEMORY表和 ARCHIVE 表。DELAYED 在 INSERT INTO...SELECT 语句和 INSERT
关键字后面的列赋值表达式对已有行的列进行修改。如果确实发生了一次这样的更新，
同一个的表的SELECT语句并发执行。
带有这个子句的INSERT语句在遇到上述问题时将被转换为一条UPDATE语句，它将使用
附录ESQL语法参考
独发器搭配使用，使得INSERT语句引用了访问表或触发器的存储过程，或者在某个存储已
…·ON DUPLICATE KEY UPDATE 语句里会被忽略掉。如果 DELAYED 与存储过程或
会对INSERT语句的执行调度产生影响
，那么INSERT语句将终止执行并报告出
市INSERT语句则会立刻返回，以便客
，可以使用
作
国
户
用
---
## Page 705
你可以通过--local-infile标志来启用LOCAL 功能。
用
种情况下，并不要求拥有FILE 权限，但是该文件对于客户端用户必须是可读的。LOCAL可以选
带LOCAL关键字，则客户端将读取客户端主机上的文件，并把其内容通过网络发送给服务器。在过
系统变量的值不为空，该变量值应该是一个目录，而你打算读取的文件必须存放在该目录里。如是
有FILE权限，并且文件必须位于默认数据库的目录中，或者是完全可读的。如果secure_file_priv
此时，其他客户可以在往表里加载行时检索该表。
那些使用表级锁定的存储引擎，如MyISAM或MEMORY。
插到指定的分区，则会发生错误。
用 PARTITION子句，以表明需要将行插到哪一个分区或子分区。在这种情况下，如果有某个行未被
州
这要比使用一组INSERT语句来完成的速度快。自MySQL5.6.2起，LOADDATA针对分区表支持
线程正在执行的所有语句，但不终止该线程本身。
命令行上同时给出多个线程的ID值。
KILL 语句每次只能终止一个线程。mysqladmin kill 命令也可以完成相同的操作，但是它允许在
月了LOCAL，那么它在客户端默认是禁用的，因此必须显式启用它。例如，当使用mysql程序时
生地被禁用或启用。如果在服务器端禁用了LOCAL，你就不能在客户端使用它。如果在服务器端》
如果不带LOCAL关键字，则服务器会直接在服务器主机上读取文件。在这种情况下，你必须拥
CONCURRENT选项只适用于MyISAM表。如果表的中间没有空闲块，则新行会加载到表的末尾。
CONNECTION选项的效果和没有选项时一样：终止有着给定ID的线程。QUERY选项将终止给定
默认情况下，MySQL会使用系统变量character_set_database 所指定的字符集来解析文件
对于Windows系统，文件名中的反斜线既可以写成一个斜线字符(/），也可以写成双反斜线（\\）。
口
口
如果在LOAD DATA语句里省略LOCAL，MySQL服务器将按以下规则来定位文件：
LOW_PRIORITY选项将使这条语句的执行被延迟到没有客户端读取该表为止。此选项只适用于
LOADDATA语句从file_name文件里读取输人记录，并把它们批量加载到tbl_name表里。
口
口
如果带有LOCAL，则文件名的解释规则如下。
如果警告计数值不为零，则可以使用SHOWWARNINGS语句来查看到底出了什么问题。
Records: n Deleted: n Skipped: n Warnings: n
LOADDATA语句将返回一个格式如下所示的信息字符串：
·LOADDATA
终止 thread_id指定的服务器线程。你必须拥有 SUPER 权限才能终止不属于你自己的线程。
KILL [CONNECTION | QUERY]thread id
KILL
如果file_name'是一个相对路径名，则客户端将从当前目录开始查找文件。
如果file_name'是一个绝对路径名，则客户端将从根目录直接查找文件。
如果file_name'是一个绝对路径名，则服务器将从根目录直接查找文件。
个组成部分，
释。如果是，则服务器会在默认数据库的数据库目录里去查找文件。如果文件名包含有多
如果·file_name'是一个相对路径名，则需要根据该名字是否只包含一个部分来进行解
[SETcol_name
[IGNORE n {LINES IROWS)]
[PARTITION
INTO TABLE
CHARACTER
，则服务器将从它自己的数据目录里查找文件。
expr[,col_name= expr] ...]
[line_options]
rsetl
partition_name]...)]
E.1.SQL语句语法（非复合语句）
685
启
择
这
果
使
---
## Page 706
在 LINES 的前面。
这两个选项，则它们的顺序可以是任意的。如果同时指定了FIELDS 和LINES，则FIELDS 必须放
子句，那么至少还要再给出 STARTING BY或TERMINATED BY 选项中的一个，不过，如果同时给出
选项中的一个。如果同时给出多个选项，则它们的顺序可以是任意的。类似地，如果指定了LINES
以Ctrl+B（ASCII2）字符结尾的。
义序列时，大小写应该与表中所示一致。
中断，因此，如果这两个复制处理选项都没有给出的话，则默认行为类似于IGNORE。
项都没有给出，则出现错误，并且忽略尚未加载的行。如果指定了LOCAL，则文件传输过程不会被
IGNORE，则忽略后出现的行；如果指定了REPLACE，则后出现的行将替换掉已有的行。如果两个选
utf16、utf16le或utf32-
的内容。如果想显式表明文件的字符集，可以用CHARACTER SET子句。（不过，该字符集不能是ucs2、
686
如果指定了FIELDS子句，那么至少还要再给出TERMINATEDBY、ENCLOSEDBY或ESCAPEDBY
子句fieldoptions和line_options 用于设定数据的格式。（这两个子句里的可用选项也
对于那些会导致唯一性索引里出现重复值的行，MySQL将按以下规则处理：如果指定
口TERMINATEDBY值指定的是用于分隔行里的各个值的（一个或多个）字符。
FIELDS子句的各个选项的用法如下所示。
还可以用十六进制常数来表示任意字符。例如，LINES TERMINATED BYOxO2 表示各个行是
‘str"和char'的值允许包含下表里列出的各种转义序列，用以表示特殊字符。在给出这些转
MySQL将自动在字段值中 ENCLOSED BY字符的实例前面加上一个 ESCAPED BY字符。
前面加上ESCAPED BY字符。否则，引号符便会被解释为字段值的结束标记。对于输出语句，
如果想要在输入字段值里包含ENCLOSEDBY字符的实例，则必须双写这个引号符或者在其
列和VARCHAR列的值会使用引号引起来。
ENCLOSED BY字符会把输出行里的各个字段值括起来。如果指定了OPTIONALLY，则CHAR
ENCLOSEDBY值指定的是引号字符——如果它存在于多个字段值的末尾，则它会被去掉。
附录ESQL语法参考
转义序列
2
一这也表示你不能使用这些字符集来加载文件。）
Ctrl+Z（Windows系统中的EOF字符）
反斜线
双引号
单引号
制表符
空格
回
换行符 (换行键）
退格
NUL(零值字节）
车
含义
甲
无
---
## Page 707
个列名。MySQL不允许使用用户变量来读取固定宽度的输入行，因为它无法根据用户变量来确定各列
四个输入列的和加载到co12列，再使用UUID（）函数为co13列提供一个即时生成的值：
例如，下面这条语句将把第一个输入列加载到表里的co11列，忽略第二个输入列，把第三个和第
如果其值缺失，则会出错。
的默认值。
它们的默认值。如果输入行提供的数据值的个数少于列的个数，则那些值缺失的列会被设置为它们
分隔的列名构成的列表，则输入行应该包含每个指定列的一个值。列表中没有指定的列将被设置为
1LINES子句：
带引号的单词NULL也将被解释为一个NULL值。
不为空，那么所有的非NULL输入值就都将用给定的包围字符（enclosed-bycharacter）引起来，而不
字符宽和一个8个字符宽的字段。NULL值将写为由空格构成的字符串。
列分别当作一个15-字符宽和一个8-字符宽的字段读入。对于输出，则会把它们分别写为一个15个
文件里被读出（对于输出语句，则是写入）。例如，对于输入，会把VARCHAR（15）列和MEDIUMINT（5)
件将使用固定宽度的行格式，并且各字段值之间也没有分隔符。列值将根据该列的显示宽度从数据
将以换行符结尾。
SET子句可以包含一个或多个以逗号分隔的赋值表达式。每个赋值表达式的左侧必须是表里的一
列表可以包含列名或用户变量名，SET子句可以对要加载到表里的输入值做一些必要的处理。
如果在执行LOAD DATA时启用了严格SQL模式，那么对于其定义里没有DEFAULT子句的列，
如果指定了 IGNORE n LINES子句，则输入的前n行将被删除。（ROWS 是LINES 的同义词。）
输入数据文件里的 NULL 值用不带引号的转义序列\N表示。如果FIELDSENCLOSED BY字符
LOAD DATA LOCAL INFILE 'mytbl.tXt+ INTO TABLE mytbl
如果FIELDS子句所设定的TERMINATEDBY字符和ENCLOSEDBY字符都是空的，那么数据文
默认情况下，输入行将被假定为包含表里每一列的一个值。如果指定了由一个或者多个以逗号
LOAD DATA LOCAL INFILE'mytbl.txt'INTO TABLE mytbl IGNORE 1 LINES;
换句话说，同一行内的字段将以制表符分隔且不带引号，反斜线将被当作转义字符，各行数据
如果子句FIELDS和LINES都没有给出，则默认情况如下所示：
口TERMINATED BY值指定的是一个或多个行结尾字符。
口
子句LINES的各个选项用法如下所示。
口
SET co12 = @addend1 + @addend2, co13= UUID();
(col1
都会被当作行的开头部分。
STARTING BY 值指定的是一个或多个行起始字符。这个值及其前面的所有内容（同一行里)
义字符设定为反斜线“\”，就必须双写它（ESCAPEDBY“\\）。
BY！·），则不进行转义处理。（在这种情况下，NULL写作NULL，而
尾的字符串一样被加上一个前导的转义字符。但是，如果ESCAPED BY字符是空的（ESCAPED
对于输出语句，转义字符将把NULL值编码为不带引号的转义序列\N，把零值字节编码为\0。
在双引号之内。
符之后剩余的字符将会作为字符本身。例如，\"将被解释为一个双引号，即使字段值包含
\0（反斜线-ASCII码值O）将被解释为一个零值字节。对于其他经转义的字符，去掉转义字
线（）。
ESCAPED BY值指定的是如何对特殊字符进行转义。在下面的例子里，假设转义字符是反斜
。对于输入语句，不带引号的转义序列\N（反斜线-N）将被解释为NULL。转义序列
TERMINATED BY
E.1SQL语句语法（非复合语句）
而不是\N。）如果想把转
687
---
## Page 708
索引，但是它目前的实现把一个表的所有索引都加载了。
块都将被加载；如果指定了IGNORE LEAVES子句，则只有索引树中非叶节点的索引块会被加载。
为某个表特意分配一个缓存，则该表的索引将被加载到默认的键缓存中。默认情况下，所有的索引
Ctrl+A（ASCII码值为1）字符分隔、输入行以CtrI+B（ASCII码值为2）字符结束的数据文件：
DATA语句应该是如下所示的样子：
符，字段本身或许还用双引号引了起来。假设各输入行以换行符结束，用来加载这类数据文件的LOAD
的行。
个问题，可以换个没有这种“坏习惯”的程序来创建文件，也可以在加载文件后及时删掉那个异常
Ctl+Z字符作为文件结束标记，加载这样的数据文件可能会在数据库里留下一个异常的行。要解决这
行是以“回车/换行符”结束的：
的列分隔符，但是输入行很可能是以“回车/换行符”结束的。为了加载这样的文件，需要指明那些
的宽度。标量子查询可以用来提供列值，但子查询所查询的表和正被加载数据的表不能是同一个。
688
与 MyISAM键缓存管理有关的更多信息请参考12.7.2节。
LOAD INDEX INTO CACHE 语句与 CHECK TABLE 语句产生的输出格式相同。
必须对这条语句列出的每一个表都拥有INDEX权限。
类似于 CACHEINDEX 语句的情况，LOADINDEX INTO CACHE 语句的语法允许只加载个别的
对于分区表，PARTITION子句允许加载特定分区的缓存。
把给定的MyISAM表的索引加载到分配给该表的键缓存中。如果没有使用CACHEINDEX语句
十六进制表示法对于指定任意控制字符来讲很有用。
采用以逗号分隔的值（Comma-SeparatedValue，CSV）格式的文件以逗号作为字段之间的分隔
有一部分Windows程序在创建数据文件时会沿用MS-DOS年代的奇怪约定，在文件末尾加上
如果你有一个在Windows平台上创建的以制表符分隔各字段的文本文件，那么你可以使用默认
LOAD XML [LOW_PRIORITY
·LOAD XML
tbl_index_spec:
LOAD INDEX INTO CACHE
·LOAD INDEX INTO CACHE
LOAD DATA LOCALINFILE‘mytbl.txt'INTO TABLE mytbl
[(col_or_user_var_name,...)]
[PARTITIoN (partition_name [, partition_name] ...)]
INTO TABLE tbl_name
FIELDS TERMINATED BY OXO1 LINES TERMINATED BY Ox02;
[IGNORE n (LINES | ROWS)]
   ]
[CHARACTER SET charset]
[IGNORE I.REPLACE]
[IGNORE LEAVES]] ...
附录ESQL语法参考
[[INDEX
KEY]
tbl_index_spec]...
I CONCURRENT][LOCAL]INFILE·file_name
ENCLOSED BY
。下面这条语句可以用来加载各字段之间以
---
## Page 709
个锁，同时根据需要锁定别名。必须在同一条语句里获得所有的锁。
用别名来锁定它。如果在同一条查询里多次引用了某个表，则必须为该表的每一次引用分别获取一
终止时，服务器会自动释放它所拥有的所有锁。
TABLE语句来将它们全部锁定。在使用LOCK TABLE 获得锁之后，你不能引用任何未锁定的表。当会话
句会锁定该视图使用的那个基表。此语句要求对每个被锁定的表或视图都要拥有LOCKTABLES权
以使用不同的格式。
LOCK TABLE 语句允许给待锁定的表取一个别名，以便在随后的查询里再引用这个表时，可以
如果某个事务正在执行，则LOCK TABLE会引发一个隐式提交。如果使用 START TRANSACTION
LOCKTABLE语句会释放你当前拥有的所有锁。因此，如果想要锁定多个表，则必须用一条LOCK
口READ[LOCAL]：获取一个读锁。这种锁将阻塞其他客户端对表的写操作，但允许其他客户
每个lock_type的值都必须是下列之一。