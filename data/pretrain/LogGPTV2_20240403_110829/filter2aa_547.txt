从 后 门 到 漏 洞 — — 智 能 设 备 私 有 协 议 中 的 安 全 问 题
魏凡 绿盟科技 格物实验室 安全研究员
0 1
概述
0 2
0 3
0 4
私有协议逆向分析的几个关键点
某私有协议漏洞挖掘之旅
总结与建议
目录
0 1
概述
0 2
0 3
0 4
私有协议逆向分析的几个关键点
某私有协议漏洞挖掘之旅
总结与建议
目录
智能设备中的私有协议
私有协议一般来说指未文档化的协议，格式未知，一般具有以下特点：
⚫ 从功能上来讲，一般用于运维管理/服务发现等功能
⚫ 一般监听于TCP/UDP的大端口
⚫ 多数作为服务端，部分可以在厂商官网找到协议的客户端
私有协议的格式未知，所以逆向分析较难，因此公开的漏洞较少，但一出现安全问题，一般
影响都较为严重。
私有协议的安全问题
0 1
概述
0 2
0 3
0 4
私有协议逆向分析的几个关键点
某私有协议漏洞挖掘之旅
总结
目录
header
魔数
版本号
操作码
长度域
校验和
…
body
长度域
数据部分
…
可能存在header+body的嵌套
私有协议的一般格式
协议“入口点”（网络通信函数）：
recv/send，recvfrom/sendto, recvmsg/sendmsg
协议分析——“入口点”
还有一些容易忽略的地方：
⚫ 有些采用ssl连接，ssl_read/ssl_write
⚫ recv也可用于接收udp的数据包，recvfrom也可用于接收tcp数据包
⚫ 有时候通信函数在应用的调用库中
调试与调试权限获取
获取调试权限的一般思路：
⚫ 利用设备自带的TELNET/SSH功能
⚫ 利用设备硬件调试接口
⚫ 修改设备固件增加调试后门
⚫ 利用设备的已知漏洞
⚫ 利用设备的未知漏洞
准备静态编译的小工具，比较常用的有
busybox, gdbserver和tcpdump
“拿到设备的调试权限，整个漏洞挖掘工作就成功了一半”
——来自某不知名研究员
0 1
概述
0 2
0 3
0 4
私有协议逆向分析的几个关键点
某私有协议漏洞挖掘之旅
总结与建议
目录
本议题所提到的漏洞均已送报厂商并已修复
一个偶然的机会，我们拿到了一个某厂商生产的智能设备，其某个TCP端口使用了一个私
有协议，该协议未文档化，官网也未提供任何管理客户端。
⚫ CyaSSL_read
⚫ 单向认证
某厂商智能设备私有协议分析
⚫ 找到协议“入口点”
⚫ 跟踪数据流向
⚫ 逆向分析
常规漏洞挖掘思路
主观考虑智能设备的常见协议：UPNP协议——接口的命令注入
MQTT协议——未授权访问
非常规的私有协议漏洞挖掘思路
协议“脆弱点”——容易出现漏洞的地方
非常规思路：以发现漏洞为导向，暂时不考虑格式，先了解其功能，然后对其“脆弱点”进
行重点突破。
协议提供的功能
reboot
restorefactory
协议认证逻辑
取某个全局变量作为初始字符串，将该字符串进过三次处理，最后和用户传入的一个串进行比较。
第一次处理，和两个特殊字符
串进行移位混淆；后续两次处理都
是标准md5运算。
通过md5算法中的4个链接变量来识别
协议认证逻辑分析
假设作为初始字符串的全局变量为“admin”，将利用如下算法进行处理：
（1）取“admin”字符串，和两个固定字符串一起参与移位混淆操作，得到新字符串；
（2）将第一次变换得到的新字符串进行标准md5运算，得到hash值
“\x21\x23\x2f\x29\x7a\x57\xa5\xa7\x43\x89\x4a\x0e\x4a\x80\x1f\xc3”；
（3）将第二次得到的hash值再次进行标准md5运算，得到hash值
“\x43\x44\x26\x76\xc7\x4a\xe5\x9f\x21\x9c\x2d\x87\xfd\x6b\xad\x52”
将最后得到的hash值与用户传入进行比较，若相等则认证成功。
在调用认证函数之前，有个函数将会给该全局变量赋值。
是有趣的是，这里将固定字符串“admin”拷贝到全局变量处。
初始字符串的赋值
运维“后门”
传入固定字符串“admin”经过三次变换后的凭证
“\x43\x44\x26\x76\xc7\x4a\xe5\x9f\x21\x9c\x2d\x87\xfd\x6b\xad\x52”
即可完成认证过程，控制设备重启/恢复出厂设置。
用户：我忘了设备的管理密码了，怎么办？
厂商：IP告诉我一下，我给你远程重置一下。
用户：666啊！
协议的专利
功能：
⚫ 修改配置
⚫ 重启
⚫ 恢复出厂设置
⚫ 固件更新
专利所有权厂商的第一类设备
从配置文件中读取web管理员密码作为原始字符串。
初始字符串的获取
md5_digest(output, input, len)
运算长度len不能为0，如果为0，直接返回
⚫ 传入md5_digest函数的长度参数为用户控制，可设置为0
⚫ 没有验证md5_digest函数的返回值，直接将结果用于memcmp进行比较
⚫ 参与memcmp的第一个参数被初始化为空
⚫ 控制长度参数为0+凭据为空值（16个\x00）的请求包，即可绕过认证
认证绕过
固件更新处的命令注入，tftp命令中的“文件名”参数为用户传入：
结合前面的认证绕过，达到未授权执行任意命令。
未授权RCE
⚫ 功能上和第一类设备类似
⚫ UCI读取WEB管理员密码作为初始字符串
专利所有权厂商的第二类设备
⚫ 传入的长度为用户控制，可以为0
⚫ md5_digest算法中未验证传入的长度参数
⚫ 对于标准md5算法来说，当传入md5_update函数的长度参数为0时，无论传入的原始字符串为
何值，生成的hash永远为固定的串“d41d8cd98f00b204e9800998ecf8427e”
认证绕过
还是按照之前的认证算法进行运算，第二次参与md5运算的长度可控。
专利所有权厂商的第三类设备
在md5_digest函数中，对参与md5运算的长度做了判断，不能为0
md5_digest函数对长度的限制
⚫ 考虑把参与md5_digest运算的长度设为1，则只有一个字节参与md5运算；
⚫ 参与运算的值为0x00-0xff，生成的hash值也有256种情况；
⚫ 协议并未限制最大尝试次数，可无限次发送认证请求。
认证逻辑绕过
生成“密码”字典
构造数据包
发送到设备端
根据返回值判断是否认证成功
实现任意控制设备
控制长度为1
遍历256个md5 hash
认证绕过实现
同一厂商生产的不同类型的设备，针对私有协议的实现上，往往会出现相似的“脆弱点”。
小结
md5_digest函数：
⚫ 不验证返回值
⚫ 不验证传入长度
⚫ 验证了，好像又没有验证
0 1
概述
0 2
0 3
0 4
私有协议逆向分析的几个关键点
某私有协议漏洞挖掘之旅
总结与建议
目录
总结与建议
总结——警惕私有协议“供应链”漏洞
后续的研究中，我们发现存在其他厂商也在使用该协议，和传统的出现在SDK上的供应链漏洞相
比，这些漏洞更加“隐蔽”和难以修复。
给厂商和开发人员的建议——协议设计和实现上尽量用白名单的思想。
谢 谢