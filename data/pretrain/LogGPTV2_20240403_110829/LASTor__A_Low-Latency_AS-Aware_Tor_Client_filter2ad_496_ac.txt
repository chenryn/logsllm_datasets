(
f
o
F
D
C
 0.8
 0.6
 0.4
 0.2
 0
 0
 0.5
 1
 1.5
 2
Latency (sec)
No clustering
With clustering
 0
 0.2  0.4  0.6  0.8
Normalized distance
 1
(a)
(b)
(c)
(d)
(a) Clustering with higher cell sizes provides better resilience. Clustering of relays (b) reduces the probability of an adversary
Fig. 6.
compromising a large fraction of paths, but (b) increases the length of the chosen path. (d) WSP yields latencies lower than those obtained
with the default Tor client.
This modiﬁcation of WSP reduces its runtime to select a
path between a client and a destination through today’s Tor
network to 245 milliseconds, in comparison to the runtime of
6.5 seconds with the naive implementation. More importantly,
the modiﬁed WSP ensures that the establishment of a large
number of relays in the same location does not bias the
selection of paths through them since WSP considers paths
at the granularity of the cluster to which all of them belong;
paths through different relays in a cluster are not considered
independently. Thus the modiﬁed WSP increases the onus on
an adversary to establish relays in multiple locations in order
to have one of those relays be on the chosen path with a very
high probability.
We conduct the following experiment 1) to choose the cell
size to be used in clustering of relays, and 2) to demonstrate
the improved resilience of WSP to an adversary as discussed
above. In the PL-Tor-Web dataset, for every (client, destina-
tion) pair, we emulate an adversary who controls the 5% of
relays that are closest to the direct line between the client
and the destination. We then model the adversary increasing
the number of relays that he controls by replicating these
5% of closest relays by a factor of 25. We run WSP on
this modiﬁed Tor network with and without clustering of
relays. In either case, given a (source, destination) pair, we
compute the probability of the path between them selected
by WSP traversing at least one compromised relay. This value
represents an upper bound on the fraction of cases in which the
chosen path will traverse a relay controlled by the adversary,
if the adversary controls at most 5% of relays.
Fig. 6(a) compares the distribution across (source, destina-
tion) pairs of this upper bound when clustering relays with
different cell sizes. We vary the edge length of every cell
from 0.25 to 4—measured in terms of the difference in latitude
or longitude—and, in each case, we compute the fraction of
paths that traverse a relay controlled by the adversary. We
see that using a edge length of 2 for each cell signiﬁcantly
decreases the inﬂuence of the adversary compared to the effect
when using lower edge lengths, and increasing the edge length
further has minimal impact.
Next, we evaluate the resilience offered by running WSP
after the clustering of relays. Fig. 6(b) compares the distri-
Fig. 5. WSP results in greater preference for paths through relays
located close to the direct line between the client and the destination.
relatively easy for an adversary to setup several relays in the
same location, for example, by renting several virtual machines
in a cloud service. The high probability of at least one of the
adversary’s relays being on the selected path increases the
chances for the adversary to use recent trafﬁc analysis attacks
on Tor [30] and infer that S is communicating with D.
The second problem with a strawman implementation of
WSP is its runtime. Today, Tor has over 2500 relays with
roughly 1000 of these relays willing to serve as exit nodes. The
number of candidate paths between a client and a destination
is therefore in the order of billions. So, a naive computation of
the end-to-end geographical distance on every candidate path
is computationally expensive and takes roughly 6.5 seconds
to run even on a 2.5 GHz processor. This large runtime—in
comparison to Internet path latencies that are of the order of
tens or hundreds of milliseconds—to even select a path can
render the selection of a low latency path redundant.
To address both of these problems, we cluster Tor relays
that are located in geographically nearby locations. We employ
a simple clustering algorithm in which we divide the globe
into a grid of square cells and cluster all relays within a cell;
the edge length of the cells is a conﬁgurable parameter. We
then execute WSP on the clustered Tor network where every
node is a cluster of relays, and each candidate path is through
three clusters. WSP computes the end-to-end distance on every
cluster-level path and then selects one path with preference to
shorter paths as before. We translate the chosen cluster-level
path to a path through three Tor relays by picking one relay
at random from each of the clusters on the selected path.
481
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
bution across (source, destination) pairs of the fraction of
paths that
traverse a compromised relay in the following
three cases: 1) when running WSP on the PL-Tor-Web dataset
without clustering of relays (No clusters, default), and when
an adversary replicates relays in this dataset as above and
WSP is executed 2) after clustering relays (using a cell size
of 2x2) (With clusters, 25x), or (3) without clustering (No
clusters, 25x). By comparing the “No clusters, default” and
“No clusters, 25x” lines, we see that,
in the absence of
clustering, the adversary can increase the fraction of paths
that traverse a compromised relay from around 35% to over
65% on average by replicating the relays that he controls by
25x. In contrast, when relays are clustered into cells of size
2x2, the adversary gains nothing by replicating relays.
Clustering of relays however has a negative impact on the
latencies along paths chosen by WSP. This is because, in
cases where there are several relays in a location close to the
direct line between the source and the destination, the basic
version of WSP can choose from the several candidate paths
through these relays. In contrast, after these relays have been
clustered, WSP has only path of choice through these relays.
Hence, as shown in Figure 6(c), the geographic distance along
the path chosen by WSP increases by roughly 15% in the
median case when relays are clustered. This inﬂation in path
length due to relay clustering is a compromise that we have
to bear, in exchange for increasing the onus on adversaries
to setup relays in several locations to attract trafﬁc through
compromised relays with high probability.
Finally, we evaluate the latency improvement obtained
with WSP in practice. We modify the default Tor client to
implement
the WSP path selection algorithm and use the
modiﬁed client to measure latencies over the Tor network
to the top 200 websites from 50 PlanetLab nodes. For each
(client, destination) pair, we run WSP 5 times and on each
attempt, we measure the median latency of 5 HTTP HEAD
requests. We then compute the median latency across the
5 attempts. We repeat the same process using the default
Tor client and compute the median latency across 5 paths
chosen by it, considering the median latency across 5 HTTP
HEAD requests on each path. Fig. 6(d) presents the latency
distribution measured across (client, destination) pairs when
using WSP as compared to that when using the default Tor
client. We see that WSP results in a 25% reduction in latency
in the median case.
C. Accounting for distributed destinations
Thus far, our exposition of WSP has assumed that the desti-
nation has a single location associated with it. In practice, the
destinations associated with interactive communication (e.g.,
webservers) are often replicated across several geographic
locations. In such cases, users specify the destination by its
hostname, and upon DNS resolution of the hostname, the
webservice provider returns the IP address of the server located
closest to the end-host that performs the DNS lookup. This
implies that when a client uses a Tor circuit to contact a
destination, the particular server with which the client ends
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
Distributed DNS
Single DNS
 0  0.2  0.4  0.6  0.8  1  1.2  1.4  1.6
Latency (sec)
Fig. 7.
distributed destinations.
Lower latencies obtained with WSP when accounting for
up communicating depends on DNS resolution of the desti-
nation’s hostname at the exit node on that circuit. Therefore,
when WSP estimates the end-to-end distance on any candidate
path, it must take into account the location of the particular IP
address to which the exit node on that path will be redirected.
However, at the time of path selection, it is impractical to
perform DNS lookups for the destination on all candidate exit
relays. Doing so would require the client to setup a circuit
for every candidate exit relay; the client cannot simply ask
a relay to resolve the destination hostname since that would
leak the client’s anonymity. Establishing one circuit for every
candidate exit relay every time a path needs to be selected
would not only impose signiﬁcant overhead on Tor but also
take several tens of seconds, thus nullifying the beneﬁts of
selecting a low-latency path.
Instead, we setup a DNS lookup service across a set of
15 geographically distributed PlanetLab nodes. When a client
needs to run WSP for a destination, it submits a request to
resolve the destination’s hostname to each of the PlanetLab
nodes running the DNS lookup service. The client submits
these requests via any one of the circuits that it had previously
established, e.g., the default Tor client establishes three circuits
when it starts up. The client uses HTTPS to submit these DNS
resolution requests to the PlanetLab nodes so that the exit
node on the circuit used for communicating with the PlanetLab
nodes cannot infer the destination. Once the client receives the
set of IP addresses obtained for the destination, we assume any
candidate exit relay would be redirected to the IP address that
is geographically closest to it amongst this set. Thus, when
we subsequently run WSP to pick a path to the destination,
we compute the end-to-end distance on each candidate path
by using the distance along the exit segment as the distance
between the exit node on that path and the destination’s IP
address to which we believe the exit node will be redirected.
To evaluate the utility of this modiﬁcation to WSP, we
consider the top 1000 websites from Quantcast and focus
on those that return IP addresses in multiple locations when
resolved from all PlanetLab nodes. We then measure latencies
over the Tor network to these websites with 50 PlanetLab
nodes as clients. We measure latencies in two cases. In the
ﬁrst case, we run WSP as described above where it uses
IP addresses obtained by resolving the destination on 15
geographically distributed PlanetLab nodes. In the second
case, we run WSP assuming the destination to have a single
482
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 0.8
 0.6
 0.4
 0.2
 0
α=0
α=0.25
α=0.5
α=0.75
α=1
 0  0.2  0.4  0.6  0.8  1  1.2  1.4  1.6
Latency (sec)
(a)
α=1
α=0.75
α=0.5
α=0.25
α=0
 0
 0.05  0.1  0.15  0.2  0.25  0.3
Gini coefficient
(b)
Fig. 8.
higher latencies and (b) greater entropy of path selection.
Increasing the value of α when using WSP results in (a)
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
α=0
α=0.25
α=0.50
α=0.75
α=1
 0
 0.2
 0.4
 0.6
 0.8
 1
Normalized distance
Fig. 9. End-to-end distances on paths chosen with WSP when using
α to tailor the set of relays from which we select entry guards.
IP address obtained by DNS resolution at a randomly chosen
exit relay. Fig. 7 compares the latencies measured in these two
cases. We see that accounting for the fact that destinations
could be potentially distributed reduces path latency in the
median case by 15%.
D. Latency versus anonymity tradeoff
Though clustering of relays reduces the chances of com-
promised relays being present on a large fraction of chosen
paths, WSP’s preference for shorter paths naturally reduces
the entropy of path selection. All users may not wish to trade-
off this reduction in entropy for lower latencies. Therefore,
we make path selection with WSP tunable with a parameter
α. A user can vary α in the range 0 to 1, with a value
of 0 corresponding to lowest
latencies and a value of 1
corresponding to highest entropy.
We incorporate this parameter α into WSP as follows. As
previously mentioned, after computing the end-to-end distance
on every candidate path, WSP associates a weight with every
path that is equal to the difference between the maximum
end-to-end distance across all paths and the distance on that
(1−α)
path. The probability of WSP choosing a particular path is
then proportional to its weight. We now modify this weight
w for a path to instead be w
. In the case when α is
equal to 0, WSP defaults to the original version we presented
above, which picks paths with a preference for shorter ones.
On the other hand, when α is equal to 1, all paths have a
weight of 1 and thus, any particular path is chosen at random.
For any other value of α between 0 and 1, path selection is
appropriately biased towards low latency or higher entropy.
Fig. 8 shows the effect that varying α has on both latencies
and entropy. Figure 8(a) shows latencies measured with α
equal to 0, 0.25, 0.5, 0.75, and 1 in the same setting as that
used in Section IV-B—median latency from 5 HEAD requests
each to the top 200 websites from 50 PlanetLab nodes as
clients. Lower values of α result in lower latencies.