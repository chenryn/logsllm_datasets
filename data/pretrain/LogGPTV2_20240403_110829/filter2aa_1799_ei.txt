### Transaction Log Files

The number of files in the transaction log directory varies based on the size of the transaction log, but it always contains at least two files: one for the Kernel Transaction Manager (KTM) log stream (file name: `TxfLogContainer00000000000000000001`), and another for the TxF log stream (file name: `TxfLogContainer00000000000000000002`). Additionally, the transaction log directory includes the TxF old page stream (file name: `Tops`), which will be discussed later.

### Experiment: Viewing NTFS Information

You can use the built-in `Fsutil.exe` command-line program to view information about an NTFS volume, including the placement and size of the MFT and MFT zone. Here is an example:

```plaintext
d:\>fsutil fsinfo ntfsinfo d:
NTFS Volume Serial Number : 0x48323940323933f2
NTFS Version : 3.1
LFS Version : 2.0
Number Sectors : 0x000000011c5f6fff
Total Clusters : 0x00000000238bedff
Free Clusters : 0x000000001a6e5925
Total Reserved : 0x00000000000011cd
Bytes Per Sector : 512
Bytes Per Physical Sector : 4096
Bytes Per Cluster : 4096
Bytes Per FileRecord Segment : 4096
Clusters Per FileRecord Segment : 1
Mft Valid Data Length : 0x0000000646500000
Mft Start Lcn : 0x00000000000c0000
Mft2 Start Lcn : 0x0000000000000002
Mft Zone Start : 0x00000000069f76e0
Mft Zone End : 0x00000000069f7700
Max Device Trim Extent Count : 4294967295
Max Device Trim Byte Count : 0x10000000
Max Volume Trim Extent Count : 62
Max Volume Trim Byte Count : 0x10000000
Resource Manager Identifier : 81E83020-E6FB-11E8-B862-D89EF33A38A7
```

In this example, the D: volume uses 4 KB file records (MFT entries) on a 4 KB native sector size disk (which emulates old 512-byte sectors) and uses 4 KB clusters.

### File Record Numbers

A file on an NTFS volume is identified by a 64-bit value called a file record number, which consists of a file number and a sequence number. The file number corresponds to the position of the file’s file record in the MFT minus 1 (or to the position of the base file record minus 1 if the file has more than one file record). The sequence number, which is incremented each time an MFT file record position is reused, enables NTFS to perform internal consistency checks. A file record number is illustrated in Figure 11-33.

### File Records

Instead of viewing a file as just a repository for textual or binary data, NTFS stores files as a collection of attribute/value pairs, one of which is the data it contains (called the unnamed data attribute). Other attributes that compose a file include the file name, timestamp information, and possibly additional named data attributes. Figure 11-34 illustrates an MFT record for a small file.

Each file attribute is stored as a separate stream of bytes within a file. Strictly speaking, NTFS doesn’t read and write files; it reads and writes attribute streams. NTFS provides these attribute operations: create, delete, read (byte range), and write (byte range). The read and write services normally operate on the file’s unnamed data attribute. However, a caller can specify a different data attribute by using the named data stream syntax.

### Attributes for NTFS Files

Table 11-6 lists the attributes for files on an NTFS volume. (Not all attributes are present for every file.) Each attribute in the NTFS file system can be unnamed or have a name. An example of a named attribute is the `LOGGED_UTILITY_STREAM`, which is used for various purposes by different NTFS components. Table 11-7 lists the possible `LOGGED_UTILITY_STREAM` attribute names and their respective purposes.

#### Table 11-6: Attributes for NTFS Files

| Attribute | Attribute Type Name | Resident? | Description |
|-----------|---------------------|-----------|-------------|
| Volume information | VOLUME_INFORMATION, VOLUME_NAME | Always, Always | These attributes are present only in the Volume metadata file. They store volume version and label information. |
| Standard information | STANDARD_INFORMATION | Always | File attributes such as read-only, archive, and so on; timestamps, including when the file was created or last modified. |
| File name | FILE_NAME | Maybe | The file’s name in Unicode 1.0 characters. A file can have multiple file name attributes, as it does when a hard link to a file exists or when a file with a long name has an automatically generated short name for access by MS-DOS and 16-bit Windows applications. |
| Security descriptor | SECURITY_DESCRIPTOR | Maybe | This attribute is present for backward compatibility with previous versions of NTFS and is rarely used in the current version of NTFS (3.1). NTFS stores almost all security descriptors in the Secure metadata file, sharing descriptors among files and directories that have the same settings. Previous versions of NTFS stored private security descriptor information with each file and directory. Some files still include a SECURITY_DESCRIPTOR attribute, such as Boot. |
| Data | DATA | Maybe | The contents of the file. In NTFS, a file has one default unnamed data attribute and can have additional named data attributes—that is, a file can have multiple data streams. A directory has no default data attribute but can have optional named data attributes. Named data streams can be used even for particular system purposes. For example, the Storage Reserve Area Table (SRAT) stream (SRAT) is used by the Storage Service for creating Space reservations on a volume. This attribute is applied only on the Bitmap metadata file. Storage Reserves are described later in this chapter. |
| Index root, index allocation | INDEX_ROOT, INDEX_ALLOCATION | Always, Never | Three attributes used to implement B-tree data structures used by directories, security, quota, and other metadata files. |
| Attribute list | ATTRIBUTE_LIST | Maybe | A list of the attributes that make up the file and the file record number of the MFT entry where each attribute is located. This attribute is present when a file requires more than one MFT file record. |
| Index Bitmap | BITMAP | Maybe | This attribute is used for different purposes: for nonresident directories (where an INDEX_ALLOCATION always exists), the bitmap records which 4 KB-sized index blocks are already in use by the B-tree, and which are free for future use as the B-tree grows; in the MFT, there is an unnamed “Bitmap” attribute that tracks which MFT segments are in use, and which are free for future use by new files or by existing files that require more space. |

#### Table 11-7: LOGGED_UTILITY_STREAM Attribute

| Attribute | Attribute Type Name | Resident? | Description |
|-----------|---------------------|-----------|-------------|
| Encrypted File Stream | EFS | Maybe | EFS stores data in this attribute that is used to manage a file’s encryption, such as the encrypted version of the key needed to decrypt the file and a list of users who are authorized to access the file. |
| Online encryption backup | EfsBackup | Maybe | The attribute is used by the EFS Online encryption to store chunks of the original encrypted data stream. |
| Transactional NTFSData | TXF_DATA | Maybe | When a file or directory becomes part of a transaction, TxF also stores transaction data in the TXF_DATA attribute, such as the file’s unique transaction ID. |
| Desired Storage Class | DSC | Resident | The desired storage class is used for “pinning” a file to a preferred storage tier. See the “NTFS support for tiered volumes” section for more details. |

Table 11-6 shows attribute names; however, attributes actually correspond to numeric type codes, which NTFS uses to order the attributes within a file record. The file attributes in an MFT record are organized in this manner.