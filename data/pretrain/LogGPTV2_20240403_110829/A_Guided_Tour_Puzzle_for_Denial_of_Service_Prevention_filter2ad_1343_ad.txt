against the common form of DoS attack due to its allowance
of puzzle solution pre-computations.
Juels and Brainard [2] introduced a hash function based
puzzle scheme, called client puzzles,
to defend against
connection depletion attack. Client puzzles addresses the
problem of puzzle pre-computation. Aura et al. [4] extended
the client puzzles to defend DoS attacks against authentica-
tion protocols, and Dean and Stubbleﬁeld [5] implemented a
DoS resistant TLS protocol with the client puzzle extension.
286
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply. 
Wang and Reiter [6] further extended the client puzzles
to prevention of TCP SYN ﬂooding, by introducing the
concept of puzzle auction. Price [22] explored a weakness of
the client puzzles and its above mentioned extensions, and
provided a ﬁx for the problem by including contribution
from the client during puzzle generation.
Waters et al. [23] proposed outsourcing of puzzle dis-
tribution to an external service called bastion, in order to
secure the puzzle distribution from DoS attacks. However,
the central puzzle distribution can be the single point of
failure, and the outsourcing scheme is also vulnerable to the
attack introduced by Price [22].
Wang and Reiter [24] used a hash-based puzzle scheme to
prevent bandwidth-exhaustion attacks at the network layer.
Feng et al. argued in [25] that a puzzle scheme should be
placed at the network (IP) layer in order to prevent attacks
against a wide range of applications and protocols. And Feng
and Kaiser et al. [3] implemented a hint-based hash reversal
puzzle at the IP layer to prevent attackers from thwarting
application or transport layer puzzle defense mechanisms.
Portcullis [8] by Parno et al. used a puzzle scheme
similar to the puzzle auction by Wang [6] to prevent
denial-of-capability attacks that prevent clients from setting
up capabilities to send prioritized packets in the network.
Portcullis moves the puzzle generation to clients, eliminating
the puzzle construction overhead at the server. However,
clients willing to solve harder puzzles that require more
computation are given higher priority, thus giving unfair
advantage to powerful attackers.
B. Non-Parallelizable Puzzles
Non-parallelizable puzzles prevents a DDoS attacker that
uses parallel computing with large number of compromised
clients to solve puzzles signiﬁcantly faster than average
clients. Rivest at al. [26] designed a time-lock puzzle which
achieved non-parallelizability due to the lack of known
method of parallelizing repeated modular squaring to a
large degree [26]. However, time-lock puzzles are not very
suitable for DoS defense because of the high cost of puzzle
generation and veriﬁcation at the server.
Ma [27] proposed using hash-chain-reversal puzzles in the
network layer to prevent against DDoS attacks. Hash-chain-
reversal puzzles have the property of non-parallelizability,
because inverting the digest i in the chain cannot be started
until the inversion of the digest i+1 is completed. However,
construction and veriﬁcation of puzzle solution at the server
is expensive. Furthermore, using a hash function with shorter
digest length does not guarantee the intended computational
effort at the client, whereas using a longer hash length makes
the puzzle impossible to be solved within a reasonable time.
Another hash chain puzzle is proposed by Groza and
Petrica [28]. Although this hash-chain puzzle provides non-
parallelizability, it has several drawbacks. The puzzle con-
struction and veriﬁcation at the server is relatively expensive,
and the transmission of a puzzle to client requires high-
bandwidth consumption.
More recently Tritilanunt et al. [9] proposed a puzzle
construction based on the subset sum problem [29], and
suggested using an improved version [30] of LLL lattice
reduction algorithm by Lenstra et al. [31] to compute the
solution. Problems with the subset sum puzzles include high
memory requirements and the failure of LLL in dealing with
large instance and high density problems.
C. Memory-Bound Puzzles
Abadi et al. [32] argued that memory access speed is
more uniform than the CPU speed across different computer
systems, and suggested using memory-bound function in
puzzles to improve the uniformity of puzzle cost across
different systems. Dwork et al. [33] further investigated
Abadi’s proposal and provided an abstract memory-bound
function with a amortized lower bound on the number of
memory accesses required for the puzzle solution. Although
these results are promising, there are several issues need to
be solved regarding memory-bound puzzles.
First, memory-bound puzzles assume a upper-bound on
the attacker machine’s cache size, which might not hold
as technology improves. Increasing this upper-bound based
on the maximum cache size available makes the memory-
bound puzzles too expensive to compute by average clients.
Secondly, deployment of proposed memory-bound puzzle
schemes require ﬁne-tuning of various parameters based on
a system’s cache and memory conﬁgurations. Furthermore,
puzzle construction in both schemes is expensive, and band-
width consumption per puzzle transmission is high. Last,
but not least, clients without enough memory resources,
such as PDAs and cell phones, cannot utilize both puzzle
schemes, hence require another service that performs the
puzzle computation on their behalf.
D. Related Work Summary
None of the puzzle schemes in all three categories we
discussed provides solution to the resource disparity prob-
lem. Moreover, the puzzle computation interferes with the
concurrently running user applications on client machines,
in the form of cache displacement (memory-bound puzzles)
or competing for CPU power (CPU-bound puzzles).
VII. CONCLUSION AND FUTURE WORK
In this paper, we showed that most of the existing cryp-
tographic puzzle schemes do not consider the resource dis-
parity between clients. Although some proposals suggested
using memory-bound puzzles, practicality of such schemes
is still an open question. We argued using examples that
resource disparity reduces or even removes the effectiveness
of cryptographic puzzle schemes as a defense against denial
of service attacks. We introduced guided tour puzzle, and
showed that the guided tour puzzle achieves all desired
287
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply. 
properties of an effective and efﬁcient cryptographic puzzle
scheme. In particular, we showed how guided tour puzzle
achieves puzzle fairness, minimum interference properties,
and how guided tour puzzle can achieve better defense
against denial of service attacks.
As a future work, we would like to further improve guided
tour puzzle in terms of the following. First, we would like to
eliminate the need for the server’s involvement in the puzzle
generation process. Although currently puzzle construction
requires only one hash operation at the server, we think this
can be eliminated. Second, locations of tour guides most
likely to have direct impact on the optimality of the guided
tour puzzle, hence further investigation is needed to ﬁnd
out optimal ways to position tour guides in the network.
Last but not least, more extensive evaluation of guided tour
puzzle using both simulation and practical network testbed
is needed to further consolidate our analysis of guided tour
puzzle.
REFERENCES
[1] C. Dwork and M. Naor, “Pricing via processing or combatting
junk mail,” in CRYPTO ’92, Santa Barbara, CA, 1992, pp.
139–147.
[2] A. Juels and J. Brainard, “Client puzzles: A cryptographic
countermeasure against connection depletion attacks,” in the
1999 Network and Distributed System Security Symposium
(NDSS ’99), San Diego, CA, 1999, pp. 151–165.
[3] W. Feng, E. Kaiser, and A. Luu, “The design and implemen-
tation of network puzzles,” in IEEE INFOCOM ’05, vol. 4,
Miami, FL, 2005, pp. 2372–2382.
[4] T. Aura, P. Nikander, and J. Leiwo, “DoS-resistant authenti-
cation with client puzzles,” in 8th International Workshop on
Security Protocols, vol. 2133, 2000, pp. 170–181.
[5] D. Dean and A. Stubbleﬁeld, “Using client puzzles to protect
TLS,” in 10th USENIX Security Symposium, Washington DC,
2001, pp. 1–8.
[6] X. Wang and M. K. Reiter, “Defending against denial-of-
service attacks with puzzle auctions,” in IEEE Symposium on
Security and Privacy, Washington DC, 2003, pp. 78–92.
[7] “Fast
sha-1 hash core
asic,” Helion Technology
Limited, 2005. [Online]. Available: http://www.heliontech.
com/downloads/sha1 asic fast helioncore.pdf
for
[8] B. Parno, D. Wendlandt, E. Shi, A. Perrig, B. Maggs, and
Y. Hu, “Portcullis: Protecting connection setup from denial-
of-capability attacks,” in ACM SIGCOMM ’07, Kyoto, Japan,
2007, pp. 289–300.
[9] S. Tritilanunt, C. Boyd, E. Foo, and J. M. Gonz´alez, “To-
ward non-parallelizable client puzzles,” in 6h International
Conference on Cryptology and Network Security, vol. 4856,
Singapore, 2007, pp. 247–264.
[10] Secure Hash Standard, National Institute of Standards and
Technology (NIST) Std., 1995.
[11] B. Mulvey, “Evaluation of hash functions,” 2006. [Online].
Available: http://bretm.home.comcast.net/∼bretm/hash/
[12] B. H. Bloom, “Space/time trade-offs in hash coding with
allowable errors,” Communications of the ACM, vol. 13(7),
pp. 422–426, 1970.
[13] “Planet-lab scalable sensing service,” Scalable Sensing
Service. [Online]. Available: http://networking.hpl.hp.com/
s-cube/
[14] “About planet
lab,” Planet Lab. [Online]. Available: http:
//www.planet-lab.org/about
[15] X. Yang, D. Wetherall, and T. Anderson, “A DoS-limiting
network architecture,” in ACM SIGCOMM ’05, Philadelphia,
2005, pp. 241–252.
[16] A. Yaar, A. Perrig, and D. Song, “SIFF: A stateless Internet
ﬂow ﬁlter to mitigate DDoS ﬂooding attacks,” in IEEE
Symposium on Security and Privacy, 2004, pp. 130–143.
[17] D. G. Andersen, “Mayday: Distributed ﬁltering for Internet
service,” in 4th USENIX Symposium on Internet Technologies
and Systems, Seattle, WA, 2003.
[18] R. Thomas, B. Mark, T. Johnson, and J. Croall, “Netbouncer:
Client-legitimacy-based high-performance DDoS ﬁltering,” in
3rd DARPA Information Survivability Conference and Expo-
sition, 2003, pp. 14–25.
[19] S. M. Bellovin, M. Leech, and T. Taylor, “ICMP traceback
messages,” IETF Draft, 2003.
[20] S. Savage, D. Wetherall, A. Karlin, and T. Anderson, “Prac-
tical network support for IP traceback,” in ACM SIGCOMM
’00, vol. 30(4), Stockholm, Sweden, 2000, pp. 295–306.
[21] R. Mahajan, S. M. Bellovin, S. Floyd, J. Ioannidis, V. Paxson,
and S. Shenker, “Controlling high bandwidth aggregates in
the network,” ACM Computer Communication Review, vol.
32(3), pp. 62–73, 2002.
[22] G. Price, “A general attack model on hash-based client puz-
zles,” in 9th IMA Conference on Cryptography and Coding,
vol. 2898, Cirencester, UK, 2003, pp. 319–331.
[23] B. Waters, A. Juels, J. A. Halderman, and E. W. Felten, “New
client puzzle outsourcing techniques for dos resistance,” in
11th ACM CCS, 2004, pp. 246–256.
[24] X. Wang and M. K. Reiter, “Mitigating bandwidth-exhaustion
attacks using congestion puzzles,” in 11th ACM Conference
on Computer and Communications Security, Washington DC,
2004, pp. 257–267.
[25] W. Feng, “The case for TCP/IP puzzles,” in ACM SIGCOMM
Future Directions in Network Architecture (FDNA ’03), Karl-
sruhe, Germany, 2003.
[26] R. L. Rivest, A. Shamir, and D. A. Wagner, “Time-lock
puzzles and timed-release crypto,” MIT, Cambridge, Mas-
sachusetts, Tech. Rep., 1996.
[27] M. Ma, “Mitigating denial of service attacks with password
puzzles,” in International Conference on Information Technol-
ogy: Coding and Computing (ITCC ’05), vol. 2, Las Vegas,
2005, pp. 621–626.
[28] B. Groza and D. Petrica, “On chained cryptographic puzzles,”
in 3rd Romanian-Hungarian Joint Symposium on Applied
Computational Intelligence (SACI ’06), Timisoara, Romania,
2006.
[29] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein,
Introduction to Algorithms, 2nd ed. MIT Press and McGraw-
Hill, 2001, ch. 35.
[30] M. J. Coster, A. Joux, B. A. Lamacchia, A. M. Odlyzko,
C. Schnorr, and J. Stern, “Improved low-density subset sum
algorithms,” Computational Complexity, vol. 2(2), 1992.
[31] A. K. Lenstra, H. W. Lenstra, and L. Lov´asz, “Factoring poly-
nomials with rational coefﬁcients,” Mathematische Annalen,
vol. 261(4), pp. 515–534, 1982.
[32] M. Abadi, M. Burrows, M. Manasse, and T. Wobber, “Mod-
erately hard, memory-bound functions,” in 10th Annual Net-
work and Distributed System Security Symposium (NDSS
’03), San Diego, CA, 2003, pp. 25–39.
[33] C. Dwork, A. Goldberg, and M. Naor, “On memory-bound
functions for ﬁghting spam,” in CRYPTO ’03, 2003, pp. 426–
444.
288
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply.