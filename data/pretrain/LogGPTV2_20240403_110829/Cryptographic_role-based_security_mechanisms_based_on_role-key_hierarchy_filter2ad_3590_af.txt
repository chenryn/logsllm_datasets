crypt a ﬁle faster) or 10,000 users in a compressed form
at once.
7. CONCLUSION
We have proposed a role-key hierarchy structure along
with hierarchical RBAC model to accommodate the require-
ments of cryptographic access control for large-scale sys-
tems. Based on this hierarchy model, we further proposed
several practical role-based security mechanisms to support
signature, authentication and encryption constructions on
elliptic curve cryptosystem. Our experiments clearly demon-
strated the proposed schemes are ﬂexible and eﬃcient enough
to support large-scale systems. For our further work, we
plan to accommodate other access control features of RBAC
such as session management and constraints. Also, our
promising results lead us to investigate how emerging dis-
tributed computing technologies such as service computing,
cloud computing and mobile computing can leverage the
proposed schemes with possible extensions.
8. REFERENCES
[1] S. Akl and P. Taylor. Cryptographic solution to a
multilevel security problem. In Advances in Cryptology
(CRYPTO’82), 1982.
[2] S. Akl and P. Taylor. Cryptographic solution to a
problem of access control in a hierarchy. ACM
Transaction Computer System, 1(3):239–248, 1983.
[3] E. Bertino, N. Shang, and S. Wagstaﬀ. An eﬃcient
time-bound hierarchical key management scheme for
secure broadcasting. IEEE Trans. on Dependable and
Secure Computing, 5(2):65–70, 2008.
[4] D. Boneh and M. Franklin. Identity-based encryption
from the weil pairing. In Advances in Cryptology
(CRYPTO’01), volume 2139 of LNCS, pages 213–229,
2001.
[5] D. Boneh and M. Hamburg. Generalized identity
based and broadcast encryption schemes. In
ASIACRYPT, pages 455–470, 2008.
[6] D. Boneh and H. Shacham. Group signatures with
veriﬁer-local revocation. In ACM Conference on
Computer and Communications Security, pages
168–177, 2004.
[7] B. W. D. Boneh, C. Gentry. Collusion resistant
broadcast encryption with short ciphertexts and
private keys. In Advances in Cryptology
(CRYPTO’2005), volume 3621 of LNCS, pages
258–275, 2005.
[8] C. Gentry and A. Silverberg. Hierarchical id based
cryptography. In Advances in Cryptology
(ASIACRYPT 2002), volume 2501 of LNCS, pages
548–566, 2002.
[9] E. Goh, H. Shacham, N. Modadugu, and D. Boneh.
Sirius: Securing remote untrusted storage. In
Proceedings of the Internet Society (ISOC) Network
and Distributed Systems Security (NDSS) Symposium,
pages 131–145, 2003.
[10] J. Jing and G.-J. Ahn. Role-based access management
for ad-hoc collaborative sharing. In Proc. of 11th
Symposium on Access Control Models and
Technologies (SACMAT), pages 200–209, 2006.
[11] X. Liang, Z. Cao, H. Lin, and J. Shao. Attribute based
proxy re-encryption with delegating capabilities. In
ASIACCS, pages 276–286, 2009.
[12] R. S. Q. Mahesh Kallahalla, Erik Riedel and K. Fu.
Plutus: Scalable secure ﬁle sharing on untrusted
storage. In Proceedings of the 2nd USENIX
Conference on File and Storage Technologies (FAST),
pages 29–42, 2003.
[13] R. Sandhu, E. Coyne, H. Fenstein, and C. Youman.
Role-based access control models. IEEE Computer,
29(2):38–47, 1996.
[14] R. Sandhu, D. Ferraiolo, and D. Kuhn. The nist model
for role-based access control: Towards a uniﬁed
standard. In Proceedings of 5th ACM Workshop on
Role Based Access Control (RBAC’00), pages 47–63,
2000.
[15] W. Tzeng. A time-bound cryptographic key
assignment scheme for access control in a hierarchy.
IEEE Trans. on Knowledge and Data Engineering,
14(1):182–188, 2002.
[16] D. Wallner, E. Harder, and R. Agee. Key management
for multicast: Issues and architecture. Technical
Report IETF RFC 2627, In internet draft
draft-waller-key-arch-01.txt, 1999.
[17] C. Wong, M. Gouda, and S. Lam. Secure group
communications using key graphs. In Proc. ACM
SIGCOMM’1998, volume 28 of ACM press, pages
68–79, 1998.
APPENDIX
A. SECURITY MODEL FOR COLLUSION
We deﬁne the security notion against collusion attacks in
terms of security games between a challenger B and an ad-
versary A. We divide the users into two categories: honest
users and corrupted users, so that a set of corrupted users
R is built. Moreover, there exists many honest and cor-
rupted users in the same role. We ﬁrst deﬁne a general
model against collusion attacks:
1. Initial: The challenger B constructs an arbitrary role
hierarchy Ψ = hR, (cid:22)i with |R| = m, and then runs
Setup(s, Ψ) to generate the partial-order key hierarchy
H and initial public parameters params, ﬁnally sends
them to A.
2. Learning: A adaptively issues n times queries q1, · · · , qn
to learn the information of H, where qi is one of the fol-
lowing:
• Honest user query (ui,j 6∈ R): Using AddU ser(mk,
ui,j), B generates a new user and sends this user’s
label labi,j to A.
• Corrupted user query (ui,j ∈ R): Using AddU ser
(mk, ui,j), B generates a new user and returns this
user’s secret key ski,j, includes user label labi,j and
private key dki,j, to A.
In fact, the n users are joined into this system via n
times queries. A ends up with a key hierarchy H (in-
cludes (params, {labi,j}ui,j 6∈R)) and a set of colluders
{ski,j}ui,j ∈R, where |R| = t.
3. Challenge: Involves two cases:
11
1
2(cid:12)(cid:12)(cid:12)(cid:12)
= (cid:12)(cid:12)(cid:12)(cid:12)
• Framing user attack (labi,j : ui,j 6∈ R): B picks
a honest user ui,j at random, and then sends his
label labi,j to A as the challenge.
• Role’s privilege attack (ri ∈ R): B picks a role
ri ∈ R at random, and then sends the challenge ri
to A. Note that, ri may be either the honest roles
(for avoiding the revocation) or the corrupted roles
(for gain the privilege).
4. Guess: A outputs a guess of user key ski,j. A wins if
ski,j is valid, and otherwise it loses.
We denote by AdvE,A(t, n, m) the advantage of adversary
A in winning the game:
AdvH,A(t, n, m)
=
1
2
|Pr[V (H, AH(Ci)) = 1] − Pr[V (H, AH(Ci)) = 0]|
Pr[V (H, AH(Ci)) = 1] −
,
where, Ci is the i-th challenge and V is a veriﬁcation function
of ski,j. We say that a construction is (t, n, m)-secure if for
a security parameter s and all probabilistic polynomial time
adversaries A, AdvE,A(t, n, m) is a negligible function of s.
B. SECURITY PROOF AGAINST COLLU-
SION ATTACKS
Proof. Firstly, we prove the security of framing attack.
Without loss of generality, we prove the security in G1 rather
than in G1 × G2. It is obvious that the latter is hard-er than
the former. The security of frame attack is changed into the
problem: given the number of colluders t and
{Wi}ri ∈R, {hxil,jl , Ail,jl i}uil ,jl
∈R,
it is infeasible to forge a new key hx′
and {x′
∈R.
il ,jl }uil ,jl
i,j, A′
i,ji, where |R| ≤ t,
The proof is used by the reduction to absurdity. Suppose
an adversary A can solve the above problem with the ad-
vantage ǫ, i.e., AdvH,A(t, n, m) > ǫ. Using A, we build an
algorithm B to solves the k-SDH problem in G1.
Assume the algorithm B is input a random sequence
hG, [ξ]G, [ξ2]G, · · · , [ξk]Gi
and expect to output hc, [ 1
c ∈ Z∗
p. B works by interacting with A as follows:
ξ+c ]Gi, where ξ is unknown and
1. Initial: Firstly, B chooses an arbitrary role hierarchy
hR, (cid:22)i and assigns a random τi ∈ Z∗
p for each role ri ∈
R, as well as a random τ0 ∈ Z∗
τk
in terms of the proposed scheme. B selects at most k−1
roles as the set of corrupted roles {rci }, and use them
j=0 aj ·
xj with k − 1 degrees, where (x1, x2, · · · , xk−1) is a
sequence chosen randomly by B in Z∗
p. Let ζi = τ0 +Pri6(cid:22)rk
i=1 (ζci x + xi) = Pk−1
to a polynomial f (x) = Qk−1
p. B deﬁnes
G = [f (ξ)]G = [
ai · ξi]G =
k−1
Xi=0
ai · [ξi]G,
Ui = [τi · ξ]G = [
τiaj · ξj+1]G =
k−1
k−1
Xi=0
Xj=0
Finally, B sends all Ui to A in ri ∈ R.
τiaj · [ξj+1]G.
k−1
Xj=0
12
2. Learning: involves two kinds of query:
• Honest user query (ui,j 6∈ R): B picks a random ti
as the user label, saves it for the label set T , and
returns it to A.
• Corrupted user query (ui,j ∈ R): If ri is the cor-
rupted roles {rci } and f (x) has a unassigned item
(ζci x + xi), then B deﬁnes labi,j = xi,j = xi and
Ai,j =(cid:20)
xi,j
ζci ξ + xi,j(cid:21) G =(cid:20) xi · f (ξ)
ζci ξ + xi(cid:21) G.
(20)
B can compute it due to f (x)/(ζci x + xi) is a com-
putational polynomial with k − 2 degree. B sends
it to A.
Finally, after n times queries, A gets at most k − 1
secret keys and a label set T = {ti}.
3. Challenge: B picks a random ts from T = {ti}, and
then sends it to A as the challenge label. Then A runs
the algorithm to output a new forged key hlabl,s, Al,si =
hts, [
]Gi in the role rl.
ts
ζlξ+ts
4. Guess: B changes hts, [
of the generator G, ht′
ts
ζl ξ+ts
s, [ 1
ξ+t′
s
]Gi into the representation
]Gi, as follows:
(21)
(cid:20)
ts
ζlξ + ts(cid:21) G = [ts](cid:20) f (ξ)
ζlξ + ts(cid:21) G
= [ts]"k−2
Xi=0
i · ξi +
a′
where, we can compute a′
i=0 ai·
i · xi)(ζlx + ts) + r. Such that if ts 6= xl,
0, · · · , a′
i=0 a′
then r 6= 0. Thus, B can compute
xi = (Pk−2
(cid:20)
ξ + t′
1
= [
ζl
r
s(cid:21) G = [
] [t−1
s ](cid:20)
ζl
r
s ]Al,s −
] [t−1
Xi=0
ζiξ + ts(cid:21) G −
Xi=0
ts
r
ζlξ + ts# G,
k−2 by f (x) =Pk−1
i ·(cid:16)[ξi]G(cid:17)!
i ·(cid:16)[ξi]G(cid:17)! .
k−2
k−2
a′
a′
and t′
s = ts/ζl. Finally, B outputs ht′
s, [ 1
ξ+t′
s
]Gi.
Hence, if the adversary A can break RHC scheme at polyno-
mial time in non-negligible advantage ε, then the algorithm
B can solve k-SDH problem at the polynomial-time, that is,
the advantage of algorithm B is AdvH,A(k − 1, n, m) > ε.
This denotes the algorithm B can compute k-SDH with a
non-negligible success probability, which would contradict
assumption.
Similarly, we also prove collusion security against the role’s
privilege attack, only if we change the challenge into an
assigned role rl and the adversary A returns a forged key
hts, [
]Gi in the role rl, as well as the other parts of
this proof remain unchanged.
ζl ξ+ts
ts
It is easy to ﬁnd that the security of this scheme is inde-
pendent of the number of colluders under k-SDH assump-
tion. This scheme is also secure even if the number of collud-
ers is equal to the total number of users under (n + 1)-SDH
assumption, where k − 1 = n and |U | = n.