protocol is proven in Theorem 4 below, the proof of which is given in Appendix B.
Theorem 4. Assuming (ComGen, Com, Open) is a secure commitment scheme, and H $← H is
a collision-resistant hash function, protocol Π5pc(C,{P1, . . . , P5}) securely realizes the functionality
F C
sfe({P1, . . . , P5})1 in the F4AOT-hybrid model.
In practice, it is useful to execute the distributed circuit garbling protocol phase of the 5PC
in our protocol before both the garbled input generation phases, so that the protocol can be split
into a (slower) oﬄine phase, that is independent of all inputs to the computation, and a (faster)
online phase, that depends on inputs. In this case, our proof should be modiﬁed to use an adaptive
notion of distributed garbling similar to what is deﬁned in [BHR12], and can then be shown to be
secure in the random oracle model.
4.3 Passively secure 5PC protocol
So far we have described our 5PC protocol against malicious adversaries. The protocol can be
signifcantly simpliﬁed in the semi-honest case. We only point out the simpliﬁcation we can make
to the actively secure 5PC protocol but omit a full description. (i) First, all calls to F4AOT can be
replaced by the semi-honest variant described in Figure 10, which avoids the use of commitments
and is much more communication eﬃcient. In particular, the bit OTs only require communicating
a single bit while the string OTs only communicate a single string. (ii) It is suﬃcient for one of
the garblers (say, P1) to compute the full garbled circuit an send it to P5. The other parties can
simply provide the necessary shares for computing the garbled circuit to P1. Consequently, they
also do not sent hashes of the garbled circuit to P5. (iii) Some extra checks done in the garbled
input generation can also be removed. For example, it is suﬃcient for only one party (as opposed to
three) to send share of the permutation bits for input wires, and we can remove the commitments
1Recall that we slightly abuse notation, and mean security with abort.
14
Protocol Π5pc(C,{P1, . . . , P5})
‘key’,
‘bitOT’,
‘delta’,
‘perm’,
Inputs. All parties hold the circuit C, security parameter κ and pseudorandom function
family F.
‘strOT’ and ‘rand’ are known public strings. Let
(ComGen, Com, Open) be a secure noninteractive commitment scheme, and H a collision-resistant
hash function. In addition, Pi has a private input xi ∈ {0, 1}(cid:96). The circuit C(x1, x2, x3, x4, x5) is
modiﬁed into a circuit C(cid:48)(x1, x2||x(cid:48)
Seed distribution.
4) = C(x1, x2, x3, x4, x(cid:48)
3 ⊕ x(cid:48)
4).
2, x3||x(cid:48)
3, x4||x(cid:48)
2 ⊕ x(cid:48)
P1 and P2 generate random seeds s1 and s2 respectively and send them to both P3 and P4. P3
and P4 exchange these two seeds and abort if they do not match. P3 and P4 send s3 and s4 to
both P1 and P2. P1 and P2 exchange these two seeds and abort if they do not match.
Denote by Si the set of indices of parties with knowledge of si, i.e., S1 = {1, 3, 4}, S2 = {2, 3, 4},
S3 = {1, 2, 3}, and S4 = {1, 2, 4}.
j=1pj
w and b(cid:48) := b ⊕ pw.
Garbled input generation for P1, . . . , P4. For all i ∈ [4], for each input wire w corresponding to
Pi with input value b, do the following:
Let j = [4] − Ri. For all (cid:96) ∈ Sj, P(cid:96) computes pj,(cid:96)
w := Fsj (‘perm’||w) and sends it to Pi. Pi
checks that it receives the same value from all P(cid:96)’s. If so, simply denote the bit by pj
w; if not,
it sets aborti := true. If aborti = true, it sets b to a uniformly random value independent of its
true input.
Pi then sets pw := ⊕4
Let j = 4−Ri. For all (cid:96) ∈ Sj, Pi generates random bits b(cid:96) such that ⊕(cid:96)∈Sj b(cid:96) = b(cid:48), and random
strings β(cid:96) ∈ {0, 1}κ such that ⊕(cid:96)∈Sj β(cid:96) = 0κ. Pi sends b(cid:96), β(cid:96) to P(cid:96). Denote by j1, j2, j3 the three
indices in Sj. Pj1 generates random strings γj(cid:96) ∈ {0, 1}κ where ⊕3
(cid:96)=1γj(cid:96) = 0κ, and sends γj2 to
Pj2 and γj3 to Pj3 .
w,b(cid:48) := Fsj (‘key’||w||0) ⊕ Fsj (‘delta’) · b(cid:48)
If aborti = false, then for all j ∈ Ri, Pi computes kj,i
and sends to P5; otherwise, Pi sends ⊥ to P5.
:= Fsj (‘key’||w||0) ⊕
Let j = [4] − Ri. For all (cid:96) ∈ Sj, if abort(cid:96) = false, P(cid:96) computes ki,j
Fsj (‘delta’) · b(cid:96) and sends c(cid:96) := ki,j
w,b(cid:48) for all j ∈ Ri and
Finally, P5 computes the label of wire w as the concatenation of kj,i
w,b(cid:48) := ⊕(cid:96)∈Sj cj for j = [4] − Ri (or sets abort5 := true if it receives any ⊥ message from any
ki
Pi, i ∈ [4]).
⊕ β(cid:96) ⊕ γ(cid:96) to P5; otherwise P(cid:96) sends ⊥ to P5.
w,bj
w,bj
(Continued in Figure 7.)
Figure 6: The 5PC protocol, secure against malicious adversaries.
15
Protocol Π5pc(C,{P1, . . . , P5}) (cont’d)
Garbled input generation for P5. For each input wire w in the original circuit C corresponding
to P5 with input value b, denote the corresponding input wires for P2, P3, P4 in the modiﬁed circuit
C(cid:48) by w2, w3, w4.
P5 generates random bits b2, b3, b4 such that b2 ⊕ b3 ⊕ b4 = b, and sends bi to Pi, i ∈ {2, 3, 4}.
For each of the three wires w(cid:96), for all i ∈ [4], for j ∈ Ri, each Pi computes kj,i
w(cid:96),e :=
Fsj (‘key’||w(cid:96)||0) ⊕ Fsj (‘delta’) · e and rj,i
:= Fsj (‘rand’||w(cid:96)||e), for e ∈ {0, 1}, and computes
(Comi
j,wk,1)
to P5 (or ⊥, if aborti = true).
P5 veriﬁes that all commitment pairs it receives from the other parties are consistent, i.e., all
commitments derived from the same seeds are equal. If not, it sets abort5 := true.
For each wire w(cid:96) where (cid:96) ∈ {2, 3, 4}, P(cid:96) performs the steps above for garbled input generation
of non-P5 parties to compute and send to P5 garbled inputs for wire w(cid:96) using the input value b(cid:96).
for all j ∈ S(cid:96), P(cid:96)
The only diﬀerence compared to above is that instead of only sending kj,(cid:96)
sends Openj,(cid:96)
Comj,w(cid:96),b(cid:96)) = 0, P5 sets aborti := true.
e ). It then sends the ordered pair (Comi
e ) to P5. If Open(Openj,(cid:96)
j,wk,0, Comi
j,w(cid:96),e, Openi
j,w(cid:96),e) := Com(kj,i
w(cid:96),e; rj,i
w(cid:96),b(cid:96)
e
= (kj,(cid:96)
w(cid:96),b(cid:96)
, rj,(cid:96)
w(cid:96),b(cid:96)
w(cid:96),b(cid:96)
Distributed circuit garbling.
P1, . . . , P4 run the distributed circuit garbling protocol Π4gc(C(cid:48),{P1, P2, P3, P4}) using the seeds
generated and distributed above as input. As a result, for all i ∈ [4], Pi learns the garbled version
of circuit C(cid:48), call it GC(cid:48) (or ⊥). In addition, for all j ∈ Si, Pj learns si.
P1 sends GC(cid:48) (or ⊥) to P5, while the other parties only send H(GC(cid:48)) (or ⊥). P5 checks that
all the GC(cid:48) and the received hash values are consistent; otherwise sets abort5 := true.
Evaluation and output. P5 now has the correct garbled circuit GC(cid:48), and garbled inputs (call
this X) for all parties. It evaluates the garbled circuit using Ev(GC(cid:48), X) to get Y and sends Y to
all parties. All parties execute y = De(d, Y ) to compute the output of the function, ya.
aFor ease of exposition, we assume that the evaluator does not receive any output. If we require the
evaluator to obtain output, then similarly to what is done in the 2-party setting, the evaluator also receives
hashes of both output labels along with the garbled circuit, thus allowing the evaluator to learn what bit
the output label corresponds to.
Figure 7: The 5PC protocol, secure against malicious adversaries (continued from Fig. 6).
16
introduced for preventing malicious behavior in the garbled input generation for P5. This yields a
much more eﬃcient semi-honest 5PC protocol, as shown in our experimental results in Section 6.1.
5 Eﬃciency Considerations
We start by discussing the communication eﬃciency of our 5PC protocol, followed by number of
communication rounds, followed by a fast instantiation of a non-interactive commitment scheme.
Communication.
In the 4-party distributed circuit garbling protocol, the main communication
cost is due to calls to the AOT protocol. Speciﬁcally, the number of F4AOT calls for bit-OTs
is 12 per AND gate (since there are 4 × 3 pairwise OTs in the semi-honest distributed circuit
garbling protocol), where each party plays the role of the sender in 3 and of the receiver in 3.
Since every bit AOT has a communication of 3κ bits, this part gives us a total communication
of 36κ|C| bits. The number of F4AOT calls for the string-OTs is 36 per AND gate, borrowing all
optimizations from [BLO16b], where each party is the sender in 9 and receiver in 9. Since the
AOTs are performed for each gate in parallel, we also take advantage of our Batch AOT protocol
to obtain better eﬃciency. In particular, the amortized communicaton cost of each AOT in the
batch setting is two commitments and one decommitment. This yields 96 commitments and 48
decommitments (κ-bits each); i.e., 144κ bits of total communication per gate for the string OTs.
Hence, the OT phase has a total communication of 180κ|C| bits.
To communicate the shares of the computed garbled circuit among the parties, each of the 4
parties must send 4 garbled circuit “shares” and each garbled gate requires 16κ bits of communi-
cation. This yields a total of 64κ|C| bits of communication. This sums up all communications that
grow with the number of AND gates, yielding a total of roughly 244κ|C| bits of communication in
total.
In contrast, the passively secure 5PC protocol of [BLO16b] which would perform a 5-party
distributed circuit garbling, would require 20 bit OTs per gate and 60 string OTs per gate. Ignoring
the communication cost of the bit OTs and assuming 4/3 hash values are communicated per
string OT (since these are correlated OTs they can beneﬁt from a 1/3 reduction in communication
[BLO16b]), this yields 80κ bits of communication per gate. An additional communication of 500κ
bits per gate is required for exchanging the garbled circuit (each of the 5 parties receives 5 of the full
garbled circuits which at 20κ bits pergate ). This results in a total of 580κ bits of communication
per gate or roughly 580κ|C| bits of communication in total.
In summary, we obtain a 5PC protocol tolerating two malicious corrupted parties with 58%
better communication complexity than the semi-honest 5PC protocol with security against four
corruptions. We realize that the security guarantees are incomparable; yet, this indicates that one
can achieve a tradeoﬀ between number of corrupted parties and communication complexity.
Rounds. The protocol requires two initial rounds to exchange the seeds among the parties. This
initial exchange, however, can be done only once and then used for multiple protocol execution;
hence, we do not count it towards the total round complexity. Each set of Batch AOTs requires
one round, hence a total of two. One additional round is required for exchanging shares of the
garbled circuit, and another round for sending the garbled circuits to P5. Three additional rounds
are needed for P5 to learn all the garbled inputs, and one extra round to send the results back to
all parties. This yields a total of 8 rounds of interaction for the full 5PC protocol (ignoring the two
rounds for exchanging the seeds).
17
A fast commitment scheme. While instantiating our bit and string commitments (required
in the bit- and string-OT protocols), we observe that the (standard) commitment scheme with
Com(m; r) = (c = H(m||r), d = m||r) (where H is a hash function, modeled as a random oracle),
with c being the commitment and d the opening/decommitment, has an overhead of 2.44 microsec-
onds per commitment (our protocol makes use of many commitments, proportional to the circuit
size).
We reduce this overhead by constructing new bit and string commitment scheme based on block
ciphers (e.g., AES), whose security holds in the ideal cipher model [Sha49, Bla06, HKT10]. At a
high level, our commitment scheme is as follows. Let F : {0, 1}κ × {0, 1}κ → {0, 1}κ denote a
random permutation, parameterized by a key k—denoted Fk(·). We assume that all parties have
access to k (and hence Fk(·)). Our bit commitment scheme is then
Com(b; r) ∆= (c = Fk(r) ⊕ r ⊕ bκ, d = r||b),
where bκ denotes bit b repeated κ times and r is chosen at random from {0, 1}κ. Hiding follows from
the fact that the distribution of Fk(r) ⊕ r is indistinguishable from Uκ (the uniform distribution
on κ bits), which follows simply from Fk(·) being a pseudorandom function and r being chosen at
random. Regarding binding, an adversarial sender must ﬁnd r, r(cid:48) such that Fk(r)⊕ r = Fk(r(cid:48)) ⊕ r(cid:48),
where x denotes the complement of x, in order to break it. If the adversary makes at most q queries
to Fk(·), then one can show that the probability of ﬁnding such a pair is at most q2
2κ .
Now, a similar approach does not however work for string commitments — e.g., Fk(r) ⊕ r ⊕ m
for m ∈ {0, 1}κ is not a secure commitment. However, we can show that
Com(m; r) ∆= (c = Fk(r) ⊕ r ⊕ Fk(m) ⊕ m, d = r||m)
is a secure commitment scheme using an argument similar to the above. This gives us a commitment
scheme with an overhead of only 0.04 microseconds per commitment (roughly 62 times faster than
the SHA256 based commitment scheme).
6
Implementation and Experiments
We implemented both our semi-honest as well as maliciously secure 5PC protocols (henceforth
referred to as 5PC-SH and 5PC-M, for brevity) and ran various experiments for diﬀerent circuit sizes
and diﬀerent latencies. Our code built upon the code for n−party semi-honest secure computation
provided by Ben-Efraim et al.
[BLO16a]. For all our experiments, we measured the times for the
oﬄine phase, which is independent of the inputs to the computation (distributed garbled circuit
computation), and for the online phase, which is dependent on the inputs to the computation
(garbled input generation, garbled circuit evaluation and output sharing), separately.
Platforms and parameters. We ran our experiments on Microsoft Azure Classic DS4 V2 VM
instances (2.4 GHz Intel Xeon Processor with 8 cores) in three diﬀerent conﬁgurations. All our
experiments use hardware instructions AES-NI for the PRFs and SHA-256 for the hash function.
For the ﬁrst experiment, all instances were located in the Eastern US region. For the second
experiment, the 5 instances were spread across East, Central, West, North Central, and South
Central US regions, and for the third experiment, 3 garblers were located in the Western US region
with a garbler and an evaluator located in Central Europe. As was reported in [BLO16b], network
ﬂuctuations account for almost all the variations in timings in our protocols.
18
Total Communication of 5 parties [MB]
BLO
5PC-M
5PC-SH
AES
73.3
28.6
9.3
SHA-256
756
356
112.2
Table 2: Communication comparison
We ran the protocol for 5 parties (semi-honest and malicious) on 2 diﬀerent functions. In the
ﬁrst function, parties each hold 128-bit shares of key and input and the output of the computation
was the AES function on the XOR of the party’s inputs. The AES circuit we used had 6800 AND
gates. In the second function, parties hold 300-bit values as input and the output of the computation
was the SHA-256 function on the concatenation of all party’s inputs. The SHA-256 circuit we used
had 90,825 AND gates. Each experiment was performed 30 times and we computed the mean and
standard deviation of all experiments. All numbers provided in the tables are in milliseconds with
a 95% conﬁdence interval. We compare all our results with the results obtained when executing
the semi-honest protocol/code of [BLO16b, BLO16a] for 5 parties (secure against 4 semi-honest
corruptions and henceforth referred to as BLO2) on the same platforms as our experiments. While
our computation (as well as communication) can be parallelized across the 8 cores (across the
garbling process) we only deployed mild parallelization and leave further optimizations to future
work.
6.1 Experimental Evaluation
Asymptotically, we compared our protocols to maliciously secure MPC protocols that tolerate
dishonest majoirty as well as dishonest minority (such as [IKP10]). However, to the best of our
knowledge, the only available implementations of constant-round MPC tolerate dishonest majority
(or are for the semi-honest case), and hence we compare the concrete eﬃciency only with these
works.
Communication measurements. We ﬁrst present the total communication (among all parties)
of our protocols and a comparison with the numbers from [BLO16b]. As can be seen from Table 2,
the total communication of 5PC-M is less than half that of BLO’s communication (however, this
protocol tolerates 4 semi-honest corruptions and could be optimized for 2 corruptions), while the
communication in 5PC-SH is only 12 − 15% that of BLO.
We present our experimental results on the three diﬀerent network conﬁgurations listed above.
While constant round protocols are not aﬀected greatly aﬀected by variation in latency of the
network, since the overall computation time of our protocol is only a few hundred milliseconds or
so, and our protocol has 8 rounds, latency variations aﬀect our overall execution times a bit.
Low-latency network.
In this network, all Azure Classic DS4 V2 VM instances were located in
the Eastern US region with an average round-trip time of 2.7 milliseconds across all the instances
(maximum time of 7.1 milliseconds). The average bandwidth as measured by the Iperf testing tool
was 4.5 Gbps. We report the following times: oﬄine execution time (OFT), which measures the
wall clock time taken to execute the oﬄine (distributed garbling) phase; the online execution time
2The protocol execution time of [BLO16b] does not vary with the number of corruptions.
19
Garblers
Evaluator
Garblers
Evaluator
All parties
OFT
198 ± 2
50 ± 1
OFT