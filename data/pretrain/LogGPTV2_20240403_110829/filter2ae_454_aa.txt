# 基础
## IDL与Java IDL
**IDL** （Interface Definition
Language）接口定义语言，它主要用于描述软件组件的应用程序编程接口的一种规范语言。它完成了与各种编程语言无关的方式描述接口，从而实现了不同语言之间的通信，这样就保证了跨语言跨环境的远程对象调用。
**JAVA IDL** 是一个分布的对象技术，允许其对象在不同的语言间进行交互。它的实现是基于公共对象代理体系(Common Object Request
Brokerage Architecture,CORBA)，一个行业标准的分布式对象模型。每个语言支持CORBA都有他们自己的IDL
Mapping映射关系，IDL和JAVA的映射关系可以参考文档[Java IDL: IDL to Java Language
Mapping](https://docs.oracle.com/javase/8/docs/technotes/guides/idl/mapping/jidlMapping.html)
> 在jdk安装后，会附带有`idlj`编译器，使用`idlj`命令可以将IDL文件编译成java文件
## COBAR
CORBA(Common ObjectRequest Broker
Architecture)公共对象请求代理体系结构，是由OMG组织制订的一种标准分布式对象结构。其提出是为了解决不同应用间的通信，曾是分布式计算的主流技术。
CORBA结构分为三部分：
  * naming service
  * client side 
  * servant side
他们之间的关系简单理解为：client side从naming service中获取服务方servant side信息。servant
side需要在naming service中注册，这样client side在要访问具体内容时会先去naming
service查找，以找到对应的servant side服务。
> 可以理解为目录与章节具体内容具体关系：naming service目录，servant side为内容，目的就是为了让client
> side快速从目录找到内容。
### CORBA通信过程
在CORBA客户端和服务器之间进行远程调用模型如下：  
在客户端，应用程序包含远程对象的引用，对象引用具有存根(stub)方法，存根方法是远程调用该方法的替身。存根实际上是连接到 **ORB** (Object
Request Broker)对象请求代理的，因此调用它会调用ORB的连接功能，该功能会将调用转发到服务器。
在服务器端，ORB使用框架代码将远程调用转换为对本地对象的方法调用。框架将调用和任何参数转换为其特定于实现的格式，并调用客户端想要调用的方法。方法返回时，框架代码将转换结果或错误，然后通过ORB将其发送回客户端。
在ORB之间，通信通过 **IIOP** (the Internet Inter-ORB
Protocol)互联网内部对象请求代理协议进行。基于标准TCP/IP Internet协议的IIOP提供了CORBA客户端和服务端之间通信的标准。
### 使用JAVA IDL编写CORBA分布式应用
#### 编写IDL
CORBA使用IDL供用户描述程序接口， 所以这里第一步就是编写idl描述接口，创建`Hello.idl`文件：
    module HelloApp
    {
        interface Hello
        {
            string sayHello();
        };
    };
该段代码描述了`Hello`接口中包含`sayHello()`方法，他会返回字符串类型数据。
#### 编译生成client side classes
接着使用JAVA的IDL编译器`idlj`，将idl文件编译成class文件:
    idlj -fclient Hello.idl
创建了一个新目录`HelloApp`，并生成了5个新文件：  
他们之间的关系如下图所示：  
> 图片来源：[An Introduction To The CORBA And Java RMI-> IIOP](https://weinan.io/2017/05/03/corba-iiop.html)
参考代码，简单概括一下:
  * `HelloOperations`接口中定义`sayHello()`方法
  * `Hello`继承了`HelloOperations`
  * `_HelloStub`类实现了`Hello`接口，client side使用`hello`接口调用`servant side`。
  * `HelloHelper`类实现网络传输，数据编码和解码的工作。
详细分析一下几段核心代码，先来看一下`_HelloStub.java`中`sayHello()`的实现：
    public String sayHello ()
      {
                org.omg.CORBA.portable.InputStream $in = null;
                try {
                    org.omg.CORBA.portable.OutputStream $out = _request ("sayHello", true);
                    $in = _invoke ($out);
                    String $result = $in.read_string ();
                    return $result;
                } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                    $in = $ex.getInputStream ();
                    String _id = $ex.getId ();
                    throw new org.omg.CORBA.MARSHAL (_id);
                } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                    return sayHello (        );
                } finally {
                    _releaseReply ($in);
                }
      } // sayHello
使用`org.omg.CORBA.portable`的`InputStream`和`OutputStream`来表示调用的请求和响应，通过`_request()`和`_invoke()`方法调用得到结果。
另外在`HelloHelper`类中负责处理对象网络传输的编码和解码，来看一下`narrow`方法：
    public static HelloApp.Hello narrow (org.omg.CORBA.Object obj)
      {
        if (obj == null)
          return null;
        else if (obj instanceof HelloApp.Hello)
          return (HelloApp.Hello)obj;
        else if (!obj._is_a (id ()))
          throw new org.omg.CORBA.BAD_PARAM ();
        else
        {
          org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
          HelloApp._HelloStub stub = new HelloApp._HelloStub ();
          stub._set_delegate(delegate);
          return stub;
        }
      }
接受一个`org.omg.CORBA.Object`对象作为参数，返回stub。
#### 编译生成servant side
执行命令：
    idlj -fserver Hello.idl
会生成三个文件，除了`HelloPOA.java`,其余都是一样的。  
POA(Portable Object Adapter)是便携式对象适配器，它是CORBA规范的一部分。这里的这个POA虚类是servant
side的框架类，它提供了方法帮助我们将具体实现对象注册到naming service上。
来看一下其核心代码：
    public abstract class HelloPOA extends org.omg.PortableServer.Servant
     implements HelloApp.HelloOperations, org.omg.CORBA.portable.InvokeHandler
    {
      // Constructors
      private static java.util.Hashtable _methods = new java.util.Hashtable ();
      static
      {
        _methods.put ("sayHello", new java.lang.Integer (0));
      }
      public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                    org.omg.CORBA.portable.InputStream in,
                                    org.omg.CORBA.portable.ResponseHandler $rh)
      {
        org.omg.CORBA.portable.OutputStream out = null;
        java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
        if (__method == null)
          throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
        switch (__method.intValue ())
        {
           case 0:  // HelloApp/Hello/sayHello
           {
             String $result = null;
             $result = this.sayHello ();
             out = $rh.createReply();
             out.write_string ($result);
             break;
           }
           default:
             throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
        }
        return out;
      } // _invoke
    //...
值得注意的是他也实现了`HelloOperations`接口，代码的最开始将`sayHello`方法放入一个hashtable中，`_invoke`方法中，将调用`sayHello()`的结果通过`org.omg.CORBA.portable.ResponseHandler`对象通过网络传输到client
side。
此时`idjl`生成的全部class的关系图：  
接下来，要做的就是用户自己实现client side和servant side中具体的方法操作。
#### servant side实现
对于servant side而言，实现一个`HelloImpl`类来继承`HelloPOA`类实现`sayHello()`方法：
    package HelloApp;
    import org.omg.CORBA.ORB;
    public class HelloImpl extends HelloPOA {
        private ORB orb;
        public void setORB(ORB orbVal) {
            orb = orbVal;
        }
        @Override
        public String sayHello() {
            return "\nHello, world!\n";
        }
    }
此时的继承关系如下：  
接着，需要写一个服务端`HelloServer`类来接受client side对`HelloImpl.sayHello()`的调用。
三个部分：
  * 第一部分根据传入的`name service`地址参数来创建，根据CORBA的规范，通过ORB获取一个名称为`RootPOA`的`POA`对象。(其中name service由jdk中的`orbd`提供)
  * 第二部分就是将具体实现类注册到naming service中，用orb获取到name service，将`HelloImpl`对象以`Hello`为名绑定。
  * 第三部分就是将server设置为监听状态持续运行，用于拦截并处理client side的请求，返回相应的具体实现类。
#### Client Side实现
    package HelloApp;
    import org.omg.CORBA.ORB;
    import org.omg.CosNaming.NamingContext;
    import org.omg.CosNaming.NamingContextExt;
    import org.omg.CosNaming.NamingContextExtHelper;
    import org.omg.CosNaming.NamingContextHelper;
    import java.util.Properties;
    public class HelloClient {
        static Hello helloImpl;
        public static void main(String[] args) throws Exception {
            ORB orb = ORB.init(args, null);
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
            String name = "Hello";
            // helloImpl的类型为_HelloStub，而不是真正的helloImpl
            helloImpl = HelloHelper.narrow(ncRef.resolve_str(name));
            System.out.println(helloImpl.sayHello());
        }
    }
首先和服务端一样，需要初始化ORB，通过ORB来获取NameService并将其转换成命名上下文。之后通过别名在命名上下文中获取其对应的Stub，调用Stub中的sayhello()方法，这个时候才会完成client
side向servant side发送请求，POA处理请求，并将具体实现的HelloImpl包装返回给client side。
#### naming service实现
ORBD可以理解为ORB的守护进程(daemon)，其主要负责建立客户端(client side)与服务端(servant
side)的关系，同时负责查找指定的IOR(可互操作对象引用，是一种数据结构，是CORBA标准的一部分)。ORBD是由Java原生支持的一个服务，其在整个CORBA通信中充当着naming
service的作用，可以通过一行命令进行启动：
    orbd -ORBInitialPort 1050 -ORBInitialHost 127.0.0.1
#### 执行
接着分别在`HelloServer`和`HelloClient`配置name service地址：  
其次依次启动`name service`、`HelloServer`、`HelloClient`结果如上图所示。
此外，除了上述先获取NameServer，后通过`resolve_str()`方法生成(NameServer方式)的stub，还有两种：
  * 使用ORB.string_to_object生成（ORB生成方式）
  * 使用javax.naming.InitialContext.lookup()生成（JNDI生成方式）
代码分别如下:  
orb方式
    public class HelloClietORB {
        static Hello helloImpl;
        public static void main(String[] args) throws Exception {
            ORB orb = ORB.init(args, null);
            org.omg.CORBA.Object obj = orb.string_to_object("corbaname::127.0.0.1:1050#Hello");
            Hello hello = HelloHelper.narrow(obj);
            System.out.println(hello.sayHello());
        }
    }
    public class HelloClientORB2 {
        static Hello helloImpl;
        public static void main(String[] args) throws Exception {
            ORB orb = ORB.init(args, null);
            org.omg.CORBA.Object obj = orb.string_to_object("corbaloc::127.0.0.1:1050");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(obj);
            Hello hello = HelloHelper.narrow(ncRef.resolve_str("Hello"));
            System.out.println(hello.sayHello());
        }
    }
JDNI方式：
    public class HelloClientJNDI {
        static Hello helloImpl;
        public static void main(String[] args) throws Exception {
            ORB orb = ORB.init(args, null);
            Hashtable env = new Hashtable(5, 0.75f);
            env.put("java.naming.corba.orb", orb);
            Context ic = new InitialContext(env);
            Hello helloRef = HelloHelper.narrow((org.omg.CORBA.Object)ic.lookup("corbaname::127.0.0.1:1050#Hello"));
            System.out.println(helloRef.sayHello());
        }
    }