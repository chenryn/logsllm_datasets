# You Get Where You're Looking for: The Impact of Information Sources on Code Security

## Authors
- Yasemin Acar
- Michael Backes
- Sascha Fahl
- Doowon Kim†
- Michelle L. Mazurek†
- Christian Stransky

**Affiliations:**
- CISPA, Saarland University
- †University of Maryland, College Park

## Abstract
Vulnerabilities in Android code, including insecure data storage, unprotected inter-component communication, broken TLS implementations, and violations of least privilege, have led to real-world privacy leaks and motivated research into their prevalence and impact. Researchers have speculated that the appification trend promotes security problems, as it increasingly allows inexperienced individuals to develop complex and sensitive applications. Anecdotally, resources like Stack Overflow are blamed for promoting insecure solutions that are naively copy-pasted by inexperienced developers.

In this paper, we systematically analyzed how the use of information resources impacts code security. We surveyed 295 app developers who have published in the Google Play market about their use of resources to solve security-related problems. Based on the survey results, we conducted a laboratory study with 54 Android developers (students and professionals) who wrote security- and privacy-relevant code under time constraints. Participants were assigned to one of four conditions: free choice of resources, Stack Overflow only, official Android documentation only, or books only.

Participants using only Stack Overflow produced significantly less secure code compared to those using the official Android documentation or books. Conversely, participants using the official Android documentation produced significantly less functional code than those using Stack Overflow. To assess the quality of Stack Overflow, we surveyed the 139 threads accessed during the study, finding that only 25% were helpful in solving the tasks, and only 17% contained secure code snippets. We also statically analyzed a random sample of 200,000 apps from Google Play, finding that 93.6% used at least one of the API calls our participants used during the study. Many of the security errors made by our participants also appear in the wild, possibly originating from the use of Stack Overflow.

Our results confirm that while official API documentation is secure but difficult to use, informal documentation such as Stack Overflow is more accessible but often leads to insecurity. Given time constraints and economic pressures, Android developers are likely to continue choosing the easiest-to-use resources. Therefore, our findings firmly establish the need for secure and usable documentation.

## 1. Introduction
The mobile device market, particularly Android, is rapidly growing. Globally, mobile digital media has recently surpassed desktop and other media [37]. Billions of users and devices, with millions of apps installed, attract many new developers. Previous research has found that many mobile apps have poorly implemented security mechanisms, potentially due to inexperience, distraction, or being overwhelmed [1, 8, 9, 11, 14–18, 26, 29, 31, 33, 34, 36, 43, 44, 46]. Developers often request more permissions than needed, do not use TLS or cryptographic APIs correctly, use insecure options for Inter-Component Communication (ICC), and fail to store sensitive information securely.

Some previous work attempts to assess the root causes of these programming errors. A frequent conclusion is that APIs are too complicated or insufficiently documented. Anecdotal reports indicate that developers often turn to search engines when encountering unfamiliar security issues. Search results often lead to official API documentation, blog posts, or Q&A forums like Stack Overflow. For example, Fahl et al. [16–18] interviewed developers whose use of pasted code snippets from Stack Overflow made them vulnerable to Man-In-The-Middle attacks.

These anecdotes set the stage for our work. While many developer issues have been identified, we know little about how these security issues make their way into apps, and most of what we know remains unsubstantiated. In this paper, we address the following research questions:

- What do Android developers do when they encounter a security- or privacy-relevant issue?
- Which information sources do they use to look up security- or privacy-relevant questions?
- Does the use of Stack Overflow really lead to less secure code than the use of other resources?
- Is the official Android documentation really less usable, resulting in less functional code compared to other resources?

We are the first to address these questions systematically rather than anecdotally, shedding light on the root causes of security-related programming errors in Android apps. 

## 2. Related Work
### 2.1 Security Flaws in Mobile Apps
Many researchers have attempted to measure the incidence of security flaws in otherwise benign mobile apps. Fahl et al. [16] found that 8% of 13,500 popular, free Android apps contained misconfigured TLS code vulnerable to Man-In-The-Middle attacks. Common problems included accepting all certificates without verifying their validity and not checking whether the server's name matches the hostname specified on the certificate. In follow-up work, the same team extended their analysis to iOS and found similar results: Using a Man-In-The-Middle attack, they were able to extract sensitive data from 20% of the apps [18].

Another examination of TLS code, this time in non-browser software, found similar flaws in many Android and iOS applications and libraries [20]. Onwuzurike and De Cristofaro [30] found that the same problems remain prevalent several years later, even in apps with more than 10 million downloads. Oltrogge et al. [29] investigated the applicability of certificate pinning in Android apps and concluded that pinning was not as widely applicable as commonly believed.

Egele et al. [11] examined the use of cryptography in Android applications and found more than 10,000 apps misusing cryptographic primitives in insecure ways. Examples included using constant keys and salts, using non-random seeds and initialization vectors, and using insecure modes for block ciphers.

### 2.2 Understanding Developers
Many of the flaws discussed above arose from developer mistakes and misunderstandings. Fahl et al. [18] found that problems arose from several sources, including developers who disabled TLS functionality during testing and never re-enabled it, developers who did not understand the purpose of TLS or the possible threat scenarios, and problems with default configurations in frameworks and libraries. Georgiev et al. [20] also reported that confusion about the many parameters, options, and defaults of TLS libraries contributed to developer errors. Both papers noted that developer forums such as Stack Overflow contained many suggestions for avoiding TLS-related error messages by disabling TLS features, without warning about the potential security consequences.

In a non-mobile context, Leon et al. [24] found that many popular websites used invalid or misleading P3P compact policies. Their manual analysis suggested that while many mistakes likely resulted from developer error, others resulted from attempts to avoid Internet Explorer’s cookie filtering mechanism, and appeared to rely on suggestions from forums like Stack Overflow for avoiding this filtering.

### 2.3 Exploring Online Q&A Resources
The software engineering and machine learning communities have explored how developers interact with Stack Overflow and other Q&A sites. Much of this research focused on the types of questions asked, which are most likely to be answered, and who does the asking and answering [5, 6, 27, 38–40].

Other research considered the quality of questions and answers available on Q&A sites, including general sites not specifically targeting programming [4, 22, 32]. These works are generally intended to support automated identification and pruning of low-quality content. In contrast, our work directly considers how existing Stack Overflow content affects the outputs of developers who rely on it.

Linares-Vásquez et al. [25] investigated how changes to Android APIs trigger activities on Stack Overflow and found that the frequency of questions increases when Android APIs change, particularly in the case of method updates. Wang et al. [41, 42] mined Stack Overflow posts to identify mobile APIs (Android and iOS) that frequently give developers trouble. They proposed that this data can be used to improve documentation for these "hotspots" and to help API providers improve the design of their APIs to better support developer needs.

Nadi et al. [28] analyzed Stack Overflow posts to identify difficulties that developers commonly have with Java cryptography APIs. While these works used Stack Overflow to identify trouble spots within APIs, we instead start from known trouble spots in security and privacy and measure how information sources, including Stack Overflow, directly affect the code developers write.

## 3. Survey of Android Developers
To understand the challenges app developers face during the implementation of security-critical app components, we conducted an online survey of Android developers covering their experience, programming habits, and the resources they use. Results from this survey helped motivate the design of our lab experiment (Section 4). In this section, we briefly discuss the design of this survey and the results.

### 3.1 Survey Design and Results
We collected a random sample of 50,000 email addresses of Android application developers listed in Google Play and emailed them, introducing ourselves and asking them to take our online survey. A total of 302 people completed the survey between April 2015 and October 2015. Seven participants were removed for providing nonsensical, profane, or non-English answers. Results are presented for the remaining 295 participants.

#### 3.1.1 Education and Experience
Most participants (91.2%, 269) had been developing software for more than two years; 63.1% (186) had been developing Android apps specifically for more than two years. About half (48.7%, 147) had developed between two and five apps, but 73.5% (218) reported that they do not develop Android apps as their primary job.

Almost half of the participants had formally studied programming at the undergraduate (27.8%, 82) or graduate level (18.6%, 55). Most of the remaining developers reported being self-taught (41.2%, 121). Most participants had never taken any classes or training related specifically to Android programming (81.3%, 239) or to computer or information security (56.6%, 167).

#### 3.1.2 Security and Permissions
We also asked participants about three security-related issues they might have encountered during app development: HTTPS/TLS, encryption, and Android permissions. About half of the developers (144) said their Android apps use HTTPS to secure network connections; of those, 80.6% (116) had looked up information on HTTPS- or TLS-related topics at least once, but only 11.1% (16) did so more frequently than once per month. The most popular resources among these 116 were Stack Overflow (43.1%, 50) and a search engine such as Google (37.1%, 43); only 8.6% (10) mentioned the official Android documentation.

Fewer participants (25.1%, 74) had used encryption to store files. Of these, almost all (90.5%, 67) had looked up encryption-related topics at least once, but again, the vast majority did so once a month or less (82.1%, 55). The primary sources were once again search engines (mentioned by 31 participants, 46.3%) and Stack Overflow (28.4%, 19). Six of the 67 (9.0%) mentioned the official Android documentation, and two (3.0%) mentioned books.

Responses to questions about Android permissions were somewhat different. As with HTTPS and encryption, most (74.9%, 221) reported they had looked up permissions information at least once, and a large majority of them did so once per month or less (84.2%, 186). However, participants who had looked up permission information favored official documentation (41.2%, 91) over search engines (29.0%, 64) or Stack Overflow (30.3%, 67) on that topic.

#### 3.1.3 Development Resources More Generally
We also asked participants about the resources they use when encountering programming problems in general. The results are similar to those for security-specific problems. Large majorities mentioned Stack Overflow (69.5%, 205) and a search engine (62.0%, 183). Although this question did not specifically mention Android programming, 27.5% (81) also mentioned official Android documentation, including APIs and best practices guides.

In a separate question, we asked how frequently participants use any resources when programming for Android. More than half (52.2%, 154) reported looking up Android programming information at least once per day, and another 25.4% said at least once per week. Among 35 participants (11.9%) who selected "rarely," 11 (31.4%) explicitly mentioned that while they rarely looked things up now, they had used resources or documentation for help many times a day when working on Android projects.

### 3.2 Discussion
Overall, these results indicate that many Android developers must deal with security or privacy issues periodically but do not handle them consistently enough to become experts. This suggests that the quality of documentation is especially critical for these topics. Stack Overflow (and more generally, online search) is the default resource for certificate or encryption problems, as well as programming problems more generally. Permissions, however—perhaps because they are Android-specific and closely associated with the platform itself—are more frequently referenced from the official documentation. These findings validate both the need to understand the impact of the resources on security and privacy decisions generally, and our choice to compare Stack Overflow and the official documentation more specifically.

## 4. Android Developer Study
To examine how the resources developers access affect their security and privacy decision-making, we conducted a between-subjects laboratory study. We provided a skeleton Android app and asked participants to complete four programming tasks based on the skeleton, encompassing the storage of data, the use of HTTPS, the use of ICC, and the use of permissions. Each participant was assigned to one of four conditions governing what resources they were allowed to access. We examined the resulting code for functional correctness and security- or privacy-relevant decisions. We also used a think-aloud protocol and an exit interview to further examine how participants used resources and how this affected their programming.

### 4.1 Recruitment
We recruited participants who had taken at least one course in Android development or developed professionally or as a hobby for at least one year. Initially, participants were also asked to complete a short programming task to demonstrate competence with Android development. After receiving feedback that the qualification task required too much time, we instead required participants to correctly answer at least three of five multiple-choice questions testing basic Android development knowledge. The bar for qualification was intentionally set low, as we wanted to compare the impact of programming resources for developers with different expertise levels. Additionally, the usefulness of our results partially depended on our participants needing to look things up during the programming process.

Participants were recruited in and around one major city in the U.S., as well as in two university towns in Germany. We recruited participants by emailing undergraduate and graduate students (in computer science in general and specifically those who had taken mobile development courses), as well as by placing ads on Craigslist, emailing local hacker and developer groups, and using developer-specific websites such as meetup.com. Prospective participants who qualified were invited to complete the study at a university campus or at another public place (library, coffee shop) of their choice. No mention of security or privacy was made during recruitment. Participants were compensated with $30 in the U.S. or an e18 gift card in Germany.

### 4.2 Conditions and Study Setup
Participants were assigned round-robin to one of four conditions, as follows:

- **Official Only (official):** Participants were only allowed to access websites within the official Android documentation.
- **Stack Overflow Only (SO):** Participants were only allowed to access questions and answers within Stack Overflow.
- **Book Only (book):** Participants were only allowed to use two books: *Pro Android 4* [23] and *Android Security Internals* [12]. Participants were provided access to the PDF versions of the books, enabling text searching as well as use of indices and tables of contents.
- **Free Choice (free):** Participants were allowed to use any web resources of their choice and were also offered access to the two books used in the book condition.

Conditions official and SO were enforced using a Chrome browser plugin for limiting web access. Participants were provided with Android Studio, pre-loaded with our skeleton app, and a software Android phone emulator. The skeleton app, designed to reduce participants' workload and simplify the programming tasks, was introduced as a location-tracking tool that would help users keep track of how much time they spent in various locations (at home, at work, etc.) each day.

After a brief introduction to the study and the skeleton app, participants were given four programming tasks in random order, with approximately 20-30 minutes to complete each. The short time limit simulated the pressure of writing code on tight deadlines that many app developers face.

Security and privacy were not mentioned during the introduction to the study and skeleton app or in the directions for each task. We deliberately minimized security priming to account for the fact that security and privacy are generally secondary tasks compared to basic app functionality. Instead, we focus on whether developers, who in real-world scenarios may or may not be explicitly considering security, find and implement secure approaches.

### 4.3 The Tasks
Each participant was assigned the same four tasks, but in a random order. We took care to implement baseline functionality so that the tasks could be done in any order and still produce a functional app. The tasks were:

- **Secure Storage Task:** Store user data securely.
- **HTTPS Task:** Implement secure network communication.
- **Inter-Component Communication (ICC) Task:** Securely communicate between app components.
- **Least Permissions Task:** Request only the necessary permissions.

## 5. Results
### 5.1 Functional Correctness and Security
Participants using only Stack Overflow produced significantly less secure code compared to those using the official Android documentation or books. Conversely, participants using the official Android documentation produced significantly less functional code than those using Stack Overflow. These results confirm that while official API documentation is secure but difficult to use, informal documentation such as Stack Overflow is more accessible but often leads to insecurity.

### 5.2 Quality of Stack Overflow
To assess the quality of Stack Overflow, we surveyed the 139 threads accessed during the study. We found that only 25% of the threads were helpful in solving the tasks, and only 17% contained secure code snippets. Many of the threads with insecure code snippets were equally popular as those with secure snippets.

### 5.3 Ground Truth from Static Analysis
To establish ground truth, we applied static analysis to a random sample of 200,000 free apps from the Google Play market. We found that 93.6% of the apps used at least one of the API calls our participants generated during the study. Our analysis also found that many of the security errors made by our participants when using these APIs also appear in the wild. For example, most custom hostname verifier implementations in real-world apps implement insecure hostname verification, which is also true for the code written by our participants.

## 6. Discussion
Our results confirm an important problem: Official API documentation is secure but hard to use, while informal documentation such as Stack Overflow is more accessible but often leads to insecurity. Interestingly, books (the only paid resource) perform well both for security and functionality. However, they are rarely used (in our study, only one free-choice participant used a book). Given time constraints and economic pressures, we can expect that Android developers will continue to choose the resources that appear easiest to use. Therefore, our results firmly establish the need for secure and usable documentation.

## 7. Limitations
While our study provides valuable insights, there are some limitations. The sample size, though sufficient for statistical analysis, may not fully represent the broader population of Android developers. Additionally, the controlled environment of the laboratory study may not fully capture the complexities and pressures of real-world app development. Future work could explore these issues in more depth.

## 8. Conclusion
In conclusion, our systematic analysis of how information resources impact code security reveals that while official documentation is secure but difficult to use, informal resources like Stack Overflow are more accessible but often lead to insecurity. Given the time and economic pressures faced by developers, there is a clear need for secure and usable documentation. Our findings provide a foundation for future work aimed at improving the security of mobile applications.