### Introduction to Adblockers and Anti-Adblockers

In our previous work [59], we utilized machine learning to detect anti-adblockers that visibly react to adblockers. In this paper, we extend our approach by using machine learning to fingerprint anti-adblock scripts.

Storey et al. [65] proposed two approaches for adblocking: stealth (hiding the presence of adblockers) and active (actively countering adblock detection). For stealth adblocking, they partially implemented a rootkit-style approach that intercepts and modifies JavaScript API calls used by publishers to check for ad elements. This approach is complementary to ours. For active adblocking, they implemented a signature-based method to remove anti-adblock scripts using manually crafted regular expressions. In contrast, our proposed machine learning-based approach can automatically identify anti-adblock scripts based on their syntactic features.

### Research Objectives

Next, we analyze the evolution of popular anti-adblock filter lists (§3), measure their historical coverage on popular websites (§4), and develop a machine learning-based approach to detect anti-adblock scripts (§5).

## 3. Analyzing Anti-Adblock Filter Lists

### 3.1 How Anti-Adblocking Works?

Anti-adblockers use baits to detect the presence of adblockers. These baits are designed and inserted into web pages in such a way that adblockers will attempt to block them. The anti-adblockers then check whether these baits are blocked. They employ both HTTP and HTML baits, which we discuss separately below.

#### HTTP Baits

For HTTP baits, anti-adblockers check if the bait HTTP request is blocked by adblockers. Code 4 illustrates an example from businessinsider.com, where the anti-adblocker requests a bait URL `www.npttech.com/advertising.js` and checks if it is successfully retrieved. The code dynamically creates an HTTP request bait and triggers either the `onLoad` event (if successful) or the `onError` event (if failed). Both events call the `setAdblockerCookie` function with a parameter of `true` or `false`, setting the value of the cookie `__adblocker` accordingly.

```javascript
var script = document.createElement("script");
script.setAttribute("async", true);
script.setAttribute("src", "//www.npttech.com/advertising.js");
script.setAttribute("onerror", "setAdblockerCookie(true);");
script.setAttribute("onload", "setAdblockerCookie(false);");
document.getElementsByTagName("head")[0].appendChild(script);

var setAdblockerCookie = function(adblocker) {
    var d = new Date();
    d.setTime(d.getTime() + 60 * 60 * 24 * 30 * 1000);
    document.cookie = "__adblocker=" + (adblocker ? "true" : "false") + ";expires=" + d.toUTCString() + ";path=/";
}
```

#### HTML Baits

For HTML baits, anti-adblockers check if the CSS properties of the bait HTML element are modified. Code 5 shows an example from a popular third-party anti-adblocker called BlockAdBlock [10], which creates a `div` bait and checks if it is removed. The `_creatBait` function creates a `div` element and sets its CSS properties, while the `_checkBait` function checks if the `div` element’s CSS properties (e.g., `offsetHeight`, `offsetTop`, `offsetWidth`) are changed.

```javascript
BlockAdBlock.prototype._creatBait = function() {
    var bait = document.createElement('div');
    bait.setAttribute('class', this._options.baitClass);
    bait.setAttribute('style', this._options.baitStyle);
    this._var.bait = window.document.body.appendChild(bait);
    this._var.bait.offsetHeight;
    this._var.bait.offsetTop;
    this._var.bait.offsetWidth;
    this._var.bait.clientHeight;
    this._var.bait.clientWidth;
    if (this._options.debug === true) {
        this._log('_creatBait', 'Bait has been created');
    }
};

BlockAdBlock.prototype._checkBait = function() {
    var detected = false;
    if (window.document.body.getAttribute('abp') !== null ||
        this._var.bait.offsetHeight === 0 ||
        this._var.bait.offsetTop === 0 ||
        this._var.bait.offsetWidth === 0 ||
        this._var.bait.clientHeight === 0 ||
        this._var.bait.clientWidth === 0) {
        detected = true;
    }
};
```

### 3.2 Anti-Adblock Filter Lists

Using the techniques described above, anti-adblockers detect adblockers and prompt users to disable them to view page content. To counteract anti-adblockers, adblockers rely on anti-adblock filter lists. These filter lists contain rules designed to handle HTTP requests and HTML elements used by anti-adblockers. For example, the filter list rules may allow or block HTTP requests and HTML elements to avoid detection. Code 6 shows two examples of anti-adblock rules. Rule 1 blocks third-party HTTP requests to `pagefair.com`, a well-known anti-adblock vendor. Rule 2 hides the HTML element with ID `noticeMain` on `smashboards.com`.

```plaintext
! Rule 1
|| pagefair.com^$third-party
! Rule 2
smashboards.com###noticeMain
```

The most widely used anti-adblock filter lists are:
1. **Anti-Adblock Killer List** [8]
2. **Adblock Warning Removal List** [37]
3. **EasyList** [16]

The first two lists are specifically targeted at anti-adblockers, while EasyList's primary purpose is to block ads, but it also contains sections dedicated to anti-adblocking. We only analyze the anti-adblock sections of EasyList. The Anti-Adblock Killer List started in 2014, the Adblock Warning Removal List in 2013, and the anti-adblock sections in EasyList were created in 2011. These lists rely on informal crowdsourced input from users (e.g., via feedback forums) to add, remove, or modify filter rules. They have been regularly updated since their creation.

#### Anti-Adblock Killer List

The Anti-Adblock Killer List was created by “reek” in 2014 and is maintained on GitHub [8]. Users submit feedback by reporting issues on the GitHub page [9]. On average, the list adds or modifies 6.2 filter rules per revision. Figure 1(a) visualizes the temporal evolution of different types of filter rules in the Anti-Adblock Killer List. The list started with 353 initial filter rules and expanded to 1,811 filter rules by July 2016. The most common types of filter rules are HTTP request rules (with domain anchor and both domain anchor and tag) and HTML element rules (with domain). The most recent version of the filter list has 58.5% HTTP request rules and 41.5% HTML element rules.

#### Adblock Warning Removal List

The Adblock Warning Removal List was created by the EasyList filter list project [16] in 2013. It is maintained by multiple authors and relies on user feedback on their forum [17]. On average, the list adds or modifies 0.2 filter rules per day. Figure 1(b) visualizes the temporal evolution of different types of filter rules in the Adblock Warning Removal List. This list contains a larger fraction of HTML filter rules, which hide anti-adblock warning popups. The list started with 4 filter rules and expanded to 167 filter rules by July 2016. The most recent version of the filter list has 32.3% HTTP request rules and 67.7% HTML element rules.

#### EasyList

EasyList, primarily focused on blocking ads, also includes anti-adblock sections. Figure 1(c) visualizes the temporal evolution of different types of filter rules in EasyList. The anti-adblock sections in EasyList have 1500 initial filter rules and expanded to 5000 filter rules by July 2016. The most recent version of the filter list has 50% HTTP request rules and 50% HTML element rules.

### Conclusion

This paper provides a detailed analysis of anti-adblock techniques and the evolution of anti-adblock filter lists. Our research aims to enhance the effectiveness of adblockers by developing a machine learning-based approach to detect and counteract anti-adblock scripts.