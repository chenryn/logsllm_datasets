adblockers. In our prior work [59] we used machine learning to
detect anti-adblockers that visibly react to adblockers, while in this
paper we use machine learning to fingerprint anti-adblock scripts.
Storey et al. [65] proposed stealth (hide adblocking) and active (ac-
tively counter adblock detection) adblocking approaches. For stealth
adblocking, they partially implemented a rootkit-style approach
that intercepts and modifies JavaScript API calls that are used by
publishers to check the presence of ad elements. Their approach is
complementary to our approach. For active adblocking, they imple-
mented a signature-based approach to remove anti-adblock scripts
using manually crafted regular expressions. In contrast, our pro-
posed machine learning based approach can automatically identify
anti-adblock scripts based on their syntactic features.
Next, we analyze the evolution of popular anti-adblock filter lists
(§3), measure their historic coverage on popular websites (§4), and
develop machine learning based approach to detect anti-adblock
scripts (§5).
3 ANALYZING ANTI-ADBLOCK FILTER LISTS
We first introduce anti-adblockers and then analyze popular anti-
adblock filter lists.
3.1 How Anti-Adblocking Works?
Anti-adblockers employ baits to detect adblockers. These baits
are designed and inserted in web pages such that adblockers will
attempt to block them. To detect the presence of adblockers, anti-
adblockers check whether these baits are blocked. Anti-adblockers
use HTTP and HTML baits to detect adblockers. Below we discuss
both of them separately.
For HTTP baits, anti-adblockers check whether the bait HTTP
request is blocked by adblockers. Code 4 illustrates the use of HTTP
bait by the anti-adblocker on businessinsider.com, which requests a
bait URL www.npttech.com/advertising.js and checks whether it is
successfully retrieved. Code 4 dynamically creates an HTTP request
bait and calls onLoad event in case of success and onError event in
case of failure. Both events call the setAdblockerCookie function
with a parameter of either true or false. setAdblockerCookie event
sets the value of the cookie __adblocker to either true or false
depending on the input value.
1
2
3
4
5
6
7
8
9
10
11
var s c r i p t = d o c u m e n t . c r e a t e E l e m e n t ( " script " )
;
s c r i p t . s e t A t t r i b u t e ( " async " , true ) ;
s c r i p t . s e t A t t r i b u t e ( " src " , " // www.npttech.com
/ advertising.js " ) ;
s c r i p t . s e t A t t r i b u t e ( " onerror " , "
setAdblockerCookie ( true );" ) ;
s c r i p t . s e t A t t r i b u t e ( " onload " , "
setAdblockerCookie ( false );" ) ;
d o c u m e n t . g e t E l e m e n t s B y T a g N a m e ( " head " ) [ 0 ] .
a p p e n d C h i l d ( s c r i p t ) ;
var s e t A d b l o c k e r C o o k i e = function ( a d b l o c k e r )
{
var d = new Date ( ) ;
d . s e t T i m e ( d . g e t T i m e ( ) + 60 ∗ 60 ∗ 24 ∗ 30
∗ 1 0 0 0 ) ;
d o c u m e n t . c o o k i e = " __adblocker= " + (
a d b l o c k e r ? " true " : " false " ) + ";
expires= " + d . t o U T C S t r i n g ( ) + ";
path= /" ;
12
}
Code 4: Anti-adblocker JavaScript code for HTTP bait.
For HTML baits, anti-adblockers check if the CSS properties of
the bait HTML element are modified. Code 5 illustrates the use of
HTML bait by a popular third-party anti-adblocker called BlockAd-
Block [10], which creates a div bait and checks whether the bait is
removed. The _creatBait function creates a div element and sets
its CSS properties. The _checkBait function checks whether the
div element’s CSS properties such as offsetHeight, offsetTop,
and offsetWidth are changed.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
B l o c k A d B l o c k . p r o t o t y p e . _ c r e a t B a i t = function
( )
{
var b a i t = d o c u m e n t . c r e a t e E l e m e n t ( ' div ' ) ;
b a i t . s e t A t t r i b u t e ( ' class ' ,
t h i s . _ o p t i o n s . b a i t C l a s s ) ;
b a i t . s e t A t t r i b u t e ( ' style ' ,
t h i s . _ o p t i o n s . b a i t S t y l e ) ;
t h i s . _ v a r . b a i t =
w i n d o w . d o c u m e n t . b o d y . a p p e n d C h i l d ( b a i t ) ;
t h i s . _ v a r . b a i t . o f f s e t P a r e n t ;
t h i s . _ v a r . b a i t . o f f s e t H e i g h t ;
t h i s . _ v a r . b a i t . o f f s e t L e f t ;
t h i s . _ v a r . b a i t . o f f s e t T o p ;
t h i s . _ v a r . b a i t . o f f s e t W i d t h ;
t h i s . _ v a r . b a i t . c l i e n t H e i g h t ;
t h i s . _ v a r . b a i t . c l i e n t W i d t h ;
if ( t h i s . _ o p t i o n s . d e b u g === true )
{
t h i s . _ l o g ( ' _creatBait ' , ' Bait has been
created ' ) ;
}
The Ad Wars
IMC ’17, November 1–3, 2017, London, United Kingdom
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
} ;
B l o c k A d B l o c k . p r o t o t y p e . _ c h e c k B a i t = function (
{
l o o p )
var d e t e c t e d = f a l s e ;
if ( w i n d o w . d o c u m e n t . b o d y . g e t A t t r i b u t e ( ' abp
' )
! == null
t h i s . _ v a r . b a i t . o f f s e t P a r e n t === null
t h i s . _ v a r . b a i t . o f f s e t H e i g h t == 0
t h i s . _ v a r . b a i t . o f f s e t L e f t == 0
t h i s . _ v a r . b a i t . o f f s e t T o p == 0
t h i s . _ v a r . b a i t . o f f s e t W i d t h == 0
t h i s . _ v a r . b a i t . c l i e n t H e i g h t == 0
t h i s . _ v a r . b a i t . c l i e n t W i d t h == 0 )
{
d e t e c t e d = t r u e ;
| |
| |
| |
| |
| |
| |
| |
}
} ;
Code 5: BlockAdBlock JavaScript code for creating and
checking a bait.
3.2 Anti-Adblock Filter Lists
Using the aforementioned techniques, anti-adblockers detect ad-
blockers and prompt users to disable their adblockers if they want to
view page content. To circumvent anti-adblockers, adblockers cur-
rently rely on anti-adblock filter lists. The rules of these filter lists
are designed to handle HTTP requests and HTML elements that are
used by anti-adblockers. For example, the filter list rules may allow
or block HTTP requests and HTML elements to avoid detection by
anti-adblockers. Code 6 shows two examples of anti-adblock rules.
Rule 1 blocks third-party HTTP requests to pagefair.com which
is a well-known anti-adblock vendor. Rule 2 hides the HTML ele-
ment with ID noticeMain which displays an anti-adblock notice
on smashboards.com.
1
2
3
4
! R u l e 1
| | p a g e f a i r . c o m ^ $ t h i r d − p a r t y
! R u l e 2
s m a s h b o a r d s . c o m # # # n o t i c e M a i n
Code 6: Example anti-adblock filter rules.
The most widely used anti-adblock filter lists are: (1) Anti-Adblock
Killer List [8], (2) Adblock Warning Removal List [37], and (3) Ea-
syList [16]. The first two are dedicated to target anti-adblockers,
however, EasyList’s main purpose is to block ads. Several sections in
EasyList specifically contain anti-adblocking filter rules. In this pa-
per, we only analyze anti-adblock sections of EasyList. Anti-Adblock
Killer List started in 2014, Adblock Warning Removal List started
in 2013, and anti-adblock sections in EasyList were created in 2011.
These anti-adblock filter lists rely on informal crowdsourced input
from their users (e.g., via feedback forums) to add new filter rules or
remove/modify old filter rules. These anti-adblock filter lists have
been regularly updated since their creation.
Anti-Adblock Killer. Anti-Adblock Killer List was created by
“reek” in 2014. The list is maintained on GitHub [8] and users submit
feedback by reporting issues on the GitHub page [9]. On average,
the list adds or modifies 6.2 filter rules for every revision. Figure
1(a) visualizes the temporal evolution of different types of filter
HTML rules without domain
HTML rules with domain
HTTP rules without domain anchor and tag
HTTP rules with domain anchor
HTTP rules with domain tag
HTTP rules with domain anchor and tag
2000
1500
1000
500
0
2014 - 06
2014 - 08
2014 - 10
2014 - 12
2015 - 02
2015 - 04
2015 - 06
2015 - 08
2015 - 10
2015 - 12
2016 - 02
2016 - 04
2016 - 06
(a) Anti-Adblock Killer
HTML rules without domain
HTML rules with domain
HTTP rules without domain anchor and tag
HTTP rules with domain anchor
HTTP rules with domain tag
HTTP rules with domain anchor and tag
250
200
150
100
50
0
2013 - 12
2014 - 02
2014 - 04
2014 - 06
2014 - 08
2014 - 10
2014 - 12
2015 - 02
2015 - 04
2015 - 06
2015 - 08
2015 - 10
2015 - 12
2016 - 02
2016 - 04
2016 - 06
(b) Adblock Warning Removal List
HTML rules without domain
HTML rules with domain
HTTP rules without domain anchor and tag
HTTP rules with domain anchor
HTTP rules with domain tag
HTTP rules with domain anchor and tag
1500
1000
500
l
s
e
u
R
f
o
r
e
b
m
u
N
l
s
e
u
R
f
o
r
e
b
m
u
N
l
s
e
u
R
f
o
r
e
b
m
u
N
0
2011 - 05
2011 - 09
2012 - 01
2012 - 05
2012 - 09
2013 - 01
2013 - 05
2013 - 09
2014 - 01
2014 - 05
2014 - 09
2015 - 01
2015 - 05
2015 - 09
2016 - 01
2016 - 05
(c) EasyList
Figure 1: Temporal evolution of anti-adblock filter lists.
rules in the Anti-Adblock Killer List. We observe a steady increase
in number of filter rules. The filter list started with 353 initial filter
rules and it has expanded to 1,811 filter rules by July 2016. The
stair step pattern in the number of filter rules starting November
2015 indicates that the update cycle of the filter list increased to
approximately once a month. For this span, the list adds or modifies
60 filter rules for every revision on average. The most common
types of filter rules are HTTP request rules (with domain anchor
and both domain anchor and tag) and HTML element rules (with
domain). The most recent version of the filter list has 58.5% HTTP
request rules and 41.5% HTML element rules. 31.0% filter rules are
IMC ’17, November 1–3, 2017, London, United Kingdom
Iqbal et al.
HTTP request rules with only domain anchor, 2.1% are HTTP re-
quest rules with only domain tag, 22.0% are HTTP request rules
with both domain anchor and tag, and 3.4% are HTTP request rules
without domain anchor and tag. 40.0% filter rules are HTML ele-
ment rules with domain and 1.5% are HTML element rules without
domain.
Adblock Warning Removal List. Adblock Warning Removal List
was created by the EasyList filter list project [16] in 2013. The list
is maintained by multiple authors and relies on user feedback on
their forum [17]. On average, the list adds or modifies 0.2 filter
rules every day. Figure 1(b) visualizes the temporal evolution of
different types of filter rules in the Adblock Warning Removal
List. In contrast to the Anti-Adblock Killer List, it is noteworthy
that this list contains a larger fraction of HTML filter rules. The
HTML element filter rules hide anti-adblock warning popups that
are displayed when anti-adblockers detect adblockers. The filter list
started in 2013 with 4 filter rules and it has expanded to 167 filter
rules by July 2016. While the filter list initially grows slowly, we
note a significant spike in the number of filter rules in April 2016
after which the rate of addition of new rules increases as well. The
spike observed in April 2016 corresponds to the addition of French
language section in the filter list. The most recent version of the
filter list has 32.3% HTTP request rules and 67.7% HTML element
rules. 24.5% filter rules are HTTP request rules with only domain
anchor, 0.6% are HTTP request rules with only domain tag, 1.2%
are HTTP request rules with both domain anchor and tag, and 6.0%
are HTTP request rules without domain anchor and tag. 49.7% filter
rules are HTML element rules with domain and 18.0% are HTML
element rules without domain.