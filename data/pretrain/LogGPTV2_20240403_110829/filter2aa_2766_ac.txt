Type 1 (Topaz)
Cannot emulate at this time
Type 3 (FelCa)
Cannot emulate at this time
LLCP - Connect
2000
19 bytes of information, some crashes
Charlie Miller: Exploring the NFC Attack Surface 
Device
Type
Test 
cases
Results/notes
LLCP - I
2000
13 bytes of header information, some 
crashes
Application Layer
A total of 52362 test cases were performed against the Nexus S.  See below for details.
Device
Type
Test 
cases
Results/notes
Nexus S
NDEF - bitﬂip
9000
Mutation-based
NDEF - short text
1626
Generation-based
NDEF - short URI
538
Generation-based
NDEF - short SMS
1265
Generation-based
NDEF - short SP
3675
Generation-based
NDEF - short BT
1246
Generation-based
NDEF - long text
2440
Generation-based
NDEF - long vcard
32572
Generation-based
Android - Crashes
The most common crash found was of the Tags application, which is the default Android 
NFC tag reader application.  This application is written in Java and so crashes 
correspond to Java exceptions and not, for example, memory corruption.  See Figure 9, 
below, for an example of what a crash looks like on the phone.  
Charlie Miller: Exploring the NFC Attack Surface 
Figure 9: Tags application dying
The log reveals 
E/NfcService(17875): failed to parse record
E/NfcService(17875): java.lang.ArrayIndexOutOfBoundsException
E/NfcService(17875):  
at com.android.nfc.NfcService
$NfcServiceHandler.parseWellKnownUriRecord(NfcService.java:2570)
E/NfcService(17875):  
at com.android.nfc.NfcService
$NfcServiceHandler.setTypeOrDataFromNdef(NfcService.java:2616)
E/NfcService(17875):  
at com.android.nfc.NfcService
$NfcServiceHandler.dispatchTagInternal(NfcService.java:2713)
During low level fuzzing, a different (Java) application, the NFC Service, was also seen 
to crash, shown in Figure 10, below.  The NFC Service is the default Android NFC 
processing service. .
Charlie Miller: Exploring the NFC Attack Surface 
Figure 10: The NFC service is prone to Java exceptions
The log corresponds to something like the series of exceptions below:
D/NdefPushServer( 3130): java.io.IOException
D/NdefPushServer( 3130):  
at 
com.android.internal.nfc.LlcpSocket.receive(LlcpSocket.java:193)
D/NdefPushServer( 3130):  
at 
com.android.nfc.ndefpush.NdefPushServer
$ConnectionThread.run(NdefPushServer.java:70)
D/NdefPushServer( 3130): about to close
W/dalvikvm( 3130): threadid=8: thread exiting with uncaught 
exception (group=0x40015560)
E/AndroidRuntime( 3130): FATAL EXCEPTION: NdefPushServer
E/AndroidRuntime( 3130): java.lang.NegativeArraySizeException
E/AndroidRuntime( 3130):  
at 
com.android.nfc.ndefpush.NdefPushProtocol.(NdefPushProtoco
l.java:97)
E/AndroidRuntime( 3130):  
at 
com.android.nfc.ndefpush.NdefPushServer
$ConnectionThread.run(NdefPushServer.java:86)
Charlie Miller: Exploring the NFC Attack Surface 
Java exceptions are generally pretty boring from a security perspective.  However, we 
did ﬁnd a few native code crashes in the handling of LLCP packets.  One appears to be 
a null pointer dereference caused by sending a CC (Connection Complete) packet 
before a CONNECT packet.  Other crashes may be more interesting and occur in libc.
One frequent crash address found corresponds to a call to abort() in libc.  Normally, this 
isn’t very interesting because programs may call abort when they see something has 
gone wrong, which in fuzzing, is all the time!  However, there is a chance it is signiﬁcant 
because the exception may indicate memory corruption.  
One crash log from an interesting Java exception is:
D/NdefPushServer(13178): starting new server thread
D/NdefPushServer(13178): about create LLCP service socket
D/NdefPushServer(13178): created LLCP service socket
D/NdefPushServer(13178): about to accept
D/NFC JNI (13178): Discovered P2P Target
D/NfcService(13178): LLCP Activation message
E/NFC JNI (13178): phLibNfc_Llcp_CheckLlcp() returned 
0x00ff[NFCSTATUS_FAILED]
I/DEBUG   (   73): *** *** *** *** *** *** *** *** *** *** *** *** *** *** 
*** ***
I/DEBUG   (   73): Build fingerprint: 'google/sojua/crespo:2.3.3/
GRI54/105536:user/release-keys'
I/DEBUG   (   73): pid: 13178, tid: 13178  >>> com.android.nfc 
I/DEBUG   (   73):          #01  pc 00013e08  /system/lib/libc.so 
I/DEBUG   (   73):          #02  pc 0001423e  /system/lib/libc.so 
I/DEBUG   (   73):          #03  pc 000142ac  /system/lib/libc.so 
I/DEBUG   (   73):          #04  pc 0001451a  /system/lib/libc.so 
I/DEBUG   (   73):          #05  pc 0001abf0  /system/lib/libbinder.so 
I/DEBUG   (   73):          #06  pc 0001ad0c  /system/lib/libbinder.so 
I/DEBUG   (   73):          #07  pc 0001ae68  /system/lib/libbinder.so 
DEBUG   (   73):          #08  pc 0001aea8  /system/lib/libbinder.so 
DEBUG   (   73):          #09  pc 0001aed4  /system/lib/libbinder.so 
DEBUG   (   73):          #10  pc 0001aef8  /system/lib/libbinder.so 
...
Another crash seen was from a call to abort from dlfree().  This usually occurs due to 
heap corruption.
D/NFC JNI (27180): phLibNfc_Mgt_UnConfigureDriver() returned 
0x0000[NFCSTATUS_SUCCESS]^M^M
I/DEBUG   (   73):          #00  pc 00015ca4  /system/lib/libc.so 
I/DEBUG   (   73):          #01  pc 00013614  /system/lib/libc.so 
I/DEBUG   (   73):          #02  pc 000144da  /system/lib/libc.so 
I/DEBUG   (   73):          #03  pc 0004996e  /system/lib/libdvm.so 
I/DEBUG   (   73):          #04  pc 00053fda  /system/lib/libdvm.so 
I/DEBUG   (   73):          #05  pc 000494da  /system/lib/libdvm.so 
I/DEBUG   (   73):          #06  pc 00005310  /system/lib/libnfc_jni.so 
I/DEBUG   (   73):          #07  pc 000118e4  /system/lib/libc.so       
An almost identical backtrace was observed except instead of abort being called, it 
actually crashed in dlfree:
D/NFC JNI (27180): phLibNfc_Mgt_UnConfigureDriver() returned 
0x0000[NFCSTATUS_SUCCESS]^M^M
I/DEBUG   (   73):          #00  pc 00013256  /system/lib/libc.so 
I/DEBUG   (   73):          #01  pc 000144da  /system/lib/libc.so 
I/DEBUG   (   73):          #02  pc 0004996e  /system/lib/libdvm.so 
Charlie Miller: Exploring the NFC Attack Surface 
This crash occurs in unlink_large_chunk inside dlfree() when dereferencing p->bk.
A ﬁnal call to abort from dlmalloc was seen during initialization,
I/DEBUG   (   73):          #00  pc 00015ca4  /system/lib/libc.so 
I/DEBUG   (   73):          #01  pc 00013e08  /system/lib/libc.so 
I/DEBUG   (   73):          #02  pc 000144be  /system/lib/libc.so 
I/DEBUG   (   73):          #03  pc 000509c8  /system/lib/libdvm.so  
I/DEBUG   (   73):          #04  pc 000533f8  /system/lib/libdvm.so  