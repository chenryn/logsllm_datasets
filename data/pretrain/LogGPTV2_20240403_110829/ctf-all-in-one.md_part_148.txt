| : 0x00400765 4883c480 add rsp, 0xffffffffff
ffff80
| : 0x00400769 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
1448
6.2.3 re CodegateCTF2017 angrybird
| : 0x00400772 488945f8 mov qword [local_8h],
rax
| : 0x00400776 31c0 xor eax, eax
; 将 eax 置 0
| : 0x00400778 83f800 cmp eax, 0
; 比较 eax 和 0
| `= 0x00400803 0fb655b0 movzx edx, byte [loca
l_50h] ; 第二轮运算
| 0x00400807 0fb645b1 movzx eax, byte [loca
l_4fh]
| 0x0040080b 21d0 and eax, edx
| 0x0040080d 8845d0 mov byte [local_30h],
al
| 0x00400810 0fb645d0 movzx eax, byte [loca
l_30h]
| 0x00400814 3c50 cmp al, 0x50
; 'P' ; 80
| ,= 0x0040082c c645d000 mov byte [local_30h],
1450
6.2.3 re CodegateCTF2017 angrybird
0 ; 第三轮运算
| 0x00400830 0fb645d0 movzx eax, byte [loca
l_30h]
| 0x00400834 3c01 cmp al, 1
; 1
| ,= 0x0040084c 0fb655c2 movzx edx, byte [loca
l_3eh] ; 第 n 轮运算
| 0x00400850 0fb645b1 movzx eax, byte [loca
l_4fh]
| 0x00400854 21d0 and eax, edx
| 0x00400856 8845d0 mov byte [local_30h],
al
| 0x00400859 0fb645d0 movzx eax, byte [loca
l_30h]
第一处 patch，将指令 je 改成 jne ：
[0x00400600]> s 0x0040077b
[0x0040077b]> pd 1
| `= wx 0f85
[0x0040077b]> pd 1
| `= pdf @ sub.you_should_return_21_not_1_:__6f6
/ (fcn) sub.you_should_return_21_not_1_:__6f6 22
| sub.you_should_return_21_not_1_:__6f6 ();
| ; CALL XREF from 0x004007a6 (main)
| 0x004006f6 55 push rbp
| 0x004006f7 4889e5 mov rbp, rsp
| 0x004006fa bf64504000 mov edi, str.you_shou
ld_return_21_not_1_:_ ; 0x405064 ; "you should return 21 not 1 :
("
| 0x004006ff e88cfeffff call sym.imp.puts
; int puts(const char *s)
| 0x00400704 8b0556592000 mov eax, dword [0x006
06060] ; [0x606060:4]=1 ; 修改 [0x606060:4] = 21 = 0x15
| 0x0040070a 5d pop rbp
\ 0x0040070b c3 ret
[0x0040077b]> ?v 21
0x15
[0x0040077b]> s 0x00606060
[0x00606060]> px 16
- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789A
BCDEF
0x00606060 0100 0000 0000 0000 0000 0000 0000 0000 ...........
.....
[0x00606060]> wx 15
[0x00606060]> px 16
- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789A
BCDEF
0x00606060 1500 0000 0000 0000 0000 0000 0000 0000 ...........
.....
另外该函数结尾处指令是 pop rbp ，而不是正确情况下的 leave ，我们把它改
过来：
1452
6.2.3 re CodegateCTF2017 angrybird
[0x00606060]> s 0x0040070a
[0x0040070a]> pd 1
| 0x0040070a 5d pop rbp
[0x0040070a]> wx c9
[0x0040070a]> pd 1
| 0x0040070a c9 leave
第三处 patch，将调用 sub.stack_check_70c 的指令直接 nop 掉：
[0x00606060]> pdf @ sub.stack_check_70c
/ (fcn) sub.stack_check_70c 30
| sub.stack_check_70c ();
| : ; CALL XREF from 0x004007b3 (main)
| : 0x0040070c 55 push rbp
| : 0x0040070d 4889e5 mov rbp, rsp
| : 0x00400710 bf82504000 mov edi, str.stack_ch
eck ; 0x405082 ; "stack check"
| : 0x00400715 e876feffff call sym.imp.puts
; int puts(const char *s)
| : 0x0040071a 678b0424 mov eax, dword [esp]
| : 0x0040071e 83f800 cmp eax, 0
| `= s 0x004007b3
[0x004007b3]> pd 1
| 0x004007b3 e854ffffff call sub.stack_check_
70c
[0x004007b3]> wx 9090909090
[0x004007b3]> pd 5
| 0x004007b3 90 nop
| 0x004007b4 90 nop
| 0x004007b5 90 nop
| 0x004007b6 90 nop
| 0x004007b7 90 nop
第四处 patch 是将 sub.hello_72a 函数中的 je 改成 jne ：
1453
6.2.3 re CodegateCTF2017 angrybird
[0x0040077b]> pdf @ sub.hello_72a
/ (fcn) sub.hello_72a 55
| sub.hello_72a ();
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x004007bd (main)
| 0x0040072a 55 push rbp
| 0x0040072b 4889e5 mov rbp, rsp
| 0x0040072e 4883ec10 sub rsp, 0x10
| 0x00400732 48c745f83860. mov qword [local_8h],
reloc.__libc_start_main_56 ; 0x606038
| 0x0040073a 488b45f8 mov rax, qword [local
_8h]
| 0x0040073e ba05000000 mov edx, 5
| 0x00400743 be8e504000 mov esi, str.hello
; 0x40508e ; "hello"
| 0x00400748 4889c7 mov rdi, rax
| 0x0040074b e830feffff call sym.imp.strncmp
; int strncmp(const char *s1, const char *s2, size_t n)
; 如果相等则返回 0
| 0x00400750 85c0 test eax, eax
| ,= 0x0040075e 90 nop
| 0x0040075f c9 leave
\ 0x00400760 c3 ret
总的来说就是修改了下面几个地方：
1454
6.2.3 re CodegateCTF2017 angrybird
$ radiff2 angrybird_org angrybird_mod
0x0000070a 5d => c9 0x0000070a
0x00000722 85 => 84 0x00000722
0x00000752 74 => 75 0x00000752
0x0000077c 84 => 85 0x0000077c
0x000007b3 e854ffffff => 9090909090 0x000007b3
0x00006060 01 => 15 0x00006060
这样程序的运行就正常了，它从标准输入读入字符，进行一系列的判断，由于程序
执行流非常长，我们不可能一个一个地去 patch。radare2 里输入命令 VV @
main 可以看到下面的东西：
1455
6.2.3 re CodegateCTF2017 angrybird
1456
6.2.3 re CodegateCTF2017 angrybird
不如使用 angr 来解决它，指定好目标地址，让它运行到那儿，在大多数情况下，
这种方法都是有效的。
[0x00400761]> pd -20 @ main+18555
| 0x00404f8e d00f ror byte [rdi], 1
| 0x00404f90 b645 mov dh, 0x45
; 'E' ; 69
| 0x00404f92 d03c78 sar byte [rax + rdi*2
], 1
| ,= 0x00404fab 488d45b0 lea rax, [local_50h]
| 0x00404faf 4889c6 mov rsi, rax
| 0x00404fb2 bf9b504000 mov edi, str.you_type
d_:__s_n ; 0x40509b ; "you typed : %s\n"
| 0x00404fb7 b800000000 mov eax, 0
| 0x00404fbc e8efb5ffff call sym.imp.printf
; int printf(const char *format)
| 0x00404fc1 b800000000 mov eax, 0
| 0x00404fc6 488b4df8 mov rcx, qword [local
_8h]
| 0x00404fca 6448330c2528. xor rcx, qword fs:[0x
28]
| ,= 0x00404fda c9 leave
; 选择一个目标地址
\ 0x00404fdb c3 ret
1457
6.2.3 re CodegateCTF2017 angrybird
因为每次错误退出之前，都会调用 puts 函数，所以应该避免其出现，将地址设
置为参数 avoid。
[0x00400600]> is~puts
vaddr=0x00400590 paddr=0x00000590 ord=002 fwd=NONE sz=16 bind=GL
OBAL type=FUNC name=imp.puts
对于使用 angr 来说，上面的 patch 完全没有必要，只要选择一个合适的初始化地
址，如 0x004007da ，也就是 fget 函数的下一条指令，就可以跑出结果：
import angr
main = 0x004007da
find = 0x00404fda # leave;ret
avoid = 0x00400590 # puts@plt
p = angr.Project('./angrybird_org')
init = p.factory.blank_state(addr=main)
pg = p.factory.simgr(init, threads=4)