### Variance Calculation Using Additive Homomorphic Encryption

The variance is a polynomial of degree 2, so we set \( d = 2 \). Given ciphertexts \( E_2(\text{pk}, M_i) := (\text{Enc}(\text{pk}, M_i), \text{Enc}(\text{pk}, M_i^2)) \) for \( 1 \leq i \leq n \), one can obtain \( \text{Enc}(\text{pk}, P_j(M_1, \ldots, M_n)) = \sum_{i=1}^n \text{Enc}(\text{pk}, M_i^j) \) for \( j = 1, 2 \) using the additive homomorphic property. After decrypting each ciphertext, the variance is computed as:

\[
\text{Variance} = \frac{1}{n} \left( \sum_{i=1}^n M_i^2 \right) - \left( \frac{1}{n} \sum_{i=1}^n M_i \right)^2
\]

This computation requires only two decryptions, two integer divisions, and one squaring operation. From our unoptimized implementation under the environment described in Section 5, it takes approximately 120 Âµs to compute the variance of 1000 128-bit integers, which is quite efficient.

### Secure Computing - Private Set Operations

Additive homomorphic encryption (and its threshold versions) has been widely used in various secure computing applications [16, 19, 22, 33, 31]. Here, we focus on private set operations [22, 33], which include private computations such as set intersection, set union, multi-set intersection, and others. Private set operations are particularly important as they serve as fundamental primitives in many applications. Numerous protocols use public key additive homomorphic encryption, such as the Paillier cryptosystem, to perform these operations. These protocols typically require several additions and limited scalar multiplications, and our scheme offers advantages in such scenarios. For instance, some approaches represent private set operations using polynomial or rational function operations [22, 33, 43], where one scalar multiplication suffices for set intersection in polynomial operations (or set union in rational function operations).

In these applications, users recover a set from the resulting polynomial by finding its roots. The message spaces of previous efficient additive homomorphic encryption schemes are either composite or hidden. If the message space is hidden, there is no method to find the roots of a polynomial defined over that space. When the message space is composite, the polynomial ring over the message space is not a unique factorization domain, making it difficult to efficiently obtain the exact corresponding set from the polynomial. Specifically, the message space of Paillier encryption is \( \mathbb{Z}_N \) for a hard-to-factor integer \( N \). In this case, finding the roots of the polynomial in \( \mathbb{Z}_N \) is equivalent to factoring \( N \) [44].

To overcome this challenge, some previous (multi-)set union protocols [33, 23] use a mix-net protocol with additive homomorphic encryption, but this approach introduces an additional \( O(t) \) rounds for the number of corrupted users \( t \). Another protocol [43] uses a secret sharing technique instead of additive homomorphic encryption, which runs in a constant round but incurs \( n^\kappa \) times more communication and \( n \) times more computational overhead than previous methods, where \( n \) is the number of users and \( \kappa \) is the cardinality of the users' sets. Recently, Cheon et al. [10] proposed a new encoding to uniquely determine a set from a polynomial defined over the message space of Naccache and Stern encryption. However, their encoding is complex and only supports the correct result with some probability.

In contrast, the message space of our scheme can be a field, enabling us to use efficient root-finding algorithms over a field [45]. This allows us to achieve a constant-round private set union protocol that reduces the communication and computational costs by \( n^\kappa \) and \( n^2 \) times, respectively, compared to [43].

### Conclusion

We have presented an efficient additive homomorphic encryption scheme and proved its security under the hardness of a new problem, the co-ACD problem. Although we could not reduce this problem to other well-known cryptographic hard problems, we extensively analyzed its hardness using all known techniques, providing plausible evidence of its security. Our implementation results show that our scheme is the fastest among those supporting additive homomorphic properties.

To extend the usefulness of additive homomorphic encryption, we have introduced a method to efficiently evaluate symmetric polynomials by providing ciphertexts of some powers of messages. We also provided a (t, t)-threshold version of our scheme for smooth adoption to various applications. Constructing a (t, n)-threshold version of our scheme for \( t < n \) remains an open problem.

### Acknowledgements

This work was supported by the IT R&D program of MSIP/KEIT [No. 10047212]. Hyung Tae Lee was also supported in part by the Singapore Ministry of Education under Research Grant MOE2013-T2-1-041. Part of this work was done while Hyung Tae Lee was with Seoul National University, Korea. The authors would like to thank Hyunsook Hong, Jinsu Kim, Moon Sung Lee, Hansol Ryu, and the anonymous reviewers of ACM CCS 2014 for their helpful comments.

### References

[References are listed as provided, with no changes needed.]