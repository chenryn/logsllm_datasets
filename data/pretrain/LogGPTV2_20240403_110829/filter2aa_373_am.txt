后，会在存储目录中存放与API相对应的JavaDocs文件。用浏览器打开则如下图所示：
第十六章如何编写自己的BurpSuite插件
186
除了上文说的，我们能导出JavaDocs到本地外，Burp官方也提供了一份在线文档，地址
为：https://portswigger.net/burp/extender/api/index.html下面我们根据接口功能的不同对API
进行分类。
1. 插件入口和帮助接口类：IBurpExtender、IBurpExtenderCallbacks、
IExtensionHelpers、IExtensionStateListener
IBurpExtender接口类是Burp插件的入口，所有Burp的插件均需要实现此接口，并且
类命名为BurpExtender。IBurpExtenderCallbacks接口类是IBurpExtender接口的实
现类与Burp其他各个组件（Scanner、Intruder、Spider......）、各个通信对象
（HttpRequestResponse、HttpService、SessionHandlingAction）之间的纽带。
IExtensionHelpers、IExtensionStateListener这两个接口类是插件的帮助和管理操作
的接口定义。
2. UI相关接口类：IContextMenuFactory、IContextMenuInvocation、ITab、ITextEditor、
IMessageEditor、IMenuItemHandler
这类接口类主要是定义Burp插件的UI显示和动作的处理事件，主要是软件交互中使
用。
3. Burp工具组件接口类：IInterceptedProxyMessage、IIntruderAttack、
IIntruderPayloadGenerator、IIntruderPayloadGeneratorFactory、
IIntruderPayloadProcessor、IProxyListener、IScanIssue、IScannerCheck、
IScannerInsertionPoint、IScannerInsertionPointProvider、IScannerListener、
第十六章如何编写自己的BurpSuite插件
187
IScanQueueItem、IScopeChangeListener
这些接口类的功能非常好理解，Burp在接口定义的命名中使用了的见名知意的规
范，看到接口类的名称，基本就能猜测出来这个接口是适用于哪个工具组件。
4. HTTP消息处理接口类：ICookie、IHttpListener、IHttpRequestResponse、
IHttpRequestResponsePersisted、IHttpRequestResponseWithMarkers、IHttpService、
IRequestInfo、IParameter、IResponseInfo
这些接口的定义主要是围绕HTTP消息通信过程中涉及的Cookie、Request、
Response、Parameter几大消息对象，通过对通信消息头、消息体的数据处理，来
达到控制HTTP消息传递的目的。
通过对Burp插件API的功能划分，我们对API的接口有一个初步的认知，知道在使用某个功能
时，可以去哪个接口类中寻找相应的接口定义来做自己的实现。例如。我们想显示一个Tab页
界面，那么肯定是要实现ITab接口；如果需要对消息进行编辑修改，则需要实现
IMessageEditor接口；需要使用payload生成器，则需要实现IIntruderPayloadGenerator接
口。通过接口分类后再找具体的接口定义的方法，可以帮助我们在不太熟悉Burp插件API的
情况下，更快地开发出自己需要的插件。
Burp插件的编写前准备
编写一个完整的Burp插件的大体过程可分为如下三步：
1.导入Burp插件接口，即通过APIs界面上的【saveinterfacefiles】的保存动作，将生成的文
件连同burp目录一下添加你自己的JavaProject中。
2.编写Burp插件，即通过自己的代码编写，完成自己想实现的功能插件的编码过程。
3.加载Burp插件，即将上一步编写完成的插件，打包后导入BurpExtensions中，进行试用测
试的过程。
其中第一步和第三步对大多数来说，没有难度，主要难度在于如何编码实现Burp的插件。在
BurpSuite的官方网站上，插件编写网址：https://portswigger.net/burp/extender/。当我们打
开这个网页，会发现网站上有一系列Demo，包含各个编程语言的实现的源代码，这些
第十六章如何编写自己的BurpSuite插件
188
Demo，按照开发的难度逐步增加的，我们可以点击【Download】链接下载源码进行分析和
学习（网页截图如下所示）。
除了这些Demo外，网站还有一篇插件编写入门的文章。网
址：http://blog.portswigger.net/2012/12/writing-your-first-burp-extension.html。文章中以Java
和Python语言为例，编写一个最简单的Burp插件来熟悉插件的编写流程，阅读这些文章，会
给我们编写Burp插件带来极大的帮助。阅读完这篇文章之后，接着官方的归档文件中，会有
一些由浅入深讲解插件编写的文章，E文好的同学也可以自己看看，网址点
击：http://blog.portswigger.net/2012_12_01_archive.html
如果你没法读懂这些文章，那么我们一起先来看看编写Burp插件的准备工作有哪些，下一章
以实例学习如何编写一个Burp插件。通常编写Burp插件的准备工作有：
1. 安装JDK------我相信会使用BurpSuite软件的同学都已经安装过JDK了，如果没有安装，
请阅读此书的第一章第二章相关章节。
2. 安装IDE------一款好的IDE能使得开发效率得到极大的提升，Java语言推荐使用Eclipse或
者IntelliJ，Python推荐使用Pycharm或者PyDev，具体每一个IDE软件的安装，请读者自
己查找学习。
3. 熟悉编程语言的语法-----这是编写插件的基础，如果连基本的语法都不熟悉，编写Burp代
码是有一定难度的，接下来的文章中，编者默认为阅读者对语法的掌握程度是熟悉的。
第十六章如何编写自己的BurpSuite插件
189
具备了以上三点，把你自己想要实现的插件功能按照软件需求分析的流程在图纸上简单地画
出来，我们即可以进入插件开发环节。
Burp插件的编写（Java语言版）
Burp插件的编写语言有Java、Python、Ruby，此处我们以Java为例，来学习编写一个插件。
插件要实现的功能是：在http和https请求的header部分添加一个X-Forward-For字段，而字段
中的IP地址是随机生成或者指定的，用于绕过使用该字段来防护暴力破解等的场景。插件代
码的编写是基于网友bit4woo的Burp插件源码进行二次开发的。源项目github地
址：https://github.com/bit4woo/Burp_Extender_random_X-Forward-For，在此向网友
bit4woo致谢！
bit4woo网友的源码中实现的插件中仅有X-Forward-For的消息头添加，无插件的UI界面，我
们无控制插件是否生效和跟踪http消息通信的直观查看。因此，我们需要实现的插件的功能如
下：
1. 对使用插件的HTTP请求消息头中添加X-Forward-For字段
2. 添加UI界面，直观地感受插件的使用。
3. 跟踪HTTP消息，在Burp中使用了哪些组件，请求的URL是什么,请求后的http状态码是否
多少。
4. 能在插件中控制本插件是否拦截所有的HTTP请求消息，即是否对请求消息头添加X-
Forward-For字段。
5. 添加的X-Forward-For字段是随机生成还是自己指定的值。
插件编写完成的消息跟踪界面（HistoryLog）如下图：
插件的设置界面（Options）如下：
第十六章如何编写自己的BurpSuite插件
190
下面我们就来看看具体的编码实现（此处仅仅谈Burp插件的编写，Swing组件的使用不涉及，
默认编写者对Swing已熟练掌握）。
1.首先在burp包中定义了一个名称为BurpExtender的java类，必须继承IBurpExtender接口。
这个上一个章节已经阐述过了。
2.因为要在Burp中添加一个tab页作为我们自定义的UI，所以我们需要实现ITab接口；因为要
显示请求和响应消息，所以需要实现IMessageEditorController接口；因为要拦截请求的报
文，添加X-Forward-For，所以需要实现IHttpListener接口。如上图所示。类定义完成后，导
入未实现的方法，则类的UML图如下：
第十六章如何编写自己的BurpSuite插件
191
2.因为要在Burp中添加一个tab页作为我们自定义的UI，所以我们需要实现ITab接口；因为要
显示请求和响应消息，所以需要实现IMessageEditorController接口；因为要拦截请求的报
文，添加X-Forward-For，所以需要实现IHttpListener接口。如上图所示。类定义完成后，导
入未实现的方法，则类的UML图如下：
3.接着就是对接口类的方法实现，在UML中，下面两个是需要实现的主要函数：
registerExtenderCallbacks(finalIBurpExtenderCallbackscallbacks)这个函数是
Burp插件的入口，在这里主要做了如下工作：1）初始化插件和组件对象2）设置自定义
的UI界面原型。
其中创建自定义UI的run函数代码如下：
第十六章如何编写自己的BurpSuite插件
192
其次是processHttpMessage(inttoolFlag,booleanmessageIsRequest,
IHttpRequestResponsemessageInfo)这个函数的功能主要是对HTTP消息的处理和添
加HTTP消息到History列表中。其代码如下：
第十六章如何编写自己的BurpSuite插件
193
除了这两个函数，其他函数的功能主要是为了UI展示做的各种逻辑操作，此处就不再叙
述了，想要了解的同学可以下载本章后面附的源码进行阅读。
第十六章如何编写自己的BurpSuite插件
194
4.完成了主要函数的编码之后，插件开发的部分就已经结束了，这时候，我们只需要把代码导
出成jar把，加载到BurpExtensions中测试运行即可。
5.本插件和其源码下载地址
点击下载插件jar
点击下载源码
下载完毕后，你可以把src中的两个java类放入从APIs标签页中导入的接口类所在的burp包
中，编译后打包jar运行；也可以直接把下载的X-forward-For.jar导入Burp拓展插件中，即可看
到插件的运行界面。
第十六章如何编写自己的BurpSuite插件
195
使用BurpSuite测试WebServices服务
从这一章开始，我们进入了Burp的综合使用。通过一系列的使用场景的简单学习，逐渐熟悉
Burp在渗透测试中，如何结合其他的工具，组合使用，提高工作效率。本章主要讲述在测试
WebServices服务中，如何使用BurpSuite和SoapUINGPro的组合，对服务接口进行安全测
试。本章讲述的主要内容有：
使用场景和渗透测试环境配置
渗透测试过程中组合软件的使用
使用场景和渗透测试环境配置
在日常的web测试过程中，除了基于浏览器展现技术的客户端应用程序外，基于SOAP协议进
行通信的WebService服务也很常见。WebService的出现是为了解决分布式、跨平台、低耦合
而实现的不同编程语言之间采用统一的数据通信的技术规范，在应用程序中，常作为独立的
业务模块对外提供具体的业务功能或者为前段提供数据处理的业务接口。因SAOP协议中的接
口定义使用XML作为描述性语言，这与php、jsp之类的通信交互在渗透测试上还是有很大的
差异。如果使用Burp对通信消息进行拦截抓包，一次典型的消息内容如下图所示：
其http消息头中包含SOAPAction字段，且消息体为 封装的xml文本（更多
关于WebService的文章请阅读者自行搜索）。正因为WebService这些特征，所以在渗透测试
中我们也需要选择能解析SOAP协议和WSDL描述的软件。这里，我们使用的是SoapUING
Pro和BurpSuite。他们各自的作用分别是：
SoapUINGPro：渗透测试流程的发起，通信报文的解析、集合payload之后通信报文
的重新组装等。
BurpSuite：代理拦截，跟踪通信过程和结果，对通信进行重放和二次处理等。
第十七章使用BurpSuite测试WebServices服务
196
如果按照时序图来展现，他们在通信过程中，各自的时序位置如下：
从
图中我们可以看出，作为代理服务Burp起着通信中间人的作用，可以对消息进行拦截后的编
码、解码、转发、丢弃等各种操作，并记录原始消息。而SoapUINGPro作为WebService的
测试工具，通过构造不同类型的payload来测试、验证漏洞的存在。他们组合在一起，共同完
成复杂场景下WebService服务的渗透测试过程中的安全性验证。
SoapUINGPro是SmartBear公司继SoapUIPro之后推出的企业应用级收费软件，其试用版
下载地址为：https://smartbear.com/product/ready-api/soapui-ng/free-trial/。下载安装完毕
后，打开软件的主界面大体如下图所示（其中图中1部分为不同功能视图之间的切换项，图中
2部分为菜单栏，图中3部分为常用功能菜单，图中4为Project视图区，图中5为主工作区，图
中6部分为属性设置区）：
第十七章使用BurpSuite测试WebServices服务
197
安装完毕后，我们首先要做的是将SoapUINGPro的代理服务指向BurpSuite。假设我的Burp
Proxy设置为127.0.0.1:8080。则SoapUINGPro的配置是：
1. 点击上图中3部分的Preferences，或者上图中2部分的【File】>>【Preferences】
2. 在弹出的界面中打开proxy选项卡，录入代理地址和端口。
完成以上的配置后，我们对WebService的渗透测试环境已经基本具备，可以开始对一个具体