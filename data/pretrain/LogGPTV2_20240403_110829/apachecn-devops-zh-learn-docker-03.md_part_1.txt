# 三、使用容器
在前一章中，您学习了如何为 Docker 的高效和无摩擦使用优化您的工作环境。在这一章中，我们将把我们的手弄脏，并学习使用容器的所有重要知识。以下是我们将在本章中讨论的主题:
*   运行第一个容器
*   启动、停止和移除容器
*   检查容器
*   执行到正在运行的容器中
*   连接到运行的容器
*   正在检索容器日志
*   容器解剖
完成本章后，您将能够完成以下工作:
*   基于现有映像运行、停止和删除容器，例如 NGINX、busybox 或 alpine
*   列出系统上的所有容器
*   检查正在运行或停止的容器的元数据
*   检索容器内运行的应用产生的日志
*   在已经运行的容器中运行一个进程，如`/bin/sh`。
*   将终端连接到已经运行的容器
*   用你自己的话向感兴趣的外行解释容器的基础
# 技术要求
对于本章，您应该已经安装了 Mac 的 Docker 或 Windows 的 Docker。如果您使用的是旧版本的 Windows 或使用的是 Windows 10 家庭版，那么您应该已经安装了 Docker 工具箱并准备好使用。在 macOS 上，使用终端应用，在 Windows 上，使用 PowerShell 控制台尝试您将要学习的命令。
# 运行第一个容器
在我们开始之前，我们希望确保 Docker 正确安装在您的系统上，并准备好接受您的命令。打开一个新的终端窗口，输入以下命令:
```
$ docker -v 
```
如果一切正常，您应该会在终端中看到安装在笔记本电脑输出上的 Docker 版本。在写的时候，看起来是这样的:
```
Docker version 17.12.0-ce-rc2, build f9cde63 
```
如果这不起作用，那么你的安装有问题。请确保您已经遵循了上一章中关于如何在您的系统上安装 Docker for Mac 或 Docker for Windows 的说明。
所以，你准备好看到一些行动了。请在您的终端窗口中键入以下命令，然后点击返回:
```
$ docker container run alpine echo "Hello World" 
```
当您第一次运行前面的命令时，您应该会在终端窗口中看到类似如下的输出:
```
Unable to find image 'alpine:latest' locally
latest: Pulling from library/alpine
2fdfe1cd78c2: Pull complete
Digest: sha256:ccba511b...
Status: Downloaded newer image for alpine:latest
Hello World
```
这很简单！让我们再次尝试运行同样的命令:
```
$ docker container run alpine echo "Hello World" 
```
第二次、第三次或第 n 次运行前面的命令时，您应该只能在终端中看到以下输出:
```
 Hello World  
```
尝试推理为什么第一次运行命令时会看到不同于所有后续时间的输出。但是如果你想不出来也不用担心，我们会在本章后面的章节中详细解释原因。
# 启动、停止和移除容器
您已经成功运行了上一节中的容器。现在我们要详细调查到底发生了什么，为什么。让我们再次看看我们使用的命令:
```
$ docker container run alpine echo "Hello World" 
```
该命令包含多个部分。首先，我们有一个词`docker`。这是 Docker **命令行界面** ( **CLI** )的名称，我们使用它与负责运行容器的 Docker 引擎进行交互。接下来，我们有一个词`container`，它表示我们正在使用的上下文。当我们想要运行一个容器时，我们的上下文是单词`container`。接下来是我们想要在给定上下文中执行的实际命令，即`run`。
让我回顾一下——到目前为止，我们有`docker container run`，这意味着，*嘿，Docker，我们想运行一个容器....*
现在我们还需要告诉 Docker 运行哪个容器。在这种情况下，这就是所谓的`alpine`容器。最后，我们需要定义当容器运行时，应该在容器内部执行什么样的进程或任务。在我们的例子中，这是命令的最后一部分，`echo "Hello World"`。
也许下图可以帮助你更好地理解整件事:
![](img/ae5a5c9d-90a1-4886-9b26-98dcea0d3951.png)
Anatomy of the docker container run expression
既然我们已经理解了运行一个容器的命令的各个部分，让我们尝试运行另一个容器，并在其中运行一个不同的进程。在终端中键入以下命令:
```
$ docker container run centos ping -c 5 127.0.0.1
```
您应该会在终端窗口中看到类似以下内容的输出:
```
Unable to find image 'centos:latest' locally
latest: Pulling from library/centos
85432449fd0f: Pull complete
Digest: sha256:3b1a65e9a05...
Status: Downloaded newer image for centos:latest
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.022 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.019 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.029 ms
64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.030 ms
64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.029 ms
--- 127.0.0.1 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4103ms
rtt min/avg/max/mdev = 0.021/0.027/0.029/0.003 ms 
```
改变的是，这一次，我们使用的容器映像是`centos`，而我们在`centos`容器内执行的进程是`ping -c 5 127.0.0.1`，它五次 pings 环回地址，直到它停止。
让我们详细分析一下输出:
*   第一行如下:
```
Unable to find image 'centos:latest' locally
```
这告诉我们 Docker 在系统的本地缓存中没有找到名为`centos:latest`的映像。因此，Docker 知道它必须从存储容器映像的某个注册表中提取映像。默认情况下，您的 Docker 环境配置为在`docker.io`从 Docker 集线器中提取映像。这由第二行表示，如下所示:
```
    latest: Pulling from library/centos 
```
*   接下来的三行输出如下:
```
    85432449fd0f: Pull complete
    Digest: sha256:3b1a65e9a05...
    Status: Downloaded newer image for centos:latest
```
这告诉我们 Docker 已经成功地从 Docker Hub 中拉出了映像`centos:latest`。
输出的所有后续行都是由我们在容器中运行的进程生成的，在这种情况下是 ping 工具。如果你一直关注到现在，那么你可能已经注意到关键词`latest`出现了几次。每个映像都有一个版本(也称为标签)，如果我们没有明确指定版本，那么 Docker 会自动假设它是最新的。
如果我们在系统上再次运行前面的容器，输出的前五行将丢失，因为这一次，Docker 将在本地找到缓存的容器映像，因此不必先下载它。试试看，验证一下我刚才说的。
# 运行随机报价容器
对于本章的后续部分，我们需要一个在后台连续运行并产生一些有趣输出的容器。这就是为什么，我们选择了一种产生随机报价的算法。产生这些免费随机报价的 API 可以在[https://talaikis.com/random_quotes_api/](https://talaikis.com/random_quotes_api/)找到。
现在的目标是让一个进程在一个容器中运行，每五秒钟生成一个新的随机报价，并将报价输出到 STDOUT。以下脚本将完全做到这一点:
```
while : 
do 
    wget -qO- https://talaikis.com/api/quotes/random 
    printf 'n' 
    sleep 5 
done 
```
在终端窗口中尝试。按 *Ctrl* + *C* 停止脚本。输出应该如下所示:
```
{"quote":"Martha Stewart is extremely talented. Her designs are picture perfect. Our philosophy is life is messy, and rather than being afraid of those messes we design products that work the way we live.","author":"Kathy Ireland","cat":"design"}
{"quote":"We can reach our potential, but to do so, we must reach within ourselves. We must summon the strength, the will, and the faith to move forward - to be bold - to invest in our future.","author":"John Hoeven","cat":"faith"}
```
每个响应都是一个 JSON 格式的字符串，包含引用、作者和类别。
现在，让我们在一个`alpine`容器中运行它，作为后台的守护进程。为此，我们需要将前面的脚本压缩成一行，并使用`/bin/sh -c "..."`语法执行它。我们的 Docker 表达式如下所示:
```
$ docker container run -d --name quotes alpine \
 /bin/sh -c "while :; do wget -qO- https://talaikis.com/api/quotes/random; printf '\n'; sleep 5; done"
```
在前面的表达式中，我们使用了两个新的命令行参数，`-d`和`--name`。`-d`告诉 Docker 作为一个 Linux 守护程序运行容器中运行的进程。`--name`参数又可以用来给容器一个显式的名称。在前面的例子中，我们选择的名字是`quotes`。
如果我们在运行容器时没有指定显式的容器名称，那么 Docker 会自动为容器分配一个随机但唯一的名称。这个名字将由一位著名科学家的名字和一个形容词组成。这样的名字可以是`boring_borg`或`angry_goldberg`。我们的 Docker 很幽默，不是吗？
一个重要的要点是，容器名称在系统中必须是唯一的。让我们确保报价容器已经启动并运行:
```
$ docker container ls -l 
```
这应该给我们这样的东西:
![](img/c5affae4-e6b7-4677-a5b5-55dc079b9930.png)
Listing the last run container
前面输出的重要部分是`STATUS`列，在本例中是`Up 16 seconds`。也就是说，容器现在已经启动并运行了 16 秒。
如果您还不熟悉最后一个 Docker 命令，请不要担心，我们将在下一节中回到它。
# 列出容器
随着时间的推移，我们继续运行容器，我们的系统中有很多容器。要了解我们的主机上当前正在运行什么，我们可以使用容器`list`命令，如下所示:
```
$ docker container ls 
```
这将列出所有当前运行的容器。这样的列表可能看起来类似于这样:
![](img/cf0365a7-b117-422f-932e-50fe9347897b.png)
List of all containers running on the system
默认情况下，Docker 输出具有以下含义的七列:
| 
**列**
 | 
**描述**
 |
| `Container ID` | 容器的唯一标识。它是阿沙-256。 |
| `Image` | 从中实例化此容器的容器映像的名称。 |
| `Command` | 用于运行容器中主进程的命令。 |
| `Created` | 创建容器的日期和时间。 |
| `Status` | 容器的状态(创建、重新启动、运行、删除、暂停、退出或死亡)。 |
| `Ports` | 已映射到主机的容器端口列表。 |
| `Names` | 分配给此容器的名称(可以有多个名称)。 |
如果我们不仅要列出当前运行的容器，还要列出系统中定义的所有容器，那么我们可以使用命令行参数`-a`或`--all`，如下所示:
```
$ docker container ls -a 
```
这将列出任何状态的容器，如`created`、`running`或`exited`。
有时，我们只想列出所有容器的标识。对此，我们有参数`-q`:
```
$ docker container ls -q 
```
你可能想知道这在哪里有用。我给你看一个非常有用的命令:
```
$ docker container rm -f $(docker container ls -a -q)
```