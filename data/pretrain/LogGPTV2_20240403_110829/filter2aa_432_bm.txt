终端处理的部分难点在于许多不同的设备连接在一根异步串行线上。不仅交互式终端
是如此，打印机、调制解调器、绘图仪等等设备也是如此。即使终端用于交互式输入，不
同的程序也会以不同的方式访问终端，有些处理终端的行，有些处理全屏幕编辑，而有些
则禁止回显。
但对于某些程序来说，它们截取了标准输入和标准输出，对其进行另外的处理，如记
录所有的输入和输出。但是这类程序有些缺点，如果得不到系统提示符或者不能 tty ,vi 等，
这是因为，模拟的标准输入和标准输出在系统看来，不是一个终端设备。如果在其中加入
- 236 -
Linux网络编程
行律，则上面所说的所有问题就不存在，按照上面的规律，我们可以知道，事实上，这也
就是伪终端所要做的事情。
伪终端（pseudo terminal）是一对设备，一半称为主设备，一半称为从设备，进程打开
一对终端设备就同时得到两个文件描述符，我们把伪终端缩写成 pty。
伪终端如图 11-1 所示：
图 11-1  伪终端
写进主 pty 的所有数据看上去像是来自从 pty，而写进从 pty 的所有数据看起来则像是
来自主 pty。下面的两个函数运行于 4.3 BSD，pty_master 打开主 pty ,而 pty_slave 打开从 pty：
static char pty_name[ 12 ];
/* “/dev/[pt]tyXY” = 10 chars + null byte */
int pty_master( )
    {
int i ,master_fd;
char * ptr ;
struct stat statbuff;
  static char ptychar =“pqrs”;
/* X */
  static char hexdigit []=“0123456789abcdef”;
/* Y * /
/* 打开主 pty “/dev/pty[pqrs][0-9a-d]” */
for (ptr=ptychar; * pty!=0;pty++)
  {
strcpy (pty_name, “dev/ptyXY”);
    pty_name[8]= ptr ;   / X */
第十一章 远程注册
- 237 -
    pty_name[9]=‘0’;    /* Y */
/* 如果不存在名字 “dev/pty0”，则退出 */
if stat( pty_name,&statbuff)0-9a-f */
if ( ( master_fd=fopen(pty_name,O_RDWR) )>=0)
return ( master_fd);
    }
  }
return (-1);
}               /* end of pty_master */
int pty_slave (master_fd)
int master)fd;
{
int slave_fd;
pty_name[5]=‘t’;            /* 将“/dev/ptyXY”改为 “/dev/ttyXY” */
if ( ( slave_fd-fopen(pty_name,O_RDWR) ) =0)
  {
if (ioctl (fd,TIOCNOTTY,( char * )0)<0)
err_sys(“ioctl TIOCNOTTY error”);
close (fd);
  }
if ( (slave_fd =pty_slave(master_fd) ) <0)
err _sys (“can‘t open pty slave”);
close (master_fd);
if ( ( tty_setmode(slave_fd)<0)
err_sys(“can‘t tty mode of pty slave”);
在 System V 中，为了使子进程脱离其控制终端而把从 pty 作为其控制终端，必须：
调用 setpgrp 使子进程成为进程组头，与它的控制终端脱离。
打开从 pty 使之成为它的控制终端。
实现上述两点的代码段如下：