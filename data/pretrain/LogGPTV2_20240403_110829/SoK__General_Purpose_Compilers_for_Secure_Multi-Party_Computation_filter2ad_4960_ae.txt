The Wysteria codebase has changed since the original
publication of the paper, and the examples presented
in the paper do not compile. However, they provide
useful context for the architecture of a working program.
The repository includes several example programs that
run without errors, including a 6-party version of the
millionaire’s problem.
Wysteria includes a record type, which holds named
values of other types and can be output from a secure
block. Although Wysteria includes working examples
that pass an array as input
to a secure block, we
were unable to replicate this for our inner product or
crosstabulation programs. The language has support for
iterating over arrays in secure blocks, and allows access
to individual array elements outside of a secure block.
We encountered other signiﬁcant language limitations:
Wysteria only supports division by 2 in secure blocks,
and we did not ﬁnd a way to use logical operators on
Booleans.
The Wys* project [112] built on the ideas of Wys-
teria, and attempted to create a fully-veriﬁed toolchain
for secure computation based on the F* programming
language. The F* language is undergoing rapid develop-
ment, however, and we were not able to compile Wys*.
Recommendation: Wysteria’s limited support for com-
plex data types, current lack of development, and out-
dated back-end circuit parser, mean that it should not
be used for developing complex or efﬁcient protocols.
On the other hand, Wysteria is the only compiler we
examined that
is intended to provide a system for
automatically verifying that the underlying multi-party
computation has the same functionality as the monolithic
program implemented by the developer, and the only
compiler with a functional-style programming language.
We recommend future compiler developers use Wyste-
ria’s type-based correctness and security guarantees as a
model.
F. ABY
ABY [48] is a mixed-protocol two-party computation
framework implemented as a C++ library. It aims to
give developers ﬁne-grained control over computation
efﬁciency by providing a mechanism for mixing pro-
tocols. ABY switches between three protocols: The
GMW-based Arithmetic protocol uses an additive sharing
scheme with multiplicative triples on an arithmetic cir-
cuit. The protocol is based on those by [7], [90], [109].
The other protocols use Boolean circuits: the Boolean
protocol implements the original GMW protocol with an
XOR-based sharing scheme, while the Yao protocol uses
an optimized version of Yao’s garbled circuit protocol.
ABY has a signiﬁcant amount of documentation that
provides a helpful framework for understanding the
capabilities of the framework. This includes a slightly
outdated developer guide, an extended README ﬁle,
and a variety of commented examples.
Secure data is limited to unsigned C integer types:
ABY does not support arbitrary-length integers or an
explicit Boolean type, although it allows one-bit integers
that function equivalently. It supports some ﬂoating-point
operations and is actively developing this functionality.
ABY allows secure data stored in a C struct. ABY sup-
ports C++ arrays, as well as special SIMD constructions
1229
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
for highly efﬁcient parallel operations. Although ABY
provides functions for creating and populating SIMD
“shares” retrieving individual results requires operating
on the internal representation of secret data, which is not
well-supported.
The ABY developers have used it to implement several
secure computation systems [3], [34], [92], [108].
Recommendation: ABY provides a powerful,
low-
level cryptographic interface that gives the developer
signiﬁcant control over performance. ABY is targeted
at users who are familiar with MPC protocols and
the circuit model of computation. We recommend it to
developers with sufﬁcient cryptographic background.
G. SCALE-MAMBA
SCALE-MAMBA implements a maliciously secure
two-phase hybrid protocol and supersedes the SPDZ
framework. MAMBA is a Python-like language that
compiles to a bytecode representation. SCALE imple-
ments a two-phase protocol which ofﬂoads all public-key
operations to an ofﬂine pre-processing phase, generates
three types of shared randomness to use during protocol
execution, and executes an optimized hybrid protocol
based on previous work [18], [46], [103].
SCALE-MAMBA has a signiﬁcant amount of docu-
mentation, covering the differences from the previous
SPDZ system, installation and runtime instructions, up-
dated language documentation, and protocol primitives.
The example programs are unit-style tests but are not
explicitly documented. A community bulletin board4
hosts discussion and questions about the framework.
The SCALE-MAMBA framework allows developers
to deﬁne their own I/O classes. This provides an ex-
tremely ﬂexible interface. We did not implement a cus-
tom I/O class. The framework’s secure channel setup
requires users to produce a mini certiﬁcate authority in
order to run a computation.
Running our sample programs with a simple full-
threshold secret sharing scheme required signiﬁcant
memory resources. However, the system offers multiple,
customizable options for a secret-sharing scheme, and in-
cludes programmatic tools for ofﬂine data generation in
certain contexts. For testing purposes, SCALE includes
an option to run with fake (insecure) ofﬂine data.
Integer size is determined by the ﬁeld size, which
must be chosen at compile time. Standard full-threshold
sharing supports a modulus of up to 1024 bits. SCALE-
MAMBA supports most bit-shift operations and includes
Python-style tuples, which we consider to be a less
powerful type of struct. Fixed-point numbers are fully
supported, and ﬂoating-point numbers partially imple-
mented. It has ORAM support, which we did not test.
Recommendation: We recommend SCALE-MAMBA
for a variety of uses: it is ﬂexible, supports an arbitrary
number of parties and has strong security guarantees,
though it may require signiﬁcant computing resources.
H. Sharemind MPC
Sharemind [24] is a secure data processing plat-
form and a trademark of Cybernetica, a research-
and-development-focused technology company based in
Tallinn, Estonia. We used the Sharemind MPC platform,
which securely executes a function written in the SecreC
language. The framework executes a three-party hybrid
protocol using an additive secret sharing scheme.
The Sharemind MPC platform explicitly deﬁnes three
parties: clients, who input values; servers, who deﬁne
and run the secure computation; and outputs, who receive
the output of the computation. Server code is written in
the SecreC language and executed using Sharemind’s
secure runtime, while client and output code uses a
client library in a common programming language and
is executed using standard compilers. We developed our
sample programs using a C client library; the platform
also provides libraries in Haskell, Java, and JavaScript.
Sharemind MPC implements a custom additive secret-
sharing scheme over a ﬁxed-size ring. These ﬁxed-size
integers have behavior consistent with traditional C inte-
gers, and the framework includes a ﬂoating point library.
The protocol is written for exactly three servers, but there
is support for arbitrarily many parties secret-sharing
their inputs among the three computation servers into a
database structure. Our samples passed all input values
from a single client program. The SecreC language is
expressive and well documented online5. The supporting
client libraries are not as well documented.
The Sharemind MPC platform has several licensing
options6 through Cybernetica. We used the academic
server. This license gave us access to the protocol im-
plementation. The platform also includes an open-source
simulator, which includes the SecreC language, its stan-
dard library, and an emulator for the secure computation.
The emulator is available as a VM and as compilable
source code; we successfully ran our examples on both
versions. The emulator does not support client code and
arguments must be passed on the command line.
As part of the academic license, we had access to
several Sharemind employees who provided “reasonable
assistance” throughout the development process, and we
consider this to be an online resource.
Recommendation: The Sharemind MPC platform is
suitable for a wide variety of purposes. We recommend it
to companies looking to implement secure computation,
4https://groups.google.com/forum/#forum/spdz
5https://sharemind-sdk.github.io/stdlib/reference/index.html
6https://sharemind.cyber.ee/sharemind-mpc/
1230
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
particularly for large or complex functionalities, as well
as to academics who require MPC as a tool for a project.
I. PICCO
PICCO [134], [133] is a general-purpose compiler
with a custom secret-sharing protocol. It includes three
main software contributions: a compiler that translates
an extension of C to a native C implementation of the
secure computation; an I/O utility that produces and re-
constructs secret-shared input and output; and a tool that
initiates the computation. PICCO executes computations
under a hybrid model, using an information-theoretic
protocol for multiplication [65] and custom primitives
for other operations. It supports an arbitrary number of
parties but requires an honest majority.
PICCO allows conditionals on private variables, but
does not allow public variables to be assigned within
the scope of such a conditional. It also allows indexing
arrays at a private location, though this is implemented as
a multiplexer, not an ORAM scheme. It supports pointers
to private data and dynamic memory allocation using
standard C-like syntax. The language supports single-bit
integer types to approximate Booleans and while we ran
provided examples, we were unable to successfully write
our own program that uses them.
The language is well-documented in the paper. The
code repository includes many examples in a C exten-
sion, but doesn’t include examples of the additional ﬁles
needed to compile and run a program end-to-end. The
process to compile and execute a secure computation is
lengthy but well-documented and requires multiple con-
ﬁguration ﬁles and explicit generation and reconstruction
of secret-shared inputs and outputs.
Recommendation: PICCO is appropriate for develop-
ers or academics who require a true multi-party imple-
mentation. We found no correctness issues and it allows
a great deal of ﬂexibility in conﬁguring the computation.
J. Frigate
Frigate [101] compiles a novel C-like language to a
custom Boolean circuit representation for any number
of inputs. The framework emphasizes the use of good
software engineering techniques, including an extensive
testing suite and a focus on modularity and extensibility.
The circuit format minimizes ﬁle size, and the framework
includes an interpreter to efﬁciently interface between
generated circuits and other applications.
Frigate produces a circuit, so all operations are secure
by default. The type system is extremely simple, with
only three native types: signed and unsigned integers and
structs. While there is no explicit Boolean type, integers
are of arbitrary size and the language deﬁnes comparison
and bitwise operators, so it supports equivalent function-
ality. Global variables are not allowed. Frigate allows
arrays but they must be contained within structs. The
circuit compiler provides useful errors, and the source
code includes a brief description of interpreter options
and a language description.
One usability issue is that basic arithmetic operations
are deﬁned only for operands of the same type and size.
This may increase circuit size for some applications.
The framework does not include a simulator, so any
correctness checking requires a separate back end. To
test the circuits generated by Frigate, we wrote a tool that
converts Frigate circuits into a format suitable for exe-
cution in an implementation of the BMR protocol [15].
Recommendation: Frigate provides an expressive C-
like language for fast circuit generation and is a good
way to estimate the circuit size of a given computation.
However, even with our conversion tools that connect
Frigate’s circuit form to useful back-ends, executing an
end-to-end MPC computation requires relatively burden-
some action from the user.
K. CBMC-GC
CBMC-GC [77], [59] produces Boolean circuits from
a subset of ANSI-C. It
is based on CMBC [37], a
bounded model checker that translates any C program
into a Boolean constraint
then adapts the output of
this tool to produce an optimized circuit for an MPC
computation. The compiler can optimize for minimal
size or minimal depth circuits. It produces circuits for
any number of input parties; we compiled and simulated
sample programs with up to ten parties.
We did not ﬁnd adequate documentation for the limi-
tations of the adapted subset of ANSI-C that CMBC-GC
compiles. For example, variable names for inputs to the
main ﬁle must be preﬁxed by INPUT_. Arrays cannot
be passed natively as arguments; they must be wrapped
in a struct. Non-default integer types, such as speciﬁc-
width integers, can be used but need to be explicitly
included. We were unable to compile a program using
C Boolean types. The framework includes a rudimentary
set of ﬂoating-point operations, and allows conditionals
on secret data. There are some conﬁguration options,
such as circuit optimization technique, depth to unroll
loops, and a time limit on minimization.
CBMC-GC includes a tool for running circuits with
ABY (Section VI-F). We were unable to run an ex-
ample with this converter; it appears that the CBMC-
GC code references a deprecated ABY API. CBMC-GC
also includes a tool to output circuits in other formats,
including the Simple Circuit Description (SCD) used by
the TinyGarble compiler; Fairplay’s Secure Hardware
Deﬁnition Language (SHDL); and the Bristol circuit
format [120]. We tested the output of this tool with
TinyGarble’s compiler (Section VI-D), but were unable
to run any examples; we weren’t able to determine
1231
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
whether the errors were due to circuit generation by
CBMC-GC or execution by TinyGarble.
Recommendation: CBMC-GC uses powerful tools to
produce optimized circuits, but we were not able to
successfully execute any of the circuits it produced.
VII. DISCUSSION
A. Leveraging Existing Compiler Research
Programming language research is a ﬁeld dedicated
to creating compilers but little MPC research leverages
these techniques. Wysteria is a notable exception, but it
has signiﬁcant engineering gaps that make it unusable for
practical computations. However, the MPC community
would beneﬁt
if frameworks took a more principled
approach to language design and veriﬁcation.
One notable area for improvement is compiler correct-
ness. We found that while the frameworks were generally
successful in preventing security mistakes, many had
correctness issues. Deﬁning and implementing type rules
that guarantee a correct output could reduce these issues,
which were often silent failures.
B. Documentation
Universally, the biggest obstacle when using MPC
frameworks was a lack of documentation. The commu-
nity has put thousands of hours into producing the work
presented herein, and even mediocre documentation
makes these contributions signiﬁcantly more accessible.
Documentation comes in many forms and having
multiple types of documentation is helpful when using
a complex software system such as these. Our evalua-
tion criteria suggest several types we found particularly
useful, and we encourage developers and researchers to
produce multiple resources for system users.
In addition to static documentation provided by the au-
thors, active online resources can be extremely valuable.
These include archived correspondence, like an archived
mailing list, Google group or issue tracker on GitHub.
These resources can reduce the burden on researchers
who may be asked the same (or similar) questions re-
peatedly via private correspondence. Example programs
are also an important resource, and a repository where
the community can archive simple example programs
(e.g. like http://www.texample.net) would dramatically
improve usability and utility of these systems.
measurements. One potential issue is standardizing on a
soon-to-be-obsolete technology. For example, while we
could recommend a circuit format, this would not be
useful for modern hybrid framework models that use a
different intermediate representation.
Several projects are developing standardization in the
ﬁeld. SCAPI [1], [56] deﬁnes a general API that provides
a common interface for cryptographic building blocks
and primitives commonly used in secure computation.
It aims to provide a uniform, ﬂexible, and efﬁcient
standard library for cryptographers to use in their MPC
implementations and includes signiﬁcant documentation.
FRESCO [60] deﬁnes a set of Java APIs for function
description and protocol deﬁnition and evaluation. As a
demonstration, the project includes front-end code for
several sample projects and a new implementation of
the SPDZ protocol with MASCOT preprocessing. The
SCALE-MAMBA systems use a set of bytecodes as
an intermediate representation that have been reused in
other projects, such as the Jana compiler [5].
structure,
and
performance
across
computation
Benchmarking
frameworks
presents a challenge due to the variety of dependencies
on processing power, network bandwidth, network
latency,
framework
architecture. Theoretical performance measures can be
difﬁcult
to measure in practice and frameworks that
excel in one benchmark environment may fare poorly in
another. Nevertheless, benchmarks can provide insight
into a framework’s strengths and weaknesses, and do
have value if they are not used as a sole measure of
a framework’s contribution. Recent work by Barak et
al. [8] provides an approach for performance comparison
between frameworks with compatible architectures.
We recommend that the community collectively de-
velops a consistent set of problems and associated met-