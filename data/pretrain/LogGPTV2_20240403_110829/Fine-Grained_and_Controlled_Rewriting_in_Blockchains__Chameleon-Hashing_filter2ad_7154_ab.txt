one collision, one could compute a collision for any other
chameleon-hash. Moreover, with such a naive solution, the
hashing party (although it might not be authorized at all) could
then compute arbitrary collisions. We, however, strive for a
solution which allows us to have a separate trapdoor per hash,
so that we are able to implement ﬁne-grained access control.
Conventional chameleon-hashes provide no security guarantees
in such a setting.
To this end, we pursue a different path and carefully
integrate the CP-ABE functionality with the recent concept
of chameleon-hashes with ephemeral trapdoors (CHETs) [16]
and present a generic construction of PCHs. For access policies
representing the class of monotone Boolean formulas (which
is well suited for access control), we can additionally take
advantage of recent progress in very efﬁcient CP-ABE schemes
due to Agrawal and Chase [1]. Along the lines, we also
introduce a novel CHET which is more efﬁcient than the
most practical known instantiation proposed by Camenisch
et al. [16]. Putting all together, we obtain a very efﬁcient
concrete instantiation of a PCH. We support this claim with
an implementation of our primitive.
We discuss the application of PCHs for transaction-level
rewriting of blockchains (cf. Section V). Another application
that comes to mind is the usage of PCHs instead of conven-
tional chameleon-hashes in sanitizable signatures [4] to achieve
more expressive delegations of editing rights. We leave a
concrete and formal treatment open for future work. Moreover,
we believe that PCHs will ﬁnd many other applications.
B. Related Work
We already brieﬂy discussed the work due to Ateniese et
al. [6] which inspired our work. In another work Puddu et
al. [37] present mutable transactions for blockchains where in
their system all transactions are encrypted and mutation means
that the respective decryption key is not provided anymore by
validators. Mutations are subject to access-control policies, but
all the mechanisms are not cryptographic in nature.
Ferrara et al. [22] discuss cryptographically enforced role-
based access control (cRBAC) with the aim of introducing a
precise syntax for a computational version of RBAC as well
as rigorous deﬁnitions for cryptographic policy enforcement
of a large class of RBAC security policies. They also show
that an implementation of RBAC based on key-policy and
ciphertext-policy attribute-based encryption (KP-ABE and CP-
ABE, respectively) meets their security notions. Although their
work has a totally different focus than ours, it shows that the
use of attribute-based encryption is a good choice in realizing
secure access control that meets real-world needs.
Damg˚ard et al. [21] introduced a primitive denoted as
Access Control Encryption (ACE), which was later extended
in [7], [29]. It allows a central party (called the sanitizer) to
control for a set of parties which party is allowed to receive and
send which message to other parties. This sanitizer processes
all the messages and thereby enforces access-control policies.
3
Although related (in that access-control policies need to be
enforced), this primitive is not helpful in our setting.
Correctness is straightforward and given in the full version
of this paper.
C. Preliminaries and Notation
We use κ to denote the security parameter and we use
sans-serif letters, e.g., A, B, to denote algorithms. If not stated
otherwise, all algorithms are required to run in probabilistic
polynomial time (PPT), i.e., their running time can be bounded
by a polynomial in their input length. Furthermore, all algo-
rithms return a special symbol ⊥ on error. By y ← A(1κ, x),
we denote that y is assigned the output of the potentially
probabilistic algorithm A on input x and and fresh random
coins. We assume 1κ to be an implicit input to all algorithms.
If ∀c∃κ0∀κ ≥ κ0 : |f (κ)| ≤ 1/κc for a function f, then we
say f is negligible. For algorithms representing adversaries in
the security experiments we use calligraphic letters, e.g., A.
Furthermore, we assume that all oracles deﬁned within security
experiments return ⊥, as soon as any of the internally executed
algorithms returns ⊥. This allows for a more compact notation.
Finally, similar to our notation in the context of algorithms, we
use y ←$ S to denote that an element is sampled uniformly at
random from a ﬁnite set S and assigned to y.
II. CRYPTOGRAPHIC BUILDING BLOCKS
In this section, we provide some background including
collision-resistant hashing, ciphertext-policy attribute-based
encryption (CP-ABE), introduce the notion of access structures
that are associated to ciphertexts in CP-ABE formally and
discuss how to encode such access structures. Then, we recall
(and strengthen) chameleon-hashes with ephemeral trapdoors,
which we require as an ingredient to our main construction.
Deﬁnition 1 (Access Structure). Let U denote the universe of
attributes. A collection A ∈ 2
U \ {∅} of non-empty sets is an
access structure on U. The sets in A are called the authorized
sets, and the sets not in A are called the unauthorized sets. A
collection A ∈ 2
U \ {∅} is called monotone if ∀ B, C ∈ A : if
B ∈ A and B ⊆ C, then C ∈ A.
Attribute-Based Encryption. Let us recall the description of
a CP-ABE scheme.
Deﬁnition 2 (CP-ABE). A ciphertext-policy attribute-based
encryption (CP-ABE) scheme is a tuple (SetupABE, KGenABE,
EncABE, DecABE) of PPT algorithms:
SetupABE(1κ) : Takes as input a security parameter κ in
unary and outputs a master secret and public key
(mskABE, mpkABE). We assume that all subsequent al-
gorithms will implicitly receive the master public key
mpkABE as input which implicitly ﬁxes a message and
attribute space M and U, respectively.
KGenABE(mskABE, S) : Takes as input the master secret key
mskABE and a set of attributes S ⊆ U and outputs a
secret key skS.
EncABE(M, A) : Takes as input a message M ∈ M and an
access structure A and outputs a ciphertext C.
DecABE(skS, C) : Takes as input a secret key skS and a cipher-
text C and outputs a message M or ⊥ in case decryption
does not work.
4
Security of CP-ABE. In the following, we recall IND-CCA2
security for CP-ABE (where we explicitly model key handles,
cf. [30]).
(κ):
A,ABE
ExpIND-CCA2
(mskABE, mpkABE) ← SetupABE(1κ)
b ← {0, 1}
Q,S ← ∅, i ← 0
(m0, m1, A∗, state) ← AO(mpkABE)
ABE(·,·)}
(cid:48)
where O ← {KGen
ABE(mskABE,·), KGen
(cid:48)
ABE(mskABE,·),
(cid:48)(cid:48)
and KGen
and KGen
and Dec
ABE(mskABE,·) on input S:
(cid:48)
ABE(mskABE,·) on input S:
(cid:48)(cid:48)
Dec
return KGenABE(mskABE, S) and set S ← S ∪ S
ssk ← KGenABE(mskABE, S) and set Q ← Q ∪ {(i, ssk)}
i ← i + 1
return ⊥, if (j, ssk) /∈ Q for some ssk
return DecABE(ssk, c)
ABE(·,·) on input j, c:
(cid:48)
else c∗ ← EncABE(mb, A∗)
ABE(mskABE,·),KGen(cid:48)(cid:48)(cid:48)(cid:48)
if m0, m1 /∈ M ∨ |m0| (cid:54)= |m1| ∨ A∗ ∩ S (cid:54)= ∅, let c∗ ← ⊥
b∗ ← AKGen(cid:48)(cid:48)(cid:48)
ABE(·,·)(c∗, state)
where KGen
ABE(mskABE,·),Dec(cid:48)(cid:48)
ABE(mskABE,·) on input S:
(cid:48)(cid:48)(cid:48)
and KGen
ABE(mskABE,·) on input S:
(cid:48)(cid:48)(cid:48)(cid:48)
return ⊥, if S ∈ A∗
return KGenABE(mskABE, S)
let ssk ← KGenABE(mskABE, S) and set Q ← Q ∪ {(i, ssk)}
i ← i + 1
return ⊥, if (j, ssk) /∈ Q for some ssk ∨ c = c∗
return DecABE(ssk, c)
ABE(·,·) on input j, c:
(cid:48)(cid:48)
and Dec
if b∗ = b return 1, else return 0
Fig. 1: ABE IND-CCA2 Security
Deﬁnition 3 (IND-CCA2-Security of CP-ABE). Let the ad-
vantage of an adversary A in the IND-CCA2 experiment
ExpIND-CCA2
(κ) be:
A,ABE
AdvIND-CCA2
A,ABE
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:12)(cid:12)(cid:12) .
(cid:105) − 1/2
(κ) :=
ExpIND-CCA2
A,ABE
(κ) = 1
We call a CP-ABE scheme ABE is IND-CCA2 secure if
AdvIND-CCA2
(κ) is a negligible function in κ for all PPT
adversaries A.
A,ABE
[28]
Monotone Span Programs. Monotone span programs
(MSP)
(or, essentially linear secret-sharing schemes
(LSSS) [11]) consist of an integer matrix M which encodes
monotone access structures. Monotone access structures are
often represented as Boolean formulas over attributes with
AND and OR operators and input attributes satisfy the formula
if it evaluates to 1. Another way of representing such formulas
is to think of access trees. In such a tree, the leafs form
the input attributes while inner nodes are associated with the
operators AND and OR. In the full version [34, Appendix G]
of [35], Lewko and Waters describe an easy way to transform
Boolean formulas with AND and OR operators into MSP (or,
LSSS) matrices M (this transform is also used in the ABE
scheme FAME by Agrawal and Chase [1] that we chose as
a core building block for our instantiation in Section IV-D).
Essentially, the encoding is as follows. The sharing vector of
the LSSS matrix is (1, 0, . . . , 0) and the root of the tree is
labeled with vector (1). Further, let l be a counter variable
set to 0 in the beginning. We now go recursively down the
tree levels. If the node is an AND operator, label one of
the two children with (v||1), where v is the label of the
AND node padded with 0s to length l and || denotes the
concatenation. The other child is labeled with length-(l + 1)
vector (0, . . . , 0,−1) and l is increased afterwards. If the node
is an OR operator, label both children with v and do not
increase l. Next, go on to the next node. Once labeling is
completed, we now collect the labels of the leaf (i.e., attribute)
nodes one-by-one to form the rows of the matrix M. If there
are empty matrix entries, ﬁll them with 0s. The rows of M
are associated with a function π that maps the row number
to the corresponding attribute. The output of the encoding is
(M, π). Note that we assume a canonical encoding of the
access structure A and the tree s.t. computing M from a given
A is deterministic. Decoding (M, π) works as follows. Let S
be a set of attributes. For π(i) ∈ S there exist coefﬁcients
π(i)∈S λi(M)i = (1, 0, . . . , 0),
where (M)i is the i-th row of M. The output of decoding is
the list (λi)π(i)∈S.
λi ∈ {0, 1,−1} such that (cid:80)
Chameleon-Hashes. Subsequently, we recall chameleon-
hashes using the notion from Camenisch et al. [16].
Deﬁnition 4 (Chameleon-Hashes). A chameleon-hash CH with
message space M consists of ﬁve algorithms (PPGenCH,
KGenCH, HashCH, VerifyCH, AdaptCH), such that:
PPGenCH(1κ). The algorithm PPGenCH, on input security
parameter κ in unary, outputs public parameters PPch.
For brevity, we assume that PPch is an implicit input to
all other algorithms.
KGenCH(PPch). The algorithm KGenCH, given the public
parameters PPch, outputs the secret and public key
(skCH, pkCH).
HashCH(pkCH, m). The algorithm HashCH gets as input the
public key pkCH and a message m ∈ M, and outputs a
hash h and randomness r.
VerifyCH(pkCH, m, r, h). The deterministic algorithm VerifyCH
gets as input the public key pkCH, a message m, ran-
domness r, and hash h. It outputs a decision d ∈ {0, 1}
indicating whether the hash h is valid.
AdaptCH(skCH, m, m(cid:48), r, h). The algorithm AdaptCH, on input
of the secret key skCH, message m, randomness r, hash
h, and a additional message m(cid:48), outputs randomness r(cid:48).
Note that we assume that the AdaptCH algorithm always
veriﬁes if the hash it is given is valid, and outputs ⊥ otherwise.
Correctness. Correctness is straightforward and given in the
full version of this paper. Note that the randomness is drawn by
HashCH, and not outside. The intention is to capture “private-
coin” constructions [6]. We provide the security notions in
Appendix A1 and stress that we rely on the notions from [16]
with the exception that we provide a stronger form of indis-
tinguishability, where the adversary is even allowed to know
the secret key.
CHs with Ephemeral Trapdoors. We recall the notion of cha-
meleon-hashes with ephemeral trapdoors (CHET) from [16].
This primitive is a variant of a chameleon-hash where, in
addition to the long-term trapdoor, another ephemeral trapdoor
(chosen during hashing) is required to compute collisions.
Deﬁnition 5 (Chameleon-Hashes with Ephemeral Trapdoors).
A chameleon-hash with ephemeral trapdoors CHET for mes-
sage space M is a tuple of ﬁve algorithms (PPGenCHET,
KGenCHET, HashCHET, VerifyCHET, AdaptCHET), such that:
PPGenCHET(1κ) : On input security parameter κ in unary, this
algorithm outputs the public parameters PP. We assume
that they implicitly deﬁne the message space M.
KGenCHET(PP) : On input the public parameters PP, this al-
gorithm outputs the long-term key pair (skCHET, pkCHET).
HashCHET(pkCHET, m) : On input the public key pkCHET and a
message m, this algorithm outputs a hash h, correspond-
ing randomness r, as well as the ephemeral trapdoor etd.
VerifyCHET(pkCHET, m, h, r) : On input the public key pkCHET,
a message m, a hash h, and randomness r, this algorithm
outputs a bit b.
AdaptCHET(skCHET, etd, m, m(cid:48), h, r) : On input
secret key
skCHET, ephemeral trapdoor etd, a message m, a message
m(cid:48), hash h, randomness r, and trapdoor information etd,
this algorithm outputs randomness r(cid:48).
Note that we assume that the AdaptCHET algorithm always
veriﬁes if the hash it is given is valid, and outputs ⊥ otherwise.
Correctness. Correctness is straightforward and given in the
full version of this paper.
For
security, chameleon-hashes with ephemeral
trap-
doors are required to be indistinguishable, publicly collision-