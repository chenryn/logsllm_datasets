# Confidence2020 CTF KVM
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前置知识
参考链接：  
以及resery师傅的博客：
## 题目分析
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int result; // eax
      int errno_kvm; // eax
      int errno_create_kvm; // eax
      int errno_set_user_memory; // eax
      int errno_create_vcpu; // eax
      int errno_set_regs; // eax
      int errno_get_sregs; // eax
      int errno_set_sregs; // eax
      __u32 exit_reason; // eax
      unsigned int code_size; // [rsp+Ch] [rbp-8274h]
      int kvmfd; // [rsp+10h] [rbp-8270h]
      int vmfd; // [rsp+14h] [rbp-826Ch]
      int vcpu; // [rsp+18h] [rbp-8268h]
      int v16; // [rsp+1Ch] [rbp-8264h]
      char *aligned_guest_mem; // [rsp+20h] [rbp-8260h]
      size_t vcpu_mmap_size; // [rsp+28h] [rbp-8258h]
      kvm_run *run_mem; // [rsp+30h] [rbp-8250h]
      __int64 v20; // [rsp+38h] [rbp-8248h]
      __int64 v21; // [rsp+40h] [rbp-8240h]
      __int64 v22; // [rsp+48h] [rbp-8238h]
      __u64 v23; // [rsp+50h] [rbp-8230h]
      __u64 v24; // [rsp+58h] [rbp-8228h]
      __int64 v25; // [rsp+60h] [rbp-8220h]
      __int64 v26; // [rsp+68h] [rbp-8218h]
      __int64 v27; // [rsp+70h] [rbp-8210h]
      kvm_userspace_memory_region region; // [rsp+80h] [rbp-8200h]
      kvm_regs guest_regs; // [rsp+A0h] [rbp-81E0h]
      kvm_sregs guest_sregs; // [rsp+130h] [rbp-8150h]
      char guest_mem[32776]; // [rsp+270h] [rbp-8010h]
      unsigned __int64 v32; // [rsp+8278h] [rbp-8h]
      __int64 savedregs; // [rsp+8280h] [rbp+0h]
      v32 = __readfsqword(0x28u);
      memset(guest_mem, 0, 0x8000uLL);
      aligned_guest_mem = &guest_mem[4096LL - ((&savedregs + 0x7FF0) & 0xFFF)];// 
                                                    // 这里的功能是让aligned_guest_mem取整
                                                    // 举个例子就是假如guest_mem的起始地址为0x7fffffff5c50
                                                    // 让他取整就是取到0x7fffffff6000
      code_size = -1;
      read_n(4LL, &code_size);                      // 这里需要输入的字符转成对应的数字需要小于0x4000,所以说输入的就应该是\x00\x40\x00\x00
      if ( code_size <= 0x4000 )
      {
        read_n(code_size, aligned_guest_mem);       // 如果按照上面咱们输入的\x00\x40\x00\x00的话,咱们就需要输入0x4000个字符
                                                    // 然后这些字符存储到aligned_guest_mem中
        kvmfd = open("/dev/kvm", 0x80002);
        if ( kvmfd < 0 )
        {
          errno_kvm = open("/dev/kvm", 0x80002);
          kvmfd = errno_kvm;
          err(errno_kvm, "fail line: %d", 40LL);
        }
        // 0xAE01 : KVM_CREATE_VM
        vmfd = ioctl(kvmfd, 0xAE01uLL, 0LL);        // 创建虚拟机，获取到虚拟机句柄
        if ( vmfd < 0 )
        {
          errno_create_kvm = ioctl(kvmfd, 0xAE01uLL, 0LL);
          vmfd = errno_create_kvm;
          err(errno_create_kvm, "fail line: %d", 43LL);
        }
        region.slot = 0LL;
        region.guest_phys_addr = 0LL;
        region.memory_size = 0x8000LL;
        region.userspace_addr = aligned_guest_mem;
        // 0x4020ae46 : KVM_SET_USER_MEMORY_REGION
        if ( ioctl(vmfd, 0x4020AE46uLL, &region) < 0 )// 为虚拟机映射内存,还有其他的PCI,信号处理的初始化
        {
          errno_set_user_memory = ioctl(vmfd, 0x4020AE46uLL, &region);
          err(errno_set_user_memory, "fail line: %d", 52LL);
        }
        // 0xae41 : KVM_CREATE_VCPU
        vcpu = ioctl(vmfd, 0xAE41uLL, 0LL);         // 创建vCPU
        if ( vcpu < 0 )
        {
          errno_create_vcpu = ioctl(vmfd, 0xAE41uLL, 0LL);
          vcpu = errno_create_vcpu;
          err(errno_create_vcpu, "fail line: %d", 55LL);
        }
        // 0xAE04uLL : KVM_GET_VCPU_MMAP_SIZE
        vcpu_mmap_size = ioctl(kvmfd, 0xAE04uLL, 0LL);// 为vCPU分配内存空间
        run_mem = mmap(0LL, vcpu_mmap_size, 3, 1, vcpu, 0LL);
        memset(&guest_regs, 0, sizeof(guest_regs));
        guest_regs._rsp = 0xFF0LL;
        guest_regs.rflags = 2LL;
        // 0x4090ae82 : KVM_SET_REGS
        if ( ioctl(vcpu, 0x4090AE82uLL, &guest_regs) < 0 )// 设置寄存器
        {
          errno_set_regs = ioctl(vcpu, 0x4090AE82uLL, &guest_regs);
          err(errno_set_regs, "fail line: %d", 66LL);
        }
        // 0x8138AE83uLL : KVM_GET_SREGS
        if ( ioctl(vcpu, 0x8138AE83uLL, &guest_sregs) < 0 )// 获取特殊寄存器
        {
          errno_get_sregs = ioctl(vcpu, 0x8138AE83uLL, &guest_sregs);
          err(errno_get_sregs, "fail line: %d", 69LL);
        }
        v20 = 0x7000LL;
        v21 = 0x6000LL;
        v22 = 0x5000LL;
        v23 = 0x4000LL;
        *(aligned_guest_mem + 0xE00) = 3LL;         // 设置4级页表,因为cr0对应的第31位的值为1,所以说开启了分页机制所以就需要设置4级页表
                                                    // 这里看了一眼汇编代码这里虽然加的是0xe00,但是对应汇编代码加的还是0x7000
        *&aligned_guest_mem[v20 + 8] = 0x1003LL;
        *&aligned_guest_mem[v20 + 16] = 0x2003LL;
        *&aligned_guest_mem[v20 + 24] = 0x3003LL;
        *&aligned_guest_mem[v21] = v20 | 3;
        *&aligned_guest_mem[v22] = v21 | 3;
        *&aligned_guest_mem[v23] = v22 | 3;
        v25 = 0LL;
        v26 = 0x1030010FFFFFFFFLL;
        v27 = 0x101010000LL;
        guest_sregs.cr3 = v23;
        guest_sregs.cr4 = 32LL;
        guest_sregs.cr0 = 0x80050033LL;