To see a shortened summary of the exported components, use the app.package .attacksurface module, shown
here:
dz> run app.package.attacksurface com.mwr.example.sieve
Attack Surface:
3 activities exported
0 broadcast receivers exported
2 content providers exported
2 services exported
is debuggable
The rest of this chapter explores each of these application components (in addition to many other aspects of the
application’s security).
Exploiting Activities
Activities are the graphical user interface of an application for the user. As such, they control the user input into
functionality and have a direct impact on the security of an application. An application typically contains many
different activities. Some may be exported and others may only be intended to be started by other code inside
the same application and not directly exported.
Consider an application that has a login activity. This activity and its underlying code are responsible for
checking whether the correct password is entered. According to this check, the code may launch another activity
with authenticated content and functionality.
Unprotected Activities
What if the developer exported all the activities, including the ones that provide authenticated functionality?
This means that another application on the device, or a user interacting with the device, will be able to launch
the authenticated activity directly.
Examining all the activities exported by the Sieve application reveals the following:
dz> run app.activity.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
com.mwr.example.sieve.FileSelectActivity
Permission: null
com.mwr.example.sieve.MainLoginActivity
Permission: null
com.mwr.example.sieve.PWList
Permission: null
This shows three exported activities that do not require any permissions from the caller to be interacted with.
The main activity of an application has to be exported so that it can be started when the launcher icon is clicked.
It always has an intent filter that looks as follows:
You can find this activity by examining the manifest of the application or using the app.package.launchintent
module. Here is the latter method:
dz> run app.package.launchintent com.mwr.example.sieve
Launch Intent:
Action: android.intent.action.MAIN
Component:
{com.mwr.example.sieve/com.mwr.example.sieve.MainLoginActivity}
Data: null
Categories:
- android.intent.category.LAUNCHER
Flags: [ACTIVITY_NEW_TASK]
Mime Type: null
Extras: null
When a user has opened Sieve previously, launching the application shows an activity requesting the user’s PIN.
This leaves you with two other exported activities that can be started. Systematically invoke each exported
activity using drozer and the app.activity.start module as follows:
dz> run app.activity.start --component  
In the case of the PWList activity in the Sieve application, the following command opens the exported activity:
dz> run app.activity.start --component com.mwr.example.sieve
com.mwr.example.sieve.PWList
This reveals all the accounts held by the password manager without having to enter the PIN. Figure 7.3 shows
the launched activity.
Figure 7.3 Exported activity that leads to the disclosure of all accounts within Sieve
This direct authentication bypass of this application occurs by invoking one command. In addition to simply
starting each exposed activity, you should review the onCreate() method of each in search of conditional
statements that may lead to other code paths or unexpected behavior. You can never know what kinds of Easter
eggs are hiding in this method that could cause the application to perform an action that is completely out of
character, like taking one of the parameters from the intents and using it as part of an operating system
command that it executes. You may think that this is unlikely and contrived, but through your adventures with
reversing and bug hunting on Android you will see stranger things.
NOTE ABOUT ACTIVITY ALIASES
In the Android manifest it is possible to declare an . This acts like a proxy to another
activity that has already been defined in the same application. The activity that the alias represents is
defined by the android:targetActivity attribute in the  tag. An example of this
declaration is shown here:
The interesting thing about aliases is that they can also allow access to activities that are not exported.
Access to the target activity depends on how the alias is exported, which can be done explicitly or through
the use of intent filters. When using the app.activity.info module in drozer, an activity alias can be
spotted by the extra entry stating the Target Activity. A ficticious example output of the app
.activity.info module if Sieve used the previously defined activity alias is shown here:
dz> run app.activity.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
...
com.mwr.example.sieve.AliasTest
Permission: null
Target Activity: com.mwr.example.sieve.WelcomeActivity
...
Activities are also capable of sending information back to the caller when they finish(). This can be done by
using the setResult()function, which can contain an intent with any information that the activity wants to send
back to the caller. If the calling application started the activity using startActivityForResult()rather than
startActivity()then the intent received from the started activity can be caught inside the overridden
onActivityResult()callback. Checking whether an activity sends a result back is as simple as checking for the
existence of the keyword setResult in the activity’s code.
Because activities that are not exported can still be started by a privileged user, a user who has privileged access
to a device can use this access to perform all kinds of authentication bypass tricks on installed applications. This
attack vector may be limited due to this requirement but will be explored anyway. To find the activities that are
not exported by an application, you can examine the manifest or use the -u flag on the app.activity.info
module. For example, on the Sieve application the output is as follows:
dz> run app.activity.info -a com.mwr.example.sieve -u
Package: com.mwr.example.sieve
Exported Activities:
com.mwr.example.sieve.FileSelectActivity
Permission: null
com.mwr.example.sieve.MainLoginActivity
Permission: null
com.mwr.example.sieve.PWList
Permission: null
Hidden Activities:
com.mwr.example.sieve.SettingsActivity
Permission: null
com.mwr.example.sieve.AddEntryActivity
Permission: null
com.mwr.example.sieve.ShortLoginActivity
Permission: null
com.mwr.example.sieve.WelcomeActivity
Permission: null
com.mwr.example.sieve.PINActivity
Permission: null
After examining the application’s behavior and code further, an interesting activity for an attacker to start would
be the SettingsActivity. This activity allows the attacker to get to the Settings menu and conveniently back up
the password database to the SD card. To launch this activity from a root ADB shell, use the following
command:
root@generic:/ # am start -n com.mwr.example.sieve/.SettingsActivity
Starting: Intent { cmp=com.mwr.example.sieve/.SettingsActivity }
The fact that an activity is not exported means only that it cannot be interacted with by a non-privileged caller.
To protect against this, an additional authentication mechanism could be used on the Sieve application. Chapter
9 covers how additional protections can be put in place.
REAL-WORLD EXAMPLE: CVE-2013-6271 REMOVE DEVICE LOCKS FROM ANDROID
4.3 OR EARLIER
On November 27, 2013, Curesec (http://www.curesec.com) disclosed a vulnerability on its blog that
allowed the lock screen to be cleared without the appropriate user interaction on Android devices prior to
version 4.4. The vulnerability existed in the com.android.settings.ChooseLockGeneric class that handled
whether a screen lock is enabled or not and which type to use (pin, password, gesture, and so on). A code
path was discovered in this activity that can be reached by sending an intent from any application that
completely disables the lock screen mechanism.
You can exploit this vulnerability from ADB as follows:
shell@android:/ $ am start -n com.android.settings/com.android.settings.
ChooseLockGeneric --ez confirm_credentials false --ei lockscreen.password_
type 0 --activity-clear-task
Starting: Intent { flg=0x8000 cmp=com.android.settings/.ChooseLockGeneric
(has extras) }
Figure 7.4 shows a device’s lock before and after the preceding command is executed.
This vulnerability can be exploited from any application on the device and does not depend on any
prerequisites.
Figure 7.4 Device lock screen requiring a password and then this being removed after the exploit is run
Tapjacking
On December 9, 2010, Lookout discussed an attack vector named tapjacking at
https://blog.lookout.com/look-10-007-tapjacking/. This is essentially the mobile equivalent of the
clickjacking web vulnerability (also known as UI redressing). Tapjacking is when a malicious application
overlays a fake user interface over another application’s activity to trick users into clicking on something they
did not intend to.
This is possible using a UI feature called toasts. Toasts are usually used to display small pieces of information to
the user without the ability for the user to interact with it. It is meant to be non-intrusive and transparently
overlays any activity that the user has open at that time. However, these toasts can be completely customized
and made to fill the entire screen with a design that makes it look like a proper activity. The dangerous part is
that if the user attempts to click on something on this new “activity,” their input still gets received by the activity
that is beneath the toast. This means that it is possible to trick a user into clicking on part of an activity that is
not visible. How effective this attack is depends on the creativity of the attacker.
An overoptimistic example of performing this attack may be for a malicious application to open the Play Store
activity and trick the user into installing an application. Remember that any application can start an exported
activity and all launcher activities of installed applications are exported due to their intent filters. The attacker’s
application may open the Play Store and then immediately initiate a sequence of custom toasts that display a
game to the user, or some sequence of screen taps that the user needs to perform in order to exit the “user
interface” or “win the game.” All the while, the placement of each item ensures the user’s taps are performing
actions on the Play Store in the background. Figure 7.5 illustrates how the placement of fictitious clickable items
could be used to install a new application.
Figure 7.5 An illustration of how a toast could be used to perform unintended actions on underlying activities
Testing for this issue in your application can be done using a proof-of-concept application created by Caitlin
Harrison of MWR InfoSecurity. It allows you to configure a customized toast that gets displayed on the screen
at a specified position. This code runs in a service in the background and allows you to navigate to your target
application and test whether you can still interact with the underlying activities of the application while the
toast is being displayed. This application can be downloaded from https://github.com/mwrlabs/tapjacking-
poc.
Searching the application’s Dalvik Executable (classes.dex) and application resources for instances of the word
filterTouchesWhenObscured may also indicate that the activities being tested are not vulnerable to this attack.
Chapter 9 explores more on securing an activity against this type of attack.
NOTE
Some device vendors have mitigated tapjacking at an OS level. For instance, Samsung devices running
Android versions Ice Cream Sandwich and later do not allow any touches to reach an underlying activity
when there is a toast present on the screen, regardless of whether the filterTouchesWhenObscured
attribute is set or not.
Recent Application Screenshots
Android stores a list of recently used applications, shown in Figure 7.6, that can be accessed by long-clicking the
home button.
Figure 7.6 The recent applications being shown on a device
The thumbnails associated with each of these entries are a screenshot of the last activity shown before the
application was closed. Depending on the application, this could display sensitive information to an attacker
who has compromised the device and has privileged access. These thumbnails are not stored on disk like on iOS
and can only be retrieved from memory by an attacker with privileged access. You can find the particular class
that stores these screenshots in the Android source at
https://github.com/android/platform_frameworks_base/blob/master/services/java/com/android/server/am/TaskRecord.java0
and it extends the class found at https://github.com/gp-
b2g/frameworks_base/blob/master/services/java/com/android/server/am/ThumbnailHolder.java.
Allowing the OS to take application screenshots of activities is somewhat of a low-risk issue but may be
important depending on the sensitivity of the information displayed by an application. Chapter 9 provides
techniques for stopping activities from displaying sensitive information in these screenshots.
Fragment Injection
An activity can contain smaller UI elements named fragments. They can be thought of as “sub activities” that
can be used to swap out sections of an activity and help facilitate alternate layouts for different screen sizes and
form factors that an Android application can run on.
On December 10, 2013, Roee Hay from IBM Security Systems publicized a vulnerability that affected all
applications with exported activities that extend the PreferenceActivity class. In the onCreate() method of the
PreferenceActivity class, it was discovered to be retrieving an extra named :android:show_fragment from the
user-supplied bundle. This extra can be provided by the application that sent the intent and the name of a
fragment within the target application specified to be loaded. This allows the loading of any chosen fragment
within the activity, which may have only been used inside non-exported activities under normal use. This may
reveal functionality that was not intended by the developer.
All exported activities that extend PreferenceActivity and are running on Android 4.3 or prior are vulnerable.
This attack was mitigated by Android in versions 4.4 onward by providing a new method in the
PreferenceActivity class named isValidFragment() to allow developers to override it and validate which
fragments can be loaded inside the activity. Performing poor validation on the fragment name supplied to this
method or simply returning true in this method without performing any checks would still result in fragment
injection attacks being possible. More information on how to implement correct checking is given in Chapter 9.
REAL-WORLD EXAMPLE: CHANGE PIN CODE ON DEVICE WITHOUT PROVIDING THE
EXISTING ONE
Roee Hay demonstrated the fragment injection vulnerability that existed in the standard Android Settings
application. It was possible to use a crafted intent to invoke the Settings activity and provide the
ChooseLockPassword$ChooseLockPasswordFragment fragment as an argument. This particular fragment
allows the user to change the device’s PIN without providing the existing one. Starting the vulnerable
activity with the following intent from drozer initiates this attack and allows you to change the PIN on a
device running Android 4.3 or earlier.
dz> run app.activity.start --component com.android.settings
com.android.settings.Settings --extra string :android:show_fragment
com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment --extra boolean
confirmcredentials false
After tapping the Back button once, you will see an activity that looks like Figure 7.7 where you can specify
a new PIN code for the device.
Figure 7.7 Fragment loaded inside the Settings activity that allows the PIN to be changed without
providing the existing one
Trust Boundaries
Android application components are very modular and can be controlled from any part of the application code
using intents. This means that no default boundaries exist between any sections of the code. When you consider
an application that has a login screen, controlling access to functionality that is only supposed to be accessible to
a “logged in” user is completely dependent on how the application was designed. Developers have the freedom
to implement authentication mechanisms in any way they want.
Sieve contains an example of a failed trust boundary in the main login activity. A user who has not entered his
password yet to log in to the application can still access the settings, as shown in Figure 7.8.
Figure 7.8 Sieve allows the Settings activity to be opened without logging in
This Settings menu contains features that will allow an attacker to compromise the password database without
ever knowing the application’s password. This functionality was clearly only intended to be used once the user