#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#size_alignment}大小协调
`parted`{.literal} 工具可让您使用多个不同的后缀指定分区大小：
::: variablelist
[MiB、GiB 或 TiB]{.term}
:   大小为 2 的指数代表。
    ::: itemizedlist
    -   分区的起点与根据大小指定的扇区一致。
    -   结束点与指定大小减 1 扇区一致。
    :::
[MB、GB 或 TB]{.term}
:   以 10 的指数表示容量。
    起始和结束点在指定单元的一半内一致：例如,使用 MB 后缀时 ±500KB。
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#ref_comparison-of-partition-table-types_assembly_creating-a-partition-table-on-a-disk}分区表类型比较 {.title}
:::
本节比较您可以在块设备中创建的不同类型的分区表的属性。
::: table
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531398851040}
**表 3.1. 分区表类型**
::: table-contents
  分区表               最多分区数                                                  最大分区大小
  -------------------- ----------------------------------------------------------- --------------
  主引导记录（MBR）    4 个主分区，或 3 个主分区和一个扩展分区中的 12 个逻辑分区   2TiB
  GUID 分区表（GPT）   128                                                         8ZiB
:::
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#mbr-disk-partitions_assembly_creating-a-partition-table-on-a-disk}MBR 磁盘分区 {.title}
:::
本章图表显示分区表与实际磁盘分开。但这并不完全准确。实际上，分区表被保存在磁盘的最开始，并在任何文件系统或用户数据之前。为了简洁，下图将它们分开。
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531398827968}
**图 3.1. 有 MBR 分区表的磁盘**
::: figure-contents
::: mediaobject
![未使用的分区驱动器](images/unused-partitioned-drive.png)
:::
:::
:::
如上图所示，分区表被分为四节（四个主分区）。主分区是在硬盘中只能包含一个逻辑驱动器（或部分）的分区。每个部分都可以保存定义单个分区所需的信息，即分区表只能定义四个分区。
每个分区表条目包含分区的几个重要特征：
::: itemizedlist
-   磁盘上分区开始和结束的地方。
-   分区是否
    [**活跃**]{.strong}。只能有一个分区被标记为[**活跃**]{.strong}分区。
-   分区的类型。
:::
起点和结束点定义了分区的大小和在磁盘中的位置。\"active（活跃）\"标志是被某些操作系统引导装载程序使用。换句话说，位于被标记为\"活跃\"的分区中的操作系统会被引导。
类型是一个数字，用于识别分区预定的用法。某些操作系统使用分区类型表示特定的文件系统类型，将分区标记为与特定操作系统关联的分区，表示该分区包含可引导的操作系统，或者三个操作系统的某种组合。
下图显示了含有单一分区的驱动器示例：
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531398815008}
**图 3.2. 只有一个分区的磁盘**
::: figure-contents
::: mediaobject
![dos 单个分区](images/dos-single-partition.png)
:::
:::
:::
这个例子里的单个分区被标记为
`DOS`{.literal}。这个标签显示分区类型，`DOS`{.literal}
是最常见的分区类型之一。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#extended-mbr-partitions_assembly_creating-a-partition-table-on-a-disk}扩展 MBR 分区 {.title}
:::
如果四个分区不足，您可以使用扩展分区来创建额外的分区。您可以把分区类型设置为\"Extended\"来达到此目的。
扩展分区本身就如同磁盘驱动器一样 -
它有自己的分区表，指向一个或多个分区（现在称为逻辑分区，而不是四个主分区），它完全包含在扩展的分区中。下图显示了一个带有一个主分区的磁盘驱动器，另一个扩展分区包含两个逻辑分区（以及一些未分区的可用空间）：
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531398806544}
**图 3.3. 带主和扩展 MBR 分区的磁盘**
::: figure-contents
::: mediaobject
![扩展分区](images/extended-partitions.png)
:::
:::
:::
如图表中所暗示,主分区和逻辑分区之间有一个区别 -
主分区和扩展分区的数量只能是 4
个，但逻辑分区的数量没有固定限制。但是，由于在 Linux
中访问分区的方式，单个磁盘驱动器上无法定义超过 15 个逻辑分区。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#mbr-partition-types_assembly_creating-a-partition-table-on-a-disk}MBR 分区类型 {.title}
:::
下表显示了一些常用的 MBR 分区类型和用于代表它们的十六进制数字。
::: table
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531398799760}
**表 3.2. MBR 分区类型**
::: table-contents
  ----------------------------- ------------------- ----------------------------- -------------------
  [**MBR 分区类型**]{.strong}   [**值**]{.strong}   [**MBR 分区类型**]{.strong}   [**值**]{.strong}
  空                            00                  Novell Netware 386            65
  DOS 12-bit FAT                01                  PIC/IX                        75
  XENIX root                    O2                  Old MINIX                     80
  XENIX usr                     O3                  Linux/MINUX                   81
  DOS 16-bit ⇐32M               04                  Linux swap                    82
  Extended                      05                  Linux native                  83
  DOS 16-bit \>=32              06                  Linux extended                85
  OS/2 HPFS                     07                  Amoeba                        93
  AIX                           08                  Amoeba BBT                    94
  AIX bootable                  09                  BSD/386                       a5
  OS/2 Boot Manager             0a                  OpenBSD                       a6
  Win95 FAT32                   0b                  NEXTSTEP                      a7
  Win95 FAT32(LBA)              0c                  BSDI fs                       b7
  Win95 FAT16(LBA)              0e                  BSDI swap                     b8
  Win95 Extended (LBA)          0f                  Syrinx                        c7
  Venix 80286                   40                  CP/M                          db
  Novell                        51                  DOS access                    e1
  PRep Boot                     41                  DOS R/O                       e3
  GNU HURD                      63                  DOS secondary                 f2
  Novell Netware 286            64                  BBT                           ff
  ----------------------------- ------------------- ----------------------------- -------------------
:::
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#guid-partition-table_assembly_creating-a-partition-table-on-a-disk}GUID 分区表 {.title}
:::
GUID 分区表(GPT)是基于使用全局唯一标识符(GUID)的分区方案。GPT
的开发目的是弥补 MBR
分区表的限制，特别是对磁盘的最大可寻址存储空间的限制。MBR 无法寻址大于 2
TiB 的存储（等同于大约 2.2 TB）,而 GPT
可以用于大于这个存储限制的硬盘，其可寻址的最大磁盘大小为 2.2
ZiB。另外，GPT 默认支持创建最多 128
个主分区。这个号码可以通过为分区表分配更多空间来扩展。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
GPT 有基于 GUID 的分区类型。请注意，某些分区需要一个特定的
GUID。例如：EFI 引导装载程序的系统分区需要 GUID
`C12A7328-F81F-11D2-BA4B-00A0C93EC93B`{.literal}。
:::
GPT 磁盘使用逻辑块寻址(LBA)，分区布局如下：
::: itemizedlist
-   为了保持与 MBR 磁盘的向后兼容性，GPT 的第一个扇区(LBA 0)保留用于 MBR
    数据，它称为\"保护 MBR\"。
-   主 GPT 标头从设备的第二个逻辑块(LBA 1)开始。标头中包含磁盘
    GUID、主分区表的位置、从属 GPT 标头的位置、自身的 CRC32 checksum
    以及主分区表。它还指定表上的分区条目数目。
-   默认情况下，主 GPT 包括 128 个分区条目，每个条目大小为 128
    字节，其分区类型 GUID 和唯一分区 GUID。
-   二级 GPT 与主 GPT 相同。它主要用作恢复的备份表，以防主分区表损坏。
-   辅助 GPT 标头位于磁盘的最后一个逻辑扇区，在主标头损坏时可用于恢复
    GPT 信息。它包含磁盘 GUID、二级分区表和主 GPT 标头的位置、自身的
    CRC32 checksums 校验、从属分区表，以及可能的分区条目数目。
:::
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531398637120}
**图 3.4. 带有 GUID 分区表的磁盘**
::: figure-contents
::: mediaobject
![GPT 分区](images/gpt-partition.png)
:::
:::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
必须有一个 BIOS 引导分区才能成功安装引导装载程序到包含 GPT（GUID
分区表）的磁盘中。这包括 [**Anaconda**]{.strong}
初始化的磁盘。如果磁盘已经包含 BIOS 引导分区，则它可以被重复使用。
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#proc_creating-a-partition-table-on-a-disk-with-parted_assembly_creating-a-partition-table-on-a-disk}使用 parted 在磁盘中创建分区表 {.title}
:::
这个步骤描述了如何使用 `parted`{.literal} 工具格式化带有分区表的块设备。
::: orderedlist
**流程**
1.  启动交互式 `parted`{.literal} shell：
    ``` screen
    # parted block-device
    ```
    ::: itemizedlist
    -   使用您要创建分区表的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis}：例如
        `/dev/sda`{.literal}。
    :::
2.  确定该设备中是否已有一个分区表：
    ``` screen
    (parted) print
    ```
    如果设备已经包含分区，将在后续步骤中删除它们。
3.  创建新分区表：
    ``` screen
    (parted) mklabel table-type
    ```
    ::: itemizedlist
    -   用预期的分区表类型来替换
        [*[table-type]{.replaceable}*]{.emphasis}：
        ::: itemizedlist
        -   `msdos`{.literal} 用于 MBR
        -   `gpt`{.literal} 用于 GPT
        :::
    :::
    ::: example
    []{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531391912832}
    **例 3.2. 创建 GPT 表**
    ::: example-contents
    例如，要在磁盘中创建 GPT 表，请使用：
    ``` screen
    (parted) mklabel gpt
    ```
    :::
    :::
    输入此命令后，这些更改就会生效，因此在执行前请先重新检查。
4.  查看分区表以确认分区表是否存在：
    ``` screen
    (parted) print
    ```
5.  退出 `parted`{.literal} shell：
    ``` screen
    (parted) quit
    ```
:::
::: itemizedlist
**其它资源**
-   `parted(8)`{.literal} man page。
:::
::: itemizedlist
**后续步骤**
-   在该设备中创建分区。详情请查看
    ["创建分区"一节](#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_creating-a-partition_assembly_getting-started-with-partitions "创建分区"){.xref}。
:::
:::
:::
::: section
::: titlepage
# []{#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_creating-a-partition_assembly_getting-started-with-partitions}创建分区 {.title}
:::
作为系统管理员，您可以在磁盘上创建新分区。
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#con_considerations-before-modifying-partitions-on-a-disk_assembly_creating-a-partition}修改磁盘分区前的注意事项 {.title}
:::
本节列出了在创建、删除或重新定义分区大小前需要考虑的关键点。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本节不涵盖 DASD 分区表，它特定于 IBM Z 构架。有关 DASD 的详情请参考：
::: itemizedlist
-   [在 IBM Z 中配置 Linux
    实例](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_a_standard_rhel_installation/configuring-a-linux-instance-on-ibm-z_installing-rhel){.link}
-   IBM [知识库中您应该了解的
    DASD](https://www.ibm.com/support/knowledgecenter/linuxonibm/com.ibm.linux.z.lgdd/lgdd_c_dasd_know.html){.link}
    文章
:::
:::
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#the_maximum_number_of_partitions_2}分区的最大数量
设备中的分区数量受分区表类型的限制：
::: itemizedlist
-   [**在使用主引导记录(MBR)分区表格式化的设备中**]{.strong}，您可以使用：
    ::: itemizedlist
    -   最多四个主分区，或者
    -   最多有三个主分区，以及一个扩展分区，其中包括多个逻辑分区。
    :::
-   在使用 [**GUID 分区表(GPT)**]{.strong} 格式化的设备中，最多分区数为
    128。尽管 GPT 规范通过增大为分区表保留的区域来允许更多分区，但
    `parted`{.literal} 工具使用的常见做法是将其限制为 128 分区足够区域。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
[*红帽建议，除非您有其他原因，否则至少应创建以下分区*]{.emphasis} ：
`swap`{.literal}、`/boot/`{.literal} 和 `/`{.literal} (root)。
:::