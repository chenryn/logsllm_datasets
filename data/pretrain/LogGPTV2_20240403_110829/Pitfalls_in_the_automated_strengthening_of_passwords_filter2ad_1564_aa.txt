title:Pitfalls in the automated strengthening of passwords
author:David Schmidt and
Trent Jaeger
Pitfalls in the Automated Strengthening of Passwords
Department of Computer Science & Engineering
Department of Computer Science & Engineering
Trent Jaeger
Pennsylvania State University
PI:EMAIL
David Schmidt
Pennsylvania State University
PI:EMAIL
ABSTRACT
Passwords are the most common form of authentication for
computer systems, and with good reason: they are simple,
intuitive and require no extra device for their use. Unfortu-
nately, users often choose weak passwords that are easy to
guess. Various methods of helping users select strong pass-
words have been deployed, often in the form of requirements
for the minimum length and number of character classes to
use. Alternatively, a site could modify a user’s password in
order to make it more secure; strengthening algorithms have
been proposed that extend/modify a user-supplied password
until achieving suﬃcient strength. Researchers have sug-
gested that it may be possible to balance password strength
with memorability by limiting automated changes to one or
two characters while evaluating the generated passwords’
strength against known cracking algorithms. This paper
shows that passwords that were strengthened against the
best known cracking algorithms are still susceptible to at-
tack, provided the adversary knows the strengthening al-
gorithm. We propose two attacks: (1) by strengthening the
data sets with the known algorithm, which increases the per-
centage of recovered passwords by a factor of 2-5, and (2)
by a brute-force attack on the initial passwords and space of
possible changes, recovering all passwords produced when a
suﬃciently weak initial password was suggested. As a result,
we ﬁnd that the proposed strengthening algorithms do not
yet satisfy Kerckhoﬀs’s principle.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection—authentication
General Terms
Security, Passwords, Experimentation
Keywords
Password checking, Password creation policies
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
ACSAC ’13 December 9-13, 2013, New Orleans, Louisiana USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2523649.2523651
1.
INTRODUCTION
Passwords are the overwhelmingly predominant means for
user authentication on computer systems, with the choice of
password almost always left up to the user. The user is con-
fronted with two opposing goals: ﬁrst, the password should
be easy to remember (functionality) and second, the pass-
word should be hard for anyone else to guess (security). Un-
fortunately, users tend to underestimate the importance of
security, which makes their passwords susceptible to guess-
ing algorithms [4].
To motivate users to consider the security of their pass-
words, many websites utilize password meters to provide
feedback regarding the guessability of their passwords. Other
sites suggest alternative passwords that are closely related
to the original password, perhaps within 1 or 2 edits, and
that are judged to be adequately secure. Whatever mech-
anism is used, the metric used to gauge password strength
is clearly of the utmost importance.
If the metric overes-
timates the number of guesses required for an adversary to
learn a password, then the utility of the tool is compromised.
As a result, researchers and adversaries have long studied
the eﬀectiveness of password guessing techniques, whose re-
sults have subsequently been applied to guide users to choose
more secure passwords. A study over three decades ago iden-
tiﬁed several commonly used guessing techniques, such as
dictionary words, common proper nouns, and common num-
bers [19]. More recently, researchers have developed guess-
ing algorithms based on Markov chains [20] and probabilistic
context free grammars [26] (PCFGs), which take advantage
of non-uniformity in character sequences and the predictabil-
ity of password structures, respectively. Researchers have
adopted these algorithms as metrics for password strength.
Using estimated time to crack is arguably the only metric
of interest to the user as it directly answers the question of
“How secure is my password?”.
As a result, researchers have produced automated meth-
ods for improving password strength by inserting a small
number of characters into a user-selected password until the
strength exceeds a limit as measured by the PCFG guessing
algorithm [9, 10, 12]. For example, simple, user-chosen pass-
words, such as “life45!”, are changed automatically through
the addition and/or replacement of characters to passwords
such as “lifeˆ45!” whose strength against password guessing
surpasses a threshold using such metrics.
However, the claimed impact of a small number of changes
to formerly weak passwords raises concerns that we may be
overlooking possible vulnerabilities in such methods. This
paper illustrates that even when a sophisticated strength
129
metric is used, it is nonetheless possible that algorithmically
strengthened passwords are susceptible to attack. This is
particularly true if the number of changes made to the orig-
inal password is limited to one. In this case, the number of
possible alternatives to the user’s given password will be rel-
atively small and therefore, to some extent, the alternative
passwords will have some predictable properties.
For the purposes of this paper, it is assumed that an at-
tacker knows the strengthening algorithm or can determine
it from repeated use, analogous to Kerckhoﬀ’s principle.
Under this assumption, there are two basic ways in which
an attacker might proceed. First, the attacker might try
to build a library of passwords that are statistically simi-
lar to the strengthened passwords; this library could then
be used as the basis for a PCFG-based attack. Alterna-
tively, a guided brute force approach could be taken, with
the attacker guessing the original, weak password and then
trying all strengthened variants. The eﬃcacy of both ap-
proaches is investigated in this paper. It is shown that both
approaches can be highly eﬀective in guessing attacks, un-
less the strengthening algorithm is aware of its limitations
and takes some precautions.
This paper makes the following contributions:
• In Section 5.1.1, we demonstrate that an adversary
who trains a password cracking program on passwords
generated by applying the strengthening algorithm to
a publicly available password list increases the percent-
age of recoverable passwords by 2 to 5 times.
• Guided brute force guessing is analyzed in Section 5.2
and shown to be eﬀective and practical unless the user-
suggested passwords are required to meet an initial
strength threshold.
• The impact of leaking data used in password strength-
ening is evaluated in Section 5.1.2. We ﬁnd that the
leakage of the strengthening data typically retained
would enable an adversary to crack 25% of the pass-
words in less than a day. We ﬁnd that if we do not
store information about the system’s actual passwords,
leakage of the strengthening data provides adversaries
no advantage for recovering passwords, except for a
modest impact on the quality of strengthening.
The outline of this paper is as follows. In Section 2 and
Section 3, there is an introduction to state-of-the-art pass-
word crackers and a discussion of various approaches used
in password strengthening. Section 4 discusses the data and
the algorithms used to measure cracking time and adaptively
strengthen passwords. In Section 5, the eﬀectiveness of two
diﬀerent methods of cracking strengthened passwords is an-
alyzed. Lastly in Section 6, the results are summarized and
directions for future work are given.
2. BACKGROUND
It is well known that users tend to create weak passwords
[6, 28]. Adams and Sasse [2] point out that this is to be
expected as users are typically unaware of what makes a
password more secure. The net eﬀect is that the process
of systematically guessing a user’s password is made much
easier than naive statistical analysis would suggest, as the
space of the probable passwords is many orders of magnitude
smaller than the space of all possible passwords.
2.1 Markov Chains
Narayanan and Shmatikov [20] describe a password crack-
ing algorithm based on Markov models. This approach ex-
ploits the fact that the distribution of character sequences
within a language is far from uniform, and the distribution
of character sequences within passwords is likely to follow
this same distribution. For example, in English, ‘w’ is more
likely to be followed by ‘h’ than by another ‘w’. The concept
can be extended to character sequences of arbitrary length,
called n-grams; the 3-gram (or tri-gram) ‘thr’ is far more
likely to be followed by a vowel than by a consonant. By
training the Markov chain on known password lists, dictio-
naries, or both, these distributions can be estimated and
used to generate a list of possible passwords that is signiﬁ-
cantly more eﬀective than random guessing or the publicly
available John the Ripper program [22]. Password composi-
tion protocols such as requiring an uppercase letter, a digit
and a symbol in the password are meant to reduce the ef-
fectiveness of both Markov chains and dictionary attacks.
A more in-depth discussion of how Markov chains can be
applied to password cracking can be found in [18].
2.2 Probabilistic Context-Free Grammars
Weir et al. [26] proposed using a probabilistic context-free
grammar (PCFG) for password cracking. This algorithm is
based on the observation that passwords tend to have pre-
dictable “structures”. The structure of a password is deﬁned
as the way in which the password can be broken into strings
(or tokens) of letters, digits, and symbols (e.g. S1U1L6D2
represents a special character followed by an uppercase let-
ter, then 6 lowercase letters, and ending with two digits).
PCFG attacks are highly eﬀective because when a password
composition policy requires that a digit or symbol be in-
cluded in a password, users are far more likely to append the
required character to an existing password rather than place
it in the middle. Similarly, uppercase letters are predomi-
nantly used at the beginning of an alphabetic string. By
tabulating the number of occurrences of each distinct struc-
ture found in a training set, an attacker can gain valuable
insight into the likely distribution of structures of the pass-
words. Thus, a PCFG-based attack is a counter-measure to
password composition policies, and such an attack can be
markedly more eﬀective than an attack based solely on a
Markov chain.
2.3 Strengthening Algorithms
A strengthening algorithm requires a measuring system
to rate how hard a password is to crack. Password meters,
commonly used to graphically depict to a user how strong
or weak their password is, employ this same concept. As de-
ﬁned in [21], a password strength metric is a function that
takes a string (password) and outputs a positive real num-
ber score s, such that the higher the score, the stronger the
password (i.e., harder to crack). Extending this concept,
the authors deﬁne an adaptive strength metric as a func-
tion that takes a list of previously received passwords and
the user’s password as inputs and outputs a score s. Each
password presented to the adaptive password meter would
be included in the list of previously received passwords on
the next invocation so that the scoring is truly adaptive.
Since both Markov chains and PCFG-based algorithms
use known password lists to ﬁne-tune the distribution of
character sequences and structures, it makes sense that a
130
password scoring system should also use this information
when calculating ease of cracking. Since password distri-
butions are diﬀerent from website to website [21], due to
diﬀerences in password composition policies and other fac-
tors, a training database that works well for one website may
not be suitable for another website. Adaptive scoring algo-
rithms, because they can see the current passwords, or at
least the distribution of relevant statistical properties of the
passwords, allow the algorithm to give more accurate scores
for diﬀerent websites.
Processes for automatically strengthening passwords use
an adaptive approach as described above.
If a password
does not generate a suﬃciently high score from the scoring
algorithm, one or more changes to the user’s password are
made and the new, altered password is scored. If the process
is successful, one or more altered (strengthened) passwords
are presented to the user for selection.
In the event the
user’s password cannot be made suﬃciently strong given
the editing rules, the user would have to start over. The
initial password and any strengthened passwords are added
to whatever database the scoring algorithm requires for its
use. This keeps the process adaptive, and helps to reduce
the prevalence of common constructs, which is discussed in
[5] as method of improving security.
3. RELATED WORK
There is a large and growing body of literature on the
insecure password choices that users tend to make [2, 6, 3,
28, 11]. This tendency is understandable as users must bal-
ance the competing goals of security and memorability [8,
28]. Passwords that are more random (through composition
policies or system generation) or contain more characters
are harder for password crackers to guess [14]. However,
users have trouble remembering random or complex pass-
words [7, 16] and resort to insecure workarounds, such as
writing down the password or following predictable patterns
to meet password requirements [13, 15, 24, 27, 3, 23].
Composition policies such as requiring a digit, a symbol
and/or an uppercase letter are very commonly used tech-
niques to increase the security of user’s passwords. In [15,
27, 24], the authors found that in order to satisfy the compo-
sition requirements, users tend to make incremental changes
to an old password, rather than creating new ones. The au-
thors of [14] report that the composition policies of basic16
and comprehensive8 exhibit the best resistance to cracking
attacks. The ﬁrst policy allows any password of length 16 or
longer. The second policy mandates that all four character
classes be present, and, after stripping out the digits and
symbols, the remaining letters cannot spell a word.
Password strength meters are also commonly used by web-
sites to assist users with creating more secure passwords.
Typically, the strength meter either follows static rules such
rewarding users for simply adding a digit or symbol, or
uses a measure of entropy for strength. As documented
in [27, 17, 3], NIST measures of entropy are deeply ﬂawed
as a resistance-to-guessing measure, signiﬁcantly overstating
the security of some passwords and signiﬁcantly understat-
ing the security of others.
In [25], the authors state that
strength meters are eﬀective in getting user to create longer
passwords, but signiﬁcant increases in resistance to guess-
ing were only made with very stringent scoring, which users
found very frustrating in practice.
Automated methods for improving a user-selected pass-
word have been suggested. One such approach is Persuasive
Text Passwords (PTP), as described in [9, 10]. The basic
idea here is for the user to enter their desired password, and
PTP inserts 1-4 random characters at randomly selected po-
sitions. The random selection forces a break from the clus-
tering of patterns seen in [27], although memorability of the
new password is an issue. The authors conclude that two
randomly inserted characters was the best tradeoﬀ between
increase in security versus memorability. The authors of
[12] describe a very similar approach in terms of strength-
ening user passwords by using a PCFG database obtained
by training on a previously leaked set of passwords together
with a set of editing rules.
The authors in [21] use Markov chains to estimate the
strength of a user-supplied password and use that estimate
of strength in an adaptive strength meter shown to the user.
By building and maintaining the Markov chain with data
from the actual passwords at the site, the meter automati-
cally adjusts to any cultural or site-speciﬁc tendencies that
might cause passwords to cluster.
The work in this article extends the above research in the
following ways. A password-scoring mechanism such as that
described in [21] is assumed to be in use. This mechanism
would adaptively score a newly presented password in the
context of the other passwords already seen at a site and,
using that information, guide users to select strong pass-
words. Following the approaches of [9, 10, 12], an automated
approach to strengthening passwords is taken, with a well-
deﬁned set of editing rules that may be applied to a pass-
word. However, previous work has not examined the ability
of strengthened passwords to be guessed by either an alter-
native algorithm or by attempting to build a PCFG train-
ing set with statistical properties similar to the strengthened
passwords. Results are presented which show that a large
percentage of passwords strengthened and scored using a so-
phisticated algorithm like PCFG can be guessed by precisely
these means. Thus, the apparent success of some strength-
ening algorithms may be illusory.
4. EXPERIMENTAL SETUP
This section ﬁrst describes the data used. It then describes
the method used to estimate password strength and how
that measure of strength is used within a password guessing
algorithm. Additionally, the algorithm used to strengthen
passwords is described.
4.1 Data
Multiple leaked password lists exist in the public domain.
Using actual passwords lists such as those found at [1] is
the best way to study password distributions and cracking
algorithms in a large scale manner. This paper uses the
passwords from the rockyou website; rockyou had no com-
position policy and a stated minimum length of 5.
In order to keep the password set large , the only con-
straint imposed by this work was that a password needed to
be at least eight characters long, which reduced the size from
14M to 9.5M. Since the assumption is that a strengthening
system is in place, it should either be successful in strength-
ening the user’s password or it should inform the user that
the password cannot be strengthened. Hence, stringent ini-
tial constraints on the password should be unnecessary.
In order to permit out-of-band testing, the rockyou set
was randomly divided into two sets, rockyou-1 and rockyou-
131
2. In turn, both of these sets were randomly divided into
subsets A, B and C in order to bootstrap the algorithm; see
Section 4.4.1
4.2 Measuring Password Strength
To measure password strength, a program to calculate the
“guess probability” (GP) of a password was implemented.
As described in [26], GP is computed by a PCFG as the
product of the base structure (i.e., L6D2) probability and
the probabilities of the strings which ﬁll each variable (i.e.,
L6 and D2), with the strings selected from an input dic-
tionary. Consequently, only strings that are present in the
dictionary can be guessed. To avoid this restriction, the GP
calculation used in this paper uses both a dictionary and a
Markov chain that are built from the training data. Since