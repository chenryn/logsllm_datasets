random element of Fp, represented using 255 bits, will be
distributed nearly identically to a uniformly random 255-bit
string. Furthermore, although elliptic curve points are of the
form (x, y) ∈ Fp × Fp, for the purposes of Diﬃe-Hellman, it
suﬃces to send the x coordinate only, as Bernstein’s imple-
mentation does. This allows us to send KC , along with a
33-bit tag τ , using a total of 36 bytes, carried over the ISN
covert channel of 12 TCP connections.
The Curve25519 implementation in its recommended us-
age, however, produces only a fraction of all elements in Fp
as public keys. First, the recommended domain for the se-
cret key kC uses only integers that are 0 mod 8, because ac-
tive subgroup conﬁnement attacks [34] can be used to deter-
mine kC mod 8. Second, the recommended base point g = 9
in fact generates a subgroup of the elliptic curve of prime
order p1, whereas the curve itself has size 8p1. These choices
can easily be adjusted in our scenario; learning kC mod 8 is
not helpful to an attacker, especially since kC is only used
once. Likewise, switching a generator of the full group allows
an attacker to determine a few bits of information about kC
but does not invalidate the CDH assumption.
A more signiﬁcant issue is that only approximately half of
the elements of Fp form a valid x coordinate for the elliptic
curve, and it is easy for the warden to check whether the
client is sending a value that falls into this category over the
ISN covert channel. If, over time, all of the ISNs from the
client, decoded as elements of Fp, are valid x coordinates, the
warden can be reasonably certain that the client is in fact
using Cirripede. To address this, we follow the approach
1http://cr.yp.to/ecdh.html
189Figure 1: Cirripede architecture.
used in Telex [57] and use the twist of the elliptic curve.
The x coordinates of points on the twist are precisely those
points that are invalid x coordinates for the original curve.
To avoid certain active attacks, Curve25519 was designed to
have a twist group with order 4p2, where p2 is a large prime,
and thus the CDH is also believed to hold for the twist.
The implementation can be made to use the twist group G′
simply by choosing a generator g′ of G′. The registration
server has two public keys KRS = gkRS and K ′
RS = (g′)kRS ′ .
The client randomly chooses to use the twist or the original
curve, each with probability 1/2. The registration server
can easily check whether KC sent by the client belongs to
the curve or the twist and use the corresponding secret key
to complete the Diﬃe-Hellman protocol.
3.2 Trafﬁc deﬂection
As mentioned in the previous subsection the RS needs to
observe the contents of TCP SYN traﬃc, in order to perform
the registration. To do this, the DRs must forward this infor-
mation to the RS . Since the DR may be an existing router
within the ISP network, to simplify deployment, we aim to
minimize the required changes to DR hardware or vendor
software. One way to do this is for the DR to simply for-
ward all traﬃc to the RS in a similar manner to how scrub-
bing systems are deployed at some ISP networks (e.g., by
using the ERSPAN primitive in Cisco IOS ). Alternatively,
the router can be conﬁgured to only forward TCP SYN traf-
ﬁc to the RS (e.g., by using the match field tcp control
bits eq 2 mask 0x3D command in Cisco IOS). The RS in
turn can write rules (“deﬂecting tables”) into the DR to for-
ward certain ﬂows to the SP , in a similar fashion.
After a client C is registered, the registration server RS in-
forms the deﬂecting routers to update their deﬂecting tables
by adding an entry for C with the corresponding registra-
tion information. The registration information for a client
includes the client’s IP address and the registration expi-
ration. At this point, any traﬃc from the client C being
intercepted by any of the deﬂecting routers will be deﬂected
to the service proxy SP .
3.3 Unobservable communication
Once the traﬃc from a registered client C is deﬂected by a
deﬂecting router, the service proxy SP intercepts this traﬃc
in order to start the unobservable communication with the
client. The unobservable communication scheme is based
on establishing covert communication using legitimate en-
crypted traﬃc, e.g., HTTPS traﬃc. Note that such unob-
servable communication can also be designed using the exist-
ing TCP/IP steganography techniques over a non-encrypted
traﬃc; as mentioned in Section 7, that results in signiﬁcantly
lowering the capacity of the covert communication as com-
pared to using HTTPS.
Figure 2 illustrates the sequence of the messages exchanged
within the Cirripede system in order to establish an unob-
servable communication. Suppose that a client C has suc-
cessfully been registered by Cirripede; thus, SP possesses the
shared secret key kC,RS . The client starts an HTTPS con-
nection with an allowed overt destination OD. This traﬃc is
deﬂected by a deﬂecting router DR toward the service proxy
SP . Consequently, the following messages are exchanged in
order to have the unobservable connection established:
1. Client C initiates an HTTPS connection with OD.
This connection is deﬂected to and transparently prox-
ied by the service proxy SP until C and OD complete
their TLS handshake. (packets 1 to 4)
2. C sends a legitimate encrypted “application data” TLS
record (e.g., an HTTP GET request) to OD (this is to
prevent connection termination due to a false-connection
failure as discussed in Section 4.1). (packet 5)
3. SP terminates its TCP connection to OD on behalf of
C. (packet 6)
4. SP uses the shared key kC,RS to derive a new shared
TLS session key kC,SP (and initializes a new “cipher
spec”2). Under the new cipher spec, SP sends an en-
crypted TLS record of a 64-byte message M1 = [M0||r]
to C to inform C of SP ’s presence. M0 is a ﬁxed known
32-byte message and r is a 32-byte random number.
(packet 7)
5. (C similarly derives kC,SP and initializes the new ci-
pher spec.) C decrypts the TLS record received from
SP and veriﬁes that the cleartext contains the message
M0. At this time, C switches to using the new cipher
spec for communication with SP .
6. C instructs SP to initiate a new connection to covert
destination CD. (packet 8)
7. Finally, C communicates with CD through the existing
2http://tools.ietf.org/html/rfc4346#section-7
190TLS connection, while appearing to the warden to be
communicating with OD.
By having the CD be an entry point to an anonymous
network like Tor, the client’s traﬃc gets anonymized from
Cirripede as well. This is discussed more in Section 4.3.
4. Cirripede IN PRACTICE
In this section we describe and address some of the tech-
nical and security issues of the Cirripede scheme. We start
by listing two potential cases where Cirripede may not be
able to join a new client, and our extensions to address them
(Sections 4.1 and 4.2). We then describe some security prop-
erties of Cirripede (Section 4.3).
4.1 False connection failure
This is the case where an oblivious client ˆC, who is not try-
ing to use Cirripede, is mistakenly registered by Cirripede’s
registration server. Because this may interfere with the
client’s normal Internet activity, Cirripede should minimize
the rate of false-connection. As discussed in Section 3.1, the
registration tag τ is 33-bit long. Thus, the false-connection
rate is 2−33, which is practically negligible for a given client.
In the rare case of a false connection, the SP informs the
RS to remove the mistakenly registered client ˆC from the
list of the registered clients, and the RS will consequently
update the deﬂecting table of the DR routers by removing
the entry corresponding to ˆC.
The following is another source that may cause a false-
connection failure:
In many networks, IP ad-
Clients with dynamic IPs:
dresses are assigned to the clients dynamically, e.g., using
the DHCP protocol. In this case, it might happen that an
oblivious client ˆC gets assigned to an IP address that is cur-
rently registered with Cirripede.
Xie et al. [58] show that the inter-user duration of dynamic
IP addresses, i.e., the time between two diﬀerent clients us-
ing the same dynamic IP, depends on the type of the ISP
and has a direct relation with the bandwidth provided by
the ISP, but is typically on the order of several days. As
an example, Comcast Cable has an inter-user duration of at
least 10 days in more than 75% of the IP re-allocations. For
the SBC DSL provider, this interval is about one day. As
mentioned in Section 3.1, each client registration in Cirri-
pede is valid for a registration time interval T . After the
registration expires, the client needs to re-register with the
Cirripede in order to use its service; this signiﬁcantly reduces
the rate of false-connection failures caused by dynamic IP re-
assignments. In fact, the T value makes a tradeoﬀ between
the user’s need for re-registration and the false-connections
due to dynamic allocations of IP addresses.
4.2 Mis-connection failure
This is the case when a client C who has requested to be
registered by Cirripede, by sending the registration request
as mentioned before, has not been registered successfully.
Since no conﬁrmation message is sent to the requesting client
during the client registration step, due to some technical
constraints3, there should be suﬃcient mechanisms by Cirri-
pede in order to prevent possible connection failures. In par-
ticular, when a not-successfully registered client C tries to
3This requires deﬂecting routers to embed steganographic
messages into the TCP headers.
communicate with the service proxy SP by sending messages
encrypted with kC,SP , these messages directly reach OD,
which cannot interpret them and will tear down the con-
nection. In this case, the warden ISP can infer the client’s
anomalous behavior by observing frequent connection termi-
nations for the client. To prevent the mis-connection failure,
the ﬁrst message that deviates from the TLS protocol—the
“conﬁrmation message”—is sent by SP . By having SP send
the conﬁrmation message, the client can reliably determine
whether to continue communicating with OD or switch to
communicating with SP .
4.3 Security analysis
Table 1 summarizes diﬀerent security and privacy prop-
erties provided by Cirripede, as compared to other systems.
A censorship circumvention tool or an anonymous network,
e.g., Tor, do not provide unobservability from the warden
ISP. Using Cirripede alone provides unobservability from the
warden ISP, but it does not provide destination-anonymity
from the Cirripede system itself: the service proxy knows
the covert destination being targeted by a client. In some
cases, a client does not trust the Cirripede service itself and
requires destination-anonymity from the Cirripede as well.
This can be easily provided by having the client use Cir-
ripede to reach a traditional anonymous network like Tor,
which is then used to reach the intended covert destination.
In other words, in this case an entry point to the Tor net-
work is requested for the CD destination. An alternative
approach for providing destination-anonymity from Cirri-
pede is to design a redundant structure for Cirripede; we
leave this for future research.
The mentioned security and privacy promises of Cirripede
are based on the assumption that Cirripede’s private key
is not compromised. Having the private key of Cirripede
being compromised results in the exposure of Cirripede users
as well as their covert destinations and contents of their
covert communications, as is the case in other circumvention
services, e.g., Tor.
As mentioned before, Cirripede relies on participating ISPs
to deﬂect HTTPS traﬃc from registered clients to service
proxies. In the following, we discuss the security and privacy
promises of Cirripede considering diﬀerent assumptions for
the participating ISP.
Malicious participating ISPs: We consider a case where
a participating ISP is malicious, i.e., tries to identify clients
from its own network that use Cirripede. A participating
ISP has access to the deﬂecting table, e.g., the list of reg-
istered clients, provided by Cirripede’s registration server.
However, as the communication of Cirripede is encrypted
using a key shared between Cirripede and a client, a par-
ticipating ISP will not be able to disclose either the covert
destination address or the communicated content.
It may be possible to enforce two requirements to further
reduce the consequences of having a malicious participating
ISP; ﬁrst, the participating ISPs are not selected from the
countries under the control of the oppressive regimes. This
reduces the chances of a malicious ISP to get access to the
deﬂecting table of Cirripede. Second, for each newly regis-
tered client C the registration server RS only informs the
DRs that belong to the participating ISPs other than C’s
host ISP. Hence, for a malicious ISP participating with Cir-
ripede the maximum information disclosed will be only the
identity of the registered clients that reside in other ISPs.
191Figure 2: The connection sequence to perform the unobservable communication.
Table 1: Features provided by using diﬀerent circumvention services.
Destination-anonymity
Source-Anonymity Destination-Anonymity
from destination
from warden ISP
Circumvention service
being used
None
Anonymous Network (Tor)
Cirripede only
Cirripede + Tor
No
Yes
Yes
Yes
No
Yes
Yes
Yes
from circumvention service
N/A
Yes
No
Yes
Unobservability
from warden ISP
No
No
Yes
Yes
Honest but curious participating ISPs:
Similar to
the case of a malicious participating ISP, an honest-but-
curious ISP can only get information about the identity of
registered clients that reside in other ISPs. However, no
information about either of the covert destinations, nor the
communication contents of the clients is disclosed to the
participating ISPs.
5. PROTOTYPE IMPLEMENTATION
We have implemented a prototype of Cirripede on Linux.
5.1 Deﬂecting router
Without a real commercial router, we take advantage of
the routing capabilities of Linux. The DR forwards copies
of all TCP SYN packets to the RS by using the “TEE” tar-
get of iptables4. In order to deﬂect packets from registered
sources to the SP , the DR uses policy-based routing. First,
we create a new routing table deflect, which contains a
single default route to the SP . (We assume the SP can be
multiple hops away from the DR; thus, to ensure correct
routing of deﬂected packets, which have OD as the desti-
nation IP address, the DR sends those packets to SP in an
IP-in-IP tunnel.) Second, the DR uses the ip rule com-
mand to match the source IP addresses of registered clients
and route them according to the deflect table.
4http://www.netﬁlter.org/projects/iptables/index.html
5.2 Registration server
The RS uses libpcap5 to capture the TCP SYN packets
forwarded to it by DR. From each captured packet, RS
extracts the source IP address and the (24 LSB of the) ISN.
The RS needs to accumulate 12 SYN packets from the client
before it can attempt to validate the client as described in
Section 3.1. (If the RS does not see a new SYN packet from
a client after a validation interval of Tv seconds, then it
removes the state for that client to reclaim memory.) If the
client is validated, RS (1) notiﬁes SP of the client IP address
and the key kC,RS , and (2) notiﬁes DR to start deﬂecting
the client’s traﬃc.
5.3 Service proxy
At a high level, SP acts as a transparent proxy (i.e.,
client’s packets have the OD for destination IP address), so
the standard conﬁgurations necessary for transparent prox-
ying apply. For the proxy software itself, we use squid6
version 3.1.9, a popular HTTP proxy written in C++. We
select squid only because it is mature and can act as a trans-
parent proxy. We modify squid to receive notiﬁcation pack-
ets from RS and maintain a mapping from registered client
IP addresses to the corresponding kC,RS keys. For the TLS
protocol, squid uses the OpenSSL 0.9.8q library7.
Eﬀectively, SP transparently intercepts and tunnels the