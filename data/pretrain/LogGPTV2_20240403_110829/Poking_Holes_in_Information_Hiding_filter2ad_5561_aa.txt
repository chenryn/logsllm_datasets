title:Poking Holes in Information Hiding
author:Angelos Oikonomopoulos and
Elias Athanasopoulos and
Herbert Bos and
Cristiano Giuffrida
Poking Holes in Information Hiding
Angelos Oikonomopoulos, Elias Athanasopoulos, Herbert Bos, and Cristiano Giuffrida, 
Vrije Universiteit Amsterdam
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/oikonomopoulos
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Poking Holes in Information Hiding
Angelos Oikonomopoulos
Vrije Universiteit Amsterdam
PI:EMAIL
Elias Athanasopoulos
Vrije Universiteit Amsterdam
PI:EMAIL
Herbert Bos
Cristiano Giuffrida
Vrije Universiteit Amsterdam
Vrije Universiteit Amsterdam
PI:EMAIL
PI:EMAIL
Abstract
ASLR is no longer a strong defense in itself, but it still
serves as a foundation for sophisticated defenses that use
randomization for pseudo-isolation. Crucially, these de-
fenses hide sensitive information (such as shadow stacks
and safe regions) at a random position in a very large
address space. Previous attacks on randomization-based
information hiding rely on complicated side channels
and/or probing of the mapped memory regions. Assum-
ing no weaknesses exist in the implementation of hid-
den regions, the attacks typically lead to many crashes
or other visible side-effects. For this reason, many re-
searchers still consider the pseudo-isolation offered by
ASLR sufﬁciently strong in practice.
We introduce powerful new primitives to show that
this faith in ASLR-based information hiding is mis-
placed, and that attackers can break ASLR and ﬁnd hid-
den regions on 32 bit and 64 bit Linux systems quickly
with very few malicious inputs. Rather than building on
memory accesses that probe the allocated memory areas,
we determine the sizes of the unallocated holes in the
address space by repeatedly allocating large chunks of
memory. Given the sizes, an attacker can infer the loca-
tion of the hidden region with few or no side-effects. We
show that allocation oracles are pervasive and evaluate
our primitives on real-world server applications.
1
Introduction
While Address Space Layout Randomization (ASLR) by
itself no longer ranks as a strong defense against ad-
vanced attacks due to the abundance of memory disclo-
sure bugs [1], it is still an essential foundation for more
sophisticated defenses that use randomization to pro-
vide fast pseudo-isolation. Speciﬁcally, these defenses
hide important sensitive information (such as shadow
stacks [2], safe regions [3], or redirection tables [4]) at
a random position in a very large address space. The un-
derlying and crucial assumption is that an attacker is not
able to detect the location of the hidden regions.
Thus, the strength of all these defenses hinges entirely
on the ASLR-provided obscurity of the hidden region.
Our research question is whether such trust in the ran-
domization schemes of modern systems like Linux is jus-
tiﬁed. In particular, we show that it is not, and introduce
powerful new primitives, allocation oracles, that allow
attackers to stealthily break ASLR on Linux and quickly
ﬁnd hidden regions on both 32-bit and 64-bit systems.
Randomization for information hiding Most oper-
ating systems today employ coarse-grained ASLR [5]
which maps the different parts of the process (the stack,
heap, and mmap region) in random locations in mem-
ory. The amount of randomness determines the strength
of the defense. As an extreme example, the entropy
for the mmap base on 32-bit Linux is as low as 8 bits,
which means that the region can start at 256 possible lo-
cations in memory. This is well within range of a rel-
atively stealthy brute-force attack. On 64-bit machines,
however, the entropy of the mmap region on Linux is 28
bits and brute forcing is no longer considered practical.
Unfortunately, whatever the granularity and entropy, ad-
dress space randomization is vulnerable to information
disclosure attacks. For example, in the absence of addi-
tional defenses and given a single code pointer, attackers
can easily ﬁnd other code pointers and eventually enough
code to stitch together a code reuse attack [1].
However, powerful new defenses have evolved that
still rely on randomization, but this time for the purpose
of hiding a secret region of memory in a large address
space [2, 3, 4]. Typically, they ensure the conﬁdentiality
and integrity of code pointers (such as return addresses,
function pointers, and VTable pointers) [3, 6]. As ma-
nipulating a code pointer is vital for an attacker to take
control of the program, preventing unauthorized access
to code pointers also prevents such attacks. Thus, instead
of storing code pointers in the program code, the heap, or
USENIX Association  
25th USENIX Security Symposium  121
1
the stack, they place them in an isolated memory region.
For instance, some defenses store the return addresses on
an isolated “shadow” stack. Such defenses work as long
as attackers cannot access the isolated region.
While it is possible to isolate these regions using tech-
niques such as Software Fault Isolation (SFI) [7, 8], most
existing solutions adopt cheaper ASLR-based pseudo-
isolation—presumably for performance reasons or since
commodity hardware-supported fault isolation can dra-
matically limit the size of the address space [9]. In other
words, they resort to information hiding by placing the
region at a random location in a very large virtual (and
mostly inaccessible) address space and making sure that
no pointers to it exist in regular memory.
The role of ASLR in information hiding is quite dif-
ferent to its use in countering code-reuse attacks directly,
since even a strong read or write primitive ceases to be
trivially sufﬁcient for breaking the defense. Speciﬁcally,
hiding all sensitive pointers forces attackers to probe the
address space repeatedly (with the number of probes pro-
portional to the size of the address space) and risk detec-
tion from crashes [10], or other observable events [11].
While Evans et al. [12] show that problematic implemen-
tations relying on huge hidden regions are still vulnerable
to crashless probing attacks, more advanced defenses are
not [6]. Indeed, the many new defenses that rely on in-
formation hiding show that ASLR is widely considered
to offer strong isolation.
Allocation oracles Unlike previous approaches, our
attack does not revolve around probing valid areas of al-
located memory. Instead, we introduce new primitives to
gauge the size of the holes in the address space. The key
idea is that once an attacker knows the sizes of the holes,
she can infer the start of the hidden regions.
In other
words, even if all the pointers into the hidden regions
have been removed, the sizes of the unallocated parts of
the address space “point” into the hidden regions.
To gauge the sizes of the holes, we introduce alloca-
tion oracles: information disclosure primitives that allow
an attacker to allocate large chunks of memory repeat-
edly and thus probe for the possible sizes of the largest
hole in the address space. In most cases, she can use bi-
nary search to ﬁnd the exact size after a handful of prob-
ing attempts. The pre-conditions for allocation primi-
tives are the ability to make repeated, arbitrarily large
memory allocations, and to detect the success or failure
of such allocation attempts. For instance, the simplest
oracle might be the length ﬁeld in a protocol header that
controls the amount of memory a server allocates for a
request [13]. More reliably, the attacker may corrupt a
value in memory that is later used as an allocation size.
Assuming the attacker can distinguish between success
and failure of the allocations, this primitive operates as
an allocation oracle. We will show that such cases are
common in real-world server programs.
come
Allocation oracles
in two main forms.
Ephemeral
allocation oracles perform allocations
that have a short lifetime. For instance, a server which
allocates memory for a client request and frees it after
sending the reply. Ephemeral allocation oracles are the
most effective in detecting the hidden regions.
In the
absence of ephemeral allocation oracles, we may ﬁnd
persistent allocation oracles. In this case, the allocation
is permanent. This property alone makes attacks harder,
but not impossible. In this paper, we present exploitation
techniques and examples using either kind of oracle, as
well as a powerful combination of the two. This combi-
nation allows an attacker to disclose the location of small
hidden regions arbitrarily located in an arbitrarily large
address space with no crashes or other detection-prone
side effects.
Contributions We make the following contributions:
• We introduce new types of disclosure primitives,
termed allocation oracles. Unlike existing primi-
tives, allocation oracles do not work by accessing
memory addresses, but instead probe the address
space for “holes”. We describe primitives for both
ephemeral and persistent allocations, and show how
to combine them to break information hiding.
• We describe a methodology to assist an attacker in
easily discovering both ephemeral and persistent al-
location primitives in real programs. We show that
such primitives are very common in practice. When
real-world instances of our primitives are imperfect,
we show how an attacker can exploit timing side
channels to mount effective attacks.
• We show that our primitives can be exploited to
mount end-to-end disclosure attacks on several real-
world server programs. Our attacks render ASLR
ineffective even on 64-bit (or larger) systems and
show that an attacker can quickly locate hidden re-
gions of existing defenses with little or no trace.
Organization We introduce the threat model in Sec-
tion 2. Section 3 provides the necessary background for
our attacks, presented in Section 4. We then describe our
methodology for discovering memory allocation primi-
tives (Section 5) and evaluate their availability and the
effectiveness of the proposed attacks in Section 7. Fi-
nally, we discuss the implications for the defense mecha-
nisms that rely on ASLR for information hiding (Section
7.6), consider mitigations (Section 8), place our attacks
in the context of related work (Section 9), and draw con-
clusions in Section 10.
122  25th USENIX Security Symposium 
USENIX Association
2
2 Threat model and assumptions
The attacks presented in this paper apply to programs
that contain vulnerabilities, but are, nevertheless, pro-
tected using state-of-the-art defenses. The sensitive data,
vital for the correct operation of the defense, is iso-
lated in a hidden region by means of information hid-
ing. Hardware-based isolation, realized with segmenta-
tion on 32 bit x86 architectures, is not available. These
assumptions correspond to some of the most advanced
anti-exploitation defenses for x86-64 today [3]. Note
that we assume an ideal information hiding implemen-
tation, i.e., all sensitive information is in a hidden region
at a truly random location in a large virtual address space
and the code that performs this pseudo-isolation, as well
as the defense itself, contain no faults. In addition, we
assume that the separation of sensitive and non-sensitive
data is perfect; the process memory holds no references
to the hidden region, and following pointers from non-
sensitive regions can never lead to pointers into the hid-
den region.
We further assume an attacker with arbitrary memory
read and write primitives. In other words, the attacker
can read or write any byte in the virtual address space.
However, we consider that all sensitive data, which could
allow an attacker change the control ﬂow of the program
in order to execute arbitrary code, is hidden in the hidden
region. Therefore, although the attacker can read any
byte in memory, she cannot probe the address space by
brute force without incurring program crashes or other
noticeable events with high probability.
We assume that the target application runs on a mod-
ern Linux system with memory overcommit. This is a
common conﬁguration in many production systems, ei-
ther because of the pervasive use of virtualization tech-
nologies [14], or because this is required or explicitly
recommended for popular and complex services, Re-
dis [15] and Hadoop [16] among others. We also gener-
ally consider (real-world) applications that either handle
allocation failures appropriately or do not crash in a way
that triggers a re-randomization (e.g., by forking and us-
ing execve to replace the worker process image) when
the allocation request cannot be serviced. The goal of
the attacker is to carefully utilize memory oracles to poke
holes into the information hiding and reveal the location
of the hidden region.
3 Background
In this section, we illustrate the organization of a typi-
cal process’ virtual memory address space. While most
of the discussion is based on Linux-based operating sys-
tems, we present fairly generic address space organiza-
tion principles which apply to other systems as well. Un-
Hole
Min
Max
A
B
C
130,044GiB 131,068GiB
1,028GiB
1GiB
4KiB
4GiB
Entropy1
28 bits
28 bits
20 bits
Table 1: Virtual memory hole ranges for a 64-bit
position-independent executable (PIE) on Linux.
derstanding the memory layout of processes is vital for
comprehending the mechanics of memory allocation or-
acles, detailed in the following sections.
The default address space of a typical x86_64
position-independent executable (PIE) on Linux (kernel
version 3.14.7 used as a reference) is depicted in Fig-
ure 1. The system randomly selects an address which
serves as the starting offset of the process’ mmap space. In
kernel concepts, this is a per-address-space mmap_base
variable. Shared objects, including the PIE executable
itself, are allocated in this virtual memory-mapped area,
which extends towards lower addresses. Figure 1 also il-
lustrates several holes (unmapped regions) fragmenting
the address space. Such holes have different purposes
and semantics.
To support typical dynamic memory allocations, the
process relies on a separate [heap] space, at the lowest
level managed by brk/sbrk calls. As the stack grows
down on x86, the heap is naturally designed to grow up
towards the stack. The size of the hole between these
two regions is randomized. The stack, in turn, is lo-
cated at a random offset from the end of the user address
space (i.e., at 0x7fffffffffff), giving rise to another
variable-sized hole at the top.
To protect against trivial exploitation of NULL pointer
dereferences by the kernel [17], processes are not
allowed to map or access addresses ranging from
zero up to an administrator-conﬁgurable limit (i.e.,
vm.mmap_min_addr, which defaults to 64KiB). Addi-
tionally, the small hole between the stack and VDSO is
typically less than 2MiB. In less than 1% of the invo-
cations, the VDSO object will end up either adjacent to
the stack or adjacent to the linker object. In both cases,
the layout is effectively the same, except that the small
random hole may not be present.
In practice, the uncertainty in the layout of the address
space is dominated by the sizes of the large hole from
vm.mmap_min_addr to the end of the mmap space (here-
after referred to as hole A), the hole between the stack
and heap (named B) and the hole covering the top of the
user address space (named C). While there may be holes
between the loaded shared objects, those are normally
of a known (ﬁxed) size. The sizes of these holes are all
uniformly distributed in the ranges shown in Table 1.
1Calculated under the assumption that the distributions are indepen-
USENIX Association  
25th USENIX Security Symposium  123
3
4.1 Crafting primitives
The ephemeral allocation primitive (EAP) is available
when a program allows attacker-controlled input to force
the allocation of a short-lived memory object with an
attacker-controlled size. In other words, the lifetime of
the object must be such that the object is deallocated in a
short amount of time (or by an attacker-controlled action,
e.g. closing the connection that the object is associated
with).
Even if an attacker induces the program to allocate a
huge memory object of arbitrary size, such an allocation
will succeed as large allocation operations typically re-
sult in an mmap system call. Thanks to demand paging,
the system call returns right after reserving the required
amount of virtual memory address space. The assign-
ment of physical memory pages (page frames) to a vir-
tual memory area, and even the population of the page
tables, is only performed when a page is accessed for the