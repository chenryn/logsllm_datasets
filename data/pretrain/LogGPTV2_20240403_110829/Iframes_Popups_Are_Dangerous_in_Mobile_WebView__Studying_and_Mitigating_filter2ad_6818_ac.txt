freely manipulate it and perform phishing attacks. In this
section, we illustrate two extended attacks: the WUI overlap
attack (Figure 8-a), and the WUI closure attack (Figure 8-b).
We next describe them in detail.
Figure 8: WebView UI Redressing Attacks
3.3.1 WebView UI Overlap Attack
1 // Customizing onCreateWindow() to enable popup-creation
2 boolean onCreateWindow(WebView view, ...) {
3
4
5
6
7
8
9
10
11
// Creating a new WebView UI
WebView myNewWebView = new WebView(getContext());
// Initializing the new WebView UI
// Putting the new WebView UI before current WebView UI
view.addView(myNewWebView);
// Providing the new WebView UI to Android
...
Listing 3: Vulnerable onCreateWindow()
Listing 3 shows a representative but vulnerable implemen-
tation of the event handler “onCreateWindow()”. When a
popup is created, the event handler is triggered and may select
to put the new WUI in the front of current benign WUI by
calling “ViewGroup.addView(new WebView)” (Line 8). Thus,
the new WUI is presented to users. However, this ability of
changing the WUI rendering order can also be obtained by
untrusted web code. This is mainly because the event handler
onCreateWindow() cannot distinguish between benign and
untrusted requests, due to its design ﬂaws (Section 3.6).
As a result, untrusted iframes/popups obtain the ability of
performing phishing attacks by simply triggering a popup-
creation event, and letting the created WUI load fake web
content and overlap the benign WUI. Due to the lack of the
address and tab bars, this risky popup-creation operation may
be hardly noticed by users. As shown in Listing 4, the overlap
attack can be easily set up in practice.
1 // Using HTML Code
2  and win-
dow.open()) is executed in a sub-frame, Android always tries
to select a WUI to show the popup content. Note that the
WUI selection always occurs, even when popup-creation is
disabled in the mobile layer (e.g., the setting SupportMulti-
pleWindows is false). However, when popup-creation is not
allowed, there is not a new WUI for rendering. Instead, An-
droid selects current WUI for showing the popup content,
which means the main frame is navigated to the popup. Thus,
phishing attacks may occur.
In practice, the privileged navigation attack can be easily
launched by using the exploit code shown in Listing 4. Note
that this code is also used for launching the WUI overlap
attack. When popup-creation is disabled (by default), the
code may launch the navigation attack. Otherwise, the WUI
redressing attack may be available.
3.5 Advantages of DCV Attacks
Compared to existing Android attacks (such as Trojan at-
tacks [5]), DCV attacks do not require declaring permissions,
or carrying payload. Compared to other WebView-based
attacks (e.g., [21, 25, 30, 51]), which require JavaScript or
JavaScript-bridges to be enabled, DCV attacks do not have
these requirements and limitations. More importantly, DCV
attacks are more powerful that attackers may obtain abili-
ties to not only access web-mobile bridges, but also directly
leverage critical web features.
In addition, shouldOverrideUrlLoading() often has its own
implementation problems in origin validation. For example,
our empirical study shows some hybrid apps do not even per-
984    28th USENIX Security Symposium
USENIX Association
Furthermore, different from existing MITM attacks on a
sub-frame inside WebView, DCV attacks cannot be prevented
by existing web protections (e.g., SOP). Unlike existing touch
hijacking in WebView [31], DCV attacks do not need to con-
trol the mobile code, and craft the placement of multiple We-
bView components in Activity layout XML.
In addition, DCVs can be leveraged to boost other attacks.
For example, event-oriented attacks [53] rely on triggering
WebView event handlers, but it is difﬁcult to trigger several
critical event handlers (e.g., onPageStarted() and onPageFin-
ished()). This problem can be well solved through exploit-
ing DCVs, such as the privileged navigation attack (Section
3.4.2).
3.6 Root Causes of DCVs
DCVs are rooted in the inconsistencies between WebView
and regular browsers in terms of UI and programming fea-
tures (Section 1 and 3.1). We demonstrate several critical and
frequently used web features and behaviors are harmless and
safe in the context of regular browsers, but they become risky
in the context of WebView.
In addition, we also ﬁnd the design of the event handler
features is also ﬂawed. In theory, through event handlers,
developers have chances to reject DCV attacks. However,
unfortunately, the design ﬂaws of event handlers make it ex-
tremely difﬁcult to achieve the goal. For example, when the
WUI overlap attack is performed, the event handler ‘‘onC
reateWindow(view,isDialog,isUserGesture,resultMsg)’’ is
always triggered. If the event handler could deny the creation
of an untrusted WUI, attackers would fail to launch the WUI
redressing attack. However, this is very difﬁcult because the
event handler onCreateWindow() does not provide the victim
app any origin information about who is creating a popup and
what content is being loaded in the popup. Thus, the victim
app has to blindly allow or deny all popup-creation opera-
tions, no matter whether the operations are made by benign or
untrusted code. In addition to onCreateWindow(), other event
handlers such as onCloseWindow() face similar problems.
event
handler
Another
shouldOverrideUrlLoad-
ing(view,request) (as introduced in Section 2.2) is always
triggered when a URL loading event occurs. This event
handler provides the information of the URL that is being
accessed, which may be used as a complement of other event
handlers to prevent DCV attacks (e.g., allow the victim
app to deny untrusted URLs). However, the combination is
hardly used in practice. Even when the associated URL is
identiﬁed and denied, the new WUI is already created and
still in the control of untrusted iframes/popups. Untrusted
iframes/popups may still use the new WUI to consume the
resources (such as CPU and memory) of the victim devices in
background. Hence, to avoid this, it is required for the victim
app to always explicitly destroy the new WUI.
form any check, and some of them only check the domain of
the URL but ignore the scheme (e.g., “HTTP” or “HTTPS”).
4 DCV-Hunter
There are several tools for analyzing hybrid apps [22, 53, 55],
however, it is challenging to directly apply these tools to
detect DCVs. On the one hand, existing static analysis tools
are not designed for the analysis of iframe/popup behavior
(e.g., [22, 55]), and they are often coarse-grained (e.g. [33]).
More speciﬁcally, they can hardly extract and reconstruct
the context information of each WebView instance. When
there are multiple WebView instances in a hybrid app, which
is common in practice, these tools can produce high false
positives. On the other hand, existing dynamic analysis tools
(e.g., [53]) have high false negatives, as it is very difﬁcult
to trigger a WebView instance at runtime. For example, as
shown in Figure 5, to trigger WebView inside the Facebook
Messenger app, the analysis tools need to automatically log
in and open a URL link.
We propose a novel static detection tool, DCV-Hunter, that
utilizes program analysis to automatically vet apps. As shown
in Figure 9, DCV-Hunter’s approach is four-fold. Given an
app, DCV-Hunter ﬁrst generates its complete call graph (CG).
Next, DCV-Hunter leverages CG to reconstruct the context
of each WebView instance. Then, DCV-Hunter veriﬁes if
untrusted sub-frames exists. Finally, DCV-Hunter determines
if the given app is potentially vulnerable or not.
4.1 Complete Call Graph Construction
We leverage FlowDroid [10] to generate call graphs (CG) of
the target app. However, we ﬁnd FlowDroid faces challenges
to analyze WebView related function invocations. This is
mainly due to the missing of type information and semantics
related to WebView (e.g., the semantics of WebView event
handlers). To mitigate this issue, we patch the target app
during CG construction by inserting extra instructions, which
provide necessary type and semantic information of WebView.
Thus, FlowDroid can generate necessary edges and construct
complete CG.
4.2 WebView Context Reconstruction
In this phase, DCV-Hunter re-constructs the whole context for
each WebView instance. First, DCV-Hunter identiﬁes all Web-
View instances from CG. Then, DCV-Hunter separately recon-
structs each WebView instance’s own context, which includes
1) the URL or HTML code to be loaded; 2) settings (e.g., the
enablement of popup creation); 3) implementation of event
handlers (e.g., “onCreateWindow()” and “onCloseWindow()”).
To reconstruct the WebView context, points-to analysis is ap-
plied [33]. For example, when an event handler class that
contains the implementation of event handlers is conﬁgured
through the API “setWebChromeClient(...)”, DCV-Hunter can
check the points-to information of the API’s parameter, and
retrieve the parameter’s actual class name.
However, points-to analysis does not scale well, especially
when the target app is complex. To mitigate the problem, we
also apply the data ﬂow tracking technique (also provided by
FlowDroid) as a complement. For example, when an event
handler class is instantiated, the corresponding instance is
treated as source. Then, the event handler conﬁguration APIs
(e.g., “setWebChromeClient(...)”) are treated as sink. Finally,
if there is a ﬂow between above source and sink, the event han-
dler class should be a part of the context of the corresponding
WebView instance.
In addition to an event handler class, several context-related
objects (e.g., URL strings, WebView settings) can also be
analyzed using data ﬂow tracking. These objects and their cor-
responding APIs are treated as source and sink, respectively.
More details are shown in Table 3. Note that different from
WebView settings and event handlers, which are often class
instances, the URL source may have several different formats,
such as 1) HTML code or URL string; 2) Intent messages
(inter-component communication in Android). Both formats
are often used in real-world apps. For example, as shown in
Figure 5, in Facebook Messenger, when a link is clicked, an
Intent message that includes the link is sent out to an activity
(Andrioid UI) to start WebView and show that link.
Table 3: Source and Sink APIs
Sink
Source
URLs
Settings
Event Handlers
WebView
WebView content loading APIs
WebView Setting APIs
setWebViewClient()
setWebChromeClient()
WebView content loading APIs
WebView Setting conﬁg APIs
Event handler registration APIs
4.3 Untrusted Iframe/Popup Detection
In this phase, given a WebView instance, DCV-Hunter checks
whether an untrusted iframe/popup is included in its loaded
content. To achieve the goal, DCV-Hunter ﬁrst extracts the
URLs of the untrusted iframe/popup, and then examine the
event handler “shouldOverrideUrlLoading()” (Section 2.2)
through path constraint analysis to determine whether ex-
tracted URLs are approved.
4.3.1 Untrusted URL Extraction
Given a WebView instance, the web content loaded in Web-
View is analyzed based on its formats:
• HTML code: This format is usually used by the con-
tent loading APIs “loadData()” and “loadDataWith-
BaseURL()” (for origin-hiding attacks). Based on the pat-
terns of iframes/popups (Section 2.1), all internal asso-
ciated links can be extracted and then checked. On the
one hand, if a link is unsafe, such as using HTTP, code
injection surface should exist, and the link is untrusted.
On the other hand, if a link uses HTTPS, it is difﬁcult to
determine if the link is third-party, considering the main
frame does not have an explicit domain (i.e., the “null”
USENIX Association
28th USENIX Security Symposium    985
Figure 9: The Overview of DCV-Hunter
Table 4: APIs for the Analysis of WUI redressing problems
Attacks
Overlap
Closure
Sensitive APIs
ViewGroup.addView()
ViewGroup.RemoveView()
WebView.setVisibility()
...
origin).
To mitigate the problem (i.e., determine the ﬁrst-party
URLs), we leverage several heuristics: 1) inside the target
app, WebView class name and its internal package names