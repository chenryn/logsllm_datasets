---
title: Blackbox Exporter
date: 20200218
author: Lyz
---
The [blackbox exporter](https://github.com/prometheus/blackbox_exporter) allows
blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP.
It can be used to test:
* [Website accessibility](#availability-alerts). Both for availability and
      security purposes.
* [Website loading time](#performance-alerts).
* DNS response times to diagnose network latency issues.
* [SSL certificates expiration](#ssl-certificate-alerts).
* [ICMP requests to gather network health information](#blackbox-probe-slow-ping).
* [Security protections](#security-alerts) such as if and endpoint stops being
    protected by VPN, WAF or SSL client certificate.
* [Unauthorized read or write S3 buckets](#unauthorized-read-of-s3-buckets).
When running, the Blackbox exporter is going to expose a HTTP endpoint that can
be used in order to monitor targets over the network. By default, the Blackbox
exporter exposes the `/probe` endpoint that is used to retrieve those metrics.
The blackbox exporter is configured with a YAML configuration file made of
[modules](https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md).
# Installation
To install the exporter we'll use [helmfile](helmfile.md) to install the
[stable/prometheus-blackbox-exporter
chart](https://github.com/helm/charts/tree/master/stable/prometheus-blackbox-exporter).
Add the following lines to your `helmfile.yaml`.
```yaml
- name: prometheus-blackbox-exporter
  namespace: monitoring
  chart: stable/prometheus-blackbox-exporter
  values:
    - prometheus-blackbox-exporter/values.yaml
```
Edit the chart values.
```bash
mkdir prometheus-blackbox-exporter
helm inspect values stable/prometheus-blackbox-exporter > prometheus-blackbox-exporter/values.yaml
vi prometheus-blackbox-exporter/values.yaml
```
Make sure to enable the `serviceMonitor` in the values and target at least one
page:
```yaml
serviceMonitor:
  enabled: true
  # Default values that will be used for all ServiceMonitors created by `targets`
  defaults:
    labels:
      release: prometheus-operator
    interval: 30s
    scrapeTimeout: 30s
    module: http_2xx
  targets:
   - name: lyz-code.github.io/blue-book
     url: https://lyz-code.github.io/blue-book
```
The label `release: prometheus-operator` must be the [one your prometheus
instance is searching for](prometheus_troubleshooting.md#service-monitor-not-being-recognized).
If you want to use the `icmp` probe, make sure to allow `allowIcmp: true`.
If you want to probe endpoints protected behind client SSL certificates, until this [chart
issue](https://github.com/helm/charts/issues/21345) is solved, you need to create
them manually as the Prometheus blackbox exporter helm chart doesn't yet create
the required secrets.
```bash
kubectl create secret generic monitor-certificates \
    --from-file=monitor.crt.pem \
    --from-file=monitor.key.pem \
    -n monitoring
```
Where `monitor.crt.pem` and `monitor.key.pem` are the SSL certificate and key
for the monitor account.
I've found two grafana dashboards for the blackbox exporter.
[`7587`](https://grafana.com/dashboards/7587) didn't work straight out of the
box while [`5345`](https://grafana.com/dashboards/5345) did. Taking as reference
the
[grafana](https://github.com/helm/charts/blob/master/stable/grafana/values.yaml)
helm chart values, add the following yaml under the `grafana` key in the
`prometheus-operator` `values.yaml`.
```yaml
grafana:
  enabled: true
  defaultDashboardsEnabled: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      blackbox-exporter:
        # Ref: https://grafana.com/dashboards/5345
        gnetId: 5345
        revision: 3
        datasource: Prometheus
```
And install.
```bash
helmfile diff
helmfile apply
```
# Blackbox exporter probes
Modules define how blackbox exporter is going to query the endpoint, therefore
one needs to be created for each request type under the `config.modules` section
of the chart.
The modules are then used in the `targets` section for the desired endpoints.
```yaml
  targets:
   - name: lyz-code.github.io/blue-book
     url: https://lyz-code.github.io/blue-book
     module: https_2xx
```
## HTTP endpoint working correctly
```yaml
http_2xx:
  prober: http
  timeout: 5s
  http:
    valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
    valid_status_codes: [200]
    no_follow_redirects: false
    preferred_ip_protocol: "ip4"
```
## HTTPS endpoint working correctly
```yaml
https_2xx:
  prober: http
  timeout: 5s
  http:
    method: GET
    fail_if_ssl: false
    fail_if_not_ssl: true
    valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
    valid_status_codes: [200]
    no_follow_redirects: false
    preferred_ip_protocol: "ip4"
```
## HTTPS endpoint behind client SSL certificate
```yaml
https_client_2xx:
  prober: http
  timeout: 5s
  http:
    method: GET
    fail_if_ssl: false
    fail_if_not_ssl: true
    valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
    valid_status_codes: [200]
    no_follow_redirects: false
    preferred_ip_protocol: "ip4"
    tls_config:
      cert_file: /etc/secrets/monitor.crt.pem
      key_file: /etc/secrets/monitor.key.pem
```
Where the secrets have been created throughout the installation.
## HTTPS endpoint with an specific error
If you don't want to configure the authentication for example for an API, you
can fetch the expected error.
```yaml
https_client_api:
  prober: http
  timeout: 5s
  http:
    method: GET
    fail_if_ssl: false
    fail_if_not_ssl: true
    valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
    valid_status_codes: [404]
    no_follow_redirects: false
    preferred_ip_protocol: "ip4"
    fail_if_body_not_matches_regexp:
      - '.*ERROR route not.*'
```
## HTTP endpoint returning an error
```yaml
http_4xx:
  prober: http
  timeout: 5s
  http:
    method: HEAD
    valid_status_codes: [404, 403]
    valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
    no_follow_redirects: false
```
## HTTPS endpoint through an HTTP proxy
```yaml
https_external_2xx:
  prober: http
  timeout: 5s
  http:
    method: GET
    fail_if_ssl: false
    fail_if_not_ssl: true
    valid_http_versions: ["HTTP/1.0", "HTTP/1.1", "HTTP/2.0"]
    valid_status_codes: [200]
    no_follow_redirects: false
    proxy_url: "http://{{ proxy_url }}:{{ proxy_port }}"
    preferred_ip_protocol: "ip4"
```
## HTTPS endpoint with basic auth
```yaml
https_basic_auth_2xx:
    prober: http
    timeout: 5s
    http:
        method: GET
        fail_if_ssl: false
        fail_if_not_ssl: true
        valid_http_versions:
        - HTTP/1.1
        - HTTP/2.0
        valid_status_codes:
        - 200
        no_follow_redirects: false
        preferred_ip_protocol: ip4
        basic_auth:
          username: {{ username }}
          password: {{ password }}
```
## HTTPs endpoint with API key
```yaml
https_api_2xx:
    prober: http
    timeout: 5s
    http:
        method: GET
        fail_if_ssl: false
        fail_if_not_ssl: true
        valid_http_versions:
        - HTTP/1.1
        - HTTP/2.0
        valid_status_codes:
        - 200
        no_follow_redirects: false
        preferred_ip_protocol: ip4
        headers:
            apikey: {{ api_key }}
```
## HTTPS Put file
Test if the probe can upload a file.
```yaml
    https_put_file_2xx:
      prober: http
      timeout: 5s
      http:
        method: PUT
        body: hi
        fail_if_ssl: false
        fail_if_not_ssl: true
        valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
        valid_status_codes: [200]
        no_follow_redirects: false
        preferred_ip_protocol: "ip4"
```
## Check open port
```yaml
tcp_connect:
  prober: tcp
```
The port is specified when using the module.
```yaml
- name: lyz-code.github.io
  url: lyz-code.github.io:389
  module: tcp_connect
```
## [Check TCP with TLS](https://digitalis.io/blog/security/prometheus-blackbox-exporter-monitoring-tls-certificates/)
If you want to test for example if an LDAP is serving the correct certificate on the port 636 you can use:
```yaml
tcp_ssl_connect:
  prober: tcp
  timeout: 10s
  tls: true
```
```yaml
- name: Ldap
  url: my-ldap-server:636
  module: tcp_ssl_connect
```
## Ping to the resource
Test if the target is alive. It's useful When you don't know what port to check
or if it uses UDP.
```yaml
ping:
  prober: icmp
  timeout: 5s
  icmp:
    preferred_ip_protocol: "ip4"
```
# Blackbox exporter alerts
Now that we've got the metrics, we can define the [alert
rules](alertmanager.md#alert-rules). Most have been tweaked from the [Awesome
prometheus alert rules](https://awesome-prometheus-alerts.grep.to/rules)
collection.
To make security tests
## Availability alerts
The most basic probes, test if the service is up and returning.
### Blackbox probe failed
Blackbox probe failed.
```yaml