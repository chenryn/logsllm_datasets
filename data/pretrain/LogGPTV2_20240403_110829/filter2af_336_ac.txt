          to ``True``.
        :param json_dumps_params: A dictionary of kwargs passed to json.dumps().
        """
        def __init__(self, data, encoder=DjangoJSONEncoder, safe=True,
                     json_dumps_params=None, **kwargs):
            if safe and not isinstance(data, dict):
                raise TypeError(
                    'In order to allow non-dict objects to be serialized set the '
                    'safe parameter to False.'
                )
            if json_dumps_params is None:
                json_dumps_params = {}
            kwargs.setdefault('content_type', 'application/json')
            data = json.dumps(data, cls=encoder, **json_dumps_params)
            super(JsonResponse, self).__init__(content=data, **kwargs)
如上，safe默认为True，在这种情况下，data必须为dict。
## **商城逻辑**
2017年3月初，Pwnhub上线了一个简单的商城功能，参与比赛的用户可以用自己在比赛中获得的积分兑换礼品。新功能的上线，势必引入新的安全威胁，因为Pwnhub的商城交易纯属虚拟货币逻辑，并不复杂，所以除了传统的水平权限漏洞以外，商城逻辑中最容易被忽视的漏洞其实是条件竞争。
条件竞争漏洞已经多次发生在我们周围了，最近一次是小密圈在2017年2月下旬出现的用户超额提现的问题（ [小密圈产品事故@2017
No.2](http://link.zhihu.com/?target=http%3A//blog.xiaomiquan.com/%3Fp%3D609)
）。
Pwnhub商城中可能出现条件竞争漏洞的地方有两处：
  1. 用户购买某商品时，余额判断后的条件竞争
  2. 用户购买多件商品时，商品数量判断后的条件竞争
有的同学可能还不太理解一个商城购买商品的逻辑，我以Pwnhub为例画了个简图：
所以，上述逻辑攻击者有两种攻击方式：
  1. 某一个用户同一时间对不同商品发送多次购买请求，这些请求都通过了“用户余额判断”，该用户余额被扣成负数，相当于使用它没有的钱购买了多件商品
  2. 不同用户同一时间对同一商品发送多次购买请求，这些请求都通过了“商品剩余数量判断”，结果导致商品数量被买成负数，相当于买到了无货的商品
举个例子，A用户拥有10个金币，刚好购买价值8金币的商品B。这种情况下，A用户开启10个线程同时发送购买商品请求，在数据库尚未修改的情况下，这10个请求均发现A的余额是足够购买B商品的，然后扣除8金币并成功下单。此时A用户的金币数量为10
- 8 * 10 = -70，但10个订单均已经成功支付了。
针对类似的攻击，大部分数据库通常都提供了某个记录加锁的功能，也就是在查询某条记录的时候使用SELECT FOR UPDATE，在Django
ORM里使用.select_for_update()语法。
    with transaction.atomic():
        # 获取用户和商品对象
        user = User.objects.select_for_update().get(pk=self.request.user.pk)
        gift = Gift.objects.select_for_update().get(pk=serializer.validated_data['gift'].pk)
        # 检查用户余额和商品数量
        serializer.atomic_validate(user, gift)
        # 下订单
        order = serializer.save(user=self.request.user)
        # 扣除用户余额
        user.coin -= order.cost
        user.save()
        # 扣除商品数量
        gift.amount -= order.amount
        gift.save()
另外，商城逻辑容易出BUG的地方还有几个点：
  1. 下单和支付逻辑不同步的问题
  2. 购买商品数量是负数的情况
  3. 前端传入商品价格的情况
第一个问题基本不存在了，因为Pwnhub是前后分离，下单操作可以在前端完成，后端只要接收到“购买（支付）”请求，就立马扣款。
第二、三个问题，我们在Serializer中对其进行校验即可：
    class BuySerializer(serializers.ModelSerializer):
        amount = serializers.IntegerField(label='数量', min_value=1, max_value=10)
        class Meta:
            model = models.GiftLog
            fields = [
                'order_no',
                'gift',
                'address',
                'remark',
                'amount',
            ]
            read_only_fields = ['order_no']
解决第二个问题的方法是在IntegerField里增加min_value，解决第三个问题的方法是……fields中根本没有商品价格，因为商品价格是从gift对象的price中获取的。
## **上线前夕**
做了那么一大堆工作，如果部署的时候稍有不慎，可能前面的安全工作都白做了。
部署的时候应该从如下三个切入点考虑：
  1. Django框架安全部署
  2. Django-Rest-Framework框架安全部署
  3. Web容器安全部署
**Django框架安全部署**
Django考虑的非常周到，在项目上线前，我们可以通过执行./manage.py check --deploy命令来查看可能存在的安全问题：
可见，默认生成的项目，存在以上安全问题，在部署前需要解决：
  1. SECURE_HSTS_SECONDS 是否开启HSTS头，强制HTTPS访问
  2. SECURE_CONTENT_TYPE_NOSNIFF 是否输出nosniff头，以防止类型混淆类漏洞
  3. SECURE_BROWSER_XSS_FILTER 是否输出x-xss-protection头，让浏览器强制开启XSS过滤
  4. SECURE_SSL_REDIRECT 是否让HTTP的请求强制跳转到HTTPS
  5. SESSION_COOKIE_SECURE 是否将Cookie设置为Secure（不允许在HTTP中传输）
  6. CSRF_COOKIE_SECURE 是否将CSRF Token Cookie设置为Secure（不允许在HTTP中传输）
  7. CSRF_COOKIE_HTTPONLY 是否将CSRF Token Cookie设置为HTTP ONLY
  8. X_FRAME_OPTIONS 是否返回X-FRAME-OPTIONS: DENY头，以防止被其他页面作为框架加载
  9. DEBUG 是否开启调试模式
其中，DEBUG是必须要关闭的。其他的选项主要看你对安全的要求了，例如如果你得页面不强制使用HTTPS，那么其中的一些防止中间人劫持的选项就没必要设置。
另外，上线前，最好修改后台地址，如果你不需要使用Django自带的后台，可以在INSTALLED_APPS里将其移除。SECRET_KEY重新进行生成，不要和开发、测试环境相同：openssl
rand 10 -out .secret。
**Django-Rest-Framework框架安全部署**
前文已经说了，开发环境中DRF通常使用BrowsableAPIRenderer，但在部署到生产环境后，最好将这个Renderer移除，只保留我们需要用到的JSONRenderer：
    REST_FRAMEWORK = {
        'DEFAULT_RENDERER_CLASSES': (
            'rest_framework.renderers.JSONRenderer',
            #'rest_framework.renderers.BrowsableAPIRenderer',
        ),
        ...
    }
因为攻击者可以利用BrowsableAPIRenderer输出的表单和返回结果，很容易地进行测试和攻击，也可能是DRF本身出现的前端安全漏洞（如XSS），会影响到你。
另外，DRF自带一个用户登陆View（ [4 - Authentication and permissions - Django REST
framework](http://link.zhihu.com/?target=http%3A//www.django-rest-framework.org/tutorial/4-authentication-and-permissions/%23adding-login-to-the-browsable-api) ），如果你不想用户被爆破的话，也请检查自己的urls.py，是否添加了这个View。
**Web容器安全部署**
这个就是常规话题了，按照服务器正常加固方法加固即可。
因为Pwnhub部署在Docker中，所以我们需要用Nginx在前端进行转发，但Django中有些需要获取IP的方法（Django有个配置叫INTERNAL_IPS，如果访客IP在这个配置项中，将可能可以享受一些DEBUG模式才有的功能），我使用了HTTP_X_FORWARDED_FOR这个头，那么在Nginx中就必须覆盖用户提交的头，否则就有可能造成任意IP伪造漏洞。
## 总结
作为一个小团队，虽然很难像微软等大公司这样去实现完整的SDL，但是针对Pwnhub这样小规模的项目，通过学习上述的安全编码知识，我们也能最大程度保障这个项目不被恶意攻击。如果大家有一些安全编码相关的想法，欢迎与我们讨论。