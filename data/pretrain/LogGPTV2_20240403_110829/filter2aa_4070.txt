### 版权声明
版权所有 (c) 1992 Drew Eckhardt (PI:EMAIL)，1992年3月28日

### 许可声明
- 允许制作和分发本手册的逐字副本，前提是保留版权声明和许可声明。
- 允许在满足逐字复制条件的情况下，复制和分发修改后的版本。整个衍生作品必须在与本许可相同的条款下分发。

### 免责声明
由于Linux内核和库不断变化，本手册页可能不准确或过时。作者对因使用本手册中的信息而产生的错误、遗漏或损害不承担责任。作者在编写本手册时可能没有像专业工作那样投入同等程度的精力。本手册是免费提供的。

### 格式化声明
如果未附带源代码，则格式化或处理过的版本必须承认本作品的版权和作者。

### 修改记录
- 由Michael Haardt修改
- 1993年7月21日星期三22:47:01由Rik Faith修改
- 1994年8月21日由Michael Chastain修改：修正了拼写错误
- 1997年1月31日星期五16:24:28由Eric S. Raymond修改

### 手册页
**EXECVE(2)** - Linux Programmer's Manual  
**名称**  
execve - 执行程序  

**概要 (SYNOPSIS)**  
```c
#include <unistd.h>

int execve(const char *filename, char *const argv[], char *const envp[]);
```

**描述 (DESCRIPTION)**  
`execve()` 函数执行由 `filename` 指定的程序。`filename` 必须是二进制可执行文件，或者以 `#! interpreter [arg]` 行开始的脚本文件。对于后者，解释器必须是一个有效的可执行文件路径，并且不能是脚本程序。调用形式为 `interpreter [arg] filename`。

成功调用 `execve()` 后不会返回。调入程序将覆盖调用程序的正文（text）、数据（data）、bss 和堆栈（stack）段。调入程序继承调用程序的 PID 和所有打开的文件描述符，这些描述符不会因为 exec 过程而关闭。父进程的未决信号被清除。所有被调用进程设置的信号重置为默认行为。如果当前程序正在被 ptrace 跟踪，成功的 `execve()` 调用后将收到一个 `SIGTRAP` 信号。

如果可执行文件是动态链接的 a.out 二进制程序，包含共享库的 stub，在程序开始执行时，Linux 动态链接器 `ld.so(8)` 会加载所需的共享库并将其连接到程序。如果可执行文件是动态链接的 ELF 二进制程序，定义在 PT_INTERP 字段的解释器会加载所需的共享库。连接到 libc5 的程序的典型解释器是 `/lib/ld-linux.so.1`，而连接到 GNU libc2 (libc6) 的程序则是 `/lib/ld-linux.so.2`。

**返回值 (RETURN VALUE)**  
成功调用 `execve()` 不会返回。调用失败时返回 -1，并设置 `errno` 为相应的值。

**错误 (ERRORS)**
- **EACCES**：文件或脚本解释器权限不正确。
- **EACCES**：没有文件或脚本解释器的执行权限。
- **EACCES**：文件系统挂载为 `noexec`。
- **EPERM**：文件系统挂载为 `nosuid`，用户不是超级用户，并且文件设置了 SUID 或 SGID 位。
- **EPERM**：进程正在被跟踪，用户不是超级用户，并且文件设置了 SUID 或 SGID 位。
- **E2BIG**：参数列表过长。
- **ENOEXEC**：无法识别可执行文件的文件格式，或误用于不同的体系结构，或其他格式错误导致程序无法执行。
- **EFAULT**：`filename` 指针超出可访问的地址空间。
- **ENAMETOOLONG**：`filename` 太长。
- **ENOENT**：`filename`、脚本解释器或 ELF 解释器不存在。
- **ENOMEM**：内核空间不足。
- **ENOTDIR**：`filename`、脚本解释器或 ELF 解释器的前缀路径中某些成员不是目录。
- **EACCES**：`filename` 或脚本解释器的前缀路径中某些目录没有访问权限。
- **ELOOP**：解析 `filename`、脚本解释器或 ELF 解释器时遇到过多的符号链接。
- **ETXTBUSY**：可执行文件被一个或多个进程以写方式打开。
- **EIO**：发生 I/O 错误。
- **ENFILE**：达到系统定义的同时打开文件数限制。
- **EMFILE**：进程打开了最大数量的文件。
- **EINVAL**：该 ELF 可执行文件拥有多个 PT_INTERP 字段（即试图定义多个解释器）。
- **EISDIR**：ELF 解释器是目录。
- **ELIBBAD**：无法识别 ELF 解释器的格式。

**符合标准 (CONFORMING TO)**
SVr4, SVID, X/OPEN, BSD 4.3。POSIX 没有对 #! 行为的文档，但有其他兼容形式。SVr4 记录了额外的错误情况 EAGAIN, EINTR, ELIBACC, ENOLINK, EMULTIHOP；POSIX 没有关于 ETXTBSY, EPERM, EFAULT, ELOOP, EIO, ENFILE, EMFILE, EINVAL, EISDIR 或 ELIBBAD 错误情况的文档。

**注意事项 (NOTES)**
- SUID 和 SGID 进程不能被 `ptrace()` 跟踪。
- 在 #! 格式的 shell 可执行脚本中，第一行的长度不得超过 127 字节。
- Linux 忽略脚本程序的 SUID 和 SGID 位。

**另见 (SEE ALSO)**
- `ld.so(8)`
- `execl(3)`
- `fork(2)`

**中文版维护人**
徐明

**中文版最新更新**
2003/05/13

**《中国Linux论坛man手册页翻译计划》**
<http://cmpp.linuxforum.net>