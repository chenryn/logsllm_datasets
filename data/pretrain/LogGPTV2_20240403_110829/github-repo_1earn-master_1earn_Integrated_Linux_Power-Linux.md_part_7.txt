systemctl restart nginx
```
访问 `https://www.test.com/phpMyAdmin/index.php`
---
### RabbitMQ
> RabbitMQ 是流行的开源消息队列系统,是 AMQP(Advanced Message Queuing Protocol 高级消息队列协议)的标准实现,用 erlang 语言开发.RabbitMQ 据说具有良好的性能和时效性,同时还能够非常好的支持集群和负载部署,非常适合在较大规模的分布式系统中使用.
**官网**
- https://www.rabbitmq.com/
**安装**
必须要有 Erlang 环境支持,下载 erlang 软件包,这里以 erlang-19.0.4 为例
```bash
wget http://www.rabbitmq.com/releases/erlang/erlang-19.0.4-1.el7.centos.x86_64.rpm
rpm -ivh erlang-19.0.4-1.el7.centos.x86_64.rpm
```
安装完后输入 erl 测试
安装 rabbitmq,这里以 v3.6.10 为例
```bash
yum install -y socat
wget  http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm
rpm -ivh rabbitmq-server-3.6.10-1.el7.noarch.rpm
```
`注意:如果是重装请记得删除 /var/lib/rabbitmq 目录和 /etc/rabbitmq 目录,否则可能服务会起不来`
```bash
systemctl start rabbitmq-server
或
rabbitmq-server -detached   # 启动rabbitmq,-detached 代表后台守护进程方式启动
rabbitmqctl status
```
**配置网页插件**
```bash
# 首先创建目录,否则可能报错:
mkdir /etc/rabbitmq
# 然后启用插件:
rabbitmq-plugins enable rabbitmq_management
# 配置防火墙
firewall-cmd --permanent --add-port=15672/tcp
firewall-cmd --permanent --add-port=5672/tcp
firewall-cmd --reload
```
访问: 127.0.0.1:15672,这个时候是没有账号密码的!
**配置 web 端访问账号密码和权限**
默认网页是不允许访问的,需要增加一个用户修改一下权限,代码如下:
```bash
# 添加用户,后面两个参数分别是用户名和密码
rabbitmqctl add_user [账号] [密码]
rabbitmqctl set_permissions -p / [账号] ".*" ".*" ".*"  # 添加权限
rabbitmqctl set_user_tags [账号] administrator          # 修改用户角色
```
**开启用户远程访问**
默认情况下,RabbitMQ 的默认的 guest 用户只允许本机访问, 如果想让 guest 用户能够远程访问的话,只需要将配置文件中的 loopback_users 列表置为空即可,
如下:
```
{loopback_users, []}
```
另外关于新添加的用户,直接就可以从远程访问的,如果想让新添加的用户只能本地访问,可以将用户名添加到上面的列表, 如只允许 admin 用户本机访问.
```
{loopback_users, ["admin"]}
```
---
### searx
> 尊重隐私,可控的元搜索引擎.
**项目地址**
- https://github.com/asciimoo/searx
**安装搭建**
注:本次在 Debian/Ubuntu 下搭建,centos 下基本一致,请参考 [官方教程](https://github.com/asciimoo/searx/wiki/Installation-on-RHEL-7---CentOS-7)
加源,安装依赖
```
add-apt-repository universe
apt-get update
sudo -H apt-get install -y \
    python3-dev python3-babel python3-venv \
    uwsgi uwsgi-plugin-python3 \
    git build-essential libxslt-dev zlib1g-dev libffi-dev libssl-dev \
    shellcheck
```
安装 searx
```bash
cd /usr/local
git clone https://github.com/asciimoo/searx.git
useradd searx -d /usr/local/searx
chown searx:searx -R /usr/local/searx
```
测试 python 虚拟环境
```bash
sudo -u searx -i
cd /usr/local/searx
virtualenv searx-ve
. ./searx-ve/bin/activate
./manage.sh update_packages
```
一些安全性配置
```bash
sed -i -e "s/ultrasecretkey/`openssl rand -hex 16`/g" searx/settings.yml
sed -i -e "s/debug : True/debug : False/g" searx/settings.yml
```
```bash
apt-get install -y uwsgi uwsgi-plugin-python
```
```vim
vim /etc/uwsgi/apps-available/searx.ini
[uwsgi]
# Who will run the code
uid = searx
gid = searx
# disable logging for privacy
disable-logging = true
# Number of workers (usually CPU count)
workers = 4
# The right granted on the created socket
chmod-socket = 666
# Plugin to use and interpretor config
single-interpreter = true
master = true
plugin = python
lazy-apps = true
enable-threads = true
# Module to import
module = searx.webapp
# Virtualenv and python path
virtualenv = /usr/local/searx/searx-ve/
pythonpath = /usr/local/searx/
chdir = /usr/local/searx/searx/
```
```bash
cd /etc/uwsgi/apps-enabled
ln -s ../apps-available/searx.ini
/etc/init.d/uwsgi restart
```
配置 nginx 代理
```bash
apt-get install -y nginx
```
```vim
vim /etc/nginx/sites-available/searx
server {
    listen 80;
    server_name www.你的域名.com;
    root /usr/local/searx;
    location / {
            include uwsgi_params;
            uwsgi_pass unix:/run/uwsgi/app/searx/socket;
    }
}
```
```bash
ln -s /etc/nginx/sites-available/searx /etc/nginx/sites-enabled/searx
service nginx restart
service uwsgi restart
```
现在访问 www.你的域名.com 查看你的搜索引擎服务把~
**Tips**
搜索引擎设置在 settings_et_dev.yml 文件中
建议删除或不使用的搜索接口(由于对请求速度的影响实在太大,并且经常抽风报错)
- archive is
- wikipedia
- wikidata
- faroo
- library genesis
- reddit
- startpage
- mymemory translated
搜索结果定向,不适合日常使用
- etymonline
- gigablast
- duden
- seznam
- erowid
---
### Tomcat
> Tomcat 类似与一个 apache 的扩展型,属于 apache 软件基金会的核心项目,属于开源的轻量级 Web 应用服务器,是开发和调试 JSP 程序的首选,主要针对 Jave 语言开发的网页代码进行解析,Tomcat 虽然和 Apache 或者 Nginx 这些 Web 服务器一样,具有处理 HTML 页面的功能,然而由于其处理静态 HTML 的能力远不及 Apache 或者 Nginx,所以 Tomcat 通常做为一个 Servlet 和 JSP 容器单独运行在后端.可以这样认为,当配置正确时,Apache 为 HTML 页面服务,而 Tomcat 实际上运行 JSP 页面和 Servlet.比如 apache 可以通过 cgi 接口直接调取 Tomcat 中的程序.
**官网**
- https://tomcat.apache.org
**Tomcat 角色划分**
- manager-gui：允许访问 Manager APP 页面和 Server Status
- manager-script：允许访问纯文本接口和 Server Status
- manager-jmx：允许访问 JMX 代理接口和 Server Status
- manager-status：仅允许访问 Server Status 页面(即 URL 路径为 /manager/status/*)
- admin-gui： 允许访问 Host Manager，GUI 界面(即 URL 路径为 /host-manager/html)
- admin-script：允许访问 Host Manager，文本接口，(即 URL 路径为 /host-manager/text)
**Tomcat manager 接口**
- Server Status : 查看服务器状态，包括中间件及操作系统相关信息
- Manager App : 管理服务器上部署的应用(Application),如将 WAR file 文件部署到 tomcat 中，还可以启用或停止项目
- Host Manager : 管理物理主机和虚拟主机，可增加、删除虚拟主机，默认未安装，要访问 host manager 需要在安装页面勾选
**部分文件介绍**
- context.xml：Tomcat 默认的数据源在这里配置，一般存放连接数据库的信息；
- server.xml：Tomcat 访问端口、域名绑定和数据源在这里配置；
- web.xml：Tomcat 项目初始化会去调用的文件；
**安装**
Tomcat 依赖 JDK,在安装 Tomcat 之前需要先安装 Java JDK.输入命令 java -version,如果显示 JDK 版本,证明已经安装了 JDK
JDK 安装过程 见 [如下](##JDK)
下载 Tomcat 安装包 https://tomcat.apache.org/download-80.cgi 将安装包上传至服务器,我这里以 8.5.46 为例
```bash
tar -zvxf apache-tomcat-8.5.46.tar.gz
cd apache-tomcat-8.5.46
cd bin
./startup.sh
```
如果访问 http://ip:8080/ 失败,查看防火墙开放端口
```bash
firewall-cmd --permanent --zone=public --add-port=8080/tcp
firewall-cmd --reload
```
**设置 tomcat 的服务器启动和关闭**
```vim
vim /etc/rc.d/init.d/tomcat
#!/bin/bash
# /etc/rc.d/init.d/tomcat
# init script for tomcat precesses
# processname: tomcat
# description: tomcat is a j2se server
# chkconfig: 2345 86 16
# description: Start up the Tomcat servlet engine.
if [ -f /etc/init.d/functions ]; then
. /etc/init.d/functions
elif [ -f /etc/rc.d/init.d/functions ]; then
. /etc/rc.d/init.d/functions
else
echo -e "\atomcat: unable to locate functions lib. Cannot continue."
exit -1
fi
RETVAL=$?
CATALINA_HOME="/usr/local/root/tomcat"  # tomcat 安装目录,你安装在什么目录下就复制什么目录
case "$1" in
start)
if [ -f $CATALINA_HOME/bin/startup.sh ];
then
echo $"Starting Tomcat"
$CATALINA_HOME/bin/startup.sh
fi
;;
stop)
if [ -f $CATALINA_HOME/bin/shutdown.sh ];
then
echo $"Stopping Tomcat"
$CATALINA_HOME/bin/shutdown.sh
fi
;;
*)
echo $"Usage: $0 {start|stop}"
exit 1
;;
esac
exit $RETVAL
```
```bash
chmod 755 /etc/rc.d/init.d/tomcat
chkconfig --add /etc/rc.d/init.d/tomcat
```
以上所有工作顺利进行并且没有报错,则配置完成,你可以输入命令 `service tomcat start` 和 `service tomcat stop` 进行验证
**修改端口号**
进入 tomcat 的 conf 目录下,修改 server.xml 文件,可以修改端口,默认 8080
**设置用户名和密码登录**
修改 conf 目录下 tomcat-users.xml (部分版本是 tomcat-user.xml)
```vim
```
```bash
service tomcat stop
service tomcat start
```
如果爆 403 错误,就注释掉 Tomcat/webapps/manager/META-INF/context.xml 文件中内容
```xml
-->
```
自行重启服务
**发布测试**
tomcat 默认的发布 web 项目的目录是:webapps
将导出的 war 包直接上传到 webapps 根目录下,随着 tomcat 的启动,war 包可以自动被解析.
然后调用路径查询是否安装成功
**隐藏 tomcat 版本号**
需要反编译后修改 catalina.jar
```
cd lib
```
使用 `unzip catalina.jar` 解压jar包
进入org/apache/catalina/util 编辑配置文件ServerInfo.properties
```
cd org/apache/catalina/util
vim ServerInfo.properties
```
修改以下几个配置项
```
server.info=Apache Tomcat
server.number=0.0.0.0
server.built=Mar 9 2099 00:00:00 UTC
```
将修改后的信息压缩回jar包
```
cd ../../../../
jar uvf catalina.jar org/apache/catalina/util/ServerInfo.properties
```
重启Tomcat
---
### Wordpress
> WordPress 是一个开源的内容管理系统(CMS),允许用户构建动态网站和博客.
**官网**
- https://wordpress.org/
**安装**
下载 WordPress 安装包并解压
```bash
wget https://wordpress.org/latest.tar.gz
tar -xzvf latest.tar.gz
```
创建 WordPress 数据库和一个用户
```bash
yum install -y mariadb mariadb-server
systemctl start mariadb
systemctl enable mariadb
mysql_secure_installation
mysql -u root -p
# 创建一个专给 WordPress 存数据的数据库
MariaDB [(none)]> create database f8x_info; # 最后的"f8x_info"为数据库名
# 创建用于 WordPress 对应用户
MariaDB [(none)]> create user f8x@localhost identified by 'password';   # "f8x"对应创建的用户,"password"内填写用户的密码
# 分别配置本地登录和远程登录权限
MariaDB [(none)]> grant all privileges on f8x_info.* to f8x@'localhost' identified by 'password';
MariaDB [(none)]> grant all privileges on f8x_info.* to f8x@'%' identified by 'password';
# 刷新权限
MariaDB [(none)]> flush privileges;
```
配置 PHP
```bash
# 安装 PHP 源
rpm -ivh https://mirror.webtatic.com/yum/el7/epel-release.rpm
rpm -ivh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
# 安装 PHP7.0
yum install -y php70w
yum install -y php70w-mysql
yum install -y httpd
# 重启 Apache
systemctl restart httpd