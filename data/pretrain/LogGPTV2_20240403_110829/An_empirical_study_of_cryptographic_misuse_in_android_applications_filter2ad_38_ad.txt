# Scope of This Work

Historically, developers have often faced challenges when implementing their own cryptographic solutions, as these tend to be less secure than well-tested library functions. Therefore, any custom cryptographic implementation is likely to be less secure than the cryptographic algorithms provided by the operating system.

## References
1. [Scoreloop](http://www.scoreloop.com/)
2. [Google Play Licensing](http://developer.android.com/google/play/licensing/index.html)
3. [LVL and AESObfuscator Source Code](http://code.google.com/p/marketlicensing/source/browse/library/src/com/android/vending/licensing/AESObfuscator.java)

## Symmetric Encryption Schemes Usage

The following table shows the distribution of frequently used symmetric encryption schemes in our dataset. Schemes marked with an asterisk (*) are used in ECB mode by default.

| Scheme | Occurrences |
| --- | --- |
| AES/CBC/PKCS5Padding | 5,878 |
| AES | 4,803 |
| DES/ECB/NoPadding | 1,151 |
| DES | 741 |
| DESede | 501 |
| DESede/ECB/PKCS5Padding | 473 |
| AES/CBC/NoPadding | 468 |
| AES/ECB/PKCS5Padding | 443 |
| AES/CBC/PKCS7Padding | 235 |
| DES/ECB/PKCS5Padding | 221 |
| AES/ECB/NoPadding | 220 |
| DES/CBC/PKCS5Padding | 205 |
| AES/ECB/PKCS7Padding | 155 |
| AES/CFB8/NoPadding | 104 |

### Recent Findings

Recent events have highlighted that the assumption that cryptographic primitives are implemented correctly can be violated. However, CryptoLint's primary focus is to identify applications that misuse these primitives, rather than identifying flawed implementations themselves.

## Mitigations

We now discuss potential countermeasures to reduce the prevalence of misused cryptographic primitives in Android applications. The main issues causing these problems are:
1. APIs that do not enforce semantic contracts (e.g., IVs should be unique and non-predictable).
2. Poor default configurations in APIs.
3. Insufficient API documentation.

### Semantic Contracts in APIs

One approach is to use tools like CryptoLint to vet software, for example, as part of the Google Play marketplace. Additionally, compilers can provide safety warnings for typically insecure method calls to the crypto API. For instance, a call to the ECB encryption mode could raise a warning similar to how the `strcpy` function is flagged by the Microsoft C compiler.

### Poor Default Configurations in APIs

Changing default configurations in APIs is challenging, especially considering backward compatibility. However, due to the negative characteristics of current default values, we believe that choosing better defaults would mitigate many problems leading to misused cryptography.

### API Documentation

The Java and Android API documentation should suggest sane defaults, such as CBC mode with a random IV, which is secure. Furthermore, the documentation should explicitly state the default values. For example, the `Cipher` class states that a block cipher mode can be requested but fails to mention that ECB mode will be used by default if no mode is specified.

Although Google regularly updates BouncyCastle revisions in the Android source tree, not all enhancements within the security provider are exposed to applications via the SDK. For instance, BouncyCastle has supported Galois Counter Mode (GCM) for authenticated encryption with associated data since 2008, but the latest Android version (Jelly Bean 4.3 at the time of writing) does not expose the necessary APIs for using associated data with authenticated encryption modes. Additionally, the Android documentation does not mention authenticated encryption at all.

## Related Work

The popularity of the Android operating system has attracted the attention of many researchers. TaintDroid by Enck et al. tracks the propagation of sensitive information through Android applications. Hoﬀmann et al. present SAAF, a static analysis framework for examining Android applications. The Android permission system has been the focus of several scientific publications, serving as the first line of defense in the Android security landscape. Cryptographic primitives add another layer of defense by encrypting data before storing or transmitting it. To the best of our knowledge, CryptoLint is the first approach that investigates whether application developers use cryptographic primitives correctly.

Zhou and Vidas investigate malicious applications in the Android ecosystem, while CryptoLint focuses on identifying benign applications that misuse cryptographic primitives. Our work is similar to the Lint program checker, which identifies common programming mistakes. LCLint uses source-code analysis and manual annotations to identify buffer overflows in C programs. Unlike these approaches, CryptoLint operates on compiled Android applications.

Chen and Wagner presented MOPS to examine security properties of software at compile time. CryptoLint is similar to MOPS but operates on compiled applications. Fahl et al. presented MaloDroid, which identifies Android applications that do not perform necessary SSL certificate validation. While MaloDroid targets SSL certificate verification, CryptoLint checks for broader cryptographic properties.

Mitchell et al. present Murϕ, a tool for detecting vulnerabilities in cryptographic protocols through state enumeration. Bhargavan et al. illustrate how verification tools can show the security of cryptographic protocol implementations. Such an approach is desirable but may be unreasonable to require from all Android application developers. Similar to these approaches, we treat encryption primitives as black boxes, trusting their security and implementations.

Similar to Whitten et al. and Clark and Goodspeed, we analyze the usability of cryptography. While their work focuses on end-users, CryptoLint focuses on the usability of cryptographic APIs for application developers. Our findings indicate that both end-users and developers lack the proper knowledge or support to make correct decisions when applying cryptography.

## Conclusions and Future Work

CryptoLint checks real-world Android applications for violations of six security rules. With this automated approach, we identified 10,327 applications (88% of our dataset) that violate at least one of these rules. One contributing factor is the undocumented insecure default configuration of the BouncyCastle cryptographic security provider used on the Android platform. Based on our large-scale analysis, we have illustrated different mitigation approaches that we believe would benefit the overall security of the Android ecosystem.

We are currently working on making CryptoLint a publicly accessible online service where developers and users can submit Android applications for evaluation. In the future, we plan to extend CryptoLint with security rules that capture the misuse of asymmetric cryptography.

## Acknowledgements

This material is based on research sponsored by DARPA under CSSP #23143.2.1080246 and agreement number FA8750-12-2-0101. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon.

## References

1. The Legion of the Bouncy Castle. <http://bouncycastle.org/>, 2013.
2. Abadi, M. and Warinschi, B. Password-Based Encryption Analyzed. In Proceedings of the International Colloquium on Automata, Languages, and Programming, pages 664–676. Springer, 2005.
3. Apple, I. iOS Security Contents, 2012.
4. Bellare, M., Kohno, T., and Namprempre, C. Authenticated Encryption in SSH: Provably Fixing the SSH Binary Packet Protocol. In Proceedings of the 9th ACM Conference on Computer and Communications Security, pages 1–11, 2002.
5. Bellare, M., Ristenpart, T., and Tessaro, S. Multi-instance Security and Its Application to Password-Based Cryptography. In Proceedings of the 32nd Annual Cryptology Conference, pages 312–329. Springer, 2012.
6. Bellare, M. and Rogaway, P. Course notes for Introduction to Modern Cryptography. <cseweb.ucsd.edu/users/mihir/cse207/classnotes.html>.
7. Bhargavan, K., Fournet, C., Corin, R., and Zalinescu, E. Cryptographically Verified Implementations for TLS. In Proceedings of the 15th ACM Conference on Computer and Communications Security, pages 459–468, 2008.
8. Chen, H. and Wagner, D. MOPS: An Infrastructure for Examining Security Properties of Software. In Proceedings of the 9th ACM Conference on Computer and Communications Security, pages 235–244, 2002.
9. Clark, S. and Goodspeed, T. Why (Special Agent) Johnny (Still) Can’t Encrypt: A Security Analysis of the APCO Project 25 Two-Way Radio System. In Proceedings of the 20th USENIX Security Symposium, 2011.
10. Cytron, R., Ferrante, J., Rosen, B. K., Wegman, M. N., and Zadeck, F. K. Efficiently Computing Static Single Assignment Form and the Control Dependence Graph. ACM Transactions on Programming Languages and Systems, 13(4):451–490, Oct. 1991.
11. Dean, J., Grove, D., and Chambers, C. Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis. In Proceedings of the 9th European Conference on Object-Oriented Programming, pages 77–101. Springer, 1995.
12. Desnos, A. Androguard: Reverse Engineering, Malware and Goodware Analysis of Android Applications ... and More (Ninja!). <http://code.google.com/p/androguard/>.
13. Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J., McDaniel, P., and Sheth, A. N. TaintDroid: An Information-Flow Tracking System for Real-Time Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation, 2010.
14. Enck, W., Ongtang, M., and McDaniel, P. On Lightweight Mobile Phone Application Certification. In Proceedings of the 16th ACM Conference on Computer and Communications Security, pages 235–245, 2009.
15. Fahl, S., Harbach, M., Muders, T., Smith, M., Baumgärtner, L., and Freisleben, B. Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security. In Proceedings of the 19th ACM Conference on Computer and Communications Security, pages 50–61, 2012.
16. Felt, A. P., Chin, E., Hanna, S., Song, D., and Wagner, D. Android Permissions Demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security, pages 627–638, 2011.
17. Hoffmann, J., Ussath, M., Holz, T., and Spreitzenbarth, M. Slicing Droids: Program Slicing for Smali Code. In Proceedings of the 28th ACM Symposium on Applied Computing, 2013.
18. Johnson, S. C. Lint, a C Program Checker. Technical report, 1978.
19. Kaliski, B. PKCS #5: Password-based Cryptography Specification Version 2.0. <http://tools.ietf.org/html/rfc2898>.
20. Klyubin, A. Some SecureRandom Thoughts. <http://android-developers.blogspot.co.uk/2013/08/some-securerandom-thoughts.html>, 2013.
21. Larochelle, D. and Evans, D. Statically Detecting Likely Buffer Overflow Vulnerabilities. In Proceedings of the 10th USENIX Security Symposium, pages 177–190, 2001.
22. Mitchell, J. C., Mitchell, M., and Stern, U. Automated Analysis of Cryptographic Protocols Using Murphi. In Proceedings of the IEEE Symposium on Security and Privacy, pages 141–151, 1997.
23. Möller, B. TLS Insecurity (Attack on CBC). <http://www.openssl.org/~bodo/tls-cbc.txt>, 2001.
24. Nauman, M., Khan, S., and Zhang, X. Apex: Extending Android Permission Model and Enforcement with User-Defined Runtime Constraints. In Proceedings of the 5th ACM Symposium on Information, Computer, and Communications Security, pages 328–332, 2010.
25. Pearce, P., Felt, A. P., Nunez, G., and Wagner, D. AdDroid: Privilege Separation for Applications and Advertisers in Android. In Proceedings of the 7th ACM Symposium on Information, Computer, and Communications Security, 2012.
26. Vidas, T., Votipka, D., and Christin, N. All Your Droid Are Belong To Us: A Survey of Current Android Attacks. In Proceedings of the 5th USENIX Workshop on Offensive Technologies, 2011.
27. Weiser, M. Program Slicing. In Proceedings of the 5th International Conference on Software Engineering, pages 439–449, 1981.
28. Whitten, A. and Tygar, J. Why Johnny Can’t Encrypt: A Usability Evaluation of PGP 5.0. In Proceedings of the 8th USENIX Security Symposium, 1999.
29. Zhou, Y., Wang, Z., Zhou, W., and Jiang, X. Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets. In Proceedings of the 19th Annual Network and Distributed System Security Symposium, 2012.