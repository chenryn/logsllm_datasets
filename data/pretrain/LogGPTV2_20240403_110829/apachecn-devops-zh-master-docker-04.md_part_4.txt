 "MacAddress": "02:42:ac:12:00:02",
 "IPv4Address": "172.18.0.2/16",
 "IPv6Address": ""
 }
 },
 "Options": {},
 "Labels": {}
 }
]
```
如您所见，它包含 IPAM 部分中使用的网络寻址信息，以及网络中运行的两个容器的详细信息。
**IP address management (IPAM)** is a means of planning, tracking, and managing IP addresses within the network. IPAM has both DNS and DHCP services, so each service is notified of changes in the other. For example, DHCP assigns an address to `container2`. The DNS service is then updated to return the IP address assigned by DHCP whenever a lookup is made against `container2`.
在进入下一部分之前，我们应该删除一个应用和相关网络。为此，请运行以下命令:
```
$ docker container stop moby-counter2 redis2
$ docker container prune
$ docker network prune
```
这将删除容器和网络，如下图所示:
![](img/f90ab3a9-4e23-474b-bb23-6ca5f25a95e3.png)
如本节开头所述，这只是默认的网络驱动程序，这意味着我们的网络仅限于单个 Docker 主机上可用。在后面的章节中，我们将研究如何在多个主机甚至提供商之间扩展我们的 Docker 网络。
# Docker 卷
如果您一直在关注上一节中的网络示例，您应该运行两个容器，如下图所示:
![](img/d8736f3a-5221-4505-8f87-be8f4880a91f.png)
当你在浏览器中进入应用时(在`http://localhost:8080/`)，你可能会看到屏幕上已经有了 Docker 徽标。让我们停下来，然后移除 Redis 容器，看看会发生什么。为此，请运行以下命令:
```
$ docker container stop redis
$ docker container rm redis
```
如果您打开浏览器，您可能会注意到 Docker 图标已经淡出背景，屏幕中央有一个动画加载器。这基本上是为了表明应用正在等待重新建立到 Redis 容器的连接:
![](img/877b5f80-6b36-4d49-be89-2f09a51aea48.png)
使用以下命令重新启动 Redis 容器:
```
$ docker container run -d --name redis --network moby-counter redis:alpine
```
这将恢复连接；但是，当您开始与应用交互时，您以前的图标会消失，留给您的将是一片空白。快速在屏幕上添加更多的徽标，这次以不同的模式放置，就像我在这里所做的那样:
![](img/ae34105f-21e6-4e8e-ad8d-98e7ebebdb46.png)
一旦有了模式，让我们通过运行以下命令再次删除 Redis 容器:
```
$ docker container stop redis
$ docker container rm redis
```
正如我们在本章前面所讨论的，丢失容器中的数据是意料之中的。然而，当我们使用官方的 Redis 映像时，我们实际上并没有丢失任何数据。
我们使用的官方 Redis 映像的 Dockerfile 如下所示:
```
FROM alpine:3.8
RUN addgroup -S redis && adduser -S -G redis redis
RUN apk add --no-cache 'su-exec>=0.2'
ENV REDIS_VERSION 4.0.11
ENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-4.0.11.tar.gz
ENV REDIS_DOWNLOAD_SHA fc53e73ae7586bcdacb4b63875d1ff04f68c5474c1ddeda78f00e5ae2eed1bbb
RUN set -ex; \
 \
 apk add --no-cache --virtual .build-deps \
 coreutils \
 gcc \
 jemalloc-dev \
 linux-headers \
 make \
 musl-dev \
 ; \
 \
 wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; \
 echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -; \
 mkdir -p /usr/src/redis; \
 tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \
 rm redis.tar.gz; \
 \
 grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \
 sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h; \
 grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \
 \
 make -C /usr/src/redis -j "$(nproc)"; \
 make -C /usr/src/redis install; \
 \
 rm -r /usr/src/redis; \
 \
 runDeps="$( \
 scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
 | tr ',' '\n' \
 | sort -u \
 | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
 )"; \
 apk add --virtual .redis-rundeps $runDeps; \
 apk del .build-deps; \
 \
 redis-server --version
RUN mkdir /data && chown redis:redis /data
VOLUME /data
WORKDIR /data
COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]
EXPOSE 6379
CMD ["redis-server"]
```
如果您注意到，在文件的末尾，有声明的`VOLUME`和`WORKDIR`指令；这意味着当我们的容器启动时，Docker 实际上创建了一个卷，然后从该卷中运行`redis-server`。
我们可以通过运行以下命令看到这一点:
```
$ docker volume ls
```
这应该至少显示两个卷，如下图所示:
![](img/a53d746d-cbc9-4f6d-8a9c-89758fcc9bb8.png)
可以看到，卷名一点都不太友好；事实上，它是卷的唯一 ID。那么，当我们启动我们的 Redis 容器时，如何使用这个卷呢？
我们从 Dockerfile 中知道该卷是在容器内的`/data`处挂载的，所以我们所要做的就是告诉 Docker 在运行时应该使用哪个卷以及应该挂载到哪里。
为此，请运行以下命令，确保用您自己的卷标识替换该卷标识:
```
$ docker container run -d --name redis -v c2e417eab8fa20944582e2de525ab87b749099043b8c487194b7b6415b537e6a:/data --network moby-counter redis:alpine 
```
如果您的应用页面在您启动 Redis 容器后仍然试图重新连接到 Redis 容器，那么您可能需要刷新浏览器；如果做不到这一点，通过运行`docker container restart moby-counter`重新启动应用容器，然后再次刷新浏览器应该可以工作。
您可以通过运行以下命令附加容器并在`/data`中列出文件来查看卷的内容:
```
$ docker container exec redis ls -lhat /data
```
这将返回如下内容:
```
total 12
drwxr-xr-x 1 root root 4.0K Aug 26 13:30 ..
drwxr-xr-x 2 redis redis 4.0K Aug 26 12:44 .
-rw-r--r-- 1 redis redis 392 Aug 26 12:44 dump.rdb
```
您也可以移除正在运行的容器并重新启动它，但这次使用的是第二个卷的 ID。从浏览器中的应用可以看出，您最初创建的两种不同模式是完整的。
最后，您可以用自己的音量来覆盖音量。要创建卷，我们需要使用`volume`命令:
```
$ docker volume create redis_data
```
一旦创建，我们将能够使用`redis_data`卷来存储我们的 Redis，方法是在移除 Redis 容器之后运行以下命令，该容器可能已经在运行:
```
$ docker container run -d --name redis -v redis_data:/data --network moby-counter redis:alpine
```
然后，我们可以根据需要重用该卷，下面的屏幕显示了正在创建的卷，该卷连接到一个容器，然后该容器被移除并最终重新连接到一个新容器:
![](img/587c6e86-e8de-4dca-bf50-f3e35dfe9776.png)
像`network`命令一样，我们可以使用`inspect`命令查看更多关于卷的信息，如下所示:
```
$ docker volume inspect redis_data
```
前面的代码将产生如下输出:
```
[
 {
 "CreatedAt": "2018-08-26T13:39:33Z",
 "Driver": "local",
 "Labels": {},
 "Mountpoint": "/var/lib/docker/volumes/redis_data/_data",
 "Name": "redis_data",
 "Options": {},
 "Scope": "local"
 }
]
```
您可以看到，使用本地驱动程序时，一个卷没有太多内容；需要注意的一件有趣的事情是，数据存储在 Docker 主机上的路径是`/var/lib/docker/volumes/redis_data/_data`。如果您使用 Docker for Mac 或 Docker for Windows，则此路径将是您的 Docker 主机虚拟机，而不是您的本地计算机，这意味着您不能直接访问卷内的数据。
不过，别担心。我们将在后面的章节中研究 Docker 卷以及如何与数据交互。现在，我们应该收拾一下。首先，移除两个容器和网络:
```
$ docker container stop redis moby-counter $ docker container prune
$ docker network prune
```
然后，我们可以通过运行以下命令来删除卷:
```
$ docker volume prune
```
您应该会看到类似以下终端输出的内容:
![](img/8a083f82-ac74-40d9-ad79-af59bc811b43.png)
我们现在又重新开始了，所以我们可以进入下一章。
# 摘要
在本章中，我们研究了如何使用 Docker 命令行客户端来管理单个容器，并在它们自己的隔离 Docker 网络中启动多容器应用。我们还讨论了如何使用 Docker 卷将数据保存在文件系统中。到目前为止，在本章和前几章中，我们已经详细介绍了我们将在以下章节中使用的大多数可用命令:
```
$ docker container [command]
$ docker network [command]
$ docker volume [command]
$ docker image [command]
```
现在我们已经介绍了在本地使用 Docker 的四个主要领域，我们可以开始研究如何使用 Docker Compose 创建更复杂的应用。
在下一章中，我们将了解另一个核心 Docker 工具，称为 Docker Compose。
# 问题
1.  要查看所有运行和停止的容器，必须在`docker container ls`后附加哪个标志？
2.  对或错:`-p 8080:80`标志将容器上的端口 80 映射到主机上的端口 8080。
3.  解释使用 *Ctrl* + *C* 退出已连接的容器与使用带有`--sig-proxy=false`的连接命令的区别。
4.  对或错:`exec`命令将您附加到运行过程中。
5.  当另一个网络中已经有一个使用相同 DNS 名称运行的容器时，您会使用哪个标志向容器添加别名，以便它响应 DNS 请求？
6.  您会使用哪个命令来查找 Docker 卷的详细信息？
# 进一步阅读
您可以在以下链接中找到更多关于我们在本章中讨论的一些主题的信息:
*   名称生成器代码:[https://github . com/Moby/Moby/blob/master/pkg/Names Generator/Names-Generator . go](https://github.com/moby/moby/blob/master/pkg/namesgenerator/names-generator.go)
*   cgroups 冰柜功能:[https://www . kernel . org/doc/Documentation/cgroup-v1/冰柜-子系统. txt](https://www.kernel.org/doc/Documentation/cgroup-v1/freezer-subsystem.txt)
*   理纱:[https://理纱. io/](https://redis.io/)