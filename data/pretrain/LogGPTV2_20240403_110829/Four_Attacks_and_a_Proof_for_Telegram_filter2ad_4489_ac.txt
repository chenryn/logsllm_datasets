in [14] without proof of security. Attacks relying on key/IV
reuse were described in [15], [16]. Fig. 4 is somewhat
nonstandard, as it includes the IV (𝑐0, 𝑚0) as part of the key
material. However, in this work, we only require one-time
security of SE, so keys and IVs are generated together and the
IV is not included as part of the ciphertext.
IGE[E].Enc(𝑘, 𝑚)
For 𝑖 = 1, . . . , 𝑡 do
⊕𝑚𝑖−1
Return 𝑐1 (cid:107) . . . (cid:107) 𝑐𝑡
𝑐𝑖 ← E.Ev(𝐾, 𝑚𝑖 ⊕ 𝑐𝑖−1)
IGE[E].Dec(𝑘, 𝑐)
For 𝑖 = 1, . . . , 𝑡 do
⊕𝑐𝑖−1
Return 𝑚1 (cid:107) . . . (cid:107) 𝑚𝑡
𝑚𝑖 ← E.Inv(𝐾, 𝑐𝑖 ⊕ 𝑚𝑖−1)
Figure 4: Construction of IGE[E] as SE from block cipher E. Let
𝑡 be the number of blocks of 𝑚 (or 𝑐), i.e. 𝑚 = 𝑚1 (cid:107) . . . (cid:107) 𝑚𝑡.
Parse 𝐾 (cid:107) 𝑐0 (cid:107) 𝑚0 ← 𝑘 where |𝐾| = E.kl, |𝑐0| = |𝑚0| = E.ol.
8) SHA hash functions: Let SHA-1 : {0, 1}∗ → {0, 1}160
and SHA-256 : {0, 1}∗ → {0, 1}256 be the hash functions
: {0, 1}160 × {0, 1}512 → {0, 1}160
of [17] and let ℎ160
and ℎ256 : {0, 1}256 × {0, 1}512 → {0, 1}256 be their com-
pression functions. Let SHACAL-1 [18] be the block cipher
deﬁned by SHACAL-1.kl = 512, SHACAL-1.ol = 160 and
ℎ160(𝑘, 𝑥) = 𝑘 ˆ+ SHACAL-1.Ev(𝑥, 𝑘), where ˆ+ is a modular
addition over 32-bit words. Let SHACAL-2 be the block cipher
deﬁned by SHACAL-2.kl = 512, SHACAL-2.ol = 256 and
ℎ256(𝑘, 𝑥) = 𝑘 ˆ+ SHACAL-2.Ev(𝑥, 𝑘).
III. Bidirectional channels
A. Our formal model in context of prior work
We model Telegram’s MTProto protocol as a bidirectional
cryptographic channel. A channel provides a method for two
users to exchange messages, and it is bidirectional [19] when
both users can send and receive messages. There is a signiﬁcant
body of prior work on primitives that can be thought of as
special cases of a bidirectional channel, building on the early
work of [20] which introduced stateful security notions for
symmetric encryption and used them to analyse SSH. MTProto
uses distinct but related secret keys to send messages in the
opposite directions on the channel, so the simpler primitives
are not sufﬁcient for our analysis.
MTProto cryptographically enforces a complex set of rules
regarding the order in which messages can be decrypted,
allowing out-of-order delivery. Channels are normally required
to satisfy the strongest possible integrity notion, ensuring
strict in-order delivery. But some prior work considers relaxed
integrity requirements, deﬁning security notions that permit
message replay, reordering, or omission [20], [21], [22]. Fine-
grained message delivery rules are captured in [23]. A more
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
90
powerful framework for robust channels is deﬁned in [8]. None
of this work targets bidirectional channels.
We extend the framework of [8], lifting it to the bidirectional
setting. Most notably, our framework uses more information
to make the support decisions. These decisions are based on
per-user communication transcripts. For each sent or received
ciphertext, a user’s transcript includes a plaintext-ciphertext
pair, where one of them can be ⊥ to denote a failure. Keeping
track of failures allows us to capture ﬁne-grained notions of
robustness; keeping track of plaintexts allows to deﬁne simpler
security deﬁnitions. In the full version of this work we provide
a detailed comparison between our framework and that of [8].
B. Deﬁnitions of channels and support functions
We refer to the two users of a channel as I and R. These
will map to client and server in the setting of MTProto. We
use u ∈ {I, R} as a variable to represent an arbitrary user
and u to represent the other user, meaning u denotes the sole
element of {I, R} \ {u}. We use stu to represent the internal
state of user u.
Deﬁnition 1. A channel CH speciﬁes algorithms CH.Init,
CH.Send and CH.Recv, where CH.Recv is deterministic. Asso-
ciated to CH is a plaintext space CH.MS and a randomness
space CH.SendRS of CH.Send. The initialisation algorithm
CH.Init returns I’s and R’s initial states stI and stR. The
sending algorithm CH.Send takes stu for some u ∈ {I, R}, a
plaintext 𝑚 ∈ CH.MS, and auxiliary information aux to return
the updated state stu and a ciphertext 𝑐, where 𝑐 =⊥ may be
used to indicate a failure to send. We may surface random
coins 𝑟 ∈ CH.SendRS as an additional input to CH.Send.
The receiving algorithm CH.Recv takes stu, 𝑐 and auxiliary
information aux to return the updated state stu and a plaintext
𝑚 ∈ CH.MS ∪ {⊥}, where ⊥ indicates a failure to recover a
plaintext. The syntax used for the algorithms of CH is given in
Fig. 5.
(stI , stR) ←$ CH.Init()
(stu, 𝑐) ← CH.Send(stu, 𝑚, aux; 𝑟)
(stu, 𝑚) ← CH.Recv(stu, 𝑐, aux)
Figure 5: Syntax of the constituent algorithms of channel CH.
The abstract auxiliary information ﬁeld aux will be used
to associate timestamps to each sent and received message. It
should not be thought of as an associated data that needs to
be authenticated; we do not model associated data.
We deﬁne a support transcript to represent a record of all
messages sent and received by a single user on a channel. Each
transcript entry includes a plaintext 𝑚 and a label (denoted
by label); we use labels to distinguish between exchanged
user messages that encrypt or encode different plaintexts.
Depending on the level of abstraction, for any 𝑚 we will
use the corresponding ciphertext or message encoding as its
label.4 But we will make use only of the equality patterns that
4This will be a ciphertext 𝑐 when channel security notions are considered.
This will be a message encoding 𝑝 when properties of the message encoding
schemes (deﬁned in Section III-D) are considered.
arise between labels, not of the exact values. Transcripts can
include entries with plaintexts 𝑚 = ⊥ to capture that a received
message was rejected. This allows us to model a range of
channel behaviours in the event of an error (from terminating
after the ﬁrst error to full recovery). Transcript entries can also
include label =⊥, e.g. to indicate that a plaintext could not be
sent over a terminated channel.
Deﬁnition 2. A support transcript tru for user u ∈ {I, R} is
a list of entries of the form (op, 𝑚, label, aux), where op ∈
{sent, recv}. An entry with op = sent indicates that user u
attempted to send a message that encrypts or encodes plaintext
𝑚 with auxiliary information aux, associated to label. An
entry with op = recv indicates that user u received a message
associated to label with auxiliary information aux, and used
it to recovered plaintext 𝑚.
We deﬁne a support function supp that uses user support
transcripts to determine whether a user u ∈ {I, R} should
accept an incoming message from u that is associated to label.
If the message should be accepted, then supp must return
a plaintext 𝑚∗ to indicate that u is expected to recover 𝑚∗
from the incoming message; otherwise supp must return ⊥ to
indicate that the message is expected to be rejected. We also
let supp take the auxiliary information aux as input so that
timestamps can be captured in our deﬁnitions.
Deﬁnition 3. A support function supp is a function with syntax
supp(u, tru, tru, label, aux) → 𝑚∗ where u ∈ {I, R}, and tru,
tru are support transcripts for users u and u. It indicates that,
according to the transcripts, user u is expected to recover
plaintext 𝑚∗ from the incoming message that is associated to
label with auxiliary information aux.
A support function does not take a channel’s state informa-
tion as input, so it can only rely on equality patterns between
labels across the transcripts of both users. This is sufﬁcient
to specify message delivery rules that can capture attempted
forgeries, replays, reordering and omissions.5 Thus we will
use support functions to specify the permissible adversarial
behaviour on the network that should be supported by a channel.
In the full version of this work we formalise two correctness
properties of a support function supp, but we do not mandate
that they must always be met. Both properties were also
considered in [8]. The order correctness requires that in-order
delivery is supported in either direction if each message is
assigned a distinct label.6 The integrity of supp requires that
it always returns ⊥ if the queried label does not appear in tru.
C. Correctness and security of channels
For the following properties, consider the games in Fig. 6. We
allow the adversary to control the randomness used by CH.Send.
We show our games to be equivalent to an authenticated
encryption style security notion for channels in the full version
of this work.
5For example, the supp. function in Fig. 23 mandates strict in-order delivery.
6[8] deﬁnes this notion as a part of the channel correctness game. We note
that this notion cannot be met by some non-robust channels, e.g. those that
close the connection once a number of errors occur.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
91
CH,supp,F
Game Gcorr
win ← false ; (stI , stR) ←$ CH.Init()
F Send,Recv(stI , stR) ; Return win
Send(u, 𝑚, aux, 𝑟)
(stu, 𝑐) ← CH.Send(stu, 𝑚, aux; 𝑟)
tru ← tru (cid:107) (sent, 𝑚, 𝑐, aux) ; Return 𝑐
Recv(u, 𝑐, aux)
𝑚∗ ← supp(u, tru, tru, 𝑐, aux)
If 𝑚∗ = ⊥ then return ⊥
(stu, 𝑚) ← CH.Recv(stu, 𝑐, aux)
tru ← tru (cid:107) (recv, 𝑚, 𝑐, aux)
If 𝑚∗ ≠ 𝑚 then win ← true
Return 𝑚
CH,supp,F
Game Gint
win ← false ; (stI , stR) ←$ CH.Init()
F Send,Recv ; Return win
Send(u, 𝑚, aux, 𝑟)
(stu, 𝑐) ← CH.Send(stu, 𝑚, aux; 𝑟)
tru ← tru (cid:107) (sent, 𝑚, 𝑐, aux) ; Return 𝑐
Recv(u, 𝑐, aux)
(stu, 𝑚) ← CH.Recv(stu, 𝑐, aux)
𝑚∗ ← supp(u, tru, tru, 𝑐, aux)
tru ← tru (cid:107) (recv, 𝑚, 𝑐, aux)
If 𝑚 ≠ 𝑚∗ then win ← true
Return 𝑚
CH,D
Game Gind
𝑏 ←$ {0, 1} ; (stI , stR) ←$ CH.Init()
𝑏(cid:48) ←$ DCh,Recv ; Return 𝑏(cid:48) = 𝑏
Ch(u, 𝑚0, 𝑚1, aux, 𝑟)
If |𝑚0| ≠ |𝑚1| then return ⊥
(stu, 𝑐) ← CH.Send(stu, 𝑚𝑏, aux; 𝑟)
Return 𝑐
Recv(u, 𝑐, aux)
(stu, 𝑚) ← CH.Recv(stu, 𝑐, aux)
Return ⊥
Figure 6: Correctness of channel CH; integrity of channel CH; indistinguishability of channel CH.
CH,supp(F) = Pr[Gcorr
1) Correctness: Consider adversary F in game Gcorr
CH,supp,F
associated to a channel CH and a support function supp. The
advantage of F in breaking the correctness of CH with respect
CH,supp,F]. The
to supp is deﬁned as Advcorr
game initialises users I and R. The adversary is given their
initial states and gets access to a sending oracle Send and to
a receiving oracle Recv. Calling Send(u, 𝑚, aux, 𝑟) encrypts
the plaintext 𝑚 with auxiliary data aux and randomness 𝑟 from
user u to the other user u; the resulting tuple (sent, 𝑚, 𝑐, aux)
is added to the sender’s transcript tru. Recv can only be
called on honestly produced ciphertexts, meaning it exits
when supp returns 𝑚∗ ≠⊥. Calling Recv(u, 𝑐, aux) thus
recovers the plaintext 𝑚∗ from the support function, decrypts
the corresponding ciphertext 𝑐 and adds (recv, 𝑚, 𝑐, aux) to
the receiver’s transcript tru; the game veriﬁes that the recovered
plaintext 𝑚 is equal to the originally encrypted plaintext 𝑚∗.
If the adversary can cause the channel to output a different
𝑚, then the adversary wins. This game captures the minimal
requirement one would expect from a communication channel:
honestly sent ciphertexts should decrypt to the correct plaintexts.
It is similar in spirit to the correctness game of [8].
2) Integrity: Consider adversary F in game Gint
CH,supp,F
associated to a channel CH and a support function supp. The
advantage of F in breaking the integrity of CH with respect
CH,supp,F]. The
to supp is deﬁned as Advint
adversary gets access to oracles Send and Recv (but not
to the users’ states). Both calls proceed as in the correctness
game except that now Recv does not limit F to querying
only honestly produced ciphertexts. This captures the intuition
that the adversary can manipulate ciphertexts on the network
in an attempt to create a forgery. Take supp(u, tru, tru, 𝑐, aux)
that returns 𝑚∗ iff (sent, 𝑚∗, 𝑐, aux) ∈ tru, and returns ⊥
otherwise. Then integrity with respect to supp mandates that a
conventional ciphertext forgery is impossible, but all ciphertext
replays, reordering, and omissions are permitted by the channel.
3) Conﬁdentiality: Consider adversary D in game Gind
CH,D
associated to a channel CH. The advantage of D in breaking
CH (D) = 2 ·
the IND-security of CH is deﬁned as Advind
Pr[Gind
CH,D] − 1. The adversary can query the challenge oracle
CH,supp(F) = Pr[Gint
Ch(u, 𝑚0, 𝑚1, aux, 𝑟) as an encryption oracle for user u with
two plaintexts 𝑚0, 𝑚1 of the same size, auxiliary information
aux and randomness 𝑟, to obtain the ciphertext 𝑐 that encrypts
𝑚𝑏. The adversary wins if it can guess the challenge bit 𝑏. The
game also contains a Recv oracle. It is needed to model that
each user’s state stu may be updated every time a ciphertext
is processed, potentially inﬂuencing subsequent encryption
operations. However, the Recv oracle does not return any
information directly to D.
D. Message encoding schemes
At its core, a channel can be expected to have a mechanism
that handles encoding of plaintexts into payloads, and decoding