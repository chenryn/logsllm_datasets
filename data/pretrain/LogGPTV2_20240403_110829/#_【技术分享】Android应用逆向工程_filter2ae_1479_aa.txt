# 【技术分享】Android应用逆向工程
##### 译文声明
本文是翻译文章，文章来源：offensivepentest.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[L0phTg](http://bobao.360.cn/member/contribute?uid=2722694252)
预估稿费：260RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**序**
阅读本文最好花费 **45Min** ~
你经常在用 Burp
拦截信息的时候很迷茫么？你经常在分析用加密的数据进行通信的App，对于需要理解它的数据而疑惑么？在本文，我将会分享很多方法来用于逆向分析APK。我们将会对目标APP采用动态和静态的分析方法。
我创建了一个简单的APP作为分析目标，它的功能只是单纯地对我们输入的数据进行验证，如果用户输入正确的话，将会在屏幕上显示“Congratulations“。
我们先看一下这个应用的源代码以便于我们一会儿能够将它与反编译后的APK代码进行比较。
    package com.punsec.demo;
    import android.os.Bundle;
    import android.support.v7.app.AppCompatActivity;
    import android.util.Base64;
    import android.view.View;
    import android.widget.Button;
    import android.widget.EditText;
    import android.widget.TextView;
    import javax.crypto.SecretKey;
    public class MainActivity extends AppCompatActivity {
        TextView result;
        EditText input;
        Button button;
        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            input = (EditText) findViewById(R.id.input);
            result = (TextView) findViewById(R.id.result);
            button = (Button) findViewById(R.id.ok);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    String a = input.getText().toString();
                    String b = getString(R.string.a);
                    try {
                        SecretKey secretKey = Util.a(new String(Base64.decode(getString(R.string.b), Base64.DEFAULT)));
                        byte e[] = Util.a(a, secretKey);
                        String er = Base64.encodeToString(e, Base64.DEFAULT).trim();
                        if(er.equals(b)) {
                            result.setText(getString(R.string.d));
                        }else {
                            result.setText(getString(R.string.e));
                        }
                    } catch (Exception e) {
    //                    Log.d("EXCEPTION:", e.getMessage());
                    }
                }
            });
        }
    }
这个应用使用下面的这个辅助类来执行一些重要的操作：
    package com.punsec.demo;
    import java.io.UnsupportedEncodingException;
    import java.security.InvalidAlgorithmParameterException;
    import java.security.InvalidKeyException;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.security.spec.InvalidKeySpecException;
    import java.security.spec.InvalidParameterSpecException;
    import javax.crypto.BadPaddingException;
    import javax.crypto.Cipher;
    import javax.crypto.IllegalBlockSizeException;
    import javax.crypto.NoSuchPaddingException;
    import javax.crypto.SecretKey;
    import javax.crypto.spec.SecretKeySpec;
    class Util {
        static SecretKey a(String secret)
                throws NoSuchAlgorithmException, InvalidKeySpecException
        {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(secret.getBytes());
            byte[] digest = md.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : digest) {
                sb.append(String.format("%02x", (0xFF & b)));
            }
            return new SecretKeySpec(sb.toString().substring(0,16).getBytes(), "AES");
        }
        static byte[] a(String message, SecretKey secret)
                throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException
        {
            Cipher cipher = null;
            cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secret);
            return cipher.doFinal(message.getBytes("UTF-8"));
        }
        static String a(byte[] cipherText, SecretKey secret)
                throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidParameterSpecException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException
        {
            Cipher cipher = null;
            cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, secret);
            return new String(cipher.doFinal(cipherText), "UTF-8");
        }
    }
你可以下载已经编译好的APK From ->
[CrackMe](https://offensivepentest.com/downloads/CrackMe.apk)
在我们进行下一步的操作之前，先列举分析所需的背景知识:
一个已经root的安卓设备或者虚拟机（虽然并不是所有的分析方法都需要root权限，但是有一个root的设备是不错的）。
[Frida](https://www.frida.re/)
Python
[Inspeckage](https://github.com/ac-pm/Inspeckage)
[Xposed Framework](https://github.com/rovo89/Xposed)
[APKTool](https://ibotpeaches.github.io/Apktool/)
[APKStudio](https://bintray.com/vaibhavpandeyvpz/generic/apkstudio/view)
[ByteCodeViewer](http://bytecodeviewer.com/)
[Dex2Jar](https://sourceforge.net/projects/dex2jar/)
JarSigner(Java JDK)
[JD-JUI](http://jd.benow.ca/)
[Brain](https://www.askideas.com/media/36/I-Cannot-Brain-Today-I-Has-The-Dumb-Funny-Cat-Meme-Image.jpg)
我们将会使用的三种分析方法：
    动态分析和Hooking.
    二进制文件Patch（byte code修改).
    静态分析和代码复制.
**动态/运行时环境 分析和函数Hooking:**
****
我们需要使用的分析工具: Frida, dex2jar, JD-GUI.
用 Frida分析:
到底什么是Frida ?
    It's Greasemonkey for native apps, or, put in more technical terms, it’s a dynamic code instrumentation toolkit. It lets you inject snippets of JavaScript or your own library into native apps on Windows, macOS, Linux, iOS, Android, and QNX. Frida also provides you with some simple tools built on top of the Frida API. These can be used as-is, tweaked to your needs, or serve as examples of how to use the API.
用简单的术语来说，它能够被用来Hook函数调用，注入你自己的代码未来能够来修改应用本身的执行流程。我们将会使用它来通过检测和来识别不同的变量。
为了能够安装Frida，我们可以将手机开启USB调试之后用数据线连接电脑，并且在电脑端运行
    # check adb devices whether connected or not
    adb devices
    # push/copy the latest frida server to phone
    adb push frida-server-10.4.0-android-arm /data/local/tmp/frida
    # set permissions for frida, grant SU permissions if prompted
    adb shell su -c "chmod 755 /data/local/tmp/frida"
    # start frida server on android device
    adb shell su -c "./data/local/tmp/frida &"
    # install frida-python on your Windows/Mac/Linux device
    pip install --user frida
运行了上面的命令之后，我们的Frida Server就已经运行在了我们的电脑上，让我们来检验一下，打开终端，运行python:
    Python 2.7.10 (default, Feb  7 2017, 00:08:15)
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import frida
    >>> frida.get_usb_device()
    Device(id="802b7421", name="LG SCH-XXXX", type='tether')
为了方便以后的分析，现在让我们创建一个python脚本:
    import frida, sys, time
    encrypted = None
    def on_message(message, data):
        global encrypted
        try:
            if not encrypted:
              encrypted = message['payload']['encrypted']
              print('[+] Received str : ' + encrypted)
              return
        except:
            pass   
      if message['type'] == 'send':
         print('[*] {0}'.format(message['payload']))
      elif message['type'] == 'error':
        if "'encrypted' undefined" in message['description']:
              print('[!] Encrypted value not updated yet, try to rotate the device')
        else:
              print('[!] ' + message['description'])
      else:
        print message
    jscode = open('punsec.js').read()
    print('[+] Running')
    process_name = 'com.punsec.demo'
    device = frida.get_usb_device()
    try:
        pid = device.get_process(process_name).pid
        print('[+] Process found')
    except frida.ProcessNotFoundError:
        print('[+] Starting process')
        pid = device.spawn([process_name])
        device.resume(pid)
        time.sleep(1)
    process = device.attach(pid)
    script = process.create_script(jscode)
    script.on('message', on_message)
    script.load()
    while True:
        time.sleep(1)
        if encrypted:
          script.post({'type':'encrypted','value':encrypted})
          break
    sys.stdin.read()
让我们慢慢讲一些这些代码:
这个Encrypted变量最初是一个无类型的对象，它不久之后就会被脚本来将它更新为一个加密的值。这个 on_message 函数是一个回调函数能够被
frida 的 javascript
代码来利用，在javascript代码之中，我们将注入到我们程序的进程中来回调我们的python代码。这个回调函数能够被通过在javascript代码中的send()
函数来执行。下一个变量是jscode,
它能够将我们的js代码注入到程序的进程中。为了更方便我们阅读，js代码被写到另一个文件中。Process_name变量是我们的进程名字。我们能够通过在adb
shell中运行 "ps" 命令 "pm list packages" 命令得到我们应用的进程名字。
这个 device 变量是来连接我们的USB设备(手机)的。Try except