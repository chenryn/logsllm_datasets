workload driver
SPECbatch
workload driver
Clients
Servers
Web server VM
[front-end]
Web server
Apache 2.4.7
OS
[back-end]
sshfs 2.5
OS
Mail server VM
[front-end]
Batch server VM
Application server VM
Database server VM
[front-end]
[front-end]
[back-end]
IMAP mail server
Dovecot 2.2.9
Batch server
SPECbatch server
J2EE Application 
server
GlassFish 4.0
Database server
PostgreSQL 9.3.5
OS
OS
OS
OS
Linux 3.17.2 x86_64
Linux 3.17.2 x86_64
Linux 3.17.2 x86_64
Linux 3.17.2 x86_64
Linux 3.17.2 x86_64
Linux 3.17.2 x86_64
Hypervisor 
Xen 4.4.1
Fig. 5. SPECvirt sc2013 as an IDS monitoring landscape [IMAP stands for Internet
Message Access Protocol; J2EE stands for Java 2 Enterprise Edition]
Characterization of Benign Hypercall Activities. We now estimate steady-
states of the benign hypercall activities of the server VMs and calculate the rel-
evant statistics (see Sect. 3.1). We initialized the IDS monitoring landscape and
deployed Xenini before the characterization. We used xentrace, the tracing facility
of the Xen hypervisor, to capture hypercall activities in trace ﬁles.
5 http://www.spec.org/virt sc2013/.
6 We did not use any other virtualization mode because of a technical limitation; that
is, the xentrace tool, which we use to capture benign hypercall activities in ﬁles for
processing oﬀ-line, currently supports only full paravirtualization. However, support
for other virtualization modes is currently being implemented.
7 An overview of the software and hardware requirements for deploying and running
SPECvirt sc2013 is available at https://www.spec.org/virt sc2013/docs/SPECvirt
UserGuide.html.
484
A. Milenkoski et al.
Table 1. Benign workload characterization
Run 1
Run 2
Server VM ts (sec.) r (occ./sec.) ts (sec.) r (occ./sec.)
Web
19644.5
5350
5357
19627.3
Network ﬁle 5343
10204.9
Mail
Batch
5391
5315
Application 5367
Database
5285
3141.5
633.4
31415.9
27294.9
5360
5382
5330
5377
5273
10231.3
3148.7
623.8
31437.5
27292.3
Figure 6 a–f show growth curves depicting St until time tmax = 5500 s for each
server VM (see the curves entitled ‘Run 1’). We set the target σ to 15 over a time
period of 100 s for the slope of each growth curve. In Table 1, column ‘Run 1’,
we present ts (in seconds – sec.), which is the time at which the VMs’ hypercall
activities reach steady-state. We also present r (in number of occurrences per
second – occ./sec.), which is the average rate of occurrence of the detection-
relevant property. We also calculated the statistic ‘number of occurrences of each
variation of the detection-relevant property’ (not presented in Table 1), which
we use to craft “mimicry” attacks (see Sect. 5.2).
We now empirically show that, provided an IDS monitoring landscape is spec-
iﬁed, VMs’ hypercall activities exhibit repeatability in terms of the characteristics
Run 1
Run 2
Run 1
Run 2
Run 1
Run 2
0
0
0
2
0
0
0
1
St
0
0
1000
2000
3000
Time (sec.)
(a)
0
0
5
1
0
0
0
1
0
0
5
St
0
0
0
2
St
0
0
0
1
4000
5000
0
0
1000
2000
3000
Time (sec.)
4000
5000
0
0
1000
2000
3000
Time (sec.)
4000
5000
Run 1
Run 2
0
0
6
St
0
0
4
0
0
2
2500
2000
1500
1000
500
St
(b)
Run 1
Run 2
(c)
Run 1
Run 2
0
0
0
2
St
0
0
0
1
0
0
1000
2000
3000
Time (sec.)
(d)
4000
5000
0
0
1000
4000
5000
0
0
1000
2000
3000
Time (sec.)
(e)
2000
3000
Time (sec.)
4000
5000
(f)
Fig. 6. Growth curves: (a) web (b) network ﬁle (c) mail (d) batch (e) application
(f) database server VM.
Evaluation of Intrusion Detection Systems in Virtualized Environments
485
of interest to an extent suﬃcient for accurate IDS testing (see Sect. 3.2). We per-
formed the above characterization campaign twice and compared the results. In
Fig. 6 a–f, we depict the obtained growth curves (see the curves entitled ‘Run 1’
and ‘Run 2’). These curves are very similar, which indicates that the character-
istics of the VMs’ hypercall activities of interest are also similar. In Table 1, we
present ts and r for each server VM (see column ‘Run 1’ and ‘Run 2’). We observe
a maximum diﬀerence of only 17 sec. for ts and 26.4 occ./sec. for r. We repeated
this process over 30 times and calculated maximum standard deviation of only
8.036 for ts and 15.95 for r. These small deviations indicate that benign hypercall
activities exhibit non-repeatability to such a small extent that it has no signiﬁcant
impact on metric values, which we repeatedly calculate for statistical accuracy (see
Sect. 3.2).
Speciﬁcation of Attack Injection Scenarios. We now specify attack injec-
tion scenarios that we will realize in separate testing phases. We focus on inject-
ing attacks triggering publicly disclosed hypercall vulnerabilities. However, the
injection of any malicious hypercall activity using hInjector is possible (e.g.,
covert channel operations as described in [4]), in which case an IDS evaluation
study would be performed following the same process we demonstrate here.
Scenario #1 : We will ﬁrst evaluate the attack coverage of Xenini when conﬁg-
ured such that th = 0.3. We will evaluate Xenini’s ability to detect attacks trigger-
ing the vulnerabilities CVE-2012-5525, CVE-2012-3495, CVE-2012-5513, CVE-
2012-5510, CVE-2013-4494, and CVE-2013-1964. We thus demonstrate injecting
realistic attacks that conform to the attack models that we constructed [5]. We
will inject attacks from the web and mail server VM using the LKM component of
hInjector.
Attack contents: In Fig. 7 (a)–(e), we depict the contents of the considered
attacks (the content of the attack triggering CVE-2012-3495 is depicted in
Fig. 3a; we will inject this attack from the web server VM). The semantics of
these ﬁgures is the same as that of Fig. 3a — we depict the hypercalls executed as
part of an attack and relevant hypercall parameters; that is, integer parameters
deﬁning the semantics of the executed hypercalls (e.g., XENMEM exchange),
and, where applicable, parameters with values speciﬁcally crafted for triggering
a vulnerability, which are marked in bold.
Attack injection times: After the hypercall activities of both the web and mail
server VM have reached a steady state, we will inject the considered attacks, with
10 s of separation between each attack, and, where applicable, with no delays
between the invocation of the hypercalls comprising an attack.
Scenario #2 : We will investigate the accuracy of Xenini at detecting the
attacks considered in Scenario #1, however, modiﬁed such that they have IDS
evasive characteristics (i.e., they are “mimicry” and “smoke-screen” attacks). We
will inject from the database server VM, using the LKM component of hInjector,
both the unmodiﬁed attacks that consist of multiple hypercalls (i.e., we exclude
the attack triggering CVE-2012-5525) and their modiﬁed counterparts as part
of three separate testing phases. Therefore, we will observe how successful the
modiﬁed attacks are at evading Xenini.
486
A. Milenkoski et al.
Web server VM
Hypervisor
x32
HYPERVISOR_update_va_mapping
Web server VM
Hypervisor
x57
HYPERVISOR_grant_table_op
(GNTTABOP_set_version, &gsv
.version=1 / .version=2;
Mail server VM
Hypervisor
HYPERVISOR_mmuext_op
HYPERVISOR_memory_op
(XENMEM_exchange, &exchange);
HYPERVISOR_grant_table_op
(GNTTABOP_set_version, &gsv
op.cmd = MMUEXT_CLEAR_PAGE; 
.arg1.mfn=0x0EEEEE;
.out.extent_start = 0xFFFF808000000000;
(a)
(b)
.version=1;
(c)
Mail server VM
Hypervisor
Web server VM
Mail server VM
Hypervisor
(at vCPU #1)
(at vCPU #2)
HYPERVISOR_grant_table_op
(GNTTABOP_setup
HYPERVISOR_grant_table_op
(GNTTABOP_transfer
(d)
HYPERVISOR_grant_table_op
(GNTTABOP_setup_table