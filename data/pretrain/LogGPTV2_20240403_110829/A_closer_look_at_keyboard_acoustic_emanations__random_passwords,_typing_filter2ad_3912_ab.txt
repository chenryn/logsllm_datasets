### Benefits of the Technique

The primary benefit of this technique is that it ensures virtually no overlap of keyboard acoustic sounds. It also allows for each letter to be typed with approximately the same force and from the same angle, resulting in a relatively consistent sound for multiple clicks of the same key. This method minimizes noise or overlapping sounds during key presses and maximizes the contribution of the keys hitting the underlying plate. The plate acts like a "drum," producing an audio sound related to its position on the plate.

This technique can be used by an attacker (not the original typist) to train a system to extract audio emanations due to the physical structure of the keyboard. We used this technique to record ten signal samples for each key of the alphabet as our initial data.

### Hunt and Peck Typing

In the second scenario, random passwords are typed using the hunt and peck style. This differs from the first scenario because consecutive letters are different, causing the finger to hit the key from possibly different angles. For this test, we generated 25 different random passwords, each consisting of six characters. Since a six-character password is often the minimum size required by many sites, this provides a realistic scenario where the attacker has the highest probability of guessing the password. Each password was typed three times consecutively, and we refer to this data as the "Test Hunt and Peck data" in the rest of the paper.

### Touch Typing

In the third scenario, we type the same password list as in the Hunt and Peck case but using the touch typing technique. In this scenario, each key has its own designated finger, and other fingers may touch the keyboard while typing, depending on hand movement. This typing technique is very popular among users. However, it affects the acoustic emanations as the keys are hit from different angles, depending on the finger used and the hand position during typing. We refer to this data as the "Test Touch Typing data."

### Typing Style and Signal Correlation

To measure the effect of typing style on signal similarity, we examine the maximum correlation between instances of the keys in the test data with each Letter Data Set of the training data. Our training data included 10 training samples using the straw man typed dataset (Section 4.1).

#### Straw Man Typing

We started by using the aforementioned data as test data itself. For each sample, we calculate the maximum correlation with each of the other instances taken with the same key (termed matching key). We then calculate the mean of these values. We did this for both the press and release part of the signal, marking these values as \( P_{\text{corrMatchPrs}}(i) \) and \( P_{\text{corrMatchRls}}(i) \) for each sample \( i \) of the data.

We repeat this calculation for the sample with the Letter Data Sets of the rest of the keys (termed non-matching keys). For each tested sample, we take the highest value of the 25 values received, which shows the correlation to the most likely key to be chosen as a match to the original sample. We mark this value as \( P_{\text{corrNonMatchPress}}(i) \) and \( P_{\text{corrNonMatchRls}}(i) \) for each sample \( i \) of the data.

At this point, we compare the correlations of the press and release samples. If the highest correlation for the sample belongs to the Letter Data Set of the matching alphabet key, i.e., \( P_{\text{corrMatchPrs}}(i) > P_{\text{corrNonMatchPrs}}(i) \), we mark the press part of the sample as a Match correlation. We do the same for the release. We calculate the Match probability as the number of keys found to Match (i.e., being best correlated to the samples of the corresponding typed letter in the training data) divided by the total number of samples. For the Straw Man Dataset, we found that 56% of the press signals and 67% of the release signals best matched their corresponding typed letter.

#### Hunt and Peck Typing

We next repeat the correlation calculations between the hunt and peck passwords test dataset and the Straw Man initial dataset. We found that the Match probability was reduced to 28% for the press and 43% for the release samples. Therefore, when the typing style changed slightly, it became more likely to choose the wrong key as the best matching key to the new sample.

#### Touch Typing

We further repeated the analysis for the data taken with the touch typing style. We calculated the correlation between these samples and the training data. In this case, we found that the probability of each instance matching the correct letter in the training data was reduced to 13% for the press part of the signal and 24% for the release.

A summary of the results is presented in Table 2. In conclusion, we observed that the maximum correlation between instances of the same key reduces when the typing style changes. On the other hand, the correlation to instances taken with other keys increases, making it harder to detect the correct key. This confirms our hypothesis that typing style has a strong effect on the similarity of same key audio signals and the ability to distinguish them from other keys.

### Password Detection

Out of the five techniques explored in Section 3, we found that the cross-correlation (X-Corr) and time-frequency classification (Time-Frq) techniques yielded higher accuracies. In this section, we investigate the advantage that an attacker can get by using these two techniques to eavesdrop on random passwords. We examine the performance of these techniques and compare the detection rates for random passwords typed with both the hunt and peck and the touch typing styles.

#### Initial Dataset, Straw Man Approach

The initial data is typed with the Straw Man Approach (as discussed in Section 4.1). Each instance in the dataset is utilized as a test instance, with the rest of the dataset used as the training data (excluding the test instance). As a result, we found that the cross-correlation statistics calculated using this technique resulted in an 83% accuracy rate per key (since we now use ten keys per training, this raised the result up from 73% when only four training instances were used). When using the time-frequency-based classification, the results further improved to 89%. We conclude that when the typing is repetitive, the underlying physical characteristics of the keyboard have a strong effect on the acoustic emanations, and the ability to eavesdrop is relatively high.

#### Test Data, Hunt and Peck Style

For this dataset, we calculate the similarity measures using the initial data (straw man approach dataset) as our training data and the hunt and peck dataset as our test dataset. We find that the cross-correlation performance is reduced to a 54% accuracy rate per key. Utilizing the time-frequency technique improved the detection rate to 65% per character. We conclude that the angle at which the finger hits the key affects the acoustic signal emanated and reduces the detection accuracy compared to typing the same key continuously.

#### Test Data, Touch Typing Style

We repeated the testing process for the passwords typed with the touch typing style (using the straw man dataset as our training data). We find that utilizing the cross-correlation technique for key detection, the accuracy rate is reduced to 34%. For the time-frequency-based classification, the rate of detection per correct character increased to 41%.

#### Best Guesses Search

To raise our detection rate, we tried to create a list of additional keys to be checked against our recorded password. We implemented this by creating a list of keys having the highest max correlation and a list of keys with the lowest TF distance from the test character. When examining the ordered list of highest matching alphabet letters, we saw that the probability of the key matching each of the letters reduces significantly after the fifth letter.

We therefore implement a "Best Guesses Search" â€“ in which for each typed character, we create a list of the 5 best matching keys. We then determine the probability of a correct detection for the five keys. Using the correlation-based technique, we found that the probability of each character to be in the list of the top five keys increased to 79% for the hunt and peck data. For the touch typing data, the probability that the key is in the first five choices was found to be 64%.

For the time-frequency-based classification, we found that the probability of each character to be in the list of the top 5 keys increased to 88%. For the touch typing data, the rate increased to 75%. Our results (for single key and five key guesses) are summarized in Tables 3 and 4, respectively. The results corresponding to the two best guesses are depicted in Table 6 of the appendix (see Appendix).

#### Training, Touch Typing Style

We now examine the case where the training is also performed using continuous typed characters. In this scenario, the attacker first eavesdrops over a user typing continuous text, records the text, and uses language model tools to detect the keys pressed.