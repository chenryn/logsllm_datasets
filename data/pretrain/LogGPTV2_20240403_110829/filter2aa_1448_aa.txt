I am packer and so can you 
Mike Sconzo 
Agenda* 
*Powered by business synergy 
It’s all about me! 
•  Threat Research at Bit9 + Carbon Black 
•  Enjoy static analysis, machine learning, network forensics, 
and eating BBQ and pie (yes, I live in TX) 
•  SecRepo.com 
•  @sooshie 
What’s the problem? 
Detecting packers, compilers and various artifacts from the 
development cycle can be really useful when looking at malware 
or files in general. However, the de facto standard (PEiD) was 
created over 10 years ago, and there are very few recent 
signature updates. Is it time for something new and different? 
Moar? 
•  Zero (or near zero) trust in prior 
solutions 
• 
Approach this from a clustering 
perspective 
•  Easy to generate signatures 
• 
Non-experts want to play too 
•  Cross platform 
• 
•  Simple to understand and extend 
•  Fuzzy Matching (similarity) 
• 
Understand signature overlap 
• 
Percent of each signature matched 
Refresher 
Terms, File Structure, 101 
PE Simplified 
PE format 
Things we care 
about (today) 
•  LinkerMajorVersion 
•  LinkerMinorVersion 
•  NumberOfSections 
Tool chain 
  Set of tools used to develop software 
  IDE 
  Compiler 
  Linker 
  Etc… 
  This talk will touch on compiler/build environment 
detection 
  Information provided by the linker, etc… will also be used 
Packer 
•  “Program within a program” 
•  Generally used to compress or 
obfuscate PE information 
• 
Evade AV 
• 
Make static analysis harder 
Packers, their parts. 
  Packer 
  Compresses/obfuscates the original executable and creates a 
new executable complete with decompression/deobfuscation 
code 
Unpacker 
A.k.a Stub 
  Run when the new executable is executed and is responsible for 
producing the original executable 
Unpackers, how do they work? 
  Take control of AddressOfEntryPoint 
  Run the unpacking routine 
  Find the packed data 
  Restore the data contents 
  Perform relocation fixes 
  Resolve imports since the original executable isn’t being loaded 
by the Windows loader 
  Jump into the original program 
http://www.stonedcoder.org/~kd/lib/61-267-1-PB.pdf 
The popular kids 
PEiD 
  “PEiD detects most common packers, cryptors, and compilers 
for PE files.” 
  YARA 
  “YARA is a tool aimed at (but not limited to) helping malware 
researchers to identify and classify malware samples” 
  RDG Packer Detector 
  “RDG Packer Detector is a detector of packers, cryptors, 
Compilers, Packers Scrambler, Joiners, Installers” 
Back to Reality (Data) 
Now on to the more exciting stuff, even though it’s ugly at times. 
Data 
  3977 PEiD signatures used for testing 
  File sets 
  Sony – 9 Executables 
  Chthonic – 11 Executables 
Backoff – 22 Executables 
  Volatile Ceader – 36 Executables 
Carbanak – 74 Executables 
  APT1 – 281 Executables 
ZeuS – 6774 Executables 
  Random – 411340 Executables 
Data analysis 
  Basic exploration of the ZeuS dataset 
  Some of the possible attributes/features we can look at 
  Clustering 
ZeuS + PEiD 
PEiD Label 
Count 
None 
4600 
UPX v0.89.6 - v1.02 / v1.05 -v1.24 -> Markus & 
Laszlo [overlay] 
781 
UPX 2.90 [LZMA] -> Markus Oberhumer, 
Laszlo Molnar & John Reiser 
318 
PureBasic 4.x -> Neil Hodgson 
267 
Microsoft Visual Basic v5.0/v6.0 
166 
Armadillo v1.71 
164 
Microsoft Visual C++ 8 
148 
UPX 2.93 - 3.00 [LZMA] -> Markus 
Oberhumer, Laszlo Molnar & John Reiser 
61 
MingWin32 v?.? (h) 
45 
Microsoft Visual C++ 7.0 MFC 
44 
ZeuS + PEiD 
Samples per PEiD signature 
ZeuS + PEiD 
Correlation between the PEiD signatures 
Highly correlated 
ASPack v2.12 
ASPack v2.12 -> 
Alexey 
Solodovnikov  
1.0 
ASPack v2.12 
ASProtect V2.X 
DLL -> Alexey 
Solodovnikov 
1.0 
PDB strings 
  C:\Users\Samim\Desktop\Stab\stb\Release\stb.pdb    
  Y:\DnijJVgd\pitWxRX\ctoerrwx\RtpjVeb.pdb                       
  H:\RJmq\HYkAuHH\lsvyudBS\yMgpHF\obzwwn.pdb 
  C:\answer\record\These\Answer\Dry\Lay\since\Since\mean\Tree
\Music.pdb       
  X:\DEVELOPMENT\VC++\Cryptor_Evolution_old\release\main.pdb       
  c:\temp\debug.pdb                                             
  F:\zmapHjyf\tGQkckQ\UrmgircgraBwwX\nAjaGbB.pdb 
  C:\Users\M4x\Documents\Programmieren\PECRYPT\Client
\EXECUTABLE\Stub\Release\Stub.pdb  
Linker versions 
Major.Minor Linker Versions 
Count 
2.50 
2067 
10.0 
1064 
9.0 
793 
6.0 
717 
5.0 
235 
5.12 
231 
8.0 
201 
7.10 
155 
0.0 
85 
1.1 
73 
ASM mnemonics 
Symbolic name for a machine instruction 
All mnemonics are treated equally from this point forward 
•  add 
•  mov 
•  nop 
•  xor 
•  … 
Johnny 5 is alive! 
Yes. Disassemble. 
Capstone Engine 
  Standardize on one disassembler for consistent results 
  Free 
  Awesome 
  Multi-Language support 
  Cross Platform 
ZeuS + ASM 
Just because we can, doesn’t mean we should 
It’s important 
ASM 
  Mnemonics describe program behavior 
  Mnemonics at AddressOfEntryPoint describe initial program 
behavior 
  Compiler setup 
Unpacker stub 
  Use this as the basis for a signature 
Sets 
  Correlation 
  Doesn’t take order into account 
  Doesn’t really help with distance or similarity 
Jaccard Distance 
  Doesn’t take order into account 
  Distance is based on set membership 
Levenshtein Distance 
  Edits determine distance 
  Position is important 
Jaccard 
['pushal', 'mov', 'lea', 'push', 'jmp', 'nop', 'mov', 'inc', 'mov', 'inc'] 
['push', 'mov', 'add', 'push', 'mov', 'call', 'mov', 'mov', 'call', 'mov'] 
Total #of shared elements/Total # of unique elements 
[mov push] / [pushal mov lea jump nop inc push add call] 
2/8 = .25 