**Title: Packer Detection and Analysis: A Modern Approach**

**Presenter: Mike Sconzo**

**Agenda:**
- **Introduction to Business Synergy**
- **About Me:**
  - Threat Research at Bit9 + Carbon Black
  - Expertise in static analysis, machine learning, network forensics
  - Enjoys BBQ and pie (based in Texas)
  - Founder of SecRepo.com
  - Twitter: @sooshie

**Problem Statement:**
- Detecting packers, compilers, and other development artifacts is crucial for analyzing malware and general files.
- The current de facto standard, PEiD, was created over a decade ago and lacks recent signature updates.
- Is it time for a new and different approach?

**Proposed Solution:**
- **Zero (or near-zero) Trust in Prior Solutions:**
  - Re-evaluate existing tools and methods.
- **Clustering Perspective:**
  - Group similar files based on their characteristics.
- **Ease of Signature Generation:**
  - Simplify the process of creating and updating signatures.
- **Accessibility for Non-Experts:**
  - Make the tool user-friendly for a broader audience.
- **Cross-Platform Compatibility:**
  - Ensure the solution works across different operating systems.
- **Simplicity and Extensibility:**
  - Design a tool that is easy to understand and extend.
- **Fuzzy Matching:**
  - Use similarity-based matching to account for minor variations.
- **Signature Overlap Understanding:**
  - Analyze the overlap between signatures and the percentage of each signature matched.

**Refresher:**
- **Terms and File Structure:**
  - **PE Format:**
    - **LinkerMajorVersion, LinkerMinorVersion, NumberOfSections**
  - **Tool Chain:**
    - Set of tools used for software development (IDE, Compiler, Linker, etc.).
    - This talk will focus on compiler/build environment detection using information provided by the linker.

**Packer Overview:**
- **Definition:**
  - A "program within a program" used to compress or obfuscate executable information.
  - Commonly used to evade antivirus (AV) detection and make static analysis more challenging.
- **Components:**
  - **Packer:**
    - Compresses/obfuscates the original executable and creates a new executable with decompression/deobfuscation code.
  - **Unpacker (Stub):**
    - Executes when the new executable runs, responsible for restoring the original executable.
- **Unpacker Workflow:**
  - Takes control of AddressOfEntryPoint.
  - Runs the unpacking routine.
  - Finds and restores the packed data.
  - Performs relocation fixes.
  - Resolves imports.
  - Jumps into the original program.

**Popular Tools:**
- **PEiD:**
  - Detects common packers, cryptors, and compilers for PE files.
- **YARA:**
  - Aids in identifying and classifying malware samples.
- **RDG Packer Detector:**
  - Detects packers, cryptors, compilers, scramblers, joiners, and installers.

**Data Analysis:**
- **Test Data:**
  - 3977 PEiD signatures.
  - File sets from various sources (Sony, Chthonic, Backoff, Volatile Ceader, Carbanak, APT1, ZeuS, Random).
- **ZeuS Dataset Exploration:**
  - Attributes and features for clustering.
  - Correlation between PEiD signatures.
  - Examples of highly correlated signatures (e.g., ASPack v2.12).

**PDB Strings and Linker Versions:**
- **PDB Strings:**
  - Examples of PDB strings from different sources.
- **Linker Versions:**
  - Distribution of major and minor linker versions in the dataset.

**ASM Mnemonics:**
- **Overview:**
  - Symbolic names for machine instructions.
  - All mnemonics treated equally.
- **Disassembly:**
  - Standardization using the Capstone Engine.
  - Benefits: Free, cross-platform, multi-language support.
- **ZeuS + ASM:**
  - Importance of mnemonics in describing program behavior.
  - Initial program behavior described by mnemonics at AddressOfEntryPoint.
  - Basis for signature creation.

**Similarity Metrics:**
- **Sets:**
  - Correlation without considering order.
- **Jaccard Distance:**
  - Based on set membership, not order.
- **Levenshtein Distance:**
  - Based on the number of edits required to transform one sequence into another, with position importance.

**Example:**
- **Jaccard Distance Calculation:**
  - Example sequences: `['pushal', 'mov', 'lea', 'push', 'jmp', 'nop', 'mov', 'inc', 'mov', 'inc']` and `['push', 'mov', 'add', 'push', 'mov', 'call', 'mov', 'mov', 'call', 'mov']`.
  - Shared elements: `['mov', 'push']`.
  - Unique elements: `['pushal', 'lea', 'jmp', 'nop', 'inc', 'add', 'call']`.
  - Jaccard Distance: `2/8 = 0.25`.

This presentation aims to provide a comprehensive overview of the challenges and potential solutions in packer detection, leveraging modern techniques and tools.