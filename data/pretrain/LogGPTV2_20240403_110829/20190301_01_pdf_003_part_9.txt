### REFRESH Procedure

The `REFRESH` procedure is used to refresh materialized views. There are two forms of this procedure, one that accepts a comma-separated list of view names and another that accepts a table of `DBMS_UTILITY.UNCL_ARRAY` values.

#### First Form
```sql
REFRESH(
  list IN VARCHAR2 DEFAULT NULL,
  method IN VARCHAR2 DEFAULT NULL,
  rollback_seg IN VARCHAR2 DEFAULT NULL,
  push_deferred_rpc IN BOOLEAN DEFAULT TRUE,
  refresh_after_errors IN BOOLEAN DEFAULT FALSE,
  purge_option IN NUMBER DEFAULT 1,
  parallelism IN NUMBER DEFAULT 0,
  heap_size IN NUMBER DEFAULT 0,
  atomic_refresh IN BOOLEAN DEFAULT TRUE,
  nested IN BOOLEAN DEFAULT FALSE
);
```

#### Second Form
```sql
REFRESH(
  tab IN OUT DBMS_UTILITY.UNCL_ARRAY,
  method IN VARCHAR2 DEFAULT NULL,
  rollback_seg IN VARCHAR2 DEFAULT NULL,
  push_deferred_rpc IN BOOLEAN DEFAULT TRUE,
  refresh_after_errors IN BOOLEAN DEFAULT FALSE,
  purge_option IN NUMBER DEFAULT 1,
  parallelism IN NUMBER DEFAULT 0,
  heap_size IN NUMBER DEFAULT 0,
  atomic_refresh IN BOOLEAN DEFAULT TRUE,
  nested IN BOOLEAN DEFAULT FALSE
);
```

#### Parameters
- **list**: A `VARCHAR2` value specifying the name of a materialized view or a comma-separated list of materialized view names. The names can be schema-qualified.
- **tab**: A table of `DBMS_UTILITY.UNCL_ARRAY` values that specify the name (or names) of a materialized view.
- **method**: A `VARCHAR2` value specifying the refresh method. The only supported method is 'C', which performs a complete refresh.
- **rollback_seg**: Accepted for compatibility and ignored. The default is `NULL`.
- **push_deferred_rpc**: Accepted for compatibility and ignored. The default is `TRUE`.
- **refresh_after_errors**: Accepted for compatibility and ignored. The default is `FALSE`.
- **purge_option**: Accepted for compatibility and ignored. The default is `1`.
- **parallelism**: Accepted for compatibility and ignored. The default is `0`.
- **heap_size**: Accepted for compatibility and ignored. The default is `0`.
- **atomic_refresh**: Accepted for compatibility and ignored. The default is `TRUE`.
- **nested**: Accepted for compatibility and ignored. The default is `FALSE`.

#### Examples
To perform a COMPLETE refresh on the `public.emp_view` materialized view:
```sql
EXEC DBMS_MVIEW.REFRESH(list => 'public.emp_view', method => 'C');
```

### REFRESH_ALL_MVIEWS Procedure

The `REFRESH_ALL_MVIEWS` procedure refreshes all materialized views that have not been refreshed since the tables or views they depend on were modified.

#### Signature
```sql
REFRESH_ALL_MVIEWS(
  number_of_failures OUT BINARY_INTEGER,
  method IN VARCHAR2 DEFAULT NULL,
  rollback_seg IN VARCHAR2 DEFAULT NULL,
  refresh_after_errors IN BOOLEAN DEFAULT FALSE,
  atomic_refresh IN BOOLEAN DEFAULT TRUE
);
```

#### Parameters
- **number_of_failures**: A `BINARY_INTEGER` that specifies the number of failures that occurred during the refresh operation.
- **method**: A `VARCHAR2` value specifying the refresh method. The only supported method is 'C', which performs a complete refresh.
- **rollback_seg**: Accepted for compatibility and ignored. The default is `NULL`.
- **refresh_after_errors**: Accepted for compatibility and ignored. The default is `FALSE`.
- **atomic_refresh**: Accepted for compatibility and ignored. The default is `TRUE`.

#### Examples
To perform a COMPLETE refresh on all materialized views:
```sql
DECLARE
  errors INTEGER;
BEGIN
  DBMS_MVIEW.REFRESH_ALL_MVIEWS(errors, method => 'C');
END;
```
Upon completion, `errors` contains the number of failures.

### REFRESH_DEPENDENT Procedure

The `REFRESH_DEPENDENT` procedure refreshes all materialized views that are dependent on the specified views. You can specify a comma-separated list or provide the view names in a table of `DBMS_UTILITY.UNCL_ARRAY` values.

#### First Form
```sql
REFRESH_DEPENDENT(
  number_of_failures OUT BINARY_INTEGER,
  list IN VARCHAR2,
  method IN VARCHAR2 DEFAULT NULL,
  rollback_seg IN VARCHAR2 DEFAULT NULL,
  refresh_after_errors IN BOOLEAN DEFAULT FALSE,
  atomic_refresh IN BOOLEAN DEFAULT TRUE,
  nested IN BOOLEAN DEFAULT FALSE
);
```

#### Second Form
```sql
REFRESH_DEPENDENT(
  number_of_failures OUT BINARY_INTEGER,
  tab IN DBMS_UTILITY.UNCL_ARRAY,
  method IN VARCHAR2 DEFAULT NULL,
  rollback_seg IN VARCHAR2 DEFAULT NULL,
  refresh_after_errors IN BOOLEAN DEFAULT FALSE,
  atomic_refresh IN BOOLEAN DEFAULT TRUE,
  nested IN BOOLEAN DEFAULT FALSE
);
```

#### Parameters
- **number_of_failures**: A `BINARY_INTEGER` that contains the number of failures that occurred during the refresh operation.
- **list**: A `VARCHAR2` value specifying the name of a materialized view or a comma-separated list of materialized view names. The names can be schema-qualified.
- **tab**: A table of `DBMS_UTILITY.UNCL_ARRAY` values that specify the name (or names) of a materialized view.
- **method**: A `VARCHAR2` value specifying the refresh method. The only supported method is 'C', which performs a complete refresh.
- **rollback_seg**: Accepted for compatibility and ignored. The default is `NULL`.
- **refresh_after_errors**: Accepted for compatibility and ignored. The default is `FALSE`.
- **atomic_refresh**: Accepted for compatibility and ignored. The default is `TRUE`.
- **nested**: Accepted for compatibility and ignored. The default is `FALSE`.

#### Examples
To perform a COMPLETE refresh on all materialized views dependent on a materialized view named `emp_view` that resides in the `public` schema:
```sql
DECLARE
  errors INTEGER;
BEGIN
  DBMS_MVIEW.REFRESH_DEPENDENT(errors, list => 'public.emp_view', method => 'C');
END;
```
Upon completion, `errors` contains the number of failures.

### DBMS_OUTPUT Package

The `DBMS_OUTPUT` package provides the capability to send messages (lines of text) to a message buffer or get messages from the message buffer. A message buffer is local to a single session. Use the `DBMS_PIPE` package to send messages between sessions.

#### Procedures and Functions
- **DISABLE**: Disables the capability to send and receive messages.
- **ENABLE(buffer_size)**: Enables the capability to send and receive messages.
- **GET_LINE(line OUT, status OUT)**: Retrieves a line from the message buffer.
- **GET_LINES(lines OUT, numlines IN OUT)**: Retrieves multiple lines from the message buffer.
- **NEW_LINE**: Puts an end-of-line character sequence.
- **PUT(item)**: Puts a partial line without an end-of-line character sequence.
- **PUT_LINE(item)**: Puts a complete line with an end-of-line character sequence.
- **SERVEROUTPUT(stdout)**: Directs messages from `PUT`, `PUT_LINE`, or `NEW_LINE` to either standard output or the message buffer.

#### Public Variables
- **chararr**: A table for storing multiple message lines.
  ```sql
  TYPE chararr IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
  ```

#### Example Usage

**DISABLE**
```sql
BEGIN
  DBMS_OUTPUT.DISABLE;
END;
```

**ENABLE**
```sql
BEGIN
  DBMS_OUTPUT.ENABLE;
  DBMS_OUTPUT.SERVEROUTPUT(TRUE);
  DBMS_OUTPUT.PUT_LINE('Messages enabled');
END;
```

**GET_LINE**
```sql
DECLARE
  v_line VARCHAR2(100);
  v_status INTEGER := 0;
BEGIN
  DBMS_OUTPUT.GET_LINE(v_line, v_status);
  WHILE v_status = 0 LOOP
    INSERT INTO messages VALUES(v_status, v_line);
    DBMS_OUTPUT.GET_LINE(v_line, v_status);
  END LOOP;
END;
```

**GET_LINES**
```sql
DECLARE
  v_lines DBMS_OUTPUT.CHARARR;
  v_numlines INTEGER := 14;
  v_status INTEGER := 0;
BEGIN
  DBMS_OUTPUT.GET_LINES(v_lines, v_numlines);
  FOR i IN 1..v_numlines LOOP
    INSERT INTO messages VALUES(v_numlines, v_lines(i));
  END LOOP;
END;
```

**NEW_LINE**
```sql
BEGIN
  DBMS_OUTPUT.NEW_LINE;
END;
```

**PUT**
```sql
BEGIN
  DBMS_OUTPUT.PUT('Partial line ');
  DBMS_OUTPUT.NEW_LINE;
END;
```

**PUT_LINE**
```sql
BEGIN
  DBMS_OUTPUT.PUT_LINE('Complete line');
END;
```

**SERVEROUTPUT**
```sql
BEGIN
  DBMS_OUTPUT.SERVEROUTPUT(TRUE);
  DBMS_OUTPUT.PUT_LINE('Message sent to standard output');
END;
```

---

Copyright Â© 2007 - 2019 EnterpriseDB Corporation. All rights reserved.