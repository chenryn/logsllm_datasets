rollback_seg IN VARCHAR2 DEFAULT NULL,
push_deferred_rpc IN BOOLEAN DEFAULT TRUE,
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 93
Database Compatibility for Oracle® Developers
Built-in Package Guide
refresh_after_errors IN BOOLEAN DEFAULT FALSE,
purge_option IN NUMBER DEFAULT 1,
parallelism IN NUMBER DEFAULT 0,
heap_size IN NUMBER DEFAULT 0,
atomic_refresh IN BOOLEAN DEFAULT TRUE,
nested IN BOOLEAN DEFAULT FALSE);
Use the second form to specify view names in a table of DBMS_UTILITY.UNCL_ARRAY
values:
REFRESH(
tab IN OUT DBMS_UTILITY.UNCL_ARRAY,
method IN VARCHAR2 DEFAULT NULL,
rollback_seg IN VARCHAR2 DEFAULT NULL,
push_deferred_rpc IN BOOLEAN DEFAULT TRUE,
refresh_after_errors IN BOOLEAN DEFAULT FALSE,
purge_option IN NUMBER DEFAULT 1,
parallelism IN NUMBER DEFAULT 0,
heap_size IN NUMBER DEFAULT 0,
atomic_refresh IN BOOLEAN DEFAULT TRUE,
nested IN BOOLEAN DEFAULT FALSE);
Parameters
list
list is a VARCHAR2 value that specifies the name of a materialized view, or a
comma-separated list of materialized view names. The names may be schema-
qualified.
tab
tab is a table of DBMS_UTILITY.UNCL_ARRAY values that specify the name (or
names) of a materialized view.
method
method is a VARCHAR2 value that specifies the refresh method that will be
applied to the specified view (or views). The only supported method is C; this
performs a complete refresh of the view.
rollback_seg
rollback_seg is accepted for compatibility and ignored. The default is NULL.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 94
Database Compatibility for Oracle® Developers
Built-in Package Guide
push_deferred_rpc
push_deferred_rpc is accepted for compatibility and ignored. The default is
TRUE.
refresh_after_errors
refresh_after_errors is accepted for compatibility and ignored. The default
is FALSE.
purge_option
purge_option is accepted for compatibility and ignored. The default is 1.
parallelism
parallelism is accepted for compatibility and ignored. The default is 0.
heap_size IN NUMBER DEFAULT 0,
heap_size is accepted for compatibility and ignored. The default is 0.
atomic_refresh
atomic_refresh is accepted for compatibility and ignored. The default is
TRUE.
nested
nested is accepted for compatibility and ignored. The default is FALSE.
Examples
The following example uses DBMS_MVIEW.REFRESH to perform a COMPLETE refresh on
the public.emp_view materialized view:
EXEC DBMS_MVIEW.REFRESH(list => 'public.emp_view', method => 'C');
3.8.3 REFRESH_ALL_MVIEWS
Use the REFRESH_ALL_MVIEWS procedure to refresh any materialized views that have
not been refreshed since the table or view on which the view depends has been modified.
The signature is:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 95
Database Compatibility for Oracle® Developers
Built-in Package Guide
REFRESH_ALL_MVIEWS(
number_of_failures OUT BINARY_INTEGER,
method IN VARCHAR2 DEFAULT NULL,
rollback_seg IN VARCHAR2 DEFAULT NULL,
refresh_after_errors IN BOOLEAN DEFAULT FALSE,
atomic_refresh IN BOOLEAN DEFAULT TRUE);
Parameters
number_of_failures
number_of_failures is a BINARY_INTEGER that specifies the number of
failures that occurred during the refresh operation.
method
method is a VARCHAR2 value that specifies the refresh method that will be
applied to the specified view (or views). The only supported method is C; this
performs a complete refresh of the view.
rollback_seg
rollback_seg is accepted for compatibility and ignored. The default is NULL.
refresh_after_errors
refresh_after_errors is accepted for compatibility and ignored. The default
is FALSE.
atomic_refresh
atomic_refresh is accepted for compatibility and ignored. The default is
TRUE.
Examples
The following example performs a COMPLETE refresh on all materialized views:
DECLARE
errors INTEGER;
BEGIN
DBMS_MVIEW.REFRESH_ALL_MVIEWS(errors, method => 'C');
END;
Upon completion, errors contains the number of failures.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 96
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.8.4 REFRESH_DEPENDENT
Use the REFRESH_DEPENDENT procedure to refresh all material views that are dependent
on the views specified in the call to the procedure. You can specify a comma-separated
list or provide the view names in a table of DBMS_UTILITY.UNCL_ARRAY values.
Use the first form of the procedure to refresh all material views that are dependent on the
views specified in a comma-separated list:
REFRESH_DEPENDENT(
number_of_failures OUT BINARY_INTEGER,
list IN VARCHAR2,
method IN VARCHAR2 DEFAULT NULL,
rollback_seg IN VARCHAR2 DEFAULT NULL
refresh_after_errors IN BOOLEAN DEFAULT FALSE,
atomic_refresh IN BOOLEAN DEFAULT TRUE,
nested IN BOOLEAN DEFAULT FALSE);
Use the second form of the procedure to refresh all material views that are dependent on
the views specified in a table of DBMS_UTILITY.UNCL_ARRAY values:
REFRESH_DEPENDENT(
number_of_failures OUT BINARY_INTEGER,
tab IN DBMS_UTILITY.UNCL_ARRAY,
method IN VARCHAR2 DEFAULT NULL,
rollback_seg IN VARCHAR2 DEFAULT NULL,
refresh_after_errors IN BOOLEAN DEFAULT FALSE,
atomic_refresh IN BOOLEAN DEFAULT TRUE,
nested IN BOOLEAN DEFAULT FALSE);
Parameters
number_of_failures
number_of_failures is a BINARY_INTEGER that contains the number of
failures that occurred during the refresh operation.
list
list is a VARCHAR2 value that specifies the name of a materialized view, or a
comma-separated list of materialized view names. The names may be schema-
qualified.
tab
tab is a table of DBMS_UTILITY.UNCL_ARRAY values that specify the name (or
names) of a materialized view.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 97
Database Compatibility for Oracle® Developers
Built-in Package Guide
method
method is a VARCHAR2 value that specifies the refresh method that will be
applied to the specified view (or views). The only supported method is C; this
performs a complete refresh of the view.
rollback_seg
rollback_seg is accepted for compatibility and ignored. The default is NULL.
refresh_after_errors
refresh_after_errors is accepted for compatibility and ignored. The default
is FALSE.
atomic_refresh
atomic_refresh is accepted for compatibility and ignored. The default is
TRUE.
nested
nested is accepted for compatibility and ignored. The default is FALSE.
Examples
The following example performs a COMPLETE refresh on all materialized views
dependent on a materialized view named emp_view that resides in the public schema:
DECLARE
errors INTEGER;
BEGIN
DBMS_MVIEW.REFRESH_DEPENDENT(errors, list => 'public.emp_view', method =>
'C');
END;
Upon completion, errors contains the number of failures.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 98
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.9 DBMS_OUTPUT
The DBMS_OUTPUT package provides the capability to send messages (lines of text) to a
message buffer, or get messages from the message buffer. A message buffer is local to a
single session. Use the DBMS_PIPE package to send messages between sessions.
The procedures and functions available in the DBMS_OUTPUT package are listed in the
following table.
Function/Procedure Return Description
Type
DISABLE n/a Disable the capability to send and receive
messages.
ENABLE(buffer_size) n/a Enable the capability to send and receive
messages.
GET_LINE(line OUT, status OUT) n/a Get a line from the message buffer.
GET_LINES(lines OUT, numlines IN n/a Get multiple lines from the message buffer.
OUT)
NEW_LINE n/a Puts an end-of-line character sequence.
PUT(item) n/a Puts a partial line without an end-of-line
character sequence.
PUT_LINE(item) n/a Puts a complete line with an end-of-line
character sequence.
SERVEROUTPUT(stdout) n/a Direct messages from PUT, PUT_LINE, or
NEW_LINE to either standard output or the
message buffer.
The following table lists the public variables available in the DBMS_OUTPUT package.
Public Variables Data Type Value Description
chararr TABLE For message lines.
3.9.1 CHARARR
The CHARARR is for storing multiple message lines.
TYPE chararr IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
3.9.2 DISABLE
The DISABLE procedure clears out the message buffer. Any messages in the buffer at the
time the DISABLE procedure is executed will no longer be accessible. Any messages
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 99
Database Compatibility for Oracle® Developers
Built-in Package Guide
subsequently sent with the PUT, PUT_LINE, or NEW_LINE procedures are discarded. No
error is returned to the sender when the PUT, PUT_LINE, or NEW_LINE procedures are
executed and messages have been disabled.
Use the ENABLE procedure or SERVEROUTPUT(TRUE) procedure to re-enable the
sending and receiving of messages.
DISABLE
Examples
This anonymous block disables the sending and receiving messages in the current
session.
BEGIN
DBMS_OUTPUT.DISABLE;
END;
3.9.3 ENABLE
The ENABLE procedure enables the capability to send messages to the message buffer or
retrieve messages from the message buffer. Running SERVEROUTPUT(TRUE) also
implicitly performs the ENABLE procedure.
The destination of a message sent with PUT, PUT_LINE, or NEW_LINE depends upon the
state of SERVEROUTPUT.
 If the last state of SERVEROUTPUT is TRUE, the message goes to standard output
of the command line.
 If the last state of SERVEROUTPUT is FALSE, the message goes to the message
buffer.
ENABLE [ (buffer_size INTEGER) ]
Parameters
buffer_size
Maximum length of the message buffer in bytes. If a buffer_size of less than
2000 is specified, the buffer size is set to 2000.
Examples
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 100
Database Compatibility for Oracle® Developers
Built-in Package Guide
The following anonymous block enables messages. Setting SERVEROUTPUT(TRUE)
forces them to standard output.
BEGIN
DBMS_OUTPUT.ENABLE;
DBMS_OUTPUT.SERVEROUTPUT(TRUE);
DBMS_OUTPUT.PUT_LINE('Messages enabled');
END;
Messages enabled
The same effect could have been achieved by simply using SERVEROUTPUT(TRUE).
BEGIN
DBMS_OUTPUT.SERVEROUTPUT(TRUE);
DBMS_OUTPUT.PUT_LINE('Messages enabled');
END;
Messages enabled
The following anonymous block enables messages, but setting SERVEROUTPUT(FALSE)
directs messages to the message buffer.
BEGIN
DBMS_OUTPUT.ENABLE;
DBMS_OUTPUT.SERVEROUTPUT(FALSE);
DBMS_OUTPUT.PUT_LINE('Message sent to buffer');
END;
3.9.4 GET_LINE
The GET_LINE procedure provides the capability to retrieve a line of text from the
message buffer. Only text that has been terminated by an end-of-line character sequence
is retrieved – that is complete lines generated using PUT_LINE, or by a series of PUT
calls followed by a NEW_LINE call.
GET_LINE(line OUT VARCHAR2, status OUT INTEGER)
Parameters
line
Variable receiving the line of text from the message buffer.
status
0 if a line was returned from the message buffer, 1 if there was no line to return.
Examples
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 101
Database Compatibility for Oracle® Developers
Built-in Package Guide
The following anonymous block writes the emp table out to the message buffer as a
comma-delimited string for each row.
EXEC DBMS_OUTPUT.SERVEROUTPUT(FALSE);
DECLARE
v_emprec VARCHAR2(120);
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
DBMS_OUTPUT.ENABLE;
FOR i IN emp_cur LOOP
v_emprec := i.empno || ',' || i.ename || ',' || i.job || ',' ||
NVL(LTRIM(TO_CHAR(i.mgr,'9999')),'') || ',' || i.hiredate ||
',' || i.sal || ',' ||
NVL(LTRIM(TO_CHAR(i.comm,'9990.99')),'') || ',' || i.deptno;
DBMS_OUTPUT.PUT_LINE(v_emprec);
END LOOP;
END;
The following anonymous block reads the message buffer and inserts the messages
written by the prior example into a table named messages. The rows in messages are
then displayed.
CREATE TABLE messages (
status INTEGER,
msg VARCHAR2(100)
);
DECLARE
v_line VARCHAR2(100);
v_status INTEGER := 0;
BEGIN
DBMS_OUTPUT.GET_LINE(v_line,v_status);
WHILE v_status = 0 LOOP
INSERT INTO messages VALUES(v_status, v_line);
DBMS_OUTPUT.GET_LINE(v_line,v_status);
END LOOP;
END;
SELECT msg FROM messages;
msg
-----------------------------------------------------------------
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
(14 rows)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 102
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.9.5 GET_LINES
The GET_LINES procedure provides the capability to retrieve one or more lines of text
from the message buffer into a collection. Only text that has been terminated by an end-
of-line character sequence is retrieved – that is complete lines generated using
PUT_LINE, or by a series of PUT calls followed by a NEW_LINE call.
GET_LINES(lines OUT CHARARR, numlines IN OUT INTEGER)
Parameters
lines
Table receiving the lines of text from the message buffer. See CHARARR for a
description of lines.
numlines IN
Number of lines to be retrieved from the message buffer.
numlines OUT
Actual number of lines retrieved from the message buffer. If the output value of
numlines is less than the input value, then there are no more lines left in the
message buffer.
Examples
The following example uses the GET_LINES procedure to store all rows from the emp
table that were placed on the message buffer, into an array.
EXEC DBMS_OUTPUT.SERVEROUTPUT(FALSE);
DECLARE
v_emprec VARCHAR2(120);
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
DBMS_OUTPUT.ENABLE;
FOR i IN emp_cur LOOP
v_emprec := i.empno || ',' || i.ename || ',' || i.job || ',' ||
NVL(LTRIM(TO_CHAR(i.mgr,'9999')),'') || ',' || i.hiredate ||
',' || i.sal || ',' ||
NVL(LTRIM(TO_CHAR(i.comm,'9990.99')),'') || ',' || i.deptno;
DBMS_OUTPUT.PUT_LINE(v_emprec);
END LOOP;
END;
DECLARE
v_lines DBMS_OUTPUT.CHARARR;
v_numlines INTEGER := 14;
v_status INTEGER := 0;
BEGIN
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 103
Database Compatibility for Oracle® Developers
Built-in Package Guide
DBMS_OUTPUT.GET_LINES(v_lines,v_numlines);
FOR i IN 1..v_numlines LOOP
INSERT INTO messages VALUES(v_numlines, v_lines(i));
END LOOP;
END;
SELECT msg FROM messages;
msg
-----------------------------------------------------------------
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
(14 rows)
3.9.6 NEW_LINE
The NEW_LINE procedure writes an end-of-line character sequence in the message buffer.
NEW_LINE
Parameters
The NEW_LINE procedure expects no parameters.
3.9.7 PUT
The PUT procedure writes a string to the message buffer. No end-of-line character
sequence is written at the end of the string. Use the NEW_LINE procedure to add an end-
of-line character sequence.
PUT(item VARCHAR2)
Parameters
item
Text written to the message buffer.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 104
Database Compatibility for Oracle® Developers