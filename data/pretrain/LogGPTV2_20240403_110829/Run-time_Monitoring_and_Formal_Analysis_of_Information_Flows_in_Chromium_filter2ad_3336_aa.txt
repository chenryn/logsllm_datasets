# Title: Run-time Monitoring and Formal Analysis of Information Flows in Chromium

## Authors
- Lujo Bauer
- Shaoying Cai
- Limin Jia
- Timothy Passaro
- Michael Stroucken
- Yuan Tian

### Affiliations
- Carnegie Mellon University
- Institute for Infocomm Research (Shaoying Cai)

### Contact
- {lbauer, liminjia, tpassaro, mxs, yt}@cmu.edu
- Shaoying Cai: PI:EMAIL

## Abstract
Web browsers are essential for a wide range of online services, including shopping, email, banking, and health services. Given the frequent handling of sensitive data, various security policies and mechanisms have been implemented or proposed to mitigate risks from malicious code and sites. This paper presents an approach for specifying and enforcing flexible information-flow policies on the Chromium web browser. Our approach, which is a coarse-grained, lightweight implementation of taint tracking, focuses on an existing browser and covers a broad range of features, from pages and scripts to DOM elements, events, persistent state, and extensions. We develop a detailed formal model of our approach, proving noninterference, and build a corresponding prototype system on top of Chromium. We demonstrate that the system can enforce many existing browser policies and practically useful policies beyond those enforceable in standard web browsers.

## 1. Introduction
Web browsers are used to access a wide range of services, from shopping and email to banking, health services, and document editing. While they bring increased convenience and productivity, the rise in popularity of web services also exposes users to significant risks. Using these services causes users' confidential data, such as passwords, bank account numbers, and emails, to be exposed to the web browser, scripts running in loaded pages, and browser extensions and plugins. Scripts and extensions are particularly difficult to trust, as even simple web pages commonly load multiple scripts of dubious origin, and tens of thousands of extensions are available for installation, with popular ones downloaded by millions of users.

To reduce the dangers posed by scripts and extensions, today's browsers use numerous security mechanisms, including the same-origin policy (SOP), content security policies (CSPs), and process isolation. Despite these measures, risks to users' data persist, with new attacks and vulnerabilities regularly demonstrated. For example, page scripts and extensions can track user browsing behavior, capture user input in web forms, steal cookies and confidential web page content, and even hijack user sessions.

A promising development is the emergence of information-flow control to prevent such script misbehaviors. Some approaches require implementing a new JavaScript interpreter, while others, like BFlow and COWL, compartmentalize scripts and enforce coarse-grained policies on communication across compartments using existing JavaScript engines.

In this paper, we pursue a lightweight, dynamic, taint-tracking-based approach to constrain information flows within a browser and prevent secrets from leaving it. We provide a formal accounting of information flows among various entities, including dynamic entities like page and extension scripts, ephemeral ones like browser tabs and events, and persistent entities like cookies, history, and bookmarks. We explore whether an information-flow enforcement system can encompass all these entities and implement useful policies without unduly impacting regular browsing functionality and with reasonable runtime overhead.

## 2. Related Work
Improving the security and reliability of browsers has received much attention from both academia and industry. Popular browsers, such as Chrome and Firefox, enforce component isolation and privilege separation. However, new ways to exploit users and compromise the browser are frequently reported. Allowing third-party extensions has introduced additional security concerns. Our information-flow policy enforcement mechanism enhances existing browser infrastructure and can enforce flexible information-flow policies to mitigate some of these attacks.

Ad-hoc browser security features, such as Content Security Policy (CSP) and X-Frame-Options, have been adopted to prevent common attacks like cross-site scripting (XSS), cross-site request forgery (CSRF), and clickjacking. Many of these features constrain information flows, but our approach can enforce richer and more precise policies and approximate the information-flow policies enforced by these features.

Research on enforcing information-flow policies has been active, with some developing novel type systems and others using runtime monitoring or hybrid techniques. Much work has focused on preventing information leakage via JavaScript in browsers, typically protecting data at the variable level. Our system, however, operates at the entity-level granularity, making it more efficient and fitting well into the browser's model of classifying information based on origin. Our work also encompasses other browser components, such as DOM elements and extensions.

In terms of policy specification and enforcement granularity, our system is similar to BFlow and COWL. However, we additionally examine policy composition, explore different ways to implement shared states, and build a formal model of our design to analyze its security guarantees.

## 3. System Overview
### 3.1 Threat Model
Our approach addresses a threat model where malicious scripts and extensions can exploit information flows to steal sensitive data or perform unauthorized actions. We aim to prevent such attacks by enforcing flexible information-flow policies.

### 3.2 Policy Specification
Policies are specified using information-flow labels. These labels are based on the origin of entities, such as domains in URLs, extension IDs, and the browser's user. Labels can express declassification and endorsement policies, allowing controlled information flow to untrusted components when necessary. For example, a password stored by a password manager can be sent to a web site if the user clicks the login button.

### 3.3 Enforcement Mechanism
Our enforcement mechanism uses a coarse-grained, lightweight taint-tracking approach. Entities in the browser are annotated with information-flow labels that specify policy and track information flows. When API calls are made or event handlers and callbacks are invoked, the system enforces policies based on these labels. This approach is more efficient than tracking every instruction in the JavaScript engine and fits well into the browser's model of classifying information based on origin.

### 3.4 Motivating Example
Consider a password manager extension, extpwdMgr, which collects and saves usernames and passwords for future use. Suppose a malicious extension, exteve, and scripts from ad.com are installed in the browser and have access to cnn.com, where extpwdMgr has saved the user's password. With current browser security mechanisms, exteve and ad.com scripts may be able to read and communicate saved passwords, collect saved passwords for unvisited sites, and automatically log in to sites. Our approach makes it possible to define and enforce policies that prevent these attacks and similar ones carried out by colluding scripts or extensions.

## 4. Formal Model and Analysis
We develop a formal model of our approach, which includes a detailed description of the entities and their interactions. We prove noninterference, ensuring that no information flows violate the specified policies. The formal model provides a basis for analyzing the security guarantees of our system.

## 5. Prototype Implementation
We build a prototype implementation on top of Chromium to demonstrate the feasibility of our approach. The prototype shows that our system can enforce practically relevant policies, such as preventing malicious extensions from stealing user input or other extensions' secrets. We also discuss tradeoffs between security and functionality, highlighting the need for semi-trusted scripts or extensions to have declassification privileges to implement certain functionalities.

## 6. Discussion
Our approach is not intended as a complete replacement for existing browser security mechanisms but rather as an interesting point in the design space. It provides a concrete basis for further discussion toward more satisfying practical solutions. The browser entities we model, such as shared state and event handlers, are common to many browser infrastructures, and our model can potentially be reused in projects requiring formal models of browser internals.

## 7. Conclusion
This paper presents an approach for specifying and enforcing flexible information-flow policies in the Chromium web browser. We develop a formal model, prove noninterference, and build a functional prototype. Our system can enforce practically useful policies and provide insights into the tradeoffs made in everyday web browsing.