title:One Bit is (Not) Enough: An Empirical Study of the Impact of Single
and Multiple Bit-Flip Errors
author:Behrooz Sangchoolie and
Karthik Pattabiraman and
Johan Karlsson
One Bit is (Not) Enough: An Empirical Study of the Impact of Single and Multiple
Bit-Flip Errors
Behrooz Sangchoolie*, Karthik Pattabiraman+, Johan Karlsson*
*Department of Computer Science and Engineering, Chalmers University of Technology
+Department of Electrical and Computer Engineering, University of British Columbia
Emails: {behrooz.sangchoolie, johan}@chalmers.se, PI:EMAIL
Abstract—Recent studies have shown that technology and
voltage scaling are expected to increase the likelihood that
particle-induced soft errors manifest as multiple-bit errors. This
raises concerns about the validity of using single bit-ﬂips for
assessing the impact of soft errors in fault injection experiments.
The goal of this paper is to investigate whether multiple-bit errors
could cause a higher percentage of silent data corruptions (SDCs)
compared to single-bit errors. Based on 2700 fault injection
campaigns with 15 benchmark programs, featuring a total of
27 million experiments, our results show that single-bit errors
in most cases yields a higher percentage of SDCs compared
to multiple-bit errors. However,
in 8% of the campaigns we
observed a higher percentage of SDCs for multiple-bit errors.
For most of these campaigns, the highest percentage of SDCs
was obtained by ﬂipping at most 3 bits. Moreover, we propose
three ways of pruning the error space based on the results.
Keywords—fault
injection;
gle/multiple bit-ﬂip errors; error space pruning;
transient hardware faults; sin-
I. INTRODUCTION
Technology and voltage scaling is making transistors in-
creasingly susceptible to soft errors caused by ionizing par-
ticles [1], which increase the rate of transient faults. These
errors can degrade system reliability, by producing silent
data corruptions (SDCs) causing unacceptable or catastrophic
system failures. A cost-effective way of reducing the risk that
hardware faults cause such failures is to introduce software-
implemented error handling mechanisms [2], [3]. The effec-
tiveness of these mechanisms is often evaluated by means
of fault injection. Fault injection can be carried out either
at
the software level. The former is
more accurate but is often slow and cumbersome. Software
Implemented Fault Injection (SWiFI) has been widely used
to emulate hardware errors in software. SWiFI is often faster
than hardware injection, and requires no hardware support.
the hardware or at
An important challenge in SWiFI techniques is the selection
of the fault model, which needs to be both straightforward
to implement, and representative of real hardware faults.
The single bit-ﬂip model has been a popular engineering
approximation to mimic particle induced soft errors both in
the combinational logic and storage elements (e.g., ﬂip-ﬂops).
However, earlier studies have found that many soft errors
that occur in the processor manifest as multiple-bit errors at
the application level [4], [5], [6]. This observation has led
researchers to question the validity of the single bit-ﬂip model
for representing transient faults due to soft errors. Therefore,
the fault model should consider both single-bit and multiple-bit
errors when calculating measures such as error coverage [7],
[8] and error resilience [9], [10] (we focus on the latter).
The main question we ask is “Does the multiple bit-ﬂip
model signiﬁcantly differ from the single bit-ﬂip model in
terms of
its impact on programs’ error resilience, and if
so by how much?”. Prior work [10], [11], [12], [13] has
studied the impact of double bit-ﬂip errors on a program, i.e.,
injecting two errors in a single word or multiple words. These
papers assume (without providing evidence) that single/double
bit-ﬂip errors are sufﬁcient when measuring programs’ error
resilience. However, in this paper, we inject multiple bit-ﬂips
systematically to provide evidence regarding the number of
bit-ﬂips needed to cause pessimistic SDC results. There exists
very little work on studying the effects of multiple bit-ﬂip
errors beyond double bit-ﬂips due to two challenges.
First, there is no commonly agreed model to map transient
faults, caused due to soft errors, to their software-level man-
ifestation. In fact, it may not even be possible to ﬁnd such a
representative model. This is why in this paper, we propose
a systematic error space exploration that is based on error
space clustering, where each cluster is represented by two
parameters, (i) the number of bit-ﬂip errors that could occur
in the cluster; and (ii) the distance (in terms of the number of
dynamic instructions) between consecutive injections. Using
these parameters, we form 180 clusters for each program and
conduct multiple bit-ﬂip fault injection experiments. To the
best of our knowledge, we are the ﬁrst to study the effect of
multiple bit-ﬂip errors on programs beyond double bit-ﬂips,
through the use of clustering techniques.
Secondly, the space of multiple bit-ﬂip errors is extremely
large, and conventional techniques for reducing (i.e., pruning)
the error space may not be applicable. Further, almost all
the existing techniques for pruning the error space [14], [15],
[16] work with the single-bit fault model, and are not easily
extensible to multiple-bit errors. Therefore, in this paper, we
also propose three ways of pruning the error space based on
the fault injection results obtained. First, we ﬁnd that it is
unnecessary to expose a program to a very high number of bit-
ﬂip errors, as in this case, only a small fraction of the injected
errors are activated. Second, we identify programs where the
single bit-ﬂip model causes pessimistic (i.e., conservative)
percentage of SDCs compared to when the multiple bit-ﬂip
model is used. For these programs, the results of multiple bit-
ﬂip injections can be replaced by single bit-ﬂip fault injection
results. Third, we use the single bit-ﬂip fault injection results
to prune the error space of multiple bit-ﬂip campaigns by
targeting only a fraction of these errors, based on where the
ﬁrst error should be injected. Together, the three techniques
allow us to prune the space of multiple-bit fault injections.
In summary, the paper makes the following contributions:
• Extends an LLVM (Low Level Virtual Machine)-based
fault injector that injects single bit-ﬂips at the LLVM
compiler’s intermediate code level [17] (§IV-A), to inject
multiple-bit errors (§III-C) in a single word (§IV-B) as
well as multiple words (§IV-C).
• Performs more than 27 million experiments (§III-E) on 15
benchmark programs (§III-D) and for 182 single/multiple
bit error conﬁgurations (§III-C) using two different fault
injection techniques (§III-A).
• Quantiﬁes the maximum (upper bound) number of multi-
ple bit-ﬂip errors needed to cause pessimistic percentage
of SDCs (§IV-B and §IV-C2). We ﬁnd that the single
bit-ﬂip model mostly (92% of all campaigns) results in
pessimistic percentage of SDCs compared to the multiple
bit-ﬂip model; and even when it does not, in most cases,
at most three errors are enough to result in a pessimistic
percentage of SDCs.
• Derives new insights about how the results of single bit-
ﬂip experiments can be used to prune the multiple bit-ﬂip
error space by targeting only a fraction of these errors,
that reveal weaknesses of the programs under test (in
terms of the number of SDCs) that are not revealed by
the single bit-ﬂip model (§IV-C3). We ﬁnd that single bit-
ﬂip experiments that result in an SDC or program crash,
contributing to around 27-100% of the experiments, can
be pruned by the derived insights.
II. FAULT MODEL AND BACKGROUND
A. Fault Model
In this paper, we use the bit-ﬂip model to mimic transient
faults due to soft errors that occur in the processor’s register
ﬁle, ALUs, and in different pipeline registers that eventually
manifest as a data corruption in a source/destination register.
The bit-ﬂip model has been also used in other related work
[2], [18], [19] as a model for transient faults caused by soft
errors. Unlike these works, our model includes both single and
multiple bit-ﬂip errors. Similar to prior work [4], [5], we do
not consider faults in memory since ECC protects the memory
against single/double bit-ﬂips. ECC is however, incapable of
protecting the memory against multiple bit-ﬂips in the same
word. However, in this paper we mainly focus on multiple
bit-ﬂips in multiple words, which may be detected by ECC as
they may manifest as single/double bit-ﬂips in the same word.
B. Error Coverage vs. Error Resilience
Fault injection techniques have been extensively used to
evaluate the effectiveness of error handling mechanisms as
well as to improve the accuracy of measures such as error cov-
erage (c) [7], [8]. Error coverage is deﬁned as the conditional
probability that the program recovers, given the occurrence
of a fault, and consists of both recovery from crashes and
SDCs. An SDC occurs when the program terminates normally,
but the output is erroneous. In practice however, SDCs are
the more important class of failures as the erroneous outputs
are generated with no indication of failure, making them very
difﬁcult to detect. Therefore, instead of the error coverage, we
use error resilience [9], [10] as the dependability metric. Error
resilience is deﬁned as the conditional probability that the
program does not produce an SDC after a transient hardware
fault occurs and impacts the program state (i.e., similar to
work such as [20], [21], [22] it deals with faults passing the
hardware and seen by the software). The error resilience and
similar metrics such as error sensitivity [11], [23] are used to
evaluate the effectiveness of error handling mechanisms.
C. Related Work
Traditionally, most fault injection studies at the program
level have focused on the single bit-ﬂip model, i.e., injecting
single bit-ﬂips into programs. However, recently, there have
been some studies focusing on double bit-ﬂip model [10], [11],
[12]. Lu et al. [10] compare the results of injecting single bit-
ﬂip errors with injecting double bit-ﬂip errors in a single word
and in different words at the LLVM compiler’s intermediate
code level using the LLFI [24] fault injector. They ﬁnd that
there is not much variation between the error resilience of
the different models. The main focus of the work is on the
fault injection tool rather than a thorough study of the impact
of multiple bit-ﬂip errors. Ayatolahi et al. [11] compare the
single bit-ﬂip model with the double bit-ﬂip model at the
assembly-level code. In their study, double bit-ﬂip errors are
only injected into a single word (i.e., register or memory
location). They also ﬁnd that the SDC results obtained for the
two fault models are only marginally different. Adamu-Fika
and Jhumka [12] compare the results of injecting double bit-
ﬂip errors in a single word with those of injecting into different
words at the LLVM compiler’s intermediate code level. Similar
to the other two studies, the results of their experiments show
that, on average, the difference between the percentage of data
failures for the two models is marginal. However, they do not
consider the relative positions of the faults injected, nor do
they generalize their ﬁndings beyond double bit-ﬂips.
Compared to the above mentioned studies, in this paper, we
go beyond the double bit-ﬂip model by injecting up to 30 bit-
ﬂip errors in single words as well as different words in each
program run. We also consider a wide range of parameters that
may inﬂuence the fault injection results and characterize the
space thoroughly. This way, we can analyze the sensitivity of
the results with respect to the fault injection parameters used.
Since the multiple bit-ﬂip error space is signiﬁcantly large, in
this paper, we also derive insights on how the error space could
be further pruned from our results, which also distinguishes
our study from the earlier studies.
There has also been little work targeting programs with
multiple errors [25], [26]. Jiantao Pan [25] introduces a model
called dimensionality to pin-point the number of function call
parameters that are responsible for a failure. The model is used
in a subsequent work [26] to improve software robustness.
However, compared to our fault model, the dimensionality
model has two main limitations; (i) multiple errors are only
introduced to the parameters of each interface, which may
not be representative of multiple errors that occur in variables
used within the function; (ii) the number of errors that are
introduced in each interface is limited by the number of
parameters used by the interface.
There are also studies addressing intermittent faults, which
could model multiple-bit errors. Intermittent faults are those
that show up intermittently at the program level. For example,
Rashid et al. [27] build an intermittent fault model at the
microarchitectural level using stuck-at-last-value and stuck-at-
zero/one models. However, they assume that (i) a microarchi-
tectural unit may be affected by at most a single intermittent
fault and (ii) at most one microarchitectural unit may be
affected by an intermittent fault. These assumptions may not
hold for transient faults due to soft errors, which is our focus.
D. Error Clustering and Error Sampling
The error space under the single bit-ﬂip model is dependant
on the number of register bits available in a target system.
Unfortunately, the high number of bits in a typical program
makes the error space prohibitively large. For example, assume
that each instruction reads or writes only one register; let d be
the number of dynamic instructions in a program and b be the
number of bits in a register, then d ∗ b would be the size of
the single-bit error space. This makes it infeasible to conduct
exhaustive fault injection campaigns for workloads with a
high number of dynamic instructions. This is why prior work
has either randomly sampled the error space, or used error
clustering to ﬁnd classes of equivalent errors which could then
be pruned to facilitate exhaustive fault injection campaigns
[14], [15], [16]. However, all of these papers have focused on
single-bit errors, and hence their heuristics for sampling and
clustering are speciﬁc to the single bit-ﬂip scenario.
d ∗ b, then the error space could be as big as(cid:80)d∗b
Conducting multiple-bit injections adds another dimension
to the (already large) error space, making it even more
necessary to use error space pruning techniques. For example,
let m be the number of multiple-bit errors in one run of a
program where the maximum number of errors is bounded by
m=2(d ∗ b)m.
This makes it infeasible to conduct exhaustive fault injection
campaigns even for workloads with a fairly low number
of dynamic instructions; this is why in this paper, we use
clustering in the context of multiple-bit errors to explore the
error space in a more systematic way (by placing errors with
similar characteristics in the same error class). Moreover, the
error clusters as well as various heuristics that are speciﬁc to
multiple-bit errors are used to prune the error space by ﬁnding
a class of errors that leads to pessimistic percentage of SDCs.
III. EXPERIMENTAL SETUP
In this section we ﬁrst present the different fault injection
techniques used in §III-A. Then in §III-B, we present the fault
injection tool used in the paper and in §III-C we present
our extensions to it. In §III-D, we present the benchmark
programs used in our experiments. In §III-E, we present the
design of experiments, and how we classify the outcome of
each experiment. Finally, in §III-F, we present the research
questions related to error space understanding and pruning.