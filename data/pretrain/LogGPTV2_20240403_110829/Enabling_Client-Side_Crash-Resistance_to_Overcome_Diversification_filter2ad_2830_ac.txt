if it is really an access violation. The faulting instruction
address is checked against the location of the asm.js compiled
code to ensure that it has thrown the exception. The last
check determines if the accessed address lies within the heap
and the guard pages of the asm.js code, but outside of the
bounds indicated by the size of the array buffer. Only if these
conditions are met, the handler signals that the exception has
been successfully resolved. It sets the instruction pointer to
the instruction following the one causing the fault and sets
the default value to be returned. Execution can continue safely
as if the access occurred correctly. The asm.js generated code
can then perform calculations with the default value or return
it into the fully featured JavaScript context. Setting the asm.js
heap pointer with a vulnerability is sufﬁcient to achieve crash-
resistance in Firefox. Accesses to unmapped memory are then
treated as standard out of bound array accesses.
C. Memory Oracles
Armed with crash-resistance, we are able to develop a
novel memory probing method for web browsers. We denote
memory oracles to accomplish the following functionality
within JavaScript:
• If non-readable memory is accessed with read access, an
access fault is generated and handled in a way that allows
recognizing this event.
• In case memory is successfully read, the oracle returns
the bytes at that memory location.
In the following, we present
the basic design of our
memory oracles. Due to the differences between the two
scripting engines within Internet Explorer and Mozilla Firefox,
the technical implementations differ, but the general approach
and the end result are the same for both browsers.
1) Memory Oracles for Internet Explorer: Assume an
adversary controls the buffer pointer in a string object by a
vulnerability. She can misuse that string object as a mem-
ory oracle as shown in the HTML Listing 2: In line 7
of oracle.html, a JavaScript string pointing to the four-
byte sized wide char buffer "AB" is allocated. Then, it is
modiﬁed with a vulnerability by the attacker on line 8 to a
memory address whose permissions are uncertain. This is only
illustrated with a comment in Listing 2. Thus, strObj does not
point to the actual data ("AB") anymore, but to an attacker-
chosen address. Line 5 of runOracle.html dispatches the
JavaScript function memoryOracle() in crash-resistant mode.
If the modiﬁed pointer points to unreadable memory, then
memoryOracle() stops running, but Internet Explorer stays
alive. Thus, the oracle can be queried again with another
1
2
3
4
5
6
7
8
9
10
11
1
2
3
4
5
6
7
8
Listing 2. Memory oracle in Internet Explorer 11. oracle.html is
used to open runOracle.html
pointer value. If a readable address is found, two bytes are
returned and further computations are carried out (line 5 in
oracle.html). Note that memory oracles can be seen as an
extension of memory disclosures, but are more powerful as
they can discover reference-less memory.
2) Memory Oracles for Mozilla Firefox: As mentioned
earlier we use asm.js to implement our memory oracle for
Mozilla Firefox. Due to the extensive checks performed by
this browser, developing a memory oracle is more complex
than in Internet Explorer. An object of type AsmJSModule
tracks all information related to an asm.js-compiled module.
This includes the location of the native code as well as the
asm.js heap location. As mentioned earlier, we do not only
need to perform our invalid access from an asm.js function,
but also are limited to the heap location plus the size of
the guard region. But with a vulnerability, the location of
the AsmJSModule object is disclosed, as it is reachable with
memory disclosures (see Section V-B). Then, the heap address
stored in the object’s metadata is overwritten to an attacker-
chosen address. A read attempt via an array access yields either
the default value or content at that address. The former is only
retrieved if memory is not readable. Hence, this constitutes
already our basic memory oracle. To query the oracle again,
the heap address in the AsmJSModule object is set to another
value and an array access is performed anew. As we will
demonstrate in Section V-B, the complete virtual address space
can be probed continuously.
D. Web Workers as Probing Agents
Web Workers are a feature of modern browsers. They are
intended to run as separate threads in a script environment. We
found that web workers can also be used as memory oracles
since they can be made crash-resistant. We developed a way
to utilize web workers to deduce information whether memory
is accessible or not.
In Listing 3, an attacker can control the wide char buffer
pointer of object strObj with the ﬁrst element of the array
object bufPtr. Triggering the vulnerability and initializing
bufPtr is omitted in Listing 3, but as we show in Section V,
such a powerful control is realistic and can be achieved with
6
1
2
3
4
5
6
7
8
9
10
11
12
13
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
// file worker . js
self . addEventListener ( ’ message ’, initProbe , true )
function initProbe () {
strObj = " AB "
pageStep = 0 x1000 ; pageCount = 0
idProbeMemory = setInterval ( probeMemory , 0)
}
function probeMemory () {
addr = pageStep * pageCount
/* increase WCHAR ptr of strObj via bufPtr */
bufPtr [0] = addr
pageCount ++
/* try to read at address bufPtr [0] */
mem = strObj . substring (0 ,2)
/* return here only if addr was readable */
clearInterval ( idProbeMemory )
postMessage ({ firstPage : addr , content : mem })
}
Listing 3. Using web workers to ﬁnd the ﬁrst readable memory page
in Internet Explorer 11
a single memory corruption such as a null byte write or a
use-after-free vulnerability.
The web worker is started on line 9 in main.html. On
line 6 of worker.js, the function probeMemory() is dispatched
in crash-resistant mode with setInterval(). This causes
probeMemory() to start subsequently anew, but it stops at line
14 due to read access faults. It only runs further if the read
attempt on line 14 succeeds. This occurs eventually: as the
read attempt starts at address 0x00 but is increased by 0x1000
bytes on each run, four bytes of the ﬁrst memory page are
returned ﬁnally. The content is transfered from the worker to
the context of main.html on line 17 and can be processed
further in handleMessageFromWorker() in main.html.
E. Finding Unreachable Memory Regions
With the ability to probe memory in browsers, we can
discover hidden memory areas like the Thread Environment
Block (TEB) or the safe region used by CPI to store pointer
metadata. Note that no references to these structures exist in
memory, and hence, they are not locatable by simple memory
disclosure attacks. The intuition behind our attack is that we
can probe for speciﬁc information and these probes enable us
to deduce if we have found the correct region. We thereby
neither use control ﬂow-hijacking nor code-reuse nor code-
injection techniques as part of our attack.
We ﬁrst explain how we can ﬁnd the TEB. In 32-bit
processes, the structure within a TEB from offset 0x00 to 0x18
is known as Thread Information Block (TIB) and contains a
pointer to ExceptionList at offset 0x00. This pointer points
into a thread’s stack, because the OS places at
least one
exception structure on the stack. Thus, the pointer’s value is
7
Algorithm 1: Discover a TEB via memory oracles
Data: Globals: addrT oP robe, pageCount, pageStep, tebM axEnd,
idGetT EB, teb
Result: address of TEB in teb
Function startProbe
pageStep ← 0x1000
tebM axEnd ← 0x80000000 − 4
pageCount ← 0
idGetT EB ← setInterval(getT EB, 0)
end
Function getTEB
addrT oP robe ← (tebM axEnd − pageStep × pageCount)
pageCount ← pageCount + 1
oracleProbe addrT oP robe
/* at this point probing succeeded
clearInterval(idGetT EB)
teb ← setToPageBegin addrT oP robe
/* read TEB specific fields
ExcList ← readDword(teb)
StackBase ← readDword(teb + 4)
StackLimit ← readDword(teb + 8)
tebSelf ← readDword(teb + 0x18)
/* heuristic to identify TEB
bool isT EB ← (teb == tebSelf )
if isT EB ∧ (ExcList  StackLimit)
then
success = 1
else
end
end
/* we found other readable memory
/* continue probing for a TEB
idGetT EB ← setInterval(getT EB, 0)
*/
*/
*/
*/
*/
between the values StackBase and StackLimit at offset 0x04
and 0x08, respectively. Additionally, the ﬁeld at 0x18 contains
the address of the TEB/TIB itself.
Thus, we can apply a simple heuristic to scan over the
memory space and discover a TEB (see Algorithm 1). Probing
for a TEB in a 32-bit process (e.g., Internet Explorer tab pro-
cess) starts at the end of the last usermode page 0x7ffffffc
(tebM axEnd). TEBs can reside somewhere in the address
space between 0x78000000 to 0x80000000 [45]. No other
structures except for the PEB and shared data are in that
memory region. The call to setInterval() in startP robe()
sets getT EB() as timed function to execute permanently anew.
An address is queried with a memory oracle (oracleP robe())
which either returns when the address is readable, or produces
an access fault. In the latter case, getT EB() executes again
and the address to probe is decreased by the size of a memory
page. As soon as an address is readable, its ﬁrst three least
signiﬁcant bytes are set to zero (setT oP ageBegin()). The
timed execution of getT EB() is cleared with clearInterval()
and speciﬁc ﬁelds are read via memory disclosures. If the ﬁelds
conform to a TEB structure, then success is set, otherwise
setInterval() sets getT EB() again to be executed in inter-
vals. On success, the adversary can read any TEB or PEB
information to abuse them in malicious computations further
on.
The same method can be applied to 64-bit processes as
well to discover the TEB: the offsets have to be adjusted to
conform with the 64-bit pointer size and the address of the
last possible usermode page, where probing starts, has to be
modiﬁed. The algorithm can be extended to probe ﬁelds of
a PEB in case the TEB heuristic triggers. This avoids false
positives, which may be hit on 64-bit, as TEBs are mapped
below shared libraries.
1) Discovering CPI Safe Region: The linear table-based
and hashtable-based 64-bit implementations of CPI rely on
hiding the location of the safe region from an attacker [27].
In the linear table-based implementation, the safe region is
242 Bytes (4 TiB) in size, out of the 247 Bytes (128 TiB)
of available virtual userspace memory on modern x86-64
processors. Trivially an attacker can guess any address inside
the safe region with a probability of 3.125%, but has no way of
knowing where exactly this address is located in relation to the
start of the region. Thus, she cannot deduce where the metadata
for a speciﬁc pointer resides. Without a memory oracle, this
provides an acceptable level of security. However, an attacker
capable of probing memory can quickly ﬁnd the exact location
of the safe region without the risk of crashing the process.
The safe region consists of mostly zero bytes pagewise.
Thus, we can distinguish a non-mapped address from an
address containing one or more zero bytes. We use an approach
that merely scans for zero bytes. If it locates a mapped address,
it samples more addresses in the same page. This determines
whether it is part of the safe region or if a false positive was
hit. Due to the sparsely populated region, this yields correct
results under nearly all circumstances. Evans et al. [19] also
observed this behaviour in their work.
After we hit the safe region, we still have no knowledge
about where it exactly begins. As we can safely cause access
violations due to the crash-resistance, we employ a binary
search downward from this address until we ﬁnd the ﬁrst