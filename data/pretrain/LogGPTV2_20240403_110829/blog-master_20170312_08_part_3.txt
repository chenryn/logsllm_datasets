postgres=# explain (analyze,verbose,timing,costs,buffers) select a.c1,count(*),sum(b.c1) from a join b on (a.id=b.id) group by a.c1;  
                                                                              QUERY PLAN                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Finalize GroupAggregate  (cost=1788232.17..1789031.13 rows=9987 width=20) (actual time=22222.246..22249.421 rows=10001 loops=1)  
   Output: a.c1, count(*), sum(b.c1)  
   Group Key: a.c1  
   Buffers: shared hit=886251  
   ->  Sort  (cost=1788232.17..1788406.94 rows=69909 width=20) (actual time=22222.237..22233.510 rows=80008 loops=1)  
         Output: a.c1, (PARTIAL count(*)), (PARTIAL sum(b.c1))  
         Sort Key: a.c1  
         Sort Method: quicksort  Memory: 9323kB  
         Buffers: shared hit=886251  
         ->  Gather  (cost=1782507.01..1782606.88 rows=69909 width=20) (actual time=21733.961..22201.706 rows=80008 loops=1)  
               Output: a.c1, (PARTIAL count(*)), (PARTIAL sum(b.c1))  
               Workers Planned: 7  
               Workers Launched: 7  
               Buffers: shared hit=886251  
               ->  Partial HashAggregate  (cost=1782507.01..1782606.88 rows=9987 width=20) (actual time=21729.524..21731.261 rows=10001 loops=8)  
                     Output: a.c1, PARTIAL count(*), PARTIAL sum(b.c1)  
                     Group Key: a.c1  
                     Buffers: shared hit=884977  
                     Worker 0: actual time=21727.744..21729.451 rows=10001 loops=1  
                       Buffers: shared hit=112708  
                     Worker 1: actual time=21728.234..21729.838 rows=10001 loops=1  
                       Buffers: shared hit=110884  
                     Worker 2: actual time=21728.696..21730.324 rows=10001 loops=1  
                       Buffers: shared hit=109946  
                     Worker 3: actual time=21729.089..21730.726 rows=10001 loops=1  
                       Buffers: shared hit=109402  
                     Worker 4: actual time=21729.271..21730.903 rows=10001 loops=1  
                       Buffers: shared hit=109108  
                     Worker 5: actual time=21729.585..21731.221 rows=10001 loops=1  
                       Buffers: shared hit=108370  
                     Worker 6: actual time=21729.944..21731.582 rows=10001 loops=1  
                       Buffers: shared hit=108794  
                     ->  Parallel Hash Join  (cost=783906.57..1675364.15 rows=14285714 width=8) (actual time=6740.541..19015.452 rows=12500000 loops=8)  
                           Output: a.c1, b.c1  
                           Hash Cond: (a.id = b.id)  
                           Buffers: shared hit=884977  
                           Worker 0: actual time=6738.838..18970.510 rows=12570572 loops=1  
                             Buffers: shared hit=112708  
                           Worker 1: actual time=6739.232..19045.940 rows=12618258 loops=1  
                             Buffers: shared hit=110884  
                           Worker 2: actual time=6739.621..19014.532 rows=12586364 loops=1  
                             Buffers: shared hit=109946  
                           Worker 3: actual time=6740.099..19035.616 rows=12430904 loops=1  
                             Buffers: shared hit=109402  
                           Worker 4: actual time=6740.401..19009.144 rows=12385704 loops=1  
                             Buffers: shared hit=109108  
                           Worker 5: actual time=6740.568..19034.750 rows=12357454 loops=1  
                             Buffers: shared hit=108370  
                           Worker 6: actual time=6740.920..19012.554 rows=12375534 loops=1  
                             Buffers: shared hit=108794  
                           ->  Parallel Seq Scan on postgres.a  (cost=0.00..585335.14 rows=14285714 width=8) (actual time=0.016..1324.436 rows=12500000 loops=8)  
                                 Output: a.id, a.c1  
                                 Buffers: shared hit=442478  
                                 Worker 0: actual time=0.017..1348.098 rows=12570572 loops=1  
                                   Buffers: shared hit=55622  
                                 Worker 1: actual time=0.015..1356.242 rows=12618258 loops=1  
                                   Buffers: shared hit=55833  
                                 Worker 2: actual time=0.016..1350.642 rows=12586364 loops=1  
                                   Buffers: shared hit=55692  
                                 Worker 3: actual time=0.017..1339.639 rows=12430904 loops=1  
                                   Buffers: shared hit=55004  
                                 Worker 4: actual time=0.016..1336.109 rows=12385704 loops=1  
                                   Buffers: shared hit=54804  
                                 Worker 5: actual time=0.018..1345.363 rows=12357454 loops=1  
                                   Buffers: shared hit=54679  
                                 Worker 6: actual time=0.017..1338.061 rows=12375534 loops=1  
                                   Buffers: shared hit=54759  
                           -- 我们看到hash table的构建并行，并且每个WORKER只读取部分数据  
			   ->  Parallel Hash  (cost=585335.14..585335.14 rows=14285714 width=8) (actual time=6696.394..6696.394 rows=12500000 loops=8)  
                                 Output: b.c1, b.id  
                                 Buckets: 67108864  Batches: 1  Memory Usage: 4436416kB  
                                 Buffers: shared hit=442478  
                                 Worker 0: actual time=6738.735..6738.735 rows=12900758 loops=1  
                                   Buffers: shared hit=57083  
                                 Worker 1: actual time=6739.147..6739.147 rows=12440848 loops=1  
                                   Buffers: shared hit=55048  
                                 Worker 2: actual time=6739.515..6739.515 rows=12260726 loops=1  
                                   Buffers: shared hit=54251  
                                 Worker 3: actual time=6739.999..6739.999 rows=12293242 loops=1  
                                   Buffers: shared hit=54395  
                                 Worker 4: actual time=6740.301..6740.301 rows=12272026 loops=1  
                                   Buffers: shared hit=54301  
                                 Worker 5: actual time=6740.474..6740.474 rows=12133488 loops=1  
                                   Buffers: shared hit=53688  
                                 Worker 6: actual time=6740.814..6740.814 rows=12211232 loops=1  
                                   Buffers: shared hit=54032  
                                 ->  Parallel Seq Scan on postgres.b  (cost=0.00..585335.14 rows=14285714 width=8) (actual time=0.018..1844.592 rows=12500000 loops=8)  
                                       Output: b.c1, b.id  
                                       Buffers: shared hit=442478  
                                       Worker 0: actual time=0.016..1898.661 rows=12900758 loops=1  
                                         Buffers: shared hit=57083  
                                       Worker 1: actual time=0.024..1863.159 rows=12440848 loops=1  
                                         Buffers: shared hit=55048  
                                       Worker 2: actual time=0.015..1852.866 rows=12260726 loops=1  
                                         Buffers: shared hit=54251  
                                       Worker 3: actual time=0.021..1845.705 rows=12293242 loops=1  
                                         Buffers: shared hit=54395  
                                       Worker 4: actual time=0.016..1844.956 rows=12272026 loops=1  
                                         Buffers: shared hit=54301  
                                       Worker 5: actual time=0.020..1838.015 rows=12133488 loops=1  
                                         Buffers: shared hit=53688  
                                       Worker 6: actual time=0.017..1839.597 rows=12211232 loops=1  
                                         Buffers: shared hit=54032  
 Planning time: 0.268 ms  
 Execution time: 23271.260 ms  
(104 rows)  
```  
这个patch的讨论，详见邮件组，本文末尾URL。  
PostgreSQL社区的作风非常严谨，一个patch可能在邮件组中讨论几个月甚至几年，根据大家的意见反复的修正，patch合并到master已经非常成熟，所以PostgreSQL的稳定性也是远近闻名的。  
## 参考    
https://commitfest.postgresql.org/13/871/  
https://www.postgresql.org/message-id/flat/CAEepm=2W=PI:EMAIL#CAEepm=2W=PI:EMAIL 
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")