1.00
0.98
1.00
0.94
1.58
1.53
1.47
1.38
1.53
1.54
1.65
1.59
1.79
1.61
1.60
1.53
2.74
2.56
1.76
1.49
2.39
2.34
2.71
2.58
3.10
2.82
2.54
2.36
1 GPU
1.00
0.96
1.00
0.63
1.00
0.90
1.00
0.97
1.00
0.98
1.00
0.89
1.84
1.67
1.29
1.02
1.69
1.62
1.64
1.56
1.67
1.61
1.63
1.50
4 GPUs
3.02
2.68
1.72
1.24
2.73
2.39
2.76
2.70
3.35
3.28
2.72
2.46
Model
VGG16
GoogLeNet
ResNet50
ResNet101
ResNet152
Average
Baseline
HETEE
Baseline
HETEE
Baseline
HETEE
Baseline
HETEE
Baseline
HETEE
Baseline
HETEE
1 GPU
1.00
0.97
1.00
0.94
1.00
0.96
1.00
0.98
1.00
0.98
1.00
0.97
1.75
1.65
1.37
1.33
1.66
1.61
1.73
1.63
1.72
1.57
1.65
1.56
2.52
2.48
1.60
1.45
2.73
2.46
2.89
2.82
3.26
2.99
2.60
2.44
However, the absolute multiplication effect of multiple GPUs
is not obvious, because 4 GPUs (with 4* PCIe x8: 32 Lanes)
need to communicate with the same proxy node CPU that
has only 1 PCIe port (PCIe x4) in our prototype. It thus causes
trafﬁc contention. This problem can be solved by increasing
the I/O bandwidth connected to the PCIe fabric.
C. Resource utilization of FPGA
The security and isolation related functions in the SC such
as the (de)encryption modules,
the remote attestation and
message queue scheduling modules, are implemented inside
the Xilinx Zynq FPGA chip. The Vivado synthesis report
shows that these functions consume 52.54% LUT and 43.70%
FF programmable resources, which run at the frequency of 100
MHz. For the decryption and hardware data copy module, its
average bandwidth is 267.67 MB/s and the latency is 44.83
ms. The encryption and hardware data copy module has an
average bandwidth of 268.87 MB/s and a latency of 44.63ms.
VII. SECURITY ANALYSIS
In this section, we present the security analysis on HETEE,
from the perspectives of its TCB and attack surface, as well
as the major protection.
TCB. The TCB includes the hardware, ﬁrmware and software
components of the Security Controller (SC) 1, as follows:
• Hardware components on the SC’s FPGA device. These
components include key generation, message (de)encryption
& Parsing & Dispatch engines and logic for secure boot and
reset of the proxy nodes and accelerators. Also we trust the
FPGA device’s encrypted bitstream, whose integrity is ensured
by the manufacturer’s secure boot protection (see Sec. III-D).
• Firmware on the SC’s mCPU. Also in the TCB is the
ﬁrmware for isolation/enclave management (conﬁguring the
PCIe switch, secure reboot of the proxy node), and code
1HETEE is designed with the focus on protecting PaaS platform. Under this
service model, HETEE is meant to provide the following security guarantees:
an enclave user’s data is protected (1) from the enclaves on other proxy nodes,
(2) from past and future users of the same proxy node (3) from untrusted
hosts and (4) from the cloud provider. These guarantees are achieved by the
physical isolation that separates different enclaves and an enclave from hosts,
secure rebooting that checks the integrity of the platform software to avoid
infection from past users and chassis-level protection to detect unauthorized
physical access to the HETEE box. Since none of such protection has been
implemented on the proxy node, we consider the node outside the TCB.
for remote attestation on mCPU. Particularly, we implemented
the isolation and enclave management module on a tailored
open-source coreboot [87] to avoid using a more heavyweight
Linux OS. Our implementation is only 300K bytes, compared
with over 30M bytes of a Linux kernel.
• GPU ﬁrmware. We assume that
the ﬁrmware does not
include malicious code and its integrity is protected. The
ﬁrmware of a modern GPU is under secure boot and read-
only protection [88], [96]. For older GPU devices, the ﬂash
drives [89] that keep their ﬁrmware can be conﬁgured as read-
only, by setting its write protection pin.
• Micro Control Unit for the tamper-resistant HETEE box.
MCU is used by the HETEE box to detect physical tamper
attempts and remove the sensitive FPGA bitstream, as utilized
by existing tamper-resistant products (Sec. III-F).
Protection under the TCB/assumptions. HETEE compo-
nents are protected or prevented from misbehaving under the
TCB and assumptions, as summarized below:
• Root of trust. The endorsement key for trust establishment
is the root of trust of a HETEE platform. It is kept as a
constant in the encrypted FPGA bitstream. The integrity and
conﬁdentiality of the bitstream is protected by the FPGA
synthesis tool and the dedicated circuit of the FPGA bitstream
decryption engine.
• Trust chain establishment. Each time a HETEE platform is
restarted, the FPGA ﬁrst powers up and loads the encrypted
bitstream ﬁle in its boot ﬂash to the logic circuit. Then a
dedicated measurement logic on the FPGA will ensure that the
SC is initiated with trusted ﬁrmware and security management
code (Sec. III-D).
• Proxy CPU ﬁrmware protection. To protect proxy ﬁrmware,
the SC includes a proactive ﬁrmware veriﬁcation mechanism:
the SPI pin of the CPU boot ﬂash chip is routed to the I/O
pins of the FPGA, which allows the FPGA to measure the
ﬁrmware in the ﬂash chip and verify its integrity.
• Protection from a compromised proxy node. The proxy
node is isolated from the SC and can only access its task
queue. Therefore, a compromised proxy cannot tamper with
the SC in the absence of security ﬂaws. Further all HETEE
enclaves (each managed by a proxy) are physically separated
from each other through PCIe. During task switches, all
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:57:53 UTC from IEEE Xplore.  Restrictions apply. 
1460
accelerators and proxy nodes will be reset to secure states
(assuming that GPU ﬁrmware is trusted, as discussed below).
• GPU ﬁrmware protection. Today’s GPU vendors have al-
ready taken measures to protect the ﬁrmware. For example,
the latest GPUs support ﬁrmware signature checking, which
prevents unauthorized ﬁrmware modiﬁcation [88], [96]. For
some of the older generation of GPUs, the ﬂash chip storing
the ﬁrmware can be conﬁgured as read-only using its write
protection (WP) pin [89] to defeat a tampering attack.
• Defense against physical attack. The HETEE box is pro-
tected by mature tamper-resistant techniques, and a typical
solution can be found in Sec. III-F.
Comparison with other approaches. We compare our as-
sumptions with those underlying other TEE solutions support-
ing GPUs, including Graviton and HIX.
• Software stack. In both Graviton and HIX, the GPU driver,
CUDA runtime and deep learning framework run in the en-
clave on the CPU. They rely on the whole software stack (GPU
driver, CUDA, tensorﬂow, etc.) for data protection, which is
problematic given the large side-channel attack surface (cache,
memory, CPU usage, etc.) exposed by today’s CPU enclaves
(SGX, TrustZone, etc.). Further, the communication between
the CPU TEE and the GPU TEE might also leak information.
By comparison, HETEE enclaves are physically isolated from
untrusted nodes and from each other, so we do not need to
trust such software to be side-channel free.
• GPU ﬁrmware. Like HETEE, Graviton and HIX also need
to trust GPU ﬁrmware. When a GPU is assigned to a different
enclave, it will also be cleaned up to prevent information leak.
• Physical attack protection. HIX does not work under physi-
cal attacks on PCIe interconnects and GPUs. Graviton protects
against physical attack but needs to modify the GPU chip.
To support unmodiﬁed GPU, HETEE adopts chassis-level
protection as used in commercial HSM products.
Integrity protection. Like other TEEs (e.g., SGX, Sanctum),
HETEE protects the integrity of an enclave program’s execu-
tion: that is, the program’s execution trace is only determined
by the program’s input provided by the enclave user, not by
the program in a different enclave or in an untrusted host [95];
further the integrity of the enclave user’s input is also protected
by integrity check and authentication.
Trusted path between remote user and HETEE enclave.
Remote attestation of the HETEE system uses a standard re-
mote authentication and key agreement mechanism to support
mutual authentication between the remote user and the HETEE
platform, and negotiate a shared secret between them which
can be further used to protect the subsequent communication.
The enclave measurement report for the remote attestation
includes the SC’s own metrics and the HETEE enclave metrics
(Sec. III-D). The shared secret is used to establish a secure
channel between the user and the enclave.
Attack surfaces. Given the small attack surface (physically
isolated enclave, no memory, cache, CPU sharing with the
untrusted hosts and across enclaves), the adversary running
on the host node or in an attack enclave can only observe
the timing between an enclave’s reception of its input and
generation of its output, and packet size, sequence of the
communication with the enclave user. Such information leak
is way below that of other TEE designs. Covert channels are
currently out of the scope of the paper (Sec. II-C).
VIII. DISCUSSION
HETEE box vs. a separate server. An intuitive alternative
is to deploy a separate server (e.g., standard GPU servers) in
the data center as a TEE, and other nodes access its dedicated
heterogeneous computing resources through an Ethernet net-
work. Compared with a standard but separated server, HETEE
is much securer and can be cheaper (given the same level of
protection). First of all, our approach is characterized by the
design to achieve a thin TCB. A separated server, without
intensive customization, will have a thick software stack.
Secondly, HETEE effectively prevents the malicious external
access to the internal resources of the HETEE box through
the two-level hardware strong isolation mechanism. Finally,
it enables task-level isolation through a restart mechanism
to prevent possible information leaks or malicious attacks
between tasks. These mechanisms do not exist in the design
of standard heterogeneous computing servers.
Security related cost analysis of HETEE. The cost of the
HETEE box can be broken down into ﬁve major components:
PCIe switch backplane, accelerators, the SC node, the proxy
nodes as well as self-destructing module. As mentioned
earlier, since such a pooled resource architecture is now
increasingly used in the data center, PCIe switch backplane
and centralized GPUs can be considered as existing resources
that do not count towards the security cost of the HETEE
box. Therefore, the security related cost of the HETEE box
comes primarily from the SC, the proxy nodes and the
self-destructing module.
7.1%
3.4%
12.4%
2.0%
1.7%
0.8% 3.0%
0.5%
1.2%
0.5% 2.1%
0.3%
75.1%
94.0%
95.9%
(a) Integrating