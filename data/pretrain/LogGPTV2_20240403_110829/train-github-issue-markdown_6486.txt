**I'm submitting a ...** (check one with "x")
    [x] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
If a _dependency_ (e.g. `ServiceA`) is injected into a _guard_ (e.g. `GuardA`;
service, that implements `CanActivate` interface), in a _feature module_ (e.g.
`FeatureModule`), that is lazy loaded, and both `ServiceA` and `GuardA` are
defined in that `FeatureModule`, than `GuardA` gets it's own dedicated version
of the `ServiceA`, whereas other _components_ and _services_ , defined at the
_feature module_ get their own version of the `ServiceA`, that is shared among
them. Basically _injected service_ isn't a singleton anymore. I think it's
related to how the `RouterModule` works with _DI_.
**Expected behavior**  
All _guards_ , _services_ and _components_ of a _feature module_ , get the
same service instance, that is injected into them. So in the provided plunker
the`FeatureService` should be created only once.
**Minimal reproduction of the problem with instructions**  
Here is a plunker https://plnkr.co/cYjMbvgJEciKg00GSNfb  
When the `Feature` link is clicked, then `FeatureModule` is lazy loaded.
`FeatureComponent` is displayed and it contains a template with a random
number, that is provided by an injected `FeatureService`. When `Feature child`
link is clicked, `FeatureChildGuard` gets activated and a alert box with a
value, that is provided by the `FeatureService` is provided and it differs
from the one, that is displayed in the `FeatureComponent`, because dedicated
`FeatureService` is created for that guard (you can also see it in
`console.log` calls).
**What is the motivation / use case for changing the behavior?**  
Each feature module is assumed to be an isolated and self-contained piece of
program logic, so everything, that is defined in this module, that is intended
to be singleton should be it. And `CanActivate` logic can be related to a
current state of a feature module service and not only the ones, that are
defined at the top-most level of angular app.
**Please tell us about your environment:** OS X Sierra 10.12.1, WebStorm
2016.3.3, node 6.9.1, angular-cli 1.0.0-beta.25.5 (but I guess this
information is not important, as it's reproducible in browser)
  * **Angular version:** 2.4.5
  * **Browser:** all
  * **Language:** TypeScript 2.0