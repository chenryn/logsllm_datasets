but these variants are more involved.)
• For every but the last slot of epoch 0 the adversary recruits
two ‘swayers’. The role of these swayers is to withhold their
votes in slot i and release the votes selectively to subsets
of the honest validators in slot i + 1 in order to split the
honest validators’ votes equally between the two chains.
• For every slot of epoch 0 the adversary recruits two more
‘swayers’. The role of these additional swayers is to with-
hold their votes during slot i of epoch 0 and release the votes
selectively to subsets of the honest validators in slot C +i of
epoch 1 in order to split the honest validators’ votes equally
between the two chains in epoch 1. Similarly, these swayers
withhold their votes during epoch 1 and release the votes
selectively to subsets of the honest validators in epoch 2 in
order to split the honest validators’ votes equally between
the two chains in epoch 2. This repeats beyond epoch 2.
• Finally, to achieve an equal split of honest validators’ votes
for every slot in epoch 0, we require that every slot has an
even number of honest validators. If a slot does not have
an even number of honest validators, then the adversary
recruits a ‘ﬁller’ (‘ ’ in Figure 4) which behaves like an
honest validator for the rest of the attack.
Thus, sufﬁcient for an epoch to be opportune to start the
attack is that the following conditions are all satisﬁed:
E (0)
(a) : The proposer of slot 0 is adversarial.
E (0)
(b): Slot 0 has ≥ 6 adversarial validators (the adversarial
proposer, two swayers for epoch 0, two swayers for
epoch 1, potentially one ﬁller).
E (0)
(c),i: Slots i = 1, ..., (C−2) have ≥ 5 adversarial validators
(two swayers for epoch 0, two swayers for epoch 1,
potentially one ﬁller).
E (0)
(d): Slot (C − 1) has ≥ 3 adversarial validators (two
swayers for epoch 1, potentially one ﬁller).
We show in Appendix A-C that, in particular in the regime
of many validators (n → ∞), the probability that a particular
16
epoch is opportune is approximately equal to β, the fraction
of adversarial validators.
For slots i = 1, ..., (C−1) of epoch 0 the adversary uses two
‘swayers’to withhold their votes in slot i and release the votes
selectively to equally sized subsets of the honest validators in
slot i + 1 in order to split the honest validators’ votes equally
between the two chains. Thus, in each slot, an equal number
of validators votes ‘left’ and ‘right’, respectively, so that at the
end of epoch 0 both chains have equal weight. In particular,
none of the chains achieves a supermajority. Thus, no Casper
ﬁnalization can take place.
4) Epoch 1: Transition to Steady-State : During epoch 1,
the adversary uses the other group of swayers recruited in
epoch 0 to selectively release more withheld votes from epoch
0 to keep splitting validators into two groups, one of which
sees ‘left’ as leading and votes for it, the other sees ‘right’
as leading and votes for it. All the adversary needs to do is
release withheld votes so as to reafﬁrm the honest validators
in their illusion that whatever chain they previously voted on
in epoch 0 happens to be still leading, so that they renew their
vote. At the end of epoch 1 there are still two chains with
equal number of votes and thus neither gets ﬁnalized.
5) Epoch 2 and Beyond: Steady-State : During epoch 2 and
beyond the attack reaches steady-state in that the adversarial
actions now repeat in each epoch. Note that the validators
whose epoch 0 votes the adversary released during epoch 1
to sway honest validators have themselves not voted in epoch
1 yet. Thus, during epoch 2 the adversary selectively releases
withheld votes from epoch 1 to keep honest validators split
between the two chains. Again, all the adversary needs to do
is to release withheld votes such that it reafﬁrms the honest
validators in their illusion that whatever chain they previously
voted on in epoch 1 happens to be still leading, so that they
renew their vote. This continues indeﬁnitely. Neither chain
ever reaches a supermajority, thus, no Casper ﬁnalizations take
place. As a result of this attack, the ledger of Gasper does not
incorporate new transactions and thus is not live.
We analyze the probability Pr(cid:2)E ((cid:96))(cid:3) that an adversary can
C. Analysis & Simulation
launch the attack in epoch (cid:96). Without loss of generality, we
consider (cid:96) = 0. Recall that the events E (0)
(d) are sufﬁcient
for the adversary to be able to launch the attack. Obviously,
(a) to E (0)
(2)
For ﬁxed C and large n such that βn/C ≥ 6, due to tail
Pr
(a)
bounds for the hypergeometric distribution,
(cid:105)
= 1 − β.
(cid:104)E (0)
(cid:105)
(cid:104)E (0)
(cid:104)E ((cid:96))(cid:105) ≥ β − C exp (−Θ(n)) .
(cid:104)E (0)
, Pr
(c),i
(d)
, Pr
(cid:105) ≤ exp (−Θ(n))
(cid:105)
(cid:104)E (0)
(b)
Pr
(3)
Thus, with a straightforward application of the union bound,
Pr
(4)
Note that, since the events E ((cid:96)1) and E ((cid:96)2) of the adversary
being able to kick-start the attack in two epochs (cid:96)1 (cid:54)= (cid:96)2
are independent, the number of epochs until the ﬁrst epoch
(cid:3)
)
(cid:96)
(
E
(cid:2)
r
P
0.4
0.3
0.2
0.1
0
β = 0.1
β = 0.3
C = 8
C = 16
C = 32
C = 64
50
100
200
500
1,000
Committee size n/C
Fig. 13. Monte Carlo estimate of the probability that an adversary who
controls β fraction of stake can launch the attack in epoch (cid:96), as a function
of number of slots per epoch C and committee size n/C. Observe that
Pr(cid:2)E ((cid:96))(cid:3) ≈ β is a good rule of thumb, even for moderate n.
a geometric distribution with mean 1/ Pr(cid:2)E (0)(cid:3). It is thus
in which the adversary can kick-start
the attack follows
exponentially unlikely (in the number of epochs considered)
that the adversary is not able to kick-start the attack in any
of a number of epochs, even for small β. As soon as an
opportune epoch occurs and the adversary can kick-start the
attack, liveness is prevented with certainty, assuming that the
networking assumptions given in Appendix A-A2 are satisﬁed.
We use a Monte Carlo simulation to numerically evaluate
the probability Pr(cid:2)E ((cid:96))(cid:3).8 The result is shown in Figure 13.
We observe that the approximation Pr(cid:2)E ((cid:96))(cid:3) ≈ β is a pretty
good rule of thumb, even for moderate numbers of validators.
This matches the intuition that the probability of successfully
kick-starting the attack in a given epoch is largely dominated
by the probability that the proposer in the ﬁrst slot of the
epoch is adversarial. All further conditions are satisﬁed as soon
as there are six adversarial validators per each slot, which
happens with high probability as n grows and β is held ﬁx.
APPENDIX B
ANALYSIS AND SECURITY PROOF FOR THE
SNAP-AND-CHAT CONSTRUCTION USING STREAMLET
We prove Theorem 1 for the protocol Πsac composing a
permissioned longest chain protocol and Streamlet.
Lemma 1 (Safety Lemma for Πbft). (See [12, Lemma 14,
Theorem 3] and Algorithm 1) If some honest node sees a
notarized chain with three adjacent BFT blocks B0, B1, B2
with consecutive epoch numbers e, e + 1, and e + 2, then there
cannot be a conﬂicting block B (cid:54)= B1 that also gets notarized
in any honest view at the same depth as B1. Hence, there
cannot be conﬂicting ﬁnal BFT blocks in any honest view.
Proof. The proof of [12, Lemma 14], which is based on a
quorum intersection argument, is unaffected by the fact that
honest nodes do not vote for a proposed BFT block if they do
not view the referenced LC block as conﬁrmed. Even with the
modiﬁcation shown at line 19 of Algorithm 1, honest nodes
would not equivocate or vote for proposed BFT blocks that do
not extend the longest notarized chain. Then, via [12, Theorem
8The source code of the simulation can be found at: https://github.com/tse
-group/gasper-attack.
17
3], there cannot be conﬂicting ﬁnal BFT blocks in the views
of honest nodes.
By the ledger extraction explained in Figure 6, Lemma 1
completes the proof of safety for LOGﬁn.
Lemma 2.
(See [12, Lemma 5] and Algorithm 1) After
max{GST, GAT}, suppose there are three consecutive epochs
e, e+1, and e+2, all with honest leaders denoted by Le, Le+1,
and Le+2, and the leaders’ proposals reference LC blocks
that are viewed as conﬁrmed by all honest nodes. Then the
following holds: (Below, let B denote the block proposed by
Le+2 during epoch e + 2.)
(a) By the beginning of epoch e + 3, every honest node will
observe a notarized chain ending at B, which was not
notarized before the beginning of epoch e.
(b) No conﬂicting block B(cid:48) (cid:54)= B with the same length as B
will ever get notarized in honest view.
Proof. Note that every honest node is awake and the network
is ∆ synchronous after max{GST, GAT}. Due to the high-
lighted condition added to the Lemma, all honest nodes view
the LC blocks referenced by the proposals as conﬁrmed, thus,
the additional condition for an honest node to cast a vote (see
line 19 of Algorithm 1) is satisﬁed. Then, all honest nodes
behave as they would in Streamlet, and the liveness lemma
[12, Lemma 5] ensures the validity of (a) and (b).
Lemma
After
max{GST, GAT}, suppose that
there are ﬁve consecutive
epochs e, e + 1, .., e + 4 with honest leaders and the leaders’
proposals reference LC blocks that are viewed as conﬁrmed
by all honest nodes. Then, by the beginning of epoch e + 5,
every honest node observes a new ﬁnal BFT block, proposed
by an honest leader, that was not ﬁnal at the beginning of
epoch e.
for Πbft).
(Liveness
Lemma
3
Proof follows from Lemma 2 and [12, Theorem 6].
Notice that Lemma 3, by itself, is not sufﬁcient to show
1,Z1),
the liveness of LOGﬁn after max{GST, GAT} under (A∗
due to the highlighted condition in the lemma’s statement.
In this context,
the following theorem shows that after
max{GST, GAT}, the LC blocks referenced by honest pro-
posals in Πbft are viewed as conﬁrmed by all honest nodes,
thus, ensuring that the highlighted condition in the statement
of Lemma 3 is satisﬁed after max{GST, GAT}. Although,
Theorem 2 below is stated for the static version of the longest
chain protocol described in [3], a similar statement can be
made for [5]. Πlc is initialized with a parameter p which
denotes the probability that any given node gets to produce
a block in any given time slot.
Theorem 2. For all
n − 2f
p  0 such that
and GAT speciﬁed by (A∗
9Value of C depends on p, n, f and ∆.
for any GST
1,Z1), Πlc(p) is secure after
C(max{GST, GAT} + σ), with transaction conﬁrmation time
√
Tconﬁrm = σ, except with probability e−Ω(
σ).10
Finally, the following Lemma completes the proof of live-
Full proof and the associated analysis can be found in
Appendix C. The proof extends the technique of pivots in
[3] from the synchronous model to the partially synchronous
model. The technique of Nakamoto blocks [44] can be used
to further strengthen the result to get an optimal bound for the
block generation rate p given n, f and ∆.
ness for LOGﬁn after max{GST, GAT}:
Lemma 4 (Liveness Lemma for LOGﬁn). There exists a
constant C > 0 such that for any GST and GAT speciﬁed by
(A∗
1,Z1), LOGﬁn is live after time C(max{GAT, GST} + σ)
√
except with probability e−Ω(
there exists a constant C > 0
Proof. Via Theorem 2,
such that for any GST and GAT speciﬁed by (A∗
1,Z1),
Πlc is safe and live, with conﬁrmation time σ, after time
√
C(max{GAT, GST} + σ) except with probability e−Ω(
σ).
Hence, the following observation is true for any LC block b ex-
√
cept with probability e−Ω(
σ): If b is ﬁrst viewed as conﬁrmed
by an honest node at some time t > C(max{GAT, GST}+σ),
then, it will be regarded as conﬁrmed in the views of all of
the honest nodes by time t + ∆.
σ).
√
σ).
Each BFT block proposed by an honest leader at time t
references the deepest conﬁrmed LC block in the view of
the leader at time t. Moreover, honest nodes vote ∆ time
into an epoch, i.e., ∆ time after they see a proposal. Hence,
after time C(max{GAT, GST} + σ), all of the proposals by
honest leaders in Πbft reference LC blocks that are viewed
as conﬁrmed by all honest nodes when they vote, except
√
with probability e−Ω(
σ). Finally, via Lemma 3, after time
C(max{GAT, GST} + σ), every honest node observes a new
ﬁnal BFT block proposed by an honest leader after all of
the ﬁve consecutive honest epochs, except with probability
e−Ω(
Next, consider a time interval [s, s + σ] such that s >
C(max{GAT, GST} + σ). Since the proposer of an epoch
in Πbft is determined uniformly at random among all of the
nodes, after time GAT, any epoch has an honest proposer
independent from other epochs, with probability at least 2/3
1,Z1). Hence, there exists a sequence of ﬁve consec-
under (A∗
utive honest epochs within the interval [s + σ/2, s + σ] except
with probability e−Ω(σ). Then, every honest node observes a
new ﬁnal BFT block proposed by an honest leader within the
interval [s + σ/2, s + σ] except with probability e−Ω(σ).
Finally, via the liveness of Πlc after C(max{GAT, GST} +
σ), a transaction tx received by an awake honest node at time
s will be included in a conﬁrmed LC block b(cid:48) by time s +
√
σ/2 except with probability e−Ω(
σ). Now, let b denote the
10Using the recursive bootstrapping argument developed in [44, Sec-
√
tion 4.2], it is possible to bring the error probability e−Ω(
σ) as close to
an exponential decay as possible. In this context, for any  > 0, it is possible
to ﬁnd constants A, a such that Πlc(p) is secure after C max{GST, GAT}
with conﬁrmation time Tconﬁrm = σ except with probability Ae−aσ1− .
18
conﬁrmed LC block referenced by the new ﬁnal BFT block
that was proposed by an honest node within the interval [s +
σ/2, s + σ]. Via the safety Πlc, we know that b extends b(cid:48)
√
containing the transaction tx except with probability e−Ω(
σ).
Consequently, any transaction received by an honest node at
some time s > C(max{GAT, GST} + σ) becomes part of
LOGﬁn in the view of any honest node i, by time s + σ,
except with probability e−Ω(σ) + e−Ω(
σ). This
concludes the proof.
σ) = e−Ω(
√
√
σ).
The following Lemma shows the consistency of LOGﬁn
2,Z2), which is a necessary
with the output of Πlc under (A∗
condition for the safety of LOGda.
Lemma 5. LOGﬁn is a safe preﬁx of the output of Πlc in the
view of every honest node at all times under (A∗
2,Z2) except
√
with probability e−Ω(