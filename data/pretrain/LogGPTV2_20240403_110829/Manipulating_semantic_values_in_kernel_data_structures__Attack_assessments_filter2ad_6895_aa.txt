title:Manipulating semantic values in kernel data structures: Attack assessments
and implications
author:Aravind Prakash and
Eknath Venkataramani and
Heng Yin and
Zhiqiang Lin
Manipulating Semantic Values in Kernel Data
Structures: Attack Assessments and Implications
Aravind Prakash⇤, Eknath Venkataramani⇤, Heng Yin⇤, Zhiqiang Lin†
{arprakas, evenkata, heyin}@syr.edu, PI:EMAIL
†Department of Computer Science, University of Texas at Dallas
⇤Department of EECS, Syracuse University
Abstract—Semantic values in kernel data structures are crit-
ical to many security applications, such as virtual machine
introspection, malware analysis, and memory forensics. However,
malware, or more speciﬁcally a kernel rootkit, can often directly
tamper with the raw kernel data structures, known as DKOM
(Direct Kernel Object Manipulation) attacks, thereby signiﬁcantly
thwarting security analysis. In addition to manipulating pointer
ﬁelds to hide certain kernel objects, DKOM attacks may also
mutate semantic values, which are data values with important
semantic meanings. Prior research efforts have been made to
defeat pointer manipulation attacks and thus identify hidden
kernel objects. However, the space and severity of Semantic
Value Manipulation (SVM) attacks have not received sufﬁcient
understanding. In this paper, we take a ﬁrst step to systematically
assess this attack space. To this end, we devise a new fuzz
testing technique, namely - duplicate-value directed semantic ﬁeld
fuzzing, and implement a prototype called MOSS. Using MOSS,
we evaluate two widely used operating systems: Windows XP and
Ubuntu 10.04. Our experimental results show that the space of
SVM attacks is vast for both OSes. Our proof-of-concept kernel
rootkit further demonstrates that it can successfully evade all
the security tools tested in our experiments, including recently
proposed robust signature schemes. Moreover, our duplicate value
analysis implies the challenges in defeating SVM attacks, such as
an intuitive cross checking approach on duplicate values can only
provide marginal detection improvement. Our study motivates
revisiting of existing security solutions and calls for more effective
defense against kernel threats.
I.
INTRODUCTION
Operating system (OS) manages the hardware resources
and provides a higher-level abstraction to the user-level appli-
cations. This higher-level abstraction can be described using
the OS-level semantic knowledge, such as what processes
are active in the system, which process is currently run-
ning, what modules are loaded into a speciﬁc process, which
ﬁles are opened by a process, which network connections
have been opened, and so on. This knowledge is crucial
for many computer security applications,
including virtual
machine introspection (VMI), malware detection and analysis,
and memory forensics. The functionality and trustworthiness of
these security applications critically depend on the correctness
of the obtained OS-level semantic knowledge.
However, OS kernel can be compromised. Particularly, a
family of attacks, called Direct Kernel Object Manipulation
(DKOM) can directly tamper with values (including both
pointers and data values) in important kernel data structures, in
order to hide malicious activities and confuse security tools.
For instance, the FU rootkit [1] has capabilities of hiding a
process, escalating the privilege of a process, hiding a network
connection, etc. Consequently, a great deal of work has been
designed to detect the hidden objects [2]–[5], based on the
notion that DKOM rootkits often manipulate kernel pointers
to hide their presence. For instance, KOP [3] and MAS [5]
can generate nearly complete traversal template to discover
nearly all kernel objects. Two robust signature schemes (value-
based [3] and pointer-based [4]) are used to scan the memory
dump and can identify hidden objects more reliably.
Unfortunately, in addition to manipulating pointers to hide
speciﬁc kernel objects, attackers may also manipulate data
values in kernel data structures to mislead security tools. To
distinguish from pointer manipulation based DKOM attacks,
we call such attacks as Semantic Value Manipulation (SVM)
attacks. It
is still unclear how large the attack space of
SVM is and how severe SVM attacks can be on OS kernels,
specially on closed-source operating systems (like Windows).
On one hand, with the highest privilege, an attacker can modify
arbitrary memory locations; on the other hand, she does not
want these modiﬁcations to introduce noticeable differences in
system behavior (e.g., crashes, instability, and malfunction).
Therefore in this paper, we conduct the ﬁrst systematic
study to assess the attack space of SVM attacks on both
Windows and Linux,
the two most widely used operating
systems. In order to conduct this study, we propose a new
fuzz testing technique to automatically mutate data structure
ﬁelds of interest. There are two unique features in our system:
(1) It is semantic-ﬁeld oriented, namely it can cooperate with
the test program and automatically locate the data structure
ﬁelds that hold speciﬁed OS semantic information and mutate
their values; and (2) it is duplicate-value directed, because
semantic values are often duplicated in various data structures.
Test coverage is increased by fuzzing these duplicates both
individually and simultaneously.
Value duplicates might
lead to a more robust defense
against such attacks. For instance, as a hypothetical defense,
a security tool may conduct consistency checking across these
duplicate values to detect any mutation attempts. Therefore,
during the monitoring of the binary execution of the OS kernel,
we would like to automatically locate the data structure ﬁelds
of interest exercised by our test program as well as their
duplicates in other data structures. By fuzzing these values
individually, we can identify which copy is subject to mutation.
By fuzzing values simultaneously, we can determine whether
this entire value duplicate set is subject to mutation. This
helps us determine if the security tools can indeed perform
consistency checking on the set.
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
To automatically identify duplicate values from the binary
execution of the OS kernel, we devise dynamic duplicate
value analysis algorithm, a new dynamic dataﬂow analysis
algorithm. This algorithm monitors the execution of each
instruction and maintains a duplicate value set for each variable
(i.e., memory location and register). Since our analysis directly
works on the binary execution of an operating system, it is
general enough to evaluate any operating system (including
the closed-source OSes, such as Windows).
We have implemented this new fuzz testing technique into
a prototype system, named MOSS (short for “Mutating OS
Semantics”). Using MOSS, we conduct experimental analysis
on Windows XP and Ubuntu 10.04.
To further demonstrate the attack impact, we implemented
a proof-of-concept kernel rootkit, based on FUTo [1] (a well-
known DKOM rootkit for Windows). Speciﬁcally, we installed
a real-world bot, TDSS [6] in a controlled Windows XP
guest OS and using the rootkit, we performed simultaneous
mutations to all vulnerable semantic ﬁelds identiﬁed by MOSS.
The mutations were targeted at hiding and/or misleading the
state-of-the-art security tools without leading to system crash.
Paper Contribution. In summary, this paper makes the fol-
lowing contributions:
• We conduct the ﬁrst systematic study to assess the
attack space and severity of SVM attacks. Speciﬁcally,
we propose duplicate-value directed semantic ﬁeld
fuzzing technique, and devise dynamic duplicate value
analysis technique to automatically identify duplicate
ﬁelds. We have implemented these techniques in our
prototype MOSS.
• We perform an empirical evaluation on both Windows
and Linux OSes using fuzzing based tests, and show
that many semantic values can be manipulated without
any adverse effects on system stability and program
functionality, implying that the space of SVM attacks
is vast for both Windows and Linux.
• We implement a proof-of-concept SVM rootkit that
conﬁrms the ﬁndings from our fuzz testing. Protected
by our rootkit, a realworld bot program can success-
fully mislead or worse, hide from all the security
tools we tested, including recently proposed robust
signature schemes.
Our study also assesses the difﬁculty of defeating
SVM attacks. We show that consistency checking on
duplicate values is effective on some semantic ﬁelds,
but not all.
•
II. BACKGROUND & PROBLEM STATEMENT
A. Semantic Value Manipulation Attacks
The OS manages hardware resources and provides services
such as system calls to user level programs. The semantic ab-
straction of OS, the focus of this paper, consists of a variety of
entities, including processes, threads, ﬁles, directories, network
connections, kernel modules, etc. Each entity is associated with
a set of attributes, such as ID, name, status, etc.
These attributes are stored in the data ﬁelds of various
kernel data structures. We refer to such data ﬁelds that hold OS
semantic information as semantic ﬁelds (for example, in ﬂavors
of Windows OS, “UniqueProcessId” and “ImageFileName” in
EPROCESS hold the pid and the process name, respectively).
Sometimes, one semantic value may be replicated in multiple
kernel data structures. For instance, in Windows, the program
name is stored in EPROCESS as the name of the process and
the main module name as one of the loaded modules.
It is common for security analysis tools to refer to such
attributes to retrieve sensitive information from the kernel.
While there are numerous techniques to ensure kernel code in-
tegrity [7]–[9], as well as control ﬂow integrity (e.g., [2], [10]–
[12]), there is no reliable data integrity protection techniques
yet. As such, to evade all the existing defense mechanisms,
adversaries are motivated to launch data-only attacks, particu-
larly DKOM attacks wherein, adversaries directly modify the
pointer ﬁelds and data ﬁelds of certain kernel objects to hide
and manipulate certain OS semantic ﬁelds [1].
While unlinking a kernel object by manipulating pointers is
an effective hiding technique, defeating such a technique using
data structure traversal
[2], [5] and scanning [3], [4] based
approaches is relatively easy. What is more interesting is the
direct modiﬁcation on semantic values. For example, can an
attacker directly modify the process name in the process object
and the name of an opened ﬁle to deceive security analysis
tools? What other semantic values can be freely mutated
by attackers? Although we are aware of speciﬁc DKOM or
SVM attacks, these questions in general have not been well
understood.
B. Problem Statement
In this paper we aim to conduct a systematic study to assess
the space and severity of SVM attacks. In particular, we aim
to answer the following two questions:
(1) Which semantic ﬁelds are subject to direct mutation
attacks? Attackers have incentives to manipulate values in the
semantic ﬁelds, but cannot make arbitrary changes. Some of
these changes will lead to system crash or malfunction, which
attackers will try to avoid because their goal is to maintain
stealth. A semantic ﬁeld is not sensitive to mutation if, after a
change to it, the OS continues to function normally. However,
security tools can depend on a semantic value if it is sensitive
to mutation, i.e., changing it will impact system or program
stability.
The answer to this question may also heavily depend on
each individual OS version, due to the different data structure
models and different ways to operate on these values. From a
security standpoint, a semantic value is untrustworthy if several
common mutations cause no adverse effects on the system
or the program. However, it is difﬁcult to conclude that a
semantic value is completely trustworthy. A failed mutation
attempt on a semantic ﬁeld under certain system states does
not mean that this semantic value is not mutable at all. Under
other circumstances and with multiple mutations, it might be
possible to safely change the semantic value. We do not intend
to completely explore the attack space, because it is impossible
to iterate through all circumstances and combinations. To
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. Architecture of Dupcliate-Value directed Fuzzing
be more realistic, we aim to evaluate single value mutation
attacks, in which each semantic ﬁeld is mutated individually.
This evaluation at least serves as a lower bound of the actual
attack space.
(2) Can consistency checking help detect SVM attacks?
An OS often manages its semantic information in a redun-
dant fashion. We know that this is true at least for some
semantic information such as PID and process name. From
the perspective of defenders, we may be able to leverage the
information redundancies in the semantic values to detect SVM
attacks. If we know several semantic values are always the
same and one semantic value tends to be less mutable than the
others, we should check this ﬁeld instead of the other ﬁelds.
Alternatively, we may perform a consistency checking on the
set of semantic values. To evade such consistency checking,
attackers would have to change these semantic values in the
entire set, increasing the chances of system instability.
III. OUR TECHNIQUES
In order to answer the above two questions, we propose
a new fuzz testing technique called duplicate-value directed
semantic value fuzzing. The target of this fuzz testing is an
OS kernel (such as Windows or Linux), and the data to be
mutated are the important semantic values along with their
duplicates.
A. System Overview
Figure 1 illustrates an overview of our fuzz testing system.
We run the OS of interest within TEMU [13], [14], a whole-
system binary analysis platform. Such a virtualized testing
environment facilitates fuzz testing for several reasons. First,
it is simple to modify arbitrary memory values. Second, it
can easily revert the virtual machine to the previously saved
state to conduct fuzz testing in the next round. Last and most
importantly, it can dynamically switch between emulation and
virtualization mode for during testing. In the emulation mode,
we can perform ﬁne-grained binary analysis to locate duplicate
semantic values, and then we can switch to the virtualization
mode to fuzz these duplicate values for better testing efﬁciency.
More speciﬁcally, inside the virtual machine, we run a test
program to activate the kernel side execution. Note that we
are mutating the semantic values that are related to malicious
activities. That is, the attacker attempts to manipulate semantic
values about her own behavior, such as the name of the
malicious process, the ﬁle that has been accessed, and so
on. These malicious activities are often stealthy and have
infrequent interactions with the victim system. To mimic these
malicious activities, our test program does not need to achieve
the high test coverage of the OS kernel code. Instead, our
test program just need conduct some common tests to exercise
different OS subsystems, such as task management, ﬁle system,
network stack, etc. Therefore, if all the mutation attempts on
a semantic value do not cause adverse effect in these test
cases, we can conclude that this semantic value is mutable.
if a semantic value is sensitive enough to all
Otherwise,
the mutation attempts on it, we have conﬁdence that
this
semantic value is immutable and thus tend to be trustworthy.
The situation for some semantic values is in between: some
mutations cause system instability while some others do not.
These semantic values are partially mutable.
On top of TEMU, we develop three components: seman-
tics extractor, fuzz engine, and duplicate value analyzer. The
semantics extractor, which will be discussed in Section III-B,
locates the semantic values from the memory snapshot of the
guest system. The duplicate value analyzer monitors the kernel
execution and perform dynamic duplicate value analysis, which
will be detailed in Section III-C. At a high level, it clusters
the memory locations into sets, each of which holds the same
semantic value. The fuzz engine coordinates with the other two
components to conduct automated fuzz testing, which will be
discussed in Section III-D.
B. Locating Semantic Values
At certain execution point, we need to locate the semantic
values to be mutated. Semantic values for mutation are selected
in cooperation with the test program inside the virtual machine.
A test point has been deﬁned within the test program, dictating
which semantic value or which set of values need to be
mutated. More details will be discussed in Section III-D. Then
the semantic extractor needs to locate the selected semantic
value in the guest kernel memory space.
We leveraged Volatility memory forensics framework [15]
and we implemented a plug-in to locate the semantic values
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
Emulated Machine Test Program OS Kernel Fuzz Engine Duplicate Value Analyzer Duplicate Value Sets Semantics Extractor Semantic Fields Virtualized Machine  Test Program OS Kernel Virtualizer Emulator of interests. More speciﬁcally, at the test point, the virtual
machine is paused, and a memory snapshot is taken. Then
our Volatility plug-in will parse the kernel data structures in
the memory snapshot and identify both virtual and physical
address for the selected value. The virtual address will then
be used as input to ﬁnd duplicate value sets, which will then
be mutated individually and simultaneously in the subsequent
fuzz testing.
C. Dynamic Duplicate Value Analysis
Many memory locations share the same value at a given
moment, either coincidentally, or because of program logic.
Our interest is the latter case since such duplicates hold values
which have the same semantic meaning. We call these variables
to be truly duplicate. To identify true duplicate values, we
devise a dynamic binary analysis algorithm that classiﬁes
variables (memory locations or registers) into clusters. Vari-
ables belonging to the same cluster hold the same semantic
value because of the program logic in this particular program
execution.
To better explain the idea of dynamic duplicate value anal-
ysis, consider the example code in Table I. After executing the
6 statements under “Statement” column of Table I, variables
a, c, e, and f should have the same value, so these variables
should belong to the same cluster. b belongs to this cluster till
line 5, where b is assigned to a different value. Suppose that
e is identiﬁed to have a semantic meaning such as pid of a
process, we can conclude that the other variables (a, c, and f)
in the same cluster should also hold the pid of that process.
Therefore, we need to perform dataﬂow analysis to compute
these clusters.
Yet,
the existing forward dataﬂow analysis (i.e.,
taint
analysis [16]) and backward dataﬂow analysis (i.e., backward
slicing [17]) cannot solve this problem. For taint analysis, the
taint source needs to be known in advance. However, in our
case, semantic values can only be identiﬁed at a later stage.
Backward slicing is not a solution either. Starting from line
4 and walking backward the code snippet, backward slicing
can identify e is directly copied from a and b, but c and f are
missing. Moreover, b should not be a redundant value, because
b is later assigned to a different value at line 5. To solve this
problem, we devise a new dynamic dataﬂow analysis algorithm
called dynamic duplicate value analysis to compute the clusters
at runtime. The basic algorithm is shown in Algorithm 1.
The basic idea of this algorithm is as follows. At memory
byte granularity, we treat each memory byte as a variable r
and a redundancy cluster Sr is associated with each variable
r. Based on each instruction’s semantics from the execution
traces, we perform data ﬂow analysis. More speciﬁcally,
•
Direct Assignment For each instruction i in the
execution trace, we check if i is an assignment op-
eration. In x86, assignment operations include mov,
push, pop, movs, movzx, movsx, etc. As a variable
represents a memory byte, we break an assignment
into one or more per-byte assignments, and for each
source and destination byte pair (u, v), we update the
duplicate sets accordingly (as shown in DoAssign).
Algorithm 1 Basic Algorithm for Dynamic Duplicate Value
Analysis
procedure DYNVALUEANALYSIS(Trace t)
for all instruction i 2 t do
if i.type is assignment operation then
for each src & dst byte pair(u, v) do
DoAssign(u, v)
end for
else
for each byte v in the dst operand do
DoRemove(v)
end for
end if
end for
end procedure
Sr   Sr  { v}
procedure DOASSIGN(u, v)
for all variable r 2 Sv do
end for
for all variable r 2 Su do
end for
Sv   Su
Sr   Sr + {v}
end procedure
procedure DOREMOVE(v)
for all variable r 2 Sv do
end for
Sr   Sr  { v}
end procedure
First of all, the destination v is no longer equivalent
to the other variables r in its old duplicate set Sv, and
thus v needs to be removed from Sr. Then, as now v
is equivalent to u, v also needs to be added into the
duplicate set Sr, where r 2 Su. Lastly, the duplicate
set of v will be updated to that of u. In general,
a membership change of a variable in its duplicate
set needs to spread around to maintain consistent
membership information. SSE and MMX instructions
may also serve as data transfer operations. We do not
consider these instructions because we found in our
experiments that these instructions rarely appear in the
kernel execution.
• Other Operations For the rest of the instructions,
while the duplicate sets for the source operands remain
the same, the duplicate set for the destination operand
needs to be reset. Therefore, for each byte v of the
destination operand, DoRemove notiﬁes all variables
in v’s duplicate set that v is no longer a duplicate
value to them.
Table I gives a step-by-step demonstration of how the
algorithm executes on the above code snippet.
Extension for String Conversions. However, the basic al-
gorithm only handles literal value equivalence. For strings,
the operating system kernel often makes conversions, such
as from ANSI to UNICODE or vice versa, or from upper
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I.
ALGORITHM EXECUTION ON THE SAMPLE CODE
Statement
1: a = b
2: c = a
3: d = b + c