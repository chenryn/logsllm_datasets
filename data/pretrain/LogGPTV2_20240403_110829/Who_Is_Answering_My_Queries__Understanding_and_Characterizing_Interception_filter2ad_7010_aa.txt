title:Who Is Answering My Queries: Understanding and Characterizing Interception
of the DNS Resolution Path
author:Baojun Liu and
Chaoyi Lu and
Hai-Xin Duan and
Ying Liu and
Zhou Li and
Shuang Hao and
Min Yang
Who Is Answering My Queries: Understanding 
and Characterizing Interception  
of the DNS Resolution Path
Baojun Liu, Chaoyi Lu, Haixin Duan, and Ying Liu, Tsinghua University;  
Zhou Li, IEEE member; Shuang Hao, University of Texas at Dallas; Min Yang, Fudan University
https://www.usenix.org/conference/usenixsecurity18/presentation/liu-baojun
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Who Is Answering My Queries: Understanding and Characterizing
Interception of the DNS Resolution Path
Baojun Liu∗∗, Chaoyi Lu∗, Haixin Duan∗, Ying Liu∗(cid:66), Zhou Li†, Shuang Hao‡ and Min Yang§
∗ Tsinghua University, † IEEE member,
‡ University of Texas at Dallas, § Fudan University
Abstract
DNS queries from end users are handled by recur-
sive DNS servers for scalability. For convenience, In-
ternet Service Providers (ISPs) assign recursive servers
for their clients automatically when the clients choose
the default network settings. But users should also have
the ﬂexibility to use their preferred recursive servers, like
public DNS servers. This kind of trust, however, can be
broken by the hidden interception of the DNS resolution
path (which we term as DNSIntercept). Speciﬁcally,
on-path devices could spoof the IP addresses of user-
speciﬁed DNS servers and intercept the DNS queries sur-
reptitiously, introducing privacy and security issues.
In this paper, we perform a large-scale analysis of on-
path DNS interception and shed light on its scope and
characteristics. We design novel approaches to detect
DNS interception and leverage 148,478 residential and
cellular IP addresses around the world for analysis. As
a result, we ﬁnd that 259 of the 3,047 ASes (8.5%) that
we inspect exhibit DNS interception behavior, including
large providers, such as China Mobile. Moreover, we
ﬁnd that the DNS servers of the ASes which intercept
requests may use outdated vulnerable software (depre-
cated before 2009) and lack security-related functional-
ity, such as handling DNSSEC requests. Our work high-
lights the issues around on-path DNS interception and
provides new insights for addressing such issues.
1
Introduction
Domain Name System (DNS) provides a critical service
for Internet applications by resolving human-readable
names to numerical IP addresses. Almost every In-
ternet connection requires a preceding address lookup.
DNS failures, therefore, will seriously impact users’ ex-
∗Part of this work was done during Baojun Liu’s research internship
at Netlab of 360. Part of this work was done in the Joint Research
Center by Tsinghua University and 360 Enterprise Security Group.
perience of using the Internet services. Previous stud-
ies have shown that rogue DNS resolvers [38, 42], DNS
transparent proxies [41, 55] and unauthorized DNS root
servers [27] can damage integrity and availability of In-
ternet communication.
In this work, we study an emerging issue around
DNS, the hidden interception of the DNS resolution
path (DNSIntercept) by on-path devices, which is not
yet thoroughly studied and well understood by previous
works. DNS queries from clients are handled by re-
cursive nameservers to improve performance and reduce
trafﬁc congestion across the Internet. By default conﬁg-
uration, users’ recursive nameservers are pointed to the
ones operated by ISPs. On the other hand, users should
have the ﬂexibility to choose their own DNS servers
or public recursive nameservers, such as Google Public
DNS 8.8.8.8 [12]. However, we ﬁnd on-path devices
intercept DNS queries sent to public DNS, and surrepti-
tiously respond with DNS answers resolved by alterna-
tive recursive nameservers instead. The on-path devices
spoof the IP addresses of the users’ speciﬁed recursive
nameservers in the DNS responses (e.g., replacing the re-
solver IP address with 8.8.8.8 of Google Public DNS),
so users will not be able to notice that the DNS resolution
path has been manipulated.
The purposes of DNS interception include displaying
advertisements (e.g., through manipulation of NXDOMAIN
responses [56]), collecting statistics, and blocking mal-
ware connections, to name a few. However, such prac-
tices can raise multiple concerns: (1) The interception is
not authorized by users and is difﬁcult to detect on the
users’ side, which leads to ethical concerns; (2) Users
have higher risks to put the resolution trust to alternative
recursive DNS servers, which often lack proper main-
tenance (e.g., equipped with outdated DNS software),
compared to well-known public DNS servers; (3) Cer-
tain security-related functionalities are affected or even
broken, e.g., some alternative DNS resolvers do not pro-
vide DNSSEC.
USENIX Association
27th USENIX Security Symposium    1113
In this paper, we conduct a large-scale analysis of
DNSIntercept. Our study investigates the magnitude of
this problem, characterizes various aspects of DNS inter-
ception, and examines the impact on end users. Finally,
we provide insights that could lead to mitigation.
Challenges. There are two main challenges that we
face to systematically analyze DNSIntercept. The ﬁrst
is to acquire clients belonging to different Autonomous
Systems (ASes) to perform a large-scale measurement,
which also should allow ﬁne-tuning on the measurement
parameters. The measurement frameworks proposed
by previous works, including advertising networks [33],
HTTP proxy networks [19, 36, 37, 52], and Internet scan-
ners [42, 48], cannot fulﬁll the conditions at the same
time. Another challenge is to verify whether the DNS
resolution is intercepted rather than reaching users’ des-
ignated recursive nameservers. Since on-path devices are
able to spoof the IP addresses in the DNS responses, it
is difﬁcult to sense the existence of DNS interception
merely from the clients.
Our approach. To address these challenges, we devise
a new measurement methodology and apply it to two
different large-scale experiments, named Global analy-
sis and China-wide analysis. For Global analysis, we
use a residential proxy network based on TCP SOCKS
(not HTTP) which provides 36,173 unique residential IP
addresses across 173 countries. This allows us to un-
derstand DNSIntercept from the world-wide point of
view. However, this proxy network only allows us to
send DNS packets over TCP SOCKS. To learn more com-
prehensive characteristics, we collaborate with a lead-
ing security company which provides network debugging
tool for millions of active mobile users. We obtain DNS
trafﬁc over both UDP and TCP from 112,305 IP addresses
(across 356 ASes), mainly within China.
Each client
To verify interception of DNS trafﬁc, we regis-
ter a set of domains (e.g., OurDomain.TLD), and use
the authoritative nameservers controlled by us to han-
dle resolutions.
is instructed to send
DNS packets to a list of public DNS servers and
query nonce subdomains under our domain names, e.g.,
UUID.Google.OurDomain.TLD (where we use Google
to indicate we send the DNS requests to Google Public
DNS). Note that we do not change DNS conﬁgurations of
clients, but send DNS requests directly to the public DNS
servers. Since each subdomain UUID is non-existent, the
resolution cannot be fulﬁlled by DNS cache at any level
and must go through the DNS server hierarchy. On the
authoritative nameserver operated by us, we record the
IP addresses that query the subdomain names we moni-
tor. By checking whether the IP address belongs to the
originally requested public DNS service, we can learn
whether the DNS resolution is intercepted by an alter-
native resolver. According to Alexa trafﬁc ranking [57],
we select three popular public DNS servers as the tar-
get of our study, including Google Public DNS [12],
OpenDNS [22], Dynamic DNS [9]. In addition, we build
a public DNS server by ourselves, named EDU DNS, and
use it for comparison.
Our ﬁndings. In this work, we develop the following
key ﬁndings.
• Among the 3,047 ASes that we investigate, DNS
queries in 259 ASes (8.5%) are found to be inter-
cepted, including large providers, such as China Mo-
bile. In addition, 27.9% DNS requests over UDP from
China to Google Public DNS are intercepted.
• Interception policies vary according to different types
of DNS trafﬁc. In particular, DNS queries over UDP
and those for A-type records sent to well-known pub-
lic DNS services are more likely to be intercepted.
• DNS servers used by interceptors may use outdated
software, e.g., all 97 DNS servers that we identify in-
stall old BIND software which should be deprecated
after 2009, and are vulnerable to attacks like DoS [6].
Moreover, 57% of the DNS servers do not accept
DNSSEC requests.
• DNSIntercept provides limited performance im-
provement to end users.
In fact, 15.37% of the
UDP DNS trafﬁc to public DNS services are even
faster than the counterpart issued by alternative DNS
servers.
Contributions. The contributions of our study are sum-
marized below.
We
• Understanding:
systematically measure
DNSIntercept, which spoofs the IP addresses
of users’ speciﬁed DNS servers to intercept DNS
trafﬁc surreptitiously.
• Methodology: We design novel approaches to con-
duct large-scale analysis to characterize DNS inter-
ception, through 148,478 residential and cellular IP
addresses around the world.
• Findings: Hidden interception behaviors are found to
exist in some famous ASes, including those belong-
ing to large providers like China Mobile. Our results
show that DNS servers used by interceptors typically
have less security maintenance and are vulnerable to
attacks, which can damage the integrity and availabil-
ity of DNS resolution for end users.
• Checking tool: We release an online checking tool at
http://whatismydnsresolver.com [25] to help
Internet users detect DNSIntercept.
1114    27th USENIX Security Symposium
USENIX Association
Figure 1: Domain resolution process with a recursive resolver
2 Threat Model and Mechanisms
In this section, we ﬁrst give an overview of how domain
names are translated into addresses using DNS. Then we
introduce our threat model of DNSIntercept, with a tax-
onomy of interception paths according to our observa-
tion. Finally, we discuss the potential interceptors and
their behaviors.
2.1 Domain Resolution Process
DNS is a hierarchical naming system organized to han-
dle domain resolutions at different levels. At the top of
the hierarchy is DNS root which manages Top-Level Do-
mains (TLD) resolutions. Second-Level Domains (SLD)
are delegated to resolvers below DNS root. Consisting
of labels from all domain levels, a fully qualiﬁed domain
name (FQDN) speciﬁes its exact location in the DNS
hierarchy, from its lowest level to root. As a example,
www.example.com is an FQDN, and its corresponding
TLD and SLD are com and example.com.
When a client requests resolution of a domain, the res-
olution is typically executed by a recursive DNS resolver
at ﬁrst, which can be either assigned by ISP or speciﬁed
by Internet users. Illustrated in Figure 1, the recursive
resolver iteratively contacts root, TLD and SLD name-
servers to resolve a domain name, and eventually returns
the answer to the client. Therefore, intercepting DNS
trafﬁc to a recursive resolver directly affects the domain
resolution process for users.
2.2 Threat Model
Figure 2 presents our threat model. We assume that
users’ DNS resolution requests are monitored by on-path
devices. These on-path devices are able to intercept and
selectively manipulate the route of DNS requests (e.g.,
by inspecting destinations and ports) which are sent to re-
cursive resolvers like public DNS servers originally. The
on-path devices either redirect or replicate the requests
to alternative resolvers (typically, local DNS resolvers),
which perform the standard resolution process. Finally,
before responses are sent from alternative resolvers back
to clients, the sources are replaced with addresses of the
Figure 2: Threat model
Figure 3: Four DNS resolution paths (request shown only)
original resolvers. Therefore, from a client’s perspective,
DNS responses appear to come from the original DNS
resolvers according to their source addresses, making the
actual interception behaviors difﬁcult to be discerned.
By default, in order to handle DNS requests, Internet
users are assigned with local DNS resolvers by ISPs. In
the mean time, users reserve the right to specify their
preferred recursive resolvers to launch DNS requests (in
particular, public DNS servers). However, our study
shows that, for users using designated DNS servers, not
only does DNSIntercept violate the will of users, but it
also can bring in security issues.
Scope of study. We aim to measure and characterize
DNSIntercept through large-scale data analysis. We
focus on how DNS resolution paths between clients and
well-known public DNS resolvers are tampered. Other
types of network trafﬁc manipulation mechanisms, such
as BGP preﬁx hijacking [51] and unauthorized manipu-
lation of DNS root servers [27], which have been system-
atically studied before, are not considered in our study.
Taxonomy of DNS resolution paths. In this study, we
classify the mechanisms of DNS resolution into four cat-
egories, based on how the resolution path is constructed
during the stage of the request. Except for Normal res-
olution, all the other three scenarios are regarded as
DNSIntercept. Figure 3 presents the paths of DNS re-
quests in the four DNS resolution mechanisms.
• Normal resolution. The resolution strictly follows the
standard process. A DNS query sent by client only
reaches the speciﬁed resolver, without being modiﬁed
by any on-path device. The speciﬁed resolver per-
forms the resolution by contacting authoritative name-
servers if the resolution is not cached.
• Request redirection. The original DNS query sent to
USENIX Association
27th USENIX Security Symposium    1115
user-speciﬁed resolver is dropped. In the meantime,
an alternative resolver is used to perform the resolu-
tion. The speciﬁed resolver is completely removed
from the resolution process.
• Request replication. The DNS query sent to user-
speciﬁed resolver is not modiﬁed or blocked. How-
ever, the request is replicated by on-path devices, and
handled by an alternative resolver at the same time.
Consequently, the authoritative nameserver receives
two identical requests from the user-speciﬁed resolver
(i.e., in-band request) and the alternative resolver (i.e.,
out-of-band request [46]). When multiple responses
are returned, typically the fastest one will be accepted
by the client.
• Direct responding. Similar to request redirection,
user’s DNS request is redirected by the on-path device
to an alternative resolver, without reaching the speci-
ﬁed resolver. However, even for domains that are not
cached, the alternative resolvers directly respond to
the user without contacting any other nameservers.
2.3 Potential Interceptors
Anecdotally, on-path devices are mainly deployed by
network operators like ISPs, in order to intercept DNS
trafﬁc [16]. However, the same kind of interception can
be conducted by other parties, which are described be-
low. We design our measurement methodology to mini-
mize the chances of triggering interception unwanted to
our study. Nevertheless, we acknowledge that other in-
terceptors cannot be completely removed, due to the lim-
itations of our methodology and vantage points.
• Censor and ﬁrewall. To block the access to certain
websites (e.g., political and pornographic websites),
censors and ﬁrewalls can manipulate DNS queries on
their path and return fake responses. As studied by
previous works [28], such DNS interception usually
happens when the domain name contains sensitive
keywords or matches a blacklist. We try to avoid trig-
gering this type of interception by embedding a nor-
mal domain name in the DNS request.
• Malware and anti-virus (AV) software. For purposes
like phishing, malware can change its host’s conﬁg-
uration of DNS resolver and reroute DNS trafﬁc to a
rogue resolver [38]. On the other hand, AV software
may intercept DNS queries as well, in order to prevent
DNS requests of their clients from being hijacked. For