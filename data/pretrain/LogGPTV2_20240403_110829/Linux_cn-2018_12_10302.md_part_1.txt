---
author: Seth Kenlon
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 1
  viewnum: 7166
date: '2018-12-02 10:12:46'
editorchoice: false
excerpt: 这里有所有你想知道的关于设置存储器而又不敢问的一切。
fromurl: https://opensource.com/article/18/11/partition-format-drive-linux
id: 10302
islctt: true
largepic: /data/attachment/album/201812/02/101229zxxr151pajxwzj45.jpg
permalink: /article-10302-1.html
pic: /data/attachment/album/201812/02/101229zxxr151pajxwzj45.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这里有所有你想知道的关于设置存储器而又不敢问的一切。
tags:
- 分区
- 文件系统
- 硬盘
thumb: false
title: 如何在 Linux 上对驱动器进行分区和格式化
titlepic: true
translator: Jamskr
updated: '2018-12-02 10:12:46'
---
> 
> 这里有所有你想知道的关于设置存储器而又不敢问的一切。
> 
> 
> 
![](/data/attachment/album/201812/02/101229zxxr151pajxwzj45.jpg)
在大多数的计算机系统上，Linux 或者是其它，当你插入一个 USB 设备时，你会注意到一个提示驱动器存在的警告。如果该驱动器已经按你想要的进行分区和格式化，你只需要你的计算机在文件管理器或桌面上的某个地方列出驱动器。这是一个简单的要求，而且通常计算机都能满足。
然而，有时候，驱动器并没有按你想要的方式进行格式化。对于这些，你必须知道如何查找准备连接到您计算机上的存储设备。
### 什么是块设备？
硬盘驱动器通常被称为“块设备”，因为硬盘驱动器以固定大小的块进行读写。这就可以区分硬盘驱动器和其它可能插入到您计算机的一些设备，如打印机、游戏手柄、麦克风，或相机。一个简单的方法用来列出连接到你 Linux 系统上的块设备就是使用 `lsblk` （list block devices）命令：
```
NAME                  MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda                    8:0    0 238.5G  0 disk  
├─sda1                 8:1    0     1G  0 part  /boot
└─sda2                 8:2    0 237.5G  0 part  
  └─luks-e2bb...e9f8 253:0    0 237.5G  0 crypt 
        ├─fedora-root    253:1    0    50G  0 lvm   /
        ├─fedora-swap    253:2    0   5.8G  0 lvm   [SWAP]
        └─fedora-home    253:3    0 181.7G  0 lvm   /home
sdb                   8:16    1  14.6G  0 disk  
└─sdb1                8:17    1  14.6G  0 part
```
最左列是设备标识符，每个都是以 `sd` 开头，并以一个字母结尾，字母从 `a` 开始。每个块设备上的分区分配一个数字，从 `1` 开始。例如，第一个设备上的第二个分区用 `sda2` 表示。如果你不确定到底是哪个分区，那也不要紧，只需接着往下读。
`lsblk` 命令是无损的，仅仅用于检测，所以你可以放心的使用而不用担心破坏你驱动器上的数据。
### 使用 dmesg 进行测试
如果你有疑问，你可以通过在 `dmesg` 命令的最后几行查看驱动器的卷标，这个命令显示了操作系统最近的日志（比如说插入或移除一个驱动器）。一句话，如果你想确认你插入的设备是不是 `/dev/sdc` ，那么，把设备插到你的计算机上，然后运行这个 `dmesg` 命令：
```
$ sudo dmesg | tail
```
显示中列出的最新的驱动器就是你刚刚插入的那个。如果你拔掉它，并再运行这个命令一次，你可以看到，这个设备已经被移除。如果你再插上它再运行命令，这个设备又会出现在那里。换句话说，你可以监控内核对驱动器的识别。
### 理解文件系统
如果你只需要设备卷标，那么你的工作就完成了。但是如果你的目的是想创建一个可用的驱动器，那你还必须给这个驱动器做一个文件系统。
如果你还不知道什么是文件系统，那么通过了解当没有文件系统时会发生什么可能会更容易理解这个概念。如果你有多余的设备驱动器，并且上面没有什么重要的数据资料，你可以跟着做一下下面的这个实验。否则，请不要尝试，因为根据其设计目的，这个肯定会删除您的资料。
当一个驱动器没有文件系统时也是可以使用的。一旦你已经肯定，正确识别了一个驱动器，并且已经确定上面没有任何重要的资料，那就可以把它插到你的计算机上 —— 但是不要挂载它，如果它被自动挂载上了，那就请手动卸载掉它。
```
$ su -
# umount /dev/sdx{,1}
```
为了防止灾难性的复制 —— 粘贴错误，下面的例子将使用不太可能出现的 `sdx` 来作为驱动器的卷标。
现在，这个驱动器已经被卸载了，尝试使用下面的命令：
```
# echo 'hello world' > /dev/sdx
```
你已经可以将数据写入到块设备中，而无需将其挂载到你的操作系统上，也不需要一个文件系统。
再把刚写入的数据取出来，你可以看到驱动器上的原始数据：
```
# head -n 1 /dev/sdx
hello world
```
这看起来工作得很好，但是想象一下如果 “hello world” 这个短语是一个文件，如果你想要用这种方法写入一个新的文件，则必须：
1. 知道第 1 行已经存在一个文件了
2. 知道已经存在的文件只占用了 1 行
3. 创建一种新的方法来在后面添加数据，或者在写第 2 行的时候重写第 1 行
例如：
```
# echo 'hello world
> this is a second file' >> /dev/sdx
```
获取第 1 个文件，没有任何改变。
```
# head -n 1 /dev/sdx
hello world