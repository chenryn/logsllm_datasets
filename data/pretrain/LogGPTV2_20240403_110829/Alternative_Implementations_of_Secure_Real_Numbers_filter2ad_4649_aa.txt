title:Alternative Implementations of Secure Real Numbers
author:Vassil Dimitrov and
Liisi Kerik and
Toomas Krips and
Jaak Randmets and
Jan Willemson
Alternative Implementations of Secure Real Numbers
Vassil Dimitrov
Liisi Kerik
Toomas Krips
Jaak Randmets
Jan Willemson
August 11, 2016
Abstract
This paper extends the choice available for secure real number implementations with two new con-
tributions. We will consider the numbers represented in form a − ϕb where ϕ is the golden ratio, and
in form (−1)s · 2e where e is a ﬁxed-point number. We develop basic arithmetic operations together
with some frequently used elementary functions. All the operations are implemented and benchmarked
on Sharemind secure multi-party computation framework. It turns out that the new proposals provide
viable alternatives to standard ﬂoating- and ﬁxed-point implementations from the performance/error
viewpoint in various settings. However, the optimal choice still depends on the exact requirements of the
numerical algorithm to be implemented.
1 Introduction
It is estimated that currently human knowledge doubles approximately every year [21]. It means that data
analysis facilities should keep up with this pace. However, it is not conceivable that all the organisations
depending on big data analysis would upgrade their server farms every year.
Consequently, the only way to manage this growth is to rely on computation as a service, and this is the
core reason behind the success of cloud computing business idea.
On the other hand, outsourcing computations has other restrictions with data privacy being on top of
the list. Privacy-preserving data analysis is the holy grail of cloud computing, but unfortunately it is easier
said than done.
There are several paradigms proposed enabling to oﬄoad some of the computations to another party in
a way that some privacy guarantees could be given.
Historically, the ﬁrst framework was the garbled circuits (GC) approach originally proposed by Yao in
1982 [3, 18, 23]. At its core, GC provides secure function evaluation capability for two mutually distrusting
parties, one acting as a garbler and another as evaluator.
Soon, secure multi-party computation protocols were developed in a series of seminal papers [4, 9, 12].
These protocols can be implemented on top of several basic technologies, with secret sharing being one of
the most often used ones [5, 22].
The most recent breakthrough in secure computation outsourcing was achieved by Gentry who proposed
the ﬁrst solution to achieve fully homomorphic encryption in 2009 [11].
All of these approaches have their strengths and weaknesses, but their common characteristic is that they
introduce a remarkable performance penalty to achieve privacy-preserving features.
Archer et al. have compared the main secure computation implementations of AES-128 block cipher [2]
and conclude that the fastest alternative is secure multi-party computing based on linear secret sharing.
However, an eﬃcient secure computation framework is only the ﬁrst step, providing basic elementary
operations like bit manipulation or integer addition and multiplication. Statistical data analysis methods
require higher level protocols like division and roots. To implement those, data types richer than bits and
(modular) integers are required.
This paper presents a contribution on secure data types, more precisely, secure real number implemen-
tations.
1
The paper is organised as follows. First, we will review the state of the art in secure real number
implementations in Section 2 and list the required preliminaries in Section 3. Then, Sections 4 and 5
describe two new proposed approaches based on golden section and logarithmic representations. Performance
benchmarks and error analysis are presented in Section 6 and some conclusions are drawn in Section 7.
2 State of the art
The ﬁrst attempt to extend modular integer domains provided by basic secure computation frameworks was
made by Catrina et al. They implemented ﬁxed-point arithmetic and applied it to linear programming [6–8].
In 2011, Franz and Katzenbeisser [10] proposed a solution to implementation of ﬂoating-point arithmetic
for secure signal processing. Their approach relies on two-party computations working over garbled circuits,
and they have not provided any actual implementation or benchmarking results.
In 2013, Aliasgari et al. designed and evaluated ﬂoating-point computation techniques and protocols for
square root, logarithm and exponentiation in a standard linear secret sharing framework [1].
This approach was extended in 2015 by Kamm and Willemson who implemented and optimised a number
of numeric primitives, building a complete solution for privacy-preserving satellite collision analysis [13].
In order to provide further improvements, Krips and Willemson [15, 16], and Kerik et al. [14] have
proposed and implemented several tricks that increase the eﬃciency of speciﬁc elementary functions used
under various restrictions.
The standardised IEEE 754 format is not well suited for secure computations on oblivious values. For
example, it has an exceptional not-a-number value and it assumes explicit bit access that is ineﬃcient to
implement on top of modular integer arithmetic. Thus, all of the aforementioned implementations use a
custom format, ignoring some of the details of IEEE 754 standard. The ﬁrst full standard-compliant imple-
mentation was achieved by Pullonen and Siim who used a hybrid of garbled circuits and secret sharing [20].
However, the overhead required to support the whole standard is too high for larger data volumes.
3 Preliminaries
Our protocols will make use of both public and private (protected) values. To express that x is private,
we will denote it by (cid:74)x(cid:75). Concrete instantiation of the value protection mechanism may vary between
implementations. In principle, any secure computation framework (say, garbled circuits, fully homomorphic
encryption or secret-sharing based multi-party computation) may be used.
However, we will make some assumptions about the underlying framework. We will assume that the
framework provides access to modular integer arithmetic. In addition to integers, we use several kinds of
ﬁxed-point numbers.
Two’s complement and biased ﬁxed-point numbers will be represented and hence also notated as integers.
Fixed-point numbers that use a sign bit instead of two’s complement or biased representation will be denoted
as tuples (s, a). A tuple (s, a) that is a signed ﬁxed-point number with radix-point m signiﬁes the value
(−1)s · a · 2−m.
We will also assume access to the following operations.
• Addition of two private values(cid:74)x(cid:75) and(cid:74)y(cid:75) denoted as(cid:74)x(cid:75)+(cid:74)y(cid:75). If the underlying protection framework
is linear, this is equal to(cid:74)x + y(cid:75).
• Multiplication of a private value(cid:74)x(cid:75) by a public scalar c denoted as c·(cid:74)x(cid:75). If the underlying protection
framework is linear, this is equal to(cid:74)c · x(cid:75).
• Multiplication of two private values(cid:74)x(cid:75) and(cid:74)y(cid:75) denoted as(cid:74)x(cid:75)·(cid:74)y(cid:75). If the underlying framework is not
fully homomorphic, evaluating this primitive generally requires communication between the computing
parties.
2
rounded down, so sometimes in the protocol we will use syntactic sugar like x/2k to denote x (cid:29) k.
consist of several integer values.
a type consisting of several integer values.
bit of x with y.
the bit representation of x. Note that when we use linear integer protection mechanism (like secret
sharing) this operation is rather expensive.
i=0 ) (Most Signiﬁcant Non-Zero Bit) takes a vector of protected bits and outputs a similar
vector, where only the highest 1-bit (i.e. the 1-bit with the largest index value) has remained and all
the other bits are set to 0. If all the input bits are 0, they will also remain so in the output.
• ObliviousChoice((cid:74)b(cid:75),(cid:74)x(cid:75),(cid:74)y(cid:75)): if the bit b = 1 then this function outputs (cid:74)x(cid:75), otherwise it outputs
(cid:74)y(cid:75). Note that while usually x and y are integers, they might also refer to more complicated types that
• Swap((cid:74)c(cid:75),(cid:74)x(cid:75),(cid:74)y(cid:75)) outputting ((cid:74)x(cid:75),(cid:74)y(cid:75)) if c = 0 and ((cid:74)y(cid:75),(cid:74)x(cid:75)) if c = 1. Here also x and y can refer to
• ConjBit({(cid:74)xi(cid:75)}n
i=0,(cid:74)y(cid:75)) takes an array of bits x and a single bit y and ﬁnds the conjunction of every
• PublicBitShiftRightProtocol((cid:74)x(cid:75), k). This function Takes a protected value(cid:74)x(cid:75) and a public integer
k, and outputs(cid:74)x (cid:29) k(cid:75) where x (cid:29) k is equal to x shifted right by k bits. x (cid:29) k is also equal to x/2k
• BitExtract((cid:74)x(cid:75)) takes a protected value(cid:74)x(cid:75) and outputs a vector of protected bits corresponding to
• MSNZB({(cid:74)bi(cid:75)}n−1
• Polynomial evaluation protocol cPoly(p,(cid:74)x(cid:75)) evaluates a public polynomial p = {pi}l
i=0 on (cid:74)x(cid:75). We
consider that the inputs are ﬁxed-point numbers and that both(cid:74)x(cid:75) and the output have 0 bits before
• Vectorised ﬁxed-point polynomial evaluation protocol cPolyArr(p,(cid:74)x(cid:75)) takes an array of polynomials
i=0 and an argument (cid:74)x(cid:75) and evaluates all the polynomials on (cid:74)x(cid:75). This protocol is
j=0}k
i=0,(cid:74)n(cid:75)) takes a shared array {(cid:74)xi(cid:75)}l
• Pick({(cid:74)xi(cid:75)}l
• Truncate((cid:74)x(cid:75), n) takes an integer(cid:74)x(cid:75) and casts it down to n bits by discarding the highest bits. We
presume that the length of(cid:74)x(cid:75) is no less than n bits. If the underlying protection framework is linear
• ConvertUp((cid:74)x(cid:75), k, l) takes in a shared k-bit two’s complement integer (cid:74)x(cid:75) and returns a shared l-bit
• FixSubtract(((cid:74)s0(cid:75),(cid:74)a0(cid:75)), ((cid:74)s1(cid:75),(cid:74)a1(cid:75))) takes two signed ﬁxed-point numbers ((cid:74)s0(cid:75),(cid:74)a0(cid:75)) and ((cid:74)s1(cid:75),(cid:74)a1(cid:75))
p = {{pi,j}l
similar to cPoly but more eﬃcient than evaluating each polynomial independently.
radix point. Therefore, both the range and the domain are [0, 1). Implementation details can be found
in [14].
i=0 and a shared index(cid:74)n(cid:75) and returns(cid:74)xn(cid:75).
• Standard comparison operators >, ≥, etc. The inputs of these operators will be protected integer values
and outputs will be protected bits containing the values of the corresponding predicate evaluations.
• Standard Boolean operations (conjunction, disjunction, xor) on one-bit protected values with the
output being a protected bit again.
then truncating a shared integer is achieved by truncating all the shares.
two’s complement integer that has the same value. We presume that k < l.
and returns their diﬀerence as a signed ﬁxed-point number.
For benchmarking, we will implement our algorithms on Sharemind1 multi-party computation engine
that relies on linear secret sharing and provides all the primitive operations listed above.
It was recently shown by Pettai and Laud that, when properly composed, Sharemind protocols provide
privacy against active adversaries [19]. They also produced a software toolkit allowing for the respective
analysis to run on the Sharemind protocols implemented in the domain speciﬁc language developed by
Randmets and Laud [17]. All the protocols described in this paper have been formally veriﬁed using this
toolkit.
1https://sharemind.cyber.ee/
3
4 Golden section numbers
We use a tuple of secret signed two’s complement integers ((cid:74)a(cid:75),(cid:74)b(cid:75)) to denote the positive real number
We shall now describe a real number type that can depict signed real numbers, has free addition, and is
reasonably eﬃcient for other operations.
a− ϕb. We call these numbers golden section numbers or golden numbers. We may refer to these numbers as
either a − ϕb or (a, b). For a given real number x, we denote its (approximate) golden representation as gx.
For a golden section number a − ϕb, we refer to a as its integer representand and to b as its ϕ-representand.
Note that we will be using a and b throughout this section to refer to the integer representand and the
ϕ-representand of the number being considered, respectively.
We will now see how addition and multiplication work on golden section numbers. Addition is quite
straightforward:
a − ϕb + c − ϕd = (a + c) − ϕ(b + d).
For multiplication, we note that ϕ2 = ϕ + 1 and thus obtain
(a − ϕb) · (c − ϕd) = (ac + bd) − ϕ(bc + ad − bd) .
(1)
Golden numbers are not monotone with respect to representands. Hence, ﬁnding a good approximation
for a given number is a non-trivial problem on its own.
Deﬁnition 1. Given a real number x, we say that the tuple of integers (a, b) is a (k, ε)-approximation of x
if |a| ,|b| ≤ 2k and |a − ϕb − x|≤ ε. If k is implied by the context or not important in the context, we shall
refer to (a, b) as just an ε-representation of x. If ε is implied or not important, we shall refer to (a, b) as a
(k,·)-representation of x.
If neither are important (or are implied) we refer to (a, b) as just as a representation of x.
It is preferable to use such a (k, ε)-approximation of a number where both k and ε are relatively small.
While it is clear that a small ε implies a small error and is thus better, the reason why a small k is good is
a bit more diﬃcult.
Namely, we observe that when we multiply two golden section numbers x and y with (k,·)-approximation,
then their product has a (2k + 1,·)-approximation. We will later see how we can replace a golden section
number x with a (k, )-representation of it.
We shall assume throughout the section that the error ε is quite a small number, several orders of
magnitude smaller than 1. Thus, when we discuss how either the number or the representands need to be
bounded by some quite large numbers, we shall ignore ε in those analyses as rounding down used in ﬁnding
those large numbers will cover any overﬂow ε might cause.
Golden numbers are also relatively dense in real numbers.
Lemma 1. For a real number x which satisﬁes |x| < ϕs+1, and a positive integer k, there exists a (ϕs+1 +
ϕk+1, ϕ−k)-approximation of x.
can write x =(cid:80)s
We also note that given such a requirement,(cid:80)s(cid:48)
Thus, if we choose to represent x as x =(cid:80)s
|x −(cid:80)s
i=s(cid:48) aiϕi|≤ ϕs(cid:48)
hold.
proven:
• ϕk = Fkϕ + Fk−1 for every k,
• Fk ≈ ϕk for every positive k, and
4
Proof. We note that we can write every positive real number as a (possibly inﬁnite) sum of powers of ϕ. We
i=−∞ aiϕi where ai ∈ {0, 1} and where there is no i so that ai = 1 and ai+1 = 1 would both
, that is,
The following three facts about Fibonacci numbers Fk (k ∈ Z) are common knowledge and are easily
i=s(cid:48) aiϕi, the error we make is no greater than ϕs(cid:48)
.
i=−∞ aiϕi < ϕs(cid:48)+1 holds for any s(cid:48).
• (cid:80)k
i=0 Fk = Fk+1 − 1 for every positive k.
From these facts it follows that
s(cid:88)
i =s(cid:48)
aiϕi =
s(cid:88)
s(cid:48)(cid:88)
ai(Fiϕ + Fi−1) ≤ s(cid:88)
|Fi|ϕ + |Fi−1|=
s(cid:88)
i=1
i=s(cid:48)
|Fi|ϕ + |Fi−1|+
i=s(cid:48)
|Fi|ϕ + |Fi−1|=
i=0
(Fs(cid:48)+1 − 1)ϕ + (Fs(cid:48)) + (Fs+1 − 2)ϕ + Fs − 1
= (Fs(cid:48)+1 + Fs+1 − 3)ϕ + Fs + Fs(cid:48) − 1.
We see that taking k = −s(cid:48) gives us the result.