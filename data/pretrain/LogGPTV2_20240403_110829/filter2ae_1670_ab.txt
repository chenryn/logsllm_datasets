    ins 28: code(95) jmp | exit | imm, dst_reg 0, src_reg 0, off 0, imm 0
    ins 29: code(79) ldx | BPF_MEM | u64, dst_reg 8, src_reg 0, off 0, imm 0
    ins 30: code(bf) alu64 | = | src_reg, dst_reg 2, src_reg 0, off 0, imm 0
    ins 31: code(b7) alu64 | = | imm, dst_reg 0, src_reg 0, off 0, imm 0
    ins 32: code(55) jmp | != | imm, dst_reg 6, src_reg 0, off 3, imm 0
    ins 33: code(79) ldx | BPF_MEM | u64, dst_reg 3, src_reg 7, off 0, imm 0
    ins 34: code(7b) stx | BPF_MEM | u64, dst_reg 2, src_reg 3, off 0, imm 0
    ins 35: code(95) jmp | exit | imm, dst_reg 0, src_reg 0, off 0, imm 0
    ins 36: code(55) jmp | != | imm, dst_reg 6, src_reg 0, off 2, imm 1
    ins 37: code(7b) stx | BPF_MEM | u64, dst_reg 2, src_reg a, off 0, imm 0
    ins 38: code(95) jmp | exit | imm, dst_reg 0, src_reg 0, off 0, imm 0
    ins 39: code(7b) stx | BPF_MEM | u64, dst_reg 7, src_reg 8, off 0, imm 0
    ins 40: code(95) jmp | exit | imm, dst_reg 0, src_reg 0, off 0, imm 0
    parsed 41 ins, total 41
稍微解释下，ins 0 和 ins 1 一起完成了绕过eBPF verifier机制。ins 0指令后，`regs[9] =
0xffffffff`，但在verifier中，`regs[9].imm = -1`，当执行ins 1时，jmp指令判断`regs[9] ==
0xffffffff`，注意regs[9]是64bit integer，因为sign extension，`regs[9] ==
0xffffffff`结果为false，eBPF跳过2(off)条指令，继续往下执行；而在verifier中，jmp指令的`regs[9].imm ==
insn->imm`结果为true，程序走另一个分支，会执行ins 3 jmp|exit指令，导致verifier认为程序已结束，不会去检查其余的dead
code。
这样因为eBPF的检测逻辑和运行时逻辑不一致，我们就绕过了verifier。后续的指令就是配合用户态exp完成对kernel内存的读写。
这里还需要知道下eBPF的map机制，eBPF为了用户态更高效的与内核态交互，设计了一套map机制，用户态程序和eBPF程序都可以对map区域的内存进行读写，交换数据。利用代码中，就是利用map机制，完成用户态程序与eBPF程序的交互。
`ins4-ins5: regs[9] = struct bpf_map
*map`，得到用户态程序申请的map的地址，注意这2条指令，笔者的静态解析并不准确，获取map指针的指令，在eBPF
verifier中，会对指令内容进行修改，替换map指针的值。
    ins6-ins12: 调用bpf_map_lookup_elem(map, &key)，返回值为regs[0] = &map->value[0]
    ins13: regs[6] = *regs[0]， regs[6]得到map中key=0的value值
    ins14-ins20: 继续调用bpf_map_lookup_elem(map, &key)，regs[0] = &map->value[1]
    ins21: regs[7] = *regs[0]，regs[7]得到map中key=1的value值
    ins22-ins28: 继续调用bpf_map_lookup_elem(map, &key)，regs[0] = &map->value[2]
    ins29: regs[8] = *regs[0]，regs[8]得到map中key=2的value值
    ins30: regs[2] = regs[0]
    ins32: if(regs[6] != 0) jmp ins32 + 3，根据用户态传入的key值不同，做不同的操作
    ins33: regs[3] = *regs[7]，读取regs[7]中地址的内容，用户态的read原语，就在这里完成，regs[7]中的地址为用户态传入的任意内核地址
    ins34: *regs[2] = regs[3]，把上调指令读取的值返回给用户态
    ins36: if(regs[6] != 1) jmp ins36 + 2
    ins37: *regs[2] = regs[FP], 读取eBPF的运行时栈指针，返回给用户态，注意这个eBPF的栈指针实际上指向bpf_prog_run函数中的一个局部uint64数组，在内核栈上，从这个值可以得到内核栈的基址，这段指令对应用户态的get_fp
    ins39: *regs[7] = regs[8]，向regs[7]中的地址写入regs[8]，对应用户态的write原语，regs[7]中的地址为用户态传入的任意内核地址
理解了这段eBPF程序，再看用户态exp就很容易理解了。需要注意的是，eBPF指令中的3个关键点：泄漏FP，读任意kernel地址，写任意kernel地址，在verifier中都是有检查的，但因为开始的2条指令完全绕过了verifier，导致后续的指令长驱直入。
笔者在Ubuntu 14.04上提权成功：
这种攻击方式和传统的内存破坏型漏洞不同，不需要做复杂的内存布局，只需要修改用户态传入的数据，就可以达到控制程序指令流的目的，利用的是原有程序的正常功能，会完全绕过现有的各种内存防御机制(SMEP/SMAP等)，有一种四两拨千斤的效果。这也是这两年流行的Data-Oriented Attacks，在linux kernel中似乎并不多见。
#### 0x04 漏洞影响范围&修复
因为linux
kernel的内核版本众多，对于安全漏洞的影响范围往往并不容易确认，最准确的方式是搞清楚漏洞根因后，从代码层面判断，但这也带来了高成本的问题，快速应急时，我们往往需要尽快确认漏洞影响范围。
从前面的漏洞原理来看，笔者大致给一个全面的linux kernel受影响版本：
3.18-4.4所有版本(包括longterm 3.18，4.1，4.4)；
 /etc/apt/sources.list && apt update &&
apt install linux-image-4.4.0-117-generic
Ubuntu的非正式内核版本，做了哪些修复，我们可以看下补丁的关键内容(注意这是Ubuntu的kernel版本，非upstream)：
git diff Ubuntu-lts-4.4.0-116.140_14.04.1 Ubuntu-lts-4.4.0-117.141_14.04.1
ALU指令区分了32bit和64bit立即数，同时regs[].imm改为了64bit integer
还增加了一项有意思的检查，把所有的dead_code替换为nop指令，这个明显是针对exp来的，有点类似于exp的mitigation，upstream
kernel可能并不一定喜欢这样的修复风格：）
关于这个漏洞，Ubuntu还有一些相关的修复代码，感兴趣的读者，可以自行发掘。
我们再看下upstream kernel 4.4.123的修复，相比之下，要简洁的多，仅有3行代码改动[12]： 当处理32bit
ALU指令时，如果imm为负数，直接忽略，认为是UNKNOWN_VALUE，这样也就避免了前面提到的verifer和运行时语义不一致的问题。
另外Android kernel上，bpf sycall是没有启用的，所以不受该漏洞影响。
#### 0x05 引发的思考
我们回顾以下整个漏洞分析过程，有几点值得注意和思考：
  1. eBPF作为内核提供的一种强大机制，因为其复杂的过滤机制，稍有不慎，将会引入致命的安全问题，笔者推测后续eBPF可能还会有类似安全漏洞。
  2. 受限于linux kernel的开发模式及众多版本，安全漏洞的确认和修复可能存在被忽视的情况，出现N day变0 day的场景。
  3. Vitaly Nikolenko公布漏洞exp后，有网友就提出了批评，在厂商发布正式补丁前，不应该公布细节。我们暂且不讨论Vitaly Nikolenko的动机，作为一名安全从业者，负责任的披露漏洞是基本守则。
  4. 笔者所在公司使用的OS是经过专门的团队量身定制，进行了不少的安全加固和冗余组件裁剪，故不受到此次漏洞影响。可见维护一个安全可靠的OS不失为保障大型企业的安全方案之一。
感谢阅读，行文匆忙，如有不正之处，敬请指出。
#### 0x06 参考文档
[1]   
[2]   
[3]   
[4]   
[5]   
[6]   
[7] [https://bugs.chromium.org/p/project-zero/issues/detail?id=1454&desc=3](https://bugs.chromium.org/p/project-zero/issues/detail?id=1454&desc=3)  
[8]   
[9]   
[10]   
[11]   
[12]   
[13]   
[14] 
* * *