200 million traceroutes between Ono users between March
1, 2010 and June 1, 2010. These measurements provide end-
to-end latency measurements between end-users, as well as
hop-by-hop delays to intermediate routers.
Estimating the delay through an Aqua deployment re-
quires a set of mix locations and the latencies between
them. We further leverage the traceroute dataset by as-
suming mixes will be placed in networks that are traversed
by a large fraction of paths between end users. Speciﬁcally,
we count the number of distinct source/destination pairs
that traverse each AS boundary (using IP-to-AS transla-
tion), then use the 100 most popular networks as mix lo-
cations. We obtain the latency between a client and mix
using the traceroute-based delay measured when the client
probed the mix location. Because most pairs of mix lo-
cations are traversed by at least one end-to-end traceroute
measurement, we obtain a nearly complete matrix of delays
between our selected mix locations. Our simulation does
not use paths for which our dataset does not contain a delay
meaurement.
To avoid being biased by paths through large tier-1 net-
works, we pick at most two mix locations per AS. The re-
sulting set of locations spans 70 ASNs and 25 countries in
North America, Europe, Asia and South Africa.
For each set of latencies measured directly between end-
points (i.e., the last hop of a traceroute), we require there
be at least three sample values and take the median latency.
We further ﬁlter out latencies that are unreasonably large
(>1000 ms), as they are indicative of severe buﬀer bloat or
other transient performance problems that we do not intend
to capture with this analysis. Speciﬁcally, we wish to cap-
ture the additional delay from mix hops that are located in
the core of the network and not subject to last-mile delays.
Results. We obtained simulation results for latencies ac-
cording to the following models:
• Aqua. There are two concatenated mix circuits, mean-
ing 6 mix hops in each direction (12 hops total). Each
mix is located in a well-connected network as described
above, endpoints are located in access networks, and
we show results for a batch period of 10 ms.
• Circuit-switched (Onion). There are two concate-
nated onion circuits, resulting in six distinct hops be-
tween endpoints, traversed once in each direction (12
hops total). Each onion hop is located in a PoP, the
endpoints are located in access networks.
• P2P (Tarzan). There are six onion hops, each of
which is located in an access network.
We sample 100,000 pairs of hosts, simulate latency over
1000 randomly selected paths, then report results for the
median latencies2. Figure 6 shows CDFs, where each point
(x, y) represents the latency value (x) for a single source-
destination pair (cumulative fraction, y). There is one curve
for the direct path between a source and destination (la-
beled “direct”), and one curve each for the median laten-
cies in Aqua, onion routing and P2P routing (labeled as
“[Aqua,Onion routing,P2P]”).
While it is not surprising that there are higher delays
in Aqua from six additional overlay hops in each direction
compared to direct-path routing, the median latencies stay
within a constant factor of the direct-path delays. For ex-
ample, the median delay for Aqua latency is approximately
ﬁve times the median delay for direct path latency when us-
ing a delay of 10 ms at each hop. Note that when compared
to onion routing, Aqua imposes only an additional 120 ms
of delay due to buﬀering for chaﬃng at mixes. Thus, Aqua
oﬀers resilience to timing attacks, at the cost of a modest
additional delay (12%) over Tor.
We observe that P2P routing has nearly 20% larger the
median latency when compared to Aqua with 10 ms delays
at each hop. The reason is the latency of traversing last-
mile links at each hop in P2P routing, when compared to
latencies between mixes in Aqua located in the network core.
In the worst case, both Aqua and onion routing may suf-
fer latencies of one or two seconds. Focusing at the top
of Fig. 6, Aqua’s latency is a full second faster than P2P
routing. While both approaches suﬀer large delays in the
worst case, the impact on end-to-end performance diﬀers.
For onion routing, which is circuit-based, a poor circuit
choice lasts until the circuit is torn down—potentially af-
fecting many ﬂows.
Importantly, Aqua picks paths on a
per-packet basis, limiting the impact of such poor choices.
Impact of Latency. We now consider the impact of addi-
tional delays on the maximum rate for a TCP ﬂow over
a path and evaluate whether it impacts end-to-end perfor-
mance for an application like BitTorrent. We use the tradi-
tional formula
Rate = (1.2 ∗ M SS)/(RT T ∗
√loss)
and estimate the steady-state transfer rate for a ﬂow experi-
encing 1% packet loss, using a maximum segment size (MSS)
of 536 bytes and the RTT of the 90th percentile of the dis-
tribution in Fig. 6. We then compare this steady-state rate
with the distribution of maximum transfer rates for peers
in our dataset (these are considered the peer capacity). For
each of the routing models considered in the previous sec-
tion, we estimate the end-to-end rate as the minimum of the
per-hop TCP connection in the multi hop overlay. Further,
we focus on upload rates because asymmetric bandwidth in
access networks implies that senders’ transfer rates are the
main bottleneck in BitTorrent. Last, we assume there are
10 simultaneous ﬂows for each user, based on the average
number of parallel ﬂows per peer in our dataset (9.6).
We ﬁnd that the steady-state transfer rates for Aqua,
Onion and P2P routing are at least 10, 12.3 and 6.1 KB/s, re-
spectively, for 90% of peers. By comparison, 90% of ﬂows in
our BitTorrent traces have a send rate less than 13.4 KB/s.
We then compare these per-ﬂow rates with empirically mea-
sured peer capacities. When there are 10 parallel ﬂows, we
2We found the average and median distributions to be nearly
identical and thus omit the average for clarity in the ﬁgures.
ﬁnd that only 14.6% of paths experience throttling in the up-
load direction for Aqua (10% for Onion and 27% for P2P).
Thus, we believe that the delays incurred by overlay rout-
ing should not signiﬁcantly reduce available capacity in the
system for the vast majority of peers and paths.
4.5 Caveats
Simulation limitations. Our simulation approach cap-
tures realistic session times, throughput capacities and con-
nection patterns for BitTorrent. However, our simulation
does not account for the following factors.
First, our trace data contains transfer rates along direct
paths between hosts, but the anonymous communication de-
signs induce additional latency from multiple hops. We do
not model these delays in our simulation but we showed that
they do not signiﬁcantly impact the steady-state transfer
rates of existing direct-path ﬂows.
Next, we do not simulate delays or bandwidth constraints
at mixes, except for those required for batching. We believe
this is reasonable because we expect mixes to be deployed in
hosted data centers where bandwidth and processing power
are suﬃcient to support large numbers of users.
Lastly, throttling and kset formation alter the empirical
transfer rates and session durations recorded in the trace.
This, in turn, would change how BitTorrent establishes fu-
ture connections in a real implementation. We do not model
these second-order eﬀects.
Dataset limitations. There are several limitations of the
Ono dataset. We use an extensive dataset of empirical la-
tency and ﬂow samples from end users that is representative
of paths between users in a P2P network. This does not
necessarily reﬂect the paths between end-users and content
providers such as CDNs and Web servers. Likewise, we do
not consider the performance impact of load at each mix,
though we expect the mix locations to be well provisioned.
Finally, there is bias in our empirical dataset in that it rep-
resents locations where BitTorrent usage is high. We believe
this is also where Aqua is most likely to be popular if it were
deployed today.
4.6 Preliminary implementation results
At the time of this writing, we have implemented Aqua’s
multipath routing component in Tor v0.2.2.37, which adds
approximately 3,000 lines of C code. The implementation
of traﬃc obfuscation as described in Section 3 is still in
progress. To quantify the CPU and memory usage of mul-
tipath routing, we performed a simple experiment that con-
sists of a client downloading a 100MB ﬁle from an Apache
server in a well provisioned network with nine Aqua pro-
totype mixes. The client’s download rate (averaged over
5 runs) is 9.12Mb/s for a direct connection, 7.52Mb/s with
single-path Tor, and 7.68Mb/s with the Aqua prototype. On
average, Tor proxies use 2% of CPU and 45MB or memory
and the Aqua prototype mixes use 2.1% of CPU and 46MB
of memory. As we can see, the Aqua prototype with multi-
path routing introduces negligible overhead relative to Tor.
5. CONCLUSION
We have introduced Aqua, an eﬃcient traﬃc-analysis
resistant anonymity network for BitTorrent applications.
Aqua derives its eﬃciency from using diﬀerent traﬃc
obfuscation mechanisms in the core and at the edges of the
network. In the core, Aqua employs uniform rate chaﬃng
to take advantage of infrequent changes in aggregate traﬃc.
Furthermore, multipath routing disperses traﬃc hot spots
in the core to minimize chaﬀ overhead. At the edges,
Aqua dynamically groups peers with correlated payload
traﬃc patterns and couples their rate changes to eﬃciently
provide k-anonymity. We showed that these mechanisms
scale to much larger anonymity sets than existing work
while achieving latency low enough to have minimal impact
on TCP bulk performance in BitTorrent workloads. These
properties allow Aqua to anonymize BitTorrent traﬃc with
high bandwidth eﬃciency. Our future work aims at provid-
ing strong anonymity to a broader range of applications.
Acknowledgements. We thank the anonymous review-
ers and our shepherd, Katerina Argyraki, for their helpful
feedback.
6. REFERENCES
[1] HideMyAss.com doesn’t hide logs from the FBI. http:
//blog.hidemyass.com/2011/09/23/lulzsec-fiasco/.
[2] Private communication with a large European ISP, 2012.
[3] Bamford, J. The NSA Is Building the Country’s Biggest
Spy Center (Watch What You Say), 2012.
http://www.wired.com/threatlevel/2012/03/ff_
nsadatacenter/all/1.
[4] Berthold, O., Federrath, H., and K¨opsell, S. Web
MIXes: A system for anonymous and unobservable Internet
access. In Proceedings of Designing Privacy Enhancing
Technologies: Workshop on Design Issues in Anonymity
and Unobservability (July 2000), H. Federrath, Ed.,
Springer-Verlag, LNCS 2009, pp. 115–129.
[5] Chaum, D. Untraceable electronic mail, return addresses,
and digital pseudonyms. Communications of the ACM 24,
2 (February 1981).
[6] Chaum, D. The dining cryptographers problem:
Unconditional sender and recipient untraceability. Journal
of Cryptology 1 (1988), 65–75.
[7] Choffnes, D. R., and Bustamante, F. E. Taming the
torrent: A practical approach to reducing cross-ISP traﬃc
in P2P systems. In Proceedings of SIGCOMM (August
2008).
[8] Dai, W. Pipenet 1.1. Post to Cypherpunks mailing list,
November 1998.
[9] Danezis, G. The traﬃc analysis of continuous-time mixes.
In Proceedings of Privacy Enhancing Technologies
workshop (PET 2004) (May 2004), vol. 3424 of LNCS,
pp. 35–50.
[10] Danezis, G., Dingledine, R., and Mathewson, N.
Mixminion: Design of a Type III Anonymous Remailer
Protocol. In Proceedings of the 2003 IEEE Symposium on
Security and Privacy (May 2003), pp. 2–15.
[11] Dingledine, R., Mathewson, N., and Syverson, P. Tor:
The second-generation onion router. In Proceedings of the
13th USENIX Security Symposium (August 2004).
[12] Freedman, M. J., and Morris, R. Tarzan: A peer-to-peer
anonymizing network layer. In Proceedings of the 9th ACM
Conference on Computer and Communications Security
(CCS 2002) (Washington, DC, November 2002).
[13] Furukawa, J., and Sako, K. An eﬃcient scheme for
proving a shuﬄe. In In Proc. of CRYPTO’01 (2001),
Springer-Verlag, pp. 368–387.
[14] Goldschlag, D. M., Reed, M. G., and Syverson, P. F.
Hiding Routing Information. In Proceedings of Information
Hiding: First International Workshop (May 1996),
R. Anderson, Ed., Springer-Verlag, LNCS 1174,
pp. 137–150.
[15] G¨ulc¨u, C., and Tsudik, G. Mixing E-mail with Babel. In
Proceedings of the Network and Distributed Security
Symposium - NDSS ’96 (February 1996), IEEE, pp. 2–16.
[16] Juels, A. Dining cryptographers revisited. In In Advances
in Cryptology (EUROCRYPT 2004), Springer LNCS 3027
(2004), pp. 456–473.
[17] Katti, S., Jeff, J. C., and Katabi, D. Information
slicing: anonymity using unreliable overlays. In Proceedings
of the 4th USENIX conference on Networked systems
design & implementation (Berkeley, CA, USA, 2007),
NSDI’07, USENIX Association, pp. 4–4.
[18] Landsiedel, O., Pimenidis, L., Wehrle, K.,
Niedermayer, H., and Carle, G. Dynamic multipath
onion routing in anonymous peer-to-peer overlay networks.
In GLOBECOM (2007), pp. 64–69.
[19] Larsson, S., Svensson, M., de Kaminski, M.,
R ˜A˝unkk ˜A˝u, K., and Olsson, J. A. Law, Norms, Piracy
and Online Anonymity: Practices of De-identiﬁcation in
the Global File Sharing Community. Proceedings of Journal
of Research in Interactive Marketing 6, 4 (2012).
[20] Levine, B. N., Reiter, M. K., Wang, C., and Wright,
M. K. Timing attacks in low-latency mix-based systems. In
Proceedings of Financial Cryptography (FC ’04) (February
2004), A. Juels, Ed., Springer-Verlag, LNCS 3110,
pp. 251–265.
[21] M¨oller, U., Cottrell, L., Palfrader, P., and
Sassaman, L. Mixmaster Protocol — Version 2. IETF
Internet Draft, July 2003.
[22] Neff, C. A. A veriﬁable secret shuﬄe and its application
to e-voting. ACM Press, pp. 116–125.
[23] Øverlier, L., and Syverson, P. Locating hidden servers.
In Proceedings of the 2006 IEEE Symposium on Security
and Privacy (May 2006), IEEE CS.
[24] Rennhard, M., and Plattner, B. Introducing MorphMix:
Peer-to-Peer based Anonymous Internet Usage with
Collusion Detection. In Proceedings of the Workshop on
Privacy in the Electronic Society (WPES 2002)
(Washington, DC, USA, November 2002).
[25] Shane, S., and Burns, J. F. U.S. Subpoenas Twitter Over
WikiLeaks Supporters, 2011.
http://www.nytimes.com/2011/01/09/world/09wiki.html.
[26] Sherwood, R., Bhattacharjee, B., and Srinivasan, A.
P5: A protocol for scalable anonymous communication. In
Proceedings of the 2002 IEEE Symposium on Security and
Privacy (May 2002).
[27] Shostack, A., and Goldberg, I. Freedom systems 1.0
security issues and analysis. White paper, Zero Knowledge
Systems, Inc., October 2001.
[28] Syverson, P., Tsudik, G., Reed, M., and Landwehr, C.
Towards an Analysis of Onion Routing Security. In
Proceedings of Designing Privacy Enhancing Technologies:
Workshop on Design Issues in Anonymity and
Unobservability (July 2000), H. Federrath, Ed.,
Springer-Verlag, LNCS 2009, pp. 96–114.
[29] Wang, X., Chen, S., and Jajodia, S. Tracking anonymous
peer-to-peer voip calls on the internet. In Proceedings of the
ACM Conference on Computer and Communications
Security (November 2005), pp. 81–91.
[30] Wolinsky, D. I., Corrigan-Gibbs, H., and Ford, B.
Dissent in numbers: Making strong anonymity scale. In
Proc. OSDI (2012).
[31] Yang, Z., Zhong, S., and Wright, R. N.
Anonymity-preserving data collection. In In KDD’05: Proc.
of the 11th ACM SIGKDD International Conference on
Knowledge Discovery in Data Mining (2005), pp. 334–343.
[32] Zhu, Y., and Bettati, R. Unmixing mix traﬃc. In
Proceedings of Privacy Enhancing Technologies workshop
(PET 2005) (May 2005), pp. 110–127.
[33] Zhu, Y., Fu, X., Graham, B., Bettati, R., and Zhao,
W. On ﬂow correlation attacks and countermeasures in mix
networks. In Proceedings of Privacy Enhancing
Technologies workshop (PET 2004) (May 2004), vol. 3424
of LNCS, pp. 207–225.