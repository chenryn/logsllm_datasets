must create several infinite loops to guess the first key
bytes. The actual number of loops created, shown in
In our experiments,
Key
Bytes Attempts
3983
4208
7240
8636
18904
30035
102389
Table 1.  Jump attack results (averages
Success
Rate (%)
98
99
98
100
95
100
95
2
4
32
100
512
1024
4096
Attempts
per Byte
1991.6
1052.1
226.3
86.4
36.9
29.3
25.0
Infinite
Loops
3.86
8.11
8.28
9.15
8.31
7.90
8.36
Time (s)
138.3
207.9
283.6
365.6
627.4
974.3
2919.4
over all trials).
USENIX Association
14th USENIX Security Symposium
157
)
s
d
n
o
c
e
s
(
e
m
T
i
 1000
 100
 10
 1
 4
Jump
Return
e
t
y
B
/
s
t
p
m
e
t
t
A
 1000
 100
Jump
Return
 64
 16
 256
Key Bytes Acquired
 1024  4096
 1
 4
 64
 16
 256
Key Bytes Acquired
 1024  4096
Figure 9.  Attempts per byte.
Figure 8.  Time to acquire key bytes.  
Times are wall-clock times measured by the client for
the duration of the attack. The marked points are the
median values and the bars show the 95th percentile
maximum and minimum results over all trials.
Table 1, varies depending on the number of apparently
correct offset values. 
This meant
In our initial experiments, we had surprising results
where trials guessing 32-byte keys were always taking
longer than guessing 2048-byte keys. The bytes placed
on the stack during the near jump phase of the 32-byte
attack (guessing mask bytes 5 through 11) included an
0xfe byte.
if the guessed instruction
decrypted to a harmless instruction the execution could
fall through to the 0xfe instruction and generate an
infinite loop.
Instead of the typical number of infinite
loops, over 20 infinite loops were being created. This
increased the server load enough to make the 32-byte
key trials take longer than the 2048-byte keys. We
modified the attack client to avoid this problem by ma-
king it select an address for starting the guessing that
ensures 0xfe will not appear in the near jump offset. 
In a few cases, our attack was not able to determine the
correct key. The failures are caused by the inability to
use certain masks because injecting the desired
encrypted byte would require placing a null byte on the
stack, which will cause the attack string to end before
the return address is overwritten. Workarounds are
possible, and necessary for the common cases.
For
example, in the return attack we will get an incorrect
mask when a position has an apparently correct guess,
but the mask is the return opcode. We assume 0xc3 is
the correct mask when all the other 255 masks fail to
produce the return behavior. Similarly, for the jump
attack we will have false positives when the mask for
the last position guessed is 0xfe. Our experimental
results demonstrate that with the strategies we use the
likelihood of incorrect guesses is small enough that it is
not worth increasing the length and complexity of the
attack code to deal with the rare special cases.
6.  Discussion
Our attack is essentially a chosen-ciphertext attack on
an XOR encryption scheme.
If we obtain a known
ciphertext-plaintext pair with such a cipher, obtaining
the encryption key is a trivial matter of XORing the
plaintext and ciphertext. The challenge is obtaining a
known plaintext. We do not actually obtain the plain-
text for a given ciphertext guess, but instead obtain
clues from the remotely observed behavior. After
enough guesses, though, we can reliably determine the
corresponding plaintext for an input ciphertext, and
acquire the key.
suggests
some simple modifications
This
to ISR
implementations that can be used to make incremental
guessing attacks much less likely to succeed. Our
attack strategy would not work against any ISR scheme
that uses an encryption algorithm that is not susceptible
to a simple known plaintext-ciphertext attack. Any
modern block encryption algorithm (such as AES [8])
satisfies this property. Unfortunately, the performance
overhead of decrypting executing instructions with
such an algorithm may be prohibitive. A more efficient
but less secure alternative might be to randomly map
each 8-bit value to a value using a lookup table.
Combining this with the XOR encryption would make
incremental key attacks like we propose much more
difficult since it would hide the structure of the actual
instruction set from the adversary.   
The other property our attack relies on that is easily
altered is the need to make many attempts that crash a
process against a binary randomized using the same
158
14th USENIX Security Symposium
USENIX Association
key. RISE is largely invulnerable to our attack because
of the way it uses different randomization keys for
forked processes. If re-randomizing is inexpensive, an
implementation that
re-randomizes the binary after
every process or thread crash would not be susceptible
to incremental key breaking attacks. This approach,
however, does make the server increasingly vulnerable
to denial-of-service attacks since all an attacker needs
to do to force the server to shutdown and restart itself
with a new randomization key is to crash a single
thread.  
short
(one or
The details of our attacks are heavily dependent on the
x86 instruction set.
In particular, our attacks rely on
the presence of
two-byte) control
instructions and short harmless instructions, and benefit
substantially from the structure of the conditional jump
instructions. For any RISC architecture with fixed
instruction length, the minimum number of key bits that
must be guessed at once is determined by the
instruction length. Most RISC architectures use in-
struction lengths of at least 32 bits, which is probably
too long to realistically guess using a brute-force
approach.
7.  Conclusion
We have demonstrated that servers protected using ISR
may be vulnerable to an incremental key-breaking
attack. Our attack enables a remote attacker to acquire
enough key bytes to inject an arbitrarily long worm in
an ISR-protect server in approximately six minutes
using the jump attack.
Our results apply only to the use of ISR at the machine
instruction set level; our techniques could not be used
directly to attack ISR defenses
for higher-level
languages such as SQL [6] and Perl [12].
Our results indicate that doing ISR in a way that
provides a high degree of security against a motivated
attacker is more difficult than previously thought. The
most efficient ISR proposals, such as the repeated 32-
bit XOR key, provide little security under realistic
conditions. This does not mean ISR is no longer a
promising defense strategy, but it means designers of
ISR systems must consider carefully how effectively
their
randomization thwarts possible strategies for
remotely determining the randomization key.
Acknowledgments
The authors thank Gabriela Barrantes for generously
providing the RISE implementation for our experi-
ments. We are grateful to Stephanie Forrest, Patrick
Graydon, and Trent Jaeger for providing useful and
insightful comments on early versions of this paper.
This work benefited from fruitful discussions with Lee
Badger, Steve Chapin, Jack Davidson, Dragos Halmagi,
Xuxian Jiang, Angelos Keromytis, John Knight, David
Mazières, Cristina Nita-Rotaru, Anh Nguyen-Tuong,
Fred Schneider, Jeffrey Shirley, Mary Lou Soffa, Peter
Szor, Dan Williams, Dongyan Xu, and Jinlin Yang.
We thank Andrew Barrows, Jessica Greer, Scott
Ruffner, and Jing Yang for technical assistance, and the
Guadalajara Restaurant for Special Lunch #3. This
work was supported in part by grants from the DARPA
Self-Regenerative Systems Program (FA8750-04-2-
0246) and the National Science Foundation (through
grants NSF CAREER CCR-0092945 and NSF ITR
EIA-0205327). 
References
[1] Apache Software Foundation.  Apache MPM
Worker. Apache HTTP Server Version 2.0
Documentation.
http://httpd.apache.org/docs-2.0/mod/worker.html
[2]  Murat Balaban. Buffer Overflows Demystified.
http://www.enderunix.org/documents/eng/bof-eng.txt
[3] Elena Gabriela Barrantes, David H. Ackley,
Stephanie Forrest, Trek S. Palmer, Darko
Stefanovic, and Dino Dai Zovi. Intrusion
detection: Randomized instruction set emulation
to disrupt binary code injection attacks. 10th ACM
Conference on Computer and Communication
Security (CCS), pp 281 – 289. October 2003.
[4] Elena Gabriela Barrantes, David H. Ackley,
Stephanie Forrest, and Darko Stefanovic.
Randomized Instruction Set Emulation.  ACM
Transactions on Information and System Security.
In Press, 2005.
[5] Daniel Bovet and Marco Cesati. Understanding
the Linux Kernel (Second Edition). O’Reilly and
Associates. 2002.
[6] Stephen W. Boyd and Angelos D. Keromytis.
SQLrand: Preventing SQL Injection Attacks.  2nd
Applied Cryptography and Network Security
Conference (ACNS).  June 2004.
Jedidiah R. Crandall, S. Felix Wu, and Frederic T.
Chong. Experiences Using Minos as A Tool for
Capturing and Analyzing Novel Worms for
[7]
USENIX Association
14th USENIX Security Symposium
159
Unknown Vulnerabilities.  GI/IEEE SIG SIDAR
Conference on Detection of Intrusions and
Malware and Vulnerability Assessment
(DIMVA).  July 2005. 
[8]  Joan Daemen and Vincent Rijmen.  The Design of
Rijndael: AES - The Advanced Encryption
Standard. Springer-Verlag, 2002. 
[9] Roman Danyliw.   CERT Advisory CA-2003-04
MS-SQL Server Worm.  January 2003.
http://www.cert.org/advisories/CS-2003-04.html
[10] eEye Digital Security. Sapphire Worm Code
Disassembled.  January 2003.
http://www.eeye.com/html/Research/Flash/sapphire.txt
[11]  Intel Corporation. Intel Architecture Software
Developer’s Manual Volume 2: Instruction Set
Reference.  1997.  http://developer.intel.com/design/
pentium/manuals/24319101.pdf.
[12] Gaurav S. Kc, Angelos D. Keromytis, and
Vassilis Prevelakis. Countering Code-Injection
Attacks With Instruction-Set Randomization. 10th
ACM International Conference on Computer and
Communications Security (CCS). October 2003.
[13] David Litchfield.  Variations in Exploit methods
between Linux and Windows.  July 2003.
http://www.ngssoftware.com/papers/exploitvariation.pdf
[14] The NASM Project. The Netwide Assembler.
http://nasm.sourceforge.net/
[15] The Pax Team.  The Design and Implementation
of PaX.  November 2003.
http://pax.grsecurity.net/docs/pax.txt
[16] Julian Seward.  The Design and Implementation
of Valgrind.  2003. http://developer.kde.org/~sewardj/
docs-2.0.0/mc_techdocs.html
[17] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-
Jin Goh, Nagendra Modadugu, Dan Boneh. On
the Effectiveness of Address-Space
Randomization. 11th ACM Conference on
Computer and Communications Security.
October 2004.
[18] Solar Designer.  Return-to-libc Attack.  Bugtraq
Mailing List. August 1997.
A. MicroVM Code
The MicroVM code is shown below using NASM
assembly code [14].
For clarity, we use symbolic
constants in this code; the appropriate values would be
hard coded into the injected code by the worm during
deployment. NUM_BYTES is the size of the worm
execution buffer (22), DATA_OFFSET is the offset
from the beginning of the worm code to the beginning
of the data (a four-byte value), and REG_BYTES is the
number of bytes used to store the worm registers (24). 
_start:
push ebp ; save frame pointer
; get location of stored worm registers 
mov ebp, WORM_ADDRESS + REG_OFFSET
pop dword [ebp + DATA_OFFSET], ebp
xor eax, eax 
; eax is the IP into worm
; WormIP = eax (zeroing eax starts at the beginning)
read_more_worm:
; copy next NUM_BYTES into worm execution buffer
cld
xor ecx, ecx
mov byte cl, NUM_BYTES
mov dword esi, WORM_ADDRESS
; get WormIP (points at next instruction to fetch)
add dword esi, eax
mov edi, begin_worm_exec
rep movsb
; change next WormIP to point to next block
add eax, NUM_BYTES 
pushad ; save MicroVM registers
; load worm registers
mov edi, dword [ebp + EDI_OFFSET]
… ; do the same for esi, eax, ebx, ecx, and edx
begin_worm_exec:
nop ; Reserve NUM_BYTES using nops to leave
nop    ; room for worm code fragment
… 
; end of worm code space
; save worm registers
mov [ebp + EDI_OFFSET],edi
… ; do the same for esi, eax, ebx, ecx, and edx
popad ; load MicroVM registers
jmp read_more_worm
160
14th USENIX Security Symposium
USENIX Association