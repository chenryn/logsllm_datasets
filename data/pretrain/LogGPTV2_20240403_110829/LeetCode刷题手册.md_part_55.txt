func (h IntHeap) Len() int { return len(h.data) }
// Len define 
type IntHeap struct {
// IntHeap define
X := h.data[h.Len()-1] 
data []int
return x 
h.data = h.data[O : h.Len()-1]
return ans
// fmt.Printf("%+v, %+v\n", minH, maxH)
if minH.Len()+maxH.Len() == k {
if minH.Len(） > maxH.Len()+l {
if i >= k { 
if k%2 == 0 { 
 minH. Push(maxH. Pop())
else if minH.Len() = minH.Top(） {
} else { 
ans = append(ans, float64(minH.Top()+maxH.Top()) /2.0)
} else { 
 maxH.Remove(nums [i-k])
minH.Remove(nums [i-k]) 
 ans = append(ans, float64(minH.Top()))
---
## Page 555
{(x ‘laady'yo)ysnd'deay } (auy x)aoway (adeaguwx y) oung
// Remove define 
func (h *MinHeapR) Push(x int) { heap.Push(&h.hp, x) }
// Push define 
func (h *MinHeapR) Pop(） int {
// Pop define 
// Top define 
func (h MinHeapR) Len() int { return h.hp.Len() - h.hpDel.Len() }
// Len define 
type MinHeapR struct 
// MinHeapR define 
func (h MaxHeap) Less(i，j int) boo] { return h.data[i] > h.data[j] }
// Less define
type MaxHeap struct {
// MaxHeap define 
func (h MinHeap) Less(i, j int) bool { return h.data[i]  O && h.hp.Top() == h.hpDel.TopO) {
return h.data[0]
heap. Pop(&h.hpDe1)
heap.Pop(&h.hp)
---
## Page 556
Example 2:
Example 1: 
format.
Now given a string representing n, you should return the smallest good base of n in string 
For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.
题目
483. Smallest Good Base
Explanation: 13 base 3 is 1l1.
Output: "3"
Input: "13"
func (h *MaxHeapR) Remove(x int) { heap.Push(&h.hpDel,x) }
// Remove define 
func (h *MaxHeapR) Push(x int) { heap.Push(&h.hp, x) }
// Push define 
func (h *MaxHeapR) PopC) int {
// Pop define
} u！ ()do1 (adeaHxeWx y) uny
// Top define 
func (h MaxHeapR) Len() int { return h.hp.Len() - h.hpDel.Len() }
// Len define 
type MaxHeapR struct 
// MaxHeapR define
 hp, hpDel MaxHeap
return x 
heap.Pop(&h.hp)
x := h.Top() 
return h.hp.Top()
for h.hpDel.Len() > O && h.hp.Top() == h.hpDel.Top() {
heap.Pop(&h.hpDel)
heap.Pop(&h.hp) 
---
## Page 557
可得：
解题思路
以字符串的形式给出n,以字符串的形式返回n的最小好进制。
）
题目大意
Note:
Example 3: 
·给出一个数n，要求找一个进制k，使得数字 n在k进制下每一位都是1。求最小的进制k。
●n的取值范围是[3,10^18]。
 2. The string representing n is always valid and will not have leading zeros.
1. The range of n is [3, 10^18].
●
●
Explanation: 1000000000000000000 base 999999999999999999 is 11.
666666666666666666 :ndano
Input:"1000000000000000000"
Explanation: 4681 base 8 is 11111.
Output: "8"
Input: "4681"
这一题需要确定k和m两个数的值。m和k是有关系的，确定了一个值，另外一个值也确定了。
 这一题等价于求最小的正整数k，满足存在一个正整数 m 使得
输入总是有效且没有前导 0。
由
.
1-k
—km+1
1-k
=7
-=7
---
## Page 558
代码
所以 k 的取值范围是 [2, n*(1/m)]。再利用二分搜索逼近找到最小的k 即为答案。
可得，
可以用二分搜索来逼近找到最小的k。先找到k 的取值范围。
所以 m 的取值范围确定了。那么外层循环从 1 到log n 遍历。找到一个最小的k，能满足:
根据题意，可以知道k≥2，m≥1，所以有:
func smallestGoodBase(n string) string {
package leetcode
import （
for bit := uint64(math.Log2(float64(num))); bit >= 1; bit-- { 
"strconv'
"math"
low, high := uint64(2), uint64(math.Pow(float64(num), 1.0/float64(bit)))
for low >1)
if sum == num { 
sum := findBase(mid, bit)
return strconv.Formatuint(mid, 10)
m = logk(kn -n + 1) - 1  num {
 high = mid - 1 
low = mid + 1
计算其中最大连续1的个数。
---
## Page 560
题目大意
Note:
Example:
'Z aseal ne aa pinous anuanbasgns gusseaous ue jo yual au pue ee uani au
Given an integer array, your task is to find all the different possible increasing subsequences of 
题目
491. Increasing Subsequences
代码
3. The given array may contain duplicates, and two equal integers should also be considered 
 2. The range of integer in the given array is [-100,100]. 
1. The length of the given array will not exceed 15.
·简单题。扫一遍数组，
·给定一个二进制数组，
[4,7,7]]
Output: [[4, 6]，[4, 7]，[4, 6, 7]，[4,6,7, 7]，[6,7]，[6, 7,7]，[7,7]
Input: [4,6,7,7
func findMaxConsecutiveones(nums  []int) int {
package leetcode
 as a special case of increasing sequence.
return maxcount
for -, v := range nums {
if currentcount > maxcount {
if v == 1 { 
currentcount++
 maxcount = currentcount 
 currentcount = 
else { 
L
，累计1的个数，动态维护最大的计数，最终输出即可。
计算其中最大连续1的个数。
0
---
## Page 561
代码
解题思路
说明：
给定一个整型数组，你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是 2。
func generateIncsubsets(nums []int, current int, c []int, res *[][]int) {
·这一题和第78 题，第 90 题类似，可以一起解答和复习。
·给出一个数组，要求找出这个数组中所有长度大于2的非递减子序列。子序列顺序和原数组元素
3．给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。
2.数组中的整数范围是[-100,100]。
1．给定数组的长度不会超过15。
func findsubsequences(nums []int) [][]int {
package leetcode 
if len(c) >= 2 {
C = append(c, nums[current]) 
for i := O; i2*numsi] 我们就将(i,j)称作一个重要翻转对。你需要返
题目大意
Note:
Example2:
Example1:
You need to return the number of important reverse pairs in the given array.
2*nums [j].
 ! j! ujed asianau sueodu! ue (! 't) lies am 'sunu Kee ue uan!
题目
493. Reverse Pairs
·输入数组中的所有数字都在 32位整数的表示范围内。
·给定数组的长度不会超过50000。
 2. All the numbers in the input array are in the range of 32-bit integer.
 1. The length of the given array will not exceed 50, 000.
Output:3
Input: [2,4,3,5,1]
Output: 2 
Input: [1,3,2,3,1]
return 
= c[:len(c)-1]
n
} else { 
if -
continue
generateIncSubsets(nums, i, C, res)
visited[nums[i]] = true
，ok := visited[nums[i]]; ok {
---
## Page 563
代码
make(map[int]int, 0), make(map[int]int, O), []int[}, 0 
·给出一个数组，要求找出满足条件的所有的"重要的反转对"(ij)。重要的反转对的定义是：[i 2*nums [j，把整个数组都扫完，累加的 query 出来的
会导致数字溢出，见测试用例中2147483647,-2147483647这组测试用例。离散后，映射关系保
这一题是 327 题的变种题。首先将数组中所有的元素以及各自的 2*nums[i]+1 都放在字典中
for.
循环先 query一次前一轮循环中累积插入线段树中的，这些累积在线段树中的代表的是所有在
去重。去重以后再做离散化处理。这一题的测试用例会卡离散化，如果不离散化，Math.MaxInt32
并且 nums[i] > 2*nums[j]。
 numsArray = append(numsArray, v)
count 计数就是最终答案。
j 前面的 i。query 查询的是本轮［2*nums[j]+ 1，len(indexMap)-1] ，如果能找到，即找
都是> 2*nums[j] 的。这一题移动的是j，j 不断的变化，往线段树中不断插入的是 。每轮
存在字典中。从左往右遍历数组，先 query，再 update，这个顺序和第 327 题是反的。先
I + wnuxZ = [+wnuxZ]dewswnu 
numsMap[num] = num 
return 0 
-, num := range nums {
---
## Page 564
func mergesortcount(nums, buf []int) int {
func reversePairsl(nums []int) int {
//解法二 mergesort
return cnt
for i, j,k := O, mid+l, O; k= len(nums）丨l ibuf[j] {
cnt += len(nums) - j
for ; j <len(nums） & nums[i] <= 2*nums[j]; j++ {
st.UpdateCount(indexMap[num])
res += st.Query(indexMap[num*2+1], len(indexMap)-1)
return 0
<++
nums[k] = buf[j]
 nums[k] = buf[i] 
-, num := range nums { 
j++
i++ 
buf)
---
## Page 565
解题思路
提示：
号的方法数。
一个整数，可以从+或－中选择一个符号添加在前面。返回可以使最终数组和为目标数S 的所有添加符
给定一个非负整数数组，a1,a2,….,an,和一个目标数，S。现在有两个符号+和-。对于数组中的任意
题目大意
Note:
Example 1: 
Find out how many ways to assign symbols to make sum of integers equal to target S.
You are given a list of non-negative integers, a1, a2, ., an, and a target, S. Now you have 2 
题目
494. Target Sum