domain names to various types of data, such as IP addresses. DNS enables the location of computers 
and services by user-friendly names, and it also enables the discovery of other information stored in the 
database. 
forward lookup – A DNS query that maps an FQDN to an IP address. 
FQDN – See fully qualified domain name (FQDN). 
fully qualified domain name (FQDN) - A DNS name that has been stated to indicate its absolute location 
in the domain namespace tree. An FQDN has a trailing period (.) to qualify its position to the root of the 
namespace (for example, host.example.microsoft.com.). 
Host name – The DNS name of a device on a network. Host names are used to locate computers on 
the network. To find another computer, its host name must either appear in the Hosts file or be known 
by a DNS server. For most computers running Windows, the host name and the computer name are the 
same.  
Host name resolution – The process of resolving a host name to a destination IP address. 
iterative query - A query made to a DNS server for the best answer the server can provide without 
seeking further help from other DNS servers. 
master server – An authoritative DNS server for a zone. Master servers are either primary or secondary 
master servers, depending on how the server obtains its zone data. 
primary server - An authoritative DNS server for a zone that can be used as a point of update for the 
zone. Only primary servers can be updated directly to process zone updates, which include adding, 
removing, or modifying resource records that are stored as zone data. 
recursive query – A query made to a DNS server in which the requester asks the server to assume the 
full workload and responsibility for providing a complete answer to the query. The DNS server then 
uses separate iterative queries to other DNS servers on behalf of the requester to assist in finding a 
complete answer for the recursive query. 
reverse lookup – A DNS query that maps an IP address to an FQDN. 
root domain - The beginning of the DNS namespace. 
secondary server - An authoritative DNS server for a zone that obtains its zone information from a 
master server. 
Chapter 9 – Windows Support for DNS 
TCP/IP Fundamentals for Microsoft Windows  
Page: 272 
second-level domain – A DNS domain name that is rooted hierarchically at the second tier of the 
domain namespace, directly beneath the top-level domain names. Top-level domain names include 
.com and .org. When DNS is used on the Internet, second-level domains are names that are registered 
and delegated to individual organizations and businesses. 
stub zone – A copy of a zone that contains only the resource records required to identify the 
authoritative DNS servers for that zone. A DNS server that hosts a parent zone and a stub zone for one 
of the parent zone's delegated child zones can receive updates from the authoritative DNS servers for 
the child zone. 
top-level domains – Domain names that are rooted hierarchically at the first tier of the domain 
namespace directly beneath the root (.) of the DNS namespace. On the Internet, top-level domain 
names such as .com and .org are used to classify and assign second-level domain names (such as 
microsoft.com) to individual organizations and businesses according to their organizational purpose. 
zone – A manageable unit of the DNS database that is stored on a DNS server. A zone contains the 
domain names and data of the domain with a corresponding name, except for domain names stored in 
delegated subdomains.  
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 273 
Chapter 10 – TCP/IP End-to-End Delivery 
Abstract 
This chapter describes the end-to-end delivery processes for IPv4 and IPv6 traffic. A network administrator must 
understand these processes to determine how traffic flows on a network and troubleshoot connectivity problems. This 
chapter also describes end-to-end delivery processes in further detail by analyzing the steps for typical IPv4 and IPv6 
traffic on an example network. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 274 
Chapter Objectives 
After completing this chapter, you will be able to: 
Describe the details of the end-to-end IPv4 delivery process for the source host, the intermediate 
routers, and the destination host. 
List the steps involved when IPv4 traffic is sent across an example network. 
Describe the details of the end-to-end IPv6 delivery process for the source host, the intermediate 
routers, and the destination host. 
List the steps involved when IPv6 traffic is sent across an example network. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 275 
End-to-End IPv4 Delivery Process 
The end-to-end delivery process for IPv4 traffic consists of the following: 
The source host sends the packet either to a router or to the final destination (if the destination is a 
neighbor). 
The router forwards the packet either to another router or to the final destination (if the destination is a 
neighbor). 
The destination host receives the packet and passes the data to the appropriate application. 
Note  The following processes assume that the IPv4 header contains no options. 
IPv4 on the Source Host 
When an IPv4 source host sends an IPv4 packet, the host uses a combination of local host tables and 
the Address Resolution Protocol (ARP). An IPv4 source host uses the following algorithm when sending 
a packet to an arbitrary destination: 
1. Specify either a default or application-specified value for the Time-to-Live (TTL) field. 
2. Check the route cache for an entry that matches the destination address. The route cache is a table 
that stores the next-hop IPv4 address and interface for destinations to which traffic has been recently 
sent. This step prevents IPv4 from performing the route determination process for every IPv4 packet 
sent. 
3. If the route cache contains an entry that matches the destination address, obtain the next-hop 
address and interface from the entry, and go to step 7. 
4. If the route cache does not contain an entry that matches the destination address, check the local 
IPv4 routing table for the longest matching route with the lowest metric to the destination address. If 
multiple longest matching routes have the lowest metric, choose the matching route for the interface 
that is first in the binding order. 
5. Based on the longest matching route with the lowest metric, determine the next-hop address and 
interface to use for forwarding the packet.  
If no route is found, indicate a routing error to the application that is sending the packet. 
6. Update the route cache with an entry that contains the destination IPv4 address of the packet and its 
corresponding next-hop address and interface. 
7. Check the ARP cache of the next-hop interface for an entry that matches the next-hop IPv4 address. 
You can view the ARP cache with the arp –a command. 
8. If the ARP cache contains an entry that matches the next-hop address, obtain the corresponding 
media access control (MAC) address, and go to step 10. 
9. If the ARP cache does not contain an entry that matches the next-hop address, use ARP to obtain 
the MAC address for the next-hop IPv4 address. 
If ARP is successful, update the ARP cache with an entry that contains the next-hop IP address and 
its corresponding MAC address. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 276 
If ARP is not successful, indicate an error to IP. 
10. Send the packet by using the MAC address of the ARP cache entry. 
This process is for host with a single interface, known as a single-homed host. For hosts with multiple 
interfaces, known as multi-homed hosts, the route determination process depends on the source 
address and whether the host supports strong or weak hosts sends. For strong host sends, the next-
hop interface must be assigned the source address of the packet. For weak host sends, the next-hop 
interface does not have to be assigned the source address of the packet. For more information, see 
Strong and Weak Host Models. 
Figure 10-1 shows the IPv4 sending process for a source host. 
Figure 10-1  The IPv4 sending process for a source host 
IPv4 on the Router 
Just like an IPv4 source host, the process by which an IPv4 router forwards an IPv4 packet uses a 
combination of local router tables and ARP. An IPv4 router uses the following algorithm when receiving 
and forwarding a packet to an arbitrary unicast destination: 
1. Calculate the IPv4 header checksum. Compare the calculated value to the value included in the IPv4 
header of the packet. 
If the checksums have different values, discard the packet. 
2. Verify whether the destination address in the IPv4 packet corresponds to an address assigned to an 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 277 
interface of the router. 
If so, process the IPv4 packet as the destination host. (See step 3 in "IPv4 on the Destination Host" 
in this chapter.) 
3. Decrement the value of the TTL field by 1. 
If the value of the TTL field is less than 1, send an Internet Control Message Protocol (ICMP) Time 
Exceeded-TTL Exceeded in Transit message to the sender, and discard the packet. 
If the value of the TTL field is greater than 0, recalculate the Checksum field, and then update the 
TTL and the Checksum fields in the IPv4 header of the packet. 
4. Check the route cache for an entry that matches the destination address. 
5. If the route cache contains an entry that matches the destination address, obtain the next-hop IPv4 
address and interface from the entry, and go to step 10. 
6. If the route cache does not contain an entry that matches the destination address, check the local 
IPv4 routing table for the longest matching route to the destination IPv4 address. 
7. Based on the longest matching route, determine the next-hop IPv4 address and interface to use for 
forwarding the packet. 
If no route is found, send an ICMP Destination Unreachable-Host Unreachable message to the 
source host, and discard the packet. 
8. Update the route cache with an entry that contains the destination IPv4 address of the packet and its 
corresponding next-hop address and interface. 
9. Compare the IP maximum transmission unit (MTU) of the next-hop interface to the size of the IPv4 
packet being forwarded. If the IP MTU of the next-hop interface is smaller than the packet size, check 
the Don’t Fragment (DF) flag in the IPv4 header. 
If DF flag is set to 1, send ICMP Destination Unreachable-Fragmentation Needed and DF Set 
messages to the source host, and discard the packet. 
If DF flag is set to 0, fragment the IPv4 packet payload. 
10. Check the ARP cache of the next-hop interface for an entry that matches the next-hop IPv4 address. 
11. If the ARP cache contains an entry that matches the next-hop IPv4 address, obtain the 
corresponding MAC address, and go to step 13. 
12. If the ARP cache does not contain an entry that matches the next-hop IPv4 address, use ARP to 
obtain the MAC address for the next-hop IPv4 address. 
If ARP is successful, update the ARP cache with an entry that contains the next-hop IP address and 
its corresponding MAC address. 
If ARP is not successful, send an ICMP Destination Unreachable-Host Unreachable message to the 
source host, and discard the packet. 
13. Send the packet by using the MAC address of the ARP cache entry. 
Figures 10-2 and 10-3 show the router forwarding process. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 278 
Figure 10-2  IPv4 router forwarding process (part 1) 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 279 
Figure 10-3  IPv4 router forwarding process (part 2) 
Each IPv4 router in the path between the source host and the destination host repeats this process. 
IPv4 on the Destination Host 
A destination IPv4 host uses the following algorithm when receiving an IPv4 packet: 
1. Calculate the IPv4 header checksum. Compare the calculated value to the value included in the IPv4 
header of the packet. 
If the checksums have different values, discard the packet. 
2. Verify whether the destination address in the IPv4 packet corresponds to an IPv4 address assigned 
to a local host interface. 
If the destination address is not assigned to a local host interface, discard the packet. 
3. Verify that the value of the Protocol field corresponds to an upper layer protocol in use on the host. 
If the protocol does not exist, send an ICMP Destination Unreachable-Protocol Unreachable 
message back to the sender, and discard the packet. 
4. If the upper layer protocol data unit (PDU) is not a Transmission Control Protocol (TCP) segment or 
User Datagram Protocol (UDP) message, pass the upper layer PDU to the appropriate protocol.  
5. If the upper layer PDU is a TCP segment or UDP message, check the destination port. 
If no application is listening on the UDP port number, send an ICMP Destination Unreachable-Port 
Unreachable message back to the sender, and discard the packet. If no application is listening on the 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 280 
TCP port number, send a TCP Connection Reset segment back to the sender, and discard the 
packet. 
6. For the application listening on the UDP or TCP destination port, process the contents of the TCP 
segment or UDP message. 
This process is for a single-homed host. For multi-homed hosts, the receive process depends on 
whether the host supports strong or weak hosts receives. For strong host receives, the receiving 
interface must be assigned the destination address of the packet. For weak host receives, the receiving 
interface does not have to be assigned the destination address of the packet. For more information, see 
Strong and Weak Host Models. 
Figure 10-4 shows the IPv4 receiving process on the destination host. 
Figure 10-4  IPv4 receiving process on the destination host 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 281 
Step-by-Step IPv4 Traffic Example 
To show the end-to-end delivery process, this section steps through an example of IPv4 traffic when a 
user types the URL of a Web page in the Address bar of a Web browser and views a Web page from a 
Web server. This example demonstrates the following aspects of IPv4 traffic: 
Name resolution using the Domain Name System (DNS) 
End-to-end delivery using a source host, intermediate routers, and a destination host 
Creation of a TCP connection, including the three-way TCP handshake 
Use of the Hypertext Transfer Protocol (HTTP) to download the Hypertext Markup Language (HTML) 
text of a Web page 
Network Configuration 
Figure 10-5 shows a simple private IPv4 intranet consisting of four subnets connected with three 
routers. The example intranet contains a Web client, a DNS server, and a Web server.  
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 282 
Figure 10-5  An example IPv4 intranet 
The following sections describe the IPv4 configuration of each of these components. 
Web Client  
The Web client is a single-homed computer connected to the 10.0.13.0/24 subnet and uses the IPv4 
address of 10.0.13.110/24, the default gateway at 10.0.13.1, and the DNS server at 10.0.47.91. The 
Web client has the following routes: 
10.0.13.0/24 (directly attached network route) 
0.0.0.0/0 with the next-hop address of 10.0.13.1 (default route) 
Note  To simplify the discussion for each component of the example IPv4 intranet, this example lists only 
the most relevant routes. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 283 
Router 1 
Router 1 is connected to the 10.0.13.0/24 subnet using the IPv4 address 10.0.13.1 and the 
10.0.21.0/24 subnet using the IPv4 address 10.0.21.1. Router 1 has the following routes: 
10.0.13.0/24 (directly attached network route) 
10.0.21.0/24 (directly attached network route) 
10.0.47.0/24 with the next-hop address of 10.0.21.2 
10.0.48.0/24 with the next-hop address of 10.0.21.3 
Router 2 
Router 2 is connected to the 10.0.21.0/24 subnet using the IPv4 address 10.0.21.2 and the 
10.0.47.0/24 subnet using the IPv4 address 10.0.47.1. Router 2 has the following routes: 
10.0.21.0/24 (directly attached network route) 
10.0.47.0/24 (directly attached network route) 
10.0.13.0/24 with the next-hop address of 10.0.21.1 
10.0.48.0/24 with the next-hop address of 10.0.21.3 
Router 3 
Router 3 is connected to the 10.0.21.0/24 subnet using the IPv4 address 10.0.21.3 and the 
10.0.48.0/24 subnet using the IPv4 address 10.0.48.1. Router 3 has the following routes: 
10.0.21.0/24 (directly attached network route) 
10.0.48.0/24 (directly attached network route) 
10.0.13.0/24 with the next-hop address of 10.0.21.1 
10.0.47.0/24 with the next-hop address of 10.0.21.2 
DNS Server 
The DNS server is a single-homed computer connected to the 10.0.47.0/24 subnet and uses the IPv4 
address of 10.0.47.91/24 and the default gateway of 10.0.47.1. The DNS server has the following 
routes: 
10.0.47.0/24 (directly attached network route) 
0.0.0.0/0 with the next-hop address of 10.0.47.1 
The DNS server has an Address (A) resource record that maps the name web1.example.com to the 
IPv4 address of 10.0.48.12. 
Web Server  