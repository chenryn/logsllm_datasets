title:HORNET: High-speed Onion Routing at the Network Layer
author:Chen Chen and
Daniele Enrico Asoni and
David Barrera and
George Danezis and
Adrian Perrig
HORNET: High-speed Onion Routing at the Network Layer
Chen Chen
CMU/ETH Zürich
PI:EMAIL
Daniele E. Asoni
ETH Zürich
PI:EMAIL
David Barrera
ETH Zürich
PI:EMAIL
George Danezis
University College London
PI:EMAIL
Adrian Perrig
ETH Zürich
PI:EMAIL
ABSTRACT
We present HORNET, a system that enables high-speed end-to-end
anonymous channels by leveraging next-generation network archi-
tectures. HORNET is designed as a low-latency onion routing sys-
tem that operates at the network layer thus enabling a wide range
of applications. Our system uses only symmetric cryptography
for data forwarding yet requires no per-ﬂow state on intermediate
routers. This design enables HORNET routers implemented on off-
the-shelf hardware to process anonymous trafﬁc at over 93 Gb/s.
HORNET is also highly scalable, adding minimal processing over-
head per additional anonymous channel.
Categories and Subject Descriptors
C.2.0 [COMPUTER-COMMUNICATION NETWORKS]: Gen-
eral—Security and protection
General Terms
Security, Performance
Keywords
Anonymity; onion routing; network layer
1.
INTRODUCTION
Recent revelations about global-scale pervasive surveillance [26]
programs have demonstrated that the privacy of Internet users
worldwide is at risk. These revelations suggest massive amounts
of private trafﬁc, including web browsing activities, location infor-
mation, and personal communications are being harvested in bulk
by domestic and foreign intelligence agencies.
To protect against these threats, several anonymity protocols,
tools, and architectures have been proposed. Among the most
secure schemes for anonymous communications are mix net-
works [30, 38, 21, 22], which provide high-latency asynchronous
messaging. Onion routing networks (most notably Tor [25]), offer
a balance between security and performance, enabling low-latency
anonymous communication suitable for typical Internet activities
(e.g., web browsing, instant messaging, etc.). Tor is the system of
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813628.
choice for over 2 million daily users [11], but its design as an over-
lay network suffers from performance and scalability issues. Tor’s
design requires per-connection state to be maintained by interme-
diate nodes, limiting the total number of concurrent anonymous
connections that can take place simultaneously.
The scalability and performance limitations of anonymous net-
works have been partially addressed by building protocols into the
network layer rather than implementing them as overlays. Among
these high-performing schemes are LAP [32] and Dovetail [44],
which offer network-level low-latency anonymous communication
on next-generation network architectures. The high performance
of both schemes, however, results in signiﬁcantly degraded secu-
rity guarantees; endpoints have little to no protection against ad-
versaries that are not conﬁned to a single network location, and
payload protection relies on upper layer protocols which increases
complexity.
In this paper, we present HORNET (High-speed Onion Routing
at the NETwork layer), a highly-scalable anonymity system that
leverages next-generation Internet architecture design. HORNET
offers payload protection by default, and can defend against at-
tacks that exploit multiple network observation points. HORNET
is designed to be highly efﬁcient: it can use short paths offered by
underlying network architectures, rather than the long paths due to
global redirection; additionally, instead of keeping state at each re-
lay, connection state (including, e.g., onion layer decryption keys)
is carried within packet headers, allowing intermediate nodes to
quickly forward trafﬁc without per-packet state lookup.
While this paper proposes and evaluates a concrete anonymity
system, a secondary goal herein is to broadly re-think the design
of low-latency anonymity systems by envisioning networks where
anonymous communication is offered as an in-network service to
all users. For example, what performance trade-offs exist between
keeping anonymous connection state at relays and carrying state in
packets? If routers perform anonymity-speciﬁc tasks, how can we
ensure that these operations do not impact the processing of regular
network trafﬁc, especially in adversarial circumstances? And if the
network architecture should provide some support for anonymous
communication, what should that support be? Throughout the pa-
per we consider these issues in the design of our own system, and
provide intuition for the requirements of alternative network-level
anonymity systems.
Speciﬁcally, our contributions are the following:
• We design and implement HORNET, an anonymity system
that uses source-selected paths and shared keys between end-
points and routers to support onion routing. Unlike other
onion routing implementations, HORNET routers do not keep
per-ﬂow state or perform computationally expensive opera-
tions for data forwarding, allowing the system to scale.
1441• We analyze the security of HORNET, showing that it can
defend against passive attacks, and certain types of active at-
tacks. HORNET provides stronger security guarantees than
existing network-level anonymity systems.
• We evaluate the performance of HORNET, showing that its
anonymous data processing speed is close to that of LAP and
Dovetail (up to 93.5 Gb/s on a 120 Gb/s software router).
This performance is comparable with that of today’s high-
end commodity routers [2].
2. PROBLEM DEFINITION
We aim to design a network-level anonymity system to frustrate
adversaries with mass surveillance capabilities. Speciﬁcally, an ad-
versary observing trafﬁc traversing the network should be unable to
link (at large scale) pairs of communicating hosts . This property is
known as relationship anonymity [41].
We deﬁne sender anonymity as a communication scenario where
anonymity is guaranteed for the source, but the destination’s loca-
tion is public (e.g., web sites for The Guardian or Der Spiegel).
We deﬁne sender-receiver anonymity as a scenario where the an-
onymity guarantee is extended to the destination (e.g., a hidden
service that wishes to conceal its location). Sender-receiver ano-
nymity therefore offers protection for both ends, implying sender
anonymity. Depending on users’ needs, HORNET can support ei-
ther sender anonymity or sender-receiver anonymity.
Since our scheme operates at the network layer, network location
is the only identity feature we aim to conceal. Exposure of network
location or user identity at upper layers (e.g., through TCP sessions,
login credentials, or browser cookies) is out of scope for this work.
2.1 Network Model
We consider that provisioning anonymous communication be-
tween end users is a principal task of the network infrastructure.
The network’s anonymity-related infrastructures, primarily routers,
assist end users in establishing temporary anonymous sessions for
anonymous data transmission.
We assume that the network layer is operated by a set of nodes.
Each node cooperates with sources to establish anonymous ses-
sions to the intended destinations, and processes anonymous trafﬁc
within the created sessions. We require that the routing state of a
node allows it to determine only the next hop. In particular, the
destination is only revealed to the last node and no others. This
property can be satisﬁed by IP Segment Routing [9], Future Inter-
net Architectures (FIAs) like NIRA [48] and SCION [51, 12], or
Pathlets [28]. In practice, our abstract notion of a node could corre-
spond to different entities depending on the architecture on which
HORNET is built. For instance, in NIRA and SCION, a node cor-
responds to an Autonomous System (AS); in Pathlets, a node maps
to a vnode.
Path and certiﬁcate retrieval. A path is the combination of rout-
ing state of all nodes between the source and the intended desti-
nation. We assume the underlying network architecture provides a
mechanism for a source to obtain such a path to a given destina-
tion. Additionally, we assume that the same mechanism allows the
source to fetch the public keys and certiﬁcates1 of on-path nodes.
Note that the mechanism should be privacy-preserving: the source
should not reveal its network location or intent to communicate
with a destination by retrieving paths, public keys, and certiﬁcates.
In Section 7.1, we further discuss how to obtain required informa-
1Depending on the underlying PKI scheme, the source might need
to fetch a chain of certiﬁcates leading to a trust anchor to verify
each node’s public key.
tion anonymously in selected FIAs. While a general solution rep-
resents an important avenue for future work, it remains outside of
our present scope.
Public key veriﬁcation. We assume that end hosts and on-path
nodes have public keys accessible and veriﬁable by all entities. End
hosts can retrieve the public keys of other end hosts through an
out-of-band channel (e.g., websites) and verify them following a
scheme like HIP [39], in which the end hosts can publish hashes
of their public keys as their service names. Public keys of on-path
nodes are managed through a public-key infrastructure (PKI). For
example, the source node can leverage Resource Public Key Infras-
tructure (RPKI) [16] to verify the public keys of on-path nodes.
2.2 Threat Model
We consider an adversary attempting to conduct mass surveil-
lance. Speciﬁcally, the adversary collects and maintains a list of
“selectors” (e.g., targets’ network locations, or higher-level pro-
tocol identiﬁers), which help the adversary trawl intercepted traf-
ﬁc and extract parts of it for more extensive targeted analysis [7].
An anonymity system should prevent an adversary from leveraging
bulk communication access to select trafﬁc that belongs to the tar-
gets. Thus an adversary has to collect and analyze all trafﬁc and
cannot reliably select trafﬁc speciﬁc to targets unless it has access
to the physical links adjacent to the targets.
We consider an adversary that is able to compromise a fraction
of nodes on the path between a source and a destination. For sender
anonymity, the adversary can also compromise the destination. For
sender-receiver anonymity, the adversary can compromise at most
one of the two end hosts. By compromising a node, the adversary
learns all keys and settings, observes all trafﬁc that traverses the
compromised node, and is able to control how the nodes behave
including redirecting trafﬁc, fabricating, replaying, and modifying
packets.
However, we do not aim to prevent targeted de-anonymization
attacks where an adversary invests a signiﬁcant amount of resources
on a single or a small set of victims. Like other low-latency schemes,
we cannot solve targeted conﬁrmation attacks based on the analy-
sis of ﬂow dynamics [45, 34, 40]. Defending against such attacks
using dynamic link padding [47] would be no more difﬁcult than in
onion routing, although equally expensive. We defer the discussion
and analysis of such measures to future work.
2.3 Desired Properties
HORNET is designed to achieve the following anonymity and
security properties:
1. Path information integrity and secrecy. An adversary can-
not modify a packet header to alter a network path without
detection. The adversary should not learn forwarding infor-
mation of uncompromised nodes, node’s positions, or the to-
tal number of hops on a path.
2. No packet correlation. An adversary who can eavesdrop
on multiple links in the network cannot correlate packets on
those links by observing the bit patterns in the headers or
payloads. This should hold regardless of whether the ob-
served trafﬁc corresponds to the same packet (at different
points on the network), or corresponds to different packets
from a single session.
3. No session linkage. An adversary cannot link packets from
different sessions, even between the same source and desti-
nation.
4. Payload secrecy and end-to-end integrity. Without com-
promising end hosts, an adversary cannot learn any informa-
tion from the data payload except for its length and timing
among sequences of packets.
14423. HORNET OVERVIEW
The basic design objectives for HORNET are scalability and efﬁ-
ciency. To enable Internet-scale anonymous communication, HOR-
NET intermediate nodes must avoid keeping per-session state (e.g.,
cryptographic keys and routing information). Instead, session state
is ofﬂoaded to end hosts, who then embed this state into packets
such that each intermediate node can extract its own state as part of
the packet forwarding process.
Ofﬂoading the per-session state presents two challenges. First,
nodes need to prevent their ofﬂoaded state from leaking informa-
tion (e.g., the session’s cryptographic keys). To address this, each
HORNET node maintains a local secret to encrypt the ofﬂoaded
per-session state. We call this encrypted state a Forwarding Seg-
ment (FS). The FS allows its creating node to dynamically retrieve
the embedded information (i.e., next hop, shared key, session expi-
ration time), while hiding this information from unauthorized third
parties.
The second challenge in ofﬂoading the per-session state is to
combine this state (i.e., the FSes) in a packet in such a way that each
node is able to retrieve its own FS, but no information is leaked
about the network location of the end hosts, the path length, or a
speciﬁc node’s position on the path. Learning any of this informa-
tion could assist in de-anonymization attacks (see Section 5.5). To
address this challenge, the source constructs an anonymous header
(AHDR) by combining multiple FSes, and prepends this header to
each packet in the session. An AHDR grants each node on the
path access to the FS it created, without divulging any informa-
tion about the path except for a node’s previous and next nodes
(see Section 4.4.1).
For efﬁcient packet processing, each HORNET node performs
one Difﬁe-Hellman (DH) key exchange operation once per session
during setup. For all data packets within the session, HORNET
nodes use only symmetric cryptography to retrieve their state, pro-
cess the AHDR and onion-decrypt (or encrypt) the payload. To re-
duce setup delay, HORNET uses only two setup packets within a
single round trip between the source and the destination. Therefore,
session setup only incurs O(n) propagation delay in comparison to
O(n2) by the telescopic setup method used in Tor (where n is the
number of anonymity nodes traversed on the path). While for Tor
the default value of n is 3, for HORNET n might be as large as
14 (4.1 in the average case, and less or equal to 7 in over 99% of
cases [6]), which emphasizes the need to optimize setup propaga-
tion delay.
3.1 Sender Anonymity
Anonymous sessions between a source and a destination require
the source to establish state between itself and every node on the
path. The state will be carried in subsequent data packets, enabling
intermediate nodes to retrieve their corresponding state and forward
the packet to the next hop. We now describe how the state is col-
lected without compromising the sender’s anonymity, and how this
state is used to forward data packets.
Setup phase. To establish an anonymous session between a source
S and a public destination D, S uses a single round of Sphinx [22],
a provably secure mix protocol (an overview of Sphinx is given
in Section 4.3.1). This round consists of two Sphinx packets (one
for the forward path and one for the backward path) each of which
will anonymously establish shared symmetric keys between S and
every node on that path. For HORNET, we extend the Sphinx pro-
tocol to additionally anonymously collect the forwarding segments
(FSes) for each node. Our modiﬁed Sphinx protocol protects the
secrecy and integrity of these FSes, and does not reveal topology