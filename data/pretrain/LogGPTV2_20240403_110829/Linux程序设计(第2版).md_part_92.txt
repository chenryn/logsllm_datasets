1oearch 7option? list pattern
我们可以用lscarch检索出列表里匹配上一个模板的元素来。它的选项包括-exact、-glob（缺
省值）和-regexp，它们的作用是确定匹配操作的类型。Tel匹配操作的详细情况请参考前面字符
串部分的有关内容。
lsearch命令用给定的模板pattern在给定的列表list里检索与之匹配的元素。第一个匹配上的
元素的下标就是它的返回值，如果没有找到这样的元素，就返回“-1”。如下所示：
 lsearch (apple pear banana orange) b*
12.lsort命令
lsort 7option7 1ist
加入jaVa编程群：524621833
---
## Page 487
第15章工具命令语言Tcl
469
我们可以通过lsort命令按一些规则对一个列表进行排序。缺省的动作是对列表中的元素按
ASCII字母序列的升序进行排序，也就是按字母表的顺序进行排序，加上标点符号。用计算机的
眼光看，这就是字符的字节值按数字从小到大的顺序进行排序。如下所示：
3 lsort (apple pear banana orange)
apple banana orange pear
Isort命令用来改变排序方法的选项见表15-7：
表15-7
Ison命令的选项
说明
•asci1
普通字符比较，缺省情况
-integer
元素被转换为整数再做比较
-rea1
元素被转换为浮点数字再做比较
-increasing
按升序进行排序
-decreasing
按降序进行排序
-conmand
把command用做持序函数。它必须是一个以两个列表元素做参数的过程、并且要根据第
一个元素是否小于、等于或大于第二个元素相应地返回一个负整数、零或正整数
13.foreach命令
foreach varnane list body
foreach命令使我们能够分别求值或使用列表中的每一个元素。这个命令会托列表list中的每
一个元素依次赋值给变量varname并执行body。请看下面的例子：
foreech1(12 3 bi11 bob joe)(
puts 1 l= $i
1is 1
iis bi11
iisjoe
1 as bob
这是foreach命令的一个简化形式：在更具普遍意义的情况里，foreach命令可以使用一个变
量名列表和好几个列表。在这些情况下，列表们会被同时遍历。每经过一次循环，变量就将被
赋值为对应列表里的下一个元素。如下所示：
foreach (a b) (1 2 3 4 5 6) (puts *a is $a, b 1s $b*)
e is 1. b is 2
a is 3. b is 4
$foreach a(1 2 3) b (4 5 6) (puts *s 1e $s, b is $b*)
a is 5. b is 6
a is 1, b is 4
a is 2. b is 5
a is 3, b is 6
foreach程序体里的break或continue命令与它们在for命令里的作用是一样的。如果在程序体
里遇到了一个break命令：循环就将立刻终止。程序体里continue命令将跳过循环结构中当前循环
的剩余语句。
加入jaVa编程群：524621833
---
## Page 488
470
Linux程序设计
foreach环和“arraynames”命令合用在一起就能够有效地对一个数组进行遍历：
set myarray（orange）1
set myarray（apple）2
wet myarray (banana) 3
foreach fruit [array nz
fruit is orange
myarray)（puts*fruit la $fruit")
fruit ik apple
fruit is banana
15.1.11过程
Tel语言中的过程与其他语言中的过程是比较相似的、但又有一些有趣的差异。过程是涵过
proc命令在Tcl解释器里得到定义的。在调用各个过程之前，必须先用proc命令把它们都定义好。
proc name args body
proc命令定义了一个名为name的过程。它把body（--系列可执行命令）保存起来，等到调
用该过程的时候才运行它。执行时传递给过程的参数被替换为变量列表args。
过程在程序体body中的最后一条命令执行完毕时退出。过程的值就是最后执行的那个命令
的值。我们可以用returmn命令在过程尚未全部执行完毕之前中途退出。
return ?option? 7string?
可选值string将做为这条return命令身处其中的那个过程的返回值。如果省略了string，就会
返回一个空字符串。我们可以用return命令的有关选项设定一个过程在需要返回--个错误时将要
采取的操作动作。详细资料请参考Tel文档。
动手试试：过程
下面是一个简单的计算阶乘的过程。
proc fact （n)(
whi1e($n>1}{
set result 1
set renult[expr $rewult*$n]
set n[expr $n-1]
return $result
0
fact 7
5040
操作注释：
过程fact通过循环来求解出阶乘值。注意这个过程使用了--个局部变量result。因为在Tel语言
里第一次使用变量之前并不需要预先声明过它们，所以在Tcl的过程里遇到的一切新变量都将被
看做是局部变量，也就是说，在某个Tel过程里创建的新变量在这个过程以外的地方是不存在的
upvar命令
upvar ?Ievel? oldnane newname
加入jaVa编程群：524621833
---
## Page 489
第15章工具命今语言Tcl
471
要想获得某个全局变量的访问权，我们必须使用upvar命令。它允许访问调用堆栈里更高层
的变址，就它最简单的用法来说，它允许一个过程使用在其上级过程（一般就是调用它的那个
过程）中声明的某个变量或者允许它使用一个全局变量。
upvar命令将在该过程里创建出一个新的变量newname。对这个新变量的访问和赋值等价于
使用存在于该过程之外的那个otdname变量。我们可以通过可选的level参数来精确地指定
oldname变量是来自于哪个堆栈结构、
这个命令最常见的用途就是提供全局变量的访问权，如下所示：
upvar variable var1able
下面是一个upvar命令的正确用法示例：
set remult 1
proc badset2 (){
set result 2
badset2
set result
）（）zpxd
upvar result result
set result 2
goodset2
set result
15.1.12输入和输出
Tcl为输人和输出操作准备了一个复杂的系统。在这一小节里，我们将对其中的一些基本功
能进行讨论。进一步的详细资料请参考Tcl的文档，
1.open命令
open filenane ?access? ?permissions?
open命令的作用是建立到一个文件或一个命令管道的连接。它同时具备C语言中fopen和
popen函数的功能。
open命令返回的是一个通道标识符（文件流的Tcl等价物），它可以被用在gets、puts和close
等其他输人输出命令的调用中。标准文件流将以stdin、stdout和stderr的形式对Tcl程序自动打开，
Tcl程序可以直接使用它们。
如果还给出了access参数的话，它将决定文件的打开方式。这是一个字符串值，与C语言中
fopen函数使用的文件打开模式的取值是完全一样的。见表15-8：
表15-8
access模式
说明
以读方式打开文件filename。该文件必须存在。这是缺省的打开模式
以读写方式打[开文件ilename，该文件必须存在
加入jaVa编程群：524621833
---
## Page 490
472
Linux程序设计
（续）
access模式
说明
W
以写方式打开文件filename。该文件将被创建或截短
W+
以读写方式打开文件ilename。该文件将被创建或截短
a
以写方式打开文件ilenae。新数据将被追加在该文件的尾部
& 
以读写方式打开文件6lename。文件的初始读写位置将被设置为文件尾位置
此外，我们还可以通过一个POSIX标志的TeI列表来设置文件的打开模式，这些POSIX标志
包括RDONLY、WRONLY、RDWR、APPEND、CREAT、EXCL、NOCTTY、NONBLOCK、
TRUNC等。
如果还给出了permisions参数的话，它是一个用来对open命令所创建的文件的初始访间权限
进行设置的整数值（缺省值是八进制的666）。
如果ilename参数的第一个字符是一个管道符号（1），它就会被看做是一个命令管道。此时，
“”符号后面的UNIX命令将被执行，而它的输出结果将能够通过由这条open命令返回的通道标
识符来读取。
2.close命令
close channelID
close命令的作用是关闭由channelID指定的通道，这个channclID必须是从以前的某个open调
用（如果是在Tcl7.5或以后的版本里，还包括socket命令）那里获得的。通道相当于C语言里的
文件描述符。
3.read命令
read 7-nonevline? channel 7bytes?
read命令的作用是读取某个通道标识符上全部（或者，如果给出了byte值，就是它给定的字
节数）可读的输人。
如果设置了-nonewline选项，那么如果输人中的最后一个字符是换行符，read命令就不会把
它读进来。read命令会把行尾的控制字符序列转换为换行符。
4.gets命令
get channel 7varname?
gets命令的作用是读取输人的第一行数据，如果还给出了varname参数，就把读来的数据保
存到这个变量里去。同一通道上后续的gets操作会依次读取下一行数据，当遇到文件尾字符时就
停止操作。gets的返回值是实际读人varname里去的字符个数，出错时将返回“-1”；如果没有
给出varname，就返回字符串本身。如下所示：
3gets Smyfile fred
file3
clone $myfile
28
aet fred
加入jaVa编程群：524621833
---
## Page 491
第15章工具命今语言Tcl
473
5.puts命令
puts ?-nonewline? ?channel? str:cg
puts命令把输出写到一个通道去（缺省写往标准输出）、如果设有给出-nonewline选项，向通
道写完string后还要再跟上一个换行符。换行符会自动转换为代表文本行尾的控制字符序列
注意Tcl有内部缓冲功能，所以puts命令输出的东西可能不会立刻出现在一个输出文件里。
我们可以用flush命令强制性地把数据输出到文件里去。下面是一个简单的例子，如果读者还想
了解更多的东西，请参考Tcl的文档
open*fred.txt”
puts file3 *Hello World*
file3
3open *fred.txt"r
tclose file3
file3
gets file3
Hello Wor1d
close file3
6.format命令
format formatstring 7arg arg arg ...
Tel语言中的format命令相当于C语言库函数sprintf，它们之间使用着许多相同的格式转换符。
事实上，在format命令的实现中确实用到了sprintf函数。
format命令的作用是输出一个格式经过编排的字符串。格式转换符方面的详细资料请参考Tel
的使用手册页（用命令“man forma”命令）或与printf和sprintf函数有关的C语言函数库文档。
7.scan命令
sean string formatstring var 7var var ...?
Tcl语言中的scan命令相当于C语言库函数sscanf。指定为参数的那些变量将被设置为根据
formatstring中给出的格式转换符从字符串string里提取出来的值。类似于刚才介绍的format命令，
scan命令的实现与ANSIC语言中的sscanf非常相似，格式转换符方面的详细资料也请读者参考有
关的C语言函数库文档。
8.file命令
flle option name ?arg arg ...7
Tcl语言中的文件处理操作是通过file命令实现的。改变和查看文件的属性需要用到这个命令
的各种选项。file命令使用的选项包括以下这些：
(1)atime和mtime选项
file atine name
file mtine nane
它们分别返回一个描述文件name的最后一次访问/修改时间的字符串。
(2）dirname选项
file dirnane name
它返回文件name的子目录路径部分，即最后一个“”字符前所有的字符。如下所示：
gfile dirname -/bin/fred.txt"
/bin
加入jaVa编程群：524621833
---
## Page 492
Linux程序设计
(3）exists和executable选项
file executable name
file exists nane