TaskScheduler
{DE7B24EA-73C8-4A09-
985D-5BDADCFA9017}
Supplies information related to 
scheduled tasks
Microsoft-Windows-
WebIO
{50B3E73C-9370-461D-
BB9F-26F32D68887D}
Provides visibility into web requests 
being made by users of the system
Microsoft-Windows-
WMI-Activity
{1418EF04-B0B4-4623-
BF7E-D74AB47BBDAA}
Supplies telemetry related to the 
operation of WMI, including event 
subscriptions
ETW providers are securable objects, meaning a security descriptor 
can be applied to them. A security descriptor provides a way for Windows to 
restrict access to the object through a discretionary access control list or log 
access attempts via a system access control list. Listing 8-1 shows the security 
descriptor applied to the Microsoft-Windows-Services provider.
PS > $SDs = Get-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\WMI\Security
PS > $sddl = ([wmiclass]"Win32_SecurityDescriptorHelper").
>> BinarySDToSDDL($SDs.’0063715b-eeda-4007-9429-ad526f62696e’).
>> SDDL
PS > ConvertFrom-SddlString -Sddl $sddl
Owner  
 : BUILTIN\Administrators
Group  
 : BUILTIN\Administrators
DiscretionaryAcl : {NT AUTHORITY\SYSTEM: AccessAllowed,
  NT AUTHORITY\LOCAL SERVICE: AccessAllowed,
  BUILTIN\Administrators: AccessAllowed}
SystemAcl  
 : {}
RawDescriptor  : System.Security.AccessControl.CommonSecurityDescriptor
Listing 8-1: Evaluating the security descriptor applied to a provider
Table 8-1: Default ETW Providers Relevant to Security Monitoring (continued)
Evading EDR (Early Access) © 2023 by Matt Hand
146   Chapter 8
This command parses the binary security descriptor from the 
provider’s registry configuration using its GUID. It then uses the 
Win32_SecurityDescriptorHelper WMI class to convert the byte array in the 
registry to a security descriptor definition language string. This string 
is then passed to the PowerShell cmdlet ConvertFrom-SddlString to return 
the human-readable details of the security descriptor. By default, this 
security descriptor only allows access to NT AUTHORITY\SYSTEM, NT 
AUTHORITY\LOCAL SERVICE, and members of the local Administrators 
group. This means that controller code must be running as admin to 
directly interact with providers.
Emitting Events
Currently, four main technologies allow developers to emit events from 
their provider applications:
Managed Object Format (MOF)
MOF is the language used to define events so that consumers know how 
to ingest and process them. To register and write events using MOF, 
providers use the sechost!RegisterTraceGuids() and advapi!TraceEvent() 
functions, respectively.
Windows Software Trace Preprocessor (WPP)
Like the Windows Event Log, WPP is a system that lets the provider log 
an event ID and event data, initially in binary but later formatted to be 
human readable. WPP supports more complex data types than MOF, 
including timestamps and GUIDs, and acts as a supplement to  
MOF-based providers. Like MOF-based providers, WPP providers use 
the sechost!RegisterTraceGuids() and advapi!TraceEvent() functions to reg-
ister and write events. WPP providers can also use the WPP_INIT_TRACING 
macro to register the provider GUID.
Manifests
Manifests are XML files containing the elements that define the 
provider, including details about the format of events and the pro-
vider itself. These manifests are embedded in the provider binary at 
compilation time and registered with the system. Providers that use 
manifests rely on the advapi!EventRegister() function to register events 
and advapi!EventWrite() to write them. Today, this seems to be the most 
common way to register providers, especially those that ship with 
Windows.
TraceLogging
Introduced in Windows 10, TraceLogging is the newest technology for 
providing events. Unlike the other technologies, TraceLogging allows 
for self-describing events, meaning that no class or manifest needs to 
be registered with the system for the consumer to know how to pro-
cess them. The consumer uses the Trace Data Helper (TDH) APIs to 
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   147
decode and work with events. These providers use advapi!TraceLogging 
Register() and advapi!TraceLoggingWrite() to register and write events.
Regardless of which method a developer chooses, the result is the 
same: events being emitted by their application for consumption by other 
applications.
Locating Event Sources
To understand why a provider is emitting certain events, it’s often helpful to 
look at the provider itself. Unfortunately, Windows doesn’t provide an easy 
way to translate a provider’s name or GUID into an image on disk. You can 
sometimes collect this information from the event’s metadata, but in many 
cases, such as when the event source is a DLL or a driver, discovering it 
requires more effort. In these situations, try considering the following attri-
butes of ETW providers:
• 
The provider’s PE file must reference its GUID, most commonly in the 
.rdata section, which holds read-only initialized data.
• 
The provider must be an executable code file, typically a .exe, .dll, or .sys.
• 
The provider must call a registration API (specifically, 
advapi!EventRegister() or ntdll!EtwEventRegister() for user-mode applica-
tions and ntoskrnl!EtwRegister() for kernel-mode components).
• 
If using a manifest registered with the system, the provider image will 
be in the ResourceFileName value in the registry key HKLM\SOFTWARE\
Microsoft\Windows\CurrentVersion\WINEVT\Publishers\.This file will contain a WEVT_TEMPLATE resource, which is the 
binary representation of the manifest.
You could conduct a scan of files on the operating system and 
return those that satisfy these requirements. The open source 
FindETWProviderImage tool available on GitHub makes this process 
easy. Listing 8-2 uses it to locate images that reference the GUID of the 
Microsoft-Windows-TaskScheduler provider.
PS > .\FindETWProviderImage.exe "Microsoft-Windows-TaskScheduler" "C:\Windows\System32\"
Translated Microsoft-Windows-TaskScheduler to {de7b24ea-73c8-4a09-985d-5bdadcfa9017}
Found provider in the registry: C:\WINDOWS\system32\schedsvc.dll
Searching 5486 files for {de7b24ea-73c8-4a09-985d-5bdadcfa9017} ...
Target File: C:\Windows\System32\aitstatic.exe
Registration Function Imported: True
Found 1 reference:
 1) Offset: 0x2d8330 RVA: 0x2d8330 (.data)
Target File: C:\Windows\System32\schedsvc.dll
Registration Function Imported: True
Found 2 references:
 1) Offset: 0x6cb78 RVA: 0x6d778 (.rdata)
 2) Offset: 0xab910 RVA: 0xaf110 (.pdata)
Evading EDR (Early Access) © 2023 by Matt Hand
148   Chapter 8
Target File: C:\Windows\System32\taskcomp.dll
Registration Function Imported: False
Found 1 reference:
 1) Offset: 0x39630 RVA: 0x3aa30 (.rdata)
Target File: C:\Windows\System32\ubpm.dll
Registration Function Imported: True
Found 1 reference:
 1) Offset: 0x38288 RVA: 0x39a88 (.rdata)
Total References: 5
Time Elapsed: 1.168 seconds
Listing 8-2: Using FindETWProviderImage to locate provider binaries
If you consider the output, you’ll see that this approach has some 
gaps. For example, the tool returned the true provider of the events, 
schedsvc.dll, but also three other images. These false positives might occur 
because images consume events from the target provider and so contain 
the provider’s GUID, or because they produce their own events and so 
import one of the registration APIs. This method might also produce 
false negatives; for example, when the source of an event is ntoskrnl.exe, 
the image won’t be found in the registry or import either of the registra-
tion functions.
To confirm the identity of the provider, you must investigate an image 
further. You can do this using a relatively simple methodology. In a dis-
assembler, navigate to the offset or relative virtual address reported by 
FindETWProviderImage and look for any references to the GUID coming 
from a function that calls a registration API. You should see the address of 
the GUID being passed to the registration function in the RCX register, as 
shown in Listing 8-3.
schedsvc!JobsService::Initialize+0xcc:
00007ffe`74096f5c 488935950a0800 mov 
qword ptr [schedsvc!g_pEventManager],rsi
00007ffe`74096f63 4c8bce  
mov 
r9,rsi
00007ffe`74096f66 4533c0  
xor 
r8d,r8d
00007ffe`74096f69 33d2  
xor 
edx,edx
00007ffe`74096f6b 488d0d06680400 lea 
rcx,[schedsvc!TASKSCHED] 1
00007ffe`74096f72 48ff150f570400 call qword ptr [schedsvc!_imp_EtwEventRegister 2
00007ffe`74096f79 0f1f440000  
nop 
dword ptr [rax+rax]
00007ffe`74096f7e 8bf8  
mov 
edi,eax
00007ffe`74096f80 48391e  
cmp 
qword ptr [rsi],rbx
00007ffe`74096f83 0f84293f0100  
je  
schedsvc!JobsService::Initialize+0x14022
Listing 8-3: Disassembly of the provider registration function inside schedsvc.dll
In this disassembly, there are two instructions of interest to us. The 
first is the address of the provider GUID being loaded into RCX 1. This 
is immediately followed by a call to the imported ntdll!EtwEventRegister() 
function 2 to register the provider with the operating system.
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   149
Figuring Out Why an Event Was Emitted
At this point, you’ve identified the provider. From here, many detection 
engineers begin looking into what conditions triggered the provider to 
emit the event. The details of this process are outside the scope of this 
book, as they can differ substantially based on the provider, although 
we’ll cover the topic in greater depth in Chapter 11. Typically, however, the 
 workflow looks as follows.
In a disassembler, mark the REGHANDLE returned from the event 
 registration API, then look for references to this REGHANDLE from a 
 function that writes ETW events, such as ntoskrnl!EtwWrite(). Step 
through the function, looking for the source of the UserData parameter 
passed to it. Follow execution from this source to the event-writing func-
tion, checking for conditional branches that would prevent the event 
from being emitted. Repeat these steps for each unique reference to the 
global REGHANDLE.
Controllers
Controllers are the components that define and control trace sessions, 
which record events written by providers and flush them to the event 
consumers. The controller’s job includes starting and stopping sessions, 
enabling or disabling providers associated with a session, and managing 
the size of the event buffer pool, among other things. A single applica-
tion might contain both controller and consumer code; alternatively, the 
controller can be a separate application entirely, as in the case of Xperf 
and logman, two utilities that facilitate collecting and processing ETW 
events.
Controllers create trace sessions using the sechost!StartTrace() API and 
configure them using sechost!ControlTrace() and advapi!EnableTraceEx() or 
sechost!EnableTraceEx2(). On Windows XP and later, controllers can start 
and manage a maximum of 64 simultaneous trace sessions. To view these 
trace sessions, use logman, as shown in Listing 8-4.
PS > logman.exe query -ets
Data Collector Set  
Type  
Status
AppModel  
 Trace 
Running
BioEnrollment  
 Trace 
Running
Diagtrack-Listener  
 Trace 
Running
FaceCredProv  
 Trace 
Running
FaceTel  
 Trace 
Running
LwtNetLog  
 Trace 
Running
Microsoft-Windows-Rdp-Graphics-RdpIdd-Trace Trace  
Running
NetCore  
 Trace 
Running
NtfsLog  
 Trace 
Running
RadioMgr  
 Trace 
Running
WiFiDriverIHVSession  
 Trace 
Running
WiFiSession  
 Trace 
Running
Evading EDR (Early Access) © 2023 by Matt Hand
150   Chapter 8
UserNotPresentTraceSession  
 Trace 
Running
NOCAT  
 Trace 
Running
Admin_PS_Provider 
 Trace 
Running
WindowsUpdate_trace_log  
 Trace 
Running
MpWppTracing-20220120-151932-00000003-ffffffff Trace Running
SHS-01202022-151937-7-7f  
 Trace 
Running
SgrmEtwSession  
 Trace 
Running
Listing 8-4: Enumerating trace sessions with logman.exe
Each name under the Data Collector Set column represents a unique 
controller with its own subordinate trace sessions. The controllers shown 
in Listing 8-4 are built into Windows, as the operating system also makes 
heavy use of ETW for activity monitoring.
Controllers can also query existing traces to get information.  
Listing 8-5 shows this in action.
PS > logman.exe query 'EventLog-System' -ets
Name:  
EventLog-System
Status:  
Running
Root Path:  
%systemdrive%\PerfLogs\Admin
Segment:  
Off
Schedules:  
On
Segment Max Size: 
100 MB
Name:  
EventLog-System\EventLog-System
Type:  
Trace
Append:  
Off
Circular:  
Off
Overwrite:  
Off
Buffer Size:  
64
Buffers Lost:  
0
Buffers Written:  
155
Buffer Flush Timer:  
1
Clock Type:  
System
1 File Mode:  
Real-time
Provider:
2 Name:  
Microsoft-Windows-FunctionDiscoveryHost
Provider Guid:  
{538CBBAD-4877-4EB2-B26E-7CAEE8F0F8CB}
Level:  
255
KeywordsAll:  
0x0
3 KeywordsAny:  
0x8000000000000000 (System)
Properties:  
65
Filter Type:  
0
Provider:
Name:  
Microsoft-Windows-Subsys-SMSS
Provider Guid:  
{43E63DA5-41D1-4FBF-ADED-1BBED98FDD1D}
Level:  