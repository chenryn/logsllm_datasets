#####  公共贡献   （    public contributions    ） 
对公共（与私有相对）仓库的贡献。
#####  公共仓库   （    public repository    ） 
公共仓库可供任何人查看，包括不是 GitHub 用户的人员。
#####  拉取   （    pull    ） 
拉取是指提取与合并更改。例如，如果有人编辑了你操作的远程文件，你要将这些更改拉取到本地副本，以使其保持最新。另请参阅“提取”。
#####  拉取权限   （    pull access    ） 
读取权限的同义词。
#####  拉取请求   （    pull request    ） 
拉取请求（PR）是提议更改用户提交的仓库，然后被仓库协作者接受或拒绝。像议题一样，每个拉取请求都有自己的论坛。
#####  拉取请求审查   （    pull request review    ） 
拉取请求中协作者批准更改或在拉取请求合并之前申请进一步更改的评论。
#####  推送   （    push    ） 
推送是指将提交的更改发送到 GitHub.com 上的远程仓库。例如，如果你在本地更改内容，便可推送这些更改，让其他人访问。
#####  推送分支   （    push a branch    ） 
成功将分支推送到远程仓库后，使用本地分支中的更改来更新远程分支。在你“推送分支”时，Git 将会到远程仓库中搜索分支的头部引用，并验证它是分支本地头部引用的直系原型。在验证后，Git 将拉取所有对象（从本地头部引用可获取，而远程仓库中缺失）到远程对象数据库，然后更新远程头部引用。如果远程头部不是本地头部的原型，推送将会失败。
#####  推送权限   （    push access    ） 
写入权限的同义词。
#####  读取权限   （    read access    ） 
对仓库的权限级别，允许用户拉取或者读取仓库中的信息。所有公共仓库向所有 GitHub 用户授予读取权限。拉取权限的同义词。
#####  自述文件   （    README    ） 
包含仓库中文件相关信息的文本文件，通常是仓库访问者看到的第一个文件。自述文件连同仓库许可证、参与指南以及行为准则，帮助你交流要求和管理项目的参与。
#####  变基   （    rebase    ） 
将一系列更改从一个分支重新应用到不同的基本分支，并将该分支的头部重置为结果。
#####  发布   （    release    ） 
GitHub 封装软件并向用户提供软件的方式。
#####  远程   （    remote    ） 
这是托管于服务器（很可能是 GitHub.com）上的仓库或分支版本。远程版本可以连接到本地克隆，以使更改保持同步。
#####  远程仓库   （    remote repository    ） 
用于跟踪同一个项目但储存在其他位置的仓库。
#####  远程 URL   （    remote URL    ） 
存储代码的位置：GitHub、其他用户分支甚至不同服务器 上的仓库。
#####  副本   （    replica    ） 
为主要 GitHub Enterprise 实例提供冗余的 GitHub Enterprise 实例。
#####  仓库   （    repository    ） 
仓库是 GitHub 最基本的元素，最容易被想象成项目的文件夹。一个仓库包含所有项目文件（包括文档），并且存储每个文件的修订历史记录。仓库可有多个协作者，也可以是公共仓库或私有仓库。
#####  仓库维护员   （    repository maintainer    ） 
管理仓库的人员。此人可帮助对议题分类，以及使用标签和其他功能管理仓库的工作，也可负责更新自述文件和参与文件。
#####  解决   （    resolve    ） 
手动修复自动合并失败的操作。
#####  还原   （    revert    ） 
恢复 GitHub 上的拉取请求时，新拉取请求会自动打开，其中有一个提交用于从原始合并的拉取请求恢复合并提交。在 Git 中，你可以使用 `git revert` 恢复提交。
#####  审查   （    review    ） 
审查允许对仓库具有访问权限的其他人评论拉取请求中提议的更改、审批更改或在拉取请求合并之前请求进一步更改。
#####  服务挂钩   （    service hook    ） 
也称为“Web 挂钩”。Web 挂钩是一种通知方式，只要仓库或组织上发生特定操作，就会发送通知到外部 web 服务器。
#####  压扁   （    squash    ） 
将多个提交合并为一个。也是 Git 命令。
#####  暂存实例   （    staging instance    ） 
在修改应用到实际 GitHub Enterprise 实例之前测试修改的一种方式。
#####  状态   （    status    ） 
拉取请求中的可视表现形式，表示你的提交符合你参与的仓库所设定的条件。
#####  星标   （    star    ） 
仓库的书签或赞赏表示。星标是项目受欢迎程度排名的手动方式。
#####  主题分支   （    topic branch    ） 
开发者用来识别开发概念行的常规 Git 分支。由于分支很容易并且便宜，因此往往适合拥有多个小分支，每个小分支包含定义明确的概念，或者渐进但相关的更改。也可称为“特征分支”。
#####  上游   （    upstream    ） 
在谈论分支或分叉时，原始仓库的主要分支通常被称为“上游”，因为它是其他更改的主要来源。你操作的分支/分叉则称为“下游”。也称为“源”。
#####  上游分支   （    upstream branch    ） 
合并到所述分支的默认分支（或所述分支变基到的分支）。它通过 `branch..remote` 和 `branch..merge` 配置。如果 A 的上游分支是源/B，有时我们会说“A 在跟踪源/B”。
#####  查看   （    watch    ） 
你可以关注仓库或议题，以便在议题或拉取请求有更新时接收通知。
#####  web 挂钩   （    webhooks    ） 
Web 挂钩可让你构建或设置订阅 GitHub.com 上特定事件的 GitHub 应用程序。Web 挂钩提供一种通知方式，只要仓库或组织中发生特定操作，就会发送通知到外部 web 服务器。也称为“服务挂钩”。
#####  写入权限   （    write access    ） 
对仓库的权限级别，可让用户推送或写入更改到仓库。