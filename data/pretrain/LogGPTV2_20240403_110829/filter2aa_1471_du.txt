### Data Compression and Sparse Files in NTFS

#### NTFS Compression
NTFS supports compression on a per-file, per-directory, or per-volume basis using the LZNT1 algorithm, a variant of the LZ77 compression algorithm. It is important to note that NTFS compression is applied only to user data, not to file system metadata.

In Windows 8.1 and later, files can also be compressed using a newer suite of algorithms, including LZX (which provides the most compact compression) and XPRESS (with block sizes of 4K, 8K, or 16K, in order of speed). This type of compression can be managed through commands such as the `compact` shell command and File Provider APIs, leveraging the Windows Overlay Filter (WOF) file system filter driver (`Wof.sys`). WOF uses NTFS alternate data streams and sparse files, but it is not part of the NTFS driver itself. For more information on WOF, refer to the following link: [Microsoft Developer Blog](https://devblogs.microsoft.com/oldnewthing/20190618-00/?p=102597).

To determine if a volume is compressed, you can use the `GetVolumeInformation` function. To retrieve the actual compressed size of a file, use the `GetCompressedFileSize` function. To examine or change the compression settings for a file or directory, use the `DeviceIoControl` function with the `FSCTL_GET_COMPRESSION` and `FSCTL_SET_COMPRESSION` control codes. Setting a file's compression state compresses or decompresses the file immediately, while setting a directory's or volume's compression state sets a default compression state for newly created files and subdirectories within that directory or volume. However, if you set directory compression using the directory's property page in Explorer, the entire directory tree will be compressed immediately.

#### Compressing Sparse Data
Sparse data often contains a large amount of zero values relative to its size, such as a sparse matrix. NTFS uses Virtual Cluster Numbers (VCNs) to enumerate the clusters of a file, each VCN mapping to a Logical Cluster Number (LCN) that identifies the disk location of the cluster.

When a user selects a file on an NTFS volume for compression, one technique is to remove long strings of zeros from the file. If the file's data is sparse, it typically shrinks to occupy a fraction of the disk space it would otherwise require. On subsequent writes to the file, NTFS allocates space only for runs that contain nonzero data.

For example, consider a noncompressed file stored in three runs, each 4 clusters long, totaling 12 clusters. The MFT record for this file records one mapping for each run, rather than one for each cluster. When the file is compressed, certain ranges of the file's VCNs (e.g., 16–31 and 64–127) have no disk allocations. The MFT record omits blocks of VCNs that contain zeros, thus saving physical storage.

When a program reads data from a compressed file, NTFS checks the MFT record to determine if a VCN-to-LCN mapping covers the location being read. If the program is reading from an unallocated "hole" in the file, NTFS returns zeros without accessing the disk. If a program writes nonzero data to a "hole," NTFS quietly allocates disk space and writes the data.

#### Compressing Nonsparse Data
Most files are not sparse, but they can still be compressed using a compression algorithm. In NTFS, users can specify compression for individual files or for all files in a directory. New files created in a directory marked for compression are automatically compressed, while existing files must be compressed individually.

When compressing a file, NTFS divides the file's unprocessed data into 16-cluster units (e.g., 128 KB for an 8 KB cluster). For each unit, NTFS determines whether compressing the unit will save at least one cluster of storage. If not, NTFS writes the data without compressing it. If the data in a 16-cluster unit compresses to 15 or fewer clusters, NTFS allocates only the necessary number of clusters and writes the compressed data to disk.

Even with some noncompressed runs, compressing a file can save significant disk space. NTFS ensures that each run begins on a virtual 16-cluster boundary, and it reads and writes at least one compression unit at a time. When writing compressed data, NTFS tries to store compression units in physically contiguous locations to facilitate single I/O operations.

#### Sparse Files
Sparse files are essentially compressed files where NTFS does not apply compression to the file's nonsparse data. NTFS manages the run data of a sparse file's MFT record in the same way it does for compressed files that contain both sparse and nonsparse data.

#### Change Journal File
The change journal file, `\$Extend\$UsnJrnl`, is a sparse file in which NTFS stores records of changes to files and directories. Applications like the Windows File Replication Service (FRS) and the Windows Search service use the journal to respond to file and directory changes in real-time.

The journal stores change entries in the `$J` data stream and the maximum size of the journal in the `$Max` data stream. Each entry includes:
- The time of the change
- The reason for the change (see Table 11-9)
- The file or directory’s attributes
- The file or directory’s name
- The file or directory’s MFT file record number
- The file record number of the file’s parent directory
- The security ID
- The update sequence number (USN) of the record
- Additional information about the source of the change

**Table 11-9: Change Journal Change Reasons**

| Identifier | Reason |
|------------|--------|
| USN_REASON_DATA_OVERWRITE | The data in the file or directory was overwritten. |
| USN_REASON_DATA_EXTEND | Data was added to the file or directory. |
| USN_REASON_DATA_TRUNCATION | The data in the file or directory was truncated. |
| USN_REASON_NAMED_DATA_OVERWRITE | The data in a file’s data stream was overwritten. |
| USN_REASON_NAMED_DATA_EXTEND | The data in a file’s data stream was extended. |
| USN_REASON_NAMED_DATA_TRUNCATION | The data in a file’s data stream was truncated. |
| USN_REASON_FILE_CREATE | A new file or directory was created. |
| USN_REASON_FILE_DELETE | A file or directory was deleted. |
| USN_REASON_EA_CHANGE | The extended attributes for a file or directory changed. |
| USN_REASON_SECURITY_CHANGE | The security descriptor for a file or directory was changed. |
| USN_REASON_RENAME_OLD_NAME | A file or directory was renamed; this is the old name. |
| USN_REASON_RENAME_NEW_NAME | A file or directory was renamed; this is the new name. |
| USN_REASON_INDEXABLE_CHANGE | The indexing state for the file or directory was changed. |
| USN_REASON_BASIC_INFO_CHANGE | The file or directory attributes and/or the time stamps were changed. |
| USN_REASON_HARD_LINK_CHANGE | A hard link was added or removed from the file or directory. |
| USN_REASON_COMPRESSION_CHANGE | The compression state for the file or directory was changed. |
| USN_REASON_ENCRYPTION_CHANGE | The encryption state (EFS) was enabled or disabled for this file or directory. |
| USN_REASON_OBJECT_ID_CHANGE | The object ID for this file or directory was changed. |
| USN_REASON_REPARSE_POINT_CHANGE | The reparse point for a file or directory was changed, or a new reparse point (such as a symbolic link) was added or deleted from a file or directory. |
| USN_REASON_STREAM_CHANGE | A new data stream was added to or removed from a file or renamed. |
| USN_REASON_TRANSACTED_CHANGE | This value is added (ORed) to the change reason to indicate that the change was the result of a recent commit of a TxF transaction. |
| USN_REASON_CLOSE | The handle to a file or directory was closed, indicating that this is the final modification made to the file in this series of operations. |
| USN_REASON_INTEGRITY_CHANGE | The content of a file’s extent (run) has changed, so the associated integrity stream has been updated with a new checksum. This Identifier is generated by the ReFS file system. |
| USN_REASON_DESIRED_STORAGE_CLASS_CHANGE | The event is generated by the NTFS file system driver when a stream is moved from the capacity to the performance tier or vice versa. |

#### Experiment: Reading the Change Journal
You can use the built-in `Fsutil.exe` tool to create, delete, or query journal information. For example, to query the change journal on a volume, you can use the following command:

```sh
d:\>fsutil usn queryjournal d:
```

This command will display the maximum size of the change journal on the volume and its current state. To see how NTFS records changes in the journal, create a file called `Usn.txt` in the current directory, rename it to `UsnNew.txt`, and then dump the journal with `Fsutil`:

```sh
d:\>echo Hello USN Journal! > Usn.txt
d:\>ren Usn.txt UsnNew.txt
d:\>fsutil usn readjournal d:
```

The output will show the change entries, including the USN, file name, reason, timestamp, and other relevant information.

By understanding these concepts and tools, you can effectively manage and optimize your NTFS volumes for better performance and storage efficiency.