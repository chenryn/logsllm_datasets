probability are used to remove false interferers from the ﬁnal
interference model.
Partial regression, Ri, is used to measure the signiﬁcance
of each interferer in the ﬁnal regression in the presence of
all the other interferers.
Its value suggests the amount of
throughput degradation of the victim node is explained by
the interferer Ii alone.
Based on Ri, the Partial F-test, Fi, is also used to test
the hypothesis that an interferer Ii does not correlate with
throughput changes to a victim node (i.e, βi = 0). The
higher the partial F-test probability is, the more likely Ii is
a false interferer.
4.
IMPLEMENTING VOID
The implementation of VOID mainly deals with two is-
sues: (1) selecting congestion points (2) removing false in-
terferers.
Selecting Congestion Points.
As described in Section 3.1, throughput-change correla-
tions will not appear in a trace unless the airspace is con-
gested; VOID must select the congestion points for analysis.
To do this, VOID uses a simple heuristic: it sorts all the
collected throughput points (1 sample per second) in de-
scending order by the sum of all devices’ throughputs. It
then selects the top points and feeds them to regression un-
til the following two conditions are met. First, there must
be at least 60 points to input to the regression engine. This
lower bound is chosen to ensure statistical soundness for our
model. Second, the given samples must be able to generate
a good-quality regression model, indicated by a R2 bigger
than R2
thres and a F-test probability less than Fthres.
Removing False or Insigniﬁcant Interferers.
To remove false and insigniﬁcant interferers, we use a stan-
dard statistical method called backward elimination. This
method removes false interferers one at a time using par-
tial F-test results as described in Section 3.2.1. We start
with a full regression model with all the potential interfer-
ers. Since the false and insigniﬁcant interferers contribute
little or nothing to the victim node’s throughput changes, we
remove the most insigniﬁcant interferer with the largest par-
tial F-test probability that is bigger than a pre-determined
threshold Fout. Every time an interferer is removed, the re-
gression process is repeated (including re-selecting the con-
gestion points) until all remaining interferers are found to be
signiﬁcant contributors to interference at the victim. Also,
VOID has to deal with the multicollinearity issue, caused
by overﬁtting the model with similar throughput summaries
from diﬀerent potential interferers. VOID uses a standard
statistical method called PRESS [8, 15] to handle this issue,
by removing one or more interferers that represent (virtu-
ally) the same signal to the MLR engine.
5. DISCUSSION
As mentioned earlier in Section 3.1, VOID is unable to
correlate interference in non-congested scenarios. Even in a
congested environment, the relationship between an inter-
ferer and the victim node can still be obscured if its cur-
rent impact is not more signiﬁcant than that of others in
a given time window. For example, consider a victim node
A that could be aﬀected by two interferers B and C. If B
is transmitting at full speed while C does not have much
traﬃc to send, the current throughput degradation of A will
be caused (mostly) by B. While C would interfere more
if it were sending more data, it is currently not a signiﬁ-
cant source of interference for A and will not be identiﬁed
by VOID. In this way, VOID can only detect the signiﬁcant
interferers to a victim given the current traﬃc proﬁle, not a
complete interference map.
If a victim node is completely shut out of access to the net-
work, VOID will fail to identify its interferers. In this case,
all the ﬂows of the victim node have been starved or discon-
nected due to excessive MAC-layer retransmissions and thus
VOID is not able to sample its throughput at the router. Fi-
nally, VOID presumes the IP-layer throughput sampled at
the router is an indicator of MAC-layer goodput over the
wireless links. This assumption is obviously not true for
non-responsive UDP traﬃc, such as UDP blasting.
379Figure 1: The Emulab Wireless Testbed at Utah
6. EVALUATION
In this section, we evaluate VOID’s eﬀectiveness in two
diﬀerent environments. We ﬁrst use the Emulab wireless
testbed at Utah University [22] to evaluate if the multiple re-
gression engine of VOID is eﬀective in determining the set of
interferers to a victim node, and if it is able to adapt to net-
work dynamics. We then set up three interfering ﬂows in a
campus residential wireless network, to demonstrate VOID’s
eﬀectiveness in the presence of live background traﬃc.
6.1 Experiment Settings
Emulab Wireless Testbed.
The testbed consists of a total of 72 wireless nodes spread-
ing over two ﬂoors in the Merrill Engineering Building. We
conduct most of our experiments on two clusters, the 36-
node pc-600 cluster on the third ﬂoor and the 13-node pc-
3000w cluster on the fourth ﬂoor as highlighted in Figure 1.
The 36 nodes in the pc-600 cluster are deployed in one 300cm
x 224cm grid. All nodes in the grid are able to communicate
with each other; in other words, they all interfere. On the
other hand, the 13 pc-3000w nodes are deployed in a 360 m
x 100 m ﬂoor; any node takes at most ﬁve hops to reach any
other node in the cluster. For reference, we call the pc-600
cluster the “single-hop cluster” and the pc-300w cluster the
“multi-hop cluster”.
In each experiment, the wireless nodes are grouped into
AP-client pairs. These pairs are selected to build various in-
terference topologies. Each wireless node is equipped with at
least one Atheros card with AR5212 chipset, running Mad-
Wiﬁ driver [4]. In all scenarios, the transmission power is
set to minimum, the transmitting rate is ﬁxed at 36 Mbps
and the autorate function is disabled so that a topology does
not change during an experiment. The auto-rate feature is
enabled in experiments conducted in live networks, however.
We use the D-ITG [1] traﬃc generator to set up 5-minute
TCP ﬂows between a server and the wireless clients. Unless
stated otherwise, each ﬂow generates an average traﬃc de-
mand of 22 Mbps. This high throughput demand is set to
ensure that airspace congestion does occur. All traﬃc is con-
ﬁgured to be routed through the sole router in the testbed.
We use ipt_account netﬁlter kernel module [3] to log the
throughput information of all the ﬂows at the router every
second. VOID’s MLR engine runs over a 5-minute-window
trace, providing 300 points per device per time window.
UBC Highrise Wireless Network.
We have also initiated some experiments with a simple
testbed in a 14-ﬂoor UBC residential building for student
families. This building was built in the 1950’s and does
not provide wired Internet access.
It is, however, covered
by 27 APs, all ﬂoors but one are equipped with two APs.
One of the authors live in this highrise and set up two wire-
less desktops in his apartment. We also have another lap-
top available that allows us to move between ﬂoors and test
three-competing-device scenarios. These wireless hosts are
associated with diﬀerent APs on ﬂoor 9, 12, 13 respectively;
all APs however operate on the same channel.
All experiments in highrise are conducted at night from
6pm to 12am, when the traﬃc peaks. We again use D-ITG
to generate wireless downloading TCP ﬂows from UBC CS
department to these wireless hosts, each with a traﬃc de-
mand of 20Mbps. These wireless hosts record their receiving
throughputs and then feed them into VOID. We ensure that
these wireless devices are mutually interfering by conducting
pair-wise measurements ﬁrst.
−16 and 1.0∗ 10
We set the three statistical thresholds, i.e., R2
Threshold Settings.
thres, Fthres
and Fout, to 0.3, 1.1∗ 10
−10 respectively. We
have tried a variety of values for these settings and these
chosen conservative values seem to work eﬀectively in both of
our experiment settings. Due to space limitations, however,
the evaluations of these threshold settings are not included
in this paper.
6.2 Testbed Experiments
The testbed experiments are conducted to answer the fol-
lowing three key questions: (1) Is VOID able to extract the
pair-wise interference relationship in complicated many-to-
many interference scenarios? (2) Is VOID able to discrimi-
nate true interferers from the false ones? (3) Is VOID able
to adapt to network dynamics?
380We divide the 5-minute time window into two periods. In
the ﬁrst period, the two ﬂows in the single-hop cluster send
at a rate of 4 Mbps while the other two ﬂows send at full
speed. In the second period, we reverse the traﬃc demands.
Since the aggregated throughput in the ﬁrst period is about
20 Mbps higher than the second, VOID is likely to pick the
wrong congestion points from the ﬁrst period for interference
correlation.
The step-by-step backward elimination procedure for F 1
is illustrated in Table 2.
In the ﬁrst round, VOID has to
pick over 180 points to converge on a satisfactory regression
model with a F-test probability less than Fthres. We can
see from Table 2 that the coeﬃcient of the true interferer to
the victim node, i.e. β1,2, is only -0.19 since the congestion
points selected do not contain enough interference patterns
to reﬂect their interference relationship. The quality of this
regression model is also quite poor, with a R2 value of mere
0.41. However, as indicated by the partial F-test probability
values, the true interferer, i.e., F2, is a much more signiﬁcant
factor to the throughput changes of F1 than the other two
ﬂows. The backward elimination process is thus able to
remove F2 and F3 from the regression model in round 1 and
2 respectively. As these false interferers are removed from
consideration, the interference relationship between F1 and
F2 becomes more and more evident. In the ﬁnal regression
model, the β1,2 and R2 are improved from -0.19 and 0.41 to
-0.88 and 0.97 respectively.
6.2.3 Dynamic Interference Maps
In this section we demonstrate the VOID’s ability to adapt
to network changes such as traﬃc variations. We select ﬁve
ﬂows (pcwf12 → pcwf14, pcwf9 → pcwf17, pcwf7 → pcwf8,
pcwf7 → pcwf11, pcwf3 → pcwf5) from the multi-hop cluster
and conduct pair-wise experiments to measure the pair-wise
interference relationships. The full (static) interference map
is shown in Figure 3(a) as a reference. Each arrow in the
ﬁgure indicates the existence of interference and its direc-
tion. Note that the two ﬂows in the middle F2 and F3 are
aﬀected by all the other ﬂows.
We start from a completely congested network and then
gradually reduce the throughput demands of the ﬂows. Fig-
ure 3 illustrates three interference maps that are completely
diﬀerent, due to the changing traﬃc proﬁles. These maps,
however, are all subsets of the underlying physical pair-wise
interference map.
In a completely congested environment, the bandwidth
allocation is 20 Mbps, 0.5 Mbps, 0.5 Mbps, 20 Mbps and
12 Mbps, for these ﬁve ﬂows respectively. Given this traﬃc
proﬁle, the interference between F2 and F3 is not signiﬁcant
and thus cannot be detected by VOID. We can see from
Figure 3(b) that these ﬂows are grouped into two clusters
in the ﬁnal interference map: F1 is the main culprit for F2’s
throughput degradation while F4 and F5 dominate F3.
We then reduce the average throughput demand of each
ﬂow to 8 Mbps for each ﬂow. The three dominating ﬂows F1,
F4 and F5 do not experience any bottlenecks in this scenario;
the bandwidth available to them is greater than what they
need; these ﬂows do not appear to be aﬀected by any other
ﬂows. However, they do impose interference of 24 Mbps in
total on F2 and F3, the two ﬂows that cannot meet their
throughput demands.
Finally, we reduce the individual throughput demand to
4 Mbps. Now, whether F2 can achieve its throughput de-
Figure 2: Throughput of 7 mutually competing ﬂows.
β1,2
-0.78
β1,3
-0.82
β1,4
-0.75
β1,5
-0.86
β1,6
-0.88
β1,7
-0.85
Table 1: MLR coeﬃcients β for ﬂow 1.
6.2.1 Many-Interferer Scenarios
We conduct this experiment in the single-hop cluster in
which seven wireless ﬂows (14 wireless devices) mutually
interfere. We can see from Figure 2 that the interference
relationship among these seven ﬂows is quite complicated
— checking any pair of ﬂows is not going to reveal the in-
terference relationship between them. For example, if we
check ﬂow 1 and ﬂow 2 only, the correlation between them
is only 0.019. However, when all the seven ﬂows are taken
into account together, the beta values in Table 1 suggest
that all the other six ﬂows are the interferers to ﬂow 1. The
coeﬃcient β1,2 is now -0.78, indicating a strong interference
relationship between ﬂow 1 and 2. We cannot show all seven
regression results here due to space constraints. However,
the regression results on the other six ﬂows are very similar.
6.2.2 Finding The Interferers
We have run experiments in which all the devices are send-
ing at full speed. In these scenarios, airspace congestion per-
sists and the throughput samples selected contain enough
interference patterns between nodes and their true interfer-
ers for VOID to discriminate the true interferers from the
false ones. These experiments are, however, left out in this
paper due to space limitation.
In this section, we evaluate whether VOID’s repeated
backward elimination process is still eﬀective in a worst