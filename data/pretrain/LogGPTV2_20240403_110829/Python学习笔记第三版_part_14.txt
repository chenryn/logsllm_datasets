学习笔记 . 第三版
5. 推导式
相⽐之下，推导式（comprehensions）⽂法更像出⾃某位数学家之⼿。⽤⾃然⽽简便的⽅
式整合 for、if 语句，⽤于构造列表、字典和集合对象。
输出表达式 数据源迭代 过滤表达式（可选）
[ x + 10 for x in range(10) if x % 2 == 0 ]
临时变量
>>> [x for x in range(5)]
[0, 1, 2, 3, 4]
>>> [x + 10 for x in range(10) if x % 2 == 0]
[10, 12, 14, 16, 18]
将推导式拆解成普通语句，更易理解其执⾏过程，但稍嫌不够优雅。
l = []
for x in range(10):
if x % 2 == 0: l.append(x + 10)
除列表外，还可以⼤括号创建字典和集合，区别在于输出表达式是否为键值对。
>>> {k:v for k, v in zip("abc", range(10, 13))} # 字典
{'a': 10, 'b': 11, 'c': 12}
>>> {k:0 for k in "abc"}
{'a': 0, 'b': 0, 'c': 0}
>>> {x for x in "abc"} # 集合
{'b', 'c', 'a'}
推导式还可直接⽤作函数调⽤实参。
!127
学习笔记 . 第三版
def test(data):
print(type(data), data)
>>> test({x for x in range(3)})
 {0, 1, 2}
嵌套
让我们⽤推导式改造如下⾯这样⼀个层次过多的嵌套循环。
>>> l = []
>>> for x in "abc":
if x != "c":
for y in range(3):
if y != 0:
l.append(f"{x}{y}")
>>> l
['a1', 'a2', 'b1', 'b2']
推导式允许有多个 for ⼦句，每个⼦句都可选⼀个 if 条件表达式。
>>> [f"{x}{y}" for x in "abc" if x != "c"
for y in range(3) if y != 0]
['a1', 'a2', 'b1', 'b2']
两相对⽐，可以说推导式绝对是您⽇后时常提及，并积极使⽤的功能。
性能
除去⽂法因素外，推导式还有性能上的优势。
!128
学习笔记 . 第三版
def test_comp(data):
return [x for x in data]
def test_append(data):
l = []
for x in data:
l.append(x)
return l
为更准确测试两者性能差异，避免额外⼲扰，特预置静态数据源（列表）。但从结果看，
数倍差异已是不⼩距离。
⽐较对象是 for + append 语句，⽽⾮内置以 C 实现的 list 构造。
毕竟构造⽅法不⽀持过滤表达式。
>>> data = list(range(10000)) # 准备测试数据。
>>> test_comp(data) == test_append(data) # 确保结果⼀一致。
True
>>> %timeit test_comp(data)
269 µs ± 4.72 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit test_append(data)
885 µs ± 11.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
comp append
1000
5000
10000
查看反汇编输出，可看到推导式被优化处理过。
>>> dis.dis(test_comp)
!129
学习笔记 . 第三版
2 0 LOAD_CONST 1 ()
2 LOAD_CONST 2 ('test_comp..')
4 MAKE_FUNCTION 0
6 LOAD_FAST 0 (data)
8 GET_ITER
10 CALL_FUNCTION 1
12 RETURN_VALUE
临时变量
不同于普通循环语句，推导式临时变量不会影响上下⽂名字空间。
def test():
a = "abc"
data = {a:b for a, b in zip("xyz", range(10, 13))}
print(locals())
>>> test()
{'data': {'x': 10, 'y': 11, 'z': 12}, 'a': 'abc'}
从输出结果看，推导式临时变量既没有修改外部同名变量，也没有在名字空间新建关联。
异步、生成器
⾃ Python 3.5 引⼊新协程模型（async/await coroutines） 后，3.6 又增加了异步推导式⽀
持。不过要理解这些内容，须对 Python 异步编程有全⾯了解。本书下卷，会详细解析包
含 asyncio 在内的异步架构和使⽤⽅法。
如在推导式语法中使⽤⼩括号，其结果并⾮创建元组，⽽是⽣成器（generator）对象。所
以，我们区别于推导式，将其称作⽣成器表达式。
>>> (x for x in range(3))
 at 0x10812f468>
!130
学习笔记 . 第三版
四. 函数
1. 定义
函数是基本代码复⽤和模块化单位，⽤于执⾏单⼀逻辑。
相⽐语句，函数以整体形式⾯向调⽤者，其签名（名称、参数列表、返回值）构成接⼜原
型，天⽣带有设计味道。函数还是代码重构（code refactoring）源头，涉及重命名、参数
整理等诸多技巧。莫⼩看函数，应以此为起点，追求精致整洁、优雅简约风格，写出没有
坏味道的代码。
整洁的代码简单直接，如同优美的散⽂。它从不隐藏设计者意图，充满⼲净利落的抽象和直截了
当的控制语句。—— Grady Booch
函数应减少依赖关系，具备良好的可测试性和可维护性，这是性能调优关键所在。另外，
还应遵循⼀个基本原则，就是专注于做⼀件事，不受外在⼲扰和污染。
⽐如，当某个函数同时具备修改和查询功能时，正确做法是拆分成查询和修改两个不同函
数。从逻辑上讲，查询可能返回零，但修改必然是预设存在条件的。再则，查询性能优化
⾯向缓存，这于修改不利，两者⽆法共处。
函数要短⽽精，使⽤最⼩作⽤域。如有可能，应确保其⾏为⼀致性。如果函数逻辑受参数
影响⽽有所不同，那不如将多个逻辑分⽀分别重构成独⽴函数，使其从变转为不变。结果
是更易测试，更易扩展，算是遵循开闭原则（OCP），可逐步冻结代码。
最后，请及时清理掉不再使⽤的参数、代码，以及注释。任何⽤不到的元素，⽆论出发点
如何，终究也只是拖累。与其覆满霜尘，莫若 “茅檐长扫，花⽊成畦”，以待未来客。
创建
任何可被调⽤执⾏的函数都由两部分组成：代码对象持有字节码和指令元数据，负责指令
执⾏；函数对象则为上下⽂提供调⽤实例，并管理执⾏所需的状态数据。两者相加，算是
典型的 “指令 + 数据” 格局。
!131
学习笔记 . 第三版
假定函数是⽣产线，那么代码对象就是已定义⼯序的数控机床。即便如此，机床本⾝也只是⼀个
⽣产⼯具，并不能直接对外服务。需要专门的⼯⼚为其提供场地、电⼒、⼈员（状态），然后为
其承接⽣产任务（调⽤），这就是函数对象的⾓⾊。当然，同⼀种机床可卖给不同⼯⼚。
def test(x, y = 10):
x += 100
print(x, y)
>>> test
>>> test.__code__
代码对象（__code__）相关属性由编译器静态⽣成，为只读模式。存储指令运⾏所需相关
信息，诸如源码⾏、指令常量，以及参数和变量名等。
>>> test.__code__.co_varnames # 参数及变量量名列列表。
('x', 'y')
>>> test.__code__.co_consts # 指令常量量。
(None, 100)
>>> dis.dis(test.__code__)
2 0 LOAD_FAST 0 (x)
2 LOAD_CONST 1 (100)
4 INPLACE_ADD
6 STORE_FAST 0 (x)
3 8 LOAD_GLOBAL 0 (print)
10 LOAD_FAST 0 (x)
12 LOAD_FAST 1 (y)
14 CALL_FUNCTION 2
16 POP_TOP
18 LOAD_CONST 0 (None)
20 RETURN_VALUE
如果 dis(test.__code__.co_code)，会看到没有元数据符号的反汇编结果。
!132
学习笔记 . 第三版
与代码对象不同，函数对象作为外部实例存在，负责管理运⾏期状态。⽐如上例中的参数
默认值，以及动态添加的属性等。
>>> test.__defaults__ # 参数默认值。
(10,)
>>> test(1)
101 10
>>> test.__defaults__ = (1234,) # 修改默认值。
>>> test(1)
101 1234
>>> test.abc = "hello, world" # 为函数实例例添加属性。
>>> test.__dict__
{'abc': 'hello, world'}
事实上，def 是运⾏期指令。以代码对象为参数，创建函数实例，并在当前上下⽂与指定
名字相关联。
>>> dis.dis(compile("def test(): pass", "", "exec"))
1 0 LOAD_CONST 0 ()
2 LOAD_CONST 1 ('test')
4 MAKE_FUNCTION 0
6 STORE_NAME 0 (test)
伪码
test = make_function("test", code)
通常反汇编操作，是在函数实例创建后执⾏。⽬标针对 __code__，⽽⾮创建过程。
正因如此，可⽤ def 指令以单个代码对象为模版创建多个函数实例。
def make(n):
ret = []
!133
学习笔记 . 第三版
for i in range(n):
def test(): print("hello") # test = make_function(code)
print(id(test), id(test.__code__))
ret.append(test)
return ret
>>> make(3)
4428346232 4425999248 # 不不同实例例，相同代码。
4430389456 4425999248
4430390136 4425999248
[.test>,
.test>,
.test>]
多个实例，和多个名字引⽤同⼀实例并⾮⼀回事。
⽤列表持有多实例。如循环内 test ⽴即释放，可能因内存复⽤⽽出现相同 id 值。
同⼀名字空间，名字只能与单个⽬标关联。如此，就不能实现函数重载（overload）。另
外，作为第⼀类对象（first-class object），函数可作为参数和返回值传递。
>>> def test(op, x, y):
return op(x, y)
>>> def add(x, y):
return x + y
>>> test(add, 1, 2) # 将函数作为参数。
3
>>> def test():
def hello():
print("hello, world!")
return hello # 将函数作为返回值。
>>> test()()
hello, world!
!134
学习笔记 . 第三版
嵌套
⽀持函数嵌套，甚⾄与外层函数同名。
def test():
print("outer test")
def test():
print("inner test")
return test
>>> x = test()
outer test
>>> x
.test>
>>> x()
inner test
内外函数名字虽相同，但分属不同层次名字空间。依优先级⽽定，并不冲突。
test : outer outer
test : inner
globals
locals
inner
module
outer
>>> dis.dis(test)
2 0 LOAD_GLOBAL 0 (print)
2 LOAD_CONST 1 ('outer test')
4 CALL_FUNCTION 1
6 POP_TOP
3 8 LOAD_CONST 2 ()
10 LOAD_CONST 3 ('test..test')
12 MAKE_FUNCTION 0
!135
学习笔记 . 第三版
14 STORE_FAST 0 (test) # 保存到当前名字空间。
5 16 LOAD_FAST 0 (test) # 从当前名字空间返回。
18 RETURN_VALUE
匿名函数
匿名函数正式名称为 lambda 表达式。
相⽐普通函数，有所限制。其内容只能是单个表达式（函数调⽤也属表达式），不能使⽤
语句。当然，也不能提供函数名，否则就不能称作匿名函数。除此之外，使⽤⽅法与普通
函数并⽆差异。
>>> add = lambda x, y: x + y
>>> add
>
>>> add(1, 2)
3
普通函数总有个默认名字（__name__），⽤以标识真实⾝份。它是编译期静态绑定，与运
⾏期变量名引⽤⽆关。
PEP3155 : 还可⽤ __qualname__ 获取⽬标在模块中的完整定义路径。
>>> def test(): pass
>>> a = test