the return address with a few hundred bytes accuracy.
The Windows environment is different because it has
been distributed in binary ﬁles. The version of the software
may be determined and it has been compiled using the same
compiler for each distribution. The locations where individ-
ual DLL ﬁles are held in memory are largely deterministic,
making use of a NOP sledge unnecessary. The return ad-
dress of the vulnerable function may be overwritten with
an address of an instruction in a DLL ﬁle that returns to a
register pointing to the injected code on the stack.
Once the instruction pointer has been seized, execution
is transferred to the payload of the exploit. The following
section describes how the API design differences between
UNIX and Windows effects the construction of these pay-
loads.
3.2. Attack Payload Construction
The classic architecture of operating system kernel and
protected user space processes is shared by both the Win-
dows NT family and UNIX. Processes running in user space
are protected from modifying each other and modifying the
kernel by allocating separate and protected memory parti-
tions, and by providing a single strictly policed interface
to kernel services, which in the UNIX world is generally
called the system call interface, and the Windows world the
Native API.
Calling from user space code to kernel space is achieved
by CPU speciﬁc techniques coded in assembly language,
and as such, a library is usually provided which contains
C language proxy functions to the system calls.
In the
UNIX programming environment these system call func-
tions are usually provided as a subset of the C Standard Li-
brary (libc). In the Windows environment the Native API
(often called NTAPI) is provided by the NTDLL.dll library.
When we consider the relationship between the APIs
which most system applications are written in with the sys-
tem call interface APIs on both platforms, we see a marked
divergence. On the UNIX platform, the system call inter-
face is generally well documented and readily available via
the standard C library API. The windows system call in-
terface, the Native API, is however poorly documented and
hidden from the average programmer beneath a number of
higher level APIs, such as WIN32, POSIX and OS/2. It is
the ﬁrst of these API’s which has been promoted most by
Microsoft, and has consequently become the most widely
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:54 UTC from IEEE Xplore.  Restrictions apply. 
adopted API by developers on the Windows platform.
This has led to marked differences in the way that ex-
ploits are written between the UNIX and WIN32 platforms.
While UNIX exploit writers have on a whole used the sys-
tem calls directly to their advantage, Windows exploit writ-
ers have to date avoided writing exploits directly to the
NTDLL system call interface, and instead used a number
of techniques for calling higher level API library code to
achieve their goals. For example, the Slammer worm uses
the GetTickCount function from the kernel32.dll library, and
the functions socket and sendto from the winsock Windows
sockets library directly.
The following section examines different strategies for
how the execution of processes may be monitored in Win-
dows. Tracing code execution is the foundation of our ap-
proach to detecting code injection attacks from the network.
4. Windows Process Tracing
In earlier work [2] we have demonstrated that sandbox-
ing and executing potentially malicious code in a monitored
environment may provide excellent accuracy and complete-
ness properties for intrusion detection. The prototype im-
plementation for the Linux operating environment provided
complete coverage where all code injection attacks includ-
ing attacks using polymorphic payloads were detected and
no false positives have been recorded. This section exam-
ines how a similar system may be implemented for the Win-
dows operating environment by examining how processes
may be traced in Windows.
When we consider tracing the program execution of a
particular piece of code, and more speciﬁcally, code which
may potentially be an exploit, it is important to consider
the environment that the code will be executing in. The
principle characteristics of the environment that are relevant
to our discussion are: whether the exploit code runs from
user process space or kernel space; what the contents of the
stack are; what the contents of the heap are; and which code
libraries are loaded.
In our previous work [2], we took the approach of tracing
the system call API on a Linux system by using the ptrace
facilities of the operating system. This enabled us to cap-
ture a trace of what system calls were made by the code
in question. Applying this approach makes it straightfor-
ward to determine the operation of a piece of code and the
basic operation of potentially malicious injected executable
instructions.
In contrast to this approach, most attempts at tracing
APIs on windows have grown out of developers’ desires to
“hook” speciﬁc API calls, for reasons such as implement-
ing on-demand virus scanning and adding functionality to
closed source binary code. Due to the poorly documented
NTAPI, these efforts have concentrated on tracing calls at
the more widely understood WIN32 API level, and have re-
quired the combination of code injection and hooking tech-
niques.
Code injection in the context of execution tracing refers
to both the means of getting executable code into the ad-
dress space of the subject program, and the means of en-
suring the tracing functionality is executed to produce the
tracing functionality. One of the simplest ways of tracing is
through the Proxy DLL technique. This involves generat-
ing a DLL which contains on a one to one basis all of the
functions, symbols and resources exported by the real API
implementation library in question. The implementation of
these functions performs a logging operation, then redirects
(or proxies) the call to the real implementation. A proxy
DLL is introduced into a program as the real library by nam-
ing the proxy DLL the same as the DLL in question. By na-
ture of the dynamic linker of Windows, DLL’s are searched
for ﬁrst in the directory of the main executable of the pro-
gram, then by the system path, so the proxy DLL will be
loaded instead of the real implementation. This technique
combines elements of code injection and hooking and is il-
lustrated the user space region of Figure 1 where the proxy
DLL functions are represented by a grey box.
Figure 1. Detours vs strace tracing method
Other more advanced injection techniques include using
the AppInit_DLLs Registry, the System Wide Hook SetWin-
dowsHookEx, and Thread Injection techniques. However
these more advanced techniques also require active modiﬁ-
cation (or patching) of the API calls through the use of Im-
port Address Table (IAT) patching or API implementation
patching. A good overview of these techniques is contained
in [8]. We use the Detours injection and hooking library
provided by Microsoft Research as the basis of our API spy
utility. The Detours library implements a number of strate-
gies mentioned above for providing injection and hooking
services to applications.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:54 UTC from IEEE Xplore.  Restrictions apply. 
In more recent times, the NTAPI has begun to receive
more attention from security researchers, due to contribu-
tions from the likes of Russinovich [10] and Schreiber [11].
Similar to the ptrace technique on Linux for tracing system
calls, a simple form of tracing of system calls on Windows
has been identiﬁed and has recently culminated in the re-
lease of strace for NT, which is named after the Linux sys-
tem call trace program with the same name. strace operates
by patching the function pointers in the system call table in
the OS kernel to point to functions that log the system call
and then in turn calls the real system call. The approach
is illustrated the kernel space region of Figure 1 where the
functions inserted by strace are represented by grey boxes.
Very little work in the area of low level system moni-
toring for intrusion detection in the Windows environment
has been presented by the research community. One exist-
ing system is the Windows Host Intrusion Prevention Sys-
tem (WHIPS) [4]. Their approach is based on monitoring
security critical system calls and applying access control
mechanisms by checking their parameters using a reference
monitor at call time. The system calls that are monitored
are: NtCreateFile, NtDeleteFile, NtClose, NtOpenProcess,
NtLoadDriver, NtUnloadDriver and NtOpenFile. The pa-
rameters to the individual system calls are paramount to the
functionality of this system. Our approach only relies on
the existence of operating system resource usage in a sec-
tion of code and therefore we examine the extended subset
of system calls provided by strace.
The following section presents our detection framework
for networks containing both Windows and UNIX hosts.
5. A Generic Detection Framework
The framework for detecting code injection attacks con-
sists of an executable instruction detector residing on an
IDS and a series of sandbox execution environments match-
ing the monitored application environments provided by the
operating systems in the network. Once the IDS has iden-
tiﬁed a series of executable instructions in network trafﬁc it
relays the suspicious packet’s payload to an execution envi-
ronment matching the packet’s destination. The appropriate
execution environment is identiﬁed by examining the des-
tination IP address of the incoming packet. The payload
is executed in the corresponding monitored environment
and a report containing the payload’s OS resource usage is
returned to the IDS. The IDS generates appropriate alerts
upon receiving the report from the execution environments
if the report contains evidence of resource usage. Otherwise
the packet is considered non-malicious.
Detecting code injection attacks by using a sandbox re-
quires three steps [2]. First the exact entry point or the
ﬁrst executable instruction of the code must be identiﬁed.
Including a byte that is not part of the injected code or
omitting instructions at the beginning of the code may re-
sult in invalid machine instructions and execution failure.
Secondly, if the code has been protocol encoded, the proto-
col data must be removed from the executable instructions
to obtain the original code or execution will fail. Again,
bytes that are inserted into the payload may represent il-
legal machine instructions at execution time and lead to
execution failure. Finally the code must be executed in a
monitored environment to gather evidence of operating sys-
tem resource usage. The ﬁrst two steps, the executable in-
struction identiﬁcation and the protocol decoding are, in our
framework, carried out by the IDS. The packet payload is
then relayed to the execution environment where the third
step, the execution monitoring, is performed.
The research presented in this paper relies on the exis-
tence of an efﬁcient method of identifying executable in-
structions in a network stream and does not further examine
approaches to solve this problem. In our implementation
we utilise the Snort IDS together with the NOP detector
Fnord to identify potential executable code. Fnord is a Snort
pre-processor that programmatically detects NOP sledges
by counting instructions that logically perform no opera-
tions that impacts the executing code. We set the threshold
low so that if fnord detects four consecutive NOP instruc-
tions the packet is considered to require further analysis.
We recognise that this approach is not capable of detecting
all Windows attacks that return into DLL ﬁles and that does
not include any NOP instructions but demonstrate that the
approach is capable of detecting a number of Windows code
injection attacks. Upon detection of a sequence of NOP in-
structions the IDS carries out a number of steps. First the
appropriate execution environment is selected based on the
destination IP address of the packet. Secondly the appropri-
ate protocol decoding is applied to the payload based on the
destination port number of the packet and ﬁnally the entire
packet payload is sent to our analyser starting from the ﬁrst
instruction identiﬁed as being part of the executable code.
Correct conﬁguration of the execution environments is
important to provide accurate detection results. Both the
architecture and the operating system of the execution envi-
ronment must match that of the destination of the incoming
payload. The reason for this is that machine instructions
compiled for SPARC for example are different to instruc-
tions compiled for the i386 architecture, and if executed on
a different architecture than it was compiled for will only
represent illegal instructions. The operating system of the
execution environment must also match because resource
usage may be implemented differently from operating sys-
tem to operating system.
Conﬁguration of the Windows environment is more crit-
ical than that of the UNIX environment if a full trace of
the injected code is to be obtained. The reason for this is
that the injected code utilises user space APIs that may dif-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:54 UTC from IEEE Xplore.  Restrictions apply. 
fer from release to release. Since the UNIX system call
API is available directly to the user it is pretty much cast
in stone. If it is changed all applications must be rewritten.
The Windows operating system has been designed to only
export the higher level APIs. This leaves the creators free to
change any implementation as long as the higher level APIs