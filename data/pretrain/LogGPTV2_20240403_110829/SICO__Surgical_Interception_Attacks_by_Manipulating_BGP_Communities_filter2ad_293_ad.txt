### 5.3 Quantifying Announcement Propagation through Spread

To quantify the impact of malicious announcements on the Internet using different interception techniques, we measure their spread, which represents the percentage of Internet hosts that use a given route. **Spread loss** measures the reduction in spread (relative to the theoretical maximum spread for an interception attack) when a specific interception technique is implemented.

#### Spread Measurement Methodology

We used two servers: one to act as the victim and one to act as the adversary. Initially, we made an unmodified BGP announcement from the victim’s server, followed by launching a specific BGP interception attack (AS-path poisoning, selective neighbor announcement, or SICO) from the adversary’s server. For a set of active hosts (IP addresses), we sent a probe from the victim’s server to each host and measured the attack spread (\(S_{atk}\)), defined as the fraction of hosts whose responses were routed to the adversary. Figure 8 illustrates this process.

As a baseline, we also measured the attack spread when the adversary simply announced the victim’s prefix to one provider (without using communities or AS-path poisoning), referred to as the **baseline spread** (\(S_{base}\)). This type of announcement may not achieve interception, but it provides a measure of the maximum spread achievable by an interception attack. We then calculate the **spread loss** (\(S_{loss}\)) to measure the efficiency of an attack:

\[ S_{loss} = \frac{S_{base} - S_{atk}}{S_{base}} \]

**Figure 8:** Hosts in the intercepted portion of the Internet send responses to the adversary, while hosts unaffected by the adversary's attack send responses directly to the victim.

An attack with a lower spread loss can intercept more traffic and is considered more effective.

#### Active Hosts and Protocols

We are particularly interested in active hosts running ICMP and HTTPS. ICMP is widely used and often enabled on end hosts and home routers, providing a rough estimation of the distribution of end hosts. Studying the effect of interception on HTTPS hosts is crucial because interception attacks against HTTPS sites can have severe consequences [47].

For each protocol, we constructed a random sample of 1,000 hosts that supported the protocol. These hosts served as the target hosts for our measurements. For ICMP ping hosts, we used an ICMP ping request as the probe, and for HTTPS hosts, we used a TCP SYN to port 443.

- **HTTPS Hosts:** We queried a list of 15,000 random hosts from the Censys Internet-wide scans [54] (using `ORDER BY RANDOM()` in Google Big Query SQL) that had port 443 open and were serving browser-trusted certificates. We filtered this sample by recording only the hosts that actively responded to our own TCP SYN packets sent to port 443. The final sample size was limited to 1,000 to avoid overwhelming the PEERING testbed. To ensure the randomness of the sample, we performed a chi-squared analysis presented in Appendix §E.
- **ICMP Ping Hosts:** We started with a list of 15,000 collected with no selection criteria (since the Censys data definition did not include ping connectivity) using `ORDER BY RANDOM()` in Google Big Query SQL. We filtered this sample by recording which hosts actively responded to our pings. The final sample was limited to 1,000 hosts. We did not perform a chi-squared analysis for reasons discussed in Appendix §E.

#### Measuring the Spread Loss of SICO

We measured the spread loss of SICO and found that it reduces the average spread (i.e., SYN and Ping spread averaged) by 0.1% (with \(S_{atk} = 68.8\%\), \(S_{base} = 68.9\%\)) when implemented at the Amsterdam mux and 11.4% (with \(S_{atk} = 38.9\%\), \(S_{base} = 43.9\%\)) when implemented in Seattle.

| Setting        | Amsterdam SYN | Amsterdam Ping | Amsterdam Avg. | Seattle SYN | Seattle Ping | Seattle Avg. |
|----------------|---------------|----------------|----------------|-------------|--------------|--------------|
| SICO Poisoning | 0%            | 22%            | 0%             | 9%          | 70%          | 11%          |
| Poisoning 1 AS | 0%            | 25%            | 0%             | 14%         | 73%          | 11%          |
| Poisoning 2 ASes | 82%           | 79%            | 81%            | 99%         | 98%          | 99%          |
| Poisoning 3 ASes | 85%           | 83%            | 84%            | 100%        | 100%         | 100%         |

**Table 6:** Spread losses under different settings (rounded to the nearest percent). Evaluated with Coloclue at Amsterdam and RGnet at Seattle as upstreams ("Avg" is SYN and Ping spread losses averaged).

### 5.4 Comparison with State-of-the-Art

We compared SICO to selective neighbor announcement and AS-path poisoning. Selective neighbor announcement was incapable of launching interception attacks, and AS-path poisoning caused a significantly higher spread loss compared to SICO.

- **Comparison with Selective Neighbor Announcement:** When launching interception attacks against Northeastern University from both Amsterdam and Seattle, selective neighbor announcement was not viable. The adversary’s announcement prevented the other provider from having a route to the victim, regardless of which upstream the adversary announced to.
- **Comparison with AS-path Poisoning:** We experimented with AS-path poisoning by prepending the ASNs of the adversary’s (one to three) upstream ASes used for forwarding intercepted traffic. In both setups, AS-path poisoning prevented the adversary’s upstream from importing the adversary’s announcement and gave the adversary a route to the victim. However, due to the longer AS path, AS-path poisoning significantly reduced the spread of the adversary’s announcement, reducing the amount of Internet traffic the adversary could collect.

In Table 6, we show the spread losses of SICO and AS-path poisoning under different settings. SICO outperformed AS-path poisoning by over 100x at Amsterdam and over 6x at Seattle. Specifically, SICO only reduced the average spread by 0.1% when implemented at the Amsterdam mux and 11.4% when implemented in Seattle. In the optimum case for AS-path poisoning (i.e., prepending only a single ASN), the spreads were reduced by 23.7% (with \(S_{atk} = 52.6\%\), \(S_{base} = 68.9\%\)) and 71.8% (with \(S_{atk} = 12.4\%\), \(S_{base} = 43.9\%\)) on average at Amsterdam and Seattle, respectively. Even in this optimum case, SICO had a 16.2 greater absolute spread than AS-path poisoning at Amsterdam and a 26.5 greater absolute spread at Seattle. Considering the poisoning of additional ASNs, the spread losses became much higher (even near 100%), and SICO outperformed AS-path poisoning by an absolute spread of 57.8% at Amsterdam and 38.8% at Seattle.

The dramatic decrease in propagation caused by poisoning more than one AS is likely due to prefix filtering practices at major providers, which filter announcements containing the ASN of a peer [79]. In both cases, poisoning two or more ASes required poisoning the ASNs of major transit providers, triggering prefix filtering at other transit providers. The dilemma of AS-path poisoning triggering prefix filters is inherent to the technique and a major drawback. While in our setup, this problem was only encountered when poisoning two or more ASes, if an adversary has a large provider (e.g., a tier-1 provider) that it wants to use to forward traffic, even poisoning the single ASN of its immediate provider could trigger prefix filtering and make AS-path poisoning non-viable. This highlights one of the fundamental benefits of community-based interception over previous techniques: SICO leaves the AS-path unchanged, bypassing AS-path-based filtering and other AS-path-related detection techniques.

### 5.5 Viable AS Estimation

To launch a SICO attack, an AS must meet two conditions:
1. It must be multi-homed, having a provider to forward traffic and a provider to receive traffic (a requirement for all announcement-shaping based interception attacks).
2. It must be able to use communities to influence the behavior of one of its direct or indirect providers (a provider’s provider).

- **SICO Viability without Considering Community Forwarding:** Based on the CAIDA March 2019 topology [12], 59% of all ASes are multi-homed and thus satisfy condition 1, making them potentially capable of interception. However, the second condition pertaining to community support is more difficult to measure directly since there is no centralized database of AS community support. To overcome this, we only model community support by ASes that we know support the relevant communities via manual inspection of their routing policy (i.e., ASes that have a "Yes" in all three columns of Table 10). As a conservative metric, we counted an AS as being capable of launching SICO attacks only if it was multi-homed and had a direct provider (listed in the CAIDA topology) supporting the required communities. 24% of ASes (or 41% of multi-homed ASes) satisfied this condition, giving us a lower bound of 24% on attack viability.
- **SICO Viability Considering Community Forwarding:** Directly having a provider that supports communities is not the only way to achieve community controls. Many providers forward communities and may have providers above them that support communities. To model this, we collected three months of Route Views project data (from May 2019 – July 2019) and referred to this dataset as the RV dataset. We extracted 176 million BGP updates that contain communities from the RV dataset and recorded ASes that were seen forwarding communities in a manner similar to Streibelt et al. [81]. Specifically, if we observed the AS path: AS1, AS2, AS3, AS4 with the community AS 4:101, where AS 4 is the prefix’s origin, we can assume this community was attached by AS 4. We then recorded AS 2 and AS 3 as forwarding communities. Overall, we recorded 3.5 K ASes as forwarding communities.

With this information, we counted how many ASes had either a provider that supported communities or a chain of providers (all of which forwarded communities) that eventually led to a provider that supported communities. While this implies that an adversary can propagate communities to an AS that will support them, it is worth noting that sometimes, to launch a SICO attack, community controls are needed at a lower-tier provider to suppress route propagation over peering links lower in the Internet hierarchy. Thus, sometimes routing decisions must be influenced at providers that only forward communities. The most common case of this is when an AS has a provider that forwards communities but also peers with all of its other providers. Here, even if the adversary uses community controls to influence routing at higher-up ASes, the adversary cannot suppress route propagation over the relevant peering links between its providers. To exclude this case, we did not count an AS as being capable of launching SICO attacks if its providers that forwarded communities peered with all of its other providers.

Using this analysis technique, we estimate that SICO is viable for 48% of ASes (or 83% of multi-homed ASes).

### 5.6 Targeted Interception Attacks

To measure the effectiveness of targeted interception attacks, we used the PEERING mux in Amsterdam as an adversary and the PEERING mux at Northeastern University as a victim. We generated a list of sample targets to study, choosing the top 9 Tor nodes by bandwidth in the February 15, 2019 Tor consensus (the official document containing all Tor nodes' bandwidths) as sample targets. Traffic from these nodes to top websites would hypothetically be the target of a BGP attack to deanonymize Tor users, as shown by Sun et al. [83].

For each node, we engineered a targeted BGP attack (against a victim prefix we controlled) that affected as little of the Internet as possible while still including the IP address of the target node. We confirmed that the node was affected by our attack by sending a TCP SYN packet to a known open port listed in the Tor consensus and listening for the responding SYN+ACK packet. Once we confirmed our attack affected the node, we took a spread measurement to observe the fraction of other Internet hosts that were affected by the attack.

Of the 9 nodes we studied, 1 node routed traffic to the victim even when the adversary launched a BGP attack with the maximum possible spread. Given the Internet topology, the maximum spread of the adversary was 73%, so it was not unexpected that some nodes would be beyond the adversary’s reach. On the remaining 8 nodes, the average attack spread was only 2.7%.

| Tor Node IP     | Tor Node ASN | Spread SYN | Spread Ping | Spread Avg. |
|-----------------|--------------|------------|-------------|-------------|
| 46.165.245.154  | 28753        | 5.3%       | 5.6%        | 5.5%        |
| 94.23.150.81    | 16276        | 1.6%       | 2.1%        | 1.8%        |
| 31.220.0.225    | 206264       | 0.1%       | 0.2%        | 0.2%        |
| 62.210.177.181  | 12876        | 0.3%       | 0.6%        | 0.5%        |
| 199.249.230.72  | 62744        | 2.0%       | 4.6%        | 3.3%        |
| 178.32.181.96   | 16276        | 1.6%       | 2.1%        | 1.8%        |
| 195.206.105.217 | 9009         | 8.8%       | 7.1%        | 7.9%        |
| 176.9.44.232    | 24940        | 0.7%       | 0.8%        | 0.8%        |
| Average         | NA           | 2.6%       | 2.9%        | 2.7%        |

**Table 7:** Results of BGP attacks targeting Tor nodes.