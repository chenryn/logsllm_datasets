 Execution Time: 996.249 ms  
(11 rows)  
Time: 996.632 ms  
```  
2、时序场景实践  
创建按月分区的行存表  
```  
CREATE table ts (id int, c1 int, c2 int, c3 int, c4 int, c5 int, c6 int, c7 int, crt_time timestamp, info text)   
PARTITION by range (crt_time);   
create table ts_202101 PARTITION OF ts FOR VALUES FROM ('2021-01-01') to ('2021-02-01');  
create table ts_202102 PARTITION OF ts FOR VALUES FROM ('2021-02-01') to ('2021-03-01');  
create table ts_202103 PARTITION OF ts FOR VALUES FROM ('2021-03-01') to ('2021-04-01');  
create table ts_202104 PARTITION OF ts FOR VALUES FROM ('2021-04-01') to ('2021-05-01');  
create table ts_202105 PARTITION OF ts FOR VALUES FROM ('2021-05-01') to ('2021-06-01');  
```  
写入1000万测试数据  
```  
insert into ts select generate_series(1,10000000), random()*10, random()*20, random()*30,   
random()*100, random()*200, random()*300, random()*1000,   
'2021-01-01'::timestamp + ((random()*5*30*24)||' hour')::interval,   
random()::text;  
```  
月初时创建列存表存放若干个月以前的分区数据, 将若干个月以前的分区数据转入列存表, 交换列存和行存储分区  
```  
begin;  
lock table heap in exclusive mode;  
CREATE table ts_columnar_202101 (like ts) using columnar;  
insert into ts_columnar_202101 select * from ts_202101;  
alter table ts DETACH PARTITION ts_202101;  
alter table ts ATTACH PARTITION ts_columnar_202101 FOR VALUES FROM ('2021-01-01') to ('2021-02-01');  
end;  
```  
2秒多点交换结束  
```  
INSERT 0 2066564  
Time: 2654.981 ms (00:02.655)  
```  
交换结束后, TS表202101的分区就是列存分区了.  
```  
postgres=# \dt+ ts*  
                                        List of relations  
 Schema |        Name        |       Type        |  Owner   | Persistence |  Size   | Description   
--------+--------------------+-------------------+----------+-------------+---------+-------------  
 public | ts                 | partitioned table | postgres | permanent   | 0 bytes |   
 public | ts_202101          | table             | postgres | permanent   | 184 MB  |   
 public | ts_202102          | table             | postgres | permanent   | 166 MB  |   
 public | ts_202103          | table             | postgres | permanent   | 184 MB  |   
 public | ts_202104          | table             | postgres | permanent   | 178 MB  |   
 public | ts_202105          | table             | postgres | permanent   | 178 MB  |   
 public | ts_columnar_202101 | table             | postgres | permanent   | 58 MB   |   
(7 rows)  
postgres=# \d+ ts  
                                          Partitioned table "public.ts"  
  Column  |            Type             | Collation | Nullable | Default | Storage  | Stats target | Description   
----------+-----------------------------+-----------+----------+---------+----------+--------------+-------------  
 id       | integer                     |           |          |         | plain    |              |   
 c1       | integer                     |           |          |         | plain    |              |   
 c2       | integer                     |           |          |         | plain    |              |   
 c3       | integer                     |           |          |         | plain    |              |   
 c4       | integer                     |           |          |         | plain    |              |   
 c5       | integer                     |           |          |         | plain    |              |   
 c6       | integer                     |           |          |         | plain    |              |   
 c7       | integer                     |           |          |         | plain    |              |   
 crt_time | timestamp without time zone |           |          |         | plain    |              |   
 info     | text                        |           |          |         | extended |              |   
Partition key: RANGE (crt_time)  
Partitions: ts_202102 FOR VALUES FROM ('2021-02-01 00:00:00') TO ('2021-03-01 00:00:00'),  
            ts_202103 FOR VALUES FROM ('2021-03-01 00:00:00') TO ('2021-04-01 00:00:00'),  
            ts_202104 FOR VALUES FROM ('2021-04-01 00:00:00') TO ('2021-05-01 00:00:00'),  
            ts_202105 FOR VALUES FROM ('2021-05-01 00:00:00') TO ('2021-06-01 00:00:00'),  
            ts_columnar_202101 FOR VALUES FROM ('2021-01-01 00:00:00') TO ('2021-02-01 00:00:00')  
```  
查询ts表, 正确的路由到对应分区  
```  
postgres=# select count(*) from ts where crt_time between '2021-01-02' and '2021-01-15';  
 count    
--------  
 866004  
(1 row)  
Time: 140.311 ms  
postgres=# explain select count(*) from ts where crt_time between '2021-01-02' and '2021-01-15';  
                                                                       QUERY PLAN                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=766.30..766.31 rows=1 width=8)  
   ->  Custom Scan (ColumnarScan) on ts_columnar_202101 ts  (cost=0.00..740.46 rows=10333 width=0)  
         Filter: ((crt_time >= '2021-01-02 00:00:00'::timestamp without time zone) AND (crt_time   Gather  (cost=140940.27..140940.58 rows=3 width=8)  
         Workers Planned: 3  
         ->  Partial Aggregate  (cost=139940.27..139940.28 rows=1 width=8)  
               ->  Parallel Append  (cost=0.00..131875.76 rows=3225806 width=0)  
                     ->  Custom Scan (ColumnarScan) on ts_columnar_202101 ts_1  (cost=0.00..0.00 rows=2066564 width=0)  
                     ->  Parallel Seq Scan on ts_202103 ts_3  (cost=0.00..30163.08 rows=666908 width=0)  
                     ->  Parallel Seq Scan on ts_202104 ts_4  (cost=0.00..29186.01 rows=645301 width=0)  
                     ->  Parallel Seq Scan on ts_202105 ts_5  (cost=0.00..29183.47 rows=645247 width=0)  
                     ->  Parallel Seq Scan on ts_202102 ts_2  (cost=0.00..27214.16 rows=601716 width=0)  
 JIT:  
   Functions: 9  
   Options: Inlining false, Optimization false, Expressions true, Deforming true  
(13 rows)  
Time: 1.113 ms  
postgres=# select count(*) from ts;  
  count     
----------  
 10000000  
(1 row)  
Time: 545.859 ms  
```  
detach的分区你可以看着办, 想删掉就删掉.  
## 总结  
1、columnar有更高的压缩率  
2、columnar更好的统计查询效率, 因为存储空间压缩了, 扫描的block也少了.    
3、目前columnar存储仅支持多个分区parallel append scan并行, 不支持单个columnar分区并行查询. 所以为了得到更好的性能, 建议分区.    
4、columnar使用限制参考  
https://github.com/citusdata/citus/blob/master/src/backend/columnar/README.md  
5、在不强求scale out的情况下, citus columnar提供了一个不错的列存储提升分析和时序场景高压缩比与高性能的选择, 结合PG的分区表实现完美的行列分区混合存储, 满足既要高并发写入, 又要高性能分析与压缩比的需求.   
其他  
https://github.com/citusdata/citus  
https://github.com/timescale/timescaledb  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")