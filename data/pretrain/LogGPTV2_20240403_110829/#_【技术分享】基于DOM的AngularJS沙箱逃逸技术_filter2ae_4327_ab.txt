完整的沙箱逃逸代码如下，在Angular 1.2.24-1.2.26/1.3.0-1.3.1中有效。
**[沙箱逃逸PoC 1.3.0](http://portswigger-labs.net/angular_dom_based_sandbox_escapes/?version=1.3.0#%7B%7D%5B%5B%27__proto__%27%5D%5D%5B%27x%27%5D=constructor.getOwnPropertyDescriptor;g=%7B%7D%5B%5B%27__proto__%27%5D%5D%5B%27x%27%5D;%7B%7D%5B%5B%27__proto__%27%5D%5D%5B%27y%27%5D=g%28%27%27.sub%5B%5B%27__proto__%27%5D%5D,%)**
**  
**
**0x04 1.3的分支**
沙箱逃逸非常酷，但是它只能工作于有限的Angular版本中。我想覆盖整个1.3分支。我开始查看他们如何解析表达式。在测试版本1.2.27中我在1192行中添加了断点，开始测试各种对象属性，看他们如何重写代码。我得到了一些有趣的事，如果没有包含字母数字属性，Angular似乎会吃掉分号字符，并将它作为对象属性。
下面是Angular如何重写代码（注意必须在调试器中继续5次）：
如你所见，Angular在重写输出中包含两次分号。要是我们打破双引号会怎样？我们能使用基本的XSS攻击重写代码，并绕过沙箱。为了实现这个，我们需要提供一个可靠的字符串给Angular，因此我们不能破环初始的表达式解析。Angular也能很好的解析带有引号的对象属性，因此我能最小程度上沙箱逃逸：
重写输出如下：
[沙箱逃逸PoC 1.2.27](http://portswigger-labs.net/angular_dom_based_sandbox_escapes/?version=1.2.27#%7B%7D.%22,alert%281%29,%22;)
为了将这个应用于1.3分支，我们只需要稍微改变向量，以打破重写代码。如果你观察1.3.4版本的重写代码，你能注意到它创建了一个语法错误。
我们只需要打破这个，注释输出语法错误，下面是最终的向量，能在1.2.27-1.2.29/1.3.0-1.3.20中有效。
[沙箱逃逸PoC 1.3.20](http://portswigger-labs.net/angular_dom_based_sandbox_escapes/?version=1.3.20#%7B%7D.%22%29%29%29;alert%281%29//%22;)
**0x05 攻破1.4**
****接下来，我决定研究1.4分支。在1.4之前的版本可以使用数组访问__proto__，__defineSetter__的技巧。我认为我可以使用那些属性/方法中的部分来完成沙箱逃逸。我需要覆盖构造函数并能访问Function构造函数的，但是这次我不能访问Object构造函数，因为沙箱的功能增强了。  
在Safari/IE11中，设置全局变量使用__proto__是可能的。你不能覆盖已存在的属性，但是你能创建新的。这是个死胡同，因为定义属性的优先级高于Object原型。
因为Angular在ensureSafeObject使用有效的检查，我认为使用boolean可能会是检查失败，然后能访问到Function构造函数。然而，Angular检查了对象链中所有的属性，因此它能检测到构造函数。下面是它如何工作的。
通过将它的__proto__属性赋值为null来覆盖Function的构造函数属性也是可能的，这将使得构造函数未定义，但是如果使用Function.prototype.constructor，您能得到原始的Function构造函数。这被证明是另一个死胡同，因为为了覆盖Function构造函数的__proto__属性，你需要先访问它，
但是Angular会阻止。你能覆盖每个函数的构造函数属性，但是很不幸你不能访问原始的。
在Firefox
51中，使用__lookupGetter__得到函数的调用者是可能的。所有的其他的浏览器阻止使用这种方式。但是在Angular中没有提供函数，再次是个死胡同。
我继续看了使用__defineGetter__和valueOf来创建Function构造函数的别名。
你也能使用getter执行一个函数，通常需要一个对象。因此“this”值成为赋值给getter的对象。例如，__proto__函数不会无对象执行，使用getter允许你使用__proto__函数得到对象原型。
上面的技术将失败，因为即使我创建了Function构造函数的别名，还是没有办法在不破坏构造函数属性的情况下访问Function构造函数。但是它给了我一个想法。也许我可以在窗口作用域内使用__lookupGetter__/__defineSetter__。
在Chrome中，你能保存__lookupGetter__的引用，并且使用窗口作为默认的对象，使你能访问文档对象。
你也能使用__defineSetter__。
Angular将直接函数调用（如alert()）转化为Angular对象的方法调用。为了解决这个，我使用间接调用‘(l=l)’，使得__lookupGetter__执行于窗口上下文中，保证了文档对象的访问。
现在有了文档对象的访问，因此能终结Angular了？还没有。Angular还会检查每个对象是否是DOM值：
当getter函数被调用时，Angular将阻止文档对象。我认为我能使用__defineGetter__赋值getter函数，但是这将破环窗口的引用，因此文档不会被返回。我测试了Chrome
56.0.2924.87中的每个属性以观察哪个getter是可靠的，只有__proto__和文档是可靠的。然后我决定测试Chrome beta
57.0.2987.54，得到了大量的getter。
我浏览了所有的getter，开始测试观察我是否能执行任意代码。我发现我能盗取localStorage和向导历史记录，但是没啥威胁。在测试一段时间后，我注意到事件对象是可靠的。每个事件对象有一个target属性，其引用了事件当前的DOM对象。结果是Angular不会检查这个属性，我能使用target属性执行代码得到文档对象和defaultView，以访问窗口然后赋值location。
[沙箱逃逸PoC 1.4.5（只支持chrome）](http://portswigger-labs.net/angular_dom_based_sandbox_escapes/?version=1.4.5#o=%7B%7D;l=o%5B%5B%27__lookupGetter__%27%5D%5D;%28l=l%29%28%27event%27%29%28%29.target.defaultView.location=%27javascript:alert%281%29%27;)
**0x06 打破更新版本的沙箱**
****在更新版本的Angular沙箱中，__lookupGetter__函数被保护了。你不再能使用数组对象访问它。为了在这些版本中利用，我需要一些Angular
eval，因此我们回顾下在上下文排序中的常规的Angular表达式中的利用。过滤器排序能使用一个字符串作为Angular表达式，因此我们能通过从外部排序调用嵌套的排序来得到我们的eval。  
首先我们执行第一部分的沙箱逃逸，确保charAt返回一个比单个字符长的字符串，打破我在[上篇文章](http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html)中提到的isIdent函数。然后针对我们的字符串payload调用过滤器排序。
[沙箱逃逸PoC 1.5.0（只支持chrome）](http://portswigger-labs.net/angular_dom_based_sandbox_escapes/?version=1.5.0#x=%7By:%27%27.constructor.prototype%7D;x.y.charAt=%5B%5D.join;%5B1%5D%7CorderBy:%27x=alert%281%29%27)
**0x07 打破CSP模式**
****之前的沙箱逃逸能在版本1.5.0-1.5.8上面有效。因此我从1.5.11开始，观察有什么可以破环。不幸的是，我不能在基于DOM的上下文中打破它，即使我发现了在属性中的一个绕过。使用我的对象枚举策略，我发现在chrome中，Angular中的$event对象在它的path属性中包含了一个数组。这个path属性包含的数组存储了文档和窗口。通过传递这个数组给过滤器排序，我能改变表达式的作用域，在窗口中执行：  
这个逃逸能在属性上下文中有效，但是当你启用了CSP，将失败。Angular似乎在CSP模式下会检查调用函数的窗口对象，因此能阻止沙箱逃逸运行。为了绕过这个，我需要间接调用alert函数，同时Array.from函数提供了简单的方法实现这个。它有两个参数；一个类似对象的数组和在数组每个对象执行的一个函数。我将在第一个参数中传递数组，在第二个参数中传递要调用的alert函数。这将绕过CSP模式，应该能在所有的Angular的版本中有效。
[CSP绕过1.5.11（只支持chrome）](http://portswigger-labs.net/angular_csp_bypass_1.5.11/?x=%3Cinput+autofocus%20ng-focus=%22%24event.path%7CorderBy:%27%21x?%5b%5d.constructor.from%28%5bx=1%5d,alert%29:0%27%22%3E)
**0x08 总结**
****当使用Angular时，避免用户输入直接传递给排序过滤器，用户输入的服务端反射也是。不管使用哪个版本的Angular，要明白正在解释的用户输入在什么上下文中，它通常最容易被利用绕过沙箱。  
如果你想在你的语言中添加沙箱，仔细考虑安全效益是够大于开发成本，以及是否有潜在的隐患。
**0x09 基于DOM的Angular沙箱逃逸的列表**