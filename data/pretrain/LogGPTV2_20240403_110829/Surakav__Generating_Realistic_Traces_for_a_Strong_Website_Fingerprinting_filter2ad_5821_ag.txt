TPR
96.24
38.37
83.41
0
86
88
0
22
23
Tik-Tok
TPR
96.68
37.93
-
FPR
0.70
2.66
-
We also include the results for Random-WT for comparison.
Random-WT [10] is a variant of Walkie-Talkie that requires
no prior knowledge of burst sequences. It works by adding
a random number of dummy packets to each burst and
inserting fake bursts randomly. Gong et al. [41] gave the ﬁrst
implementation evaluation for Random-WT in the open-world
scenario. Since we use the same web list, we directly take their
results for reference. With a similar overhead, Random-WT is
far less effective than GAN-WT. It reduces the TPR of DF
by only 13%, while GAN-WT is able to reduce that by 58%.
However, Surakav is still far more efﬁcient than GAN-WT.
With slightly lower overhead (81% in data and 17% in time),
Surakav is able to reduce the TPR of DF by 88% (96% → 8%)
(see Table III).
The results indicate that Random-WT wastes a lot of over-
head budget, and the random padding fails to make the original
pattern of bursts less distinguishable. By contrast, GAN-WT
successfully implements the original idea of molding traces
from one class with another class by generating realistic
decoy traces. Although it leads to a higher data overhead
compared with vanilla Walkie-Talkie, GAN-WT bypasses the
two assumptions of Walkie-Talkie and is fully deployable.
B. TrafﬁcSliver
TrafﬁcSliver [14] is designed to defend against malicious
entry nodes. The main idea is to route network trafﬁc onto
several sub-circuits between the client and the middle node
so that any malicious entry node will fail to ﬁngerprint the
client since it only sees part of the trace. 4 To further limit the
information leakage by any sub-trace on a sub-circuit, Trafﬁc-
Sliver uses a “batched weighted random (BWR)” split strategy
that randomly dispatches data onto the sub-circuits in small
batches. TrafﬁcSliver is effective against single malicious entry
nodes and uses little overhead, especially when we open up
as many sub-circuits as possible. However, the protection of
TrafﬁcSliver would be weakened if the attacker controls more
than one entry node along all the sub-circuits [14]. In the worst
case where the attacker controls all the entry nodes, there will
be nearly no accuracy loss in ﬁngerprinting the webpages.
Similarly, TrafﬁcSliver will fail against a local attacker who
is able to see the complete trafﬁc before splitting.
To ﬁx the vulnerability, we can combine Surakav with
TrafﬁcSliver to create a hybrid WF defense, which we call
4There are two versions of TrafﬁcSliver: one works on the application layer
and the other works on the network layer. We only discuss the network-layer
defense since it is shown to be much more effective.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:20 UTC from IEEE Xplore.  Restrictions apply. 
1569
close to random guessing.
On the other hand, A2 achieves 12% TPR and 1.4% FPR
with DF. However, Tik-Tok greatly outperforms DF in this
case, doubling the TPR value (12% → 23%) with a similar
FPR (2%). One possible reason for the difference in perfor-
mance is that the timestamps used by Tik-Tok may be more
informative than the packet sizes in this data-limited attack
scenario. GAN-TS is shown to be rather effective against A2.
When it is in the lightweight setting (i.e., δ = 0.6), the best
TPR of A2 is only 5% using Tik-Tok. When δ is set to 0.4,
the TPR of both attacks is lower than 1%. The split strategy
used by GAN-TS signiﬁcantly limits the information A2 can
learn from the sub-traces. The use of Surakav further reduces
the time information leaked on each sub-circuit.
To counter an attacker like A2, we only need to use a
lightweight setting to save some overhead. If we want to
defend against any potential attacker between the client and
the middle node, then we can choose to use a heavyweight
setting by decreasing δ.
VII. DISCUSSION AND LIMITATIONS
Simulation or implementation to evaluate a defense?
Simulation allows us to quickly evaluate a defense, while
implementation requires the collection of a new dataset for
every setting, including comparison with other defenses. How-
ever, previous work has shown that simulation can be inaccu-
rate [41]. Assumptions made for simulation can signiﬁcantly
affect evaluation results. Therefore, we decided to evaluate
fully implemented defenses, including our defense and its
competitors.
Ideally, we should deploy the defenses on the middle node
since the entry could be a potential WF attacker. However, we
have to modify Tor’s source code and change its protocols
to do so. Currently, Tor is not
in favor of delaying real
packets due to the potential risk of out-of-memory errors on
relays [48]. Due to this technical limitation, we instead deploy
defenses on the entry node. Using WFDefProxy [41], we
are able to implement most existing defenses as pluggable
transports, leaving Tor unaffected. We believe that placing
Surakav onto the middle node will not worsen Surakav’s
performance compared to what it achieves on the entry node.
In our experiments, we use a private bridge as our
cooperating proxy and let a ﬁxed number of ten clients
connect to it in parallel to speed up the crawling process. In
the real-world scenario, the number of clients connecting to
a Tor relay could vary over time, causing variable amounts
of congestion which affects packet scheduling and thus the
resultant defended traces. Our overhead values should be
considered representative of a low congestion setup and
further work would be needed to investigate other setups.
Trace generation for website ﬁngerprinting defenses.
Trace patterns are commonly used in WF defenses. Walkie-
Talkie [10] and Supersequence [2] assume that trace patterns
are known in advance, while Tamaraw [13] uses a ﬁxed pattern
for all the webpages. In this work, we try to provide a new
Fig. 10: Threat model for TrafﬁcSliver. We consider two
different attackers: A1 is an attacker under the same local
network with the victim that can see the complete trace; A2
is a malicious entry node who only sees one of the sub-traces.
TABLE VIII: Performances of GAN-TS with different secu-
rity levels against two attackers in the open-world scenario.
“None” represents the original TrafﬁcSliver. All values are in
percentages.
Attacker A1
Strength
None
δ = 0.6
δ = 0.4
DF
TPR
96.05
26.17
2.28
FPR
0.76
4.37
1.18
Tik-Tok
TPR
96.37
27.47
1.46
FPR
0.70
3.55
0.27
Attacker A2
DF
TPR
11.57
2.97
0.33
FPR
1.39
4.66
1.01
Tik-Tok
TPR
22.81
5.31
0.65
FPR
1.97
3.17
0.44
GAN-TS. GAN-TS utilizes Surakav to obfuscate the trafﬁc
while splitting it with the BWR split strategy. The splitting
itself incurs no data overhead and little time overhead, so the
overhead of GAN-TS is close to that of Surakav.
1) Evaluation Setup: To evaluate GAN-TS, we consider
two types of attackers in the open-world scenario, as shown
in Figure 10. A1 is a local attacker under the same local
network with the client trying to monitor the client’s activ-
ities. Since A1 is able to see the complete trace before the
packets are dispatched onto the sub-circuits, he launches the
attack following the conventional methodology. A2 is a single
malicious entry node that is chosen by the client. A2 can only
see packets that come across their own sub-circuit. To increase
the attack success rate, A2 will act like a normal client to
collect all the sub-traces over multiple sub-circuits as a training
set. Then A2 will use the trained classiﬁer for WF. The Tor
Project has already made a proposal to split trafﬁc into two
sub-circuits [47]. Therefore, we evaluate TrafﬁcSliver under
only two sub-circuits since this is the most likely case for its
deployment. We simulate the BWR splitting strategy on our
collected datasets.
2) Results: Table VIII shows the results in the open-world
scenario. As we can see, when the attacker is A1, DF and
Tik-Tok can still achieve a TPR of over 96% with a 0.7%
FPR. This is not surprising, as the attacker is able to see the
complete trace. The TPR of the attacks quickly drops to around
27% if a lightweight version of Surakav (δ = 0.6) is applied.
The FPR of DF is increased to 4% while that of Tik-Tok is
3.6%. When we incorporate TrafﬁcSliver with Surakav in the
heavyweight setting (δ = 0.4), the performance of GAN-TS
is even better. The attacker’s best TPR is only 2%, which is
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:20 UTC from IEEE Xplore.  Restrictions apply. 
1570
EntryMiddleExitLocal networkSub-circuitAAAB9HicbVDLSgMxFL2pr1pfVZdugkVwVWakqMuqG5cV7APaoWTSTBuayYxJplCGfocbF4q49WPc+Tdm2llo64HA4Zx7uSfHjwXXxnG+UWFtfWNzq7hd2tnd2z8oHx61dJQoypo0EpHq+EQzwSVrGm4E68SKkdAXrO2P7zK/PWFK80g+mmnMvJAMJQ84JcZKXi8kZkSJSG9mfbdfrjhVZw68StycVCBHo1/+6g0imoRMGiqI1l3XiY2XEmU4FWxW6iWaxYSOyZB1LZUkZNpL56Fn+MwqAxxEyj5p8Fz9vZGSUOtp6NvJLKRe9jLxP6+bmODaS7mME8MkXRwKEoFNhLMG8IArRo2YWkKo4jYrpiOiCDW2p5ItwV3+8ippXVTdy2rtoVap3+Z1FOEETuEcXLiCOtxDA5pA4Qme4RXe0AS9oHf0sRgtoHznGP4Aff4AoLqSBA==A1AAAB9HicbVBNTwIxFHyLX4hfqEcvjcTEE9klRD2iXjxiIkgCG9ItXWhou2vbJSEbfocXDxrj1R/jzX9jF/ag4CRNJjPv5U0niDnTxnW/ncLa+sbmVnG7tLO7t39QPjxq6yhRhLZIxCPVCbCmnEnaMsxw2okVxSLg9DEY32b+44QqzSL5YKYx9QUeShYygo2V/J7AZkQwT69n/Vq/XHGr7hxolXg5qUCOZr/81RtEJBFUGsKx1l3PjY2fYmUY4XRW6iWaxpiM8ZB2LZVYUO2n89AzdGaVAQojZZ80aK7+3kix0HoqAjuZhdTLXib+53UTE175KZNxYqgki0NhwpGJUNYAGjBFieFTSzBRzGZFZIQVJsb2VLIleMtfXiXtWtW7qNbv65XGTV5HEU7gFM7Bg0towB00oQUEnuAZXuHNmTgvzrvzsRgtOPnOMfyB8/kDoj6SBQ==A2solution to obtain ﬂexible trace patterns: synthesizing traces
with a GAN. To the best of our knowledge, we are the
ﬁrst to use a GAN to generate traces for a WF defense.
There are several beneﬁts for having such a generator. Firstly,
distributing a generator is much cheaper than distributing
traces directly. Secondly, we can generate as many traces as
we want without worrying about creating duplicates.
Surakav chooses to generate a trace of a randomly selected
webpage, no matter which webpage the client is visiting. It
is possible to further reduce the overhead by using a more
sophisticated strategy. For example, we can give the generator
some prior knowledge on the page the client is going to visit
so that it may compute an optimal decoy page and return a
fake trace of that page. The strategy must be well-designed so
that the correlation between the real page and the decoy page
is weak. We leave this as future work.
VIII. CONCLUSION
In this paper, we presented Surakav — a tunable, practical
defense that is effective against the best website ﬁngerprint-
ing attacks. Surakav makes use of a Generative Adversarial
Network (GAN) to generate sending patterns and regulates
buffered data according to the generated patterns. The architec-
ture of the GAN is specially designed for our trace generation
task. We also introduce two mechanisms to dynamically adjust
the sending patterns in real time in order to achieve a balance
between security and overhead. Surakav succeeds by using
random time gaps to send bursts and limiting the burst size
information with randomly-generated trace patterns.
To show the effectiveness of our defense, we implemented
and analyzed our defense on the live Tor network. We com-
pared our defense with the state-of-the-art defenses extensively
under both the multi-page setting and the harder one-page
setting. We showed that Surakav outperformed FRONT against
the strongest attacks with 42% less data overhead. At a
similar overhead as FRONT, the TPR of the strongest attack
was further reduced by 35%. In the strong defense category,
Surakav required 50% less overhead in total than Tamaraw
to defeat all the attacks, showing that it is highly effective
in thwarting website ﬁngerprinting attacks. We also showed
that we can fortify existing defenses with the trace generator;
both Walkie-Talkie and TrafﬁcSliver were strengthened with
the help of trace generators.
ACKNOWLEDGMENT
This work is supported by grant ITS/440/18FP from the
Hong Kong Innovation and Technology Commission and
research grants from Huawei.
AVAILABILITY
We publish our code used in this paper as follows:
• Source code to train the generator can be found at
https://github.com/websiteﬁngerprinting/wfd-gan.
• Source code for the modiﬁed WFDefProxy which imple-
ments Surakav and other defenses can be found at
https://github.com/websiteﬁngerprinting/surakav-imp.
REFERENCES
[1] R. Dingledine, N. Mathewson, and P. F. Syverson, “Tor: The second-
generation onion router,” in Proceedings of the 13th USENIX Security
Symposium. USENIX Association, 2004, pp. 303–320.
[2] T. Wang, X. Cai, R. Nithyanand, R. Johnson, and I. Goldberg, “Effective
attacks and provable defenses for website ﬁngerprinting,” in Proceedings
of the 23rd USENIX Security Symposium. USENIX Association, 2014,
pp. 143–157.
[3] A. Panchenko, F. Lanze, J. Pennekamp, T. Engel, A. Zinnen, M. Henze,
and K. Wehrle, “Website ﬁngerprinting at internet scale,” in Proceedings
of the 23rd Annual Network and Distributed System Security Symposium.
The Internet Society, 2016.
[4] J. Hayes and G. Danezis, “k-ﬁngerprinting: A robust scalable website
ﬁngerprinting technique,” in Proceedings of the 25th USENIX Security
Symposium. USENIX Association, 2016, pp. 1187–1203.
[5] P. Sirinam, M. Imani, M. Ju´arez, and M. Wright, “Deep ﬁngerprinting:
Undermining website ﬁngerprinting defenses with deep learning,” in
Proceedings of the 25th ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2018, pp. 1928–1943.