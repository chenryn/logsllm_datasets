cally heavy and theory-oriented manner. Indeed, the state-of-the-
artwork [33] provides a generic construction of fuzzy signatures
but the underlying building blocks are themselves novel to their
work, and it is difficult to extract the practical relevance of such
construction. An equally large (or perhaps larger) issue is that a
critical discussion on whether real-life biometrics can be used to se-
curely instantiate fuzzy signatures is completely missing. [33] builds
on the assumption that biometrics can provide large min-entropy.
However, it is not clear whether this is a feasible assumption to
make for real-world biometrics, and besides, it is not even clear
how to validate the feasibility of such an assumption. Therefore,
although [33] provides a potentially elegant solution to a more ideal
biometric authentication system, the feasibility of the solution is
completely left open to questions. We finally note that concrete dis-
cussions on biometric entropy is a reoccurring issue for FE as well
and this is usually one of the main sources impeding a theoretically
sound deployment of biometric authentication in practice.
2[33] is the full-version of [32] and [21] with additional sections. Below, we mainly
cite the full-version [33].
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2048jointly with the security of a linear sketch scheme, which we coin
as the DL with sketch (DLsketch) assumption. We provide discussion
on the hardness of DLsketch, and give some collateral evidence that
if the quantity that we call conditional false matching rate ConFMR
of the distribution of fuzzy biometrics is sufficiently small, then
the DLsketch assumption is implied by the standard DL assump-
tion. Moreover, even if ConFMR is relatively large (which may be
the case in practice), we show that the DLsketch assumption holds
uncontionally in the generic group model [31] .
(ii) Statistical method for evaluating fuzzy biometrics. There are two
conditions that fuzzy biometrics must satisfy for fuzzy signatures.
As mentioned above, one is that ConFMR must be small. The other
is that another quantity called the false non-matching rate FNMR
must be small. Roughly, FNMR and ConFMR dictate the correctness
and security of fuzzy signatures, respectively, where concretely we
require FNMR ⪅ 5%(≈ 2−4.32) and ConFMR ⪅ 2−112. Prior works
[18, 33] failed to provide any formal evidence as to whether natural
real-world biometrics can provide such amount of FNMR and ConFMR.
This is a major setback for fuzzy signatures (and possibly one of
the reasons why it has not attracted much serious attention) since
a user may end up requiring multiple biometrics, say its iris and
fingerprints of both hands, to authenticate itself. Such a procedure
would severely deteriorate user experience and would defeat the
purpose of using fuzzy signatures. While FNMR is a standard metric
in the area of biometrics authentication and we know how to empir-
ically estimate them using real-world biometric datasets, no such
method is known for ConFMR since it is a metric intertwined with
a linear sketch. To make matters worse, since ConFMR is a much
smaller value (i.e., 2−112) compared to FNMR (i.e., 5%), we cannot use
prior methods to provide any meaningful estimations.
Thus, our second contribution is to establish a systematic proce-
dure to evaluate the values of ConFMR of any fuzzy biometrics. We
divide the problem of estimating ConFMR into two subproblems and
provide details on how to solve them individually. The first sub-
problem is formulated in a way to detach the notion of linear sketch
from ConFMR and allows us to view the problem entirely as a bio-
metric problem, while the second subproblem deals with converting
the solution of the biometric problem to the initial problem. At a
high level, our approach to the two subproblems is the following:
To solve the first subproblem, we borrow techniques from extreme
value analysis (EVA), a statistical method for evaluating very rare
events by using only an “extreme” subset of a given dataset [4, 30].
This allows us to estimate ConFMR ⪅ 2−112 with high confidence.
For the second subproblem, we use statistical t-tests to (informally)
establish that certain statistics of biometrics are uncorrelated with
the sketch.
(iii) Efficiency analysis. Finally, we use real-world finger-vein bio-
metrics to conclude that fuzzy signatures can be constructed effi-
ciently and securely using only 4 finger-veins from a single hand.
That is, a user only needs to put one of their hands on the device to
authenticate itself and nothing more. We first estimate the concrete
values of FNMR and ConFMR using the method stated above and exper-
imentally show that the conditions FNMR ⪅ 5% and ConFMR ⪅ 2−112
hold. We then combine everything and provide a concrete set of
parameters for our fuzzy signature scheme. For instance, to achieve
112-bits of security, the signature size can be as small as 1256 bytes,
and the running time for both signing and verification is only a few
milliseconds.
Organization. In Sec. 2, we define fuzzy signatures and prepare the
notion of fuzzy key setting that allows us to handle biometrics in a
cryptographically sound manner. In Sec. 3, we define linear sketch:
a tool allowing to bridge biometric data and cryptographic keys. In
Sec. 4, we provide a simple construction of fuzzy signature based
on a slight variant of the DL problem assuming that the biometrics
satisfies some conditions. In Sec. 5, we equip the fuzzy key setting
with a tool called lattice, and propose a concrete instantiation of a
linear sketch scheme. In Sec. 6, we provide statistical techniques to
estimate whether a specific type of biometrics satisfies the above
mentioned conditions. Finally, in Sec. 7, we combine all the dis-
cussions together and provide a concrete instantiation of fuzzy
signature using real-world finger-vein biometrics.
2 FUZZY DATA AND FUZZY SIGNATURES
To formally define fuzzy signatures, we must first formalize how we
treat fuzzy data (i.e., biometrics); how are fuzzy data represented,
what is the metric to argue closeness of fuzzy data, what kind of
error distribution we consider to model “fuzziness” of data, and so
on. To this end we first define the notion of fuzzy key setting below.
2.1 Fuzzy Key Setting
A fuzzy key setting F consists of the following 5-tuple(X,X, AR, Φ, ϵ)
and defines all the necessary information to formally treat fuzzy
data in a cryptographic scheme.
Fuzzy Data Space X : This is the space to which a possible fuzzy
data x belongs. We assume that X forms an abelian group.
Distribution X : The distribution of fuzzy data over X. I.e., X :
X → R.
Acceptance Region Function AR : X → 2X : This function maps a
fuzzy data x ∈ X to a subspace AR(x) ⊂ X of the fuzzy data
space X. (If x′ ∈ AR(x), then x′ is considered “close” to x.)
We require x ∈ AR(x) for all x ∈ X. Based on AR, the false
matching rate (FMR) and the false non-matching rate (FNMR)
are determined. We define FMR by FMR := Pr[x, x′ ← X :
x′ ∈ AR(x)]. FNMR is defined below.
Error Distribution Φ : This models the measurement error of fuzzy
data. We assume the “universal error model” where the mea-
surement error is independent of the users.
Error Parameter ϵ: The error parameter ϵ ∈ [0, 1] defines FNMR,
where FNMR := Pr[x ← X; e ← Φ : x + e (cid:60) AR(x)] ≤ ϵ.
2.2 Fuzzy Signatures
Using the fuzzy key setting, we can formally define fuzzy signatures.
Note that in a fuzzy signature scheme, a signing key sk will not be
explicitly defined since the fuzzy data x will play the role of the
signing key.
Definition 2.1 (Fuzzy Signature). A fuzzy signature scheme ΠFS
for a fuzzy key setting F = (X,X, AR, Φ, ϵ) with message space M
is defined by the following algorithms:
FS.Setup(1κ , F) → ppFS : The setup algorithm takes as inputs
the security parameter 1κ and the fuzzy key setting F as
input and outputs a public parameter ppFS.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2049FS.KeyGen(ppFS, x) → vkFS : The key generation algorithm takes
as inputs the public parameter ppFS and a fuzzy data x ∈ X,
and outputs a verification key vkFS.
FS.Sign(ppFS, x′, M) → σFS : The signing algorithm takes as in-
puts the public parameter ppFS, a fuzzy data x′ ∈ X and a
message M ∈ M, and outputs a signature σFS.
FS.Vrfy(ppFS, vkFS, M, σFS) → ⊤ or ⊥ : The (deterministic) verifi-
cation algorithm takes as inputs the public parameter ppFS,
a verification key vkFS, a message M ∈ M and a signature
σFS, and outputs ⊤ or ⊥.
Due to page limitation, the correctness and EU-CMA security of
fuzzy signatures is provided in App. A. Roughly, correctness stip-
ulates that a signature generated using fuzzy data x verifies with
respect to a verification key generated by a fuzzy data x′ ∈ AR(x).
EU-CMA security is similar to those of standard signatures except
that the challenger uses x′ ∈ AR(x) to respond to signing queries
rather than the original x used to generate the verification key.
3 LINEAR SKETCH
In this section, we define a linear sketch, which has served as the
main building block in previous generic constructions of fuzzy
signature [33].3 Recall the main purpose of this was to “bridge”
fuzzy data and standard cryptographic operations. It is associated
with a fuzzy key setting and consists of two main algorithms Sketch
and DiffRec (see Fig. 3). The formal definition is provided in Def. 3.1
and a high-level description of the linear sketch follows.
Figure 3: Illustration of the linear sketch when Λ = Zp.
Overview. Sketch is used to “process” a fuzzy data x to extract a
cryptographic secret (that we call a proxy key) a that is an element of
some abelian group and with which actual cryptographic operations
(such as the signing operation of the Schnorr signature scheme)
are performed. Sketch also generates a corresponding “sketch” c of
x and a. The sketch c is used to “absorb” the fluctuation occurred
in measuring fuzzy data. For example, suppose a fuzzy data is
measured twice (e.g. once for key generation and once for signing)
and sketch-proxy key pairs (c, a) and ((cid:101)c , ˜a) are generated (see Fig. 3).
the two sketches c and(cid:101)c , we are able to compute the difference
Then by using the difference reconstruction algorithm DiffRec with
∆a = ˜a − a. This difference ∆a is then used in the verification
algorithm of our fuzzy signature scheme to “adjust” the difference
in the proxy keys a and ˜a. Since the proxy key a and the original
fuzzy data x are used as secret information, it is naturally required
that the sketch c does not reveal too much of a and x.
Definition. Formally, a linear sketch associated with a fuzzy key
setting F and an abelian group Λ is defined as follows.
3We slightly deviate from prior definitions: we adopt a “key encapsulation”-like syntax
while [33] adopts an “encryption”-like syntax. Our syntax allows for a more simple,
direct, and efficient construction.
Definition 3.1 (Linear Sketch). Let F = (X,X, AR, Φ, ϵ) be a fuzzy
key setting and Λ = (K, +) be a description of a (finite) abelian
group. A linear sketch scheme ΠLinS for F and Λ is defined by the
following P PT algorithms:
LinS.Setup(F , Λ) → ppLS : The setup algorithm takes as input the
fuzzy key setting F and the description Λ, and outputs a
public parameter ppLS. Here, we assume ppLS includes the
information of Λ = (K, +).
Sketch(ppLS, x) → (c, a) : The deterministic sketch algorithm takes
as inputs the public parameter ppLS and a fuzzy data x ∈ X,
and outputs a sketch c and a proxy key a ∈ K.
tion algorithm takes as inputs the public parameter ppLS and
puts the difference ∆a ∈ K.
DiffRec(ppLS, c,(cid:101)c ) → ∆a : The deterministic difference reconstruc-
two sketches (c,(cid:101)c ) (supposedly output by Sketch), and out-
Correctness. We say a linear sketch scheme ΠLinS for a fuzzy key
setting F and Λ is correct if for all x, x′ ∈ X such that x′ ∈ AR(x)
and all ppLS ∈ LinS.Setup(F , Λ), if (c, a) ← Sketch(ppLS, x) and
Linearity. We say a linear sketch scheme ΠLinS satisfies linear-
ity if there exists a deterministic PT algorithm Mc satisfying the
following: For all ppLS ∈ LinS.Setup(F , Λ) and all x, e ∈ X, if
((cid:101)c , ˜a) ← Sketch(ppLS, x′), then we have ˜a−a = DiffRec(ppLS, c,(cid:101)c ).
(c, a) ← Sketch(ppLS, x) and ((cid:101)c , ∆a) ← Mc(ppLS, c, e), then we
have Sketch(ppLS, x + e) = ((cid:101)c , a + ∆a).
In above, we have not formally defined the intuition that a sketch
c does not leak the information of the fuzzy data x and proxy key a.
This is implicitly handled by the hardness assumption underlying
the security of the fuzzy signature, and we discuss it in the next
section (see Def. 4.2 for an overview).
4 FUZZY SIGNATURE FROM DISCRETE LOG
In this section, we provide a simple and efficient construction of
fuzzy signature based on a variant of the DL problem.
4.1 Construction
An overview of the construction of our fuzzy signature scheme
is depicted in Fig. 4. At a high level, our construction can be
ΠDL
FS
seen as providing a wrapper around the classical Schnorr signature
[29] to additionally handle fuzzy biometrics via the linear sketch.
During key generation (KeyGen in Fig. 4), a user with biometrics
x generates a sketch and a proxy key (c, a) from x using Sketch,
and sets vkFS as the sketch c and a verification key h = дa of the
Schnorr signature. To sign (Sign in Fig. 4), the user with biometrics
and uses ˜a ∈ Zp as an “ephemeral" signing key for the Schnorr
signature and constructs a Schnorr signature ˜σ. Here, note that
the Schnorr verification key of this signature is implicitly set as
˜h = д
Finally, to verify (Verify in Fig. 4) a fuzzy signature σFS, we first use
the algorithm DiffRec of the linear sketch to recover ∆a = ˜a − a.
Then, we use ∆a to recover the implicit Schnorr verification key ˜h
from h, and use it to verify ˜σ.
The formal description of our fuzzy signature scheme is provided
in Fig. 5. The image of the hash function H is Zp and is modeled as
a random oracle in the security proof.
x′ (slightly different from x) generates ((cid:101)c , ˜a) from x′ using Sketch
˜a. The fuzzy signature σFS consists of ˜σ and the sketch(cid:101)c .
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2050bounded by negl(κ):
G = (G, p, д) ← GGen(1κ);
ppLS ← LinS.Setup(F, Λ);
x ← X;(c , a) ← Sketch(ppLS, x)
Pr
: A(G, ppLS, дa , c) = a
 .
The following theorem guarantees security of our fuzzy signa-
ture scheme ΠDL
FS
under the DLsketch assumption.
Theorem 4.3. If the DLsketch problem is hard and the linear sketch
scheme ΠLinS satisfies linearity, then the fuzzy signature scheme ΠDL
FS
in Fig. 5 is EU-CMA secure.
The proof is similar to that of the Schnorr signature [29], except
that we additionally need to simulate the sketch c in the verification
key and signatures without knowledge of the secret fuzzy data x.
At a high level, the sketch in the verification key is handled by
the DLsketch assumption and the sketches in the signatures are
handled by the linearity of the linear sketch (see Def. 3.1). Due to
page limitation, we omit the full proof to App. B.
5 INSTANTIATING LINEAR SKETCH OVER
LATTICES
In this section, we present our linear sketch scheme. Our scheme is
constructed over a fuzzy key setting with fuzzy data space X = Rn.4
Namely, we consider the natural setting where biometrics are repre-
sented by an n-dimensional vector in R. However, working directly
with fuzzy data in Rn is non-trivial since typical computations of
cryptographic primitives (and in particular the Schnorr signature
scheme) are performed over a discrete space such as Zp. Moreover,
recall that a linear sketch scheme needs to satisfy correctness and
linearity, which roughly requires a linearity preserving mapping
of the fuzzy data space X to the sketch and proxy key spaces. To
deal with these issues, we associate the fuzzy data space X with a
mathematical object called lattice known to have a discretized and
linear nature. This connects fuzzy data and cryptographic primi-
tives together, and allows to construct a linear sketch scheme.
We also introduce a specific lattice called a triangular lattice and
show that it fits well with a fuzzy data space endowed by Euclidean
metric. We finally discuss the hardness of the DLsketch assumption
with respect to such concrete linear sketch scheme in Sec. 5.4 and ??.
5.1 Fuzzy Key Setting with a Lattice
We first introduce the notion of lattices and then provide a concrete
definition of a fuzzy key setting based on lattices.
Lattice background. Let n ∈ N and B ∈ Rn×n.
• A lattice spanned by B, denoted by L(B), is defined by
L(B) := {Bz|z ∈ Zn}. B is called the basis of L(B).
• For a vector x ∈ Rn and a lattice L = L(B), the closest vector
(or lattice point) of x in L, denoted by CVL(x), is a vector
y ∈ L satisfying ∥x − y∥2 ≤ ∥x − Bz∥2 for any z ∈ Zn.5
• For a lattice L = L(B) and a vector y ∈ L, the Voronoi
region of y, denoted by VRL(y), is defined by VRL(y) :=