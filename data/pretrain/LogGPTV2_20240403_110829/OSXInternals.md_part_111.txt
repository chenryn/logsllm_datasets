attempts to send exception messages to the most specific port first. Exception ports are used for
implementing both error-handling and debugging mechanisms.
A host port represents the host on which the task is running.
A bootstrap port is used to send messages to the Bootstrap Server, which is essentially a local name
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 21 of 153
server for services accessible through Mach ports. Programs can contact the Bootstrap Server
requesting the return of other system service ports.
A set of well-known system ports are registered for a taskthese are used by the runtime system to
initialize the task. There can be at most TASK_PORT_REGISTER_MAX such ports. The
mach_ports_register() routine can be used to register an array of send rights, with each right
filling a slot in the itk_registered array in the task structure.
Host Special Ports
A host object is represented in the kernel by host_data_t, which is an alias for struct
host [osfmk/kern/host.h]. This structure contains an array of host-level special ports and
another array of host-level exception ports. The host special ports are host port, host
privileged port, and host security port. These ports are used for exporting different interfaces
to the host object.
The host port is used as an argument in "safe" Mach routines that retrieve unprivileged
information about the host. Acquiring send rights to this port does not require the calling task
to be privileged. The host privileged port, which can be acquired only by a privileged task, is
used in privileged Mach routines, such as host_processors(), which retrieves a list of send
rights representing all processors in the system. The host security port is used to change a
given task's security token or to create a task with an explicit security token.
When the IPC subsystem is initialized, each host-level special port is set to represent a send
right to the same port.
When a task is created, a new port is allocated in the kernel's IPC space. The task structure's itk_self
field is set to the name of this port, whereas the itk_self member contains a send right to this port. A
new IPC space is created for the task and assigned to the task structure's itk_space field. The new task
inherits the parent's registered, exception, host, and bootstrap ports, as the kernel creates naked[7] send
rights for the child for each of these ports from the existing naked rights of the parent. As noted in Chapter
7, other than these ports, Mach ports are not inherited across task creationthat is, across the fork() system
call.
[7] A naked right exists only in the context of the kernel task. It is so named because such a
right is not inserted into the port namespace of the kernel taskit exists in limbo.
As we saw in Chapter 5, /sbin/launchd is the first user-level program executed by the kernel. launchd
is the ultimate parent of all user processes, analogous to the traditional init program on Unix systems.
Moreover, launchd also acts as the Bootstrap Server.
On Mac OS X versions prior to 10.4, the first user-level program executed by the kernel
is /sbin/mach_init, which forks and runs/sbin/init. The launchd program subsumes the
functionality of both mach_init and init in Mac OS X 10.4.
During its initialization, launchd allocates several Mach ports, one of which it sets as its bootstrap port by
calling task_set_bootstrap_port(). This port (technically a subset of this port, with limited scope) is
inherited by new tasks as they are created, allowing all programs to communicate with the Bootstrap
Server.
task_set_bootstrap_port() is a macro that resolves to a call to task_set_special_port() with
TASK_BOOTSTRAP_PORT as an argument.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 22 of 153
9.3.4. Threads and IPC
Figure 99 shows the IPC-related data structures associated with a thread. Like a task, a thread contains a
self port and a set of exception ports used for error handling. Whereas a newly created task's exception
ports are inherited from the parent, each of a thread's exception ports is initialized to the null port when
the thread is created. Both task and thread exception ports can be programmatically changed later. If a
thread exception port for an exception type is the null port, the kernel uses the next most specific port: the
corresponding task-level exception port.
Figure 99. IPC-related data structures associated with a Mach thread
// osfmk/kern/thread.h
struct thread {
...
struct ipc_kmsg_queue ith_messages;
// reply port -- for kernel RPCs
mach_port_t ith_rpc_reply;
...
// not a right -- ip_receiver does not hold a reference for the space
// used for representing a kernel object of type IKOT_THREAD
struct ipc_port *ith_self;
// "self" port -- a "naked" send right made from ith_self
// this is the thread's kernel port (THREAD_KERNEL_PORT)
struct ipc_port *ith_sself;
// "exception" ports -- a send right for each valid element
struct exception_action exc_actions[EXC_TYPES_COUNT];
...
};
The thread structure's ith_rpc_reply field is used to hold the reply port for kernel RPCs. When the
kernel needs to send a message to the thread and receives a reply (i.e., performs an RPC), it allocates a
reply port if the current value of ith_rpc_reply is IP_NULL.
9.3.5. Port Allocation
Now that we are familiar with port-related data structures and the roles ports play, let us look at the
important steps involved in the allocation of a port right. Figure 910 shows these steps.
Figure 910. The allocation of a port right
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 23 of 153
Although mach_port_allocate() is typically used to allocate a port right, there exist more flexible
variants such as mach_port_allocate_name() and mach_port_allocate_qos() that allow additional
properties of the new right to be specified. All these routines are special cases of
mach_port_allocate_full(), which is also available to user space.
typedef struct mach_port_qos {
boolean_t name:1; // caller-specified port name
boolean_t prealloc:1; // preallocate a message buffer
boolean_t pad1:30;
natural_t len; // length of preallocated message buffer
} mach_port_qos_t;
kern_return_t
mach_port_allocate_full(
ipc_space_t space, // target IPC space
mach_port_right_t right, // type of right to be created
mach_port_t proto, // subsystem (unused)
mach_port_qos_t *qosp, // quality of service
mach_port_name_t *namep); // new port right's name in target IPC space
mach_port_allocate_full() creates one of three types of port rights based on the value passed as the
right argument:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 24 of 153
A receive right (MACH_PORT_RIGHT_RECEIVE), which is the most common type of right created
through this function
An empty port set (MACH_PORT_RIGHT_PORT_SET)
A dead name (MACH_PORT_RIGHT_DEAD_NAME) with one user reference
It is possible to create a port right with a caller-specified name, which must not already be in use for a port
right in the target IPC space. Moreover, the target space must not be a fast IPC space. The caller can
specify a name by passing a pointer to it in the namep argument and setting the name bit-field of the
passed-in quality of service (QoS) structure. The latter is also used to designate the new port as a real-time
port that requires QoS guarantees. The only manifestation of a QoS guarantee is that a message buffer is
preallocated and associated with the port's internal data structure. The buffer's size is specified by the len
field of the QoS structure. The kernel uses a port's preallocated bufferif it has onewhen sending messages
from the kernel. This way, a sender of critical messages can avoid blocking on memory allocation.
As Figure 910 shows, mach_port_allocate_full() calls different internal "alloc" functions based on
the type of right. In the case of a receive right, ipc_port_alloc_name() [osfmk/ipc/ipc_port.c] is
called if the caller has mandated a specific name; otherwise, ipc_port_alloc()
[osfmk/ipc/ipc_port.c] is called. ipc_port_alloc() calls ipc_object_alloc()
[osfmk/ipc/ipc_object.c] to allocate an IPC object of type IOT_PORT. If successful, it calls
ipc_port_init() [osfmk/ipc/ipc_port.c] to initialize the newly allocated port and then returns.
Similarly, ipc_port_alloc_name() calls ipc_object_alloc_name() to allocate an IOT_PORT object
with a specific name.
Allocation of an IPC object includes the following steps.
 Allocate an IPC object structure (struct ipc_object [osfmk/ipc/ipc_object.h]) from the
appropriate zone for the IPC object type. Note that a pointer to this structure is the in-kernel
representation of the port (struct ipc_port [osfmk/ipc/ipc_port.h]).
Initialize the mutex within the IPC object structure.
 Allocate an IPC object entry structure (struct ipc_entry [osfmk/ipc/ipc_entry.h]). This
operation first attempts to find a free entry in the given IPC space's table using the "first free" hint.
If there are no free entries in the table, the table is grown. If the table is already being grown
because of some other thread, the caller blocks until the growing finishes.
The mach_port_names() routine can be used to retrieve a list of ports, along with their types, in a given
IPC space. Moreover, mach_port_get_attributes() returns various flavors of attribute information
about a port. The program shown in Figure 911 lists details of port rights in a (BSD) task given its process
ID. Note that the mach_port_status structure populated by mach_port_get_attributes() contains
other fields besides those printed by our program.
Figure 911. Listing the Mach ports and their attributes in a given process
// lsports.c
#include 
#include 
#include 
#define PROGNAME "lsports"
#define EXIT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); exit((retval)); }
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 25 of 153
void
print_mach_port_type(mach_port_type_t type)
{
if (type & MACH_PORT_TYPE_SEND) { printf("SEND "); }
if (type & MACH_PORT_TYPE_RECEIVE) { printf("RECEIVE "); }
if (type & MACH_PORT_TYPE_SEND_ONCE) { printf("SEND_ONCE "); }
if (type & MACH_PORT_TYPE_PORT_SET) { printf("PORT_SET "); }
if (type & MACH_PORT_TYPE_DEAD_NAME) { printf("DEAD_NAME "); }
if (type & MACH_PORT_TYPE_DNREQUEST) { printf("DNREQUEST "); }
printf("\n");
}
int
main(int argc, char **argv)
{
int i;
pid_t pid;
kern_return_t kr;
mach_port_name_array_t names;
mach_port_type_array_t types;
mach_msg_type_number_t ncount, tcount;
mach_port_limits_t port_limits;
mach_port_status_t port_status;
mach_msg_type_number_t port_info_count;
task_t task;
task_t mytask = mach_task_self();
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
pid = atoi(argv[1]);
kr = task_for_pid(mytask, (int)pid, &task);
EXIT_ON_MACH_ERROR("task_for_pid", kr);
// retrieve a list of the rights present in the given task's IPC space,
// along with type information (no particular ordering)
kr = mach_port_names(task, &names, &ncount, &types, &tcount);
EXIT_ON_MACH_ERROR("mach_port_names", kr);
printf("%8s %8s %8s %8s %8s task rights\n",
"name", "q-limit", "seqno", "msgcount", "sorights");
for (i = 0; i < ncount; i++) {
printf("%08x ", names[i]);
// get resource limits for the port
port_info_count = MACH_PORT_LIMITS_INFO_COUNT;
kr = mach_port_get_attributes(
task, // the IPC space in question
names[i], // task's name for the port
MACH_PORT_LIMITS_INFO, // information flavor desired
(mach_port_info_t)&port_limits, // outcoming information
&port_info_count); // size returned
if (kr == KERN_SUCCESS)
printf("%8d ", port_limits.mpl_qlimit);
else
printf("%8s ", "-");
// get miscellaneous information about associated rights and messages
port_info_count = MACH_PORT_RECEIVE_STATUS_COUNT;
kr = mach_port_get_attributes(task, names[i], MACH_PORT_RECEIVE_STATUS,
(mach_port_info_t)&port_status,
&port_info_count);
if (kr == KERN_SUCCESS) {
printf("%8d %8d %8d ",
port_status.mps_seqno, // current sequence # for the port
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 26 of 153
port_status.mps_msgcount, // # of messages currently queued
port_status.mps_sorights); // # of send-once rights
} else
printf("%8s %8s %8s ", "-", "-", "-");
print_mach_port_type(types[i]);
}
vm_deallocate(mytask, (vm_address_t)names, ncount*sizeof(mach_port_name_t));
vm_deallocate(mytask, (vm_address_t)types, tcount*sizeof(mach_port_type_t));
exit(0);
}
$ gcc -Wall -o lsports lsports.c
$ ./lsports $$ # superuser privileges required on newer versions of Mac OS X
name q-limit seqno msgcount sorights task rights
0000010f 5 0 0 0 RECEIVE
00000207 - - - - SEND
00000307 - - - - SEND
0000040f 5 0 0 0 RECEIVE
00000507 5 19 0 0 RECEIVE
0000060b 5 0 0 0 RECEIVE
0000070b - - - - SEND
00000807 - - - - SEND
00000903 5 0 0 0 RECEIVE
00000a03 5 11 0 0 RECEIVE
00000b03 - - - - SEND
00000c07 - - - - SEND
00000d03 - - - - SEND
00000e03 5 48 0 0 RECEIVE
00000f03 - - - - SEND
9.3.6. Messaging Implementation
Let us look at how the kernel handles sending and receiving messages. Given that IPC underlies much of
the functionality in Mach, messaging is a frequent operation in a Mach-based system. It is therefore not
surprising that a Mach implementation, especially one used in a commercial system like Mac OS X,
would be heavily optimized. The core kernel function involved in messagingboth sending and receivingis
the one that we came across earlier: mach_msg_overwrite_trap() [osfmk/ipc/mach_msg.c]. This
function contains numerous special cases that attempt to improve performance in different situations.
One of the optimizations used is handoff scheduling. As we saw in Chapter 7, handoff scheduling
involves direct transfer of processor control from one thread to another. A handoff may be performed both
by senders and by receivers participating in RPCs. For example, if a server thread is currently blocked in a
receive call, a client thread can hand off to the server thread and block itself while it waits for the reply.
Similarly, when the server is ready to send a reply to the client, it will hand off to the waiting client thread
and block itself as it waits for the next request. This way, it is also possible to avoid having to enqueue
and dequeue messages, since a message can be directly transferred to the receiver.
Figure 912 shows a simplified overviewwithout any special casesof the kernel processing involved in
sending a message.
Figure 912. An overview of the kernel processing for sending a Mach IPC message
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 27 of 153
Mach message passing is reliable and order-preserving. Therefore, messages may not be lost and are
always received in the order they were sent. However, the kernel delivers messages sent to send-once
rights out of order and without taking into account the receiving port's queue length or how full it is. We
noted earlier that the length of a port's message queue is finite. When a queue becomes full, several
behaviors are possible, such as the following.
The default behavior is to block new senders until there is room in the queue.
 If a sender uses the MACH_SEND_TIMEOUT option in its invocation of mach_msg() or
mach_msg_overwrite(), the sender will block for at most the specified time. If the message still
cannot be delivered after that time has passed, a MACH_SEND_TIMED_OUT error will be returned.
If the message is being sent using a send-once right, the kernel will deliver the message despite the
queue being full.
Various other error codes can be returned when sending a message fails. These fall in a few general
categories, such as the following:
Those that indicate that the send call did not perform any operation from the caller's standpoint,
usually because one or more of the arguments (or their properties) were invalidsay, an invalid
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 28 of 153
message header or an invalid destination port
Those that indicate that the message was partly or wholly destroyedfor example, because the out-of-
line memory being sent was invalid or a port right being sent in the message was bogus
Those that indicate that the message was returned to the sender because of a send timeout or a
software interrupt
Figure 913 shows a simplified overview of the kernel processing involved in receiving a message.
Figure 913. An overview of the kernel processing for receiving a Mach IPC message
[View full size image]
9.3.7. IPC Subsystem Initialization
Figure 914 shows how the IPC subsystem is initialized when the kernel boots. We have already come
across some aspects of this initialization, for example, the setting up of the host special ports. We will
discuss MIG initialization in Section 9.6.3.2.