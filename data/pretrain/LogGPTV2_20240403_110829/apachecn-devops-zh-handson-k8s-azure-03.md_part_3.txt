在本节中，您使用服务公开了 Redis 主文件。这确保了即使 pod 移动到不同的主机，也可以通过服务的 IP 地址到达它。在下一节中，您将部署 Redis 副本，这有助于处理更多的读取流量。
### 部署 Redis 副本
不建议在云上运行单个后端。您可以在领导者-追随者(主从)设置中配置 Redis。这意味着您可以有一个主服务器来处理写流量，还有多个副本服务器来处理读流量。这对于处理增加的读取流量和高可用性非常有用。
让我们设置一下:
1.  Create the deployment by running the following command:
    kubicl apply-f redis 复制部署. yaml
2.  Let's check all the resources that have been created now:
    kubectl get all
    输出如*图 3.11* 所示:
    ![Using the kubectl get all command to show all objects created](img/B17338_03_11.jpg)
    图 3.11:部署 Redis 副本会创建许多新对象
3.  Based on the preceding output, you can see that you created two replicas of the **redis-replica** pods. This can be confirmed by examining the **redis-replica- deployment.yaml** file:
    1 API 版本:apps/v1
    2 种:部署
    3 元数据:
    4 名称:redis-复制
    5 个标签:
    6 应用:重定向
    7 规格:
    8 选择器:
    9 个匹配标签:
    10 个应用:redis
    11 角色:副本
    12 层:后端
    13 个副本:2 个
    14 模板:
    15 元数据:
    16 个标签:
    17 应用:redis
    18 角色:副本
    19 层:后端
    20 规格:
    21 个容器:
    22 -名称:复制品
    23 图片:gcr . io/Google-samples/GB-redis-follower:v1 24 资源:
    25 项请求:
    26 个 CPU:100 米
    27 内存:100 兆
    28 环境:
    29 -名称:GET_HOSTS_FROM
    30 值:dns
    31 个端口:
    32 -容器港口:6379
    除了以下几点，一切都一样:
    *   **第 13 行**:复制品数量为 2 个。
    *   **第 23 行**:你现在使用的是一个特定的副本(随从)形象。
    *   **第 29-30 行**:设置 **GET_HOSTS_FROM** 到 **dns** 。这是一个设置，指定 Redis 应该使用 DNS 获取主机的主机名。
    如您所见，这类似于您之前创建的 Redis 主文件。
4.  Like the master service, you need to expose the replica service by running the following:
    kubicl apply-f redis 复制服务。yaml
    该服务与 **redis-master** 服务的唯一区别在于，该服务将流量代理到具有**角色:副本**标签的 PODS。
5.  Check the **redis-replica** service by running the following command:
    忽必烈得到服务
    这应该会给你显示在*图 3.12* 中的输出:
![Redis master and Redis replica configuration details](img/B17338_03_12.jpg)
图 3.12:Redis master 和 redis 复制服务
现在，您已经有了一个运行的 Redis 集群，它有一个主集群和两个副本集群。在下一节中，您将部署并公开前端。
### 展开并露出前端
到目前为止，您一直专注于 Redis 后端。现在，您已经准备好部署前端了。这将为您的应用添加一个您可以与之交互的图形网页。
您可以使用以下命令创建前端:
kubectl apply -f 前端-deployment.yaml
要验证部署，请运行以下命令:
忽必烈得到 pods
这将显示如图 3.13 所示的输出:
![Details of the frontend deployment](img/B17338_03_13.jpg)
图 3.13:验证前端部署
您会注意到这个部署指定了 **3** 副本。部署有一些通常的方面，只做了一些小的更改，如下面的代码所示:
1 API 版本:apps/v1
2 种:部署
3 元数据:
4 名称:前端
5 个标签:
6 应用:留言簿
7 规格:
8 选择器:
9 个匹配标签:
10 款应用:留言簿
11 层:前端
12 个副本:3 个
13 模板:
14 元数据:
15 个标签:
16 应用:留言簿
17 层:前端
18 规格:
19 个容器:
20 -名称:php-redis
21 图片:gcr.io/google-samples/gb-frontend:v4
22 资源:
23 项请求:
24 个 CPU:100 公尺
25 内存:100 兆
26 环境:
27 -名称:GET_HOSTS_FROM
28 数值:环境
29 -名称:REDIS_SLAVE_SERVICE_HOST
30 value:redis-复制
31 个端口:
32 -容器港口:80
让我们看看这些变化:
*   **第 11 行**:副本计数设置为 3。
*   **8-10、14-16 线**:标签设置为 **app:留言簿**、**层:前端**。
*   **第 20 行**:**GB-前端:v4** 作为映像。
您现在已经创建了前端部署。您现在需要将其作为服务公开。
### 公开前端服务
定义 Kubernetes 服务有多种方法。我们创建的两个 Redis 服务属于类型**集群 IP** 。这意味着它们暴露在只能从集群到达的 IP 上，如图 3.14*所示:*
![Kubernetes service of type ClusterIP](img/B17338_03_14.jpg)
图 3.14:集群 IP 类型的 Kubernetes 服务
另一种服务类型是**节点端口**类型。通过连接到节点的 IP 和指定的端口，可以从群集外部访问节点端口类型的服务。该服务公开在每个节点的静态端口上，如图 3.15*所示:*
![Kubernetes service of type NodePort](img/B17338_03_15.jpg)
图 3.15:node port 类型的固定服务
最后一种类型——将在本例中使用——是**负载平衡器**类型。这将创建一个 **Azure 负载平衡器**，它将获得一个您可以用来连接的公共 IP，如*图 3.16* 所示:
![Kubernetes service of type LoadBalancer](img/B17338_03_16.jpg)
图 3.16:load balancer type 服务
以下代码将帮助您理解前端服务是如何公开的:
1 堆叠版本:v1
2 种:服务
3 元数据:
4 名称:前端
5 个标签:
6 应用:留言簿
7 层:前端
8 规格:
9 类型:负载平衡器#行未注释
10 个端口:
11 端口:80
12 选择器:
13 应用:留言簿
14 层:前端
除了在*第 9 行*中定义了**类型:负载均衡器**之外，这个定义与您之前创建的服务类似。这将创建该类型的服务，这将导致 AKS 向 Azure 负载平衡器添加规则。
现在，您已经看到了前端服务是如何公开的，让我们按照以下步骤准备好留言簿应用:
1.  To create the service, run the following command:
    忽必烈 create -f 前端服务. yaml
    当您第一次运行该步骤时，它需要一些时间来执行。在后台，Azure 必须执行几个动作来实现无缝连接。它必须创建一个 Azure 负载平衡器和一个公共 IP，并设置端口转发规则，将端口 **80** 上的流量转发到集群的内部端口。
2.  Run the following until there is a value in the **EXTERNAL-IP** column:
    忽必烈得到服务-w
    这将显示如图 3.17 所示的输出: