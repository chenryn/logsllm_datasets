| `fence               | `stop`{.literal}    | []{#ch-              |
| -reaction`{.literal} |                     | clusteropts-HAAR.htm |
|                      |                     | l#idm140680237527712 |
|                      |                     | .indexterm}[]{#ch-   |
|                      |                     | clusteropts-HAAR.htm |
|                      |                     | l#idm140680237526608 |
|                      |                     | .indexterm}[]{#ch-   |
|                      |                     | clusteropts-HAAR.htm |
|                      |                     | l#idm140680373334000 |
|                      |                     | .indexterm}[]{#ch-   |
|                      |                     | clusteropts-HAAR.htm |
|                      |                     | l#idm140680373332608 |
|                      |                     | .indexterm}[]{#ch-   |
|                      |                     | clusteropts-HAAR.htm |
|                      |                     | l#idm140680371923504 |
|                      |                     | .indexterm} （Red    |
|                      |                     | Hat Enterprise Linux |
|                      |                     | 7.8                  |
|                      |                     | 及更新的版本         |
|                      |                     | ）决定在收到其自身隔 |
|                      |                     | 离通知时集群节点应如 |
|                      |                     | 何做出反应。如果错误 |
|                      |                     | 配置了隔离，或者使用 |
|                      |                     | fabric               |
|                      |                     | 隔离方式当没有中断集 |
|                      |                     | 群的通信，集群节点可 |
|                      |                     | 能会收到其自身隔离的 |
|                      |                     | 通知信息。允许的值会 |
|                      |                     | `停止`               |
|                      |                     | {.literal}，它会停止 |
|                      |                     | Pacemaker            |
|                      |                     | 并保持停止状态，或者 |
|                      |                     | `panic`{.literal}    |
|                      |                     | 来尝试立即           |
|                      |                     | 重启本地节点，并在失 |
|                      |                     | 败后退回到停止状态。 |
+----------------------+---------------------+----------------------+
:::
:::
:::
::: section
::: titlepage
# []{#ch-clusteropts-HAAR.html#s1-setremoveclusterprops-HAAR}设置和删除集群属性 {.title}
:::
[]{#ch-clusteropts-HAAR.html#idm140680349916528
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680241058448
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680241056736
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680346025712
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680346024448
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680355380000
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680344355328 .indexterm}
要设置集群属性的值，请使用以下 [pcs]{.application} 命令。
``` screen
pcs property set property=value
```
例如，若要将 `symmetric-cluster`{.literal} 的
`值设置为 false`{.literal}，可使用以下命令：
``` screen
# pcs property set symmetric-cluster=false
```
您可以使用以下命令从配置中删除集群属性。
``` screen
pcs property unset property
```
另外，您可以通过将 [**pcs property set**]{.command} 命令的 value
字段留空来从配置中删除集群属性。这会将该属性恢复为默认值。例如，如果您之前将
`symmetric-cluster`{.literal} 属性设置为
`false`{.literal}，以下命令会从配置中删除您设置的值，并将
`symmetric-cluster`{.literal} 的值恢复为
`true`{.literal}，这是它的默认值。
``` screen
# pcs property set symmetic-cluster=
```
:::
::: section
::: titlepage
# []{#ch-clusteropts-HAAR.html#s1-queryingclusterprops-HAAR}查询集群属性设置 {.title}
:::
[]{#ch-clusteropts-HAAR.html#idm140680344314224
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680345775040
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680345773776
.indexterm}[]{#ch-clusteropts-HAAR.html#idm140680346766064 .indexterm}
在大多数情况下，当使用 [**pcs**]{.command}
命令显示各种群集组件的值时，您可以互换使用 [**pcs list**]{.command} 或
[**pcs show**]{.command}。[**在以下示例中，pcs list**]{.command}
的格式用于显示多个属性的所有设置的完整列表，而 [**pcs show**]{.command}
是用于显示特定属性值的格式。
要显示为集群设置的属性设置的值，请使用以下 [pcs]{.application} 命令。
``` screen
pcs property list
```
要显示集群属性设置的所有值，包括未明确设置的属性设置的默认值，请使用以下命令。
``` screen
pcs property list --all
```
要显示特定集群属性的当前值，请使用以下命令。
``` screen
pcs property show property
```
例如，要显示 `cluster-infrastructure`{.literal}
属性的当前值，请执行以下命令：
``` screen
# pcs property show cluster-infrastructure
Cluster Properties:
 cluster-infrastructure: cman
```
为方便起见，您可以通过下列命令，显示这些属性的所有默认值，无论是否将其设置为非默认值。
``` screen
pcs property [list|show] --defaults
```
:::
:::
[]{#ch-alertscripts-HAAR.html}
::: chapter
::: titlepage
# []{#ch-alertscripts-HAAR.html#ch-alertscripts-HAAR}第 13 章 为集群事件触发脚本 {.title}
:::
Pacemaker
集群是一个事件驱动的系统，其中事件可能是资源或节点故障、配置更改或资源启动或停止。您可以将
Pacemaker
集群警报配置为在集群事件发生时采取一些外部操作。您可以通过以下两种方式之一配置集群警报：
::: itemizedlist
-   从 Red Hat Enterprise Linux 7.3 开始，您可以使用警报代理来配置
    Pacemaker
    警报，它们是集群调用的外部程序，其方式与集群调用的资源代理来处理资源配置和操作相同。这是配置群集警报的首选、更简单的方法。Pacemaker
    警报代理在 ["Pacemaker 警报代理（红帽企业 Linux 7.3
    及更新的版本）"一节](#ch-alertscripts-HAAR.html#s1-alerts-HAAR "Pacemaker 警报代理（红帽企业 Linux 7.3 及更新的版本）"){.xref}
    中描述。
-   `ocf:pacemaker:ClusterMon`{.literal}
    资源可以监控集群状态，并触发每个集群事件的警报。此资源在后台以固定间隔运行
    [**crm_mon**]{.command} 命令。有关 `ClusterMon`{.literal}
    资源的详情请参考
    ["使用监控资源的事件通知"一节](#ch-alertscripts-HAAR.html#s1-eventnotification-HAAR "使用监控资源的事件通知"){.xref}。
:::
::: section
::: titlepage
# []{#ch-alertscripts-HAAR.html#s1-alerts-HAAR}Pacemaker 警报代理（红帽企业 Linux 7.3 及更新的版本） {.title}
:::
您可以创建 Pacemaker
警报代理，以便在集群事件发生时采取一些外部操作。集群使用环境变量将事件信息传递给代理。代理可以执行任何操作，比如发送电子邮件信息或登录到某个文件或更新监控系统。
::: itemizedlist
-   Pacemaker 提供几个示例警报代理，这些代理默认安装在
    `/usr/share/pacemaker/alerts`{.filename}
    中。这些样本脚本可以像现在一样复制和使用，或者可作为模板使用，以适应您的目的。关于它们支持的所有属性，请参考样本代理的源代码。有关配置使用示例警报代理的警报的基本步骤示例，请参阅
    ["使用示例警报代理"一节](#ch-alertscripts-HAAR.html#s2-samplealertagents-HAAR "使用示例警报代理"){.xref}。
-   ["创建警报"一节](#ch-alertscripts-HAAR.html#s2-alertcreate-HAAR "创建警报"){.xref}、["显示、修改和删除警报"一节](#ch-alertscripts-HAAR.html#s2-alertmanage-HAAR "显示、修改和删除警报"){.xref}、["警报
    Recipients"一节](#ch-alertscripts-HAAR.html#s2-alertrecipients-HAAR "警报 Recipients"){.xref}、["警报元数据选项"一节](#ch-alertscripts-HAAR.html#s2-alertmetaoptions-HAAR "警报元数据选项"){.xref}
    和
    ["警报配置命令示例"一节](#ch-alertscripts-HAAR.html#s2-alertexamples-HAAR "警报配置命令示例"){.xref}
    中提供了有关配置和管理警报代理的一般信息。
-   您可以为 Pacemaker
    警报编写自己的警报代理来调用。有关编写警报代理的详情请参考
    ["编写警报代理"一节](#ch-alertscripts-HAAR.html#s2-alertagentwrite-HAAR "编写警报代理"){.xref}。
:::
::: section
::: titlepage
## []{#ch-alertscripts-HAAR.html#s2-samplealertagents-HAAR}使用示例警报代理 {.title}
:::
当使用示例警报代理时，您应该检查该脚本以确保它适合您的需要。这些示例代理是作为特定集群环境自定义脚本的起点。请注意，红帽支持警报代理脚本用来与
Pacemaker 通信的界面，但红帽并不支持自定义代理本身。
要使用示例警报代理中的一个，您必须在集群中的每个节点上安装代理。例如，以下命令将
`alert_file.sh.sample`{.literal} 脚本安装为 `alert_file.sh`{.literal}。
``` screen
# install --mode=0755 /usr/share/pacemaker/alerts/alert_file.sh.sample /var/lib/pacemaker/alert_file.sh
```
安装脚本后，您可以创建使用该脚本的警报。
以下示例配置了使用安装的 `alert_file.sh`{.literal}
警报代理将事件记录到文件中的警报。以用户 `hacluster`{.literal}
身份运行的警报代理，该用户具有最小权限集。
这个示例创建日志文件
`pcmk_alert_file.log`{.filename}，该文件将用于记录事件。然后，它会创建警报代理，并添加到日志文件的路径作为其接收者。
``` screen
# touch /var/log/pcmk_alert_file.log
# chown hacluster:haclient /var/log/pcmk_alert_file.log
# chmod 600 /var/log/pcmk_alert_file.log 
# pcs alert create id=alert_file description="Log events to a file." path=/var/lib/pacemaker/alert_file.sh 
# pcs alert recipient add alert_file id=my-alert_logfile value=/var/log/pcmk_alert_file.log 
```
以下示例将 `alert_snmp.sh.sample`{.literal} 脚本安装为
`alert_snmp.sh`{.literal}，并配置使用安装的 `alert_snmp.sh`{.literal}
警报代理将集群事件作为 SNMP
陷阱发送的警报。默认情况下，该脚本会发送除成功监控调用 SNMP
服务器外的所有事件。这个示例将时间戳格式配置为 meta 选项。有关 meta
选项的详情请参考
["警报元数据选项"一节](#ch-alertscripts-HAAR.html#s2-alertmetaoptions-HAAR "警报元数据选项"){.xref}。配置警报后，本例配置警报的接收者并显示警报配置。
``` screen
# install --mode=0755 /usr/share/pacemaker/alerts/alert_snmp.sh.sample /var/lib/pacemaker/alert_snmp.sh
# pcs alert create id=snmp_alert path=/var/lib/pacemaker/alert_snmp.sh meta timestamp-format="%Y-%m-%d,%H:%M:%S.%01N"
# pcs alert recipient add snmp_alert value=192.168.1.2
# pcs alert
Alerts:
 Alert: snmp_alert (path=/var/lib/pacemaker/alert_snmp.sh)
  Meta options: timestamp-format=%Y-%m-%d,%H:%M:%S.%01N.
  Recipients:
   Recipient: snmp_alert-recipient (value=192.168.1.2)
```
以下示例安装 `alert_smtp.sh`{.literal}
代理，然后配置使用安装的警报代理将集群事件作为电子邮件消息发送的警报。配置警报后，本示例配置了接收方并显示警报配置。
``` screen
# install --mode=0755 /usr/share/pacemaker/alerts/alert_smtp.sh.sample /var/lib/pacemaker/alert_smtp.sh
# pcs alert create id=smtp_alert path=/var/lib/pacemaker/alert_smtp.sh options email_sender=PI:EMAIL
# pcs alert recipient add smtp_alert value=PI:EMAIL
# pcs alert
Alerts:
 Alert: smtp_alert (path=/var/lib/pacemaker/alert_smtp.sh)
  Options: email_sender=PI:EMAIL
  Recipients:
   Recipient: smtp_alert-recipient (value=PI:EMAIL)
```
有关 [**pcs alert create 和 [**pcs alert receiver**]{.command}
add**]{.command} 命令格式的更多信息，请参阅
["创建警报"一节](#ch-alertscripts-HAAR.html#s2-alertcreate-HAAR "创建警报"){.xref}
和 ["警报
Recipients"一节](#ch-alertscripts-HAAR.html#s2-alertrecipients-HAAR "警报 Recipients"){.xref}。
:::
::: section
::: titlepage
## []{#ch-alertscripts-HAAR.html#s2-alertcreate-HAAR}创建警报 {.title}
:::
以下命令创建集群警报。您配置的选项是特定于代理的配置文件，这些值会被传递给您指定为额外环境变量的路径的警报代理脚本。如果没有为
`id`{.literal} 指定值，则会生成一个值。如需关于警报 meta
选项的信息，请参阅
["警报元数据选项"一节](#ch-alertscripts-HAAR.html#s2-alertmetaoptions-HAAR "警报元数据选项"){.xref}。
``` screen
pcs alert create path=path [id=alert-id] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
可能会配置多个警报代理，集群会在每个事件中调用它们。只有集群节点上才会调用警报代理。会为涉及
Pacemaker 远程节点的事件调用它们，但不会在这些节点上调用它们。
以下示例创建了一个简单的警报，它将为每个事件调用
`myscript.sh`{.literal}。
``` screen
# pcs alert create id=my_alert path=/path/to/myscript.sh
```
有关如何创建使用其中一个示例警报代理的集群警报的示例，请参考
["使用示例警报代理"一节](#ch-alertscripts-HAAR.html#s2-samplealertagents-HAAR "使用示例警报代理"){.xref}。
:::
::: section
::: titlepage
## []{#ch-alertscripts-HAAR.html#s2-alertmanage-HAAR}显示、修改和删除警报 {.title}
:::
以下命令显示所有配置的警报以及配置选项的值。
``` screen
pcs alert [config|show]
```
以下命令使用指定的 *`alert-id`* 值更新现有警报。
``` screen
pcs alert update alert-id [path=path] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
以下命令移除具有指定 *`alert-id`* 值的警报。
``` screen
pcs alert remove alert-id
```
或者，您可以运行 [**pcs alert delete**]{.command} 命令，该命令与 [**pcs
alert remove**]{.command} 命令相同。[**pcs alert delete**]{.command} 和
[**pcs alert remove**]{.command} 命令都允许您指定要删除的多个警报。
:::
::: section
::: titlepage