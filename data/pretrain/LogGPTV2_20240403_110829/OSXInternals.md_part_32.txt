### Chapter 4. The Firmware and the Bootloader
#### Page 15 of 86

The `forget` command removes the topmost instance of a word, if any, from the dictionary. You can view the definition of an existing word using the `see` command. For example:

```forth
0 > : times2 ( x -- ) 2 * . ; ok
0 > see times2
: times2
2 * . ; ok
```

#### 4.5.4.1. A Sampling of Built-in Words

Open Firmware's Forth environment includes built-in words across various categories. Below are some examples, with stack notations used to describe their behavior.

**Stack Manipulation**

- **dup ( x -- x x )**: Duplicates the top item on the stack.
- **?dup ( x -- x x ) if x is not 0, ( x -- x ) if x is 0**: Conditionally duplicates the top item if it is not zero.
- **clear ( x1 x2 ... xn -- )**: Clears the stack.
- **depth ( x1 x2 ... xn -- n )**: Returns the number of items on the stack.
- **drop ( x -- )**: Removes the top item from the stack.
- **rot ( x1 x2 x3 -- x2 x3 x1 )**: Rotates the top three items on the stack.
- **-rot ( x1 x2 x3 -- x3 x1 x2 )**: Rotates the top three items in the opposite direction.
- **swap ( x1 x2 -- x2 x1 )**: Swaps the top two items on the stack.

**Return Stack Operations**

- **>r ( x -- ) ( R: -- x )**: Moves the top item from the data stack to the return stack.
- **r> ( -- x ) ( R: x -- )**: Moves the top item from the return stack to the data stack.
- **r@ ( -- x ) ( R: x -- x )**: Copies the top item from the return stack to the data stack.

**Memory Access and Management**

- **/c ( -- n )**: Fetches the number of address units in a byte.
- **/n ( -- n )**: Fetches the number of address units in a cell.
- **addr @ ( addr -- x )**: Fetches the item stored at address `addr`.
- **x addr ! ( x addr -- )**: Stores item `x` at address `addr`.
- **v addr +! ( v addr -- )**: Adds `v` to the value stored at address `addr`.
- **addr c@ ( addr -- b )**: Fetches the byte stored at address `addr`.
- **b addr c! ( b addr -- )**: Stores byte `b` at address `addr`.
- **addr len dump ( addr len -- )**: Displays `len` bytes of memory starting at address `addr`.
- **addr len b fill ( addr len b -- )**: Sets `len` bytes beginning at address `addr` to value `b`.
- **addr len erase ( addr len -- )**: Sets `len` bytes beginning at address `addr` to 0.
- **len alloc-mem ( len -- addr )**: Allocates `len` bytes of general-purpose memory.
- **addr len free-mem ( addr len -- )**: Frees `len` bytes of memory starting at address `addr`.
- **len buffer: mybuffer ( len -- )**: Allocates `len` bytes of general-purpose memory, naming the allocated region `mybuffer`.

**Creating and Accessing Named Data**

Creating and accessing named data are common operations. Here are some examples:

```forth
0 > 1 constant myone ok \ Create a constant with value 1
0 > myone . 1 ok \ Verify its value
0 > 2 value mytwo ok \ Set value of mytwo to 2
0 > mytwo . 2 ok \ Verify value of mytwo
0 > 3 to mytwo ok \ Set value of mytwo to 3
0 > mytwo . 3 ok \ Verify value of mytwo
0 > 2 to myone \ Try to modify value of a constant
invalid use of TO
0 > variable mythree ok \ Create a variable called mythree
0 > mythree . ff9d0800 ok \ Address of mythree
0 > 3 mythree ! ok \ Store 3 in mythree
0 > mythree @ . 3 ok \ Fetch the contents of mythree
0 > 4 buffer: mybuffer ok \ Get a 4-byte buffer
0 > mybuffer . ffbd2c00 ok \ Allocation address
0 > mybuffer 4 dump \ Dump memory contents
ffbd2c00: ff ff fb b0 |....| ok
0 > mybuffer 4 erase ok \ Erase memory contents
0 > mybuffer 4 dump \ Dump memory contents
ffbd2c00: 00 00 00 00 |....| ok
0 > mybuffer 4 1 fill ok \ Fill memory with 1's
0 > mybuffer 4 dump \ Dump memory contents
ffbd2c00: 01 01 01 01 |....| ok
0 > 4 mybuffer 2 + c! ok \ Store 4 at third byte
0 > mybuffer 4 dump \ Dump memory contents
ffbd2c00: 01 01 04 01 |....| ok
```

**Arithmetic and Logical Operators**

- **1+ ( n -- n+1 )**: Increments `n` by 1.
- **2+ ( n -- n+2 )**: Increments `n` by 2.
- **1- ( n -- n-1 )**: Decrements `n` by 1.
- **2- ( n -- n-2 )**: Decrements `n` by 2.
- **2* ( n -- 2*n )**: Multiplies `n` by 2.
- **2/ ( n -- n/2 )**: Divides `n` by 2.
- **abs ( n -- |n| )**: Computes the absolute value of `n`.
- **max ( n1 n2 -- greater of n1 and n2 )**: Returns the greater of `n1` and `n2`.
- **min ( n1 n2 -- smaller of n1 and n2 )**: Returns the smaller of `n1` and `n2`.
- **negate ( n -- -n )**: Negates `n`.
- **and ( n1 n2 -- n1&n2 )**: Performs a bitwise AND operation.
- **or ( n1 n2 -- n1|n2 )**: Performs a bitwise OR operation.
- **decimal ( -- )**: Changes the base to 10.
- **hex ( -- )**: Changes the base to 16.
- **octal ( -- )**: Changes the base to 8.

**Console I/O**

- **key ( -- c )**: Waits for a character to be typed.
- **ascii x ( x -- c )**: Converts `x` to its ASCII code.
- **c emit ( c -- )**: Prints the character with ASCII code `c`.
- **cr ( -- )**: Carriage return.
- **space ( -- )**: Single space.
- **u.r ( u width -- )**: Prints `u` right-justified within `width`.
- **." text" ( -- )**: Prints the string `text`.
- **.( text) ( -- )**: Prints the string `text`.

A literal string is specified with a leading space after the opening quote, for example: `" hello"`.

**Control Flow**

- **Unconditional Infinite Loop**
  ```forth
  begin
    \ do some processing
  again
  ```

- **Conditional "while" Loop**
  ```forth
  begin
    \ some condition
  while
    \ do some processing
  repeat
  ```

- **Conditional Branch**
  ```forth
  \ some condition
  if
    \ condition is true
  else
    \ condition is false
  then
  ```

- **Iterative Loop with Unitary Increment**
  ```forth
  \ maximum and initial values of loop counter
  do
    \ do some processing
    \ the variable i contains the current value of the counter
  loop
  ```

- **Iterative Loop with Specified Increment**
  ```forth
  \ maximum and initial values of loop counter
  do
    \ do some processing
    \ the variable i contains the current value of the counter
    \ value to be added to loop counter
  +loop
  ```

**Other Commonly Used Forth Words**

- **Words for converting data types and address types**
- **Words for error handling, including an exception mechanism that supports `catch` and `throw`**
- **Words for creating and executing machine-level code definitions**

**This BootROM Is Brought to You By...**

The built-in word `kudos` shows a list of credits containing names of those who contributed to the hardware initialization, Open Firmware, and diagnostics aspects of the Boot ROM.

#### 4.5.4.2. Searching the Dictionary

Open Firmware's Forth dictionary may contain thousands of words. The `sifting` word allows you to search for words containing a specified string:

```forth
0 > sifting get-time
get-time
in /pci@f2000000/mac-io@17/via-pmu@16000/rtc
get-time ok
```

A search could also yield multiple matches:

```forth
0 > sifting buffer
frame-buffer-addr buffer: alloc-buffer:s
in /packages/deblocker
empty-buffers
in /pci@f0000000/ATY,JasperParent@10/ATY,Jasper_A@0
frame-buffer-adr
in /pci@f0000000/ATY,JasperParent@10/ATY,Jasper_B@1
frame-buffer-adr ok
```

An unsuccessful search fails silently:

```forth
0 > sifting nonsense ok
```

#### 4.5.5. Debugging

Open Firmware includes a source-level debugger for single-stepping and tracing Forth programs. Some relevant words include:

- **debug ( command -- )**: Marks `command` for debugging.
- **resume ( -- )**: Exits from the debugger's subinterpreter and goes back into the debugger.
- **stepping ( -- )**: Sets single-stepping mode for debugging.
- **tracing ( -- )**: Sets trace mode for debugging.

Let us trace the execution of the following simple Forth program:

```forth
: factorial ( n -- n! )
  dup 0 >
  if
    dup 1 - recurse *
  else
    drop 1
  then
;
```

```forth
0 > showstack ok
->    3  dup
at ffa22bd4 -- -> 3 3  0
at ffa22bd8 -- -> 3 3 0  >
at ffa22bdc -- -> 3 ffffffff  if
at ffa22be4 -- -> 3  dup
at ffa22be8 -- -> 3 3  1
at ffa22bec -- -> 3 3 1  -
at ffa22bf0 -- -> 3 2  factorial
at ffa22bf4 -- -> 3 2  *
at ffa22bf8 -- -> 6  branch+
at ffa22c04 -- -> 6  exit ok
-> 6  executes the current word and goes to the next word.
c continues the program without prompting any further; the program is traced, however.
f suspends debugging and starts a secondary Forth shell, which can be exited through the resume command, after which debugging continues from the point it was suspended.
q aborts execution of the current word and all its callers; control goes back to the Open Firmware prompt.
```

Depending on the Open Firmware version and the underlying processor architecture, contents of processor registers can be viewed, and in some cases modified, through implementation-specific words.

#### 4.6. The Device Tree

From the standpoint of system initialization and booting, Open Firmware's core data structure is the device tree, which is referred to by all interfaces supported by Open Firmware.

The device tree represents various hardware components in the system and their interconnections. It also contains pseudo-devices that have no corresponding physical devices. The root node of the device tree is `/` (as in a Unix file system):

```forth
0 > dev / ok
0 > ls
ff88feb0: /cpus
ff890118: /PowerPC,G5@0
ff8905c8: /l2-cache
ff891550: /PowerPC,G5@1
ff891a00: /l2-cache
ff891bf0: /chosen
ff891d98: /memory@0,0
ff891fa8: /openprom
ff892108: /client-services
ff8933f8: /rom@0,ff800000
ff8935b8: /boot-rom@fff00000
ff8937a8: /macos
ff893840: /options
ff8938d8: /packages
ff893cc8: /deblocker
ff894618: /disk-label
ff895098: /obp-tftp
ff89fc68: /telnet
...
ff9a7610: /temperatures
ffa1bb70: /drive-bay@4
ffa1f370: /backside@6
...
ff9a77a8: /audible-alarm
ff9a7940: /thermostats
ffa1cfb8: /overtemp*-signal@5800
ok
```

In the device tree, an individual node represents a bus, a physical device, or a pseudo-device. A node with children (visually indicated by indentations in the output of `ls`) is often a bus. You can use the `dev` command to go to a certain node in the tree.

```forth
0 > dev /pseudo-hid ok \ Go to node /pseudo-hid
0 > ls \ List children of current node
```