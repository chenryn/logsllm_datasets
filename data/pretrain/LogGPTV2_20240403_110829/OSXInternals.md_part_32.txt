Chapter 4. The Firmware and the Bootloader Page 15 of 86
forget removes the topmost instance of a word, if any, from the dictionary. You can view the definition
of an existing word by using the see word:
0 > : times2 ( x -- ) 2 * . ; ok
0 > see times2
: times2
2 * . ; ok
4.5.4.1. A Sampling of Built-in Words
Open Firmware's Forth environment contains built-in words belonging to various categories. Let us look
at some of these categories. Note that words are "described" through their stack notations.
Stacks
This category includes words for duplication, removal, and rearrangement of stack elements.
dup ( x -- x x )
?dup ( x -- x x ) if x is not 0, ( x -- x ) if x is 0
clear ( x1 x2 ... xn -- )
depth ( x1 x2 ... xn -- n )
drop ( x -- )
rot ( x1 x2 x3 -- x2 x3 x1 )
-rot ( x1 x2 x3 -- x3 x1 x2 )
swap ( x1 x2 -- x2 x1 )
The return stack is shown with an R: prefix in the stack notation. There exist words to move and copy
items between the data and return stacks:
\ move from data stack to return stack
>r ( x -- ) ( R: -- x )
\ move from return stack to data stack
r> ( -- x ) ( R: x -- )
\ copy from return stack to data stack
r@ ( -- x ) ( R: x -- x )
Memory
This category includes words for memory access, allocation, and deallocation.
\ fetch the number of address units in a byte
/c ( -- n )
\ fetch the number of address units in a cell
/n ( -- n )
\ fetch the item stored at address addr
addr @ ( addr -- x )
\ store item x at address addr
x addr ! ( x addr -- )
\ add v to the value stored at address addr
v addr +! ( v addr -- )
\ fetch the byte stored at address addr
addr c@ ( addr -- b )
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 16 of 86
\ store byte b at address addr
b addr c! ( b addr -- )
\ display len bytes of memory starting at address addr
addr len dump ( addr len -- )
\ set n bytes beginning at address addr to value b
addr len b fill ( addr len b -- )
\ set len bytes beginning at address addr to 0
addr len erase ( addr len -- )
\ allocate len bytes of general-purpose memory
len alloc-mem ( len -- addr )
\ free len bytes of memory starting at address addr
addr len free-mem ( addr len -- )
\ allocate len bytes of general-purpose memory, where
\ mybuffer names the address of the allocated region
len buffer: mybuffer ( len -- )
Creating and accessing named data are very common operations in a programming endeavor. The
following are some examples of doing so.
0 > 1 constant myone ok \ Create a constant with value 1
0 > myone . 1 ok \ Verify its value
0 > 2 value mytwo ok \ Set value of mytwo to 2
0 > mytwo . 2 ok \ Verify value of mytwo
0 > 3 to mytwo ok \ Set value of mytwo to 3
0 > mytwo . 3 ok \ Verify value of mytwo
0 > 2 to myone \ Try to modify value of a constant
invalid use of TO
0 > variable mythree ok \ Create a variable called mythree
0 > mythree . ff9d0800 ok \ Address of mythree
0 > 3 mythree ! ok \ Store 3 in mythree
0 > mythree @ ok \ Fetch the contents of mythree
1 > . 3 ok
0 > 4 buffer: mybuffer ok \ get a 4-byte buffer
0 > mybuffer . ffbd2c00 ok \ allocation address
0 > mybuffer 4 dump \ dump memory contents
ffbd2c00: ff ff fb b0 |....| ok
0 > mybuffer 4 erase ok \ erase memory contents
0 > mybuffer 4 dump \ dump memory contents
ffbd2c00: 00 00 00 00 |....| ok
0 > mybuffer 4 1 fill ok \ fill memory with 1's
0 > mybuffer 4 dump \ dump memory contents
ffbd2c00: 01 01 01 01 |....| ok
0 > 4 mybuffer 2 + c! ok \ store 4 at third byte
0 > mybuffer 4 dump \ dump memory contents
ffbd2c00: 01 01 04 01 |....| ok
Operators
This category includes words for single-precision integer arithmetic operations, double-number arithmetic
operations, bitwise logical operations, and comparison.
1+ ( n -- n+1 )
2+ ( n -- n+2 )
1- ( n -- n-1 )
2- ( n -- n-2 )
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 17 of 86
2* ( n -- 2*n )
2/ ( n -- n/2 )
abs ( n -- |n| )
max ( n1 n2 -- greater of n1 and n2 )
min ( n1 n2 -- smaller of n1 and n2 )
negate ( n -- -n )
and ( n1 n2 -- n1&n2 )
or ( n1 n2 -- n1|n2 )
decimal ( -- change base to 10 )
hex ( -- change base to 16 )
octal ( -- change base to 8 )
One double number uses two items on the stack, with the most significant part being the topmost item.
The variable called base stores the current number base. Besides using the built-in words for changing the
base to a commonly used value, you can set the base to an arbitrary number by "manually" storing the
desired value in the base variable.
0 > base @ ok
1 > . 10 ok
0 > 123456 ok
1 > 2 base ! ok
1 > . 11110001001000000 ok
0 > 11111111 ok
1 > hex ok
1 > . f ok
0 >
Console I/O
This category includes words for console input and output, reading of characters and edited input lines
from the console input device, formatting, and string manipulation.
key ( -- c ) waits for a character to be typed
ascii x ( x -- c ) ascii code for x
c emit ( c -- ) prints character with ascii code c
cr ( -- ) carriage return
space ( -- ) single space
u.r ( u width -- ) prints u right-justified within width
." text" ( -- ) prints the string
.( text) ( -- ) prints the string
A literal string is specified with a leading space after the opening quote, for example: " hello".
Control Flow
This category includes words for conditional and iterative loops, the if-then-else clause, and the case
statement. Many of these words refer to a Boolean flag that can be either true (1) or false (0). Such a
flag is often a result of a comparison operator:
0 > 1 2  . ffffffff ok \ true
0 > 2 1  . 0 ok \ false
Following are some common control-flow constructs used in Forth programs.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 18 of 86
\ Unconditional infinite loop
begin
\ do some processing
again
\ Conditional "while" loop
begin
 \
some condition
while
... \ do some processing
repeat
\ Conditional branch
 \ some condition
if
... \ condition  is true
else
... \ condition  is false
then
\ Iterative loop with a unitary increment
  \ maximum and initial values of loop counter
do
... \ do some processing
... \ the variable i contains current value of the counter
loop
\ Iterative loop with a specified increment
  \ maximum and initial values of loop counter
do
... \ do some processing
... \ the variable i contains current value of the counter
 \ value to be added to loop counter
+loop
Other commonly used Forth words include the following:
Words for converting data types and address types
Words for error handling, including an exception mechanism that supports catch and throw
Words for creating and executing machine-level code definitions
This BootROM Is Brought to You By . . .
The built-in word kudos shows a list of credits containing names of those who contributed to
the hardware initialization, Open Firmware, and diagnostics aspects of the Boot ROM.
4.5.4.2. Searching the Dictionary
Open Firmware's Forth dictionary may contain thousands of words. The sifting word allows you to
search for words containing a specified string:
0 > sifting get-time
get-time
in
/pci@f2000000/mac-io@17/via-pmu@16000/rtc
get-time ok
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 19 of 86
A search could also yield multiple matches:
0 > sifting buffer
frame-buffer-addr buffer: alloc-buffer:s
in /packages/deblocker
empty-buffers
in /pci@f0000000/ATY,JasperParent@10/ATY,Jasper_A@0
frame-buffer-adr
in /pci@f0000000/ATY,JasperParent@10/ATY,Jasper_B@1
frame-buffer-adr ok
An unsuccessful search fails silently:
0 > sifting nonsense ok
0 >
4.5.5. Debugging
Open Firmware includes a source-level debugger for single-stepping and tracing Forth programs. Some of
the relevant words include the following:
debug ( command -- ) mark command for debugging
resume ( -- ) exit from the debugger's subinterpreter
and go back into the debugger
stepping ( -- ) set single-stepping mode for debugging
tracing ( -- ) set trace mode for debugging
Let us trace the execution of the following simple Forth program.
: factorial ( n -- n! )
dup 0 >
if
dup 1 - recurse *
else
drop 1
then
;
0 > showstack ok
->    3  dup
at ffa22bd4 -- -> 3 3  0
at ffa22bd8 -- -> 3 3 0  >
at ffa22bdc -- -> 3 ffffffff  if
at ffa22be4 -- -> 3  dup
at ffa22be8 -- -> 3 3  1
at ffa22bec -- -> 3 3 1  -
at ffa22bf0 -- -> 3 2  factorial
at ffa22bf4 -- -> 3 2  *
at ffa22bf8 -- -> 6  branch+
at ffa22c04 -- -> 6  exit ok
-> 6  executes the current word and goes to the next word.
c continues the program without prompting any further; the program is traced, however.
f suspends debugging and starts a secondary Forth shell, which can be exited through the resume
command, after which debugging continues from the point it was suspended.
q aborts execution of the current word and all its callers; control goes back to the Open Firmware
prompt.
Depending on the Open Firmware version and the underlying processor architecture, contents of processor
registers can be viewed, and in some cases modified, through implementation-specific words.
4.6. The Device Tree
From the standpoint of system initialization and booting, Open Firmware's core data structure is the
device tree, which is referred to by all interfaces supported by Open Firmware.
The device tree is a representation of various hardware components in the system and their
interconnections. It also contains pseudo-devices that have no corresponding physical devices.
The root node of the device tree is / (as in a Unix file system):
0 > dev / ok
0 > ls
ff88feb0: /cpus
ff890118: /PowerPC,G5@0
ff8905c8: /l2-cache
ff891550: /PowerPC,G5@1
ff891a00: /l2-cache
ff891bf0: /chosen
ff891d98: /memory@0,0
ff891fa8: /openprom
ff892108: /client-services
ff8933f8: /rom@0,ff800000
ff8935b8: /boot-rom@fff00000
ff8937a8: /macos
ff893840: /options
ff8938d8: /packages
ff893cc8: /deblocker
ff894618: /disk-label
ff895098: /obp-tftp
ff89fc68: /telnet
...
ff9a7610: /temperatures
ffa1bb70: /drive-bay@4
ffa1f370: /backside@6
...
ff9a77a8: /audible-alarm
ff9a7940: /thermostats
ffa1cfb8: /overtemp*-signal@5800
ok
0 >
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 21 of 86
In the device tree, an individual node represents a bus, a physical device, or a pseudo-device. A node with
childrenvisually indicated by indentations in the output of lsis often a bus. You can use the dev command
to go to a certain node in the tree.
0 > dev /pseudo-hid ok \ Go to node /pseudo-hid
0 > ls \ List children of current node