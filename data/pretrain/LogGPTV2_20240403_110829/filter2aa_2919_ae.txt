• 
Vulnerabilities in the engine do not only affect browsers but also affect PDF readers 
which means the user base, which can be attacked with an exploit, is even bigger. 
• 
Exploitation of JavaScript vulnerabilities is simpler because of the scripting possibility. 
This especially facilitates in bypassing protections such as ASLR.  
Because of these reasons, the following vulnerabilities in the document are related to 
JavaScript engines. In this chapter classic vulnerabilities are analyzed. The later chapters 
discuss JavaScript specific vulnerabilities. 
4.2.1 Missing write-barrier for garbage collection 
Chapter 4.1.3 described that use-after-free bugs are a common vulnerability class and that 
the render engine uses smart pointers to prevent them. 
Modern JavaScript engines on the other hand do not depend on reference counting and 
instead implement a garbage collector. For example, Orinoco, the garbage collector 
implementation of the v8 JavaScript engine, implements a mark-compact algorithm.  
Such a garbage collector regularly scans the memory by starting at root objects and follows 
all references stored in the objects. Every object in memory is assigned a color based on a 
tri-color scheme. Initially, all objects are marked white. The color changes to grey when the 
object was visited. After the memory references in them were followed, the color becomes 
black. The algorithm ends as soon as just white and black objects are left. All black objects 
are in-use and all white objects can be freed because they are not referenced by active 
objects anymore. This phase is named the marking phase. 
In a next step, the live objects are copied to another page. Orinoco splits memory into 
different regions which are called generations. Memory is initially allocated in the young 
generation which is further divided into the nursery and intermediate. Objects from the 
nursery are moved to the intermediate young generation if they survive the first iteration and 
32 
objects from the intermediate young generation are moved to the old generation which 
means that the object survived two iterations. 
The nursery is often also referred to as from-space and the intermediate as to-space 
because allocations are copied from the from-space to the to-space after the first iteration. 
An iteration in this context means an internal call to the garbage collection function which 
gets triggered when memory is under pressure. 
Figure 2: Garbage collection in v8, source: 64 
One may suspect that copying all live objects from one generation to another would generate 
a lot of overhead. However, based on the generational hypothesis most allocations do not 
survive the first iteration and must therefore not be copied 65. 
The copy phase is called the young generation evacuation because objects are copied within 
the young generation or to the old generation. 
Since all alive objects are always copied to the next generation and not alive objects can be 
freed, the full memory block of the young generation can be marked as free in a single step. 
This means memory fragmentation does not occur in the young generation. 
However, alive objects in the old generation cannot be copied to another location because 
it is the last generation. If objects in it get freed, it can lead to holes and therefore to memory 
fragmentation. To encounter this, a phase named old generation compaction is performed 
which compacts the memory by moving the objects into the holes. 
Sweeping is process where gaps in memory left by unreachable objects are added to a data 
structure called the free-list. Sweeping is performed on pages in the old generation which 
are not eligible for compaction. When the garbage collector finds such contiguous gaps, it 
adds them to the appropriate free-list. When memory must be allocated in the old generation 
in the future, a lookup can be performed in the free-list to find an available and fitting chunk 
of memory.  
64 https://v8.dev/blog/trash-talk 
65 https://v8.dev/blog/trash-talk 
33 
In a last step all live objects must be updated to point to the new location of the moved 
objects.  
The described garbage collection implementation would in theory completely mitigate use-
after-free bugs. However, it would require a stop-the-world implementation which means that 
the JavaScript execution must pause for a long time until the garbage collection finishes. 
This would lead to frozen GUIs when websites are under memory pressure. Another problem 
is that this implementation can just be executed on a single thread. 
To solve these problems v8 employs several techniques like incremental marking, parallel 
execution and concurrent execution. These speed improvements required proper 
synchronization and missing synchronization primitives are the source of a variety of 
exploitable bugs. One such synchronization primitive is a Dijkstra-style a write-barrier.   
Consider for example incremental marking which means the marking phase is split into 
smaller tasks which are interleaved in the main JavaScript execution thread. In such a case, 
some objects would get marked and then the marking phase pauses, and JavaScript code 
continues to execute. This JavaScript code could then modify already visited objects, which 
were already marked as black, and update the reference stored in the object to point to 
another object. Since the marking of the object was already performed, the garbage collector 
would later not follow the new reference because the color of the object, which stores the 
reference, was already black. In such a case the garbage collector would miss the reference 
and would incorrectly free the second object which leads to a use-after-free vulnerability. To 
prevent this, the v8 developers must use a write-barrier after code which writes to objects. 
This write-barrier resets the color of the object and therefore tells the garbage collector to 
revisit the object. Missing such a write-barrier directly leads to a use-after-free vulnerability. 
Another problem can occur when the garbage collector cannot identify a value as a pointer. 
Consider a garbage collected object which stores in a member variable a traditional data 
structure from the standard library, such as a std::vector. When other garbage collected 
objects are stored in this vector, the reference to them cannot be followed by the garbage 
collector. The reason for this is that data structures from the standard library such as vectors 
are stored on the default heap. The garbage collector therefore does not know the structure 
of the object and cannot follow the references stored in the object which point back to 
garbage collected objects. These objects will therefore not be marked and will be freed, 
although they can still be referenced via the member variable. An example for this 
vulnerability is CVE-2017-2491 and a writeup is available at 66. 
More details can be found in the v8 developer blog: 
• 
https://v8.dev/blog/trash-talk 
• 
https://v8.dev/blog/concurrent-marking 
• 
https://v8.dev/blog/orinoco-parallel-scavenger 
66 https://phoenhex.re/2017-05-04/pwn2own17-cachedcall-uaf 
34 
Examples: 
Safari CVE-2018-4192 – Missing WriteBarrier in Array.prototype.reverse() 
01: var someArray1 = Array(20008); 
02: for (var i = 0; i < someArray1.length; i++) { 
03:     someArray1[i] = []; 
04: } 
05: for(var index = 0; index < 3; index++) { 
06:     someArray1.map( 
07:         async function(cval, c_index, c_array) { 
08:             c_array.reverse(); 
09:         }); 
10: } 
11: for (var i = 0; i < someArray1.length; i++) { 
12:     print(someArray1[i].toString());  
// Accesses freed objects 
13: } 
The root cause of the vulnerability is a race condition in Riptide, the garbage collector of 
JSC. In line 6 the map function is invoked on an array which executes the passed callback 
function on every element of the array. The third argument to this callback is a pointer to the 
array itself and is accessed via the c_array variable in the PoC. The reverse() function is 
called on c_array to reverse the array within the callback. 
The problem occurs when the call to reverse() happens between two incremental marking 
phases. Consider that the array just gets partially marked in the first marking phase. For the 
analysis assume that elements 0 to 10,004 were marked but marking of the full array did not 
finish. After that, the main JavaScript execution continues and the reverse() function gets 
invoked. Since the array gets reversed, the not marked elements will be stored at index 0 to 
10,004 afterwards. When the second marking phase starts, marking will continue at index 
10,005 and will mark all elements up to index 20,007. However, these elements were already 
marked. Moreover, the garbage collector also forgets to mark the elements between index 
0 and 10,004. These elements are therefore freed after garbage collection finishes, but are 
still accessible via someArray, as demonstrated in line 12. 
The vulnerability occurs because the code of the reverse() functions misses a write barrier. 
This write-barrier would tell the garbage collector to start again at index 0 in the second 
marking phase. 
The vulnerability was found by RET2 via fuzzing for the Pwn2Own 2018 competition. 
Exploitation details are available in the RET2 blog at 67 68. An exploit is available at 69. 
Generalization for variation analysis: 
• 
A fuzzer should add a loop which accesses all elements of an array at the end of the 
test case. 
• 
A fuzzer should create a large array and ensure that the tested code gets executed 
multiple times to reliable trigger similar race conditions. The code structure of a large 
67 https://blog.ret2.io/2018/06/13/pwn2own-2018-vulnerability-discovery/ 
68 http://blog.ret2.io/2018/06/19/pwn2own-2018-root-cause-analysis/ 
69 https://gist.github.com/itszn/5e6354ff7975e65e5867f3a660e23e05 
35 
array with the map function applied on it can be used during fuzzing because it fulfills 
these requirements. 
4.2.2 Integer overflows 
Chapter 4.1.2 already discussed root causes of integer overflows. These vulnerabilities also 
occur in JavaScript engines. 
Examples: 
Chromium issue 789393 (2017) – Integer overflow in PropertyArray 
01: function* generator() {} 
02: for (let i = 0; i < 1022; i++) { // set "NumberOfFields" of "generator" to 1022 
03:     generator.prototype['b' + i];   // Important 
04:     generator.prototype['b' + i] = 0x1234; 
05: } 
06: trigger_garbage_collection(); 
07: for (let i = 0; i < 1022; i++) {    // A loop is not required for OOB access 
08:     generator.prototype['b' + i] = 0x1234;  // OOB access 
09: } 
The first loop in line 2 adds 1,022 descriptors to the generator. A generator, which can be 
created using the * syntax from line 1, is used because it has internally the unused properties 
fields set to 2. After the loop there are therefore in total 1,022+2=1,024 properties assigned. 
In the PropertyArray class the constant kLengthhFieldSize is set to 10 bits which allows a 
maximum property length of 1,023 properties. If more properties are incorrectly added, the 
stored length value overflows. In this case the stored length would wrap to zero because the 
lowest 10 bits of the number 1,024 are zero. However, enough space for the 1,024 properties 
was allocated, but the engine internally incorrectly assumes zero properties because the 
length field is set to zero.  
An OBB access is not directly possible because enough space was allocated. However, the 
garbage collector incorrectly handles the data during relocation to a different generation.  
To exploit the vulnerability (not shown in the above PoC), an additional array can be 
allocated after the loop from line 7 to 9 finishes and before garbage collection is triggered.  
Garbage collection must be triggered twice to ensure that the second array is stored in the 
old space together with the memory assigned to the generator. This ensures that the second 
array is stored adjacent in memory to the corrupted properties array. When the garbage 
collector reads the incorrect property length of zero, it does not copy the property array. 
Afterwards, the garbage collector copies the second array to the old space which means that 
the second array now overlaps the properties. This means that the length of the second array 
can be modified by writing to the property array. By adding a third array afterwards in 
memory, which stores generic objects, the OOB access from the second array, which is 
interpreter as double-array, can be used to interpret objects as double values and vice versa 
which leads to full information leakage, arbitrary read and write and finally to full code 
execution. 
36 
The vulnerability was reported 70 on 2017-11-29 by Google Project Zero and was fixed in 
January 2018 without a release note. Pak and Wesie developed a 1-day exploit for this 
vulnerability and released 71 it together with detailed slides during a Zer0Con 2018 talk in 
March 2018. 
Generalization for variation analysis: 
• 
Lines which seem unimportant from a logical perspective can have important side 
effects because of implementation details. An example is the code from line 3 which 
just accesses a property. One may suspect that this code can be optimized away, 
but since the code is initially interpreted, it gets executed together with possible side 
effects.  A fuzzer must therefore also generate code samples which do not make 
sense for JavaScript developers. 
• 
To trigger the bug, the number of loop iterations must exactly be 1,022 as shown in 
lines 2 and 7. Most fuzzers just use the minimum and maximum values of various 
datatypes. However, this issue demonstrates that fuzzing with all potencies of two is 
important and that small values should be subtracted or added. 
• 
Although the second loop is not required, it makes sense to add it at the end of the 
code or after garbage collection. The loop is used to access all properties to trigger 
potential OOB accesses. During fuzzing it makes sense to add similar code at various 
locations to check for potential OOB access. 
• 
The fuzzer should be able to create and test generator functions. 
• 
The fuzzer should trigger garbage collection at various locations. It should sometimes 
also trigger garbage collection twice since long-lived objects can be allocated directly 
in the old space. 
Chromium issue 808192, CVE-2018-6065 – Integer overflow in object allocation size 
01: const f = eval(`(function f(i) { 
02:     if (i == 0) { 
03:         class Derived extends Object { 
04:             constructor() { 
05:                 super(); 
06:                 ${"this.a=1;".repeat(0x3fffe-8)} 
07:             } 
08:         } 
09:         return Derived; 
10:     } 
11:     class DerivedN extends f(i-1) { 
12:         constructor() { 
13:             super(); 
14:             ${"this.a=1;".repeat(0x40000-8)} 
15:         } 
16:     } 
17:     return DerivedN; 
18: })`); 
19: let a = new (f(0x7ff))(); 
20: console.log(a); 
70 https://bugs.chromium.org/p/chromium/issues/detail?id=789393 
71 https://github.com/theori-io/zer0con2018_bpak 
37 
Line 19 instantiates a new JavaScript object. During the instantiation the required object size 
is calculated. This calculation is flawed because an integer overflow can occur which leads 
to the allocation of a too small object. The calculation is performed by summing up all 
properties from the prototype chain. The PoC creates a prototype chain of 0x7ff DerivedN 
objects, each having 0x40000-8 properties, and a Derived object with 0x3fffe-8 properties. 
When the size of all these properties is summed up and the header size of the object is 
added, an overflow occurs which leads to the allocation of a too small object. 
A full exploit is available in an attachment 72 of the bug tracker. 
Generalization for variation analysis: 
• 
A fuzzer should wrap code within calls to eval(). 
• 
A fuzzer should create recursive functions but should include stopping conditions to 
avoid hanging test cases. 
• 
A fuzzer should make use of the ${} syntax. 
• 
A fuzzer should add functions which return a class and instantiate objects by using 
code like: new (function_name(args))() 
• 
A fuzzer should create derived classes and fuzz code in the constructor. 
• 
A fuzzer should split bound values into several pieces and use them together in a 
test case. For example, in the above PoC the bound value was split into the values 
0x3fffe-8, 0x40000-8 and 0x7ff. 
Chromium issue 914736, CVE-2019-5790 – Overflow in language parser 
01: let s = String.fromCharCode(0x4141).repeat(0x10000001) + "A"; 
02: s = "'" + s + "'"; 
03: eval(s); 
The code generates a very long string in line 1 and wraps it inside single quotes. The problem 
occurs when the JavaScript engines parses such an overlong quoted string which can be 
triggered by calling eval() on the string. 
A writeup of the vulnerability is available at 73. 
Generalization for variation analysis: 
• 
This vulnerability was included because it demonstrates which bugs are hard to find 
via fuzzing. “The bug seemed quite obvious by reading the code, but was probably 
hard to spot by fuzzing because it requires around 20 GB of memory and quite some 
time to trigger it on a typical desktop machine.” 74 A high execution speed is preferred 
during fuzzing and it is therefore not attempted to find similar bugs. 
72 https://bugs.chromium.org/p/chromium/issues/attachmentText?aid=322992 
73 https://labs.bluefrostsecurity.de/blog/2019/04/29/dont-follow-the-masses-bug-hunting-in-javascript-engines/ 
74 https://labs.bluefrostsecurity.de/blog/2019/04/29/dont-follow-the-masses-bug-hunting-in-javascript-engines/ 