simulation from [ORS15] where the simulator generates the view of the malicious sender by honestly gen-
erating the receiver’s messages and then extracting all the values committed to by the sender. Nevertheless,
while in [ORS15] the authors rely on extractable commitments and extract the sender’s inputs via rewind-
ing, we directly extract its inputs by retrieving the queries made by the malicious sender to the fTKPRF;i
gi
tokens. The proof of correctness follows analogously. More explicitly, the share consistency check ensures
that for any particular column that the receiver obtains, if the sum of the values agree on the same bit, then
the receiver extracts the correct share of [xb] with high probability. Note that it sufﬁces for the receiver to
obtain (cid:20) + 1 good columns for its input b to extract enough shares to reconstruct xb since the shares can be
checked for validity. Namely, the receiver chooses (cid:20)=2 indices Tb and sets its input for these OT executions
as b. For the rest of the OT executions, the receiver sets its input as 1 (cid:0) b. Denote this set of indices by
T1(cid:0)b. Then, upon receiving the sender’s response to its challenge and the OT responses, the receiver ﬁrst
performs the shares consistency check. If this check passes, it performs the shares validity check for all
columns, both with indices in T1(cid:0)b and for the indices in a random subset of size (cid:20)=2 within Tb. If one
of these checks do not pass, the receiver aborts. If both checks pass, it holds with high probability that the
decommitment information for b = 0 and b = 1 are correct in all but s 2 !(log n) indices. Therefore, the
receiver will extract [xb] successfully both when its input b = 0 and b = 1. Furthermore, it is ensured that
if the two checks performed by the receiver pass, then a simulator can extract both x0 and x1 correctly by
simply extracting the sender’s input to the OT protocol and following the receiver’s strategy to extract.
R
On the other hand, when the receiver is corrupted, our simulation proceeds analogous to the simulation
in [ORS15] where the simulator generates the view of the malicious receiver by ﬁrst extracting the receiver’s
input b and then obtaining sb from the ideal functionality. It then completes the execution following the hon-
est sender’s code with (s0; s1), where s1(cid:0)b is set to random. Moreover, while in [ORS15] the authors rely
on a special type of interactive commitment that allows the extraction of the receiver’s input via rewind-
ing, we instead extract this input directly by retrieving the queries made by the malicious receiver to the
fTKPRF;l
gl2[3(cid:20)] tokens. The proof of correctness follows analogously. Informally, the idea is to show that
the receiver can learn (cid:20) + 1 or more shares for either x0 or x1 but not both. In other words there exists
a bit b for which a corrupted receiver can learn at most (cid:20) shares relative to s1(cid:0)b. Thus, by replacing s1(cid:0)b
with a random string, it follows from the secret-sharing property that obtaining at most (cid:20) shares keeps s1(cid:0)b
information theoretically hidden.
S
The next claim establishes that the commitments made by the parties are statistically hiding. We remark
that this claim is analogous to Claim 20 from [GIS+10]. For completeness, we present it below.
38
Lemma 5.1 For any i 2 [(cid:20)], let Db denote the distribution obtained by sampling a random combi with
bi = b. Then D0 and D1 are 2
(cid:0)(cid:20)+1-close.
Proof: Informally, the proof follows from the fact that ui has high min-entropy conditioned on vi and there-
fore (Ext(ui; h); h) hides ui information theoretically as it is statistically close to the uniform distribution.
More formally, consider a possibly maliciously generated token M1 that incorporates an arbitrary function-
ality from 5(cid:20) bits to (cid:20). It is possible to think of M1 as a function even if the token is stateful since we only
consider the min-entropy of the input with respect to the output when M1 is invoked from the same state.
Let Sv denote the subset of f0; 1g5(cid:20) that contains all x 2 f0; 1g5k such that M1(x) = v. First, we claim
that for a randomly chosen x   f0; 1g5(cid:20), SM1(x) is of size at least 23(cid:20) with probability at least 1 (cid:0) 2
(cid:0)(cid:20).
Towards proving this we calculate the number of x’s for which jSM1(x)j  1 (cid:0) 2
(cid:0)(cid:20):
In other words, the min-entropy of U is at least 3(cid:20) with very high probability. Now, whenever this is the
(cid:0)(cid:20), m = 1 and k = 3(cid:20) implies that
case, using the Leftover Hash Lemma (cf. Deﬁnition 3.7) with ϵ = 2
(cid:0)(cid:20)-close to the uniform distribution. Combining the facts that comb = (Ext(U; h) (cid:8)
(Ext(U; h); h) is 2
b; h; V ) and that U has high min-entropy at least with probability 1 (cid:0) 2
(cid:0)(cid:20), we obtain that D0 and D1 are
(cid:0)(cid:20)-close.
(cid:0)(cid:20) + 2
(cid:3)
2
We continue with the complete proof.
Proof: Let A be a malicious PPT real adversary attacking protocol (cid:5)GUC
OT in the FgWRAP-hybrid model. We
construct an ideal adversary S with access to FOT which simulates a real execution of (cid:5)GUC
OT with A such
that no environment Z can distinguish the ideal process with S and FOT from a real execution of (cid:5)GUC
with A. S starts by invoking a copy of A and running a simulated interaction of A with environment Z,
emulating the honest party. We describe the actions of S for every corruption case.
Simulating the communication with Z: Every message that S receives from Z it internally feeds to A
and every output written by A is relayed back to Z.
In case the adversary A issues a transfer query (transfer;(cid:1)), S relays the query to the FgWRAP.
OT
Simulating the corrupted S. We begin by describing our simulation:
1. A communicates with the functionality FgWRAP on behalf of the corrupted parties by sending create
messages f(Create; sid; S; R; midl; M1)gl2[3(cid:20)]. Then FgWRAP forwards these tokens to the honest
parties by sending receipt messages f(Receipt; sid; S; R; midl; M1)gl2[3(cid:20)].
2. Upon receiving acknowledgement messages f(Receipt; sid; S; R; midl; M1)gl2[3(cid:20)] that all [3(cid:20)] tokens
have been created by A, S communicates with the functionality FgWRAP on behalf of the honest parties
by sending create messages f(Create; sid; R; S; midl′; M2)gl′2[8(cid:20)2], where the code M2 implements
39
truly random functions (that is, M2 is encoded with a lookup table that includes some polynomial
number of queries bounded by the running time of the adversary). Then, the functionality FgWRAP
forwards receipt messages f(Receipt; sid; R; S; midl′; M2)gl′2[8(cid:20)2] to A. For each query u 2 f0; 1g5(cid:20)
made by A to the tokens TKPRF;l
, functionality FgWRAP runs M2 on that query and returns a random
v from f0; 1g(cid:20).
R
′
3. S generates the ﬁrst message by following the code of the honest receiver with input b = 0.
4. Upon receiving the second message from A, i.e. commitments (comA0; comB0; comA1; comB1) and
(C0; C1), it completes the execution by following the honest receiver’s code.
5. Next, S tries to extract s0 and s1. For this, it ﬁrst extracts matrices A0; B0; A1; B1 from the respective
commitments as described in the simulation for the proof of (cid:5)OT. More precisely, given any com-
mitment (cid:12); v, it ﬁrst checks if there exists a query/answer pair (u; v) that has already been recorded
by FgWRAP with respect to that token by sending a retrieve message (retreive; sid) to FgWRAP which
returns the list Qsid of illegitimate queries. If there exists such a query then the simulator sets the
decommitted value to be (cid:12) (cid:8) Ext(u), and ? otherwise. Next, to extract sb, S proceeds as follows: For
every i 2 [(cid:20)], it computes Ab[i; j] (cid:8) Bb[i; j] for all j 2 [2(cid:20)] and marks that column j good if they all
agree to the same value, say, (cid:13)j. If it ﬁnds more than (cid:20) + 1 good columns, it reconstructs the secret
xb by using share reconstruction algorithm on f(cid:13)jgj2good. Otherwise, it sets xb to ?.
6. S computes s0 = C0 (cid:8) x0 and s1 = C1 (cid:8) x1 and sends (s0; s1) to the trusted party that computes
FOT and halts, outputting whatever A does.
Next, we prove the correctness of our simulation in the following lemma.
Lemma 5.2
View
FgWRAP
OT ;A;Z ((cid:20))
(cid:5)GUC
(cid:20)2N
View
FOT
(cid:25)IDEAL;S;Z ((cid:20))
(cid:20)2N:
}
c(cid:25){
{
Proof: Our proof follows by a sequence of hybrid executions deﬁned below.
Hybrid H0: In this hybrid game there is no trusted party that computes functionality FOT. Instead, we
deﬁne a simulator S0 that receives the real input of the receiver and internally emulates the protocol
OT with the adversary A by simply following the honest receiver’s strategy. Finally, the output of
(cid:5)GUC
the receiver in the internal emulation is just sent to the external honest receiver (as part of the protocol
(cid:5)H0) that outputs it as its output. Now, since the execution in this hybrid proceeds identically to the
real execution, we have the following claim,
}
}
{
}
(cid:20)2N (cid:25){
Claim 5.3
View
FgWRAP
OT ;A;Z ((cid:20))
(cid:5)GUC
View(cid:5)H0 ;S0;Z ((cid:20))
(cid:20)2N.
Hybrids H1;0 : : : ; H1;8(cid:20)2: We deﬁne a collection of hybrid executions such that for every l
′ 2 [8(cid:20)2]
hybrid H1;l′ is deﬁned as follows. We modify the code of token TKPRF;l
by replacing the function
PRF(cid:13)l′ with a truly random function fl′. In particular, given a query u the token responds with a
randomly chosen (cid:20) bit string v, rather than running the original code of M2. We maintain a list of A’s
queries and responses so that repeated queries will be consistently answered. It is simple to verify that
the adversary’s view in every two consecutive hybrid executions is computationally indistinguishable
due to the security of the pseudorandom function embedded within TKPRF;l
. Moreover, since the
R
′
′
R
40
{
}
}
c(cid:25){
s(cid:25){
PRF key is hidden from the sender, it follows from the pseudorandomness property that the views in
every two consecutive hybrid are computationally indistinguishable. As in the previous hybrid, the
simulator hands the output of the receiver in the internal emulation to the external receiver as part of
the protocol (cid:5)H1;l′ . More formally, we have the following claim,
Claim 5.4 For every l
′ 2 [8(cid:20)2],
View(cid:5)H1;l′(cid:0)1
;S
1;l′(cid:0)1;Z ((cid:20))
(cid:20)2N
View(cid:5)H1;l′ ;S
1;l′ ;Z ((cid:20))
(cid:20)2N.
Hybrids H2;0 : : : ; H2;8(cid:20)2: This sequence of hybrids executions is identical to hybrid H1;8(cid:20)2 except that
results in the same response. Using a
′
here S2 aborts if two queries made by A to the token TKPRF;l
}
proof analogous to Lemma 4.10, we obtain the following claim.
{
R
}
Claim 5.5 For every l
′ 2 [8(cid:20)2],
View(cid:5)H2;l′(cid:0)1
;S
2;l′(cid:0)1;Z ((cid:20))
(cid:20)2N
View(cid:5)H2;l′ ;S
2;l′ ;Z ((cid:20))
(cid:20)2N.
Hybrid H3: In this hybrid, S3 proceeds identically to S2;8(cid:20)2 using the honest receiver’s input b with the
exception that it does not report the output of the receiver as what is computed in the emulation by
the simulator. Instead, S3 follows the code of the actual simulator to extract (s0; s1) and sets the
receiver’s output as sb. Note that the view of the adversary is identical in both hybrids H2;8(cid:20)2 and
H3. Therefore, to prove the indistinguishability of the joint output distribution, it sufﬁces to show that
the output of the honest receiver is the same. On a high-level, this will follow from the fact that if
the honest receiver does not abort then the two checks performed by the receiver, namely, the shares
validity check and the shares consistency check were successful, which would imply that there are at
least (cid:20) + 1 good columns from which the simulator can extract the shares. Finally, we conclude that
the reconstruction performed by the honest receiver and the simulator will yield the same value for sb.
More formally, we argue indistinguishability conditioned on when the two consistency checks pass
in the execution emulated by the simulator (in the event at least one of them do not pass, the receiver
aborts and indistinguishability directly holds). Then, the following hold for any s 2 !(log n):
Step 1: Since the shares validity check passed, following a standard cut-and-choose argument, it
(cid:0)O(s) that there are at least (cid:20) (cid:0) s rows for which ϕ(Ab[i;(cid:1)]) +
(cid:3). For b 2 f0; 1g, let the
;(cid:1)] + Bb[i
holds except with probability 2
ϕ(Bb[i;(cid:1)]) = 0. In fact, it sufﬁces if this holds at least for one row, say i
secret corresponding to Ab[i
Step 2: If for any column j 2 [2(cid:20)] and b 2 f0; 1g there exists a value (cid:13)j such that for all i 2 [(cid:20)]
;(cid:1)] be ~sb.
(cid:3)
(cid:3)
(cid:13)b[j] = Ab[i; j] + Bb[i; j];
; j]. Furthermore, if
then, combining with Step 1, we can conclude that (cid:13)b[j] = Ab[i
either the receiver or the simulator tries to extract the share corresponding to that column it will
extract (cid:13)b[j] since the commitments made by the sender are binding. Therefore, we can conclude
that if either the receiver or the simulator tries to reconstruct the secret for any b 2 f0; 1g, it will
reconstruct only with shares in f(cid:13)b[j]gj2J which implies that they reconstruct only ~sb.
; j] + Bb[i
(cid:3)
(cid:3)
Step 3: Now, since the shares consistency check passed, following another cut-and-choose argument,
(cid:0)O(s) that there is a set J of at least 2(cid:20)(cid:0)s columns such that for
it holds except with probability 2
any j 2 J the tokens do not abort on a valid input from the receiver and yield consistent values
for both bj = 0 and bj = 1. This means that if the honest receiver selects 3(cid:20)=4 columns with
41
input as its real input b, the receiver is guaranteed to ﬁnd at least (cid:20)+1 indices in J. Furthermore,
there will be (cid:20) + 1 columns in J for both inputs for the simulator to extract and when either of
them extract they can only extract ~sb.
Then to prove indistinguishability in this hybrid, it sufﬁces to prove that the simulator reconstructs sb
if and only if the receiver extracts sb and this follows directly from Step 3 in the proceeding argument,
since there is a unique value ~sb that either of them can reconstruct and they will reconstruct that value