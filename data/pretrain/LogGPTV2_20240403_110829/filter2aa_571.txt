### 前言
在最近的一个项目中，我遇到了一个非常有趣的Web应用防火墙（WAF）配置。这个站点使用了我之前审查过的一个Java框架。原本计划直接进行漏洞测试，但没想到这个WAF给我带来了不小的挑战。

### 第一次遇到这样的WAF
打开网站时，我发现它使用了一个我之前审查过的Java框架。初步尝试利用该框架中的两个权限绕过漏洞，结果却出乎意料地被拦截了。具体表现为：

1. 使用路径遍历的方式：`/xxx/../api/user` 被拦截。
2. 使用分号注入的方式：`/api/user;1.js` 也被拦截。

这种对分号的拦截行为是我第一次见到，即便是阿里云WAF也没有这么严格的限制。例如：
- `/api/user;?upload=file` 被拦截。
- 尝试使用 `..` 进行路径遍历同样被拦截：`/xxx/../api/user`。

### 干翻WAF
经过一系列尝试后，发现常见的编码、参数污染和垃圾数据包等方法均无效。因此，我决定回到分号和 `..` 的问题上继续研究。

1. **尝试问号编码**:
   - `/xxx/api/user?;` 没有被拦截，但这样无法使用 `;1.js` 绕过，因为 `getRequestURI()` 获取不到问号后面的内容。
   - 尝试将问号进行URL编码：`/xxx/api/user%3f;`，但这样也无法匹配到原来的路由。

2. **结合 `..` 和分号**:
   - 测试 `../` 和 `..;/` 的组合，发现 `../` 被拦截，而 `..;/` 不被拦截。
   - 因此，推断该WAF可能拦截 `../` 和分号 `;`。尝试通过问号编码绕过分号，再插入分号进行绕过：
     - `/xxx/%3f/..;/..;/api/user` 成功绕过WAF。

### 后续操作
成功绕过WAF后，尝试上传JSP文件时再次遇到拦截。最终通过使用双引号和Java Unicode特性成功绕过，完成了上传操作。

总结来说，这次经历展示了WAF的复杂性和多样性。通过细致的研究和多种技术手段的结合，最终成功绕过了这些防御措施。