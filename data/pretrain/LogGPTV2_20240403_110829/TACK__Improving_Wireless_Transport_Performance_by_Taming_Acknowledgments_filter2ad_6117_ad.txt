𝑀 𝑆𝑆 − 𝑄 when 𝑏𝑑𝑝 ≥ 𝛽 · 𝐿· 𝑀 𝑆𝑆, and △𝑄 = 𝜌 · 𝜌′ · 𝐿− 𝑄
when 𝑏𝑑𝑝  4) reported by a TACK, while TCP’s SACK
option only reports 3 or 4 blocks per ACK [55].
Note that in order to avoid unnecessary retransmission,
TACK only reports missing packets that have been reported
by loss-event-driven IACKs, while the sender only retransmits
a specific packet once per RTT when the loss is repeatedly
notified by both IACKs and TACKs.
5.2 Advancements in round-trip timing
As discussed above, legacy way of round-trip timing adopts
simple RTT sampling (S4.3), introducing either large biases
or high overhead for large 𝑏𝑑𝑝 transport. Without loss of
generality, this section takes the minimum RTT estimation
as an example2. Aiming to reduce TACK’s overhead of accu-
rate round-trip timing, we propose a receiver-based way to
estimate the minimum RTT indirectly without maintaining
too many connection states.
The rationale is that the variation of one-way delay (OWD)
reflects the variation of RTT. The OWD estimation does not
require clock synchronization here as we use relative values.
For example in Figure 4 (c), a relative OWD sample can be
computed as 𝑂𝑊 𝐷 = 𝑡2 − 𝑡0, where 𝑡0 and 𝑡2 are the packet
2In general, the minimum RTT estimation can be easily extended to
the 𝑥𝑡ℎ percentile RTT estimation, where 𝑥 ∈ (0, 100].
1K10K100K1M10M100MData Blocked in Receive Buffer(Byte)0.00.20.40.60.81.0CDFWithout IACKWith IACK0.21510Loss Rate on ACK Path (%)050100Bandwidth Utilization (%)92.778.391.791.875.991.691.663.480.290.860.665.3TACK-richTACK-poorTCP BBRSIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Tong Li et al.
departure timestamp and the packet arrival timestamp, re-
spectively. Upon packet arrivals, the receiver is capable to
generate per-packet OWD samples.
The smoothed OWD is an exponentially weighted moving
average (EWMA) [65] of the per-packet OWD samples at
the receiver. According to the smoothed OWD, the minimum
OWD during each TACK interval can be observed. After-
wards, based on the TACK delay (∆𝑡⋆) and the departure
timestamp (𝑡⋆
0) corresponding to the packet that achieves the
minimum OWD, the sender calculates the RTT of this packet
as a minimum RTT sample. Ultimately, the minimum RTT
is computed according to these minimum RTT samples using
a minimum filter [10, 17] over a long period of time 𝜏 (𝜏 ≤ 10
s), where the 10-second part is to handle route changes. Note
that we adopt two minimum filters at both sides because the
minimum filter at the sender further implicitly reduces biases
of the ACK delivery.
To investigate how round-trip timing impacts performance,
we first discuss the accuracy of 𝑅𝑇 𝑇𝑚𝑖𝑛 as a microbenchmark
that we seek to improve. We use the TACK-based TCP
implementation (S5.4) to transmit flows between two Wi-Fi
endpoints, with a network emulator (see S6.1) forwarding.
A fixed bidirectional latency (100 ms) is set between the
endpoints. Figure 6(a) shows that the advanced round-trip
timing tracks the real minimum RTT. However, legacy RTT
sampling suffers 8% ∼ 18% larger 𝑅𝑇 𝑇𝑚𝑖𝑛 estimates. We
further explore performance improvement on real paths over
the Internet [59]. As illustrated in Figure 6(b), applying the
advanced round-trip timing has reduced 20% of the 95th
percentile OWD and 54% of the packet loss. Note that this
improvement is obtained without sacrificing throughput [60,
61]. We infer that an accurate minimum RTT estimate avoids
pushing too much data into the pipe, and thus reduces latency
and loss.
5.3 Advancements in send rate control
Lowering the ACK frequency might result in larger burstiness.
In order to control the amount of sent data, TACK-based
congestion controller should integrate with pacing instead
of the burst send pattern. The rationale is that pacing [2]
smooths traffic behaviors by evenly spacing packets at a spe-
cific pacing rate (denoted by 𝑝𝑎𝑐𝑖𝑛𝑔 𝑟𝑎𝑡𝑒) according to the
congestion controller. For example, 𝑝𝑎𝑐𝑖𝑛𝑔 𝑟𝑎𝑡𝑒 may be ob-
tained by distributing congestion window (CWND) over RTT
when applying a window-based controller (e.g., CUBIC [39]),
and 𝑝𝑎𝑐𝑖𝑛𝑔 𝑟𝑎𝑡𝑒 may also be computed using bandwidth
estimate of a rate-based controller (e.g., BBR [17]).
The 𝑝𝑎𝑐𝑖𝑛𝑔 𝑟𝑎𝑡𝑒 can be computed at both endpoints.
Take the rate-based controller as an example, if a BBR-
like bandwidth estimation [17] is adopted, the pacing rate
at time 𝑡 is computed at the sender side using a windowed
max-filter (𝜃𝑓 𝑖𝑙𝑡𝑒𝑟 is set at several RTTs): 𝑝𝑎𝑐𝑖𝑛𝑔 𝑟𝑎𝑡𝑒𝑡 ∝
𝑚𝑎𝑥(𝑑𝑒𝑙𝑖𝑣𝑒𝑟𝑦 𝑟𝑎𝑡𝑒𝑖), ∀𝑖 ∈ [𝑡−𝜃𝑓 𝑖𝑙𝑡𝑒𝑟, 𝑡], where 𝑑𝑒𝑙𝑖𝑣𝑒𝑟𝑦 𝑟𝑎𝑡𝑒𝑖
is the deliver rate computed upon each TACK arrival. Since
receiver-based computation is more straightforward than
sender-based one in the context of TACK, a rate-based con-
troller may conduct bandwidth estimation in a receiver-based
(a) Microbenchmark
(b) Wild Internet tests
Figure 6: Round-trip timing in the context of TACK.
(a) Legacy RTT sampling suffers 8% ∼ 18% larger
𝑅𝑇 𝑇𝑚𝑖𝑛 estimates. (b) Latency and loss change be-
fore [61] and after [60] applying the advanced round-
trip timing.
way instead, i.e., the 𝑑𝑒𝑙𝑖𝑣𝑒𝑟𝑦 𝑟𝑎𝑡𝑒 is computed at the receiv-
er upon data packet arrivals and synced to the sender via
TACK. With regard to the window-based controllers such
as CUBIC, Vegas [16], and Compound TCP [72], a TACK-
based congestion controller requires converting the CWND
to the pacing rate [10]: 𝑝𝑎𝑐𝑖𝑛𝑔 𝑟𝑎𝑡𝑒𝑡 ∝ 𝐶𝑊 𝑁 𝐷
, where 𝑠𝑅𝑇 𝑇𝑡
denotes the smoothed RTT at time 𝑡.
𝑠𝑅𝑇 𝑇𝑡
Most of the popularly used congestion controllers can
work with the TACK design with minor implementation
changes. Moreover, rate-based congestion controllers (e.g.,
BBR) usually requires less changes than window-based ones
(e.g., CUBIC). In this paper, we adopt a TACK-based con-
gestion controller co-designing BBR for TACK performance
evaluation (S6). BBR’s RTT and bandwidth estimations are
all coupled with frequent ACKs. However, these can be imple-
mented with small amount of work by moving the estimation
logic from sender to receiver. This receiver-based paradigm
also fits the TACK-based acknowledgement mechanism well.
On the other hand, since one round of pacing rate control can
be as large as multiple RTTs (e.g., 8), BBR is supposed to
work well with the TACK-based protocol framework where
ACKs are excessively delayed.
In addition, lowering the ACK frequency also probably
causes bandwidth under-utilization without timely updating
the send window. To tackle this issue, an IACK updating the
largest acknowledged packet and the AWND should be sent
without delay when encountering an abrupt change of receive
buffer. For example, when the receive buffer usage is full, an
IACK may be generated to report a zero window. Moreover,
if a large volume of data3 has been released in the receive
buffer, an IACK may also be sent to update the AWND.
5.4 Protocol implementation
TACK, or its acknowledgement mechanism, can be imple-
mented in most of the ordered and reliable transport protocol-
s. This paper mainly discusses TCP-TACK, a TACK-based
TCP implementation that applies TACK and deploys the
advancements as specified in S5.1∼5.3. A full implementation
of TCP-TACK including all the above advancements requires
3The trigger conditions of IACKs for updating send window can vary
with different protocol implementations. An effective trigger should
be carefully designed, which we leave to the further work.
0510152025Time (s)100120140160180RTT (ms)118110108RTT samplesRTTmin (sampled)RTTmin (advanced)Latency02040608010012095th Percentile OWD (ms)Loss00.20.40.60.81.0Packet Loss Rate (%)SamplingAdvancedTACK: Improving Wireless Transport Performance by Taming Acknowledgments
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
extension on the TCP option to introduce more ACK types,
and also requires extension on the TCP data field to carry
more information in ACKs.
According to Equation (3), 𝑏𝑤 should be estimated in
real time for TACK frequency update. This paper defines
𝑏𝑤 as the maximum delivery rate. The receiver computes
the average delivery rate (𝑑𝑒𝑙𝑖𝑣𝑒𝑟𝑦 𝑟𝑎𝑡𝑒) per TACK interval
as the ratio of data delivered to time elapsed. At time 𝑡,
the maximum delivery rate is a windowed max-filtered value
of the delivery rates, i.e., 𝑏𝑤 = max (𝑑𝑒𝑙𝑖𝑣𝑒𝑟𝑦 𝑟𝑎𝑡𝑒𝑖), ∀𝑖 ∈
[𝑡 − 𝜃𝑓 𝑖𝑙𝑡𝑒𝑟, 𝑡], where 𝜃𝑓 𝑖𝑙𝑡𝑒𝑟 is recommended as 5∼10 RTTs.
The receiver computes the loss rate (𝜌) on the data path
per TACK interval. 𝜌 is the ratio of number of lost packets
to number of packets that should have been received. The
sender also computes the loss rate (𝜌′) on the ACK path
when 𝑅𝑇 𝑇𝑚𝑖𝑛 is updated. 𝜌′ is the ratio of number of lost
TACKs to number of expected TACKs during a period of
time. Note that 𝑏𝑤 and 𝑅𝑇 𝑇𝑚𝑖𝑛 are synced between sender
and receiver, the sender therefore is capable to compute the
number of expected TACKs based on the TACK frequency.
IACKs are used for real-time synchronization in these cases.
6 EVALUATION
In this section, we first investigate the ideal performance
of TACK over wireless links with various 802.11 standards.
We then evaluate the actual performance of TCP-TACK in
WLAN scenarios, including the deployment experience in
commercial products. We also investigate how TCP-TACK
would work over the combined links of WLAN and WAN.
Finally, we share our long-term experience over WAN links,
which further validates the advancements of the TACK-based
protocol design.
6.1 Experiment setup
Experiment data is conducted on various wireless links (e.g.,
IEEE 802.11b/g/n/ac), controllable links connected with
a Spirent Attero network emulator [70], and shared links
on the Internet, using the link conditions for randomized
experimental trials. If not otherwise specified, the PHY raw
bit rates of 802.11b/g/n/ac links are 11/54/300/866.7 Mbps,
respectively. Detailed parameters are listed in Figure 7.
Figure 7: Parameters of 802.11-based links.
Since this paper mainly discusses acknowledgement mech-
anism rather than congestion control, we do not intend to
investigate the differences among various congestion con-
trollers. Instead, we focus on the comparison between dif-
ferent acknowledgement mechanisms in the context of the
same congestion controller upon the same transport protocol.
Particularly, TCP-TACK is compared with TCP BBR. TCP-
TACK is implemented upon the TCP of our user-mode Stack4
4TCP-TACK has been widely applied in commercial products of
Huawei. Because of Huawei’s policies related to Linux’s GNU GPL
(a) ACK frequency reduction
(b) ACK frequency (Hz)
Figure 8: TACK reduces ACK frequency over the
IEEE 802.11b/g/n/ac wireless links.
based on the Netmap framework [68]. Both TCP-TACK and
TCP BBR has integrated the improvements specified in [18]
to improve throughput over wireless links with aggregation.
The Linux kernel follows the TCP [7, 15] guidelines of
sending an ACK for every second full-sized data packet re-
ceived. For experimentation we changed the Linux Kernel
5.3 TCP code [30] to allow the receiver sends an ACK for
every 𝐿 (𝐿 ≥ 2) full-sized data packets, with which we
can deploy prior ACK thinning mechanisms, i.e., TCP vari-
ants with 𝐿 = 4, 8, 16. We introduced a new option called,
BPF SOCK OPS ACK THRESH INIT, as part of the BPF socket
options [54] (BPF PROG TYPE SOCK OPS) to allow changing the
ACK frequency. This option operates in TCP control flow
handling only and does not introduce any runtime overhead
during data flow.
For a fair comparison, we tried our best to use default
versions and parameters for all schemes. For example, TCP
BBR represents TCP using BBR as congestion controller
and RACK [21] as loss detection algorithm. TCP CUBIC
is the default SACK-enabled implementation in the latest
Linux kernels. Unless otherwise noted, TACK sets 𝐿 = 2,
TCP delayed ACK is enabled, and data packets are full-sized
with 𝑀 𝑆𝑆 = 1500 bytes.
6.2 TACK frequency in real-world
deployments
First of all, we give numeral analysis of TACK frequency
over the 802.11 wireless links in comparison with standard
delayed ACKs. Figure 8(a) shows that more number of ACKs
are reduced in the case of a faster PHY capacity. Specifically,