title:Towards automated proofs for asymmetric encryption schemes in the
random oracle model
author:Judica&quot;el Courant and
Marion Daubignard and
Cristian Ene and
Pascal Lafourcade and
Yassine Lakhnech
Towards Automated Proofs for Asymmetric Encryption
Schemes in the Random Oracle Model
Judicaël Courant, Marion Daubignard, Cristian Ene,
∗
Pascal Lafourcade, Yassine Lakhnech
Université Grenoble 1, CNRS,  Verimag
ﬁPI:EMAIL
ABSTRACT
Chosen-ciphertext security is by now a standard security
property for asymmetric encryption. Many generic construc-
tions for building secure cryptosystems from primitives with
lower level of security have been proposed. Providing secu-
rity proofs has also become standard practice. There is, how-
ever, a lack of automated veriﬁcation procedures that ana-
lyze such cryptosystems and provide security proofs. This
paper presents an automated procedure for analyzing generic
asymmetric encryption schemes in the random oracle model.
This procedure has been applied to several examples of en-
cryption schemes among which the construction of Bellare-
Rogaway 1993, of Pointcheval at PKC’2000 and REACT.
Categories and Subject Descriptors: E.3 DATA EN-
CRYPTION: Public key cryptosystems
General Terms: Security, veriﬁcation.
Keywords: Hoare logics, asymmetric encryption, provable
security, automated proofs, random oracle model.
1.
INTRODUCTION
Our day-to-day lives increasingly depend upon informa-
tion and our ability to manipulate it securely. This requires
solutions based on cryptographic systems (primitives and
protocols). In 1976, Diﬃe and Hellman invented public-key
cryptography, coined the notion of one-way functions and
discussed the relationship between cryptography and com-
plexity theory. Shortly after, the ﬁrst cryptosystem with
a reductionist security proof appeared (Rabin 1979). The
next breakthrough towards formal proofs of security was
the adoption of computational security for the purpose of
rigorously deﬁning the security of cryptographic schemes.
In this framework, a system is provably secure if there is
a polynomial-time reduction proof from a hard problem to
an attack against the security of the system. The prov-
able security framework has been later reﬁned into the ex-
∗
SCALP and SFINCS
This work is partially supported by the project AVOTE,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
act (also called concrete) security framework where better
estimates of the computational complexity of attacks are
achieved. While research in the ﬁeld of provable cryptog-
raphy has achieved tremendous progress towards rigorously
deﬁning the functionalities and requirements of many cryp-
tosystems,
little has been done for developing computer-
aided proof methods or more generally for investigating a
proof theory for cryptosystems as it exists for imperative
programs, concurrent systems, reactive systems, etc...
In this paper, we present an automated proof method for
analyzing generic asymmetric encryption schemes in the ran-
dom oracle model (ROM). Generic encryption schemes aim
at transforming schemes with weak security properties, such
as one-wayness, into schemes with stronger security proper-
ties, especially security against chosen ciphertext attacks.
Examples of generic encryption schemes are [11, 23, 21, 5,
6, 19, 18, 17]. The paper contains two main contributions.
The ﬁrst one is a compositional Hoare logic for proving IND-
CPA-security. That is, we introduce a simple programming
language (to specify encryption algorithms that use one-way
functions and hash functions) and an assertion language that
allows to state invariants and axioms and rules to establish
such invariants. Compositionality of the Hoare logic means
that the reasoning follows the structure of the program that
speciﬁes the encryption oracle. The assertion language con-
sists of three atomic predicates. The ﬁrst predicate allows
us to express that the value of a variable is indistinguishable
from a random value even when one gives the values of a
set of variables (or some simple expressions on variables).
The second predicate allows us to state that it is computa-
tionally infeasible to compute the value of a variable given
the values of a set of variables. Finally, the third predicate
allows us to state that the value of a variable has not been
submitted to a hash function.
Transforming the Hoare logic into an (incomplete) au-
Indeed,
tomated veriﬁcation procedure is quite standard.
we can interpret the logic as a set of rules that tell us
how to propagate the invariants backwards. We have done
this for our logic resulting in a veriﬁcation procedure im-
plemented in less than 250 lines of CAML. We have been
able to automatically verify IND-CPA security of several
schemes among which [5, 18, 17]. Our Hoare logic is in-
complete for two main reasons. First, IND-CPA security
is an observational equivalence-based property, while with
our Hoare logic we establish invariants. Nevertheless, as
shown in Proposition 3.1, we can use our Hoare logic to
prove IND-CPA security at the price of completeness. That
is, we prove a stronger property than IND-CPA. The second
reason, which we think is less important, is that for eﬃciency
reasons some axioms are stronger than needed.
The second contribution of the paper presents a simple
criterion for plaintext awareness (PA). Plaintext awareness
has been introduced by Bellare and Rogaway in [6]. It has
then been reﬁned in [4] such that if an encryption scheme
is PA and IND-CPA then it is IND-CCA. Intuitively, PA
ensures that an adversary cannot generate a valid cipher
without knowing the plaintext, and hence, the decryption
oracle is useless for him. The deﬁnition of PA is complex
and proofs of PA are also often complex. In this paper, we
present a simple syntactic criterion that implies plaintext
awareness. Roughly speaking the criterion states that the
cipher should contain as a sub-string the hash of a bitstring
that contains as substrings the plaintext and the random
seed. This criterion applies for many schemes such as [5,
17, 18] and easy to check. Although (or maybe because) the
criterion is simple, the proof of its correctness is complex.
Putting together these two contributions, we get a proof
method for IND-CCA security.
An important feature of our method is that it is not based
on a global reasoning and global program transformation as
it is the case for the game-based approach [7, 20]. Indeed,
both approaches can be considered complementary as the
Hoare logic-based one can be considered as aiming at char-
acterizing, by means of predicates, the set of contexts in
which the game transformations can be applied safely.
Related work.
We restrict our discussion to work providing computa-
tional proofs for cryptosystems. In particular, this excludes
symbolic veriﬁcation (including ours). We mentioned above
the game-based approach [7, 20, 15]. In [8, 9] B. Blanchet
and D. Pointcheval developed a dedicated tool, CryptoVerif,
that supports security proofs within the game-based ap-
proach. CryptoVerif is based on observational equivalence.
The equivalence relation induces rewriting rules applicable
in contexts that satisfy some properties.
Invariants prov-
able in our Hoare logic can be considered as logical repre-
sentations of these contexts. Moreover, as we work with
invariants, that is we follow a state-based approach, we
need to prove results that link our invariants to game-based
properties such as indistinguishability (cf. Proposition 3.1
and 3.12). Our veriﬁcation method is fully automated. It
focusses on asymmetric encryption in the random oracle
model, while CryptoVerif is potentially applicable to any
cryptosystem.
G. Barthe and S. Tarento were among the ﬁrst to provide
machine-checked proofs of cryptographic schemes without
relying on the perfect cryptography hypothesis. They for-
malized the Generic Model and the Random Oracle Model in
the Coq proof assistant, and used this formalization to prove
hardness of the discrete logarithm [1], security of signed
ElGamal encryption against interactive attacks [3], and of
Schnorr signatures against forgery attacks [22]. They are
currently working on formalizing the game-based approach
in Coq [2]. D. Nowak provides in [16] an implementa-
tion in Coq of the game-based approach. He illustrates his
framework by a proof of the semantic security of the en-
cryption scheme ElGamal and its hashed version. Another
interesting work is the Hoare-style proof system proposed by
R. Corin and J. Den Hartog for game-based cryptographic
proofs [10]. The main diﬀerence between our logic and theirs
is that our assertion language does not manipulate probabil-
ities explicitly and is at a higher level of abstraction. On the
other hand, their logic is more general. In [12], Datta et al.
present a computationally sound compositional logic for key
exchange protocols. There is, however, no proof assistance
provided for this logic neither.
Outline:
In Section 2, we introduce notations used for
deﬁning our programming language and generic asymmetric
encryption schemes. In Section 3, we present our method
In Section 4 we introduce
for proving IND-CPA security.
a criterion to prove plaintext awareness.
In Section 5 we
explain the automated veriﬁcation procedure derived from
our Hoare logic. Finally, in Section 6 we conclude.
2. DEFINITIONS
r← Ω, . . . , Hn
We are interested in analyzing generic schemes for asym-
metric encryption assuming ideal hash functions. That is,
we are working in the random oracle model [13, 5]. Using
r← Ω to denote that H is
standard notations, we write H
randomly chosen from the set of functions with appropriate
domain. By abuse of notation, for a list (cid:2)H = H1,·· · , Hn
r← Ω instead of the sequence
of hash functions, we write (cid:2)H
r← Ω. We ﬁx a ﬁnite set H = {H1, . . . , Hn}
H1
of hash functions and also a ﬁnite set Π of trapdoor per-
mutations and O = Π ∪ H. We assume an arbitrary but
ﬁxed ordering on Π and H; just to be able to switch be-
tween set-based and vector-based notation. A distribution
ensemble is a countable sequence of distributions {Xη}η∈.
We only consider distribution ensembles that can be con-
structed in polynomial time by probabilistic algorithms that
have oracle access to O. Given two distribution ensembles
X = {Xη}η∈ and X
η}η∈, an algorithm A and
(cid:3)
η ∈ , we deﬁne the advantage of A in distinguishing Xη
and X
(cid:3)
η as the following quantity:
= {X
(cid:3)
Adv(A, η, X, X
(cid:3)
r← Xη : AO
Pr[x
) =
(x) = 1] − Pr[x
r← X
η : AO
(cid:3)
(x) = 1].
We insist, above, that for each hash function H, the prob-
abilities are also taken over the set of maps with the appro-
priate type. Let Adv(η, X, X
)), the
) = supA (Adv(A, η, X, X
(cid:3)
(cid:3)
maximal advantage taken over all probabilistic polynomial-
time algorithms. Then, two distribution ensembles X and
(cid:3)
(cid:3)
are called indistinguishable if Adv(η, X, X
X
) is negligi-
ble as a function of η and denoted by X ∼ X
(cid:3)
In other
words, for any polynomial-time (in η) probabilistic algo-
rithm A, Adv(A, η, X, X
) is negligible as a function of η.
We insist that all security notions we are going to use are in
the ROM, where all algorithms, including adversaries, are
equipped with oracle access to the hash functions.
2.1 A simple programming language for
.
(cid:3)
encryption and decryption oracles
We introduce a simple programming language without
loops in which the encryption and decryption oracles are
speciﬁed. The motivation for ﬁxing a notation is obvious: it
is mandatory for developing an automatic veriﬁcation pro-
cedure. Let Var be an arbitrary ﬁnite non-empty set of vari-
ables. Then, our programming language is built according
to the following BNF described in Table 1, where for a bit-
1, and
string bs = b1 . . . bk (bi are bits), bs[n, m] = bn . . . bm
1Notice that bs[n, m] = , when m < n and bs[n, m] =
N is the name of the oracle, c its body and x and y are the
input and output variable respectively. Note the command
y[n, m] is only used in the decryptions, it is why we do not
have to consider it in our Hoare logic. With this language
we can sample an uniform value to x, apply a way func-
−1, a hash function, the exclusive-or,
tion f and its inverse f
the concatenation and substring function, and perform an
“if-then-else” (used only in the decryption function).
Example 2.1. The following command encodes the en-
cryption scheme proposed by Bellare and Rogaway in [5]
(shortly E (ine; oute) = f (r)||ine ⊕ G(r)||H(ine||r)):
E (ine, oute) :
r← {0, 1}η0 ; a := f (r); g := G(r);
r
b := ine ⊕ g; s := ine||r; c := H(s);
u := a||b||c; oute := u;
where, f ∈ Π and G, H ∈ H.
Semantics: In addition to the variables in Var, we con-
sider variables (cid:2)H1 , . . . , (cid:2)Hn . Variable (cid:2)Hi records the
queries to the hash function Hi and can not be accessed
by the adversary. Thus, we consider states that assign bit-
strings to the variables in Var and lists of pairs of bit-strings
to (cid:2)Hi . A state associates a value in {0, 1}∗
to each vari-
able in Var and a list of pairs of values to (cid:2)H . For simplic-
ity of the presentation, we assume that all variables range
over large domains, whose cardinalities are exponential in
r← U is the uniform sampling
the security parameter η. u