When the middle host is a Linux router, because Nmap can
not ﬁnd any open port at the target, it can not make any de-
duction about the target’s OS type. When the middle host
is a CTCP router, because of the work of the operative, all
target host’s ports look like open ports even though the host
Off-Line
Windows
XP
Linux
2.4.7-10
Linux Router CTCP Router
Linux 2.4.x -
2.5.x(86%)
Linux 2.4.x -
2.5.x(86%)
Linux 2.4.x -
2.5.x(86%)
95/98/ME
NT/2K/XP
Linux 2.4.x -
X
2.5.x
Table 1. OStypesofinnerhostsreportedbyNmap.
TherouteriseitheraLinuxrouteroraCTCP router.
BothroutersrunLinux2.4.7-10kernel.Eachcolumn
represents a different router. Each row describes a
distinct OS used by the inner host. Within a table
entry, ‘X’ means ”unable to detect and (cid:0)(cid:1) means
theconﬁdencelevelNmaphasaboutaguess.
is disconnected. But all the port-scanning packets are redi-
rected to the police socket whose backlog queue size is only
ﬁve, therefore some port-scanning packets, e.g. SYN pack-
ets, will be dropped and the scanner can not receive any re-
sponses associated with those ports that the dropped pack-
ets were heading for. There is no ACK for RST packets,
in other words there is no RST packet retransmission, thus
Nmap will think those ports are closed and will send them
probe packets suitable for close ports. However those ports
are open. This confuses Nmap. So even though Nmap is
supposed to be able to get the OS type of the host that it
interacts with (here the host is CTCP) and misunderstand
CTCP’s OS type as its target’s OS type, Nmap still needs
to guess to get the OS type. Fortunately, this time Nmap’s
guess is right. But even so, this will not cause any problem,
because it is the inner hosts that provide network services
the scanners are interested in and CTCP doesn’t provide
those kinds of services. Moreover, CTCP is supposed to
have the most secure system installed.
In the second test of Nmap the inner host executes Win-
dow XP. If the middle host is a Linux router, the Nmap can
correctly induce inner host’s OS type. If the middle ma-
chine is CTCP, then for the same reason as above, Nmap
still needs to guess. This time Nmap is wrong.
In the third test of Nmap, we install the same OS as
CTCP’s at the inner host to check whether this can help
Nmap avoid guessing. In this test both CTCP and the inner
host use Linux 2.4.7-10 OS. Again when CTCP works as a
normal router, Nmap can correctly infer the inner host’s OS
type and version. But when CTCP’s protection functions
are activated, the results are the same as the second test.
The above results show no matter what OS an inner host
uses, Nmap can not get the correct OS type of the inner host.
The best Nmap can get is the guessed OS type of CTCP.
The test results of p0h are similar to Nmap’s. p0h still
misunderstands CTCP’s OS type as its target’s OS type. But
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Stack Size R=3 R=10
0/15
0/0
2MB
8KB
0/49
0/0
Table 2. Numberoffalsepositiveswhenrunningthe
bufferoverﬂowattack detectionheuristic againstthe
test samples. ”R=3” means the number of repeated
patternsintheinputstringhastobeequaltoormore
than 3. Two stack sizes are used, 2MB And 8KB.
Ineachentrytheleftisthenumberoffalsepositives
for return-into-libc attack, and the right is the num-
beroffalsepositivesforbufferoverﬂowattacksusing
injectedcode.
p0h can accurately deduce, not guess, the OS type of the
host that it interacts with (here it is CTCP).
4.1.2 Exploit String Detector
To test the effectiveness of MCI’s exploit string detector, ob-
ject ﬁles (library ﬁles, executable ﬁles, . . . ), document ﬁles
(pdf, ps, doc, txt, html, . . . ), and picture ﬁles (gif, jpg, mpeg,
. . . ) with size 209MB, 183MB, and 11MB respectively are
used. They are randomly chosen from different hosts. For
false negative test, MCI could detect the 6 exploit strings
described in subsection 2.2 correctly.
For false positive test, MCI uses signatures introduced
in subsection 3.1 to examine the test samples with different
stack sizes and distinct numbers of repeating pattern copies.
Table 2 shows the results.
The false positive test results show when stack size is
8k and the number of repeating pattern copies is 3, MCI
has 0 false positive in examining these 404-Mbyte test sam-
ples. Qualitative analysis could explain this results. First, a
Linux stack address starts with 0xbf which is not a visible
ASCII character, therefore we can anticipate this character
will not appear at telnet data, e-mails which don’t have at-
tachments, html ﬁles and so on. Second even though this
character could appear in an executable ﬁle or in an image
ﬁle, in order to cause a false positive alarm, the same pattern
must repeat 3 times. For a binary ﬁle, it means if there is
an instruction with that string pattern, then the exact same
instruction must repeat several times in the program. From
our experience, it seems it is not a common situation. Based
on the above analysis, we think even though it is still pos-
sible that the signatures we used will cause false positives,
we can expected it will not be high.
4.1.3 Stealthy TCP Connection Hijacking
Hunt [36] and JUGGERNAUT [35] are two popular TCP
hijacking tools. But either the hijacking is visible to the vic-
tims (Hunt) or the hijacking tool automatically quits when
executed in our system (JUGGERNAUT).
In a TELNET case, when hunt is used, one end host of
the hijacked connection can see the letters typed by the hi-
jacker from its own monitor and all this end host’s output
are dropped by its communication counterpart, moreover
when the host terminates the process, the hijacked connec-
tion is also closed. This test shows visible TCP hijacking
could be detected and terminated by the hijacked connec-
tion’s owner. Thus it is not an ideal hijacking tool.
We use a packet construction tool, gspoof [37], and TCP-
DUMP to test CTCP’s effectiveness in defending against
stealthy TCP connection hijacking.
First a TCP connection is created between two host,
HOST-a and HOST-b. Then TCPDUMP is executed at
HOST-a. After gspoof is used to construct a packet that has
HOST-a as it destination and HOST-b as its source and has a
sequence number outside HOST-a’s receiving window, the
packet is send to HOST-a from a third host HOST-c. The re-
sults of TCPDUMP show after receiving the crafted packet,
the correct RST packet is created and sent back.
4.2. Performance Evaluation
In performance test, we analyze the throughput impact
introduced by CTCP. In the tests, different numbers of TCP
connections are opened between the client and the inner
server. Then the client continues pumping data into the in-
ner host. And we measure how many bits per second are
received by the server. Results in Figure 5 shows that CTCP
has a better throughput than a Linux router does. In addi-
tion, as a Linux router, CTCP’s throughputs are not inﬂu-
enced by the number of connections traversing through it.
Analysis and further experiments show the throughput
gains come mainly from two sources. First, under CTCP
architecture, a client host has shorter ACK packet returning
time, and thus could send packets more quickly than it does
under a Linux router. Second, CTCP architecture allows the
processing of a packet and the transmission of next packet
to proceed simultaneously. In other words, when the client
checks the validity of an ACK packet of a previous outgoing
packet, say (cid:0), and prepares the next outgoing packet, say
(cid:0), CTCP could process (cid:1) simultaneously.
5. Related Work
The above tests use static test samples (i.e. ﬁles in disks).
Now we are working on getting the test samples dynami-
cally from the network.
Proxy server is a widely used structure to secure LANs
and improve performance. Under this structure, two com-
munication parties, the client and the server, exchange data
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
)
c
e
s
/
s
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
500
490
480
470
460
450
440
430
420
410
400
390
380
370
360
350
340
330
320
310
300
290
280
270
260
250
240
230
220
210
200
0
2000
CTCP
Linux Router
8000
10000
4000
6000
Number of TCP Connections
Figure 5. ThroughputsofCTCPandaLinuxRouter,
whenthenumberofTCPconnectionsincreasesfrom
1to10000.
through a proxy server. In other words, there is no direct
connection between these two entities. The proxy server
accesses data on behalf of them and relay data to their coun-
terparts. Under proxy server structures, external hosts only
interact with the proxy servers; therefore, they provide good
protection against OS ﬁngerprinting.
According to the class of data a proxy server relays,
proxy servers could be further divided into two cate-
gories, the application-level proxies and circuit-level prox-
ies. TIS [23] and transparent proxies [24] belong to the
former. SOCKS [17], Dante [20] and TCPProxy [29] are
circuit-level proxies.
Application-level proxies relay protocol-level data be-
tween end users of TCP connections; thus, this method is
able to provide user-level authentication protection. How-
ever in order to forward protocol-level data, a proxy must
understand the protocol involved.
In other words, each
protocol needs its own application-level proxy. Both TIS
and transparent proxies are application-level proxies. For
transparent proxies, the connection between a client and the
proxy is established through redirection. So the proxy is
only transparent to the client, not to the server.
In TIS’s
case, the proxy server is not transparent to both hosts;
hence, the ID of the proxy is visible to external hosts.
Instead of application-level data, a circuit-level proxy re-
lays TCP-level data between its users; thus, it is a generic
proxy. As a new network service appears, without modiﬁca-
tions, a circuit-level proxy can process the new application’s
trafﬁc immediately. SOCKS, Dante, and TCPProxy are all
circuit-level proxies. One of the major differences between
them lays on the level of modiﬁcation that need to make on
the networking libraries, such as socket-related functions.
CTCP utilizes proxy server as a basic platform to de-
velop different security solutions. However in order to en-
sure CTCP’s effectiveness and efﬁciency, CTCP removes
not only the above problems speciﬁc to each proxy server
but also the following common problems.
Most of current proxy servers are user-level processes
which introduce non-trivial overhead upon systems duo to
data copies between user space and kernel space, context