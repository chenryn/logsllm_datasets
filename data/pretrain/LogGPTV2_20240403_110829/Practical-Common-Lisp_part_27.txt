## Page 131
### 指定元素等。表11-1总结如下。
Common Lisp 提供了一个庞大的序列函数库。本节将讨论一些基本的序列函数。

#### 11.4 作为序列的向量
如同列表，向量也是抽象类型序列的一种具体子类型。接下来几节里讨论的所有函数都适用于向量和列表。

两个最基本的序列函数是 `LENGTH` 和 `ELT`：
- `LENGTH` 接受序列作为其唯一的参数并返回它含有的元素数量。对于带有填充指针的向量，`LENGTH` 返回填充指针所指定的长度。
- `ELT` 接受序列和从0到序列长度（左闭右开区间）的整数索引，并返回对应的元素。如果索引超出边界，`ELT` 将报错。`ELT` 也支持 `SETF` 操作，可以用来设置特定元素的值。

例如：
```lisp
(defparameter *x* (vector 1 2 3))
(length *x*)  ; → 3
(elt *x* 0)   ; → 1
(setf (elt *x* 0) 10)
*x*          ; → #(10 2 3)
```

#### 一组序列函数
一组序列函数允许你无需编写显式循环就可以表达一些特定的序列操作，如查找或过滤。以下是一些常用的序列函数及其用法示例：

- `REMOVE`
- `COUNT`
- `POSITION`
- `FIND`
- `SUBSTITUTE`

例如：
```lisp
(remove 1 #(1 2 12 3 1 2 3 4))  ; → #(2 12 3 2 3 4)
(count 1 #(1 2 1 2 3 1 2 3 4))  ; → 3
(position 1 #(1 2 12 3 1 2 3 4))  ; → 0
(find 1 #(1 2 12 3 1 2 3 4))  ; → 1
(substitute 10 1 #(1 2 1 2 3 1 2 3 4))  ; → #(10 2 10 2 3 10 2 3 4)
```

### 表11-1 基本序列函数

| 函数名 | 所需参数 | 返回值 |
|--------|----------|--------|
| LENGTH | 序列     | 序列中的元素数量 |
| ELT    | 序列, 索引 | 对应索引处的元素 |
| REMOVE | 序列, 项 | 移除项后的序列 |
| COUNT  | 序列, 项 | 序列中出现某项的次数 |
| POSITION | 序列, 项 | 序列中的索引或 NIL |
| FIND   | 序列, 项 | 序列中的项或 NIL |
| SUBSTITUTE | 序列, 新项, 项 | 项被新项替换后的序列 |

## Page 132

### 关键字参数

这些序列函数可以通过关键字参数进行多种方式的修改。例如，在默认情况下，这些函数会使用 `EQL` 进行比较。你可以通过以下关键字参数来改变它们的行为：

- `:test`：指定一个两参数谓词，用于比较元素。
- `:key`：指定一个单参数函数，用于从实际的序列元素中解出用于比较的关键值。
- `:from-end`：如果为真，序列将以相反的顺序遍历。
- `:start` 和 `:end`：指定子序列的起始和终止索引。
- `:count`：指定要移除或替换的元素个数。

例如：
```lisp
(count 'a #((a 10) (b 20) (a 30) (b 40)) :key #'first)  ; → 2
(find 'a #((a 10) (b 20) (a 30) (b 40)) :key #'first)  ; → (A 10)
```

### 表11-2 标准序列函数关键字参数

| 关键字参数 | 含义 | 默认值 |
|------------|------|--------|
| :test      | 两参数函数，用于比较元素 | EQL |
| :key       | 单参数函数，用于解出关键值 | NIL |
| :from-end  | 如果为真，序列以相反顺序遍历 | NIL |
| :start     | 子序列的起始索引 | 0 |
| :end       | 子序列的终止索引 | 序列长度 |
| :count     | 要移除或替换的元素个数 | NIL |

## Page 133

### 高阶函数变体

对于每个刚刚讨论过的函数，Common Lisp 都提供了两种高阶函数变体，它们接受一个将在每个序列元素上调用的函数，以此来代替项参数。

- `-IF` 变体：计数、查找、移除以及替换函数参数返回真的元素。
- `-IF-NOT` 变体：计数、查找、移除以及替换函数参数不返回真的元素。

例如：
```lisp
(count-if #'evenp #(1 2 3 4 5))  ; → 2
(count-if-not #'evenp #(1 2 3 4 5))  ; → 3
```

### 表11-2 标准序列函数关键字参数

| 关键字参数 | 含义 | 默认值 |
|------------|------|--------|
| :test      | 两参数函数，用于比较元素 | EQL |
| :key       | 单参数函数，用于解出关键值 | NIL |
| :from-end  | 如果为真，序列以相反顺序遍历 | NIL |
| :start     | 子序列的起始索引 | 0 |
| :end       | 子序列的终止索引 | 序列长度 |
| :count     | 要移除或替换的元素个数 | NIL |

## Page 134

### 整个序列上的操作

有一些函数每次在整个序列（或多个序列）上进行操作。这些函数比目前已描述的其他函数简单一些。

- `COPY-SEQ`：返回与输入序列相同类型的新序列，包含相同的元素。
- `REVERSE`：返回一个元素顺序相反的新序列。
- `CONCATENATE`：创建一个将任意数量序列连接在一起的新序列。
- `REMOVE-DUPLICATES`：移除序列中的重复元素，只保留一个实例。

例如：
```lisp
(copy-seq #(1 2 3))  ; → #(1 2 3)
(reverse #(1 2 3))  ; → #(3 2 1)
(concatenate 'vector #(1 2) #(3 4))  ; → #(1 2 3 4)
(remove-duplicates #(1 2 1 2 3 1 2 3 4))  ; → #(1 2 3 4)
```

### 表11-2 标准序列函数关键字参数

| 关键字参数 | 含义 | 默认值 |
|------------|------|--------|
| :test      | 两参数函数，用于比较元素 | EQL |
| :key       | 单参数函数，用于解出关键值 | NIL |
| :from-end  | 如果为真，序列以相反顺序遍历 | NIL |
| :start     | 子序列的起始索引 | 0 |
| :end       | 子序列的终止索引 | 序列长度 |
| :count     | 要移除或替换的元素个数 | NIL |