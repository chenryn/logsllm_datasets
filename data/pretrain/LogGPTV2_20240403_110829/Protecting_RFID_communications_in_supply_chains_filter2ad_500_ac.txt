may have prior knowledge of the range of serial numbers of a batch
of tags in delivery. In those cases, database Di can be partitioned
log 1 = log n! comparisons. On average, it requires log n!
O( log(nn+1/2e−n)
parisons per tag authentication.
n
) = O(log n + log n
into m sets of records corresponding to m batches. The batch pre-
processing and real-time searching can always be performed over
m
n records for all batches. In this case, the batch pre-processing will
incur n/m hashing computations and O(n/m log n/m) sorting
operations. The average complexity of authenticating each tag in
real-time searching is reduced to m/n log(n/m)! = O(log n/m)
matching operations.
Balancing Security and Performance Though batch process re-
duces the reader’s cost, it opens a window for clone or replay at-
tacks. To clone a tag that has not been read by the legitimate reader,
the attacker can use his own reader and the intercepted nonce to
probe the tag and replay the tag’s reply to the legitimate reader
(while the corresponding tagged item can be removed, say, by the
attacker). Note that it is not that meaningful to spoof those tags
that have already been read, as the corresponding database records
have been marked. Also note that the cloning attack is only ef-
fective within the targeted batch, as the nonces for other batches
are different. Therefore, the parameter m can be chosen for bal-
ancing the efﬁciency of tag authentication and the resistance to tag
cloning attacks. The smaller the parameter m, the fewer hash com-
putations are needed while the longer the time window for batch
authentication. Consequently, an attacker has more time to inter-
cept/eavesdrop the nonce and to clone one or more tags in the said
batch.
In supply chain practice, the tagged items in the same batch usu-
ally arrive at their processing site at the same time. When the ﬁrst
tag starts to interact with a legitimate reader, all other tagged items
in the same batch should be in a position close enough to the reader
such that the cloning attack is not easy to launch. It is even more
difﬁcult for an attacker to remove a tagged item in this scenario.
Without removing the tagged item, a cloning attack can be easily
detected even if the attack is successfully launched; the detection
can be performed based on the fact that the same tag will be read
more than one time.
4.3 Unlinkability and Supply Chain Visibility
Unlinkability and supply chain visibility deﬁned in Section 2
seem to contradict to each other. The key to solve the apparent
dilemma is to differentiate two types of RFID readers: legitimate
readers of supply chain partners and unauthorized readers of non-
partners (e.g., in industry espionage). While the supply chain part-
ners are trusted and should be provided with supply chain visibility,
unauthorized readers should be prevented from understanding any
tag’s content and from tracking the movement of material ﬂow.
STATEMENT 4.4. Given a response t1 from a tag prior to be-
ing processed by partner Pi and a response t2 from a tag after
being process by Pi, it is infeasible for a rogue reader to determine
whether t1 and t2 are from the same tag. In other words, the tags
are unlinkable for unauthorized readers.
(Proof Sketch) Note that the attack may choose the same nonce
for both interrogations. Without loss of generality, let t1 = H(r ⊕
c1 ⊕ k) and t2 = H(r ⊕ c2 ⊕ k(cid:48)), where k (cid:54)= k(cid:48), and c1, c2 are
the serial numbers of the tags. The challenge for the adversary is
to determine whether c1 = c2. It is infeasible for the adversary to
make a successful guess due to the following: t2 = H(r ⊕ c1 ⊕
(c1 ⊕ c2 ⊕ k(cid:48))). Therefore, without the knowledge of k, k(cid:48), no
reader is able to link two responses.
2
With Statement 4.4, we further have the following two Corollar-
ies.
4More efﬁcient searching can be achieved using complex index
structures [17].
COROLLARY 4.5. Without knowledge of the access key, no reader
is able to obtain a tag’s identity.
239
(Proof Sketch) It is trivial. Otherwise, the reader can link two tags,
which contradicts with Statement 4.4.
2
COROLLARY 4.6. Without knowledge of the access key, no reader
is able to determine whether two tags belong to the same material
ﬂow, i.e., using the same access key.
(Proof Sketch) It can be proved in the same manner as for State-
ment 4.4.
2
CAVEAT We highlight that unlinkability in supply chain con-
text is different from in the traditional context, which requires no
linkage between any two read operations.
It is obvious that our
protocol does not provide unlinkability of the latter notion, which
is a stronger than the ﬁrst one. We argue that it is not a security
compromise, since the latter notion is usually demanded when user
personal privacy is under threat, which is not applicable for supply
chains. In supply chain systems, it is of more importance to protect
the privacy of the supply chain structure. Therefore, we consider
implementing the stronger unlinkability as an unnecessary cost for
supply chain systems.
While rogue readers are prevented from tracking tags across sup-
ply chain links, authorized reader are allowed to do so as required
by supply chain visibility. To achieve this objective, a simple solu-
tion is to involve a trusted authority, called as supply chain visibility
authority (VA). It resides in the data processing sub-system and is
responsible for tracking the movement of material ﬂow, implement-
ing access control, and handling tracking-related queries (among
other essential services). During the setup phase, each partner Pi,
1 ≤ i ≤ n − 1, sends (ki+1, Sigi+1(ki+1)) to VA so that VA’s
RFID readers have all the access keys. With possession of all ac-
cess keys, VA’s authoritative readers are able to identify an RFID
tag at any stage in its material ﬂow. Note that once VA success-
fully identiﬁes a tag with an access key, it also identiﬁes the current
partner processing the tags since only this partner has the corre-
sponding access key. In addition, whenever a batch of tagged items
have been successfully processed at a supply chain partner’s site,
typical tracking information related to this batch including the tag
serial numbers, pointers, statuses, time, and location are reported
to VA, which processes the information and makes it available for
authorized parties to query. Therefore, VA is able to maintain sup-
ply chain visibility by interrogating RFID tags and checking its
database.
4.4 Eavesdropper and Insider Attacks
Previous discussions only consider the interrogation of a rogue
reader upon RFID tags. Now, we consider whether the proposed
RFID Read and Write protocols are subject to eavesdropping at-
tacks. A passive adversary is able to sniff all the communications
between a reader and RFID tags provided she is equipped with a
capable antenna. Although a partner may enforce the physical se-
curity of its premise so that no sniffer is within its radio range, an
analysis of the protocols is still desirable.
For Read protocol, an eavesdropper has less advantage than a
rogue reader which interrogate the tag by itself, since the nonce
used in the protocol is simply a random number with no secret in-
formation. Therefore, Read protocol is secure against eavesdrop-
pers.
For Write protocol5, an eavesdropper within Pi’s vicinity obtains
a = ki ⊕ ki+1 and a number of authenticators of a for individual
tags. We observe that a is exactly a one-time pad encryption [15]
5Note that the tag initialization by P1 should be executed in a phys-
ically secure environment so that no rogue readers and eavesdrop-
pers are unable to mount attacks.
of ki+1 or ki. Without the knowledge of either one of the key, the
adversary is unable to acquire even one bit information of the other
key. Therefore, Write protocol is secure against external eaves-
droppers.
Unfortunately, under the supply chain context, we have to con-
sider malicious partners, which could be Pi−1 with the knowledge
of ki. If Pi−1 eavesdrops Write protocol executions at Pi’s site, it
can easily derive the new access key ki+1. Consequently, Pi−1 can
impersonate Pi+1 to read or write those tags that have been updated
by Pi. Further, Pi−1 is able to steal all access keys in downstream
supply chain by repeating such attacks. Alternatively, a dishonest
partner’s reader may interrogate all tags and ﬁgures out the access
key by exhaustively guessing all tags’ serial numbers.
This is one of those notorious insider attacks. We argue that
Pi−1 gains little from this attack under certain circumstances. First,
Pi−1 has already read those tags successfully at her site; there is no
value for her to read them again. Second, Pi−1 is a legitimate sup-
ply chain partner; in some supply chain settings all partners are en-
titled to know the structure of the entire chain. Therefore, tracking
tags along the material ﬂow does not provide additional knowledge
to Pi−1 under certain circumstances.
In cases that every partner is only allowed to know her upstream
and downstream peers, the aforementioned insider attack should be
prevented. An approach is to introduce a trust third party (TTP)
which helps to establish a secret shared key between the current
partner and tags. In speciﬁc, each tag has a unique secret key shared
with the TTP. This key is used as a seed to generate session keys
between the tag and a partner with the help of TTP. Obviously, it is
not efﬁcient. We leave as an open question how to design efﬁcient
protocols secure against insider attacks.
4.5 Performance Analysis
A wide adoption of RFID technology in supply chains demands
Read/Write protocol not only to be secure, but to be efﬁcient and
practical. We analyze our proposed protocols by evaluating its stor-
age cost and computation cost.
An RFID tag in our system only stores α = c⊕ k, which has the
same size of its serial number. Since a tag at least has a permanent
storage for its serial number, our protocol does not incur extra cost.
Note that a tag still needs other memory space for computation
and communication. Since our computation only includes XOR
operation and hash functions, the required memory space is rather
limited.
The computation load of tags in our protocols is also remarkably
light-weight. A tag needs only one hash function and one XOR
operation both for Read and Write protocols. In Read protocol, the
RFID reader takes much of the computation load, whereby it lo-
cates the tag’s information by exhaustive search. We argue that a
reader may comprise a full-ﬂedged computer with sufﬁcient mem-
ory storage and computing power.
We estimate the time cost for the reader’s pre-processing and
real-time searching as follows. In our estimation, we suppose that
the length of the tag’s serial number is 128-bit, i.e., l = 128. Ac-
cording to [14], it takes a hash function, e.g. SHA-1, 210 CPU cy-
cles of a Pentium CPU to digest a 128bit message. Based on the ex-
periments conducted in [23], we roughly estimate that it costs about
40 CPU cycles per sort operation for merge-sort or quick-sort algo-
rithms, though the actual data varies with many factors including
CPU cache, compiler, memory etc. Consider a material ﬂow with
n tags in one or multiple batches. It requires at maximum 40 log n
CPU cycles to search a tag, and 210n + 40n log n cycles to pre-
pare the database for each batch. To be conservative, we estimate
the time cost in the case where a 1-GHz Pentium machine is used in
240
International Conference on Information Systems, pages
523–537, 2003.
[14] D. Menasce. Security performance. IEEE Internet
Computing, pages 84–87, May 2003.
[15] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone.
Handbook of applied cryptography. CRC Press, 1997. ISBN
0-8493-8523-7.
[16] D. Molnar, A. Soppera, and D. Wagner. A scalable,
delegatable pseudonym protocol enabling ownership transfer
of RFID tags. In Selected Areas in Cryptography, pages
276–290, 2005.
[17] D. Molnar and D. Wagner. Privacy and security in library
RFID: issues, practices, and architectures. In ACM
Conference on Computer and Communications Security,
pages 210–219, 2004.
[18] M. Ohkubo, K. Suzuki, and S. Kinoshita. RFID privacy
issues and technical challenges. ACM Communications,
48(9):66–71, 2005.
[19] M. R. Rieback, B. Crispo, and A. S. Tanenbaum. Rﬁd
guardian: A battery-powered mobile device for rﬁd privacy
management. In ACISP, pages 184–194, 2005.
[20] S. Sarma, S. Weis, and D. Engels. White paper: RFID
systems, security and privacy implications. Technical Report
MIT-AUTOID-WH-014, Auto-ID Center, MIT, November
2002.
[21] S. Weigart. Physical security devices for computer
subsystems: A survey of attacks and defences. In Workshop
on Cryptographic Hardware and Embedded Systems, pages
302–317, 2000.
[22] S. A. Weis, S. E. Sarma, R. L. Rivest, and D. W. Engels.
Security and privacy aspects of low-cost radio frequency
identiﬁcation systems. In SPC, pages 201–212, 2003.
[23] L. Xiao, X. Zhang, and S. A. Kubricht. Improving memory
performance of sorting algorithms. ACM Journal of
Experimental Algorithmics, 5(3), 2000.
[24] X. Zhang and B. King. Integrity improvements to an rﬁd
privacy protection protocol for anti-counterfeiting. In ISC,
pages 474–481, 2005.
the data processing system and n = 220 (which is much larger than
the number of tags in most practical material ﬂows). The required
time for real-time searching is only about 800ns, which is negligi-
ble compared to the communication delay. Note that in practice the
throughput for a high speed RFID reader is only around 100 tags
per second. On the other hand, its pre-processing time per batch
needs about 1.06s, including about 220ms for hashing computa-
tions and about 840ms for sorting the database. This cost is also
negligible since the time gap between processing batches is usually
in seconds or even minutes.
5. CONCLUSION
In this paper, we study the security issues of using RFID tags
in supply chain models. Under the supply chain context, we ﬁrst
identify a set of security requirements including authoritative ac-
cess, authenticity of tags, unlinkability and supply chain visibility.
An RFID system comprising both a read and a write protocol is pro-
posed. Our analysis shows that the proposed solution satisﬁes the
aforementioned security requirements with affordable computation
and storage cost imposed on RFID tags. Our solution represents a
valuable ﬁrst step toward more advanced solutions for protecting
RFID communications in supply chains.
6. REFERENCES
[1] G. Ateniese, J. Camenisch, and B. de Medeiros. Untraceable
rﬁd tags via insubvertible encryption. In ACM Conference on
Computer and Communications Security, pages 92–101,
2005.
[2] G. Avoine and P. Oechslin. Rﬁd traceability: A multilayer
problem. In Financial Cryptography, pages 125–140, 2005.
[3] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash
functions for message authentication. In Crypto’96, pages
1–15.
[4] S. C. Bono, M. Green, A. Stubbleﬁeld, A. Juels, A. D.
Rubin, and M. Szydlo. Security analysis of a
cryptographically-enabled RFID device. In USENIX Security
Symposium, pages 1–16, 2005.
[5] K. P. Fishkin and S. Roy. Enhancing RFID privacy via
antenna energy analysis. tech. memo IRS-TR-03-012, Intel
Research Seattle, 2003.
[6] S. Garﬁnkel. An RFID bill of rights. Technology Review,
page 35, October 2002.
[7] S. L. Garﬁnkel, A. Juels, and R. Pappu. RFID privacy: An
overview of problems and proposed solutions. IEEE Security
& Privacy, 3(3):34–43, 2005.
[8] P. Golle, M. Jakobsson, A. Juels, and P. F. Syverson.
Universal re-encryption for mixnets. In CT-RSA, pages
163–178, 2004.
[9] A. Juels. Minimalist cryptography for low-cost RFID tags. In
SCN, pages 149–164, 2004.
[10] A. Juels and R. Pappu. Squealing Euros: Privacy protection
in RFID-enabled banknotes. In Financial Cryptography,
pages 103–121, 2003.
[11] A. Juels, R. L. Rivest, and M. Szydlo. The blocker tag:
selective blocking of RFID tags for consumer privacy. In
ACM Conference on Computer and Communications
Security, pages 103–111, 2003.
[12] A. Juels, P. Syverson, and D. Bailey. High-power proxies for
enhancing rﬁd privacy and utility. In Privacy Enhancing
Technologies, pages 210–226, 2005.
[13] E. Liu and A. Kumar. Leveraging information sharing to
increase supply chain conﬁgurability. In Twenty-Fourth
241