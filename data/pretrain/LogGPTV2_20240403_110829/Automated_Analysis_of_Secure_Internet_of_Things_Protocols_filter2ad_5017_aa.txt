# Title: Automated Analysis of Secure Internet of Things Protocols

## Authors:
- Jun Young Kim
- Ralph Holz
- Wen Hu
- Sanjay Jha

### Affiliations:
- **UNSW Australia, Data61 CSIRO**
- **The University of Sydney**
- **WBS Technology**
- **Sydney, Australia**

### Contact Information:
- **PI: EMAIL** (for all authors)

## Abstract
Formal security analysis has proven to be a valuable tool for tracking modifications in communication protocols in an automated manner, where comprehensive security analysis of revisions requires minimal effort. In this paper, we formally analyze prominent IoT protocols and uncover several critical challenges in practical IoT settings. We address these challenges by using formal symbolic modeling of such protocols under various adversary models and security goals. Additionally, we extend our formal analysis to cryptographic Denial-of-Service (DoS) attacks, demonstrating that a significant majority of IoT protocols are vulnerable to such resource exhaustion attacks. We present a general DoS attack countermeasure that can be applied to many IoT protocols. Our study of prominent IoT protocols, such as CoAP and MQTT, highlights the benefits of our approach.

## ACM Reference Format
Jun Young Kim, Ralph Holz, Wen Hu, and Sanjay Jha. 2017. *Automated Analysis of Secure Internet of Things Protocols*. In Proceedings of ACSAC 2017, Orlando, FL, USA, December 4–8, 2017, 12 pages.
DOI: 10.1145/3134600.3134624

## 1. Introduction
In recent years, numerous Internet of Things (IoT) frameworks and associated security protocols have been proposed to realize the vision of the next-generation ubiquitous Internet. However, ensuring security in IoT environments is challenging due to frequent model/code changes, application-specific adversaries, and emerging threats. The security of IoT systems remains a major barrier to the success of IoT proliferation, as many attacks and vulnerabilities target relatively weak IoT applications and devices. For instance, IoT devices constituted 38% of the victims of a cryptocurrency mining worm [5].

### Permission to Use
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

### Conference Details
ACSAC 2017, Orlando, FL, USA
© 2017 ACM. 978-1-4503-5345-8/17/12. . . $15.00
DOI: 10.1145/3134600.3134624

### Security Analysis Challenges
The security analysis of IoT protocols remains an open challenge. The primary reason is that most IoT protocols are subject to frequent changes as vendors and service providers modify them to meet market demands or adapt to new application models. Any changes in settings, security models, or code require exhaustive security analysis. Additionally, the security properties of applications vary depending on the deployment environment, types of devices, network bandwidth, and energy availability [34]. This necessitates analyzing the same protocol under various adversary models and security goals. For example, some applications consider only the traditional Dolev-Yao (D-Y) attacker (insecure wireless channel), while others must account for stronger adversaries such as the extended Canetti-Krawczyk (eCK) model [36], where the adversary may compromise a limited number of long-term and session keys. Some applications also require Perfect Forward Secrecy (PFS), which protects past sessions against future compromises of secret keys [33]. Thus, a full security analysis of ever-changing IoT protocols under application-specific settings is a difficult task.

### Pen and Paper Analysis
One well-established practice for security analysis is ‘pen and paper’ cryptographic analysis. Despite its value, it is error-prone and time-consuming [26], especially for protocol drafts where the security model and implementation details can still change. Even minor parameter changes in source code can trigger a substantial full security analysis.

### Automated Formal Symbolic Security Analysis
Tool-based formal security analysis has helped with the ‘automated’ analysis of abstract security protocols. Over the past decade [21, 35, 39], a large number of formal security analysis tools have become publicly available. A notable example is the analysis of TLS 1.3 revisions. Given the complexity of TLS 1.2 and the identification of flaws such as BEAST [27] and Lucky-Thirteen [20], the TLS working group adopted an ‘analysis-before-deployment’ paradigm for TLS 1.3. Cremers et al. [26] performed extensive symbolic security analysis on TLS 1.3 draft-10, confirming its robustness except for a design flaw in a delayed client authentication mechanism when combined with a PSK-resumption handshake. The authors claim that their approach can analyze future TLS 1.3 drafts with minimal effort and keep track of current drafts.

### Challenges and Contributions
Based on our experience, we found that formal security analysis is extremely useful for standard-based IoT protocols. Standard security primitives such as Public Key Cryptography (PKC) and Pre-Shared Key (PSK) based protocols can be analyzed and tracked with minimal effort. However, we discovered several critical limitations when introducing new algorithms.

#### DoS Attack Vulnerability
The 2016 DYN cyberattack [12] and the 2013 Spamhaus attack [3] demonstrated that Denial-of-Service (DoS) attacks can cause massive disruption, especially in IoT deployments. IoT systems are particularly vulnerable to DoS attacks due to the involved Machine-to-Machine (M2M) communication. Although M2M enables intelligent applications, its fault-tolerance behavior and lack of human monitoring introduce new vulnerabilities. When IoT applications run on battery-powered devices, bandwidth and energy are at a premium to maximize the lifetime of such devices.

#### Contributions
We make the following contributions:
- We perform symbolic security analysis of prominent IoT protocols under various adversary models and goals such as D-Y, eCK, and PFS. We present our analysis and make the code public so that it can be used adaptively upon modification of these protocols.
- We present critical challenges in existing symbolic security analysis tools and propose solutions.
- We demonstrate how DoS attacks can be modeled and protocols correspondingly verified; we show that important IoT protocols are vulnerable to DoS attacks.
- We discuss the limitations of existing DoS countermeasures in IoT and propose a tailored DoS attack countermeasure that can be generally used in other IoT protocols.

### Organization of the Paper
This paper is organized as follows:
- **Section 2** presents the background of prominent IoT protocols and existing DoS countermeasures.
- **Section 3** introduces the Tamarin prover by modeling standard-based protocols.
- **Section 4** presents restrictions of existing symbolic tools and proposes solutions to address these restrictions.
- **Section 5** presents the innate DoS attack vulnerability of IoT protocols.
- **Section 6** proposes our countermeasure to address DoS attack vulnerability.
- **Section 7** concludes the paper.

## 2. Related Work
In this section, we present prominent IoT protocols and their security goals, which we will refer to throughout the paper. We summarize these protocols in Table 1. We also highlight existing DoS countermeasures and their shortcomings when used in IoT.

### Implementation Availability
Our implementation is available at: https://github.com/jun-kim/Automated-security-verification-of-IoT-protocols

| **Attacker/Goal** | **Protocol** | **Note** |
|-------------------|--------------|----------|
| D-Y/Standard      | Sigfox [14]  | All packets carry signature |
| D-Y/Standard      | LoRa [13]    | PSK is recommended |
| D-Y, eCK/Standard | MQTT [15]    | Recommend session resumption |
| D-Y, eCK/Standard | CoAP [4]     | Rely on DTLS |
| D-Y, eCK/PFS      | JPAKE [6]    | Eliminate PKC suite |

### 2.1 LPWAN Protocols
Low Power Wide Area Network (LPWAN) can provide coverage up to several kilometers using low-power applications [13]. Many LPWAN IoT device management applications, such as water/gas meters, street lights, vending machines, pet devices, trash containers, and smoke alarms, are potential users of this technology. The LPWAN radio layer uses the unlicensed spectrum below 1 GHz, which is free for all applications.

#### SigFox
SigFox [14] is designed for enterprise use cases with tight management schemes. It mandates a PKC cipher suite with X.509 certificates even on extremely constrained devices. A key difference between SigFox and standard PKC is that all SigFox communication packets carry the sender’s signature to enhance integrity in low-bandwidth environments. All SigFox devices are equipped with manufacturer-generated public and private key pairs before deployment, which serve as their identity. Although this design choice enables standard security with tight device management features, it limits the performance and battery life of constrained devices. Therefore, SigFox is suitable for enterprise IoT applications where devices have no energy constraints.

#### LoRa Alliance
Designed for long battery life, the Long Range alliance (LoRa) [13] specification essentially uses Pre-Shared Key (PSK) cipher suites with HMAC support. It leaves the choice of cipher suites to application designers and developers. Compared to SigFox, the LoRa security model is more suitable for constrained IoT applications with long-term usage. However, PSK is only secure against a D-Y adversary; one compromised device can jeopardize the entire application security.

### 2.2 Publish/Subscribe Protocols
Several publish/subscribe messaging protocols are currently in use in commercial IoT applications. The Constrained Application Protocol (CoAP) [4] and MQ Telemetry Transport (MQTT) [15] are two prominent examples. They are simple with RESTful interfaces and lightweight publish/subscribe messaging protocols, designed for constrained devices and low-bandwidth, high-latency, or unreliable networks. Their design principles aim to make them ideal for emerging IoT applications, where bandwidth and battery power are at a premium. When the server (broker) receives a published item, it securely distributes the item to all subscribers, resulting in tight security and privacy provided by the centralized server. Our case study will model and analyze CoAP and MQTT.

### 2.3 JPAKE Algorithm
Password-Authenticated Key Exchange (PAKE) schemes allow establishing secure communication between two remote parties based solely on their shared low-entropy password. PAKE is suitable for IoT applications due to its straightforward structure, efficiency, and lack of PKC infrastructure requirements. As a factory default, IoT devices are only required to be equipped with a low-entropy password that can be used for further secure communication and authentication without relying on complex PKC infrastructure.

Although patent issues have blocked PAKE adoption, Password-Authenticated Key Exchange with juggling (JPAKE) [29] has been proposed as a patent-free solution. The ‘juggling’ (hence ‘J’PAKE) technique and Schnorr signature [43] for Zero-Knowledge-Proofs (ZKP) enable this design. JPAKE is included in many IoT protocols, such as Google Nest’s THREAD IoT commissioning protocol [7]. It is currently being standardized by the IETF [6].

### 2.4 Summary of IoT Protocols
To elaborate on the IoT protocols summarized in Table 1, MQTT, CoAP, and SigFox are typical examples of standard TLS 1.2 with simple variations depending on the protocol design philosophy. SigFox uses signatures for every packet, and MQTT uses a session resumption approach. CoAP, on the other hand, adopts Datagram TLS (DTLS) for low-power networks. Throughout this paper, we will use SigFox as a standard TLS 1.2 example and model MQTT and CoAP in terms of their variations. LoRa will serve as a typical example of a PSK-based protocol.