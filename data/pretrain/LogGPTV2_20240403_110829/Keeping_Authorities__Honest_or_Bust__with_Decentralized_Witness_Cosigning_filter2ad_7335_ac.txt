node. The spanning tree serves only to optimize performance:
531531
(cid:2)
the leader may reconﬁgure it at any time without affecting
security, e.g., to account for unavailable witnesses as detailed
later in Section III-F.
For simplicity, the tree may be a regular B-ary tree formed
deterministically from the well-known list of N witnesses,
thereby requiring no communication of the tree structure.
To minimize signing latency, the leader might alternatively
collect information on round-trip latencies between witnesses,
construct a shortest-path spanning tree, and specify this tree
explicitly when announcing a collective signing round.
(cid:3)
j∈Ci
A single round of the CoSi protocol consists of four
phases, illustrated in Figure 2, representing two communica-
tion “round-trips” through the leader-deﬁned spanning tree:
1) Announcement: The leader multicasts an announcement
of the start of this round down through the spanning tree,
optionally including the statement S to be signed.
2) Commitment: Each node i picks a random secret vi and
computes its individual commit Vi = Gvi. In a bottom-up
process, each node i waits for an aggregate commit ˆVj from
each immediate child j, if any. Node i then computes its
own aggregate commit ˆVi = Vi
ˆVj, where Ci is the
set of i’s immediate children. Finally, i passes ˆVi up to its
parent, unless i is the leader (node 0).
3) Challenge: The leader computes a collective challenge c =
H( ˆV0 (cid:3) S), then multicasts c down through the tree, along
with the statement S to be signed if it was not already
announced in phase 1.
4) Response: In a ﬁnal bottom-up phase, each node i waits
to receive a partial aggregate response ˆrj from each of
its immediate children j ∈ Ci. Node i now computes its
individual response ri = vi − cxi, and its partial aggregate
response ˆri = ri +
j∈Cj ˆrj. Node i ﬁnally passes ˆri up
to its parent, unless i is the root.
The round announcement in phase 1 may, but need not
necessarily, include the statement S to be signed. Including S
in the announcement enables witnesses to start validating the
statement earlier and in parallel with communication over the
tree. This approach is likely preferable when witnesses may
need signiﬁcant time to validate the statement S, such as when
reproducing software builds as an extreme example [16]. On
the other hand, proposing S later in phase 3 enables the leader
to “late-bind” its statement, perhaps incorporating information
gathered from witnesses in phase 2, as our timestamp service
does (Section V-A). Further, keeping phases 1–2 independent
of the statement to be signed in principle allows these phases
to be performed ofﬂine ahead of time, though we have not
implemented or evaluated this ofﬂine variation.
During phase 4, each node i’s partial aggregate response
ˆri, together with the collective challenge c, forms a valid
Schnorr multisignature on statement S, veriﬁable against i’s
partial aggregate commit ˆVi and corresponding partial ag-
gregate public key ˆXi. Anyone may compute ˆXi simply
by multiplying the well-known public keys of i and all of
its descendants in the spanning tree. Thus, each node can
immediately check its descendants’ responses for correctness,
and immediately expose any participant producing an incorrect
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:54 UTC from IEEE Xplore.  Restrictions apply. 
Phase 1: Announcement
(send message-to-witness, optional)
Phase 2: Commitment
(collect aggregate commit)
S
0
Leader
ˆV0
0
V0 = G v0 ,
ˆV0 = V0 ... V6
V1 = G v1 ,
ˆV1 = V1V3V4
Phase 3: Challenge
(send collective challenge)
c = H( ˆV0 (cid:3) S)
0
Phase 4: Response
(collect aggregate response)
ˆr0
0
r0 = v0 − x0c,
ˆr0 = r0+···+r6
r1 = v1 − x1c,
ˆr1 = r1 + r3 + r4
1
Witnesses
2
1
2
1
2
1
2
3
4
5
6
3
4
5
6
3
4
5
6
V3 = G v3 ,
ˆV3 = V3
V4 = G v4 ,
ˆV4 = V4
3
r3 = v3− x3c,
ˆr3 = r3
5
4
r4 = v4− x4c,
ˆr4 = r4
6
Fig. 2. The CoSi protocol uses four communication phases for scalable construction of a Schnorr multisignature (c, ˆr0) over a spanning tree.
(cid:3)
(cid:3)
i
i
j∈Ci
response. While nothing prevents a malicious node i from
computing ˆVi dishonestly in phase 2, i then will be unable
to produce a correct response in phase 4 unless it knows the
discrete logarithm vi such that ˆVi = Gvi
ˆVj.
(cid:2)
vi, ˆr0 =
= H( ˆV (cid:2)
0 = Gˆr0 ˆX c
i vi − c
The ﬁnal collective signature is (c, ˆr0), which any third-
party may then verify as a standard Schnorr signature by
0 (cid:3) S).
recomputing ˆV (cid:2)
0 and checking that c ?
that ˆV0 =
The scheme’s correctness stems from the fact
(cid:3)
(cid:3)
xi. The
i xi, and ˆX0 = G
G
scheme’s unforgeability stems from the fact that the hash
function makes c unpredictable with respect to ˆV0, and the col-
lective cannot produce the corresponding response ˆr0 without
the (collective) knowledge of the secret key xi of every node
i whose public key is aggregated into ˆX0. These properties
are direct implications of the structure of Schnorr signatures,
which have been formally analyzed in prior work [12], [93],
though we are not aware of prior systems that used these
properties in practice to build scalable signing trees.
F. Accounting for Unavailable Witnesses
Authorities are unlikely to deploy witness cosigning if
their own availability may be degraded, or even deliberately
DoS-attacked, by the unreliability of one or more witnesses.
We expect authorities to accept only witnesses operated by
reputable and competent organizations who can normally be
expected to keep their witness servers highly available, so we
expect the operational common case to be for all witnesses to
be present, and only rarely for one or a few to be missing.
Unlike secret-sharing protocols [55], [125], CoSi allows the
leader to proceed with any number of witnesses missing, and
merely documents these missing witnesses as exceptions as
part of the resulting collective signature. Signature veriﬁers
learn both how many and which witnesses were missing when
an authoritative statement was signed, and can independently
determine their acceptance thresholds via arbitrary predicates
(Section IV-A). The leader might set its own threshold as well:
e.g., if many or most witnesses are unreachable, this may
indicate the leader itself is disconnected from much of the
Internet, making it useless and perhaps counterproductive to
sign further statements until connectivity is restored.
We start with a simple approach to handling witness failures,
then subsequently explore variations and optimizations. In any
of the phases of the tree-based signing protocol described
above, if any participant i ﬁnds that one of its children j is
unreachable, i simply returns an error indicating the missing
witness, which propagates back up the tree to the leader.
The leader then reconﬁgures the tree to omit the missing
witness, announces the new tree, and restarts the signing
round from phase 1 over the new tree. The leader includes
in the resulting signature not only the challenge and aggregate
response (c, ˆr0) but also an indication of which witnesses were
missing. Veriﬁers then check the resulting signature against a
modiﬁed aggregate public key ˆX computed by multiplying
only the public keys of witnesses that were actually present
in the signing tree (and hence contributed to the aggregate
commit in phase 2 and the aggregate response in phase 4).
An intermediate witness in the leader’s spanning tree could
maliciously pretend that one of its children is unavailable, or
a pair of witnesses might simply be unable to communicate
due to Internet routing failures. To address this risk, when a
witness is reported “missing” the leader can ﬁrst try contacting
it directly and/or request that other witnesses attempt to contact
it. If successful, the leader can then reconnect the orphaned
witness at a different location in the new tree.
G. Representing Exceptions in Signatures
To minimize the size of collective signatures, CoSi permits
exceptions to be represented in three different ways: as a list
of witnesses absent, a list of witnesses present, or a bitmap
with one bit per witness. After completing a signing round,
the leader simply chooses whichever representation yields the
smallest signature. Listing witnesses absent yields the most
compact signature (less than 100 bytes using the Ed25519
curve [14]) in the hopefully common case when nearly all
witnesses cosign. Listing witnesses present is optimal at the
opposite extreme, while the bitmap approach is most efﬁcient
in the region between those extremes. Worst-case signature
size is therefore about 2K + W/8 bytes, where K is the size
of a private key (e.g., 32 bytes for Ed25519) and W is the total
number of witnesses, plus a few encoding metadata bytes.
A more sophisticated alternative we explored is to repre-
sent the witness roll call as a Bloom ﬁlter [15], which can
sometimes increase compactness at the risk of introducing
false positives. The leader might tolerate this false positive
risk by removing the contributions of falsely-marked witnesses
from the aggregate signature, or salt the Bloom ﬁlter’s hash
532532
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:54 UTC from IEEE Xplore.  Restrictions apply. 
functions and “mine” to ﬁnd a Bloom ﬁlter yielding no false
positives. We simulated several such approaches, but did not
ﬁnd the results to be worth the additional complexity.
H. Proactive, Retroactive, and Adaptive Validation
As discussed earlier in Section III-C, the primary responsi-
bility of witnesses is merely to ensure proactively that signed
authoritative statements are public – but witnesses can and
ideally should also check the syntactic and semantic validity
of statements when possible. Some such validation checks
may be feasible in principle but require additional network
communication or take unpredictable amounts of time.
As one example, a witness to the signing of a stapled OCSP
certiﬁcate status [107] or a CONIKS public key directory [89]
might wish to verify that the certiﬁcates in these statements are
indeed fresh, and are not listed in publicly available Certiﬁcate
Revocation Lists (CRLs) [82]. If the witness were to initiate
the fetching and downloading of CRLs on the “critical path”
of witnessing and cosigning, however, then the witness might
seriously delay the signing process, or cause the leader to
timeout and consider the witness to have failed (Section III-F).
To avoid such delays, instead of fetching CRLs on the critical
cosigning path, certiﬁcate witnesses might periodically down-
load and maintain cached copies of relevant CRLs, and merely
check proposed OCSP staples or key directories against their
most recently cached CRLs.
Validation may sometimes be quick but other times may
require signiﬁcant amounts of time and/or computational re-
sources. A witness to a software update authority for an open
source package, for example (Section II-E), might wish to
verify the platform-speciﬁc binaries to be signed against a
reproducible build [108] of a corresponding source release
in a public repository. In this case, the witness may have to
perform an entire build of a large software tree before signing.
This delay may be acceptable in the special case of software
updates, which tend to be released on slow, latency-tolerant
timescales anyway, but such delays may not be acceptable in
many other witnessing scenarios.
As one way of handling long or unpredictable validation
delays, the leader might specify a maximum validation time.
Each witness launches its validation process in parallel but
monitors it dynamically to see whether it actually completes
in the required time. If not, the witness might just “cosign any-
way,” giving the leader the beneﬁt of the doubt, but continue
the checking process and raise an alarm in the hopefully rare
event that validation eventually fails. This approach of course
weakens CoSi’s transparency model to be only “proactive
sometimes” and “retroactive sometimes.” To create a public
record of this distinction, leaders might obtain two collective
signatures in parallel from all witnesses:
the ﬁrst merely
attesting that
the witness has seen the statement, and the
second attesting that the witness has validated it. Witnesses
then provide the former cosignature but withhold the latter if
they cannot complete their validation in the time available.
I. Limitations, Tradeoffs, and Future Work
The most important limitation of witness cosigning is that
it requires active communication – and perhaps global com-
munication if the witness group is highly distributed – on
the signing path. This is a basic cost of CoSi’s proactive
approach to transparency: by eliminating the need for the
clients receiving an authoritative statement to communicate
at veriﬁcation time as gossip-based transparency approaches
do [76], [78], we incur the cost of communicating before the
authority’s statement is made available to clients.
Because of the communication cost incurred at signing time,
CoSi is more suitable for authoritative signing activities that
can be done only periodically or in periodic batches, and less
suited to signing activities that must be done individually in
high volumes or at low latencies. Fortunately, many authorita-
tive signing activities are already or can easily be performed
periodically in batches. For example, Section V-A presents a
timestamp authority that handles heavy client request loads
by signing batches of timestamps, and logging services such
as CT’s [76], as well as blockchains used in cryptocurren-
cies [70], [102], routinely aggregate many client-requested
transactions into large latency-insensitive batches.
A second limitation of CoSi’s approach is that an authority’s
witness group cannot be completely “open” for anyone to join,
without making the system vulnerable to Sybil attacks [49]
in which an adversary creates and joins a threshold number
of colluding, fake witnesses. One advantage of retroactive
gossip-based checking [104] is that “anyone can gossip” –
i.e., no entry barrier at all need be imposed on the group
of gossiping participants. Thus, CoSi may best be viewed as
complementary to rather than a replacement for retroactive
gossip-based consistency checking: CoSi provides proactive
security grounded in a potentially large and diverse but at least