So, P2[5] = C1[5] ⊕ 0x60 ⊕ д.
In case of AES and a plaintext alphabet of ASCII bytes, it would
require at most (256 × 16 × N ) attempts to extract the entire IP,
where N is the number of ciphertext blocks. Each attempt requires
N AES decryption. So, the algorithmic complexity of this attack is
O (N 2).
Defense. Our SOA relies on modifying the ciphertext to inject
specific syntax errors in the decrypted plaintext. Our attack works
because the P1735 standard does not provide any integrity protec-
tion for the Data Block, and encourages the return of descriptive
syntax errors. As the latter seems crucial for facilitating SoC design,
we recommend a cryptographic solution. As noted in the discussion
of POA defenses, we recommend using a proper, provably secure
AEAD scheme, and treating all of the digital envelope that is not
the Data Block as associated data.
3.3 Optimizing the syntax-oracle attack
In the worst case, the SOA requires 256× 16× N attempts to extract
the plaintext IP consisting of N ciphertext blocks. For N = 10, 000,
the SOA would require roughly 40 million attempts to recover the
plaintext. For each attempt, the EDA tool must decrypt the IP and
run a syntax check. Our experimental results show that a single
attempt takes around 0.25 seconds, on average. Therefore, for a
10,000 block IP, the SOA would take nearly 40 months to extract
the entire plaintext. In short, the basic SOA may not be practical for
large scale industrial IPs. In this section, we provide optimizations
for the SOA that significantly reduce the run time of the attack.
Reduce sample space of guess byte (RSSGB). Consider the
example introduced in the previous section. In the first step of
the attack, C′
1[5] = д1,
where д1 = C1[5] ⊕ 0x60 ⊕ д. This optimization improves the
attack efficiency by reducing the number of attempts to extract the
plaintext. To see why, observe that
1[5] = д. Instead, the adversary could set C′
P2[5] = C1[5] ⊕ 0x60 ⊕ д1
= C1[5] ⊕ 0x60 ⊕ (C1[5] ⊕ 0x60 ⊕ д)
= д
Note that the ciphertext is an encryption of valid Verilog code. Since
the guess byte is now equal to P2[5], it would be a valid Verilog
character, and hence its range would be between 1 and 128. The
maximum number of attempts to find all of the plaintext therefore
reduces from 256 × 16 × N to 128 × 16 × N . This optimization also
works for the POA.
In AES-CBC, a plaintext
Reducing AES decryptions (RAD).
block is a function of two ciphertext blocks, namely PN = DK (CN )
⊕ CN−1, where D = E−1. The Synplify tool reports errors after
it decrypts the entire ciphertext, and performs a syntax check on
the resulting plaintext. This adds a lot of latency as the tool has to
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1538Figure 4: Syntax-oracle attack to extract the plaintext, P2[5]. Before the attack, P2[5] = C1[5] ⊕ y[5]. When C′
1, i.e., P′
block.)
1[5] ⊕ y[5], so P2[5] = C1[5] ⊕ 0x60 ⊕ д. (P′
2[5] = 0x60. Since, P′
2[5] = C′
2 and C′
1[5] = д, suppose SO returns
1 represent the modified plaintext and ciphertext
decrypt extra N − 2 blocks of ciphertext to recover each targeted
plaintext block. It is possible to parse and modify the ciphertext so
that it only contains the target block and the block before the target
block. However, any target block other than the last block will not
have proper padding, and the tool does not report syntax errors if it
finds a padding error. We counter this problem by using the follow-
ing preprocessing — discard all ciphertext blocks except the last two
blocks, the target block, and the block before it. The last two blocks
prevent concealing of syntax errors due to padding errors. For exam-
ple, consider a 100-block ciphertext, C = IV ∥ C1 ∥ · · · ∥ C99 ∥ C100.
To recover C3, we could give C′ = C2 ∥ C3 ∥ C99 ∥ C100 as input to
the tool, instead of C. Now, in each attempt, the tool has to decrypt
just 4 blocks of ciphertext to get the plaintext instead of N . Owing to
this optimization, the algorithmic complexity reduces from O (N 2)
to O (N ). To be precise, the tool can save up 128 × 16 × N × (N − 4)
AES decryption operations in each attack. For a 1,000-block Verilog
code IP, the attack can be 250x faster than the RSSGB optimization.
This optimization also works for POA.
All-blocks-at-once attack (ABAO) . The syntax-oracle attack
can be independently applied to extract a character from any par-
ticular position. Also, instead of aiming to inject the backquote
character/symbol at one position, we can aim to inject it at multiple
position at the same time. The EDA tool will report the respective
locations (in the decrypted IP) where it encounters errors due to
the backquote symbol. These properties make the SOA inherently
parallelizable and we can exploit it to gain a massive speedup.
The optimized attack needs some pre-processing similar to the
previous optimization. This is shown in Figure 5. We first break
the Data Block of the encrypted Verilog code into groups, where
each group consists of a target block, its preceding block, and the
last two blocks in the Data Block. A module is the basic unit of
hierarchy in Verilog. So, each group is given a unique module name
and is written on to a separate file. For example, for target block
C1, we write IV ∥ C1 ∥ CN−1 ∥ CN in the Data Block of module1;
for target block C2, we write C1 ∥ C2 ∥ CN−1 ∥ CN in the Data Block
of module2, and so on. It can be easily seen that the number of
files that needs to be created is equal to the number of encrypted
blocks in the Data Block of the original Verilog module. We then
write a main module (“top” in Figure 5) in a separate file that can
invoke the modules that we just constructed. Next, we modify (xor
with 0x60 and the guess byte) all characters of the target block in
each module and pass all files (module1, module2, ..., module100
and top) to the EDA tool. The tool checks for syntax errors in all
the files. Notice that, in this case all instances of the guess byte (if
present in the target block of a module) and their relative position
to the start of the file will be known in a single attempt. So, after
128 attempts, which is the sample space of valid Verilog characters,
we find all the characters in the original encrypted Data Block.
For this optimization, the algorithmic complexity of the attack
is O (N ) where N is the number of ciphertext blocks. To be more
precise, the attack takes a maximum of 128 attempts to find all of
the plaintext. The maximum number of AES operations that the
tool performs is equal to 128× N , as compared to 256× 16× N × N ,
in case of no optimization. For a Data Block that contains 1,000
AES-128 encrypted blocks, this optimization reduces the worst case
by more than 4 billion AES operations. Note that, the previous
optimization was sequential in nature, while the current one is
highly parallelized, as not only can we target all blocks at once, we
can also find all instances of a single guess byte in a single run.
This gigantic stride in efficiency comes at a loss of accuracy.
The ABAO optimization can introduce characters like EOF, double-
quote and comment symbols in the decrypted plaintext. These
characters also cause syntax errors which can mask the target (the
backquote symbol). Therefore, the SOA with this optimization will
fail to extract some plaintext characters. Our experimental results
show that the SOA with ABAO optimization can extract around
85% of the total plaintext. For an adversary with subject matter
expertise, it is feasible to infer the rest of the plaintext of the overall
encrypted IP.
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1539operations, we use the maximum number of AES operations as an
approximation of the run-time. The POA and the basic SOA can
extract ∼ 100% of the encrypted plaintext. While POA is restricted
to AES-CBC with a padding scheme that reports padding errors,
the SOA relies on a unique syntax error due to a specific plaintext
character in the underlying HDL (there could be more than one
such character in the HDL). Both of these attacks have high run
time owing to a large number of AES decryption operation. The
optimizations on the SOA improve the run-time of the attack but
also cause a loss in accuracy.
4 INTEGRITY ATTACKS
The modern SoC design flow involves third parties and even in-
house teams that are located across the globe. For such a distributed
design process, the trustworthiness of entities, their IP, and their
actions are difficult to verify. For example, an SoC integrator may
have different design teams located in different parts of the world.
The design team that is responsible for designing security critical
IPs for the SoC (e.g., Trusted Platform Modules) may not trust other
design teams as they could tamper with the IP surreptitiously and
avoid detection during functional verification and testing of it. In
these scenarios, these IPs are encrypted using the P1735 standard
to protect against malicious tampering.3
The standard does not consider any authenticity check on the
identity of IP authors. However, it purports to provide integrity pro-
tection for the digital envelope by providing an HMAC computation
over the Key Block (or the entire Rights block, if this includes more
than just the Key Block). In this section, we demonstrate that the
P1735 standard cannot ensure integrity protection of an encrypted
IP based on two different attacks.
In the first attack (see Section 4.1), we present a way to maul the
ciphertext so that our desired modification appears in the resultant
plaintext without causing any syntax errors. The second attack (see
Section 4.2) allows an adversary to insert ciphertext blocks in the
encrypted IP such that no syntax errors are raised and exploit the
lack of authentication of the IP author. Both of these attacks are
performed without the knowledge of the decryption key, and can
be applied to various security critical IPs with disastrous conse-
quences. Moreover, these attacks work with any IP and any set of
RTL instructions that the adversary wants to insert in the IP.
In these attacks, we insert a hardware Trojan in an encrypted
crypto-accelerator IP that implements the AES algorithm in hard-
ware [2]. To the best of our knowledge, this is the first demonstration
of hardware Trojan implementation in an encrypted IP. When it ob-
serves one specific plaintext, our Trojan leaks the on-chip secret
key used by the AES IP. The schematic of the Trojan (T ) is shown in
Figure 7(a). To implement it, an adversary needs to insert the code
shown in Figure 7(b) into the encrypted RTL. Here, PT and CT are
the plaintext and ciphertext ports of the AES module and Tj is the
triggering condition. When PT is equal to Tj, the key is leaked. Note
that detecting this Trojan is extremely difficult because it delivers its
payload only when it observes a specific 128-bit plaintext. In addi-
tion, it is worth noting that traditional Trojan detection techniques
3Anecdotally, representatives of the semiconductor industry have stated that the
community is adopting the recommendations of the P1735 standard to ensure the
integrity of IPs, too.
Figure 5: Modules creation in SOA - ABAO optimization. The blue
ciphertext block is the target block in each module.
Table 1: Trade-off of approximate accuracy v/s number of AES
operations (in worst case) in all the confidentiality attacks. The
analysis is over an encrypted IP whose Data Block consists of 1,000
ciphertext blocks.
SN Attack
1
2
3
4
5
Basic POA
Basic SOA
(2) + RSSGB
(3) + RAD
(2) + ABAO
#AES-decryptions Approximate
4.096 × 109
4.096 × 109
2.048 × 109
8.192 × 106
1.28 × 105
accuracy
100%
98%
98%
98%
85%
There is a clear trade-off between the accuracy and run-time of
this attack. An adversary could use this optimization to recover a
substantial portion of the plaintext in a short time. If there is spare
bandwidth, they could run the basic SOA/POA to find the missing
characters. A tweaked version of this optimization can be applied
to the POA. We discuss this in Section 6.
Exploit frequency distribution. The attacker can also exploit
the frequency distribution of characters in Verilog grammar to
select guess bytes instead of making randomized guesses. For more
efficiency, they could use a Markov model to make adaptive guesses
based on partially decrypted plaintext.
Run parallel instances of the tool. Another trivial optimization
involves the IP user running multiple instances of the Synplify tool
in parallel to recover separate portions of the plaintext. The number
of instances that could be run in parallel are controlled by the EDA
tool. One could argue that the adversary could procure multiple
licenses of the Synplify tool and recover the plaintext IP in a short
time. But, these licenses are very expensive and cost upwards of
$100,000.
3.4 POA vs. SOA
Table 1 shows the trade-off of each optimization with respect to
the accuracy of the attack, for a 1,000 block ciphertext. Since run
time of an attack is directly proportional to the number of AES
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1540Figure 6: Integrity attack-I on the P1735 standard. The IV is modified to insert the start-comment directive in P1. A random block (A1) is
inserted after C1. The resulting plaintext text (PA1) is not checked by the tool for syntax errors as it is treated as commented characters. The
attack block (A1) is appended to the victim block (V1 = C1). A1 is tampered to insert the end-comment directive in the first two bytes of PV1,
and the desired Trojan’s first twelve characters in the next twelve bytes. The process is repeated by tampering A1 to insert the start-comment
directive in the last two bytes of PV1. Precondition: the attacker knows at least one block of the plaintext.
[32], [12], [36] cannot be applied on encrypted IPs. We reiterate
the fact that the P1735 standard does not facilitate any authenticity
check on the encrypted IP and therefore, any modification in the
encrypted IP is not detected.
4.1 Trojan Insertion in Crypto-accelerator - I
In this attack, we first recover the plaintext IP using one of our
prior confidentiality attacks. Then, we manipulate the initialization
vector (IV ′) to insert a start-comment directive in the first block
of the plaintext (since P′
1 = DK (C1) ⊕ IV ′). Next, we insert two
additional blocks —the attack block A1, and the victim block V1—
after the first cipher text block. Each attack block is modified in an
adaptive manner; all the victim blocks are same as C1. Our aim is
to modify the attack block so that the desired changes are reflected
in the plaintext-block (PV1) corresponding to V1. This is explained
with the following equation,
= DK (V1) ⊕ A1
PV1
Note that, we know DK (V1) from the confidentiality attack. There-
fore, we can change A1 to make any specific changes in PV1. How-
ever, the plaintext block, PA1 corresponding to A1 would consist of
Figure 7: (a) Schematic of a Trojan which leaks the on-chip private
key used by the AES IP. (b) The Verilog code which implements
this Trojan.
random characters, which in turn would cause syntax errors with
very high probability. We counter this by commenting out the PA1
block. As mentioned in the previous paragraph, we have modified
IV ′ to insert a start-comment directive in P′
1. We now modify A1 in
such a manner that it introduces a end-comment directive in PV1.
Therefore, the PA1 block is encapsulated inside a comment section,
and the EDA tool does not check for syntax errors in commented
sections of the IP.
Figure 6 illustrates our proposed integrity attack. The /∗ is the
Verilog directive for start of comment and ∗/ is the directive for
end of comment. Notice that, the PA1 block is encapsulated inside
a comment section. Also, we modify the last two bytes in A1 to
insert a start-comment directive in the last two bytes of PV1. This
allows us to insert the subsequent attack blocks, Ai, and victim
blocks, Vi, where i > 1. All the victim blocks are identical in our
attack. Since each of the victim blocks has a end-comment direc-