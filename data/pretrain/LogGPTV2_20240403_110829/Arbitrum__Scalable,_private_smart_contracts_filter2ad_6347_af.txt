[18] Kosba, A., Miller, A., Shi, E., Wen, Z., Papaman-
thou, C.: Hawk: The blockchain model of cryptog-
raphy and privacy-preserving smart contracts. In:
Security and Privacy (SP), 2016 IEEE Symposium
on. pp. 839–858. IEEE (2016)
[19] Kumaresan, R., Moran, T., Bentov, I.: How to use
bitcoin to play decentralized poker. In: CCS
[20] Lind, J., Eyal, I., Kelbert, F., Naor, O., Pietzuch,
P., Sirer, E.G.: Teechain: Scalable blockchain pay-
ments using trusted execution environments. arXiv
preprint arXiv:1707.05454 (2017)
[21] Lindell, Y., Pinkas, B.: Privacy preserving data
mining. In: Annual International Cryptology Con-
ference. pp. 36–54. Springer (2000)
USENIX Association
27th USENIX Security Symposium    1367
[22] Luu, L., Teutsch, J., Kulkarni, R., Saxena, P.: De-
mystifying incentives in the consensus computer.
In: Proceedings of the 22nd ACM SIGSAC Confer-
ence on Computer and Communications Security.
pp. 706–719. ACM (2015)
[23] Maxwell, G.: Zero knowledge contingent pay-
ments. URl: https://en.bitcoin.it/wiki/
Zero_Knowledge_Contingent_Payment (2011)
[24] McCorry, P., Shahandashti, S.F., Hao, F.: A smart
contract for boardroom voting with maximum voter
privacy. IACR Cryptology ePrint Archive 2017,
110 (2017)
[25] Miller, A., Bentov, I., Kumaresan, R., Cordi, C.,
McCorry, P.: Sprites and state channels: Payment
networks that go faster than lightning
[26] Nakamoto, S.: Bitcoin: A peer-to-peer electronic
cash system (2008)
[27] Parno, B., Howell, J., Gentry, C., Raykova, M.:
Pinocchio: Nearly practical veriﬁable computation.
In:
IEEE Symposium on Security and Privacy,
2013
[28] Poon, J., Buterin, V.: Plasma: Scalable autonomous
smart contracts. White paper (2017)
[29] Roughgarden, T.: Lecture #5: Incentives in peer-to-
peer networks. http://theory.stanford.edu/
~tim/f16/l/l5.pdf (October 2016)
[30] Teutsch, J., Reitwiener, C.: A scalable veriﬁcation
solution for blockchains (2017)
[31] Wood, G.: Ethereum: A secure decentralised gen-
eralised transaction ledger. Ethereum Project Yel-
low Paper 151, 1–32 (2014)
[32] Wood, G.: Polkadot: Vision for a heterogeneous
multi-chain framework (2017)
[33] Zhang, F., Daian, P., Kaptchuk, G., Bentov, I.,
Miers, I., Juels, A.: Paralysis proofs: Secure dy-
namic access structures for cryptocurrencies and
more
[34] Zyskind, G., Nathan, O., Pentland, A.: Enigma:
Decentralized computation platform with guaran-
teed privacy. arXiv preprint arXiv:1506.03471
A Participation Games: Full proof and
discussion
First, we provide a proof of Theorem 1. To do this, we
require a more formal setup than provided in Section 2.3.
Every round, a participation game is played. Players
have time-discounted utilities for some discounting pa-
rameter γ  1.
Proof of Theorem 1. Let k be the participation parameter
If k = 1, then it is trivially
of the participation game.
an equilibrium for player one to participate with s1 = 1
every round, and all other players to not participate, and
the theorem is proved.
If k > 1, we will consider any 1 > γ ≥ 1− 1
3k f (1). Con-
sider the following equilibrium:
• Player one participates and sets s1 = k in every
round.
• Player i ∈ [2,k] uses the following strategy:
if
during any of the previous R = 12k f (1)2 rounds,
∑ j(cid:54)=i s j  k set si = 0.
First, observe that all players i > 1 are best-
responding, by deﬁnition of the participation parame-
ter. Player one will set s1 = k every round no matter
what, so all other players will set s j = 0. Therefore,
in any round the decisions faced by player i is simply
whether to set s j = (cid:96) and get reward (cid:96)· f (k + (cid:96)), without
affecting anyone’s strategies in any future rounds. By
the fact that f (·) is One-Shot Sybil-Proof, we have that
(cid:96)· f (k + (cid:96)) ≤ f (k + 1). By deﬁnition of the participation
parameter, f (k + 1) ≤ 1. So player i would get reward
at most 1 by participating, and have to pay cost 1, giving
them non-positive utility by participating. Therefore, all
players i > 1 are best responding (getting zero utility, but
with no options that give higher utility).
Now, we wish to prove that player 1 is also best re-
sponding. Note that it is certainly possible for player 1
1368    27th USENIX Security Symposium
USENIX Association
to improve their payoff in one round: they can achieve
(cid:96)· f ((cid:96)) for any (cid:96) immediately after a round where they
set si = k. Immediately from the deﬁnition of One-Shot
Sybil-Proof, we see that player 1 would make more proﬁt
in this round by setting si = 1. However, this would cost
them in future rounds, and it causes other players to par-
ticipate.
Speciﬁcally, observe ﬁrst that player 1 is strictly bet-
ter off setting s1 = k in any round than s1 > k. This is
because all other players behave the same in every future
round regardless of whether s1 = k or s1 > k, and s1 = k
yields strictly higher reward in the present round. So we
need only consider deviations where s1  ε. But now consider the
subsequent R rounds, and call this set of rounds R. In
at most k of these rounds is it possible that ∑ j s j  T , reducing us back to the original
participation game. That is, one should expect a single
veriﬁer (or conglomerate of veriﬁers) to have the com-
putational power to process all contracts. Similarly, as-
suming that any ordinary participant can amass the funds
for a deposit, a single wealthy veriﬁer (or conglomerate)
should certainly be able to amass the funds to deposit ev-
erywhere. So this approach initially doesn’t seem to buy
anything.
One potential avenue for defense is to introduce
dummy contracts that are indistinguishable from the rest,
to artiﬁcially inﬂate T > A. The downside to this is that
if dummy contracts are to be indistinguishable from the
rest, they must also reward veriﬁers, and therefore the
cost of the system will blow up. Even if one is willing to
pay the cost, this solution has some pitfalls:
• It’s unclear how to design dummy transactions that
are truly indistinguishable from the rest.
• Even if dummy transactions are indistinguishable
from the rest, an adversary could still try to ﬂood
veriﬁcation of a speciﬁc contract they’re invested
in, encouraging others to spend their limited de-
posits/computational power verifying elsewhere.
If somehow one is able to bypass the above problems,
the cost of implementing dummy contracts grows lin-
early with the ratio A/T (where T is the natural desired
throughput). We include the results of some simulations
conﬁrming this below.
With enough dummy transactions, the game becomes
the following: each player simultaneously chooses a
number of Sybils si. Then, A participation games are
chosen uniformly at random, and player i enters si Sybils
in each (note that it is without loss of generality that each
player chooses the same number of Sybils per game by
symmetry). If A/T(cid:48) (T(cid:48) includes the dummy contracts)
is small, then even if one player introduces many Sybils,
there will still be a decent chance of winding up in a
contract where they don’t participate at all, which will
still yield reasonable reward. However, we certainly need
T(cid:48) > A in order to accomplish this, and the dummy trans-
actions require payment as well.
The plots below describe the following: Assume an
initial ratio of A/T (called ‘A’ in the plots - one can alter-
natively think of T as being normalized to 1). Then, pick
a ratio of dummy contracts to increase T to T(cid:48) > A, and a
reward function f (·) of the form f (m) = c· 2−m. Player
1 will then pick s1 to enter in A participation games per
round, knowing that all other players will best respond
to this, in order to maximize their own payoff. Finally
for a given k (desired number of distinct participators per
contract), we optimize over all choices of T(cid:48),c to ﬁnd the
Figure 3: Plot of total required cost to guarantee x
distinct participators in expectation, when one user
does optimal Sybil attacks for various initial ratio of
A/T.
Figure 4: Plot of total required cost to guarantee
{2,3,4,5} distinct participators in expectation, when
one user does optimal Sybil attacks as a function of
initial ratio A/T.
minimum cost solution that guarantees k distinct partic-
ipators per contract in expectation (in the above form of
equilibrium). We include two plots below.
Both ﬁgures have the total cost on the y-axis. Figure 3
has the desired number of distinct participators on the x-
axis. The dotted line plots the ideal cost: how much we
have to pay per contract to get x distinct veriﬁers (this is
just x). The solid lines plot the cost of the optimal solu-
tion using dummy contracts for various initial values of
A/T . The takeaway from the ﬁrst plot is just that there’s
a noticeable separation between ideal and the necessary
cost if A > T .
Figure 4 has A on the y-axis, and the solid lines plot the
cost of the optimal solution using dummy contracts as a
function of A. Here, it is easy to see that the cost is linear
in A for all desired number of distinct veriﬁers. Note that
this blowup will come on top of whatever blowups are
already identiﬁed in works based on participation games
due to other concerns.
1370    27th USENIX Security Symposium
USENIX Association
0246810Security Threshold #user0102030405060Average Payment Per Real-User guaranteedA=1A=2A=3A=4A=5Ideal Minimum2.55.07.510.012.515.017.520.0Computation Capability per user020406080100120Total System PaymentSecThres=2SecThres=3SecThres=4SecThres=5