package leetcode
Output: "leotcede"
. == s ll .o. == s |l .I， == s |— .²， ==
func reversevowels(s string) string
Input: "leetcode"
return false
了
return string(b)
b := []byte(s)
 return true 
} else{
} else if !isvowels(b[i]） && isvowels(b[j]） {
} else if isvowels(b[i]） && !isvowels(b[j]） {
if isVowels(b[i]） && isVowels(b[j]）{
 i++ 
b[i]，b[j] =b[j]，b[i] 
j--
i++
i--
--
i++
_°_
二
S
=
.n.
S
==
'A'
二
S
---
## Page 452
代码
这一题是考察优先队列的题目。把数组构造成一个优先队列，输出前K个即可。
解题思路
给一个非空的数组，输出前K个频率最高的元素。
题目大意
Note:
Example 2: 
Example 1: 
Given a non-empty array of integers, return the k most frequent elements.
题目
347. Top K Frequent Elements
● Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
● You may assume k is always valid, 1 ≤ k≤ number of unique elements.
func topKFrequent(nums []int,k int） []int {
package leetcode
Output:[1]
Input: nums = [1], k = 1 
Output: [1,2]
import "container/heap"
Input: nums = [1,1,1,2,2,3],k = 2 
q := PriorityQueue{}
m := make(map[int]int)
m[n]++ 
for
-, n := range nums {
---
## Page 453
func (pq *PriorityQueue) Pop() interface{} {
// Pop define
// Push define 
 pq[i], pq[j] = pq[j], pq[i] 
func （pq PriorityQueue) Swap(i,j int) {
func （pq PriorityQueue) Less(i,j int) bool { 
func (pq PriorityQueue) Len() int {
type PriorityQueue []*Item 
// A PriorityQueue implements heap.Interface and holds Items
type Item struct 
return len(pq)
// Item define 
n := len(*pq) 
item := x.(*Item) 
 return pq[i].count > pq[j].count 
//注意：因为golang中的heap是按最小堆组织的，所以count越大，Less（)越小，越靠近堆顶
return item
*pq = (*pq)[:n-1]
item := (*pq)[n-1]
*pq = append(*pq, item)
count int
key
return result
var result []int 
for key, count := range m {
heap.Push(&q, &Item{key: key, count: count})
result = append(result, item.key)
item := heap.Pop(&q).(*Item) 
---
## Page 454
代码
除它(因为输出要求只输出一次)。
把数组一的每个数字都存进字典中，然后在数组二中依次判断字典中是否存在，如果存在，在字典中删
解题思路
题目大意
Note:
 Example 2: 
Example 1: 
Given two arrays, write a function to compute their intersection.
题目
349. Intersection of Two Arrays
找到两个数组的交集元素，
● The result can be in any order.
· Each element in the result must be unique.
package leetcode
Output: [9,4] 
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output:[2]
Input: numsl = [1,2,2,1], nums2 = [2,2]
m := map[int]bool{}
for.
for.
var res []int 
if m[n]{
m[n] = true 
delete(m,n)
-,n := range nums2 
-, n := range nums1
，如果交集元素同一个数字出现了多次，只输出一次。
---
## Page 455
解题思路
这题是第 349 题的加强版。要求输出2个数组的交集元素，如果元素出现多次，要输出多次。
题目大意
Follow up:
Note:
 Example 2:
Example 1: 
Given two arrays, write a function to compute their intersection.
题
350. Intersection of Two Arrays Il
● What if the given array is already sorted? How would you optimize your algorithm?
● Each element in the result should appear as many times as it shows in both arrays.
Output: [4,9]
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] 
Output:[2,2]
Input: numsl = [1,2,2,1]， nums2 = [2,2]
What if nums1's size is small compared to nums2's size? Which algorithm is better?
面
 cannot load all elements into the memory at once?
return res
res = append(res, n)
---
## Page 456
题目大意
Example:
Note: Rotation is not allowed.
What is the maximum number of envelopes can you Russian doll? (put one inside other)
than the width and height of the other envelope.
envelope can fit into another if and only if both the width and height of one envelope is greater 
You have a number of envelopes with widths and heights given as a pair of integers (w, h) . One 
题目
354. Russian Doll Envelopes
代码
一。如果 value 是O 代表不存在这个数字。
value是这个数字出现的次数。在扫描数组二的时候，每取出一个存在的数组，把字典中的value 减
这一题还是延续第 349 题的思路。把数组一中的数字都放进字典中，另外字典的key 是数组中的数字,
=> [5,4] => [6,7]].
Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3]
output: 3 
Input: [[5,4],[6,4],[6,7],[2,3]]
func intersect(numsl []int, nums2 []int) []int {
package leetcode
 m := map[int]int{}
return res
for -, n := range nums2 
for.
var res []int 
if m[n] >0 {
m[n]++
m[n]--
res = append(res, n)
-,n := range numsl {
---
## Page 457
代码
解题思路
说明：
请计算最多能有多少个信封能组成一组"俄罗斯套娃"信封（即可以把一个信封放到另一个信封里面）
都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。
给定一些标记了宽度和高度的信封，宽度和高度以整数对形式(w,h)出现。当另一个信封的宽度和高度
·给出一组信封的宽度和高度，
·不允许旋转信封。
func maxEnvelopes(envelopes [][]int) int {
func (s sortEnvelopes) Swap(i, j int) {
func (s sortEnvelopes) Less(i,j int) bool {
func （s sortEnvelopes) Len(） int {
type sortEnvelopes [][]int
package leetcode
 s[i]， s[j] = s[j]， s[i] 
if s[i][0] == s[j][0] { 
 return len(s)
"sort"
import
dp := []int{} 
 sort.Sort(sortEnvelopes(envelopes)) 
return s[i][o]  s[j][1] 
300题的方法一致。解题思路详解见第300题。
最长上升子序列。先降维，把宽度排序。然后在高度上寻找最长上升子序列。这里用到的方法和第
就是能找到一个最长上升子序列。但是这题的条件是二维的，要求能找到在二维上都能满足条件的
low, high := 0,len(dp) 
for low = e[1] { 
mid := low + (high-low)>>1
如果组成俄罗斯套娃，问最多能套几层。只有当一个信封的宽度和高
---
## Page 458
解题思路
给定一个非负整数n，计算各位数字都不同的数字×的个数，其中0≤×= 10 { 
res := []int{1, 10,91, 739, 5275, 32491, 168571, 712891, 2345851, 5611771,
return res
for n > 1 && availableNumber > 0 { 
res, uniqueDigits, availableNumber := 10, 9, 9 
return res[n]
 return 1
 return res[10]
availableNumber--
uniqueDigits = uniqueDigits * availableNumber
n--
res += uniqueDigits 
---
## Page 460
 Example 1: 
Calculate the sum of two integers a and b, but you are not allowed to use the operator ± and 
题目
371. Sum of Two Integers
代码
解题思路
说明：不要使用任何内置的库函数，如 sqrt。
给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回False。
题目大意
·给出一个数，要求判断这个数是不是完全平方数。
func isPerfectSquare(num int) bool {
package leetcode
+
Output: false
Input: 14 
return false
low, high := 1, num 
返回 false。
数的平方是否可以等于待判断的数字。从[1,n] 区间内进行二分，若能找到则返回 true，找不到就
for low >1
high = mid - 1 
else {
low = mid + 1 
 return true 
---
## Page 461
 positive integer given in the form of an array.
Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large 
题目
372. Super Pow
代码
解题思路
不使用运算符+和-，计算两整数a、b 之和。
题目大意
Example 2: 
·要求不用加法和减法运算符计算a+b。这一题需要用到和& 运算符的性质，两个数可以实
func getsum(a int,b int) int {
package leetcode
Output: 1
Input: a = -2，b = 3 
Output: 3
Input: a = 1,b = 2 
//ab计算的是不带进位的加法
//(a ＆ b)利用性质 四
性质
[三]
12345^678 % 1337 = (12345^670 * 12345^8) % 1337 
98374等等
模运算性质四：
模运算性质二：
模运算性质一：
=（(12345^670 % 1337) *(12345^8 % 1337)) % 1337
a ^ b % p = ((a % p)^b) % p 
(a * b) % p =
d%(d% q + d% e) =d% (q + e) 
21 % （991 % 8v9921) × (01v(21 % 29v9921))) =
2991 % (2291 % 8v9+221) × 2991 % (01v(2291 % 19v9921)) =
=（((12345^67)^10 % 1337) *(12345^8 % 1337)) % 1337
:(a % p * b% p) % p
---〉利用性质
--->反向
---
## Page 463