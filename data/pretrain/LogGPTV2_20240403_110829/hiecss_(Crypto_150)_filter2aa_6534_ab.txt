And we get `hxp{H1dd3n_Gr0uP_0rD3rz_4r3_5uPP0s3D_t0_B3_k3p7_h1DD3n!}`
###PL version
W zadaniu dostajemy [kod źródłowy](hiecss.py) szyfrowania opartego o krzywe eliptyczne.
Najważniejsza część to:
```python
e = 65537
order = 'Give me the flag. This is an order!'
def decode(bs):
    if len(bs) = q:
        print('\x1b[31mbad signature\x1b[0m')
        return None
    S = s, sqrt(pow(s, 3, q) + a * s + b, q)
    if S[1] is None:
        print('\x1b[31mbad signature:\x1b[0m {:#x}'.format(S[0]))
        return None
    h = int(SHA256.new(m.encode()).hexdigest(), 16)
    if mul(q, a, b, e, S)[0] == h:
        return m
    else:
        print('\x1b[31mbad signature:\x1b[0m ({:#x}, {:#x})'.format(*S))
if __name__ == '__main__':
    q, a, b = map(int, open('curve.txt').read().strip().split())
    for _ in range(1337):
        m = decode(input())
        if m is not None and m.strip() == order:
            print(open('flag.txt').read().strip())
            break
```
Widać, że parametry krzywej czytane są z pliku i nie są nam znane.
Możemy także odpytywać serwer wielokrotnie w jednej sesji.
Naszym zadaniem jest podanie takich danych na wejście, aby wynik działania funkcji `decode` na nich, po usunięciu spacji pasował do podanego stringa.
Funkcja `decode` dzieli dane biorąc pierwsze 64 bajty jako hex-encoded integer `s` a pozostałą część jako string `m` z którego następnie liczony jest hash sha256.
Na koniec, jeśli spełnimy kilka warunków, jako wynik funkcji odsyłana jest wartość `m` więc ta wartość musi pasować do podanej w programie wiadomości (ale może zawierać na końcu dodatkowe białe znaki).
Pierwszy warunek wymusza żeby integer `s` był mniejszy niż `q` które program bierze z pliku.
Jeśli warunek nie jest spełniony dostajemy ładny komunikat błędu.
Jeśli nam się powiedzie ale nie uda się kolejny warunek dostajemy inny komunikat błędu!
Możemy wykorzystać to jako wyrocznie aby odzyskać wartość `q` - możemy użyć szukania binarnego bazując na długości wiadomości błędu:
```python
def form_payload_from_number(q):
    payload = hex(q)[2:]
    if "L" in payload:
        payload = payload[:-1]
    payload = ('0' * (64 - len(payload))) + payload
    return payload
def get_q(s, msg):
    max_q = 2 ** 256 - 1
    min_q = 0
    q = 0
    while True:
        q = (max_q - min_q) / 2 + min_q
        print(hex(q), max_q, min_q)
        payload = form_payload_from_number(q)
        s.sendall(payload + msg + "\n")
        result = s.recv(9999)
        if len(result) == 23:  # our q too big
            max_q = q
        else:  # our q was too small
            min_q = q
        print(result)
        if max_q == q or min_q == q:
            print("Found q", q)
            break
    return q
```
W ten sposób odzyskujemy `q = 0x247ce416cf31bae96a1c548ef57b012a645b8bff68d3979e26aa54fc49a2c297L`
Przechodzimy do następnego warunku.
Tutaj musimy generalnie upewnić się, że wartość `s` jest współrzędną `x` punktu `S` na krzywej eliptycznej.
Byłoby prościej gdybyśmy wiedzieli co to za krzywa.
Są jednak pewne trywialne punkty dla których możemy przejść ten warunek.
Ostatni warunek sprawdza czy punkt na krzywej ze współrzędną `x` równą sha256 z naszej wiadomości (nazwijmy ten punkt `H`) jest równy `S*e` na krzywej.
Znów jeśli nam się nie uda dostajemy błąd, tym razem zawierający współrzędne punktu `S` dla którego podaliśmy `x`.
To oznacza że podajemy `s` a dostajemy `sqrt(pow(s, 3, q) + a * s + b, q)`.
Wykorzystujemy to aby odzyskać `a` oraz `b`:
Wysyłając `s = 0` dostajemy jako wynik `sqrt(pow(0,3,q) + a*0 + b, q) = sqrt(b, q)`
Musimy to teraz tylko podnieść do kwadratu modulo q aby uzyskać `b mod q`:
```python
b = pow(0x18aae6ca595e2b030870f49d1aa143f4b46864eceab492f6f5a0f0efc9c90e51, 2, q)
```
Wysyłając `s = 2` dostajemy jako wynik `sqrt(pow(2,3,q) + a*2 + b, q) = sqrt(2*a + 8 + b, q)`
Znów musimy tylko podnieść do kwadratu i wynikać odejmowanie stałych aby dostać `a mod q`:
```python
a = (((pow(0x20d599b9106e16f43d0c0a54e78517f5834bf15ef0206a5ce37080e4cad4f359, 2, q) - b - 8) % q) / 2) 
```
Teraz mamy już wszystkie parametry krzywej i potrzebujemy znaleźć punkt `S` taki że `H` = `S*e`.
Do tego potrzebujemy liczbę odwrotną dla `e` na krzywej, ponieważ `H*inverse_e = S*e*inverse_e = S`.
Znamy `H`, a przynajmniej możemy je uzyskać metodą brute-force szukając stringa z podanym prefixem i spacjami na końcu, który hashuje się do `x` leżącego na krzywej, więc możemy poznać odpowiednie `H`.
Aby policzyć liczbę odwrotną potrzebujemy znać liczbe punktów na krzywej.
Do tego użyliśmy sage:
```
E = EllipticCurve(GF(q),[a,b])
E.cardinality()
```
Co dało nam: `order = 16503925798136106726026894143294039201930439456987742756395524593191976084900` jako liczność punktów na krzywej.
Teraz potrzebujemy jedynie policzyć `inverse_e = modinv(e, order)` i pomnożyć przez jakieś `H` na krzywej aby dostać szukaną wartość punktu `S`:
```python
def compute_point(a, b, q, field_order, msg):
    e = 65537
    hx = int(hashlib.sha256(msg.encode()).hexdigest(), 16)
    hy = sqrt(pow(hx, 3, q) + a * hx + b, q)
    e_inv = gmpy2.invert(e, field_order)
    S = mul(q, a, b, e_inv, (hx, hy))
    check = mul(q, a, b, e, S)
    assert check[0] == hx
    return S[0]
```
Testujemy tak koljne wiadomości dodając spacje aż przy dodanych 4 spacjach trafiamy na punkt na krzywej -> `msg = 'Give me the flag. This is an order!    '`
Teraz pozostaje jedynie wysłać na serwer współrzędna `x` punktu `S` razem z wiadomością powiększoną o 4 spacje aby dostać flagę:
```python
def main():
    msg = 'Give me the flag. This is an order!    '
    url = "130.211.200.153"
    port = 25519
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((url, port))
    sleep(1)
    # q = get_q(s, msg)
    q = 0x247ce416cf31bae96a1c548ef57b012a645b8bff68d3979e26aa54fc49a2c297L
    field_order = 16503925798136106726026894143294039201930439456987742756395524593191976084900
    b = pow(0x18aae6ca595e2b030870f49d1aa143f4b46864eceab492f6f5a0f0efc9c90e51, 2, q)
    a = (((pow(0x20d599b9106e16f43d0c0a54e78517f5834bf15ef0206a5ce37080e4cad4f359, 2,
               q) - b - 8) % q) / 2)
    p = compute_point(a, b, q, field_order, msg)
    payload = form_payload_from_number(p)
    payload += msg
    print(payload)
    s.sendall(payload + "\n")
    print(s.recv(9999))
```
I dostajemy `hxp{H1dd3n_Gr0uP_0rD3rz_4r3_5uPP0s3D_t0_B3_k3p7_h1DD3n!}`