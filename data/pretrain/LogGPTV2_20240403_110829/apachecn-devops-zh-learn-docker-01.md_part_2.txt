出于所有这些原因以及许多其他原因，出现了 Docker 必须做一些事情来明确区分 Docker 开源部分和 Docker 商业部分的想法。此外，该公司希望防止竞争对手为了自己的利益使用和滥用 Docker 这个名字。这是莫比项目诞生的主要原因。它是 Docker 开发并继续开发的大多数开源组件的保护伞。这些开源项目不再有 Docker 这个名字了。
莫比项目的一部分是映像管理、机密管理、配置管理、网络和供应等组件。此外，莫比项目的一部分是特殊的莫比工具，例如，用于将组件组装成可运行的工件。
技术上属于莫比项目的一些组件已经由 Docker 捐赠给了**云原生计算基金会** ( **CNCF** )，因此不再出现在组件列表中。最突出的是`containerd`和`runc`，它们共同构成了容器运行时。
# Docker 产品
Docker 目前将其产品线分为两个部分。有**社区版** ( **CE** )是封闭源码但完全免费，还有**企业版** ( **EE** )也是封闭源码，需要按年领证。企业产品支持 24 x 7 支持，并且支持的错误修复时间比其 CE 产品长得多。
# 停靠此
Docker 社区版的一部分是 Docker 工具箱、Docker for Mac 和 Docker for Windows 等产品。这三款产品主要面向开发者。
Mac Docker 和 Windows Docker 是易于安装的桌面应用，可用于在 Mac 或 Windows 上构建、调试和测试 Docker 化的应用或服务。Mac 的 Docker 和 Windows 的 Docker 是完整的开发环境，它们与各自的虚拟机管理程序框架、网络和文件系统深度集成。这些工具是在 Mac 或 Windows 上运行 Docker 最快、最可靠的方法。
在 CE 的保护伞下，还有两款产品更面向运营工程师。这些产品是 Azure 的 Docker 和 AWS 的 Docker。
例如，使用 Docker for Azure，这是一个本机 Azure 应用，您只需点击几下鼠标即可设置 Docker，针对基础 Azure **基础架构即服务** ( **I** **aaS** )服务进行优化并集成。它帮助运营工程师加快在 Azure 中构建和运行 Docker 应用的生产时间。
AWS 的 Docker 工作原理非常相似，但适用于亚马逊的云。
# Docker EE
Docker EE 由两个产品**通用控制平面**(**【UCP】**)和 **Docker 可信注册中心** ( **DTR** )组成，它们都运行在 Docker Swarm 之上。两者都是 Swarm 应用。Docker EE 构建在莫比项目的上游组件之上，并添加了企业级功能，如**基于角色的访问控制** ( **RBAC** )、多租户、Docker Swarm 和 Kubernetes 的混合集群、基于 web 的 UI 和内容信任，以及在其之上的映像扫描。
# 容器生态系统
在信息技术领域，从来没有一种新技术比容器更快、更彻底地渗透到整个领域。任何不想被落下的公司都不能忽视容器。来自行业各个部门对容器的巨大兴趣引发了该领域的大量创新。许多公司专门研究容器，或者提供基于这种技术的产品，或者构建支持它的工具。
最初，Docker 没有容器编排的解决方案，因此其他公司或项目，无论是否开源，都试图缩小这个差距。其中最著名的是由谷歌发起，后来捐赠给 CNCF 的 Kubernetes。其他容器编排产品有 Apache Mesos、Rancher、Red Hat 的 Open Shift、Docker 自己的 Swarm 等等。
最近，趋势朝着服务网格发展。这是新的流行语。随着我们将越来越多的应用容器化，以及将这些应用重构为更多面向微服务的应用，我们遇到了简单的编排软件无法以可靠且可扩展的方式解决的问题。该领域的主题包括服务发现、监控、跟踪和日志聚合。这一领域出现了许多新项目，目前最受欢迎的项目是 Istio，它也是 CNCF 的一部分。
很多人说软件进化的下一步是功能，或者更准确的说是**功能即服务** ( **FaaS** )。有些项目正是提供这种类型的服务，并且建立在容器之上。一个突出的例子是 OpenFaaS。
我们只是触及了容器生态系统的表面。谷歌、微软、英特尔、红帽、IBM 等所有大型信息技术公司都在狂热地研究容器和相关技术。主要是关于容器和相关技术的 CNCF 有如此多的注册项目，以至于它们不再适合贴在海报上。在这个领域工作是令人兴奋的时刻。而依我拙见，这只是开始。
# 容器建筑
现在，让我们从高层次上讨论如何设计一个可以运行 Docker 容器的系统。下图说明了安装了 Docker 的计算机的外观。顺便说一下，安装了 Docker 的计算机通常被称为 Docker 主机，因为它可以运行或托管 Docker 容器:
![](img/ae9285b4-efd7-471f-86f5-220e2205d12d.png)
High-level architecture diagram of the Docker engine
在上图中，我们看到了三个基本部分:
*   在底部，我们有 Linux 操作系统
*   在中间的深灰色中，我们有容器运行时
*   在顶部，我们有 Docker 引擎
容器之所以成为可能，只是因为 Linux 操作系统提供了一些原语，如名称空间、控制组、层功能等，容器运行时和 Docker 引擎以非常具体的方式利用了这些原语。Linux 内核命名空间如**进程 ID** ( **pid** )命名空间或**网络** ( **net** )命名空间允许 Docker 封装或沙箱化在容器内部运行的进程。控制组确保容器不会遭受噪音邻居综合症，即在容器中运行的单个应用会消耗整个 Docker 主机的大部分或全部可用资源。控制组允许 Docker 限制资源，如中央处理器时间或每个容器最大分配的内存量。
Docker 主机上的容器运行时由`containerd`和`runc`组成。`runc`是容器运行时的低级功能，基于`runc`的`containerd`提供更高级的功能。这两个都是开源的，由 Docker 捐赠给了 CNCF。
容器运行时负责容器的整个生命周期。如有必要，它会从注册表中提取一个容器映像(它是容器的模板)，从该映像创建一个容器，初始化并运行该容器，并最终在系统要求时停止并移除该容器。
Docker 引擎在容器运行时之上提供了额外的功能，例如网络库或插件支持。它还提供了一个 REST 接口，所有容器操作都可以通过该接口实现自动化。我们将在本书中经常使用的 Docker 命令行界面就是这个 REST 界面的消费者之一。
# 摘要
在这一章中，我们研究了容器如何大规模减少软件供应链中的摩擦，最重要的是，使供应链更加安全。
在下一章中，我们将熟悉容器。我们将学习如何运行、停止和移除容器以及以其他方式操作它们。我们还将对容器的构造有一个相当好的概述。第一次，我们真的会弄脏手，玩这些容器，所以请继续关注。
# 问题
请解决以下问题来评估您的学习进度:
1.  哪些陈述是正确的(可能有多个答案)？
    1.  容器是一种轻量级虚拟机
    2.  容器只在 Linux 主机上运行
    3.  一个容器只能运行一个进程
    4.  容器中的主进程总是具有 PID 1
    5.  容器是一个或多个由 Linux 命名空间封装并受 cgroups 限制的进程
2.  用你自己的话向感兴趣的外行解释，也许用类比，什么是容器。
3.  为什么容器被认为是信息技术的游戏规则改变者？列举三到四个理由。
4.  当我们声称:*如果一个容器在给定的平台上运行，那么它可以在任何地方运行，这意味着什么...*？说出两到三个这是真的原因。
5.  真或假: *Docker 容器只对基于微服务的现代绿地应用真正有用*。请证明你的回答是正确的。
6.  一个典型的企业在将其遗留应用进行容器化时能节省多少成本？
    1.  20%
    2.  33%
    3.  50%
    4.  75%
7.  容器基于 Linux 的哪两个核心概念？
# 进一步阅读
以下是一个链接列表，这些链接指向有关我们在本章中讨论的主题的更详细信息:
*   *https://docs.docker.com/engine/docker-overview/[Docker 概况](https://docs.docker.com/engine/docker-overview/)*
*   *https://mobyproject.org/[的莫比项目](https://mobyproject.org/)*
*   *https://www.docker.com/get-docker[Docker 产品](https://www.docker.com/get-docker)*
*   *https://www.cncf.io/云原生计算基金会*
*   *容器–https://containerd.io/的行业标准容器运行时间*