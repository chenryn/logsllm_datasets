nr_slab_reclaimable - pages from the kernel slab memory usage that can be reclaimed  
nr_slab_unreclaimable 9670 - pages from the kernel slab memory usage that cannot be reclaimed  
nr_page_table_pages 5628 - pages allocated to page tables  
nr_dirty 15158 - dirty pages waiting to be written to disk  
nr_writeback 0 - dirty pages currently being written to disk  
nr_unstable 0  
nr_bounce 0  
nr_vmscan_write 4737  
pgpgin 2280999 - page ins since last boot  
pgpgout 76513335 - page outs since last boot  
pswpin 0 - swap ins since last boot  
pswpout 152 - swap outs since last boot  
pgalloc_dma 1  
pgalloc_dma32 27997500  
pgalloc_normal 108826482  
pgfree 136842914 - page frees since last boot  
pgactivate 24663564 - page activations since last boot  
pgdeactivate 8083378 - page deactivations since last boot  
pgfault 266178186 - minor faults since last boot  
pgmajfault 2228 - major faults since last boot  
pgrefill_dma 0  
pgrefill_dma32 6154199  
pgrefill_normal 19920764 - page refills since last boot  
pgsteal_dma 0  
pgsteal_dma32 0  
pgsteal_normal 0  
pgscan_kswapd_dma 0  
pgscan_kswapd_dma32 3203616  
pgscan_kswapd_normal 4431168 - pages scanned by kswapd since boot  
pgscan_direct_dma 0  
pgscan_direct_dma32 1056  
pgscan_direct_normal 2368 - pages reclaimed since boot  
pginodesteal 0  
slabs_scanned 391808  
kswapd_steal 7598807  
kswapd_inodesteal 0  
pageoutrun 49495 - number of times kswapd called page reclaim  
allocstall 37 - number of times page reclaim was called directly (low memory)  
pgrotated 154  
Of the above the following are important -  
nr_dirty - signifies amount of memory waiting to be written to disk. If you have a power loss you can expect to lose this much data, unless your application has some form of journaling (eg Transaction logs)  
pswpin & pswpout - should never be positive. This means the kernel is having to write memory pages to disk to free up memory for some other process or disk cache. One may see occasional swapping on the machine due to the kernel swapping out a process page in favor of a disk cache page due to the swappiness factor set  
pgfree 136842914 - page frees since last boot  
pgactivate 24663564 - page activations since last boot  
pgdeactivate 8083378 - page deactivations since last boot  
pgmajfault 2228 - shouldnt be too many. page faults are normal. but major page faults are generally rare. major page faults may involve disk activity and hence should ideally not occur frequently.  
allocstall 37 - should not occur often. This signifies that the periodic running of kswapd could not free up adequate pages and for these many number of times the kernel had to trigger page reclaims manually  
vmstat  
[user@server ~]$ vmstat -a -S M 5  
procs ----------memory--------- --swap- ----io--- -system- ----cpu-----  
r b swpd free buff cache si so bi bo in cs us sy id wa st  
3 0 2 6593 394 115893 0 0 690 767 1 2 32 12 53 4 0  
3 0 2 6585 394 115901 0 0 204 6310 6005 23103 29 15 53 2 0  
2 1 2 6549 394 115912 0 0 182 4707 5102 20867 38 13 48 2 0  
[user@server ~]$ vmstat -S M 5  
procs ----------memory--------- --swap- ----io--- -system- ----cpu-----  
r b swpd free inact active si so bi bo in cs us sy id wa st  
4 0 2 6390 48082 71527 0 0 690 767 1 2 32 12 53 4 0  
2 0 2 6383 48082 71534 0 0 87 4614 5859 21944 34 13 51 1 0  
3 0 2 6376 48082 71543 0 0 137 5164 4925 19994 23 12 64 1 0  
vmstat shows the following memory related fields -  
swpd: the amount of virtual memory used  
free: the amount of idle memory  
buff: the amount of memory used as buffers  
cache: the amount of memory used as cache  
inact: the amount of inactive memory (-a option)  
active: the amount of active memory (-a option)  
/proc - per process memory stats  
[user@server ~]$ cat /proc/7278/status  
FDSize: 1024  
Groups: 26  
VmPeak: 3675100 kB  
VmSize: 3675096 kB  
VmLck: 0 kB  
VmHWM: 81160 kB  
VmRSS: 81156 kB  
VmData: 944 kB  
VmStk: 84 kB  
VmExe: 3072 kB  
VmLib: 2044 kB  
VmPTE: 244 kB  
StaBrk: 0ac3c000 kB  
Brk: 0ac82000 kB  
StaStk: 7fff35863220 kB  
Threads: 1  
FDSize: Number of file descriptor slots currently allocated.  
Groups: Supplementary group list.  
VmPeak: Peak virtual memory size.  
VmSize: Virtual memory size.  
VmLck: Locked memory size (see mlock(3)).  
VmHWM: Peak resident set size ("high water mark").  
VmRSS: Resident set size.  
VmData, VmStk, VmExe: Size of data, stack, and text segments.  
VmLib: Shared library code size.  
VmPTE: Page table entries size (since Linux 2.6.10).  
Threads: Number of threads in process containing this thread.  
[user@server ~]$ cat /proc/7278/statm  
918774 20289 20186 768 0 257 0  
Table 1-2: Contents of the statm files (as of 2.6.8-rc3)  
..............................................................................  
Field Content  
size total program size (pages)	(same as VmSize in status)  
resident size of memory portions (pages)	(same as VmRSS in status)  
shared number of pages that are shared	(i.e. backed by a file)  
trs number of pages that are 'code'	(not including libs; broken,  
includes data segment)  
lrs number of pages of library	(always 0 on 2.6)  
drs number of pages of data/stack	(including libs; broken,  
includes library text)  
dt number of dirty pages	(always 0 on 2.6)  
..............................................................................  
[user@server ~]$ cat /proc/7278/stat  
7278 (postgres) S 1 7257 7257 0 -1 4202496 36060376 10845160168 0 749 20435 137212 158536835 39143290 15 0 1 0 50528579 3763298304 20289 18446744073709551615 4194304 7336916 140734091375136 18446744073709551615 225773929891 0 0 19935232 84487 0 0 0 17 2 0 0 12  
Table 1-3: Contents of the stat files (as of 2.6.22-rc3)  
..............................................................................  
Field Content  
pid process id  
tcomm filename of the executable  
state state (R is running, S is sleeping, D is sleeping in an  
uninterruptible wait, Z is zombie, T is traced or stopped)  
ppid process id of the parent process  
pgrp pgrp of the process  
sid session id  
tty_nr tty the process uses  
tty_pgrp pgrp of the tty  
flags task flags  
min_flt number of minor faults  
cmin_flt number of minor faults with child's  
*maj_flt number of major faults  
cmaj_flt number of major faults with child's  
utime user mode jiffies  
stime kernel mode jiffies  
cutime user mode jiffies with child's waited for  
cstime kernel mode jiffies with child's waited for  
priority priority level  
nice nice level  
num_threads number of threads  
it_real_value	(obsolete, always 0)  
start_time time the process started after system boot  
vsize virtual memory size  
rss resident set memory size  
rsslim current limit in bytes on the rss  
start_code address above which program text can run  
end_code address below which program text can run  
start_stack address of the start of the stack  
esp current value of ESP  
eip current value of EIP  
pending bitmap of pending signals (obsolete)  
blocked bitmap of blocked signals (obsolete)  
sigign bitmap of ignored signals (obsolete)  
sigcatch bitmap of catched signals (obsolete)  
wchan address where process went to sleep  
0 (place holder)  
0 (place holder)  
exit_signal signal to send to parent thread on exit  
task_cpu which CPU the task is scheduled on  
rt_priority realtime priority  
policy scheduling policy (man sched_setscheduler)  
blkio_ticks time spent waiting for block IO  
..............................................................................  
[user@server ~]$ cat /proc/7278/smaps  
00400000-00700000 r-xp 00000000 08:03 6424710 /usr/local/postgres/pgsql8.2.3/bin/postgres  
Size: 3072 kB  
Rss: 2108 kB  
Shared_Clean: 2108 kB  
Shared_Dirty: 0 kB  
Private_Clean: 0 kB  
Private_Dirty: 0 kB  
Swap: 0 kB  
2b3a78a33000-2b3b5493f000 rw-s 00000000 00:09 1114115 /SYSV0052e2c1 (deleted)  
Size: 3603504 kB  
Rss: 2129800 kB  
Shared_Clean: 54300 kB  
Shared_Dirty: 2075500 kB  
Private_Clean: 0 kB  
Private_Dirty: 0 kB  
Swap: 0 kB  
smaps shows for each process the memory distribution for various libraries, data and programs and what portion of it is shared. for instance above I have snipped out two entries from postgres showing that the postgres executable is taking 2 MB of shared memory and the postgres internal cache is taking 2 GB of shared memory.  
[root@server]# pmap -x 30850 | less  
Address Kbytes RSS Dirty Mode Mapping  
0000000040000000 36 0 0 r-x-- java  
0000000040108000 8 8 8 rwx-- java  
0000000041373000 1469492 1469352 1469352 rwx-- [ anon ]  
000000071ae00000 45120 44740 44740 rwx-- [ anon ]  
000000071da10000 38848 0 0 ----- [ anon ]  
0000000720000000 3670016 3670016 3670016 rwx-- [ anon ]  
00007ff67286f000 12 0 0 ----- [ anon ]  
00007ff672872000 1016 24 24 rwx-- [ anon ]  
00007ff672970000 12 0 0 ----- [ anon ]  
00007ff672973000 1016 24 24 rwx-- [ anon ]  
...  
top  
Mem: 132093140k total, 128645860k used, 3447280k free, 413200k buffers  
Swap: 2096472k total, 2596k used, 2093876k free, 122750144k cached  
PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ SWAP CODE DATA nFLT nDRT COMMAND  
21827 postgres 15 0 3626m 2.1g 2.0g S 15.5 1.6 10:20.94 1.5g 3072 32m 0 0 postgres  
19638 postgres 15 0 3626m 2.1g 2.0g S 14.5 1.6 14:03.23 1.5g 3072 32m 0 0 postgres  
27306 postgres 15 0 3618m 2.1g 2.0g R 11.6 1.6 9:34.90 1.5g 3072 24m 0 0 postgres  