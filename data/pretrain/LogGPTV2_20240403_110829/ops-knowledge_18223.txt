Certainly! Here’s a more polished and detailed version of your text:

---

I have encountered a core dump on a Linux system. The process seems to be excessively allocating memory, and I need to identify at least which library or module is causing this issue.

Could you recommend a tool that can provide a broad overview of where the memory is being allocated? I understand that fully solving this problem might be challenging, but any tool that can offer some clues would be very helpful.

**Additional Information:**
- The process is a Python application.
- The suspicion is that the excessive memory allocations are caused by one of the custom modules written in C.

**Assistant:**
I recommend using the `perf` tool on the Python process with callgraph (stack trace) enabled. This will help you trace the function calls and identify the source of the memory allocation.

If the process is multi-threaded, make sure to include all associated Lightweight Processes (LWPs) as arguments when running the `perf` command.

Here’s an example command to get you started:
```sh
sudo perf record -g -p <PID> --call-graph dwarf
```
Replace `<PID>` with the process ID of your Python application. After recording, you can analyze the data with:
```sh
sudo perf report
```

This should give you a detailed view of the call stack and help pinpoint the problematic library or module.

---

Feel free to let me know if you need further assistance!