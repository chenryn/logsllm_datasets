UPDATE 0  
Time: 0.236 ms  
```  
copy 支持  
```  
postgres=# copy (select generate_series(1,10000)) to '/tmp/test';  
COPY 10000  
Time: 2.055 ms  
postgres=# copy test from '/tmp/test';  
COPY 10000  
Time: 3.411 ms  
postgres=# select count(*) from test;  
 count   
-------  
     0  
(1 row)  
Time: 0.512 ms  
```  
### 黑洞性能测试  
```  
vi test.sql  
insert into test select generate_series(1,1000);  
```  
```  
pg12@pg11-test-> pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 120  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 64  
number of threads: 64  
duration: 120 s  
number of transactions actually processed: 26692255  
latency average = 0.287 ms  
latency stddev = 0.014 ms  
tps = 222423.280053 (including connections establishing)  
tps = 222445.784854 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.241  insert into test select generate_series(1,1000);  
```  
每秒约写入2.22亿行。  
非批量如下：   
```
transaction type: ./test.sql
scaling factor: 1
query mode: prepared
number of clients: 64
number of threads: 64
duration: 120 s
number of transactions actually processed: 144621367
latency average = 0.053 ms
latency stddev = 0.006 ms
tps = 1205028.340511 (including connections establishing)
tps = 1205182.864303 (excluding connections establishing)
statement latencies in milliseconds:
         0.045  insert into test values (1);
```
### RULE与触发器测试  
1、RULE on 黑洞表测试  
```  
postgres=# truncate test1;  
postgres=# create rule r1 as on insert to test do also insert into test1 values (new.*);  
CREATE RULE  
postgres=# insert into test values (1);  
INSERT 0 1  
postgres=# select count(*) from test;  
 count   
-------  
     0  
(1 row)  
postgres=# select count(*) from test1;  
 count   
-------  
     1  
(1 row)  
```  
2、trigger on 黑洞表测试  
```  
postgres=# drop rule r1 ON test ;  
DROP RULE  
```  
```  
postgres=# create or replace function tg() returns trigger as $$  
declare  
begin  
  insert into test1 values (new.*);   
  return new;  
end;  
$$ language plpgsql strict;  
CREATE FUNCTION  
```  
```  
postgres=# create trigger tg1 before insert on test for each row execute function tg();  
CREATE TRIGGER  
```  
```  
postgres=# insert into test values (2);  
INSERT 0 1  
postgres=# select * from test;  
 id   
----  
(0 rows)  
postgres=# select * from test1;  
 id   
----  
  1  
  2  
(2 rows)  
```  
因为仅结构存在，after trigger返回NULL。  
```  
postgres=# drop trigger tg1 ON test ;  
DROP TRIGGER  
postgres=# create trigger tg1 after insert on test for each row execute function tg();  
CREATE TRIGGER  
postgres=# insert into test values (3);  
INSERT 0 1  
postgres=# select * from test1;  
 id   
----  
  1  
  2  
(3 rows)  
```  
## 黑洞引擎应用  
例如  
演练，真实数据引流  
遇到攻击时，吸引流量，每秒可吸引2.22亿行写入流量（批量，非批量约120万行/s写入流量） .    
测试  
...  
PG 12开放am后，未来会看到更多的PG存储引擎的加入，例如列存。  
## 参考  
https://github.com/michaelpq/pg_plugins/tree/master/blackhole_am  
[《PostgreSQL 基于access method api的列存zedstore》](../201905/20190531_03.md)    
[《PostgreSQL 12 preview - 意义重大改进：增加一层access manager API - 支持 TABLE、INDEX AM(access method) - 为storage  pluggable 开路》](../201903/20190331_03.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")