    if found then  
      update train_bucket set sit_bit = set_bit(sit_bit, strpos(sit_bit::text,'0')-1, 1), sit_remain = sit_remain-1  
        where current of curs1;  
      GET DIAGNOSTICS v_row = ROW_COUNT;  
      if (v_row = 1) then  
        close curs1;  
 exit;  
      end if;  
    else   
      close curs1;  
      exit;  
    end if;  
  end loop;  
  if v_row = 1 then  
    insert into train_sit(tid,tbid,sit_no,station_bit)  
    values (  
      v_train_id,   
      v_train_bucket_id,   
      o_sit_no,  
      bitsetvarbit(repeat('0', v_station_len-1)::varbit, v_from_station_idx-1, v_to_station_idx-v_from_station_idx, 1)  
      );  
    o_order_status := true;  
    return;  
  else  
    o_order_status := false;  
    return;  
  end if;  
  exception   
  when others then  
    o_order_status := false;  
    return;  
end;  
$$ language plpgsql;  
```
测试 :   
```
digoal=# select * from buy('D645','杭州南','宜春','2013-01-20');  
 i_train_num | i_fstation | i_tstation | i_go_date  | o_slevel | o_bucket_no | o_sit_no | o_order_status   
-------------+------------+------------+------------+----------+-------------+----------+----------------  
 D645        | 杭州南     | 宜春       | 2013-01-20 | 一等座   |       35356 |        9 | t  
(1 row)  
```
## 压力测试
```
vi test.sql  
select * from buy('D645','上海南','长沙','2013-01-20');  
```
不加nowait测试结果 :   
```
ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -n -r -c 16 -j 8 -T 1200 -U postgres digoal  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 8  
duration: 1200 s  
number of transactions actually processed: 2197407  
tps = 1831.143708 (including connections establishing)  
tps = 1831.169308 (excluding connections establishing)  
statement latencies in milliseconds:  
        8.734424        select * from buy('D645','上海南','长沙','2013-01-20');  
```
加nowait测试结果 :   
```
ocz@db-172-16-3-150-> pgbench -M prepared -f ./test.sql -n -r -c 16 -j 16 -T 12 -U postgres digoal  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 16  
duration: 12 s  
number of transactions actually processed: 93632  
tps = 7800.056248 (including connections establishing)  
tps = 7818.803904 (excluding connections establishing)  
statement latencies in milliseconds:  
        2.042862        select * from buy('D645','上海南','长沙','2013-01-20');  
```
## 小结
1\. 需要解决更新热点, 降低等待, 提高并行处理几率.   
    本例的热点在 :   
```
update train_bucket set sit_bit = set_bit(sit_bit, strpos(sit_bit::text,'0')-1, 1), sit_remain = sit_remain-1  
   where current of curs1;  
```
以及  
```
 update train_sit set station_bit=bitsetvarbit(station_bit, v_from_station_idx-1, v_to_station_idx-v_from_station_idx, 1)   
    where current of curs2;  
```
对应的游标  :  
```
  open curs2 for select tid,tbid,sit_no from train_sit  
    where (station_bit & bitsetvarbit(repeat('0', v_station_len-1)::varbit, v_from_station_idx-1, v_to_station_idx-v_from_station_idx, 1)) = repeat('0', v_station_len-1)::varbit   
    and station_bit <> repeat('1', v_station_len-1)::varbit  
    -- and ctid not in (select locked_row from pgrowlocks('train_sit')) -- 耗时约300毫秒, 用它来解决热点锁等待不划算.  
    limit 1  
    for update;  
```
以及  
```
  open curs1 for select id, tid, strpos(sit_bit::text,'0'), sit_level, bno from train_bucket   
    where sit_remain>0  
    -- and ctid not in (select locked_row from pgrowlocks('train_bucket')) -- 耗时约300毫秒, 用它来解决热点锁等待不划算.  
    limit 1   
    for update;  
```
解决的关键在这里.  
如果不能解决热点的问题, 那就提高处理速度, 精简字段数量和长度, 精简索引. 提高更新速度.  
2\. 减少数据扫描的量.  
    partial index, 避免满座车厢的扫描, 以及全程占位位子的扫描.  
3\. 先查bucket 是否空闲, 再查sit是否空闲.   
4\. 还需要考虑优先级的问题 :   
例如有111000和111100两个位子, 如果请求要最后两个站的票, 应该优先匹配111100, 这样更不容易浪费。如下 :   
```
111000 | 000011 = 111011  
111100 | 000011 = 111111  
```
## 参考
1\. setbitvarbit  
http://blog.163.com/digoal@126/blog/static/163877040201302192427651/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")