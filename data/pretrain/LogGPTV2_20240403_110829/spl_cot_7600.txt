User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
使用 addinfo 指令获取搜索时间信息，以 inputlookup 搜索举例过滤昨天以后的内容。

## SPL 语句
| inputlookup incident_review_lookup| addinfo| eval yesterday=relative_time(now(), "-1d@d")| where (time >= yesterday && time <= info_maxtimestamp)

## 具体解释

Assistant: 这段 SPL（Search Processing Language）语句主要用于查询和分析日志数据。具体分析如下：

### 分析需求阶段

1. **获取搜索时间信息**：需要利用`addinfo`指令来获取当前搜索的时间信息。这个信息主要用于后续的时间范围过滤。
2. **使用 inputlookup 进行过滤**：使用`inputlookup`指令搜索特定内容，如举例中提到的过滤昨天以后的内容。这里可以理解为一个数据源或者数据过滤条件。

### SPL 语句解读阶段

#### `inputlookup incident_review_lookup`

使用`inputlookup`命令导入一个名为`incident_review_lookup`的数据集或查询。这可能是一个外部数据文件，也可能是日志易内部保存的数据表。通过这个命令，用户可以从外部或内部的数据集中引入查询所需要的数据。

#### `addinfo`

`addinfo`命令是用于获取或设置日志易内部时间戳和其他搜索信息。在接下来的计算中，它帮助生成和加入到查询环境中时间相关的变量或信息。

#### `eval yesterday=relative_time(now(), "-1d@d")`

这里使用`eval`命令计算一个新的字段`yesterday`，它的值是通过`relative_time`函数得到的。`relative_time`函数用于计算相对于当前时间的时间点。这里计算的是当前时间的前一天（"-1d@d"表示一天前的时间点）。`now()`函数获取当前时间。计算完成后，`yesterday`字段会被用于接下来的时间范围过滤。

#### `where (time >= yesterday && time <= info_maxtimestamp)`

在`where`子句中，使用了时间范围的过滤条件。这个过滤条件限制了搜索结果的返回时间范围。`time >= yesterday`表示选择时间大于或等于前一天的内容，而`time <= info_maxtimestamp`则确保选择的内容不会超过当前查询的最大时间戳（`info_maxtimestamp`是一个内置变量，表示当前查询的最大时间戳）。

### 综合分析

整个SPL语句的逻辑是：首先通过`inputlookup`导入数据集，然后通过`addinfo`获取当前时间信息，接着计算昨天的时间点，最后通过`where`子句过滤出昨天及之前但不超过当前查询最大时间戳的日志记录。

这样的查询逻辑满足了分析需求中提到的“获取搜索时间信息”和“使用 inputlookup 搜索举例过滤昨天以后的内容”的要求。通过这样的查询，用户可以方便地分析出昨天以及更早时间段的日志数据，并对其进行进一步的分析和可视化展示。