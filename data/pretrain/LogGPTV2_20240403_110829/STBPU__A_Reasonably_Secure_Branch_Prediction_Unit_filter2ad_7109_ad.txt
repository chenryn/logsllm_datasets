Tstruct: Entry tag bit entropy
Ostruct: Entry offset bit entropy
Ωstruct: Entry target bit entropy Q EQ: Entry stored for arbitrary branch Q
A: Branch in attacker(A)’s address space
V : Branch in victim(V)’s address space
ϕa/v: A/V target encryption token
τQ: Target of arbitrary branch Q
TABLE III: Parameters used in STBPU analysis
A. Analysis of Branch Predictor Attacks under STBPU
An attacker possessing knowledge of their ST (ψ/ϕ) voids
the security provided by the STBPU because they can de-
terministically generate outputs with any of the remapping
functions used by the STBPU. Before we discuss how STBPU
affects attacks on BPU, we show the parameters for security
analysis in Table III and list several important axioms below:
A1 Attackers do not know the numerical outputs of R1..4,t,p.
A2 Due to A1, all the current state of the STBPU must come
from detection of mispredictions and evictions.
A3 Attacker does not have inherent knowledge or control of
ST of any process.
that we encrypt
1) Target Injection Attacks: Recall
the
targets stored in the BTB and RSB through the following
means: EA = ϕa ⊕ τA. With Spectre V2,
the attacker
supplies a malicious τA using branch A that collides with
the victim’s branch V causing V to speculate with τA. With
the SpectreRSB, the attacker places a malicious return address
τA on the stack that the victim speculates with. In both cases,
the target the victim will use from the STBTB or STRSB
is now τV = ϕa ⊕ τA ⊕ ϕv. If there is a Spectre gadget
located in the victim’s address space at address G, the attack
the attacker does
is successful
not have knowledge or control of ϕa or ϕv; consequently,
the only variable the attacker can change is the address of
τA to make τV = G. The probability that τA results in
1
τV = G is
ΩST RSB . As such, the attacker must
execute ΩST BT B
different τA values to have a 50%
chance of successfully executing their target injection attack.
Each incorrect τA will result in the misprediction counter
decrementing towards zero.
if τV = G. Due to A3,
ΩST BT B or
or ΩST RSB
1
2
2
I )( 1
2) Reuse-based Attacks: Address mappings are randomized
so that there is only a probability that an arbitrary A and V will
collide in the STBPU. Even though A and V are mapped with
R1..4,t,p, the probability that attacker branch A collides with
victim branch V in the STBTB/STPHT is not bound by birth-
day attack complexity because V is a static, speciﬁc address.
The probability of collision is P (A ⇒ V ) = ( 1
T O ). Note,
we break up the probability that A and V are in the same set
vs. the probability that A and V have matching tag and offsets
because tag/offset comparisons are only done if A and V are
in the same set. This adds uncertainty for reuse-based side
channels where the attacker wishes to determine the direction
of V since a lack of misprediction by A or V could mean that
A and V do not collide, or that V was not taken. To increase
the probability that an arbitrary A collides with a static V ,
the attacker can execute a set of branches SB = {b1, ..., bn}
where n is large so that one branch in SB might collide with
V . The probability that one of the branches in S collides with
V is P (SB ⇒ V ) =
⇒ V ). However, noise
is added using this method because it is possible that branches
in SB will collide with each other. The probability that two
branches in SB collide can be approximated with birthday
attack complexity because the branches in SB are arbitrary.
i=1 P (SBi
(cid:3)n
In order to ensure that no branches in SB collide with any
other branch in SB, the attacker execute the following steps:
i) Choose a new branch bnew with a new address in attacker’s
address space. ii) For every branch bi in SB, execute bi and
bnew. iii) If no MISP. between bi and bnew, SB = SB∪{bnew}.
In order to achieve a 50% probability of collision between A
and a branch in SB, the size of SB must be IT O
2 . The number
of MISPs M and evictions E generated whilst generating SB
of size n = IT O
2
j=i(cid:2)
M ≈ n(cid:2)
E ≈ IT O
2
Note the reuse-based side channel attacks on PHT do not
generate evictions. The size of the STBTB is IW which is
signiﬁcantly smaller than IT O
2 , so entries in the BTB will
constantly be evicted as the attacker grows SB.
can be approximated as follows:
1(cid:4)
n(n + 1))
π
π
π
2 I
2 T O
− IW
2 I · (cid:4)
1(cid:4)
π
2 T O
(cid:4)
(2)
i=0
j=0
=
2
·
it
Attacks such as BranchScope [21] and BlueThunder [26] are
viable against processors using hybrid directional predictors
largely due to the inclusion of a base directional predictor in
these hybrid BPUs. Due to the complexity of TAGE tables
and Perceptron weights,
is signiﬁcantly easier to mali-
ciously modify the base directional predictor than the complex
TAGE/Perceptron structures. Since the remapping mechanisms
used in our TAGE/Perceptron structures are different than the
remapping functions used for the base directional predictor,
little information is gained by an attacker observing mispredic-
tions from both the base and complex directional components.
Due to A1, an attacker will not know which TAGE bank or
Perceptron weight set produced a prediction. The thresholds
for re-randomization stemming from mispredictions from the
directional predictor are based on the least complex attack
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
115
on the directional predictor. More complex attacks will be
affected by re-randomization to a greater extent.
3) Same Address Space Attacks: Recently discovered same
address space attacks [78] are classiﬁed as target injection
attacks, but in this case both A and V are located inside the
attacker’s address space. As such, encrypting the target of A
with ϕa provides no security because V will decrypt τA with
ϕa. However, due to Ri, there is only a probability that A and
V will collide; this probability is the same as for reuse-based
attacks. Therefore, the number of mispredictions and evictions
generated while performing a same address space attack are
also approximated by Equation (2).
4) Eviction-based Attacks: The attacker cannot determin-
istically create BTB eviction sets without knowing ψa since
address mappings change when ψa is re-randomized. With
Wstbtb ways, detecting an eviction in an arbitrary set requires
Wstbtb +1 colliding branches (same index, different tag and/or
offset). The attacker wants to ﬁll STBTB sets so that if V
is executed, it disturbs one of the attacker’s primed sets. To
increase the chances that V will enter a primed set, the attacker
must prime as many sets as possible. Assuming the ideal case
when the attackers does not have conﬂicts between their own
branches, they need to cover P ∗I sets to achieve P probability
of a successful attack. For example, the probability that A
enters the same set as a static V is 1
I , so to have a50%
chance of priming the set V enters, the attacker must prime
I
2 sets. Na¨ıvely, the probability of randomly guessing Wstbtb
branches to form a single set of branches Se that enters the
same STBTB set is:
1
P (Se) =
I Wstbtb−1
(3)
Since this probability is not favorable, the attacker could
apply a fast algorithm GEM [59] to construct every eviction
set. The attackers uses GEM because bottom-up strategies like
PPP becomes less efﬁcient without a partitioned randomized
structure [57] or speciﬁc cache conditions [9, 13, 69]. We
assume the ideal scenario for the attacker is when most of
the branches tested follow a perfect uniformity. In this case,
given a particular branch, the probability to have W branches
belonging to the same set is directly related to the total number
of test entries. For instance, there is a 50% probability that
in a group of IW
branches that at least W branches share
2
the same index. Thus, in order to achieve P attack rate, the
attacker needs to test at least P IW branches as the initial set
since the total attack lines in L in GEM. (E.g., L >44 for an
efﬁcient GEM in [59]). With the original setting in GEM, the
attacker sets the group size G = W + 1 and starts to eliminate
groups of branches. Although the total branch accesses will be
approximately 2.3·W ·L, the total eviction number will be less
as the majority of the probe during each iteration will be hit.
Since the probability that each group will produce an eviction
is approximately equal to 1− 1/e. The evictions generated by
e · n since the total
testing will be negligible as (W + 1)· 1− 1
rounds n for GEM converge on the list of conﬂicting lines
are relatively small. However, when ﬁrst placing L branches,
the attacker has to trigger the same amount of evictions.
Summarizing the procedure to construct required eviction sets
above, we can now approximate evictions numbers generated
whilst building sets for P attack rate as follows:
E ≈ P I × (P IW + (W + 1)× (1 − 1
e
) × 3)
5) Re-randomization Thresholds for Baseline Model:
(4)
STBPU has the same parameters as the baseline Intel Skylake
BPU. The BTB has 8 ways and 512 sets. The stored entries
have a compressed 8-bit tag and a 5 bit offset. The PHT
has 1 way and 214 sets. Using Equation 2, the number of
mispredictions and evictions an attacker will trigger before a
successful reuse-based side channel attack on BTB is 6.9×108
and ≈ 221, respectively. Correspondingly, for a PHT reuse-
based side channel, the number of triggered mispredictions
is ≈ 8.38 × 105. For a BTB eviction-based side channel,
2 or 5.3 × 105
the average number of triggered evictions is I
per Equation 4. For Spectre V2 and SpectreRSB, the number
of triggered mispredictions is ≈ 231. To prevent attacks, we
use the lowest misprediction and eviction thresholds as the
upper bounds for re-randomization of ST when evaluating the
performance of STBPU.
6) Denial-of-Service Attack on STBPU: While the primary
goal of a typical attacker is to reveal some sensitive data
via a side channel or speculative execution attack, they can
also attempt to perform a denial-of-service (DoS) attack. In
this attack, the goal is to cause an abnormal slowdown of a
victim process by triggering excessive branch mispredictions.
We consider two DoS attack scenarios:
i) Eviction-based:
attacker attempts to evict from BPU data associated with a
branch that is critical for the victim’s performance. ii) Reuse-
based: attacker ﬁlls BTB with bogus data hoping to make the
victim speculatively execute code at a wrong address causing a
delay due to the recovery from incorrect speculative execution.
On high level, STBPU makes both of these attacks more
challenging because they rely on branch instruction collisions
which are difﬁcult to create in STBPU. Now we will discuss
each attack in more detail.
STBPU cannot eliminate the possibility of the ﬁrst attack
because, in STBPU, internal data structures such as BTB re-
main to be shared. However, the attack becomes more difﬁcult
to carry out with STBPU. Since the victim and attacker are
guaranteed to use different STs, the attacker must default to a
brute force. Due to unknown branch-to-BTB mappings, ﬁnding
eviction sets becomes a difﬁcult task. Since BTB is a set-
associative structure, to guarantee eviction of a certain entry,
the attacker needs to ﬁnd n branches mapped into the same
set, where n is the number of ways in BTB. Since the attacker
is blind, the attacker must rely on constantly executing a large
number of branches hoping to evict the victim’s entries.
The second attack is very difﬁcult in the case of STBPU.
In order to cause a hit in BTB, the attacker’s and victim’s
branches need to have the same index, tag, and offset after
they are remapped by STBPU mechanisms with different STs.
Based on our analysis above, such an event is unlikely to
happen. Moreover, because the stored address is encrypted
with the ST of a different process,
the predicted address
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
116
would most likely point to an invalid address. Thus, erroneous
speculative execution would not happen.
VII. EVALUATION OF STBPU DESIGN
Evaluating BPU design under realistic conditions is a chal-
lenging task. Sharing BPU resources creates various possi-
bilities for branch conﬂicts that affect prediction accuracy.
Moreover, some BPU protection mechanisms (e.g., Intel’s
IBRS) are triggered by system events such as mode and
context switches. BPU resources need to be ﬂushed upon
context/mode switches to avoid BPU training or state leakage
between user and kernel processes. workloads that involve fre-
quent system calls and interrupts may experience performance
degradation and negatively affect other programs executing
on the same core. In this situation, standard benchmark suits
that are typically compute-bound and do not trigger frequent
library calls, mode and context switches may not accurately
evaluate BPU performance effects. Thus, a good evaluation
environment needs to capture system-wide events and include
real applications. A trace-based simulation is a logical choice
for this. Meanwhile, the complex performance side effects
caused by branch mispredictions and evictions require detailed
performance data (e.g., IPC) using a cycle accurate simulator.
To address both the abovementioned aspects, we evaluate
STBPU using two simulation frameworks.
First, we utilize the Intel processor trace (PT) technology
to collect
large amounts of branch instruction traces cap-
tured from different workloads within the same CPU physical
core, including user applications that cause frequent mode
switches and context switches and the SPEC benchmarks.
These traces then will be passed through an in-house BPU
simulator with the BPU baseline found in the Intel Skylake
processor. The simulator also runs different secure models
such as STBPU and reports prediction accuracy. Secondly, to
evaluate ﬁne-grained microarchitectural performance effects,
we implemented the STBPU mechanisms inside gem5 [8] and
conducted simulations in syscall-emulation (SE) mode using
DerivO3CPU model with conﬁgurations that mimic similar
modern processors. The detailed conﬁguration is listed in Ta-
ble IV. All gem5 simulations were performed simulating 110
million instructions with a warm-up of 10 million instructions.
Single thread: X86-64, 3.4GHz; SMT: Alpha, 3.4GHz
ISA
BPU
Core 8-issue, OoO, IQ/LQ/SQ entries: 64/32/32, ROB: 192, ITLB/DTLB: 64/64
Cache L1-I/L1-D: 32KB/32KB both 8-way, L2: 256KB 4-way, LLC: 4MB 16-way
BTB entries: 4096, 8-way, RAS size: 16
TABLE IV: Parameters used in gem5 simulation
A. Re-randomization Threshold
In Section VI, we demonstrate the misprediction and evic-