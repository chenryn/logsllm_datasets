𝑖=1
F Proof of Theorem 4
SE3[KD,𝛱](𝒜) with
Consider games 𝐺1–𝐺4 in Fig. 19 and Fig. 20. Game 𝐺1 corresponds to game Gnoae2
challenge bit 𝑏 = 1. In game 𝐺1, each user 𝑖 has a corresponding key 𝐾𝑖, but in game 𝐺2, we sample
a uniformly random function 𝑓𝑖 : {0, 1}𝑠 → {0, 1}𝑘 ×{0, 1}ℓ, and for each call to KD(𝐾𝑖,·), we make
a corresponding call to 𝑓𝑖(·) instead.
Game 𝐺3 is similar to game 𝐺2, but in each encryption query for user 𝑖 and nonce 𝑁 = (𝑅, 𝑃)
that results in a call 𝐶 ← E𝐿(𝑁*, 𝐴, 𝑀), we store the tuple (𝑖, 𝑅, 𝑁*, 𝐴, 𝐶) in a table. On the
other hand, each time we are supposed to check if D𝐿(𝑁*, 𝐴, 𝐶) ̸= ⊥ for a user 𝑖 under nonce
𝑁 = (𝑅, 𝑃), if there is already a prior tuple (𝑖, 𝑅, 𝑁*, 𝐴, 𝐶) then we simply return true. Otherwise
we will indeed call D𝐿(𝑁*, 𝐴, 𝐶).
Game 𝐺4 is similar to game 𝐺3, but for each call 𝐶 ← E𝐿(𝑁*, 𝐴, 𝑀), we instead pick a truly
random 𝐶 of the same length. Moreover, for each call D𝐿(𝑁*, 𝐴, 𝐶), we instead use ⊥ as the
answer. Thanks to the restriction on the behavior of the adversary, any call to the Dec oracle must
eventually end up with a call to D instead of looking up prior tuples from encryption queries.
As a result, any Dec query will result in a false-answer. Hence game 𝐺4 coincides with game
SE3[KD,𝛱](𝒜) of challenge bit 𝑏 = 0, and thus
Gnoae2
Advnoae2
SE3[KD,𝛱](𝒜) = Pr[𝐺1(𝒜)] − Pr[𝐺4(𝒜)] .
We now bound the gap between each pair of consecutive games. Consider the following adversary ℬ′
attacking the (muti-user) PRF security of KD. It runs 𝒜 and simulates game 𝐺1, but for each call
to KD(𝐾𝑖,·), it instead uses its oracle Eval(𝑖,·). Thus
Pr[𝐺1(𝒜)] − Pr[𝐺2(𝒜)] = Advprf
KD(ℬ′) .
36
procedure Initialize//Games 𝐺1, 𝐺2
𝐾1, 𝐾2,··· ←$ 𝒦; 𝐽1, 𝐽2,··· ← 0
𝑓1, 𝑓2,··· ←$ Func({0, 1}𝑠,{0, 1}𝑘 × {0, 1}ℓ)
procedure Enc.init(𝑖, 𝑁)
(𝑅, 𝑃 ) ← 𝑁; 𝐽𝑖 ← 𝐽𝑖 + 1; 𝑗 ← 𝐽𝑖
(𝐿, 𝑋) ← KD(𝐾𝑖, 𝑅) //For game 𝐺1 only
(𝐿, 𝑋) ← 𝑓𝑖(𝑅) //For game 𝐺2 only
𝑃 * ← 𝑃 ⊕ 𝑋; 𝑆𝑖,𝑗 ← (𝐿, 𝑁, 𝑃 *, 1); return 𝐽𝑖
procedure Enc.next(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑁, 𝑃 *, 𝑟) ← 𝑆𝑖,𝑗; 𝐶 ← E𝐿(⟨𝑃 *, 𝑟, 0⟩, 𝐴, 𝑀)
𝑆𝑖,𝑗 ← (𝐿, 𝑁, 𝑃 *, 𝑟 + 1); return 𝐶
procedure Enc.last(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑁, 𝑃 *, 𝑟) ← 𝑆𝑖,𝑗; 𝐶 ← E𝐿(⟨𝑃 *, 𝑟, 1⟩, 𝐴, 𝑀)
𝑆𝑖,𝑗 ← ⊥; return 𝐶
procedure Dec(𝑖, 𝑁, 𝐴, 𝐶,ℐ, 𝑎)
if |𝐴| ̸= |𝐶| then return false
(𝑅, 𝑃 ) ← 𝑁; 𝑚 ← |𝐶|
(𝐿, 𝑋) ← KD(𝐾𝑖, 𝑅) //For game 𝐺1 only
(𝐿, 𝑋) ← 𝑓𝑖(𝑅) //For game 𝐺2 only
𝑃 * ← 𝑃 ⊕ 𝑋
for 𝑟 ← 1 to |ℐ| do
if (︀D𝐿(⟨𝑃 *, 𝑗, 0⟩, 𝐴[𝑗], 𝐶[𝑗]) = ⊥)︀ then return false
𝑗 ← ℐ[𝑟]; if 𝑗 > 𝑚 or 𝑗  𝑚 or 𝑗 < 1 then return false
if (𝑎 = 0 or 𝑗 < 𝑚) then
if Look(𝑖, 𝑅,⟨𝑃, 𝑗, 0⟩, 𝐴[𝑗], 𝐶[𝑗]) = false then
elsif Look(𝑖, 𝑅,⟨𝑃, 𝑚, 1⟩, 𝐴[𝑚], 𝐶[𝑚]) = false then
return false
return false
return true
private procedure Look(𝑖, 𝑅, 𝑁*, 𝐴, 𝐶)
if Tab[𝑖, 𝑅, 𝑁*, 𝐴, 𝐶] ̸= ⊥ then return true
(𝐿, 𝑋) ← 𝑓𝑖(𝑅); 𝑀 ← D𝐿(𝑁*, 𝐴, 𝐶)
𝑀 ← ⊥ //For game 𝐺4 only
return (𝑀 ̸= ⊥)
procedure Finalize(𝑏′)
return (𝑏′ = 1)
Fig. 20: Games 𝐺3 and 𝐺4 in the proof of Theorem 4. Each game maintains an internal
procedure Look.
Next, in game 𝐺3, for each table look-up Look(𝑖, 𝑅, 𝑁*, 𝐴, 𝐶) with 𝑁* = ⟨𝑃, 𝑗, 𝑎⟩, the triple
(𝑖, 𝑅, 𝑁*) uniquely determines the user 𝑖, nonce 𝑁 = (𝑅, 𝑃), and counter 𝑗. Since 𝒜 is nonce-
respecting, the table look-ups do not return false positives. Thanks to the correctness of the con-
37
ventional AE scheme 𝛱,
Pr[𝐺2(𝒜)] = Pr[𝐺3(𝒜)] .
Finally, consider the following adversary ℬ attacking 𝛱. It runs 𝒜 and simulates game 𝐺3, but
with the following differences.
– First, instead of eagerly sampling a function 𝑓𝑖 for each user 𝑖, adversary ℬ lazily implements 𝑓𝑖.
That is, each time it has to evaluate 𝑓𝑖(𝑅), if this is the first time it has to do this evaluation,
it picks 𝐿 ←$ {0, 1}𝑘 and 𝑋 ←$ {0, 1}ℓ, stores the pair (⟨𝑖, 𝑅⟩, 𝐿, 𝑋), and returns (𝐿, 𝑋) as the
answer, where ⟨𝑖, 𝑅⟩ is a unique encoding of (𝑖, 𝑅) as an integer. Otherwise, if there is already
some pair (⟨𝑖, 𝑅⟩, 𝐿, 𝑋) then it simply returns (𝐿, 𝑋) as the answer.
– Next, for each call E𝐿(𝑁*, 𝐴, 𝑀) for a user 𝑖 under nonce 𝑁 = (𝑅, 𝑃), it instead calls
Enc(⟨𝑖, 𝑅⟩, 𝑁*, 𝐴, 𝑀). Likewise, for each call D𝐿(𝑁*, 𝐴, 𝐶) for a user 𝑖 under nonce 𝑁 = (𝑅, 𝑃),
it calls Dec(⟨𝑖, 𝑅⟩, 𝑁*, 𝐴, 𝐶).
– Finally, ℬ keeps track of how many times an effective nonce prefix 𝑃 * appears among (partial)
encrypted streams. If there is some 𝑃 * that appears for 𝑑 = max{4ℓ, 4𝑞/2ℓ} streams then it
terminates immediately, outputting 1. This step can be implemented in linear time via a hash
function. This termination ensures that ℬ is 𝑑-repeating.
Thanks to the table look-ups in game 𝐺3, adversary ℬ does not make prohibited queries to the
decryption oracle. We claim that for each encryption query Enc(⟨𝑖, 𝑅⟩, 𝑁*, 𝐴, 𝑀) with 𝑁* =
⟨𝑃 *, 𝑗, 𝑎⟩, the pair (⟨𝑖, 𝑅⟩, 𝑁*) uniquely determines the user 𝑖 and nonce 𝑁 = (𝑅, 𝑃) and counter 𝑗.
This implies ℬ is nonce-respecting, as long as 𝒜 is nonce-respecting. To justify this claim, assume
to the contrary that there are two encryption queries that end up with the same pair (⟨𝑖, 𝑅⟩, 𝑁*),
with 𝑁* = ⟨𝑃 *, 𝑗, 𝑎⟩. Let (𝐿, 𝑋) ← 𝑓𝑖(𝑅), and let 𝑃 ← 𝑃 * ⊕ 𝑋. These two queries belong to
the same user 𝑖, have the same nonce 𝑁 = (𝑅, 𝑃), and use the same counter 𝑗, which leads to a
contradiction if 𝒜 is nonce-respecting.
𝛱(ℬ). Suppose that 𝑐 = 1. If ℬ does not terminate prematurely
Let 𝑐 be the challenge bit of game Gae
then it perfectly simulates game 𝐺3(𝒜). Otherwise, it will always output 1, which is the correct
answer. Hence
Pr[Gae
𝛱(ℬ) ⇒ true | 𝑐 = 1] ≥ Pr[𝐺3(𝒜)] .
We claim that
Subtracting, we get
Summing up,
Pr[Gae
𝛱(ℬ) ⇒ false | 𝑐 = 0] ≤ Pr[𝐺4(𝒜)] + 2−ℓ .
(14)
Advae
𝛱(ℬ) ≥ Pr[𝐺3(𝒜)] − Pr[𝐺4(𝒜)] − 2−ℓ .
Advnoae2
SE3[KD,𝛱](𝒜) = Pr[𝐺1(𝒜)] − Pr[𝐺4(𝒜)]
3∑︁
𝑖=1
=
Pr[𝐺𝑖(𝒜)] − Pr[𝐺𝑖+1(𝒜)] ≤ Advprf
KD(ℬ′) + Advae
𝛱(ℬ) + 2−ℓ .
𝛱(ℬ) is 0. If ℬ does not termi-
To justify Eq. (14), assume that the challenge bit 𝑐 of game Gae
nate prematurely then it perfectly simulates game 𝐺4(𝒜). Thus the gap between the probabilities
𝛱(ℬ) ⇒ false | 𝑐 = 0] and Pr[𝐺4(𝒜)] is at most the probability that ℬ terminates prema-
Pr[Gae
turely, assuming that 𝑐 = 0. View ℬ as playing a balls-into-bins game. For each (partial) en-
crypted stream, we view it as throwing a ball to bin 𝑃 *, where 𝑃 * is the effective nonce prefix. Let
38
𝑑 = max{4ℓ, 4𝑞/2𝑛}. Our goal is to prove that the chance that some bin contains at least 𝑑 balls is
at most 2−ℓ.
Note that ℬ’s queries are generated by 𝒜, and the latter only receives truly random strings or ⊥
that are independent of the effective nonce prefixes. In other words, ℬ’s queries are non-adaptively
generated. For 𝑑 balls that ℬ throws, if there are two of them that belong to the same (𝑖, 𝑅) then
they can’t go to the same bin. If none of them belongs to the same (𝑖, 𝑅) then the 𝑑 corresponding
nonce prefixes are independent, uniformly random strings, and thus the chance that those balls go
to the same bin is 2(1−𝑑)ℓ. While Lemma 2 is stated for uniformly thrown balls, its proof only needs
the hypothesis that for any 𝑑 balls, the chance that they go to the same bin is at most 2(1−𝑑)ℓ. Thus
our goal above is a direct result of the extended Lemma 2.
39