# Title: Capture and Replay: Reproducible Network Experiments in Mininet

## Authors
- Alexander Frömmgen†
- Denny Stohr*
- Jan Fornoff†
- Wolfgang Effelsberg*
- Alejandro P. Buchmann†

* Distributed Multimedia Systems, TU Darmstadt  
† Databases and Distributed Systems, TU Darmstadt  

Emails:  
- {froemmgen, buchmann}@dvs.tu-darmstadt.de  
- {dstohr, wolfgang.effelsberg}@cs.tu-darmstadt.de

## Abstract
Network emulations are widely used in the networking community. Mininet, a popular network emulator, allows running real Linux applications on an emulated network with specified static parameters such as topology, bandwidth, latency, and packet drop probabilities. While these static evaluations provide useful insights, real-world networks exhibit dynamically changing conditions, particularly in terms of bandwidth. This demo presents a system to capture and replay bandwidth traces in Mininet, allowing for more realistic and reproducible network experiments. Our infrastructure includes a Mininet extension for replaying bandwidth traces, a measurement Android app, and a graphical repository for managing bandwidth traces. We demonstrate this toolchain with examples of DASH and Multipath TCP experiments.

### CCS Concepts
- Networks → Network simulations

### Keywords
- Reproducible Research
- Bandwidth Replay
- Mininet

## 1. Introduction
Mininet [1] is widely used for reproducible network experiments, enabling the execution of unmodified Linux applications on an emulated network using the real Linux Kernel network stack. Traditional Mininet emulations specify static parameters such as bandwidth and latency (see Figure 1). However, real-world network conditions are highly dynamic due to factors like cross-traffic and varying physical layer conditions. To accurately develop and evaluate network mechanisms, it is crucial to reflect these dynamic conditions. 

In this demonstration, we present a system that captures bandwidth traces in real-world scenarios (see Figure 1) and replays them in Mininet. The system supports different access technologies and varying QoS characteristics, and can be deployed on mobile Android devices to capture traces while moving. We have extended Mininet to easily replay these traces, enabling reproducible network experiments with dynamic bandwidths. This approach has been shown to be effective for evaluating and improving network mechanisms, such as DASH video streaming [5]. Our toolchain also includes a graphical user interface for selecting and replaying captured traces. The main contributions of this work are:

1. A Mininet API to support changing bandwidths.
2. A Mininet API to replay bandwidth traces.
3. A capturing prototype integrated into an infrastructure for distributing, selecting, and deploying traces.

These contributions form a ready-to-use toolchain that facilitates the rapid adoption of capture and replay techniques in network research. The deep integration into Mininet allows for minimal code changes when using bandwidth traces in existing emulations.

### Related Work
Existing approaches to mimic varying network conditions often use competing cross-traffic, either generated by traffic generators or by replaying traces of captured cross-traffic. Capturing cross-traffic is often infeasible, requiring access to the bottleneck link, and generating traffic requires assumptions about traffic patterns and distributions. Network simulators provide models for (wireless) network links, but these approaches are orthogonal to our capture and replay method, which relies on experienced network conditions in the wild.

In the video streaming domain, replaying captured bandwidth traces is widely adopted. For example, Huang et al. [2] replay recorded network traces to evaluate their video streaming approaches, while Mueller et al. [3] use hand-made traces for DASH video streaming. These approaches use specialized replay solutions, making it difficult to reproduce or benefit from their results.

## 2. Approach

### Capture
Capturing realistic bandwidth traces is non-trivial, as measurements interact with the network. A constant active bandwidth measurement, for instance, does not capture initial connection delays in mobile networks or traffic shaping that allows short bursts. Additionally, transport protocols may be treated differently in the network. We propose using UDP for capturing, as it fills the network without additional congestion control. TCP might underestimate available bandwidth, especially in the presence of packet drops. For our first prototype, we use the existing measurement infrastructure of iperf. Future work will include more sophisticated measurement approaches, incorporating latency and packet drops, which require careful design due to the interaction between bandwidth and latency.

### Replay Mininet API
We extended Mininet to replay captured traces with just two lines of code (Listing 1).

```python
tc = prepareTC(id="-KGHLD5ID5lQvyJJ6bEF")
tc.startShaping(host, link)
```

Each captured trace is published in a central online repository and can be used by its ID. Our traffic shaping is based on `tc`, but unlike traditional Mininet, which resets `tc` for changing bandwidths, leading to artifacts, our extension allows smooth bandwidth changes. Although the replayed trace should precisely represent the captured situation, ensuring comparable behavior across replays is sufficient for most scenarios.

## 3. Demo

### Multipath TCP
Multipath TCP (MPTCP) is a TCP evolution that uses multiple subflows, e.g., on different network paths. Paasch et al. [4] analyzed MPTCP in an experimental design study with Mininet, but were limited to static bandwidths. Figure 2 shows a constant bitrate stream (8 Mbit/s) with MPTCP using a trace replay for the available bandwidth. Initially, subflow 1 provides enough bandwidth and is preferred due to a lower round trip time. Subflow 2 compensates for the reduced available bandwidth at 11 seconds.

### Video Streaming
Video streaming must cope with changing bandwidths. Dynamic Adaptive Streaming over HTTP (DASH) addresses fluctuating network conditions by downloading video segments of varying quality and size. Figure 2 shows how DASH consecutively downloads segments during changing bandwidths.

## 4. Outlook
Capture and replay is applicable to various network scenarios, enabling reproducible network experiments with changing bandwidths. Future work includes an in-depth analysis of the reproducibility and accuracy of capture and replay, and the integration of this feature into the default Mininet distribution. We also plan to extend the toolchain to support changing latencies and packet drops with more sophisticated and reliable measurement approaches.

## 5. Acknowledgment
This work was funded by the German Research Foundation (DFG) as part of projects C2 and C3 in the Collaborative Research Center (SFB) 1053 MAKI.

## 6. References
[1] N. Handigol, B. Heller, et al. “Reproducible Network Experiments Using Container-based Emulation”. In: CoNEXT. Nice, France: ACM, 2012, pp. 253–264.  
[2] T.-Y. Huang, N. Handigol, et al. “Confused, timid, and unstable: Picking a Video Streaming Rate is Hard”. In: IMC. New York, USA: ACM Press, 11/2012, p. 225.  
[3] C. Mueller, S. Lederer, et al. “Dynamic Adaptive Streaming over HTTP/2.0”. In: ICME. 07/2013, pp. 1–6.  
[4] C. Paasch, R. Khalili, and O. Bonaventure. “On the Benefits of Applying Experimental Design to Improve Multipath TCP”. In: CoNEXT ’13. 2013, pp. 393–398.  
[5] D. Stohr, A. Frömmgen, et al. “QoE Analysis of DASH Cross-Layer Dependencies by Extensive Network Emulation”. In: ACM SIGCOMM Internet-QoE. 2016.