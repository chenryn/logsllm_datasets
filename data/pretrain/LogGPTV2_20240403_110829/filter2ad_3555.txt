title:Capture and Replay: Reproducible Network Experiments in Mininet
author:Alexander Fr&quot;ommgen and
Denny Stohr and
Jan Fornoff and
Wolfgang Effelsberg and
Alejandro P. Buchmann
Capture and Replay:
Reproducible Network Experiments in Mininet
Alexander Frömmgen† Denny Stohr*
Jan Fornoff†
*Distributed Multimedia Systems / †Databases and Distributed Systems - TU Darmstadt
Wolfgang Effelsberg* Alejandro Buchmann†
{froemmgen, buchmann}@dvs.tu-darmstadt.de
{dstohr, wolfgang.effelsberg}@cs.tu-darmstadt.de
ABSTRACT
Network emulations are widely used in the network-
ing community. The network emulator Mininet recently
gained popularity, as it allows running real Linux applica-
tions on top of an emulated network. The speciﬁcation of
the network includes the topology as well as static band-
width, latency, and packet drops probability parameters.
Even though evaluations with static parameters provide
useful insights, real world measurements show dynam-
ically changing bandwidths, posing special challenges
that need to be addressed in network research.
In this demo, we capture bandwidth traces in the wild
and reproducibly replay these traces in Mininet. Our
capture and replay infrastructure consists of a Mininet
extension for replaying bandwidth traces, a measurement
Android app, as well as a graphical repository for band-
width traces. We exemplary demonstrate this toolchain
for reproducible DASH and Multipath TCP experiments.
CCS Concepts
•Networks → Network simulations;
Keywords
Reproducible Research, Bandwidth Replay, Mininet
1.
INTRODUCTION
Mininet [1] is widely used for reproducible network
experiments, as it allows the execution of unmodiﬁed
Linux applications on top of an emulated network, using
the real Linux Kernel network stack. Parameters, such as
the bandwidth and latency of network links, are statically
speciﬁed (see Figure 1) in traditional Mininet emulation.
In the wild, however, network conditions are changing
frequently due to various reasons, such as cross traﬃc
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is permit-
ted. To copy otherwise, or republish, to post on servers or to redistribute to lists,
requires prior speciﬁc permission and/or a fee. Request permissions from per-
missions@acm.org.
SIGCOMM ’16, August 22-26, 2016, Florianopolis, Brazil
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959076
Figure 1: Whereas traditional Mininet uses static bandwidths,
our toolchain replays traces captured in the wild.
and ﬂuctuating physical layer conditions. For the devel-
opment and evaluation of network mechanisms, reﬂecting
these conditions is crucial. In this demonstration, we
show a system to capture traces in the wild (see Figure
1), using diﬀerent access technologies along with their
varying QoS characteristics, as well as diﬀerent network
paths and endpoints. Given that the system is built for
the mobile Android platform, traces can be captured
while moving around. We further extended Mininet for
easily replaying traces, allowing reproducible network
experiments with dynamic bandwidth traces. This allows
to evaluate and improve network mechanisms systemati-
cally for varying network conditions, as recently shown
for DASH video streaming [5]. For the selection of band-
width traces, the toolchain provides a graphical user
interface, displaying captured traces and allowing in-
stant replay. Thus, the underlying contributions of this
demonstration can be summarized as follows:1
1. a Mininet API to support changing bandwidths,
2. a Mininet API to replay bandwidth traces, and
3. a ﬁrst capturing prototype, integrated in an infras-
tructure to distribute, select, and deploy traces.
The contributions constitute a ready to use toolchain
allowing the rapid adoption of the capture and replay
within the lifecycle of network research. The deep inte-
gration into Mininet allows to use bandwidth traces in
existing Mininet emulations with minimal code changes.
Related Work: Existing approaches to mimic vary-
1See http://www.dvs.tu-darmstadt.de/cAr.
621
Replay  in Mininet Internet Mobile Device Server Capture  in the Real World dynamic bandwidth Traditional  Mininet switch 1 host 1 host 2 static bandwidth,  e.g., 50 Mbit/s switch 1 host 1 host 2 ing network conditions often use competing cross traﬃc.
This is either generated by traﬃc generators, or by re-
playing traces (e.g., with TCP Replay) of captured cross
traﬃc. Capturing cross traﬃc, however, is often infeasible,
as it requires access to the bottleneck link. Generating
traﬃc requires assumptions about the traﬃc patterns
and distributions. To incorporate physical link condi-
tions, network simulators provide (bandwidth) models
for (wireless) network links. All these approaches are
orthogonal to capture and replay, as our approach relies
on the experienced network conditions in the wild.
In the video streaming domain, replaying captured
bandwidth traces is widely adopted. For example Huang
et al. [2] replay recorded network traces to evaluate their
video streaming approaches. In contrast, Mueller et al. [3]
replay hand made traces for DASH video streaming. As
these approaches use special replay solutions, reproduc-
ing or beneﬁting from their replay results is diﬃcult.
2. APPROACH
Capture: Capturing realistic bandwidth traces is non
trivial, as measurements interact with the network. A
constant active bandwidth measurement, e.g., neither
captures initial connection delays for mobile networks
nor traﬃc shaping which allows short bursts in the net-
work. Furthermore, transport protocols might be treated
diﬀerently in the network. In general, we propose to
use UDP for capturing, as it ﬁlls the network without
additional congestion control loop. TCP might underesti-
mate the available bandwidth, especially in the presence
of packet drops. For a ﬁrst prototype, we rely on the
existing measurement infrastructure of iperf. For future
work, we plan to apply more sophisticated measurement
approaches, including latency and packet drops. This
requires a careful measurement design, as bandwidth
and lateny interact, e.g., due to varying queue sizes.
Replay Mininet API: We extended Mininet to re-
play captured traces with two lines of code (Listing 1).


1 tc = prepareTC(id="-KGHLD5ID5lQvyJJ6bEF")
2 tc.startShaping(host, link)
Listing 1: Mininet API Extension
Each captured trace is published in a central online
repository, and can be used by its id. As in traditional
Mininet, our traﬃc shaping is based on tc. However, the
traditional Mininet implementation resets tc for chang-
ing bandwidths, which leads to artefacts. We extended
Mininet to allow smooth bandwidth changes with tc as
foundation for replaying bandwidth traces. Even though
the replayed trace should represent the captured sit-
uation precisely, ensuring that each replay of a trace
behaves comparably is suﬃcient for most scenarios.
3. DEMO
Multipath TCP: Multipath TCP (MPTCP) is a
TCP evolution which uses multiple TCP subﬂows, e.g.,
on diﬀerent network paths. Paasch et al. [4] analyzed
MPTCP in an experimental design study with Mininet,
Figure 2: Demonstration of Multipath TCP and DASH video
streaming facing changing bandwidths.
but were limited to static bandwidths. Figure 2 shows
a constant bitrate stream (8 Mbit/s) with MPTCP us-
ing a trace replay for the available bandwidth. At the
beginning, subﬂow 1 provides enough bandwidth and
is preferred due to a lower round trip time. Subﬂow 2
compensates the reduced available bandwidth (11s)
Video Streaming: Video streaming has to cope with
changing bandwidths. Dynamic Adaptive Streaming over
HTTP addresses ﬂuctuating network conditions by down-
loading video segments of varying quality and size. Fig-
ure 2 shows how DASH consecutively downloads seg-
ments during changing bandwidths.
4. OUTLOOK
Capture and replay is applicable to various network
scenarios, enabling reproducible network experiments
with changing bandwidths. Beside an in depth analysis
of the reproducibility and accuracy of capture and re-
play, we envision an integration in the default Mininet
distribution as well as extensions to support changing
latencies and packet drops with more sophisticated and
reliable measurement approaches.
5. ACKNOWLEDGEMENT
This work has been funded by the German Research Foun-
dation (DFG) as part of the projects C2 and C3 in the
Collaborative Research Center (SFB) 1053 MAKI.
6. REFERENCES
[1] N. Handigol, B. Heller, et al. “Reproducible Network
Experiments Using Container-based Emulation”. In:
CoNEXT. Nice, France: ACM, 2012, pp. 253–264.
[2] T.-Y. Huang, N. Handigol, et al. “Confused, timid, and
unstable: Picking a Video Streaming Rate is Hard”. In:
IMC. New York, USA: ACM Press, 11/2012, p. 225.
[3] C. Mueller, S. Lederer, et al. “Dynamic Adaptive Stream-
ing over HTTP/2.0”. In: ICME. 07/2013, pp. 1–6.
[4] C. Paasch, R. Khalili, and O. Bonaventure. “On the
Beneﬁts of Applying Experimental Design to Improve
Multipath TCP”. In: CoNEXT ’13. 2013, pp. 393–398.
[5] D. Stohr, A. Fr¨ommgen, et al. “QoE Analysis of DASH
Cross-Layer Dependencies by Extensive Network Emu-
lation”. In: ACM SIGCOMM Internet-QoE. 2016.


622
 0 2 4 6 8 10 12 4 6 8 10 12 14 16 18 20Multipath TCP  Throughput [MBit/s]Available Bandwidth Subflow 1Subflow 1Subflow 2 0 2 4 6 8 10 0 5 10 15 20DASH Video Streaming  Throughput [MBit/s]Time [s]Used BandwidthAvailable Bandwidth