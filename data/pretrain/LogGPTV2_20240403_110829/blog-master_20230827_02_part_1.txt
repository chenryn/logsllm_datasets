## 沉浸式学习PostgreSQL|PolarDB 6: 预定会议室、划分管辖区  
### 作者  
digoal  
### 日期  
2023-08-27  
### 标签  
PostgreSQL , PolarDB , 数据库 , 教学  
----  
## 背景  
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.  
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.  
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/exp/f55dbfac77c0467a9d3cd95ff6697a31)来完成.  
如果你本地有docker环境也可以把镜像拉到本地来做实验:  
x86_64机器使用以下docker image:  
- [《amd64 image》](../202307/20230710_03.md)  
ARM机器使用以下docker image:  
- [《arm64 image》](../202308/20230814_02.md)  
## 业务场景1 介绍: 预定会议室  
会议室预定系统最关键的几个点:  
- 1、查询: 按位置、会议室大小、会议室设备(是否有投屏、电话会议、视频会议...)、时间段查询符合条件的会议室.  
- 2、预定: 并写入已订纪录.  
- 3、强约束: 防止同一个会议室的同一个时间片出现被多人预定的情况.  
### 实现和对照  
设计存储会议室元数据的表  
```  
create table tbl_mroom (  
  id int primary key,  
  pos int,   -- 位置信息, 为了简化实验过程, 位置信息使用int, 不影响实验结果  
  rs int -- 资源信息, 为了简化实验过程, 资源信息使用int, 不影响实验结果  
);  
```  
写入测试数据  
```  
insert into tbl_mroom select generate_series(1,1000), random()*1000, random()*10;  
```  
#### 传统方法 设计和实验  
存储已订会议室纪录表  
```  
create table tbl_mroom_log (  
  id serial primary key,            -- 主键  
  mid int REFERENCES tbl_mroom(id),  -- 会议室ID  
  tsb timestamp,   -- 会议开始时间  
  tse timestamp,  -- 会议结束时间  
  uid int    -- 预定人ID  
);  
```  
预定过程:  
开启事务  
```  
begin;  
```  
查询符合条件的目标会议室ID, 随便造一个条件即可, 不影响实验结果.  
```  
select id from tbl_mroom where pos =ts1 and tse<=ts2  
);  
```  
写入预定纪录  
-- 用户从可预定的会议室选中一个, 写入预定的时间戳.  
```  
insert into tbl_mroom_log (mid,tsb,tse,uid) values (?, ts1, ts2, ?);  
```  
释放整表锁定  
```  
end;  -- 结束事务时自动释放.  
```  
#### PolarDB|PG新方法1 设计和实验  
使用时间范围类型+该类型的排他约束.  
创建插件btree_gist  
```  
create extension btree_gist ;  
```  
存储已订会议室纪录表, 这里和传统方法不一样, 使用时间范围类型+该类型的排他约束.  
```  
create table tbl_mroom_log (  
  id serial primary key,            -- 主键  
  mid int references tbl_mroom(id),  -- 会议室ID  
  tsr tsrange,   -- 时间范围类型, 表示会议开始和结束时间  
  uid int,    -- 预定人ID  
  exclude using gist (mid with = , tsr with &&)   -- 排他约束，同一个会议室，不允许有时间范围交叉的记录  
);  
postgres=# \d tbl_mroom_log  
                            Table "public.tbl_mroom_log"  
 Column |  Type   | Collation | Nullable |                  Default  
--------+---------+-----------+----------+-------------------------------------------  
 id     | integer |           | not null | nextval('tbl_mroom_log_id_seq'::regclass)  
 mid    | integer |           |          |  
 tsr    | tsrange |           |          |  
 uid    | integer |           |          |  
Indexes:  
    "tbl_mroom_log_pkey" PRIMARY KEY, btree (id)  
    "tbl_mroom_log_mid_tsr_excl" EXCLUDE USING gist (mid WITH =, tsr WITH &&)  
Foreign-key constraints:  
    "tbl_mroom_log_mid_fkey" FOREIGN KEY (mid) REFERENCES tbl_mroom(id)  
```  
预定过程:  
不需要开启事务来锁表, 因为有排他约束保障不可能出现预定的时间交叉问题.  
查询符合条件的目标会议室ID, 随便造一个条件即可, 不影响实验结果.  
```  
select id from tbl_mroom where pos < 300 and rs=5;  
```  
查询没有时间冲突的会议室  
-- 假设用户想订ts1到ts2范围的会议室.  
-- 满足时间无重叠可预定, 如果会议室压根没有被定过(不在tbl_mroom_log这个表里)也可以被预定.  
```  
select t1.id from tbl_mroom t1 where t1.pos < 300 and t1.rs=5   -- 符合条件的会议室  
and not exists (    -- 使用tsrange类型的操作符 && 来排除有时间交叉的记录  
  select 1 from tbl_mroom_log t2 where t1.id=t2.mid and t2.tsr && tsrange(ts1,ts2)  
);  
```  
写入预定纪录  
-- 用户从可预定的会议室选中一个, 写入预定的时间戳.  
```  
insert into tbl_mroom_log (mid,tsr,uid) values (?, tsrange(ts1, ts2), ?);  
```  
如果发生冲突会报错, 例如:  
```  
insert into tbl_mroom_log (mid,tsr,uid) values (1, tsrange('2023-08-26 09:00:00','2023-08-26 10:30:00'), 1);  
```  
下面这条插入会报错:  
```  
insert into tbl_mroom_log (mid,tsr,uid) values (1, tsrange('2023-08-26 08:30:00','2023-08-26 09:30:00'), 1);  
ERROR:  conflicting key value violates exclusion constraint "tbl_mroom_log_mid_tsr_excl"  
DETAIL:  Key (mid, tsr)=(1, ["2023-08-26 08:30:00","2023-08-26 09:30:00")) conflicts with existing key (mid, tsr)=(1, ["2023-08-26 09:00:00","2023-08-26 10:30:00")).  
```  
#### 对照  
使用传统方法为了实现强约束, 防止同一间会议室被多人预定重叠时间片, 必须先锁表, 堵塞其他人查询, 然后再判断是否有合适会议室, 然后写入纪录, 最后释放锁(必须等事务结束才会释放).  是读堵塞, 并发和效率非常低.  
使用PolarDB|PG的时间范围类型, 排他约束, 轻松解决了强约束问题. 在写入时会使用索引保障强约束, 防止同一间会议室被多人预定重叠时间片.  