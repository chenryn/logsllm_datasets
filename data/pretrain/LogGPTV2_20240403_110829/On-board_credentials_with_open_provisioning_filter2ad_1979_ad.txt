endorsements remains one-way.
Instead of using a shared symmetric key IK to endorse
programs, it is also possible to use digital signatures. The
basic principle of endorsement is that the endorsement key
must be cryptographically bound to the encryption key used
to provision credential secrets. Suppose a provisioner has
a signing key pair P KS/SKS. He can use SKS to digi-
tally sign the programs to be endorsed. In order to do this,
he must include P KS in the ObCP/Init message so that
it is cryptographically bound to RK. Figure 4 shows how
ObCP/Init and ObCP/Endorse are modiﬁed when digital
signatures are used for endorsement.
As explained in Section 4.4, we intentionally chose to avoid
naming provisioned secrets in order to keep the ObC system
minimal. This choice forces the developer to correctly in-
clude and check identiﬁcation information in the parameter
itself whenever a secure parameter is sensitive to e.g. pa-
rameter position in the set of input parameters or to the
processing program in the set of credential programs for a
given family. As this is a typical feature, explicit interpreter
support for parameter naming could be added. Also, allow-
ing provisioning messages to be linked via an opaque token
may be a useful feature, e.g. to help in securely binding user
authentication to provisioning.
In Section 4 we made the assumption that each device
has unique key pair and the public part of that key pair
(P KD) has been certiﬁed by a trusted authority, such as
the device manufacturer. Note that this is very diﬀerent
from public key infrastructures (PKIs) which certify public
keys of end users: for example, naming and enrollment are
much simpler in a device PKI compared to an end-user PKI.
There are already several systems (such as WiMAX device
identiﬁcation [21]) where device certiﬁcation infrastructures
are in use.
7. CURRENT WORK
In our current work, we are investigating several exten-
sions to the ObC architecture. We brieﬂy describe two of
the most important ones. The ﬁrst extension is to introduce
the possibility of executing a credential program in pieces.
This is motivated for a number of reasons. Chief among
them is need to remove restrictions on the size of the cre-
dential program imposed by memory limitations in the un-
derlying secure environment. Further details of the design
of piece-wise execution will be described elsewhere [5].
Figure 5: SKAE style key pair attestation
The second extension is to support credential programs
based on asymmetric cryptography. The current ObC pro-
visioning system described in Section 4 is geared towards
symmetric key credentials. The provisioning protocol allows
the provisioner to securely transport the shared symmetric
key(s) to the correct set of programs and the correct device.
In contrast, asymmetric key credentials are typically created
on the device itself. The essential key management step is
to enroll the public part of the asymmetric key credential
with a provisioner (and possibly obtain a certiﬁcate for it).
Thus the provisioner’s requirement is the following: given
a public key for enrollment, how can the provisioner verify
that the corresponding private key resides within the ObC
secure environment of a correct device and is accessible to
the correct set of credential programs within the device.
We can do this along the lines of the subject key attestation
evidence (SKAE) [19] extension for X509.v3 certiﬁcates, de-
ﬁned by the TCG Infrastructure Group. A SKAE extension
is essentially an assertion signed by a certiﬁed TPM key (the
Attestation Identity Key AIK). The signed data contains a
public key and the platform conﬁguration in the presence
of which the TPM will unseal and use the corresponding
private key.
The ObC device-speciﬁc key pair P KD/SKD can be used
in the same way as the TPM AIK (see Figure 5). We can
foresee three possible types of asymmetric key ObCs:
1. The underlying platform may have additional device-
speciﬁc key pairs (and corresponding device certiﬁ-
cates) available for use by general-purpose applications
on the device. Note that these are similar to, but can-
not be the same as P KD/SKD.
2. A key pair for an asymmetric algorithm supported by
the extended crypto library.
3. A key pair for an asymmetric algorithm implemented
entirely in a credential program itself.
In case #1, the device certiﬁcate itself will serve as attes-
tation evidence. In case #2, the attestation evidence will
be a binding between the public key in the key pair, the
identity of the credential program that created the key pair,
and the identity of the credential program that requests the
attestation evidence. The identity of a program is a pair
consisting of H(program) as well as a public identiﬁer of
the family to which the credential belongs. The public iden-
tiﬁer of a family is deterministically derived from the family
root key RK (or the endorser’s public key P KS, in the case
described in previous section). In both of these cases, the
attestation evidence is a statement by the ObC system that
113the private key corresponding to the public key is protected
by the platform.
In case #2, the assertion also identiﬁes
the credential programs that have the right to use the cor-
responding private key.
In case #3, the ObC system cannot make a similar asser-
tion because it cannot relate the public key to the private
key. Therefore, instead of using a subject key attestation
evidence, we need to provide the means for a more generic
data attestation evidence which is an assertion signed with
SKD and binds some arbitrary data provided by a creden-
tial program to the identity of that credential program. A
credential programs using asymmetric crypto algorithms can
generate a key pair and include the public key as part of the
data for which they obtain the data attestation evidence
from the ObC system. Any veriﬁer who trusts the creden-
tial program and knows the semantics of the data can infer
that the private key is indeed protected by the ObC system.
8. RELATED WORK
From an architectural viewpoint, ObC is close to the Small
Terminal Interoperable Platform (STIP) by the GlobalPlat-
form consortium [9], in that both aim to provide an open,
well speciﬁed platform complete with provisioning support
to be used for security services in mobile devices. However
STIP is built around smart card technology whereas ObC
is intended to be deployed without the need for additional
hardware by making use of existing secure environments. A
second diﬀerence is that STIP applications must be certi-
ﬁed by the card issuer while the ObC provisioning system is
designed for open provisioning.
McCune et al. [14] describe how the support for dynamic
roots of trust in modern processors can be used in conjunc-
tion with a TPM to implement a secure execution environ-
ment as an isolated software module without having to trust
the device operating system. Our architecture can be im-
plemented using this approach: the isolated software mod-
ule will consist of the ObC interpreter and the provisioning
subsystem.
Gajek et al. [8] describe combining a TPM with a virtual
machine monitor so that a “wallet” can be implemented as a
trusted guest virtual machine. The ObC system is a gener-
alization of the wallet and can be implemented in the same
way. In [6], we describe an ObC system where isolation is
based on virtualization.
Our approach of using program-speciﬁc derived keys to
isolate programs from one another is similar to the “secret
sharing” approach taken in AEGIS [18]. In AEGIS, the re-
sponse for a given challenge depends on the physically un-
cloneable function on the device as well as the particular
software conﬁguration (program requesting the response and
the security kernel currently executing) on the device. The
response is given to the program which can use it as a secret
key. In our design, the sealing key of an ObC program de-
pends on OPK and the program itself. However the program
only gains the right to use the key for sealing/unsealing.
The actual program-speciﬁc key is never given out to the
program.
Lee et al. describe a hardware-assisted architecture for
protecting “critical secrets” in microprocessors [12, 4]. “Crit-
ical secrets” in their terminology is similar to our notion of
credential secrets. However, Lee et al. focus on designing
new microprocessor features whereas our focus is on re-using
existing general-purpose secure environments. They also do
not support the notion of isolating credential programs from
one another or facilitating families of co-operating programs
– the only software allowed to operate on critical secrets are
the “trusted software modules” which are authorized by the
device owner or issuer.
The related work closest to ours is the Trusted Execution
Module (TEM) [2]. The motivations behind TEM are iden-
tical to ours. The TEM architecture has several similarities
to the ObC architecture as well:
for example, TEM also
uses a bytecode interpreter executing within a secure envi-
ronment and each TEM device has a unique device-speciﬁc
key pair similar to P KD/SKD. The primary diﬀerence be-
tween TEM and ObC is in how the persistently stored data
of credential programs is protected. This in turn results in
diﬀerent provisioning systems.
TEM uses a persistent global store with a very large ad-
dress space. A piece of mutable persistent data is assigned
a random address at the time of compiling a TEM program
(called “closure” in TEM terminology). The address of a
variable also serves as the capability to access that variable
and hence must be kept conﬁdential. The address of a given
variable in a TEM program is the same on every TEM where
that program runs. When a TEM program is packaged (in
the form of “bound SECPacks” in TEM terminology) for a
target device the addresses of persistent data it needs to use
are put in a binding table which is then encrypted using
the device public key. Authenticated sharing of data among
TEM programs can be achieved by including the address of
a variable that holds the data in the binding table of all the
programs that need access to that data. Since the binding
table is included at compilation time, the TEM architecture
makes the implicit assumption that the same entity provi-
sions both the TEM code and any secret data used by that
code. This has two implications.
First, bandwidth and storage usage is not optimal be-
cause a device will have to receive and store multiple copies
of commonly used algorithms (e.g., HTTP Digest authenti-
cation). Second, and more important, the assumption does
not always hold. For example, the credential program in the
example we described in Section 5.2 is a proprietary algo-
rithm by a leading provider of one-time token systems. For
that algorithm, a shared secret to authenticate a particu-
lar use to a service is chosen and provisioned by the service
provider. Although the system provider could provision a
bound SECPack to a device, he cannot choose the (global)
address of the shared secret for the binding table because
the secret is conﬁdential to each service provider. On the
other hand, the service provider cannot provision an algo-
rithm kept secret by system provider.
The ObC provisioning architecture, as described in Sec-
tion 5.2, naturally lends itself to the case where code and
data come from diﬀerent sources. A secondary diﬀerence
between the two architectures is that unlike in ObC, there
is no separate installation step in TEM. The price for not
having a separate installation step is that asymmetric cryp-
tography (decryption using SKD) is needed every time a
TEM program is executed.
Our work is also related to existing key provisioning pro-
tocols. CT-KIP [15] is an IETF standard that speciﬁes a
protocol for initialization of cryptographic tokens (hardware
devices connected to computers or software modules). CT-
KIP provides a mechanism to transfer secret data to a to-
ken securely. However, if credential programs from diﬀerent
114providers are executed within the same token, CT-KIP does
not enable the provisioner to control which programs are al-
lowed to access the provisioned secret data. Our provision-
ing mechanism provides more ﬁne-grained access control for
the provisioner by allowing it to provision secret data only
to a selected subset of programs within the target token or
device.
9. CONCLUSIONS
Although there has been signiﬁcant research and develop-
ment of multi-application smart cards or “white-cards”, they
have never been widely adopted to support credentials from
multiple sources to co-exist in the same device. A likely rea-
son is the high barrier for entry for new service providers
to use cards that have been already deployed by some other
issuer. As a result, the current situation is that either hard-
ware security tokens are not used, or the user is compelled
to carry separate hardware tokens for each diﬀerent service
provider who requires them.
Our On-board Credentials architecture addresses this is-
sue in a manner that may stimulate larger-scale deployments
of credentials. The architecture is designed so that it can be
realized on secure environments that are already widely de-
ployed for other purposes. The openness of provisioning will
allow small-scale service providers to build their authentica-
tion and authorization mechanisms around ObCs for secur-
ing their services independently of device manufacturers or
other stakeholders. However, the ObC architecture, solves
only the ﬁrst pieces of this puzzle. Several open issues re-
main. First, techniques for determining and describing the
level of security in the secure environment on the target de-
vice are needed. Second, the provisioning server needs ways
to specify policies on how the provisioned credentials are to
be accessed and used locally on the target device. Third,
both the security and the usability of ObC system need to
be more rigorously validated.
10. REFERENCES
[1] ARM. Trustzone-enabled processor. http://www.arm.
com/pdfs/DDI0301D_arm1176jzfs_r0p2_trm.pdf.
[2] Victor Costan, Luis Sarmenta, Marten van Dijk, and
Srinivas Devadas. The trusted execution module:
Commodity general-purpose trusted computing. In
Proc. Eighth Smart Card Research and Advanced
Application Conference, August 2008. http://people.
csail.mit.edu/devadas/pubs/cardis08tem.pdf.
[3] A. Doherty et al. Dynamic symmetric key provisioning
protocol (dskpp). IETF Internet Draft, version 06,
November 2008. http://tools.ietf.org/html/
draft-ietf-keyprov-dskpp-06.
[4] Jeﬀrey Dwoskin and Ruby Lee. Hardware-rooted trust
for secure key management and transient trust. In
Proc. 14th ACM Conference on Computer and
Communication Security, pages 389–400, October
2007.
[5] Jan-Erik Ekberg, N. Asokan, Kari Kostiainen, and
Aarne Rantala. Scheduling the execution of credentials
in constrained secure environments. In Proc. ACM
Workshop on Scalable Trusted Computing, Oct 2008.
[6] Jan-Erik Ekberg et al. Onboard credentials platform:
Design and implementation. Technical Report
NRC-TR-2008-001, Nokia Research Center, January
2008. http:
//research.nokia.com/files/NRCTR2008001.pdf.
[7] Jan-Erik Ekberg and Markku Kyl¨anp¨a¨a. Mobile
trusted module. Technical Report NRC-TR-2007-015,
Nokia Research Center, November 2007. http:
//research.nokia.com/files/NRCTR2007015.pdf.
[8] Sebastian Gajek, Ahmad-Reza Sadeghi, Christian
Stueble, and Marcel Winandy. Compartmented
security for browsers – or how to thwart a phisher
with trusted computing. In Proc. of IEEE
International Conference on Availability, Reliability
and Security (ARES’07), April 2007.
[9] GlobalPlatform. Why the mobile industry is evolving
towards security, August 2007. GlobalPlatform white
paper. http://www.globalplatform.org/uploads/
STIP_WhitePaper.pdf.
[10] Alex Halderman et al. Lest we remember: Cold boot
attacks on encryption keys. In Proc. Usenix Security
Symposium, 2008.
http://citp.princeton.edu/memory/.
[11] JavaCard Technology.
http://java.sun.com/products/javacard/.
[12] Ruby Lee et al. Architecture for protecting critical
secrets in microprocessors. In Proc. 32nd International
Symposium on Computer Architecture (ISCA ’05),
pages 2–13, May 2005.
[13] The Programming Language Lua.
http://www.lua.org/.
[14] Jonathan McCune et al. Minimal TCB Code
Execution (Extended Abstract). In Proc. IEEE
Symposium on Security and Privacy, May 2007.
[15] Magnus Nystr¨om. Cryptographic Token Key
Initialization Protocol (CT-KIP). IETF RFC 4758,
November 2006.
[16] Open Mobile Alliance - Device Management Working
Group. http:
//www.openmobilealliance.org/Technical/DM.aspx.
[17] Jay Srage and J´erˆome Azema. M-Shield mobile
security technology, 2005. TI White paper.
http://focus.ti.com/pdfs/wtbu/ti_mshield_
whitepaper.pdf.
[18] Edward Suh, Charles O’Donnell, Ishan Sachdev, and
Srinivas Devadas. Design and implementation of the
AEGIS single-chip secure processor using physical
random function. In Proc. 32nd Annual International
Symposium on Computer Architecture (ISCA ’05),
pages 25–36, May 2005.
[19] TCG Infrastructure Workgroup. Subject Key
Attestation Evidence Extension”, Speciﬁcation Version
1.0 Revision 7, June 2005. https:
//www.trustedcomputinggroup.org/specs/IWG/.
[20] Trusted Platform Module (TPM) Speciﬁcations.
https:
//www.trustedcomputinggroup.org/specs/TPM/.
[21] WiMAX Forum. WiMAX Forum X.509 Device
Certiﬁcate Proﬁle Approved Speciﬁcation, April 2008.
http://www.wimaxforum.org/certification/x509_
certificates/pdfs/wimax_forum_x509_device_
certificate_profile.pdf.
115