2.5.1 NXP A700x Datasheet Analysis
The NXP A700x public datasheet [25] provides the following
interesting informations:
• it runs the NXP’s JavaCard Operating System called
JCOP, in version JCOP 2.4.2 R0.9 or R1 (JavaCard ver-
sion 3.0.1 and GlobalPlatform version 2.1.1);
• technological node is 140 µm;
• CPU is Secure_MX51;
• 3-DES and AES hardware co-processors;
• public-key cryptographic co-processor is NXP FameXE;
• RSA available up to 2048 bits and ECC available up to
320 bits.
The NXP A7005a RSA and ECC key length limitations,
JCOP version and technological node indicate that this is not
a very recent chip.
2.5.2 Similarities with other NXP Products
With the information gathered from the NXP A700x datasheet
and its IC optical analysis, we tried to identify similar NXP
products for which we could have more control on the ECDSA
operations. In fact, several NXP JavaCard platforms share the
NXP A700x’s characteristics. They are all based on NXP P5x
chips.
The NXP P5x secure microcontroller family is the ﬁrst
generation of NXP secure elements, also called SmartMX
family [31]. It has the exact same characteristics as the NXP
234    30th USENIX Security Symposium
USENIX Association
3 Reverse-Engineering the ECDSA Algo-
rithm
The reverse-engineering of the ECDSA signature and veriﬁ-
cation algorithms presented in this section was conducted on
Rhea as we had full control on the inputs, in particular the
private key d.
3.1 ECDSA Signature Algorithm
3.1.1 Basics about the ECDSA Signature Algorithm
Let us brieﬂy recall the ECDSA signature algorithm and in-
troduce the necessary notations. We work on an elliptic curve
E deﬁned over the ﬁnite ﬁeld Fp, and denote by G(x,y) a point
on E of large prime order q. The ECDSA signature algo-
rithm [17] takes as inputs the hash of the message m to be
signed h = H(m), and a secret key d. It outputs a pair (r,s)
computed as follows:
1. randomly pick a nonce k in Z/qZ
2. scalar multiplication4 Q(x,y) = [k]G(x,y)
3. denote by r the x-coordinate of Q : r = Qx
4. compute s = k−1(h + rd) mod q
Observe that since Rhea allows us to choose the secret key
d, we can easily compute the nonce value k used to produce
any signature (r,s) for any given message h = H(m).
3.1.2 Matching the Algorithm to the Side-Channel
Traces
Figure 6 presents a full EM trace of the ECDSA signature at
sampling rate 2.5GSa/s. (The whole execution time is approx-
imatively 73ms.) Our ﬁrst goal was to identify the different
steps of the ECDSA algorithm on the trace.
After an initialization phase, where ECDSA inputs are
processed and stored, the ﬁrst step is to randomly generate the
nonce k and the z coordinate of G in projective coordinates.
The call to a pseudo-random number generator (PRNG) is
clear in the identiﬁed area: there are 48 calls to the PRNG
to generate a 256-bit random and the PRNG re-initializes
itself every 60 calls. There must also be at least two modular
multiplications in this step to get G in projective coordinates.
Also, the nonce k is recoded in the form required by the scalar
multiplication algorithm (we give more details in Section 3.3).
The next block corresponds to the scalar multiplication
itself. This is the longest operation in ECDSA and its stable
iterative process stands out clearly.
The last four blocks are composed of two modular inver-
sions (z−1 mod p to get r = Qx and k−1 mod q), the hash of
4In a secure implementation, this is usually done on randomized projective
coordinates G(x,y) → G(xz mod p,yz mod p,z) with z a fresh random from Fp (see
e.g. [6]).
Figure 4: EM Probe Positions on Titan (left) and Rhea (right)
Figure 5: Titan ECDSA Signature EM Trace
we tapped the I/O line so we could trigger on the sending
of the APDU command;
• for the side-channel measurements performed on Titan,
we used the triggering capabilities of our oscilloscope to
trigger on a pattern present at the beginning of the EM ac-
tivity of the command processing the authentication
request message.
2.6.2 First Side-Channel Observations on Titan and
Rhea
Figure 4 depicts the spatial position of the EM probe above
the die of the Google Titan Security Key NXP A7005a and the
die of Rhea. In Figures 5 and 6, we give the EM activities ob-
served during Titan’s authentication request message
ECDSA signature, and during the processing of the APDU
command launching the ECDSA signature available in the
JavaCard cryptographic API of Rhea.
The similarities between EM activities on Titan and Rhea
conﬁrm our hypothesis that the implementations are very
similar. Note that the spatial probe positioning is sensitive
to get a clear signal with sharp peaks, but the picture taken
for Rhea (Figure 4 left) proved sufﬁcient to replay the probe
positioning on Titan.
USENIX Association
30th USENIX Security Symposium    235
k,z ← $
encode k
G(x,y) → G(xz,yz,z)
Init
[k]G(xz,yz,z)
k−1 (h + rd)
H(m)
1
z
1
k
Iteration i
Figure 6: Rhea EM Trace - ECDSA Signature (P-256, SHA-
256)
the message m and the ﬁnal computation of s with two mod-
ular multiplications and one addition. We infer the ordering
depicted in Figure 6 but we do not have strong arguments to
show that these operations are actually performed in this order.
It is worth mentioning that the overall process is pretty similar
to what was observed in [26]. The authors were working on
a P5 chip with an older version of the NXP cryptographic
library.
3.1.3 Studying the Scalar Multiplication Algorithm
In side-channel analysis, there are many ways to attack an
ECDSA implementation. In fact, any leakage inside one of the
previously mentioned operations involving the nonce or the
secret key could potentially lead to an attack. In the literature,
the most studied operation is the scalar multiplication. Let us
have a closer look.
By observing many signature traces, we observed that the
scalar multiplication step takes approximatively 43 ms, and
more importantly that each scalar multiplication consists of
exactly 128 iterations (i.e. the repetition of the same sig-
nal pattern). Figure 7 displays a single iteration at sampling
rate 5GSa/s. We observed that some parts of the traces vary
slightly from one iteration to another (probably due to a ran-
dom delay countermeasure). The iteration length is then not
perfectly stable but it takes roughly 340µs, which corresponds
to about 1.7M samples at sampling rate 5GSa/s.
We concluded for a constant time algorithm based on some
sort of Double&Add Always implementation. In particular,
the implementation does not skip the leading zero bits of the
scalar as in [5], or more recently [16, 24]. In order to ﬁnd a
vulnerability we needed a better understanding of the imple-
mentation. To this end, we analyzed the ECDSA signature
veriﬁcation algorithm.
Figure 7: Rhea EM Trace - ECDSA Signature (P-256, SHA-
256) - Scalar Multiplication Single Iteration
3.2 ECDSA Signature Veriﬁcation Algorithm
As mentioned before, one great advantage of working on Rhea
is the possibility to run the ECDSA signature veriﬁcation al-
gorithm which does not involve any secret. Countermeasures
are therefore useless and developers often downgrade or sup-
press them in order to reduce the execution time. For reverse
engineering however, such a countermeasure downgrade is a
windfall. It provides the opportunity to learn a lot about the
implementation and its countermeasures.
The core of an ECDSA signature veriﬁcation is a double-
scalar multiplication of the form [k1]G + [k2]P, where G is
the curve base point and P the signatory’s public key. It in-
stantly appeared that this operation was implemented as two
separate scalar multiplications (followed by a ﬁnal point addi-
tion), whose traces looked similar to those observed for the
signature algorithm. Our analysis revealed however that it is
not constant time: the Double&Add Always implementation
is replaced by a simple Double&Add implementation and the
leading zero bits of the scalar are skipped. Also, an expen-
sive pre-computation step is visible before one of the two
scalar multiplications. This pre-computation step looks like a
scalar multiplication where the scalar is a power of 2 (i.e. it is
made of Double operations only). Finally, the manipulation of
the point at inﬁnity can be easily spotted in the side-channel
signal.
These observations on the veriﬁcation algorithm led us to
draw the following hypothesis for the signature algorithm:
ation;
• each iteration is constituted of a Double and a Add oper-
• each iteration handles two bits of the scalar, starting with
the most signiﬁcant bit;
• the scalar is not blinded;
• the point at inﬁnity is never manipulated;
• the scalar multiplication requires the pre-computed value
[2(cid:100)l/2(cid:101)]G (where l is the bit-length of the scalar) that is
hard coded into the chip.
236    30th USENIX Security Symposium
USENIX Association
3.3 High-Level NXP Scalar Multiplication Al-
gorithm
There are many ways to implement a scalar multiplication
algorithm but the costly pre-computation observed in the
previous section, together with the number of subsequent
iterations and the fact that there is a single doubling operation
for each addition clearly suggests a comb method (see [21])
of width 2.
To compute [k]G, the scalar k = (k1, . . . ,kl)2 of even length
l5 is ﬁrst encoded as ˜k = (˜k1, . . . , ˜kl/2) where ˜ki is a 2-bit
value obtained by concatenation of ki and kl/2+i such that
˜ki = 2ki + kl/2+i.
A comb implementation of width 2, requires the pre-
computation of the curve points G1 = G, G2 = [2l/2]G1 and
G3 = G1 + G2 = [2l/2 + 1]G1.
From the above analysis, our ﬁrst and best guess for the
scalar multiplication algorithm is given in Algorithm 1.
:(˜k1, . . . , ˜k129), the encoded scalar
:G0,G1,G2,G3,G4, the pre-computed points
Algorithm 1: Scalar Multiplication Algorithm used in
Signature Operation
Input
Input
Output :[k]G
S ← G1
for i ← 2 to 129 do
S ← [2]S
if ˜ki > 0 then
S ← S + G˜ki
Dummy ← S + G0
else
if ˜k1 = 0 then
S ← S− G4
Dummy ← S− G4
else
Return :S
In Algorithm 1, Dummy represents a register or memory
address which will not be read and therefore stores useless
computation results, G0 is any point on the elliptic curve,
G1 = G (the elliptic curve base point), G2 = [2129]G1, G3 =
G1 + G2 and G4 = [2128]G1.
Since G0 is solely used for the dummy additions, it could be
any point on the curve, it could even change over time. Most
likely G0 ∈ {G1,G2,G3,G4}, since these points are already
computed.
In Algorithm 1, the binary form of k is of length l = 258.
This means that at least two extra leading zero bits are added
to k. The purpose of this trick is to ensure that ˜k1 is either
0 or 1. In the former case however, the initialization of S
should be the point at inﬁnity. In order to avoid this, ˜k1 is
5k may be padded with 0s if necessary
forced to value 1. It is corrected by the last operations in
Algorithm 1 assuming the point G4 is also stored during the
pre-computation step (in addition to G2 and G3). This process
is conﬁrmed by the presence of an Add operation following
the scalar multiplication sequence of Double&Add iterations.
4 A Side-Channel Vulnerability
As explained in the previous section, each signature on Rhea
allows us to deduce the nonce k from the chosen private key d.
Therefore, we could look for statistical dependencies between
the side-channel traces and the nonce values, more exactly
the encoded digits ˜ki.
The research of sensitive leakage is a tedious task where
many interdependent parameters have strong inﬂuence and
should be set correctly for success. In the next section, we
investigate these parameters and show how we eventually
managed to ﬁnd a sensitive leakage. Section 4.1 sums-up
several months of work tainted with failed attempts and disil-
lusionment. The details given in Sections 4.1.1 to 4.1.3 can be
skipped at ﬁrst-reading. Section 4.2 provides precise informa-
tion about the sensitive leakage. Section 4.3 shows how that
leakage helped to better understand the scalar multiplication
implementation.
4.1 Searching for Sensitive Leakage
Our statistical side-channel analysis started by the acquisition
of the EM radiations of the Rhea chip during 1000 ECDSA
executions (we eventually needed 4000 acquisitions for the
attack to be successful). Each trace was then split into 128 sub-
traces corresponding to the point doubling and point addition
operations inside the main loop of Algorithm 1. We thus
ended-up with 1000× 128 sub-traces (one per iteration).
As mentioned in Section 3.1.3, the sub-traces are not per-
fectly synchronized (certainly due to a random delay counter-
measure). This means that, at time sample t, two sub-traces
do not exactly capture the EM signal related to the same un-
derlying computations. They have to be re-aligned in order
for us to estimate any statistical dependency between the EM
signal and the encoded nonce digits.
4.1.1 Preliminary Acquisition Setup
This whole process necessitate to choose some acquisition
parameters:
• choice of EM probe: we started with a Langer ICR HH
250-75 near-ﬁeld EM probe with an horizontal coil of
diameter 250 µm and a frequency bandwidth ranging
from 0.5 MHz to 2 GHz [19].
• EM probe position: we selected a position where the
Double and Add operations were easily distinguishable
and the EM signal had a large amplitude.
USENIX Association
30th USENIX Security Symposium    237
Double
Add
Figure 8: Rhea EM Trace - ECDSA Signature (P-256, SHA-
256) - Scalar Multiplication Single Iteration
• sampling rate: we choose the highest sampling rate given
by our oscilloscope (5 GSamples/s). The drawback is
that we then had to handle large traces: about 1.7M
samples per sub-trace.
4.1.2 Traces re-alignment
Let us now see how we managed to re-align our 1000× 128
sub-traces. In Figure 8, we display a sub-trace with 8 identi-
ﬁed sections (in orange) where the execution time seems to
randomly vary from one sub-trace to another. Over all sub-
traces, we observed that the length of these sections vary by
a factor of 2. Our hypothesis is that an elementary random
delay countermeasure is applied (by repeating or not some of
the computations). The rest of the sub-traces, i.e. the 8 inter-
leaved sections, show a small jitter which very likely comes
from the internal clock natural jitter.
These observations led us to try to re-align each of the 16
sections independently. We started with the orange sections