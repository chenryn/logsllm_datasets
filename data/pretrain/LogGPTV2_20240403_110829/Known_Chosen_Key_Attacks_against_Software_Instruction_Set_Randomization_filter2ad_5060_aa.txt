title:Known/Chosen Key Attacks against Software Instruction Set Randomization
author:Yoav Weiss and
Elena Gabriela Barrantes
Known/Chosen key attacks against
software Instruction Set Randomization
Discretix Technologies Ltd.
Yoav Weiss
POB 8718
Kefar Netter, Israel
PI:EMAIL
Abstract
Instruction Set Randomization (ISR) has been proposed as
a form of defense against binary code injection into an ex-
ecuting program. One proof-of-concept implementation is
Randomized Instruction Set Emulator (RISE), based on the
open-source Valgrind IA-32 to IA-32 binary translator. Al-
though RISE is effective against attacks that are not RISE-
aware, it is vulnerable to pure data and hybrid data-code
attacks that target its data, as well to some classes of brute-
force guessing.
In order to enable the design of a pro-
duction version, we describe implementation-speciﬁc and
generic vulnerabilities that can be used to overcome RISE
in its current form. We present and discuss attacks and so-
lutions in three categories: known-key attacks that rely on
the key being leaked and then used to pre-scramble the at-
tacking code; chosen-key attacks that use implementation
weaknesses to allow the attacker to deﬁne its own key,or
otherwise affect key generation; and key-guessing (“brute-
force”) attacks, about which we explore the design of mini-
malistic loaders which can be used to minimize the number
of mask bytes required for a successful key-guessing attack.
All the described attacks were tested in real-world scenar-
ios.
1. Introduction
Instruction Set Randomization (ISR) is a security approach
that scrambles the instruction set, making it harder to inject
meaningful code into a process [1, 10]. This approach imi-
tates the protection afforded by the genetic diversity found
in nature. Although theoretically sound against its threat
model, any software ISR implementation (via emulation),
will suffer from vulnerabilities related to the lack of hard-
ware support, and the complexity of the emulation process.
Elena Gabriela Barrantes
Escuela de Ciencias de la
Computaci´on e Inform´atica
Universidad de Costa Rica
San Jos´e, Costa Rica
PI:EMAIL
To test the extent of these vulnerabilities, we will use Ran-
domized Instruction Set Emulation (RISE) [1] a proof-of-
concept, user-side, open-source implementation of ISR.
The main contributions of this paper are:
• Identifying pitfalls which should be avoided when de-
signing an ISR implementation.
• Describing inherent weaknesses of the ISR approach.
• Showing a way to calculate an upper limit of mask
strength and demonstrating it for the IA-32 architec-
ture.
• Suggesting a hardware-assisted solution which would
be immune to the vulnerabilities above.
The paper is organized as follows: We start by describing
the ISR rationale and RISE in particular in Section 2. We
then proceed to describe and suggest solutions to the three
attack mechanisms that were identiﬁed: Section 3 describes
attacks that rely on the ability to steal/derive enough of the
key-stream to inject properly-scrambled code into the pro-
cess, Section 4 focuses on attacks that target the diversity
mechanism itself and disable it before executing the main
attack, and Section 5 explores minimalistic loaders which
can be used to minimize the number of mask bytes required
for a successful attack. In Section 6 we review related work,
and we summarize our ﬁndings in Section 7.
2. Background
There are two areas which affect the study of software
ISR vulnerabilities:
the implementation of the ISR itself,
and the exploit types. We start by reviewing the imple-
mentation of RISE in Section 2.1, and present vulnerability
classes in Section 2.2.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20062.1. RISE
RISE [1] is an ISR implementation developed using the
open-source, IA-32 to IA-32 Valgrind [16] emulator. It is
a pure-software implementation, running entirely in user
mode. Because of efﬁciency considerations, the RISE and
the protected process both reside in the same memory space,
which is a vulnerability, given that a RISE-aware attack act-
ing in the same memory space can subvert emulator struc-
tures.
RISE operates in two steps: (a) After the protected pro-
cess has been loaded into memory, all executable portions
of the process (including shared libraries) are scrambled by
xor-ing each byte of the process’ code with a mask. The
mask could be created ahead of the scrambling, or on de-
mand; and (b) During emulator-mediated fetch the origi-
nal instructions are recovered by xor-ing the corresponding
mask against the scrambled instruction.
The protective effect of RISE rests on the fact that in-
jected code is expressed in cleartext, and therefore is scram-
bled during fetch. At a higher level, the rationale is that the
process is running in its own “language”, and foreign (in-
jected) code is not, making the execution of the attacking
instructions impossible.
RISE has two modes of operation. One is a tiled mode, in
which a random mask of two or more pages is generated be-
fore execution begins, and every byte of code is scrambled
(xor-ed) with a byte in the mask table. The other mode uses
a one-time pad (OTP), by generating a unique mask for ev-
ery code page, which results in allocation of mask space the
size of the code. In this mode, the mask is generated lazily
per-page, upon ﬁrst access. In both modes, the security of
the solution is based on the secrecy of the mask, which is in
effect the cryptographic key, and therefore a possible way
for a RISE-aware attack to succeed is by either leaking or
guessing the key. We review existing exploit techniques that
could be used to achieve this goal next.
2.2. Exploit types
There are two issues to consider when examining RISE-
aware attacks: the ﬁrst is whether there is some way of un-
dermining the structure of RISE to execute code, and the
second is how likely are we to ﬁnd a vulnerability in the
wild that enables the attack. One way of assessing this like-
lihood would be to show that there is a way to construct the
attack for most classes of low-level vulnerabilities. There-
fore, we brieﬂy review the possible vulnerabilities here.
The ﬁrst observation is that for leaking the mask it is
enough to ﬁnd a pointer to a structure that will eventually be
sent back to the user (e.g. an error or data-displaying string),
and redirect this pointer to either the mask or the code area.
These pointers can be found in the stack, and other data ar-
If the process sends data back to the
eas of the process.
user at any time, there is at least one such pointer some-
where. The second observation is that a hybrid data-code
attack could work if the data structures of RISE could be
subverted prior to executing code. In both cases, an attack to
change a pointer does not require the execution of any code,
so RISE will not interfere. Chen et al. [5] presented evi-
dence of the feasibility of data-only attacks and the ubiquity
of vulnerabilities that allow them. Karger and Schell [9]
showed several real alternatives. If the attacker has access
to a format string vulnerability, data can be leaked from an
arbitrary location by using the correct combination of con-
version speciﬁers [15]. It is also possible in some cases to
turn a stack vulnerability in which no useful pointers could
be found into a format string vulnerability by using Dur-
den’s technique [6].
In sections 3, and 4, we will show with speciﬁc attacks
how these exploits can be used to bypass RISE.
3. Known-Key Attacks
The ﬁrst type of attack against RISE we will explore is the
stealing of the mask, as it is the more natural approach.
There are two sources for this information: the mask itself,
and the scrambled code. In Section 3.1 we explore the pos-
sible ways for obtaining the mask from the structures that
store it, and in Section 3.2 the extraction of the key from the
scrambled code is examined.
3.1. Direct key extraction
Although the mask is not hidden deeply in the process, a
complicating detail is that to “steal” the key for the memory
area where the injected code will run, this key has to exist,
and in RISE this is not always the case. In one time pad
(OTP) mode, RISE generates the key lazily: if the memory
area is not part of pre-existing code areas, the key for that
area simply does not exit. In tiled mode, the key pre-exists,
but there is a small uncertainty about which tile would be
used for a particular memory area. However, even in OTP
mode the laziness works on page-sized chunks, so parts can
still be stolen. We will study the stealing of a tiled mask
ﬁrst, and then consider the OTP case.
In tiled-mode,
the
entire mask is
read from
/dev/urandom before the executable is mapped to
memory, so unless an additional memory randomization
is used, the mask appears right before the executable in
memory, in a ﬁxed location. Several methods could be
used to steal the mask and use it to properly scramble the
attack code. We will show two examples: one using a
format-string vulnerability, and another one using a stack
overﬂow.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20063.1.1 Tiled-Mode key stealing using format strings
Our ﬁrst example uses a format-string attack. Consider the
following trivial format-string vulnerability:
main(){
char x[1000];
while (fgets(x,1000,stdin))
printf(x);
}
A typical code-injection exploit would change the ad-
dress of fgets() or printf() to point to an address
], append a sled of NOPs
somewhere in the middle of x[
followed by a shellcode, and wait for the string function to
be called, which will execute the injected code. Such an ex-
ploit will not work with RISE because the shellcode will be
scrambled upon fetch, and the CPU will end up executing
random instructions, likely to result in a crash.
A RISE-aware attacker could use the following strategy
instead: ﬁnd the mask corresponding to the exploit loca-
tion inside x[ ], scramble the exploit code using the stolen
mask, and then use the traditional exploit. To ﬁnd the mask,
it just needs to ﬁnd address of the relevant mask, and dis-
play it (with %s). SA, the address of the speciﬁc piece of
mask for the shellcode is given by Equation 1, where PA
is the page address of SA, TN is the tile number used for
the shellcode address, P sz is the page size, and SO is the
shellcode offset.
SA = PA + TN × P sz + SO
(1)
The only unknown in Equation 1 is TN , which is a num-
ber between zero and the maximum number of mask pages.
For a mask-size of 8192 (two pages), TN can be 0 or 1,
so it can be guessed with 0.5 probability of success. Note
that a more sophisticated exploit could avoid any guesswork
by dumping the table that associates mask pages to code
pages, and checking which mask page corresponds to the
page where the shellcode is stored.
The mask string returned to the attacker must be as long
as the shellcode. However, since strings returned via format
strings will stop the data dump when encountering a null
character, a zero in the mask may cause the returned value
to be too short for the needs of the attacker. This limitation
can be circumvented in several ways:
1. Iteratively retrieving zero-enclosed chunks of
the
mask: If the attacker gets a string of N bytes, byte
N + 1 must be zero. The data dumping can be re-
peated using the address of N + 2, and so on, until
enough bytes are retrieved.
2. Extracting a different part of the mask, in an attempt
to ﬁnd a chunk large enough without zeros. The shell-
code has to be moved to align it up with the recovered
mask.
3. Using a two-phased shellcode, where the ﬁrst part is
small enough to be used with the extracted mask, and
then using it to load and scramble the second (larger)
part of the shellcode.
4. Trying again on another instance of the server (assum-
ing it forks), until ﬁnding a mask large enough without
zeros.
Appendix A in [20] shows the python script we used to
test a successful exploit against RISE based on this method.
3.1.2 Tiled-Mode key stealing using stack overﬂow
Although format string vulnerabilities offer the most conve-
nient way to steal the key, the attack can also be executed
using a stack or heap overﬂow vulnerability, and can be gen-
eralized to other pointer corruption vulnerabilities. As in
the previous section, we will use a toy stack vulnerability as
reference:
void f() {
char *p;
char buf[100];
p = buf; gets(buf);
while (*p) putchar(*p++);
putchar(’\n’);
fflush(stdout);
while(!feof(stdin)) f();
}
main() {
}
The most common code-injection exploit would send a
shellcode, pad all the way to the return address of f( ),