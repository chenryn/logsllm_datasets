If you scale the errors fed into curve_fit, the error returned does not
change. This is incorrect behavior. The error (variance and covariance) for a
final fit parameter should increase given an increased uncertainty in the
actual measured data.
I created a gaussian curve fitting routine. I then show one version
functioning as expected, and another version with error increased by a factor
of 1e10. The increase in 1e10 should be reflected in the variance/covariance
for all fitted parameters. It remains constant:
    #!/usr/bin/env python
    import numpy as np
    import matplotlib.pyplot as plt
    import collections as col
    import scipy as sp
    import scipy.optimize as spopt
    plt.close('all')
    def _gaussvar(x,amp,mu,variance,bg=0):
        return amp*np.exp(-(x-mu)**2/(2*variance))+bg
    def iter(factor):
        # Generate random numbers with gaussian
        # distribution, mu=0, sigma = 3
        x=np.random.randn(10000)*3
        # Bin the counts
        bins = 50
        h,edge = np.histogram(x,bins=bins)
        # Find the midpoints of the bins
        mids = edge + (edge[1]-edge[0])/2
        mids = mids[:-1]
        # Expected error in counts is sqrt(counts)
        sigma = np.sqrt(h)*1
        # Error of zero counts isn't zero, but less than one.
        # Use 0.5 as a guess.
        sigma[sigma==0] = 0.5
        # Factor scales error, which should cause
        # the pcov matrix to change
        sigma = sigma*factor
        # Fit the histogram to a gaussian
        # popt,pcov,red_chisq = mt.gaussfit(mids,h,sigma_y=sigma,plot=True,variance_bool=True)
        # Find initial guesses
        y=h
        x=mids
        amp = max(y)
        mu  = sum(x*y)/sum(y)
        variance = sum(x**2 * y)/sum(y)
        bg  = 0
        p0 = np.array((amp,mu,variance,bg))
        # Do actual curve fit
        func = _gaussvar
        popt,pcov = spopt.curve_fit(func,x,y,sigma=sigma,p0=p0)
        output = col.namedtuple('iterout',['popt','pcov'])
        out = output(popt,pcov)
        return out
    num_samples       = 1000
    variances_regular = np.ones(num_samples)
    variances_large   = np.ones(num_samples)
    means_regular     = np.ones(num_samples)
    means_large       = np.ones(num_samples)
    for i in np.linspace(1,num_samples,num_samples)-1:
        out                  = iter(1)
        means_regular[i]     = out.popt[2]
        variances_regular[i] = out.pcov[2,2]
        out                = iter(1e10)
        means_large[i]     = out.popt[2]
        variances_large[i] = out.pcov[2,2]
    plt.hist(variances_regular,bins=20)
    plt.hist(variances_large,bins=20)
    plt.show()
See also:  
![figure_1](https://camo.githubusercontent.com/20fa166fa0165bcdeabab6c7e4005e9e37ae5c3737cfc2a7251ef7b958ff493e/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3435383837312f313334363734342f36626233336166652d333661352d313165332d383639312d3261666166376531353332362e6a7067)
https://github.com/joelfrederico/GaussFitDemo