```
type: {{ .Values.service.type }}
```
根据`service.type`值，该服务将默认为具有`ClusterIP`服务类型，如`values.yaml`文件所示，如下所示:
```
service:
  type: ClusterIP
```
对于`guestbook`图表，我们将修改该值，改为创建一个`NodePort`服务。通过在 minikube **虚拟机** ( **虚拟机**)上公开一个端口，这将允许在 minikube 环境中更容易地访问应用。一旦连接到端口，我们就可以访问留言簿前端。
请注意，虽然`helm create`生成了一个也允许访问的`ingress.yaml`模板，但在 minikube 环境中工作时，更推荐使用`NodePort`服务，因为不需要附加组件或增强功能。幸运的是，生成的图表默认禁用入口资源创建，因此不需要任何操作来禁用该功能。
现在我们已经确定了需要更改的默认设置，让我们首先更新`values.yaml`文件，如下所示:
1.  更换`image.repository`值，使其设置为`gcr.io/google-samples/gb-frontend`。整个`image:`节现在应该如下所示:
    ```
    image:
      repository: gcr.io/google-samples/gb-frontend
      pullPolicy: IfNotPresent
    ```
2.  更换`service.type`值，使其设置为`NodePort`。整个`service:`节现在应该如下所示:
    ```
    service:
      type: NodePort
      port: 80
    ```
3.  您可以通过参考 Packt 存储库中的 fi [文件来验证您的`values.yaml`文件是否已被正确修改，网址为 https://github . com/Packtpublishing/-Learn-Helm/blob/master/Helm-chart](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/values.yaml)s/charts/guest book/values . YAML
接下来，让我们更新`Chart.yaml`文件，以便部署正确的留言簿应用版本，如下所示:
1.  替换`appVersion`字段，使其设置为`v4`。`appVersion`字段现在应该如下所示:
    ```
    appVersion: v4
    ```
2.  您可以通过参考位于 https://github . com/Packt publishing/-Learn-Helm/blob/master/Helm-charts/charts/guest book/chart . YAML 的 Packt 存储库中的 fi [le 来验证您的`Chart.yaml`文件是否已被正确修改](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/Chart.yaml)
现在，图表已经用正确的值和设置进行了更新，让我们通过将其部署到 minikube 环境来查看这个图表的运行情况。
## 安装留言簿图表
要安装您的`guestbook`图表，请在您的`guestbook/`目录外运行以下命令:
```
$ helm install my-guestbook guestbook -n chapter5
```
如果安装成功，将显示以下消息:
```
NAME: my-guestbook
LAST DEPLOYED: Sun Apr 26 09:57:52 2020
NAMESPACE: chapter5
STATUS: deployed
REVISION: 1
NOTES:
1\. Get the application URL by running these commands:
  export NODE_PORT=$(kubectl get --namespace chapter5 -o jsonpath='{.spec.ports[0].nodePort}' services my-guestbook)
  export NODE_IP=$(kubectl get nodes --namespace chapter5 -o jsonpath='{.items[0].status.addresses[0].address}')
  echo http://$NODE_IP:$NODE_PORT
```
安装成功后，您可能会发现留言簿和 Redis PODS 没有立即处于`Ready`状态。当 Pod 没有准备好时，它还不能被访问。
您也可以通过传入`--wait`标志来强制 Helm 等待这些 Pod 准备就绪。`--wait`标志可以与`--timeout`标志一起使用，以增加 Helm 等待 Pod 准备就绪的时间(秒)。默认值设置为 5 分钟，这对于该应用来说已经足够了。
通过检查每个 Pod 的状态，您可以确保所有 Pod 都准备好了，而没有`--wait`标志，如下所示:
```
$ kubectl get pods -n chapter5
```
当每个 Pod 准备就绪时，您将能够观察到每个 Pod 在`READY`列下报告`1/1`，如下图所示:
![Figure 5.4: Output of kubectl get pods –n chapter5 when each Pod is ready  ](img/Figure_5.4.jpg)
图 5.4:当每个 Pod 准备好的时候，kubectl get pods 的输出–第 5 章
一旦 Pod 准备就绪，您就可以运行发行说明中显示的命令。如有必要，可通过运行以下代码再次显示它们:
```
$ helm get notes my-guestbook -n chapter5
NOTES:
1\. Get the application URL by running these commands:
  export NODE_PORT=$(kubectl get --namespace chapter5 -o jsonpath='{.spec.ports[0].nodePort}' services my-guestbook)
  export NODE_IP=$(kubectl get nodes --namespace chapter5 -o jsonpath='{.items[0].status.addresses[0].address}')
  echo http://$NODE_IP:$NODE_PORT
```
将留言簿网址(从`echo`命令输出)复制粘贴到浏览器中，应显示留言簿**用户界面** ( **UI** )，如下图截图所示:
![Figure 5.5: The Guestbook frontend ](img/Figure_5.5.jpg)
图 5.5:留言簿前端
尝试在对话框中输入消息，点击**提交**。留言簿前端会在**提交**按钮下显示消息，表示消息已经保存到 Redis 数据库，如下图截图所示:
![Figure 5.6: The Guestbook frontend displaying a previously sent message ](img/Figure_5.6.jpg)
图 5.6:留言簿前端显示先前发送的消息
如果你能够写一条消息，并看到它显示在你的屏幕上，那么你已经成功地建立和部署了你的第一个 Helm 图表！如果您看不到您的消息，可能是您的 Redis 依赖设置不正确。在这种情况下，请确保您的 Redis 值已经正确配置，并且您的 Redis 依赖关系已经在`Chart.yaml`文件中正确声明。
准备好之后，使用`helm uninstall`命令卸载该图表，如下所示:
```
$ helm uninstall my-guestbook -n chapter5
```
您还需要手动删除 Redis**persistentvolumeclays**(**PVCs**)，因为 Redis 依赖关系通过使用`StatefulSet`使数据库持久化(删除时不会自动删除 PVCs)。
运行以下命令删除 Redis PVCs:
```
$ kubectl delete pvc -l app=redis -n chapter5
```
在下一节中，我们将探索如何改进`guestbook`图表。
# 改进留言簿 Helm 图表
上一节中创建的图表能够成功部署留言簿应用。然而，就像任何类型的软件一样，Helm 图表总是可以改进的。在本节中，我们将重点介绍以下两个将改进`guestbook`图表的功能:
*   生命周期挂钩来备份和恢复 Redis 数据库
*   输入验证，以确保仅提供有效值
让我们首先关注添加生命周期挂钩。
## 创建升级前和回滚前生命周期挂钩
在本节中，我们将创建两个生命周期挂钩，如下所示:
1.  第一个钩子将出现在`pre-upgrade`生命周期阶段。这个阶段在`helm upgrade`命令运行后立即发生，但是在任何 Kubernetes 资源被修改之前。此挂钩将用于在执行升级之前拍摄 Redis 数据库的数据快照，以确保数据库在升级出错时得到备份。
2.  第二个钩子将出现在`pre-rollback`生命周期阶段。这个阶段发生在`helm rollback`命令运行之后，但是在任何 Kubernetes 资源被恢复之前。这个钩子将把 Redis 数据库恢复到以前拍摄的数据快照，并确保 Kubernetes 资源配置被恢复到与拍摄快照时相匹配的状态。
到本节结束时，您将更加熟悉生命周期挂钩以及可以使用它们执行的一些强大功能。请务必记住，本节中创建的钩子非常简单，仅用于探索 Helm 钩子的基本功能。不建议在生产环境中尝试逐字使用这些钩子。
让我们来看看如何创建`pre-upgrade`生命周期挂钩。
### 创建升级前挂钩以拍摄数据快照
在 Redis 中，数据快照包含在`dump.rdb`文件中。我们可以通过创建一个钩子来备份这个文件，这个钩子首先在 Kubernetes 命名空间中创建新的 PVC。钩子可以创建一个`job`资源，将`dump.rdb`文件复制到新的`PersistentVolumeClaim`中。
虽然`helm create`命令生成了一些强大的资源模板，允许快速创建初始的`guestbook`图表，但它并没有提供任何可用于此任务的钩子。因此，您可以按照以下步骤从头开始创建升级前挂钩:
1.  First, you should create a new folder to contain the hook templates. While this is not a technical requirement, it does help keep your hook templates separate from the regular chart templates. It also allows you to group the hook templates by function.
    在您的`guestbook`文件结构中创建新文件夹`templates/backup`，如下所示:
    ```
    $ mkdir guestbook/templates/backup
    ```
2.  Next, you should scaffold the two templates required to perform the backup. The first template required is a `PersistentVolumeClaim` template that will be used to contain the copied `dump.rdb` file. The second template will be a job template that will be used to perform the copy.
    创建两个空模板文件作为占位符，如下所示:
    ```
    $ touch guestbook/templates/backup/persistentvolumeclaim.yaml
    $ touch guestbook/templates/backup/job.yaml
    ```
3.  您可以通过引用 Packt 存储库来再次检查您的工作。您的文件结构应该与在 https://github . com/PacktPublishing/-Learn-Helm/tree/master/Helm-chaRTS/charts/guest book/templates/backup 找到的结构相同。
4.  Next, let's create the `persistentvolumeclaim.yaml` template. Copy the contents of the file below to your `backup/persistentvolumeclaim.yaml` file (this file can also be copied from the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/backup/persistentvolumeclaim.yaml. Keep in mind that whitespace consists of `spaces`, not tabs, as per valid YAML syntax. The contents of the file can be seen here:
    ![Figure 5.7: The backup/persistentvolumeclaim.yaml template ](img/Figure_5.7.jpg)
    图 5.7:备份/persistentvolumeclaim.yaml 模板
    在继续之前，让我们浏览一下`persistentvolumeclaim.yaml`文件的一部分，以帮助理解它是如何创建的。
    本文件的第 1 行和第 17*行由一个`if`动作组成。因为动作封装了整个文件，所以它表示只有当`redis.master.persistence.enabled`值设置为`true`时，才会包含该资源。该值默认为 Redis 依赖图中的`true`，可以使用`helm show values`命令进行观察。*
    *5 号线*确定新 PVC 备份的名称。它的名字基于 Redis 依赖图创建的 Redis 主 PVC 的名字，也就是`redis-data-redis-master-0`，所以很明显这是哪个 PVC 的备份。其名称也基于修订号。因为此挂钩是作为升级前挂钩运行的，所以它将尝试使用升级到的修订号。`sub`功能是用来从这个修订号中减去`1`，所以很明显这个 PVC 包含了上一个修订的数据快照。