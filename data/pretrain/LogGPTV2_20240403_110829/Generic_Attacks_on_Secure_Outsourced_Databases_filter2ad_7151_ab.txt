structure DS.1
Query protocol Πquery: U has as input a query q ∈ Q
and the key K produced in the setup protocol; S has as
input DS produced in the setup protocol. The output
for U is q(D); S has no formal output.
We note that our model is somewhat similar to the notion
of structured encryption due to Chase and Kamara [14], but
is more general and applies more easily to general protocols
for outsourced database systems.
Atomic Systems. We also deﬁne the special case that the
outsourced database system is atomic in the following sense:
1. DS = (DS1,DS2) where DS1 = (c1, . . . , cn(cid:48)} con-
tains encrypted records and DS2 depends solely on
(sk1, . . . , skn) (but not on the content of r1, . . . , rn).
For correctness, DS1 should contain at least one en-
crypted copy of each of the records r1, . . . , rn. It may
also contain additional encryptions of records in the
database or encryptions of dummy records (hence, gen-
erally n(cid:48) ≥ n).
2. The communication sent from S to U consists of ele-
ments of DS1 plus information that depends solely on
DS2 (and hence does not depend on r1, . . . , rn).
Static and Non-Static: For simplicity of exposition, the
above refers more speciﬁcally to the static atomic case: there
are no updates to D beyond initial setup, and, furthermore,
no updates to DS while queries are made. More generally,
we can allow U and S in Πquery to also take as inputs their
current states and output new states. This in particular
allows them to modify the query key K and DS, respectively.
1More formally, both U, S also have as input a security
parameter.
Non-Storage-Inﬂating: In the case that n = n(cid:48) above
(and hence the server-side storage contains no additional
encryptions of records in the database or dummy records)
we say the protocol is non-storage inﬂating. We observe that
most of the existing practical systems such as CryptDB and
Cipherbase are non-storage-inﬂating.
Fixed Communication Overhead. In the general (not nec-
essarily atomic) setting we deﬁne another class of outsourced
database systems we call ﬁxed communication overhead. We
say that an outsourced database system for Q has ﬁxed com-
munication overhead if for any database D of size n there are
constants α and β (depending only on the security parameter
and n) such that for any sequence of queries q1, . . . , qk ∈ Q,
after Πsetup is run on D and Πquery is run on qi for each
i = 1 to k, the length of communication from S to U on the
i-th execution of Πquery is α · |qi(D)| + β.2
2.2 Adversarial models
We present generic attacks on the privacy of secure out-
sourced databases by an honest-but-curious S. Intuitively,
we want to guarantee that all S can learn is some well deﬁned
“leakage.” As discussed above, this typically includes the
pattern of accesses to encrypted records in DS1, or the num-
ber of records retrieved by U in every execution of Πquery.
To be more general, we follow a formalization of Chase and
Kamara [14] in the context of “structured encryption.”
For an outsourced database system Π, assume a ﬁxed
database sampling algorithm databaseGen, query sampling
algorithm QueryGen, leakage functions Lsetup,Lquery, and
simulator Sim. Consider the following experiments3:
Real Experiment: Sample D ← databaseGen where D =
{(r1, sk1), . . . , (rn, skn)} and run Πsetup(D,⊥). Then,
repeat the following until S halts: Sample q ← QueryGen
and run Πquery(q,DS). The output of the experi-
ment is the output of S.
Ideal Experiment: Sample D ← databaseGen where D =
{(r1, sk1), . . . , (rn, skn)} and give Lsetup(D) to Sim.
Then, repeat the following until Sim halts: Sample
q ← QueryGen, run Lquery(q, sk1, . . . , skn), and give
the result to Sim. The output of the experiment is the
output of Sim.
Definition 2.2. We say that outsourced database system
Π is (Lsetup,Lquery)-secure if there is a simulator Sim
such that for any databaseGen, QueryGen the output distri-
butions of the above experiments are computationally indis-
tinguishable.
Above Lsetup is called the “setup leakage” and Lquery
is called the “query leakage.” We identify the fundamental
leakage channels of outsourced database systems as special
cases of the query leakage.
Access Pattern Leakage: In the case of Lquery for an
atomic outsourced database system, we deﬁne the special
2The experiment is somewhat informal here with the inputs
of the parties implied. The actual inputs follow the same
format as the security deﬁnitions presented in Section 2.2.
3We leave the search key domain D and collection of queries
Q supported by Π implicit for readability, and assume that
subsequent sampling algorithms output elements from the
right sets.
case Laccess (called “access pattern leakage”) that outputs
a subset of S ⊆ [n(cid:48)] corresponding to indices in DS1 =
(c1, . . . , cn(cid:48) ) encrypting a record matching the query, i.e.,
S contains exactly those indices i ∈ [n(cid:48)] for which ci is an
encryption of some rj such that rj ∈ q(D).
Communication Volume Leakage: In the general (not
necessarily atomic) setting, we also deﬁne the special case
Lcomm (called “communication volume leakage”) that out-
puts |q(D)|. Note that in the case of an atomic outsourced
database system, this corresponds to |S| above.
Leakage of atomic systems and ﬁxed communication
overhead. We observe that static, atomic, and non-storage-
inﬂating outsourced database systems leak the access pat-
tern, i.e., their query leakage includes Laccess. This in-
cludes practical systems based on searchable symmetric en-
cryption or on deterministic and order-preserving encryp-
tion. Similarly, outsourced database protocols with ﬁxed
communication overhead leak the communication volume,
i.e., their query leakage includes Lcomm. This includes “full-
ﬂedged” protocols based on FHE or ORAM in the natural
way.
Remark 2.3. While some speciﬁc implementations of out-
sourced database systems may also leak to S information
about the query q and sk1, . . . , skn, aiming for generality
we ignore this additional leakage in our attacks.
2.3 Reconstruction attacks
We will be mostly interested in reconstruction attacks [18]
blatant non-privacy) on outsourced database sys-
(a.k.a.
tems. In a reconstruction attack, an adversary exploits leak-
age to recover the search keys. As it is possible to encrypt
the database records with a semantically secure encryption
scheme, a reconstruction attack results in the maximum in-
formation an attacker could learn about the database. The
existence of a reconstruction attack hence demonstrates a
complete failure of the outsourced database system to keep
the dataset private beyond what is achieved by storing the
encrypted records with cleartext indexing information.4 Our
goal will be to demonstrate the existence of reconstruction
attacks with a weak adversary: passive, with no prior knowl-
edge about the dataset, and with no ability to decipher the
queries issued by U.
a guess { ˆsk1, . . . , ˆskn}.
Namely, consider the ideal experiment where Sim outputs
Definition 2.4. Outsourced database system Π is said
to be (α, β)-reconstructible w.r.t. databaseGen, QueryGen,
Lsetup, Lquery if Sim’s output { ˆsk1, . . . , ˆskn} satisﬁes
[|{sk1, . . . , skn} ∆ { ˆsk1, . . . , ˆskn}| ≤ αn] ≥ 1 − β,
Pr
Sim
where ∆ denotes symmetric set diﬀerence. If α = 0 and β
is inverse polynomial, we say that Π is fully reconstructible
(w.r.t. databaseGen, QueryGen, Lsetup, Lquery) .
Remark 2.5. When our attack algorithms succeed they
produce two candidate search key sets one of which is exactly
{sk1, . . . , skn} and the other is its reﬂection over the domain
[1, . . . , N ], i.e., {N − sk1, . . . , N − skn}.
4We note, however, that the existence of a reconstruction
attack does not always preclude hiding the queries.
Note that the above models the scenario that the adver-
sary possibly knows the distributions of either the data or
the queries (or both), but does not directly learn the issued
queries or their results. Thus, we consider a relatively weak
adversarial model for reconstruction attacks.
In fact, our
main reconstruction attacks only use adversarial knowledge
of the distribution of queries and the data can be arbitrary.
In contrast to previous attacks on speciﬁc systems [30, 36,
11, 38], our goal is to capture the fundamental leakage rather
than the weaknesses of a speciﬁc implementation, database,
or cryptographic tool.
To summarize, we consider a passive attacker that does
not bring her previous domain knowledge (e.g., no assump-
tions on the data distribution), cannot aﬀect the dataset
(e.g., by injecting records), and does not directly query the
database. We assume that the adversary knows the domain
size, the total number of records, and that the output of
QueryGen is uniform. Finally, the adversary can only ob-
serve the encrypted answers of queries.
In the sequel, we devise reconstruction attacks on out-
sourced database systems for range queries. We ﬁrst con-
sider the leaked access pattern model (Section 3), and then
the leaked communication volume model (Section 4).
3. ATTACK USING THE ACCESS PATTERN
We present an attack using access pattern leakage, i.e., as-
suming the query leakage Lquery includes Laccess. Such
leakage is typical for current systems based on deterministic
primitives such as order-preserving encryption, or on sym-
metric searchable encryption.
Attack Overview. Assume that the database consists of n
records and sk1, . . . , skn are their (unknown) search keys
(i.e., positions in the domain X = {1, . . . , N}). Let i1, . . . , in
be the actual order of sk1, . . . , skn. We assume for sim-
plicity that there is at most one record per position, but
the attack trivially extends to the general case. The algo-
rithm initially determines its guess for the order of the sets
of records, ˆi1, . . . ,ˆin. This could be done using the method
of [16], but we give a simpler and more eﬃcient method us-
ing our assumption on the query distribution. Namely, the
algorithm ﬁrst samples enough queries so that all subsets
of indices that can match a query are returned with high
probability. It determines ˆi1 by searching the query results
for the largest proper subset of the set of all indices, taking
ˆi1 to be the symmetric diﬀerence of the two. Given ˆi1, it
determines ˆi2 by searching the query results for the smallest
proper superset of ˆi1. In general, given ˆi1, . . . ,ˆij−1, the al-
gorithm determines ˆij by searching the query results for the
smallest proper superset of ˆi1, . . . ,ˆij−1.
If we have at least one record per a domain position (i.e.,
no empty domain positions), then, recovering the order suf-
ﬁces for the reconstruction attack. Otherwise, we have to
determine the position of each record in the domain, in order
to identify which positions are empty. Towards this, after
determining the order, the attack determines its guess for
the exact positions of the records, ˆsk1, . . . , ˆskn by exploit-
ing the uniformity of the QueryGen. Speciﬁcally, it utilizes
the number of queries that include only the records at po-
sitions ski1
ski2 , . . . , skij , which is unique for each domain
position.
Interestingly, this phase of the attack does not
use the order of the records beyond the ﬁrst record, but we
include order recovery because it suﬃces in the case that
the records are dense in the domain. The pseudocode and
detailed description of the attack are in Appendix B.
Next, we show the correctness of the attack and bounds on
the number of required queries p1 for recovering the order,
and p2 for recovering the positions.
Main Result. To showcase the attack, we prove the follow-
ing theorem.
Theorem 3.1. Let Π be an outsourced database system
for range queries with access pattern leakage. Then, Π is
fully reconstructible wrt. databaseGen, QueryGen, Lsetup,
and Laccess, where the output of QueryGen is uniform, and
databaseGen and Lsetup are arbitrary. The reconstruction
algorithm requires O(N 4 log N ) queries.
We note that if the records are dense in the domain, re-
covering only the order suﬃces for a reconstruction attack,
in which case we require only O(N 2 log N ) queries. This is
why we include full order recovery in the attack.
Proof. The theorem follows via Claims 3.2 and 3.3.
Claim 3.2. Let p1 = O(N 2 log N ). Then, an execution
of GetOrderO (see Appendix B) returns the correct output
(up to reﬂection) with inverse polynomial probability.
Proof. The claim follows by the coupon collector’s prob-
lem.
Claim 3.3. Let p2 = O(N 4 log N ). Then, assuming i1 is
correctly recovered (up to reﬂection), an execution of GetDistO
(see Appendix B) returns the correct output (up to reﬂection)
with inverse polynomial probability.
Proof. See Appendix C.
A Matching Lowerbound. To conclude this section, we
show the optimality of our attack in terms of the number of
queries that need to be observed.
Theorem 3.4. Assume uniform output of QueryGen. There
exists a distribution databaseGen such that no outsourced
database system for range queries that leaks the access pat-
tern is fully reconstructable w.r.t. databaseGen, QueryGen,
Lsetup, Laccess, with O(N 4) queries, where Lsetup is
arbitrary.
Proof. The proof derives directly from Claim D.1 in the
Appendix D
4. ATTACK USING THE COMMUNICATION
VOLUME
Access pattern attacks can be avoided using cryptographic
tools such as Oblivious RAM and Fully Homomorphic En-
cryption, and it is tempting conclude that such measures
suﬃce to prevent reconstruction attacks against outsourced
database systems. However, here we show that such an
attack assuming that the query leakage Lquery includes
Lcomm.
Attack Overview. Let n be the total number of records.
We label them according to their order in the domain as
Figure 1: Dataset example
record 1, 2, . . . , n, and their positions as 1 ≤ sk1 ≤ sk2 ≤
··· ≤ skn ≤ N . Deﬁne
 sk1
di =
i = 0
ski+1 − ski
1 ≤ i ≤ n − 1
N − skn + 1 i = n
(Equivalently, extend the range to also include the points
0 and N + 1 and assume two additional “fake” records on
these locations, i.e., sk0 = 0 and skn+1 = N + 1 and deﬁne
di = ski+1−ski). Figure 1 shows an example for N = 8 and
n = 4 where dots represent the domain positions, and each
box represents a record. The positions of the records are
sk1 = 2, sk2 = 4, sk3 = 7, and sk4 = 8, and we compute
d0 = sk1 = 2, d1 = sk2 − sk1 = 2, d2 = sk3 − sk2 = 3,
d3 = sk4 − sk3 = 1, and d4 = 8 − sk4 + 1 = 1.
queries q[a,b] where 1 ≤ a ≤ b ≤ N . We ﬁrst determine the
number of distinct queries that return 0 < i ≤ n records:
(cid:1) + N = N (N + 1)/2 distinct interval
There are exactly(cid:0)N
2
number of distinct queries (out of(cid:0)N
number of distinct queries (out of(cid:0)N
that return i records.
2
(cid:1) + N )
(cid:1) + N )
Similarly, let
ui =
ˆu0 =
that return no records.
2
Then, we can express u1, . . . , un and ˆu0 in terms of the
values di. Speciﬁcally,
d0 · dn = un.
queries (q[1,N ] and q[2,N ]) out of the(cid:0)N
2
(cid:1) + N would include
For example, if d0 = 2 and dn = 1 as in Figure 1, then two
these two (and hence all) records. Similarly, we get
d0 · dn−1 + d1 · dn = un−1
d0 · dn−2 + d1 · dn−1 + d2 · dn = un−2
d0 · d1 + d1 · d2 + ··· + dn−1 · dn = u1.
...
m(cid:88)
The number of queries ˆu0 that return no records is a special
case, and we add the equation
1 + . . . + d2
n = 2 · ˆu0 + N + 1.
d2
0 + d2
By setting u0 = 2 · ˆu0 + N + 1, we get the following system
of n + 1 quadratic equations over the non-negative integers:
di · dn−(m−i) = un−m for m ∈ [0, n].
(1)
i=0
We now show how to solve this system of quadratic equa-
tions. Consider the polynomial