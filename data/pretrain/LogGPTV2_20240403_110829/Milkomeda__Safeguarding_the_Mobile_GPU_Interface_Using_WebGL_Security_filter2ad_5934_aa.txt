# Milkomeda: Safeguarding the Mobile GPU Interface Using WebGL Security Checks

**Authors:** Zhihao Yao, Saeed Mirzamohammadi, Ardalan Amiri Sani, Mathias Payer  
**Affiliations:** UC Irvine, EPFL, and Purdue University

## Abstract
Graphics processing units (GPUs) are widely used in mobile applications to accelerate graphics. However, the GPU interface exposes a significant amount of potentially vulnerable kernel code (i.e., the GPU device driver) to untrusted applications, leading to numerous reported vulnerabilities. We observe that web browsers have addressed similar issues with WebGL, a framework for web applications, by implementing robust security checks. 

We introduce Milkomeda, a system that repurposes these WebGL security checks to protect the mobile graphics interface. Our approach involves minimal modifications, which we automate using a tool called CheckGen, significantly reducing engineering effort. Additionally, we propose an in-process shield space for deploying these checks, improving graphics performance by eliminating the need for Inter-Process Communication (IPC) and shared memory data transfer, while ensuring the integrity of the security checks. Our evaluation shows that Milkomeda achieves near-native GPU performance with a reasonable increase in CPU utilization.

## CCS Concepts
- **Security and Privacy:** Systems security, Operating systems security, Mobile platform security, Browser security

## Keywords
- Mobile Graphics Security
- WebGL Security

## ACM Reference Format
Zhihao Yao, Saeed Mirzamohammadi, Ardalan Amiri Sani, Mathias Payer. 2018. Milkomeda: Safeguarding the Mobile GPU Interface Using WebGL Security Checks. In *CCS '18: 2018 ACM SIGSAC Conference on Computer & Communications Security*, October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3243734.3243772

## 1. Introduction
Mobile GPUs have achieved performance levels comparable to dedicated gaming machines, making them essential for various high-performance applications such as games, 3D apps, AR apps, and high-fidelity user interfaces. These applications typically access the GPU through the OpenGL ES API, a subset of the OpenGL API designed for embedded systems.

However, allowing untrusted applications to use the GPU has led to serious security issues. The GPU device driver, which is a large and complex piece of kernel code (e.g., 32,000 lines of code for the Qualcomm Adreno driver), is exposed to unprivileged applications. This exposure enables malicious apps to directly interact with the device driver, potentially triggering deep vulnerabilities that can compromise the entire system.

Historically, GPU-accelerated applications on desktops, such as games, video decoders, and parallel computational workloads, were developed by trusted entities. On mobile devices, however, apps are untrusted and run in a sandboxed environment. Despite this, direct access to the GPU device driver remains necessary for optimal performance, leaving system designers to balance security and performance.

Web browsers have faced a similar challenge with WebGL, which provides GPU acceleration to untrusted web applications. To mitigate this, browsers implement runtime security checks and maintain state across WebGL calls. These checks, based on the OpenGL ES specification and new vulnerabilities, ensure that only valid API interactions are allowed, effectively reducing the attack surface.

Browser vendors have invested significant resources in developing these security checks. Milkomeda leverages these checks to protect the mobile graphics interface without reinventing the wheel.

### Figure 1
(a) Graphics stack in a mobile operating system. (b) WebGL stack in a web browser. (c) Graphics stack in Milkomeda.

## 2. Background and Motivation

### 2.1 Current Graphics Stack in Mobile Devices
Mobile applications use the OpenGL ES API to leverage GPU acceleration. The OpenGL ES library, provided by the GPU vendor, handles standardized API calls and interacts with the GPU device driver in the kernel via system calls. For example, in Android, this is done by issuing syscalls on a device file (e.g., `/dev/kgsl-3d0` for the Adreno GPU in a Nexus 5X).

This architecture is vulnerable to attacks because:
1. Apps can directly interact with the GPU device driver, exposing a large and easy-to-exploit attack surface.
2. The OpenGL ES API itself is not designed with security in mind, leading to potential vulnerabilities.

### 2.2 Mobile Graphics Vulnerabilities
We studied Android GPU vulnerabilities by searching the National Vulnerability Database (NVD). Table 1 lists the Common Vulnerabilities and Exposures (CVEs) found, categorized by type and severity. Out of 64 CVEs, 47 are privilege escalations, 13 are unauthorized memory accesses, 3 are memory corruptions, and one is a Denial of Service (DoS).

### Figure 2
Severity and year of Android GPU vulnerabilities in NVD, based on CVSSv2.

We reproduced three of these vulnerabilities (CVE-2016-2503, CVE-2016-2504, and CVE-2016-2468) using Proof-of-Concept (PoC) exploits written in C++ and integrated into an Android application using the NDK. These PoCs triggered the vulnerabilities, causing a kernel panic.

### 2.3 Graphics Stack in Web Browsers
WebGL, introduced by web browsers, provides enhanced graphics functionality for web applications. It includes robust security checks to mitigate vulnerabilities, which we aim to repurpose for mobile applications.

## 3. Contributions
- Demonstrate the feasibility of using WebGL security checks to protect the mobile graphics interface.
- Present a solution for extracting and packaging these checks for mobile applications with minimal engineering effort.
- Provide a system solution for securely evaluating these checks within the app’s process to achieve high graphics performance.

## 4. System Design
Milkomeda addresses two key challenges:
1. **Minimizing Porting Effort:** Manually extracting and packaging WebGL security checks from browser source code is time-consuming. Milkomeda uses CheckGen, a tool that automates this process, making small interface modifications to resolve incompatibilities.
2. **Maintaining High Graphics Performance:** Web browsers use a multi-process architecture to protect WebGL security checks, which incurs significant performance overhead. Milkomeda introduces an in-process shield space that isolates the security checks and graphics libraries within the app’s process, ensuring integrity and high performance.

### Figure 3
(a) Graphics stack in a mobile operating system. (b) WebGL stack in a web browser. (c) Graphics stack in Milkomeda.

## 5. Evaluation
We implemented Milkomeda for Android, using Chrome's WebGL security checks, and evaluated it on a Nexus 5X smartphone. Our results show:
- Milkomeda achieves the same framerate (60 FPS) as native execution for several benchmarks.
- For a benchmark with lower FPS, Milkomeda achieves close-to-native performance.
- Milkomeda incurs additional CPU utilization (from 15% for native execution to 26% on average).
- The multi-process architecture increases the execution time of OpenGL ES calls by 440% compared to Milkomeda, highlighting its efficiency in providing isolation.

## 6. Conclusion
Milkomeda demonstrates the feasibility of repurposing WebGL security checks to protect the mobile graphics interface. By automating the extraction and packaging of these checks and introducing an in-process shield space, Milkomeda ensures high graphics performance while maintaining security. Our evaluation confirms that Milkomeda achieves near-native performance with a reasonable increase in CPU utilization.