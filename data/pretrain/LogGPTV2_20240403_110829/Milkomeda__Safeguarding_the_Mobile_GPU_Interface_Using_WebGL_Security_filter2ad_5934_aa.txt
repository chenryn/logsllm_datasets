title:Milkomeda: Safeguarding the Mobile GPU Interface Using WebGL Security
Checks
author:Zhihao Yao and
Saeed Mirzamohammadi and
Ardalan Amiri Sani and
Mathias Payer
Milkomeda: Safeguarding the Mobile GPU Interface Using
WebGL Security Checks
Zhihao Yao⋆, Saeed Mirzamohammadi⋆, Ardalan Amiri Sani⋆, Mathias Payer†
⋆UC Irvine, †EPFL and Purdue University
ABSTRACT
GPU-accelerated graphics is commonly used in mobile applications.
Unfortunately, the graphics interface exposes a large amount of
potentially vulnerable kernel code (i.e., the GPU device driver) to
untrusted applications. This broad attack surface has resulted in
numerous reported vulnerabilities that are exploitable from un-
privileged mobile apps. We observe that web browsers have faced
and addressed the exact same problem in WebGL, a framework
used by web apps for graphics acceleration. Web browser vendors
have developed and deployed a plethora of security checks for the
WebGL interface.
We introduce Milkomeda, a system solution for automatically
repurposing WebGL security checks to safeguard the mobile graph-
ics interface. We show that these checks can be used with minimal
modifications (which we have automated using a tool called Check-
Gen), significantly reducing the engineering effort. Moreover, we
demonstrate an in-process shield space for deploying these checks
for mobile applications. Compared to the multi-process architecture
used by web browsers to protect the integrity of the security checks,
our solution improves the graphics performance by eliminating
the need for Inter-Process Communication and shared memory
data transfer, while providing integrity guarantees for the evalu-
ation of security checks. Our evaluation shows that Milkomeda
achieves close-to-native GPU performance at reasonably increased
CPU utilization.
CCS CONCEPTS
• Security and privacy → Systems security; Operating sys-
tems security; Mobile platform security; Browser security;
KEYWORDS
Mobile Graphics Security; WebGL Security
ACM Reference Format:
Zhihao Yao, Saeed Mirzamohammadi, Ardalan Amiri Sani, Mathias Payer.
2018. Milkomeda: Safeguarding the Mobile GPU Interface Using WebGL
Security Checks. In CCS ’18: 2018 ACM SIGSAC Conference on Computer &
Communications Security, Oct. 15–19, 2018, Toronto, ON, Canada. ACM, New
York, NY, USA, 15 pages. https://doi.org/10.1145/3243734.3243772
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243772
1 INTRODUCTION
Mobile GPUs have reached performance that rivals that of dedicated
gaming machines. Many mobile applications (apps) such as games,
3D apps, Artificial Reality (AR) apps, and apps with high fidelity
user interfaces (UI) leverage these high-performance GPUs. Mobile
GPUs are typically accessed through the OpenGL ES API, which is
a subset of the infamous OpenGL API and is designed for embedded
systems.
Unfortunately, allowing untrusted apps to use the GPU has re-
sulted in serious security issues. The GPU device driver in the
operating system kernel is large (e.g., 32,000 lines of code for the
Qualcomm Adreno device driver) and potentially vulnerable. Yet,
to enable OpenGL ES, the operating system exposes the GPU de-
vice driver interface to unprivileged apps. This enables malicious
mobile apps to issue requests directly to the device driver in the ker-
nel, triggering deep vulnerabilities that can result in a full system
compromise.
Historically, apps that require GPU acceleration have been be-
nign. On desktops, these apps include popular games, accelerated
video decoders, parallel computational workloads, and crypto cur-
rency mining. Such apps are typically developed by well-known
entities and are therefore trusted. On mobile devices, apps are un-
trusted and potentially malicious. Mobile apps run in a sandbox (i.e.,
the operating system process as well as the Java virtual machine)
and are isolated from the rest of the system. Yet, direct access to
the GPU device driver exposes a large unvetted attack surface to
malicious apps. Unfortunately, this direct access seems unavoidable
since it allows the app to get the best possible performance from
the GPU. This has left the system designers with no choice but to
sacrifice security for performance.
Another platform has faced a similar problem: web browser.
WebGL exposes GPU acceleration to untrusted web apps written in
JavaScript running in the browser. To mitigate the security threat,
browsers perform various runtime security checks and keep state
across WebGL calls. The WebGL API is mostly based on the OpenGL
ES API and hence WebGL checks are designed based on the OpenGL
ES specification [12] as well as newly reported vulnerabilities and
exploits. Only calls with valid arguments (considering the current
GPU state) are allowed, effectively whitelisting safe API interactions.
Such an interposition layer greatly reduces the attack surface and
restricts API calls to well-defined state transitions.
Browser vendors have invested significant resources into the de-
velopment of security checks for WebGL. We introduce Milkomeda,
a system that allows us to repurpose these security check for mo-
bile apps. Milkomeda immediately safeguards the mobile graphics
interface without reinventing the wheel.
(a)
(b)
(c)
Figure 1: (a) Graphics stack in a mobile operating system. (b) WebGL stack in a web browser. (c) Graphics stack in Milkomeda.
We solve two important challenges in Milkomeda: minimizing
porting effort and maintaining high graphics performance. First, try-
ing to manually extract WebGL security checks from the browser’s
source code and package them for the mobile graphics stack is chal-
lenging and time-consuming, a lesson that we soon learned in the
initial stages of this work. Milkomeda addresses this challenge with
a tool, called CheckGen, that automatically extracts and packages
WebGL security checks for the mobile graphics stack, making small
interface modifications to the original code for resolving interface
incompatibilities.
Second, maintaining high graphics performance for mobile apps
is challenging. To protect the integrity of WebGL security checks,
web browsers use a multi-process architecture. In this architec-
ture, a web app process cannot directly invoke the GPU device
driver needed for WebGL; it must instead communicate with a
“GPU process” for WebGL calls. Hence, this architecture requires
Inter-Process Communication (IPC) as well as shared memory data
copying, which incur significant performance overhead. While such
an overhead might be acceptable for web apps, it is intolerable for
mobile apps, which demand high graphics performance. Milkomeda
addresses this issue with a novel in-process shield space design,
which enables the evaluation of the security checks in the app’s
process while protecting their integrity. The shield space allows
to securely isolate the code and data of the graphics libraries as
well as the security checks within an untrusted process. It provides
three important properties: (i) it only allows threads within the
shield space to issue system calls directed at the GPU device driver
in the kernel; (ii) it allows the application’s untrusted threads to
enter the shield only through a designated call gate so that secu-
rity checks cannot be circumvented; and (iii) it protects the code
and data within the shield space from being tampered with. These
properties, collectively, allow Milkomeda to ensure that the secu-
rity checks automatically ported from WebGL can efficiently vet
graphics API calls within a mobile app.
We implement Milkomeda for Android and use the Chrome
browser WebGL security checks in it. Our implementation is geared
for ARMv8 processors, used in modern mobile devices. We evalu-
ate Milkomeda on a Nexus 5X smartphone. We show that (i) for
several benchmarks with a framerate of 60 Frames Per Second
(FPS), which is the display refresh rate, Milkomeda achieves the
same framerate, (ii) for a benchmark with lower FPS, Milkomeda
achieves close-to-native performance, and (iii) Milkomeda incurs
additional CPU utilization (from 15% for native execution to 26%,
on average). Moreover, we show that the multi-process architecture
increases the execution time of OpenGL ES calls by an average
of 440% compared to Milkomeda, demonstrating the efficiency of
Milkomeda in providing isolation.
We make the following contributions in this paper.
• We demonstrate the feasibility of using a web browser’s
WebGL security checks to guard the mobile operating system
graphics interface.
• We present a solution for extracting these checks from the
browser and packaging them for mobile apps with minimal
engineering effort.
• We provide a system solution for securely evaluating these
checks in the app’s own process in order to achieve high
graphics performance.
2 BACKGROUND & MOTIVATION
2.1 Current Graphics Stack in Mobile Devices
To leverage GPUs for graphics acceleration, mobile apps use the
OpenGL for Embedded System (OpenGL ES) API, which is a subset
of the OpenGL API targeted for embedded systems. The OpenGL
ES library on a mobile device is provided by the GPU vendor and
handles the standardized OpenGL ES API calls of the application.
In doing so, it interacts with the GPU device driver in the operating
system kernel by issuing system calls (syscalls for short). In Android,
which is the focus of our paper, this is done by issuing syscalls on a
device file (e.g., /dev/kgsl-3d0 for the Adreno GPU in a Nexus 5X
smartphone). More specifically, this is done by opening the GPU
device file and then issuing syscalls, e.g., ioctl and mmap, on the
returned file descriptor. Figure 1a shows this architecture.
User spaceKernelOperating systemApp processApp codeOpenGL ES lib.GPU device driverGPUUser spaceKernelOperating systemWeb app processWeb app codeWebGL frontendGPU device driverGPUWebGL backendOpenGL ES lib.GPU processBrowserNotallowed!Security checksUser spaceKernelOperating systemApp processApp codeGPU device driverGPUNotallowed!Shield spaceOpenGL ES lib.Security checksVulnerability Type
Privilege Escalation
Examples
CVE-2014-0972(Q), CVE-2016-2067(Q), CVE-2016-2468(Q), CVE-2016-2503(Q), CVE-2016-2504(Q), CVE-2016-3842(Q), CVE-2016-6730(N),
CVE-2016-6731(N), CVE-2016-6732(N), CVE-2016-6733(N), CVE-2016-6734(N), CVE-2016-6735(N), CVE-2016-6736(N), CVE-2016-6775(N),
CVE-2016-6776(N), CVE-2016-6777(N), CVE-2016-8424(N), CVE-2016-8425(N), CVE-2016-8426(N), CVE-2016-8427(N), CVE-2016-8428(N),
CVE-2016-8429(N), CVE-2016-8430(N), CVE-2016-8431(N), CVE-2016-8432(N), CVE-2016-8434(Q), CVE-2016-8435(N), CVE-2016-8449(N),
CVE-2016-8479(Q), CVE-2016-8482(N), CVE-2017-0306(N), CVE-2017-0307(N), CVE-2017-0333(N), CVE-2017-0335(N), CVE-2017-0337(N),
CVE-2017-0338(N), CVE-2017-0428(N), CVE-2017-0429(N), CVE-2017-0500(M), CVE-2017-0501(M), CVE-2017-0502(M), CVE-2017-0503(M),
CVE-2017-0504(M), CVE-2017-0505(M), CVE-2017-0506(M), CVE-2017-0741(M), CVE-2017-6264(N)
Unauthorized Memory Access CVE-2016-3906(Q), CVE-2016-3907(Q), CVE-2016-6677(N), CVE-2016-6698(Q), CVE-2016-6746(N), CVE-2016-6748(Q), CVE-2016-6749(Q),
Memory Corruption
Denial of Service
Table 1: List of CVEs for Android GPU driver vulnerabilities in NVD. The letter in the parenthesis shows the GPU driver
containing the vulnerability. Q, M, and N stand for Qualcomm, MediaTek, and NVIDIA GPU device drivers, respectively.
CVE-2016-6750(Q), CVE-2016-6751(Q), CVE-2016-6752(Q), CVE-2017-0334(N), CVE-2017-0336(N), CVE-2017-14891(Q)
CVE-2016-2062(Q), CVE-2017-11092(Q), CVE-2017-15829(Q)
CVE-2012-4222(Q)
There are two reasons why this architecture is prone to attacks by
malicious apps. First, while well-behaved apps only use the OpenGL
ES library to (indirectly) communicate with the GPU device driver,
nothing stops the app from interacting with the GPU device driver
in the kernel directly (as shown in Figure 1a). This is because the
operating system gives the mobile app process permission to access
the GPU device file to enable the OpenGL ES framework within
the app process. Therefore, any code within the process can simply
invoke the device driver in the kernel. This exposes a huge and easy-
to-exploit attack surface to the app. For example, the ioctl syscall
enables about 40 different functions for the Qualcomm Adreno
GPU device driver, which is about 32,000 lines of kernel code in
Nexus 5X’s LineageOS Android source tree (v14.1) and has many
vulnerabilities (Table 1).
Second, even indirect communication with the GPU driver through
the OpenGL ES API is unsafe since this API is not designed with
security in mind. Several attacks against a related interface, WebGL
API (which is very similar to the OpenGL ES API – see §6.2), have
been demonstrated [63]. Indeed, these attacks using the WebGL
interface inspired many security checks in web browsers, which vet
arguments of WebGL calls. These checks have, over time, hardened
the WebGL interface. However, mobile apps lack such a checking
framework for the OpenGL ES interface. Here we show that we can
repurpose the security checks in WebGL for mobile apps.
2.2 Mobile Graphics Vulnerabilities
Reported vulnerabilities. We study Android GPU vulnerabilities
by searching the National Vulnerability Database (NVD) [8] (note
that we lack direct access to the bug trackers of Android and GPU
vendors). We search for Android GPU driver vulnerabilities in NVD
using the “Android” and “GPU” keywords. Table 1 shows the full
list of CVEs we found. Overall, we found 64 CVEs, out of which
47 CVEs are privilege escalations, 13 are unauthorized memory
accesses, 3 are memory corruptions, and one is a Denial of Service
(DoS).
Figure 2 shows the year and severity of these CVEs. There are
two important observations. First, 73% of the reported vulnerabil-
ities have the maximum severity level. The severity levels in the
figure show NVD’s score based on the Common Vulnerability Scor-
ing System Version 2 (CVSSv2) [11]. The high severity of these
vulnerabilities is because the GPU driver runs in kernel mode and
is directly accessible by unprivileged apps. Second, the majority of
Figure 2: Severity and year of Android GPU vulnerabili-
ties in NVD. The legend captures the severity according to
CVSSv2.
these vulnerabilities are recent, i.e., reported in 2016 and 2017. This
large number of mostly critical and new vulnerabilities show the
pressing need to protect the interaction between unprivileged apps
and the GPU driver.
Reproducing the vulnerabilities. We reproduce 3 of the afore-
mentioned vulnerabilities by writing Proof-of-Concept (PoC) ex-
ploits to trigger them from an unprivileged Android app. We write
the PoCs in C++ and integrate them in an Android application using
the Android Native Development Kit (NDK) [13]. The three vulner-
abilities are CVE-2016-2503, CVE-2016-2504, and CVE-2016-2468.
Our PoCs trigger the reported vulnerabilities and force a kernel
panic.
2.3 Graphics Stack in Web Browsers
To provide enhanced graphics functionality for web apps, web
browsers introduced a framework called WebGL. WebGL provides