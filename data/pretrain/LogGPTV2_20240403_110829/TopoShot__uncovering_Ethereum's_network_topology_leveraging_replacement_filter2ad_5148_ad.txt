isolation is critical to the success of our measurement method. In
the parallel setting, a Node A needs to prevent propagating the txA
transactions to Nodes B’s via not only Nodes C’s but also other
Nodes A’s and Nodes B’s. For instance, in the example above, when
measuring the connection between Node A2 and B1, it needs to
ensure that txA(2, 1) is not propagated to Node B1 via Node A1 or
B2. This is guaranteed by our measurement method because Nodes
B2 and A1 store txC transactions and can be treated as a C node
when measuring the connection between Node A2 and B1.
5.3.2 Parallel Measurement Schedule. Given a network of nodes
{n1, n2, ..., nN }, we partition the nodes into N/K groups where
each group is of K distinct nodes; for instance, the i-th group (i
starting from 0) is of nodes {ni∗K +1, ni∗K +2, ...ni∗K +K−1}.
We schedule the network measurement in the two rounds: The
first round runs N/K iterations, where each iteration measures the
edges between group i and the rest of the network. The second
round measures the edges within a group.
To be more specific, we denote the parallel measurement prim-
itive described in § 5.3.1 by measurePar({Ai}, {Bi}, {C}).
1) Given
calls
measurePar({ni∗K +1, ni∗K +2, ...ni∗K +K−1}, {n1, ..., ni∗K−1, ni∗K +K ,
...nN }, {}), where A is the i-th group, B is the rest of the
blockchain network, and C is empty. Each of these iterations sets a
goal to measure K · (N − K) possible edges.
2) The second round measures the edges within groups. Specif-
ically, given a group, it maps the first half of nodes as A and the
other half as Nodes B. An iteration measures intra-group edges for
all groups. It then applies the same splitting respectively for the
first and second half of the group. In other words, the next iteration
group,
round
i-th
first
the
the
the
runs
round
measures the intra-group edges for half of the original groups. This
process repeats until the group size reaches 2.
The first
round runs
Example: Suppose N = 8 and K = 3. The parallel schedule is of
two rounds, each of two iterations, as illustrated by the four curved
rectangles (with different colors) in Figure 3b.
following two iterations:
measurePar({n1, n2, n3}, {n4, n5, n6, n7, n8}, {}) which mea-
sures the 3 ∗ 5 = 15 edges across node group {n1, n2, n3}
and group {n4, n5, n6, n7, n8}. This is visualized by the hori-
zontal rectangle in blue in the figure. The second iteration is
measurePar({n4, n5, n6}, {n7, n8}, {n1, n2, n3}) which measures all
3 ∗ 2 = 6 edges and is visualized by the horizontal rectangle in red
in the figure.
groups
second
another
itera-
The
measurePar({n1, n4, n7}, {n2, n3, n5, n6, n8}, {})
tions:
edges
which measures
(n1, n2),(n1, n3),(n4, n5),(n4, n6),(n7, n8)) by the vertical
rec-
tangle in green, and measurePar({n2, n5}, {n3, n6}, {n1, n4, n7, n8})
which measures 2 edges (i.e., (n2, n3),(n5, n6)) by the vertical
rectangle in orange.
Complexity Analysis and Configuration of K: On the mea-
surement of a network of N nodes with a group of size K, the total
number of iterations is N
+ log K where the first round runs N
K
K
iterations and the second round runs log K iterations. Roughly, the
number of iterations decreases with increasing K. However, making
the value of K too large would lead to the overflow of mempool as
it generates K ∗ (N − K) transactions in each iteration. In practice,
an Ethereum node’s mempool has a capacity of 5120 transactions
and to bound the interference, we only use no more than 2000
transaction slots in the mempool. For an Ethereum network of 500
nodes, such as Ropsten, we use K = 2000/500 = 4 which results in
a total of 500/4 + log 4=127 iterations.
across
edges
two
(i.e.,
5
6 MEASUREMENT RESULTS
Initially, we run a measurement node M that joins an Ethereum
network, such as the Ropsten testnet. The measurement node M is
310
A2B1txC(1,1)txA(2,1)txA(2,2)txC(1,1)txC(2,1)txC(2,2)txB(1,1)txB(2,1)txC(2,2)CMA1txA(1,1)txC(2,1)txC(2,2)B2txC(1,1)txC(2,1)txB(2,2)(1,1)(2,1)(2,2)n1n2n3n4n5n6n7n8IMC ’21, November 2–4, 2021, Virtual Event, USA
Kai Li et al., Kai Li, Yuzhe Tang, Jiaqi Chen, Yibo Wang, and Xianghong Liu
(a) Recall with TopoShot sending in-
creasing number of future transac-
tions.
(b) Precision and recall with increas-
ing group size in parallel measure-
ment.
Figure 4: Measurement validation results
set up without bounds on its neighbors, so it can be connected to
the majority of the network.
6.1 Measurement Validation
The correct functioning of TopoShot relies on several factors that
may vary in a deployed Ethereum network. For instance, TopoShot
assumes the default mempool size on Geth nodes (i.e., 5120) that may
not hold if an Ethereum node is configured with a different mempool
size. The variance would introduce false negatives into TopoShot
results and affect the recall. In this subsection, we validate the
TopoShot results by evaluating/estimating the result recall. Here,
we use the “external” experiment setup; in Appendix B, we use a
fully local setup to conduct additional validation study.
Experiment setup: In addition to the measurement node M,
we set up a local machine to play node B; the node joins the testnet
being measured (e.g., Ropsten) and is configured with a number
(e.g., 5000) larger than the size of testnet. After staying online for
12 hours in Ropsten, node B connects to 520 nodes, among which
471 nodes run Geth clients. The setup here is external as nodes A
and B join a remote Ethereum network.
Validating measurement primitive (measureOneLink): We
then iterate through the 471 nodes, selecting each node as node A
to measure the connection between B and A using an unmodified
TopoShot. In each iteration, the connection is measured three
times. When running the measurement primitive, we verify that
txC is evicted from nodes A and B. This is done by turning on the
RPC interface and sending an eth_getTransactionByHash query
to it. The final result is positive (i.e., there is a connection) if any of
the three measurements is positive. For each unit experiment, we
report the number of positive connections TopoShot can detect
and from there calculate the recall.
We increase the number of future transactions sent in TopoShot
and measure the recall using the validation method above. The
results are shown in Figure 4a. With the increasing number of
future transactions, the recall of TopoShot grows from 84% to 97%.
An implication here is that even with a large number of future
transactions, TopoShot does not reach 100% recall. We suspect
the following culprits: 1) The remote node is configured with a
custom mempool size much larger than the default 5120. 2) The
node is configured with a custom Gas price threshold other than
the default 10%; this threshold determines the mempool’s transaction
replacement policy. 3) There are nodes who join Ropsten testnet
but do not participate in forwarding transactions, preventing txA
being propagated.
Validating parallel method (measurePar: In the same experi-
ment we then validate TopoShot’s parallel measurement method.
Recall parallel TopoShot is parameterized with p and q. In this
experiment, we use q = 1 and vary p (referred to as the group size),
that is, a node B′ and p nodes A’s in a parallel measurement. p is
varied between 1 to 99.
Specifically, we set up a new node B′ with the default 50 active
neighbors and join the Ropsten testnet. It turned out its 35 active
neighbors run Geth. We then serially measure the 35 neighbors,
which successfully detects 29 neighbors. When running validation
of the parallel method, we need to choose p nodes A’s. When p ≤ 29,
we choose a subset of the 29 active neighbors of node B′ to play
nodes A’s. When p > 29, we choose the 29 neighbors of node B′, as
well as the nodes that do not have connections with node B′, to be
nodes A’s.
For each group size, we run the parallel measurement three times
and report a positive result if any of the three returns a positive
result. The results are presented in Figure 4b. The precision is
always 100%. The recall is initially 100% until the group size is
larger than 29. It then decreases as the group grows larger. For a
group of 99 nodes, the recall is about 60%. The reason for a non-100%
recall under a large group is that TopoShot does not guarantee
isolation among nodes {A}, and a larger group increases the chance
of non-isolation/interference among nodes {A}.
Figure 5: Speedup of TopoShot’s parallel measurement over
the serial measurement
Measurement speedup of the parallel method: We also re-
port the time of measuring the same group of nodes with varying
group size, with the purpose to evaluate possible speedup by the
parallel measurement over the serial one. In a similar experiment
setup, the measurement target is a group of 100 nodes. With about
4950 edges detected, the measurement times are reported in Fig-
ure 5. It can be seen that as the group size K increases, the time to
measure the same group of nodes (as in the previous experiment)
decreases significantly. For instance, with a group size K = 30, the
measurement time is reduced by an order of magnitude (about 10×
times).
6.2 Testnet Measurement Results
6.2.1 Ropsten Results.
311
124816Number of future transactions (X5120)708090100Recall (%)11030507999Group size405060708090100110Percentage (%)RecallPrecision11030507999Group size01020304050607080Measurement time (10^3 seconds)TopoShot: Uncovering Ethereum’s Network Topology Leveraging Replacement Transactions
IMC ’21, November 2–4, 2021, Virtual Event, USA
to the target node one. The measurement node then sends a fu-
ture transaction to the target node. If the monitor node observes
the future transaction from the target node, the target node is re-
moved from the measurement. Besides, the pre-processing phase
in TopoShot also avoids unresponsive nodes.
We present a snapshot of the Ropsten testnet taken on Oct. 13,
2020. The precision of the measurement result is 100% and recall is
88% (under group size K = 60), using a validation method described
above. The network contains 588 (Geth) nodes and 7496 edges
among them. This result has the test node and its edges excluded.
The degree distribution is plotted in Figure 6. Most nodes have a
degree between 1 and 60: Particularly, 4% of nodes have degree 10,
another 4% have degree 1 and another 4% have degree 12. Omitted
in the figure are ten nodes with degree between 90 and 200. This
result shows that degrees by active links are much smaller than the
default number of inactive neighbors (250).
Table 4 summarizes the characteristics of the measured testnet
in terms of distances, assortativity, clustering and community struc-
ture. 1) For distances, the network diameter, defined as the maximal
distance between any pair of nodes, is 5, and the radius is 3. The
number of center nodes and periphery nodes, defined respectively
as the nodes with eccentricity equal to radius and diameter, are
both 36. 2) Degree assortativity, which measures how likely a node
connects to a similar node, is -0.1517. 3) The clustering coefficient,
which shows how well nodes in a graph tend to form cliques to-
gether, is 0.207. The transitivity, which considers the clustering of
particular 3-node substructure, is 0.127. 4) There are 60.748 unique
cliques detected in the testnet. The modularity of the testnet, which
measures the easiness of partitioning the graph into modules, is
0.0605.
As a baseline for comparison, we generate a random graph fol-
lowing the Erdos-Renyi [25] (ER) model which generates an edge
between each pair of nodes using the same probability, indepen-
dently. It follows a binomial degree distribution and is commonly
used as the network-analysis baselines. We use the same number
of vertices and edges with the measured Ropsten network (that is,
n = 588 and m = 7496) when generating the Erdos-Renyi random
graph. We run the graph generation algorithms for 10 times and
report the average properties of these random graphs in Table 5.
Particularly, the density is calculated by the number of measured
intra-community edges divided by the number of total possible
edges in that community. For instance, the density of a community
of 92 nodes and 423 intra-community edges is 423/(cid:0)8,000
2 (cid:1) = 0.10.
Besides, Table 5 shows other two random graphs, namely configu-
ration model [40] (CM), and Barabasi-Alber [19] (BA). The former
is generated using the same sequence of node degrees with the mea-
sured testnet, and the latter is generated using the same number of
nodes (n = 588) and same average node degree (l′ = 26).
Compared with the ER random graph, the measured Ropsten net-
work has a much larger diameter, a smaller center size, a larger clus-
tering coefficient, and more importantly, fewer cliques and lower
modularity. This is similarly the case when comparing Ropsten with
CM (except for CM’s comparable diameter) and BA (except for BA’s
comparable number of cliques). The implication is that a Ropsten
network is much more resilient to network-partition attacks (e.g.,
eclipse and other DoS attacks) than these random graphs.
Figure 6: Node degree distribution in Ropsten
Table 4: Graph properties of the Ropsten testnet
BA (n = 588,
l′ = 26)
3.0
509.4
ER (n = 588,
m = 7496)
3.0
293.5
Measured
Ropsten
5
36
5.2
24.9
CM
Diameter
Periphery
size
Radius
Center size
Eccentricity
Clustering co-
efficient
Transitivity
Degree assor-
tativity
Clique num-
ber
Modularity
3
36
4.037
0.207
0.127
-0.1517
60.75
0.0605
3.0
293.5
3.0
0.044
0.044
0.0026
250.3
0.161
3.0
51.7
3.98
0.139
2.0
78.6
2.87
0.159
0.122
-0.0664
0.156
-0.0181
557.4
0.152
50.6
0.102
No. of nodes
92
142
107
84
75
51