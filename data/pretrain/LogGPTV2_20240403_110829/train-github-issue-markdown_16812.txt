In reviewing #951, it came to my attention that we have no validation or
formal spec on what character restrictions we impose on label keys and values.
This is bad if we plan to support a more formal complex selector grammar which
may require escaping rules. We need to define a valid schema and enforce it
via validation on object persistence.
Clients today are restricted by the set of valid keys allowed in JSON or YAML
for use as their label keys depending on the input format they use.
According to JSON spec:
    A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes. A character is represented as a single character string. A string is very much like a C or Java string.
This means, it's ok today to have labels keys in our input JSON like the
following:
    {
      "fu=":"=bar"
      "fu==bar":"something"
      "fu  == :: ?? != bar": "seriously??"
    }
This makes supporting a label selector grammar ridiculously hard. For example,
a label selector of "foo==bar" is undefined because we have no rational way to
parse that. Even "foo=bar" today is broken by what we accept as input.
I think k8s should require all label keys to match our dns952 regex. This
means all label keys are lower-case and single word terms.
With this model, we can reliably look to support more complex label selector
functions because we know where to stop parsing on left-hand operand, pluse we
can support nicer unary operators or functions:
  * exists(foo)
  * foo=bar