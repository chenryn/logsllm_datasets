慢日志分析模块
图14-45
图14-44
日志分析结果建模
慢日志分析
慢日志切分
慢日志转储
主动度发分析
定时任务分析慢日志
仅在主库部署
周期性切分
分析结果格式化
定是时任务
关
日志切割工具log
统计
---
## Page 553
日志信息来同步获得一些性能信息，得到 SQL 的执行计划。
化 SQL，提高系统的整体性能和 SQL 水平。
是存在性能问题的，另外就是对慢日志的个数进行统计，如果X分钟超过了X个就触发报警。
是无法获得的，需要我们来对慢查询 SQL 实现细粒度管理，实现一个初步的生命周期管理。
一个查询语句，这个 SQL 之前是否出现过，之前的性能如何，这个信息通过现有的文件
要的一些关键内容。
由日志服务器来统一解析，将解析的结果格式化，比如可以是JSON格式。提取出我们需
所以保留周期可以设定为2周，更早的日志信息可以下沉到HDFS 里面。
务器。总体来说，慢日志的内容量和 Binlog 完全不在一个量级，占用的空间要小很多。
一台慢日志服务器，通过通信管道比如 rsync 或者 sftp 等方式把慢日志内容同步到日志服
对于业务同学来说，我们可以提供基于时间和对象的 SQL慢日志信息提取，通过慢
对于运维来说，我们可以设立一个慢日志排行榜。通过一个全局的排行榜来不断优
6．慢日志报告提取
这属于一个锦上添花的功能，比如慢日志在半个小时内增长超过10M，那么我们可以认为
其实对于慢查询 SQL 是应该做细粒度的管理的，比如我们采集的慢日志文件里面有
4．慢日志 SQL 管理
以上两个步骤只是采集慢日志，不做慢日志的分析，到了日志服务器之后，应该是
下图14-46是一个初步实现的慢日志分析平台的页面，可以作为参考。
对于慢日志的报告提取，可以分为两个维度。
5.慢日志性能报警
这样一旦发现问题，我们也好确定在之前是否存在问题。
3．慢日志分析
V
图14-46
第14章MySQL运维管理模块设计|531
---
## Page 554
532丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
慢日志不光要实现数据的提取，也需要提供更全面的信息支撑。
如果对一张表添加索引,那么和这张表相关联的 SQL也是我们在优化时需要格外注意的，
加具有参考价值。另外一个是关联SQL，即一条 SQL 的变更是否会有其他相关联的 SQL,
计的表有3个，那么会把3个表的表结构DDL也关联得到，对于我们分析问题来说会更
对于每一条慢查询 SQL都会生成一个独立的明细页面。
语句，历史执行的性能情况，查看执行计划，优化建议等，下图14-48是一个明细的图片，
分布是1~5秒的居多，那么我们的改进空间还比较大。
慢日志的比例分布会让我们对于问题的分析有一个较为明确的方向，比如目前的慢日志
通过排行榜我们可以快速地定位出瓶颈 SQL，并且对于性能情况有一个整体的认识，而
的数据变化。
用半个小时的维度来采集信息，使用了快照的思想，通过快照维度能够分析出一些潜在
如果慢日志多，重复率高，那么分数就会低。
数据库大小等，通过这些指标能够对数据库有一个整体的认识。
最后是慢日志的明细报告，这些对如上信息的完整展现，我们可以查看完整的 SQL
然后是慢日志排行榜和慢日志的比例分布，排行榜是慢日志信息的一个关键看板，
“左侧上面的第一张趋势图是CPU的，下面的是慢日志条数的趋势图。目前慢日志使
右边的小框是一个打分模块，会通过分数的方式来体现整个慢日志分析结果的情况，
而在这个基础上有两点重要的补充，一个是对表结构信息的抽取，比如一条SQL设
最上面的部分是整个慢日志报告的头部，包含了基础的运维信息，比如服务信息、
对于整个产品的设计我使用如图14-47所示框图的方式来体现。
志详
量
收庭本用片
八
SQL粗关表
LA
图14-47
结束时间
18:28:49
---
## Page 555
提高技术水平。
DBA也体现出了业务看得到的高价值输出，同时也可以在优化方向进行深钻，
第14章MySQL运维管理模块设计|533
---
## Page 556
审核：
15.1.1SQL 审核的意义
加高效地支持业务需求。
特点进行规则的定制开发；为了提高业务效率，计划将审核工具集成至公司系统中，能够更
使得审核信息更加符合公司的开发规范，并对部分审核逻辑进行深度定制，针对公司的业务
SQL在满足当前业务需求的目标前提下，可以对行业内的SQL审核工具进行梳理和定制，
而之前的人工审核，针对标准这个问题其实是很吃力的，标准越多，DBA越累，开发也越累。
自助服务，希望通过自助服务解放彼此。
于营业员。
自己，也对用户提供了便利。比如你任意时间去ATM 取款，转账都可以，可以完全不依赖
务来说就不是高效了。所以我们需要使用个性化服务来保证服务的可持续性：自助服务。
高效地支持业务需求，但是你终归要下班，终归要休息，一旦需求来了你处理不了，对于业
第一是提高单位时间的执行效率；第二是保证服务的高可用，试想你个人能力很强，可以很
15.1
我们虽然提高了部分工作效率，但是效果依然有限，从我的理解中，效率主要关乎两个部分：
我们先来说下 SQL 审核的意义。要回答这个问题，就需要先解答下为什么要引入 SQL
SQL 审核对于提高 DBA 工作的幸福度有重大的意义，同样也对开发同学有很大的帮助
自助服务可以理解为把一些简单重复的工作内容通过经验融合到流程之中，既解放了你
SQL语句的审核，在业界已经被认同了，实际上也是对SQL负责的统一化和标准化，
本章我们会探讨几种自助服务：SQL自助审核，SQL自动化上线，业务自助巡检和工单
·人工审核在规范落地和监督约束方面难以把控，很多时候会走人情;
·大多数情况下，人工审核SQL的代价太高；
相信根据前面的内容，你对运维体系的建设已经有了一个整体的印象，但是显然还不够，
我只能送你到这里了，剩下的路你要自己走，不要回头。——《千与千寻》
SQL自助审核
第15章运维自助化服务
---
## Page 557
15.1.3SQL审核的维度设计
也可以很简单，要说复杂，体系也可以很庞大。
试和分析，如果可以根据业务场景做一些补充和改进，那是极好的。
方案可供选择，如何把基于自己特定业务的规范揉进来？这是一个值得深思的问题。
15.1.2
介绍这些审核工具的细节，而是基于业务的场景来考虑。
理解了我所强调的核心，边界问题就相对清晰了，所以 SQL 审核这件事情，其实说简单
整体来说，要做好 SQL 审核不是把软件安装完，可以用就可以了，还需要做一些对比测
·对于 DDL 的需求，是业务最基础的需求，这类需求属于硬需求，一定是有业务上
一般来说，审核会覆盖3个维度：DDL、DML 和DQL；它们之间的关系如下图15-2 所示。
在此基础上，审核的难点更多是需要基于公司规范定制审核规则。有很多不同的工具、
·审核工具不刻意做语法审核，而是专注于SQL规范的审核。
·对业务同学来说，SQL审核是对标一种自助服务；
对于 SQL审核来说，我认为它的核心是：
行业里也存在一些审核工具，比如 Inception、SQLAdvisor、SOAR 等。我们在此不着重
SQL 审核设计背景如下图15-1所示，总体来说，SQL 审核是一种服务。
·规范落地没有一种数字化可视化的支持方式，靠文档和拍脑袋想很难把这些规范
·大多数情况下，性能隐患会给线上环境带来极大的影响，可能是影响业务使用，
的变化才会产生对象变更需求，这类需求要重点关注，需要DBA 做到可控。
固化下来的。
也可能直接影响数据，比如对线上的一张表执行了 truncate 但是却没有备份；
至于查询 DQL（查询语句)，更多会是在性能和安全方面做考量，基于查询，可以
备份)。
义我觉得更多是基于 SQL 的性能或者影响范围，还包括 DML 的闪回（即先得有
DML的审核，在大多数情况下，应用服务本身有权限，在这个层面支持审核的意
SQL审核的核心
性能隐患带入线上环境
审核结果难以理解
SQL审核背景
图15-1
规范落地和监督约束
人工审核工作量大
第15章运维自助化服务丨535
---
## Page 558
536|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
进工作，主要分为3个部分：
迭代开放的过程中初步沉淀下来的。
一些深耕的特性或者可以拿得出手的地方。大体来说，会有如右图15-3的4个亮点，也是在
15.1.4SQL审核的亮点
语句和 alter 语句，而相对来说create 需求更为基础。
规范公司有，行业里也有，把两者有效地结合起来才能够落地。我们做了一些定制和改
整个SQL 审核的设计，本质上是基于规范来完成，而作为一个工具或者产品，它一定有
所以我认为在初期要落地 SQL 规范，建议是先从 DDL 方向入手，也就是通泛的create
1.SQL规范定制
后续去补充通用查询模块。
SQL维度
DQL
DDL
审核质量跟踪
打分系统
审核建议分级配置
深度定制公司开发规范
DML
组合查询
单表查询select **
敏感变更
变更对象
创建对象
图15-3
图15-2
数据删除
数据变更update
数据写入
select ** union all
truncate
drop
alter
create
delete
insert into ** set
insert into** select
insert into ** values(xx), (xxx);
alter table ** modify
alter table** drop
alter table ** change
alter table **add
---
## Page 559
如一条SQL的质量打分是70分，对于业务同学来说，这个和给出的建议个数相比是更加直
味着什么呢，其实可以使用可视化的方式来对接。
务同学修正的。
在问题，哪些是建议改进的，而其中必须遵守的建议应该是最基础的规范，也是需要督促业
影响范围等等，所以我们可以根据优先级来给出建议，弄清哪些是必须遵守的，哪些是有潜
接抛给业务同学，很可能会被忽略或导致业务同学叫苦，说历史遗留问题、项目周期、变更
在此，可以通过打分系统来把SQL 质量数字化，通过看板的方式把审核质量可视化：比
这也是对于审核的一种辅助方式，我们给出了5 条，10 条，20 条建议，但这些建议意
3．SQL质量可视化（打分系统）
一条 SQL 语句，通过审核工具可以给出多条建议，比如有 20 条建议，这些建议如果直
对于审核信息的分级，简单来解释下：
2.审核建议分级配置
·表存在时Truncate操作个性化提示；
·Drop index操作个性化提示：
·Drop table 操作个性化提示
（3）添加部分审核逻辑
truncate和 drop 操作，禁止此类操作，给出个性化提示。
（2）修改已有的审核逻辑
提示更改字符集为”utf8mb4”的逻辑。
（1）删除已有的不需要的审核逻辑
int 数据类型，不建议使用自定义的数字，直接建议修改为 int(11)。
唯一索引名必须使用“uni_”为前缀；
索引名必须使用“idx_”为前缀；
禁止表中使用外键；
临时数据库，临时表名必须以"tmp_"为前缀;
单个索引的字段数不能超过5个;
数据库名称、表名称、字段名称不能大写;
enum 类型建议使用 tinyint 代替；
text、blob类型不建议使用；
double 类型不建议使用；
float类型不建议使用；
表不存在时 Truncate 操作个性化提示;
索引个数不能超过5个；
Drop column操作个性化提示；
第15章运维自助化服务丨537
---
## Page 560
538丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
做，是很占用碎片时间的，而这也正是SQL 审核解放DBA的一种方式。
一个数据情况，可以看到，多的时候每天有近百次的审核请求，而这些请求如果通过人工来
析；甚至能够看到大家更习惯在哪个时间段做SQL 审核。这样为我们后续做更新升级提供了
如可以看到在一段时间里 SQL 审核的次数、每天审核的 SQL 质量，通过平均分来做统计分
的明细信息，后续再对这些建议进行跟进和完善，这是一种反馈式的互动。
尬的情况。
观的，当然为了稳定业务同学的情绪，我们设置了最低分数为 50分，这样就不会出现太尴
整个过程可能比我描述的还要多，我列出几个重要步骤来：
15.1.5
不用完全依赖于DBA，能够轻轻松松完成审核，而且服务质量不打折，这是一种双赢。
很好的数据参考，也对工具的落地方向有一个整体的把控。
需要再次强调下数字可视化的效果，把数字可视化，其实可以看到很多有趣的信息，比
近期SQL审核数据统计
说完审核的一些亮点，我们来看实践过程中的一些数据，下图15-4是采集了线上需求的
在下图15-5中，我特意标记了序号，可以看到一个SQL审核的需求从发起到最后返回，
这方面是我们的审核工具后续迭代完善的，在使用的过程中，我们应该尽可能保留审核
4.SQL质量跟踪
另外有些审核是在工作时间之外完成的，这在另一方面也是对于开发工作的有效支持，
怎么设计SQL审核的流程
00
-26
18-10-17
图15-4
18-10-25
审核次数
18-11-13
18-11-28
18-12-05
---
## Page 561
没有优先级呢？我大致分了三类：
服务还比较陌生的话，从他第一次接触就基本会放弃，工具不好用，建议和规范就难以落实，
丰富，那么它提交的 SQL 肯定会有很大数量的建议，有的高达40条之多，如果他对于审核
分别是审核信息的定制和审核逻辑的定制。
吸收已有的审核工具的优势；另一个就是对审核逻辑进行针对性的定制，定制分为两部分
心，这个核心的意思是我们要从逻辑上完全可控，这可以分为两个层面的工作：一个是充分
库服务器上创建相应的账户即可。至于权限，在审核层面，我们只需要开放 select 权限即可。
任务，语法语义审核在从库端，至于后续要做的自动化上线，则逻辑需要定制改动。
数据验证，比如输入了主库的IP，我们就需要根据元数据映射关系来匹配到从库，完成审核
解析传送的SQL和其他属性信息，另外一个就是API层来对接后端的服务和结果回调。
把它打造成一个小巧的、提供给开发的自助服务小工具。
端的建议就是我们需要找一个通用入口，保证要方便调用和测试使用，最终的业务目标就是
整个SQL审核服务怎么部署，我们可以在一台中控服务器端部署一次，然后在各个数据
这里需要提一下，就是图中的步骤3，我们要充分利用已有的元数据，如果需要做业务
如果要涉及到外部系统，显然我们要封装API了。这个API有两个难点：一个是我们要
那么怎样才能够尽可能落实呢？
在经过审核服务的审核之后，会推送审核结果到API服务端，这个过程是审核服务的核
SQL自助审核服务
第一类信息是明显错误或者本身违背基本规范的建议，比如表的字符集不符合标准、表
其实换位思考一下，一下子给出几十条建议，
为什么这么说，因为有一个现象如果我们不够重视，会很吃亏，
至此，这个过程看起来已经比较完整了，但其实我们只走完了审核工作70%的路。
首先是前端，审核的需求从哪里发起？首先要具备基本的 SQL 审核调用服务。而对于前
前端
9.返
10审技集科持久化
1发起请求
数据模型
SQL审核
，暂定严重，警告，建议三级
API服务
SQL审核
SOL电接服务
图15-5
任何人开始都吃不消的。建议这么多，有
审核服务端
中控服务器
CMDB
6.连接至从库，
，发起审核需求
一个开发人员经验不够
7.返回
第15章：运维自助化服务|539
核结果
数据库服务器
数据库服务器
从库
主库