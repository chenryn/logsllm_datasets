code/stack addresses nor secrets which are already present in
registers. SLH also does not mitigate many such cases. If more
comprehensive protection is required, it may be possible to use
our arena-based approach to reduce the overall performance
impact of a more conservative SLH-style mitigation.
C. ASLR
Our prototype allocator allots pages linearly from the base
of each arena, but this is not required by our design; arenas
can be placed at any 4GB aligned address and pages can be
assigned non-linearly within arenas with no impact on ASLR
entropy. However, our design does reduce the entropy available
for ﬁne-grained ASLR, since the available virtual address
space is reduced (by ∼3 bits in our prototype), as well as
the entropy for large allocations which cannot cross a 4GB
boundary. If an attacker leaks a pointer of a given type, they
obtain the high bits for the arena; other pointers of the same
type are likely to be in the same arena. However, they obtain
no information about pointers of other types, which are more
likely to be of interest to attackers.
TDI relies on instrumenting pointer arithmetic; speciﬁcally,
the security guarantees require that all pointer arithmetic is
instrumented, while the correctness guarantees require that
non-pointer arithmetic is not
instrumented. Our prototype
implementation demonstrates that balancing these needs is
possible for real-world C/C++ code.
However, there are some cases where this is not possible.
For example, when a union contains both a pointer and an
integer value, there may not be a correct approach, if arithmetic
may be relevant for both values. Similarly, code may store
pointers as integers. Although we make use of sources such
as TBAA, sometimes arithmetic on such values cannot be
statically detected. Such code is simply incompatible with
static instrumentation, but broader analysis or approaches like
tagged unions [54] may help in some cases.
Other memory safety work solves these difﬁculties in
different ways. For example, Low-fat Pointers [23] ignores
‘uglygeps’, excludes 23 CPU2006 functions (including gcc
and perlbench) and does not instrument integer arithmetic.
Although our analysis is more complete, we still had to apply
some patches; we expect similar results in other software.
IX. PROTOTYPE LIMITATIONS
A. Completeness
We instrument code at the LLVM IR level. Instructions
could be reordered or modiﬁed during code generation in a
way that compromises our mitigation. There are also inevitably
unknown bugs in our prototype passes; however, we did not
ﬁnd any missing instrumentation when manually inspecting
the output assembly code from TDI.
B. Type-based isolation
We rely on the type analysis of Type-after-Type [66] and
the limitations mentioned in their paper may result in mul-
tiple types being placed in the same arena. Complementary
approaches such as TypeClone [9] are an option for improving
security guarantees or reducing the number of types.
Our prototype of TDI does not place global variables in
type-based arenas; they are placed in data/BSS sections, in a
shared arena. Address-taken global variables could be isolated
by converting them to heap allocations. Custom memory
allocators may also need changes to ensure TDI’s type-based
isolation guarantees are as ﬁne-grained as possible.
C. Temporal safety
tcmalloc’s design does not isolate size classes once memory
is returned to central pools, so new allocations of types with
a non-power-of-two size can overlap with previous allocations
of such types. Our allocator allows memory to be returned to
(typed) central pools, reducing temporal safety (but not isola-
tion) when misalignment may occur. This could be solved by
rearchitecting tcmalloc, or using a different baseline allocator.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
111059
D. Compatibility
Custom memory allocators which directly call mmap or brk
must ensure that allocations do not span arena boundaries if
they allocate memory regions >4GB. Custom memory allo-
cation code can also reduce security. For example, OpenSSL’s
‘secure’ allocation functions resize buffers by allocating new
memory and memcpying the old contents, rather than using
realloc; such functions reduce security if used with TDI.
TDI limits maximum object size due to pointer masking. our
prototype limits objects to 4GB. If larger objects are required,
manual annotations can be used, or masking can be disabled
entirely for some functions/types. We demonstrated this for
two CPU2017 benchmarks. Where a huge number of types
are used in a program, we can run out of virtual address
space, which can be solved by increasing the coarseness of
the type classiﬁcation or reducing the guard zone size. In any
case, x86-64’s 47-bit space already allows more than 16,000
arenas, and 5-level paging (or ARMv8.2-LVA on ARM) adds
support for 56-bit userspace addresses. Note that TDI imposes
no limitations on how many objects can be allocated.
X. RELATED WORK
A. Secure allocators
Similar to TDI, secure allocators change the stack/heap
allocation strategy to improve security. A common approach
is to provide probablistic security by randomizing the po-
sitions at and/or order in which allocations are made, as
done by StackArmor [18] (stack), DieHard [10] (heap), and
OpenBSD’s allocator [44]. DieHarder [47] adds guard pages
to DieHard (like e.g., Electric Fence); however, allocations
remain distinguished by sizes, not types. Archipelego [39]
allocates one object per page, allowing guard zones between
objects. FreeGuard [61] provides probabilistic security using a
combination of randomization, delayed reuse, and guard zones.
Other efforts focus on temporal memory errors such as use-
after-free. MarkUs [5] delays freeing memory until pointers no
longer appear in memory, while FFmalloc [71] uses one-time
allocations (with no memory reuse at all).
Cling [6] mitigates heap memory reuse exploits using
independent allocator regions for each allocation site. Type-
after-Type [66] extends Cling’s design with compile-time type
detection,
improved wrapper detection, and stack support.
Automatic Pool Allocation [37] relies on points-to compiler
analysis to split allocations into separate typed pools, which
allows for temporal protection of a subset of C [21]. All these
defenses use some kind of “typed” pools to enable type-safe
memory reuse, but do not provide spatial data isolation.
Modern web browsers also use manual allocation-level iso-
lation to improve security, such as IE’s Isolated Heap. In par-
ticular, PartitionAlloc [2] is Chrome’s default allocator (as of
March 2021). It allows (manual) allocation in isolated arenas
(‘partitions’), mitigating some temporal and linear overﬂow
vulnerabilities, and could be used as an alternative allocator for
TDI. V8 also sandboxes WebAssembly by limiting memory
offsets (to the sum of two 32-bit offsets) and allocating guard
zones for ±8GB around the heap [4], with accesses always
using a valid base address.
B. Data isolation
Address-based defenses [33] typically use annotations of
sensitive types or data to isolate one or more speciﬁc regions of
memory. Domain-based defenses [33] instead protect sensitive
code, protecting the data used by that code, and only allowing
access when execution has switched to the relevant domain.
Existing solutions fall in either one or both classes of defenses
and implement different isolation mechanisms.
DataShield [15] uses annotations and masking via instru-
mentation. Data-ﬂow analysis identiﬁes potential sensitive data
accesses, needing slower metadata checks, and protects non-
memory ﬂows. Non-sensitive data is placed in memory <4GB
and pointers are truncated to 32 bits. Overhead in artiﬁcal case
studies, annotating a single type as sensitive, is 9.12% and
27.21% for two CPU2006 benchmarks, and lower (∼ 0% using
x86 preﬁxes) when code provably cannot access sensitive data.
ConfLLVM [12] also uses annotations along with segmen-
tation or Intel MPX. CPU2006 overhead is 24.5% without
any private data, although this includes CFI, and excludes
perlbench and xalancbmk (highest overhead in our evaluation).
MemSentry [33] evaluates a variety of these solutions,
implementing domain-based (virtualization and MPK) and
address-based (encryption, masking, and MPX) defenses. The
authors report 17.1% overhead for load masking on CPU2006.
Palit et al. [51] encrypt sensitive data using annotations and
points-to analysis. The overhead is 4-33% when protecting
only keys. MemCat [46] attempts to distinguish attacker-
controlled data using compile-time policy and allocates those
objects on a separate heap/stack. CPU2006 overhead is 21%.
ERIM [65] uses MPK (also Spectre-BCB-safe) to isolate
memory used by a trusted domain; they demonstrate low-
overhead protection of CPI’s [36] safe region. SeCage [38]
uses EPT (page table switching), automatically splitting off
code to protect annotated secrets, and xMP [53] uses a
similar approach to manually protect kernel data structures
or cryptographic data in user-space code.
Data Flow Integrity [17] (DFI) uses points-to analysis to
determine which stores should be accessible to each load,
enforcing ﬁne-grained isolation at runtime with costly instru-
mentation that checks/updates a metadata table on loads/stores.
Write Integrity Testing [7] (WIT) reduces DFI’s overhead by
only protecting stores and limiting object colors to at most 256,
adding guards between objects to compensate for imprecise
points-to analysis; overhead is 10% on a CPU2000 subset
(without eon or perlbmk, TDI’s worst cases). Other variants
of schemes relying on points-to analysis also exist [62].
Hardware memory tagging (e.g., MTE [26]) provides an
alternative isolation primitive; it could be used as an alternative
to arenas, with TDI used to protect tags from info leaks.
Finally, TDI draws inspiration from optimization strategies
used by prior SFI [69] and other solutions. For instance, Zeng
et al. [73] use simpler forms of range and dominating pointer
analysis on x86 assembly to eliminate SFI instrumentation
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
121060
on loads/stores. In contrast, TDI reasons over pointer arith-
metic at the compiler IR level, allowing simpler but more
effective static analysis to aggressively remove instrumenta-
tion. Previous work also used guard areas to eliminate SFI
instrumentation; in particular, on loads/stores with a ﬁxed base
pointer [57], a ﬁxed pointer offset [41], or to only detect
linear buffer overﬂows [11], [61]. In contrast, TDI uses guard
pages to reason about whether computed pointers are safe with
respect to arbitrary “valid” base pointers, rather than directly
reasoning about load/store accesses. TDI also considers specu-
lative ﬂows, which limit (or prohibit) the applicability of much
of this previous optimization work. Finally, TDI’s instrumenta-
tion relies on efﬁcient address masking similarly to some SFI
solutions [35] (others resort to bounds checking [24]), but uses
masking to preserve bits after pointer arithmetic, rather than
using a bitmask to remove bits at loads/stores. This allows TDI
to support ﬁne-grained isolation, rather than only the coarse-
grained (e.g., 2-color) isolation of traditional SFI solutions.
C. Bounds-checking defenses
Some bounds checking defenses have similarities to our
work. Baggy Bounds Checking [8] instruments arithmetic
using tagged pointers (on 64-bit), with ∼60-70% overhead.
Low-Fat Pointers [23] simpliﬁes this by encoding bounds into
valid pointers, instrumenting arithmetic and accesses, with
113% overhead. Delta Pointers [34] also instruments accesses
and arithmetic (documenting challenges similar to TDI’s); by
encoding the delta to object ends in pointers, the authors limit
detection to overﬂows and total memory space to 4GB, with
35% overhead. Similar in spirit to TDI’s guard zones, Delta
Pointers ofﬂoads checks to the MMU to improve performance.
Dhurjati et al. [19] use points-to analysis (via [37]) to
optimize bounds checks. By omitting checks when points-
to analysis fails, this avoids compatibility problems (unlike
similar work such as [20]) at the cost of security, and achieves
average overhead of ∼12% on the (simple) Olden benchmarks.
AddressSanitizer [58] is a compiler-based debugging tool,
using instrumentation, shadow memory and delayed reuse, but
recent overhead is still ∼80% on CPU2006. Newer sanitizers
such as CUP [13] and EffectiveSan [22] detect broader ranges
of threats, with signiﬁcantly higher overhead.
D. Spectre mitigations
Canella et al. [14] describe three categories of Spectre
mitigations: mitigating covert channels (e.g., reducing timer
accuracy or hardware changes), aborting speculation (e.g.,
fences or retpoline), and making secret data unreachable.
Compilers can automatically insert fences after vulnerable
branches to stop speculation [29], but attempts to implement
this efﬁciently for Spectre-BCB (e.g., in MSVC) have been
shown to be error-prone [31]. Blade [68] proposes fencing/-
masking only paths where data may speculatively leak, which
the authors apply to WebAssembly. Operating systems such as
Linux and other solutions [49], [70] use similar selective (and
thus noncomprehensive) fencing policies based on manual an-
notations or results of program (i.e., gadget) analysis. State-of-
the-art comprehensive solutions such as LLVM’s Speculative
Load Hardening [16] (SLH) mitigation offer a complete but
costly alternative. SLH forces a data dependency on the control
ﬂow leading to potentially-vulnerable loads, by mixing bits of
the predicates used by the control ﬂow into the pointers used
by such loads. In contrast to such mitigations, TDI provides
a gadget-agnostic defense with strong and ﬁne-grained data
isolation guarantees at low overheads.
Web browsers apply similar mitigations such as masking ar-
ray indexes [42], [52] and applying SLH-type poisoning [42],
[64]. Such mitigations are typically easier to comprehensively
deploy within JIT environments, but coarser-scale solutions
such as Site Isolation are still considered more cost effec-
tive [55]. Moreover, some of the efﬁcient masking solutions
used by modern browsers such as Firefox use coarse-grained
masks which still allow (limited) out-of-bounds accesses to
objects of a different type [28], in contrast to TDI.
Ghostbusting [30] proposes mitigating Spectre-BCB vulner-
abilities with data isolation via domain switching, and Con-
TExT [56] protects annotated sensitive data using hardware ex-
tensions or uncacheable (‘non-transient‘) memory mappings.
The former has been only evaluated with synthetic programs,
the latter reports 71% for OpenSSL RSA vs our ∼16%,
although our threat models differ signiﬁcantly.
Other efforts focus on detecting Spectre-BCB and similar
vulnerabilities. oo7 [70] ﬁnds potential Spectre vulnerabilities
using BAP to propagate taint from untrusted sources. Spec-
tector [27] instead applies symbolic execution to source code.
SpecFuzz [49] focuses on fuzzing software to ﬁnd Spectre-
BCB gadgets and seeks to reduce the overhead of SLH (but
also its security guarantees) by excluding branches that do
not appear vulnerable. TDI’s overhead for OpenSSL’s ECDSA
benchmark is ∼7%, vs SLH’s ∼70%; SpecFuzz improves
the latter by only 5%, although the performance difference
is less extreme for other cases. We could attempt
to use
SpecFuzz to reduce our masking, but this would remove non-
speculative protection and potentially increase our speculative
attack surface due to false negatives.
XI. CONCLUSION
We have shown that we can efﬁciently harden programs
against temporal and spatial (even speculative, a la Spectre-
BCB) info leak vulnerabilities, by using arenas to provide N-
color isolation. We have also demonstrated that our protection
can applied automatically by exploiting ﬁne-grained type
information for object coloring.
Our type-based arena allocation on the heap and stack
has typical run-time overhead far below 5% and already
provides a strong mitigation against classical temporal and
linear (adjacent) spatial attacks. We signiﬁcantly broaden this
protection by masking pointers to keep them in their intended
arena, mitigating non-adjacent and speculative vulnerabilities.
TDI still achieves acceptable run-time overhead by minimizing
the need to mask pointers. We believe this overhead could be
further improved with assistance from compiler frameworks.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
131061
ACKNOWLEDGEMENTS
We thank the anonymous reviewers, Koen Koning, and
Taddeus Kroes for their valuable feedback. This work was
supported by Intel Corporation through the Side Channel
Vulnerability ISRA, by the Netherlands Organisation for Sci-
entiﬁc Research through projects “TROPICS” and “Theseus”,
by EKZ through project “VeriPatch”, by Cisco Systems, Inc.
through grant #1138109, and by the Ofﬁce of Naval Research
(ONR) under awards N00014-16-1-2261 and N00014-17-1-
2788. This paper reﬂects only the authors’ view. The funding
agencies are not responsible for any use that may be made of
the information it contains.
REFERENCES
[1] “Google SafeSide,” https://github.com/google/safeside, September 2020.
https://chromium.googlesource.com/chromium/src/+/
[2] “Partitionalloc,”
master/base/allocator/partition\ allocator/PartitionAlloc.md.
[3] “wrk2,” https://github.com/giltene/wrk2, September 2019.
[4] “WebAssembly Out of Bounds Trap Handling,” 2016.
[5] S. Ainsworth and T. M. Jones, “MarkUs: Drop-in use-after-free preven-
tion for low-level languages,” in S&P ’20.
[6] P. Akritidis, “Cling: A memory allocator to mitigate dangling pointers,”
in USENIX Security ’10.
[7] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro, “Preventing
memory error exploits with wit,” in S&P ’08.
[8] P. Akritidis, M. Costa, M. Castro, and S. Hand, “Baggy bounds checking:
An efﬁcient and backwards-compatible defense against out-of-bounds
errors.” in USENIX Security ’09.
[9] M. Barbar, Y. Sui, and S. Chen, “Flow-sensitive type-based heap
cloning,” in ECOOP ’20.
languages,” in PLDI ’06.
[10] E. Berger and B. Zorn, “DieHard: probabilistic memory safety for unsafe
[11] S. Bhatkar and R. Sekar, “Data space randomization,” in DIMVA ’08.
[12] A. Brahmakshatriya, P. Kedia, D. P. McKee, D. Garg, A. Lal, A. Rastogi,
H. Nemati, A. Panda, and P. Bhatu, “ConfLLVM: A compiler for
enforcing data conﬁdentiality in low-level code,” in EuroSys ’19.
[13] N. Burow, D. McKee, S. A. Carr, and M. Payer, “CUP: Comprehensive
user-space protection for C/C++,” in AsiaCCS ’18.
[14] C. Canella, J. Van Bulck, M. Schwarz, M. Lipp, B. Von Berg, P. Ortner,
F. Piessens, D. Evtyushkin, and D. Gruss, “A systematic evaluation of