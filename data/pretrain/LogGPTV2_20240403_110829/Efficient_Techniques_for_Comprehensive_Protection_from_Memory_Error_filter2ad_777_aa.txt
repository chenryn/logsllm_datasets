title:Efficient Techniques for Comprehensive Protection from Memory Error
Exploits
author:Sandeep Bhatkar and
Daniel C. DuVarney
Efﬁcient Techniques for Comprehensive Protection
from Memory Error Exploits
Sandeep Bhatkar, R. Sekar and Daniel C. DuVarney
Department of Computer Science,
Stony Brook University, Stony Brook, NY 11794
{sbhatkar,sekar,dand}@cs.sunysb.edu
Abstract
Despite the wide publicity received by buffer overﬂow
attacks, the vast majority of today’s security vulnera-
bilities continue to be caused by memory errors, with
a signiﬁcant shift away from stack-smashing exploits
to newer attacks such as heap overﬂows, integer over-
ﬂows, and format-string attacks. While comprehensive
solutions have been developed to handle memory errors,
these solutions suffer from one or more of the follow-
ing problems: high overheads (often exceeding 100%),
incompatibility with legacy C code, and changes to the
memory model to use garbage collection. Address space
randomization (ASR) is a technique that avoids these
drawbacks, but existing techniques for ASR do not offer
a level of protection comparable to the above techniques.
In particular, attacks that exploit relative distances be-
tween memory objects aren’t tackled by existing tech-
niques. Moreover, these techniques are susceptible to
information leakage and brute-force attacks. To over-
come these limitations, we develop a new approach in
this paper that supports comprehensive randomization,
whereby the absolute locations of all (code and data) ob-
jects, as well as their relative distances are randomized.
We argue that this approach provides probabilistic pro-
tection against all memory error exploits, whether they
be known or novel. Our approach is implemented as a
fully automatic source-to-source transformation which
is compatible with legacy C code. The address-space
randomizations take place at load-time or runtime, so
the same copy of the binaries can be distributed to every-
one — this ensures compatibility with today’s software
distribution model. Experimental results demonstrate an
average runtime overhead of about 11%.
1 Introduction
A vast majority of security vulnerabilities reported in re-
cent years have been based on memory errors in C (and
C++) programs. In the past two years, the CERT Coor-
dination Center (now US-CERT) [5] has issued about 54
distinct advisories involving COTS software, of which
44 (over 80%) are due to memory errors.
In spite of
the wide publicity received by buffer overﬂow attacks,
the fraction of vulnerabilities attributed to memory er-
rors has grown steadily in the past ten years or so.
Even as techniques such as “stack-guarding” [10]
have been developed to defeat the most common form of
exploit, namely stack-smashing, newer forms of attacks
continue to be discovered. The fraction of memory er-
ror exploits attributed to newer forms of attacks such as
heap overﬂows, integer overﬂows, and format-string at-
tacks have increased signiﬁcantly in the past two years:
22 of the 44 CERT/CC advisories in the past two years
are attributed to these newer forms of attacks, as opposed
to 32 that were attributed to stack-smashing. (Note that
some advisories report multiple vulnerabilities together.)
This spate of new memory-related attacks suggests that
new ways to exploit memory errors will continue to be
discovered, and hence these errors will likely to be the
principal source of cyber attacks in the foreseeable fu-
ture.
We can, once for all, eliminate this seemingly end-
less source of vulnerabilities by adding complete mem-
ory error protection. Unfortunately, existing techniques
such as backwards-compatible bounds checking [17]
and its descendant CRED [26] are associated with high
overheads, sometimes exceeding 1000%. Lower over-
heads are reported in [32], but the overheads can still
be over 100% for some programs. Approaches such as
CCured [23] and Cyclone [16] can bring down this over-
head signiﬁcantly, but aren’t compatible with legacy C
code. Nontrivial programming effort is often required
to port existing C programs so that they can work with
these tools. Precompiled libraries can pose additional
compatibility problems. Finally, these two approaches
rely on garbage collection instead of the explicit mem-
ory management model used in C programs, which can
pose another obstacle to their widespread acceptance.
Whereas the above approaches are concerned with
preventing all invalid memory accesses, we present an
approach with a more limited goal: it only seeks to en-
sure that the results of any invalid access are unpre-
USENIX Association
14th USENIX Security Symposium
255
dictable. We show that this goal can be achieved with
a much lower runtime overhead of about 10%. Our ap-
proach avoids the compatibility issues mentioned above
with complete memory error protection techniques. Al-
though the protection provided by our approach is only
probabilistic, we show that for all known classes of at-
tacks, the odds of success are very small.
Our approach is based on the concept of address
obfuscation [4], whose goal is to obscure the location
of code and data objects that are resident in memory.
Several techniques have been developed to achieve such
obfuscation using randomization techniques [13, 24, 4,
31]. Although these techniques can provide protection
against most known types of memory error exploits,
they are vulnerable to several classes of attacks includ-
ing relative-address attacks, information leakage attacks,
and attacks on randomization [27]. More importantly,
they do not provide systematic protection against all
memory error exploits, which means that other attacks
on these techniques will likely continue to be discovered
in the future. In contrast, the approach developed in this
paper is aimed at protecting against all memory error ex-
ploits, whether they be known or unknown.
1.1 Overview of Approach
Our approach makes the memory locations of program
objects (including code as well as data objects) unpre-
dictable. This is achieved by randomizing the absolute
locations of all objects, as well as the relative distance
between any two objects.
Our implementation uses a source-to-source trans-
formation on C programs. Note that a particular ran-
domization isn’t hard-coded into the transformed code.
Instead, the transformation produces a self-randomizing
program: a program that randomizes itself each time it
is run, or continuously during runtime. This means that
the use of our approach doesn’t, in any way, change the
software distribution model that is prevalent today. Soft-
ware providers can continue to distribute identical copies
of program binaries to all users.
In our approach, the location of code objects is ran-
domized using binary transformation at load-time. Static
data objects are randomized at the beginning of program
execution. Stack objects are continuously randomized
throughout runtime. The key techniques used in achiev-
ing this randomization are outlined below.
• Randomizing stack-resident variables. Our approach
randomizes the locations of stack-allocated variables
continuously at runtime. It is based on:
– Shadow stack for buffer-type variables. A sepa-
rate stack is used for allocating arrays, as well as
structures whose addresses are taken. By sepa-
rating buffer-type variables, any overﬂow attacks
are prevented from corrupting information such as
return address or local variables that have pointer
types. Moreover, to randomize the effect of over-
ﬂows from one buffer-type variable to the next, we
randomize the order of allocation of these buffer
variables in a different way for each call.
– Randomizing the base of activation records. To
obscure the location of other stack-resident data,
we randomize the base of the stack, as well as
introduce random-sized gaps between successive
stack frames.
• Randomizing static data. The location of each static
variable, as well the relative order of these variables,
is determined at the start of execution of the trans-
formed program. Our transformation converts ev-
ery access to a static variable to use an additional
level of indirection, e.g., an access v is converted into
something like (*v ptr). At the beginning of pro-
gram execution, the location of the variable v is deter-
mined, and this value is stored in v ptr. Note that, in
effect, the only static variables left in the transformed
program are the pointer variables such as v ptr. Al-
though these variables have predictable locations, at-
tacks on them are prevented by storing them in read-
only memory.
• Randomizing code. Code is randomized at the gran-
ularity of individual functions. Our technique asso-
ciates a function pointer f ptr with each function f,
and transforms every call into an indirect call using
f ptr. The order of different functions can now be
freely permuted in the binary, as long as f ptr is up-
dated to reﬂect the new location of the function body
for f. Although the location of f ptr variables are
predictable, attacks on them are prevented by write-
protecting them.
In addition to these steps, our approach randomizes the
base of the heap, gaps between heap allocations, and the
location of functions in shared libraries.
1.2
Impact of Comprehensive Randomization on
Memory Error Exploits
Intuitively, a memory error occurs in C programs when
the object accessed via a pointer expression is different
from the one intended by the programmer. The intended
object is called the referent of the pointer. Memory er-
rors can be classiﬁed into spatial and temporal errors:
I. A spatial error occurs when dereferencing a pointer
that is outside the bounds of its referent. It may be
caused as a result of:
(a) Dereferencing non-pointer data, e.g., a pointer
may be (incorrectly) assigned from an integer,
and dereferenced subsequently. Our randomiza-
tion makes the result of this dereferencing unpre-
dictable. The same integer value, when interpreted
256
14th USENIX Security Symposium
USENIX Association
as a pointer, will reference different variables (or
code) for each execution of the program.
(b) Dereferencing uninitialized pointers. This case
differs from the ﬁrst case only when a memory ob-
ject is reallocated. In the absence of our transfor-
mation, the contents of uninitialized pointers may
become predictable if the previous use of the same
memory location can be identiﬁed. For instance,
suppose that during an invocation of a function f,
its local variable v holds a valid pointer value. If
f is invoked immediately by its caller, then v will
continue to contain the same valid pointer even be-
fore its initialization. By introducing random gaps
in the stack, our approach changes the location of
v across different invocations of f, thereby mak-
ing the result of uninitialized pointer dereferences
unpredictable. A similar argument applies to real-
location within the heap, as our transformation in-
troduces random-sized gaps between heap objects.
(c) Valid pointers used with invalid pointer arith-
metic. The most common form of memory access
error, namely, out-of-bounds array access, falls in
this category. Since the relative distances between
memory objects are randomized in our approach,
one cannot determine the target object that will be
accessed as a result of invalid pointer arithmetic.
II. A temporal error occurs when dereferencing a
pointer whose referent no longer exists, i.e., it has
been freed previously. If the invalid access goes to an
object in free memory, then it causes no errors. But
if the memory has been reallocated, then temporal er-
rors allow the contents of the reallocated object to be
corrupted using the invalid pointer. Note that this case
is essentially the same as case I(b), in that the results
of such errors become predictable only when the pur-
pose of reuse of the memory location is predictable.
Since our transformation makes this unpredictable,
there is no way for attackers to predict the result of
memory dereferences involving temporal errors.
It may appear that temporal errors, and errors involving
uninitialized pointers, are an unlikely target for attack-
ers.
In general, it may be hard to exploit such errors
if they involve heap objects, as heap allocations tend to
be somewhat unpredictable even in the absence of any
randomizations. However, stack allocations are highly
predictable, so these errors can be exploited in attacks
involving stack-allocated variables. Our randomization
technique reduces this likelihood.
We point out that previous techniques for ASR ad-
dress case I(a), but not the other three cases, and hence
the approach presented in this paper is the ﬁrst random-
ization technique that has the potential to defend against
all memory exploits.
1.3 Beneﬁts of Our Approach
Our approach provides the following beneﬁts:
• Ease of use. Our approach is implemented as an au-
tomatic, source-to-source transformation, and is fully
compatible with legacy C code. It can interoperate
with preexisting (untransformed) libraries. Finally, it
doesn’t change the current model of distributing iden-
tical copies of software (on CDs or via downloads) to
all users.
• Comprehensive randomization. At runtime, the abso-
lute as well as relative distances between all memory-
resident objects are randomized. Hence the approach
presented in this paper can address the full range of
attacks that exploit memory errors. This contrasts
with previous ASR approaches [24, 4] that are vul-
nerable to relative-address-dependent attacks.
• Portability across multiple platforms. The vast ma-
jority of our randomizations are OS and architecture
independent. This factor eases portability of our ap-
proach to different platforms. Of particular signiﬁ-
cance is the fact that our approach sidesteps the bi-
nary disassembly and rewriting problems that have
proven to be the Achilles’ heel of other techniques
that attempt transformations or randomization of bi-
nary code.
• Low runtime overhead. Our approach produces low
overheads, typically in the range of 10%.
It is in-
teresting to note that, in spite of providing much
more comprehensive randomization, our overheads
are comparable to that of [4, 24].
• Ease of deployment. Our approach can be applied to
individual applications without requiring changes to
the OS kernel, system libraries or the software distri-
bution models. It empowers code producers and code
consumers to improve security of individual applica-
tions without requiring cooperation of the OS ven-
dors. This ability to deploy at an application granular-
ity provides an incremental deployment path, where
computers can gradually become more robust against
memory error exploits even when their operating sys-
tems aren’t upgraded for years.
1.4 Paper Organization
The rest of the paper is organized as follows. In Sec-
tion 2, we describe transformations to introduce various
randomizations. Section 3 describes our implementa-
tion of these transformations. Runtime overheads intro-
duced by our approach are discussed in Section 4. Sec-
tion 5 discusses the effectiveness of our approach against
different attacks, and analyzes the probability of mount-
ing successful attacks. Related work is covered in Sec-
tion 6. Finally, concluding remarks appear in Section 7.
USENIX Association
14th USENIX Security Symposium
257
2 Transformation Approach
2.1 Static Data Transformations
One possible approach to randomize the location of
static data is to recompile the data into position-
independent code (PIC). This is the approach taken in
PaX ASLR [24], as well as in [4]. A drawback of this
approach is that it does not protect against relative ad-
dress attacks, e.g., an attack that overﬂows past the end
of a buffer to corrupt security-critical data that is close
to the buffer. Moreover, an approach that relies only on
changes to the base address is very vulnerable to infor-
mation leakage attacks, where an attacker may mount
a successful attack just by knowing the address of any
static variable, or the base address of the static area. Fi-
nally, on operating systems such as Linux, the base ad-
dress of different memory sections for any process is vis-
ible to any user with access to that system, and hence the
approach does not offer much protection from this class
of attacks.
For the reasons described above, our approach is
based on permuting the order of static variables at the
beginning of program execution. In particular, for each
static variable v, an associated (static) pointer variable
v ptr is introduced in the transformed program. All
accesses to the variable v are changed to reference
(*v ptr) in the transformed program. Thus, the only
static variables in the transformed program are these
v ptr variables, and the program no longer makes any
reference to the original variable names such as v.
At the beginning of program execution, control is
transferred to an initialization function introduced into
the transformed program. This function ﬁrst allocates a
new region of memory to store the original static vari-
ables. This memory is allocated dynamically so that its
base address can be chosen randomly. Next, each static
variable v in the original program is allocated storage
within this region, and v ptr is updated to point to the
base of this storage.
To permute the order of variables, we proceed as
follows. If there are n static variables, a random number
generator is used to generate a number i between 1 and
n. Now, the ith variable is allocated ﬁrst in the newly
allocated region. Now, there are n − 1 variables left,
and one can repeat the process by generating a random
number between 1 and n − 1 and so on.
Note that bounds-checking errors dominate among
memory errors. Such errors occur either due to the use of
an array subscript that is outside its bounds, or more gen-
erally, due to incorrect pointer arithmetic. For this rea-
son, our transformation separates buffer-type variables,
which can be sources of bounds-checking errors, from