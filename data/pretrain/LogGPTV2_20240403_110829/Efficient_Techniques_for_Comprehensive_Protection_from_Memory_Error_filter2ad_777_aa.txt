# Efficient Techniques for Comprehensive Protection from Memory Error Exploits

**Authors: Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney**

**Department of Computer Science, Stony Brook University, Stony Brook, NY 11794**

**Emails: {sbhatkar, sekar, dand}@cs.sunysb.edu**

## Abstract

Despite the extensive attention given to buffer overflow attacks, a significant majority of today's security vulnerabilities continue to stem from memory errors. The landscape of these vulnerabilities has shifted from stack-smashing exploits to newer forms such as heap overflows, integer overflows, and format-string attacks. While comprehensive solutions have been developed to address memory errors, they often suffer from high overheads (often exceeding 100%), incompatibility with legacy C code, and the need for changes to the memory model, such as using garbage collection. Address Space Randomization (ASR) is a technique that avoids these drawbacks but existing ASR methods do not provide comparable levels of protection. Specifically, they fail to address attacks that exploit relative distances between memory objects and are susceptible to information leakage and brute-force attacks.

To overcome these limitations, we present a new approach that supports comprehensive randomization, randomizing both the absolute locations and relative distances of all (code and data) objects. This approach provides probabilistic protection against all memory error exploits, whether known or novel. Our method is implemented as a fully automatic source-to-source transformation, compatible with legacy C code. The randomizations occur at load-time or runtime, ensuring compatibility with current software distribution models. Experimental results demonstrate an average runtime overhead of about 11%.

## 1. Introduction

A vast majority of security vulnerabilities reported in recent years have been due to memory errors in C (and C++) programs. In the past two years, the CERT Coordination Center (now US-CERT) [5] has issued approximately 54 distinct advisories involving commercial off-the-shelf (COTS) software, with 44 (over 80%) attributed to memory errors.

Despite the widespread awareness of buffer overflow attacks, the proportion of vulnerabilities caused by memory errors has steadily increased over the past decade. Even as techniques like "stack-guarding" [10] have been developed to counter stack-smashing, new forms of attacks, such as heap overflows, integer overflows, and format-string attacks, have emerged. In the past two years, 22 out of 44 CERT/CC advisories were attributed to these newer forms of attacks, compared to 32 for stack-smashing. This trend suggests that new ways to exploit memory errors will continue to be discovered, making them a primary source of cyber attacks in the foreseeable future.

Complete memory error protection can eliminate this seemingly endless source of vulnerabilities. However, existing techniques, such as backwards-compatible bounds checking [17] and its descendant CRED [26], come with high overheads, sometimes exceeding 1000%. Lower overheads are reported in [32], but they can still exceed 100% for some programs. Approaches like CCured [23] and Cyclone [16] reduce overhead but are incompatible with legacy C code, requiring significant programming effort to port existing C programs. Additionally, these approaches rely on garbage collection, which is not consistent with the explicit memory management model used in C programs.

In contrast, our approach aims to ensure that the results of any invalid access are unpredictable, achieving this with a much lower runtime overhead of about 10%. Our method avoids the compatibility issues associated with complete memory error protection techniques. Although the protection is probabilistic, we show that the odds of success for all known classes of attacks are very small.

Our approach is based on address obfuscation [4], which obscures the location of code and data objects in memory. Several randomization techniques [13, 24, 4, 31] have been developed to achieve this obfuscation. However, these techniques are vulnerable to relative-address attacks, information leakage, and attacks on randomization [27]. They also do not provide systematic protection against all memory error exploits. In contrast, our approach aims to protect against all memory error exploits, whether known or unknown.

### 1.1 Overview of Approach

Our approach makes the memory locations of program objects (including code and data) unpredictable by randomizing their absolute locations and the relative distances between them. We implement this through a source-to-source transformation on C programs, producing a self-randomizing program that randomizes itself each time it runs or continuously during runtime. This ensures compatibility with the current software distribution model, allowing identical copies of binaries to be distributed to all users.

- **Randomizing Stack-Resident Variables**: We randomize the locations of stack-allocated variables continuously at runtime. This includes:
  - A shadow stack for buffer-type variables, which prevents overflows from corrupting critical information.
  - Randomizing the base of activation records and introducing random-sized gaps between successive stack frames.

- **Randomizing Static Data**: At the start of execution, the location of each static variable and their relative order are determined. Accesses to static variables are converted to use an additional level of indirection. These pointer variables are stored in read-only memory to prevent attacks.

- **Randomizing Code**: Code is randomized at the granularity of individual functions. Each function is associated with a function pointer, and every call is transformed into an indirect call using this pointer. The order of functions can be freely permuted, with the function pointers updated to reflect the new locations.

- **Additional Randomizations**: We also randomize the base of the heap, gaps between heap allocations, and the location of functions in shared libraries.

### 1.2 Impact of Comprehensive Randomization on Memory Error Exploits

Memory errors in C programs occur when the object accessed via a pointer expression differs from the intended referent. These errors can be classified into spatial and temporal errors:

- **Spatial Errors**: Occur when dereferencing a pointer outside the bounds of its referent. This can be caused by:
  - Dereferencing non-pointer data.
  - Dereferencing uninitialized pointers.
  - Using valid pointers with invalid pointer arithmetic.

- **Temporal Errors**: Occur when dereferencing a pointer whose referent no longer exists. If the memory has been reallocated, temporal errors can corrupt the contents of the reallocated object.

Our randomization technique reduces the predictability of these errors, making them less exploitable. Previous ASR techniques address only one type of spatial error, while our approach is the first to potentially defend against all memory exploits.

### 1.3 Benefits of Our Approach

- **Ease of Use**: Fully automatic source-to-source transformation, compatible with legacy C code, and interoperable with preexisting libraries.
- **Comprehensive Randomization**: Randomizes both absolute and relative distances between memory-resident objects, addressing a wide range of memory error exploits.
- **Portability**: OS and architecture-independent, sidestepping binary disassembly and rewriting problems.
- **Low Runtime Overhead**: Typically around 10%, comparable to other ASR techniques.
- **Ease of Deployment**: Can be applied to individual applications without requiring changes to the OS kernel, system libraries, or software distribution models.

### 1.4 Paper Organization

The rest of the paper is organized as follows:
- **Section 2**: Describes the transformations to introduce various randomizations.
- **Section 3**: Details the implementation of these transformations.
- **Section 4**: Discusses the runtime overheads introduced by our approach.
- **Section 5**: Analyzes the effectiveness of our approach against different attacks and the probability of successful attacks.
- **Section 6**: Covers related work.
- **Section 7**: Concluding remarks.

---

**USENIX Association**
**14th USENIX Security Symposium**
**257**