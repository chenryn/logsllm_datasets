Recent studies have shown that major US cellular
carriers connect their cellular networks with the In-
ternet through a few infrastructure locations (so-called
ingress points) [20, 21]. This means that probes for
many cellular devices traverse a common ingress point,
and thus they would appear to be co-located on the
Internet topology. This explains why Verizon wireless
has a large homogeneous block. We suspect that the
ingress points of Tele2 also cover a wide area because
the addresses within the Tele2 blocks are located across
three countries– Sweden, Croatia and Netherlands, ac-
cording to the Maxmind GeoLite databases and their re-
verse DNS names. We are not certain that OCN ingress
points also cover a wide area but it appears likely, con-
sidering that the OCN blocks are as large as Tele2 and
Verizon wireless blocks. Therefore, our result may im-
ply that not only US cellular carriers but also Euro-
pean (Tele2) and Asian (OCN) carriers deploy only a
few ingress points.
The last block is owned by Cox, which provides ﬁxed
broadband service to residential and business customers.
Most of the addresses within the block are located in
Phoenix, Arizona according to the Maxmind GeoLite
databases and their reverse DNS names. They do not
seem to be residential addresses, considering that most
of their reverse DNS names begin with “wsip” whereas
Bitcoin nodes in the Cox network (which are likely to
be residential) mostly have the reverse DNS names be-
ginning with “ip” [22]. Cox operates a large datacenter
in Phoenix for business customers [23]. It could be the
location where the addresses within the Cox block are
allocated to. Singtel and SoftBank also provide data-
center services. The Singtel and SoftBank blocks might
also be assigned to datacenters, considering that their
RTTs were very stable (Figure 6).
5.3 Are the addresses within blocks numer-
ically adjacent?
Topologically co-located addresses may be expected
to be numerically adjacent because routing decisions are
usually based on preﬁxes rather than the entire address.
In this section, we analyze the numerical adjacency of
the /24 blocks within the homogeneous blocks we have
identiﬁed. We estimate the degree of adjacency between
a /24 pair by computing the longest common preﬁx
length of the pair. Since we compare /24s (rather than
entire addresses), the length ranges from 0 to 23, and
high length represents high degree of adjacency.
We numerically sort the /24s within each homoge-
neous block, and then compute the common preﬁx length
between the /24s that are right next to each other. Fig-
ure 7a shows the distribution of the lengths. More than
30% of the /24 pairs have the length 23, and the lengths
of about 70% are at least 20. This implies that many
/24s are contiguous within the blocks. However, this
does not necessarily mean that the blocks mostly consist
of a single contiguous block. We next measure the com-
mon preﬁx length between the smallest and the largest
/24s within each block (ﬁgure 7b). About 40% of the
pairs have the length 0 or 1 whereas only about 5% have
the length 23. This, in combination with the above re-
sult that many /24s are contiguous, implies that ho-
mogeneous blocks often consist of multiple contiguous
sub-blocks that are separated from each other.
159#1. EGI Hosting (cluster size - 1251)
#2. Tele2 (1187)
#3. Amazon (1122)
#4. NTT America (1071)
#5. OPENTRANSFER (940)
#6. Tele2 (857)
#7. OCN (840)
#8. Amazon (835)
#9. OCN (783)
Figure 8: Visualization of numerical adjacency of /24s within the top 9 homogeneous blocks
t
e
g
a
n
e
c
r
e
P
e
g
a
t
n
e
c
r
e
P
 35
 30
 25
 20
 15
 10
 5
 0
 30
 25
 20
 15
 10
 5
 0
 0
 5
 10
 15
 20
Common Prefix Length
(a)
 0
 5
 10
 15
 20
Common Prefix Length
(b)
Figure 7: The length distribution of the longest com-
mon preﬁxes between (a) adjacent /24s within homoge-
neous blocks (b) the smallest and the largest /24s
We verify that homogeneous blocks consist of con-
tiguous sub-blocks by visualizing the adjacency of the
/24s within the top 9 largest homogeneous blocks in
Figure 8. For each block, given a sorted list of /24s
{p1, p2, ..., pn}, we draw a vertical line at xi such that
(cid:5)
xi =
1
xi−1 + (24− LCP LEN (pi−1, pi))
if i is 1
if i >1
where LCP LEN (pi, pj) denotes the longest com-
mon preﬁx length of pi and pj. The gap between the
vertical lines represents the degree of adjacency. A large
gap indicates low degree because the gap becomes larger
as the length of the corresponding longest common pre-
ﬁx decreases. Most of the blocks contain large contigu-
ous segments, none of which covers the entire block.
This demonstrates that large homogeneous blocks mainly
consist of several contiguous sub-blocks that are sepa-
rated from each other.
6 AGGREGATING DIFFERENT BUT
SIMILAR /24 BLOCKS
Aggregating the /24 blocks that have identical sets of
last-hop routers is an all-or-nothing approach. /24 blocks
having some common last-hop routers but not identical
are treated the same as disjoint /24 blocks, irrespective
of how many last-hop routers they have in common.
This could be too conservative, because some /24s that
are actually homogeneous may appear by measurement
to not have identical sets of last-hop routers.
In this
section, we explain when they appear so and discuss
how to aggregate those /24s.
6.1 Why care about similar blocks?
/24 blocks are associated with multiple last-hop routers
if the addresses within them have diﬀerent last-hop routers
due to per-destination load-balancing. Unlike per-ﬂow
load-balanced paths that can be enumerated by control-
ling the header ﬁelds of the probes towards a single des-
tination, per-destination load-balanced paths are found
by sending probes to distinct destinations. Therefore,
we may fail to identify some load-balanced paths (and
thus some last-hop routers) of a /24 if it has a small
number of responsive addresses. As a result, some ho-
mogeneous /24s might have non-identical sets of last-
hop routers. Probing /24s varying vantage points and
times can alleviate this problem, because some routers
compute hashes for per-destination load-balancing based
on both the source and destination IP address [24] and
the availability of /24 blocks varies over time [2]. How-
ever, the measurement load of this approach can be very
heavy depending on how many times we repeat probing.
Furthermore, many of the probes can be wasted, par-
ticularly for addresses that are constantly unresponsive
and load-balancers that do not involve source addresses
in deciding next hop. For this reason, we try a diﬀerent
approach. We explore the possibility of inferring the
homogeneity from partial information using clustering.
6.2 Selecting a clustering algorithm
Not all clustering algorithms are applicable to our
problem. For example, we cannot employ k-means clus-
tering because it runs on points in a vector space, which
is not proper to model our problem. A partitional clus-
tering algorithm proposed for identifying homogeneous
IPv4 address blocks in terms of address usage [25] is also
not suitable for our problem, because it assumes that
addresses are only grouped into blocks that are numer-
160ically adjacent, which is not true for homogeneity in
terms of topological proximity (as shown in Figure 7b).
Hierarchical agglomerative clustering supports any pair-
wise distance so it can be a candidate. Graph clustering
algorithms are also suitable in that our problem can be
modelled as a graph. Graph clustering algorithms have
been shown to perform better than hierarchical agglom-
erative clustering [26], and MCL (the Markov Cluster
Algorithm) [5, 27], which is one of graph clustering al-
gorithms, has shown a superior performance over other
graph clustering algorithms [28]. Thus, we choose MCL.
6.3 Modeling and preprocessing
|SA∩SB|
Given a list of /24 blocks associated with the sets of
last-hop routers, we ﬁrst quantify similarities between
all /24 pairs. For two /24s A and B which are associated
with the sets of last-hop routers SA and SB, the similar-
ity score between A and B is deﬁned as
max(|SA|, |SB|) .
For example, if a /24 block A has a set of last-hop
routers {1.1.1.1, 2.2.2.2, 3.3.3.3} and B has {3.3.3.3,
4.4.4.4}, the similarity score between A and B is 1
3 . We
model /24 blocks and similarity scores as a weighted
undirected graph. We represent each /24 as a vertex
and the similarity score between each /24 pair as a
weighted edge connecting the corresponding vertices, of
which weight is equal to the score. (If a /24 pair has the
score 0, i.e., it has disjoint sets of last-hop routers, we
do not make an edge). MCL takes the graph as an in-
put and generates the groups of vertices that are likely
to be homogeneous.
One issue is that MCL has high time and space com-
plexity (like other graph clustering algorithms and hi-
erarchical agglomerative clustering). It requires O(N 3)
time and O(N 2) space whereN is the number of ver-
tices. Since we have 1.77M /24 blocks and thus the
input graph with 1.77M vertices, memory and time re-
quirements can be excessively high.10 To mitigate this,
we pre-process the input graph in two steps. First, we
aggregate the vertices connected by an edge of weight 1.
Since the /24s corresponding to those vertices have the
identical sets of last-hop routers, their similarity scores
with other /24s are also identical. Hence, we can con-
sider those vertices as one vertex. This step also can be
viewed as creating a vertex for each of the aggregated
homogeneous blocks that we described in Section 5.1,
instead of for each /24. Second, based on the intuition
that the input graph is unlikely to be (strongly) con-
nected (because many /24s are topologically separated),
we divide the input graph into multiple connected com-
ponents and run MCL separately on each of the con-
nected components. This would not degrade the clus-
tering results because vertices that are not reachable
from each other are unlikely to be clustered in MCL.
Since time and space complexity of MCL is cubic and
10A perturbed version of MCL can reduce time and space
complexity. Unfortunately, even with that, resource re-
quirements for our graph were very high.
quadratic respectively, splitting an input graph reduces
memory and space requirements. Another advantage is
that MCL can be applied to each component in paral-
lel. The ﬁrst step reduces the number of vertices from
1.77M to 0.53M, and the second step splits the input
graph into 17,563 connected components.
6.4 Running MCL
MCL takes a parameter that determines cluster gran-
ularity. To ﬁnd a good value of the parameter, we
perform a parameter sweep and choose a parameter
that minimizes the percentage of edges (within clusters)
whose weight is less than the median of the all edge
weights. We run MCL on each of the connected com-
ponents using the chosen parameter. MCL has grouped
413k vertices into 58k clusters while leaving the other
120k vertices unclustered. If we regard /24 blocks that
have at least one common last-hop router as being topo-
logically co-located, the clusters generated by MCL are
all likely to be homogeneous. On the other hand, if
we only consider /24 blocks having the identical sets
of last-hop routers as being co-located, it is uncertain
whether the MCL clusters are homogeneous. We take
the latter in this paper (as we did in Section 5), and
thus the MCL clusters need to be veriﬁed.
6.5 Validating MCL clusters
We verify whether /24 blocks within the MCL clus-
ters actually have the identical sets of last-hop routers
using “reprobing”, which is another way of dealing with
similar but non-identical /24s as discussed in Section 6.1.
We select 20k /24 pairs from each cluster while choos-
ing all the pairs if a cluster has fewer than 20k pairs,
and then reprobe them. We modify the original prob-
ing strategy (Section 3.5) to improve the possibility of
identifying all last-hop routers for /24s. First, we do
not stop probing even if non-hierarchical relationship is
found. Second, we set the maximum number of probes
to the number required for enumerating all interfaces
with 95% conﬁdence [14] (which is generally higher than
the number required for testing the hierarchy). We
probe each of the chosen /24 pairs with the modiﬁed
strategy and determine that the cluster is homogeneous
if all the pairs within it have the identical sets of last-
hop routers. By reprobing, about 9k clusters have been
determined to be homogeneous.
We may consider replacing the original probing strat-
egy with the modiﬁed version even for measuring the ho-
mogeneity of /24 blocks (because it could potentially in-
crease the chance of ﬁnding homogeneous blocks larger
than /24). However, the modiﬁed version incurs addi-
tional measurement loads and it may have limited bene-
ﬁts, in that it does not help to measure the homogeneity
of /24s, and that the original strategy enables us to ﬁnd
a substantial amount of homogeneous blocks larger than
/24 (as shown in Section 5.1). Hence, we do not replace
the original strategy.
161F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Clusters unmatched
Clusters matched
 0
 0.2
 0.4
 0.6
 0.8
 1
The Ratio of Identical /24 Pairs
Figure 9: The ratio of identical /24 pairs within clusters
that match and do not match the rule
6.6 Discussion and ﬁnal results
Before presenting our ﬁnal results, we discuss the pos-
sibility of inferring the homogeneity of the clusters with-
out reprobing. In other words, we discuss if there can
be a rule that distinguishes homogeneous clusters from
the others. We divide the clusters in two groups, clus-
ters conﬁrmed to be homogeneous by reprobing and the
rest. We then inspect each of the group trying to ﬁnd
a rule that matches only the homogeneous clusters. We
have found a rule that shows promise11. To demon-
strate the quality of the rule, we measure the ratios of
the /24 pairs conﬁrmed to have identical sets of last-
hop routers by reprobing to all the reprobed /24 pairs
within each cluster. A high ratio indicates a high degree
of homogeneity. Figure 9 depicts the CDFs of the ratios
of the clusters that match the rule and those of the oth-
ers. About 90% of the clusters matching the rule have
the ratio greater than 0.6 and 57% of the clusters have
ratio 1. On the other hand, about 60% of the clusters
that do not match the rule have ratio 0. This result
shows the possibility of solely using clustering to iden-
tify homogeneous blocks. We do not include the clusters
that match the rule in our ﬁnal results unless they are
conﬁrmed to be homogeneous by reprobing. Our rule
is experimental in that it does not match all the homo-
geneous clusters (found by reprobing), and the clusters
matching the rule need to be further veriﬁed whether
they are homogeneous.
We have found 9k additional homogeneous blocks us-
ing clustering in combination with reprobing. Figure 10
shows the changes in the distribution of the cluster sizes
caused by new clusters. A substantial number of small-
sized clusters (20-25) decreased, implying that they were
aggregated into larger clusters. As a result, the numbers
of midsize clusters (25 − 28) increased. The distribution
of large clusters (28 − 211) also changed. A representa-
tive change is the creation of a large block whose size
is 1,217 /24s. The block consists of the addresses al-
located to Amazon EC2 servers located at Dublin, Ire-
land. To summarize, 8,931 clusters have been created
11The rule operates over the distribution of the similar-
ity score between every /24 pair within a cluster. We
manually built the rule.
y
c
n
e
u
q
e
r
F
n