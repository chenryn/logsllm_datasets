1,695s
706s
710s
931s
Figure 2: Application Performance. Comparison of our schemes and prior work for two example
applications.
higher for HPinn than for HP∗ (note that even though our schemes signiﬁcantly reduce the prover’s
burden for I/O, they do not aﬀect the eﬀort for the computation itself, and hence Amdahl’s law
limits the overall impact). Finally, the results for HP∗ show that the additional computation the
scheme imposes on the prover pays oﬀ: veriﬁcation is 18-150x more eﬃcient than for HPgen with
at most a 30% increase in the prover’s eﬀorts.
7 Related work
Cryptographic proof systems come in a variety of shapes, with inherent trade-oﬀs between the
eﬃciency of their provers and veriﬁers and the expressiveness of the statements being proven.
One particularly interesting point in the design space are computationally-sound non-interactive
proof systems, also known as argument systems [15], that can be veriﬁed faster than by directly
checking NP witnesses. Starting with the work of Micali [36], there has been much progress [11, 30,
6, 26, 21, 31] leading to succinct non-interactive argument systems often referred to as SNARKs
or SNARGs, depending on whether they establish knowledge rather than just existence of the
NP witness. Signiﬁcant theoretical improvements have been complemented with nearly-practical
general-purpose implementations [40, 7, 20, 9, 47].
As noted in Section 1 and Section 3.3, some prior work ﬁts our hash & prove model with data
veriﬁcation embedded via inner and outer encodings. Here we review other solutions that follow
the outer encoding approach.
In commit & prove schemes [33, 17], one can create a commitment to the data, and use it in
multiple proofs. Costello et al. [20] and implicitly Lipmaa [35] use this idea for veriﬁable computa-
tion to eﬃciently share data between proofs. However, in this approach all computations have to
be ﬁxed before one creates commitments to data. In other words, one has to know a-priori which
computations will be executed on the data, which may not be the case in applications like MapRe-
22
duce. This issue can be mitigated by ﬁxing a universal relation, i.e., a relation which contains all
relations that can be executed within a ﬁxed time bound. However, this generality comes at a
performance cost.
Several works by Ben-Sasson et al. investigate how to eﬃciently build universal relations for
predicates described as random-access machine algorithms [5, 7, 9]. For instance, they describe
a SNARK scheme [9] supporting bounded-length executions on a universal von Neumann RISC
machine with support for data dependent memory access, but this generality comes at a cost [20].
To achieve full generality, the bound on the execution length can be removed via proof bootstrap-
ping [46]. Despite recent improvements and innovation [8], such bootstrapping is costly.
Memory delegation [19] also models a scenario where one outsources memory and only later
chooses computations (including updates) to be executed on it in a veriﬁable way. In this model,
after a preprocessing phase whose cost is linear in the memory size, the veriﬁer’s work in the online
veriﬁcation phase is sublinear in the memory size. In contrast, with HP schemes the veriﬁer also
needs to do linear work once to hash the input, but then the veriﬁcation cost is constant with
respect to the the input size.
Another possibility to address computation on previously outsourced data is to use homomor-
phic message authenticators [4] or signatures [18, 29]. With the former, data is ﬂexibly authenti-
cated when uploaded and then multiple functions can be executed and proved on it. Homomorphic
authenticators share the limitation of commit & prove schemes: the class of computations has to
be ﬁxed before the data can be authenticated. Moreover, homomorphic authenticator construc-
tions that oﬀer more practical eﬃciency [4] work only for quite restricted classes of computations
(low degree polynomials). The approach based on leveled homomorphic signatures [29] is more
expressive but still very expensive in practice, as the size of the proof (i.e., evaluated signature) is
polynomial in the depth of the computation’s circuit.
AD-SNARKs [3] provide a functionality similar to homomorphic authenticators, working eﬃ-
ciently for arbitrary computations, but even in their case the set of computations has to be ﬁxed a
priori. As a further restriction, the model of both homomorphic authenticators and AD-SNARKs
requires a secret key for data outsourcing, and it only supports append-only data uploading (i.e., it
does not support changing the uploaded data). In contrast, the hash & prove model considered by
this work supports delegating computation on public data, since hashes are publicly computable.
Finally, TRUESET [34] uses a Merkle hash tree over I/O commitments in a VC scheme to
support computations on a subset of committed inputs (namely, a collection of sets). While this
adds ﬂexibility as to which inputs can be used in the computation, these inputs still have to be
ﬁxed a-priori.
Acknowledgments We thank the reviewers for their insightful comments and suggestions. The
research of Dario Fiore is partially supported by the European Union’s Horizon 2020 Research
and Innovation Programme under grant agreement 688722 (NEXTLEAP), the Spanish Ministry of
Economy under project reference TIN2015-70713-R (DEDETIS) and a Juan de la Cierva fellowship,
and by the Madrid Regional Government under project N-Greens (ref. S2013/ICE-2731). The
research of Esha Ghosh is supported in part by the National Science Foundation under grant
CNS–1525044.
23
References
[1] Ajtai, M.: Generating hard instances of lattice problems (extended abstract). In: STOC (1996)
[2] Babai, L., Fortnow, L., Levin, L.A., Szegedy, M.: Checking computations in polylogarithmic
time. In: STOC (1991)
[3] Backes, M., Barbosa, M., Fiore, D., Reischuk, R.M.: ADSNARK: nearly practical and privacy-
preserving proofs on authenticated data. In: IEEE Symposium on S&P (2015)
[4] Backes, M., Fiore, D., Reischuk, R.M.: Veriﬁable delegation of computation on outsourced
data. In: CCS (2013)
[5] Ben-Sasson, E., Chiesa, A., Genkin, D., Tromer, E.: Fast reductions from RAMs to delegatable
succinct constraint satisfaction problems: extended abstract. In: ITCS (2013)
[6] Ben-Sasson, E., Chiesa, A., Genkin, D., Tromer, E.: On the concrete eﬃciency of
probabilistically-checkable proofs. In: STOC (2013)
[7] Ben-Sasson, E., Chiesa, A., Genkin, D., Tromer, E., Virza, M.: SNARKs for C: verifying
program executions succinctly and in zero knowledge. In: CRYPTO (2013)
[8] Ben-Sasson, E., Chiesa, A., Tromer, E., Virza, M.: Scalable zero knowledge via cycles of
elliptic curves. In: CRYPTO (2014)
[9] Ben-Sasson, E., Chiesa, A., Tromer, E., Virza, M.: Succinct non-interactive zero knowledge
for a von Neumann architecture. In: USENIX Security (2014)
[10] Bitansky, N., Canetti, R., Chiesa, A., Goldwasser, S., Lin, H., Rubinstein, A., Tromer, E.:
The hunting of the SNARK. Cryptology ePrint Archive, Report 2014/580
[11] Bitansky, N., Canetti, R., Chiesa, A., Tromer, E.: From extractable collision resistance to
succinct non-interactive arguments of knowledge, and back again. In: ITCS (2012)
[12] Bitansky, N., Canetti, R., Paneth, O., Rosen, A.: On the existence of extractable one-way
functions. In: STOC (2014)
[13] Black, J., Halevi, S., Krawczyk, H., Krovetz, T., Rogaway, P.: Umac: Fast and secure message
authentication. In: crypto. vol. 1666 (1999)
[14] Boneh, D., Boyen, X.: Short signatures without random oracles and the SDH assumption in
bilinear groups. J. Cryptology 21(2) (2008)
[15] Brassard, G., Chaum, D., Cr´epeau, C.: Minimum disclosure proofs of knowledge. J. Comput.
Syst. Sci. 37(2) (1988)
[16] Braun, B., Feldman, A.J., Ren, Z., Setty, S., Blumberg, A.J., Walﬁsh, M.: Verifying compu-
tations with state. In: Proc. of the ACM SOSP (2013)
[17] Canetti, R., Lindell, Y., Ostrovsky, R., Sahai, A.: Universally composable two-party and
multi-party secure computation. In: STOC (2002)
[18] Catalano, D., Fiore, D., Warinschi, B.: Homomorphic signatures with eﬃcient veriﬁcation for
polynomial functions. In: CRYPTO (2014)
24
[19] Chung, K.M., Kalai, Y.T., Liu, F.H., Raz, R.: Memory delegation. In: CRYPTO. pp. 151–165
(2011)
[20] Costello, C., Fournet, C., Howell, J., Kohlweiss, M., Kreuter, B., Naehrig, M., Parno, B.,
Zahur, S.: Geppetto: Versatile veriﬁable computation. In: IEEE Symposium on S&P (2015)
[21] Danezis, G., Fournet, C., Groth, J., Kohlweiss, M.: Square span programs with applications
to succinct NIZK arguments. In: ASIACRYPT (2014)
[22] Devanbu, P.T., Gertz, M., Martel, C.U., Stubblebine, S.G.: Authentic third-party data pub-
lication. In: IFIP TC11/ WG11.3 (2001)
[23] Fiore, D., Gennaro, R.: Publicly veriﬁable delegation of large polynomials and matrix compu-
tations, with applications. In: CCS (2012)
[24] Fournet, C., Kohlweiss, M., Danezis, G., Luo, Z.: ZQL: A compiler for privacy-preserving data
processing. In: USENIX Security (2013)
[25] Gennaro, R., Gentry, C., Parno, B.: Non-interactive veriﬁable computing: Outsourcing com-
putation to untrusted workers. In: CRYPTO (2010)
[26] Gennaro, R., Gentry, C., Parno, B., Raykova, M.: Quadratic span programs and succinct
NIZKs without PCPs. In: EUROCRYPT (2013)
[27] Goldwasser, S., Kalai, Y.T., Rothblum, G.N.: Delegating computation: interactive proofs for
muggles. In: STOC (2008)
[28] Goldwasser, S., Micali, S., Rackoﬀ, C.: The knowledge complexity of interactive proof systems.
SIAM J. Comput. 18(1) (1989)
[29] Gorbunov, S., Vaikuntanathan, V., Wichs, D.: Leveled fully homomorphic signatures from
standard lattices. In: STOC (2015)
[30] Groth, J.: Short pairing-based non-interactive zero-knowledge arguments. In: ASIACRYPT
(2010)
[31] Groth, J.: On the size of pairing-based non-interactive arguments. In: EUROCRYPT (2016)
[32] Kate, A., Zaverucha, G.M., Goldberg, I.: Constant-size commitments to polynomials and their
applications. In: ASIACRYPT (2010)
[33] Kilian, J.: Uses of randomness in algorithms and protocols. PhD thesis, Massachusetts Institute
of Technology (1989)
[34] Kosba, A.E., Papadopoulos, D., Papamanthou, C., Sayed, M.F., Shi, E., Triandopoulos, N.:
TRUESET: Faster veriﬁable set computations. In: USENIX Security (2014)
[35] Lipmaa, H.: Prover-eﬃcient commit-and-prove zero-knowledge SNARKs. In: AFRICACRYPT
(2016)
[36] Micali, S.: Computationally sound proofs. SIAM J. Comput. 30(4) (2000)
[37] Nguyen, L.: Accumulators from bilinear pairings and applications. In: IEEE Symposium on
S&P (2005)
25
[38] Papamanthou, C., Tamassia, R., Triandopoulos, N.: Optimal veriﬁcation of operations on
dynamic sets. In: CRYPTO (2011)
[39] Pape, S.: Authentication in Insecure Environments - Using Visual Cryptography and Non-
Transferable Credentials in Practise. Springer (2014)
[40] Parno, B., Gentry, C., Howell, J., Raykova, M.: Pinocchio: Nearly practical veriﬁable compu-
tation. In: IEEE Symposium on S&P (2013)
[41] Parno, B., Raykova, M., Vaikuntanathan, V.: How to delegate and verify in public: Veriﬁable
computation from attribute-based encryption. In: TCC (2012)
[42] Rial, A., Danezis, G.: Privacy-preserving smart metering. In: WPES (2011)
[43] Setty, S., McPherson, R., Blumberg, A.J., Walﬁsh, M.: Making argument systems for out-
sourced computation practical (sometimes). In: Proc. ISOC NDSS (2012)
[44] Tamassia, R.: Authenticated data structures. In: ESA (2003)
[45] Thaler, J., Roberts, M., Mitzenmacher, M., Pﬁster, H.: Veriﬁable computation with massively
parallel interactive proofs. In: USENIX HotCloud Workshop (2012)
[46] Valiant, P.: Incrementally veriﬁable computation or proofs of knowledge imply time/space
eﬃciency. In: TCC (2008)
[47] Wahby, R.S., Setty, S., Ren, Z., Blumberg, A.J., Walﬁsh, M.: Eﬃcient RAM and control ﬂow
in veriﬁable outsourced computation. In: Proc. of the ISOC NDSS (Feb 2015)
A Adaptive Hash Soundness
In this section we formally deﬁne adaptive hash soundness as mentioned in Section 3.
Hash extraction (Deﬁnition 3.2) enables us to use an HP scheme to verify arguments that include
opaque hashes σ provided by the adversary by ﬁrst extracting their content x ∈ X then applying
adaptive soundness. To formalize this idea, we complete our deﬁnitions with a more generally
useful notion of soundness that follows from the composition of the simpler deﬁnitions in Section 3.
Indeed, as we show in Theorem A.1 below, any scheme HP that is both adaptively sound and hash
extractable is also adaptively hash sound.
Deﬁnition A.1 (Adaptive Hash Soundness). A multi-relation scheme HP is secure if every p.p.t.
adversary with access to oracle KEYGEN has negligible success probability in the game:
Adaptive Hash Forgery Game
pp ← Setup(1λ)
(Ri, ρi, vi, Πi)t
i=1, Σ ← AKEYGEN(1λ, pp)
A wins if(cid:86)t
∧ (cid:86)
∧ ¬∃x.(cid:86)
i=1 VERIFY(Ri, ρi, vi, Πi) = 1
σ∈Σ Check(pp, σ) = 1
i ∃wi.Ri(x(ρi), vi ; wi)
KEYGEN(R)
if VK(R) exists, return ⊥
EK, VK ← KeyGen(pp, R)
VK(R) := VK; return EK, VK
VERIFY(R, ρ, v, Π)
if VK(R) undeﬁned, return 0
return Verify(VK(R), h(ρ), v, Π)
26
where Σ is a ﬁnite set of hashes; ρ ranges over the disjoint union of X (cid:93)Σ (intuitively, an argument
passed either as data or as a hash); x is a function from X (cid:93) Σ to X that maps data x to x and
hashes σ to some data in X. (intuitively, x includes an extractor from hashes to data); and h is a
function from X (cid:93) Σ to hashes that maps data x to Hash(pp, x) and hashes σ to σ.
The designated-veriﬁer variant is obtained as in Deﬁnition 3.1.
In the deﬁnition, the adversary builds a composite argument whose instances mix plaintext
values xi ∈ X and opaque hashes σ ∈ Σ; importantly, the same σ can occur in multiple instances.
To verify the argument, the veriﬁer checks all proofs Πi using hashes that are either recomputed
from x ∈ X or checked for well-formedness. The adversary wins if the hashes in Σ cannot be opened
in a consistent manner to satisfy all the relations of the argument.
Theorem A.1. If HP is adaptively sound and hash extractable, then HP is adaptively hash sound.
Proof Outline. The argument is structured in terms of game hops.
Game 0 is the same as the Adaptive Hash Forgery Game.
Game 1 Let Aj be the adversary that takes pp as input and runs A from Game 0 and the oracles
for KEYGEN (and VERIFY in the designated veriﬁer setting) internally. Finally, Aj outputs
σj and the corresponding hash function extractor Ej returns xj for j ∈ [1, Σ]. Note that Aj
does not take auxiliary input since it takes pp as input and runs from the beginning of the
experiment.
Game 1 is the same as Game 0 except that for every A we run E1, . . . ,E|Σ| in parallel to the
challenger and we abort if Check(pp, σj) = 1 but σj (cid:54)= Hash(pp, xj).
Let Gi(A) be the output of Game i run with adversary A. We prove the following claims.
Claim A.1. Pr[G0(A) = 1] ≈ Pr[G1(A) = 1].
Ej must exist since Hash is an extractable hash function.
Claim A.2. Pr[G1(A) = 1] ≈ 0.
We can build an adversary AAS that breaks adaptive soundness of the HP scheme using A
as follows. AAS forwards his pp to A. It replies KEYGEN queries using his own oracle. (In the
designated veriﬁer case, on VERIFY(R, ρ, v, Π) he queries his own verify oracle sending x(ρ) instead
of ρ. We note that well-deﬁned x exists in this game.) Once A returns a forgery, AAS chooses i at
random and returns Ri, x(ρi), vi, Πi as his forgery. Since A could have forged on any of the Ri, the
probability of AAS winning is /t where  is the success probability of A winning Game 1.
B Zero-knowledge
Here we provide a notion of zero-knowledge for HP schemes. The notion models zero-knowledge
with respect to the witnesses of the relations, and intuitively says that proofs do not reveal any
information about the witnesses w.
Deﬁnition B.1 (Adaptive Zero-knowledge). A multi-relation hash & prove scheme HP is zero-
knowledge if there exists a p.p.t. simulator S = (S1, S2, S3) such that for all λ ∈ N, every adversary
27
A wins the following game with an advantage 2 Pr[b(cid:48) = b] − 1 that is negligible.
Adaptive Zero-knowledge Game
b ← {0, 1}