### Expected Behavior
Using `flask run` should result in appropriate import error messages if
erroneous imports are used in a flask app.
Consider the two flask apps `worksjustfine.py`:
    from flask import Flask
    app = Flask(__name__)
and `completelymisleading.py`:
    import flask
    import batrachomyomachy
    app = flask.Flask(__name__)
If you fire up `worksjustfine.py`, it works just fine:
    $ FLASK_APP=worksjustfine.py flask run
     * Serving Flask app "worksjustfine"
     * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
If you fire up `completelymisleading.py`, you would expect something like
this:
    $ FLASK_APP=completelymisleading.py flask run
    ...
    ImportError: No module named 'batrachomyomachy'
### Actual Behavior
    $ FLASK_APP=completelymisleading.py flask run
    Usage: flask run [OPTIONS]
    Error: The file/path provided (completelymisleading) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py
This error message is completely misleading, because the file does exist and
`flask run` also starts to import this file. I imagine that somewhere in the
`flask run` code there is a `try ... except ImportError` that is meant for the
situation when the actual flask app can not be found, but one would definitely
need a more specific error message for other import errors.
### Environment
  * Python version: 3.5.3
  * Flask version: 0.12