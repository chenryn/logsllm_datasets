    rel: reloc is imm64 & addrmode=4 [reloc = inst_next + imm64;] {export *[ram]:8 reloc;}
然后其他东西就和call rn基本一样
    :call rel is op=0x10; inst_switch=7; rel { sp = sp - 8; local stack_addr:8  = stack_(sp); *:8 stack_addr = inst_next; call [rel]; }
ret指令也很简单，从栈上获取pc地址，然后return回去
    :ret is op=0x11; inst_switch {local stack_addr:8  = stack_(sp); pc = *stack_addr; sp = sp + 8 ;return [pc];}
### cmp指令
本来cmp指令会改变很多flags，但是因为我们只用实现je和jne，因此我们这里偷懒，只实现ZF这个flag
首先在qwbvm.slaspec中添加一个新的寄存器ZF
    define register offset=0x300 size=1 [ZF];
然后实现一下cmp指令
    :cmp dl rn, rm is op=0x12; dl & inst_switch=0; rn; rm {ZF = rn == rm;}
    :cmp dl rn, imm is op=0x12; dl & inst_switch=5; rn ; imm {ZF = rn == imm;}
### jmp/je/jne指令
最后就到jmp, je和jne指令
    :jmp addr is op=0x13; addr {}
    :je  addr is op=0x14; addr {}
    :jne addr is op=0x15; addr {}
这里addr有3种形式，分别export一下
    addr: rn is inst_switch=6; rn {export rn;}
    addr: rel is dl&inst_switch=7; rel {export rel;}
    addr: "bss"[imm64] is inst_switch=8; imm64 { local bss_addr:8 = bss_(*[const]:8 imm64:8); export *bss_addr;}
最后实现一下jmp, je和jne
    :jmp addr is op=0x13; addr {goto addr;}
    :je  addr is op=0x14; addr {if(ZF==1) goto addr;}
    :jne addr is op=0x15; addr {if(ZF==0) goto addr;}
现在运行一下，可以看到有循环结构，但是还是看不到if else的判断，因为halt指令还没实现，导致大部分P-code还是被优化掉了
## 定义halt指令P-code
这里我参考的是x86架构的实现，直接将halt指令定义为死循环
    :halt is op=0; inst_switch & data_length {goto inst_start;}
现在运行一下，就是最后出来的效果，可以看到有明显的判断的操作
例如会判断前三个字符是不是QWQ，后面的字符是不是G00DR3VR等
当然，这个题目其实转化到汇编指令层面其实已经非常足够了，添加伪代码解析有种杀鸡用牛刀的感觉，但是从这个效果来说，非常令人意外
## 完整定义
    define token opbyte(8)
        op  = (0, 5)
        rn = (0, 3)
        rm = (0, 3)
    ;
    define token oplength(8)
        inst_switch = (0, 3)
        data_length = (4, 6)
    ;
    define token data8(8)
        imm8 = (0, 7)
        simm8 = (0, 7) signed
    ;
    define token data16(16)
        imm16 = (0, 15)
    ;
    define token data32(32)
        imm32 = (0, 31)
    ;
    define token data64(64)
        imm64_8 = (0, 7)
        imm64_16 = (0, 15)
        imm64_32 = (0, 31)
        imm64 = (0, 63)
    ;
    define context contextreg
        addrmode = (0,2)
        switchmode = (3,6)
    ;
    define pcodeop bss_;
    define pcodeop stack_;
    define pcodeop syscall;
    attach variables [rn rm] [r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15];
    dl: "" is data_length=0 {}
    dl: "byte" is data_length=1 & inst_switch [addrmode =1; switchmode=inst_switch;]{}
    dl: "word" is data_length=2 & inst_switch [addrmode =2; switchmode=inst_switch;]{}
    dl: "dword" is data_length=3 & inst_switch [addrmode =3; switchmode=inst_switch;]{}
    dl: "qword" is data_length>=4 & inst_switch [addrmode =4; switchmode=inst_switch;]{}
    imm: imm8 is addrmode=1 ; imm8 {export *[const]:8 imm8;}
    imm: imm16 is addrmode=2 ; imm16 {export *[const]:8 imm16;}
    imm: imm32 is addrmode=3 ; imm32 {export *[const]:8 imm32;}
    imm: imm64 is addrmode=4 ; imm64 {export *[const]:8 imm64;}
    rel: reloc is simm8 & addrmode=1 [reloc = inst_next + simm8;] {export *[ram]:8 reloc;}
    rel: reloc is imm16 & addrmode=2 [reloc = inst_next + imm16;] {export *[ram]:8 reloc;}
    rel: reloc is imm32 & addrmode=3 [reloc = inst_next + imm32;] {export *[ram]:8 reloc;}
    rel: reloc is imm64 & addrmode=4 [reloc = inst_next + imm64;] {export *[ram]:8 reloc;}
    addr: rn is inst_switch=6; rn {export rn;}
    addr: rel is dl&inst_switch=7; rel {export rel;}
    addr: "bss"[imm64] is inst_switch=8; imm64 { local bss_addr:8 = bss_(*[const]:8 imm64:8); export *bss_addr;}
    oprand: rm is rm & switchmode = 0 { export  rm; }
    oprand: imm is imm & switchmode = 5 { export imm; }
    :halt is op=0; inst_switch & data_length {goto inst_start;}
    :mov dl rn, rm is op=1; dl & inst_switch=0 ; rn ; rm { rn = rm;}
    :mov dl rn, "bss"[imm64] is op=1; dl & inst_switch=1 ; rn;  imm64 { local bss_addr:8 = bss_(*[const]:8 imm64:8); rn = *bss_addr; }
    :mov dl "bss"[imm64], rn  is op=1; dl & inst_switch=2 ; imm64;  rn {local bss_addr:8 = bss_(*[const]:8 imm64:8); *bss_addr = rn;}
    :mov dl rn, "stack"[imm64] is op=1; dl & inst_switch=3 ; rn;  imm64 { local stack_addr:8 = stack_(*[const]:8 imm64:8); rn = *stack_addr;}
    :mov dl "stack"[imm64], rn  is op=1; dl & inst_switch=4 ; imm64;  rn {local stack_addr:8 = stack_(*[const]:8 imm64:8); *stack_addr = rn;}
    :mov dl rn, imm is op=1; dl & inst_switch=5 ; rn;  imm { rn = imm;}
    :mov dl "bss"[rn], rm is op=1; dl & inst_switch=0xb ; rn; rm {local bss_addr:8 = bss_(rn); *bss_addr = rm;}
    :mov dl rn, "bss"[rm] is op=1; dl & inst_switch=0xc ; rn; rm {local bss_addr:8 = bss_(rm); rn = *bss_addr;}
    :mov dl "stack"[rn], rm is op=1; dl & inst_switch=0xd ; rn; rm {local stack_addr:8 = stack_(rn); *stack_addr = rm;}
    :mov dl rn, "stack"[rm] is op=1; dl & inst_switch=0xe ; rn; rm {local stack_addr:8 = stack_(rm); rn = *stack_addr;}
    :add dl rn, oprand is op=2; dl & inst_switch; rn ; oprand { rn = rn + oprand;}
    :dec dl rn, oprand is op=3; dl & inst_switch; rn ; oprand { rn = rn - oprand;}
    :mul dl rn, oprand is op=4; dl & inst_switch; rn ; oprand { rn = rn * oprand;}
    :div dl rn, oprand is op=5; dl & inst_switch; rn ; oprand { rn = rn / oprand;}
    :mod dl rn, oprand is op=6; dl & inst_switch; rn ; oprand { rn = rn % oprand;}
    :xor dl rn, oprand is op=7; dl & inst_switch; rn ; oprand { rn = rn ^ oprand;}
    :or  dl rn, oprand is op=8; dl & inst_switch; rn ; oprand { rn = rn | oprand;}
    :and dl rn, oprand is op=9; dl & inst_switch; rn ; oprand { rn = rn & oprand;}
    :shl dl rn, oprand is op=0xa; dl & inst_switch; rn ; oprand { rn = rn > oprand;}
    :not dl rn is op=0xc; dl & inst_switch=6; rn { rn = ~rn; }
    :pop dl rn is op=0xd; dl & inst_switch=6; rn { local stack_addr:8 = stack_(sp); rn = *stack_addr; sp = sp + 8;}
    :push dl rn is op=0xe; dl & inst_switch=6; rn { sp = sp - 8; local stack_addr:8  = stack_(sp); *stack_addr = rn;}
    :call rn is op=0x10; inst_switch=6; rn { sp = sp - 8; local stack_addr:8  = stack_(sp); *:8 stack_addr = inst_next; call [rn]; }
    :call rel is op=0x10; inst_switch=7; rel { sp = sp - 8; local stack_addr:8  = stack_(sp); *:8 stack_addr = inst_next; call [rel]; }
    :ret is op=0x11; inst_switch {local stack_addr:8  = stack_(sp); pc = *stack_addr; sp = sp + 8 ;return [pc];}
    :cmp dl rn, rm is op=0x12; dl & inst_switch=0; rn; rm {ZF = rn == rm;}
    :cmp dl rn, imm is op=0x12; dl & inst_switch=5; rn ; imm {ZF = rn == imm;}
    :jmp addr is op=0x13; addr {goto addr;}
    :je  addr is op=0x14; addr {if(ZF==1) goto addr;}
    :jne addr is op=0x15; addr {if(ZF==0) goto addr;}
    :jle addr is op=0x16; addr {}
    :jg  addr is op=0x17; addr {}
    :jl  addr is op=0x18; addr {}
    :jge addr is op=0x19; addr {}
    :jbe addr is op=0x1a; addr {}
    :ja  addr is op=0x1b; addr {}
    :jnb addr is op=0x1c; addr {}
    :jb  addr is op=0x1d; addr {}
    :syscall is op=0x20; inst_switch { r0 = syscall(r0, r1, r2, r3); }