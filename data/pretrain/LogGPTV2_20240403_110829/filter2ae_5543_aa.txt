**作者：深信服千里目安全实验室**  
**相关阅读：  
1、[【Rootkit 系列研究】序章：悬顶的达摩克利斯之剑](https://paper.seebug.org/1867/ "【Rootkit
系列研究】序章：悬顶的达摩克利斯之剑")  
2、[【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁](https://paper.seebug.org/1868/
"【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁")  
3、[【Rootkit 系列研究】Linux平台的高隐匿、高持久化威胁](https://paper.seebug.org/1870/
"【Rootkit系列研究】Linux平台的高隐匿、高持久化威胁")  
4、[【Rootkit 系列研究】Rootkit检测技术发展现状](https://paper.seebug.org/1871/
"【Rootkit系列研究】Rootkit检测技术发展现状")  
5、[【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁（二）](https://paper.seebug.org/1872/
"【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁（二）")**
## 摘要
Rootkit这一概念最早出现于上个世纪九十年代初期，CERT Coordination
Center(CERT/CC)于1994年在CA-1994-01这篇安全咨询报告中使用了Rootkit这个词汇。在这之后Rootkit技术发展迅速，这种快速发展的态势在2000年达到了顶峰。2000年后，Rootkit技术的发展也进入了低潮期，但是对于Rootkit技术的研究却并未停滞。在APT攻击日益流行的趋势下，Rootkit攻击和检测技术也同样会迎来新的发展高潮。
在往期的Rootkit系列文章里面，我们分别介绍了Rootkit技术的发展历程和Windows、Linux平台下的Rootkit攻击技术。本期Rootkit系列文章将会给大家介绍当前主流的Rootkit防御技术以及一些非常规Rootkit的可实施检测方案。
## 被滥用的Rootkit技术
长期以来，Rootkit检测一直是一个非常大的痛点，这些具有高度定制化的恶意程序集合隐藏在服务器上，以高权限访问计算机和网络。虽然Rootkit并没有成为大新闻中的主角，但是它们一直都过得很安逸，并且持续性的造成损害。对于安全从业者而言，这不应该是一个被忽视的地方。
APT通常和Rootkit齐头并进。从西方 APT 组织的攻击历史及已经泄露的网络武器看，高隐匿、高持久化(Low&Slow)是其关键特征，而
Rootkit 则是达成此目的的重要技术之一，因此Rootkit一直以来和APT配合的很好。
让人遗憾的是，几乎任何脚本小子都可以轻易在被攻击成功的目标主机上植入Rootkit。比起这个，更让人痛心的是，一些挖矿木马和广告木马都开始使用Rootkit技术了，黑产都卷成这个样子了吗？H2Miner挖矿家族开始使用新的Rootkit样本，该Rootkit使用LD_PRELOAD技术劫持动态链接过程。LD_PRELOAD是一个非常古老的C库技巧，但它今天仍然被成功使用和滥用。
## 当前主流Rootkit检测技术分析
当前主要的Rootkit检测的方法包括但不限于以下几种类型。
**1\. 基于Rootkit运行的效果进行检测**  
例如: 发现隐藏的端口、进程、内核模块、网络连接、被篡改的内核代码。
缺陷: 该检测方案对预设的检测场景的依赖程度较高，一旦恶意软件出现检测场景之外的行为，则难以做到有效检测。
**2\. 静态文件特征检测**  
例如: 扫描磁盘上的文件，将文件与特征库进行匹配，通过该方式检测可能存在的Rootkit。
缺陷: 该检测方案对特征库依赖程度较高，能够有效发现已知特征的Rootkit，难以发现未知特征的Rootkit。
**3\. 动态行为分析检测**  
例如: 对系统运行过程中的行为进行审计，通过行为规则匹配的方式发现系统中的异常行为，通过该方式发现可能存在的Rootkit。
缺陷: 对行为规则的依赖程度较高，只能匹配已知行为特征的Rootkit，难以匹配未知行为特征的Rootkit。
**4\. 数据完整性检测**  
例如: 对系统关键的数据结构进行监控，通过监控关键数据结构的异常篡改，以发现系统中的恶意行为。
缺陷: 完整性检测依赖于受信任的源数据，如果源数据被篡改或者不可信的情况下，则完整性检测也很难奏效。
当前的开源社区的Rootkit检测技术 **主要以Rootkit运行效果检测和静态文件特征检测为主**
，动态行为分析和数据完整性保护的Rootkit检测项目相对较少。
## 当前主流Rootkit检测项目分析
**Chkrootkit:**
检测/proc/kallsyms的内容并匹配相对应的文件名和目录来检测是否存在Rootkit，通过该方式，chkrootkit能够在一定程度上发现Rootkit执行的恶意行为，诸如文件隐藏，网络连接隐藏，进程信息隐藏。但是该检测方案对Rootkit指纹库依赖度较高，并且严重依赖于/proc/目录下的文件，一旦该文件不可信任，则很容易被绕过。
**Rkhunter:**
这个Rootkit检测工具会扫描相应的文件目录、文件、符号表，通过该方式检测是否存在Rootkit恶意家族。同样的，该检测方案对特征库的依赖度较高，且难以发现指纹没有覆盖到的Rootkit。
**Kjackal:**
该Rootkit检测工具通过遍历内核中的系统调用表syscall_table，注意检查例程的入口是否存在内核空间，如果不存在，就意味着发生了syscall劫持。发现了存在syscall_table的劫持之后，该工具会进行反向追踪，以确定劫持系统调用的是哪一个恶意LKM模块。Kjackal会枚举/proc/net/tcp的读写句柄是否存在于内核态中，如果不存在，则发生了劫持。该工具还会枚举modules
kset以检测隐藏的内核模块。该检测方案也同样存在被绕过的可能性，一旦Rootkit通过删除kobject数据结构的方式隐藏Rootkit，那么这将很难检测，不过这种删除kobject数据结构的方式也同样会影响Rootkit正常使用。
**Tyton:**
该项目检测Rootkit的方式和kjackal非常相似，通过枚举内核空间的module_list，中断向量表、网络连接读写句柄、系统调用表、netfilter
hook等方式发现可能存在的Rootkit，发现Rootkit之后，通过get_module_from_addr函数反向溯源恶意的内核模块。
**Elkeid:**
该项目是字节跳动的一个开源的HIDS项目，该hids检测Rootkit的方式继承的tyton的检测方案。除了这个之外，elkeid还在行为检测方面做出了突破，
**使用kprobe**
对关键的系统调用进行hook，持续监控系统运行过程中的进程行为，网络行为、文件行为等相关信息并保存到日志中，再使用字节跳动于近期开源的Elkeid
Hub的行为日志检测引擎和规则集，能够对系统运行过程中的日志进行自动化分析，以发现可能存在的未知威胁。不得不说这是一个非常勇敢的突破，业界普遍都对kprobe持保留态度，敢于直接上车的并不多见。不过这种日志采集方式也存在一个缺陷，一旦攻击者控制了/sys/kernel/debug/kprobes/enabled文件，就可以使这种日志采集功能失效。再补充一句，该项目更新频率较高，并且社区支持非常友好。
**stmichael-lkm:** 该项目能够为内核提供一定的完整性保护，能够在一定程度上发现 **针对内核的篡改**
，通过这种方式发现可能存在的Rootkit。一旦检测到Rootkit篡改内核，StMichael尝试通过将所做的更改回滚到先前已知的良好状态来恢复内核的完整性。不得不说这是一个非常大胆的尝试，比使用kprobe更加激进，这种方案的致命缺陷就是很容易为系统引入未知的问题，导致系统的不稳定。
**Qiling:**
该项目是一个高级二进制仿真框架，能够模拟多平台，多架构的运行环境，通过类似于沙箱的环境运行Rootkit，并且记录Rootkit运行过程中的行为。这为恶意Rootkit的检测和分析提供了一种全新的思路。传统沙箱对恶意软件的检测很难达到这种细粒度的监控效果。