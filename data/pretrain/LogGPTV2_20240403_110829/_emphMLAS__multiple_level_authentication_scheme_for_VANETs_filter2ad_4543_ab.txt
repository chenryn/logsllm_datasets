vided by the PKI and is a direct extension of public-key
encryption. Using the private key assigned by a trusted
party, one can generate a unique signature on a message.
The receiver can then use the sender’s public key to verify
1448
T.W. Chim et al. / Ad Hoc Networks 10 (2012) 1445–1456
the validity of the signature. Boneh–Lynn–Shacham (BLS)
[18] is a well-known algorithm for computing digital sig-
nature. In this paper, TA adopts this technique for signing
messages. We denote the process of signing message M
with private key TSK to obtain signature r as
r = TSIGTSK(M) = TSK  H(M) where H(.) is a MapToPoint
hash function [19] which in turns relies on hash functions
like SHA-3 [20] since SHA-1 or MD-5 have been proved to
be useless in providing the reasonable level of security re-
cently. The receiver can then verify r by checking whether
^eðr; PÞ ¼ ^eðHðMÞ; TRIDÞ where P is a public parameter while
TRID = TSK  P is the public key corresponding to TSK.
4.3. Hash-based Message Authentication Code (HMAC)
Hash-based Message Authentication Code (HMAC) is a
speciﬁc construction for computing a Message Authentica-
tion Code (MAC) using a cryptographic hash function in
combination with a secret key. Both data integrity and
authenticity of a message can be achieved using such a
technique. Well-known hash functions such as SHA-1
[21] and MD5 [22] can be extended to produce a HMAC.
Also because of the nature of hash functions, a HMAC value
can be computed in a much shorter time than a traditional
digital signature. Throughout this paper, we denote the
HMAC value generated on message M using the secret
key K as HMACK(M).
4.4. Bilinear maps
Let G be a cyclic additive group and GT be a cyclic mul-
tiplicative group. Both groups G and GT have the same
prime order q. The mapping ^e : G  G ! GT is called a
bilinear map if it satisﬁes the following properties:
1. Bilinear: 8P; Q ; R 2 G and 8a; b 2 Z,
2. Non-degenerate: There exists P; Q 2 G such that
^eðQ ; P þ RÞ ¼
^eðPþ R;QÞ ¼ ^eðP;QÞ ^eðR;QÞ. Also ^eðaP;bPÞ ¼ ^eðP;bPÞa ¼
^eðaP;PÞb ¼ ^eðP;PÞab.
^eðP; QÞ – 1GT .
pute ^eðP; QÞ for any P; Q 2 G.
3. Computable: There exists an efﬁcient algorithm to com-
The bilinear map ^e can be constructed on elliptic curves.
Each operation for computing ^eðP; QÞ is a pairing operation.
Pairing operation is the most expensive operation in this
kind of cryptographic schemes. The fewer the number of
pairing operations, the more efﬁcient the scheme is. The
groups G and GT are called bilinear groups. The security
of our schemes relies on the fact that the discrete loga-
rithm problem (DLP) on bilinear groups is computationally
hard, i.e., given the point Q = a P, there exists no efﬁcient
algorithm to obtain a by given P and Q. The implication is
that we can transfer Q in an open wireless channel without
worrying that a (usually some secret) can be known by the
attackers.
4.5. Proxy re-encryption schemes
In our MLAS scheme, we make use of the properties of
proxy re-encryption to let RSUs to re-encrypt the most up-
dated master secret s to vehicles while at the same time
the RSUs do not know the value of s. In this subsection,
we brieﬂy introduce the concept of proxy re-encryption.
A proxy re-encryption scheme is similar to a traditional
symmetric or asymmetric encryption scheme with the
addition of a delegation function. The message sender
can generate a re-encryption key based on his/her own se-
cret key and the delegated user’s key. A proxy can then use
this re-encryption key to translate a ciphertext into a spe-
cial form such that the delegated user can use his/her pri-
vate key to decrypt the ciphertext. Two representative
proxy re-encryption schemes can be found in [23,24].
The concept of proxy re-encryption is very useful in our
VSPN scheme. In our scheme, we adopt an asymmetric ap-
proach. The TA ﬁrst prepares a re-encryption key for each
vehicle. RSUs can then use the re-encryption key to trans-
late the encrypted master secret s into a form such that the
vehicle concerned can decrypt using its private key. In this
way, the master secret can be distributed by the RSUs
while at the same time, it is kept secret from the RSUs.
5. Our solutions – MLAS
This section presents our Multiple Level Authentication
Scheme (MLAS) for VANETs in details. We ﬁrst summarize
our scheme into a few basic modules:
1. Setup by TA: This module describes how TA sets up all
system parameters.
2. System master key transmission and update: This module
describes how TA generates the system master key and
sends it in encrypted form to all RSUs. This master key
can be updated if needed.
3. Vehicle startup and requesting for system master key: This
module describes how a driver initializes the tamper-
proof device when the vehicle starts up. The device then
requests for the system master secret from a nearby
RSU.
4. Message signing by vehicle: This module describes how a
tamper-proof device signs a regular or an urgent
message.
5. Message veriﬁcation by vehicle or RSU: This module
describes how a regular or an urgent message sent by
a vehicle is veriﬁed.
6. Real
identity tracking and revocation: This module
describes how TA reveals a vehicle’s real identity from
its pseudo identity and revoke it if necessary.
Next we explain our scheme in details. To ease under-
standing, we summarize the notations used in this paper
in Table 1.
5.1. Setup by TA
During system startup, TA chooses the groups G and GT
that satisfy the bilinear map properties. Let P be the gener-
ator of G.
TA gives itself an identity TRID and a secret key TSK.
TRID is assumed to be known by everyone in the system.
TA assigns each RSU Ri an identity RRIDi and a secret key
T.W. Chim et al. / Ad Hoc Networks 10 (2012) 1445–1456
1449
Table 1
Notations used in this paper.
Symbol
G and GT
P
s
Ppub = s P
TRID
TSK
TSIGTSK(M)
Ri
RRIDi
RSKi
Vi
n
Crix
Cr_Numix
Cr_Keyix
VRIDi
VPWDi
VPIDi
VSKi
ri
AS_ENCx(M)
SIGx(M)
H(M)
Meaning
Bilinear groups
Generator of G
System master secret
Public parameter
Identity of TA
Secret key of TA
TA’s signature on message M using TSK
RSU number i
Identity of RSU Ri
Secret key of RSU Ri
Vehicle number i
Number of credentials for each vehicle
The xth credential for vehicle Vi
The credential number of Crix
The credential key of Crix
Real identity of vehicle Vi
Hardware activation password on Vi
Pseudo identity of vehicle Vi
Signing key of vehicle Vi
Signature by vehicle Vi
Asymmetric encryption of M using key x
Signature on message M using key x
MapToPoint hash value [19] on message M
RSKi. RRIDi as well as the location of the RSU are made pub-
lic in advance (e.g. stored in a local map database).
During the ﬁrst registration of a vehicle, TA assigns each
vehicle Vi a real identity VRIDi = x P where x is a random
number, and a tamper-proof device with activation pass-
word VPWDi. Note that TA does not need to keep the value
of x after generating VRIDi. TA then issues a set of n creden-
tials Cri1, Cri2, . . . , Crin for Vi. Here n is a system parameter
and can be adjusted according to the security level re-
quired. Each credential Crix is of the format hCr_Numix,
TSIGTSK(Cr_Numix)i where Cr_Numix is actually a re-encryp-
tion key (corresponding to the credential key Cr_Keyix),
TSIGTSK(Cr_Numix) represents TA’s signature on Cr_Numix
such that an RSU can verify its validity using the pub-
licly-known TA identity TRID. TA pre-loads VRIDi, VPWDi,
all the n credentials Cri1, Cri2, . . . , Crin as well as the corre-
sponding credential keys Cr_Keyi1, Cr_Keyi2, . . . , Cr_Keyin
into Vi’s tamper-proof device. Besides, TA also stores the
mapping [VRIDi: Cr_Numi1, Cr_Numi2, . . . , Cr_Numin] into
its database (for real identity tracing in the future). Note
that each credential represents Vi’s authorized identity.
However, no one except TA can reveal Vi’s real identity
based on the credential. It is true that RSUs can trace Vi’s
path based on the credentials if they are used frequently
and at different locations. However, in our scheme, Vi only
uses its credential explicitly occasionally (only when it
wants to obtain the updated system master key s).
5.2. Master key transmission and updating
TA randomly picks s 2 Zq as the initial system master
key and computes Ppub = s P as a public parameter. TA can
update s and the corresponding Ppub if there is a need
and the most updated s being encrypted using TA’s public
key (i.e. AS_ENCTRID(s)) is broadcasted to all RSUs while
the most updated Ppub is made public. All RSUs store
AS_ENCTRID(s) locally. Note that since s is encrypted using
TA’s public key, RSUs cannot know its value either.
Whenever there is a need (e.g. when any vehicle is
proved to be compromised), TA can update the system
master key s into s0. TA transmits the encrypted new mas-
ter key AS_ENCTRID(s0) to all RSUs. Again all the RSUs store
AS_ENCTRID(s0) locally. All RSUs broadcast a master key up-
date message to all in-range vehicles. The vehicles can thus
repeat the same procedure as that for obtaining the initial
system master key s (to be described in the next sub-
section) to obtain the new one.
Our MLAS scheme supports vehicle revocation. TA
maintains a revocation list which contains credential num-
bers of all revoked vehicles (e.g. those vehicles which have
been proved to have committed any kind of attack to the
system). This revocation list is then broadcasted to all
RSUs. Having this mechanism, RSUs will not re-encrypt
and send the system master secret to revoked vehicles in
order to protect the system.
5.3. Vehicle startup and requesting for master key
When vehicle Vi starts, the driver inputs the real iden-
tity VRIDi and password VPWDi (assigned by TA in Section
5.1) to activate the tamper-proof device. Here only simple
hardware checking is involved. If either the real identity or
the password is, or both are incorrect, the tamper-proof
device refuses to perform further operations.
Vi’s tamper-proof device then picks a credential Crix
(and the corresponding credential key Cr_Keyix), where
x 2 [1, n], from its pool at random. Assume that there is
an RSU Rj nearby (recall that its identity RRIDj is known
by all vehicles in advance by means of a local map data-
base). Vi’s tamper-proof device encrypts Crix using RRIDj
(i.e. AS ENCRRIDjðCrixÞ). Rj decrypts and veriﬁes the validity
of Crix (by checking TA’s signature on the credential num-
ber using TRID). If it is valid, Rj re-encrypts AS_ENCTRID(s)
into a form that is decryptable by the credential key
Cr_Keyix using the re-encryption key Cr_Numix. Vi’s tam-
per-proof device can thus decrypt using Cr_Keyix, obtain
and store s locally. As Cr_Keyix is pre-loaded into the
tamper-proof device and no interface is provided for
outputting it, even the driver cannot obtain s successfully.
5.4. Message signing by vehicle
Recall that messages sent by vehicles can be classiﬁed
into two types:
1. Regular messages: These messages are sent regularly
(every 500 ms according to the DSRC standard). They
include warning messages about travelling speed, turn-
ing direction and brake application.
2. Urgent messages: These messages are sent only occa-
sionally. They include emergency messages about road
accidents or bad road conditions.
No matter which of the two types a message belongs to,
to sign a message Mi, Vi’s tamper-proof device ﬁrst picks a
credential Crix from its pool at random and computes the
pseudo identity VPIDi = (VPIDi1, VPIDi2) = (r P, Cr_Numix 
1450
T.W. Chim et al. / Ad Hoc Networks 10 (2012) 1445–1456
H(r Ppub)) where r is a random nonce and H(.) is a
MapToPoint hash function. Vi’s tamper-proof device also
computes the signing key (VSKi1, VSKi2) = (s VPIDi1, s H(VPI-
Di1)). It then signs the message Mi to form the signature
ri = (ri1, ri2) = (HMACs(Mi), VSKi1 + ri1VSKi2)). The pseudo
identity VPIDi, the original message Mi and the signature
ri are then broadcasted.
5.5. Message veriﬁcation by vehicle or RSU
For a type 1 regular message, the receiving vehicle sim-
ply re-computes HMACs(Mi) using the stored s and Mi to see
whether it is equal to ri1 received. If yes, there is a very
high probability that the sender is a valid vehicle since only
valid tamper-proof devices can obtain s from the system.
By the time vehicle Vj receives the message from Vi, a
nearby RSU should be able to overhear the message as well
due to our assumptions on communication ranges. This
RSU then samples some type 1 messages broadcasted in
the air and veriﬁes them using the procedure follows. Here
the sample size is a system parameter which depends on
the system security requirement.
Without loss of generality, assume that the type 1
message received is Mi and the corresponding signature
is ri = ri1, ri2). RSU then checks whether ^eðri2; PÞ ¼
^eðVPIDi1 þ ri1HðVPIDi1Þ; PpubÞ.
Proof of correctness:
L:H:S: ¼ ^eðri2; PÞ ¼ ^eðVSKi1 þ ri1VSKi2; PÞ
¼ ^eðVSKi1; PÞ^eðri1VSKi2; PÞ
¼ ^eðsVPIDi1; PÞ^eðri1sHðVPIDi1Þ; PÞ
¼ ^eðVPIDi1; sPÞ^eðri1HðVPIDi1Þ; sPÞ
¼ ^eðVPIDi1; PpubÞ^eðri1HðVPIDi1Þ; PpubÞ
¼ ^eðVPIDi1 þ ri1HðVPIDi1Þ; PpubÞ
¼ R:H:S:

Note that in case an RSU overhears more than one
type 1 messages at about the same time, it can verify them
in a batch (though we will show that batch veriﬁcation
may not be as efﬁcient as argued by [3] in Section 7)
n
by
i¼1VPIDi1
þri1HðVPIDi1Þ; PpubÞ.
!
checking whether
Proof of correctness:
 
¼ ^e
P
!
n
i¼1ri2; P
 
P

^e
L:H:S: ¼ ^e
¼ ^e