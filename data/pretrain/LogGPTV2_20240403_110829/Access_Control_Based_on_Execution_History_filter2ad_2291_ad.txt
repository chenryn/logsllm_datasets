### Adding SIDs to Security Tokens

By incorporating an additional set of SIDs (Security Identifiers) into the security token, the process's permissions can be further restricted. There is no equivalent for explicitly amplifying rights. Restricted tokens correspond to permissions that cannot be acquired through explicit modifications (see Section 3.2). Thus, restricted tokens provide strong guarantees—once a right is denied, it will never be granted to the process—albeit at the cost of expressiveness, as sensitive operations must be requested via inter-process communication.

### Mapping Rights to Security Tokens

Beyond reusing well-known security concepts, mapping current rights to security tokens offers concrete advantages. Notably, system calls can be executed with the appropriate privileges. Additionally, SIDs can be shared across machines within the same domain. In contrast, current code-based security policies and permissions in the Common Language Runtime (CLR) are relative to the local host machine (e.g., permissions for all files on the local drive C:\).

When handling calls to services of an underlying operating system or to execution environments on remote machines, it is particularly advantageous to avoid complex translations of rights, as these translations can be both expensive and inaccurate. Such translations are easily avoided if the current rights are exactly those of a specific user of the underlying operating system. In this special case, the user ID can represent those rights. We can generalize from this by tracking rights partly in terms of code origins, as discussed in Section 3.

### Related Work

The security literature contains extensive related work. Some of it has been mentioned above, such as the use of information-flow control (e.g., [4, 14]).

**History-Based Access Control:**
History-based access control can be seen as a practical approximation of information-flow control, which tracks code execution but not data dependencies. Earlier work in the classic literature on operating systems, expressed in terms of protection rings [18, 16], might be viewed as a simple, fixed hierarchy of sets of static rights, with an automatic update mechanism for current rights and hardware support. In the remainder of this section, we focus on recent related work, particularly on stack inspection.

**Stack Inspection:**
Stack-based mechanisms for access control are well-documented for Java Virtual Machines (JVMs) [9] and the CLR [5, 12]. Research literature includes many works on the analysis and optimization of permissions (e.g., [11, 15]). Other works deal with non-trivial implementations of stack inspection, such as inlined reference monitors [7] or in security-passing style [21]. These implementations suggest that eager computation of current rights can be as efficient as lazy computation by stack inspection. The operations performed by these implementations to simulate a stack-based semantics are similar but generally more complex than the operations for computing history-based rights described in Section 3.2.

**Logical Models:**
At a more semantic level, Wallach et al. [21] explicate stack inspection in terms of a logic of access control (ABLP logic). They model security contexts and decisions using logical statements. This powerful idea of relating stack inspection to logic should also apply, mutatis mutandi, to our history-based technique. We discuss this point to highlight differences with stack inspection, avoiding formal details. Essentially, Wallach et al. associate a set of logical statements EF with each stack frame F. Operations are mapped to logical statements: Ok(T) means it is okay to perform operation T. The access control problem involves deciding whether a frame can perform an operation T, reduced to deciding whether EF logically implies Ok(T). When a frame F calls a frame G, for each of F’s statements s, one adds "F says s" to G’s statements. Significantly, there is no corresponding modification when G returns. In contrast, with history-based rights, the current rights are affected whenever there is any transfer of control—whether the transfer corresponds to a method call or return, and also for example if it results from exception handling.

**Alternative Models:**
Fournet and Gordon [8] consider an abstract model of stack inspection mechanisms based on Pottier et al. [15]. In a simple functional setting (a lambda calculus), they discuss limitations of stack inspection and explore several alternatives with stronger properties by refining the reduction rule that discards a security frame after an evaluation. The present paper can be seen as an elaboration of one of these alternatives, focused on control transfers rather than more general flows of information, and targeted at a full-fledged runtime system (quite different from the lambda calculus).

**Execution History:**
Execution history also plays a role in Schneider’s security automata [17] and the Deeds system of Edjlali et al. [6]. However, these works focus on collecting a selective history of sensitive access requests and using this information to constrain further access requests (e.g., network access may be explicitly forbidden after reading certain files). In contrast, our approach considers the history of control transfers rather than a history of sensitive requests.

### Conclusions

From a functional perspective, history-based rights computation is largely compatible with existing security machinery and libraries, although it requires runtime modifications and suggests optimizations and language extensions. From a security perspective, we believe that the benefits of access control based on execution history are substantial. It provides a simpler alternative to stack inspection and supports a safer, wiser posture with respect to security checks.

### Acknowledgments

We are grateful to Praerit Garg, Andy Gordon, Tony Hoare, Brian LaMacchia, Butler Lampson, Paul Leach, and Erik Meijer for discussions on the subject of this paper, to Mike Burrows for help with the title, and to Dan Wallach and anonymous reviewers for help with the presentation. Most of Martín Abadi’s work was done at Microsoft Research, Silicon Valley, with Microsoft’s support. Martín Abadi’s work was also partly supported by the National Science Foundation under Grants CCR-0204162 and CCR-0208800.

### References

[1] B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fiuczynski, D. Becker, C. Chambers, and S. J. Eggers. Extensibility, safety and performance in the SPIN operating system. In Proceedings of the 15th ACM Symposium on Operating System Principles, pages 267–284, 1995.

[2] D. Box. Essential .NET Volume I: The Common Language Runtime. Addison Wesley, 2002. To appear.

[3] D. F. C. Brewer and M. J. Nash. The Chinese wall security policy. In Proceedings of the 1989 IEEE Symposium on Security and Privacy, pages 206–214, 1989.

[4] D. Denning. Cryptography and Data Security. Addison Wesley, 1982.

[5] ECMA. Standard ECMA-335: Common Language Infrastructure, Dec. 2001. Available from http://msdn.microsoft.com/net/ecma/.

[6] G. Edjlali, A. Acharya, and V. Chaudhary. History-based access control for mobile code. In ACM Conference on Computer and Communications Security, pages 38–48, 1998.

[7] Ú. Erlingsson and F. Schneider. IRM enforcement of Java stack inspection. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 246–255. IEEE Computer Society Press, 2000.

[8] C. Fournet and A. D. Gordon. Stack inspection: Theory and variants. In 29th ACM Symposium on Principles of Programming Languages (POPL’02), pages 307–318, Jan. 2002.

[9] L. Gong. Inside JavaTM 2 Platform Security. Addison Wesley, 1999.

[10] N. Hardy. The confused deputy. ACM Operating Systems Review, 22(4):36–38, Oct. 1988. Available from http://www.cis.upenn.edu/~KeyKOS/ConfusedDeputy.html.

[11] T. Jensen, D. L. Metayer, and T. Thorn. Verification of control flow based security properties. In Proceedings of the 1999 IEEE Symposium on Security and Privacy, pages 89–103. IEEE Computer Society Press, 1999.

[12] S. Lange, B. LaMacchia, M. Lyons, R. Martin, B. Pratt, and G. Singleton. .NET Framework Security. Addison Wesley, 2002.

[13] T. Lindholm and F. Yellin. The JavaTM Virtual Machine Specification. Addison Wesley, 1997.

[14] A. C. Myers. JFlow: Practical, mostly-static information flow control. In 26th ACM Symposium on Principles of Programming Languages (POPL’99), pages 228–241, 1999.

[15] F. Pottier, C. Skalka, and S. Smith. A systematic approach to access control. In Programming Languages and Systems (ESOP 2001), volume 2028 of LNCS, pages 30–45. Springer, 2001.

[16] J. H. Saltzer. Protection and the control of information sharing in Multics. Communications of the ACM, 17(7), July 1974.

[17] F. B. Schneider. Enforceable security policies. ACM Transactions on Information and System Security, 3(1):30–50, Feb. 2000.

[18] M. D. Schroeder and J. H. Saltzer. A hardware architecture for implementing protection rings. Communications of the ACM, 15(3):157–170, 1972.

[19] D. A. Solomon and M. E. Russinovich. Inside Microsoft Windows 2000. Microsoft Press, third edition, 2000.

[20] D. Stutz. The Microsoft shared source CLI implementation. Mar. 2002. Available from http://msdn.microsoft.com/library/en-us/Dndotnet/html/mssharsourcecli.asp.

[21] D. S. Wallach, A. W. Appel, and E. W. Felten. SAFKASI: A security mechanism for language-based systems. ACM Transactions on Software Engineering and Methodology, 9(4):341–378, 2000.

### Appendix: Partial Implementation in C#

In this appendix, we provide a modified interface to permissions and its partial implementation in the context of C# and the CLR. Two essential aspects of the implementation are omitted here: the automatic update mechanism for the current rights (represented as the public property `Permissions.Current`) and an access mechanism to the static rights associated with a given piece of code (represented as local variables `Permissions.Static`).

#### Class Permissions

```csharp
public class Permissions
{
    // Static permissions attributed to the immediate caller:
    public static Permissions Static;

    // Dynamic permissions at this stage, automatically updated whenever some code runs,
    // with an implicit: now = now.Intersect(Static).
    private static Permissions now;

    // Dynamic permissions can be read and updated:
    public static Permissions Current
    {
        get { return now; }
        set
        {
            if (value.IsSubsetOf(Static))
                now = value;
            else
                throw new SecurityException("Amplification not permitted.");
        }
    }

    // Imperative actions on permissions (same interface as in the CLR):
    public void Demand()
    {
        if (this.IsSubsetOf(Current))
            return;
        else
            throw new SecurityException("Operation not permitted.");
    }

    public void Assert() { Current = now.Union(this); }
    public void Deny() { now = now.SetDifference(this); }
    public void PermitOnly() { now = now.Intersect(this); }

    // Data methods (same methods as in the CLR):
    public Permissions Union(Permissions p) { /* Implementation */ return null; }
    public Permissions SetDifference(Permissions p) { /* Implementation */ return null; }
    public Permissions Intersect(Permissions p) { /* Implementation */ return null; }
    public bool IsSubsetOf(Permissions p) { /* Implementation */ return false; }
}
```

#### Grant Example

```csharp
public class GrantExample
{
    // Static permissions attributed to this class by the security policy:
    static Permissions Static;

    // Handpicked sets of permissions (application-specific):
    static Permissions prior;
    static Permissions extra;

    // GRANT is a controlled form of privilege elevation that temporarily gives extra permissions to a specific block.
    public void LibraryGate()
    {
        // Usually checks preconditions such as the presence of some permissions:
        prior.Demand();

        // Elevates permissions for this block of code:
        Grant(extra);
        // Run sensitive code requesting elevated privileges
        // Continue with ordinary code
    }

    // Idem, using lower-level operations on Permissions.Current.
    public void ImplementLibraryGate()
    {
        prior.Demand();
        Permissions before = Permissions.Current;
        try
        {
            // Privilege elevation
            extra.Assert();
            // Run sensitive code requesting elevated privileges
        }
        finally
        {
            before.PermitOnly();
        }
        // Continue with ordinary code
        // Cancels privilege elevation
    }
}
```

#### Accept Example

```csharp
public delegate int IntCode();

// Some basic interface to untrusted code
public class AcceptExample
{
    // Static permissions attributed to this class by the security policy:
    static Permissions Static;

    // Handpicked sets of permissions (application-specific):
    static Permissions saved;

    // ACCEPT is a controlled form of privilege elevation that restores some or all permissions possibly lost in a specific block (for the benefit of any following code).
    private static int LibraryProxy(IntCode badCode)
    {
        int i;
        Accept(saved);
        // Runs code that may interact with less trusted code
        i = badCode();
        // Usually checks post-conditions; by design, unhandled exceptions won’t restore permissions.
        if (i < 0)
            throw new InvalidOperationException("Bad integer");
        return i;
        // From the caller’s viewpoint, the resulting permissions are the same as if this method had produced i itself.
    }

    // Idem, using lower-level operations on Permissions.Current:
    private static int ImplementLibraryProxy(IntCode badCode)
    {
        int i;
        Permissions before = Permissions.Current;
        i = badCode();
        if (i < 0)
            throw new InvalidOperationException("Bad integer");
        before.Intersect(saved).Assert();
        return i;
    }
}
```

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.