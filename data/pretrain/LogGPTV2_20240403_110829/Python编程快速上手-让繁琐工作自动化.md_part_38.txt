件。例如，可能有一个无聊的任务，需要从一个电子表格拷
贝一些数据，粘贴到另一个电子表格中。或者可能需要从几
千行中挑选几行，根据某种条件稍作修改。或者需要查看几
百份部门预算电子表格，寻找其中的赤字。正是这种无聊无
脑的电子表格任务，可以通过 Python来完成。
LibreOffice Calc和OpenOffice Calc都能处理Excel的电子表格文件格式，这意
味着 openpyxl 模块也能处理来自这些应用程序的电子表格。你可以从 https://www.
libreoffice.org/和http://www.openoffice.org/下载这些软件。即使你的计算机上已经安
装了 Excel，可能也会发现这些程序更容易使用。但是，本章中的截屏图都来自于
Windows 7上的Excel 2010。
12.1 Excel 文档
首先，让我们来看一些基本定义。一个Excel电子表格文档称为一个工作簿。一个
工作簿保存在扩展名为.xlsx 的文件中。每个工作簿可以包含多个表（也称为工作表）。
用户当前查看的表（或关闭Excel前最后查看的表），称为活动表。
每个表都有一些列（地址是从A开始的字母）和一些行（地址是从1开始的数
字）。在特定行和列的方格称为单元格。每个单元格都包含一个数字或文本值。单
元格形成的网格和数据构成了表。
12.2 安装 openpyxl 模块
Python没有自带openpyxl，所以必须安装。按照附录A中安装第三方模块的指
令，模块的名称是 openpyxl。要测试它是否安装正确，就在交互式环境中输入以下
代码：
>>> import openpyxl
如果该模块正确安装，这应该不会产生错误消息。记得在运行本章的交互式环
境例子之前，要导入 openpyxl 模块，否则会得到错误，NameError: name 'openpyxl'is
not defined。
本书介绍了openpyxl的2.1.4版，但OpenPyXL团队会经常发布新版本。不过
不用担心，新版本应该在相当长的时间内向后兼容，支持本书中使用的指令。如果
你有新版本，想看看它提供了什么新功能，可以查看 OpenPyXL 的完整文档：
http://openpyxl.readthedocs.org/。
12.3 读取 Excel 文档
本章的例子将使用一个电子表格 example.xlsx，它保存在根文件夹中。你可以
自己创建这个电子文档，或从http://nostarch.com/automatestuff/下载。图12-1展示了
3 个默认的表，名为 Sheet1、Sheet2 和 Sheet3，这是 Excel 自动为新工作簿提供的
（不同操作系统和电子表格程序，提供的默认表个数可能会不同）。
图12-1 工作簿中表的选项卡在Excel的左下角
示例文件中的 Sheet 1 应该看起来像表 12-1（如果你没有从网站下载example.xlsx，
就应该在工作表中自己输入这些数据）。
218 Python编程快速上手——让繁琐工作自动化
表12-1 example.xlsx电子表格
A B C
1 4/5/2015 1:34:02 PM Apples 73
2 4/5/2015 3:41:23 AM Cherries 85
3 4/6/2015 12:46:51 PM Pears 14
4 4/8/2015 8:59:43 AM Oranges 52
5 4/10/2015 2:07:00 AM Apples 152
6 4/10/2015 6:10:37 PM Bananas 23
7 4/10/2015 2:40:46 AM Strawberries 98
既然有了示例电子表格，就来看看如何用openpyxl模块来操作它。
12.3.1 用openpyxl 模块打开Excel 文档
在导入openpyxl模块后，就可以使用openpyxl.load_workbook()函数。在交互式
环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('example.xlsx')
>>> type(wb)
openpyxl.load_workbook()函数接受文件名，返回一个workbook数据类型的值。这
个workbook对象代表这个Excel文件，有点类似File对象代表一个打开的文本文件。
要记住，example.xlsx 需要在当前工作目录，你才能处理它。可以导入 os，使
用函数os.getcwd()弄清楚当前工作目录是什么，并使用os.chdir()改变当前工作目录。
12.3.2 从工作簿中取得工作表
调用get_sheet_names()方法可以取得工作簿中所有表名的列表。在交互式环境中
输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('example.xlsx')
>>> wb.get_sheet_names()
['Sheet1', 'Sheet2', 'Sheet3']
>>> sheet = wb.get_sheet_by_name('Sheet3')
>>> sheet
>>> type(sheet)
>>> sheet.title
'Sheet3'
>>> anotherSheet = wb.get_active_sheet()
>>> anotherSheet
每个表由一个Worksheet 对象表示，可以通过向工作簿方法get_sheet_by_name()传
第12章 处理Excel电子表格 219
递表名字符串获得。最后，可以调用Workbook对象的get_active_sheet()方法，取得
工作簿的活动表。活动表是工作簿在Excel中打开时出现的工作表。在取得Worksheet
对象后，可以通过title属性取得它的名称。
12.3.3 从表中取得单元格
有了Worksheet对象后，就可以按名字访问Cell对象。在交互式环境中输入以
下代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('example.xlsx')
>>> sheet = wb.get_sheet_by_name('Sheet1')
>>> sheet['A1']
>>> sheet['A1'].value
datetime.datetime(2015, 4, 5, 13, 34, 2)
>>> c = sheet['B1']
>>> c.value
'Apples'
>>> 'Row ' + str(c.row) + ', Column ' + c.column + ' is ' + c.value
'Row 1, Column B is Apples'
>>> 'Cell ' + c.coordinate + ' is ' + c.value
'Cell B1 is Apples'
>>> sheet['C1'].value
73
Cell对象有一个value属性，不出意外，它包含这个单元格中保存的值。Cell对
象也有row、column和coordinate属性，提供该单元格的位置信息。
这里，访问单元格B1的Cell对象的value属性，我们得到字符串'Apples'。row
属性给出的是整数1，column属性给出的是'B'，coordinate属性给出的是'B1'。
openpyxl模块将自动解释列A中的日期，将它们返回为datetime值，而不是字
符串。datetime数据类型将在第16章中进一步解释。
用字母来指定列，这在程序中可能有点奇怪，特别是在Z列之后，列开时使用
两个字母：AA、AB、AC等。作为替代，在调用表的cell()方法时，可以传入整数
作为 row 和 column 关键字参数，也可以得到一个单元格。第一行或第一列的整数
是1，不是0。输入以下代码，继续交互式环境的例子：
>>> sheet.cell(row=1, column=2)
>>> sheet.cell(row=1, column=2).value
'Apples'
>>> for i in range(1, 8, 2):
print(i, sheet.cell(row=i, column=2).value)
1 Apples
3 Pears
5 Apples
7 Strawberries
可以看到，使用表的 cell()方法，传入 row=1 和 column=2，将得到单元格 B1
220 Python编程快速上手——让繁琐工作自动化
的Cell对象，就像指定sheet['B1']一样。然后，利用cell()方法和它的关键字参数，
就可以编写for循环，打印出一系列单元格的值。
假定你想顺着B列，打印出所有奇数行单元格的值。通过传入2作为range()函数
的“步长”参数，可以取得每隔一行的单元格（在这里就是所有奇数行）。for循环
的i变量被传递作为cell()方法的row关键字参数，而column关键字参数总是取2。
请注意传入的是整数2，而不是字符串'B'。
可以通过Worksheet对象的get_highest_row()和get_highest_column()方法，确定
表的大小。在交互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('example.xlsx')
>>> sheet = wb.get_sheet_by_name('Sheet1')
>>> sheet.get_highest_row()
7
>>> sheet.get_highest_column()
3
请注意，get_highest_column()方法返回一个整数，而不是Excel中出现的字母。
12.3.4 列字母和数字之间的转换
要从字母转换到数字，就调用 openpyxl.cell.column_index_from_string()函数。
要从数字转换到字母，就调用 openpyxl.cell.get_column_letter()函数。在交互式环境
中输入以下代码：
>>> import openpyxl
>>> from openpyxl.cell import get_column_letter, column_index_from_string
>>> get_column_letter(1)
'A'
>>> get_column_letter(2)
'B'
>>> get_column_letter(27)
'AA'
>>> get_column_letter(900)
'AHP'
>>> wb = openpyxl.load_workbook('example.xlsx')
>>> sheet = wb.get_sheet_by_name('Sheet1')
>>> get_column_letter(sheet.get_highest_column())
'C'
>>> column_index_from_string('A')
1
>>> column_index_from_string('AA')
27
在从openpyxl.cell模块引入这两个函数后，可以调用get_column_letter()，传入
像27这样的整数，弄清楚第27列的字母是什么。函数column_index_string()做的事情
相反：传入一列的字母名称，它告诉你该列的数字是什么。要使用这些函数，不必
加载一个工作簿。如果你愿意，可以加载一个工作簿，取得 Worksheet 对象，并调
用 Worksheet 对象的方法，如 get_highest_column()，来取得一个整数。然后，将该
第12章 处理Excel电子表格 221
整数传递给get_column_letter()。
12.3.5 从表中取得行和列
可以将Worksheet 对象切片，取得电子表格中一行、一列或一个矩形区域中的所有
Cell对象。然后可以循环遍历这个切片中的所有单元格。在交互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('example.xlsx')
>>> sheet = wb.get_sheet_by_name('Sheet1')
>>> tuple(sheet['A1':'C3'])
((, , ), (,
, ), (, ,
))
 >>> for rowOfCellObjects in sheet['A1':'C3']:
 for cellObj in rowOfCellObjects:
print(cellObj.coordinate, cellObj.value)
print('--- END OF ROW ---')
A1 2015-04-05 13:34:02
B1 Apples
C1 73
--- END OF ROW ---
A2 2015-04-05 03:41:23
B2 Cherries
C2 85
--- END OF ROW ---
A3 2015-04-06 12:46:51
B3 Pears
C3 14
--- END OF ROW ---
这里，我们指明需要从A1到C3的矩形区域中的Cell对象，得到了一个Generator
对象，它包含该区域中的Cell对象。为了帮助我们看清楚这个Generator对象，可以
使用它的tuple()方法，在一个元组中列出它的Cell对象。
这个元组包含3个元组：每个元组代表1行，从指定区域的顶部到底部。这3
个内部元组中的每一个包含指定区域中一行的Cell对象，从最左边的单元格到最右
边。所以总的来说，工作表的这个切片包含了从 A1 到 C3 区域的所有 Cell 对象，
从左上角的单元格开始，到右下角的单元格结束。
要打印出这个区域中所有单元格的值，我们使用两个for循环。外层for循环遍历
这个切片中的每一行。然后针对每一行，内层for循环遍历该行中的每个单元格。
要访问特定行或列的单元格的值，也可以利用Worksheet 对象的 rows 和columns
属性。在交互式环境中输入以下代码：
>>> import openpyxl
>>> wb = openpyxl.load_workbook('example.xlsx')
>>> sheet = wb.get_active_sheet()
>>> sheet.columns[1]
(, , , ,
, , )
>>> for cellObj in sheet.columns[1]:
print(cellObj.value)