      OP_ADD,
      OP_TAILCALL,
      OP_SETUPVAL,
      OP_EXTRAARG,
      OP_GETTABUP,
      OP_LEN,
      OP_SUB,
      OP_LOADBOOL,
      OP_TFORCALL,
      OP_LOADNIL,
      OP_FORPREP,
      OP_SHL,
      OP_TEST,
      OP_BXOR,
      OP_LT,
      OP_CALL,
      OP_NOT,
      OP_BOR,
      OP_MUL,
      OP_SETTABUP,
      OP_EQ,
      OP_MOVE,
      OP_JMP,
      OP_IDIV,
      OP_GETTABLE,
      OP_CONCAT,
      OP_VARARG,
      OP_POW,
      OP_MOD,
      OP_DIV,
      OP_BNOT,
      OP_SELF,
      OP_LE,
      OP_RETURN,
      OP_FORLOOP,
      OP_GETUPVAL,
      OP_LOADK,
      OP_BAND
    } OpCode;
    #define NUM_OPCODES (cast(int, OP_BAND) + 1)
    /*===========================================================================
      Notes:
      (*) In OP_CALL, if (B == 0) then B = top. If (C == 0), then 'top' is
      set to last_result+1, so next open instruction (OP_CALL, OP_RETURN,
      OP_SETLIST) may use 'top'.
      (*) In OP_VARARG, if (B == 0) then use actual number of varargs and
      set top (like in OP_CALL with C == 0).
      (*) In OP_RETURN, if (B == 0) then return up to 'top'.
      (*) In OP_SETLIST, if (B == 0) then B = 'top'; if (C == 0) then next
      'instruction' is EXTRAARG(real C).
      (*) In OP_LOADKX, the next 'instruction' is always EXTRAARG.
      (*) For comparisons, A specifies what condition the test should accept
      (true or false).
      (*) All 'skips' (pc++) assume that next instruction is a jump.
    ===========================================================================*/
    /*
    ** masks for instruction properties. The format is:
    ** bits 0-1: op mode
    ** bits 2-3: C arg mode
    ** bits 4-5: B arg mode
    ** bit 6: instruction set register A
    ** bit 7: operator is a test (next instruction must be a jump)
    */
    enum OpArgMask {
      OpArgN, /* argument is not used */
      OpArgU, /* argument is used */
      OpArgR, /* argument is a register or a jump offset */
      OpArgK  /* argument is a constant or register/constant */
    };
    LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];
    #define getOpMode(m) (cast(enum OpMode, luaP_opmodes[m] & 3))
    #define getBMode(m) (cast(enum OpArgMask, (luaP_opmodes[m] >> 4) & 3))
    #define getCMode(m) (cast(enum OpArgMask, (luaP_opmodes[m] >> 2) & 3))
    #define testAMode(m) (luaP_opmodes[m] & (1 << 6))
    #define testTMode(m) (luaP_opmodes[m] & (1 << 7))
    LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES + 1]; /* opcode names */
    /* number of list items to accumulate before a SETLIST instruction */
    #define LFIELDS_PER_FLUSH 50
    #endif
  * 然后编译 lua5.3
  * 之后编译 `luadec` ，编译过程中报错，意味着改动后的 Opcode 与原来的并不兼容  
  * 通过动调等手段定位什么指令导致了 `Segmentation fault` ，发现很有可能是因为 `#` 导致的：`#` 是 Lua 的语法糖，约等于 `len(arg)` ，于是把 `luadec/bin/bin2c.lua` 进行微调  
  * 此时可以顺利编译 `luadec` 了，同时也可以对魔改的 Lua Bytecode 进行反编译了
  * 运行  
  * 得到 `recovered.lua`
    -- Decompiled using luadec 2.2 rev: 895d923 for Lua 5.3 from https://github.com/viruscamp/luadec
    -- Command line: ../repaired.lua 
    -- params : ...
    -- function num : 0 , upvalues : _ENV
    print("input flag:")
    flag = (io.read)()
    if #flag ~= 29 then
      print("flag is wrong")
      return 
    end
    lst = {100, 120, 133}
    dict = {[9] = 101, [10] = 122}
    ad = function(a, b)
      -- function num : 0_0
      return a + b
    end
    mul = function(a, b)
      -- function num : 0_1
      return a * b
    end
    check2 = function(f)
      -- function num : 0_2 , upvalues : _ENV
      if (string.byte)(f, 18) + 11 ~= 106 then
        return false
      elseif (string.byte)(f, 19) ~= lst[1] + 21 then
        return false
      elseif (string.byte)(f, 20) ~= dict[9] + 8 then
        return false
      elseif (string.byte)(f, 21) ~= ad(100, 22) then
        return false
      elseif (string.byte)(f, 22) ~= 55 then
        return false
      elseif (string.byte)(f, 23) ~= mul(51, 2) then
        return false
      elseif (string.byte)(f, 24) - 1 ~= 108 then
        return false
      elseif (string.byte)(f, 25) ~= 48 then
        return false
      elseif (string.byte)(f, 26) ~= 100 then
        return false
      elseif (string.byte)(f, 27) ~= 102 then
        return false
      elseif (string.byte)(f, 28) ~= 120 then
        return false
      end
      do return true end
      -- DECOMPILER ERROR: 22 unprocessed JMP targets
    end
    check3 = function(f)
      -- function num : 0_3 , upvalues : _ENV
      if (string.byte)(f, 1) ~= 66 then
        return false
      elseif (string.byte)(f, 2) ~= 121 then
        return false
      elseif (string.byte)(f, 3) ~= 116 then
        return false
      elseif (string.byte)(f, 4) ~= 101 then
        return false
      elseif (string.byte)(f, 5) ~= 67 then
        return false
      elseif (string.byte)(f, 6) ~= 84 then
        return false
      elseif (string.byte)(f, 7) ~= 70 then
        return false
      elseif (string.byte)(f, 8) ~= 123 then
        return false
      elseif (string.byte)(f, 29) ~= 125 then
        return false
      end
      do return true end
      -- DECOMPILER ERROR: 18 unprocessed JMP targets
    end
    local flag1 = _(flag)
    local flag2 = check2(flag)
    local flag3 = check3(flag)
    if not not flag1 or flag2 or flag3 then
      print("flag is right")
    elseif true then
      print("flag is wrong")
    end
    -- DECOMPILER ERROR: 6 unprocessed JMP targets
  * 大部分逻辑都很简单，基本就是明文比较。但有一点：脚本调用了 `_` 这个闭包函数，而这个函数并不是在 Lua 脚本中定义的
### 定位 `_` 闭包函数
  * 先看一下 Luago 中是怎么定义闭包函数的。原来是通过一个 `map`  
  * 在 Golang 中，`map` 是在函数中动态初始化的，全局搜索其中的部分字符串，找到了初始化的函数  
  * 但是怎么找也找不到 `"_"` 这个字符串，这其实反映了 IDA 在搜索字符串的时候一些局限性：没法找到特定长度的字符串
  * 所以这里采用一个骚办法：导出 ASM，然后用 VSCode 在文本文件中搜索  
  * 然后通过交叉引用定位到了跟它绑定的闭包函数  
  * 别被它的伪代码骗了。实际上，这是一个亦或加密并比对  
  * 至此，所有的程序逻辑梳理完成，基本全部都是非常简单的亦或加密，所以得到 `flag` 并不困难了
    def ad(a, b): return a+b
    def mul(a, b): return a*b
    dict = {9:  101, 10: 122}
    lst = (100, 120, 133)
    flag = [ord(' ')]*30
    flag[1] = 66
    flag[2] = 121
    flag[3] = 116
    flag[4] = 101
    flag[5] = 67
    flag[6] = 84
    flag[7] = 70
    flag[8] = 123
    flag[29] = 125
    flag[18] = 106-11
    flag[19] = lst[0]+21
    flag[20] = dict[9]+8
    flag[21] = ad(100, 22)
    flag[22] = 55
    flag[23] = mul(51, 2)
    flag[24] = 108+1
    flag[25] = 48
    flag[26] = 100
    flag[27] = 102
    flag[28] = 120
    front = b'9negozc9aj'
    for i, e in enumerate(front):
      print(chr((i+8) ^ e),end='')
    print()
    print(bytearray(flag).decode())
    # ByteCTF{1golcwm6q_ymz7fm0dfx}
## 总结与心得
  * 这道题综合性极强，工作量非常之大。当时花了一天时间看这道题，最后只拿了个四血（给 Nu1L 带哥们跪了，做得太快了）赛后好好整理 wp 也愣是写了一两个小时
  * 这道题涉及的知识点确实很多：Go 逆向（还是不带符号的）、魔改的 Lua 逆向（坑死了）
  * 不过，我感觉这题更多是在考察选手的 **正向开发思路** 。这体现在 
    1. 很多步骤都是需要选手“猜”来定位关键逻辑的，如定位 Opcode 结构体，以及最后能不能想到是通过 `Openlib` 注册了 `_` 回调
    2. 做题过程中需要写很多辅助脚本（IDAPython），同时需要快速魔改 Lua 和 Luadec 并定位其中的问题
  * 所以，想要做好逆向，一定要积累一些项目开发经验。这样你才能站在出题人（开发者）的角度，去思考在哪里布置考点
  * And _： ~~字节的逆向出题人真不当人啊~~_ ​