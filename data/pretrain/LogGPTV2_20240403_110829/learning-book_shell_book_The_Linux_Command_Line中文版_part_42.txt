## Page 342
-I
显示打印系统的状态。
-8
显示汇总状态
-t
显示完整状态报告。
表23-5:常用lpstat选项
23.5.2lpq－显示打印机队列状态
使用lpq程序可以查看打印机队列的状态，从中我们可以看到队列的状态和所包含的打印任
务。下面的例子显示了一台名叫printer的系统默认打印机包含一个空队列的情况：
[nedlinuxbox -]$ 1pq
printer is ready
no entries
如果我们不指定打印机（用-P参数），就会显示系统默认打印机。如果给打印机添加一项
任务再查看队列，我们就会看到下列结果：
d 1g-xd 1x‘+T $[-xoqxnutoou]
request id is printer-603 (1 file(s))
[ne@linuxbox -]$ 1pq
printer is ready and printing
Rank
Ouner Job
File(s)
Total Size
active
me
603
(stdin)
1024 bytes
23.5.3lprm和cancel-取消打印任务
CUPS提供两个程序来从打印队列中终止井移除打印任务。一个是Berkeley风格的（lprm）
另一个是SystemV的（cancel）。在支持的选项上两者有较小的区别但是功能却几乎相同。以
上面的打印任务为例，我们可以像这样终止并移除任务：
[nedlinuxbox -]$ cancel 603
[nedlinuxbox -]$ 1pq
341
---
## Page 343
printer isready
no entries
每个命令都有选项可用于移除某用户、某打印机或多个任务号的所有任务，相应的参考手
册中都有详细的介绍。
342
---
## Page 344
24
编译程序
在这一章中，我们将看一下如何通过编译源代码来创建程序。源代玛的可用性是至关重要的自
由，从而使得Linux成为可能。整个Linux开发生态圈就是依赖于开发者之间的自由交流。对
于许多桌面用户来说，编译是一种失传的艺术。以前很常见，但现在，由系统发行版提供商维
护巨大的预编译的二进制仓库，准备供用户下载和使用。在写这篇文章的时候，Debian仓库
（最大的发行版之一）包含了几乎23.000个预编译的包。
那么为什么要编译软件呢？有两个原因：
1.可用性。尽管系统发行版仓库中已经包含了大量的预编译程序，但是一些发行版本不可
能包含所有期望的应用。在这种情况下，得到所期望程序的唯一方式是编译程序源码。
2.及时性。虽然一些系统发行版专门打包前沿版本的应用程序，但是很多不是。这意味着
为了拥有一个最新版本的程序，编译是必需的。
从源码骗译软件可以变得非常复杂且具有技术性；许多用户难以企及。然而，许多编译任务
是相当简单的，只涉及到几个步骤。这都取决于程序包。我们将看一个非常简单的案例，为的
是给大家提供一个对编译过程的整体认识，并为那些愿意进一步学习的人们构筑一个起点。
我们将介绍一个新命令：
·make-维护程序的工具
24.1什么是编译？
简而言之，编译就是把源码（一个由程序员编写的人类可读的程序的说明）翻译成计算机处理
器的语言的过程。
计算机处理器（或CPU）工作在一个非常基本的水平，执行用机器语言编写的程序。这是
一种数值编码，描述非常小的操作，比如“加这个字节”、“指向内存中的这个位置”或者“复
制这个字节”。
343
---
## Page 345
这些指令中的每一条都是用二进制表示的（1和0）。最早的计算机程序就是用这种数值编
码写成的，这可能就解释了为什么编写它们的程序员据说吸很多烟，喝大量咖啡，并带着厚厚
的眼镜。随着汇编语言的出现，这个问题得到克服·汇编语言使用诸如CPY（复制）和MOV
（移动）之类（略微）易用的字符助记符代替了数值编码。用汇编语言编写的程序通过汇编器处
理为机器语言。今天为了完成某些特定的程序任务，汇编语言仍在被使用，例如设备驱动和嵌
人式系统。
下一步我们谈论一下什么是所谓的高级编程语言。之所以这样称呼它们，是因为它们可以
让程序员少操心处理器的一举一动，而更多关心如何解决手头的问题。早期的高级语言（二十
世纪50年代期间研发的）包括FORTRAN（为科学和技术任务而设计）和COBOL（为商业
应用而设计）。今天这两种语言仍在有限的使用。
虽然有许多流行的编程语言，两个占主导地位。大多数为现代系统编写的程序，要么用C
漏写，要么是用C++骗写。在随后的例于中，我们将编写一个C程序。
用高级语言编写的程序，经过另一个称为编译器的程序的处理，会转换成机器语言。一些编
译器把高级指令翻译成汇编语言，然后使用一个汇编器完成翻译成机器语言的最后阶段。
一个称为链接的过程经常与编译结合在一起。有许多常见的由程序执行的任务。以打开文
件为例。许多程序执行这个任务，但是让每个程序实现它自已的打开文件功能，是很浪费资源
的。更有意义的是，拥有单独的一段知道如何打开文件的程序，并允许所有需要它的程序共享
它。对常见任务提供支持由所谓的库完成。这些库包含多个程序，每个程序执行一些可以由多
里。一个叫做链接器的程序用来在编译器的输出结果和要编译的程序所需的库之间建立连接。
这个过程的最终结果是一个可执行程序文件，准备使用。
24.1.1所有的程序都是可编译的吗？
不是。正如我们所看到的，有些程序比如shell脚本就不需要编译。它们直接执行。这些程序是
用所谓的脚本或解释型语言编写的。近年来，这些语言变得越来越流行，包括Perl丶Python
PHPRuby和许多其它语言。
脚本语言由一个叫做解释器的特殊程序执行。一个解释器输入程序文件，读取并执行程序
中包含的每一条指令。通常来说，解释型程序执行起来要比编译程序慢很多。这是因为每次解
释型程序执行时，程序中每一条源玛指令都需要翻译，而一个已经编译好的程序，一条源玛指
令只翻译了一次，翻译后的指令会永久地记录到最终的执行文件中。
那么为什么解释型程序这样流行呢？对于许多编程任务来说，原因是“足够快”，但是真正
的优势是一般来说开发解释型程序要比编译程序快速且容易。通常程序开发需要经历一个不断
重复的写码、编译和测试周期。随着程序变得越来越大，编译阶段会变得相当耗时。解释型语
---
## Page 346
言删除了编译步骤，这样就加快了程序开发。
24.2编译一个C语言
让我们编译一些东西。在我们编译之前，然而我们需要一些工具，像编译器、链接器以及
make。在Linux环境中，普遍使用的C编译器叫做gcc（GNUC编译器），最初由Richard
Stallman写出来的。大多数Linux系统发行版默认不安装gcc。我们可以这样查看该编译器是
否存在：
[ne@linuxbox -]$ vhich gcc
/usr/bin/gcc
在这个例子中的输出结果表明安装了gcc编译器。
小提示：你的系统发行版可能有一个用于软件开发的meta-package（软件包的集合）。如
果是这样的话，若你打算在你的系统中编译程序就考虑安装它·若你的系统没有提供一个
meta-package，试着安装gcc和make工具包。在许多发行版中。这就足够完成下面的练习了。
24.2.1得到源码
为了我们的编译练习，我们将编译一个叫做diction的程序，来自GNU项目。这是一个小巧方
便的程序，检查文本文件的书写质量和样式。就程序而言，它相当小，且容易创建。
遵照惯例，首先我们要创建一个名为src的目录来存放我们的源码，然后使用ftp协议把源
码下载下来。
[neglinuxbox -]$ mkdir src
[neglinuxbox -]$ cd src
[nellinuxbox src]$ ftp ftp-gnu.org
Connected to ftp·gnu.org
220 GNU FTP server ready.
Mane (ftp gnu org:ne) : anonynous
230 Login successful.
345
---
## Page 347
Renote systen type is UNII.
Using binary mode to transfer files.
ftp> cd gnu/diction
250 Directory successfully changed.
ftp> 1s
200 PORT connand successful. Consider using PASV.
150 Here cones the directory listing.
=rv-r--r-- 1 1003 65534 68940 Aug 28 1998 diction-0.7.tar·gz
rv-r-=r-- 1 1003 65534 90957 Mar 04 2002 diction-1.02.tar·gz
-rv-r--r-- 1 1003 65534 141062 Sep 17 2007 diction-1.11.tar-gz
226 Directory send OK.
ftp> get diction-1.11.tar-gz
local: diction-1.11.tar-gz renote: diction-1.11.tar.gz
200 PORT connand successful. Consider using PASV.
150 Opening BINARY node data connection for diction-1.11.tar-gz
(141062 bytes) .
226 File send OK.
141062 bytes received in 0.16 secs (847.4 kB/s)
ftp> bye
221 Goodbye.
[ne@linuxbox src]$ 1s
diction-1.11.tar.gz
注意：因为我们是这个源码的“维护者”.当我们编译它的时候，我们把它保存在~/src目
录下。由你的系统发行版源码会把源码安装在/usr/src目录下，而供多个用户使用的源码，通
常安装在/usr/local/src目录下。
正如我们所看到的，通常提供的源码形式是一个压缩的tar文件。有时候称为tarball，这
个文件包含源码树，或者是组成源码的目录和文件的层次结构。当到达ftp站点之后，我们检
查可用的tar文件列表，然后选择最新版本，下载。使用ftp中的get命令，我们把文件从ftp
服务器复制到本地机器。
一旦tar文件下载下来之后，必须解包。通过tar程序可以完成：
346
---
## Page 348
[ne@linuxbox src]$ 1s
diction-1.11
diction-1.11.tar gz
小提示：该diction程序，像所有的GNU项目软件，遵循着一定的源码打包标准。其它大
多数在Linux生态系统中可用的源码也遵循这个标准。该标准的一个条目是，当源码tar文件
打开的时候，会创建一个目录，该目录包含了源码树，并且这个目录将会命名为project-x.xx，
其包含了项目名称和它的版本号两项内容。这种方案能在系统中方便安装同一程序的多个版
本。然而，通常在打开tarball之前检验源码树的布局是个不错的主意。一些项目不会创建该
目录，反而，会把文件直接传递给当前目录。这会把你的（除非组织良好的）src目录弄得一片
狼。为了避免这个，使用下面的命令，检查tar文件的内容：
tar tzvf tarfile l head
24.3
检查源码树
打开该tar文件，会创建一个新的目录，名为diction-1.11。这个目录包含了源码树。让我们看
一下里面的内容
[ne@linuzbox src]$ cd diction-1.11
[nedlinuxbox diction-1.11]$ 1s
config·guess
diction.c
getopt.c
n1
config.h.in
diction.pot
getopt .h
n1.po
config.sub
diction-spec
configure
diction.spec.in
INSTALL
sentence.c
configure.in
diction.texi.in
instal1-sh
sentence.h
COPYING en
Malkefile.in
style.1.in
de
en_GB
nisc.c
style.c
de-po
en_GB-po
nisc.h
test
diction.1.in
getopt1.c
NEVS
347
---
## Page 349
在源码树中，我们看到大量的文件。属于GNU项目的程序，还有其它许多程序都会，提供
文档文件README，INSTALL，NEWS，和COPYING。
这些文件包含了程序描述，如何建立和安装它的信息，还有其它许可条款。在试图建立程序
之前，仔细阅读README和INSTALL文件，总是一个不错的主意。
在这个目录中，其它有趣的文件是那些以.和.h为后缀的文件：
[ne@linuxbox diction-1.11]$ 1s *.c
diction.c getopt1.c getopt.c misc.c sentence.c style.c
[nedlinuxbox diction-1.1i]$ ls *.h
getopt.h getopt_int.h misc.h sentence.h
这些.c文件包含了由该软件包提供的两个C程序（style和diction），被分割成模块。这是
一种常见做法，把大型程序分解成更小，更容易管理的代码块。源码文件都是普通文本，可以
用less命令查看：
[nedlinuxbox diction-1.11]$ less diction.c
这些h文件被称为头文件。它们也是普通文件。头文件包含了程序的描述，这些程序被包
括在源码文件或库中。为了让编译器链接到模块，编译器必须接受所需的所有模块的描述，来
完成整个程序。在diction.c文件的开头附近，我们看到这行代码：
#include "getopt.h*
当它读取diction.c中的源码的时候，这行代码指示编译器去读取文件getopt.h，为的是“知
道”getopt.c中的内容。getopt.c文件提供由 style和diction两个程序共享的例行程序。
在 getopt.h的include语句上面，我们看到一些其它的include 语句，比如这些：
#include 
#include 
#include 
#include 
#include 
348
---
## Page 350
这些文件也是头文件，但是这些头文件在当前源码树的外面。它们由操作系统供给，来支持
每个程序的编译。如果我们看一下/usr/include目录，能看到它们：
[nedlinuxbox diction-1.11]$ 1s /usr/include
当我们安装编译器的时候，这个目录中的头文件会被安装。
24.3.1构建程序
大多数程序通过一个简单的，两个命令的序列构建：
-/conf igure
malce
这个configure程序是一个shell脚本，由源码树提供。它的工作是分析程序构建环境。大
多数源码会设计为可移植的。也就是说，它被设计成能够在不止一种类Unix系统中进行构建。
但是为了做到这一点，在建立程序期间，为了适应系统之间的差异，源码可能需要经过轻微的
调整。configure也会检查是否安装了必要的外部工具和组件。让我们运行configure命令。因
为configure命令所在的位置不是位于shell通常期望程序所呆的地方，我们必须明确地告诉
shell它的位置，通过在命令之前加上./字符，来表明程序位于当前工作目录：
[ne@linuxbox diction-1.11]$ . /configure
configure将会输出许多信息，随着它测试和配置整个构建过程。当结束后，输出结果看起
来像这样：
checking libintl.h presence.-- yes
checking for libintl.h... yes
checking for library containing gettext... none required
configure: creating ./config-status