title:StorM: Enabling Tenant-Defined Cloud Storage Middle-Box Services
author:Hui Lu and
Abhinav Srivastava and
Brendan Saltaformaggio and
Dongyan Xu
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
StorM: Enabling Tenant-Deﬁned Cloud Storage Middle-Box Services
Hui Lu†, Abhinav Srivastava‡, Brendan Saltaformaggio†, Dongyan Xu†
†Department of Computer Science, Purdue University, ‡AT&T Research
†{lu220, bsaltafo, dxu}@cs.purdue.edu,‡PI:EMAIL
Abstract—In an Infrastructure-as-a-Service cloud, tenants
rely on the cloud provider to provide “value-added” services
such as data security and reliability. However, this provider-
controlled service model is less ﬂexible and cannot be cus-
tomized to meet individual tenants’ needs. In this paper, we
present StorM, a novel middle-box service platform that allows
each tenant to deploy tenant-speciﬁc security and reliability
services – in virtualized middle-boxes – for their cloud data.
With such middle-boxes, StorM divides the responsibilities of
service creation between tenants and the provider by allowing
tenants to customize their own cloud data polices and the
provider to offer corresponding infrastructural support. In
developing StorM, we address key challenges including network
splicing, platform efﬁciency, and semantic gap. We implement
a StorM prototype on top of OpenStack and demonstrate three
tenant-deﬁned security/reliability middle-box services, with low
performance overhead (middlebox1
NIC
SemanƟcs 
ReconstrucƟon
Packet
IntercepƟon
Network Splicing
Forwarding Path
Compute Host
Middle-box 
instance
API
Tenant-speciĮc 
applicaƟons
NIC
Forwarding table:
1. middlebox1
->target:iscsi-des
Figure 2: Architecture of StorM.
that such improvements signiﬁcantly reduce the latency of
the storage trafﬁc.
Lastly, the storage packets going into middle-boxes only
carry block-level
information such as disk sectors, raw
data blocks, and inode information. Middle-boxes offering
encryption/decryption can work at this granularity, however
other services such as access monitoring and intrusion detec-
tion require higher-level ﬁle semantics which are present in
the packet. Storage middle-boxes take advantage of inherent
storage subsystem information such as ﬁle system types
and disk layouts to accurately reconstruct the mapping from
low-level block accesses to high-level ﬁle operations. Our
case study in Section V-B implements a storage monitoring
middle-box and demonstrates that this mapping not only
recovers the high-level ﬁle operations, but also provides
more details of the ﬁle system internal operations which can
be used to analyze suspicious behaviors in the ﬁle system.
C. Assumptions
A cloud infrastructure (e.g., OpenStack) typically consists
of two types of nodes – controller nodes and compute
nodes. Like most efforts in this space [9], we assume that
cloud providers (including the controller and physical cloud
infrastructure) are trusted. Since the StorM components
reside on the physical cloud infrastructure, they are also
trusted and protected by cloud providers. Once middle-boxes
are deployed, their network connectivity is isolated to only
the storage network (controlled by CSPs) and connections
from local CSP administrators; and they are transparent to
the programs (including malicious programs) running in
the tenants’ VMs. Finally, the tenants’ VMs, which are
facing the external network, are not trusted. Attackers may
compromise a tenant’s VM, and subsequently try to access
its in-cloud data storage.
III. DESIGN
Figure 2 shows the three main components of StorM.
The ﬁrst component, network splicing, is part of the cloud
infrastructure, and enables the seamless and transparent
deployment of virtualized middle-boxes and ensures the
isolation and security of any “cross-network” trafﬁc. The
last
interception and semantics