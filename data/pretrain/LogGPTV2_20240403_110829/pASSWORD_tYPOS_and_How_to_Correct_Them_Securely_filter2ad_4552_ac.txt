### Introduction and Assumptions
While some spurious login submissions may pass through our filtering mechanisms, we assume for simplicity that our instrumentation is only monitoring legitimate login attempts. This assumption is conservative: if the collected data includes illegitimate login attempts, the true rate of correctable typos for legitimate users would be even higher. Our security analyses (Section VI) will not make such assumptions.

### Instrumentation
We modified the Dropbox password checking code to perform additional checks on all legitimate login attempts via the web interface. This approach provided a vast amount of data and eliminated biases that could arise from selecting a small percentage of accounts. It also made it possible to track multiple password submissions from a single user, which was necessary for timing re-tries.

During the measurement period, every password submission was processed as follows:
- If the password check passed, no further action was taken.
- If the password check failed, one or more typo corrections from a predefined set of corrector functions \( C = \{f_1, f_2, \ldots, f_c\} \) were applied. These corrector functions were defined in the previous section. We used slightly different sets of correctors in different experiments, as discussed below.
- For each failed login attempt, a log entry was generated containing a timestamp, whether the login would have been successful with a corrected password, the type of correction \( f_i \) that was successful (if applicable), and the user agent string.

It is important to note that in our experiments, login was not allowed based on the corrected passwords. We did not modify Dropboxâ€™s effective login checks; we only collected the data needed to evaluate the potential benefits of such modifications.

### Typos and Login Failure Rates
In an initial experiment, we aimed to measure the incidence rate of the top five corrections observed in the MTurk study (Section III). The set of corrector functions for this experiment was \( C_{top5} = \{swc-all, swc-first, rm-last, rm-first, n2s-last\} \). For each failed password submission, one correction from \( C_{top5} \) was chosen uniformly at random and applied to the submitted password. This approach was adopted because, in the current implementation, only sequential code is easily supported, and the password hashing scheme used at Dropbox is designed to be slow to compute. The overhead of additional checks on Dropbox infrastructure was unclear, so we conservatively performed only one additional check at a time.

The success of this initial experiment suggested that the performance impact was low, and later experiments applied multiple corrections. Data was collected over a 24-hour period.

We cannot report the exact number of login attempts during this period due to confidentiality. Instead, we report rates of success and failure. Let \( c_f \) denote the number of times a corrector \( f \) was applied to an incorrect password during an experiment, and let \( r_f \) denote the number of times \( f \) successfully corrected an incorrect password. The ratio \( \frac{r_f}{c_f} \) gives the percentage of login failures correctable by \( f \).

The left figure in Figure 3 reports the measured ratios \( \frac{r_f}{c_f} \) for each corrector in \( C_{top5} \) over the 24-hour period. This reveals that 9.3% of failures are due to typos correctable by \( C_{top5} \), suggesting that typos indeed account for a significant number of failed legitimate password submissions. By correction type, switching the case of the first character (swc-first) is the most common, accounting for 60% of these, and the first three (swc-all, swc-first, rm-last) account for over 90%. Capitalization errors appear to be a significant source of errors, providing evidence for why Facebook accepts these typos.

There is some disparity with the MTurk results. While the top three correctors are the same, the ordering differs, with caps-lock errors proportionally higher in MTurk. We believe this is due to the MTurk experiment design, and the Dropbox numbers more accurately reflect rates in operational environments.

### Mobile vs. Desktop Performance
During data collection, we recorded the user agent for all password submissions, allowing us to analyze the performance of typo correction on mobile versus desktop platforms. We found that the estimated correction rate for mobile was slightly higher at 10.5%, compared to 9.3% for desktop. The middle figure in Figure 3 shows the estimated correction rates for each user agent broken down by corrector function. The n2s-last correction is significantly more effective on mobile, likely because mobile keyboards require switching to an alternate keyboard to reveal symbols. Conversely, swc-all is more effective on desktop, possibly because it's easier to leave caps lock enabled on conventional keyboards. This suggests the potential merit of applying different correction policies based on the user agent. Further analysis of this is left for future work.

### Utility of the Top Three Corrections
We performed a second study focusing on the top three correctors \( C_{top3} = \{swc-all, swc-first, rm-last\} \). For this experiment, all three correctors were applied to any password that failed to exactly match the registered password. Data was recorded for 24 hours.

We additionally recorded the time duration between the first failed submission and the first successful submission by each user. This allowed us to quantify the time delay between failures and successes, a measure of how much utility is lost due to usability issues such as typos.

As expected, the success rate of corrections closely matched the results of the previous 24-hour experiment. Specifically, typos correctable by \( C_{top3} \) accounted for 9% of failed password submissions, attesting to the stability of these percentages over time.

The right figure in Figure 3 shows a cumulative distribution function (CDF) of the delay in logging in for all users who eventually succeeded within the 24-hour period. Almost 20% of users who experienced a failed login would have been logged in a minute earlier had typo-tolerant checking been enabled. Aggregated across all failed login attempts, typo-tolerance would have increased logged-in time by several person-months just for this 24-hour experiment, representing a significant impact on user experience.

In aggregate, 3% of all users who attempted to log into Dropbox within the 24-hour measurement period were turned away even though at least one of their submitted passwords was correctable by one of the correctors in \( C_{top3} \). This also represents a significant impact on user experience, with users being prevented from using the service.

### Typo-Tolerant Checking Schemes
In previous sections, we saw that typos account for a large fraction of login failures and that a simple set of typo corrector functions could significantly improve user experience. A natural follow-on question is whether we can achieve typo-tolerance in password authentication systems without a significant security loss. We address this question here.

We introduce the "free corrections theorem," which shows that for all natural settings, there exist typo-tolerant checking schemes that correct typos with no security loss relative to exact checking for optimal attackers with exact knowledge of the distribution of passwords. We also specify the optimality of the scheme underlying this theorem, showing that it achieves the maximum utility possible with no security loss.

We define the notion of a "natural" setting formally below. Intuitively, it corresponds to the highly non-uniform, sparse (in the space of all strings) passwords chosen in practice. The schemes we analyze formally are not readily applied in practice because they require exact knowledge of password and typo distributions. Nevertheless, combining our measurement studies with a theoretical perspective guides us towards the design of several concrete typo-tolerant checking schemes, for which we provide empirical security estimates in Section VI.

#### Password and Typo Settings
Let \( S \) be the set of all possible strings that could be chosen as passwords, e.g., ASCII strings up to some maximum length. We associate with \( S \) a distribution \( p \) that models the probability of user selection of passwords; thus \( p(w) \) is the probability that some user selects a given string \( w \in S \) as a password. Let \( PW \subseteq S \) be the set of possible passwords, which is formally just the support of \( p \). We write \( p(P) \) to denote the aggregate probability on a set \( P \subseteq S \) of strings. Following prior work, this model assumes that the distribution of passwords is independent of the user selecting them, and that passwords are independently drawn from \( p \).

A key feature of our formalization approach is that we do not appeal to a specific lexicographic notion of distance (e.g., Levenshtein distance) to model typos. Instead, we directly model typos as probabilistic changes to strings. Specifically, let \( \tau_w(\tilde{w}) \) denote the probability that upon authenticating, a user with password \( w \) types the string \( \tilde{w} \). Thus, \( \tau \) is a family of distributions over \( S \), one distribution for each \( w \in PW \). If \( \tilde{w} \neq w \), then \( \tilde{w} \) is a typo; \( \tau_w(w) \) is the probability that the user makes no typo. Note that \( \tilde{w} \) may or may not itself be a password possibly chosen by a user, i.e., it may not be in \( PW \). We say that \( \tilde{w} \) is a neighbor of \( w \) if \( \tau_w(\tilde{w}) > 0 \).

For all \( w \in PW \), \( \tau_w(\cdot) \) defines a probability space over \( S \). That is, \( \tau_w(\tilde{w}) \in [0, 1] \) for any \( \tilde{w} \) and \( \sum_{\tilde{w} \in S} \tau_w(\tilde{w}) = 1 \). In practice, generally \( \tau_w(w) > 0 \), i.e., users will sometimes enter passwords correctly. Also, it will most often be the case that \( \tau_w(\tilde{w}) \neq \tau_{\tilde{w}}(w) \) for \( w \neq \tilde{w} \). For example, a user may mistype her password \( w = \text{"unlockme1"} \) as \( \tilde{w} = \text{"unlockme"} \) by accidentally dropping the last 1, while a user whose password is \( \tilde{w} = \text{"unlockme"} \) is less likely to type a 1 at the end of his password.

In our model, we assume that typos depend only on a userâ€™s password \( w \) and not on other factors. This assumption simplifies the operationalization of typo tolerance models. For example, modeling individual users' typo habits would require a server to record the userâ€™s typo history, leading to a more complex system and potential leaks of password information. From now on, a password and typo setting, or simply setting, is a pair \( (p, \tau) \).

#### Password Checkers
A password checker scheme consists of two algorithms:
- **Reg** is a randomized password registration algorithm. It takes as input a password \( w \) and outputs a string \( s \) that may, for example, be the output of a password hashing scheme like scrypt. These are randomized since one must choose a random salt value for each registration.
- **Chk** is a (possibly randomized) password verification algorithm. It takes as input a string \( \tilde{w} \) and a stored string \( s \), and outputs a Boolean value, either true or false.

In a modern, real-world service such as Dropbox, Chk is one input in a complex authentication system that combines multiple contextual, potentially probabilistic signals to make an authentication decision. A typo-tolerant checker could return a probabilistic estimate and/or combine with other contextual signals, but we focus our analysis only on deterministic checkers. Our techniques extend naturally to confidence values (e.g., by returning an estimate of \( \tau_w(\tilde{w}) \)). In such a scenario, the security impact of a typo-tolerant Chk will be even lower. We also consider only complete checkers, meaning that for all \( w \), \( \text{Chk}(w, \text{Reg}(w)) \Rightarrow \text{true} \).

An exact checker is one which never outputs true if \( \tilde{w} \neq w \). In practice, exact checkers actually have a non-zero, but cryptographically small probability of false acceptance. We will throughout ignore this false acceptance probability. We use ExChk to denote some secure exact checker and assume the existence of one compatible with all password settings of interest.

#### Typo-Tolerant Checkers
We will focus our attention on typo-tolerant checkers.