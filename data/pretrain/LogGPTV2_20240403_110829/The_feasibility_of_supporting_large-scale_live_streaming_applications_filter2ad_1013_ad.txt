The parent selection algorithm determines the stability of the
overlay. If hosts have stable parents, as opposed to unstable parents,
then the tree is likely to be more stable. We ran simulations on 4
parent selection algorithms. Note that the chosen parent needs to
be connected to the tree and have enough resources to support an
incoming child (has not saturated its degree-bound), in addition to
satisfying the parent selection criteria.
(cid:15)Oracle: A host chooses the parent who will stay in the system
longer than itself. If no host will stay longer, it chooses the host
that will stay the longest. This algorithm requires future knowledge
and cannot be implemented in practice. However, it provides a good
baseline comparison for the other algorithms.
(cid:15)Longest-ﬁrst: This algorithm attempts to predict the future and
guess which nodes are stable by using the heuristic that if a host has
stayed in the system for a long time, it will continue to stay for a
long time. The intuition is that if the session duration distributions
are heavy-tailed, then this heuristic should be a reasonable predictor
for identifying the stable nodes.
(cid:15)Minimum depth: A host chooses the parent with the minimum
depth. If there is a tie, a random parent is selected from the ones
with the minimum depth. The intuition is that balanced shallow
trees minimize the number of affected descendants when an ances-
n
o
i
t
i
u
b
i
r
t
s
D
e
v
i
t
l
a
u
m
u
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 0
Oracle
Minimum depth
Random
Longest-first
n
o
i
t
 1
 0.95
 0.9
 0.85
 0.8
 0.75
 0.7
n
o
i
t
i
u
b
i
r
t
s
D
e
v
i
t
l
a
u
m
u
C
Oracle
Minimum depth
Random
Longest-first
 1
 10
 100
 1000
 10000
 100000
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 0
Oracle
Minimum depth
Random
Longest-first
 10
 20
 30
 40
 50
 60
 70
 80
 90
i
u
b
i
r
t
s
D
e
v
i
t
l
a
u
m
u
C
 30
 10
 5
Interval Between Ancestor Change (minutes)
 15
 20
 25
(a) CDF of interval between ancestor change.
(b) Number of descendants of a departing host.
Number of Descendents
Depth
(c) Tree depth.
Figure 10: Stability performance of largest event.
y
t
i
l
i
b
a
S
t
r
o
o
P
h
t
i
w
s
n
o
i
t
a
n
r
a
c
n
I
f
o
e
g
a
t
n
e
c
r
e
P
100
80
60
40
20
0
0
Oracle
Minimum Depth
Random
Longest-First
5
10
15
20
25
30
35
40
45
50
Stream
Figure 11: Stability performance for 50 large-scale streams.
tor higher up at the top of the tree leaves.
(cid:15)Random: A host chooses a random parent. This algorithm provide
a baseline for how a “stability-agnostic” algorithm would perform.
Intuitively, random should perform the worst compared to the above
algorithms.
We used the degree assignment from the previous section, with
a degree cap of 4 for audio streams and 20 for video streams, and
the distribution-based assignment for the hosts with unknown mea-
surements. Unless otherwise stated we use this same set up for all
subsequent simulations.
4.5 Results: Single-Tree Protocol
We simulated the performance of the 4 parent selection algo-
rithms for the largest event over the most dynamic 30-minute seg-
ment from 19:00-19:30. We did not use the sessions with NAT/ﬁrewall
timeout problems discussed in Section 2 in the simulations because
their 2-minute session durations are artiﬁcial. Each parent selection
algorithm is simulated 10 times, each time using a different random
seed.
The cumulative distribution (CDF) of the mean time interval
between ancestor change is depicted in Figure 10(a). The x-axis
is time in minutes. A larger interval is more desirable. Because
we are simulating a 30-minute trace, the maximum time interval is
30 minutes, if a host sees one ancestor change. Hosts that do not
see any ancestor changes have an inﬁnite interval. For presentation
purposes, we represent inﬁnity as 31 on the x-axis. The bottom
most line in the ﬁgure represents the CDF when using the oracle
algorithm. Roughly 10% of the incarnations saw only one ancestor
change in 30 minutes. Furthermore, 87% of incarnations did not
see any changes at all. In fact, there were only one or two events
that caused ancestor changes across all the runs.
It is surprising
that there is stability in the system during the busiest 30 minutes in
the trace. In addition, the overlay built by the oracle algorithm can
exploit that inherent stability.
The second-best algorithm is minimum depth. Over 90% of the
incarnations saw either no changes or 5 or more minutes between
changes. This should be tolerable to humans as they will see a glitch
every 5 minutes or so. The random algorithm and the longest-ﬁrst
algorithm performed poorly in this metric. For random, only 70%
of the incarnations saw no changes or 5 or more minutes between
changes. To our surprise, the longest-ﬁrst algorithm performed the
worst, with 50% of incarnations seeing decent performance. The
reason that it did not perform well stems from several factors. While
it correctly predicted stable nodes in 91% of the cases, it was wrong
for the remaining 9% as depicted in Figure 10(b). The number of
descendants of a departing host is on the x-axis, in log scale. The y-
axis is the cumulative percentage of departing hosts. If longest-ﬁrst
were always correct, it would overlap with the y-axis, like oracle
where almost all departing hosts had no descendants. One of the
difﬁculties in getting accurate predictions is that at the start of the
event, almost all hosts will appear to have been in the group for the
same amount of time making stable hosts indistinguishable from
dynamic hosts. Note that longest-ﬁrst is predicting correctly for
more cases than random and minimum depth, which had 72% and
82% of incarnations with no descendants when they left the system.
To explain the poor performance, we look at the second factor.
The second factor is that the consequence of its mistake is se-
vere as depicted in Figure 10(c). The x-axis is the average depth
of each node in the tree. The longest-ﬁrst algorithm has taller trees
than the random and minimum depth algorithms. Therefore, when it
guesses incorrectly, a large number of descendants are affected. We
examined the tail end of Figure 10(b) more closely and conﬁrmed
that this was the case.
One interesting observation is that the oracle algorithm builds
the tallest tree. The intuition here is that nodes that are stable will
cluster together and “stable” branches will emerge. More nodes
will cluster under these branches, making the tree taller. Although
the height does not affect the stability results in our simulations,
in practice a tall tree is more likely to suffer from problems with
network dynamics.
We ﬁnd that minimum depth is the most effective and robust
algorithm to enforce stability. Its property of minimizing damage
seems to be the key to its good performance. The fact that it does
not attempt to predict node stability makes it more robust to a vari-
ety of scenarios, as depicted in Figure 11. We ran the same set of
simulations using 4 parent selection algorithms for 50 of the large-
scale streams. These are the same streams as the ones presented in
Section 3, but with only half of the video streams present. Again,
we used the distribution-based assignment for hosts with unknown
y
t
i
l
i
b
a
S
t
r
o
o
P
h
t
i
w
s
n
o
i
t
a
n
r
a
c
n
I
f
t
o
e
g
a
n
e
c
r
e
P
5
4
3
2
1
0
Single Tree
Multiple Trees 4
Multiple Trees 8
Multiple Trees 16
0
5
10
15
20
25
30
35
40
45
50
Stream
Figure 12: Stability performance for multiple trees.
measurements, a degree cap of 20 for video streams, and a degree
cap of 4 for audio streams. The simulations were run over the most
dynamic 1-hour segments in each trace. We assume a conservative
cut-off for poor performance: an incarnation that sees an ancestor
change more frequently than once in 5 minutes is seeing poor per-
formance. The x-axis is the stream and the y-axis is the percentage
of incarnations that see poor stability performance in that stream.
Again, the oracle algorithm performed the best with most streams
having no incarnations with poor performance. Minimum depth
performed the second best with 45 out of the 50 streams having
20% or less incarnations with poor stability performance. Random
and longest-ﬁrst both performed poorly with 5-10 streams where
50% or more incarnations see poor performance.
While we present results based on 4 parent selection algorithms,
we also explored many design alternatives. For example, we looked
at prioritizing contributors and combining multiple algorithms. How-
ever, we do not present them in this paper due to space limitations.
We note that alternate algorithms did not perform as well as the ones
listed above. For example, when the parent selection algorithm pri-
oritized contributors such that they are higher up in the tree, the
performance was as poor as random. This is explained by the ob-
servation that there is no correlation between being a contributor
and being stable.
We also looked at the impact of resource on stability. In partic-
ular, we looked at whether there is more stability if there are more
high degree nodes (i.e., more resources). We ran simulations on the
audio streams with degree caps of 6 and 10, and found that there
was only a slight improvement compared to when the degree cap
was 4.