 **Marty Pitt** opened **SPR-9741** and commented
When specifying the name of a persistence unit to use for
LocalContainerEntityManagerFactoryBean (ie., assuming there are multiple
persistence units defined in persistence.xml), this name is now applied to the
persistence unit from scanned pacakges.
In 3.1.0, the name applied to the generated package was 'default'. However,
now, the name applied is the one defined in the entityManager configuration.
This results in an exception "Conflicting persistence unit definitions for
name 'xxx'".
This is a breaking change in behaviour from 3.1.0 to 3.1.2.
The change is caused by new setter behaviour introduced in
LocalContainerEntityManagerFactoryBean in 3.1.2, specifically this code:
{{  
`@Override`  
public void setPersistenceUnitName(String persistenceUnitName) {  
super.setPersistenceUnitName(persistenceUnitName);  
this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName);  
}  
}}
This changes the internal defaultPersistenceUnitName from `default`. Later,
when `DefaultPersistenceUnit.buildDefaultPersistenceUnitInfo()` is called, a
new persistence unit is generated using this name:
{{  
private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {  
SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo();  
scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName);  
scannedUnit.setExcludeUnlistedClasses(true);  
}}
This then results in an exception being thrown.
As an example, here's the defined `Persistence.xml`, which contains both a
prod config, and a test config:
{{
org.hibernate.ejb.HibernatePersistence  
}}
Then, the appropriate config is selected in the EntityManager configration:
{{  
aa.bb.cc  
}}
This causes the exception.
* * *
**Affects:** 3.1.2
**Reference URL:** http://stackoverflow.com/questions/12189921/conflicting-
persistence-unit-definitions-when-testing
**Referenced from:** commits `0cf4a26`, `f32e407`