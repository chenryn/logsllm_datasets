continue
if target >= nums[i]{
C = append(c, nums [i])
findcombinationSum2(nums, target-nums[i], i+l, C, res)
C = c[:1en(c)-1]
}
·BFS模板。（只是一个例子，不对应任何题）
func updateMatrix_BFS(matrix [][]int) [][]int {
---
## Page 22
res := make([][]int, 1en(matrix))
if len(matrix) == 0 11 1en(matrix[0]) == 0 {
return res
queue := make([][]int, 0)
for i, _ := range matrix {
res[i] = make([]int, len(matrix[o]))
for j， _ := range res[i] {
if matrix[i][j] == 0 {
res[i][]= -1
queue =append(queue,[]int{i，j})
2
level := 1
for len(queue)> 0{
size := len(queue)
for size > 0 {
size -= 1
[o]ananb =: apou
queue = queue[1:]
i, j := node[o], node[1]
for _, direction := range [][]int{{-1, 0}，{1, 0}， {0,1}， {0, -1}} {
x:= i + direction[0]
y := j + direction[1]
if x= len(matrix) 11 y = len(matrix[o]) 11 res[x]
[y]  0{
continue
res[x][y]= leve]
queue = append(queue,[]int{x,y})
leve1++
for i, row := range res {
for j, cell := range row {
if cell == -1 {
res[i][j] = 0
return res
Title
Solution
Difficulty
Time
Space
收
藏
17. Letter Combinations of a
Go
 Medium
O(1)
---
## Page 23
 Phone Number
(u Bol)o
22. Generate Parentheses
GQ
 Medium
O(log n)
O(1)
37. Sudoku Solver
Go
Hard
O(n^2)
O(n^2)
39. Combination Sum
Go
Medium
O(n log n)
(u)o
40. Combination Sum II
GQ
 Medium
O(n log n)
(u)o
46. Permutations
GQ
 Medium
O(n)
(u)o
47. Permutations II
Go
 Medium
O(n^2)
O(n)
51. N-Queens
Go
pJeH
O(n^2)
(u)o
52. N-Queens II
Go
pJeH
(Zvu)o
(u)o
60. Permutation Sequence
Go
 Medium
O(n log n)
O(1)
77. Combinations
GQ
 Medium
O(n)
(u)o
78. Subsets
Go
Medium
O(n^2)
(u)o
79. Word Search
Go
Medium
O(n^2)
O(n^2)
89. Gray Codes
Go
Medium
(u)o
O(1)
90. Subsets II
Go
 Medium
O(n^2)
O(n)
93. Restore IP Addresses
Go
 Medium
(u)o
O(n)
126. Word Ladder II
Go
pJeH
(u)o
(Zvu)o
131. Palindrome Partitioning
GQ
 Medium
(u)o
O(n^2)
211. Add and Search Word - Data
structure design
Go
Medium
O(n)
(u)o
212. Word Search Il
Go
Hard
O(n^2)
(Zvu)o
?
216. Combination Sum II
GQ
 Medium
(u)o
O(1)
306. Additive Number
GQ
 Medium
O(n^2)
O(1)
357. Count Numbers with
Unique Digits
Go
Medium
O(1)
O(1)
401. Binary Watch
Go
Easy
O(1)
O(1)
526. Beautiful Arrangement
GQ
 Medium
(Zvu)o
O(1)
784. Letter Case Permutation
Go
Easy
O(n)
(u)o
842. Split Array into Fibonacci
Sequence
Go
 Medium
O(n^2)
O(1)
980. Unique Paths IlI
Go
pJeH
O(n log n)
(u)o
---
## Page 24
996. Number of Squareful Arrays
Go
Hard
(u Soj u)o
(u)o
1079. Letter Tile Possibilities
Go
 Medium
(Zvu)o
O(1)
BinaryIndexedTree
leetCode
★
口
 Binary Indexed Tree
ved 5/ 6 proti
 tags
Tilte
218
The Skyine Prc
32.5%
Had
307
Range Sum Query - Mutsble
30.4%
Medlim
308
Renge Sum Query 2D  Muts
33.1%
315
Count of Si
39.4%
327
33.7%
23.7%
Haes
BinarySearch
·二分搜索的经典写法。需要注意的三点：
1.循环退出条件，注意是low>1
3. low 和 high 的更新。low = mid + 1,high = mid - 1。
func binarySearchmatrix(nums []int, target int) int {
1ow, high := 0, 1en(nums)-1
for low >1
if nums[mid] == target {
return mid
}else if nums[mid]> target {
high = mid - 1
}else{
1ow = mid + 1
---
## Page 25
return -1
·二分搜索的变种写法。有4个基本变种：
1.查找第一个与target相等的元素，时间复杂度O（logn）
2.查找最后一个与target相等的元素，时间复杂度O（logn）
3.查找第一个大于等于target的元素，时间复杂度O（logn)
4.查找最后一个小于等于target的元素，时间复杂度O（logn)
//二分查找第一个与target相等的元素，时间复杂度o（logn）
func searchFirstEqualelement(nums []int, target int) int {
1ow, high := 0, 1en(nums)-1
for low > 1)
if nums[mid]> target {
high = mid - 1
}else if nums [mid]> 1)
if nums[mid]> target {
high = mid - 1
}else if nums[mid] > 1)
if nums[mid]  >= target {
if（mid==0）11（nums[mid-1]> 1)
if nums[mid]
分
target {
if (mid
1en（nums）-1）11（nums[mid+1]>target）{//找到最后—个小于等于
target的元素
return mid
1ow = mid + 1
}else{
high = mid - 1
}
return -1
·在基本有序的数组中用二分搜索。经典解法可以解，变种写法也可以写，常见的题型，在山峰数组
中找山峰，在旋转有序数组中找分界点。第33题，第81题，第153题，第154题，第162题，
第852题
---
## Page 27
func peakIndexInMountainArray(A []int) int {
1ow, high := 0, 1en(A) -1
for low >1
//如果mid较大，则左侧存在峰值，high=m，如果mid+1较大，则右侧存在峰值，1ow
mid + 1
if A[mid]  > A[mid+1] {
high = mid
}else{
1ow = mid + 1
}
return low
·max-min最大值最小化问题。求在最小满足条件的情况下的最大值。第410题，第875题，第
1011题，第1283题。
---
## Page 28
Title
Solution
Difficulty
Time
Space
收
藏
50. Pow(x, n)
Go
 Medium
O(log n)
O(1)
69. Sqrt(x)
Go
Easy
O(log n)
O(1)
167. Two Sum Il - Input
Go
Easy
array is sorted
O(n)
O(1)
209. Minimum Size
Go
 Medium
O(n)
 Subarray Sum
O(1)
222. Count Complete Tree
GQ
 Medium
O(n)
O(1)