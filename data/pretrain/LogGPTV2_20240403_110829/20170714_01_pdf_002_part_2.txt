# Hash Join Behavior Modes and Memory Management in PostgreSQL

## Hash Join Behavior Modes
PostgreSQL's hash join can operate in several modes based on the planner's and executor's expectations regarding memory usage:

- **Optimal**: The planner expects the hash table to fit in memory, and the executor confirms this.
- **Good**: The planner anticipates that multiple batches (N > 1) will allow each batch to fit within `work_mem`, and the executor verifies this.
- **Bad**: Similar to "optimal" or "good", but the executor finds it necessary to increase the number of partitions, spilling some tuples to disk, and possibly rewriting outer tuples.
- **Ugly**: As in "bad", but the executor discovers that data skew is so severe that increasing the number of batches won't help. It stops respecting `work_mem` and hopes for the best.

### Example Queries and Execution Plans

#### Optimal Mode
```sql
SET work_mem = '64MB';
SELECT COUNT(*) FROM simple r JOIN simple s USING (id);
```
**Execution Plan:**
```plaintext
Aggregate (cost=65418.00..65418.01 rows=1 width=8) (actual time=1496.156..1496.156 rows=1 loops=1)
-> Hash Join (cost=30834.00..62918.00 rows=1000000 width=0) (actual time=603.086..1369.185 rows=1000000 loops=1)
  Hash Cond: (r.id = s.id)
  -> Seq Scan on simple r (cost=0.00..18334.00 rows=1000000 width=4) (actual time=0.019..161.704 rows=1000000 loops=1)
  -> Hash (cost=18334.00..18334.00 rows=1000000 width=4) (actual time=598.441..598.441 rows=1000000 loops=1)
    Buckets: 1048576 Batches: 1 Memory Usage: 43349kB
    -> Seq Scan on simple s (cost=0.00..18334.00 rows=1000000 width=4) (actual time=0.033..250.199 rows=1000000 loops=1)
```

#### Good Mode
```sql
SET work_mem = '1MB';
SELECT COUNT(*) FROM simple r JOIN simple s USING (id);
```
**Execution Plan:**
```plaintext
Aggregate (cost=81046.00..81046.01 rows=1 width=8) (actual time=1985.022..1985.022 rows=1 loops=1)
-> Hash Join (cost=34741.00..78546.00 rows=1000000 width=0) (actual time=556.620..1851.942 rows=1000000 loops=1)
  Hash Cond: (r.id = s.id)
  -> Seq Scan on simple r (cost=0.00..18334.00 rows=1000000 width=4) (actual time=0.039..253.158 rows=1000000 loops=1)
  -> Hash (cost=18334.00..18334.00 rows=1000000 width=4) (actual time=555.067..555.067 rows=1000000 loops=1)
    Buckets: 32768 Batches: 64 Memory Usage: 808kB
    -> Seq Scan on simple s (cost=0.00..18334.00 rows=1000000 width=4) (actual time=0.007..254.166 rows=1000000 loops=1)
```

#### Bad Mode
```sql
SET work_mem = '1MB';
SELECT COUNT(*) FROM simple r JOIN bigger_than_it_looks s USING (id);
```
**Execution Plan:**
```plaintext
Aggregate (cost=30453.00..30453.01 rows=1 width=8) (actual time=2191.448..2191.449 rows=1 loops=1)
-> Hash Join (cost=8356.50..30450.50 rows=1000 width=0) (actual time=644.671..2065.686 rows=1000000 loops=1)
  Hash Cond: (r.id = s.id)
  -> Seq Scan on simple r (cost=0.00..18334.00 rows=1000000 width=4) (actual time=0.025..192.848 rows=1000000 loops=1)
  -> Hash (cost=8344.00..8344.00 rows=1000 width=4) (actual time=643.542..643.542 rows=1000000 loops=1)
    Buckets: 32768 (originally 1024) Batches: 64 (originally 1) Memory Usage: 808kB
    -> Seq Scan on bigger_than_it_looks s (cost=0.00..8344.00 rows=1000 width=4) (actual time=0.022..331.981 rows=1000000 loops=1)
```

#### Ugly Mode
```sql
SET work_mem = '1MB';
SELECT COUNT(*) FROM simple r JOIN awkwardly_skewed s USING (id);
```
**Execution Plan:**
```plaintext
Aggregate (cost=30453.00..30453.01 rows=1 width=8) (actual time=1687.089..1687.090 rows=1 loops=1)
-> Hash Join (cost=8356.50..30450.50 rows=1000 width=0) (actual time=1047.639..1571.196 rows=1000000 loops=1)
  Hash Cond: (r.id = s.id)
  -> Seq Scan on simple r (cost=0.00..18334.00 rows=1000000 width=4) (actual time=0.018..171.964 rows=1000000 loops=1)
  -> Hash (cost=8344.00..8344.00 rows=1000 width=4) (actual time=625.913..625.913 rows=1000000 loops=1)
    Buckets: 32768 (originally 1024) Batches: 2 (originally 1) Memory Usage: 35140kB
    -> Seq Scan on awkwardly_skewed s (cost=0.00..8344.00 rows=1000 width=4) (actual time=0.019..330.268 rows=1000000 loops=1)
```

## Parallel Query and Hash Joins

### Parallel Query Recap
- **Partial Plans**: These are plans that can be executed in parallel by multiple workers, each generating a fraction of the total results.
- **Parallel Sequential Scan and Index Scan**: Nodes emit tuples to the nodes above them using page granularity.
- **Gather and Gather Merge Nodes**: These nodes terminate parallelism and collect results from worker processes.

### Parallel-Oblivious Hash Joins in PostgreSQL 9.6 & 10
- **Hash Join Node in Partial Plan**: A hash join node can appear in a partial plan.
- **Not Parallel-Aware**: The hash join does not perform any special actions to support parallelism. If its outer plan is partial, its output will also be partial.
- **Problems**:
  - **Inner Plan Execution**: The inner plan is run in every process, and a copy of the hash table is built in each.
  - **Multiple Hash Tables**: Multiple hash tables with their own 'matched' flags prevent full or right outer joins from being parallelized.
  - **Amdahl’s Law**: Parallelizing the probe phase but not the build phase can lead to contention and increased memory usage.

### Approaches to Improve Parallel Hash Joins
- **Partition-wise Join (in development)**: Works with parallel-oblivious join operators but requires suitable partitions.
- **Dynamic Repartitioning**: Various strategies exist, such as the "radix join" algorithm, which minimizes cache misses during probing.
- **Shared Hash Table (proposed)**: Tuples and the hash table are stored in memory using a new 'DSA' allocator with special relative pointers.
  - **Insertion into Buckets**: Uses compare-and-swap.
  - **Barrier IPC Mechanism**: Ensures synchronization at key points.
  - **Shared Infrastructure**: Requires shared memory allocator, temporary files, tuplestores, and condition variables.

### Example Query with Shared Hash Table
```sql
SELECT COUNT(*)
FROM simple r
JOIN simple s USING (id)
JOIN simple t USING (id)
JOIN simple u USING (id);
```
**Execution Plan:**
```plaintext
Finalize Aggregate (cost=1228093.57..1228093.58 rows=1 width=8) (actual time=24324.455..24324.456 rows=1 loops=1)
-> Gather (cost=1228093.15..1228093.56 rows=4 width=8) (actual time=24010.300..24324.433 rows=5 loops=1)
  Workers Planned: 4
  Workers Launched: 4
  -> Partial Aggregate (cost=1227093.15..1227093.16 rows=1 width=8) (actual time=24004.404..24004.405 rows=1 loops=5)
  -> Hash Join (cost=925007.40..1220843.10 rows=2500020 width=0) (actual time=19254.859..23819.648 rows=2000000 loops=5)
    Hash Cond: (r.id = u.id)
    -> Hash Join (cost=616671.60..850006.80 rows=2500020 width=12) (actual time=12700.426..15914.957 rows=2000000 loops=5)
      Hash Cond: (r.id = t.id)
      -> Hash Join (cost=308335.80..479170.50 rows=2500020 width=8) (actual time=6255.527..8065.931 rows=2000000 loops=5)
        Hash Cond: (r.id = s.id)
        -> Parallel Seq Scan on simple r (cost=0.00..108334.20 rows=2500020 width=4) (actual time=0.010..358.957 rows=2000000 loops=5)
        -> Hash (cost=183334.80..183334.80 rows=10000080 width=4) (actual time=6188.294..6188.294 rows=10000000 loops=5)
          Buckets: 16777216 Batches: 1 Memory Usage: 482635kB
          -> Seq Scan on simple s (cost=0.00..183334.80 rows=10000080 width=4) (actual time=0.062..2401.128 rows=10000000 loops=5)
        -> Hash (cost=183334.80..183334.80 rows=10000080 width=4) (actual time=6376.765..6376.765 rows=10000000 loops=5)
          Buckets: 16777216 Batches: 1 Memory Usage: 482635kB
          -> Seq Scan on simple t (cost=0.00..183334.80 rows=10000080 width=4) (actual time=0.051..2484.348 rows=10000000 loops=5)
        -> Hash (cost=183334.80..183334.80 rows=10000080 width=4) (actual time=6478.513..6478.513 rows=10000000 loops=5)
          Buckets: 16777216 Batches: 1 Memory Usage: 482635kB
          -> Seq Scan on simple u (cost=0.00..183334.80 rows=10000080 width=4) (actual time=0.116..2546.278 rows=10000000 loops=5)
Total memory usage = ~500MB * 3 * 5 = ~7.5GB
```

### References
1. **Design and Evaluation of Main Memory Hash Join Algorithms for Multi-core CPUs, 2011**
2. **Andy Pavlo’s CMU 15-721 2017 lecture “Parallel Join Algorithms (Hashing)”**, available on YouTube + slides
3. **Main-Memory Hash Joins on Multi-Core CPUs: Tuning to the Underlying Hardware, 2013**

This document provides a comprehensive overview of hash join behavior modes, memory management, and parallel query execution in PostgreSQL, along with example queries and execution plans.