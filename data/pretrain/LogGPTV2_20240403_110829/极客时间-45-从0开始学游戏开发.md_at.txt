# 第33讲 \| 如何判断心跳包是否离线？在初学网络，编写过阻塞和非阻塞网络代码的时候，有一个问题，那就是在非阻塞的情况下，不知道对方的网络何时断开。因为在非阻塞的情况下，如果没有接收到消息，recv 的数值一直会是0。如果以这个来判断，显然是错误的。而在阻塞情况下，只要对方一断开，接收到0就说明断开了，那么我们怎么才能在非阻塞的情况下确定连接是断开还是没断开呢？我们可以采用离线超时的方案来判断对方连接是否断开。那什么是离线超时呢？我们都知道，人累了就要休息。你在休息的时候，有没有注意过这么一个现象，那就是你在快要睡着的时候，忽然脚会蹬一下，或者人会抽一下，这是为什么呢？有一种说``{=html}法流传很广，说，其实大脑是在不停地检测人有没有"死"，所以发送神经信号给手和腿。抽动一下，检验其是否死亡。这个就有点儿像我们检测超时，看看有没有反应。现在我们先看一段 Python 代码，让它运行起来。    import socketimport time def server_run():   clients = []   my_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   my_server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)   my_server.bind(("", 1024))   my_server.listen(256)   my_server.setblocking(False)   这是我节选的一部分代码。其中，在函数 server_run 里面，我们先定义了一个clients，这是一个列表，用于后面保存客户端连接用。my_server 获得 socket句柄，并且将之设置为 TCP 模式，随后我们绑定地址为本地（bind函数），端口号为 1024，并且开始侦听，随后我们看到 setblocking函数，将之设置为非阻塞模式。    while True:      time.sleep(1)      try:         client, addr = my_server.accept()         print client         client.setblocking(False)         clients.append(client)      except Exception as e:         print "no client incoming"      for cli in clients:         try:            data = cli.recv(1024)            if data:               print data            else:               cli.close()               clients.remove(cli )          except Exception as e:            print "no data from ", cli   my_server.close()在一个大循环内，我们做了如下几件事情：第一个是accept，只要有客户端进来，我们就accept，如果没有客户端进来，一直等待状态下，就打印 no client incoming字符串，如果有客户端进入的话，就直接将新客户端放入列表。我们在启动函数的时候，如果没有客户端连接，就会出现这样的字样：![](Images/10c663961c40fd449d14fcd6e0901d91.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/9d/3d/9df126ec003127e7ad5fe925582a723d.jpg"}然后我们使用 Windows 下的 telnet 命令来模拟客户端。输入 telnet 127.0.0.11024，服务器端代码会出现这样的字符串：![](Images/41e43d26a194a3f5b02406f5a4ab9038.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/a1/14/a1a5eddfe1ace92e019bac5ee7c21a14.jpg"}我们打印新的客户端连接的对象地址，并且将新的客户端连接句柄放入列表里面。随后，循环进入到了取出新客户端列表，并且做出判断，每次接收1024 字节。如果没有，则显示 no data from \；如果有，那就显示输入的字符串。好了，现在我们打开 Windows 任务管理器，找到拥有 telnet的程序，并且"杀死"它。![](Images/fd9bcd835941be735df7c898cbc1449b.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/2f/f0/2f204df6e383580c6e746ad4e7d3f8f0.jpg"}随后，我们会发现，命令行提示符出现了如下内容的字符串：![](Images/29b8e432d8e6b45389370b73f1873488.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/07/11/0701de317820ee8406bac409a82c9611.jpg"}按照道理，服务器不是应该断开连接了吗？它应该能知道客户端断开了不是吗？错，服务器端根本不知道对方已经被"杀死"了，所以它的状态仍然在接收中。由于是TCP 握手，除非你正常将 telnet程序关闭，才会让服务器端正常接收到客户端关闭的消息，否则，你永远不知道对方已经退出连接了。所以**心跳包的作用**就在这里，心跳包**允许你每隔多少毫秒发送数据给服务器端，告诉服务器我还活着，否则服务器就当它已经死了，确认超时，并且退出**。事实上，在 TCP/IP 的协议层中，本身是存在心跳包的设计的，就是 TCP协议中的 SO_KEEPALIVE。系统默认是设置 2 小时的心跳频率。需要用 setsockopt 选项将SOL_SOCKET.SO_KEEPALIVE 设置为 1，打开，并且可以设置三个参数tcp_keepalive_time，tcp_keepalive_probes，tcp_keepalive_intvl，分别表示连接闲置多久开始发keepalive 的 ACK 包、发几个 ACK 包不回复就当连接端"死"了。这种心跳检测包是属于 TCP协议底层的检测机制，上层软件只是解析显示网口的有用数据包，收到心跳包报文属于TCP协议层的数据，一般软件不会将它直接在应用层显示出来，所以用户是看不到的。以太网中的心跳包可以通过以太网抓包软件分析TCP/IP 协议层的数据流看到。报文名称是 TCP Keep-Alive。当然，我们也可以做应用层的心跳包检测，我们在编写游戏服务器的时候，就可以自定义心跳服务，TCP层的心跳服务是为了保持存活的，但是应用层的心跳，则是拥有更明确或者其他的目的（比如对方是否还活着）。我们专门独立一台服务器做心跳服务器，连接客户端和真正的游戏逻辑服务器，那么我们希望逻辑服务器的同步率和心跳服务器统一，也就是说，**心跳服务器负责的就是发送心跳包和客户端数据给逻辑服务器**，逻辑服务器每一次获取数据，也是从心跳服务器获得的，那么心跳服务器能做的事情就会变得很多。为了调试方便，我们可以利用心跳服务器，将客户端传送过去的数据包存储在本地磁盘上。如果应用或者游戏在测试的时候，就可以看到那些发送的内容，甚至可以回滚任意时段的数据内容，这样调试起来就相对方便，而不需要客户端大费周章地不停演练重现出现的错误。代码看起来是这样：     def SendToServer(is_save = 0):      package = socket.recv(recv_len)      ticktock()      if is_save:          SaveToDisk(package)      server_socket.send(package)在逻辑服务器内部，每一次接收数据，都根据心跳服务包的心跳来接收，这样做的好处就是，可以随时调整心跳的频率，而不需要调整逻辑服务器的代码。在应用层的心跳模式下，我们会有两种策略需要进行选择。我们假定把逻辑运算设为 A，心跳时间（比如代码的 Sleep 或者挂起）设为 B。第一种是运算时间 A 和心跳时间 B 相对固定。也就是说，不管 A 运算多久，B一定是固定挂起多久。第二种策略是运算时间 A 和心跳时间 B 是实时调整。A运算时间长，挂起时间就短，如果 A 运算时间加上 B挂起时间超过约定心跳总时间，那 B 就不挂起，直接进行另一个 A运算。这两种策略究竟哪种好呢？在 CPU 负载并不是那么严重的情况下，策略二是比较好的选择。假设心跳 Sleep 时间是 1000ms，运行时间规定为2000ms。如果运行时间小于等于 2000ms 的话，Sleep时间不变；如果运行时间超过 2000ms 的话，那么 Sleep 时间就等于 Sleep时间 - (运行时间 - 2000ms)。这样一来，平均心跳有了保障，但是在运算量加大的时候，Sleep时间已经完全被运行时间所占据，那么心跳 Sleep时间就会减少到最少甚至不存在，CPU的负载就会变得很高，这种时候就需要用到策略一。你可以这么理解。策略一是说，不管我们的运行时间多久，Sleep时间始终是一致的1000ms，这种方式保证了服务器一定会进行心跳，而不会导致负载过高等情况。当然这只是一种简单的模型，在进行大规模运算，或者有多台服务器的时候，我们可以将两种方式合并起来进行策略交互。任务不繁重的时候采用策略二，当服务器发现任务一直很多且超过Sleep 时间几次，就切换到策略一，这样可以保证心跳时间基本一致。我们可以将心跳服务和逻辑服务分开运行，而是否放在同一台物理机并不是首要的问题，这样心跳服务器只提供心跳包，而逻辑服务通过心跳包自动判断并且调整运行频率。
## 小结好了，我给今天的内容做一个总结。-   判断非阻塞模型的网络是否断开，可以使用心跳包和计算超时的方式进行断开操作，比如    30 秒没收到心跳包，则可以强制关闭 Socket 句柄断开。-   心跳包是一种服务器之间交互的方法，也可以用作服务器数据调试和回滚的策略方案。心跳包有两种策略，第一种就是运算时间    A 和心跳时间 B 相对固定，第二种策略是运算时间 A 和心跳时间 B    是实时调整。CPU 的负载很高的时候用策略一，CPU    负载并不是那么严重的情况下，策略二是比较好的选择。最后，给你留一个思考题吧。如果编写的是阻塞方式的服务器代码，心跳包还有存在的意义吗？欢迎留言说出你的看法。我在下一节的挑战中等你！![](Images/687aa95b3803eb0079b384dbad39d165.png){savepage-src="https://static001.geekbang.org/resource/image/1d/cf/1dddc22b262072c5c2e8b4937907f7cf.jpg"}
# 第35讲 \| 如何用网关服务器进行负载均衡？我们费劲心思做了一款游戏，那肯定希望有很多人来玩。一旦玩家数量开始多起来，服务器需要承担的压力就会变大，我们就需要做负载均衡了。所谓的负载均衡，就是对外有一个公共地址，在请求过来的时候，通过轮询、随机分配等方式，定点到不同的服务器，以分摊服务器的压力。
## 两种常用的负载均衡技术常用的负载均衡技术有**软件模式**和**硬件模式。**其中，硬件模式用得比较多的是 F5。F5 是 F5 Networks公司提供的一个负载均衡器专用设备， F5 BIG-IP LTM的官方名称叫本地流量管理器，可以做 4～7层负载均衡，具有负载均衡、应用交换、会话交换、状态监控等等全备的强大网络功能。F5 硬件负载均衡的优点是，负载均衡能直接通过智能交换机实现,处理能力更强，与操作系统无关，负载性能强，适用于一大堆设备、大访问量，其缺点也是很明显的，那就是购买成本高，设备的配置冗余，有些用不上的都给默认配置了。另外，由于设备只有单个，所以单个负载均衡配置无法有效掌握所有服务器及应用状态。硬件的负载均衡，是从网络层来判断负载规则，所以有时候软件的系统处理能力出现问题，网络硬件还可以作出负载的动作。软件模式的话，比较常用的软件的有 LVS、Nginx、HAProxy。``{=html}LVS 是四层负载均衡，根据目标地址和端口选择内部服务器。Nginx这种负载均衡工具是七层负载均衡。而 HAProxy同时支持四层、七层负载均衡，还可以根据报文内容选择内部服务器。因此，LVS 分发路径优于 Nginx 和 HAProxy，性能上也要高些。但 Nginx 和HAProxy则更具配置性，比如说可以用来做动静分离。所谓动静分离，就是根据请求协议的特征，去选择静态资源服务器还是应用服务器。很久以前，游戏服务器只是简单的对应客户端的服务，就像使用编程语言写了一个多线程的程序，每个线程接收一个客户端，然后把该存储的数据放到数据库去保存。到了后期，大量的网游开始兴起，玩的人越来越多，所以一些老式游戏服务器框架已经无法满足更大更现代化的网络游戏的需求了。到了 2005年左右，这种情况愈演愈烈，不改变现状不行了。于是，程序员和游戏开发厂商设计出了新的一种服务器的框架模型。这种模型几乎是延用到今天，这种模型甚至延伸到各行各业的服务框架。我们甚至可以说 Nginx反向代理的想法也是类似这种模型的一种表现形式。尽管我们不能说 Nginx学的就是这种模型，但是与这种反向代理的模型的做法实在太类似了。这种服务器模型的最大改变，就是加了一个gateway，可以称作网关。这当然不是传统意义上的网关路由器，只是在服务器的应用层面，做的事情类似网关路由器，所以我们仍然把它称为网关。我们可以在 Web 端称它为**会话**（**Session**），也可以称它为**LinkServer**，总之道理是一样的。这个网关服务器所做的工作可以分为两种，对应网关服务器实现不同功能的服务。每一种功能不同，后台逻辑服务器的传输数据内容也会不同，不能相互混合使用。
## 网关服务器有哪些功能？
### 1. 中转功能网关服务器作为一种代理，所有玩家从客户端传输到真正的游戏逻辑服务器的内容，都需要通过网关服务器，用该服务器作为中转。也就是说，假设有A 客户端到 B 服务器，网关为 G 的话，就是 A 到 G 到 B，然后 B服务器完成逻辑计算后，返回给 G 网关，网关再一次返回给 A、B 到 G 到 A。这样做的好处是，网关可以随时询问它底下的真实逻辑服务器到底哪一台趋于饱和，可以将玩家移动到不饱和的游戏服务器，但是缺点也是很明显的，那就是玩家和服务器之间隔了一层网关，需要消耗更长的时间，传输速率相对低。
### 2. 负载均衡网关服务器作为查询网关，也就是说，网关服务器会和底下所有服务器做一个长连接，或者随时询问的连接，这个连接所询问的内容，可以放到一个缓存里面，所查询的内容就是它底下所有服务器哪一台有空，在这种功能模式下，网关服务器只做了负载均衡的工作。那么当客户端 A 要连接到游戏服务器的时候，需要先询问网关服务器G，模型看起来会是这样：A- 询问 G，G 通过查询缓存表，告知 A 客户端，C 服务器有空，于是通知A，你去连 C 服务器，IP 地址和端口号是多少多少，于是 A 从网关 G关闭连接，去连接 C服务器。如果连接失败（因为是缓存查询，从逻辑上讲有可能滞后），那么再次询问网关，直到成功连接某一台服务器为止。这个模型，网关服务器只做了负载均衡的动作，客户端和网关之间不会保持一个长连接，在这个基础上，一台网关服务器支撑同时七千人以上都不是什么太大的问题。但是它的缺点也很明显，那就是一台游戏逻辑服务器只能负责一个游戏世界，不能进行分块。如果要进行分块，则需要其他模型的服务器模块，这个我一会儿会说。Nginx的反向代理也是类似这种负载均衡的网关模型，这种模型大量运用在很多应用服务器、HTTP连接的网络服务器上。但是，这项技术到了上升时期开始遇到了瓶颈，人们发现就算加上网关，也无法负担体量更大的游戏地图。于是，我们需要对这样的模型进行修改。