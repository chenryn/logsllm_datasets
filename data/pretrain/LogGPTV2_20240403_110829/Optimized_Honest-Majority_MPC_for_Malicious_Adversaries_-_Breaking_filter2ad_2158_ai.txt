minimal size cannot lose balls when modifying (cid:2)B to obtain (cid:2)B(cid:2).
This concludes the proof of the theorem.
We conclude that taking different-sized buckets does not
improve security (except possibly for the case when exactly
two sizes B and B + 1 are used). We will use this conclusion
in the next section.
B. Moderately Lowering the Cheating Probability
The discrete cut-and-choose problem. Typically, when
setting the parameters of a protocol that has statistical error
(like in cut and choose), there is a targeted “allowed” cheating
probability which determines a range of values that guarantee
the security bound. The parameters are then chosen to achieve
the best efﬁciency possibly within the given range. For ex-
ample, in a cut-and-choose setting modeled with balls and
buckets, the size of the buckets B may be incremented until
the security bound is met. However, this strategy can actually
be very wasteful. In order to understand why, assume that
−40 and assume that for the
the required security bound is 2
required number of buckets, the bound obtained when setting
−39. Since this is above the allowed bound, it
B = 3 is 2
is necessary to increase the bucket size to B = 4. This has
the effect of increasing the protocol complexity signiﬁcantly
while reducing the security bound to way below what
is
required. To be concrete, we have proven that the error bound
860
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:59 UTC from IEEE Xplore.  Restrictions apply. 
1 , . . . , Bk
Formally, let (cid:2)Bk = {Bk
i = B for i ≤ k and Bk
for the protocol version in Section III-A in 1/N B−1 (see
−40 and wish to
Theorem 3.4). If we require a bound of 2
carry out N = 219 ≈ 500, 000 executions, then with B = 3
−38. By increasing
we achieve a cheating probability of only 2
−57 which is
the bucket size to B = 4 we obtain a bound of 2
overkill with respect to the desired bound. It would therefore
be desirable to have a method that enables us to trade-off the
protocol complexity and cheating probability in a more ﬁne-
grained manner.
A solution.
In this section, we propose a partial solution to
this problem; our solution is only partial since it is not as ﬁne-
grained as we would like. Nevertheless, we view this as a ﬁrst
step to achieving better solutions to the problem. The solution
that we propose in this section is to increment the size of only
some of the buckets by 1 (instead of all of them), resulting in
a game where there are buckets of two sizes, B and B + 1.
We use the analysis of the previous section to show that this
gradually reduces to the error probability, as desired.
N} be a multiset of bucket
sizes such that Bk
i = B + 1 for
i > k. In the next lemma, we show that the probability that
the adversary wins in the combinatorial game when choosing
the bucket sizes in this way is a multiplicative factor of p = k
N
lower than when all buckets are of size B. Thus, in order to
reduce the probability by 1/2, it sufﬁces to take k = N/2 and
increase half the buckets to size B + 1 instead of all of them.
In the concrete example above, with N = 219 it is possible to
−40 by increasing half of the buckets to
reduce the bound to 2
size B = 4 instead of all of them, achieving a saving of 218
balls. This therefore achieves the desired goal. We now prove
the lemma.
Lemma 5.7: Let k, N ∈ N such that k < N and let p = k
N .
For every bucket-size B, let (cid:2)Bk be the multiset of bucket
sizes deﬁned as above. Then, for every adversary Ak in Game4
where (cid:2)Bk is used, there exists an adversary A in Game4 where
all buckets are of size B such that
Pr[Game4(Ak, N, (cid:2)Bk, C) = 1] ≤ p · Pr[Game4(A, N, B, C) = 1].
Proof: In the version of Game4 with bucket sizes (cid:2)Bk,
the minimal bucket size is B. Thus using Theorem 5.3, an
adversary who chooses B bad balls will maximize its winning
probability in both games. Thus, it is sufﬁcient to prove that
Pr[Game4(Ak
B, N, (cid:2)Bk, C) = 1]
≤ p · Pr[Game4(AB, N, B, C) = 1]
(10)
where AB and Ak
B are adversaries who choose B bad balls
in their games. This is sufﬁcient since if Eq. (10) holds then
for every Ak, we can take the adversary AB as the adversary
for which the lemma holds.
Since there are exactly k buckets of size B, we have that
n(B) = k in this game. Furthermore, the number of balls
is exactly Bk + (B + 1)(N − k) + C. Thus, by
overall
(cid:3)
Lemma 5.2, it holds that
Pr[Game4(Ak
B, N, (cid:2)Bk, C) = 1] =
Bk+(B+1)(N−k)+C
k
(cid:2)
(cid:2)
B
p · N
BN +(N−k)+C
(cid:3) .
=
Similarly, from Lemma 5.2, it follows that
B
861
Pr[Game4(AB, N, B, C) = 1] =
N(cid:2)
BN +C
(cid:3)
B
since there are N buckets of size B in this game. Thus,
Eq. (10) follows if
(cid:2)
BN +(N−k)+C
p · N
B
BN +C
(cid:2)
(cid:3)
(cid:3) ≤ p · N(cid:2)
(cid:3) ≤(cid:2)
B
BN +C
BN +(N−k)+C
(cid:3)
.
B
B
and this holds since
Improving the bound. Observe that the adversary’s winning
probability decreases multiplicatively by k/N when N − k
balls are added. Thus, in order to reduce the probability by
1/2 we must add N − N/2 = N/2 balls, and in order to
reduce the probability by 1/4 we must add 3N/4 balls. In
−ζ we must
general, in order to reduce the probability by 2
add N − N/2ζ balls. An important question that is open is
whether or not it is possible to reduce the probability while
adding fewer balls.
ACKNOWLEDGEMENTS
The authors at Bar-Ilan University were supported in part by
the European Research Council under the ERC consolidators
grant agreement n. 615172 (HIPS) and by the BIU Center
for Research in Applied Cryptography and Cyber Security in
conjunction with the Israel National Cyber Bureau in the Prime
Minister’s Ofﬁce.
REFERENCES
[1] T. Araki, J. Furukawa, Y. Lindell, A. Nof and K. Ohara. High-
Throughput Semi-Honest Secure Three-Party Computation with an
Honest Majority. In the 23rd ACM CCS, pages 805–817, 2016.
[2] D. Beaver. Efﬁcient Multiparty Protocols Using Circuit Randomization.
In CRYPTO 1991, Springer (LNCS 576), pages 420–432, 1992.
[3] D. Beaver, S. Micali, and P. Rogaway. The round complexity of secure
protocols. In the 22nd STOC, pages 503–513, 1990.
[4] M. Bellare, V.T. Hoang, S. Keelveedhi, and P. Rogaway. Efﬁcient
garbling from a ﬁxed-key blockcipher. In IEEE Security and Privacy,
pages 478–492, 2013.
[5] M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theorems
for noncryptographic fault-tolerant distributed computations. In the 20th
STOC, pages 1–10, 1988.
[6] S.S. Burra, E. Larraia, J.B. Nielsen, P.S. Nordholt, C. Orlandi, E. Orsini,
P. Scholl, and N.P. Smart. High Performance Multi-Party Computation
for Binary Circuits Based on Oblivious Transfer. ePrint Cryptology
Archive, 2015/472.
[7] D. Chaum, C. Cr´epeau and I. Damg˚ard. Multi-party Unconditionally
Secure Protocols. In 20th STOC, pages 11–19, 1988.
[8] I. Damg˚ard, M. Geisler, M. Krøigaard and J.B.Nielsen. Asynchronous
Multiparty Computation: Theory and Implementation. In Public Key
Cryptography 2009, Springer (LNCS 5443), pages 160–179, 2009.
[9] I. Damg˚ard, V. Pastro, N.P. Smart and S. Zakarias. Multiparty Com-
putation from Somewhat Homomorphic Encryption. In CRYPTO 2012,
pages 643–662, 2012.
[10] R.A. Fisher and F. Yates. Statistical Tables for Biological, Agricultural
and Medical Research (3rd ed.). Oliver & Boyd. pages 26-27, 1938.
[11] J. Furukawa, Y. Lindell, A. Nof and O. Weinstein. High-Throughput
Secure Three-Party Computation for Malicious Adversaries and an
Honest Majority. In EUROCRYPT 2017.
[12] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental
game. In the 19th STOC, 218–229, 1987.
[13] S. Gueron, Y. Lindell, A. Nof and B. Pinkas. Fast Garbling of Circuits
Under Standard Assumptions. In 22nd ACM CCS, pp. 567–578, 2015.
[14] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party
computation using garbled circuits. In USENIX Security, 2011.
[15] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending oblivious
transfers efﬁciently. In CRYPTO 2003, pages 145–161, 2003.
[16] M. Keller, E. Orsini and P. Scholl. MASCOT: Faster Malicious Arith-
metic Secure Computation with Oblivious Transfer. In ACM CCS, pages
830–842, 2016.
[17] M. Keller, P. Scholl and N.P. Smart. An architecture for practical
actively secure MPC with dishonest majority. ACM CCS, pp. 549–
560, 2013.
[18] V. Kolesnikov and T. Schneider.
Improved garbled circuit: Free xor
In Automata, Languages and Programming,
gates and applications.
pages 486–498, 2008
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:59 UTC from IEEE Xplore.  Restrictions apply. 
[19] B. Kreuter, a. shelat, and C. Shen. Billion-gate secure computation with
malicious adversaries. In USENIX Security, pages 285–300, 2012.
[20] E. Larraia, E. Orsini, and N.P. Smart. Dishonest majority multi-party
computation for binary circuits. In CRYPTO, pages 495–512, 2014.
[21] D. Malkhi, N. Nisan, B. Pinkas and Y. Sella. Fairplay-secure two-party
computation system. In the USENIX Security Symposium, 2004.
[22] P. Mohassel, M. Rosulek and Y. Zhang. Fast and Secure Three-party
Computation: The Garbled Circuit Approach. ACM CCS, pp. 591–602,
2015.
[23] P. Rindal and M. Rosulek. Faster Malicious 2-Party Secure Com-
putation with Online/Ofﬂine Dual Execution. In USENIX Security
Symposium, pages 297–314, 2016.
[24] T. Schneider and M. Zohner. GMW vs. Yao? efﬁcient secure two-party
computation with low depth circuits. In Financial Cryptography and
Data Security, pages 275–292, 2013.
[25] A. C. Yao. How to generate and exchange secrets. In the 27th FOCS,
pages 162–167, 1986.
[26] S. Zahur, M. Rosulek and D. Evans: Two Halves Make a Whole
- Reducing Data Transfer in Garbled Circuits Using Half Gates. In
EUROCRYPT, 220–250, 2015.
[27] Intel Haswell cache performance. http://www.7-cpu.com/
cpu/Haswell.html
APPENDIX A
THE PROTOCOL OF [11] IN DETAIL
PROTOCOL A.1 (Generating Multiplication triples):
• Input: The number N of triples to be generated.
• Auxiliary input: Parameters B and C.
• The Protocol:
i=1.
2) Generate multiplication triples: For i = 1, . . . , M,
1) Generate random sharings: The parties generate 2M shar-
ings of random values, where M = 2(N B + C(B − 1));
denote the shares that they receive by [([ai], [bi])]M
the
parties run the semi-honest multiplication protocol of [1] to
compute [ci] = [ai] · [bi]. Denote (cid:2)D = [([ai], [bi], [ci])]M/2
i=1 ;
observe that [ci] is the result of the protocol and is not
necessarily “correct”.
3) Cut and bucket: In this stage, the parties perform a ﬁrst
the triples were generated correctly, by
veriﬁcation that
opening some of the triples.
a) Each party splits (cid:2)D into vectors (cid:2)D1, . . . , (cid:2)DB such that
(cid:2)D1 contains N triples and each (cid:2)Di for i = 2, . . . , B
contains N + C triples.
b) For i = 2 to B: The parties jointly and securely generate
a random permutation πi over {1, . . . , N +C} and then
each locally shufﬂe (cid:2)Di according to πi.
c) For i = 2 to B: The parties run a protocol for checking
that a triple is valid (with opening) for the ﬁrst C triples
in (cid:2)Di, and removes them from (cid:2)Di. If a party did not
output accept in every execution, it sends ⊥ to the other
parties and outputs ⊥.
d) The remaining triples are divided into N sets of triples
(cid:2)E1, . . . , (cid:2)EN , each of size B, such that the bucket (cid:2)Ei
contains the i’th triple in (cid:2)D1, . . . , (cid:2)DB.
4) Check buckets: The parties initialize a vector (cid:2)d of length N.
Then, for i = 1, . . . , N:
a) Denote
the
in
([a1], [b1], [c1]), . . . , ([aB], [bB], [cB]).
triples
(cid:2)Ei
by
b) For j = 2, . . . , B, the parties run a protocol to check
that ([a1], [b1], [c1]) is valid (i.e., c1 = a1b1), using
([aj], [bj], [cj]).
sends ⊥ to the other parties and outputs ⊥.
these shares in the ith entry of (cid:2)d.
c) If a party did not output accept in every execution, it
d) The parties set (cid:2)di = ([a1], [b1], [c1]); i.e., they store
PROTOCOL A.2 (Securely Computing a Functionality f):
• Inputs: Each party Pi where i ∈ {1, 2, 3} holds an input xi ∈
{0, 1}(cid:2).
• Auxiliary Input: The parties hold a description of a Boolean
circuit C that computes f on inputs of length (cid:4). Let N be the
number of gates in C.
• The protocol – ofﬂine phase:
1) The parties call Protocol A.1 with input N and obtain a
vector (cid:2)d of sharings.
• The protocol – online phase:
1) Sharing the inputs: For each input wire, the party whose
input is associated with that wire securely shares its input.
2) Circuit emulation: Let G1, . . . , GN be a predetermined topo-
logical ordering of the gates of the circuit. For k = 1, . . . , N
the parties work as follows:
– If Gk is a XOR gate: Given shares [x] and [y] on the
input wires, the parties compute [x]⊕ [y] and deﬁne the
result as their share on the output wire.
– If Gk is a NOT gate: Given shares [x] on the input
wire, the parties compute [x] and deﬁne the result as
their share on the output wire.
– If Gk is an AND gate: Given shares [x] and [y] on the
input wires, the parties run the semi-honest multiplica-
tion protocol of [1].
3) Veriﬁcation stage: Before the shared values on the out-
put wires are reconstructed, the parties verify that all the
multiplications were carried out correctly, as follows. For
k = 1, . . . , N:
a) Denote by ([x], [y]) the shares of the input wires to the
kth AND gate, and denote by [z] the shares of the output
wire of the kth AND gate.
b) The parties run the protocol to check that the triple
([x], [y], [z]) is valid (i.e., z = xy) using the triple
([ak], [bk], [ck]).
sends ⊥ to the other parties and outputs ⊥.
c) If a party did not output accept in every execution, it
4) If any party received ⊥ in any call to any functionality above,
then it outputs ⊥ and halts.
5) Output reconstruction: For each output wire of the circuit,
the parties securely reconstruct the shared secret to the party
whose output is on the wire.
6) If any party receives ⊥ in any such reconstruction, then it
sends ⊥ to the other parties, outputs ⊥ and halts.
• Output: If a party has not output ⊥, then it outputs the values
it received on its output wires.
In this appendix, we describe the protocol of [11] in detail.
We omit the description of the secret-sharing scheme, the
semi-honest multiplication protocol and other details that are
not needed for understanding our techniques. The description
below also refers to subroutines for generating shares of
random values, for jointly choosing a random permutation (for
the array shufﬂe), and for sharing and reconstructing secrets.
In addition, they use subprotocols for checking the validity
of a multiplication triple (while opening and “wasting it”)
and for checking the validity of triple using another (while
preserving the secrecy of the ﬁrst and “wasting” the second).
The protocol speciﬁcations below are as in [11], with the
exception of the cut-and-bucket step which is modiﬁed as
described in Section II-A.
• Output: The parties output (cid:2)d.
862
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:59 UTC from IEEE Xplore.  Restrictions apply.