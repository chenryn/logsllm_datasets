title:With a Little Help from My Friends: Constructing Practical Anonymous
Credentials
author:Lucjan Hanzlik and
Daniel Slamanig
With a Little Help from My Friends: Constructing Practical
Anonymous Credentials
CISPA Helmholtz Center for Information Security
Lucjan Hanzlik
PI:EMAIL
Saarbrücken, Germany
Daniel Slamanig
PI:EMAIL
AIT Austrian Institute of Technology
Vienna, Austria
ABSTRACT
Anonymous credentials (ACs) are a powerful cryptographic tool
for the secure use of digital services, when simultaneously aim-
ing for strong privacy guarantees of users combined with strong
authentication guarantees for providers of services. They allow
users to selectively prove possession of attributes encoded in a
credential without revealing any other meaningful information
about themselves. While there is a significant body of research on
AC systems, modern use-cases of ACs such as mobile applications
come with various requirements not sufficiently considered so far.
These include preventing the sharing of credentials and coping
with resource constraints of the platforms (e.g., smart cards such as
SIM cards in smartphones). Such aspects are typically out of scope
of AC constructions, and, thus AC systems that can be considered
entirely practical have been elusive so far.
In this paper we address this problem by introducing and for-
malizing the notion of core/helper anonymous credentials (CHAC).
The model considers a constrained core device (e.g., a SIM card) and
a powerful helper device (e.g., a smartphone). The key idea is that
the core device performs operations that do not depend on the size
of the credential or the number of attributes, but at the same time
the helper device is unable to use the credential without its help.
We present a provably secure generic construction of CHACs using
a combination of signatures with flexible public keys (SFPK) and
the novel notion of aggregatable attribute-based equivalence class
signatures (AAEQ) along with a concrete instantiation. The key
characteristics of our scheme are that the size of showing tokens
is independent of the number of attributes in the credential(s) and
that the core device only needs to compute a single elliptic curve
scalar multiplication, regardless of the number of attributes. We
confirm the practical efficiency of our CHACs with an implemen-
tation of our scheme on a Multos smart card as the core and an
Android smartphone as the helper device. A credential showing
requires less than 500 ms on the smart card and around 200 ms on
the smartphone (even for a credential with 1000 attributes).
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484582
CCS CONCEPTS
• Security and privacy → Digital signatures; Hardware-based
security protocols; • Theory of computation→ Cryptographic
primitives.
KEYWORDS
Anonymous credentials; secure elements; smart cards; mobile;
ACM Reference Format:
Lucjan Hanzlik and Daniel Slamanig. 2021. With a Little Help from My
Friends: Constructing Practical Anonymous Credentials. In Proceedings of
the 2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 20 pages. https://doi.org/10.1145/3460120.3484582
1 INTRODUCTION
Anonymous credential systems (ACs), envisioned by Chaum [33] in
the 1980ies and meanwhile found as commercial products such as
U-Prove [65] or Idemix [30], allow users to obtain digital credentials
from an issuer and to prove possession of attributes encoded in
a credential, e.g., just prove that the holder is over 21 years old,
to verifiers without revealing any other meaningful information
about themselves. Typically, a credential contains a number of at-
tributes, e.g. a collection of attributes such as age, address, gender,
etc. for human credential holders or a potentially large number
of attributes describing a platform and its configuration, e.g., for
remote attestation.1 These attributes can be selectively shown and
thus support minimum disclosure, i.e., only information that is
required for the particular application is revealed. The reason why
ACs are considered useful is because they provide strong authenti-
cation and in addition strong privacy. This means that verifiers can
be convinced that users really hold credentials from an issuer when
the authentication is successful, but at the same time the credential
issuer and verifiers (even if they collaborate) cannot link credentials
to a specific session with the user.
There are two variants of ACs, namely one-show and multi-show.
If ACs are one-show private, with U-Prove [65] being the most well
known representative, then each credential can only be used once
in an unlinkable way (i.e., multiple showings can be linked). While
this might pose serious limitations in some settings, it has recently
been found real-world applications and in particular in the form of
PrivacyPass [41] by Cloudflare (available as extensions for Chrome
and Firefox), the enhanced variant by Google [56] being integrated
1Remote attestation allows a verifier to determine a level of trust in the integrity
of the platform of another system, i.e., the machine that holds the credential.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2004into the Trust Tokens API2 or the PrivateStats proposal by Face-
book.3 A stronger variant of ACs is called multi-show private, which
additionally guarantees that the repeated use of the same credential
is unlinkable. The latter is a much more general and typically more
desirable notion and we are exclusively focusing on multi-show
ACs in this paper.4 Multi-show ACs have a variety of applications
such as access control to online-service [68], anonymous subscrip-
tions [12, 57], e-tickets [50, 61] or point collection systems [14, 15].
A recent large scale real-world application of such ACs is the real-
ization of private groups within the popular Signal messenger [32].
Moreover, there are recent innovative proposals such as Gradient’s
identity management infrastructure5 supporting provable state-
ments and claims chained to immutable (hardware-based) roots of
trust via recent AC constructions [38, 39, 45].
Camenisch and Lysyanskaya [28] were the first to fully construct
this cryptographic primitive. Their scheme is based on so-called
CL-signatures that use RSA groups and allow to efficiently prove
knowledge of a signature. In their follow-up work [29] they con-
struct CL-signatures from bilinear groups and more schemes follow
their template, e.g., [58, 66]. Brands [18] proposed an alternative
construction (later made provably secure in [3]) that uses pairing-
free groups at the expense of multi-show privacy. Besides the al-
ready mentioned constructions of ACs, there is significant research
into different approaches to construct AC systems with various
trade-offs in bandwidth, computational efficiency and security (e.g.,
[3, 27, 42, 45, 48, 69]). We will compare our approach to the most
important ones later. Furthermore, there are various variants of
ACs such as keyed-verification [31, 37], updatable [14, 36], dele-
gatable [7, 13, 38], decentralized [46, 73] or cloud-based ACs [55],
further broadening the scope of potential applications.
Preventing unauthorized sharing of credentials. The use of
ACs in commercial products such as U-Prove or Idemix created new
problems such as the sharing of credentials, allowing for instance
non-paying or non-authorized users to gain access to a service (e.g.,
watch R-rated movies). A simple solution is to store the credential
inside a secure hardware device (secure element) such as a smart
card, which makes sharing a credential practically infeasible. This
not only solves the problem of dishonest users, but provides an addi-
tional layer of security for credentials of honest users. It also allows
applying ACs in e-government applications [11], since electronic
identities (e-IDs) are usually based on smart cards. The problem
that one encounters here, however, is that the AC constructions
mentioned before are not designed having this in mind. Thus their
efficiency is only practical on rather powerful devices such as PCs
or smartphones, but fails on constrained devices such as a smart
card providing much less memory and processing capabilities. Thus,
they are typically far too inefficient for the use in such a setting.
Anonymous credentials on constrained devices. There were
several attempts to implement ACs on smart cards. Bichsel et. al.
[10] implemented CL credentials [28] on a standard Java Card [64].
2https://web.dev/trust-tokens/
3https://research.fb.com/privatestats
4Note that every multi-show AC can easily be turned into a one-show AC by
including a unique attribute that always needs to be shown.
5https://www.gradient.tech/
Unfortunately, for a meaningful security parameter, their imple-
mentation required more than 16 seconds to perform a showing. A
more practical implementation was proposed by Mostowski and
Vullers [63]. They implemented U-Prove like one-show ACs on a
smart card in Multos technology [60], where proving possession
of 1 of 5 attributes in a credential takes around 0.9s (Bjones et
al. [11] report about 0.5s for 10 undisclosed attributes). Recently
Camenisch et. al. in [23] proposed a construction and smart card
implementation of keyed-verification ACs [31], a restricted class of
ACs where the issuer is also the verifier. They achieve execution
times similar to the aforementioned one in [63]. A somewhat dif-
ferent approach to ACs was proposed by Batina et. al. [6]. Here,
a credential is associated with a randomizable certificate on the
user’s public key (which can also be randomized). Therefore, each
credential corresponds to a single attribute. For a showing, the user
randomizes the public key, the certificate, and signs a nonce send
by the verifier. The concrete construction uses self-blindable cer-
tificates by Verheul [74] and their implementation requires around
3s to show one credential/attribute at a 100 bit security level.
Drawbacks of existing implementations. The main drawback
of all these implementations is that the execution time on the smart
card depends on the number of attributes and either increases with
the number of disclosed or undisclosed attributes but always lin-
early increases with the number of attributes inside the credential.
Due to this reason, the application of smart card based ACs is lim-
ited to cases where the user possess only a very small number of
attributes and very soon gets impractical in use-cases that require
more attributes. For smart cards, Mostowski and Vullers in [63]
report that adding an attribute to the credential increases the execu-
tion time of a showing by around 0.1s. We stress that while in case
of PC or smartphone implementations one still notices the linear
increase in execution time, it is significantly less problematic than
in case of smart cards.
On the number of attributes. Attributes provided by govern-
mental issuers usually reflect basic personal information about the
credential holder (e.g. name, gender, age, address). However, there
are many scenarios where additional attributes can be defined. In
particular, the IRMA pilot implementation of AC’s developed by
the Privacy by Design Foundation6 provided several real-world at-
tributes considered by the industry/government like diplomas, cer-
tificates, or even membership IDs for online services (e.g. Facebook
ID). Moreover, in the context of eIDs in some European countries,
e.g., Austria or Germany, service-specific pseudonyms are used for
authentication and computing them on the fly would be too expen-
sive. Therefore a more efficient approach would be to store them
as attributes inside the credential. It is worth noting that in Austria
according to [54] there are around 30 of them for governmental
purposes and potentially many more for other industrial purposes.
Attributes however can not only be used to describe individuals
but are also useful to reflect properties of the user’s platform or
other devices like servers. For example, when basing access control
on the configuration of the platform, one can consider binary at-
tributes such as whether a certain software, e.g. antivirus, or some
hardware, e.g. certain sensor type, is present. Note there could be
6https://privacybydesign.foundation/attribute-index/en/
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2005numerous such attributes and in addition those properties could
also be arbitrarily valued, e.g., OS type, version, hardware vendor.
In such a case the number of attributes in the system is likely to be
large.
As efficiency of the system is influenced by the number of at-
tributes in the credentials, this aspect gets even more important
considering examples like the ones above where the number of po-
tential attributes in some scenarios can be in the tens to hundreds.
Our goals and setting. To overcome the aforementioned prob-
lems, we consider splitting the overall computations between a
resource constrained device, e.g., a secure element (SE) such as a
smart card in Figure 1 (the core), and a much more powerful host
device, e.g., a primary device such as a smartphone in Figure 1 (the
helper). And in particular our goal is to consider this core/helper
setting already in the formal AC model. The motivation comes from
the observation that nowadays platforms that use ACs (e.g., PCs,
smartphones) typically are equipped with secure elements (SEs)
in form of dedicated hardware modules, e.g., the Trusted Platform
Module (TPM)7 or SIM cards that are designed to handle secrets
(such as secret keys for ACs). Besides, many modern processors
come with hardware-enforced isolation that is already built into the
CPU and allows to build trusted execution environments (TEE), e.g.,
TrustZone by Arm or the Software Guard Extensions (SGX) by Intel.
Such TEEs feature isolated execution of user processes and are also
used to emulate TPM functionality [67] (e.g., Intel fTPM). Since
there is a huge body on recent practical microarchitectural attacks
on TEEs, this however questions their adequacy for cryptographic
applications (cf. [40, 70]). Consequently, we focus on hardware
SEs such as TPMs or SIM cards more suitable for handling crypto-
graphic keys.8 Nevertheless, insights from an implementation and
its performance on such constrained SEs gives us a good baseline,
as performance will only get better if we move to “software-based”
TEEs like TrustZone or SGX.
Now, any such SE (core device) depends on a host device (the
helper) that provides power supply and acts as a gateway to the out-
side world. Besides TPMs and SIM cards in PCs and smartphones,
this is also true for the Internet of Things (IoT), where smaller and
constrained devices are connected to a more powerful IoT hub. In
most applications, the used helper device is owned by the user
and can be leveraged to perform part of the computation and can
also be used to store larger amounts of data. So while we consider
the helper to be potentially malicious, a well known problem in
such a setting is that a corrupted helper device can always break
the privacy of an AC system, e.g., by adding identifying metadata
before finalizing the showing with a verifier. This can obviously not
be checked by the core device. But we can take advantage of this
fact and prioritize the efficiency of the core at the expense of pro-
tecting privacy against the helper.9 Nevertheless, we do not want
to tolerate that a malicious helper can show a credential without
interacting with the core. Consequently, we require that as long
as the verifier sends an honest challenge triggering the showing
7https://trustedcomputinggroup.org/resource/tpm-library-specification/