[8] Guillermo Suarez-Tangil, Juan E Tapiador, Pedro Peris-Lopez, and Jorge Blasco.
2014. Dendroid: A text mining approach to analyzing and classifying code
structures in android malware families. Expert Systems with Applications 41, 4
(2014), 1104–1117.
[9] Vaibhav Rastogi, Yan Chen, and Xuxian Jiang. 2013. Droidchameleon: evaluating
android anti-malware against transformation attacks. In Proceedings of the 8th
ACM SIGSAC symposium on Information, computer and communications security.
ACM, 329–334.
[10] Pavel Laskov et al. 2014. Practical evasion of a learning-based classifier: A case
study. In Security and Privacy (SP), 2014 IEEE Symposium on. IEEE, 197–211.
[11] Médéric Hurier, Guillermo Suarez-Tangil, Santanu Kumar Dash, Tegawendé F
Bissyandé, Yves Le Traon, Jacques Klein, and Lorenzo Cavallaro. 2017. Euphony:
Harmonious unification of cacophonous anti-virus vendor labels for Android
malware. In Proceedings of the 14th International Conference on Mining Software
Repositories. IEEE Press, 425–435.
[12] Sevil Sen, Emre Aydogan, and Ahmet I Aysan. 2018. Coevolution of Mobile
IEEE Transactions on Information Forensics and
Malware and Anti-Malware.
Security 13, 10 (2018), 2563–2574.
[13] Fengguo Wei, Yuping Li, Sankardas Roy, Xinming Ou, and Wu Zhou. 2017. Deep
Ground Truth Analysis of Current Android Malware. In International Conference
on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA’17).
Springer, Bonn, Germany, 252–276.
[14] Marcos Sebastián, Richard Rivera, Platon Kotzias, and Juan Caballero. 2016. Av-
class: A tool for massive malware labeling. In International Symposium on Research
in Attacks, Intrusions, and Defenses. Springer, 230–253.
[15] Sen Chen, Minhui Xue, Lingling Fan, Shuang Hao, Lihua Xu, Haojin Zhu, and
Bo Li. 2018. Automated poisoning attacks and defenses in malware detection
systems: An adversarial machine learning approach. computers & security 73
(2018), 326–344.
[16] Brad Miller, Alex Kantchelian, Michael Carl Tschantz, Sadia Afroz, Rekha Bach-
wani, Riyaz Faizullabhoy, Ling Huang, Vaishaal Shankar, Tony Wu, George Yiu,
et al. 2016. Reviewer integration and performance measurement for malware
detection. In International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment. Springer, 122–141.
[17] Kaspersky Lab. 2018.
Kaspersky Lab Threat Predictions For 2018.
https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/
07164714/KSB_Predictions_2018_eng.pdf.
[18] Symantec. 2018.
Executive Summary - 2018 Internet Security Threat
https://www.symantec.com/content/dam/symantec/docs/reports/
Report.
istr-23-executive-summary-en.pdf.
[19] Parvez Faruki, Ammar Bharmal, Vijay Laxmi, Vijay Ganmoor, Manoj Singh Gaur,
Mauro Conti, and Muttukrishnan Rajarajan. 2015. Android security: a survey
of issues, malware penetration, and defenses. IEEE communications surveys &
tutorials 17, 2 (2015), 998–1022.
[20] Li Li, Alexandre Bartel, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon.
2015. Apkcombiner: Combining multiple android apps to support inter-app
analysis. In IFIP International Information Security Conference. Springer, 513–527.
[21] Enrico Mariconti, Lucky Onwuzurike, Panagiotis Andriotis, Emiliano De Cristo-
faro, Gordon J. Ross, and Gianluca Stringhini. 2017. MaMaDroid: Detecting
Android Malware by Building Markov Chains of Behavioral Models. In Pro-
ceedings of the 24th Annual Network and Distributed System Security Symposium
(NDSS).
[22] Aravind Machiry, Nilo Redini, Eric Gustafson, Yanick Fratantonio, Yung Ryn
Choe, Christopher Kruegel, and Giovanni Vigna. 2018. Using Loops For Malware
Classification Resilient to Feature-unaware Perturbations. In Proceedings of the
34th Annual Computer Security Applications Conference. ACM, 112–123.
[23] Roberto Jordaney, Kumar Sharad, Santanu K Dash, Zhi Wang, Davide Papini,
Ilia Nouretdinov, and Lorenzo Cavallaro. 2017. Transcend: Detecting concept
drift in malware classification models. In PROCEEDINGS OF THE 26TH USENIX
SECURITY SYMPOSIUM (USENIX SECURITY’17). USENIX Association, 625–642.
[24] Guillermo Suarez-Tangil and Gianluca Stringhini. 2018. Eight Years of Rider
Measurement in the Android Malware Ecosystem: Evolution and Lessons Learned.
arXiv preprint arXiv:1801.08115 (2018).
[25] Wu Zhou, Yajin Zhou, Xuxian Jiang, and Peng Ning. 2012. Detecting repackaged
smartphone applications in third-party android marketplaces. In Proceedings of
the second ACM conference on Data and Application Security and Privacy. ACM,
317–326.
[26] Fady Copty, Matan Danos, Orit Edelstein, Cindy Eisner, Dov Murik, and Benjamin
Zeltser. 2018. Accurate Malware Detection by Extreme Abstraction. In Proceedings
of the 34th Annual Computer Security Applications Conference. ACM, 101–111.
[27] Omid Mirzaei, Guillermo Suarez-Tangil, Juan Tapiador, and Jose M de Fuentes.
2017. Triflow: Triaging android applications using speculative information flows.
In Proceedings of the 2017 ACM on Asia Conference on Computer and Communica-
tions Security. ACM, 640–651.
[28] Silvio Cesare and Yang Xiang. 2010. Classification of malware using structured
control flow. In Proceedings of the Eighth Australasian Symposium on Parallel and
Distributed Computing-Volume 107. Australian Computer Society, Inc., 61–70.
[29] Dustin Hurlbut-AccessData. 2009. Fuzzy Hashing for Digital Forensic Investiga-
[30] Geoffroy Gueguen. 2012.
Androguard.
https://github.com/androguard/
tors. (2009).
androguard.
[31] Kevin Allix, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon. 2016.
Androzoo: Collecting millions of android apps for the research community. In
Mining Software Repositories (MSR), 2016 IEEE/ACM 13th Working Conference on.
IEEE, 468–471.
[32] Christiaan Beek, Diwakar Dinkar, Yashashree Gund, German Lancioni, Niamh
Minihane, Francisca Moreno, Eric Peterson, Thomas Roccia, Craig Schmugar,
Rick Simon, Dan Sommer, Bing Sun, RaviKant Tiwari, and Vincent Weafer. 2017.
McAfee Labs Threats Report. Technical Report. McAfee Labs.
[33] Jing Chen, Chiheng Wang, Ziming Zhao, Kai Chen, Ruiying Du, and Gail-Joon
Ahn. 2018. Uncovering the face of android ransomware: Characterization and
real-time detection. IEEE Transactions on Information Forensics and Security 13, 5
(2018), 1286–1300.
[34] Nicoló Andronio, Stefano Zanero, and Federico Maggi. 2015. Heldroid: Dissecting
and detecting mobile ransomware. In International Workshop on Recent Advances
in Intrusion Detection. Springer, 382–404.
[35] Mikko Hyppönen and Tomi Tuominen. 2017.
F-Secure State of cy-
https://www.f-secure.com/documents/996508/1030743/
security.
ber
cyber-security-report-2017.
[36] Yajin Zhou, Zhi Wang, Wu Zhou, and Xuxian Jiang. 2012. Hey, you, get off of my
market: detecting malicious apps in official and alternative android markets.. In
Proceedings of the 19th Annual Network and Distributed System Security Symposium
(NDSS), Vol. 25. 50–52.
[37] Roman Unuchek. 2017. A new era in mobile banking Trojans. https://securelist.
com/a-new-era-in-mobile-banking-trojans/79198/.
[38] Lukas STEFANKO. 2018.
stole 10,000 Euros
banking-trojan-found-on-google-play-stole-10000-euros-from-victims.html.
from victims.
Banking Trojan found on Google Play
https://lukasstefanko.com/2018/09/
[39] Lukas Stefanko.
2015.
in
ing
aggressive-android-ransomware-spreading-in-the-usa.
the USA.
Aggressive Android ransomware
spread-
https://www.welivesecurity.com/2015/09/10/
[40] Ming Fan, Jun Liu, Wei Wang, Haifei Li, Zhenzhou Tian, and Ting Liu. 2017.
Dapasa: detecting android piggybacked apps through sensitive subgraph analysis.
IEEE Transactions on Information Forensics and Security 12, 8 (2017), 1772–1785.
[41] Kimberly Tam, Ali Feizollah, Nor Badrul Anuar, Rosli Salleh, and Lorenzo Caval-
laro. 2017. The evolution of android malware and android analysis techniques.
ACM Computing Surveys (CSUR) 49, 4 (2017), 76.
APPENDIX
A RANSOMWARE
Case Studies. To confirm the validity of our approach, we select
the most recently detected ransomware families from our dataset
and discuss their app feature vectors in detail. Also, we compare
the results with what is known from each family from other re-
search works and security reports. We have selected the porndroid
and gepew ransomware families both of which with apps that are
present in the wild since 2014.
application (i.e., LockerPin). The second method is used to retrieve
the loader of a specific class at runtime. This implies that all apps in
this family share malicious classes which are not installed as part
of the application package and are loaded dynamically during exe-
cution. In other words, all apps execute the LockerPin application
once it is downloaded successfully. Finally, the third method is used
to make sure that ransomware activity is overlaid always on top of
other activities. This is done to prevent the victim from accessing
other components of the device. The ransomware can set the value
of this method to “FLAG_ACTIVITY_NEW_TASK” to restart itself
and overwrite previous activities whenever the ransomware is not
displayed on top.
Moreover, 90% and 80% of apps in this family include query() and
delete() API methods respectively. These are present in 3 ensembles
as shown in Table 3. The former method is used to retrieve and leak
victim’s personal information through Android content provider
[40], while the latter is used to delete critical files should the ransom
not satisfied.
Intra-family characterization. The last step in our evaluation is
to look at the intra-family dependencies. For this, we compare the
feature vector of an app with all other apps by using cosine distance.
The results are presented in Fig. 4a. Our method reveals several
cases where apps in two different ransomware families have exactly
the same signature. For instance, 4654EC...48F2.apk from slocker
family and 8905B3...99DC.apk from gepew family do share exactly
the same feature vector. Further inspections show that both of these
apps do contain methods which are not installed as parts of both
apps’ packages. Thus, they make use of dynamic loading to retrieve
the class loader of those methods and to load the malicious methods
into memory at run-time (feature #2 in Table 3). This comes to show