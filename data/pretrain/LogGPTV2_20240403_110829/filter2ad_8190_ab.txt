代码如下，如果已经知道当前查询大概断的位置，可以缩小范围，这里将所有的都会连接起来
    class InstanceTaintStep extends TaintTracking::AdditionalTaintStep{
        override predicate step(DataFlow::Node src, DataFlow::Node sink){
          exists(ClassInstanceExpr cie | 
            // cie.getTypeName().toString() = "UploadFile"
             src.asExpr() = cie.getAnArgument()
              and sink.asExpr() = cie)
        }
    }
之前有位师傅提及了实例化断开问题，当时回答存在误导，这里算是重新讲清。
## Partial flow
对于数据流中断时候如何去解决确定中断位置在哪，官方提供了Partial
flow方式，也就是查询到中断前的部分流，对于某些场景是有帮助的。如果想了解的话可以阅读官方描述[Debugging data-flow queries
using partial flow¶](https://codeql.github.com/docs/writing-codeql-queries/debugging-data-flow-queries-using-partial-flow/)
使用：  
先导入`PartialPathGraph`，这里需要注意不能和`PathGraph`共存，也就是使用`PartialPathGraph`则不能导入`import
DataFlow::PathGraph`。
    import DataFlow::PartialPathGraph
在`TaintTracking::Configuration`配置中添加一个谓词，表示探索深度
    override int explorationLimit() { result = 5 }
查询如下，注：`hasPartialFlow`是和`PartialPathGraph`匹配，`hasFlowPath`和`PathGraph`匹配，导入的时候一定要注意，否则会导致查不出来内容。
    from MyTaintTrackingConfiguration conf, DataFlow::PartialPathNode source, DataFlow::PartialPathNode sink
    where conf.hasPartialFlow(source, sink, _)
    select sink, source, sink, "Partial flow from unsanitized user data"
当整个调用链非常长的时候又不知道具体断掉的位置，然后使用Partial flow会导致查询结果内容非常多，更不好排查了。官方提供了2种解决方式  
大概的意思也就是，比如：a-b-c-d-e-f-g，不知道哪个位置中断了，那么就先查a-b-c-d，将sink从g修改为a。或者说是将source的大范围修改为确定的单个source来减少输出方便排查。还有就是可以使用`sanitizer`来清洗掉其他数据。
## 官方规则-path-injection
### path-injection
用于检测文件相关，可以是文件上传、文件读取。主要判断逻辑是对与传入文件操作时文件名是否可控
打开CEW-022，官方对于此漏洞的简要说明：[java-path-injection](https://codeql.github.com/codeql-query-help/java/java-path-injection/)  
`TaintedPathConfig`污点跟踪分析的配置如下  
#### source
使用了`RemoteFlowSource`，其中定义了用户输入可控的常见源。
#### sink
`sink`定义中使用了陌生的谓词和类，先看看`PathCreation`
    override predicate isSink(DataFlow::Node sink) {
        exists(Expr e | e = sink.asExpr() | e = any(PathCreation p).getAnInput() and not guarded(e))
    }
跟进 **PathCreation.qll**
包，获取用于创建路径的输入，定义了常见用法。使用方式通过调用`getAnInput()`谓词获取方法内的所有参数，也就是将`sink`定义为传入的文件名。  
再跟进 **TaintedPathCommon.qll** 查看`guarded`谓词  
了解下`ConditionBlock`，可以使用下面查询内容
    from ConditionBlock cb select cb, cb.getCondition(),cb.getCondition().getAChildExpr()
`cb`获取的是整个块，如：方法开始`{}`整个内容、`if (tree.getId() != null)`、`if (tree.getId() ==
null)`  
`cb.getCondition()`表示获取此基本块最后一个节点条件，如：`comboTree.getId() !=
null`、`salary.equalsIgnoreCase("null")`  
`cb.getCondition().getAChildExpr()`表示获取子表达式，如：`tree.getId()`、`null`、`salary`、`"null"`
    public void demo() {
        if (tree.getId() != null) {
            cq.eq("id", tree.getId());
        }
        if (tree.getId() == null) {
            cq.isNull("Depart");
        }
        cq.add();
        ......
        data.setFooter("salary:"+(salary.equalsIgnoreCase("null")?"0.0":salary)+",age,email:合计");
    }
回到`guarded`谓词中，  
`exists(PathCreation p | e = p.getAnInput())`再次强调变量调用为文件名。  
`cb.getCondition().getAChildExpr*() = c`将块的子表达式和表达式`c`匹配  
`c = e.getVariable().getAnAccess()`文件名的所有调用和表达式`c`匹配  
`cb.controls(e.getBasicBlock(),
true)`注释意为：如果传入的`e.getBasicBlock()`是由该条件控制的基本块，即条件为`true`的基本块，则保持成立。  
比如通过`controls`查询，结果如下图，只有当`dirName`的`if`判断语句为`true`才能将`dirName`传入`File`中。  
将传入`controls`谓词中的`true`修改为`false`，则能匹配到如下图所示。进行判断的是`!`后面内容，所以可以得到该项  
`not inWeakCheck(c)`最后一个过滤条件  
`inWeakCheck`谓词中定义调用方法的方法名等于`startsWith`等，传入表达式等于调用方法的对象。  
`EqualityTest`表示使用`==`或者`!=`的表达式，`getAnOperand()`谓词获取左边和右边的操作表达式，判断其中一个为`null`。
    private predicate inWeakCheck(Expr e) {
      // None of these are sufficient to guarantee that a string is safe.
      exists(MethodAccess m, Method def | m.getQualifier() = e and m.getMethod() = def |
        def.getName() = "startsWith" or
        def.getName() = "endsWith" or
        def.getName() = "isEmpty" or
        def.getName() = "equals"
      )
      or
      // Checking against `null` has no bearing on path traversal.
      exists(EqualityTest b | b.getAnOperand() = e | b.getAnOperand() instanceof NullLiteral)
    }
总结：  
经过比对sink是否使用`guarded`谓词的结果如下，左边是没有使用`guarded`谓词  
如下图，没有将文件名传入`startsWith`等方法，并且没有使用`==`或者`!=`对`null`进行判断，只有当文件名的判断条件为`true`才能将其传入`File`中，那这种情况则不能当作`sink`。其实官方使用`guarded`谓词加入判断的这种情况有点不太理解，暂时没有想到哪些场景这种情况是适用的。可能我个人使用的话会将该项注释掉。  
#### isSanitizer
如果数据类型是基本类型或者是其包装类则清洗掉
    override predicate isSanitizer(DataFlow::Node node) {
        exists(Type t | t = node.getType() | t instanceof BoxedType or t instanceof PrimitiveType)
    }
#### isSanitizerGuard
这里也是起到清洗作用，当调用方法为`contains`并且其参数值为`..`，对表达式`e`的判断为`false`则条件成立。
    class ContainsDotDotSanitizer extends DataFlow::BarrierGuard {
        ContainsDotDotSanitizer() {
            this.(MethodAccess).getMethod().hasName("contains") and
            this.(MethodAccess).getAnArgument().(StringLiteral).getValue() = ".."
    }
        override predicate checks(Expr e, boolean branch) {
            e = this.(MethodAccess).getQualifier() and branch = false
        }
    }
    override predicate isSanitizerGuard(DataFlow::BarrierGuard guard) {
        guard instanceof ContainsDotDotSanitizer
    }
上面的内容以案例来看是容易理解些的，如下图，只有当`sourceFilename.contains("..")`的判断语句为`false`才能进入`File`中，那么这种情况则将其清洗掉。  
也就是代码中如果对文件名内容进行`..`检测则清洗掉，不展示该数据。  
以上就是path-injection内容的讲解，不考虑`guarded`谓词情况，其实挺容易理解的，将常见用户输入可控的位置作为`source`，将常见文件操作方法的参数即文件名作为`sink`，清洗掉那些类型是基本类型等、如果对文件名进行`..`检测则也清洗掉。
#### 应用到真实场景
当我们查询，可以看到这里查询到了一个上传的工具类中，source是`multipartRequest.getFileMap()`方法。如果稍微往前根据可以看到这里`multipartRequest`对象应该就是controller中传入进来的`request`对象，那么这里需要重新找到具体是哪个controller调用到这里  
重新将config编写如下，这里只将source查到`RequestMapping`，如果要考虑全可以有`GetMapping`等。但只修改为如下是还不能查到内容的。
    class TaintedPathConfig extends TaintTracking::Configuration {
      TaintedPathConfig() { this = "TaintedPathConfig" }
      override predicate isSource(DataFlow::Node source) {
        exists( Method m, Parameter p| 
        m.getAnAnnotation().getType().hasQualifiedName("org.springframework.web.bind.annotation", "RequestMapping")
        and m.hasAnnotation()
        and m.getAParameter() = p
        and source.asParameter()=p
        and p.getType().hasName("HttpServletRequest")
        )
       }
      override predicate isSink(DataFlow::Node sink) {
        exists( Method m, Parameter p| m.hasName("uploadFile") and
        m.getDeclaringType().hasQualifiedName("org.xxxx.core.common.dao.impl", "xxxxx")
        and m.getAParameter() = p
        and sink.asParameter()=p
        and p.getType().hasName("UploadFile")
        )
      }
    }
原因就是`UploadFile`实例时这里中断了  
将其连接起来后即可
    class InstanceTaintStep extends TaintTracking::AdditionalTaintStep{
      override predicate step(DataFlow::Node src, DataFlow::Node sink){
          exists(ClassInstanceExpr ma | 
             sink.asExpr() = ma
            and src.asExpr() = ma.getAnArgument())
      }
    }