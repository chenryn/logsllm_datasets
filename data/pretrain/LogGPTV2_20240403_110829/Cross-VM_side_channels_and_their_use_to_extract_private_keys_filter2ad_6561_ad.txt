plement an alignment and error-correction algorithm that
proceeds in rounds. In each round, the sequences produced
from the previous round are arbitrarily divided into triples,
and each triple is reduced to a single spanning sequence that
is carried forward to the next round (and the three used to
create it are not). For this reason, we choose ζ, the num-
ber of batches, to be a power of three, and so we iterate
the triple-merging algorithm log3 ζ times. The result is a
sequence of hypothesized cryptographic operations covering
enough of the target key to enable exhaustive search over all
possibilities for any remaining ∗ values.
Each round proceeds as follows. Each triple (s1, s2, s3)
is ﬁrst aligned using a basic three-way generalization of DP
(e.g., see [23, Section 4.1.4]). This may insert gaps (rarely
consecutively) into the sequences, yielding new sequences
(s′
3). Below we denote a gap so inserted by the “label”
⊔. The algorithm is parameterized to prevent alignment of S
and M labels in the same position within diﬀerent spanning
sequences.
1, s′
2, s′
1, s′
2, s′
To the resulting aligned sequence triple (s′
3), the
length of which is denoted as ℓ, is applied a modiﬁed majority-
decoding algorithm that condenses the triple into a single,
merged output sequence. We say that s′
3 strongly
agree at position j if all three sequences have identical labels
at position j or, for 1 < j < ℓ, if any two of the three have
identical labels at each of positions j − 1, j, and j + 1. In
this step, the output sequence adopts a label at position j
if the three strongly agree on that label at position j and
the label is S, M , or, in the last round, ⊔. Otherwise, the
output sequence adopts ∗ at position j. At the end of the
last round, any residual ⊔ labels are removed.
2, and s′
1, s′
6. EVALUATION
We performed a case study using the libgcrypt v.1.5.0
cryptographic library (see http://www.gnu.org/software/
libgcrypt/). This is the most recent version of libgcrypt;
our results extend to cover earlier versions as well. To be
concrete, we also ﬁxed an application that uses the library:
Gnu Privacy Guard (GnuPG) v.2.0.19 (http://www.gnupg.
org/).
GnuPG is used widely for encrypting and signing
email, but we note that libgcrypt use goes beyond just
GnuPG. The attack should extend to any application using
the vulnerable routines from libgcrypt.
ElGamal encryption. Manual code review revealed that
libgcrypt employs a more-or-less textbook variant of the
square-and-multiply modular exponentiation algorithm for
use with cryptosystems such as RSA [40] and ElGamal [19].
Our case study focuses on the latter.
ElGamal encryption in libgcrypt uses a cyclic group Z∗
p
for prime p and generator g. The bit length size of p is
dictated by a user-speciﬁed security parameter κ. Given g
and p, a secret key is chosen uniformly at random to be a
non-negative integer x whose bit length is, for example, 337,
403, or 457 when κ is 2048, 3072, or 4096, respectively. We
note that this deviates from standard ElGamal, in which one
would have |x| ≈ |p|. The smaller exponent makes decryp-
tion faster. The public key is set to be X = gx mod p.
To encrypt a message M ∈ Z∗
p, a new value r ∈ Zm, for
m = 2|x|, is chosen at random; the resulting ciphertext is
(gr, X r·M ). (Typically M is a key for a separate symmetric
encryption mechanism.) Decryption of a ciphertext (R, Y )
is performed by computing Rx mod p, inverting it modulo p,
and then multiplying Y by the result modulo p.
Our attack abuses the fact that computation of Rx mod p
during decryption is performed using the square-and-multiply
modular exponentiation algorithm. The pseudocode of Fig. 2
is a close proxy of the code used by libgcrypt.
6.1 With a Work-Conserving Scheduler
Experiment settings. We evaluated our attack in a set-
ting in which two paravirtualized guest VMs, each of which
possesses two VCPUs, co-reside on a single-socket quad-core
processor, speciﬁcally an Intel Core 2 Q9650 with an oper-
ating frequency of 3.0GHz. The two guest VMs and Dom0
were each given weight 256 and cap 0; in particular, this
conﬁguration is work-conserving, i.e., it allows any of them
to continue utilizing a PCPU provided that no other domain
needs it. Dom0 was given a single VCPU. One guest VM
acted as the victim and the other as the attacker. We ran
Xen 4.0 as the virtualization substrate, with rdtsc emula-
tion disabled. Both VMs ran an Ubuntu 10.04 server with
a Linux kernel 2.6.32.16. The size of the memory in the
guest VMs was large enough to avoid frequent page swap-
ping and so was irrelevant to the experiments. The victim
VM ran GnuPG v.2.0.19 with libgcrypt version v.1.5.0, the
latest versions as of this writing. The victim’s ElGamal pri-
vate key was generated with security parameter κ = 4096.
Other parameters for our attack are shown in Fig. 4.
[ρ1, ρ2]
Sec. 6.2
100
Sec. 6.1
α
β
ζ
θ
τ
γ
[1, 4]
100
[1, 4]
200
5
9
30
5
Parameter
5
9
35
5
50
Figure 4: Parameter settings
for attacks
In general, the at-
tacker can either pas-
sively wait for peri-
ods where it shares
a PCPU with the
victim, or can ac-
tively “create” more
frequent and longer
such periods on pur-
pose.
To abbrevi-
ate our experiment,
we assumed a situa-
tion that is to the at-
tacker’s advantage (but is nevertheless realistic), in which
both Dom0 and one victim VCPU are CPU-bound, run-
ning non-cryptographic computational tasks. These con-
ditions maximized the frequency with which the attacker
and the other victim VCPU share a PCPU. As discussed
in Sec. 4.3.2, Dom0 can be loaded by, for example, forcing
it to analyze a high rate of traﬃc with expensive ﬁltering
rules. We experimented with several such scenarios (vary-
ing in the number of rules and packet rates), as well as other
situations that would encourage the attacker and victim to
share a PCPU (e.g., dedicating one core to Dom0, which
“might be a good idea for systems running I/O intensive
guests” [47]), many of which gave results similar to those
reported here.
Another way in which we were generous to the attacker
in this demonstration was that we assumed the victim VM
would often perform ElGamal decryption with the target
313s
t
n
e
m
g
a
r
f
f
o
r
e
b
m
u
N
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
200 235 275 315 355 395 435 475 510 550 590
Length of fragment (number of operations)
)
%
(
e
c
n
e
u
q
e
s
g
n
i
n
n
a
p
s
e
h
t
f
o
y
c
a
r
u
c
c
A
 1
 0.95
 0.9
 0.85
 0.8
 0.75
10
15
20
25
30
35
40
45
50
Number of fragments in each batch
(a)
(b)
Figure 6: Results with work-conserving scheduler
(Sec. 6.1).
(a) Frequency of fragment lengths ex-
tracted, each bar represents the number of frag-
ments whose length falls between the x-axis labels.
(b) Accuracy of spanning sequences as a function of
number of fragments in a batch.
key—e.g., because the attacker had the ability to remotely
trigger decryption, as might be realistic for a network service
that the attacker could invoke—and that this decryption ex-
ecuted on the victim VCPU that was not already compute-
bound. As such, in our demonstration, the attacker did
not have to wait indeﬁnitely for a private-key decryption,
but rather the victim performed decryptions over and over.
Given our ability to ﬁlter non-cryptographic observations,
less frequent exponentiations would slow down, but not pre-
vent, the attack. In fact, it is worth noting that exponen-
tiation with the private exponent under attack constitutes
only roughly 2% of the execution time of a private-key de-
cryption, and so even in this demonstration, 98% of victim
execution was irrelevant to our attack and ﬁltered out by
our techniques.
Experiment results. Our SVM was trained as per the
procedure discussed in Sec. 5.1 with prime-probe results
from 30, 000 Square operations, 30, 000 Mult operations, and
80, 000 ModReduce operations. We skewed the training data
toward ModReduce operations to minimize ModReduce op-
erations being misclassiﬁed as Square or Mult operations. A
three-fold cross validation resulted in the confusion matrix
shown in Fig. 5.
In the attack, we per-
formed 300, 000, 000 prime-
probe trials
in chunks of
100, 000.
The data collec-
tion lasted about six hours,
during which roughly 1000
key-related fragments were
recovered from our HMM
(Sec. 5.2).
S M R
.91
.09
S
.07
M .01
.02
.97
R
.00
.92
.01
Figure 5: Confusion
matrix for SVM
Of these, 330 key-related fragments had length at least α.
The lengths of these fragments are shown in Fig. 6(a). Let
the accuracy of a fragment be deﬁned as 1 minus the normal-
ized edit distance of the fragment from ground truth, i.e.,
the edit distance divided by the length of the fragment. On
average, these fragments had 0.958 accuracy with a standard
deviation of 0.0164.
We then combined fragments (Sec. 5.3) to produce span-
ning sequences. The accuracy of these spanning sequences
was a function of the number of fragments in each batch,
as shown in Fig. 6(b). We chose to use batches of 30 frag-
ments each, yielding an average spanning sequence accuracy
of 0.981.
The ﬁnal step was to combine the spanning sequences (end
of Sec. 5.3). The resulting key had no erasures, insertions or
replacements. The only uncertainties arose from ∗ labels at
the two ends or occasionally in the middle, each representing
“no-op” (a spurious operation) or a single Square or Mult
operation. This left us needing to perform a brute-force
search for the uncertain bits, but the search space was only
9, 862 keys.3
6.2 With a Non-Work-Conserving Scheduler
We also evaluated the attack for a non-work-conserving
setting of the Xen scheduler which is conﬁgured as weight =
256 and cap = 80 (and other parameters as shown in Fig. 4).
The induced workload in Dom0 and the victim remains the
same as in the previous section. Recall from Sec. 4 that this