## Page 146
120
第3章：正则表达式的特性和流派概览
单个字节
Perl和PCRE（也包括PHP）支持用\C匹配单个字节，即使该字节位于某个多字节编码的
字符之中（相反，其他功能都是基于字符的)。这个功能很危险，如果运用不当，可能会导
致内部错误，所以只有在清楚自己所作所为的情况下，才能使用它。我找不到恰当运用的
例子，所以下文不再提及。
Unicode组合字符序列：\x
Perl和PHP支持用\x缩略表示八P（M)\D（M)*，它可以视为点号的扩展。它匹配一个基本
字符（除\p（M）之外的任何字符），之后可能有任意数目的组合字符（除\p（M）之外）。
之前已经介绍过（°107），Unicode体系包括基本字符和组合字符，二者可以合成“看起来”
的单个字符，例如a（‘a’的编码是U+0061，读音符号‘’的编码是U+0300）。有的字符
可能包含不止一个的组合字符。例如，‘’就包括‘c'，然后是变音符‘"，最后是短音
符‘"”（Unicode编码分别是U+0063、U+0327和U+0306）。
保险，因为此方法假设‘c”用单个Unicode代码点U+0oc7表示，而不是‘c’加上变音符
(U+0063加上U+0327）。如果需要专门处理，可以使用fran（c，？IC)aisi，不过在这里，
用fran\xaisi取代‘fran.aisi是个好办法。
除了能够匹配结尾的组合字符之外，\X与点号还有两个差别。其一是，\X始终能匹配换行
符和其他Unicode行终结符（109），而点号只有在点号通配模式（111），或者工具软件
提供的其他匹配模式下才可以。另一点是，点号通配模式下的点号无论什么情况下都能匹
配任何字符，而八x不能匹配以组合字符开头的字符。
字符组简记法：\w、\d、\B、\W、\D、\S
通常支持的简记法有：
\d数字等价于‘[0-9]，如果工具软件支持Unicode，能匹配所有的Unicode数字。
\D非数字字符等价于[^\d]。
w单词中的字符一般等价于[a-zA-Z0-9_]。某些工具软件中'w不能匹配下画线，
而另一些工具软件的w则能支持当前locale（87）中的所有数字和字符。如果
支持Unicode，w通常能表示所有数字和字符，而在ava.util.regex和PCRE
（也包括PHP）中，\w严格等价于（a-zA-Z0-9_]1。
---
## Page 147
常用的元字符和特性
121
\W非单词字符等价于[^\w]]。
\s空白字符在支持ASClI的系统中，它通常等价于'[\f\n\r\t\v]。在支持Unicode
的系统中，有时包含Unicode的“换行”控制字符U+0085，有时包含“空白
(whitespace）”属性\p(z）（参见下一节的介绍）。
\S非空白字符等价于[^\s]]。
87页已经介绍过，POSIX的locale设定会影响这些简记符号的含义（尤其是\w)。支持
Unicode的程序中，\w通常能匹配更多的字符，例如\p（L）（下一节介绍）和下画线。
Unicode属性，字母表和区块：\p（Prop）、\P（Prop）
表面上看，Unicode只是一套字符映射规则（106)，其实Unicode标准远远不止这些。它
看的”，“这个字符是标记字符（mark)，它必须与其他字符一同使用”等等。
不同的正则表达式系统对这些属性的支持也不相同，但是许多支持Unicode的程序能够通过
\p{quality)和\P(qualiry）支持其中的一部分。比如"\p（L）就是个简单的例子，这里‘L'
的意思是“字母（letter)”（相对于数字number、标点punctuation和口音accent，之类）。‘L”
是一种普通属性（generalproperty，也称为分类category）。我们马上会了解到，可以用"p(…）！
和P{）来测试其他“属性”，当然支持最广泛的还是常见的属性。
常见的属性请见表3-8。每个字符（实际上是代码点，包括那些目前没有对应字符的代码点）
都可以用一个普通属性匹配。普通属性的名字是单个字符（例如‘L’表示字母letter，‘s"
表示符号symbol，等等），但是某些系统中可以用多个字母表述属性（例如‘Letter’和
‘Symbol')，比如Perl就支持这样。
在某些系统中，单字母属性名可能不需要花括号（例如，用\pL而不是\p（L)）。有的系统
qualities）时，我们会见到要求使用Is/In前缀的例子（注12）。
按照表3-9，每个用单字符表示的普通属性可以进一步分为多个双字母表示的子属性
，，，（），“（-s）
注12：我们会看到（见第125页的表格），所有的IS/In前缀都有点多余。老版本的Unicode
推荐一种做法，而更早的实现推荐另一种。在Perl5.8的开发过程中，我与负责简化Perl
的小组一起工作。目前Perl对此的规定是：如非指定要使用某个Unicode区块，就不应
，，，
---
## Page 148
122
第3章：正则表达式的特性和流派概览
表3-8：基本的Unicode属性分类
分类
等价表示法及描述
\p(L)
\p（Letter}——字母
\p(M)
\D(Mark)—不能单独出现，而必须与其他基本字符一起出现（重音符号、
包围框，等等）的字符
p(z)
p（Separator）一用于表示分隔，但本身不可见的字符（各种空白字符）
\p(s)
\p（Symbol）一各种图形符号（Dingdats）和字母符号
\p(N)
p（Number）—任何数字字符
\p(P)
p（Punctuation）—标点字符
\p(c)
p（Other}—匹配其他任何字符（很少用于正常字符）
母（titlecaseletter)”、“修饰符字母”和“其他字母”。每个代码点能且只能属于一种子属性。
要补充的是，某些实现方式支持特殊的复合子属性，例如用\p（L&）表示“分大小写的
(cased）”字母，也就是说[\p（Lu）p（Ll）\p（Lt）]。
表3-9还给出了某些实现方式支持的属性名的全称（例如，“Lowercase_Letter”，而不是
“L1”"）。按照Unicode的标准，各种形式都应该能够接受（例如‘LowercaseLetter”、
‘LOWERCASE_LETTER'、‘Lowercase'Letter'、‘1owercase-letter')，不过，为了保
持一致，我推荐使用表3-9中的形式）。
字母表（Scripts）有的系统能够按照字母表（书写系统writing system）的名字以“p(…)）
来匹配。例如，用\p（Hebrew)匹配希伯来文独有的字符（但不包含其他书写系统中常见的
字符，例如空格和标点)。
某些字母表是基于语言的（例如印度古哈拉地语、泰国语、切罗基语，等等）。有的覆盖了
多种语言（例如拉丁文、西里尔文)，还有些语言包含多种字母表，例如日语的字符就来自
平假名、片假名、汉语和拉丁语。请读者参考自己系统的文档获取完整的信息。
字母表不会包含特定的书写系统中的所有字符，而只包含独属于（或者几乎独属于）此书
写系统中的字符。常见的字符，例如空格和标点不属于任何字母表，而是属于通用的
IsCommon伪字母表（pseudo-script），用\p（IsCommon）匹配。还有一个伪字母表Inherited，
它包括从其所属的字母表中基本字符继承而来的组合字符。
---
## Page 149
常用的元字符和特性
123
表3-9：基本的Unicode子属性
属性
等价表示法及说明
\p(L1)
\p(Lowercase_Letter）—小写字母。
\p(Lu)
\p（Uppercase_Letter)—大写字母。
\p(Lt)
\p（TitlecaBe_Letter）一出现在单词开头的字母（例如，字符Dz是小写字母
dz和大写字母Dz的首字母形式）。
\p(L&)
\p（Ll）、\p（Lu）、\D（Lt）并集的简记法。
\p(Lm)
p（Modifier_Letter}一少数形似字母的，有特殊用途的字符。
\p(Lo}
\p（Other_Letter）—没有大小写形式，也不属于修饰符的字母，包括希伯来语、
阿拉伯语、孟加拉语、泰国语、日语中的字母。
\p(Mn)
音符号、变音符号、某些“元音记号”和语调标记。
\p(Mc}
大多数“元音记号”，这些语言包括孟加拉语、印度古哈拉地语、泰米尔语、泰卢
固语、埃纳德语、马来语、僧伽罗语、缅甸语和高棉语）。
\p(Me)
\p（EncolBing_Mark）—可以围住其他字符的标记，例如圆圈、方框、钻石型等。
\p(Z8)
\p（Space_Separator}一各种空白字符，例如空格符、不间断空格（non-break
space)，以及各种固定宽度的空白字符。
\p(z1)
\p（Line_Separator)-LINESEPARATOR字符（U+2028）。
\p(zp)
\p（Paragraph_Separator)—PARAGRAPHSEPARATOR字符（U+2029）。
\p(Sm)
\p(Math_Symbol)
数学符号、+、一、表示分数的横线。
\p(Sc)
\p（Currency_Symbol）—货币将号、S、g、￥、。
\p(Sk)
\p(Modifier_Symbol)-
大多数版本中它表示组合字符，但是作为功能完整的
字符，它们有自己的意义。
\p(So)
\p（Other_Symbol）一各种印刷符号、框图符号、盲文符号，以及非字母形式的
中文字符，等等。
\p(Nd)
\p（Decimal_Digit_Number）一一各种字母表中从0到9的数字（不包括中文、
日文和韩文）。
\p(N1)
\p（Letter_Number）—几乎所有的罗马数字。
\p(No)
\p（Other_Number）一作为加密符号（superscripts）和记号的数字，非阿拉伯数
字的数字表示字符（不包括中文、日文、韩文中的字符）。
(Pa)d
\p（Dash_Punctuation）—各种格式的连字符（hyphen）和短划线（dash）。
\p(Ps)
\p（Open_Punctuation）一（、和《等字符。
\p(Pe)
\p（Close_Punctuation）—)、和》等字符。
\p(Pi)
\p（Initial_Punctuation}—《、“、等字符。
\p(Pc)
\p（Connector_Punctuation）—少数有特殊语法含义的标，点，如下画线。
\p(Po)
\p（Other_Punctuation）用于表示其他所有标点字符：!、&、·、：、：等。
\p（Cc}
\p（Control）—ASCII和Latin-1编码中的控制字符（TAB、LF、CR等）。
\p(cf)
\p(Format)
用于表示格式的不可见字符。
\p(Co)
\p（Private_Use}-
分配与私人用途的代码点（例如公司的logo）。
\p(Cn)
\p（Unassigned）--目前尚未分配字符的代码点。
---
## Page 150
124
第3章：正则表达式的特性和流派概览
内的代码点。例如，Tibetan区块表是从U+0F00到U+0FFF的256个代码点。其中的字符，
在Perl和java.util.regex中可以用\p{InTibetan}来匹配，在.NET中可以用
\p（IsTibetan）来匹配（细节见后文）。
区块有许多种，包括对应大多数书写系统的区块（希伯来、泰米尔、基本拉丁语、西里尔
文等等），以及特殊的字符组型（货币、箭头、文本框、印刷符号等）。
Tibetan是一个典型的区块，因为其中的所有字符都是按照西藏文定义的，此区块之外不
存在专属于藏语的字符。不过，区块仍然不如学母表，原因如下：
·区块可能包含未赋值的代码点。例如，Tibetan区块中大约有25%的代码点没有分配
字符。
·并不是看起来与区块相关的所有字符都在区块内部。例如，在currency区块中就没
有通用的货币符号‘α'，也没有常见的s、c、E、E和?（幸好，这时候我们可以用currency
属性\p(Sc))。
·区块通常包含不相关的字符。例如￥（表示“元"）属于Latin_1_Supplement区块。
·属于某个字母表的字符可能同时包含于多个区块。例如，希腊字符同时出现在Greek
和Greek_Extended区块中。
对区块的支持比对字母表的支持更普遍。不过这两者很容易混淆，因为在命名上存在许多
重叠（例如，Unicode同时提供了Tibetan字母表和Tibetan区块）。
此外，按照下页的表3-10所示，这些命名本身也没有统一的标准。在Perl和java.uti1.
regex中，Tibetan区块表示为\p{InTibetan))，但是在.NET中又表示为\p（IeTibetan）
（更糟糕的是，在Perl中这是Tibetan字母表的另一种表示法）。
其他属性（Otherproperties/qualities）上面介绍的知识并不是通用的。表3-10详细介绍了它
们的适用情况。
写顺序环视（从左至右还是从右至左，等等）、与字符相关的元音，以及其他属性。有些实
现方式还容许用户根据需要临时创建属性。请参考具体的程序提供的文档了解细节。
---
## Page 151
常用的元字符和特性
125
表3-10：属性/字母表/区块的支持情况
特性
Perl
Java
.NET
PHP/PCRE
√基本属性，例如\D（L）
√
√基本属性缩略表示法，例如\pL
基本属性缩略表示法，例如\D（IsL）
√
√
V基本属性的全名，例如p（Letter）
√
复合属性，例如\p（L&）
√字母表，例如\p（Greek)
字母表全名，例如\p（IaGreek）
V区块，例如\p（Cyrillic）
如果没
有字母
√区块全名，例如\p（InCyrillic）
区块全名，例如\p（IsCyrillic）
√排除功能，例如P（.}
排除功能，例如\p（~...}
\p(Any)