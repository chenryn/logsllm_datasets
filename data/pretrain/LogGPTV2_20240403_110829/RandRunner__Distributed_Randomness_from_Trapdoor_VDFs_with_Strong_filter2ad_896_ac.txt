protocol design avoids the necessity for a Byzantine consensus
protocol during execution to agree on random beacon values
and the hereby associated requirements and overheads such
as high communication complexity. Further, as RandRunner’s
beacon values are deterministic, the protocol does not suffer
from inconsistencies due to network partitions. Hence, an
adversary may only be able to inﬂuence the unpredictability
guarantees of the presented design, for which we show in
Section VI-D that it can be sufﬁciently bounded within our
protocol such that the desirable properties expected from a
random beacon are nevertheless achieved.
IV. SYSTEM AND THREAT MODEL
The adversary’s goals are to violate the security guarantees
expected for a random beacon protocol. In particular,
the
adversary might try to bias the produced randomness, induce
a liveness- or consistency failure, or trick a (third) party into
accepting an invalid random beacon. Another attack is to
learn/predict future random beacon outputs before other nodes
obtain those values. We consider the following system model
in which we demonstrate the security of our protocol against
all of these attacks:
|
We assume a ﬁxed set of n participants P = {1, 2, . . . , n}
with corresponding public parameters P = {ppi
i ∈
P ∧ VerifySetup(λ, ppi) = accept}. The validity of these
parameters can independently and non-interactively be veriﬁed
by all parties, and only valid participants with valid parameters
form the set P. For our analysis, we consider a static adversar-
ial model where at most f nodes may be corrupted and exhibit
Byzantine behavior, i.e., deviate arbitrarily from the protocol.
A node is termed correct or honest if it does not engage in any
incorrect behavior over the duration of the protocol execution,
otherwise it is considered Byzantine. Adaptive adversaries and
their impact on security are further discussed in Section VI-D6.
Messages sent by correct participants are reliably delivered
within a bounded network delay of ∆NET seconds. However,
within this work we also show that the unique properties of our
VDF-based construction provide an upper bound ∆VDF on the
time it takes any participant to learn of the next random beacon
value independent of the actual network delay, guaranteeing
a notion of liveness to the protocol that is not captured by
more classical protocol designs. Speciﬁcally, we outline that
only unpredictability is affected by network asynchrony while
all other properties are upheld regardless. After a sufﬁcient
period of network stability where ∆NET holds, i.e., some
global stabilization time (GST) [23], unpredictability is again
achieved quickly. Our simulation results in Appendix C show
that in practice the original unpredictability guarantees are
restored within a linear amount of time relative to the duration
of network asynchrony.
To start the protocol, we assume an initial unpredictable
value R0 which becomes available or is computed by all
parties after the setup is completed. This bootstrapping step
is further described in Section V-B. We furthermore inherit
the security assumptions for the underlying trapdoor VDF
with strong uniqueness, as described in Section II, and model
cryptographic hash functions as random oracles. All VDFs
are conﬁgured such that correct nodes are able to evaluate
them within ∆VDF time without knowledge of the trapdoor.
We grant the adversaries a computational advantage allowing
them to perform this computation α times faster, i.e., within
∆VDF /α seconds. The number T of iterations used for eval-
uating the VDFs is empirically derived as it highly depends
on the speed of the actual implementation. It is set such that
executing T iterations of the VDF takes approximately ∆VDF
seconds on the best hardware available.
In Section VI-D, we carefully analyze the interplay be-
tween the protocol parameters ∆NET , ∆VDF , α and the
assumption regarding the adversarial strength (f vs. n). For
example, if the adversary can compute a VDF as quickly as
correct nodes, i.e., α = 1, and the parameter ∆VDF and ∆NET
are chosen such that ∆VDF (cid:29) ∆NET , the protocol achieves
unpredictability (against all attacks) as long as the adversary
controls less than half of all nodes, i.e., f < n/2. If we
consider a (weaker) covert adversary [1], which secretly wants
to predict future values, instead we show that our protocol can
even tolerate a majority of nodes under the adversary’s control
(Section VI-D5).
V. THE RANDRUNNER PROTOCOL
In this section, we provide details on how to setup and
execute the RandRunner protocol. Throughout our description,
we will reuse the Setup, VerifySetup, Eval, TrapdoorEval
and Verify algorithms introduced in Section II-D.
A. Setup
Before the random beacon protocol can be started, each
participant has to execute the parameter generation, exchange
and veriﬁcation steps:
Parameter Generation: Regarding initialization, each par-
ticipant i has to generate the public parameters ppi used with
its individual trapdoor VDF with strong uniqueness. Each party
i computes the public parameters ppi and the corresponding
secret trapdoor ski by executing Setup(λ). Note that λ (and
λRSA in the speciﬁc case) are globally agreed upon security
parameters, i.e., they cannot be selected by the participant
individually as the produced parameters would be considered
invalid by other participants.
Parameter Exchange: After all parties have completed the
initialization, they have to exchange their public parameters
ppi, but keep their individual
the
end of this step, each participant should have the same set
P∗ = {pp1, pp2, ..., ppn∗} containing the public parameters
of all participants. There are several options how to realize
this in practice, ranging from the use of a consensus protocol
or public blockchain used as a bulletin board, to an ofﬂine
exchange where all parties come together in person.
trapdoor ski secret. At
Parameter Veriﬁcation: Finally, each party veriﬁes the set
of exchanged parameters. For the particular VDF we use, this
is accomplished by running VerifySetup(λ, ppi) for all ppi ∈
P∗. Since VerifySetup is a deterministic function, all honest
participants implicitly agree on the result for each ppi. All
invalid parameters can be removed from the set P∗ to form
P, the set of veriﬁed public parameters. The remaining parties
which provided the valid parameters form the set P of parties
executing the protocol.
B. Bootstrapping
After all public parameters are set up, exchanged and
veriﬁed, the protocol is ready to be executed. Starting the
protocol requires an initial random beacon value R0 which
becomes available to all parties running the protocol after the
setup is completed at approximately the same time. R0 is used
6
to select the leader for the ﬁrst protocol round and serves as
the input to the ﬁrst (leader’s) VDF being evaluated.
One can of course use an output of another randomness
beacon protocol as initial value R0. Fortunately, there are a
range of possible solutions which avoid this circular depen-
dency, because the properties required from R0 are less strict
compared to the properties expected from a random beacon.
In particular, we require that R0 is unpredictable at the time
the public parameter are set up and that it is of high min-
entropy. This independence of the generated parameters and
R0 then ensures that adversaries cannot tweak their public
parameters in a way which would give them a unfair advantage
at protocol start. A rather simple, yet secure method to obtain
R0 is to use the block hash of some future block from an
existing blockchain such as Bitcoin or Ethereum.8 Notice that
a miner-introduced bias is not a problem for bootstrapping our
protocol because bias-resistance is not required for R0, yet
using a existing blockchain in this way does not provide an
efﬁcient randomness beacon with strong guarantees, as among
many properties the missing bias-resistance is crucial for the
latter purpose.
C. Execution
After successful completion of the protocol setup and
bootstrapping, the participants are ready to start the proto-
col execution. The aim of this execution is to provide a
continuous sequence of publicly-veriﬁable, unpredictable and
bias-resistant random beacon values R1, R2, ..., R∞. We give
the full protocol from the viewpoint of a node i ∈ P in
Algorithm 1 and describe the details for protocol execution as
follows: Our protocol proceeds in consecutive rounds. At the
beginning of each round r ≥ 1, a unique leader (cid:96)r is selected.
For this purpose we consider two different approaches: round-
robin selection (RandRunner-RR) and randomized sampling
(RandRunner-RS) of a leader with uniform probability from
all nodes P, using the previous protocol output Rr−1 as seed
for the selection. We provide the details for both approaches in
Section V-D. Independent of the method chosen, the protocol
produces a new random beacon value Rr, i.e., a fresh 256 bit
value as output of a cryptographic hash function at the end of
each round.
Execution (common case):
In each round r, it is the
leader’s duty to advance the protocol into the next round. It
does so by ﬁrst mapping the previous random beacon value
Rr−1 to the input space of its VDF using a cryptographic
hash function Hin : {0, 1}256 → X(cid:96)r:
xr ←− Hin(Rr−1) .
(4)
Here, the leaders public parameters pplr deﬁne the input and
output space X(cid:96)r and Y(cid:96)r of (cid:96)r’s VDF, whereas xr is used
to denote the input to (cid:96)r’s VDF in round r. Then, the leader
computes the output yr and corresponding proof πr of its VDF
as follows:
(yr, πr) ←− TrapdoorEval (pplr , xr, T, sk(cid:96)r ) .
(5)
Finally, the values (yr, πr) are broadcast to all nodes. As soon
as such a message is received, a node checks the correctness
8In the unlikely case that there is indeed a fork for the exact block used,the
randomness beacon can be executed in parallel until the fork is eventually
resolvedand the initial value R0 becomes agreed upon.
7
of the received values using Verify(pplr , xr, T, yr, πr). If the
values are valid, the node can compute the round’s random
beacon output Rr by applying a cryptographic hash function
Hout : Y(cid:96)r → {0, 1}256 to the output:
Rr ←− Hout(yr) .
(6)
Execution (failure / adversarial case):
In case the leader
does not fulﬁll its duties as described, independent of whether
it failed or actively tried to attack the protocol, we still want to
ensure that each round r is completed and produces the same
result. To achieve this, at the beginning of round r each non-
leader node immediately starts to compute the round’s VDF
output (yr, πr) ←− Eval (pplr , xr, T ) in the background. Due
to the sequentiality property of the VDF, this computation takes
at least T sequential steps. However, after completing those
steps (or receiving the valid values from the round’s leader)
the values yr and πr are available and Rr can be derived as
before (see Formula 6). Here, the strong uniqueness property
of the VDF ensures that the resulting values are always equal
to the ones computed by the leader.
D. Leader Selection
In this section, we describe two possible leader selection
strategies which can be used in our protocol design, namely
randomized round-robin and sampling uniformly at random.
Depending on the used strategy, the achievable unpredictability
guarantees differ to some extent. Random sampling bounds the
predictability of the sequence of future leaders and ensures a
probabilistic guarantee for the unpredictability of the random
beacon, whereas the round-robin approach can provide an
absolute bound for unpredictability but the entire sequence of
leaders is known after R0 has been published. For a detailed
analysis we refer to Section VI-D.
Randomized Round-Robin (RandRunner-RR): When em-
ploying randomized round-robin as the leader selection method
in our protocol, we rely on R0 to deterministically derive a
randomized sequence (cid:101)P of the protocols participants P. In
of participants in randomized order. Let (cid:101)P[j] denote the jth
other words, R0 is used as a seed to shufﬂe (a canonical
representation of) the set of participants P to obtain the list
element of this list using 0-based indexing. Then, the leaders
for all rounds r ≥ 1 are deﬁned as follows:
(cid:96)r := (cid:101)P[r mod n] .
(7)
Randomized sampling (RandRunner-RS): In this case, the
output from the previous round, i.e., Rr−1, is used to sample
the leader (cid:96)r for round r uniformly at random from the
set of all parties P. Interpreting the 256-bit beacon outputs
as numbers, a simple approach which guarantees that each
participant i, denoted by its index from 1 to n, is selected
with probability (very close to) 1/n, is to deﬁne (cid:96)r as:
(cid:96)r := (Rr−1 mod n) + 1 .
(8)
E. Dissemination
As described in Section V-C and given in Algorithm 1 (line
8), the leader of each round r is responsible for broadcasting
the VDF’s unique output yr and the corresponding proof πr.
If all nodes follow the described protocol and the network is
Algorithm 1: The RandRunner protocol as executed by each node i ∈ P
Input: ski, {pp1, pp2, ..., ppn}, T , R0
Output: R1, R2, R3, ...R∞
begin
set r ←− 1
repeat forever
derive the round’s leader lr
compute xr ←− Hin(Rr−1)
if i = (cid:96)r then
// details provided in Section V-D
// maps Rr−1 to in input space of the VDF
// in this case, this node (i) is the leader of round r, so the trapdoor ski is used to quickly compute the VDF
compute (yr, πr) ←− VDF .TrapdoorEval (ppi, xr, T, ski)
broadcast (yr, πr)
else
// otherwise we obtain the VDF output via the network or by evaluation without the trapdoor
start computing (yr, πr) ←− VDF .Eval(pplr , xr, T )
while (yr, πr) is not yet computed/received do
listen for incoming messages (y, π)
if message (y, π) received and VDF .Verify(pplr , xr, T, y, π) = accept then
set (yr, πr) ←− (y, π)
compute and output Rr = Hout(yr)
set r ←− r + 1
// maps the VDF output yr to a 256 bit string
// move to the next round
reliable, then this broadcasting step is as simple as the leader
sending the values (yr, πr) to the other n − 1 participants
directly. This would result in a communication complexity of
O(n). However, an adversarial leader might selectively send
out this information to a subset of all nodes. While any node
can always derive (yr, πr) by computing the round’s VDF
eventually, a slowdown for the subset of nodes which did
not receive the message from the adversarial leader is intro-
duced. A potential consequence is a violation of RandRunner’s
unpredictability guarantees (see Section VI-D): Some correct
nodes, in inadvertent collaboration with the adversary, may
progress faster than the other correct nodes. The root cause
for this phenomenon is a combination of two events: (i) an
adversary only selectively sent information to some correct
nodes and (ii) some correct nodes are not yet able to verify
the information received from other correct nodes, as they are
missing values from prior rounds (not sent to them by the
adversary). Since there is no way to inﬂuence the adversary’s
actions, we focus on (ii) for our countermeasures. In particular,
we set out to ensure that after a correct leader broadcasts
(yr, πr) all (correct) nodes already have, or timely receive, the
information required from prior rounds to verify these values.
Two possible strategies to accomplish this are given in the
following:
1) Reliable Broadcast: A straightforward solution is to em-
ploy a reliable broadcast where every (correct) node forwards
any valid message (yr, πr) it received to all other nodes once.
This results in a communication complexity of O(n2) as each