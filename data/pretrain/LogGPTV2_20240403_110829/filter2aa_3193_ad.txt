operations and stored on 1 byte. Considering the header of the ISO-TP layer, a message containing the vehicle speed should have the 
following form: \x03\x41\x0d\x??\x00\x00\x00\x00. To drive at 255km/h, at least according to the diagnostic software shown in Figure 11, 
the following rule is given to the CANSPY filtering engine:  ANY >0x7DE DATA 8 REG:"^\x03\x41\x0d(.)" ALTR "\xff". Needless to 
say, under no circumstances our city car could ever drive that fast. That also raises a question: what about car that can drive faster than 
255km/h? Finally, this example also shows that the internal filtering engine only works on a single CAN frame at a time and thus does not 
account for fragmented payload. This is something we might consider supporting in the near future (i.e., for now, do this over Ethernet). 
--wireshark -X lua_script:EtherCAN.lua 
local sll_tab = DissectorTable.get("sll.ltype") 
local can_hdl = sll_tab:get_dissector(0x000C) 
local eth_tab = DissectorTable.get("ethertype") 
eth_tab:add(0x88b5, can_hdl) 
Figure 11. Man-in-the-middle attack on a diagnostic tool 
Now, the second approach mentioned earlier: testing the diagnostic software on a custom testbed. This means that we are going to use the 
CANSPY platform to emulate the car from the point of view of the OBD-II port. To that end, we will rely on Scapy [5] to easily dissect 
and forge CAN frames. Precisely, to achieve this, we need to first create the SocketCAN and ISO-TP layers (see Code 2 and Code 3).  
Code 2. Scapy layer for SocketCAN 
Code 3. Scapy layer for ISO-TP 
class ISOTP(Packet): 
  name = 'ISOTP' 
  fields_desc = [ 
    BitEnumField('type', 0xf, 4, {0:'single', 1:'first', 2:'consecutive', 3:'flow_control'}), 
    ConditionalField(BitField('pad', 0, 4), lambda pkt: pkt.type > 3), 
    ConditionalField(BitField('size', 0, 4), lambda pkt: pkt.type == 0), 
    ConditionalField(BitField('total_size', 0, 12), lambda pkt: pkt.type == 1), 
    ConditionalField(BitField('index', 0, 4), lambda pkt: pkt.type == 2), 
    ConditionalField(BitEnumField('flag', 0, 4, {0:'continue', 1:'wait', 2:'abort'}), lambda pkt: pkt.type == 3), 
    ConditionalField(ByteField('block_size', 0), lambda pkt: pkt.type == 3), 
    ConditionalField(ByteField('ST', 0), lambda pkt: pkt.type == 3), 
    ConditionalField(StrLenField('data', '', length_from=lambda pkt: 6 if pkt.type == 1 else 7), lambda pkt: pkt.type  0: 
                        force = self.force.get(chr(p.data.data.mode) + chr(p.data.data.PID)) 
                        if force: 
                            reply.data[OBD_PID].payload = Raw(force) 
                        sendp(reply.fragment(), iface=self.eth_iface, inter=0.2, verbose=False) 
                    else: 
                        print ("Unsupported OBD Mode/PID: %02x/%02x" % (p.data.data.mode, p.data.data.PID)) 
    def update(self, mode, pid, data): 
        self.force[chr(mode) + chr(pid)] = data 
    def stop(self): 
        self.process = False 
class OBD_PID(Packet): 
    name = 'OBD_PID' 
    fields_desc = [ 
        ByteField('mode', 0), 
        ByteField('PID', 0) 
    ] 
class J1939(Packet): 
    name = 'J1939' 
    fields_desc = [ 
        ConditionalField(IntField('pid_support20', 0xffffffff), 
            lambda pkt: pkt.underlayer.mode-0x40 in [1,9] and pkt.underlayer.PID == 0x00), 
        ConditionalField(ByteField('speed', 0x0), 
            lambda pkt: pkt.underlayer.mode-0x40 in [1,2] and pkt.underlayer.PID == 0x0d), 
        ConditionalField(StrField('VIN', '0' * 17), 
            lambda pkt: pkt.underlayer.mode-0x40 == 9 and pkt.underlayer.PID == 0x02) 
    ] 
UART adapters for monitoring and debugging purposes (6). It is worth mentioning that this testbed use CANSPY extension boards version 
1.2 and that fewer jumper wires would be needed with version 1.3. Regarding the potential need for an external 12-volt power source, 
version 1.3 of the CANSPY extension board is also providing an electrical terminal on the left of the CAN1 DB9 port to avoid wiring 
mistakes that could damage the device (see section 4.1 for details). 
Figure 12. A complete testbed based on CANSPY devices (picture on the left and diagram on the right) 
6. CONCLUSION 
In this paper, after covering the most important aspects of the CAN protocol, we have explained how the standard penetration methodology 
applies when auditing ECUs that are not directly exposed by the attack surface. Then, we have presented CANSPY, a platform giving 
security auditors the ability to block, forward or modify CAN frames on the fly, autonomously with a set of rules or interactively using 
Ethernet and a packet manipulation framework such as Scapy. In this regard, we have also detailed both the hardware and the firmware 
designs as well as all the options that we have implemented in order to cover all possible situations, including the complex situation when 
the congestion on a CAN bus must not be tampered with. 
Finally, in order to demonstrate the versatility and the efficiency of the CANSPY platform, we turned around a security issue usually 
considered when it comes to cars: instead of auditing an ECU through the OBD-II connector, we have detailed how the CANSPY platform 
can be used to partially emulate ECUs in order to lay the groundwork needed to audit a device that connects to this very connector. On this 
subject, we have also demonstrated how easy it is to build a CAN testbed using only CANSPY devices and jumper wires. 
As for future work, the internal filtering engine is critical to manipulate CAN frames destined to ECUs that have low tolerance regarding 
timing constraints. As of now, its filtering capabilities are limited to a single CAN frame at a time without even considering the possible 
fragmentation of the data. Adding defragmentation capabilities to the internal filtering engine is next on our to-do list. 
7. CODE RELEASE 
The CANSPY project is open-source and can be acquired here: https://bitbucket.org/jcdemay/canspy. The internal filtering engine uses 
code from the SRLE library [6] and from the GNU Core utilities [9], respectively licensed under the GNU General Public License version 
2 and version 3. All other parts of the firmware are licensed under the BSD 3-Clause license. 
8. REFERENCES 
[1] https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/ 
[2] https://www.blackhat.com/docs/us-14/materials/us-14-Picod-Bringing-Software-Defined-Radio-To-The-Penetration-Testing-Community-WP.pdf 
[3] http://goodfet.sourceforge.net/hardware/goodthopter12/ 
[4] http://www.st.com/resource/en/data_brief/stm32cubef4.pdf 
[5] http://secdev.org/projects/scapy 
[6] https://docs.cesanta.com/slre/ 
[7] http://blog.crysys.hu/2015/10/hacking-cars-in-the-style-of-stuxnet/ 
[8] https://en.wikipedia.org/wiki/OBD-II_PIDs 
[9] http://www.gnu.org/software/coreutils/coreutils.html 
1 
2 
3 
4 
5 
6