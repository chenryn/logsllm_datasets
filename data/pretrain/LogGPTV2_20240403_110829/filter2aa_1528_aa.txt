The SOA/XML Threat Model 
and New XML/SOA/Web 2.0 Attacks & Threats
Steve Orrin
Dir of Security Solutions, SSG-SPI
Intel Corp.
Agenda
•Intro to SOA/Web 2.0 and the Security Challenge
•The XML/SOA Threat Model
•Details on XML/Web Services & SOA Threats
•Next Generation and Web 2.0 Threats
•The Evolving Enterprise and Environment
•Summary
•Q&A
What is SOA?
A service-oriented architecture is essentially a collection of services. 
These services communicate with each other and the communication can 
involve either simple data passing or direct application execution also it 
could involve two or more services coordinating some activity. 
What is a Service?
•
A service is a function that is well-defined, self-contained, and does not 
depend on the context or state of other services. 
What is a Web Service?
•
Typically a web service is XML/SOAP based and most often described 
by WSDL and Schemas. In most SOA implementations a directory 
system known as UDDI is used to for Web Service discovery and 
central publication.
What is Web 2.0?
Web 2.0, a phrase coined by Tim O'Reilly and popularized by the first Web 2.0 
conference in 2004, refers to a second generation of web-based communities 
and hosted services — such as social-networking sites, wikis and folksonomies 
— which facilitate collaboration and sharing between users. 
Although the term suggests a new version of the World Wide Web, it does not 
refer to an update to Web technical specifications, but to changes in the ways 
software developers and end-users use the web as a platform. 
Characteristics of Web 2.0
•
The transition of web-sites from isolated information silos to sources of 
content and functionality, thus becoming computing platforms serving web 
applications to end-users
•
A social phenomenon embracing an approach to generating and distributing 
Web content itself, characterized by open communication, decentralization of 
authority, freedom to share and re-use, and "the market as a conversation"
•
Enhanced organization and categorization of content, emphasizing deep 
linking
Source: Wikipedia, the free encyclopedia
http://en.wikipedia.org/wiki/Web_2
It’s a SOA World after all…
Fortune 1000 customers are deploying 
datacenter SOA and Web Services apps today
Average XML network traffic load of 24.4% 
expected to grow to 35.5% next year
Average number of WS applications across 
enterprise companies is up 300% over the last 
year
Gartner predicts 46% of IT professional services 
market is Web Services related in 2010
Web Services are now the preferred choice for 
application development - although performance 
barriers prevent widespread implementation
Why SOA? – The Cruel Reality
Screen
Scrape
Screen
Scrape
Screen
Scrape
Screen
Scrape
Message
Queue
Message
Queue
Message
Queue
Download
File
Download
File
Download
File
Transactio 
n
File
Transaction
File
Transaction
File
ORB
ORB
CICS Gateway
CICS Gateway
APPC
APPC
RPC
RPC
Transaction
File
Sockets
Sockets
Message
Message
Application
Application
Application
Application
Application
Application
Application
Application
Application
Application
Where do SOA Apps & Web 2.0 data come from?
EDI Replacement
Decoupling of DB from C/S apps
EAI & Portals
e-Commerce
ERP/CRM/SFA/SCM
Social Networking & Collaboration
End User data
EAI
The SOA Implementation Roadmap
Example of Services Server Stack
Operating System
Linux, Solaris, Windows, Apple
OS service & libs
NPTL, OpenLDAP
Security libs
PHP
Hardware
NuSOAP
Web Services and RIAs
Web Services
hosting & caching
Apache, Jetty,..
Database 
MySQL
postgreSQL
Perl
Ruby
Base support for 
Web services
C/C++
Java
Axis
SOAP4R
SOAP::Lite 
gSOAP
Custom tools 
perf analyzer
Web services 
popular languages
Web service 
instrumentation 
tools
Other
Compilers
Vmware/Xen/KVM
ESB,
Message 
Queuing
GWT
This part is 
flexible
Some Typical Web 2.0 Server Environments
•LAMP = Linux, Apache, MySQL, PHP (or Perl or Python)
•MAMP = Mac OS X, Apache, MySQL, PHP
•LAMR = Linux, Apache, MySQL, Ruby
•WAMP = Microsoft Windows, Apache, MySQL, PHP
•WIMP = Windows, IIS, MySQL, and PHP
•WIMSA or WISA = Windows, IIS, Microsoft SQL Server, ASP
•WISC = Windows, IIS, SQL Server, and C#
•WISP = Windows, IIS, SQL Server, and PHP
•JOLT = Java, Oracle, Linux, and Tomcat
•STOJ = Solaris , Tomcat, Oracle and Java
SOA Business Drivers
Effective Reuse of IT Applications & Systems
•
IT layers & applications
•
Across organization & trust boundaries
Reduce IT Complexity 
•
Implementation (language/platform agnostic)
•
Standards-based application interaction
Faster IT results at lower costs
•
Easier Fellow Traveler & internal system integration
•
Less “custom” software/adapters/B2B Gateways
•
Easier to introduce new services
Why is security so important in SOA
•Drastic & Fundamental shift in Authentication & 
Authorization models
•Real Business apps affected
•Non repudiation
•Externalization of application functionality and loss of 
internal controls
•Next generation threats and new risks
Increasing Risks
Time-to-Market
Complexity is Growing
•
Mixed Bag of Standards
•
Interoperability, reuse, etc.
Increasing Business Risks
•
Continued Rise in malicious activity 
•
Government scrutiny and 
regulation pressures (HIPAA, GLBA, 
SB1386, etc..)
•
Liability precedents for security 
incidents
The New Frontier
•
Many of the attacks occur at the 
Application/Service layers 
Reported Vulnerabilities & Incidents
0
1,000
2,000
3,000
4,000
5,000
6,000
7,000
8,000
9,000
2000
2001
2002
2003
2004
2005
2006
0
50,000
100,000
150,000
200,000
250,000
300,000
350,000
400,000
Source: CERT & CSI/FBI Survey
Vulnerabilities Reported
Incidents Reported
Old Attacks still valid
•
Common Web Vulnerabilities
•
Injection Attacks
•
Buffer Overflow
•
Denial of Service
The New Manipulation Attacks
•
Entity and Referral Attacks
•
DTD and Schema Attacks
The Next Generation Attacks
•
Web Service Enabled Application Attacks
•
Multi-Phase Attacks
XPATH Injection
XML/Web Services Attacks
Cross-Site Scripting in 
Client Side XML 
Documents
SAP/BAPI attacks via 
SOAP
Endless loop Denial of 
service Attacks
Schema Redirection 
Attacks
SQL Injection in 
XQuery
Entity Expansion Attacks
Command Injection 
SOAP Attacks
SOA/XML Threat Model
Payload / Content threats
•
Back End Target
– Ex: SQL Injection, BAPI Protocol attack, Universal Tunnel Misuse
•
End User Target
– Ex: XSS, Malicious Active Content
XML Misuse/Abuse
– Ex: XML Injection, XPath Injection, XQuery Injection, 
XML Structure Manipulation
– Ex: Entity Expansion, Referral Attacks, Schema Poisoning
Infrastructure Attacks
– Ex: Buffer overflow of Server 
– Ex: DNS Poisoning for CA Server
XML/SOA Threat Model
Payload / Content threats
•
Payload and Content threats use XML as a carrier for malicious code 
and content. 
•
Many of the existing web and application layer threats can leverage 
XML formats for delivery of the attack to targets. 
•
This category can be divided into two sub-categories:
– Back End Target: the attacker uses the XML flow/message to attack a 
target application. 
– End User Target: targets the browser or client application of the service 
end user. 
•
One of the key differentiators of XML threats in general is that often 
times the XML document is persistent and lives on beyond the 
transaction. 
– This leads to longer term threat as an attack can be delivered before the 
actual attack occurs.
XML/SOA Threat Model
XML Misuse/Abuse
•
Here XML structures and methods are misused to cause 
malicious outcomes.
– As powerful a language XML and its uses are for the developer 
and application infrastructure, it is equally powerful for the 
attacker. 
•
In the Misuse example of XPath Injection:
– The attacker can leverage the advanced functionality of XPath 
querying to perform more targeted and deeper invasions than its 
Web cousin SQL injection. 
– One example of this is the Blind XPath Injection attack
XML/SOA Threat Model
XML Structure Manipulation
•
Malicious XML structures and formats. 
•
Most of these attacks use legitimate XML constructs in malicious ways. 
– 
Two common examples of this are Entity attacks (both External and Expansion based) and 
DTD/Schema based threats. 
– 
The most common example of Entity threat is the Entity Expansion attack. 
•
The malicious XML message is used to force recursive entity expansion (or other repeated 
processing) that completely uses up available server resources. 
•
The first example of this type of attack was the "many laughs" attack (some times called the 
‘billion laughs’ attack). 
...