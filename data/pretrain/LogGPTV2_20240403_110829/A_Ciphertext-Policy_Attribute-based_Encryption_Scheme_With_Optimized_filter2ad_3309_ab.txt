set of attributes: the challenger runs Extract(u,B(u),
MSK, param) and forwards the resulting private key to
the adversary. The user u is appended to the corrup-
tion list ΛC .
Challenge. The adversary A outputs a target access pol-
icy A∗ and two equal length message M∗
1. Next,
the challenger picks a random b $← {0, 1} and runs
Encrypt(M∗
b , A∗, param) to obtain ct∗. Finally the
challenger outputs ct∗.
0,M∗
Query phase 2. The adversary A continues to adaptively
ask queries as in the ﬁrst phase.
Guess. The adversary A eventually outputs its guess b(cid:48) ∈
{0, 1} for b.
We say the adversary wins the game if b(cid:48) = b, and if B(u)
does not satisfy A∗ for all u ∈ ΛC (the corruption list). We
then denote the advantage of adversary to win the game by
AdvA = Pr(cid:2)b = b
(cid:48)(cid:3) − 1
.
2
Deﬁnition 1 A ciphertext-policy attribute-based encryption
scheme is secure if all polynomial time adversaries have at
most a negligible advantage in the above game.
There is also a classical restricted scenario: a selective at-
tacker provides the target access policy A∗ at the beginning
of the security game.
Deﬁnition 2 (Selective Security) A CP-ABE scheme is
said to be selectively secure if it is secure against a selective
adversary in the above security game.
2.2 Access Structures
Deﬁnition 3 (Access Structures) Let {Att1, Att2, . . . , Attn}
be a set of attributes. A collection A ⊆ 2{Att1,Att2,...,Attn} is
monotone if ∀B, C : if B ∈ A and B ⊆ C then C ∈ A. An
access structure (respectively, monotone access structure) is
a collection (respectively, monotone collection) A of non-
empty subsets of {Att1, Att2, . . . , Attn}, i.e, A ⊆ 2{Att1,Att2,...,Attn}\
{∅}. The sets in A are called the authorized sets, and the
sets not in A are called the unauthorized sets.
We note that the access structure A will contain the autho-
rized sets of attributes. In this paper, we consider monotone
access structures only. However, as explained in [26], it is
also possible to achieve general access structures at the cost
of doubling the number of attributes in the system.
2.3 Bilinear Maps and (P, Q, f )−GDDHE Assump-
tions
Let G,(cid:101)G and GT denote three ﬁnite multiplicative abelian
of (cid:101)G
An admissible bilinear map is a function e : G×(cid:101)G → GT ,
groups of large prime order p > 2λ where λ is the security
parameter. Let g be a generator of G and ˜g be a generator
which veriﬁes the following properties for all a, b ∈ Zp:
1. e(ga, ˜gb) = e(g, ˜g)ab,
2. e(ga, ˜gb) = 1 iﬀ a = 0 or b = 0,
3. e(ga, ˜gb) is eﬃciently computable.
bilinear map group system. We say that the bilinear map
group system is in:
If such a function exists, we say that (p, G,(cid:101)G, GT , e) is a
1. Type 1 Pairings if G = (cid:101)G
2. Type 2 Pairings if G (cid:54)= (cid:101)G but there is an eﬃciently
computable homomorphism φ : (cid:101)G → G
3. Type 3 Pairings if G (cid:54)= (cid:101)G but there are no eﬃciently
computable homomorphism between (cid:101)G and G
232We now recall the generalization of the Diﬃe-Hellman
exponent assumption in Type 1 Pairings bilinear map group
system (which was ﬁrst introduced in [5]).
Let (p, G, GT , e(·,·)) be a bilinear map group system and
g ∈ G be a generator of G. Set gT = e(g, g) ∈ GT . Let
s, n be positive integers and P, Q ∈ Fp[X1, . . . , Xn]s be two
s-tuples of n-variate polynomials over Fp. In other words,
P and Q are two lists containing s multivariate polynomials
each. We write P = (p1, p2, . . . , ps) and Q = (q1, q2, . . . , qs)
and impose that p1 = q1 = 1. For any function h : Fp → Ω
and vector (x1, . . . , xn) ∈ Fn
p , h(P (x1, . . . , xn)) stands for
(h(p1(x1, . . . , xn)), . . . , h(ps(x1, . . . , xn))) ∈ Ωs. We use a
similar notation for the s-tuple Q. Let f ∈ Fp[X1, . . . , Xn].
We say that f depends on (P, Q), denoted f ∈ (cid:104)P, Q(cid:105), when
there exists a linear decomposition
ai,j · pi · pj +
bi · qi,
ai,j, bi ∈ Zp
(cid:88)
1≤i≤s
(cid:88)
f =
1≤i,j≤s
Let P, Q be as above and f ∈ Fp[X1, . . . , Xn]. The (P, Q, f )−
GDHE problem is deﬁned as follows.
Deﬁnition 4 ((P, Q, f ) − GDHE) [5].
Given the tuple H(x1, . . . , xn) = (gP (x1,...,xn), gQ(x1,...,xn)
Gs × Gs
Deﬁnition 5 ((P, Q, f ) − GDDHE) [5].
Given the tuple H(x1, . . . , xn) = (gP (x1,...,xn), gQ(x1,...,xn)
∈ Gs × Gs
T and T ∈ GT decide whether T = gf (x1,...,xn)
) ∈
)
T compute gf (x1,...,xn)
.
T
T
T
T
.
p
In this paper, we will prove that our scheme is semantically
secure under (P, Q, f )− GDDHE assumption. Note that our
scheme can be naturally extended to the Type 3 Pairings.
2.4 LSSS Matrices
Let p be a prime and B be the attributes’ universe. If A is
an access structure on B, then one can ﬁnd an LSSS matrix
M ∈ Z(cid:96)×n
, and a function ρ, that labels the rows of M with
the attributes from B that appear in A (making use of the
standard techniques in [4] if needed), i.e. ρ ∈ F ([(cid:96)] → B).
The pair (M, ρ) is called an LSSS access policy. Deﬁne the
vector −→y = (s, y2, . . . , yn)⊥ $← Zn
p with sharing secret value
−→
λ = M.−→y . Let S denote
s, and denote the vector shares
an authorized set for A encoded by the policy (M, ρ), I be
the set of rows of M whose labels are in S, i.e. I = {i|i ∈
secret s, (cid:80)
[(cid:96)] ∧ ρ(i) ∈ S}. There exists constants {ωi}i∈I in Zp such
that for any valid shares {λi = (M.−→y )i}i∈I of a sharing
i∈I ωiλi = s, and the constants {ωi}i∈I can be
found in time polynomial in the size of matrix M . For
completeness, we recall from [20] the algorithm to convert
from a boolean formula to a corresponding LSSS matrix in
Appendix B.
We now consider the following example, assume that the
set of attributes are:
• Faculty member(FM), Administrative staﬀ(AS), Crypto,
Wireless Communications(WC), Image processing(IP),
Garbled computer(GC), Security for IoT-based Appli-
cations(SIoTA), Fog computing(FC), and Internet of
Things(IoT).
We deﬁne the following access policy on the set of at-
tributes:
• (Faculty member and Crypto and Garbled computer) or
(Faculty member and Wireless Communications and Fog
Computing).
This access policy is already in DNF form and contains only
two clauses.
By following the algorithm deﬁned in Appendix B we ob-
tain the access tree and corresponding LSSS matrix as in
the ﬁgure 1. Where the LSSS matrix is:
1 1 0 0 0
1 0 0 1 0
0 1 1 0 0
0 0 1 0 0
0 0 0 1 1
0 0 0 0 1
Here, the number of rows of the LSSS matrix is 6 (count-
ing the reused attribute FM) which is bigger than the num-
ber of clauses (which is 2). Here the ratio is only three
because we took a simple example with few attributes and
clauses. In a more general DNF formula where each clause
contains many attributes, the number of rows of the LSSS
matrix will even be orders of magnitude bigger than the
number of clauses. This is what motivated our new con-
struction that we describe in the next section.
3. CONSTRUCTION
3.1 Overview of Our Approach
In this construction, we reuse the Setup algorithm and
the Key generation algorithm of [18]. Regarding the en-
cryption phase, starting with an access boolean formula,
the encryptor ﬁrst describes this formula in the DNF form
(the disjunctions (OR) of conjunctions (AND) of attributes)
and then compares between the number of clauses in the re-
sulting DNF form and the size of the original access boolean
formula. Next, the encryptor produces the ciphertext de-
pending on which is smaller between them, by using either
our new encryption algorithm or the existing encryption al-
gorithm from [18] (section 3.5). The decryption phase auto-
matically follows using either our new decryption algorithm
or the existing decryption algorithm from [18] (section 3.5).
Regarding our new encryption and decryption algorithms,
to achieve a constant number of Pairing computations for
decryption we do not use the LSSS matrix in the construc-
tion, instead of that we only make use of LSSS technique
in the proof. Note that, when using LSSS matrix in the
construction almost existing schemes [26, 23, 8, 28, 27, 10]
to name a few require at least |I| Pairing computations for
decryption, |I| is the number of attributes for a decryption
key to satisfy a ciphertext access policy.
3.2 Detailed Construction
The construction of our scheme is detailed as follows.
Setup(λ,B): The algorithm takes as input the security pa-
rameter and attribute universe description, it gener-
ates the parameters of the system as follows: Let
N = |B| be the maximal number of attributes in the
system, let (p, G, GT , e(·,·)) be a bilinear group sys-
tem. The algorithm ﬁrst picks a random generator
g ∈ G, random scalars a, α ∈ Zp, and then computes
ga, gα. Next, the algorithm generates N group ele-
ments in G associated with N attributes in the system
h1, . . . , hN .
The master secret key is set as:
MSK = gα
233Figure 1: Access tree on the left and corresponding LSSS matrix on the right.
The global parameters are set as:
param = (g, ga, e(g, g)α, h1, . . . , hN )
Extract(u,B(u), MSK, param): The set of attributes of user
u is B(u). The algorithm picks randomly a scalar
su ∈ Zp, and computes the secret key for user u as
du = (du0 , d
u0 ,{dui}i∈B(u))
(cid:48)
where:
du0 = gα · ga·su , d
u0 = gsu ,{dui = hsu
(cid:48)
i }i∈B(u)
In section 5.1 we show that user just needs to keep
du0 secret, she can publish the rest of her secret key
to the public domain.
Encrypt(M, β, param): Starting with an access boolean for-
mula β, assume that the size of β is |β|. The encryptor
ﬁrst describes β in the form of DNF access policy as
β = (β1∨···∨βm), where each βi is a set of attributes,
i = 1, . . . , m.
The encryptor picks a scalar s $← Zp, then computes
the ﬁrst two elements of the ciphertext:
C = M · e(g, g)α·s, C0 = gs
Decrypt(ct, du, param): The user u ﬁrst parses the ct and
checks the number of elements in ct.
If it is equal
to m + 1, it means that she needs to use our new
decryption algorithm. She parses the ct as (C0, C1,
. . . Cm), then she ﬁnds j such that βj ⊂ B(u), and
computes:
(cid:81)
e(C0, du0
e(d(cid:48)
i∈βj
u0 , Cj)
dui )
=
e(gs, gα(ga(cid:81)
e(gsu , (ga(cid:81)
i∈βj
i∈βj
hi)su )
hi)s)
= e(g, g)α·s = K
Then she recovers the plaintext as M = C · K−1.
Else, she reverts to the decryption algorithm of [18].
She deﬁnes the set I ⊂ {1, 2, . . . , (cid:96)} such that I = {i :
ρ(i) ∈ B(u)}. Let {ωi ∈ Zp}i∈I be a set of constants
such that if {λi} are valid shares of any secret s ac-
i∈I ωiλi = s. Note that from
i∈I ωiMi = (1, 0, . . . , 0) where Mi is
the i-th row of the matrix M , she can determine these
constants. She parses the ct as (C0, C1, . . . C(cid:96)) and
computes:
cording to M then (cid:80)
the relation (cid:80)
e(
−ωi
i
C
u0 ) · e(C0, du0
(cid:48)
, d
−ωi
uρ(i) ) = K
d
(cid:89)
i∈I
(cid:89)
i∈I
To compute other elements, the encryptor compares
between m and |β|. If m ≤ |β| the encryptor uses our
new algorithm and computes:
C1 = (ga (cid:89)
hi)s, . . . , Cm = (ga (cid:89)
hi)s
i∈β1
i∈βm
Else, she reverts to the encryption algorithm of [18].
The encryptor constructs an LSSS matrix M repre-
senting the original boolean formula β, and a map
function ρ such that (M, ρ) ∈ (Z(cid:96)×n
,F([(cid:96)] → [N ])).