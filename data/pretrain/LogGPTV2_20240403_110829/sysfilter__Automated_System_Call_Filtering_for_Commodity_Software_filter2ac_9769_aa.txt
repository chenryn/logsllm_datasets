title:sysfilter: Automated System Call Filtering for Commodity Software
author:Nicholas DeMarinis and
Kent Williams-King and
Di Jin and
Rodrigo Fonseca and
Vasileios P. Kemerlis
sysfilter: Automated System Call Filtering for Commodity Software
Nicholas DeMarinis Kent Williams-King Di Jin
Rodrigo Fonseca
Vasileios P. Kemerlis
Department of Computer Science
Brown University
Abstract
Modern OSes provide a rich set of services to applications,
primarily accessible via the system call API, to support the
ever growing functionality of contemporary software. How-
ever, despite the fact that applications require access to part of
the system call API (to function properly), OS kernels allow
full and unrestricted use of the entire system call set. This not
only violates the principle of least privilege, but also enables
attackers to utilize extra OS services, after seizing control
of vulnerable applications, or escalate privileges further via
exploiting vulnerabilities in less-stressed kernel interfaces.
To tackle this problem, we present sysfilter: a binary
analysis-based framework that automatically (1) limits what
OS services attackers can (ab)use, by enforcing the principle
of least privilege with respect to the system call API, and
(2) reduces the attack surface of the kernel, by restricting the
system call set available to userland processes. We implement
sysfilter for x86-64 Linux, and present a set of program
analyses for constructing system call sets statically, and in
a scalable, precise, and complete (safe over-approximation)
manner. In addition, we evaluate our prototype in terms of cor-
rectness using 411 binaries (real-world C/C++ applications)
and ≈38.5K tests to assert their functionality. Furthermore,
we measure the impact of our enforcement mechanism(s),
demonstrating minimal, or negligible, run-time slowdown.
Lastly, we conclude with a large scale study of the system
call proﬁle of ≈30K C/C++ applications (from Debian sid),
reporting insights that justify our design and can aid that of
future (system call-based) policing mechanisms.
1 Introduction
Software is continuously growing in complexity and size.
/bin/true, the “tiny” command typically used as aid in
shell scripts, was ﬁrst introduced in the 7th edition of the
Unix distribution (Bell Labs) and consisted of zero lines of
code (LOC); by 2012, in Ubuntu, true has grown up to 2.3
KLOC [28]. Likewise, the bash binary has gone from 11.3
KB (Unix V5, 1974) up to 2.1 MB (Ubuntu, 2014) [28].
This constant stream of additional functionality integrated
into modern applications, i.e., feature creep, not only has
dire effects in terms of security and protection [1, 71], but
also necessitates a rich set of OS services: applications need
to interact with the OS kernel—and, primarily, they do so
via the system call (syscall) API [52]—in order to perform
useful tasks, such as acquiring or releasing memory, spawning
and terminating additional processes and execution threads,
communicating with other programs on the same or remote
hosts, interacting with the ﬁlesystem, and performing I/O and
process introspection.
Indicatively, at the time of writing, the Linux kernel (v5.5)
provides support for 347 syscalls in x86-64. However, not
every application requires access to the complete syscall
set; e.g., ≈45%/65% of all (C/C++) applications in Debian
“sid” (development distribution) [86] do not make use of
execve/listen in x86-64 Linux. In other words, roughly
one-half of these applications do not require the ability (and
should not be permitted) to invoke other programs or accept
network connections. Alas, the OS kernel provides full and
unrestricted access to the entirety set of syscalls. This is not
only a violation of the principle of least privilege [76], but also
allows attackers to: (a) utilize additional OS services after seiz-
ing control of vulnerable applications [69], and (b) escalate
their privileges further via exploiting vulnerabilities in unused,
or less-stressed, OS kernel interfaces [33–35, 43, 65, 66].
To mitigate the effects of (a) and (b) above, we present
sysfilter: a framework to (automatically) limit what OS
services attackers can (ab)use, by enforcing the principle of
least privilege with respect to the syscall API [69], and reduce
the attack surface of the OS kernel, by restricting the syscall
set available to userland processes [43]. sysfilter consists
of two parts: system call set extraction and system call set
enforcement. The former receives as input a target applica-
tion, in binary form, automatically resolves dependencies to
dynamic shared libraries, constructs a safe—but tight—over-
approximation of the program’s function-call graph (FCG),
and performs a set of program analyses atop the FCG, in order
to extract the set of developer-intended syscalls.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    459
The latter enforces the extracted set of syscalls, effectively
sandboxing the input binary. We implemented sysfilter in
x86-64 Linux, atop the Egalito framework [95], while our
program analyses, crafted as “passes” over Egalito’s inter-
mediate representation, are scalable, precise, and complete.
sysfilter can extract a tight over-approximation of the set
of developer-intended syscalls for ≈90% of all C/C++ ap-
plications in Debian sid, in less than 200s (or for ≈50% of
these apps in less than 30s; § 5). Moreover, sysfilter re-
quires no source code (i.e., it operates on stripped binaries,
compiled using modern toolchains [26, 67]), and can sandbox
programs that consist of components written in different lan-
guages (e.g., C, C++) or compiled-by different frameworks
(GCC, LLVM). Importantly, sysfilter does not rely (on any
form of) dynamic testing, as the results of this approach are
usually both unsound and incomplete [62].
Further, we evaluate sysfilter across three dimensions:
(1) correctness, (2) performance overhead, and (3) effective-
ness. As far as (1) is concerned, we used 411 binaries from
various packages/projects, including the GNU Coreutils (100,
672), SPEC CINT2006 (12, 12), SQLite (7, 31190), Redis (6,
81), Vim (3, 255), Nginx (1, 356), GNU M4 (1, 236), GNU
Wget (1, 130). MariaDB (156, 2059), and FFmpeg (124,
3756), to extract and enforce their corresponding syscall sets;
once sandboxed, we stress-tested them with ≈38.5K tests.
In all cases, sysfilter managed to extract a complete and
tight over-approximation of the respective syscall sets, demon-
strating that our prototype can successfully handle complex,
real-world software. (The numbers A,B in parentheses denote
the number of binaries analyzed/enforced and the number of
tests used to stress-test them, respectively.)
Regarding (2), we used SPEC CINT2006, Nginx, and
Redis—i.e., 19 program binaries in total. In all cases, the
sandboxed versions exhibited minimal, or negligible, run-time
slowdown due to syscall ﬁltering; we explored a plethora of
different settings and conﬁgurations, including interpreted vs.
JIT-compiled ﬁlters, and ﬁlter code that implements sandbox-
ing using a linear search (within the respective syscall set) vs.
ﬁlter code that utilizes a skip list-based approach. Lastly, with
respect to (3), we investigated how sysfilter can reduce
the attack surface of the OS, by inquiring what percentage
of all C/C++ applications in Debian sid (≈30K binaries in
total) can exploit 23 Linux kernel vulnerabilities after hard-
ened with sysfilter. Although sysfilter does not defend
against control- or data-ﬂow hijacking [87] our results demon-
strate that it can mitigate attacks by means of least privilege
enforcement and (OS) attack surface reduction.
We conclude our work with a large scale study of the syscall
sets of ≈30K C/C++ applications (Debian sid), reporting
insights regarding the syscall set sizes (i.e., the number of
syscalls per binary), most- and least-frequently used syscalls,
syscall site distribution (libraries vs. main binary), and more.
The results of this analysis not only guide our design, but can
also aid that of future syscall policing mechanisms.
2 Background and Threat Model
Adversarial Capabilities In this work, we consider userland
applications that are written in memory-unsafe languages,
such as C/C++ and assembly (ASM). The attacker can trigger
vulnerabilities, either in the main binaries of the applications
or in the various libraries the latter are using, resulting in mem-
ory corruption [87]. Note that we do not restrict ourselves to
speciﬁc kinds of vulnerabilities (e.g., stack- or heap-based
memory errors, or, more generally, spatial or temporal mem-
ory safety bugs) [59,60] or exploitation techniques (e.g., code
injection, code reuse) [13, 78, 79, 87, 97].
More speciﬁcally, the attacker can: (a) trigger memory
safety-related vulnerabilities in the target application, multiple
times if needed, and construct and utilize exploitation prim-
itives, such as arbitrary memory writes [16] and reads [81];
and (b) use, or combine, such primitives to tamper-with criti-
cal data (e.g., function and vtable pointers, return addresses)
for hijacking the control ﬂow of the target application and
achieve arbitrary code execution [83] via means of code in-
jection [97] or code reuse [10, 13, 24, 29, 32, 78, 79]. In terms
of adversarial capabilities, our threat model is on par with the
state of the art in C/C++/ASM exploitation [41, 87]. Lastly,
we assume that the target applications consist of benign code:
i.e., they do not contain malicious components.
Hardening Assumptions The primary focus of this work
is modern, x86-64 Linux applications, written in C, C++, or
ASM (or any combination thereof), and compiled in a position-
independent [64] manner via toolchains that (by default) do
not mix code and data [3, 4], such as GCC and LLVM.1 In
addition to the above, we assume the presence of stack un-
winding information (.eh_frame section) in the ELF [12]
ﬁles that constitute the target applications.
In § 3, we explain in detail the reasons for these two
requirements—i.e., position-independent code (PIC) and
.eh_frame sections. However, note that (a) PIC is enabled
by default in modern Linux distributions [14, 95], while
(b) .eh_frame sections are present in modern GCC- and
LLVM-compiled code [3, 95]. The main reason for (a) is full
ASLR (Address Space Layout Randomization): in position-
dependent executables ASLR will only randomize the process
stack and mmap- and brk-based heap [7]. Moreover, PIC in
x86-64 incurs negligible performance overhead due to the ex-
istence of PC-relative data transfer instructions (%rip-relative
mov) and extra general-purpose registers (16 vs. 8 in x86). As
far as (b) is concerned, stack unwinding information is man-
dated by C++ code for exception handling [49], while both
GCC and LLVM emit .eh_frame sections even for C code to
support interoperability with C++ [95] and various features of
certain libc (C library) implementations—e.g., backtrace
in glibc (GNU C Library).
1Andriesse et al. [4], and Alves-Foss and Song [3], have independently
veriﬁed that modern versions of both GCC and LLVM do not mix code and
data. icc (Intel C++ Compiler) still embeds data in code [3].
460    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Lastly, we assume a Linux kernel with support for
seccomp-BPF (SECure COMPuting with ﬁlters) [36]. (All
versions ≥ v3.5 provide support for seccomp-BPF in
x86-64.) Every other standard userland hardening feature
(e.g., NX, ASLR, stack-smashing protection) is orthogonal
to sysfilter; our proposed scheme does not require nor
preclude any such feature. The same is also true for less-
widespread mitigations, like CFI [9,96], CPI [40,53], code ran-
domization/diversiﬁcation [38, 41, 94], and protection against
data-only attacks [68].
3 Design and Implementation
Approach sysfilter aims at mitigating the effects of ap-
plication compromise by restricting access to the syscall
API [52]. The beneﬁts of this approach are twofold: (1) it
limits post-exploitation capabilities [69], and (2) it prevents
compromised applications from escalating their privileges fur-
ther via exploiting vulnerabilities in unused, or less-stressed,
kernel interfaces [33–35, 43, 65, 66].
The main idea behind (1) is that applications need to inter-
act with the kernel—and they primarily do so via the syscall
API—in order to perform useful tasks. Indicatively, at the
time of writing, the Linux kernel (v5.5) provides support for
347 syscalls in x86-64. (This number does not include the
syscalls needed for executing 32-bit x86 applications atop
a 64-bit kernel, or 64-bit processes that adhere to the x32
ABI [50].) However, despite the fact that applications only
require access to part of the aforementioned API to function
properly (e.g., non-networked applications do not need access
to the socket-related syscalls), the OS kernel provides full
and unrestricted access to the entirety set of syscalls.
This approach violates the principle of least privilege [76]
and enables attackers to utilize additional OS services after
seizing control of vulnerable applications. By restricting ac-
cess to certain syscalls, sysfilter naturally limits what OS
services attackers can (ab)use and enforces the principle of
least privilege with respect to the syscall API: i.e., programs
are allowed to issue only developer-intended syscalls.
As far as (2) is concerned, multiple studies have repeatedly
divulged that the exploitation of vulnerabilities in kernel (or in
even lower-level, more-privileged [19,99]) code is an essential
part of privilege escalation attacks [33–35, 43, 65, 66]. To this
end, sysfilter reduces the attack surface of the OS kernel,
by restricting the syscall set available to userland processes,
effectively providing defense-in-depth protection.
Overview sysfilter consists of two parts (see Figure 1):
(1) a syscall-set extraction component; and (2) a syscall-set
enforcement component. The former receives as input the
target application in binary form (ELF ﬁle), automatically
resolves all dependencies to dynamic shared libraries (.so
ELF objects), and constructs a safe over-approximation of
the program’s FCG—across all objects in scope. Finally, it
performs a set of program analyses atop FCG, in order to make
the over-approximation as tight as possible and construct the
syscall set in question. Note that the tasks above are performed
statically and the syscall set returned by the extraction tool is
complete: i.e., under any given input, the syscalls performed
by the corresponding process are guaranteed to exist in the
syscall set—this includes syscalls that originate from the
binary itself, libc, or any other dynamically-loaded shared
library. The latter part enforces the extracted set of syscalls,
effectively sandboxing the input binary. Speciﬁcally, given a
set of syscall numbers, the enforcement tool converts them to
a BPF program [54] to be used with seccomp-BPF [36].
3.1 System Call Set Extraction
3.1.1 Analysis Scope
The input
to the syscall-set extraction component of
sysfilter is an (x86-64) ELF ﬁle that corresponds to the
main binary of the application (see Figure 1A). sysfilter
requires PIC as input, which is the default setting in mod-
ern Linux distributions [14, 95]. Once sysfilter veriﬁes
that the main binary is indeed PIC, adds it to the analysis
scope, and proceeds to resolve dependencies regarding dy-
namic shared libraries. This is accomplished by ﬁrst checking