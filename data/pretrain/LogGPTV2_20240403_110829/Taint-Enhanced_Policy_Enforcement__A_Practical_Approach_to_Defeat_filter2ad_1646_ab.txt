policy that disallows tainted format directives in the for-
mat string argument to the printf family of functions.
2.5 Attacks that “Hijack” Access Privileges. In this
section, we consider attacks that attempt to evade de-
tection by staying within the bounds of normal accesses
made by an application. These attacks are also referred
to as the confused deputy attacks [13].
Consider a web browser vulnerability that allows an
attack (embedded within a web page) to upload an ar-
bitrary ﬁle f owned by the browser user without the
user’s consent. Since the browser itself needs to access
many of the user’s ﬁles (e.g., cookies), a policy that pro-
hibits access to f may prevent normal browser opera-
tions. Instead, we need a policy that can infer whether
the access is being made during the normal course of
an operation of the browser, or due to an attack. One
way to do this is to take the taint information associated
with the ﬁle name. If this ﬁle is accessed during normal
browser operation, the ﬁle name would have originated
within its program text or from the user. However, if the
ﬁle name originated from a remote web site (i.e., an un-
trusted source), then it is likely to be an attack. Similar
examples include attacks on (a) P2P applications to up-
load (i.e., steal) user ﬁles, and (b) FTP servers to down-
USENIX Association
Security ’06: 15th USENIX Security Symposium
123
load sensitive ﬁles such as the password ﬁle that are nor-
mally accessed by the server.
A variant of the above scenario occurs in the context
of directory traversal attacks, where an attacker attempts
to access ﬁles outside of an authorized directory, e.g.,
the document root in the case of a web server. Typically,
this is done by including “..” characters in ﬁle names
to ascend above the document root. In case the victim
application already incorporates checks for “..” charac-
ters, attacker may attempt to evade this check by replac-
ing “.” with its hexadecimal or Unicode representation,
or by using various escape sequences. A taint-enhanced
policy can be used to selectively enforce a more restric-
tive policy on ﬁle access when the ﬁle name is tainted,
e.g., accesses outside of the document root directory may
be disallowed. Such a policy would not interfere with the
web server’s ability to access other ﬁles, e.g., its access
log or error log.
The key point about all attacks discussed in this sec-
tion is that conventional access control policies cannot
detect them. This is because the attacks do not stray
beyond the set of resources that are normally accessed
by a victim program. However, taint analysis provides
a clue to infer the intended use of an access. By incor-
porating this inferred intent in granting access requests,
taint-enhanced policies can provide better discrimina-
tion between attacks and legitimate uses of the privileges
granted to a victim application.
2.6 Discussion. The examples discussed above bring
out the following important points:
• Importance of ﬁne-grained taint information.
If we
used coarser granularity for taint-tracking, e.g., by
marking a program variable as tainted or untainted,
we would not be able to detect most of the attacks de-
scribed above. For instance, in the case of SQL in-
jection example, the variable cmd containing the SQL
query will always be marked as tainted, as it derives
part of its value from an untrusted variable name. As a
result, we cannot distinguish between legitimate uses
of the web application, when name contains an al-
phanumeric string, from an attack, when name con-
tains characters such as the semicolon and SQL com-
mands. A similar analysis can be made in the case
of stack-smashing and format-string attacks, cross-site
scripting, directory traversal, and so on.
• Need for taint-enhanced policies.
It is not possible
to prevent these attacks by enforcing conventional ac-
cess control policies. For instance, in the SQL injec-
tion example, one cannot use a policy that uniformly
prevents the use of semicolons and SQL commands
in cmd: such a policy would preclude any use of the
database, and cause the web application to fail. Simi-
larly, in the memory error example, one cannot have a
working program if all control transfers through point-
ers are prevented. Finally, the examples in Section 2.5
were speciﬁcally chosen to illustrate the need for com-
bining taint information into policies.
Another point to be made in this regard is that attacks
are not characterized simply by the presence or ab-
sence of tainted information in arguments to security-
critical operations. Instead, it is necessary to develop
policies that govern the manner in which tainted data
is used in these arguments.
3 Transformation for Taint Tracking
There are three main steps in taint-enhanced policy en-
forcement: (i) marking, i.e., identifying which external
inputs to the program are untrusted and should be marked
as tainted, (ii) tracking the ﬂow of taint through the pro-
gram, and (iii) checking inputs to security-sensitive op-
erations using taint-enhanced policies. This section dis-
cusses tracking, which is implemented using a source-
to-source transformation on C programs. The other two
steps are described in Section 4.
3.1 Runtime Representation of Taint
Our technique tracks taint information at the level of
bytes in memory. This is necessary to ensure accurate
taint-tracking for type-unsafe languages such as C, since
the approach can correctly deal with situations such as
out-of-bounds array writes that overwrite adjacent data.
A one-bit taint-tag is used for each byte of memory, with
a ‘0’ representing the absence of taint, and a ‘1’ repre-
senting the presence of taint. A bit-array tagmap stores
taint information. The taint bit associated with a byte at
address a is given by tagmap[a].
3.2 Basic Transformation
The source-code transformation described in this sec-
tion is designed to track explicit information ﬂows that
take place through assignments and arithmetic and bit-
operations. Flows that take place through conditionals
are addressed in Section 7.1. It is unusual in C programs
to have boolean-valued variables that are assigned the re-
sults of relational or logical operations. Hence we have
not considered taint propagation through such operators
in this paper. At a high-level, explicit ﬂows are simple to
understand:
• the result of an arithmetic/bit expression is tainted if
any of the variables in the expression is tainted;
• a variable x is tainted by an assignment x = e when-
ever e is tainted.
Speciﬁcally, Figure 2 shows how to compute the taint
value T (E) for an expression E. Figure 3 deﬁnes how
a statement S is transformed, and uses the deﬁnition of
T (E). When describing the transformation rules, we
124
Security ’06: 15th USENIX Security Symposium
USENIX Association
E
c
v
&E
∗E
T (E)
0
tag(&v,
sizeof (v))
0
tag(E,
sizeof (∗E))
(cast)E
T (E)
op(E)
T (E)
0
E1 op E2 T (E1) || T (E2)
0
Comment
Constants are untainted
tag(a, n) refers to n bits
starting at tagmap[a]
An address is
always untainted
Type casts don’t
change taint.
for arithmetic/bit op
otherwise
for arithmetic/bit op
otherwise
Figure 2: Deﬁnition of taint for expressions
S
v = E
S1; S2
if (E) S1
else S2
T rans(S)
v = E;
tag(&v, sizeof (v)) = T (E);
T rans(S1); T rans(S2)
if (E) T rans(S1)
else T rans(S2)
while (E) S while (E) T rans(S)
return E
f (a) { S }
return (E, T (E))
f (a, ta) {
v = f (E)
v = (∗f )(E)
tag(&a, sizeof (a)) = ta; T rans(S)}
(v, tag(&v, sizeof (v))) = f (E, T (E))
(v, tag(&v, sizeof (v))) = (∗f )(E, T (E))
Figure 3: Transformation of statements for taint-tracking
use a simpler form of C (e.g. expressions have no side
effects).
In our implementation, we use the CIL [19]
toolkit as the C front end to provide the simpler C form
that we need.
The transformation rules are self-explanatory for most
part, so we explain only the function-call related transfor-
mations. Consider a statement v = f (E), where f takes
a single argument. We introduce an additional argument
ta in the deﬁnition of f so that the taint tag associated
with its (single) parameter could be passed in. ta is ex-
plicitly assigned as the taint value of a at the beginning of
f’s body. (These two steps are necessary since the C lan-
guage uses call-by-value semantics. If call-by-reference
were to be used, then neither step would be needed.) In
a similar way, the taint associated with the return value
has to be explicitly passed back to the caller. We rep-
resent this in the transformation by returning a pair of
values as the return value. (In our implementation, we
do not actually introduce additional parameters or return
values; instead, we use a second stack to communicate
the taint values between the caller and the callee.)
It
is straight-forward to extend the transformation rules to
handle multi-argument functions.
We conclude this section with a clariﬁcation on our
notion of soundness of taint information. Consider any
variable x at any point during any execution of a trans-
formed program, and let a denote the location of this
variable. If the value stored at a is obtained from any
tainted input through assignments and arithmetic/bit op-
erations, then tagmap[a] should be set. Note that by
referring to the location of x rather than its name, we re-
quire that taint information be accurately tracked in the
presence of memory errors. To support this notion of
soundness, we needed to protect the tagmap from cor-
ruption, as described in Section 3.4.
3.3 Optimizations
The basic transformation described above is effective,
but introduces high overheads, sometimes causing a
slowdown by a factor of 5 or more. To improve per-
formance, we have developed several interesting runtime
and compile-time optimizations that have reduced over-
heads signiﬁcantly. More details about the performance
can be found in Section 6.4.
3.3.1 Runtime Optimizations In this section, we de-
scribe optimizations to the runtime data structures.
Use of 2-bit taint values.
In the implementation, ac-
cessing of taint-bits requires several bit-masking, bit-
shifting and unmasking operations, which degrade per-
formance signiﬁcantly. We observed that if 2-bit taint
tags are used,
the taint value for an integer will be
contained within a single byte (assuming 32-bit archi-
tecture), thereby eliminating these bit-level operations.
Since integer assignments occur very frequently, this op-
timization is quite effective.
This approach does increase the memory requirement
for tagmap by a factor of two, but on the other hand,
it opens up the possibility of tracking richer taint infor-
mation. For instance, it becomes possible to associate
different taint tags with different input sources and track
them independently. Alternatively, it may be possible to
use the two bits to capture “degree of taintedness.”
Allocation of tagmap.
Initially, we used a global vari-
able to implement tagmap. But the initialization of this
huge array (1GB) that took place at the program start in-
curred signiﬁcant overheads. Note that tag initialization
is warranted only for static data that is initialized at pro-
gram start. Other data (e.g., stack and heap data) should
be initialized (using assignments) before use in a cor-
rectly implemented program. When these assignments
are transformed, the associated taint data will also be ini-
tialized, and hence there is no need to initialize such taint
data in the ﬁrst place. So, we allocated tagmap dynami-
cally, and initialized only the locations corresponding to
static data. By using mmap for this allocation, and by per-
forming the allocation at a ﬁxed address that is unused
in Linux (our implementation platform), we ensured that
runtime accesses to tagmap elements will be no more
expensive than that of a statically allocated array (whose
base address is also determined at compile-time).
USENIX Association
Security ’06: 15th USENIX Security Symposium
125
The above approach reduced the startup overheads, but
the mere use of address space seemed to tie up OS re-
sources such as page table entries, and signiﬁcantly in-
creased time for fork operations. For programs such as
shells that fork frequently, this overhead becomes unac-
ceptable. So we devised an incremental allocation tech-
nique that can be likened to user-level page-fault han-
dling. Initially, tagmap points to 1GB of address space
that is unmapped. When any access to tagmap[i] is
made, it results in a UNIX signal due to a memory fault.
In the transformed program, we introduce code that inter-
cepts this signal. This code queries the operating system
to determine the faulting address. If it falls within the
range of tagmap, a chunk of memory (say, 16KB) that
spans the faulting address is allocated using mmap. If the
faulting address is outside the range of tagmap, the sig-
nal is forwarded to the default signal handler.
3.3.2 Compile-time Optimizations
Use of local taint tag variables.
In most C programs,
operations on local variables occur much more fre-
quently than global variables. Modern compilers are
good at optimizing local variable operations, but due
to possible aliasing, most such optimizations cannot be
safely applied to global arrays. Unfortunately, the basic
transformation introduces one operation on a global ar-
ray for each operation on a local variable, and this has
the effect of more than doubling the runtime of trans-
formed programs. To address this problem we modi-
ﬁed our transformation so that it uses local variables to
hold taint information for local variables, so that the code
added by the transformer can be optimized as easily as
the original code.
Note, however, that the use of local tag variables