policy 
repository
view update queries
DB query DB query
results
Policy 
Evaluation
Back End
DBMS
Figure 1: The design of a trust evaluation engine built on
top of database management systems
2. Strong support from DBMSs. Many key features of
trust management systems can be mapped to DBMS con-
cepts in a straightforward manner. For example, simple
membership credentials for the same role can be naturally
grouped together into a relation (table) in a database.
Further, if parameters are involved for roles, they can be
easily added as attributes of a relation.
Trust management systems can also directly beneﬁt from
the mature data processing techniques used in DBMSs.
For example, DBMSs are optimized to handle compli-
cated aggregations over large scale data sets, which is
ideal for supporting horizontal trust evaluation (e.g., rep-
utation calculations). Furthermore, if a horizontal trust
calculation involves an aggregation operation that is not
supported natively, most DBMSs allow these types of
functions to be easily integrated via user-deﬁned aggre-
gation functions.
DBMSs provide rich indexing techniques that can be read-
ily utilized to boost the performance of trust query an-
swering. Further, by treating each trust query and trust
policy update as a transaction, a DBMS guarantees their
atomic execution, which ensures the correctness of trust
queries, as well as the overall consistency of the system
view used to evaluate the query [16], even when multiple
queries and updates are processed concurrently.
3. Lightweight trust evaluation engine. Because of
strong support from DBMSs, a large portion of the trust
query answering can be shifted to the DBMSs. The ac-
tual trust evaluation engine itself thus is lightweight, and
easily veriﬁed for correctness.
In [11], De Capitani Di Vimercati et al. proposed to use a
DBMS as a repository of credentials, and designed a SQL-
like language to store and retrieve credentials to and from
a credential database. The goal is to have a trust manage-
ment system completely implemented in a DBMS. However,
we argue that not all the trust management functionalities
are suitable to be implemented in DBMSs. For example, a
security oﬃcer often needs to perform policy analysis to ver-
ify that a trust policy preserves certain security properties
such as safety and availability. On the one hand, these types
of analyses are diﬃcult to perform purely by a DBMS. On
the other hand, using a DBMS as only a credential store does
not fully utilize its data processing power. In this paper, we
propose to strike a balance between these two extremes by
using a DBMS as a back-end processing system to facilitate
the evaluation of trust queries.
Figure 1 shows a high-level view of our proposed system
architecture, which is composed of two distinct layers: a
logical trust management front end and a relational query
processing back end. The trust management front end is the
main interface through which users interact with the trust
management system. This layer is comprised of three mod-
ules: the policy maintenance, the policy analysis, and the
query evaluation modules. The policy maintenance module
allows administrators to manage the logical ruleset parame-
terizing the system, and is responsible for synchronizing with
the relational back end. The trust query evaluation module
is used to process the types of trust queries described in
Section 2.2 by interacting with the logical ruleset and the
relational back end. Lastly, the policy analysis module is
responsible for all other logical policy analysis tasks (e.g.,
safety analysis [21]).
The relational back-end database does not store copies
of the logical credentials themselves, but rather manages
auxiliary information corresponding to an interpretation of
those credentials within the context of trust query process-
ing. Speciﬁcally, it maintains two tables—base_roles and
reports—that hold role memberships deﬁned by simple mem-
bership credentials (A.R ← B) and feedback reports issued
by users in the system, respectively. The key insight that
we leverage is that all other forms of CTM credentials repre-
sent, in essence, queries that deﬁne one role in terms of other
roles in the system. To this end, the policy management
module in the logical front end compiles these credentials
into dynamic views in the relational back end that select
the members of a given role by querying the membership
sets of other roles. As we will see in the next section, such a
relational back end greatly simpliﬁes the processing of proof
of compliance and role membership queries, while a com-
bined logical/relational approach can be used to eﬃciently
answer capability queries.
Note that the relational query processing back end does
not require any change to the DBMS. In other words, any
commodity DBMS can be used directly with the logical trust
management front end to form a trust policy evaluation en-
gine.
4. QUERY PROCESSING
In this section, we elaborate on how our framework can
be used to answer each of the three query types described
in Section 2.2. We ﬁrst describe a process through which
CTM credentials can be compiled into dynamic views in a
DBMS, which facilitates eﬃcient processing of proof of com-
pliance and role membership queries. We then present the
details of a hybrid algorithm that uses forward chaining and
top-down query processing to eﬃciently execute capability
queries. For simplicity, in this paper we do not consider
circular dependent roles; such types of role hierarchy are
extremely uncommon in practice.
4.1 Compiling CTM Credentials
As was described previously, the base_roles and reports
tables of the DBMS are populated with the role member-
ships described by simple membership credentials and the
CREATE TABLE base_roles(
owner
role
subject varchar(30) # Principal defined as a role member
varchar(30), # Pricipal defining the role
varchar(30), # Name of the role being define
);
CREATE TABLE reports(
issuer varchar(30), # Issuer of the feedback report
target varchar(30), # Target of the feedback report
rating double,
date
# Single rating value
# Date that the report was issued
date
};
Figure 2: Schemas deﬁning the base_roles and reports
tables.
feedback reports issued by principals in the system, respec-
tively. To simplify the presentation in this section, we as-
sume the use of only unparameterized CTM credentials and
feedback reports consisting of a single value. As a result,
the base_roles and reports tables can be deﬁned by the
schemas shown in Figure 2. For a simple membership cre-
dential A.R ← B, a row will be entered into the base_roles
table identifying A as the role owner, R as the role, and
B as a subject. Similarly, if principal A generates a feed-
back report about principal B, the corresponding row in the
reports table will identify A as the issuer of the feedback
report and B as the target. Section 4.2 explains how the
techniques detailed in this section can be extended to sup-
port parameterized CTM or RT1 credentials.
We now describe how the set C of intersection contain-
ment, linking containment, and aggregate containment cre-
dentials can be compiled into a collection of dynamic views
deﬁned over these base tables, as well as other views de-
ﬁned during the compilation procedure. In our discussion,
we treat a simple containment credential as an intersection
containment with only one role in its body. We ﬁrst make
two assumptions:
• The logical component of our framework stores the set
C of CTM credentials as an ordered list, cList. This
list of credentials is arranged such that for any two
credentials ci and cj, cj can be deﬁned in terms of ci if
and only if j > i. That is, cList is arranged such that
if one role depends on other roles, it is deﬁned after its
dependencies are deﬁned.
• We have access to a data structure roleManagers :
String → 2P that maps a role name to the set of prin-
cipals deﬁning this role. For instance, if AliceInc and
BobCorp both deﬁne an employee role, roleManagers
will map the role employee to the set of principals
{AliceInc, BobCorp}.
Given the cList = )c1, ..., cn* and roleManagers data struc-
tures, the compilation of CTM credentials into dynamic views
proceeds according to the following O(n) procedure:
1. Create a map viewDefs : String → String. This structure
will be used during the compilation process to associate a
role name (e.g., A.R) with the SQL view deﬁnition com-
mand that will eventually be inserted into the database.
2. For each distinct role A.R deﬁned in the base_roles ta-
ble, generate the following SQL view deﬁnition, execute
it, and associate it with A.R in the viewDefs map:
CREATE OR REPLACE VIEW A_R(subject) AS
SELECT subject FROM base_roles WHERE owner=‘A’ AND role=‘R’
This view deﬁnition ensures that any query to the view
A_R will consider the role memberships asserted using
simple membership credentials.
3. For each role deﬁnition credential ci:
• If ci is an intersection containment credential of the
form A.R ← B1.R1 ∩ ··· ∩ Bn.Rn, generate the fol-
lowing SQL selection statement si:
SELECT subject FROM B1_R1, ..., Bn_Rn WHERE
B1_R1.subject = B2_R2.subject AND
...
B1_R1.subject = Bn_Rn.subject
This selection gathers all principals who are mem-
bers of each role B1.R1, . . . , Bn.Rn.
• If ci is a linking containment credential of the form
A.R ← A.R1.R2, use the roleManagers map to look
up the set {B1, . . . , Bn} of principals deﬁning an R2
role. Then, generate the following SQL statement vi
deﬁning the intermediate view R2:
CREATE OR REPLACE VIEW R2(owner, subject) AS
SELECT ‘B1’ AS owner, subject FROM B1_R2 UNION
...
SELECT ‘Bn’ AS owner, subject FROM Bn_R2;
This intermediate view can then be used to deﬁne
the following SQL selection statement si:
SELECT DISTINCT R2.subject FROM A_R1, R2 WHERE
A_R1.subject = R2.owner
Essentially, this selection ﬁnds all members of X.R2
such that X is a member of A.R1. As was discussed
in Section 2.1, this is exactly the semantics of the
role deﬁnition A.R ← A.R1.R2.
• If ci is an aggregate containment credential of the
form A.R ← B1.f (issuer = B2.R2, output ≥ c),
generate the following SQL selection si:
SELECT target FROM reports, B2_R2
WHERE reports.issuer =
GROUP BY target HAVING f(rating) > c
B2_R2.subject
The query si uses the function f —which is executed
as a stored procedure within the DBMS—to aggre-
gate the feedback reports issued about a particular
target user, provided that these reports were issued
by a member of the role B2.R2. Note that only users
whose aggregate feedback score is above the thresh-
old c are eventually selected.
At this point, look up deﬁnition di in the viewDefs map
that corresponds to the role A.R. If di is undeﬁned, set
di = CREATE OR REPLACE VIEW A_R(subject) AS ⊕ si,
where ⊕ denotes string concatenation. Otherwise, set
di = di ⊕ UNION ⊕ si.
If a temporary view command
vi was generated, set di = vi ⊕ di. Finally, execute the
updated command di and store it back in the viewDefs
map.
Intuitively, the above process provides a bottom-up means
of compiling CTM credentials into a relational database rep-
resentation. Since simple membership credentials and indi-
vidual feedback reports have no dependencies on any other
data items, they can be inserted into base_roles and re-
ports tables straight away. After this basic level of data
CREATE OR REPLACE VIEW AliceInc_employee(subject) AS
SELECT subject FROM base_roles WHERE owner=‘AliceInc’
AND role=‘employee’;
CREATE OR REPLACE VIEW BobCorp_employee(subject) AS
SELECT subject FROM base_roles WHERE owner=‘BobCorp’
AND role=‘employee’;
CREATE OR REPLACE VIEW BBB_member(subject) AS
SELECT subject FROM base_roles WHERE owner=‘BBB’
AND role=‘member’;
CREATE OR REPLACE VIEW ACM_member(subject) AS
SELECT subject FROM base_roles WHERE owner=‘ACM’
AND role=‘member’;
CREATE OR REPLACE VIEW BBB_goodRep(subject) AS
SELECT target FROM reports, ACM_member
WHERE reports.issuer =
GROUP BY target HAVING rep(rating) > c;
ACM_member.subject
CREATE OR REPLACE VIEW ePub_trusted(subject) AS
SELECT subject FROM BBB_member, BBB_goodRep WHERE
BBB_member.subject = BBB_goodRep.subject;
CREATE OR REPLACE VIEW employee AS
SELECT ‘AliceInc’ AS owner, subject FROM AliceInc_employee UNION
SELECT ‘BobCorp’ AS owner, subject FROM BobCorp_employee;
CREATE OR REPLACE VIEW ePub_discount AS
SELECT DISTINCT employee.subject FROM ePub_trusted, employee
WHERE ePub_trusted.subject = employee.owner;
Figure 3: A compiled version of the CTM policy described
in Section 4.1
has been entered into the database, Step 2 generates a new
view A_R for each role A.R described by the base_roles ta-
ble. Step 3 compiles each credential in cList into an SQL
selection over previously-deﬁned views. The sort invariant
on cList ensures that only references to previously-deﬁned
views are required as view deﬁnitions are inserted or up-
dated. As a concrete example, consider the following CTM
credentials:
BBB.goodRep ← BBB.rep(issuer = ACM.member,
output > 0.9)
eP ub.trusted ← BBB.member ∩ BBB.goodRep
eP ub.discount ← eP ub.trusted.employee
This policy asserts that ePub is willing to give a discount
to employees of trusted organizations. ePub considers an
organization trusted if the organization is a member of the
BBB and is rated highly by members of the ACM. Assuming
that AliceInc and BobCorp each deﬁne an employee role in
the server’s base_roles table, Figure 3 describes how the
above collection of CTM credentials can be compiled and
represented in a DBMS.
Given this relational representation of a set of CTM cre-
dentials, answering the proof of compliance and role mem-
bership queries becomes trivial. Speciﬁcally, determining
all members of a role A.R is a simple matter of executing
the query SELECT subject FROM A_R. Similarly, determin-
ing whether Alice is a member of the role A.R can be an-
swered by executing the query SELECT subject FROM A_R
WHERE subject=‘Alice’; a non-zero recordset indicates that
Alice is a member of A.R, while an empty recordset indicates
that she is not. This leads us to the following theorem:
Theorem 1
(Correctness & Completeness). Let
cList be an ordered collection of CTM credentials, and let
DB be the database resulting from compiling cList using the
above process. DB ﬁnds the set U of users belonging to a
role A.R if and only if there exist CTM proofs of compliance
demonstrating that u is a member of A.R for each u ∈ U .
Theorem 1 can be proved using a relatively straightfor-
ward, albeit lengthy, structural induction that demonstrates
a 1-to-1 correspondence between the views generated by our
compilation procedure and the set theoretic semantics of
CTM credentials. In the interest of space, we omit the de-
tails of the proof in this paper.
4.2 Supporting Parameterized Roles
We now provide a brief intuition for how the compilation
procedure described in Section 4.1 can be adapted to support
parameterized CTM role deﬁnitions. First, we assume that
the maximum number of parameters to any given role can
be bounded by some integer n. Then, the schema for the
base_roles table can be deﬁned as follows:
CREATE TABLE base_roles(
int,
# Integer parameter 1
varchar(30), # Pricipal defining the role
varchar(30), # Name of the role being define
owner
role
subject varchar(30), # Principal defined as a role member
int1
...
intn
str1
...
strn
double1 double,
...
doublen double
varchar(30), # String parameter n
# Double parameter 1
int,
varchar(30), # String parameter 1
# Integer parameter n
# Double parameter n
);
Given such a deﬁnition for the base_roles table, we can
modify the compilation procedure from Section 4.1 to gener-
ate parameterized views. We now present a simple example
to demonstrate the intuition behind this revised approach.
Consider the following role deﬁnition:
History.T rust(area = “T ech”) ←
StateU.f aculty(since ≥ 2006)∩
AandS.rep(committee = “T echnology”)
The above role deﬁnition says that the History department
trusts faculty members at StateU with respect to “Tech”
questions if the faculty member is an Arts and Sciences rep-
resentative on the technology committee and has been a fac-
ulty member since at least 2006. Assuming that roles have
at most one parameter, the above deﬁnition can be compiled
into the following dynamic view:
CREATE OR REPLACE VIEW
History_Trust(subject, int1, str1, double1) AS
SELECT subject, "Tech" as str1, 0 as int1, 0.0 as double1
FROM StateU_faculty, AandS_rep
WHERE StateU_faculty.subject = AandS_rep.subject AND
StateU_faculty.int1 >= 2006 AND
AandS_rep.str1 = "Technology";
Note that each view must deﬁne columns for each avail-
able parameter, and that view deﬁnitions may constrain the
parameter columns of the views that they query. Similar
adaptations can be made to all compilation rules deﬁned in
Section 4.1.
Algorithm 1 Algorithm for resolving capability queries.
1: Function CapQuery(List)Credential*cList, User u) : Set)Role*
2: // Query database to determine base role memberships