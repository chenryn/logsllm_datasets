O(c2n) to O(c2 log n) given a group size c. To achieve this,
RandHerd requires a one-time setup phase that securely shards
cothority nodes into subgroups, then leverages aggregation and
communication trees to generate subsequent random outputs.
As before, the random output (cid:3)r of RandHerd is unbiasable and
can be veriﬁed, together with the corresponding challenge (cid:3)c,
as a collective Schnorr signature against RandHerd’s collective
public key. Fig. 3 illustrates RandHerd’s design.
RandHerd’s design builds on RandHound, CoSi [58], and
a (t, n)-threshold Schnorr signature (TSS) scheme [57] that
implements threshold-based witness cosigning (TSS-CoSi).
A cothority conﬁguration C deﬁnes a given RandHerd
instance, listing the public keys of participating servers and
their collective public key X. The RandHerd protocol con-
sists of RandHerd-Setup, which performs one-time setup, and
RandHerd-Round, which produces successive random outputs.
The setup protocol uses RandHound to select a RandHerd
leader at random and arrange nodes into veriﬁably unbiased
random groups. Each group runs the key generation phase
of TSS to establish a public group key (cid:3)Xl, such that each
group member holds a share of the corresponding private
key (cid:3)xl. Each group can issue a collective signature with a
to the collective RandHerd public key (cid:3)X, which is endorsed
cooperation of tl of nodes. All public group keys contribute
by individual servers in a run of CoSi.
Once operational, to produce each random output, Rand-
Herd generates a collective Schnorr signature ((cid:3)c,(cid:3)r) on some
input w using TSS-CoSi and outputs (cid:3)r as randomness. TSS-
CoSi modiﬁes CoSi to use threshold secret sharing (TSS)
rather than CoSi’s usual exception mechanism to handle node
failures, as required to ensure bias-resistance despite node
failures. All m RandHerd groups contribute to each output, but
each group’s contribution requires the participation of only tl
members. Using TSS-CoSi to generate and collectively certify
random outputs allows clients to verify any RandHerd output
via a simple Schnorr signature check against public key (cid:3)X.
CL
Cothority Leader
GL
Group Leaders
GL
TSS Group 2
TSS Group 3
CoSi-Tree
Server-to-Server
Fig. 3. An overview on the RandHerd design
B. Description
Let N = {0, . . . , n− 1} denote the list of all nodes, and let
f denote the maximum number of permitted Byzantine nodes.
We assume that n = 3f + 1. The private and public key of a
node i ∈ N is xi and Xi = Gxi, respectively. Let C denote the
the cothority’s collective public key (cid:3)X =
(cid:3)Xj, contact
cothority conﬁguration ﬁle listing the public keys of all nodes,
(cid:4)n−1
j=0
information such as IP address and port number, default group
sizes for secret sharing, and a timestamp on when C was
created. Each node has a copy of C.
1) RandHerd-Setup: The setup phase of RandHerd consists
of the following four steps:
1) Leader Election. When RandHerd starts, each node gen-
erates a lottery ticket ti = H(C (cid:5) Xi) for every i ∈ N and
sorts them in an ascending order. The ticket ti with the
lowest value wins the lottery and the corresponding node i
becomes the tentative RandHerd leader. If this leader is or
becomes unavailable, leadership passes to the next node
in ascending order. A standard view-change protocol [39],
[17] manages the transition between successive leaders.
In summary, any server who is dissatisﬁed with the cur-
rent leader’s progress broadcasts a view-change message
for the next leader. Such messages from at least f + 1
nodes force a view change, and the new leader begins
operation upon receiving at least 2f + 1 such “votes of
conﬁdence.” Section IV-E1 discusses an improvement to
leader election to make successive leaders unpredictable.
2) Seed Generation. The leader assumes the role of the
RandHound client and runs the protocol, with all other
nodes acting as RandHound servers. Each leader has only
one chance to complete this step. If he fails, the next
node, as determined by the above lottery, steps in and
attempts to execute RandHound. After a successful run
of RandHound, the leader obtains the tuple (Z, L), where
Z is a collective random string and L is the publicly
veriﬁable transcript that proves the validity of Z. Lastly,
the current leader broadcasts (Z, L) to all nodes.
452
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
3) Group Setup. Once the nodes receive (Z, L), they use
L to verify Z, and then use Z as a seed to compute
(cid:5). Afterwards
a random permutation of N resulting in N
(cid:5) is sharded into m groups Tl of the same size as in
N
RandHound, for l ∈ {0, . . . , m − 1}. The node at index
0 of each group becomes the group leader and the group
leader of the ﬁrst group takes up the role of the temporary
RandHerd leader. If any of the leaders is unavailable, the
(cid:5), steps in. After
next one, as speciﬁed by the order in N
this step, all nodes know their group assignments and the
respective group leaders run a TSS-setup to establish the
long-term group secret (cid:3)xl using a secret sharing threshold
of tl = |Tl|/3 + 1. All group leaders report back to the
current RandHerd leader with the public group key (cid:3)Xl.
received all (cid:3)Xj, he combines them to get the collective
RandHerd public key (cid:3)X =
(cid:3)Xj and starts a run of
the CoSi protocol to certify (cid:3)X by requesting a signature
(cid:3)X together with all (cid:3)Xj and each individual node checks
that (cid:3)Xj corresponds to its public group key and that (cid:3)X
The collective signature on (cid:3)X is valid if there are least
2f + 1. Once a valid signature on (cid:3)X is established, the
setup of RandHerd is completed. The validity of (cid:3)X can
f /m+1 signatures from each group and the total number
of individual signatures across the groups is at
least
is well-formed. Only if both checks succeed, the node
participates in the co-signing request, otherwise it refuses.
4) Key Certiﬁcation. As soon as the RandHerd leader has
from each individual node. Therefore, the leader sends
(cid:4)m−1
j=0
be veriﬁed by anyone by using the collective public key
X, as speciﬁed in the conﬁguration C.
After a successful setup, RandHerd switches to the op-
erational randomness generation mode. Below we describe
how the protocol works with an honest and available leader.
A dishonest or failed leader can halt progress at any time,
but RandHerd-Round uses a view-change protocol as in
RandHerd-Setup to recover from leader failures.
2) RandHerd-Round: In this mode, we distinguish between
communications from the RandHerd leader to group leaders,
from group leaders to individual nodes, and communications
between all nodes within their respective group. Each random-
ness generation run consists of the following seven steps and
can be executed periodically:
1) Initialization (Leader). The RandHerd leader initializes
a protocol run by broadcasting an announcement message
containing a timestamp w to all group leaders. All groups
will cooperate to produce a signature ((cid:3)c,(cid:3)r) on w.
2) Group Secret Setup / Commitment (Groups / Servers).
Upon the receipt of the announcement, each group creates
a short-term secret (cid:3)vl, using a secret sharing threshold
tl, to produce a group commitment (cid:3)Vl = G(cid:4)vl that will
be used towards a signature of w. Furthermore, each
individual node randomly chooses vi ∈R Zq, creates
a commitment Vi = Gvi that will be used to globally
witness, hence validate the round challenge (cid:3)c, and sends
it to the group leader. The group leader aggregates the
sends (
(cid:4)
received individual commitments into (cid:8)Vl =
(cid:3)Vl, (cid:8)Vl) back to the RandHerd leader.
i∈Tl
(cid:4)m−1
the respective commitments into (cid:3)V =
(cid:3)Vl and
(cid:4)m−1
(cid:3)V (cid:5) w)
(cid:8)V =
(cid:8)Vl, and creates two challenges (cid:3)c = H(
and (cid:8)c = H((cid:8)V (cid:5) (cid:3)V ). Afterwards, the leader sends ((cid:3)c,(cid:8)c)
3) Challenge (Leader). The RandHerd leader aggregates
Vi and
l=0
l=0
(cid:2)
to all group leaders that in turn re-broadcast them to the
individual servers of their group.
4) Response (Servers). Server i stores the round group
challenge (cid:3)c for later usage, creates its individual response
ri = vi −(cid:8)cxi, and sends it back to the group leader. The
latter aggregates all responses into (cid:8)rl =
creates an exception list (cid:8)El of servers in his group that
ri and
leader sends ((cid:8)rl, (cid:8)El) to the RandHerd leader.
leader gathers all exceptions (cid:8)El into a list (cid:8)E, and ag-
(Leader). The RandHerd
(cid:2)m−1
l=0 (cid:8)rl taking (cid:8)E into
gregates the responses into (cid:8)r =
account. If at least 2f + 1 servers contributed to (cid:8)r, the
RandHerd leader sends the global group commitment (cid:3)V
and the signature ((cid:8)c,(cid:8)r, (cid:8)E) to all group leaders thereby
did not respond or sent bad responses. Finally, each group
5) Secret Recovery Request
i∈Tl
requesting the recovery of the group secrets.
6) Group Secret Recovery (Groups / Servers). The group
leaders re-broadcast the received message. Each group
member individually checks that ((cid:8)c,(cid:8)r, (cid:8)E) is a valid
signature on (cid:3)V and only if it is the case and at least 2f +1
individual servers signed off, they start reconstructing the
short-term secret (cid:3)vl. The group leader creates the group
response (cid:3)rl = (cid:3)vl − (cid:3)c(cid:3)xl and sends it to the RandHerd
leader.
(cid:2)m−1
7) Randomness Recovery (Leader). The RandHerd leader
l=0 (cid:3)rl and, only if he
aggregates all responses (cid:3)r =
received a reply from all groups, he releases ((cid:3)c,(cid:3)r) as the
collective randomness of RandHerd.
3) Randomness Veriﬁcation: The collective randomness
((cid:3)c,(cid:3)r) of RandHerd is a collective Schnorr signature on the
gate group key (cid:3)X.
timestamp w, which is efﬁciently veriﬁable against the aggre-
C. Security Properties
RandHerd provides the following security properties:
1) Availability. Given an honest leader, the protocol success-
fully completes and produces the ﬁnal random output Z
with high probability.
2) Unpredictability. No party learns anything about the ﬁnal
random output Z, except with negligible probability, until
the group responses are revealed.
3) Unbiasability. The ﬁnal random output Z represents an
unbiased, uniformly random value, except with negligible
probability.
4) Veriﬁability. The collective randomness Z is third-party
veriﬁable as a collective Schnorr signature under (cid:3)X.
We make the same assumptions as in the case of Rand-
Hound (Section III-C) on the behavior of the honest nodes
and the cryptographic primitives RandHerd employs.
453
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
RandHerd uses a simple and predictable ahead-of-time elec-
tion mechanism to choose the temporary RandHerd leader in
the setup phase. This approach is sufﬁcient because the group
assignments and the RandHerd leader for the randomness
phase of the protocol are chosen based on the output of
RandHound. RandHound’s properties of unbiasability and un-
predictability hold for honest and dishonest clients. Therefore,
the resulting group setup has the same properties in both cases.
Availability. Our goal is to ensure that with high probability
the protocol successfully completes, even in the presence of
an active adversary.
As discussed above, the use of RandHound in the setup
phase ensures that all groups are randomly assigned. If the
RandHerd leader makes satisfactory progress, the secret shar-
ing threshold tl = f /m+1 enables 2f /m honest nodes in each
group to reconstruct the short-term secret (cid:3)vl, hence produce
the group response (cid:3)rl without requiring the collaboration of
leader will make satisfactory
malicious nodes. An honest
progress and eventually output (cid:3)r at the end of step 7. This
setup corresponds to a run of RandHound by an honest
client. Therefore, the analysis of the failure probability of
a RandHound run described in Section V-C is applicable to
RandHerd in the honest leader scenario.
In RandHerd, however, with a probability f /n, a dishonest
client will be selected as the RandHerd leader. Although the
choice of a dishonest leader does not affect the group assign-
ments, he might arbitrarily decide to stop making progress
at any point of the protocol. We need to ensure RandHerd’s
availability over time, and if the current leader stops making
adequate progress, we move to the next leader indicated by
the random output of RandHound and, as with common BFT
protocols, we rely on “view change” [17], [39] to continue
operations.
Unpredictability. We want to ensure that the random output
of RandHerd remains unknown until the group responses (cid:3)rl
are revealed in step 6.
The high-level design of RandHerd closely resembles that
of RandHound. Both protocols use the same thresholds, assign
n nodes into m groups, and each group contributes an exactly
one secret towards the ﬁnal random output of the protocol.
Therefore, as in RandHound, there will similarly be at least
one RandHerd group with at least an average number of honest
nodes. Furthermore,
the secret-sharing and required group
inputs threshold of tl = f + 1 guarantees that for at least
one group, the adversary cannot prematurely recover (cid:3)vl and
reconstruct the group’s response (cid:3)rl. Therefore, before step 6,
the adversary will control at most m− 1 groups and obtain at
most m − 1 out of m responses that contribute to (cid:3)r.
Unbiasability. Our goal is to prevent the adversary from
biasing the value of the random output (cid:3)r.
As in RandHound, we know that for at least one group the
adversary cannot prematurely recover (cid:3)rl and that (cid:3)rl contains a
contribution from at least one honest group member. Further,
2f + 1 individual nodes in step 4 on his commitment (cid:3)V , ﬁxes
the requirement that the leader must obtain a sign-off from
the output value (cid:3)r before any group secrets (cid:3)rl are produced.
This effectively commits the leader to a single output (cid:3)r.
The main difference between RandHound and RandHerd is
the fact that an adversary who controls the leader can affect
unbiasability by withholding the protocol output (cid:3)r in step 7,
if (cid:3)r is not beneﬁcial to him. A failure of a leader would force
a view change and therefore a new run of RandHerd, giving
the adversary at least one alternative value of (cid:3)r, if the next
selected leader is honest, or several tries if multiple successive
leaders are dishonest or the adversary can successfully DoS
them. The adversary cannot freely choose the next value of
(cid:3)r, nor go back to the previous value if the next one is not
preferable, the fact that he can sacriﬁce a leadership role
to try for an alternate outcome constitutes bias. This bias is
limited, as the view-change schedule must eventually appoint
an honest leader, at which point the adversary has no further
bias opportunity. Section IV-D further addresses this issue
with an improvement ensuring that an adversary can hope
to hold leadership for at most O(log n) such events before
permanently losing leadership and hence bias opportunity.
Veriﬁability. The random output (cid:3)r generated in RandHerd
is obtained from a TSS-CoSi Schnorr signature ((cid:3)c,(cid:3)r) on input
w against a public key (cid:3)X. Any third-party can verify (cid:3)r by
simply checking the validity of ((cid:3)c,(cid:3)r) as a standard Schnorr
signature on input w using (cid:3)X.
D. Addressing Leader Availability Issues
Each run of RandHerd is coordinated by a RandHerd leader
who is responsible for ensuring a satisfactory progress of the
protocol. Although a (honest or dishonest) leader might fail
and cause the protocol failure, we are speciﬁcally concerned
with intentional failures that beneﬁt the adversary and enable
him to affect the protocol’s output.
As discussed above, once a dishonest RandHerd leader
receives responses from group leaders in step 7, he is the ﬁrst
one to know (cid:3)r and can act accordingly, including failing the
protocol. However, the failure of the RandHerd leader does
not necessarily have to cause the failure of the protocol. Even
without the dishonest leader’s participation, f /m+1 of honest
nodes in each group are capable of recovering the protocol
output. They need, however, a consistent view of the protocol
and the output value that was committed to.
Instead of requiring a CoSi round to get 2f +1 signatures on
(cid:3)V , we use a Byzantine Fault Tolerance (BFT) protocol to reach
consensus on (cid:3)V and consequently on the global challenge (cid:3)c =
(cid:3)V (cid:5) w). Upon a successful completion of BFT, at least
H(
the (cid:3)V . Consequently, the (cid:3)c that is required to produce each
f + 1 honest nodes have witnessed that we have consensus on
group’s response (cid:3)rl = (cid:3)vl − (cid:3)c(cid:3)xl is “set in stone” at this point.
If a leader fails, instead of restarting RandHerd, we can select
a new leader, whose only allowed action is to continue the
protocol from the existing commitment. This design removes
the opportunity for a dishonest leader biasing the output even
a few times before losing leadership.
Using a traditional BFT protocol (e.g., PBFT [17]) would
yield poor scalability for RandHerd because of the large num-
454
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 