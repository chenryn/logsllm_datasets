### 作者：heige@知道创宇404实验室
**原文链接：**

近期，多个在野0day漏洞被曝光，为年终总结提供了丰富的素材。其中，CVE-2022-30190（Follina）引起了我的特别关注。我认为这个漏洞堪称“神洞”，其品质远超CVE-2021-40444。每次看到这种漏洞，我都会感到一种惋惜之情。

#### CVE-2021-40444 与 CVE-2022-30190

关于为什么说CVE-2022-30190比CVE-2021-40444更好，主要在于其实战场景。CVE-2021-40444难以绕过“受保护视图”机制，因此需要用户额外点击以启用编辑功能。相比之下，CVE-2022-30190利用ms-msdt://伪协议直接触发，避免了“受保护视图”的限制，从而更加隐蔽和高效。

从技术角度来看，这两个漏洞都是应用层逻辑漏洞的典范，具备天然的优势。具体而言，CVE-2021-40444是一个由CAB控件调用引发的目录穿越漏洞，通过下载特定路径下的inf文件并加载.cpl实现命令执行。详细分析请参阅sunglin@知道创宇404实验室的文章。

而CVE-2022-30190则涉及ms-msdt://伪协议中的PowerShell代码注入问题。漏洞原型如下：
```powershell
PowerShell powerShellCommand = PowerShell.Create();
powerShellCommand.AddScript("ls -test $(iex('mspaint.exe'))");
var result = powerShellCommand.Invoke();
```
整个过程较为复杂，可参考HuanGMz@知道创宇404实验室的深入分析。

有趣的是，微软开发者曾尝试过滤某些参数，但方法有误且未能生效：
```powershell
$appName = [System.IO.Path]::GetFileNameWithoutExtension($selectedProgram).Replace("$", "$")
```
正确的写法应为：
```powershell
$appName = [System.IO.Path]::GetFileNameWithoutExtension($selectedProgram).Replace("`$", "``$")
```

#### 漏洞模式与未来展望

这些漏洞的方式类似于早期IE浏览器中的DOM XSS攻击，只是现在更多地体现在Office等应用程序中。考虑到MSDT功能中的PS文件调用，以下四个命令值得关注：
- `Get-DiagInput`
- `Update-DiagReport`
- `Update-DiagRootCause`
- `Write-DiagProgress`

如果允许参数提交（如`Get-DiagInput`），则可能再次触发类似漏洞。

#### 攻击面转移

随着IE浏览器的衰落，攻击面已转移到Office等应用。这提醒我们，即使旧平台消失，其安全风险仍可能通过新渠道再现。例如，mdb文件漏洞最初被认为不重要，直到有人通过Word触发它。

#### 背后的八卦

该漏洞最早由国内研究员crazyman于4月11日发现，并在次日报告给微软。然而，微软在4月21日关闭了case，并回复称这不是安全相关问题。直到5月27日，国外研究者注意到VT上的另一个样本并在推特上分享了代码，最终促使微软在5月30日分配CVE-2022-30190并发布临时解决方案。

随后，又有新的“MSDT路径遍历0day”被发现，尽管需多次确认才能利用，但仍被微软拒绝。MSRC建议将其提交给Google，因为Chromium也受影响。

这让我想起了d4rkwind发现的mhtml漏洞，当时影响到了Gmail，Google建议将漏洞报告给微软，但微软并未立即响应。

随着6月补丁日的临近，我们将拭目以待微软如何修复这些问题。此外，对MSDT功能的历史研究有助于理解漏洞挖掘思路。