t A
(cid:10)(cid:18)(cid:25)(cid:19)(cid:32)(cid:1)(cid:4)(cid:18)(cid:22)(cid:14)(cid:18)(cid:22)(cid:16)(cid:25)(cid:1)
(cid:9)(cid:17)(cid:12)(cid:25)(cid:15)(cid:1)(cid:5)(cid:11)(cid:1)
Figure 1: Investigation Flow
2
Investigation & Methodology
In this research work, we investigate Android’s secu-
rity features which are conﬁgurable during customiza-
tion at the level of the framework and preloaded apps.
Figure 1 depicts our investigation ﬂow. As our work is
data driven, the ﬁrst and second phase are mainly con-
cerned with locating and extracting meaningful security
features from our collected Android custom ROMs. The
two phases generate a large data set of conﬁgurations of
the selected security features per image. The third phase
performs differential analysis on the generated data ac-
cording to our proposed algorithms to ﬁnd any conﬁg-
uration discrepancies.
It should be noted that it is out
of our scope to ﬁnd any security feature that is wrongly
conﬁgured on all images, as obviously, it would not be
detected through our differential analysis.
In the last phase, we analyze the detected discrepan-
cies to pinpoint risky patterns. We have conﬁrmed that
they are indeed dangerous through high impact attacks.
We discuss in the next sections each phase in details.
3 Feature Extraction
In this phase, we aim to extract security features that can
cause potential vulnerabilities if altered incautiously dur-
ing the customization process. To systematically locate
these security features, we start from the Android lay-
ered architecture (Figure 2) and study the security en-
forcement employed at each layer.
As Figure 2 illustrates, Android is a layered operating
system, where each layer has its own tasks and responsi-
bilities. On the top layer are preloaded apps provided by
the device vendors and other third parties such as carri-
ers. To allow app developers to access various resources
and functionalities, Android Framework layer provides
USENIX Association  
25th USENIX Security Symposium  1155
(platform.xml and *.xml under /etc/permissions/).
In the following section, we describe in details each
conﬁgurable AC check and deﬁne its security features
based on Android documentation and our domain knowl-
edge. We further justify how inconsistent conﬁgurations
of these features across custom images can bring in po-
tential security risks. Please note that we do not discuss
AC checks based on Package Names as previous work
[5] has covered the effects of customizing them.
Before we proceed, we present some notations that we
will be referring to in our analysis. IMG denotes a set
of our collected images. EP, EGID, EPB and EC represent
a set of all deﬁned permissions, GIDs, protected broad-
casts and components on IMG, respectively.
These
3.1 Permissions
Default and custom Android Permissions are used
inner components, data and function-
to protect
alities.
The protection level of a permission can
either Normal, Dangerous, Signature,
be
or SystemOrSignature.
protection
should be picked carefully depending on
levels
the resource to be protected.
Signature and
SystemOrSignature level permissions are used
to protect the most privileged resources and will be
granted only to apps signed with the same certiﬁcate
as the deﬁning app. Dangerous permissions protect
private data and resources or operations affecting the
user’s stored data or other apps such as reading contacts
or sending SMS messages. Requesting permissions of
Dangerous levels requires explicit user’s conﬁrmation
before granting them. Normal level on the other hand,
is assigned to permissions protecting least privileged
resources and do not require user’s approval.
The
following is an example of a permission declaration:
We aim to ﬁnd if a permission has different protection
levels across various images. For example, on vendor
A, a permission READ_A is declared with Normal pro-
tection level, while on vendor B, the same permission is
declared with a Signature one. This would expose
the underlying components that are supposed to be pro-
tected with more privileged permissions. It would also
create a big confusion for developers, as the same per-
mission holds different semantics across images.
Formally, for each deﬁned permission e ∈ EP, we de-
ﬁne the security feature f ne as the following:
f ne = ProtectionLevel(e)
f ne is in the set {Normal,
The potential values of
Dangerous, Signature, Unspeciﬁed, 0}. We map
Table 1: Security Checks
AC Checks
Layer
Conﬁgurable
UID
GID
Package Name
Package Signature
Permission
Protected Broadcast
Component Visibility
Component Protection
Kernel, Framework
Library, App
Kernel
Framework, App
Framework, App
Framework, Library
App
App Layer
App Layer
App Layer
No
Yes
Yes
No
Yes
Yes
Yes
Yes
SignatureOrSystem level to Signature, as both
of them cannot be acquired by third party apps without
a signature check. An unspecified value refers to
a permission that has been deﬁned without a protection
level, while 0 refers to a permission that is not deﬁned
on an image.
3.2 GIDs
Certain lower-level Linux group IDs (GIDs) are mapped
to Android permissions. Once an app process acquires
these permissions, it will be assigned the mapped GID,
which will be used for access control at the kernel. Per-
missions to GID mappings for built-in and custom per-
missions are deﬁned mostly in platform.xml and other
xml ﬁles under /etc/permissions/. The following is an
example of a permission to GID mapping:
In the above example, any process that has been
granted NET_TUNNELING permission (deﬁned with a
Signature level) will be assigned the vpn GID, and
consequently perform any ﬁlesystem (read, write, exe-
cute) allowed for this GID.
Android states that any change made incautiously to
platform.xml would open serious vulnerabilities.
In
this analysis, we aim to ﬁnd if the customization par-
ties introduce any modiﬁcations to these critical map-
pings and if so, what damages this might create. More
speciﬁcally, we want to reveal if vendors map per-
missions of lower protection levels to existing privi-
leged GIDs, which can result in downgrading their priv-
ileges. Following the same example above, assume
that on a custom image, the vendor maps a permission
vendor.permission (deﬁned with Normal protec-
tion) to the existing vpn GID. This new mapping would
downgrade the privilege of vpn GID on the custom im-
age as it can be acquired with a Normal permission in-
stead of a Signature one. Thus, any third party app
granted vendor.permission will run with vpn GID
1156  25th USENIX Security Symposium 
USENIX Association
attached to its process, which basically allows it to per-
form any ﬁlesystem permissible for vpn GID, usually
allowed to only system processes.
To allow discovering vulnerable GID to permission
mappings, we extract the minimum permission require-
ment needed for acquiring a certain GID on a given im-
age; i.e. the minimum protection level for all permissions
mapping to it. If the same GID has different minimum re-
quirements on 2 images, then it is potentially vulnerable.
For the previous example, we should be able to reveal
that vpn GID is problematic as it can be acquired with a
Normal permission level on the custom image and with
a Signature one on other images.
For each deﬁned GID e ∈ EGID, let Pe denote the per-
mission set mapping to e, we deﬁne the feature f ne:
f ne = GIDProtectionLevel(e), where :
GIDProtectionLevel(e) = min
∀p∈Pe
ProtectionLevel(p)
3.3 Protected Broadcasts
Protected broadcasts are broadcasts that can be sent only
by system-level processes. Apps use protected broad-
casts to make sure that no process, but system-level pro-
cesses can trigger speciﬁc broadcast receivers. System
apps can deﬁne protected broadcasts as follows:
Another app can use the above deﬁned protected-
broadcast through the following:
The above ReceiverA can be triggered only by
system processes broadcasting broadcast.name pro-
tected broadcast. The app can alternatively use protected
broadcast through dynamically registered broadcast re-
ceivers. As it is known, during the customization pro-
cess, certain packages are removed and altered. We hy-
pothesize that because of this, certain protected broad-
casts’ deﬁnitions will be removed as well. We aim to un-
cover if these inconsistently non-protected broadcasts are
still being used though, as action ﬁlters within receivers.
This might open serious vulnerabilities, as the receivers
that developers assumed to be only invocable by system
processes will now be invocable by any third-party app
and consequently expose their functionalities.
Formally, for each Protected Broadcast e ∈ EPB, we
deﬁne the following:
Where DeﬁneUse(e) is deﬁned as the following:
De f ineUse(e) =⎧⎨⎩
1 if e is used on an image but not deﬁned
0 for other cases
3.4 Component Visibility
Android allows developers to specify whether their de-
clared components (activities, services, receivers and
content providers) can be invoked externally from other
apps. The visibility can be set through the exported
ﬂag in the component declaration within the app’s mani-
fest ﬁle. If this ﬂag is not speciﬁed, the visibility will be
implicitly set based on whether the component deﬁnes
intent ﬁlters. If existing, the component is exported; oth-
erwise, it is not as illustrated in the following snippet.
// Service1 is private to the app
// Service2 is not private to the app
 ... 
We would like to uncover any component that has been
exposed on one image, but not on another. We assume
that if the same component name appears on similar im-
ages (e.g. same models, same OS version), then most
likely, the component is providing the same functional-
ity or protecting the same data (for content providers).
Thus, its visibility should be the same across all images.
To account for the cases where a component has been
exported but with an added signature permission re-
quirement, we consider them as implicitly unexposed.
Formally, for each deﬁned component e ∈ EC, we ex-
tract the following feature:
f ne = Exported(e)
The potential values of f ne is either {true, false, 0}. 0
refers to a non-existing component on a studied image.
3.5 Component Protection
Apps can use permissions to restrict the invocation of
their components (services, activities, receivers).
In
the next code snippet, ServiceA can be invoked if
the caller acquires vendor.permissionA. More-
over, an app can use permissions to restrict reading and
writing to its content provider, as well as to speciﬁc
paths within it. android:readPermission and
android:writePermission take precedence over
android:permission if speciﬁed, as shown in the
code snippet. Components inherit their parents’ permis-
sion if they do not specify one.
f ne = De f ineUse(e),
USENIX Association  
25th USENIX Security Symposium  1157