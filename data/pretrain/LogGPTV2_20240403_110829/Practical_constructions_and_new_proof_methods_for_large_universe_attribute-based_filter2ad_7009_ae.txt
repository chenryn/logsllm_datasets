49.1
642.3
924.4
32.9
922.9
626.3
9283.8
13389.3
431.0
13393.2
48.1
1666.3
2435.1
43.8
2396.2
59.2
2301.1
3338.3
58.7
3328.7
73.4
2896.0
4156.3
73.2
4140.0
Encrypt
30.7
483.4
933.5
52.0
938.5
396.8
6978.3
13582.0
669.3
13598.7
44.3
168.9
320.6
53.5
326.7
60.2
237.8
453.3
71.9
463.3
74.2
302.1
572.4
88.2
584.5
Decrypt
14.7
44.7
65.6
16.6
66.0
325.3
1098.8
1735.7
374.4
1740.4
36.4
125.2
178.4
41.5
183.5
49.7
173.6
251.5
57.4
251.8
60.9
215.6
309.8
74.4
310.7
Table 1: Typical running times in milliseconds of each scheme. KeyGen and Encrypt are called with attribute sets
and policies of size 4, while Decrypt with common attribute sets of size 2. “MNT” are the Miyaji, Nakabayashi,
Takano curves (asymmetric pairing groups), while “SS” are super singular curves (symmetric pairing groups).
The number after the type of the curve denotes the size of the base ﬁeld in bits.
access control of encrypted data. In ACM Conference
on Computer and Communications Security, pages
89–98, 2006.
[28] Gerome Miklau and Dan Suciu. Controlling access to
published data using cryptography. In VLDB, pages
898–909, 2003.
[21] Jonathan Katz, Amit Sahai, and Brent Waters.
[29] Atsuko Miyaji, Masaki Nakabayashi, and Shunzo
Predicate encryption supporting disjunctions,
polynomial equations, and inner products. In
EUROCRYPT, pages 146–162, 2008.
[22] Allison B. Lewko. Tools for simulating features of
composite order bilinear groups in the prime order
setting. In EUROCRYPT, pages 318–335, 2012.
[23] Allison B. Lewko, Tatsuaki Okamoto, Amit Sahai,
Katsuyuki Takashima, and Brent Waters. Fully secure
functional encryption: Attribute-based encryption and
(hierarchical) inner product encryption. In
EUROCRYPT, pages 62–91, 2010.
[24] Allison B. Lewko and Brent Waters. Decentralizing
attribute-based encryption. In EUROCRYPT, pages
568–588, 2011.
[25] Allison B. Lewko and Brent Waters. Unbounded
HIBE and attribute-based encryption. In
EUROCRYPT, pages 547–567, 2011.
[26] Allison B. Lewko and Brent Waters. New proof
methods for attribute-based encryption: Achieving full
security through selective techniques. In CRYPTO,
pages 180–198, 2012.
[27] Ben Lynn. The Stanford pairing based crypto library.
http://crypto.stanford.edu/pbc.
Takano. Characterization of elliptic curve traces under
fr-reduction. In ICISC, pages 90–108, 2000.
[30] Tatsuaki Okamoto and Katsuyuki Takashima.
Homomorphic encryption and signatures from vector
decomposition. In Pairing, pages 57–74, 2008.
[31] Tatsuaki Okamoto and Katsuyuki Takashima.
Hierarchical predicate encryption for inner-products.
In ASIACRYPT, pages 214–231, 2009.
[32] Tatsuaki Okamoto and Katsuyuki Takashima. Fully
secure functional encryption with general relations
from the decisional linear assumption. In CRYPTO,
pages 191–208, 2010.
[33] Tatsuaki Okamoto and Katsuyuki Takashima. Fully
secure unbounded inner-product and attribute-based
encryption. In ASIACRYPT, pages 349–366, 2012.
[34] Rafail Ostrovsky, Amit Sahai, and Brent Waters.
Attribute-based encryption with non-monotonic access
structures. In ACM Conference on Computer and
Communications Security, pages 195–203, 2007.
[35] Matthew Pirretti, Patrick Traynor, Patrick McDaniel,
and Brent Waters. Secure attribute-based systems. In
ACM Conference on Computer and Communications
Security, pages 99–112, 2006.
471[36] Amit Sahai and Brent Waters. Fuzzy identity-based
encryption. In EUROCRYPT, pages 457–473, 2005.
[37] Adi Shamir. Identity-based cryptosystems and
signature schemes. In CRYPTO, pages 47–53, 1984.
[38] Emily Shen, Elaine Shi, and Brent Waters. Predicate
privacy in encryption systems. In TCC, pages
457–473, 2009.
[39] Elaine Shi and Brent Waters. Delegating capabilities
in predicate encryption systems. In ICALP (2), pages
560–578, 2008.
[40] Nigel P. Smart. Access control using pairing based
cryptography. In CT-RSA, pages 111–121, 2003.
[41] Source code of our constructions.
www.cs.utexas.edu/~jrous/.
[42] Brent Waters. Eﬃcient identity-based encryption
without random oracles. In EUROCRYPT, pages
114–127, 2005.
[43] Brent Waters. Ciphertext-policy attribute-based
encryption: An expressive, eﬃcient, and provably
secure realization. In Public Key Cryptography, pages
53–70, 2011.
APPENDIX
A. ASSUMPTION 2
For our KP-ABE construction we will use a q-type as-
sumption on prime order bilinear groups, denoted by q-2,
which is similar to the Decisional Bilinear Diﬃe-Hellman
Assumption augmented with q parameters bi. It is parame-
terized by a security parameter λ ∈ N and an integer q, poly-
nomial in λ. We assume that there exists a group generator
algorithm G(1λ) → (p, G, GT , e) that outputs the descrip-
tion of the (symmetric) bilinear group of order p = Θ(2λ).
This assumption can be proved secure in the generic group
model, but the proof is omitted due to space constraints. It
is deﬁned via the following game between a challenger and
an attacker:
Initially the challenger calls the group generation algo-
rithm with input the security parameter, picks a random
group element g $← G, and q + 3 random exponents x, y, z,
$← Zp. Then he sends to the attacker the group
b1, b2, . . ., bq
description (p, G, GT , e) and all of the following terms:
i
i , gy2/b2
j , gxyzbi/bj , g(xz)2bi/bj
g, gx, gy, gz, g(xz)2
gbi , gxzbi , gxz/bi , gx2zbi , gy/b2
gxzbi/bj , gybi/b2
The challenger also ﬂips a random coin b $← {0, 1} and if
b = 0 it gives to the attacker the term e(g, g)xyz. Other-
wise it gives a random term R $← GT . Finally the attacker
outputs a guess b(cid:48) ∈ {0, 1}.
∀i ∈ [q]
∀i, j ∈ [q], i (cid:54)= j
Deﬁnition A.1. We say that the q-2 assumption holds if
all PPT attackers have at most a negligible advantage in λ
in the above security game, where the advantage is deﬁned
as Adv = Pr [b(cid:48) = b] − 1/2.
B. KEY-POLICY ATTRIBUTE-BASED EN-
CRYPTION
B.1 Algorithms
A Key-Policy Attribute-Based Encryption scheme consists
• Setup(1λ) → (pp, msk):
of the following four PPT algorithms:
The Setup algorithm takes
the security parameter λ ∈ N encoded in unary and outputs
the public parameters pp and the master secret key msk.
We assume that the public parameters contain a description
of the attribute universe U.
• KeyGen(1λ, pp, msk, A) → sk: The key generation al-
gorithm takes as inputs the public parameters pp, the master
secret key msk and an access structure A on U. The algo-
rithm generates a secret key corresponding to A.
• Encrypt(1λ, pp, m,S) → ct: The encryption algorithm
takes as inputs the public parameters pp, a plaintext message
m, and a set of attributes S ⊆ U. It outputs the ciphertext
ct.
• Decrypt(1λ, pp, sk, ct) → m: The decryption algorithm
takes as inputs the public parameters pp, a secret key sk,
and a ciphertext ct. It outputs the plaintext m.
Correctness: We require that a KP-ABE scheme is
correct, i.e the decryption algorithm correctly decrypts a
ciphertext on S with a secret key of an access structure A
when S is an authorized set of A. Formally:
Deﬁnition B.1. A KP-ABE scheme is correct when for all
messages m, and all attribute sets S and access structures A
with S ∈ A (i.e. for S authorized), any pair (pp, msk) out-
put from Setup(1λ), any secret key sk output from KeyGen
(1λ, pp, msk, A), and any ciphertext ct output by Encrypt
(1λ, pp, m,S), it is true that: Decrypt(1λ, pp, sk, ct) = m.
B.2 KP-ABE Selective Security
• Initialization:
The selective security game for KP-ABE is described by
a game between a challenger and an attacker and is param-
eterized by the security parameter λ ∈ N. The phases of the
game are the following:
In this phase the attacker declares the
challenge attribute set S∗, which he will try to attack, and
sends it to the challenger.
• Setup: Here the challenger calls the Setup(1λ) algo-
rithm and sends the public parameters pp to the attacker.
• Query Phase 1:
In this phase the attacker can adap-
tively ask for secret keys for the access structures A1, A2, . . .,
AQ1 . For each Ai the challenger calls KeyGen(msk, Ai) →
ski and sends ski to the attacker. The restriction that has
to be satisﬁed for each query is that none of the queried
policies is satisﬁed by the challenge attribute set, i.e. ∀i ∈
[Q1] : S∗ /∈ Ai.
• Challenge:
The attacker declares two equal-length
plaintexts m0 and m1 and sends them to the challenger. He
ﬂips a random coin b ∈ {0, 1} and calls Encrypt(mb,S∗) →
ct. He sends ct to the attacker.
• Query Phase 2:
This the same as query phase 1.
The attacker asks for the secret key for the access structures
AQ1+1, AQ1+2, . . ., AQ, for which the same restriction holds:
∀i ∈ [Q] : S∗ /∈ Ai.
• Guess: The attacker outputs his guess b(cid:48) ∈ {0, 1} for
b.
472Deﬁnition B.2. A KP-ABE scheme is selectively secure if
all PPT attackers have at most a negligible advantage in λ in
the above security game, where the advantage of an attacker
is deﬁned as Adv = Pr [b(cid:48) = b] − 1/2.
C. OUR LARGE UNIVERSE KP-ABE
In this section we present our large universe KP-ABE
scheme. We mention here that it can be converted to an
HIBE scheme using non repeating identities, “AND” poli-
cies and delegation capabilities (c.f.
[25]). The intuition
behind the functionality of this construction is simpler than
the CP-ABE. In this setting the public parameters consist
of the ﬁve terms (g, u, h, w, e(g, g)α). There is one term less
due to the fact that now the master secret key α is the secret
to be shared during all the key generation calls. As a result
the “secret sharing layer” uses the g term only and the w
term is used to “bind” this layer to the u, h “attribute layer”.
C.1 Construction
Our scheme consists of the following four algorithms.
• Setup(1λ) → (pp, msk): The setup algorithm calls the
group generator algorithm G(1λ) and gets the descriptions
of the groups and the bilinear mapping D = (p, G, GT , e),
where p is the prime order of the groups G and GT . The
attribute universe is U = Zp.
Then the algorithm picks the random terms g, u, h, w $← G
and α $← Zp. It outputs
pp = (D, g, u, h, w, e(g, g)α)
msk = (α)
• KeyGen(msk, (M, ρ)) → sk:
Initially, the algorithm
picks (cid:126)y = (α, y2, . . . , yn)(cid:62) where y2, . . . , yn
In the
terminology of Sec. 2.2, the master secret key α is the secret
to be shared among the shares. The vector of the shares is
$← Zp.
(cid:126)λ = (λ1, λ2, . . . , λ(cid:96))
(cid:62)
= M (cid:126)y
$← Zp and