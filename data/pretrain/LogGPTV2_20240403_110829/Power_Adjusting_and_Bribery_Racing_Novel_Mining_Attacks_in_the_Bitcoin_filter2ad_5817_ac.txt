=
,
(4)
𝑥 − 𝑅𝑆2
𝑅𝑆1
𝑅𝑆2
𝑥
𝑥
where 𝑆1 and 𝑆2 indicate different strategies (can be honest
mining 𝐻, PAW 𝑃 , or FAW 𝐹 ), and 𝑥 represents an entity
(can be the attacker 𝑎 or victim pool 𝑝), and 𝑅𝑆1
𝑥 represents
the reward of 𝑥 when adopting 𝑆1 strategy. Clearly, we have
𝑅𝐻
𝑎 = 𝛼 and 𝑅𝐻
Considering a specific case: the attacker has 0.2 computa-
tional power (𝛼 = 0.2), and the victim pool has no greater
than 0.5 computational power (0  0), regardless of 𝛽 and 𝑐.
Furthermore, similar to FAW attacks, the reward of PAW
attacks increases with the network coefficient 𝑐. While when
𝑐 = 0, the PAW attacks can still earn more rewards than
FAW/BWH attacks (FAW attacks will downgrade to BWH
attacks).
Fig. 2-b shows the victim pool will always suffer from a
loss because of the PAW attacks. Different from the results
presented in [13], the reward of the victim pool does not
always increase with 𝑐. It is because 𝑅𝐸𝑅𝑃,𝐻
increases with
𝑐 if 𝜏1 and 𝜏2 are fixed. For instance, suppose the reward of the
victim pool is 𝑅𝑃
𝑝 ( ˙𝜏1, ˙𝜏2, 𝑐1) at ˙𝜏1 and ˙𝜏2. When 𝑐1 increases
to 𝑐2, 𝑅𝑃
𝑝 ( ˙𝜏1, ˙𝜏2, 𝑐1), but
𝑝 ( ˙𝜏1, ˙𝜏2, 𝑐2) can be greater than 𝑅𝑃
𝑝
00.10.20.30.40.5Size of Target Pool -00.20.40.60.81Coefficient c123456Relative Extra Reward (%)00.10.20.30.40.5Size of Target Pool -00.20.40.60.81Coefficient c-16-14-12-10-8-6-4-2Relative Extra Reward (%)Table 1: Attacker’s optimal infiltration mining power. The
values (̂︀𝜏1,̂︀𝜏2),̂︀𝜏 indicate the optimal infiltration mining power
(̂︀𝜏1,̂︀𝜏2) of PAW and ̂︀𝜏 of FAW respectively.
𝛽
c=0
c=0.25
c=0.5
c=0.75
c=1
0.1  (0.06,  0),  0.06 (0.07,  0.29),  0.08 (0.11,  0.78),  0.10
0.2  (0.14,  0),  0.12
(0.18,  0.51),  0.19
(0.28,  0.01),  0.26 (0.35,  0.56),  0.33
0.3  (0.22,  0),  0.18
(0.15,  0),  0.15
(0.25,  0),  0.23
(0.18,  1),  0.16
(0.25,  1),  0.26
(0.33,  1),  0.39
(0.38,  1),  0.44
(0.41,  1),  0.46
Table 2: 𝑅𝐸𝑅𝑃,𝐻
𝑎
dicate 𝑅𝐸𝑅𝑃,𝐻
tively.
𝑎
(%) against one pool. The values 𝑥(𝑦) in-
in simulation and theoretical analysis respec-
𝛽
c=0
c=0.25
c=0.5
c=0.75
c=1
0.1 0.59(0.59)
0.2 1.28(1.27)
0.3 2.04(2.04)
0.75(0.75)
1.41(1.41)
2.25(2.25)
1.44(1.44)
1.84(1.84)
2.51(2.51)
3.11(3.12)
3.13(3.13)
3.13(3.13)
6.17(6.16)
5.50(5.50)
4.71(4.72)
𝑝 (¨𝜏1, ¨𝜏2, 𝑐2) > 𝑅𝑃
the attacker will adjust the optimal 𝜏1 and 𝜏2 to ¨𝜏1 and ¨𝜏2
to maximize her reward. 𝑅𝑃
𝑝 ( ˙𝜏1, ˙𝜏2, 𝑐1) does
not always hold, especially when 𝛽 is small. We also think
the victim pool’s reward under FAW attacks does not always
increase with 𝑐. The analysis is presented in Appendix-C.
However, if the victim pool’s manager is rational, the manager
can try to increase 𝑐 (if possible) as the best response of the
attacker. Besides, when 𝛽 is large enough, 𝑅𝑃
𝑝 becomes an
increasing function with 𝑐. The pool manager should always
increase 𝑐 even when he is aware of PAW attacks, which also
increases the attacker’s reward.
power of FAW (̂︀𝜏 ) and PAW (̂︀𝜏1 and ̂︀𝜏2) in Table 1. When
infiltration mining after finding an FPoW (e.g.̂︀𝜏2 = 0 when
finding an FPoW (e.g.̂︀𝜏2 = 1 when 𝑐 = 1). In such scenarios,
𝑐 = 0). It is because the attacker has less chance to earn
a reward from causing a fork. When 𝑐 is a large value, the
attacker will allocate more power for infiltration mining after
𝑐 is relatively small, the attacker will allocate less power in
Moreover, we compare the optimal infiltration mining
the attacker has a very high chance to get a reward from a
fork.
Furthermore, we present a more intuitive comparison be-
tween PAW attacks and FAW attacks. Considering the at-
tacker has 0.2 computational power, we show the expected
RERs of the attacker using PAW and FAW attacks in three
cases: 𝛽 = 0.1, 𝛽 = 0.2, and 𝛽 = 0.3. The results are depicted
in Fig. 3. Clearly, the PAW attacks are at least as profitable
as FAW attacks. When the optimal̂︀𝜏1 and̂︀𝜏2 are same, the
reward of PAW attacks equals to that of FAW attacks. In
other cases, the reward of PAW attacks is always higher.
When 𝑐 = 1 in case 1 (𝛽 = 0.1), the RER of PAW attacks
is more than twice as FAW attacks. Besides, the smaller
victim pool gives the attacker more rewards with large 𝑐. It
is because the attacker can earn a higher share in smaller
pools when 𝑐 is large. Referring to Table 1, the attacker will
reallocate all her mining power to infiltration mininĝ︀𝜏2 = 1
when 𝑐 is large (e.g. 𝑐 = 1). After Case 4 occurs, the reward of
innocent mining (in Case 4-1) is 0 since no power is allocated
to innocent mining. The reward of other miners (in Case 4-2)
is also 0 since 𝑐 = 1. Therefore, the reward goes to Case 4-2,
and the attacker will get a higher share in small pools.
Finally, we implement a Monte Carlo simulator in Matlab
to verify the accuracy of our theoretical analysis of PAW
attacks. We run the simulator over 109 rounds to show an
attacker’s RER in three cases (the attacker with 0.2 compu-
tational power and the victim pool with 0.1, 0.2, and 0.3).
Figure 3: 𝑅𝐸𝑅𝑃,𝐻
against one pool, according
to the coefficient 𝑐 when the 𝛼 = 0.2 in three cases. Case 1,
2, and 3 represent the victim pool with computational power
0.1, 0.2, and 0.3 respectively.
and 𝑅𝐸𝑅𝐹,𝐻
𝑎
𝑎
The result is presented in Table 2. The attacker’s RER is
almost the same as we expected, and the attacker can always
earn an extra reward with PAW attacks.
5.3 PAW Against Multiple Pools
Theoretical analysis. We introduce additional parameters
to analyze PAW attacks against 𝑛 pools (Pool𝑝1 , Pool𝑝2 , ...,
and Pool𝑝𝑛 ) as follows:
𝛽(𝑝𝑖): Computational power of Pool𝑝𝑖 ;
𝜏 (𝑝𝑖)
𝑗
: Attacker’s infiltration mining power in Pool𝑝𝑖 as a
proportion of 𝛼 between (𝑗 − 1)-th and 𝑗-th FPoWs
are found;
𝑐(𝑝𝑖)
𝑗
: Probability of the attacker’s FPoW in Pool𝑝𝑖 will be
selected as the main chain among (𝑗 + 1) branches.
Attacker’s reward can be derived by summing up the
reward of innocent mining, the share from other victim pool
miners, and the reward of generating branches. Prior to
deriving the total reward of innocent mining, we first consider
the infiltration mining in Pool𝑝1 , Pool𝑝2 , ..., and Pool𝑝𝑖 finds
an FPoW before the innocent mining in order (other miners
do not find any FPoWs). The innocent mining reward will
be:
1−∑︀𝑗
(𝑝𝑗 )
𝜏
𝑗
𝑘=1 𝜏
𝛼
(𝑝𝑘 )
𝑗+1 𝛼
𝑖 = 0;
,
𝑖 > 0.
(5)
𝑗=1
where 𝑅inno𝑖 is the reward of innocent mining when infiltra-
tion mining in Pool𝑝1 , ..., and Pool𝑝𝑖 only submits PPoWs,
𝑖+1 )𝛼. To simplify the expression, we
𝑗=1 part in Equation (5) be 1 when 𝑖 = 0. Furthermore,
𝑘=1 𝜏 (𝑝𝑘)
we can derive the total reward of innocent mining:
𝑅inno𝑖
⎧⎪⎨⎪⎩𝑅inno0 ,
∏︀𝑖
𝑅inno𝑖 = (1 −∑︀𝑛
let∏︀𝑖
∑︁
𝑛∑︁
⎛⎝(1 − 𝑛∑︁
𝑖=0
𝑝𝑖∈𝒫 𝑖
𝑖∏︁
1 −∑︀𝑗
𝜏
(𝑝𝑗 )
𝑗
𝛼
𝑘=1 𝜏 (𝑝𝑘)
𝑗+1 𝛼
𝜏 (𝑝𝑘)
𝑖+1 )𝛼
𝑘=1
𝑗=1
⎞⎠ ,
(6)
where 𝑝𝑖 means the infiltration mining in Pool𝑝1 , Pool𝑝2 ,
..., and Pool𝑝𝑖 finds an FPoW before the innocent mining in
order. We have 𝑝𝑖 = (𝑝1, 𝑝2,··· , 𝑝𝑖) (when 𝑚 ̸= 𝑛, 𝑝𝑚 ̸= 𝑝𝑛),
in which 𝑝𝑚 and 𝑝𝑛 are not exchangeable (e.g. (1, 2, 3) ̸=
(2, 1, 3)).
Then we consider the share when a miner in the victim
pools finds an FPoW. Referring to Equation (5), we only
need to replace 𝑅inno𝑖 with the shared reward when miners
in the victim pools find an FPoW. The total shared reward
00.10.20.30.40.50.60.70.80.91Coefficient c01234567Relative Extra Reward (%)PAW: Case 1 PAW: Case 2PAW: Case 3 FAW: Case 1 FAW: Case 2FAW: Case 3𝑎
Figure 4: 𝑅𝐸𝑅𝑃,𝐻
to the coefficient 𝑐 (𝑐(𝑝1)
= 𝑐) when
the 𝛼 = 0.2 in three cases. Case 1, 2, and 3 represent two pools
with computational power (𝛽1, 𝛽2) equals to (0.1, 0.1), (0.2, 0.1),
and (0.3, 0.1) respectively.
against two pools, according
= 𝑐 and 𝑐(𝑝1 )
and 𝑅𝐸𝑅𝐹,𝐻
= 𝑐(𝑝2)
2 + 𝑐(𝑝2)
𝑎
1
1
2
Table 3: 𝑅𝐸𝑅𝑃,𝐻
𝑅𝐸𝑅𝑃,𝐻
𝑎
𝑎
against two pools. The values 𝑥(𝑦) indicate
in simulation and theoretical analysis respectively.
(𝛽1, 𝛽2)
(0.1, 0.1)
(0.2, 0.1)
(0.3, 0.1)
c=0
c=0.25
c=0.5
c=0.75
c=1
1.27(1.26) 1.52(1.50) 2.54(2.53) 4.98(4.98) 9.53(9.53)
2.03(2.04) 2.27(2.26) 2.89(2.89) 4.50(4.50) 7.73(7.74)
2.93(2.93) 3.21(3.20) 3.66(3.67) 4.49(4.49) 6.14(6.17)
⎞⎠ ,
(7)
can be expressed as:
∑︁
⎛⎝ 𝑛∑︁
𝑛∑︁
𝑖=0
𝛽(𝑝𝑘 ) · ¯𝜏
𝛽(𝑝𝑘 ) + ¯𝜏
(𝑝𝑘 )
1,··· ,𝑘𝛼
(𝑝𝑘 )
1,··· ,𝑘𝛼
1 −∑︀𝑗
𝜏
(𝑝𝑗 )
𝑗
𝛼
𝑘=1 𝜏
(𝑝𝑘 )
𝑗+1 𝛼
· 𝑖∏︁
.
1
1
𝑗=1
𝑘=1
= 𝜏 (𝑝𝑘)
𝑝𝑖∈𝒫𝑖
where ¯𝜏 (𝑝𝑘)
Finally, we can replace 𝑅inno𝑖 in Equation (5) to express
the reward of causing branches (𝑘 (cid:62) 2 since no reward from
causing a fork when innocent mining first finds a valid block).
𝑛∑︁
∑︁
The total reward of causing branches is
𝛽 =∑︀𝑛
where 𝛽 is the total computational power of 𝑛 victim pools,
0 = 0 to indicate no reward
for the attacker when other benign miners (not in victim
pools) find a valid block first.
𝑖=1 𝛽(𝑖). We also set 𝑐(𝑝𝑘)
(1−𝛼−𝛽)¯𝜏
𝛽(𝑝𝑘 ) + ¯𝜏