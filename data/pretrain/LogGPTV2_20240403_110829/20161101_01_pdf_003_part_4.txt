### 优化后的文本

#### 查询计划和执行
1. **查询 `test_1` 表中 `appid` 大于 1000 的记录：**
   ```sql
   Seq Scan on test_1 (cost=0.00..45619.00 rows=1800419 width=49)
   Filter: (appid > 1000)
   ```
   记录总数：
   ```sql
   digoal=# select count(*) from test_1 where appid > 1000;
   1800263
   ```

2. **查询 `test_1` 表中 `appid` 大于 1000 且 `crt_time` 大于当前时间的记录：**
   ```sql
   QUERY PLAN
   -------------------------------------------------------------
   Seq Scan on test_1 (cost=0.00..55619.00 rows=180 width=49)
   Filter: ((appid > 1000) AND (crt_time > now()))
   ```
   结果为空：
   ```sql
   digoal=# select * from test_1 where appid > 1000 and crt_time > now();
   (0 rows)
   ```

#### 数据插入与统计
1. **向 `test_1` 表中插入数据：**
   ```sql
   digoal=# insert into test_1 (info, appid, crt_time) select 'test', 1, now() from generate_series(1, 100000);
   INSERT 0 100000
   ```

2. **统计 `test_1` 表中 `appid` 的出现次数并按降序排列：**
   ```sql
   digoal=# select appid, count(*) from test_1 group by appid order by count(*) desc limit 5;
   appid | count
   -------+--------
   1 | 101189
   9853 | 253
   6502 | 249
   464 | 249
   1688 | 249
   (5 rows)
   ```

3. **查看 `test_1` 表中 `appid` 字段的统计信息：**
   ```sql
   digoal=# select most_common_vals, most_common_freqs from pg_stats where tablename='test_1' and attname='appid';
   {1, 2972, 94, 207, 1998, ....}
   {0.0474333, 0.000366667, 0.000333333, 0.000333333, 0.000333333, ....}
   ```

#### 数组字段的处理
1. **创建 `test_2` 表并插入数据：**
   ```sql
   digoal=# create table test_2(id serial primary key, appid int[], crt_time timestamp);
   CREATE TABLE
   ```

2. **模拟高频率请求（`appid` 在 0-10 之间）：**
   ```sql
   vi test.sql
   insert into test_2(appid) select array_agg(appid) appid_agg from (select round(10*random())::int as appid from generate_series(1, 20)) t;
   pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 100 digoal
   ```

3. **模拟低频率请求（`appid` 大于 10）：**
   ```sql
   vi test.sql
   insert into test_2(appid) select array_agg(appid) appid_agg from (select round(1000*random())::int as appid from generate_series(1, 20)) t;
   pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10 digoal
   ```

4. **统计 `test_2` 表中 `appid` 的出现次数并按降序排列：**
   ```sql
   digoal=# select appid, count(*) from (select unnest(appid) as appid from test_2) t group by appid order by count(*) desc limit 20;
   appid | count
   -------+--------
   9 | 872831
   6 | 871908
   3 | 871867
   7 | 871551
   8 | 871436
   4 | 871391
   1 | 871051
   5 | 870770
   2 | 870692
   10 | 435583
   0 | 435342
   387 | 831
   69 | 824
   665 | 822
   ```

5. **查看 `test_2` 表中 `appid` 字段的统计信息：**
   ```sql
   digoal=# select * from
   (select row_number() over(partition by r) as rn, ele from (select unnest(most_common_elems::text::int[]) ele, 2 as r from pg_stats where tablename='test_2' and attname='appid') t) t1
   join
   (select row_number() over(partition by r) as rn, freq from (select unnest(most_common_elem_freqs) freq, 2 as r from pg_stats where tablename='test_2' and attname='appid') t) t2
   on (t1.rn = t2.rn) order by t2.freq desc limit 20;
   rn | ele | rn | freq
   -----+-----+-----+------------
   2 | 1 | 2 | 0.810967
   8 | 7 | 8 | 0.8102
   3 | 2 | 3 | 0.809233
   4 | 3 | 4 | 0.808433
   10 | 9 | 10 | 0.808367
   7 | 6 | 7 | 0.808067
   5 | 4 | 5 | 0.807467
   6 | 5 | 6 | 0.806667
   9 | 8 | 9 | 0.806233
   1 | 0 | 1 | 0.590833
   11 | 10 | 11 | 0.588033
   474 | 939 | 474 | 0.00233333
   169 | 348 | 169 | 0.00233333
   138 | 281 | 138 | 0.0023
   ```

#### 使用 HLL 数据类型进行统计
1. **快速检索唯一值：**
   ```sql
   select count(distinct userid) from access_log where date(crt_time)='2013-02-01'; -- 非常耗时
   create table access_date (acc_date date unique, userids hll);
   insert into access_date select date(crt_time), hll_add_agg(hll_hash_integer(user_id)) from access_log group by 1;
   select #userids from access_date where acc_date='2013-02-01'; -- 这条语句返回只需 1 毫秒左右 (10 亿个唯一值返回也在 1 毫秒左右)
   ```

2. **统计新增用户：**
   ```sql
   digoal=> create table access_date(acc_date date unique, userids hll);
   digoal=> insert into access_date select current_date, hll_add_agg(hll_hash_integer(user_id)) from generate_series(1, 10000) t(user_id);
   digoal=> insert into access_date select current_date-1, hll_add_agg(hll_hash_integer(user_id)) from generate_series(5000, 20000) t(user_id);
   digoal=> insert into access_date select current_date-2, hll_add_agg(hll_hash_integer(user_id)) from generate_series(9000, 40000) t(user_id);
   ```

3. **查询每日总用户数和新增用户数：**
   ```sql
   digoal=> select *, total_users - coalesce(lag(total_users, 1) over (order by rn), 0) AS new_users from (
       SELECT acc_date, row_number() over (date) as rn, #hll_union_agg(userids) OVER (date) as total_users
       FROM access_date
       WINDOW date AS (ORDER BY acc_date ASC ROWS UNBOUNDED PRECEDING)
   ) t;
   acc_date | rn | total_users | new_users
   ------------+----+------------------+------------------
   2013-02-25 | 1 | 30324.8563878223 | 30324.8563878223
   2013-02-26 | 2 | 33944.8370446358 | 3619.98065681347
   2013-02-27 | 3 | 38696.2201822711 | 4751.38313763532
   (3 rows)
   Time: 2.327 ms
   ```

#### PostgreSQL 参考资料
- **书籍：**
  - 《PostgreSQL Introduction and Concepts》
  - 《PostgreSQL 9 Administration Cookbook》
  - 《PostgreSQL 9.0 High Performance》
  - 《PostgreSQL Server Programming》
  - 《PostgreSQL 开发必备参考手册》
- **官方文档：**
  - [PostgreSQL 官方文档](http://www.postgresql.org/docs/)
  - [PostgreSQL 书籍列表](http://www.postgresql.org/docs/books/)
- **中文网站：**
  - [PostgreSQL 中文论坛](http://bbs.pgsqldb.com)
  - [PostgreSQL 中文社区](http://www.postgres.cn)
- **代码相关：**
  - [Doxygen 文档](http://doxygen.postgresql.org/)
  - [代码提交集](https://commitfest.postgresql.org/)
  - [项目 Git 仓库](http://git.postgresql.org)
  - [GitHub 镜像](https://github.com/postgres/postgres)
- **驱动程序：**
  - [JDBC 驱动](http://jdbc.postgresql.org)
  - [ODBC 驱动](http://www.postgresql.org/ftp/odbc/versions/src/)
- **扩展包：**
  - [PGFoundry](http://pgfoundry.org)
  - [PGXN](http://pgxn.org/)
- **GUI 工具：**
  - [pgAdmin](http://www.pgadmin.org/)
- **安全漏洞：**
  - [CVE 列表](http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=postgresql)

#### PostgreSQL 安装
1. **源码目录结构简介：**
   ```bash
   [root@db-172-16-3-150 postgresql-9.3.2]# ll
   total 2488
   -rw-r--r-- 1 1107 1107 385 Dec 3 04:57 aclocal.m4
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:10 config
   -rwxr-xr-x 1 1107 1107 888391 Dec 3 04:57 configure
   -rw-r--r-- 1 1107 1107 65742 Dec 3 04:57 configure.in
   drwxrwxrwx 56 1107 1107 4096 Dec 3 05:09 contrib
   -rw-r--r-- 1 1107 1107 1192 Dec 3 04:57 COPYRIGHT
   drwxrwxrwx 3 1107 1107 4096 Dec 3 05:10 doc
   -rw-r--r-- 1 1107 1107 3767 Dec 3 04:57 GNUmakefile.in
   -rw-r--r-- 1 1107 1107 1471819 Dec 3 05:12 HISTORY
   -rw-r--r-- 1 1107 1107 76689 Dec 3 05:12 INSTALL
   -rw-r--r-- 1 1107 1107 1489 Dec 3 04:57 Makefile
   -rw-r--r-- 1 1107 1107 1284 Dec 3 04:57 README
   drwxrwxrwx 15 1107 1107 4096 Dec 3 05:12 src
   ```

2. **第三方插件目录：**
   ```bash
   [root@db-172-16-3-150 contrib]# ll
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 adminpack
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 auth_delay
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 auto_explain
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 btree_gin
   drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 btree_gist
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 chkpass
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 citext
   drwxrwxrwx 5 1107 1107 4096 Dec 3 05:12 cube
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 dblink
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 dict_int
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 dict_xsyn
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 dummy_seclabel
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 earthdistance
   drwxrwxrwx 7 1107 1107 4096 Dec 3 05:09 file_fdw
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 fuzzystrmatch
   drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 hstore
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 intagg
   drwxrwxrwx 6 1107 1107 4096 Dec 3 05:09 intarray
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 isn
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 lo
   drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 ltree
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 pg_upgrade_support
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 pg_xlogdump
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 postgres_fdw
   drwxrwxrwx 5 1107 1107 4096 Dec 3 05:12 seg
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 sepgsql
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 spi
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 sslinfo
   drwxrwxrwx 3 1107 1107 4096 Dec 3 05:09 start-scripts
   drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 tablefunc
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 tcn
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 test_parser
   drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 tsearch2
   drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 unaccent
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 uuid-ossp
   drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 vacuumlo
   ```

希望这些优化后的文本能更好地帮助您理解和使用 PostgreSQL。