 Seq Scan on test_1 (cost=0.00..45619.00 rows=1800419 width=49)
 Filter: (appid > 1000)
 digoal=# select count(*) from test_1 where appid>1000;
 1800263
 digoal=# explain select * from test_1 where appid>1000 and crt_time>now();
 QUERY PLAN
 -------------------------------------------------------------
 Seq Scan on test_1 (cost=0.00..55619.00 rows=180 width=49)
 Filter: ((appid > 1000) AND (crt_time > now()))
 digoal=# select * from test_1 where appid>1000 and crt_time>now();
 (0 rows)
从柱状图中快速读取需要大运算量的TOP数据
 从柱状图信息中评估值的排行. 例如以下, appid第一位是准确的, 后面的值因为太均匀, 所以不准确.
 digoal=# insert into test_1 (info,appid,crt_time) select 'test',1,now() from generate_series(1,100000);
 INSERT 0 100000
 digoal=# select appid,count(*) from test_1 group by appid order by count(*) desc limit 5;
 appid | count
 -------+--------
 1 | 101189
 9853 | 253
 6502 | 249
 464 | 249
 1688 | 249
 (5 rows)
 digoal=# select most_common_vals,most_common_freqs from pg_stats where tablename='test_1' and attname='appid';
 {1,2972,94,207,1998,....}
 {0.0474333,0.000366667,0.000333333,0.000333333,0.000333333,....}
从柱状图中快速读取需要大运算量的TOP数据
 对于数组类型的字段, 同样适用. 可以评估出现次数最频繁的元素.
 digoal=# create table test_2(id serial primary key, appid int[], crt_time timestamp);
 CREATE TABLE
 假设appid为0-10的程序比较火爆, 模拟100秒插入请求.
 vi test.sql
 insert into test_2(appid) select array_agg(appid) appid_agg from (select round(10*random())::int as appid from
generate_series(1,20)) t;
 pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 100 digoal
 假设appid为10以上的程序不火爆, 模拟10秒插入请求.
 vi test.sql
 insert into test_2(appid) select array_agg(appid) appid_agg from (select round(1000*random())::int as appid from
generate_series(1,20)) t;
 pg93@db-172-16-3-33-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10 digoal
从柱状图中快速读取需要大运算量的TOP数据
 digoal=# select appid,count(*) from (select unnest(appid) as appid from test_2) t group by appid order by count(*) desc limit 20;
 appid | count
 -------+--------
 9 | 872831
 6 | 871908
 3 | 871867
 7 | 871551
 8 | 871436
 4 | 871391
 1 | 871051
 5 | 870770
 2 | 870692
 10 | 435583
 0 | 435342
 387 | 831
 69 | 824
 665 | 822
从柱状图中快速读取需要大运算量的TOP数据
 digoal=# select * from
 (select row_number() over(partition by r) as rn,ele from (select unnest(most_common_elems::text::int[]) ele,2 as r from pg_stats where tablename='test_2' and
attname='appid') t) t1
 join
 (select row_number() over(partition by r) as rn,freq from (select unnest(most_common_elem_freqs) freq,2 as r from pg_stats where tablename='test_2' and attname='appid')
t) t2
 on (t1.rn=t2.rn) order by t2.freq desc limit 20;
 rn | ele | rn | freq
 -----+-----+-----+------------
 2 | 1 | 2 | 0.810967
 8 | 7 | 8 | 0.8102
 3 | 2 | 3 | 0.809233
 4 | 3 | 4 | 0.808433
 10 | 9 | 10 | 0.808367
 7 | 6 | 7 | 0.808067
 5 | 4 | 5 | 0.807467
 6 | 5 | 6 | 0.806667
 9 | 8 | 9 | 0.806233
 1 | 0 | 1 | 0.590833
 11 | 10 | 11 | 0.588033
 474 | 939 | 474 | 0.00233333
 169 | 348 | 169 | 0.00233333
 138 | 281 | 138 | 0.0023
使用hll数据类型快速统计唯一值和新增值
 http://blog.163.com/digoal@126/blog/static/1638770402013127917876/
 1. 快速的检索hll中存储的唯一值.
 select count(distinct userid) from access_log where date(crt_time)='2013-02-01'; -- 非常耗时.
 create table access_date (acc_date date unique, userids hll);
 insert into access_date select date(crt_time), hll_add_agg(hll_hash_integer(user_id)) from access_log group by 1;
 select #userids from access_date where acc_date='2013-02-01'; -- 这条语句返回只要1毫秒左右. (10亿个唯一值返回也在1毫
秒左右)
 而hll仅仅需要1.2KB就可以存储1.6e+12的唯一值.
 2. 因为hll中实际上存储了键值信息, 所以还可以做类似新增用户等的统计.
 digoal=> create table access_date(acc_date date unique, userids hll);
 digoal=> insert into access_date select current_date, hll_add_agg(hll_hash_integer(user_id)) from generate_series(1,10000)
t(user_id);
 digoal=> insert into access_date select current_date-1, hll_add_agg(hll_hash_integer(user_id)) from generate_series(5000,20000)
t(user_id);
 digoal=> insert into access_date select current_date-2, hll_add_agg(hll_hash_integer(user_id)) from generate_series(9000,40000)
t(user_id);
使用hll数据类型快速统计唯一值和新增值
 digoal=> select *,total_users-coalesce(lag(total_users,1) over (order by rn),0) AS new_users from (
digoal(> SELECT acc_date, row_number() over date as rn,#hll_union_agg(userids) OVER date as total_users
digoal(> FROM access_date
digoal(> WINDOW date AS (ORDER BY acc_date ASC ROWS UNBOUNDED PRECEDING)
digoal(> ) t;
acc_date | rn | total_users | new_users
------------+----+------------------+------------------
2013-02-25 | 1 | 30324.8563878223 | 30324.8563878223
2013-02-26 | 2 | 33944.8370446358 | 3619.98065681347
2013-02-27 | 3 | 38696.2201822711 | 4751.38313763532
(3 rows)
Time: 2.327 ms
PostgreSQL参考资料
 Book
 《PostgreSQLIntroduction and Concepts》
 《PostgreSQL9 Administration Cookbook》
 《PostgreSQL9.0 High Performance》
 《PostgreSQLServer Programming》
 《PostgreSQL开发必备参考手册》
 http://www.postgresql.org/docs/
 http://www.postgresql.org/docs/books/
 Web sites
 中文网站: http://bbs.pgsqldb.com http://www.postgres.cn
 代码树: http://doxygen.postgresql.org/
 代码提交集: https://commitfest.postgresql.org/
 项目GIT: http://git.postgresql.org
 PostgreSQLGITHUB镜像: https://github.com/postgres/postgres
 PostgreSQLJDBC 驱动: http://jdbc.postgresql.org
 PostgreSQLODBC 驱动: http://www.postgresql.org/ftp/odbc/versions/src/
 PostgreSQL扩展包: http://pgfoundry.org http://pgxn.org/
 GUI工具(pgAdmin): http://www.pgadmin.org/
 安全漏洞: http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=postgresql
 More: http://blog.163.com/digoal@126/blog/static/163877040201172183022203/
PostgreSQL的安装
 PostgreSQL源码目录结构简介
 源码安装PostgreSQL
 PostgreSQL 软件目录结构简介
 PostgreSQL 集群结构简介
 扩展插件的安装
PostgreSQL源码目录结构简介
 [root@db-172-16-3-150 postgresql-9.3.2]# ll
 total 2488
 -rw-r--r-- 1 1107 1107 385 Dec 3 04:57 aclocal.m4
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:10 config
 -rwxr-xr-x 1 1107 1107 888391 Dec 3 04:57 configure 源码安装的配置脚本
 -rw-r--r-- 1 1107 1107 65742 Dec 3 04:57 configure.in
 drwxrwxrwx 56 1107 1107 4096 Dec 3 05:09 contrib 已打包到PG源码中的第三方贡献的插件源码
 -rw-r--r-- 1 1107 1107 1192 Dec 3 04:57 COPYRIGHT
 drwxrwxrwx 3 1107 1107 4096 Dec 3 05:10 doc 文档
 -rw-r--r-- 1 1107 1107 3767 Dec 3 04:57 GNUmakefile.in
 -rw-r--r-- 1 1107 1107 1471819 Dec 3 05:12 HISTORY 版本变更的历史记录
 -rw-r--r-- 1 1107 1107 76689 Dec 3 05:12 INSTALL 安装说明
 -rw-r--r-- 1 1107 1107 1489 Dec 3 04:57 Makefile
 -rw-r--r-- 1 1107 1107 1284 Dec 3 04:57 README
 drwxrwxrwx 15 1107 1107 4096 Dec 3 05:12 src 源代码
PostgreSQL源码目录结构简介
 http://www.postgresql.org/docs/9.3/static/contrib.html 第三方插件的详细介绍和使用手册
 [root@db-172-16-3-150 postgresql-9.3.2]# cd contrib/ 第三方插件(大多数都非常实用)
 [root@db-172-16-3-150 contrib]# ll
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 adminpack -- 一些管理函数
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 auth_delay -- 认证失败后延迟报异常, 可以防止暴力破解
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 auto_explain -- 将超过指定执行时间的SQL的执行计划输出到日志中
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 btree_gin -- gin索引方法的btree操作符扩展. (在某些情况下"多列gin组合索引"
比"多个btree单列索引"的bitmap anding更高效)
 drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 btree_gist -- gist索引方法的btree操作符扩展.(在组合索引中的某些列类型仅支
持gist索引访问方法, 而另一些列的类型支持btree以及gist时btree_gist更为有效, 同时btree_gist还新增了<>用于排他约
束,用于近邻算法)
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 chkpass -- 自动加密的字段类型(使用UNIX标准函数crypt()进行封装, 所以仅支
持前8位安全) 'abcdefghijkl'::chkpass = 'abcdefgh'
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 citext -- 不区分大小写的数据类型.
 drwxrwxrwx 5 1107 1107 4096 Dec 3 05:12 cube -- 多维立方体类型, 支持多维立方体对象的相同,相交,包含等运算
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 dblink -- PostgreSQL跨库操作插件
PostgreSQL源码目录结构简介
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 dict_int -- 全文检索的一个字典模板, 用于控制数字被拆分的最大长度. 以控制
数字在全文检索中的分词个数.(maxlen =6: 12345678 -> 123456 截断成6个, rejectlong =true则忽略这个分词)
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 dict_xsyn -- 全文检索的一个字典模块, 设置分词的同义词, 支持同义词匹配.
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 dummy_seclabel -- 用于安全标签SQL的测试
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 earthdistance -- 可以使用cube或point类型计算地球表面两点之间的距离
 drwxrwxrwx 7 1107 1107 4096 Dec 3 05:09 file_fdw -- 文件外部表模块
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 fuzzystrmatch -- 单字节字符串之间的相似性判断
 drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 hstore -- hstore用于存储k-v数据类型, 同时这个插件还提供了比较多的K-V类
型相关的函数和操作符. 例如提供数组,json,hstore之间的转换. k-v的存在判断,删除k-v值.
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 intagg -- int类型的数组聚合函数.(内建的array_agg函数已包含这个功能)
 drwxrwxrwx 6 1107 1107 4096 Dec 3 05:09 intarray -- int类型的数组功能扩展库, 提供了一些常用的函数和操作符(数组元
素个数, 元素排序, 元素下标, 取元素子集, 相交, 包含, 增加元素, 删除元素, 合并等)
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 isn -- 提供国际通用的产品标识码数据类型, 例如ISBN, ISMN...
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 lo -- 大对象的一个可选模块, lo类型以及自动unlink大对象的触发器. 方便大对
象在消亡后的自动unlink, 防止大对象存储泄漏(类似内存泄漏).
 drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 ltree -- 异构数据类型以及操作函数和操作符. 例如China.Zhejiang.Hang  9.1)
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 pg_upgrade_support -- pg_upgrade用到的服务端函数集
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 pg_xlogdump -- 从xlog中dump出一些易读的底层信息
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 postgres_fdw -- postgresql跨库的外部表插件
 drwxrwxrwx 5 1107 1107 4096 Dec 3 05:12 seg -- 线段类型和浮点数的区间类型. 以及相关的操作符, 索引访问方法等
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 sepgsql -- 基于SELinux安全策略的访问控制模块.
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 spi -- 一些服务端的触发器函数(例如跟踪记录的存活时间, 被哪个用户修改了,
记录的修改时间等)
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 sslinfo -- 输出ssl认证的客户端的一些认证信息
 drwxrwxrwx 3 1107 1107 4096 Dec 3 05:09 start-scripts -- 数据库启动脚本模板
 drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 tablefunc -- 一般可用于行列变换, 异构数据处理等.
PostgreSQL源码目录结构简介
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 tcn -- 提供异步消息输出的触发器.
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 test_parser -- 全文检索中的一个自定义parser的测试插件.
 drwxrwxrwx 5 1107 1107 4096 Dec 3 05:09 tsearch2 -- 全文检索相关的插件, 在全文检索未引入PG内核前的PG版本可以
使用这个插件来实现全文检索功能, >=8.3以后就不需要这个了.
 drwxrwxrwx 4 1107 1107 4096 Dec 3 05:09 unaccent -- 全文检索相关的插件
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 uuid-ossp -- 生成UUID的插件
 drwxrwxrwx 2 1107 1107 4096 Dec 3 05:09 vacuumlo -- 大对象垃圾回收的命令