process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__parse__start")select clock_timestamp();14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__plan__start")14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__parse__start")select clock_timestamp();14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__plan__start")14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__parse__start")select clock_timestamp();14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__plan__start")14140  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14140  
最后是prepared模式  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 1 -j 1 -t 6  
输出, 只有一次query parse, plan, 后面执行同样类型SQL的都是execute.  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__parse__start")select clock_timestamp();14143  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__plan__start")14143  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14143  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14143  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14143  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14143  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14143  
process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__start")14143  
显然是一prepared模式效率最高. 但是对于客户端和数据库之间有连接池的情况可能就不适用, 例如pgbouncer连接池.  
因为extended协议下如果使用prepared模式, 只有第一个parse消息中包含了sql, 后面都以named prepared statement代替, 如果更换服务端, 将找不到该backend process中存储的named prepared statement. 以致报错.  
```  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201391684012713/  
2\. http://www.postgresql.org/docs/9.3/static/dynamic-trace.html  
3\. http://blog.163.com/digoal@126/blog/static/163877040201221382150858/  
4\. http://blog.163.com/digoal@126/blog/static/163877040201221333411196/  
5\. src/backend/tcop/postgres.c  
6\. src/backend/tcop/pquery.c  
7\. http://www.postgresql.org/docs/9.3/static/protocol-flow.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")