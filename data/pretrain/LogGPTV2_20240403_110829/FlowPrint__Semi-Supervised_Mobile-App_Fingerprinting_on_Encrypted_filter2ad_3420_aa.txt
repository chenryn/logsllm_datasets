title:FlowPrint: Semi-Supervised Mobile-App Fingerprinting on Encrypted
Network Traffic
author:Thijs van Ede and
Riccardo Bortolameotti and
Andrea Continella and
Jingjing Ren and
Daniel J. Dubois and
Martina Lindorfer and
David R. Choffnes and
Maarten van Steen and
Andreas Peter
FLOWPRINT: Semi-Supervised Mobile-App
Fingerprinting on Encrypted Network Trafﬁc
Thijs van Ede1, Riccardo Bortolameotti2, Andrea Continella3, Jingjing Ren4, Daniel J. Dubois4, Martina Lindorfer5,
David Choffnes4, Maarten van Steen1, and Andreas Peter1
1University of Twente, 2Bitdefender, 3UC Santa Barbara, 4Northeastern University, 5TU Wien
{t.s.vanede, m.r.vansteen, a.peter}@utwente.nl, PI:EMAIL,
{acontinella, mlindorfer}@iseclab.org, {renjj, d.dubois, choffnes}@ccs.neu.edu
Abstract—Mobile-application ﬁngerprinting of network trafﬁc
is valuable for many security solutions as it provides insights into
the apps active on a network. Unfortunately, existing techniques
require prior knowledge of apps to be able to recognize them.
However, mobile environments are constantly evolving, i.e., apps
are regularly installed, updated, and uninstalled. Therefore, it is
infeasible for existing ﬁngerprinting approaches to cover all apps
that may appear on a network. Moreover, most mobile trafﬁc is
encrypted, shows similarities with other apps, e.g., due to common
libraries or the use of content delivery networks, and depends on
user input, further complicating the ﬁngerprinting process.
As a solution, we propose FLOWPRINT, a semi-supervised
approach for ﬁngerprinting mobile apps from (encrypted) net-
work trafﬁc. We automatically ﬁnd temporal correlations among
destination-related features of network trafﬁc and use these
correlations to generate app ﬁngerprints. Our approach is able
to ﬁngerprint previously unseen apps, something that existing
techniques fail to achieve. We evaluate our approach for both
Android and iOS in the setting of app recognition, where we
achieve an accuracy of 89.2%, signiﬁcantly outperforming state-
of-the-art solutions. In addition, we show that our approach can
detect previously unseen apps with a precision of 93.5%, detecting
72.3% of apps within the ﬁrst ﬁve minutes of communication.
I.
INTRODUCTION
Security solutions aim at preventing potentially harmful or
vulnerable applications from damaging the IT infrastructure or
leaking conﬁdential information. In large enterprise networks,
this is traditionally achieved by installing monitoring agents
that protect each individual device [67]. However, for mobile
devices security operators do not have direct control over the
apps installed on each device in their infrastructure, especially
when new devices enter networks under bring-your-own-device
(BYOD) policies on a regular basis and with the ease by
which apps are installed, updated, and uninstalled. In order
to still retain detection capabilities for apps that are active in
the network, operators rely on observing the network trafﬁc
of mobile devices. This naturally introduces the challenge of
detecting apps in encrypted network trafﬁc, which represents
the majority of mobile trafﬁc—80% of all Android apps, and
90% of apps targeting Android 9 or higher, adopt Transport
Layer Security (TLS) [31].
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24412
www.ndss-symposium.org
However, recognizing mobile apps can be a double-edged
sword: On the one hand, network ﬂow analysis provides a non-
intrusive central view of apps on the network without requiring
host access. On the other hand, app detection can be used for
censoring and invades users’ privacy. As we show in this work,
active apps on a network can not only be reliably ﬁngerprinted
for security purposes, but also in an adversarial setting, despite
trafﬁc encryption. Thus, privacy-conscious users need to be
aware of the amount of information that encrypted trafﬁc is still
revealing about their app usage, and should consider additional
safeguards, such as VPNs, in certain settings.
The idea of network-based app detection has already been
extensively explored in both industry and academia [2, 4, 5,
17, 25]. Snort for example offers AppID [21], a system for
creating network intrusion detection rules for speciﬁed apps,
while Andromaly [57] attempts to detect unknown software
through anomaly detection by comparing its network behavior
to that of known apps. Other approaches speciﬁcally focus
on detecting apps containing known vulnerabilities [62], and
others identify devices across networks based on the list of
apps installed on a device [61]. All these approaches have
in common that they require prior knowledge of apps before
being able to distinguish them. However, new apps are easily
installed, updated and uninstalled, with almost 2.5 million
apps to choose from in the Google Play Store alone [60],
not to mention a number of alternative markets. Furthermore,
recent work has shown that even the set of pre-installed apps
on Android varies greatly per device [30]. Thus, especially
when companies adopt BYOD policies, it is infeasible to know
in advance which apps will appear on the network. As a
consequence, unknown apps are either misclassiﬁed or bundled
into a big class of unknown apps. In a real-world setting, a
security operator would need to inspect the unknown trafﬁc
and decide which app it belongs to, limiting the applicability
of existing approaches in practice.
Unlike existing solutions, we assume no prior knowledge
about the apps running in the network. We aim at generating
ﬁngerprints that act as markers, and that can be used to both
recognize known apps and automatically detect and isolate
previously unseen apps. From this, a security operator can
update whitelists, blacklists or conduct targeted investigations
on per-app groupings of network trafﬁc.
There are several challenges that make such ﬁngerprinting
non-trivial. This is because mobile network trafﬁc is particu-
larly homogeneous, highly dynamic, and constantly evolving:
Homogeneous. Mobile network trafﬁc is homogeneous be-
cause many apps share common libraries for authentication,
advertisements or analytics [11]. In addition, the vast majority
of trafﬁc uses the same application-level protocol HTTP in
various forms (HTTP(S)/QUIC) [50]. Furthermore, part of
the content is often served through content delivery networks
(CDNs) or hosted by cloud providers. Consequently, different
apps share many network trafﬁc characteristics. Our work
tackles homogeneous trafﬁc by leveraging the difference in
network destinations that apps communicate with. We show
that despite the large overlap in destinations, our approach is
still able to extract unique patterns in the network trafﬁc.
Dynamic. Mobile network trafﬁc is often dynamic as data that
apps generate may depend on the behavior of the users, e.g.,
their navigation through an app. Such dynamism may already
be observed in synthetic datasets that randomly browse through
an app’s functionality. Various ﬁngerprinting approaches rely
on repetitive behavior in network trafﬁc [1, 28]. Despite good
results of these methods in smart-home environments and
industrial control systems, dynamic trafﬁc could complicate
ﬁngerprinting of mobile apps. Hence, our work aims to create
ﬁngerprints that are robust against user interactions by leverag-
ing information about network destinations on which the user
has limited inﬂuence. We show that our approach achieves
similar results on both automated and user-generated datasets.
Evolving. Mobile network trafﬁc is constantly evolving as app
markets offer effortless installation, update, and uninstallation
of a vast array of apps. Studies have shown that apps are
regularly updated with new versions, as frequently as once a
month on average [11, 22]. This is a challenge for existing ﬁn-
gerprinting mechanisms that require prior knowledge of an app
in order to generate ﬁngerprints. When new or updated apps
are introduced into the network, these ﬁngerprinting systems
become less accurate, similarly to what Vastel et al. observed in
the setting of browser ﬁngerprinting [65]. Moreover, the frac-
tion of apps covered by these systems dramatically decreases
over time if ﬁngerprints are not regularly updated. Our solution
counters this by basing its ﬁngerprints on pattern discovery in
network trafﬁc instead of training on labeled data. Doing so,
our approach produces ﬁngerprints that automatically evolve
together with the changing network trafﬁc. We show that our
approach is able to correctly recognize updated apps and can
even detect and ﬁngerprint previously unseen apps.
To address
these challenges, we introduce a semi-
supervised approach to generate ﬁngerprints for mobile apps.
Our key observation is that mobile apps are composed of
different modules that often communicate with a static set of
destinations. We leverage this property to discover patterns in
the network trafﬁc corresponding to these different modules.
On a high level, we group together (encrypted) TCP/UDP
ﬂows based on their destination and ﬁnd correlations in des-
tinations frequently accessed together. We then combine these
patterns into ﬁngerprints, which may, among other use cases,
be used for app recognition and unseen app detection.
While our approach does not require prior knowledge to
generate ﬁngerprints, and could, thus, be considered unsuper-
vised, the applications of our approach are semi-supervised. In
fact, our approach creates “anonymous” labels that uniquely
identify mobile apps. However, app recognition uses known
labels to assign app names to the matched ﬁngerprints. For
example, having knowledge about
the Google Maps app,
allows us to rename unknown_app_X to google_maps.
Similarly, unseen app detection requires a training phase on a
set of known apps to identify unknown ones.
In summary, we make the following contributions:
• We introduce an approach for semi-supervised ﬁn-
gerprinting by combining destination-based clustering,
browser isolation and pattern recognition.
• We implement this approach in our prototype FLOW-
the ﬁrst real-time system for constructing
PRINT,
mobile app ﬁngerprints capable of dealing with unseen
apps, without requiring prior knowledge.
• We show that, for both Android and iOS apps, our
approach detects known apps with an accuracy of
89.2%, signiﬁcantly outperforming the state-of-the-art
supervised app recognition system AppScanner [62].
Moreover, our approach is able to deal with app
updates and is capable of detecting previously unseen
apps with a precision of 93.5%.
In the spirit of open science, we make both our prototype and
datasets available at https://github.com/Thijsvanede/FlowPrint.
II. PRELIMINARY ANALYSIS
To study mobile network trafﬁc and identify strong indica-
tors that can be used to recognize mobile apps, we performed
a preliminary analysis on a small dataset. As indicated in
the introduction, our ﬁngerprinting method should be able to
distinguish mobile apps despite their homogeneous, dynamic
and evolving behavior. Hence, in our preliminary analysis we
explored features that may be used to ﬁngerprint apps.
A. Dataset
In order to perform our analyses, we use datasets of
encrypted network trafﬁc labeled per app (see Table I). These
datasets allow us to evaluate our method in various conditions
as they contain a mix of both synthetic and user-generated data;
Android and iOS apps; benign and potentially harmful apps;
different app stores; and different versions of the same app. We
collected three of the datasets as part of our prior work [40, 51,
52, 53]. We collected the last set speciﬁcally for this work with
the purpose of representing browser trafﬁc, which is lacking in
most available datasets. For this preliminary analysis, we only
used a small fraction of the available data in order to prevent
bias in the ﬁnal evaluation.
ReCon. The ReCon AppVersions dataset [52, 53] consists
of labeled network traces of 512 Android apps from the
Google Play Store, including multiple version releases over
a period of eight years. The traces were generated through
a combination of automated and scripted interactions on ﬁve
different Android devices. The apps were chosen among the
600 most popular free apps on the Google Play Store ranking
within the top 50 in each category. In addition, this dataset
contains extended traces of ﬁve apps, including multiple ver-
sion releases. The network trafﬁc of each of these ﬁve apps
was captured daily over a two-week period. In this work, we
refer the AppVersions dataset as ReCon and to the extended
dataset as ReCon extended.
2
TABLE I.
DATASET OVERVIEW.  INDICATES A DATASET CONTAINS
HOMOGENEOUS (H), DYNAMIC (D), OR EVOLVING (E) TRAFFIC.
Avg.
Duration H D E


189.2s 
4h 16m 
Dataset
No.
Apps
No.
Flows
% TLS
Flows
Start Date
End Date
ReCon [52, 53]
ReCon extended [52, 53]
Cross Platform (Android) [51]
Cross Platform (iOS) [51]
Cross Platform (All) [51]
512
5
215
196
411
28.7K
141.2K
67.4K
34.8K
102.2K
65.9% 2017-01-24
54.0% 2017-04-21
2017-05-06
2017-05-06
35.6% 2017-09-11
74.2% 2017-08-28
49.6% 2017-08-28
2017-11-20
2017-11-13
2017-11-20
333.0s  
339.4s  
336.0s  
Andrubis [40]
Browser
1.03M 41.3M
24.7% 2012-06-13
2016-03-25
210.7s 
4
204.5K
90.5% 2018-12-17
2019-03-01
3h 34m 
Cross Platform. The Cross Platform dataset [51] consists of
user-generated data for 215 Android and 196 iOS apps. The
iOS apps were gathered from the top 100 apps in the App
Store in the US, China and India. The Android apps originate
from the top 100 apps in Google Play Store in the US and
India, plus from the top 100 apps of the Tencent MyApps and
360 Mobile Assistant stores, as Google Play is not available in
China. Each app was executed between three and ten minutes
while receiving real user inputs. Procedures to install, interact,
and uninstall the apps were given to student researchers who
followed them to complete the experiments while collecting
data. We use this dataset to evaluate both the performance
of our method with user-generated data and the performance
between different operating systems.
Andrubis. The Andrubis dataset [40] contains labeled data of
1.03 million Android apps from the Google Play Store and 15
alternative market places. This dataset contains both benign
and potentially harmful apps, as classiﬁed by VirusTotal. Each
trace in this dataset was generated by running the app for
four minutes in a sandbox environment emulating an Android
device. The app was exercised by automatically invoking app
activities and registered broadcast receivers, and simulating
user interactions through the Android Application Exerciser
Monkey. We use the Andrubis dataset for experiments requir-
ing large trafﬁc volume and to assess the performance of our
method on both benign and potentially harmful apps.
Browser. We created the Browser dataset because the existing
datasets contain a limited amount of browser trafﬁc, which may
produce a signiﬁcant portion of trafﬁc in mobile environments.
Even though a browser is not a dedicated app, but rather a
platform on which various web content is rendered, executed
and displayed, a ﬁngerprinting method with the purpose of
detecting apps should also be able to detect the browser as
a single app. To this end, we collect an additional dataset
of browser trafﬁc by scraping the top 1,000 Alexa websites
on a Samsung Galaxy Note 4 running Android 6.0.1 with
Chrome, Firefox, Samsung Internet and UC Browser, which
cover 90.9% of browser trafﬁc [59], if we exclude Safari,
which is not available for Android. Each website visit lasts for
15 seconds, while the Application Exerciser Monkey simulates
a series of random movements and touches.
B. Feature Exploration
Previous work on app ﬁngerprinting usually tackles the
problem in a supervised setting. In this work however, we
propose an approach with the aim of automatically detect-
ing unknown apps, without requiring prior knowledge. This
requires a re-evaluation of the network features commonly
used in app ﬁngerprinting. Therefore, we ﬁrst identify pos-
sible features from the network trafﬁc. The TLS-encrypted
trafﬁc limits the available features to temporal and size-based
features, as well as the header values of unencrypted layers
and the handshake performed to establish a TLS connection.
The data-link layer header provides only information about
the linked devices, not about the app itself and is therefore
not useful for our purposes. We further analyze the layers
between the data-link and application layer, as we expect the
latter to be encrypted. From these layers, we extract all header
values controlled by the communicating app as well as the
sizes and inter-arrival times of packets. In addition, for the size
and time related features we compute the statistical properties:
minimum, maximum, mean, standard deviation, mean absolute
deviation, and 10-th through 90-th percentile values.
C. Feature Ranking
We score all features according to the Adjusted Mutual
Information (AMI) [66], a metric for scoring features in unsu-
pervised learning. We favor the AMI over other methods, such
as information gain, as the latter is biased towards features that
can take on random values. Such randomness is undesirable
in an unsupervised or semi-supervised setting, as we do not
have any prior expectation of feature values. The AMI deﬁnes
the relative amount of entropy gained by knowing a feature
with respect to the class, in our case the app. To this end, we
ﬁrst compute the mutual information between a feature and its
app as described in Equation 1. Here Y is the list of classes
of each sample and X is the list of features corresponding to
the samples. Function p(x, y) deﬁnes the joint probability of
value x and label y, whereas p(x) and p(y) are the individual
probabilities of features x and y occurring respectively.
M I(X, Y ) =
p(x, y) log
(1)
(cid:16) p(x, y)