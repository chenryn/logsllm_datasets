# FlowPrint: Semi-Supervised Mobile-App Fingerprinting on Encrypted Network Traffic

**Authors:**
- Thijs van Ede
- Riccardo Bortolameotti
- Andrea Continella
- Jingjing Ren
- Daniel J. Dubois
- Martina Lindorfer
- David R. Choffnes
- Maarten van Steen
- Andreas Peter

**Affiliations:**
- 1 University of Twente
- 2 Bitdefender
- 3 UC Santa Barbara
- 4 Northeastern University
- 5 TU Wien

**Contact Information:**
- {t.s.vanede, m.r.vansteen, a.peter}@utwente.nl
- PI:EMAIL
- {acontinella, mlindorfer}@iseclab.org
- {renjj, d.dubois, choffnes}@ccs.neu.edu

## Abstract
Mobile application fingerprinting of network traffic is crucial for many security solutions as it provides insights into the apps active on a network. However, existing techniques require prior knowledge of the apps to recognize them. In mobile environments, apps are frequently installed, updated, and uninstalled, making it infeasible for traditional fingerprinting methods to cover all possible apps. Additionally, most mobile traffic is encrypted, exhibits similarities due to common libraries or content delivery networks (CDNs), and depends on user input, complicating the fingerprinting process.

To address these challenges, we propose **FLOWPRINT**, a semi-supervised approach for fingerprinting mobile apps from encrypted network traffic. Our method automatically identifies temporal correlations among destination-related features of network traffic and uses these correlations to generate app fingerprints. FLOWPRINT can fingerprint previously unseen apps, a capability that existing techniques lack. We evaluate our approach for both Android and iOS, achieving an accuracy of 89.2% in app recognition, significantly outperforming state-of-the-art solutions. Furthermore, our approach detects previously unseen apps with a precision of 93.5%, identifying 72.3% of apps within the first five minutes of communication.

## 1. Introduction
Security solutions aim to prevent potentially harmful or vulnerable applications from damaging IT infrastructure or leaking confidential information. In large enterprise networks, this is traditionally achieved by installing monitoring agents on each device. However, for mobile devices, security operators do not have direct control over the apps installed on each device, especially under bring-your-own-device (BYOD) policies. To retain detection capabilities, operators rely on observing network traffic. This introduces the challenge of detecting apps in encrypted network traffic, which represents the majority of mobile trafficâ€”80% of all Android apps and 90% of apps targeting Android 9 or higher use Transport Layer Security (TLS).

Recognizing mobile apps can be a double-edged sword: while network flow analysis provides a non-intrusive central view of apps without requiring host access, app detection can also be used for censorship and invades users' privacy. As we demonstrate, active apps on a network can be reliably fingerprinted for security purposes and in adversarial settings, despite traffic encryption. Privacy-conscious users need to be aware of the information revealed by encrypted traffic and should consider additional safeguards, such as Virtual Private Networks (VPNs), in certain settings.

The idea of network-based app detection has been extensively explored in both industry and academia. For example, Snort offers AppID, a system for creating network intrusion detection rules for specified apps, and Andromaly attempts to detect unknown software through anomaly detection. Other approaches focus on detecting apps with known vulnerabilities or identifying devices based on installed apps. These methods require prior knowledge of the apps, which is infeasible in dynamic mobile environments where new apps are easily installed, updated, and uninstalled. Consequently, unknown apps are often misclassified or grouped into a "big class" of unknown apps, limiting the practical applicability of existing approaches.

Unlike existing solutions, FLOWPRINT assumes no prior knowledge about the apps running in the network. It generates fingerprints that can be used to recognize known apps and automatically detect and isolate previously unseen apps. A security operator can then update whitelists, blacklists, or conduct targeted investigations on per-app groupings of network traffic.

Several challenges make such fingerprinting non-trivial:
- **Homogeneous Traffic:** Many apps share common libraries for authentication, advertisements, or analytics, and most traffic uses HTTP(S)/QUIC. Content is often served through CDNs or cloud providers, leading to shared network traffic characteristics.
- **Dynamic Traffic:** Mobile traffic is dynamic, as data generated by apps may depend on user behavior. This dynamism complicates fingerprinting.
- **Evolving Traffic:** Apps are regularly updated, and new apps are frequently introduced, challenging existing fingerprinting mechanisms that require prior knowledge.

To address these challenges, FLOWPRINT leverages the differences in network destinations that apps communicate with, creating robust fingerprints against user interactions. Our approach achieves similar results on both automated and user-generated datasets and can correctly recognize updated apps and even detect and fingerprint previously unseen apps.

In summary, our contributions are:
- An approach for semi-supervised fingerprinting by combining destination-based clustering, browser isolation, and pattern recognition.
- Implementation of FLOWPRINT, the first real-time system for constructing mobile app fingerprints capable of dealing with unseen apps without requiring prior knowledge.
- Demonstration of 89.2% accuracy in detecting known apps and 93.5% precision in detecting previously unseen apps for both Android and iOS, outperforming state-of-the-art supervised app recognition systems.

In the spirit of open science, we make both our prototype and datasets available at [https://github.com/Thijsvanede/FlowPrint](https://github.com/Thijsvanede/FlowPrint).

## 2. Preliminary Analysis
To study mobile network traffic and identify strong indicators for recognizing mobile apps, we performed a preliminary analysis on a small dataset. Our fingerprinting method should distinguish mobile apps despite their homogeneous, dynamic, and evolving behavior.

### 2.1 Dataset
We use datasets of encrypted network traffic labeled per app, containing a mix of synthetic and user-generated data, Android and iOS apps, benign and potentially harmful apps, different app stores, and different versions of the same app. The datasets include:

- **ReCon [52, 53]:** Labeled network traces of 512 Android apps from the Google Play Store, including multiple version releases over eight years.
- **ReCon Extended [52, 53]:** Extended traces of five apps, captured daily over a two-week period.
- **Cross Platform [51]:** User-generated data for 215 Android and 196 iOS apps, collected from the top 100 apps in various app stores.
- **Andrubis [40]:** Labeled data of 1.03 million Android apps from the Google Play Store and 15 alternative marketplaces, including both benign and potentially harmful apps.
- **Browser:** A dataset of browser traffic, collected by scraping the top 1,000 Alexa websites on a Samsung Galaxy Note 4 with Chrome, Firefox, Samsung Internet, and UC Browser.

### 2.2 Feature Exploration
Previous work on app fingerprinting typically uses a supervised setting. FLOWPRINT, however, aims to automatically detect unknown apps without prior knowledge. This requires re-evaluating the network features commonly used in app fingerprinting. We identify possible features from the network traffic, focusing on temporal and size-based features, as well as header values of unencrypted layers and the TLS handshake. We compute statistical properties for size and time-related features, including minimum, maximum, mean, standard deviation, mean absolute deviation, and percentile values.

### 2.3 Feature Ranking
We score all features using Adjusted Mutual Information (AMI), a metric for scoring features in unsupervised learning. AMI defines the relative amount of entropy gained by knowing a feature with respect to the class (in our case, the app). We compute the mutual information between a feature and its app as described in Equation 1, where Y is the list of classes for each sample, X is the list of features, and p(x, y) is the joint probability of value x and label y.

\[
MI(X, Y) = \sum_{x, y} p(x, y) \log \left( \frac{p(x, y)}{p(x) p(y)} \right)
\]

This approach helps us identify the most informative features for app fingerprinting.