      }
    }
检查外部异常的堆栈跟踪，会看到行号3009和114，与前面相似。然而，内部异常给
出了错误的最初原因。它给出调用了错误方法的行号（3004）和抛出最初（内部）异常的
行号（8002）：
    Log exception test 2 and throw again
    throw with inner exception
      at Program.HandleAndThrowWithInnerException() in Program.cs:line 3009
      at Program.HandleAll() in Program.cs:line 114
          Inner Exception throw with inner exception
      at Program.ThrowAnException(String message) in Program.cs:line 8002
      at Program.HandleAndThrowWithInnerException() in Program.cs:line 3004
这样不会丢失信息。
  注意： 试图找到错误的原因时，看看内部异常是否存在。这往往会提供有用
的信息。
  注意： 捕获异常时，最好在重新抛出时改变异常。例如，捕获SqlException
异常，可以导致抛出与业务相关的异常，例如，InvalidIsbnException。
3．重新抛出异常
如果不应该改变异常的类型，就可以使用throw语句重新抛出相同的异常。使用throw
但不传递异常对象，会抛出catch块的当前异常，并保存异常信息：
    #line 2000
    public static void HandleAndRethrow()
    {
      try
      {
        ThrowAnException("test 3");
      }
      catch (Exception ex)
      {
        WriteLine($"Log exception {ex.Message} and rethrow");
        throw;
  // line 2009
      }
    }
有了这些代码，堆栈信息就不会丢失。异常最初是在8002行抛出，在第2009行重新抛
出。行114包含调用HandleAndRethrow的委托m：
    Log exception test 3 and rethrow
    test 3
      at Program.ThrowAnException(String message) in Program.cs:line 8002
      at Program.HandleAndRethrow() in Program.cs:line 2009
      at Program.HandleAll() in Program.cs:line 114
4．使用过滤器添加功能
使用throw语句重新抛出异常时，调用堆栈包含抛出的地址。使用异常过滤器，可以
根本不改变调用堆栈。现在添加when关键字，传递过滤器方法。这个过滤器方法Filter记
录消息，总是返回false。这就是为什么catch块永远不会调用的原因：
    #line 1000
    public void HandleWithFilter()
    {
      try
      {
        ThrowAnException("test 4");  // line 1004
      }
      catch (Exception ex) when(Filter(ex)
)
      {
        WriteLine("block never invoked");
      }
    }
    #line 1500
    public bool Filter(Exception ex)
    {
      WriteLine($"just log {ex.Message}");
      return false;
    }
现在看看堆栈跟踪，异常起源于HandleAll方法的第114行，它调用HandleWithFilter，
第1004行包含ThrowAnException的调用，第8002行抛出了异常：
    just log test 4
    test 4
      at Program.ThrowAnException(String message) in Program.cs:line 8002
      at Program.HandleWithFilter() in Program.cs:line 1004
      at RethrowExceptions.Program.HandleAll() in Program.cs:line 114
  注意： 异常过滤器的主要用法是基于值异常的过滤异常。异常过滤器也可以
用于其他效果，比如写入日志信息，但不改变调用堆栈。然而，异常过滤器应该运行
很快，所以应该只做简单的检查。
14.3.6 没有处理异常时发生的情况
有时抛出了一个异常后，代码中没有catch块能处理这类异常。前面的
SimpleExceptions示例就说明了这种情况。例如，假定忽略FormatException异常和通用的
catch块，则只有捕获IndexOutOfRange-Exception异常的块。此时，如果抛出一个
FormatException异常，会发生什么情况呢？
答案是.NET运行库会捕获它。本节后面将介绍如何嵌套try块——实际上在本示例
中，就有一个在后台处理的嵌套的try块。.NET运行库把整个程序放在另一个更大的try块
中，对于每个.NET程序它都会这么做。这个try块有一个catch处理程序，它可以捕获任何
类型的异常。如果出现代码没有处理的异常，程序流就会退出程序，由.NET运行库中的
catch块捕获它。但是，事与愿违。代码的执行会立即终止，并给用户显示一个对话框，
说明代码没有处理异常，并给出.NET运行库能检索到的关于异常的详细信息。至少异常
会被捕获。
一般情况下，如果编写一个可执行程序，就应捕获尽可能多的异常，并以合理的方式
处理它们。如果编写一个库，最好捕获可以用有效方式处理的异常，或者在上下文中添加
额外的信息，抛出其他异常类型，如上一节所示。假定调用代码可以处理它遇到的任何错
误。
14.4 用户定义的异常类
上一节创建了一个用户定义的异常。下面介绍有关异常的第二个示例，这个示例称为
SolicitColdCall，它包含两个嵌套的try块，说明了如何定义自定义异常类，再从try块中抛
出另一个异常。
这个示例假定一家销售公司希望有更多的客户。该公司的销售部门打算给一些人打电
话，希望他们成为自己的客户。用销售行业的行话来讲，就是“陌生电话”（cold-
calling）。为此，应有一个文本文件存储这些陌生人的姓名，该文件应有良好的格式，其
中第一行包含文件中的人数，后面的行包含这些人的姓名。换言之，正确的格式如下所
示。
    4
    George Washington
    Benedict Arnold
    John Adams
    Thomas Jefferson
这个示例的目的是在屏幕上显示这些人的姓名（由销售人员读取），这就是为什么只
把姓名放在文件中，但没有电话号码的原因。
程序要求用户输入文件的名称，然后读取文件，并显示其中的人名。这听起来是一个
很简单的任务，但也会出现两个错误，需要退出整个过程：
● 用户可能输入不存在的文件名。这作为FileNotFound异常来捕获。
● 文件的格式可能不正确，这里可能有两个问题。首先，文件的第一行不是整数。第
二，文件中可能没有第一行指定的那么多人名。这两种情况都需要在一个自定义
异常中处理，我们已经专门为此编写了ColdCallFileFormatException异常。
还会有其他问题，虽然不至于退出整个过程，但需要删除某个人名，继续处理文件中
的下一个人名（因此这需要在内层的try块中处理）。一些人是商业间谍，为销售公司的
竞争对手工作，显然，我们不希望不小心打电话给他们，让这些人知道我们要做的工作。
为简单起见，假设姓名以B开头的那些人是商业间谍。这些人应在第一次准备数据文件时
从文件中删除，但为防止有商业间谍混入，需要检查文件中的每个姓名，如果检测到一个
商业间谍，就应抛出一个SalesSpyFoundException异常，当然，这是另一个自定义异常对
象。
最后，编写一个类ColdCallFileReader来实现这个示例，该类维护与cold-call文件的连
接，并从中检索数据。我们将以非常安全的方式编写这个类，如果其方法调用不正确，就
会抛出异常。例如，如果在文件打开前，调用了读取文件的方法，就会抛出一个异常。为
此，我们编写了另一个异常类UnexpectedException。
14.4.1 捕获用户定义的异常
用户自定义异常的代码示例使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.IO
    static System.Console
首先是SolicitColdCall示例的Main（）方法，它捕获用户定义的异常。注意，下面要
调用System.IO名称空间和System名称空间中的文件处理类（代码文件
SolicitColdCall/Program.cs）。
    using System;
    using System.IO;
    using static System.Console;
    namespace Wrox.ProCSharp.ErrorsAndExceptions
    {
      public class Program
      {
        public static void Main()
        {
        Write("Please type in the name of the file " +
            "containing the names of the people to be cold called > ");
        string fileName = ReadLine();
        ColdCallFileReaderLoop1(fileName);
        WriteLine();
        ReadLine();
        }
        public static ColdCallfFileReaderLoop1(string filename)
        {
        var peopleToRing = new ColdCallFileReader();
        try
        {
          peopleToRing.Open(fileName);
          for (int i = 0; i < peopleToRing.NPeopleToRing; i++)
          {
            peopleToRing.ProcessNextPerson();
          }
          WriteLine("All callers processed correctly");
        }
        catch(FileNotFoundException)
        {
          WriteLine($"The file {fileName} does not exist");
        }
        catch(ColdCallFileFormatException ex)
        {
          WriteLine($"The file {fileName} appears to have been corrupted");
          WriteLine($"Details of problem are: {ex.Message}");
          if (ex.InnerException ! = null)
          {
            WriteLine($"Inner exception was: {ex.InnerException.Message}");
          }
        }
        catch(Exception ex)
        {
          WriteLine($"Exception occurred:\n{ex.Message}");
        }
        finally
        {
          peopleToRing.Dispose();
        }
        }
      }
这段代码基本上只是一个循环，用来处理文件中的人名。开始时，先让用户输入文件
名，再实例化ColdCallFileReader类的一个对象，这个类稍后定义，正是这个类负责处理文
件中数据的读取。注意，是在第一个try块的外部读取文件——这是因为这里实例化的变
量需要在后面的catch块和finally块中使用，如果在try块中声明它们，它们在try块的闭合花
括号处就超出了作用域，这会导致异常。
在try块中打开文件（使用ColdCallFileReader.Open（）方法），并循环处理其中的所
有人名。ColdCallFileReader.ProcessNextPerson（）方法会读取并显示文件中的下一个人
名，而ColdCallFile-Reader.NpeopleToRing属性则说明文件中应有多少个人名（通过读取
文件的第一行来获得）。有3个catch块，其中两个分别用于处理FileNotFoundException和
ColdCallFileFormatException异常，第3个则用于处理任何其他.NET异常。
在FileNotFoundException异常中，我们会为它显示一条消息，注意在这个catch块中，
根本不会使用异常实例，原因是这个catch块用于说明应用程序的用户友好性。异常对象
一般会包含技术信息，这些技术信息对开发人员很有用，但对于最终用户来说则没有什么
用，所以本例将创建一条更简单的消息。
对于ColdCallFileFormatException异常的处理程序，则执行相反的操作，说明了如何
获得更完整的技术信息，包括内层异常的细节（如果存在内层异常）。
最后，如果捕获到其他一般异常，就显示一条用户友好消息，而不是让这些异常
由.NET运行库处理。注意，我们选择不处理没有派生自System.Exception异常类的异常，
因为不直接调用非.NET的代码。
finally块清理资源。在本例中，这是指关闭已打开的任何文件。
ColdCallFileReader.Dispose（）方法完成了这个任务。
  注意： C#提供了一个using语句，编译器自己会在使用该语句的地方创建一
个try/finally块，该块调用finally块中的Dispose方法。实现了一个Dispose方法的对象就
可以使用using语句。第5章详细介绍了using语句。
14.4.2 抛出用户定义的异常
下面看看处理文件读取，以及（可能）抛出用户定义的异常类ColdCallFileReader的定
义。因为这个类维护一个外部文件连接，所以需要确保它根据第4章有关释放对象的规
则，正确地释放它。这个类派生自IDisposable类。
首先声明一些私有字段（代码文件SolicitColdCall/ColdCallFileReader.cs）：
      public class ColdCallFileReader: IDisposable
      {
        private FileStream _fs;
        private StreamReader _sr;
        private uint _nPeopleToRing;
        private bool _isDisposed = false;
        private bool _isOpen = false;
FileStream和StreamReader都在System.IO名称空间中，它们都是用于读取文件的基
类。FileStream基类主要用于连接文件，StreamReader基类则专门用于读取文本文件，并
实现Readline（）方法，该方法读取文件中的一行文本。第23章在深入讨论文件处理时将
讨论StreamReader基类。
isDisposed字段表示是否调用了Dispose（）方法，我们选择实现ColdCallFileReader异
常，这样，一旦调用了Dispose（）方法，就不能重新打开文件连接，重新使用对象了。
isOpen字段也用于错误检查——在本例中，检查StreamReader基类是否连接到打开的文件
上。
打开文件和读取第一行的过程——告诉我们文件中有多少个人名——由Open（）方
法来处理：
    public void Open(string fileName)
    {
      if (_isDisposed)
      {
        throw new ObjectDisposedException("peopleToRing");
      }
      _fs = new FileStream(fileName, FileMode.Open);
      _sr = new StreamReader(_fs);
      try
      {
        string firstLine = _sr.ReadLine();
        _nPeopleToRing = uint.Parse(firstLine);
        _isOpen = true;
      }
      catch (FormatException ex)
      {
        throw new ColdCallFileFormatException(
          $"First line isn\'t an integer {ex}");
      }
    }
与ColdCallFileReader异常类的所有其他方法一样，该方法首先检查在删除对象后，客
户端代码是否不正确地调用了它，如果是，就抛出一个预定义的ObjectDisposedException
异常对象。Open（）方法也会检查isDisposed字段，看看是否已调用Dispose（）方法。因
为调用Dispose（）方法会告诉调用者现在已经处理完对象，所以，如果已经调用了
Dispose（）方法，就说明有一个试图打开新文件连接的错误。
接着，这个方法包含前两个内层的try块，其目的是捕获因为文件的第一行没有包含
一个整数而抛出的任何错误。如果出现这个问题，.NET运行库就抛出一个
FormatException异常，该异常捕获并转换为一个更有意义的异常，这个更有意义的异常表
示cold-call文件的格式有问题。注意System.FormatException异常表示与基本数据类型相关
的格式问题，而不是与文件有关，所以在本例中它不是传递回主调例程的一个特别有用的
异常。新抛出的异常会被最外层的try块捕获。因为这里不需要清理资源，所以不需要
finally块。
如果一切正常，就把isOpen字段设置为true，表示现在有一个有效的文件连接，可以
从中读取数据。
ProcessNextPerson（）方法也包含一个内层try块：
    public void ProcessNextPerson()
    {
      if (_isDisposed)
      {
        throw new ObjectDisposedException("peopleToRing");
      }
      if (! _isOpen)
      {
        throw new UnexpectedException(
          "Attempted to access coldcall file that is not open");
      }
      try
      {
        string name = _sr.ReadLine();
        if (name == null)
        {
          throw new ColdCallFileFormatException("Not enough names");
        }
        if (name[0] == 'B')
        {
          throw new SalesSpyFoundException(name);