一些人开始使用树莓派，这样可以更安全地进行实验，而不必担心损坏计算机（只需擦除 SD 卡然后重新开始即可！）。
### 漂亮的 Shell 环境
很多人说，当他们开始使用像 [oh-my-zsh](https://ohmyz.sh/) 或 [Fish](https://fishshell.com/) 这样更用户友好的 Shell 环境时，他们在命令行上感到更舒适。我非常同意这一点 – 我已经使用 Fish 十年了，我非常喜欢它。
在这里还有一些其他的事情可以做：
* 有些人说，让他们的终端更漂亮可以帮助他们感到更舒适（“让它变成粉色！”）。
* 设置一个漂亮的 Shell 提示符来提供更多信息（例如，当命令失败时，可以将提示符设置为红色）。特别是 [transient prompts](https://www.reddit.com/r/zsh/comments/dsh1g3/new_powerlevel10k_feature_transient_prompt/)（在当前命令设置一个非常花哨的提示符，但在之前的命令中设置一个简单得多的提示符）看起来非常好。
![](/data/attachment/album/202308/12/101828ito9zx77079p59yy.gif)
一些用于美化终端的工具：
* 我使用 [base16-shell](https://github.com/chriskempson/base16-shell)
* [powerlevel10k](https://github.com/romkatv/powerlevel10k) 是一个流行的漂亮的 Zsh 主题，具有 transient prompts
* [starship](https://github.com/starship/starship) 是一个漂亮的提示符工具
* 在 Mac 上，我认为 [iTerm2](https://iterm2.com/) 比默认的终端更容易自定义。
### 漂亮的文件管理器
一些人提到了像 [ranger](https://github.com/ranger/ranger) 或 [nnn](https://github.com/jarun/nnn) 这样的漂亮的终端文件管理器，这是我之前没有听说过的。
### 一个有帮助的朋友或同事
一个可以回答初学者问题并给你指点的人是无价的。
### 通过肩并肩地观察学习
有人提到观察更有经验的人使用终端 - 有很多经验丰富的用户甚至没有意识到自己在做什么，你可以从中学到很多小技巧。
### 别名
很多人说，为常用任务创建自己的别名或脚本就像是一个神奇的“灵光一现”时刻，因为：
* 他们不必记住语法
* 然后他们就有了一份自己常用命令的列表，可以轻松调用
### 查找示例的备忘单
很多手册页没有示例，例如 [openssl s\_client](https://linux.die.net/man/1/s_client) 的手册页就没有示例。这使得起步变得更加困难！
人们提到了一些备忘单工具，比如：
* [tldr.sh](https://tldr.sh/)
* [cheat](https://github.com/cheat/cheat)（还可以进行编辑 - 你可以添加自己的命令以供以后参考）
* [um](http://ratfactor.com/cards/um)（一个非常精简的需要自己构建的系统）
例如，[openssl 的备忘单](https://github.com/cheat/cheatsheets/blob/master/openssl) 非常棒 - 我认为它几乎包含了我在实际中使用 `openssl` 时用过的所有内容（除了 `openssl s_client` 的 `-servername` 选项）。
有人说他们配置了他们的 `.bash_profile`，这样每次登录时都会打印出一张备忘单。
### 不要试图背诵
一些人说他们需要改变自己的方法 - 他们意识到不需要试图记住所有的命令，只需按需查找命令，随着时间的推移，他们会自然而然地记住最常用的命令。
（我最近对学习阅读 x86 汇编有了完全相同的体会 - 我正在上一门课程，讲师说“是的，刚开始时可以每次都查找，最终你会记住最常见的指令。”）
还有一些人说相反的观点 - 他们使用间隔重复应用程序（如 Anki）来记忆常用的命令。
### Vim
有人提到他们开始在命令行上使用 Vim 编辑文件，一旦他们开始使用终端文本编辑器，使用命令行处理其他事情也变得更自然。
此外，显然有一个名为 [micro](https://micro-editor.github.io/) 的新编辑器，像是更好的 `pico`/`nano`，适用于那些不想学习 Emacs 或 Vim 的人。
### 桌面上使用 Linux
有人说他们开始使用 Linux 作为他们的日常主力系统，而需要修复 Linux 问题可以帮助他们学习。这也是我在大约 2004 年熟悉命令行的方式（我非常喜欢安装各种不同的 Linux 发行版，以找到我最喜欢的那个），但我猜这不是如今最受欢迎的策略。
### 被迫仅使用终端
有些人说他们参加了一门大学课程，教授让他们在终端上做所有事情，或者他们自己制定了一个规则，一段时间内必须在终端上完成所有工作。
### 工作坊
有几个人说像 [Software Carpentry](https://software-carpentry.org/) 这样的工作坊（面向科学家的命令行、Git 和 Python/R 编程简介）帮助他们更熟悉命令行。
你可以在这里查看 [Software Carpentry 课程](https://software-carpentry.org/lessons/)。
### 书籍和文章
一些提到的材料：
文章：
* 《[终端](https://furbo.org/2014/09/03/the-terminal/)》
* 《[命令行功夫](http://blog.commandlinekungfu.com/)》（包含 UNIX 和 Windows 命令行技巧）
书籍：
* 《[Effective Linux at The Command Line](https://www.oreilly.com/library/view/efficient-linux-at/9781098113391/)》
* 《Unix Power Tools》（可能有些过时）
* 《The Linux Pocket guide》
视频：
* Mindy Preston 的 [CLI tools aren’t inherently user-hostile](https://www.youtube.com/watch?v=IcV9TVb-vF4)
* Gary Bernhardt 的 [destroy all software screencasts](https://www.destroyallsoftware.com/screencasts)
* [DistroTube](https://www.youtube.com/@DistroTube)
*（题图：MJ/c0dc082a-a477-434b-b826-77a42c8f61c3）*
---
via: 
作者：[Julia Evans](https://jvns.ca/) 选题：[lujun9972](https://github.com/lujun9972) 译者：ChatGPT 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出