struct box_props st_view;
unsigned short us_view;
};
void show_settings(const struct box_props * pb);
void show_settings1(unsigned short);
char * itobs(int n, char * ps);
int main(void)
{
/* 创建Views联合，并初始化initialize struct box view */
union Views box = { { true, YELLOW, true, GREEN, DASHED } };
char bin_str[8 * sizeof(unsigned int) + 1];
printf("Original box settings:\n");
1172
show_settings(&box.st_view);
printf("\nBox settings using unsigned int view:\n");
show_settings1(box.us_view);
printf("bits are %s\n",
itobs(box.us_view, bin_str));
box.us_view &= ～FILL_MASK;        /* 把表示填充色的位
清0 */
box.us_view |= (FILL_BLUE | FILL_GREEN);  /* 重置填充色 */
box.us_view ^= OPAQUE;          /* 切换是否透明的位 */
box.us_view |= BORDER_RED;        /* 错误的方法 */
box.us_view &= ～STYLE_MASK;        /* 把样式的位清0 */
box.us_view |= B_DOTTED;         /* 把样式设置为点 */
printf("\nModified box settings:\n");
show_settings(&box.st_view);
printf("\nBox settings using unsigned int view:\n");
show_settings1(box.us_view);
printf("bits are %s\n",
itobs(box.us_view, bin_str));
return 0;
1173
}
void show_settings(const struct box_props * pb)
{
printf("Box is %s.\n",
pb->opaque == true ? "opaque" : "transparent");
printf("The fill color is %s.\n", colors[pb->fill_color]);
printf("Border %s.\n",
pb->show_border == true ? "shown" : "not shown");
printf("The border color is %s.\n", colors[pb->border_color]);
printf("The border style is ");
switch (pb->border_style)
{
case SOLID: printf("solid.\n"); break;
case DOTTED: printf("dotted.\n"); break;
case DASHED: printf("dashed.\n"); break;
default:   printf("unknown type.\n");
}
}
void show_settings1(unsigned short us)
1174
{
printf("box is %s.\n",
(us & OPAQUE) == OPAQUE ? "opaque" : "transparent");
printf("The fill color is %s.\n",
colors[(us >> 1) & 07]);
printf("Border %s.\n",
(us & BORDER) == BORDER ? "shown" : "not shown");
printf("The border style is ");
switch (us & STYLE_MASK)
{
case B_SOLID : printf("solid.\n"); break;
case B_DOTTED : printf("dotted.\n"); break;
case B_DASHED : printf("dashed.\n"); break;
default    : printf("unknown type.\n");
}
printf("The border color is %s.\n",
colors[(us >> 9) & 07]);
}
char * itobs(int n, char * ps)
1175
{
int i;
const static int size = CHAR_BIT * sizeof(int);
for (i = size - 1; i >= 0; i--, n >>= 1)
ps[i] = (01 & n) + '0';
ps[size] = '\0';
return ps;
}
下面是该程序的输出：
Original box settings:
Box is opaque.
The fill color is yellow.
Border shown.
The border color is green.
The border style is dashed.
Box settings using unsigned int view:
box is opaque.
The fill color is yellow.
Border shown.
1176
The border style is dashed.
The border color is green.
bits are 00000000000000000010010100000111
Modified box settings:
Box is transparent.
The fill color is cyan.
Border shown.
The border color is yellow.
The border style is dotted.
Box settings using unsigned int view:
box is transparent.
The fill color is cyan.
Border not shown.
The border style is dotted.
The border color is yellow.
bits are 00000000000000000001011100001100
这里要讨论几个要点。位字段视图和按位视图的区别是，按位视图需要
位置信息。例如，程序中使用BLUE表示蓝色，该符号常量的数值为4。但
是，由于结构排列数据的方式，实际储存蓝色设置的是3号位（位的编号从0
开始，参见图15.1），而且储存边框为蓝色的设置是11号位。因此，该程序
1177
定义了一些新的符号常量：
#define FILL_BLUE   0x8
#define BORDER_BLUE  0x800
这里，0x8是3号位为1时的值，0x800是11号位为1时的值。可以使用第1
个符号常量设置填充色的蓝色位，用第2个符号常量设置边框颜色的蓝色
位。用十六进制记数法更容易看出要设置二进制的哪一位，由于十六进制的
每一位代表二进制的4位，那么0x8的位组合是1000，而0x800的位组合是
10000000000，0x800的位组合比0x8后面多8个0。但是以等价的十进制来看
就没那么明显，0x8是8，0x800是2048。
如果值是2的幂，那么可以使用左移运算符来表示值。例如，可以用下
面的#define分别替换上面的#define：
#define FILL_BLUE   1border_color]);
1179
printf("The border color is %s.\n", colors[(us >> 9) & 07]);
第1条语句中，表达式pb->border_color的值在0～7的范围内，所以该表
达式可用作colors数组的索引。用按位运算符获得相同的信息更加复杂。一
种方法是使用ui>>9把边框颜色右移至最右端（0号位～2号位），然后把该
值与掩码07组合，关闭除了最右端3位以外所有的位。这样结果也在0～7的
范围内，可作为colors数组的索引。
警告
位字段和位的位置之间的相互对应因实现而异。例如，在早期的
Macintosh PowerPC上运行程序清单15.4，输出如下：
Original box settings:
Box is opaque.
The fill color is yellow.
Border shown.
The border color is green.
The border style is dashed.
Box settings using unsigned int view:
box is transparent.
The fill color is black.
Border not shown.
The border style is solid.
The border color is black.
1180
bits are 10110000101010000000000000000000
Modified box settings:
Box is opaque.
The fill color is yellow.
Border shown.
The border color is green.
The border style is dashed.
Box settings using unsigned int view:
box is opaque.
The fill color is cyan.
Border shown.
The border style is dotted.
The border color is red.
bits are 10110000101010000001001000001101
该输出的二进制位与程序示例15.4不同，Macintosh PowerPC把结构载入
内存的方式不同。特别是，它把第1位字段载入最高阶位，而不是最低阶
位。所以结构表示法储存在前16位（与PC中的顺序不同），而unsigned int表
示法则储存在后16位。因此，对于Macintosh，程序清单15.4中关于位的位置
的假设是错误的，使用按位运算符改变透明设置和填充色设置时，也弄错了
位。
1181
15.5 对齐特性（C11）
C11 的对齐特性比用位填充字节更自然，它们还代表了C在处理硬件相
关问题上的能力。在这种上下文中，对齐指的是如何安排对象在内存中的位
置。例如，为了效率最大化，系统可能要把一个 double 类型的值储存在4 字
节内存地址上，但却允许把char储存在任意地址。大部分程序员都对对齐不
以为然。但是，有些情况又受益于对齐控制。例如，把数据从一个硬件位置
转移到另一个位置，或者调用指令同时操作多个数据项。
_Alignof运算符给出一个类型的对齐要求，在关键字_Alignof后面的圆括
号中写上类型名即可：
size_t d_align = _Alignof(float);
假设d_align的值是4，意思是float类型对象的对齐要求是4。也就是说，
4是储存该类型值相邻地址的字节数。一般而言，对齐值都应该是2的非负整
数次幂。较大的对齐值被称为stricter或stronger，较小的对齐值被称为
weaker。
可以使用_Alignas 说明符指定一个变量或类型的对齐值。但是，不应该
要求该值小于基本对齐值。例如，如果float类型的对齐要求是4，不要请求
其对齐值是1或2。该说明符用作声明的一部分，说明符后面的圆括号内包含
对齐值或类型：
_Alignas(double) char c1;
_Alignas(8) char c2;
unsigned char _Alignas(long double) c_arr[sizeof(long double)];
注意
撰写本书时，Clang（3.2版本）要求_Alignas(type)说明符在类型说明符
后面，如上面第3行代码所示。但是，无论_Alignas(type)说明符在类型说明
1182
符的前面还是后面，GCC 4.7.3都能识别，后来Clang 3.3 版本也支持了这两
种顺序。
程序清单15.5中的程序演示了_Alignas和_Alignof的用法。
程序清单15.5 align.c程序
// align.c -- 使用 _Alignof 和 _Alignas （C11）
#include 
int main(void)
{
double dx;
char ca;
char cx;
double dz;
char cb;
char _Alignas(double) cz;
printf("char alignment:  %zd\n", _Alignof(char));
printf("double alignment: %zd\n", _Alignof(double));
printf("&dx: %p\n", &dx);
printf("&ca: %p\n", &ca);
printf("&cx: %p\n", &cx);
1183
printf("&dz: %p\n", &dz);
printf("&cb: %p\n", &cb);
printf("&cz: %p\n", &cz);
return 0;
}
该程序的输出如下：
char alignment: 1