            s+=chr(op|((op_data CPUID操作码是一个面向x86架构的处理器补充指令  
>  通过使用CPUID操作码，软件可以确定处理器的类型和特性支持（例如MMX/SSE）
继续向下查看
readcr0指令
> Reads the CR0 register and returns its value.  
>  This intrinsic is only available in kernel mode, and the routine is only
> available as an intrinsic.
貌似是读取了rc0寄存器，并且必须内核态。丧气脸！
rdmsr指令
> Reads the contents of a 64-bit model specific register (MSR) specified in
> the ECX register into registers EDX:EAX
writecr4指令就是向rc4寄存器写入
getcallerseflags指令
> Returns the EFLAGS value from the caller’s context.
以上指令的解释都可以通过msdn搜索
vmxon指令
> Puts the logical processor in VMX operation with no current VMCS, blocks
> INIT signals, disables A20M, and clears any address-range monitoring
> established by the MONITOR instruction.10  
> [参考链接](https://www.felixcloutier.com/x86/VMXON.html)
这个指令是vmx指令集中的一个，意味着开始硬件虚拟化，并且在开启硬件虚拟化之前程序会检查rc0和rc4寄存器以及CPU是否支持等条件，这也就是在之前看到的那些代码的作用
> 我之前在看加解密时看到过VT技术，不过太菜没看懂，趁着这个机会好好学习一下，下文关于指令部分大多参考自网上资料。
invd指令片上的高速缓存无效。
继续往下查看，发现在sub_401682函数中做了大量的操作，猜测应该是在进行vmx的初始化操作。
> 关于vmx指令，[参考链接](https://www.cnblogs.com/scu-cjx/p/6878490.html)。  
>  关于vmm简介，[参考链接](https://blog.csdn.net/panwuqiong/article/details/7216536)  
>  关于进入vmx的过程，[参考链接](https://blog.csdn.net/sgzwiz/article/details/20747511)  
>  以上三篇文章请一定要仔细阅读！
sub_4015AF函数中vmptrld指令加载一个VMCS结构体指针作为当前操作对象
sgdt/sidt指令存储全局/中断描述符表格寄存器[参考链接](http://www.hgy413.com/hgydocs/IA32/instruct32_hh/vc288.htm)
之后的过程可以参考第三篇文章，过程一致，先初始化VMCS region，装载VMCS region，设置VMCS region中的相关域
其中分别设置了Guest的的region和HOST的region
那么0x401738地址所对应的函数便是VMExitProc函数也就是VMM的程序入口地址。这里IDA并没有将其识别出来，所以手动创建函数
（询问了一下v爷爷，需要将最后的3个0xcc NOP掉就可以正常创建函数）
首先我们要说明的是sub_401631函数中的vmlaunch指令，驱动程序使用vmlaunch启动Guest虚拟机，执行一条指令（导致vmexit），然后返回主机。
VMExitProc函数用来接受Guest VM的特殊消息，从而进行执行，这也就是为什么choose_func函数没有找到交叉引用的原因！
我们可以参考这篇[文章](https://blog.csdn.net/zhuhuibeishadiao/article/details/52470491)
从而可以知道一些特殊指令，如下：
    #defineEXIT_REASON_CPUID               10
    #defineEXIT_REASON_INVD                13
    #defineEXIT_REASON_VMCALL              18 
    #defineEXIT_REASON_CR_ACCESS            28 
    #defineEXIT_REASON_MSR_READ            31
    #defineEXIT_REASON_MSR_WRITE           32
以上图片来自上面的博客
ok，继续往下，刚刚程序执行了vmlaunch之后，便会启动Guest Vm,然后会执行如下代码：
首先EAX=0xDEADBEEF，触发cpuid和invd指令之后EAX=0x174
触发rdmsr指令，然后便会来到vmcalls函数,注意下这里都是通过EAX寄存器传参
其中rdmsr函数对应msr_read_func函数，invd对应invd_func函数,vmcall对应vmcall_func函数，我已将函数重命名:XD
需要注意的是在Guest VM未启动之前，执行cpuid等指令时并不会触发VMExitProc函数
所以之后便是在Guest VM和VMM之间通过vmresume和触发指令不断的进行切换执行，最终的加密逻辑便在Guest VM中
接下来大致说明一下事件处理函数的作用。
cpuid_func对op进行解码，并初始化数独
invd_func对op进行乱序操作
vmcall_func解析op，主要就是这三个函数。
（！惊了，写到这里的时候电脑突然烧了！烧了！伤脑筋啊，最近一直有事，所以WP不得不推迟写了。见谅见谅！原谅绿～）
所以VMM的执行过程：
sub_401596函数vmxon打开vmx的开关。
sub_401690函数初始化Guest VM，并为Guest VM注册相应的入口函数，最后通过vmlaunch运行Guest
VM，此时会对9*9的矩阵进行初始化，然后通过vmcalls函数进行加密变换。
vmcalls的处理流程如下：
rdmsr(0x176);对应
    else if ( switch_code == 0x176 )
      {
        v3 = dword_405160;
        result = dword_4050C0[0];
        v4 = dword_4050C0[0];
        for ( k = 8; k; --k )
        {
          result = 9 * k;
          dword_405040[9 * k] = dword_405040[9 * (k - 1)];
        }
        dword_405040[0] = v3;
        for ( l = 0; l < 8; ++l )
        {
          dword_4050C0[l] = dword_4050C4[l];
          result = l + 1;
        }
        dword_4050E0 = v4;
      }
简单的移位变换。
invd对应三种变换方式（略）
vmcall根据op的不同进行相应的运算。
以vmcall(0x30133403);为例进行一个说明：
    `v1`为op的第一个字节即0x30，用来判断进行何种操作  
    `i`为数据在矩阵中的坐标(x,y)，0x13即代表(1,3)  
    `0x34`为第三个字节，用来判断是否倒序  
    `0x03`表示`input`的位置
当我们在判断每个字节的作用时，注意变量的类型。
其实从本质上来讲就是根据我们的输入产生一张数独表，并进行校验是否满足数独的要求。所以解体思路上来讲我们需要先解出最后的数独，然后恢复出input。
这里通常使用z3求解器进行求解，所以我们设置好变量类型照着程序走一遍流程就好了，从IDA中抠出代码，然后进行适当修复，说的好像很简单，其实做起来并不是很轻松。
接下来我就写一遍过程：
####  0x1
在vmlunch指令之后会开始响应ExitReason，首先便是cpuid指令，进入choose_func函数，由于是第一次执行，因此会进行初始化执行init_box函数（已重命名），如下：
通常我是用python来编写脚本，在修改之前，我们需要弄清两个数据结构，一个是9*9的数独即data[9][9],另一个是op[10]。判断方法如下：
data[9][9]从init_box函数中可以较为明显的看出dword_405030；
op[10]在vmcall_func中如下
从dword_405378往后的10个数据均在vmcall_func函数中有交叉引用
了解到这些之后，我们继续进行修复。
如下代码：
    def init_box():
        result = data[40]
        v6 = data[40]
        for i in range(4):
            data[8*i+40]=data[8*i+40-1]
            for j in range(2*i+1):
                data[3 - i + 9 * (i + 4 - j)]=data[3 - i + 9 * (i + 4 - (j + 1))]
            for k in range(2 * i + 2):
                data[k + 9 * (3 - i) + 3 - i] = data[10 * (3 - i) + k + 1]
            for l in range(2 * i + 2):
                data[9 * (l + 3 - i) + i + 5] = data[9 * (3 - i + l + 1) + i + 5]
            m=0
            while m < result:
                result = 2*i+2
                data[9 * (i + 5) + i + 5 - m] = data[9 * (i + 5) + i + 5 - (m + 1)]
                m+=1
        data[72]=v6
然后会进入cpuid_func
类似的，代码如下：
    def cpuid_func(switch_code):
        if switch_code == 0xDEADBEEF:
            for i in range(10):
                op[i]^=key1[i]
        elif switch_code == 0xCAFEBABE:
            for j in range(10):
                op[j]^=key2[j]
#### 0x2
接下来恢复invd_func：
    def invd_func(switch_code):
        if switch_code == 0x4433:
            for i in range(5):
                v0 = op[2*i]
                op[2*i]=op[2*i+1]
                op[2*i+1]=v0
        elif switch_code == 0x4434:
            v5 = op[0]
            for j in range(9):
                op[j]=op[j+1]
            op[9]=v5
        elif switch_code == 0x4437:
            v3 = op[7]
            for k in range(3):
                op[k+7]=op[7-k-1]
                if k == 2:
                    op[7-k-1]=op[3]
                else:
                    op[7-k-1]=op[k+7+1]
            for l in range(1):
                op[3]=op[3-l-2]
                op[3-l-2]=op[3-l-1]
            op[3-1-1]=v3
#### 0x3
接下来便会进入vmcalls函数进行一系列变换，最后我们恢复出rdmsr和vmcall函数
dword_405170的转换过程可以如下计算：
    def rdmsr(switch_code):