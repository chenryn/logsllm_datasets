The purpose of this phase is twofold. First, a produc-
tion network may consist of ﬁrewall products from differ-
ent vendors, each with their own conﬁguration languages
and operation models. Our parser translates ﬁrewall conﬁg-
uration ﬁles originally written in their own languages into
a uniform internal representation. Second, and more im-
portantly, based on the conﬁguration, network topology and
routing information, we perform control-ﬂow analysis to
ﬁnd all possible rule paths packets may go through. Each
path represents a list of ﬁltering operations packets may re-
ceive.
4.1.1 Rule Graph of Individual ACLs
For ﬁrewalls using the simple list model, there is no possi-
bility of branching and the rule graph is the same list. For
ﬁrewalls using the complex chain model, branching can be
caused by calling “chain Y” and “return” from it. To handle
such branching, we introduce (cid:2)P, pass(cid:3) to indicate that only
packets matching this predicate will remain in this path. For
a (cid:2)P, chain Y(cid:3) rule, we insert (cid:2)P, pass(cid:3) before going to
“chain Y”. We also insert (cid:2)¬P, pass(cid:3) for the path that does
not jump to “chain Y”. Figure 3 visualizes all the four pos-
sible rule paths the ACL of Figure 1b could have.
Recursive function calls should be avoided since this
could create loops. Loops can be easily prevented by en-
suring that no rules appear twice on a rule path. Earlier
versions of Netﬁlter deny a packet when it is found to be
in a loop. But it is probably better to avoid this problem at
conﬁguration time. After eliminating loops, the rule graph
can be constructed by linearization.
We denote the input to an ACL as I, which is the collec-
tion of packets that can possibly arrive at this access list. For
an ACL using the complex chain model, the rule graph may
give n rule paths from the input to the output. For each of
the n rule paths, we traverse the path to collect information.
For the jth rule (cid:2)Pj, actionj(cid:3) in this rule path, we deﬁne
the current state as (cid:2)Aj, Dj, Fj(cid:3), where Aj and Dj denote
the network trafﬁc accepted and denied before the jth rule,
respectively; Fj denotes the set of packets that have been
rule path 1
rule path 2
rule path 3
rule path 4
input
input
input
input
policy action
policy action
policy action
policy action
Figure 3: Rule graph of the ACL in Figure 1b.
diverted to other data paths. We use Rj to denote the col-
lection of the remaining trafﬁc that can possibly arrive at the
jth rule. Rj can always be found using the input I and the
current state information, as shown in Equation 1.
Rj = I ∩ ¬(Aj ∪ Dj ∪ Fj)
(1)
For the ﬁrst rule of an ACL, we have the initial value of
A1 = D1 = F1 = ∅ and R1 = I. After reading each rule,
we update the state according to the state transformation
deﬁned in Equation 2 until the end of each rule path. A state
transform “Si, r (cid:8) Si+1” means if we read in rule r at state
Si, we will result in state Si+1. Note that R is automatically
updated when  changes.
⎧⎪⎨
(cid:2)A, D, F(cid:3),
⎪⎩
(cid:2)A, D, F(cid:3),
(cid:2)A, D, F(cid:3),
(cid:2)P, accept(cid:3) (cid:8) (cid:2)A ∪ (R ∩ P ), D, F(cid:3)
(cid:2)P, deny(cid:3) (cid:8) (cid:2)A, D ∪ (R ∩ P ), F(cid:3)
(cid:2)P, pass(cid:3) (cid:8) (cid:2)A, D, F ∪ (R ∩ ¬P )(cid:3)
(2)
At the end of rule path pathi, we can determine the pack-
ets accepted and denied through this path to be Apathi and
Dpathi , respectively. Since any packet can take only one
path, packets accepted by this ACL is the union of those
accepted on all paths, as shown in Equation 3. In addition,
since the default action of an ACL matches all packets, all
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
packets will be either accepted or denied (Equation 4).
⎧⎪⎨
⎪⎩AACL =
(cid:7)
DACL =
(cid:6)
(cid:6)
i∈path
i∈path
Apathi
Dpathi
(3)
(4)
Outside
Outside
Outside
Outside
W0
X0
W0
X0
X1
X1
Y0
Z0
Inside
AACL ∪ DACL = IACL
RACL
= ∅
4.1.2 ACL Graph of Distributed Firewalls
In the network of distributed ﬁrewalls, a packet will go
through a series of ACLs to reach the destination. In this
case, it needs to survive the ﬁltering of all the ACLs on
the path. On the other hand, a well-engineered network of-
ten has multiple paths and uses dynamic routing to improve
performance and reliability. As a result, a packet could tra-
verse different ACL paths at different times.
Given the topology as a directed graph, one can deter-
mine all the possible paths from one node to another. Since
ACLs are associated with individual interface and a direc-
tion, one can build a tree of ACLs. Based on the infor-
mation of network connectivity, one can compute the ACL
tree rooted at a destination using either DFS or BFS algo-
rithms. This tree graph reveals all the ACL paths packets
may traverse to reach the destination. Note that we choose
to be blind about the underlying routing and assume all the
paths that are topologically feasible could be taken. This is
because routing is designed to be dynamic and adaptive to
link failures and loads. And ﬁrewall conﬁguration should
behave correctly and consistently regardless of the underly-
ing routing dynamics.
For a large and well-connected graph, the number of
paths can be large. For the portions of network that are
not involved in packet ﬁltering, and therefore do not inter-
fere with the ﬁrewall conﬁgurations, we use abstract virtual
nodes as representations. This approach can greatly reduce
the complexity of the graph but can still keep the relevant
information. For the network illustrated in Figure 2, we use
three abstract virtual nodes “outside”, “DMZ” and “inside”
to indicate the untrusted Internet, DMZ and trusted internal
network, respectively. Data paths between these three vir-
tual nodes are often the primary concern of ﬁrewall admin-
istrators. Note that this paper uses the trafﬁc from “outside”
to “inside” for discussion. Our algorithm is general enough
to consider trafﬁc between any two points in the network.
Figure 4 shows the ACL tree built for Figure 2. For any
given ACL tree graph, ACLs are either in series, parallel, or
a combination of them. For a set of n ACLs in series (par-
allel), packets need to survive the ﬁltering decision of all
(any) of them. Therefore, the accepted set of packets is the
intersection (union) of these ACLs accepted independently.
(cid:8)
(cid:6)
Serial
acl∈n
acl∈n
A =
D =
Figure 4: ACL tree.
Parallel
(cid:6)
(cid:8)
acl∈n
acl∈n
Aacl
Dacl
Aacl A =
Dacl D =
Figure 5: Equations for ACLs in serial or parallel.
Based on Equations listed in Table 5, we can analyze
ﬁrewall rules in the context of networks and distributed ﬁre-
walls. Consider Figure 4 as an example. We assume the in-
put from “outside” to be Ω, the entire set of possible pack-
ets. This is more conservative than what happens in reality.
However, we believe this is justiﬁed for security reasons
since “outside” is beyond the control of local administra-
tion.
One can determine that IY 0, the input for Y 0, is IY 0 =
AW 0 ∪ (AX0 ∩ AX1). The entire set of packets that can
reach the internal network from the Internet is
A = AW 0 ∪ (AX0 ∩ AX1) ∩ AY 0
∪ AW 0 ∪ (AX0 ∩ AX1) ∩ AZ0
= AW 0 ∪ (AX0 ∩ AX1) ∩ AY 0 ∪ AZ0
(5)
4.2. Checking for Anomalies
Based on the rule graph, we perform local checks for in-
dividual ﬁrewall. Distributed ﬁrewall checks are based on
both the ACL-tree and rule graph. We describe the algo-
rithms below in detail.
4.2.1 Local Check for Individual Firewalls
FIREMAN performs local check for individual ACLs with-
out considering the interaction with other ﬁrewalls in the
network. Since a ﬁrewall can rely on the ﬁltering action of
other ﬁrewalls to achieve policy conformance, local checks
focus on checking inconsistency and inefﬁciency. The local
check is performed after parsing each rule, and just before
updating the state as deﬁned in Equation 2.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
The input to an ACL is the entire set (I = Ω), and A1 =
D1 = F1 = ∅. We process each rule in sequence based on
its type:
For (cid:2)P, accept(cid:3) rules:
1. Pj ⊆ Rj ⇒ good: This is a good rule. It deﬁnes an
action for a new set of packets, and it does not overlap
with any preceding rules.
2. Pj ∩ Rj = ∅ ⇒ masked rule: This is an “error”. This
rule will not match any packets and action deﬁned here
will never be taken.
(a) Pj ⊆ Dj ⇒ shadowing: This rule intended to
accept some packets which have been denied by
preceding rules. This contradiction reveals a mis-
conﬁguration.
(b) Pj∩Dj = ∅ ⇒ redundancy: All the packets have
been accepted by preceding rules or will not take
this path.
(c) else ⇒redundancy and correlation: Part of the
packets for this rule have been denied. Others
are either accepted or will not take this path.
Rule j itself is redundant since it will not match
any packets. Some preceding rule has correlation
with rule j also.
3. Pj (cid:2) Rj and Pj ∩ Rj (cid:11)= ∅ ⇒ partially masked rule:
(a) Pj ∩ Dj (cid:11)= ∅ ⇒ correlation: Part of the packets
intend to be accepted by this rule have been de-
nied by preceding rules. This raises a “warning”.
(b) ∀x < j,∃ (cid:2)Px, deny(cid:3) such that Px ⊆ Pj ⇒ gen-
eralization: Rule j is a generalization of rule x
since rule x matches a subset of the current rule
j but deﬁned a different action. This is a “warn-
ing”.
(c) Pj ∩Aj (cid:11)= ∅ and ∀x < j,∃(cid:2)Px, accept(cid:3) such that
Px ⊆ Pj ⇒ redundancy: If rule (cid:2)Px, accept(cid:3) is
removed, all the packets that match Px can still
be accepted to the current (cid:2)Pj , accept(cid:3). There-
fore, rule (cid:2)Px, accept(cid:3) is redundant. This is an
“error”.
Similarly for (cid:2)P, deny(cid:3) rules:
1. Pj ⊆ Rj ⇒ good.
2. Pj ∩ Rj = ∅ ⇒ masked rule.
(a) Pj ⊆ Aj ⇒ shadowing: This rule intended to
deny some packets which have been accept by
preceding rules. This could be a serious security
violation.
(b) Pj ∩ Aj = ∅ ⇒ redundancy: All the packets
have been denied by preceding rules or will not
take this path.
(c) else ⇒ redundancy and correlation: Part of pack-
ets for this rule have been accepted. Others are
denied or will not take this path.
3. Pj (cid:2) Rj and Pj ∩ Rj (cid:11)= ∅ ⇒ partially masked rule.
(a) Pj ∩ Aj (cid:11)= ∅ ⇒ correlation: Part of the pack-
ets intend to be denied by this rule have been ac-
cepted by earlier rules.
(b) ∀ x < j,∃ (cid:2)Px, accept(cid:3) such that Px ⊆ Pj ⇒
generalization: Rule j is a generalization of rule
x since rule x matches a subset of the current rule
j but deﬁned a different action.
(c) Pj ∩ Aj (cid:11)= ∅ and ∀ x < j,∃(cid:2)Px, deny(cid:3) such that
Px ⊆ Pj ⇒ redundancy: If rule (cid:2)Px, deny(cid:3) is
removed, all the packets that match Px can still
be denied by the current rule. Therefore, rule
(cid:2)Px, deny(cid:3) is redundant. This is an “error”.
4.2.2 Checks for Distributed Firewalls
After passing the local checks, FIREMAN will perform dis-
tributed checks for network of ﬁrewalls. Such a check is
performed based on the ACL-tree derived in Section 4.1.2.
We start from the top level ACLs of the tree and go down-
wards level by level. At the top level, input to an ACL is
the entire set (I = Ω), and A1 = D1 = F1 = ∅. Starting
from the second level, we use Equations in Table 5 to derive
the I set to the ACL. Based on the input I, we again traverse
through rules in the ACL based on the same transformations
deﬁned in Equation 2.
For (cid:2)P, accept(cid:3) rules:
1. P ⊆ I ⇒ good: This is not a redundancy as in the
case of local checks. A packet need to be accepted by
all ﬁrewalls on its path to reach destination.
2. P ⊆ ¬I ⇒ shadowing: This rule is shadowed by up-
stream ACLs. It tries to accept some packets that are
blocked on all reachable paths. This kind of inconsis-
tency can manifest as connectivity problems which are
difﬁcult to troubleshoot manually.
For (cid:2)P, deny(cid:3) rules:
1. P ⊆ I ⇒ raised security level?: This probably reveals
a raised security level. In the case of Figure 2, certain
packets might be allowed to access the DMZ but not
the internal network. Therefore, ACLs W 0, X1 and
X0 will accept these packets but ACL Y 0 will deny
them.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
2. P ⊆ ¬I ⇒ redundancy?: This is probably a redun-
dancy since the packets to be denied will not reach this
ACL anyway. However, multiple lines of defense are
often encouraged in practice to increase overall secu-
rity level. This should be performed with caution by
the administrator.
4.2.3 Checks at the Root of the ACL Tree
The root of the ACL tree is the destination, which is also
the network we want to secure. Assume the root has m
children, and child j gives input to the root as Ij. We want
to ensure that all the inputs are the same. Otherwise, this is