simplicity, throughout the paper, we assume the chal-
lenge ACK count to be 100, which is the default value.
Our test on a variety of Linux operating systems also
conﬁrmed the result. However, as proposed in RFC
5961, this value is conﬁgurable by a system administra-
tor. According to the speciﬁcation, the ﬂexibility is pro-
vided to allow the tradeoff between resource (bandwidth
and CPU) utilization and how fast the system cleans
up stale connections. Fortunately, the exact conﬁgured
value can be inferred quite easily with some simple steps
(as long as it is not excessively large). After establish-
ing a legitimate connection to the server, the attacker
can send many RST packets, e.g., 1000 packets which
is much larger than default value of 100, with in-window
sequence values to trigger as many challenge ACKs as
possible. The packets are sent in a very short period
of time (say, 100 or 200 ms) to increase the likelihood
that they end up in the same 1-second interval. The at-
tacker then counts the total number of challenge ACKs
returned. Finally, the attacker can wait for a short amount
of time and repeat the process one more time to verify the
number of received challenge ACK packets is the same;
that value would be the actual limit set by the server.
Note that this is only a one-time effort for each target.
7 Evaluations
To showcase the effectiveness of our attacks, we next
evaluate them in terms of metrics such as success rate
and the time to succeed.
7.1 Connection Reset Case Studies
There are two sets of experiments reported in this sec-
tion viz., where (i) we reset an SSH connection and (ii)
perform a Tor connection reset.
Experimental setup. For the SSH experiments, we
use a Ubuntu 14.04 host on the University of California
- Riverside campus as the victim client. The victim SSH
server is one of the instances we create on Amazon EC2
in different geographic locations, worldwide. The attack
machine is a Ubuntu 14.04 host in our lab. For the Tor
experiments, we target the connection between a Tor re-
lay (set up in our campus) and a random peer relay. Our
Tor relay is also a Ubuntu 14.04 host and has been run-
ning the service for several months. The attack machine
is the same host as the one in the SSH experiments.
In both the SSH and Tor experiments, the attacker at-
tempts to reset the connection on the server end by con-
necting to it and performing the inference attacks. The
diversity of servers and the corresponding network paths
help test the robustness of the attack. We assume that the
3-tuple  is known.
Further, the attack machine is capable of spooﬁng the IP
address of both the victim client and server.
7.1.1 SSH Connection Reset
Location
Success
Rate
10/10
US West 1
9/10
US West 2
10/10
US East
9/10
EU German
10/10
EU Ireland
10/10
Asia 1
Asia 2
9/10
South America 10/10
Avg # of rounds
with loss
0
1.0
0
0.3
0
0
1.7
0
Avg % of rounds
with loss
0
1.91%
0
0.67%
0
0
5.34%
0
BW
(pkts)
5000
5000
5000
5000
5000
5000
5000
5000
Time
Cost (s)
48.00
58.00
32.00
48.00
35.20
51.00
36.67
45.70
Table 1: SSH connection reset results
Summary. We run the reset attack against 8 different
Amazon EC2 servers in different geographical locations.
They are all micro instances set up for our experiments
only. We establish a connection from the victim client to
each server, and have the attacker perform the off-path
connection reset attack. For each server, we repeat the
experiment 10 times and report the average. As shown
in Table 1, the attack is highly effective: the average suc-
cess rate is 97% over all runs, with an average time cost
of 44.3s. Note that the overall time excludes the time for
synchronization (recall §4.1) as it is a one-time effort for
a server and can be done a priori. The bandwidth cost
220  25th USENIX Security Symposium 
USENIX Association
12
here is 5000 spoofed packets per second, which trans-
lates to 4Mbps. Note that the probing scheme has al-
ready built in packet loss detection using “parity bits” as
described in §6. To show that the packet loss detection
scheme works, we report the number of rounds and the
percentage of rounds on average, when packet loss is de-
tected. For instance, even when packet loss between the
attack node and “Asia 2” server is frequent, we still man-
age to succeed 9 times out of 10.
Failures may still occur since the detection scheme is
rudimentary and may fail to detect packet loss. In some
cases, the failure can also be the result of the attacker
and server becoming out-of-sync due to network delay
variance. The success rate can be further improved by
adding more redundancy and using better error detection
schemes. However, we argue that the current success
rate is already good enough to carry out effective DoS
attacks.
Binary search
Multibin search
40
30
20
10
)
s
(
e
m
T
i
0
Synchronization
Time 
Port 
Inference
Seq 
Inference
ACK 
Inference
Figure 11: Time breakdown
)
s
(
e
m
T
i
160
140
120
100
80
60
40
20
0
2000
6000
Attack intensity (packets/sec)
4000
effort and therefore not on the “critical path”. We see
that with the optimized multi-bin search, the time spent
on port search is fairly short (around 14 seconds). The
time spent on sequence number search takes the most
time due to the fact that the sequence number space is
much larger. The time spent on ACK number inference
is also fairly short (around 8 seconds) due to the fact that
the challenge ACK window is extremely large and easy
to locate.
Compared to the results with binary search, we see
that the optimized multi-bin search has greatly improved
the search speed by more than 30 seconds overall. This
is due to the fact that binary search signiﬁcantly under-
utilizes the bandwidth resources and signiﬁcantly in-
creases the number of rounds of probes. The reason why
the sequence number search does not beneﬁt as much is
because most of the time is spent on the initial linear
search of the huge sequence number space. This step
cannot be optimized with the multi-bin search.
Attack intensity vs. Time to succeed. Using the
same experimental setup as before, we vary the attack
intensity, i.e., the number of packets sent per second and
show how this affects the time it takes to succeed. As
shown in Figure 12, we plot the average, min, and max
time to successfully conduct sequence number inference
only (reset attack), as well as with the ACK number in-
ference added (hijacking attack). Clearly, the higher the
attack intensity the faster the attack. When the intensity
is only ≈ 512 Kbps (1000 packets per second), the time
to succeed is over 100 seconds, on average. When the
intensity is ≈ 4 Mbps, (5000 packets per second), the
average time reduces to ≈ 50 seconds for hijacking and
only 30 seconds for reset. Note that an intensity > 4
Mbps does not substantially improve the time to succeed
because we begin to observe more packet losses, which
cause additional rounds of probing. Of course, this is ex-
perienced on the speciﬁc network environment between
the attack host and the server, which could differ else-
where; if the network conditions are even better, the time
to succeed can be further improved.
Figure 12: Attack intensity impact on time to succeed
7.1.2 Tor Connection Reset
Time breakdown. To understand where the time is
spent in our attacks, we conduct another benchmark ex-
periment against one of the SSH servers with both se-
quence number and ACK number inference. As shown
in Figure 11, we break down the time spent into time syn-
chronization and the three search phases of port number
inference, sequence number inference, and ACK num-
ber inference. We also compare the optimized multi-bin
search versus the regular binary search in each phase.
Time synchronization takes around 7 seconds (optimiza-
tion is not applicable). As discussed, it is only a one-time
Node
Target Success
62.210.x.x FR
89.163.x.x DE
178.62.x.x GB
198.27.x.x NA
192.150.x.x NL
62.210.x.x FR
89.163.x.x DE
178.62.x.x GB
198.27.x.x NA
192.150.x.x NL
Table 2: Tor connection reset results (ﬁrst half under browsing
trafﬁc and second half under ﬁle downloading trafﬁc)
Avg % of
rounds with loss
4.58%
7.97%
4.20%
1.45%
5.64%
5.85%
3.06%
8.15%
3.64%
7.14%
Avg # of rounds
with loss
1.9
4.0
3.2
0.8
4.1
2.5
1.7
6.0
2.1
5.5
Rate
8/10
9/10
7/10
10/10
8/10
6/10
8/10
8/10
7/10
6/10
Time
Cost(s)
BW
(pkts)
4000 46.36
4000 49.08
4000 53.00
4000 59.86
4000 68.03
4000 49.57
4000 52.51
4000 78.35
4000 72.49
4000 79.42
USENIX Association  
25th USENIX Security Symposium  221
13
To conduct a realistic experiment, we use a Tor relay
set up in our campus and have a user using it as an en-
try relay. The entry relay establishes connections with an
arbitrary middle relay (anywhere in the world). For eth-
ical reasons, we do not perform attacks against arbitrary
relay nodes that are not connected to our node.
To understand how the attack performs against mostly
idle connections, we test it against connections between
our own Tor relay and 40 other Tor relays throughout the
world. The attack node has to connect to these Tor re-
lays that are far away to perform attacks. In each case,
we repeat the reset experiment 10 times. First, we dis-
cover that 16 of them do not appear vulnerable to the
side channel attacks, even though they appear to be Linux
hosts. We suspect that this is because of certain ﬁre-
walls that drop our spoofed packets. For the remaining
24 hosts, the average success rate is 88.8% and the av-
erage time to succeed is 51.1s. We ﬁnd these results to
be slightly worse than those in the SSH experiments be-
cause of higher packet loss rates.
In addition, we pick 5 random relays and simulate
background trafﬁc with browsing and ﬁle downloading,
and conduct the same experiment as above. Here, to deal
with moving windows, we use the simple brute-force
strategy described in § 6. The results are shown in Ta-
ble 2. The average success rate is now down to 77% and
the average time to succeed is 60.9s. Upon further in-
spection, the increased failure rate is exactly due to the
moving window problem i.e., it interferes with the se-
quence number search. Nevertheless, we think the result
is acceptable as we have not designed a robust solution
speciﬁcally for dealing with a moving window (this is
left for future work).
In general, we believe that a DoS attack against Tor
connections can have a devastating impact on both the
availability of the service as a whole and the privacy
guarantees that it can provide. The default policy in Tor