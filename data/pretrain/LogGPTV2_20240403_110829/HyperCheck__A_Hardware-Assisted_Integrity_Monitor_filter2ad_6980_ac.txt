memory of large servers. Ideally, the memory
image will be saved to a unique session directory
with other ﬁles that provide optional system
information.
Tribble: the proof-of-concept device
To verify our procedure, we designed and built
a proof-of-concept device called ‘‘Tribble,’’ which
is functional in our laboratory environment. Trib-
ble is based on an Intel IQ80303 processor (Intel,
IOP303 I/O processor) which contains a 100 MHz
Intel 80960JT (i960) core, a glueless interface to
ROM and SDRAM, an I2C bus interface, and a num-
ber of general purpose I/O pins. Most importantly,
the IQ80303 processor (also referred to as the
IOP303) contains a PCI-to-PCI bridge module, sup-
porting primary and secondary PCI buses with up
to a 528 MB/s transfer rate for a 64-bit/66 MHz
PCI operation, and a DMA Controller, which han-
dles the underlying timing and protocol speciﬁc
functionality of DMA.
Using the Intel IQ80303K evaluation platform by
Cyclone Microsystems provided us with a baseline
design that only required minimal hardware modi-
ﬁcations to ﬁt our desired speciﬁcations. Tribble
also contains 2 MB of Flash ROM (programmed
with the MON960 Target Monitor), 512 MB of on-
board SDRAM, RS232 UART (used as a ‘‘debug con-
sole’’), two 7-segment LED displays, an Li-ion
backup battery (unused in our current design),
and a momentary SPST pushbutton switch con-
nected to the Non-Maskable Interrupt (NMI) of
the IQ80303. A paper will be written in the future
on the hardware implementation details.
Our development platform consists of a Dell In-
spiron 8200 laptop running Windows 2000 with
a 1.8 MHz Intel Pentium 4M processor and 512 MB
of RAM. The Spectrum Digital SPI610 JTAG inter-
face connects between the serial port of our de-
velopment platform and the JTAG port of the
Tribble device. Our software toolchain consists
solely of the Intel i960 CTOOLS/MON960 package
(Intel, i960 CTOOLS) which includes a C/CCC
compiler, assembler, linker, runtime libraries, de-
bugger, and target monitor. The gdb960 debugger
included in CTOOLS allows for source-level debug-
ging and the viewing and manipulation of memory
and registers on the Tribble hardware (which was
used extensively during operational testing and
for the veriﬁcation of successful volatile memory
imaging).
Our target system is a Gateway desktop PC run-
ning Windows 2000 with a 1 GHz Intel Pentium III
processor and 256 MB of RAM. The Tribble card is
plugged into the PCI bus. Fig. 4 shows a block dia-
gram of our development environment.
The goal of this proof-of-concept device was to
prove that system memory could be read via the
PCI interface without modifying its contents. Due
to the target monitor executing on the Tribble
hardware, the PCI controller was enabled upon
power up, so that the hardware was visible to
the system even when it was not acquiring mem-
ory. The external switch was not implemented in
this design, so the acquisition process occurred
programmatically when we downloaded code onto
the Tribble hardware. Additionally, the external
storage device interface was not implemented.
The contents of retrieved volatile memory were
viewed with gdb960 and displayed to our serial
58
B.D. Carrier, J. Grand
Development
Platform
JTAG
Interface
Debug
Console
Tribble
PCI
Target
System
Figure 4 Block diagram of the Tribble development environment.
debug console in both ASCII and hexadecimal for-
mats, as shown in Fig. 5.
Test procedures and results
To test that Tribble was reading actual volatile
memory using the PCI bus and DMA Read Memory
requests, we conﬁgured it to read a 4096-byte
page of memory and then read the same page of
memory using dd with the \\.\PhysicalMemory
object. This was repeated with many pages and all
were found to be equal, although many of the
pages were just large arrays of ‘00’h. We read
data in 4096-byte blocks because that is the de-
fault size of virtual memory pages for Intel-based
platforms.
To verify that both dd and Tribble were reading
the correct memory locations, we used the SoftICE
tool (Compuware, SoftICE) to write two known 4-
byte hexadecimal strings to two disparate physical
memory locations. Both dd and Tribble read the
page containing the memory locations that were
modiﬁed by SoftICE and it was veriﬁed that the
strings were there.
To test that the acquisition process was not
modifying any memory that it read, a memory lo-
cation with a known data value was read twice in
a row. In all cases, the result of the second read
was the same as the ﬁrst. This test does not prove
that other memory locations were not written to
by Tribble during the process, but a more thorough
test could not be performed until the memory con-
tents are saved to a non-volatile external storage
device.
A ﬁnal test was to acquire all of the target
system memory using the dd tool and then acquire
all of the memory using Tribble. The output was
then compared in 4096-byte pages. As previously
mentioned, virtual memory uses pages that are
4096 bytes in size and therefore it would be
expected that some pages would differ between
the two acquisitions, since new pages may have
been written between the time of the acquisi-
tions. Comparing parts of the two outputs by
hand showed that many of the pages were same,
some of them had moved locations between the
two executions, and some of the pages were
new. Tribble ran very slowly due to the fact that
the 256 MB of memory was being written in ASCII
and hexadecimal formats to a serial terminal at
115.2 kbps, so many processes were able to run
between the dd acquisition and the end of the
Tribble acquisition. Therefore, these results were
not surprising and more extensive tests will be
performed when the external storage device inter-
face is implemented.
Before the full memory acquisition was per-
formed, the Notepad application was opened on
the target machine and the string ‘‘TRIBBLE WAS
Figure 5 Partial memory dump displayed on the serial debug console, starting address 0x62EBBA0.
A hardware-based memory acquisition procedure
59
HERE, DECEMBER 12, 2003’’ was entered into the
window. This string was identiﬁed in Unicode for-
mat in both the Tribble and dd outputs. This string
is shown in Fig. 5.
During our full memory acquisition tests using
Tribble, the target operating system would freeze
when we attempted to read within memory loca-
tion 0xB6000. This memory location is inside of
the Upper Memory Area (UMA) of Intel-based PCs
which is reserved for video RAM and system BIOS.
The UMA ranges from 0xA0000 to 0xFFFFF (640 kB
to 1 MB). For our tests, we skipped the memory re-
gion from 0xA0000 to 0xC0000 so that we would
not freeze the target system. We will examine
this memory area carefully in the future to identify
any methods of reading it without causing ill effects
on the target system. It may be necessary to skip the
entire UMA region if other test systems freeze at dif-
ferent memory locations within the area.
Limitations
This section will address the limitations of this pro-
cedure. The ﬁrst limitation of using the hardware-
based acquisition device is that it needs to be
installed prior to an incident. The device has not
been designed for an incident response team mem-
ber to carry in his toolkit to install after the fact,
and rather needs to be considered as part of a fo-
rensic readiness plan.
The thought of installing a PCI card into multiple
systems before an incident occurs may sound ex-
pensive and impractical. However, the intent of
the card is not to be installed into every computer
system in a particular environment. This device is
most useful when installed into at-risk, critical
servers where an attack is likely and a high-stake
intrusion investigation might occur. From a cost
perspective, the retail price of the hardware,
though not fully explored at this point, will be
equal to or less than other typical server compo-
nents, making it both affordable and practical. Ad-
ditionally, a trusted hardware-based device is
needed to reliably acquire the system memory
contents without compromising the integrity of
data stored on the memory. Some servers have hot-
swappable PCI card slots, so a responder could pos-
sibly install the card after an incident, but that will
require access to the inside of the computer and
may require use of the operating system in order
to enable the device. This scenario and the use
of other non-invasive interfaces (such as PCMCIA/
CardBus) will be investigated in the future after
the completion of our current design.
When the acquisition card enables its PCI con-
troller, the operating system may detect that the
card is now present on the bus. Systems with
Plug-and-Play support, such as Microsoft Windows,
may show a message that tells the user that a new
device has been detected and may request a driver.
To prevent this message, a simple ‘‘dummy’’ de-
vice driver could be installed on the system that
is loaded when the card is enabled but does not ac-
tually interact with the physical card. The exis-
tence of this driver may alert the attacker that
the card is installed, but due to the inherent oper-
ating system- and software-independence of PCI,
we believe that he will not be able to disable or
modify the behavior of the acquisition card. If it
is determined through our future research that
a device driver is indeed necessary, there are
three possible scenarios if an attacker detects
the presence of the driver. The attacker will either
stop his attack altogether, continue with his attack
not concerned about the card, or attempt to at-
tack the card itself. Future work will be done to
verify that attacks against the card, such as
through the creation of a malicious device driver,
can be reduced or prevented.
The output of this process is a dump of physical
memory. We will be able to do basic analysis of it
using strings, grep, and hex editors, but there
are currently no automated or integrated tools
for analysis. To view the memory that a speciﬁc
process used, the page table must be located and
the pages in physical memory and swap space
need to be mapped to the process’s virtual mem-
ory addresses. This is also future work.
This type of device is difﬁcult for an end user to
test and validate. The memory is constantly chang-
ing and therefore it will be difﬁcult to verify that
the image is an exact copy and that data were
not written to target memory during the acquisi-
tion. One potential test is to install the card in
a computer with no operating system. The memory
would be acquired twice in a row and the resulting
images compared. When our implementation is
complete, testing methods will be examined in
more detail.
Conclusion
In this paper, we have given requirements for
the general process of volatile memory acquisition,
a procedure that can satisfy our requirements,
and the initial results from our hardware imple-
mentation of the procedure. Our hardware-based
procedure can provide more reliable evidence
than a software-based solution because there is
60
B.D. Carrier, J. Grand
a smaller risk of an attacker modifying the proce-
dure to produce false data. This method will also
not write data to the target memory or hard drive
during the acquisition.
A device that implements this procedure can be
installed by a company on its servers so that the en-
tire state of the server can be preserved for the
search of digital evidence. This device can also be
used by companies that do not have a dedicated in-
cident response team. For example, a company de-
tects that one of its systems has been compromised
and a third party response team is called. However,
it will take them at least an hour to arrive on site.
During that time, the processes that the attacker
has executed could cause damage to the system,
but if the company unplugs the computer then the
volatile memory is lost. Using the hardware-based
implementation, the company can simply press
a button to save the memory contents and then un-
plug the server until the response team arrives to
acquire the disk and begin the investigation.
Our future work includes completing our hard-
ware implementation of the procedure, conducting
performance tests, verifying that system memory is
not written to during the acquisition process, test-
ing if the target system can be halted without ill
effects, and investigating potential attacks against
the device. A paper will be written in the future on
the hardware implementation details. A patent for
this device and procedure is pending.
Acknowledgements
We would like to thank the anonymous reviewers
for their comments and recommendations and
Cyclone Microsystems for providing exceptional
technical support.
References
CAIDA. Analysis of Code-Red; July 2001. Available from: http://
www.caida.org/analysis/security/code-red/.
Carrier Brian, Spafford Eugene. Getting physical with the digital
investigation process. Int J Digit Evid; Fall 2003.
Casey Eoghan. Practical approaches to recovering encrypted
digital evidence. Int J Digit Evid; Fall 2002.
Compuware. SoftICE. Available from: http://www.compuware.
com/.
Drake Chris, Brown Kimberley. PANIC! UNIX system crash dump
analysis handbook. Pearson Education; 1995.
Farmer Dan, Venema Wietse. The Coroner’s Toolkit (TCT).
Available from: http://www.ﬁsh.com/tct/.
Garner George. Forensic acquisition utilities. Available from:
http://users.erols.com/gmgarner/forensics/.
Hewlett-Packard, Intel, Microsoft, Phoenix, Toshiba. Advanced
conﬁguration and power interface speciﬁcation. Available
from: http://www.acpi.info/spec.htm.
Hitachi. Microdrive overview page. Available from: http://
www.hgst.com/hdd/micro/overvw.htm.
Intel. i960 CTOOLS. Available from: http://developer.intel.
com/design/i960/patches/index.htm.
Intel. IOP303 I/O processor. Available from: http://developer.
intel.com/design/iio/80303.htm.
ISS X-Force. SQL Slammer worm propagation; January 2003.
Available from: http://xforce.iss.net/xforce/xfdb/11153.
Lawless Timothy. Linux kernel-level Trojandkernel intrusion
system (KIS). Available from: http://archives.neohapsis.
com/archives/sf/linux/2001-q3/0038.html.
National
Institute of Standards and Technology. Computer
Forensic Tool Testing (CFTT) group. Available from: http://
www.cftt.nist.gov.
National Institute of Standards and Technology. Disk imaging
tool speciﬁcation; October 2001. Available from: http://
www.cftt.nist.gov/DI-spec-3-1-6.doc.
Shanley Tom, Anderson Don. PCI system architecture. 4th ed.
Pearson Education; 2000.
Smith Fred, Bace Rebecca. A guide to forensic testimony.
Addison Wesley; 2003.
Venema Wietse. Forensic discovery. Available from: http://
www.lysator.liu.se/upplysning/fa/wietse_susec.pdf.
VMWare, Inc. VMWare GSX server. Available from: http://www.
vmware.com/.
Brian Carrier is a Research Assistant at the Center for Education
and Research in Information Assurance and Security (CERIAS)
and a Computer Science PhD candidate at Purdue University.
Previously, Brian was a Research Scientist at @stake in Boston,
MA, and the lead for the @stake Response Team and Digital Fo-
rensic Labs. Brian has authored several forensic tools including
The Sleuth Kit and the Autopsy Forensic Browser and has taught
digital forensics, incident response, and ﬁle systems at SANS,
FIRST, the @stake Academy, and SEARCH. Brian has a Masters
in Computer Science from Purdue University.
Joe Grand is the president of Grand Idea Studio, a product de-
velopment and licensing ﬁrm. A recognized name in computer
security and former co-founder of @stake, Joe’s pioneering re-
search on product design and analysis, mobile devices, and dig-
ital forensics is published in various industry journals and has
been presented worldwide. He is the creator of pdd, the ﬁrst
forensic acquisition tool for Palm operating system devices
and is the author of Hardware Hacking: Have Fun While Voiding
Your Warranty. Joe holds a BSCE from Boston University.