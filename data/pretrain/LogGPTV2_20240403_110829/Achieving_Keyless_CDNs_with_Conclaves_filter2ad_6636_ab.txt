Honest but curious
In the honest-but-curious model, the
entity hosting the web server runs the software and protocols
as speciﬁed, but tries to infer customer keys, client data, or
cookies by observing trafﬁc to and from the machine, and
by inspecting any information leaked to the host operating
system. This model applies when, for instance, the customer
considers the CDN trustworthy and the CDN hosts its own
hardware, but the customer is concerned about a rogue em-
ployee or administrator. Additionally, CDNs may adopt this
threat model when hosting their own hardware so as to limit
the exposure of their customers’ data in the event of a soft-
ware bug in the untrusted OS. Our goal would be to reduce
an honest-but-curious attacker to have no more information
than any on-path attacker (which HTTPS protects against).
Byzantine faulty behavior
In this more extreme threat
model, the entity hosting the hardware can deviate arbitrar-
ily from the protocol, alter any software running in an un-
trusted environment on that hardware, and passively monitor
trafﬁc, and actively interact with the web servers. Nonethe-
less, we assume attackers cannot violate basic assumptions of
cryptography or trusted hardware, which we review next. A
website may wish to adopt this model for CDNs whom they
do not trust. Likewise, CDNs may assume this threat model
when using edge-network servers that they do not personally
host or have physical control over [8].
3 Prior Work
Here, we review relevant background and prior work in terms
of how they have achieved the goals outlined in §2.3. There
have been a variety of approaches that achieve a subset of
our goals, but to the best of our knowledge, we are the ﬁrst
to achieve them all. See Table 1 for a comparison.
USENIX Association
29th USENIX Security Symposium    737
Protects
Secure
Protects
private keys
Supports
Supports
legacy apps
session keys WAFs multi-tenancy
System
Traditional CDNs
HTTP Solutions [17, 20]
TLS Solutions [9, 21]
Crypto Solutions [14–16, 22, 23]
TaLoS [24]
SGX libOSes [25–28]
TEEs and Middleboxes [29–35]
Phoenix Conclave
Table 1: Prior work, grouped broadly by categories. To the best of our knowledge, the Phoenix Conclave is the ﬁrst secure
CDN to support multiple tenants and to provide secure web application ﬁrewalls without having to divulge customers’ secret
keys. G denotes full support for a feature and H denotes partial support.
Additional
deployment
None
Javascript
Origin-side server
Client & server mods
Trusted hardware
Trusted hardware
Trusted hardware
Trusted hardware
G
G
G
G
G
G
H
G
G
G
G
G
G
G
G
G
G
G
G
G
G
G
G
G
H
G
3.1 TEE-less Solutions
HTTP Solutions Several systems have proposed that the
origin server digitally sign their data [17, 20] or embed cryp-
tographic hashes directly into HTML [36, 37], which clients
can then verify. Such approaches ensure provenance, fresh-
ness, and integrity of web assets served by a proxy—without
requiring the proxy to store the origin server’s private key.
However, they do not provide for conﬁdentiality, nor do they
allow for CDN services such as media transcoding and web
application ﬁrewalls. Moreover, they place the origin on the
critical path, thereby increasing latency and making them
more susceptible to attack.
TLS Solutions Other approaches allow origin servers to re-
tain ownership of their private keys by changing the server-
side implementation of TLS. SSL Splitting [21] leverages
the fact that a TLS stream comprises data records and au-
thentication records (MACs), and develops a new protocol
in which the origin sends the authentication records and the
proxy merges them with the data records to form the com-
plete TLS stream.
In essence, this implements the above
HTTP solutions in TLS, and thus suffers from the same lim-
itations of requiring the origin server to be on the fast path.
Cloudﬂare’s Keyless SSL [9] takes advantage of the fact
that TLS only uses the website’s private key in a single step of
the TLS handshake. Like SSL Splitting, Keyless SSL keeps
the master private key off of, and unknown to, the proxy, but
unlike SSL Splitting, Keyless SSL does not provide for con-
tent provider endorsement of the content the proxy serves.
Neither SSL Splitting nor Keyless SSL provides for the pro-
tection of the session keys from the CDN provider.
Another line of work modiﬁes TLS to allow for the inter-
ception of trafﬁc by middleboxes [10–12]. This is contrary to
our desire to support legacy applications; it is not clear how
these solutions would be integrated with tools such as WAFs.
Cryptographic Solutions One seemingly straightforward
approach to solving this problem would appear to be fully ho-
momorphic encryption (FHE) or functional encryption [22,
23, 38]. FHE allows one to perform arbitrary computations
on encrypted data, without knowing any of the keys. How-
ever, even current state-of-the-art homomorphic encryption
is much too slow for the performance that is required of a
CDN and additionally would violate our goal of supporting
legacy applications.
Various approaches [13–16] apply searchable encryption
schemes to achieve functionality like deep packet inspection
(DPI) while still maintaining the privacy of data.
In gen-
eral, these approaches require changes of some sort to the
endpoint(s), suffer from performance overheads, and do not
achieve the rich and varied CDN features we require.
3.2
Intel SGX (and Other TEEs)
Trusted execution environments (TEEs) provide hardware
protections for running small trusted portions of code with
guarantees of conﬁdentiality and integrity. Applications can
be guaranteed that code executed within the TEE was run
correctly and that any secrets generated during execution will
remain safely within it as well.
A wide range of TEEs are available today, with varying
functionalities. We focus on Intel’s Software Guard Exten-
sions (SGX) environment, but note that any TEE with similar
functionality discussed here and §2.4 would also be usable.
SGX Overview Intel’s SGX provides a new mechanism
for trusted hardware and software as an extension to the x86
instruction set [39, 40]. A program called an enclave runs at
high privilege in isolation on the processor in order to provide
trusted code execution, while an untrusted application can
make calls into the enclave. While these enclaves can be
statically disassembled (so the code running in the enclave is
not private), once an enclave is running, its internal state is
opaque to any observer (even one with physical access), as
are any secrets generated.
Enclaves must be measured and signed by their creator and
cannot run without this signature, and the enclave state is
checked against this measurement before running. An en-
clave can also cryptographically attest to its current state, in
order to prove that it correctly executed code [41, 42]. An-
other feature is the ability to cryptographically seal data to
738    29th USENIX Security Symposium
USENIX Association
be used across multiple invocations of an enclave [42, 43].
SGX also provides such features as trusted time and mono-
tonic counters [44, 45]. However, an enclave currently has
no access to networking functionality itself, so it must rely
on the untrusted application for all network interactions. In
fact, enclaves are prohibited from making any system calls,
so these must be proxied through the untrusted OS as well.
Running Legacy Applications on SGX Various works use
SGX as a mechanism for achieving shielded execution of un-
modiﬁed legacy applications. These works generally differ in
how much of the application’s code runs within the enclave.
At one extreme, TaLoS [24] simply ports the LibreSSL
library to SGX so that the application terminates TLS con-
nections in an enclave; the rest of the application remains
outside the enclave, unchanged. This approach protects the
private keys and session keys, but does not address our goals
of multi-tenancy or WAFs.
At the other extreme, SCONE [26] moves the entire C li-
brary into the enclave. Haven [25] and Graphene [27] carry
this approach further by implementing kernel functionality in
an enclave by means of a library operating system (libOS). li-
bOSes refactor a traditional OS kernel into a user-land library
that loads a program. The program’s C library is modiﬁed to
redirect system calls to the libOS, which in turn either ser-
vices the calls internally or calls into the untrusted OS when
the host’s resources are needed. Aurora [28] extends the li-
bOS from the SGX enclave to System Management Mode
(SMM) by running device drivers in SMM memory.
CDN applications involve multiple processes, and of these
works, only Graphene supports forking and executing new
processes within enclaves. However, Graphene’s support for
shared state among multiple enclaves, such as a read-write
ﬁle system and shared memory, is limited. We discuss these
limitations in §4 and our extensions to Graphene in §5.
Other work [46] provides frameworks for developing new
software that takes advantage of SGX, whereas our interest
is in supporting legacy applications.
TEEs and Middleboxes A recent series of works have ex-
plored securing middleboxes by using TEEs, to provide DPI
and intrusion detection [29, 30], as well as network function
virtualization [31–35]. None of these systems handles the
complete range of functionality required by CDNs, nor do
they support multi-tenancy, to the best of our knowledge.
The most relevant works combining TEEs and middle-
boxes are Harpocrates [47] and STYX [48]. Harpocrates
builds basic CDN functionality using a TEE and alludes
to performing Keyless SSL-like functionality using trusted
hardware but does not provide any details. In addition, Har-
pocrates does not seek to protect any derived key material
and instead focuses solely on protecting the long term pri-
vate key. STYX improves Keyless SSL by protecting private
and session keys, but does not address secure WAFs or other
CDN-type functionality.
Side-Channel Attacks on SGX We must address the recent
rise of side-channel attacks against SGX, including the spec-
ulative execution attack Foreshadow [49, 50]. This attack al-
lows for the extraction of not only the entire SGX enclave’s
memory contents but also the attestation and sealing keys.
We note that this attack would break the security guarantees
that we provide with conclaves. Intel has stated that SGX is
explicitly designed to not deal with side-channel attacks in its
current state and leaves handling this up to enclave develop-
ers [51, 52]. Regardless, Intel has released both microcode
patches and recommendations for system level code that at
the current time address Foreshadow and known related at-
tacks [50, 53, 54]. There is also ongoing research to address
both speculative execution as well as other cache-based side-
channel attacks on SGX and in general [54–57]. We consider
protections against such side-channel attacks to be outside of
the scope of this work and rely on these defenses.
4 Design
At a high level, our approach is to deploy CDNs in enclaves.
However, doing so in a manner that permits multi-tenancy
and support for legacy applications is challenging. Prior
work on SGX libOSes [25–27] make it possible to run legacy
applications within an SGX enclave, but all of them either
lack multi-process support completely, or only support mul-
tiple processes in a restricted environment. Conversely, we
aim to be able to support dynamic scaling up and down of
web servers, tenant conﬁgurations, and security postures.
To address these challenges, we introduce a new architec-
tural primitive that we call a conclave: in essence a container
of enclaves. As we will show, conclaves permit ﬂexible de-
ployment conﬁgurations and achieve security in multi-tenant
settings. We ﬁrst describe the conclave design, and then how
we compose them to build the ﬁrst “keyless CDN,” Phoenix.
4.1 Conclaves Design
The conclave design extends a libOS to support shared state
abstractions among multiple processes. Recall from §3.2 that
libOSes expose traditional OS kernel services within an en-
clave, and either handle the system calls themselves or, when
necessary (e.g., to send a network packet), hand them off to
the untrusted OS. Graphene [27] supports the critical system
calls fork and exec by automatically spawning a brand new
enclave, and performing a checkpoint-and-migration (essen-
tially copying the ﬁrst enclave’s memory pages into the sec-
ond). Graphene further offers some support for these sepa-
rate processes (enclaves) to communicate with one another
over pipes, and implements signals, semaphores, message
queues, and exit notiﬁcations as RPCs over these pipes. In
other words, Graphene essentially turns a traditional multi-
process application into a “distributed system” of enclaves,
along with some basic plumbing to allow them to communi-
cate with one another.
USENIX Association