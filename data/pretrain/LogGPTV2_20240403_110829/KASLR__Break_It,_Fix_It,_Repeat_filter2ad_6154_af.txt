### Running in User Space

In theory, there should be no valid kernel addresses in user space, which would prevent all microarchitectural attacks on the kernel. However, while this proposal has been implemented on all major operating systems to mitigate Meltdown [59], it does not prevent our KASLR (Kernel Address Space Layout Randomization) break (see Section 3.2). The reason is that x86 architecture requires some kernel pages to always be mapped, even when running in user space [31].

### Lazarus and KAISER

Lazarus [26] proposed a similar approach to KAISER [31]. It involves isolating the kernel paging entries from those of the user space by separating user and kernel page tables. This prevents the Memory Management Unit (MMU) from using entries pointing to kernel space memory from user space. Unlike KAISER, which separates the context switching code from the rest of the kernel code section, Lazarus uses dummy mappings to hide the context switching code. However, neither approach addresses the challenges we identified, and they do not defeat all known microarchitectural attacks on KASLR.

### Conclusion

In this paper, we analyzed Intel’s recent hardware fixes for Meltdown. Our analysis revealed that illegal memory accesses do not lead to a CPU stall; instead, the illegally loaded data is zeroed out. We introduced EchoLoad, a novel technique based on Flush+Reload, to distinguish stalling loads from transiently executed ones. This enables an attacker to detect physically-backed kernel addresses and break KASLR. Our KASLR break is the fastest and most reliable microarchitectural KASLR break presented so far, taking only 40 µs to de-randomize the kernel. The only requirement for EchoLoad is memory loads, making it possible to mount attacks from restricted environments such as SGX and JavaScript. We also presented the first JavaScript-based Meltdown attack and KASLR break on systems that do not receive Meltdown patches, specifically x86 32-bit operating systems.

With FLARE, we proposed a generic approach to protect the kernel against microarchitectural KASLR breaks. We verified that FLARE mitigates the root cause behind current microarchitectural KASLR breaks and ensures uniform behavior across the kernel address space. Given the state of hardware mitigations, we recommend deploying FLARE even on the most recent CPU generations.

### Acknowledgments

We thank our anonymous reviewers for their valuable comments and suggestions, which helped improve the paper. This project received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation program (grant agreement No 681402). The work was also supported by the Austrian Research Promotion Agency (FFG) via the ESPRESSO project, funded by the province of Styria and the Business Promotion Agencies of Styria and Carinthia. Additional funding was provided by generous gifts from Intel, ARM, and Cloudflare. The opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding parties.

### References

[References listed as in the original text, with proper formatting and organization.]

This revised version aims to enhance clarity, coherence, and professionalism, ensuring that the content is well-structured and easily understandable.