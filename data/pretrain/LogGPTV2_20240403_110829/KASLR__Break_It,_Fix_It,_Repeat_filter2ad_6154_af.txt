running in user space. Thus, in theory, there is no valid kernel
address in user space, preventing all microarchitectural attacks on
the kernel. However, while their proposal is deployed on all major
OSs to prevent Meltdown [59], it cannot prevent our KASLR break
(cf. Section 3.2). The reason is that x86 requires some kernel pages
always to be mapped, even when running in user space [31].
Lazarus [26] proposed a similar approach to KAISER [31]. It is
based on fencing the kernel paging entries off from those of the
user space by separating user and kernel page tables. Therefore,
the Memory Management Unit can no longer use entries pointing
to kernel space memory from user space. Contrary to KAISER,
Lazarus uses dummy mappings to hide the context switching code
while KAISER separates it from the rest of the kernel code section.
However, it does not tackle the challenges we identified and does
not defeat all known microarchitectural attacks on KASLR.
7 CONCLUSION
In this paper, we analyzed Intel’s recent hardware fixes for Melt-
down. Our analysis led to the understanding that illegal memory
accesses do not lead to a CPU stall, but instead, the illegally loaded
data is zeroed-out. With EchoLoad, we presented a novel tech-
nique based on Flush+Reload to distinguish stalling loads from
transiently executed ones. Hence, EchoLoad enables an attacker to
detect physically-backed kernel addresses and break KASLR. Our
KASLR break is the fastest and most reliable microarchitectural
KASLR break presented so far, taking only 40 µs to de-randomize
the kernel. The only requirement for EchoLoad are memory loads,
allowing it to be mounted from restricted environments such as
SGX and JavaScript. We presented the first JavaScript-based Melt-
down attack and KASLR break on the systems that do not receive
Meltdown patches, i.e., x86 32-bit OSs.
With FLARE, we proposed a generic approach for protecting
the kernel against microarchitectural KASLR breaks. We verified
that FLARE mitigates the root cause behind current microarchi-
tectural KASLR breaks and yields a uniform behavior across the
kernel address space. Thus, considering the state of the hardware
mitigations, we propose to deploy FLARE even on the most recent
CPU generations.
ACKNOWLEDGMENTS
We thank our anonymous reviewers for their comments and sug-
gestions that helped improving the paper. This project has received
funding from the European Research Council (ERC) under the Euro-
pean Union’s Horizon 2020 research and innovation program (grant
agreement No 681402). This work has been supported by the Aus-
trian Research Promotion Agency (FFG) via the project ESPRESSO,
which is funded by the province of Styria and the Business Pro-
motion Agencies of Styria and Carinthia. Additional funding was
provided by generous gifts from Intel, ARM, and Cloudflare. Any
opinions, findings, and conclusions or recommendations expressed
in this paper are those of the authors and do not necessarily reflect
the views of the funding parties.
REFERENCES
[1] Tiago Alves. 2004. TrustZone: Integrated Hardware and Software Security.
[2] Apple Inc. 2012.
OS X Mountain Lion Core Technologies Overview.
http://movies.apple.com/media/us/osx/2012/docs/OSX_MountainLion_Core_
Technologies_Overview.pdf
[3] ARM Limited. 2018. Vulnerability of Speculative Processors to Cache Timing
Side-Channel Mechanism.
[4] Naomi Benger, Joop van de Pol, Nigel P Smart, and Yuval Yarom. 2014. Ooh Aah...
Just a Little Bit: A small amount of side channel can go a long way. In CHES.
[5] Daniel J. Bernstein. 2004. Cache-Timing Attacks on AES.
[6] Erik Bosman and Herbert Bos. 2014. Framing Signals - A Return to Portable
Shellcode. In S&P.
[7] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2016. Dedup
Est Machina: Memory Deduplication as an Advanced Exploitation Vector. In
S&P.
[8] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan
Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache
Attacks Are Practical. In WOOT.
[9] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Ma-
rina Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, Jo
Van Bulck, and Yuval Yarom. 2019. Fallout: Leaking Data on Meltdown-resistant
CPUs. In CCS.
[10] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg,
Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. 2019. A
Systematic Evaluation of Transient Execution Attacks and Defenses. In USENIX
Security Symposium.
[11] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R
Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow In-
tegrity.. In USENIX Security Symposium.
Modern Defenses. In USENIX Security.
[13] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi,
Hovav Shacham, and Marcel Winandy. 2010. Return-oriented programming
without returns. In CCS.
Sniper.
[12] Nicholas Carlini and David A. Wagner. 2014. ROP is Still Dangerous: Breaking
[14] Liang Chen and Qidan He. 2016. Shooting the OS X El Capitan Kernel Like a
[15] Jonathan Corbet. 2018. Preventing kernel-stack leaks. https://lwn.net/Articles/
748642/
//www.spec.org/cpu2017/
[16] Standard Performance Evaluation Corporation. 2017. SPEC CPU 2017. https:
[17] Ian Cutress. 2018. Spectre and Meltdown in Hardware: Intel Clarifies Whiskey
Lake and Amber Lake. https://www.anandtech.com/show/13301/spectre-and-
meltdown-in-hardware-intel-clarifies-whiskey-lake-and-amber-lake
[18] Lizzie Dixon. 2017. Breaking KASLR with perf. https://blog.lizzie.io/kaslr-and-
perf.html
Articles/569635/
[19] ecma international. 2018. ECMAScript 2018 Language Specification.
https:
//www.ecma-international.org/ecma-262/9.0/index.html
[20] Jake Edge. 2013. Kernel address space layout randomization. https://lwn.net/
[21] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. 2016. Jump
[22] Agner Fog. 2016. The microarchitecture of Intel, AMD and VIA CPUs: An
over ASLR: Attacking branch predictors to bypass ASLR. In MICRO.
optimization guide for assembly programmers and compiler makers.
[23] Ulf Frisk. 2016. Windows 10 KASLR Recovery with TSX. http://blog.frizk.net/
2016/11/windows-10-kaslr-recovery-with-tsx.html
[24] Thomas Garnier. 2016. Kernel memory randomization and trampoline page
tables. https://medium.com/@mxatone/kernel-memory-randomization-and-
trampoline-page-tables-9f73827270ab
[25] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. 2016. A Survey of Microar-
chitectural Timing Attacks and Countermeasures on Contemporary Hardware.
Journal of Cryptographic Engineering (2016).
[26] David Gens, Orlando Arias, Dean Sullivan, Christopher Liebchen, Yier Jin, and
Ahmad-Reza Sadeghi. 2017. LAZARUS: Practical Side-Channel Resilient Kernel-
Space Randomization. In RAID.
[27] Jason Gionta, William Enck, and Per Larsen. 2016. Preventing kernel code-reuse
attacks through disclosure resistant code diversification. In Communications and
Network Security (CNS).
[28] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014.
[29] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017.
Out of Control: Overcoming Control-Flow Integrity. In S&P.
ASLR on the Line: Practical Cache Attacks on the MMU. In NDSS.
[30] Daniel Gruss, Dave Hansen, and Brendan Gregg. 2018. Kernel Isolation: From an
Academic Idea to an Efficient Patch for Every Computer. USENIX ;login (2018).
[31] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Clémentine Maurice,
and Stefan Mangard. 2017. KASLR is Dead: Long Live KASLR. In ESSoS.
[32] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Man-
gard. 2016. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR.
In CCS.
Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA.
[34] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache Template
Attacks: Automating Attacks on Inclusive Last-Level Caches. In USENIX Security
Symposium.
[35] Noam Hadad and Jonathan Afek. 2018. Overcoming (some) Spectre browser mit-
igations. https://alephsecurity.com/2018/06/26/spectre-browser-query-cache/
[33] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016.
[36] Jann Horn. 2018. speculative execution, variant 4: speculative store bypass.
[37] Ralf Hund, Carsten Willems, and Thorsten Holz. 2013. Practical Timing Side
[38] Intel. [n.d.].
Channel Attacks against Kernel Space ASLR. In S&P.
Intel 64 and IA-32 Architectures Optimization Reference Man-
ual. https://www.intel.com/content/www/us/en/architecture-and-technology/
64-ia-32-architectures-optimization-manual.html
Intel Analysis of Speculative Execution Side Chan-
https://software.intel.com/security-software-guidance/api-
nels.
app/sites/default/files/336983-Intel-Analysis-of-Speculative-Execution-
Side-Channels-White-Paper.pdf
[39] Intel. 2018.
[40] Intel. 2018. Speculative Execution Side Channel Mitigations. Revision 3.0.
[41] Intel. 2019. Deep Dive: Intel Analysis of Microarchitectural Data Sam-
https://software.intel.com/security-software-guidance/insights/deep-
pling.
dive-intel-analysis-microarchitectural-data-sampling
[42] Intel. 2019.
Intel 64 and IA-32 Architectures Software Developer’s Manual,
Volume 3 (3A, 3B & 3C): System Programming Guide.
[43] Intel. 2019. Performance Monitoring Impact of Intel Transactional Synchroniza-
tion Extension Memory. https://cdrdv2.intel.com/v1/dl/getContent/604224
[44] Alex Ionescu. 2016. Twitter: Windows KASLR. https://twitter.com/aionescu/
status/725399988306644992
[46] Gorka Irazoqui, Mehmet Sinan Inci, Thomas Eisenbarth, and Berk Sunar. 2014.
[47] Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Mathias Payer. 2018.
[45] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. S$A: A Shared Cache
Attack that Works Across Cores and Defies VM Sandboxing – and its Application
to AES. In S&P.
Wait a minute! A fast, Cross-VM attack on AES. In RAID’14.
Block Oriented Programming: Automating Data-Only Attacks. In CCS.
Locking Down the Processor via Rowhammer Attack. In SysTEX.
Space Layout Randomization with Intel TSX. In CCS.
[49] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking Kernel Address
[48] Yeongjin Jang, Jaehyuk Lee, Sangho Lee, and Taesoo Kim. 2017. SGX-Bomb:
[50] David Kaplan, Jeremy Powell, and Tom Woller. 2016. AMD Memory Encryption.
[51] Vladimir Kiriansky and Carl Waldspurger. 2018. Speculative Buffer Overflows:
[52] Amit Klein and Benny Pinkas. 2019. From IP ID to Device ID and KASLR Bypass.
[54] Paul C. Kocher. 1996. Timing Attacks on Implementations of Diffe-Hellman, RSA,
Attacks and Defenses. arXiv:1807.03757 (2018).
In USENIX Security.
[53] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas,
Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz,
and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In
S&P.
DSS, and Other Systems. In CRYPTO.
[55] Esmaeil Mohammadian Koruyeh, Khaled Khasawneh, Chengyu Song, and Nael
Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks using the Return
Stack Buffer. In WOOT.
[56] Jaehyuk Lee, Jinsoo Jang, Yeongjin Jang, Nohyun Kwak, Yeseul Choi, Changho
Choi, Taesoo Kim, Marcus Peinado, and Brent Byunghoon Kang. 2017. Hacking
in Darkness: Return-oriented Programming against Secure Enclaves. In USENIX
Security Symposium.
[57] Linux. 2019. Complete virtual memory map with 4-level page tables. https:
//www.kernel.org/doc/Documentation/x86/x86_64/mm.txt
[58] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan
Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In USENIX
Security Symposium.
[59] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas,
Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval
Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User
Space. In USENIX Security Symposium.
Level Cache Side-Channel Attacks are Practical. In S&P.
[60] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. 2015. Last-
[61] G. Maisuradze and C. Rossow. 2018. ret2spec: Speculative Execution Using Return
Stack Buffers. In CCS.
[62] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel Gruss,
Carlo Alberto Boano, Stefan Mangard, and Kay Römer. 2017. Hello from the
Other Side: SSH over Robust Cache Covert Channels in the Cloud. In NDSS.
[63] Ross Mcilroy, Jaroslav Sevcik, Tobias Tebbi, Ben L Titzer, and Toon Verwaest. 2019.
Spectre is here to stay: An analysis of side-channels and speculative execution.
arXiv:1902.05178 (2019).
Analysis. In USENIX ATC.
[65] Andrei Mogage, Rafael Pires, Vlad Crăciun, Pascal Felber, and Emanuel Onica.
2019. Supply chain malware targets SGX: Take care of what you sign (Practical
Experience Report). In SRDS.
cgi?id=1430051
[66] Mozilla. 2019. Index Masking in Firefox. https://bugzilla.mozilla.org/show_bug.
[64] Larry McVoy and Carl Staelin. 1996. Lmbench: Portable Tools for Performance
[67] Mozilla. 2019. performance.now resolution. https://developer.mozilla.org/en-
US/docs/Web/API/Performance/now
[68] Net Applications.com. 2019. Desktop Operating System Market Share. http:
//www.netmarketshare.com/operating-system-market-share.aspx
[69] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache Attacks and Coun-
termeasures: the Case of AES. In CT-RSA.
[70] Matthew Panzarino. 2012. Apple releases OS X 10.8 Mountain Lion Developer
Preview 2, lists known issues. https://thenextweb.com/apple/2012/03/16/apple-
releases-os-x-10-8-mountain-lion-developer-preview-2-to-mac-developers/
[71] Colin Percival. 2005. Cache missing for fun and profit. In BSDCan.
[72] Marios Pomonis, Theofilos Petsios, Angelos D Keromytis, Michalis Polychronakis,
and Vasileios P Kemerlis. 2017. kRˆ X: Comprehensive Kernel Protection against
Just-In-Time Code Reuse. In EuroSys.
Articles/420403/
[73] Dan Rosenberg. 2010. kptr_restrict for hiding kernel pointers. https://lwn.net/
[74] Morten Schenk. 2019. Development of a new Windows 10 KASLR Bypass
(in One WinDBG Command). https://www.offensive-security.com/vulndev/
development-of-a-new-windows-10-kaslr-bypass-in-one-windbg-command/
[75] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming:
On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In S&P.
[76] Michael Schwarz, Claudio Canella, Lukas Giner, and Daniel Gruss. 2019. Store-to-
Leak Forwarding: Leaking Data on Meltdown-resistant CPUs. arXiv:1905.05725
(2019).
[77] Michael Schwarz, Daniel Gruss, Moritz Lipp, Clémentine Maurice, Thomas Schus-
ter, Anders Fogh, and Stefan Mangard. 2018. Automated Detection, Exploitation,
and Elimination of Double-Fetch Bugs using Modern CPU Features. In AsiaCCS.
[78] Michael Schwarz, Moritz Lipp, Daniel Gruss, Samuel Weiser, Clémentine Maurice,
Raphael Spreitzer, and Stefan Mangard. 2018. KeyDrown: Eliminating Software-
Based Keystroke Timing Side-Channel Attacks. In NDSS.
[79] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Steck-
lina, Thomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-Privilege-
Boundary Data Sampling. In CCS.
https:
[81] Michael Schwarz, Samuel Weiser, and Daniel Gruss. 2019. Practical Enclave
[80] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Mangard. 2017.
Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural
Attacks in JavaScript. In FC.
Malware with Intel SGX. In DIMVA.
[82] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan
Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache Attacks.
In DIMVA.
libc without function calls (on the x86). In CCS.
//grsecurity.net/kaslr_an_exercise_in_cargo_cult_security.php
[83] Hovav Shacham. 2007. The geometry of innocent flesh on the bone: Return-into-
[84] Brad Spengler. 2013. KASLR: An Exercise in Cargo Cult Security.
[85] Julian Stecklina and Thomas Prescher. 2018. LazyFP: Leaking FPU Register State
[86] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. SoK: Eternal
using Microarchitectural Side-Channels. arXiv:1806.07480 (2018).
War in Memory. In S&P.
[87] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.
2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient
Out-of-Order Execution. In USENIX Security Symposium.
[88] Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin,
Daniel Genkin, Yarom Yuval, Berk Sunar, Daniel Gruss, and Frank Piessens.
2020. LVI: Hijacking Transient Execution through Microarchitectural Load Value
Injection. In 41th IEEE Symposium on Security and Privacy (S&P’20).
[89] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi
Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2019. RIDL:
Rogue In-flight Data Load. In S&P.
Eviction Sets. In S&P.
[91] WebAssembly. 2019.
WebAssembly/design/blob/master/FutureFeatures.md
[90] Pepe Vila, Boris Köpf, and Jose Morales. 2019. Theory and Practice of Finding
Features to add after the MVP.
https://github.com/
[92] Nico Weichbrodt, Anil Kurmus, Peter Pietzuch, and Rüdiger Kapitza. 2016. Async-
Shock: Exploiting Synchronisation Bugs in Intel SGX Enclaves. In ESORICS.
[93] Ofir Weisse, Jo Van Bulck, Marina Minkin, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Raoul Strackx, Thomas F. Wenisch, and Yuval Yarom.
2018. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient
Out-of-Order Execution. https://foreshadowattack.eu/foreshadow-NG.pdf.
[94] Zhenyu Wu, Zhang Xu, and Haining Wang. 2014. Whispers in the Hyper-
space: High-bandwidth and Reliable Covert Channel Attacks inside the Cloud.
IEEE/ACM Transactions on Networking (2014).
[95] Yunjing Xu, Michael Bailey, Farnam Jahanian, Kaustubh Joshi, Matti Hiltunen,
and Richard Schlichting. 2011. An exploration of L2 cache covert channels in
virtualized environments. In CCSW’11.
Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium.
Tenant Side-Channel Attacks in PaaS Clouds. In CCS.
lkml/2019/3/12/1352
[97] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-
[98] Peter Zijlstra. 2019. Implement support for TSX Force Abort. https://lkml.org/
[96] Yuval Yarom and Katrina Falkner. 2014. Flush+Reload: a High Resolution, Low