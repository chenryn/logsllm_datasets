### 文本优化

#### 字符与背景设置
- 仅使用大写字母和数字。
- 前景（即挑战文本）为深蓝色，背景为浅灰色。

#### 字符扭曲
- 使用局部和全局扭曲来对字符进行变形。
  - **局部扭曲**：产生“小波纹、波动和弹性变形”，沿字符像素分布。这种技术可以干扰基于特征的算法，如利用字符厚度或衬线特征来检测和识别字符的方法。表1的第一行和第二行中的字符主要受到局部扭曲的影响。
  - **全局扭曲**：生成字符级别的弹性变形，以干扰模板匹配算法在字符检测和识别中的应用。表1的第三行和第四行中的字符主要受到全局扭曲的影响。

#### 抗分割措施
- 使用不同粗细的随机弧作为主要的抗分割手段。
  - **粗前景弧**：这些弧为前景色，其粗细可与字符中较粗的部分相同。它们不直接与任何字符相交，因此也称为“非相交弧”。
  - **细前景弧**：这些弧为前景色，虽然通常不如上述类型的弧粗，但其粗细可与字符中较细的部分相同。它们与粗弧、字符或两者相交，因此也称为“相交细弧”。
  - **细背景弧**：这些弧为背景色且较细，穿过字符并移除部分字符内容（像素），从而提高鲁棒性。

#### 常见的CAPTCHA扭曲方法
- 局部和全局扭曲是文本CAPTCHA中常用的扭曲方法。许多方案使用前景和背景颜色的纹理和网格作为杂乱背景，以增加抗分割能力。MSN方案中使用了不同粗细的随机弧作为杂乱背景。其原理在于这些弧本身可以作为虚假字符的良好候选，与随机弧混合后的字符会混淆最先进的分割方法，提供强大的分割抵抗能力 [5]。

### 分割攻击

我们开发了一种低成本的攻击方法，能够有效地分割由MSN方案生成的挑战。具体来说，我们的攻击实现了以下目标：
- 识别并移除随机弧
- 按正确顺序识别所有字符位置；换句话说，将每个挑战分成8个有序段，每段包含一个单独的字符。

该攻击基于对收集到的100个随机样本的观察和分析——这是一组“样本集”。攻击的有效性不仅在样本集上进行了测试，还在一个包含500个随机样本的大规模测试集上进行了验证——设计攻击时未使用该测试集中任何样本的先验知识。这种方法遵循计算机视觉和机器学习领域的常见实践 [2]。（所有样本均于2007年夏季收集）

#### 攻击步骤
攻击涉及六个连续步骤，每个步骤将在以下章节中详细说明。

##### 4.1 预处理
首先，通过阈值方法将彩色挑战图像转换为黑白图像：强度高于阈值的像素转换为白色，低于阈值的像素转换为黑色（参见图2(a)和(b)）。阈值是通过对样本集进行手动分析确定的，并且在样本集和测试集中都使用相同的值。

预处理的第二步是修复断裂字符：细背景弧移除了一些字符内容，有时会导致字符出现裂缝（例如，图2(a)中的第二个字符‘T’因这个原因而断裂）。此步骤有两个目的：i) 保持字符作为一个单一实体，从而增强后续的分割方法；ii) 防止字符的小部分被误认为噪声弧而被移除。

我们观察到，经过二值化后，细背景弧通常为1-2像素宽，以下简单方法可以有效识别并修复由这些弧引起的断裂字符：
1. 找到左侧和右侧邻居为前景色的背景色像素（参见图3(a)）。
2. 找到顶部和底部邻居为前景色的背景色像素（参见图3(b)）。
3. 将上述找到的像素转换为前景色。

此方法可以连接满足图3所示条件的任何1像素间隙。其效果如图2(c)所示：恢复了字符‘T’的一些缺失像素。此方法的一个副作用是可能会引入额外的前景像素，这些像素最初是断开的。例如，在图2(c)中，一条细弧与‘R’相交，现在与另一条与‘E’相交的弧相连。但在我们的研究中，这一缺点已被证明是一个微不足道的问题——如果我们选择连接所有两像素间隙，则情况可能不同。

##### 4.2 垂直分割
应用垂直分割方法将挑战垂直分割成几个块，每个块可能包含一个或多个字符。垂直分割过程从将图像映射到一个表示每列前景像素数的直方图开始。然后，垂直分割线通过切割没有前景像素的列将图像分成若干块。图4显示了这种垂直直方图分割将挑战分为两个块。

这种垂直方法不仅实现了部分分割，还促进了我们的分治策略，这是攻击成功的关键。

##### 4.3 颜色填充分割
在此步骤中，对上一步骤分割出的每个块应用“颜色填充分割 (CFS)”算法。该算法的基本思想是在一个块中检测每一个连通组件，我们称之为对象。对象可以是弧、字符、连接的弧或连接的字符。算法的工作原理如下：首先检测一个前景像素，然后追踪其所有前景邻居，直到遍历完该连通组件的所有像素——即检测到一个对象。接下来，算法定位一个位于已检测对象区域外的前景像素，并开始另一个遍历过程以识别下一个对象。此过程持续进行，直到检测到块中的所有对象。这种方法类似于用不同的颜色填充每个连通组件，因此我们称其为“颜色填充”分割。最终，用于填充一个块的颜色数量就是该块中的对象数量。

通过我们的CFS方法，如图5(a)所示，我们确定第一个块中有六个对象，第二个块中有五个对象。

通常，挑战会被垂直分割成四个或五个块。值得注意的是，颜色填充步骤应用于每个块，而不仅仅是那些可能包含多个对象的更宽的块。原因是较窄的块也可能包含多个对象（参见图5(b)），我们需要在每个块中定位所有对象并跟踪对象数量，以便进行后续的弧移除和其他步骤。

CFS通过检测对象进一步促进了分割。