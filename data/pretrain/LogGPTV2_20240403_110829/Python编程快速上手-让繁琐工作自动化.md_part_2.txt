多的数字线索。
仅仅因为数独使用了数字，并不意味着必须精通数学才能求出答案。编程也是
这样。就像解决数独问题一样，编程需要将一个问题分解为单个的、详细的步骤。
类似地，在调试程序时（即寻找和修复错误），你会耐心地观察程序在做什么，找
前 言
出缺陷的原因。像所有技能一样，编程越多，你就掌握得越好。
图1 一个新的数独问题（左边）及其答案（右边）。尽管使用了数字，
数独并不需要太多数学知识
编程是创造性活动
编程是一项创造性任务，有点类似于用乐高积木构建一个城堡。你从基本的想
法开始，希望城堡看起来像怎样，并盘点可用的积木。然后开始构建。在你完成构
建程序后，可以让代码变得更美观，就像对你的城堡那样。
编程与其他创造性活动的不同之处在于，在编程时，你需要的所有原材料都在
计算机中，你不需要购买额外的画布、颜料、胶片、纱线、乐高积木或电子器件。
在程序写好后，很容易将它在线共享给整个世界。尽管在编程时你会犯错，这项活
动仍然很有乐趣。
本书简介
本书的第一部分介绍了基本 Python 编程概念，第二部分介绍了一些不同的任
务，你可以让计算机自动完成它们。第二部分的每一章都有一些项目程序，供你学
习。下面简单介绍一下每章的内容。
第一部分：Python编程基础
“第 1 章：Python 基础”介绍了表达式、Python 指令的最基本类型，以及如何
使用Python交互式环境来尝试运行代码。
“第 2 章：控制流”解释了如何让程序决定执行哪些指令，以便代码能够智能
地响应不同的情况。
“第3章：函数”介绍了如何定义自己的函数，以便将代码组织成可管理的部分。
“第4章：列表”介绍了列表数据类型，解释了如何组织数据。
“第 5 章：字典和结构化数据”介绍了字典数据类型，展示了更强大的数据组
织方法。
前 言
“第6章：字符串操作”介绍了处理文本数据（在Python中称为字符串）。
第二部分：自动化任务
“第7章：模式匹配与正则表达式”介绍了Python如何用正则表达式处理字符
串，以及查找文本模式。
“第 8 章：读写文件”解释了程序如何读取文本文件的内容，并将信息保存到
硬盘的文件中。
“第 9 章：组织文件”展示了 Python 如何用比手工操作快得多的速度，复制、
移动、重命名和删除大量的文件，也解释了压缩和解压缩文件。
“第10章：调试”展示了如何使用Python的缺陷查找和缺陷修复工具。
“第 11 章：从Web抓取信息”展示了如何编程来自动下载网页，解析它们，获
取信息。这称为从Web抓取信息。
“第 12 章：处理 Excel 电子表格”介绍了编程处理 Excel 电子表格，这样你就
不必去阅读它们。如果你必须分析成百上千的文档，这是很有帮助的。
“第13章：处理PDF和Word文档”介绍了编程读取Word和PDF文档。
“第14章：处理CSV文件和JSON数据”解释了如何编程操作CSV和JSON文件。
“第15章：保持时间、计划任务和启动程序”解释了Python程序如何处理时间
和日期，如何安排计算机在特定时间执行任务。这一章也展示了Python程序如何启
动非Python程序。
“第16章：发送电子邮件和短信”解释了如何编程来发送电子邮件和短信。
“第17章：操作图像”解释了如何编程来操作JPG或PNG这样的图像。
“第18章：用GUI自动化控制键盘和鼠标”解释了如何编程控制鼠标和键盘，
自动化鼠标点击和击键。
下载和安装 Python
可以从http://python.org/downloads/免费下载针对Windows、OS X和Ubuntu的
Python版本。如果你从该网站的下载页面下载了最新的版本，本书中的所有程序应
该都能工作。
注意 请确保下载Python 3的版本（诸如3.4.0）。本书中的程序将运行在Python 3上，
有一部分程序在Python 2上也许不能正常运行。
你需要在下载页面上找到针对64位或32位计算机以及特定操作系统的Python
安装程序，所以先要弄清楚你需要哪个安装程序。如果你的计算机是 2007年或以
后购买的，很有可能是 64 位的系统。否则，可能是 32 位的系统，但下面是确认
前 言
的方法：
 在 Windows 上。选择 StartControlPanelSystem。检查系统类型是 64 位或
32位。
 在 OS X 上，进入 Apple 菜单，选择 About This MacMoreInfoSystemReport
Hardware，然后查看Processor Name字段。如果是Intel Core Solo或Intel Core Duo，
机器是32位的。如果是其他（包括Intel Core 2 Duo），机器是64位的。
 在Ubuntu Linux上，打开终端窗口，运行命令uname -m。结果是i686表示是
32位，x86_64表示是64位。
在Windows上，下载Python安装程序（文件扩展名是.msi），并双击它。按照
安装程序显示在屏幕上的指令来安装Python，步骤如下。
1．选择Install for All Users，然后点击Next。
2．通过点击Next安装到C:\Python34文件夹。
3．再次点击Next，跳过定制Python的部分。
在OS X上，下载适合你的OS X版本的.dmg文件，并双击它。按照安装程序
显示在屏幕上的指令来安装Python，步骤如下。
1．当DMG包在一个新窗口中打开时，双击Python.mpkg文件。你可能必须输
入管理员口令。
2．点击Continue，跳过欢迎部分，并点击Agree，接受许可证。
3．选择HD Macintosh（或者你的硬盘的名字），并点击Install。
如果使用的是Ubuntu，可以从终端窗口安装Python，步骤如下。
1．打开终端窗口。
2．输入sudo apt-get install python3。
3．输入sudo apt-get install idle3。
4．输入sudo apt-get install python3-pip。
启动 IDLE
Python 解释器是运行 Python 程序的软件，而交互式开发环境（IDLE）是输入
程序的地方，就像一个字处理软件。现在让我们启动IDLE。
 在Windows7或更新的版本上，点击屏幕左下角的开始图标，在搜索框中输入
IDLE，并选择IDLE（Python GUI）。
 Windows XP上，点击开始按钮，然后选择ProgramsPython 3.4IDLE（Python
GUI）。
 在OS X上，打开Finder窗口，点击Applications，点击Python 3.4，然后点击
IDLE的图标。
 在Ubuntu 上，选择ApplicationsAccessoriesTerminal，然后输入idle3（也许你也
前 言
可以点击屏幕顶部的Applications，选择Programming，然后点击IDLE 3）。
交互式环境
无论你使用什么操作系统，初次出现的 IDLE 窗口应该基本上是空的，除了类
似下面这样的文本：
Python 3.4.0 (v3.4.0:04f714765c13, Mar 16 2014, 19:25:23) [MSC v.1600 64
bit (AMD64)] on win32Type "copyright", "credits" or "license()" for more
information.
>>>
这个窗口称为交互式环境。这是让你向计算机输入指令的程序，很像OS X上
的终端窗口，或Windows上的命令行提示符。Python的交互式环境让你输入指令，供
Python解释器软件来执行。计算机读入你输入的指令，并立即执行它们。
例如，在交互式环境的>>>提示符后输入以下指令：
>>> print('Hello world!')
在输入该行并按下回车键后，交互式环境将显示以下内容作为响应：
>>> print('Hello world!')
Hello world!
如何寻求帮助
独自解决编程问题可能比你想的要容易。如果你不相信，就让我们故意产生一
个错误：在交互式环境中输入'42' + 3。现在你不需要知道这条指令是什么意思，但
结果看起来应该像这样：
>>> '42' + 3
 Traceback (most recent call last):
File "", line 1, in 
'42' + 3
 TypeError: Can't convert 'int' object to str implicitly
> >>
这里出现了错误信息，因为Python不理解你的指令。错误信息的traceback部
分显示了 Python 遇到困难的特定指令和行号。如果你不知道怎样处理特定的错误
信息，就在线查找那条错误信息。在你喜欢的搜索引擎上输入“TypeError: Can't convert
'int' object to str implicitly”（包括引号），你就会看到许多的链接，解释这条错误信
息的含义，以及什么原因导致这条错误，如图2所示。
你常常会发现，别人也遇到了同样的问题，而其他乐于助人的人已经回答了这
个问题。没有人知道编程的所有方面，所以所有软件开发者的工作，都是每天在寻
找技术问题的答案。
前 言
图2 错误信息的Google搜索结果可能非常有用
聪明地提出编程问题
如果不能在线查找到答案，请尝试在 Stack Overlow（http://stackoverflow.com/）或
“learnprogramming”subreddit（http://reddit.com/r/learnprogramming/）这样的论坛上提
问。但要记住，用聪明的方式提出编程问题，这有助于别人来帮助你。确保阅读这
些网站的FAQ（常见问题），了解正确的提问方式。
在提出编程问题时，要记住以下几点。
 说明你打算做什么，而不只是你做了什么。这让帮助你的人知道你是否走错了路。
 明确指出发生错误的地方。它是在程序每次启动时发生，还是在你做了某些动
作之后？
 将完整的错误信息和你的代码复制粘贴到 http://pastebin.com/或 http://gist.
github.com/。
这些网站让你很容易在网上与他人共享大量的代码，而不会丢失任何文本格
式。然后你可以将贴出的代码的 URL 放在电子邮件或论坛帖子中。例如，这
里是我贴出的一些代码片段：http://pastebin.com/SzP2DbFx/和https://gist.github.
com/ asweigart/6912168/。
 解释你为了解决这个问题已经尝试了哪些方法。这会告诉别人你已经做了一些
工作来弄清楚状况。
前 言
 列出你使用的Python版本（Python 2解释器和Python3解释器之间有一些重要
的区别）。而且，要说明你使用的操作系统和版本。
 如果错误在你更改了代码之后出现，准确说明你改了什么。
 说明你是否在每次运行该程序时都能重现该错误，或者它只是在特定的操作执
行之后才出现。如果是这样，解释是哪些操作。
也要遵守良好的在线礼节。例如，不要全用大写提问，或者对试图帮助你的人
提出无理的要求。
小结
对于大多数人，他们的计算机只是设备，而不是工具。但通过学习如何编程，
你就能利用现代社会中最强大的工具，并且你会一直感到快乐。编程不是脑外科手
术，业余人士是完全可以尝试或犯错的。
我喜欢帮助人们探索 Python。我在自己的博客上编写编程指南（http://
inventwithpython.com/blog/），你可以发邮件向我提问（PI:EMAIL）。
本书将从零编程知识开始，但你的问题可能超出本书的范围。记住如何有效地
提问，知道如何寻找答案，这对你的编程之旅是无价的工具。
让我们开始吧！
前 言
目 录
第一部分 Python 编程基础
第1章 Python基础 ..................................... 3 2.2 比较操作符 ................................. 19
1.1 在交互式环境中输入表达式 ....... 3 2.3 布尔操作符 ................................. 20
1.2 整型、浮点型和字符串数据类型 ... 6 2.3.1 二元布尔操作符 .................20
1.3 字符串连接和复制 ........................ 6 2.3.2 not操作符 ...........................21
1.4 在变量中保存值 ............................ 7 2.4 混合布尔和比较操作符 ............. 21
1.4.1 赋值语句 ............................... 7 2.5 控制流的元素 ............................. 22
1.4.2 变量名 ................................... 9 2.5.1 条件 .....................................22
1.5 第一个程序 .................................... 9 2.5.2 代码块 .................................22
1.6 程序剖析 ...................................... 11 2.6 程序执行 ...................................... 23
1.6.1 注释 ..................................... 11 2.7 控制流语句 ................................. 23
1.6.2 print()函数 ........................... 11 2.7.1 if语句 ..................................23
1.6.3 input()函数 .......................... 11 2.7.2 else语句 ..............................24
1.6.4 打印用户的名字 ................. 12 2.7.3 elif语句 ...............................25
1.6.5 len()函数 ............................. 12 2.7.4 while循环语句 ...................30
1.6.6 str()、int()和float()函数 ..... 13 2.7.5 恼人的循环 .........................31
1.7 小结 ............................................... 15 2.7.6 break语句 ...........................33
1.8 习题 ............................................... 15 2.7.7 continue语句 .......................34
第2章 控制流 ............................................. 17 2.7.8 for循环和range()函数 .......37
2.1 布尔值 .......................................... 18 2.7.9 等价的while循环...............39
目 录
2.7.10 range()的开始、停止和 4.1.5 用下标改变列表中的值 .....62
步长参数 ........................... 39 4.1.6 列表连接和列表复制 .........62
2.8 导入模块 ...................................... 40 4.1.7 用del语句从列表中
from import语句 ............................. 41 删除值 .................................63
2.9 用sys.exit()提前结束程序 ......... 41 4.2 使用列表 ...................................... 63
2.10 小结 ............................................. 41 4.2.1 列表用于循环 .....................64
2.11 习题 ............................................. 41 4.2.2 in和not in操作符 ..............65
第3章 函数 ................................................. 43 4.2.3 多重赋值技巧 .....................66
3.1 def语句和参数 ............................ 44 4.3 增强的赋值操作 ......................... 66
3.2 返回值和return语句 .................. 45 4.4 方法 .............................................. 67
3.3 None值 ......................................... 46 4.4.1 用index()方法在列表中
3.4 关键字参数和print() .................. 47 查找值 .................................67
3.5 局部和全局作用域 ...................... 48 4.4.2 用append()和insert()方法在
3.5.1 局部变量不能在全局作用 列表中添加值 .....................68
域内使用 ............................. 48 4.4.3 用remove()方法从列表中
3.5.2 局部作用域不能使用其他 删除值 .................................69
局部作用域内的变量 ......... 49 4.4.4 用sort()方法将列表中的值
3.5.3 全局变量可以在局部作用 排序 .....................................69
域中读取 ............................. 49 4.5 例子程序：神奇8球和列表 .... 70