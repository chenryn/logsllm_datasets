extension protocols. The communication cost of today’s most
n )=
mκ + 2mn bits [ALSZ13], [KK13]. The implementation
of [ALSZ13] is able to compute one million OTs per second.
(cid:1) OTm
1
Random OT. Random OT is a special-purpose OT functional-
ity, tailored for more efﬁcient secure computation. In contrast
to the standard OT functionality, in a 1-out-of-N random OT,
(cid:1) R-OT, the sender inputs no messages to the OT
denoted(cid:0)N
in the OT which decreases the communication to C((cid:0)2
(cid:1) R-
protocol, but receives the messages as a random output of
the protocol itself, while the receiver still inputs its selection
string to choose one. This allows to remove the last message
1
1
OTm
n )= mκ bits [ALSZ13], [KK13].
D. Yao’s Garbled Circuits
Yao’s garbled circuits protocol [Yao86] allows two parties
to securely evaluate any function, represented as a Boolean
circuit. One party, the circuit garbler, assigns symmetric keys
corresponding to 0 and 1 to the wires of the Boolean circuit.
The garbler then garbles the circuit by encrypting the keys
of the output wires of each gate using the keys of the gate’s
input wires. These encryptions form the garbled tables of the
circuit and are transferred to the evaluator, together with the
keys that correspond to both parties’ input wires to the circuit.
The evaluator then iteratively decrypts the correct output keys
of the gates using the corresponding input keys and obtains the
output of the circuit using a mapping, provided by the garbler.
Several optimizations for Yao’s garbled circuits have been
proposed, most notably: point-and-permute [MNPS04], free-
XOR [KS08], ﬁxed-key AES garbling [BHKR13], and half-
gates [ZRE15]. Overall, the garbler has to send 2κ bits to the
evaluator per AND gate, which can be done in the setup phase
if the function is known. In the online phase, the evaluator
locally decrypts the garbled table and computes the output in
a constant number of communication rounds.
E. Goldreich-Micali-Wigderson
The GMW protocol [GMW87] for secure computation also
represents a function as a Boolean circuit and secret shares
the values on the wires between the parties using an XOR-
based secret-sharing scheme. XOR gates can be evaluated for
free locally by XORing the shares while AND gates require
one interaction step between the parties using a multiplication
triple. A multiplication triple (MT) is a set of shares of the
form (c0 ⊕ c1) = (a0 ⊕ a1) ∧ (b0 ⊕ b1), where Pi holds
the shares labeled with i, for i ∈ {0, 1}. MTs can be pre-
1 at the cost of 2κ bits of communi-
cation [ALSZ13] and are used in the online phase to evaluate
AND gates at the cost of 4 bits communication. In §III-E
we show how to pre-compute MTs with less communication
(cid:1) R-OT2
computed using(cid:0)2
(cid:1) OT extension of [KK13]. For details
overhead using the (cid:0)N
1
on the GMW protocol please refer to [DSZ15].
1
F. Size and Depth of Boolean Circuits
For our later evaluation in §VI-A, we bound the multiplica-
tive size (the number of AND gates) and depth (the highest
number of ANDs from any input to any output) of a Boolean
circuit. For many functionalities, a low multiplicative size
and a low multiplicative depth are two mutually exclusive
goals. Hence, we ﬁrst outline the case for Boolean circuits
with δ input bits and σ = 1 output bit, since this allows us to
set tighter upper bounds, and then examine the case for σ > 1.
Boolean Circuits with One Output Bit. It was shown
in [TP14] that any functionality with δ ≤ 5 input bits can be
realized by a Boolean circuit with at most δ−1 AND gates. For
functions with δ > 5 inputs, a bound on the maximum number
of AND gates is still unknown but, according to [TP14],
“no speciﬁc δ-variable function has yet been proven to have
multiplicative complexity larger than δ − 1 for any δ”. We
bound the number of AND gates in a Boolean circuit C
with δ inputs by S(C) ≤ δ − 1. In [BB94] it was shown
that every Boolean circuit of multiplicative size n has an
equivalent Boolean circuit of multiplicative depth O(log n) and
size O(nα) for arbitrary α > 1. We bound the multiplicative
depth of a circuit C with δ inputs by D(C) ≤ log2(δ).
Boolean Circuits with Multiple Output Bits. Finding a
size- or depth-optimal Boolean circuit for functionalities with
σ > 1 outputs is a hard problem for a larger number of
inputs δ [BP12] and determining a minimal upper bound is
a complex task out of scope of this paper. A more tractable
approach to ﬁnd a possible upper bound is to build optimal
Boolean circuits for each output bit separately. In this paper,
we take this approach and assume that a Boolean circuit C with
δ input and σ output bits has at most size S(C) ≤ σ(δ − 1) if
optimized for size and D(C) ≤ log2 δ if optimized for depth.
In order to evaluate a function using our LUT protocols,
we pre-compute the LUTs using OT. However, using the
III. MORE EFFICIENT(cid:0)N
(cid:1) OT extension protocol of [IKNP03], [ALSZ13]
(cid:1) OT extension protocol of [KK13]. Although
(cid:1) OT extension protocol of [IKNP03], [ALSZ13]. In
the [KK13] OT extension protocol is very communication-
efﬁcient, it incurs a signiﬁcant computation overhead: N sym-
metric operations compared to 2 log2 N symmetric operations
to pre-compute the LUTs would result in a higher commu-
nication overhead than evaluating traditional Boolean circuits.
Therefore, for improved communication efﬁciency, we make
standard (cid:0)2
use of the (cid:0)N
by the(cid:0)2
(cid:1) OT EXTENSION
this paper, we take the OT extension protocol of [KK13] as
a starting point for improving communication and introduce
1
1
1
1
4
1
1
1
(cid:1) OT proto-
In this section, we give an overview of the (cid:0)N
optimization mechanisms to effectively reduce both, its com-
putation and communication overhead.
col (§III-A), outline how to more efﬁciently instantiate the
underlying error correcting code (§III-B) and sample random
choice bits of the receiver to reduce the communication
overhead (§III-C). Next, we present our optimizations of
the underlying symmetric cryptographic primitives to reduce
the computation overhead (§III-D). Finally, we show how
to optimize the evaluation of AND gates and reduce the
communication overhead in the setup phase of the GMW
protocol (§III-E). We call our resulting protocol that combines
our proposed optimizations for more efﬁcient evaluation of
AND gates N-MT. We give a full description of the(cid:0)N
In the(cid:0)2
receiver’s selection bits. The main observation of the(cid:0)N
(cid:1) OT
(cid:1) OT extension protocol of [IKNP03], the parties
(cid:1) OT
use multiple base-OTs to obliviously transfer shares of the
extension protocol of [KK13] in Prot. 1.
A. Protocol Description
protocol of [KK13] was that this approach can be generalized
to have both parties share a ρ-bit codeword from a code Γρ
with codewords of Hamming distance κ. These codewords
encode the receiver’s selection strings and constitute the main
component of the communication workload of the OT exten-
sion protocol.
For N = 2, a repetition code can be used, which has 2
For 2  2κ, a linear error-correcting code achieves the
best performance. In particular, when N = poly(κ),
the
(cid:1) OT extension protocol
invocations decreases asymptotically from O(κ log N ) to O(κ)
(cid:1) OTlog2 N
B. Our Size-Optimized Codes
of [KK13] for N > 2 are due to efﬁcient instantiations of the
underlying codes. For 2 < N ≤ 2κ, [KK13] uses a Walsh-
Hadamard code, which has codewords of size ρ = 2κ = 256
bits to achieve a Hamming distance of κ = 128 between
codewords. However, for N = 2i, with 2 ≤ i ≤ 8, the Walsh-
Hadamard code is not size-optimal with regard to the codeword
size ρ. Hence, we propose to use more size-efﬁcient codes
in order to further decrease the communication. We base our
code choices on the list of efﬁcient codes in [SS06] and give
the codeword sizes for N = 2i for 1 ≤ i ≤ 12 in Tab. I.
In particular, for N = 4 we use a parity check code, for
N ∈ {8, 16, 32, 64, 128, 256}, we use a Simplex code, for N =
512, we use a Reed-Muller code, for N ∈ {1,024, 2,048},
we use a narrow-sense BCH-code, and for N = 4,096, we
use the concatenation of a Denniston code and a Simplex
code (see [SS06] for more details). The OT communication
1
1
1
1
1
1
1
1
1
1
PROTOCOL 1 ((cid:0)N
(cid:1) OT extension protocol [KK13]):
1
•
•
•
•
1)
2)
3)
4)
5)
6)
7)
1
1
i , k1
(cid:1) OTρ
j ) of n-bit strings.
Oracles and cryptographic primitives: An ideal(cid:0)2
Common Input: Symmetric security parameter κ; code Γρ =
(γ1, ..., γN ) with ρ-bit codewords.
Input of PS: m tuples (x1
j , ..., xN
Input of PR: m selection integers r = (r1, . . . , rm) with rj ∈
[N ].
κ prim-
itive, a pseudo-random generator G : {0, 1}κ → {0, 1}m and a
correlation-robust function H : [m] × {0, 1}ρ → {0, 1}n.
PS initializes a random vector s = (s1, . . . , sρ) ∈R {0, 1}κ and
PR chooses ρ pairs of seeds (k0
(cid:1) OTρ
i ) ∈R {0, 1}κ.
The parties invoke (cid:0)2
κ, where PS acts as the receiver with
input s and PR acts as the sender with inputs (k0
i ) for every
1 ≤ i ≤ ρ.
PR forms two m × ρ bit matrices T = [t1| . . . |tρ] with ti =
i ) (where its i-th column is ti and its j-th row is tj) and
G(k0
C = [c1| . . . |cm], (where its i-th column is ci and its j-th row is
cj) with cj = γrj for 1 ≤ i ≤ ρ and 1 ≤ j ≤ m.
PR computes and sends ui = ti ⊕ G(k1
i ) ⊕ ci to PS for every
1 ≤ i ≤ ρ.
For every 1 ≤ i ≤ ρ, PS deﬁnes qi = (si · ui) ⊕ G(ksi
i ). (Note
that qi = (si · ci) ⊕ ti.)
Let Q = [q1| . . . |q(cid:96)] denote the m × (cid:96) bit matrix where its i-th
column is qi. Let qj denote the j-th row of the matrix Q. (Note
that qi = (si · ci) ⊕ ti and qj = (cj ∧ s) ⊕ tj.)
For p ∈ [N ], PS computes yp
j ⊕ H(j, qj ⊕ γp) and sends
j = xp
j ) for every 1 ≤ p ≤ N and 1 ≤ j ≤ m.
(y1
For 1 ≤ j ≤ m, PR computes xj = y
j ⊕ H(j, tj ).
Output: PR outputs (x1, . . . , xm); PS has no output.
j , . . . , yN
i , k1
rj
improvements achieved by adopting our reduced codeword
sizes are the largest for N = 4 (reduced by 64 bits) and
decrease with N growing towards 256 (reduced by 1 bit). Note
that using size-optimized codes does not increase computation
or reduce security over using the Walsh-Hadamard codes.
16
240
256
1024
264
-
32
248
256
2048
268
-
64
252
256
4096
270
-
N
Our Size-Efﬁcient Codes [bits]
[KK13] Codes [bits]
N
Our Size-Efﬁcient Codes [bits]
[KK13] Codes [bits]
2
128
128
128
254
256
4
192
256
256
255
256
8
224
256
512
256
-
1
1
TABLE I.
CODES [SS06] COMPARED TO THOSE USED IN [KK13].
COMMUNICATION FOR(cid:0)N
(cid:1) OT WITH SIZE-OPTIMAL
(cid:1) OT protocol invocations throughout this work,
(cid:1) OT
In all (cid:0)N
from receiver to sender can be reduced by having the(cid:0)N
the receiver samples and inputs a random selection string
r ∈R [1...N ]. However, we observe that the communication
C. Random Choice Bits
protocol sample r randomly during the execution and output
it to the receiver. In order to randomly sample r, we transform
the code Γρ into a systematic form, similar to [FJJBT16].
In the systematic form, the input data is embedded into the
codeword, i.e., the integer s ∈ {0, 1}log2 N is a sub-string of
codeword cs. Assume that s is embedded in the ﬁrst log2 N
positions of each cs. We can now let the receiver compute the
choice bits rj in the j-th OT as rj = rj,1||...||rj,log2N with
i )j in Step 2 in Prot. 1. Consequently, we
ri = G(k0
can change Step 3 and Step 4 to avoid sending the uj values
for these positions. In particular, we have PR perform Step 3
only for log2 N < i ≤ ρ and PS compute in Step 4:
if 1 ≤ i ≤ log2 N
else.
(cid:26)G(ksi
(si · ui) ⊕ G(ksi