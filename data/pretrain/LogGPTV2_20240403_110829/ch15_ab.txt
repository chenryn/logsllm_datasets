 鉴于可靠性工程和隐私工程有着共同的目标，即确保用户信任（这一目标需要从大局出发考虑最坏的情况），因此两者都倾向于吸引具有相似心态和前景的人也就不足为奇了。.在这两个学科中，“看到破损的东西”的能力是一个好的工程师的一个关键方面。尽管他们有不同的机会（可用性与尊重），但优秀的隐私工程师和可靠性工程师都关注一个系统，看看它是如何崩溃的，而不是它是如何成功的。随着时间的推移，SRE 已经学到的许多经验教训也适用于隐私工程。
减少辛劳
  将 SRE 从简单的操作工作提升到适当的工程学科的一个关键要素是，它专注于减少花在辛劳上的时间。同样的目标也适用于隐私工程：框架和谨慎选择默认值是减少人类辛劳的两个机会。
自动化
  你可能不认为自动化（作为 SRE 的一个久经考验的核心概念）会立即以明显的方式应用于隐私工程。隐私相关的事情是法律法规和人类决定，这意味着他们不可能自动解决，对不对？实际上，自动化在隐私工程中是有帮助的。自动化通常需要编写脚本、程序或服务，以编程方式消除人类工作的某些方面。要将此模型应用于隐私，可以编写一个脚本或简单的程序来检查以确保审核设置匹配，而不是要求人工执行手动验证。一个简单的示例：检查只有一组专门指定的存储桶是可读的，而所有其他存储桶都不可读。更复杂的示例：如果策略确定两个数据集的访问权限不应交叉联接，则强制它们之间的相互排斥。
共享体系结构的默认行为
 自动化使人类的工作变得更加简单，减少了人类所需的工作量，并腾出了人类用于其他任务的时间。通过构建默认“做正确的事情”的系统，我们可以有效地“自动化”许多隐私改进。换句话说，“使正确容易”。具体来说，我们可以实施处理大量决策的系统默认值，从而大大减少构建产品的工程师需要有意识地做出决策的频率，而不当选择可能导致不良的隐私结果。健全的隐私工程不应要求构建产品的开发人员反复面对同样的问题，并做出相同的决策，而应让他们提前列举并考虑这些决策点。如果对于给定的情况，有适用于 80% 情况的正确或安全选择，则将该选择作为系统默认。这样做可以减轻许多人 80% 的决策负担。例如，共享库、架构或数据访问层可能是考虑实现默认值的好地方。因此不再需要花费人力时间处理本来可以提前做出的决定。相反，你可以把你的时间花在那些实际上很困难的决策上。通过集中宝贵的时间，你可以更深入地挖掘难题，找到更好（和更可重复）的解决方案。
请注意，隐私工程师面临的创造性挑战之一是共同的选择和最安全的选择不同。可能并不总是能够采用最安全的选择作为默认值，这意味着下游开发人员需要仔细确保其使用符合其意图。确保这些案例有详细的记录，以便其他开发人员知道他们的存在。
框架框架
  可靠性和隐私问题涉及多个产品和服务。当遇到新系统时，负责可靠性和/或隐私的工程师必须找到了解各种系统的方法，或者通过标准化系统的方法，这样他们就不必每次都从头开始重新理解它们。框架以高效且可扩展的方式在可靠性和隐私最佳实践中打造。将这两个方面纳入系统设计也意味着你无需投入精力和资源来改造产品以满足可靠性和隐私标准。
那么，如何将框架的概念实际应用于组织的隐私？以下示例可以让你开始思考潜在的方法：
如何处理访问控制应该是系统最重要的属性之一。建立处理 ACL 的框架将确保所有（新）系统能够轻松、一致地应用你推荐的最佳实践。
删除用户数据是隐私工程的另一个规范问题。拥有一个一致、有组织的体系来在整个系统中系统的删除内容（包括缓存、联合到第三方站点等）有助于确保不会将数据孤立化。当涉及到框架时，这个行业还有一些工作要做。仅举一个具体的例子，目前似乎很少有初创公司使用基于角色的访问控制（RBAC），这是良好隐私工程的基本和被广泛接受的原则。也称为范围访问：（对人员和生产角色）缩小授予的访问范围不仅有助于保护隐私，还减少了安全漏洞或生产事故的潜在影响。这个概念有时在“不要把一切都以 root 身份运行”的常见系统管理建议中被提及，但这里更进一步，结构也更有条理。调查显示，业内熟知的任何类型的标准框架（例如，在开发新产品或服务时，在最低特权原则下运行）往往也非常罕见。  
高效、慎重地解决问题
 随着 SRE 的发展，已经解决了许多导致效率低下、脱节的故障排除和问题解决的难题。隐私工程可以学习 SRE 文化的这些方面，而不必经历相同的（有时是痛苦的）旅程。以下是此领域的 SRE 最佳实践如何直接应用于隐私工程的几个示例。
一次解决挑战一次解决挑战
解决问题时，请避免其他人需要再次重复你的工作来达到同样结果。请广泛交流调查和解决问题时所做的：你所做的决定、做出这些决定的原因、决策结果，以及何时以及为什么其他人也应该采用此解决方案。请务必记录法规上已解决的范围。例如，你解决美国的隐私问题时，若扩展到欧盟时，该解决方案可能不适用。
例如，在隐私空间中，你可以执行以下操作：
构建一个系统，为用户同意屏幕创建必要的审核跟踪，然后重用它。
构建一个差异化私有实验系统，然后重用它。类似的系统示例，请参阅 Rappor 隐私报告系统的代码。
通过用户体验的研究来确定描述功能隐私含义的明确和简洁的方法。然后，推动使用该语言在所有产品与这种类型的功能。（请注意，此处的辅助功能以有趣的方式相交。此标准化的良好示例包括 Android 和 iOS 上的应用程序权限提示。
查找和解决根本原因查找和解决根本原因
  仅仅修复症状意味着同样的问题将来可能会再次出现。退后一步，看看大局，并投资于额外的调查水平，以确定问题的实际原因，并从源头上修复它。如参与故障报告有关的讨论，见 SRE 书，第15章：故障报告文化：从失败中学习和事后行动项目：计划工作和制定计划。切记：将责任归咎于人的调查会适得其反。作为替代，请修复问题背后的技术或流程因素。
在隐私空间中，可以通过以下方式应用此原则：
如果 Bug 导致数据泄露，不要只是修复 Bug。有时，可能还要修改文档、安全措施或测试；有时可能会发现库或框架中某些内容导致很难做正确的事情，因此需要修改。
如果你发现存储目录上的 ACL 过于宽泛，请不要只是修复该特定 ACL。而要查找设置目录的工具，并将其默认 ACL 更改为更窄。在项目设计阶段的早期，创建令人难忘的方法来强调其他职务方面的隐私问题。例如，你可能有共享流的设计，这些设计一致地罗列用户界面元素相关的“WWW”（谁共享 Who、共享什么 What、在哪里共享 Where）信息。最终，“隐私 WWW”将成为口头禅。