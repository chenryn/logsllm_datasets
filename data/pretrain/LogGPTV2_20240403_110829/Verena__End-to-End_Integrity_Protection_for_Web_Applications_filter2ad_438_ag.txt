### XIII. Conclusion

Verena is the first web application platform that ensures end-to-end integrity for both data and query results in a webpage, even when the web server has been compromised. In Verena, the user's browser can verify the integrity of a webpage by validating the results of the database queries used to populate the page content. Our evaluation results demonstrate that Verena can support real-world applications with minimal overhead. By bridging the gap between research on protecting the integrity of database systems and its practical application in web applications, one of the most common use cases for databases, Verena represents a significant step forward.

### References

1. "Biotronik Home Monitoring," https://www.biotronik.com/wps/wcm/connect/en_us_web/biotronik/sub_top/healthcareprofessionals/products/home_monitoring/.
2. "Boston Scientific Remote Patient Monitoring," http://www.bostonscientific.com/en-US/products/remote-patient-monitoring.html.
3. "Keybase," https://keybase.io/.
4. "Medtronic CareLink Network for Cardiac Device Patients," http://www.medtronic.com/for-healthcare-professionals/products-therapies/cardiac-rhythm/patient-management-carelink/medtronic-carelink-network-for-cardiac-device-patients/index.htm.
5. "MongoDB," https://www.mongodb.org/.
6. "Native Client," https://developer.chrome.com/native-client.
7. "Node.js," https://nodejs.org/.
8. "OpenSSL," https://www.openssl.org/.
9. "PhantomJS," http://phantomjs.org/.
10. "RocksDB," http://rocksdb.org/.
11. "Stanford JavaScript Crypto Library (SJCL)," https://crypto.stanford.edu/sjcl/.

...

### Appendix: Background on Authenticated Data Structures

Verena leverages authenticated data structures (ADS) as its underlying integrity protection mechanism. While Verena is not tied to a specific ADS, our implementation uses one-dimensional red-black binary Merkle hash trees, which support projection and aggregation queries based on the tree-based technique described in [31].

#### Overview of Red-Black Binary Merkle Hash Trees

Consider a database table with two fields: a range field and an aggregation field. In SQL notation, a user might run a query like "SELECT sum(aggr_field) FROM table WHERE x ≤ range_field ≤ y".

**Figure 7** shows an example of such a tree, sorted by the range field. The red-black property is used to keep the tree balanced, but the node colors are not shown in the figure. The client, who owns the data stored in the tree, keeps the root hash of the Merkle hash tree, while the untrusted server maintains the entire tree.

- **Data Storage**: Data is stored in leaf nodes, each containing a key (range field value) and an aggregate value (data of the aggregation field). For leaf nodes, the aggregate value is the same as the data value. For internal nodes, the aggregate value is the result of aggregating the values of their children.
- **Query Processing**: When the client issues a query, the server responds with the requested sum and a proof of its correctness. The proof consists of:
  - **Merkle Paths**: For each edge of the interval, the server provides two nodes whose range fields include the edge, along with their Merkle hash paths to the root. The client verifies these paths against the stored root hash.
  - **Minimal Covering Set**: A set of nodes that cover the range of interest, along with their Merkle hash paths up to the root. The number of nodes in this set is logarithmic in the number of nodes in the tree.

The client then checks that the nodes cover the range entirely and verifies their hashes and Merkle paths against the root hash. If the verification is successful, the server provided the correct aggregate value. The client performs O(log n) work per value returned, where n is the number of nodes in the tree. Similar computations occur during insertions, updates, and deletions, with some additional details.

By using this approach, the server does not need to precompute aggregate values for each possible range. Instead, it transforms arbitrary ranges into a set of subranges, and the client aggregates the values. The maximum number of subranges is logarithmic, ensuring that the client's aggregation work remains minimal.

**Figure 7: Example Tree-Based ADS Supporting Aggregations**
- Node hashes and the red-black tree balancing mechanism are not shown for clarity.

This design allows Verena to efficiently and securely verify the integrity of data and query results, providing robust protection against potential attacks.