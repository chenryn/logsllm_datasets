### Authorization Grant Request

The authorization grant request, as detailed below, includes the following parameters:

- **grant_type**: This is a required parameter that specifies the format of the assertion, as recognized by the authorization server. The value must be `urn:ietf:params:oauth:grant-type:jwt-bearer`.

- **assertion**: This is a required parameter that carries the token. For example, in the case of the JWT authorization grant type, the `assertion` parameter will carry the base64url-encoded JWT. It must contain only a single JWT; if multiple JWTs are included, the authorization server will reject the grant request.

- **scope**: This is an optional parameter. Unlike in the authorization code and implicit grant types, the JWT grant type does not have a way to obtain the resource owner’s consent for a requested scope. In such cases, the authorization server will establish the resource owner’s consent via an out-of-band mechanism. If the authorization grant request includes a `scope` parameter, it should exactly match or be a subset of the out-of-band established scope.

**Note:** The OAuth authorization server will not issue a `refresh_token` under the JWT grant type. If the `access_token` expires, the OAuth client must either obtain a new JWT (if the JWT has expired) or use the same valid JWT to get a new `access_token`. The lifetime of the `access_token` should match the lifetime of the corresponding JWT.

### Applications of JWT Grant Type

The JWT authorization grant type has several applications. One common use case involves a web application where the end user logs in via OpenID Connect, and the web application needs to access an API on behalf of the logged-in user, which is secured with OAuth 2.0. Figure 12-3 illustrates the key interactions in this use case.

**Figure 12-3. JWT Grant Type: A Real-World Example**

The following steps outline the interactions illustrated in Figure 12-3:

1. **User Visits Web Application**: The end user visits the web application.
2. **Authentication via OpenID Connect**: The user is redirected to the OpenID Connect server for authentication. After successful authentication, the user is redirected back to the web application with an authorization code.
3. **Exchange Authorization Code for Tokens**: The web application exchanges the authorization code for an ID token and an access token from the OpenID Connect server. The ID token is a JWT signed by the OpenID Connect server.
4. **Obtain OAuth Access Token**: The web application then talks to the OAuth authorization server, trusted by the API, and uses the JWT grant type to exchange the JWT from step 3 for an OAuth access token. The OAuth authorization server validates the JWT to ensure it is signed by a trusted identity provider, in this case, the OpenID Connect identity provider.
5. **Invoke API with Access Token**: The web application invokes the API using the access token obtained in step 4.
6. **Validate Access Token**: The application server hosting the API validates the access token by communicating with the OAuth authorization server that issued the token.

### JWT Client Authentication

The OAuth 2.0 core specification does not define a specific method for authenticating OAuth clients to the OAuth authorization server. Typically, HTTP Basic authentication with `client_id` and `client_secret` is used. However, RFC 7523 defines a method for authenticating OAuth clients using a JWT. JWT client authentication can be used with any OAuth grant type, providing flexibility in OAuth 2.0. Below is an example of a request to the OAuth authorization server using the authorization code grant type and JWT client authentication.

**Sample Request:**
```http
POST /token HTTP/1.1
Host: auth.bar.com
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&
code=n0esc3NRze7LTCu7iYzS6a5acc3f0ogp4&      
client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer&
client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.
eyJpc3Mi[...omitted for brevity...].
cC4hiUPo[...omitted for brevity...]
```

RFC 7523 introduces three additional parameters for OAuth client authentication:
- **client_assertion_type**: A required parameter that defines the format of the assertion. For JWT client authentication, this must be `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`.
- **client_assertion**: A required parameter that carries the token. For JWT client authentication, this parameter will carry the base64url-encoded JWT and must contain only a single JWT.
- **client_id**: An optional parameter. Ideally, the `client_id` should be present inside the `client_assertion`. If provided, it must match the `client_id` within the `client_assertion`.

### Applications of JWT Client Authentication

JWT client authentication is used to authenticate a client to an OAuth authorization server using a JWT, instead of HTTP Basic authentication with `client_id` and `client_secret`. This method is particularly useful in scenarios where sharing `client_id` and `client_secret` among multiple developers is risky.

**Example Scenario:**
Consider two companies, foo and bar. Company foo hosts a set of APIs, and company bar has developers who build applications against these APIs. To access the APIs, bar must register with foo to obtain a `client_id` and `client_secret`. Instead of sharing these credentials, bar can create a key pair (public and private keys), sign the public key with the company's certificate authority (CA), and distribute the key pair to its developers. Each developer signs the JWT with their private key, and the JWT carries the corresponding public key. The authorization server at foo verifies the JWT with the attached public key and checks if it is signed by bar's CA.

**Certificate Revocation:**
To handle certificate revocation, the authorization server maintains a Certificate Revocation List (CRL) for each `client_id`. When a certificate is revoked, the CRL is updated, and all access and refresh tokens issued against the revoked certificate are also revoked. The CRL API, hosted at the OAuth authorization server, supports this model and is secured with the OAuth 2.0 client credentials grant type.

### Parsing and Validating JWT

The OAuth authorization server must parse and validate the JWT in both the JWT grant type and client authentication. The criteria for token validation include:

- **iss (Issuer)**: The JWT must include the `iss` parameter, which represents the issuer of the JWT. This is a case-sensitive string.
- **sub (Subject)**: The JWT must include the `sub` parameter, which identifies the entity for which the JWT is issued. For client authentication, this must be the `client_id`.
- **aud (Audience)**: The JWT must include the `aud` parameter, which indicates the intended recipient(s) of the JWT. The recipient must check if the JWT is issued for its use.
- **exp (Expiration Time)**: The JWT must include the `exp` parameter, which specifies the expiration time of the token. The recipient must reject the token if it has expired.
- **nbf (Not Before)**: The JWT may include the `nbf` parameter, which specifies the time before which the token should not be accepted.
- **iat (Issued At)**: The JWT may include the `iat` parameter, which indicates the time at which the token was issued.
- **Signature**: The JWT must be digitally signed or carry a Message Authentication Code (MAC) defined by its issuer.

### Summary

- **Identity Federation**: Identity federation involves propagating user identities across boundaries, which can be between different enterprises or identity management systems within the same enterprise.
- **OAuth 2.0 Profiles for Federation**: Two OAuth 2.0 profiles, SAML 2.0 grant type and JWT grant type, focus on building federation scenarios for API security.
- **SAML Profile for OAuth 2.0 (RFC 7522)**: Extends OAuth 2.0 by introducing a new authorization grant type and a way to authenticate OAuth 2.0 clients based on SAML assertions.
- **JWT Profile for OAuth 2.0 (RFC 7523)**: Extends OAuth 2.0 by introducing a new authorization grant type and a way to authenticate OAuth 2.0 clients based on JWTs.

### User-Managed Access (UMA)

OAuth 2.0 introduced an authorization framework for access delegation, allowing users to delegate access to third-party applications without sharing credentials. User-Managed Access (UMA) extends this model, enabling users to delegate access not only to third-party applications but also to other users using those applications.

- **UMA 2.0**: The latest version of UMA, discussed in this chapter, is UMA 2.0. For more information on UMA evolution, refer to Appendix D: UMA Evolution.

### Use Cases

**Example Scenario:**
Suppose you have multiple bank accounts with Chase Bank, Bank of America, and Wells Fargo. You hire a financial manager, Peter, who manages your bank accounts through a Personal Financial Management (PFM) application. UMA allows you to define policies at the authorization server, enabling Peter to access your bank accounts based on these policies, without your direct involvement in each access request.