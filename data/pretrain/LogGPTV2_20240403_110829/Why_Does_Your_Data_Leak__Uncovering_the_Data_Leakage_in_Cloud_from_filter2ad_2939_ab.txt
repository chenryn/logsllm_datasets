next we have to infer the types of the keys. For some cloud
services (e.g., Azure Storage), app keys and root keys are in
different formats (as shown in Table II), and we can easily
tell whether a key of our interest is a root key. However, for
some other cloud services (e.g., AWS), app keys and root
keys have the same format. To deal with this problem, a
straightforward approach is to send a request to the server
by using the key to access some root user exclusive data. If
we are able to retrieve these data, then it implies there is a
data leakage vulnerability. However, such an approach would
violate the ethics of accessing private-sensitive data.
1300
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
Cloud
Service
AWS
Azure
Firebase
APIs
Deﬁnition
1*
2*
3
4
5
6
7
8
9
10
TransferUtility: TransferObserver downloadUpload(String, String, File)
AmazonS3Client: void S3objectAccess(String, String, ...)
CognitoCredentialsProvider: void (String,String,String,String,...)
BasicAWSCredentials: void (String,String)
MobileServiceClient: void (String,Context)
MobileServiceClient: void (String,String,Context)
NotiﬁcationHub: void (String,String,Context)
CloudStorageAccount: CloudStorageAccount parse(String)
FirebaseOptions: void (String,String,String,String,String,String,String)
FirebaseOptions: void (String,String,String,String,String,String)
Indexes of The String
Parameters of Our Interest
0
0
1
0,1
0
0,1
1
0
0,1,2,5
0,1,2,5
Table III: Targeted mBaaS Cloud APIs of Our Interest. In total, there are 32 APIs. Due to limited space, we use API 1* and 2*
to actually represent two sets of APIs. The complete list of the APIs of these two sets is presented in Appendix in Table IX.
APKs
Cloud API
Identification
String Value
Analysis
Vulnerability 
Identification
SDK APIs
Vulnerabilities
Figure 6: An Overview of Our LeakScope.
ĐŽŵ ;ƉĂĐŬĂŐĞͿ
ĂƉƉŶĂŵĞ ;ƉĂĐŬĂŐĞͿ
/ŵĂŐĞƐ,ĞůƉĞƌ ;ĐůĂƐƐͿ
>ŝƐƚĞŶĞƌƐ ;ƉĂĐŬĂŐĞͿ
ĂůůďĂĐŬ ;ĐůĂƐƐͿ
KŶŽǁŶůŽĂĚ/ŵĂŐĞƐhƉĚĂƚĞ>ŝƐƚĞŶĞƌ ;ĐůĂƐƐͿ
hƚŝůƐ ;ƉĂĐŬĂŐĞͿ
hƚŝůƐ ;ĐůĂƐƐͿ
Figure 7: The Hierarchical Structure of the Package Tree of
The Sample Code in Figure 2.
Fortunately, we have another observation: we notice that
the server typically will return different response messages
when accessing nonexistent data in the cloud with a root key
versus a regular user key. As such, to verify whether a key is
a root key, we will send a request to the cloud with the key
to retrieve some nonexistent data. If the key is an app key,
the return message is usually in the form of “permission
denied”, and if the key is a root key, the return message is
usually something like “data not found”. In either case,
no real data is leaked, but we have inferred the types of
the keys. We can also use the same approach to verify the
authorization misconﬁgurations.
V. DESIGN AND IMPLEMENTATION
We have built a tool called LeakScope to automatically
detect data leakage vulnerabilities when given a mobile app.
An overview of LeakScope is presented in Figure 6. It consists
of three key components: Cloud API Identiﬁcation (§V-A),
String Value Analysis (§V-B), and Vulnerability Identiﬁcation
(§V-C). In this section, we describe how we design and
implement (§V-D) these components.
A. Cloud API Identiﬁcation
It
is important
to identify the APIs used by an app,
especially those listed in Table III. As discussed in §IV-B, we
need to design an obfuscation-resilient approach to identify the
cloud APIs. Fortunately, we notice that there are at least two
invariants that are preserved regardless of the obfuscations for
a given function (or method).
the layer) of
• The ﬁrst invariant is the hierarchical structure (or the
shape,
the types and package trees.
Note that each class, method, parameter, and vari-
the type of arg5 is
able all have types
com.appname.Listeners.Callback at
line 15
in Figure 2). While the names of the types can be obfus-
cated (except the name of system types), the hierarchical
structure of the types will not change. For instance, as
shown in Figure 7, type Callback is stored at the fourth
layer starting from the package com.
(e.g.,
• The second invariant
is the caller-callee relation in
instance, method downloadImage
a method. For
will call functions such as StringBuilder.append
and Util.isNetworkAvailable. We can build
each callee’s signature recursively, and then merge
them to build the signature for
the caller, namely
downloadImage in this example.
Therefore, if we can encode these two invariants and add
them together to build a signature for a function (including
APIs in linked non-system libraries), then we can just search
for these signatures in the bytecode of mobile apps to ﬁnd the
cloud APIs we need. Inspired by LibScout [23], in which a
Merkle hash tree is used to build a library signature (for 3rd
party library detection in Android apps), we use the hash of
the encoded invariants (i.e., the hierarchical structure of the
types and package trees, and the caller-callee relation) as the
function/API signature for the API detection. Note that we
cannot directly use LibScout as it focuses on the detection
of third-party libraries. In addition, LibScout only generates
coarse-grained signatures for each class, whereas we have to
generate ﬁne-grained signatures for each function.
Generating Signatures for Each Function. More speciﬁcally,
as shown in Algorithm 1, for a given function, we will generate
a signature (GENFUNSIG) by using the MD5 hash of the
encoded type string of (i) the function’s belonging class (i.e.,
home class) (line 5-6), (ii) its arguments (line 7-8), (iii) its
local variables (line 9-10), (iv) its return value (line 11-12),
and (v) recursively all of its callees (line 13-18). If a callee is
an Android system function (not obfuscated), then we directly
1301
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Function Signature Generation
if fi ∈ Fs then
else
for tv ∈ GETLOCALVARTYPE(f0 ) do
fBuf ← fBuf ∪ TYPEENCODING(t0, tp, Cs )
fBuf ← fBuf ∪ TYPEENCODING(t0, tv , Cs )
L ← L∪ name(fi, argType(fi), retType(fi))
tr ← GETRETURNTYPE(f0 )
fBuf ← fBuf ∪ TYPEENCODING(t0, tr , Cs )
for fi ∈ GETCALLEE(f0 ) do
L ← ∅
fBuf← ∅
t0 ← GETHOMECLASSTYPE(f0 )
fBuf ← fBuf ∪ TYPEENCODING(t0, t0, Cs )
for tp ∈ GETPARAMETERTYPE(f0 ) do
1: Input: f0: target function; Cs: system classes; Fs: system functions
2: procedure GENFUNSIG(f0, Cs, Fs)
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: Input: ch: home class; ct: target class; Cs: system classes;
21: procedure TYPEENCODING(ch, ct, Cs)
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
rp ← NORMALIZEDRELATIVEPATH(ch, ct )
tBuf ← tBuf ∪ rp
cp ← GETSUPERCLASS(ct )
tBuf ← tBuf ∪ TYPEENCODING(ch, cp, Cs )
for ci ∈ GETINTERFACES(ct ) do
fBuf ← fBuf ∪ SORT(L)
return MD5 (fBuf)
L ← ∅
tBuf ← ∅
if ct ∈ Cs then
L ← L∪ TYPEENCODING(ch, ci, Cs )
L ← L∪ GENFUNSIG(fi, Cs, Fs )
tBuf ← tBuf ∪ SORT(L)
return tBuf
tBuf ← tBuf ∪ name(ct)
else
add the name of this function including the type name of its
arguments and return value to our type string (line 14-15).
To perform the string encoding (TYPEENCODING) of the
hierarchical structure of the types and package trees (line 20-
34), basically we take the home class (ch) to which the type
belongs, the target class (ct), and system classes (Cs) as input
to encode the target type ct. Note that in Java bytecode, all of
the types are deﬁned as classes. We directly return the string
name of the type if ct is a system class (line 24-25) as its name
cannot be obfuscated. Otherwise, we take the encoded string
that combines the normalized relative path between ct and ch
(line 27-28), recursively the encoded string of the superclass
of ct (line 29-30), and the interfaces of ct (line 31-33), as the
ﬁnal type string.
Note that to uniquely encode the type of a given class, we
would like to use as much reliable information as possible.
Again, we cannot use any of the class names (except the system
classes) and we must normalize them. Since a class typically
has a super class, we would like to include the type encoding
of its superclass, recursively. Meanwhile, a class could have
deﬁned a number of interface functions [19]. Note that an
interface is a collection of empty functions (no implementation
body). Any class implementing an interface will inherit these
functions. That is why eventually our type encoding algorithm
considers the name and path normalization, superclass, and
class interfaces. We do not include other information in a
class, such as its ﬁelds and methods, in the signatures since
they can be removed by tools such as Proguard [15].
When performing the normalization, we replace any
‘X’, similar
non-system deﬁned names with the symbol
to LibScout
In addition, our algorithm takes a
normalized relative path into our type string. For instance,
when processing the type encoding of the ﬁrst argument
[23].
7,
to
class
Figure
speciﬁcally,
home
function downloadImage, whose home
according
class ImagesHelper, we
of
is
ImagesHelper, we take a normalized relative path to
encode the type com.appname.Listeners.Callback.
starting
More
reach
from the
com.appname.Listeners.Callback
by
../Listeners/Callback.
all
non-system names into ‘X’, we get a normalized path
with string “../X/X”. Meanwhile,
superclass of
com.appname.Listeners.Callback
is
actually
java.lang.Object, which is a system class (cannot be
obfuscated). Therefore, eventually, for the type encoding of
arg5, we get the string “../X/X#java.lang.Object”
where # denotes string concatenation. Similarly, we get a type
string for its second argument, local variables, and callees,
respectively. Together, we have created a unique hash for
function downloadImage.
normalizing
After
the
Identifying the Cloud API with the Signatures. With
our GENFUNSIG algorithm, we generate signatures for all
functions, including the cloud APIs (initially acquired from
the SDK libraries) for a given app. We then search for the
signatures of the cloud APIs in the mobile apps; if a signature
matches, we identify the corresponding cloud API of our
interest.
B. String Value Analysis
Having identiﬁed the cloud APIs of our interest, we are
then able to identify where each API is called and further
pinpoint the parameters that contain the authentication keys
in the mobile app. However, we are not be able to directly
observe their values since we use static analysis. Therefore,
we have to develop a targeted string value set analysis
(VSA) [24] to reveal the possible values of the keys. Note
that VSA is a technique that analyzes the possible values for
registers and memory addresses at the x86 binary code level.
We cannot directly use it to solve our problem, and instead
we have to customize it to reveal the string values in the
context of mobile app bytecode. At a high level, our string
value analysis needs to perform the following inter-procedural
backward slicing and string value computation statically.
Inter-procedural Backward Slicing. Program slicing [37] is
a widely used program analysis technique and has been used
to solve many important security problems such as software
vulnerability diagnosis (e.g., [38]) and automatic patch gener-
ation (e.g., [35], [44]). In our string value analysis, we have to
ﬁrst identify the variables and instructions that are related to
the computation of the ﬁnal strings of our interest by applying
backward slicing of the Java bytecode.
More speciﬁcally,
the ﬁrst step of our analysis is to
for
build an intro-procedural control ﬂow graph (CFG)
each method/function, where nodes represent
the contigu-
ously executed bytecode instructions and edges represent
the control ﬂow transfers within the function. Then start-
interest, e.g., v0 of API
ing from a variable of our
CloudStorageAccount.parse, we iterate the instruc-
tions in the CFG backwards: if there are any variables that
contribute to the computation of v0, we add them to our data
dependence graph (DDG) and meanwhile push the involved
instructions and variables into a string computation stack,
which is an internal last-in-ﬁrst-out data structure maintained
by LeakScope that is used to track the order of the execution of
1302
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
the string operations that contribute to the ﬁnal string values; if
there is any function call, we perform a context-sensitive inter-
procedural analysis and recursively analyze the callees. We
keep iterating the CFG until we reach a ﬁxed point, namely
when our DDG cannot be expanded further. In our running
example in Figure 2, all of the statements that are highlighted
in red are involved in the computation for the string value v0
used at line 31.
String Value Computation. With the tracked DDG and string
computation stack, next we need to compute the values of
the ﬁnal strings of our interest. Starting from the top of the
string computation stack, we pop the involved variables and
instructions based on the CFG and our DDG, and we forward
execute the involved string operations based on the instruction
semantics until the stack is empty or the string value is fully
determined.
Forward execution is not real execution and is instead based
on the API summaries of the string operations. For instance, if
the involved instruction is a string append API, we perform
the string append operation; if it is a getString, we know it
is used to read a string from an xml ﬁle, and we then perform
the read operation of the speciﬁed string from the xml ﬁle and
return its result. Note that strings are system deﬁned classes,
and the corresponding APIs are not obfuscated.
Back to our
running example in Figure 2,
the last
pushed variables on the stack are StorageAccountKey
and StorageAccountName. Then, starting from there with
our tracked DDG, we perform a forward string analysis to
compute the value of this.StorageAccountName and
this.StorageAccountKey at lines 9 and 12 by executing