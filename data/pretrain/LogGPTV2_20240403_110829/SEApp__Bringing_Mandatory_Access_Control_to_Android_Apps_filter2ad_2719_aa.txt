# SEApp: Bringing Mandatory Access Control to Android Apps

## Authors
- Matthew Rossi, Dario Facchinetti, and Enrico Bacis, Università degli Studi di Bergamo
- Marco Rosa, SAP Security Research
- Stefano Paraboschi, Università degli Studi di Bergamo

## Abstract
Mandatory Access Control (MAC) has significantly enhanced the security of modern operating systems. A notable example is Android, which has progressively integrated SELinux since its introduction in 2013. However, these benefits have primarily focused on protecting system components from app behavior, with no control offered to app developers for implementing MAC. Our solution, SEApp, addresses this limitation by allowing developers to define custom MAC policies for their apps, supporting internal compartmentalization of app components.

This approach naturally extends the existing security mechanisms in Android while ensuring:
1. The security of system components remains intact.
2. The solution is user-friendly for developers.
3. Performance impact is minimal.

Our proposal is supported by an open-source implementation.

## 1. Introduction
The evolution of security in operating systems has enabled the mitigation of numerous threats from a diverse range of adversaries. This is particularly crucial for mobile operating systems, given their widespread use and the sensitive information they handle.

Both Android and iOS have made significant investments in advanced security techniques, resulting in substantial improvements in user protection [58]. The value of protected resources is evident in markets like Zerodium [72], where payouts for successful exploits on mobile operating systems are among the highest. For instance, at the time of writing, US$2.5M and US$2M are paid for zero-click solutions that can subvert the security of Android and iOS, respectively.

A unique challenge in mobile operating systems is balancing the need to protect highly sensitive information with the requirement for users to install many applications, often from unknown developers. Both iOS and Android provide preliminary screening of apps before they are made available or installed, but this does not offer strong guarantees. Internal security mechanisms are necessary to constrain apps within the boundaries set by the device owner at installation time.

In Android, the security architecture has evolved significantly, incorporating various measures [44, 58]. SELinux, which implements MAC, plays a key role. It uses a system-level policy to define allowed operations based on security labels. Compared to Discretionary Access Control (DAC), MAC provides stronger guarantees against unwanted behaviors. Since its introduction in Android 4.3, SELinux has become more complex, isolating different services and resources to prevent a single vulnerability from compromising the entire system.

However, regular apps are assigned a single domain, `untrusted_app`, limiting the benefits of MAC. Since Android 9, categories have been introduced to increase app isolation, but our proposal, SEApp, goes further by enabling developers to apply MAC to the internal structure of their apps, providing robust protection against other apps and internal vulnerabilities.

## 2. Android Security for Apps
Mobile operating systems must restrict the ability of apps to manipulate the execution environment. Apps may contain functions designed to gain system privileges or capture valuable information from other apps. In contrast to desktop operating systems, there is greater reliance on apps to access resources and services, necessitating stricter controls.

The basic principle for managing app threats is the sandbox, a restricted environment where anomalous actions are limited to authorized resources. This aligns with the "least privilege" security principle. The sandbox is constructed using three access control mechanisms:
1. **Android Permissions** [14, 44, 45]: Restrict access to sensitive data and services.
2. **Discretionary Access Control (DAC)** [38]: Restricts access based on user and group identity.
3. **Mandatory Access Control (MAC)** [63]: Dictates allowed actions based on a system-level policy.

Android permissions are listed in the `AndroidManifest.xml` file, and not all permissions may be granted. DAC assigns each app a unique UNIX user ID (UID) and a dedicated directory, isolating apps from each other and the system. However, UID sandboxing has limitations, such as processes running as root bypassing these restrictions. Despite its shortcomings, UID sandboxing remains the primary mechanism for separating apps.

MAC, implemented via SEAndroid, part of the Linux Security Module (LSM) framework, enforces a strict policy. Initially, SELinux was used to protect system components, but its usage has expanded to include isolating untrusted web content, restricting ioctl system calls, and supporting multi-user separation and app sandboxing. Since Android 9, categories enforce app separation at both DAC and MAC levels.

## 3. Motivation
SELinux and MAC have been crucial in creating a secure design and robust app sandbox. However, the current design limits MAC benefits to system components, with no option for app developers to control MAC. Our solution, SEApp, overcomes this by allowing developers to specify new SELinux types and associated permissions.

### 3.1 Use Cases
We envision several scenarios where SEApp can be beneficial:

#### 3.1.1 Fine-granularity in Access to Files
Android apps can store data in multiple ways, with the default being Internal Storage. Developers may want to restrict visibility of sensitive data to specific internal components. SEApp allows the introduction of dedicated SELinux types, enabling finer-grained control over data access. For example, confidential files can be made accessible only to `:core_logic` processes.

#### 3.1.2 Fine-granularity in Access to Services
Developers often include third-party code, such as ad delivery libraries, which they do not fully trust. SEApp allows the definition of a separate MAC domain for such libraries, ensuring they only have the necessary privileges. For instance, an ad library process can be granted network access but denied location service access, even if the app has the `ACCESS_FINE_LOCATION` permission.

#### 3.1.3 Isolation of Vulnerability-prone Components
Apps may need to execute potentially dangerous code, such as rendering complex JavaScript in WebView. Android's `isolatedprocess` offers high protection but imposes restrictions. SEApp provides an easier way to isolate such components by assigning a domain to the process and configuring required permissions, without the performance overhead of `isolatedprocess`.

## Conclusion
SEApp extends the security mechanisms in Android by allowing developers to define custom MAC policies, enhancing the internal compartmentalization of app components. This approach maintains system security, is user-friendly for developers, and minimizes performance impact. The open-source implementation supports these goals, making it a valuable addition to the Android security landscape.