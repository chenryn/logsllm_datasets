3: end if
For example, the ﬁrst two rules alert the presence
of services attempting to create or delete Accumulator
objects belonging to a “Blue ID S10 Controller”.
The third rule reports any service attempting to write
to a non-writable property, such as Accumulator’s
Object Identifier.
Experiments Our system ﬁlled the abstract rules with
the information coming from Feature Lookup crafting
hundreds of speciﬁcation rules. To improve efﬁciency
we arrange the speciﬁcation rules in an order that avoids
meaningless checks (e.g., we do not want to check a
BACnet property if we already know that the BACnet
object it belongs to is not allowed). For every captured
BACnet message, the system checks if the BACnet ser-
vice is allowed; then, if involved BACnet objects can be
used, created or deleted; then, if involved BACnet prop-
erties are allowed and writable. Finally, the system ex-
amines properties’ actual values. Only a small set of
speciﬁcation rules are of this last type due to the limited
number of EDE ﬁles that operators provided us with.
As outlined in §3.3, we tested our approach against
more than two months of real trafﬁc. Over the two
months of capturing, our system triggered 237 unique
alerts; 226 at the University of Twente and 11 at LBNL.
800  25th USENIX Security Symposium 
USENIX Association
10
Table 3: Detection results
Abstract Rule
Type Rule
Speciﬁcation Rule
Forbidden object
Forbidden property
Value Rule
Forbidden value
Method Rule
Forbidden service
Forbidden object creation
Forbidden object deletion
Forbidden property writing
# Alerts
2
234
0
0
0
0
1
(a) Unexpected property ReadProperty Request
Figure 11: Unexpected object ReadProperty Request
Figure 12: Unexpected property read operation
(b) ReadProperty Response conﬁrmation of the alert
The two results differ because of the different views
we achieved over the two infrastructures (as already de-
scribed, at LBNL we could monitor only a subset of the
building automation system and thus a subset of the traf-
ﬁc). Table 3 shows the three abstract rules, the corre-
sponding speciﬁcation rules and whether or not a rule
raised an alert.
We did not ﬁnd any evidence of malicious activities
over the time span of the captures. However, our ap-
proach still provided interesting insights. At the Univer-
sity of Twente, the system raised alerts on two BACSs
using forbidden objects. Both cases involved a “pro-
prietary” object never described within the PICS. Ac-
cording to the available documentation, the two devices
(two Siemens controllers PXC128-U) should not include
anything that was not deﬁned within the BACnet stan-
dard. Nevertheless, a device probed the two controllers
(Figure 11) and received back correct BACnet responses
about an unknown object. A meeting with the operators
revealed that this object is vendor-deﬁned and gathers in-
formation on parameters of the BACSs recognizable and
understandable by vendors only. Operators conﬁrmed
that vendors have access to the building automation sys-
tem to monitor their devices, and use of an unknown
BACnet object happens even though the documentation
does not mention this possibility because of its internal
nature. However, operators did not know that involved
BACSs provide speciﬁc functionalities and attackers can
potentially exploit such circumstances.
Detection on BACnet properties provided the highest
number of alerts (all alerts at LBNL were of this kind).
Our system generated several alerts on ReadProperty
and ReadPropertyMultiple messages attempting to
retrieve non-existing properties.
As a matter of
fact, these properties were not deﬁned by the PICSs
and, for most cases, we could eventually conﬁrm the
non-existence of these properties by observing some
BACnet errors carried in the responses to those read re-
quests (Figure 12).
A BACS asking for unimplemented properties is not
necessarily a violation of the specs. In fact, all PICSs
deﬁne what a BACS implements without deﬁning what
other BACSs may ask for. A situation in which a BACS
sends back a BACnet-error response to warn about a
non-existing property (Figure 12b) is in line with the
specs and should be of no harm for the system. However,
the reason to alert on situations of this kind is twofold.
First, this situation may be of interest from a security per-
spective. Despite being handled by the BACnet protocol,
these circumstances may hide a “network discovery” sce-
nario where an attacker tries to gain knowledge of the in-
frastructure by randomly probing BACSs. As described
in §3.2, snooping is one plausible attack in building au-
tomation systems. Secondly, the same situation shows a
common side-effect of the joint use of different BACnet
software solutions. As servers and workstations do not
usually know in advance which BACSs they will con-
nect to, predeﬁned BACnet discovery messages exist in
order to gather general information of building automa-
tion components. These messages do not consider which
BACnet properties are deﬁned for each device and sim-
ply use large sets of them. This consequently generates
several error responses on the network.
To dig deeper into property-related issues, we ex-
tended the “unknown property” speciﬁcation rule to also
check if properties enforced by PICSs were always im-
plemented. Therefore, we created a further instance of
“Type” rule checking all BACnet error messages to de-
tect missing properties that were supposed to be used by
the BACSs. The system revealed several messages re-
porting “unknown-property” errors about properties de-
clared to be part of devices’ BACnet implementations.
USENIX Association  
25th USENIX Security Symposium  801
11
identiﬁed either an actual mismatch between device
documentation and implementation (e.g., unimple-
mented BACnet Properties) or an operator mistake
(e.g., the unexpected writing operation). As already
discussed, these issues can cause signiﬁcant gaps in
the knowledge operators have about their infrastruc-
tures and may potentially lead to dangerous miscon-
ﬁgurations of the involved systems. The meeting
with the operators at the University of Twente con-
ﬁrmed that employed HMIs were not able to signal
any of the misconﬁgurations found or even notify
the users on generated BACnet errors. As a result,
the University of Twente asked to deploy our sys-
tem into the building automation system continu-
ously and let operators receive notiﬁcations of the
generated alerts. So while our datasets did not in-
clude actual attacks, we were able to reliably detect
notable deviations from the speciﬁcations at zero
false-positives. This result is in line with the work
of Uppuluri et al. [62] showing that speciﬁcation-
based intrusion detection works towards optimal de-
tection rate while substantially decreasing the num-
ber of false positives compared to anomaly-based
detection.
• On the other hand, our approach does not necessar-
ily detect all possible attacks threatening the mon-
itored infrastructure. In fact, any attack operating
within the boundaries deﬁned by employed spec-
iﬁcations would not be caught by our IDS. How-
ever, our solution substantially narrows down what
a malicious user can do and covers most of the at-
tack scenarios deﬁned within the categories listed
in §3.2. Furthermore, our solution does not exclude
the use of other approaches such as pure anomaly-
based intrusion detection either improving the ob-
tained rule set or working in parallel.
Each one of the implemented phases effectively
achieved the deﬁned goals. Thanks to the numerous read
operations, System Discovery took just a few hours of
network snifﬁng to gather all the information needed to
describe the whole set of BACSs. With this information,
our approach was able to rapidly and automatically iden-
tify available sources of information and craft effective
speciﬁcation rules.
Feature Lookup focused just on structured documents
such as PICSs and EDE ﬁles. In some of the tests, we
further extended online research to documents such as
BACS user manuals. Our system was able to down-
load 10 manuals related to components deployed in the
monitored infrastructures. However, we decided to not
further employ manuals because an analysis showed
they were fullly overlappig with the information found
in the PICSs. Nevertheless, one way to improve our
Figure 13: Unexpected property write request
All these mismatches between implementation and spec-
iﬁcation are particularly relevant for what concerns inter-
operability. In fact, software solutions that deﬁne their
interactions with a BACS based on its public documen-
tation can incur into inconsistencies caused by incorrect
or lacking implementations.
Finally,
the system triggered an alert correspond-
ing to an unexpected write operation on a BACnet
property supposed to be readable only. A Priva con-
troller received a BACnet WriteProperty request on
the Exception schedule of an object Schedule (Fig-
ure 13). Despite what we knew from the related PICS,
the BACS sent back a SimpleACK message, acknowl-
edging the success of the operation (the actual writing
was conﬁrmed by later read operations). These kinds
of situations are especially dangerous due to the unpre-
dictability of their results. As no indication is provided
by the vendor, the write operation can either succeed or
fail, and may generate a response or not (even indepen-
dently from the actual modiﬁcation of the value within
the property). Meeting with the operators revealed that
this write operation was due to a human mistake during
the conﬁguration of the Priva controller. However, the
same situation could ﬁt the “process control subverting”
scenario described in §3.2.
8 Discussion
Performed experiments conﬁrm the feasibility of the ap-
proach within building automation systems and pave the
way for its application to different domains.
8.1 Analysis of the Results
By construction, our IDS is able to detect events that do
not match the speciﬁcations coming from retrieved doc-
umentation. This aspect leads to two considerations:
• On the one hand, an alert raised by the system does
not necessarily refer to a security-relevant event
as the related mismatches may not directly harm
the monitored devices. However, all ﬁndings re-
vealed network activities otherwise invisible to op-
erators. Over the two months of analysis, every alert
802  25th USENIX Security Symposium 
USENIX Association
12
speciﬁcation-mining approach is to enable handling het-
erogeneous documentation and, especially, unstructured
information. To this regard, we observe that Feature
Lookup should abstract from domain-speciﬁc parsing
scripts and generalize the process of mining and struc-
turing infrastructure features. Correctly selecting infor-
mation can take advantage of standard data mining and
natural language processing. Our work did not present a
general approach to this activity. However, works such
as [57, 15, 50] may fulﬁll this goal. With more general
techniques capable of extracting knowledge from het-
erogeneous documentation, the effort of deploying the
system completely converges on mapping retrieved in-
formation to the abstract rules. According to the mon-
itored infrastructures, operators should identify the re-
lated concepts of variable type, value and access method
and, eventually, let the system interpret data coming from
Feature Lookup and instantiate the speciﬁcation rules.
Even without such a general approach, our solution
drastically reduced the time needed to deploy intrusion
detection into a BACnet-based building automation sys-
tem. Obtaining the same set of speciﬁcation rules by
hand would have required substantial effort, making it
infeasible for larger infrastructures. Furthermore, the ob-
tained system comes with the intrinsic capability to up-
date according to the changes of the monitored infras-
tructure. In fact, whenever new BACSs are deployed, our
system transparently reads the new information over the
network and goes through the three steps all over again.
In the end, this solution makes the implemented system
directly applicable to any other BACnet infrastructure
with no further effort on conﬁguration or deployment.
The proposed approach works likewise for different
building automation technologies. As discussed, this
would mostly require a modiﬁcation of the mapping pro-
cess linking retrieved information and abstract rules but
would leave the core concept unchanged. Other build-
ing automation infrastructures such as KNX [32] and
LonWorks [11] also meet the requirements of availabil-
ity and linkability. These widely used protocols present
characteristics similar to the ones observed for BACnet.
Moreover, both KNX and LonWorks promote and sup-
port the use of documents describing protocol implemen-
tation details (although not as formal as BACnet PICS).
To show the generality of our approach beyond
building automation systems we outline how the same
speciﬁcation-mining technique applies to two different
domains of NCSs, namely ICS and in-vehicle networks.
Industrial Control Systems
8.2
ICS is a term generally used to indicate several types
of control systems (e.g., Supervisory Control And Data
Acquisition or “SCADA”) used in industrial production
for monitoring and controlling physical processes. ICSs
work over several domains such as energy, water treat-
ment, manufacturing, etc. and embrace a wide family of
technologies. Among them, Modbus [41], MMS [25],
IEC104 [12], and DNP3 [10] are some of the most used
protocols and standards deployed for industrial control.
Speciﬁcation-based intrusion detection for ICSs is not
new. Works such as [4] show the effectiveness of this
approach applied to electrical grids. However, applying
a set of speciﬁcation rules to a real deployment still re-
quires manually crafting all parameters on speciﬁc needs.
Again, our research can improve the use of speciﬁcation-
based intrusion detection by leveraging available infor-
mation of the deployments. For example, in the smart
grid scenario, we would focus on Programmable Logic
Controllers (PLCs) and Remote Terminal Units (RTUs),
as these play a main role in the infrastructure. We
would analyze variables handled by these controllers,
their types, values and access methods and then use the
abstract rules deﬁned in §7.
Regarding the assumption of §6, veriﬁed information
about the smart gird is available within conﬁguration
ﬁles that use the “Substation Conﬁguration Language”
(SCL). SCL ﬁles usually provide formal representations
of modeled data and communication services. The infor-
mation included in these ﬁles is linkable thanks to the in-
cluded detail descriptions of the involved infrastructures
(e.g., “Substation Conﬁguration Description” ﬁles). Be-
sides SCL ﬁles, operators usually store additional doc-
umentation describing physical and control processes as
in the building automation use case. An IDS can lever-
age this documentation to gather further information and
derive speciﬁcation rules.
The three steps of the approach remain unchanged.
System discovery will passively gather data about de-
vices communicating over the ICS network. According
to the verbosity of the involved protocols, an IDS will
eventually collect enough information to identify infras-
tructure components and start the Feature Lookup step.
Once information about PLCs and RTUs functioning is
retrieved, Rule Deﬁnition will use it to deﬁne the actual
speciﬁcation rules.
In-Vehicle Networks
8.3
Similar argumentation can be applied to communication
of Electronic Control Units (ECUs) over automotive bus
systems like the “Controller Area Network” (CAN) or
FlexRay found in all of today’s cars.
CAN is a network where connected ECUs communi-
cate by means of small messages with a payload of only
8 bytes. CAN uses content-based addressing where mes-
sages only carry a 11 (or 21) bit message identiﬁer, and
receiving ECUs will select messages relevant to them
USENIX Association  
25th USENIX Security Symposium  803
13
based on this message identiﬁer. Message identiﬁers
also serve as prioritization, as the employed CSMA/CR
medium access scheme will always grant priority to the
message with the lowest message identiﬁer avoiding col-
lisions on the bus. Transport layer protocols such as
ISO-TP allow for transfer of longer messages fragmented
into smaller network packets and more complex forms of
addressing crossing gateways connecting multiple CAN
segments.
In order to maintain and manage the assignment and
semantics of message identiﬁers, the design phase of an
automotive network involves setup of a so-called CAN-
Matrix that lists exactly which ECU is supposed to sent