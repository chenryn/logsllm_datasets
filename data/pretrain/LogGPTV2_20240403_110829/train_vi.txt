.ir ngid
numa group id (0 if none; since linux 3.13).
.tp
.ir pid
thread id (see
.br gettid (2)).
.tp
.ir ppid
pid of parent process.
.tp
.ir tracerpid
pid of process tracing this process (0 if not being traced).
.tp
.ir uid ", " gid
real, effective, saved set, and filesystem uids (gids).
.tp
.ir fdsize
number of file descriptor slots currently allocated.
.tp
.ir groups
supplementary group list.
.tp
.ir nstgid
thread group id (i.e., pid) in each of the pid namespaces of which
.i [pid]
is a member.
the leftmost entry shows the value with respect to the pid namespace
of the process that mounted this procfs (or the root namespace
if mounted by the kernel),
followed by the value in successively nested inner namespaces.
.\" commit e4bc33245124db69b74a6d853ac76c2976f472d5
(since linux 4.1.)
.tp
.ir nspid
thread id in each of the pid namespaces of which
.i [pid]
is a member.
the fields are ordered as for
.ir nstgid .
(since linux 4.1.)
.tp
.ir nspgid
process group id in each of the pid namespaces of which
.i [pid]
is a member.
the fields are ordered as for
.ir nstgid .
(since linux 4.1.)
.tp
.ir nssid
descendant namespace session id hierarchy
session id in each of the pid namespaces of which
.i [pid]
is a member.
the fields are ordered as for
.ir nstgid .
(since linux 4.1.)
.tp
.ir vmpeak
peak virtual memory size.
.tp
.ir vmsize
virtual memory size.
.tp
.ir vmlck
locked memory size (see
.br mlock (2)).
.tp
.ir vmpin
pinned memory size
.\" commit bc3e53f682d93df677dbd5006a404722b3adfe18
(since linux 3.2).
these are pages that can't be moved because something needs to
directly access physical memory.
.tp
.ir vmhwm
peak resident set size ("high water mark").
this value is inaccurate; see
.i /proc/[pid]/statm
above.
.tp
.ir vmrss
resident set size.
note that the value here is the sum of
.ir rssanon ,
.ir rssfile ,
and
.ir rssshmem .
this value is inaccurate; see
.i /proc/[pid]/statm
above.
.tp
.ir rssanon
size of resident anonymous memory.
.\" commit bf9683d6990589390b5178dafe8fd06808869293
(since linux 4.5).
this value is inaccurate; see
.i /proc/[pid]/statm
above.
.tp
.ir rssfile
size of resident file mappings.
.\" commit bf9683d6990589390b5178dafe8fd06808869293
(since linux 4.5).
this value is inaccurate; see
.i /proc/[pid]/statm
above.
.tp
.ir rssshmem
size of resident shared memory (includes system v shared memory,
mappings from
.br tmpfs (5),
and shared anonymous mappings).
.\" commit bf9683d6990589390b5178dafe8fd06808869293
(since linux 4.5).
.tp
.ir vmdata ", " vmstk ", " vmexe
size of data, stack, and text segments.
this value is inaccurate; see
.i /proc/[pid]/statm
above.
.tp
.ir vmlib
shared library code size.
.tp
.ir vmpte
page table entries size (since linux 2.6.10).
.tp
.ir vmpmd
.\" commit dc6c9a35b66b520cf67e05d8ca60ebecad3b0479
size of second-level page tables (added in linux 4.0; removed in linux 4.15).
.tp
.ir vmswap
.\" commit b084d4353ff99d824d3bc5a5c2c22c70b1fba722
swapped-out virtual memory size by anonymous private pages;
shmem swap usage is not included (since linux 2.6.34).
this value is inaccurate; see
.i /proc/[pid]/statm
above.
.tp
.ir hugetlbpages
size of hugetlb memory portions
.\" commit 5d317b2b6536592a9b51fe65faed43d65ca9158e
(since linux 4.4).
.tp
.ir coredumping
contains the value 1 if the process is currently dumping core,
and 0 if it is not
.\" commit c643401218be0f4ab3522e0c0a63016596d6e9ca
(since linux 4.15).
this information can be used by a monitoring process to avoid killing
a process that is currently dumping core,
which could result in a corrupted core dump file.
.tp
.ir threads
number of threads in process containing this thread.
.tp
.ir sigq
this field contains two slash-separated numbers that relate to
queued signals for the real user id of this process.
the first of these is the number of currently queued
signals for this real user id, and the second is the
resource limit on the number of queued signals for this process
(see the description of
.br rlimit_sigpending
in
.br getrlimit (2)).
.tp
.ir sigpnd ", " shdpnd
mask (expressed in hexadecimal)
of signals pending for thread and for process as a whole (see
.br pthreads (7)
and
.br signal (7)).
.tp
.ir sigblk ", " sigign ", " sigcgt
masks (expressed in hexadecimal)
indicating signals being blocked, ignored, and caught (see
.br signal (7)).
.tp
.ir capinh ", " capprm ", " capeff
masks (expressed in hexadecimal)
of capabilities enabled in inheritable, permitted, and effective sets
(see
.br capabilities (7)).
.tp
.ir capbnd
capability bounding set, expressed in hexadecimal
(since linux 2.6.26, see
.br capabilities (7)).
.tp
.ir capamb
ambient capability set, expressed in hexadecimal
(since linux 4.3, see
.br capabilities (7)).
.tp
.ir nonewprivs
.\" commit af884cd4a5ae62fcf5e321fecf0ec1014730353d
value of the
.i no_new_privs
bit
(since linux 4.10, see
.br prctl (2)).
.tp
.ir seccomp
.\" commit 2f4b3bf6b2318cfaa177ec5a802f4d8d6afbd816
seccomp mode of the process
(since linux 3.8, see
.br seccomp (2)).
0 means
.br seccomp_mode_disabled ;
1 means
.br seccomp_mode_strict ;
2 means
.br seccomp_mode_filter .
this field is provided only if the kernel was built with the
.br config_seccomp
kernel configuration option enabled.
.tp
.ir speculation_store_bypass
.\" commit fae1fa0fc6cca8beee3ab8ed71d54f9a78fa3f64
speculation flaw mitigation state
(since linux 4.17, see
.br prctl (2)).
.tp
.ir cpus_allowed
hexadecimal mask of cpus on which this process may run
(since linux 2.6.24, see
.br cpuset (7)).
.tp
.ir cpus_allowed_list
same as previous, but in "list format"
(since linux 2.6.26, see
.br cpuset (7)).
.tp
.ir mems_allowed
mask of memory nodes allowed to this process
(since linux 2.6.24, see
.br cpuset (7)).
.tp
.ir mems_allowed_list
same as previous, but in "list format"
(since linux 2.6.26, see
.br cpuset (7)).
.tp
.ir voluntary_ctxt_switches ", " nonvoluntary_ctxt_switches
number of voluntary and involuntary context switches (since linux 2.6.23).
.re
.tp
.ir /proc/[pid]/syscall " (since linux 2.6.27)"
.\" commit ebcb67341fee34061430f3367f2e507e52ee051b
this file exposes the system call number and argument registers for the
system call currently being executed by the process,
followed by the values of the stack pointer and program counter registers.
the values of all six argument registers are exposed,
although most system calls use fewer registers.
.ip
if the process is blocked, but not in a system call,
then the file displays \-1 in place of the system call number,
followed by just the values of the stack pointer and program counter.
if process is not blocked, then the file contains just the string "running".
.ip
this file is present only if the kernel was configured with
.br config_have_arch_tracehook .
.ip
permission to access this file is governed by a ptrace access mode
.b ptrace_mode_attach_fscreds
check; see
.br ptrace (2).
.tp
.ir /proc/[pid]/task " (since linux 2.6.0)"
.\" precisely: linux 2.6.0-test6
this is a directory that contains one subdirectory
for each thread in the process.
the name of each subdirectory is the numerical thread id
.ri ( [tid] )
of the thread (see
.br gettid (2)).
.ip
within each of these subdirectories, there is a set of
files with the same names and contents as under the
.i /proc/[pid]
directories.
for attributes that are shared by all threads, the contents for
each of the files under the
.i task/[tid]
subdirectories will be the same as in the corresponding
file in the parent
.i /proc/[pid]
directory
(e.g., in a multithreaded process, all of the
.i task/[tid]/cwd
files will have the same value as the
.i /proc/[pid]/cwd
file in the parent directory, since all of the threads in a process
share a working directory).
for attributes that are distinct for each thread,
the corresponding files under
.i task/[tid]
may have different values (e.g., various fields in each of the
.i task/[tid]/status
files may be different for each thread),
.\" in particular: "children" :/
or they might not exist in
.i /proc/[pid]
at all.
.ip
.\" the following was still true as at kernel 2.6.13
in a multithreaded process, the contents of the
.i /proc/[pid]/task
directory are not available if the main thread has already terminated
(typically by calling
.br pthread_exit (3)).
.tp
.ir /proc/[pid]/task/[tid]/children " (since linux 3.5)"
.\" commit 818411616baf46ceba0cff6f05af3a9b294734f7
a space-separated list of child tasks of this task.
each child task is represented by its tid.
.ip
.\" see comments in get_children_pid() in fs/proc/array.c
this option is intended for use by the checkpoint-restore (criu) system,
and reliably provides a list of children only if all of the child processes
are stopped or frozen.
it does not work properly if children of the target task exit while
the file is being read!
exiting children may cause non-exiting children to be omitted from the list.
this makes this interface even more unreliable than classic pid-based
approaches if the inspected task and its children aren't frozen,
and most code should probably not use this interface.
.ip
until linux 4.2, the presence of this file was governed by the
.b config_checkpoint_restore
kernel configuration option.
since linux 4.2,
.\" commit 2e13ba54a2682eea24918b87ad3edf70c2cf085b
it is governed by the
.b config_proc_children
option.
.tp
.ir /proc/[pid]/timers " (since linux 3.10)"
.\" commit 5ed67f05f66c41e39880a6d61358438a25f9fee5
.\" commit 48f6a7a511ef8823fdff39afee0320092d43a8a0
a list of the posix timers for this process.
each timer is listed with a line that starts with the string "id:".
for example:
.ip
.in +4n
.ex
id: 1
signal: 60/00007fff86e452a8
notify: signal/pid.2634
clockid: 0
id: 0
signal: 60/00007fff86e452a8
notify: signal/pid.2634
clockid: 1
.ee
.in
.ip
the lines shown for each timer have the following meanings:
.rs
.tp
.i id
the id for this timer.
this is not the same as the timer id returned by
.br timer_create (2);
rather, it is the same kernel-internal id that is available via the
.i si_timerid
field of the
.ir siginfo_t
structure (see
.br sigaction (2)).
.tp
.i signal
this is the signal number that this timer uses to deliver notifications
followed by a slash, and then the
.i sigev_value
value supplied to the signal handler.
valid only for timers that notify via a signal.
.tp
.i notify
the part before the slash specifies the mechanism
that this timer uses to deliver notifications,
and is one of "thread", "signal", or "none".
immediately following the slash is either the string "tid" for timers
with
.b sigev_thread_id
notification, or "pid" for timers that notify by other mechanisms.
following the "." is the pid of the process
(or the kernel thread id of the thread)  that will be delivered
a signal if the timer delivers notifications via a signal.
.tp
.i clockid
this field identifies the clock that the timer uses for measuring time.
for most clocks, this is a number that matches one of the user-space
.br clock_*
constants exposed via
.ir  .
.b clock_process_cputime_id
timers display with a value of \-6
in this field.
.b clock_thread_cputime_id
timers display with a value of \-2
in this field.
.re
.ip
this file is available only when the kernel was configured with
.br config_checkpoint_restore .
.tp
.ir /proc/[pid]/timerslack_ns " (since linux 4.6)"
.\" commit da8b44d5a9f8bf26da637b7336508ca534d6b319
.\" commit 5de23d435e88996b1efe0e2cebe242074ce67c9e
this file exposes the process's "current" timer slack value,
expressed in nanoseconds.
the file is writable,
allowing the process's timer slack value to be changed.
writing 0 to this file resets the "current" timer slack to the
"default" timer slack value.
for further details, see the discussion of
.br pr_set_timerslack
in
.br prctl (2).
.ip
initially,
permission to access this file was governed by a ptrace access mode
.b ptrace_mode_attach_fscreds
check (see
.br ptrace (2)).
however, this was subsequently deemed too strict a requirement
(and had the side effect that requiring a process to have the
.b cap_sys_ptrace
capability would also allow it to view and change any process's memory).
therefore, since linux 4.9,
.\" commit 7abbaf94049914f074306d960b0f968ffe52e59f
only the (weaker)
.b cap_sys_nice
capability is required to access this file.
.tp
.ir /proc/[pid]/uid_map " (since linux 3.5)"
see
.br user_namespaces (7).
.tp
.ir /proc/[pid]/wchan " (since linux 2.6.0)"
the symbolic name corresponding to the location
in the kernel where the process is sleeping.
.ip
permission to access this file is governed by a ptrace access mode
.b ptrace_mode_read_fscreds
check; see
.br ptrace (2).
.tp
.ir /proc/[tid]
there  is a numerical subdirectory for each running thread
that is not a thread group leader
(i.e., a thread whose thread id is not the same as its process id);
the subdirectory is named by the thread id.
each one of these subdirectories contains files and subdirectories
exposing information about the thread with the thread id
.ir tid .
the contents of these directories are the same as the corresponding
.ir /proc/[pid]/task/[tid]
directories.
.ip
the
.i /proc/[tid]
subdirectories are
.i not
visible when iterating through
.i /proc
with
.br getdents (2)
(and thus are
.i not
visible when one uses
.br ls (1)
to view the contents of
.ir /proc ).
however, the pathnames of these directories are visible to
(i.e., usable as arguments in)
system calls that operate on pathnames.
.tp
.i /proc/apm
advanced power management version and battery information when
.b config_apm
is defined at kernel compilation time.
.tp
.i /proc/buddyinfo
this file contains information which is used for diagnosing memory
fragmentation issues.
each line starts with the identification of the node and the name
of the zone which together identify a memory region.
this is then
followed by the count of available chunks of a certain order in
which these zones are split.
the size in bytes of a certain order is given by the formula:
.ip
    (2^order)\ *\ page_size
.ip
the binary buddy allocator algorithm inside the kernel will split
one chunk into two chunks of a smaller order (thus with half the
size) or combine two contiguous chunks into one larger chunk of
a higher order (thus with double the size) to satisfy allocation
requests and to counter memory fragmentation.
the order matches the column number, when starting to count at zero.
.ip
for example on an x86-64 system:
.rs -12
.ex
node 0, zone     dma     1    1    1    0    2    1    1    0    1    1    3
node 0, zone   dma32    65   47    4   81   52   28   13   10    5    1  404
node 0, zone  normal   216   55  189  101   84   38   37   27    5    3  587
.ee
.re
.ip
in this example, there is one node containing three zones and there
are 11 different chunk sizes.
if the page size is 4 kilobytes, then the first zone called
.i dma
(on x86 the first 16 megabyte of memory) has 1 chunk of 4 kilobytes
(order 0) available and has 3 chunks of 4 megabytes (order 10) available.
.ip
if the memory is heavily fragmented, the counters for higher
order chunks will be zero and allocation of large contiguous areas
will fail.
.ip
further information about the zones can be found in
.ir /proc/zoneinfo .
.tp
.i /proc/bus
contains subdirectories for installed busses.
.tp
.i /proc/bus/pccard
subdirectory for pcmcia devices when
.b config_pcmcia
is set at kernel compilation time.
.tp
.i /proc/bus/pccard/drivers
.tp
.i /proc/bus/pci
contains various bus subdirectories and pseudo-files containing
information about pci busses, installed devices, and device
drivers.
some of these files are not ascii.
.tp
.i /proc/bus/pci/devices
information about pci devices.
they may be accessed through
.br lspci (8)
and
.br setpci (8).
.tp
.ir /proc/cgroups " (since linux 2.6.24)"
see
.br cgroups (7).
.tp