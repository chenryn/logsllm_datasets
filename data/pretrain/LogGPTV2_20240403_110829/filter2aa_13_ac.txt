·NewArray：创建类型为Type的数组对象。
·GetField：获取类型为Type的字段。
·SetField：设置类型为Type的字段的值。
·GetStaticField：获取类型为Type的static的字段。
·SetStaticField：设置类型为Type的static的字段的值。
·CallMethod：调用返回类型为Type的方法。
·CallStaticMethod：调用返回值类型为Type的static方法。
更多的函数使用可以查看jni.h文件中的函数名称。
2.3.2 jobject参数obj
如果native方法不是static，obj就代表native方法的类实例。
如果native方法是static，obj就代表native方法的类的class对象实例（static方法不需要类实例的，所以就代表这个类的class对象）。
2.3.3 Java类型和native中的类型映射关系
Java和C++中的基本类型的映射关系参见表2-1。
表2-1 Java和C++中的基本类型的映射关系
具体的说明可以查看jni.h文件。
2.3.4 jclass类型
为了能够在C/C++中使用Java类，jni.h头文件中专门定义了jclass类型来表示Java中的Class类。
JNIEnv类中有如下几个简单的函数可以取得jclass：
·jclass FindClass（const char*clsName）：通过类的名称（类的全名，这时候包名不是用点号而是用/来区分的）来获取jclass。如：jclass str=env->FindClass（"java/lang/String"）；获取Java中的String对象的class对象。
·jclass GetObjectClass（jobject obj）：通过对象实例来获取jclass，相当于Java中的getClass方法。
·jclass GetSuperClass（jclass obj）：通过jclass可以获取其父类的jclass对象。
2.3.5 native中访问Java层代码
在C/C++本地代码中访问Java端的代码，一个常见的应用就是获取类的属性和调用类的方法，为了在C/C++中表示属性和方法，JNI在jni.h头文件中定义了jfieldId、jmethodID类型来分别代表Java端的属性和方法。在访问或者设置Java属性的时候，首先就要先在本地代码取得代表该Java属性的jfieldID，然后才能在本地代码中进行Java属性操作，同样，需要调用Java端的方法时，也是需要取得代表该方法的jmethodID才能进行Java方法调用。
使用JNIEnv的如下方法：
·GetFieldID/GetMethodID
·GetStaticFieldID/GetStaticMethodID
来取得相应的jfieldID和jmethodID。
下面来具体看一下这几个方法。
GetFieldID方法如下：
方法的参数说明：
·clazz：这个方法依赖的类对象的class对象。
·name：这个字段的名称。
·sign：这个字段的签名（每个变量，每个方法都是有签名的）。
怎么查看类中的字段和方法的签名呢？使用javap命令，如下所示。
GetMethodID也能够取得构造函数的jmethodID，创建一个Java对象时可以调用指定的构造方法，后续将向大家介绍，如：
签名的格式见表2-2。
表2-2 签名的格式
下面来看一例子：
上面的native代码中，首先取得property字段，因为property字段是int类型的，所以在签名中传入“I”，取得方法function的ID时：
签名为（Iljava/util/Date；[I）I。
关于GetStaticFieldID/GetStaticMethodID这两个方法的用法大同小异，区别在于这两个方法是获取静态字段和方法的ID。
2.4 JNIEnv类型中方法的使用
前面说到JNIEnv类型，下面通过例子来看一下这些方法的使用。第一个例子是在Java代码中定义一个属性，然后再从C++代码中将其设置成另外的值，并且输出来。
2.4.1 native中获取方法的Id
先来看一下Java代码：
再来看一下C++代码：
编译成功后，在Eclipse运行后的结果如图2-24所示。
图2-24 运行成功效果图
第一个0是在C++代码中的coutMethod和CallStaticMethod，还有CallNonvirtualMethod函数，需要通过GetMethodID取得相应方法的jmethodID来传入到上述函数的参数中。
调用示例方法的三种形式如下：
第一种是最常用的方式。第二种是当调用这个函数的时候有一个指向参数表的va_list变量时使用的（很少使用）。第三种是当调用这个函数的时候有一个指向jvalue或jvalue数组的指针时用的。
jvalue在jni.h头文件中定义是一个union联合体，在C/C++中，union可以存放不同类型的值，但是当你给其中一个类型赋值之后，这个union就是这种类型了，比如你给jvalue中的s赋值的话，jvalue就变成了jshort类型了，所以可以定义一个jvalue数组（这样就可以包含多种类型的参数了）传递到方法中，如下所示：
假如现在Java中有这样的一个方法：
1）在C++中使用第一种方式调用function方法：
obj是方法funtion的对象。id_function是方法function的id，可以通过GetMethodID（）方法获取。然后就是对应的参数，这和Java中的可变参数类似。最后一个char类型的参数L'a'为什么前面要加一个L呢？原因是Java中的字符是Unicode双字节的，而C++中的字符是单字节的，所以要变成宽字符，即前面加一个L。
2）在C++中使用第三种方式调用function方法：
例子：C++中调用Java中的方法。
Java代码如下：
这时候用javap获取max方法的签名，如下所示。
max方法的签名是（DD）D。在C++中的代码如下：
编译成动态文件后，到Eclipse中执行sayHello方法，运行结果如图2-25所示。
图2-25 运行成功效果图
可见，成功地输出了最大值。
2.4.2 Java和C++中的多态机制
JNIEnv中有一个特殊的方法CallNonvirtualMethod，如下所示：
首先来了解一下，上面调用的function是子类的function方法，但是在C++中就不一样了：
这段C++代码中执行的是父类的function方法，如果想执行子类的function方法怎么办呢？就需要将父类的function方法定义成virtual虚函数：
所以，C++和Java对于继承后执行的是父类还是子类的方法是有区别的，在Java中所有的方法都是虚拟的，所以总是调用子类的方法，因此CallNonVirtualMethod方法就出来了，这个方法可以帮助调用Java中父类的方法。
在JNI中定义的CallNonvirtualMethod能够实现子类对象调用父类方法的功能，如果想要调用一个对象的父类方法，而不是子类的方法，就可以使用CallNonvirtualMethod。要使用它，首先要获得父类及其要调用的父类方法的jmethodID，然后传入到这个函数就能通过子类对象调用被覆写的父类方法了。
例如：在Java中定义Father类：
定义一个子类Child，继承Father类，重写父类中的function方法：
在JNIDemo代码，定义Father类型的属性：
再来看一下C++中的代码：
编译成功.dll文件，回到Eclipse中运行结果参如图2-26所示。
图2-26 运行结果
其中：
·Child：function是调用env->CallVoidMethod（...）方法的。
·Father：function是调用env->CallNonvirtualMethod（...）方法的。
这样就能够控制到底调用哪个类的function方法了。
2.5 创建Java对象及字符串的操作方法
首先来看一下C/C++中怎么创建Java对象，然后再介绍如何操作Java字符串。
2.5.1 native中创建Java对象
在JNIEnv中有两种方法创建Java对象，下面分别介绍。
第一种方法创建Java对象
代码如下：
参数如下：
·clazz：是需要创建的Java对象的Class对象。
·methodID：是传递一个方法的ID，想一想Java对象在创建的时候，需要执行什么方法呢？对，没错那就是构造方法。
·第三个参数：是构造函数需要传入的参数值（默认的构造方法是不需要传入这个参数的）。所以在创建Java对象之前要做的工作就是要获取这个对象的class对象，然后再获取该对象的构造方法。想要获取方法的id，就需要方法的签名，因为构造方法没有返回值，所以认为类的默认构造方法的返回值类型的签名始终是“（）V”（因为默认的构造方法是没有参数的），方法的名称始终为“”。
在C++中构造Java中的Date对象，并且调用它的getTime（）方法打印当前时间。
Java中的代码不需要改变，主要是在C++代码中改写：
编译成.dll文件，在Eclipse中运行结果如图2-27所示。
图2-27 运行结果
第二种方法创建Java对象
用AllocObject函数创建一个对象，可以根据传入的jclass创建一个Java对象，但是状态是非初始化的，在这个对象之前绝对要用CallNonvirtualVoidMethod来调用该jclass的构造函数，这样就可以延迟构造函数的调用。这种方法用得很少，下面只对代码做简单的说明。
Java中的代码不做任何修改，C++代码修改如下：
2.5.2 native中操作Java字符串
首先来了解一下Java和C/C++中字符串的区别。在Java中，使用的字符串String对象是Unicode（UTF-16）码，即每个字符不论是中文还是英文还是符号，一个字符总是占两个字节。Java通过JNI接口可以将Java的字符串转换到C/C++中的宽字符串（wchar_t*），或传回一个UTF-8的字符串（char*）到C/C++；反过来，C/C++可以通过一个宽字符串，或一个UTF-8编码的字符串来创建一个Java端的String对象。
接下来看一下JNIEnv中的一些C++方法。
1）获取字符串的长度：
参数j_msg是一个jstring对象。
2）将jstring对象拷贝到const jchar*指针字符串：
这是在Java 1.2出来的函数，这个函数把Java字符串的内容直接拷贝到C/C++的字符串数组中，在调用这个函数之前必须有一个C/C++分配出来的字符串（具体看下面的例子），然后传入到这个函数中进行字符串的拷贝。