Algorithms
FBSS
l(l−1)
KeyGen
CheckKey
Update
Sign
Verify
Secret storage size
Forward secure
Bilateral secure
At some extent
Existence Forgery
Time periods
Yes
T = 2l
2 Te
2 + 4)Tm
4 Tm
FSSUU
2Tp + l(l+1)
2 Tp + ( l
Te + l2
( l+m
2 + 10)Te
2 + 5)Tm
|G1|
3Tp + ( l+m
l(l+3)
4
Yes
(k + 1)Te + k(k + 1)Tm
2Tp + Te
(k + 1)Te + k2Tm
2Tp + 2Te
2Tp
2|G1|
Yes
Yes
Yes
Unbounded
the costs for signing a message, our FBSS only needs two
paring operations and two exponentiation operations; how-
ever FSSUU requires l+m
2 + 10 exponentiation operations,
which is also much lager than the costs in FBSS because
the message in FSSUU is denoted as a binary representa-
tion, which is about hundreds of bits.
In the veriﬁcation
phase, the costs in FBSS have one time pairing operation
advantage than FSSUU, which demonstrates that our FBSS
is more eﬃcient than FSSUU. For updating the secret keys
from one time period to the next time period, our FBSS
requires (k + 1) exponentiation operations; the FSSUU on-
ly needs one time exponentiation operation, which is more
cost-eﬀective. However, this (time complexity) advantage
for FSSUU is achieved by sacriﬁcing more space complexity,
namely secret storage size. The secret storage size in FS-
elements in group G1, which depends
SUU is about l(l+3)
on the parameter l; our FBSS only needs two elements in
the group. This formulates the trade oﬀ between the time
eﬃciency for updating the secret parameters and the space
size of storing secret parameters.
4
From the security perspective, both schemes are forward
secure, but the work FSUU does not achieve the bilateral
security. This is because the key update algorithm of FSSUU
only depends on the inputs secret key of the current time
period, the ID of new time period, and the public key. Once
the secret key was comprised, the attacker can update the
key to any time periods in the future. However, in our FBSS,
we utilize the distributed key to update the current secret
key. Although the attacker may compromise the current
time period, the attacker cannot produce a secret key of
future time periods.
Both scheme are based on the idea of splitting the secret
information into two parts. In the construction of FSSUU,
one piece secret information is stored in the signer’s machine
and the other piece secret, password, is memorized by the
signer. To ensure against the existence forgery, the signer
signs a message using the password, which is assumed not to
be compromised. In the case when signing messages is more
frequent than updating key, the scheme FSSUU does not
work because the signer has to input the password for each
signing. In our construction of FBSS, we also split the secret
information, the one for updating secret key is distributed
to other parties and the other one for signing message is
stored locally. To protect against the existence forgery, we
only use the signing key to sign a message, which is very
suitable for the case when signing messages is more frequent
than updating keys.
Furthermore, our work achieves the unbounded number
of time periods, which allows the signer to update the se-
cret key arbitrarily with unbound times. However, in the
construction of FSSUU, the signer has to prolong the life-
time of the signature system by increasing the parameter l,
which leads to much more time costs of algorithms KeyGen,
CheckKey, Sign and verify and more space costs for stor-
ing secret parameters. Oppositely, for reducing these costs
from both time and space, the signer has to sacriﬁce the life-
time of the signature system as a cost. Thus, our proposed
scheme is more practical for real-world applications.
6.2 Experimental Evaluation
We now evaluate the performance of the proposed FBSS
and FSSUU experimentally. We ﬁrst introduce the method-
ology of our experiments when implementing both schemes,
then we present the experimental results and the analysis.
6.2.1 Methodology and Conﬁguration
All the following experiments are based on C++ (Visual
Studio 2013) and are conducted on an Intel-based i5-2320
personal computer with 3GHz processor and 4GB RAM.
In our experiments, we utilize the GNU Multiple Precision
Arithmetic (GMP) library [1] and Pairing Based Cryptog-
raphy (PBC) library version 0.5.14 [2] to implement both
signature schemes, where type A parameter (a.param) is
used to do the paring operations. All experimental results
represent the mean of 10 trials.
We implements both schemes by building two classes for
every signature scheme. Each class contains ﬁve public in-
terfaces (KeyGen, CheckKey, Update, Sign and verify) and
the data parameters (system parameters, public parameters
and secret parameters). For both implementations, we gen-
erate the system parameters by invoking an auxiliary pro-
tected method Initialize, which allows us to get a more pre-
cise time cost evaluation of the key generation procedure. In
the implementation of FBSS, the parameter k is set to k = 5
and in the implementation of FSSUU the parameter l is set
to l = 10, 15,··· . For the hash functions in both scheme,
we use the ready-made method element from hash in the P-
BC library for convenience. In FSSUU, the messages to be
signed must be ﬁxed-length binary strings of m-bits, which
is set to m = 160 in our implementation and all messages
531Table 3: Experimental results of FBSS and FSSUU
Algorithms
KeyGen(ms)
CheckKey(ms)
Update(ms)
Sign(ms)
Verify(ms)
l = 10
973.707
397.753
10.899
399.61
11.6304
l = 15
1159.69
895.707
11.0372
918.902
11.7059
l = 20
1522.45
1592.14
11.2081
1629.51
12.9753
FSSUU
l = 25
1986.74
2486.87
11.3047
2507.68
11.4605
l = 30
2527.84
3585.52
11.5657
3588.05
11.8231
l = 35
3157.06
4853.7
11.7709
4875.89
11.9514
l = 40
3856.21
6329.3
12.3309
6352.02
11.6626
FBSS
35.0392
11.299
29.8116
22.7591
8.13898
are generated from {0, 1}m randomly. To compare fairly,
the same conﬁguration is used in the implementation of F-
BSS. Besides above, we use the method sizeof to compute
the storage size of secret parameters.
6.2.2 Experimental Results
The experimental results include two aspects: the time
cost in milliseconds of every operation and the space cost in
kilobytes of secret parameters. The results and their analysis
are detailed in the following paragraphs.
First, we estimate the time cost of every operation, which
has been presented in Table 3. For algorithm KeyGen, the
time cost of FSSUU requires 970+ ms when l = 10; with
the parameter l increasing, the time cost also grows fast.
However, our FBSS only consumes 35.0352 ms, which im-
proves by more than 27 times. For algorithm CheckKey,
the time cost of FSSUU needs 397+ ms when l = 10; with
the parameter l increasing, the time cost also grows much
faster than algorithm KeyGen. However, our FBSS only
consumes 11.299ms and when l = 40; our FBSS improves
about 600 times. The cost of signing message is close to the
cost for checking key in FSSUU, but our FBSS’s time cost
for signing is only 22.7591ms, which is more eﬃcient than
that of FSSUU. To verify whether a message-signature pair
is valid, 11 ∼ 12 ms is required in FSSUU while our FBSS
only needs 8.13898ms, which has slight improvement. The
FSSUU has its superiority over FBSS in updating the secret
key to a next time period, but this has little impact on the
performance of FBSS in practice because the key update is
not very frequent in reality. For example, the signer may
update the secret key once a day, a week or a month, the
time cost of updating secret parameter in FBSS is negligible
since it only takes less than one second.
Second, we compare the space cost of secret parameter-
s, which has been presented in Fig. 2. While our FBSS
signature scheme only needs 0.25 KB for storing the secret
key, the FSSUU requires 1.625 KB if we set l = 5. If the
signer updates the key once a day using the FSSUU signa-
ture scheme, the signer has to restart the signature system
after a month later, because T = 25. For prolonging the life-
time of the signature system, the signer has to increase the
parameter l. However, with the increasing of l, the storage
size also grows in a quadratic speed. When l increases to 40,
106.625 KB is required to store the secret parameters, which
is indeed costly than ours. Consequently, the experimental
results validate our theoretical analysis, and our signature
scheme is more suitable for practical application.
7. CONCLUSIONS
In this paper, we introduced the concept of key-evolving
signature with bilateral security (i.e.
forward-security and
backward-security) to deal with the key exposure problem
Figure 2: The relation between the parameter l and
secret storage size in FSSUU. The secret storage size
is 0.25KB when k = 5 in the FBSS.
in digital signature. This new concept advances the current
research on forward-secure digital signature by considering
the signature forgeries of future time period once the key of
current time period is leaked. First, we deﬁned the bilater-
al security of key-evolving signature scheme, which prevents
the attacker from forging a valid signature of the past and
future time periods when the key is exposed. Next, we pre-
sented a novel and speciﬁc construction satisfying the above
requirements. Our construction splits secret parameters in-
to two parts: the ﬁrst part is used to update the keys and
stored in a distributed way; the second part is employed for
signing message and maintained by the singer. We employed
a hub-and-spoke structure to evolve the key for supporting
unbounded number of key updating. Then, we proved that
our construction is correct and bilateral-secure under the
random oracle model and the CDH assumption. Finally, we
demonstrated that our construction outperforms pervious
work by theoretical and experimental evaluation.
8. ACKNOWLEDGMENTS
The work in this paper was supported by the Funda-
mental Research Funds for the Central Universities (No.
106112015CDJXY180003), the National Natural Science Foun-
dation of China (No. 61502314), and the Fundamental Re-
search Funds for the Shenzhen University (No. 201533).
510152025303540020406080100120Total time periods.Secret storage size (KB).  1.6257.2528.8751642.8756182.25106.6255329. REFERENCES
[1] The GNU multiple precision arthmetic library.
https://gmplib.org/.
[2] PBC: the pairing-based cryptography library.
http://crypto.stanford.edu/pbc/.
[3] M. Abdalla and L. Reyzin. A new forward-secure
digital signature scheme. In ASIACRYPT, pages
116–129. 2000.
[4] R. Anderson. Two remarks on public key
cryptography. In Invited Talk, ACM Conference on
Computer and Communications Security (CCS), 1997.
[5] M. Bellare and S. K. Miner. A forward-secure digital
signature scheme. In CRYPTO, pages 431–448, 1999.
[6] P. B la´skiewicz, P. Kubiak, and M. Kuty lowski. Digital
signatures for e-government - a long-term security
architecture. In Forensics in Telecommunications,
Information, and Multimedia, pages 256–270, 2010.
[7] D. Boneh, C. Gentry, B. Lynn, and H. Shacham.
Aggregate and veriﬁably encrypted signatures from
bilinear maps. In EUROCRYPT, pages 416–432, 2003.
[8] X. Boyen, H. Shacham, E. Shen, and B. Waters.
Forward-secure signatures with untrusted update. In
ACM Conference on Computer and Communications
Security (CCS), pages 191–200, 2006.
[9] R. Canetti, S. Halevi, and J. Katz. A forward-secure
public-key encryption scheme. In EUROCRYPT,
pages 255–271, 2003.
[10] E. Cronin, S. J. h, T. Malkin, and P. McDaniel. On
the performance, feasibility, and use of forward-secure
signatures. In ACM Conference on Computer and
Communications Security (CCS), pages 131–144, 2003.
[11] Y. Desmedt and Y. Frankel. Threshold cryptosystems.
In CRYPTO, pages 307–315, 1990.
[12] Y. Dodis, J. Katz, S. Xu, and M. Yung. Key-insulated
public key cryptosystems. In EUROCRYPT, pages
65–82, 2002.
[13] Y. Dodis, J. Katz, S. Xu, and M. Yung. Strong
key-insulated signature schemes. In International
Conference on Practice and Theory of Public-Key
Cryptography (PKC), pages 130–144, 2002.
[14] D. Guan, D.-R. Lin, and C.-I. Wang. A forward-secure
signature with backward-secure detection. In
International Conference on Information Security and
Assurance (ISA), pages 106–110, 2008.
[15] L. C. Guillou and J.-J. Quisquater. A “paradoxical”
identity-based signature scheme resulting from
zero-knowledge. In CRYPTO, pages 216–231, 1990.
[16] C. G. G¨unther. An identity-based key-exchange
protocol. In EUROCRYPT, pages 29–37, 1990.
[17] A. Herzberg, M. Jakobsson, S. Jarecki, H. Krawczyk,
and M. Yung. Proactive public key and signature
systems. In ACM Conference on Computer and
Communications Security (CCS), pages 100–110, 1997.
[18] G. Itkis and L. Reyzin. Forward-secure signatures
with optimal signing and verifying. In CRYPTO,
pages 332–354, 2001.
[19] G. Itkis and L. Reyzin. SiBIR: Signer-base
intrusion-resilient signatures. In CRYPTO, pages
499–514, 2002.
[20] A. Kozlov and L. Reyzin. Forward-secure signatures
with fast key update. In International Conference on
Security in Communication Networks (SCN), pages
241–256, 2003.
[21] H. Krawczyk. Simple forward-secure signatures from
any signature scheme. In ACM Conference on
Computer and Communications Security (CCS), pages
108–115, 2000.
[22] B. Libert, J.-J. Quisquater, and M. Yung.
Forward-secure signatures in untrusted update
environments: eﬃcient and generic constructions. In
ACM Conference on Computer and Communications
Security (CCS), pages 266–275, 2007.
[23] B. Libert and M. Yung. Dynamic fully forward-secure
group signatures. In ACM Symposium on Information,
Computer and Communications Security (ASIACCS),
pages 70–81, 2010.
[24] G. Lize, W. Feng, Z. Yousheng, and Z. Shi-hui. A
bilateral secure threshold signature scheme with
distinguished signing authorities. International
Journal of Advancements in Computing Technology,
4(8), 2012.
[25] D. Ma. Practical forward secure sequential aggregate
signatures. In ACM Symposium on Information,
Computer and Communications Security (ASIACCS),
pages 341–352, 2008.
[26] T. Malkin, D. Micciancio, and S. Miner. Eﬃcient
generic forward-secure signatures with an unbounded
number of time periods. In EUROCRYPT, pages
400–417, 2002.
[27] H. Ong and C.-P. Schnorr. Fast signature generation
with a ﬁat shamir-like scheme. In EUROCRYPT,
pages 432–440, 1991.
[28] L. Wang, K. Chen, X. Mao, and Y. Wang. On the
security of a forward-backward secure signature
scheme. International Journal of Network Security,
17(3):307–310, 2015.
533