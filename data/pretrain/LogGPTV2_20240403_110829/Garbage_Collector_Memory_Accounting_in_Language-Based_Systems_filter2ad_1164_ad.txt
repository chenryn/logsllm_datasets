are being used on behalf of some task by the kernel and
charge the cost of those resources back to the task, closely
parallels our own motivation to charge costs incurred by the
garbage collector back onto the tasks responsible. Conceiv-
ably, a single task in the runtime could be mapped to its own
resource container at the operating system level, and the re-
sources the operating system spends on behalf of that task
can be billed back to it.
The resource accounting system developed here is a
measuring agent. Other systems exist to provide enforce-
ment, limiting or terminating tasks that are deemed to be
misbehaving. An interesting area for future work is ﬂexible
policy systems that read the measurements produced by this
and other resource accounting systems and choose when to
terminate or restrict tasks that violate the stated resource
usage policy. A policy framework based on our accounting
system could take into account the various statistics made
available to it, like total memory copied on behalf of some
task, the amount of memory that task is holding live, and the
amount of memory that task is sharing with others to make
its decisions.
7 Conclusion
Although Java and other general-purpose language-
based systems have good support for memory protection,
authorization, and access controls among mutually distrust-
ful parties, there is little or no support for monitoring or con-
trolling the resource usage of the individual parties. Such
mechanisms allow boundaries to be established on memory
usage, preventing denial of service attacks and generally in-
creasing a system’s reliability. Existing mechanisms either
limit communications and memory sharing among tasks,
can be fooled into charging the wrong task for memory us-
age, or don’t gracefully support handing objects off from
one task to another.
Knowing which task allocated an object is not as impor-
tant as knowing which task is holding a live reference to
that object. Our memory accounting system allows tasks
to be charged for any memory they reference. The system
is integrated into the garbage collector, piggy-backing on
the periodic memory scans normally performed to main-
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
tain the memory heap. As a result, our system derives an
accurate measure of memory usage while having almost in-
signiﬁcant performance overhead (typically less than 3% on
a variety of benchmarks). Additionally, the accuracy of our
measurements improves when there is increased memory
pressure on the system, again at no additional performance
cost. These measurements, combined with a suitable task
termination system, allow for the graceful implementation
of a variety of memory usage policies in language-based
systems.
8 Acknowledgements
Ryan Culpepper, VanDung To, and Mark Barrett imple-
mented an early prototype of this system; Ryan’s advice in
particular helped us get our implementation off the ground.
Scott Crosby provided many useful comments and sanity
checks. Thanks also to our shepherd, Drew Dean, and the
anonymous reviewers for their extensive feedback.
This work is supported by NSF Grant CCR-9985332 and
Texas ATP grant 003604-0053-2001.
References
[1] B. Alpern, C. R. Attanasio, J. J. Barton, M. G. Burke,
P. Cheng, J.-D. Choi, A. Cocchi, S. J. Fink, D. Grove,
M. Hind, S. F. Hummel, D. Lieber, V. Litvinov, M. F. Mer-
gen, T. Ngo, J. R. Russell, V. Sarkar, M. J. Serrano, J. C.
Shepherd, S. E. Smith, V. C. Sreedhar, H. Srinivasan, and
J. Whaley. The Jalape˜no virtual machine. IBM System Jour-
nal, 39(1), Feb. 2000.
[2] B. Alpern and F. B. Schneider. Deﬁning liveness. Informa-
tion Processing Letters, 21(4):181–185, Oct. 1985.
[3] J. Alves-Foss, editor. Formal Syntax and Semantics of
Java. Number 1523 in Lecture Notes in Computer Science.
Springer-Verlag, July 1999.
[4] M. Anderson, R. D. Pose, and C. S. Wallace. A password-
capability system. The Computer Journal, 29(1):1–8, Feb.
1986.
[5] G. Back and W. Hsieh. Drawing the Red Line in Java. In
Proceedings of the Seventh IEEE Workshop on Hot Topics
in Operating Systems, Rio Rico, Arizona, Mar. 1999.
[6] G. Back, W. C. Hsieh, and J. Lepreau. Processes in Kaf-
feOS: Isolation, resource management, and sharing in Java.
In Proceedings of the Fourth Symposium on Operating Sys-
tems Design and Implementation (OSDI 2000), San Diego,
California, Oct. 2000.
[7] G. Banga, P. Druschel, and J. Mogul. Resource contain-
ers: A new facility for resource management in server sys-
tems. In Proceedings of the Third Symposium on Operating
System Design and Implementation (OSDI), New Orleans,
Louisiana, Feb. 1999.
[8] M. Beg and M. Dahlin. A memory accounting interface for
the Java programming language. Technical Report CS-TR-
01-40, University of Texas at Austin, Oct. 2001.
[9] P. Bernadat, D. Lambright, and F. Travostino. Towards
a resource-safe Java for service guarantees in uncoopera-
tive environments.
In IEEE Workshop on Programming
Languages for Real-Time Industrial Applications, Madrid,
Spain, Dec. 1998.
[10] E. Bertino, L. V. Mancini, and S. Jajodia. Collecting garbage
in multilevel secure object stores. In Proceedings of the Sym-
posium on Security and Privacy, pages 106–120, Oakland,
CA, May 1994. IEEE Computer Society Press.
[11] W. Binder. Design and implementation of the J-SEAL2 mo-
bile agent kernel. In 2001 Symposium on Applications and
the Internet, San Diego, California, Jan. 2001.
[12] H. Boehm and M. Weiser. Garbage collection in an unco-
operative environment. Software Practice and Experience,
18(9):807–820, Sept. 1988.
[13] H. Bromley. Lisp Lore: A Guide to Programming the Lisp
Machine. Kluwer Academic Publishers, 1986.
[14] Burroughs Corporation, Detroit, Michigan.
Burroughs
B6500 Information Processing Systems Reference Manual,
1969.
[15] M. J. Carey, D. J. DeWitt, and J. F. Naughton. The OO7
benchmark. SIGMOD Record (ACM Special Interest Group
on Management of Data), 22(2):12–21, 1993.
[16] A. Chander, J. C. Mitchell, and I. Shin. Mobile code secu-
rity by Java bytecode instrumentation. In 2001 DARPA In-
formation Survivability Conference & Exposition (DISCEX
II), Anaheim, California, June 2001.
[17] J. S. Chase, H. M. Levy, M. J. Feeley, and E. D. La-
zowska. Sharing and protection in a single-address-space
operating system. ACM Transactions on Computer Systems,
12(4):271–307, Nov. 1994.
[18] C. J. Chenney. A nonrecursive list compacting algorithm.
Communications of the ACM, 13(11):677–678, Nov. 1970.
[19] A. Chiampichetti, E. Bertino, and L. V. Mancini. Mark-
and-sweep garbage collection in multilevel secure object-
oriented database systems. In D. Gollmann, editor, Proceed-
ings of the Third European Symposium on Research in Com-
puter Security (ESORICS), volume 875 of Lecture Notes
in Computer Science, pages 359–373, Brighton, UK, Nov.
1994. Springer.
[20] A. Coglio and A. Goldberg. Type safety in the JVM:
Some problems in Java 2 SDK 1.2 and proposed solutions.
Concurrency and Computation: Practice and Experience,
13(13):1153–1171, Sept. 2001.
[21] G. Czajkowski and L. Dayn`es. Multi-tasking without com-
promise: a virtual machine approach.
In Proceedings
of Object-Oriented Programming, Systems, Languages and
Applications, Tampa Bay, Florida, Oct. 2001.
[22] G. Czajkowski and T. von Eicken.
JRes: A resource ac-
counting interface for Java. In Proceedings of the ACM Con-
ference on Object-Oriented Programming, Systems, Lan-
guages, and Applications, pages 21–35, Vancouver, British
Columbia, Oct. 1998.
[23] D. Dean. The security of static typing with dynamic linking.
In Fourth ACM Conference on Computer and Communica-
tions Security, Zurich, Switzerland, Apr. 1997.
[24] D. Dean, E. W. Felten, D. S. Wallach, and D. Balfanz. Java
security: Web browsers and beyond. In D. E. Denning and
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
P. J. Denning, editors, Internet Besieged: Countering Cy-
berspace Scofﬂaws, pages 241–269. ACM Press, New York,
New York, Oct. 1997.
[25] S. Drossopoulou and S. Eisenbach. Java is type safe — prob-
ably. In Proceedings of the European Conference on Object-
Oriented Programming (ECOOP ’97), Jyv¨askyl¨a, Finland,
June 1997.
[26] S. Drossopoulou, D. Wragg, and S. Eisenbach. What
is Java binary compatibility?
the
ACM Conference on Object-Oriented Programming, Sys-
tems, Languages, and Applications, pages 341–358, Van-
couver, British Columbia, Oct. 1998.
In Proceedings of
[27] G. Edjlali, A. Acharya, and V. Chaudhary. History-based
access control for mobile code.
In Proceedings of the 5th
ACM Conference on Computer and Communications Secu-
rity (CCS ’98), pages 38–48, San Francisco, California, Nov.
1998.
[28] U. Erlingsson and F. B. Schneider. SASI enforcement of se-
curity policies: A retrospective. In Proceedings of the 1999
New Security Paradigms Workshop, Caledon Hills, Ontario,
Canada, Sept. 1999.
[29] M. Flatt, R. B. Findler, S. Krishnamurthy, and M. Felleisen.
Programming languages as operating systems (or revenge
of the son of the Lisp machine). In Proceedings of the 1999
ACM International Conference on Functional Programming
(ICFP ’99), Paris, France, Sept. 1999.
[30] A. Goldberg and D. Robson. Smalltalk 80: The Language.
Addison-Wesley, Reading, Massachusetts, 1989.
[31] L. Gong.
Inside Java 2 Platform Security: Architecture,
API Design, and Implementation. Addison-Wesley, Read-
ing, Massachusetts, June 1999.
[32] J. Gosling, B. Joy, and G. Steele. The Java Language Spec-
iﬁcation. Addison-Wesley, Reading, Massachusetts, 1996.
[33] D. Grossman, G. Morrisett, T. Jim, M. Hicks, Y. Wang, and
J. Cheney. Region-based memory management in Cyclone.
In ACM SIGPLAN Conference on Programming Language
Design and Implementation, Berlin, Germany, June 2002.
[34] C. Hawblitzel, C.-C. Chang, G. Czajkowski, D. Hu, and
T. von Eicken. Implementing multiple protection domains
in Java. In USENIX Annual Technical Conference, New Or-
leans, Louisiana, June 1998.
[35] C. Hawblitzel and T. von Eicken. Luna: a ﬂexible Java
protection system. In Proceedings of the Fifth Symposium
on Operating Systems Design and Implementation (OSDI
2002), Boston, Massachusetts, Dec. 2002.
[36] G. Heiser, K. Elphinstone, J. Vochteloo, S. Russell, and
J. Liedtke. The Mungi single-address-space operating sys-
tem. Software: Practice and Experience, 28(9):901–928,
July 1998.
[37] M. Hicks, P. Kakkar, J. T. Moore, C. A. Gunter, and S. Net-
tles. PLAN: A packet language for active networks. In Pro-
ceedings of the Third ACM SIGPLAN International Confer-
ence on Functional Programming Languages, pages 86–93,
1998.
[38] P. A. Karger. Improving security and performance for ca-
pability systems. Technical Report 149, University of Cam-
bridge Computer Laboratory, Oct. 1988.
[39] T. Lindholm and F. Yellin. The Java Virtual Machine Speci-
ﬁcation. Addison-Wesley, Reading, Massachusetts, 1996.
[40] D. Malkhi, M. Reiter, and A. Rubin. Secure execution of
Java applets using a remote playground. In Proceedings of
the 1998 IEEE Symposium on Security and Privacy, pages
40–51, Oakland, California, May 1998.
[41] J. McCarthy. Recursive functions of symbolic expressions
and their computation by machine. Communications of the
ACM, 3(4):184–195, Apr. 1960.
[42] J. McCarthy. History of LISP. In R. L. Wexelblat, editor,
History of Programming Languages, pages 173–185. Aca-
demic Press, 1981.
[43] G. McGraw and E. W. Felten. Securing Java: Getting Down
to Business with Mobile Code. John Wiley and Sons, New
York, New York, 1999.
[44] K. Murray, A. Saulsbury, T. Stiemerling, T. Wilkinson,
P. Kelly, and P. Osmon. Design and implementation of an
object-orientated 64-bit single address space microkernel. In
2nd USENIX Symposium on Microkernels and other Kernel
Architectures, San Diego, California, Sept. 1993.
[45] D. Redell, Y. Dalal, T. Horsley, H. Lauer, W. Lynch,
P. McJones, H. Murray, and S. Purcell. Pilot: An operat-
ing system for a personal computer. Communications of the
ACM, 23(2):81–92, Feb. 1980.
[46] A. Rudys and D. S. Wallach. Termination in language-based
systems. ACM Transactions on Information and System Se-
curity, 5(2):138–168, May 2002.
[47] E. G. Sirer, R. Grimm, A. J. Gregory, and B. N. Bershad.
Design and implementation of a distributed virtual machine
for networked computers. In Proceedings of the Seventeenth
ACM Symposium on Operating System Principles, pages
202–216, Kiawah Island Resort, South Carolina, Dec. 1999.
[48] R. Stata and M. Abadi. A type system for Java bytecode sub-
routines. ACM Transactions on Programming Languages
and Systems (TOPLAS), 21(1):90–137, Jan. 1999.
[49] D. C. Swinehart, P. T. Zellweger, R. J. Beach, and R. B.
Hagmann. A structural view of the Cedar programming en-
vironment. ACM Transactions on Programming Languages
and Systems, 8(4):419–490, Oct. 1986.
[50] D. Ungar. Generational scavenging: A non-disruptive high
performance storage reclamation algorithm. In Proceedings
of the ACM SIGSOFT/SIGPLAN Software Engineering Sym-
posium on Practical Software Development Environments,
Apr. 1984.
[51] L. van Doorn. A secure Java virtual machine.
In Ninth
USENIX Security Symposium Proceedings, Denver, Col-
orado, Aug. 2000.
[52] D. S. Wallach, E. W. Felten, and A. W. Appel. The security
architecture formerly known as stack inspection: A security
mechanism for language-based systems. ACM Transactions
on Software Engineering and Methodology, 9(4):341–378,
Oct. 2000.
[53] A. Wick, M. Flatt, and W. Hsieh. Reachability-based mem-
In Third Workshop on Scheme and Func-
ory accounting.
tional Programming, Pittsburgh, Pennsylvania, Oct. 2002.
[54] P. R. Wilson. Uniprocessor garbage collection techniques.
In Proceedings of the International Workshop on Memory
Management, Saint-Malo, France, Sept. 1992.
[55] N. Wirth and J. Gutknecht. Project Oberon. ACM Press,
1992.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE