rankDi (r)− |Di|
(cid:17)
where, e.g., eε(rankD(r)− n
for range
endpoints r. Given these inputs, we are ready to describe an
idealized version of our protocol next.
2 )) = ∏n
i=1 eε
2
Ideal Functionality FEM∗
3.3
The ideal functionality FEM∗ in Figure 3 describes our DP
median protocol EM∗ as executed by a trusted third party,
which we later replace by implementing FEM∗ with MPC. We
iteratively select subranges of universe U w.r.t. DP median via
the exponential mechanism. After s = (cid:100)logk |U|(cid:101) steps the last
selected subrange contains only the DP median. We split ε,
also called privacy budget, into s parts such that ε = ∑s
j=1 ε j,
and consume ε j for each subrange selection. (We describe the
budget composition in Section 3.4 and provide a heuristic in
Section 5.) Overall, FEM∗ provides ε-differential privacy:
Theorem 1. FEM∗, with privacy parameter ε j in step j ∈
{1, . . . ,s}, is ε-differentially private for ε = ∑s
Proof. FEM∗ performs s sequential steps, and each step
applies the exponential mechanism EMεi
is
uc
µ
(2εi∆uc
µ = 1/2 [48], we have εi-
DP per step. Thus, according to the composition theorem [29],
the total privacy budget after all steps is ∑s
µ)-DP [52], with sensitivity ∆uc
. Since EMεi
uc
µ
j=1 ε j.
j=1 ε j.
3.4 Accuracy of Differentially Private Median
We express accuracy as the absolute error between differen-
tially private and actual median. In more detail, the absolute
error is bounded by α with probability at least 1−β, known as
(α,β)-accuracy. Next, we discuss how the data distribution
inﬂuences accuracy and present worst-case bounds on the
accuracy of the exponential mechanism for median selection.
3.4.1 Data Distribution
Accuracy depends on the data distribution, speciﬁcally, on
gaps di+1 − di, and duplicates di = d j with i (cid:54)= j5. Recall, a
DP mechanism bounds the probability that data set D and its
neighbor D(cid:48) can be distinguished from the mechanism out-
put. As neighbor D(cid:48) may contain values from the gaps of D,
these gap values must be output with a non-zero probability.
This is why bounds for absolute error depend on such gaps
between data elements in this and related work (Appendix F).
As a worst-case example, consider a data set with universe
U = {0,1, . . . ,109} containing only an equal number of du-
plicates for 0 and 109. Then, smooth sensitivity is extremely
large with 109 and the exponential mechanism outputs a value
at uniform random. However, for such pathological, worst-
case data even the actual median does not provide much in-
sight. On the other hand, the number of duplicates in the data
can increase accuracy dramatically. For example, consider a
data set where the median has 2c duplicates: dn/2±i = dn/2
for i ∈ {1, . . . ,c}. Then, the probability that the exponential
mechanism outputs the median is exp(cε) times higher than
for any other element. Such duplicates also ﬁt the intuition
that the median is a “typical” value from the data that rep-
resents it well. In general, the probability to output a “bad”
element x decreases exponentially in ∑ci, where ci ≥ 1 are
duplicate counts of “good” elements yi, which are closer to
the median than x.
5To simplify the explanation, assume the universe consists of consecutive
integers, i.e., U = {x ∈ Z | a ≤ x ≤ b} with a,b ∈ Z.
2152    29th USENIX Security Symposium
USENIX Association
ε
(cid:107)
(cid:106) ln(|R |/β)
3.4.2 Accuracy Bounds
In the following, we show that the output of EMε
u(D,R ) con-
tains an element at most
positions away from the
median in the sorted data. Note that |R | is k if we select
among k subranges or |U| if we output elements directly.
For our accuracy proofs we structure the universe as a tree:
we set U as the root of a tree of height logb|U|, for some
base b, with k child nodes per parent. The child nodes are
equal-sized subranges of the parent node and R j
i denotes the
ith subrange in level j.
Theorem 2 (Median Accuracy for Ranges). Fixing a
database D of size n with a set of k subranges R =
{R j
u(D,R )
contains an element at most
positions away from
median position n
k} of data universe U. Then, output of EMε
2 with probability at least 1− β.
(cid:106) ln(k/β)
1, . . . ,R j
(cid:107)
ε
Our proof uses Corollary 3.12 from [29], which we restate
as the following Lemma:
Lemma 1 (Accuracy of the Exponential Mechanism). Fix-
ing a database D, and let OPT = maxr∈R u(D,r) denote the
(cid:20)
(cid:21)
maximum utility score of any element r ∈ R , we have
ε (ln|R | +t)
u(D,R )) ≤ OPT− 2∆u
≤ exp(−t).
u(D, EMε
Pr
Proof of Theorem 2. First, we bound the utility difference be-
tween optimal and selected output. Then, we translate this to
a bound on the output’s rank.
The complementary of Lemma 1 with ∆u = 1
OPT− u(D, EMε
ln|R | +t
u(D,R ))  1− exp(−t).
(cid:20)
(cid:21)
ε
Let R j
i = [rl,ru) be the output of EMε
for median utility OPT = 0, then,
OPT− u(D, EMε
u(D,R )) = 0− u(D,R j
i )
min
=
rankD(rl )≤ j≤rankD(ru)
(cid:12)(cid:12)(cid:12) j− n
2
(cid:12)(cid:12)(cid:12).
u(D,R )).
For ru  n
with prob-
ability at least 1 − exp(−t). Analog, for rl > µ we have
(cid:106) ln|R |+t
(cid:107)
2 + ln|R |+t
d = rankD(rl)− n
with
the same probability. Altogether, R j
rank
positions away from median rank n/2 with probability at
least 1− exp(−t). We have k = |R | and setting β = exp(−t)
concludes the proof.
2, and obtain rankD(rl) < n
i is at most
ε
ε
ε
To obtain an absolute error with regards to data elements,
consider universe elements instead of subranges as the output
of the exponential mechanism.
Corollary 1 (Median Accuracy). Fixing a sorted database
D of size n, let µ be the median of D, and(cid:98)µ the output of
u(D,U). Then, absolute error |µ−(cid:98)µ| is at most
(cid:12)(cid:12)(cid:12)
(cid:107)(cid:12)(cid:12)(cid:12)d n
2 +i − d n
i∈{+1,−1}·(cid:106) ln(|U|/β)
with probability at least 1− β.
EMε
max
2
ε
The proof follows directly from Theorem 2 with |R | = |U|.
Note that it is more likely to select a “good” subrange as it
is to directly select a “good” element from the entire universe
(as k (cid:28) |U|). However, sequential (subrange) selections con-
sumes ε j per selection step j which adds up to a total privacy
budget of ε = ∑ j ε j as described in Section 3.3. We now show
how to choose ε j to select the subrange containing the median
in each iteration step with probability at least 1− β.
k}, where
Theorem 3 (Choice of ε). Let R = {R j
1, . . . ,R j
i = [rl,ru) contains the median, and ni j = min{|rankD(µ)−
R j
rankD(rl)|, |rankD(ru + 1)− rankD(µ + 1)|} is the minimum
count of data elements in R j
i smaller resp. larger than the
median. Then, EMε
i with probability at least
1− β if
u(D,R ) selects R j
ε j ≥ ln(k/β)
.
ni j
Proof. Ranges R j
positions away from median rank. More formally,
h without the median have a rank at least ni j
h) ≥(cid:12)(cid:12)(cid:12)(cid:16) n
2
OPT− u(D,R j
± ni j
(cid:12)(cid:12)(cid:12) = ni j.
(cid:17)− n
(cid:104)
ni j ≥ ln|R |+t
2
ε j
(cid:105) ≤
exp(−t). Thus, for ε j ≥ ln|R |+t
the probability that any range
ni j
h is selected is at most exp(−t). We have k = |R | and setting
R j
β = exp(−t) concludes the proof.
Parameter ε j is undeﬁned for ni j = 0, i.e., when the median
is a range endpoint6. Note that the exact value of ni j is data-
dependent. E.g., for the uniform distribution ni j ≈ |D|/k j.
A differentially private ni j can be efﬁciently computed by
distributed sum protocols [26, 38, 60, 65] as it is just a count
of data elements. However, a differentially private count also
consumes a portion of the privacy parameter. For low epsilon
(e.g., ε = 0.1) we want to use the entire privacy budget on the
actual median selection to achieve high accuracy. Thus, we
use a heuristic in our evaluation: larger subranges, that hold
exponentially more elements, receive exponentially smaller
portions ε j of the privacy budget (see Section 5 for details).
6An undeﬁned ε j can be avoided by using an additional discretization
of the universe, with different subrange endpoints, and switching to it if a
(differentially private) check suggests ni j = 0 [27].
u(D,R ). Recall, that
According to Lemma 1 we have Pr
USENIX Association
29th USENIX Security Symposium    2153
MPC protocol
Output / Functionality
Rec((cid:104)a(cid:105))
a, reconstructed from (cid:104)a(cid:105)
Add((cid:104)a(cid:105),(cid:104)b(cid:105))
(cid:104)a + b(cid:105)
Sub((cid:104)a(cid:105),(cid:104)b(cid:105))
(cid:104)a− b(cid:105)
Mul((cid:104)a(cid:105),(cid:104)b(cid:105))
(cid:104)a· b(cid:105)
Mod2m((cid:104)a(cid:105),b)
(cid:104)a mod 2b(cid:105), where b is public
Trunc((cid:104)a(cid:105),b)
(cid:104)(cid:98)a/2b(cid:99)(cid:105), where b is public
(cid:104)r(cid:105) with uniform random b-bit value r
Rand(b)
Choose((cid:104)a(cid:105),(cid:104)b(cid:105),(cid:104)c(cid:105))
(cid:104)a(cid:105) if bit c = 1 otherwise (cid:104)b(cid:105)
LT((cid:104)a(cid:105),(cid:104)b(cid:105))
(cid:104)1(cid:105) if a < b else (cid:104)0(cid:105)
Int2FL((cid:104)a(cid:105))
converts integer a to secret shared ﬂoat
Table 2: Basic MPC protocols [5, 6] used in EM∗. We preﬁx
protocols for integers with Int and ﬂoats with FL.
4 MPC for Differentially Private Median
In the following, we describe details of our protocol EM∗,
which implements ideal functionality FEM∗, analyse its run-
ning time and security.
On a high-level, our protocol recursively selects the best
subrange until the DP median is found: First, each party lo-
cally evaluates a utility score (or weight) for each subrange.
They combine their results into a global result. Then, they
select a subrange based on the combined result. We use up-
per case letters to denote arrays in our protocol, and A[ j]
denotes the jth element in array A. Our protocol uses integers
as well as ﬂoating point numbers. We adopt the notation from
Aliasgari et al. [5] and represent a ﬂoating-point number f
as (1− 2s)(1− z)· v· 2x with sign bit s set when the value
is negative, zero bit z only set when the value is zero, lv-bit
signiﬁcand v, and lx-bit exponent x. The sharing of a ﬂoating
point value f is a 4-tuple ((cid:104)v(cid:105),(cid:104)x(cid:105),(cid:104)s(cid:105),(cid:104)z(cid:105)), which we abbre-
viate as (cid:104) f(cid:105)FL. To refer to, e.g., the signiﬁcand v of f we will
write f.v. (Privacy violations and mitigations w.r.t. limited
machine precision are discussed in Appendix D.) The basic
MPC protocols used in our protocol are listed in Table 2. We
preﬁx MPC protocols for integers with Int and ﬂoating point
versions with FL.
4.1 Subrange Selection
On a high level, protocol EM∗, implemented in Algorithm 1,
computes selection weights for possible outputs (via Algo-
rithm 2) and selects an output according to these weights
(via Algorithm 3 or 4). We assume that the universe U and
combined data size n are known to all parties (note that the
latter can be hidden via padding [3]). Recall, that efﬁcient