### 0-7803-8367-2/04/$20.00 ©2004 IEEE

**Abstract**
Existing techniques and methods can detect the presence of certain types of rootkits on a computer system. However, these methods are limited to indicating that a system has been compromised by a rootkit. We are developing a methodology to determine whether a detected rootkit is known or if it is a modified or entirely new variant. In this paper, we present an application of our methodology against a previously unseen rootkit collected from the Georgia Tech Honeynet. Our analysis process identifies specific characteristics of the rootkit, enabling subsequent detections. This information will assist system administrators, researchers, and security personnel in taking the best possible recovery actions and preventing further security incidents involving rootkits.

**Index Terms:** forensics, Honeynet, rootkits, signatures

### I. Introduction
Rootkits have recently garnered significant attention due to their ability to conceal malicious activities and programs. Prior to the advent of rootkits, system utilities were generally trusted to provide accurate information to system administrators. Modern attackers have developed sophisticated methods to hide their activities, making rootkits a serious threat to networked computer systems.

Modern operating systems are vulnerable to various exploits that allow hackers to gain root access. Once they have root access, hackers can install rootkits on compromised systems. System administrators need to be aware of the threats posed by rootkits and must be able to recognize if a particular rootkit has been installed on their systems.

Our efforts include using a Honeynet to collect new rootkit exploits. While rootkits are available from various sources, including the Internet, the Honeynet offers a unique opportunity to capture rootkits that may not have been previously seen by other researchers. These rootkits are targeted against live systems on the Honeynet that have been compromised by hackers.

On June 1, 2003, a system on the Georgia Tech Honeynet was compromised, allowing a hacker to gain root-level access and install a rootkit. By adhering to principles of data capture and control, we were able to capture the exploit and prevent the system from being used to compromise other systems.

#### A. Target System Description
The target system was a standard Red Hat Linux 6.2 installation running the Linux 2.2 kernel. The system was configured with all available packages and no special modifications. The default installation process was followed, and no additional services beyond those started by default were enabled. The following ports were open on the system:
- 21 (FTP)
- 23 (Telnet)
- 25 (SMTP)
- 79 (Finger)
- 98 (Linux conf)
- 111 (Sun RPC)
- 113 (Auth)
- 513 (Login)
- 514 (Shell)
- 515 (Printer)
- 954 (Unknown)
- 1024 (KDM)
- 1025 (Listen)
- 1033 (Net info)
- 6000 (X11)

#### B. Method of Compromise
At 10:34 AM UTC on June 1, 2003, an exploit was launched against the FTP daemon (port 21) to gain root-level access. The FTP server running on the system was wu-ftpd 2.6.0, which is known to be vulnerable to published exploits. The attack was successful, and the hacker gained root access. Figure 1 shows the start of the TCP stream extracted from the Honeynet data, with the string "RNFR ././" indicating the WU-FTP exploit.

**Figure 1: Start of Exploit**

Figure 2 confirms the system compromise, showing the hacker querying the system for their ID, which returned a user ID (UID) of 0 (root). The hacker then added a user named "andrey" with the password "andrey" to the system.

**Figure 2: System Compromise Indication**

With root access, the hacker installed a rootkit called 'r.tgz' via a telnet session using the `wget` command. We believe this particular rootkit has not been publicly analyzed before. Although there is an SSH rootkit with the same name, its characteristics, including file size, differ from the one installed on the target system.

The hacker extracted and ran the exploit code from the 'r.tgz' file. Figure 3 shows the Honeynet logs of the hacker's session. The rootkit deleted all traces of itself after installation, but we were able to reconstruct the hacker's actions using the Honeynet logs.

**Figure 3: Installation of 'r.tgz' Rootkit**

### II. Methodology to Characterize Rootkit Exploits
We applied our methodology to the rootkit retrieved from the Georgia Tech Honeynet. The following steps describe our approach to identify the specific delta (∇) of a rootkit targeting the Linux operating system. This concept is detailed in our paper "A Methodology to Detect and Characterize Kernel Level Rootkit Exploits Involving Redirection of the System Call Table" presented at the Second International Information Assurance Workshop [6]. While this investigation focuses on Linux, the methodology should be applicable to other UNIX-like operating systems.

1. **Start with a clean installation** of the specific kernel version of the operating system targeted by the rootkit.
2. **Install a kernel-level debugger** on the system. This may require recompiling the kernel.
3. **Install and run a file integrity checker** on the system. Select target directories based on the original rootkit installation.
4. **Install a rootkit detection program** such as `chkrootkit` to detect existing and potential new rootkit exploits.
5. **Install a kernel integrity check program** like `kern_check` to ensure the system call table's integrity. Run this program to establish a baseline.
6. **Make a copy of the kernel text segment** via `/dev/kmem` for future comparison. Any deviation could indicate a kernel-level rootkit.
7. **Run the file integrity checker and rootkit detection program** on the clean system to establish a baseline.
8. **Install the rootkit** on the target system, following the original installation steps.
9. **Run the file integrity checker** and note the results. Some rootkits may not be detected by this method.
10. **Run the rootkit detection program** (`chkrootkit`). If a known rootkit is detected, it should be identified. If not, it may be a modified or new rootkit.
11. **Run the kernel integrity check program** to detect any modifications to the system call table. Note the modified system calls.
12. **Compare the kernel text code** with the original copy. Differences may indicate a new type of kernel-level rootkit.

These steps help classify a rootkit as existing, modified, or entirely new.

### III. Analysis Process
The Georgia Tech Honeynet captured the entire exploit session, including downloaded files and remote connections made by the hacker. This provided us with the scripts and files used to install the 'r.tgz' rootkit. We set up a baseline system with the same configuration as the compromised system (Red Hat 6.2 with Linux 2.2.14 kernel).

Following the outlined procedures, we installed a kernel-level debugger (kdb), a file integrity checker (AIDE), and a rootkit detection program (chkrootkit). We also made a copy of the kernel text segment via `/dev/kmem`. After establishing a clean baseline, we infected the system with the 'r.tgz' rootkit.

**File Integrity Check:**
Running AIDE on the infected system indicated that 2 files were added and 178 files were changed. Initial analysis of the installation scripts did not account for all these changes. Figure 4 shows the AIDE results.

**Figure 4: AIDE Results on r.tgz Infected System**

**Rootkit Detection:**
Running `chkrootkit` with the current binaries detected one infected system binary (`ifconfig`) and five suspicious files, possibly related to the "Showtee" and "Romanian" rootkits. Using known good binaries, `chkrootkit` detected the same changes plus five additional binaries (`du`, `ifconfig`, `killall`, `ls`, and `pstree`). The lkm check also indicated hidden processes. These differences suggest that the 'r.t.gz' rootkit modified some system binaries used by `chkrootkit`.

In conclusion, using known good binaries is essential for accurate rootkit detection. The five files detected by both AIDE and `chkrootkit` confirm the rootkit's modifications. These results are used to characterize and classify the rootkit.