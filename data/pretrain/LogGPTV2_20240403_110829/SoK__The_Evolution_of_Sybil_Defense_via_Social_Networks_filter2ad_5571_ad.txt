The ﬁrst such “local” algorithm was developed by Spiel−
man and Teng [32]. Very roughly, their idea is to associate
a weight with each node and to identify as part of the com−
munity all nodes whose weight exceeds a certain threshold.
To determine the weight of a node they effectively run many
truncated random walks of the same length t ∈ ˜O(φ
−1), all
originating from the same node (the seed): a node’s weight
is given by the frequency with which it is visited normalized
by degree. The potential of this algorithm for sybil detection
becomes evident once one interprets the weight of a node
v as a measure of the trust that the seed node puts in v.
Indeed, the recent sybil detection protocol SybilRank [7] is
essentially an implementation of the algorithm of Spielman
and Teng, run using multiple seed nodes.
Since the work of Spielman and Teng, however, the use
of truncated random walks for computing low conductance
cuts has been further reﬁned. In particular, Andersen, Chung
and Lang [3] originate many random walks from the honest
seed, as in [32], but the length of their random walks, instead
of being ﬁxed, is determined by means of a (geometri−
cally distributed) random variable. This algorithm has two
properties that are extremely useful in our context. First, it
computes a set S whose conductance is smaller than what is
computable with the approach used in SybilRank. Second,
it is parallelizable and, crucially, its running time depends
not on the size of the entire graph, but only on the size of
S.
Andersen and Perez [27] and, very recently, Gharan and
Trevisan [24] have proposed further improvements. It is not
immediately obvious, to us at least, if these algorithms can
be used by an honest seed to rank other nodes according to
its trust in them. For this reason, we will focus henceforth
on the method proposed in [3], which naturally computes
such ranking.
A. Discussion
Formalizing community detection in terms of Problem 2
allows us to draw from the rich literature on random−walk−
based algorithms. Among them, the algorithm of Andersen,
Chung and Lang stands out for the combination of its
features: it supports node ranking; the cut it computes has
smaller conductance than most of its peers; its running time
depends on the size of the community, not that of the graph;
and it is easy to parallelize. In the next section we will see
that this algorithm solves Problems 1 and 2 simultaneously,
i.e., it is able to identify a community of honest nodes
containing the honest seed, without being lured into the sybil
region. Further, we will prove the ﬁrst theoretical guarantees
on the performance of a community detection algorithm in
the context of sybil defense and show experimentally that
the algorithm is quite competitive with the state of the art.
389
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:41 UTC from IEEE Xplore.  Restrictions apply. 
VI. A DEEP DIVE: PERSONALIZED PAGERANK AND
LOCAL DEFENSE
In this section we analyze in some depth the “variable
length” random walk algorithm of Andersen, Chung and
Lang [3], which from now we refer to as ACL. Since ACL
is based on the normalized stationary distribution of the
Personalized PageRank [13] (PPR) random walk, we start
by reviewing PPR’s deﬁnition.
Starting from an initial vertex v (which in our application
will be an honest seed), at each step in the walk a pebble
returns to v with probability α and moves to a uniformly
random neighbor of its current location with probability
1 − α. This random walk has a unique stationary distribu−
tion [3] that we denote as pα,v := (p1, . . . , pn). Clearly, this
distribution depends on the starting node v and the jumpback
parameter α.
Intuitively, it is as if, starting from the honest seed, we
performed many random walks whose length is determined
by means of a geometric random variable: a random walk
has length k with probability α(1 − α)k−1 and, as it is
−1. Note that long walks are
well−known, expected length α
likely to be rare—their probability decays exponentially—
while short walks in the neighborhood of the honest seed
are common. In this fashion, the nodes in the “community”
to which the honest seed belongs should be visited most
frequently. The weight pα,v(u) that a node u receives,
intuitively, is proportional to the number of times it is visited
when “many” random walks are performed. ACL uses the
PPR limit distribution, for a given honest seed v and a given
α, to assign a “trust” value to each vertex u in the network
as follows:
(3)
tα,v(u) :=
pα,v(u)
deg(u)
Sorting according to tα,v in descending order produces a
ranking of the nodes from the point of view of the verifying
node v, from the most trustworthy to the least trustworthy.
This ranking is signiﬁcantly more robust than that ob−
tained by methods based on PageRank (see for example
EigenTrust [29], TrustRank [48]) or that apply PPR di−
rectly [22]. First, since a random walk can reset only to the
seed node, this ranking is immune to all attacks to PageRank
based on exploiting random walks that jump back to a spam
node [8]. Second, it includes a normalization step that is
crucial to obtain the formal guarantees and experimental
performance we are seeking: in particular, it prevents high−
degree sybil nodes from spuriously outranking less popular
honest nodes just by virtue of their high degree.
We now prove that this ranking achieves precisely what
we are looking for: it deﬁnes a low−conductance cut con−
taining the honest seed and almost no sybil nodes, thereby
solving Problem 1.
Let us assume that the degree distribution of the honest
region H follows a power law and that S is a subset of
390
−1.
nodes in H. Let τ be the mixing time of the graph induced
by S, and let α := (10τ )
Theorem 3. Let 0 ≤  ≤ 1
2 be a constant and let
(cid:4) ⊂ S
cut(S, S) = o(|S|τ
of size |S
(cid:4)| ≥ (1 − )|S| such that, for every node v ∈ S
(cid:4)
,
the ﬁrst |S| positions of the ranking induced by tα,v contain
at least a 1 − o(|S|) fraction of vertices from S.
−1). Then, there exists a subset S
This theorem, proved in [2], shows that almost all vertices
of S can be used as seeds to obtain a ranking whose ﬁrst
|S| positions consist almost only of honest nodes from S,
thereby essentially solving Problem 1. Probabilistically, if
we pick a random seed inside the honest community S
then, with probability 1 −  the corresponding ranking will
correctly white−list almost all vertices in S.
We are now ready to discuss how ACL provides an
arbitrarily good approximation of this ranking.
A. Computing the ranking
The difﬁcult step in producing the ACL ranking lies
in producing the PPR distribution, which, as a stationary
distribution, is inefﬁcient to compute in general. ACL con−
sequently relies on a push−ﬂow algorithm for approximating
it quickly [3]. This algorithm, which we dub Approximate
Personalized PageRank (APPR), has three input parameters:
a starting vertex v, a jump back probability α, and an
error parameter . APPR computes an approximate vector
q
v,α := (q1, . . . , qn) that is an approximation of the PPR
vector pv,α.
To produce the approximate vector q
v,α, APPR assigns to
the starting node v an amount of “trust” equal to 1, which
then ﬂows from v to the rest of the network through a series
of “trickle” operations. Each push−ﬂow operation simulates
one step of the random walk by transferring a small amount
of trust from a vertex u to its neighbor w in proportion to the
probability that the random walk moves from u to w in one
step. For each node v, APPR keeps track of two quantities:
a ppr(v) value and a residual value r(v). The former is
the current approximation of the PPR of the node v, while
the latter is the amount of total residual trust that the node
is allowed to distribute to itself and to its neighbors. The
algorithm is described as Algorithm 1 (for a full discussion
see [3]).
The ﬁnal step in ACL is to degree−normalize the approx−
imate vector q
v,α produced by APPR as follows:
ACLv,α :=
q
v,α(u)
deg(u)
.
(4)
is important
To understand the ACL algorithm it
to
appreciate the effect of changing the α and  parameters.
Theorem 3 tells us how we should set the value of α. The
dependence on  is also reasonably straightforward. Since 
measures how far we are from the limit distribution, smaller
values of  imply longer running times. The good news is
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:41 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 AP P R(v, α, )
ppr(u) = 0 ∀u ∈ V
r(u) = χv
Q = {v}
for |Q| (cid:8)= 0 do
Extract u from Q.
while r(u) ≥ d(u) do
ppr, r = P ushu(ppr, r)
Insert in Q all the nodes w in the neighborhood of
u such that r(w) ≥ d(w)
end while
end for
return ppr
i
i
n
o
s
c
e
r
P
(cid:4)
Algorithm 2 P ushv(ppr, r)
Ensure: ppr
exceptions
(cid:4)
ppr
(v) = 1−α
(cid:4)
r
for all u ∈ V : (u, v) ∈ E do
(cid:4)
2d(v) r(v)
(u) = r(u) + 1−α
(v) = ppr(v) + αr(v)
2 r(v)
r
end for
return ppr
(cid:4)
(cid:4)
e r
= ppr and r = r
(cid:4)
with the following
i
i
n
o
s
c
e
r
P
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 0.2
 0.4
0.1
0.01
0.001
 0.6
Recall
(a) p = 0.01
 0.8
 1
 1.2
 1.2
 1
 0.8
 0.6
 0.4
 0.2
that this dependence on precision is linear: it is possible
to show that the running time of the algorithm is O( 1
α )
and therefore, for ﬁxed α, the running time is O( 1
 ). Note
that this offers an interesting trade−off between speed and
precision.
A second consequence of the choice of  comes from
the way the push−ﬂow algorithm works. It can be shown
that all vertices w whose frequency pw in the stationary
distribution is smaller than  receive a trust of 0 from APPR.
When APPR stops, nodes with a non−zero ppr value deﬁne
a connected component around the source, while all vertices
outside have zero trust.
When ACL is computed with respect to the same seed
with two values  < δ, the non−zero portion of the −ranking
H
H
δ
H

H
= 10−3
= 10−4
= 10−5
= 10−6
= 10−4 = 10−5 = 10−6 = 10−7
0.84
0.83
0.81
0.82
0.79
0.73
0.82
0.79
0.73
0.99
Table IV
TAU−KENDALL DISTANCE CORRELATION BETWEEN AN −RANKING AND
A δ−RANKING FOR THE FACEBOOK SNAPSHOT. THE INDEX IS A REAL
NUMBER BETWEEN +1 (PERFECT CONCORDANCE) AND −1 (REVERSE
ORDER). A VALUE OF 0 INDICATES THAT ONE RANKING IS A RANDOM
PERMUTATION OF THE OTHER. SIMILAR HIGH CORRELATION WAS
OBSERVED FOR DIFFERENT SNAPSHOTS OF SOCIAL NETWORKS.
391
 0
 0
 0.2
 0.4
0.1
0.01
0.001
 0.6
Recall
(b) p = 0.10
 0.8
 1
 1.2
Impact of varying α. Precision vs Recall graph with Facebook−
Figure 5.
New Orleans data set under (a) a weak attack (edge density p = 0.01) and
(b) a strong attack (edge density p = 0.1).
1, . . . , u
is longer than the corresponding preﬁx of the δ−ranking. The
surprising ﬁnding is that these two rankings, u
n and
uδ
1, . . . , uδ
n are almost the same, as can be measured for
instance using the Tau−Kendall distance (see Table IV). This
is a very useful property: it says that if we want to identify
quickly a set of trusted nodes, we can do so just by using a
larger value of . Because the running time of the protocol
is dependent on the values of α and  and not the size of
the graph, this allows ACL to effectively scale in situations
where partial node rankings sufﬁce.
To conclude, we remark that Theorem 3 holds for the
values deﬁned by Equation 3 and not for their approximation
(Equation 4). We expect however this approximation to work
well in practice. We verify this next.
B. Comparative Evaluation