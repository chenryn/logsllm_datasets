了解完基本流程后，为了更加了解TP框架，还需要了解下数据的传递。主要涉及的类为Db 
Query Connection等
我们借助一句原生查询来了解数据库传递的过程，在index Controller中写入这样一句
Db::query("select * from think_user where status=1");
当我第一次去Db类中看时，没有找到query方法，只找到了一大段注释
这时我们可以下断点来分析
首先我们进入了Db类的__callStatic方法，当一个控制器调用了不存在的方法时，这个魔术
方法就会被调用
里面调用了call_user_func_array方法 可以很明显的看到，第一个参数是一个数组，那么也
就是调用了self::connect()返回对象的method方法  可以看下此时的参数情况 $method为
我们语句中的query方法，args就是我们执行的sql语句了
现在只要弄清楚self::connect() 的返回即可，它会返回一个对象 参数为数据库连接对象实
例
首先看self::$connection的赋值过程，它是一个Connection对象实例
调用了Connection的instance方法 参数其实为config
可以看到，根据事先定义好的type 来决定选用哪个数据库 进行数据连接，默认为Mysql
说明一点，Connector中的类都继承了Connection类
然后看一下这时的调用栈，因为Mysql类继承了Connection类，所以实例化时也会调用
Connection的构造方法
跟进Connection的construct方法，它的参数只有一个config，不过这也够了
这一步就是Connection的初始化
此时我们解决了self::$connection 
接下来看$query $query的值为"\think\db\Query" 说明self::connect()方法最后会返回一
个Query类
所以最后call_user_func_array调用的即是Query类的query方法
到此 分析结束
经过这个分析，我们遇到了Db类 Connection类 Query类，在这里说明下这几个类
首先Db类  
数据库操作的入口类，这个类很简单，主要就一个connect方法，根据config参数连接数据
库，注意这里的连接并非真正实现连接，只是做好连接前的一些参数准备，只有在实际查询
的时候才会连接数据库，真正的连接在Connection类的connection方法中
find() 等函数会触发实际查询
Db类都是静态方法调用，但看起来这个类啥都没实现，那是怎么操作数据库的呢，其实就
是封装了数据库操作方法的静态调用（利用__callStatic方法）
理论上来说，框架并不依赖Db类，该类的存在只是为了简化数据库抽象层的操作而提供的
一个工厂类，否则你就需要单独实例化不同的数据库连接类。关键还是这里的代码
所有的数据库操作都是经过Db类调用，并且Db类是一个静态类，但Db类自身只有一个公
共方法connect。
注:一下文章参考自 https://www.kancloud.cn/thinkphp/master-database-and-
model/265552
连接器类 Connection
连接类的主要作用就是连接具体的数据库，以及完成基本的数据库底层操作，包括对分布
式、存储过程和事务的完善处理。而更多的数据操作则交由查询类完成而更多的数据操作则
交由查询类完成。
连接器类有如下子类
如果是仅仅使用原生SQL查询的话，只需要使用连接类就可以了（通过调用Db类完成）
连接器类的作用小结：
连接数据库；
获取数据表和字段信息；
基础查询（原生查询）；
事务支持；
分布式支持；
查询器类Query
链式查询的主要支持者
除了基础的原生查询可以在连接类完成之外，其它的查询操作都是调用查询类的方法，查询
类内完成了数据访问层最重要的工作，衔接了连接类和生成类，统一了数据库的查询用法，
所以查询类是不需要单独驱动配合的，我们也称之为查询器。无论采用什么数据库，我们的
查询方式是统一的，因为数据访问层核心只有一个唯一的查询类：think\db\Query。
Query类封装了所有的数据库CURD方法的优雅实现，包括链式方法及各种查询，并自动使
用了PDO参数绑定（参数自动绑定是在生成器类解析生成SQL时完成），最大程度地保护
你的程序避免受数据库注入攻击，查询操作会调用生成类生成对应数据库的SQL语句，然后
再调用连接类提供的底层原生查询方法执行最终的数据库查询操作。
所有的数据库查询都使用了PDO的预处理和参数绑定机制。你所看到的大部分数据库方法
都来自于查询类而并非Db类，这一点很关键，也就是说虽然我们始终使用Db类操作数据
库，而实际上大部分方法都是由查询器类提供的方法。
生成器类Builder
生成类的作用是接收Query类的所有查询参数，并负责解析生成对应数据库的原生SQL语
法，然后返回给Query类进行后续的处理（包括交给连接类进行SQL执行和返回结果处
理），也称为（语法）生成器。生成类的作用其实就是解决不同的数据库查询语法之间的差
异。查询类实现了统一的查询接口，而生成类负责数据库底层的查询对接。
生成类一般不需要自己调用，而是由查询类自动调用的。也可以这么理解，生成类和查询类
是一体的，事实上它们合起来就是通常我们所说的查询构造器（因为实际的查询操作还是在
连接器中执行的）。
通常每一个数据库连接类都会对应一个生成类，框架内置的生成类包括：
以上，我们大概了解了TP的数据库操作。
推荐https://github.com/hongriSec/PHP-Audit-Labs/tree/master/Part2/ThinkPHP5 
中sql注入相关的文章分析，写的很清楚，可以自己动手调试下，会对TP的数据库处理机制
更加了解