• Setup(1λ, 1N ) → (pp, qk): On input the security parameter
λ and a bound on the database size N, the setup algorithm
outputs a query key qk and a set of public parameters pp.
• Query(qk, idx) → (st, q): On input the query key qk and an
index idx, the query algorithm outputs a state st and a query
q.
• Answer(pp,D, q) → r: On input the public parameters pp,
a database D = {d1, . . . , dN}, and a query q, the answer
algorithm outputs a response r.
• Extract(qk, st, r) → di: On input the query key qk, the state
st, and a response r, the extract algorithm outputs a database
record di.
The algorithms should satisfy the following properties:
• Correctness: For all λ ∈ N, all polynomials N = N (λ), (cid:96) =
(cid:96)(λ), and all databases D = {d1, . . . , dN} where each di ∈
{0, 1}(cid:96), and all indices idx ∈ [N ],
Pr[Extract(qk, st, r) = di] = 1,
where (pp, qk) ← Setup(1λ, 1N ), (st, q) ← Query(qk, idx),
and r ← Answer(pp,D, q).
• Query privacy: For all polynomials N = N (λ) and all
efﬁcient adversaries A, there exists a negligible function
negl(·) such that for all λ ∈ N,
(cid:104)AOb(qk,·,·)(1λ, pp) = b
(cid:105) − 1
(cid:12)(cid:12)(cid:12)(cid:12) = negl(λ),
2
(cid:12)(cid:12)(cid:12)(cid:12)Pr
where (pp, qk) ← Setup(1λ, 1N ), b R← {0, 1}, and the oracle
Ob(qk, idx0, idx1) outputs Query(qk, idxb). This deﬁnition
captures reusability of pp and qk.
APPENDIX B
CIPHERTEXT TRANSLATION ALGORITHMS
In this section, we give a sketch of the correctness proofs for
the main ciphertext translation algorithms from Section II-A.
We refer to the full version of this paper [42] for the formal
analysis.
ScalToMat. To see correctness of ScalToMat, let c0 = (c0, c1)
be a Regev encoding of a scalar µ ∈ Rq with respect to the se-
cret key s0 and error e. Let W ← ScalToMatSetup(s0, S1, z)
1 W = E −
and C1 ← ScalToMat(W, c0). Observe that ST
(cid:21)
˜s0Gn,z. Then,
(cid:20) 01×n
ST
1 C1 = ST
1 WG−1
n,z(c0In) + ST
1
c1In
n,z(c0In) − ˜s0c0In + c1In
n,z(c0In) + In(sT
= EG−1
= EG−1
= µIn + eIn + EG−1
n,z(c0In),
0 c)
and we see that C1 is an encoding of µIn with new error
eIn + EG−1
n,z(c0In). This transformation introduces a ﬁxed
additive error of EG−1
n,z(c0In), where E is freshly sampled
from the error distribution.
RegevToGSW. To
see
of RegevToGSW,
suppose
of
c1, . . . , ctGSW
∈ Rq under sRegev with errors
µ, µzGSW, . . . , µztGSW−1
e1, . . . , etGSW ∈ Rq. Let SGSW be the GSW secret
ck ← RegevToGSW(sRegev, SGSW, zGSW, zconv),
key,
Let
and C
ˆe = [ e1 |···| etGSW ]T. Consider now the components
of ST
• By construction of V from Eq. (III.1), we have that
RegevToGSW(ck, c1, . . . , ctGSW ).
correctness
are
encodings
Regev
←
GSW
GSWC:
GSWV = E − ˜sGSW · (sT
ST
zconv ( ˆC) = Eg−1
GSWVg−1
ST
= Eg−1
zconv ).
Regev ⊗ gT
zconv ( ˆC) − ˜sGSWsT
zconv ( ˆC) − ˜sGSW(µgT
Regev
ˆC
+ ˆeT).
zGSW
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
15944
• By correctness of ScalToMat (Section III-A), for i ∈
GSW · µIn + Ei. Letting
[tGSW], we have ST
˜E = [ E1 | ··· | EtGSW ], we can then write
GSWCi = zi−1
GSW[ C1 | ··· | Ct ] = µgT
ST
⊗ In + ˜E.
zconv ( ˆC) − ˜sGSWˆeT | ˜E ] · Π ∈ Rn×mGSW
Let ˜E(cid:48) = [ Eg−1
putting everything together, we can write
zGSW
GSWC =(cid:2)−µ˜sGSWgT
ST
q
(cid:3) Π + ˜E(cid:48)
| µgT
GSWGn+1,zGSW + ˜E(cid:48).
zGSW
zGSW
⊗ In
= µST
. Now,
Thus, C is a GSW encoding of µ with error ˜E(cid:48). This
transformation scales the initial error ˆe in the Regev encodings
by ˜sGSW. Since the components of the secret key are drawn
from the error distribution,
this only increases the noise
magnitude by a few bits. Otherwise, the noise increases by
a small additive factor, much like the case with the scalar-to-
matrix transformation from Section III-A.
COEFFICIENT EXTRACTION ON REGEV ENCODINGS
APPENDIX C
In this section, we recall the coefﬁcient expansion algorithm
by Angel et al. [5] and extended by Chen et al. [39]. This
approach relies on the ability to homomorphically compute
automorphisms on Regev-encoded polynomials. We review this
below.
Automorphisms. As usual, let R = Z[x]/(xd + 1) where d is
a power of two. For a positive integer (cid:96), we write τ(cid:96) : R → R
to denote the ring automorphism r(x) (cid:55)→ r(x(cid:96)). We can deﬁne
a corresponding set of automorphisms over Rq. For notational
convenience, we use τ(cid:96) to denote both sets of automorphisms.
We extend τ(cid:96) to operate on vectors and matrices of ring
elements (in both R and Rq) in a component-wise manner.
Automorphisms on Regev encodings. Similar to the other
translation protocols (Sections III-A and III-B), supporting
automorphisms requires knowledge of additional key-switching
matrices. We give the parameter-generation and automorphism
algorithms below:
• AutomorphSetup(s, τ, z): On input
the secret key s =
[−˜s | 1]T, an automorphism τ : Rq → Rq, and a decom-
position base z ∈ N, let t = (cid:98)logz q(cid:99) + 1. Sample a R← Rt
q,
e ← χt, and output the key
Wτ =
aT
˜saT + eT
+
01×t
−τ (˜s) · gz
∈ R2×t
q
• Automorph(Wτ , c): On input the automorphism key Wτ ∈
associated with an automorphism τ : Rq → Rq, and
R2×t
encoding c = (c0, c1) ∈ R2
z (τ (c0)) +
[ 0 | τ (c1) ]T.
q, output Wτ g−1
q
We refer to previous works [31, 71] for the correctness and
noise analysis for the automorphisms.
Coefﬁcient expansion algorithm. We recall the coefﬁcient
(cid:80)
expansion procedure by Angel et al. [5] and extended by
Chen et al. [39]. The algorithm takes a polynomial f =
i∈[0,2r−1] fixi ∈ Rq as input and outputs a (scaled) vector
(cid:20)
(cid:21)
(cid:20)
(cid:21)
of coefﬁcients 2r · (f0, . . . , f2r−1) ∈ Z2r
q . The algorithm
only relies on ring automorphisms τ(cid:96) : Rq → Rq and linear
operations, and can be implemented homomorphically on
encodings.
Algorithm 1: Coefﬁcient expansion [5, 39].
Input: a polynomial f =(cid:80)
i∈[0,2r−1] fixi ∈ Rq where
R = Z[x]/(xd + 1) and 2r ≤ d
2r · (f0, . . . , f2r−1) ∈ Z2r
q
(cid:96) ← 2r−i + 1
for j = 0 to 2i − 1 do
Output: the scaled coefﬁcients
1 f0 ← f
2 for i = 0 to r − 1 do
3
4
5
6
7
8 end
9 return f0, f1, . . . , f2r−1
end
j ← fj · x−2j
f(cid:48)
(cid:46) x−2j
fj ← fj + τ(cid:96)(fj) fj+2i ← f(cid:48)
j + τ(cid:96)(f(cid:48)
j)
= −xd−2j ∈ R
Remark C.1 (Homomorphic Expansion). By construction,
Algorithm 1 only requires scalar multiplication, addition, and
automorphisms over Rq. Thus, we can homomorphically
evaluate Algorithm 1 on a Regev encoding of a polyno-
mial f ∈ Rq to obtain (scaled) Regev encodings of the
coefﬁcients of f. To homomorphically compute r rounds of
Algorithm 1 on an encoding c, the evaluator will need access
to key-switching matrices W0, . . . , Wr−1 where Wi ←
AutomorphSetup(s, τ2r−i+1, z), s is the secret key associated
with c, and z ∈ N is the desired decomposition base (chosen
to control noise growth).
APPENDIX D
ADDITIONAL EXPERIMENTS
In this section, we provide some additional benchmarks and
evaluation of our system.
Optimizing for rate or throughput. In the the full version
of this paper [42], we also explore how we can trade-off the
server throughput or the rate of the protocol for query size or
the public parameter size.
Microbenchmarks. Finally, we provide a more ﬁne-grained
breakdown of the different components of the client’s and
server’s computation in Fig. 4. The client’s cost is dominated by
the key-generation procedure (which samples the key-switching
matrices needed for the query generation algorithm). While this
cost is non-trivial (≈ 700 ms), this only needs to be generated
once and can be reused for arbitrarily many queries. The
query-generation completes in under 30 ms, and the response-
decoding completes in under 1 ms.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
16945
Database
220 × 256B
(268 MB)
218 × 30KB
(7.9 GB)
214 × 100KB
(1.6 GB)
Metric
Param. Size
Query Size
Response Size
Computation
Rate
Throughput
Param. Size
Query Size
Response Size
Computation
Rate
Throughput
Param. Size
Query Size
Response Size
Computation
Rate
Throughput
Best Previous
1 MB
34 MB
66 KB
1.44 s
0.0039
186 MB/s
5 MB
63 KB
127 KB
52.99 s
0.2363
148 MB/s
5 MB
63 KB
508 KB
14.35 s
0.1969
114 MB/s
SPIRAL
14 MB
14 KB
21 KB
1.69 s
0.0122
333 MB/s
159 MB/s
18 MB
14 KB
84 KB
24.52 s
0.3573
321 MB/s
17 MB
14 KB
242 KB
4.92 s
0.4129
SPIRALSTREAM
SPIRALPACK
SPIRALSTREAMPACK
344 KB
8 MB
20 KB
0.86 s
0.0125
312 MB/s
3 MB
15 MB
62 KB
9.00 s
0.4803
874 MB/s
1 MB
8 MB
208 KB
2.40 s
0.4811
683 MB/s
14 MB