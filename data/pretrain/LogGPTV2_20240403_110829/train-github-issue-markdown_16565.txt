  * I have searched the issues of this repository and believe that this is not a duplicate.
## Expected Behavior
I am building a wrapper middleware in express to restrict an entire next
application from the public without a password and a username. It should catch
every get request that's coming through, check for a logged-in boolean on a
session found with an id from a session-cookie.
## Current Behavior
It works as expected for every normal browser http get request, however it
does not work for pages served through the next-router. I noticed this because
I had reused a logo component on the restriction page which simply linked to
'/' and even though the request went through the middleware and the correct
code was run (basic if else with a logged-in boolean) it did serve the
homepage.
## Steps to Reproduce (for bugs)
    const express = require('express')
    const next = require('next')
    const app = next({
        dir: '.',
        dev: process.env.NODE_ENV !== 'PRODUCTION'
    })
    const handle = app.getRequestHandler()
    const server = express()
    /* HARDCODED VALIDATE BOOLEAN */
    const authenticated = false
    app.prepare()
    .then(() => {
        /*
            Page restriction middleware
        */
        server.get('*', (req, res) => {
            console.log(req.path)
            if (!authenticated) {
                console.log('Not authenticated.')
                return app.render(req, res, '/restriction')
            } else {
                console.log('Authenticated.')
                return handle(req, res)
            }
        })
        const PORT = process.env.PORT || process.env.port || 3000
        server.listen(PORT)
    })
This code should never log 'Authenticated' much less actually serve the
requested resource right?  
Here's the thing, it never logs 'Authenticated' but it does serve any page you
want if it was requested with next/link.
Front-end to reproduce:
index.js
    export default () =>
      Restricted page. You cant see this without bypassing the express routing middleware.
restriction.js
    import Link from 'next/link'
    export default () =>
        I am the magic resctriction bypasser.
What's sort of funny about this is that you can click on that Link in the
restriction page and then refresh the page and the middleware will render the
restriction page again.