including  clones  with  disordered  statements.  Their  focus  is  on 
detecting  semantic  code  clones,  and  it  is  unclear  how  their 
detected  code  clones  overlap  with  near-miss  code  clones  (the 
focus of XIAO). Such investigation is left for future work. 
Besides  advances  in  clone  detection,  recent  research  has  also 
made  progress  on  applying  clone  detection  in  various  software-
engineering  tasks  such  as  bug  detection  and  refactoring.  Near-
miss  code-clone  detection  has  been  used  to  help  identify  code-
refactoring opportunities [12][31] or find plagiarisms [25][26]. To 
search whether there are cloned copies of a piece of buggy code, 
Li  and  Ernst  proposed  CBCD  [23],  a  scalable  clone-search 
algorithm  that  compares  graph  isomorphism  over  program 
dependency  graphs.  At  Microsoft,  XIAO  has  also  been used  for 
searching  cloned  code  (e.g.,  detection  of  duplicated  vulnerable 
code)  and  finding  refactoring  opportunities;  comparing  to  these 
previous  approaches,  XIAO  is  more  general  and  can  be  used  in 
broader  scenarios  with  high  tunability,  scalability,  compatibility, 
and explorability. 
One  important  application  of  detecting  near-miss  code  clones  is 
helping engineers to identify potential bugs caused by inconsistent 
code  changes.  CP-Miner  [21] 
  detects  bugs  caused  by 
377
in  various 
languages. 
folder 
It  provides 
locations.  CP-Miner  provides  visualization 
inconsistently  renamed  identifiers.  The  approach  by  Jiang  et  al. 
[15] detects  inconsistent  contexts  of  detected  code  clones.  Since 
XIAO is able to detect near-miss code clones with arbitrary gaps, 
XIAO has the capability of detecting more types of bugs caused 
by inconsistent code changes.  
There are various tools for code-clone detection available as either 
open-source tools or commercial tools. Each one performs well in 
only some aspects. Most of them can detect type-I/II clones well, 
but  have  limited  capability  on  detecting  type-III  clones.  Few  of 
them  can  detect  code  clones  with  disordered  statements.  Few  of 
them provide good tunability. In contrast, XIAO can detect type-
III  code  clones  with  or  without  disordered  statements,  and  has 
high tunability on the tolerance of inserted/deleted statements. 
Some  of  existing  tools  provide  Graphical  User  Interfaces  (GUI) 
available for exploring code clones. There exists a GUI front-end 
called  GemX  for  CCFinder  [18]  to  allow  users  to  interactively 
explore clones with different metrics, such as LOC and distance 
of 
for 
highlighting  clone  differences  without  the  concept  of  blocks. 
Simian 3 is  a  Similarity  Analyzer  for  identifying  duplication  in 
code  written 
limited 
explorability, displaying only one snippet from each clone group 
(assuming  all  copies  from  a  clone  group  are  exactly  the  same). 
CloneDR [5][6] provides a summary report and individual clone-
set reports, but provides no visualization of clone differences. The 
uniqueness  of  XIAO  in  terms  of  explorability  lies  in  supporting 
rich  interaction  and  visualization:  intuitive  visualization  of 
differences between cloned snippets besides allowing users to tag 
code clones. 
There  are  some  available  tools  with  features  of  code-clone 
management,  such  as  CloneTracker  [9]  and  SimScan 4 . 
CloneTracker  is  useful  for  engineers  to  track  code  clones. 
SimScan also provides GUI for clone management and tracking, 
supporting simultaneous editing.  XIAO’s tagging mechanism can 
serve  for  similar  purposes  but  XIAO  provides  both  clone 
detection  and  management  with  high  tunability,  scalability, 
compatibility, and explorability. 
The most recent related work is the work done by Jang et al. [13]. 
They developed a scalable approach for detecting unpatched code 
clones.  Their  approach  is  language  agnostic  and  produces 
relatively low false-detection rate. They applied their approach on 
entire  OS  distributions.  While  sharing  the  features  of  high 
scalability  and  compatibility  as  their  approach,  our  approach  is 
applied  on  commercial  codebases,  and  is  designed  to  be 
continuously used by engineers in their daily practices. Therefore, 
our  approach  has  unique  features  such  as  high  tunability  and 
explorability. 
8.  CONCLUSION  
In this paper, we report our experiences of carrying out successful 
technology transfer of our new approach of code-clone detection, 
called  XIAO.  XIAO  has  been  integrated  into  Microsoft  Visual 
Studio  2012,  to  be  benefiting  a  huge  number  of  engineers  in 
industry.  We  have  discussed  main  success  factors  of  XIAO:  its 
high  tunability,  scalability,  compatibility,  and  explorability.  We 
have  also  presented  empirical  results  on  in-practice  applying 
XIAO on real scenarios within Microsoft for the tasks of security-
bug  detection  and  refactoring.  The  results  demonstrate  the 
3 http://www.harukizaemon.com/simian/index.html 
4 http://blue-edge.bg/simscan/ 
interns  for 
thank  our  (former)  colleagues  and 
benefits of XIAO in these tasks. In addition, it was observed that 
applying XIAO on detecting duplicated vulnerable code (with the 
target users as security engineers) has occurred much more often 
than  the  applying  XIAO  on  refactoring  (with  the  target  users  as 
software engineers).  
9.  ACKNOWLEDGMENTS 
their 
We 
contribution on the implementation of XIAO: Sanhong Chen, Yan 
Duan,  Tiantian  Guo,  Shi  Han,  Ray  Huang,  Qi  Jiang,  Feng  Li, 
Xiujun Li, Jianli Lin, Huiye Sun, Jinbiao Xu, Jiacheng Yao, and 
Chiqing Zhang. We thank our colleagues for their help and joint 
efforts  on  the  successful  tech  transfer  of  XIAO,  especially  Ian 
Bavey, Gong Cheng, Sadi Khan, Weipeng Liu, and Peter Provost. 
We  thank  our  colleagues  at  Microsoft  for  their  feedback  and 
discussion, especially Jonus Blunck, Andrew Fomichev, Shi Han, 
Xiaohui  Hou,  Peter  Nobel,  Landy  Wang,  Jinsong  Yu,  and  Qi 
Zhang. We also thank Simone Livieri for his help on evaluations 
of XIAO. 
10.  REFERENCES 
[1]  http://en.wiktionary.org/wiki/inversion_pair,  as  of  Feb.  26, 
2011. 
[2]  http://www.slideshare.net/icsm2011/lionel-briand-icsm-
2011-keynote 
[4] 
[3]  B. S. Baker. On finding duplication and near-duplication in 
large software systems. In Proc. WCRE, pages 86–95, 1995.  
I. D. Baxter, C. Pidgeon, and M. Mehlich. DMSR: Program 
transformations  for practical  scalable  software  evolution.  In 
Proc. ICSE, pages 625–634, 2004. 
I. D. Baxter, A. Yahin, L. Moura, M. Sant’Anna, and L. Bier. 
Clone detection using abstract syntax trees. In  Proc. ICSM, 
pages 368-377, 1998. 
[5] 
[6]  S.  Bellon,  R.  Koschke,  G.  Antoniol,  J.  Krinke,  E.  Merlo. 
Comparison  and  evaluation  of  clone  detection  tools,  TSE,  
33(9):577-591, 2007. 
[7]  A.  Bessey,  K.  Block,  B.  Chelf,  A.  Chou,  B.  Fulton,  S. 
Hallem,  C.  Henri-Gros,  A.  Kamsky,  S.  McPeak,  and  D.  R. 
Engler: A few billion lines of code later: using static analysis 
to find bugs in the real world. Commun. ACM 53(2):66-75, 
2010. 
[8]  Y.  Dang,  S.  Ge,  R.  Huang,  and  D.  Zhang.  Code  clone 
detection experience at Microsoft. In Proc. IWSC, pages  63-
64, 2011. 
[9]  E.  Duala-Ekoko  and M. P.  Robillard.  Tracking  code  clones 
in evolving software. In Proc. ICSE, pages 158-167, 2007. 
[10]  M.  Gabel,  J.  Yang,  Y.  Yu,  M.  Goldszmidt,  and  Z.  Su. 
Scalable and systematic detection of buggy inconsistencies in 
source code. In Proc. OOPSLA, pages 175-190, 2010. 
[11]  M. Gabel, L. Jiang, and Z. Su. Scalable detection of semantic 
clones. In Proc. ICSE, pages 321-330, 2008. 
[12]  Y.  Higo,  T.  Kamiya,  S.  Kusumoto,  and    K.  Inoue.  ARIES: 
Refactoring  support  tool  for  code  clone.  In  Proc.  WoSQ, 
pages 1-4, 2005. 
[13]  J.  Jang,  A.  Agrawal,  and  D.  Brumley.  ReDeBug:  Finding 
unpatched  code  clones  in  entire  OS  distributions.  In  Proc. 
S&P, pages 48-62, 2012. 
[14]  L. Jiang, G. Misherghi, Z. Su, and S. Glondu. DECKARD: 
Scalable  and  accurate  tree-based  detection  of  code  clones. 
Proc. ICSE, pages 96-105, 2007. 
[15]  L.  Jiang,  Z.  Su,  and  E.  Chiu.  Context-based  detection  of 
clone-related bugs. In Proc. ESEC/FSE, pages 55-64, 2007. 
[16]  E.  Juergens,  F.  Deissenboeck,  B.  Hummel,  and  S.  Wagner, 
Do code clones matter? In Proc. ICSE, pages 485-495, 2009. 
[17]  E. Juergens and N. Gӧde. Achieving accurate clone detection 
results. In Proc. IWSC, pages 1-8, 2010. 
[18]  T.  Kamiya,  S.  Kusumoto,  and  K.  Inoue.  CCFinder:  a 
multilinguistic  token-based  code  clone  detection  system  for 
large scale source code. TSE, 28(7):654–670, 2002. 
[19]  H.  Kim,  Y.  Jung,  S.  Kim,  and  K.  Yi.  MeCC:  Memory 
comparison-based clone detector. In Proc. ICSE, pages 301-
310, 2011. 
[20]  R. Koschke. Survey of research on software clones. In Proc. 
Duplication, Redundancy, and Similarity in Software, 2006. 
[21]  Z. Li, S. Lu, S. Myagmar, and Y. Zhou. CP-Miner: A tool for 
finding  copy-paste  and  related  bugs  in  operating  system 
code. Proc. OSDI, pages 289–302, 2004. 
[22]  M.  Li,  J.  Roh,  S.  Hwang,  and  S.  Kim.  Instant  code  clone 
search, In Proc. ESEC/FSE, pages 167-176, 2010. 
[23]  J. Li and M. D. Ernst. CBCD: Cloned buggy code detector. 
In Proc. ICSE, pages 310-320, 2012. 
[24]  S. Livieri, Y. Higo, M. Matushita, and K. Inoue. Very-large 
scale  code  clone  analysis  and  visualization  of  open  source 
programs using distributed CCFinder: D-CCFinder. In Proc. 
ICSE, pages 106-115, 2007.  
[25]  L.  Prechelt,  G.  Malpohl,  and  M. Philippsen.  JPlag:  Finding 
plagiarisms  among  a  set  of  programs.  Technical  report, 
University of Karlsruhe, Department of Informatics, 2000. 
[26]  R. Robbes, R. Brixtel, M. Fontaine, B. Lesner, and C. Bazin. 
Language-independent clone detection applied to plagiarism 
detection. In Proc. SCAM, pages 77-86,  2010. 
[27]  C.  K.  Roy,  J.  R.  Cordy,  and  R.  Koschke.  Comparison  and 
evaluation  of  code  clone  detection  techniques  and  tools:  A 
qualitative approach. In Science of Computer Programming, 
74(7):470-495, 2009. 
[28]  R. Tiarks, R. Koschke, and R. Falke. An assessment of type-
3 clones as detected by state-of-the-art tools. In Proc. SCAM, 
pages 67-76, 2009. 
[29]  Y.  Ueda,  T.  Kamiya,  S.  Kusumoto  and  K.  Inoue.  Gemini: 
Maintenance  support  environment  based  on  code  clone 
analysis. In Proc. IEEE METRICS, pages 67-76, 2002. 
[30]  M.  J.  Wise.  String  similarity  via  greedy  string  tiling  and 
running  Karp-Rabin  matching.  Department  of  Computer 
Science, 
Sydney, 
ftp://ftp.cs.su.oz.au/michaelw/doc/RKR  GST.ps,  December 
1993. 
University 
of 
[31]  L.  Yu  and  S.  Ramaswamy.  Improving  modularity  by 
refactoring  code  clones:  A  feasibility  study  on  Linux.  In 
SIGSOFT Notes, 33(2), 2008. 
378