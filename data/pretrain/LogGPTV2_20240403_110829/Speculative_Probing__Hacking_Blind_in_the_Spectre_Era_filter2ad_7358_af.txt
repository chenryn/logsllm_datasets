### Simplified and Optimized Text

#### 8. MITIGATIONS

**Preventing Probes:**
BlindSide's probes exploit memory error vulnerabilities and speculative execution. To mitigate these, one can implement various memory safety solutions, although they are costly and have limited practical application. Additionally, attackers might use other vectors to corrupt code pointers during speculative execution, such as speculative memory corruption [52] or CPU bugs like LVI [90]. To address speculative execution, existing Spectre mitigations can be enhanced by adding fence instructions after conditional branches that precede indirect branches. However, this approach is pervasive and would significantly limit the performance benefits of speculation.

**Detecting Probes:**
Unlike BROP-style probes, BlindSide's probes cannot be detected through software alone; hardware support is necessary. Future Performance Monitoring Units (PMUs) could interrupt software execution upon detecting an excessive number of speculative exceptions. However, speculative execution is prone to accidental exceptions and control-flow hijacks, making it challenging to avoid false positives. Hardware-supported speculative booby trapping [18, 23] is also difficult to implement effectively.

**Hindering Probes:**
BlindSide's probes rely on observing microarchitectural side effects through covert channels. Mitigating this requires breaking these covert channels, which is particularly challenging in speculative probing. Attackers can use arbitrary 1-bit covert channels to detect specific gadgets, and since the probes run in the victim program's context, partitioning microarchitectural resources by security domain is not effective. Hardware-enforced side-effect-free speculative execution could prevent such attacks [51, 99], but no practical solutions exist yet.

#### 9. RELATED WORK

**Probing Attacks:**
Recent probing attacks target information hiding defenses that use randomization. For example, "Missing the pointer" [25] uses memory read/write probes to scan for low-entropy hidden regions. "Thread spraying" [35] targets high-entropy thread-local regions, and "Allocation oracles" [68] exploit memory overcommit behavior to locate max-entropy regions. Defenses include booby traps in code or data regions [18, 23, 68] and explicit detection of anomalous events [35, 79]. More sophisticated techniques trigger just-in-time re-randomization [63], authentication [35], or hot patching [7]. Unlike these, BlindSide uses speculative probing to leak through microarchitectural side effects, bypassing such defenses.

**Other Derandomization Attacks:**
Leakage-resistant schemes based on execute-only memory [13, 14, 19, 22, 23, 32, 33, 40, 55, 59, 70, 71] are still vulnerable to generative attacks in scripting environments [64] and data-driven disclosure attacks [73, 91]. PIROP [36] shows position-independent code-reuse attacks are possible with basic ASLR, but BlindSide operates without information disclosure primitives and crafts such primitives despite fine-grained randomization. Periodic re-randomization [9, 18, 34, 97] and garbling code [84, 96] are other approaches, but they have limitations due to just-in-time attacks and indirect code layout inference [81].

**Microarchitectural Attacks:**
Early microarchitectural attacks focused on breaking cryptographic implementations [69, 98], while recent attacks support software exploitation using side-channel disclosure [12, 26, 39] and fault attacks like Rowhammer [12, 20, 28, 29, 42, 72, 76, 85, 86, 92]. These typically break basic ASLR by leaking information from MMU-induced cache accesses [39], branch predictors [26], and store-to-load forwarding [16]. Some attacks specifically target kernel-level ASLR (KASLR) using TLBs [45, 58], way predictors [60], cache prefetchers [41], hardware transactional memory [48], or speculation [17, 66]. However, these attacks cannot break more fine-grained randomization schemes. BlindSide, in contrast, bypasses state-of-the-art mitigations against speculative execution attacks and even fine-grained leakage-resistant randomization.

#### 10. CONCLUSION

Code-reuse attacks and defenses have been extensively studied. As attention shifts to speculative execution vulnerabilities, the assumption is that the code-reuse attack surface is stable. This paper revisits this assumption, uncovering interactions between traditional code-reuse and speculative execution threat models. We present BlindSide, a new exploitation technique that leverages speculative execution properties to craft speculative probing primitives, lowering the bar for software exploitation. Our primitives enable powerful, stealthy BROP-style attacks against the kernel with a single memory corruption vulnerability, bypassing strong Spectre and randomization-based mitigations.

#### ACKNOWLEDGMENTS

We thank Andrea Bittau (1983-2017) for inspiring us to work on "Speculative" BROP and the anonymous reviewers for their valuable feedback. This work was supported by the European Unionâ€™s Horizon 2020 research and innovation programme, Intel Corporation, the Netherlands Organisation for Scientific Research, and the Office of Naval Research (ONR). The views expressed are solely those of the authors, and the funding agencies are not responsible for any use of the information contained herein.

#### REFERENCES

[References listed as provided, with no changes needed.]

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.