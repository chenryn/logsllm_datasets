low, a single fitting gadget is sufficient. Also, if a vulnerability al-
ready pre-loads some of the necessary Spectre gadget input, we can
relax the template of the Spectre gadget so that many more will be
available. Overall, attackers can choose gadgets with a wide range
of register-originating memory accesses, across both registers and
memory areas.
8 MITIGATIONS
Preventing probes. BlindSide’s probes rely on the ability to con-
trol a memory error vulnerability and speculative execution. To
hinder the former, there are a variety of memory safety solutions
documented in literature, but they are expensive and have found
limited applicability in practice. Moreover, an attacker may also
opt for other vectors to corrupt code pointers in speculative execu-
tion, such as speculative memory corruption [52] or CPU bugs like
LVI [90]. To hinder the latter, one could build on existing Spectre
mitigations and treat indirect branches as potentially dangerous. For
instance, building on Spectre-BCB mitigations, we would add fence
instructions behind all the conditional branches that are shortly
followed by indirect branch instructions. Unfortunately, our anal-
ysis shows these gadgets are pervasive and this strategy would
severely limit the number of conditional branches that can benefit
from speculation (and its performance gains).
Detecting probes. Unlike BROP-style probes, there is no software-
supported mechanism to detect BlindSide’s probes; hardware sup-
port is needed. An option is for future Performance Monitoring
Units (PMUs) to interrupt software execution after detecting an
excessive number of “crashes” (i.e., exceptions) that occur during
speculative execution. However, compared to regular execution,
speculative execution is much more prone to accidental exceptions
and even control-flow hijacks (due to relatively frequent mispredic-
tions), hence a speculative anomaly detector may be more prone to
false positives. For the same reason, hardware-supported (specula-
tive) booby trapping [18, 23] seems difficult to come by.
Hindering probes. BlindSide’s probes rely on being able to ob-
serve microarchitectural side effects through a covert channel. As a
result, we could hinder the probes by drawing from solutions that
break covert channels. However, this is particularly challenging in
the case of speculative probing, since an attacker may use arbitrary
1-bit covert channels to detect specific (even unaligned) gadgets,
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 10 20 30 40 50PercentNumber of instructions from IB to closest control-dependent CJobjects, etc. Moreover, the probes run in the context of the victim
program, so partitioning microarchitectural resources by security
domain is not helpful. Hardware-enforced side-effect-free specu-
lative execution would stop speculative execution attacks [51, 99],
but none of the proposals have yet found practical applicability.
9 RELATED WORK
Here we complement the related work already discussed in §2,
focusing on probing attacks, other software-based derandomization
attacks, and microarchitectural attacks for software exploitation.
Probing attacks. Recent probing attacks focus on breaking infor-
mation hiding-based defenses that use randomization as a building
block. Missing the pointer [25] uses arbitrary memory read/write
probes to scan the address space for low-entropy hidden regions.
Thread spraying [35] shows similar probing attacks are possible
against even high-entropy thread-local hidden regions when at-
tackers can spawn many threads. Allocation oracles [68] exploit
memory overcommit behavior to craft huge allocation probes and
locate even max-entropy hidden regions with few or no crashes.
Defenses against prior probing attacks fall into two main classes.
A first class protects valuable targets (e.g., hidden regions) with
booby traps in code [18, 23] or data [68] regions to catch probing
attempts and immediately flag detection. A second class employs ex-
plicit detection of anomalous probe-like events (e.g., crashes, huge
allocations, etc.). An option is to simply raise an alert upon detec-
tion of a large number of anomalous events [35, 79]. More sophisti-
cated techniques instead trigger just-in-time re-randomization [63],
authentication [35], or hot patching [7]. In contrast to all exist-
ing attacks, BlindSide relies on speculative probing primitives to
stealthily leak through microarchitectural side effects from crash-
sensitive targets and bypass all such defenses.
Other derandomization attacks. We already discussed a class of
leakage-resistant schemes [13, 14, 19, 22, 23, 32, 33, 40, 55, 59, 70, 71]
based on execute-only memory for code in §2.1. These schemes are
still vulnerable to generative attacks in scripting environments such
as JavaScript [64] and data-driven disclosure attacks [73, 91] in the
presence of information disclosure primitives. However, without
such primitives, the attack surface for common systems software is
believed to be limited. PIROP [36] shows position-independent code-
reuse attacks are still possible with at least massaging primitives,
but only against basic ASLR. In contrast, BlindSide can operate in
absence of information disclosure primitives and blindly craft such
primitives despite fine-grained, leakage-resistant randomization.
Other schemes periodically re-randomize the address space to
invalidate any leaked information [9, 18, 34, 97], but an attacker
can still mount just-in-time attacks between randomization in-
tervals [80] and frequent intervals can be costly for commodity
kernels [71]. Other schemes suggest garbling code right after it is
read to immediately invalidate any leaked code knowledge [84, 96],
but an attacker can still indirectly infer the code layout [81].
Microarchitectural attacks. While early microarchitectural at-
tacks such as classic cache side-channel attacks [69, 98] or even
more recent attacks [5, 24, 37, 38, 67, 93] primarily focus on breaking
crypto implementations, there is a large body of work on microar-
chitectural attacks to support software exploitation. Such attacks
typically use side-channel disclosure to mimic limited memory read
primitives [12, 26, 39] and fault attacks like Rowhammer to mimic
limited memory write primitives [12, 20, 28, 29, 42, 72, 76, 85, 86, 92].
Most attacks use side channels to break basic ASLR, for instance
by leaking information from MMU-induced cache accesses [39],
branch predictors [26], and store-to-load forwarding [16]. Some
attacks focus specifically on kernel-level ASLR (or KASLR), deran-
domizing the kernel address space using TLBs [45, 58], way pre-
dictors [60], cache prefetchers [41], hardware transactional mem-
ory [48], or speculation [17, 66].
Nonetheless, all these attacks cannot break more fine-grained
randomization schemes. This was only believed possible by combin-
ing side-channel attacks with speculative execution vulnerabilities
able to leak arbitrary values [15, 16, 43, 53, 61, 65, 75, 94], but such
vulnerabilities are target of pervasive mitigation efforts on commod-
ity platforms. In contrast, BlindSide bypasses all the state-of-the-art
mitigations against speculative execution attacks, while bypassing
even fine-grained leakage-resistant randomization.
10 CONCLUSION
Code-reuse attacks and defenses have been extensively studied in
the past decade. As the community now devotes much attention
to new classes of attacks such as those concerned with specula-
tive execution vulnerabilities, the common assumption is that the
well-understood code-reuse attack surface is “stable”. In this paper,
we revisited this assumption and uncovered complex interactions
between traditional code-reuse and the emerging speculative exe-
cution threat models—allowing us to generalize both. We presented
BlindSide, a new exploitation technique that leverages an under-
explored property of speculative execution (i.e., crash/execution
suppression) to craft speculative probing primitives and lower the
bar for software exploitation. We showed our primitives can be used
to mount powerful, stealthy BROP-style attacks against the kernel
with a single memory corruption vulnerability, without crashes
and bypassing strong Spectre/randomization-based mitigations.
ACKNOWLEDGMENTS
We would like to thank Andrea Bittau (1983-2017) for inspiring
us to work on “Speculative” BROP. We would also like to thank
the anonymous reviewers for their valuable feedback. This work
was supported by the European Union’s Horizon 2020 research
and innovation programme under grant agreements No. 786669
(ReAct), No. 825377 (UNICORE) and No. 690972 (PROTASIS), by
Intel Corporation through the Side Channel Vulnerability ISRA, by
the Netherlands Organisation for Scientific Research through grants
NWO 639.021.753 VENI "PantaRhei", and NWO 016.Veni.192.262,
and by the Office of Naval Research (ONR) under awards N00014-16-
1-2261 and N00014-17-1-2788. This paper reflects only the authors’
view. The funding agencies are not responsible for any use that
may be made of the information it contains.
REFERENCES
[1] 2020. Amazon EC2 G4 Instances. https://aws.amazon.com/ec2/instance-types/
g4/
integrity. In CCS.
Articles/826539/
[2] 2020. Frequently Asked Questions About RAP. https://grsecurity.net/rap_faq
[3] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-flow
[4] Kristen Carlson Accardi. 2020. Function Granular KASLR.
https://lwn.net/
[5] Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan, Cesar Pereida
García, and Nicola Tuveri. 2019. Port contention for fun and profit. In IEEE S&P.
[6] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürn-
berger, and Jannik Pewny. 2014. You can run but you can’t read: Preventing
disclosure exploits in executable code. In CCS.
[7] Koustubha Bhat, Erik van der Kouwe, Herbert Bos, and Cristiano Giuffrida. 2019.
ProbeGuard: Mitigating Probing Attacks Through Reactive Program Transfor-
mations. In ASPLOS.
[8] Atri Bhattacharyya, Andrés Sánchez, Esmaeil M Koruyeh, Nael Abu-Ghazaleh,
Chengyu Song, and Mathias Payer. 2020. SpecROP: Speculative Exploitation of
ROP Chains. (2020).
[14] Scott Brookes, Robert Denz, Martin Osterloh, and Stephen Taylor. 2016. ExOShim:
[10] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and Dan Boneh.
[11] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-
[9] David Bigelow, Thomas Hobson, Robert Rudd, William Streilein, and Hamed
Okhravi. 2015. Timely rerandomization for mitigating memory disclosures. In
CCS.
2014. Hacking blind. In IEEE S&P.
oriented Programming: A New Class of Code-reuse Attack. In ASIACCS.
[12] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2016. Dedup
Est Machina: Memory Deduplication as an Advanced Exploitation Vector. In
S&P.
[13] Kjell Braden, Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Stephen
Crane, Michael Franz, and Per Larsen. 2016. Leakage-Resilient Layout Random-
ization for Mobile Devices. In NDSS.
Preventing Memory Disclosure Using Execute-Only Kernel Code. In ICCWS.
[15] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg,
Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. 2019. A
Systematic Evaluation of Transient Execution Attacks and Defenses. In USENIX
Security.
[16] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Marina
Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, et al.
2019. Fallout: Leaking data on meltdown-resistant cpus. In CCS.
Daniel Gruss. 2016. KASLR: Break It, Fix It, Repeat. In ASIACCS.
the Code Space to Counter Disclosure Attacks. In EuroS&P.
[19] Yaohui Chen, Dongli Zhang, Ruowen Wang, Rui Qiao, Ahmed M Azab, Long Lu,
Hayawardh Vijayakumar, and Wenbo Shen. 2017. NORAX: Enabling execute-only
memory for COTS binaries on AArch64. In IEEE S&P.
[20] Lucian Cojocar, Kaveh Razavi, Cristiano Giuffrida, and Herbert Bos. 2019. Exploit-
ing Correcting Codes: On the Effectiveness of ECC Memory Against Rowhammer
Attacks. In S&P.
https://lwn.net/Articles/746551/
[21] Jonathan Corbet. 2018. Meltdown and Spectre mitigations: a February update.
[18] Xi Chen, Herbert Bos, and Cristiano Giuffrida. 2017. CodeArmor: Virtualizing
[17] Claudio Canella, Michael Schwarz, Martin Haubenwallner, Martin Schwarzl, and
[22] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen,
Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor:
Practical code randomization resilient to memory disclosure. In IEEE S&P.
[23] Stephen J Crane, Stijn Volckaert, Felix Schuster, Christopher Liebchen, Per Larsen,
Lucas Davi, Ahmad-Reza Sadeghi, Thorsten Holz, Bjorn De Sutter, and Michael
Franz. 2015. It’s a TRaP: Table randomization and protection against function-
reuse attacks. In CCS.
[24] Craig Disselkoen, David Kohlbrenner, Leo Porter, and Dean Tullsen. 2017.
Prime+Abort: A Timer-Free High-Precision L3 Cache Attack using Intel TSX. In
USENIX Security.
[25] Isaac Evans, Sam Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany Tang,
Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed Okhravi.
2015. Missing the point(er): On the effectiveness of code pointer integrity. In
IEEE S&P.
over ASLR: Attacking branch predictors to bypass ASLR. In MICRO.
[27] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, ECE, and Dmitry Pono-
marev. [n.d.]. BranchScope: A New Side-Channel Attack on Directional Branch
Predictor. In ASPLOS’18.
Pwning Unit: Accelerating Microarchitectural Attacks with the GPU. In S&P.
[29] Pietro Frigo, Emanuele Vannacci, Hasan Hassan, Victor van der Veen, Onur
Mutlu, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. 2020. TRRespass:
Exploiting the Many Sides of Target Row Refresh. In S&P.
[28] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. 2018. Grand
[26] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. 2016. Jump
[31] C. Ge, L. Xu, W. Qiu, Z. Huang, J. Guo, G. Liu, and Z. Gong. [n.d.]. Optimized
[32] Jason Gionta, William Enck, and Per Larsen. 2016. Preventing kernel code-reuse
[33] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the contents
[30] Robert Gawlik, Benjamin Kollenda, Philipp Koppe, Behrad Garmany, and
Thorsten Holz. 2016. Enabling Client-Side Crash-Resistance to Overcome Diver-
sification and Information Hiding. In NDSS.
Password Recovery for SHA-512 on GPUs. In CSE’17.
attacks through disclosure resistant code diversification. In CNS.
of userspace memory in the face of disclosure vulnerabilities. In CODASPY.
[34] Cristiano Giuffrida, Anton Kuijsten, and Andrew S. Tanenbaum. 2012. Enhanced
Operating System Security Through Efficient and Fine-grained Address Space
Randomization. In USENIX Security.
[35] Enes Goktas, Robert Gawlik, Benjamin Kollenda, Elias Athanasopoulos, Georgios
Portokalidis, Cristiano Giuffrida, and Herbert Bos. 2016. Undermining Informa-
tion Hiding (And What to do About it). In USENIX Security.
[36] Enes Goktas, Benjamin Kollenda, Philipp Koppe, Erik Bosman, Georgios Por-
tokalidis, Thorsten Holz, Herbert Bos, and Cristiano Giuffrida. 2018. Position-
independent Code Reuse: On the Effectiveness of ASLR in the Absence of Infor-
mation Disclosure. In EuroS&P.
[37] Ben Gras, Cristiano Giuffrida, Michael Kurth, Herbert Bos, and Kaveh Razavi.
2020. ABSynthe: Automatic Blackbox Side-channel Synthesis on Commodity
Microarchitectures. In NDSS.