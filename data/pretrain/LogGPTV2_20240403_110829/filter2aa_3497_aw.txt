memory structures that could help in remote code execution.
Authentication Bypass
Many applications require users to supply authentication credentials to access an
application completely. Valid credentials might be a username and password or a more
complex verification, like a cryptographically secure exchange. Authentication limits access
to resources, but it can also reduce an application’s attack surface when an attacker is
unauthenticated.
An authentication bypass vulnerability exists in an application if there is a way to
authenticate to the application without providing all the authentication credentials. Such
vulnerabilities might be as simple as an application incorrectly checking a password—for
example, because it compares a simple checksum of the password, which is easy to brute
force. Or vulnerabilities could be due to more complex issues, such as SQL injection
(discussed later in “SQL Injection” on page 228).
Authorization Bypass
||||||||||||||||||||
||||||||||||||||||||
Not all users are created equal. Applications may support different types of users, such as
read-only, low-privilege, or administrator, through the same interface. If an application
provides access to resources like files, it might need to restrict access based on
authentication. To allow access to secured resources, an authorization process must be
built in to determine which rights and resources have been assigned to a user.
An authorization bypass vulnerability occurs when an attacker can gain extra rights or
access to resources they are not privileged to access. For example, an attacker might
change the authenticated user or user privileges directly, or a protocol might not correctly
check user permissions.
NOTE
Don’t confuse authorization bypass with authentication bypass vulnerabilities. The major
difference between the two is that an authentication bypass allows you to authenticate as a
specific user from the system’s point of view; an authorization bypass allows an attacker to access
a resource from an incorrect authentication state (which might in fact be unauthenticated).
Having defined the vulnerability classes, let’s look at their causes in more detail and
explore some of the protocol structures in which you’ll find them. Each type of root cause
contains a list of the possible vulnerability classes that it might lead to. Although this is not
an exhaustive list, I cover those you are most likely to encounter regularly.
Memory Corruption Vulnerabilities
If you’ve done any analysis, memory corruption is most likely the primary security
vulnerability you’ll have encountered. Applications store their current state in memory,
and if that memory can be corrupted in a controlled way, the result can cause any class of
security vulnerability. Such vulnerabilities can simply cause an application to crash
(resulting in a denial-of-service condition) or be more dangerous, such as allowing an
attacker to run executable code on the target system.
Memory-Safe vs. Memory-Unsafe Programming Languages
Memory corruption vulnerabilities are heavily dependent on the programming language
the application was developed in. When it comes to memory corruption, the biggest
difference between languages is tied to whether a language (and its hosting environment) is
memory safe or memory unsafe. Memory-safe languages, such as Java, C#, Python, and Ruby,
do not normally require the developer to deal with low-level memory management. They
sometimes provide libraries or constructs to perform unsafe operations (such as C#’s unsafe
keyword). But using these libraries or constructs requires developers to make their use
explicit, which allows that use to be audited for safety. Memory-safe languages will also
Technet24
||||||||||||||||||||
||||||||||||||||||||
commonly perform bounds checking for in-memory buffer access to prevent out-of-
bounds reads and writes. Just because a language is memory safe doesn’t mean it’s
completely immune to memory corruption. However, corruption is more likely to be a
bug in the language runtime than a mistake by the original developer.
On the other hand, memory-unsafe languages, such as C and C++, perform very little
memory access verification and lack robust mechanisms for automatically managing
memory. As a result, many types of memory corruption can occur. How exploitable these
vulnerabilities are depends on the operating system, the compiler used, and how the
application is structured.
Memory corruption is one of the oldest and best known root causes of vulnerabilities;
therefore, considerable effort has been made to eliminate it. (I’ll discuss some of the
mitigation strategies in more depth in Chapter 10 when I detail how you might exploit
these vulnerabilities.)
Memory Buffer Overflows
Perhaps the best known memory corruption vulnerability is a buffer overflow. This
vulnerability occurs when an application tries to put more data into a region of memory
than that region was designed to hold. Buffer overflows may be exploited to get arbitrary
programs to run or to bypass security restrictions, such as user access controls. Figure 9-1
shows a simple buffer overflow caused by input data that is too large for the allocated
buffer, resulting in memory corruption.
Figure 9-1: Buffer overflow memory corruption
Buffer overflows can occur for either of two reasons: Commonly referred to as a fixed-
length buffer overflow, an application incorrectly assumes the input buffer will fit into the
allocated buffer. A variable-length buffer overflow occurs because the size of the allocated
buffer is incorrectly calculated.
||||||||||||||||||||
||||||||||||||||||||
Fixed-Length Buffer Overflows
By far, the simplest buffer overflow occurs when an application incorrectly checks the
length of an external data value relative to a fixed-length buffer in memory. That buffer
might reside on the stack, be allocated on a heap, or exist as a global buffer defined at
compile time. The key is that the memory length is determined prior to knowledge of the
actual data length.
The cause of the overflow depends on the application, but it can be as simple as the
application not checking length at all or checking length incorrectly. Listing 9-1 is an
example.
 def read_string()
 {
➊ byte str[32];
  int i  = 0;
  do
  {
  ➋ str[i] = read_byte();
     i = i + 1;
  }
➌ while(str[i-1] != 0);
  printf("Read String: %s\n", str);
}
Listing 9-1: A simple fixed-length buffer overflow
This code first allocates the buffer where it will store the string (on the stack) and
allocates 32 bytes of data ➊. Next, it goes into a loop that reads a byte from the network
and stores it an incrementing index in the buffer ➋. The loop exits when the last byte read
from the network is equal to zero, which indicates that the value has been sent ➌.
In this case, the developer has made a mistake: the loop doesn’t verify the current
length at ➌ and therefore reads as much data as available from the network, leading to
memory corruption. Of course, this problem is due to the fact that unsafe programming
languages do not perform bounds checks on arrays. This vulnerability might be very
simple to exploit if no compiler mitigations are in place, such as stack cookies to detect the
corruption.
UNSAFE STRING FUNCTIONS
The C programming language does not define a string type. Instead, it uses memory
pointers to a list of char types. The end of the string is indicated by a zero-value
character. This isn’t a security problem directly. However, when the built-in libraries
to manipulate strings were developed, safety was not considered. Consequently, many
of these string functions are very dangerous to use in a security-critical application.
To understand how dangerous these functions can be, let’s look at an example
Technet24
||||||||||||||||||||
||||||||||||||||||||
using strcpy, the function that copies strings. This function takes only two arguments:
a pointer to the source string and a pointer to the destination memory buffer to store
the copy. Notice that nothing indicates the length of the destination memory buffer.
And as you’ve already seen, a memory-unsafe language like C doesn’t keep track of
buffer sizes. If a programmer tries to copy a string that is longer than the destination
buffer, especially if it’s from an external untrusted source, memory corruption will
occur.
More recent C compilers and standardizations of the language have added more
secure versions of these functions, such as strcpy_s, which adds a destination length
argument. But if an application uses an older string function, such as strcpy, strcat, or
sprintf, then there’s a good chance of a serious memory corruption vulnerability.
Even if a developer performs a length check, that check may not be done correctly.
Without automatic bounds checking on array access, it is up to the developer to verify all
reads and writes. Listing 9-2 shows a corrected version of Listing 9-1 that takes into
account strings that are longer than the buffer size. Still, even with the fix, a vulnerability is
lurking in the code.
 def read_string_fixed()
 {
➊ byte str[32];
  int i = 0;
  do
  {
  ➋ str[i] = read_byte();
     i = i + 1;
  }
➌ while((str[i-1] != 0) && (i < 32));
  /* Ensure zero terminated if we ended because of length */
➍ str[i] = 0;
  printf("Read String: %s\n", str);
}
Listing 9-2: An off-by-one buffer overflow
As in Listing 9-1, at ➊ and ➋, the code allocates a fixed-stack buffer and reads the string
in a loop. The first difference is at ➌. The developer has added a check to make sure to exit
the loop if it has already read 32 bytes, the maximum the stack buffer can hold.
Unfortunately, to ensure that the string buffer is suitably terminated, a zero byte is written
to the last position available in the buffer ➍. At this point, i has the value of 32. But
because languages like C start buffer indexing from 0, this actually means it will write 0 to
the 33rd element of the buffer, thereby causing corruption, as shown in Figure 9-2.
||||||||||||||||||||
||||||||||||||||||||
Figure 9-2: An off-by-one error memory corruption
This results in an off-by-one error (due to the shift in index position), a common error in
memory-unsafe languages with zero-based buffer indexing. If the overwritten value is
important—for example, if it is the return address for the function—this vulnerability can
be exploitable.
Variable-Length Buffer Overflows
An application doesn’t have to use fixed-length buffers to stored protocol data. In most
situations, it’s possible for the application to allocate a buffer of the correct size for the
data being stored. However, if the application incorrectly calculates the buffer size, a
variable-length buffer overflow can occur.
As the length of the buffer is calculated at runtime based on the length of the protocol
data, you might think a variable-length buffer overflow is unlikely to be a real-world
vulnerability. But this vulnerability can still occur in a number of ways. For one, an
application might simply incorrectly calculate the buffer length. (Applications should be
rigorously tested prior to being made generally available, but that’s not always the case.)
A bigger issue occurs if the calculation induces undefined behavior by the language or
platform. For example, Listing 9-3 demonstrates a common way in which the length
calculation is incorrect.
   def read_uint32_array()
   {
     uint32 len;
     uint32[] buf;
     // Read the number of words from the network
➊   len = read_uint32();
     // Allocate memory buffer
➋   buf = malloc(len * sizeof(uint32));
     // Read values
     for(uint32 i = 0; i < len; ++i)
     {
➌     buf[i] = read_uint32();
     }
     printf("Read in %d uint32 values\n", len);
Technet24
||||||||||||||||||||
||||||||||||||||||||
   }
Listing 9-3: An incorrect allocation length calculation
Here the memory buffer is dynamically allocated at runtime to contain the total size of
the input data from the protocol. First, the code reads a 32-bit integer, which it uses to
determine the number of following 32-bit values in the protocol ➊. Next, it determines the
total allocation size and then allocates a buffer of a corresponding size ➋. Finally, the code
starts a loop that reads each value from the protocol into the allocated buffer ➌.
What could possibly go wrong? To answer, let’s take a quick look at integer overflows.
Integer Overflows
At the processor instruction level, integer arithmetic operations are commonly performed
using modulo arithmetic. Modulo arithmetic allows values to wrap if they go above a certain
value, which is called the modulus. A processor uses modulo arithmetic if it supports only a
certain native integer size, such as 32 or 64 bits. This means that the result of any
arithmetic operation must always be within the ranges allowed for the fixed-size integer
value. For example, an 8-bit integer can take only the values between 0 and 255; it cannot
possibly represent any other values. Figure 9-3 shows what happens when you multiply a
value by 4, causing the integer to overflow.
Figure 9-3: A simple integer overflow
Although this figure shows 8-bit integers for the sake of brevity, the same logic applies
to 32-bit integers. When we multiply the original length 0x41 or 65 by 4, the result is
0x104 or 260. That result can’t possibly fit into an 8-bit integer with a range of 0 to 255.
So the processor drops the overflowed bit (or more likely stores it in a special flag
indicating that an overflow has occurred), and the result is the value 4—not what we
expected. The processor might issue an error to indicate that an overflow has occurred, but
memory-unsafe programming languages typically ignore this sort of error. In fact, the act
of wrapping the integer value is used in architectures such as x86 to indicate the signed
result of an operation. Higher-level languages might indicate the error, or they might not
support integer overflow at all, for instance, by extending the size of the integer on
demand.
||||||||||||||||||||
||||||||||||||||||||
Returning to Listing 9-3, you can see that if an attacker supplies a suitably chosen value
for the buffer length, the multiplication by 4 will overflow. This results in a smaller
number being allocated to memory than is being transmitted over the network. When the
values are being read from the network and inserted into the allocated buffer, the parser
uses the original length. Because the original length of the data doesn’t match up to the
size of the allocation, values will be written outside of the buffer, causing memory
corruption.
WHAT HAPPENS IF WE ALLOCATE ZERO BYTES?
Consider what happens when we calculate an allocation length of zero bytes. Would
the allocation simply fail because you can’t allocate a zero-length buffer? As with
many issues in languages like C, it is up to the implementation to determine what
occurs (the dreaded implementation-defined behavior). In the case of the C allocator
function, malloc, passing zero as the requested size can return a failure, or it can return
a buffer of indeterminate size, which hardly instills confidence.
Out-of-Bounds Buffer Indexing
You’ve already seen that memory-unsafe languages do not perform bounds checks. But
sometimes a vulnerability occurs because the size of the buffer is incorrect, leading to
memory corruption. Out-of-bounds indexing stems from a different root cause: instead of
incorrectly specifying the size of a data value, we’ll have some control over the position in
the buffer we’ll access. If incorrect bounds checking is done on the access position, a
vulnerability exists. The vulnerability can in many cases be exploited to write data outside
the buffer, leading to selective memory corruption. Or it can be exploited by reading a
value outside the buffer, which could lead to information disclosure or even remote code
execution. Listing 9-4 shows an example that exploits the first case—writing data outside
the buffer.
➊ byte app_flags[32];
   def update_flag_value()
   {
  ➋ byte index = read_byte();
     byte value = read_byte();
     printf("Writing %d to index %d\n", value, index);
  ➌ app_flags[index] = value;
   }
Listing 9-4: Writing to an out-of-bound buffer index
This short example shows a protocol with a common set of flags that can be updated by
Technet24
||||||||||||||||||||
||||||||||||||||||||
the client. Perhaps it’s designed to control certain server properties. The listing defines a
fixed buffer of 32 flags at ➊. At ➋ it reads a byte from the network, which it will use as the
index (with a range of 0 to 255 possible values), and then it writes the byte to the flag
buffer ➌. The vulnerability in this case should be obvious: an attacker can provide values
outside the range of 0 to 32 with the index, leading to selective memory corruption.
Out-of-bounds indexing doesn’t just have to involve writing. It works just as well when
values are read from a buffer with an incorrect index. If the index were used to read a value
and return it to the client, a simple information disclosure vulnerability would exist.
A particularly critical vulnerability could occur if the index were used to identify
functions within an application to run. This usage could be something simple, such as
using a command identifier as the index, which would usually be programmed by storing
memory pointers to functions in a buffer. The index is then used to look up the function
used to handle the specified command from the network. Out-of-bounds indexing would
result in reading an unexpected value from memory that would be interpreted as a pointer
to a function. This issue can easily result in exploitable remote code execution
vulnerabilities. Typically, all that is required is finding an index value that, when read as a
function pointer, would cause execution to transfer to a memory location an attacker can
easily control.
Data Expansion Attack
Even modern, high-speed networks compress data to reduce the number of raw octets
being sent, whether to improve performance by reducing data transfer time or to reduce
bandwidth costs. At some point, that data must be decompressed, and if compression is
done by an application, data expansion attacks are possible, as shown in Listing 9-5.
   void read_compressed_buffer()
   {
     byte buf[];
     uint32 len;
     int i = 0;
     // Read the decompressed size
➊   len = read_uint32();
     // Allocate memory buffer
➋   buf = malloc(len);
➌   gzip_decompress_data(buf)
     printf("Decompressed in %d bytes\n", len);
   }
Listing 9-5: Example code vulnerable to a data expansion attack
Here, the compressed data is prefixed with the total size of the decompressed data. The
size is read from the network ➊ and is used to allocate the required buffer ➋. After that, a
call is made to decompress the data to the buffer ➌ using a streaming algorithm, such as
||||||||||||||||||||
||||||||||||||||||||
gzip. The code does not check the decompressed data to see if it will actually fit into the
allocated buffer.
Of course, this attack isn’t limited to compression. Any data transformation process,
whether it’s encryption, compression, or text encoding conversions, can change the data
size and lead to an expansion attack.
Dynamic Memory Allocation Failures
A system’s memory is finite, and when the memory pool runs dry, a dynamic memory
allocation pool must handle situations in which an application needs more. In the C
language, this usually results in an error value being returned from the allocation functions
(usually a NUL pointer); in other languages, it might result in the termination of the
environment or the generation of an exception.
Several possible vulnerabilities may arise from not correctly handling a dynamic
memory allocation failure. The most obvious is an application crash, which can lead to a
denial-of-service condition.
Default or Hardcoded Credentials
When one is deploying an application that uses authentication, default credentials are
commonly added as part of the installation process. Usually, these accounts have a default
username and password associated with them. The defaults create a problem if the
administrator deploying the application does not reconfigure the credentials for these
accounts prior to making the service available.