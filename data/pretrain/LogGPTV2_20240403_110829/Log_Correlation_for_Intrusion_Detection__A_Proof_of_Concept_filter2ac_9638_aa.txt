title:Log Correlation for Intrusion Detection: A Proof of Concept
author:Cristina L. Abad and
Jed Taylor and
Cigdem Sengul and
William Yurcik and
Yuanyuan Zhou and
Kenneth E. Rowe
Log Correlation for Intrusion Detection:
A Proof of Concept∗
Cristina Abad
†‡
PI:EMAIL
Jed Taylor
†
PI:EMAIL
†
Yuanyuan Zhou
PI:EMAIL
†
Cigdem Sengul
PI:EMAIL
§
Ken Rowe
William Yurcik
‡
PI:EMAIL
PI:EMAIL
†
‡
Department of Computer Science, University of Illinois at Urbana-Champaign
National Center for Supercomputing Applications (NCSA)
§
Science Applications International Corporation (SAIC)
Abstract
Intrusion detection is an important part of networked-
systems security protection. Although commercial products
exist, ﬁnding intrusions has proven to be a difﬁcult task with
limitations under current techniques. Therefore, improved
techniques are needed. We argue the need for correlating
data among different logs to improve intrusion detection
systems accuracy. We show how different attacks are re-
ﬂected in different logs and argue that some attacks are not
evident when a single log is analyzed. We present experi-
mental results using anomaly detection for the virus Yaha.
Through the use of data mining tools (RIPPER) and corre-
lation among logs we improve the effectiveness of an intru-
sion detection system while reducing false positives.
1. Introduction
Information and resource protection is a primary concern
of most organizations. To be able to secure their assets,
organizations need effective intrusion detection techniques
to respond to and recover from Internet attacks. An intru-
sion detection system (IDS) attempts to detect attacks by
monitoring system or network behavior. While many ex-
isting IDSs require manual deﬁnitions of normal and ab-
normal behavior (intrusion signatures) [25], recent work
has shown that it is possible to identify abnormalities au-
∗
This research is funded in part by a grant from the Ofﬁce of Naval
Research (ONR) within the National Center for Advanced Secure Systems
Research (NCASSR) .
tomatically using machine learning or data mining tech-
niques [6, 1, 2, 8, 14]. These works analyze network or
system activity logs to generate models or rules, which the
IDS can use to detect intrusions that can potentially com-
promise the system integrity or reliability.
However, most of the previous work on intrusion detec-
tion focuses on activities generated by a single source, re-
sulting in many false positives and undetected intrusions.
For example, some studies [14] detect intrusions by mon-
itoring the network trafﬁc such as tcpdump logs, whereas
other studies [2, 8] monitor only system call logs. These
studies have high false positive rates.
To address this problem requires correlating activities
from all involved components and analyzing all logs to-
gether. This is because an intrusion typically leaves mul-
tiple signs of its presence, which to date has not been ex-
ploited by security professionals. The general idea is to take
advantage of attack traces by correlating information found
in multiple heterogeneous logs and thus enable IDSs to cor-
rectly identify more attacks while simultaneously reducing
the number of false positives and providing a stronger vali-
dation that an attack has indeed occurred. Furthermore, we
posit that there are many attacks that are not evident by an-
alyzing a single log but may be exposed when correlating
information in multi-logs.
We show in this paper that correlating log information
is useful for improving both misuse detection and anomaly
detection. To facilitate processing the millions of entries
found in typical logs, data mining techniques are indeed
useful. Speciﬁcally we use the data mining software tool
RIPPER [3] and correlation to improve anomaly detection,
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:23 UTC from IEEE Xplore.  Restrictions apply. 
and present results that show that log correlation can im-
prove current intrusion detection techniques.
The paper is structured as follows. Section 2 provides
background and motivation for this work. The two com-
plementary mapping approaches we use (top-down and
bottom-up) are given in Section 3 and Sections 4-7 use these
two approaches to examine attack signatures to better un-
derstand how they may be manifest in different audit logs.
We show how multiple logs are affected by common attacks
and give several speciﬁc examples of attacks and their at-
tack traces in heterogeneous logs. In Sections 8 and 9 we
outline a speciﬁc experimental procedure and present re-
sults for the case of anomaly detection for the virus Yaha,
and show that by using log correlation and data mining tech-
niques we are able to increase the effectiveness of an IDS
by reducing the number of false positives. The areas of fu-
ture work are listed in Section 10. Section 11 provides our
summary conclusion.
2. Motivation and background
The challenges in securing a computer network can be
viewed in three stages [27]:
• Prevention: Avoid intrusions if possible. Vulnerabili-
ties should be identiﬁed and patched. It is important
to use security measures such as user authentication,
authorization and access control.
• Detection: Know as soon as possible when an intrusion
occurs. Installing and using well conﬁgured anti-virus
software, ﬁrewalls and IDSs helps early detection.
• Reaction: Respond to an intrusion. Problems should
be ﬁxed, intruders stopped and data restored.
Since it is unlikely that we will ever be able to prevent
all intrusions, being able to detect an intrusion is fundamen-
tal. As long as trafﬁc ﬂow is allowed between an internal
network and the Internet, the opportunity for an attacker
or worm to penetrate will always exist. Despite the pre-
ventive steps taken, intrusions that involve new techniques
usually succeed. During and after an attack, network and
system logs are the primary sources of information for de-
tection, response, and forensics, without these logs there is
little chance of ever discovering what happened.
An IDS is designed to analyze computer and network
activity to detect intrusion attempts as they occur. Intrusion
detection systems can be categorized as follows [27]:
• Network Intrusion Detection Systems monitor packets
on the network and attempt to discover if an an intruder
is attempting to break into a system (or cause a denial
of service attack). A typical example is a system that
watches for a large number of TCP connection requests
to many different ports on a target machine, thus dis-
covering a TCP port scan.
• System Integrity Veriﬁers or Host Intrusion Detection
Systems monitor system ﬁles to ﬁnd if a change is
made by an intruder, e.g. “Tripwire” [12, 13].
• Log File Monitors monitor log ﬁles generated by net-
work services. A typical example would be a parser
looking for patterns in HTTP server log ﬁles to dis-
cover attacks such as “phf”1 [11] attack.
• Deception Systems, e.g., honeypots, contain pseudo-
services that emulate systems and networks of systems
including well-known holes in order to trap hackers.
The majority of commercial IDS solutions are network-
based. One way to approach network intrusion detection
is to detect statistical anomalies. The idea behind this ap-
proach is to measure a baseline status such as CPU utiliza-
tion, disk activity, user logins, ﬁle activity and so on. Then
the system can trigger an alert when there is a deviation
from the baseline. However, such anomaly detection sys-
tems tend to produce frequent false positives since users and
systems tend to deviate from normal over time. Therefore,
the majority of the network intrusion detection products are
based on signature recognition, i.e., they examine trafﬁc
looking for well-known attack patterns. However, signature
recognition (or misuse detection) fails when an attack has
many slightly different variations thus causing many false
negatives.
A major shortcoming common to all security compo-
nents (ﬁrewalls, IDSs, antivirus) is that individually they
can be avoided, spoofed, or gamed. For example, IDS sig-
natures or IDS placement within the network can be deter-
mined from probing over time and then the IDS can either
be evaded by manipulating packets or gamed by intention-
ally triggering alarms (intentional false positives or squeal-
ing). Several successful attacks against existing IDSs are
identiﬁed in [19, 21]. An emphasis on using data from mul-
tiple independent logs will make such evasion or squealing
attacks more difﬁcult.
Another shortcoming of current approaches in intrusion
detection systems is that they only attempt to detect and
prevent individual attacks and not coordinated distributed
attacks. Much of the work centers around improving the
ability of systems to detect attacks and the speed of the traf-
ﬁc that can be handled. Both signature-based and anomaly
detection sensors are useful tools but they only provide a
snapshot of the event in time after it has transpired. On
the other hand clues as to what is happening in real-time
on a computer network is available but spread out all over
1The phf CGI program contains a bug in the argument parsing proce-
dure. By inserting new line characters in the script parameters it is possible
to execute a command as the user running the web server.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:23 UTC from IEEE Xplore.  Restrictions apply. 
the network. For instance, all modern operating systems
can log system and security events. Servers keep extensive
records of their operations. Many applications write errors,
warnings, and failures to their own logs. Firewalls can track
how many packets are dropped by different rules typically
at the entry and exit points of the network. If all this infor-
mation can be brought together it would enable more robust
attack detection mechanisms.
An intrusion correlation system should analyze activity
which might initially appear to be unrelated, in order to de-
termine whether it is a part of an intrusion attempt and to
characterize that pattern. Consider the case of an attacker
who attempts to crack a password and moves from worksta-
tion to workstation in order to avoid detection. This method
would not raise any alarms under normal circumstances but
with correlation it is possible to see the big picture by re-
ceiving events from all locations and raise an alert.
Correlation makes detection more effective and provides
information needed for future prevention and reaction. The
primary goals of attack trace correlation are to reduce false
alerts (i.e., false positives) and identify stealthy attacks (i.e.,
reduce false negatives). To achieve the aforementioned
goals, most of the previous log correlation research focuses
on collecting logs in the network to a central point and
then using data reduction and correlation to detect intru-
sions. Correlating multiple logs enables an IDS to make
a better decision of whether to trigger an alarm or not,
if an anomaly is observed. neuSecure [17] is a commer-
cial security event management solution that correlates ﬁles
from ﬁrewalls, IDSs, computer systems and routers to pro-
vide a comprehensive view of a security events occurring
throughout a system. netForensics [16] and Tivoli [9] are
other commercial products available that provide data ag-
gregation and simple correlation. Silvestro [24] in his Mas-
ter’s Thesis examines real-time correlation and implements
a centralized correlation engine which is an expert system
using data collection, aggregation and correlation rules.
We believe that correlating multiple logs in a single host
is also important to increase the efﬁciency of detecting in-
trusions. We deﬁne employing log correlation in a single
host as host-based correlation. By integrating different in-
formation from multiple logs, it is possible to reduce false
alarms and increase detection rate.
Some related research exists in the area of correlat-
ing IDS alarms to improve the intrusion detection pro-
cess [5, 18, 20]. Although the main goal and approach are
similar to our work, these papers differ in that they depend
solely on the alerts generated by the IDSs. This leads to
solutions that are tailored for particular IDSs, and what is
worse, they depend only on the limited view each IDS has
of the network (i.e., they do not have access to data from
logs not analyzed by the IDS).
3. Methodology
Our main goal is to show that log correlation can help
improve intrusion detection systems. To achieve this goal,
an analysis of how different attacks are recorded in differ-
ent logs and how correlating these logs can help identify the
attacks is needed. To accomplish this we use two comple-
mentary approaches to map attacks and the attack traces in
logs: (1) “top-down” and (2) “bottom-up”.
3.1. Top-down approach (attacks → logs)
In the top-down approach we take a known attack and
analyze its behavior to infer which logs may contain at-
tack traces. This approach reveals common behavior among
classes of attacks. It is also possible to identify logs that
are more likely to store useful information for entire classes
of attacks. The major advantage of this approach is that
it does not require detailed analysis of large log ﬁles as is
common for most computer networks. We can perform the-
oretical analysis on a wide variety of attacks without imple-
mentation details (simulation models or actually perform-
ing attacks in a laboratory environment). As a result of this
top-down approach Table 1 maps logs that are relevant to
different classes of attacks.
For example an attacker performing a Winnuke attack (a
DoS attack against the DNS system) may take the follow-
ing steps to learn if a system is vulnerable [4]. First, use
“nslookup” to locate the DNS server. Then, pings to check
if the service is active. Finally, scans port 139 (NetBios) to
learn if the Windows system is active. To detect this attack,
we should examine the DNS, NetFlow, and syslog logs.
3.2. Bottom-up approach (logs → attacks)
In the bottom-up approach we try to gather relevant in-
formation from multiple logs to identify speciﬁc attack in-
stances. Starting with simple events such as authentication
failures and numerous ping messages, we try to discover
potential attacks. Once an anomaly is detected in one of
the logs, the next step is to examine other logs in the same
time period. A decision tree can be used to determine which
logs should be next examined. A major advantage of this
approach is that new undocumented attacks can be discov-
ered. Aggregation is useful in this approach to group and
discard normal activity such that only suspicious activity is
left for correlation.
4. Attacks and vulnerabilities
As a part of the top-down approach, we studied several
attacks and vulnerabilities to determine how their effects
can show up in different kinds of logs.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:23 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Log correlation table
Attack
Dictionary
FTP-Write
Imap
Named
Phf
Sendmail
Xsnoop
Apache2
Back
Mailbomb
SYN Flood
Ping of Death
Process Table
Smurf
Udpstorm
Syslog
×
×
×
×
×
×
×
×
×
×
×
Firewall
×
×
×
×
×
×
×
×
Netﬂow
×
×
×
×
×
×
×
×
×
×
×
×
TCP
×
×
×
×
×
×
×
×
×
×
×
×
×
Log
DNS
×
×
×
×
Auth
×
×
×
Web
×
×
×
×
FTP
×
×
Mail
×
×
×
×
×
The SANS website [23] lists the following top ten vul-
nerabilities in Unix:
Secure Shell
Simple Network Management Protocol
File Transfer Protocol
1. Remote Procedure Calls
2. Apache Web Server
3.
4.
5.
6. R-Services and Trust Relationships
7. Line Printer Daemon
8.
9. BIND/DNS
10. General Unix Authentication, accounts with no
Sendmail
passwords or weak passwords
In his Master’s Thesis, Kris Kendall [11] gives a descrip-
tion and signature of several attacks, which exploit the vul-
nerabilities cited above. Of the attacks listed in Kendall’s
thesis, we analyzed the following:
• Remote to User Attacks One in which the attacker,
after exploiting some vulnerability, gains unauthorized
local access to a machine over a network as a user
of that machine. Examples: Dictionary, FTP-Write,
Imap, Named, Phf, Sendmail, Xlock, Xsnoop.
• Denial of Service Attacks One in which the attacker
overloads a computing or memory resource, or de-
nies legitimate users access to a machine. Exam-
ples: Apache2, Back, Mailbomb, SYN Flood, Ping of
Death, Process Table, Smurf, Udpstorm.
5. A top-down approach to log correlation
There are many independent logs that store informa-
tion for their own purposes. They are sometimes not well-
organized, and information overlap exists among the logs.
We have taken the following logs into account in the pro-
cess of top-down approach: NetFlow log, ﬁrewall log, sys-
log, TCPdump, DNS log, authentication log, web log, mail
log, and FTP log.
Instead of concentrating on system vulnerabilities, each
of which can be exploited in several different ways, we will
analyze speciﬁc attacks (as listed in [11]) and how they af-
fect the different logs. We believe that these attacks can be
placed in one of two groups: denying access to others (ei-
ther under strenuous load or from invalid queries) or grant-
ing access to oneself (usually for malicious purposes).
There are many attacks, at
least one for every ex-
ploit/vulnerability. Table 1 shows where a sampling of at-
tacks affect different logs. After analyzing how attacks af-
fect each log, we are able to identify two important logs
that need to be checked ﬁrst: syslog and NetFlow. Ana-
lyzing these two logs and correlating the information found
in them will help improve IDS performance. It needs to be
noted that analyzing syslog is not trivial, as it contains infor-
mation from several different system logs which is typically
a large amount of data. Data mining techniques can be used
to ﬁlter the important information in these logs.
6. An example mapping: Attack to log attack
traces
As part of the top-down approach we show how a spe-
ciﬁc attack is reﬂected in different logs. Next is an example
of the logged actions of a real attacker’s attempt to use a
system for malicious purposes [26].
1. DNS version query probe is used to determine if BIND
is vulnerable. This action is logged in syslog.