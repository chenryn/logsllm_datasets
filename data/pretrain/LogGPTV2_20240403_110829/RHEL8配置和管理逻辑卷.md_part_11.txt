```
如果物理卷仍在使用，将需要用 `pvmove`{.literal}
命令将数据迁移到另一个物理卷中。然后使用 `vgreduce`{.literal}
命令删除物理卷。
以下命令可从卷组 `/dev/hda1`{.literal} 中删除物理卷
`my_volume_group`{.literal}。
``` literallayout
# vgreduce my_volume_group /dev/hda1
```
如果逻辑卷包含失败的物理卷，您就无法使用该逻辑卷。要从卷组中删除缺少的物理卷，如果没有在缺少的物理卷中分配逻辑卷，您可以使用
`vgreduce`{.literal} 命令的 `--removemissing`{.literal} 参数。
如果物理卷包含 `mirror`{.literal} 片段类型的逻辑卷的镜像镜像，您可以使用
`vgreduce --removemissing --mirrorsonly --force`{.literal}
命令从镜像中删除该镜像。这样只删除从物理卷中镜像镜像的逻辑卷。
:::
:::
[]{#assembly_displaying-lvm-components-configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#assembly_displaying-lvm-components-configuring-and-managing-logical-volumes.html#assembly_displaying-lvm-components-configuring-and-managing-logical-volumes}第 8 章 显示 LVM 组件 {.title}
:::
LVM 提供了各种显示 LVM 组件以及自定义显示的方法。这部分总结了基本 LVM
显示命令的使用。
::: section
::: titlepage
# []{#assembly_displaying-lvm-components-configuring-and-managing-logical-volumes.html#proc_displaying-with-the-lvm-comand-displaying-lvm-components}使用 lvm 命令显示 LVM 信息 {.title}
:::
`lvm`{.literal} 命令提供一些内置选项，您可以使用它们显示 LVM
支持和配置的信息。
::: itemizedlist
-   `lvm devtypes`{.literal}
    显示可识别的内置块设备类型
-   `lvm formats`{.literal}
    显示可识别的元数据格式。
-   `lvm help`{.literal}
    显示 LVM 帮助文本。
-   `lvm segtypes`{.literal}
    显示可识别的逻辑卷片段类型。
-   `lvm tags`{.literal}
    显示此主机上定义的所有标签。
-   `lvm version`{.literal}
    显示当前版本信息。
:::
:::
::: section
::: titlepage
# []{#assembly_displaying-lvm-components-configuring-and-managing-logical-volumes.html#proc_displaying-physical-volumes-displaying-lvm-components}显示物理卷 {.title}
:::
您可以使用三个命令来显示 LVM 物理卷属性：
`pvs`{.literal}、`pvdisplay`{.literal} 和 `pvscan`{.literal}。
`pvs`{.literal}
命令提供了可以对其进行格式配置的物理卷信息，每行显示一个物理卷。`pvs`{.literal}
命令提供大量格式控制，对脚本很有用。
`pvdisplay`{.literal}
命令为每个物理卷提供详细的多行输出。它以固定格式显示物理属性（大小、扩展、卷组等等）。
以下示例显示了 `pvdisplay`{.literal} 命令的单个物理卷的输出结果。
``` literallayout
# pvdisplay
  --- Physical volume ---
  PV Name               /dev/sdc1
  VG Name               new_vg
  PV Size               17.14 GB / not usable 3.40 MB
  Allocatable           yes
  PE Size (KByte)       4096
  Total PE              4388
  Free PE               4375
  Allocated PE          13
  PV UUID               Joqlch-yWSj-kuEn-IdwM-01S9-XO8M-mcpsVe
```
`pvscan`{.literal} 命令为物理卷扫描系统中所有支持的 LVM 块设备。
以下命令显示所有找到的物理设备：
``` literallayout
# pvscan
 PV /dev/sdb2   VG vg0   lvm2 [964.00 MB / 0   free]
 PV /dev/sdc1   VG vg0   lvm2 [964.00 MB / 428.00 MB free]
 PV /dev/sdc2            lvm2 [964.84 MB]
 Total: 3 [2.83 GB] / in use: 2 [1.88 GB] / in no VG: 1 [964.84 MB]
```
您可以在 `lvm.conf`{.literal}
文件中定义过滤器，以便这个命令避免扫描特定的物理卷。
:::
::: section
::: titlepage
# []{#assembly_displaying-lvm-components-configuring-and-managing-logical-volumes.html#proc_displaying-volume-groups-displaying-lvm-components}显示卷组 {.title}
:::
您可以使用两个命令来显示 LVM 卷组的属性： `vgs`{.literal} 和
`vgdisplay`{.literal}。`vgscan`{.literal} 命令为卷组扫描系统中所有支持的
LVM 块设备，也可以用来显示现有卷组。
`vgs`{.literal}
命令提供了可以对其进行格式配置的卷组信息，每行显示一个卷组。`vgs`{.literal}
命令提供大量格式控制，对脚本很有用。
`vgdisplay`{.literal}
命令以固定格式显示卷组属性（比如大小、扩展、物理卷数目等等）。下面的例子显示了
`vgdisplay`{.literal} 命令输出卷组 `new_vg`{.literal}
的信息。如果您没有指定卷组，则会显示所有现有的卷组。
``` literallayout
# vgdisplay new_vg
  --- Volume group ---
  VG Name               new_vg
  System ID
  Format                lvm2
  Metadata Areas        3
  Metadata Sequence No  11
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                1
  Open LV               0
  Max PV                0
  Cur PV                3
  Act PV                3
  VG Size               51.42 GB
  PE Size               4.00 MB
  Total PE              13164
  Alloc PE / Size       13 / 52.00 MB
  Free  PE / Size       13151 / 51.37 GB
  VG UUID               jxQJ0a-ZKk0-OpMO-0118-nlwO-wwqd-fD5D32
```
以下示例显示了 `vgscan`{.literal} 命令的输出结果。
``` literallayout
# vgscan
Reading all physical volumes.  This may take a while...
Found volume group "new_vg" using metadata type lvm2
Found volume group "officevg" using metadata type lvm2
```
:::
::: section
::: titlepage
# []{#assembly_displaying-lvm-components-configuring-and-managing-logical-volumes.html#proc_displaying-logical-volumes-displaying-lvm-components}显示逻辑卷 {.title}
:::
您可以使用三个命令来显示 LVM 逻辑卷的属性：
`lvs`{.literal}、`lvdisplay`{.literal} 和 `lvscan`{.literal}。
`lvs`{.literal}
命令提供了可以对其进行格式配置的逻辑卷信息，每行显示一个逻辑卷。`lvs`{.literal}
命令提供大量格式控制，对脚本很有用。
`lvdisplay`{.literal}
命令以固定格式显示逻辑卷属性（比如大小、布局和映射）。
以下命令显示 `vg00`{.literal} 中的 `lvol2`{.literal}
的属性。如果为此原始逻辑卷创建了快照逻辑卷，这个命令会显示所有快照逻辑卷及其状态（活动或不活跃）的列表。
``` literallayout
# lvdisplay -v /dev/vg00/lvol2
```
`lvscan`{.literal} 命令扫描系统中所有逻辑卷并将其列出，如下例所示。
``` literallayout
# lvscan
 ACTIVE                   '/dev/vg0/gfslv' [1.46 GB] inherit
```
:::
:::
[]{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes}第 9 章 LVM 的自定义报告 {.title}
:::
LVM 提供了广泛的配置和命令行选项来生成自定义报告，并过滤报告输出。有关
LVM 报告功能和功能的完整论述请查看 `lvmreport`{.literal}(7)手册页。
您可以使用 `pvs`{.literal}、`lvs`{.literal} 和 `vgs`{.literal} 命令生成
LVM
对象的简洁自定义报告。这些命令生成的报告包括每行对象的输出结果。每行包含与对象相关的属性字段的有序列表。选择要报告的对象有五种方法：按物理卷、卷组、逻辑卷、物理卷片段和逻辑卷片段。
您可以使用 `lvm fullreport`{.literal}
命令报告物理卷、卷组、逻辑卷、物理卷片段以及逻辑卷片段的信息。有关这个命令及其功能的详情，请参考
`lvm-fullreport`{.literal}(8)man page。
LVM 支持日志报告，其中包含 LVM
命令执行过程中收集的完整对象识别操作、消息和每个对象状态的日志。有关 LVM
日志报告的详情，请查看 `lvmreport`{.literal}(7)手册页。
::: section
::: titlepage
# []{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#proc_controlling-format-of-lvm-display-customizing-lvm-display}控制 LVM 显示的格式 {.title}
:::
无论您使用 `pvs`{.literal}、`lvs`{.literal} 或 `vgs`{.literal}
命令，都要决定默认字段显示和排序顺序。您可以使用以下参数来控制这些命令的输出结果：
::: itemizedlist
-   您可以使用 `-o`{.literal}
    参数更改显示哪些字段为默认字段。例如：以下命令只显示物理卷名称和大小。
    ``` literallayout
    # pvs -o pv_name,pv_size
    PV PSize
    /dev/sdb1 17.14G
    /dev/sdc1 17.14G
    /dev/sdd1 17.14G
    ```
-   您可以在输出中附加加号(+)的字段，该字段与 -o 参数结合使用。
    下面的例子除默认字段外还显示物理卷 UUID。
    ``` literallayout
    # pvs -o +pv_uuid
    PV VG Fmt Attr PSize PFree PV UUID
    /dev/sdb1 new_vg lvm2 a- 17.14G 17.14G onFF2w-1fLC-ughJ-D9eB-M7iv-6XqA-dqGeXY
    /dev/sdc1 new_vg lvm2 a- 17.14G 17.09G Joqlch-yWSj-kuEn-IdwM-01S9-X08M-mcpsVe
    /dev/sdd1 new_vg lvm2 a- 17.14G 17.14G yvfvZK-Cf31-j75k-dECm-0RZ3-0dGW-UqkCS
    ```
-   在命令中添加 `-v`{.literal} 参数包含一些额外的字段。例如：
    `pvs -v`{.literal} 命令除默认字段外还显示 `DevSize`{.literal} 和
    `PV UUID`{.literal} 字段。
    ``` literallayout
    # pvs -v
    Scanning for physical volume names
    PV VG Fmt Attr PSize PFree DevSize PV UUID
    /dev/sdb1 new_vg lvm2 a- 17.14G 17.14G 17.14G onFF2w-1fLC-ughJ-D9eB-M7iv-6XqA-dqGeXY
    /dev/sdc1 new_vg lvm2 a- 17.14G 17.09G 17.14G Joqlch-yWSj-kuEn-IdwM-01S9-XO8M-mcpsVe
    /dev/sdd1 new_vg lvm2 a- 17.14G 17.14G 17.14G yvfvZK-Cf31-j75k-dECm-0RZ3-0dGW-tUqkCS
    ```
-   `--noheadings`{.literal} 参数会抑制标题行。这对编写脚本非常有用。
    以下示例将 `--noheadings`{.literal} 参数与 `pv_name`{.literal}
    参数结合使用，该参数将生成所有物理卷的列表。
    ``` literallayout
    # pvs --noheadings -o pv_name
    /dev/sdb1
    /dev/sdc1
    /dev/sdd1
    ```
-   `--separator separator`{.literal}
    参数使用[*分隔符*]{.emphasis}来分隔不同的字段。
    下面的例子使用等号(=)分隔 `pvs`{.literal} 命令的默认输出字段。
    ``` literallayout
    # pvs --separator =
    PV=VG=Fmt=Attr=PSize=PFree
    /dev/sdb1=new_vg=lvm2=a-=17.14G=17.14G
    /dev/sdc1=new_vg=lvm2=a-=17.14G=17.09G
    /dev/sdd1=new_vg=lvm2=a-=17.14G=17.14G
    ```
    要在使用 `separator`{.literal} 参数时让字段保持一致，请将
    `separator`{.literal} 参数与 `--aligned`{.literal} 参数结合使用。
    ``` literallayout
    # pvs --separator = --aligned