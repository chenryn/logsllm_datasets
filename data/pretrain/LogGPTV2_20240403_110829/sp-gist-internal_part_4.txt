100
search, the trie has more than 150% search time improve-
50
mentovertheB+-tree,andthat,thetriescalesbetterespe-
ciallywiththeincreaseinthedatasize. 0
250K 500K 1M 2M 4M
Forthe regularexpressionmatchsearch(Figure7), our Relation Size (No. of Keys)
experimentsillustratethatthetrieachievesmorethan2or-
ders of magnitude search time improvement. Recall that, Figure 13. The performance of the R-tree vs.
we only allow for the wildcard, ‘?’, that matches any sin- thekd-tree.
gle character. We notice that the B+-tree performance is
very sensitive to the positions of the wildcard; ‘?’ in the
Relative Index Size
searchstring. Forexample,if‘?’ appearsinthe2ndorthe 100
3rd positions, then the B+-tree performance will degrade
80 001
significantly. Moreover, if ‘?’ appears as the first charac-
x
ter in the search string, then the B+-tree index will not be 60 )eert-dk/eert-R(
usedatall,andasequentialscanisperformed. Thereason
40
forthissensitivityisthattheB+-treemakesuseonlyofthe
searchstring’sprefix thatproceedsanywildcards. In con- 20 Relative Index Size
trast, the trie makes use of any non-wildcardcharactersin
0
thesearchstringtonavigateintheindextree.Therefore,the 250K 500K 1M 2M 4M
trieismuchmoretolerantfortheregularexpressionmatch Relation Size (No. of Keys)
queries. For example, to search for expression‘?at?r’, the
trie matches all the entries of the tree root node with ‘?’,
Figure14.TheindexsizeoftheR-treevs. the
thenthe2ndandthe3rdtreelevelsarefilteredbasedonlet-
kd-tree.
ters‘a’and‘t’,respectively.Atthe4thlevelofthetree,the
entriesofthereachednodesarematchedwith‘?’,andthen B+-tree page-height. Recall that SP-GiST uses a cluster-
the5thlevelisfilteredbasedonletter‘r’. ingtechniquethattriestominimizethetreemaximumpage
For the prefixmatchsearch(Figure6), ourexperiments height,whichiseffective.
illustratethattheB+-treehasabetterperformanceoverthe For the comparison of the kd-tree against the R-tree,
trie.ThereasonisthathavingthekeyssortedintheB+-tree we conduct our experiments over two-dimensional point
leaf nodes, allows the B+-tree to answer the prefix match datasets. Thex-axisandthey-axisrangefrom0to100.We
queriesefficiently. Incontrast,thetriehastoforkthenav- generatedatasetsofsizesthatrangefrom250Kto4Mtwo-
igation in the index tree in order to reach all the keys that dimensional points. We illustrate in Figure 13 the search
matchthesearchstring. performanceundertwo search operations; the pointmatch
In Figure8, we presentthe search time standarddevia- searchandtherangesearch. Thefigureillustratesthatthe
tionofthetrieinthecaseoftheexactmatchsearchtostudy SP-GiSTkd-treehasmorethan300%searchtimeimprove-
the effect of the variation of the tree depth on the search mentovertheR-treeinthecaseofthepointmatchsearch,
performance. The insertion time and the index size of the andithasaround125%performancegaininthecaseofthe
B+-treeandthetriearepresentedinFigures9and 10,re- range search. However, the experiments demonstrate that
spectively. ThefiguresdemonstratethattheB+-treescales theR-treehasabetterinsertiontime(Figure13)andabet-
better with respect to both factors. The reason is that the ter index size (Figure 14) than the kd-tree. The reason is
trieinvolvesahighernumberofnodesandahighernumber thatthekd-treeisabinarysearchtree,wherethenodesize
of node splits than the B+-tree because the trie node size (BucketSize)is 1, andalmosteveryinsertresultsina node
is muchsmaller than the B+-tree node size. In Figures11 split. Therefore, the number of the kd-tree nodes is very
and12, we presentthe B+-tree and the trie maximumtree large, and in order for the storage clustering technique to
heightin nodesand pages, respectively. Althoughthe trie reducethetreepage-height,ithastodegradetheindexpage
has higher maximum node-height, as it is an unbalanced utilization,whichresultsinanincreaseintheindexsize.
tree, the maximum page-height is almost the same as the In Figure 15, we compare the performance of the
Proceedings of the 22nd International Conference on Data Engineering (ICDE’06)
8-7695-2570-9/06 $20.00 © 2006 IEEE
Insertion and Search Time Relative Performance NN Search Performance
0.8 100000
001
10000
x
0.6 )eertdauq
)cesm(
1000
0.4
100 RMP/eert-R( emiT
Insert
0.2 Exact Match Search 10 kd-tree
pquadtree
Range Search trie
0 1
250K 500K 1M 2M 4M 8 16 32 64 128 256 512 1024
Relation Size (No. of Keys) Number of NNs
Figure 15. The performance of the R-tree vs. Figure17.NNsearchperformance
thePMRquadtree.
executiontimetakentoanswertheNNquery. We inserted
2Mtuplesineachrelationandvariedtherequirednumberof
Substring Match Search Time Performance
3.5 NNsfrom8to1024(weassumethatthenumberofrequired
3 NNsiscontrolledbytheapplicationusingcursors).Thefig- )eert-xiffus/laitneuqes(
ure illustrates that NN search over the trie is much slower
2.5
than that over the kd-tree and point quadtree. The reason
2
is that the comparison in the case of the trie is performed
1.5
characterbycharacterwhichmakestheconvergencetothe
1 Search Relative performance
next NN relatively slow. Whereas, the comparison in the 01GOL
0.5 case of the kd-tree and quadtree is Partition-based. More-
0 over,theHammingdistancehasaslowprogresscompared
250K 500K 1M 2M 4M
totheEuclideandistanceastheHammingdistanceupdates
Relation Size (No. of Keys)
thedistancevaluewitheither0or1onlyateachstep.
Figure16.Suffixtreesearchperformance.
7 Conclusionand Future Research
PMRquadtreeagainsttheR-treeforindexinglinesegment
datasets. We measured the insertion time and the exact We presentedaseriousattemptatimplementingandre-
match and range (window) search times. The figure illus- alizing SP-GiST-based indexesinside PostgreSQL. We re-
tratesthattheR-treehasabetterinsertionandsearchperfor- alized several index structures, i.e., the trie, kd-tree, point
mancethanthatofthePMRquadtree.Therelativeinsertion quadtree, PMR quadtree, and suffix tree. Several imple-
performancebetween the R-tree and the PMR quadtree is mentationchallenges,experiences,andperformanceissues
almostconstantwiththeincreaseinthedatasize. Whereas, are addressed in the paper. Our experiments demonstrate
the search performancegapdecreaseswith the increase of thepotentialgainoftheSP-GiSTindexes.Forexample,the
thedatasize. Similarresultsarepresentedin[28]. Theex- triehasmorethan150%searchperformanceimprovement
perimentsin[28]showthatundercertainquerytypes,e.g., overtheB+-treeinthecaseoftheexactmatchsearch,and
overlapqueries,thequadtreemayhaveabettersearchper- ithasmorethan2ordersofmagnitudesearchperformance
formancethantheR-tree. gainoverthe B+-treein the case of theregularexpression
Withrespecttothesuffixtreeperformance,weillustrate matchsearch. Thekd-treealsohasmorethan300%search
inFigure16, thesignificantperformancegainofusingthe performanceimprovementovertheR-treeinthecaseofthe
suffixtreeindextosupportthesubstringmatchsearch.The pointmatchsearch.Severaladvancedsearchoperationsare
performancegainis morethan3ordersofmagnitudeover realized inside SP-GiST such as NN search and substring
the sequential scan search. The other index types do not matchoperations. Inadditiontotheperformancegainsand
supportthesubstringmatchsearch. the advanced search functionalities provided by SP-GiST
WemeasuredtheNNsearchperformanceforvariousSP- indexes, it is the ability to rapidly prototypethese indexes
GiSTinstantiationsofindexstructures,mainly,thekd-tree, inside a DBMS that is most attractive. Our experiments
thepointquadtree,andthepatriciatrie. TheEuclideandis- demonstrate also several weaknesses of SP-GiST indexes
tance is used as the distance function for the kd-tree and thatneedto beaddressedin futureresearch. For example,
pointquadtree,whilethe Hammingdistanceisusedasthe theinsertiontimeandtheindexsizeoftheSP-GiSTindexes
distancefunctionforthetrie. InFigure17,weillustratethe involve higher overheadthan those of the B+-tree and the
Proceedings of the 22nd International Conference on Data Engineering (ICDE’06)
8-7695-2570-9/06 $20.00 © 2006 IEEE
R-treeindexes. [22] J.M.HellersteinandA.Pfeffer.Therd-tree:Anindexstruc-
ture for sets. In Univ. of Wisconsin CS Technical Report
1252,1994.
References
[23] G.R.HjaltasonandH.Samet.Rankinginspatialdatabases.
InSDD,pages83–95,1995.
[1] Ibmcorp.: Ibmdb2universaldatabaseapplicationdevelop- [24] E.G.Hoel and H.Samet. Aqualitativecomparison study
mentguide,vs.6. 1999. ofdatastructuresforlargelinesegmentdatabases. InSIG-
[2] W. G. Aref, D. Barbara´, and P. Vallabhaneni. The hand- MOD,pages205–214,1992.
written trie: Indexing electronic ink. In SIGMOD, pages [25] N.KatayamaandS.Satoh. Thesr-tree: anindexstructure
151–162,1995. forhigh-dimensionalnearestneighborqueries.InSIGMOD,
[3] W.G.ArefandI.F.Ilyas. Anextensibleindexforspatial pages369–380,1997.
databases. InSSDBM,pages49–58,2001. [26] G. Kedem. The quad-cif tree: A data structure for hierar-
[4] W.G.ArefandI.F.Ilyas. Sp-gist: Anextensibledatabase chicalon-linealgorithms. In19thconferenceonDesignau-
index forsupporting space partitioningtrees. J.Intell.Inf. tomation,pages352–357,1982.
[27] M. Kornacker. High-performance extensible indexing. In
Syst.,17(2-3):215–240,2001.
VLDB,pages699–708,1999.
[5] R.Bayer. Theuniversalb-treeformultidimensionalindex-
[28] R.Kothuri,S.Ravada,andD.Abugov. Quadtreeandr-tree
ing:generalconcepts. InWWCA,pages198–209,1997.
indexes in oracle spatial: a comparison using gis data. In
[6] R. Bayerand E.M. McCreight. Organizationandmainte-
SIGMOD,pages546–557,2002.
nanceoflargeorderedindices. ActaInf.,1:173–189,1972.
[29] R.K.KothuriandS.Ravada. Efficientprocessingoflarge
[7] N.Beckmann,H.Kriegel,R.Schneider,andB.Seeger. The
spatial queries using interior approximations. In SSTD,
r* -tree: An efficient robust access method for points and
pages404–424,2001.
rectangles. InSIGMODRecord,19(2).,1990.
[30] R.C.NelsonandH.Samet. Apopulationanalysisforhier-
[8] J. L. Bentley. Multidimensional binary search trees used
archicaldatastructures. InSIGMOD,pages270–277,1987.
for associative searching. Commun. ACM, 18(9):509–517,
[31] R.L.Rivest. Partial-matchretrievalalgorithms. InSIAMJ.
1975.
Comput.,5(1),pages19–50,1976.
[9] J. L. Bentley. Multidimensional binary search trees in
[32] J.T.Robinson. Thek-d-b-tree: asearchstructureforlarge
databaseapplications. IEEETSE-5:333–340,1979.
multidimensionaldynamicindexes. InSIGMOD,pages10–
[10] W. A. Burkhard. Hashing and trie algorithms for par-
18,1981.
tialmatchretrieval. ACMTransactions DatabaseSystems,
[33] H.Samet.Thedesignandanalysisofspatialdatastructures.
1(2):175–187,1976.
InAddison-Wesley,ReadingMA,1990.
[11] D. Comer. Ubiquitous b-tree. ACM Comput. Surv., [34] T.K.Sellis,N.Roussopoulos,andC.Faloutsos.Ther+-tree:
11(2):121–137,1979. Adynamicindexformulti-dimensionalobjects. InVLDB,
[12] A.A.Diwan,S.Rane,S.Seshadri,andS.Sudarshan. Clus- pages507–518,1987.
tering techniques for minimizing external path length. In [35] T. K. Sellis, N. Roussopoulos, and C. Faloutsos. Multidi-
VLDB,pages342–353,1996. mensional access methods: Trees havegrown everywhere.
[13] G. Evangelidis, D. B. Lomet, and B. Salzberg. The hb- InVLDB,pages13–14,1997.
pi-tree: Amulti-attributeindexsupportingconcurrency,re- [36] P.Seshadri. Predator: Aresourcefordatabaseresearch. In
coveryandnodeconsolidation. VLDBJournal, 6(1):1–25, SIGMODRecord,27(1),,pages16–20,1998.
1997. [37] J.Srinivasan,R.Murthy,S.Sundara,N.Agarwal,andS.De-
[14] R.Fagin,J.Nievergelt,N.Pippenger,andH.R.Strong. Ex- Fazio. Extensible indexing: a framework for integrating
tendiblehashingafastaccessmethodfordynamicfiles.ACM domain-specificindexing schemes intooracle8i. InICDE,
Trans.DatabaseSyst.,4(3):315–344,1979. pages91–100,2000.
[15] R.A.FinkelandJ.L.Bentley. Quadtrees: Adatastructure [38] M. Stonebraker. Inclusion of new types in relational data
forretrievaloncompositekeys. ActaInf.,4:1–9,1974. basesystems. InICDE,pages262–269,1986.
[16] E. Fredkin. Triememory. Commun. ACM, 3(9):490–499, [39] M. Stonebraker and G. Kemnitz. The postgres next gen-
1960. eration database management system. Commun. ACM,
[17] V. Gaede and O.Go˝nther. Multidimensional access meth- 34(10):78–92,1991.
ods. ACMComput.Surv.,30(2):170–231,1998. [40] Y.TheodoridisandT.Sellis. Amodelforthepredictionof
[18] I.Gargantini.Aneffectivewaytorepresentquadtrees.Com- r-treeperformance. InPODS,pages161–171,1996.
mun.ACM,25(12):905–910,1982. [41] F. Wang. Relational-linear quadtree approach for two-
[19] T. M. Ghanem, R. Shah, M. F. Mokbel, W. G. Aref, and dimensionalspatialrepresentationandmanipulation.TKDE,
J.S.Vitter. Bulkoperationsforspace-partitioningtrees. In 3(1):118–122,1991.
ICDE,pages29–40,2004.
[20] A.Guttman. R-trees: Adynamicindexstructureforspatial
searching. InSIGMOD,pages47–57,1984.
[21] J. M. Hellerstein, J. F. Naughton, and A. Pfeffer. Gener-
alized search trees for database systems. In VLDB, pages
562–573,1995.
Proceedings of the 22nd International Conference on Data Engineering (ICDE’06)
8-7695-2570-9/06 $20.00 © 2006 IEEE