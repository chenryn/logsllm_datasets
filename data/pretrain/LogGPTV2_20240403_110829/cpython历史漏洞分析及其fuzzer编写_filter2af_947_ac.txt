        if (struct_module == NULL) {
            return 0;
        }
        struct_error = PyObject_GetAttrString(struct_module, "error"); // 导出所有的错误对象
        if (struct_error == NULL) {
            return 0;
        }
        struct_unpack_method = PyObject_GetAttrString(struct_module, "unpack"); // 得到unpack函数
        return struct_unpack_method != NULL;
    }
第二步，调用需要`fuzz`的函数，并过滤一些不必要的错误
    /* Fuzz struct.unpack(x, y) */
    static int fuzz_struct_unpack(const char* data, size_t size) {
        /* Everything up to the first null byte is considered the
           format. Everything after is the buffer */
        const char* first_null = memchr(data, '', size);
        if (first_null == NULL) {
            return 0;
        }
        size_t format_length = first_null - data;
        size_t buffer_length = size - format_length - 1;
        PyObject* pattern = PyBytes_FromStringAndSize(data, format_length);
        if (pattern == NULL) {
            return 0;
        }
        PyObject* buffer = PyBytes_FromStringAndSize(first_null + 1, buffer_length);
        if (buffer == NULL) {
            Py_DECREF(pattern);
            return 0;
        }
        PyObject* unpacked = PyObject_CallFunctionObjArgs(
            struct_unpack_method, pattern, buffer, NULL); // 调用函数
        /* Ignore any overflow errors, these are easily triggered accidentally */
        if (unpacked == NULL && PyErr_ExceptionMatches(PyExc_OverflowError)) { // 过滤不必要的错误
            PyErr_Clear();
        }
        /* The pascal format string will throw a negative size when passing 0
           like: struct.unpack('0p', b'') */
        if (unpacked == NULL && PyErr_ExceptionMatches(PyExc_SystemError)) {
            PyErr_Clear();
        }
        /* Ignore any struct.error exceptions, these can be caused by invalid
           formats or incomplete buffers both of which are common. */
        if (unpacked == NULL && PyErr_ExceptionMatches(struct_error)) {
            PyErr_Clear();
        }
        Py_XDECREF(unpacked);
        Py_DECREF(pattern);
        Py_DECREF(buffer);
        return 0;
    }
再添加一下`libfuzzer`调用代码
    #if !defined(_Py_FUZZ_ONE) || defined(_Py_FUZZ_fuzz_struct_unpack)
        static int STRUCT_UNPACK_INITIALIZED = 0;
        if (!STRUCT_UNPACK_INITIALIZED && !init_struct_unpack()) {
            PyErr_Print();
            abort();
        } else {
            STRUCT_UNPACK_INITIALIZED = 1;
        }
        rv |= _run_fuzz(data, size, fuzz_struct_unpack);
    #endif
整个过程完事
这里其实比较麻烦的是过滤错误信息，因为你不一定能知道你要`fuzz`的模块的所有错误信息，很有可能过滤不全，在fuzz的时候会出错，导致需要重新添加过滤条件，再重新开启fuzz，整个过程，我也没有很好的办法，就是不停的试错，最后把无关的错误信息都过滤，下面就会遇到这样的问题
我们上面分析的第一个漏洞`json`已经存在`fuzz`模块了，那么我们就添加第二个`pickle`模块的`fuzz`代码
首先初始化
    PyObject* pickle_loads_method = NULL;
    /* Called by LLVMFuzzerTestOneInput for initialization */
    static int init_pickle_loads() {
        /* Import struct.unpack */
        PyObject* pickle_module = PyImport_ImportModule("pickle");
        if (pickle_module == NULL) {
            return 0;
        }
        pickle_loads_method = PyObject_GetAttrString(pickle_module, "loads");
        return pickle_loads_method != NULL;
    }
`pickle`本身的错误对象，我们需要到`_pickle.c`里面去找，在该文件的最后我们找到了添加错误对象的代码
    PyMODINIT_FUNC
    PyInit__pickle(void)
    {
        PyObject *m;
        PickleState *st;
        m = PyState_FindModule(&_picklemodule);
        if (m) {
            Py_INCREF(m);
            return m;
        }
        if (PyType_Ready(&Pdata_Type) PickleError = PyErr_NewException("_pickle.PickleError", NULL, NULL); // 添加第一个错误对象
        if (st->PickleError == NULL)
            return NULL;
        st->PicklingError = 
            PyErr_NewException("_pickle.PicklingError", st->PickleError, NULL)  // 添加第二个错误对象;
        if (st->PicklingError == NULL)
            return NULL;
        st->UnpicklingError = 
            PyErr_NewException("_pickle.UnpicklingError", st->PickleError, NULL); // 添加第三个错误对象
        if (st->UnpicklingError == NULL)
            return NULL;
        Py_INCREF(st->PickleError);
        if (PyModule_AddObject(m, "PickleError", st->PickleError) PicklingError);
        if (PyModule_AddObject(m, "PicklingError", st->PicklingError) UnpicklingError);
        if (PyModule_AddObject(m, "UnpicklingError", st->UnpicklingError)  MAX_PICKLE_TEST_SIZE) {
            return 0;
        }
        PyObject* input_bytes = PyBytes_FromStringAndSize(data, size);
        if (input_bytes == NULL) {
            return 0;
        }
        PyObject* parsed = PyObject_CallOneArg(pickle_loads_method, input_bytes);
        // 将可能会遇到的各种error加进来。进行忽略
        if (parsed == NULL && // 这里的错误过滤信息，需要一步一步测试，这是我测试的完整列表
                (PyErr_ExceptionMatches(PyExc_ValueError) ||
                PyErr_ExceptionMatches(PyExc_AttributeError) ||
                PyErr_ExceptionMatches(PyExc_KeyError) ||
                PyErr_ExceptionMatches(PyExc_TypeError) ||
                PyErr_ExceptionMatches(PyExc_OverflowError) ||
                PyErr_ExceptionMatches(PyExc_EOFError) ||
                PyErr_ExceptionMatches(PyExc_MemoryError) ||
                PyErr_ExceptionMatches(PyExc_ModuleNotFoundError) ||
                PyErr_ExceptionMatches(PyExc_IndexError) ||
                PyErr_ExceptionMatches(PyExc_UnicodeDecodeError))) 
        {
            PyErr_Clear();
        }
        // pickle自身error进行忽略
        if (parsed == NULL && (
               PyErr_ExceptionMatches(pickle_error) ||
               PyErr_ExceptionMatches(pickling_error) ||
               PyErr_ExceptionMatches(unpickling_error)
        ))
        {
            PyErr_Clear();
        }
        Py_DECREF(input_bytes);
        Py_XDECREF(parsed);
        return 0;
    }
添加`libfuzzer`调用代码
    #if !defined(_Py_FUZZ_ONE) || defined(_Py_FUZZ_fuzz_pickle_loads)
        static int PICKLE_LOADS_INITIALIZED = 0;
        if (!PICKLE_LOADS_INITIALIZED && !init_pickle_loads()) {
            PyErr_Print();
            abort();
        } else {
            PICKLE_LOADS_INITIALIZED = 1;
        }
        rv |= _run_fuzz(data, size, fuzz_pickle_loads);
    #endif
这里需要有一点注意的，如果我们直接利用上面的编译，可以使用，但是很快`fuzz_pickle_loads`就会退出，  
退出的原因在于`libfuzzer`会有内存限制，即使提高了`libfuzzer`的内存使用量，但随着我们测试的深入，依然会因为内存不足  
导致出问题，这个问题困扰了我很久，在不断试错，不断调试后发现最后通过修改`cpython`的源码解决
具体修改`Includepyport.h`里面的代码
    #define PY_SSIZE_T_MAX ((Py_ssize_t)(((size_t)-1)>>1))
修改为
    #define PY_SSIZE_T_MAX 838860800  // 100MB 100 * 1024 * 1024 * 8
这样就解决了`libfuzzer`内存限制，导致`fuzz`不断失败的问题  
修改完后，可能`cpython`某些模块会因为内存过小导致编译失败，这里可以略过，只要我们的`fuzzer`程序能跑起来就行
整个过程折腾了我两天的时间，各种编译和运行错误，最后成功执行
    tmux new -s fuzz_pickle ./out/fuzz_pickle_loads -jobs=60 -workers=6
我用六个线程，大概跑了一周的时间，没有发现任何`crash`，果然这种顶级开源项目相对来说代码质量还是不错的。有兴趣的可以自己跑一下，万一跑出来漏洞了呢 🙂
## 总结
最近大部分时间都是在看开源软件的漏洞，比如网络组件，开源语言等等，开源软件的好处就是我们可以直接根据`commit`，定位到漏洞，了解其漏洞原理和修复方法，之后就是不断分析其中的漏洞，然后想办法能不能自己编写一个`fuzzer`把这些漏洞跑出来，整个过程不断提高自己编写`fuzzer`的能力和分析漏洞的能力。
这类文章我应该会有一个开源漏洞`fuzz`系列，这个是第一篇，感兴趣的话可以关注一下我的[博客](https://github.com/xinali/articles/issues)