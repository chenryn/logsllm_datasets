型Ada项目，叫叫做AFATDS（Advanced Field Artillery Tactical Data
System，高级野战炮兵队战术数据系统）。1988年，我们作出决
定，妻子继续上学，攻读计算机科学的博士学位，我到外面的公司
找一份工作养家。
我的Ada经验符合霍尼韦尔的需要，我受雇成为一个小型团队的成
员，那个团队为7J7项目使用的DDC-IAda运行环境系统做逆向分
解，编写文档，编写覆盖性测试用例。出于速度方面的原因，运行
环境是用汇编语言编写的，所以为运行坏境编写文档的首要工作是
对代码做逆向分解，为每个算法编写一个高级伪代码描述。每个子
程序的目的以及何时被调用也要写到文档中。当77项目被波音公
司取消的时候，这个团队已经把运行环境的文档都写完了。
霍尼韦尔航空运输系统公司对Ada仍旧保持着兴趣，因为知道今后
会有Ada项目，所以我并始为霍尼韦尔公司制定使用Ada的设计和编
码标准。我还编写了一门内部使用的Ada培训课程。这两件事情都
很重要，因为霍尼韦尔没有几个并发人员具备Ada经验，对于当初
设计Ada语言时希望支持的软件工程理论也没有儿个人有经验。总
而言之，我是内部的Ada权威。
没过多久波音公司就开始研制一种新的大型客机——波音777。霍
尼韦尔航空运输系统公司获得了大部分的软件合同。
257
---
## Page 259
在需要开发的软件中，有一个系统叫做AIMS（AircraftInformation
ManagementSystem，飞机信息管理系统）。这个系统全部是用Ada
编写的。在先前的飞行软件中，每个现场替换单元（line
replaceableunit,LRU）都有一个CPU。AIMS将先前分布在多个LRU
的功能整合到了一个系统中。在单个处理器上将运行几个应用程
序。对于飞行过程中关键的软件而言，底层软件要确保一个应用程
序不会偷取其他进程的时间，也不能破坏其他进程的数据。因为多
个相互之间共享信息的时间关键应用程序运行在单个处理器上，所
以AIMS需要一个强劲的处理器。
飞机上的重量永远是一个重要的问题。飞行过程中的每一磅重量都
需要消耗燃料。作为减轻重量的措施之一，AIMS采取的是被动散
热，不提供风扇来散热。
霍尼韦尔的硬件工程师对现有的处理器做了广泛的研究，否决了大
多数流行的摩托罗拉和英特尔芯片，因为它们要么耗电量太大（不
符合被动散热的要求），要么性能不足以完成这项工作。硬件工程
师利用AMD29050能够构建一些早期的原型，结合各种分析，工程
师们最终决定选择AMD29050作为777上的AIMS系统的处理器。用
于开发的宿主系统是运行着VMS的DECVAX计算机，后来又换成了
VAX工作站。
这又带来一个有趣的问题，因为霍尼韦尔向波音公司承诺将使用
Ada来开发AIMS软件，但是在AMD29050上没有可供使用的Ada编
译器。作为Ada老手，我建议重新考虑一下是否选择AMD29050，
编译器的质量以及一些支持工具对开发会带来很大影响，我觉得选
择一个成熟的编译系统是至关重要的。硬件工程师们坚持认为只有
AMD29050才能满足他们的要求，这样霍尼韦尔就需要找一个开发
工具。他们接触了一些Ada编译器开发商，想并发一个编译器和相
关工具，但是由于种种原因，最终都没有结果。于是，霍尼韦尔决
定开发自已的编译器和开发工具。毕竟，霍尼韦尔从前也开发过编
译器。同时他们也认识到，开发Ada编译器和工具比创建一个Pascal
编译器要复杂得多，所以和DDC-I公司结成了伙伴关系。霍尼韦尔
将使用DDC-I的前端技术作为起始点。此外，两位DDC-I的雇员将
作为项目的咨询师参与到工作中。霍尼韦尔软件工具部门的几位工
程师也将参与项目工作。我最初的时候没有加入团队，继续当我的
Ada老手角色。他们准备交付的产品叫做HADS，表示的是
HoneywellAdaDevelopment System（霍尼韦尔Ada开发工具系统）
的意思。
258
---
## Page 260
DDC-I公司刚刚完成一个项目，为英特尔I960处理器开发了一个Ada
开发工具。由于那种处理器和AMD29050都是类似于RISC的处理
器，所以那个项目的源代码就选作了这个项目的起始点。Ada编译
器系统涉及的东西远不止一个生成源代码的编译器。它还需要一个
运行环境系统来管理任务、错误处理和存储管理。在语言内部，
Ada的任务管理是一种允许独立的控制线程进行通信和同步的方
法。异常处理现在在C++、Java这样的语言中已经很常见了，但在
那里还不是一个很常见的概念。Ada的存储管理既允许管理通用
堆，文允许管理其他专用堆。
编译器和链接器是宿主工具，DDC-I将它的DECVAX本机Ada编译
系统用作了开发AdaI960编译器的开发工具，所以很自然，HADS编
译器和链接器也是在DECVAX上编写的。
编译系统的运行环境部分是运行在目标系统上的代码。由于HADS
编译器还无法用于生成所需的代码，所以运行环境是用C和
AM29050汇编语言编写的。在最终的AIMS应用程序中，安全关键
部分将包括运行环境，这部分程序需要按照DO-178B标准编写文档
并进行测试。
因为我最并始的时候不在团队中，我对团队最初的记忆是根据我在
附近的格子间中坐的时候所听到的东西整理的，还有一些内容是他
们事后告诉我的。这里使用的某些并发人员的名字不是真实姓名。
免可能带来的尴尬。
最初的团队
我的格子间和HADS团队成员位于同一区域，所以能够观察到团队
最初的工作。开始的时候真是看不到什么希望。
Tom和Dave是参与项目工作的、由DDC-I公司派来的咨询师，Tom以
前是DDC-I公司I960项目的负责人。他做了很多事情，包括在代码
生成过程中最难的一部分上（也就是如何有效地使用硬件中的寄存
器）担任重要角色。霍尼韦尔的工程师，除了有人可能在上学时构
建过编译器以外，其他人在这方面连一点经验都没有。Tom最初不
是HADS项目的负责人，但总是提供密切的咨询。
259
---
## Page 261
除了设置最初的进度表，项目的第一个主要任务是分析英特尔1960
和AMD29050之间的差异，以便理解前一个项目中哪些代码段可以
保留，哪些需要少量修改，哪些需要完全重写。霍尼韦尔的工程师
们将在Tom和Dave的咨询帮助下完成这项工作。Chris分析影响链接
的架构差异。John分析异常管理的架构影响。Cynthia分析链接问
题。Waleen分析存储管理问题。Ajit分析与Ada任务管理相关的问
题。还有一个称为用户配置码的东西，其接口与Ada任务管理的调
度部分密切相关，所以与此相关的问题也由Ajit来分析。做这些分
析工作的工程师也将成为工具集中相应部分的设计人员。实现阶段
将起用霍尼韦尔更多的一些工程师，包括Dan、Fred、Willis和
Henry。
观察不同的人的工作是非常有趣的。我的格子间离他们很近，能够
得到很多他们如何进展的信息。John没有寻求太多帮助，主要是自
已研究文档。Waleen通常不去找Tom和Dave寻求帮助。因为我们在
7J7文档项目上一起工作过，所以她常常过来问我一两个问题。
Chris花了很长时间和Tom待在一起，但是大多数时候他都在抱怨，
说分给他的任务根本不可能完成。Tom不是很同情他，不肯把他的
任务接过去，但是总是对他需要帮助的领域做一些指点，告诉他在
哪些文档中能够找到相关信息。Fred属于那种有很多好想法的人，
但是似乎不能把想法坚持下去。我记得有好几次我都在想，没有成
为那个团队的一部分，真是让人庆幸。
几个星期后，John认为自己无法胜任这个任务，提出调到别的项目
上。因为我过去有过为Ada运行环境编写文档的经验，所以他们要
求我来顶替John的位置。尽管顾虑重重，但是从政治角度来讲，拒
绝这种安排是不明智的，所以我加入了团队，承担的第一个职责是
异常管理。第一次会议是检查两个系统的差异，那时进展不算太
多，但是John留下了一些相当好的文档。这是第一次高层次设计会
议，在那时我已经能够说出影响异常管理的主要架构问题了。但
是，我加入那个项目比较晚，所以我负责的那部分还是有风险的。
在那次会议上，Chris还展示了哪些架构差异会影响代码生成。会议
上人人都看出他实际上什么事情也没有做。很显然，他并始的时候
拿了DDC-I公司的I960文档，在上面做了一些编辑修改。常常地
整段整段的话都是关于I960的，跟AMD29050没有什么关系。在某
些地方，他似乎只是用编辑器把"1960"替换成了"AMD29050"，有
些语句明显是错的。真是太糟糕了，因为很显然，代码生成是编译
系统中最重要的一部分。我想我一定是被那次展示给惊呆了，对于
260
---
## Page 262
会议上大家的反应已经记不住太多了。我不记得有谁直接批评了
Chris，但是他展示的内容中的错误和疏忽之处肯定是被大家指出来
了。那次会议并没有让我对项目的成功增加一点信心。
Dave后来告诉我，他和Tom在返回座位的路上讨论了Chris的表现是
多么糟糕。他们无法相信，他连一点进展也没有。他们决定去找霍
尼韦尔软件工具组的主管，把Chris调离这个项目组。有趣的是，
Chris在会后也提出把自己调离这个项目组。其他领域的分析，虽然
不像Chris负责的那么糟糕，但似乎也陷人了困境。第一个主要的截
正日期，也就是能够编译、链接并运行一个"HelloWorld"程序，似
乎很难达成了。团队中的很多人都没有尽力。
走上正轨
为了让项目走上正轨，必须采取一些措施。团队进行了重组，并
且，尽管截止日期已经迫近，我们还是把团队规模缩小了。Chris被
换走了。Fred调到了另外一个项目上。Willis和Henry换到了777的另
外一个支持角色上，777代码中有一小部分要用到C编译器，他们去
从事C编译器的工作了。此外还从DDC-I公司增加了一名咨询师
Peter。Tom正式接管了项目，担任项目负责人。团队将先前没有完
成的工作细分了一下，识别出处理器中影响代码生成和运行环境实
现的那些特性。编译器前端不用修改就可以使用。为了编译和运
行"HelloWorld"程序，只有非常少的一部分代码生成和最少量的运
行坏境需要编译。虽然马上就到第一个截正日期了，但我们总算赴
在那个日期之前完成了。
接下来，一些团队成员并始详细设计并实现存储管理、任务管理和
运行坏境的异常管理。其他人继续更多的代码生成。
Waleen设计并实现了存储管理。在高层次上，很多算法可以和I960
使用的算法很相似。最大的问题是1960是用汇编语言写的，所以需
要完全重新写。Waleen也必须学习汇编语言。
利用一种叫做用户可配置码（UserConfigurableCode，UCC）的底层
代码可以编写很小的一部分代码，这部分代码用于运行环境和实际
硬件的接口调用。UCC中的代码包括I/O低级代码、操作计时器的代
码、处理陷阱和中断的代码。这些代码需要在这个阶段设计、实
现。Ajit在做UCC方面的工作。
261
---
## Page 263
任务管理代码是从I960拿过来的，所以绝大部分都可以使用。需要
处理的难题不是Ada的任务管理结构，而在于独立控制线程的一般
处理方式，例如如何切换环境并处理中断。处理中断和环境切换与
UCC所做的硬件处理密切相关，所以这部分工作也是Ajit做的。
我所做的工作是异常管理的设计和实现。算法的一般形式和目的不
需要修改，但是底层实现涉及很多架构上的差异。这部分代码是用
C语言编写的。Metaware公司可以提供AMD29050上使用的C编译
器，但是没有源码级的调试器。在一个指令集模拟器上可以运行程
序，做机器级别的调试。编译器可以生成混合源代码和汇编后的程
序清单，所以可以用来将源代码和生成的、用于调试的机器码关联
起来。没有源码级的调试工具可能会很不方便，但是采取上述做
法，程序清单和机器码级别的调试就提供了足够的并发环境。此外
还带来一个好处，那就是我不得不学习很多机器语言的知识。这为
我后来从事代码生成器的部分工作带来了帮助。
Cynthia继续链接器方面的工作，团队其他成员处理其他结构的代码
生成部分。
在Ada标准中（Ada83），有一部分标准定义了一个叫做Ada编译器
验证能力（AdaCompilerValidationCapability，ACVC）的测试套
件。为了通过验证，编译器和相关的运行环境必须通过ACVC在编
译环境下的所有测试。第一个截正日期是能够运行"HelloWorld"，