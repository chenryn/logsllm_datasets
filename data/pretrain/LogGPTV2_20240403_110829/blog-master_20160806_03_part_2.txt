Free the "harmless" pages first: Pages included in disk and memory caches not referenced by any process should be reclaimed before pages belonging to the User Mode address spaces of the processes; in the former case, in fact, the page frame reclaiming can be done without modifying any Page Table entry. As we will see in the section "The Least Recently Used (LRU) Lists" later in this chapter, this rule is somewhat mitigated by introducing a "swap tendency factor."  
Make all pages of a User Mode process reclaimable: With the exception of locked pages, the PFRA must be able to steal any page of a User Mode process, including the anonymous pages. In this way, processes that have been sleeping for a long period of time will progressively lose all their page frames.  
Reclaim a shared page frame by unmapping at once all page table entries that reference it: When the PFRA wants to free a page frame shared by several processes, it clears all page table entries that refer to the shared page frame, and then reclaims the page frame.  
Reclaim "unused" pages only: The PFRA uses a simplified Least Recently Used (LRU) replacement algorithm to classify pages as active and inactive. If a page has not been accessed for a long time, the probability that it will be accessed in the near future is low and it can be considered "inactive;" on the other hand, if a page has been accessed recently, the probability that it will continue to be accessed is high and it must be considered as "active." The main idea behind the LRU algorithm is to associate a counter storing the age of the page with each page in RAM that is, the interval of time elapsed since the last access to the page. This counter allows the PFRA to reclaim the oldest page of any process. Some computer platforms provide sophisticated support for LRU algorithms; unfortunately, 80 x 86 processors do not offer such a hardware feature, thus the Linux kernel cannot rely on a page counter that keeps track of the age of every page. To cope with this restriction, Linux takes advantage of the Accessed bit included in each Page Table entry, which is automatically set by the hardware when the page is accessed; moreover, the age of a page is represented by the position of the page descriptor in one of two different lists  
Active vs inactive memory  
The PFRA classifies memory into active and inactive. /proc/meminfo provides the current active and inactive memory. Here is an eg -  
[root@server]# cat /proc/meminfo  
MemTotal: 132093140 kB  
MemFree: 591272 kB  
Buffers: 239488 kB  
Cached: 125650056 kB  
SwapCached: 0 kB  
Active: 25157088 kB  
Inactive: 103410468 kB  
HighTotal: 0 kB  
HighFree: 0 kB  
This shows that active memory is 25 GB while inactive is 103 GB. Starting from Linux Kernel 2.6.xx onwards these functions are handled by pdflush and kswapd and the Page Frame Reclaiming Algorithm.  
Linux maintains two lists in the page cache - the Active List and the Inactive List. The Page Frame Reclaiming Algorithm gathers pages that were recently accessed in the active list so that it will not scan them when looking for a page frame to reclaim. Conversely, the PFRA gathers the pages that have not been accessed for a long time in the inactive list. Of course, pages should move from the inactive list to the active list and back, according to whether they are being accessed.  
Clearly, two page states ("active" and "inactive") are not sufficient to describe all possible access patterns. For instance, suppose a logger process writes some data in a page once every hour. Although the page is "inactive" for most of the time, the access makes it "active," thus denying the reclaiming of the corresponding page frame, even if it is not going to be accessed for an entire hour. Of course, there is no general solution to this problem, because the PFRA has no way to predict the behavior of User Mode processes; however, it seems reasonable that pages should not change their status on every single access.  
The PG_referenced flag in the page descriptor is used to double the number of accesses required to move a page from the inactive list to the active list; it is also used to double the number of "missing accesses" required to move a page from the active list to the inactive list (see below). For instance, suppose that a page in the inactive list has the PG_referenced flag set to 0. The first page access sets the value of the flag to 1, but the page remains in the inactive list. The second page access finds the flag set and causes the page to be moved in the active list. If, however, the second access does not occur within a given time interval after the first one, the page frame reclaiming algorithm may reset the PG_referenced flag.  
The active and inactive memory can be used to infer a bunch of stuff as follows -  
Active (file) can be used to determine what portion of the disk cache is actively in use  
Inactive memory is the best candidate for reclaiming memory and so low inactive memory would mean that you are low on memory and the kernwl may have to swap out process pages, or swap out the cache to disk or in the worst case if it runs out of swap space then begin killing processes  
Rough PFRA algo  
Memory space is divided into memory used by processes, disk cache, free memory and memory used by kernel  
Periodically pages from the memory are marked as active or inactive based on whether they have been accessed recently  
Periodically or if memory is low then pages are reclaimed from the inactive list first and then the active list as follows -  
The page to be reclaimed must be swappable, syncable or discardable  
If the page is dirty it is written out to disk and reclaimed  
If the page belongs to a user mode process it is written out to swap space  
Pages are reclaimed using the active/inactive list in an LRU manner as described above  
Depending on the "swappiness" variable, pages of a user mode process maybe preferred over disk cache pages when reclaiming memory  
If there are very few discardable and syncable pages and the swap space is full then the system runs out of memory and invokes the OOM killer  
OOM  
Despite the PFRA effort to keep a reserve of free page frames, it is possible for the pressure on the virtual memory subsystem to become so high that all available memory becomes exhausted. This situation could quickly induce a freeze of every activity in the system: the kernel keeps trying to free memory in order to satisfy some urgent request, but it does not succeed because the swap areas are full and all disk caches have already been shrunken. As a consequence, no process can proceed with its execution, thus no process will eventually free up the page frames that it owns.  
To cope with this dramatic situation, the PFRA makes use of a so-called out of memory (OOM) killer, which selects a process in the system and abruptly kills it to free its page frames. The OOM killer is like a surgeon that amputates the limb of a man to save his life: losing a limb is not a nice thing, but sometimes there is nothing better to do.  
The out_of_memory() when the free memory is very low and the PFRA has not succeeded in reclaiming any page frames. The function selects a victim among the existing processes, then invokes oom_kill_process() to perform the sacrifice.  
Of course the process is not picked at random. The selected process should satisfy several requisites:  
The victim should own a large number of page frames, so that the amount of memory that can be freed is significant. (As a countermeasure against the "fork-bomb" processes, the function considers the amount of memory eaten by all children owned by the parent, too)  
Killing the victim should lose a small amount of workit is not a good idea to kill a batch process that has been working for hours or days.  
The victim should be a low static priority processthe users tend to assign lower priorities to less important processes.  
The victim should not be a process with root privileges they usually perform important tasks.  
The victim should not directly access hardware devices (such as the X Window server), because the hardware could be left in an unpredictable state.  
The victim cannot be swapper (process 0), init (process 1), or any other kernel thread.  
The function scans every process in the system, uses an empirical formula to compute from the above rules a value that denotes how good selecting that process is, and returns the process descriptor address of the "best" candidate for eviction. Then the out_of_memory( ) function invokes oom_kill_process( ) to send a deadly signal - usually SIGKILL; either to a child of that process or, if this is not possible, to the process itself. The oom_kill_process( ) function also kills all clones (referring here to LWPs) that share the same memory descriptor with the selected victim  
One indicator of running into OOM is to look at the combination of free memory, Inactive memory and free swap in /proc/meminfo as explained below -  
[user@server ~]$ cat /proc/meminfo  
MemTotal: 12305340 kB  
MemFree: 79968 kB  
Buffers: 165376 kB  
Cached: 3500048 kB  
SwapCached: 0 kB  
Active: 9819744 kB  
Inactive: 1787500 kB  
SwapTotal: 2048276 kB  
SwapFree: 2047668 kB  
Dirty: 80108 kB  
In the above example -  
Free memory is 79 MB  
This means whenever the kernel requires additional memory it must reclaim memory by swapping out process pages to swap or writing file pages to disk. The primary candidate for reclaiming memory is the Inactive memory which in the above case is a healthy 1.7 GB. If there is no inactive memory to reclaim then the kernel would look at active memory. Lastly if no active file pages are available to write to disk, and all active process pages have been swapped out OR the swap space is full then the OOM killer would be activated.  
If your server ever has an issue where the OOM killer was activated you have seriously neglected your memory monitoring. This condition must NEVER take place on any server.  
Using drop_cache  
Check http://linux-mm.org/Drop_Caches to learn how to drop the page cache in Linux. You can experiment with this command in combination with the output of meminfo (Cached, Active memory, Inactive memory) and fincore to determine how much of your data store is typically loaded into cache within how much time and what portion of it is extremely active.  
Measuring memory utilization  
atop  
MEM | tot 126.0G | free 6.4G | cache 113.2G | dirty 924.9M | buff 394.7M | slab 1.8G   
SWP | tot 2.0G | free 2.0G | vmcom 10.1G | vmlim 65.0G |  
atop shows the system memory as a whole broken up as -  
MEM  
tot: total physical memory  
free: free physical memory  
cache: amount of memory used for the page cache  
dirty: amount of page cache that is currently dirty  
buff: the amount of memory used for filesystem meta data  
slab: amount of memory being used for kernel mallocs  
SWP  
tot: total amount of swap space on disk  
free: amount of swap space that is free  
PAG (appears only if there is data to show in the interval)  
scan: number of scanned pages due to the fact that free memory drops below a particular threshold  
stall: number of times that the kernel tries to reclaim pages due to an urgent need  
swin/swout: Also the number of memory pages the system read from swap space ('swin') and the number of memory pages the system wrote to swap space ('swout') are shown  
/proc/meminfo  
> cat /proc/meminfo  
[bhavin.t@mongo-history-1 ~]$ cat /proc/meminfo  
MemTotal: 62168992 kB  
MemFree: 287900 kB  
Buffers: 12264 kB  
Cached: 59953784 kB  
SwapCached: 0 kB  
Active: 29934172 kB  
Inactive: 30168836 kB  
Active(anon): 137004 kB  
Inactive(anon): 24 kB  
Active(file): 29797168 kB  
Inactive(file): 30168812 kB  
Unevictable: 0 kB  
Mlocked: 0 kB  
SwapTotal: 0 kB  
SwapFree: 0 kB  
Dirty: 10832 kB  
Writeback: 0 kB  
AnonPages: 136704 kB  
Mapped: 863444 kB  
Shmem: 68 kB  
Slab: 1526616 kB  
SReclaimable: 1498556 kB  
SUnreclaim: 28060 kB  
KernelStack: 1520 kB  
PageTables: 110824 kB  
NFS_Unstable: 0 kB  
Bounce: 0 kB  
WritebackTmp: 0 kB  
CommitLimit: 31084496 kB  
Committed_AS: 393640 kB  
VmallocTotal: 34359738367 kB  
VmallocUsed: 116104 kB  
VmallocChunk: 34359620200 kB  
DirectMap4k: 63496192 kB  
DirectMap2M: 0 kB  
MemTotal: Total usable ram (i.e. physical ram minus a few reserved bits and the kernel binary code)  
MemFree: The sum of LowFree+HighFree (essentially total free memory)  
Buffers: Relatively temporary storage for raw disk blocks shouldn't get tremendously large (20MB or so)  
Cached: Page cache. Doesn't include SwapCached  
SwapCached: Memory that once was swapped out, is swapped back in but still also is in the swapfile (if memory is needed it doesn't need to be swapped out AGAIN because it is already in the swapfile. This saves I/O)  
Active: Memory that has been used more recently and usually not reclaimed unless absolutely necessary.  
anon: active memory that is not file backed (check http://www.linuxjournal.com/article/10678 for a desc on anonymous pages). this will typically be the higher chunk of active memory on a app server machine which does not have a db  
file: active memory that is file backed. this will typically be the higher chunk of active memory on a data store machine that reads / writes from disk  
Inactive: Memory which has been less recently used. It is more eligible to be reclaimed for other purposes  
HighTotal/HighFree: Highmem is all memory above ~860MB of physical memory. Highmem areas are for use by userspace programs, or for the pagecache. The kernel must use tricks to access this memory, making it slower to access than lowmem.  
LowTotal/LowFree: Lowmem is memory which can be used for everything that highmem can be used for, but it is also available for the kernel's use for its own data structures. Among many other things, it is where everything from the Slab is allocated. Bad things happen when you're out of lowmem.  
SwapTotal: total amount of swap space available  
SwapFree: Memory which has been evicted from RAM, and is temporarily on the disk  
Dirty: Memory which is waiting to get written back to the disk  
Writeback: Memory which is actively being written back to the disk  
Mapped: files which have been mmaped, such as libraries  
Slab: in-kernel data structures cache  
Committed_AS — The total amount of memory, in kilobytes, estimated to complete the workload. This value represents the worst case scenario value, and also includes swap memory. PageTables — The total amount of memory, in kilobytes, dedicated to the lowest page table level.  
VMallocTotal — The total amount of memory, in kilobytes, of total allocated virtual address space.  
VMallocUsed — The total amount of memory, in kilobytes, of used virtual address space.  
VMallocChunk — The largest contiguous block of memory, in kilobytes, of available virtual address space.  
/proc/vmstat  
This file shows detailed virtual memory statistics from the kernel. Most of the counters explained below are available only if you have kernel compiled with VM_EVENT_COUNTERS config option turned on. That's so because most of the parameters below have no function for the kernel itself, but are useful for debugging and statistics purposes  
[user@server proc]$ cat /proc/vmstat  
nr_anon_pages 2014051  
nr_mapped 11691  
nr_file_pages 890051  
nr_slab_reclaimable 128956  
nr_slab_unreclaimable 9670  
nr_page_table_pages 5628  
nr_dirty 15158  
nr_writeback 0  
nr_unstable 0  
nr_bounce 0  
nr_vmscan_write 4737  
pgpgin 2280999  
pgpgout 76513335  
pswpin 0  
pswpout 152  
pgalloc_dma 1  
pgalloc_dma32 27997500  
pgalloc_normal 108826482  
pgfree 136842914  
pgactivate 24663564  
pgdeactivate 8083378  
pgfault 266178186  
pgmajfault 2228  
pgrefill_dma 0  
pgrefill_dma32 6154199  
pgrefill_normal 19920764  
pgsteal_dma 0  
pgsteal_dma32 0  
pgsteal_normal 0  
pgscan_kswapd_dma 0  
pgscan_kswapd_dma32 3203616  
pgscan_kswapd_normal 4431168  
pgscan_direct_dma 0  
pgscan_direct_dma32 1056  
pgscan_direct_normal 2368  
pginodesteal 0  
slabs_scanned 391808  
kswapd_steal 7598807  
kswapd_inodesteal 0  
pageoutrun 49495  
allocstall 37  
pgrotated 154  
nr_anon_pages  
nr_mapped - pages mapped by files  
nr_file_pages -  