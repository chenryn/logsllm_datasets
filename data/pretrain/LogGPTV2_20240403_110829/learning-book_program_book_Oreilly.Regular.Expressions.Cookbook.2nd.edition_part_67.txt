((？：[^V:*？"<>|r\n]+\)*)
([u\x|<>/\])
Regex options: Free-spacing, case insensitive
Regex flavors: .NET, Java, PCRE, Perl, Python, Ruby
([a-2]:/[a-20-9_-$-]+[a-z0-9_$-]+/)
((？:[^V/:*?"<>|r\n]+\)*)([^\V/:*><>|\r\n]*)$
Regexoptions: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Discussion
The regular expressions in this recipe are very similar to the ones in the previous recipe.
This discussion assumes you’ve already read and understood the discussion of the pre-
vious recipe.
Drive letter paths
We’ve made only one change to the regular expressions for drive leter paths, compared
to the ones in the previous recipe. We’ve added three capturing groups that you can
use to retrieve the various parts of the path: , folder, and file>. You can use
these names if your regex flavor supports named capture (Recipe 2.11). If not, you'll
have to reference the capturing groups by their numbers: 1, 2, and 3. See Recipe 3.9 to
8.19 Split Windows Paths into Their Parts 1 491
---
## Page 508
learm how to get the text matched by named and/or numbered groups in your favorite
programming language
Drive letter and UNC paths
We've added the same three capturing groups to the regexes for UNC paths.
Drive letter, UNC, and relative paths
Things get a bit more complicated if we also want to allow relative paths. In the previous
recipe, we could just add a third altermative to the drive part of the regex to match the
start of the relative path. We can’t do that here In case of a relative path, the capturing
Instead, the literal backslash that was after the capturing group for the drives in the
regex in the “drive letter and UNC paths" section is now moved into that capturing
group. We add it to the end of the alternatives for the drive letter and the network share.
We add a third altermative with an optional backslash for relative paths that may or
may not begin with a backslash. Because the third altermative is optional, the whole
group for the drive is essentially optional.
The resulting regular expression correctly matches all Windows paths. The problem is
that by making the drive part optional, we now have a regex in which everything is
optional. The folder and file parts were already optional in the regexes that support
absolute paths only. In other words: our regular expression will match the empty string.
If we want to make sure the regex doesn’t match empty srings, we'’d have to add
additional alternatives to deal with relative paths that specify a folder (in which case
the filename is optional), and relative paths that don’t specify a folder (in which case
the filename is mandatory):
\A
(?:
(?[a-z]:\[a-z0-9_$-]+\\[az0-9_-$]+)
(?(？:[^/:*²<>|rn]+\\)*)
（?[\v/:*²"<>|x\n]*）
(?\\?(?:[^\\/:*?*<>|\r\n]+\\)+)
（[\x\|<>/\]>)
(?[^\\/:*?"<>|\r\n]+)
Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java 7, PCRE 7, Perl 5.10, Ruby 1.9
\A
(?:
(?P[a-z]:1\\[a-z0-9_,$-]+\[a-z0-9_$-]+)\\
(?P(?:[^\\/:*？*<>|\r\n]+\\)*)
(?P[^\\/:*？*<>|\r\n]*)
492 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 509
(?P\\?(?:[^\\/:*"<>|r\n]+\\)+)
(?P[^\V/:*><>|\r\n]*)
(?P[^\\/:*?”<>|\r\n]+)
Z
Regex options: Free-spacing, case insensitive
Regexflavers: PCRE 4 and later, Perl 5.10, Python
\A
(?:
([a-2]:[a-z0-9_-$-]+[a-z0-9_-$-]+)
((2：[/：*？²<>\rn]+\)*)
（[:*²<>rin]*)
(\?(？:[\/:*<>|\r\n]+)+)
([^\V:*？"<>|r\n]*)
([^\V/:*"<>|\r\n]+)
Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
(?：([a-z]: 1[a-20-9_,$-]+√[a-z0-9_$-]+)
（(？：[^V/:*？"<>|r\n]+\√)*)([^\V/:*?<>\r\n]*)](\\(？:[^\V/:*?"<>|
x\n]+\）+)([/:*？*{r\n]+））s
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python 
The price we pay for excluding zero-length strings is that we now have six capturing
groups to capture the three different parts of the path. You'll have to look at the scenario
in which you want to use these regular expressions to determine whether it’s easier to
do an extra check for empty strings before using the regex or to spend more effort in
dealing with multiple capturing groups after a match has been found.
aes aq sdno8 paueu adnu aat8 ues am L3N' 1o °6°[ Kqna 01'S [ad Busn uau
 1t' ag u  ed to  as   s. os a a 
details. This way we can simply get the match of the folder or file group, without wor
rying about which of the rwo folder groups or three file groups actually participated in
the regex match:
\A
(?:
(?[a-z]:|\\[a-z0-9_$-]+\\[a-z0-9_-$-]+)\
(?(？:[V/:*"<>|rn]+\)*)
(?[^\\V/:*?"<>|\r\n]*)
(?\\>(?:[^\/:*?"<>\rn]+\\)+)
(?[^\\V/:*?"<>|\r\n]*)
(+[x|<>/]<>)
Z
8.19 Split Windows Paths into Their Parts 1 493
---
## Page 510
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Perl 5.10, Ruby 1.9
See Also
Recipe 8.18 validates a Windows path using simpler regular expressions without sep-
arate capturing groups for the drive, folder, and file.
Recipe 3.9 shows code to get the text matched by a particular part (capturing group)
of a regex. Use this to get the parts of the path you're interested in.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.2 explains
how to match nonprinting characters. Recipe 2.3 explains character classes.
Recipe 2.5 explains anchors. Recipe 2.8 explains altermation. Recipe 2.9 explains
grouping. Recipe 2.11 explains named capturing groups. Recipe 2.12 explains
repetition.
8.20ExtracttheDriveLetterfromaWindowsPath
Problem
You have a string that holds a (syntactically) valid path to a file or folder on a Windows
PC or network. You want to extract the drive letter, if any, from the path. For example,
you want to extract g from c:\folder\file.ext.
Solution
^([a-z]):
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Extracting the drive letter from a string known to hold a valid path is trivial, even if you
don’t know whether the path actually starts with a drive letter, The path could be a
relative path or a UNC path.
Colons are invalid characters in Windows paths, except to delimit the drive letter. Thus,
if we have a letter followed by a colon at the start of the string, we know the letter is
the drive letter.
The anchor (^> matches at the start of the string (Recipe 2.5). The fact that the caret
also matches at embedded line breaks in Ruby doesn’t matter, because valid Windows
paths don’t include line breaks. The character class  matches at the start of the string (Recipe 2.5). The fact that the caret
also matches at embedded line breaks in Ruby doesn’t matter, because valid Windows
paths don’t include line breaks. |\r\n]+\\)+)
Regex options: Case insensitive
Regexflavers: NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Discussion
Extracting the folder from a Windows path is a bit tricky if we want to support UNC
paths, because we can't just grab the part of the path between backslashes. If we did,
we'd be grabbing the server and share from UNC paths too.
The first part of the regex, , skips
over the drive lertter or the network server and network share names at the start of the
path. This piece of the regex consists of a capturing group with rwo alternatives. The
first alternative matches the drive letter, as in Recipe 8.20, and the second alternative
matches the server and share in UNC paths, as in Recipe 8.21. Recipe 2.8 explains the
altermation operator.
The question mark after the group makes it optional. This allows us to support relative
paths, which don’t have a drive letter or network share.
The folders are easily matched with (?: [^\V/:*?*<>|\r\n]+\\)+, The character class
matches a folder name. The noncapturing group matches a folder name followed by a
literal backslash that delimits the folders from each other and from the filename. We
496 | Chapter 8: URLs, Paths, and Intemet Addresses
---
## Page 513
repeatthis group one ormore times. This means our regularexpression will match only
those paths that actually specify a folder. Paths that specify only a filename, drive, or
network share won’t be matched.
If the path begins with a drive letter or network share, that must be followed by a
backslash. A relative path may or may not begin with a backslash. Thus, we need to
add an optional backslash to the start of the group that matches the folder part of the
path. Since we will only use our regex on paths known to be valid, we don't have to be
strict about requiring the backslash in case of a drive letter or network share. W'e only
have to allow for it.
Because we require the regex to match at least one folder, we have to make sure that
 rather than ) to add the optional backslash at the start of the capruring
our regex doesn’t match e as the folder in \\server\share\. That's why we use
group for the folder.
folder, review Recipe 2.13. Regular expression engines backtrack. Imagine this regex:
If you’re wondering why servershar might be matched as the drive and e as the
([a-2]:1[a-20-9_$-]+, The engine backtracks by forcing the character
class to give up one character, and then it tries to continue.
When the engine continues, it has rwo remaining characters in the subject string to
match the folder: e\. These two characters are enough to satisfy \r\n]
+\)+>, and we have an overall match for the regex. But it’s not the match we wanted.
Using  solves this. It still allows for an optional backslash, but
when the backslash is missing, it requires the folder to begin at the start of the string.
This means that if a drive has been matrched, and thus the regex engine has proceeded
beyond the start of the string, the backslash is required. The regex engine will still try
to backtrack if it can’t match any folders, but it will do so in vain because
(\|^) will fail to match. The regex engine will backtrack until i is back at the start
of the string, The capturing group for the drive letter and network share is optional, so
the regex engine is welcome to try to match the folder at the start of the string.
Although r does not allow the colon that follows the drive letter orthe double
backslash of the network share.
8.22 Extract the Folder fromaWindows Path | 497
---
## Page 514
If you're wondering why we don't use this technique in Recipes Recipe 8.18 and
Recipe 8.19, that's because those regular expressions don’t require a folder. Since ev-
erything after the part that matches the drive in those regexes is optional,the regex
different problems, as discussed in Recipe 8.19.
engine never does any backtracking. Of course, making things optional can lead to
When this regular expression finds a match, the first capturing group will hold the drive
letter or nerwork share, and the second capturing group will hold the folder. The first
capturing group will be empty in case of a relative path. The second capturing group
willalwayscontain at leastone folder. If youusethis regex on a path that doesn’t specify
a folder, the regex won’t find a match at all.
See Also
Recipe 2.9 tells you all about capruring groups.
See Recipe 3.9 to learn how to retrieve text matched by capruring groups in yourfavorite
programming language.
Follow Recipe 8.19 if you don’t know in advance that yoursring holds a valid Windows
path.
8.23ExtracttheFilenamefromaWindowsPath
Problem
You have a string that holds a (syntactically) valid path to a file or folder on a Windows
PC or network, and you want to extract the filename, if any, from the path. For example,
you want to extract file,ext from c:\folder\file.ext.
Solution
[\\/:*？*<>|\r\n]+$
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Extracting the filename from a string known to hold a valid path is trivial, even if you
don’t know whether the path actually ends with a filename.
The filename always occurs at the end of the string. It can’t contain any colons or
backslashes, so it cannot be confused with folders, drive letters, or nerwork shares,
which all use backslashes and/or colons.
The anchor 
498 | Chapter 8: URLs, Paths, and Intemet Addresses
---
## Page 515
r\n]+ (Recipe 2.3) matches the characters that can occur in filenames. Though the
regex engine scans the string from left to right, the anchor at the end of the regex makes
sure that only the last run of filename characters in the string will be matched, giving
us our filename.
If the string ends with a backslash, as it will for paths that don’t specify a filename, the
regex won't match at all. When it does match, it will match only the filename, so we
ued suposau aq uo aueuay au aeaedas osdnouguundes ue sn o1pasu,uop
See Also
See Recipe 3.7 to leam how to retrieve text matched by the regular expression in your