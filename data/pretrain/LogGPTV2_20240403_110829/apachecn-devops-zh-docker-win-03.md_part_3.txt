        return 0
    } else {
        return 1
    } 
catch { return 1 }
```
对于更复杂的 web 应用，添加一个专门用于运行状况检查的新端点可能会很有用。您可以向应用接口和网站添加一个诊断端点，该端点执行应用的一些核心逻辑，并返回一个布尔结果来指示应用是否健康。您可以在 Docker 运行状况检查中调用此端点，并检查响应内容以及状态代码，以便让您更加确信应用工作正常。
Dockerfile 中的`HEALTHCHECK`指令非常简单。您可以配置检查之间的间隔以及在容器被认为不健康之前可能失败的检查数量，但是要使用默认值，只需在`HEALTHCHECK CMD`中指定测试脚本。`dockeronwindows/ch03-iis-healthcheck:2e`映像的 Dockerfile 中的以下示例使用 PowerShell 向诊断 URL 发出`GET`请求，并检查响应状态代码:
```
HEALTHCHECK --interval=5s `
 CMD powershell -command `
    try { `
     $response = iwr http://localhost/diagnostics -UseBasicParsing; `
     if ($response.StatusCode -eq 200) { return 0} `
     else {return 1}; `
    } catch { return 1 }
```
我已经为运行状况检查指定了一个时间间隔，因此 Docker 将每 5 秒钟在容器内执行一次该命令(如果没有指定时间间隔，默认时间间隔是 30 秒)。运行健康检查非常便宜，因为它是在容器本地进行的，所以您可以像这样有一个很短的时间间隔，并快速发现任何问题。
这个 Docker 映像中的应用是一个 ASP.NET Web API 应用，它有一个诊断端点和一个控制器，您可以使用它来切换应用的运行状况。Docker 文件包含一个运行状况检查，当您从该映像运行容器时，您可以看到 Docker 如何使用它:
```
docker container run -d -P --name healthcheck dockeronwindows/ch03-iis-healthcheck:2e
```
如果您在启动该容器后运行`docker container ls`，您将在状态字段中看到略有不同的输出，类似于`Up 3 seconds (health: starting)`。Docker 每 5 秒钟对该容器运行一次运行状况检查，因此此时，检查尚未运行。再等一会儿，状态就像`Up 46 seconds (healthy)`了。
您可以通过查询`diagnostics`端点来检查应用编程接口的当前运行状况:
```
$port = $(docker container port healthcheck).Split(':')[1]
iwr "http://localhost:$port/diagnostics"
```
在返回的内容中，您将看到`"Status":"GREEN"`表示 API 是健康的。这个容器将保持健康，直到我调用控制器来切换健康。我可以通过一个`POST`请求做到这一点，该请求设置应用编程接口为所有后续请求返回 HTTP 状态`500`:
```
iwr "http://localhost:$port/toggle/unhealthy" -Method Post
```
现在，应用将对 Docker 平台发出的所有`GET`请求做出 500 响应，这将导致运行状况检查失败。Docker 一直在尝试运行状况检查，如果一行中有三个失败，那么它认为容器是不健康的。此时，容器列表中的状态字段显示`Up 3 minutes (unhealthy)`。Docker 不会对不健康的单个容器采取自动操作，所以这个容器保持运行，您仍然可以访问该 API。
当您开始在集群 Docker 环境中运行容器时，运行状况检查非常重要(我在第 7 章、*中介绍了使用 Docker Swarm* 编排分布式解决方案)，最好将它们包含在所有 Docker 文件中。能够打包一个平台可以测试运行状况的应用是一个非常有用的特性——这意味着无论你在哪里运行该应用，Docker 都可以对其进行检查。
现在，您拥有了将 ASP.NET 应用容器化并使其成为一个好的 Docker 公民的所有工具，与平台集成在一起，因此可以像其他容器一样对其进行监控和管理。一个完整的。在 Windows Server Core 上运行的. NET Framework 应用无法满足运行单个进程的预期，因为需要所有必要的后台 Windows 服务，但是您仍然应该构建容器映像，以便它们只运行一个逻辑函数并分离任何依赖关系。
# 分离依赖关系
在最后一章中，我整理了旧的 NerdDinner 应用，并让它运行，但没有数据库。原始应用应该在运行该应用的同一主机上使用 SQL Server 本地数据库。LocalDB 是一个基于 MSI 的安装，我可以通过下载 MSI，用 Dockerfile 中的`RUN`命令安装，将其添加到 Docker 镜像中。但这意味着当我从映像启动一个容器时，它有两个功能:托管一个 web 应用和运行一个数据库。
Having two functions in one container is not a good idea. What would happen if you wanted to upgrade your website without changing the database? Or what if you needed to do some maintenance on the database, which didn't impact the website? What if you need to scale out the website? By coupling the two functions together, you've added deployment risk, test effort, and administration complexity, and reduced your operational flexibility.
相反，我将把数据库打包到一个新的 Docker 映像中，在一个单独的容器中运行它，并使用 Docker 的网络层从网站容器访问数据库容器。SQL Server 是一个许可产品，但免费的变体是 SQL Server Express，它可以从微软以 Docker Hub 上的映像形式获得，并附带生产许可证。我可以将此作为我的映像的基础，在此基础上构建一个预配置的数据库实例，部署模式并准备连接到 web 应用。
# 为 SQL Server 数据库创建 Docker 映像
设置数据库映像就像任何其他 Docker 映像一样。我将把设置任务封装在一个 Dockerfile 中。总的来说，对于一个新的数据库，步骤将是:
1.  安装 SQL Server
2.  配置 SQL 服务器
3.  运行 DDL 脚本来创建数据库模式
4.  运行 DML 脚本来填充静态数据
这非常适合使用 Visual Studio 的 SQL 数据库项目类型和 Dacpac 部署模型的典型构建过程。发布项目的输出是一个`.dacpac`文件，其中包含数据库模式和要运行的任何自定义 SQL 脚本。使用`SqlPackage`工具，您可以将 Daccap 文件部署到一个 SQL Server 实例，如果不存在数据库，它将创建一个新的数据库，或者升级一个现有的数据库，使模式与 Daccap 相匹配。
这种方法非常适合定制的 SQL Server Docker 映像。我可以对 Dockerfile 再次使用多阶段构建，因此其他用户不需要安装 Visual Studio 来从源代码打包数据库。这是`dockeronwindows/ch03-nerd-dinner-db:2e`映像的 Dockerfile 的第一阶段:
```
# escape=`
FROM microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019 AS builder
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]
# add SSDT build tools
RUN nuget install Microsoft.Data.Tools.Msbuild -Version 10.0.61804.210
# add SqlPackage tool
ENV download_url="https://download.microsoft.com/download/6/E/4/6E406.../EN/x64/DacFramework.msi"
RUN Invoke-WebRequest -Uri $env:download_url -OutFile DacFramework.msi ; `
    Start-Process msiexec.exe -ArgumentList '/i', 'DacFramework.msi', '/quiet', '/norestart' -NoNewWindow -Wait; `
    Remove-Item -Force DacFramework.msi
WORKDIR C:\src\NerdDinner.Database
COPY src\NerdDinner.Database .
RUN msbuild NerdDinner.Database.sqlproj `
  /p:SQLDBExtensionsRefPath="C:\Microsoft.Data.Tools.Msbuild.10.0.61804.210\lib\net46" `
  /p:SqlServerRedistPath="C:\Microsoft.Data.Tools.Msbuild.10.0.61804.210\lib\net46" 
```
这里有很多，但都很简单。`builder`阶段从微软开始.NET 框架 SDK 映像。这给了我`NuGet`和`MSBuild`，但没有给我构建 SQL Server Dacpac 所需的依赖。前两条`RUN`说明安装了 SQL Server 数据工具和`SqlPackage`工具。如果我有许多数据库项目要打包，我可以将它打包成一个单独的 SQL Server SDK 映像。
该阶段的其余部分只是复制 SQL 项目源，并运行`MSBuild`来生成 Dacpac。
这是 Dockerfile 的第二个阶段，它打包了要在 SQL Server Express 中运行的 NerdDinner Dacpac:
```
FROM dockeronwindows/ch03-sql-server:2e
ENV DATA_PATH="C:\data" `
    sa_password="N3rdD!Nne720^6"
VOLUME ${DATA_PATH}
WORKDIR C:\init
COPY Initialize-Database.ps1 .
CMD powershell ./Initialize-Database.ps1 -sa_password $env:sa_password -data_path $env:data_path -Verbose
COPY --from=builder ["C:\\Program Files...\\DAC", "C:\\Program Files...\\DAC"]
COPY --from=builder C:\docker\NerdDinner.Database.dacpac . 
```
I'm using my own Docker image with SQL Server Express 2017 installed here. Microsoft do have SQL Server images published on Docker Hub for Windows and Linux, but the Windows versions haven't been regularly maintained. SQL Server Express is freely distributed, so you can package it into your own Docker image (the Dockerfile for `dockeronwindows/ch03-sql-server` is on GitHub in the `sixeyed/docker-on-windows` repository).
除了你目前看到的，这里没有新的说明。有一个为 SQL Server 数据文件设置的卷，以及一个将默认数据文件路径设置为`C:\data`的环境变量。您会看到没有`RUN`命令，所以我在构建映像时实际上并没有设置数据库模式；我只是将 Dacpac 文件打包到映像中，这样当容器启动时，我就拥有了创建或升级数据库所需的一切。
在`CMD`指令中，我运行了一个建立数据库的 PowerShell 脚本。有时在一个单独的脚本中隐藏所有的启动细节并不是一个好主意，因为这意味着你不能仅仅从 Dockerfile 中看到容器运行时会发生什么。但是在这种情况下，启动过程有相当多的功能，如果我们把它们都放在那里，它们会形成一个巨大的 Dockerfile。
基本的 SQL Server Express 映像定义了一个名为`sa_password`的环境变量来设置管理员密码。我扩展了这个映像，并为变量设置了一个默认值。我将以同样的方式使用该变量，以便允许用户在运行容器时指定管理员密码。启动脚本的其余部分处理在 Docker 卷中存储数据库状态的问题。
# 管理 SQL Server 容器的数据库文件
数据库容器类似于任何其他 Docker 容器，但侧重于状态。您需要确保您的数据库文件存储在容器之外，这样您就可以替换数据库容器而不会丢失任何数据。正如我们在上一章中看到的那样，您可以很容易地用卷来实现这一点，但是有一个陷阱。
如果使用已部署的数据库架构构建自定义的 SQL Server 映像，则数据库文件将位于映像内部的已知位置。您可以在不装载卷的情况下从该映像运行容器，它将正常工作，但数据将存储在容器的可写层中。如果在需要执行数据库升级时更换容器，那么您将丢失所有数据。
相反，您可以使用从主机装载的卷运行容器，从主机目录映射预期的 SQL Server 数据目录，因此您的文件位于容器之外的主机上的已知位置。这样，您可以确保数据文件存储在可靠的地方，例如服务器上的 RAID 阵列。但这意味着您不能在 Dockerfile 中部署数据库，因为数据目录将在映像中存储数据文件，如果您在目录上装载卷，这些文件将被隐藏。