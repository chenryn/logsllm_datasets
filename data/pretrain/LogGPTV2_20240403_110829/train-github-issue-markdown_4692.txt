I was playing with passing around a trait that only has static methods. It
works okay, but it appears that this confuses the dead code lint. Here's an
example:
    trait Visitor {
        fn foo();
    }
    fn visit, R>() {
        Visitor::::foo()
    }
    struct V;
    impl Visitor for V {
        fn foo() { println!("hi") }
    }
    pub fn main() {
        visit()
    }
Which warns with:
    serde2.rs:9:1: 9:10 warning: struct is never used: `V`, #[warn(dead_code)] on by default
    serde2.rs:9 struct V;
                ^~~~~~~~~
As best as I can tell, Rust is able to infer that there's only one
implementation possible and uses it, but this information isn't conveyed to
the lint, so it marks the struct as being unused.